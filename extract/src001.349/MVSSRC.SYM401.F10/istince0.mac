SVTM     TITLE ' SSCP -- ISTINCE0 -- DIAL OUT START                    *
                        '
ISTINCE0 CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(16)                                          01S0001
         DC    C'ISTINCE0  78.016'                              01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @12,0                                            01S0001
@PSTART  DS    0H                                               01S0001
         USING @PSTART,@12                                      01S0001
*      /* MAINLINE CODE OF ISTINCE0 -- DIAL OUT START */        01S0112
* DO;                                                           01S0112
*/***  CRRMAINT  PROCNM(ISTINCE0)COMP(VY)FUNC(SUB)RPHADD((NCSPLRPH))  *
**/                                                             01S0113
*                                                               01S0113
*/* ATBUILD (ISTRPH,ISTCRA,ISTPFCRR,ISTVYCRR)  */               01S0113
*/* END OF ATBUILD */                                           01S0113
* /*** SET ENTERED BIT FOR THIS PROCEDURE ***/                  01S0113
*NCSPLRPH->RPHCRR->CRACRR->NINCE0 = '1'B;                       01S0113
         L     @15,NCSPLRPH(,R1)                                01S0113
         L     @15,RPHCRR(,@15)                                 01S0113
         L     @15,CRACRR(,@15)                                 01S0113
         OI    NINCE0(@15),B'00010000'                          01S0113
* /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/                 01S0114
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                       01S0114
         XC    VYCCRT+1(11,@15),VYCCRT+1(@15)                   01S0114
         MVI   VYCCRT(@15),B'00000000'                          01S0114
*NCSPLRPH->RPHCRR->CRACRR->CINCE0 = '1'B;                       01S0115
         OI    CINCE0(@15),B'00010000'                          01S0115
* END;                                                          01S0116
*GEN REFS(CE0WAPTR) (   USING  @DATD,CE0WAPTR);                 01S0117
            USING  @DATD,CE0WAPTR
*RFY R15 RSTD;                                                  01S0118
*R15=REGSAPTR;   /* SAVE THE CALLER'S REGISTER SAVEAREA POINTER */
         LR    R15,REGSAPTR                                     01S0119
*REGSAPTR=REGSAPTR-LENGTH(CE0REGSV); /* DECREMENT REG 13 BY 72 */
         SL    REGSAPTR,@CF01287                                01S0120
*CE0SVBKP=R15;   /* POINT THIS ROUTINE'S SAVEAREA TO THE CALLER'S */
         ST    R15,CE0SVBKP(,REGSAPTR)                          01S0121
*CE0SVFWP=ZERO;  /* ZERO THIS ROUTINE'S SAVEAREA FORWARD POINTER */
         SLR   @14,@14                                          01S0122
         ST    @14,CE0SVFWP(,REGSAPTR)                          01S0122
*R15->CE0SVFWP=REGSAPTR; /* POINT CALLER'S SAVEAREA TO THIS SAVEAREA */
         ST    REGSAPTR,CE0SVFWP(,R15)                          01S0123
*RFY R15 UNRSTD;                                                01S0124
*CE0WAPTR=NXTAVAIL;/* GET THE NEXT AVAILABLE ADDRESS IN THE WORKAREA*/
         L     @15,NCSPLWKA(,R1)                                01S0125
         L     CE0WAPTR,NXTAVAIL(,@15)                          01S0125
*CE0WAPTR=(CE0WAPTR+SEVEN)&MINUS8;  /* RESET POINTER TO A DOUBLE
*                                      WORD BOUNDRY                  */
         LA    @00,7                                            01S0126
         ALR   @00,CE0WAPTR                                     01S0126
         N     @00,@CF01116                                     01S0126
         LR    CE0WAPTR,@00                                     01S0126
*NXTAVAIL=CE0WAPTR+@SIZDATD; /* RESET NEXT AVAILABLE BEYOND THIS
*                       ROUTINE'S DYNAMIC AREA */               01S0127
         LR    @00,CE0WAPTR                                     01S0127
         AL    @00,@SIZDATD                                     01S0127
         ST    @00,NXTAVAIL(,@15)                               01S0127
*NCSPLPTR=R1;    /* GET THE NCSPL ADDRESS */                    01S0128
         LR    NCSPLPTR,R1                                      01S0128
*RFY ISTNCSPL BASED(NCSPLPTR);                                  01S0129
*LUPTR=NCSPLRPT;     /* SAVE THE LU'S ADDRESS */                01S0130
         L     LUPTR,NCSPLRPT(,NCSPLPTR)                        01S0130
*NCSPLLPT=LUPTR;     /* SAVE LU ADDR FOR CALL TO POST (CD8)  @DM14254*/
         ST    LUPTR,NCSPLLPT(,NCSPLPTR)                        01S0131
*PUPTR=LUPTR->RPRNSNEA;   /* GET THE PU'S ADDRESS */            01S0132
         L     PUPTR,RPRNSNEA(,LUPTR)                           01S0132
*R1=NCSPLRPH;     /* GET THE CURRENT RPH ADDRESS */             01S0133
         L     R1,NCSPLRPH(,NCSPLPTR)                           01S0133
*    /* LOCK THE PU RDTE (OC LOCK) EXCLUSIVE */                 01S0134
*/*** START -TPLOCK (OCLOCK)TYPE(XCLSIVE)- ***/                 01S0134
* DO;                                                           01S0134
* RFY (GPR00P,GPR01P,GPR02P,GPR03P,GPR04P,GPR15P) RSTD;         01S0135
*        GENERATE REFS(GPR00P,GPR01P,GPR15P,RPHWORK) SETS(RPHWORK);
         STM GPR00P,GPR14P,RPHWORK(GPR01P)
*        GPR02P = ADDR(RPRRLOCK);       /*SET PARAM - LOCKWORD PTR*/
         LA    GPR02P,RPRRLOCK(,PUPTR)                          01S0137
*        GPR04P = GPR01P->RPHCRR;       /*SET PARAM - ISTCRA PTR*/
         L     GPR04P,RPHCRR(,GPR01P)                           01S0138
*        GPR00P = CRALMS04;             /*SET PARAM - LOCK LEVEL FLAG*/
         LA    GPR00P,8                                         01S0139
*        GPR03P = ADDR(GPR04P->CRAL4PTR);                       01S0140
         LA    GPR03P,CRAL4PTR(,GPR04P)                         01S0140
*                                       /*SET PARAM - LOCK LEVEL PTR*/
*        GPR15P=ATCLCPTR->ATCAP36;      /*ADDRESS OF LOCK ROUTINE*/
         L     @05,ATCLCPTR                                     01S0141
         L     GPR15P,ATCAP36(,@05)                             01S0141
*        DCL FMZL0011 BASED(GPR15P) LABEL VALUERANGE(*);        01S0142
*        CALL FMZL0011;                                         01S0143
         BALR  @14,@15                                          01S0143
*        GENERATE REFS(GPR00P,GPR01P,GPR14P,RPHWORK) SETS(GPR00P,GPR01P
*GPR02P,GPR03P,GPR04P,GPR05P,GPR06P,GPR07P,GPR08P,GPR09P,GPR10P,GPR11P,
*PR12P,GPR13P,GPR14P,GPR15P);                                   01S0144
*                                                               01S0144
         LM GPR00P,GPR15P,RPHWORK(GPR01P)
* RFY (GPR00P,GPR01P,GPR02P,GPR03P,GPR04P,GPR15P) UNRSTD;       01S0145
*        END;                                                   01S0146
*/*** END -TPLOCK (OCLOCK)TYPE(XCLSIVE)- ***/                   01S0147
*NCSVSTAT=ON;    /* MARK THE CURRENT NCSPL STATIC */            01S0147
         OI    NCSVSTAT(NCSPLPTR),B'00100000'                   01S0147
*IF RCCRESET=ON                 /* IF DEACTIVATING & RESET   @ZA19893*/
*  THEN                                                    /*@ZA19893*/
         TM    RCCRESET(PUPTR),B'00000100'                      01S0148
         BNO   @RF00148                                         01S0148
*    DO;                                                   /*@ZA19893*/
*     /* QUEUE NCSPL TO RDT. PABPURGE (CX8) WILL REQUE       @ZA19893*/
*     /* TO SWITCHED HDR VARY PAB                            @ZA19893*/
*                                                               01S0150
*/*  TPQUE (NCSPLPTR,RCCRVPT2) NONE */                          01S0150
*                                                               01S0150
*       DO;                                                     01S0150
*       RFY (GPR00P,GPR01P,GPR02P,GPR14P,GPR15P) RSTD;          01S0151
*       GEN REFS(GPR01P) SETS(RPHWORK)                          01S0152
*        (STM GPR02P,GPR08P,RPHWORK(GPR01P));                   01S0152
         STM GPR02P,GPR08P,RPHWORK(GPR01P)
*       GPR15P=NCSPLPTR; /* GET WORK ELEM POINTER */            01S0153
         LR    GPR15P,NCSPLPTR                                  01S0153
*       GPR14P=ADDR(RCCRVPT2); /* ADDRESS PAB/QUEUE POINTER */  01S0154
         LA    GPR14P,RCCRVPT2(,PUPTR)                          01S0154
*       GPR15P=GPR15P×PABWEQG1;                                 01S0155
         O     GPR15P,@CF03415                                  01S0155
*       GPR02P=GPR14P->PABWEQA;/* INITIALIZE WITH QUEUE HEADER */
         L     GPR02P,PABWEQA(,GPR14P)                          01S0156
*CMZA0016:; /* CS FAIL TARGET */                                01S0157
CMZA0016 DS    0H                                               01S0158
*       GPR00P=GPR02P; /* SAVE QUEUE CONTENTS */                01S0158
         LR    GPR00P,GPR02P                                    01S0158
*       GPR15P->PABCHAIN=GPR02P×PABWEQG1; /*FORWARD CHAIN WORK ELEMENT*
         LR    @09,GPR02P                                       01S0159
         O     @09,@CF03415                                     01S0159
         ST    @09,PABCHAIN(,GPR15P)                            01S0159
*       CS   (GPR02P,GPR15P,GPR14P->PABWEQA); /* CHECK FOR END OF QUEUE
**/     BC (7,CMZA0016);                                        01S0160
         CS    GPR02P,@15,PABWEQA(GPR14P)                       01S0160
         BC    7,CMZA0016                                       01S0161
*       GEN REFS(RPHWORK,GPR01P) NOSETS                         01S0162
*        (LM    GPR02P,GPR08P,RPHWORK(GPR01P));                 01S0162
         LM    GPR02P,GPR08P,RPHWORK(GPR01P)
*       RFY (GPR00P,GPR01P,GPR02P,GPR14P,GPR15P) UNRSTD;        01S0163
*       END; /**** END OF TPQUE GENERATION ****/                    /*@
*A19893*/                                                       01S0164
*      CALL UNLOCK;                                        /*@ZA19893*/
         BAL   @14,UNLOCK                                       01S0165
*    END;                                                  /*@ZA19893*/
*  ELSE                                                    /*@ZA19893*/
*    DO;                                                   /*@ZA19893*/
         B     @RC00148                                         01S0167
@RF00148 DS    0H                                               01S0168
*NCSPLRPT=PUPTR;   /* SET NCSPL RPT TO THE PU'S ENTRY ADDR   @ZA19893*/
         ST    PUPTR,NCSPLRPT(,NCSPLPTR)                        01S0168
*IF LUPTR->RPRONLIN=OFF             /* LU OFFLINE?                   */
* THEN                                                          01S0169
         TM    RPRONLIN(LUPTR),B'00001000'                      01S0169
         BNZ   @RF00169                                         01S0169
*  DO;                              /* POST BACK OPNDST AS 'DEVICE
*                                      OFFLINE'                      */
*   DPQPTR=RCCDPQ;                  /* SAVE 'DIAL PENDING QUEUE'
*                                      POINTER                       */
         L     DPQPTR,RCCDPQ(,PUPTR)                            01S0171
*   RCCDPQ=ZERO;                    /* ZERO OUT 'DIAL PENDING QUEUE'
*                                      POINTER IN PU                 */
         SLR   @09,@09                                          01S0172
         ST    @09,RCCDPQ(,PUPTR)                               01S0172
*   /* QUEUE THE CURRENT NCSPL TO THE PU'S DIAL PENDING QUEUE        */
*                                                               01S0173
*/*  TPQUE (NCSPLPTR,RCCDPQ) NONE */                            01S0173
*                                                               01S0173
*    DO;                                                        01S0173
*    RFY (GPR00P,GPR01P,GPR02P,GPR14P,GPR15P) RSTD;             01S0174
*    GEN REFS(GPR01P) SETS(RPHWORK)                             01S0175
*        (STM GPR02P,GPR08P,RPHWORK(GPR01P));                   01S0175
         STM GPR02P,GPR08P,RPHWORK(GPR01P)
*    GPR15P=NCSPLPTR; /* GET WORK ELEM POINTER */               01S0176
         LR    GPR15P,NCSPLPTR                                  01S0176
*    GPR14P=ADDR(RCCDPQ); /* ADDRESS PAB/QUEUE POINTER */       01S0177
         LA    GPR14P,RCCDPQ(,PUPTR)                            01S0177
*    GPR15P=GPR15P×PABWEQG1;                                    01S0178
         O     GPR15P,@CF03415                                  01S0178
*    GPR02P=GPR14P->PABWEQA;/* INITIALIZE WITH QUEUE HEADER */  01S0179
         L     GPR02P,PABWEQA(,GPR14P)                          01S0179
*CMZA0022:; /* CS FAIL TARGET */                                01S0180
CMZA0022 DS    0H                                               01S0181
*    GPR00P=GPR02P; /* SAVE QUEUE CONTENTS */                   01S0181
         LR    GPR00P,GPR02P                                    01S0181
*    GPR15P->PABCHAIN=GPR02P×PABWEQG1; /*FORWARD CHAIN WORK ELEMENT*/
         LR    @09,GPR02P                                       01S0182
         O     @09,@CF03415                                     01S0182
         ST    @09,PABCHAIN(,GPR15P)                            01S0182
*    CS   (GPR02P,GPR15P,GPR14P->PABWEQA); /* CHECK FOR END OF QUEUE */
         CS    GPR02P,@15,PABWEQA(GPR14P)                       01S0183
*    BC (7,CMZA0022);                                           01S0184
         BC    7,CMZA0022                                       01S0184
*    GEN REFS(RPHWORK,GPR01P) NOSETS                            01S0185
*        (LM    GPR02P,GPR08P,RPHWORK(GPR01P));                 01S0185
         LM    GPR02P,GPR08P,RPHWORK(GPR01P)
*    RFY (GPR00P,GPR01P,GPR02P,GPR14P,GPR15P) UNRSTD;           01S0186
*    END; /**** END OF TPQUE GENERATION ****/                   01S0187
*   NCSIORC='08'X;                  /* SET MAJOR FEEDBACK CODE TO
*                                      LOGIC ERROR                   */
         MVI   NCSIORC(NCSPLPTR),X'08'                          01S0188
*   NCSPRMRC='4A'X;                 /* SET MINOR FEEDBACK CODE TO
*                                      DISTINATION UNAVAILABLE --
*                                      OFFLINE                       */
         MVI   NCSPRMRC(NCSPLPTR),X'4A'                         01S0189
*   NCSSENSE=ZERO;                  /* INDICATE NO SENSE INFO        */
         SLR   @09,@09                                          01S0190
         ST    @09,NCSSENSE(,NCSPLPTR)                          01S0190
*   CALL DIALPOST;                  /* INVOKE DIAL POST SUBROUTINE   */
         BAL   @14,DIALPOST                                     01S0191
*   RCCDPQ=DPQPTR;                  /* RESTORE THE SAVED 'DIAL PENDING
*                                      QUEUE' POINTER                */
         ST    DPQPTR,RCCDPQ(,PUPTR)                            01S0192
*   CALL UNLOCK;                    /* INVOKE THE TPUNLOCK SUBROUTINE*/
         BAL   @14,UNLOCK                                       01S0193
*  END;                             /* END OF LU OFFLINE             */
* ELSE                                                          01S0195
*  DO;                              /* LU IS NOT OFFLINE -           */
         B     @RC00169                                         01S0195
@RF00169 DS    0H                                               01S0196
*    /* QUEUE THE CURRENT NCSPL TO THE PU'S DIAL PENDING QUEUE */
*/*  TPQUE (NCSPLPTR,RCCDPQ) NONE */                            01S0196
*                                                               01S0196
* DO;                                                           01S0196
* RFY (GPR00P,GPR01P,GPR02P,GPR14P,GPR15P) RSTD;                01S0197
* GEN REFS(GPR01P) SETS(RPHWORK)                                01S0198
*        (STM GPR02P,GPR08P,RPHWORK(GPR01P));                   01S0198
         STM GPR02P,GPR08P,RPHWORK(GPR01P)
* GPR15P=NCSPLPTR; /* GET WORK ELEM POINTER */                  01S0199
         LR    GPR15P,NCSPLPTR                                  01S0199
* GPR14P=ADDR(RCCDPQ); /* ADDRESS PAB/QUEUE POINTER */          01S0200
         LA    GPR14P,RCCDPQ(,PUPTR)                            01S0200
* GPR15P=GPR15P×PABWEQG1;                                       01S0201
         O     GPR15P,@CF03415                                  01S0201
* GPR02P=GPR14P->PABWEQA;/* INITIALIZE WITH QUEUE HEADER */     01S0202
         L     GPR02P,PABWEQA(,GPR14P)                          01S0202
*CMZA0028:; /* CS FAIL TARGET */                                01S0203
CMZA0028 DS    0H                                               01S0204
* GPR00P=GPR02P; /* SAVE QUEUE CONTENTS */                      01S0204
         LR    GPR00P,GPR02P                                    01S0204
* GPR15P->PABCHAIN=GPR02P×PABWEQG1; /*FORWARD CHAIN WORK ELEMENT*/
         LR    @03,GPR02P                                       01S0205
         O     @03,@CF03415                                     01S0205
         ST    @03,PABCHAIN(,GPR15P)                            01S0205
* CS   (GPR02P,GPR15P,GPR14P->PABWEQA); /* CHECK FOR END OF QUEUE */
         CS    GPR02P,@15,PABWEQA(GPR14P)                       01S0206
* BC (7,CMZA0028);                                              01S0207
         BC    7,CMZA0028                                       01S0207
* GEN REFS(RPHWORK,GPR01P) NOSETS                               01S0208
*        (LM    GPR02P,GPR08P,RPHWORK(GPR01P));                 01S0208
         LM    GPR02P,GPR08P,RPHWORK(GPR01P)
* RFY (GPR00P,GPR01P,GPR02P,GPR14P,GPR15P) UNRSTD;              01S0209
* END; /**** END OF TPQUE GENERATION ****/                      01S0210
*IF RPRONLIN=OFF     /* PU OFFLINE?  */                         01S0211
* THEN                                                          01S0211
         TM    RPRONLIN(PUPTR),B'00001000'                      01S0211
         BNZ   @RF00211                                         01S0211
*  DO;         /* PU WAS OFFLINE -- */                          01S0212
*   NCSIORC='08'X;   /* SET MAJOR FEEDBACK CODE TO LOGIC ERROR */
         MVI   NCSIORC(NCSPLPTR),X'08'                          01S0213
*   NCSPRMRC='4A'X;   /* SET MINOR FEEDBACK CODE TO DESTINATION 01S0214
*                        UNAVAILABLE - OFFLINE */               01S0214
         MVI   NCSPRMRC(NCSPLPTR),X'4A'                         01S0214
*   NCSSENSE=ZERO;   /* INDICATE NO SENSE INFORMATION */        01S0215
         SLR   @09,@09                                          01S0215
         ST    @09,NCSSENSE(,NCSPLPTR)                          01S0215
*   CALL DIALPOST;   /* INVOKE THE DIAL POST SUBROUTINE */      01S0216
         BAL   @14,DIALPOST                                     01S0216
*     /* RELEASE THE PU RDTE (OC) LOCK */                       01S0217
*   CALL UNLOCK;                                                01S0217
         BAL   @14,UNLOCK                                       01S0217
*  END;          /* END OF PU WAS OFFLINE */                    01S0218
* ELSE                                                          01S0219
*  IF RPRCONCT=ON    /* IS THE PU ALREADY CONNECTED? */         01S0219
*   THEN                                                        01S0219
         B     @RC00211                                         01S0219
@RF00211 TM    RPRCONCT(PUPTR),B'01000000'                      01S0219
         BNO   @RF00219                                         01S0219
*    DO;        /* YES - PU ALREADY CONNECTED */                01S0220
*     NCSIORC=ZERO; /* SET MAJOR AND MINOR FEEDBACK CODES TO PROCEED */
         MVI   NCSIORC(NCSPLPTR),X'00'                          01S0221
*     NCSPRMRC=ZERO;                                            01S0222
         MVI   NCSPRMRC(NCSPLPTR),X'00'                         01S0222
*     CALL DIALPOST;  /* INVOKE THE DIAL POST SUBROUTINE */     01S0223
         BAL   @14,DIALPOST                                     01S0223
*      /* RELEASE THE PU RDTE (OC) LOCK */                      01S0224
*     CALL UNLOCK;                                              01S0224
         BAL   @14,UNLOCK                                       01S0224
*    END;        /* END OF PU ALREADY CONNECTED */              01S0225
*   ELSE                                                        01S0226
*    IF RCCDIALP=ON    /* DIAL ALREADY IN PROGRESS?  */         01S0226
*     THEN DO;  /* YES - RELEASE THE PU RDTE LOCK - NO FURTHER  01S0226
*                  PROCESSING REQUIRED AT THIS TIME */          01S0226
         B     @RC00219                                         01S0226
@RF00219 TM    RCCDIALP(PUPTR),B'01000000'                      01S0226
         BNO   @RF00226                                         01S0226
*       CALL UNLOCK;                                            01S0228
         BAL   @14,UNLOCK                                       01S0228
*      END;                                                     01S0229
*     ELSE                                                      01S0230
*      DO;        /* DIAL NOT IN PROGRESS -- */                 01S0230
         B     @RC00226                                         01S0230
@RF00226 DS    0H                                               01S0231
*         /* RELEASE THE PU RDTE (OC) LOCK AND START DIAL OUT   01S0231
*            PROCESSING */                                      01S0231
*       CALL UNLOCK;                                            01S0231
         BAL   @14,UNLOCK                                       01S0231
*/* OBTAIN AND INITIALIZE THE SWITCH TO 370X AND 370X TO SWITCH 02S0232
*   NCSPLS                                                           */
*IF RPRHDTYP=RPRENTSW     /* THIS ENTRY IN A SWITCHED SUBAREA? */
* THEN                                                          02S0232
         CLI   RPRHDTYP(PUPTR),X'04'                            02S0232
         BNE   @RF00232                                         02S0232
*  DO;         /* YES - ENTRY IN SWITCHED SUBAREA */            02S0233
*/* OBTAIN THE SWITCH TO 370X AND 370X TO SWITCH NCSPLS              */
*RFY ISTVYCRR BASED(NCSPLRPH->RPHCRR->CRACRR);                  03S0234
*RFY ISTGTNCS BASED(ADDR(VYCRRCW3));                            03S0235
*GTNCSAD=ZERO;   /* INDICATE GET A NCSPL */                     03S0236
         L     @09,NCSPLRPH(,NCSPLPTR)                          03S0236
         L     @15,RPHCRR(,@09)                                 03S0236
         L     @15,CRACRR(,@15)                                 03S0236
         LA    @14,118                                          03S0236
         ALR   @14,@15                                          03S0236
         SLR   @00,@00                                          03S0236
         ST    @00,GTNCSAD(,@14)                                03S0236
*GTNCSREQ=ON;    /* INDICATE NCSPL MAY BE REQSTORED */          03S0237
*GTNCSRQU=OFF;    /* INDICATE NOT TO WAIT FOR CORE */           03S0238
*GTNCSWKA=OFF;   /* INDICATE WORKAREA IS DESIRED */             03S0239
         OI    GTNCSREQ(@14),B'10000000'                        03S0239
         NI    GTNCSRQU(@14),B'10011111'                        03S0239
*RFY (R0,R15) RSTD;                                             03S0240
*R0=ADDR(VYCRRCW3);  /* PUT PARAMETER LIST ADDRESS IN REG 0 */  03S0241
         ST    @15,@TF00001                                     03S0241
         L     @14,@TF00001                                     03S0241
         LA    R0,VYCRRCW3(,@14)                                03S0241
*R1=NCSPLRPH;         /* PUT CURRENT RPH ADDRESS IN REG 1 */    03S0242
         LR    R1,@09                                           03S0242
*CALL ISTINCW3;   /* INVOKE THE GET NCSPL ROUTINE */            03S0243
         L     @09,NCSPLCVT(,NCSPLPTR)                          03S0243
         L     @15,ATCINCW3(,@09)                               03S0243
         BALR  @14,@15                                          03S0243
*IF R15=ZERO    /* NCSPLS OBTAINED?  */                         03S0244
* THEN                                                          03S0244
         SLR   @14,@14                                          03S0244
         CR    R15,@14                                          03S0244
         BNE   @RF00244                                         03S0244
*  DO;      /* YES - NCSPLS OBTAINED */                         03S0245
*   NCSPL1=GTNCSAD;  /* SAVE NEW NCSPL 1 ADDRESS */             03S0246
         L     @09,NCSPLRPH(,NCSPLPTR)                          03S0246
         L     @09,RPHCRR(,@09)                                 03S0246
         LA    @07,118                                          03S0246
         AL    @07,CRACRR(,@09)                                 03S0246
         L     @09,GTNCSAD(,@07)                                03S0246
         ST    @09,NCSPL1                                       03S0246
*   GTNCSAD=ZERO;   /* INDICATE GET ANOTHER NCSPL */            03S0247
         ST    @14,GTNCSAD(,@07)                                03S0247
*   CALL ISTINCW3;  /* INVOKE THE GET NCSPL ROUTINE */          03S0248
         L     @09,NCSPLCVT(,NCSPLPTR)                          03S0248
         L     @15,ATCINCW3(,@09)                               03S0248
         BALR  @14,@15                                          03S0248
*   IF R15=ZERO   /* SECOND NCSPL OBTAINED? */                  03S0249
*    THEN NCSPL2=GTNCSAD; /* YES - SAVE THE NEW NCSPL 2 ADDRESS */
         LTR   R15,R15                                          03S0249
         BNZ   @RF00249                                         03S0249
         L     @14,NCSPLRPH(,NCSPLPTR)                          03S0250
         L     @14,RPHCRR(,@14)                                 03S0250
         L     @14,CRACRR(,@14)                                 03S0250
         L     @14,GTNCSAD+118(,@14)                            03S0250
         ST    @14,NCSPL2                                       03S0250
*    ELSE                                                       03S0251
*     DO;    /* SECOND NCSPL NOT OBTAINED */                    03S0251
         B     @RC00249                                         03S0251
@RF00249 DS    0H                                               03S0252
*      GTNCSAD=NCSPL1;  /* PUT FIRST NCSPL ADDRESS IN PARM LIST */
         L     @14,NCSPLRPH(,NCSPLPTR)                          03S0252
         L     @14,RPHCRR(,@14)                                 03S0252
         L     @14,CRACRR(,@14)                                 03S0252
         L     @09,NCSPL1                                       03S0252
         ST    @09,GTNCSAD+118(,@14)                            03S0252
*      CALL ISTINCW3; /* FREE THE FIRST NCSPL */                03S0253
         L     @09,NCSPLCVT(,NCSPLPTR)                          03S0253
         L     @15,ATCINCW3(,@09)                               03S0253
         BALR  @14,@15                                          03S0253
*      R15=FOUR;   /* SET A NCSPL OBTAIN FAILED RETURN CODE */  03S0254
         LA    R15,4                                            03S0254
*     END;                                                      03S0255
*  END;               /* END OF FIRST NCSPL OBTAINED */         03S0256
* ELSE;                                                         03S0257
@RF00244 DS    0H                                               03S0258
* RFY (R0,R15) UNRSTD;                                          03S0258
@RC00244 DS    0H                                               03S0259
*   RFY R15 RSTD;                                               02S0259
*   IF R15=ZERO      /* NCSPLS OBTAINED? */                     02S0260
*    THEN                                                       02S0260
         LTR   R15,R15                                          02S0260
         BNZ   @RF00260                                         02S0260
*     DO;        /* YES - NCSPLS OBTAINED */                    02S0261
*      RFY R15 UNRSTD;                                          02S0262
*      NCSPL1->NCSVSTAT=ON;  /* MARK BOTH NEW NCSPLS STATIC */  02S0263
         L     @09,NCSPL1                                       02S0263
         OI    NCSVSTAT(@09),B'00100000'                        02S0263
*      NCSPL2->NCSVSTAT=ON;                                     02S0264
         L     @15,NCSPL2                                       02S0264
         OI    NCSVSTAT(@15),B'00100000'                        02S0264
*      RCCSWTOX=NCSPL1;   /* PUT NEW NCSPL ADDRESSES IN THE PU RDTE */
         ST    @09,RCCSWTOX(,PUPTR)                             02S0265
*      RCCXTOSW=NCSPL2;                                         02S0266
         ST    @15,RCCXTOSW(,PUPTR)                             02S0266
*      RCCXTOSW->NCSPLRPT=PUPTR; /* PUT THE PU'S ADDRESS IN THE 370X
*                           TO SWITCHED NCSPL */                02S0267
         ST    PUPTR,NCSPLRPT(,@15)                             02S0267
*      RCCXTOSW->NCSPLRAD=PUPTR->RPRNSNEA;/* PUT THE SWITCHED SUBAREA'S
*                      HEADER ADDRESS IN THE 370X TO SWITCHED NCSPL  */
         L     @09,RPRNSNEA(,PUPTR)                             02S0268
         ST    @09,NCSPLRAD(,@15)                               02S0268
*      RCCINDEX=MINUS1;  /* INITIALIZE PATH TABLE INDEX VALUE TO A
*                           MINUS ONE -- THIS IS SO THAT PATH SELECT
*                           WILL POINT AT THE FIRST PATH TABLE ENTRY
*                           (ZERO OFFSET) WHEN IT UPDATES THE INDEX
*                           VALUE BY ONE */                     02S0269
         MVC   RCCINDEX(2,PUPTR),@CH01114                       02S0269
*      R1=NCSPLPTR;                                             02S0270
         LR    R1,NCSPLPTR                                      02S0270
*      CALL ISTINCD1;  /* INVOKE SWITCHED DIAL OUT PROCESSOR */ 02S0271
         L     @15,@CV01138                                     02S0271
         BALR  @14,@15                                          02S0271
*     END;             /* END OF NCSPLS OBTAINED -  */          02S0272
*    ELSE                                                       02S0273
*     DO;       /* NCSPLS WERE NOT OBTAINED - */                02S0273
         B     @RC00260                                         02S0273
@RF00260 DS    0H                                               02S0274
*      NCSIORC='14'X;   /* SET MAJOR FEEDBACK CODE TO TEMPORARY ERROR*/
         MVI   NCSIORC(NCSPLPTR),X'14'                          02S0274
*      NCSPRMRC='01'X;    /* SET MINOR FEEDBACK CODE TO STORAGE 02S0275
*                            ALLOCATION FAILURE */              02S0275
         MVI   NCSPRMRC(NCSPLPTR),X'01'                         02S0275
*      NCSSENSE=ZERO;  /* INDICATE NO SENSE INFORMATION */      02S0276
         SLR   @00,@00                                          02S0276
         ST    @00,NCSSENSE(,NCSPLPTR)                          02S0276
*      R1=NCSPLPTR;                                             02S0277
         LR    R1,NCSPLPTR                                      02S0277
*      CALL ISTINCD8;  /* INVOKE THE DIAL POST ROUTINE */       02S0278
         L     @15,@CV01139                                     02S0278
         BALR  @14,@15                                          02S0278
*     END;          /* END OF NCSPLS NOT OBTAINED */            02S0279
*  END;    /* END OF ENTRY IN SWITCHED SUBAREA */               02S0280
* ELSE                                                          02S0281
*  DO;     /* ENTRY IN LOCAL SUBAREA --  */                     02S0281
         B     @RC00232                                         02S0281
@RF00232 DS    0H                                               02S0282
*   NCSPLRPT=LUPTR;   /* RESET RPT TO THE LU'S ADDRESS */       02S0282
         ST    LUPTR,NCSPLRPT(,NCSPLPTR)                        02S0282
*   R1=NCSPLPTR;                                                02S0283
         LR    R1,NCSPLPTR                                      02S0283
*   CALL ISTINCL2;  /* INVOKE LOCAL ATTACH REQUEST CONNECT PROCESSOR */
         L     @15,@CV01140                                     02S0284
         BALR  @14,@15                                          02S0284
*  END;                                                         02S0285
* DO;                                                           02S0286
@RC00232 DS    0H                                               02S0287
*/***  CRRMAINT  PROCNM(ISTINCE0)COMP(VY)FUNC(RET)RPHADD((NCSPLRPH))  *
**/                                                             02S0287
* /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/                 02S0287
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                       02S0287
         L     @15,NCSPLRPH(,NCSPLPTR)                          02S0287
         L     @15,RPHCRR(,@15)                                 02S0287
         L     @15,CRACRR(,@15)                                 02S0287
         XC    VYCCRT+1(11,@15),VYCCRT+1(@15)                   02S0287
         MVI   VYCCRT(@15),B'00000000'                          02S0287
*NCSPLRPH->RPHCRR->CRACRR->CINCE0 = '1'B;                       02S0288
         OI    CINCE0(@15),B'00010000'                          02S0288
* END;                                                          02S0289
*      END;        /* END OF DIAL NOT IN PROGRESS */            01S0290
*  END;                             /* END OF LU NOT OFFLINE         */
@RC00226 DS    0H                                               01S0291
@RC00219 DS    0H                                               01S0291
@RC00211 DS    0H                                               01S0292
*  END;            /* END-NOT RESET                          @ZA19893*/
@RC00169 DS    0H                                               01S0293
*NXTAVAIL=CE0WAPTR;    /* RESET THE NEXT AVAILABLE POINTER */   01S0293
@RC00148 L     @15,NCSPLWKA(,NCSPLPTR)                          01S0293
         ST    CE0WAPTR,NXTAVAIL(,@15)                          01S0293
*REGSAPTR=CE0SVBKP;    /* RESTORE CALLER'S REGISTER 13 */       01S0294
         L     REGSAPTR,CE0SVBKP(,REGSAPTR)                     01S0294
         EJECT
*DIALPOST: PROC OPTIONS(NOSAVE NOSAVEAREA);                     01S0295
         B     @PB00002                                         01S0295
DIALPOST DS    0H                                               01S0296
*  /* THE PURPOSE OF THIS SUBROUTINE IS TO PROVIDE THE INTERFACE TO
*     THE DIAL POST PROCESSOR       */                          01S0296
*RFY R14 RSTD;                                                  01S0296
*R14SAVE=R14;                       /* SAVE REGISTER 14              */
         ST    R14,R14SAVE                                      01S0297
*R1=NCSPLPTR;                                                   01S0298
         LR    R1,NCSPLPTR                                      01S0298
*CALL ISTINCD8;    /* INVOKE THE DIAL POST ROUTINE */           01S0299
         L     @15,@CV01139                                     01S0299
         BALR  @14,@15                                          01S0299
* DO;                                                           01S0300
*/***  CRRMAINT  PROCNM(ISTINCE0)COMP(VY)FUNC(RET)RPHADD((NCSPLRPH))  *
**/                                                             01S0301
* /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/                 01S0301
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                       01S0301
         L     @15,NCSPLRPH(,NCSPLPTR)                          01S0301
         L     @15,RPHCRR(,@15)                                 01S0301
         L     @15,CRACRR(,@15)                                 01S0301
         XC    VYCCRT+1(11,@15),VYCCRT+1(@15)                   01S0301
         MVI   VYCCRT(@15),B'00000000'                          01S0301
*NCSPLRPH->RPHCRR->CRACRR->CINCE0 = '1'B;                       01S0302
         OI    CINCE0(@15),B'00010000'                          01S0302
* END;                                                          01S0303
*R14=R14SAVE;                       /* RESTORE REGISTER 14           */
         L     R14,R14SAVE                                      01S0304
*RFY R14 UNRSTD;                                                01S0305
*END DIALPOST;                                                  01S0306
@EL00002 DS    0H                                               01S0306
@EF00002 DS    0H                                               01S0306
@ER00002 BR    @14                                              01S0306
         EJECT
*UNLOCK: PROC OPTIONS(NOSAVE NOSAVEAREA);                       01S0307
UNLOCK   DS    0H                                               01S0308
*   /* THE PURPOSE OF THIS SUBROUTINE IS TO ISSUE A TPUNLOCK(OCLOCK) */
*RFY R14 RSTD;                                                  01S0308
*R14SAVE=R14;                       /* SAVE REGISTER 14              */
         ST    R14,R14SAVE                                      01S0309
*R1=NCSPLRPH;                       /* PUT RPH ADDRESS IN REG 1      */
         L     R1,NCSPLRPH(,NCSPLPTR)                           01S0310
*   /* RELEASE THE RDTE'S OPEN/CLOSE LOCK (OCLOCK)                   */
*/*** START -TPUNLOCK (OCLOCK)- ***/                            01S0311
* DO;                                                           01S0311
*/* ATBUILD (ISTRPH,ISTLOK,ISTCRA)  */                          01S0312
*/* END OF ATBUILD */                                           01S0312
*                                                               01S0312
* RFY (GPR00P,GPR01P,GPR02P,GPR03P,GPR04P,GPR15P) RSTD;         01S0312
*        GENERATE REFS(GPR00P,GPR01P,GPR15P,RPHWORK) SETS(RPHWORK);
         STM GPR00P,GPR15P,RPHWORK(GPR01P)
*        GPR02P = ADDR(RPRRLOCK);       /*SET PARAM - LOCKWORD PTR*/
         LA    GPR02P,RPRRLOCK(,PUPTR)                          01S0314
*        GPR04P = GPR01P->RPHCRR;       /*SET PARAM - ISTCRA PTR*/
         L     GPR04P,RPHCRR(,GPR01P)                           01S0315
*        GPR00P = CRALMS04;             /*SET PARAM - LOCK LEVEL FLAG*/
         LA    GPR00P,8                                         01S0316
*        GPR03P = ADDR(GPR04P->CRAL4PTR);                       01S0317
         LA    GPR03P,CRAL4PTR(,GPR04P)                         01S0317
*                                       /*SET PARAM - LOCK LEVEL PTR*/
*                                                               01S0318
* DO; /* LISATCVT CVTBASE(PAGEABLE,(GPR15P)) */                 01S0318
*   GPR15P = ATCLCPTR; /*SET UP ATCVT POINTER*/                 01S0319
         L     GPR15P,ATCLCPTR                                  01S0319
* END; /*LISATCVT*/                                             01S0320
*        GPR15P=GPR15P->ATCAP33;                                01S0321
         L     GPR15P,ATCAP33(,GPR15P)                          01S0321
*        DCL FMZL0036 BASED(GPR15P) LABEL VALUERANGE(*);        01S0322
*        CALL FMZL0036;                                         01S0323
         BALR  @14,@15                                          01S0323
*        GENERATE REFS(GPR00P,GPR01P,GPR15P,RPHWORK) SETS(GPR00P,GPR01P
*GPR02P,GPR03P,GPR04P,GPR05P,GPR06P,GPR07P,GPR08P,GPR09P,GPR10P,GPR11P,
*PR12P,GPR13P,GPR14P,GPR15P);                                   01S0324
*                                                               01S0324
         LM GPR00P,GPR15P,RPHWORK(GPR01P)
* RFY (GPR00P,GPR01P,GPR02P,GPR03P,GPR04P,GPR15P) UNRSTD;       01S0325
*        END;                                                   01S0326
*/*** END -TPUNLOCK (OCLOCK)- ***/                              01S0327
*R14=R14SAVE;                       /* RESTORE REGISTER 14           */
         L     R14,R14SAVE                                      01S0327
*RFY R14 UNRSTD;                                                01S0328
*END UNLOCK;                                                    01S0329
*                                                               01S0329
@EL00003 DS    0H                                               01S0329
@EF00003 DS    0H                                               01S0329
@ER00003 BR    @14                                              01S0329
@PB00003 DS    0H                                               01S0330
*/* TPEPILOG   */                                               01S0330
* GEN (PRINT OFF);                                              01S0330
*                                                               01S0330
         PRINT OFF
*/*   PROGRAM OPERATOR MESSAGE HEADER                                */
*DCL  1  ISTPOHD  BDY(WORD) BASED,                              01S0331
*        2 POHRSVD1 CHAR(1),       /* RESERVED                       */
*        2 POHSTAT,                /* HEADER STATUS BITS             */
*          3 POHEND   BIT(1),      /* END LINE 1=YES                 */
*          3 POHDATA  BIT(1),      /* DATA LINE 1=YES                */
*          3 POHLBL   BIT(1),      /* LABEL LINE 1=YES               */
*          3 POHCNTRL BIT(1),      /* CONTROL LINE 1=YES             */
*          3 POHRSVD2 BIT(2),      /* RESERVED                       */
*          3 POHRREQ  BIT(1),      /* REPLY REQUESTED 1=YES          */
*          3 POHGEN   BIT(1),      /* ID ORIGIN  0=GENERATED BY VTAM */
*                                  /*            1=GENERATED BY POA  */
*        2 POHID    FIXED(16);     /* MESSAGE IDENTIFIER             */
*/*            VTAM PREFIX FOR QUEUE ELEMENTS                         *
*/*  INITIAL LEVEL                                     001 03/04/75  */
*DECLARE                                                        01S0332
*  1 ISTPFX  BDY(WORD)  BASED,                                  01S0332
*   2 PFXID        CHAR(4),             /* QUEUE ACRONYM (SAME AS
*                                          QABID)                     *
*     3 PFXCBID    BIT(8),              /* CONTROL BLOCK ID           *
*   2 PFXPRTY      CHAR(1),             /* PRIORITY OF ELEMENT        *
*   2 PFXLNG       CHAR(3),             /* ELEMENT LENGTH,      01S0332
*                                          INCLUDING PREFIX           *
*   2 PFXFWD       PTR(31),   /* POINTER TO NEXT QUEUE          01S0332
*                                          ELEMENT (IF LAST     01S0332
*                                          POINTER TO QAB)            *
*   2 PFXBCK       PTR(31) ;   /* POINTER TO PREVIOUS           01S0332
*                                          QUEUE ELEMENT (IF    01S0332
*                                          FIRST, POINTER TO QAB)     *
*DCL NCSPLTYP BIT(8) CONSTANT('60'X);   /* NCSPL CONTROL BLOCK ID     *
*   /* NETWORK CONFIGURATION SERVICES CONTROL BLOCK  */         01S0334
*/*  REVISIONS                                         14 07/01/75  */
*DECLARE                                                        01S0334
*  1 ISTNCSPL BASED BDY(DWORD),                                 01S0334
*   2 *      CHAR(16) BDY(WORD),                                01S0334
*     3 NCSPFX CHAR(LENGTH(ISTPFX)), /* QUE ELEMENT PREFIX           */
*       4 *        CHAR(12),                                    01S0334
*       4 NCSCRWKA PTR(31),       /* PTR TO WORK AREA FOR C/R I/O    */
*   2 *           BIT(8),         /*RESERVED                         */
*   2 NCSPLVCD    BIT(8),         /*VERB CODE                        */
*   2 NCSPLVBF    CHAR(2),        /*VERB MODIFIER FLAGS              */
*      3 NCSVBF01 BIT(1),         /* UNUSED                          */
*      3 NCSVBF02 BIT(1),         /* UNUSED                          */
*      3 NCSVBF03 BIT(1),         /* MODIFY MSG SUP                  */
*      3 NCSVBF04 BIT(1),         /* TYPE=VTAM                       */
*      3 NCSVBF05 BIT(1),         /* LINETRACE=1                     */
*      3 NCSVBF06 BIT(1),         /* I/O TRACE=1                     */
*      3 NCSVBF07 BIT(1),         /* BUFFER TRACE=1                  */
*      3 NCSVBF08 BIT(1),         /* MODIFY TPRINT                   */
*      3 NCSVBF09 BIT(1),         /* MODIFY TEST                     */
*      3 NCSVBF10 BIT(1),         /* MODIFY TRACE=NO                 */
*      3 NCSVBF11 BIT(1),         /* VARY INTERNAL ONLY & MODIFY     */
*                                 /*  TRACE = YES                    */
*      3 NCSVBF12 BIT(1),         /* VARY IMMEDIATE  & MODIFY        */
*                                 /*  NETSOL=NO                      */
*      3 NCSVBF13 BIT(1),         /* MODIFY NETSOL=YES               */
*      3 NCSVBF14 BIT(1),         /* VARY LOGON & MODIFY             */
*                                 /*  CHANGE                         */
*      3 NCSVBF15 BIT(1),         /* VARY DEACTIVATE & VARY NORMAL   */
*                                 /*  CLOSE(ERP)                     */
*      3 NCSVBF16 BIT(1),         /* VARY ACTIVATE & ERP REQUEST     */
*                                 /*   & MODIFY DUMP                 */
*   2 NCSPLVFL    CHAR(1),        /*COMMAND FLAGS                    */
*    3 NCSVNCSA   BIT(1),         /*NCSPL IS ACTIVE                  */
*    3 NCSVDEL    BIT(1),         /*DELETE NCSPL                     */
*    3 NCSVSTAT   BIT(1),         /*INDICATE NCSPL WAS NOT GETMAINED */
*    3 NCSDCONT   BIT(1),         /* DO DISCONACT                    */
*    3 NCSABCON   BIT(1),         /* DO ABANDON CONNECTION           */
*    3 NCSDACLK   BIT(1),         /* DO ACTIVATE LINE                */
*    3 NCSRSV02   BIT(2),         /* RESERVED                        */
*   2 NCSPLVF1    CHAR(1),        /* SPECIAL PROC FLAGS              */
*    3 NCSOVFMC   BIT(1),         /* PURGE ONLY VARY'S FMCB          */
*   2 NCSPRMRC    CHAR(1),        /* PURGE MINOR RETURN CODE FIELD   */
*   2 NCSIORC     CHAR(1),        /* I/O OR RESTART RETURN CODE      */
*   2 NCSRRNPT    CHAR(4),        /* ADDR RN ENTRY FOR LINE TRACE    */
*   2 NCSPLRID    CHAR(8),        /*ID = 'NODENAME'                  */
*   2 NCSPLLID    CHAR(8),        /*LOGON = 'NODENAME'               */
*   2 NCSDLID     CHAR(6),        /* OFFHOOK ID                      */
*   2 NCSCRCMD    FIXED(8),       /* C/R I/O COMMAND CODE            */
*   2 NCSCRPID    PTR(8),         /* C/R PATH ID (PID)               */
*   2 NCSPLRPT    PTR(31),        /*ID='NODENAME' RDTE ADDRESS       */
*   2 NCSPLLPT    PTR(31),        /*LOGON/LOGOFF='NODENAME' RDTE ADDR*/
*   2 NCSPLCMD    CHAR(2),        /*3705 CONTROL COMMAND CODES       */
*     3 NCSCMDA  BIT(8),          /*RH FLAGS                         */
*       4 NCSPLSYS BIT(1),        /*ON-SYSTEM OFF-FM                 */
*       4 NCSPLCTL BIT(1),        /*ON-CONTROL OFF-DATA              */
*       4 NCSPLSYN BIT(1),        /*ON=SYNCHR OFF-ASYNCHR            */
*       4 NCSPLFLO BIT(1),        /*ON-WITH FLOW  OFF-AGAINST FLOW   */
*       4 NCSPLUFM BIT(1),        /*ON=UNFORMATTED RU,OFF=FORMATTED  */
*       4 *        BIT(3),        /*RESERVED                         */
*     3 NCSCMDB  BIT(8),          /*COMMAND FIELD                    */
*   2 NCSNCPEP    BIT(8),         /* EP SUBCHANNEL ADDR              */
*   2 NCSMSGSP    CHAR(1),        /* RESERVED FOR MESSAGE SURPRESSION*/
*   2 NCSPLUAD    CHAR(3),        /*U = 'UNIT ADDRESS'               */
*   2 NCSCRFLG    CHAR(1),        /* MISCELLANEOUS C/R FLAGS         */
*     3 NCSPLWRM    BIT(1),       /* COMMAND SPECIFIED WARM PARAM,   */
*                                 /* 1 = YES                         */
*     3 NCSPLCLD    BIT(1),       /* COMMAND SPECIFIED COLD PARAM,   */
*                                 /* 1 = YES                         */
*     3 NCSFMCLD    BIT(1),       /* 370X RESPONDED COLD TO ACTPU    */
*                                 /* (ERP), 1 = YES                  */
*     3 NCSFMERP    BIT(1),       /* 370X RESPONDED ERP TO ACTPU     */
*                                 /* (ERP), 1 = YES                  */
*     3 NCSCRDSE    BIT(1),       /* 0=C/R DATA SET DOES NOT EXIST   */
*                                 /* OR IS NULL                      */
*                                 /* 1=C/R DATA SET EXISTS           */
*                                 /* AND IS NOT NULL                 */
*     3 NCSOPRQU    BIT(1),       /* OPERATOR REQUESTS REIPL, 1 = YES*/
*     3 NCSUSRNF    BIT(1),       /* EARLY WARNING PURGE HAS ALREADY */
*                                 /* OCCURED, 1 = YES                */
*     3 NCSSTCMD    BIT(1),       /* ACTIVATE IS A RESULT OF         */
*                                 /* START VTAM COMMAND, 1 = YES     */
*   2 NCSPLWRE    BIT(32),        /* WTOR ECB                        */
*   2 NCSPLWRF    CHAR(72),       /* WTOR REPLY AREA                 */
*   2 NCSPLRAD    PTR(31),        /* RDTE PTR FOR ALLOCATE/DEALLOCATE*/
*     3 NCSLSCMD BIT(8),          /* LINE SCHED COMMAND TYPE         */
*     3 NCSPLRCD BIT(8),          /* HEX VALUE FOR LINE SCHED PARAM  */
*   2 NCSIOCID    CHAR(4),        /* CURRENT CID FOR DAF LOCK HELD   */
*     3  NCSPLCID CHAR(4),        /* ALIAS FOR ABOVE                 */
*        4  NCSPLSAF  CHAR(2),    /* SOURCE ADDRESS                  */
*        4  NCSPLDAF  CHAR(2),    /* DESTINATION ADDRESS             */
*   2 NCSPLWKA    PTR(31),        /* NCS WORK AREA ADDRESS           */
*   2 NCSPLCVT    PTR(31),        /* POINTER TO VTAM CVT             */
*   2 NCSPLRPH    PTR(31),        /* POINTER TO RPH                  */
*   2 NCSPLECB    BIT(32),        /* ECB FOR VARY PGS                */
*   2 NCSPLFSB    PTR(31),        /* ADDRESS OF USS-FSS FSB OR RU    */
*   2 NCSPLRCR    PTR(31),        /* ADDRESS RDTE FOR CR             */
*   2 NCSPLFL1    CHAR(1),        /* VARY FLAGS                      */
*     3 NCSPL2IN  BIT(1),         /* SECOND ENTRY                    */
*     3 NCSPLSOM  BIT(1),         /* SUPRESS OP. MESSAGE             */
*     3 NCSPLEBN  BIT(1),         /* ENTRY FROM BNN SSCP             */
*     3 NCSPLREQ  BIT(1),         /* NCSPL FROM RESTORE              */
*     3 NCSPLNON  BIT(1),         /* DO NOT ADDR RDT SEGMENT         */
*     3 NCSPLAPU  BIT(1),         /* ACTIVATE PHYSICAL DONE BY LOAD  */
*     3 NCSPL2CN  BIT(1),         /* SECOND CONTACT REQUEST          */
*     3 NCSPLPOS  BIT(1),         /* BNN POSTED                      */
*   2 NCSPLFL2    CHAR(1),        /* VARY FLAGS                      */
*     3 NCSPLVDP  BIT(1),         /* NCSPL ON VARDEF PAB             */
*     3 NCSPLRSF  BIT(1),         /* NO SICK CLEAR BEFORE I/O        */
*     3 NCSPLRIO  BIT(1),         /* I/O = RESTART I/O               */
*     3 NCSOUFMC  BIT(1),         /* PURGE ONLY USER FMCB            */
*     3 NCSPLDS   BIT(1),         /* 1=CIO SAVED RESPONSE DATA       */
*     3 NCSREMPO  BIT(1),         /* REMOTE POWER OFF SPEC BY OPER   */
*     3 NCSPLVIS  BIT(1),         /* VARY IMM START CALLER OF CVP    */
*     3 NCSPLVIT  BIT(1),         /* VARY IMM TERM CALLER OF CVP     */
*   2 NCSPLFL3    CHAR(1),        /* FLAG BYTE                       */
*     3 NCSPLMOM  BIT(1),         /* ERP CAUSED BY FAILURE OF   01S0334
*                                    HIGHER NODE                     */
*     3 NCSEPP    BIT(1),         /* 1=EP SUBCHANNEL PRESENT         */
*     3 NCSPLANS  BIT(1),         /* ON FOR ACT IN ANSWER MODE       */
*                                 /* OFF FOR ACT IN NON-ANSWER MODE  */
*     3 NCSGID    BIT(1),         /* ON FOR PATH WITH GID PARM       */
*     3 NCSPID    BIT(1),         /* ON FOR PATH WITH PID PARM       */
*     3 NCSANS    BIT(1),         /* ON FOR ACTIVATE WITH ANS PARM   */
*     3 NCSFINAL  BIT(1),         /* FINAL PARM EXISTS               */
*     3 NCSEND    BIT(1),         /* END PARM EXISTS                 */
*   2 NCSPLFL4    CHAR(1),        /* FLAG BYTE                       */
*     3 NCSDLNID  BIT(1),         /* ID PRESENT IN NCSPL - OFF       */
*     3 NCSPLRSO  BIT(1),         /* RESET ONLY                      */
*     3 NCSPLVID  BIT(1),         /* ORIG CMD WAS MODIFY DUMP        */
*     3 NCSDSPE   BIT(1),         /* DISPLAY EVERY                   */
*     3 NCSDSPA   BIT(1),         /* DISPLAY ACT                     */
*     3 NCSDSPI   BIT(1),         /* DISPLAY INACT                   */
*     3 NCSDSPN   BIT(1),         /* DISPLAY NONE                    */
*     3 NCSPL2AP  BIT(1),         /* SECOND ACTPU TO 320X            */
*   2 NCSDLRSN    CHAR(1),        /* DIAL REASON CODES               */
*   2 NCSPLFL5    CHAR(1),        /* FLAG BYTE                       */
*     3 NCSSCPPS  BIT(1),         /* SSCP WORK AREA IN PVT STORAGE   */
*     3 NCSSDLK   BIT(1),         /* ON-SDLC LINK PROCESSED          */
*     3 NCSFORCE  BIT(1),         /* FORCED DEACT IN PROGRESS        */
*     3 *         BIT(5),         /* RESERVED                        */
*   2 NCSPLOLN    FIXED(15),      /* LENGTH O/B RU                   */
*   2 NCSPLP1     PTR(31),        /* ADDR VARY PAB                   */
*   2 NCSPLP2     PTR(31),        /* ADDR D/L/R PAB                  */
*   2 NCSPLP3     PTR(31),        /* ADDR ERP PAB                    */
*   2 NCSPLSPL    PTR(31),        /* ADDR ASSOC. NCSPL               */
*   2 NCSPLWEL    PTR(31),        /* ADDR POST RPH                   */
*   2 NCSPLRRP    PTR(31),        /* ADDR REMOTE RN RDTE IN LOCAL RDT*/
*   2 NCSPLRUO    PTR(31),        /* ADDR O/B RU                     */
*   2 NCSPLRUI    PTR(31),        /* ADDR BUFFER FOR I/B RU          */
*   2 NCSPLAPP    PTR(31),        /* ADDR NCSPL APPENDAGE            */
*   2 NCSRNAME    CHAR(8),        /* RNAME=FROM VARY ACTIVATE        */
*   2 NCSPLSQN    FIXED(15),      /* SEQUENCE=NR. FOR RESPONSE       */
*   2 NCSPLGID    BIT(8),         /* BINARY REP OF GID VALUE         */
*   2 NCSPLPID    BIT(8),         /* BINARY REP OF PID VALUE         */
*   2 NCSPLMID    CHAR(8),        /* LOGMODE = 'MODENAME'            */
*   2 NCSPLNSN    PTR(31),        /* RDTE NSNEA AT CLSDST            */
*   2 NCSSENSE    CHAR(4),        /* SENSE                           */
*     3 NCSSNS1  CHAR(1),         /* SENSE DATA MAJOR CODE           */
*     3 NCSSNS2  CHAR(1),         /* SENSE MODIFIER BYTE             */
*     3 NCSSENS2 CHAR(2),         /* USER SENSE DATA                 */
*   2 NCSCPWPT    PTR(31),        /* ADDRESS OF CPWA                 */
*   2 NCSMGLPT    PTR(31),        /* PTR TO USS/FSS MSG PARAM LIST   */
*   2 NCSUFMCB    PTR(31),        /* POINTER TO SSCP-LU FMCB         */
*   2 NCSPLRH     CHAR(3),        /* REQUEST RH                      */
*   2 NCSPLRTY    CHAR(1),        /* TYPE FROM RTGOH RU              */
*   2 NCSCRDTE    PTR(31),        /* PTR TO RDTE BEING PROCESSED     */
*                                 /* FOR C/R I/O                     */
*   2 NCSCRMSK,                   /* FLAGS FOR C/R CHECK POINTING    */
*     3 NCSCHKPT    CHAR(2),      /* FLAGS FOR ITEMS CHECK POINTED   */
*       4 NCSACTV     BIT(1),     /* ACTICE/INACTIVE STATUS CHANGED  */
*                                 /* 1 = YES                         */
*       4 NCSPACTV    BIT(1),     /* PORT ACT/INACTIVE STATUS CHANGED*/
*                                 /* 1 = YES                         */
*       4 NCSPOLD     BIT(1),     /* POLL DELAY VALUE CHANGED, 1=YES */
*       4 NCSNRPL     BIT(1),     /* NEGATIVE RESPONSE TO POLL       */
*                                 /* LIMIT VALUE CHANGED, 1 = YES    */
*       4 NCSESLM     BIT(1),     /* SESSION LIMIT VALUE CHANGED,1=YES*
*       4 NCSDTRLM    BIT(1),     /* DEVICE TRANSMISSION LIMIT       */
*                                 /* VALUE CHANGED, 1 = YES          */
*       4 NCSLGAPL    BIT(1),     /* APPLICATION CONTROLLER NAME     */
*                                 /* (LOGAPPL) CHANGED, 1 = YES      */
*       4 NCSLGMOD    BIT(1),     /* LOGON MODE (LOGMODE)            */
*                                 /* CHANGED, 1 = YES                */
*       4 NCSANSMD    BIT(1),     /* ANSWER MODE STATUS CHANGED,1=YES*/
*       4 NCSCUA      BIT(1),     /* CUA VALUE CHANGED, 1 = YES      */
*       4 NCSRNME     BIT(1),     /* RNAME VALUE CHANGED, 1 = YES    */
*       4 NCSPTUSE    BIT(1),     /* PATH USE/NOUSE STATUS CHANGED   */
*                                 /* 1 = YES                         */
*       4 NCSRSVD1    BIT(4),     /* RESERVED                        */
*     3 NCSCRMOD    CHAR(1),      /* NEW VALUES FOR ITEMS CHECKPOINTED*
*                                 /* NOT OBTAINED FROM RDTE          */
*       4 NCSAIMOD    BIT(1),     /* ACTIVE/INACTIVE STATUS, 1=ACTIVE*/
*       4 NCSPTMOD    BIT(1),     /* PORT ACT/INACT STATUS, 1=ACTIVE */
*       4 NCSRSVD2    BIT(6),     /* RESERVED                        */
*   2 NCSPLSID BDY(BYTE),         /* MESSAGE ROUTING INFORMATION     */
*     3 NCSPLSTA    CHAR(1),      /* STATUS FLAG BYTE                */
*       4 NCSRSVD4    BIT(7),     /* RESERVED                        */
*       4 NCSPLPO     BIT(1),     /* 0 = CONSOLE ID FOLLOWS, 1 =     */
*                                 /* PROGRAM OPERATOR HEADER FOLLOWS */
*     3 NCSPLPHD CHAR(LENGTH(ISTPOHD)), /* PO HEADER IF NCSPLPO = 01 */
*       4 NCSPLNID    FIXED(8),   /* CONSOLE ID IF NCSPLPO = 0       */
*     3 NCSPLPDB    PTR(31);      /* PTR TO PO ACDEB PREFIX          */
*/*   COMMAND VALUES FOR C/R FIELD NCSCRCMD                          */
*DCL NCSCRWR  FIXED(8) CONSTANT(0);  /* WRITE TO C/R DATA SET        */
*DCL NCSCROPN FIXED(8) CONSTANT(1);  /* OPEN C/R DATA SET            */
*DCL NCSCRCLS FIXED(8) CONSTANT(2);  /* CLOSE C/R DATA SET           */
*DCL NCSCRDEL FIXED(8) CONSTANT(3);  /* DELETE C/R DATA SET RECORD   */
*DCL NCSCROPQ FIXED(8) CONSTANT(4);  /* OPERATOR QUERY               */
*DCL NCSDCID  FIXED(8) CONSTANT(1);  /* CONSOLE ID INDICATOR         */
*DCL NCSCRIO  BIT(16) CONSTANT('0800'X); /* INDICATES REQUESTS       */
*                                        /* FOR VSAM I/O FOR C/R     */
*DCL NCSCRVIO BIT(16) CONSTANT('0C00'X); /* VSAM I/O OPERATION       */
*/* NCSPL APPENDAGE DEFINATION                                       */
*DCL  1  NCSAPP BASED(NCSPLAPP),                                01S0343
*        2 NCSAPSA  CHAR(72),     /* SAVE AREA                       */
*        2 NCSAPECB CHAR(4),      /* ECB                             */
*        2 NCSAPTXT CHAR(8),      /* DUMP DATA                       */
*        2 NCSAPEND PTR(31),      /* HIGH STORAGE ADDRESS            */
*        2 NCSAPBUE CHAR(520),                                  01S0343
*          3 NCSRSV04 CHAR(3),    /* RESERVED                        */
*          3 NCSAPRU  CHAR(5),    /* IPL CMD RU PREFIX               */
*          3 NCSAPDAT CHAR(512),  /* RESP FOR DUMP, O/B LOAD         */
*        2 NCSAPPAB PTR(31);      /* BNN VARY PAB ADDR               */
*/*    USS/FSS RU AREA MAP                                           */
*DCL  1  NCSUSSRU BASED(NCSPLFSB),                              01S0344
*        2 NCSRULEN FIXED(15),    /* LENGTH OF RU                    */
*        2 NCSRUITS CHAR(*);      /* START OF RU                     */
*/*    GENERAL CONSTANTS                                             */
*DCL NCSWASZ  FIXED(15) CONSTANT(2032);   /* NCSPL WORK AREA SIZE    */
*DCL NCSRTGOH BIT(16) CONSTANT('1000'X);  /* VBF VALUE FOR INTERNAL  */
*                                         /* COMMAND-RTGOH RECVD.    */
*/*    CONSTANTS FOR VERB CODES                                      */
*DCL NCSPLVC0 BIT(08) CONSTANT('00'X);    /* ERROR                   */
*DCL NCSPLVC1 BIT(08) CONSTANT('01'X);    /* VARY                    */
*DCL NCSPLVC2 BIT(08) CONSTANT('02'X);    /* MODIFY                  */
*DCL NCSPLVC3 BIT(08) CONSTANT('03'X);    /* ERP                     */
*DCL NCSPLVC4 BIT(08) CONSTANT('04'X);    /* DISPLAY                 */
*DCL NCSPLVC5 BIT(08) CONSTANT('05'X);    /* STATUS TO SM            */
*DCL NCSPLVC6 BIT(08) CONSTANT('06'X);    /* INTERNAL CMD            */
*DCL NCSPLVC7 BIT(08) CONSTANT('07'X);    /* INIT/TERM TUSM          */
*DCL NCSPLVC8 BIT(08) CONSTANT('08'X);    /* DIAL                    */
*/*    CONSTANTS FOR VARY COMMAND MODIFIERS                          */
*DCL NCSVACT BIT(16) CONSTANT('0001'X);   /*ACTIVATE                 */
*DCL NCSVDEA BIT(16) CONSTANT('0002'X);   /* DEACTIVATE              */
*DCL NCSVLON BIT(16) CONSTANT('0004'X);   /* LOGON                   */
*DCL NCSVVPP BIT(16) CONSTANT('0080'X);   /* VARY NORMAL CLEANUP REQST*
*DCL NCSVIMM BIT(16) CONSTANT('0010'X);   /* IMMEDIATE               */
*DCL NCSVINT BIT(16) CONSTANT('0020'X);   /* INTERNAL ONLY           */
*DCL NCSVALO BIT(16) CONSTANT('0005'X);   /* ACTIVATE WITH LOGON     */
*DCL NCSVDEI BIT(16) CONSTANT('0012'X);   /* DEACTIVATE IMMEDIATE    */
*DCL NCSVDII BIT(16) CONSTANT('0032'X);   /* DEACTIV. IMMEDIATE INTERNA
*                                            ONLY*/             01S0364
*DCL NCSCNOTF BIT(16) CONSTANT('FFF8'X);  /* NOTIFY REQUEST          */
*DCL NCSVANON BIT(16) CONSTANT('0008'X);  /* ANSWER = ON             */
*DCL NCSVANOF BIT(16) CONSTANT('0040'X);  /* ANSWER = OFF            */
*DCL NCSVPUSE BIT(16) CONSTANT('0100'X);  /* PATH = USABLE           */
*DCL NCSVPNUS BIT(16) CONSTANT('0200'X);  /* PATH = NOT USABLE       */
*DCL NCSVINOP BIT(16) CONSTANT('0400'X);  /* INOPERATIVE             */
*/*    CONSTANTS FOR MODIFY COMMAND MODIFIERS                        */
*DCL NCSMDUM BIT(16) CONSTANT('0001'X);   /* DUMP 3705               */
*DCL NCSMCHA BIT(16) CONSTANT('0004'X);   /* CHANGE                  */
*DCL NCSMNSY BIT(16) CONSTANT('0008'X);   /* NETSOL = YES            */
*DCL NCSMNSN BIT(16) CONSTANT('0010'X);   /* NETSOL = NO             */
*DCL NCSMTRY BIT(16) CONSTANT('0020'X);   /* TRACE = YES             */
*DCL NCSMVTRY BIT(16) CONSTANT('1020'X);                        01S0376
*DCL NCSMVTRN BIT(16) CONSTANT('1040'X);                        01S0377
*DCL NCSMTRN BIT(16) CONSTANT('0040'X);   /* TRACE = NO              */
*DCL NCSMTPR BIT(16) CONSTANT('0100'X);   /* TRACE PRINT             */
*DCL NCSMTST BIT(16) CONSTANT('0080'X);   /* MODIFY TEST             */
*DCL NCSDPF   BIT(16) CONSTANT('0000'X);  /* POTENTIAL FAIL          */
*DCL NCSDSTRT BIT(16) CONSTANT('0001'X);  /* DIAL START              */
*DCL NCSDOH1  BIT(16) CONSTANT('0002'X);  /* OFFHOOK 1               */
*DCL NCSDOH2  BIT(16) CONSTANT('0004'X);  /* OFFHOOK 2               */
*DCL NCSDDF   BIT(16) CONSTANT('0010'X);  /* DIAL FAILED             */
*DCL NCSDLKS  BIT(16) CONSTANT('0008'X);  /* LINK START              */
*DCL NCSDLKC  BIT(16) CONSTANT('0020'X);  /* LINK COMPLETION         */
*DCL NCSDHU   BIT(16) CONSTANT('0040'X);  /* HANGUP                  */
*DCL NCSDLK   BIT(16) CONSTANT('0080'X);  /* DEALLOCATE              */
*DCL NCSDGIVE BIT(16) CONSTANT('0100'X);  /* GIVE                    */
*DCL NCSDINOP BIT(16) CONSTANT('0200'X);  /* INOP                    */
*DCL NCSDLRST BIT(16) CONSTANT('0400'X);  /* RECOVERY SW LINKS       */
*                                         /* AFTER RN FAILURE        */
*/*    CONSTANTS FOR ERP COMMAND MODIFIERS                           */
*DCL NCSEERRA BIT(16) CONSTANT('0001'X);  /* ERP REQUEST          */
*DCL NCSECLOR BIT(16) CONSTANT('0002'X);  /* VARY NORMAL CLOSE REQUEST*
*DCL NCSEDACT BIT(16) CONSTANT('0004'X);  /* ERP DEACTIVATE REQUEST   *
*DCL NCSERSTR BIT(16) CONSTANT('0008'X);/* RSTRT ENTRY FROM DLR PROC */
*DCL NCSVFORC BIT(16) CONSTANT('0802'X);/* FORCED DEACT              */
*DCL NCSVRACT BIT(16) CONSTANT('1002'X);/* DEACT AND REACT           */
*/*   PURGE MINOR RETURN CODES CONSTANTS                             */
*DCL NCSAPABN BIT(8) CONSTANT('05'X),    /* APPLICATION ABEND        */
*    NCSCLDST BIT(8) CONSTANT('06'X),    /* CLOSE DEST OCCURED       */
*    NCSDDISC BIT(8) CONSTANT('08'X),    /* DIAL DISCONNECT OCCURED
*                                           - CONN NO LONGER AVAILABL*/
*    NCSBTHEX BIT(8) CONSTANT('09'X);    /* BUFFER THRESHOLD EXCEEDED*/
*/*   I/O OR RESTART RETURN CODES CONSTANTS                          */
*DCL NCSIOSUC BIT(8) CONSTANT('00'X),    /* I/O SUCCESSFUL           */
*    NCSIOERR BIT(8) CONSTANT('04'X),    /* I/O ERROR                */
*    NCSIOPRG BIT(8) CONSTANT('08'X),    /* I/O PURGED               */
*    NCSRSSUC BIT(8) CONSTANT('00'X),    /* RESTART SUCCESSFUL       */
*    NCSRSERR BIT(8) CONSTANT('04'X),    /* RESTART ERROR            */
*    NCSVAIPL BIT(8) CONSTANT('00'X),  /* IPL NO RESTART ON VARY ACTV*/
*    NCSVANRA BIT(8) CONSTANT('10'X),    /* IPL SUCCESSFUL, NO RESTART
*                                           AVAILABLE ON VARY ACTIVE  *
*    NCSVAWMF BIT(8) CONSTANT('08'X),    /* WARM START FAILURE FOR
*                                           VARY ACTIVATE            */
*    NCSVAIPF BIT(8) CONSTANT('0C'X),   /* IPL FAILED ON VARY ACTIVATE*
*    NCSDSIA  BIT(8) CONSTANT('14'X),   /* INVALID ADDRESS SPECIFIED
*                                          ON DISPLAY STORAGE CMND    *
*    NCSVAISZ BIT(8) CONSTANT('08'X),   /* NCP SIZE TOO LARGE         *
*    NCSIPLSC BIT(8) CONSTANT('00'X),   /* IPL SUCCESSFUL             *
*    NCSIOER  BIT(8) CONSTANT('0C'X),   /* I/O ERROR ON REMOTE IPL    *
*    NCSNCPAC BIT(8) CONSTANT('04'X),   /* REMOTE NCP ALREADY ACTIVE  *
*    NCSNCRPF BIT(8) CONSTANT('70'X),   /* REMOTE POWER OFF           *
*    NCSCRIOS BIT(8) CONSTANT('30'X),   /* SUCCESSFUL I/O             *
*    NCSCRION BIT(8) CONSTANT('34'X),   /* NULL D.S. OPENED           *
*    NCSCRIOF BIT(8) CONSTANT('38'X);   /* FAILURE ON I/O             *
*/*           CONSTANTS FOR LIBERTY SUPPORT                           *
*DCL  NCSES   BIT(16) CONSTANT('0001'X),/* END SESSION                *
*     NCSBF   BIT(16) CONSTANT('0002'X),/* BIND FAILURE               *
*     NCSUF   BIT(16) CONSTANT('0004'X),/* UNBIND FAILURE             *
*     NCSINIT BIT(16) CONSTANT('0001'X),                        01S0401
*     NCSTERM BIT(16) CONSTANT('0002'X);                        01S0401
*DCL NCSTPPST BIT(16) CONSTANT('0001'X);/* TPPST COMMAND              *
*DCL NCSII    BIT(16) CONSTANT('0002'X);/* IPL INIT COMMAND           *
*DCL NCSIT    BIT(16) CONSTANT('0004'X);/* IPL COMMAND                *
*DCL NCSIF    BIT(16) CONSTANT('0008'X);/* IPL FINAL COMMAND          *
*DCL NCSDI    BIT(16) CONSTANT('0010'X);/* DUMP INIT COMMAND          *
*DCL NCSDT    BIT(16) CONSTANT('0020'X);/* DUMP TEXT COMMAND          *
*DCL NCSDF    BIT(16) CONSTANT('0040'X);/* DUMP FINAL COMMAND         *
*DCL NCSCON   BIT(16) CONSTANT('0080'X);/* CONTACT COMMAND            *
*DCL NCSDICON BIT(16) CONSTANT('0100'X);/* DISCONTACT COMMAND         *
*DCL NCSMSFMD BIT(16) CONSTANT('0200'X);/* SEND FMD                   *
*DCL NCSSEND  BIT(16) CONSTANT('0400'X);/* SEND                       *
*DCL NCSPURGE BIT(16) CONSTANT('0800'X);/* PAB PURGE                  *
*DCL NCSMSSUP BIT(16) CONSTANT('2000'X);/* CONSTANT FOR MSG SUP       *
*DCL NCSCRDS  BIT(16) CONSTANT('3023'X);/* RECORD DEV STATS COMMAND   *
*DCL NCSCQUIS BIT(16) CONSTANT('F01A'X);/* QUIESCE COMMAND            *
*DCL NCSSNUSS BIT(16) CONSTANT('381F'X);/* SEND USS MESSAGE           *
*/*                                                                   *
*DCL NCSNC    BIT(8)  CONSTANT('04'X);  /* NOT CONTACTED              *
*DCL NCSLD    BIT(8)  CONSTANT('00'X);  /* CONTACTED LOADED           *
*DCL NCSNLD   BIT(8)  CONSTANT('0C'X);  /* CONTACTED NEEDS LOAD       *
*DCL NCSNCD   BIT(8)  CONSTANT('08'X);  /* NOT CONTACTED DUE TO DEACT *
*DCL NCSNCE   BIT(8)  CONSTANT('10'X);  /* NOT CONTACTED DUE TO ERP   *
*DCL NCSNFME  BIT(8)  CONSTANT('24'X);  /* NEGATIVE FME               *
*/*  CONSTANTS FOR IORC FOR DISPLAY STORAGE                          */
*DCL NCSDSDEA BIT(8)  CONSTANT('0C'X);  /* PRIOR DEACT                *
*DCL NCSDSFAL BIT(8)  CONSTANT('04'X);  /* FAIL OTHER THAN PRIOR DEACT*
*/* TYPE CODES FOR CONFIGURATION RESTART                              *
*DCL NCSCTRLM BIT(8) CONSTANT('01'X);   /* CHANGE DEV TRANS LIMIT     *
*DCL NCSCNPOL BIT(8) CONSTANT('02'X);   /* CHANGE NEG POLL RESP LIMIT *
*DCL NCSCSESS BIT(8) CONSTANT('03'X);   /* CHANGE SESSION LIMIT       *
*DCL NCSCPOLL BIT(8) CONSTANT('04'X);   /* CHANGE LINE SERV SEEK PAUSE*
*/*  FM DATA COMMAND CODES                                            *
*DCL NCSCAPU  BIT(16) CONSTANT('D001'X);   /* ACT PHYS                *
*DCL NCSCDPU  BIT(16) CONSTANT('D002'X);   /* DEACT PHYS              *
*DCL NCSCALU  BIT(16) CONSTANT('D003'X);   /* ACT LOG                 *
*DCL NCSCDLU  BIT(16) CONSTANT('D004'X);   /* DEACT LOG               *
*DCL NCSCSDT  BIT(16) CONSTANT('D005'X);   /* SDT                     *
*DCL NCSCFME  BIT(16) CONSTANT('2006'X);   /* SEND POS RESP           *
*DCL NCSCEXCP BIT(16) CONSTANT('2007'X);   /* SEND NEG RESP           *
*DCL NCSCCON  BIT(16) CONSTANT('3008'X);   /* CONTACT                 *
*DCL NCSCDCON BIT(16) CONSTANT('3009'X);   /* DISCONTACT              *
*DCL NCSCIPLI BIT(16) CONSTANT('300A'X);   /* IPL INIT                *
*DCL NCSCIPLT BIT(16) CONSTANT('300B'X);   /* IPL                     *
*DCL NCSCIPLF BIT(16) CONSTANT('300C'X);   /* IPL FINAL               *
*DCL NCSCDUMI BIT(16) CONSTANT('300D'X);   /* DUMP INIT               *
*DCL NCSCDUMP BIT(16) CONSTANT('300E'X);   /* DUMP                    *
*DCL NCSCDUMF BIT(16) CONSTANT('300F'X);   /* DUMP FINAL              *
*DCL NCSCACTL BIT(16) CONSTANT('3010'X);   /* ACT LINK                *
*DCL NCSCDACL BIT(16) CONSTANT('3011'X);   /* DEACT LINK              *
*DCL NCSCSSV  BIT(16) CONSTANT('3012'X);   /* SET STATE VECTOR        *
*DCL NCSCNSP  BIT(16) CONSTANT('3013'X);   /* NS PROC ERROR           *
*DCL NCSCSTD  BIT(16) CONSTANT('3019'X);   /* SET TIME & DATE         *
*DCL NCSCSEP  BIT(16) CONSTANT('9014'X);   /* SWITCH TO EP            *
*DCL NCSCSNC  BIT(16) CONSTANT('9015'X);   /* SWITCH TO NCP           *
*DCL NCSCLSD  BIT(16) CONSTANT('3016'X);   /* LINE SCHED PARM         *
*DCL NCSCDS   BIT(16) CONSTANT('3017'X);   /* DISPLAY STORAGE         *
*DCL NCSCPWO  BIT(16) CONSTANT('3018'X);   /* REMOTE POWER OFF        *
*DCL NCSSNFMD BIT(16) CONSTANT('301C'X);   /* SEND FMD                *
*DCL NCSCDIAL BIT(16) CONSTANT('301A'X);   /* DIAL                    *
*DCL NCSCADIL BIT(16) CONSTANT('301B'X);   /* ABANDON DIAL            *
*DCL NCSCEANS BIT(16) CONSTANT('301D'X);   /* ENABLE ANS MODE         *
*DCL NCSCAANS BIT(16) CONSTANT('301E'X);   /* ABANDON ANS MODE        *
*DCL NCSCANA  BIT(16) CONSTANT('301F'X);   /* ASSIGN NET ADDRESS      *
*DCL NCSCFNA  BIT(16) CONSTANT('3020'X);   /* FREE NET ADDRESS        *
*DCL NCSCACON BIT(16) CONSTANT('3021'X);   /* ABANDON CONNECTION      *
*DCL NCSCSCV  BIT(16) CONSTANT('3022'X);   /* SET CONTROL VECTOR      *
*DCL NCSNCPPG BIT(16) CONSTANT('FFFF'X);   /* PURGE                   *
*/* NEW VALUES FOR NCSPLCMD   */                                01S0465
*DCL NCSCLCND BIT(16) CONSTANT('0041'X);  /* LOAD CONDITIONALLY  */
*DCL NCSCUCND BIT(16) CONSTANT('0042'X); /* LOAD UNCONDITIONALLY */
*DCL NCSCRSRT BIT(16) CONSTANT('0043'X); /* RESTART 370X OR CLUS  */
*DCL NCSDUCMD BIT(16) CONSTANT('0044'X); /* DUMP 370X  */       01S0468
*DCL NCSCERPP BIT(16) CONSTANT('0045'X); /* PERFORM ERP DUMP AND
*                                           RELOAD OF 370X  */  01S0469
*DCL NCSDOUT  BIT(16) CONSTANT('0046'X); /* DIAL OUT                 */
*DCL NCSDCNT  BIT(16) CONSTANT('0047'X); /* DIAL CONTACT             */
*DCL NCSDABDN BIT(16) CONSTANT('0048'X); /* DIAL ABANDON             */
*DCL NCSDENAS BIT(16) CONSTANT('0049'X); /* DIAL ENABLE ANSWER       */
*/*  VALUES FOR NCSCMDB                                              */
*DCL NCSBFME BIT(8) CONSTANT('06'X);     /* SEND POS RESP COMMAND    */
*DCL NCSBEXC BIT(8) CONSTANT('07'X);     /* SEND NEG RESP COMMAND    */
*/*  CONSTANTS FOR DIAL REASON CODES                                 */
*DCL NCSDLRRD BIT(8) CONSTANT('01'X);    /* REDIAL                   */
*DCL NCSDLRQT BIT(8) CONSTANT('02'X);    /* QUIT                     */
*/* NEW VALUES FOR NCSIORC   */                                 01S0478
*DCL NCSLDAOK BIT(8) CONSTANT('00'X);  /* COMMAND PROCESSED SUCESS */
*DCL NCSLDACT BIT(8) CONSTANT('04'X);  /* NCP ACTIVE-LOAD NOT PERF */
*DCL NCSLDCAN BIT(8) CONSTANT('04'X);  /* RELOAD DECLINED BY OPER  */
*DCL NCSLDIOP BIT(8) CONSTANT('08'X);  /* I/O PURGED               */
*DCL NCSLDNOG BIT(8) CONSTANT('0C'X);  /* COMMAND FAILED           */
*DCL NCSDUCOM BIT(8) CONSTANT('14'X);  /* DUMP COMPLETE            */
*DCL NCSHALTD BIT(8) CONSTANT('18'X);  /* CMD REJECTED,HALT IN PROG*/
*DCL NCSUNREC BIT(8) CONSTANT('1C'X);  /* COMMAND UNRECOGNIZED     */
*DCL NCSNOSTG BIT(8) CONSTANT('20'X);  /* CMD REJ,INSUFF STORAGE   */
*DCL NCSDOS   BIT(8) CONSTANT('00'X);  /* DIAL-OUT SUCCESSFUL      */
*DCL NCSDOF   BIT(8) CONSTANT('04'X);  /* DIAL-OUT UNSUCCESSFUL    */
*DCL NCSDOP   BIT(8) CONSTANT('08'X);  /* DIAL-OUT PENDING         */
*DCL NCSDCS   BIT(8) CONSTANT('00'X);  /* DIAL-CONTACT LOADED      */
*DCL NCSDCF   BIT(8) CONSTANT('0C'X);  /* DIAL-CONTACT FAILED      */
*DCL NCSDAS   BIT(8) CONSTANT('00'X);  /* DIAL-ABANDON CONN COMPLETE*/
*DCL NCSDENSO BIT(8) CONSTANT('00'X);  /* ENABLE ANSWER SUCCESSFUL  */
*DCL NCSDOFHR BIT(8) CONSTANT('04'X);  /* OFFHOOK REQUIRED          */
*DCL NCSDENSF BIT(8) CONSTANT('08'X);  /* ENABLE ANSWER FAIL        */
*/*  NEW VALUES FOR NCSPRMRC    */                              01S0496
*DCL NCSFIRM  BIT(8) CONSTANT('10'X);  /* RESTART SUCC,OPENDST REQ */
*DCL NCSEWRN  BIT(8) CONSTANT('11'X);  /* CON LOST,RECOV IN  PROG  */
*/* CONSTANTS FOR TRACE                                            */
*DCL NCSACTLT BIT(16) CONSTANT('0820'X); /* ACTIVATE LINE TRACE    */
*DCL NCSDACLT BIT(16) CONSTANT('0840'X); /* DEACTIVATE LINE TRACE  */
*DCL NCSCACLT BIT(16) CONSTANT('301D'X); /* SSCP ACT LINE TRACE    */
*DCL NCSCDCLT BIT(16) CONSTANT('301E'X); /* SSCP DEACT LINE TRACE  */
*/* DISPLAY COMMAND MODIFIER CONSTANTS                             */
*DCL NCSDPATH BIT(16) CONSTANT('0001'X); /* PATHS                  */
*/* LOCKWORD FORMAT DSECT                                            */
*/*  INITIAL LEVEL                                     001 05/24/74  */
*DCL 1 ISTLOK BDY(WORD) BASED,                                  01S0503
*     2  LOKCT CHAR(1) BDY(WORD),       /* COUNT OF LOCK OWNERS      */
*     2  LOKCHN PTR(24),                /* ADDR OF NEXT RPH WAITING
*                                          ON LOCK                   */
*        3  LOKCHNG CHAR(3),            /* CHAIN/FLAGS               */
*           4 *        CHAR(2),                                 01S0503
*           4 *        BIT(8),                                  01S0503
*             5 *        BIT(6),                                01S0503
*             5  LOKPRY BIT(1),         /* PRIORITY FLAG, 1 = ON     */
*             5  LOKXCL BIT(1);         /* EXCLUSIVE FLAG, 1 = ON    */
*DCL LOKXCL1  BIT(32) CONSTANT('00000001'X); /* CONSTANT TO TURN LOKXCL
*                                          ON                        */
*DCL LOKPRY1  BIT(32) CONSTANT('00000002'X); /* CONSTANT TO TURN LOKPRY
*                                          ON                        */
*DCL LOKCHN1  BIT(32) CONSTANT('00FFFFFC'X); /* CONSTANT TO TURN LOKXCL
*                                          AND LOKPRY OFF            */
*DCL LOKCT1   BIT(32) CONSTANT('01000000'X); /* CONSTANT TO MAKE LOKCT
*                                          = 1                       */
*DCL LOKCT255 BIT(32) CONSTANT('FF000000'X); /* CONSTANT TO CHECK FOR
*                                          MAX LOKCT (255)           */
*/*   DEVICE CHARACTERISTICS TABLE - ORIGINATES IN RDT USED TO DEFINE
*    DEVICE CHARACTERISTICS IN DNCB,FMCB AND NIB  */            01S0509
*/*  INITIAL LEVEL                                     001 08/07/74  */
*DCL  1  ISTDEVCH  BDY(WORD)BASED,                              01S0509
*        2  DEVSHCH BIT(8),            /* DEV SCHED CHARACTERISTICS  */
*           3  DEVCHAR  BIT(8),        /* COMPATIBILITY EXISTING CODE*/
*              4  DEVINPUT  BIT(1),    /* DEVICE IS FOR INPUT        */
*              4  DEVOTPUT  BIT(1),    /* DEVICE IS FOR OUTPUT       */
*              4  DEVCONVR  BIT(1),    /* DEVICE IS CONVERSATION     */
*                                      /* RN DEFINITION              */
*              4  DEVSUBND  BIT(1),    /* DEVICE HAS SCHEDULABLE     */
*                                      /*   SUB-NODES                */
*              4  DEVSPS BIT(1),       /* DEV IS START PRINT SENSITIVE*
*              4  DEVNNSPT BIT(1),     /* NODE HAS NETWRK MNGMNT SPRT*/
*              4  DEVCCTL BIT(1),      /* NODE HAS CONN CNTRL DEPENDCS*
*              4  DEVRSV01  BIT(1),    /* RESERVED                   */
*        2  DEVTCODE BIT(8),           /* DEVICE TYPE CODES          */
*           3  DEVCHAR2  BIT(8),       /* COMPATIBILITY EXISTING CODE*/
*        2  DEVMCODE BIT(8),           /* DEVICE MODEL CODE           *
*        2  DEVFLAGS BIT(8),           /*USE DEPENDS ON DEVSHCH VALUES*
*           3  DEVFCCTL BIT(4),        /* USED IF DEVICE REQ CONN CTRL*
*              4  DEVCBSC BIT(1),      /* RESET ORDERLY, BI-SYNCH
*                                         TERMINALS EXCEPT 3270'S    */
*              4  DEVCSSL BIT(1),      /*RESET AT END OF COMMAND. 3270'
*                                         AND START/STOP EXCEPT TERMS
*                                         WITH REVERSE BREAK FEATURE */
*                                                               01S0509
*              4  DEVCRVB BIT(1),      /* RESET IMMEDIATE. START/STOP
*                                         TERMS WITH REVERSE BREAK
*                                         FEATURE                    */
*              4  DEVCSWL BIT(1),      /* 1=HIGHER NODE IS SWITCH CON-
*                                         NECTION, 0=LEASED CONNECTION*
*           3  DEVCHAR3 BIT(4),        /* COMPATIBILITY EXISTING CODE*/
*              4  DEVCATTN BIT(1),     /* TERMINAL CAN INTERRUPT WITH
*                                         ATTENTION                  */
*              4  DEVCCHEK BIT(1),     /* TERMINAL HAS CHECKING      */
*              4  DEVCSTCL BIT(1),     /* TERMINAL HAS STATION  01S0509
*                                         CONTROL                    */
*              4  DEVCSLPN BIT(1),     /* TERMINAL HAS SELECTOR PEN  */
*        2  DEVPHYSA CHAR(1),          /* PHYSICAL DEVICE ADDRESS    */
*        2  DEVRSV03 CHAR(3);          /* RESERVED                   */
*/* DEVICE TYPE CODES */                                        01S0510
*DCL DEV2740 BIT(8) CONSTANT ('01'X);  /* DEVICE IS A 2740           */
*DCL DEV2741 BIT(8) CONSTANT ('02'X);  /* DEVICE IS A 2741           */
*DCL DEV1050 BIT(8) CONSTANT ('03'X);  /* DEVICE IS A 1050           */
*DCL DEVTWX  BIT(8) CONSTANT ('04'X);  /* DEVICE IS A TWX            */
*DCL DEVWTTY BIT(8) CONSTANT ('05'X);  /* DEVICE IS A WTTY           */
*DCL DEV115A BIT(8) CONSTANT ('06'X);  /* DEVICE IS A 115A           */
*DCL DEV83B3 BIT(8) CONSTANT ('07'X);  /* DEVICE IS AN 83B3          */
*DCL DEV2715 BIT(8) CONSTANT ('08'X);  /* DEVICE IS A 2715           */
*DCL DEV2770 BIT(8) CONSTANT ('09'X);  /* DEVICE IS A 2770           */
*DCL DEV2780 BIT(8) CONSTANT ('0A'X);  /* DEVICE IS A 2780           */
*DCL DEV3735 BIT(8) CONSTANT ('0B'X);  /* DEVICE IS A 3735           */
*DCL DEV3780 BIT(8) CONSTANT ('0C'X);  /* DEVICE IS A 3780           */
*DCL DEV1130 BIT(8) CONSTANT ('0D'X);  /* DEVICE IS AN 1130          */
*DCL DEV1800 BIT(8) CONSTANT ('0E'X);  /* DEVICE IS AN 1800          */
*DCL DEV3125 BIT(8) CONSTANT ('11'X);  /* DEVICE IS A 3125           */
*DCL DEV3135 BIT(8) CONSTANT ('12'X);  /* DEVICE IS A 3135           */
*DCL DEVSYS3 BIT(8) CONSTANT ('13'X);  /* DEVICE IS SYS 3            */
*DCL DEV2701 BIT(8) CONSTANT ('14'X);  /* DEVICE IS A 2701 OZ05270   */
*DCL DEV2703 BIT(8) CONSTANT ('15'X);  /* DEVICE IS A 2703 OZ05270   */
*DCL DEV3704 BIT(8) CONSTANT ('16'X);  /* DEVICE IS A 3704           */
*DCL DEV3705 BIT(8) CONSTANT ('17'X);  /* DEVICE IS A 3705           */
*DCL DEV2980 BIT(8) CONSTANT ('18'X);  /* DEVICE IS A 2980           */
*DCL DEV3277 BIT(8) CONSTANT ('19'X);  /* DEVICE IS A 3277           */
*DCL DEV3284 BIT(8) CONSTANT ('1A'X);  /* DEVICE IS A 3284           */
*DCL DEV3286 BIT(8) CONSTANT ('1B'X);  /* DEVICE IS A 3286           */
*DCL DEV3275 BIT(8) CONSTANT ('1C'X);  /* DEVICE IS A 3275           */
*DCL DEV3741 BIT(8) CONSTANT ('1D'X);  /* DEVICE IS A 3741           */
*DCL DEV3747 BIT(8) CONSTANT ('1E'X);  /* DEVICE IS A 3747           */
*DCL DEVMTA  BIT(8) CONSTANT ('28'X);  /* DEVICE IS AN MTA           */
*DCL DEV2972 BIT(8) CONSTANT ('33'X);  /* DEVICE IS A 2972           */
*DCL DEV3271 BIT(8) CONSTANT ('34'X);  /* DEVICE IS A 3271           */
*DCL DEV3272 BIT(8) CONSTANT ('36'X);  /* DEVICE IS A 3272           */
*DCL DEVCC   BIT(8) CONSTANT ('35'X);  /* DEVICE IS A PHYSICAL UNIT  */
*DCL DEV1052 BIT(8) CONSTANT ('64'X);  /* DEVICE IS A 1052           */
*DCL DEV1053 BIT(8) CONSTANT ('65'X);  /* DEVICE IS A 1053           */
*DCL DEV1054 BIT(8) CONSTANT ('66'X);  /* DEVICE IS A 1054           */
*DCL DEV1055 BIT(8) CONSTANT ('67'X);  /* DEVICE IS A 1055           */
*DCL DEV1056 BIT(8) CONSTANT ('68'X);  /* DEVICE IS A 1056           */
*DCL DEV1057 BIT(8) CONSTANT ('69'X);  /* DEVICE IS A 1057           */
*DCL DEV1058 BIT(8) CONSTANT ('6A'X);  /* DEVICE IS A 1058           */
*DCL DEV1092 BIT(8) CONSTANT ('6B'X);  /* DEVICE IS A 1092           */
*DCL DEV1093 BIT(8) CONSTANT ('6C'X);  /* DEVICE IS A 1093           */
*DCL DEVLU   BIT(8) CONSTANT ('6D'X);  /* DEVICE IS A LOGICAL UNIT   */
*DCL DEV545  BIT(8) CONSTANT ('78'X);  /* DEVICE IS A 545            */
*DCL DEV1017 BIT(8) CONSTANT ('79'X);  /* DEVICE IS A 1017           */
*DCL DEV1018 BIT(8) CONSTANT ('7A'X);  /* DEVICE IS A 1018           */
*DCL DEV2203 BIT(8) CONSTANT ('7B'X);  /* DEVICE IS A 2203           */
*DCL DEV2213 BIT(8) CONSTANT ('7C'X);  /* DEVICE IS A 2213           */
*DCL DEV2265 BIT(8) CONSTANT ('7D'X);  /* DEVICE IS A 2265           */
*DCL DEV2502 BIT(8) CONSTANT ('7E'X);  /* DEVICE IS A 2502           */
*DCL DEV50   BIT(8) CONSTANT ('7F'X);  /* DEVICE IS A 50             */
*DCL DEV1255 BIT(8) CONSTANT ('80'X);  /* DEVICE IS A 1255           */
*DCL DEV5496 BIT(8) CONSTANT ('81'X);  /* DEVICE IS A 5496           */
*/* MODEL CODES */                                              01S0563
*DCL DEVMOD1 BIT(8) CONSTANT ('00'X);  /* MODEL 1                    */
*DCL DEVMOD2 BIT(8) CONSTANT ('01'X);  /* MODEL 2                    */
*/*              RESOURCE DEFINITION TABLE                           */
*/*  REVISIONS                                         013 07/01/75  */
*DCL                                                            01S0565
*1  ISTRPRE BDY(WORD) BASED,     /* COMMON PREFIX                    */
*   2  RPRNAME  CHAR(8),         /* RESOURCE NAME                    */
*   2  RPRCOMID FIXED(31),       /* COMMUNICATION ID                 */
*      3  RPRSAF BIT(16),        /* SOURCE ADDRESS FIELD             */
*      3  RPRDAF BIT(16),        /* DESTINATION ADDRESS FIELD-       */
*                             /* CONTAINS DAF OF CTERM IN PORT ENTRY */
*   2  RPRRLOCK CHAR(LENGTH(ISTLOK)),  /* RESOURCE LOCK              */
*   2  RPRELEN  FIXED(15),       /* CURRENT ENTRY LENGTH             */
*   2  RPRPELEN FIXED(15),       /* PREVIOUS ENTRY LENGTH            */
*   2  RPRENTRY BIT(8),          /* FLAG FIELD 1 (ENTRY TYPE)        */
*   2  RPRFLAGA BIT(8),                                         01S0565
*      3  RPRACT BIT(1),         /* ACTIVE                           */
*      3  RPRINV BIT(1),         /* INVALID                          */
*      3  RPRTIED BIT(1),        /* TIED                             */
*      3  RPRENTBF BIT(1),       /* BUFFER TRACE THIS NODE           */
*      3  RPRENTIO BIT(1),       /* RESERVED                         */
*      3  RPRENTED BIT(1),       /* LAST ENTRY IN RDT SEGMENT        */
*      3  RPRVRYPD BIT(1),       /* VARY PENDING ON ENTRY            */
*      3  RPRLIVE  BIT(1),       /* RESOURCE IS LIVE                 */
*   2  RPRFLAGB BIT(8),          /* FLAG FIELD                       */
*      3  RPRENTVH BIT(1),       /* WHEN 1, ENTRY IS A VTAM HEADER   */
*      3  RPRENTVT BIT(1),       /* WHEN 1, ENTRY IS VTAM            */
*      3  RPRAOPN BIT(1),        /* NODE OPENABLE BY APPLICATION     */
*      3  RPRVIODN BIT(1),       /* VARY I/O HAS BEEN DONE           */
*      3  RPRONLIN BIT(1),       /* NODE VARIED ONLINE               */
*      3  RPRHLVPD BIT(1),       /* VARY PENDING IN HIGHEST     01S0565
*                                   LEVEL NODE                       */
*      3  RPRVYIMM BIT(1),       /* VARY IMMEDAITE ISSUED FOR NODE   */
*      3  RPRINTST BIT(1),       /* DEVICE IN TEST MODE              */
*   2  RPRCAUSE BIT(8),          /* FLAGS INDICATING CAUSE OF ENTRY
*                                                      INVALIDATION  */
*      3  RPRNOSRT BIT(1),       /* RPRINV SET BECAUSE NO SRTE BUILT */
*      3  RPRCRCPT BIT(1),       /* C/R CHECKPOINT ACTIVE 1=ACTIVE   */
*      3  RPRRSYNC BIT(1),       /* C/R RE-SYNC ON FIRST I/O         */
*                                /* REQUIRED: 1=YES                  */
*      3  RPRRSV03 BIT(5),       /* RESERVED                         */
*   2  RPRPEPCT FIXED(15),       /* VARY PENDING COUNTER             */
*   2  RPRTIOCT FIXED(8),        /* I/O TRACE COUNT                  */
*   2  RPRHDTYP BIT(8),          /* HEADER TYPE                      */
*   2  RPRLGONF PTR(31),         /* SIM. LOGON CHAIN FORWARD PTR     */
*   2  RPRLGONB PTR(31),         /* SIM. LOGON CHAIN BACKWARD PTR    */
*   2  RPRNSNEA PTR(31),         /* NEXT SCHEDULABLE NODE ENTRY ADDR */
*   2  RPRNCBA PTR(31),          /* ADDR OF ASSOCIATED NCB FOR  01S0565
*                                    OPENED NODES                    */
*   2  RPRDEVCH CHAR(LENGTH(ISTDEVCH)),  /* DEVICE CHARACTERISTICS   */
*   2  RPRRVPT1 PTR(31),         /* RESERVED                         */
*   2  RPRSTPCT FIXED(15),       /* COUNT OF SHOULDER TAPS           */
*   2  RPRSWDAF BIT(16),         /* SWITCHED DAF                     */
*   2  RPRPTHCT FIXED(8),        /* COUNT OF AVAILABLE PATHS    01S0565
*                                   TO THIS DEVICE                   */
*   2  RPRFLAGD CHAR(1),         /* FLAG BYTE                        */
*      3 RPRLTASN BIT(1),        /* LINE TRACE ACTIVE = 1            */
*      3 RPRCONCT BIT(1),        /* PHYSICAL CONNECTION EXISTS       */
*      3 RPRRSON  BIT(1),        /* RESET ONLINE                     */
*      3 RPRACTP  BIT(1),        /* ACTIVATE IN PROGRESS             */
*      3 RPRCONP  BIT(1),        /* CONTACT IN PROGRESS              */
*      3 RPRRSV05 BIT(2),        /* RESERVED                         */
*      3 RPRINIMM BIT(1),        /* ON=INACTIVATE IMMED. IN PROGRESS */
*   2  RPRFLAGC BIT(8),          /* FLAG FIELD                       */
*      3  RPRCLVPD BIT(1),       /* THIS ENTRY HAS BEEN CLOSED       */
*   2  RPRCONID CHAR(9);         /* CONTROL BLOCK ID                 */
*                                                               01S0565
*                                                               01S0565
*/* RPRENTRY - FOLLOWING EQUATES ARE FOR THE VARIOUS ENTRY TYPES     */
*DCL RPRENTCM BIT(8) CONSTANT('90'X);  /* ENTRY IS A COMPONENT       */
*DCL RPRENTIN BIT(8) CONSTANT('82'X);  /* ENTRY IS INTERMEDIATE NODE */
*DCL RPRENTTR BIT(8) CONSTANT('80'X);  /* ENTRY IS A TERMINAL        */
*DCL RPRENTUT BIT(8) CONSTANT('75'X);  /* ENTRY IS UTERM             */
*DCL RPRENTCL BIT(8) CONSTANT('70'X);  /* ENTRY IS A CLUSTER         */
*DCL RPRENTLN BIT(8) CONSTANT('50'X);  /* ENTRY IS A LINE            */
*DCL RPRENTLH BIT(8) CONSTANT('03'X);  /* ENTRY IS A LOCAL HEADER    */
*DCL RPRENTGP BIT(8) CONSTANT('30'X);  /* ENTRY IS A GROUP           */
*DCL RPRENTLC BIT(8) CONSTANT('45'X);  /* ENTRY IS A LOCAL DEVICE    */
*DCL RPRENTAH BIT(8) CONSTANT('02'X);  /* ENTRY IS APPLICATION HEADER*/
*DCL RPRENTAP BIT(8) CONSTANT('55'X);  /* ENTRY IS APPLICATION       */
*DCL RPRENTDS BIT(8) CONSTANT('20'X);  /* ENTRY IS LCDO         01S0577
*                                         (DIALSET)                  */
*DCL RPRENTRN BIT(8) CONSTANT('01'X);  /* ENTRY IS THE RN            */
*DCL RPRENTCC BIT(8) CONSTANT('71'X);  /* ENTRY IS A PU              */
*DCL RPRENTLU BIT(8) CONSTANT('81'X);  /* ENTRY IS LOGICAL UNIT      */
*DCL RPRENTSW BIT(8) CONSTANT('04'X);  /* ENTRY IS SWITCHED          */
*                                      /* SUBAREA HEADER             */
*DCL RPRENTLS BIT(8) CONSTANT('05'X);  /* ENTRY IS LOCAL             */
*                                      /* SUBAREA HEADER             */
*DCL RPRENTPX BIT(8) CONSTANT('72'X);  /* ENTRY IS A PUX             */
*DCL RPRENTLX BIT(8) CONSTANT('10'X);  /* ENTRY IS A LUX             */
*DCL RPRENTDA BIT(8) CONSTANT('51'X);  /* ENTRY IS A DAN             */
*                                                               01S0585
*                                                               01S0585
*/* THE FOLLOWING IS A PREFIX FOR ALOCATION ENTRIES                  */
*/*   ISTRCL-CLUSTER,ISTRTR-TERMINAL,ISTRCM-COMPONENT                */
*                                                               01S0586
*DCL                                                            01S0586
*1  ISTRCPRE BDY(WORD) BASED,    /* LEVEL 1 DECLARE                  */
*   2  RCPPRE  CHAR(LENGTH(ISTRPRE)),      /* COMMON PREFIX          */
*   2  RCPICELN PTR(31),         /* PTR LOGON ICE QUEUE              */
*   2  RCPLNAPA PTR(31),         /* PTR APLICATION ENTRY FOR SIMLOGON*/
*   2  RCPICEAQ PTR(31),         /* PTR ACQUIRE ICE QUEUE            */
*   2  RCPACETR PTR(31),         /* PTR ACE QUEUE                    */
*   2  RCPBHSI1 CHAR(1),         /* GEN'D BHSET ID                   */
*   2  RCPBHSI2 CHAR(1),         /* OVERRIDING BHSET ID SPECIFIED
*                                   BY USER                          */
*   2  RCPBFLIM PTR(8),          /* BUFFER LIMIT                     */
*   2  RCPPMODE CHAR(1),         /* PERMISSABLE MODES                */
*      3 RCPRBASC BIT(1),        /* 1= BASIC OK                      */
*      3 RCPRRECD BIT(1),        /* 1= RECORD OK                     */
*      3 *        BIT(6),        /* RESERVED                         */
*   2  RCPLGNIN CHAR(20) BDY(WORD), /* INIT LOGON DATA               */
*      3 RCPLGNAP CHAR(8),       /* APPL FOR VTAM SIMLOGON           */
*      3 RCPLGNCT CHAR(8),       /* NAME OF LOGON CHAR TABLE         */
*      3 RCPINTA  PTR(31),       /* ADDR OF INTERPRET TABLE          */
*   2  RCPRSV03 PTR(31),         /* RESERVED FOR C/R                 */
*   2  RCPRSV04 PTR(31),         /* RESERVED FOR C/R                 */
*   2  RCPRSV05 PTR(31);         /* RESERVED FOR C/R                 */
*                                                               01S0586
*                                                               01S0586
*DCL                                                            01S0587
*1  ISTRDT BDY(WORD) BASED,      /* LEVEL 1 DECLARE                  */
*   2  RDTPRE CHAR(LENGTH(ISTRPRE)), /* ENTRY PREFIX                 */
*   2  RDTPLEN CHAR(4)BDY(WORD), /* PRIORITY AND LENGTH FIELD        */
*      3  RDTPRIOR,              /* DETERMINES SEGMENT TYPE          */
*         4  * BIT(3),           /*    NOT USED                      */
*         4  RDTPRIAP BIT(1),    /*    APPLICATION SEGMENT           */
*         4  RDTPRILC BIT(1),    /*    LOCAL SEGMENT                 */
*         4  RDTPRIRN BIT(1),    /*    RN SEGMENT                    */
*         4  RDTPRISW BIT(1),    /*    SWITCHED SEGMENT              */
*         4  RDTPRILS BIT(1),    /*    LOCAL SUBAREA SEGMENT         */
*      3  RDTLEN FIXED(24),      /* LENGTH OF RDT                    */
*   2  RDTFORW PTR(31),          /* FOREWARD POINTER                 */
*   2  RDTBACK PTR(31),          /* BACKWARD POINTER                 */
*   2  RDTFLAGS BIT(16),         /* SEGMENT FLAGS,UNUSED/REUSED      */
*   2  RDTCTSNT FIXED(15),       /* COUNT OF SNT ENTRIES FOR    01S0587
*                                   SEGMENT                          */
*   2  RDTMAXID PTR(8),          /* MAXIMUM NODE ID FOR         01S0587
*                                   NETWORK                          */
*   2  RDTNODID PTR(8),          /* NODE ID FOR THIS SEGMENT         */
*   2  RDTLGCT  PTR(8),          /* COUNT OF LOGONS OUTSTANDING      */
*   2  RDTFLAGB BIT(8),          /* FLAG BYTE                        */
*      3 RDTOUERP BIT(1),        /* 1 = REPEAT ERP                   */
*      3 RDTPRGDN BIT(1),        /* 1 = PURGE ISSUED                 */
*      3 RDTCTPGD BIT(1),        /* 1 = CONTACT PURGED               */
*      3 RDTCTCFL BIT(1),        /* HIGHER FAILURE-CONTACT FLUSHED   */
*      3 RDTBHSET BIT(1),        /* BHSET REQUIRED                   */
*      3 RDTRSV01 BIT(3),        /* RESERVED                         */
*   2  RDTVPAB  PTR(31),         /* ADDR OF VARY PAB                 */
*   2  RDTEPAB  PTR(31),         /* ADDR OF ERP PAB                  */
*   2  RDTDPAB  PTR(31),         /* ADDR OF DUMP/LOAD/RESTART PAB    */
*   2  RDTTPAB  PTR(31),         /* TOLTEP SSCP PAB                  */
*   2  RDTVYRPH PTR(31),         /* @ OF VARY RPH WAITING            */
*                                /* FOR RESTART COMPLETION           */
*      3 RRNVYRPH PTR(31),       /* DELETE ALIAS IN NEXT             */
*                                /* FIRST SNA/2 BUILD                */
*   2  RDTSTCNT PTR(8),          /* ACTIVE SUBNODE COUNT             */
*      3 RRNSTCNT PTR(8),        /* DELETE ALIAS IN NEXT             */
*                                /* FIRST SNA/2 BUILD                */
*   2  *        CHAR(3),         /* RESERVED                         */
*   2  RDTCRSDS CHAR(8),         /* C/R DATA SET IDENTIFIER          */
*                                /* BLANK IMPLIES NOT SPECIFIED      */
*   2  RDTCRSPW CHAR(8),         /* C/R DATASET PASSWORD             */
*                                /* BLANK IMPLIES NOT SPECIFIED      */
*   2  RDTVSRPL PTR(31);         /* C/R PTR TO VSAM RPL              */
*                                                               01S0587
*                                                               01S0587
*DCL                                                            01S0588
*1  ISTRAP BDY(WORD) BASED,      /* APPLICATION ENTRY                */
*   2  RAPPRE CHAR(LENGTH(ISTRPRE)), /*  USE ISTRPRE DSECT           */
*   2  RAPACBA PTR(31),          /*   POINTER TO ACB                 */
*   2  RAPACDEB PTR(31),         /*  POINTER TO ACBDEB               */
*   2  RAPAPPWD CHAR(8),         /* APPLICATION PASSWORD             */
*   2  RAPICELG PTR(31),         /* ANCHOR FOR LOGON ICE TO APLICATION*
*   2  RAPICEAC PTR(31),         /* ANCHOR ACEPT ICE FOR APPLICATION */
*   2  RAPICEAQ PTR(31),         /*  ANCHOR ACQUIRE ICE BY APPLI     */
*   2  RAPACEAP PTR(31),         /* ANCHOR FOR APPLICATION ACES      */
*   2  RAPTRPRE FIXED(15),       /* COUNT OF PREMPTED TERMINALS      */
*   2  RAPACEQD FIXED(15),       /* COUNT OF ACES QUEUED             */
*   2  RAPFLG BIT(8),            /*  FLAG FIELD                      */
*      3 RAPABLGN BIT(1),        /*  PERMANENTLY BLOCK LOGONS BIT    */
*      3 RAPAQUI BIT(1),         /* QUIESCE IN PROCESS               */
*      3 RAPASLGI BIT(1),        /*  APPLICATION FIRST TIME LOGON
*                                    ISSUED FLAG                     */
*      3 RAPATLGN BIT(1),        /*  TEMPORARILY BLOCK LOGONS BIT    */
*      3 RAPRSV03 BIT(1),        /*  RESERVED                        */
*      3 RAPRSV04 BIT(1),        /*  RESERVED                        */
*      3 RAPRSV05 BIT(1),        /*  RESERVED                        */
*      3 RAPRSV06 BIT(1),        /*  RESERVED                        */
*   2  RAPFLGB BIT(8),           /* AUTHORIZATION FLAGS              */
*      3 RAPALLF BIT(1),         /* ALL FUNCTIONS AUTH.              */
*      3 RAPABLCK BIT(1),        /* BLOCK I/O AUTH.                  */
*      3 RAPAPASS BIT(1),        /* PASS AUTH.                       */
*      3 RAPAPRMT BIT(1),        /* PREEMPT AUTH.                    */
*      3 RAPAACQ BIT(1),         /* ACQUIRE AUTH.                    */
*      3 RAPAPPO  BIT(1),        /* RNO PPO (PRIMARY PROGRAM AUTH    */
*      3 RAPASPO  BIT(1),        /* RNO SPO (SECONDARY PROGRAM AUTH  */
*      3 RAPANVPC BIT(1),        /* NO VSPACE AUTHORIZED             */
*   2  RAPFLGC BIT(8),           /* AUTHORIZATION FLAGS RESERVED     */
*      3 RAPRSV10 BIT(1),        /*  RESERVED                        */
*      3 RAPRSV11 BIT(1),        /*  RESERVED                        */
*      3 RAPRSV12 BIT(1),        /*  RESERVED                        */
*      3 RAPRSV13 BIT(1),        /*  RESERVED                        */
*      3 RAPRSV14 BIT(1),        /*  RESERVED                        */
*      3 RAPRSV15 BIT(1),        /*  RESERVED                        */
*      3 RAPRSV16 BIT(1),        /*  RESERVED                        */
*      3 RAPRSV17 BIT(1),        /*  RESERVED                        */
*   2  RAPBFACT PTR(8),          /* BUFFER LIMIT FACTOR              */
*   2  RAPRVPT1 PTR(31),         /*  RESERVED                        */
*   2  RAPRVPT2 PTR(31);         /*  RESERVED                        */
*                                                               01S0588
*                                                               01S0588
*DCL                                                            01S0589
*1  ISTRLC BDY(WORD) BASED,      /* LOCAL ENTRY                      */
*   2  RLCPRE CHAR(LENGTH(ISTRPRE)),  /* COMMON PREFIX               */
*   2  RLCADR PTR(31),                                          01S0589
*      3  RLCFLAG BIT(8),        /* FLAG BYTE                        */
*         4  RLCRSV22 BIT(1),    /* RESERVED                         */
*         4  RLCRBISA BIT(1),    /* INITIAL STATUS - 1 = ACTIVE      */
*         4  RLCRSV14 BIT(3),    /* UNUSED/RESERVED                  */
*         4  RLCACNT BIT(1),     /* MESSAGE BLOCK ACCEPTED           */
*         4  RLCRSVDE BIT(2),    /* RESERVED                         */
*      3  RLCUCBAD PTR(24),      /* UCB /PUB ADDRESS                 */
*   2 RLCLCCUA CHAR(3),          /* DEVICE CHANNEL UNIT ADDR         */
*   2 RLCRVPT1 CHAR(1),          /* RESERVED                         */
*   2 RLCRVPT2 PTR(31);          /* RESERVED                         */
*                                                               01S0589
*                                                               01S0589
*DCL                                                            01S0590
*1  ISTRRN BDY(WORD) BASED,      /* RN ENTRY                         */
*   2  RRNPRE CHAR(LENGTH(ISTRDT)),  /*  USE ISTRDT DSECT            */
*   2  RRNADR PTR(31),                                          01S0590
*      3  RRNFLAG BIT(8),                                       01S0590
*         4  RRNRSV89 BIT(1),    /* RESERVED                         */
*         4  RRNRBISA BIT(1),    /* INITIAL STATUS 1 = ACTIVE        */
*         4  RRNLCSIP BIT(1),    /* NODE BEING ACTIVATED             */
*         4  RRNLCDIE BIT(1),    /* HIGHER NODE NOT SUCCESFULLY      */
*                                /*             ACTIVATED            */
*         4  RRNLCDIP BIT(1),    /* NODE BEING DEACTIVATED           */
*         4  RRNERPIP BIT(1),    /* ERP IN PROCESS                   */
*         4  RRNDSTCT BIT(1),    /* DEACT TO DECREMENT STCNT         */
*         4  RRNRSV11 BIT(1),    /* UNUSED/RESERVED                  */
*      3  RRNUCBAD PTR(24),      /* UCB/PUB ADDR                     */
*         4 RRNCHQI  BIT(8),     /* CHANNEL QUEUE INDEX              */
*         4 RRNLUBA  PTR(16),    /* DESCRIBE ENTRY IN PUB            */
*                                /* OWNERSHIP TABLE                  */
*   2  RRNGRPA PTR(31),          /* POINTER TO FIRST GROUP ENTRY     */
*   2  RRNRNCUA CHAR(3),         /* CHANNEL UNIT ADDR                */
*   2  RRNRLDIP FIXED(8),        /* REMOTE LOAD/DUMP IN PROG. COUNT  */
*   2  RRNTRENT PTR(31),         /* ADDR TERM ENTRY IN LOCAL         */
*   2  RRNBHSET PTR(31),         /* POINTER TO TABLE OF BHSET NAMES  */
*   2  RRNCTBHS FIXED(15),       /* COUNT OF BHSET NAMES IN RRNBHSET */
*   2  RRNCTEGP FIXED(15),       /* COUNT OF GROUP ENTRIES FOR RN    */
*   2  RRNCTELI FIXED(15),       /* COUNT OF LINE ENTRIES FOR RN     */
*   2  RRNCTECL FIXED(15),       /* COUNT OF CLUSTER ENTRIES FOR RN  */
*   2  RRNCTETR FIXED(15),       /* COUNT OF TERMINAL ENTRIES FOR RN */
*   2  RRNCTEIN FIXED(15),       /* COUNT OF INT. NODE ENTRIES FOR RN*/
*   2  RRNCTECM FIXED(15),       /* CNT OF COMPONENT ENTRIES FOR RN  */
*   2  RRNCTENT FIXED(15),       /* # ALL ENTRIES IN 370X RDT SEGMENT*/
*   2  RRNRDF CHAR(4),           /*  RESOURCE DEFINITION FLAG        */
*      3  RRNRDFA  BIT(8),       /* FLAGS (WORD 1 BYTE 1)            */
*         4  RRNRASHT BIT(1),    /* AUTO NETWORK SHUTDOWN            */
*         4  RRNRAIPL BIT(1),    /* AUTO IPL ON RN FAILURE           */
*         4  RRNRADMP BIT(1),    /* AUTO DUMP ON RN FAILURE          */
*         4  RRNRASYN BIT(1),    /* C/R AUTOMATICALLY RESYNCHRONIZED */
*                                /* IF ALREADY LOADED NCP            */
*                                /* 0=NO, 1=YES                      */
*         4  RRNRAOLT BIT(1),    /* ON-LINE TERMINAL TEST            */
*         4  RRNRBREM  BIT(1),   /* REMOTE RN FLAG                   */
*         4  RRNRANCP BIT(1),    /* GENERATION TYPE NCP              */
*         4  RRNRAPEP BIT(1),    /* GENERATION TYPE PEP              */
*      3  RRNRDFB BIT(16),       /* FLAG FIELD B (RDF)               */
*         4  RRNRBMDL BIT(1),    /* (=1 IF 3705) ELSE 3704           */
*         4  RRNRSV02 BIT(1),    /* RESERVED                         */
*         4  RRNRBCCL BIT(1),    /* LOOSELY COUPLED CHANNEL          */
*         4  RRNRBCCT BIT(1),    /* TIGHTLY COUPLED CHANNEL          */
*         4  RRNRBSEC BIT(1),    /* SECONDARY CHANNEL EXIST          */
*         4  RRNRBCT1 BIT(1),    /* PRIM CHAN TYPE (0=TYPE1,1=TYPE2) */
*         4  RRNRBCT2 BIT(1),    /* SEC CHAN TYPE (0=TYPE1,1=TYPE2)  */
*         4  RRNRSV03 BIT(1),    /* RESERVED                         */
*         4  RRNRBBUP BIT(1),    /* BRINGUP IS TO BE EXERCISED  01S0590
*                                         FOR THIS RN DURING IPL     */
*         4  RRNVYDON BIT(1),    /* RDT SEG IS BEING FREED           */
*         4  RRNRSV01 BIT(5),    /* RESERVED                         */
*         4  RRNPTASL BIT(1),    /* SOME PORT SOLICITOR IS WAITING
*                                   TO BE REDRIVEN BY CLSDST         */
*      3  RRNRSV55 CHAR(1),      /*  RESERVED                        */
*   2  RRNCMF CHAR(4),           /*  FLAG FIELDS FOR COMMANDS        */
*      3  RRNCMFA  BIT(8),       /* FLAG FIELD A -COMMANDS           */
*         4  RRNCAALL BIT(1),    /* PHYSICAL DISCONNECT              */
*         4  RRNCAATD BIT(1),    /* ACTIVATE DEVICE                  */
*         4  RRNCAATG BIT(1),    /* ACTIVATE GROUP                   */
*         4  RRNCAATI BIT(1),    /* ACTIVATE INVITES                 */
*         4  RRNCAMBH BIT(1),    /* MODIFY BLOCK HANDLER SET         */
*         4  RRNCACDT BIT(1),    /* CHANGE DATE AND TIME             */
*         4  RRNCADTD BIT(1),    /* DEACTIVATE DEVICE                */
*         4  RRNCADGO BIT(1),    /* DEACTIVATE GROUP ORDERLY         */
*      3  RRNCMFB  BIT(8),       /* FLAG FIELD B - COMMANDS          */
*         4  RRNCBDLO BIT(1),    /* DEACTIVATE LINE ORDERLY          */
*         4  RRNCBDLH BIT(1),    /* DEACTIVATE LINE HALT             */
*         4  RRNCBDLR BIT(1),    /* DISPLAY LINE RESOURCE ID         */
*         4  RRNCBRDS BIT(1),    /* REQUEST DEVICE STATUS            */
*         4  RRNCBRLS BIT(1),    /* REQUEST LINE STATUS              */
*         4  RRNCBNPL BIT(1),    /* CHANGE LINE NEG POLL RESPONSE LIM*/
*         4  RRNCBMOD BIT(1),    /* COPY/SET DESTINATION NODE        */
*         4  RRNCBALT BIT(1),    /*  ACTIVATE LINE TRACE             */
*      3  RRNCMFC  BIT(8),       /* FLAG FIELD C - COMMANDS          */
*         4  RRNCCRCN BIT(1),    /* RESET CONDITIONAL                */
*         4  RRNCCRDQ BIT(1),    /* RESET DEVICE QUEUE               */
*         4  RRNCCRST BIT(1),    /* REQUEST DEVICE STATISTICS        */
*         4  RRNCCCRC BIT(1),    /* CHANGE RETRY COUNTS              */
*         4  RRNCCRIM BIT(1),    /* RESET IMMEDIATE                  */
*         4  RRNCCRCM BIT(1),    /* RESET CONTROL MODE               */
*         4  RRNCCSIM BIT(1),    /* COPY/REPLACE SESSION INIT INFO   */
*         4  RRNCCCSL BIT(1),    /* CHANGE SESSION LIMIT             */
*      3  RRNCMFD  BIT(8),       /* FLAG FIELD D - COMMANDS          */
*         4  RRNCDCSP BIT(1),    /* CHANGE SERIVCE PAUSE             */
*         4  RRNCDSTD BIT(1),    /* DISPLAY STORAGE                  */
*         4  RRNCDDTL BIT(1),    /* CHANGE DEVICE TRANSMIT LIMIT     */
*         4  RRNCDBCK BIT(1),    /* SWITCHED NETWORK BACKUP          */
*         4  RRNCDDSI BIT(1),    /* COPY/REPLACE DEV SESSION INIT INFO*
*         4  RRNCDREC BIT(1),    /* RESET AT END OF COMMAND          */
*         4  RRNREMPO BIT(1),    /* REMOTE POWER OFF                 */
*         4 RRNRSV05  BIT(1),    /*       NOT  USED                  */
*   2  RRNFLUX  PTR(31),         /* POINTER TO FIRST LUX             */
*   2  RRNCPLUB CHAR(6),         /* SYMBOLIC UNIT NAME OF NCP DATASET*/
*   2  RRNEPADR PTR(15),         /* EP SUBCHANNEL ADDRESS            */
*   2  RRNNMDPD  CHAR(8),        /* FILENAME FOR DUMP DATA SET       */
*      3  RRNDPLUB CHAR(6),      /* LUB NAME FOR DUMP DATASET        */
*      3  RRNPUBI  BIT(8),       /* PUB INDEX                        */
*      3  RRNRSV88 CHAR(1),      /* RESERVED-DOS ONLY                */
*   2  RRNRSV04  CHAR(6),        /* RESERVED                         */
*   2  RRNDELAY  CHAR(2),        /* INITIAL VALUE FROM DELAY         */
*   2  RRNNMNCP  CHAR(8),        /* DSNAME FOR NCP LOAD MODULE       */
*   2  RRNHPRE PTR(16),          /* HOST PREFIX INFORMATION          */
*      3  RRNHLENH PTR(8),       /* LENGTH OF HOST HEADER PREFIX     */
*      3  RRNHLENT PTR(8),       /* LENGTH OF HOST TEXT PREFIX       */
*   2  RRNHBUFS FIXED(15),       /* SIZE OF BUFFER UNITS FOR HOST    */
*   2  RRNCTPCC PTR(8),          /* CNT OF BUFFERS RECEIVING PCCU DATA*
*   2  RRNNCPNM CHAR(7),         /* NAME OF NCP LOAD MOD 7 CHAR MAX  */
*   2  RRNMSIZE PTR(31),         /* MAX SIZE OF SEND                 */
*   2  RRNRPLPT PTR(31),         /* C/R POINTER TO RPL               */
*   2  RRNNCSPL PTR(31),         /* POINTER TO NCSPL                 */
*   2  RRNLASTE PTR(31),         /* PTR TO LAST ENTRY IN RN SEGMENT  */
*   2  RRNRDCUA CHAR(3),         /* DEFAULT CUA                      */
*   2  *        PTR(8),          /* RESERVED                         */
*   2  RRNRINNM CHAR(8);         /* DEFAULT INNODE NAME IN LOCAL
*                                   RDT TO CONNECT REMOTE RN         */
*                                                               01S0590
*DCL                                                            01S0591
*1  ISTRGP BDY(WORD) BASED,      /* GROUP ENTRY                      */
*   2  RGPPRE CHAR(LENGTH(ISTRPRE)),        /*  USE ISTRPRE DSECT    */
*   2  RGPFLG BIT(8),            /*  FLAG FIELD                      */
*      3  RGPADIL BIT(1),        /* =1 SWITCHED, =0 NON-SWIT         */
*      3  RGPASS  BIT(1),        /* START/STOP                       */
*      3  RGPABSC  BIT(1),       /* BINARY SYNCHRONOUS               */
*      3  RGPASDLC BIT(1),       /* DATA LINK CONTROL                */
*      3 RGPRSV02  BIT(4),       /*     NOT USED                     */
*   2  RGPRSV03 FIXED(8),        /* USED TO FORCE ALINEMENT          */
*   2  RGPCTELN FIXED(15),       /* COUNT OF LINE ENTRIES FOR GROUP  */
*   2  RGPCTECL FIXED(15),       /* CNT OF CLUSTER ENTRIES FOR GROUP */
*   2  RGPCTETR FIXED(15),       /* CNT TERMINAL ENTRIES FOR GROUP   */
*   2  RGPCTEIN FIXED(15),       /* COUNT OF INNODE ENTRIES FOR GROUP*/
*   2  RGPCTECM FIXED(15),       /* CNT COMPONENT ENTRIES FOR GROUP  */
*   2  RGPRVPT1 PTR(31),         /* RESERVED                         */
*   2  RGPRVPT2 PTR(31);         /* RESERVED                         */
*                                                               01S0591
*                                                               01S0591
*DCL                                                            01S0592
*1  ISTRLN BDY(WORD) BASED,      /* LINE ENTRY                       */
*   2  RLNPRE CHAR(LENGTH(ISTRPRE)), /* USE COMMON PREFIX            */
*   2  RLNADR PTR(31),                                          01S0592
*      3  RLNFLAG BIT(8),                                       01S0592
*         4  RLNEAM   BIT(1),    /* ENABLE ANSWER MODE DONE          */
*         4  RLNRBISA BIT(1),    /* INITIAL STATUS 1=ACTIVE          */
*         4  RLNRSV01 BIT(6),    /* RESERVED                         */
*      3  RLNUCBAD PTR(24),      /* UCB/PUB ADDRESS                  */
*         4  RLNCUA CHAR(3),     /* NOT USED                         */
*   2  RLNCTECL FIXED(15),       /* CNT OF CLUSTER ENTRIES FOR LINE  */
*   2  RLNCTETR FIXED(15),       /* CNT OF TERMINAL ENTRIES FOR LINE */
*   2  RLNCTEIN FIXED(15),       /* COUNT OF INNODE ENTRIES FOR LINE */
*   2  RLNCTECM FIXED(15),       /* CNT OF COMPONENT ENTRIES FOR LINE*/
*   2  RLNACTCT FIXED(15),       /* COUNT OF COMPONENTS, CLUSTERS
*                                             AND TERMINALS ON LINE  */
*   2  RLNSTAT1 BIT(8),          /* LINK TRAP STATUS                 */
*      3 RLNTRAP  BIT(1),        /* INTERCEPT NEXT LINK OPERATION    */
*      3 RLNLRST  BIT(1),        /* LINK RESTART COND CAUSED TRAP    */
*      3 RLNINOPL BIT(1),        /* LINK INOP CONDITION CAUSED TRAP  */
*      3 RLNINOPP BIT(1),        /* PU INOP CONDITION CAUSED TRAP    */
*      3 RLNVD    BIT(1),        /* VARY INACT CONDITION CAUSED TRAP */
*      3 RLNRSV03 BIT(3),        /* RESERVED                         */
*    2 RLNSTAT2 BIT(8),          /* LINK NORMAL STATUS               */
*      3 RLNOHIN  BIT(1),        /* OFFHOOK REPORTED TO SW SUBAREA-  */
*                                /* REPLY DUE                        */
*      3 RLNINUSE BIT(1),        /* LINK RESOURCES ALLOCATED TO PU   */
*      3 RLNRSV04 BIT(6),        /* RESERVED                         */
*   2  RLNRDF CHAR(4),           /*  RESOURCE DEFINITION FLAG        */
*      3  RLNRDFA  BIT(8),       /* FLAGS FIELD A                    */
*         4  RLNRACNT BIT(2),    /*  NEXT TWO FIELDS                 */
*            5  RLNRACAT BIT(1), /* CALL INITIATOR-TERMINAL          */
*            5  RLNRACAN BIT(1), /* CALL INITIATOR-NCP               */
*         4  RLNGANSW BIT(1),    /* C/R GENNED IN ANSWER MODE, 1=YES */
*         4  RLNPORT  BIT(1),    /* THIS IS A PORT ENTRY             */
*         4  RLNIDV   BIT(1),    /* THIS IS AN ID VERIFIED PORT      */
*         4  RLNRAEP  BIT(1),    /* TYPE IS EP                       */
*         4  RLNRANCP BIT(1),    /* TYPE IS NCP                      */
*         4  RLNRAPEP BIT(1),    /* TYPE IS PEP                      */
*      3  RLNRDFB  BIT(8),       /* FLAGS FIELD B                    */
*         4  RLNRBUSE BIT(1),    /* EP/NCP USE  1=NCP                */
*         4  RLNANSWR BIT(1),    /* ON = SEND ENABLE ANSWER          */
*                                /* AT ACTIVATE                      */
*         4  RLNAUTOD BIT(1),    /* ON=AUTODIAL, OFF=MANUAL          */
*         4  RLNRSV0B BIT(1),    /* RESERVED                         */
*         4  RLNTTV   BIT(1),    /* THIS IS TERM TYPE VERIFICATION
*                                   PORT                             */
*         4  RLNRAPOL BIT(1),    /* POLLED LINE                      */
*         4  RLNRATRN BIT(1),    /* SDLC LINE                        */
*         4  RLNMULTP BIT(1),    /* 0 = POINT TO POINT,         01S0592
*                                   1 = MULTI POINT                  */
*      3  RLNRDFC  BIT(8),       /* FLAGS FIELD C - LINE CODES       */
*                                /* SEE CONSTANTS FOR DEFINITION     */
*      3  RLNRDFD  BIT(8),       /* FLAGS FIELD D - RESERVED         */
*   2  RLNAUTOA FIXED(15),       /* AUTOCALL ADDRESS                 */
*   2  RLNRDSLM FIXED(8),        /* SCHED. LIM BASED ON LINE SPEED 2-4*
*   2  RLNCTSES FIXED(8),        /* COUNT OF CONCURRENT SESSIONS     */
*   2  RLNACTRM PTR(8),          /* COUNT OF ACTIVE REMOTES FOR THIS
*                                   TRUNK                            */
*   2  RLNRESV1 BIT(8),          /* RESERVED/UNUSED                  */
*   2  RLNACTSN FIXED(15),       /* COUNT ACTIVE NODES ON LINK       */
*   2  RLNPOLMT FIXED(8),        /* NEG POLL RESPONSE LIMIT          */
*   2  RLNPAUSE FIXED(8),        /* POLL DELAY/PAUSE                 */
*   2  RLNCRFLG BIT(8),          /* FLAG-CONFIGURATION RESTART       */
*      3 RLNACTLN BIT(1),        /* ACTIVATE LINK OK                 */
*      3 RLNSWNCP BIT(1),        /* SWITCH PEP LINE TO NCP OK        */
*      3 RLNLSCMD BIT(3),        /* LINE SCHEDULING COMMANDS    01S0592
*                                   ISSUED OK                        */
*        4 RLNNPRLM BIT(1),      /* CHNG NEG POLL RESP LIMIT OK      */
*        4 RLNSESLM BIT(1),      /* CHNG SESSION LIMIT OK            */
*        4 RLNSVSKP BIT(1),      /* CHNG SERVICE SEEK PAUSE OK       */
*      3 RLNSWEP  BIT(1),        /* SWITCH TO EP                     */
*      3 RLNCRRSV BIT(2),        /* RESERVED FOR CONFIG RESTART      */
*   2  *        CHAR(1),         /* RESERVED                         */
*   2  RLNX2SW  PTR(31),         /* ADDRESS OF 370X TO SWITCH        */
*                                /* COMMUNICATION NCSPL              */
*   2  RLNNCSPL PTR(31),         /* ADDRESS OF SPIN-OFF NCSPL        */
*                                /* FOR VARY DEACTIVATE              */
*   2  RLNRVPT2 PTR(31);         /* RESERVED                         */
*                                                               01S0592
*                                                               01S0592
*DCL RLNRCEDC BIT(8) CONSTANT('01'X);  /* EBCDIC (CONSTANTS)         */
*DCL RLNRCUSA BIT(8) CONSTANT('02'X);  /* USASCII                    */
*DCL RLNRCBCD BIT(8) CONSTANT('03'X);  /* BCD                        */
*DCL RLNRCEBC BIT(8) CONSTANT('04'X);  /* EBCD                       */
*DCL RLNRCCOR BIT(8) CONSTANT('05'X);  /* COR                        */
*DCL RLNRCKAT BIT(8) CONSTANT('06'X);  /* KATAKANA                   */
*DCL RLNRCIT2 BIT(8) CONSTANT('08'X);  /* ITA2                       */
*DCL RLNRCZS3 BIT(8) CONSTANT('09'X);  /* ZSC3                       */
*                                                               01S0600
*                                                               01S0600
*DCL                                                            01S0601
*1  ISTRPT BDY(WORD) BASED,        /* PORT ENTRY                     */
*   2 RPTLN CHAR(LENGTH(ISTRLN)),  /* INCLUDE LINE ENTRY             */
*   2 RPTLNCID BDY(WORD) CHAR(4),  /* COMM ID OF LINE                */
*     3 RPTLNSAF CHAR(2),          /* SAF                            */
*     3 RPTLNDAF CHAR(2),          /* DAF                            */
*   2 RPTCTNM CHAR(8),             /* CTERM NAME                     */
*   2 RPTDITT PTR(31),             /* POINTER TO DITT TABLE          */
*     3 RPTDIVT PTR(31),           /* POINTER TO DIVT TABLE          */
*   2 RPTATERM PTR(31),            /* POINTER TO ASSOCIATED ENTRY    */
*   2 RPTUTERM PTR(31),            /* POINTER TO UTERM ENTRY         */
*   2 RPTFLAG1 CHAR(1),            /* PORT SOLICITOR FLAGS           */
*     3  RPTASLEP BIT(1),          /* THIS PORT SOLICITOR IS WAITING
*                                     TO BE REDRIVEN BY CLSDST       */
*     3 RPTVRYPD BIT(1),           /* VARY PENDING IN THIS CTERM     */
*     3 RPTHLVPD BIT(1),           /* VARY PENDING IN HIGHER LEVEL
*                                     NODE                           */
*     3 RPTONLIN BIT(1),           /* ONLINE/OFFLINE(VARY)           */
*     3 RPTVIODN BIT(1),           /* I/O DONE FOR THIS NODE         */
*     3 RPTVYIMM BIT(1),           /* VARY IMM ISSUED FOR PORT       */
*     3 RPTDYNAM BIT(1),           /* BHSET = DYNAMIC                */
*     3 RPTISTAT BIT(1),           /* CTERM(PORT) IS INITIALLY ACTIVE*/
*                                  /* 1 = YES                        */
*   2 RPTRSV01 CHAR(1),            /* RESERVED                       */
*   2 RPTDAFSV BIT(16),            /* SAVE TERMINAL DAF              */
*   2 RPTPEPCT FIXED(15),          /* PEP COUNT FOR CTERM            */
*   2 RPTPTHCT FIXED(15),          /* PATH COUNT FOR CTERM           */
*   2 RPTNSNSV PTR(31),            /* SAVE TERMINAL NEXT SCHED NODE
*                                     POINTER                        */
*   2  RPTRSV02 PTR(31),           /* RESERVED                       */
*   2  RPTRSV03 PTR(31);           /* RESERVED                       */
*                                                               01S0601
*                                                               01S0601
*DCL                                                            01S0602
*1  ISTRCL BDY(WORD) BASED,      /* CLUSTER ENTRY                    */
*   2  RCLPRE CHAR(LENGTH(ISTRPRE)),    /* USE COMMON PREFIX         */
*   2  RCLADR PTR(31),                                          01S0602
*      3  RCLFLAG BIT(8),                                       01S0602
*         4  RCLRSV22 BIT(1),    /* RESERVED                         */
*         4  RCLRBISA BIT(1),    /* INITIAL STATUS 1=ACTIVE          */
*         4  RCLBATCH BIT(1),    /* BATCHED MESSAGE INPUT       01S0602
*                                   FEATURE                          */
*         4  RCLRSV33 BIT(5),    /* RESERVED                         */
*      3  RCLGPADR PTR(24),      /* ADDRESSING INFORMATION POINTER
*                                                  (ADDR RCLCNGP)    */
*   2  RCLCTETR FIXED(15),       /* CNT TERMINAL ENTRIES FOR CLUSTER */
*   2  RCLCTECM FIXED(15),       /* CNT COMPONENT ENTRIES FOR CLUSTER*/
*   2  RCLRSV01 FIXED(15),       /* FILLER TO FORCE ALIGNMENT        */
*   2  RCLCTNGP FIXED(15),       /* GPOLL CHARACTER COUNT            */
*   2  RCLGPOLA PTR(31),         /* GPOLL CHARACTER STRING POINTER   */
*   2  RCLRVPT1 PTR(31),         /* RESERVED                         */
*   2  RCLRVPT2 PTR(31);         /* RESERVED                         */
*                                                               01S0602
*                                                               01S0602
*DCL                                                            01S0603
*1  ISTRTR BDY(WORD) BASED,      /* TERMINAL AND/OR COMPONENT ENTRY  */
*   2  RTRCRPR CHAR(LENGTH(ISTRCPRE)),     /* USE ISTRCPRE DSECT     */
*   2  RTRADR PTR(31),                                          01S0603
*      3  RTRFLAG BIT(8),                                       01S0603
*         4  RTRRSV21 BIT (1),   /* RESERVED */                 01S0603
*         4  RTRRBISA BIT(1),    /* INITIAL STATUS 1 = ACITVE        */
*         4  RTRRSV51 BIT(3),    /* RESERVED                         */
*         4  RTRVTERM BIT(1),    /* VTERM TERMINAL ENTRY             */
*         4 RTRRSV22 BIT(2),     /* UNUSED                           */
*      3  RTRADRPT PTR(24),      /* TO BE USED FOR POINTER TO   01S0603
*                                            ADDRESSING INFORMATION  */
*   2  RTRCTECM FIXED(15),       /* COUNT OF COMPONENT          01S0603
*                                               ENTRIES FOR TERMINAL */
*   2  RTRRSV01 FIXED(15),       /*  FILLER TO FORCE ALINEMENT       */
*   2  RTRRSV45 CHAR(4),         /* RESERVED                         */
*   2  RTRRDFA  BIT(8),          /* FLAG FIELD A                     */
*      3  RTRRAATN BIT(1),       /* TERMINAL CAN INTERRUPT PCCU      */
*      3  RTRRAALL BIT(3),       /* 3 FLAG FIELD                     */
*         4  RTRRAPT1 BIT(1),    /* PT1 BLOCK HANDLER FLAGS          */
*         4  RTRRAPT2 BIT(1),    /* PT2                              */
*         4  RTRRAPT3 BIT(1),    /* PT3                              */
*      3  RTRRACDT BIT(1),       /* CRITICAL DATA FLAG               */
*      3  RTRRSV60 BIT(1),       /* RESERVED                         */
*      3  RTRRACTR BIT(1),       /* LOGICAL DEVICE FLAG              */
*      3  RTRRSV02 BIT(1),       /* UNUSED                           */
*   2  RTRRDFB  BIT(8),          /* FLAG FIELD B - RESOURCE DEF      */
*      3  RTRRBECT BIT(1),       /* EMBEDDED LINE CONTROL            */
*      3  RTRRBEND BIT(1),       /* EOT/EOB                          */
*      3  RTRRSV32 BIT(6),       /* RESERVED                         */
*   2  RTRRDFC  BIT(8),          /* FLAG FIELD C - RESOURCE DEF      */
*      3  RTRRCIT1 BIT(1),       /* EIB CHAR AFTER ITB ON RECV       */
*      3  RTRRCIT2 BIT(1),       /* EIB CHAR AFTER ITB ON SEND       */
*      3  RTRRCPT3 BIT(1),       /* DEVICE HAS PT3 BHSET             */
*      3  RTRRCBLK BIT(1),       /* RECORD DATA - BLOCK              */
*      3  RTRRCMSG BIT(1),       /* RECORD DATA - MESSAGE            */
*      3  RTRRCXMS BIT(1),       /* RECORD DATA - XMISSION           */
*      3  RTRRSV23 BIT(2),       /* RESERVED/UNUSED                  */
*   2  RTRRDFD  BIT(8),          /* FLAG FIELD D - RESERVED          */
*      3  RTRRDBHN  BIT(1),      /* BHSET = NONE                     */
*      3  RTRRDBHD  BIT(1),      /* BHSET = DYNAMIC                  */
*      3  RTRRDBHI  BIT(1),      /* BHSET = SETNAME AND EXECUTR      */
*      3  RTRRSV10 BIT(2),       /* RESERVED                         */
*      3  RTRRSV11 BIT(3),       /* RESERVED                         */
*   2  RTRRDFE  BIT(8),          /* FLAG FIELD E - RESOURCE DEF      */
*/*                RTRREFT1  FEATURE FLAGS  (9 BITS)                 */
*      3  RTRREBRK BIT(1),       /* TRANSMIT INTERRUPT               */
*      3  RTRRSV0A BIT(1),       /* RESERVED                         */
*      3  RTRREACR BIT(1),       /* ACCELERATED CARRIAGE RETURN      */
*      3  RTRRECHK BIT(1),       /* CHECKING FEATURE                 */
*      3  RTRREATT BIT(1),       /*  TERMINAL INTERRUPT              */
*      3  RTRRESUP BIT(1),       /*  TIMEOUT SUPPRESSION             */
*      3  RTRRESCT BIT(1),       /*  STATION CONTROL                 */
*   2  RTRRDFF  BIT(8),          /* FLAG FIELD F - RESOURCE DEF      */
*      3  RTRRFXCT BIT(1),       /* TRANSMIT CONTROL                 */
*/*                      RTRRFFT2 FEATURE 2 FLAGS (NEXT 5 BITS)      */
*      3  RTRRFPEN BIT(1),       /* SELECTOR PEN                     */
*      3  RTRRFPFK BIT(1),       /* PROGRAM FUNCTION DEYBOARD        */
*      3  RTRRFANK BIT(1),       /* STANDARD ALPHA-NUMERIC KEYBOARD  */
*      3  RTRRFDEK BIT(1),       /* DATA ENTRY KEYBOARD              */
*      3  RTRRSV24 BIT(3),       /* UNUSED/RESERVED                  */
*   2  RTRTRMAX CHAR(1),         /* MAX # TRANSMISSIONS TERM TO PCCU */
*   2  RTRCRFLG PTR(8),          /* FLAG-CONFIGURATION RESTART       */
*      3 RTRCRSV1 BIT(2),        /* RESERVED FOR CONFIG RESTART      */
*      3 RTRLSCMD BIT(1),        /* LINE SCHEDULING CMD ISSUED OK    */
*        4 RTRDTRLM BIT(1),      /* CHNG DEV TRANSMISSION LIMIT OK   */
*      3 RTRCRSV2 BIT(5),        /* RESERVED FOR CONFIG. RESTART     */
*   2  RTRBHSN1 CHAR(8),         /* DEFAULT BHSET NAME IS BHF IS ON  */
*   2  RTRRVPT1 PTR(31),         /* RESERVED                         */
*   2  RTRRSV03 FIXED(15),       /* FILLER TO FORCE ALIGNMENT        */
*   2  RTRCTDIA FIXED(15),       /* CNT OF CHARS. IN TERM DIAL NUMBER*/
*   2  RTRCTPOL FIXED(15),       /* # CHARS. IN TERM POLL STRING     */
*   2  RTRCTADR FIXED(15),       /* COUNT OF ADDRESSING CHARACTERS   */
*   2  RTRCADDR  CHAR(8),        /* COMPONENT ADDRESSING CHARS       */
*   2  RTRPOLA PTR(31),          /* POINTER TO POLLING CHARACTERS    */
*   2  RTRDIAA PTR(31),          /* POINTING TO DIAL CHARACTERS      */
*   2  RTRRDFG  BIT(8),          /* CORRESPONDENCE CODE USED BY THIS
*                                   TERM LINE. SEE CONSTANTS.        */
*   2  RTRRSVDD CHAR(7),         /* RESERVED                         */
*   2  RTRBSCID CHAR(21),        /* BSC ID FIELD                     */
*      3  RTRIDLEN FIXED(8),     /* LENGTH OF ID                     */
*      3  RTRIDCAS CHAR(20),     /* ID CHARACTER                     */
*   2  RTRLCTI BIT(8),           /* LINE CONTROL TYPE ID             */
*   2  RTRRSV04 CHAR(2);         /* RESERVED                         */
*                                                               01S0603
* DCL RTRDNCBA PTR(31) DEF(ISTRTR) POS(41);  /* SCAFFOLDING          */
*/* CONSTANTS FOR FIELD RTRRDFG                                      */
*DCL RTRRCBCD BIT(8) CONSTANT('03'X); /* BCD                         */
*DCL RTRRCEBC BIT(8) CONSTANT('04'X); /* EBCD                        */
*DCL RTRRCCOR BIT(8) CONSTANT('05'X); /* COR                         */
*                                                               01S0607
*/*     CONSTANTS FOR FIELD RTRLCTI                                  */
*DCL RTR2741  BIT(8) CONSTANT('00'X);  /* 2741                       */
*DCL RTR2740A BIT(8) CONSTANT('02'X);  /* 2740-1 A (BASIC)           */
*DCL RTR2740D BIT(8) CONSTANT('06'X);  /* 2740-1 D (TRANS CONTROL)   */
*DCL RTR2740E BIT(8) CONSTANT('0A'X);  /* 2740-1 E (TRANS       01S0611
*                                   CONTROL WITH CHECKING            */
*DCL RTR2740F BIT(8) CONSTANT('0C'X);  /* 2740-1 F (CHECKING)        */
*DCL RTR1050  BIT(8) CONSTANT('1C'X);  /* 1050                       */
*DCL RTRTWX   BIT(8) CONSTANT('22'X);  /* TWX                        */
*/*                                                                  */
*/*   ENTRY IN LOCAL RN FOR REMOTE SEGMENT                           */
*/*                                                                  */
*DCL  1  ISTRIN   BDY(WORD) BASED,   /* INNODE REMOTE ENT IN LOCAL RN*/
*        2 RINCRPRE CHAR(LENGTH(ISTRCPRE)),  /* PREFIX               */
*        2 RINDFD   BIT(8),          /* FLAG FIELD                   */
*          3 RINREMPO BIT(1),        /* REMOTE POWER OFF             */
*            4 RTRREMPO BIT(1),      /* ALIAS                        */
*          3 RINNODEF BIT(1),        /* REMOTE TERM ENTRY INV AS ENT */
*            4 RTRNODEF BIT(1),      /* ALIAS                        */
*          3 RINLDISC BIT(1),        /* DISCONNECT REMOTE REQUIRED   */
*            4 RTRLDISC BIT(1),      /* ALIAS                        */
*          3 RINRSV01 BIT(5),        /* RESERVED                     */
*        2 RINNODID PTR(8),          /* NODE ID OF REMOTE            */
*          3 RTRNODID PTR(8),        /* ALIAS                        */
*        2 RINRLDAF CHAR(2),         /* DAF OF REMOTE WHEN ACTIVE    */
*          3 RTRRLDAF CHAR(2),       /* ALIAS                        */
*        2 RINREMOT PTR(31),         /* PTR TO RN ENTRY FOR REMOTE   */
*          3 RTRREMOT PTR(31),       /* ALIAS                        */
*        2 RINVPAB  PTR(31),         /* ADDR VARY PAB FOR REMOTE     */
*          3 RTRVPAB  PTR(31),       /* ALIAS                        */
*        2 RINRPHCN PTR(31),         /* ADDR RPH WAITING FOR CONTACT */
*          3 RTRRPHCN PTR(31),       /* ALIAS                        */
*        2 RINNCSPL PTR(31),         /* ADDR FOR NCSPL FOR DEACTIVATE*/
*          3 RTRNCSPL PTR(31),       /* ALIAS                        */
*        2 RINCNCNT PTR(8),          /* CONTACT COUNT FOR REMOTE     */
*          3 RTRCNCNT PTR(8),        /* ALIAS                        */
*        2 RINRSV02 CHAR(3),         /* RESERVED                     */
*        2 RINLOCRN PTR(31),         /* PTR TO RN ENTRY OF LOCAL     */
*        2 RINRSV04 CHAR(4),         /* RESERVED                     */
*        2 RINRSV05 CHAR(4);         /* RESERVED                     */
*/*                                                                  */
*DCL                                                            01S0616
*1   ISTRDS BDY(WORD) BASED,       /* LCDO ENTRY                     */
*           2  RDSPRE CHAR(LENGTH(ISTRPRE)), /* ENTRY PREFIX         */
*           2  RDSCTTRM FIXED(15), /* COUNT OF ENTRY POINTERS   01S0616
*                                     IN DIAL OUT TABLE              */
*           2  RDSCTATR FIXED(15), /*                                */
*           2  RDSADDOT PTR(31);   /* ADDRESS OF DIAL OUT TABLE      */
*/*                                                                  */
*DCL                                                            01S0617
*1   ISTDOT BDY(WORD) BASED,       /* DIAL OUT TABLE                 */
*           2  DOTADTRM PTR(31);   /* PTR TO DIAL OUT OR DIAL IN/
*                                     OUT TERMINAL RDTE              */
*/*                                                                  */
*DCL                                                            01S0618
*1 ISTRCC BDY(WORD) BASED,             /* PU ENTRY                   */
*  2 RCCPRE   CHAR(LENGTH(ISTRPRE)),   /* COMMON PREFIX              */
*  2 RCCTYPE  CHAR(1),                 /* PU TYPE                    */
*  2 RCCFLAG  BIT(8),                  /* FLAG FIELD                 */
*    3 RCCRBISA BIT(1),                /* I STATUS 1=ACTIVE          */
*    3 RCCCUDIE BIT(1),                /* CLUSTER DEACTIVATING       */
*    3 RCCERPIP BIT(1),                /* ERP IN PROCESS             */
*    3 RCCLDISC BIT(1),                /* DISCONNECT REQUEST         */
*    3 RCCOHIMM BIT(1),                /* RTGOH RECEIVED AND WAS     */
*                                      /* AN IMMEDIATE TYPE          */
*    3 RCCOUERP BIT(1),                /* REPEAT ERP                 */
*    3 RCCPRGDN BIT(1),                /* PURGE ISSUED               */
*    3 RCCCTPGD BIT(1),                /* CONTACT PURGED             */
*  2 RCCFLAGB BIT(8),                  /* FLAG FIELD                 */
*    3 RCCDSTCT BIT(1),                /* DEACT TO DECR STCNT IN HDR */
*    3 RCCDIALP BIT(1),                /* DIAL IN PROGRESS           */
*    3 RCCIRETR BIT(1),                /* IRETRY 1 = YES             */
*    3 RCCBNNSP BIT(1),                /* BNNSUP FOR 3270            */
*    3 RCCFINAL BIT(1),                /* ON = DEACT PU FINAL REQD   */
*    3 RCCRESET BIT(1),                /* ON = RESET DEACT IN PROCESS*/
*    3 RCCBRKCN BIT(1),                /* ON-DISCOUNT=YES SPECIFIED  */
*                                      /* OFF-DISCOUNT=NO SPECIFIED  */
*    3 RCCRTGOH BIT(1),                /* ON=RTGOH RECEIVED          */
*  2 RCCCNCNT  PTR(8),                 /* CONTACT COUNT              */
*  2 RCCCTELU FIXED(15),               /* COUNT OF PU LU ENTRIES     */
*  2 RCCSTAID CHAR(8),                 /* 64 BIT PU STATION ID       */
*    3 RCCIDPA1 BIT(16),               /* FILLER OF 2 BYTES OF 0     */
*    3 RCCID48,                                                 01S0618
*      4 RCCIDPUT BIT(8),              /* PU TYPE                    */
*      4 RCCIDPA2 BIT(8),              /* FILLER OF 1 BYTE OF 0      */
*      4 RCCIDBLK BIT(12),             /* IDBLK VALUE                */
*      4 RCCIDNUM BIT(20),             /* IDNUM VALUE                */
*  2 RCCSESCT PTR(8),                  /* SESSION COUNT              */
*  2 *        CHAR(1),                 /* RESERVED                   */
*  2  RCCVPAB PTR(31),                 /* ADDRESS OF VARY PAB        */
*  2 RCCDPAB  PTR(31),                 /* ADDR RESTART PAB           */
*  2 RCCEPAB  PTR(31),                 /* ADDR OF ERP PAB            */
*  2 RCCRPHCN PTR(31),                 /* ADDR RPH WAIT FOR CONTACT  */
*  2 RCCNCSPL PTR(31),                 /* ADDR NCSPL FOR DEACTIVATE  */
*  2 RCCCRFLG BIT(8),                  /* FLAG-CONFIGURATION RESTART */
*    3 RCCACTPU BIT(1),                /* ACTIVATE PHYSICAL          */
*    3 RCCCTCFL BIT(1),          /* HIGHER FAILURE-CONTACT FLUSHED   */
*    3 RCCCRRSV BIT(6),                /* RES. FOR CONFIG. RESTART   */
*  2 RCCRSV02 PTR(24),                 /* RESERVED                   */
*  2 RCCTPAB  PTR(31),                 /* TOLTEP SSCP PAB            */
*  2 RCCDPQ   PTR(31),                 /* DIAL PENDING NCSPL QUE PTR */
*  2 RCCPATHT PTR(31),                 /* PTR TO PATH TABLE          */
*  2 RCCPATHZ FIXED(15),               /* # ENTRIES IN PATH TABLE    */
*  2 RCCINDEX FIXED(15),               /* INDEX TO PATH TABLE        */
*  2 RCCMXDAT FIXED(15),               /* MAXDATA SIZE               */
*  2 RCCMXOUT FIXED(8),                /* MAXOUT VALUE               */
*  2 RCCPASSL FIXED(8),                /* PASSLIM VALUE              */
*  2 RCCADDR  FIXED(8),                /* STATION ADDRESS            */
*  2 RCCRSPT2 PTR(24),                 /* RESERVED                   */
*  2 RCCSWTOX PTR(31),                 /* SWITCHED TO 370X           */
*                                      /* COMMUNICATIONS NCSPL       */
*  2 RCCXTOSW PTR(31),                 /* 370X TO SWITCHED           */
*                                      /* COMMUNICATIONS NCSPL       */
*  2 RCCRVPT2 PTR(31);                 /* RESERVED                   */
*/* RCCTYPE - PU TYPE CODES                                          */
*DCL RCCPU01  BIT(8) CONSTANT('01'X);  /* PU TYPE 1                  */
*DCL RCCPU02  BIT(8) CONSTANT('02'X);  /* PU TYPE 2                  */
*DCL RCCPU03  BIT(8) CONSTANT('03'X);  /* PU TYPE 3                  */
*DCL RCCPU04  BIT(8) CONSTANT('04'X);  /* PU TYPE 4                  */
*/*                                                                  */
*DCL                                                            01S0623
*1 ISTRLU BDY(WORD) BASED,             /* LU ENTRY                   */
*  2 RLUCRPR CHAR(LENGTH(ISTRCPRE)),   /* COMMON PREFIX              */
*  2 RLUTYPE  CHAR(1),                 /* LU TYPE                    */
*  2 RLUFLAG  CHAR(1),                 /* RLU FLAGS                  */
*    3 RLURBISA BIT(1),                /* I STATUS 1=ACTIVE          */
*    3 RLUBATCH BIT(1),                /* 1 IF BATCH = YES           */
*    3 RLUGSTAT BIT(1),                /* C/R GENNED ISTATUS VALUE   */
*                                      /* 1 = ACTIVE                 */
*    3 RLUNDSES BIT(1),                /* SPECIAL END SESSION        */
*    3 RLURSV00 BIT(4),                /* RESERVED                   */
*  2 RLUCRFLG BIT(8),                  /* FLAG-CONFIGURATION RESTART */
*    3 RLUACTLU BIT(1),                /* ACTIVATE LOGICAL UNIT OK   */
*    3 RLUCRRSV BIT(7),                /* RESERVED FOR CONFIG RESTART*/
*  2 RLUSSCFM BIT(8),                  /* FUNCTION MANAGER TYPE      */
*  2 RLUINTA PTR(31),                  /* RESERVED                   */
*  2 RLUPACE CHAR(2),                  /* VPACING COUNTS             */
*    3 RLUPACEN CHAR(1),               /* N COUNT                    */
*    3 RLUPACEM CHAR(1),               /* M COUNT                    */
*  2 RLUNCPPC CHAR(2),                 /* NCP PACING COUNTS          */
*    3 RLUNCPPN CHAR(1),               /* N COUNT                    */
*    3 RLUNCPPM CHAR(1),               /* M COUNT                    */
*  2 RLULOCAD CHAR(1),                 /* LOCAL ADDRESS OF LU        */
*  2 RLURSV01 CHAR(3),                 /* RESERVED                   */
*  2 RLUUSSTB CHAR(12) BDY(WORD),      /* USSTAB                     */
*    3 RLUUSSNM CHAR(8),               /* USSTAB NAME                */
*    3 RLUUSSPT PTR(31),               /* USSTAB ADDRESS             */
*  2 RLUMODET CHAR(12) BDY(WORD),      /* MODETAB                    */
*    3 RLUMODEN CHAR(8),               /* MODETAB NAME               */
*    3 RLUMODEP PTR(31),               /* MODETAB ADDRESS            */
*  2 RLULGMOD CHAR(8),                 /* LOGMODE                    */
*  2 RLURSV02 PTR(31);                 /* RESERVED                   */
*/*  RLUSSCFM - FOLLOWING EQUATES ARE FOR THE VARIOUS                */
*/*             FUNCTION MANAGER TYPES                               */
*DCL RLUFSS   BIT(8) CONSTANT('01'X);  /* FORMATTED SYS SERVICES     */
*DCL RLUUSS   BIT(8) CONSTANT('02'X);  /* UNFORMATTED SYS SERVICES   */
*DCL RLUU3270 BIT(8) CONSTANT('04'X);  /* UNFORMATTED SYS SVCS 3270  */
*/*  RLUTYPE - EQUATES FOR LU TYPE                                   */
*DCL RLUTYP04 BIT(8) CONSTANT('04'X);  /* LU TYPE IS 4               */
*/*                                                                  */
*DCL 1 ISTRPX BDY(WORD) BASED,     /* SKELETON PUX ENTRY             */
*      2 RPXPRE CHAR(LENGTH(ISTRPRE)),  /* COMMON PREFIX             */
*      2 RPXFLUX  PTR(31),         /* PTR TO FIRST LUX IN CHAIN      */
*      2 RPXMAXLU PTR(8),          /* MAX NUMBER OF LU'S             */
*                                  /* FOR THIS LINK                  */
*      2 RPXRSV02 PTR(24),         /* RESERVED                       */
*      2 RPXRSV01 PTR(31);         /* RESERVED                       */
*/*                                                                  */
*DCL 1 ISTRLX BDY(WORD) BASED,     /* SKELETON LUX ENTRY             */
*      2 RLXPRE CHAR(LENGTH(ISTRPRE)),  /* COMMON PREFIX             */
*      2 RLXNLUX  PTR(31),         /* PTR TO NEXT LUX IN CHAIN       */
*      2 RLXFLAGA CHAR(1),         /* FLAG BYTE                      */
*        3 RLXINUSE BIT(1),        /* ON = LUX IS IN USE             */
*        3 RLXRSV01 BIT(7),        /* RESERVED                       */
*      2 RLXRSV02 CHAR(3),         /* RESERVED                       */
*      2 RLXRSV03 PTR(31);         /* RESERVED                       */
*/*                                                                  */
*DCL 1 ISTRSW BDY(WORD) BASED,     /* SWITCHED SUBAREA HDR ENTRY     */
*      2 RSWPRE CHAR(LENGTH(ISTRDT)),   /* USE ISTRDT DSECT          */
*      2 RSWDIALT PTR(31),         /* PTR TO DIAL #'S TABLE          */
*      2 RSWGRUPT PTR(31),         /* PTR TO GROUP NAMES TABLE       */
*      2 RSWDIALZ FIXED(15),       /* # ENTRIES IN DIAL NO. TABLE    */
*      2 RSWGRUPZ FIXED(15),       /* # ENTRIES IN GRP NAME TABLE    */
*      2 RSWCTELU FIXED(15),       /* COUNT OF LU ENTRIES IN THIS SEG*/
*      2 RSWRSV02 CHAR(2),         /* RESERVED                       */
*      2 RSWRSV01 PTR(31);         /* RESERVED                       */
*/*                                                                  */
*DCL 1 ISTRDA BDY(WORD) BASED,     /* DAN ENTRY                      */
*      2 RDAPRE CHAR(LENGTH(ISTRPRE)),  /* COMMON PREFIX             */
*      2 RDAADR   PTR(31),                                      01S0631
*        3 RDAFLAG  BIT(8),        /* FLAG BYTE                      */
*          4 RDARBISA BIT(1),      /* INITIAL STATUS, 1 = ACTIVE     */
*          4 RDARSV01 BIT(7),      /* RESERVED                       */
*        3 RDAUCBAD PTR(24),       /* UCB.PUB ADDRESS                */
*          4 RDACHQI  BIT(8),      /* CHANNEL QUEUE INDEX            */
*          4 RDALUBA  BIT(16),     /* @ OF LOGICAL UNIT BLOCK        */
*      2 RDADACUA CHAR(3),         /* CHANNEL UNIT ADDRESS           */
*      2 RDACTPCC PTR(8),          /* CNT OF BUFFERS RECEIVING DATA  */
*      2 RDADFCUA CHAR(3),         /* DEFAULT CUA                    */
*      2 RDAPUBI  BIT(8),          /* PUB INDEX                      */
*      2 RDARSVPT PTR(31);         /* RESERVED                       */
*/*                                                                  */
*DCL 1 ISTRLS BDY(WORD) BASED,     /* LOCAL SUBAREA HEADER ENTRY     */
*      2 RLSPRE CHAR(LENGTH(ISTRDT)),   /* USE ISTRDT DSECT          */
*      2 RLSCTELU FIXED(15),       /* COUNT OF LU ENTRIES IN THIS SEG*/
*      2 RLSRSV01 FIXED(15),       /* RESERVED                       */
*      2 RLSRSV02 PTR(31);         /* RESERVED                       */
*/*                                                                  */
*DCL  1  ISTDNT BDY(WORD) BASED,  /* DIAL NUMBER TABLE               */
*        2 DNTCTDIG FIXED(8),     /* NUMBER OF DIGITS IN TEL. NUM.   */
*        2 DNTTELNO CHAR(32);     /* TELEPHONE NUMBER                */
*/*                                                                  */
* DCL  1  ISTGNT BDY(WORD) BASED, /* GROUP NAMES TABLE               */
*         2 GNTGRPNM CHAR(8);     /* GROUP NAME ENTRY                */
*/*                                                                  */
*DCL  1  ISTPAT BDY(WORD) BASED,  /* PATH TABLE                      */
*        2 PATGINDX FIXED(15),    /* INDEX TO GROUP NAME TABLE       */
*        2 PATDINDX FIXED(15),    /* INDEX TO DIAL NUMBER TABLE      */
*        2 PATPTHID PTR(8),       /* PATH ID                         */
*        2 PATGRPID PTR(8),       /* GROUP PATH ID                   */
*        2 PATRDCNT PTR(8),       /* REDIAL COUNT                    */
*        2 PATFLAGA BIT(8),       /* FLAG BYTE                       */
*          3 PATUSEFG BIT(1),     /* ON = PATH INITIALLY USABLE      */
*          3 PATRSV01 BIT(7);     /* RESERVED                        */
*/*  REVISIONS                                         002 02/05/75  */
*DCL 1 ISTGTNCS BASED,              /* INPUT PARAM LIST FOR GET/FREE */
*                                   /* NCSPL                         */
*      2 GTNCSAD  PTR(31),          /* 0=GET NCSPL,NCSPL=FREE NCSPL  */
*      2 GTNCSFLG CHAR(4),          /* FLAGS                         */
*        3 GTNCSREQ BIT(1),         /* 0=REQSTOR NOT ALLOWED,        */
*                                   /* 1=REQSTOR PERMITTED           */
*        3 GTNCSRQU BIT(1),         /* IF REQSTOR DONE, 1=Q OPT,     */
*                                   /* 0= NO Q OPT                   */
*        3 GTNCSWKA BIT(1),         /* 1=NO WORK AREA TO BE OPT      */
*        3 GTNCSAPP BIT(1),         /* ALLOCATE NCSPL APPENDAGE      */
*        3 *        BIT(28);        /* RESERVED                      */
*/* LOGICAL CHANNEL COMMAND WORD                                      *
*/* ADD A DECLARE                                      003 10/18/74   *
*DCL  1  ISTLCCW BDY(WORD) BASED,                               01S0637
*        2  LCCWOP    CHAR(1),         /* OPERATION CODE -CONTROL     *
*           3  LCCWSI BIT(1),          /* SESS INIT / START DIALOG FLG*
*           3  LCCWSD BIT(1),          /* SESS DISCON/END DIALOG FLG  *
*           3  LCCWRWOP BIT(6),        /* READ/WRITE OPERATION CODE   *
*              4  * BIT(1),            /* RESERVED                    *
*              4  LCCWSOP BIT(1),      /* SPECIAL OPERATION LIKE
*                                         ERASE OR READ CONT          *
*              4  LCCWCTL BIT(4),      /* CONTROL TYPE                *
*                 5  LCCWMODE BIT(2),  /* MODE TYPE                   *
*                 5  LCCWTYPE BIT(2),  /* OPERATION TYPE              *
*        2  LCCWFLAG  CHAR(1),         /* FLAG BYTE                   *
*           3  LCCWCD BIT(1),          /* CHAIN DATA                  *
*           3  LCCWCC BIT(1),          /* CHAIN COMMAND               *
*           3  LCCWCKPT BIT(1),        /* SUPPRESS 3705 CHECK POINT
*                                         RECORD                      *
*           3  LCCWNTVC BIT(1),        /* DO NOT PERFORM VALCHEK      *
*           3  LCCWIDAT BIT(1),        /* LCCWDATA CONTAINS DATA      *
*           3  LCCWLSI BIT(1),         /* LCCW SYNCH INDICATOR        *
*              4  LCCWPER BIT(1),      /* POST=RESP                   *
*           3  LCCWRFI BIT(1),         /* REQUEST FEEDBACK INDICATOR  *
*           3  LCCWACI BIT(1),         /* ADDITION COMMAND INDICATOR  *
*        2  LCCWCNT FIXED(16),         /* DATA COUNT                  *
*        2  LCCWDATA PTR(31);          /* DATA ADDRESS OR IMMED. DATA *
*/* LOGICAL COMMAND CODES */                                    01S0638
*DCL  LXDQ     BIT(8) CONSTANT('3B'X), /* RESET DEVICE QUEUE          *
*     LXEC     BIT(8) CONSTANT('4B'X), /* RESET AT END OF COMMAND     *
*     LXO      BIT(8) CONSTANT('5B'X), /* RESET ORDERLY               *
*     LCCWPRGE BIT(8) CONSTANT('6B'X), /* PURGE                       *
*     LWH      BIT(8) CONSTANT('0F'X), /* WRITE HEADER INDI. 1ST BLOCK*
*     LWRVI    BIT(8) CONSTANT('1F'X), /* WRITE RVI                   *
*     LWNA     BIT(8) CONSTANT('2F'X), /* WRITE NEGATIVE ACK          *
*     LWAA     BIT(8) CONSTANT('3F'X), /* WRITE ALTERNATE ACK         *
*     LWPLG    BIT(8) CONSTANT('5F'X), /* WRITE ACK LEADING GRAPHICS  *
*     LWNLG    BIT(8) CONSTANT('6F'X), /* WRITE NACK LEADING GRAPHICS *
*     LSMDE    BIT(8) CONSTANT('4F'X), /* SET MODE                    *
*     LIFBM    BIT(8) CONSTANT('7F'X), /* INDIC 1ST BLOCK OF MESSAGE  *
*     LTEST    BIT(8) CONSTANT('FE'X), /* TEST LCCW                   *
*     LPRMPT   BIT(8) CONSTANT('13'X), /* PREEMPT LCCW                *
*     LRSTR    BIT(8) CONSTANT('43'X), /* RESTORE LCCW                *
*     LEXEC    BIT(8) CONSTANT('FF'X), /* SPECIAL CONTROL OPERATION   *
*     LREAD    BIT(2) CONSTANT('10'B),  /* READ TYPE LCCW             *
*     LWRITE   BIT(2) CONSTANT('01'B),  /* WRITE TYPE LCCW            *
*     LCNTRL   BIT(2) CONSTANT('11'B),  /* CONTROL TYPE LCCW          *
*     LRESET   BIT(4) CONSTANT('1011'B),/* RESET COMMANDS             *
*     LTIC     BIT(8) CONSTANT('08'X),  /* LOGICAL TIC                *
*     LWR      BIT(6) CONSTANT('000001'B),  /* WRITE CONVERSATIONAL   *
*     LWB      BIT(6) CONSTANT('000101'B),  /* WRITE BLOCK            *
*     LWM      BIT(6) CONSTANT('001001'B),  /* WRITE MESSAGE          *
*     LWT      BIT(6) CONSTANT('001101'B),  /* WRITE TRANSMISSION     *
*     LEWM     BIT(6) CONSTANT('011001'B),  /* ERASE/WRITE MESSAGE    *
*     LEWT     BIT(6) CONSTANT('011101'B),  /* ERASE/WRITE TRNSMSSN   *
*     LEAU     BIT(6) CONSTANT('010001'B),  /* ERASE ALL UNPROTECTED  *
*     LRB      BIT(6) CONSTANT('000110'B),  /* READ BLOCK             *
*     LRM      BIT(6) CONSTANT('001010'B),  /* READ MESSAGE           *
*     LRT      BIT(6) CONSTANT('001110'B),  /* READ TRANSMISSION      *
*     LRMOD    BIT(6) CONSTANT('010010'B),  /* READ MODIFIED          *
*     LRBUF    BIT(6) CONSTANT('010110'B),  /* READ BUFFER            *
*     LRCONT   BIT(6) CONSTANT('011010'B),  /* READ CONTINUOUS        *
*     LRPEP    BIT(6) CONSTANT('011110'B),  /* READ PERPETUAL         *
*     LCPYM    BIT(6) CONSTANT('101001'B),  /* COPY MESSAGE           *
*     LCPYT    BIT(6) CONSTANT('101101'B),  /* COPY TRANSMISSION      *
*     LD       BIT(8) CONSTANT('23'X),  /* DISCONNECT                 *
*     LDEC     BIT(8) CONSTANT('33'X),  /* DISCONNECT WITH END OF CALL*
*     LEOC     BIT(8) CONSTANT('53'X),  /* END OF CALL COMMAND        *
*     LXEL     BIT(8) CONSTANT('0B'X),  /* RESET ERROR LOCK           *
*     LXC      BIT(8) CONSTANT('1B'X),  /* RESET CONDITIONAL          *
*     LXI      BIT(8) CONSTANT('2B'X),  /* RESET IMMEDIATE            *
*     LC       BIT(8) CONSTANT('03'X),  /* CONTACT                    *
*     LWPA     BIT(8) CONSTANT('FD'X); /* WRITE POSITIVE ACK          *
*DCL  LMT      BIT(2) CONSTANT('11'B), /* TRANSMISSION MODE           *
*     LMS      BIT(2) CONSTANT('00'B), /* SPECIAL MODE LIKE CONV, EAU *
*     LMB      BIT(2) CONSTANT('01'B), /* BLOCK MODE                  *
*     LMM      BIT(2) CONSTANT('10'B); /* MSG OR CONTINUOUS MODE      *
*/* FOLLOWING EQUATES FOR  - PORT SOLICITOR (DIAL)                    *
*/* PORT SOLICITOR COMMAND CODES                                      *
*DCL PSOL    BIT(8) CONSTANT('FE'X), /* SPECIAL PORT SOLICITOR  01S0640
*                                       COMMAND                       *
*    STCTL    BIT(8) CONSTANT('01'X), /* START CONTROL                *
*    RESTCTL  BIT(8) CONSTANT('02'X), /* RESET & CONTROL - REDRIVE    *
*    STIPUT   BIT(8) CONSTANT('03'X); /* START INPUT                  *
*/*   FOLLOWING EQUATES FOR SDLC SUPPORT                              *
*DCL  LCCHOLD  BIT(8) CONSTANT('01'X),  /* HOLD                       *
*     LCCRHOLD BIT(8) CONSTANT('02'X),  /* RELEASE HOLD               *
*     LSEND    BIT(8) CONSTANT ('F1'X), /* SEND                       *
*     LCLEAR   BIT(8) CONSTANT ('F2'X), /* CLEAR                      *
*     LCRUD    BIT(8) CONSTANT ('F3'X), /* CLEAR, UNBIND              *
*     LCRUDNFY BIT(8) CONSTANT ('F4'X), /* CLEAR, UNBIND, NOTIFY      *
*     LNFY     BIT(8) CONSTANT ('F5'X), /* NOTIFY                     *
*     LRELCB   BIT(8) CONSTANT ('F6'X), /* RELEASE CB                 *
*     LRESTSR  BIT(8) CONSTANT ('F7'X), /* RESETSR                    *
*     LCLRNFY  BIT(8) CONSTANT('F8'X),  /* CLEAR/NOTIFY               *
*     LCHPUR   BIT(8) CONSTANT('F9'X);  /* PURGE                      *
*DCL  LCCWSIZE FIXED(8) CONSTANT(8);    /* LCCW SIZE                  *
*DCL  LRDS     BIT(8) CONSTANT('FF'X);  /* RECORD DEV STATS COMMAND   *
*DCL  LQUIS    BIT(8) CONSTANT('FE'X);  /* QUIESCE COMMAND            *
*/*              LOGICAL CHANNEL PROGRAM BLOCK                       */
*/*                                                                  */
*/*  REVISIONS                                         007 05/19/75  */
*/*                                                                  */
*DCL  1  ISTLCPB BDY(WORD) BASED(LCPBPTR),                      01S0645
*        2 LCPTYPE CHAR(1),            /* TYPE CODE                  */
*        2 LCPLNGTH  PTR(8),           /* LENGTH IN BYTES            */
*        2 LCPREQTG CHAR(2),           /* LCPB REQ. TAG FIELD        */
*          3 LCPFLAGS BIT(8),          /* FLAG BYTE                  */
*            4 LCPZRT00 BIT(1),        /* LOGICAL ERROR FLAG         */
*            4 LCPZRT01 BIT(1),        /* CONTROL BLOCK ERROR        */
*            4 LCPZF001 BIT(1),        /* LCP START PROCESS FLAG     */
*              5 LCPZRT02 BIT(1),      /* I/O INITIATION DISABLED    */
*                6 LCPZRTL2 BIT(1),    /* END OF SCHEDULABLE BLOCK   */
*            4 LCPZF002 BIT(1),        /* LCP IN PROCESSING FLAG     */
*              5 LCPZRT03 BIT(1),      /* GO LOOK AT FMCB LINE STATE */
*                                      /* FIELD (REQ. TAG OVERLAY)   */
*                6 LCPZRTL3 BIT(1),    /* WRITE/READ REQUEST         */
*            4 LCPZF003 BIT(1),        /* LCP PROCESSING COMPLETE FLAG*
*              5 LCPZRT04 BIT(1),      /* STPR SET IN BDU FLAG       */
*                                      /* (REQ. TAG OVERLAY)         */
*                6 LCPZRTL4 BIT(1),    /* FEEDBACK REQUESTED         */
*            4 LCPZF004 BIT(1),        /* SINGLE LCCW/LCP FLAG       */
*              5 LCPZRT05 BIT(1),      /* FEEDBACK TO BE ROUTED TO   */
*                                      /* ICNCB FMCB (REQ. TAG       */
*                                      /* OVERLAY)                   */
*                6 LCPZRTL5 BIT(1),    /* DECREMENT SCHED COUNT ON DEQ*
*            4 LCPZRT06 BIT(1),        /* CRITICAL TEXT BLOCK        */
*                                      /* FLAG (REQ. TAG OVERLAY)    */
*              5 LCPZRTL6 BIT(1),      /* WRITE REQUEST              */
*            4 LCPZRT07 BIT(1),        /* BUFFER TRACE ACTIVE        */
*                                      /* FLAG (REQ. TAG OVERLAY)    */
*              5 LCPZRTL7 BIT(1),      /* SCHEDULING FLAG            */
*          3 LCPMNRCD CHAR(1),         /* LCP MINOR REJECTION CODE   */
*            4 LCPZRT08 BIT(1),        /* I/O TRACE ACTIVE FLAG      */
*                                      /* (REQ. TAG OVERLAY)         */
*              5 LCPZRTL8 BIT(1),      /* DEVICE END NOTIFICATION    */
*            4 LCPZRT09 BIT(1),        /* DIALOGUE SCHED DISABLED    */
*              5 LCPZRTL9 BIT(1),      /* CRITICAL TEXT FLAG         */
*            4 LCPZRT0A BIT(1),        /* SIMULATED CONTACT FLAG     */
*            4 LCPZRT0B BIT(1),        /* SIMULATED DISCONNECT FLAG  */
*        2 LCPCHAIN PTR(31),           /* APS CHAIN                  */
*          3 LCPCHAI1 PTR(8),                                   01S0645
*            4 LCPCHNG BIT(1),         /* GATE BIT                   */
*          3 LCPCHAI2 PTR(24),         /* ADDRESS FIELD              */
*        2 LCPRUCNT PTR(8),            /* NUMBER OF RU FOR THIS LCPB */
*          3 LCPZMIRC CHAR(1),         /* MINOR RETURN CODE          */
*        2 LCPFLAG2 CHAR(1),           /* SECOND FLAG BYTE           */
*          3 LCPPRFLG BIT(1),          /* PACING REQUIRED            */
*          3 LCPASYN  BIT(1),          /* ASYNCHRONOUS LCPB          */
*          3 LCPRSTRT BIT(1),          /* RESTART LCPB               */
*          3 LCPTLBPI BIT(1),          /* TPIOS BLOCK LCCW           */
*            4 LCPZRIMM BIT(1),        /* RESET IMMED REQUIRED ON ERR*/
*          3 LCPFID0  BIT(1),          /* FID0 TH INDICATOR FOR RECORD*
*            4 LCPEXRES BIT(1),        /* EXCEP. RESPONSE SPEC. 3270R*/
*          3 LCPDSTAT BIT(1),          /* DIALOGUE STATE BIT, 3270R  */
*                                      /* 0=REQ. REJECT,1=STATE ERROR*/
*          3 LCPFREE  BIT(1),          /* DEALLOCATE LCPB 3270R      */
*          3 LCPATOP  BIT(1),          /* ATOP LCPB  3270R           */
*        2 LCPSEQ   FIXED(16),         /* OUTBOUND SEQUENCE NUMBER   */
*          3 LCPRRCCT PTR(8),          /* COUNT OF RESPONSES RECEIVED*/
*          3 LCPRRCNT PTR(8),          /* COUNT OF RESPONSES REQUESTED*
*        2 LCPLCCW1 PTR(31),           /* ADDR FIRST LCCW FOR FID1   */
*        2 LCPCID CHAR(4) BDY(WORD),   /* COMMUNICATION ID           */
*          3 LCPSAF BIT(16),           /* SOURCE IDENTIFICATION      */
*          3 LCPDAF BIT(16),           /* DESTINATION IDENTIFICATION */
*        2 LCPNXLCW PTR(31),           /* ADDR NEXT LCCW             */
*        2 LCPFDBA PTR(31),            /* BTU ADDRESS                */
*          3 LCPFDB1 PTR(8),                                    01S0645
*          3 LCPFDB2 PTR(24),          /* ADDRESS FIELD              */
*        2 LCPTLBAD PTR(31),           /* ADDRESS OF TLB             */
*        2 LCPFOSN  BIT(16),           /* SEQUENCE NUMBER FIRST RU   */
*        2 LCPFSNCH FIXED(16),         /* 1ST SEQ NUMBER IN RU CHAIN */
*        2 LCPSTYPE FIXED(8),          /* LCPB SUB-TYPE X'FF' = RESET,*
*                                      /* X'00' = NON-RESET          */
*        2 LCPFLG1 CHAR(1),            /* FLAGS                      */
*          3 LCPRESET BIT(1),          /* A TPQUE WITH RESET QUEUED  */
*                                      /* THIS ELEMENT               */
*          3 LCPINTER BIT(1),          /* INTERNAL LCPB              */
*          3 LCPDIRPT BIT(1),          /* NOT SEND W/POST=SCHED=0    */
*          3 LCPREDRV BIT(1),          /* LCPB IS FOR REDRIVE        */
*          3 LCPSTLB  BIT(1),          /* TLB NOT TO BE FREED        */
*          3 LCPTRANS BIT(1),          /* DATA INCLUDES CONTROL CHARS*/
*          3 LCPRSV78 BIT(2),          /* RESERVED                   */
*        2 LCPLCCWC BIT(8),            /* COUNT OF LCCWS             */
*        2 LCPRSV77 CHAR(1),           /* RESERVED                   */
*        2 LCPFLCCW PTR(31),           /* ADDR OF FIRST LCCW         */
*          3 LCPUBFSB PTR(31),         /* UNBIND FSB ADDRESS         */
*        2 LCPCLREP PTR(31),           /* PTR TO CLEAR LCPB IN UCB   */
*/*  NOTE:  THE FOLLOWING FIELD - LCPLCCW MUST BE THE LAST FIELD     */
*/*         IN THIS CONTROL BLOCK.  THE CONTROL BLOCK ISTDCLCP HAS   */
*/*         FIELDS IN IT WHICH MUST BE CONTIGUOUS WITH LCPLCCW       */
*        2 LCPLCCW  CHAR(LENGTH(ISTLCCW)) BDY(WORD), /* FIRST LCCW   */
*          3 LCPRSTQH PTR(31),         /* RESET LCPB QUEUE HEADER    */
*          3 LCPPABA  PTR(31),         /* PAB POINTER                */
*            4 LCPRPHA  PTR(31),       /* RPH POINTER                */
*              5 LCPFTYPE BIT(1);      /* FEEDBACK TYPE              */
*/*     CONSTANTS FOR LCPTYPE                                         *
*DCL  LCRPHFT  BIT(1) CONSTANT('1'B);                           01S0646
*DCL  LCPABFT  BIT(1) CONSTANT('0'B);                           01S0647
*DCL LCPBFIRM BIT(8) CONSTANT('10'X);  /* LU FAILED, CLSDST, SCHED LOST
*                                         TERM, OPNDST MAY BE TRIED   *
*DCL LCPBTERM BIT(8) CONSTANT('11'X);  /* TERM RECEIVED,CLSDST, 01S0649
*                                         SCHED LOST TERM             *
*/*                                                                   *
*                                                               01S0650
*DCL 1 LCPZTIE BDY(WORD) DEFINED(LCPCID), /* TOLTEP INTERFACE   01S0650
*                                         ELEMENT OVERLAY            */
*       2  LCPZFMCA PTR(31),           /* ACTIVE FMCB ADDRESS        */
*       2  LCPZSNA PTR(31),            /* SYMBOLIC NAME ADDRESS      */
*       2  LCPZSNAM CHAR(8) BDY(WORD), /* SYMBOLIC NAME              */
*          3  LCPZTRV1 PTR(31),        /* RESERVED FOR RESTORE LCP   */
*          3  LCPZTRV4 PTR(31);        /* RESERVED FOR RESTORE LCP   */
*DCL LCTYPE BIT(8) CONSTANT('04'X);                             01S0651
*DCL PLCPTYPE BIT(8) CONSTANT('28'X);  /* PURGE LCPB TYPE ID         */
*DCL LCPCLACB BIT(8) CONSTANT('04'X);  /* LCPB FROM CLOSE ACB        */
*DCL LSRSTYPE BIT(8) CONSTANT('FF'X);  /* RESET SUBTYPE              */
*DCL LCPETYPE BIT(8) CONSTANT('40'X);  /* EXTENDED LCPB TYPE ID      */
*/*                                                                  */
*/*  MINOR RETURN CODES                                              */
*/*                                                                  */
*DCL LCMCRSTR BIT(8) CONSTANT('F7'X),  /* MINOR RC FOR RESETSR       */
*    LCPMNEW  BIT(8) CONSTANT('02'X),  /* EARLY WARNING,             */
*                                      /* RECOVERY IN PROGRESS       */
*    LCPMNPF  BIT(8) CONSTANT('03'X),  /* PERM. I/O FAILURE          */
*    LCPMNAS  BIT(8) CONSTANT('04'X),  /* AUTO NETWORK SHUTDOWN      */
*    LCPMNCL  BIT(8) CONSTANT('06'X),  /* CLOSE/CLSDST OCCURED       */
*    LCPMNVD  BIT(8) CONSTANT('07'X),  /* VARY DEACTIVATE            */
*    LCPMNTF  BIT(8) CONSTANT('10'X),  /* TEMP RECORD DEVICE FAILURE */
*    LCPMNSF  BIT(8) CONSTANT('01'X),  /* TEMP BASIC FAILURE /       */
*    LCPMNTS  BIT(8) CONSTANT('11'X),  /* TERMINATE SELF             */
*    LCPMNAP  BIT(8) CONSTANT('0A'X),  /* APPL. ISSUED CLEAR         */
*    LCPMNPR  BIT(8) CONSTANT('0B'X),  /* PREEMPT                    */
*    LCPMNRE  BIT(8) CONSTANT('0C'X);  /* RESTORE                    */
*/* VS1, VS2 TPIOS SAVEAREA FORMAT */                           01S0657
*DCL  1  ISTZSAVE BDY(WORD) BASED,                              01S0657
*        2   ZSAZSVBC PTR(31),         /* SAVEAREA BACK CHAIN        */
*            3   ZSAZSVMS CHAR(1),     /* MODULE TRACE CODE          */
*                4 ZSAZACTV BIT(1),    /* ACTIVE SAVE AREA FLAG      */
*        2   ZSAZSVFC PTR(31),         /* SAVEAREA FORWARD CHAIN     */
*        2   ZSAZSVRR PTR(31),         /* RETURN REGISTER            */
*        2   ZSAZSVVR (6) PTR(31),    /* VARIABLE REGS (7-12) SVEAREA*/
*        2   ZSAZTRAC CHAR(4);        /* EBCDIC NAME OF OWNER        */
*/*                                                             01S0658
*THE FOLLOWING EQUATES SHOULD READ ''FIXED(8) CONSTANT(LENGTH(X))'',
*WHERE X IS THE NAME OF THE VARIABLE CONTROL BLOCK OR FIELD OF WHICH
*LENGTH IS THE VALUE BEING EQUATED, SHOULD THE PLS COMPILER BE  01S0658
*BE ABLE TO TAKE IT.                                            01S0658
*                                                                    */
*DCL ZSAZSVVA FIXED(8) CONSTANT(8);  /* DISPLACEMENT TO VARIABLE REGS*/
*DCL ZSAZSVSZ FIXED(8) CONSTANT(40); /* LENGTH OF ISTZSAVE           */
*/* PREFIX FOR CRR                                                   */
*/*                                                                  */
*/* RELEASE 1 - JUNE 28, 1973                                        */
*/*                                                                  */
*DCL 1 ISTPFCRR BASED BDY(WORD),        /* PREFIX FOR CRR            */
*     2  PFCCRR   CHAR(4),              /* CRR HEADER                */
*        3  PFCCRRID CHAR(1),           /* CRR ID FIELD              */
*           4  CRRID CHAR(1),           /* BASIC CTL LAYER DEFINITION*/
*        3  PFCRSV10 CHAR(1),           /* RESERVED FOR ALIGNMENT    */
*        3  PFCCRRLN CHAR(2),           /* CRR LENGTH                */
*           4  CRRLEN CHAR(2),          /* BASIC CTL LAYER DEF       */
*     2  PFCHDR CHAR(8) BDY(WORD),      /* SAVE AREA FOR OLD CRR FRR */
*        3  PFCCRRO  PTR(31),           /* PTR TO OLD CRR            */
*           4  CRRCHAIN PTR(31),        /* BASIC CTL LAYER DEFINITION
*                                          FOR OLD CRR PTR           */
*        3  PFCFRRO  PTR(31),           /* PTR TO OLD FRR            */
*           4  CRRFRR   PTR(31),        /* BASIC CTL LAYER      01S0660
*                                          DEFINITION OF OLD FRR PTR */
*     2  PFCFTA BIT(8),                 /* ID OF LAST FUNCTION TRACED*/
*     2  PFCRSV01 CHAR(3);              /* ALIGNMENT                 */
*DCL PFIDPIE BIT(8) CONSTANT('80'X);    /* DOS/VS TPIOS              */
*DCL PFIDORE BIT(8) CONSTANT('81'X);    /* DOS/VS BMS                */
*DCL PFIDAPE BIT(8) CONSTANT('82'X);    /* DOS/VS PSS                */
*DCL PFCIDPSV BIT(8) CONSTANT('38'X); /* COMPONENT ID           01S0664
*                                          PSS - VS1 AND 2           */
*DCL PFCIDTPV BIT(8) CONSTANT('3C'X); /* COMPONENT ID           01S0665
*                                          TPIOS VS1 AND 2           */
*DCL PFCIDSME BIT(8) CONSTANT('3D'X); /* COMPONENT ID           01S0666
*                                          STORAGE MANAGEMENT DOS    */
*DCL PFCIDOC BIT(8) CONSTANT('31'X);    /* COMPONENT ID OPEN/CLOSE   */
*DCL PFCIDPS BIT(8) CONSTANT('32'X);    /* PORT SOLICITOR            */
*DCL PFCIDCS BIT(8) CONSTANT('34'X);    /* CLUSTER SOLICITOR         */
*DCL PFCIDIT BIT(8) CONSTANT('35'X);    /* INIT/TERM                 */
*DCL PFCIDVY BIT(8) CONSTANT('36'X);    /* VARY                      */
*DCL PFCIDNS  BIT(8) CONSTANT('37'X);   /* NET. STAT.SRV.            */
*DCL PFCIDTPE BIT(8) CONSTANT('38'X);   /* COMPONENT ID         01S0673
*                                          TPIOS - DOS               */
*DCL PFCIDCL BIT(8) CONSTANT('39'X);    /* COMPONENT ID         01S0674
*                                          CONTROL LAYER             */
*DCL PFCIDPSE BIT(8) CONSTANT('3A'X);   /* COMPONENT ID         01S0675
*                                          PSS - DOS                 */
*DCL PFCIDSMV BIT(8) CONSTANT('3F'X);   /* COMPONENT ID         01S0676
*                                          STORAGE MANAGEMENT        */
*DCL PFCIDTIO BIT(8) CONSTANT('40'X);   /* COMPONENT ID TIIO    01S0677
*                                          PROCESSING (VS2)          */
*DCL PFCIDRS  BIT(8) CONSTANT('41'X);   /* ID FOR REMOTE SOLICITOR   */
*/* CRR FOR COMMAND FACILITIES                                      */
*/*  REVISIONS                                         001 06/02/75 */
*DCL  1  ISTCFCRR BDY(WORD) BASED, /* CRR FOR COMMAND FACILITIES    */
*        2 CFCAUDIT,               /* AUDIT TRAIL FOR CMD FACILITIES*/
*          3 CFCNTRD  CHAR(1),     /* LIST OF MODULES IN COMMAND    */
*                                  /* FACILITIES ENTERED            */
*            4 NCFCS1   BIT(1),    /* IND MODULE ISTCFCS1 ENTERED   */
*            4 NCFCS2   BIT(1),    /* IND MODULE ISTCFCS2 ENTERED   */
*            4 NCFCR1   BIT(1),    /* IND MODULE ISTCFCR1 ENTERED   */
*            4 NCFCRP   BIT(1),    /* IND MODULE ISTCFCRP ENTERED   */
*            4 NCFCR2   BIT(1),    /* IND MODULE ISTCFCR2 ENTERED   */
*            4 NCFRSVD  BIT(3),    /* RESERVED                      */
*          3 CFCCRT   CHAR(1),     /* LIST OF MODULES IN COMMAND    */
*                                  /* FACILITIES RUNNING            */
*            4 CCFCS1   BIT(1),    /* IND MODULE ISTCFCS1 RUNNING   */
*            4 CCFCS2   BIT(1),    /* IND MODULE ISTCFCS2 RUNNING   */
*            4 CCFCR1   BIT(1),    /* IND MODULE ISTCFCR1 RUNNING   */
*            4 CCFCRP   BIT(1),    /* IND MODULE ISTCFCRP RUNNING   */
*            4 CCFCR2   BIT(1),    /* IND MODULE ISTCFCR2 RUNNING   */
*            4 CCFRSVD1 BIT(3);    /* RESERVED                      */
*DCL TIDCFCS1 BIT(8) CONSTANT('00'X); /* THREAD ID FOR ISTCFCS1     */
*DCL TIDCFCR1 BIT(8) CONSTANT('01'X); /* THREAD ID FOR ISTCFCR1     */
*DCL TIDCFCR2 BIT(8) CONSTANT('02'X); /* THREAD ID FOR ISTCFCR2     */
*/* COMPONENT RECOVERY RECORD FOR TPIOS */                      01S0683
*/*  DELTA                                             006 02/10/75  */
*DCL                                                            01S0683
*1  ISTZCRR BDY(WORD) BASED,     /* CONTROL WORD                     */
*   2  ZCRCRR CHAR(4),           /* CONTROL WORD                     */
*      3  ZCRID CHAR(1),         /* CONTROL BLOCK ID                 */
*      3  ZCRLEN CHAR(2),        /* LENGTH OF ZCR                    */
*      3  ZCRFLAG CHAR(1),       /* FLAGS                            */
*   2  ZCRCHAIN PTR(31),         /* POINTER TO PREVIOUS ZCR          */
*   2  ZCRFRRA PTR(31),          /* PTR TO FRR                       */
*   2  ZCRFLGS1 CHAR(1),         /* FLGS USED BY REQUEST COMPLETION  */
*      3  ZCREXSW BIT(1),        /* EXIT SWITCH                      */
*      3  ZCRQUESW BIT(1),       /* QUEUE SWITCH                     */
*      3  ZCRDEQSW BIT(1),       /* DEQUEUE SWITCH                   */
*      3  ZCRWAIT BIT(1),        /* WAIT Q ANALYSIS COMPLETE         */
*      3  ZCRNRMEX BIT(1),       /* NORMAL EXIT TO BE TAKEN          */
*      3  ZCRENDLP BIT(1),       /* END OF LOOP SWITCH               */
*      3  ZCRUNSOL BIT(1),       /* UNSOLICITED DATA                 */
*      3  ZCRFEXIT BIT(1),       /* FORCE EXIT SWITCH                */
*   2  ZCRFLGS2 CHAR(1),         /* FLAGS USED WITHIN TPIOS          */
*      3  ZCRLOCAL BIT(1),       /* LOCAL SUPPORT                    */
*      3  ZCRSHEDI BIT(1),       /* IMMEDIATE SCHEDULE               */
*      3  ZCRFMSED BIT(1),       /* FMCB SEARCH ENDED                */
*      3  ZCROB    BIT(1),       /* OUTBOUND PROC IN PROGRESS        */
*      3  ZCRIF0E1 BIT(1),       /* SWITCH FOR STRUCTURED PGM USED BY
*                                   INBOUND PROCESSING               */
*      3  ZCRIF0E2 BIT(1),       /* SWITCH FOR STRUCTURED PGM USED BY
*                                   INBOUND PROCESSING               */
*      3  ZCRIF0E3 BIT(1),       /* SWITCH FOR STRUCTURED PGM USED BY
*                                   INBOUND PROCESSING               */
*   2  ZCRSWFLD CHAR(1),         /* SWITCHES FOR TPIOS OUTBOUND      */
*      3  ZCRENDSH BIT(1),       /* EXIT FROM REMOTE DEV SCHEDULER   */
*         4  ZCRSLCP BIT(1),     /* SCHEDULE LCPB                    */
*      3  ZCREXTYP BIT(1),       /* TPEXIT TYPE                      */
*      3  ZCRENDPR BIT(1),       /* EXIT FROM INNER PROCESS          */
*      3  ZCRNDLCP BIT(1),       /* EXIT FROM LCPB PROCESSING        */
*         4  ZCROB1 BIT(1),      /* REMOTE DEV SCHED 1ST TIME SWITCH */
*      3  ZCRENDX BIT(1),        /* EXIT FROM LCCW/BTU XLATION       */
*      3  ZCRENDXL BIT(1),       /* EXIT FROM LCCW PROC              */
*      3  ZCRENDAN BIT(1),       /* EXIT FROM LCPB ANALYSIS          */
*      3  ZCRRESET BIT(1),                                      01S0683
*         4  ZCRCNLXL BIT(1),    /* CANCEL FURTHER XLATE             */
*   2  ZCRFLGS3 CHAR(1),         /* FLAGS FOR OUTBOUND PROCESSING    */
*      3  ZCRTIC BIT(1),         /* SELECT NOT TO BE SENT            */
*      3  ZCRTPCON BIT(1),       /* TPIOS CONTACT SENT               */
*      3  ZCRTPDIS BIT(1),       /* TPIOS DISCONNECT TO BE SENT      */
*      3  ZCRDISC  BIT(1),       /* DISCONNECT IN PROCESS            */
*      3  ZCREDRIV BIT(1),       /* DO DERIVE                        */
*      3  ZCRNOFRE BIT(1),       /* NO FREEING OF SIO QUEUE          */
*      3  ZCRWRPTR BIT(1),       /* WRITE TO PRINTER REQUEST         */
*      3  ZCRINLCP BIT(1),       /* ERROR OCCURED DURING OUTBND PROC */
*   2  ZCRGENSW CHAR(1),         /* GENERAL SWITCHES                 */
*      3  ZCRTSW1  BIT(1),       /* TEMP SW FOR STRUCTURED PGM       */
*      3  ZCRTSW2  BIT(1),       /* TEMP SW FOR STRUCTURED PGM       */
*      3  ZCRRT06  BIT(1),       /* CRITICAL TEXT OPTION             */
*      3  ZCRLCSYN BIT(1),       /* LCCW SYNC SPECIFIED              */
*      3  ZCREXRES BIT(1),       /* EXCEPTION RESPONSE SPECIFIED     */
*      3  ZCRCLRBD BIT(1),       /* FLAG INDICATING BIND WAS CLEARED */
*      3  ZCRBRIS  BIT(1),       /* BRACKET REJECTED DUE TO IN BRAC. */
*      3  ZCRF1RES BIT(1),       /* FID1 RESPONSE TO BE GENERATED    */
*   2  ZCRPFLGS CHAR(1),         /* UTILITIES PROC OPTION FLAGS      */
*      3  ZCRQAHED BIT(1),      /* QXFR RTN TO USE INSERT OPT'N ON TPQ*
*      3  *        BIT(7),      /* RESERVED                          */
*   2  ZCRIBPR CHAR(1),          /* INBOUND PROCESSING FLAGS         */
*         3  ZCRNOBUF BIT(1),    /* FSB WITH NO BUFFER               */
*         3  ZCRERR   BIT(1),    /* ERROR INDICATOR                  */
*         3  ZCRRELK  BIT(1),    /* RESET ERROR LOCK FUNCTION REQ.   */
*         3  ZCRLCPFR BIT(1),    /* FLAG IND. DEALLOCATE ATOP LCPB   */
*         3  ZCRLCPFD BIT(1),    /* FLAG IND. LCPB FOUND ON WAITQ    */
*         3  ZCR3270  BIT(1),    /* 3270 DEVICE                      */
*         3  ZCR3270R BIT(1),    /* 3270 DEVICE IN RECORD MODE       */
*         3  *        BIT(1),    /* RESERVED                         */
*   2  ZCRSCPSW CHAR(1),         /* SESSION CONTROL FLAGS            */
*         3  ZCRTPEX BIT(1),     /* TP EXIT                          */
*         3  ZCRTPINV BIT(1),    /* INVOKE TPIOS                     */
*         3  ZCRRJLCP BIT(1),    /* LCPB REJECTED                    */
*         3  ZCRLREQ BIT(1),     /* REQUEST                          */
*         3  ZCRPRCMP BIT(1),    /* PROCESSING COMPLETE              */
*         3  ZCRFSBWE BIT(1),    /* FSB IS WORK ELEMENT              */
*         3  ZCRSKIPT BIT(1),    /* SKIP TRACE FLAG                  */
*         3  *       BIT(1),     /* RESERVED                         */
*   2  ZCRCRLCP PTR(31),         /* CURRENT LCPB PTR                 */
*   2  ZCRPARMS BDY(WORD),       /* PARAMETERS PASSED TO UTILITIES */
*      3  ZCRFBPTR PTR(31),      /* PTR TO FROM BUFFER               */
*         4  ZCRCBPTR PTR(31),   /* PTR TO CURRENT BUFFER            */
*      3  ZCRTBPTR PTR(31),      /* PTR TO TO-OR-TRANSLATE BUFFER    */
*      3  ZCRMLNG FIXED(15),     /* LENGTH TO MOVE                   */
*      3  ZCRDFRDA FIXED(15),    /* OFFSET FROM DATA ADDR IN FROM BUF*/
*         4  ZCRDTODA FIXED(15), /* OFFSET FROM DATA ADDR XLATE BUF  */
*      3  ZCRPCOD1 CHAR(1),      /* CODE BYTE FOR ALLOC/DISALLOC     */
*         4  ZCRPPG BIT(1),      /* GET PAGEABLE BUFF                */
*         4  ZCRPLNG BIT(1),     /* LENGTH OF BUFFER SPECIFIED       */
*         4  ZCRPFSB BIT(1),     /* GET FSB                          */
*         4  ZCRPLSBF BIT(1),    /* GET LSCB AND BUFFER              */
*            5 ZCRPLSBQ BIT(1),  /* PURGE LSCB QUEUE                 */
*         4  ZCRPLSCB BIT(1),    /* GET OR RELEASE LSCB              */
*         4  ZCRPBUF BIT(1),     /* GET OR RELEASE BUFFER            */
*         4  ZCRPCFTX BIT(1),    /* CONFIDENTIAL TEXT                */
*         4  ZCRPRES BIT(1),     /* RESERVED                         */
*      3  ZCRPCOD2 CHAR(1),      /* CODE BYTE FOR MOVE               */
*         4  ZCRPPG2 BIT(1),     /* GET PAGEABLE BUFFER              */
*         4  ZCRPFHDR BIT(1),    /* FROM BUFFER FDB TO BE USED       */
*         4  ZCRPMFGF BIT(1),    /* MOVE STARTS WIHT 1ST BUFF IN BLOCK*
*         4  ZCRPRES2 BIT(5),    /* RESERVED                         */
*      3  ZCRPCHAR CHAR(1),      /* TRANSLATE & TEST SEARCH CHARACTER*/
*      3  ZCRPSW   CHAR(1),      /* SWITCH FIELD                     */
*   2  ZCRCCWA PTR(31),          /* PTR TO CURRENT CCW (CCW 1 OR 2)  */
*   2  ZCRBFPTR PTR(31),         /* SAVE 1ST BUFF PTR IN TO-BUFF CHN
*                                   OR LAST BUFFER IN CHANNEL PGM    */
*   2  ZCRZLB PTR(31),           /* PTR TO CURR BUFF IN CHANNEL PGM  */
*   2  ZCRPVZB PTR(31),          /* PTR TO PREVIOUS BUFF IN CHAN PGM */
*   2  ZCRSVRTN BDY(WORD),       /* REG 14 SAVE AREAS                */
*      3  ZCRSVF1 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF2 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF3 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF4 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF5 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF6 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF7 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF8 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF9 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF10 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF11 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF12 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF13 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF14 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF15 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF16 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF17 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF18 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF19 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF20 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF21 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF22 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF23 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF24 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF25 PTR(31),      /* SAVE REQUIRED REGISTER           */
*   2  ZCRWKARA BDY(WORD),       /* TEMPORARY REG SAVE AREA          */
*      3  ZCRSVWK1 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK2 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK3 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK4 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK5 PTR(31),      /* SAVE REQUIRED REG                */
*   2  ZCRFSBSV PTR(31),         /* FSB CHAIN PTR SAVEAREA           */
*   2  ZCRFBPRC BIT(1),          /* FSB PROCESS SW                   */
*   2  ZCRMOREL BIT(1),          /* MORE ELEMENTS SW                 */
*   2  ZCRSCANQ BIT(1),          /* SCAN QUEUE SW                    */
*   2  ZCRNXTEL BIT(1),          /* NEXT ELEMENT SW                  */
*   2  ZCRXSCHD BIT(1),          /* EXIT SCHEDULE SW                 */
*   2  ZCRLSTFB BIT(1),          /* INBOUND PROC LAST FSB FOR ELEM SW*/
*   2  ZCRTOPQ  BIT(1),          /* QUEUE ELEMENT TO TOP SW          */
*   2  ZCRAWQSW BIT(1),          /* CHECK AWAITQ FOR MORE WORK =1    */
*                                /* CHECK WAITQ =0                   */
*   2  ZCRRCDSV CHAR(1),         /* RETURN CODE SAVEAREA             */
*   2  ZCRPRMTC CHAR(1),         /* PREEMPT COMPLETION PARAMETER BYTE*/
*   2  ZCROPCDE CHAR(1),         /* OP CODE TO BE TRANSFORMED         *
*   2  ZCRR2SV PTR(31),          /* ISTZBFDI REG 2 SAVE EREA         */
*   2  ZCRR13SV PTR(31),         /* ISTSBFDI REG 13 SAVE EREA        */
*   2  ZCRCIDSV BDY(WORD),       /* ISTZBFDI CID SAVE AREA           */
*      3  ZCRSAFSV CHAR(2),      /* ISTZBFDI SAF SAVE AREA           */
*      3  ZCRDAFSV CHAR(2),      /* ISTZBFDI DAF SAVE AREA           */
*   2  ZCRSAVEZ (6) BDY(WORD) CHAR(LENGTH(ISTZSAVE)),           01S0683
*                                /* SAVE/TRACE AREAS FOR TPIOS MODS  */
*   2  ZCRREMIC PTR(31),        /* POINTER TO REMOTE RN ICNCB        */
*   2  ZCRAUDIT CHAR(36),        /* TPIOS AUDIT TRAIL AREA           */
*      3  ZCRTID CHAR(1),        /* THREAD I.D.                      */
*      3  ZCRTNAME CHAR(4),      /* LAST 4 CHARS OF THREAD NAME      */
*      3  ZCRENTER BIT(248),     /* BIT ARRAY FOR MODULES ENTERED    */
*         4  ZCREAC1A BIT(1),    /* ISTZAC1A ENTERED                 */
*         4  ZCREAC0A BIT(1),    /* ISTZAC0A ENTERED                 */
*         4  ZCREAC0B BIT(1),    /* ISTZAC0B ENTERED                 */
*         4  ZCREAC1B BIT(1),    /* ISTZAC1B ENTERED                 */
*         4  ZCREBCAA BIT(1),    /* ISTZBCAA ENTERED                 */
*         4  ZCREBCAB BIT(1),    /* ISTZBCAB ENTERED                 */
*         4  ZCREBCAE BIT(1),    /* ISTZBCAE ENTERED                 */
*         4  ZCREBCAG BIT(1),    /* ISTZBCAG ENTERED                 */
*         4  ZCREBCAI BIT(1),    /* ISTZBCAI ENTERED                 */
*         4  ZCREBCAM BIT(1),    /* ISTZBCAM ENTERED                 */
*         4  ZCREBCBA BIT(1),    /* ISTZBCBA ENTERED                 */
*         4  ZCREBCBB BIT(1),    /* ISTZBCBB ENTERED                 */
*         4  ZCREBCBI BIT(1),    /* ISTZBCBI ENTERED                 */
*         4  ZCREBCCB BIT(1),    /* ISTZBCCB ENTERED                 */
*         4  ZCREBCDI BIT(1),    /* ISTZBCDI ENTERED                 */
*         4  ZCREBCEB BIT(1),    /* ISTZBCEB ENTERED                 */
*         4  ZCREBCFA BIT(1),    /* ISTZBCFA ENTERED                 */
*         4  ZCREBCFB BIT(1),    /* ISTZBCFB ENTERED                 */
*         4  ZCREBCGA BIT(1),    /* ISTZBCGA ENTERED                 */
*         4  ZCREBCGB BIT(1),    /* ISTZBCGB ENTERED                 */
*         4  ZCREBCHA BIT(1),    /* ISTZBCHA ENTERED                 */
*         4  ZCREBCHB BIT(1),    /* ISTZBCHB ENTERED                 */
*         4  ZCREBCIA BIT(1),    /* ISTZBCIA ENTERED                 */
*         4  ZCREBCIB BIT(1),    /* ISTZBCIB ENTERED                 */
*         4  ZCREBCID BIT(1),    /* ISTZBCID ENTERED                 */
*         4  ZCREBCJA BIT(1),    /* ISTZBCJA ENTERED                 */
*         4  ZCREBCJB BIT(1),    /* ISTZBCJB ENTERED                 */
*         4  ZCREBCKA BIT(1),    /* ISTZBCKA ENTERED                 */
*         4  ZCREBCKB BIT(1),    /* ISTZBCKB ENTERED                 */
*         4  ZCREBCLA BIT(1),    /* ISTZBCLA ENTERED                 */
*         4  ZCREBCLB BIT(1),    /* ISTZBCLB ENTERED                 */
*         4  ZCREBCMB BIT(1),    /* ISTZBCMB ENTERED                 */
*         4  ZCREBCND BIT(1),    /* ISTZBCND ENTERED                 */
*         4  ZCREBCNE BIT(1),    /* ISTZBCNE ENTERED                 */
*         4  ZCREBCOB BIT(1),    /* ISTZBCOB ENTERED                 */
*         4  ZCREBCPB BIT(1),    /* ISTZBCPB ENTERED                 */
*         4  ZCREBCQB BIT(1),    /* ISTZBCQB ENTERED                 */
*         4  ZCREBCRA BIT(1),    /* ISTZBCRA ENTERED                 */
*         4  ZCREBCRB BIT(1),    /* ISTZBCRB ENTERED                 */
*         4  ZCREBCSC BIT(1),    /* ISTZBCSC ENTERED                 */
*         4  ZCREBCXA BIT(1),    /* ISTZBCXA ENTERED                 */
*         4  ZCREBCX0 BIT(1),    /* ISTZBCX0 ENTERED                 */
*         4  ZCREBCY0 BIT(1),    /* ISTZBCY0 ENTERED                 */
*         4  ZCREBCZ0 BIT(1),    /* ISTZBCZ0 ENTERED                 */
*         4  ZCREBC0A BIT(1),    /* ISTZBC0A ENTERED                 */
*         4  ZCREBC0B BIT(1),    /* ISTZBC0B ENTERED                 */
*         4  ZCRECC0A BIT(1),    /* ISTZCC0A ENTERED                 */
*         4  ZCRECC0B BIT(1),    /* ISTZCC0B ENTERED                 */
*         4  ZCRECC1A BIT(1),    /* ISTZCC1A ENTERED                 */
*         4  ZCRECC1B BIT(1),    /* ISTZCC1B ENTERED                 */
*         4  ZCRECC2B BIT(1),    /* ISTZCC2B ENTERED                 */
*         4  ZCREDCA0 BIT(1),    /* ISTZDCA0 ENTERED                 */
*         4  ZCREDCB0 BIT(1),    /* ISTZDCB0 ENTERED                 */
*         4  ZCREDCC0 BIT(1),    /* ISTZDCC0 ENTERED                 */
*         4  ZCREDCD0 BIT(1),    /* ISTZDCD0 ENTERED                 */
*         4  ZCREDCE0 BIT(1),    /* ISTZDCE0 ENTERED                 */
*         4  ZCREDCF0 BIT(1),    /* ISTZDCF0 ENTERED                 */
*         4  ZCREDCH0 BIT(1),    /* ISTZDCH0 ENTERED                 */
*         4  ZCREDCI0 BIT(1),    /* ISTZDCI0 ENTERED                 */
*         4  ZCREDCJ0 BIT(1),    /* ISTZDCJ0 ENTERED                 */
*         4  ZCREDCKA BIT(1),    /* ISTZDCKA ENTERED                 */
*         4  ZCREDCKB BIT(1),    /* ISTZDCKB ENTERED                 */
*         4  ZCREDCL0 BIT(1),    /* ISTZDCL0 ENTERED                 */
*         4  ZCREDCMB BIT(1),    /* ISTZDCMB ENTERED                 */
*         4  ZCREECBA BIT(1),    /* ISTZECBA ENTERED                 */
*         4  ZCREECBB BIT(1),    /* ISTZECBB ENTERED                 */
*         4  ZCREECCA BIT(1),    /* ISTZECCA ENTERED                 */
*         4  ZCREECCB BIT(1),    /* ISTZECCB ENTERED                 */
*         4  ZCREECDA BIT(1),    /* ISTZECDA ENTERED                 */
*         4  ZCREECEA BIT(1),    /* ISTZECEA ENTERED                 */
*         4  ZCREECTA BIT(1),    /* ISTZECTA ENTERED                 */
*         4  ZCREFCEA BIT(1),    /* ISTZFCEA ENTERED                 */
*         4  ZCREFCEB BIT(1),    /* ISTZFCEB ENTERED                 */
*         4  ZCREGCAB BIT(1),    /* ISTZGCAB ENTERED                 */
*         4  ZCREGCBB BIT(1),    /* ISTZGCBB ENTERED                 */
*         4  *        BIT(1),    /* NOT USED                         */
*         4  ZCREGCDB BIT(1),    /* ISTZGCDB ENTERED                 */
*         4  ZCREGCEB BIT(1),    /* ISTZGCEB ENTERED                 */
*         4  ZCREGCLA BIT(1),    /* ISTZGCLA ENTERED                 */
*         4  ZCREGC0A BIT(1),    /* ISTZGC0A ENTERED                 */
*         4  ZCREGC0B BIT(1),    /* ISTZGC0B ENTERED                 */
*         4  ZCREHCAN BIT(1),    /* ISTZHCAN ENTERED                 */
*         4  ZCREICAA BIT(1),    /* ISTZICAA ENTERED                 */
*         4  ZCREICAB BIT(1),    /* ISTZICAB ENTERED                 */
*         4  ZCREICBB BIT(1),    /* ISTZICBB ENTERED                 */
*         4  ZCREICBI BIT(1),    /* ISTZICBI ENTERED                 */
*         4  ZCREICCB BIT(1),    /* ISTZICCB ENTERED                 */
*         4  ZCREICCI BIT(1),    /* ISTZICCI ENTERED                 */
*         4  ZCREICDB BIT(1),    /* ISTZICDB ENTERED                 */
*         4  ZCREICEB BIT(1),    /* ISTZICEB ENTERED                 */
*         4  ZCREICGB BIT(1),    /* ISTZICGB ENTERED                 */
*         4  ZCREICHB BIT(1),    /* ISTZICHB ENTERED                 */
*         4  ZCREICIB BIT(1),    /* ISTZICIB ENTERED                 */
*         4  ZCREICID BIT(1),    /* ISTZICID ENTERED                 */
*         4  ZCREICJB BIT(1),    /* ISTZICJB ENTERED                 */
*         4  ZCREICKB BIT(1),    /* ISTZICKB ENTERED                 */
*         4  ZCREICKE BIT(1),    /* ISTZICKE ENTERED                 */
*         4  ZCREICKG BIT(1),    /* ISTZICKG ENTERED                 */
*         4  ZCREICLB BIT(1),    /* ISTZICLB ENTERED                 */
*         4  ZCREICMB BIT(1),    /* ISTZICMB ENTERED                 */
*         4  ZCREICNA BIT(1),    /* ISTZICNA ENTERED                 */
*         4  ZCREICNB BIT(1),    /* ISTZICNB ENTERED                 */
*         4  ZCREICOA BIT(1),    /* ISTZICOA ENTERED                 */
*         4  ZCREICOB BIT(1),    /* ISTZICOB ENTERED                 */
*         4  ZCREICQA BIT(1),    /* ISTZICQA ENTERED                 */
*         4  ZCREICQB BIT(1),    /* ISTZICQB ENTERED                 */
*         4  ZCREICRB BIT(1),    /* ISTZICRB ENTERED                 */
*         4  ZCREICSB BIT(1),    /* ISTZICSB ENTERED                 */
*         4  ZCREICSC BIT(1),    /* ISTZICSC ENTERED                 */
*         4  ZCREICTB BIT(1),    /* ISTZICTB ENTERED                 */
*         4  ZCREICUB BIT(1),    /* ISTZICUB ENTERED                 */
*         4  ZCREICVB BIT(1),    /* ISTZICVB ENTERED                 */
*         4  ZCREICWB BIT(1),    /* ISTZICWB ENTERED                 */
*         4  ZCREICX0 BIT(1),    /* ISTZICX0 ENTERED                 */
*         4  ZCREIC0B BIT(1),    /* ISTZIC0B ENTERED                 */
*         4  ZCREIC1B BIT(1),    /* ISTZIC1B ENTERED                 */
*         4  ZCREJCAB BIT(1),    /* ISTZJCAB ENTERED                 */
*         4  ZCREJCBB BIT(1),    /* ISTZJCBB ENTERED                 */
*         4  ZCREJCCB BIT(1),    /* ISTZJCCB ENTERED                 */
*         4  ZCREJCDB BIT(1),    /* ISTZJCDB ENTERED                 */
*         4  ZCREJC0B BIT(1),    /* ISTZJC0B ENTERED                 */
*         4  ZCREKCBB BIT(1),    /* ISTZKCBB ENTERED                 */
*         4  ZCREKCBN BIT(1),    /* ISTZKCBN ENTERED                 */
*         4  ZCREKCCN BIT(1),    /* ISTZKCCN ENTERED                 */
*         4  ZCREDCWR BIT(1),    /* ISTZDCWR ENTERED                 */
*         4  ZCREDCWB BIT(1),    /* ISTZDCWB ENTERED                 */
*         4  ZCREDCXR BIT(1),    /* ISTZDCXR ENTERED                 */
*         4  ZCREBCBR BIT(1),    /* ISTZBCBR ENTERED                 */
*         4  ZCREBCDR BIT(1),    /* ISTZBCDR ENTERED                 */
*         4  ZCREBCAR BIT(1),    /* ISTZBCAR ENTERED                 */
*         4  ZCRECCBI BIT(1),    /* ISTZCCBI ENTERED                 */
*         4  ZCRECCAI BIT(1),    /* ISTZCCAI ENTERED                 */
*         4  ZCRECCCI BIT(1),    /* ISTZCCCI ENTERED                 */
*         4  ZCREAC1R BIT(1),    /* ISTZAC1R ENTERED                 */
*         4  ZCREBCSB BIT(1),    /* ISTZBCSB ENTERED                 */
*         4  ZCREDCPR BIT(1),    /* ISTZDCPR ENTERED                 */
*         4  ZCREDCQR BIT(1),    /* ISTZDCQR ENTERED                 */
*         4  ZCREBCAL BIT(1),    /* ISTZBCAL ENTERED                 */
*         4  ZCREBC0L BIT(1),    /* ISTZBC0L ENTERED                 */
*         4  ZCREBCNB BIT(1),    /* ISTZBCNB ENTERED                 */
*         4  ZCREICOE BIT(1),    /* ISTZICOE ENTERED                 */
*         4  ZCREDCNB BIT(1),    /* ISTZDCNB ENTERED                 */
*         4  ZCREKCCB BIT(1),    /* ISTZKCCB ENTERED                 */
*         4  ZCRECFY0 BIT(1),    /* ISTZCFY0 ENTERED                 */
*         4  ZCREDCK0 BIT(1),    /* ISTZDFK0 ENTERED                 */
*         4  ZCREICSG BIT(1),    /* ISTZICSG ENTERED                 */
*         4  ZCREBCIF BIT(1),    /* ISTZBCIF ENTERED                 */
*         4  ZCREDCMF BIT(1),    /* ISTZDCMF ENTERED                 */
*         4  ZCRELCAB BIT(1),    /* ISTZLCAB ENTERED                 */
*         4  ZCREAC2B BIT(1),    /* ISTZAC2B ENTERED                 */
*         4  ZCREIC2B BIT(1),    /* ISTZIC2B ENTERED                 */
*         4  ZCRRSV97 BIT(97),   /* RESERVED                         */
*   2  ZCRCMNRC CHAR(1),                /* PURGE MWOR RETURN CODE    */
*   2  ZCRWORDA CHAR(3),                /* RESERVED FOR LATER USE    */
*   2  ZCRLCPB  CHAR(LENGTH(ISTLCPB)),  /* 3270 S/R LCPB             */
*      3 ZCRRHRU,                       /* SAVEAREA FOR RH AND RU    */
*        4 ZCRRH    CHAR(3),            /* RH                        */
*        4 ZCRRU    CHAR(*);            /* RU                        */
*DCL ZCTYPE BIT(8) CONSTANT('00'X);   /* ZCR TYPE                   */
*DCL ZCLNG FIXED(15) CONSTANT(172);   /* ZCRR LENGTH                */
*DCL ZCRSAVNO BIT(8) CONSTANT('06'X); /* NUMBER OF SAVEAREAS IN ZCRR */
*DCL ZCRLSVNO BIT(8) CONSTANT('04'X); /* NUMBER OF SAVE AREAS IN
*                                         LOCAL SUPPORT              */
*/* *** EQUATES FOR ZCRRCDSV *** */                             01S0688
*                                                               01S0688
*DCL ZCRMRFSB BIT(8) CONSTANT('0C'X);  /* REQUEST COMPLETION MOVE FSB
*                                         TO PROCESS                 */
*DCL ZCRSRCHQ BIT(8) CONSTANT('10'X);  /* REQUEST COMPLETION SEARCH
*                                         REQUEST QUEUE              */
*DCL ZCREXIT  BIT(8) CONSTANT('14'X);  /* REQUEST COMPLETION EXIT    */
*DCL ZCRSFSB  BIT(8) CONSTANT('18'X);  /* REQUEST COMPLETION SINGLE
*                                         FSB                        */
*DCL ZCRDLFSB BIT(8) CONSTANT('1C'X);  /* REQUEST COMPLETION DUAL FSB *
*DCL ZCRNOSCH BIT (8) CONSTANT('20'X); /* REQUEST COMPLETION, EXIT WITH
*                                         SCHED NONE                 */
*DCL ZCRNRSCH BIT (8) CONSTANT('24'X); /* REQUEST COMPLETION, EXIT WITH
*                                         SCHED NORM                 */
*DCL ZCRLGERR FIXED(8) CONSTANT(8);    /* LOGICAL ERROR              */
*DCL ZCPLSCB BIT(8) CONSTANT('08'X);   /* GET A RELEASE LSCB         */
*DCL ZCPBUF  BIT(8) CONSTANT('04'X);   /* GET A RELEASE BUFFER       */
*DCL ZCRTAC0A FIXED(8) CONSTANT(01);   /* LOCAL DEVICE SCHEDULER(OUT)*/
*DCL ZCRTAC0B FIXED(8) CONSTANT(02);   /* REMOTE DEVICE SCHEDLER(OUT)*/
*DCL ZCRTCC1A FIXED(8) CONSTANT(03);   /* LOCAL DIALOG SCHEDLER(IN)  */
*DCL ZCRTCC1B FIXED(8) CONSTANT(04);   /* REMOTE DIALOG SCHEDLER(IN) */
*DCL ZCRTDCE0 FIXED(8) CONSTANT(05);   /* NCP SLOWDOWN RECOVERY      */
*DCL ZCRTDCKA FIXED(8) CONSTANT(06);   /* LOCAL GENERAL FUNCTIONS    */
*DCL ZCRTDCKB FIXED(8) CONSTANT(07);   /* REMOTE GENERAL FUNCTIONS   */
*DCL ZCRTFCEB FIXED(8) CONSTANT(08);   /* REMOTE READ BUFFER ALLOC.  */
*DCL ZCRTGCLA FIXED(8) CONSTANT(09);   /* LCAL CTL & TEST FEEDBACK(IN)*
*DCL ZCRTGC0A FIXED(8) CONSTANT(10);   /* LOCAL REQ. COMPLETION(IN)  */
*DCL ZCRTGC0B FIXED(8) CONSTANT(11);   /* REMOTE REQ. COMPLETION(IN) */
*DCL ZCRTICWB FIXED(8) CONSTANT(12);   /* RESET CLEANUP (PHASE 5)    */
*DCL ZCRTIC0B FIXED(8) CONSTANT(13);   /* REMOTE REQ COMPLTION CTL(IN)*
*DCL ZCRTAC1B FIXED(8) CONSTANT(14);   /* ISTZAC1B THREAD ID         */
*DCL ZCRTIC1B FIXED(8) CONSTANT(15);   /* ISTZIC1B THREAD ID         */
*DCL ZCRTCCBI FIXED(8) CONSTANT(16);   /* ISTZCCBI THREAD ID         */
*DCL ZCRTAC1R FIXED(8) CONSTANT(17);   /* ISTZAC1R THREAD ID         */
*DCL ZCRTAC1A FIXED(8) CONSTANT(18);   /* ISTZAC1A THREAD ID         */
*DCL ZCRTLCAB FIXED(8) CONSTANT(19);   /* ISTZLCAB THREAD ID         */
*/* COMPONENT RECOVERY                                               */
*/*                                                                  */
*DCL 1 ISTASCRR BDY(WORD) BASED,        /* CRR FOR SMS               */
*     2  ASCPFCRR CHAR(LENGTH(ISTPFCRR)),                       01S0717
*     2  ASCFLAGS CHAR(7),              /* FLAGS                     */
*        3  ASCFLG1 CHAR(2),            /* MODULE TRACE FLAGS        */
*           4  ASCFBA BIT(1),           /* ALLOCATION IN PATH        */
*           4  ASCFBD BIT(1),           /* DE-ALLOCATION IN PATH     */
*           4  ASCFSR BIT(1),           /* FSR IN PATH               */
*           4  ASCPASTR BIT(13),        /* RESERVED PATH FLAGS       */
*        3  ASCFLG2 CHAR(2),            /* MODULE IN CONTROL FLAGS   */
*           4  ASCFBAIC BIT(1),         /* ALLOCATION IN CONTROL     */
*           4  ASCFBDIC BIT(1),         /* DE-ALLOCATION IN CONTROL  */
*           4  ASCFSRIC BIT(1),         /* FSR IN CONTROL            */
*           4  ASCICR BIT(13),          /* RESERVED IN CONTROL FLAGS */
*        3  ASCFLG3 CHAR(3),            /* AUDIT FLAGS               */
*           4  ASCFSRGT BIT(1),         /* FSR DOING GET PROCESSING  */
*           4  ASCFBDAL BIT(1),         /* FBD DOING ALLOCATION      */
*           4  ASCKEYF BIT(1),          /* KEY HAS BEEN ALTERED      */
*           4  ASCLLKF BIT(1),          /* LOCAL LOCK HELD           */
*           4  ASCFBDUD BIT(1),         /* FBD USING USER DATA       */
*           4  ASCAUDIT BIT(19),        /* RESERVED AUDIT BITS       */
*     2  ASCKEY CHAR(1),                /* ORIGINAL KEY              */
*     2  ASCETRYA PTR(31),              /* RETRY ADRS FOR CONTINUE
*                                          OPTION                    */
*     2  ASCUSRGS CHAR(16),             /* SAVE AREA FOR USER REGS
*                                          14 - 1                    */
*        3  ASCUSR14 CHAR(4),           /* REGISTER 14               */
*        3  ASCUSR15 CHAR(4),           /* REGISTER 15               */
*        3  ASCUSR00 CHAR(4),           /* REGISTER 0                */
*        3  ASCUSR01 CHAR(4),           /* REGISTER 1                */
*     2  ASCPSREG CHAR(16);             /* SAVE AREA FOR PSS    01S0717
*                                          REGS 1 - 4                */
*/*  INITIAL LEVEL                                      001 04/09/75 */
*DCL 1 ISTAPCRR BDY(WORD) BASED,                                01S0718
*     2 APCHDRSV CHAR(LENGTH(ISTPFCRR)),  /* HEADER                  */
*     2  APCATFLG CHAR(2),              /* AUDIT TRACE FLAGS         */
*        3  APC51E BIT(1),              /* ISTAPC51 WAS ENTERED      */
*        3  APC52E BIT(1),              /* ISTAPC52  '     '         */
*        3  APC53E BIT(1),              /* ISTAPC53                  */
*        3  APC54E BIT(1),                                      01S0718
*        3  APC56E BIT(1),                                      01S0718
*        3  APC57E BIT(1),                                      01S0718
*        3  APC58E BIT(1),                                      01S0718
*        3  APC31E BIT(1),                                      01S0718
*        3 * BIT(8),                    /* RESERVED                  */
*     2  APCRFLG CHAR(2),               /* AUDIT TRACE FLAGS         */
*        3  APC51R BIT(1),              /* ISTAPCR1 IS RUNNING       */
*        3  APC52R BIT(1),              /* ISTAPC52 IS RUNNING       */
*        3  APC53R BIT(1),                                      01S0718
*        3  APC54R BIT(1),                                      01S0718
*        3  APC56R BIT(1),                                      01S0718
*        3  APC57R BIT(1),                                      01S0718
*        3  APC58R BIT(1),                                      01S0718
*        3  APC31R BIT(1),                                      01S0718
*        3  *      BIT(8),              /* RESERVED                  */
*     2  APCPSTA PTR(31),               /* PST@                      */
*     2  APCTCBA PTR(31),               /* TCB@                      */
*     2  APCRTRN PTR(31),               /*@ TO BR14 TO RTN TO SYSTEM */
*     2  APCPABSV PTR(31),              /*SAVED PAB@ TO REDISPATCH   */
*     2  APCQWFO PTR(31),               /* Q@ IN PST WORK AREA ON    */
*     2  APCFRRPM PTR(31),              /* WORKAREA@ RTN'D FROM SETFR*/
*     2  APCSAVE CHAR(72),                                      01S0718
*        3  APCESTAL CHAR(72),          /* ESTAE PARAMETER LIST AREA */
*     2  APCCOMF CHAR(4) BDY(HWORD),    /* FLAGS USED BY ALL PSS RTN */
*        3  APCCOMF1 CHAR(2),                                   01S0718
*           4  APCSSTSK BIT(1),         /* IRB TYPE WORK             */
*           4  APCUETSK BIT(1),         /* USER EXIT RUNNING UNDER IRB*
*           4  APCSMCR BIT(1),          /* SMA CRA BEING USED        */
*           4  APCIRB1 BIT(1),          /* IRB1 BEING USED           */
*           4  APCIRB2 BIT(1),          /* IRB2 BEING USED           */
*           4  APCRELR BIT(1),          /*CALL ISTAPC58 TO RLEASE CRA*/
*           4  APCEXIT BIT(1),          /* TELLS ISTAPC58 TO EXIT SYS*/
*           4  APCZLBER BIT(1),         /* ERR WHILE RUNNING ZLFAB PAB*
*           4  * BIT(8),                /* RESERVED                  */
*        3  APCRETCD FIXED(15),         /* RTN CODE FOR R15 FOR SYS  */
*     2  APCSAV1 PTR(31),               /* 1ST SAVE WORD             */
*     2  APCSAV2 PTR(31),               /* 2ND SAVE WORD             */
*     2  APCSWTWD CHAR(4),              /* SWITCH AREA FOR PSS RTN   */
*     2  APC31FLG CHAR(1),              /* ISTAPC31 FLAGS            */
*        3  APCTPXIT BIT(1),            /* TPEXIT IN PROGRESS        */
*        3  APCRESCH BIT(1),            /*PAB TPEXIT OCCURED  RESCHED*/
*        3  APCSORT BIT(1),       /* PAB SORTED TO PROPER PST/MPST   */
*        3  *       BIT(5),       /* RESERVED                        */
*     2  APC52FLG CHAR(1),        /* ISTAPC52 FLAGS                  */
*        3  APCCKRQ BIT(1),       /* CHECK RDY Q FOR WORK            */
*        3  APCSMSR BIT(1),       /* RETURNING SMS RPH               */
*        3  APCQENQ BIT(1),       /* ENQUEUEING PAB'S ON PST Q'S     */
*        3  APCRDQ BIT(1),        /* DEQUEING PAB'S FROM PST RDY Q   */
*        3  APCNWF BIT(1),        /* NO WORK FOUND                   */
*        3  APCWKF   BIT(1),      /* WORK FOUND                      */
*        3    *      BIT(2),      /* RESERVED                        */
*     2  APC53FLG CHAR(1),        /* ISTAPC53 FLAGS                  */
*        3  APCPR153 BIT(1),      /* USED PREALLOCATED CRA           */
*     2  APC54FLG CHAR(1),        /* ISTAPC54 FLAGS                  */
*        3  APCRLST BIT(1),       /* SMS BEING CALLED TO RELEASE UECB*/
*        3  * BIT(7),             /* RESERVED                        */
*     2  APC57FLG CHAR(1),        /* ISTAPC57 FLAGS                  */
*        3  APCRECRA BIT(1),      /* RELEASE CRA BEING DONE          */
*        3  APCNREL BIT(1),       /* DID NOT RELEASE CRA             */
*        3  *   BIT(6),           /* RESERVED                        */
*     2  * CHAR(15);              /* RESERVED                        */
*/* RPL HEADER                                                        *
*/*  REVISIONS                                         006 04/09/75   *
*DCL RPHPTR PTR(31) REGISTER(1) RESTRICTED;                     01S0719
*DCL  1  ISTRPH BDY(WORD) BASED(RPHPTR),                        01S0720
*       2  RPHCNTL FIXED(32),          /* CONTROL INFORMATION         *
*       3  RPHTYPE CHAR(1),            /* CONTROL BLOCK TYPE          *
*       3  RPHLNGTH PTR(8),            /* LENGTH IN BYTES             *
*       3  RPHFLAGS BIT(8),            /* SYSTEM DEPENDENT FLAGS      *
*         4  RPHOGIND BIT(1),          /* OPEN GATE INDICATOR         *
*         4  RPHSPGIN BIT(1),          /* SPECIAL GATE OPEN IND.      *
*         4  RPHAPTYP BIT(1),          /* APS IS A USER EXIT          *
*            5  RPHAUTEX BIT(1),        /*EXIT TO AUTHORIZED USER VS2 *
*         4  RPHSMQ BIT(1),            /* INDICATOR IF RPH IS TO BE   *
*                                      /* QUEUED                      *
*         4  RPHSMTYP BIT(1),          /* REQUEST TYPE IS BUFFER OR   *
*                                      /* DOUBLE-WORD                 *
*         4  RPHSMCLR BIT(1),          /* INDICATOR IF BUFFER TO BE   *
*                                      /* CLEARED                     *
*           4  RPHMLTCP BIT(1),        /* USED BY LOCAL 3270  SUPPORT *
*                                      /* WHEN BUILDING MULTIPLE CHAN *
*                                      /* PROGRAM                     *
*           4  RPHFSTLC BIT(1),        /* USED BY LOCAL 3270 SUPPORT  *
*                                      /* TO INDICATE FIRST LCCW      *
*              5  RPHFNFLG BIT(1),     /* LCCW SET FUNCTION FLAGS     *
*        3  RPHFLGB BIT(8),            /* SECOND FLAG BYTE            *
*           4  RPHLOCK BIT(1),         /* LOCKING OPTION              *
*           4  RPHBSSP BIT(1),         /* SYSTEM SERVICES PROGRESS    *
*           4  RPHFBAPS BIT(1),        /* STG. OBTAINED BY APS        *
*           4  RPHPGCMP BIT(1),        /* BIT ON INDICATES RESOURCE   *
*                                      /* MGR HAS COMPLETED UNLOCK    *
*           4  RPHNRSAV BIT(1),        /* DO NOT SAVE ON ACTIVATE     *
*           4  RPHRLCRA BIT(1),        /* RPH CAN BE RELEASED         *
*                                      /* WHEN PURGE COMPLETE         *
*           4  *        BIT(2),        /* RESERVED                    *
*       2  RPHRPHA PTR(31),            /* ADDR.OF NEXT RPL HEADER     *
*         3  RPHGATE BIT(1),           /* GATING FLAG                 *
*         3  *       BIT(7),           /* RESERVED                    *
*         3  RPHRPHAP PTR(24),                                  01S0720
*       2  RPHTSKID PTR(31),           /* TASK IDENTIFICATION         *
*                                      /* OR ADDR.OF APS TABLE        *
*          3  *     CHAR(3),           /* RPH TSK ID                  *
*          3  RPHTIK PTR(8),           /* TIK                         *
*       2  RPHDVTA PTR(31),            /* ADDR.OF  CURRENT DVT        *
*       2  RPHRESMA PTR(31) BDY(WORD), /* TPWAIT-POST INFO */   01S0720
*         3 RPHWPFLG CHAR(1),          /* WAIT-POST FLAGS */    01S0720
*           4 RPHRSKEY BIT(4),         /* STORAGE PROTECT KEY TO RESUME
*                                         PROCESSING                  *
*           4 RPHWT BIT(1),            /* WAIT BIT */           01S0720
*           4 RPHPT BIT(1),            /* POST BIT */           01S0720
*           4 RPHPURGE BIT(1),         /* RPH FLAGGED BY RECOVERY    */
*                                      /* TO BE PURGED BY PSS        */
*                                      /* VS/2 ONLY                  */
*           4 RPHRSV01 BIT(1),        /* RESERVED                    */
*         3 RPHRESUM PTR(24),          /* RESUME ADDRESS */     01S0720
*       2  RPHPABOF PTR(8),            /* OFFSET OF PAB IN CONTROL BLK*
*       2  RPHMAJCB PTR(24),           /* ADDR.OF MAJOR CONTROL BLOCK *
*       2  RPHWEA PTR(31),             /* ADDR.OF WORK ELEMENT        *
*         3  RPHCSPA PTR(31),          /* ADDR OF ISTCSP              *
*           4  RPHWEGT BIT(1),         /* GATE FOR WORK ELEMENT PROC. *
*       2  RPHSRPRM PTR(31),           /* SERVICE ROUTINE PARM.FIELD  *
*         3 RPHSRP12 FIXED(15),        /* COUNT OF Q'ED SMS REQUESTS  *
*         3 RPHSRP34 FIXED(15),        /* SIZE OF Q'ED SMS REQUESTS   *
*       2  RPHCRR PTR(31),             /* ADDR.OF COMPONENT RECOVERY  *
*                                      /* RECORD                      *
*       2  RPHPABQA PTR(31),           /* PAB QUEUE ADDRESS           *
*          3 RPHPABFG CHAR(1),         /* FLAG BYTE CARRIED FROM PAB  *
*          3 RPHPABQP PTR(24),         /* POINTER TO QUEUE OF PAB'S   *
*       2  RPHWORK CHAR(64) BDY(WORD), /* 16 WORD WORK AREA           *
*         3  RPHSAVE1 FIXED(31),       /*                             *
*           4  RPHSBYTE CHAR(1),       /* 1-BYTE SAVE FIELD           *
*           4  RPHSBITS BIT(8),        /* SAVE FIELD FOR FLAG BYTE    *
*              5  RPHSBIT1 BIT(1),     /* 1ST SAVE FIELD              *
*              5  RPHSBIT2 BIT(1),     /* 2ND SAVE FIELD              *
*              5  RPHSBIT3 BIT(1),     /* 3RD SAVE FIELD              *
*              5  RPHSBIT4 BIT(1),     /* 4TH SAVE FIELD              *
*              5  RPHSBIT5 BIT(1),     /* 5TH SAVE FIELD              *
*              5  RPHSBIT6 BIT(1),     /* 6TH SAVE FIELD              *
*              5  RPHSBIT7 BIT(1),     /* 7TH SAVE FIELD              *
*              5  RPHSBIT8 BIT(1),     /* 8TH SAVE FIELD              *
*           4  RPHSHALF FIXED(15),     /* HALF WORD SAVE AREA         *
*         3  RPHSAVE2 FIXED(31),       /*                             *
*         3  RPHSAVE3 FIXED(31),       /*                             *
*         3  RPHSAVE4 FIXED(31),       /*                             *
*         3  RPHSAVE5 FIXED(31),       /*                             *
*         3  RPHSAVE6 FIXED(31),       /*                             *
*         3  RPHSAVE7 FIXED(31),       /*                             *
*         3  RPHSAVE8 FIXED(31),       /*                             *
*         3  RPHSAVE9 FIXED(31),       /*                             *
*         3  RPHSAV10 FIXED(31),       /*                             *
*         3  RPHSAV11 FIXED(31),       /*                             *
*         3  RPHSAV12 FIXED(31),       /*                             *
*         3  RPHSAV13 FIXED(31),       /*                             *
*         3  RPHSAV14 FIXED(31),       /*                             *
*         3  RPHSAV15 FIXED(31),       /*                             *
*         3  RPHSAV16 FIXED(31),       /*                             *
*       2  RPHNEXPO PTR(31);           /* ADDR.NEXT RPH TO BE POSTED  *
* DCL RPTYPE BIT(8) CONSTANT('01'X);   /* TYPE CODE FOR RPH           *
* DCL RPHWT0 BIT(32) CONSTANT('F7FFFFFF'X);   /* TURN RPHWT OFF */
* DCL RPHWT1 BIT(32) CONSTANT('08000000'X);   /* TURN RPHWT ON */
* DCL RPHPT0 BIT(32) CONSTANT('FBFFFFFF'X);   /* TURN RPHPT OFF */
* DCL RPHPT1 BIT(32) CONSTANT('04000000'X);   /* TURN RPHPT ON */
* DCL RPHPABQ1 BIT(24) CONSTANT('000000'X); /* TURN RPHPBQ GATE */
*/*               COMPONENT RECOVERY AREA                            */
*/*  REVISIONS                                         005 04/09/75  */
*DCL 1  ISTCRA BASED BDY(DWORD),        /* COMPONENT RECOVERY AREA   */
*     2  CRABASIC BDY(WORD),            /* CRA WITHOUT PROCESS CRR   */
*      3 CRAHDR CHAR(8) BDY(WORD),      /* CRA HEADER                */
*        4  CRACRR PTR(31),             /* PTR TO ACTIVE CRR         */
*        4  CRAFRR PTR(31),             /* PTR TO ACTIVE FRR         */
*      3 CRALKACT BIT(32),              /* LOCK LEVEL AND       01S0727
*                                          OWNERSHIP FLAGS           */
*        4  CRALEV32 BIT(1),            /* 1 = LEVEL 32 LOCK HELD    */
*        4  CRALEV31 BIT(1),            /* 1 = LEVEL 31 LOCK HELD    */
*        4  CRALEV30 BIT(1),            /* 1 = LEVEL 30 LOCK HELD    */
*        4  CRALEV29 BIT(1),            /* 1 = LEVEL 29 LOCK HELD    */
*        4  CRALEV28 BIT(1),            /* 1 = LEVEL 28 LOCK HELD    */
*        4  CRALEV27 BIT(1),            /* 1 = LEVEL 27 LOCK HELD    */
*        4  CRALEV26 BIT(1),            /* 1 = LEVEL 26 LOCK HELD    */
*        4  CRALEV25 BIT(1),            /* 1 = LEVEL 25 LOCK HELD    */
*        4  CRALEV24 BIT(1),            /* 1 = LEVEL 24 LOCK HELD    */
*        4  CRALEV23 BIT(1),            /* 1 = LEVEL 23 LOCK HELD    */
*        4  CRALEV22 BIT(1),            /* 1 = LEVEL 22 LOCK HELD    */
*        4  CRALEV21 BIT(1),            /* 1 = LEVEL 21 LOCK HELD    */
*        4  CRALEV20 BIT(1),            /* 1 = LEVEL 20 LOCK HELD    */
*        4  CRALEV19 BIT(1),            /* 1 = LEVEL 19 LOCK HELD    */
*        4  CRALEV18 BIT(1),            /* 1 = LEVEL 18 LOCK HELD    */
*        4  CRALEV17 BIT(1),            /* 1 = LEVEL 17 LOCK HELD    */
*        4  CRALEV16 BIT(1),            /* 1 = LEVEL 16 LOCK HELD    */
*        4  CRALEV15 BIT(1),            /* 1 = LEVEL 15 LOCK HELD    */
*        4  CRALEV14 BIT(1),            /* 1 = LEVEL 14 LOCK HELD    */
*        4  CRALEV13 BIT(1),            /* 1 = LEVEL 13 LOCK HELD    */
*        4  CRALEV12 BIT(1),            /* 1 = LEVEL 12 LOCK HELD    */
*        4  CRALEV11 BIT(1),            /* 1 = LEVEL 11 LOCK HELD    */
*        4  CRALEV10 BIT(1),            /* 1 = LEVEL 10 LOCK HELD    */
*        4  CRALEV09 BIT(1),            /* 1 = LEVEL 9 LOCK HELD     */
*        4  CRALEV08 BIT(1),            /* 1 = LEVEL 8 LOCK HELD     */
*        4  CRALEV07 BIT(1),            /* 1 = LEVEL 7 LOCK HELD     */
*        4  CRALEV06 BIT(1),            /* 1 = LEVEL 6 LOCK HELD     */
*        4  CRALEV05 BIT(1),            /* 1 = LEVEL 5 LOCK HELD     */
*        4  CRALEV04 BIT(1),            /* 1 = LEVEL 4 LOCK HELD     */
*        4  CRALEV03 BIT(1),            /* 1 = LEVEL 3 LOCK HELD     */
*        4  CRALEV02 BIT(1),            /* 1 = LEVEL 2 LOCK HELD     */
*        4  CRALEV01 BIT(1),            /* 1 = LEVEL 1 LOCK HELD     */
*      3 CRAL1PTR PTR(31),              /* PTR TO LEVEL 1 LOCK       */
*      3 CRAL2PTR PTR(31),              /* PTR TO LEVEL 2 LOCK       */
*      3 CRAL3PTR PTR(31),              /* PTR TO LEVEL 3 LOCK       */
*      3 CRAL4PTR PTR(31),              /* PTR TO LEVEL 4 LOCK       */
*      3 CRAL5PTR PTR(31),              /* PTR TO LEVEL 5 LOCK       */
*      3 CRAL6PTR PTR(31),              /* PTR TO LEVEL 6 LOCK       */
*      3 CRAL7PTR PTR(31),              /* PTR TO LEVEL 7 LOCK       */
*      3 CRAL8PTR PTR(31),              /* PTR TO LEVEL 8 LOCK       */
*      3 CRAL9PTR PTR(31),              /* PTR TO LEVEL 9 LOCK       */
*      3 CRALAPTR PTR(31),              /* RESERVED                  */
*/*                                                                  */
*/*   VS1/VS2 EXTENSION                                              */
*/*                                                                  */
*     2  CRARPH CHAR(LENGTH(ISTRPH)),   /* RPH ASSOCIATED WITH  01S0727
*                                          THIS CRH                  */
*     2  CRAPSS CHAR(LENGTH(ISTAPCRR)), /* PSS CRR                   */
*     2  CRAPROCR CHAR(LENGTH(ISTZCRR)) BDY(DWORD), /* PROCESS CRR   */
*     2  CRASVC CHAR(72) BDY(WORD),     /* SERVICE RTN CRA           */
*        3  CRAASCRR CHAR(LENGTH(ISTASCRR)), /* CRR FOR SMS          */
*        3  CRAHSIZ  PTR(31),           /* HEADER SIZE QUED SMS REQ  */
*        3  CRAMASK  PTR(31),           /* PREFIX MASK QUED SMS REQ  */
*        3  CRABUFA  FIXED(31),         /* BUFF QUE FOR FBQ ALLOCATION*
*           4 CRABFTBA BIT(1),          /* NO BUFFERS ALLOCATED YET   *
*     2  CRARSV01 PTR(31),              /* RESERVED                  */
*     2  CRARSV02 PTR(31),              /* RESERVED                  */
*     2  CRACHAIN PTR(31);              /* CHAIN FIELD USED TO QUEUE
*                                          CRA TO PREALLOCATE QUEUE
*                                          WHEN NOT IN USE           */
*DCL CRALMS32 BIT(32) CONSTANT('80000000'X); /* 32ND LEVEL LOCK MASK */
*DCL CRALMS31 BIT(32) CONSTANT('40000000'X); /* 31ST LEVEL LOCK MASK */
*DCL CRALMS30 BIT(32) CONSTANT('20000000'X); /* 30TH LEVEL LOCK MASK */
*DCL CRALMS29 BIT(32) CONSTANT('10000000'X); /* 29TH LEVEL LOCK MASK */
*DCL CRALMS28 BIT(32) CONSTANT('08000000'X); /* 28TH LEVEL LOCK MASK */
*DCL CRALMS27 BIT(32) CONSTANT('04000000'X); /* 27TH LEVEL LOCK MASK */
*DCL CRALMS26 BIT(32) CONSTANT('02000000'X); /* 26TH LEVEL LOCK MASK */
*DCL CRALMS25 BIT(32) CONSTANT('01000000'X); /* 25TH LEVEL LOCK MASK */
*DCL CRALMS24 BIT(32) CONSTANT('00800000'X); /* 24TH LEVEL LOCK MASK */
*DCL CRALMS23 BIT(32) CONSTANT('00400000'X); /* 23RD LEVEL LOCK MASK */
*DCL CRALMS22 BIT(32) CONSTANT('00200000'X); /* 22ND LEVEL LOCK MASK */
*DCL CRALMS21 BIT(32) CONSTANT('00100000'X); /* 21ST LEVEL LOCK MASK */
*DCL CRALMS20 BIT(32) CONSTANT('00080000'X); /* 20TH LEVEL LOCK MASK */
*DCL CRALMS19 BIT(32) CONSTANT('00040000'X); /* 19TH LEVEL LOCK MASK */
*DCL CRALMS18 BIT(32) CONSTANT('00020000'X); /* 18TH LEVEL LOCK MASK */
*DCL CRALMS17 BIT(32) CONSTANT('00010000'X); /* 17TH LEVEL LOCK MASK */
*DCL CRALMS16 BIT(32) CONSTANT('00008000'X); /* 16TH LEVEL LOCK MASK */
*DCL CRALMS15 BIT(32) CONSTANT('00004000'X); /* 15TH LEVEL LOCK MASK */
*DCL CRALMS14 BIT(32) CONSTANT('00002000'X); /* 14TH LEVEL LOCK MASK */
*DCL CRALMS13 BIT(32) CONSTANT('00001000'X); /* 13TH LEVEL LOCK MASK */
*DCL CRALMS12 BIT(32) CONSTANT('00000800'X); /* 12TH LEVEL LOCK MASK */
*DCL CRALMS11 BIT(32) CONSTANT('00000400'X); /* 11TH LEVEL LOCK MASK */
*DCL CRALMS10 BIT(32) CONSTANT('00000200'X); /* 10TH LEVEL LOCK MASK */
*DCL CRALMS09 BIT(32) CONSTANT('00000100'X); /* 9TH LEVEL LOCK MASK  */
*DCL CRALMS08 BIT(32) CONSTANT('00000080'X); /* 8TH LEVEL LOCK MASK  */
*DCL CRALMS07 BIT(32) CONSTANT('00000040'X); /* 7TH LEVEL LOCK MASK  */
*DCL CRALMS06 BIT(32) CONSTANT('00000020'X); /* 6TH LEVEL LOCK MASK  */
*DCL CRALMS05 BIT(32) CONSTANT('00000010'X); /* 5TH LEVEL LOCK MASK  */
*DCL CRALMS04 BIT(32) CONSTANT('00000008'X); /* 4TH LEVEL LOCK MASK  */
*DCL CRALMS03 BIT(32) CONSTANT('00000004'X); /* 3RD LEVEL LOCK MASK  */
*DCL CRALMS02 BIT(32) CONSTANT('00000002'X); /* 2ND LEVEL LOCK MASK  */
*DCL CRALMS01 BIT(32) CONSTANT('00000001'X); /* 1ST LEVEL LOCK MASK  */
*DCL CRACRA   CHAR(4) CONSTANT('CRA ');      /* CHARACTER C.B. ID    */
* /*  CONNECTION SERVICES COMPONENT RECOVERY RECORD                  */
* /* COMPLETED DCR SOLUTIONS                                         */
* /* 1H0540 APRIL 28, 1973 MB                                        */
*/* ZTR4417 JUNE 20, 73 DNM */                                  01S0761
* DCL 1 ISTCNSTA BDY(WORD) BASED,       /* CONNECTION SERVICES  01S0761
*                                          COMPONENT RECOVERY RECORD */
*     2  CNSTPFX CHAR(LENGTH(ISTPFCRR)), /* STANDARD PREFIX     01S0761
*                                          FOR CRR                   */
*     2  CNSTFLDA CHAR(3),              /* TRACE FIELD A - HISTORY   */
*        3  CNSMRINA BIT(1),            /* MASTER ENTERED            */
*        3  CNSAUTHA BIT(1),            /* ABOUT TO CALL AUTHORI-
*                                          SATION EXIT       ZTR4417 */
*        3  CNSAQINA BIT(1),            /* ACQUIRE ENTERED           */
*        3  CNSXREQA BIT(1),            /* ACQUIRE SATISFIED         */
*        3  CNSQREQA BIT(1),            /* ACQUIRE QUEUED            */
*        3  CNSRLINA BIT(1),            /* RELEASE ENTERED           */
*        3  CNSDORLA BIT(1),            /* DOREL REALLOCATION   01S0761
*                                          ENTERED                   */
*        3  CNSTRRLA BIT(1),            /* RELEASE OF ACTIVE    01S0761
*                                          CONNECTION                */
*        3  CNSRQRLA BIT(1),            /* RELEASE QUEUED REQUEST    */
*        3  CNSPSINA BIT(1),            /* PASS ENTERED              */
*        3  CNSACINA BIT(1),            /* ACCEPT ENTERED            */
*        3  CNSLGINA BIT(1),            /* LOGON ENTERED             */
*        3  CNSGBINA BIT(1),            /* PREEMPT ENTERED           */
*        3  CNSCLINA BIT(1),            /* CANCEL ENTERED            */
*        3  CNSCLAQA BIT(1),            /* CANCEL ACQUIRES           */
*        3  CNSTCONA BIT(1),            /* TCONNECT                  */
*        3  CNSACONA BIT(1),            /* ACONNECT                  */
*        3  CNSQUEUA BIT(1),            /* QUEUE                     */
*        3  CNSSEARA BIT(1),            /* SEARCH Q                  */
*        3  CNSGETSA BIT(1),            /* CONNECTION SERVICES  01S0761
*                                          GETSTORE                  */
*        3  CNSFREEA BIT(1),            /* CONNECTION SERVICES  01S0761
*                                          FREESTORE                 */
*        3  CNSACCTA BIT(1),            /* ABOUT TO CALL        01S0761
*                                          ACCOUNTING EXIT           */
*        3  CNSLOG0A BIT(1),            /* LOGON 0                   */
*        3  CNSRSV01 BIT(1),            /* RESERVED                  */
*     2  CNSTFLDB CHAR(3),              /* TRACE FIELD B -      01S0761
*                                          CURRENT ACTIVITY          */
*        3  CNSMRINB BIT(1),                                    01S0761
*        3  CNSAUTHB BIT(1),                                    01S0761
*        3  CNSAQINB BIT(1),                                    01S0761
*        3  CNSXREQB BIT(1),                                    01S0761
*        3  CNSQREQB BIT(1),                                    01S0761
*        3  CNSRLINB BIT(1),                                    01S0761
*        3  CNSDORLB BIT(1),                                    01S0761
*        3  CNSTRRLB BIT(1),                                    01S0761
*        3  CNSRQRLB BIT(1),                                    01S0761
*        3  CNSPSINB BIT(1),                                    01S0761
*        3  CNSACINB BIT(1),                                    01S0761
*        3  CNSLGINB BIT(1),                                    01S0761
*        3  CNSGBINB BIT(1),                                    01S0761
*        3  CNSCLINB BIT(1),                                    01S0761
*        3  CNSCLAQB BIT(1),                                    01S0761
*        3  CNSTCONB BIT(1),                                    01S0761
*        3  CNSACONB BIT(1),                                    01S0761
*        3  CNSQUEUB BIT(1),                                    01S0761
*        3  CNSSEARB BIT(1),                                    01S0761
*        3  CNSGETSB BIT(1),                                    01S0761
*        3  CNSFREEB BIT(1),                                    01S0761
*        3  CNSACCTB BIT(1),                                    01S0761
*        3  CNSLOG0B BIT(1),                                    01S0761
*        3  CNSRSV05 BIT(1);                                    01S0761
*/*    CRR FOR VARY                                                  */
*/*  REVISIONS                                         009 03/24/75  */
*/*                                                                  */
* DCL 1 ISTVYCRR BDY(WORD) BASED,       /* CRR FOR SSCP              */
*     2  VYCCNS   CHAR(LENGTH(ISTCNSTA)), /* RESERVE SPACE FOR  01S0762
*                                          CONN. SVCS. AUDIT         */
*     2  VYCAUDIT,                      /* AUDIT TRAIL FOR SSCP      */
*        3  VYCNTRD CHAR(12),           /* LIST OF MODULES IN SSCP   */
*                                       /* 1 = ENTERED               */
*           4  NINCCL BIT(1),           /* MODULE = ISTINCCL         */
*           4  NINCIO BIT(1),           /* MODULE = ISTINCIO         */
*           4  NINCDL BIT(1),           /* MODULE = ISTINCDL         */
*           4  NINCMY BIT(1),           /* MODULE = ISTINCMY         */
*           4  NINCMD BIT(1),           /* MODULE = ISTINCMD         */
*           4  NINCVI BIT(1),           /* MODULE = ISTINCVI         */
*           4  NINCVA BIT(1),           /* MODULE = ISTINCVA         */
*           4  NINCLF BIT(1),           /* MODULE = ISTINCLF         */
*           4  NINCR1 BIT(1),           /* MODULE = ISTINCR1         */
*           4  NINCSM BIT(1),           /* MODULE = ISTINCSM         */
*           4  NINCFS BIT(1),           /* MODULE = ISTINCFS         */
*           4  NINCVX BIT(1),           /* MODULE = ISTINCVX         */
*           4  NINCVP BIT(1),           /* MODULE = ISTINCVP         */
*           4  NINCVS BIT(1),           /* MODULE = ISTINCVS         */
*           4  NINCVN BIT(1),           /* MODULE = ISTINCVO         */
*           4  NINCMS BIT(1),           /* MODULE = ISTINCMS         */
*           4  NINCR2 BIT(1),           /* MODULE = ISTINCR2         */
*           4  NINCIP BIT(1),           /* MODULE = ISTINCIP         */
*           4  NINCD1 BIT(1),           /* MODULE = ISTINCD1         */
*           4  NINCD2 BIT(1),           /* MODULE = ISTINCD2         */
*           4  NINCD3 BIT(1),           /* MODULE = ISTINCD3         */
*           4  NINCD4 BIT(1),           /* MODULE = ISTINCD4         */
*           4  NINCD5 BIT(1),           /* MODULE = ISTINCD5         */
*           4  NINCD6 BIT(1),           /* MODULE = ISTINCD6         */
*           4  NINCD7 BIT(1),           /* MODULE = ISTINCD7         */
*           4  NINCD8 BIT(1),           /* MODULE = ISTINCD8         */
*           4  NINCD9 BIT(1),           /* MODULE = ISTINCD9         */
*           4  NINCE0 BIT(1),           /* MODULE = ISTINCE0         */
*           4  NINCE2 BIT(1),           /* MODULE = ISTINCE2         */
*           4  NINCE3 BIT(1),           /* MODULE = ISTINCE3         */
*           4  NINCE4 BIT(1),           /* MODULE = ISTINCE4         */
*           4  NINCFM BIT(1),           /* MODULE = ISTINCFM         */
*           4  NINCF1 BIT(1),           /* MODULE = ISTINCF1         */
*           4  NINCF3 BIT(1),           /* MODULE = ISTINCF3         */
*           4  NINCF4 BIT(1),           /* MODULE = ISTINCF4         */
*           4  NINCL0 BIT(1),           /* MODULE = ISTINCL0         */
*           4  NINCL1 BIT(1),           /* MODULE = ISTINCL1         */
*           4  NINCL2 BIT(1),           /* MODULE = ISTINCL2         */
*           4  NINCL3 BIT(1),           /* MODULE = ISTINCL3         */
*           4  NINCL4 BIT(1),           /* MODULE = ISTINCL4         */
*           4  NINCL5 BIT(1),           /* MODULE = ISTINCL5         */
*           4  NINCL6 BIT(1),           /* MODULE = ISTINCL6         */
*           4  NINCL7 BIT(1),           /* MODULE = ISTINCL7         */
*           4  NINCL8 BIT(1),           /* MODULE = ISTINCL8         */
*           4  NINCS1 BIT(1),           /* MODULE = ISTINCS1         */
*           4  NINCUM BIT(1),           /* MODULE = ISTINCUM         */
*           4  NINCU0 BIT(1),           /* MODULE = ISTINCU0          *
*           4  NINCU1 BIT(1),           /* MODULE = ISTINCU1         */
*           4  NINCU2 BIT(1),           /* MODULE = ISTINCU2         */
*           4  NINCU3 BIT(1),           /* MODULE = ISTINCU3         */
*           4  NINCU4 BIT(1),           /* MODULE = ISTINCU4         */
*           4  NINCU5 BIT(1),           /* MODULE = ISTINCU5         */
*           4  NINCU6 BIT(1),           /* MODULE = ISTINCU6         */
*           4  NINCU7 BIT(1),           /* MODULE = ISTINCU7         */
*           4  NINCU8 BIT(1),           /* MODULE = ISTINCU8         */
*           4  NINCV2 BIT(1),           /* MODULE = ISTINCV2         */
*           4  NINCV3 BIT(1),           /* MODULE = ISTINCV3         */
*           4  NINCV4 BIT(1),           /* MODULE = ISTINCV4         */
*           4  NINCV5 BIT(1),           /* MODULE = ISTINCV5         */
*           4  NINCV6 BIT(1),           /* MODULE = ISTINCV6         */
*           4  NINCV7 BIT(1),           /* MODULE = ISTINCV7         */
*           4  NINCV8 BIT(1),           /* MODULE = ISTINCV8         */
*           4  NINCV9 BIT(1),           /* MODULE = ISTINCV9         */
*           4  NINCW0 BIT(1),           /* MODULE = ISTINCW0         */
*           4  NINCW2 BIT(1),           /* MODULE = ISTINCW2         */
*           4  NINCW4 BIT(1),           /* MODULE = ISTINCW4         */
*           4  NINCW5 BIT(1),           /* MODULE = ISTINCW5         */
*           4  NINCW6 BIT(1),           /* MODULE = ISTINCW6         */
*           4  NINCW7 BIT(1),           /* MODULE = ISTINCW7         */
*           4  NINCW8 BIT(1),           /* MODULE = ISTINCW8         */
*           4  NINCW9 BIT(1),           /* MODULE = ISTINCW9         */
*           4  NINCX0 BIT(1),           /* MODULE = ISTINCX0         */
*           4  NINCX1 BIT(1),           /* MODULE = ISTINCX1         */
*           4  NINCX2 BIT(1),           /* MODULE = ISTINCX2         */
*           4  NINCX3 BIT(1),           /* MODULE = ISTINCX3         */
*           4  NINCX6 BIT(1),           /* MODULE = ISTINCX6         */
*           4  NINCX7 BIT(1),           /* MODULE = ISTINCX7         */
*           4  NINCX8 BIT(1),           /* MODULE = ISTINCX8         */
*           4  NINCX9 BIT(1),           /* MODULE = ISTINCX9         */
*           4  NINCUA BIT(1),           /* MODULE = ISTINCUA         */
*           4  NINCUB BIT(1),           /* MODULE = ISTINCUB         */
*           4  NINCUQ BIT(1),           /* MODULE = ISTINCUQ         */
*           4  NINCE1 BIT(1),           /* MODULE = ISTINCE1         */
*           4  NINCE5 BIT(1),           /* MODULE = ISTINCE5         */
*           4  NINCE6 BIT(1),           /* MODULE = ISTINCE6         */
*           4  NINCE7 BIT(1),           /* MODULE = ISTINCE7         */
*           4  NINCE8 BIT(1),           /* MODULE = ISTINCE8         */
*           4  NINCR3 BIT(1),           /* MODULE = ISTINCR3         */
*           4  NINCR5 BIT(1),           /* MODULE = ISTINCR5         */
*           4  NINCVO BIT(1),           /* MODULE = ISTINCVO         */
*           4  NINCE9 BIT(1),           /* MODULE = ISTINCE9         */
*           4  NINCFE BIT(1),           /* MODULE = ISTINCFE         */
*           4  VYCRSV01 BIT(4),         /* RESERVED                  */
*        3  VYCCRT CHAR(12),            /* LIST OF SSCP MODULES      */
*                                       /* 2 =  RUNNING              */
*           4  CINCCL BIT(1),           /* MODULE = ISTINCCL         */
*           4  CINCIO BIT(1),           /* MODULE = ISTINCIO         */
*           4  CINCDL BIT(1),           /* MODULE = ISTINCDL         */
*           4  CINCMY BIT(1),           /* MODULE = ISTINCMY         */
*           4  CINCMD BIT(1),           /* MODULE = ISTINCMD         */
*           4  CINCVI BIT(1),           /* MODULE = ISTINCVI         */
*           4  CINCVA BIT(1),           /* MODULE = ISTINCVA         */
*           4  CINCLF BIT(1),           /* MODULE = ISTINCLF         */
*           4  CINCR1 BIT(1),           /* MODULE = ISTINCR1         */
*           4  CINCSM BIT(1),           /* MODULE = ISTINCSM         */
*           4  CINCFS BIT(1),           /* MODULE = ISTINCFS         */
*           4  CINCVX BIT(1),           /* MODULE = ISTINCVX         */
*           4  CINCVP BIT(1),           /* MODULE = ISTINCVP         */
*           4  CINCVS BIT(1),           /* MODULE = ISTINCVS         */
*           4  CINCVN BIT(1),           /* MODULE = ISTINCVO         */
*           4  CINCMS BIT(1),           /* MODULE = ISTINCMS         */
*           4  CINCR2 BIT(1),           /* MODULE = ISTINCR2         */
*           4  CINCIP BIT(1),           /* MODULE = ISTINCIP         */
*           4  CINCD1 BIT(1),           /* MODULE = ISTINCD1         */
*           4  CINCD2 BIT(1),           /* MODULE = ISTINCD2         */
*           4  CINCD3 BIT(1),           /* MODULE = ISTINCD3         */
*           4  CINCD4 BIT(1),           /* MODULE = ISTINCD4         */
*           4  CINCD5 BIT(1),           /* MODULE = ISTINCD5         */
*           4  CINCD6 BIT(1),           /* MODULE = ISTINCD6         */
*           4  CINCD7 BIT(1),           /* MODULE = ISTINCD7         */
*           4  CINCD8 BIT(1),           /* MODULE = ISTINCD8         */
*           4  CINCD9 BIT(1),           /* MODULE = ISTINCD9         */
*           4  CINCE0 BIT(1),           /* MODULE = ISTINCE0         */
*           4  CINCE2 BIT(1),           /* MODULE = ISTINCE2         */
*           4  CINCE3 BIT(1),           /* MODULE = ISTINCE3         */
*           4  CINCE4 BIT(1),           /* MODULE = ISTINCE4         */
*           4  CINCFM BIT(1),           /* MODULE = ISTINCFM         */
*           4  CINCF1 BIT(1),           /* MODULE = ISTINCF1         */
*           4  CINCF3 BIT(1),           /* MODULE = ISTINCF3         */
*           4  CINCF4 BIT(1),           /* MODULE = ISTINCF4         */
*           4  CINCL0 BIT(1),           /* MODULE = ISTINCL0         */
*           4  CINCL1 BIT(1),           /* MODULE = ISTINCL1         */
*           4  CINCL2 BIT(1),           /* MODULE = ISTINCL2         */
*           4  CINCL3 BIT(1),           /* MODULE = ISTINCL3         */
*           4  CINCL4 BIT(1),           /* MODULE = ISTINCL4         */
*           4  CINCL5 BIT(1),           /* MODULE = ISTINCL5         */
*           4  CINCL6 BIT(1),           /* MODULE = ISTINCL6         */
*           4  CINCL7 BIT(1),           /* MODULE = ISTINCL7         */
*           4  CINCL8 BIT(1),           /* MODULE = ISTINCL8         */
*           4  CINCS1 BIT(1),           /* MODULE = ISTINCS1         */
*           4  CINCUM BIT(1),           /* MODULE = ISTINCUM         */
*           4  CINCU0 BIT(1),           /* MODULE = ISTINCU0          *
*           4  CINCU1 BIT(1),           /* MODULE = ISTINCU1         */
*           4  CINCU2 BIT(1),           /* MODULE = ISTINCU2         */
*           4  CINCU3 BIT(1),           /* MODULE = ISTINCU3         */
*           4  CINCU4 BIT(1),           /* MODULE = ISTINCU4         */
*           4  CINCU5 BIT(1),           /* MODULE = ISTINCU5         */
*           4  CINCU6 BIT(1),           /* MODULE = ISTINCU6         */
*           4  CINCU7 BIT(1),           /* MODULE = ISTINCU7         */
*           4  CINCU8 BIT(1),           /* MODULE = ISTINCU8         */
*           4  CINCV2 BIT(1),           /* MODULE = ISTINCV2         */
*           4  CINCV3 BIT(1),           /* MODULE = ISTINCV3         */
*           4  CINCV4 BIT(1),           /* MODULE = ISTINCV4         */
*           4  CINCV5 BIT(1),           /* MODULE = ISTINCV5         */
*           4  CINCV6 BIT(1),           /* MODULE = ISTINCV6         */
*           4  CINCV7 BIT(1),           /* MODULE = ISTINCV7         */
*           4  CINCV8 BIT(1),           /* MODULE = ISTINCV8         */
*           4  CINCV9 BIT(1),           /* MODULE = ISTINCV9         */
*           4  CINCW0 BIT(1),           /* MODULE = ISTINCW0         */
*           4  CINCW2 BIT(1),           /* MODULE = ISTINCW2         */
*           4  CINCW4 BIT(1),           /* MODULE = ISTINCW4         */
*           4  CINCW5 BIT(1),           /* MODULE = ISTINCW5         */
*           4  CINCW6 BIT(1),           /* MODULE = ISTINCW6         */
*           4  CINCW7 BIT(1),           /* MODULE = ISTINCW7         */
*           4  CINCW8 BIT(1),           /* MODULE = ISTINCW8         */
*           4  CINCW9 BIT(1),           /* MODULE = ISTINCW9         */
*           4  CINCX0 BIT(1),           /* MODULE = ISTINCX0         */
*           4  CINCX1 BIT(1),           /* MODULE = ISTINCX1         */
*           4  CINCX2 BIT(1),           /* MODULE = ISTINCX2         */
*           4  CINCX3 BIT(1),           /* MODULE = ISTINCX3         */
*           4  CINCX6 BIT(1),           /* MODULE = ISTINCX6         */
*           4  CINCX7 BIT(1),           /* MODULE = ISTINCX7         */
*           4  CINCX8 BIT(1),           /* MODULE = ISTINCX8         */
*           4  CINCX9 BIT(1),           /* MODULE = ISTINCX9         */
*           4  CINCUA BIT(1),           /* MODULE = ISTINCUA         */
*           4  CINCUB BIT(1),           /* MODULE = ISTINCUB         */
*           4  CINCUQ BIT(1),           /* MODULE = ISTINCUQ         */
*           4  CINCE1 BIT(1),           /* MODULE = ISTINCE1         */
*           4  CINCE5 BIT(1),           /* MODULE = ISTINCE5         */
*           4  CINCE6 BIT(1),           /* MODULE = ISTINCE6         */
*           4  CINCE7 BIT(1),           /* MODULE = ISTINCE7         */
*           4  CINCE8 BIT(1),           /* MODULE = ISTINCE8         */
*           4  CINCR3 BIT(1),           /* MODULE = ISTINCR3         */
*           4  CINCR5 BIT(1),           /* MODULE = ISTINCR5         */
*           4  CINCVO BIT(1),           /* MODULE = ISTINCVO         */
*           4  CINCE9 BIT(1),           /* MODULE = ISTINCE9         */
*           4  CINCFE BIT(1),           /* MODULE = ISTINCFE         */
*           4  VYCRSV03 BIT(4),         /* RESERVED                  */
*     2  VYCRRSAV CHAR(72),             /* SAVE AREA USED BY ISTINCIP*/
*                                       /* TO CALL ISTINCW3          */
*     2  VYCRRCW3 CHAR(8),              /* PARAM LIST USED BY        */
*                                       /* ISTINCIP TO CALL ISTINCW3 */
*     2  VYCRSV04 CHAR(2),              /* RESERVED                  */
*     2  VYCRSV02 PTR(31);              /* RESERVED                  */
*DCL TIDINCDL BIT(8) CONSTANT('00'X);   /* THREAD ID FOR ISTINCDL    */
*DCL TIDINCMY BIT(8) CONSTANT('01'X);   /* THREAD ID FOR ISTINCMY    */
*DCL TIDINCCL BIT(8) CONSTANT('02'X);   /* THREAD ID FOR ISTINCCL    */
*DCL TIDINCFE BIT(8) CONSTANT('04'X);   /* THREAD ID FOR ISTINCFE    */
*/* PROCESS ANCHOR BLOCK                                              *
*/*  REVISIONS                                         002 11/16/75  */
*/*       APAR      OZ19540    DCL PABSSN ABNORMAL           @ZA19540*/
*DCL  1  ISTPAB BDY(DWORD) BASED,                               01S0767
*       2  PABWQCHN CHAR(8) BDY(DWORD), /* CPS SWAP FIELD FOR NEQ&CHN *
*        3  PABWEQA PTR(31) BDY(WORD), /* WORK ELEMENT QUEUE ADDRESS  *
*           4  PABWEQG BIT(1),         /* GATING BIT                  *
*           4  PABRSV01 BIT(7),        /* RESERVED                    *
*           4  PABWEQP PTR(24),        /* WKEL PTR                    *
*        3  PABCHAIN PTR(31) BDY(WORD), /* APS CHAIN                  *
*           4  PABCHNG BIT(1),         /* GATING BIT                  *
*           4  PABRESCH BIT(1),        /* RESCHEDULE PAB AT     01S0767
*                                         TPEXIT                      *
*           4  PABCDP BIT(1),          /* CLOSE DST/CHANGE IN PROGRESS*
*           4  PABUNCON BIT(1),        /* UNCONDITIONALLY RESCHEDULE
*                                         PAB AT TPEXIT               *
*           4  PABRESET BIT(1),        /* RESET ISSUED ON THIS PAB    *
*           4  PABRUNNG BIT(1),        /* PAB RUNNING                 *
*           4  PABDELAY BIT(1),        /* DELAY OPTION USED           *
*           4  PABRSV02 BIT(1),        /* RESERVED                    *
*           4  PABCHNGP PTR(24),       /* PSS CHAIN PTR               *
*        2  PABOFFST PTR(8),           /* OFFSET FROM CONTROL BLOCK   *
*        2  PABDVTA PTR(24),           /* DVT ADDRESS                 *
*        2  PABRPHFG PTR(31),          /* SCHED FLAGS AND RPH         *
*           3  PABFLAGS BIT(8),        /* SCHEDULING FLAGS            *
*              4  PABAPYP BIT(1),      /* APPLICATION IS A USER EXIT  *
*              4  PABPRIOR BIT(1),     /* IMMEDIATE PRIORITY          *
*              4  PABNORPR BIT(1),     /* NORMAL PRIORITY -           *
*                                      /* RESCHEDUALABLE              *
*              4  PABDYNAM BIT(1),     /* DYNAMIC                     *
*              4  PABSSN BIT(1) ABNL,  /* SYSTEM SERVICES    @ZA19540 *
*              4  PABERLCK BIT(1),     /* PAB ERROR LOCK FLAG         *
*                 5  PABERRLK BIT(1),  /* ERROR LOCK                  *
*                    6  PABERLOK BIT(1), /* ERROR LOCK                *
*/*    ABNORMAL TO ALLOW VARY COMPARE AND SWAP                        *
*              4  PABINHBT BIT(1) ABNL,/* 1=INHIBIT TRAFFIC,0=NO      *
*              4  PABNODQ BIT(1),      /* DO NOT DEQ WORK ELEMENT     *
*           3  PABRPHA PTR(24);        /* RPL HEADER ADDRESS          *
*DCL PABWEQG0 BIT(32) CONSTANT('7FFFFFFF'X),  /* TURN PABWEQG OFF     *
*    PABWEQG1 BIT(32) CONSTANT('80000000'X),  /* TURN PABWEQG ON      *
*    PABCHNG0 BIT(32) CONSTANT('7FFFFFFF'X),  /* TURN PABCHNG OFF     *
*    PABCHNG1 BIT(32) CONSTANT('80000000'X),  /* TURN PABCHNG ON      *
*    PABRESC0 BIT(32) CONSTANT('BFFFFFFF'X),  /* TURN PABRESCH OFF    *
*    PABRESC1 BIT(32) CONSTANT('40000000'X),  /* TURN PABRESCH ON     *
*    PABCDP0  BIT(32) CONSTANT ('DFFFFFFF'X), /* TURN PABCDP OFF      *
*    PABCDP1  BIT(32) CONSTANT ('20000000'X), /* TURN PABCDP ON       *
*    PABERLK0 BIT(32) CONSTANT('FBFFFFFF'X),  /* TURN PABERRLK ON     *
*    PABERLK1 BIT(32) CONSTANT('04000000'X),  /* TURN PABERRLK OFF    *
*    PABUNCO0 BIT(32) CONSTANT('EFFFFFFF'X),  /* TURN PABUNCON OFF    *
*    PABUNCO1 BIT(32) CONSTANT('10000000'X),  /* TURN PABUNCON ON     *
*    PABPRIR0 BIT(32) CONSTANT('BFFFFFFF'X),  /* TURN PAB PRIOR OFF   *
*    PABPRIR1 BIT(32) CONSTANT('40000000'X),  /* TURN PAB PRIOR ON    *
*    PABRST0  BIT(32) CONSTANT('F7FFFFFF'X),  /* TURN PABRESET OFF    *
*    PABRST1  BIT(32) CONSTANT('08000000'X),  /* TURN PABRESET ON     *
*    PABDLAY0 BIT(32) CONSTANT('FDFFFFFF'X),  /* TURN PAB DELAY OFF   *
*    PABDLAY1 BIT(32) CONSTANT('02000000'X);  /* TURN PAB DELAY ON    *
*              /* DYNAMIC PAB 1K633 */                          01S0769
* /* 1K0997 JAN 20, 1973  MB   */                               01S0769
* /* 1K1142 MAR 03, 1973  MB   */                               01S0769
* DCL 1 ISTDYPAB BDY(DWORD) BASED, /* LEVEL 1 DECLARE 1K633 */  01S0769
*       2  DYPTYPE CHAR(1), /* CONTROL BLOCK TYPE CODE 1K633 */ 01S0769
*       2  DYPLNGTH PTR(8), /* CONTROL BLOCK LENGTH (BYTES)  1K633 */
*       2 DYPFLGS CHAR(2),     /* FLAGS 1K633 */                01S0769
*       2 DYPCHAIN PTR(31),    /* CHAIN POINTER 1K633 */        01S0769
*       2 DYPTSKID PTR(31),    /* TASKID OR PTR TO PSS TABLES 1K633 */
*       2  DYPRSV01 PTR(31),   /* RESERVED TO PRESERVE ALIGNMENT
*                                                             1K0997 */
*       2 DYPPAB CHAR(LENGTH(ISTPAB)) BDY(DWORD); /* LENGTH OF 1K0997
*                                                    PAB         */
*DCL DYTYP   BIT(8) CONSTANT ('11'X);   /* TYPE           1K1142 */
*/*  REVISIONS                                             03/04/77   *
*DCL ATCLCPTR PTR LOCATION(1032);      /* POINTER TO ATCVT            *
*DCL  1  ISTATCVT BDY(DWORD) BASED,                             01S0772
*        2  ATCCOM BDY(WORD),          /* SYSTEM INDEPENDENT FIELDS   *
*           3  ATCSTAT CHAR(4),        /* VTAM  STATUS INDICATORS     *
*              4  ATCSTAT1 CHAR(1),    /* VTAM  STATUS BYTE 1         *
*                 5  ATCSTART BIT(1),  /* VTAM  IS STARTING           *
*                 5  ATCACTIV BIT(1),  /* VTAM  IS ACTIVE             *
*                 5  ATCSNHLT BIT(1),  /* VTAM  SESSION HALT          *
*                 5  ATCQKHLT BIT(1),  /* VTAM  QUICK HALT            *
*                 5  ATCNETSL BIT(1),  /* NETSOL=YES SPECIFIED ON CMD *
*                 5  ATCINHLT BIT(1),  /* INTERNAL VTAM HALT QUICK    *
*                 5  ATCMDHLT BIT(1),  /* VTAM CMD PROC HALTED        *
*                 5 * BIT(1),          /* RESERVED                    *
*              4  ATCSTFLG BIT(8),     /* STORAGE MANAGEMENT FLAGS    *
*                 5  ATCHSDMF BIT(1),  /* SYSTEM SLOW DOWN FLAG       *
*              4  ATCPOFLG BIT(8),     /* PROGRAM OPERATOR            *
*                                      /* INTERFACE FLAGS             *
*                 5 ATCPOUNS BIT(1),   /* APPLICATION AUTHORIZED TO   *
*                                      /* RECEIVE UNSOLICITED MESSAGES*
*                                      /* 1 = YES                     *
*                 5 *        BIT(7),   /* RESERVED                    *
*              4  ATCSTAT4 CHAR(1),    /* VTAM  STATUS BYTE 4         *
*                 5  ATCPRTAT BIT(1),  /* 1 = TRACE PRINT ACTIVE,
*                                         0 = NOT ACTIVE              *
*                 5  ATCTPRT BIT(1),   /* WHEN 1, TPRINT IN PROCESS   *
*                 5  ATCMTST BIT(1),   /* WHEN 1, MODIFY TEST IN
*                                         PROCESS                     *
*                 5  ATCNCSD BIT(1),   /* NCS QUIESCED DURING HALT    *
*                 5  ATCVTTRC BIT(1),  /* VTAM TRACE, 1=ACTIVE        *
*                 5  ATCRSV04 BIT(3),  /* RESERVED                    *
*           3  ATCAPI PTR(31),         /* ADDR OF API ROUTINE         *
*           3  ATCDCFRR PTR(31),       /* POINTER TO FRR OF CONTROL
*                                         LAYER,INITIALIZED BY OPENDST*
*           3  ATCRDT PTR(31),         /* POINTER TO FIRST RDT        *
*           3  ATCSRT PTR(31),         /* POINTER TO SRT DIRECTORY    *
*           3  ATCASCHD PTR(31),       /* POINTER TO AP SCHEDULER     *
*           3  ATCECMOD CHAR(4),       /* ECB FOR MODIFY COMMAND PROC.*
*           3  ATCMODQ PTR(31),        /* POINTER FOR OUTPUT QUEUE    *
*                                      /* FOR MODIFY COMMAND          *
*           3  ATCECHLT CHAR(4),       /* ECB FOR HALT COMMAND        *
*           3  ATCHALTQ PTR(31),       /* POINTER TO OUTPUT QUEUE     *
*                                      /* FOR HALT COMMAND            *
*           3  ATCECVRY CHAR(4),       /* ECB FOR VARY COMMAND PROC.  *
*           3  ATCVARYQ PTR(31),       /* POINTER TO OUTPUT QUEUE     *
*                                      /* FOR VARY COMMAND            *
*           3  ATCECDSP CHAR(4),       /* ECB FOR DISPLAY COMMAND     *
*           3  ATCDSPLQ PTR(31),       /*  POINTER TO OUTPUT QUEUE    *
*                                      /* FOR DISPLAY COMMAND         *
*           3  ATCOCHA PTR(31),        /* POINTER TO OCT HEADER       *
*           3  ATCECSES CHAR(4),       /* ECB TO HALT SESSION MODE    *
*           3  ATCECVRQ CHAR(4),       /* ERP ECB FOR VARY REQ. INFO. *
*                                      /* REQUEST NOTIFICATION        *
*           3  ATCVPARM PTR(31),       /* ADDR OF VARY PARAMETERS     *
*           3  ATCECOPC CHAR(4),       /* ECB TOINDICATE OPERATOR     *
*                                      /* CONTROL PROCESSING COMPLETE *
*           3  ATCECNET CHAR(4),       /* ERP ECB FOR NETWORK         *
*                                      /* CONFIGURATION REQUEST       *
*           3  ATCECPRM PTR(31),       /* POINTER TO QAB FOR ERP'S    *
*                                      /* ECB PARAMETERS              *
*           3  ATCHLTMS PTR(31),       /* POINTER TO HALT COMMAND     *
*                                      /* OR HALT RETURN MESSAGE      *
*           3  ATCFSB PTR(31),         /* PTR TO FEEDBACK STATUS      *
*                                      /* BLOCK                       *
*           3  ATCFRSCH PTR(31),       /* POINTER TO FEEDBACK         *
*                                      /* ROUTINE SCHEDULER           *
*           3  ATCRDTH PTR(31),        /*  POINTER RDT HEADER         *
*           3  ATCACCTA PTR(31),       /* POINTER TO INSTALLATION     *
*                                      /* ACCOUNTING ROUTINE          *
*           3  ATCAUTHA PTR(31),       /* POINTER TO INSTALLATION     *
*                                      /* AUTHORISATION ROUTINE       *
*           3  ATCPTCHA PTR(31),       /* PTR TO VTAM PATCH AREA      *
*           3  ATCCONFT PTR(31),       /* POINTER TO VTAM             *
*                                      /* CONFIGURATION TABLE         *
*           3  ATCFDVT PTR(31),        /* PTR TO FIRST DVT FOR O/C    *
*           3  ATCFEPT PTR(31),        /* PTR TO FIRST EPT FOR O/C    *
*           3  ATCDVTPT PTR(31),       /* ADDR OF LOAD MOD FOR        *
*                                      /* TYPE=VTAM TRACING           *
*           3  ATCBPDA PTR(31),        /* PTR TO BUFFER POOL DIRECTORY*
*           3  ATCADD PTR(31),         /* POINTER TO ADD PROCEDURE    *
*           3  ATCREMOV PTR(31),       /* POINTER TO REMOVE PROCEDURE *
*           3  ATCIOTRC PTR(31),       /*  POINTER TO I/O TRACE       *
*                                      /* PROCEDURE                   *
*              4 ATCTHTRC PTR(31),     /* ADDR OF TH TRACE ROUTINE    *
*                5 ATCTPBUF PTR(31),   /* TPIOS BUFFER TRACE(ISTRARTP)*
*           3  ATCBFTRC PTR(31),       /* PTR TO BUFFER TRACE         *
*                                      /* PROCEDURE                   *
*           3  ATCFBRPH PTR(31),       /* ADDR OF FEEDBACK PROC RPH   *
*           3  ATCBLDLA PTR(31),       /* ADDR OF BLDL ROUTINE        *
*           3  ATCALOAD PTR(31),       /* ADDR OF ALOAD ROUTINE       *
*           3  ATCREADA PTR(31),       /* ADDR OF SOURCE READ ROUTINE *
*           3  ATCGTSTR PTR(31),       /* ADDR OF GETSTOR ROUTINE     *
*           3  ATCFRSTR PTR(31),       /* ADDR OF FREESTOR ROUTINE    *
*           3  ATCSTMA PTR(31),        /* ADDR OF SM INITIALIZATION   *
*                                      /* ROUTINE                     *
*           3  ATCACDA PTR(31),        /* ADDR OF FIRST ACDEB         *
*           3  ATCSMRQ PTR(31),        /* ADDR OF REQUEST STORAGE     *
*                                      /* ROUTINE                     *
*           3  ATCSMQU PTR(31),        /* ADDR OF QUEUE REQUEST RTNE
*                                         - DOS ONLY                  *
*           3  ATCSMRS PTR(31),        /* ADDR OF RELEASE STORAGE     *
*                                      /* ROUTINE                     *
*           3  ATCSMRC PTR(31),        /* ADDR OF RECOVER STORAGE     *
*                                      /* ROUTINE  - DOS ONLY         *
*           3  ATCSMBQ PTR(31),        /* PTR TO Q'ED REQ. SMS RTN.   *
*           3  ATCFIRA PTR(31),        /* ADDR OF FEEDBACK INITIATION *
*                                      /* RPH                         *
*           3  ATCSRTAD PTR(31),       /* PTR TO SRTADD ROUTINE       *
*           3  ATCSRTDF PTR(31),       /* PTR TO SRTDELE ROUTN        *
*           3  ATCDCC60 PTR(31),       /* PTR TO ISTDCC60 - CTL. LAYER
*                                         MOVE TO USER AREA           *
*           3  ATCDCC61 PTR(31),       /* PTR TO ISTDCC61 - CTL. LAYER
*                                         MOVE FIXED TO PAGABLE       *
*/*  BEGIN 'ANY' DVT                                                  *
*           3  ATCNERST PTR(31),       /* PTR TO ISTDCC00 - REQUEST-ST*
*           3  ATCNERCV PTR(31),       /* PTR TO ISTRCC21-RECEIVE OB  *
*           3  ATCNERNE PTR(31),      /* PTR TO ISTDCC25 - READ-ANY   *
*           3  ATCNERFN PTR(31),      /* PTR TO ISTDCC02 - REQUEST-FN *
*/*  END 'ANY' DVT                                                    *
*           3  ATCAPOST PTR(31),      /* PTR TO VTAM  POST ROUTINE    *
*           3  ATCVTMID CHAR(2),      /* HOST MAJOR NODE I.D.         *
*           3  ATCRSV11 CHAR(2),      /* RESERVED                     *
*           3 ATCRCC63 PTR(31),  /* HSKPANYQ POINTER                  *
*           3 ATCRCC26 PTR(31),  /* SEND RESPONSE POINTER             *
*           3 ATCRCC65 PTR(31),  /* SET RPL POINTER                   *
*           3  ATCNESAL PTR(31),      /* PTR TO ISTDCC24 - SOLICIT-ALL*
*           3  ATCNERAP PTR(31),       /* PTR TO ISTDCC85 - READ ANY
*                                         PURGE                       *
*           3 ATCACTRM FIXED(15),     /* COUNT OF ACTIVE TERMINALS    *
*           3 ATCCIDM BIT(16),        /* CID MASK                     *
*           3 ATCMSGSP BIT(8), /* RESERVED FOR MESAGE SURPRESSION     *
*         2 ATCMAXID PTR(8),   /* MAXIMUM NUMBER OF MAJOR NODES, 0 =
*                                 NUMBER OF ENTRIES IN THE MNT        *
*         2 ATCRSV16 CHAR(2),  /* NOT USED                            *
*         2 ATCMNT PTR(31),    /*PTR TO MAJOR NODE TABLE -SET BY SYS.
*                                DEF. REF. BY ISTSDCCB (CBDEF), 01S0772
*                                ISTSDCCI (CINDEXY)                   *
*         2 ATCCDADD PTR(31),  /*PTR TO CIDADD ROUTINE ISTSDCCA 01S0772
*                                 REF. BY CIDCTL MACRO                *
*         2 ATCCDDEL PTR(31),  /*PTR TO CIDDEL ROUTINE ISTSDCCD 01S0772
*                                 REF. BY CIDCTL MACRO                *
*         2 ATCCDFND PTR(31),  /*PTR TO CIDFND ROUTINE IATSDCCF 01S0772
*                                 REF. BY CIDCTL MACRO                *
*         2 ATCESC01 PTR(31),  /*PTR TO ESC01                         *
*         2 ATCESC02 PTR(31),  /*PTR TO ESC02                         *
*         2 ATCCSMR PTR(31),        /* PTR TO CONNECTION SERVICES     *
*                                   /*  MASTER ROUTINE                *
*           3 ATCCSMA PTR(31),      /* PTR TO CONNECTION SERVICES
*                                      MASTER ROUTINE                 *
*         2 ATCOCRT PTR(31),        /* PTR TO OPEN/CLOSE ROUTINE      *
*         2 ATCUEP  PTR(31),        /* POINTER TO USER EXIT           *
*         2 ATCSHRTN CHAR(8),       /* NAME OF VTAM  SHARED RTN       *
*                                   /*  TO BE LOADED                  *
*         2 ATCSHRFG BIT(8),        /* ATTRIBUTE FLAGS                *
*           3 ATCLAST BIT(1),       /* INDICATE HTIS IS LAST MODULE   *
*         2 ATCXRANG CHAR(1),       /* NUMBER OT BITS IN X-VALUE
*                                       PORTION   OF CID              *
*         2 ATCSAF   CHAR(2),       /* SUB AREA ADDRESS FIELD         *
*         2 ATCEPA PTR(31),         /* ENTRY POINT ADDR OF LOADED     *
*         2 ATCALERT PTR(31),       /* POINTER TO ALERT-ROUTINE 01S0772
*                                      ISTSDCAL                       *
*         2 ATCDVLOD PTR(31),       /* PTR TO ISTSDCOD                *
*         2 ATCTRCPT PTR(31),       /* POINTER TO TRACE PARM LIST     *
*         2 ATCDVT   PTR(31),       /* POINTER TO FIRST DVT ON CHAIN  *
*         2 ATCEPT   PTR(31),       /* POINTER TO FIRST EPT ON CHAIN  *
*         2 ATCMSGP PTR(31),        /* POINTER TO TPMSG PROCESSOR     *
*         2 ATCMSGM PTR(31),        /* POINTER TO TPMSG - MESSAGE
*                                      CSECT                          *
*         2 ATCTRPAB  PTR(31),      /* ADDRESS OF TRACE WRITER PAB    *
*         2 ATCVTLOD PTR(31),       /* ADDR OF VTAM LOAD LIST         *
*         2 ATCECPRT CHAR(4),       /* ECB FOR TRACE FILE PRINT       *
*         2 ATCZDVTB PTR(31),       /* ADDRESS OF ISTZCFBI            *
*         2 ATCECTLP CHAR(4),       /* TOLTEP ECB                     *
*         2 ATCRVCHS CHAR(8),       /* RESERVED                       *
*         2 ATCCRME  PTR(31),       /* VARY PSS CONTROL MECHANISM     *
*         2 ATCHPGM,                /* BUFFER INFORMATION            */
*           3 ATCHBFNO FIXED(15),   /* NUMBER OF BUFFS FOR CHANNEL   */
*           3 ATCHBSIZ FIXED(15),   /* BUFFER SIZE IN BYTES          */
*         2 ATCDEBCH PTR(31),       /* CLOSE DEB CHAIN PTR           */
*         2 ATCTODVT PTR(31),       /* THE TOLTEP DVT PTR POINTED
*                                      TO BY 3RD WORD OF PAB         */
*         2 ATCADEL  PTR(31),       /* A DELETE ROUTINE ADDRESS      */
*         2 ATCCDPTR PTR(31),       /* PTR TO ISTOCCCD - DOS ONLY    */
*         2 ATCLDNCS PTR(31),       /* PTR TO NCSPL FOR LOAD/DUMP    */
*         2 ATCLDECB BIT(32),       /* ECB FOR LOAD/DUMP SUBTASK     */
*         2 ATCAPCR5 PTR(31),       /* POINTER TO ISTINCR5           */
*         2 ATCRSV69 PTR(31),       /* RESERVED TO SYNCH WITH DOS    */
*         2 ATCNODEL CHAR(8),       /* VSAM DATA SET NAME            */
*         2 ATCNODDS PTR(31),       /* POINTER TO RPL                */
*         2 ATCONFIG CHAR(8),       /* START VTAM CONFIG = PARAMETER */
*         2 ATCRSV99 CHAR(4),       /* RESERVED FOR LATER POINTERS   */
*         2 ATCAP33 PTR(31),        /* PTR TO ISTAPC33               */
*         2 ATCAP35 PTR(31),        /* PTR TO ISTAPC35               */
*         2 ATCAP36 PTR(31),        /* PTR TO ISTAPC36               */
*         2 ATCDVTLK CHAR(LENGTH(ISTLOK)), /* LOCK WORD FOR DVT LOCK */
*         2 ATCCDFIN PTR(31),       /* POINTER TO ISTSDCRR           */
*         2 ATCCDFDN PTR(31),       /* POINTER TO ISTSDCCN           */
*         2 ATCVOCLK CHAR(LENGTH(ISTLOK)), /* VOCLOCK LOCK           */
*         2 ATCRDTLK CHAR(LENGTH(ISTLOK)), /* RDTLOCK LOCK           */
*         2 ATCRSV97 PTR(31),              /* DWORD ALIGNMENT        */
*         2 ATCVPAB1 CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* PAB FOR VARY
*                                           UNDER PSS CONTROL        */
*         2 ATCPGPAB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* ERP PAB FOR
*                                      PURGE                         */
*         2 ATCDLRPB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* DUMP LOAD &
*                                           RESTART PAB              */
*         2 ATCCCLAD PTR(31),       /* ADDRESS OF VARY ERP (ISTINCCL)*/
*         2 ATCCDLAD PTR(31),       /* ADDRESS OF VARY DUMP,LD RSTRT
*                                      (ISTINCDL)                    */
*         2 ATCOCCOB PTR(31),       /* ADDRESS ISTOCCOB              */
*         2 ATCOCCCB PTR(31),       /* ADDRESS ISTOCCCB              */
*         2 ATCTIPAB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* A PAB
*                                           FOR ISTOLTP              */
*         2 ATCTCIPB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* A PAB
*                                           FOR TOLTEP CLIP          */
*         2 ATCVTIPB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* A PAB
*                                           FOR TOLTEP-VTAM INTERFACE*/
*         2 ATCTCLOM PTR(31),      /* ADDR TOLTEP CLOP PROC          */
*         2 ATCTCLIM PTR(31),      /* ADDR TOLTEP CLIP PROC          */
*         2 ATCVTINM PTR(31),      /* ADDR TOLTEP-VTAM INTF PROC     */
*         2 ATCTACB  PTR(31),      /* TOLTEP ACB                     */
*         2 ATCRSV10 CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* RESERVED  */
*         2 ATCPTR00 CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* A PAB     */
*         2 ATCCFEAD PTR(31),          /* ADDR OF ISTINCFE           */
*         2 ATCVLCNT CHAR(4) BDY(HWORD), /* VARY DEVICE ONLINE COUNTS*/
*           3 ATCRNCNT PTR(16),        /* 370X COUNT                 */
*           3 ATCLCLCT PTR(16),        /* 3270 COUNT                 */
*         2 ATCS49XI PTR(31),          /* ADDRESS OF ISTPICXI        */
*         2 ATCS49XL PTR(31),          /* ADDRESS OF ISTPICXL        */
*         2 ATCPODVT PTR(31),          /* PTR TO PROGRAM OPERATOR DVT*/
*         2 ATCRNO,                                             01S0772
*           3 *        CHAR(1),                                 01S0772
*           3 ATCPOIA  PTR(24),        /* PTR TO PROGRAM OPERATOR    */
*                                      /* INTERFACE AREA             */
*         2 ATCSOPD CHAR(8) BDY(WORD), /* SESSION CONTROL            */
*           3 ATCSEC01 PTR(31),        /* OUTBOUND PROCESSING        */
*           3 ATCSEC10 PTR(31),        /* DVT                        */
*         2 ATCSIPD CHAR(12) BDY(WORD),/* SESSION CONTROL            */
*           3 ATCSEC21 PTR(31),        /* INBOUND PROCESSING         */
*           3 ATCSEC30 PTR(31),        /* FEEDBACK                   */
*           3 ATCSEC40 PTR(31),        /* DVT                        */
*         2 ATCSECST CHAR(4) BDY(WORD),/* SESSION CONTROLSESS TERM   */
*           3 ATCSEC51 PTR(31),        /* RECOVERY DVT               */
*         2 ATCNMCTR FIXED(15),        /* NAME COUNTER               */
*         2 ATCSTAT2 BIT(8),           /* TRACE FLAGS                */
*           3 ATCTRAPI BIT(1),         /* API                        */
*           3 ATCTRESC BIT(1),         /* ESC                        */
*           3 ATCTRPSS BIT(1),         /* PSS                        */
*           3 ATCTRLOK BIT(1),         /* LOCKS                      */
*           3 ATCTRSMS BIT(1),         /* SMS                        */
*           3 *        BIT(3),         /* RESERVED                   */
*         2 *        BIT(8),           /* RESERVED                   */
*         2 ATCSRTAB PTR(31),          /* SEARCH LOGON MODE TABLE    */
*                                      /* RTN ADDRESS (ISTINCSH)     */
*         2 ATCUSSPT PTR(31),          /* DEFAULT USS DEFINITION     */
*                                      /* TABLE ADDRESS (ISTINCDT)   */
*         2 ATCMODTB PTR(31),          /* DEFAULT SYSTEM LOGON MODE  */
*                                      /* TABLE ADDRESS (ISTINCLM)   */
*         2 ATCINCW3 PTR(31),          /* ADDRESS OF ISTINCW3        */
*         2 ATCIOECB PTR(31),          /* ECB USED BY IOS -          */
*                                      /* POINTED TO BY IOBECBPT     */
* 2 ATCVDPAB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD),                 01S0772
*                                    /* SSCP COMMAND PROCESSING PAB  */
* 2 ATCVFPAB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD),                 01S0772
*                                    /* SSCP FRONT END PAB           */
* 2 ATCVDLOK CHAR(LENGTH(ISTLOK)),   /* SSCP SERIALIZATION LOCK      */
*/* END OF COMMON AREA                                               */
*/* VS1/VS2 COMMON CODE.                                             */
*        2  ATCVTBAM CHAR(4),                                   01S0772
*           3  *     CHAR(3),          /* RESERVED                    *
*           3  *     CHAR(1),          /* FLAGS                       *
*              4 ATCVTMAB BIT(1) ABNL, /* ABEND IN VTAM JOBSTEP       *
*              4 *        BIT(7),      /* RESERVED                    *
*        2  ATCAOSM BDY(DWORD),                                 01S0772
*/*                                                                   *
*           3  ATCSRBRT PTR(31),       /* POINTER TO ROUTINE UNDER    *
*                                      /* SRB CONTROL                 *
*           3  ATCGSRBQ PTR(31),       /* READY QUEUE FOR GLOBAL SRB'S*
*              4  ATCGSRBG BIT(8),     /* READY QUEUE GATE BYTE       *
*                 5  ATCGSRBF BIT(1),  /* READY QUEUE GATE BIT        *
*           3  ATCPRPH PTR(31),        /* PTR TO PREALLOCATED RPH     *
*           3  ATCCMTCB PTR(31),       /* PTR TO COMMUNICATIONS TASK  *
*                                      /* TCB                         *
*           3  ATCAP11 PTR(31),        /* PTR TO ISTAPC11             *
*           3  ATCAP12 PTR(31),        /* PTR TO ISTAPC12             *
*           3  ATCAP31 PTR(31),        /* PTR TO ISTAPC31             *
*           3  ATCAP32 PTR(31),        /* PTR TO ISTAPC32             *
*           3  ATCAP34 PTR(31),        /* PTR TO ISTAPC34             *
*           3  ATCAP52 PTR(31),        /* PTR TO ISTAPC52             *
*           3  ATCAP53 PTR(31),        /* PTR TO ISTAPC53             *
*           3  ATCAP54 PTR(31),        /* PTR TO ISTAPC54             *
*           3  ATCAP57 PTR(31),        /* PTR TO ISTAPC57             *
*           3  ATCAP58 PTR(31),        /* PTR TO ISTAPC58             *
*           3  ATCAP61 PTR(31),        /* PTR TO ISTAPC61             *
*           3  ATCAP63 PTR(31),        /* PTR TO ISTAPC63             *
*           3  ATCAP64 PTR(31),        /* PTR TO ISTAPC64             *
*           3  ATCZFSVT PTR(31),       /* TPIOS FIXED SRVICES VCTR TAB*
*           3  ATCZPSVT PTR(31),       /* TPIOS PAGBL SRVCES VCTR TABL*
*           3  ATCICNCB PTR(31),       /* HEAD OF ICNCB QUEUE         *
*           3  ATCZDVT1 PTR(31),       /* TPIOS SLODWN RECOVRY PRCSR  *
*           3  ATCZDVT3 PTR(31),       /* 370X FEEDBACK STAT CNTRL RTR*
*           3  ATCZDVT4 PTR(31),       /* OPERATOR MESSAGE SCHEDULER  *
*           3  ATCZDVT6 PTR(31),       /* DIALOGUE SCHEDULER (INBOUND)*
*           3  ATCAP65 PTR(31),        /* PTR TO ISTAPC65            */
*           3  ATCICAPP CHAR(20) BDY(WORD), /* 3705 APPENDAGE VECTOR  *
*              4  ATCCDRPH PTR(31),    /* ADDR CLOSE DEB RPH    01S0772
*                                         (DUMMY EOA APP.)           */
*              4  ATCZSIOA PTR(31),    /* ADDR 3705 SIO APPENDAGE    */
*              4  ATCCDTCB PTR(31),    /* VTAM TCB (DUMMY PCI APP.)  */
*              4  ATCZCEA PTR(31),     /* ADDR 3705 CHANNEL END 01S0772
*                                         APPENDAGE                  */
*              4  ATCZAEA PTR(31),     /* ADDR 3705 CHANNEL END 01S0772
*                                         APPENDAGE                  */
*           3  ATCLDAPP CHAR(20) BDY(WORD), /* LOCAL 3270 APPENDAGE
*                                         VECTOR                     */
*              4  ATCCDTID PTR(31),    /* TASK ID OF VTAM       01S0772
*                                         (DUMP EOE)                 */
*              4  ATCSMFRR PTR(31),    /* ADDR OF SMS FRR       01S0772
*                                         (DUMMY SIOA)               */
*              4  ATCRSV17 PTR(31),    /* RESERVED FOR ALIGNMENT     */
*              4  ATCZLCEA PTR(31),    /* ADDR 3270 CHANNEL END 01S0772
*                                         APPENDAGE                  */
*              4  ATCZLAEA PTR(31),    /* ADDR 3270 CHANNEL END 01S0772
*                                         APPENDAGE                  */
*           3  ATCDAPVT CHAR(24) BDY(WORD),  /* DUMMY APPENDAGE 01S0772
*                                         VECTOR TABLE FOR LOAD/DVMMY*/
*              4  ATCDEOEA PTR(31),    /* ADDRESS OF DUMMY END  01S0772
*                                         OF EXTENT APPENDAGE        */
*              4  ATCDSIOA PTR(31),    /* ADDRESS OF DUMMY END  01S0772
*                                         OF SIO APPENDAGE           */
*              4  ATCDPCIA PTR(31),    /* ADDRESS OF DUMMY PCI  01S0772
*                                         APPENDAGE                  */
*              4  ATCDCEA PTR(31),     /* ADDRESS OF CHANNEL END
*                                         APPENDAGE                  */
*              4  ATCDXCEA PTR(31),    /* ADDRESS OF ABNORMAL   01S0772
*                                         END APPENDAGE              */
*              4  ATCDAPDG CHAR(2),    /* DUMMY APPENDAGE            */
*              4  ATCRSV56 CHAR(2),    /* RESERVED                   */
*           3  ATCZDVT7 PTR(31),       /* ADDR OF RESET CLEANUP 01S0772
*                                         (PHASE 1)                   *
*           3  ATCZDVT8 PTR(31),       /* 3270 LOCAL TEST AND CTL
*                                         FEEDBACK ROUTER            */
*           3  ATCZDVT9 PTR(31),       /* ADDRESS OF ISTZDFKA        */
*           3  ATCZDVTA PTR(31),       /* ADDRESS OF ISTZCFIA        */
*           3  ATCZDVTX PTR(31),       /* ADDRESS OF TRUNK LINE 01S0772
*                                         DEACTIVATE ROUTINE         */
*           3  ATCZLPVT PTR(31),       /* ADDRESS OF ISTZPSVA        */
*           3  ATCZLFVT PTR(31),       /* TPIOS 3270 LOCAL FIXED
*                                         SERVICES VECTOR TABLE      */
*           3  ATCZPAB1 CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* PAB FOR
*                                         TEST AND CTL FEEDBACK ROUTER*
*           3  ATCZPAB2 CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* 370X
*                                         STATUS AND FEEDBACK ROUTER
*                                         DYNAMIC PAB                */
*           3  ATCAP51  PTR(31),       /* PTR TO ISTAPC51            */
*           3  ATCZDFJ0 PTR(31),       /* ADDR OF ISTZDFJ0           */
*           3  ATCAP37  PTR(31),       /* PTR TO ISTAPC37            */
*           3  ATCAP38  PTR(31),       /* PTR TO ISTAPC38            */
*           3  ATCDMAPP PTR(31),       /* DUMMY APPENDAGE ROUTINE    */
*                                      /* FOR ABEND                  */
*           3  ATCRPT12 PTR(31),       /* RESERVED                   */
*        3  ATCCRA   CHAR(8) BDY(DWORD), /* AVAILABLE CRA             *
*           4 ATCCRAQ  PTR(31),          /* QUEUE OF AVAILABLE CRAS   *
*           4 ATCCRACN FIXED(31),        /* COUNTS                    *
*             5 ATCCRARC FIXED(16),      /* ENQUEUE COUNT TO ALLOW    *
*                                        /* MULTIPLE SIMUALTANIOUS    *
*                                        /* ENQUEUES AND DEQUEUES     *
*             5 ATCCRAAC FIXED(16),      /* COUNT OF CRAS ON AVAIL Q  *
*        3  ATCSRB   CHAR(8) BDY(DWORD), /* AVAILABLE SRBS            *
*             4 ATCSRBQ  PTR(31),        /* QUE OF AVAILABLE SRBS     *
*             4 ATCSRBCN FIXED(31),      /* COUNTS                    *
*               5 ATCSRBRC FIXED(16),    /* ENQUEUE COUNT TO ALLOW    *
*                                        /* MULTIPLE SIMUALTANIOUS    *
*                                        /* ENQUEUES AND DEQUEUES     *
*               5 ATCSRBAC FIXED(16),    /* COUNT OF SRBS ON AVAIL Q  *
*        3  ATCCRPL  CHAR(8) BDY(DWORD), /* AVAILABLE CRPLS           *
*             4 ATCCRPLQ PTR(31),        /* QUE OF AVAILABLE CRPLS    *
*             4 ATCRPLCN FIXED(31),      /* COUNTS                    *
*               5 ATCRPLRC FIXED(16),    /* ENQUEUE COUNT TO ALLOW    *
*                                        /* MULTIPLE SIMUALTANIOUS    *
*                                        /* ENQUEUES AND DEQUEUES     *
*               5 ATCRPLAC FIXED(16),    /* COUNT OF CRPLS ON AVAIL Q *
*           3  ATCSQAFR BDY(DWORD),    /* DOUBLE WORD FOR CDS   01S0772
*                                          SQA RELEASE       @VSRIUBL*/
*             4 ATCORTBF PTR(31),      /* ANCHOR FOR TO-BE-     01S0772
*                                          FREED STG Q       @VSRIUBL*/
*             4 ATCORTBC PTR(31),      /* PTR TO TCB OF TASK    01S0772
*                                          OWNING STG Q      @VSRIUBL*/
*               5 ATCORSRB PTR(31),    /* PTR TO SMS SRB     @VSRIUBL*/
*                 6 ATCORQG  BIT(1)ABNL, /* SRB GATE FOR SMS @VSRIUBL*/
*           3  ATCOROBT PTR(31),      /* ANCHOR FOR OBTAINED    01S0772
*                                         STAGE              @VSRIUBL*/
*           3  ATCORFRL PTR(31),      /* ADDR OF ISTORFRL    @VSRIUBL*/
*           3  ATCORFMG PTR(31),      /* ADDR OF ISTORFMG    @VSRIUBL*/
*           3  ATCINFDD PTR(31),      /* ADDR OF ISTINFDD    @VSRIUBL*/
*           3  ATCAIWT  PTR(31),      /* ADDRESS OF BYTE        01S0772
*                                         FOLLOWING WAIT IN     01S0772
*                                         ISTAICCK           @VSRIUBL*/
*           3  *        BIT(8),       /* RESERVED            @VSRIUBL*/
*             4 ATCABEN BIT(1)ABNL,   /* VTAM IS ABNORMALLY     01S0772
*                                         ENDING             @VSRIUBL*/
*             4 ATCOPKL BIT(1)ABNL,   /* OPERATOR IS ENDING     01S0772
*                                         VTAM               @VSRIUBL*/
*             4 ATCSNUF BIT(1)ABNL,   /* RECURSIVE VTAM ABEND   01S0772
*                                         DURING RSCE MGR       01S0772
*                                         OPERATION          @VSRIUBL*/
*             4 *       BIT(5),       /* RESERVED            @VSRIUBL*/
*           3  *        BIT(24),      /* RESERVED            @VSRIUBL*/
*           3  ATCRPT27 PTR(31),       /* RESERVED                   */
*           3  ATCRPT28 PTR(31),       /* RESERVED                   */
*           3  ATCRPT29 PTR(31),       /* RESERVED                   */
*           3  ATCRPT30 PTR(31),       /* RESERVED                   */
*           3  ATCRPT31 PTR(31),       /* RESERVED                   */
*           3  ATCRPT32 PTR(31),       /* RESERVED                   */
*           3  ATCRPT33 PTR(31),       /* RESERVED                   */
*           3  ATCRPT34 PTR(31),       /* RESERVED                   */
*           3  ATCRPT35 PTR(31),       /* RESERVED                   */
*           3  ATCRPT36 PTR(31),       /* RESERVED                   */
*           3  ATCRPT37 PTR(31),       /* RESERVED                   */
*           3  ATCRPT38 PTR(31),       /* RESERVED                   */
*           3  ATCRPT39 PTR(31),       /* RESERVED                   */
*           3  ATCRPT40 PTR(31),       /* RESERVED                   */
*/* END OF VS1/VS2 COMMON CODE.                                      */
*/* START OF VS2 UNIQUE CODE.                                        */
*           3  ATCVTFLG BIT(32),                                01S0772
*              4 ATCVTACT BIT(1),      /* VTT ACTIVE                 */
*              4 *        BIT(31),     /* RESERVED                   */
*           3  ATCHLTCB PTR(31),       /* ECB FOR HALTING VTAM       */
*           3  ATCATA10 PTR(31),       /* PTR TO ISTATM10            */
*           3  ATCZLAAB PTR(31),       /* PTR TO ISTZLFAB            */
*           3  ATCCACXA PTR(31),       /* PTR TO ISTCFCXA            */
*           3  ATCSMARA PTR(31),       /* PTR TO ISTORFRA            */
*           3  ATCSMAID PTR(31),       /* PTR TO ISTORFID            */
*           3  ATCTPWQA PTR(31),       /* WAIT Q ANCHOR FOR TPIOS    */
*           3  ATCSMAPR PTR(31),       /* PTR TO ISTORFPR            */
*           3  ATCSMABF PTR(31),       /* PTR TO ISTORFBF            */
*           3  ATCPSTA  PTR(31),       /* ACTIVE PST QUEUE           */
*           3  ATCAPBE  PTR(31),       /* POINTER TO ISTAICBE        */
*           3  ATCTRMPB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD),      01S0772
*                                      /* PAB FOR VTAM TERM TASK     */
*           3  ATCTPSPB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD),      01S0772
*                                      /* PAB FOR TPIOS              */
*           3  ATCAP23  PTR(31),       /* PTR TO ISTAPC23            */
*           3  ATCAPC25 PTR(31),       /* PTR TO ISTAPC25            */
*           3  ATCAP41  PTR(31),       /* PTR TO ISTAPC41            */
*           3  ATCRCFY0 PTR(31),       /* PTR TO ISTRCFY0            */
*           3  ATCAP55  PTR(31),       /* PTR TO ISTAPC55            */
*           3  ATCAP56  PTR(31),       /* PTR TO ISTAPC56            */
*           3  ATCAPC59 PTR(31),       /* PTR TO ISTAPC59            */
*           3  ATCAP62  PTR(31),       /* PTR TO ISTAPC62            */
*           3  ATCAP66  PTR(31),       /* PTR TO ISTAPC66            */
*           3  ATCAP69  PTR(31),       /* PTR TO ISTAPM69            */
*           3  ATCAP82  PTR(31),       /* PTR TO ISTAPC82            */
*           3  ATCAP83  PTR(31),       /* PTR TO ISTAPC83            */
*           3  ATCAP84  PTR(31),       /* PTR TO ISTAPC84            */
*           3  ATCAP85  PTR(31),       /* PTR TO ISTAPC85            */
*           3  ATCAP86  PTR(31),       /* PTR TO ISTAPC86            */
*           3  ATCASCB  PTR(31),       /* PTR TO VTAM ASCB           */
*           3  ATCMPLTA  PTR(31),      /* PTR TO MPST LIST TABLE     */
*           3  ATCZR01  PTR(31),       /* PTR TO ISTZRM01            */
*           3  ATCAICTN PTR(31),       /* PTR TO ISTAICTN            */
*           3  ATCTPCP0 PTR(31),       /* PTR TO ISTZFSAV            */
*           3  ATCTPCP1 PTR(31),       /* PTR TO ISTZ19SV            */
*           3  ATCZFLAG BIT(8),        /* FLAG BYTE                  */
*              4 ATCZF001 BIT(1),      /* MDR RECORDING SUSPENDED    */
*              4 ATCRSV66 BIT(7),      /* RESERVED                   */
*           3  ATCRSV75 BIT(8),        /* RESERVED                   */
*           3  ATCSRBCT FIXED(16),     /* COUNT OF PREALLOCATED SRB'S*/
*           3  ATCCRACT FIXED(16),     /* COUNT OF PREALLOCATED CRA'S*/
*           3  ATCRPLCT FIXED(16),     /* COUNT OF PREALLOCATED CRPL */
*           3  ATCRSV88 PTR(31),       /* RESERVED                   */
*           3  ATCTPMPB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /*TP MSG PAB
*                                                         FOR VS2    */
*           3  ATCTPMMI PTR(31),        /* PTR TO ISTCFMMI - MSG ISSUER
*                                          FOR SRB MODE ROUTINES     */
*           3  ATCVIOPM PTR(31),       /* PTR TO ISTVIOPM            */
*           3  ATCPOPAB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD),      01S0772
*                   /* POPAB FOR REPLY PROCESSING, POI TERMINATION,  */
*                   /* AND VTAM MESSAGE PROCESSOR                    */
*        2  ATCAOS CHAR(0) BDY(WORD);  /* VS2 ONLY FIELDS            */
*                                                               01S0773
* DECLARE                                                       01S0773
*   EMCR0 PTR REG(0),                                           01S0773
*   EMCR1 PTR REG(1),                                           01S0773
*   EMCR2 PTR REG(2),                                           01S0773
*   EMCR3 PTR REG(3),                                           01S0773
*   EMCR4 PTR REG(4),                                           01S0773
*   EMCR5 PTR REG(5),                                           01S0773
*   EMCR6 PTR REG(6),                                           01S0773
*   EMCR7 PTR REG(7),                                           01S0773
*   EMCR8 PTR REG(8),                                           01S0773
*   EMCR9 PTR REG(9),                                           01S0773
*   EMCR10 PTR REG(10),                                         01S0773
*   EMCR11 PTR REG(11),                                         01S0773
*   EMCR12 PTR REG(12),                                         01S0773
*   EMCR13 PTR REG(13),                                         01S0773
*   EMCR14 PTR REG(14),                                         01S0773
*   EMCR15 PTR REG(15);                                         01S0773
* GEN (PRINT ON);                                               01S0774
         PRINT ON
*/* END OF TPEPILOG */                                          01S0775
*END ISTINCE0                                                   01S0775
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (CVT     )                                        *
*/*%INCLUDE SYSLIB  (IFGRPL  )                                        *
*/*%INCLUDE SYSLIB  (IFGRPLVT)                                        *
*/*%INCLUDE SYSLIB  (ISTRPLFB)                                        *
*/*%INCLUDE SYSUT5  (CE0IDT  )                                        *
*/*%INCLUDE SYSUT5  (CE0REQ  )                                        *
*;                                                              01S0775
@EL00001 DS    0H                                               01S0775
@EF00001 DS    0H                                               01S0775
@ER00001 LM    @14,@12,12(@13)                                  01S0775
         BR    @14                                              01S0775
@DATA    DS    0H
@CH01114 DC    H'-1'
@DATD    DSECT
         DS    0F
@TF00001 DS    F
ISTINCE0 CSECT
         DS    0F
@CF01287 DC    F'72'
@CF01116 DC    F'-8'
@CF03415 DC    XL4'80000000'
@DATD    DSECT
         DS    0D
NCSPL1   DS    A
NCSPL2   DS    A
R14SAVE  DS    A
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ISTINCE0 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV01138 DC    V(ISTINCD1)
@CV01139 DC    V(ISTINCD8)
@CV01140 DC    V(ISTINCL2)
         DS    0D
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
DPQPTR   EQU   @03
LUPTR    EQU   @09
PUPTR    EQU   @08
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR02P   EQU   @02
GPR03P   EQU   @03
GPR04P   EQU   @04
GPR05P   EQU   @05
GPR06P   EQU   @06
GPR07P   EQU   @07
GPR08P   EQU   @08
GPR09P   EQU   @09
GPR10P   EQU   @10
GPR11P   EQU   @11
GPR12P   EQU   @12
GPR13P   EQU   @13
GPR14P   EQU   @14
GPR15P   EQU   @15
R1       EQU   @01
R0       EQU   @00
NCSPLPTR EQU   @10
CE0WAPTR EQU   @11
BASEREG  EQU   @12
REGSAPTR EQU   @13
R14      EQU   @14
R15      EQU   @15
RPHPTR   EQU   @01
EMCR0    EQU   @00
EMCR1    EQU   @01
EMCR10   EQU   @10
EMCR11   EQU   @11
EMCR12   EQU   @12
EMCR13   EQU   @13
EMCR14   EQU   @14
EMCR15   EQU   @15
EMCR2    EQU   @02
EMCR3    EQU   @03
EMCR4    EQU   @04
EMCR5    EQU   @05
EMCR6    EQU   @06
EMCR7    EQU   @07
EMCR8    EQU   @08
EMCR9    EQU   @09
GPR00F   EQU   @00
GPR01F   EQU   @01
GPR02F   EQU   @02
GPR03F   EQU   @03
GPR04F   EQU   @04
GPR05F   EQU   @05
GPR06F   EQU   @06
GPR07F   EQU   @07
GPR08F   EQU   @08
GPR09F   EQU   @09
GPR10F   EQU   @10
GPR11F   EQU   @11
GPR12F   EQU   @12
GPR13F   EQU   @13
GPR14F   EQU   @14
GPR15F   EQU   @15
ATCLCPTR EQU   1032
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTSHS   EQU   CVTXTNT2+40
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLOPT4  EQU   RPLOPTCD+3
RPLNXTRP EQU   RPLCOMN+44
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
RPLVTEXT EQU   IFGRPL+76
RPLFDBK2 EQU   RPLVTEXT+12
RPLSSNSI EQU   RPLFDBK2
RPLDSB   EQU   RPLSSNSI
RPLDSB1  EQU   RPLDSB
RPLSSEI  EQU   RPLDSB1
RPLDSB2  EQU   RPLDSB+1
RPLUSNSI EQU   RPLFDBK2+2
RPLOPTC3 EQU   RPLVTEXT+20
RPLOPT9  EQU   RPLOPTC3
RPLOPT10 EQU   RPLOPTC3+1
RPLOPT11 EQU   RPLOPTC3+2
RPLOPT12 EQU   RPLOPTC3+3
RPLOSENS EQU   RPLVTEXT+24
RPLSSNSO EQU   RPLOSENS
RPLSSEO  EQU   RPLSSNSO
RPLOF16  EQU   0
RPLRH3   EQU   RPLOF16
RPLSRTYP EQU   RPLOF16+1
RPLSTYPE EQU   RPLSRTYP
RPLRTYPE EQU   RPLSRTYP
RPLCHN   EQU   RPLOF16+2
RPLVTFL1 EQU   RPLOF16+3
RPLVTFL2 EQU   RPLOF16+4
RPLPOSTV EQU   RPLVTFL2
RPLRESP  EQU   RPLVTFL2
RPLCNTRL EQU   RPLOF16+5
RPLCNTDF EQU   RPLCNTRL
RPLCNTDC EQU   RPLCNTRL+1
RPLCNTSC EQU   RPLCNTRL+2
RPLOF60  EQU   0
RPLOBSQ  EQU   RPLOF60+4
RPLIBSQ  EQU   RPLOF60+5
ISTPOHD  EQU   0
POHSTAT  EQU   ISTPOHD+1
ISTPFX   EQU   0
PFXID    EQU   ISTPFX
ISTNCSPL EQU   0
@NM00031 EQU   ISTNCSPL
NCSPFX   EQU   @NM00031
NCSPLVBF EQU   ISTNCSPL+18
NCSPLVFL EQU   ISTNCSPL+20
NCSVSTAT EQU   NCSPLVFL
NCSPLVF1 EQU   ISTNCSPL+21
NCSPRMRC EQU   ISTNCSPL+22
NCSIORC  EQU   ISTNCSPL+23
NCSPLRPT EQU   ISTNCSPL+52
NCSPLLPT EQU   ISTNCSPL+56
NCSPLCMD EQU   ISTNCSPL+60
NCSCMDA  EQU   NCSPLCMD
NCSCRFLG EQU   ISTNCSPL+67
NCSPLRAD EQU   ISTNCSPL+144
NCSIOCID EQU   ISTNCSPL+148
NCSPLCID EQU   NCSIOCID
NCSPLWKA EQU   ISTNCSPL+152
NCSPLCVT EQU   ISTNCSPL+156
NCSPLRPH EQU   ISTNCSPL+160
NCSPLFSB EQU   ISTNCSPL+168
NCSPLFL1 EQU   ISTNCSPL+176
NCSPLFL2 EQU   ISTNCSPL+177
NCSPLFL3 EQU   ISTNCSPL+178
NCSPLFL4 EQU   ISTNCSPL+179
NCSPLFL5 EQU   ISTNCSPL+181
NCSPLAPP EQU   ISTNCSPL+216
NCSSENSE EQU   ISTNCSPL+244
NCSCRMSK EQU   ISTNCSPL+268
NCSCHKPT EQU   NCSCRMSK
NCSCRMOD EQU   NCSCRMSK+2
NCSPLSID EQU   ISTNCSPL+271
NCSPLSTA EQU   NCSPLSID
NCSPLPHD EQU   NCSPLSID+1
NCSAPP   EQU   0
NCSAPBUE EQU   NCSAPP+88
ISTLOK   EQU   0
LOKCHN   EQU   ISTLOK+1
LOKCHNG  EQU   LOKCHN
@NM00037 EQU   LOKCHNG+2
ISTDEVCH EQU   0
DEVSHCH  EQU   ISTDEVCH
DEVCHAR  EQU   DEVSHCH
DEVTCODE EQU   ISTDEVCH+1
DEVFLAGS EQU   ISTDEVCH+3
DEVFCCTL EQU   DEVFLAGS
DEVCHAR3 EQU   DEVFLAGS
ISTRPRE  EQU   0
RPRCOMID EQU   ISTRPRE+8
RPRRLOCK EQU   ISTRPRE+12
RPRFLAGA EQU   ISTRPRE+21
RPRFLAGB EQU   ISTRPRE+22
RPRONLIN EQU   RPRFLAGB
RPRCAUSE EQU   ISTRPRE+23
RPRHDTYP EQU   ISTRPRE+27
RPRNSNEA EQU   ISTRPRE+36
RPRFLAGD EQU   ISTRPRE+61
RPRCONCT EQU   RPRFLAGD
RPRFLAGC EQU   ISTRPRE+62
ISTRCPRE EQU   0
RCPPMODE EQU   ISTRCPRE+91
RCPLGNIN EQU   ISTRCPRE+92
ISTRDT   EQU   0
RDTPLEN  EQU   ISTRDT+72
RDTPRIOR EQU   RDTPLEN
RDTFLAGB EQU   ISTRDT+91
RDTVYRPH EQU   ISTRDT+108
RDTSTCNT EQU   ISTRDT+112
ISTRAP   EQU   0
RAPFLG   EQU   ISTRAP+108
RAPFLGB  EQU   ISTRAP+109
RAPFLGC  EQU   ISTRAP+110
ISTRLC   EQU   0
RLCADR   EQU   ISTRLC+72
RLCFLAG  EQU   RLCADR
ISTRRN   EQU   0
RRNADR   EQU   ISTRRN+136
RRNFLAG  EQU   RRNADR
RRNUCBAD EQU   RRNADR+1
RRNRDF   EQU   ISTRRN+172
RRNRDFA  EQU   RRNRDF
RRNRDFB  EQU   RRNRDF+1
RRNCMF   EQU   ISTRRN+176
RRNCMFA  EQU   RRNCMF
RRNCMFB  EQU   RRNCMF+1
RRNCMFC  EQU   RRNCMF+2
RRNCMFD  EQU   RRNCMF+3
RRNNMDPD EQU   ISTRRN+192
RRNHPRE  EQU   ISTRRN+216
ISTRGP   EQU   0
RGPFLG   EQU   ISTRGP+72
ISTRLN   EQU   0
RLNADR   EQU   ISTRLN+72
RLNFLAG  EQU   RLNADR
RLNUCBAD EQU   RLNADR+1
RLNSTAT1 EQU   ISTRLN+86
RLNSTAT2 EQU   ISTRLN+87
RLNRDF   EQU   ISTRLN+88
RLNRDFA  EQU   RLNRDF
RLNRACNT EQU   RLNRDFA
RLNRDFB  EQU   RLNRDF+1
RLNCRFLG EQU   ISTRLN+102
RLNLSCMD EQU   RLNCRFLG
ISTRPT   EQU   0
RPTLNCID EQU   ISTRPT+116
RPTDITT  EQU   ISTRPT+128
RPTFLAG1 EQU   ISTRPT+140
ISTRCL   EQU   0
RCLADR   EQU   ISTRCL+72
RCLFLAG  EQU   RCLADR
ISTRTR   EQU   0
RTRADR   EQU   ISTRTR+124
RTRFLAG  EQU   RTRADR
RTRRDFA  EQU   ISTRTR+136
RTRRAALL EQU   RTRRDFA
RTRRDFB  EQU   ISTRTR+137
RTRRDFC  EQU   ISTRTR+138
RTRRDFD  EQU   ISTRTR+139
RTRRDFE  EQU   ISTRTR+140
RTRRDFF  EQU   ISTRTR+141
RTRCRFLG EQU   ISTRTR+143
RTRLSCMD EQU   RTRCRFLG
RTRBSCID EQU   ISTRTR+188
ISTRIN   EQU   0
RINDFD   EQU   ISTRIN+124
RINREMPO EQU   RINDFD
RINNODEF EQU   RINDFD
RINLDISC EQU   RINDFD
RINNODID EQU   ISTRIN+125
RINRLDAF EQU   ISTRIN+126
RINREMOT EQU   ISTRIN+128
RINVPAB  EQU   ISTRIN+132
RINRPHCN EQU   ISTRIN+136
RINNCSPL EQU   ISTRIN+140
RINCNCNT EQU   ISTRIN+144
ISTRDS   EQU   0
ISTDOT   EQU   0
ISTRCC   EQU   0
RCCFLAG  EQU   ISTRCC+73
RCCFLAGB EQU   ISTRCC+74
RCCDIALP EQU   RCCFLAGB
RCCRESET EQU   RCCFLAGB
RCCSTAID EQU   ISTRCC+78
RCCID48  EQU   RCCSTAID+2
RCCCRFLG EQU   ISTRCC+108
RCCDPQ   EQU   ISTRCC+116
RCCINDEX EQU   ISTRCC+126
RCCSWTOX EQU   ISTRCC+136
RCCXTOSW EQU   ISTRCC+140
RCCRVPT2 EQU   ISTRCC+144
ISTRLU   EQU   0
RLUFLAG  EQU   ISTRLU+125
RLUCRFLG EQU   ISTRLU+126
RLUPACE  EQU   ISTRLU+132
RLUNCPPC EQU   ISTRLU+134
RLUUSSTB EQU   ISTRLU+140
RLUMODET EQU   ISTRLU+152
ISTRPX   EQU   0
ISTRLX   EQU   0
RLXFLAGA EQU   ISTRLX+76
ISTRSW   EQU   0
ISTRDA   EQU   0
RDAADR   EQU   ISTRDA+72
RDAFLAG  EQU   RDAADR
RDAUCBAD EQU   RDAADR+1
ISTRLS   EQU   0
ISTDNT   EQU   0
ISTGNT   EQU   0
ISTPAT   EQU   0
PATFLAGA EQU   ISTPAT+7
ISTGTNCS EQU   0
GTNCSAD  EQU   ISTGTNCS
GTNCSFLG EQU   ISTGTNCS+4
GTNCSREQ EQU   GTNCSFLG
GTNCSRQU EQU   GTNCSFLG
GTNCSWKA EQU   GTNCSFLG
ISTLCCW  EQU   0
LCCWOP   EQU   ISTLCCW
LCCWRWOP EQU   LCCWOP
LCCWCTL  EQU   LCCWRWOP
LCCWFLAG EQU   ISTLCCW+1
LCCWLSI  EQU   LCCWFLAG
ISTLCPB  EQU   0
LCPREQTG EQU   ISTLCPB+2
LCPFLAGS EQU   LCPREQTG
LCPZF001 EQU   LCPFLAGS
LCPZRT02 EQU   LCPZF001
LCPZF002 EQU   LCPFLAGS
LCPZRT03 EQU   LCPZF002
LCPZF003 EQU   LCPFLAGS
LCPZRT04 EQU   LCPZF003
LCPZF004 EQU   LCPFLAGS
LCPZRT05 EQU   LCPZF004
LCPZRT06 EQU   LCPFLAGS
LCPZRT07 EQU   LCPFLAGS
LCPMNRCD EQU   LCPREQTG+1
LCPZRT08 EQU   LCPMNRCD
LCPZRT09 EQU   LCPMNRCD
LCPCHAIN EQU   ISTLCPB+4
LCPCHAI1 EQU   LCPCHAIN
LCPRUCNT EQU   ISTLCPB+8
LCPFLAG2 EQU   ISTLCPB+9
LCPTLBPI EQU   LCPFLAG2
LCPFID0  EQU   LCPFLAG2
LCPSEQ   EQU   ISTLCPB+10
LCPCID   EQU   ISTLCPB+16
LCPFDBA  EQU   ISTLCPB+24
LCPFLG1  EQU   ISTLCPB+37
LCPFLCCW EQU   ISTLCPB+40
LCPLCCW  EQU   ISTLCPB+48
LCPPABA  EQU   LCPLCCW+4
LCPRPHA  EQU   LCPPABA
ISTZSAVE EQU   0
ZSAZSVBC EQU   ISTZSAVE
ZSAZSVMS EQU   ZSAZSVBC
ISTPFCRR EQU   0
PFCCRR   EQU   ISTPFCRR
PFCCRRID EQU   PFCCRR
PFCCRRLN EQU   PFCCRR+2
PFCHDR   EQU   ISTPFCRR+4
PFCCRRO  EQU   PFCHDR
PFCFRRO  EQU   PFCHDR+4
ISTCFCRR EQU   0
CFCAUDIT EQU   ISTCFCRR
CFCNTRD  EQU   CFCAUDIT
CFCCRT   EQU   CFCAUDIT+1
ISTZCRR  EQU   0
ZCRCRR   EQU   ISTZCRR
ZCRFLGS1 EQU   ISTZCRR+12
ZCRFLGS2 EQU   ISTZCRR+13
ZCRSWFLD EQU   ISTZCRR+14
ZCRENDSH EQU   ZCRSWFLD
ZCRNDLCP EQU   ZCRSWFLD
ZCRRESET EQU   ZCRSWFLD
ZCRFLGS3 EQU   ISTZCRR+15
ZCRGENSW EQU   ISTZCRR+16
ZCRPFLGS EQU   ISTZCRR+17
ZCRIBPR  EQU   ISTZCRR+18
ZCRSCPSW EQU   ISTZCRR+19
ZCRPARMS EQU   ISTZCRR+24
ZCRFBPTR EQU   ZCRPARMS
ZCRDFRDA EQU   ZCRPARMS+10
ZCRPCOD1 EQU   ZCRPARMS+12
ZCRPLSBF EQU   ZCRPCOD1
ZCRPCOD2 EQU   ZCRPARMS+13
ZCRSVRTN EQU   ISTZCRR+56
ZCRWKARA EQU   ISTZCRR+156
ZCRCIDSV EQU   ISTZCRR+192
ZCRAUDIT EQU   ISTZCRR+440
ZCRENTER EQU   ZCRAUDIT+5
ZCRLCPB  EQU   ISTZCRR+480
ZCRRHRU  EQU   ZCRLCPB
ISTASCRR EQU   0
ASCFLAGS EQU   ISTASCRR+16
ASCFLG1  EQU   ASCFLAGS
ASCFLG2  EQU   ASCFLAGS+2
ASCFLG3  EQU   ASCFLAGS+4
ASCUSRGS EQU   ISTASCRR+28
ISTAPCRR EQU   0
APCATFLG EQU   ISTAPCRR+16
APCRFLG  EQU   ISTAPCRR+18
APCSAVE  EQU   ISTAPCRR+44
APCCOMF  EQU   ISTAPCRR+116
APCCOMF1 EQU   APCCOMF
APC31FLG EQU   ISTAPCRR+132
APC52FLG EQU   ISTAPCRR+133
APC53FLG EQU   ISTAPCRR+134
APC54FLG EQU   ISTAPCRR+135
APC57FLG EQU   ISTAPCRR+136
ISTRPH   EQU   0
RPHCNTL  EQU   ISTRPH
RPHFLAGS EQU   RPHCNTL+2
RPHAPTYP EQU   RPHFLAGS
RPHFSTLC EQU   RPHFLAGS
RPHFLGB  EQU   RPHCNTL+3
RPHRPHA  EQU   ISTRPH+4
RPHTSKID EQU   ISTRPH+8
RPHRESMA EQU   ISTRPH+16
RPHWPFLG EQU   RPHRESMA
RPHWEA   EQU   ISTRPH+24
RPHCSPA  EQU   RPHWEA
RPHSRPRM EQU   ISTRPH+28
RPHCRR   EQU   ISTRPH+32
RPHPABQA EQU   ISTRPH+36
RPHWORK  EQU   ISTRPH+40
RPHSAVE1 EQU   RPHWORK
RPHSBITS EQU   RPHSAVE1+1
ISTCRA   EQU   0
CRABASIC EQU   ISTCRA
CRAHDR   EQU   CRABASIC
CRACRR   EQU   CRAHDR
CRALKACT EQU   CRABASIC+8
CRAL4PTR EQU   CRABASIC+24
CRASVC   EQU   ISTCRA+848
CRABUFA  EQU   CRASVC+68
ISTCNSTA EQU   0
CNSTFLDA EQU   ISTCNSTA+16
CNSTFLDB EQU   ISTCNSTA+19
ISTVYCRR EQU   0
VYCAUDIT EQU   ISTVYCRR+22
VYCNTRD  EQU   VYCAUDIT
NINCE0   EQU   VYCNTRD+3
VYCCRT   EQU   VYCAUDIT+12
CINCE0   EQU   VYCCRT+3
VYCRRCW3 EQU   ISTVYCRR+118
ISTPAB   EQU   0
PABWQCHN EQU   ISTPAB
PABWEQA  EQU   PABWQCHN
PABCHAIN EQU   PABWQCHN+4
PABRPHFG EQU   ISTPAB+12
PABFLAGS EQU   PABRPHFG
PABERLCK EQU   PABFLAGS
PABERRLK EQU   PABERLCK
ISTDYPAB EQU   0
ISTATCVT EQU   0
ATCCOM   EQU   ISTATCVT
ATCSTAT  EQU   ATCCOM
ATCSTAT1 EQU   ATCSTAT
ATCSTFLG EQU   ATCSTAT+1
ATCPOFLG EQU   ATCSTAT+2
ATCSTAT4 EQU   ATCSTAT+3
ATCIOTRC EQU   ATCCOM+140
ATCTHTRC EQU   ATCIOTRC
ATCCSMR  EQU   ISTATCVT+296
ATCSHRFG EQU   ISTATCVT+316
ATCHPGM  EQU   ISTATCVT+384
ATCAP33  EQU   ISTATCVT+444
ATCAP36  EQU   ISTATCVT+452
ATCVLCNT EQU   ISTATCVT+772
ATCRNO   EQU   ISTATCVT+788
ATCSOPD  EQU   ISTATCVT+792
ATCSIPD  EQU   ISTATCVT+800
ATCSECST EQU   ISTATCVT+812
ATCSTAT2 EQU   ISTATCVT+818
ATCINCW3 EQU   ISTATCVT+832
ATCVTBAM EQU   ISTATCVT+908
@NM00068 EQU   ATCVTBAM+3
ATCAOSM  EQU   ISTATCVT+912
ATCGSRBQ EQU   ATCAOSM+4
ATCGSRBG EQU   ATCGSRBQ
ATCICAPP EQU   ATCAOSM+100
ATCLDAPP EQU   ATCAOSM+120
ATCDAPVT EQU   ATCAOSM+140
ATCCRA   EQU   ATCAOSM+280
ATCCRACN EQU   ATCCRA+4
ATCSRB   EQU   ATCAOSM+288
ATCSRBCN EQU   ATCSRB+4
ATCCRPL  EQU   ATCAOSM+296
ATCRPLCN EQU   ATCCRPL+4
ATCSQAFR EQU   ATCAOSM+304
ATCORTBC EQU   ATCSQAFR+4
ATCORSRB EQU   ATCORTBC
@NM00070 EQU   ATCAOSM+332
ATCVTFLG EQU   ATCAOSM+392
ATCZFLAG EQU   ATCAOSM+588
CE0REGSV EQU   0
CE0SVBKP EQU   CE0REGSV+4
CE0SVFWP EQU   CE0REGSV+8
WKA      EQU   0
NXTAVAIL EQU   WKA
ISTINCW3 EQU   0
FMZL0011 EQU   0
FMZL0036 EQU   0
NCSUSSRU EQU   0
ISTRPL   EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
LCPZTIE  EQU   LCPCID
LCPZSNAM EQU   LCPZTIE+8
RTRDNCBA EQU   ISTRTR+40
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
LCPZTRV4 EQU   LCPZSNAM+4
LCPZTRV1 EQU   LCPZSNAM
LCPZSNA  EQU   LCPZTIE+4
LCPZFMCA EQU   LCPZTIE
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTRV620 EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTIRM   EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRV607 EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
NCSRUITS EQU   NCSUSSRU+2
NCSRULEN EQU   NCSUSSRU
@NM00030 EQU   CE0REGSV+12
@NM00029 EQU   CE0REGSV
ATCAOS   EQU   ISTATCVT+1584
ATCPOPAB EQU   ATCAOSM+640
ATCVIOPM EQU   ATCAOSM+636
ATCTPMMI EQU   ATCAOSM+632
ATCTPMPB EQU   ATCAOSM+600
ATCRSV88 EQU   ATCAOSM+596
ATCRPLCT EQU   ATCAOSM+594
ATCCRACT EQU   ATCAOSM+592
ATCSRBCT EQU   ATCAOSM+590
ATCRSV75 EQU   ATCAOSM+589
ATCRSV66 EQU   ATCZFLAG
ATCZF001 EQU   ATCZFLAG
ATCTPCP1 EQU   ATCAOSM+584
ATCTPCP0 EQU   ATCAOSM+580
ATCAICTN EQU   ATCAOSM+576
ATCZR01  EQU   ATCAOSM+572
ATCMPLTA EQU   ATCAOSM+568
ATCASCB  EQU   ATCAOSM+564
ATCAP86  EQU   ATCAOSM+560
ATCAP85  EQU   ATCAOSM+556
ATCAP84  EQU   ATCAOSM+552
ATCAP83  EQU   ATCAOSM+548
ATCAP82  EQU   ATCAOSM+544
ATCAP69  EQU   ATCAOSM+540
ATCAP66  EQU   ATCAOSM+536
ATCAP62  EQU   ATCAOSM+532
ATCAPC59 EQU   ATCAOSM+528
ATCAP56  EQU   ATCAOSM+524
ATCAP55  EQU   ATCAOSM+520
ATCRCFY0 EQU   ATCAOSM+516
ATCAP41  EQU   ATCAOSM+512
ATCAPC25 EQU   ATCAOSM+508
ATCAP23  EQU   ATCAOSM+504
ATCTPSPB EQU   ATCAOSM+472
ATCTRMPB EQU   ATCAOSM+440
ATCAPBE  EQU   ATCAOSM+436
ATCPSTA  EQU   ATCAOSM+432
ATCSMABF EQU   ATCAOSM+428
ATCSMAPR EQU   ATCAOSM+424
ATCTPWQA EQU   ATCAOSM+420
ATCSMAID EQU   ATCAOSM+416
ATCSMARA EQU   ATCAOSM+412
ATCCACXA EQU   ATCAOSM+408
ATCZLAAB EQU   ATCAOSM+404
ATCATA10 EQU   ATCAOSM+400
ATCHLTCB EQU   ATCAOSM+396
@NM00073 EQU   ATCVTFLG
ATCVTACT EQU   ATCVTFLG
ATCRPT40 EQU   ATCAOSM+388
ATCRPT39 EQU   ATCAOSM+384
ATCRPT38 EQU   ATCAOSM+380
ATCRPT37 EQU   ATCAOSM+376
ATCRPT36 EQU   ATCAOSM+372
ATCRPT35 EQU   ATCAOSM+368
ATCRPT34 EQU   ATCAOSM+364
ATCRPT33 EQU   ATCAOSM+360
ATCRPT32 EQU   ATCAOSM+356
ATCRPT31 EQU   ATCAOSM+352
ATCRPT30 EQU   ATCAOSM+348
ATCRPT29 EQU   ATCAOSM+344
ATCRPT28 EQU   ATCAOSM+340
ATCRPT27 EQU   ATCAOSM+336
@NM00072 EQU   ATCAOSM+333
@NM00071 EQU   @NM00070
ATCSNUF  EQU   @NM00070
ATCOPKL  EQU   @NM00070
ATCABEN  EQU   @NM00070
ATCAIWT  EQU   ATCAOSM+328
ATCINFDD EQU   ATCAOSM+324
ATCORFMG EQU   ATCAOSM+320
ATCORFRL EQU   ATCAOSM+316
ATCOROBT EQU   ATCAOSM+312
ATCORQG  EQU   ATCORSRB
ATCORTBF EQU   ATCSQAFR
ATCRPLAC EQU   ATCRPLCN+2
ATCRPLRC EQU   ATCRPLCN
ATCCRPLQ EQU   ATCCRPL
ATCSRBAC EQU   ATCSRBCN+2
ATCSRBRC EQU   ATCSRBCN
ATCSRBQ  EQU   ATCSRB
ATCCRAAC EQU   ATCCRACN+2
ATCCRARC EQU   ATCCRACN
ATCCRAQ  EQU   ATCCRA
ATCRPT12 EQU   ATCAOSM+276
ATCDMAPP EQU   ATCAOSM+272
ATCAP38  EQU   ATCAOSM+268
ATCAP37  EQU   ATCAOSM+264
ATCZDFJ0 EQU   ATCAOSM+260
ATCAP51  EQU   ATCAOSM+256
ATCZPAB2 EQU   ATCAOSM+224
ATCZPAB1 EQU   ATCAOSM+192
ATCZLFVT EQU   ATCAOSM+188
ATCZLPVT EQU   ATCAOSM+184
ATCZDVTX EQU   ATCAOSM+180
ATCZDVTA EQU   ATCAOSM+176
ATCZDVT9 EQU   ATCAOSM+172
ATCZDVT8 EQU   ATCAOSM+168
ATCZDVT7 EQU   ATCAOSM+164
ATCRSV56 EQU   ATCDAPVT+22
ATCDAPDG EQU   ATCDAPVT+20
ATCDXCEA EQU   ATCDAPVT+16
ATCDCEA  EQU   ATCDAPVT+12
ATCDPCIA EQU   ATCDAPVT+8
ATCDSIOA EQU   ATCDAPVT+4
ATCDEOEA EQU   ATCDAPVT
ATCZLAEA EQU   ATCLDAPP+16
ATCZLCEA EQU   ATCLDAPP+12
ATCRSV17 EQU   ATCLDAPP+8
ATCSMFRR EQU   ATCLDAPP+4
ATCCDTID EQU   ATCLDAPP
ATCZAEA  EQU   ATCICAPP+16
ATCZCEA  EQU   ATCICAPP+12
ATCCDTCB EQU   ATCICAPP+8
ATCZSIOA EQU   ATCICAPP+4
ATCCDRPH EQU   ATCICAPP
ATCAP65  EQU   ATCAOSM+96
ATCZDVT6 EQU   ATCAOSM+92
ATCZDVT4 EQU   ATCAOSM+88
ATCZDVT3 EQU   ATCAOSM+84
ATCZDVT1 EQU   ATCAOSM+80
ATCICNCB EQU   ATCAOSM+76
ATCZPSVT EQU   ATCAOSM+72
ATCZFSVT EQU   ATCAOSM+68
ATCAP64  EQU   ATCAOSM+64
ATCAP63  EQU   ATCAOSM+60
ATCAP61  EQU   ATCAOSM+56
ATCAP58  EQU   ATCAOSM+52
ATCAP57  EQU   ATCAOSM+48
ATCAP54  EQU   ATCAOSM+44
ATCAP53  EQU   ATCAOSM+40
ATCAP52  EQU   ATCAOSM+36
ATCAP34  EQU   ATCAOSM+32
ATCAP32  EQU   ATCAOSM+28
ATCAP31  EQU   ATCAOSM+24
ATCAP12  EQU   ATCAOSM+20
ATCAP11  EQU   ATCAOSM+16
ATCCMTCB EQU   ATCAOSM+12
ATCPRPH  EQU   ATCAOSM+8
ATCGSRBF EQU   ATCGSRBG
ATCSRBRT EQU   ATCAOSM
@NM00069 EQU   @NM00068
ATCVTMAB EQU   @NM00068
@NM00067 EQU   ATCVTBAM
ATCVDLOK EQU   ISTATCVT+904
ATCVFPAB EQU   ISTATCVT+872
ATCVDPAB EQU   ISTATCVT+840
ATCIOECB EQU   ISTATCVT+836
ATCMODTB EQU   ISTATCVT+828
ATCUSSPT EQU   ISTATCVT+824
ATCSRTAB EQU   ISTATCVT+820
@NM00066 EQU   ISTATCVT+819
@NM00065 EQU   ATCSTAT2
ATCTRSMS EQU   ATCSTAT2
ATCTRLOK EQU   ATCSTAT2
ATCTRPSS EQU   ATCSTAT2
ATCTRESC EQU   ATCSTAT2
ATCTRAPI EQU   ATCSTAT2
ATCNMCTR EQU   ISTATCVT+816
ATCSEC51 EQU   ATCSECST
ATCSEC40 EQU   ATCSIPD+8
ATCSEC30 EQU   ATCSIPD+4
ATCSEC21 EQU   ATCSIPD
ATCSEC10 EQU   ATCSOPD+4
ATCSEC01 EQU   ATCSOPD
ATCPOIA  EQU   ATCRNO+1
@NM00064 EQU   ATCRNO
ATCPODVT EQU   ISTATCVT+784
ATCS49XL EQU   ISTATCVT+780
ATCS49XI EQU   ISTATCVT+776
ATCLCLCT EQU   ATCVLCNT+2
ATCRNCNT EQU   ATCVLCNT
ATCCFEAD EQU   ISTATCVT+768
ATCPTR00 EQU   ISTATCVT+736
ATCRSV10 EQU   ISTATCVT+704
ATCTACB  EQU   ISTATCVT+700
ATCVTINM EQU   ISTATCVT+696
ATCTCLIM EQU   ISTATCVT+692
ATCTCLOM EQU   ISTATCVT+688
ATCVTIPB EQU   ISTATCVT+656
ATCTCIPB EQU   ISTATCVT+624
ATCTIPAB EQU   ISTATCVT+592
ATCOCCCB EQU   ISTATCVT+588
ATCOCCOB EQU   ISTATCVT+584
ATCCDLAD EQU   ISTATCVT+580
ATCCCLAD EQU   ISTATCVT+576
ATCDLRPB EQU   ISTATCVT+544
ATCPGPAB EQU   ISTATCVT+512
ATCVPAB1 EQU   ISTATCVT+480
ATCRSV97 EQU   ISTATCVT+476
ATCRDTLK EQU   ISTATCVT+472
ATCVOCLK EQU   ISTATCVT+468
ATCCDFDN EQU   ISTATCVT+464
ATCCDFIN EQU   ISTATCVT+460
ATCDVTLK EQU   ISTATCVT+456
ATCAP35  EQU   ISTATCVT+448
ATCRSV99 EQU   ISTATCVT+440
ATCONFIG EQU   ISTATCVT+432
ATCNODDS EQU   ISTATCVT+428
ATCNODEL EQU   ISTATCVT+420
ATCRSV69 EQU   ISTATCVT+416
ATCAPCR5 EQU   ISTATCVT+412
ATCLDECB EQU   ISTATCVT+408
ATCLDNCS EQU   ISTATCVT+404
ATCCDPTR EQU   ISTATCVT+400
ATCADEL  EQU   ISTATCVT+396
ATCTODVT EQU   ISTATCVT+392
ATCDEBCH EQU   ISTATCVT+388
ATCHBSIZ EQU   ATCHPGM+2
ATCHBFNO EQU   ATCHPGM
ATCCRME  EQU   ISTATCVT+380
ATCRVCHS EQU   ISTATCVT+372
ATCECTLP EQU   ISTATCVT+368
ATCZDVTB EQU   ISTATCVT+364
ATCECPRT EQU   ISTATCVT+360
ATCVTLOD EQU   ISTATCVT+356
ATCTRPAB EQU   ISTATCVT+352
ATCMSGM  EQU   ISTATCVT+348
ATCMSGP  EQU   ISTATCVT+344
ATCEPT   EQU   ISTATCVT+340
ATCDVT   EQU   ISTATCVT+336
ATCTRCPT EQU   ISTATCVT+332
ATCDVLOD EQU   ISTATCVT+328
ATCALERT EQU   ISTATCVT+324
ATCEPA   EQU   ISTATCVT+320
ATCSAF   EQU   ISTATCVT+318
ATCXRANG EQU   ISTATCVT+317
ATCLAST  EQU   ATCSHRFG
ATCSHRTN EQU   ISTATCVT+308
ATCUEP   EQU   ISTATCVT+304
ATCOCRT  EQU   ISTATCVT+300
ATCCSMA  EQU   ATCCSMR
ATCESC02 EQU   ISTATCVT+292
ATCESC01 EQU   ISTATCVT+288
ATCCDFND EQU   ISTATCVT+284
ATCCDDEL EQU   ISTATCVT+280
ATCCDADD EQU   ISTATCVT+276
ATCMNT   EQU   ISTATCVT+272
ATCRSV16 EQU   ISTATCVT+270
ATCMAXID EQU   ISTATCVT+269
ATCMSGSP EQU   ATCCOM+268
ATCCIDM  EQU   ATCCOM+266
ATCACTRM EQU   ATCCOM+264
ATCNERAP EQU   ATCCOM+260
ATCNESAL EQU   ATCCOM+256
ATCRCC65 EQU   ATCCOM+252
ATCRCC26 EQU   ATCCOM+248
ATCRCC63 EQU   ATCCOM+244
ATCRSV11 EQU   ATCCOM+242
ATCVTMID EQU   ATCCOM+240
ATCAPOST EQU   ATCCOM+236
ATCNERFN EQU   ATCCOM+232
ATCNERNE EQU   ATCCOM+228
ATCNERCV EQU   ATCCOM+224
ATCNERST EQU   ATCCOM+220
ATCDCC61 EQU   ATCCOM+216
ATCDCC60 EQU   ATCCOM+212
ATCSRTDF EQU   ATCCOM+208
ATCSRTAD EQU   ATCCOM+204
ATCFIRA  EQU   ATCCOM+200
ATCSMBQ  EQU   ATCCOM+196
ATCSMRC  EQU   ATCCOM+192
ATCSMRS  EQU   ATCCOM+188
ATCSMQU  EQU   ATCCOM+184
ATCSMRQ  EQU   ATCCOM+180
ATCACDA  EQU   ATCCOM+176
ATCSTMA  EQU   ATCCOM+172
ATCFRSTR EQU   ATCCOM+168
ATCGTSTR EQU   ATCCOM+164
ATCREADA EQU   ATCCOM+160
ATCALOAD EQU   ATCCOM+156
ATCBLDLA EQU   ATCCOM+152
ATCFBRPH EQU   ATCCOM+148
ATCBFTRC EQU   ATCCOM+144
ATCTPBUF EQU   ATCTHTRC
ATCREMOV EQU   ATCCOM+136
ATCADD   EQU   ATCCOM+132
ATCBPDA  EQU   ATCCOM+128
ATCDVTPT EQU   ATCCOM+124
ATCFEPT  EQU   ATCCOM+120
ATCFDVT  EQU   ATCCOM+116
ATCCONFT EQU   ATCCOM+112
ATCPTCHA EQU   ATCCOM+108
ATCAUTHA EQU   ATCCOM+104
ATCACCTA EQU   ATCCOM+100
ATCRDTH  EQU   ATCCOM+96
ATCFRSCH EQU   ATCCOM+92
ATCFSB   EQU   ATCCOM+88
ATCHLTMS EQU   ATCCOM+84
ATCECPRM EQU   ATCCOM+80
ATCECNET EQU   ATCCOM+76
ATCECOPC EQU   ATCCOM+72
ATCVPARM EQU   ATCCOM+68
ATCECVRQ EQU   ATCCOM+64
ATCECSES EQU   ATCCOM+60
ATCOCHA  EQU   ATCCOM+56
ATCDSPLQ EQU   ATCCOM+52
ATCECDSP EQU   ATCCOM+48
ATCVARYQ EQU   ATCCOM+44
ATCECVRY EQU   ATCCOM+40
ATCHALTQ EQU   ATCCOM+36
ATCECHLT EQU   ATCCOM+32
ATCMODQ  EQU   ATCCOM+28
ATCECMOD EQU   ATCCOM+24
ATCASCHD EQU   ATCCOM+20
ATCSRT   EQU   ATCCOM+16
ATCRDT   EQU   ATCCOM+12
ATCDCFRR EQU   ATCCOM+8
ATCAPI   EQU   ATCCOM+4
ATCRSV04 EQU   ATCSTAT4
ATCVTTRC EQU   ATCSTAT4
ATCNCSD  EQU   ATCSTAT4
ATCMTST  EQU   ATCSTAT4
ATCTPRT  EQU   ATCSTAT4
ATCPRTAT EQU   ATCSTAT4
@NM00063 EQU   ATCPOFLG
ATCPOUNS EQU   ATCPOFLG
ATCHSDMF EQU   ATCSTFLG
@NM00062 EQU   ATCSTAT1
ATCMDHLT EQU   ATCSTAT1
ATCINHLT EQU   ATCSTAT1
ATCNETSL EQU   ATCSTAT1
ATCQKHLT EQU   ATCSTAT1
ATCSNHLT EQU   ATCSTAT1
ATCACTIV EQU   ATCSTAT1
ATCSTART EQU   ATCSTAT1
DYPPAB   EQU   ISTDYPAB+16
DYPRSV01 EQU   ISTDYPAB+12
DYPTSKID EQU   ISTDYPAB+8
DYPCHAIN EQU   ISTDYPAB+4
DYPFLGS  EQU   ISTDYPAB+2
DYPLNGTH EQU   ISTDYPAB+1
DYPTYPE  EQU   ISTDYPAB
PABRPHA  EQU   PABRPHFG+1
PABNODQ  EQU   PABFLAGS
PABINHBT EQU   PABFLAGS
PABERLOK EQU   PABERRLK
PABSSN   EQU   PABFLAGS
PABDYNAM EQU   PABFLAGS
PABNORPR EQU   PABFLAGS
PABPRIOR EQU   PABFLAGS
PABAPYP  EQU   PABFLAGS
PABDVTA  EQU   ISTPAB+9
PABOFFST EQU   ISTPAB+8
PABCHNGP EQU   PABCHAIN+1
PABRSV02 EQU   PABCHAIN
PABDELAY EQU   PABCHAIN
PABRUNNG EQU   PABCHAIN
PABRESET EQU   PABCHAIN
PABUNCON EQU   PABCHAIN
PABCDP   EQU   PABCHAIN
PABRESCH EQU   PABCHAIN
PABCHNG  EQU   PABCHAIN
PABWEQP  EQU   PABWEQA+1
PABRSV01 EQU   PABWEQA
PABWEQG  EQU   PABWEQA
VYCRSV02 EQU   ISTVYCRR+128
VYCRSV04 EQU   ISTVYCRR+126
VYCRRSAV EQU   ISTVYCRR+46
VYCRSV03 EQU   VYCCRT+11
CINCFE   EQU   VYCCRT+11
CINCE9   EQU   VYCCRT+11
CINCVO   EQU   VYCCRT+11
CINCR5   EQU   VYCCRT+11
CINCR3   EQU   VYCCRT+10
CINCE8   EQU   VYCCRT+10
CINCE7   EQU   VYCCRT+10
CINCE6   EQU   VYCCRT+10
CINCE5   EQU   VYCCRT+10
CINCE1   EQU   VYCCRT+10
CINCUQ   EQU   VYCCRT+10
CINCUB   EQU   VYCCRT+10
CINCUA   EQU   VYCCRT+9
CINCX9   EQU   VYCCRT+9
CINCX8   EQU   VYCCRT+9
CINCX7   EQU   VYCCRT+9
CINCX6   EQU   VYCCRT+9
CINCX3   EQU   VYCCRT+9
CINCX2   EQU   VYCCRT+9
CINCX1   EQU   VYCCRT+9
CINCX0   EQU   VYCCRT+8
CINCW9   EQU   VYCCRT+8
CINCW8   EQU   VYCCRT+8
CINCW7   EQU   VYCCRT+8
CINCW6   EQU   VYCCRT+8
CINCW5   EQU   VYCCRT+8
CINCW4   EQU   VYCCRT+8
CINCW2   EQU   VYCCRT+8
CINCW0   EQU   VYCCRT+7
CINCV9   EQU   VYCCRT+7
CINCV8   EQU   VYCCRT+7
CINCV7   EQU   VYCCRT+7
CINCV6   EQU   VYCCRT+7
CINCV5   EQU   VYCCRT+7
CINCV4   EQU   VYCCRT+7
CINCV3   EQU   VYCCRT+7
CINCV2   EQU   VYCCRT+6
CINCU8   EQU   VYCCRT+6
CINCU7   EQU   VYCCRT+6
CINCU6   EQU   VYCCRT+6
CINCU5   EQU   VYCCRT+6
CINCU4   EQU   VYCCRT+6
CINCU3   EQU   VYCCRT+6
CINCU2   EQU   VYCCRT+6
CINCU1   EQU   VYCCRT+5
CINCU0   EQU   VYCCRT+5
CINCUM   EQU   VYCCRT+5
CINCS1   EQU   VYCCRT+5
CINCL8   EQU   VYCCRT+5
CINCL7   EQU   VYCCRT+5
CINCL6   EQU   VYCCRT+5
CINCL5   EQU   VYCCRT+5
CINCL4   EQU   VYCCRT+4
CINCL3   EQU   VYCCRT+4
CINCL2   EQU   VYCCRT+4
CINCL1   EQU   VYCCRT+4
CINCL0   EQU   VYCCRT+4
CINCF4   EQU   VYCCRT+4
CINCF3   EQU   VYCCRT+4
CINCF1   EQU   VYCCRT+4
CINCFM   EQU   VYCCRT+3
CINCE4   EQU   VYCCRT+3
CINCE3   EQU   VYCCRT+3
CINCE2   EQU   VYCCRT+3
CINCD9   EQU   VYCCRT+3
CINCD8   EQU   VYCCRT+3
CINCD7   EQU   VYCCRT+3
CINCD6   EQU   VYCCRT+2
CINCD5   EQU   VYCCRT+2
CINCD4   EQU   VYCCRT+2
CINCD3   EQU   VYCCRT+2
CINCD2   EQU   VYCCRT+2
CINCD1   EQU   VYCCRT+2
CINCIP   EQU   VYCCRT+2
CINCR2   EQU   VYCCRT+2
CINCMS   EQU   VYCCRT+1
CINCVN   EQU   VYCCRT+1
CINCVS   EQU   VYCCRT+1
CINCVP   EQU   VYCCRT+1
CINCVX   EQU   VYCCRT+1
CINCFS   EQU   VYCCRT+1
CINCSM   EQU   VYCCRT+1
CINCR1   EQU   VYCCRT+1
CINCLF   EQU   VYCCRT
CINCVA   EQU   VYCCRT
CINCVI   EQU   VYCCRT
CINCMD   EQU   VYCCRT
CINCMY   EQU   VYCCRT
CINCDL   EQU   VYCCRT
CINCIO   EQU   VYCCRT
CINCCL   EQU   VYCCRT
VYCRSV01 EQU   VYCNTRD+11
NINCFE   EQU   VYCNTRD+11
NINCE9   EQU   VYCNTRD+11
NINCVO   EQU   VYCNTRD+11
NINCR5   EQU   VYCNTRD+11
NINCR3   EQU   VYCNTRD+10
NINCE8   EQU   VYCNTRD+10
NINCE7   EQU   VYCNTRD+10
NINCE6   EQU   VYCNTRD+10
NINCE5   EQU   VYCNTRD+10
NINCE1   EQU   VYCNTRD+10
NINCUQ   EQU   VYCNTRD+10
NINCUB   EQU   VYCNTRD+10
NINCUA   EQU   VYCNTRD+9
NINCX9   EQU   VYCNTRD+9
NINCX8   EQU   VYCNTRD+9
NINCX7   EQU   VYCNTRD+9
NINCX6   EQU   VYCNTRD+9
NINCX3   EQU   VYCNTRD+9
NINCX2   EQU   VYCNTRD+9
NINCX1   EQU   VYCNTRD+9
NINCX0   EQU   VYCNTRD+8
NINCW9   EQU   VYCNTRD+8
NINCW8   EQU   VYCNTRD+8
NINCW7   EQU   VYCNTRD+8
NINCW6   EQU   VYCNTRD+8
NINCW5   EQU   VYCNTRD+8
NINCW4   EQU   VYCNTRD+8
NINCW2   EQU   VYCNTRD+8
NINCW0   EQU   VYCNTRD+7
NINCV9   EQU   VYCNTRD+7
NINCV8   EQU   VYCNTRD+7
NINCV7   EQU   VYCNTRD+7
NINCV6   EQU   VYCNTRD+7
NINCV5   EQU   VYCNTRD+7
NINCV4   EQU   VYCNTRD+7
NINCV3   EQU   VYCNTRD+7
NINCV2   EQU   VYCNTRD+6
NINCU8   EQU   VYCNTRD+6
NINCU7   EQU   VYCNTRD+6
NINCU6   EQU   VYCNTRD+6
NINCU5   EQU   VYCNTRD+6
NINCU4   EQU   VYCNTRD+6
NINCU3   EQU   VYCNTRD+6
NINCU2   EQU   VYCNTRD+6
NINCU1   EQU   VYCNTRD+5
NINCU0   EQU   VYCNTRD+5
NINCUM   EQU   VYCNTRD+5
NINCS1   EQU   VYCNTRD+5
NINCL8   EQU   VYCNTRD+5
NINCL7   EQU   VYCNTRD+5
NINCL6   EQU   VYCNTRD+5
NINCL5   EQU   VYCNTRD+5
NINCL4   EQU   VYCNTRD+4
NINCL3   EQU   VYCNTRD+4
NINCL2   EQU   VYCNTRD+4
NINCL1   EQU   VYCNTRD+4
NINCL0   EQU   VYCNTRD+4
NINCF4   EQU   VYCNTRD+4
NINCF3   EQU   VYCNTRD+4
NINCF1   EQU   VYCNTRD+4
NINCFM   EQU   VYCNTRD+3
NINCE4   EQU   VYCNTRD+3
NINCE3   EQU   VYCNTRD+3
NINCE2   EQU   VYCNTRD+3
NINCD9   EQU   VYCNTRD+3
NINCD8   EQU   VYCNTRD+3
NINCD7   EQU   VYCNTRD+3
NINCD6   EQU   VYCNTRD+2
NINCD5   EQU   VYCNTRD+2
NINCD4   EQU   VYCNTRD+2
NINCD3   EQU   VYCNTRD+2
NINCD2   EQU   VYCNTRD+2
NINCD1   EQU   VYCNTRD+2
NINCIP   EQU   VYCNTRD+2
NINCR2   EQU   VYCNTRD+2
NINCMS   EQU   VYCNTRD+1
NINCVN   EQU   VYCNTRD+1
NINCVS   EQU   VYCNTRD+1
NINCVP   EQU   VYCNTRD+1
NINCVX   EQU   VYCNTRD+1
NINCFS   EQU   VYCNTRD+1
NINCSM   EQU   VYCNTRD+1
NINCR1   EQU   VYCNTRD+1
NINCLF   EQU   VYCNTRD
NINCVA   EQU   VYCNTRD
NINCVI   EQU   VYCNTRD
NINCMD   EQU   VYCNTRD
NINCMY   EQU   VYCNTRD
NINCDL   EQU   VYCNTRD
NINCIO   EQU   VYCNTRD
NINCCL   EQU   VYCNTRD
VYCCNS   EQU   ISTVYCRR
CNSRSV05 EQU   CNSTFLDB+2
CNSLOG0B EQU   CNSTFLDB+2
CNSACCTB EQU   CNSTFLDB+2
CNSFREEB EQU   CNSTFLDB+2
CNSGETSB EQU   CNSTFLDB+2
CNSSEARB EQU   CNSTFLDB+2
CNSQUEUB EQU   CNSTFLDB+2
CNSACONB EQU   CNSTFLDB+2
CNSTCONB EQU   CNSTFLDB+1
CNSCLAQB EQU   CNSTFLDB+1
CNSCLINB EQU   CNSTFLDB+1
CNSGBINB EQU   CNSTFLDB+1
CNSLGINB EQU   CNSTFLDB+1
CNSACINB EQU   CNSTFLDB+1
CNSPSINB EQU   CNSTFLDB+1
CNSRQRLB EQU   CNSTFLDB+1
CNSTRRLB EQU   CNSTFLDB
CNSDORLB EQU   CNSTFLDB
CNSRLINB EQU   CNSTFLDB
CNSQREQB EQU   CNSTFLDB
CNSXREQB EQU   CNSTFLDB
CNSAQINB EQU   CNSTFLDB
CNSAUTHB EQU   CNSTFLDB
CNSMRINB EQU   CNSTFLDB
CNSRSV01 EQU   CNSTFLDA+2
CNSLOG0A EQU   CNSTFLDA+2
CNSACCTA EQU   CNSTFLDA+2
CNSFREEA EQU   CNSTFLDA+2
CNSGETSA EQU   CNSTFLDA+2
CNSSEARA EQU   CNSTFLDA+2
CNSQUEUA EQU   CNSTFLDA+2
CNSACONA EQU   CNSTFLDA+2
CNSTCONA EQU   CNSTFLDA+1
CNSCLAQA EQU   CNSTFLDA+1
CNSCLINA EQU   CNSTFLDA+1
CNSGBINA EQU   CNSTFLDA+1
CNSLGINA EQU   CNSTFLDA+1
CNSACINA EQU   CNSTFLDA+1
CNSPSINA EQU   CNSTFLDA+1
CNSRQRLA EQU   CNSTFLDA+1
CNSTRRLA EQU   CNSTFLDA
CNSDORLA EQU   CNSTFLDA
CNSRLINA EQU   CNSTFLDA
CNSQREQA EQU   CNSTFLDA
CNSXREQA EQU   CNSTFLDA
CNSAQINA EQU   CNSTFLDA
CNSAUTHA EQU   CNSTFLDA
CNSMRINA EQU   CNSTFLDA
CNSTPFX  EQU   ISTCNSTA
CRACHAIN EQU   ISTCRA+928
CRARSV02 EQU   ISTCRA+924
CRARSV01 EQU   ISTCRA+920
CRABFTBA EQU   CRABUFA
CRAMASK  EQU   CRASVC+64
CRAHSIZ  EQU   CRASVC+60
CRAASCRR EQU   CRASVC
CRAPROCR EQU   ISTCRA+312
CRAPSS   EQU   ISTCRA+160
CRARPH   EQU   ISTCRA+52
CRALAPTR EQU   CRABASIC+48
CRAL9PTR EQU   CRABASIC+44
CRAL8PTR EQU   CRABASIC+40
CRAL7PTR EQU   CRABASIC+36
CRAL6PTR EQU   CRABASIC+32
CRAL5PTR EQU   CRABASIC+28
CRAL3PTR EQU   CRABASIC+20
CRAL2PTR EQU   CRABASIC+16
CRAL1PTR EQU   CRABASIC+12
CRALEV01 EQU   CRALKACT+3
CRALEV02 EQU   CRALKACT+3
CRALEV03 EQU   CRALKACT+3
CRALEV04 EQU   CRALKACT+3
CRALEV05 EQU   CRALKACT+3
CRALEV06 EQU   CRALKACT+3
CRALEV07 EQU   CRALKACT+3
CRALEV08 EQU   CRALKACT+3
CRALEV09 EQU   CRALKACT+2
CRALEV10 EQU   CRALKACT+2
CRALEV11 EQU   CRALKACT+2
CRALEV12 EQU   CRALKACT+2
CRALEV13 EQU   CRALKACT+2
CRALEV14 EQU   CRALKACT+2
CRALEV15 EQU   CRALKACT+2
CRALEV16 EQU   CRALKACT+2
CRALEV17 EQU   CRALKACT+1
CRALEV18 EQU   CRALKACT+1
CRALEV19 EQU   CRALKACT+1
CRALEV20 EQU   CRALKACT+1
CRALEV21 EQU   CRALKACT+1
CRALEV22 EQU   CRALKACT+1
CRALEV23 EQU   CRALKACT+1
CRALEV24 EQU   CRALKACT+1
CRALEV25 EQU   CRALKACT
CRALEV26 EQU   CRALKACT
CRALEV27 EQU   CRALKACT
CRALEV28 EQU   CRALKACT
CRALEV29 EQU   CRALKACT
CRALEV30 EQU   CRALKACT
CRALEV31 EQU   CRALKACT
CRALEV32 EQU   CRALKACT
CRAFRR   EQU   CRAHDR+4
RPHNEXPO EQU   ISTRPH+104
RPHSAV16 EQU   RPHWORK+60
RPHSAV15 EQU   RPHWORK+56
RPHSAV14 EQU   RPHWORK+52
RPHSAV13 EQU   RPHWORK+48
RPHSAV12 EQU   RPHWORK+44
RPHSAV11 EQU   RPHWORK+40
RPHSAV10 EQU   RPHWORK+36
RPHSAVE9 EQU   RPHWORK+32
RPHSAVE8 EQU   RPHWORK+28
RPHSAVE7 EQU   RPHWORK+24
RPHSAVE6 EQU   RPHWORK+20
RPHSAVE5 EQU   RPHWORK+16
RPHSAVE4 EQU   RPHWORK+12
RPHSAVE3 EQU   RPHWORK+8
RPHSAVE2 EQU   RPHWORK+4
RPHSHALF EQU   RPHSAVE1+2
RPHSBIT8 EQU   RPHSBITS
RPHSBIT7 EQU   RPHSBITS
RPHSBIT6 EQU   RPHSBITS
RPHSBIT5 EQU   RPHSBITS
RPHSBIT4 EQU   RPHSBITS
RPHSBIT3 EQU   RPHSBITS
RPHSBIT2 EQU   RPHSBITS
RPHSBIT1 EQU   RPHSBITS
RPHSBYTE EQU   RPHSAVE1
RPHPABQP EQU   RPHPABQA+1
RPHPABFG EQU   RPHPABQA
RPHSRP34 EQU   RPHSRPRM+2
RPHSRP12 EQU   RPHSRPRM
RPHWEGT  EQU   RPHCSPA
RPHMAJCB EQU   ISTRPH+21
RPHPABOF EQU   ISTRPH+20
RPHRESUM EQU   RPHRESMA+1
RPHRSV01 EQU   RPHWPFLG
RPHPURGE EQU   RPHWPFLG
RPHPT    EQU   RPHWPFLG
RPHWT    EQU   RPHWPFLG
RPHRSKEY EQU   RPHWPFLG
RPHDVTA  EQU   ISTRPH+12
RPHTIK   EQU   RPHTSKID+3
@NM00061 EQU   RPHTSKID
RPHRPHAP EQU   RPHRPHA+1
@NM00060 EQU   RPHRPHA
RPHGATE  EQU   RPHRPHA
@NM00059 EQU   RPHFLGB
RPHRLCRA EQU   RPHFLGB
RPHNRSAV EQU   RPHFLGB
RPHPGCMP EQU   RPHFLGB
RPHFBAPS EQU   RPHFLGB
RPHBSSP  EQU   RPHFLGB
RPHLOCK  EQU   RPHFLGB
RPHFNFLG EQU   RPHFSTLC
RPHMLTCP EQU   RPHFLAGS
RPHSMCLR EQU   RPHFLAGS
RPHSMTYP EQU   RPHFLAGS
RPHSMQ   EQU   RPHFLAGS
RPHAUTEX EQU   RPHAPTYP
RPHSPGIN EQU   RPHFLAGS
RPHOGIND EQU   RPHFLAGS
RPHLNGTH EQU   RPHCNTL+1
RPHTYPE  EQU   RPHCNTL
@NM00058 EQU   ISTAPCRR+137
@NM00057 EQU   APC57FLG
APCNREL  EQU   APC57FLG
APCRECRA EQU   APC57FLG
@NM00056 EQU   APC54FLG
APCRLST  EQU   APC54FLG
APCPR153 EQU   APC53FLG
@NM00055 EQU   APC52FLG
APCWKF   EQU   APC52FLG
APCNWF   EQU   APC52FLG
APCRDQ   EQU   APC52FLG
APCQENQ  EQU   APC52FLG
APCSMSR  EQU   APC52FLG
APCCKRQ  EQU   APC52FLG
@NM00054 EQU   APC31FLG
APCSORT  EQU   APC31FLG
APCRESCH EQU   APC31FLG
APCTPXIT EQU   APC31FLG
APCSWTWD EQU   ISTAPCRR+128
APCSAV2  EQU   ISTAPCRR+124
APCSAV1  EQU   ISTAPCRR+120
APCRETCD EQU   APCCOMF+2
@NM00053 EQU   APCCOMF1+1
APCZLBER EQU   APCCOMF1
APCEXIT  EQU   APCCOMF1
APCRELR  EQU   APCCOMF1
APCIRB2  EQU   APCCOMF1
APCIRB1  EQU   APCCOMF1
APCSMCR  EQU   APCCOMF1
APCUETSK EQU   APCCOMF1
APCSSTSK EQU   APCCOMF1
APCESTAL EQU   APCSAVE
APCFRRPM EQU   ISTAPCRR+40
APCQWFO  EQU   ISTAPCRR+36
APCPABSV EQU   ISTAPCRR+32
APCRTRN  EQU   ISTAPCRR+28
APCTCBA  EQU   ISTAPCRR+24
APCPSTA  EQU   ISTAPCRR+20
@NM00052 EQU   APCRFLG+1
APC31R   EQU   APCRFLG
APC58R   EQU   APCRFLG
APC57R   EQU   APCRFLG
APC56R   EQU   APCRFLG
APC54R   EQU   APCRFLG
APC53R   EQU   APCRFLG
APC52R   EQU   APCRFLG
APC51R   EQU   APCRFLG
@NM00051 EQU   APCATFLG+1
APC31E   EQU   APCATFLG
APC58E   EQU   APCATFLG
APC57E   EQU   APCATFLG
APC56E   EQU   APCATFLG
APC54E   EQU   APCATFLG
APC53E   EQU   APCATFLG
APC52E   EQU   APCATFLG
APC51E   EQU   APCATFLG
APCHDRSV EQU   ISTAPCRR
ASCPSREG EQU   ISTASCRR+44
ASCUSR01 EQU   ASCUSRGS+12
ASCUSR00 EQU   ASCUSRGS+8
ASCUSR15 EQU   ASCUSRGS+4
ASCUSR14 EQU   ASCUSRGS
ASCETRYA EQU   ISTASCRR+24
ASCKEY   EQU   ISTASCRR+23
ASCAUDIT EQU   ASCFLG3
ASCFBDUD EQU   ASCFLG3
ASCLLKF  EQU   ASCFLG3
ASCKEYF  EQU   ASCFLG3
ASCFBDAL EQU   ASCFLG3
ASCFSRGT EQU   ASCFLG3
ASCICR   EQU   ASCFLG2
ASCFSRIC EQU   ASCFLG2
ASCFBDIC EQU   ASCFLG2
ASCFBAIC EQU   ASCFLG2
ASCPASTR EQU   ASCFLG1
ASCFSR   EQU   ASCFLG1
ASCFBD   EQU   ASCFLG1
ASCFBA   EQU   ASCFLG1
ASCPFCRR EQU   ISTASCRR
ZCRRU    EQU   ZCRRHRU+3
ZCRRH    EQU   ZCRRHRU
ZCRWORDA EQU   ISTZCRR+477
ZCRCMNRC EQU   ISTZCRR+476
ZCRRSV97 EQU   ZCRENTER+18
ZCREIC2B EQU   ZCRENTER+18
ZCREAC2B EQU   ZCRENTER+18
ZCRELCAB EQU   ZCRENTER+18
ZCREDCMF EQU   ZCRENTER+18
ZCREBCIF EQU   ZCRENTER+18
ZCREICSG EQU   ZCRENTER+18
ZCREDCK0 EQU   ZCRENTER+18
ZCRECFY0 EQU   ZCRENTER+17
ZCREKCCB EQU   ZCRENTER+17
ZCREDCNB EQU   ZCRENTER+17
ZCREICOE EQU   ZCRENTER+17
ZCREBCNB EQU   ZCRENTER+17
ZCREBC0L EQU   ZCRENTER+17
ZCREBCAL EQU   ZCRENTER+17
ZCREDCQR EQU   ZCRENTER+17
ZCREDCPR EQU   ZCRENTER+16
ZCREBCSB EQU   ZCRENTER+16
ZCREAC1R EQU   ZCRENTER+16
ZCRECCCI EQU   ZCRENTER+16
ZCRECCAI EQU   ZCRENTER+16
ZCRECCBI EQU   ZCRENTER+16
ZCREBCAR EQU   ZCRENTER+16
ZCREBCDR EQU   ZCRENTER+16
ZCREBCBR EQU   ZCRENTER+15
ZCREDCXR EQU   ZCRENTER+15
ZCREDCWB EQU   ZCRENTER+15
ZCREDCWR EQU   ZCRENTER+15
ZCREKCCN EQU   ZCRENTER+15
ZCREKCBN EQU   ZCRENTER+15
ZCREKCBB EQU   ZCRENTER+15
ZCREJC0B EQU   ZCRENTER+15
ZCREJCDB EQU   ZCRENTER+14
ZCREJCCB EQU   ZCRENTER+14
ZCREJCBB EQU   ZCRENTER+14
ZCREJCAB EQU   ZCRENTER+14
ZCREIC1B EQU   ZCRENTER+14
ZCREIC0B EQU   ZCRENTER+14
ZCREICX0 EQU   ZCRENTER+14
ZCREICWB EQU   ZCRENTER+14
ZCREICVB EQU   ZCRENTER+13
ZCREICUB EQU   ZCRENTER+13
ZCREICTB EQU   ZCRENTER+13
ZCREICSC EQU   ZCRENTER+13
ZCREICSB EQU   ZCRENTER+13
ZCREICRB EQU   ZCRENTER+13
ZCREICQB EQU   ZCRENTER+13
ZCREICQA EQU   ZCRENTER+13
ZCREICOB EQU   ZCRENTER+12
ZCREICOA EQU   ZCRENTER+12
ZCREICNB EQU   ZCRENTER+12
ZCREICNA EQU   ZCRENTER+12
ZCREICMB EQU   ZCRENTER+12
ZCREICLB EQU   ZCRENTER+12
ZCREICKG EQU   ZCRENTER+12
ZCREICKE EQU   ZCRENTER+12
ZCREICKB EQU   ZCRENTER+11
ZCREICJB EQU   ZCRENTER+11
ZCREICID EQU   ZCRENTER+11
ZCREICIB EQU   ZCRENTER+11
ZCREICHB EQU   ZCRENTER+11
ZCREICGB EQU   ZCRENTER+11
ZCREICEB EQU   ZCRENTER+11
ZCREICDB EQU   ZCRENTER+11
ZCREICCI EQU   ZCRENTER+10
ZCREICCB EQU   ZCRENTER+10
ZCREICBI EQU   ZCRENTER+10
ZCREICBB EQU   ZCRENTER+10
ZCREICAB EQU   ZCRENTER+10
ZCREICAA EQU   ZCRENTER+10
ZCREHCAN EQU   ZCRENTER+10
ZCREGC0B EQU   ZCRENTER+10
ZCREGC0A EQU   ZCRENTER+9
ZCREGCLA EQU   ZCRENTER+9
ZCREGCEB EQU   ZCRENTER+9
ZCREGCDB EQU   ZCRENTER+9
@NM00050 EQU   ZCRENTER+9
ZCREGCBB EQU   ZCRENTER+9
ZCREGCAB EQU   ZCRENTER+9
ZCREFCEB EQU   ZCRENTER+9
ZCREFCEA EQU   ZCRENTER+8
ZCREECTA EQU   ZCRENTER+8
ZCREECEA EQU   ZCRENTER+8
ZCREECDA EQU   ZCRENTER+8
ZCREECCB EQU   ZCRENTER+8
ZCREECCA EQU   ZCRENTER+8
ZCREECBB EQU   ZCRENTER+8
ZCREECBA EQU   ZCRENTER+8
ZCREDCMB EQU   ZCRENTER+7
ZCREDCL0 EQU   ZCRENTER+7
ZCREDCKB EQU   ZCRENTER+7
ZCREDCKA EQU   ZCRENTER+7
ZCREDCJ0 EQU   ZCRENTER+7
ZCREDCI0 EQU   ZCRENTER+7
ZCREDCH0 EQU   ZCRENTER+7
ZCREDCF0 EQU   ZCRENTER+7
ZCREDCE0 EQU   ZCRENTER+6
ZCREDCD0 EQU   ZCRENTER+6
ZCREDCC0 EQU   ZCRENTER+6
ZCREDCB0 EQU   ZCRENTER+6
ZCREDCA0 EQU   ZCRENTER+6
ZCRECC2B EQU   ZCRENTER+6
ZCRECC1B EQU   ZCRENTER+6
ZCRECC1A EQU   ZCRENTER+6
ZCRECC0B EQU   ZCRENTER+5
ZCRECC0A EQU   ZCRENTER+5
ZCREBC0B EQU   ZCRENTER+5
ZCREBC0A EQU   ZCRENTER+5
ZCREBCZ0 EQU   ZCRENTER+5
ZCREBCY0 EQU   ZCRENTER+5
ZCREBCX0 EQU   ZCRENTER+5
ZCREBCXA EQU   ZCRENTER+5
ZCREBCSC EQU   ZCRENTER+4
ZCREBCRB EQU   ZCRENTER+4
ZCREBCRA EQU   ZCRENTER+4
ZCREBCQB EQU   ZCRENTER+4
ZCREBCPB EQU   ZCRENTER+4
ZCREBCOB EQU   ZCRENTER+4
ZCREBCNE EQU   ZCRENTER+4
ZCREBCND EQU   ZCRENTER+4
ZCREBCMB EQU   ZCRENTER+3
ZCREBCLB EQU   ZCRENTER+3
ZCREBCLA EQU   ZCRENTER+3
ZCREBCKB EQU   ZCRENTER+3
ZCREBCKA EQU   ZCRENTER+3
ZCREBCJB EQU   ZCRENTER+3
ZCREBCJA EQU   ZCRENTER+3
ZCREBCID EQU   ZCRENTER+3
ZCREBCIB EQU   ZCRENTER+2
ZCREBCIA EQU   ZCRENTER+2
ZCREBCHB EQU   ZCRENTER+2
ZCREBCHA EQU   ZCRENTER+2
ZCREBCGB EQU   ZCRENTER+2
ZCREBCGA EQU   ZCRENTER+2
ZCREBCFB EQU   ZCRENTER+2
ZCREBCFA EQU   ZCRENTER+2
ZCREBCEB EQU   ZCRENTER+1
ZCREBCDI EQU   ZCRENTER+1
ZCREBCCB EQU   ZCRENTER+1
ZCREBCBI EQU   ZCRENTER+1
ZCREBCBB EQU   ZCRENTER+1
ZCREBCBA EQU   ZCRENTER+1
ZCREBCAM EQU   ZCRENTER+1
ZCREBCAI EQU   ZCRENTER+1
ZCREBCAG EQU   ZCRENTER
ZCREBCAE EQU   ZCRENTER
ZCREBCAB EQU   ZCRENTER
ZCREBCAA EQU   ZCRENTER
ZCREAC1B EQU   ZCRENTER
ZCREAC0B EQU   ZCRENTER
ZCREAC0A EQU   ZCRENTER
ZCREAC1A EQU   ZCRENTER
ZCRTNAME EQU   ZCRAUDIT+1
ZCRTID   EQU   ZCRAUDIT
ZCRREMIC EQU   ISTZCRR+436
ZCRSAVEZ EQU   ISTZCRR+196
ZCRDAFSV EQU   ZCRCIDSV+2
ZCRSAFSV EQU   ZCRCIDSV
ZCRR13SV EQU   ISTZCRR+188
ZCRR2SV  EQU   ISTZCRR+184
ZCROPCDE EQU   ISTZCRR+183
ZCRPRMTC EQU   ISTZCRR+182
ZCRRCDSV EQU   ISTZCRR+181
ZCRAWQSW EQU   ISTZCRR+180
ZCRTOPQ  EQU   ISTZCRR+180
ZCRLSTFB EQU   ISTZCRR+180
ZCRXSCHD EQU   ISTZCRR+180
ZCRNXTEL EQU   ISTZCRR+180
ZCRSCANQ EQU   ISTZCRR+180
ZCRMOREL EQU   ISTZCRR+180
ZCRFBPRC EQU   ISTZCRR+180
ZCRFSBSV EQU   ISTZCRR+176
ZCRSVWK5 EQU   ZCRWKARA+16
ZCRSVWK4 EQU   ZCRWKARA+12
ZCRSVWK3 EQU   ZCRWKARA+8
ZCRSVWK2 EQU   ZCRWKARA+4
ZCRSVWK1 EQU   ZCRWKARA
ZCRSVF25 EQU   ZCRSVRTN+96
ZCRSVF24 EQU   ZCRSVRTN+92
ZCRSVF23 EQU   ZCRSVRTN+88
ZCRSVF22 EQU   ZCRSVRTN+84
ZCRSVF21 EQU   ZCRSVRTN+80
ZCRSVF20 EQU   ZCRSVRTN+76
ZCRSVF19 EQU   ZCRSVRTN+72
ZCRSVF18 EQU   ZCRSVRTN+68
ZCRSVF17 EQU   ZCRSVRTN+64
ZCRSVF16 EQU   ZCRSVRTN+60
ZCRSVF15 EQU   ZCRSVRTN+56
ZCRSVF14 EQU   ZCRSVRTN+52
ZCRSVF13 EQU   ZCRSVRTN+48
ZCRSVF12 EQU   ZCRSVRTN+44
ZCRSVF11 EQU   ZCRSVRTN+40
ZCRSVF10 EQU   ZCRSVRTN+36
ZCRSVF9  EQU   ZCRSVRTN+32
ZCRSVF8  EQU   ZCRSVRTN+28
ZCRSVF7  EQU   ZCRSVRTN+24
ZCRSVF6  EQU   ZCRSVRTN+20
ZCRSVF5  EQU   ZCRSVRTN+16
ZCRSVF4  EQU   ZCRSVRTN+12
ZCRSVF3  EQU   ZCRSVRTN+8
ZCRSVF2  EQU   ZCRSVRTN+4
ZCRSVF1  EQU   ZCRSVRTN
ZCRPVZB  EQU   ISTZCRR+52
ZCRZLB   EQU   ISTZCRR+48
ZCRBFPTR EQU   ISTZCRR+44
ZCRCCWA  EQU   ISTZCRR+40
ZCRPSW   EQU   ZCRPARMS+15
ZCRPCHAR EQU   ZCRPARMS+14
ZCRPRES2 EQU   ZCRPCOD2
ZCRPMFGF EQU   ZCRPCOD2
ZCRPFHDR EQU   ZCRPCOD2
ZCRPPG2  EQU   ZCRPCOD2
ZCRPRES  EQU   ZCRPCOD1
ZCRPCFTX EQU   ZCRPCOD1
ZCRPBUF  EQU   ZCRPCOD1
ZCRPLSCB EQU   ZCRPCOD1
ZCRPLSBQ EQU   ZCRPLSBF
ZCRPFSB  EQU   ZCRPCOD1
ZCRPLNG  EQU   ZCRPCOD1
ZCRPPG   EQU   ZCRPCOD1
ZCRDTODA EQU   ZCRDFRDA
ZCRMLNG  EQU   ZCRPARMS+8
ZCRTBPTR EQU   ZCRPARMS+4
ZCRCBPTR EQU   ZCRFBPTR
ZCRCRLCP EQU   ISTZCRR+20
@NM00049 EQU   ZCRSCPSW
ZCRSKIPT EQU   ZCRSCPSW
ZCRFSBWE EQU   ZCRSCPSW
ZCRPRCMP EQU   ZCRSCPSW
ZCRLREQ  EQU   ZCRSCPSW
ZCRRJLCP EQU   ZCRSCPSW
ZCRTPINV EQU   ZCRSCPSW
ZCRTPEX  EQU   ZCRSCPSW
@NM00048 EQU   ZCRIBPR
ZCR3270R EQU   ZCRIBPR
ZCR3270  EQU   ZCRIBPR
ZCRLCPFD EQU   ZCRIBPR
ZCRLCPFR EQU   ZCRIBPR
ZCRRELK  EQU   ZCRIBPR
ZCRERR   EQU   ZCRIBPR
ZCRNOBUF EQU   ZCRIBPR
@NM00047 EQU   ZCRPFLGS
ZCRQAHED EQU   ZCRPFLGS
ZCRF1RES EQU   ZCRGENSW
ZCRBRIS  EQU   ZCRGENSW
ZCRCLRBD EQU   ZCRGENSW
ZCREXRES EQU   ZCRGENSW
ZCRLCSYN EQU   ZCRGENSW
ZCRRT06  EQU   ZCRGENSW
ZCRTSW2  EQU   ZCRGENSW
ZCRTSW1  EQU   ZCRGENSW
ZCRINLCP EQU   ZCRFLGS3
ZCRWRPTR EQU   ZCRFLGS3
ZCRNOFRE EQU   ZCRFLGS3
ZCREDRIV EQU   ZCRFLGS3
ZCRDISC  EQU   ZCRFLGS3
ZCRTPDIS EQU   ZCRFLGS3
ZCRTPCON EQU   ZCRFLGS3
ZCRTIC   EQU   ZCRFLGS3
ZCRCNLXL EQU   ZCRRESET
ZCRENDAN EQU   ZCRSWFLD
ZCRENDXL EQU   ZCRSWFLD
ZCRENDX  EQU   ZCRSWFLD
ZCROB1   EQU   ZCRNDLCP
ZCRENDPR EQU   ZCRSWFLD
ZCREXTYP EQU   ZCRSWFLD
ZCRSLCP  EQU   ZCRENDSH
ZCRIF0E3 EQU   ZCRFLGS2
ZCRIF0E2 EQU   ZCRFLGS2
ZCRIF0E1 EQU   ZCRFLGS2
ZCROB    EQU   ZCRFLGS2
ZCRFMSED EQU   ZCRFLGS2
ZCRSHEDI EQU   ZCRFLGS2
ZCRLOCAL EQU   ZCRFLGS2
ZCRFEXIT EQU   ZCRFLGS1
ZCRUNSOL EQU   ZCRFLGS1
ZCRENDLP EQU   ZCRFLGS1
ZCRNRMEX EQU   ZCRFLGS1
ZCRWAIT  EQU   ZCRFLGS1
ZCRDEQSW EQU   ZCRFLGS1
ZCRQUESW EQU   ZCRFLGS1
ZCREXSW  EQU   ZCRFLGS1
ZCRFRRA  EQU   ISTZCRR+8
ZCRCHAIN EQU   ISTZCRR+4
ZCRFLAG  EQU   ZCRCRR+3
ZCRLEN   EQU   ZCRCRR+1
ZCRID    EQU   ZCRCRR
CCFRSVD1 EQU   CFCCRT
CCFCR2   EQU   CFCCRT
CCFCRP   EQU   CFCCRT
CCFCR1   EQU   CFCCRT
CCFCS2   EQU   CFCCRT
CCFCS1   EQU   CFCCRT
NCFRSVD  EQU   CFCNTRD
NCFCR2   EQU   CFCNTRD
NCFCRP   EQU   CFCNTRD
NCFCR1   EQU   CFCNTRD
NCFCS2   EQU   CFCNTRD
NCFCS1   EQU   CFCNTRD
PFCRSV01 EQU   ISTPFCRR+13
PFCFTA   EQU   ISTPFCRR+12
CRRFRR   EQU   PFCFRRO
CRRCHAIN EQU   PFCCRRO
CRRLEN   EQU   PFCCRRLN
PFCRSV10 EQU   PFCCRR+1
CRRID    EQU   PFCCRRID
ZSAZTRAC EQU   ISTZSAVE+36
ZSAZSVVR EQU   ISTZSAVE+12
ZSAZSVRR EQU   ISTZSAVE+8
ZSAZSVFC EQU   ISTZSAVE+4
ZSAZACTV EQU   ZSAZSVMS
LCPFTYPE EQU   LCPRPHA
LCPRSTQH EQU   LCPLCCW
LCPCLREP EQU   ISTLCPB+44
LCPUBFSB EQU   LCPFLCCW
LCPRSV77 EQU   ISTLCPB+39
LCPLCCWC EQU   ISTLCPB+38
LCPRSV78 EQU   LCPFLG1
LCPTRANS EQU   LCPFLG1
LCPSTLB  EQU   LCPFLG1
LCPREDRV EQU   LCPFLG1
LCPDIRPT EQU   LCPFLG1
LCPINTER EQU   LCPFLG1
LCPRESET EQU   LCPFLG1
LCPSTYPE EQU   ISTLCPB+36
LCPFSNCH EQU   ISTLCPB+34
LCPFOSN  EQU   ISTLCPB+32
LCPTLBAD EQU   ISTLCPB+28
LCPFDB2  EQU   LCPFDBA+1
LCPFDB1  EQU   LCPFDBA
LCPNXLCW EQU   ISTLCPB+20
LCPDAF   EQU   LCPCID+2
LCPSAF   EQU   LCPCID
LCPLCCW1 EQU   ISTLCPB+12
LCPRRCNT EQU   LCPSEQ+1
LCPRRCCT EQU   LCPSEQ
LCPATOP  EQU   LCPFLAG2
LCPFREE  EQU   LCPFLAG2
LCPDSTAT EQU   LCPFLAG2
LCPEXRES EQU   LCPFID0
LCPZRIMM EQU   LCPTLBPI
LCPRSTRT EQU   LCPFLAG2
LCPASYN  EQU   LCPFLAG2
LCPPRFLG EQU   LCPFLAG2
LCPZMIRC EQU   LCPRUCNT
LCPCHAI2 EQU   LCPCHAIN+1
LCPCHNG  EQU   LCPCHAI1
LCPZRT0B EQU   LCPMNRCD
LCPZRT0A EQU   LCPMNRCD
LCPZRTL9 EQU   LCPZRT09
LCPZRTL8 EQU   LCPZRT08
LCPZRTL7 EQU   LCPZRT07
LCPZRTL6 EQU   LCPZRT06
LCPZRTL5 EQU   LCPZRT05
LCPZRTL4 EQU   LCPZRT04
LCPZRTL3 EQU   LCPZRT03
LCPZRTL2 EQU   LCPZRT02
LCPZRT01 EQU   LCPFLAGS
LCPZRT00 EQU   LCPFLAGS
LCPLNGTH EQU   ISTLCPB+1
LCPTYPE  EQU   ISTLCPB
LCCWDATA EQU   ISTLCCW+4
LCCWCNT  EQU   ISTLCCW+2
LCCWACI  EQU   LCCWFLAG
LCCWRFI  EQU   LCCWFLAG
LCCWPER  EQU   LCCWLSI
LCCWIDAT EQU   LCCWFLAG
LCCWNTVC EQU   LCCWFLAG
LCCWCKPT EQU   LCCWFLAG
LCCWCC   EQU   LCCWFLAG
LCCWCD   EQU   LCCWFLAG
LCCWTYPE EQU   LCCWCTL
LCCWMODE EQU   LCCWCTL
LCCWSOP  EQU   LCCWRWOP
@NM00046 EQU   LCCWRWOP
LCCWSD   EQU   LCCWOP
LCCWSI   EQU   LCCWOP
@NM00045 EQU   GTNCSFLG
GTNCSAPP EQU   GTNCSFLG
PATRSV01 EQU   PATFLAGA
PATUSEFG EQU   PATFLAGA
PATRDCNT EQU   ISTPAT+6
PATGRPID EQU   ISTPAT+5
PATPTHID EQU   ISTPAT+4
PATDINDX EQU   ISTPAT+2
PATGINDX EQU   ISTPAT
GNTGRPNM EQU   ISTGNT
DNTTELNO EQU   ISTDNT+1
DNTCTDIG EQU   ISTDNT
RLSRSV02 EQU   ISTRLS+140
RLSRSV01 EQU   ISTRLS+138
RLSCTELU EQU   ISTRLS+136
RLSPRE   EQU   ISTRLS
RDARSVPT EQU   ISTRDA+84
RDAPUBI  EQU   ISTRDA+83
RDADFCUA EQU   ISTRDA+80
RDACTPCC EQU   ISTRDA+79
RDADACUA EQU   ISTRDA+76
RDALUBA  EQU   RDAUCBAD+1
RDACHQI  EQU   RDAUCBAD
RDARSV01 EQU   RDAFLAG
RDARBISA EQU   RDAFLAG
RDAPRE   EQU   ISTRDA
RSWRSV01 EQU   ISTRSW+152
RSWRSV02 EQU   ISTRSW+150
RSWCTELU EQU   ISTRSW+148
RSWGRUPZ EQU   ISTRSW+146
RSWDIALZ EQU   ISTRSW+144
RSWGRUPT EQU   ISTRSW+140
RSWDIALT EQU   ISTRSW+136
RSWPRE   EQU   ISTRSW
RLXRSV03 EQU   ISTRLX+80
RLXRSV02 EQU   ISTRLX+77
RLXRSV01 EQU   RLXFLAGA
RLXINUSE EQU   RLXFLAGA
RLXNLUX  EQU   ISTRLX+72
RLXPRE   EQU   ISTRLX
RPXRSV01 EQU   ISTRPX+80
RPXRSV02 EQU   ISTRPX+77
RPXMAXLU EQU   ISTRPX+76
RPXFLUX  EQU   ISTRPX+72
RPXPRE   EQU   ISTRPX
RLURSV02 EQU   ISTRLU+172
RLULGMOD EQU   ISTRLU+164
RLUMODEP EQU   RLUMODET+8
RLUMODEN EQU   RLUMODET
RLUUSSPT EQU   RLUUSSTB+8
RLUUSSNM EQU   RLUUSSTB
RLURSV01 EQU   ISTRLU+137
RLULOCAD EQU   ISTRLU+136
RLUNCPPM EQU   RLUNCPPC+1
RLUNCPPN EQU   RLUNCPPC
RLUPACEM EQU   RLUPACE+1
RLUPACEN EQU   RLUPACE
RLUINTA  EQU   ISTRLU+128
RLUSSCFM EQU   ISTRLU+127
RLUCRRSV EQU   RLUCRFLG
RLUACTLU EQU   RLUCRFLG
RLURSV00 EQU   RLUFLAG
RLUNDSES EQU   RLUFLAG
RLUGSTAT EQU   RLUFLAG
RLUBATCH EQU   RLUFLAG
RLURBISA EQU   RLUFLAG
RLUTYPE  EQU   ISTRLU+124
RLUCRPR  EQU   ISTRLU
RCCRSPT2 EQU   ISTRCC+133
RCCADDR  EQU   ISTRCC+132
RCCPASSL EQU   ISTRCC+131
RCCMXOUT EQU   ISTRCC+130
RCCMXDAT EQU   ISTRCC+128
RCCPATHZ EQU   ISTRCC+124
RCCPATHT EQU   ISTRCC+120
RCCTPAB  EQU   ISTRCC+112
RCCRSV02 EQU   ISTRCC+109
RCCCRRSV EQU   RCCCRFLG
RCCCTCFL EQU   RCCCRFLG
RCCACTPU EQU   RCCCRFLG
RCCNCSPL EQU   ISTRCC+104
RCCRPHCN EQU   ISTRCC+100
RCCEPAB  EQU   ISTRCC+96
RCCDPAB  EQU   ISTRCC+92
RCCVPAB  EQU   ISTRCC+88
@NM00044 EQU   ISTRCC+87
RCCSESCT EQU   ISTRCC+86
RCCIDNUM EQU   RCCID48+3
RCCIDBLK EQU   RCCID48+2
RCCIDPA2 EQU   RCCID48+1
RCCIDPUT EQU   RCCID48
RCCIDPA1 EQU   RCCSTAID
RCCCTELU EQU   ISTRCC+76
RCCCNCNT EQU   ISTRCC+75
RCCRTGOH EQU   RCCFLAGB
RCCBRKCN EQU   RCCFLAGB
RCCFINAL EQU   RCCFLAGB
RCCBNNSP EQU   RCCFLAGB
RCCIRETR EQU   RCCFLAGB
RCCDSTCT EQU   RCCFLAGB
RCCCTPGD EQU   RCCFLAG
RCCPRGDN EQU   RCCFLAG
RCCOUERP EQU   RCCFLAG
RCCOHIMM EQU   RCCFLAG
RCCLDISC EQU   RCCFLAG
RCCERPIP EQU   RCCFLAG
RCCCUDIE EQU   RCCFLAG
RCCRBISA EQU   RCCFLAG
RCCTYPE  EQU   ISTRCC+72
RCCPRE   EQU   ISTRCC
DOTADTRM EQU   ISTDOT
RDSADDOT EQU   ISTRDS+76
RDSCTATR EQU   ISTRDS+74
RDSCTTRM EQU   ISTRDS+72
RDSPRE   EQU   ISTRDS
RINRSV05 EQU   ISTRIN+156
RINRSV04 EQU   ISTRIN+152
RINLOCRN EQU   ISTRIN+148
RINRSV02 EQU   ISTRIN+145
RTRCNCNT EQU   RINCNCNT
RTRNCSPL EQU   RINNCSPL
RTRRPHCN EQU   RINRPHCN
RTRVPAB  EQU   RINVPAB
RTRREMOT EQU   RINREMOT
RTRRLDAF EQU   RINRLDAF
RTRNODID EQU   RINNODID
RINRSV01 EQU   RINDFD
RTRLDISC EQU   RINLDISC
RTRNODEF EQU   RINNODEF
RTRREMPO EQU   RINREMPO
RINCRPRE EQU   ISTRIN
RTRRSV04 EQU   ISTRTR+210
RTRLCTI  EQU   ISTRTR+209
RTRIDCAS EQU   RTRBSCID+1
RTRIDLEN EQU   RTRBSCID
RTRRSVDD EQU   ISTRTR+181
RTRRDFG  EQU   ISTRTR+180
RTRDIAA  EQU   ISTRTR+176
RTRPOLA  EQU   ISTRTR+172
RTRCADDR EQU   ISTRTR+164
RTRCTADR EQU   ISTRTR+162
RTRCTPOL EQU   ISTRTR+160
RTRCTDIA EQU   ISTRTR+158
RTRRSV03 EQU   ISTRTR+156
RTRRVPT1 EQU   ISTRTR+152
RTRBHSN1 EQU   ISTRTR+144
RTRCRSV2 EQU   RTRCRFLG
RTRDTRLM EQU   RTRLSCMD
RTRCRSV1 EQU   RTRCRFLG
RTRTRMAX EQU   ISTRTR+142
RTRRSV24 EQU   RTRRDFF
RTRRFDEK EQU   RTRRDFF
RTRRFANK EQU   RTRRDFF
RTRRFPFK EQU   RTRRDFF
RTRRFPEN EQU   RTRRDFF
RTRRFXCT EQU   RTRRDFF
RTRRESCT EQU   RTRRDFE
RTRRESUP EQU   RTRRDFE
RTRREATT EQU   RTRRDFE
RTRRECHK EQU   RTRRDFE
RTRREACR EQU   RTRRDFE
RTRRSV0A EQU   RTRRDFE
RTRREBRK EQU   RTRRDFE
RTRRSV11 EQU   RTRRDFD
RTRRSV10 EQU   RTRRDFD
RTRRDBHI EQU   RTRRDFD
RTRRDBHD EQU   RTRRDFD
RTRRDBHN EQU   RTRRDFD
RTRRSV23 EQU   RTRRDFC
RTRRCXMS EQU   RTRRDFC
RTRRCMSG EQU   RTRRDFC
RTRRCBLK EQU   RTRRDFC
RTRRCPT3 EQU   RTRRDFC
RTRRCIT2 EQU   RTRRDFC
RTRRCIT1 EQU   RTRRDFC
RTRRSV32 EQU   RTRRDFB
RTRRBEND EQU   RTRRDFB
RTRRBECT EQU   RTRRDFB
RTRRSV02 EQU   RTRRDFA
RTRRACTR EQU   RTRRDFA
RTRRSV60 EQU   RTRRDFA
RTRRACDT EQU   RTRRDFA
RTRRAPT3 EQU   RTRRAALL
RTRRAPT2 EQU   RTRRAALL
RTRRAPT1 EQU   RTRRAALL
RTRRAATN EQU   RTRRDFA
RTRRSV45 EQU   ISTRTR+132
RTRRSV01 EQU   ISTRTR+130
RTRCTECM EQU   ISTRTR+128
RTRADRPT EQU   RTRADR+1
RTRRSV22 EQU   RTRFLAG
RTRVTERM EQU   RTRFLAG
RTRRSV51 EQU   RTRFLAG
RTRRBISA EQU   RTRFLAG
RTRRSV21 EQU   RTRFLAG
RTRCRPR  EQU   ISTRTR
RCLRVPT2 EQU   ISTRCL+92
RCLRVPT1 EQU   ISTRCL+88
RCLGPOLA EQU   ISTRCL+84
RCLCTNGP EQU   ISTRCL+82
RCLRSV01 EQU   ISTRCL+80
RCLCTECM EQU   ISTRCL+78
RCLCTETR EQU   ISTRCL+76
RCLGPADR EQU   RCLADR+1
RCLRSV33 EQU   RCLFLAG
RCLBATCH EQU   RCLFLAG
RCLRBISA EQU   RCLFLAG
RCLRSV22 EQU   RCLFLAG
RCLPRE   EQU   ISTRCL
RPTRSV03 EQU   ISTRPT+156
RPTRSV02 EQU   ISTRPT+152
RPTNSNSV EQU   ISTRPT+148
RPTPTHCT EQU   ISTRPT+146
RPTPEPCT EQU   ISTRPT+144
RPTDAFSV EQU   ISTRPT+142
RPTRSV01 EQU   ISTRPT+141
RPTISTAT EQU   RPTFLAG1
RPTDYNAM EQU   RPTFLAG1
RPTVYIMM EQU   RPTFLAG1
RPTVIODN EQU   RPTFLAG1
RPTONLIN EQU   RPTFLAG1
RPTHLVPD EQU   RPTFLAG1
RPTVRYPD EQU   RPTFLAG1
RPTASLEP EQU   RPTFLAG1
RPTUTERM EQU   ISTRPT+136
RPTATERM EQU   ISTRPT+132
RPTDIVT  EQU   RPTDITT
RPTCTNM  EQU   ISTRPT+120
RPTLNDAF EQU   RPTLNCID+2
RPTLNSAF EQU   RPTLNCID
RPTLN    EQU   ISTRPT
RLNRVPT2 EQU   ISTRLN+112
RLNNCSPL EQU   ISTRLN+108
RLNX2SW  EQU   ISTRLN+104
@NM00043 EQU   ISTRLN+103
RLNCRRSV EQU   RLNCRFLG
RLNSWEP  EQU   RLNCRFLG
RLNSVSKP EQU   RLNLSCMD
RLNSESLM EQU   RLNLSCMD
RLNNPRLM EQU   RLNLSCMD
RLNSWNCP EQU   RLNCRFLG
RLNACTLN EQU   RLNCRFLG
RLNPAUSE EQU   ISTRLN+101
RLNPOLMT EQU   ISTRLN+100
RLNACTSN EQU   ISTRLN+98
RLNRESV1 EQU   ISTRLN+97
RLNACTRM EQU   ISTRLN+96
RLNCTSES EQU   ISTRLN+95
RLNRDSLM EQU   ISTRLN+94
RLNAUTOA EQU   ISTRLN+92
RLNRDFD  EQU   RLNRDF+3
RLNRDFC  EQU   RLNRDF+2
RLNMULTP EQU   RLNRDFB
RLNRATRN EQU   RLNRDFB
RLNRAPOL EQU   RLNRDFB
RLNTTV   EQU   RLNRDFB
RLNRSV0B EQU   RLNRDFB
RLNAUTOD EQU   RLNRDFB
RLNANSWR EQU   RLNRDFB
RLNRBUSE EQU   RLNRDFB
RLNRAPEP EQU   RLNRDFA
RLNRANCP EQU   RLNRDFA
RLNRAEP  EQU   RLNRDFA
RLNIDV   EQU   RLNRDFA
RLNPORT  EQU   RLNRDFA
RLNGANSW EQU   RLNRDFA
RLNRACAN EQU   RLNRACNT
RLNRACAT EQU   RLNRACNT
RLNRSV04 EQU   RLNSTAT2
RLNINUSE EQU   RLNSTAT2
RLNOHIN  EQU   RLNSTAT2
RLNRSV03 EQU   RLNSTAT1
RLNVD    EQU   RLNSTAT1
RLNINOPP EQU   RLNSTAT1
RLNINOPL EQU   RLNSTAT1
RLNLRST  EQU   RLNSTAT1
RLNTRAP  EQU   RLNSTAT1
RLNACTCT EQU   ISTRLN+84
RLNCTECM EQU   ISTRLN+82
RLNCTEIN EQU   ISTRLN+80
RLNCTETR EQU   ISTRLN+78
RLNCTECL EQU   ISTRLN+76
RLNCUA   EQU   RLNUCBAD
RLNRSV01 EQU   RLNFLAG
RLNRBISA EQU   RLNFLAG
RLNEAM   EQU   RLNFLAG
RLNPRE   EQU   ISTRLN
RGPRVPT2 EQU   ISTRGP+88
RGPRVPT1 EQU   ISTRGP+84
RGPCTECM EQU   ISTRGP+82
RGPCTEIN EQU   ISTRGP+80
RGPCTETR EQU   ISTRGP+78
RGPCTECL EQU   ISTRGP+76
RGPCTELN EQU   ISTRGP+74
RGPRSV03 EQU   ISTRGP+73
RGPRSV02 EQU   RGPFLG
RGPASDLC EQU   RGPFLG
RGPABSC  EQU   RGPFLG
RGPASS   EQU   RGPFLG
RGPADIL  EQU   RGPFLG
RGPPRE   EQU   ISTRGP
RRNRINNM EQU   ISTRRN+248
@NM00042 EQU   ISTRRN+247
RRNRDCUA EQU   ISTRRN+244
RRNLASTE EQU   ISTRRN+240
RRNNCSPL EQU   ISTRRN+236
RRNRPLPT EQU   ISTRRN+232
RRNMSIZE EQU   ISTRRN+228
RRNNCPNM EQU   ISTRRN+221
RRNCTPCC EQU   ISTRRN+220
RRNHBUFS EQU   ISTRRN+218
RRNHLENT EQU   RRNHPRE+1
RRNHLENH EQU   RRNHPRE
RRNNMNCP EQU   ISTRRN+208
RRNDELAY EQU   ISTRRN+206
RRNRSV04 EQU   ISTRRN+200
RRNRSV88 EQU   RRNNMDPD+7
RRNPUBI  EQU   RRNNMDPD+6
RRNDPLUB EQU   RRNNMDPD
RRNEPADR EQU   ISTRRN+190
RRNCPLUB EQU   ISTRRN+184
RRNFLUX  EQU   ISTRRN+180
RRNRSV05 EQU   RRNCMFD
RRNREMPO EQU   RRNCMFD
RRNCDREC EQU   RRNCMFD
RRNCDDSI EQU   RRNCMFD
RRNCDBCK EQU   RRNCMFD
RRNCDDTL EQU   RRNCMFD
RRNCDSTD EQU   RRNCMFD
RRNCDCSP EQU   RRNCMFD
RRNCCCSL EQU   RRNCMFC
RRNCCSIM EQU   RRNCMFC
RRNCCRCM EQU   RRNCMFC
RRNCCRIM EQU   RRNCMFC
RRNCCCRC EQU   RRNCMFC
RRNCCRST EQU   RRNCMFC
RRNCCRDQ EQU   RRNCMFC
RRNCCRCN EQU   RRNCMFC
RRNCBALT EQU   RRNCMFB
RRNCBMOD EQU   RRNCMFB
RRNCBNPL EQU   RRNCMFB
RRNCBRLS EQU   RRNCMFB
RRNCBRDS EQU   RRNCMFB
RRNCBDLR EQU   RRNCMFB
RRNCBDLH EQU   RRNCMFB
RRNCBDLO EQU   RRNCMFB
RRNCADGO EQU   RRNCMFA
RRNCADTD EQU   RRNCMFA
RRNCACDT EQU   RRNCMFA
RRNCAMBH EQU   RRNCMFA
RRNCAATI EQU   RRNCMFA
RRNCAATG EQU   RRNCMFA
RRNCAATD EQU   RRNCMFA
RRNCAALL EQU   RRNCMFA
RRNRSV55 EQU   RRNRDF+3
RRNPTASL EQU   RRNRDFB+1
RRNRSV01 EQU   RRNRDFB+1
RRNVYDON EQU   RRNRDFB+1
RRNRBBUP EQU   RRNRDFB+1
RRNRSV03 EQU   RRNRDFB
RRNRBCT2 EQU   RRNRDFB
RRNRBCT1 EQU   RRNRDFB
RRNRBSEC EQU   RRNRDFB
RRNRBCCT EQU   RRNRDFB
RRNRBCCL EQU   RRNRDFB
RRNRSV02 EQU   RRNRDFB
RRNRBMDL EQU   RRNRDFB
RRNRAPEP EQU   RRNRDFA
RRNRANCP EQU   RRNRDFA
RRNRBREM EQU   RRNRDFA
RRNRAOLT EQU   RRNRDFA
RRNRASYN EQU   RRNRDFA
RRNRADMP EQU   RRNRDFA
RRNRAIPL EQU   RRNRDFA
RRNRASHT EQU   RRNRDFA
RRNCTENT EQU   ISTRRN+170
RRNCTECM EQU   ISTRRN+168
RRNCTEIN EQU   ISTRRN+166
RRNCTETR EQU   ISTRRN+164
RRNCTECL EQU   ISTRRN+162
RRNCTELI EQU   ISTRRN+160
RRNCTEGP EQU   ISTRRN+158
RRNCTBHS EQU   ISTRRN+156
RRNBHSET EQU   ISTRRN+152
RRNTRENT EQU   ISTRRN+148
RRNRLDIP EQU   ISTRRN+147
RRNRNCUA EQU   ISTRRN+144
RRNGRPA  EQU   ISTRRN+140
RRNLUBA  EQU   RRNUCBAD+1
RRNCHQI  EQU   RRNUCBAD
RRNRSV11 EQU   RRNFLAG
RRNDSTCT EQU   RRNFLAG
RRNERPIP EQU   RRNFLAG
RRNLCDIP EQU   RRNFLAG
RRNLCDIE EQU   RRNFLAG
RRNLCSIP EQU   RRNFLAG
RRNRBISA EQU   RRNFLAG
RRNRSV89 EQU   RRNFLAG
RRNPRE   EQU   ISTRRN
RLCRVPT2 EQU   ISTRLC+80
RLCRVPT1 EQU   ISTRLC+79
RLCLCCUA EQU   ISTRLC+76
RLCUCBAD EQU   RLCADR+1
RLCRSVDE EQU   RLCFLAG
RLCACNT  EQU   RLCFLAG
RLCRSV14 EQU   RLCFLAG
RLCRBISA EQU   RLCFLAG
RLCRSV22 EQU   RLCFLAG
RLCPRE   EQU   ISTRLC
RAPRVPT2 EQU   ISTRAP+116
RAPRVPT1 EQU   ISTRAP+112
RAPBFACT EQU   ISTRAP+111
RAPRSV17 EQU   RAPFLGC
RAPRSV16 EQU   RAPFLGC
RAPRSV15 EQU   RAPFLGC
RAPRSV14 EQU   RAPFLGC
RAPRSV13 EQU   RAPFLGC
RAPRSV12 EQU   RAPFLGC
RAPRSV11 EQU   RAPFLGC
RAPRSV10 EQU   RAPFLGC
RAPANVPC EQU   RAPFLGB
RAPASPO  EQU   RAPFLGB
RAPAPPO  EQU   RAPFLGB
RAPAACQ  EQU   RAPFLGB
RAPAPRMT EQU   RAPFLGB
RAPAPASS EQU   RAPFLGB
RAPABLCK EQU   RAPFLGB
RAPALLF  EQU   RAPFLGB
RAPRSV06 EQU   RAPFLG
RAPRSV05 EQU   RAPFLG
RAPRSV04 EQU   RAPFLG
RAPRSV03 EQU   RAPFLG
RAPATLGN EQU   RAPFLG
RAPASLGI EQU   RAPFLG
RAPAQUI  EQU   RAPFLG
RAPABLGN EQU   RAPFLG
RAPACEQD EQU   ISTRAP+106
RAPTRPRE EQU   ISTRAP+104
RAPACEAP EQU   ISTRAP+100
RAPICEAQ EQU   ISTRAP+96
RAPICEAC EQU   ISTRAP+92
RAPICELG EQU   ISTRAP+88
RAPAPPWD EQU   ISTRAP+80
RAPACDEB EQU   ISTRAP+76
RAPACBA  EQU   ISTRAP+72
RAPPRE   EQU   ISTRAP
RDTVSRPL EQU   ISTRDT+132
RDTCRSPW EQU   ISTRDT+124
RDTCRSDS EQU   ISTRDT+116
@NM00041 EQU   ISTRDT+113
RRNSTCNT EQU   RDTSTCNT
RRNVYRPH EQU   RDTVYRPH
RDTTPAB  EQU   ISTRDT+104
RDTDPAB  EQU   ISTRDT+100
RDTEPAB  EQU   ISTRDT+96
RDTVPAB  EQU   ISTRDT+92
RDTRSV01 EQU   RDTFLAGB
RDTBHSET EQU   RDTFLAGB
RDTCTCFL EQU   RDTFLAGB
RDTCTPGD EQU   RDTFLAGB
RDTPRGDN EQU   RDTFLAGB
RDTOUERP EQU   RDTFLAGB
RDTLGCT  EQU   ISTRDT+90
RDTNODID EQU   ISTRDT+89
RDTMAXID EQU   ISTRDT+88
RDTCTSNT EQU   ISTRDT+86
RDTFLAGS EQU   ISTRDT+84
RDTBACK  EQU   ISTRDT+80
RDTFORW  EQU   ISTRDT+76
RDTLEN   EQU   RDTPLEN+1
RDTPRILS EQU   RDTPRIOR
RDTPRISW EQU   RDTPRIOR
RDTPRIRN EQU   RDTPRIOR
RDTPRILC EQU   RDTPRIOR
RDTPRIAP EQU   RDTPRIOR
@NM00040 EQU   RDTPRIOR
RDTPRE   EQU   ISTRDT
RCPRSV05 EQU   ISTRCPRE+120
RCPRSV04 EQU   ISTRCPRE+116
RCPRSV03 EQU   ISTRCPRE+112
RCPINTA  EQU   RCPLGNIN+16
RCPLGNCT EQU   RCPLGNIN+8
RCPLGNAP EQU   RCPLGNIN
@NM00039 EQU   RCPPMODE
RCPRRECD EQU   RCPPMODE
RCPRBASC EQU   RCPPMODE
RCPBFLIM EQU   ISTRCPRE+90
RCPBHSI2 EQU   ISTRCPRE+89
RCPBHSI1 EQU   ISTRCPRE+88
RCPACETR EQU   ISTRCPRE+84
RCPICEAQ EQU   ISTRCPRE+80
RCPLNAPA EQU   ISTRCPRE+76
RCPICELN EQU   ISTRCPRE+72
RCPPRE   EQU   ISTRCPRE
RPRCONID EQU   ISTRPRE+63
RPRCLVPD EQU   RPRFLAGC
RPRINIMM EQU   RPRFLAGD
RPRRSV05 EQU   RPRFLAGD
RPRCONP  EQU   RPRFLAGD
RPRACTP  EQU   RPRFLAGD
RPRRSON  EQU   RPRFLAGD
RPRLTASN EQU   RPRFLAGD
RPRPTHCT EQU   ISTRPRE+60
RPRSWDAF EQU   ISTRPRE+58
RPRSTPCT EQU   ISTRPRE+56
RPRRVPT1 EQU   ISTRPRE+52
RPRDEVCH EQU   ISTRPRE+44
RPRNCBA  EQU   ISTRPRE+40
RPRLGONB EQU   ISTRPRE+32
RPRLGONF EQU   ISTRPRE+28
RPRTIOCT EQU   ISTRPRE+26
RPRPEPCT EQU   ISTRPRE+24
RPRRSV03 EQU   RPRCAUSE
RPRRSYNC EQU   RPRCAUSE
RPRCRCPT EQU   RPRCAUSE
RPRNOSRT EQU   RPRCAUSE
RPRINTST EQU   RPRFLAGB
RPRVYIMM EQU   RPRFLAGB
RPRHLVPD EQU   RPRFLAGB
RPRVIODN EQU   RPRFLAGB
RPRAOPN  EQU   RPRFLAGB
RPRENTVT EQU   RPRFLAGB
RPRENTVH EQU   RPRFLAGB
RPRLIVE  EQU   RPRFLAGA
RPRVRYPD EQU   RPRFLAGA
RPRENTED EQU   RPRFLAGA
RPRENTIO EQU   RPRFLAGA
RPRENTBF EQU   RPRFLAGA
RPRTIED  EQU   RPRFLAGA
RPRINV   EQU   RPRFLAGA
RPRACT   EQU   RPRFLAGA
RPRENTRY EQU   ISTRPRE+20
RPRPELEN EQU   ISTRPRE+18
RPRELEN  EQU   ISTRPRE+16
RPRDAF   EQU   RPRCOMID+2
RPRSAF   EQU   RPRCOMID
RPRNAME  EQU   ISTRPRE
DEVRSV03 EQU   ISTDEVCH+5
DEVPHYSA EQU   ISTDEVCH+4
DEVCSLPN EQU   DEVCHAR3
DEVCSTCL EQU   DEVCHAR3
DEVCCHEK EQU   DEVCHAR3
DEVCATTN EQU   DEVCHAR3
DEVCSWL  EQU   DEVFCCTL
DEVCRVB  EQU   DEVFCCTL
DEVCSSL  EQU   DEVFCCTL
DEVCBSC  EQU   DEVFCCTL
DEVMCODE EQU   ISTDEVCH+2
DEVCHAR2 EQU   DEVTCODE
DEVRSV01 EQU   DEVCHAR
DEVCCTL  EQU   DEVCHAR
DEVNNSPT EQU   DEVCHAR
DEVSPS   EQU   DEVCHAR
DEVSUBND EQU   DEVCHAR
DEVCONVR EQU   DEVCHAR
DEVOTPUT EQU   DEVCHAR
DEVINPUT EQU   DEVCHAR
LOKXCL   EQU   @NM00037
LOKPRY   EQU   @NM00037
@NM00038 EQU   @NM00037
@NM00036 EQU   LOKCHNG
LOKCT    EQU   ISTLOK
NCSAPPAB EQU   NCSAPP+608
NCSAPDAT EQU   NCSAPBUE+8
NCSAPRU  EQU   NCSAPBUE+3
NCSRSV04 EQU   NCSAPBUE
NCSAPEND EQU   NCSAPP+84
NCSAPTXT EQU   NCSAPP+76
NCSAPECB EQU   NCSAPP+72
NCSAPSA  EQU   NCSAPP
NCSPLPDB EQU   NCSPLSID+5
NCSPLNID EQU   NCSPLPHD
NCSPLPO  EQU   NCSPLSTA
NCSRSVD4 EQU   NCSPLSTA
NCSRSVD2 EQU   NCSCRMOD
NCSPTMOD EQU   NCSCRMOD
NCSAIMOD EQU   NCSCRMOD
NCSRSVD1 EQU   NCSCHKPT+1
NCSPTUSE EQU   NCSCHKPT+1
NCSRNME  EQU   NCSCHKPT+1
NCSCUA   EQU   NCSCHKPT+1
NCSANSMD EQU   NCSCHKPT+1
NCSLGMOD EQU   NCSCHKPT
NCSLGAPL EQU   NCSCHKPT
NCSDTRLM EQU   NCSCHKPT
NCSESLM  EQU   NCSCHKPT
NCSNRPL  EQU   NCSCHKPT
NCSPOLD  EQU   NCSCHKPT
NCSPACTV EQU   NCSCHKPT
NCSACTV  EQU   NCSCHKPT
NCSCRDTE EQU   ISTNCSPL+264
NCSPLRTY EQU   ISTNCSPL+263
NCSPLRH  EQU   ISTNCSPL+260
NCSUFMCB EQU   ISTNCSPL+256
NCSMGLPT EQU   ISTNCSPL+252
NCSCPWPT EQU   ISTNCSPL+248
NCSSENS2 EQU   NCSSENSE+2
NCSSNS2  EQU   NCSSENSE+1
NCSSNS1  EQU   NCSSENSE
NCSPLNSN EQU   ISTNCSPL+240
NCSPLMID EQU   ISTNCSPL+232
NCSPLPID EQU   ISTNCSPL+231
NCSPLGID EQU   ISTNCSPL+230
NCSPLSQN EQU   ISTNCSPL+228
NCSRNAME EQU   ISTNCSPL+220
NCSPLRUI EQU   ISTNCSPL+212
NCSPLRUO EQU   ISTNCSPL+208
NCSPLRRP EQU   ISTNCSPL+204
NCSPLWEL EQU   ISTNCSPL+200
NCSPLSPL EQU   ISTNCSPL+196
NCSPLP3  EQU   ISTNCSPL+192
NCSPLP2  EQU   ISTNCSPL+188
NCSPLP1  EQU   ISTNCSPL+184
NCSPLOLN EQU   ISTNCSPL+182
@NM00035 EQU   NCSPLFL5
NCSFORCE EQU   NCSPLFL5
NCSSDLK  EQU   NCSPLFL5
NCSSCPPS EQU   NCSPLFL5
NCSDLRSN EQU   ISTNCSPL+180
NCSPL2AP EQU   NCSPLFL4
NCSDSPN  EQU   NCSPLFL4
NCSDSPI  EQU   NCSPLFL4
NCSDSPA  EQU   NCSPLFL4
NCSDSPE  EQU   NCSPLFL4
NCSPLVID EQU   NCSPLFL4
NCSPLRSO EQU   NCSPLFL4
NCSDLNID EQU   NCSPLFL4
NCSEND   EQU   NCSPLFL3
NCSFINAL EQU   NCSPLFL3
NCSANS   EQU   NCSPLFL3
NCSPID   EQU   NCSPLFL3
NCSGID   EQU   NCSPLFL3
NCSPLANS EQU   NCSPLFL3
NCSEPP   EQU   NCSPLFL3
NCSPLMOM EQU   NCSPLFL3
NCSPLVIT EQU   NCSPLFL2
NCSPLVIS EQU   NCSPLFL2
NCSREMPO EQU   NCSPLFL2
NCSPLDS  EQU   NCSPLFL2
NCSOUFMC EQU   NCSPLFL2
NCSPLRIO EQU   NCSPLFL2
NCSPLRSF EQU   NCSPLFL2
NCSPLVDP EQU   NCSPLFL2
NCSPLPOS EQU   NCSPLFL1
NCSPL2CN EQU   NCSPLFL1
NCSPLAPU EQU   NCSPLFL1
NCSPLNON EQU   NCSPLFL1
NCSPLREQ EQU   NCSPLFL1
NCSPLEBN EQU   NCSPLFL1
NCSPLSOM EQU   NCSPLFL1
NCSPL2IN EQU   NCSPLFL1
NCSPLRCR EQU   ISTNCSPL+172
NCSPLECB EQU   ISTNCSPL+164
NCSPLDAF EQU   NCSPLCID+2
NCSPLSAF EQU   NCSPLCID
NCSPLRCD EQU   NCSPLRAD+1
NCSLSCMD EQU   NCSPLRAD
NCSPLWRF EQU   ISTNCSPL+72
NCSPLWRE EQU   ISTNCSPL+68
NCSSTCMD EQU   NCSCRFLG
NCSUSRNF EQU   NCSCRFLG
NCSOPRQU EQU   NCSCRFLG
NCSCRDSE EQU   NCSCRFLG
NCSFMERP EQU   NCSCRFLG
NCSFMCLD EQU   NCSCRFLG
NCSPLCLD EQU   NCSCRFLG
NCSPLWRM EQU   NCSCRFLG
NCSPLUAD EQU   ISTNCSPL+64
NCSMSGSP EQU   ISTNCSPL+63
NCSNCPEP EQU   ISTNCSPL+62
NCSCMDB  EQU   NCSPLCMD+1
@NM00034 EQU   NCSCMDA
NCSPLUFM EQU   NCSCMDA
NCSPLFLO EQU   NCSCMDA
NCSPLSYN EQU   NCSCMDA
NCSPLCTL EQU   NCSCMDA
NCSPLSYS EQU   NCSCMDA
NCSCRPID EQU   ISTNCSPL+51
NCSCRCMD EQU   ISTNCSPL+50
NCSDLID  EQU   ISTNCSPL+44
NCSPLLID EQU   ISTNCSPL+36
NCSPLRID EQU   ISTNCSPL+28
NCSRRNPT EQU   ISTNCSPL+24
NCSOVFMC EQU   NCSPLVF1
NCSRSV02 EQU   NCSPLVFL
NCSDACLK EQU   NCSPLVFL
NCSABCON EQU   NCSPLVFL
NCSDCONT EQU   NCSPLVFL
NCSVDEL  EQU   NCSPLVFL
NCSVNCSA EQU   NCSPLVFL
NCSVBF16 EQU   NCSPLVBF+1
NCSVBF15 EQU   NCSPLVBF+1
NCSVBF14 EQU   NCSPLVBF+1
NCSVBF13 EQU   NCSPLVBF+1
NCSVBF12 EQU   NCSPLVBF+1
NCSVBF11 EQU   NCSPLVBF+1
NCSVBF10 EQU   NCSPLVBF+1
NCSVBF09 EQU   NCSPLVBF+1
NCSVBF08 EQU   NCSPLVBF
NCSVBF07 EQU   NCSPLVBF
NCSVBF06 EQU   NCSPLVBF
NCSVBF05 EQU   NCSPLVBF
NCSVBF04 EQU   NCSPLVBF
NCSVBF03 EQU   NCSPLVBF
NCSVBF02 EQU   NCSPLVBF
NCSVBF01 EQU   NCSPLVBF
NCSPLVCD EQU   ISTNCSPL+17
@NM00033 EQU   ISTNCSPL+16
NCSCRWKA EQU   NCSPFX+12
@NM00032 EQU   NCSPFX
PFXBCK   EQU   ISTPFX+12
PFXFWD   EQU   ISTPFX+8
PFXLNG   EQU   ISTPFX+5
PFXPRTY  EQU   ISTPFX+4
PFXCBID  EQU   PFXID
POHID    EQU   ISTPOHD+2
POHGEN   EQU   POHSTAT
POHRREQ  EQU   POHSTAT
POHRSVD2 EQU   POHSTAT
POHCNTRL EQU   POHSTAT
POHLBL   EQU   POHSTAT
POHDATA  EQU   POHSTAT
POHEND   EQU   POHSTAT
POHRSVD1 EQU   ISTPOHD
RPLSEQNO EQU   RPLOF60+6
@NM00028 EQU   RPLIBSQ
RPLIINV  EQU   RPLIBSQ
RPLINEG  EQU   RPLIBSQ
RPLIPOS  EQU   RPLIBSQ
RPLIIGN  EQU   RPLIBSQ
RPLIRSET EQU   RPLIBSQ
RPLITST  EQU   RPLIBSQ
RPLISET  EQU   RPLIBSQ
@NM00027 EQU   RPLOBSQ
RPLOINV  EQU   RPLOBSQ
RPLONEG  EQU   RPLOBSQ
RPLOPOS  EQU   RPLOBSQ
RPLOIGN  EQU   RPLOBSQ
RPLORSET EQU   RPLOBSQ
RPLOTST  EQU   RPLOBSQ
RPLOSET  EQU   RPLOBSQ
RPLIBSQV EQU   RPLOF60+2
RPLOBSQV EQU   RPLOF60
@NM00026 EQU   RPLCNTSC
RPLRSHUT EQU   RPLCNTSC
RPLRQR   EQU   RPLCNTSC
RPLSHUTC EQU   RPLCNTSC
RPLSHUTD EQU   RPLCNTSC
RPLSTSN  EQU   RPLCNTSC
RPLCLEAR EQU   RPLCNTSC
RPLSDT   EQU   RPLCNTSC
@NM00025 EQU   RPLCNTDC
RPLSIGNL EQU   RPLCNTDC
RPLLUS   EQU   RPLCNTDC
RPLRTR   EQU   RPLCNTDC
RPLBID   EQU   RPLCNTDC
@NM00024 EQU   RPLCNTDF
RPLQI    EQU   RPLCNTDF
RPLRELQ  EQU   RPLCNTDF
RPLCHASE EQU   RPLCNTDF
RPLQEC   EQU   RPLCNTDF
RPLQC    EQU   RPLCNTDF
RPLCNCEL EQU   RPLCNTDF
RPLDATA  EQU   RPLCNTDF
RPLRRN   EQU   RPLRESP
RPLNFME  EQU   RPLRESP
RPLEX    EQU   RPLRESP
@NM00023 EQU   RPLRESP
@NM00022 EQU   RPLPOSTV
RPLSCHED EQU   RPLPOSTV
@NM00021 EQU   RPLVTFL1
RPLAUTUS EQU   RPLVTFL1
RPLVTUSE EQU   RPLVTFL1
@NM00020 EQU   RPLVTFL1
@NM00019 EQU   RPLCHN
RPLONLY  EQU   RPLCHN
RPLLAST  EQU   RPLCHN
RPLMIDLE EQU   RPLCHN
RPLFIRST EQU   RPLCHN
@NM00018 EQU   RPLRTYPE
RPLDFASY EQU   RPLRTYPE
RPLNFSYN EQU   RPLRTYPE
RPLRRESP EQU   RPLRTYPE
@NM00017 EQU   RPLSTYPE
RPLSRESP EQU   RPLSTYPE
@NM00016 EQU   RPLRH3
RPLCSI   EQU   RPLRH3
RPLCHREQ EQU   RPLRH3
RPLCMD   EQU   RPLRH3
RPLEB    EQU   RPLRH3
RPLBB    EQU   RPLRH3
RPLSIGDA EQU   RPLVTEXT+32
RPLSAV13 EQU   RPLVTEXT+28
RPLUSNSO EQU   RPLOSENS+2
RPLSSMO  EQU   RPLSSNSO+1
@NM00015 EQU   RPLSSEO
RPLRRO   EQU   RPLSSEO
RPLFIO   EQU   RPLSSEO
RPLSTATO EQU   RPLSSEO
RPLCPMO  EQU   RPLSSEO
@NM00014 EQU   RPLSSEO
RPLFMHDR EQU   RPLOPT12
@NM00013 EQU   RPLOPT12
@NM00012 EQU   RPLOPT12
@NM00011 EQU   RPLOPT12
RPLNIBTK EQU   RPLOPT12
RPLTRUNC EQU   RPLOPT12
RPLKEEP  EQU   RPLOPT12
@NM00010 EQU   RPLOPT12
RPLRSVE8 EQU   RPLOPT11
RPLRSVE7 EQU   RPLOPT11
RPLRSVE6 EQU   RPLOPT11
RPLRSVE5 EQU   RPLOPT11
RPLRSVE4 EQU   RPLOPT11
RPLSTOP  EQU   RPLOPT11
RPLSTART EQU   RPLOPT11
RPLQUIES EQU   RPLOPT11
RPLRSVI6 EQU   RPLOPT10
RPLRSVI5 EQU   RPLOPT10
RPLRSVI4 EQU   RPLOPT10
RPLRSVI3 EQU   RPLOPT10
RPLRSVI2 EQU   RPLOPT10
RPLSPARM EQU   RPLOPT10
RPLDSPLY EQU   RPLOPT10
RPLBSCID EQU   RPLOPT10
RPLTOPL  EQU   RPLOPT9
RPLCIDE  EQU   RPLOPT9
RPLRNNM  EQU   RPLOPT9
RPLAPPST EQU   RPLOPT9
RPLCOUNT EQU   RPLOPT9
RPLTERMS EQU   RPLOPT9
RPLDEVCH EQU   RPLOPT9
RPLLOGON EQU   RPLOPT9
RPLUSFLD EQU   RPLVTEXT+16
RPLESR2  EQU   RPLUSNSI+1
RPLESR1  EQU   RPLUSNSI
RPLSSMI  EQU   RPLDSB2
@NM00009 EQU   RPLSSEI
RPLRRI   EQU   RPLSSEI
RPLFII   EQU   RPLSSEI
RPLSTATI EQU   RPLSSEI
RPLCPMI  EQU   RPLSSEI
RPLPATHI EQU   RPLSSEI
RPLARCLN EQU   RPLVTEXT+8
RPLAARLN EQU   RPLVTEXT+4
RPLAAREA EQU   RPLVTEXT
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00008 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00007 EQU   RPLRBAR+3
@NM00006 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLTCRNO EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
@NM00005 EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLRLEN  EQU   RPLCOMN+48
RPLCHAIN EQU   RPLNXTRP
RPLBOP   EQU   RPLOPT4
@NM00004 EQU   RPLOPT4
RPLMKFRM EQU   RPLOPT4
RPLENDTR EQU   RPLOPT4
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
@NM00003 EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLAREA  EQU   RPLCOMN+32
RPLTCBPT EQU   RPLCOMN+28
RPLDACB  EQU   RPLCOMN+24
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLERREG EQU   RPLRTNCD
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00002 EQU   CVTFIX+248
@NM00001 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTSHSB  EQU   CVTSHS
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00249 EQU   @RC00244
@RC00260 EQU   @RC00232
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   ISTINCE0,(C'PLS2211',0603,78016)
