WS06     TITLE 'AHLSBUF, TRACE WRITER ASYNCHRONOUS BUFFERING RTN       *
                        '
AHLSBUF  CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(19)                                             0001
         DC    C'AHLSBUF R0200073286'                              0001
         DROP  @15
@PROLOG  DS    0H                                                  0002
    LR   BASREG,@15      PLACE ENTRY POINT ADDR IN BASE REGISTER
    USING  AHLSBUF,BASREG
*   RETSAVR=RETURNR;                /* PRESERVE GPR14 IN ANOTHER   0060
*                                      REGISTER FOR LIFE OF THIS   0060
*                                      ENTRY                         */
         LR    RETSAVR,RETURNR                                     0060
*   RFY                                                            0061
*     RETURNR UNRSTD;                                              0061
*   RFY                                                            0062
*     FRREPAD RSTD;                 /* THE ADDRESS OF THE FRR EP IS
*                                      PUT IN A REG FOR THE MACRO SO
*                                      THAT MORE EFFICIENT CODE WILL
*                                      BE GENERATED                  */
*   FRREPAD=ADDR(AHLSFRR);                                         0063
         LA    FRREPAD,AHLSFRR                                     0063
*   RFY                                                            0064
*    (SETFREG1,                                                    0064
*     SETFREG2) RSTD;               /* WORK REGS FOR SETFRR          */
*   GEN CODE SETS(SETFREG1,SETFREG2) REFS(FRREPAD,PSA,PSACSTK,FRRSCURR,
*       FRRS,FRRSLAST,FRRSELEN,FRRSFRRA,PSALSFCC,FRRSENTR,FRRSPARM)
*       SEQFLOW NOEXIT NOFLOWS NODEFS;                             0065
    SETFRR  A,FRRAD=(FRREPAD),WRKREGS=(SETFREG1,SETFREG2)
*   RFY                                                            0066
*    (FRREPAD,                                                     0066
*     SETFREG1,                                                    0066
*     SETFREG2) UNRSTD;                                            0066
*   RFY                                                            0067
*     SRBSECT BASED(GTFSSRB);                                      0067
*   WORKPTR=ADDR(WORKAREA);         /* OBTAIN ADDR OF THE WORK AREA
*                                      TO BE USED FOR COMPARE AND  0068
*                                      SWAP THIS WORK AREA IS AN   0068
*                                      EXTRA 16 BYTES GOTTEN BY THE
*                                      TRACE WRITER AND APPENDED TO
*                                      THE END OF THE SRB, WHICH   0068
*                                      EFFECTIVELY SERIALIZES THE USE
*                                      OF THE WORKAREA               */
         L     WORKPTR,GTFSSRB(,PCTPTR)                            0068
         LA    WORKPTR,WORKAREA(,WORKPTR)                          0068
*   RFY                                                            0069
*     COMPSWAP BASED(WORKPTR);                                     0069
*                                                                  0070
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION OF CODE ATTEMPTS TO OBTAIN CONTROL OF QLOCK.     */
*   /* (QLOCK IS USED TO SERIALIZE THE USE OF SOME GTFBCB & GTFPCT   */
*   /* FIELDS BETWEEN THIS MODULE AND THE TRACE WRITER). IF IT       */
*   /* SUCCEEDS MODULE EXECUTION CONTINUES. IF IT FAILS THE GTFSSRB  */
*   /* IS MADE AVAILABLE TO BE SCHEDULED AGAIN, THE SCHEDBUF BYTE IS */
*   /* SET TO 'FF'X INDICATING THAT THE SRB FOR THIS MODULE IS TO BE */
*   /* SCHEDULED WHEN QLOCK IS FREED, AND IT TERMINATES.             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0070
*/*GETQLOCK: N THIS AHLSBUF MUST ALWAYS HAVE CONTROL OF GTFSSRB AT THIS
*/* POINT                                                            */
*/* P TS ON THE QLOCK BYTE                                           */
*/* N THIS IS THE ONLY PLACE WHERE QLOCK IS OBTAINED                 */
*/* D (FAIL,,OK,GOTQLOCK) TS?                                        */
*/* D (YES,FRROFF,NO,) GTFSSRB=0                                     */
*/* P CS TO TURN ON SRBAVAIL BIT                                     */
*/* D (FAIL,FRROFF,OK,) CS?                                          */
*/* P SET THE SCHEDBUF BYTE                                          */
*/* N QLOCK MUST BE RETESTED AFTER GTFSSRB IS AVAILABLE & SHCEDBUF IS
*/*SET                                                               */
*/* D (YES,FRROFF,NO,) IS THE QLOCK BYTE SET                         */
*/* N QLOCK CANNOT BE OBTAINED NOW BECAUSE GTFSSRB IS NOT HELD       */
*/*%K: P USE CS TO VERIFY SRBAVAIL IS ON & TURN IT OFF               */
*/* D (FAIL,,OK,GETQLOCK) CS?                                        */
*/* N (,FRROFF) ANOTHER AHLSBUF IS SCHEDULED & WILL DO THE WORK      */
*/*GOTQLOCK: P CLEAR THE SCHEDBUF BYTE                               */
*                                                                  0070
*GETQLOCK:                          /* AHLSBUF MUST ALWAYS HAVE    0070
*                                      CONTROL OF GTFSSRB AT THIS  0070
*                                      POINT IN THE CODE. WHEN     0070
*                                      AHLSBUF GET DISPATCHED IT   0070
*                                      IMPLICITLY HAS CONTROL OF   0070
*                                      GTFSSRB FROM THE MODULE WHICH
*                                      SCHEDULED IT.                 */
*   TS(QLOCK);                      /* TEST QLOCK TO SEE IF IT IS  0070
*                                      FREE AND IF IT IS SET IT TO 0070
*                                      'FF'X TO OBTAIN CONTROL OF IT
*                                      OTHERWISE DO NOTHING          */
GETQLOCK TS    QLOCK(PCTPTR)                                       0070
*   BC(8,GOTQLOCK);                 /* GO ON TO DO WORK IF THE QLOCK
*                                      WAS FREE                      */
         BC    8,GOTQLOCK                                          0071
*   RFY                                                            0072
*    (COMPREG,                                                     0072
*     SWAPREG) RSTD;                                               0072
*   COMPREG=GTFSSRB;                /* OBTAIN A STABLE COPY FOR CS   */
         L     COMPREG,GTFSSRB(,PCTPTR)                            0073
*   IF COMPREG=0                    /* TEST TO SEE IF SOMEONE HAS  0074
*                                      DISABLED THIS MODULE          */
*     THEN                                                         0074
         LTR   COMPREG,COMPREG                                     0074
         BZ    @RT00074                                            0074
*     GO TO FRROFF;                 /* IF YES GO AND TERMINATE     0075
*                                      WITHOUT REQUESTING TO BE    0075
*                                      RESCHEDULED                   */
*   SWAPREG=COMPREG×'80000000'X;    /* TURN ON SRBAVAIL BIT IN THE 0076
*                                      ALTERED COPY                  */
         LR    SWAPREG,COMPREG                                     0076
         O     SWAPREG,@CF01757                                    0076
*   CS(COMPREG,SWAPREG,GTFSSRB);    /* VERIFY GTFSSRB IS STILL     0077
*                                      NONZERO AND IF SO UPDATE IT 0077
*                                      WITH THE COPY THAT HAS      0077
*                                      SRBAVAIL ON                   */
         CS    COMPREG,SWAPREG,GTFSSRB(PCTPTR)                     0077
*   BC(4,FRROFF);                   /* IF THE CS FAILS GTFSSRB MUST
*                                      HAVE BEEN SET TO 0 SINCE ONLY
*                                      THE MODULE THAT CONTROLS IT 0078
*                                      CAN ALTER IT IN ANY OTHER WAY
*                                      AND THIS MODULE CURRENTLY   0078
*                                      CONTROLS IT                   */
         BC    4,FRROFF                                            0078
*   SCHEDBUF=SET;                   /* SET SCHEDBUF TO REQUEST THAT
*                                      THE TRACE WRITER SCHEDULE THE
*                                      SRB FOR THIS MODULE WHEN IT 0079
*                                      FREES THE QLOCK               */
         MVI   SCHEDBUF(PCTPTR),X'FF'                              0079
*   IF QLOCK=SET                    /* TEST QLOCK ONCE AGAIN TO    0080
*                                      VERIFY THAT IT IS STILL SET 0080
*                                      AFTER BOTH SCHEDBUF IS SET AND
*                                      GTFSSRB HAVE BEEN MADE      0080
*                                      AVAILABLE. THIS WILL INSURE 0080
*                                      THAT THE TRACE WRITER WILL  0080
*                                      SCHEDULE THIS MODULE AGAIN. IT
*                                      IS POSSIBLE THAT THE TRACE  0080
*                                      WRITER MAY HAVE FINISHED WITH
*                                      QLOCK AFTER THE TS BUT BEFORE
*                                      THE SETTING OF SCHEDBUF &   0080
*                                      FREEING OF GTFSSRB            */
*     THEN                                                         0080
         CLI   QLOCK(PCTPTR),X'FF'                                 0080
         BE    @RT00080                                            0080
*     GO TO FRROFF;                 /* TERMINATE                     */
*   COMPREG=GTFSSRB;                /* IF THE QLOCK HAS BECOME     0082
*                                      AVAILABLE SINCE THE TS, THERE
*                                      IS NO GUARENTEE THIS MODULE 0082
*                                      WILL BE RESCHEDULED,SO TRY TO
*                                      REGAIN CONTROL OF GTFSSRB   0082
*                                      INSTEAD OF TERMINATING        */
         L     COMPREG,GTFSSRB(,PCTPTR)                            0082
*   SWAPREG=COMPREG&'7FFFFFFF'X;    /* PREPARE TO TURN OFF THE     0083
*                                      SRBAVAIL BIT                  */
         LR    SWAPREG,COMPREG                                     0083
         N     SWAPREG,@CF01759                                    0083
*   COMPREG=COMPREG×'80000000'X;    /* AND INSURE THAT THE SRBAVAIL
*                                      BIT IS ON IF THE CS GOES      */
         O     COMPREG,@CF01757                                    0084
*   CS(COMPREG,SWAPREG,GTFSSRB);    /* ATTEMPT TO GET CONTROL OF   0085
*                                      GTFSSRB                       */
         CS    COMPREG,SWAPREG,GTFSSRB(PCTPTR)                     0085
*   BC(8,GETQLOCK);                 /* IF THE CS IS SUCCESSFUL GO  0086
*                                      BACK AND TRY FOR QLOCK AGAIN  */
         BC    8,GETQLOCK                                          0086
*   RFY                                                            0087
*    (COMPREG,                                                     0087
*     SWAPREG) UNRSTD;                                             0087
*   GO TO FRROFF;                   /* IF THE CS FAILED THE SRB HAS
*                                      ALREADY BEEN SCHEDULED WHICH
*                                      IS JUST AS GOOD. SO TERMINATE */
         B     FRROFF                                              0088
*GOTQLOCK:                          /* ONCE CONTROL OF QLOCK IS    0089
*                                      GOTTEN THERE IS               */
*   SCHEDBUF=CLEAR;                 /* NO NEED FOR THE TRACE WRITER
*                                      TO SCHEDULE AHLSBUF ANYMORE 0089
*                                                                    */
GOTQLOCK MVI   SCHEDBUF(PCTPTR),X'00'                              0089
*                                                                  0090
*   /*****************************************************************/
*   /*                                                               */
*   /* AT THIS POINT THE HEART OF AHLSBUF BEGINS. FIRST TESTS ARE    */
*   /* MADE TO SEE IF THERE IS ANY WORK TO BE DONE AND IF NOT THE    */
*   /* CODE BRANCHES PAST THE WORK PORTION TO THE SECTION THAT POSTS */
*   /* THE TRACE WRITER                                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0090
*/*BUFFER: D (YES,NOWORK,NO,) NEXTBLOK= CURRBLOK                     */
*/* P SAVE A CONTROL COPY OF NEXTBLOK-> BLOKSWAP IN CASE OF CS       */
*/* D (YES,,NO,NOWORK) BLOKUSE=0 IN CONTROL COPY                     */
*/* D (YES,,NO,%A) EQHEAD=0                                          */
*/* P (,NOWORK) STORE 0 INTO GTFSSRB (DISABLE AHLSBUF)               */
*                                                                  0090
*BUFFER:                                                           0090
*   IF NEXTBLOK=CURRBLOK            /* IS THE NEXT GTFBLOK TO BE   0090
*                                      BUFFERED STILL THE CURRENT  0090
*                                      GTFBLOK                       */
*     THEN                                                         0090
BUFFER   L     @08,NEXTBLOK(,PCTPTR)                               0090
         C     @08,CURRBLOK(,PCTPTR)                               0090
         BE    @RT00090                                            0090
*     GO TO NOWORK;                 /* IF IT IS THEN IT CAN'T BE   0091
*                                      BUFFERED SO GO ON TO POSTING
*                                      THE TRACE WRITER              */
*   DWSWAP=NEXTBLOK->BLOKSWAP;      /* OBTAIN A STABLE VERSION OF THE
*                                      CONTROL PORTION OF THE NEXT 0092
*                                      GTFBLOK TO BE BUFFERED        */
         MVC   DWSWAP(8,WORKPTR),BLOKSWAP(@08)                     0092
*   IF USEFIELD^=0                  /* IF THE NEXT TO BE BUFFERED  0093
*                                      GTFBLOK IS NOT ALSO CURRENT 0093
*                                      THEN HAS ALL THE RESERVED   0093
*                                      SPACE BEEN FILLED IN          */
*     THEN                                                         0093
         SLR   @08,@08                                             0093
         CH    @08,USEFIELD(,WORKPTR)                              0093
         BNE   @RT00093                                            0093
*     GO TO NOWORK;                 /* IF NOT THEN IT STILL CAN'T BE
*                                      BUFFERED SO GO ON TO POSTING
*                                      THE TRACE WRITER              */
*   IF EQHEAD=0                     /* THERE IS A GTFBLOK TO BE    0095
*                                      BUFFERED, IS THERE AN EMPTY 0095
*                                      GTFBUFR TO PUT THE DATA INTO  */
*     THEN                                                         0095
         C     @08,EQHEAD(,PCTPTR)                                 0095
         BNE   @RF00095                                            0095
*     DO;                           /* IF NOT THE DISABLE AHLSBUF SO
*                                      IT WON'T COMPETE WITH THE   0096
*                                      TRACE WRITER AND THEN POST THE
*                                      TRACE WRITER                  */
*       GTFSSRB=0;                  /* REGARDLESS OF THE CURRENT   0097
*                                      STATE OF GTFSSRB SET IT TO 0
*                                      TO DISABLE THE SCHEDULING OF
*                                      THIS MODULE                   */
         ST    @08,GTFSSRB(,PCTPTR)                                0097
*       GO TO NOWORK;               /* GO FREE THE QLOCK AND POST THE
*                                      TRACE WRITER SO IT CAN EMPTY
*                                      GTFBUFR                       */
         B     NOWORK                                              0098
*     END;                                                         0099
*                                                                  0100
*   /*****************************************************************/
*   /*                                                               */
*   /* AFTER IT IS ESTABLISHED THAT WORK CAN BE DONE THIS SECTION OF */
*   /* CODE DOES IT. A GTFBCB IS REMOVED FROM THE EMPTY QUEUE, ITS   */
*   /* GTFBUFR IS FILLED WITH THE DATA FROM THE NEXT TO BE BUFFERED  */
*   /* GTFBLOK, THE GTFBLOK IS SET TO EMPTY, THE GTFBCB IS PUT ON THE*/
*   /* TAIL OF THE HISTORY-WRITE QUEUE, AND ONE GTFBCB IS REMOVED    */
*   /* FROM THE HEAD OF THE HISTORY QUEUE                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0100
*/*%A: N MARK THIS GTFBLOK AS BEING BUFFERED                         */
*/* P CSD NEXTBLOK-> BLKINUSE=ON & VERIFY BLOKUSE=0 STILL            */
*/* D (OK,,FAIL,BUFFER) CS?                                          */
*/* P CQUEUE=EQHEAD                                                  */
*/* N BCBUSE NOT ALTERED BECAUSE OFF ONE QUEUE & ON ANOTHER          */
*/* P EQHEAD= CQUEUE->EQCHAIN                                        */
*/* N BECAUSE BCBUSE=1 NO SERIALIZATION LOGIC IS NEEDED              */
*/* P DIAGNOSTIC: DECR EQLENGTH 1 CQUEUE-> EQFLAG=OFF & CQFLAG=ON    */
*/*MOVEBLOK: P SET UP LENGTH & BEGINNING & END ADDRS OF GTFBLOK &  0100
*/*GTFBUFR                                                           */
*/* P MOVE LONG FROM GTFBLOK TO GTFBUFR                              */
*                                                                  0100
*   DWCOMP=DWSWAP;                  /* PREPARE TO UPDATE THE GTFBLOK
*                                      VIA CDS                       */
@RF00095 MVC   DWCOMP(8,WORKPTR),DWSWAP(WORKPTR)                   0100
*   INUSEBIT=ON;                    /* ARRANGE TO HAVE THE BLKINUSE
*                                      BIT ON AFTER THE UPDATE       */
         OI    INUSEBIT(WORKPTR),B'10000000'                       0101
*   RFY                                                            0102
*    (COMPREG1,                                                    0102
*     COMPREG2,                                                    0102
*     SWAPREG1,                                                    0102
*     SWAPREG2) RSTD;               /* DWCOMP & DWSWAP ARE LOADED  0102
*                                      INTO REGS FOR THE CDS TO GET
*                                      BETTER CODE                   */
*   GEN CODE SEQFLOW NOFLOWS REFS(COMPREG1,COMPREG2,SWAPREG1,SWAPREG2,
*       DWCOMP,WORKPTR) SETS(COMPREG1,COMPREG2,SWAPREG1,SWAPREG2); 0103
     LM   COMPREG1,SWAPREG2,DWCOMP(WORKPTR)   OBTAIN THE CS VALUES
*   CDS(COMPREG1,SWAPREG1,NEXTBLOK->BLOKSWAP);/* THIS ALSO VERIFIES
*                                      THAT THE BLOKUSE IS STILL 0   */
         L     @08,NEXTBLOK(,PCTPTR)                               0104
         CDS   COMPREG1,SWAPREG1,BLOKSWAP(@08)                     0104
*   BC(4,BUFFER);                   /* IF THE CDS FAILS SOMETHING IN
*                                      BLOKSWAP CHANGED SO GO ALL THE
*                                      WAY BACK AND TRY AGAIN        */
         BC    4,BUFFER                                            0105
*   RFY                                                            0106
*    (COMPREG1,                                                    0106
*     COMPREG2,                                                    0106
*     SWAPREG1,                                                    0106
*     SWAPREG2) UNRSTD;                                            0106
*   RFY                                                            0107
*     CQUEUE RSTD;                                                 0107
*   CQUEUE=EQHEAD;                  /* REMOVE A GTFBCB FROM THE HEAD
*                                      OF THE EMPTY QUEUE            */
         L     CQUEUE,EQHEAD(,PCTPTR)                              0108
*   EQHEAD=CQUEUE->EQCHAIN;         /* FINISH REMOVING THE GTFBCB    */
         MVC   EQHEAD(4,PCTPTR),EQCHAIN(CQUEUE)                    0109
*/*  OPTIONAL DIAGNOSTIC AID                                         */
*                                                                  0110
*   EQLENGTH=EQLENGTH-1;            /* DECREMENT THE COUNT OF GTFBCB
*                                      AVAILABLE ON THE EMPTY QUEUE  */
         L     @08,EQLENGTH(,PCTPTR)                               0110
         BCTR  @08,0                                               0110
         ST    @08,EQLENGTH(,PCTPTR)                               0110
*   CQUEUE->EQFLAG=OFF;             /* CS LOGIC IS NOT NEEDED HERE 0111
*                                      BECAUSE THE USE COUNT OF THIS
*                                      GTFBCB IS ONE AND THE QUEUE IT
*                                      IS ON CAN ONLY BE LOCATED BY
*                                      THIS MODULE                   */
*   CQUEUE->CQFLAG=ON;                                             0112
*                                                                  0112
         OI    CQFLAG(CQUEUE),B'00100000'                          0112
         NI    EQFLAG(CQUEUE),B'01111111'                          0112
*/*  OPTIONAL DIAGNOSTIC AID                                         */
*                                                                  0113
*   RFY                                                            0113
*    (MVCLTPTR,                                                    0113
*     MVCLTLEN,                                                    0113
*     MVCLFPTR,                                                    0113
*     MVCLFLEN) RSTD;                                              0113
*MOVEBLOK:                          /* COPY THE DATA FROM THE GTFBLOK
*                                      INTO THE GTFBUFR              */
*   MVCLTPTR=ADDR(CQUEUE->GBUFRPTR->GTFBUFR);/* SET UP THE ADDRESS OF
*                                      THE MVCL TARGET               */
MOVEBLOK L     MVCLTPTR,GBUFRPTR(,CQUEUE)                          0114
*   MVCLTLEN=NEXTBLOK->BLOKLEN;     /* SET UP THE LENGTH             */
         L     @08,NEXTBLOK(,PCTPTR)                               0115
         LH    MVCLTLEN,BLOKLEN(,@08)                              0115
*   MVCLFLEN=MVCLTLEN;                                             0116
         LR    MVCLFLEN,MVCLTLEN                                   0116
*   MVCLFPTR=ADDR(NEXTBLOK->BLOKAREA);/* SET UP THE ADDRESS OF WHERE
*                                      THE MVCL IS TO BE FROM        */
         LA    MVCLFPTR,BLOKAREA(,@08)                             0117
*   GEN CODE REFS(MVCLTPTR,MVCLTLEN,MVCLFPTR,MVCLFLEN,GTFBLOK) NODEFS
*       NOFLOWS SETS(GTFBUFR) NOEXIT SEQFLOW(MVCL MVCLTPTR,MVCLFPTR);
         MVCL MVCLTPTR,MVCLFPTR
*   RFY                                                            0119
*    (MVCLTPTR,                                                    0119
*     MVCLTLEN,                                                    0119
*     MVCLFPTR,                                                    0119
*     MVCLFLEN) UNRSTD;                                            0119
*                                                                  0120
*   /*****************************************************************/
*   /*                                                               */
*   /* NOW THAT THE DATA HAS BEEN COPIED INTO THE GTFBUFR IT CAN BE  */
*   /* PUT ONTO THE HISTORY & WRITE QUEUES, AND THE GTFBLOK CAN BE   */
*   /* RESET TO EMPTY. BECAUSE THE EDIT PORTION OF PRINT DUMP FORMATS*/
*   /* BOTH THE GTFBLOK AND THE HISTORY QUEUE FROM A SADUMP IT IS    */
*   /* IMPORTANT THAT THE GTFBUFR GO ON THE HISTORY QUEUE BEFORE THE */
*   /* GTFBLOK IS RESET TO EMPTY. THIS AVOIDS A MOMENT WHERE THERE   */
*   /* WOULD BE A GAP IN THE DATA, INSTEAD THERE IS A DUPLICATION    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0120
*/* N GTFBCB IS PUT ON THE QUEUES BEFORE CLEARING GTFBLOK----FOR SADUMP
*/* & EDIT                                                           */
*/* P CQUEUE-> BCBCHAIN=0                                            */
*/* N BECAUSE BCBUSE=1 NO SERIALIZATION LOGIC IS NEEDED              */
*/* P INCREMENT CQUEUE-> BCBUSE BY 2                                 */
*/* P DIAGNOSTIC: INCREMENT WQLENGTH BY 1 CQUEUE->  HQFLAG & WQFLAG=ON
*/*                                                                  */
*/* P QTAIL-> BCBCHAIN=CQUEUE                                        */
*/* N MAKE THE GTFBLOK AVAILABLE FOR USE AS SOON AS POSSIBLE         */
*/* P BLOKLEN=FIRST RECORD LENGTH+4, BLOKUSE=1 & BLKINUSE=OFF        */
*/* P NEXTBLOK= NEXTBLOK-> BLKCHAIN                                  */
*/* P QTAIL=CQUEUE                                                   */
*/* N REMOVE ONE GTFBCB (OLDEST) FROM HEAD OF THE HISTORY QUEUE      */
*/* P BCBHOLDR=HQHEAD HQHEAD= BCBHOLDR-> HQCHAIN                     */
*                                                                  0120
*   CQUEUE->BCBCHAIN=0;             /* ZERO THE CHAIN FIELD BECAUSE
*                                      THIS WILL BECOME THE END OF 0120
*                                      THE QUEUE                     */
         SLR   @08,@08                                             0120
         ST    @08,BCBCHAIN(,CQUEUE)                               0120
*   CQUEUE->BCBUSE=CQUEUE->BCBUSE+2;/* INCREMENT THE USE COUNT ONCE
*                                      FOR THE HISTORY QUEUE & ONCE
*                                      FOR THE WRITE QUEUE MP LOGIC
*                                      NOT NEEDED YET                */
         LA    @08,2                                               0121
         AH    @08,BCBUSE(,CQUEUE)                                 0121
         STH   @08,BCBUSE(,CQUEUE)                                 0121
*/*  OPTIONAL DIAGNOSTIC AID                                         */
*                                                                  0122
*   WQLENGTH=WQLENGTH+1;            /* INCR THE COUNT OF GTFBCB ON 0122
*                                      THE WRITE QUEUE               */
         LA    @08,1                                               0122
         L     @02,WQLENGTH(,PCTPTR)                               0122
         ALR   @02,@08                                             0122
         ST    @02,WQLENGTH(,PCTPTR)                               0122
*   CQUEUE->WQFLAG=ON;                                             0123
*   CQUEUE->HQFLAG=ON;                                             0124
*                                                                  0124
         OI    WQFLAG(CQUEUE),B'01001000'                          0124
*/*  OPTIONAL DIAGNOSTIC AID                                         */
*                                                                  0125
*   QTAIL->BCBCHAIN=CQUEUE;         /* PUT THIS ON THE END OF THE  0125
*                                      COMBINED QUEUES               */
         L     @02,QTAIL(,PCTPTR)                                  0125
         ST    CQUEUE,BCBCHAIN(,@02)                               0125
*   NEXTBLOK->BLOKLEN=LENGTH(RECMAP)+4;/* RESET THE GTFBLOK TO EMPTY
*                                      AS SOON AS POSSIBLE TO      0126
*                                      MINIMIZE THE OVERLAP TIME.  0126
*                                      SERIALIZATION LOGIC IS NOT  0126
*                                      NEEDED HERE SINCE THE BLKINUSE
*                                      BIT BEING ON SERIALIZES THE 0126
*                                      GTFBLOK                       */
         L     @02,NEXTBLOK(,PCTPTR)                               0126
         MVC   BLOKLEN(2,@02),@CH01819                             0126
*   NEXTBLOK->BLOKUSE=1;            /* RESET THE USE COUNT TO ONE TO
*                                      SAVE SPACE FOR THE TIMESTAMP  */
         STH   @08,BLOKUSE(,@02)                                   0127
*   NEXTBLOK->BLKINUSE=OFF;         /* AHLSBUF, IS NOW DONE WITH THE
*                                      GTFBLOK                       */
         NI    BLKINUSE(@02),B'01111111'                           0128
*   NEXTBLOK=NEXTBLOK->BLKCHAIN;    /* MOVE THE NEXT TO BE BUFFERED
*                                      PTR ON TO THE NEXT GTFBLOK    */
         L     @08,BLKCHAIN(,@02)                                  0129
         ST    @08,NEXTBLOK(,PCTPTR)                               0129
*   QTAIL=CQUEUE;                   /* POINT QTAIL TO THE NEW LAST 0130
*                                      BUFFER ON THE COMBINED QUEUES */
         ST    CQUEUE,QTAIL(,PCTPTR)                               0130
*   RFY                                                            0131
*     BCBHOLDR RSTD;                                               0131
*   BCBHOLDR=HQHEAD;                /* GET THE ADDRESS OF THE FIRST
*                                      GTFBCB ON THE HISTORY QUEUE   */
         L     BCBHOLDR,HQHEAD(,PCTPTR)                            0132
*   HQHEAD=BCBHOLDR->HQCHAIN;       /* REMOVE IT FROM THE HISTORY TO
*                                      COMPENSATE FOR THE ONE ADDED
*                                      TO THE END                  0133
*                                                                    */
         MVC   HQHEAD(4,PCTPTR),HQCHAIN(BCBHOLDR)                  0133
*                                                                  0134
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION OF CODE DISPOSES OF THE GTFBCB JUST REMOVED FROM */
*   /* THE HISTORY QUEUE                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0134
*/*DISPOSAL: P SAVE A CONTROL COPY OF BCBHOLDR-> BCBSWAP IN CASE OF CS
*/*                                                                  */
*/* D (YES,,NO,%C) BCBUSE=1 IN CONTROL COPY                          */
*/* N PUT GTFBCB ON RELEASE QUEUE SO THE WRITER WILL PGRLSE IT'S   0134
*/*GTFBUFR                                                           */
*/* P DIAGNOSTIC: BCBHOLDR-> RQFLAG=ON & HQFLAG=OFF                  */
*/* P SAVE CONTROL COPY OF RQHEAD FOR CS                             */
*/*ONTORQ: P BCBHOLDR-> RQCHAIN =RQHEAD (CONTROL COPY)               */
*/* P CS TO DO RQHEAD= BCBHOLDR                                      */
*/* D (OK,%D,FAIL,ONTORQ) CS?                                        */
*/*%C: P CS TO DECR BCBHOLDR-> BCBUSE BY 1 & DIAGNOSTIC: HQFLAG=OFF  */
*/* D (FAIL,DISPOSAL,OK,) CS?                                        */
*                                                                  0134
*   RFY                                                            0134
*     CMPWKA BASED(WORKPTR);                                       0134
*DISPOSAL:                                                         0135
*   SWAPBCB=BCBHOLDR->BCBSWAP;      /* OBTAIN A STABLE COPY OF THE 0135
*                                      PORTION OF THE GTFBCB TO BE 0135
*                                      UPDATED IN CASE CS MP LOGIC IS
*                                      NEEDED                        */
DISPOSAL MVC   SWAPBCB(4,WORKPTR),BCBSWAP(BCBHOLDR)                0135
*   IF SWAPUSE=1                    /* CHECK THE USE COUNT OF THE  0136
*                                      GTFBCB TO DECIDE WHAT TO DO 0136
*                                      WITH IT                       */
*     THEN                                                         0136
         CLC   SWAPUSE(2,WORKPTR),@CH00062                         0136
         BNE   @RF00136                                            0136
*     DO;                           /* IF IT IS 1 THEN THE HISTORY 0137
*                                      QUEUE WAS THE ONLY THING THIS
*                                      GTFBCB WAS BEING USED FOR.  0137
*                                      THIS MEANS THAT NOW IT CANNOT
*                                      BE LOCATED EXCEPT VIA BCBHOLDR
*                                      THEREFORE IT IS SAFE FROM MP &
*                                      OTHER SERILIZATION PROBLEMS.
*                                      ALSO IT MEANS THAT THE GTFBCB
*                                      MUST BE PUT ONTO THE RELEASE
*                                      QUEUE SO THAT IT WILL HAVE A
*                                      PGRLSE DONE ON IT AND THEN BE
*                                      PUT ON THE EMPTY QUEUE        */
*/*  OPTIONAL DIAGNOSTIC AID                                         */
*                                                                  0138
*       BCBHOLDR->HQFLAG=OFF;                                      0138
*       BCBHOLDR->RQFLAG=ON;                                       0139
*                                                                  0139
         OI    RQFLAG(BCBHOLDR),B'00000100'                        0139
         NI    HQFLAG(BCBHOLDR),B'11110111'                        0139
*/*  OPTIONAL DIAGNOSTIC AID                                         */
*                                                                  0140
*       RFY                                                        0140
*         COMPREG RSTD;                                            0140
*       COMPREG=RQHEAD;             /* OBTAIN A STABLE COPY OF RQHEAD*/
         L     COMPREG,RQHEAD(,PCTPTR)                             0141
*ONTORQ:                                                           0142
*       BCBHOLDR->RQCHAIN=COMPREG;  /* PUT THE GTFBCB ONTO THE     0142
*                                      RELEASE QUEUE HEAD            */
ONTORQ   ST    COMPREG,RQCHAIN(,BCBHOLDR)                          0142
*       CS(COMPREG,BCBHOLDR,RQHEAD);                               0143
         CS    COMPREG,BCBHOLDR,RQHEAD(PCTPTR)                     0143
*       BC(4,ONTORQ);               /* IF CS FAILS DO IT OVER AGAIN  */
         BC    4,ONTORQ                                            0144
*       RFY                                                        0145
*         COMPREG UNRSTD;                                          0145
*     END;                                                         0146
*   ELSE                                                           0147
*     DO;                           /* IF THE USE COUNT IS NOT 1 THE
*                                      GTFBCB IS ACCOUNTED FOR     0147
*                                      SOMEWHERE ELSE, THE USE COUNT
*                                      NEED ONLY BE DECREMENTED FOR
*                                      REMOVAL FROM THE HISTORY    0147
*                                      QUEUE. HOWEVER BECAUSE IT CAN
*                                      BE LOCATED VIA ANOTHER MEANS
*                                      MP LOGIC MUST BE USED TO    0147
*                                      UPDATE IT                     */
         B     @RC00136                                            0147
@RF00136 DS    0H                                                  0148
*       RFY                                                        0148
*         COMPREG RSTD;                                            0148
*       COMPREG=SWAPBCB;            /* SET UP FOR THE CS             */
         L     COMPREG,SWAPBCB(,WORKPTR)                           0149
*       SWAPUSE=SWAPUSE-1;          /* PREPARE THE DECREMENTED USE 0150
*                                      COUNT                         */
         LH    @08,SWAPUSE(,WORKPTR)                               0150
         BCTR  @08,0                                               0150
         STH   @08,SWAPUSE(,WORKPTR)                               0150
*/*  OPTIONAL DIAGNOSTIC AID                                         */
*                                                                  0151
*       HQFSWAP=OFF;                                               0151
*                                                                  0151
         NI    HQFSWAP(WORKPTR),B'11110111'                        0151
*/*  OPTIONAL DIAGNOSTIC AID                                         */
*                                                                  0152
*       CS(COMPREG,SWAPBCB,BCBHOLDR->BCBSWAP);/* ATTEMPT THE UPDATE  */
         L     @08,SWAPBCB(,WORKPTR)                               0152
         CS    COMPREG,@08,BCBSWAP(BCBHOLDR)                       0152
*       BC(4,DISPOSAL);             /* IF THE CS FAILED THE STATUS OF
*                                      THE GTFBCB HAS CHANGED SO GO
*                                      ALL THE WAY BACK              */
         BC    4,DISPOSAL                                          0153
*       RFY                                                        0154
*         COMPREG UNRSTD;                                          0154
*     END;                          /* IF THE CS WAS OK THEN THIS  0155
*                                      MODULE'S RESPONSIBILITY FOR 0155
*                                      THE GTFBCB IS GONE            */
*   RFY                                                            0156
*     BCBHOLDR UNRSTD;                                             0156
@RC00136 DS    0H                                                  0157
*                                                                  0157
*   /*****************************************************************/
*   /*                                                               */
*   /* ONCE THE GTFBCB IS GOTTEN RID OF THE WRITE QUEUE HEAD HAS TO  */
*   /* BE CHECKED FOR THE SPECIAL CASE OF NO GTFBCB. ORDINARILY      */
*   /* WQHEAD POINTS INTO THE COMMON HISTORY-WRITE QUEUE OF GTFBCB AT*/
*   /* THE NEXT ONE TO BE PROCESSED BY THE TRACE WRITER. HOWEVER IF  */
*   /* ALL THE GTFBCB HAVE BEEN TAKEN CARE OF WQHEAD IS SET TO 0 AND */
*   /* MUST BE REINITIALIZED WHEN A GTFBCB IS ADDED TO THE QUEUE     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0157
*/*%D: D (YES,,NO,%BB) WQHEAD=0                                      */
*/* P WQHEAD=CQUEUE                                                  */
*                                                                  0157
*   IF WQHEAD=0 THEN                                               0157
         ICM   @08,15,WQHEAD(PCTPTR)                               0157
         BNZ   @RF00157                                            0157
*     WQHEAD=CQUEUE;                                               0158
*                                                                  0158
         ST    CQUEUE,WQHEAD(,PCTPTR)                              0158
*   /*****************************************************************/
*   /*                                                               */
*   /* NEXT SAVECNT IS CHECKED TO SEE IF A SAVEHOOK WAS STACKED AND  */
*   /* SHOULD BE SEARCHED FOR                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0159
*/*%BB: N IS DATA TO BE SAVED IN AN SLE FOR A DUMP?                  */
*/* D (YES,,NO,%E) SAVECNT=0                                         */
*/*CQOFF: P C&S TO DECR BCBUSE BY 1 & DIAGNOSTIC: CQUEUE-> CQFLAG=OFF
*/*                                                                  */
*/* D (FAIL,CQOFF,OK,BUFFER) CS?                                     */
*                                                                  0159
*   IF SAVECNT=0                    /* SAVECNT IS THE NUMBER OF    0159
*                                      SAVEHOOKS CURRENTLY STACKED 0159
*                                      AND IF ONE OR MORE ARE      0159
*                                      STACKED, THE BUFFERED DATA  0159
*                                      MUST BE SEARCHED FOR THEM     */
*     THEN                                                         0159
@RF00157 ICM   @08,15,SAVECNT(PCTPTR)                              0159
         BNZ   @RF00159                                            0159
*     DO;                           /* IF NONE ARE STACKED, THE    0160
*                                      BUFFERING PROCESS IS COMPLETE
*                                      SO THE GTFBCB IS REMOVED FROM
*                                      CQUEUE. NO CHECK OF THE BCBUSE
*                                      NEEDS TO BE MADE HERE BECAUSE
*                                      IT IS KNOWN THAT IT WAS JUST
*                                      PUT ON THE HISTORY AND WRITE
*                                      QUEUE AND THE QLOCK HAS NEVER
*                                      BEEN RELEASED TO ALLOW OTHERS
*                                      ACCESS TO THE QUEUES.       0160
*                                      THEREFORE THE USECNT MUST   0160
*                                      STILL BE 3 BECAUSE IT MUST  0160
*                                      STILL BE ON THOSE 3 QUEUES.   */
*       RFY                                                        0161
*         COMPREG RSTD;                                            0161
*       COMPREG=CQUEUE->BCBSWAP;    /* PREPARE TO UPDATE THE GTFBCB  */
         L     COMPREG,BCBSWAP(,CQUEUE)                            0162
*CQOFF:                                                            0163
*       SWAPBCB=COMPREG;                                           0163
CQOFF    ST    COMPREG,SWAPBCB(,WORKPTR)                           0163
*       SWAPUSE=SWAPUSE-1;          /* PREPARE A DECREMENTED USE   0164
*                                      COUNT                         */
         LH    @08,SWAPUSE(,WORKPTR)                               0164
         BCTR  @08,0                                               0164
         STH   @08,SWAPUSE(,WORKPTR)                               0164
*/*  OPTIONAL DIAGNOSTIC AID                                         */
*                                                                  0165
*       CQFSWAP=OFF;                                               0165
*                                                                  0165
         NI    CQFSWAP(WORKPTR),B'11011111'                        0165
*/*  OPTIONAL DIAGNOSTIC AID                                         */
*                                                                  0166
*       CS(COMPREG,SWAPBCB,CQUEUE->BCBSWAP);/* ATTEMPT THE UPDATE    */
         L     @08,SWAPBCB(,WORKPTR)                               0166
         CS    COMPREG,@08,BCBSWAP(CQUEUE)                         0166
*       BC(4,CQOFF);                /* IF THE CS FAILED TRY IT AGAIN */
         BC    4,CQOFF                                             0167
*       RFY                                                        0168
*         COMPREG UNRSTD;                                          0168
*       GO TO BUFFER;                                              0169
         B     BUFFER                                              0169
*     END;                                                         0170
*                                                                  0171
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION OF CODE SEARCHES THE GTFBUFR JUST FILLED FOR SAVE*/
*   /* HOOKS, AND FOR EACH ONE FOUND INITIALIZES AN SLE & DECREMENTS */
*   /* SAVECNT BY 1                                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0171
*/*%E: P SET AFSLEBLD                                                */
*/* N SCAN THE CURRENT GTFBUFR FOR A SAVEHOOK RECORD                 */
*/* P START SCANPTR AT THE BEGINNING OF CQUEUE->GTFBUFR DATAAREA     */
*/*%GMT: D (YES,NOSAVHKS,NO,) IS SCANPTR AT THE END OF GTFBUFR       */
*/* D (YES,,NO,%G) AID=0 & FID=0                                     */
*/*%OX: P SLEPTR=SLQHEAD                                             */
*/*%SLEL: D (YES,DECRSC,NO,) SLEPTR=0                                */
*/* D (YES,SLESETUP,NO,) SLEPTR-> SLEINUSE=OFF                       */
*/* P (,%SLEL) SLEPTR=SLEPTR-> SLQCHAIN                              */
*                                                                  0171
*   AFSLEBLD=ON;                    /* TURN ON THE AUDIT FLAG FOR  0171
*                                      THIS SECTION OF CODE          */
@RF00159 OI    AFSLEBLD(PCTPTR),B'00001000'                        0171
*   RFY                                                            0172
*    (SCANPTR,                                                     0172
*     SCANEND) RSTD;                                               0172
*   SCANPTR=ADDR(CQUEUE->GBUFRPTR->GTFBUFR)+4;/* START THE SEARCH AT
*                                      THE FIRST RECORD IN THE     0173
*                                      GTFBUFR JUST FILLED           */
         L     @08,GBUFRPTR(,CQUEUE)                               0173
         LA    SCANPTR,4                                           0173
         ALR   SCANPTR,@08                                         0173
*   SCANEND=ADDR(CQUEUE->GBUFRPTR->GTFBUFR)+CQUEUE->GBUFRPTR->BIGLL;
         LH    SCANEND,BIGLL(,@08)                                 0174
         ALR   SCANEND,@08                                         0174
*                                   /* SCAN TO THE END OF THE      0175
*                                      VARIABLE LENGTH BLOCK         */
*   DO WHILE(SCANPTR<SCANEND);                                     0175
         B     @DE00175                                            0175
@DL00175 DS    0H                                                  0176
*     IF SVHKAFID=AIDFID00          /* CHECK TO SEE IF THIS RECORD IS
*                                      A SAVE HOOK RECORD            */
*       THEN                                                       0176
         CLC   SVHKAFID(2,SCANPTR),@CB01744                        0176
         BNE   @RF00176                                            0176
*       DO;                         /* IF IT IS INITIALIZE AN SLE FOR
*                                      IT                            */
*         RFY                                                      0178
*           SLEPTR RSTD;                                           0178
*         RFY                                                      0179
*           SLE BASED(SLEPTR);                                     0179
*         SLEPTR=SLQHEAD;           /* START SEARCHING THE SLE QUEUE
*                                      AT THE BEGINNING LOOKING FOR
*                                      ONE THAT IS NOT IN USE        */
         L     SLEPTR,SLQHEAD(,PCTPTR)                             0180
*         DO WHILE(SLEPTR^=0);      /* A 0 SLEPTR IS THE END OF THE
*                                      QUEUE                         */
         B     @DE00181                                            0181
@DL00181 DS    0H                                                  0182
*           IF SLEINUSE=OFF         /* IS THIS SLE IN USE            */
*             THEN                                                 0182
         TM    SLEINUSE(SLEPTR),B'10000000'                        0182
         BZ    @RT00182                                            0182
*             GO TO SLESETUP;       /* NO, SO GO INITIALIZE IT       */
*           SLEPTR=SLQCHAIN;        /* YES, SO MOVE ON TO THE NEXT 0184
*                                      SLE                           */
         L     SLEPTR,SLQCHAIN(,SLEPTR)                            0184
*         END;                                                     0185
@DE00181 LTR   SLEPTR,SLEPTR                                       0185
         BNZ   @DL00181                                            0185
*         GO TO DECRSC;             /* IF THERE ARE NO SLE AVAILABLE
*                                      THIS SAVE REQUEST WILL JUST 0186
*                                      HAVE TO BE IGNORED          0186
*                                                                    */
         B     DECRSC                                              0186
*                                                                  0187
*         /***********************************************************/
*         /*                                                         */
*         /* THIS SECTION OF CODE INITIALIZES THE SLE FROM THE SAVE  */
*         /* HOOK RECORD AND THE HISTORY QUEUE                       */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0187
*/*SLESETUP: P SLEPTR-> SLEINUSE=ON                                  */
*/*CSSLECNT: P DIAGNOSTIC: CS TO INCREMENT SLECNT BY 1               */
*/* D (FAIL,CSSLECNT,OK,) DIAGNOSTIC: CS                             */
*/* P DIAGNOSTIC: INCREMENT SLESUSED BY 1                            */
*/* P SLEBCBQ=HQHEAD & BCBHOLDR=HQHEAD SLEQCNT=0                     */
*/*%L: D (YES,%Q,NO,) BCBHOLDR=0                                     */
*/*SLEBCBCS: P CS TO INCR BCBHOLDR-> BCBUSE BY 1 & DIAGNOSTIC:     0187
*/*SQFLAG=ON                                                         */
*/* D (OK,,FAIL,SLEBCBCS) CS?                                        */
*/* P INCREMENT SLEQCNT BY 1                                         */
*/* P (,%L) BCBHOLDR= BCBHOLDR-> HQCHAIN                             */
*/*%Q: P FILL IN THE SLEHOOK FIELD FROM THE SAVEHOOK DATA            */
*/*DECRSC: P CS TO DECR SAVECNT BY 1                                 */
*/* D (FAIL,DECRSC,OK,) CS?                                          */
*/* D (YES,NOSAVHKS,NO,) SAVECNT=0                                   */
*/*%G: P (,%GMT) ADD RECORD LENGTH TO SCANPTR                        */
*/*NOSAVHKS: P CS TO DECR CQUEUE-> BCBUSE 1 & DIAGNOSTIC: CQFLAG=OFF */
*/* D (FAIL,NOSAVHKS,OK,) C&S?                                       */
*/*RETRYPT1: P (,BUFFER)  CLEAR AFSLEBLD                             */
*                                                                  0187
*SLESETUP:                                                         0187
*         SLEINUSE=ON;              /* SHOW THAT THIS SLE IS NOW IN
*                                      USE                           */
SLESETUP OI    SLEINUSE(SLEPTR),B'10000000'                        0187
*/*  OPTIONAL DIAGNOSTIC AID                                         */
*                                                                  0188
*         RFY                                                      0188
*          (COMPREG,                                               0188
*           SWAPREG) RSTD;                                         0188
*         COMPREG=SLECNT;           /* KEEP TRACK OF THE NUMBER OF 0189
*                                      SLE THAT ARE IN USE           */
         L     COMPREG,SLECNT(,PCTPTR)                             0189
*CSSLECNT:                                                         0190
*         SWAPREG=COMPREG+1;                                       0190
CSSLECNT LA    SWAPREG,1                                           0190
         ALR   SWAPREG,COMPREG                                     0190
*         CS(COMPREG,SWAPREG,SLECNT);/* AHLREADR ALSO UPDATES THIS   */
         CS    COMPREG,SWAPREG,SLECNT(PCTPTR)                      0191
*         BC(4,CSSLECNT);                                          0192
         BC    4,CSSLECNT                                          0192
*         RFY                                                      0193
*          (COMPREG,                                               0193
*           SWAPREG) UNRSTD;                                       0193
*         SLESUSED=SLESUSED+1;      /* INCR COUNT OF # OF SLE EVER 0194
*                                      USED                          */
         LA    @02,1                                               0194
         AL    @02,SLESUSED(,PCTPTR)                               0194
         ST    @02,SLESUSED(,PCTPTR)                               0194
*/*  OPTIONAL DIAGNOSTIC AID                                         */
*                                                                  0195
*         SLEBCBQ=HQHEAD;           /* PUT THE GTFBCB THAT ARE ON THE
*                                      HISTORY QUEUE ONTO THIS SLE.
*                                      THIS WILL POINT THE HEAD OF 0195
*                                      THE SLEBCBQ INTO THE COMBINED
*                                      HISTORY WRITE QUEUE WHICH NOW
*                                      WILL ANSO BECOME A SAVE QUEUE */
         L     @02,HQHEAD(,PCTPTR)                                 0195
         ST    @02,SLEBCBQ(,SLEPTR)                                0195
*         RFY                                                      0196
*           BCBHOLDR RSTD;                                         0196
*         BCBHOLDR=HQHEAD;          /* START THE LOOP AT THE       0197
*                                      BEGINNING OF THE HISTORY QUEUE*/
         L     @15,HQHEAD(,PCTPTR)                                 0197
         LR    BCBHOLDR,@15                                        0197
*         SLEQCNT=0;                /* SLEQCNT IS THE NUMBER OF VALID
*                                      GTFBCB QUEUED ON THIS SLE.    */
         SLR   @00,@00                                             0198
         ST    @00,SLEQCNT(,SLEPTR)                                0198
*         DO WHILE(BCBHOLDR^=0);    /* THIS LOOP WILL PUT THE WHOLE
*                                      HISTORY QUEUE ON THIS SLE     */
         B     @DE00199                                            0199
@DL00199 DS    0H                                                  0200
*           RFY                                                    0200
*             COMPREG RSTD;                                        0200
*           COMPREG=BCBHOLDR->BCBSWAP;/* OBTAIN STABLE COPY OF THE 0201
*                                      PART                          */
         L     COMPREG,BCBSWAP(,BCBHOLDR)                          0201
*SLEBCBCS:                                                         0202
*           SWAPBCB=COMPREG;        /* OF GTFBCB TO BE UPDATED       */
SLEBCBCS ST    COMPREG,SWAPBCB(,WORKPTR)                           0202
*           SWAPUSE=SWAPUSE+1;      /* PREPARE PROPOSED NEW USE COUNT
*                                      TO SHOW THIS GTFBCB IT ALSO 0203
*                                      QUEUED ON AN SLE              */
         LA    @05,1                                               0203
         AH    @05,SWAPUSE(,WORKPTR)                               0203
         STH   @05,SWAPUSE(,WORKPTR)                               0203
*/*  OPTIONAL DIAGNOSTIC AID                                         */
*                                                                  0204
*           SQFSWAP=ON;                                            0204
*                                                                  0204
         OI    SQFSWAP(WORKPTR),B'00010000'                        0204
*/*  OPTIONAL DIAGNOSTIC AID                                         */
*                                                                  0205
*           CS(COMPREG,SWAPBCB,BCBHOLDR->BCBSWAP);/* ATTEMPT THE   0205
*                                      UPDATE                        */
         L     @05,SWAPBCB(,WORKPTR)                               0205
         CS    COMPREG,@05,BCBSWAP(BCBHOLDR)                       0205
*           BC(4,SLEBCBCS);         /* IF THE CS FAILED TRY IT AGAIN */
         BC    4,SLEBCBCS                                          0206
*           SLEQCNT=SLEQCNT+1;      /* INCREMENT COUNT EACH TIME   0207
*                                      THROUGH LOOP AS EACH GTFBCB IS
*                                      ADDED TO THE SLEBCBQ          */
         LA    @05,1                                               0207
         AL    @05,SLEQCNT(,SLEPTR)                                0207
         ST    @05,SLEQCNT(,SLEPTR)                                0207
*           RFY                                                    0208
*             COMPREG UNRSTD;                                      0208
*           BCBHOLDR=BCBHOLDR->SQCHAIN;/* MOVE ON TO THE NEXT GTFBCB
*                                      ON THE HISTORY/SAVE QUEUE     */
         L     BCBHOLDR,SQCHAIN(,BCBHOLDR)                         0209
*         END;                                                     0210
@DE00199 LTR   BCBHOLDR,BCBHOLDR                                   0210
         BNZ   @DL00199                                            0210
*         RFY                                                      0211
*           BCBHOLDR UNRSTD;                                       0211
*         IF OPTTIME=ON             /* TIME=YES OPTION REQUESTED     */
*           THEN                                                   0212
         TM    OPTTIME(PCTPTR),B'00000001'                         0212
         BNO   @RF00212                                            0212
*           SLEHOOK=EVAL(SCANPTR+8)->SVHKDATA;/* TIME=YES REQUESTED,
*                                      SO FINISH UP THE SLE        0213
*                                      INITIALIZATION BY MOVING IN 0213
*                                      THE UNIQUE DUMP OR SAVE     0213
*                                      REQUEST INTO SLE RECORD     0213
*                                      ALLOWING FOR 8 BYTES OF     0213
*                                      TIMESTAMP                     */
         LA    @02,8                                               0213
         ALR   @02,SCANPTR                                         0213
         MVC   SLEHOOK(8,SLEPTR),SVHKDATA(@02)                     0213
*         ELSE                                                     0214
*           SLEHOOK=SVHKDATA;       /* FINISH UP THE SLE           0214
*                                      INITIALIZATION BY MOVING IN 0214
*                                      THE UNIQUE DUMP OR SAVE     0214
*                                      REQUEST IDENTIFIER. AS SOON AS
*                                      THIS IS DONE THE POSSIBILITY
*                                      THAT AHLREADR WILL ACCESS THE
*                                      SLE EXISTS. FOR THIS REASON 0214
*                                      THIS MUST BE THE LAST THING 0214
*                                      DONE, IN THIS WAY IT SERVES TO
*                                      SERIALIZE THE SLE             */
         B     @RC00212                                            0214
@RF00212 MVC   SLEHOOK(8,SLEPTR),SVHKDATA(SCANPTR)                 0214
*         RFY                                                      0215
*          (COMPREG,                                               0215
*           SWAPREG) RSTD;                                         0215
@RC00212 DS    0H                                                  0216
*DECRSC:                                                           0216
*         COMPREG=SAVECNT;          /* SET UP TO DECREMENT SAVECNT 0216
*                                      VIA CS                        */
DECRSC   L     COMPREG,SAVECNT(,PCTPTR)                            0216
*         SWAPREG=COMPREG-1;                                       0217
         LR    SWAPREG,COMPREG                                     0217
         BCTR  SWAPREG,0                                           0217
*         CS(COMPREG,SWAPREG,SAVECNT);                             0218
         CS    COMPREG,SWAPREG,SAVECNT(PCTPTR)                     0218
*         BC(4,DECRSC);                                            0219
         BC    4,DECRSC                                            0219
*         RFY                                                      0220
*          (COMPREG,                                               0220
*           SWAPREG) UNRSTD;                                       0220
*         IF SAVECNT=0              /* CHECK TO SEE IF THE ARE ANY 0221
*                                      MORE SAVE REQUESTS PENDING    */
*           THEN                                                   0221
         ICM   @02,15,SAVECNT(PCTPTR)                              0221
         BZ    @RT00221                                            0221
*           GO TO NOSAVHKS;         /* IF NOT THEN STOP SEARCHING    */
*       END;                                                       0223
*     SCANPTR=SCANPTR+SVHKLEN;      /* BUMP THE SCANPTR UP TO THE  0224
*                                      NEXT VARIABLE LENGTH RECORD BY
*                                      ADDING THE LENGTH OF THE    0224
*                                      RECORD JUST INSPECTED         */
@RF00176 AH    SCANPTR,SVHKLEN(,SCANPTR)                           0224
*     RFY                                                          0225
*       SLEPTR UNRSTD;                                             0225
*   END;                                                           0226
@DE00175 CR    SCANPTR,SCANEND                                     0226
         BL    @DL00175                                            0226
*   RFY                                                            0227
*    (SCANPTR,                                                     0227
*     SCANEND) UNRSTD;                                             0227
*   RFY                                                            0228
*     COMPREG RSTD;                                                0228
*NOSAVHKS:                                                         0229
*   COMPREG=CQUEUE->BCBSWAP;        /* SET UP TO REMOVE THIS GTFBCB
*                                      FROM THE CURRENT QUEUE        */
NOSAVHKS L     COMPREG,BCBSWAP(,CQUEUE)                            0229
*   SWAPBCB=COMPREG;                /* PREPARE A DECREMENTED USE   0230
*                                      COUNT TO INDICATE REMOVAL FROM
*                                      EMPTY QUEUE                   */
         ST    COMPREG,SWAPBCB(,WORKPTR)                           0230
*   SWAPUSE=SWAPUSE-1;                                             0231
*                                                                  0231
         LH    @08,SWAPUSE(,WORKPTR)                               0231
         BCTR  @08,0                                               0231
         STH   @08,SWAPUSE(,WORKPTR)                               0231
*/*  OPTIONAL DIAGNOSTIC AID                                         */
*                                                                  0232
*   CQFSWAP=OFF;                                                   0232
*                                                                  0232
         NI    CQFSWAP(WORKPTR),B'11011111'                        0232
*/*  OPTIONAL DIAGNOSTIC AID                                         */
*                                                                  0233
*   CS(COMPREG,SWAPBCB,CQUEUE->BCBSWAP);                           0233
         L     @08,SWAPBCB(,WORKPTR)                               0233
         CS    COMPREG,@08,BCBSWAP(CQUEUE)                         0233
*   BC(4,NOSAVHKS);                                                0234
         BC    4,NOSAVHKS                                          0234
*   RFY                                                            0235
*     COMPREG UNRSTD;                                              0235
*   AFSLEBLD=OFF;                                                  0236
         NI    AFSLEBLD(PCTPTR),B'11110111'                        0236
*   RFY                                                            0237
*     CQUEUE UNRSTD;                                               0237
*   GO TO BUFFER;                   /* GO BACK AND CHECK TO SEE IF 0238
*                                      THERE ARE MORE GTFBLOK TO BE
*                                      BUFFERED                    0238
*                                                                    */
         B     BUFFER                                              0238
*                                                                  0239
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION OF CODE IS THE END OF THE WORKING PORTION OF     */
*   /* AHLSBUF. IT RELEASES THE QLOCK AND MAKES THE SRB AVAILABLE TO */
*   /* BE RESCHEDULED. THIS IS DONE SO THAT THIS MODULE CAN BE       */
*   /* REDISPATCHED AT THIS TIME. THE RESULT IS THAT SHOULD WORK     */
*   /* BECOME AVAILABLE WHILE THE POSTING PORTION IS SUSPENDED       */
*   /* WAITING FOR THE LOCAL LOCK THE WORKING PORTION CAN STILL      */
*   /* OPERATE                                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0239
*/*NOWORK: P CLEAR THE QLOCK BYTE                                    */
*/* P GET A CONTROL COPY OF GTFSSRB FOR CS                           */
*/*NOWORKCS: D (YES,%N,NO,) CONTROL COPY OF GTFSSRB=0                */
*/* N THIS IS DONE SO ANOTHER AHLSBUF CAN BE SCHED WHILE THIS ONE IS
*/*POSTING                                                           */
*/* P CS SRBAVAIL TO ON                                              */
*/* D (FAIL,NOWORKCS,OK,) CS?                                        */
*                                                                  0239
*   RFY                                                            0239
*    (COMPREG,                                                     0239
*     SWAPREG) RSTD;                                               0239
*NOWORK:                                                           0240
*   QLOCK=CLEAR;                    /* FREE THE QLOCK. THIS MUST BE
*                                      DONE BEFORE THE SRB IS MADE 0240
*                                      AVAILABLE BECAUSE IT IS     0240
*                                      ASSUMED THAT ONLY ONE AHLSBUF
*                                      AT A TIME WILL BE CONTENDING
*                                      FOR THIS LOCK                 */
NOWORK   MVI   QLOCK(PCTPTR),X'00'                                 0240
*   COMPREG=GTFSSRB;                /* OBTAIN A STABLE COPY OF THE 0241
*                                      PTR TO THE SRB FOR AHLSBUF    */
         L     COMPREG,GTFSSRB(,PCTPTR)                            0241
*NOWORKCS:                                                         0242
*   IF COMPREG^=0                   /* CHECK TO SEE IF AHLSBUF WAS 0242
*                                      DISABLED BY SOMEONE WHILE IT
*                                      WAS RUNNING                   */
*     THEN                                                         0242
NOWORKCS LTR   COMPREG,COMPREG                                     0242
         BZ    @RF00242                                            0242
*     DO;                                                          0243
*       SWAPREG=COMPREG×'80000000'X;/* IF NOT DISABLED PREPARE TO  0244
*                                      MAKE IT AVAILABLE ONCE AGAIN  */
         LR    SWAPREG,COMPREG                                     0244
         O     SWAPREG,@CF01757                                    0244
*       CS(COMPREG,SWAPREG,GTFSSRB);/* VERIFY GTFSSRB STILL NONZERO
*                                      AND TURN O ON SRBAVAIL        */
         CS    COMPREG,SWAPREG,GTFSSRB(PCTPTR)                     0245
*       BC(4,NOWORKCS);             /* IF AT FIRST YOU DON'T SUCCEED
*                                      TRY, TRY AGAIN                */
         BC    4,NOWORKCS                                          0246
*     END;                                                         0247
*   RFY                                                            0248
*    (COMPREG,                                                     0248
*     SWAPREG) UNRSTD;                                             0248
*                                                                  0248
@RF00242 DS    0H                                                  0249
*   /*****************************************************************/
*   /*                                                               */
*   /* BEFORE GOING TO THE TROUBLE OF OBTAINING THE LOCAL LOCK FOR   */
*   /* THE PURPOSE OF POSTING THE TRACE WRITER TESTS ARE MADE TO SEE */
*   /* IF IT NEEDS POSTING. IF NOT THE POSTING SECTION OF AHLSBUF IS */
*   /* BYPASSED                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0249
*/*%N: D (NO,%GETLL,YES,) IS WRTRCOM ECB POSTED                      */
*/* N QLOCK MUST BE FREED BEFORE THE POSTWRIT BYTE IS TESTED         */
*/* D (YES,,NO,NEWWORK) IS POSTWRIT SET                              */
*/* D (YES,NEWWORK,NO,) IS QLOCKECB POSTED                           */
*                                                                  0249
*   IF WRTRCOMP=ON                  /* FIRST CHECK TO SEE IF THE ECB
*                                      THAT CAUSES THE TRACE WRITER
*                                      TO CYCLE THROUGH ITS CHECKS 0249
*                                      FOR WORK TO DO IS POSTED      */
*     THEN                          /* SINCE WRTRCOM IS POSTED THERE
*                                      IS NO NEED TO GET THE LOCAL 0249
*                                      LOCK UNLESS QLOCKECB NEEDS  0249
*                                      POSTING                       */
         TM    WRTRCOMP(PCTPTR),B'01000000'                        0249
         BNO   @RF00249                                            0249
*     IF^(POSTWRIT='FF'X&QLECBP=OFF)/* NEXT CHECK TO SEE IF THE TRACE
*                                      WRITER NEEDS TO BE POSTED OUT
*                                      OF A WAIT FOR QLOCK           */
*       THEN                        /* IF QLOCKECB DOESN'T NEED    0250
*                                      POSTING EITHER THEN SKIP TO 0250
*                                      THE END                       */
         CLI   POSTWRIT(PCTPTR),X'FF'                              0250
         BNE   @RT00250                                            0250
         TM    QLECBP(PCTPTR),B'01000000'                          0250
         BNZ   @RT00250                                            0250
*       GO TO NEWWORK;              /* SKIP POSTING                0251
*                                                                    */
*                                                                  0252
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION OF CODE POSTS EITHER OR BOTH OF THE ECB WRTRCOM &*/
*   /* QLOCKECB                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0252
*/*%GETLL: P SAVE REG 12                                             */
*/*AHLOCK1: S SETLOCK BR EP: UNCONDITIONALLY OBTAIN THE LOCAL LOCK   */
*/* P RESTORE REG 12                                                 */
*/* N ONCE THE LOCK IS HELD NOONE ELSE CAN POST THESE ECB            */
*/* D (YES,,NO,%PWC) IS POSTWRIT SET                                 */
*/* P CLEAR THE POSTWRIT BYTE                                        */
*/* S POST BRANCH EP: POST QLOCKECB ECB                              */
*/*%PWC: S POST BRANCH EP: WRTRCOM ECB                               */
*/*%RELLL: P SAVE REG 12                                             */
*/*AHLOCK2: S SETLOCK BR EP: RELEASE THE LOCAL LOCK                  */
*/* P RESTORE REG12                                                  */
*                                                                  0252
*   RFY                                                            0252
*    (R12,                                                         0252
*     R12SAVE) RSTD;                                               0252
@RF00249 DS    0H                                                  0253
*   R12SAVE=R12;                    /* SAVE THIS REG ACROSS THE    0253
*                                      SETLOCK                       */
         LR    R12SAVE,R12                                         0253
*AHLOCK1:                                                          0254
*   DO;                             /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(LOCAL)                 0254
*                                      RELATED(ECB,AHLSBUF(AHLOCK2)) */
AHLOCK1  DS    0H                                                  0255
*     RFY                                                          0255
*      (GPR11P,                                                    0255
*       GPR12P,                                                    0255
*       GPR13P,                                                    0255
*       GPR14P) RSTD;                                              0255
*     GPR13P=PSALITA;               /* ADDRESS OF LOCK INTERFACE   0256
*                                      TABLE.                        */
         L     GPR13P,PSALITA                                      0256
*     GEN(LM GPR11P,GPR13P,576(GPR13P));/* LOAD LOCKWORD, CLHT AND 0257
*                                      ENTRY ADRS.                   */
         LM GPR11P,GPR13P,576(GPR13P)
*     GEN(BALR GPR14P,GPR13P);      /* BALR TO SETLOCK RTN.          */
         BALR GPR14P,GPR13P
*     RFY                                                          0259
*      (GPR11P,                                                    0259
*       GPR12P,                                                    0259
*       GPR13P,                                                    0259
*       GPR14P) UNRSTD;                                            0259
*   END;                            /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(LOCAL)                 0260
*                                      RELATED(ECB,AHLSBUF(AHLOCK2)) */
*   R12=R12SAVE;                    /* RESTORE THIS REG AFTER THE  0261
*                                      SETLOCK                       */
         LR    R12,R12SAVE                                         0261
*   RFY                                                            0262
*    (R12,                                                         0262
*     R12SAVE) UNRSTD;                                             0262
*   RFY                                                            0263
*    (COMPCODE,                                                    0263
*     ECBADDR) RSTD;                                               0263
*   IF POSTWRIT=SET                 /* CHECK TO SEE IF THE TRACE   0264
*                                      WRITER HAS REQUESTED TO HAVE
*                                      QLOCKECB POSTED AFTER QLOCK 0264
*                                      HAS BEEN RELEASED             */
*     THEN                                                         0264
         CLI   POSTWRIT(PCTPTR),X'FF'                              0264
         BNE   @RF00264                                            0264
*     DO;                           /* IF IT HAS                     */
*       POSTWRIT=CLEAR;             /* CLEAR POSTWRIT TO SHOW THE  0266
*                                      REQUEST IS BEING HANDLED      */
         MVI   POSTWRIT(PCTPTR),X'00'                              0266
*       COMPCODE=0;                 /* BR E.P. POST COMPLETION CODE
*                                      GOES IN GPRI0                 */
         SLR   COMPCODE,COMPCODE                                   0267
*       ECBADDR=ADDR(QLOCKECB);     /* BR E.P. POST ECB ADDRESS GOES
*                                      IN GPR11                      */
         LA    ECBADDR,QLOCKECB(,PCTPTR)                           0268
*       CALL POST02;                /* BRANCH E.P. IEA0PT02 TO POST  */
         L     @08,CVTPTR                                          0269
         L     @15,CVT0PT02(,@08)                                  0269
         BALR  @14,@15                                             0269
*     END;                                                         0270
*                                                                  0270
*   /*****************************************************************/
*   /*                                                               */
*   /* POST WRTRCOM ECB. THIS ECB SHOULD BE POSTED EVEN IF AHLSBUF   */
*   /* HASN'T ADDED ANYTHING TO THE WRITE QUEUE BECAUSE THE TRACE    */
*   /* WRITER HAS OTHER FUNCTIONS WHICH IT SHOULD CYCLE THROUGH      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0271
*   COMPCODE=0;                     /* BR E.P. POST COMPLETION CODE
*                                      GOES IN GPR10                 */
@RF00264 SLR   COMPCODE,COMPCODE                                   0271
*   ECBADDR=ADDR(WRTRCOM);          /* BR E.P. POST ECB ADDRESS GOES
*                                      IN GPR11                      */
         LA    ECBADDR,WRTRCOM(,PCTPTR)                            0272
*   CALL POST02;                    /* BR E.P. IEA0PT02 TO POST      */
         L     @08,CVTPTR                                          0273
         L     @15,CVT0PT02(,@08)                                  0273
         BALR  @14,@15                                             0273
*   RFY                                                            0274
*    (COMPCODE,                                                    0274
*     ECBADDR) UNRSTD;                                             0274
*   RFY                                                            0275
*    (R12,                                                         0275
*     R12SAVE) RSTD;                                               0275
*   R12SAVE=R12;                    /* SAVE THIS REG ACROSS THE    0276
*                                      SETLOCK                       */
         LR    R12SAVE,R12                                         0276
*AHLOCK2:                                                          0277
*   DO;                             /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      RELATED(ECB,AHLSBUF(AHLOCK1)) */
AHLOCK2  DS    0H                                                  0278
*     RFY                                                          0278
*      (GPR11P,                                                    0278
*       GPR12P,                                                    0278
*       GPR13P,                                                    0278
*       GPR14P) RSTD;                                              0278
*     GPR13P=PSALITA;               /* ADDRESS OF LOCK INTERFACE   0279
*                                      TABLE.                        */
         L     GPR13P,PSALITA                                      0279
*     GEN(LM GPR11P,GPR13P,588(GPR13P));/* LOAD LOCKWORD, CLHT AND 0280
*                                      ENTRY ADRS.                   */
         LM GPR11P,GPR13P,588(GPR13P)
*     GEN(BALR GPR14P,GPR13P);      /* BALR TO SETLOCK RTN.          */
         BALR GPR14P,GPR13P
*     RFY                                                          0282
*      (GPR11P,                                                    0282
*       GPR12P,                                                    0282
*       GPR13P,                                                    0282
*       GPR14P) UNRSTD;                                            0282
*   END;                            /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      RELATED(ECB,AHLSBUF(AHLOCK1)) */
*   R12=R12SAVE;                    /* RESTORE THIS REG AFTER THE  0284
*                                      SETLOCK                       */
         LR    R12,R12SAVE                                         0284
*   RFY                                                            0285
*    (R12,                                                         0285
*     R12SAVE) UNRSTD;                                             0285
*                                                                  0286
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION OF CODE CHECKS TO SEE IF ANY WORK HAS BECOME     */
*   /* AVAILABLE FOR AHLSBUF TO DO SINCE LAST TIME IT CHECKED. IF SO */
*   /* IT ATTEMPTS TO SCHEDULE ITS OWN SRB TO TO GET ITSELF          */
*   /* REDISPATCHED AT A GLOBAL PRIORITY THIS IS DONE BECAUSE        */
*   /* OBTAINING THE LOCAL LOCK MAY HAVE CAUSED THE CURRENT PRIORITY */
*   /* TO BE REDUCED                                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0286
*/*NEWWORK: D (YES,FRROFF,NO,) NEXTBLOK= CURRBLOK                    */
*/* D (YES,FRROFF,NO,) NEXTBLOK-> BLOKUSE^=0                         */
*/* N MORE WORK BECAME AVAILABLE DURING POSTING                      */
*/* P USE C&S TO VERIFY SRBAVAIL=ON & TURN IT OFF                    */
*/* D (FAIL,FRROFF,OK,) CS?                                          */
*/* N THIS IS DONE BECAUSE THIS AHLSBUF MAY NO LONGER BE AT GLOBAL 0286
*/*PRIORITY                                                          */
*/* S SCHEDULE: SRB FOR AHLSBUF AT GLOBAL PRIORITY                   */
*                                                                  0286
*NEWWORK:                                                          0286
*   IF NEXTBLOK=CURRBLOK            /* CHECK TO SEE IF THERE ARE ANY
*                                      FULL GTFBLOK                  */
*     THEN                                                         0286
NEWWORK  L     @08,NEXTBLOK(,PCTPTR)                               0286
         C     @08,CURRBLOK(,PCTPTR)                               0286
         BE    @RT00286                                            0286
*     GO TO FRROFF;                 /* IF NOT THERE IS NOTHING TO DO */
*   IF NEXTBLOK->BLOKUSE^=0         /* IF THERE IS A FULL GTFBLOK IS
*                                      ALL THE DATA MOVED INTO THE 0288
*                                      RESERVED SPACE IN THE GTFBLOK */
*     THEN                                                         0288
         ICM   @02,3,BLOKUSE(@08)                                  0288
         BNZ   @RT00288                                            0288
*     GO TO FRROFF;                 /* IF NOT THERE IS NOTHING TO DO */
*   RFY                                                            0290
*    (COMPREG,                                                     0290
*     SWAPREG) RSTD;                /* PREPARE TO GET CONTROL OF   0290
*                                      GTFSSRB                       */
*   COMPREG=GTFSSRB×'80000000'X;    /* SET UP THE CONTROL THAT     0291
*                                      GTFSSRB MUST MATCH TO BE    0291
*                                      AVAILABLE FORCING THE SRBAVAIL
*                                      BIT TO BE ON                  */
         L     COMPREG,GTFSSRB(,PCTPTR)                            0291
         O     COMPREG,@CF01757                                    0291
*   SWAPREG=COMPREG&'7FFFFFFF'X;    /* SET UP THE REPLACEMENT VALUE
*                                      FOR GTFSSRB WITH SRBAVAIL OFF */
         LR    SWAPREG,COMPREG                                     0292
         N     SWAPREG,@CF01759                                    0292
*   CS(COMPREG,SWAPREG,GTFSSRB);    /* ATTEMPT TO GET CONTROL OF   0293
*                                      GTFSSRB                       */
         CS    COMPREG,SWAPREG,GTFSSRB(PCTPTR)                     0293
*   BC(4,FRROFF);                   /* IF GTFSSRB IS NOT AVAILABLE 0294
*                                      THEN JUST QUIT                */
         BC    4,FRROFF                                            0294
*   GEN CODE(SCHEDULE  SRB=(SWAPREG),SCOPE=GLOBAL)                 0295
*   REFS(SWAPREG,CVTPTR,CVTGSMQ,SRBFLNK,SRBSECT,CVTMAP) NOEXIT NOSETS
*       NODEFS NOFLOWS SEQFLOW;     /* IF GTFSSRB WAS AVAILABLE    0295
*                                      SCHEDULE THE SRB SO THAT THIS
*                                      MODULE CAN BE REDISPATCHED AT
*                                      A GLOBAL PRIORITY             */
         SCHEDULE  SRB=(SWAPREG),SCOPE=GLOBAL
*   RFY                                                            0296
*    (COMPREG,                                                     0296
*     SWAPREG) UNRSTD;                                             0296
*                                                                  0297
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS IS THE EXIT CODE FOR AHLSBUF. ALL IT DOES IS REMOVE      */
*   /* AHLSFRR FROM THE FRR STACK AND RESTORE GPR14 WITH THE RETURN  */
*   /* ADDRESS                                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0297
*/*FRROFF: S SETFRR: REMOVE AHLSFRR FROM FRR STACK                   */
*/* P RESTORE THE RETURN ADDRESS                                     */
*/* R RETURN                                                         */
*                                                                  0297
*   RFY                                                            0297
*    (SETFREG1,                                                    0297
*     SETFREG2) RSTD;                                              0297
*FRROFF:                                                           0298
*   GEN CODE SETS(SETFREG1,SETFREG2) REFS(FRRSEMP,FRRSCURR,FRRS,   0298
*       FRRSELEN,PSACSTK,PSA) NOFLOWS NOEXIT SEQFLOW NODEFS;       0298
FRROFF   DS    0H                                                  0298
         SETFRR  D,WRKREGS=(SETFREG1,SETFREG2)
*   RFY                                                            0299
*    (SETFREG1,                                                    0299
*     SETFREG2) UNRSTD;                                            0299
*   RFY                                                            0300
*     RETURNR RSTD;                                                0300
*   RETURNR=RETSAVR;                /* RELOAD GPR14 WITH THE RETURN
*                                      ADDRESS                       */
         LR    RETURNR,RETSAVR                                     0301
*   GEN CODE EXIT(BR 14);           /* RETURN                        */
         BR 14
*   RFY                                                            0303
*    (RETURNR,                                                     0303
*     WORKPTR) UNRSTD;                                             0303
*                                                                  0304
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS IS THE FRR FOR AHLSBUF                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0304
*/*AHLSFRR: E FROM RTM                                               */
*/*P SETUP ADDRESSABILITY TO THE WHOLE AHLSBUF MODULE                */
*/* P SAVE THE RETURN ADDRESS (REG14)                                */
*/* P SETUP THE BASE REGS FOR GTFPCT & IHASDWA                       */
*/* P SBLOKRTN=0 & GTFSSRB=0 DISABLE AHLSTACK & AHLSBUF              */
*/* S SDUMP: TAKE AN SVCDUMP                                         */
*/* P SET WSERFG02                                                   */
*/* S SETRP: CONTINUE WITH TERMINATION                               */
*/* P RESTORE THE RETURN ADDRESS (REG14)                             */
*/* R RETURN TO RTM                                                  */
*                                                                  0304
*   RFY                                                            0304
*    (SDWAPTR,                                                     0304
*     PARAMREG,                                                    0304
*     RETURNR) RSTD;                                               0304
*AHLSFRR:                                                          0305
*   GEN SETS(BASREG) REFS(SBUFADDR) NOEXIT NOFLOWS SEQFLOW;        0305
AHLSFRR  DS    0H                                                  0305
          USING  AHLSFRR,@15   ASSIGN TEMP ADDRESSIBILITY
          L      BASREG,SBUFADDR   SETUP PERMANENT ADDRESSIBILITY
          DROP   @15
*   RETSAVR=RETURNR;                /* SAVE THE RETURN ADDRESS       */
         LR    RETSAVR,RETURNR                                     0306
*   SDWAPTR=PARAMREG;               /* LOAD UP THE SDWA BASE FROM THE
*                                      PARM PASSED                   */
         LR    SDWAPTR,PARAMREG                                    0307
*   RFY                                                            0308
*     PARAMREG UNRSTD;                                             0308
*   PCTPTR=SDWAGR01;                /* RESTORE THE BASE ADDRESS FOR
*                                      THE GTFPCT                    */
         L     PCTPTR,SDWAGR01(,SDWAPTR)                           0309
*   WSERFG02=ON;                    /* SET THE ERROR FLAG IN THE   0310
*                                      GTFPCT                        */
         OI    WSERFG02(PCTPTR),B'00000001'                        0310
*   IF SDWAMCHK=ON&SDWAINSF=ON&SDWAREGU=OFF&SDWAPSWU=OFF/* IT THIS A
*                                      RECOVERABLE ACR MACHINE CHECK
*                                      TYPE ERROR                    */
*     THEN                                                         0311
         TM    SDWAMCHK(SDWAPTR),B'10000000'                       0311
         BNO   @RF00311                                            0311
         TM    SDWAINSF(SDWAPTR),B'00000100'                       0311
         BNO   @RF00311                                            0311
         TM    SDWAREGU(SDWAPTR),B'01100000'                       0311
         BNZ   @RF00311                                            0311
*     DO;                                                          0312
*       WSERFG02=OFF;                                              0313
         NI    WSERFG02(PCTPTR),B'11111110'                        0313
*       DO;                         /* SETRP RECPARM(RECID)        0314
*                                      WKAREA(SDWAPTR) RECORD(YES) 0314
*                                      RC(SDWARETY)                0314
*                                      RETADDR(SDWANXT1->PLACE)      */
*         RESPECIFY                                                0315
*          (GPR00P,                                                0315
*           GPR01P,                                                0315
*           GPR14P,                                                0315
*           GPR15P) RSTD;                                          0315
*         GPR01P=SDWAPTR;                                          0316
         LR    GPR01P,SDWAPTR                                      0316
*         GPR01P->SDWARCDE=SDWARETY;/* STORE RC INTO SDWA            */
         MVI   SDWARCDE(GPR01P),X'04'                              0317
*         GPR01P->SDWARTYA=ADDR(SDWANXT1->PLACE);/* SAVE RETRY     0318
*                                      ADDRESS                       */
         MVC   SDWARTYA(4,GPR01P),SDWANXT1(SDWAPTR)                0318
*         GPR01P->SDWARCRD='1'B;    /* TURN ON RECORD INDICATOR      */
         OI    SDWARCRD(GPR01P),B'10000000'                        0319
*         GPR15P=ADDR(RECID);       /* ACCESS RECORD PARAMETER LIST  */
         LA    GPR15P,@CC01741                                     0320
*         GPR01P->SDWARECP=GPR15P->I256C(1:24);/* COPY RECORD      0321
*                                      PARAMETERS                    */
         MVC   SDWARECP(24,GPR01P),I256C(GPR15P)                   0321
*         RESPECIFY                                                0322
*          (GPR00P,                                                0322
*           GPR01P,                                                0322
*           GPR14P,                                                0322
*           GPR15P) UNRSTD;                                        0322
*       END;                                                       0323
*     END;                                                         0324
*   ELSE                                                           0325
*     DO;                                                          0325
         B     @RC00311                                            0325
@RF00311 DS    0H                                                  0326
*       RFY                                                        0326
*        (R12,                                                     0326
*         R12SAVE2) RSTD;           /*                       @YM01896*/
*       R12SAVE2=R12;               /* SAVE THIS REG ACROSS THE    0327
*                                      SETLOCK               @YM01896*/
         LR    R12SAVE2,R12                                        0327
*AHLOCK9:                                                          0328
*       DO;                         /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(LOCAL)                 0328
*                                      RELATED(ECB,SOMEWHER(EINRTM)) */
AHLOCK9  DS    0H                                                  0329
*         RFY                                                      0329
*          (GPR11P,                                                0329
*           GPR12P,                                                0329
*           GPR13P,                                                0329
*           GPR14P) RSTD;                                          0329
*         GPR13P=PSALITA;           /* ADDRESS OF LOCK INTERFACE   0330
*                                      TABLE.                        */
         L     GPR13P,PSALITA                                      0330
*         GEN(LM GPR11P,GPR13P,576(GPR13P));/* LOAD LOCKWORD, CLHT 0331
*                                      AND ENTRY ADRS.               */
         LM GPR11P,GPR13P,576(GPR13P)
*         GEN(BALR GPR14P,GPR13P);  /* BALR TO SETLOCK RTN.          */
         BALR GPR14P,GPR13P
*         RFY                                                      0333
*          (GPR11P,                                                0333
*           GPR12P,                                                0333
*           GPR13P,                                                0333
*           GPR14P) UNRSTD;                                        0333
*       END;                        /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(LOCAL)                 0334
*                                      RELATED(ECB,SOMEWHER(EINRTM))
*                                                            @YM01896*/
*       R12=R12SAVE2;               /* RESTORE THIS REG AFTER THE  0335
*                                      SETLOCK               @YM01896*/
         LR    R12,R12SAVE2                                        0335
*       RFY                                                        0336
*        (R12,                                                     0336
*         R12SAVE2) UNRSTD;         /*                       @YM01896*/
*       RFY                                                        0337
*        (COMPCODE,                                                0337
*         ECBADDR) RSTD;            /*                       @YM01896*/
*       COMPCODE=0;                 /* BR E.P. POST COMPLETION CODE
*                                      GOES IN GPRI0         @YM01896*/
         SLR   COMPCODE,COMPCODE                                   0338
*       ECBADDR=ADDR(WRTRERR);      /* BR E.P. POST ECB ADDRESS GOES
*                                      IN GPR11              @YM01896*/
         LA    ECBADDR,WRTRERR(,PCTPTR)                            0339
*       CALL POST02;                /* BRANCH E.P. IEA0PT02 TO POST
*                                                            @YM01896*/
         L     @08,CVTPTR                                          0340
         L     @15,CVT0PT02(,@08)                                  0340
         BALR  @14,@15                                             0340
*       RFY                                                        0341
*        (COMPCODE,                                                0341
*         ECBADDR) UNRSTD;          /*                       @YM01896*/
*       PCTPTR=SDWAGR01;            /* RESTORE THE BASE ADDRESS FOR
*                                      THE GTFPCT            @YM01896*/
         L     PCTPTR,SDWAGR01(,SDWAPTR)                           0342
*       RFY                                                        0343
*        (SDUMPREG,                                                0343
*         SDUMPSA,                                                 0343
*         SDASID) RSTD;             /*                       @YM03678*/
*       SDASID=GTFASCB->ASCBASID;                                  0344
         L     @15,GTFASCB(,PCTPTR)                                0344
         SLR   SDASID,SDASID                                       0344
         ICM   SDASID,3,ASCBASID(@15)                              0344
*       SDUMPREG=WRTDLST;           /* FETCH THE ADDR OF THE LIST  0345
*                                      FORM SDUMP MACRO FOR THE    0345
*                                      WRITER-STACK SERVICE          */
         L     SDUMPREG,WRTDLST(,PCTPTR)                           0345
*       SDUMPSA=SDUMPREG-72;        /* SET UP SDUMP SAVEAREA @YM03678*/
         LR    SDUMPSA,SDUMPREG                                    0346
         SH    SDUMPSA,@CH01807                                    0346
*       GEN SETS(RCREG) NOEXIT SEQFLOW NOFLOWS NODEFS REFS(CVTPTR, 0347
*           CVTSDMP,CVTMAP,SDUMPREG,SDASID);                       0347
          SDUMP HDR='DUMP OF GTF MODULE AHLSBLOK',                     *
               BRANCH=YES,MF=(E,(SDUMPREG)),ASID=(SDASID)
*       PCTPTR=SDWAGR01;            /* RESTORE THE BASE ADDRESS FOR
*                                      THE GTFPCT                    */
         L     PCTPTR,SDWAGR01(,SDWAPTR)                           0348
*       GTFSSRB=0;                  /* ZERO OUT THE ADDRESS OF THE 0349
*                                      SRB FOR THIS ROUTINE          */
         SLR   @15,@15                                             0349
         ST    @15,GTFSSRB(,PCTPTR)                                0349
*       SBLOKRTN=0;                 /* ZERO OUT THE ADDRESS TO     0350
*                                      AHLSBLOK TO DISABLE IT        */
         ST    @15,SBLOKRTN(,PCTPTR)                               0350
*       DO;                         /* SETRP RECPARM(RECID)        0351
*                                      WKAREA(SDWAPTR) RECORD(YES) 0351
*                                      FRELOCK(LOCAL) RC(SDWACWT)    */
*         RESPECIFY                                                0352
*          (GPR00P,                                                0352
*           GPR01P,                                                0352
*           GPR14P,                                                0352
*           GPR15P) RSTD;                                          0352
*         GPR01P=SDWAPTR;                                          0353
         LR    GPR01P,SDWAPTR                                      0353
*         GPR01P->SDWARCDE=SDWACWT; /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0354
*         GPR01P->SDWARCRD='1'B;    /* TURN ON RECORD INDICATOR      */
         OI    SDWARCRD(GPR01P),B'10000000'                        0355
*         GPR15P=ADDR(RECID);       /* ACCESS RECORD PARAMETER LIST  */
         LA    GPR15P,@CC01741                                     0356
*         GPR01P->SDWARECP=GPR15P->I256C(1:24);/* COPY RECORD      0357
*                                      PARAMETERS                    */
         MVC   SDWARECP(24,GPR01P),I256C(GPR15P)                   0357
*         GPR01P->SDWAACF4=GPR01P->SDWAACF4×'00000001'B;/* INITIALIZE
*                                      LOCK FLAGS                    */
         OI    SDWAACF4(GPR01P),B'00000001'                        0358
*         RESPECIFY                                                0359
*          (GPR00P,                                                0359
*           GPR01P,                                                0359
*           GPR14P,                                                0359
*           GPR15P) UNRSTD;                                        0359
*       END;                        /* CONTINUE WITH TERMINATION     */
*     END;                                                         0361
*   RETURNR=RETSAVR;                /* RESTORE THE RETURN ADDRESS    */
@RC00311 LR    RETURNR,RETSAVR                                     0362
*   GEN CODE EXIT(BR 14);           /* RETURN                        */
         BR 14
*   RFY                                                            0364
*    (SDWAPTR,                                                     0364
*     RETURNR,                                                     0364
*     SDUMPREG,                                                    0364
*     SDUMPSA,                                                     0364
*     SDASID) UNRSTD;               /*                       @YM03678
*                                                                    */
*                                                                  0365
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS IS THE RMTR E.P. FOR THIS MODULE ITS ONLY PURPOSE IS TO  */
*   /* PROVIDE AN ADDRESS TO PUT INTO THE SRBRTMR FIELD OF THE SRB   */
*   /* USED TO SCHEDULE THIS MODULE SO THAT PURGEDQ CAN IDENTIFY IT  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0365
*AHLSBCU1:                          /* THE REASON THIS IS NOT AN   0365
*                                      ENTRY IS THAT THE PLS2 CODE 0365
*                                      GENERATED WOULD CAUSE       0365
*                                      DEGRADATION AT THE MAIN E.P.  */
*   RETURN;                                                        0365
@EL00001 DS    0H                                                  0365
@EF00001 DS    0H                                                  0365
@ER00001 BR    @14                                                 0365
*                                                                  0366
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS MACRO WILL GENERATE A PATCH AREA OF 5% OF THE MODULE     */
*   /* SIZE, AND NAME IT PATCHLOC. THE AREA WILL BE SET TO 0         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0366
*   DCL                                                            0366
*     PATCHLOC FIXED(31) STATIC;                                   0366
*   GEN DATA DEFS(PATCHLOC);                                       0367
*                                                                  0367
*   /*****************************************************************/
*   /*                                                               */
*   /* EPILOG MACRO. THIS MACRO IS REQUIRED IF ANY PLS SYSTEM MACRO  */
*   /* HAS BEEN USED. IT SHOULD COME AFTER ALL OTHER USES OF SYSTEM  */
*   /* MACROS                                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0368
*/*AHLSBUF: END                                                      */
*                                                                  0368
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR00P PTR(31) REG(0),                                       0368
*     GPR01P PTR(31) REG(1),                                       0368
*     GPR11P PTR(31) REG(11),                                      0368
*     GPR12P PTR(31) REG(12),                                      0368
*     GPR13P PTR(31) REG(13),                                      0368
*     GPR14P PTR(31) REG(14),                                      0368
*     GPR15P PTR(31) REG(15);                                      0368
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0369
*     I031F FIXED(31) BASED,                                       0369
*     I031P PTR(31) BASED,                                         0369
*     I015F FIXED(15) BASED,                                       0369
*     I015P PTR(15) BASED,                                         0369
*     I008P PTR(8) BASED,                                          0369
*     I001C CHAR(1) BASED;                                         0369
*   END                                                            0370
*                                                                  0370
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHAFRRS )                                       */
*/*%INCLUDE SYSLIB  (IHASDWA )                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (GTFPCT  )                                       */
*/*%INCLUDE SYSLIB  (IHASRB  )                                       */
*/*%INCLUDE SYSLIB  (GTFBLOK )                                       */
*/*%INCLUDE SYSLIB  (RECMAP  )                                       */
*/*%INCLUDE SYSLIB  (GTFBCB  )                                       */
*/*%INCLUDE SYSLIB  (SLE     )                                       */
*                                                                  0370
*       ;                                                          0370
         B     @EL00001                                            0370
@DATA    DS    0H
@CH00062 DC    H'1'
@CH01819 DC    H'26'
@CH01807 DC    H'72'
@DATD    DSECT
         DS    0F
AHLSBUF  CSECT
         DS    0F
@CF01757 DC    XL4'80000000'
@CF01759 DC    XL4'7FFFFFFF'
@DATD    DSECT
         DS    0D
AHLSBUF  CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
SBUFADDR DC    AL4(AHLSBUF)
@CC01741 DC    C'AHLWSMODAHLSBUF AHLSFRR '
@CB01744 DC    X'0000'
AHLSBUF  CSECT
         DS   0H
PATCHLOC DC (120)X'00'
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
AHLSBUF  CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
SDWAPTR  EQU   @03
PCTPTR   EQU   @01
SCANPTR  EQU   @06
R12      EQU   @12
R12SAVE  EQU   @03
R12SAVE2 EQU   @10
RCREG    EQU   @15
PARAMREG EQU   @01
FRREPAD  EQU   @02
SETFREG1 EQU   @04
SETFREG2 EQU   @05
BASREG   EQU   @12
RETURNR  EQU   @14
RETSAVR  EQU   @09
COMPREG  EQU   @04
SWAPREG  EQU   @05
COMPREG1 EQU   @04
COMPREG2 EQU   @05
SWAPREG1 EQU   @06
SWAPREG2 EQU   @07
CQUEUE   EQU   @13
BCBHOLDR EQU   @02
WORKPTR  EQU   @03
MVCLTPTR EQU   @04
MVCLTLEN EQU   @05
MVCLFPTR EQU   @06
MVCLFLEN EQU   @07
SLEPTR   EQU   @08
SCANEND  EQU   @07
SDUMPREG EQU   @05
SDASID   EQU   @06
SDUMPSA  EQU   @13
COMPCODE EQU   @10
ECBADDR  EQU   @11
GPR11P   EQU   @11
GPR12P   EQU   @12
GPR13P   EQU   @13
GPR14P   EQU   @14
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR15P   EQU   @15
         ENTRY AHLSBCU1
CVTPTR   EQU   16
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
PSALSFCC EQU   PSA+1012
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTRSV90 EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
FRRS     EQU   0
FRRSHEAD EQU   FRRS
FRRSEMP  EQU   FRRSHEAD
FRRSLAST EQU   FRRSHEAD+4
FRRSELEN EQU   FRRSHEAD+8
FRRSCURR EQU   FRRSHEAD+12
FRRSPTR  EQU   0
FRRSENTR EQU   0
FRRSFRRA EQU   FRRSENTR
FRRSFLGS EQU   FRRSENTR+4
FRRSFLG1 EQU   FRRSFLGS
FRRSPARM EQU   FRRSENTR+8
FRREPTR  EQU   0
SDWA     EQU   0
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWAGR01 EQU   SDWAGRSV+4
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWAREGU EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAMCHK EQU   SDWAERRA
SDWAERRB EQU   SDWAFLGS+1
SDWAERRC EQU   SDWAFLGS+2
SDWAERRD EQU   SDWAFLGS+3
SDWAIOFS EQU   SDWA+238
SDWARTYA EQU   SDWA+240
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWARCDE EQU   SDWAPARQ
SDWAACF2 EQU   SDWAPARQ+1
SDWARCRD EQU   SDWAACF2
SDWAACF3 EQU   SDWAPARQ+2
SDWAACF4 EQU   SDWAPARQ+3
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWARECP EQU   SDWA+292
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWARA   EQU   SDWA+400
SDWADPVA EQU   SDWARA+2
ASCB     EQU   0
ASCBASID EQU   ASCB+36
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBPTR  EQU   0
GTFPCT   EQU   0
GTFSTAT  EQU   GTFPCT+8
GTFOPTS  EQU   GTFPCT+12
GTFOPTS1 EQU   GTFOPTS
GTFOPTS2 EQU   GTFOPTS+1
GTFOPTS3 EQU   GTFOPTS+2
GTFOPTS4 EQU   GTFOPTS+3
OPTTIME  EQU   GTFOPTS4
PCTCATF  EQU   GTFPCT+16
EQHEAD   EQU   GTFPCT+120
RQHEAD   EQU   GTFPCT+124
WQHEAD   EQU   GTFPCT+128
HQHEAD   EQU   GTFPCT+132
QTAIL    EQU   GTFPCT+136
SLQHEAD  EQU   GTFPCT+144
SAVECNT  EQU   GTFPCT+148
NEXTBLOK EQU   GTFPCT+180
CURRBLOK EQU   GTFPCT+184
SBLOKRTN EQU   GTFPCT+188
WRTRCOM  EQU   GTFPCT+204
WRTRCOMP EQU   WRTRCOM
TRMWRIT  EQU   GTFPCT+212
WRTRERR  EQU   GTFPCT+216
GTFSSRB  EQU   GTFPCT+220
QLOCKWRD EQU   GTFPCT+236
QLOCK    EQU   QLOCKWRD
POSTWRIT EQU   QLOCKWRD+1
SCHEDBUF EQU   QLOCKWRD+2
QLOCKECB EQU   GTFPCT+240
QLECBP   EQU   QLOCKECB
WQLENGTH EQU   GTFPCT+244
EQLENGTH EQU   GTFPCT+252
SLESUSED EQU   GTFPCT+260
WRTDLST  EQU   GTFPCT+272
SLECNT   EQU   GTFPCT+284
AUDITFLG EQU   GTFPCT+296
WSERFG02 EQU   AUDITFLG+2
AFSLEBLD EQU   AUDITFLG+3
GTFASCB  EQU   GTFPCT+300
SRBSECT  EQU   0
SRB      EQU   SRBSECT
SRBFLNK  EQU   SRB+4
SRBFLC   EQU   SRB+12
WORKAREA EQU   SRBSECT+44
SRBPTR   EQU   0
COMPSWAP EQU   0
DWCOMP   EQU   COMPSWAP
DWSWAP   EQU   COMPSWAP+8
CHNFIELD EQU   DWSWAP
INUSEBIT EQU   CHNFIELD
USEFIELD EQU   DWSWAP+6
GTFBLOK  EQU   0
BLKCHAIN EQU   GTFBLOK+8
BLKINUSE EQU   BLKCHAIN
BLOKAREA EQU   GTFBLOK+12
BLOKLEN  EQU   BLOKAREA
BLOKUSE  EQU   BLOKAREA+2
RECMAP   EQU   0
RECTIME  EQU   RECMAP+6
RECGTFOP EQU   RECMAP+18
SVHKREC  EQU   0
SVHKLEN  EQU   SVHKREC
SVHKAFID EQU   SVHKREC+4
SVHKDATA EQU   SVHKREC+6
GTFBCB   EQU   0
BCBSWAP  EQU   GTFBCB+8
BCBQFLAG EQU   BCBSWAP
EQFLAG   EQU   BCBQFLAG
WQFLAG   EQU   BCBQFLAG
CQFLAG   EQU   BCBQFLAG
HQFLAG   EQU   BCBQFLAG
RQFLAG   EQU   BCBQFLAG
BCBUSE   EQU   BCBSWAP+2
BCBCHAIN EQU   GTFBCB+12
HQCHAIN  EQU   BCBCHAIN
WQCHAIN  EQU   HQCHAIN
EQCHAIN  EQU   WQCHAIN
RQCHAIN  EQU   EQCHAIN
SQCHAIN  EQU   RQCHAIN
GBUFRPTR EQU   GTFBCB+16
GTFBUFR  EQU   0
BIGLL    EQU   GTFBUFR
CMPWKA   EQU   0
SWAPBCB  EQU   CMPWKA+4
@NM00089 EQU   SWAPBCB
CQFSWAP  EQU   @NM00089
SQFSWAP  EQU   @NM00089
HQFSWAP  EQU   @NM00089
SWAPUSE  EQU   SWAPBCB+2
SLE      EQU   0
SLQCHAIN EQU   SLE+8
SLEHOOK  EQU   SLE+12
SLEDUMP  EQU   SLEHOOK+2
SLEPGLST EQU   SLE+20
SLEBCBQ  EQU   SLE+24
SLEQCNT  EQU   SLE+28
SLEFLAGS EQU   SLE+32
SLEINUSE EQU   SLEFLAGS
SVCPLIST EQU   0
PAGELIST EQU   SVCPLIST+4
POST02   EQU   0
PLACE    EQU   0
I256C    EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTSDMP  EQU   CVTS01+232
CVTGSMQ  EQU   CVTS01+264
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVT0PT02 EQU   CVTS01+532
CVTGSDA  EQU   CVTS01+600
PSARSVTE EQU   PSARSVT
PSACSTK  EQU   PSARSVTE
BLOKSWAP EQU   BLKCHAIN
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTRV301 EQU   CVTS01+475
CVTRV300 EQU   CVTS01+474
CVTRV299 EQU   CVTS01+473
CVTRV298 EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTWSAG  EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTSYSWT EQU   CVTS01+92
CVTRV327 EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
COMMONPG EQU   PAGELIST
PLINDEX  EQU   SVCPLIST
@NM00091 EQU   SLEFLAGS
SLETCBA  EQU   SLEDUMP+2
SLEASID  EQU   SLEDUMP
SLEEID   EQU   SLEHOOK
SLEID    EQU   SLE
@NM00090 EQU   @NM00089
DECBFSWA EQU   @NM00089
RQFSWAP  EQU   @NM00089
WQFSWAP  EQU   @NM00089
EQFSWAP  EQU   @NM00089
COMPBCB  EQU   CMPWKA
BCBFREQ  EQU   GTFBCB+20
DECBFLAG EQU   BCBQFLAG
SQFLAG   EQU   BCBQFLAG
GTFBCBID EQU   GTFBCB
SVHKTCB  EQU   SVHKDATA+4
SVHKASID EQU   SVHKDATA+2
SVHKEID  EQU   SVHKDATA
@NM00088 EQU   SVHKREC+2
RECLSTEV EQU   RECGTFOP
RECTOD   EQU   RECTIME+4
RECVTTZ  EQU   RECTIME
RECFID   EQU   RECMAP+5
RECAID   EQU   RECMAP+4
RECRES1  EQU   RECMAP+2
RECLL    EQU   RECMAP
BLOKID   EQU   GTFBLOK
LENFIELD EQU   DWSWAP+4
OLDLEN   EQU   DWCOMP+4
@NM00087 EQU   DWCOMP
@NM00086 EQU   SRB+40
@NM00085 EQU   SRB+38
SRBPRIOR EQU   SRB+37
SRBPKF   EQU   SRB+36
SRBSAVE  EQU   SRB+32
SRBPARM  EQU   SRB+28
SRBRMTR  EQU   SRB+24
SRBEP    EQU   SRB+20
SRBPTCB  EQU   SRBFLC+4
SRBPASID EQU   SRBFLC+2
SRBCPAFF EQU   SRBFLC
SRBASCB  EQU   SRB+8
SRBID    EQU   SRB
PCTWTOMD EQU   GTFPCT+312
PCTDMPMD EQU   GTFPCT+308
TRANSMAX EQU   GTFPCT+304
@NM00084 EQU   AUDITFLG+3
WSERFG06 EQU   AUDITFLG+3
WSERFG05 EQU   AUDITFLG+3
WSERFG04 EQU   AUDITFLG+3
WSERFG03 EQU   AUDITFLG+3
WSERFLAG EQU   AUDITFLG+2
TERMFLAG EQU   AUDITFLG+2
AFXWRIT  EQU   AUDITFLG+2
AFQLWAIT EQU   AUDITFLG+2
AFSLEGET EQU   AUDITFLG+2
AFBUFGET EQU   AUDITFLG+2
AFFEOB   EQU   AUDITFLG+2
AFBLKFIX EQU   AUDITFLG+1
AFEQFIX  EQU   AUDITFLG+1
AFPGRLSE EQU   AUDITFLG+1
AFWRAP   EQU   AUDITFLG+1
AFBUFOFF EQU   AUDITFLG+1
AFLDFX   EQU   AUDITFLG+1
AFCLOSE  EQU   AUDITFLG+1
AFOPEN   EQU   AUDITFLG+1
AFGMBLOK EQU   AUDITFLG
AFGMSRB  EQU   AUDITFLG
AFWAIT   EQU   AUDITFLG
AFTERM   EQU   AUDITFLG
AFINIT   EQU   AUDITFLG
AFWWRIT  EQU   AUDITFLG
AFCWRIT  EQU   AUDITFLG
AFIWRIT  EQU   AUDITFLG
EQSHORT  EQU   GTFPCT+292
SLEMAX   EQU   GTFPCT+288
RQPURGE  EQU   GTFPCT+280
RQTOTAL  EQU   GTFPCT+276
NUMOFBUF EQU   GTFPCT+268
SBUFDISA EQU   GTFPCT+264
EQMIN    EQU   GTFPCT+256
WQMAX    EQU   GTFPCT+248
@NM00083 EQU   QLOCKECB
@NM00082 EQU   QLOCKWRD+3
WRITERDD EQU   GTFPCT+228
GTFLOSTR EQU   GTFPCT+224
SRBAVAIL EQU   GTFSSRB
WRTRERRP EQU   WRTRERR
@NM00081 EQU   WRTRERR
TRMWRITP EQU   TRMWRIT
@NM00080 EQU   TRMWRIT
GTFCMECB EQU   GTFPCT+208
@NM00079 EQU   WRTRCOM
TRANSCNT EQU   GTFPCT+200
AHLRDPLQ EQU   GTFPCT+196
SFEOBRTN EQU   GTFPCT+192
GBCDS    EQU   NEXTBLOK
WSMODEND EQU   GTFPCT+176
WSMODBEG EQU   GTFPCT+172
BCBPAGE  EQU   GTFPCT+156
SLEPAGE  EQU   GTFPCT+152
HQLENGTH EQU   GTFPCT+140
WPOSTSRB EQU   GTFPCT+116
WTSKTCBA EQU   GTFPCT+112
WRTRTCBA EQU   GTFPCT+108
TRMWTASK EQU   GTFPCT+104
WTSKATTH EQU   GTFPCT+100
WTSKINIT EQU   GTFPCT+96
WTASKECB EQU   GTFPCT+92
WMTABPTR EQU   GTFPCT+88
ATTCHECB EQU   GTFPCT+84
AHLECB   EQU   GTFPCT+80
STOPECBA EQU   GTFPCT+76
ECBADRLT EQU   GTFPCT+72
FIXLEN   EQU   GTFPCT+68
FIXPTR   EQU   GTFPCT+64
INITPTR  EQU   GTFPCT+60
MCQEPTR  EQU   GTFPCT+56
GTFEIDL  EQU   GTFPCT+52
GTFPIBL  EQU   GTFPCT+48
GTFPIFT  EQU   GTFPCT+44
GTFSVCBL EQU   GTFPCT+40
GTFSVCFT EQU   GTFPCT+36
GTFIOBL  EQU   GTFPCT+32
GTFIOFT  EQU   GTFPCT+28
GTFSIOBL EQU   GTFPCT+24
GTFSIOFT EQU   GTFPCT+20
@NM00078 EQU   PCTCATF+1
PCTPIF   EQU   PCTCATF+1
PCTSIOF  EQU   PCTCATF+1
PCTIOF   EQU   PCTCATF+1
PCTSVCF  EQU   PCTCATF+1
PCTRR    EQU   PCTCATF+1
PCTSRM   EQU   PCTCATF+1
PCTRNIO  EQU   PCTCATF+1
PCTUSR   EQU   PCTCATF
PCTPI    EQU   PCTCATF
@NM00077 EQU   PCTCATF
PCTDSP   EQU   PCTCATF
PCTSIO   EQU   PCTCATF
PCTIO    EQU   PCTCATF
PCTEXT   EQU   PCTCATF
PCTSVC   EQU   PCTCATF
OPTRES3  EQU   GTFOPTS4
OPTIOSIO EQU   GTFOPTS3
OPTRES2  EQU   GTFOPTS3
OPTRR    EQU   GTFOPTS3
OPTSRM   EQU   GTFOPTS3
OPTRNIO  EQU   GTFOPTS3
OPTEXT   EQU   GTFOPTS3
OPTIOP   EQU   GTFOPTS2
OPTIO    EQU   GTFOPTS2
OPTPIP   EQU   GTFOPTS2
OPTPI    EQU   GTFOPTS2
OPTSIOP  EQU   GTFOPTS2
OPTSIO   EQU   GTFOPTS2
OPTSVCP  EQU   GTFOPTS2
OPTSVC   EQU   GTFOPTS2
OPTPCI   EQU   GTFOPTS1
OPTRES1  EQU   GTFOPTS1
OPTDSP   EQU   GTFOPTS1
OPTTRC   EQU   GTFOPTS1
OPTUSR   EQU   GTFOPTS1
OPTSYS   EQU   GTFOPTS1
OPTSYSP  EQU   GTFOPTS1
OPTSYSM  EQU   GTFOPTS1
GTFRESV  EQU   GTFSTAT
GTFDEBUG EQU   GTFSTAT
GTFMODE  EQU   GTFSTAT
GTFPCTID EQU   GTFPCT
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBLGCB EQU   ASCB+180
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBCMSB EQU   ASCB+132
ASCBCMSF EQU   ASCB+128
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBQSVC EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSM  EQU   ASCB+52
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBLSLQ EQU   ASCB+24
ASCBFSLQ EQU   ASCB+20
ASCBIOSP EQU   ASCB+16
ASCBLOCK EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
@NM00076 EQU   SDWA+512
SDWAVRA  EQU   SDWARA+4
SDWAURAL EQU   SDWARA+3
@NM00075 EQU   SDWADPVA
SDWAEBC  EQU   SDWADPVA
SDWAHEX  EQU   SDWADPVA
SDWAVRAL EQU   SDWARA
@NM00074 EQU   SDWA+396
SDWACOMP EQU   SDWA+392
SDWARCPL EQU   SDWA+364
@NM00073 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00072 EQU   SDWADDAT+3
@NM00071 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00070 EQU   SDWADDAT+1
@NM00069 EQU   SDWASDAT
SDWAQQS  EQU   SDWASDAT
SDWACBS  EQU   SDWASDAT
SDWAGTF  EQU   SDWASDAT
SDWASWA  EQU   SDWASDAT
SDWALSQA EQU   SDWASDAT
SDWASQA  EQU   SDWASDAT
SDWANUC  EQU   SDWASDAT
@NM00068 EQU   SDWADUMP+2
@NM00067 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00066 EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
SDWAREXN EQU   SDWARECP+16
SDWACSCT EQU   SDWARECP+8
SDWAMODN EQU   SDWARECP
@NM00065 EQU   SDWALKWA+32
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAAPLW EQU   SDWALKWS+16
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWASALL EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00064 EQU   SDWAACF3
@NM00063 EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
SDWAUPRG EQU   SDWAACF2
@NM00062 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00061 EQU   SDWAACF2
SDWALCPU EQU   SDWACPUA+2
@NM00060 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
@NM00059 EQU   SDWA+239
@NM00058 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
SDWAFMID EQU   SDWA+236
@NM00057 EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWANRBE EQU   SDWAERRD
SDWACLUP EQU   SDWAERRD
@NM00056 EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAPERC EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASTAF EQU   SDWAERRC
SDWASRBM EQU   SDWAERRB
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00055 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWAPCHK EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00054 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00053 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00052 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR15 EQU   SDWASRSV+60
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR09 EQU   SDWASRSV+36
SDWASR08 EQU   SDWASRSV+32
SDWASR07 EQU   SDWASRSV+28
SDWASR06 EQU   SDWASRSV+24
SDWASR05 EQU   SDWASRSV+20
SDWASR04 EQU   SDWASRSV+16
SDWASR03 EQU   SDWASRSV+12
SDWASR02 EQU   SDWASRSV+8
SDWASR01 EQU   SDWASRSV+4
SDWASR00 EQU   SDWASRSV
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00051 EQU   SDWAINC2
@NM00050 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00049 EQU   SDWAILC2
@NM00048 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00047 EQU   SDWANXT2
@NM00046 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00045 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00044 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00043 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00042 EQU   SDWAINC1
@NM00041 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00040 EQU   SDWAILC1
@NM00039 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00038 EQU   SDWANXT1
@NM00037 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00036 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00035 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00034 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00033 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR15 EQU   SDWAGRSV+60
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00032 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00031 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
SDWACMPC EQU   SDWAABCC+1
@NM00030 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00029 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
SDWAREQ  EQU   SDWACMPF
SDWAPARM EQU   SDWA
@NM00028 EQU   FRRSFLGS+1
@NM00027 EQU   FRRSFLG1
FRRSNEST EQU   FRRSFLG1
FRRSRCUR EQU   FRRSFLG1
FRRSENTS EQU   FRRS+84
FRRSRTMW EQU   FRRS+16
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00002 EQU   CVTFIX+248
@NM00001 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTRSVA1 EQU   CVTXTNT2+48
CVTRSVA0 EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTRSV90
CVTRSV9G EQU   CVTRSV90
CVTRSV9F EQU   CVTRSV90
CVTRSV9E EQU   CVTRSV90
CVTRSV9D EQU   CVTRSV90
CVTRSV9C EQU   CVTRSV90
CVTRSV9B EQU   CVTRSV90
CVTRSV9A EQU   CVTRSV90
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTRV484 EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTINTLA EQU   CVTMAP+320
CVTERPV  EQU   CVTMAP+316
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRSV37 EQU   CVTDMSR
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTRV319 EQU   CVTUSR
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTIERLC EQU   CVTMAP+144
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00026 EQU   PSA+3412
PSASTAK  EQU   PSA+3072
@NM00025 EQU   PSA+1032
PSAUSEND EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSARV060 EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSARV054 EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSARV058 EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSAMODE  EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00024 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00023 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSARV011 EQU   PSASUP3
PSARV010 EQU   PSASUP3
PSARV009 EQU   PSASUP3
PSARV008 EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSAIPCRP EQU   PSASUP1
PSAIPCDR EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00022 EQU   FLCFSA
@NM00021 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00020 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00019 EQU   FLCIOA
@NM00018 EQU   FLCMCLA+15
@NM00017 EQU   FLCMCLA+14
@NM00016 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00015 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00014 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00013 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00012 EQU   FLCPER
@NM00011 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00010 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00009 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00008 EQU   FLCPIILC
@NM00007 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00006 EQU   FLCSVILC
@NM00005 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00004 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00003 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00074 EQU   FRROFF
@RT00080 EQU   FRROFF
@RT00090 EQU   NOWORK
@RT00093 EQU   NOWORK
@RT00182 EQU   SLESETUP
@RT00221 EQU   NOSAVHKS
@RT00250 EQU   NEWWORK
@RT00286 EQU   FRROFF
@RT00288 EQU   FRROFF
AHLSBCU1 EQU   @EL00001
@ENDDATA EQU   *
         END   AHLSBUF,(C'PL/S-II',0503,73286)
