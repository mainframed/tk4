         TITLE 'AMDPRFCB - FORMAT CONTROL BLOCKS ROUTINE'
         GBLB  &PARMLST
AMDPRFTC CSECT                                                  @Y02006
* /* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = AMDPRFCB
*
*01*  DESCRIPTIVE-NAME = FORMAT CONTROL BLOCKS SERVICE ROUTINE
*
*01*  COPYRIGHT = NONE
*
*01*  STATUS - OS/VS2 RELEASE 037    SU07 AND SU17             @OZ24844
*
*01*  FUNCTION = FORMAT TASK-LEVEL CONTROL BLOCKS
*
*02*     OPERATION = THIS MODULE IS CALLED AT ANY OF ITS 6 ENTRY POINTS
*        BY AMDPRFSC TO PERFORM THE APPROPRIATE FORMATTING OF CONTROL
*        BLOCKS. SEE EACH CSECT FOR MORE DETAILS.
*
*01*   NOTES = THIS MODULE WAS CREATED AS A RESULT OF SPLITTING
*      AMDPRFSR INTO AMDPRFSC AND AMDPRFCB. THE TWO MODULES WILL BE
*      LINK-EDITTED TOGETHER AT SYSTEM GENERATION TO CREATE ONE MODULE
*      AGAIN NAMED AMDPRFSR.
*
*02*     DEPENDENCIES = THIS MODULE IS DEPENDENT ON THE FORMAT OF THE
*        FOLLOWING CONTROL BLOCKS: TCB, RB, CDE, LLE, XL, D-PQE, PQE,
*        DEB, TIOT.
*
*03*        CHARACTER-CODE-DEPENDENCIES = EBCDIC
*
*02*     RESTRICTIONS = NONE
*
*02*     REGISTER-CONVENTIONS = REFER TO THE EQUATES MACRO
*
*02*     PATCH-LABEL = FTCPCH, FRBPCH, FMSPCH, FLDPCH, FDBPCH, FIOPCH:
*        AT END OF EACH CSECT
*
*01*  MODULE-TYPE = PROCEDURE
*
*02*     PROCESSOR = ASSEMBLER
*
*02*     MODULE SIZE - 9428 BYTES    (24D4 HEX)                @OZ24844
*
*02*     ATTRIBUTES = PROBLEM PROGRAM REGION, REUSABLE
*
*01*  ENTRY-POINT = AMDPRFTC, AMDPRFRB, AMDPRFMS, AMDPRFLD, AMDPRFDB,
*     AMDPRFIO.
*
*02*     PURPOSE = SEE EACH CSECT
*
*02*     LINKAGE = SEE EACH CSECT
*
*02*     INPUT = SEE EACH CSECT
*
*02*     OUTPUT = SEE EACH CSECT
*
*01*  EXIT-NORMAL = TO CALLER
*
*02*     CONDITIONS = SEE EACH CSECT
*
*02*     OUTPUT = SEE EACH CSECT
*
*02*     RETURN-CODES = SEE EACH CSECT
*
*01*  EXIT-ERROR = NONE
*
*01*  EXTERNAL-REFERENCES = SEE EACH CSECT
*
*01*  TABLES = SEE EACH CSECT
*
*01*  MACROS = SEE EACH CSECT
*
*02*     SERIALIZATION = NONE
*
*01*  CHANGE-ACTIVITY = SINCE MODULE (ORIGINALLY AMDPRFSR) WAS SPLIT
*     AND RE-SEQUENCED, ONLY CHANGES AND ADDITIONS WILL BE FLAGGED.
*     (OLD FLAGS WILL REMAIN ON THE INSTRUCTIONS, BUT ONLY NEW FLAGS
*     WILL BE SUMMARIZED.)
*     A 104110,104940-104980,114740-114780,115400,              @Y02006
*     A 137710-137720,150740-150892,153900-153980,169790,       @Y02006
*     A 179110-179140,210740-210780,224510-224520,235310,       @Y02006
*     A 244710,259710-259720,263310,263510-263530,              @Y02006
*     A 284310-284350,330110-330140,330910-330930,337710,       @Y02006
*     A 338310,339110-339130,339910-339940,340710-340730,       @Y02006
*     A 352310-352330,356510,358110,369102-369108,382510,       @Y02006
*     A 397510,402910-402950,417310,446310-446320,              @Y02006
*     A 448570-448690,456310-456350,459510,461710-461810,       @Y02006
*     A 466310,480710,481910-482010,487510-487520,              @Y02006
*     A 490300-490420,512510-512530,515310-515320               @Y02006
*     C 001040,115100-115300,120300,130700,132500,133900,       @Y02006
*     C 139700-140300,141300-141900,142900-143500,              @Y02006
*     C 144500-145100,145700,146100-146700,147100-148100,       @Y02006
*     C 148500-149500,149900,150300-150700,151700-152300,       @Y02006
*     C 153500-153700,169700,174300,210900,232100,234300,       @Y02006
*     C 263300,263500,263700,281300,329500,329900,334100,       @Y02006
*     C 335700,336500,339100,339300-339500,340100-340500,       @Y02006
*     C 344500,346700-346900,347300,347900,350700,351100,       @Y02006
*     C 353300,356500,381300-381500,402100,415700,416900,       @Y02006
*     C 446500,463900-464100,481100,490100                      @Y02006
*     A 169740-169780,202140,207300-207660,215340,             @YA01753
*     A 251310-251410,255710                                   @YA01753
*                                                              @OZ09006
*  OZ09006 - IMPLEMENT COMMON SU SUPPORT                       @OZ09006
*          - CHECK SUBITS TO DETERMINE OUTPUT                  @OZ09006
*                                                              @OZ09676
*  OZ09676 - DEB CHAIN PRINTING IS TERMINATED PREMATURELY      @OZ09676
*          - ADD COMMENT 'UNABLE TO ACCESS AVT......'          @OZ09676
*                                                              @OZ09681
*  OZ09681 - CDE CHAIN ABANDONED WHEN ONE CDE IS UNAVALIABLE   @OZ09681
*          - ADD COMMENT 'UNABLE TO ACCESS CDE XXXXXX'         @OZ09681
*                                                              @OZ14113
*  OZ14113 - ADDRESS IN UNABLE TO ACCESS CDE IS ALWAYS ZERO    @OZ14113
*          - SET CDE ADDR IN R1 BEFORE CONVERTING TO OUTPUT    @OZ14113
*                                                              @OA14114
*  OZ14114 - LLESYSCT FIELD SHOULD BE TWO BYTES INSTEAD OF ONE @OZ14114
*          - CALL TWO BYTE ROUTINE INSTEAD OF ONE BYTE ROUTINE @OZ14114
*                                                              @OZ17662
*  OZ17662 - TCBXSCT & TCBSTAWA FIELDS LABELED WRONG           @OZ17662
*    D90   - FIX PROB + TCBDDEXC & ADD TCBRPT,DBTB,SWASA,SVCA2 @OZ17662
*                                                              @OZ14114
*                                                              @OZ24844
*  OZ24844 - EXTENDED SAVE AREA IS FORMATTED TOO LONG          @OZ24844
*    D91   - CHANGE CONSTANTS FOR RBSIZE W/O EXTENDED S/A      @OZ24844
*
*01*  MESSAGES = NONE
*
*01*  ABEND-CODES = NONE
*
**** END OF SPECIFICATIONS ***/
*/*AMDPRFCB: CHART (SEQ) */
*/* HEADER
*/*AMDPRFCB - FORMAT CONTROL BLOCKS ROUTINE
*/*                                                  PAGE #      */
*/*AMDPRFTC: E TCBPRNT */
*/* P SET UP ADDRESSABILITY */
*/* P PUT ERROR RTN ADDR IN COMMON */
*/* D (NO,TCBPRNT5,YES,) IS TCB CURRENT TCB */
*/* S BRWRITE: WRITE CURRENT TASK MSG */
*/*TCBPRNT5: P PUT TCB ADDR IN FORMAT PATTERN */
*/* S TCBFMPR: FORMAT AND PRINT FIRST LINE OF TCB */
*/* S TCBFMPR: FORMAT AND PRINT LINE 2 OF TCB */
*/* S TCBPTRG: FORMAT AND PRINT REGS */
*/* S TCBFMPR: FORMAT AND PRINT LINE 5 OF TCB */
*/* S TCBFMPR: FORMAT AND PRINT LINE 6 OF TCB */
*/* S TCBFMPR: FORMAT AND PRINT LINE 7 OF TCB */
*/* S TCBFMPR: FORMAT AND PRINT LINE 8 OF TCB */
*/* S TCBFMPR: FORMAT AND PRINT LINE 9 OF TCB */
*/* S TCBFMPR: FORMAT AND PRINT LINE 10 OF TCB */
*/* S TCBFMPR: FORMAT AND PRINT LINE 11 OF TCB */
*/* S BRREAD: GET ADDRESS OF AOS/1-AOS/2 TCB EXTENSION */
*/* S (,TCBPRNTC) TCBFMPR: FORMAT AND PRINT LINE 1 OF AOS EXTENSION */
*/*TCBFMPR: S FMTLINE: FORMAT THE LINE FOR PRINTING */
*/* S BRWRITE: PRINT THE LINE */
*/* R RETURN VIA R9 */
*/*TCBPRNTC: S BRREAD: GET FIFTH FLAG BYTE OF TCB */
*/* D (NO,TCBPRNT8,YES,) TASK TERMINATION FLAG ON */
*/* S BRWRITE: SPACE A LINE */
*/* S BRWRITE: WRITE TERMINATED MSG */
*/* P (,TCBPRDN1) SET RETURN CODE = 4 */
*/*TCBPRNT8: S BRWRITE: SPACE 2 LINES */
*/*TCBPRDN: P SET RETURN CODE = 0 */
*/*TCBPRDN1: P RESTORE PREVIOUS ERROR RTN ADDR */
*/* P RESTORE CALLER'S REGS */
*/* R RETURN */
*/*TCBPRER: N ROUTINE FOR FORMAT OR I/O ERROR */
*/* P SET UP ADDRESSABILITY */
*/* S (,TCBPRDN) BRWRITE: WRITE TCB FORMAT ERROR MSG */
*/*TCBPTRG: N ROUTINE TO PRINT REGS FOR TCBPRNT & RBPRNT RTNS */
*/* P SET UP ADDRESSABILITY */
*/*TCBPTRG4: P MOVE AOS/2 REG HEADING 0 - 7 TO BUFFER */
*/*TCBPTRG5: P LOAD OUTER LOOP COUNT */
*/*TCBPTRG1: P LOAD WHERE-TO-PUT-IT ADDR & INNER LOOP CNT */
*/*TCBPTRG2: P LOAD ADDR OF REGS */
*/* S BRREAD: GET THE REGS */
*/* S WRDCNVT: CONVERT REG TO PRINTABLE HEX */
*/* P UPDATE WORD INDEX & WHERE-TO-PUT-IT ADDR */
*/* D (NO,TCBPTRG2,YES,) 8 REGS DONE */
*/* S BRWRITE: PRINT ALINE */
*/* D (NO,TCBPTRG6,YES,) 2 LINES DONE */
*/* R RETURN */
*/*TCBPTRG6: P (,TCBPTRG1) MOVE IN AOS/2 HEADING 8 - 15 */
*/*AMDPRFRB: E RBPRNT */
*/* P SET UP ADDRESSABILITY */
*/* P SET UP ERROR AND STOP ROUTINE ADDRS */
*/* S RBPRGE: PURGE ALL RB ADDRS ON RBLIST */
*/* P POINT TO RB ADDR IN TCB */
*/*RBLOOP1: S BRREAD: GET NEXT RB ADDR */
*/* D (YES,RBPRNT1,NO,) IS RB ADDR = 0 */
*/* D (YES,RBPRNT1,NO,) IS NEXT RB ADDR = TCB */
*/* S RBSAVE: SAVE RB ADDR ON RBLIST */
*/* P (,RBLOOP1) BUMP PTR TO NEXT RB */
*/*RBPRNT1: P MOVE 'ACTIVE RBS' HEADING TO BUFFER */
*/* S BRWRITE: WRITE THE HEADING */
*/* S RBGET: GET NEXT RB */
*/* D (NO,RBDONE,YES,) WAS THERE ONE */
*/*RBPRNT2: S BRREAD: GET RB SIZE/STATUS WORD */
*/* S ADRCNVT: CONVERT RB ADDR TO PRINTABLE HEX */
*/* D (SVRB,RBSVRB,IRB,RBIRB,PRB,) BR TYPE = ? */
*/* P (,RBPRNT4) GET ADDR OF PRB INDEX */
*/*RBSVRB: D (YES,RBTSVRB,NO,) TRANSIENT SVRB */
*/* P (,RBPRNT4) GET ADDR OF RESIDENT SVRB INDEX */
*/*RBTSVRB: P  (,RBPRNT4) GET ADDR OF TRANSIENT SVRB INDEX */
*/*RBIRB: D (YES,RBSIRB,NO,) SIRB */
*/* D (YES,RBTIRB,NO,) TIRB */
*/* P (,RBPRNT4) GET ADDR OF IRB INDEX */
*/*RBTIRB: P (,RBPRNT4) GET ADDR OF TIRB INDEX */
*/*RBSIRB: P GET ADDR OF SIRB INDEX */
*/*RBPRNT4: P GET ADDR OF BEGIN FIELD IN RB PREFIX */
*/* P SET UP FOR FORMAT ROUTINE */
*/* S FMTLINE: FORMAT THE LINE */
*/* S BRWRITE: PRINT THE LINE */
*/* P MOVE 'RESV', 'NM', OR 'FL-CDE'  TO BUFFER */
*/* S BRREAD: GET FIRST FIELD OF RB */
*/* S WRDCNVT: CONVERT THE FIRST FIELD OF RB */
*/* P MOVE 'APSW' TO BUFFER */
*/* S BRREAD: GET THE DATA FOR 'APSW' */
*/* S WRDCNVT: CONVERT THE DATA TO PRINTABLE HEX */
*/* P MOVE 'SZ-STAB' TO BUFFER */
*/* S BRREAD: GET THE DATA FOR THAT FIELD */
*/* S WRDCNVT: CONVERT THE DATA */
*/* P MOVE 'FL-CDE', 'LPDE', 'RESV', OR 'EPA' TO BUFFER */
*/* S BRREAD: GET THE DATA FOR THE FIELD */
*/* S WRDCNVT: CONVERT THE DATA */
*/* P MOVE 'PSW' TO BUFFER */
*/* S BRREAD: GET DATA FOR 1ST HALF OF PSW */
*/* S WRDCNVT: CONVERT THE DATA */
*/* S BRREAD: GET 2ND HALF OF PSW */
*/* S WRDCNVT: CONVERT THE PSW DATA */
*/* S BRWRITE: WRITE THE FIRST LINE OF RB */
*/* P MOVE 'Q' TO BUFFER */
*/* S BRREAD: GET DATA FOR 'Q' */
*/* S WRDCNVT: CONVERT THE 'Q' DATA */
*/* P MOVE 'WT-LNK' TO BUFFER */
*/* S BRREAD: GET DATA FOR 'WT-LNK' */
*/* S WRDCNVT: CONVERT THE DATA */
*/* D (SVRB,PRBPRT,PRB,PRBPRT,IRB,) TEST RB TYPE */
*/* D (YES,RBPRNT3,NO,) IRB ? */
*/* S BRREAD: GET NAME FIELD OF SIRB */
*/* P MOVE 'NM' TOBUFFER */
*/* P (,RBPRNT3) MOVE RTN NAME FROM SIRB TO BUFFER */
*/*RBPRNT3: S TCBPTRG: FORMAT AND PRINT REGS IN THE RB */
*/* D (NO,RBPRTDN,YES,) DOES RB HAVE EXT. SAVE AREA */
*/* S (,RBPRTDN) EXTSAPT: PRINT EXTENDED SAVE AREA */
*/*PRBPRT: N RTN TO COMPLETE THE FORMAT FOR PRBS & SVRBS */
*/* S BRREAD: GET CDE/LPDE PTR FROM RB */
*/* D (YES,RBPRT3,NO,) IS CDE/LPDE PTR = 0 */
*/* S BRREAD: GET FIRST FIELD OF CDE/LPDE */
*/* S BRREAD: GET NAME FIELD OF CDE/LPDE */
*/* P MOVE 'NM' TO BUFFER */
*/* P MOVE NAME FROM CDE/LPDE TO BUFFER */
*/* S BRREAD: GET ENTRY POINT FROM CDE/LPDE */
*/* P MOVE 'EPA' TO BUFFER */
*/* S ADRCNVT: CONVERT ENTRY POINT ADDR TO PRINTABLE HEX */
*/* D (NO,CDE,YES,RBPRNT3) TRANS. SVRB */
*/*CDE: S BRREAD: GET PTR TO MAJOR CDE OR EXTENT LIST */
*/* P SAVE THE PTR */
*/* S BRREAD: GET ATTR BYTES FROM CDE/LPDE */
*/* P SAVE ATTR BYTES */
*/* D (YES,RBPRT1,NO,) IS CURRENT CDE A MINOR */
*/*RBPRT2: P MOVE 'STA' TO BUFFER */
*/* S BRREAD: GET STARTING ADDR FROM MAJOR CDE */
*/* S ADRCNVT: CONVERT THE STARTING ADDRESS */
*/* P MOVE 'LN' TO BUFFER */
*/* S BRREAD: GET SIZE OF MODULE FROM CDE */
*/* S ADRCNVT: CONVERT SIZE */
*/*NOMAJOR: P MOVE 'ATR1' TO BUFFER */
*/* S HEXCNVT: CONVERT ATTRIBUTE FIELD */
*/* P MOVE 'ATR2' TO BUFFER */
*/* S HEXCNVT: CONVERT ATTRIBUTE FIELD */
*/*RBPRT3: D (YES,RBPRNT3,NO,) SVRB */
*/* S (,RBPRTDN) BRWRITE: PRINT LAST LINE OF RB */
*/*RBPRT1: N RTN TO GET EXTENT LIST PTR FROM MAJOR CDE */
*/* S BRREAD: GET XTENT LIST PTR FROM CDE */
*/* P (,RBPRT2) SAVE XTENT LIST PTR */
*/*RBPRTDN: N DONE PRINTING RB... LOOK FOR ANOTHER */
*/* S RBGET: GET NEXT RB ADDR */
*/* D (NO,RBDONE,YES,) WAS THERE ONE */
*/* S (,RBPRNT2) BRWRITE: SPACE 1 LINE */
*/*RBDONE: N DONE WITH RB CHAIN ... RETURN TO FORMAT RTN */
*/* S BRWRITE: SPACE 2 LINES */
*/* P RESTORE CALLER'S STOP RTN ADDR */
*/* P RESTORE REGS */
*/* R RETURN */
*/*TOOMANY: N MORE THAN 50 RBS ON RB CHAIN */
*/* P MOVE INFINITE LOOP MSG TO BUFFER */
*/* S (,RBPRNT1) BRWRITE: WRITE MSG AND SPACE 2 LINES */
*/*EXTSAPT: N PRINT RB EXTENDED SAVE AREA */
*/* P SET INDEX */
*/*EXTLOOP2: P GET INIT. WHERE-TO-PUT-IT ADDR */
*/* P LOAD LOOP COUNT */
*/*EXTLOOP1: S BRREAD: GET A WORD FROM EXTENDED SAVE AREA */
*/* S WRDCNVT: CONVERT THE WORD */
*/* P DECREMENT BYTES TO PRINT COUNT */
*/* D (NO,EXTDONE,YES,) ANY LEFT */
*/* P INCREMENT WHERE-TO-PUT-IT ADDR */
*/* P INCREMENT INDEX */
*/* D (NO,EXTLOOP1,YES,) LINE COMPLETE */
*/* S (,EXTLOOP2) BRWRITE: PRINT THE LINE */
*/*EXTDONE: S BRWRITE: PRINT LAST LINE */
*/* R RETURN VIA R9 */
*/*RBERROR: N ROUTINE FOR ERROR IN RB FORMAT */
*/* P SET UP ADDRESSABILITY */
*/* S BRWRITE: SPACE A LINE */
*/* P MOVE ERROR MSG TO BUFFER */
*/* S BRWRITE: PRINT MSG */
*/* M RESET ERROR SWITCHES */
*/* M (,RBPRTDN) RESET ERROR SWITCHES */
*/*RBSAVE: P ADD ONE TO TOTAL RB COUNT */
*/* D (YES,TOOMANY,NO,) 50 RBS ON CHAIN */
*/* P SAVE TOTAL RB COUNT */
*/* P RBTLIST = TCBLIST */
*/* P TCBLIST = RBLIST */
*/* S TCBSAVE: SAVE RB ADDR ON RBLIST */
*/* D (YES,TOOMANY,NO,) WAS RB ADDR ALREADY ON RBLIST */
*/* P ADD ONE TO CNT FOR RBS ON RBLIST */
*/*RBSAVE1: P RBLIST = TCBLIST; TCBLIST = RBTLIST */
*/* R RETURN VIA R9 */
*/*RBSTPOUT: P RESTORE ERROR HANDLER'S ADDR */
*/* P RESTORE CALLER'S STOP RTN ADDR IN COMMON */
*/* R CALLER'S STOP RTN */
*/*RBGET: P RBTLIST = TCBLIST; TCBLIST = RBLIST */
*/* P INDICATE FIRST RB ON LIST DESIRED */
*/* S TCBRTRV: GET FIRST RB ADDR FROM RBLIST */
*/* D (NO,RBGET1,YES,) WAS THERE ONE */
*/* S TCBREMV: REMOVE RB FROM RBLIST */
*/* P REDUCE RB COUNT FOR RBLIST BY ONE */
*/*RBGET1: P RBLIST = TCBLIST; TCBLIST = RBTLIST */
*/* R RETURN VIA R9 */
*/*RBSTP: N PURGE ROUTINE FOR STOP REQUEST */
*/* P SET UP ADDRESSABILITY */
*/* P SET RETURN ADDR TO RBSTPOUT */
*/* P RBTLIST = TCBLIST; TCBLIST = RBLIST */
*/* S TCBREMV: REMOVE ALL RBS FROM RBLIST */
*/* P RBLIST = TCBLIST; TCBLIST = RBTLIST */
*/* R RETURN VIA R9 */
*/*AMDPRFMS: E MSSPRNT */
*/* P SET UP ADDRESSABILITY */
*/* P SET UP ERROR RTN ADDR */
*/* P SET PQE COUNTER */
*/* S BRREAD: GET DUMMY PQE PTR FROM TCB */
*/* D (YES,MSSPRDNA,NO,) IS PTR = 0 */
*/* S MSSTITLE: PRINT MSS TITLE */
*/* S BRREAD: GET PQE POINTERS FROM DUMMY PQE */
*/* S MSSFMPR2: FORMAT AND PRINT D-PQE LINE */
*/*MSSPRLP1: D (YES,MSSPRDN,NO,) PQE ADDR = 0 */
*/* P ADD 1 TO PQE CNT */
*/* D (YES,MSSLOOP,NO,) PQE CNT > 50 */
*/* P SAVE PQE CNT */
*/* P PUT ADDR IN PATTERN */
*/* S MSSFMPR1: FORMAT AND PRINT LINE 1 OF PQE */
*/* S MSSFMPR2: FORMAT AND PRINT 2ND LINE OF PQE */
*/* P GET ADDR OF PTR TO NEXT PQE */
*/* S (,MSSPRLP1) BRREAD: GET PTR TO NEXT PQE */
*/*MSSLOOP: P MOVE PQE LOOP MSG TO BUFFER */
*/* S (,MSSPRDNA) BRWRITE: PRINT THE MSG */
*/*MSSTITLE: P MOVE AOS/2 MSS TITLE TO BUFFER */
*/*MSSTTL2: S BRWRITE: PRINT TITLE AND SPACE 2 LINES */
*/* R RETURN VIA R9 */
*/*MSSFMPR1: P INDICATE SPACE 1 LINE */
*/*MSSFMPRA: S FMTLINE: FORMAT THE LINE */
*/* P LOAD LINES-TO-SPACE INDICATOR */
*/* S BRWRITE: PRINT THE LINE */
*/* R RETURN VIA R9 */
*/*MSSFMPR2: P (,MSSFMPRA) INDICAT SPACE 2 LINES AFTER PRINT */
*/*MSSPRDN: N ALL DONE .. RETURN TO FORMAT ROUTINE */
*/* S BRWRITE: SPACE 1 LINE */
*/*MSSPRDNA: P RESTORE PREVIOUS ERROR RTN ADDR */
*/* P RESTORE REGS */
*/* R RETURN */
*/*MSSERR: N MSS PRINT FORMAT ERROR */
*/* P SET UP ADDRESSABILITY */
*/* S BRWRITE: SPACE 1 LINE */
*/* P MOVE ERROR MSG TO BUFFER */
*/* S (,MSSPRDNA) BRWRITE: WRITE MSG AND SPACE 3 LINES */
*/*AMDPRFLD: E LOADPRT */
*/* N LOAD LIST PRINT ROUTINE */
*/* P SET UP ADDRESSABILITY */
*/* P SAVE TCB ADDR */
*/* M LDSW = 0 */
*/* P SET UP ERROR RTN ADDR */
*/* P MOVE TITLE TO BUFFER */
*/* S BRWRITE: PRINT TITLE */
*/* S BRREAD: GET LOAD LIST PTR FROM TCB */
*/* P SET LOOP COUNTER TO 255 */
*/*LOADLP3: D (YES,LOADDONE,NO,) IS PTR = 0 */
*/* S BRREAD: GET LOAD LIST */
*/* P SAVE ADDR OF NEXT LOAD LIST ELEMENT */
*/* S BRREAD: GET COUNT FIELDS */
*/* P SAVE RESP. COUNTS */
*/* S BRREAD: GET CDE PTR */
*/* D (YES,LOADPRT6,NO,) CDE PTR = 0 */
*/*LOADPRT8: M SET SWITCH TO INDICATE SOMETHING ON LOAD LIST */
*/* P MOVE 'CDE' TO BUFFER */
*/* S ADRCNVT: CONVERT CDE ADDR */
*/* P MOVE 'NM' TO BUFFER */
*/* S BRREAD: GET THE CDE */
*/* P SAVE NEXT PTR */
*/* S BRREAD: GET FIRST HALF OF NAME */
*/* P MOVE 1ST HALF OF NAME TO BUFFER */
*/* S BRREAD: GET 2ND HALF OF NAME */
*/* P MOVE IT TO BUFFER */
*/* P MOVE 'USE' TO BUFFER */
*/* S BRREAD: GET USE/EPA FIELD */
*/* S BYTECNVT: CONVERT USE COUNT */
*/* P MOVE 'RESP' TO BUFFER */
*/* D (NO,LOADPRT9,YES,) PRINTING JOB PACK Q */
*/* P (,LOADPRTD) MOVE 'NA' TO BUFFER */
*/*LOADPRT9: S BYTECNVT: CONVERT RESP. CNT */
*/*LOADPRTD: P MOVE 'EPA' TO BUFFER */
*/* S ADRCNVT: CONVERT ENTRY POINT ADDR */
*/* P MOVE 'ATR1' TO BUFFER */
*/* S BYTECNVT: CONVERT ATR1 */
*/*LOADPRT7: S BRREAD: GET EXTENT LIST OR MAJOR CDE PTR */
*/* D (YES,LOADPRT1,NO,LOADPRT2) WAS IT A MINOR CDE */
*/*LOADPRT2: D (NO,NOXLST,YES,) IS THERE AN EXTENT LIST */
*/* S BRREAD: GET NO. OF RELOC. FACTORS */
*/* D (YES,XLSTER,NO,) > 25 */
*/* D (YES,XLSTER,NO,) = 0 */
*/* P CALCULATE ADDR OF FIRST BLOCK */
*/*LOADLP1: P ZERO INDEXREG; LOAD NO. OF ENTRIES / LINE CNT */
*/* P MOVE 'STA' & 'LN' TO BUFFER */
*/*LOADLP2: S BRREAD: GET BLOCK ADDR */
*/* S ADRCNVT: CONVERT STARTING ADDR */
*/* S BRREAD: GET BLOCK LENGTH */
*/* S ADRCNVT: CONVERT LENGTH OF BLOCK */
*/* P INCR. INDEX AND COUNTERS */
*/* D (YES,LOADPRT5,NO,) REMAINING REL FACTORS = 0 */
*/* S (,LOADLP1) BRWRITE: PRINT THE LINE */
*/*XLSTER: P (,LOADPRT5) MOVE EXTENT LIST ERROR MSG TO BUFFER */
*/*NOXLST: P MOVE NO EXTENT LIST MSG TO BUFFER */
*/*LOADPRT5: S BRWRITE: PRINT THE LINE FOR CDE OR MSG */
*/* D (YES,JPQPRT,NO,) IS JOB PACK Q. BEING PRINTED */
*/*LOADPRT6: P  GET  ADDR OF NEXT LOAD LIST ELEMENT */
*/* D (YES,,NO,RESTCTR1) INFINITE LOOP? */
*/* P (,LOOPPRT1) ISSUE INFINITE LOOP IN LOAD LIST MESSAGE */
*/*RESTCTR1: P (,LOADLP3) UPDATE COUNTER */
*/*RESTCTR2: P (,LOADPRT8) UPDATE COUNTER */
*/*LOADPRT1: M (,LOADPRT7) RESET MINOR FLAG */
*/*JPQPRTA: P SET LOOP COUNTER TO 256 */
*/*JPQPRT: P GET ADDR OF NEXT CDE */
*/* D (YES,LOADDONE,NO,) END OF QUEUE */
*/* P  PUT ADDR OF CDE IN PARM. REG. */
*/* D (YES,,NO,RESTCTR2) INFINITE LOOP? */
*/* P (,LOADDONE) ISSUE LOOP IN JOB PACK QUEUE MESSAGE */
*/*LOADDONE: D (YES,LDDONE2,NO,) HAS JOB PACK Q. BEEN PRINTED */
*/* D (YES,LDDONE1,NO,) WAS ANYTHING ON LOAD LIST */
*/* S (,LDDONE1) BRWRITE: PRINT NO LLE MSG */
*/*LDDONE1: S BRWRITE: SPACE 2 LINES */
*/* M INDICATE PRINTING JOB PACK QUEUE */
*/* S BRWRITE: PRINT JOB PACK QUEUE TITLE */
*/* M RESET GOT OONE SWITCH */
*/* S BRREAD: GET JOB PACK Q. PTR */
*/* P (,JPQPRTA) SAVE ADDR OF 1ST CDE IN THE QUEUE */
*/*LDDONE2: D (YES,LDDONE3,NO,) WAS ANY THING ON JOB PACK Q. */
*/* S  BRWRITE: PRINT NO JOB PACK QUEUE MSG */
*/*LDDONE3: S BRWRITE: SPACE 2 LINES */
*/*LDDONED: P RESTORE PREVIOUS ERROR RTN ADDR */
*/* P RESTORE REGS */
*/* R RETURN */
*/*BYTECNVT: N RTN TO CONVERT ONE BYTE TO PRINTABLE HEX */
*/* P SAVE REG 1 */
*/* S HEXCNVT: CONVERT ONE BYTE */
*/* P RESTORE REG 1 */
*/* R RETURN VIA R9 */
*/*LOADERR: N ERROR WHILE PRINTING LOAD LIST */
*/* P SET UP ADDRESSABILITY */
*/* S BRWRITE: SPACE A LINE */
*/* D (YES,LOADERR1,NO,) PRINTING JOB PACK Q. */
*/* P MOVE 'ERROR IN LOAD LIST' MSG TO BUFFER */
*/*LOADERR2: S BRWRITE: PRINT THE ERROR MSG */
*/* M (,LOADDONE) RESET ERROR SWITCHES */
*/*LOADERR1: P (,LOADERR2) MOVE JOB PACK QUEUE ERROR MSG TO BUFFER */
*/*AMDPRFDB: E DEBPRNT */
*/* P SET UP ADDRESSABILITY */
*/* M CLEAR DEB SWITCH; ZERO DEB COUNT */
*/* P SET UP ERROR RTN ADDRESS */
*/*DEBPRNT8: S BRREAD: GET DEB CHAIN PTR */
*/* D (YES,NODEB,NO,) IS DEB PTR = 0 */
*/* D (YES,DEBINF,NO,) GT 50 DEBS */
*/* M INDICATE DEB FOUND */
*/* P MOVE 'DEB' TO BUFFER */
*/* S ADRCNVT: CONVERT DEB PTR */
*/* P MOVE APPENDAGE IDS TO BUFFER */
*/* S BRREAD: GET APP VECTOR TABLE */
*/* D (YES,DEBPRNT1,NO,) IS I/O APP VEC TAB ADDR = 0 */
*/* S BRREAD: GET END OF EXT APP ADDR */
*/* S WRDCNVT: CONVERT END OF APP ADDR */
*/* S BRREAD: GET SIO APP ADDR */
*/* S WRDCNVT: CONVERT SIO APP ADDR */
*/* S BRREAD: GET PCI APP ADDR */
*/* S WRDCNVT: CONVERT PCI APP ADDR */
*/* S BRREAD: GET CHAN END APP ADDR */
*/* S WRDCNVT: CONVERT CHAN END APP ADDR */
*/* S BRREAD: GET ABNORMAL END APP ADDR */
*/* S WRDCNVT: CONVERT ABNORMAL END APP ADDR */
*/*DEBPRNT1: S BRWRITE: PRINT LINE OF APP ADDRESSES */
*/* P MOVE 'PFX' TO BUFFER */
*/* P CALCULATE ADDR OF DEB PREFIX */
*/* D (NO,DEBERR,YES,) ADDR > 0 */
*/*DEBPRNT2: S BRREAD: GET DEB PREFIX */
*/* S WRDCNVT: CONVERT A WORD OF PREFIX */
*/* D (NO,DEBPRNT2,YES,) 4 WORDS DONE */
*/* S BRWRITE: PRINT LINE OF DEB PREFIX */
*/* P MOVE 'TCB' TO BUFFER */
*/* S BRREAD: GET DEB TCB PTR */
*/* S WRDCNVT: CONVERT TCB ADDR */
*/* P MOVE 'NDEB' TO BUFFER */
*/* S BRREAD: GET NEXT DEB PTR */
*/* S WRDCNVT: CONVERT NEXT DEB PTR */
*/* P MOVE 'IRBA' TO BUFFER */
*/* S BRREAD: GET IRB ADDR */
*/* S WRDCNVT: CONVERT IRB ADDR */
*/* P MOVE 'FLGS' TO BUFFER */
*/* S BRREAD: GET FLAGS */
*/* S WRDCNVT: CONVERT FLAGS */
*/* P MOVE 'UPRG' TO BUFFER */
*/* S BRREAD: GET USER IOB PURGE CHAIN PTR */
*/* S WRDCNVT: CONVERT USER PURGE CHAIN ADDR */
*/* P MOVE 'PLST' TO BUFFER */
*/* S BRREAD: GET PARM LIST PTR FOR PURGE ECB */
*/* S WRDCNVT: CONVERT PARM LIST PTR */
*/* P MOVE 'DCB' TO BUFFER */
*/* S BRREAD: GET DCB PTR */
*/* S WRDCNVT: CONVERT DCB ADDR */
*/* S BRWRITE: PRINT LINE OF DEB */
*/* P MOVE 'AVT' TO BUFFER */
*/* S BRREAD: GET I/O APP VECT TABLE ADDR */
*/* D (NO,DEBPRNT3,YES,) IS IT DIRECT ACCESS (ESCALE = 04)*/
*/* P (,DEBPRNT3) SET D. A. FLAGS */
*/*DEBPRNT3: S WRDCNVT: CONVERT I/O APP VECT TABLE ADDR */
*/* S BRWRITE: PRINT THE LINE */
*/*XNTTEST: D (YES,DEBDONE,NO,) NUMBER OF EXTENTS = 0 */
*/* D (YES,DEBPRNT5,NO,) DEB FOR D. A. */
*/* P MOVE 'OP-UCB' TO BUFFER */
*/* S BRWRITE: PRINT THE LINE */
*/*DEBPRNT4: S BRREAD: GET AN EXTENT */
*/* S WRDCNVT: CONVERT THE EXTENT */
*/* S BRWRITE: PRINT THE EXTENT */
*/* D (YES,DEBDONE,NO,DEBPRNT4) NUMBER OF EXTENT = 0 */
*/*DEBPRNT5: N ROUTINE TO PRINT 4-WORD EXTENT (DIRECT ACCESS) */
*/* D (NO,,YES,HAVE3525) IS 4-WORD EXTENT FOR 3525 */
*/* P MOVE EXTENT IDS TO BUFFER */
*/* S BRWRITE: PRINT IDS */
*/* D (YES,,NO,DEBPRNT7) IS THIS DEB FOR ISAM */
*/* P SKIP EXTENT 0 */
*/*DEBPRNT7: S BRREAD: GET AN EXTENT */
*/* S WRDCNVT: CONVERT FILE MASK AND UCB ADDR */
*/*DEBPRNT6: P INCR. TO NEXT WORD OF EXTENT */
*/* S BRREAD: GET AN EXTENT WORD */
*/* P MOVE WORD TO WORK AREA */
*/* D (NO,DEBPRNT6,YES,) 3 WORDS GOTTEN */
*/* S WRDCNVT: CONVERT STARTING CCHH OF EXTENT */
*/* S WRDCNVT: CONVERT ENDING CCHH OF EXTENT */
*/* S HEXCNVT: CONVERT NUMBER OF TRACKS FOR THIS EXTENT */
*/* S BRWRITE: PRINT EXTENT */
*/* D (NO,DEBPRNT7,YES,DEBDONE) NUMBER OF EXTENTS = 0 */
*/*HAVE3525: N ROUTINE TO PRINT EXTENT FOR 3525 MULTI-FUNCTION */
*/* P MOVE IDS TO BUFFER */
*/* S BRWRITE: PRINT IDS */
*/* P FORMAT 3525 LINE */
*/* S (,DEBDONE) BRWRITE: PRINT DATA LINE */
*/*DEBDONE: N DONE WITH THIS DEB ... LOOK FOR ANOTHER */
*/* D (YES,FMTDEBX,NO,) DOES DEB EXTN EXIST */
*/*DEBDONE1: M RESET D. A. FLAGS AND ISAM SW */
*/* S BRWRITE: SPACE A LINE */
*/* P (,DEBPRNT8) POINT TO NEXT DEB */
*/*DEBERR: N ERROR IN DEB CHAIN ... WRITE MSG AND RETURN */
*/* P SET UP ADDRESSABILITY */
*/* S BRWRITE: SPACE A LINE */
*/* D (YES,%DXD,NO,) DEB EXTN BEING DONE */
*/* P MOVE ERROR MSG TO BUFFER */
*/* P (,NODEB3) RESET ERROR SWITCHES */
*/*%DXD: P (,FMTDEBX1) MOVE ERR MSG TO PRINT LINE */
*/*FMTDEBX: S BRREAD: GET EXTN ADDR */
*/* P STORE ADDR IN FMT PTRN */
*/* S FMTLINE: FORMAT LINE 1 OF EXTN */
*/* S BRWRITE: PRINT LINE */
*/* S FMTLINE: FORMAT LINE 2 OF EXTN */
*/*FMTDEBX1: S (,DEBDONE1) BRWRITE: PRINT LINE */
*/*NODEB: N DONE WITH DEB CHAIN */
*/* D (NO,NODEB1,YES,) WAS THERE A DEB */
*/* S BRWRITE: SPACE A LINE */
*/*NODEB2: P RESTORE PREVIOUS ERROR RTN ADDR AND REGS */
*/* R RETURN */
*/*NODEB1: P MOVE NO OPEN DEB MSG TO BUFFER */
*/*NODEB3: S (,NODEB2) BRWRITE: PRINT THE MSG */
*/*DEBINF: P (,NODEB3) MOVE DEB LOOP MSG TO BUFFER */
*/*AMDPRFIO: E TIOTPRT */
*/* P SET UP ADDRESSABILITY */
*/* P SET UP ERROR ROUTINE ADDR */
*/* S BRREAD: GET TIOT PTR FROM TCB */
*/* D (YES,NOTIOT,NO,) TIOT PTR = 0 */
*/* D (NO,TIOTNEW,YES,) TIOT SAME AS LAST */
*/* P MOVE SAME TIOT MSG TO BUFFER */
*/* S (,TIOTDN1) BRWRITE: PRINT LINE */
*/*TIOTNEW: P SAVE TIOT ADDRESS IN SAME TIOT MSG */
*/* P MOVE 'TIOT' TO BUFFER */
*/* S ADRCNVT: CONVERT TIOT ADDR */
*/* P MOVE 'JOB' TO BUFFER */
*/* S BRREAD: GET 1ST FIELD OF TIOT */
*/* P MOVE JOB NAME TO BUFFER */
*/*TIOTLP4: D (NO,TIOTPRT2,YES,) VALID JOB NAME */
*/* M (,TIOTPRT3) SET VALID TIOT SWITCH */
*/*TIOTPRT2: M TURN OFF VALID TIOT SWITCH */
*/*TIOTPRT3: P MOVE 'STEP' TO BUFFER */
*/* S BRREAD: GET STEP NAME */
*/* P MOVE STEP NAME TO BUFFER */
*/* P MOVE 'PROC' TO BUFFER */
*/* S BRREAD: GET PROC NAME */
*/* P MOVE PROC NAME TO BUFFER */
*/* S BRWRITE: PRINT TIOT NAMES */
*/* P PUT PAGE NO IN SAME TIOT MSG */
*/* D (NO,TIONVLD,YES,) IS TIOT VALID */
*/* S BRREAD: GET FIRST DD ENTRY */
*/* P LOAD LENGTH OF DD ENTRY */
*/* D (YES,NODDEN,NO,) IS IT = 0 */
*/* P MOVE DD ENTRY IDS TO BUFFER */
*/* S BRWRITE: PRINT DD ENTRY IDS */
*/*TIOTLP3: P CALCULATE DD ENTRY OFFSET */
*/* S HEXCNVT: CONVERT OFFSET */
*/* S WRDCNVT: CONVERT FIRST WORD OF DD ENTRY */
*/* P BUMP TO NAME ENTRY; LOAD LOOP COUNT */
*/*TIOTLP1: S BRREAD: GET 4 BYTES OF DD NAME */
*/* P MOVE 4 BYTES OF NAME TO BUFFER */
*/* P BUMP ADDR PTRS */
*/* D (NO,TIOTLP1,YES,) FULL DDNAME GOTTEN */
*/* S BRREAD: GET TTR-STC FIELD OF DD ENTRY */
*/* S WRDCNVT: CONVERT TTR-STC FIELD */
*/* P DECREMENT LENGTH OF DD ENTRY */
*/* D (NO,TIOTPRT1,YES,) IS IT > 0 */
*/* P DIVIDE LENGTH BY 4 */
*/* D (NO,TIOTPRT1,YES,) RESULTS > 0 */
*/*TIOTLP2: P INCREASE ADDR TO DEVICE ENTRY */
*/* S BRREAD: GET DEVICE ENTRY */
*/* S WRDCNVT: CONVERT DEVICE ENTRY */
*/* S BRWRITE: PRINT A TIOT DDNAME ENTRY LINE */
*/* D (NO,TIOTLP2,YES,) ALL DEVICE ENTRIES DONE */
*/*TIOTPRT1: S BRREAD: GET NEXT DD ENTRY */
*/* D (YES,TIOTDN1,NO,) IS ITS LENGTH = 0 */
*/* D (YES,,NO,TIOTLP3) ARE THERE > 255 DD'S? */
*/* P PRINT INFINITE LOOP IN TIOT MESSAGE */
*/*TIOTDN1: P RESTORE PREVIOUS ERROR RTN ADDR AND REGS */
*/* R RETURN */
*/*NODDEN: S (,TIOTDN1) BRWRITE: SPACE A LINE */
*/*NOTIOT: P MOVE NO TIOT MSG TO BUFFER */
*/* S (,TIOTDN1) BRWRITE: PRINT THE MSG */
*/*TIONVLD: P MOVE NOT VALID MSG TO BUFFER */
*/* S (,TIOTDN1) BRWRITE: PRINT THE MSG */
*/*TIOTERR: N ERROR FORMATTING TIOT ... PRINT ERROR MSG & RETURN */
*/* P SET UP ADDRESSABILITY */
*/* S BRWRITE: SPACE A LINE */
*/* P MOVE TIOT ERROR MSG TO BUFFER */
*/* S (,TIOTDN1) BRWRITE: PRINT THE MSG */
*/*AMDPRFCB: END */
         EJECT
         EQUATES
         OUTBUFM
         COMMON
AMDPRFTC CSECT
         SPACE
***********************************************************************
*              *** AMDPRFTC - TCB PRINT ***                           *
*                                                                     *
* STATUS--OS/VS2 RELEASE 2.0                                          *
*                                                                     *
* FUNCTION--                                                          *
*    THIS ROUTINE FORMATS AND PRINTS THE TCB.                         *
*                                                                     *
* ENTRY POINTS--                                                      *
*    AMDPRFTC IS THE ONLY ENTRY.  CONTROL IS RECIEVED FROM AMDPRFSC.  *
*    STANDARD SUBROUTINE LINKAGE USED.                                *
*                                                                     *
* INPUTS--                                                            *
*         REGISTER 0 - ASID OF STORAGE CONTAINING TCB TO BE FORMATTED *
*         REGISTER 2 - TCB ADDRESS TO BE FORMATTED                    *
*         REGISTER 12 - ADDRESS OF COMMON AREA                        *
*         CURTCB - FIELD DEFINED IN THIS CSECT BUT INITIALIZED BY     *
*                  AMDPRFSC TO POINT TO THE CURRENT TCB IN THE DUMP   *
*                                                                     *
* OUTPUT--                                                            *
*    WRITES FORMATTED TCB AND IF THE TCB IS THE CURRENT TCB,          *
*    SO INDICATES.                                                    *
*    WRITES MESSAGE 'TASK HAS TERMINATED' AND ERROR MESSAGE 'ERROR    *
*    FORMATTING TCB'                                                  *
*    IF TASK HAS TERMINATED, RETURN CODE IS 4, OTHERWISE IT IS 0      *
*                                                                     *
* EXTERNAL REFERENCES--                                               *
*         BRREAD - TO OBTAIN DATA FROM THE INPUT DUMP.                *
*         BRWRITE - TO WRITE DATA TO THE 'PRINTER' DATA SET.          *
*         AMDPRGFR - FROM AN ADDRESS IN COMMON, TO FORMAT A LINE      *
*                    DESCRIBED BY THE FMTPTRN MACRO INSTRUCTION.      *
*         WRDCNVT - FROM AN ADDRESS IN COMMON, TO CONVERT 4 BYTES     *
*                   TO PRINTABLE HEX.                                 *
*                                                                     *
* EXITS,NORMAL--                                                      *
*    RETURN TO CALLER THROUGH STANDARD LINKAGE UNLESS 'STOP' HAS      *
*    BEEN ENTERED BY OPERATOR IN WHICH CASE CONTROL RETURNS TO        *
*    STOP ROUTINE WITHOUT RESTORING REGISTERS.                        *
*                                                                     *
* EXITS,ERROR--                                                       *
*    SAME AS NORMAL EXIT                                              *
*                                                                     *
* TABLES/WORK AREAS--                                                 *
*    FMTPTRN MACRO IS USED TO GENERATE A PATTERN FOR THE FORMATTED    *
*    TCB                                                              *
*                                                                     *
* ATTRIBUTES-- REUSABLE                                               *
*                                                                     *
* CHARACTER CODE DEPENDENCY-- NONE                                    *
*                                                                     *
* NOTES--                                                             *
*   BRREAD ERROR HANDLER:  IF A TCB CANNOT BE READ FROM THE INPUT     *
*   DUMP, A MESSAGE IS PRINTED AND CONTROL RETURNS TO AMDPRFSC.       *
*                                                                     *
***********************************************************************
         SPACE
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         BALR  BASE1,0             ESTABLISH REG 11 AS BASE
         USING *,BASE1
TCBPRBAS LA    R3,TCBSAVE          SAVE AREA CHAINING
         ST    R13,TCBSAVE+4
         ST    R3,8(R13)
         LR    R13,R3
         SPACE
         USING COMMON,COMBASE
         MVC   TCBERSV,ERRADDR     SAVE PREVIOUS ERROR ROUTINE ADDR
         LA    R15,TCBPRER         ADDR OF TCBPRNT ERROR ROUTINE
         ST    R15,ERRADDR         STORE IN ERROR ROUT ADDR WORD
TCBPRNTA EQU   *
         L     BUFREG,CURBUF       LOAD BUFFER ADDR
         USING OUTBUF,BUFREG                                    @Y02006
         C     R2,CURTCB           IS THIS TCB THE CURRENT TCB
         BNE   TCBPRNT5            NO--BR AROUND NEXT INSTRUCTIONS
         CH    R0,QASID            IS THIS THE CURRENT ASID     @Y02006
         BNE   TCBPRNT5            NO, BRANCH                   @Y02006
         MVC   ADDR+46(28),CURMSG  MOVE CURRENT TASK MSG TO BUFFER
         BRWRITE 2                 PRINT MSG
TCBPRNT5 ST    R2,TCBLN11          PLACE TCB ADDR IN PATTERN
         LA    PREG,TCBLN1         LOAD ADDR OF PATTERN FOR FIRST LINE
*                                  OF TCB
         BAL   R9,TCBFMPR          FORMAT AND PRINT FIRST LINE OF TCB
         EJECT
         SPACE 2
***********************************************************************
*                                                                     *
*   ROUTINE TO FORMAT AND PRINT AOS/2 TCB                             *
*                                                                     *
***********************************************************************
         SPACE
         LA    PREG,TCBLN2         ADDR OF PATTERN
         BAL   R9,TCBFMPR          FORMAT AND PRINT LINE 2 OF TCB
         LA    R3,48               LOAD INDEX TO TCB REGS
         LA    R15,TCBPTRG         GET ADDRESS REG PRINT ROUTINE
         BALR  RETREG,R15          LINK TO IT
         LA    PREG,112(R2)        ADDR OF NEXT FIELD AFT REGS IN TCB
         ST    PREG,TCBLN31        STORE INTO PATTERN
         LA    PREG,TCBLN3         ADDR OF PATTERN
         BAL   R9,TCBFMPR          FORMAT AND PRINT LINE 5 OF TCB
         LA    PREG,TCBLN4         ADDR OF PATTERN
         BAL   R9,TCBFMPR          FORMAT AND PRINT LINE 6 OF TCB
         LA    PREG,TCBLN5         ADDR OF PATTERN               X01980
         BAL   R9,TCBFMPR          FORMAT AND PRINT LINE 7 OF TCBX01980
         LA    PREG,TCBLN8         ADDR OF PATTERN               X01980
         BAL   R9,TCBFMPR          FORMAT AND PRINT LN 8 OF TCB  X01980
         LA    PREG,TCBLN9         ADDR OF PATTERN               X01980
         BAL   R9,TCBFMPR          FORMAT AND PRINT LN 9 OF TCB  X01980
         LA    PREG,TCBLN10        ADDR OF PATTERN               Y01980
         BAL   R9,TCBFMPR          FORMAT AND PRINT LN 10 OF TCB Y01980
         LA    PREG,TCBL11         ADDR OF PATTERN              @Y02006
         BAL   R9,TCBFMPR          FORMAT, PRINT LN 11 OF TCB   @Y02006
         LA    PREG,TCBL12         ADDR OF PATTERN             @OZ17662
         BAL   R9,TCBFMPR          FMT & PRINT LINE 12 OF TCB  @OZ17662
         LA    PREG,208(R2)        ADDR OF TCB EXT2              X01980
         BRREAD (PREG),ASID=(R0)   READ EXT2 ADDR               @Y02006
         ICM   PREG,7,1(PREG)      GET PTR TO EXT2              @Y02006
         BZ    TCBPRNTC            IF 0, SKIP EXT2              @Y02006
         ST    PREG,TCBE2L11       STORE INTO PATTERN            X01980
         LA    PREG,TCBE2LN1       ADDR OF PATTERN               X01980
         BAL   R9,TCBFMPR          FORMAT AND PRINT LN 1 OF EXT2 X01980
         B     TCBPRNTC            PREPARE FOR RETURN TO FORMAT  X01980
         SPACE 2
***********************************************************************
*                                                                     *
*   FORMAT PRINT LINE FOR TCB AND PRINT THE LINE                      *
*                                                                     *
***********************************************************************
         SPACE
TCBFMPR  L     R15,AFMTLINE        LOAD ADDR OF LINE FORMAT ROUT
         BALR  RETREG,R15          FORMAT THE TCB LINE
         BRWRITE 1                 PRINT THE LINE
         BR    R9                  RETURN TO CALLER
         SPACE 3
***********************************************************************
*                                                                     *
*   PREPARE FOR RETURN TO FORMAT ROUTINE                              *
*                                                                     *
***********************************************************************
         SPACE
TCBPRNTC EQU   *
         LA    PREG,TCBFLGS+4(R2)  ADDR OF FIFTH FLAG BYTE OF TCB
         BRREAD  (PREG),DATA,ASID=(R0)                          @Y02006
         TM    0(PREG),X'80'       IS TASK TERMINATED
         BZ    TCBPRNT8            BR IF IT ISN'T
         BRWRITE 1                 SPACE A LINE
         MVC   ADDR(19),TERMMSG    MOVE TERMINATED MSG TO BUFFER
         BRWRITE 3                 PRINT MSG AND SPACE 3 LINES
         LA    R15,4               LOAD RETURN CODE OF 4
         B     TCBPRDN1            RETURN TO FORMAT
TCBPRNT8 BRWRITE 2                 SPACE 2 LINES
TCBPRDN  SR    R15,R15             ZERO RETURN CODE
TCBPRDN1 MVC   ERRADDR,TCBERSV     RESTORE PREVIOUS ERROR ROUTINE ADDR
         L     R13,4(R13)          POINT TO CALLER'S SAVE AREA
         L     R14,12(R13)
         LM    R0,R12,20(R13)      RESTORE CALLERS REGS
         BR    RETREG              RETURN TO FORMAT ROUTINE
         SPACE 3
***********************************************************************
*                                                                     *
*   FORMAT OR I/O ERROR...RETURN TO FORMAT ROUTINE                    *
*                                                                     *
***********************************************************************
         SPACE
         DROP  BASE1
         USING TCBPRER,R15
TCBPRER  LA    R13,TCBSAVE         GET TCB PRINT'S SAVE AREA
         LM    R14,R12,12(R13)     RESTORE OUR REGS
         DROP  R15
         USING TCBPRBAS,BASE1      SHIFT BACK TO REG 11 AS BASE
         L     BUFREG,CURBUF       RELOAD BUFFER ADDR
         BRWRITE 1                 SPACE A LINE
         MVC   ADDR(20),TCBERMSG   MOVE ERROR MSG TO BUFFER
         BRWRITE 3                 PRINT ERROR MSG
         B     TCBPRDN             RETURN TO FORMAT
         DROP  BASE1
         EJECT
***********************************************************************
*                                                                     *
*   THIS ROUTINE WILL PRINT THE REGISTERS FOR TCBPRNT ROUTINE AND     *
*   RBPRNT ROUTINE                                                    *
*                                                                     *
***********************************************************************
         SPACE
         USING *,R15
TCBPTRG  STM   R4,R9,TCBRGSV       SAVE R4 - R9
         LR    R7,R15              SHIFT TO REG 7 AS BASE FOR CALLS
*                                  TO READ AND AD-CONVERT
         DROP  R15
         USING TCBPTRG,R7
         ST    RETREG,TCBRGSV+24   SAVE RETURN ADDR
         MVC   ADDR+13(6),REG1     MOVE 'RG 0-7' TO BUFFER      @Y02006
         LA    R8,2                LOAD OUTER LOOP CNT
TCBPTRG1 LA    R4,ADDR+22          LOAD WHERE-TO-PUT-IT ADDR
         LA    R9,8                LOAD INNER LOOP CNT
TCBPTRG2 LA    PREG,0(R3,R2)       LOAD ADDR OF GPRS
*
*                                  ERL - SIGNAL BRREAD TO GENERATE
*                                  NEW P-LIST
&PARMLST SETB  1
         BRREAD  (PREG),DATA,ASID=(R0)                          @Y02006
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT GPR TO PRINTABLE HEX
         AH    R3,FOUR             INCR WORD INDEX
         AH    R4,ELEVEN           INCR WHERE-TO-PUT-IT ADDR
         BCT   R9,TCBPTRG2         LOOP FOR 8 GPRS
         BRWRITE 1                 PRINT LINE
         BCT   R8,TCBPTRG6         LOOP FOR 2 LINES             @Y02006
         L     RETREG,TCBRGSV+24   RESTORE RETURN ADDR
         LM    R4,R9,TCBRGSV       RELOAD SAVED REGS
*                                  *** NOTE BASE GETS COLBERED ON LOAD
         BR    RETREG              RETURN TO CALLER
         SPACE
TCBPTRG6 MVC   ADDR+13(7),REG2     MOVE 'RG 8-15' TO BUFFER
         B     TCBPTRG1            CONTINUE WITH REGS 8-15
         EJECT
***********************************************************************
*                                                                     *
*   CONSTANTS AND SAVE AREA FOR TCBPRNT                               *
*                                                                     *
***********************************************************************
         SPACE
         ENTRY CURTCB              REFERENCED BY AMDPRFSC       @Y02006
CURTCB   DC    A(0)                FILLED IN BY AMDPRFSC        @Y02006
TCBSAVE  DC    18F'0'              SAVE AREA FOR TCB PRINT
TCBERSV  DC    F'0'                SAVE AREA FOR ERROR ROUTINE ADDR
TCBRGSV  DC    7F'0'               SAVE AREA FOR TCB REGS PRINT ROUT
         SPACE
*   PATTERN FOR LINE 1 OF TCB
TCBLN1   FMTPTRN (LBL,DTA,LBLP,DTAP,DTAC),3,3,0,5,(TCBID1),(TCBLN11+1)
         FMTPTRN (LBL,DTA,DTAP),3,4,13,19,,(TCBLN11,0)
         FMTPTRN (LBL,DTA),3,4,30,38
         FMTPTRN (LBL,DTA),3,4,49,55                            @Y02006
         FMTPTRN (LBL,DTA),3,4,66,72                            @Y02006
         FMTPTRN (LBL,DTA),3,4,83,90                            @Y02006
         FMTPTRN (LBL,DTA),3,4,101,108,,,LAST                   @Y02006
         SPACE
*   PATTERN FOR LINE 2 OF TCB
TCBLN2   FMTPTRN (LBL,DTA),3,4,13,19
         FMTPTRN (LBL,DTA),6,4,30,38
         FMTPTRN (LBL,DTA),3,4,49,55                            @Y02006
         FMTPTRN (LBL,DTA),3,4,66,72                            @Y02006
         FMTPTRN (LBL,DTA),3,4,83,90                            @Y02006
         FMTPTRN (LBL,DTA),3,4,101,108,,,LAST                   @Y02006
         SPACE
*   PATTERN FOR LINE 5 OF TCB
TCBLN3   FMTPTRN (LBL,LBLP,DTA,DTAP),3,4,13,19,(TCBID3),(TCBLN31,0)
         FMTPTRN (LBL,DTA),3,4,30,38
         FMTPTRN (LBL,DTA),3,4,49,55                            @Y02006
         FMTPTRN (LBL,DTA),5,4,66,72                            @Y02006
         FMTPTRN (LBL,DTA),3,4,83,90                            @Y02006
         FMTPTRN (LBL,DTA),3,4,101,108,,,LAST                   @Y02006
         SPACE
*   PATTERN FOR LINE 6 OF TCB
TCBLN4   FMTPTRN (LBL,LBLP,DTA),3,4,13,19,(TCBID4)
         FMTPTRN (LBL,DTA),3,4,30,38
         FMTPTRN (LBL,DTA),3,4,49,55                            @Y02006
         FMTPTRN (LBL,DTA),5,4,66,72                            @Y02006
         FMTPTRN (LBL,DTA),5,4,83,90                            @Y02006
         FMTPTRN (LBL,DTA),3,4,101,108,,,LAST                   @Y02006
         SPACE
*   PATTERN FOR LINE 7 OF TCB
TCBLN5   FMTPTRN (LBL,LBLP,DTA),4,4,13,19,(TCBID5)              @Y02006
         FMTPTRN (LBL,DTA),3,4,30,38
         FMTPTRN (LBL,DTA),4,4,49,55                            @Y02006
         FMTPTRN (LBL,DTA),4,4,66,72                            @Y02006
         FMTPTRN (LBL,DTA),5,4,83,90                            @Y02006
         FMTPTRN (LBL,DTA),4,4,101,108,,,LAST                   @Y02006
*   PATTERN FOR LINE 8 OF TCB
TCBLN8   FMTPTRN (LBL,DTA,LBLP),5,4,13,19,(TCBID8)             @OZ17662
         FMTPTRN (LBL,DTA),5,4,30,38                            @Y02006
         FMTPTRN  (LBL,DTA),5,4,49,55                     /* OZ09006 */
         FMTPTRN (LBL,DTA),4,4,66,72                            @Y02006
         FMTPTRN (LBL,DTA),4,4,83,90                            @Y02006
         FMTPTRN (LBL,DTA),3,4,101,108,,,LAST                   @Y02006
*    PATTERN FOR LINE 9 OF TCB
TCBLN9   FMTPTRN (LBL,LBLP,DTA),4,4,13,19,(TCBID9)              @Y02006
         FMTPTRN (LBL,DTA),4,4,30,38                            @Y02006
         FMTPTRN (LBL,DTA),4,4,49,55                            @Y02006
         FMTPTRN (LBL,DTA),4,4,66,72                            @Y02006
         FMTPTRN (LBL,DTA),4,4,83,90                            @Y02006
         FMTPTRN (LBL,DTA),5,4,101,108,,,LAST                   @Y02006
*    PATTERN FOR LINE 10 OF TCB
TCBLN10  FMTPTRN (LBL,LBLP,DTA),5,4,13,19,(TCBID10)             @Y02006
         FMTPTRN (LBL,DTA),7,4,30,38                             Y01980
         FMTPTRN (LBL,DTA),4,4,49,55                           @OZ17662
         FMTPTRN (LBL,DTA),3,4,66,72                            @Y02006
         FMTPTRN (LBL,DTA),3,4,83,90                            @Y02006
         FMTPTRN  (LBL,DTA),5,4,101,108,,,LAST            /* OZ09006 */
*    PATTERN FOR LINE 11 OF TCB                                 @Y02006
TCBL11   FMTPTRN (LBL,DTA,LBLP),5,4,13,19,(TCBID11)             @Y02006
         FMTPTRN (LBL,DTA),5,4,30,38                            @Y02006
         FMTPTRN (LBL,DTA),5,4,49,55                            @Y02006
         FMTPTRN (LBL,DTA),5,4,66,72                            @Y02006
         FMTPTRN (LBL,DTA),6,4,83,90                            @Y02006
         FMTPTRN (LBL,DTA),6,4,101,108,,,LAST                   @Y02006
**   PATTERN FOR LINE 12 OF TCB                                @OZ17662
TCBL12   FMTPTRN (LBL,DTA,LBLP),3,4,13,19,(TCBID12)            @OZ17662
         FMTPTRN (LBL,DTA),4,4,30,38                           @OZ17662
         FMTPTRN (LBL,DTA),5,4,49,55                           @OZ17662
         FMTPTRN (LBL,DTA),5,4,66,72,,,LAST                    @OZ17662
*    PATTERN FOR LINE 1 OF TCB EXTENSION 2
TCBE2LN1 FMTPTRN (LBL,LBLP),4,,5,,(TCBE2ID1)                     X01980
         FMTPTRN (LBL,DTA,DTAP),3,4,13,19,,(TCBE2L11,0)          Y01980
         FMTPTRN (LBL,DTA),4,4,30,38                           @OZ24844
         FMTPTRN (LBL,DTA),5,4,49,55,,,LAST                    @OZ24844
TCBID1   DC    C'TCBRBPPIEDEBTIOCMPTRNMSSPK-FLGFLGLLSJLBJPQ'    @Y02006
TCBID3   DC    C'FSATCBTMEJSTCBNTCOTC'                          @Y02006
TCBID4   DC    C'LTCIQEECBTSFLGD-PQEAQE'                        @Y02006
TCBID5   DC    C'STABTCTUSERNDSPMDIDSJSCB'                       Y01980
TCBID8   DC    C'DDEXCIOBRCEXCPDEXT1BITSDAR'                   @OZ17662
TCBID9   DC    C'EXT2AECBTIRBBACKRTWAIOTIM'  LABELS FOR 8TH LN  @Y02006
TCBID10  DC    C'TMSAVSBR-TIDXSCTFOESWASTAWA'                  @OZ17662
TCBID11  DC    C'TCBIDRTM12ESTAEUKYSPCPU-AFFBYTES'              @Y02006
TCBID12  DC    C'RPTDBTBSWASASVCA2'                            @OZ17662
TCBE2ID1 DC    C'EXT2GTFRCMPEVENT' LABELS FOR EXT2 1ST LINE    @OZ24844
CURMSG   DC    C'*****   CURRENT TASK   *****'
TERMMSG  DC    C'TASK HAS TERMINATED'
TCBERMSG DC    C'ERROR FORMATTING TCB'
REG1     DC    C'RG 0-7'
REG2     DC    C'RG 8-15'
FTCPCH   DC    18F'0'              PATCH AREA                    X01980
         SPACE
         DROP  COMBASE,R7
         EJECT
AMDPRFRB CSECT
         SPACE
***********************************************************************
*                      *** AMDPRFRB - RB PRINT ***                    *
*                                                                     *
* STATUS--OS/VS2 RELEASE 2.0                                          *
*                                                                     *
* FUNCTION--                                                          *
*    THIS ROUTINE FORMATS AND PRINTS THE RB'S IN THE RB CHAIN OFF     *
*    THE TCB                                                          *
*                                                                     *
* ENTRY POINTS--                                                      *
*    AMDPRFRB IS THE ONLY ENTRY.  CONTROL IS RECEIVED FROM AMDPRFSC.  *
*    STANDARD SUBROUTINE LINKAGE USED.                                *
*                                                                     *
* INPUTS--                                                            *
*         REGISTER 0 - ASID OF STORAGE CONTAINING TCB TO BE FORMATTED *
*         REGISTER 2 - TCB ADDRESS FOR WHICH RB'S ARE TO BE FORMATTED *
*         REGISTER 12 - ADDRESS OF COMMON AREA                        *
*                                                                     *
* OUTPUTS--                                                           *
*    WRITES FORMATTED RB CHAIN                                        *
*    WRITES MESSAGE 'INFINITE LOOP IN RB CHAIN' IF MORE THAN 50       *
*    RB'S ARE IN THE CHAIN.                                           *
*    WRITES ERROR MESSAGE 'RB FORMAT ERROR','FORMAT ERROR READING CDE'*
*                 'FORMAT ERROR READING LPDE'                         *
*                                                                     *
* EXTERNAL REFERENCES--                                               *
*         BRREAD - TO OBTAIN DATA FROM THE INPUT DUMP.                *
*         BRWRITE - TO WRITE DATA TO THE 'PRINTER' DATA SET.          *
*         AMDPRTSV - FROM ADDRESSES IN COMMON, THIS CSECT IS USED     *
*                    TO SAVE, RETRIEVE, AND REMOVE RB'S FROM AN RBLIST*
*         WRDCNVT - FROM AN ADDRESS IN COMMON, TO CONVERT 4 BYTES     *
*                   TO PRINTABLE HEX.                                 *
*         ADRCNVT - FROM ADDRESS IN COMMON, TO CONVERT 3 BYTES TO     *
*                   PRINTABLE HEX.                                    *
*                                                                     *
* EXITS,NORMAL--                                                      *
*    RETURN TO CALLER THROUGH STANDARD LINKAGE UNLESS 'STOP' HAS      *
*    BEEN ENTERED BY OPERATOR IN WHICH CASE CONTROL RETURNS TO        *
*    STOP ROUTINE WITHOUT RESTORING REGISTERS.                        *
*                                                                     *
* EXITS,ERROR--                                                       *
*    NONE--PROCESSING CONTINUES AFTER AN ERROR MESSAGE IS PRINTED     *
*                                                                     *
* TABLES/WORK AREAS--                                                 *
*    AN RBLIST IS CONSTRUCTED BY A BRANCH TO AMDPRTSV.  THIS LIST     *
*    CONTAINS THE RB'S TO BE FORMATTED.  THE FORMAT IS THE SAME       *
*    AS THE TCBLIST.                                                  *
*                                                                     *
* ATTRIBUTES-- REUSABLE                                               *
*                                                                     *
* CHARACTER CODE DEPENDENCY-- NONE                                    *
*                                                                     *
* NOTES--                                                             *
*   BRREAD ERROR HANDLER:  IF A PORTION OF AN RB CANNOT BE READ       *
*   FROM THE INPUT DUMP, A MESSAGE IS PRINTED AND PROCESSING          *
*   CONTINUES WITH THE NEXT RB.                                       *
*                                                                     *
***********************************************************************
         SPACE
RBNEXT   EQU   28
RBPFXS   EQU   24                  BACK DISPL TO USEABLE PREFIX @Y02006
RDCDE    EQU   X'80'                                           @YA01753
RDLPDE   EQU   X'40'                                           @YA01753
GOTRB    EQU   X'20'                                            @Y02006
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         BALR  BASE1,0             ESTABLISH REG 11 AS BASE
         USING *,BASE1
RBPRNBAS LA    R3,RBPRNTSV         SAVE AREA CHAINING
         ST    R13,RBPRNTSV+4
         ST    R3,8(R13)
         LR    R13,R3
         SPACE
         USING COMMON,COMBASE
         USING OUTBUF,BUFREG
         NI    SVRBI,X'00'       INITIALIZE TO ZERO      /* OZ09006  */
         SPACE
         MVC   RBERRSV,ERRADDR     SAVE CURRENT ERROR ROUTINE ADDR
         LA    R15,RBERROR1        ADDR OF RB ERROR ROUTINE
         ST    R15,ERRADDR         STORE IN ERROR ADDR WORD
         MVC   RBSTPSV(4),STOPEXIT SAVE CALLER' STOP ROUTINE ADDRESS
         LA    R15,RBSTP           GET ADDRESS OF RB-PRINT STOP RTN.
         ST    R15,STOPEXIT        STORE IN COMMON CSECT
         L     BUFREG,CURBUF       LOAD BUFFER BASE
         BAL   R9,RBPRGE           GO PURGE POSSIBLE RB ADDRS ON RBLIST
         XC    RBCNT,RBCNT         ZERO RB COUNT
         XC    RBCNT1,RBCNT1       ZERO RB COUNT1
         LR    R4,R2               LOAD TCB ADDR TO R4
RBLOOP1  BRREAD  (R2),DATA,ASID=(R0)                            @Y02006
         L     R2,0(PREG)          LOAD RB ADDR
         LA    R2,0(R2)            CLEAR POSSIBLE WAIT COUNT
         LTR   R2,R2               IS IT ZERO
         BZ    RBPRNT1             YES--ASSUME END OF CHAIN
         CR    R4,R2               COMPARE TO TCB ADDR
         BE    RBPRNT1             EQUAL--LAST RB POINTS TO TCB
         BAL   R9,RBSAVE           SAVE RB ADDR ON RBLIST
         LA    R2,RBNEXT(R2)       LOAD ADDR OF PTR TO NEXT RB
         B     RBLOOP1             LOOP TO END OF CHAIN
         SPACE 2
***********************************************************************
*                                                                     *
*   PRINT RBS IN THE REVERSE ORDER AS THEY EXISTED ON THE CHAIN       *
*   NOTE THAT RBERROR1IS THE BRREAD ERROR ROUTINE FOR THE ABOVE BREADS*
*   ONLY                                                              *
*                                                                     *
***********************************************************************
         SPACE
         DROP  BASE1                                             X01980
         USING RBERROR1,R15                                      X01980
RBERROR1 LA    R13,RBPRNTSV        GET ADDRESS OF RB PRINT'S SAVE AREA
         LM    R14,R12,12(R13)     RESTORE OUR REGS              X01980
         DROP  R15                                               X01980
         USING RBPRNBAS,BASE1      SHIFT BACK TO REG 11 AS BASE  X01980
         TM    SWITCH1,GOTRB       WERE ANY RBS FOUND           @Y02006
         BO    RBPRNT1             YES, FORMAT THEM             @Y02006
         LA    R15,RBERROR         NO, FORMAT ERROR             @Y02006
         BR    R15                                              @Y02006
RBPRNT1  LA    R15,RBERROR         ADDR OF REAL ERROR RTN        X01980
         ST    R15,ERRADDR         STORE IN ERROR ADDR WORD      X01980
         NI    SWB,XFF-FMTERR-IOERR RESET ERROR SWITCHES         X01980
         MVC   ADDR(10),ACTRBS     MOVE 'ACTIVE RBS' TO BUFFER   X01980
         BRWRITE 2                 PRINT AS HEADING
         BAL   R9,RBGET            GET NEXT RB
         LTR   R2,R2               AM I DONE
         BZ    RBDONE              YES--RETURN TO FORMAT ROUTINE
RBPRNT2  LA    PREG,8(R2)
         BRREAD  (PREG)
         MVC   RBSIZE(1),1(PREG)   SAVE RB SIZE
         MVZ   RBTYPE(1),2(PREG)   SAVE RB TYPE
         ST    R2,RBWORK           STORE RB ADDR TO BE CONVERTED
         LA    PREG,RBWORK         LOAD ADDR OF RB ADDR FOR CONVERT
*                                  ROUTINE
         LA    R4,ADDR+5           LOAD ADDR OF WHERE TO PUT CONVERTED
*                                  ADDRESS
         L     R15,AADRCNVT        LOAD ADDR OF CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT RB ADDRESS
         TM    RBTYPE,X'C0'        TEST FOR TYPE OF RB
         BO    RBSVRB              BR IF SVRB
         BM    RBIRB               RB IF IRB OR SIRB
         LA    R7,PRBIDX           LOAD ADDR OF PRB INDEX
         MVC   ADDR(4),PRB         MOVE TYPE TO OUTPUT LINE      Y01980
         B     RBPRNT4             CONTINUE
RBSVRB   TM    RBTYPE,X'10'        TEST FOR TRANSIENT SVRB
         BO    RBTSVRB             BR IF TRANSIENT
         LA    R7,RSVRBIDX         LOAD ADDR OF RES SVRB INDEX
         MVC   ADDR(4),SVRB        MOVE TYPE TO OUTPUT LINE      Y01980
         OI    SVRBI,X'0F'       INDICATE SVRB           /* OZ09006  */
         B     RBPRNT4             CONTINUE
RBTSVRB  LA    R7,TSVRBIDX         LOAD ADDR OF TRANSIENT SVRB INDEX
         MVC   ADDR(4),SVRB        MOVE TYPE TO OUTPUT LINE      Y01980
         OI    SVRBI,X'0F'       INDICATE SVRB           /* OZ09006  */
         B     RBPRNT4             CONTINUE
RBIRB    TM    RBTYPE,X'80'        TEST FOR SIRB
         BO    RBSIRB              BR IF SIRB
         TM    RBTYPE,X'60'        TEST FOR TIRB                 Y10980
         BO    RBTIRB              BR IF TIRB                    Y01980
         LA    R7,IRBIDX           LOAD ADDR OF IRB INDEX
         MVC   ADDR(4),IRB         MOVE TYPE TO OUTPUT LINE      Y01980
         B     RBPRNT4             CONTINUE
RBSIRB   LA    R7,SIRBIDX          LOAD ADDR OF SIRB INDEX
         MVC   ADDR(4),SIRB        MOVE TYPE TO OUTPUT LINE      Y01980
         B     RBPRNT4             CONTINUE                      Y01980
RBTIRB   LA    R7,TIRBIDX          LOAD ADDR OF TIRB INDEX       Y01980
         MVC   ADDR(4),TIRB        MOVE TYPE TO OUTPUT LINE      Y01980
RBPRNT4  LR    PREG,R2             ADDR OF RB                    Y01980
         LA    R5,RBPFXS           DISPL TO BEGIN FIELD OF PREF  Y01980
         SR    PREG,R5             POINT TO BEGIN FIELD OF PREF  Y01980
         ST    PREG,RBPFXD01       STORE INTO PATTERN            Y01980
         LA    PREG,RBPFXLN1       ADDR OF PATTERN               Y01980
         L     R15,AFMTLINE        ADDR OF LINE FORMAT RTN       Y01980
         BALR  RETREG,R15          FORMAT RB PREFIX LINE         Y01980
         BRWRITE 1                 PRINT THE LINE                Y01980
         IC    R3,0(R7)            LOAD ID INDEX FOR FIRST ID    Y01980
         LA    R5,RBIDS(R3)        ADDR OF CORRECT RB ID
         MVC   ADDR+13(6),0(R5)    MOVE 'RESP', 'NM', 'FL-CDE', OR
*                                  'TAB-LN' TO OUTPUT BUFFER
         BRREAD  (R2)              RB ADDR IN REG 2
         LA    R4,ADDR+20          LOAD ADDR OF WHERE IT'S TO GO
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT THE FIELD
         MVC   ADDR+31(4),APSW     MOVE 'APSW' TO OUTPUT BUFFER
         LA    PREG,4(R2)          ADDR OF APSW IN RB
         BRREAD  (PREG)
         LA    R4,ADDR+38          ADDR OF WHERE TO PUT APSW
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT APSW
         MVC   ADDR+49(7),WC       MOVE 'SZ-STAB' TO BUFFER      Y01980
         LA    PREG,8(R2)          ADDR OF THE FIELD IN RB
         BRREAD  (PREG)
         LA    R4,ADDR+60          ADDR OF WHERE TO PUT IT
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT SZ-STAB FIELD OF RB
         IC    R3,1(R7)            LOAD ID INDEX
         LA    R5,RBIDS(R3)        ADDR OF CORRECT ID
         MVC   ADDR+71(6),0(R5)    MOVE 'FL-CDE','LPDE','RESV',OR 'EPA'
*                                  TO OUTPUT BUFFER
         LA    PREG,12(R2)         ADDR OF FIELD IN RB
         BRREAD  (PREG)
         LA    R4,ADDR+78          ADDR OF LOCATION IN BUFFER FOR RB
*                                  FIELD
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT THIS FIELD OF RB
         MVC   ADDR+89(3),PSWNM    MOVE 'PSW' TO BUFFER
         LA    PREG,16(R2)         ADDR OF PSW IN RB
         BRREAD  (PREG)
         LA    R4,ADDR+93          ADDR FOR LEFT HALF OF RESUME PSW
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT LEFT HALF OF PSW
         LA    PREG,20(R2)         ADDR OF RIGHT HALF OF PSW
         BRREAD  (PREG)
         LA    R4,ADDR+102         ADDR FOR RIGHT HALF OF PSW
         L     R15,AWRDCNVT
         BALR  RETREG,R15          CONVERT RIGHT HALF OF PSW
         BRWRITE 1                 WRITE FIRST LINE OF RB
         MVC   ADDR+13(1),QTTR     MOVE 'Q' TO BUFFER            Y01980
         LA    PREG,24(R2)         ADDR OF Q FIELD IN RB
         BRREAD  (PREG)
         LA    R4,ADDR+20          ADDR OF WHERE TO PUT Q
         L     R15,AWRDCNVT
         BALR  RETREG,R15          CONVERT Q/TTR FIELD OF RB
         MVC   ADDR+31(6),WTLNK    MOVE 'WT-LNK' TO BUFFER
         LA    PREG,28(R2)         ADDR OF WT-LINK FIELD IN RB
         BRREAD  (PREG)
         LA    R4,ADDR+38          ADDR OF WHERE TO PUT WT-LINK FIELD
         L     R15,AWRDCNVT
         BALR  RETREG,R15          CONVERT WT-LINK FIELD OF RB
         TM    RBTYPE,X'C0'        TEST RB TYPE
         BNM   PRBPRT              BR IF PRB OR SVRB             Y01980
         TM    RBTYPE,X'40'        TEST FOR IRB AND TIRB
         BO    RBPRNT3             BR IF IRB OR TIRB
         BRREAD  (R2)
         MVC   ADDR+49(2),RBNM     MOVE 'NM' TO BUFFER
         MVC   ADDR+52(8),0(PREG)  MOVE ROUTINE NAME TO BUFFER
RBPRNT3  BRWRITE 1                 WRITE LINE                    Y01980
***************  THIS CODE BLOCK START CODE FOR -------  /* OZ09006  */
         TM    SVRBI,X'0F'       TEST FOR SVRB                 @OZ09006
         BNO   RBPRNT3A          NO - BRANCH AROUND            @OZ09006
         TM    Z9SUFLG,X'01'     TEST FOR SUBITS BEING SET     @OZ09006
         BNO   RBPRNT3A          NO - BRANCH AROUND            @OZ09006
         TM    Z9SUBITS,X'01'    TEST FOR SU07                 @OZ09006
         BNO   RBPRNT3A          NO - BRANCH AROUND            @OZ09006
         MVC   ADDR+13(4),SCBB   MOVE SCBB TAG TO OUTPUT BUFFER
         LA    PREG,144(R2)      SET LOCATION OF DATA          @OZ09006
         BRREAD (PREG)           READ DATA                     @OZ09006
         LA    R4,ADDR+20        STARTING LOC OF DATA IN OUTPUT BUFF
         LA    R3,5              SET FOR 5 TIME LOOP           @OZ09006
         BAL   R9,DUPOUT         MOVE DATA TO OUTPUT BUFFER & PRINT
         MVC   ADDR+13(6),FEPARM MOVE FEPARM TAG TO OUTPUT BUFFER
         LA    PREG,168(R2)      SET LOCATION OF DATA          @OZ09006
         BRREAD (PREG)           READ DATA                     @OZ09006
         LA    R4,ADDR+20        STARTING LOC OF DATA IN OUTPUT BUFF
         LA    R3,6              SET FOR 6 TIME LOOP           @OZ09006
         BAL   R9,DUPOUT         MOVE DATA TO OUTPUT BUFFER & PRINT
         MVC   RBNOSAV(2),BAKER0   SET RBSIZE FOR SU07         @OZ24844
RBPRNT3A NI    SVRBI,X'F0'       RESET SVRB INDICATOR          @OZ09006
***************  THIS CODE BLOCK END FOR --------------  /* OZ09006  */
         NI    SWITCH1,X'FF'-RDCDE-RDLPDE  END OF CDE/LPDE     @YA01753
         LA    R3,32               INDEX TO RB REGS FOR TCBPTRG  Y01980
         L     R15,ATCBPTRG        GET ADDRESS OF REG PRINT ROUTINE
         BALR  RETREG,R15          LINK TO IT
         SR    R3,R3               CLEAR IC REG
         IC    R3,RBSIZE           LOAD RB SIZE IN DOUBLE WORDS
         SLL   R3,3                SHIFT TO MAKE IT IN BYTES
         LH    R4,RBNOSAV        SIZE W/O EXT LIST       /* OZ09006  */
         SR    R3,R4               SUBTRACT FROM RB SIZE
         BNP   RBPRTDN             BR IF NO EXTENDED SAVEAREA
         BAL   R9,EXTSAPT          PRINT EXTENDED SAVEAREA
         MVC   RBNOSAV(2),NINE8    RE-ESTABLISH CONSTANT       @OZ24844
         B     RBPRTDN             GET NEXT RB
***************  THIS CODE BLOCK START CODE FOR -------  /* OZ09006  */
DUPOUT   L     R15,AWRDCNVT      ADDR OF 4 BYTE CONVERT RTN    @OZ09006
         BALR  RETREG,R15        LINK TO IT                    @OZ09006
         LA    R4,11(R4)         ADDR TO PLACE NEXT WORD       @OZ09006
         LA    PREG,4(PREG)      ADDR OF NEXT WORD             @OZ09006
         BCT   R3,DUPOUT         BRANCH IF NOT DONE            @OZ09006
         LA    PREG,1            INDICATE SPACE 1 LINE         @OZ09006
         L     R15,AWRITE        ADDR OF WRITE ROUTINE         @OZ09006
         BALR  R14,R15           LINK TO IT                    @OZ09006
         BR    R9                RETURN TO CALLER              @OZ09006
***************  THIS CODE BLOCK END FOR --------------  /* OZ09006  */
         SPACE 2
***********************************************************************
*                                                                     *
*   HERE TO PRINT NAME, ENTRY POINT, STARTING ADDR, AND LENGTH OF     *
*   MODULES FOR PRBS AND SVRBS                                        *
*                                                                     *
***********************************************************************
         SPACE
PRBPRT   LA    PREG,12(R2)         ADDR OF CDE PTR
         BRREAD  (PREG)
         L     R7,0(PREG)          CDE ADDR TO R7
         LA    R7,0(R7)            CLEAR HIGH ORDER BYTE
         LTR   R7,R7               IS THERE A CDE
         BZ    RBPRT3              BR IF THERE ISN'T
         TM    RBTYPE,X'C0'        IS THIS SVRB                @YA01753
         BO    RBDOLPDE            YES, BRANCH                 @YA01753
         OI    SWITCH1,RDCDE       INDICATE READING CDE        @YA01753
         B     PRBPRT1                                         @YA01753
RBDOLPDE OI    SWITCH1,RDLPDE      INDICATE READING LPDE       @YA01753
PRBPRT1  EQU   *                                               @YA01753
         LA    PREG,8(R7)          ADDR OF NAME IN CDE
         BRREAD  (PREG)
         MVC   ADDR+49(2),RBNM     MOVE 'NM' TO BUFFER
         MVC   ADDR+52(8),0(PREG)  MOVE PROGRAM NAME TO BUFFER
         LA    PREG,16(R7)         ADDR OF ENTRY POINT
         BRREAD  (PREG)
         MVC   ADDR+63(3),RBEPA    MOVE 'EPA' TO BUFFER
         LA    R4,ADDR+67          ADDR OF WHERE TO PUT EPA
         L     R15,AADRCNVT        ADDR OF 3 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT ENTRY POINT ADDRESS
         TM    RBTYPE,X'10'        TRANSIENT SVRB                Y01980
         BO    RBPRNT3             YES--SKIP CDE CODE            Y01980
         LA    PREG,20(R7)         LOAD ADDR OF MAJOR CDE OR EXTENT
*                                  LIST POINTER
         BRREAD  (PREG)
         L     R8,0(PREG)          LOAD TO R8
         LA    PREG,28(R7)         LOAD ADDR OF ATTR BYTES      @Y02006
         BRREAD  (PREG)                                         @Y02006
         MVC   RBCDEATR(2),0(PREG) SAVE ATTR BYTES              @Y02006
         TM    RBCDEATR,MINCDE     IS CDE A MINOR
         BO    RBPRT1              YES--GET MAJOR
RBPRT2   MVC   ADDR+76(3),RBSTA    MOVE 'STA' TO BUFFER
         LA    PREG,12(R8)         ADDR OF STARTING ADDR
         BRREAD  (PREG)
         LA    R4,ADDR+80          ADDR OF WHERE TO PUT STA
         L     R15,AADRCNVT        ADDR OF 3 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT STARTING ADDR
         MVC   ADDR+89(2),RBLN     MOVE 'LN' TO BUFFER
         LA    PREG,8(R8)          ADDR OF SIZE
         BRREAD  (PREG)
         LA    R4,ADDR+92          ADDR OF WHERE TO PUT SIZE
         L     R15,AADRCNVT
         BALR  RETREG,R15          CONVERT SIZE
         MVC   ADDR+101(4),RBATTR  MOVE 'ATR1' TO BUFFER
         HEXCNVT ADDR+106,RBCDEATR,1 CONVERT ATR1 OF CDE
         MVC   ADDR+111(4),RBATTR2 MOVE 'ATR2' TO BUFFER         Y01980
         HEXCNVT ADDR+116,RBCDEAT2,1 CONVERT ATR2 BYTE           Y01980
RBPRT3   TM    RBTYPE,X'D0'        TEST FOR SVRB                 Y01980
         BNZ   RBPRNT3             BR TO PRINT REGS AND EXTENDED
*                                  SAVEAREA IF ANY
         TM    RBTYPE,X'FF'        TYPE = PRB?                 @ZA29599
         BNZ   RBPRT4              NO CONTINUE                 @ZA29599
         BRWRITE 1                 YES PRINT LAST LINE         @ZA29599
         LA    R3,32               INDEX TO REGS IN RB         @ZA29599
         L     R15,ATCBPTRG        ADDR REG PRINT RTN          @ZA29599
         BALR  RETREG,R15          GO WRITE REGS               @ZA29599
         B     RBPRT5                                          @ZA29599
RBPRT4   EQU   *
         BRWRITE 1                 PRINT LAST LINE OF PRB
RBPRT5   EQU   *
         NI    SWITCH1,X'FF'-RDCDE-RDLPDE  END OF CDE/LPDE     @YA01753
         B     RBPRTDN             GET NEXT RB
         SPACE 2
***********************************************************************
*                                                                     *
*   CDE FOR RB IS A MINOR...GET MAJOR CDE FOR EXTENT LIST PTR         *
*                                                                     *
***********************************************************************
         SPACE
RBPRT1   LA    PREG,20(R8)         ADDR OF XL PTR IN MAJOR CDE
         BRREAD  (PREG)
         L     R8,0(PREG)          LOAD EXTENT LIST PTR
         B     RBPRT2              CONTINUE
         EJECT
***********************************************************************
*                                                                     *
*   DONE WITH RB CHAIN...RETURN TO FORMAT ROUTINE                     *
*                                                                     *
***********************************************************************
         SPACE
RBDONE   BRWRITE 2                 SPACE 2 LINES
         MVC   ERRADDR,RBERRSV     RESTORE ERROR ROUTINE ADDR TO IT'S
*                                  PREVIOUS VALUE
         MVC   STOPEXIT(4),RBSTPSV RESTORE CALLER'S STOP ROUTINE
         L     R13,4(R13)          POINT TO CALLER'S SAVE AREA
         LM    R14,R12,12(R13)     RESTORE CALLER'S REGISTERS
         BR    RETREG              RETURN TO FORMAT ROUTINE
         EJECT
***********************************************************************
*                                                                     *
*   DONE PRINTING RB...LOOK FOR ANOTHER                               *
*                                                                     *
***********************************************************************
         SPACE
RBPRTDN  BAL   R9,RBGET            GET NEXT RB ADDR
         LTR   R2,R2               WAS THERE ONE
         BZ    RBDONE              NO--ALL DONE
         BRWRITE 1                 YES--SPACE A LINE
         B     RBPRNT2             CONTINUE WITH THIS RB
         SPACE 2
***********************************************************************
*                                                                     *
*   MORE THAN 50 RBS ON RB CHAIN...PRINT INFINITE LOOP MESSAGE AND    *
*   PRINT THE FIRST 50                                                *
*                                                                     *
***********************************************************************
         SPACE
TOOMANY1 MVC   RBLIST,TCBLIST      SAVE RBLIST PTR              @Y02006
         MVC   TCBLIST,RBTLIST     RESTORE TCBLIST PTR          @Y02006
TOOMANY  MVC   ADDR(25),INFMSG     MOVE INFINITE LOOP MSG TO BUFFER
         BRWRITE 2                 PRINT AND SPACE 2 LINES
         B     RBPRNT1             PRINT THE 50 WE HAVE
         EJECT
***********************************************************************
*                                                                     *
*   PRINT RB EXTENDED SAVE AREA                                       *
*                                                                     *
***********************************************************************
         SPACE
EXTSAPT  MVC   ADDR+13(5),EXTSA    MOVE 'EXTSA' TO BUFFER
         LA    R8,96               SET INDEX
EXTLOOP2 LA    R4,ADDR+22          INIT WHERE TO PUT IT ADDR
         LA    R7,8                LOAD LOOP CNT (NO OF WRDS/LINE)
EXTLOOP1 LA    PREG,0(R8,R2)       ADDR OF EXTENDED SAVEAREA WORD
         BRREAD  (PREG)
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT WORD OF EXTENDED SAVEAREA
         SH    R3,FOUR             DECR BYTE CNT
         BNP   EXTDONE             BR OUT OF LOOP IF DONE
         AH    R4,ELEVEN           INCR WHERE-TO-PUT-IT ADDR
         AH    R8,FOUR             INCR INDEX
         BCT   R7,EXTLOOP1         LOOP TILL END OF LINE
         BRWRITE 1                 PRINT THIS LINE
         B     EXTLOOP2            CONTINUE WITH NEW LINE
         SPACE
EXTDONE  BRWRITE 1                 PRINT LAST LINE
         BR    R9                  RETURN TO CALLER
         SPACE 3
***********************************************************************
*                                                                     *
*   USE TCBSAVE ROUTINE TO SAVE RB ADDRESSES                          *
*                                                                     *
***********************************************************************
         SPACE
RBSAVE   LH    R3,RBCNT1           LOAD COUNT OF TOTAL NUMB OF RBS
         AH    R3,ONEA             ADD ONE TO COUNT
         CH    R3,RBMAX            COMPARE RB COUNT TO MAX TO TEST FOR
*                                  RB CHAIN LOOP                @Y02006
         BH    TOOMANY             IF GT 50 RBS ON CHAIN ASSUME
*                                  INFINITE LOOP IN CHAIN
         STH   R3,RBCNT1           STORE BACK INCR COUNT
         MVC   RBTLIST,TCBLIST     SAVE TCBLIST PTR
         MVC   TCBLIST,RBLIST      MOVE IN RBLIST PTR
         L     R15,ATCBSAVE        LOAD ADDR OF TCB SAVE ROUTINE
         BALR  RETREG,R15          LINK TO TCBSAVE ROUTINE TO SAVE RB
*                                  ADDRESS ON RBLIST
         LTR   R15,R15             TEST RETURN CODE
         BNZ   TOOMANY1            RB ADDR IS A DUPLICATE OF ONE
*                                  ALREADY ON THE RBLIST...DON'T INCR
*                                  RB COUNT...INFINITE LOOP     @Y02006
         LH    R3,RBCNT            LOAD RB COUNT
         AH    R3,ONEA             INCR COUNT
         STH   R3,RBCNT            PUT IT PACK
         OI    SWITCH1,GOTRB       INDICATE RB ON RBLIST        @Y02006
RBSAVE1  MVC   RBLIST,TCBLIST      SAVE RBLIST PTR
         MVC   TCBLIST,RBTLIST     RESTORE TCBLIST PTR
         BR    R9                  RETURN TO CALLER
         SPACE 2
***********************************************************************
*                                                                     *
*   USE TCBRTRV AND TCBREMV ROUTINES TO GET TOP RB ADDR ON RBLIST AND *
*   THEN REMOVE IT FROM THE LIST                                      *
*                                                                     *
***********************************************************************
         SPACE
RBGET    MVC   RBTLIST,TCBLIST     SAVE TCBLIST PTR
         MVC   TCBLIST,RBLIST      MOVE IN RBLIST PTR
         LA    R2,1                LOAD CNT FOR FIRST ON LIST
         L     R15,ATCBRTRV        ADDR OF TCB RETRIEVE ROUTINE
         BALR  RETREG,R15          LINK TO GET FIRST RB ADDRESS
         LTR   R2,R2               WAS THERE ANY
         BZ    RBGET1              BR IF NONE
         L     R15,ATCBREMV        ADDRESS OF REMOVE ROUTINE
         BALR  RETREG,R15          REMOVE THIS RB ADDRESS FROM RBLIST
         LH    R3,RBCNT            LOAD RB COUNT
         SH    R3,ONEA             DECR BY ONE
         STH   R3,RBCNT            STORE BACK REDUCED RB COUNT
RBGET1   MVC   RBLIST,TCBLIST      SAVE RBLIST PTR
         MVC   TCBLIST,RBTLIST     RESTORE TCBLIST PTR
         BR    R9                  RETURN TO CALLER
         SPACE 2
***********************************************************************
*                                                                     *
*   PURGE THE RB LIST IN THE EVENT THE OPERATOR STOPPED THE DUMP      *
*                                                                     *
***********************************************************************
         SPACE
         USING *,R15
RBSTP    LA    R13,RBPRNTSV        POINT TO SAVE AREA
         LM    R14,R12,12(R13)     RESTORE REGS
         USING RBPRNBAS,BASE1      SHIFT BACK TO REG 11 AS BASE
         DROP  R15
         LA    R9,RBSTPOUT         SET RETURN ADDRESS
RBPRGE   LR    R4,R2               SAVE R2
         MVC   RBTLIST,TCBLIST     SAVE TCBLIST PTR
         MVC   TCBLIST,RBLIST      MOVE IN RBLIST PTR
         SR    R2,R2               ZERO R2 FOR COMPL REMOVAL
         L     R15,ATCBREMV        ADDR OF TCB REMOVE ROUTINE
         BALR  RETREG,R15          LINK TO IT
         MVC   RBLIST,TCBLIST      MOVE BACK NOW ZEROED PTR
         MVC   TCBLIST,RBTLIST     RESTORE TCBLIST PTR
         NI    SWITCH1,XFF-GOTRB   RBLIST PURGED                @Y02006
         LR    R2,R4               RESTORE R2
         BR    R9                  RETURN TO CALLER
RBSTPOUT MVC   ERRADDR(4),RBERRSV  RESTORE ERROR HANDLER'S ADDR
         L     R15,RBSTPSV         GET CALLER'S STOP ADDRESS
         ST    R15,STOPEXIT        STORE BACK IN COMMON CSECT
         BR    R15                 BRANCH TO IT
         EJECT
***********************************************************************
*                                                                     *
*   ERROR IN RB FORMAT...WRITE ERROR MESSAGE AND CONTINUE WITH        *
*   NEXT RB.                                                          *
*                                                                     *
***********************************************************************
         SPACE
         DROP  BASE1
         USING RBERROR,R15
RBERROR  LA    R13,RBPRNTSV        GET ADDRESS OF RB PRINT'S SAVE AREA
         LM    R14,R12,12(R13)     RESTORE OUR REGS
         DROP  R15
         USING RBPRNBAS,BASE1      SHIFT BACK TO REG 11 AS BASE
         L     BUFREG,CURBUF       RELOAD BUFFER ADDR
         BRWRITE 1                 SPACE A LINE
         TM    SWITCH1,RDCDE       ERROR READING CDE           @YA01753
         BNO   RBCKLP              NO, CHECK LPDE              @YA01753
         MVC ADDR(L'CDEMSG),CDEMSG  YES, PRINT ERROR MSG       @YA01753
         B     RBWRTE                                          @YA01753
RBCKLP   TM    SWITCH1,RDLPDE      ERROR READING LPDE          @YA01753
         BNO   RBERR               NO, MUST BE RB ERROR        @YA01753
         MVC   ADDR(L'LPDEMSG),LPDEMSG  YES, PRINT ERROR MSG   @YA01753
RBWRTE   BRWRITE 1                                             @YA01753
         NI    SWB,XFF-FMTERR-IOERR  RESET ERROR SWITCHES      @YA01753
         B     RBPRT3              FORMAT REST OF RB           @YA01753
RBERR    EQU   *                                               @YA01753
         MVC   ADDR(15),RBERRMSG   MOVE ERROR MSG TO BUFFER
         BRWRITE 1                 PRINT ERROR MSG
         NI    SWB,XFF-FMTERR-IOERR RESET ERROR SWITCHES
         TM    SWITCH1,RDCDE+RDLPDE    PRINT REMAINDER OF      @YA02258
         BM    RBPRNT3            RB WHEN CDE OR LPDE ABSENT   @YA02258
         B     RBPRTDN             CONTINUE
         EJECT
***********************************************************************
*                                                                     *
*   SAVEAREA AND CONSTANTS FOR RBPRNT ROUTINE                         *
*                                                                     *
***********************************************************************
***************  THIS CODE BLOCK START CODE FOR -------  /* OZ09006  */
SVRBI    DS    CL1               SVRB INDICATOR                @OZ09006
SCBB     DC    C'SCBB'           SCBB TAG                      @OZ09006
FEPARM   DC    C'FEPARM'         FEPARM TAG                    @OZ09006
RBNOSAV  DC    H'0152'             RBSIZE W/O EXTSA AND SU07   @OZ24844
NINE8    DC    X'0098'           HEX 98 CONSTANT               @OZ09006
BAKER0   DC    X'00B0'             SU07 RBSIZE W/O EXTSA       @OZ24844
***************  THIS CODE BLOCK END FOR --------------  /* OZ09006  */
         SPACE
RBPRNTSV DC    18F'0'              RB PRINT'S SAVE AREA
ATCBPTRG DC    A(TCBPTRG)          ADDRESS OF PRINT REG ROUTINE IN
*                                  TCB FORMATTING ROUTINE
RBERRSV  DC    F'0'                SAVE AREA FOR PREVIOUS ERROR ROUTINE
*                                  ADDRESS
RBSTPSV  DC    F'0'                SAVE AREA FOR STOP ROUTINE ADDR
RBWORK   DC    F'0'
RBTLIST  DC    F'0'
RBLIST   DC    F'0'
RBCNT    DC    H'0'                COUNT OF RB ADDRESSES ON RBLIST
RBCNT1   DC    H'0'                TOTAL COUNT OF RBS FOR LOOP CHECK
SWITCH1  DC    X'00'              80=ERROR ON FETCH OF CDE
*                                 40=ERROR ON FETCH OF LPDE
RBSIZE   DC    X'00'
RBTYPE   DC    X'00'
RBCDEATR DC    X'00'
RBCDEAT2 DC    X'00'               CDE ATR2 SAVE AREA            Y01980
PRBIDX   DC    X'0018'
RSVRBIDX DC    X'0018'
TSVRBIDX DC    X'061E'
IRBIDX   DC    X'0C24'
TIRBIDX  DC    X'0000'                                           Y01980
SIRBIDX  DC    X'1224'
RBIDS    DC    CL6'RESV'
         DC    CL6'RESV'                                         Y01980
         DC    CL6'FL-PSA'
         DC    CL6'NM'
         DC    CL6'FL-CDE'
         DC    CL6'LPDE'                                         Y01980
         DC    CL6'EPA'
ACTRBS   DC    C'ACTIVE RBS'
RBERRMSG DC    C'RB FORMAT ERROR'
INFMSG   DC    C'INFINITE LOOP IN RB CHAIN'
CDEMSG   DC    C'FORMAT ERROR READING CDE'                      @Y02006
LPDEMSG  DC    C'FORMAT ERROR READING LPDE'                     @Y02006
APSW     DC    C'APSW'
WC       DC    C'SZ-STAB'                                        Y01980
PSWNM    DC    C'PSW'
QTTR     DC    C'Q'                                              Y01980
WTLNK    DC    C'WT-LNK'
EXTSA    DC    C'EXTSA'
RBNM     DC    C'NM'
RBEPA    DC    C'EPA'
RBSTA    DC    C'STA'
RBLN     DC    C'LN'
RBATTR   DC    C'ATR1'
RBATTR2  DC    C'ATR2'                                           Y01980
RBPFXLN1 FMTPTRN (LBL,LBLP,DTA,DTAP),6,8,13,20,(RBPFXID1),(RBPFXD01,0)
*                                                               @Y02006
         FMTPTRN (LBL,DTA),7,4,40,48  RB PREFIX PATTERN         @Y02006
         FMTPTRN (LBL,DTA),4,4,59,64                            @Y02006
         FMTPTRN (LBL,DTA),4,4,75,80                            @Y02006
         FMTPTRN (LBL,DTA),7,4,91,99,,,LAST                     @Y02006
RBPFXID1 DC    C'RTOPSWRTIL-ICTRANFLG1WC-L-IC'                  @Y02006
PRB      DC    C'PRB '             NAME FOR PRB                  X01980
IRB      DC    C'IRB '             NAME FOR IRB                  X01980
SIRB     DC    C'SIRB'             NAME FOR SIRB                 X01980
SVRB     DC    C'SVRB'             NAME FOR SVRB                 X01980
TIRB     DC    C'TIRB'             NAME FOR TIRB                 X01980
FRBPCH   DC    30F'0'              PATCH AREA                    X01980
         DROP  BASE1,COMBASE
         EJECT
AMDPRFMS CSECT
         SPACE
***********************************************************************
*                 *** AMDPRFMS - MSS PRINT ***                        *
*                                                                     *
* STATUS--OS/VS2 RELEASE 2.0                                          *
*                                                                     *
* FUNCTION--                                                          *
*    THIS ROUTINE PRINTS MSS INFORMATION FOR THE TCB BEING FORMATTED. *
*                                                                     *
* ENTRY POINTS--                                                      *
*    AMDPRFMS IS THE ONLY ENTRY.  CONTROL IS RECEIVED FROM AMDPRFSC.  *
*    STANDARD SUBROUTINE LINKAGE USED.                                *
*                                                                     *
* INPUTS--                                                            *
*         REGISTER 0 - ASID OF STORAGE CONTAINING TCB TO BE FORMATTED *
*         REGISTER 2 - TCB ADDRESS FOR WHICH MSS INFO IS TO BE        *
*                      FORMATTED.                                     *
*         REGISTER 12 - ADDRESS OF COMMON AREA                        *
*                                                                     *
* OUTPUTS--                                                           *
*    WRITES DUMMY PQE FOLLOWED BY THE PQE CHAIN.                      *
*    WRITES ERROR MESSAGE 'FORMAT ERROR IN MAIN STORAGE BLOCKS',      *
*    AND 'INFINITE LOOP IN PQES'.                                     *
*                                                                     *
* EXTERNAL REFERENCES--                                               *
*         BRREAD - TO OBTAIN DATA FROM THE INPUT DUMP.                *
*         BRWRITE - TO WRITE DATA TO THE 'PRINTER' DATA SET.          *
*         AMDPRGFR - FROM AN ADDRESS IN COMMON, TO FORMAT A LINE      *
*                    DESCRIBED BY THE FMTPTRN MACRO INSTRUCTION.      *
*                                                                     *
* EXITS,NORMAL--                                                      *
*    RETURN TO CALLER THROUGH STANDARD LINKAGE.                       *
*                                                                     *
* EXITS,ERROR--                                                       *
*    SAME AS NORMAL EXIT                                              *
*                                                                     *
* TABLES/WORK AREAS--                                                 *
*    FMTPTRN MACRO IS USED TO GENERATE A PATTERN FOR THE FORMATTED    *
*    CONTROL BLOCKS.                                                  *
*                                                                     *
* ATTRIBUTES-- REUSABLE                                               *
*                                                                     *
* CHARACTER CODE DEPENDENCY-- NONE                                    *
*                                                                     *
* NOTES--                                                             *
*   BRREAD ERROR HANDLER:  IF THE PQE POINTER OR PQE'S CANNOT BE      *
*   READ A MESSAGE IS PRINTED AND CONTROL RETURNS TO AMDPRFSC.        *
*                                                                     *
***********************************************************************
         SPACE
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTER
         BALR  BASE1,0             ESTABLISH REG 11 AS BASE
         USING *,BASE1
MSSBASE  LA    R3,MSSSAVE          SAVE AREA CHAINING
         ST    R13,MSSSAVE+4
         ST    R3,8(R13)
         LR    R13,R3
         SPACE
         USING COMMON,COMBASE
         SPACE
         MVC   MSSPRERS,ERRADDR    SAVE PREVIOUS ROUTINES ERROR ROUT
*                                  ADDR
         LA    R15,MSSERR          LOAD MSSPRNT'S ERROR ROUT ADDR
         ST    R15,ERRADDR         ENABLE THE ERROR ROUTINE
         SPACE 2
***********************************************************************
*                                                                     *
*   PRINT PQES FOR AOS/2                                              *
*                                                                     *
***********************************************************************
         SPACE
         XC    PQECNT,PQECNT       ZERO PQE COUNT
         LA    PREG,TCBPQE+1(R2)   LOAD ADDR OF PTR TO DUMMY PQE Y01980
         ST    PREG,MSSPTN1A       STORE DUMMY PQE PTR INTO PATTERN
         BCTR  PREG,0              MAKE A WORD BDY               Y01980
         BRREAD  (PREG),DATA,ASID=(R0)                          @Y02006
         L     R2,0(PREG)          LOAD PTR TO DUMMY PQE
         LA    R2,0(R2)            CLEAR POSSIBLE HI BYTE
         LTR   R2,R2               IS THERE A DUMMY PQE
         BZ    MSSPRDNA            NO--RETURN TO CALLER
         BAL   R9,MSSTITLE         YES--PRINT MSS TITLE
         LA    PREG,8(R2)          ADDR OF PQE POINTERS IN DUMMY PQE
         ST    PREG,MSSPTN1B       STORE INTO PATTERN
         BRREAD  (PREG)
         L     R2,0(PREG)          LOAD ADDR OF FIRST PQE TO R2
         LA    PREG,MSSPTN1        LOAD ADDR OF DUMMY PQE PATTERN
         BAL   R9,MSSFMPR2         GO FORMAT LINE, AND PRINT AND SPACE
*                                  TWO LINES
MSSPRLP1 LA    R2,0(R2)            CLEAR POSSIBLE HI BYTE FROM PQE ADDR
         LTR   R2,R2               TEST FOR ZERO PQE ADDR
         BZ    MSSPRDN             ZERO--ALL DONE
         LH    R3,PQECNT           LOAD PQE COUNT               @Y02006
         AH    R3,ONEA             ADD 1 TO IT                  @Y02006
         CH    R3,PQEMAX           COMPARE TO MAX               @Y02006
         BH    MSSLOOP             GT MAX--CONSIDER IT A LOOP   @Y02006
         STH   R3,PQECNT           STORE BACK PQECNT            @Y02006
         ST    R2,MSSPTN2A         STORE PQE ADDR INTO PATTERN
         LA    PREG,MSSPTN2        LOAD ADDR OF PQE PATTERN
         BAL   R9,MSSFMPR1         GO FORMAT LINE, AND PRINT AND SPACE
*                                  ONE LINE
         LA    PREG,MSSPTN3        LOAD ADDR OF PATTERN FOR SECOND LINE
*                                  OF PQE
         BAL   R9,MSSFMPR2         GO FMT LN, PRT AND SPC 2 LNS
         LA    PREG,8(R2)          LOAD ADDR OF PTR TO NEXT PQE
         BRREAD  (PREG)
         L     R2,0(PREG)          LOAD PTR TO NEXT PQE
         B     MSSPRLP1            LOOP FOR ALL PQES
         SPACE 2
***********************************************************************
*                                                                     *
*   PRINT MSS TITLE                                                   *
*                                                                     *
***********************************************************************
         SPACE
MSSTITLE L     BUFREG,CURBUF       LOAD OUTPUT BUFFER ADDR
         USING OUTBUF,BUFREG
         MVC   ADDR(L'MSSVTTL),MSSVTTL MOVE AOS/2 MSS TITLE TO BUF
MSSTTL2  BRWRITE 2                 PRINT TITLE AND SPACE 2 LINES
         BR    R9                  RETURN TO CALLER
         DROP  BUFREG
         SPACE 2
***********************************************************************
*                                                                     *
*   FORMAT AND PRINT LINE                                             *
*                                                                     *
***********************************************************************
         SPACE
MSSFMPR2 LA    R3,2                LOAD NUMBER OF SPACES
         B     MSSFMPRA            CONTINUE
MSSFMPR1 LA    R3,1                LOAD NUMBER OF SPACES
MSSFMPRA L     R15,AFMTLINE        LOAD ADDR OF LINE FORMAT ROUT
         BALR  RETREG,R15          GO FORMAT PRINT LINE
         LR    PREG,R3             LOAD NUMBER OF LINES TO SPACE
         L     R15,AWRITE          LOAD ADDR OF WRITE ROUTINE
         BALR  RETREG,R15          GO PRINT LINE AND SPACE SPEC NUMB
*                                  OF LINES
         BR    R9                  RETURN TO CALLER
         SPACE 2
***********************************************************************
*                                                                     *
*   GREATER THAN 50 PQES...LET'S CONSIDER IT A LOOP                   *
*                                                                     *
***********************************************************************
         SPACE
MSSLOOP  L     BUFREG,CURBUF       LOAD ADDR OF OUTPUT BUFFER
         USING OUTBUF,BUFREG
         MVC   ADDR(L'MSSLPMSG),MSSLPMSG MOVE PQE LOOP MSG TO BUFFER
         BRWRITE 3                 PRINT AND SPACE 3 LINES
         B     MSSPRDNA            RETURN TO FORMAT ROUTINE
         SPACE 2
***********************************************************************
*                                                                     *
*   ALL DONE...RETURN TO FORMAT ROUTINE                               *
*                                                                     *
***********************************************************************
         SPACE
MSSPRDN  BRWRITE 1                 SPACE ONE MORE LINE
MSSPRDNA MVC   ERRADDR,MSSPRERS    RESTORE PREVIOUS ERROR ROUT ADDR
         L     R13,4(R13)          GET CALLER'S SAVE AREA ADDRESS
         LM    R14,R12,12(R13)     RESTORE HIS REGS
         BR    RETREG              RETURN TO CALLER (FORMAT ROUTINE)
         EJECT
***********************************************************************
*                                                                     *
*   MSS PRINT FORMAT ERROR                                            *
*                                                                     *
***********************************************************************
         SPACE
         DROP  BASE1
         USING MSSERR,R15
MSSERR   LA    R13,MSSSAVE         GET MSS PRINT'S SAVE AREA
         LM    R14,R12,12(R13)     RESTORE OUR REGS
         DROP  R15
         USING MSSBASE,BASE1       SHIFT BACK TO BASE1 - REG 11
         L     BUFREG,CURBUF       LOAD OUTPUT BUFFER ADDR
         BRWRITE 1                 SPACE A LINE
         MVC   ADDR(L'MSSERMSG),MSSERMSG MOVE ERROR MSG TO BUFFER
         BRWRITE 3                 PRINT AND SPACE 3 LINES
         B     MSSPRDNA            RETURN TO FORMAT
         EJECT
***********************************************************************
*                                                                     *
*   CONSTANTS FOR MSSPRNT ROUTINE                                     *
*                                                                     *
***********************************************************************
         SPACE
MSSSAVE  DC    18F'0'              MSS PRINT'S SAVE AREA
MSSPRERS DC    F'0'                SAVE AREA FOR PREVIOUS ERR ROUT ADR
         SPACE
*   PATTERN FOR AOS/2 DUMMY PQE
MSSPTN1  FMTPTRN (DTA,DTAP,LBL,LBLP),5,3,0,7,(MSSDPID),(MSSPTN1A,0)
         FMTPTRN (DTA,DTAP,LBL),5,4,16,22,,(MSSPTN1B,0)          Y01980
         FMTPTRN (DTA,LBL),4,4,33,38,,,LAST                      Y01980
         SPACE
*   PATTERN FOR LINE 1 OF AOS/2 PQE
MSSPTN2  FMTPTRN (DTA,DTAC,DTAP,LBL,LBLP),3,3,0,5,(MSSPQID1),(MSSPTN2A+X
               1)
         FMTPTRN (DTA,DTAP,LBL),3,4,14,18,,(MSSPTN2A,0)
         FMTPTRN (DTA,LBL),3,4,29,33
         FMTPTRN (DTA,LBL),3,4,44,48
         FMTPTRN (DTA,LBL),3,4,59,63,,,LAST
         SPACE
*   PATTERN FOR LINE 2 OF AOS/2 PQE
MSSPTN3  FMTPTRN (DTA,LBL),3,4,14,18
         FMTPTRN (DTA,LBL),3,4,29,33
         FMTPTRN (DTA,LBL),3,4,44,48
         FMTPTRN (DTA,LBL),3,4,59,63,,,LAST                      Y01980
         SPACE
MSSDPID  DC    C'D-PQEFIRSTLAST'
MSSPQID1 DC    C'PQEFFBLFBNPQPPQTCBRSIRADFLG'
PQECNT   DC    H'0'                PQE CNTR USED TO PREVENT LOOP
MSSVTTL  DC    C'MAIN STORAGE'
MSSLPMSG DC    C'INFINITE LOOP IN PQES'                          Y01980
MSSERMSG DC    C'FORMAT ERROR IN MAIN STORAGE BLOCKS'
FMSPCH   DC    10F'0'              PATCH AREA                    X01980
         DROP  BASE1,COMBASE
         EJECT
AMDPRFLD CSECT
         SPACE
***********************************************************************
*                *** AMDPRFLD - LOAD LIST PRINT ***                   *
*                                                                     *
* STATUS--OS/VS2 RELEASE 2.0                                          *
*                                                                     *
* FUNCTION--                                                          *
*    THIS ROUTINE PRINTS THE LOAD LIST INCLUDING THE JOB PACK QUEUE.  *
*                                                                     *
* ENTRY POINTS--                                                      *
*    AMDPRFLD IS THE ONLY ENTRY.  CONTROL IS RECEIVED FROM AMDPRFSC.  *
*    STANDARD SUBROUTINE LINKAGE USED.                                *
*                                                                     *
* INPUTS--                                                            *
*         REGISTER 0 - ASID OF STORAGE CONTAINING TCB TO BE FORMATTED *
*         REGISTER 2 - TCB ADDRESS FOR WHICH LOAD LIST IS TO BE       *
*                      FORMATTED.                                     *
*         REGISTER 12 - ADDRESS OF COMMON AREA                        *
*                                                                     *
* OUTPUTS--                                                           *
*    WRITES FORMATTED LOAD LIST, AND JOB PACK QUEUE.                  *
*    WRITES MESSAGES 'NO ELEMENTS ON LOAD LIST',  'NOTHING IN JOB     *
*    PACK',AND 'NO EXTENT LIST'.                                      *
*    WRITES ERROR MESSAGES 'ERROR IN LOAD LIST'  'ERROR IN JOB PACK   *
*    QUEUE','ERROR IN EXTENT LIST','INFINITE LOOP IN LOAD LIST',      *
*    AND INFINITE LOOP IN JOB PACK QUEUE'.                            *
*                                                                     *
* EXTERNAL REFERENCES--                                               *
*         BRREAD - TO OBTAIN DATA FROM THE INPUT DUMP.                *
*         BRWRITE - TO WRITE DATA TO THE 'PRINTER' DATA SET.          *
*         AMDPRGFR - FROM AN ADDRESS IN COMMON, TO FORMAT A LINE      *
*                    DESCRIBED BY THE FMTPTRN MACRO INSTRUCTION.      *
*         ADRCNVT - FROM ADDRESS IN COMMON, TO CONVERT 3 BYTES TO     *
*                   PRINTABLE HEX.                                    *
*                                                                     *
* EXITS,NORMAL--                                                      *
*    RETURN TO CALLER THROUGH STANDARD LINKAGE.                       *
*                                                                     *
* EXITS,ERROR--                                                       *
*    SAME AS NORMAL EXIT                                              *
*                                                                     *
* TABLES/WORK AREAS--                                                 *
*    FMTPTRN MACRO IS USED TO GENERATE A PATTERN FOR THE FORMATTED    *
*    CONTROL BLOCKS.                                                  *
*                                                                     *
* ATTRIBUTES-- REUSABLE                                               *
*                                                                     *
* CHARACTER CODE DEPENDENCY-- NONE                                    *
*                                                                     *
* NOTES--                                                             *
*   BRREAD ERROR HANDLER:  IF A CDE CANNOT BE READ FROM THE INPUT     *
*   DUMP, A MESSAGE IS PRINTED.  IF THE LOAD LIST IS BEING FORMATTED  *
*   AN ATTEMPT IS MADE TO FORMAT THE JOB PACK QUEUE, IF THE JOB       *
*   PACK QUEUE IS BEING FORMATTED CONTROL RETURNS TO AMDPRFSC.        *
*                                                                     *
***********************************************************************
         SPACE
GOTONE   EQU   128
JBPQPRT  EQU   64
CDEIND   EQU   32               CDE READ INDICATOR              OZ09681
JPQPTR   EQU   44
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         BALR  BASE1,0             ESTABLISH REG 11 AS BASE
         USING LOADBASE,BASE1
LOADBASE LA    R3,LOADSAVE         SAVE AREA CHAINING
         ST    R13,LOADSAVE+4
         ST    R3,8(R13)
         LR    R13,R3
         SPACE
         USING COMMON,COMBASE
         SPACE
         ST    R2,LDTCBSV          SAVE TCB ADDRESS
         MVI   LDSW,0              ZERO LOAD SWITCH
         MVC   LDERSV,ERRADDR      SAVE PREV ERROR ROUTINE ADDRESS
         LA    R15,LOADERR         ADDR OF LOADPRT ERROR ROUTINE
         ST    R15,ERRADDR         STORE IN ERROR ADDR WORD
         L     BUFREG,CURBUF       LOAD BUFFER ADDRESS
         USING OUTBUF,BUFREG
         MVC   ADDR(9),LDTITLE     MOVE TITLE TO BUFFER
         BRWRITE 2                 PRINT TITLE
         LA    PREG,TCBLLEP(R2)    ADDR OF LOAD LIST PTR
         BRREAD  (PREG),DATA,ASID=(R0)                          @Y02006
         L     R2,0(PREG)          LOAD LOAD LIST PTR TO R2
         LH    R10,LLEMAX          LOOP CONTROL FOR LOAD LIST   @Y02006
         ST    R10,LOOPCTR         SAVE COUNTER                 SA53335
         LA    R10,1(R10)          ADD 1 FOR BCT                @Y02006
         BCT   R10,LOADLP3         CHECK ORIGINAL LIMIT         @Y02006
         OI    LDSW,GOTONE         PREVENT EXTRA MSG            @Y02006
         B     PLLP                ORIGINAL LIMIT WAS 0         @Y02006
LOADLP3  LTR   PREG,R2             LLE PTR TO PARM REG AND TEST IT
         BZ    LOADDONE            ALL DONE IF ZERO
         BRREAD  (PREG)
         MVC   NXTLLE(4),0(PREG)   SAVE ADDR OF NEXT LOAD LIST ELEMENT
         LA    PREG,8(R2)          ADDR OF COUNT FIELDS         @Y02006
         BRREAD (PREG)                                          @Y02006
         MVC   LOADRESP(4),0(PREG) SAVE RESP COUNT              @Y02006
         LA    PREG,4(R2)          ADDR OF CDE PTR
         BRREAD  (PREG)
         L     R2,0(PREG)          LOAD CDE ADDR TO R2
         LTR   R2,R2               TEST FOR CDE
         BZ    LOADPRT6            NO CDE--FORGET THIS LLE
LOADPRT8 OI    LDSW,GOTONE         SET SW TO INDICATE SOMETHING ON LOAD
*                                  LIST
         MVC   ADDR(3),CDEID       MOVE 'CDE' TO BUFFER
         LA    R4,ADDR+5           ADDR OF WHERE TO PUT CDE ADDR
         L     R15,AADRCNVT        ADDR OF 3 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT CDE ADDR
         MVC   ADDR+14(2),NMID     MOVE 'NM' TO BUFFER
         OI    LDSW,CDEIND      1ST READ OF A CDE               OZ09681
         ST    R2,CDEADDR          SAVE FOR POSSIBLE READ ERR  @OZ14113
         BRREAD  (R2)
         MVC   NXTCDE(4),0(PREG)   SAVE PTR TO NEXT             @Y02006
         NI    LDSW,XFF-CDEIND  1ST READ WAS SUCCESSFUL         OZ09681
         LA    PREG,8(R2)          ADDR OF FIRST 4 BYTES OF NAME
         BRREAD  (PREG)
         MVC   ADDR+17(4),0(PREG)  MOVE 4 BYTES OF NAME
         LA    PREG,12(R2)         ADDR OF SECOND 4 BYTES OF NAME
         BRREAD  (PREG)
         MVC   ADDR+21(4),0(PREG)  MOVE 4 BYTES OF NAME
         MVC   ADDR+28(3),USEID    MOVE 'USE' TO BUFFER
         LA    PREG,24(R2)         POINT TO USECNT FIELD        @Y02006
         BRREAD (PREG)             READ 1ST HALF OF USE CNT      Y01980
         LR    R5,PREG             LOAD FROM ADDR                Y01980
         LA    R4,ADDR+32          LOAD TO ADDR                  Y01980
         BAL   R9,TWOBYTCV         CONVERT USECNT               @Y02006
         LA    PREG,16(R2)         ADDR OF EPA
         BRREAD  (PREG)
         MVC   ADDR+39(4),RESPID   MOVE 'RESP' TO BUFFER
         MVC   ADDR+51(5),SYSCTID  MOVE 'SYSCT' TO BUFFER       @Y02006
         TM    LDSW,JBPQPRT        PRINTING JOB PACK Q
         BNO   LOADPRT9            BR IF NOT FOR RESPONSIBILITY CNT
         MVC   ADDR+44(2),NA       NO RESP CNT--MOVE 'NA' TO BUFFER
         MVC   ADDR+57(2),NA       DITTO FOR SYSCT              @Y02006
         B     LOADPRTD            BR ARROUND
LOADPRT9 LA    R5,LOADRESP         ADDR OF RESPONSIBILITY COUNT
         LA    R4,ADDR+44          WHERE TO PUT RESP CNT
         BAL   R9,TWOBYTCV         GO CONVERT RESP CNT          @Y02006
         LA    R5,2(R5)            ADDR OF SYSCT                @Y02006
         LA    R4,ADDR+57          WHERE TO PUT IT              @Y02006
         BAL   R9,TWOBYTCV         CONVERT TWO BYTES           @OZ14114
LOADPRTD MVC   ADDR+84(3),EPAID    MOVE 'EPA' TO BUFFER         @Y02006
         LA    R4,ADDR+88          ADDR OF WHERE-TO-PUT-IT      @Y02006
         L     R15,AADRCNVT        ADDR OF 3 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT ENTRY POINT ADDRESS
         LA    PREG,28(R2)         ADDR OF ATTR BYTES           @Y02006
         BRREAD (PREG)                                          @Y02006
         MVC   CDEATR1(1),0(PREG)  SAVE ATR1 FOR TEST           @Y02006
         MVC   ADDR+73(4),ATR2ID   MOVE 'ATR2' TO BUFFER        @Y02006
         MVC   ADDR+63(4),ATR1ID   MOVE 'ATR1' TO BUFFER        @Y02006
         LR    R5,PREG             ADDR OF CDE ATTRIBUTES       @Y02006
         LA    R4,ADDR+68          WHERE TO PUT ATR1            @Y02006
         BAL   R9,BYTECNVT         CONVERT ATR1
         LA    R5,1(R5)            ADDR OF ATR2                 @Y02006
         LA    R4,ADDR+78          WHERE TO PUT IT              @Y02006
         BAL   R9,BYTECNVT         CONVERT ATR2                 @Y02006
LOADPRT7 LA    PREG,20(R2)         ADDR OF EXTENT LIST PTR OR MAJOR CDE
*                                  IF THIS CDE IS A MINOR
         BRREAD  (PREG)
         L     R2,0(PREG)          LOAD ADDR OF EXTENT LIST OR MAJOR
*                                  CDE
         TM    CDEATR1,MINCDE      WAS IT A MINOR CDE
         BO    LOADPRT1            YES--GET ADDR OF EXTENT LIST FROM
*                                  MAJOR
LOADPRT2 LTR   R2,R2               IS THERE AN EXTENT LIST
         BZ    NOXLST              NO--TELL'EM ABOUT IT
         LA    PREG,4(R2)          ADDR OF NUMB OF RELOC FACTORS
         BRREAD  (PREG)
         L     R3,0(PREG)          LOAD NUMBER OF RELOCATION FACTORS
*                                  TO R3
         CL    R3,XLMAX            IS IT GT MAX                 @Y02006
         BH    XLSTER              YES--DON'T PRINT IT
         LTR   R3,R3               IS IT ZERO
         BZ    XLSTER              YES--ERROR
         LA    R7,8(R2)            ADDR OF FIRST BLOCK LN
         LR    R8,R3               LOAD NUMB TO R8
         SLL   R8,2                MULTIPLY BY 4
         AR    R8,R7               ADDR OF FIRST BLOCK ADDR
LOADLP1  SR    R10,R10             ZERO INDEX REG
         LA    R9,2                LOAD COUNT FOR NUMB OF ENTRIES PER
*                                  LINE
         MVC   ADDR+97(3),STAID    MOVE 'STA' TO BUFFER         @Y02006
         MVC   ADDR+110(2),LNID    MOVE 'LN' TO BUFFER          @Y02006
LOADLP2  BRREAD  (R8)              ADDR OF BLOCK ADDR IN REG 8
         LA    R4,ADDR+101(R10)    ADDR OF WHERE TO PUT STA     @Y02006
         L     R15,AADRCNVT ADDR OF 3 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT STARTING ADDRESS
         LA    R4,ADDR+113(R10)    ADDR OF WHERE TO PUT LN      @Y02006
         LR    PREG,R7             ADDR OF BLOCK LN
         BRREAD  (R7)
         L     R15,AADRCNVT        ADDR OF 3 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT LENGTH OF BLOCK
         LA    R7,4(R7)            INCR LENGTH ADDR
         LA    R8,4(R8)            INCR BLOCK ADDR ADDR
         LA    R10,25              LOAD INDEX FOR SECOND ENTRY ON LINE
         BCT   R3,LOADPRT3         LOOP FOR NO OR REL FACTORS
         B     LOADPRT5            DONE--PRINT LINE
         SPACE
LOADPRT3 BRWRITE 1                 LINE FULL--PRINT IT           Y01980
         B     LOADLP1             START NEW LINE
         SPACE
NOXLST   MVC   ADDR+97(L'NXLSTMSG),NXLSTMSG MOVE MESSAGE        @Y02006
         B     LOADPRT5            PRINT THE CDE
XLSTER   MVC   ADDR+97(20),XLSTEMSG MOVE ERROR MSG TO BUFFER    @Y02006
         SPACE
LOADPRT5 BRWRITE 1                 PRINT THE CDE
         TM    LDSW,JBPQPRT        IS JOB PACK QUEUE BEING PRINTED
         BO    JPQPRT              YES--CONTINUE WITH NEXT CDE
LOADPRT6 L     R2,NXTLLE           LOAD ADDR OF NEXT LOAD LIST ELEMENT
         LA    R2,0(R2)            CLEAR HIGH ORDER BYTE
         LTR   R2,R2               ARE WE DONE                  @Y02006
         BZ    LOADDONE            YES, DO JPQ                  @Y02006
         L     R10,LOOPCTR         RESTORE COUNTER REGISTER     SA53335
         BCT   R10,RESTCTR1        GO UPDATE COUNTER & CONTINUE SA53335
* IF FALL THROUGH POSSIBLE LOOP - ISSUE COMMENT                 SA53335
         SPACE
PLLP     MVC   ADDR(L'LLLOOPMG),LLLOOPMG MOVE MSG TO BUFFER     @Y02006
         B     LOOPPRT1            PRINT LOAD LIST LOOP MESSAGE SA53335
RESTCTR1 ST    R10,LOOPCTR         UPDATE COUNTER SAVE AREA     SA53335
         B     LOADLP3             LOOP THROUGH ENTIRE LOAD LST SA53335
RESTCTR2 ST    R10,LOOPCTR         UPDATE COUNTER SAVE AREA     SA53335
         B     LOADPRT8            FORMAT JOB PACK QUEUE        SA53335
         SPACE
LOADPRT1 NI    CDEATR1,XFF-MINCDE  RESET MINOR FLAG
         B     LOADPRT7            CONTINUE
         SPACE 2
***********************************************************************
*                                                                     *
*   INTERFACE ROUTINE FOR JOB PACK QUEUE PRINTING                     *
*                                                                     *
***********************************************************************
         SPACE
JPQPRTA  LH    R10,JPQMAX          LOOP CONTROL FOR JOB PACK Q  @Y02006
         LA    R10,1(R10)          ADD 1 TO CTR                 @Y02006
         ST    R10,LOOPCTR         SAVE COUNTER                 SA53335
JPQPRT   L     R2,NXTCDE           LOAD ADDR OF NEXT CDE ON Q
         LA    R2,0(R2)            CLEAR HIGH ORDER BYTE
         LTR   R2,R2               TEST FOR END OF Q
         BZ    LOADDONE            ALL DONE IF 0
         LA    PREG,NXTCDE         POINT PREG TO CDE ADDRESS
         L     R10,LOOPCTR         RESTORE COUNT REG            SA53335
         BCT   R10,RESTCTR2        GO UPDATE CTR AND CONTINUE   SA53335
         OI    LDSW,GOTONE         NO XTRA MSG IF LIMIT=0       @Y02006
         SPACE
* IF FALL THROUGH POSSIBLE LOOP IN JOB PACK QUEUE - ISSUE COMMENT
         MVC   ADDR(L'JPLOOPMG),JPLOOPMG PUT MESSAGE IN BUFFER  SA53335
LOOPPRT1 BRWRITE 1                 PRINT LOOP MESSAGE           SA53335
         B     LOADDONE            TERMINATE CURRENT PROCESS    SA53335
         EJECT
***********************************************************************
*                                                                     *
*   DONE WITH LOAD LIST                                               *
*                                                                     *
***********************************************************************
         SPACE
LOADDONE TM    LDSW,JBPQPRT        HAS THE JOB PACK Q BEEN PRINTED
         BO    LDDONE2             BR IF IT HAS
         TM    LDSW,GOTONE         WAS ANYTHING ON LOAD LIST
         BO    LDDONE1             BR IF THERE WAS
         MVC   ADDR(24),NOLLEMSG   MOVE MSG TO BUFFER
         BRWRITE 1                 PRINT NO LLE MESSAGE
LDDONE1  BRWRITE 2                 SPACE 2 LINES
         OI    LDSW,JBPQPRT        INDICATE PRINTING JOB PACK Q
         MVC   ADDR(14),JPQTTL     MOVE JOB PACK Q TITLE TO BUF
         BRWRITE 2                 PRINT JOB PACK Q TITLE
         NI    LDSW,XFF-GOTONE     RESET GOTONE SW
         L     R2,LDTCBSV          RESTORE TCB ADDRESS
         LA    PREG,JPQPTR(R2)     ADDR OF JOB PACK Q PTR
         BRREAD  (PREG)
         MVC   NXTCDE(4),0(PREG)   SAVE ADDR OF FIRST CDE IN Q
         B     JPQPRTA             PRINT JOB PACK CDES          SA53335
         SPACE
LDDONE2  TM    LDSW,GOTONE         WAS ANYTHING ON JOB PACK Q
         BO    LDDONE3             YES--RETURN
         MVC   ADDR(19),NOJPQMSG   NO--MOVE MESSAGE TO BUFFER
         BRWRITE 1                 PRINT NO JOB PACK Q MSG
LDDONE3  BRWRITE 2                 SPACE 2 LINES
LDDONED  MVC   ERRADDR,LDERSV      RESTORE PREVIOUS ERROR ROUTINE ADDR
         L     R13,4(R13)          GET CALLER'S SAVE AREA ADDR
         LM    R14,R12,12(R13)     RESTORE HIS REGS
         BR    RETREG              RETURN TO FORMAT ROUTINE
         EJECT
***********************************************************************
*                                                                     *
*   THIS ROUTINE CONVERTS 1 BYTE TO PRINTABLE HEX                     *
*                                                                     *
***********************************************************************
         SPACE
BYTECNVT LR    R0,R1               SAVE R1 OVER HEXCNVT
         HEXCNVT (4),(5),1         CONVERT ONE BYTE
         LR    R1,R0               RESTORE R1
         BR    R9                  RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*   THIS ROUTINE CONVERTS 2 BYTES TO PRINTABLE HEX                    *
*                                                                     *
***********************************************************************
TWOBYTCV LR    R0,R1               SAVE R1 OVER HEXCNVT         @Y02006
         HEXCNVT (4),(5),2         CONVERT 2 BYTES              @Y02006
         LR    R1,R0               RESTORE R1                   @Y02006
         BR    R9                  RETURN TO CALLER             @Y02006
         EJECT                                                  @Y02006
***********************************************************************
*                                                                     *
*   ERROR WHILE PRINTING LOAD LIST                                    *
*                                                                     *
***********************************************************************
         SPACE
         DROP  BASE1
         USING LOADERR,R15
LOADERR  LA    R13,LOADSAVE        GET MSS PRINT'S SAVE AREA ADDRESS
         LM    R14,R12,12(R13)     RESTORE OUR REGS
         DROP  R15
         USING LOADBASE,BASE1      SHIFT TO BASE1 - REG 11
         L     BUFREG,CURBUF       RELOAD BUFFER ADDR
         BRWRITE 1                 SPACE A LINE
         TM    LDSW,JBPQPRT        TEST FOR PRINTING JOB PACK Q
         BO    LOADERR1            BR IF I WAS
         MVC   ADDR(18),LDERMSG    MOVE ERROR MSG TO BUFFER
         LA    R9,LDDONE1          IF PRINTING LOAD LIST, RETURN
*                                  TO TRY TO PRINT JOB PACK QUEUE
LOADERRT EQU   *                   TEST FOR 1ST CDE READ       @OZ14113
         TM    LDSW,CDEIND      1ST READ FOR THIS CDE           OZ09681
         BZ    LOADERR2         NO - LOAD LIST ERROR            OZ09681
         MVC   ADDR(L'CDEERRMG),CDEERRMG  MOVE ERROR MSG        OZ09681
         LA    R9,LOADPRT6      ADR OF GET NEXT LLE             OZ09681
         LA    R4,ADDR+21       WHERE TO PUT ADDRESS            OZ09681
         LA    R1,CDEADDR          ADDRESS OF DATA TO CONVERT  @OZ14113
         L     R15,AADRCNVT     3 BYTE CONVERT ROUTINE          OZ09681
         BALR  RETREG,R15       CONVERT ADDRESS                 OZ09681
         NI    LDSW,XFF-CDEIND  TURN OFF FOR NEXT TIME          OZ09681
         B     LOADERR2            BR AROUND
LOADERR1 MVC   ADDR(23),JPQERMSG   MOVE JOB PACK Q ERROR MSG
         LA    R9,LDDONE3          IF PRINTING JOB PACK QUEUE,
*                                  RETURN TO EXIT
         B     LOADERRT            CHECK FOR 1ST READ          @OZ14113
LOADERR2 BRWRITE 1                 PRINT ERROR MSG
         NI    SWB,XFF-FMTERR-IOERR RESET ERROR SWITCHES
         BR    R9                  RETURN ON R9 SET ABOVE
         EJECT
***********************************************************************
*                                                                     *
*   SAVE AREA AND CONSTANTS FOR LOADPRT ROUTINE                       *
*                                                                     *
***********************************************************************
         SPACE
LOADSAVE DC    18F'0'              MSS PRINT'S SAVE AREA
LDERSV   DC    F'0'
NXTLLE   DC    F'0'
NXTCDE   DC    F'0'                PTR TO NEXT CDE AND CDE ATR1
LDTCBSV  DC    F'0'                SAVE AREA FOR TCB ADDRESS
LOOPCTR  DS    F                   LOOP COUNTER                 SA53335
         SPACE
LOADRESP DC    F'00'                                            @Y02006
CDEATR1  DC    X'00'                                            @Y02006
LDSW     DC    X'00'
CDEID    DC    C'CDE'
NMID     DC    C'NM'
USEID    DC    C'USE'
RESPID   DC    C'RESP'
SYSCTID  DC    C'SYSCT'                                         @Y02006
EPAID    DC    C'EPA'
ATR1ID   DC    C'ATR1'
ATR2ID   DC    C'ATR2'                                           Y01980
STAID    DC    C'STA'
LNID     DC    C'LN'
NA       DC    C'NA'
LDTITLE  DC    C'LOAD LIST'
NOLLEMSG DC    C'NO ELEMENTS ON LOAD LIST'
LDERMSG  DC    C'ERROR IN LOAD LIST'
CDEERRMG DC    C'UNABLE TO ACCESS CDE XXXXXX'                   OZ09681
JPQTTL   DC    C'JOB PACK QUEUE'
NOJPQMSG DC    C'NOTHING IN JOB PACK'
JPQERMSG DC    C'ERROR IN JOB PACK QUEUE'
XLSTEMSG DC    C'ERROR IN EXTENT LIST'
NXLSTMSG DC    C'NO EXTENT LIST'
LLLOOPMG DC    C'INFINITE LOOP IN LOAD LIST'                    SA53335
JPLOOPMG DC    C'INFINITE LOOP IN JOB PACK QUEUE'               SA53335
CDEADDR  DS    F                   HOLD ADDR FOR CDE ERR MSG   @OZ14113
FLDPCH   DC    22F'0'              PATCH AREA                    X01980
         DROP  BUFREG,BASE1,COMBASE
         EJECT
AMDPRFDB CSECT
         SPACE
***********************************************************************
*                     *** AMDPRFDB - DEB PRINT ***                    *
*                                                                     *
* STATUS--OS/VS2 RELEASE 2.0                                          *
*                                                                     *
* FUNCTION--                                                          *
*    THIS ROUTINE FORMATS THE DEB'S ON THE DEB CHAIN OF THE TCB       *
*    BEING FORMATTED.                                                 *
*                                                                     *
* ENTRY POINTS--                                                      *
*    AMDPRFDB IS THE ONLY ENTRY.  CONTROL IS RECEIVED FROM AMDPRFSC.  *
*    STANDARD SUBROUTINE LINKAGE USED.                                *
*                                                                     *
* INPUTS--                                                            *
*         REGISTER 0 - ASID OF STORAGE CONTAINING TCB TO BE FORMATTED *
*         REGISTER 2 - TCB ADDRESS OF DEB CHAIN TO BE FORMATTED       *
*         REGISTER 12 - ADDRESS OF COMMON AREA                        *
*                                                                     *
* OUTPUT--                                                            *
*    WRITES FORMATTED DEB CHAIN                                       *
*    WRITES MESSAGES 'TASK HAS NO OPEN DATA SETS' OR 'INFINITE LOOP   *
*    IN DEB CHAIN' IF MORE THAN 200 DEB'S IN DEB CHAIN.               *
*    WRITES ERROR MESSAGE 'ERROR IN DEB CHAIN'                        *
*                         'ERROR FORMATTING DEB EXTENSION'            *
*                         'UNABLE TO ACCESS AVT - WILL TRY TO CONTINUE'
*                                                                     *
* EXTERNAL REFERENCES--                                               *
*         BRREAD - TO OBTAIN DATA FROM THE INPUT DUMP.                *
*         BRWRITE - TO WRITE DATA TO THE 'PRINTER' DATA SET.          *
*         WRDCNVT - FROM AN ADDRESS IN COMMON, TO CONVERT 4 BYTES     *
*                   TO PRINTABLE HEX.                                 *
*         ADRCNVT - FROM ADDRESS IN COMMON, TO CONVERT 3 BYTES TO     *
*                   PRINTABLE HEX.                                    *
*                                                                     *
* EXITS,NORMAL--                                                      *
*    RETURN TO CALLER THROUGH STANDARD LINKAGE.                       *
*                                                                     *
* EXITS,ERROR--                                                       *
*    SAME AS NORMAL EXIT                                              *
*                                                                     *
* TABLES/WORK AREAS-- NONE                                            *
*                                                                     *
* ATTRIBUTES-- REUSABLE                                               *
*                                                                     *
* CHARACTER CODE DEPENDENCY-- NONE                                    *
*                                                                     *
* NOTES--                                                             *
*   BRREAD ERROR HANDLER:  IF A DEB CANNOT BE READ FROM THE INPUT     *
*   DUMP, A MESSAGE IS PRINTED AND CONTROL RETURNS TO AMDPRFSC.       *
*                                                                     *
***********************************************************************
         SPACE
DEBX     EQU   32                                               @Y02006
DEBAVT   EQU   16               AVT INDICATOR                   OZ09676
DADEV    EQU   64
DEBFND   EQU   128
TCBDEB   EQU   8
ISAMTST  EQU   X'80'
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         BALR  BASE1,0             ESTABLISH REG 11 AS BASE
         USING DEBBASE,BASE1
DEBBASE  LA    R3,DEBSAVE          SAVE AREA CHAINING
         ST    R13,DEBSAVE+4
         ST    R3,8(R13)
         LR    R13,R3
         SPACE
         USING COMMON,COMBASE
         SPACE
         MVI   DEBSW,0             CLEAR DEB SWITCH
         XC    DEBCNT,DEBCNT       ZERO DEB COUNT
         MVC   DEBERSV,ERRADDR     SAVE PREVIOUS ERROR ROUTINE ADDR
         LA    R15,DEBERR          ADDR OF DEBPRNT ERROR ROUTINE
         ST    R15,ERRADDR         STORE IN ERROR ROUTINE ADDR WORD
         L     BUFREG,CURBUF       LOAD BUFFER ADDR
         USING OUTBUF,BUFREG
         LA    PREG,TCBDEB(R2)     ADDR OF DEB CHAIN PTR
DEBPRNT8 BRREAD  (PREG),DATA,ASID=(R0)                          @Y02006
         L     R2,0(PREG)          LOAD DEB CHAIN PTR
         LA    R2,0(R2)            CLEAR POSSIBLE HIGH BYTE
         LTR   R2,R2               IS THERE A DEB
         BZ    NODEB               NO--ALL DONE
         LH    R3,DEBCNT           LOAD DEBCOUNT                @Y02006
         AH    R3,ONEA             ADD ONE TO IT                @Y02006
         CH    R3,DEBMAX           IS IT GT MAX                 @Y02006
         BH    DEBINF              BR IF IT IS                  @Y02006
         STH   R3,DEBCNT           STORE INCREMENTED COUNT BACK @Y02006
         OI    DEBSW,DEBFND        INDICATE DEB FOUND
         MVC   ADDR(3),DEBID       MOVE 'DEB' TO BUFFER
         LA    R4,ADDR+4           ADDR OF WHERE TO PUT DEB ADDR
         L     R15,AADRCNVT        ADDR OF 3 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT DEB ADDR
         MVC   ADDR+13(90),APPID   MOVE APPENDAGE IDS TO BUFFER
         LA    PREG,28(R2)         ADDR OF APP VEC TAB
         BRREAD  (PREG)
         L     R3,0(PREG)          LOAD ADDR OF I/O APP VEC TAB
         LA    R3,0(R3)            CLEAR HIGH ORDER BYTE
         LTR   R3,R3               IS IT ZERO
         BZ    DEBPRNT1            YES--NOTHING TO PRINT
         OI    DEBSW,DEBAVT     INDICATE AVT PROCESSING         OZ09676
         BRREAD  (R3)              ADDR OF END OF EXT APP ADDR IN R 3
         LA    R4,ADDR+33          ADDR OF WHERE TO PUT END OF EXT APP
*                                  ADDRESS                       X01980
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT RTN    X01980
         BALR  RETREG,R15          CONVERT END OF EXT APP ADDR
         LA    PREG,4(R3)          ADDR OF SIO APP ADDR
         BRREAD  (PREG)
         LA    R4,ADDR+49          ADDR OF WHERE TO PUT SIOA ADDRX01980
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT RTN    X01980
         BALR  RETREG,R15          CONVERT SIO APP ADDR
         LA    PREG,8(R3)          ADDR OF PCI APP ADDR
         BRREAD  (PREG)
         LA    R4,ADDR+65          ADDR OF WHERE TO PUT PCI APP ADDR
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT RTN    X01980
         BALR  RETREG,R15          CONVERT PCI APP ADDR
         LA    PREG,12(R3)         ADDR OF CH END APP ADDR
         BRREAD  (PREG)
         LA    R4,ADDR+81          ADDR OF WHERE TO PUT CH END APP ADDR
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT RTN    X01980
         BALR  RETREG,R15          CONVERT CH END APP ADDR
         LA    PREG,16(R3)         ADDR OF AB END APP ADDR
         BRREAD  (PREG)
         LA    R4,ADDR+97          ADDR OF WHERE TO PUT AB END APP ADDR
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT RTN    X01980
         BALR  RETREG,R15          CONVERT AB END APP ADDR
DEBNOAVT NI    DEBSW,XFF-DEBAVT AVT PROCESSING DONE             OZ09676
DEBPRNT1 BRWRITE 1                 PRINT LINE OF APP ADDRS
         MVC   ADDR+13(3),PFXID    MOVE 'PFX' TO BUFFER
         LR    R3,R2               DEB ADDR TO R3
         SH    R3,SIXTEEN          ADDR OF DEB PREFIX IN R3
         BNP   DEBERR1             ERROR IF ZERO OR NEG          A41628
         LA    R7,4                LOAD COUNT TO R7
         LA    R4,ADDR+17          ADDR OF WHERE TO PUT FIRST WORD OF
*                                  PREFIX
DEBPRNT2 BRREAD (R3)               PREFIX ADDR IN REG 3
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT WORD OF PREFIX
         AH    R4,ELEVEN           INCR WHERE-TO-PUT-IT ADDR
         LA    R3,4(R3)            INCR PREFIX ADDRESS
         BCT   R7,DEBPRNT2         LOOP FOR 4 WORDS
         BRWRITE 1                 PRINT LINE OF DEB PREFIX
         MVC   ADDR+13(3),DTCBID   MOVE 'TCB' TO BUFFER
         BRREAD  (R2)              DEB ADDR IN REG 2
         LA    R4,ADDR+17          ADDR OF WHERE TO PUT TCB ADDR
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT TCB ADDR
         MVC   ADDR+28(4),NDEBID   MOVE 'NDEB' TO BUFFER
         LA    PREG,4(R2)          ADDR OF NEXT DEB PTR
         BRREAD  (PREG)
         LA    R4,ADDR+33          ADDR OF WHERE TO PUT NXT DEB ADDR
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT NXT DEB ADDR
         MVC   ADDR+44(4),IRBAID   MOVE 'IRBA' TO BUFFER        @Y02006
         LA    PREG,8(R2)          ADDR OF ASYN EXIT ADDR
         BRREAD  (PREG)
         LA    R4,ADDR+49          ADDR OF WHERE TO PUT ASYN EXIT ADDR
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT ASYN EXIT ADDR
         MVC   ADDR+60(4),FLGSID   MOVE 'FLGS' TO BUFFER        @Y02006
         LA    PREG,12(R2)         ADDR OF SYSTEM IOB PURGE CHAIN PTR
         BRREAD  (PREG)
         MVC   DEBFLG(1),2(PREG)   SAVE FLAG BYTE               @Y02006
         LA    R4,ADDR+65          WHERE IT GOES
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          COMVERT SYS PRGE CH ADDR
         MVC   ADDR+76(4),UPRGID   MOVE 'UPRG' TO BUFFER
         LA    PREG,16(R2)         ADDR OF USER IOB PURGE CHAIN PTR
         BRREAD  (PREG)
         MVC   XTNTNO(1),0(PREG)   SAVE EXTENT NUMBER
         LA    R4,ADDR+81          ADDR OF WHERE TO PUT IT
         L     R15,AWRDCNVT
         BALR  RETREG,R15          CONVERT USER PRG CH ADDR
         MVC   ADDR+92(4),PLSTID   MOVE 'PLST' TO BUFFER
         LA    PREG,20(R2)         ADDR OF PARAMETER LIST FOR PURGE ECB
         BRREAD  (PREG)
         LA    R4,ADDR+97          ADDR OF WHERE PARM LIST PTR GOES
         L     R15,AWRDCNVT
         BALR  RETREG,R15          CONVERT PARM LIST ADDR
         MVC   ADDR+108(3),DCBID   MOVE 'DCB' TO BUFFER
         LA    PREG,24(R2)         ADDR OF DCB PTR
         BRREAD  (PREG)
         MVC   DEBDCB(4),0(PREG)   SAVE DCB ADDR                  M1748
         LA    R4,ADDR+112         ADDR OF WHERE IT GOES
         L     R15,AWRDCNVT
         BALR  RETREG,R15          CONVERT DCB ADDR
         BRWRITE 1                 PRINT THIS LINE OF DEB
         MVC   ADDR+13(3),AVTID    MOVE 'AVT' TO BUFFER
         LA    PREG,28(R2)         ADDR OF I/O APP VECT TABLE ADDR
         BRREAD  (PREG)
         TM    0(PREG),X'04'       TEST FOR DA
         BZ    DEBPRNT3            BR IF NOT DA
         OI    DEBSW,DADEV         SET DA DEVICE FLAG IF IT IS
DEBPRNT3 LA    R4,ADDR+17          ADDR OF WHERE TO PUT APP VECT TAB
*                                  ADDRESS
         L     R15,AWRDCNVT
         BALR  RETREG,R15          CONVERT I/O APP VECTOR TABLE ADDR
         BRWRITE 1                 PRINT LINE
         SR    R7,R7               CLEAR IC REG
         IC    R7,XTNTNO           LOAD NO OF EXTENTS
XNTTEST  LTR   R7,R7               TEST FOR ZERO
         BNP   DEBDONE             ZERO--NO EXTENTS TO PRINT
         TM    DEBSW,DADEV         IS THIS DEB FOR DA
         BO    DEBPRNT5            YES--4 WORD EXTENTS
         MVC   ADDR+14(6),OPUCBID  NO--1 WORD EXTENTS...MOVE 'OP-UCB'
*                                  TO BUFFER
         BRWRITE 1                 PRINT LINE
         LA    R3,32(R2)           ADDR OF FIRST EXTENT
         LA    R4,ADDR+13          ADDR OF WHERE TO PUT EXTENTS
DEBPRNT4 BRREAD (R3)
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT EXTENT
         BRWRITE 1                 PRINT EXTENT
         LA    R3,4(R3)            INCR TO NEXT EXTENT
         BCT   R7,DEBPRNT4         LOOP FOR NUMB OF EXTENTS
         B     DEBDONE             ALL DONE WITH DEB
         SPACE 3
***********************************************************************
*                                                                     *
*   PRINT 4 WORD EXTENTS (DIRECT ACCESS)                              *
*                                                                     *
***********************************************************************
         SPACE
DEBPRNT5 CLI   XTNTNO,X'01'        HOW MANY EXTENTS              Y01980
         BNH   NOTISAM             IF ONE OR LESS--NOT ISAM      Y01980
         LA    PREG,32(R2)         POINT TO FIRST WORD OF DEVICE Y01980
*                                  SECTION (UCB ADDR IF NOT ISAM)Y01980
         ST    PREG,DEBLO          SAVE ADDR OF DEVICE SECTION   Y01980
         LR    R9,R7               GET NUMBER OF EXTENTS         Y01980
         SLL   R9,4                MULTIPLY BY 16                Y01980
         LA    R9,0(PREG,R9)       GET ADDR OF END OF DEVICE SEC Y01980
         ST    R9,DEBHI            SAVE ENDING ADDR              Y01980
         BRREAD (PREG)             READ FIRST WD OF DEVICE SEC   Y01980
         NC    1(3,PREG),1(PREG)   TEST FOR ZERO PTR             Y01980
         BZ    ISAM                IF ZERO ASSUME ISAM DEB       Y01980
*                                  (UCB PTR NOT ZERO)
         CLC   1(3,PREG),DEBLO+1   DOES NON ZERO ADDR POINT INTO Y01980
*                                  DEVICE SECTION--HENCE ISAM
         BL    NOTISAM             IF LOWER MUST BE A UCB        Y01980
         CLC   1(3,PREG),DEBHI+1   TEST END OF DEVICE SECTION    Y01980
         BH    NOTISAM             IF HIGHER ITS NOT ISAM        Y01980
ISAM     OI    ISAMSW,ISAMTST      INDICATE ISAM DEB             Y01980
         BCTR  R7,0                DEREMENT EXTENT COUNT FOR ISAMY01980
         B     HAVEDA              CONTINUE WITH DA EXTENTS      Y01980
NOTISAM  CLI   XTNTNO,X'01'        HOW MANY EXTENTS              Y01980
         BH    HAVEDA              IF MORE THAN ONE ITS DA        M1748
         LA    R4,3                SET TO THREE FOR LOOP CNT      M1748
         LA    R3,36(R2)           ADDR OF FIRST DCB IF 3525      M1748
DCBREAD  BRREAD (R3)               READ DCB ADDR                  M1748
         CLC   1(3,PREG),DEBDCB+1  ARE DCB'S THE SAME             M1748
         BE    HAVE3525            YES--DEVICE SECTION IS 3525    M1748
         LA    R3,4(R3)            POINT TO NEXT DCB ADDR         M1748
         BCT   R4,DCBREAD          LOOP TO READ 3 ADDR            M1748
HAVEDA   MVC   ADDR+14(36),FMUCBID MOVE IDS TO BUFFER             M1748
         BRWRITE 1                 PRINT EXTENT IDS
         LA    R3,32(R2)           ADDR OF FIRST EXTENT
         TM    ISAMSW,ISAMTST      IS THIS AN ISAM DATA SET
         BZ    DEBPRNT7            NO--CONTINUE
         LA    R3,48(R2)           YES--SKIP EXTENT 0
DEBPRNT7 LA    R4,ADDR+13          ADDR OF WHERE TO PUT FIRST WORD OF
*                                  EXTENT
         BRREAD  (R3)
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT FILE MASK AND UCB ADDR
         LA    R8,3                LOAD COUNT TO R3
         LA    R9,DEBWORK          ADDR OF 3 WORD WORK AREA
DEBPRNT6 LA    R3,4(R3)            ICNR TO NEXT WORD OF EXTENT
         BRREAD  (R3)              EXTENT WORD ADDR IN REG 3
         MVC   0(4,R9),0(PREG)     MOVE 4 BYTES TO WORK AREA
         LA    R9,4(R9)            INCR WORK AREA ADDR
         BCT   R8,DEBPRNT6         LOOP FOR 3 WORDS
         LA    PREG,DEBWORK+2      ADDR OF STARTING CCHH OF EXTENT
         LA    R4,ADDR+24          ADDR OF WHERE IT GOES
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT STARTING CCHH OF EXTENT
         LA    PREG,DEBWORK+6      ADDR OF ENDING CCHH OF EXTENT
         LA    R4,ADDR+35          ADDR OF WHERE IT GOES
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT ENDING CCHH OF EXTENT
         HEXCNVT ADDR+46,DEBWORK+10,2 CONVERT NUMB OF TRACKS FOR THIS
*                                  EXTENT
         BRWRITE 1                 PRINT EXTENT
         LA    R3,4(R3)            INCR TO NEXT EXTENT
         BCT   R7,DEBPRNT7         LOOP FOR NUMB OF EXTENTS
         B     DEBDONE             DONE WITH DEB                  M1748
         SPACE
***********************************************************************
*                                                                     *
*  PRINT 4 WORD EXTENT FOR 3525                                       *
*                                                                     *
***********************************************************************
         SPACE
HAVE3525 MVC   ADDR+15(38),H3525 MOVE HEADING TO PRINT            M1748
         BRWRITE 1                 WRITE HEADING FOR 3525         M1748
         LA    R3,32(R2)           GET ADDR OF DEVICE SECTION     M1748
         ST    R3,F3525D           SET IN FORMAT PATTERN          M1748
         LA    PREG,F3525          GET ADDR OF FMTPTRN            M1748
         L     R15,AFMTLINE        ADDR OF FORMAT RTN             M1748
         BALR  RETREG,R15          GO FORMAT 3525 LINE            M1748
         BRWRITE 1                 WRITE 3525 LINE                M1748
         B     DEBDONE             DONE WITH DEB                  M1748
         SPACE
***********************************************************************
*                                                                     *
*   DONE WITH THIS DEB...LOOK FOR ANOTHER                             *
*                                                                     *
***********************************************************************
         SPACE
DEBDONE  TM    DEBFLG,X'01'        DOES DEB EXTN EXIST          @Y02006
         BO    FMTDEBX             YES, GO FORMAT IT            @Y02006
DEBDONE1 NI    DEBSW,XFF-DADEV     RESET DIRECT ACCESS FLAG     @Y02006
         NI    ISAMSW,XFF-ISAMTST  RESET ISAM SW
         BRWRITE 1                 SPACE A LINE
         LA    PREG,4(R2)          ADDR OF NEXT DEB PTR
         B     DEBPRNT8            LOOP THROUGH DEB CHAIN
         SPACE 2
***********************************************************************
*                                                                     *
*     FORMAT DEB EXTENSION                                            *
*                                                                     *
***********************************************************************
         SPACE 1
FMTDEBX  LR    PREG,R2             DEB ADDR TO PREG             @Y02006
         SH    PREG,EIGHT          BACK UP TO EXTN PTR          @Y02006
         OI    DEBSW,DEBX          INDICATE FMT DEBXTN          @Y02006
         BRREAD (PREG)                                          @Y02006
         MVC   DBXLN2A(4),0(PREG)  MOVE ADDR TO FMTPTRN         @Y02006
         LA    PREG,DBXLN1         ADDR OF PATTERN FOR LINE 1   @Y02006
         L     R15,AFMTLINE        ADDR OF FMT RTN              @Y02006
         BALR  R14,R15             FORMAT LINE                  @Y02006
         BRWRITE 1                 PRINT LINE                   @Y02006
         LA    PREG,DBXLN2         DO SAME FOR LINE 2           @Y02006
         L     R15,AFMTLINE                                     @Y02006
         BALR  R14,R15                                          @Y02006
FMTDEBX1 BRWRITE 1                                              @Y02006
         NI    DEBSW,XFF-DEBX      END OF DEBXTN                @Y02006
         B     DEBDONE1            GO GET NEXT DEB              @Y02006
         SPACE 2
***********************************************************************
*                                                                     *
*   DONE WITH DEB CHAIN...RETURN TO FORMAT ROUTINE                    *
*                                                                     *
***********************************************************************
         SPACE
NODEB    TM    DEBSW,DEBFND        WAS THERE A DEB
         BZ    NODEB1              NO--WRITE A MSG TO THAT AFFECT
         BRWRITE 1                 SPACE ANOUTHER LINE
NODEB2   MVC   ERRADDR,DEBERSV     RESTORE PREVIOUS ERROR ROUTINE ADDR
         L     R13,4(R13)          POINT TO CALLER'S SAVE AREA
         LM    R14,R12,12(R13)     RESTORE CALLER'S REGISTERS
         BR    RETREG              RETURN TO FORMAT ROUTINE
         SPACE
NODEB1   MVC   ADDR(26),NODEBMSG   MOVE MSG TO BUFFER
NODEB3   BRWRITE 3                 PRINT MSG AND SPACE 3 LINES
         TM    DEBSW,DEBAVT     AVT PROCESSING?                 OZ09676
         BO    DEBNOAVT         YES - TRY TO CONTINUE           OZ09676
         B     NODEB2              RETURN TO FORMAT
         SPACE 2
***********************************************************************
*                                                                     *
*   GREATER THAN 200 DEBS...CONSIDER IT AN INFINITE LOOP              *
*                                                                     *
***********************************************************************
         SPACE
DEBINF   MVC   ADDR(26),DEBIFMSG   MOVE INFINITE LOOP MSG TO BUFFER
         B     NODEB3              PRINT MSG AND RETURN TO FORMAT
         EJECT
***********************************************************************
*                                                                     *
*   ERROR IN DEB CHAIN...WRITE MSG AND RETURN TO FORMAT               *
*                                                                     *
***********************************************************************
         SPACE
         DROP  BASE1
         USING DEBERR,R15
DEBERR   LA    R13,DEBSAVE         POINT TO DEB PRINT'S SAVE AREA
         LM    R14,R12,12(R13)     RESTORE OUR REGS
         DROP  R15
         USING DEBBASE,BASE1       SHIFT BACK TO REG 11 AS BASE
         TM    DEBSW,DEBX          WAS DEBXTN BEING DONE        @Y02006
         BNO   DEBERR1             NO, QUIT                     @Y02006
         BRWRITE 1                 SPACE A LINE                 @Y02006
         MVC   ADDR(L'DEBXRMG),DEBXRMG MOVE MSG TO BUFFER       @Y02006
         B     FMTDEBX1            CONTINUE                     @Y02006
DEBERR1  L     BUFREG,CURBUF       RELOAD BUFFER ADDR            A41628
         BRWRITE 1                 SPACE A LINE
         MVC   ADDR(18),DEBERMSG   MOVE ERROR MSG TO BUFFER
         NI    SWB,XFF-FMTERR-IOERR RESET ERROR SWITCHES
         TM    DEBSW,DEBAVT     AVT PROCESSING?                 OZ09676
         BNO   NODEB3           NO - RETURN TO FORMAT           OZ09676
         MVC   ADDR(43),DEBAVTMG  SET MESSAGE                   OZ09676
         B     NODEB3              RETURN TO FORMAT
         EJECT
***********************************************************************
*                                                                     *
*   SAVE AREA AND CONSTANTS FOR DEBPRNT ROUTINE                       *
*                                                                     *
***********************************************************************
         SPACE
DEBSAVE  DC    18F'0'              DEB PRINT'S SAVE AREA
DEBWORK  DC    3F'0'
DEBERSV  DC    F'0'
DEBCNT   DC    H'0'
DEBFLG   DC    X'00'                                            @Y02006
DEBSW    DC    X'00'
XTNTNO   DC    X'00'               NUMB OF EXTENTS FOR CURRENT DEB
ISAMSW   DC    X'00'               ISAM DATA SET IF X'80'
DEBLO    DC    A(0)                BEGIN ADDR OF BDE DEVICE SEC  Y01980
DEBHI    DC    A(0)                END ADDR OF DEB DEVICE SECTIONY01980
DEBDCB   DC    F'0'                DCB ADDR SAVE                  M1748
H3525    DC    C'UCB       RDRDCB     PCHDCB     WTRDCB'          M1748
F3525    FMTPTRN (DTA,DTAP),,4,,13,,(F3525D,0)                    M1748
         FMTPTRN (DTA),,4,,24                                     M1748
         FMTPTRN (DTA),,4,,35                                     M1748
         FMTPTRN (DTA),,4,,46,,,LAST                              M1748
DBXLN1   FMTPTRN (DTA,DTAP,LBL,LBLP,DTAC),6,3,14,21,(DBXID),(DBXLN2A+1)*
               ,LAST                                            @Y02006
DBXLN2   FMTPTRN (DTA,DTAP,LBL),2,2,13,16,,(DBXLN2A,0)          @Y02006
         FMTPTRN (DTA,LBL),4,2,23,28                            @Y02006
         FMTPTRN (DTA,LBL),4,4,35,40                            @Y02006
         FMTPTRN (DTA,LBL),4,4,51,56                            @Y02006
         FMTPTRN (DTA,LBL),3,4,67,71                            @Y02006
         FMTPTRN (DTA,LBL),5,2,82,88                            @Y02006
         FMTPTRN (DTA,LBL),4,2,95,100                           @Y02006
         FMTPTRN (DTA,LBL),4,4,107,112,,,LAST                   @Y02006
DBXID    DC    C'DEBXTNLNRESVDSABDCBMDEBDSORGMACRXARG'          @Y02006
DEBID    DC    C'DEB'
APPID    DC    CL15'APPENDAGES'
         DC    CL16'EOEA'                                        X01980
         DC    CL16'SIOA'                                        X01980
         DC    CL16'PCIA'                                        X01980
         DC    CL16'CEA'                                         X01980
         DC    CL16'XCEA'                                        X01980
PFXID    DC    C'PFX'
DTCBID   DC    C'TCB'
NDEBID   DC    C'NDEB'
IRBAID   DC    C'IRBA'                                          @Y02006
FLGSID   DC    C'FLGS'                                          @Y02006
UPRGID   DC    C'UPRG'
PLSTID   DC    C'PLST'
DCBID    DC    C'DCB'
AVTID    DC    C'AVT'
OPUCBID  DC    C'OP-UCB'
FMUCBID  DC    CL11'FM-UCB'
         DC    CL12'START'
         DC    CL9'END'
         DC    CL4'TRKS'
NODEBMSG DC    C'TASK HAS NO OPEN DATA SETS'
DEBERMSG DC    C'ERROR IN DEB CHAIN'
DEBXRMG  DC    C'ERROR FORMATTING DEB EXTENSION'                @Y02006
DEBAVTMG DC    C'UNABLE TO ACCESS AVT - WILL TRY TO CONTINUE'   OZ09676
DEBIFMSG DC    C'INFINITE LOOP IN DEB CHAIN'
FDBPCH   DC    20F'0'              PATCH AREA                    X01980
         DROP  BUFREG,BASE1,COMBASE
         EJECT
AMDPRFIO CSECT
         SPACE
***********************************************************************
*                 *** AMDPRFIO - TIOT PRINT ***                       *
*                                                                     *
* STATUS--OS/VS2 RELEASE 2.0                                          *
*                                                                     *
* FUNCTION--                                                          *
*    THIS ROUTINE PRINTS THE TIOT OF THE TCB BEING FORMATTED.         *
*                                                                     *
* ENTRY POINTS--                                                      *
*    AMDPRFIO IS THE ONLY ENTRY.  CONTROL IS RECEIVED FROM AMDPRFSC.  *
*    STANDARD SUBROUTINE LINKAGE USED.                                *
*                                                                     *
* INPUTS--                                                            *
*         REGISTER 0 - ASID OF STORAGE CONTAINING TCB TO BE FORMATTED *
*         REGISTER 2 - TCB ADDRESS TO BE FORMATTED                    *
*         REGISTER 12 - ADDRESS OF COMMON AREA                        *
*                                                                     *
* OUTPUTS--                                                           *
*    WRITES FORMATTED TIOT                                            *
*    WRITES MESSAGES 'TASK HAS NO TIOT','TIOT FORMATTED ON PAGE XXXX' *
*    WRITES ERROR MESSAGE 'ERROR IN TIOT', 'INVALID TIOT', AND        *
*    'INFINITE LOOP IN TIOT'                                          *
*                                                                     *
* EXTERNAL REFERENCES--                                               *
*         BRREAD - TO OBTAIN DATA FROM THE INPUT DUMP.                *
*         BRWRITE - TO WRITE DATA TO THE 'PRINTER' DATA SET.          *
*         WRDCNVT - FROM AN ADDRESS IN COMMON, TO CONVERT 4 BYTES     *
*                   TO PRINTABLE HEX.                                 *
*         ADRCNVT - FROM ADDRESS IN COMMON, TO CONVERT 3 BYTES TO     *
*                   PRINTABLE HEX.                                    *
*                                                                     *
* EXITS,NORMAL--                                                      *
*    RETURN TO CALLER THROUGH STANDARD LINKAGE.                       *
*                                                                     *
* EXITS,ERROR--                                                       *
*    SAME AS NORMAL EXIT                                              *
*                                                                     *
* TABLES/WORK AREAS-- NONE                                            *
*                                                                     *
* ATTRIBUTES-- REUSABLE                                               *
*                                                                     *
* CHARACTER CODE DEPENDENCY-- NONE                                    *
*                                                                     *
* NOTES--                                                             *
*   BRREAD ERROR HANDLER:  IF THE TIOT CANNOT BE READ FROM THE INPUT  *
*   DUMP, A MESSAGE IS PRINTED AND CONTROL RETURNS TO AMDPRFSC.       *
*                                                                     *
***********************************************************************
         SPACE
TIOTVLD  EQU   128
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         BALR  BASE1,0             ESTABLISH REG 11 AS BASE
         USING TIOTBASE,BASE1
TIOTBASE LA    R3,TIOSAV           SAVE AREA CHAINING
         ST    R13,TIOSAV+4
         ST    R3,8(R13)
         LR    R13,R3
         SPACE
         USING COMMON,COMBASE
         SPACE
         MVC   TIOERSV,ERRADDR     SAVE PREVIOUS ERROR ROUTINE ADDR
         LA    R15,TIOTERR         ADDR OF TIOTPRT ERROR ROUTINE
         ST    R15,ERRADDR         STORE IN ERROR ADDR WORD
         L     BUFREG,CURBUF       LOAD BUFFER ADDR
         USING OUTBUF,BUFREG
         STH   R0,TIOTASID         SAVE ASID                    @Y02006
         LA    PREG,TCBTIOT(R2)    LOAD TIOT PTR ADDR
         BRREAD  (PREG),DATA,ASID=(R0)                          @Y02006
         L     R2,0(PREG)          LOAD TIOT ADDR
         LA    R2,0(R2)            CLEAR POSSIBLE HIGH ORDER BYTE
         LTR   R2,R2               IS THERE A TIOT
         BZ    NOTIOT              NO--WRITE MSG AND RETURN TO FORMAT
         C     R2,TIOTLAST         IS TIOT SAME AS LAST         @Y02006
         BNE   TIOTNEW             NO,BR                        @Y02006
         CLC   TIOTASID(2),ASIDLAST    IS IT SAME ASID          @Y02006
         BNE   TIOTNEW             NO, BR                       @Y02006
         TM    SWF,PAGEOK          IS PAGE NO VALID             @Y02006
         BNO   TIOTNEW             NO, FORMAT TIOT              @Y02006
         MVC   ADDR(L'SAMEMSG),SAMEMSG  MOVE MSG TO BUFFER      @Y02006
         BRWRITE 1                                              @Y02006
         B     TIOTDONE            RETURN TO FORMAT             @Y02006
TIOTNEW  MVC   ASIDLAST(2),TIOTASID  SET NEW LAST ASID          @Y02006
         ST    R2,TIOTLAST         SET NEW LAST TIOT            @Y02006
         NI    SWF,XFF-PAGEOK      NO VALID PAGE YET            @Y02006
         MVC   ADDR(4),TIOTID      MOVE 'TIOT' TO BUFFER
         LA    R4,ADDR+5           ADDR OF WHERE TO PUT TIOT ADDR
         L     R15,AADRCNVT        ADDR OF 3 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT TIOT ADDR
         MVC   ADDR+13(3),JOBID    MOVE 'JOB' TO BUFFER
         BRREAD  (R2)              TIOT ADDR IN REG 2
         MVC   ADDR+17(8),0(PREG)  MOVE JOBNAME TO BUFFER
         LR    R3,PREG             LOAD INDEX REG
         LA    R4,1                LOAD INCREMENT REG
         LA    R5,7(PREG)          LOAD COMPARITOR REG
TIOTLP4  TM    0(R3),X'40'         TEST FOR VALID JOBNAME IN TIOT
         BZ    TIOTPRT2            BR IF FOUND INVALID
         BXLE  R3,R4,TIOTLP4       LOOP TO END OF JOBNAME
         OI    TIOTSW,TIOTVLD      SET VALID TIOT SW
         B     TIOTPRT3            BR AROUND
TIOTPRT2 NI    TIOTSW,XFF-TIOTVLD  RESET VALID TIOT SW
TIOTPRT3 EQU   *
         MVC   ADDR+28(4),STEPID   MOVE 'STEP' TO BUFFER
         LA    PREG,8(R2)          ADDR OF STEP NAME
         BRREAD  (PREG)
         MVC   ADDR+33(8),0(PREG)  MOVE STEPNAME TO BUFFER
         MVC   ADDR+44(4),PROCID   MOVE 'PROC' TO BUFFER
         LA    PREG,16(R2)         ADDR OF PROCEEDURE NAME
         BRREAD  (PREG)
         MVC   ADDR+49(8),0(PREG)  MOVE PROC STEP NAME
         BRWRITE 2                 PRINT TIOT NAMES AND SPACE 2 LINES
         MVC   TIOTPGE(4),TITLEPGE+5 MOVE PAGE NUMBER TO MSG    @Y02006
         OI    SWF,PAGEOK          PAGE IS VALID                @Y02006
         TM    TIOTSW,TIOTVLD      IS TIOT VALID
         BZ    TIONVLD             BR IF NOT VALID TIOT
         LA    R3,24(R2)           ADDR OF FIRST DD ENTRY
         SR    R7,R7               CLEAR IC REG
         BRREAD  (R3)
         IC    R7,0(PREG)          LOAD LENGTH OF DD ENTRY
         LTR   R7,R7               ARE THERE ANY DD ENTRIES
         BZ    NODDEN              BR IF THERE ARE NONE
         MVC   ADDR+13(49),DDENIDS MOVE DD ENTRY IDS TO BUFFER
         LR    R4,PREG             SAVE PREG ACCROSS BRWRITE
         BRWRITE 1                 PRINT DD ENTRY IDS
         LR    PREG,R4             RESTORE PREG
         LH    R9,DDMAX            SET LOOP CTR TO 1 MORE THAN  @Y02006
         LA    R9,1(R9)            MAXIMUM ALLOWED              @Y02006
         BCT   R9,TIOTLP3          DECREMENT, BR IF NOT 0       @Y02006
         B     TIOTDONE            LOOP CONTROL WAS 0, ALL DONE @Y02006
TIOTLP3  LR    R5,R3               DD ENTRY ADDR TO R5
         SR    R5,R2               SUBTRACT TIOT ADDR FOR OFFSET
         ST    R5,TIOTWORK         STORE IN WORK AREA FOR CONVERSION
         LR    R4,R1               SAVE R1 ACCROSS HEXCNVT
         HEXCNVT ADDR+14,TIOTWORK+2,2 CONVERT OFFSET
         LR    R1,R4               RESTORE R1
         LA    R4,ADDR+22          ADDR FOR FIRST WORD
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT FIRST WORD OF DD ENTRY
         LA    R3,4(R3)            INCR ADDR
         LA    R8,2                LOAD LOOP COUNT
         LA    R4,ADDR+33          ADDR OF WHERE TO PUT DDNAME
TIOTLP1  BRREAD  (R3)
         MVC   0(4,R4),0(PREG)     MOVE FOUR BYTES OF DDNAME
         LA    R4,4(R4)            INCR
         LA    R3,4(R3)             ADDRS
         BCT   R8,TIOTLP1          LOOP TO MOVE ENTIRE NAME
         BRREAD  (R3)              ADDR OF TTR-STC FIELD OF DD ENTRY
         LA    R4,ADDR+44          ADDR OF WHERE TO PUT IT
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT TTR-STC FIELD
         SH    R7,SIXTEEN          SUBTRACT 16 FROM LENGTH
         BNP   TIOTPRT1            NO DEVICE ENTRY
         SRL   R7,2                DIVIDE BY 4
         LTR   R7,R7               TEST AGAIN
         BNP   TIOTPRT1            NO DEVICE ENTRY
         LA    R4,ADDR+55          ADDR FOR DEV ENT IN BUFFER
TIOTLP2  LA    R3,4(R3)            INCR TO DEVICE ENTRY
         BRREAD  (R3)
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT DEVICE ENTRY
         BRWRITE 1                 PRINT THIS LINE
         BCT   R7,TIOTLP2          LOOP FOR NUMB OF ENTRIES
TIOTPRT1 LA    R3,4(R3)            INCR TO NEXT ENTRY IF ANY
         BRREAD  (R3)
         IC    R7,0(PREG)          LENGTH OF NEXT ENTRY
         LTR   R7,R7               IS THERE ANOTHER ENTRY
         BNP   TIOTDONE            NO SET UP TO RETURN          SA55854
         BCT   R9,TIOTLP3           HAVE MAX DDS BEEN PROCESSED SA55854
         MVC   ADDR(L'TIOTLOOP),TIOTLOOP PUT INFINITE LOOP MSG  SA55854
*                                 IN MSG BUFFER (YES)           SA55854
         BRWRITE 1                PUT OUT LOOP MESSAGE          SA55854
         SPACE 2
***********************************************************************
*                                                                     *
*   ALL DONE WITH TIOT...RETURN TO FORMAT ROUTINE                     *
*                                                                     *
***********************************************************************
         SPACE
TIOTDONE DS    0H
TIOTDN1  MVC   ERRADDR,TIOERSV     RESTORE PREVIOUS ERROR ROUTINE ADDR
         L     R13,4(R13)          POINT TO CALLER'S SAVE AREA
         LM    R14,R12,12(R13)     RESTORE HIS REGS
         BR    RETREG              RETURN TO FORMAT ROUTINE
         SPACE 2
***********************************************************************
*                                                                     *
*   NO DD ENTRIES...SPACE 1 LINE AND RETURN                           *
*                                                                     *
***********************************************************************
         SPACE
NODDEN   BRWRITE 1                 SPACE A LINE
         B     TIOTDN1             RETURN TO FORMAT
         SPACE 2
***********************************************************************
*                                                                     *
*   NO TIOT...PRINT MESSAGE AND RETURN                                *
*                                                                     *
***********************************************************************
         SPACE
NOTIOT   MVC   ADDR(16),NOTIOMSG   MOVE MESSAG TO BUFFER
         BRWRITE 1                 PRINT MSG
         B     TIOTDONE            RETURN
         SPACE 2
***********************************************************************
*                                                                     *
*   INVALID TIOT...PRINT MESSAGE AND RETURN TO FORMAT                 *
*                                                                     *
***********************************************************************
         SPACE
TIONVLD  MVC   ADDR(12),NVLDMSG    MOVE NOT VALID MSG TO BUFFER
         BRWRITE 1                 PRINT MSG AND SPACE A LINE
         B     TIOTDN1             RETURN TO FORMAT
         EJECT
***********************************************************************
*                                                                     *
*   ERROR FORMATTING TIOT...PRINT ERROR MESSAGE AND RETURN TO FORMAT  *
*                                                                     *
***********************************************************************
         SPACE
         DROP  BASE1
         USING TIOTERR,R15
TIOTERR  LA    R13,TIOSAV          GET ADDR OF TIOT PRINT'S SAVE AREA
         LM    R14,R12,12(R13)     RESTORE HIS REGS
         DROP  R15
         USING TIOTBASE,BASE1
         L     BUFREG,CURBUF       RELOAD BUFFER ADDR
         BRWRITE 1                 SPACE A LINE
         MVC   ADDR(13),TIOERMSG   MOVE ERROR MSG TO BUFFER
         BRWRITE 1                 PRINT AND SPACE A LINE
         B     TIOTDN1             RETURN TO FORMAT ROUTINE
         EJECT
***********************************************************************
*                                                                     *
*   SAVE AREA AND CONSTANTS FOR TIOTPRT ROUTINE                       *
*                                                                     *
***********************************************************************
         SPACE
TIOSAV   DC    18F'0'              TIOT PRINT'S SAVE AREA
TIOTWORK DC    F'0'
TIOERSV  DC    F'0'
TIOTLAST DC    F'0'                                             @Y02006
TIOTASID DC    H'0'                                             @Y02006
ASIDLAST DC    XL2'FFFF'                                        @Y02006
TIOTSW   DC    X'00'
TIOTID   DC    C'TIOT'
JOBID    DC    C'JOB'
STEPID   DC    C'STEP'
PROCID   DC    C'PROC'
DDENIDS  DC    CL10'OFFSET'
         DC    CL10'LN-STA'
         DC    CL11'DDNAME'
         DC    CL11'TTR-STC'
         DC    CL7'STB-UCB'
NOTIOMSG DC    C'TASK HAS NO TIOT'
TIOERMSG DC    C'ERROR IN TIOT'
NVLDMSG  DC    C'INVALID TIOT'
TIOTLOOP DC    C'INFINITE LOOP IN TIOT'                         SA55854
SAMEMSG  DC    CL27'TIOT FORMATTED ON PAGE XXXX'                @Y02006
TIOTPGE  EQU   SAMEMSG+23                                       @Y02006
FIOPCH   DC    10F'0'              PATCH AREA                    X01980
         SPACE
         DROP  BUFREG,BASE1,COMBASE
         END
