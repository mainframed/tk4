         TITLE 'AMDPRUIM - EXIT INTERFACE MODULE                       *
                        '
AMDPRUIM CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00001-@MAINENT)
         DC    AL1(16)                                             0001
         DC    C'AMDPRUIM  76.189'                                 0001
AMDUSRXT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00112-AMDUSRXT)
         ENTRY AMDUSRXT
AMDUSRDL DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00350-AMDUSRDL)
         ENTRY AMDUSRDL
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
         AH    @15,4(,@15)                                         0001
         BR    @15                                                 0001
@EP00001 DS    0H                                                  0002
         LOAD EP=AMDPRECT,ERRET=ECTBADLD    ATTEMPT LOAD AMDPRECT
*   ECTADDR=R0;                     /* SAVE ADDRESS OF AMDPRECT      */
         ST    R0,ECTADDR                                          0082
*   GEN(N     R1,=X'00FFFFFF');     /* MASK OFF AUTH CODE OZ09692    */
         N     R1,=X'00FFFFFF'
*   ECTNUM=R1*8/NTRYSIZE;           /* GET LENGTH OF ECT IN BYTES &
*                                      COMPUTE NO. OF ECT ENTRIES    */
         LR    @05,R1                                              0084
         M     @04,@CF00042                                        0084
         D     @04,@CF00212                                        0084
         STH   @05,ECTNUM                                          0084
*   GENERATE FLOWS(FMTBADLD);                                      0085
         LOAD EP=AMDPRFMT,ERRET=FMTBADLD    ATTEMPT LOAD AMDPRFMT
*   EIPLFRMT=R0;                    /* STORE ADDRESS OF AMDPRFMT IN
*                                      PARM LIST COPY                */
         ST    R0,EIPLFRMT                                         0086
*   FAILSW=OFF;                     /* INDICATE EXIT INTERFACE INIT
*                                      PROPERLY AND IS ACTIVE        */
         NI    FAILSW,B'01111111'                                  0087
*   RETURN;                         /* RETURN TO AMDPRCTL            */
*                                                                  0088
@EL00001 L     @13,4(,@13)                                         0088
@EF00001 DS    0H                                                  0088
@ER00001 LM    @14,@12,12(@13)                                     0088
         BR    @14                                                 0088
*   /*****************************************************************/
*   /*                                                               */
*   /* UNABLE TO LOAD EXIT CONTROL TABLE- AMDPRECT. THE FOLLOWING    */
*   /* ROUTINE IS ENTERED ASYNCHRONOUSLY FORM LOAD. ISSUE ERROR      */
*   /* MESSAGE AMD281I AND DEACTIVATE EXIT INTERFACE.                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0089
*ECTBADLD:                                                         0089
*   LOADCSAV=R1;                    /* SAVE COMP & RETURN CODE FROM  */
ECTBADLD STH   R1,LOADCSAV                                         0089
*   LOADRSAV=R15;                   /* LOAD                          */
         STC   R15,LOADRSAV                                        0090
*   MGTBINDX=MGTABPTR+INDX281I;     /* ADDRESS MSG AMD281I           */
         LA    MGTBINDX,40                                         0091
         AL    MGTBINDX,MGTABPTR                                   0091
*   RFY                                                            0092
*     MSGMODNM BASED(MSGADDR+D281MODN);/* ADDRESS MODULE NAME FIELD
*                                      OF AMD281I                    */
*   MSGMODNM=F281ECT;               /* SET MODULE NAME FIELD IN MSG
*                                      TO AMDPRECT                   */
*                                                                  0093
         L     @14,MSGADDR(,MGTBINDX)                              0093
         MVC   MSGMODNM+45(8,@14),@CC00472                         0093
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING SECTION IS COMMON TO ECTBADLD (LOAD FAIL ON ECT)*/
*   /* AND FMTBADLD (LOAD FAIL ON FMT). THE COMPLETION & RETURN CODES*/
*   /* ARE CONVERTED TO PRINTABLE HEX & INSERTED IN THE MSG BUFFER.  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0094
*LOADCDCV:                                                         0094
*   RFY                                                            0094
*     MSGCOMPC BASED(MSGADDR+D281COMP);/* ADDRESS COMPL CODE FIELD   */
LOADCDCV DS    0H                                                  0095
*   R2=ADDR(MSGCOMPC);              /* SET UP PARAMETERS TO          */
         LA    R2,54                                               0095
         AL    R2,MSGADDR(,MGTBINDX)                               0095
*   R3=ADDR(LOADCSAV);              /* HEX CONVERT INLINE MACRO      */
         LA    R3,LOADCSAV                                         0096
*   GEN(HEXCNVT (2),(3),2);         /* CONVERT COMPL CODE TO PRINT-
*                                      ABLE HEX                      */
         HEXCNVT (2),(3),2
*   RFY                                                            0098
*     MSGRETCD BASED(MSGADDR+D281RETC);/* ADDRESS RET CODE FIELD     */
*   R2=ADDR(MSGRETCD);              /* SET UP PARAMETERS TO          */
         LA    R2,59                                               0099
         AL    R2,MSGADDR(,MGTBINDX)                               0099
*   R3=ADDR(LOADRSAV);              /* HEX CONVERT INLINE MACRO      */
         LA    R3,LOADRSAV                                         0100
*   GEN(HEXCNVT (2),(3),1);         /* CONVERT RET CODE TO PRINTABLE
*                                      HEX                           */
         HEXCNVT (2),(3),1
*   CALL MSGWRITR;                  /* CALL MESSAGE WRITER SUBROUTIN */
         BAL   @14,MSGWRITR                                        0102
*   FAILSW=ON;                      /* INDICATE EXIT INTERFACE INIT
*                                      FAILED AND IS INACTIVE        */
         OI    FAILSW,B'10000000'                                  0103
*   RETURN;                         /* RETURN TO AMDPRCTL            */
*                                                                  0104
         B     @EL00001                                            0104
*   /*****************************************************************/
*   /*                                                               */
*   /* UNABLE TO LOAD LINE FORMAT ROUTINE- AMDPRFMT. THE FOLLOWING   */
*   /* ROUTINE IS ENTERED ASYNCHRONOUSLY FROM LOAD. DELETE EXIT      */
*   /* CONTROL TABLE, ISSUE MSG AMD281I, AND DEACTIVATE EXIT         */
*   /* INTERFACE                                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0105
*FMTBADLD:                                                         0105
*   LOADCSAV=R1;                    /* SAVE COMP & RETURN CODES      */
FMTBADLD STH   R1,LOADCSAV                                         0105
*   LOADRSAV=R15;                   /* FROM LOAD                     */
         STC   R15,LOADRSAV                                        0106
*   GEN(DELETE EP=AMDPRECT);        /* DELETE EXIT CONTROL TABLE   0107
*                                      SINCE CANT LOAD AMDPRFMT      */
         DELETE EP=AMDPRECT
*   MGTBINDX=MGTABPTR+INDX281I;     /* ADDRESS MSG AMD281I           */
         LA    MGTBINDX,40                                         0108
         AL    MGTBINDX,MGTABPTR                                   0108
*   RFY                                                            0109
*     MSGMODNM BASED(MSGADDR+D281MODN);/* ADDRESS MODULE NAME FIELD
*                                      OF AMD281I                    */
*   MSGMODNM=F281FMT;               /* SET MODULE NAME FIELD IN MSG
*                                      TO AMDPRFMT                   */
         L     @14,MSGADDR(,MGTBINDX)                              0110
         MVC   MSGMODNM+45(8,@14),@CC00474                         0110
*   GOTO LOADCDCV;                  /* GO CONVERT RETURN CODES AND 0111
*                                      ISSUE MSG 281I                */
         B     LOADCDCV                                            0111
*                                                                  0112
*   /*****************************************************************/
*   /*                                                               */
*   /* MAIN ENTRY POINT FOR AMDPRDMP EXIT INTERFACE. CALLED BY       */
*   /* AMDPRDMP FORMATTING ROUTINES DURING THE PROCESSING OF THE     */
*   /* FOLLOWING: EACH TCB AND ITS ASSOCIATED CONTROL BLOCKS EACH    */
*   /* ASID AND ITS ASSOCIATED CONTROL BLOCKS EACH FORMAT STATEMENT  */
*   /* EACH PRINT CURRENT OR PRINT JOBNAME STATEMENT EACH PRINT      */
*   /* NUCLEUS STATEMENT CALLED BY THE MAIN SCAN ROUTINE AMDPRMSC    */
*   /* WHEN AN UNRECOGNIZABL CONTROL STATEMENT IS ENCOUNTERED.       */
*   /* FUNCTION IS TO SCAN THE EXIT CONTROL TABLE SEARCHING FOR NAMES*/
*   /* OF MODULES TO BE GIVEN CONTROL ON THE AMDPRDMP EXIT CURRENTLY */
*   /* BEING PROCESSED. CONTROL IS GIVEN TO THOSE EXIT MODULES FOUND.*/
*   /* DUMP READING AND OUTPUT WRITING SERVICES ARE PROVIDED.        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0112
*AMDUSRXT:                                                         0112
*   ENTRY;                                                         0112
@EP00112 DS    0H                                                  0113
*   CURENSAV=R13;                   /* SET UP FOR ERROR & STOP RTNS  */
         ST    R13,CURENSAV                                        0113
*   EIPROCSW=EIPROCSW&EIPSWRST;     /* RESET EXIT INTERFACE PROCESS
*                                      SWITCHES EXCEPT FAILSW        */
         NI    EIPROCSW,X'80'                                      0114
*   IF FAILSW=ON THEN               /* EXIT INTERFACE ACTIVE?        */
         TM    FAILSW,B'10000000'                                  0115
         BNO   @RF00115                                            0115
*     DO;                           /* NO- NORMALLY JUST RETURN TO   */
*       IF EXITFLAG=ZVERB THEN      /* CALLER AS NOP EXCEPT IF THIS  */
         CLI   EXITFLAG(COMPTR),X'00'                              0117
         BNE   @RF00117                                            0117
*         DO;                       /* CALL IS FOR A VERB EXIT, ISSUE
*                                      MESSAGE AMD289I INDICATING  0118
*                                      THAT THIS VERB IS BEING     0118
*                                      IGNORED                       */
*           MGTBINDX=MGTABPTR+INDX289I;/* ADDRESS MSG AMD289I        */
         LA    MGTBINDX,64                                         0119
         AL    MGTBINDX,MGTABPTR                                   0119
*           RFY                                                    0120
*             MSGVRBNM BASED(MSGADDR+D289VRBN);/* ADDRESS VERB       */
*           VERBLEN=VERBEND-VERBGN; /* FIELD & COMPUTE LENGTH        */
         L     @14,VERBGN(,COMPTR)                                 0121
         L     VERBLEN,VERBEND(,COMPTR)                            0121
         SLR   VERBLEN,@14                                         0121
*           MSGVRBNM=BLANKS;        /* INIT VERB FIELD TO BLANKS     */
         LA    @10,22                                              0122
         AL    @10,MSGADDR(,MGTBINDX)                              0122
         MVC   MSGVRBNM(8,@10),BLANKS(COMPTR)                      0122
*           MSGVRBNM(1:VERBLEN)=VERBMAP;/* MOVE REQD EXIT VERB TO    */
         LR    @07,VERBLEN                                         0123
         BCTR  @07,0                                               0123
         EX    @07,@SM00570                                        0123
*           CALL MSGWRITR;          /* MSG BUFFER AND ISSUE AMD289I  */
         BAL   @14,MSGWRITR                                        0124
*         END;                                                     0125
*       RETURN;                     /* RETURN TO CALLER- EXIT INTER- */
         B     @EL00001                                            0126
*     END;                          /* FACE INACTIVE                 */
*                                                                  0127
*   /*****************************************************************/
*   /*                                                               */
*   /* EXIT INTERFACE IS ACTIVE- PERFORM INITIALIZATION- THEN        */
*   /* DETERMINE WHETEHR THIS CALL IS FOR AN EXIT VERB OR AN AMDPRDMP*/
*   /* FORMAT EXIT.                                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0128
*   ECTABPTR=ECTADDR;               /* SET INDEX PTR TO 1ST TAB NTRY */
@RF00115 L     ECTABPTR,ECTADDR                                    0128
*   ERRHANSV=ERRADDR;               /* SAVE CURRENT ERROR & STOP     */
         MVC   ERRHANSV(4),ERRADDR(COMPTR)                         0129
*   STPHANSV=STOPEXIT;              /* HANDLERS FROM COMMON          */
         MVC   STPHANSV(4),STOPEXIT(COMPTR)                        0130
*   ERRADDR=ADDR(UIMBRDER);         /* STORE EXIT INTERFACES ERROR & */
         LA    @14,UIMBRDER                                        0131
         ST    @14,ERRADDR(,COMPTR)                                0131
*   STOPEXIT=ADDR(UIMSTOP);         /* STOP HANDLER ADDRESSES IN COM */
         LA    @14,UIMSTOP                                         0132
         ST    @14,STOPEXIT(,COMPTR)                               0132
*   IF EXITFLAG=ZVERB THEN          /* IS THIS CALL FOR A VERB EXIT? */
         CLI   EXITFLAG(COMPTR),X'00'                              0133
         BE    @RT00133                                            0133
*     GOTO VRBEXIT;                 /* YES- PROCESS                  */
*                                                                  0134
*   /*****************************************************************/
*   /*                                                               */
*   /* AMDPRDMP FORMAT ROUTINE EXIT HANDLER                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0135
*FMTABSRH:                                                         0135
*   DO NTRYCT=1 TO ECTNUM WHILE     /* INDEX THROUGH ECT UNITL       */
*         (USTOPSW=OFF);            /* MATCH IS FOUND                */
FMTABSRH LA    NTRYCT,1                                            0135
         B     @DE00135                                            0135
@DL00135 TM    USTOPSW,B'01000000'                                 0135
         BNZ   @DC00135                                            0135
*     IF EXITFLAG=(ECTFLAG&EXITFLAG) THEN                          0136
         MVC   @TS00001(1),ECTFLAG(ECTABPTR)                       0136
         NC    @TS00001(1),EXITFLAG(COMPTR)                        0136
         CLC   EXITFLAG(1,COMPTR),@TS00001                         0136
         BNE   @RF00136                                            0136
*       DO;                                                        0137
*                                                                  0137
*         /***********************************************************/
*         /*                                                         */
*         /* MATCH FOUND FOR THIS ECT ENTRY, PREPARE TO GIVE EXIT    */
*         /* MODULE CONTROL                                          */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0138
*         ELOADMOD=ECTMOD;          /* FOR LOAD MACRO                */
         MVC   ELOADMOD(8),ECTMOD(ECTABPTR)                        0138
*         GENERATE REFS(ELOADMOD) FLOWS(EXTBADLD);                 0139
         LOAD EPLOC=ELOADMOD,ERRET=EXTBADLD    BRING IN EXIT MODULE
*         AEXITMOD=R0;              /* SAVE ADDRESS OF EXIT MODULE   */
*                                                                  0140
         LR    AEXITMOD,R0                                         0140
*         /***********************************************************/
*         /*                                                         */
*         /* RESTORE FIXED PART OF EXIT PARM LIST IN CASE MODIFIED BY*/
*         /* PREVIOUS EXIT MOD                                       */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0141
*         EXITPLST=PLSTCOPY;                                       0141
*                                                                  0141
         MVC   EXITPLST(56),PLSTCOPY                               0141
*         /***********************************************************/
*         /*                                                         */
*         /* ALSO, SET UP VARIABLE PART OF PLIST AND INITIALIZE      */
*         /* OUTPUT BUFFER AND PRDMP PLIST EXTENSION                 */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0142
*         ADPLCVT=CVTADDR;          /* SET CVT ADDR IN PLIST IN CASE
*                                      A CVT= HAD BEEN ENTERED PRIOR
*                                      TO THIS CALL OF UIM           */
         L     @14,ABDPLPTR                                        0142
         MVC   ADPLCVT(4,@14),CVTADDR(COMPTR)                      0142
*         EIBUFFER='';              /* BLANK OUTPUT BUFFER           */
         MVI   EIBUFFER,C' '                                       0143
         MVC   EIBUFFER+1(121),EIBUFFER                            0143
*         PRDMPEXT=0;               /* ZERO PRDMP PLIST EXTENSION FOR
*                                      NON=VERB EXIT                 */
         SLR   @10,@10                                             0144
         ST    @10,PRDMPEXT                                        0144
*         IF EXITFLAG=ATCB THEN     /* IF THIS IS A TCB EXIT         */
         CLI   EXITFLAG(COMPTR),X'80'                              0145
         BNE   @RF00145                                            0145
*           DO;                     /* THEN-                         */
*             ADPLTCB=AUSRTCBA;     /* SET BOTH THE TCB AND          */
         MVC   ADPLTCB(4,@14),AUSRTCBA(COMPTR)                     0147
*             ADPLASID=AUSRASID;    /* ASID FIELDS IN THE PLIST = TO */
         MVC   ADPLASID(2,@14),AUSRASID(COMPTR)                    0148
*           END;                    /* THE ONES CURRENTLY BEING PROC */
*         ELSE                      /* IF NOT-                       */
*           DO;                     /* THEN                          */
         B     @RC00145                                            0150
@RF00145 DS    0H                                                  0151
*             ADPLTCB=0;            /* SET TCB FIELD TO 0 AND        */
         L     @14,ABDPLPTR                                        0151
         SLR   @10,@10                                             0151
         ST    @10,ADPLTCB(,@14)                                   0151
*             IF EXITFLAG=BASID THEN/* CHECK IF THIS IS ASID EXIT    */
         CLI   EXITFLAG(COMPTR),X'40'                              0152
         BNE   @RF00152                                            0152
*               ADPLASID=AUSRASID;  /* IF SO SET JUST ASID CURRENTLY */
         MVC   ADPLASID(2,@14),AUSRASID(COMPTR)                    0153
*             ELSE                  /* BEING PROCESSED, OTHERWISE    */
*               ADPLASID=QASID;     /* SET ASID FIELD TO CURRENT ASID*/
         B     @RC00152                                            0154
@RF00152 L     @14,ABDPLPTR                                        0154
         MVC   ADPLASID(2,@14),QASID(COMPTR)                       0154
*           END;                    /* PRDMP NOT PROCESSING ANY PART-
*                                      ICULAR TCB OR ASID            */
*                                                                  0155
@RC00152 DS    0H                                                  0156
*         /***********************************************************/
*         /*                                                         */
*         /* PREPARE TO CALL EXIT MODULE                             */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0156
*         R1=ADDR(EXITPLST);        /* ADDRESS PLIST FOR EXIT RTN    */
@RC00145 LA    R1,EXITPLST                                         0156
*         COMPTRSV=COMPTR;          /* SAVE PTR TO COMMON (R12)      */
         ST    COMPTR,COMPTRSV                                     0157
*         COMPTR=0;                 /* ZERO PTR TO COMMON SO EXIT  0158
*                                      CAN'T TAMPER                  */
         SLR   COMPTR,COMPTR                                       0158
*         CNTRLSW=ON;               /* INDICATE EXIT IN CONTROL      */
         OI    CNTRLSW,B'00010000'                                 0159
*         CALL EXITMOD;             /* INVOKE EXIT MODULE            */
         LR    @15,AEXITMOD                                        0160
         BALR  @14,@15                                             0160
*         CNTRLSW=OFF;              /* RESET EXIT IN CONTROL SWITCH  */
         NI    CNTRLSW,B'11101111'                                 0161
*         COMPTR=COMPTRSV;          /* RESTORE PTR TO COMMON         */
         L     COMPTR,COMPTRSV                                     0162
*         EXITRC=R15;               /* SAVE EXITS RETURN CODE        */
         LR    EXITRC,R15                                          0163
*         GEN(DELETE EPLOC=ELOADMOD);                              0164
         DELETE EPLOC=ELOADMOD
*         CURENSAV=R13;             /* SET UP FOR ERROR & STOP RTNS  */
*                                                                  0165
         ST    R13,CURENSAV                                        0165
*         /***********************************************************/
*         /*                                                         */
*         /* CHECK EXIT MODULES RETURN CODE IF RC = 4, HE WAS UNABLE */
*         /* TO OBTAIN STORAGE (GETMAIN) FOR NORMAL PROCESSING       */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0166
*         IF EXITRC=4 THEN          /* BAD RETURN CODE?              */
         CH    EXITRC,@CH00155                                     0166
         BNE   @RF00166                                            0166
*           DO;                     /* YES-                          */
*             COMMODNM=ECTMOD;      /* MOVE THIS ECT ENTRYS MODULE 0168
*                                      NAME TO OUTPUT COMMENT TEXT   */
         MVC   COMMODNM(8),ECTMOD(ECTABPTR)                        0168
*             CURBUFER(1:LENGTH(EXSTORCM))=EXSTORCM;/* MOVE TO       */
         L     @14,CURBUF(,COMPTR)                                 0169
         MVC   CURBUFER+1(58,@14),EXSTORCM                         0169
*             GENERATE REFS(AWRITE);                               0170
*                                    /* CURRENT OUTPUT BUFFER        */
         BRWRITE 1                    WRITE OUTPUT COMMENT
*           END;                                                   0171
*         IF PRNTSW=ON THEN         /* DID EXIT MODULE PRINT ANYTHING*/
@RF00166 TM    PRNTSW,B'00001000'                                  0172
         BNO   @RF00172                                            0172
*           GEN(BRWRITE 2);         /* YES- SPACE 2 LINES            */
         BRWRITE 2
*       END;                                                       0174
*                                                                  0174
@RF00172 DS    0H                                                  0175
*     /***************************************************************/
*     /*                                                             */
*     /* CONTINUE SEARCH OF ECT FOR MORE MODULES TO GET CONTROL ON   */
*     /* THIS EXIT                                                   */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0175
*FMTSRCHC:                                                         0175
*     PRNTSW=OFF;                   /* RESET PRINT SW BEFORE LOOKING
*                                      FOR NEXT EXIT MODULE          */
@RF00136 DS    0H                                                  0175
FMTSRCHC NI    PRNTSW,B'11110111'                                  0175
*     ECTABPTR=ECTADDR+NTRYCT*NTRYSIZE;/* INCR TABLE PTR TO NEXT ECT
*                                      ENTRY                         */
         LR    ECTABPTR,NTRYCT                                     0176
         MH    ECTABPTR,@CH00212                                   0176
         AL    ECTABPTR,ECTADDR                                    0176
*   END FMTABSRH;                                                  0177
*                                                                  0177
         AH    NTRYCT,@CH00075                                     0177
@DE00135 CH    NTRYCT,ECTNUM                                       0177
         BNH   @DL00135                                            0177
@DC00135 DS    0H                                                  0178
*   /*****************************************************************/
*   /*                                                               */
*   /* EXIT INTERFACE TERMINAL PROCESSING FOR THIS CALL OF AMDPRUIM  */
*   /* RESTORE ERROR AND STOP HANDLER ADDRESSES IN COMMON AND RETURN */
*   /* CALLER UNLESS IN STOP MODE FROM CONSOLE. IN THAT CASE, EXIT TO*/
*   /* CURRENT STOP HANDLER WHOSE ADDRESS WAS JUST RESTORED IN COMMON*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0178
*LOADRETS:                                                         0178
*   ERRADDR=ERRHANSV;               /* RESTORE ERROR & STOP HANDLER  */
LOADRETS MVC   ERRADDR(4,COMPTR),ERRHANSV                          0178
*   STOPEXIT=STPHANSV;              /* ADDRESSES IN COMMON           */
         L     @14,STPHANSV                                        0179
         ST    @14,STOPEXIT(,COMPTR)                               0179
*   IF CONSTOP=ON THEN              /* IF STOP ENTERED FROM CONSOLE  */
         TM    CONSTOP,B'00100000'                                 0180
         BNO   @RF00180                                            0180
*     DO;                           /* THEN-                         */
*       R15=STOPEXIT;               /* GIVE CONTROL TO               */
         LR    R15,@14                                             0182
*       GOTO STOPHAND;              /* THE CURRENT PRDMP STOP        */
         BR    R15                                                 0183
*     END;                          /* HANDLER                       */
*   RETURN;                         /* OTHERWISE- RETURN TO CALLER   */
         B     @EL00001                                            0185
*                                                                  0186
*   /*****************************************************************/
*   /*                                                               */
*   /* EXIT VERB HANDLER                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0186
*VRBEXIT:                                                          0186
*   EXITVERB=BLANKS;                /* BLANK VERB SAVE AREA          */
VRBEXIT  MVC   EXITVERB(8),BLANKS(COMPTR)                          0186
*   VERBLEN=VERBEND-VERBGN;         /* DETERMINE LENGTH OF VERB      */
         L     @14,VERBGN(,COMPTR)                                 0187
         L     VERBLEN,VERBEND(,COMPTR)                            0187
         SLR   VERBLEN,@14                                         0187
*   EXITVERB(1:VERBLEN)=VERBMAP;    /* MOVE COPY OF VERB TO SAVE AREA*/
*                                                                  0188
         LR    @10,VERBLEN                                         0188
         BCTR  @10,0                                               0188
         EX    @10,@SM00575                                        0188
*   /*****************************************************************/
*   /*                                                               */
*   /* SCAN ECT FOR A MATCH ON VERB SPECIFIED. ONLY FIRST MATCH IS   */
*   /* USED. DUPLICATE ECT ENTRIES FOR SAME VERB ARE IGNORED. IF NO  */
*   /* MATCH IS FOUND, VERB SPECIFIED IS INVALID AND MSG 165I ISSUED.*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0189
*FMTVBSRH:                                                         0189
*   DO NTRYCT=1 TO ECTNUM WHILE     /* INDEX THROUGH ECT UNTIL MATCH */
*         (ECTVERB^=EXITVERB);      /* IS FOUND                      */
FMTVBSRH LA    NTRYCT,1                                            0189
         B     @DE00189                                            0189
@DL00189 CLC   ECTVERB(8,ECTABPTR),EXITVERB                        0189
         BE    @DC00189                                            0189
*     ECTABPTR=ECTADDR+NTRYCT*NTRYSIZE;/* INCR TABLE PTR TO NEXT ECT
*                                      ENTRY                         */
         LR    ECTABPTR,NTRYCT                                     0190
         MH    ECTABPTR,@CH00212                                   0190
         AL    ECTABPTR,ECTADDR                                    0190
*   END FMTVBSRH;                                                  0191
         AH    NTRYCT,@CH00075                                     0191
@DE00189 CH    NTRYCT,ECTNUM                                       0191
         BNH   @DL00189                                            0191
@DC00189 DS    0H                                                  0192
*   IF NTRYCT>ECTNUM THEN           /* IF COUNTER EXCEEDS NO. OF ECT */
         CH    NTRYCT,ECTNUM                                       0192
         BNH   @RF00192                                            0192
*     DO;                           /* ENTRIES THEN MATCH NOT FOUND  */
*       MGTBINDX=MGTABPTR+INDX165I; /* ADDRESS 165I PREFIX           */
         L     MGTBINDX,MGTABPTR                                   0194
*       CALL MSGWRITR;              /* ISSUE IT                      */
         BAL   @14,MSGWRITR                                        0195
*       MGTBINDX=MGTABPTR+IND165SA; /* ADDRESS INVLAID VERB          */
         LA    MGTBINDX,8                                          0196
         AL    MGTBINDX,MGTABPTR                                   0196
*       CALL MSGWRITR;              /* SUFFIX AND ISSUE IT           */
         BAL   @14,MSGWRITR                                        0197
*       GOTO LOADRETS;                                             0198
         B     LOADRETS                                            0198
*     END;                                                         0199
*                                                                  0199
*   /*****************************************************************/
*   /*                                                               */
*   /* VERB MATCH FOUND. PREPARE TO INVOKE EXIT MODULE.              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0200
*   ELOADMOD=ECTMOD;                /* FOR LOAD MACRO                */
@RF00192 MVC   ELOADMOD(8),ECTMOD(ECTABPTR)                        0200
*   GENERATE REFS(BRRDINIT) FLOWS(EXTBADLD);                       0201
         BRREAD INIT                   INITIALIZE FOR THIS DUMP IF
*                                      THIS VERB IS FIRST CONTRL STMT
*                                      IN JOBSTEP
         LOAD EPLOC=ELOADMOD,ERRET=EXTBADLD    BRING IN EXIT MODULE
*   AEXITMOD=R0;                    /* SAVE ADDRESS OF EXIT MODULE   */
         LR    AEXITMOD,R0                                         0202
*   IF EXITDLIM=EDLIMCOM THEN       /* IF DELIM FOLLIWING VERB IS A
*                                      COMMA, THEN NO OPERANDS ARE   */
         L     @14,VERBEND(,COMPTR)                                0203
         CLI   EXITDLIM(@14),C','                                  0203
         BNE   @RF00203                                            0203
*     PRDMPEXT=0;                   /* PRESENT- INDICATE SUCH        */
         SLR   @14,@14                                             0204
         ST    @14,PRDMPEXT                                        0204
*   ELSE                                                           0205
*     DO;                           /* OPERANDS MAY BE PRESENT       */
         B     @RC00203                                            0205
@RF00203 DS    0H                                                  0206
*       OPRNDLEN=ADDR(WTORMSG)+70-VERBEND;/* COMPUTE LEN-1 FOR     0206
*                                      TRANSLATE AND TEST WITH EX    */
         LA    OPRNDLEN,WTORMSG(,COMPTR)                           0206
         AH    OPRNDLEN,@CH00525                                   0206
         L     @14,VERBEND(,COMPTR)                                0206
         SLR   OPRNDLEN,@14                                        0206
*       IF OPRNDLEN>=0 THEN         /* INSURE THAT VERB DOES NOT END
*                                      IN COLUMN 71                  */
         LTR   OPRNDLEN,OPRNDLEN                                   0207
         BM    @RF00207                                            0207
*         DO;                       /* IT DOESNT- CHECK FOR OPERANDS */
*           R1=OPRNDLEN;            /* SET UP FOR EXECUTE: LENGTH    */
         LR    R1,OPRNDLEN                                         0209
*           R3=VERBEND;             /* TARGET ADDRESS                */
         LR    R3,@14                                              0210
*           GENERATE REFS(TRANSLT);                                0211
         EX    R1,TRANSLT              ARE THERE ANY OPERANDS
*           BC(8,NOPERAND);         /* WAS AN OPERAND FOUND?         */
*                                                                  0212
         BC    8,NOPERAND                                          0212
*           /*********************************************************/
*           /*                                                       */
*           /* OPERAND FOUND, PLACE ADDRESS OF OPERAND IN PRDMP PLIST*/
*           /* EXTENS                                                */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0213
*           PRDMPEXT=R1;            /* PLIST EXTENSION FOR EXIT      */
         ST    R1,PRDMPEXT                                         0213
*         END;                                                     0214
*       ELSE                                                       0215
*NOPERAND:                                                         0215
*         PRDMPEXT=0;               /* INDICATE NO OPERANDS          */
         B     @RC00207                                            0215
@RF00207 DS    0H                                                  0215
NOPERAND SLR   @14,@14                                             0215
         ST    @14,PRDMPEXT                                        0215
*     END;                                                         0216
*                                                                  0216
@RC00207 DS    0H                                                  0217
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING GENERATED DATA IS THE TARGET OF THE ABOVE EX INS*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0217
*   GENERATE DATA REFS(NONBLNK,R3) DEFS(TRANSLT);                  0217
*                                                                  0217
@RC00203 DS    0H                                                  0217
*   /*****************************************************************/
*   /*                                                               */
*   /* RESTORE FIXED PART OF EXIT PARM LIST IN CASE MODIFIED BY      */
*   /* PREVIOUS EXIT MOD                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0218
*   EXITPLST=PLSTCOPY;                                             0218
*                                                                  0218
         MVC   EXITPLST(56),PLSTCOPY                               0218
*   /*****************************************************************/
*   /*                                                               */
*   /* ALSO, SET UP VARIABLE PART OF PLIST AND INITIALIZE OUTPUT     */
*   /* BUFFER                                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0219
*   ADPLCVT=CVTADDR;                /* SET CVT ADDR IN PLIST IN CASE
*                                      CVT= WAS ENTERED SINCE LAST 0219
*                                      CALL OF UIM                   */
         L     @14,ABDPLPTR                                        0219
         MVC   ADPLCVT(4,@14),CVTADDR(COMPTR)                      0219
*   EIBUFFER='';                    /* BLANK OUTPUT BUFFER           */
         MVI   EIBUFFER,C' '                                       0220
         MVC   EIBUFFER+1(121),EIBUFFER                            0220
*   ADPLTCB=0;                      /* ZERO TCB FIELD OF PLIST FOR 0221
*                                      VERB EXIT                     */
         SLR   @10,@10                                             0221
         ST    @10,ADPLTCB(,@14)                                   0221
*   ADPLASID=QASID;                 /* SET CURRENT ASID IN ASID FIELD*/
*                                                                  0222
         MVC   ADPLASID(2,@14),QASID(COMPTR)                       0222
*   /*****************************************************************/
*   /*                                                               */
*   /* IF PRDMP IS IN FLUSHMODE PROCESSING, ONLY GIVE EXIT MODULE    */
*   /* CONTROL IF HIS VERB HAS OPERNADS, AND THEN, ALLOW HIM ONLY TO */
*   /* SYNTAX CHECK OPERANDS BY TURNING ON USTOPSW. THIS WILL PREVENT*/
*   /* HIM FROM READING THE DUMP AND WRITING OUTPUT.                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0223
*   IF FLSHMODE=ON THEN             /* SYNTAX CHECKING ONLY?         */
         TM    FLSHMODE(COMPTR),B'10000000'                        0223
         BNO   @RF00223                                            0223
*     DO;                           /* YES-                          */
*       IF PRDMPEXT=0 THEN          /* ARE THERE ANY OPERANDS?       */
         C     @10,PRDMPEXT                                        0225
         BNE   @RF00225                                            0225
*         DO;                       /* NO-                           */
*           GEN(DELETE EPLOC=ELOADMOD);/* NOTHING TO SYNTAX CHECK    */
         DELETE EPLOC=ELOADMOD
*           GOTO LOADRETS;          /* TERMINATE THIS PASS OF UIM    */
         B     LOADRETS                                            0228
*         END;                                                     0229
*       ELSE                        /* OPERANDS ARE PRESENT- LET EXIT
*                                      MODULE SYNTAX                 */
*         USTOPSW=ON;               /* CHECK ONLY                    */
@RF00225 OI    USTOPSW,B'01000000'                                 0230
*     END;                                                         0231
*   ELSE                            /* PRDMP IS NOT IN FLUSHMODE     */
*     GEN(BRWRITE SKIP);            /* EXIT MODULE GETS FULL FUNCTION
*                                      START HIS OUTPUT ON NEW PAGE  */
         B     @RC00223                                            0232
@RF00223 DS    0H                                                  0232
         BRWRITE SKIP
*   R1=ADDR(EXITPLST);              /* ADDRESS PARM LIST             */
@RC00223 LA    R1,EXITPLST                                         0233
*   COMPTRSV=COMPTR;                /* SAVE PTR TO COMMON (R12)      */
         ST    COMPTR,COMPTRSV                                     0234
*   IF EXITVERB(1:6)^='CVTMAP' THEN /* OZ09006                       */
         CLC   EXITVERB(6),@CC00531                                0235
         BE    @RF00235                                            0235
*     COMPTR=0;                     /* ZERO PTR TO COMMON SO EXIT  0236
*                                      CAN'T TAMPER                  */
         SLR   COMPTR,COMPTR                                       0236
*   CNTRLSW=ON;                     /* INDICATE EXIT IN CONTROL      */
@RF00235 OI    CNTRLSW,B'00010000'                                 0237
*   CALL EXITMOD;                   /* INVOKE EXIT MODULE            */
         LR    @15,AEXITMOD                                        0238
         BALR  @14,@15                                             0238
*   CNTRLSW=OFF;                    /* RESET- EXIT NOT IN CONTROL    */
         NI    CNTRLSW,B'11101111'                                 0239
*   COMPTR=COMPTRSV;                /* RESTORE PTR TO COMMON         */
         L     COMPTR,COMPTRSV                                     0240
*   EXITRC=R15;                     /* SAVE EXITS RETURN CODE        */
         LR    EXITRC,R15                                          0241
*   GEN(DELETE EPLOC=ELOADMOD);     /* DELETE EXIT MODULE            */
         DELETE EPLOC=ELOADMOD
*   CURENSAV=R13;                   /* SET UP FOR ERROR & STOP RTNS  */
*                                                                  0243
         ST    R13,CURENSAV                                        0243
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK EXIT MODULES RETURN CODE IF RC = 4, HE WAS UNABLE TO    */
*   /* OBTAIN STORAGE (GETMAIN) FOR NORMAL PROCESSING                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0244
*   IF EXITRC=4 THEN                /* BAD RETURN CODE?              */
         CH    EXITRC,@CH00155                                     0244
         BNE   @RF00244                                            0244
*     DO;                           /* YES-                          */
*       COMMODNM=ECTMOD;            /* MOVE THIS ECT ENTRYS MODULE 0246
*                                      NAME TO OUTPUT COMMENT TEXT   */
         MVC   COMMODNM(8),ECTMOD(ECTABPTR)                        0246
*       CURBUFER(1:LENGTH(EXSTORCM))=EXSTORCM;/* MOVE TO CURRENT     */
         L     @14,CURBUF(,COMPTR)                                 0247
         MVC   CURBUFER+1(58,@14),EXSTORCM                         0247
*       GEN(BRWRITE 1);             /* OUTPUT BUFFER & WRITE OUTPUT  */
         BRWRITE 1
*     END;                          /* COMMENT                       */
*                                                                  0249
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK WHETHER VERB EXIT MODULE HAS DETECTED A SYNTAX ERROR IN */
*   /* ITS OPERAND LIST. A CODE WILL BE PLACED IN THE PRDMP PLIST    */
*   /* EXTENSION BY THE EXIT MODULE INDICATING THE APPROPRIATE SYNTAX*/
*   /* MSG, IF ANY, TO BE ISSUED BY UIM. THE FOLLOWING TABLE         */
*   /* DESCRIBES THE PROCESSING: RETURN CODE SUFFIX TO MSG AMD165I   */
*   /* THAT IS TO BE ISSUED 4 'DELIMETER ERROR IN OPERAND FIELD OF   */
*   /* 'VERB'' 8 'INVALID KEYWORD IN OPERAND FIELD OF 'VERB'' 12     */
*   /* 'SYNTAX ERROR IN OPERAND FIELD OF 'VERB'' OTHER MESSAGE NOT   */
*   /* ISSUED                                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0250
*   IF PRDMPEXT=4 THEN              /* IF SYNTAX RETURN CODE IS 4    */
@RF00244 CLC   PRDMPEXT(4),@CF00155                                0250
         BNE   @RF00250                                            0250
*     DO;                           /* ISSUE AMD165I WITH DELIMETER  */
*       MGTBINDX=MGTABPTR+INDX165I; /* ERROR SUFFIX- ALSO WTO        */
         L     MGTBINDX,MGTABPTR                                   0252
*       CALL MSGWRITR;              /* IF INPUT FROM CONSOLE         */
         BAL   @14,MSGWRITR                                        0253
*       MGTBINDX=MGTABPTR+IND165SB;                                0254
         LA    MGTBINDX,16                                         0254
         AL    MGTBINDX,MGTABPTR                                   0254
*       RFY                                                        0255
*         MSGVRBNM BASED(MSGADDR+D65BVRBN);                        0255
*       MSGVRBNM=ECTVERB;                                          0256
         L     @14,MSGADDR(,MGTBINDX)                              0256
         MVC   MSGVRBNM+44(8,@14),ECTVERB(ECTABPTR)                0256
*       CALL MSGWRITR;                                             0257
         BAL   @14,MSGWRITR                                        0257
*     END;                                                         0258
*   IF PRDMPEXT=8 THEN              /* IF SYNTAX RETURN CODE IS 8    */
@RF00250 CLC   PRDMPEXT(4),@CF00042                                0259
         BNE   @RF00259                                            0259
*     DO;                           /* ISSUE AMD165I WITH INVALID    */
*       MGTBINDX=MGTABPTR+INDX165I; /* KEYWORD SUFFIX- ALSO WTO      */
         L     MGTBINDX,MGTABPTR                                   0261
*       CALL MSGWRITR;              /* IF INPUT IS FROM CONSOLE      */
         BAL   @14,MSGWRITR                                        0262
*       MGTBINDX=MGTABPTR+IND165SC;                                0263
         LA    MGTBINDX,24                                         0263
         AL    MGTBINDX,MGTABPTR                                   0263
*       RFY                                                        0264
*         MSGVRBNM BASED(MSGADDR+D65CVRBN);                        0264
*       MSGVRBNM=ECTVERB;                                          0265
         L     @14,MSGADDR(,MGTBINDX)                              0265
         MVC   MSGVRBNM+44(8,@14),ECTVERB(ECTABPTR)                0265
*       CALL MSGWRITR;                                             0266
         BAL   @14,MSGWRITR                                        0266
*     END;                                                         0267
*   IF PRDMPEXT=12 THEN             /* IF SYNTAX RETURN CODE IS 12   */
@RF00259 CLC   PRDMPEXT(4),@CF00239                                0268
         BNE   @RF00268                                            0268
*     DO;                           /* ISSUE AMD165I WITH SYNTAX     */
*       MGTBINDX=MGTABPTR+INDX165I; /* ERROR SUFFIX- ALSO WTO        */
         L     MGTBINDX,MGTABPTR                                   0270
*       CALL MSGWRITR;              /* IF INPUT IS FROM CONSOLE      */
         BAL   @14,MSGWRITR                                        0271
*       MGTBINDX=MGTABPTR+IND165SD;                                0272
         LA    MGTBINDX,32                                         0272
         AL    MGTBINDX,MGTABPTR                                   0272
*       RFY                                                        0273
*         MSGVRBNM BASED(MSGADDR+D65DVRBN);                        0273
*       MSGVRBNM=ECTVERB;                                          0274
         L     @14,MSGADDR(,MGTBINDX)                              0274
         MVC   MSGVRBNM+41(8,@14),ECTVERB(ECTABPTR)                0274
*       CALL MSGWRITR;                                             0275
         BAL   @14,MSGWRITR                                        0275
*     END;                                                         0276
*                                                                  0276
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINE WHETHER THIS VERB EXIT MODULE PRINTED ANY OUTPUT IN */
*   /* THE CASE WHERE HE WAS NOT RESTRICTED BY UIM FROM DOING SO-    */
*   /* I.E. USTOPSW WAS OFF. IF WE ALLOWED HIM TO PRINT AND HE       */
*   /* PRODUCED NO OUTPUT, TELL HIM ABOUT IT.                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0277
*   IF USTOPSW=OFF&PRNTSW=OFF THEN  /* ANY OUTPUT WHEN ALLOWED       */
@RF00268 TM    USTOPSW,B'01001000'                                 0277
         BNZ   @RF00277                                            0277
*     DO;                           /* NO- HE MAY HAVE A PROBLEM     */
*       MGTBINDX=MGTABPTR+INDX288I; /* MOVE VERB NAME TO TEXT OF     */
         LA    MGTBINDX,56                                         0279
         AL    MGTBINDX,MGTABPTR                                   0279
*       RFY                                                        0280
*         MSGVRBNM BASED(MSGADDR+D288VRBN);/* AMD288I AND ISSUE      */
*       MSGVRBNM=ECTVERB;                                          0281
         L     @14,MSGADDR(,MGTBINDX)                              0281
         MVC   MSGVRBNM+30(8,@14),ECTVERB(ECTABPTR)                0281
*       CALL MSGWRITR;                                             0282
         BAL   @14,MSGWRITR                                        0282
*     END;                                                         0283
*   GOTO LOADRETS;                  /* PROCESSING COMPLETE FOR THIS
*                                      PASS OF UIM.                  */
         B     LOADRETS                                            0284
*                                                                  0285
*   /*****************************************************************/
*   /*                                                               */
*   /* AMDUSRXTS LOAD FAIL HANDLER THIS ROUTINE GETS CONTROL WHENEVER*/
*   /* AN EXIT MODULE FROM THE EXIT CONTROL TABLE CANNOT BE LOADED.  */
*   /* THIS ROUTINE IS USED IN LOAD FAILS FOR BOTH FORMAT AND VERB   */
*   /* EXITS. MESSAGE AMD287I IS ISSUED. FOR VERB EXITS, PROCESSING  */
*   /* TERMINATES FOR THIS PASS OF AMDPRUIM. FOR NON-VERB EXITS, THE */
*   /* EXIT FLAG FIELD IN THE ECT IN-CORE COPY IS SET TO ZERO SUCH   */
*   /* THAT FURTHER ATTEMPTS TO LOAD THIS MODULE WILL NOT BE MADE    */
*   /* DURING THIS EXEC- UTION OF AMDPRDMP. THIS IS DONE TO ELIMINATE*/
*   /* ISSUANCE OF AMD287I MANY TIMES- IE FOR EACH TCB THAT IS       */
*   /* PROCESSED BY AMDPRDMP.                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0285
*EXTBADLD:                                                         0285
*   LOADCSAV=R1;                    /* SAVE COMPLETION AND RETURN    */
EXTBADLD STH   R1,LOADCSAV                                         0285
*   LOADRSAV=R15;                   /* CODE FROM LOAD                */
         STC   R15,LOADRSAV                                        0286
*   MGTBINDX=MGTABPTR+INDX287I;     /* ADDRESS MSG AMD287I AND       */
         LA    MGTBINDX,48                                         0287
         AL    MGTBINDX,MGTABPTR                                   0287
*   RFY                                                            0288
*     MSGMODNM BASED(MSGADDR+D287MODN);/* ITS MODULE NAME FIELD      */
*   MSGMODNM=ECTMOD;                /* MOVE MODULE NAME TO MSG TEXT  */
         L     @14,MSGADDR(,MGTBINDX)                              0289
         MVC   MSGMODNM+36(8,@14),ECTMOD(ECTABPTR)                 0289
*   RFY                                                            0290
*     MSGCOMPC BASED(MSGADDR+D287COMP);/* ADDRESS COMPL CODE FIELD   */
*   R2=ADDR(MSGCOMPC);              /* SET UP PARAMETERS TO          */
         AH    @14,@CH00435                                        0291
         LR    R2,@14                                              0291
*   R3=ADDR(LOADCSAV);              /* HEX CONVERT INLINE MACRO      */
         LA    R3,LOADCSAV                                         0292
*   GEN(HEXCNVT (2),(3),2);         /* CONVERT COMPL CODE TO PRINT-
*                                      ABLE HEX                      */
         HEXCNVT (2),(3),2
*   RFY                                                            0294
*     MSGRETCD BASED(MSGADDR+D287RETC);/* ADDRESS RET CODE FIELD     */
*   R2=ADDR(MSGRETCD);              /* SET UP PARAMETERS TO          */
         LA    R2,50                                               0295
         AL    R2,MSGADDR(,MGTBINDX)                               0295
*   R3=ADDR(LOADRSAV);              /* HEX CONVERT INLINE MACRO      */
         LA    R3,LOADRSAV                                         0296
*   GEN(HEXCNVT (2),(3),1);         /* CONVERT RET CODE TO PRINTABLE
*                                      HEX                           */
         HEXCNVT (2),(3),1
*   CALL MSGWRITR;                  /* WRITE IT                      */
*                                                                  0298
         BAL   @14,MSGWRITR                                        0298
*   /*****************************************************************/
*   /*                                                               */
*   /* IF PROCESSING A VERB, TERMINATE THIS PASS OF UIM. IF FORMAT   */
*   /* EXIT, ZERO ECT ENTRY FLAGS FIELD SO WONT TRY TO LOAD IT AGAIN */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0299
*   IF EXITFLAG=ZVERB THEN          /* IF VERB EXIT,                 */
         CLI   EXITFLAG(COMPTR),X'00'                              0299
         BE    @RT00299                                            0299
*     GOTO LOADRETS;                /* TERMINATE THIS PASS           */
*   ECTFLAG=0;                      /* DONT ALLOW THIS MOD TO BE   0301
*                                      LOADED AGAIN THIS JOBSTEP     */
         MVI   ECTFLAG(ECTABPTR),X'00'                             0301
*   GOTO FMTSRCHC;                  /* CONTINUE SEARCH OF ECT        */
         B     FMTSRCHC                                            0302
*                                                                  0303
*   /*****************************************************************/
*   /*                                                               */
*   /* AMDMEMAR- MEMORY ACCESS ROUTINE INTERFACES WITH AMDPRDMP TO   */
*   /* RETRIEVE DUMP DATA FOR EXIT MODULES                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0303
*AMDMEMAR:                                                         0303
*   GENERATE REFS(MARSAVE);                                        0303
*                                                                  0303
AMDMEMAR DS    0H                                                  0303
         USING *,R15
         STM   R14,R12,12(R13)
         L     BASE1,MARBASRG
         DROP  R15
         ST    R13,MARSAVE+4
         LA    R14,MARSAVE
         ST    R14,8(R13)
         LR    R13,R14
         B     MAR
MARBASRG DC    A(@PSTART)
*   /*****************************************************************/
*   /*                                                               */
*   /* ***NOTE*** CARE MUST BE TAKEN TO INSURE THAT NO VARIABLE      */
*   /* REFERENCED HERE AND IN UIM MAINLINE BOTH, ARE EVER ASSIGNED TO*/
*   /* REGISTERS DUE TO THE INTERVENING EXIT MODULE AND SAVE AREA    */
*   /* LINKAGES BETWEEN UIM MAINLINE AND THIS ROUTINE.               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0304
*MAR:                                                              0304
*   CURENSAV=R13;                   /* SET UP FOR BRREAD ERROR RTN   */
MAR      ST    R13,CURENSAV                                        0304
*   COMPTR=COMPTRSV;                /* RESTORE PTR TO COMMON         */
         L     COMPTR,COMPTRSV                                     0305
*   IF USTOPSW=ON THEN              /* IF IN STOP PROCESSING         */
         TM    USTOPSW,B'01000000'                                 0306
         BNO   @RF00306                                            0306
*RDERRET:                           /* THEN DO NOT SATISFY           */
*     R15=4;                        /* READ REQUEST                  */
RDERRET  LA    R15,4                                               0307
*   ELSE                            /* OTHERWISE-                    */
*     DO;                                                          0308
         B     @RC00306                                            0308
@RF00306 DS    0H                                                  0309
*       R2=R1->ADPLASID;            /* GET REQUESTED ASID            */
         LH    R2,ADPLASID(,R1)                                    0309
*       GENERATE REFS(BRRDDATA) FLOWS(UIMBRDER);                   0310
      BRREAD (R0),DATA,ASID=(R2)       READ FOR REQUESTED DATA
*       R0=R1;                      /* MOVE DATA ADDRESS TO REG 0    */
         LR    R0,R1                                               0311
*       R15=0;                      /* FOR RETURN TO CALLER INDICATE
*                                      READ WAS SUCCESSFUL           */
         SLR   R15,R15                                             0312
*     END;                                                         0313
*   GENERATE FLOWS(EXITMOD) NOSEQFLOW;                             0314
@RC00306 DS    0H                                                  0314
         L     R13,4(R13)
         L     R14,12(R13)
         LM    R1,R12,24(R13)
         BR    R14
*                                                                  0315
*   /*****************************************************************/
*   /*                                                               */
*   /* UIMBRDER- EXIT INTERFACE BRREAD ERROR HANDLER ENTERED WHEN    */
*   /* BRREAD DATA FOR AN EXIT MODULE FAILS OR WHEN AMDPRUIM ITSELF  */
*   /* ISSUES BRREAD INIT THAT FAILS                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0315
*UIMBRDER:                                                         0315
*   GENERATE REFS(CURENSAV);                                       0315
UIMBRDER DS    0H                                                  0315
         USING *,R15
         L     R13,CURENSAV
         LM    R14,R12,12(R13)
         DROP  R15
*   IF CNTRLSW=ON THEN              /* IF EXIT MODULE WAS IN CONTROL */
         TM    CNTRLSW,B'00010000'                                 0316
         BO    @RT00316                                            0316
*     GOTO RDERRET;                 /* THEN BRREAD DATA FAILED.    0317
*                                      RETURN HIM A CODE OF 4        */
*                                                                  0317
*   /*****************************************************************/
*   /*                                                               */
*   /* BRREAD INIT ISSUED BY UIM FAILED- RESTORE ERROR & STOP HANDLER*/
*   /* ADDRESSES IN COMMON THEN PASS CONTROL TO MAIN ERROR HANDLER IN*/
*   /* CTL TO HANDLE INIT ERROR.                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0318
*   ERRADDR=ERRHANSV;               /* RESTORE COMMON- ERROR HANDLER */
         L     @14,ERRHANSV                                        0318
         ST    @14,ERRADDR(,COMPTR)                                0318
*   STOPEXIT=STPHANSV;              /* AND STOP HANDLER ADDRESSES    */
         MVC   STOPEXIT(4,COMPTR),STPHANSV                         0319
*   R15=ERRADDR;                    /* AND GO TO PRDMP               */
         LR    R15,@14                                             0320
*   GOTO ERRHAND;                   /* MAIN ERROR HANDLER            */
         BR    R15                                                 0321
*                                                                  0322
*   /*****************************************************************/
*   /*                                                               */
*   /* AMDWRITR- EXIT WRITE INTERFACE ROUTINE INTERFACES WITH        */
*   /* AMDPRDMP TO WRITE OUTPUT FOR EXIT MODULES                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0322
*AMDWRITR:                                                         0322
*   GENERATE REFS(WIRSAVE);                                        0322
*                                                                  0322
AMDWRITR DS    0H                                                  0322
         USING *,R15
         STM   R14,R12,12(R13)
         L     BASE1,WIRBASRG
         DROP  R15
         ST    R13,WIRSAVE+4
         LA    R14,WIRSAVE
         ST    R14,8(R13)
         LR    R13,R14
         B     WIR
WIRBASRG DC    A(@PSTART)
*   /*****************************************************************/
*   /*                                                               */
*   /* ***NOTE*** CARE MUST BE TAKEN TO INSURE THAT NO VARIABLE      */
*   /* REFERENCED HERE AND IN UIM MAINLINE BOTH, ARE EVER ASSIGNED TO*/
*   /* REGISTERS DUE TO THE INTERVENING EXIT MODULE AND SAVE AREA    */
*   /* LINKAGES BETWEEN UIM MAINLINE AND THIS ROUTINE.               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0323
*WIR:                                                              0323
*   CURENSAV=R13;                   /* SET UP FOR BRWRITE STOP RTN.  */
WIR      ST    R13,CURENSAV                                        0323
*   COMPTR=COMPTRSV;                /* RESTORE PTR TO COMMON         */
         L     COMPTR,COMPTRSV                                     0324
*   IF USTOPSW=OFF THEN             /* IF NOT IN STOP PROCESSING,    */
         TM    USTOPSW,B'01000000'                                 0325
         BNZ   @RF00325                                            0325
*     DO;                           /* THEN WRITE EXITS OUTPUT.      */
*       CURBUFER(1:120)=EIOUTBUF;   /* MOVE EXITS OUTPUT BUFFER    0327
*                                      CONTENTS TO CURBUF + 1        */
         L     @14,CURBUF(,COMPTR)                                 0327
         MVC   CURBUFER+1(120,@14),EIOUTBUF                        0327
*       GEN(BRWRITE 1)              /* WRITE IT                      */
*       FLOWS(UIMSTOP);                                            0328
         BRWRITE 1
*       PRNTSW=ON;                  /* INDICATE THAT EXIT WROTE AT 0329
*                                      LEASt 1 LINE OF OUTPUT        */
         OI    PRNTSW,B'00001000'                                  0329
*     END;                                                         0330
*WIRTERM:                                                          0331
*   EIBUFFER='';                    /* BLANK OUTPUT BUFFER           */
@RF00325 DS    0H                                                  0331
WIRTERM  MVI   EIBUFFER,C' '                                       0331
         MVC   EIBUFFER+1(121),EIBUFFER                            0331
*   GENERATE FLOWS(EXITMOD) NOSEQFLOW;                             0332
         L     R13,4(R13)
         LM    R14,R12,12(R13)
         BR    R14
*                                                                  0333
*   /*****************************************************************/
*   /*                                                               */
*   /* UIMSTOP- EXIT INTERFACE STOP HANDLER GETS CONTROL WHEN BRWRITE*/
*   /* ISSUED BY UIM FOR ITSELF, OR FOR AN EXIT MODULE THROUGH       */
*   /* AMDWRITR, DETECTS STOP ENTERED AT SYSTEM CONSOLE.             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0333
*UIMSTOP:                                                          0333
*   GENERATE REFS(CURENSAV);                                       0333
UIMSTOP  DS    0H                                                  0333
         USING *,R15
         L     R13,CURENSAV
         LM    R14,R12,12(R13)
         DROP  R15
*   CONSTOP=ON;                     /* INDICATE STOP ENTERED FROM  0334
*                                      CONSOLE                       */
*   USTOPSW=ON;                     /* PUT UIM IN STOP MODE          */
         OI    CONSTOP,B'01100000'                                 0335
*   IF CNTRLSW=ON THEN              /* IF WE ISSUED THE BRWRITE ON 0336
*                                      BEHALF OF AN EXIT MODULE THAT
*                                      IS IN CONTROL, THEN           */
         TM    CNTRLSW,B'00010000'                                 0336
         BO    @RT00336                                            0336
*     GOTO WIRTERM;                 /* CONTINUE IN AMDWRITR OTHERWISE
*                                      UIM ISSUED IT ON              */
*   ELSE                            /* ITS OWN BEHALF, THEREFORE-    */
*     GEN(DELETE EPLOC=ELOADMOD);   /* INSURE THAT EXIT MODULE IS  0338
*                                      DELETED BEFORE                */
         DELETE EPLOC=ELOADMOD
*   GOTO LOADRETS;                  /* TERMINATE THIS PASS OF UIM    */
         B     LOADRETS                                            0339
*                                                                  0340
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING SUBROUTINE WRITES AMDPRUIMS MESSAGES TO THE     */
*   /* SYSPRINT DATA SET VIA THE BRPRTMSG AMDPRDMP MACRO CALL. IF    */
*   /* INPUT IS FROM THE OPERATORS CONSOLE, THE MESSAGE IS ALSO      */
*   /* WRITTEN TO THE OPERATOR. THE ADDRESS AND LENGTH OF THE MSG TO */
*   /* BE PRINTED ARE PASSED TO THIS SUBROUTINE IN MSGADDR AND MSGLEN*/
*   /* RESPECTIVELY.                                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0340
*MSGWRITR:                                                         0340
*   PROC;                                                          0340
MSGWRITR STM   @14,@12,@SA00002                                    0340
*   R1=MSGADDR;                     /* SET UP PARAMETERS FOR         */
         L     R1,MSGADDR(,MGTBINDX)                               0341
*   R2=MSGLEN;                      /* BRPRTMSG CALL                 */
         L     R2,MSGLEN(,MGTBINDX)                                0342
*   GENERATE REFS(APRTMSG);                                        0343
    BRPRTMSG (R1),(R2)                 WRITE MSG TO SYSPRINT
*   IF RDRSW=OFF THEN               /* INPUT FROM CONSOLE?           */
         TM    RDRSW(COMPTR),B'00000001'                           0344
         BNZ   @RF00344                                            0344
*     DO;                           /* YES-                          */
*       R1=R1-4;                    /* INCLUDE ROUTER & DESCRIPTORS  */
         SL    R1,@CF00155                                         0346
*       GEN(WTO MF=(E,(1)));        /* ISSUE WTO                     */
         WTO MF=(E,(1))
*     END;                                                         0348
*   END MSGWRITR;                   /* RETURN TO CALLER              */
@EL00002 DS    0H                                                  0349
@EF00002 DS    0H                                                  0349
@ER00002 LM    @14,@12,@SA00002                                    0349
         BR    @14                                                 0349
*                                                                  0350
*   /*****************************************************************/
*   /*                                                               */
*   /* TERMINATION ENTRY POINT FOR AMDPRDMP EXIT INTERFACE. CALLED   */
*   /* ONCE BY AMDPRXIT DURING AMDPRDMP TERMINAL PROCESSING. FUNCTION*/
*   /* IS TO DELETE EXIT INTERFACE SECONDARY LOADS- AMDPRECT AND     */
*   /* AMDPRFMT IF THE EXIT INTERFACE WAS ACTIVE.                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0350
*AMDUSRDL:                                                         0350
*   ENTRY;                                                         0350
@EP00350 DS    0H                                                  0351
*   IF FAILSW=OFF THEN              /* WAS EXIT INTERFACE ACTIVE?    */
         TM    FAILSW,B'10000000'                                  0351
         BNZ   @RF00351                                            0351
*     DO;                           /* YES- PERFORM TERMINAL PROC    */
*       GENERATE;                                                  0353
         DELETE EP=AMDPRECT            DELETE EXIT INTERFACE SECOND-
         DELETE EP=AMDPRFMT            ARY LOADS
*       FAILSW=ON;                  /* RESET INIT FAILED SW- INTER-  */
         OI    FAILSW,B'10000000'                                  0354
*     END;                          /* FACE NO LONGER ACTIVE         */
*   END AMDPRUIM                    /* RETURN TO AMDPRXIT            */
*                                                                  0356
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (COMMON  )                                       */
*/*%INCLUDE SYSLIB  (IHAABDPL)                                       */
*                                                                  0356
*       ;                                                          0356
         B     @EL00001                                            0356
@DATA    DS    0H
@CH00075 DC    H'1'
@CH00435 DC    H'45'
@CH00525 DC    H'70'
@SM00570 MVC   MSGVRBNM(0,@10),VERBMAP(@14)
@SM00575 MVC   EXITVERB(0),VERBMAP(@14)
         DS    0F
@SA00001 DS    18F
@SA00002 DS    15F
         DS    0F
@CF00155 DC    F'4'
@CH00155 EQU   @CF00155+2
@CF00042 DC    F'8'
@CF00239 DC    F'12'
@CF00212 DC    F'20'
@CH00212 EQU   @CF00212+2
         DS    0D
ABDPLPTR DC    AL4(EXITPLST)
ECTADDR  DC    A(0)
PRDMPEXT DC    A(0)
MGTABPTR DC    AL4(AMDUIMMG)
ERRHANSV DC    A(0)
STPHANSV DC    A(0)
CURENSAV DC    A(0)
COMPTRSV DC    A(0)
LOADCSAV DS    H
ECTNUM   DC    H'0'
LOADRSAV DS    FL1
@TS00001 DS    CL1
@CC00472 DC    C'AMDPRECT'
@CC00474 DC    C'AMDPRFMT'
@CC00531 DC    C'CVTMAP'
         DS    CL4
EXITPLST DS    CL56
PLSTCOPY DS    CL56
         ORG   PLSTCOPY
EIPLTCB  DC    A(0)
EIPLASID DC    H'0'
EIPLSBPL DC    AL1(0)
EIPLFLAG DC    X'80'
EIPLBUF  DC    AL4(EIOUTBUF)
EIPLPRNT DC    AL4(AMDWRITR)
EIPLCVT  DC    A(0)
EIPLMEMA DC    AL4(AMDMEMAR)
EIPLFRMT DC    A(0)
EIPLCOMX DC    16X'00'
EIPLFMTX DC    8X'00'
EIPLEXT  DC    AL4(PRDMPEXT)
         ORG   PLSTCOPY+56
EIBUFFER DS    CL122
         ORG   EIBUFFER
@NM00055 DS    CL1
EIOUTBUF DS    CL120
@NM00056 DS    CL1
         ORG   EIBUFFER+122
EIPROCSW DC    X'80'
         ORG   EIPROCSW
FAILSW   DS    BL1
USTOPSW  EQU   EIPROCSW+0
CONSTOP  EQU   EIPROCSW+0
CNTRLSW  EQU   EIPROCSW+0
PRNTSW   EQU   EIPROCSW+0
EIPROCRV EQU   EIPROCSW+0
         ORG   EIPROCSW+1
EXITVERB DS    CL8
         ORG   EXITVERB
@NM00058 DC    8CL1' '
         ORG   EXITVERB+8
ELOADMOD DS    CL8
         DS    CL1
MARSAVE  DS    CL72
         ORG   MARSAVE
@NM00060 DC    72X'00'
         ORG   MARSAVE+72
WIRSAVE  DS    CL72
         ORG   WIRSAVE
@NM00061 DC    72X'00'
         ORG   WIRSAVE+72
EXSTORCM DC    CL58'UNABLE TO SATISFY STORAGE REQUEST FOR EXIT MODULE xC
               xxxxxxx'
         ORG   EXSTORCM
@NM00062 DS    CL50
COMMODNM DS    CL8
         ORG   EXSTORCM+58
         DS    CL2
PATCH    DC    45F'0'
AMDPRUIM CSECT
*
DTAE     EQU   32                  DATA EBCDIC BIT
DTAC     EQU   16                  DATA IN CORE BIT
DTAP     EQU   8                   DATA PTR BIT
DTA      EQU   4                   DATA INCLUDED BIT
LBLP     EQU   2                   LABEL PTR BIT
LBL      EQU   1                   LABEL INCLUDED BIT
AMDPRUIM CSECT
AMDUIMMG CSECT
         DC    AL4(WTO165I+4)
         DC    AL4(44)
         DC    AL4(W165SUFA+4)
         DC    AL4(20)
         DC    AL4(W165SUFB+4)
         DC    AL4(52)
         DC    AL4(W165SUFC+4)
         DC    AL4(52)
         DC    AL4(W165SUFD+4)
         DC    AL4(49)
         DC    AL4(WTO281I+4)
         DC    AL4(61)
         DC    AL4(WTO287I+4)
         DC    AL4(52)
         DC    AL4(WTO288I+4)
         DC    AL4(38)
         DC    AL4(WTO289I+4)
         DC    AL4(30)
WTO165I  WTO   'AMD165I ERROR IN PRECEDING CONTROL STATEMENT',         *
               ROUTCDE=2,DESC=7,MF=L
W165SUFA WTO   'AMD165I INVALID VERB',                                 *
               ROUTCDE=2,DESC=7,MF=L
W165SUFB WTO   'AMD165I DELIMETER ERROR IN OPERAND FIELD OF XXXXXXXX', *
               ROUTCDE=2,DESC=7,MF=L
W165SUFC WTO   'AMD165I INVALID KEYWORD IN OPERAND FIELD OF XXXXXXXX', *
               ROUTCDE=2,DESC=7,MF=L
W165SUFD WTO   'AMD165I SYNTAX ERROR IN OPERAND FIELD OF XXXXXXXX',    *
               ROUTCDE=2,DESC=7,MF=L
WTO281I  WTO   'AMD281I AMDPRDMP EXIT INTERFACE INOPERATIVE- XXXXXXXX,Y*
               YYY ZZ',                                                *
               ROUTCDE=2,DESC=7,MF=L
WTO287I  WTO   'AMD287I UNABLE TO LOAD EXIT MODULE- XXXXXXXX,YYYY ZZ', *
               ROUTCDE=2,DESC=7,MF=L
WTO288I  WTO   'AMD288I NO OUTPUT PRODUCED BY XXXXXXXX',               *
               ROUTCDE=2,DESC=7,MF=L
WTO289I  WTO   'AMD289I VERB IGNORED- XXXXXXXX',                       *
               ROUTCDE=2,DESC=7,MF=L
AMDPRUIM CSECT
TRANSLT  TRT   0(0,R3),NONBLNK(COMPTR)   FIND 1ST NON BLANK
AMDPRUIM CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
EXITRC   EQU   @04
AEXITMOD EQU   @04
NTRYCT   EQU   @06
ECTABPTR EQU   @05
OPRNDLEN EQU   @06
VERBLEN  EQU   @06
MGTBINDX EQU   @04
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
R13      EQU   @13
R15      EQU   @15
COMPTR   EQU   @12
BASE1    EQU   @11
BASE2    EQU   @10
BASE3    EQU   @09
BUFREG   EQU   @06
CNTREG   EQU   @03
COMBASE  EQU   @12
LINEREG  EQU   @08
PREG     EQU   @01
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R14      EQU   @14
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
STOPBASE EQU   @05
COMMON   EQU   0
ERRADDR  EQU   COMMON
VERBGN   EQU   COMMON+4
VERBEND  EQU   COMMON+8
CURBUF   EQU   COMMON+48
CVTADDR  EQU   COMMON+56
SWA      EQU   COMMON+122
RDRSW    EQU   SWA
SWB      EQU   COMMON+123
SWC      EQU   COMMON+124
SWD      EQU   COMMON+125
FLSHMODE EQU   SWD
SWE      EQU   COMMON+126
SWF      EQU   COMMON+127
BUFSW    EQU   COMMON+128
PRSW     EQU   COMMON+129
WTORMSG  EQU   COMMON+133
BLANKS   EQU   COMMON+214
TABLE    EQU   COMMON+659
HEXTABL  EQU   TABLE+63
NONBLNK  EQU   COMMON+1244
AWRITE   EQU   COMMON+1500
APRTMSG  EQU   COMMON+1504
STOPEXIT EQU   COMMON+1528
DCBADDRS EQU   COMMON+1608
@NM00042 EQU   DCBADDRS+16
@NM00043 EQU   @NM00042
QASID    EQU   COMMON+1664
BRRDDATA EQU   COMMON+1984
BRRDINIT EQU   COMMON+1988
AUSRTCBA EQU   COMMON+2016
AUSRASID EQU   COMMON+2020
EXITFLAG EQU   COMMON+2022
I3800SW  EQU   COMMON+2076
TITLEKEY EQU   COMMON+2077
ABDPL    EQU   0
ADPLTCB  EQU   ABDPL
ADPLASID EQU   ABDPL+4
ADPLFLAG EQU   ABDPL+7
ADPLCVT  EQU   ABDPL+16
@NM00057 EQU   0
MSGADDR  EQU   @NM00057
MSGLEN   EQU   @NM00057+4
MSGMODNM EQU   0
MSGVRBNM EQU   0
MSGCOMPC EQU   0
MSGRETCD EQU   0
VERBMAP  EQU   0
ECTENTRY EQU   0
ECTMOD   EQU   ECTENTRY
ECTFLAG  EQU   ECTENTRY+8
ECTVERB  EQU   ECTENTRY+12
EXITMOD  EQU   0
CURBUFER EQU   0
STOPHAND EQU   0
ERRHAND  EQU   0
EXITDLIM EQU   0
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00059 EQU   ECTENTRY+9
ADPLEXT  EQU   ABDPL+52
ADPLFMT2 EQU   ABDPL+48
ADPLFMT1 EQU   ABDPL+44
ADPLCOM4 EQU   ABDPL+40
ADPLCOM3 EQU   ABDPL+36
ADPLCOM2 EQU   ABDPL+32
ADPLCOM1 EQU   ABDPL+28
ADPLFRMT EQU   ABDPL+24
ADPLMEMA EQU   ABDPL+20
ADPLPRNT EQU   ABDPL+12
ADPLBUF  EQU   ABDPL+8
@NM00054 EQU   ADPLFLAG
ADPLSYTM EQU   ADPLFLAG
ADPLSNPR EQU   ADPLFLAG
ADPLSBPL EQU   ABDPL+6
Z9ERRID  EQU   COMMON+2116
Z9SUFLG  EQU   COMMON+2115
Z9SUBITS EQU   COMMON+2100
Z9SVCBUF EQU   COMMON+2096
TITLESTK EQU   TITLEKEY+12
@NM00053 EQU   TITLEKEY
I3800204 EQU   I3800SW
I380080  EQU   I3800SW
I3800ULN EQU   I3800SW
I3800KEY EQU   I3800SW
@NM00052 EQU   I3800SW
@NM00051 EQU   I3800SW
@NM00050 EQU   I3800SW
@NM00049 EQU   I3800SW
CSADDR   EQU   COMMON+2072
@NM00048 EQU   COMMON+2070
TOPICHDR EQU   COMMON+2060
DFLTCSA  EQU   COMMON+2056
LPAMAX   EQU   COMMON+2052
DNUCTOP  EQU   COMMON+2048
XLMAX    EQU   COMMON+2044
DQEMAX   EQU   COMMON+2042
ASCBMAX  EQU   COMMON+2040
TCBMAX   EQU   COMMON+2038
SRBMAX   EQU   COMMON+2036
DDMAX    EQU   COMMON+2034
DEBMAX   EQU   COMMON+2032
JPQMAX   EQU   COMMON+2030
LLEMAX   EQU   COMMON+2028
PQEMAX   EQU   COMMON+2026
RBMAX    EQU   COMMON+2024
@NM00047 EQU   COMMON+2023
AUSRDEL  EQU   COMMON+2012
AUSREXIT EQU   COMMON+2008
AUSRINIT EQU   COMMON+2004
ASRBFMT  EQU   COMMON+2000
AASCBFMT EQU   COMMON+1996
BRRDADJ  EQU   COMMON+1992
BUFERMAP EQU   COMMON+1980
ASCBMAP  EQU   COMMON+1976
CPUMAP   EQU   COMMON+1972
ASIDNDX  EQU   COMMON+1968
@NM00046 EQU   COMMON+1964
HDRTITLE EQU   COMMON+1864
HDRREGS  EQU   COMMON+1696
SACSWCAW EQU   COMMON+1684
ASVTADDR EQU   COMMON+1680
PREFXRGV EQU   COMMON+1676
PREFXRGR EQU   COMMON+1672
CURASCB  EQU   COMMON+1668
IPLCPU   EQU   COMMON+1666
QAPFT    EQU   COMMON+1660
@NM00045 EQU   COMMON+1656
REALMAX  EQU   COMMON+1652
SEGTABOR EQU   COMMON+1648
REALMAP  EQU   COMMON+1644
@NM00044 EQU   COMMON+1641
EDITER   EQU   COMMON+1640
AROOT    EQU   COMMON+1636
AEDITCB  EQU   COMMON+1632
TRCCOUNT EQU   COMMON+1628
ASYSUDCB EQU   @NM00042+1
ENDLIST  EQU   @NM00043
AINDCB   EQU   DCBADDRS+12
ARDRDCB  EQU   DCBADDRS+8
APTRDCB  EQU   DCBADDRS+4
AOUTDCB  EQU   DCBADDRS
ATCBSMRY EQU   COMMON+1604
ATCBSMFR EQU   COMMON+1600
ONGOPTR  EQU   COMMON+1596
AEND     EQU   COMMON+1592
AERRMSGA EQU   COMMON+1584
BUFREINT EQU   COMMON+1580
BUFSUM   EQU   COMMON+1576
APRTSTG  EQU   COMMON+1572
AFORMAT  EQU   COMMON+1568
ASTPROUT EQU   COMMON+1564
APCBENQ  EQU   COMMON+1560
ATCBRTRV EQU   COMMON+1556
ATCBREMV EQU   COMMON+1552
ATCBSAVE EQU   COMMON+1548
QATMERTN EQU   COMMON+1544
ALOADER  EQU   COMMON+1540
AEREXIT  EQU   COMMON+1536
SYNMSGA  EQU   COMMON+1532
ARGNBND  EQU   COMMON+1524
AWRDCNVT EQU   COMMON+1520
AADRCNVT EQU   COMMON+1516
AFMTLINE EQU   COMMON+1512
ASYNTAX  EQU   COMMON+1508
BLNK     EQU   COMMON+988
@NM00041 EQU   COMMON+972
@NM00040 EQU   COMMON+915
EBCTABL  EQU   HEXTABL+10
@NM00039 EQU   HEXTABL
@NM00038 EQU   TABLE
CAPTABL  EQU   COMMON+403
TITLEPGE EQU   COMMON+394
@NM00037 EQU   COMMON+392
TITLETME EQU   COMMON+379
@NM00036 EQU   COMMON+377
TITLEDTE EQU   COMMON+364
@NM00035 EQU   COMMON+362
TITLEMOD EQU   COMMON+347
TITLEMSG EQU   COMMON+283
MSG2     EQU   COMMON+257
MSG1     EQU   COMMON+231
STOP     EQU   COMMON+227
TITLE    EQU   COMMON+222
@NM00034 EQU   COMMON+130
@NM00033 EQU   PRSW
@NM00032 EQU   PRSW
PRNTREAL EQU   PRSW
PRNTRL   EQU   PRSW
TTLSW    EQU   PRSW
@NM00031 EQU   PRSW
QSEGTBSW EQU   PRSW
@NM00030 EQU   PRSW
@NM00029 EQU   BUFSW
PREFM    EQU   BUFSW
@NM00028 EQU   BUFSW
@NM00027 EQU   BUFSW
@NM00026 EQU   BUFSW
@NM00025 EQU   BUFSW
@NM00024 EQU   BUFSW
@NM00023 EQU   BUFSW
@NM00022 EQU   SWF
QUT1LOD  EQU   SWF
@NM00021 EQU   SWF
PAGEOK   EQU   SWF
DMPIC    EQU   SWF
QSADMP   EQU   SWF
NUCTFRMC EQU   SWF
QPRDINIT EQU   SWF
@NM00020 EQU   SWE
@NM00019 EQU   SWE
@NM00018 EQU   SWE
BUILDMAP EQU   SWE
TITLESW  EQU   SWE
RESPC    EQU   SWE
@NM00017 EQU   SWE
STOPSW   EQU   SWE
@NM00016 EQU   SWD
GPRSFND  EQU   SWD
CONTSW   EQU   SWD
NOLOADSW EQU   SWD
NOSTDMG  EQU   SWD
@NM00015 EQU   SWD
@NM00014 EQU   SWD
@NM00013 EQU   SWC
@NM00012 EQU   SWC
@NM00011 EQU   SWC
EDITSW   EQU   SWC
TREADIN  EQU   SWC
POSITSW  EQU   SWC
SETFLSH  EQU   SWC
MSTRSW   EQU   SWC
@NM00010 EQU   SWB
@NM00009 EQU   SWB
QSYSUT2  EQU   SWB
ENDSW    EQU   SWB
@NM00008 EQU   SWB
@NM00007 EQU   SWB
FMTERR   EQU   SWB
IOERR    EQU   SWB
SETCVTSW EQU   SWA
@NM00006 EQU   SWA
GOSW     EQU   SWA
@NM00005 EQU   SWA
@NM00004 EQU   SWA
@NM00003 EQU   SWA
@NM00002 EQU   SWA
LINENUM  EQU   COMMON+120
LINENUMB EQU   COMMON+118
SIXTEEN  EQU   COMMON+116
TWELVE   EQU   COMMON+114
ELEVEN   EQU   COMMON+112
HTEN     EQU   COMMON+110
EIGHT    EQU   COMMON+108
SEVEN    EQU   COMMON+106
FIVE     EQU   COMMON+104
FOUR     EQU   COMMON+102
THREE    EQU   COMMON+100
TWO      EQU   COMMON+98
ONEA     EQU   COMMON+96
READTM   EQU   COMMON+92
RDERCNT  EQU   COMMON+88
READNO   EQU   COMMON+84
RDENTRY  EQU   COMMON+80
@NM00001 EQU   COMMON+78
FILESEQ  EQU   COMMON+76
INDD     EQU   COMMON+68
STORSIZE EQU   COMMON+64
PCBPTR   EQU   COMMON+60
TCBLIST  EQU   COMMON+52
PAGENUMB EQU   COMMON+44
LINECNT  EQU   COMMON+40
SIX      EQU   COMMON+36
NUCTOP   EQU   COMMON+32
WORK1    EQU   COMMON+24
DELIMCD  EQU   COMMON+20
KYWDEND  EQU   COMMON+16
KYWDBGN  EQU   COMMON+12
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00117 EQU   @EL00001
@RT00133 EQU   VRBEXIT
@RF00180 EQU   @EL00001
@RF00277 EQU   LOADRETS
@RT00299 EQU   LOADRETS
@RT00316 EQU   RDERRET
@RT00336 EQU   WIRTERM
@RF00344 EQU   @EL00002
@RF00351 EQU   @EL00001
@ENDDATA EQU   *
         END   AMDPRUIM,(C'PLS2203',0701,76189)
