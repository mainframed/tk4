AMDPRMST START
         TITLE 'AMDPRMST - GET MASTER ROUTINE'
* C 342000,350000,350700,376000,377000,379910                    Y02006
* C 429000-430000,442500-442600,449000,467500,499000,501000      Y02006
* C 506000,525100,554500,564500-565000,574500-575000             Y02006
* C 611700-616200,621338,698200-698400,700100-717000,726000      Y02006
* C 755000-756000,763000,763600,767000-769000,773500-774000      Y02006
* C 776500-777000,788000,795500-801000,806500,829500,830600      Y02006
* C 847500,855000,890700-890800                                  Y02006
* A 336500-336800,339500-339700                                  Y02006
* A 340500,344600,345200,345700,350600-350900                    Y02006
* A 367500-368000,377100-377984,380000-380500,418100-426500      Y02006
* A 441500-442000,446000,446600,450500-456500,488500-488600      Y02006
* A 446540-446596,504500-505800,525600-526498                    Y02006
* A 531200-554360,611100-611120,616940-620719,626500             Y02006
* A 727600-727956,756000-756920,775500-775998,827500-827600      Y02006
* A 765500,771100-771600                                         Y02006
* A 830972,832500,833200-833555,847800-847920                    Y02006
* A 853500-853700,854100-854200,874600-874992,890500-890600      Y02006
* A 890940-891000                                                Y02006
* D 341000-341200,344000-346000,350500-350600,368000-370000      Y02006
* D 373000-375000,379000-412000,426000-427000,442000,446500      Y02006
* D 451000-462000,469000-479000,532000-546000,548500             Y02006
* D 554500-559000,565000-569000,575000-608000,612080-615000      Y02006
* D 617000-618000,637000-638000,701000-715000,749000-751800      Y02006
* D 777000-781000,796000-797000,813000-817000,830972-830980      Y02006
* D 857000-857500                                                Y02006
* A 336000,340000-344600,347000-350500,361000,371000-385000      Y01980
* A 389000-405000,419000-446500,448000,452000,454000,457500      Y01980
* A 460000-467500,483000-484000,498000-499000                    Y01980
* A 504000,506000-507000,523000,532000-549000,554500-555000      Y01980
* A 560000,565000,568000-570000,575000,580000,585000             Y01980
* A 587000-589000,593000-594000,603500-620000                    Y01980
* A 624000-635000,647000,706000,749000-833992,841000             Y01980
* A 846000-865000,873000-874000,885000-891000                    Y01980
* A 350600,394100-394600,890700                                  YM1463
* A 829500,830500-830600,830800-831000,833940-833944             YM1473
* A 833992-833999,841500,854500,858000-858500                    YM1473
* C 575000,611120                                                YM4501
* A 833992-833999,841500,854500,858000-858500                    YM1473
* C 575000,611120                                               @YM4501
* /* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = AMDPRMST
*
*02*     CSECT NAME - AMDPRMST, AMDPRMSM, AMDPRBIT              OZ13033
*
*01*  DESCRIPTIVE-NAME = GET MASTER ROUTINE
*
*01*  COPYRIGHT = NONE
*
*01*  STATUS - OS/VS2 RELEASE 03.7          SU17 SUPPORT        OZ13033
*
*01*  FUNCTION = PRIMARY COMMON INITIALIZATION ROUTINE FOR AMDPRDMP
*
*02*     OPERATION = AMDPRMST EXTRACTS FREQUENTLY NEEDED INFORMATION
*        FROM THE DUMP DATA SET BY USING THE BRREAD PRIVATE MACRO. IT
*        THEN STORES THIS INFORMATION IN THE COMMON CSECT. A COMPLETE
*        LIST OF THE DATA THAT IS STORED MAY BE FOUND IN THE OUTPUT
*        SECTION. IF ANY ERRORS OCCUR DURING DUMP INITIALIZATION,
*        APPROPRIATE MESSAGES ARE ISSUED AND PROCESSING IS CONTINUED IF
*        AT ALL POSSIBLE. IF A DUMP TITLE WAS CONTAINED IN THE HEADER
*        RECORD, THIS TITLE IS PRINTED ON THE FIRST PAGE OF THE DUMP
*        LISTING.
*
*        SOME SPECIAL PROCESSING THAT MST PERFORMS INCLUDES THE
*        FOLLOWING:
*
*        IF THE CVT ADDRESS AS DETERMINED FROM EITHER CVTADDR OR
*        LOCATION X'4C' IS ZERO, THE DUMP DATA SET IS SCANNED FOR THE
*        INSTRUCTION SEQUENCE SVC 3 FOLLOWED BY A BR 14 (USUALLY FOUND
*        AT LOCATION CVT +X'50') IN AN ATTEMPT TO LOCATE THE CVT. FOR
*        VIRTUAL DUMPS, THE ASIDNDX AND VIRTUAL MAPS CREATED BY
*        AMDPREAD ARE USED TO ACCESS RECORDS KNOWN TO BE PRESENT. FOR
*        REAL DUMPS, THE REAL MAPS ARE USED IF BRREAD ERRORS CAUSE
*        ADDRESS GAPS.  REAL STORAGE IS SEARCHED TO THE TOP OF THE
*        NUCLEUS. (NUCTOP IN COMMON).
*
*        THE SEGMENT TABLE ORIGIN FOUND AT LOCATION X'31C' OR FROM A
*        SEGTAB= VERB WILL BE VALIDATED BY ACCESSING THE SEGMENT TABLE
*        THEN ACCESSING THE FIRST PAGE TABLE (REFERENCES LOCATION ZERO
*        OF DUMPED STORAGE).  THE FIRST EIGHT BYTES OF THIS PAGE TABLE
*        WILL BE COMPARED TO AN IMAGE OF THE FIRST PAGE TABLE. IF THIS
*        TEST FAILS A MESSAGE IS ISSUED INDICATING THE ERROR, SEGTABOR
*        IS ZEROED, AND FURTHER PROCESSING IS ATTEMPTED.
*
*        AMDPRMST ESTABLISHES AN ERROR HANDLER BY STORING THE ADDRESS
*        OF THE ERROR ROUTINE IN ARRADDR IN COMMON. SHOULD AN ERROR
*        OCCUR DURING AMPREMST PROCESSING, THIS ERROR HANDLER IS GIVEN
*        CONTROL.
*
*01*   NOTES = SEE SPECIFIC COMMENTS THAT FOLLOW
*
*02*     DEPENDENCIES = CORE LOCATION X'4C' IS USED TO GET THE ADDRESS
*        OF THE CVT IF IT WAS NOT SPECIFIED ON A USER CONTROL STATEMENT
*        OR IN A DSS OR SVCDUMP HEADER.
*          CVT + 80 - CONTAINS SVC 3 AND BR 14 INSTRUCTIONS
*        ('0A0307FE'X) - USED TO VALIDITY CHECK THE CVT
*          CORE LOCATION X'31C' IS USED TO GET THE SEGMENT TABLE
*        ADDRESS WHEN INPUT IS FROM AMDSADMP.
*
*03*        CHARACTER-CODE-DEPENDENCIES = EBCDIC
*
*02*     RESTRICTIONS = FOR AMDSADMP INPUT, AMDPRMST GETS THE CURRENT
*        ASID FROM CONTROL BLOCKS IN THE DUMP DATA SET. IT IS IMPORTANT
*        THAT THIS VALUE NOT BE PUT IN THE QASID FIELD IN COMMON UNTIL
*        AFTER ALL OF AMDPRMST'S BRREAD'S ARE ISSUED. THIS IS DUE TO
*        AMDPRRDC'S HANDLING OF ASID'S.
*
*02*     REGISTER-CONVENTIONS = DEFINED IN EQUATES MACRO
*
*02*     PATCH-LABEL = PATCH - RESERVED FOR FUTURE USE
*
*01*  MODULE-TYPE = PROCEDURE
*
*02*     PROCESSOR = ASSEMBLER
*
*02*     MODULE SIZE - 4514 BYTES   (11A2 HEX)                  OZ13033
*
*02*     ATTRIBUTES = PROBLEM PROGRAM REGION, REUSABLE
*
*01*  ENTRY-POINT = AMDPRMST
*
*02*     PURPOSE = DUMP DATA SET INITIALIZATION
*
*02*     LINKAGE = BALR FROM AMDPRRDC INITIALIZATION ROUTINE
*
*02*     INPUT = ON ENTRY TO MODULE AMDPRMST, GENERAL REGISTER 12
*        CONTAINS THE ADDRESS OF THE AMDPRDMP COMMON CSECT, AMDPRCOM.
*
*        INFORMATION OBTAINED FOR COMMON BY AMDPRMST IS READ FROM
*        THE DUMP DATA SET USING THE BRREAD PRIVATE MACRO INSTRUCTION.
*        THIS MACRO GENERATES THE CALLING SEQUENCE TO MODULE
*        AMDPRRDC.  A COMPLETE LIST OF WHICH DATA IN THE DUMP DATA
*        SET IS REFERENCED BY AMDPRMST MAY BE FOUND UNDER OUTPUT.
*        SOME INFORMATION IS ALSO OBTAINED FROM THE DUMP HEADER RECORD
*        WHICH IS PLACED IN COMMON BY AMDPREAD OR AMDPRLOD WHEN
*        BUILDING DUMP MAPS.
*
*        IF CVTADDR IS NON-ZERO ON ENTRY TO MST, IT IS ASSUMED TO
*        CONTAIN THE ADDRESS OF THE CVT IN THE DUMP SUSTEM. THIS
*        VALUE MAY HAVE COME FROM THE DUMP HEADER RECORD (IF SETCVTSW
*        IN SWA IN COMMON EQUALS 0) OR IT MAY HAVE BEEN SPECIFIED BY
*        THE USER (IN WHICH CASE SETCVTSW EQUALS ONE). IN EITHER CASE
*        THE VALUE IS CHECKED FOR POINTING TO A VALID CVT AND IF THE
*        CHECKING FAILS, A MESSAGE IS ISSUED INDICATING THAT THE CVT
*        ADDRESS MAY NOT BE VALID. IF CVTADDR IS ZERO ON ENTRY TO
*        MST, THE CVT ADDRESS IS TAKEN FROM LOCATION X'4C' IN THE
*        DUMP DATA SET.
*
*        IF QSEGTBSW IN PRSW OF COMMON IS ON WHEN AMDPRMST RECEIVES
*        CONTROL, THEN THE SEGMENT TABLE ORIGIN ADDRESS HAS BEEN
*        SPECIFIED BY THE USER WITH THE SEGTAB= CONTROL STATEMENT
*        AND IS ALREADY IN SEGTABOR IN COMMON.
*
*02*     OUTPUT = SEE OUTPUT UNDER EXIT SECTION BELOW
*
*02*     REGISTERS-SAVED = ALL GENERAL PURPOSE REGISTERS
*
*02*     REGISTER-USAGE = REGISTER 4 IS USED AS A LINKAGE REGISTER TO
*        THE SEGCHK AND RDCPUST ROUTINES, AND IT IS ALSO USED AS THE
*        BASE REGISTER FOR THE ASVT, PVT, AND ASCB MACROS.
*
*        REGISTER 6 IS USED TO CONTAIN THE ERROR RETURN ADDRESS FOR
*        RETURNS FROM THE BRREAD ERROR HANDLER.
*
*        REGISTER 8 IS USED AS BASE REGISTER FOR THE CVT DSECT.
*
*        REGISTER 9 IS THE LINKAGE REGISTER TO THE MPRTMSG ROUTINE.
*
*        REGISTER 11 IS BASE REGISTER FOR THE MODULE.
*
*        REGISTER 12 POINTS TO THE COMMON CSECT, AMDPRCOM.
*
*02*     REGISTERS-RESTORED = 0-14
*
*01*  EXIT-NORMAL = GMSTRET1
*
*02*     CONDITIONS = COMPLETION OF MST PROCESSING
*
*02*     OUTPUT = THE FOLLOWING FIELDS IN THE COMMON CSECT ARE
*        INITIALIZED BY AMDPRMST:
*        1. CVTADDR - ADDRESS OF CVT IN DUMP SYSTEM (SEE CVTADDR UNDER
*           INPUT).
*        2. CURASCB - ADDRESS OF CURRENT ASCB (CONTENT OF FULL WORD
*           ADDRESSED BY CVTTCBP+12 IF QASID IS ZERO ON ENTRY TO MST.
*           IF QASID WAS NOT ZERO, CURASCB CONTAINS THE ADDRESS OF THE
*           ASCB ASSOCIATED WITH THE ASID AS DETERMINED FROM THE ASCB.)
*        3. NUCTOP - UPPER BOUND OF NUCLEUS (CVTNUCB)
*        4. TITLEDTE - DATE OF DUMP TAKEN FROM CVT (CVTDATE)
*        5. TITLETME - TIME OF DUMP (TIME OF DAY VALUE) FROM HEADER AS
*           CONVERTED BY THE TODCNVRT ROUTINE
*        6. SEGTABOR - TAKEN FROM LOCATION X'31C' IN A REAL DUMP IF NOT
*           SPECIFIED BY THE USER VIA THE SEGTAB= VERB.
*        7. REALMAX - HIGHEST REAL ADDRESS (CVTEORM)
*        8. QAPFT - ADDRESS OF PAGE FRAME TABLE TAKEN FROM PAGE VECTOR
*           TABLE +X'58' (CVTPVTP).
*        9. ASVTADDR - ADDRESS OF THE ADDRESS SPACE VECTOR TABLE
*           (CVTASVT)
*       10. QASID - THE CURRENT ASID AT THE TIME OF THE DUMP
*           (ASCBASID FROM THE CURRENT ASCB IF ASID SPECIFIED IN THE
*           HEADER RECORD WAS ZERO.)
*       11. PREFXRGR - THE REAL VALUE IN THE PSA PREFIX REGISTER FOR
*           AMDSADMP INPUT.
*       12. PREFXRGV - THE VIRTUAL VALUE IN THE PSA PREFIX REGISTER FOR
*           AMDSADMP INPUT.
*       13. LINECNT - MODIFIED TO CONTAIN AN UPDATED LINE COUNT TO
*           REMAIN WITHIN THE LIMIT SET BY DEFAULT OR USER IF A TITLE
*           IS OUTPUT BY MST.
*       14. MSTRSW IN SWC - SET ON TO INDICATE THAT MST HAS ATTEMPTED
*           INITIALIZATION FOR THE CURRENT DUMP.
*
*       IF ANY OF THE ABOVE FIELDS COULD NOT BE FILLED IN BECAUSE OF
*       BRREAD ERRORS WHEN READING THE VALUES FROM THE DUMP DATA SET,
*       THEY WILL CONTAIN ZEROS.
*
*       IF INPUT IS FROM AMDSADMP, DISPLACEMENTS 64-71 OF BLOCK ZERO
*       READ BY MST ARE RE-INITIALIZED IN CORE WITH THE CSW AND CAW
*       THAT WAS STORED IN THE HEADER RECORD WHEN THE DUMP WAS TAKEN.
*
*       IF THE DUMP HEADER RECORD CONTAINED A TITLE, THE TITLE IS
*       PRINTED ON THE FIRST PAGE OF THE DUMP LISTING USING THE BRWRITE
*       PRIVATE MACRO INSTRUCTION.
*
*        AMDPRMST WILL PRINT OUT ALL SU NUMBERS THAT ARE        OZ13033
*        APPLIED TO THE DUMPED SYSTEM (IF ANY).                 OZ13033
*                                                               OZ13033
*        AMDPRMST WILL OUTPUT AN ERROR-ID IF ONE EXISTS         OZ13033
*        ON A DUMPED SYSTEM WITH SU17.                          OZ13033
*                                                               OZ13033
*02*     RETURN-CODES = NONE
*
*01*  EXIT-ERROR = NONE
*
*01*  EXTERNAL-REFERENCES = SEE SPECIFIC COMMENTS THAT FOLLOW
*
*02*     ROUTINES = TODCNVRT ROUTINE IN AMDPRSEG IS USED TO CONVERT THE
*        TOD CLOCK VALUE THAT WAS CONTAINED IN THE DUMP HEADER.
*        ADRCNVT ROUTINE IN AMDPRCOM IS USED TO CONVERT ADDRESSES USED
*        IN MESSAGES.
*
*02*     DATA-AREAS = AREAS IN COMMON THAT ARE REFERENCED BY MST ARE:
*        SETCVTSW IN SWA, BLANKS, CURBUF, FOUR, ASIDNDX, REALMAP,
*        QSEGTBSW IN PRSW, QATMERTN, THREE, RDRSW IN SWA
*
*02*     CONTROL-BLOCKS = CVT - (R); PCCAVT - (R); PCCA - (R);
*        PVT - (R); ASVT- (R); ASCB - (R)
*
*01*  TABLES = FIVE WORDS AT LABEL SAVEREGS ARE USED FOR SAVING
*     REGISTERS 2 - 6 WHEN SEARCHING FOR THE CVT
*
*01*  MACROS = WTO, BRPRTMSG, BRREAD, BRWRITE
*
*02*     SERIALIZATION = NONE
*
*01*  CHANGE-ACTIVITY = SEE MICROFICHE FLAGGING ABOVE
*
*  OZ09006 - AMDPRDMP NEEDS CODE TO SUPPORT SU'S                OZ13033
*    D82   - CODE TO SET INTERNAL BIT STRING                    OZ13033
*                                                               OZ13033
*  OZ09692 - LOOP IN MST IF BIT STRING IS NOT IN DUMP           OZ13033
*    D82   - BIT STRING SHOULD ALWAYS BE IN DUMP, HOWEVER       OZ13033
*            DEFENSIVE CODE HAS BEEN ADDED                      OZ13033
*                                                               OZ13033
*  UZ81700 - SUPPORT FOR SU17                                   OZ13033
*    D81   - ADD ERROR-ID PROCESSING                            OZ13033
*                                                               OZ13033
*  OZ13033 - IMPLEMENT CODE TO FORMAT BIT STRING                OZ13033
*    D80   - CSECT AMDPRBIT WAS CODED                           OZ13033
*                                                               OZ13033
*01*  MESSAGES = THE FOLLOWING MESSAGES ARE ISSUED TO SYSPRINT AND, IF
*     RDRSW IS OFF, TO THE SYSTEM CONSOLE:
*     AMD260I UNABLE TO ACCESS PAGE/SEGMENT TABLE AT XXXXXX ID=X
*     AMD261I UNABLE TO ACCESS CVT
*     AMD284I PREFIX VALUES NOT AVAILABLE
*     AMD263I DUMP MAY NOT BE FROM AN OS/VS2 RELEASE 2 SYSTEM
*     AMD264I PAGE TABLE FOR LOCATION ZERO NOT VALID ID=X
*     AMD286I CVT AT XXXXXX NOT VALID, ID = X
*     AMD290I ERROR IN PREFIX VALUES - REAL= YYYYYY , VIRTUAL = XXXXXX
*     AMD294I UNABLE TO ACCESS SEGMENT TABLE ADDRESS AT LOCATION 31C
*
*01*  ABEND-CODES = NONE
*
**** END OF SPECIFICATIONS ***/
*/*AMDPRMST: CHART (SEQ) */
*/*HEADER
*/*AMDPRMST - GET MASTER ROUTINE FLOWCHARTS
*/*                                                      PAGE #   */
*/*AMDPRMST: E START */
*/* M SET UP ADDRESSABILITY */
*/* P ESTABLISH GET MASTER-S ERROR HANDLER - MSTERR */
*/* M SET MSTRSW TO INDICATE INIT ATTEMPTED */
*/* P ZERO MST SWITCHES */
*/* P ZERO COMMON AREAS (QAPFT,CURASCB,PREFXRGR,PREFXRGV,ASVTADDR) */
*/* P SET DEFAULT NUCTOP */
*/* D (YES,GSADMP,NO,) AMDSADMP */
*/* D (YES,REALDMP,NO,) REAL DUMP */
*/* P GET ASIDNDX FROM COMMON */
*/*ASNDXLP: P ADD 40 TO GET TO 1ST DUMP MAP PTR */
*/* P SET COUNTER TO 18 */
*/*MAPLP: P GET MAP PTR */
*/* D (YES,MSTERR20,NO,) MAP PTR = 0 */
*/* P GET 1ST ADDRESS DUMPED */
*/* D (YES,GETMSVC,NO,) ADDR WITHIN THE NUCLEUS */
*/* P GET PTR TO NEXT DUMP MAP */
*/* P DECREMENT COUNTER BY 1 */
*/* D (YES,,NO,MAPLP) COUNTER = 0 */
*/*ENDNDX: P GET ADDRESS OF NEXT TABLE */
*/* D (YES,,NO,ASNDXLP) LINK FIELD = 0 */
*/*MSTERR20: P INDICATE CVT NOT DUMPED (CVTADDR=0) */
*/* M RESET CVT SEARCH INDICATOR */
*/* S (,GMSTER1) MPRTMSG: UNABLE TO ACCESS CVT */
*/*GETMSVC: D (YES,,NO,GCVTSW) CVTADDR IN COMMON EQUAL ZERO */
*/* D (NO,GETMSTRK,YES,CHKCVT) IS 4C IN THE DUMP */
*/*GSADMP: D (YES,MSTERR20,NO,) REALMAP = 0 */
*/*REALDMP: P SAVE ADDR FIRST REAL DUMP MAP */
*/* P MESSAGE ID=1 USER SPECIFIED SEGMENT ORIGIN */
*/* D (YES,GSADSEG,NO,) SEGMENT TABLE ORIGIN SET BY CONTROL */
*/*GSADMPSG: P MESSAGE ID=2 X'31C' POINTS TO SEGMENT TABLE */
*/* M SET REAL REQUEST INDICATOR */
*/* P SET R6 TO POINT TO SEGTERR */
*/* L BRREAD: READ SEGMENT TABLE ADDR FROM X'31C' */
*/* P SAVE IT IN COMMON (SEGTABOR) */
*/* D (NO,NOCSWMV,YES,) AMDSADMP DUMP */
*/* P BACK UP BUFFER POINTER X'2DC' TO LOC X'40' IN BUFFER */
*/* P MOVE CSW AND CAW INTO LOCATION X'40'-X'4B' IN BUFFER */
*/*NOCSWMV: S SEGCHK: ACCESS SEGMENT TABLE IN DUMPED STORAGE */
*/*GETRLMAX: P SET MAP PTR FROM REALMAP IN COMMON */
*/*GETLINK: P GET LINK FIELD */
*/* D (YES,LASTMAP,NO,) IS THE LINK FIELD EQUAL 0 */
*/* P (,GETLINK) GET NEXT MAP POINTER */
*/*LASTMAP: P GET ADDR OF LAST BLOCK DUMPED */
*/* P ADD 4K TO ADDRESS */
*/* P STORE IN REALMAX IN COMMON */
*/*GCVTSW: P SET MSGID TO 2 */
*/* D (YES,CHKCVT,NO,) IS CVTADDR = 0 */
*/* D (NO,GETMSTRC,YES,) WAS CVT ADDR SET BY CONTROL */
*/* P (,GETMSTRC) SET MSG ID TO 1 */
*/*CHKCVT: L  BRREAD: GET CVT PTR FROM X'4C' OF DUMP */
*/* M (,GETMSTRA) INDICATE CVT SEARCH IN PROCESS */
*/*GSADSEG: S SEGCHK: ACCESS SEGMENT TABLE IN DUMPED STORAGE */
*/* D (NO,GETRLMAX,YES,) AMDSADMP INPUT */
*/* L BRREAD: READ FOR CSW LOCATION X'40' */
*/* P (,GETRLMAX) MOVE CSW AND CAW INTO LOCATION X'40' - X'4B' IN
*/*BUFFER */
*/*SEGTERR: S (,GETRLMAX) MPRTMSG: PRINT UNABLE TO READ 31C MESSAGE */
*/*GETMSTRC: P GET ADDR OF CVT PTR FROM COMMON */
*/*VERFYCVT: P SET R6 TO POINT TO MSTERR20 */
*/* L BRREAD: GET WORD OF CVT WITH SVC3 AND BR14 INSTRUCTIONS */
*/* D (YES,GETMSTSO,NO,) ARE THE INSTR. PRESENT */
*/* S (,GETMSTSO) MPRTMSG: CVT NOT VALID */
*/*GETMSTRA: P LOAD CVT PTR */
*/*GETMSTRB: P SAVE CVT PTR IN COMMON */
*/* P SET MSG ID TO 3 */
*/* D (YES,,NO,VERFYCVT) CVT PTR = ZERO */
*/*GETCVT: P START CVT SEARCH AT LOCATION X'50' */
*/*GETMSTRK: L BRREAD: GET A WORD OF STORAGE */
*/*CHK4CVT: D (YES,GETMSTRI,NO,) SVC 3 & BR 14 INST. PRESENT */
*/*GETMSTRL: P ADD 4 TO SEARCH ADDR */
*/* D (YES,MSTERR20,NO,) REACHED TOP OF NUCLEUS */
*/* D (YES,GETMSTRK,NO,) SEARCH ADDRESS ON A 4K BOUNDARY */
*/* P (,CHK4CVT) BUMP BUFFER POINTER */
*/*GETMSTRI: L BRREAD: GET ADDR OF TOP OF NUCLEUS */
*/* D (NO,GETMSTRL,YES,) IS HIGH ORDER BYTE = 0 */
*/* D (NO,GETMSTRL,YES,) LAST BYTE = 0 */
*/* P SAVE NUCLEUS TOP ADDR */
*/* L BRREAD: GET MAXIMUM ADDR FROM CVT */
*/* D (NO,GETMSTRL,YES,) HIGH BYTE = 0 */
*/* D (NO,GETMSTRL,YES,) LAST BYTE = FF */
*/* D (NO,GETMSTRL,YES,) IS IT >= NUCLEUS TOP */
*/* P SAVE CVT ADDR IN COMMON */
*/*GETMSTSO: M RESET CVT SEARCH INDICATOR */
*/* P PUT CVT ADDRESS IN R8 */
*/* P SET R6 TO POINT TO GMSTER0 */
*/* L BRREAD: GET SYSTEM OPTIONS FROM CVT */
*/* D (YES,,NO,GMSTER0) IS THIS AN OS/VS2 SYSTEM */
*/* L BRREAD: GET RELEASE NUMBER */
*/* D (YES,GETMSTMT,NO,) IS THIS FROM A RELEASE 2 SYSTEM */
*/*GMSTER0: S MPRTMSG: NOT OS/VS2 DUMP */
*/*GETMSTMT: P SET R6 TO POINT TO GETMSTR3 */
*/* L BRREAD: GET ASVT ADDR FROM CVT */
*/* P SAVE IT IN COMMON (ASVTADDR) */
*/*GETMSTR3: D (NO,GTIDFRVT,YES,) IS QASID = 0 */
*/* P SET R6 TO POINT TO GETMSTR4 */
*/* L BRREAD: GET FIRST WORD OF CVT */
*/* L BRREAD: GET CURRENT ASCB POINTER */
*/* P SAVE ADDR OF CURRENT ASCB IN COMMON */
*/* L BRREAD: GET ASID FROM ASCB */
*/* P (,GETMSTR4) SAVE IT IN TEMPORARY LOCATION */
*/*GTIDFRVT: P SET R6 TO POINT TO GETMSTR4 */
*/* L BRREAD: GET ASCB ADDR FROM ASVT */
*/* P SAVE ADDR OF ASCB IN COMMON (CURASCB) */
*/*GETMSTR4: P SET R6 TO POINT TO GETMSTR6 */
*/* L BRREAD: GET TOP OF NUC. VALUE */
*/* P SAVE IT IN COMMON (NUCTOP) */
*/*GETMSTR6: P SET R6 TO POINT TO GETMSTR7 */
*/* L BRREAD: GET ADDRESS OF PAGE VECTOR TABLE */
*/* L BRREAD: GET ADDRESS OF PAGE FRAME TABLE */
*/* P SAVE IT IN COMMON (QAPFT) */
*/*GETMSTR7: D (YES,,NO,GETDATE) IS THIS AN AMDSADMP DUMP */
*/* D (NO,GETDATE,YES,) IS IPL'ED CPU ADDR VALID (NOT =256) */
*/* P SET R6 TO POINT TO NOPREFX */
*/* L BRREAD: GET PTR TO PCCA VECTOR TABLE FROM CVT */
*/* P LOAD WORK REG WITH IPL'ED CPU ADDR */
*/* P SHIFT LEFT 2 BITS TO GET INDEX INTO VECTOR TABLE */
*/* P ADD ADDR OF PCCA VECTOR TABLE TO INDEX */
*/* L BRREAD: GET PTR TO PCCA FROM PCCA VECTOR TABLE */
*/* P SAVE ADDR OF PCCA IN R4 */
*/* P SET R6 TO POINT TO RDRLERR */
*/* L BRREAD: GET REAL ADDR OF PSA FROM PCCA */
*/* P SAVE VALUE IN COMMON (PREFXRGR) */
*/*RDVIRTAD: P SET R6 TO POINT TO RDVTERR */
*/* L BRREAD: GET VIRTUAL ADDR OF PSA FROM PCCA */
*/* P SAVE VALUE IN COMMON (PREFXRGV) */
*/* D (YES,RERRVOK,NO,) ERROR READING REAL ADDRESS */
*/* D (YES,GETDATE,NO,) ARE BOTH ADDR = 0 (UNIPROCESSOR) */
*/* D (YES,RLAD0,NO,) REAL ADDR = 0 */
*/* D (NO,RLAD0,YES,) REAL ADDR ON 4K BDY */
*/*RLADOK: D (YES,VRTAD0,NO,) VIRTUAL ADDR = 0 */
*/* D (YES,GETDATE,NO,) VIRTUAL ADDR ON 4K BDY */
*/*VRTAD0: P SET VIRTUAL ADDR TO 0 (PREFXRGV) */
*/*PRERRMSG: S (,GETDATE) MPRTMSG: POSSIBLE ERROR IN PREFIX VALUE MSG
*/**/
*/*RLAD0: P SET REAL ADDR TO 0 (PREFXRGR) */
*/* S RDCPUST: GET PSA ADDR FROM STORE STATUS INFO */
*/* D (0,RLADOK,OTHER,) CHECK RETURN CODE */
*/* P SET REAL ADDR TO 0 (PREFXRGR) */
*/*CHKVTAD: D (YES,PRERRMSG,NO,) VIRTUAL ADDR = 0 */
*/* D (YES,PRERRMSG,NO,) VIRTUAL ADDR ON 4K BDY */
*/* P (,PRERRMSG) SET VIRTUAL ADDR TO 0 */
*/*RERRVOK: M RESET ERROR FLAG */
*/* S RDCPUST: GET PSA ADDR FROM STORE STATUS INFO */
*/* D (0,RLADOK,4,CHKVTAD,8,CHKVTAD) CHECK RETURN CODE */
*/*RDRLERR: M (,RDVIRTAD) SET FLAG INDICATING REAL READ ERROR */
*/*RDVTERR: D (NO,ROKVTERR,YES,) ERROR READING REAL ADDR */
*/* M RESET ERROR FLAG */
*/*RERRVERR: S RDCPUST: GET PSA ADDR FROM STORE STATUS INFO */
*/* D (0,PRERRMSG,4,NOPREFX,8,PRERRMSG) CHECK RETURN CODE */
*/*ROKVTERR: D (YES,PRERRMSG,NO,) REAL ADDR = 0 */
*/* D (YES,PRERRMSG,NO,RERRVERR) REAL ADDR ON 4K BOUNDARY */
*/*RDCPUST: E SUB-ROUTINE */
*/*  P LOAD R1 WITH A 1 */
*/* P SET R6 TO POINT TO RDCPUERR */
*/* L BRREAD: GET CPU STATUS RECORD */
*/* D (NO,RDCPUERR,YES,) STORE STATUS INFO VALID */
*/* D (YES,GETDATE,NO,) UNIPROCESSOR */
*/* P SAVE PSA ADDR IN COMMON (PREFXRGR) */
*/* D (YES,GETDATE,NO,) ARE REAL AND VIRTUAL ADDR BOTH = 0 */
*/* D (YES,CPUERR8,NO,) IS REAL ADDR = 0 */
*/* D (NO,CPUERR8,YES,) ADDR ON 4K BOUNDARY */
*/* P (,CPURET) SET RETURN CODE TO 0 */
*/*RDCPUERR: P (,CPURET) SET RETURN CODE TO 4 */
*/*CPUERR8: P SET PREFXRGR TO 0 */
*/* P SET RETURN CODE TO 8 */
*/*CPURET: R RETURN TO CALLER */
*/*NOPREFX: S MPRTMSG: NO PREFIXING MESSAGE */
*/*GETDATE: P SET R6 TO POINT TO GMSTER1 */
*/* L BRREAD: GET DATE FROM CVT */
*/* P SAVE DATE FOR LATER CONVERSION */
*/* L BRREAD: GET TIME ZONE VALUE FROM CVT */
*/* P SET UP PARAMETER LIST FOR TOD ROUTINE */
*/* L TODCNVRT: GET TIME CONVERTED */
*/* P MOVE TIME TO TITLE */
*/* P SAVE IT IN COMMON */
*/*DATER: D (NO,GMSTER1,YES,) IS DATE VALID */
*/* P CONVERT 2-DIGIT YEAR TO DETERMINE TYPE OF YEAR */
*/* P CONVERT 3-DIGIT DAY TO MONTH AND DAY */
*/* P CONVERT THE DATE TO PRINTABLE CHARS. */
*/* P MOVE YR., DAY AND MONTH TO DATE PATTERN FOR PRINTING */
*/* P (,GMSTERR) MOVE PATTERN (DATE) TO TITLE */
*/*GMSTER1: P BLANK TITLE DATE AND TIME */
*/*GMSTERR: D (YES,,NO,MVCTTL) LENGTH OF USER DATA POSITIVE */
*/* P MOVE USER DATA FIELD TO OUTPUT BUFFER */
*/* P MOVE HEADING TO OUTPUT BUFFER */
*/*WRTTL: P SET DUMP TITLE SWITCH */
*/* L (,GMSTRET) BRWRITE: WRITE DUMP TITLE */
*/*MVCTTL: P (,WRTTL) MOVE NO TITLE MESSAGE TO BUFFER */
*/*GMSTRET: D (NO,GMSTRET1,YES,) IS QASID = 0 */
*/* P MOVE ASID TO QASID FROM TEMPORARY LOCATION */
*/* P ZERO ASID SAVE AREA */
*/*GMSTRET1: P RESTORE REGS */
*/* R RETURN */
*/*MSTERR: E ERROR */
*/* P POINT TO MST-S SAVE AREA */
*/* P RELOAD REGISTERS */
*/*%MSTER01: D (YES,MSTERR40,NO,) ERROR WHILE READING SEGMENT TABLE */
*/* D (YES,,NO,MSTRET) SEARCHING FOR CVT */
*/* P LOAD MAP ADDRESS FROM SAVE AREA */
*/* D (YES,CKIFMPND,NO,) IF ZERO, THEN END OF MAPS */
*/* P GET LAST ADDRESS DUMPED */
*/* D (YES,,NO,MSTERR05) LAST ADDR >4096 ABOVE SEARCH ADDR */
*/* P (,MSTERR10) ADD 4096 TO SEARCH ADDRESS */
*/*MSTRET: R RETURN TO ADDRESS IN R6 */
*/*MSTERR05: P GET POINTER TO NEXT DATA AREA DUMPED */
*/*MSTERR10: D (YES,GETMSTRK,NO,) DUMP AREA WITHIN NUCLEUS */
*/*CKIFMPND: D (NO,MSTERR20,YES,) REALMAP = 0 */
*/* P DECREMENT COUNTER BY 1 */
*/* D (NO,ERRMPLP,YES,) COUNTER = 0 */
*/* D (YES,MSTERR20,NO,) IS LINK FIELD = 0 */
*/* P ADD 40 TO GET TO 1ST DUMP MAP PTR */
*/* P SET COUNTER TO 18 */
*/*ERRMPLP: P GET PTR TO DUMP MAP */
*/* D (YES,MSTERR20,NO,) IS MAP PTR = 0 */
*/* P (,MSTERR10) GET 1ST ADDRESS DUMPED */
*/*MSTERR40: P GET ADDRESS OF ERROR MESSAGE */
*/* P INSERT ID CODE INTO MESSAGE */
*/* S MPRTMSG: WRITE MESSAGE TO LOG */
*/* R RETURN VIA R6 */
*/*SEGCHK: E SUB-ROUTINE */
*/* P SET SWITCH CHECKING SEGMENT TABLE */
*/* P INDICATE REAL REQUEST */
*/* P SET R6 TO POINT TO ZEROSGSW */
*/* L BRREAD: TRY TO READ SEGMENT TABLE */
*/* L BRREAD: READ FIRST PAGE TABLE */
*/* D (YES,SEGCHK70,NO,) IS PAGE TABLE VALID */
*/* S  MPRTMSG: MESG-PAGE TABLE INVALID */
*/*ZEROSGSW: M ZERO QSEGTBSW SWITCH IN COMMON */
*/*SEGCHK70: P RESET SEGMENT TABLE SWITCH */
*/* P RESET REAL REQUEST */
*/* R RETURN TO CALLER VIA ADDR IN R4 */
*/*MPRTMSG: E WRT TO PRDMP LOG */
*/* P DETERMINE LENGTH OF MESSAGE */
*/* P POINT TO BEGINNING OF TEXT */
*/* L BRPRTMSG: WRITE MESSAGE TO LOG */
*/* D (YES,,NO,MPRTMSG7) IS INPUT FROM CONSOLE */
*/* P WRITE MESSAGE TO CONSOLE */
*/*MPRTMSG7: R RETURN TO CALLER */
*/*AMDPRMST: END */
         SPACE 1                                               @YM08438
         EQUATES                                               @YM08438
         COMMON                                                @YM08438
CVTMAP   CVT   DSECT=YES           CVT MAPPING MACRO             Y01980
         IHAPCCA  DSECT=YES        PCCA MAPPING MACRO            Y02006
         IHAPVT  DSECT=YES         PVT MAPPING MACRO             Y02006
         IHAASVT  DSECT=YES        ASVT MAPPING MACRO            Y02006
         IHAASCB  DSECT=YES        ASCB MAPPING MACRO            Y02006
         IHAGDA                    GDA MAPPING MACRO             Y02006
****                                                           @YM08438
         SPACE 1                                               @YM08438
AMDPRMST CSECT                                                 @YM08438
         USING *,R15                                             Y02006
         MODID                                                   Y02006
         DROP R15                                                Y02006
SACVT    EQU   76                  SECONDARY PTR TO CVT          Y01980
CSWPTR   EQU   64                  PTR TO CSW IN CORE            Y02006
*        BIT DEFINITION FOR MSTSW SWITCHES                     @YM08438
CVTSRCH  EQU   64                  SEARCHING FOR CVT             Y02006
SEGCK    EQU   32                  READING SEGMENT TABLE         Y01980
RDRLERRB EQU   4                 ERROR READING REAL PREFIX VALUE Y02006
*                                                              @YM08438
SEGTABAD EQU   X'31C'              LOCATION OF PTR TO SEGTAB     Y02006
MULTBY4  EQU   2                   MASK FOR SLA INSTRUCTION      Y02006
MAPCHAIN EQU   0                   MAP CHAIN POINTER TO NEXT MAP Y01980
MAPFSTAD EQU   4                   MAP FIRST DUMPED ADDRESS      Y01980
MAPLSTAD EQU   8                   MAP LAST DUMPED ADDRESS       Y01980
LINIT1   EQU   ASVTADDR-CURASCB+4  LENGTH OF INIT AREA IN COMMON Y02006
PRERGOFF EQU   172                 OFFSET TO PREFIX REG VALUE    Y02006
UNIPROC  EQU   X'80'               UNIPROCESSOR FLAG             Y02006
STSTINV  EQU   X'20'               STORE STATUS INVALID FLAG     Y02006
MAPTROFF EQU   40                  OFFSET TO 1ST DUMP MAP        Y02006
HIBIT    EQU   X'80'               HIGH BIT                      Y02006
         SPACE 1                                               @YM08438
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTER      @YM08438
         BALR  BASE1,0             SET UP REG 11 AS BASE       @YM08438
         USING *,BASE1                                         @YM08438
MSTBASE  LA    R1,MSTSAVE          SAVE AREA CHAINNING         @YM08438
         ST    R13,MSTSAVE+4                                   @YM08438
         ST    R1,8(R13)                                       @YM08438
         LR    R13,R1                                          @YM08438
         SPACE 1                                               @YM08438
         USING COMMON,COMBASE      COMMON CSECT BASED ON REG 12
         USING CVTMAP,R8                                         Y10980
         SPACE 1                                               @YM08438
         MVC   MSTERSAV(4),ERRADDR SAVE CALLER-S ERROR ROUTINE   A43168
*                                  ADDRESS                       A43168
         LA    R3,MSTERR           POINT TO ERROR HANDLER        A43168
*                                  FOR GET MASTER ROUTINE        A43168
         ST    R3,ERRADDR          ESTABLISH MST-S ERROR RTN     A43168
         OI    SWC,MSTRSW          INDICATE MST HAS ATTEMPTED    Y02006
*                                  INITIALIZATION                Y02006
         MVI   MSTSW,0             ZERO AMDPRMST SWITCHES        Y01980
         SR    R2,R2               CLEAR REG                     Y01980
         ST    R2,QAPFT            ZERO FIELDS IN COMMON         Y01980
         XC    CURASCB(LINIT1),CURASCB  AREA                     Y02006
         MVC   NUCTOP,DNUCTOP      SET DEFAULT OF NUCTOP         Y02006
         NI    SWF,XFF-NUCTFRMC    RESET NUCTOP SWITCH           Y02006
         MVC   CSADDR,DFLTCSA      SET DEFAULT CSA ADDR          Y02006
***  ZERO HIGH BIT OF ALL DEFAULT LOOP VALUES IN COMMON  ***   @YM08438
         NI    RBMAX,XFF-HIBIT                                   Y02006
         NI    PQEMAX,XFF-HIBIT                                  Y02006
         NI    LLEMAX,XFF-HIBIT                                  Y02006
         NI    JPQMAX,XFF-HIBIT                                  Y02006
         NI    DEBMAX,XFF-HIBIT                                  Y02006
         NI    DDMAX,XFF-HIBIT                                   Y02006
         NI    SRBMAX,XFF-HIBIT                                  Y02006
         NI    TCBMAX,XFF-HIBIT                                  Y02006
         NI    ASCBMAX,XFF-HIBIT                                 Y02006
         NI    XLMAX,XFF-HIBIT                                   Y02006
         NI    LPAMAX,XFF-HIBIT                                  Y02006
         SPACE 1                                               @YM08438
***********************************************************************
*                                                                     *
*              DETERMINE TYPE OF DUMP                                 *
*                                                                     *
***********************************************************************
         TM    SWF,QSADMP          AMDSADMP DUMP                 Y02006
         BO    GSADMP              YES - BRANCH                  Y02006
         OC    REALMAP,REALMAP     IS THIS A REAL DUMP           Y02006
         BNZ   REALDMP             YES - BRANCH                  Y02006
         SPACE 1                                                 Y02006
***********************************************************************
*                                                                     *
*              DETERMINE IF NUCLEUS IS IN THE SVC OR DSS DUMP         *
*                                                                     *
***********************************************************************
         SPACE 1                                               @YM08438
         OC    ASIDNDX,ASIDNDX     IS ASIDNDX PTR = 0            Y02006
         BZ    MSTERR20            YES - CVT NOT AVAILABLE       Y02006
         L     R2,ASIDNDX          POINTER TO ASIDNDX            Y02006
ASNDXLP  LA    R6,MAPTROFF(R2)     INCREMENT TO 1ST DUMP MAP PTR Y02006
         LH    R5,EIGHTEEN         SET COUNTER                   Y02006
MAPLP    L     R4,0(R6)            GET DUMP MAP PTR              Y02006
         LTR   R4,R4               IS PTR = 0                    Y02006
         BZ    MSTERR20            YES - END OF MAPS - CVT NOT   Y02006
*                                  DUMPED                        Y02006
         L     R3,MAPFSTAD(R4)     FIRST ADDRESS DUMPED          Y02006
         STM   R2,R6,SAVEREGS      SAVE REGS FOR ERROR HANDLING  Y02006
         C     R3,NUCTOP           WITHIN NUCLEUS                Y02006
         BL    GETMSVC             YES - CONTINUE PROCESSING     Y02006
         LA    R6,4(R6)            ADD 4 TO R6 (POS. IN TABLE)   Y02006
         BCT   R5,MAPLP            CHECK NEXT MAP                Y02006
ENDNDX   L     R2,0(R2)            GET ASIDNDX LINK FIELD        Y02006
         LTR   R2,R2               IS PTR = 0                    Y02006
         BZ    MSTERR20            YES - END OF MAPS             Y02006
         B     ASNDXLP             CHECK NEXT TABLE ADDRESSES    Y02006
         SPACE 1                                               @YM08438
GETMSVC  OC    CVTADDR,CVTADDR     IS CVTADDR NON-ZERO           Y02006
         BNZ   GCVTSW              yes- BRANCH                   Y02006
GETMSV   LA    R2,SACVT            ADDR OF BACKUP CVT PTR        Y01980
         CR    R3,R2               WAS CVT PTR DUMPED            Y01980
         BH    GETMSTRK            NO, GO SCAN STORAGE FOR CVT   Y01980
         B     CHKCVT              GO CHECK CVT                  Y01980
         SPACE 1                                               @YM08438
***********************************************************************
*                                                                     *
*              PROCESS STAND-ALONE AND REAL DUMPS                     *
*                                                                     *
***********************************************************************
GSADMP   OC    REALMAP,REALMAP     ANYTHING DUMPED               Y02006
         BZ    MSTERR20            NO - CVT NOT AVAILABLE        Y02006
REALDMP  L     R2,REALMAP          POINTER TO DUMP MAPS          Y02006
         ST    R2,MAPADSAV         SAVE IT FOR ERRORS            Y02006
         MVI   MSGID,C'1'          ID CODE FOR MESSAGE           Y01980
         TM    PRSW,QSEGTBSW       WAS SEGMENT TABLE ORIGIN      Y01980
*                                  SET BY CONTROL                Y01980
         BNO   GSADMPSG            NO - GET LOCATION X'31C'      Y02006
GSADSEG  BAL   R4,SEGCHK           TRY READING THE SEGMENT TABLE Y01980
         TM    SWF,QSADMP          AMDSADMP DUMP                 Y02006
         BZ    GETRLMAX            NO - BRANCH TO GET REAL MAX   Y02006
         LA    R6,GETRLMAX         ERROR RETURN ADDRESS          Y02006
         LA    PREG,CSWPTR         GET ADDRESS OF CSW            Y02006
         BRREAD (PREG)             READ CSW                      Y02006
         MVC   0(12,PREG),SACSWCAW MOVE CSW & CAW BACK INTO      Y02006
*                                  RECORD 0,LOCATION X'40'-X'4B' Y02006
         B     GETRLMAX            GO GET REAL MAX ADDR          Y02006
GSADMPSG LA    R6,SEGTERR          ERROR RETURN ADDR             Y02006
         OI    PRSW,PRNTREAL       INDICATE REAL REQUEST         X01980
         MVI   MSGID,C'2'          ID CODE FOR MESSAGE           Y01980
         LA    PREG,SEGTABAD       ADDRESS OF SEGMENT TABLE PTR  Y02006
         BRREAD (PREG)             READ VALUE                    X01980
         MVC   SEGTABOR(4),0(PREG) SAVE SEGMENT TABLE ADDR       Y02006
         TM    SWF,QSADMP          AMDSADMP DUMP                 Y02006
         BZ    NOCSWMV             NO - DON'T MOVE CSW           Y02006
         SH    PREG,DISP2CSW       BACK UP BUFFER POINTER TO     Y02006
*                                  LOCATION X'40'                Y02006
         MVC   0(12,PREG),SACSWCAW MOVE CSW & CAW BACK INTO      Y02006
*                                  RECORD 0,LOCATION X'40'-X'4B' Y02006
NOCSWMV  BAL   R4,SEGCHK           TRY READING THE SEGMENT TABLE Y02006
         SPACE 1                                               @YM08438
***  GET TOP OF REAL STORAGE ADDRESS   ***                     @YM08438
         SPACE 1                                               @YM08438
GETRLMAX L     R2,REALMAP          GET MAP PTR                   Y02006
GETLINK  L     R3,MAPCHAIN(R2)     GET LINK FIELD                Y02006
         LA    R3,0(R3)            CLEAR HIGH ORDER BYTE         Y02006
         LTR   R3,R3               IS LINKFIELD 0 (LASTMAP)      Y02006
         BZ    LASTMAP             YES,GO GET REAL MAX ADDR      Y02006
         LR    R2,R3               POINT TO NEXT MAP             Y02006
         B     GETLINK             GO CHECK ITS LINK FIELD       Y02006
LASTMAP  L     R3,MAPLSTAD(R2)     GET LAST ADDRESS              Y02006
         A     R3,MF4096           ADD 4K                        Y02006
         BCTR  R3,0                SUBTRACT 1                    Y02006
         ST    R3,REALMAX          STORE IN COMMON               Y02006
         B     GCVTSW              GO FIND CVT                   Y02006
         SPACE 1                                               @YM08438
SEGTERR  L     R1,MSTMSG8          GET ADDRESS OF MESSAGE        Y02006
         BAL   R9,MPRTMSG          GO PRINT MESSAGE              Y02006
         B     GETRLMAX            GO GET MAX REAL ADDRESS       Y02006
         SPACE 1                                               @YM08438
***********************************************************************
*                                                                     *
*        CHECK FOR A VALID CVT                                        *
*                                                                     *
***********************************************************************
GCVTSW   MVI   MSGID,C'2'          ID CODE FOR MESSAGE           Y02006
         OC    CVTADDR,CVTADDR     WAS CVT ADDR = 0              Y02006
         BZ    CHKCVT              YES,GET FROM X'4C'            Y02006
         TM    SWA,SETCVTSW        WAS CVT ADDR SET BY CONTROL   Y02006
         BZ    GETMSTRC            BRANCH IF NO                  Y02006
         MVI   MSGID,C'1'          ID CODE FOR MESSAGE           Y02006
         B     GETMSTRC            GO VERIFY CVT                 Y02006
         SPACE 1                                                 Y02006
CHKCVT   LA    R3,SACVT            NO- GO FIND IT AT LOC X'4C'   Y01980
*                                  SET FOR CVT SEARCH          @YM08438
         OI    MSTSW,CVTSRCH       CVT SEARCH IN PROGRESS        Y02006
         BRREAD  (R3)                                          @YM08438
GETMSTRA L     PREG,0(PREG)        CVT PTR                     @YM08438
GETMSTRB LA    PREG,0(PREG)        CLEAR HI BYTE                 X01980
         ST    PREG,CVTADDR        SAVE CVT ADDR               @YM08438
         LTR   PREG,PREG           TEST PREG FOR ZERO OR NEG     X01980
         BZ    GETCVT              BRACNH TO FIND CVT            X01980
         NI    MSTSW,XFF-CVTSRCH   RESET CVT SEARCH INDICATOR    Y02006
         MVI   MSGID,C'3'          ID CODE FOR MESSAGE           Y02006
         B     GETMSTRC            GO VERIFY CVT IS VALID        Y02006
         SPACE 1                                               @YM08438
***********************************************************************
*                                                                     *
*        SCAN DUMPED STORAGE FOR A VALID CVT                          *
*                                                                     *
***********************************************************************
GETCVT   LA    R3,SACVT+4          START CVT SEARCH AT LOC X'50' Y01980
GETMSTRK OI    MSTSW,CVTSRCH       CVT SEARCH IN PROCESS         Y02006
         BRREAD  (R3)                                          @YM08438
CHK4CVT  CLC   0(4,PREG),CVTCHK    TEST FOR POSSIBLE CVT       @YM08438
         BE    GETMSTRI            A POSSIBLITY, GO TEST FURTHER
GETMSTRL AH    R3,FOUR             INCR. SEARCH ADDRESS        @YM08438
         C     R3,NUCTOP           REACHED HIGHEST CVT ADDR      Y01980
         BNL   NOCVT               YES - CVT NOT AVAILABLE       Y02006
         LR    R7,R3               SAVE SEARCH ADDRESS           Y02006
         N     R7,MASKOF4K         IS ADDR ON 4K BDY             Y02006
         BZ    GETMSTRK            YES - ISSUE BRREAD            Y02006
         LA    PREG,4(PREG)        INCREMENT BUFFER POINTER      Y02006
         B     CHK4CVT             CHECK NEXT FOUR BYTES         Y02006
NOCVT    NI    MSTSW,X'FF'-CVTSRCH YES- RESET SWITCH             Y02006
         B     MSTERR20            CVT NOT FOUND                 Y01980
GETMSTRI LA    PREG,CVTNUCB-CVTEXIT(R3)  ADDR OF NUC TOP       @YM08438
         BRREAD  (PREG)                                        @YM08438
         CLI   0(PREG),0           TEST FOR ZERO IN HIGH BYTE  @YM08438
         BNE   GETMSTRL            BRANCH IF NOT, TO CONTINUE SEARCH
         CLI   3(PREG),0           TEST FOR LAST BYTE ZERO (2K BDY)
         BNE   GETMSTRL            BRANCH IF NOT, TO CONTINUE  @YM08438
         L     R2,0(PREG)          SAVE NUC TOP IN REG 2       @YM08438
         LA    PREG,CVTMZ00-CVTEXIT(R3)  ADDR OF MAX MACH. ADDR
         BRREAD  (PREG)                                        @YM08438
         CLI   0(PREG),0           TEST FOR ZERO IN HIGH BYTE  @YM08438
         BNE   GETMSTRL            NOT, CONTINUE               @YM08438
         CLI   3(PREG),XFF         TEST FOR FF IN LAST BYTE    @YM08438
         BNE   GETMSTRL            NOT, CONTINUE               @YM08438
         C     R2,0(PREG)          COMPARE NUC TOP TO MAX MACH. AD
         BNL   GETMSTRL            CAN'T BE CVT                @YM08438
         LA    R2,SACVT+4          CVT FOUND                     Y01980
         SR    R3,R2               BACK UP TO CVT BEGINNING    @YM08438
         ST    R3,CVTADDR          STORE CVT ADDR IN COMMON    @YM08438
         B     GETMSTSO            BRANCH TO GET SYSTEM OPTIONS  Y02006
         SPACE 1                                               @YM08438
GETMSTRC L     PREG,CVTADDR        PICK UP CVT ADDR FROM COMMON  Y02006
         LA    R6,CVTNOVAL         ERROR RETURN ADDRESS          Y02006
         LA    PREG,80(PREG)       PREPARE TO VALIDITY CHECK CVT Y02006
VERFYCVT BRREAD (PREG)                                           Y02006
         CLC   0(4,PREG),CVTCHK    IS THERE AN SVC3 & BR 14      Y02006
         BE    GETMSTSO            YES - GO CHECK SYSTEM OPTIONS Y02006
CVTNOVAL L     R3,MSTMSG6          ADDR OF ERROR MESSAGE         Y02006
         LA    R4,19(R3)           PLACE TO PUT CONVERTED ADDR   Y02006
         LA    R1,CVTADDR          LOC OF ADDR TO BE CONVERTED   Y02006
         L     R15,AADRCNVT        ADDR OF CONVERT ROUTINE       Y02006
         BALR  RETREG,R15          LINK TO FOUR  BYTE CONVERT    Y02006
         LR    R1,R3               ADDR OF MESSAGE               Y02006
         MVC   42(L'MSGID,R1),MSGID  PUT MSG ID INTO MSG         Y02006
         BAL   R9,MPRTMSG          WRT TO PRDMP LOG              Y02006
         B     GETCVT              SEARCH DUMP FOR CVT
***********************************************************************
*                                                                     *
*        CVT HAS BEEN FOUND AND WILL BE ADDRESSED BY REG 8            *
*        DATA FROM THE CVT WILL NOW BE MOVED TO COMMON                *
*                                                                     *
***********************************************************************
         SPACE 1                                                 Y02006
***  VERIFY THAT DUMP IS FROM AN OS/VS2 RELEASE 3 SYSTEM  ***  @YM30904
         SPACE 1                                                 Y02006
GETMSTSO NI    MSTSW,XFF-CVTSRCH   RESET CVT SEARCH INDICATOR    Y02006
         MVI   CVTADDR,X'00'       CLEAR HIGH BYTE               Y02006
         L     R8,CVTADDR          LOAD THE CVT ADDRESS          Y02006
         LA    R6,GMSTER0          ERROR RETURN ADDRESS          Y02006
         LA    PREG,CVTDCB         POINT TO SYSTEM OPTION BYTE   Y02006
         BRREAD (PREG)                                           Y02006
         TM    0(PREG),CVT8AOS2    OS/VS2 SYSTEM                 Y02006
         BNO   GMSTER0             NO - GO OUTPUT MESSAGE        Y02006
         LR    PREG,R8             CVTADDR IN REG 1              Y02006
         SH    PREG,FOUR           GET CVTADDR MINUS 4 = REL.NO. Y02006
         BRREAD (PREG)                                           Y02006
         CLC   0(2,PREG),EBCTHREE  IS THIS RELEASE 3 DUMP      @YM30904
         BE    MSTS00          YES - CONTINUE                 OZ09006
GMSTER0  L     R1,MSTMSG4          ADDR OF ERROR MSG             Y02006
         BAL   R9,MPRTMSG          NOT OS/VS2 DUMP               Y02006
**************************************************************OZ09006
*                                                             OZ09006
*          THIS CODE WILL SET THE INTERNAL SU BIT STRING FOR  OZ09006
*    USE BY PRDMP MODULES WHICH OUTPUT DEPENDENT ON SU        OZ09006
*    CONFIGURATION                                            OZ09006
*                                                             OZ09006
**************************************************************OZ09006
MSTS00   EQU   *               INITIALIZE SU BIT STRING       OZ09006
         LA    R6,GETMSTR7     ERR ADDR IF NO CVT             OZ09692
         NI    Z9SUFLG,X'00'   INITIALIZE NOT SET             OZ09006
         LA    PREG,CVTIHASU   LOAD POINTER ADDRESS           OZ09006
         BRREAD (PREG)         READ BIT STRING POINTER        OZ09006
         CLC   0(4,PREG),=F'00' POINTER IS ZERO?              OZ09006
         BE    GETMSTR7        YES - CONTINUE                 OZ09006
*                              NO - SET INTERNAL BIT STRING   OZ09006
         L     PREG,0(PREG)    ADDRESS OF SU BIT STRING       OZ09006
         BRREAD (PREG)         READ BIT STRING                OZ09006
         MVC   Z9SUBITS(16),0(PREG)  SAVE BIT STRING          OZ09006
         OI    Z9SUFLG,X'01'   INDICATE SUBITS ARE SET        OZ09006
         SPACE 1                                               @YM08438
***  GET THE PSA PREFIX REGISTER VALUES IF INPUT IS FROM AMDSADMP  ***
         SPACE 1                                                 Y02006
GETMSTR7 EQU   *                                               @YM08438
         TM    SWF,QSADMP          IS THIS AMDSADMP INPUT        Y02006
         BZ    GETMSTMT            NO - CONTINUE                 Y02006
         CLC   IPLCPU,CPUADINV     IS CPU ADDR VALID             Y02006
         BE    GETMSTMT            NO - DONT GET PREFIX INFO     Y02006
         LA    R6,NOPREFX          ERROR RETURN ADDRESS          Y02006
         LA    PREG,CVTPCCAT       ADDR OF PCCA VECTOR TABLE     Y02006
         BRREAD (PREG)                                           Y02006
         L     PREG,0(PREG)        PUT ADDR OF PCCAVT IN R1      Y02006
         LTR   PREG,PREG           CHECK IF ZERO                 Y02006
         BZ    GETMSTMT            CONTINUE IF IT IS             Y02006
         LH    R4,IPLCPU           GET IPL'ED CPU ADDR           Y02006
         SLA   R4,MULTBY4          MULTIPLY BY 4 TO GET INDEX    Y02006
         AR    R4,PREG             ADD TO ADDR OF PCCA VECTOR TABLE
*                                                                Y02006
         BRREAD (R4)               GET ADDR OF PCCA              Y02006
         L     R4,0(PREG)          GET ADDR OF PCCA              Y02006
         LTR   R4,R4               CHECK IF ZERO                 Y02006
         BZ    GETMSTMT            BRANCH IF IT IS               Y02006
         USING PCCA,R4                                           Y02006
         LA    R6,RDRLERR          ERROR RETURN ADDRESS          Y02006
         LA    PREG,PCCAPSAR       REAL ADDRESS OF PSA           Y02006
         BRREAD (PREG)                                           Y02006
         MVC   PREFXRGR,0(PREG)    SAVE ADDR OF PSA IN COMMON    Y02006
         MVC   RLADSTG,0(PREG)     SAVE ADDR FOR MESSAGE         Y02006
RDVIRTAD LA    R6,RDVTERR          ERROR RETURN ADDRESS          Y02006
         LA    PREG,PCCAPSAV       VIRTUAL ADDR OF PSA           Y02006
         BRREAD (PREG)                                           Y02006
         MVC   PREFXRGV,0(PREG)    SAVE VIRTUAL ADDR IN COMMON   Y02006
         MVC   VTADSTG,0(PREG)     SAVE ADDR FOR MSG             Y02006
         TM    MSTSW,RDRLERRB      DID ERROR OCCUR WHILE READING
*                                  REAL ADDRESS                  Y02006
         BO    RERRVOK             YES - BRANCH                  Y02006
         OC    PREFXRGR(8),PREFXRGR ARE BOTH ADDRESSES = 0       Y02006
         BZ    GETMSTMT            YES - UNIPROCESSOR BRANCH     Y02006
         OC    PREFXRGR,PREFXRGR   IS REAL ADDR = 0              Y02006
         BZ    RLAD0               YES - BRANCH                  Y02006
         NC    PREFXRGR,MASKOF4K   IS REAL ADDR ON 4K BDY        Y02006
         BNZ   RLAD0               NO - BRANCH                   Y02006
         MVC   PREFXRGR(4),RLADSTG RESTORE REAL ADDRESS          Y02006
RLADOK   OC    PREFXRGV,PREFXRGV   VIRTUAL ADDR = 0              Y02006
         BZ    VIRTAD0             YES - BRANCH                  Y02006
         NC    PREFXRGV,MASKOF4K   IS VIRTUAL ADDR ON 4K BDY     Y02006
         BNZ   VIRTAD0             NO - ERROR                    Y02006
         MVC   PREFXRGV,VTADSTG    RESTORE VIRTUAL ADDRESS       Y02006
         B     GETMSTMT            YES - CONTINUE                Y02006
         SPACE 1                                               @YM08438
VIRTAD0  XC    PREFXRGV,PREFXRGV   ZERO VIRTUAL ADDRESS          Y02006
PRERRMSG L     R3,MSTMSG7          ADDR OF ERROR MESSAGE         Y02006
         LA    R4,42(R3)           PLACE FOR CONVERTED ADDR      Y02006
         LA    R1,RLADSTG          LOC OF ADDR TO BE CONVERTED   Y02006
         L     R15,AADRCNVT        ADDR OF CONVERT ROUTINE       Y02006
         BALR  RETREG,R15          LINK TO FOUR-BYTE CONVERT     Y02006
         LA    R4,59(R3)           PLACE FOR CONVERTED ADDR      Y02006
         LA    R1,VTADSTG          LOC OF ADDR TO BE CONVERTED   Y02006
         L     R15,AADRCNVT        ADDR OF CONVERT ROUTINE       Y02006
         BALR  RETREG,R15          LINK TO FOUR-BYTE CONVERT     Y02006
         LR    R1,R3               ADDR OF MESSAGE               Y02006
         BAL   R9,MPRTMSG          WRT TO PRDMP LOG              Y02006
         B     GETMSTMT            CONTINUE PROCESSING           Y02006
         SPACE 1                                               @YM08438
RERRVOK  NI    MSTSW,XFF-RDRLERRB  RESET ERROR FLAG              Y02006
         BAL   R4,RDCPUST          GET PSA ADDR FROM STORE STATUS
*                                  INFO                          Y02006
         LTR   R15,R15             WAS A VALID ADDRESS FOUND     Y02006
         BZ    RLADOK              YES - CONTINUE PROCESSING     Y02006
CHKVTAD  OC    PREFXRGV,PREFXRGV   IS VIRTUAL ADDR = 0           Y02006
         BZ    PRERRMSG            YES - GO ISSUE MESSAGE        Y02006
         NC    PREFXRGV,MASKOF4K   VIRTUAL ADDR ON 4K BDY        Y02006
         BNZ   VIRTAD0             NO  - GO ISSUE MESSAGE        Y02006
         MVC   PREFXRGV,VTADSTG    RESTORE VIRTUAL ADDRESS       Y02006
         B     PRERRMSG            GO ISSUE MESSAGE              Y02006
         SPACE 1                                               @YM08438
RLAD0    XC    PREFXRGR,PREFXRGR   ZERO REAL ADDRESS             Y02006
         BAL   R4,RDCPUST          GET REAL ADDR FROM STORE STATUS
*                                  INFO                          Y02006
         LTR   R15,R15             WAS A VALID ADDRESS FOUND     Y02006
         BZ    RLADOK              YES - CONTINUE PROCESSING     Y02006
         B     CHKVTAD             NO - GO CHECK VIRTUAL ADDR    Y02006
         SPACE 1                                               @YM08438
RDVTERR  TM    MSTSW,RDRLERRB      ERROR READING REAL ADDR ALSO  Y02006
         BZ    ROKVTERR            NO - BRANCH TO HANDLE VIRTUAL
*                                  READ ERROR                    Y02006
         NI    MSTSW,XFF-RDRLERRB  RESET ERROR FLAG              Y02006
         B     RERRVERR            BRANCH TO ERROR IN BOTH       Y02006
         SPACE 1                                               @YM08438
ROKVTERR OC    PREFXRGR,PREFXRGR   REAL ADDR = 0                 Y02006
         BZ    PRERRMSG            YES - GO ISSUE ERROR MESSAGE  Y02006
         NC    PREFXRGR,MASKOF4K   REAL ADDR ON A 4K BOUNDARY    Y02006
         BNZ   RERRVERR            NO - GO ISSUE MESSAGE         Y02006
         MVC   PREFXRGR,RLADSTG    RESTORE REAL ADDRESS          Y02006
         B     PRERRMSG            GO ISSUE MESSAGE              Y02006
RERRVERR XC    PREFXRGR,PREFXRGR   ZERO REAL ADDRESS IN COMMON   Y02006
         BAL   R4,RDCPUST          GET REAL ADDR FROM CPU STAT   Y02006
         CH    R15,FOUR            RETURN CODE = 4               Y02006
         BNE   PRERRMSG            YES - ISSUE MESSAGE           Y02006
NOPREFX  L     R1,MSTMSG3          ADDR OF NO PREFIXING MSG      Y02006
         BAL   R9,MPRTMSG          WRT TO PRDMP LOG              Y02006
         B     GETMSTMT            CONTINUE PROCESSING           Y02006
         SPACE 1                                               @YM08438
RDRLERR  OI    MSTSW,RDRLERRB      SET ERROR FLAG                Y02006
         B     RDVIRTAD            GO READ VIRTUAL ADDRESS       Y02006
         SPACE 1                                               @YM08438
***  GET ADDRESS OF THE ASVT  ***                              @YM08438
         SPACE 1                                                 Y02006
GETMSTMT EQU   *                                                 Y02006
         LA    R6,GETMSTR3         ERROR RETURN ADDRESS          Y02006
         LA    PREG,CVTASVT        ADDRESS OF ASVT               Y02006
         BRREAD (PREG)                                           Y02006
         MVC   ASVTADDR(4),0(PREG) SAVE ASVT ADDR IN COMMON      Y02006
         SPACE 1                                               @YM08438
***  GET CURRENT ASCB  ***                                     @YM08438
         SPACE 1                                                 Y02006
GETMSTR3 EQU    *                                                Y02006
         CLC   QASID,ZEROASID      ASID IN COMMON EQUAL TO ZERO  Y02006
         BNE   GTIDFRVT          NO - GET CURRENT ASCB FROM ASVT Y02006
         LA     PREG,CVTTCBP       ADDR OF TCB POINTER IN CVT    Y02006
         LA    R6,GETMSTR4         ERROR RETURN ADDR             Y01980
         BRREAD   (PREG)                                         Y01980
         L     PREG,0(PREG)        CVTTCBP                     @YM08438
         LA    PREG,12(PREG)        ADDR OF CURRENT ASCB PTR     Y02006
         BRREAD  (PREG)                                        @YM08438
         MVC   CURASCB(4),0(PREG)   SAVE ADDR OF CURRENT ASCB    Y02006
         L     R4,CURASCB          ADDRESS OF CURRENT ASCB       Y02006
         USING ASCB,R4                                           Y02006
         LA    PREG,ASCBASID       ADDRESS OF ASID IN ASCB       Y02006
         BRREAD (PREG)                                           Y02006
         MVC   ASIDSV(2),0(PREG)   SAVE CURRENT ASID             Y02006
***  THE ASID WILL BE STORED IN COMMON AT LOCATION QASID AFTER THE LAST
*    BRREAD IN MST. IT MUST NOT BE MOVED THERE BEFOREHAND BECAUSE
*    AMDPRRDC NEEDS TO HAVE THE QASID FIELD = '0000'X FOR ALL OF THE
***  BRREADS IN MST WHEN THE INPUT IS FROM AMDSADMP.           @YM08438
         B     GETMSTR4            CONTINUE                      Y02006
         SPACE 1                                                 Y02006
GTIDFRVT EQU   *                                               @YM08438
         OC    ASVTADDR,ASVTADDR   IS ASVT ADDR = 0              Y02006
         BZ    GETMSTR4            YES - BRANCH                @YM08438
         LA    R6,GETMSTR4         ERROR RETURN ADDRESS          Y02006
         L     R4,ASVTADDR         ADDRESS OF ASVT               Y02006
         USING ASVT,R4                                           Y02006
         LA    R3,ASVTENTY         ADDRESS OF ASVTENTY           Y02006
         LH    PREG,QASID          ASID                          Y02006
         SLA   PREG,MULTBY4        MULTIPLY BY 4                 Y02006
         AR    PREG,R3             ADD ADDRESS OF ASVTENTY       Y02006
         SH    PREG,FOUR           SUBTRACT 4                    Y02006
         BRREAD (PREG)                                           Y02006
         MVC   CURASCB(4),0(PREG)  SAVE ADDR OF CURRENT ASCB     Y02006
         SPACE 1                                                 Y02006
***  GET TOP OF NUCLEUS VALUE  ***                             @YM08438
         SPACE 1                                                 Y02006
GETMSTR4 EQU   *                                               @YM08438
         LA    R6,GETMST5A         ERROR RETURN ADDR             Y02006
         LA    PREG,CVTNUCB        NUC UPPERBOUND PTR ADDR       Y01980
         BRREAD  (PREG)                                        @YM08438
         L     R3,0(PREG)                                        Y02006
         LTR   R3,R3               IS ADDRESS ZERO               Y02006
         BZ    GETMST5A            YES - STAY WITH DEFAULT       Y02006
         ST    R3,NUCTOP           SAVE UPPER BOUND OF NUCLEUS   Y02006
         OI    SWF,NUCTFRMC        INDICATE NUCTOP FROM CVT      Y02006
         SPACE 1                                                 Y02006
***  GET CSA ADDRESS   ***                                     @YM08438
         SPACE 1                                               @YM08438
GETMST5A EQU   *                                                 Y02006
         LA    R6,GETMSTR6         ERROR RETURN ADDRESS          Y02006
         LA    PREG,CVTGDA         GLOBAL DATA AREA ADDRESS      Y02006
         BRREAD (PREG)                                           Y02006
         L     R3,0(PREG)                                        Y02006
         LTR   R3,R3               IS ADDRESS ZERO               Y02006
         BZ    GETMSTR6            YES - STAY WITH DEFAULT       Y02006
         USING GDA,R3                                          @YM08438
         LA    PREG,PASTRT         GET ADDR OF PRIVATE AREA      Y02006
         BRREAD (PREG)                                         @YM08438
         L     R10,0(PREG)         SAVE BEGINNING ADDR           Y02006
         LTR   R10,R10             IS ADDRESS ZERO               Y02006
         BZ    GETMSTR6            YES - STAY WITH DEFAULT       Y02006
         LA    PREG,PASIZE         GET PRIVATE AREA SIZE         Y02006
         BRREAD (PREG)                                           Y02006
         L     PREG,0(PREG)        PASIZE                        Y02006
         LTR   PREG,PREG           IS SIZE ZERO                  Y02006
         BZ    GETMSTR6            YES - STAY WITH DEFAULT       Y02006
         AR    PREG,R10            CALC ENDING ADDR OF PRIV AREA Y02006
         ST    PREG,CSADDR         SAVE ENDING ADDR IN COMMON    Y02006
         SPACE 1                                               @YM08438
***  GET THE ADDRESS OF THE PAGE FRAME TABLE FROM THE PAGE VECTOR TABLE
         SPACE 1                                                 Y02006
GETMSTR6 EQU   *                                               @YM08438
         LA    R6,GETDATE          ERROR RETURN ADDRESS         @YM4501
         LA    PREG,CVTPVTP        ADDRESS OF PAGE VECTOR TABLE  Y01980
         BRREAD  (PREG)                                          Y01980
         L     PREG,0(PREG)        GET THE ADDRESS               Y01980
         LTR   PREG,PREG           IS ADDRESS EQUAL ZERO         Y02006
         BZ    GETDATE             YES-DONT READ FOR PTF ADDR   @YM4501
         LR    R4,PREG             SAVE ADDR OF PVT              Y01980
         USING PVT,R4                                            Y02006
         SPACE 1                                               @YM08438
         LA    PREG,PVTPFTP        ADDR OF PAGE FRAME TABLE      Y02006
         BRREAD  (PREG)                                          Y01980
         L     PREG,0(PREG)        SAVE ADDR OF                  Y01980
         ST    PREG,QAPFT          PAGE FRAME TABLE IN COMMON    Y01980
         SPACE 1                                               @YM08438
***  GET DATE FROM CVT  ***                                    @YM08438
         SPACE 1                                               @YM08438
GETDATE  EQU   *                                               @YM08438
         LA    R6,GMSTER1          ERROR RETURN ADDRESS          Y02006
         LA    PREG,CVTDATE        ADDR OF DATE                  Y01980
         BRREAD  (PREG)                                        @YM08438
         MVC   DATE(4),0(PREG)     SAVE DATE FOR LATER         @YM08438
         SPACE 1                                               @YM08438
***  CONVERT TIME OF DAY VALUE THAT WAS IN THE DUMP HEADER  ***
         SPACE 1                                                 Y02006
         LA    PREG,CVTTZ          ADDRESS OF TIME ZONE VALUE    Y01980
         BRREAD  (PREG)                                          Y01980
         ST    PREG,PCVTTZ         SAVE IN PARM LIST             Y01980
         MVC   PTODSAV,TITLETME+5  GET TIME FROM HEADER RECORD   Y02006
         SPACE 1                                               @YM08438
         LA    PREG,PCVTTZ         PTR TO 3 WORD PARM LIST       Y01980
         LA    R2,1                CODE- TIME,DATE CONVERSION    Y01980
         L     R15,QATMERTN        ADDR TOD CONVERSION ROUTINE   Y01980
         BALR  R14,R15             LINK TO TOD CONVERSION        Y01980
         SPACE 1                                               @YM08438
         MVC   TITLETME+5(L'PTODHRS),PTODHRS    HOURS TO TITLE   Y01980
         MVC   TITLETME+8(L'PTODMIN),PTODMIN   MINUTES TO TITLE  Y01980
         MVC   TITLETME+11(L'PTODSEC),PTODSEC  SECONDS TO TITLE  Y01980
         SPACE 1                                               @YM08438
***********************************************************************
*                                                                     *
*   CONVERT JULIAN DATE TO A REAL DATE AND PLACE IT IN THE TITLE      *
*                                                                     *
***********************************************************************
         SPACE 1                                               @YM08438
         TM    DATE+3,X'0F'        IS DATE VALID               @YM08438
         BNO   GMSTERR             BR IF NOT TO LEAVE DATE BLANK Y01980
         SR    R3,R3                CLEAR IC REG               @YM08438
         IC    R3,DATE+1            GET YEAR                   @YM08438
         SLL   R3,4                 SHIFT LEFT 1 DIGIT,MAKE ROOM FOR
*                                   SIGN                       @YM08438
         LA    R2,15                LOAD SIGN TO R2            @YM08438
         OR    R3,R2                OR SIGN INTO DECIMAL YEAR  @YM08438
         XC    WORK1(4),WORK1       ZERO FIRST WORD OF WORKAREA
         ST    R3,WORK1+4           STORE DEC YEAR INTO WORKAREA
         CVB   R3,WORK1             CONVERT YEAR TO BINARY     @YM08438
         LA    R2,3                  LOAD AND MASK  TO R2      @YM08438
         NR    R3,R2                 TEST FOR YEAR IN MULT OF FOUR
*                                    (IS IT A LEAP YEAR?)      @YM08438
         BZ    DATER1              BR IF IT IS                 @YM08438
         LA    R2,28               NUMBER OF DAYS IN FEB       @YM08438
         B     DATER2              SKIP LEAP YEAR PROCESSING   @YM08438
DATER1   LA    R2,29               NUMBER OF DAYS IN FEB IN LEAP YEAR
DATER2   STC   R2,MONTHMSK+10      STORE PROPER LENGTH FOR MONTH OF FEB
         XC    WORK1(8),WORK1      ZERO WORK AREA              @YM08438
         MVC   WORK1+6(2),DATE+2   MOVE JULIAN DATE TO WORK1   @YM08438
         CVB   R4,WORK1            CONVERT TO BINARY           @YM08438
         SR    R5,R5               CLEAR MONTH REG             @YM08438
         LR    R6,R5               ZERO MONTH LENGTH REG       @YM08438
         LA    R3,12               LOAD LOOP COUNT             @YM08438
         LA    R2,MONTHMSK-1       INITIALIZE BASE REG         @YM08438
MONLOOP  AH    R5,ONEA             ADD ONE TO MONTH REG        @YM08438
         IC    R6,0(R3,R2)         LOAD MONTH LENGTH           @YM08438
         SR    R4,R6               SUBTRACT MONTH LENGTH FROM JULIAN
         BNP   MONADJ              BR IF EQ OR LT 0            @YM08438
         BCT   R3,MONLOOP          LOOP                        @YM08438
         SPACE 1                                               @YM08438
MONADJ   AR    R4,R6               ADD MONTH LENGTH BACK       @YM08438
         CVD   R5,WORK1            CONVERT MONTH TO DECIMAL    @YM08438
         MVO   WORK1+1(4),WORK1+4(4) GET RID OF SIGN           @YM08438
         IC    R6,WORK1+3          DECIMAL MONTH TO R6         @YM08438
         SLL   R6,8                                            @YM08438
         CVD   R4,WORK1            CONVERT DAY TO DECIMAL      @YM08438
         MVO   WORK1+1(4),WORK1+4(4) GET RID OF SIGN           @YM08438
         IC    R6,WORK1+3          DECIMAL DAY TO R6           @YM08438
         SLL   R6,8                                            @YM08438
         IC    R6,DATE+1           YEAR TO R6                  @YM08438
         LA    R7,12               POSITIVE SIGN               @YM08438
         SLL   R7,28               SHIFT TO HIGH ORDER DIGIT   @YM08438
         SLDL  R6,4                SIGN TO R6                  @YM08438
         ST    R6,WORK1            STORE PACKED DECIMAL DATE   @YM08438
         UNPK  EDWRK(6),WORK1(4)   MAKE DATE PRINTABLE         @YM08438
         OI    EDWRK+5,X'F0'       SET ZONE IN SIGN SLOT       @YM08438
         MVC   DATEPTRN+6(2),EDWRK+4  MOVE YEAR TO PATTERN     @YM08438
         MVC   DATEPTRN+3(2),EDWRK+2  MOVE DAY TO PATTERN      @YM08438
         MVC   DATEPTRN(2),EDWRK   MOVE MONTH TO PATTERN       @YM08438
         MVC   TITLEDTE+5(8),DATEPTRN MOVE DATE TO TITLE       @YM08438
         B     GMSTERR             PRINT TITLE                   Y01980
         SPACE 2                                               @YM08438
GMSTER1  MVC   TITLEDTE+5(8),BLANKS  BLANK OUT DATE              Y02006
         MVC   TITLETME+5(8),BLANKS  BLANK OUT TIME              Y02006
         SPACE 1                                               @YM08438
****  BUILD TITLE (IF ANY) FROM HEADER RECORD  ***               S21016
GMSTERR  BRWRITE SKIP              SKIP TO TOP OF PAGE           S21016
         L     R2,CURBUF           OBTAIN CURRENT BUFFER ADDRESS Y02006
CHK4TTLE CLC   HDRTITLE(100),1(R2) WAS A TITLE SPECIFIED         Y02006
         BE    MVCTTL              NO - BRANCH                   Y02006
MOVETTL  MVC   18(100,R2),HDRTITLE MOVE USER DATA FROM HEADER    Y02006
         MVC   1(17,R2),TTLFRDMP   MOVE HEADING TO BUFFER        S21016
         MVC   TITLEMSG(64),HDRTITLE  SET UP TITLE             @OZ00406
WRTTTL   OI    PRSW,TTLSW          SET DUMP TITLE SWITCH         S21016
         BRWRITE 3                 WRITE DUMP TITLE              S21016
         TM    Z9SUFLG,X'01'        SU'S CONFIGURED             UZ81700
         BZ    GMSTRET              NO - STOP CHECK             UZ81700
         TM    SWF,QSADMP           STAND ALONE DUMP INPUT      OZ12028
         BO    GMSTRET              YES - FORGET ERRORID        OZ12028
         TM    Z9SUBITS+2,X'40'     SU17 CONFIGURED             UZ81700
         BZ    GMSTRET              NO - BYPASS ERRORID CODE    UZ81700
         L     R2,CURBUF            GET CURRENT BUFFER ADDRESS  UZ81700
         CLI   Z9ERRID,X'FE'        ID EXISTS?                  UZ81700
         BNE   MSTMVER              YES - MOVE ERROR ID         UZ81700
*                                   NO - GIVE NO ERRID COMMENT  UZ81700
         MVC   1(37,R2),NOERRID     COMMENT TO BUFFER           UZ81700
         B     MSTPTER              PRINT LINE                  UZ81700
MSTMVER  EQU   *                                                UZ81700
         MVC   1(62,R2),ERRID       MOVE ERRORID TAG            UZ81700
         LA    R14,0                CLEAR WORK1                 UZ81700
         ST    R14,WORK1            FOR LOADING VALUES          UZ81700
         MVC   WORK1+2(2),Z9ERRID   ALLOW FOR H-ORDER BIT ON    UZ81700
         L     R14,WORK1            GET SEQ NUMBER              UZ81700
         CVD   R14,WORK1            HEX TO DECIMAL              UZ81700
         UNPK  28(5,R2),WORK1+5(3)  MOVE TO OUTPUT LINE         UZ81700
         OI    32(R2),X'F0'         CHANGE SIGN ON LAST DIGIT   UZ81700
         LA    R14,0                CLEAR WORK1                 UZ81700
         ST    R14,WORK1            FOR LOADING VALUES          UZ81700
         MVC   WORK1+6(2),Z9ERRID+2 PICK UP CPU                 UZ81700
         HEXCNVT WORK1,WORK1+7,1   CONVERT TO PRINTABLE HEX     UZ81700
         MVC   37(2,R2),WORK1      MOVE CPU TO OUTPUT           UZ81700
         MVC   WORK1+6(2),Z9ERRID+4 PICK UP ASID                UZ81700
         HEXCNVT WORK1,WORK1+6,2   CONVERT TO PRINTABLE HEX     UZ81700
         MVC   44(4,R2),WORK1      MOVE ASID TO OUTPUT          UZ81700
         MVC   WORK1(4),Z9ERRID+6   GET TIME STAMP              UZ81700
         L     R15,WORK1            GET TIME STAMP INTO REG     UZ81700
         SR    R14,R14              ZERO EVEN REGISTER          UZ81700
         D     R14,=F'10'           GET FULL SECONDS            UZ81700
         CVD   R14,WORK1            GET REMAINING TENTHS        UZ81700
         UNPK  62(1,R2),WORK1+7(1)  MOVE TO OUTPUT LINE         UZ81700
         OI    62(R2),X'F0'         CHANGE SIGN ON LAST DIGIT   UZ81700
         SR    R14,R14              ZERO EVEN REGISTER          UZ81700
         D     R14,=F'60'           GET MINUTES                 UZ81700
         CVD   R14,WORK1            GET REMAINING SECONDS       UZ81700
         UNPK  59(2,R2),WORK1+6(2)  MOVE TO OUTPUT LINE         UZ81700
         OI    60(R2),X'F0'         CHANGE SIGN ON LAST DIGIT   UZ81700
         SR    R14,R14              ZERO EVEN REGISTER          UZ81700
         D     R14,=F'60'           GET HOURS                   UZ81700
         CVD   R14,WORK1            GET REMAINING MINUTES       UZ81700
         UNPK  56(2,R2),WORK1+6(2)  MOVE TO OUTPUT LINE         UZ81700
         OI    57(R2),X'F0'         CHANGE SIGN ON LAST DIGIT   UZ81700
         CVD   R15,WORK1            GET REMAINING HOURS         UZ81700
         UNPK  53(2,R2),WORK1+6(2)  MOVE TO OUTPUT LINE         UZ81700
         OI    54(R2),X'F0'         CHANGE SIGN ON LAST DIGIT   UZ81700
MSTPTER  EQU   *                                                UZ81700
         BRWRITE 2                  PRINT ERRORID LINE          UZ81700
         B     GMSTRET             RETURN                        S21016
MVCTTL   MVC   1(21,R2),TTLFRDMP   MOVE NO TITLE MSG TO BUFFER   Y02006
         B     WRTTTL              GO TO WRITE MESSAGE           S21016
         SPACE 1  2                                            @YM08438
***  THIS BLOCK OF CODE MOVES THE CURRENT ASID THAT WAS FOUND IN THE
*    DUMP INTO THE QASID FIELD IN COMMON IF QASID WAS EQUAL TO X'0000'
*    ON ENTRY TO MST. THIS BLOCK OF CODE MUST FOLLOW THE LAST BRREAD
*    IN MST SINCE AMDPRRDC DEPENDS ON THE QASID FIELD BEING ALL
***  ZEROES UNTIL AFTER MST PROCESSING IS COMPLETED.           @YM08438
         SPACE 1                                               @YM08438
GMSTRET  EQU   *                                                OZ13033
         TM    Z9SUFLG,X'01'       SUBITS SET?                  OZ13033
         BZ    GMSTRETA            NO - DO NOT FORMAT           OZ13033
         L     R15,BITADR          ROUTINE TO FORMAT BIT STRING OZ13033
         BALR  R14,R15             LINK TO IT                   OZ13033
GMSTRETA EQU   *                                                OZ13033
         CLC   QASID,ZEROASID      WAS ASID = 0 ON ENTRY        OZ13033
         BNE   GMSTRET1            NO - RETURN TO CALLER         Y02006
         MVC   QASID,ASIDSV        MOVE ASID TO COMMON           Y02006
         XC    ASIDSV,ASIDSV       ZERO ASID SAVE AREA           Y02006
         SPACE 1                                                 Y02006
GMSTRET1 MVC   ERRADDR(4),MSTERSAV                             @YM08438
         CLI   SEGTABOR,X'FF'      IS SEG. TAB. ADDR. USER SET @YM08438
         BNE   GMSTRET2            NO, RETURN TO CALLER        @YM08438
         XC    QASID(2),QASID      ZERO CURRENT ASID FOR AMDPRRDC
GMSTRET2 L     R13,MSTSAVE+4       POINT TO CALLER'S SAVE AREA @YM08438
         LM    R14,R12,12(R13)     RESTORE CALLER'S REGISTERS  @YM08438
         BR    RETREG              RETURN TO CALLER            @YM08438
         EJECT                                                 @YM08438
**************************************************************** A43168
*                                                                A43168
*                  GET MASTER ERROR ROUTINE                      A43168
*                                                                A43168
*  ALL BRREAD ERRORS ARE RETURNED TO THIS ROUTINE              @YM08438
*  SPECIAL HANDLING IS PROVIDED WHILE SEARCHING FOR THE CVT AND
*  WHEN ACCESSING THE SEGMENT TABLE.                           @YM08438
*                                                                A43168
**************************************************************** A43168
         SPACE 1                                               @YM08438
         USING *,R15               TEMPORARILY BASE ON REG 15    A43168
MSTERR   LA    R13,MSTSAVE         POINT TO MST-S SAVE AREA      A43168
         LM    R14,R12,12(R13)     RELOAD MST-S REGISTERS        A43168
         DROP  R15                                               A43168
         USING MSTBASE,BASE1       SHIFT BACK TO REG 11 AS BASE  A43168
         SPACE 1                                               @YM08438
         TM    MSTSW,SEGCK         READING SEGMENT TABLE         Y01980
         BO    MSTERR40            YES, GO TO ERROR HANDLER      Y01980
         SPACE 1                                               @YM08438
         TM    MSTSW,CVTSRCH       SEARCHING FOR THE CVT         Y02006
         BO    CSRCHERR            YES- BRANCH                   Y02006
         SPACE 1                                                 Y02006
         BR    R6                  BRANCH BACK TO ADDR IN R6     Y02006
         SPACE 1                                               @YM08438
***********************************************************************
*                                                                     *
*        ERROR - SEARCHING FOR CVT                                    *
*                                                                     *
***********************************************************************
CSRCHERR L     R4,MAPADSAV         LOAD MAP ADDRESS              Y01980
         LA    R4,0(R4)            CLEAR HI BYTE TO ZERO         Y01980
         LTR   R4,R4               HAS LAST MAP BEEN PROCESSED   Y01980
         BZ    CKIFMPND            IF ZERO, CHECK FURTHER        Y02006
         L     R5,MAPLSTAD(R4)     LOAD LAST ADDR IN BLOCK       Y01980
         LA    R5,0(R5)            CLEAR HI BYTE                 Y01980
         N     R3,RDTO4K           ROUND ADDRESS TO 4K BDY       Y02006
         SR    R5,R3               DETERMINE IF LAST ADDRESS IS  Y01980
         C     R5,MF4096           LARGER BY 4096 THE SEARCH ADDRY02006
         BL    MSTERR05            NO BRANCH GET NEXT MAP        Y02006
         A     R3,MF4096           POINT TO NEXT RECORD IN BLOCK Y02006
         B     MSTERR10            CONTINUE CVT SEARCH           Y01980
MSTERR05 L     R4,MAPCHAIN(R4)     POINT TO NEXT MAP             Y01980
         LA    R4,0(R4)            CLEAR HI-BYTE                 Y02006
         LTR   R4,R4               IS POINTER = 0                Y02006
         BZ    CKIFMPND            YES- BRANCH                   Y02006
         ST    R4,MAPADSAV         SAVE MAP ADDRESS              Y01980
         L     R3,MAPFSTAD(R4)     LOAD NEXT ADDR IN DUMPED STOR Y01980
MSTERR10 EQU   *                                                 Y02006
         C     R3,NUCTOP           WITHIN NUCLEUS                Y02006
         BL    GETMSTRK            YES- CONTINUE SCAN FOR CVT    Y01980
CKIFMPND OC    REALMAP,REALMAP     REAL DUMP                     Y02006
         BNZ   MSTERR20            YES - END OF MAPS             Y02006
         LM    R2,R6,SAVEREGS      RELOAD REGISTERS              Y02006
         LA    R6,4(R6)            INCREMENT TO NEXT ENTRY       Y02006
         BCT   R5,ERRMPLP          IS COUNTER 0 - NO, GET NEXT   Y02006
*                                  ADDR IN TABLE                 Y02006
         L     R2,0(R2)            GET ASIDNDX LINK FIELD        Y02006
         LTR   R2,R2               IS LINK FIELD = 0             Y02006
         BZ    MSTERR20            YES - END OF MAPS             Y02006
         LA    R6,MAPTROFF(R2)     INCREMENT TO 1ST DUMP MAP     Y02006
         LH    R5,EIGHTEEN         SET COUNTER                   Y02006
ERRMPLP  L     R4,0(R6)            GET DUMP MAP PTR              Y02006
         LTR   R4,R4               IS PTR = 0                    Y02006
         BZ    MSTERR20            YES - END OF MAPS             Y02006
         L     R3,MAPFSTAD(R4)     FIRST ADDRESS DUMPED          Y02006
         STM   R2,R6,SAVEREGS      SAVE REGISTERS                Y02006
         B     MSTERR10            CONTINUE                      Y02006
         SPACE 1                                               @YM08438
MSTERR20 XC    CVTADDR,CVTADDR     INDICATE CVT NO AVAILABLE     Y02006
         NI    MSTSW,XFF-CVTSRCH   RESET CVT SEARCH INDICATOR    Y02006
         L     R1,MSTMSG2          ADDR OF MESSAGE               Y01980
         BAL   R9,MPRTMSG          WRT TO PRDMP MESG LOG         Y01980
         B     GMSTER1             GO OUTPUT TITLE               Y02006
         SPACE 1                                               @YM08438
***********************************************************************
*                                                                     *
*        ERROR - UNABLE TO READ SEGMENT TABLE                         *
*                                                                     *
*        MSGID MEANING -                                              *
*              1 - ADDR SPECIFIED BY USER CONTROL                     *
*              2 - ADDR FOUND AT LOCATION X'31C' IN DUMP              *
***********************************************************************
MSTERR40 L     R3,MSTMSG1          ADDR OF ERROR MESSAGE         Y01980
         MVC   29(L'MSEGT,R3),0(R5) MOVE IN TABLE TYPE           Y02006
         MVC   56(L'MSGID,R3),MSGID  SET ID INTO MESSAGE         Y02006
         LA    R4,46(R3)           PUT CONVERTED ADDR IN MESG    Y01980
         LA    R1,RDLPRMST         LOC OF ADDR TO BE CONVERTED   Y01980
         L     R15,AADRCNVT        ADDR OF CONVERT ROUTINE       Y02006
         BALR  R14,R15             LINK TO THREE BYTE CONVERT    Y01980
         LR    R1,R3               ADDR OF MESG                  Y01980
         BAL   R9,MPRTMSG          WRT TO PRDMP LOG              Y01980
         BR    R6                  RETURN TO CALLER              Y02006
         EJECT                                                 @YM08438
***********************************************************************
*                                                                     *
*        THIS CLOSED SUB-ROUTINE WILL CHECK THAT THE                  *
*        SEGMENT TABLE CAN BE READ FROM DUMPED STORAGE                *
*        THEN THE FIRST PAGE TABLE WILL BE READ IN AND TESTED         *
*        FOR VALIDITY.                                                *
*                                                                     *
*        REG 4 - LINK                                                 *
*                                                                     *
***********************************************************************
SEGCHK   L     PREG,SEGTABOR       LOAD ORIGIN OF SEG TABLE      Y01980
         ST    R4,R4SAVE           SAVE RETURN ADDRESS           Y02006
         LA    R6,ZEROSGSW         ERROR RETURN ADDRESS          Y02006
SEGCHK10 OI    MSTSW,SEGCK         SEGMENT TABLE CHECK           Y01980
         OI    PRSW,PRNTREAL       INDICATE REAL REQUEST         Y01980
         LA    R5,MSEGT            TABLE TYPE FOR ERROR MESG     Y02006
         BRREAD  (PREG)                                        @YM08438
         L     PREG,0(PREG)        ADDR OF FIRST PAGE TABLE      YM1473
         LA    R5,MPAGE            TABLE TYPE FOR ERROR MESG.    Y02006
         BRREAD                    (PREG)                      @YM08438
         MVC   SEGWORK,0(PREG)     PAGE TAB TO WORK AREA         YM1473
         NC    SEGWORK,PAGEMSK     MASK OUT UNUSED BITS          YM1473
         CLC   SEGWORK,PAGECHK     IS FIRST PAGE TAB VALID       YM1473
         BE    SEGCHK70            YES,BRANCH                    YM1473
         L     R1,MSTMSG5          PAGE TABLE INVALID ERROR MESG YM1473
         MVC   54(L'MSGID,R1),MSGID  PUT ID INTO MESG            Y02006
         BAL   R9,MPRTMSG          WRT TO PRDMP LOG              YM1473
ZEROSGSW NI    PRSW,XFF-QSEGTBSW   RESET SEGTAB SWITCH           Y02006
         SPACE  1                                              @YM08438
SEGCHK70 NI    MSTSW,X'FF'-SEGCK   RESET SEG CHECK FLAG          YM1473
         NI    PRSW,X'FF'-PRNTREAL RESET REAL REQUEST            Y01980
         L     R4,R4SAVE           GET RETURN ADDRESS            Y02006
         BR    R4                  RETURN TO CALLER              Y01980
         EJECT                                                 @YM08438
***********************************************************************
*                                                                     *
*        THIS CLOSED SUB - ROUTINE WILL GET THE REAL ADDRESS OF THE   *
*        PSA FOR THE IPL'ED CPU FROM THE STORE STATUS INFORMATION     *
*        IN THE CPU STATUS RECORD AND VALIDITY CHECK IT               *
*                                                                     *
*        REG 4 - LINK                                                 *
*                                                                     *
*        RETURN CODES -                                               *
*              0 - ADDRESS ON A 4K BOUNDARY                           *
*              4 - READ FOR CPU STATUS RECORD ERROR OR STORE STATUS   *
*                  INFORMATION IS INVALID                             *
*              8 - ADDRESS IS EITHER ZERO OR IS NOT ON A 4K BOUNDARY  *
*                                                                     *
***********************************************************************
RDCPUST  LH    PREG,IPLCPU         PUT REQUEST NUMBER IN REG 1   Y02006
         LA    R6,RDCPUERR         ERROR RETURN ADDRESS          Y02006
         BRREAD (PREG),CPU         READ CPU STATUS RECORD        Y02006
         TM    0(PREG),STSTINV     STORE STATUS INFO VALID       Y02006
         BO    RDCPUERR            NO - BRANCH TO ERROR RETURN   Y02006
         TM    0(PREG),UNIPROC     UNIPROCESSOR                  Y02006
         BO    GETDATE             YES - BRANCH OUT OF ROUTINE   Y02006
         MVC   PREFXRGR,PRERGOFF(PREG)  SAVE ADDR IN COMMON      Y02006
         MVC   RLADSTG,PRERGOFF(PREG)  SAVE ADDR FOR MSG         Y02006
         OC    PREFXRGR(8),PREFXRGR ARE BOTH ADDR =0             Y02006
         BZ    GETDATE             YES,BRANCH OUT OF ROUTINE     Y02006
         OC    PREFXRGR,PREFXRGR   IS REAL ADDR =0               Y02006
         BZ    CPUERR8             YES - ERROR RETURN            Y02006
         NC    PREFXRGR,MASKOF4K   ADDR ON 4K BOUNDARY           Y02006
         BNZ   CPUERR8             NO - BRANCH                   Y02006
         MVC   PREFXRGR,RLADSTG    RESTORE REAL ADDRESS          Y02006
         SR    R15,R15             SET ZERO RETURN CODE          Y02006
CPURET   BR    R4                  RETURN TO CALLER              Y02006
         SPACE 1                                               @YM08438
RDCPUERR LH    R15,FOUR            SET RETURN CODE OF 4          Y02006
         B     CPURET              RETURN TO CALLER              Y02006
         SPACE 1                                               @YM08438
CPUERR8  XC    PREFXRGR,PREFXRGR   ZERO REAL ADDR IN COMMON      Y02006
         LH    R15,EIGHT           SET RETURN CODE OF 8          Y02006
         B     CPURET              RETURN TO CALLER              Y02006
         EJECT                                                 @YM08438
***********************************************************************
*                                                                     *
*        WRITE A MESSAGE TO THE PRDMP MESSAGE LOG              @YM08438
*                                                                     *
***********************************************************************
         SPACE 1                                               @YM08438
MPRTMSG  ST    R1,MSTMSG           SAVE MESSAGE ADDRESS          YM1473
         SR    R2,R2               CLEAR REG                     YM1473
         LH    R2,0(R1)            DETERMINE MESSAGE             Y01980
         SH    R2,FOUR             LENGTH                        Y01980
         LA    R1,4(R1)            POINT TO BEGINNING OF TEXT    Y01980
         BRPRTMSG  (R1),(R2)       WRITE TO PRDMP LOG            Y01980
         TM    SWA,RDRSW           IS INPUT FROM CONSOLE         YM1473
         BO    MPRTMSG7            NO,BY-PASS WTO                YM1473
         L     R1,MSTMSG           POINT TO WTO LIST             YM1473
         WTO   MF=(E,(R1))         MESSAGE TO CONSOLE            YM1473
MPRTMSG7 BR    R9                  RETURN                        YM1473
         EJECT                                                 @YM08438
***********************************************************************
*                                                                     *
*   SAVE AREA AND CONSTANTS FOR GETMSTR ROUTINE                       *
*                                                                     *
***********************************************************************
         SPACE 1                                               @YM08438
PTODSAV  DC    D'0'                TOD FROM AMDSADMP HEADER      Y01980
SEGWORK  DC    D'0'                PAGE TABLE WORK AREA          YM1473
MSTSAVE  DC    18F'0'              AMDPRMST SAVE AREA          @YM08438
MSTERSAV DC    F'0'                SAVE AREA FOR CALLER-S ERROR  A43168
*                                  ROUTINE ADDRESS               A43168
*                                                              @YM08438
MSTMSG1  DC    A(AMD260I)          ADDR OF MESSAGE               Y01980
MSTMSG2  DC    A(AMD261I)          CVT ERROR MESG                Y01980
MSTMSG3  DC    A(AMD284I)          NO PREFIX REGISTER            Y02006
MSTMSG4  DC    A(AMD263I)          NOT OS/VS2 DUMP               Y01980
MSTMSG5  DC    A(AMD264I)          PAGE TABLE INVALID            YM1473
MSTMSG6  DC    A(AMD286I)          CVT NOT VALID                 Y02006
MSTMSG7  DC    A(AMD290I)          PREFIX ERROR                  Y02006
MSTMSG8  DC    A(AMD294I)          ERROR READING 31C             Y02006
*              THREE WORD PARM LIST                            @YM08438
PCVTTZ   DC    A(0)                ADDRESS OF CVT TIME ZONE      Y01980
PTODVAL  DC    A(PTODSAV)          ADDRESS OF TOD VALUE          Y01980
PTODOUT  DC    A(PTODCONV)         ADDRESS OF OUTPUT AREA        Y01980
*                                                              @YM08438
DATE     DC    F'0'                                            @YM08438
SAVEREGS DS    0F                  REGISTER SAVE AREA            Y02006
TABLEAD  DC    F'0'                ADDR OF ASIDNDX TABLE         Y02006
AD4SRCH  DC    F'0'                ADDR READ BEING DONE ON       Y02006
MAPADSAV DC    F'0'                SAVE AREA FOR MAP ADDRESS     Y01980
CTRSAVE  DC    F'0'                COUNTER SAVE AREA             Y02006
TABLPOS  DC    F'0'                CURRENT POSITION IN TABLE     Y02006
MSTMSG   DC    F'0'                ADDR OF OUTPUT MESSAGE        YM1473
MF4096   DC    F'4096'             SIZE OF DUMPED STORAGE BLOCK  Y02006
*                                                              @YM08438
PAGEMSK  DC    XL8'FFF0FFF0FFF0FFF0'  MASK OUT LOW 4 BITS        YM1473
PAGECHK  DC    XL8'0000001000200030' FIRST PAGE TABLE IMAGE      YM1473
*                                                              @YM08438
PTODCONV DS    0CL24               OUTPUT AREA TOD CONVERSION    Y01980
         DS    CL7                 YEAR , DAY                    Y01980
PTODHRS  DS    CL3                 TOD HOURS                     Y01980
PTODMIN  DS    CL3                 TOD MINUTES                   Y01980
PTODSEC  DS    CL2                 TOD SECONDS                   Y01980
         DS    CL9                 END OF CONVERSION AREA        Y01980
MSEGT    DC    CL8'SEGMENT'        TABLE TYPE FOR ERROR MESG     YM1473
MPAGE    DC    CL8'   PAGE'        TABLE TYPE FOR ERROR MESG     YM1473
EDWRK    DC    CL12' '                                         @YM08438
MONTHMSK DC    X'1F1E1F1E1F1F1E1F1E1F1C1F'                     @YM08438
DATEPTRN DC    C'  /  /  '         DATE FORMAT                 @YM08438
CVTCHK   DC    X'0A0307FE'         SVC 3 AND BCR 15,14 IN CVT  @YM08438
TTLFRDMP DC    C'TITLE FROM DUMP: '                              S21016
NOTTL    DC    C'NONE'                                           S21016
MSTSW    DC    X'00'               MST INTERNAL SWITCHES         Y01980
MSGID    DC    C' '                SAVE AREA FOR MESSAGE ID      Y01980
DISP2CSW DC    H'732'                                            Y02006
ZEROASID DC    H'0'                                              Y02006
ASIDSV   DC    H'0'                                              Y02006
EIGHTEEN DC    H'18'                                             Y02006
EBCTHREE DC    C'03'               RELEASE LEVEL 3             @YM30904
         DS    0F                                                Y02006
MASKOF4K DC    X'00000FFF'         MASK FOR 4K BOUNDARY          Y02006
RDTO4K   DC    X'FFFFF000'         MASK FOR 4K BDY               Y02006
BITADR   DC    A(AMDPRBIT)         ADDR OF BIT FORMATTER        OZ13033
R4SAVE   DC    F'0'                SAVE AREA FOR R4              Y02006
RLADSTG  DC    F'0'                TEMPORARY SAVE AREA FOR REAL PREFIX
*                                  VALUE                         Y02006
VTADSTG  DC    F'0'                TEMPORARY SAVE AREA FOR VIRTUAL
*                                  PREFIX VALUE                  Y02006
CPUADINV DC    H'256'              CPU ADDR INVALID CONSTANT     Y02006
ERRID    DC    C'ERRORID FOR THIS DUMP = SEQYYYYY CPUZZ '       UZ81700
         DC    C'ASIDAAAA TIMEHH.MM.SS.T'                       UZ81700
NOERRID  DC    C'NO ERROR ID ASSOCIATED WITH THIS DUMP'         UZ81700
***********************************************************    @YM08438
PATCH    DC    120X'00'            STANDARD PATCH AREA           X01980
***********************************************************    @YM08438
         EJECT                                                 @YM08438
**********************************************************************
*                                                                     *
*        MESSAGES FOR  MODULE  AMDPRMST                               *
*                                                                     *
***********************************************************************
         SPACE 1                                               @YM08438
AMDPRMSM CSECT                                                   Y01980
         SPACE 1                                               @YM08438
AMD260I  WTO   'AMD260I UNABLE TO ACCESS SEGMENT TABLE AT XXXXXX ID=X',X
               ROUTCDE=(2),DESC=7,MF=L                           Y02006
AMD261I  WTO   'AMD261I UNABLE TO ACCESS CVT',MF=L,            @YM08438X
               ROUTCDE=(2),DESC=7                                Y01980
AMD284I  WTO   'AMD284I PREFIX VALUES NOT AVAILABLE',MF=L,     @YM08438X
               ROUTCDE=(2),DESC=7                                Y02006
AMD263I  WTO   'AMD263I DUMP MAY NOT BE FROM AN OS/VS2 RELEASE 3 SYSTEMX
               ',MF=L,ROUTCDE=(2),DESC=7                       @YM30904
AMD264I  WTO   'AMD264I PAGE TABLE FOR LOCATION ZERO NOT VALID ID=X',  X
               MF=L,ROUTCDE=(2),DESC=7                           YM1473
AMD286I  WTO   'AMD286I CVT AT XXXXXX NOT VALID, ID = 1',      @YM08438X
               MF=L,ROUTCDE=(2),DESC=7                           Y02006
AMD290I  WTO   'AMD290I ERROR IN PREFIX VALUES - REAL= YYYYYY, VIRTUAL=X
                XXXXXX ',MF=L,ROUTCDE=(2),DESC=7                 Y02006
AMD294I  WTO   'AMD294I UNABLE TO ACCESS SEGMENT TABLE ADDRESS AT LOCATX
               ION 31C',MF=L,ROUTCDE=(2),DESC=7                  Y02006
         EJECT                                                  OZ13033
*************************************************************** OZ13033
*                                                               OZ13033
*        THIS CONTROL SECTION WILL PRINT OUT THE THE SU         OZ13033
*    NUMBERS THAT ARE APPLIED ON THE DUMPED SYSTEM. IT IS       OZ13033
*    SET UP TO PRINT OUT 120 SU'S. REGISTER USAGE IS:           OZ13033
*                                                               OZ13033
*    R1  -   WORK REGISTER                                      OZ13033
*    R2  -   CONTAINS ADDR OF OUTPUT BUFFER                     OZ13033
*    R3  -   COUNTER FOR EACH BIT IN STRING                     OZ13033
*    R4  -   LOOP FOR EACH BYTE IN STRING                       OZ13033
*    R5  -   POINTER TO CURRENT BYTE IN STRING                  OZ13033
*    R6  -   COUNTER FOR EACH BIT FOR EACH BYTE                 OZ13033
*    R7  -   USED FOR SHIFTING EACH BIT TO TEST POSITION        OZ13033
*    R8  -   CURRENT POSITION IN OUTPUT BUFFER TO PLACE DATA    OZ13033
*    R9  -   LINK REGISTER FOR INTERNAL PROCEDURE               OZ13033
*                                                               OZ13033
*************************************************************** OZ13033
         SPACE 2                                                OZ13033
AMDPRBIT CSECT                                                  OZ13033
         USING *,R15               TEMPORARY BASE REG           OZ13033
         MODID                                                  OZ13033
         SAVE  (14,12)             DO SAVE AREA CHAINING        OZ13033
         LA    R1,BITSAVE          SAVE AREA FOR AMDPRBIT       OZ13033
         ST    R13,BITSAVE+4       KEEP OLD SAVE AREA ADDRESS   OZ13033
         ST    R1,8(R13)           SET NEW AREA FOR CHAINING    OZ13033
         LR    R13,R1              R13 HAS AMDPRBIT SAVE AREA   OZ13033
         DROP  R15                 RELEASE R15 AS BASE          OZ13033
         LR    R11,R15             ESTABLISH R11 AS BASE        OZ13033
         USING AMDPRBIT,R11        ESTABLISH BASE FOR ASSEMBLER OZ13033
         L     R2,CURBUF           PICK CURRENT OUTPUT BUFFER   OZ13033
         MVC   1(L'BITMSG1,R2),BITMSG1 SET BIT MESSAGE IN BUFFEROZ13033
         HEXCNVT 1+L'BITMSG1(R2),Z9SUBITS,16 PRINTABLE HEX      OZ13033
         L     R2,CURBUF           PICK CURRENT OUTPUT BUFFER   OZ13033
         MVC   54(2,R2),BLANKS     BLANK OUT LAST BYTE          OZ13033
         BRWRITE 2                 PRINT LINE                   OZ13033
         L     R2,CURBUF           PICK CURRENT OUTPUT BUFFER   OZ13033
         SR    R1,R1                                            OZ13033
         ST    R1,CNTSU            ZERO SU COUNT PER LINE       OZ13033
         EJECT                                                  OZ13033
         LR    R8,R2               KEEP CURRENT POSIT IN R8     OZ13033
         LA    R4,15               15 BYTES OF BIT STRING       OZ13033
         LA    R3,0                COUNTER OF BITS              OZ13033
         LA    R5,Z9SUBITS         STRING BYTE POINTER          OZ13033
BIT020   EQU   *                   SECOND LOOP                  OZ13033
         LA    R6,8                EACH BIT IN BYTE             OZ13033
         IC    R7,0(R5)            GET CURRENT STRING BYTE      OZ13033
BIT030   EQU   *                   THIRD LOOP                   OZ13033
         STC   R7,TESTBYTE         STORE FOR TESTING            OZ13033
         TM    TESTBYTE,X'80'      BIT IS ON?                   OZ13033
         BZ    BIT040              NO - IGNORE IT               OZ13033
         BAL   R9,BIT080           SAVE IT FOR OUTPUT           OZ13033
BIT040   EQU   *                                                OZ13033
         SLL   R7,1                SHIFT TO TEST NEXT BIT       OZ13033
         LA    R3,1(R3)            INCREMENT BIT COUNTER        OZ13033
         BCT   R6,BIT030           GET NEXT BIT                 OZ13033
         LA    R5,1(R5)            GET NEXT BYTE                OZ13033
         BCT   R4,BIT020           DO IT AGAIN                  OZ13033
         CR    R2,R8               PARTIAL LINE TO PRINT        OZ13033
         BE    BITDONE             NO - WE ARE DONE             OZ13033
         BRWRITE 1                 PRINT LAST LINE              OZ13033
BITDONE  EQU   *                                                OZ13033
         BRWRITE 2                 SKIP TWO LINES               OZ13033
         L     R13,BITSAVE+4       RESTORE CALLERS REGS         OZ13033
         RETURN (14,12)                                         OZ13033
         SPACE 2                                                OZ13033
BIT080   EQU   *                                                OZ13033
         MVC   9(2,R8),SU          MOVE SU TO OUTPUT            OZ13033
         CVD   R3,WORK1            CONVERT BIT NUMBER           OZ13033
         UNPK  11(3,R8),WORK1+6(2) BIT NUMBER TO OUTPUT         OZ13033
         OI    13(R8),X'F0'        SET SIGN                     OZ13033
         LA    R8,10(R8)           NEXT OUTPUT POSITION         OZ13033
         L     R1,CNTSU            NUMBER OF SUS ON LINE        OZ13033
         LA    R1,1(R1)            INCREMENT COUNT              OZ13033
         CH    R1,HTEN             10 IS MAX PER LINE           OZ13033
         BNE   BIT100              NOT EQUAL - JUST CONTINUE    OZ13033
         BRWRITE 1                 PRINT LINE                   OZ13033
         L     R2,CURBUF           GET NEW BUFFER               OZ13033
         LR    R8,R2               SAVE IT IN REG 8             OZ13033
         SR    R1,R1               START NEW SET ON LINE        OZ13033
BIT100   EQU   *                                                OZ13033
         ST    R1,CNTSU            SAVE NUMBER OF SUS ON LINE   OZ13033
         BR    R9                  RETURN TO CALL               OZ13033
         SPACE 3                                                OZ13033
SU       DC    C'SU'               CONSTANT FOR FORMATTING      OZ13033
TESTBYTE DS    CL1                                              OZ13033
BITMSG1  DC    C'THE SU BIT STRING = '                          OZ13033
CNTSU    DS    F                   NUMBER OF SUS PER LINE       OZ13033
BITSAVE  DS    18F                 SAVE AREA FOR AMDPRBIT       OZ13033
         END   AMDPRMST                                        @YM08438
