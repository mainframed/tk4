         TITLE 'AMDPRCOM - CONTROL/SCAN SERVICE ROUTINES'
***********************************************************************
*                                                                     *
* D 535800-537000,552600,561000-562800                           Y02006
* D 689400-691800,692400-693600,699600,954600-955200             Y02006
* C 505800,511200,522000,525600,553200,583800,585000             Y02006
* C 614400,616800-617400,648600,688800,693600,694200             Y02006
* C 697800-699000,712800,721800,765600,802800-803400,839400      Y02006
* A 491300-491340,508700,523700,585500-585520,615500-615592      Y02006
* A 509300-509320,521900-521997,552500-553180,596300-596320      Y02006
* A 597120-597498,611300-611320                                  Y02006
* A 597520-598575,696500-696560,699500-700000,688700-688740      Y02006
* A 712700,715100,721700,723500,724100                           Y02006
* A 727100-727140,760700-760740                                  Y02006
* C 754200                                                       Y01980
* A 954600-955200                                                Y01980
* A 651100,715000,734600,772600,863100,918100,963699             X01980
*                                                                     *
**    ***  AMDPRCOM - COMMON AND RESIDENT SERVICE ROUTINES  ***      **
*                                                                     *
* STATUS --   AOS/2  RELEASE 1                                        *
*                                                                     *
* FUNCTION --                                                         *
*                                                                     *
*         THIS MODULE CONTAINS THE AMDPRDMP MAIN COMMUNICATIONS AREA  *
*    AMDPRCOM.  IN ADDITION, SIX AMDPRDMP SERVICE ROUTINES ARE        *
*    CONTAINED IN THIS MODULE.  THESE ROUTINES MUST BE PERMANENTLY    *
*    RESIDENT IN THE AMDPRDMP REGION.                                 *
*                                                                     *
*         AMDPRWTR                                                    *
*                                                                     *
*         THIS ROUTINE CONTROLS ALL OUTPUT TO THE PRINTER DATA SET.   *
*         QSAM IS USED.  THE OUTPUT DCB IS OPENED ON THE FIRST CALL.  *
*         IF THE PRINTER DD STATEMENT IS MISSING, THE TERMINATION     *
*         ROUTINE AMDPRXIT IS INVOKED.  A DCB EXIT IS TAKEN SO THAT   *
*         THE OUTPUT BLOCKSIZE MAY BE ADJUSTED BY THE PRINTER DD      *
*         STATEMENT.  MAIN STORAGE IS OBTAINED FOR AN OUTPUT BUFFER   *
*         AND THE ADDRESS OF THE BUFFER IS STORED IN AMDPRCOM.        *
*         SPACING AND PAGING, INCLUDING PRINTING OF THE TITLE ON      *
*         EACH NEW PAGE, ARE ALSO HANDLED BY THIS ROUTINE.            *
*                                                                     *
*         AMDPRSYN                                                    *
*                                                                     *
*         THIS IS THE AMDPRDMP MESSAGE WRITER.  MESSAGES ARE          *
*         WRITTEN TO THE SYSPRINT DATA SET USING THE AMDPRMSG         *
*         SERVICE ROUTINE.  IF CONTROL STATEMENTS ARE BEING ENTERED   *
*         FROM THE CONSOLE, MESSAGES ARE ALSO WRITTEN TO THE CONSOLE. *
*         CSECT AMDPRSYN ALSO CONTAINS TWO CONVERSION ROUTINES        *
*         WHICH ARE SHARED BY ALL AMDPRDMP ROUTINES.  ONE CONVERTS    *
*         A THREE BYTE BINARY FIELD (USUALLY AN ADDRESS) TO ITS       *
*         HEX CHARACTER REPRESENTATION, THE OTHER CONVERTS A FULL     *
*         WORD OF BINARY DATA TO ITS HEX REPRESENTATION.              *
*                                                                     *
*         AMDPRMSG                                                    *
*                                                                     *
*         THIS CSECT ACCOMPLISHES ALL I/O TO THE SYSPRINT DATA        *
*         SET.  QSAM IS USED.  THE SYSPRINT DCB IS OPENED ON THE      *
*         FIRST CALL TO THIS ROUTINE.  IF THE SYSPRINT DD STATEMENT   *
*         IS MISSING, SUBSEQUENT CALLS TO AMDPRMSG RESULTS IN AN      *
*         IMMEDIATE RETURN.                                           *
*                                                                     *
*         AMDPRGFR                                                    *
*                                                                     *
*         THIS IS THE GENERAL FORMAT ROUTINE OF AMDPRDMP.  INPUT      *
*         TO THIS ROUTINE IS A LIST OF FORMAT PATTERNS, EACH          *
*         DESCRIBES THE POSITION OF A DATA ITEM IN THE OUTPUT         *
*         LINE AND A LABEL WHICH IDENTIFIES THAT DATA ITEM.  THE      *
*         ENTIRE LIST THUS DESCRIBES THE FORMAT OF A LINE OF          *
*         OUTPUT.  AMDPRGFR FORMATS SUCH A LINE IN THE CURRENT        *
*         OUTPUT BUFFER, READY FOR PRINTING BY THE CALLER.  THE       *
*         FOLLOWING IS THE FORMAT OF A PATTERN ENTRY...               *
*                                                                     *
*            0 ****************************************               *
*              *  CODE  * LBL* DTA*  LABEL  *  DATA   *               *
*              *  BYTE  * LN * LN * OFFSET  * OFFSET  *               *
*            4 ****************************************               *
*              *   POINTER TO LABEL                   *               *
*              *    (IF PRESENT)                      *               *
*            8 ****************************************               *
*              *   POINTER TO DATA                    *               *
*              *    (IF PRESENT)                      *               *
*              ****************************************               *
*                                                                     *
*          CODE BYTE DESCRIPTION...                                   *
*           BIT   MEANING                                             *
*            0    UNUSED                                              *
*            1    UNUSED                                              *
*            2    DATA IS EBCDIC                                      *
*            3    DATA IS IN CORE                                     *
*            4    THERE IS A DATA POINTER                             *
*            5    DATA IS TO BE PLACED ON PRINT LINE                  *
*            6    THERE IS A LABEL POINTER                            *
*            7    A LABEL IS TO BE INCLUDED ON PRINT LINE             *
*                                                                     *
*         IF LABEL AND DATA POINTERS DON'T EXIST THE PATTERN ENTRY    *
*         WILL ONLY BE 4 BYTES LONG.  IF EITHER POINTER IS OMITTED THE*
*         ROUTINE WILL USE THE ADDRESS OF THE LAST LABEL OR PLUS IT'S *
*         LENGTH FOR THE NEXT LABEL OR DATA ADDRESS.                  *
*         THE LAST ENTRY IN A PATTERN WILL BE FOLLOWED BY A BYTE OF   *
*         ZEROS.                                                      *
*                                                                     *
*         AMDPRTSV                                                    *
*                                                                     *
*         THIS SERVICE ROUTINE CONTAINS THE MANAGEMENT ROUTINES       *
*         FOR THE TCBLIST.  THE TCBLIST IS A QUEUE OF TCB ADDRESSES   *
*         WHICH IS INPUT TO THE FORMAT SERVICE MODULE AMDPRFSR        *
*         AND THE REGION BOUNDARY ROUTINE AMDPRFUB.  EACH ENTRY IN    *
*         THE TCBLIST HAS THE FOLLOWING FORMAT:                       *
*                                                                     *
*              *************************************                  *
*              *                  *                *                  *
*              *      LINK        *   TCB ADDRESS  *                  *
*              *                  *                *                  *
*              *************************************                  *
*              0                  4                                   *
*                                                                     *
*         THE TCBLIST IS BASED IN COMMON CSECT, AMDPRCOM.  AMDPRTSV   *
*         CONSISTS OF THREE ROUTINES- (1) THE TCB SAVE ROUTINE,       *
*         WHICH ENQUEUES A TCB ADDRESS ON THE TCBLIST; (2) A TCB      *
*         ADDRESS RETRIEVE ROUTINE, WHICH RETURNS TO THE CALLER       *
*         A TCB ADDRESS BASED ON THE TCBLIST POSITION NUMBER; AND     *
*         (3) THE TCBLIST DEQUEUE ROUTINE.                            *
*                                                                     *
*         AMDPRSTP                                                    *
*                                                                     *
*         THIS CSECT EXECUTES THE STOP OPTION OF AMDPRDMP.  IF THE    *
*         STOP OPTION HAS BEEN SELECTED AND AMDPRDMP IS NOT EXECUTING *
*         UNDER PCP, AMDPRWTP CALLS AMDPRSTP AS EACH LINE OF OUTPUT   *
*         IS PRINTED.  ON THE FIRST CALL TO AMDPRSTP, MESSAGE AMD165I *
*         IS ISSUED BY WTOR; HOWEVER, A WAIT IS NOT ISSUED TO WAIT    *
*         FOR A REPLY.  INSTEAD, ON EACH SUBSEQUENT ENTRY TO          *
*         AMDPRSTP, THE REPLY ECB IS TESTED FOR COMPLETION.  IF THE   *
*         ECB HAS BEEN POSTED, THE REPLY AREA IS CHECKED FOR 'STOP',  *
*         OTHERWISE CONTROL RETURNS TO AMDPRWTR.  IF STOP IS          *
*         REQUESTED, THEN AMDPRSTP BRANCHES TO THE CURRENT            *
*         STOP-EXIT ROUTINE AS ADDRESSED BY AMDPRCOM.  THE            *
*         STOP-EXIT ROUTINE IN EACH MODULE FACILITATES TERMIN-        *
*         ATION OF THE CURRENT FUNCTION AND THEN BRANCHES TO          *
*         THE STOP-EXIT ROUTINE OF THE CALLING MODULE.  THIS          *
*         CHAIN OF STOP-EXIT ROUTINES ENDS WITH THE FINAL STOP-       *
*         EXIT IN CSECT AMDPRMSC (MODULE AMDPRCTL).  IF A REPLY       *
*         OTHER THAN 'STOP' IS GIVEN, MESSAGE AMD165I IS REISSUED.    *
*                                                                     *
* ENTRY POINTS --                                                     *
*                                                                     *
*         STANDARD SUBROUTINE LINKAGE IS USED BY ALL ROUTINES         *
*    (EXCEPT ADRCNVT AND WRDCNVT).                                    *
*                                                                     *
*         AMDPRWTR                                                    *
*                                                                     *
*         CALLING SEQUENCE TO AMDPRWTR IS GENERATED BY THE BRWRITE    *
*         PRIVATE MACRO INSTRUCTION.  ANY AMDPRDMP ROUTINE MAY        *
*         USE BRWRITE TO CAUSE A LINE OF OUTPUT TO BE WRITTEN TO      *
*         THE OUTPUT LISTING.                                         *
*                                                                     *
*         AMDPRSYN                                                    *
*                                                                     *
*         THE MESSAGE WRITER AMDPRSYN HAS SIX ENTRY POINTS.           *
*         EACH ENTRY POINT CORRESPONDS TO A PARTICULAR MESSAGE        *
*         IN AN ARRAY OF MESSAGE ADDRESSES POINTED TO BY              *
*         SYNMSGA IN AMDPRCOM.  MODULE AMDPRSYN ISSUES THE            *
*         MESSAGE WHICH CORRESPONDS TO THE ENTRY POINT AT WHICH       *
*         IT IS ENTERED.  MESSAGE AMD165I MAY BE ISSUED AS A          *
*         STANDARD MESSAGE PRECEDING THE MESSAGE ADDRESSED BY         *
*         THE MESSAGE ARRAY DEPENDING ON THE VALUE OF THE NOSTDMG     *
*         SWITCH IN SWD OF AMDPRCOM.  IF THE NOSTDMG SWITCH IS ON,    *
*         MESSAGE AMD165I IS SUPPRESSED.  THE ENTRY POINTS OF         *
*         AMDPRSYN ARE AS FOLLOWS:                                    *
*                                                                     *
*              SYNTAX & NOSTDMG OFF - ONLY MESSAGE AMD165I            *
*              SYNTAX & NOSTDMG ON - MESSAGE 1 IN ARRAY               *
*              SYNTAXA - MESSAGE 1 IN ARRAY                           *
*              SYNTAXB - MESSAGE 2 IN ARRAY                           *
*              SYNTAXC - MESSAGE 3 IN ARRAY                           *
*              SYNTAXD - MESSAGE 4 IN ARRAY                           *
*              SYNTAXE - MESSAGE 5 IN ARRAY                           *
*                                                                     *
*         A MAPPING MACRO, SYNEPS, IS PROVIDED TO DEFINE THE ENTRY    *
*         POINTS OF AMDPRSYN FOR CALLING ROUTINES.  IF THE ARRAY      *
*         ADDRESS, SYNMSGA, IS ZERO, AMDPRSYN SETS THE FLSHMODE       *
*         SWITCH IN SWD OF AMDPRCOM, AND RETURNS TO THE CALLER.       *
*         THE EFFECT OF THIS SWITCH IS TO CAUSE REMAINING CONTROL     *
*         STATEMENTS TO BE SCANNED FOR SYNTAX ERRORS BUT NONE OF      *
*         THESE STATEMENTS ARE EXECUTED.                              *
*                                                                     *
*         AMDPRSYN CONTAINS TWO CONVERSION ROUTINES -                 *
*                                                                     *
*              ADRCNVT - THREE BYTE,BINARY TO HEX,CONVERSION ROUTINE  *
*              WRDCNVT - WORD,BINARY TO HEX,CONVERSION ROUTINE        *
*                                                                     *
*         AMDPRMSG                                                    *
*                                                                     *
*         CALLING SEQUENCE FOR THIS CSECT IS GENERATED BY THE         *
*         BRPRTMSG PRIVATE MACRO INSTRUCTION.  THIS MACRO MAY         *
*         BE USED BY ANY AMDPRDMP MODULE WHICH ISSUES A MESSAGE       *
*         TO THE SYSPRINT DATA SET.                                   *
*                                                                     *
*         AMDPRGFR                                                    *
*                                                                     *
*         CSECT AMDPRGFR IS USED BY ANY AMDPRDMP MODULE WHICH         *
*         REQUIRES DATA TO BE FORMATTED FOR OUTPUT TO THE PRINTER     *
*         DATA SET.  CALLERS OF THIS ROUTINE USE THE FMTPTRN          *
*         PRIVATE MACRO INSTRUCTION TO DESCRIBE THE DATA TO BE        *
*         FORMATTED AND THE EXACT FORMAT.                             *
*                                                                     *
*         AMDPRTSV                                                    *
*                                                                     *
*         THIS CSECT CONTAINS THE MANAGEMENT ROUTINES FOR THE         *
*         TCBLIST.  AMDPRTSV HAS THREE ENTRY POINTS.                  *
*                                                                     *
*              TCBQSAVE - ENQUEUE AN ELEMENT ON THE TCB QUEUE         *
*                                                                     *
*              TCBREMV - DEQUEUE A SINGLE ELEMENT OR ALL ELEMENTS     *
*                        FROM THE TCB QUEUE                           *
*                                                                     *
*              TCBRTRV - RETRIEVE THE DATA FROM A SPECIFIC            *
*                        ELEMENT IN THE TCB QUEUE                     *
*                                                                     *
*         AMDPRSTP                                                    *
*                                                                     *
*         AMDPRSTP IS CALLED BY MODULE AMDPRWTR AS EACH LINE OF       *
*         OUTPUT IS WRITTEN, PROVIDED THE STOP OPTION HAS BEEN        *
*         SELECTED BY THE PARM FIELD OF THE EXEC CARD IN THE          *
*         AMDPRDMP JCL.                                               *
*                                                                     *
* INPUT --                                                            *
*                                                                     *
*    AMDPRWTR                                                         *
*                                                                     *
*    REGISTER 1, ON ENTRY TO AMDPRWTR, DETERMINES WHETHER             *
*    INITIALIZATION IS TO TAKE PLACE, THE CARRIAGE CONTROL WHICH IS   *
*    APPLIED TO THE OUTPUT LINE, OR, IF AN IMMEDIATE SPACE       S21014
*    OPERATION IS TO BE PERFORMED                                S21014
*                                                                     *
*        -5    - SPACE THREE LINES IMMEDIATELY                   S21014
*        -4    - SPACE TWO LINES IMMEDIATELY                     S21014
*        -3    - SPACE ONE LINE IMMEDIATELY                      S21014
*        -2    - SKIP TO CHANNEL 1 IMMEDIATLEY                   S21014
*        -1    - SKIP TO CHANNEL 1 AFTER PRINTING.                    *
*         0    - OPEN DCB AND GET CORE FOR BUFFER IF NOT ALREADY      *
*                DONE - NOTHING IS TO BE PRINTED.                     *
*         1    - SPACE ONE LINE AFTER PRINTING.                       *
*         2    - SPACE TWO LINES AFTER PRINTING.                      *
*         3    - SPACE THREE LINES AFTER PRINTING.                    *
*         GT 3 - SPACE ONE LINE AFTER PRINTING.                       *
*                                                                     *
*    IF AN IMMEDIATE SPACE OPERATION IS TO BE PREFORMED,         S21014
*    AMDPRWTR ISSUES THE GETMAIN MACRO INSTRUCTION TO OBTAIN     S21014
*    STORAGE FOR A TEMPORARY BUFFER.  THIS AREA IS THEN CLEARED  S21014
*    TO BLANKS AND THE CONTROL CHARACTER FOR 1, 2, OR 3 SPACES,  S21014
*    OR SKIP TO CHANNEL 1 AFTER PRINTING IS INSERTED,            S21014
*    DEPENDING ON THE VALUE IN REGISTER 1.  AFTER THIS BUFFER    S21014
*    IS PRINTED, IT IS FREED.                                    S21014
*                                                                     *
*    IF AN OUTPUT LINE IS TO BE WRITTEN, THE LABEL               S21014
*    CURBUF IN AMDPRCOM IS THAT OF A FULL WORD WHICH             S21014
*    CONTAINS THE ADDRESS OF THE OUTPUT LINE WHICH IS WRITTEN         *
*    TO THE PRINTER DATA SET.                                         *
*                                                                     *
*    AMDPRSYN                                                         *
*                                                                     *
*    INPUT TO AMDPRSYN IS MESSAGE ARRAY ADDRESS AT ADDRESS AT         *
*    LABEL SYNMSGA.  THIS ARRAY CONSISTS OF FROM 1 TO 5 FULLWORD      *
*    ADDRESS, EACH OF WHICH IS THE ADDRESSOF A WTO PARAMETER LIST.    *
*    IF SYNMSGA IS ZERO, AMDPRSYN SETS THE FLSHMODE SWITCH AND        *
*    RETURNS TO THE CALLER.                                           *
*                                                                     *
*    NOSTDMG IN SWD OF AMDPRCOM IS TESTED, IF THIS BIT IS ON,         *
*    MESSAGE AMD165I IS NOT ISSUED PRIOR TO ISSUING THE SELECTED      *
*    MESSAGE IN THE ARRAY.                                            *
*                                                                     *
*    AMDPRSYN CONVERSION ROUTINES-                                    *
*                                                                     *
*         ADRCNVT                                                     *
*              R1 - ADDRESS OF DATA TO BE CONVERTED                   *
*              R4 - ADDRESS OF WHERE TO PLACE RESULT                  *
*              R5 - CLOBBERED BY ADRCNVT                              *
*                                                                     *
*         WRDCNVT                                                     *
*                                                                     *
*              R1 - ADDRESS IF DATA TO BE CONVERTED                   *
*              R4 - ADDRESS OF WHERE TO PLACE RESULT                  *
*              R5 - CLOBBERED BY WRDCNVT                              *
*                                                                     *
*    AMDPRMSG                                                         *
*                                                                     *
*    THE BRPRTMSG MACRO INSTRUCTION LOADS REGISTERS 1 AND 2 WITH      *
*    THE FOLLOWING PARAMETERS:                                        *
*                                                                     *
*         R1 - ADDRESS OF MESSAGE TO BE PRINTED                       *
*         R2 - LENGTH OF MESSAGE (RANGE 1 TO 112)                     *
*                                                                     *
*    AMDPRFGR                                                         *
*                                                                     *
*    INPUT TO THIS ROUTINE IS A LIST OF FMTPTRN MACRO INSTRUCTIONS.   *
*    EACH FMTPTRN DESCRIBES A DATA ITEM TO BE FORMATTED, THE          *
*    POSITION OF THE DATA ITEM IN THE OUTPUT BUFFER AND THE LABEL     *
*    THAT IDENTIFIES THAT DATA ITEM.                                  *
*                                                                     *
*    AMDPRTSV                                                         *
*                                                                     *
*         TCBQSAVE - ENQUEUE                                          *
*                                                                     *
*              R2 - TCB ADDRESS TO BE STORED IN LIST ELEMENT          *
*                                                                     *
*         TCBREMV - DEQUEUE                                           *
*                                                                     *
*              R2 - 0 - DEQUEUE ALL TCB QUEUE ELEMENTS                *
*                 - TCB ADDRESS WHOSE ELEMENT IS TO BE DEQUEUED       *
*                   FROM THE TCBLIST                                  *
*                                                                     *
*         TCBRTRV - RETRIEVE                                          *
*                                                                     *
*              R2 - POSITION (1 ORIGIN) OF ELEMENT IN TCBLIST FOR     *
*                   WHICH THE TCB IS TO BE RETURNED TO THE CALLER     *
*                                                                     *
*    AMDPRSTP                                                         *
*                                                                     *
*    INPUT TO AMDPRSTP IS THE OPERATORS RESPONSE TO MESSAGE           *
*    AMD156I.  THE ONLY VALID REPLY TO THIS MESSAGE IS THE            *
*    CHARACTER STRING 'STOP'.  MESSAGE AMD156I IS REISSUED IF         *
*    THE REPLY IS INVALID.                                            *
*                                                                     *
* OUTPUT --                                                           *
*                                                                     *
*    AMDPRWTR                                                         *
*                                                                     *
*    THE OUTPUT LINE POINTED TO BY THE ADDRESS AT CURBUF IN           *
*    AMDPRCOM IS WRITTEN TO THE PRINTER DATA SET, OR IN THE      S21014
*    CASE OF AN IMMDEIATE OPERATION, A BLANK LINE WITH           S21014
*    PROPER CONTROL CHARACTER IS WRITTEN TO THE PRINTER          S21014
*    DATA SET.  IF THE VALUE OF THE LINECNT                      S21014
*    PARAMETER IN AMDPRCOM INDICATES THE OUTPUT                       *
*    LISTING IS POSITIONED TO THE TOP OF A PAGE, AMDPRWTR TITLES      *
*    THE NEW PAGE WITH THE STANDARD AMDPRDMP PAGE TITLES.             *
*                                                                     *
*    AMDPRSYN                                                         *
*                                                                     *
*    MESSAGE AMD165I (IF NOT SUPPRESSED BY NOSTDMG) AND THE           *
*    MESSAGE REQUESTED BY THE CALLER ARE ISSUED TO THE SYSPRINT       *
*    DATA SET BY MEANS OF THE BRPRTMSG PRIVATE MACRO.  IF THE         *
*    RDRSW IN SWA OF AMDPRCOM IS OFF, AMDPRDMP CONTROL STATEMENTS     *
*    ARE BEING ENTERED FROM THE CONSOLE AND HENCE AMD165I (IF         *
*    NOT SUPPRESSED) IS ISSUED TO THE CONSOLE.                        *
*                                                                     *
*    IF THE NOSTMSG SWITCH IS OFF OR IF SYNMSGA IS ZERO AND           *
*    CONTROL STATEMENTS ARE NOT BEING ENTERED FROM THE CONSOLE,       *
*    THE FLSHMODE SWITCH IN SWD OF AMDPRCOM IS TURNED ON.             *
*    IF FLSHMODE WAS PREVIOUSLY OFF, MESSAGE AMD171I IS ISSUED        *
*    TO INDICATE THAT THE INPUT CONTROL CARDS ARE NOT BEING           *
*    EXECUTED.                                                        *
*                                                                     *
*    THE TWO CONVERT ROUTINES IN AMDPRSYN, ADRCNVT AND WRDCNVT,       *
*    PLACE THE RESULT OF THE CONVERSION PROCESS AT THE ADDRESS        *
*    CONTAINED IN REGISTER 4 ON ENTRY                                 *
*                                                                     *
*    AMDPRMSG                                                         *
*                                                                     *
*    THE MESSAGE ADDRESSED BY REGISTER 1 ON ENTRY IS WRITTEN TO THE   *
*    SYSPRINT DATA SET.  ON THE FIRST CALL TO AMDPRMSG, THE ROUTINE   *
*    THE ROUTINE TITLES THE FIRST PAGE OF THE SYSPRINT DATA SET.      *
*                                                                     *
*    AMDPRGFR                                                         *
*                                                                     *
*    THE OUTPUT LINE ADDRESSED BY CURBUF IN AMDPRCOM IS FORMATTED     *
*    AS DIRECTED BY THE FMTPTRN LIST PASSED TO AMDPRGFR.              *
*                                                                     *
*    AMDPRTSV                                                         *
*                                                                     *
*         TCBQSAVE - NONE                                             *
*                                                                     *
*         TCBREMV - NONE                                              *
*                                                                     *
*         TCBRTRV - THE TCB ADDRESS FROM THE REQUESTED TCBLIST        *
*                   ELEMENT IS RETURNED IN REGISTER 7.                *
*                                                                     *
*    AMDPRSTP                                                         *
*                                                                     *
*    IF THE SYSTEM OPERATOR ENTERS 'STOP' IN RESPONSE TO MESSAGE      *
*    AMD156I, MESSAGE AMD172I IS ISSUED TO THE SYSPRINT AND THE       *
*    PRINTER DATA SETS TO MARK THE POINT AT WHICH THE AMDPRDMP        *
*    FUNCTION WAS TERMINATED.                                         *
*                                                                     *
* EXTERNAL REFERENCES --                                              *
*                                                                     *
*    AMDPRWTR                                                         *
*                                                                     *
*         DEVTYPE - TO VERIFY PRINTER DD STATEMENT HAS BEEN           *
*                   SUPPLIED WITH THE AMDPRDMP JCL AND TO             *
*                   DETERMINE THE MAXIMUM RECORD SIZE FOR THE         *
*                   ALLOCATED DEVICE                                  *
*                                                                     *
*         OPEN  -   TO OPEN THE PRINTER DATA SET.                     *
*                                                                     *
*         GETMAIN - TO OBTAIN MAIN STORAGE FOR A 133 CHARACTER        *
*                   OUTPUT BUFFER                                     *
*                                                                     *
*         FREEMAIN - TO FREE THE TEMPORARY BUFFER USED           S21014
*                    FOR AN IMMDEIATE SPACE OPERATION            S21014
*                                                                     *
*         PUT  -    TO CAUSE OUTPUT TO BE WRITTEN TO THE PRINTER      *
*                   DATA SET                                          *
*                                                                     *
*    AMDPRSYN                                                         *
*                                                                     *
*         BRPRTMSG - TO WRITE REQUESTED MESSAGES TO THE SYSPRINT      *
*                    DATA SET                                         *
*                                                                     *
*         WTO  -     TO WRITE REQUESTED MESSAGES TO THE OPERATOR'S    *
*                    CONSOLE                                          *
*                                                                     *
*    AMDPRMSG                                                         *
*                                                                     *
*         OPEN - TO OPEN THE SYSPRINT DATA SET                        *
*                                                                     *
*         PUT -  TO CAUSE OUTPUT TO BE WRITTEN TO THE SYSPRINT        *
*                DATA SET                                             *
*                                                                     *
*    AMDPRGFR                                                         *
*                                                                     *
*         BRREAD - TO READ DATA TO BE FORMATTED FROM THE DUMP         *
*                  DATA SET                                           *
*                                                                     *
*    AMDPTTSV                                                         *
*                                                                     *
*         GETMAIN - TO OBTAIN MAIN STORAGE FOR TCBLIST ELEMENTS       *
*                                                                     *
*         FREEMAIN - TO FREE MAIN STORAGE USED FOR A TCBLIST ELEMENT  *
*                                                                     *
*    AMDPRSTP                                                         *
*                                                                     *
*         BRPRTMSG - TO WRITE MESSAGES TO THE SYSPRINT DATA SET       *
*                                                                     *
*         BRWRITE  - TO WRITE MESSAGE AMD172I TO THE PRINTER DATA SET *
*                                                                     *
*         WTOR  -    TO WRITE MESSAGE AMD156I TO THE OPERATOR'S       *
*                    CONSOLE                                          *
*                                                                     *
* EXITS,NORMAL --                                                     *
*                                                                     *
*    AMDPRWTR  - RETURN TO CALLER                                     *
*                                                                     *
*    AMDPRSYN  - RETURN TO CALLER                                     *
*                                                                     *
*    AMDPRMSG  - RETURN TO CALLER                                     *
*                                                                     *
*    AMDPRTSV  - RETURN TO CALLER WITH CODE 0                         *
*                                                                     *
*    AMDPRSTP  - IF STOP HAS NOT BEEN ENTERED IN RESPONSE TO          *
*                MESSAGE AMD156I, AMDPRSTP RETURNS TO THE CALLER,     *
*                AMDPRWTR.  IF STOP HAS BEEN ENTERED, AMDPRSTP        *
*                BRANCHES TO THE CURRENT STOP-EXIT ROUTINE            *
*                AS ADDRESSED BY THE WORD AT STOPEXIT IN AMDPRCOM     *
*                                                                     *
* EXITS,ERROR --                                                      *
*                                                                     *
*    AMDPRWTR  - IF THE PRINTER DD STATEMENT HAS NOT BEEN SUP-        *
*                PLIED WITH THE AMDPRDMP JCL, AMDPRWTR BRANCHES       *
*                TO THE TERMINATION ROUTINE AMDPRXIT.                 *
*                                                                     *
*    AMDPRSYN  - NONE                                                 *
*                                                                     *
*    AMDPRMSG  - NONE (IF THE SYSPRINT DD STATEMENT IS NOT SUP-       *
*                PLIED WITH THE AMDPRDMP JCL, THE ACTION OF           *
*                AMDPRMSG BECOMES AN IMMEDIATE RETURN)                *
*                                                                     *
*    AMDPRGFR  - NONE                                                 *
*                                                                     *
*    AMDPRTSV                                                         *
*                                                                     *
*         TCBQSAVE - NONE                                             *
*                                                                     *
*         TCBREMV - THE TCB DEQUEUE ROUTINE EXITS WITH RETURN         *
*                   CODE 4 IN CASE THE TCBLIST IS EMPTY WHEN          *
*                   THE ROUTINE IS ENTERED                            *
*                                                                     *
*         TCBRTRV - THIS ROUTINE EXITS WITH RETURN CODE 4 IN CASE     *
*                   THE ELEMENT FOR WHICH INFORMATION IS REQUESTED    *
*                   (BY POSITION NUMBER) IS NOT ON THE TCBLIST        *
*                                                                     *
*    AMDPRSTP - NONE                                                  *
*                                                                     *
* TABLES/WORK AREAS --                                                *
*                                                                     *
*    AMDPRCOM, THE FIRST CSECT IN THIS MODULE IS THE MAIN AMDPRDMP    *
*    COMMUNICATIONS AREA.  REGISTER 12 IN ALL MODULES ADDRESSES       *
*    THIS AREA.                                                       *
*                                                                     *
* ATTRIBUTES --   NON-REUSABLE                                        *
*                                                                     *
* CHARACTER CODE DEPENDENCY --   EBCDIC                               *
*                                                                     *
* NOTES --   NONE                                                     *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
***                 ***  FL/1 STATEMENTS  ***                       ***
***********************************************************************
         SPACE
*/*AMDPRCOM: CHART (AMODE,SEQ) */
*/*HEADER
*/*AMDPRCOM - CONTROL/SCAN SERVICE ROUTINE FLOWCHARTS
*/*                                                      PAGE #    */
*/*AMDPRWTR: E AMDPRWTR */
*/* N THIS ROUTINE WRITES LINES TO THE DATA SET DEFINED BY PRINTER DD
*/**/
*/* M SET UP ADDRESSABILITY */
*/* D (YES,WRITE1,NO,) IS OUTDCB OPEN */
*/* L ISSUE DEVTYPE FOR PRINTER DD */
*/* D (NO,WRTABEND,YES,) IS THERE A PRINTER DD CARD */
*/* L OPEN OUTDCB */
*/* D (NO,WRTABEND,YES,) DID IT OPEN */
*/* P SAVE ADDR OF OUTDCB IN COMMON CSECT */
*/* P SAVE ADDR OF BUFFER IN COMMON */
*/* P BLANK OUT THE BUFFER */
*/* P RESTORE REGS 1 AND 2 */
*/*WRITE1: P LOAD BUFREG WITH ADDR OF BUFFER */
*/* D (YES,PREFMDMP,NO,) PREFORMATTED DUMP */
*/*WRITE12: P SET RETURN ADDRESS EQUAL TO WRITECLR */
*/* D (<0,WRITEIMM,0,WRITERET,>0,) TEST PREG */
*/* D (NO,WRITE2,YES,) IS PREG > 3 */
*/* P (,WRITE2) SET PREG = 1 */
*/*WRITE2: D (NO,WRITE3,YES,) AT TOP OF PAGE */
*/* D (YES,WRITESTP,NO,) IS LINE TO BE PRINTED ALL BLANKS */
*/*WRITE3: P DECREMENT LINECNT BY VALUE IN PREG */
*/* D (NO,WRTSKIPA,YES,) IS RESULTS > 0 */
*/* P REPLACE LINECNT IN COMMON */
*/* P PUT CONTROL CHAR IN 1ST BYTE OF BUFFER */
*/* P GET ANSI CODE BASED ON VALUE IN PREG */
*/* P SAVE CONTROL CHAR FOR NEXT PRINT OPERATION */
*/*WRITEPUT: P PUT ADDR OF BUFREG IN REG 0 */
*/* I PRINT THE BUFFER */
*/* R RETURN TO ADDRESS IN R9 */
*/*WRITECLR: P BLANK OUT THE BUFFER */
*/*WRITETST: D (YES,PRTTITLE,NO,) IS THIS TOP OF PAGE */
*/*WRITESTP: D (NO,WRITERET,YES,) STOPSW ON */
*/* L AMDPRSTP   -  GO SEE IF 'STOP' IS REQUESTED */
*/* N WILL NOT RETURN IF 'STOP' REQUESTED */
*/*WRITERET: M RESTORE REGS */
*/* R RETURN */
*/*WRTSKIP: P GET PRESENT LINECNT */
*/* D (YES,WRTIGNR,NO,) IS TTLSW ON */
*/* D (NO,WRTSKIPA,YES,) 1ST. LINE AFTER PAGE TITLE */
*/*WRTIGNR: M TURN OFF TTLSW */
*/* P LOAD REG 2 WITH ADDR OF BUFFER */
*/* P LOAD REG 5 WITH ADDR OF END OF BUFFER */
*/* P LOAD REG 4 WITH 8 */
*/*WRTSKIPB: D (YES,WRTSKIPA,NO,) A NON BLANK IN BUFFER */
*/* D (YES,WRITESTP,NO,WRTSKIPB) END OF BUFFER */
*/*WRTSKIPA: P MOVE SKIP - TO - CHAN 1 CODE TO SAVEAREA */
*/* P (,WRITEPUT) SET LINECNT TO LINENUMB */
*/*PRTTITLE: N PRINT TITLE AT TOP OF EACH PAGE */
*/* P ADD 1 TO PAGENUMB */
*/* P CONVERT THE PAGE NUMBER TO PRINTABLE DIGITS */
*/* P MOVE PAGE NUMBER TO TITLE */
*/* P MOVE TITLE TO BUFFER */
*/* D (YES,PREFMTTL,NO,) PREFORMATTED DUMP */
*/* P (,WRITE12) SET PREG UP TO SPACE 2 LINES */
*/*WRITEIMM: P CONVERT PARM COUNT TO POSITIVE NUMBER */
*/* P SUBTRACT 1 FROM COUNT */
*/* D (YES,WRTSKIP,NO,) IS COUNT NOW ZERO */
*/* D (NO,WRTIMM1,YES,) IS TTLSW ON */
*/* M (,WRITESTP) TURN OFF SWITCH */
*/*WRTIMM1: D (YES,WRITESTP,NO,) AT TOP OF PAGE */
*/* P BLANK OUT TEMPORARY BUFFER */
*/* P PUT BUFFER ADDR IN R6 */
*/* P BLANK BUFFER */
*/* P SUBTRACT 1 FROM CURRENT COUNT */
*/* D (NO,WRITELIN,YES,) IS COUNT NOW ZERO */
*/*WRITESKP: S (,WRITETST) WRTSKIPA: SKIP TO CHANNEL 1 AFTER PRINTING
*/*TEMPORARY BUFFER */
*/*WRITELIN: P PUT SPACE COUNT IN PREG */
*/* S (,WRITETST) WRITE12: GO PRINT TEMPORARY BUFFER */
*/*PREFMDMP: D (YES,PREFMSKP,NO,) LINECNT = LINENUM */
*/* D (YES,PREFMSKP,NO,) IS CNTRL CHAR A '1' (SKIP TO CHAN 1) */
*/* P SET PREG TO 3 */
*/* D (YES,PREFMCTL,NO,) IS CNTRL CHAR A '-' (SPACE 3) */
*/* P SET PREG TO 2 */
*/* D (YES,PREFMCTL,NO,) IS CNTRL CHAR A '0' (SPACE 2) */
*/* P SET PREG TO 1 */
*/* P OVERLAY CNTRL CHAR WITH A BLANK (SPACE 1) */
*/*PREFMCTL: P DECREMENT LINECNT IN REGISTER */
*/* D (YES,,NO,PREFMSKP) LINECNT GREATER THAN ZERO */
*/* P UPDATE LINECNT IN COMMON */
*/*PREFMOUT: S (,WRITESTP) WRITEPUT: OUTPUT LINE */
*/*PREFMSKP: P SET LINECNT */
*/* P INITIALIZE BUFREG TO POINT TO TEMP BUF */
*/* P (,PRTTITLE) MOVE IN CONTROL CHARACTER (SKIP) */
*/*PREFMTTL: S WRITEPUT: OUTPUT TITLE */
*/* P CLEAR BUFFER */
*/* P RESTORE BUFFER POINTER */
*/* P (,PREFMOUT) SET CONTROL CHAR (SPACE 2) */
*/*PERROR: N OUTDCB SYNAD ROUTINE */
*/* P SET REG 0 = 0 */
*/* P (,PEXIT) SET REG 1 = 12 FOR MSG AMD153I */
*/*WRTABEND: P SET REG 0 = 0 */
*/* P SET REG 1 = 0 FOR OPEN ERROR MSG */
*/*PEXIT: P GET EXIT ROUTINE ADDR FROM COMMON */
*/* R GO TO EXIT ROUTINE */
*/*OUTEXIT: E OUTEXIT */
*/* N OUTDCB EXIT ROUTINE DURING OPEN */
*/* M SET UP ADDRESSABILITY */
*/* P INIT. DEFAULT BLKSIZE & LRECL VALUE */
*/* D (YES,OUTEXIT1,NO,) WAS LRECL GIVEN ON DD CARD */
*/* P PUT DEFAULT LRECL IN OUTDCB */
*/*OUTEXIT1: D (YES,OUTEXIT2,NO,) WAS BLKSIZE GIVEN ON DD CARD */
*/* P PUT DEFAULT BLKSIZE IN OUTDCB */
*/*OUTEXIT2: P GET BLKSIZE FROM DCB */
*/* D (NO,OUTEXIT7,YES,) IS IT > MAX RECORD SIZE FOR THE DEVICE */
*/* P PUT MAX RECORD SIZE FOR THE DEVICE IN BLKSIZE */
*/*OUTEXIT7: D (=BLK,OUTEXIT4,>BLK,OUTEXIT3,<BLK,) COMPARE LRECL TO
*/*BLKSIZE */
*/* P ADJUST BLKSIZE TO A MULTIPLE OF LRECL */
*/* P PUT RESULTS IN BLKSIZE OF OUTDCB */
*/* D (YES,OUTEXIT4,NO,) WAS BUFNO GIVEN ON DD CARD */
*/* D (NO,OUTEXIT5,YES,) BLK FACTOR > 10 */
*/* P (,OUTEXIT6) SET BUFNO = 2 */
*/*OUTEXIT4: R RETURN */
*/*OUTEXIT3: P STORE LRECL VALUE IN BLKSIZE OF OUTDCB */
*/* R RETURN */
*/*OUTEXIT5: P SET BUFNO = 3 */
*/*OUTEXIT6: P PUT BUFNO IN OUTDCB */
*/* R RETURN */
*/*AMDPRSYN: E AMDPRSYN */
*/* N SYNTAX MESSAGE WRITER WITH 6 ENTRY POINTS */
*/*SYNTAX: E SYNTAX */
*/* P (,SYNTAX4) INDICATE ONLY STANDARD ERROR MSG DESIRED */
*/*SYNTAXA: E SYNTAXA */
*/* P (,SYNTAX4) GET FIRST MSG PTR FROM SYNMSGA */
*/*SYNTAXB: E SYNTAXB */
*/* P (,SYNTAX4) GET 2ND. MSG PTR FROM SYNMSGA */
*/*SYNTAXC: E SYNTAXC */
*/* P (,SYNTAX4) GET 3RD. MSG PTR FROM SYNMSGA */
*/*SYNTAXD: E SYNTAXD */
*/* P (,SYNTAX4) GET 4TH. MSG PTR FROM SYNMSGA */
*/*SYNTAXE: E SYNTAXE */
*/* P GET 5TH. MSG PTR FROM SYNMSGA */
*/*SYNTAX4: M SAVE REGS AND SET UP ADDRESSABILITY */
*/* D (YES,SYNTAX6,NO,) REQUEST FOR STANDARD MSG ONLY */
*/* D (YES,SYNTAX7,NO,) IS NOSTDMG SWITCH ON */
*/* D (NO,SYNTAX5,YES,) COMMANDS FROM CONSOLE */
*/* P POINT REG 1 TO WTO LIST (PTRSYN) */
*/* I WRITE STANDARD MSG TO THE OPERATOR'S CONSOLE */
*/*SYNTAX5: P SET UP TO WRITE STANDARD MSG TO SYSPRINT */
*/* L (,SYNTAX7) BRPRTMSG - WRITE MSG TO SYSPRINT */
*/*SYNTAX6: D (YES,SYNTAX6A,NO,) NOSTDMG SW. ON */
*/* D (YES,SYNTAX2,NO,) IS SYNMSGA = 0 */
*/* P (,SYNTAX7) POINT TO STANDARD MESSAGE */
*/*SYNTAX6A: P GET FIRST MSG PTR FROM SYNMSGA */
*/*SYNTAX7: P SET UP TO WRITE MSG TO SYSPRINT */
*/* L BRPRTMSG - WRITE MSG TO SYSPRINT */
*/* SYNTAX1: M TURN OFF PRNTSW & GOSW SWITCHES */
*/* M TURN OFF SWB & PRSW SWITCHES */
*/* D (YES,SYNTAX2,NO,) IS RDRSW ON?*/
*/* I (,SYNDONE) WRITE MSG TO OPERATOR'S CONSOLE */
*/*SYNTAX2: D (YES,SYNDONE,NO,) IS NOSTDMG SW ON? */
*/*  L BRPRTMSG WRITE FLUSH MESSAGE */
*/*SYNDONE: M TURN OFF NOSTDMG SWITCH */
*/*  M RESTORE REGISTERS */
*/*  R RETURN  */
*/*ARDCNVT: E ARDCNVT */
*/*  N ROUTINE TO CONVERT A 3 BYTE ADDRESS */
*/*  N ENTRY POINT IN COMMON */
*/*  P PUT ADDRESS OF VALUE TO BE CONVERTED IN REG 5 */
*/*  P SAVE REG 1 */
*/*  N REG 4 POINTS TO AREA TO CONTAIN CONVERTED VALUE */
*/*  P HEXCNVT: MACRO TO CONVERT 3 BYTES TO PRINTABLE HEX */
*/*  P RESTORE REG 1 */
*/*  R RETURN  */
*/*WRDCNVT: E WRDCNVT */
*/*  N ROUTINE TO CONVERT A WORD (ENTRY PT. IN COMMON) */
*/*  P PUT ADDRESS OF WORD TO BE CONVERTED IN REG 5 */
*/*  N REG 4 POINTS TO AREA TO CONTAIN CONVERTED WORD */
*/*  P HEXCNVT: MACRO TO CONVERT 4 BYTES TO PRINTABLE HEX */
*/*  P RESTORE REG 1 */
*/*  R RETURN  */
*/*AMDPRMSG: E AMDPRMSG */
*/*  N ROUTINE THAT WRITES MESSAGES TO THE SYSOUT DATA SET */
*/*  M SET UP ADDRESSABILITY */
*/*PRTMSG: P THIS IS A NOP THAT GOES TO PRTRET IF NO SYSPRINT DD */
*/*  D (YES,PRTMSG1,NO,) IS SYSPRINT DCB OPEN? */
*/*  P SAVE REG 1 THROUGH OPENING PROCESS */
*/*  L OPEN SYSPRINT DCB */
*/*  D (,,N0,PRTMSG3) DID DCB OPEN? */
*/*  P (,%L1) PUT SYSPRINT DCB ADDRESS IN COMMON */
*/*PRTMSG3: P SET NOP AT PRTMSG TO BRANCH TO PRTRET */
*/*%L1: P MOVE 'MSG LOG' TITLE TO BUFFER */
*/*  I PRINT THE TITLE */
*/*  P CLEAR THE BUFFER */
*/*  I PRINT A BLANK LINE */
*/*  P RESTORE REG 1 */
*/*PRTMSG1: P CLEAR THE BUFFER */
*/*  D (YES,PRTMSG2,NO,) IS LENGTH OF MSG = 0? */
*/*  P MOVE THE MESSAGE TO MSGBUF */
*/*PRTMSG2: I PRINT THE MESSAGE */
*/*PRTRET: M RESTORE THE REGISTERS */
*/*  R RETURN  */
*/*AMDPRGFR: E AMDPRGFR */
*/*  N THIS ROUTINE FORMATS A LINE USING A FORMAT PATTERN */
*/*  M SET UP ADDRESSABILITY */
*/*  P SAVE ASID PASSED IN REG 0 */
*/*  P PUT PATTERN ADDRESS IN REG 8 FOR BASING */
*/*  P GET OUTPUT BUFFER ADDRESS FROM COMMON */
*/*FMTLNLP: P ZERO INDEX REG FOR PATTERN */
*/*  D (YES,FMTLNRT,NO,) IS PATTERN CODE = 0? */
*/*  D (YES,FMTLN1,NO,) IS THERE A LABEL? */
*/*FMTLNA: D (YES,FMTLN2,NO,) IS THERE DATA? */
*/*FMTLNB: P (,FMTLNLP) UPDATE PATTERN BASE TO POINT TO NEXT PATTERN */
*/*FMTLN1: N MOVE LABEL TO OUTPUT BUFFER */
*/*  P GET LABEL LENGTH FROM PATTERN AND POSITION IT */
*/*  D (YES,%L2,NO,) IS THERE A LABEL POINTER? */
*/*FMTLN1A: P (,FMTLN1B) P GET ADDRESS OF THE NEXT LABEL */
*/*%L2: P GET LABEL PTR FROM PATTERN */
*/*   P ADD 4 TO INDEX REGISTER */
*/*FMTLN1B: P UPDATE ADDRESS OF THE NEXT LABEL AND SAVE IT */
*/*  P GET LABEL OFFSET FROM PATTERN */
*/*  P ADD OFFSET TO ADDRESS OF BUFFER */
*/*  P (,FMTLNA) MOVE LABEL TO BUFFER */
*/*FMTLN2: N PUT DATA IN PRINT LINE */
*/*  P GET DATA LENGTH FROM PATTERN AND ADJUST IT */
*/*  D (YES,,NO,FMTLN2A) IS THERE A DATA PTR? */
*/*  P GET DATA PTR FROM PATTERN */
*/*  P (,FMTLN2B) ADD 4 TO INDEX REGISTER */
*/*FMTLN2A: P GET ADDRESS OF NEXT DATA */
*/*FMTLN2B: P UPDATE ADDRESS OF NEXT DATA AND SAVE IT */
*/*  P GET DATA OFFSET FROM PATTERN */
*/*  D (YES,FMTLN3,NO,) IS DATA IN STORAGE? */
*/*  P GET ADDRESS OF WORK AREA */
*/*  D (YES,,NO,FMTLN2C) IS DATA TO BE EBCDIC? */
*/*  P GET ADDRESS OF WHERE TO PUT DATA IN BUFFER */
*/*FMTLN2C: P SAVE REGS 2 - 7 */
*/*  P PUT ASID VALUE IN REG 0 */
*/*FMTLN2D: L BRREAD    - READ FOR THE DATA */
*/*  N AT MOST ONLY 4 BYTES OF DATA ARE ASSURED TO BE VALID */
*/*  P CALCULATE NUMBER OF BYTES THAT CAN BE MOVED */
*/*  D (YES,FMTLN2F,NO,) IS NUMBER OF BYTES < 4? */
*/*  P PUT 4 IN LENGTH REGISTER */
*/*FMTLN2E: P DECREMENT LENGTH TO BE MOVED FROM REMAINING LENGTH */
*/*  D (YES,,NO,FMTLN2F) RESULTS > 0? */
*/*  P INCREMENT 'FROM' ADDRESS */
*/*  P MOVE DATA TO AREA */
*/*  P (,FMTLN2D) INCREMENT 'TOO' ADDRESS */
*/*FMTLN2F: P ADD SUBTRACTED VALUE BACK TO LENGTH */
*/*  D (YES,FMTLN2G,NO,) IS RESULTS = 0? */
*/*  P MOVE LAST PART OF DATA */
*/*FMTLN2G: P RESTORE REGISTERS 2 - 7 */
*/*  D (YES,FMTLNB,NO,) IS DATA EBCDID? */
*/*FMTLN2H: P GET ADDRESS OF WHERE TO PUT DATA IN BUFFER */
*/*  P (,FMTLNB) HEXCVNT:MACRO TO CONVERT DATA TO PRINTABLE HEX */
*/*FMTLN3: P MOVE DATA 'FROM' ADDRESS TO REG 7 */
*/*  D (YES,,NO,FMTLN2H) IS DATA TO BE EBCDIC? */
*/*  P GET DATA 'TOO' ADDRESS */
*/*  P MOVE DATA 'FROM' ADDRESS TO PREG */
*/*  P DECREMENT LENGTH FOR MOVING DATA */
*/*  P (,FMTLNB) MOVE EBCDIC DATA TO BUFFER */
*/*FMTLN4: P HEXCVNT: MACRO TO CONVERT DATA TO PRINTABLE HEX */
*/*  R RETURN VIA REG 9 */
*/*FMTLNRT: M RESTORE REGS */
*/*  R RETURN */
*/*AMDPRTSV: E (SAVE,TCBQSAVE,REMV,TCBREMV,RTRV,) AMDPRTSV */
*/*TCBRTRV: E TCBRTRV */
*/*  N ENTER HERE TO GET A TCB ADDRESS FROM THE LIST */
*/*  M SAVE REGISTERS */
*/*  P SET ENTRY CODE = 0 */
*/*BASETCB: P SET UP BASE REG AND CHAIN SAVE AREA */
*/*  D (0,RTRV,4,REMV,8,) BRANCH ON ENTRY CODE */
*/*SAVE: D (YES,TCBRET,NO,) IS TCB ADDR IN REG 2 = 0? */
*/*  P GET ADDRESS OF TCB LIST PTR */
*/*TCBSVLP: P GET TCB LIST PTR */
*/*  D (YES,TCBSAVE2,NO,) IS PTR = 0? */
*/*  D (YES,,NO,%L4) ADDR IN LIST = REG 2? */
*/*TCBSAVE3: P (,TCBRET1) SET RETURN CODE FOR DUPLICATE TCB */
*/*%L4: P (,TCBSVLP) UPDATE LIST PTR ADDRESS */
*/*TCBSAVE2: L GETMAIN    - GET STORAGE FOR TCB LIST ENTRY */
*/*  P PUT NEW ENTRY ON TCB LIST */
*/*  P (,TCBRET) PUT TCB ADDRESS IN ENTRY */
*/*TCBQSAVE: E TCBQSAVE */
*/*  N ENTER HERE TO SAVE TCB ADDRESS ON TCB LIST */
*/*  M SAVE REGISTERS */
*/*  P (,BASETCB) SET ENTRY CODE = 8 */
*/*TCBREMV: E TCBREMV */
*/*  N ENTER HERE TO REMOVE A TCB ENTRY FROM TCB LIST */
*/*  M SAVE REGISTERS */
*/*  P (,BASETCB) SET ENTRY CODE = 4 */
*/*REMV: D (YES,,NO,TCBREMV1) REG 2 = 0? */
*/*  M SET SWITCH TO REMOVE ALL TCB ENTRIES */
*/*TCBREMV1: P GET ADDRESS OF TCB LIST PTR */
*/*TCBRMLP: P GET TCB LIST PTR */
*/*  D (YES,TCBRET,NO,) IS PTR = 0? */
*/*  D (YES,,NO,%L5) REG 1 = TCB ADDR IN ENTRY? */
*/*TCBREMV2: P REMOVE ENTRY FROM LIST */
*/*  P (,TCBRMLP) FREE STORAGE FOR ENTRY */
*/*%L5: P (,TCBRMLP) UPDATE ADDRESS OF TCB LIST PTR */
*/*TCBRET: P SET RETURN CODE = 0 */
*/*TCBRET1: M RESET REMOVE ALL SWITCH */
*/*  M RESTORE REGISTERS */
*/*  R RETURN */
*/*RTRV: D (YES,,NO,%L6) REG 2 =0? */
*/*  R RETURN */
*/*%L6: P GET ADDRESS OF TCB LIST PTR */
*/*TCBRTVLP: P GET TCB LIST PTR */
*/*  D (YES,TCBRTRV1,NO,) IS PTR = 0? */
*/*  P POINT TO NEXT ENTRY */
*/*  D (YES,,NO,TCBRTVLP) REG 2 = 0? */
*/*  P (,TCBRET) PUT TCB ADDRESS IN REG 2 */
*/*TCBRTRV1: P (,TCBRET) ZERO REG 2 FOR NO MORE TCB ADDRESSES IN LIST
*/**/
*/*AMDPRSTP: E AMDPRSTP */
*/*  N THIS ROUTINE ALLOWS THE OPERATOR TO STOP THE DUMP PROCESSING */
*/*  D (YES,,NO,%L7) IS RECURSION SW ON? */
*/*  R RETURN */
*/*%L7: M SAVE REGS AND SET UP ADDRESSABILITY */
*/*  D (YES,,NO,STOPWTOR) HAS WTOR BEEN ISSUED? */
*/*  D (YES,,NO,STOPRET) IS IT COMPLETE? */
*/*  M TURN OFF STPWTOR SWITCH */
*/*  P MAKE REPLY ALL CAPITALS */
*/*  L BRPRTMSG PRINT REPLY IN MESSAGE LOG */
*/*  D (YES,,NO,STOPWTOR) REPLY = 'STOP'? */
*/*  D (YES,,NO,STPRT1) IS OUTDCB OPEN? */
*/*  M SET ON RECURSION SWITCH */
*/*  L BRWRITE  -  SPACE A LINE */
*/*  P MOVE STOP MESSAGE TO BUFFER */
*/*  L BRWRITE  -  PRINT THE MESSAGE */
*/*  M (,STPRT1) TURN OFF RECURSION SWITCH */
*/*STPRT1: L BRPRTMSG - WRITE STOP MESSAGE TO SYSPRINT */
*/*  L TCBREMV REMOVE ALL TCBS FROM TCB LIST */
*/*  P GET STOPEXIT ROUTINE ADDRESS FROM COMMON */
*/*  R GO TO STOPEXIT ROUTINE */
*/*STOPWTOR: P CLEAR FLAGS IN STOP ECB */
*/*  P BLANK REPLY BUFFER */
*/*STPWTORM: I WRITE STOP MESSAGE TO OPERATOR */
*/*  M INDICATE WTOR DONE */
*/*STOPRET: M RESTORE REGISTERS */
*/*  R RETURN */
*/*AMDPRCOM: END */
         EJECT
         COMMON  MF=L
         EQUATES
***********************************************************************
*                                                                     *
**           ***  ROUTINE FOR WRITING TO OUTDCB  ***                 **
*                                                                     *
*                                                                     *
*   PREG UPON ENTRY WILL DETERMINE WHAT CHARIAGE CONTROL IS TO BE     *
*   PERFORMED AS FOLLOWS....                                          *
*                                                                     *
*       -5    - SPACE THREE LINES IMMEDIATELY                    S21014
*       -4    - SPACE TWO LINES IMMEDIATELY                      S21014
*       -3    - SPACE ONE LINE IMMEDIATELY                       S21014
*       -2    - SKIP TO CHANNEL 1 IMMEDIATELY                    S21014
*       -1    - SKIP TO CHANNEL 1 AFTER PRINTING                 S21014
*        0    - OPEN OUTDCB AND GET CORE FOR BUFFER IF NOT ALREADY    *
*               AND DON'T PRINT                                       *
*        1    - SPACE ONE LINE AFTER PRINTING                         *
*        2    - SPACE TWO LINES AFTER PRINTING                        *
*        3    - SPACE THREE LINES AFTER PRINTING                      *
*        GT 3 - SPACE ONE LINE AFTER PRINTING                         *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE
*                                                                 M3179
         OUTBUFM
DCBOFLGS EQU   48
AMDPRWTR CSECT
         USING *,R15                                             Y02006
         MODID                                                   Y02006
         DROP  R15                                               Y02006
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         BALR  BASE1,0             SET UP REG 11 AS BASE
         USING *,BASE1
         LA    R2,WTRSAVE          SAVE AREA CHAINING
         ST    R13,WTRSAVE+4
         ST    R2,8(R13)
         LR    R13,R2              ESTABLISH WTR'S SAVE AREA
         SPACE
         L     COMBASE,ACOMMON     GET ADDRESS COMMON CSECT
         USING COMMON,COMBASE      BASE COMMON
         USING OUTBUF,BUFREG       USING DSECT FOR OUTPUT BUFFER -
*                                  BASED ON REGISTER 6
         SPACE
         TM    OUTDCB+DCBOFLGS,DCBOPEN IS THE OUTDCB ALREADY OPEN
         BO    WRITE1              IF IT IS BR AROUND OPEN AND GETMAIN
*                                  GET MAXIMUM BLOCKSIZE FOR     S21014
         DEVTYPE  PRNTNM,DEVAREA   ALLOCATED DEVICE              S21014
         LTR   R15,R15             WAS THERE A DD CARD           S21014
         BNZ   WRTABEND            GIVE MESSAGE IF NO DD CARD    S21014
         OPEN  (OUTDCB,OUTPUT)
         TM    OUTDCB+DCBOFLGS,DCBOPEN DID IT OPEN
         BZ    WRTABEND            ABEND WITH U100 IF NOT
         LA    R3,OUTDCB           GET ADDR OF PRINTER DCB        M0732
         ST    R3,AOUTDCB          STORE IN COMMON CSECT FOR END  M0732
         LA    R1,OUTBUFR          GET ADDRESS OF OUTPUT BUFFER  Y02006
         ST    R1,CURBUF           STORE BUFFER ADDR
         MVI   1(R1),X'40'         CLEAR
         MVC   2(207,R1),1(R1) BUFFER                          @Z40MI3F
         LM    R0,R1,WTRSAVE+20    RESTORE R0 AND R1
         MVI   PRNTCLCR,C'+'       DEFAULT = SUPPRESS SPACE      Y02006
WRITE1   L     BUFREG,CURBUF       LOAD BUFFER ADDR
         TM    BUFSW,PREFM         PREFORMATTED DUMP             Y02006
         BO    PREFMDMP            GO TO PREFORMAT ROUTINE       Y02006
WRITE12  LA    R9,WRITECLR         SET RETURN ADDRESS FOR         M0870
*                                  PUT SUBROUTINE - RETURN       S21014
*                                  TO CLEAR BUFFER FOR NEXT USER S21014
WRITE12A LTR   PREG,PREG           TEST PARM REG                 Y02006
         BZ    WRITERET            RETURN IF ZERO
         BM    WRITEIMM            NEG MEANS POSSIBLE            S21014
*                                  IMMEDIATE OPERATION BRANCH    S21014
*                                  TEST FURTHER                  S21014
***  FALL THROUGH MEANS SPACE AFTER PRINT  ***
         CH    PREG,THREE          IS IT GT THREE
         BNH   WRITE2              NO--OK
         LA    PREG,1              YES--SET TO 1
         SPACE 2
***********************************************************************
*                                                                     *
*  PUT SUBROUTINE.  SELECT PROPER CONTROL CHARACTER BASED OF REG 1,   *
*  AND PUT OUTPUT LINE ADDRESSED BY BUFREG.                           *
*                                                                     *
***********************************************************************
         SPACE
WRITE2   L     LINEREG,LINECNT     DECR LINE COUNT
         CH    LINEREG,LINENUM     AT TOP OF PAGE                Y02006
         BNE   WRITE3              NO, GO PRINT LINE             Y02006
         LA    R2,ADDR             ADDR OF BEGINNING OF BUFFER   Y02006
         LA    R5,ADDR+200     LOAD END ADDR (COMPARITOR         Y02006
*                                  FOR BXLE)                     Y02006
         LA    R4,8                LOAD INCR VALUE FOR BXLE      Y02006
WRITE2A  CLC   0(8,R2),BLANKS      COMPARE FOR BLANKS            Y02006
         BNE   PRTHDR              BR TO OUTPUT PAGE HEADER      Y02006
         BXLE  R2,R4,WRITE2A       LOOP TO END OF BUFFER         Y02006
         B     WRITESTP            ALL BLANK BUFFER--RETURN FOR  Y02006
*                                  AN EFFECTIVE NOP              Y02006
WRITE3   SR    LINEREG,PREG                                      Y02006
         BNP   WRTSKIPA            SKIP TO CH 1 IF ZERO OR NEG
         ST    LINEREG,LINECNT     UPDT LINECNT
         MVC   CNTLCHAR(1),PRNTCLCR  PUT CONTROL CHAR IN BUFFER  Y02006
         LA    R3,PTROP-1          DEVELOP CORRECT
         AR    R3,PREG             MACHINE OP
         IC    R3,0(R3)            CODE IN R3
         STC   R3,PRNTCLCR         PLACE IN SAVE AREA            Y02006
WRITEPUT LR    R0,BUFREG           ADDR OF BUFFER TO R0
         PUT   OUTDCB,(0)          PRINT BUFFER
         BR    R9                  RETURN TO CALLER OF PUT       S21014
         SPACE 2
***********************************************************************
*                                                                     *
*  BRANCH HERE TO CLEAR BUFFER, TEST FOR TOP OF PAGE, TEST FOR STOP   *
*  OPTION, AND EXIT                                                   *
*                                                                     *
***********************************************************************
         SPACE
WRITECLR MVI   ADDR,X'40'          CLEAR                         S21014
         MVC   ADDR+1(203),ADDR BUFFER                         @Z40MI3F
*** TEST FOR AT TOP OF PAGE  ***
WRITETST CH    LINEREG,LINENUMB    AM I AT THE TOP OF THE PAGE
         BE    PRTTITLE            YES--PRINT TITLE AT TOP
WRITESTP TM    SWE,STOPSW          IS STOP ENABLED                M0870
         BZ    WRITERET            NO--RETURN
         L     R15,ASTPROUT        LOAD ADDR OF STOPROUT
         BALR  RETREG,R15          BR TO IT
         SPACE
WRITERET L     R13,4(R13)          GET ADDRESS OF CALLER'S SAVE AREA
         LM    R14,R12,12(R13)     RESTORE CALLER'S REGISTERS
         BR    RETREG
         EJECT
**************************************************************** S21014
*                                                                S21014
*  THE FOLLOWING CODE SERVICES IMMEDIATE SPACE OPERATIONS.       S21014
*  A TEMPORARY BUFFER IS OBTAINED, CLEARED TO BLANKS, AND        S21014
*  PRINTED ON THE PRINTER DATA SET TO CAUSE THE IMMEDIATE        S21014
*  OPERATION.                                                    S21014
*                                                                S21014
**************************************************************** S21014
         SPACE
WRITEIMM LPR   R3,PREG             PARM COUNT IS NEGATIVE -      S21014
*                                  GET POSTIVE COUNT             S21014
         BCTR  R3,0                SUBTRACT ONE FROM COUNT       S21014
         LTR   R3,R3               IS COUNT NOW ZERO             S21014
         BZ    WRTSKIP             IF SO, MEANS PARM WAS -1      S21014
*                                  BRANCH TO SKIP TO CHANNEL 1   S21014
*                                  AFTER PRINTING CURRENT BUFFER S21014
         TM    PRSW,TTLSW          IS DUMP TITLE SWITCH ON       Y02006
         BZ    WRTIMM1             NO,CHECK IF AT TOP OF PAGE    Y02006
         NI    PRSW,XFF-TTLSW      YES, TURN OFF SWITCH          Y02006
         B     WRITESTP            RETURN AFTER CHECKING STOPSW  Y02006
WRTIMM1  L     LINEREG,LINECNT     GET LINE COUNT                Y02006
         CH    LINEREG,LINENUM     AT TOP OF PAGE                Y02006
         BE    WRITESTP            YES, RETURN                   Y02006
         LA    BUFREG,TEMPBUF      POINT BUFFER REG TO TEMPORARY Y02006
*                                  BUFFER                        S21014
         MVI   1(BUFREG),C' '      CLEAR TEMP BUFFER TO BLANKS   S21014
         MVC   2(207,BUFREG),1(BUFREG)                           S21014
         BCTR  R3,0                SUBTRACT 1 FROM NEW COUNT     S21014
         LTR   R3,R3               TEST COUNT FOR ZERO WHICH     S21014
*                                  MEANS PARM WAS -2 OR SKIP TO  S21014
*                                  CHANNEL 1 IMMEDIATELY         S21014
         BNZ   WRITELIN            BRANCH TO SPACE NUMBER OF     S21014
*                                  LINES IMMEDIATELY, REG 3      S21014
*                                  NOW CONTAINS NUMBER OF LINES  S21014
*                                  TO SPACE AFTER PRINTING TEMP  S21014
*                                  BUFFER                        S21014
WRITESKP BAL   R9,WRTSKIPA         LINK TO SKIP TO CHANNEL 1      M0870
*                                  AFTER PRINTING TEMP BUF -     S21014
*                                  BUFREG POINTS TO TEMP BUFFER  S21014
         B     WRITETST            ON RETURN, BRANCH TO FREE      M0870
*                                  TEMP BUF                      S21014
WRITELIN LR    PREG,R3             PUT SPACE COUNT IN PREG FOR   S21014
*                                  FOR BRANCH BACK TO CONTROL    S21014
*                                  CHARACTER SELECTION           S21014
         BAL   R9,WRITE2           GO PRINT TEMP BUFFER          S21014
*                                  FREE TEMPORARY BUFFER         S21014
         B     WRITETST            IMMEDIATE OPERATION COMPLETE  S21014
*                                  BRANCH TO TEST FOR AT TOP OF  S21014
*                                  PAGE                          S21014
         EJECT
***********************************************************************
*                                                                     *
*   SKIP TO CHANNEL 1 UNLESS BLANK BUFFER AND ALREADY AT TOP OF PAGE  *
*                                                                     *
***********************************************************************
         SPACE
WRTSKIP  L     LINEREG,LINECNT     LOAD PRESENT LINE COUNT
         TM    PRSW,TTLSW          SVC DUMP TITLE SWITCH SET
         BO    WRTIGNR             YES - DO NOT SKIP TO TOP OF PAGE
         CH    LINEREG,LINENUM     IS THIS FIRST LINE OF PAGE
*                                   (EXCLUDING TITLE)
         BL    WRTSKIPA             NO - DO SKIP THEN          @ZA28209
*                                  YES--TEST FOR BUFFER ALL BLANK
WRTIGNR  NI    PRSW,XFF-TTLSW      TURN OFF SVC DUMP TITLE SWITCH
         LA    R2,ADDR             ADDR OF BEGINNING OF BUFFER
         LA    R5,ADDR+200         LOAD END ADDR (COMPARITOR FOR BXLE)
*                                                              @Z40MI3F
         LA    R4,8                LOAD INCR VALUE FOR BXLE
WRTSKIPB CLC   0(8,R2),BLANKS      COMPARE FOR BLANKS
         BNE   WRTSKIPA            BR TO DO SKIP IF NONBLANK FOUND
         BXLE  R2,R4,WRTSKIPB      LOOP TO END OF BUFFER
         B     WRITETST             ALL BLANK BUFFER-RETURN FOR
*                                  AN EFFECTIVE NOP
WRTSKIPA MVC   CNTLCHAR,PRNTCLCR   MOVE CONTROL CHAR TO BUFFER   Y02006
         MVI   PRNTCLCR,C'1'       SET UP TO SKIP TO CHAN 1 ON   Y02006
*                                  NEXT CALL                     Y02006
         LH    LINEREG,LINENUMB    SET LINECNT
         ST    LINEREG,LINECNT
         B     WRITEPUT            GO PRINT AND SKIP
         SPACE 2
***********************************************************************
*                                                                     *
*   PRINT TITLE AT TOP OF EACH PAGE                                   *
*                                                                     *
***********************************************************************
         SPACE
PRTTITLE L     R1,PAGENUMB         LOAD PAGE NUMBER
         AH    R1,ONEA             ADD ONE TO IT
         ST    R1,PAGENUMB         UPDATE PAGENUMB
         CVD   R1,WORK1            CONVERT TO DECIMAL
         UNPK  WREDWRK(6),WORK1+5(3)  MAKE PAGE NUMBER PRINTABLE
         OI    WREDWRK+5,X'F0'        OR ON ZONE IN SIGN DIGIT
         MVC   TITLEPGE+5(4),WREDWRK+2 MOVE PAGE NUMBER TO TITLE
         TM    I3800SW,I3800204    CONDENSED DUMP IN PROGRESS? @Z40MI3F
         BZ    PRTTITL1            NO,120 COLUMN TITLE         @Z40MI3F
         MVC   ADDR(64),TITLEMSG   YES, 204 COLUMN TITLE       @Z40MI3F
         MVI   ADDR+64,X'40'                                   @Z40MI3F
         TM    I3800SW,I3800KEY    KEY MSG NEEDED              @Z40MI3F
         BNO   PRTTITL3            NO, SKIP SPECIAL CODE       @Z40MI3F
         MVC   ADDR+65(67),ADDR+64 BLANK UNUSED FIELD          @Z40MI3F
         MVC   ADDR+132(16),TITLEKEY STORAGE KEY MSG           @Z40MI3F
         B     PRTTITL4            SKIP NON-KEY MSG CODE       @Z40MI3F
PRTTITL3 DS    0H                  NO KEY MSG FOR PGE TITLE    @Z40MI3F
         MVC   ADDR+65(83),ADDR+64                             @Z40MI3F
PRTTITL4 DS    0H                  END SEPARATE KEY MSG CODE   @Z40MI3F
         MVC   ADDR+148(56),TITLEMOD                           @Z40MI3F
         B     PRTTITL2            SKIP 120-COLUMN-TITLE CODE  @Z40MI3F
PRTTITL1 DS    0H                  120 COLUMN TITLE PROCESSING @Z40MI3F
         MVC   ADDR(120),TITLEMSG  MOVE TITLE TO BUFFER
PRTTITL2 DS    0H                  END TITLE BUFFER PREPARATION
         TM    BUFSW,PREFM         PREFORMATTED DUMP             Y02006
         BO    PREFMTTL        YES - RETURN TO PREFORMAT ROUTINE Y02006
         LA    PREG,2              SPACE TWO LINES
         B     WRITE12             GO PRINT TITLE
         EJECT
***********************************************************************
*                                                                     *
*   PRINT HEADER AT TOP OF EACH PAGE IF THERE IS ONE TO BE PRINTED    *
*                                                                     *
***********************************************************************
PRTHDR   ST    PREG,SAVPREG        SAVE PREG                     Y02006
         ST    R9,SAVER9           SAVE R9                       Y02006
         LA    BUFREG,TEMPBUF      GET TEMP BUFFER ADDR          Y02006
         MVI   ADDR,X'40'          CLEAR                         Y02006
         MVC   ADDR+1(203),ADDR    BUFFER                      @Z40MI3F
         CLC   TOPICHDR(10),ADDR   SHOULD HDR BE PRINTED         Y02006
         BE    PRTLINE             NO, PRINT LINE                Y02006
         MVC   ADDR+55(10),TOPICHDR  MOVE IN PAGE HEADER         Y02006
         LA    PREG,2              SPACE TWO LINES               Y02006
         LA    R9,HDRRTRN          SET UP RETURN ADDR            Y02006
         B     WRITE3              GO PRINT HEADER               Y02006
HDRRTRN  MVI   ADDR,X'40'          CLEAR TEMP                    Y02006
         MVC   ADDR+1(203),ADDR    BUFFER                      @Z40MI3F
PRTLINE  L     BUFREG,CURBUF       RESTORE R6                    Y02006
         L     PREG,SAVPREG        RESTORE R1                    Y02006
         L     R9,SAVER9           RESTORE R9                    Y02006
         B     WRITE3              GO OUTPUT LINE                Y02006
         EJECT
***********************************************************************
*                                                                     *
*        THIS ROUTINE HANDLES A PREFORMATTED DUMP                     *
*                                                                     *
***********************************************************************
         SPACE
PREFMDMP L     LINEREG,LINECNT     LOAD PRESENT LINE COUNT       Y02006
         CH    LINEREG,LINENUM     IS THIS FIRST LINE OF PAGE    Y02006
         BE    PREFMSKP            GO HANDLE SKIP TO CHANNEL 1   Y02006
         CLI   CNTLCHAR,SKP2CHN1   IS CONTROL CHAR A '1' (SKIP)  Y02006
         BE    PREFMSKP            YES -GO HANDLE SKIP TO CHAN 1 Y02006
         LH    PREG,THREE          SET PREG TO THREE             Y02006
         CLI   CNTLCHAR,SPACE3     IS CONTROL CHAR A '-' (SP 3)  Y02006
         BE    PREFMCTL            YES - GO HANDLE               Y02006
         LH    PREG,TWO            SET PREG TO TWO               Y02006
         CLI   CNTLCHAR,SPACE2     IS CONTROL CHAR A '0' (SP 2)  Y02006
         BE    PREFMCTL            YES - GO HANDLE               Y02006
         LH    PREG,ONEA           SET PREG TO ONE               Y02006
         MVI   CNTLCHAR,SPACE1     SET CONTROL CHAR =' ' (SP 1)  Y02006
PREFMCTL SR    LINEREG,PREG        CEDREMENT LIN COUNT           Y02006
         BM    PREFMSKP            MINUS - SKIP TO NEXT PAGE     Y02006
         ST    LINEREG,LINECNT     UPDATE LINECNT                Y02006
PREFMOUT BAL   R9,WRITEPUT         OUTPUT LINE                   Y02006
         MVI   ADDR,X'40'          CLEAR                         Y02006
         MVC   ADDR+1(203),ADDR    BUFFER                      @Z40MI3F
         B     WRITESTP            RETURN TO CALLER              Y02006
         SPACE
PREFMSKP LH    LINEREG,LINENUMB    SET LINECNT                   Y02006
         SH    LINEREG,THREE       SUBTRACT THREE                Y02006
         ST    LINEREG,LINECNT     STORE IN COMMON               Y02006
         LA    BUFREG,TEMPBUF      OUTPUT TITLE USING TEMP BUF   Y02006
         MVI   CNTLCHAR,SKP2CHN1   SET CONTROL CHAR (SKIP)       Y02006
         B     PRTTITLE            PREPARE TO OUTPUT TITLE       Y02006
*  AFTER TITLE IS FORMATTED, RETURN TO HERE TO OUTPUT
PREFMTTL BAL   R9,WRITEPUT         OUTPUT TITLE                  Y02006
         MVI   ADDR,X'40'          CLEAR                         Y02006
         MVC   ADDR+1(203),ADDR    BUFFER                      @Z40MI3F
         L     BUFREG,CURBUF       RESTORE PTR TO OUTPUT LINE    Y02006
         MVI   CNTLCHAR,SPACE2     SET CONTROL CHAR (SP 2)       Y02006
         B     PREFMOUT            GO OUTPUT LINE                Y02006
         EJECT
***********************************************************************
*                                                                     *
*   OUTDCB ERROR...WRITE MSG AND TERMINATE                            *
*                                                                     *
***********************************************************************
         SPACE
PERROR   SR    R0,R0               CODE FOR PRINTER DDNAME
         LA    R1,12               CODE FOR MESSAGE AMD153I
         B     PEXIT               BRANCH TO BRANCH TO MESSAGE WRITER
         SPACE
WRTABEND SR    R0,R0               LOAD CODE FOR PRINTER  DDNAME
         SR    R1,R1               LOAD CODE FOR OPEN ERROR MSG
PEXIT    L     R15,AEREXIT         EXIT TO END ROUTINE TO WRITE
         BR    R15                 MESSAGE AND TERMINATE
         SPACE 2
***********************************************************************
*                                                                     *
*   CONSTANTS FOR WRITE ROUTINE                                       *
*                                                                     *
***********************************************************************
         SPACE
WTRSAVE  DC    18F'0'              WTR'S SAVE AREA
SAVER9   DC    F'0'                TEMP REG SAVE AREA            Y02006
SAVPREG  DC    F'0'                TEMP REG SAVE AREA            Y02006
         DS    0F
ACOMMON  DC    A(AMDPRCOM)         LINK-EDIT WITH COMMON
WREDWRK  DC    CL8' '
PTROP    DC    C' 0-'           ANSI CODES FOR SPACE 1, 2, AND 3 Y02006
PRNTNM   DC    CL8'PRINTER'        DDNAME FOR DEVTYPE            S21014
PRNTCLCR DC    C'+'                DEFAULT CONTROL CHAR AND      Y02006
*                                  CONTROL CHAR SAVEAREA         Y02006
*        OUTBUFR AND TEMPBUF ARE GIVEN 209 BYTES INSTEAD OF 205 TO
*        ALLOW FOR BLANK-BUFFER CHECKING 8 BYTES AT A TIME AND TO
*        ALLOW FOR FUTURE CONTROL CHARACTERS AND STATUS BYTES. @Z40M13F
OUTBUFR  DC    CL209' '            OUTPUT BUFFER               @Z40MI3F
TEMPBUF  DC    CL209' '            TEMPORARY BUFFER            @Z40MI3F
SKP2CHN1 EQU   C'1'                SKIP TO CHANNEL 1 CODE        Y02006
SPACE1   EQU   C' '                SPACE 1 CONTROL CHAR          Y02006
SPACE2   EQU   C'0'                SPACE 2 CONTROL CHAR          Y02006
SPACE3   EQU   C'-'                SPACE 3 CONTROL CHAR          Y02006
         EJECT
OUTDCB   DCB   DSORG=PS,DDNAME=PRINTER,MACRF=PM,                       X
               EROPT=ACC,RECFM=FBA,EXLST=OUTLIST,                      X
               SYNAD=PERROR                                      Y02006
         SPACE
DEVAREA  DC    F'0'                RETURN AREA FOR DEVTYPE       S21014
MAXBLK   DC    F'0'                THESE TWO CARDS MUST BE       S21014
*                                  TOGETHER BECAUSE 2-ND WORD    S21014
*                                  RETURNED BY DEVTYPE IS MAX    S21014
*                                  BLKSIZE FOR DEVICE.  CARDS    S21014
*                                  ARE AFTER DCB SO AS TO BE     S21014
*                                  ADDRESSABLE FROM OPEN EXIT    S21014
*                                  ROUTINE                       S21014
*                                                              @Z40MI3F
*        NOTE: HAVING THE FOURTH BIT OF THE FIRST BYTE SET TO ONE IN
*        THE OUTEXIT ENTRY OF OUTLIST, CAUSES REG 0 TO POINT TO A
*        LIST OF FORMAT PARAMETERS FOR THE PRINTER DEVICE ON ENTRY
*        TO THE OUTEXIT ROUTINE.                               @Z40MI3F
*                                                              @Z40MI3F
OUTLIST  DC    X'15'               3800 PRINTER EXIT           @OZ12029
         DC    AL3(OUTEXIT)        PROCESSING ADDRESS          @OZ12029
         DC    X'85'               DCB EXIT                    @OZ12029
         DC    AL3(OUTEXIT)        OUTDCB EXIT ROUTINE         @Z40MI3F
BLKRECSZ DC    F'121'              DEFAULT BLKSIZE & LRECL     @Z40MI3F
WTRPATCH DC    13F'0'              PATCH AREA                    X01980
         EJECT
***********************************************************************
*                                                                     *
**                 ***  OUTDCB EXIT ROUTINE  ***                     **
*                                                                     *
*                                                                     *
*   TEST BLKSIZE AND LRECL TO SEE IF SUPPLIED, IF NOT SET TO 121.  IF *
*   THEY ARE SUPPLIED TEST TO BE CERTAIN THAT BLKSIZE IS AN EVEN      *
*   MULTIPLE OF LRECL AND CORRECT IT IF NOT.  ALSO IF BLOCKING FACTOR *
*   IS GREATER THAN 10 SET BUFNO TO 2 INSTEAD OF 3.                   *
*                                                                     *
***********************************************************************
         SPACE
         DROP  BASE1,BUFREG
OUTEXIT  LR    BASE1,R15           LOAD BASE REG FOR ROUTINE
         LR    BASE2,R1            LOAD DCB ADDR FOR BASE
         USING OUTEXIT,BASE1
         USING OUTDCB,BASE2
         BAL   R4,PRTFORM      FIND WHAT 3800 PRT FORMATS WERE SELECTED
         L     R3,BLKRECSZ     LOAD DEFAULT BLKSIZE & LRECL    @Z40MI3F
         LH    R4,OUTDCB+LRECL     LOAD LRECL VALUE
         LTR   R4,R4               WAS IT PROVIDED
         BNZ   OUTEXIT1            YES--LEAVE IT BE
         STH   R3,OUTDCB+LRECL     NO--STORE DEFAULT VALUE OF 121
OUTEXIT1 LH    R4,OUTDCB+BLKSIZE   LOAD BLKSIZE VALUE
         LTR   R4,R4               WAS IT PROVIDED
         BNZ   OUTEXIT2            YES--LEAVE IT BE
         STH   R3,OUTDCB+BLKSIZE   NO--STORE DEFAULT VALUE OF 121
OUTEXIT2 LH    R5,OUTDCB+BLKSIZE   LOAD BLKSIZE VALUE
         C     R5,MAXBLK           COMPARE SPECIFIED BLKSIZE     S21014
*                                  TO MAX RECORD SIZE FOR ALLOC. S21014
*                                  DEVICE                        S21014
         BNH   OUTEXIT7            BRANCH IF SPECIFIED BLKSZ IS  S21014
*                                  OF - LESS THAN OR EQUAL MAX   S21014
         L     R5,MAXBLK           OTHERWISE, USE MAX FOR DEVICE S21014
         STH   R5,OUTDCB+BLKSIZE   STORE NEW BLOCK SIZE          S21014
OUTEXIT7 SR    R4,R4               CLEAR R4 FOR DIVIDE
         LH    R6,OUTDCB+LRECL     LOAD LRECL VALUE
         CR    R5,R6               COMPARE LRECL TO BLKSIZE
         BL    OUTEXIT3            LRECL GT BLKSIZE
         BE    OUTEXIT4            LRECL EQ BLKSIZE
         DR    R4,R6               DIVIDE BLKSIZE BY LRECL
         LR    R7,R5               SAVE QUOTIENT AS BLOCKING FACTOR
*                                                                Y02006
         MR    R4,R6               MULTIPLY RESULT BY LRECL TO BE
*                                  CERTAIN BLKSIZE IS AN EVEN MULTIPLE
*                                  OF LRECL
         STH   R5,OUTDCB+BLKSIZE   STORE CORRECTED BLKSIZE BACK TO DCB
         CLI   OUTDCB+BUFNOA,0     WAS BUFNO SPECIFIED IN DD CARD
         BNE   OUTEXIT4            YES--LEAVE IT AS IS
         CH    R7,HTEN             IS BLOCKING FACTOR GT 10
         BNH   OUTEXIT5            NO--SET BUFNO TO 3 BUFFERS
         LA    R7,2                YES--SET BUFNO TO 2 BUFFERS
         B     OUTEXIT6            BR AROUND
OUTEXIT5 LA    R7,3                LOAD FOR 3 BUFFERS
OUTEXIT6 STC   R7,OUTDCB+BUFNOA    STORE IN DCB
OUTEXIT4 BR    R14                 RETURN TO OPEN
         SPACE
OUTEXIT3 STH   R6,OUTDCB+BLKSIZE   MAKE BLKSIZE EQ TO LRECL
         BR    R14                 RETURN TO OPEN
         EJECT                                                 @Z40MI3F
***********************************************************************
*                                                                     *
*              ***  OUTDCB PRINTER-FORMAT ROUTINE  ***                *
*                                                                     *
*  THIS ROUTINE ENTERED FROM OUTEXIT ROUTINE DURING                   *
*  OPENING  OF  OUTDCB.      ON ENTRY REG 0 POINTS TO A LIST          *
*  PRINTER FORMAT INFO. IN PARTICULAR, BYTES 176-179 CONTAIN THE      *
*  FORMS CONTROL BUFFER (FCB) VALUE AND BYTES 20-23  CONTAIN THE      *
*  CHARACTER SET VALUE (CHARS).                                       *
*                                                                     *
*                                                                     *
*        1. DETERMINE WHETHER FCB=STD3 WAS SPECIFIED                  *
*        2. IFSO, SET PARMS FOR LONG PAGE FORMAT (80 LINES/PAGE)      *
*        3. IFNOT, ENSURE LINE COUNT LESS THAN 66                     *
*        4. DETERMINE WHETHER CHARS=DUMP WAS SPECIFIED                *
*        5. IFSO, SET PARMS FOR A CONDENSED DUMP                      *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 1                                               @Z40MI3F
PRTFORM  NI    I3800SW,XFF-I3800204-I380080-I3800KEY          @Z40MI3F
*                                  ZERO FLAGS FOR 3800 SUPPORT@Z40MI3F
         MVC   TITLEKEY+12(2),=C'  ' BLANK KEY IN KEY MSG     @Z40MI3F
         LR    R3,R0               ADDR PRINTER FORMAT LIST    @Z40MI3F
         LTR    R3,R3                  TEST FOR JFCB EXTENSION @ZM4001P
         BZ    PRTFORM3            BRANCH ON NO                @ZA04272
         CLC   176(4,3),=C'STD3'   8 LINES PER INCH?           @Z40MI3F
         BNE   PRTFORM3            NOT FCB=STD3                @ZA04272
         BAL   5,STD3SET           FCB=STD3,SET PARMS FOR 80 L/P
PRTFORM3 LTR    R3,R3                  TEST FOR JFCB EXTENSION @ZM4001P
         BZ     PRTFORM2                  BRANCH ON NO         @ZM4001P
         CLC    20(4,3),=C'DUMP' CHECK CHARS= PARM OF PRINTER DD
         BNE   PRTFORM2            NOT CHARS=DUMP              @Z40MI3F
         BAL   5,DUMPSET           CHARS=DUMP,SET PARMS 204 C/L
         B     PRTFORM4            BR AROUND SUBROUTINES       @Z40MI3F
STD3SET  OI    I3800SW,I380080     SET 80 LIN/PG MAX           @Z40MI3F
         TM    I3800SW,I3800ULN    DID USER SPEC LINES/PAGE?   @Z40MI3F
         BO    0(R5)               YES,RETURN TO MAIN PRINT-FORMAT RTN
         MVI   LINENUMB+1,80       MODEL 3800 LINES/PAGE       @Z40MI3F
         MVI   LINENUM+1,78        MODEL 3800 LINES/PAGE - 2   @Z40MI3F
         BR    R5                  RETURN TO MAIN PRINT-FORMAT RTN
DUMPSET  OI    I3800SW,I3800204    SET CONDENSED DUMP SWITCH   @Z40MI3F
         MVI   BLKRECSZ+3,205      CONDSD DUMP DEFAULT BLKSIZ,LRECL
         BR    R5                  RETURN TO MAIN PRINT-FORMAT RTN
PRTFORM2 MVI   BLKRECSZ+3,121      NON-CONDENSED DUMP DEFAULT  @Z40MI3F
PRTFORM4 BR    R4                  RETURN TO MAIN STREAM OF OUTEXIT RTN
         DROP  BASE1,BASE2
         EJECT
AMDPRSYN CSECT
***********************************************************************
*                                                                     *
**     ***  SYNTAX ERROR IN REPLY...RE-GROUP AND TRY AGAIN  ***      **
*                                                                     *
***********************************************************************
         SPACE
         USING SYNTAX,R15
         SYNEPS  MF=L
         BALR  BASE1,0             ESTABLISH REG 11 AS BASE
         USING *,BASE1
         LA    R5,SYNSAVE          SAVE AREA CHAINNING
         ST    R13,SYNSAVE+4
         ST    R5,8(R13)
         LR    R13,R5              POINT TO OUR SAVE AREA
         LTR   R5,R1               TEST FOR STANDARD MSG ONLY
         BZ    SYNTAX6             YES-BRANCH TO PRINT IT
         TM    SWD,NOSTDMG         TEST FOR NO STANDARD MESSAGE, S21014
*                                  I.E., MESSAGE AMD165I NOT     S21014
*                                  REQUIRED                      S21014
         BO    SYNTAX7             BRANCH TO ISSUE ONLY          S21014
*                                  CALLER'S MESSAGE              S21014
         TM    SWA,RDRSW           COMMANDS FROM CONSOLE?
         BO     SYNTAX5            NO-DON'T WTO
         LA    R1,PTRSYN           LOAD ADDRESS OF WTO LIST
         WTO   MF=(E,(1))
SYNTAX5  LA    R2,PTRSYN           SET UP TO PRINT STANDARD MSG
         LA    R1,4(R2)            MSG ADDRESS
         LH    R2,0(R2)
         SH    R2,FOUR             LENGTH OF MESSAGE
         BRPRTMSG  (R1),(R2)       WRITE MESSAGE ON SYSPRINT
         B     SYNTAX7             PRINT DIAGNOSTIC MESSAGE
SYNTAX6  TM    SWD,NOSTDMG         TEST FOR NO STANDARD MSG      S21014
         BO    SYNTAX6A            BRANCH IF SO TO POINT TO      S21014
*                                  CALLER'S MESSAGE              S21014
         L     R5,SYNMSGA          PICK UP MESSAGE ARRAY ADDRESS S21014
         LTR   R5,R5               TEST FOR SWITCH SET CALL      S21014
         BZ    SYNTAX2             ZERO INDICATES SUCH A CALL    S21014
*                                  SO BRANCH TO SET FLUSH MODE   S21014
*                                  SWITCH                        S21014
         LA    R5,PTRSYN           LOAD STANDARD MSG ADDR        S21014
*                                  ISSUING ONLY THIS MESSAGE     S21014
         B     SYNTAX7             BRANCH AROUND NO-STD CODE     S21014
SYNTAX6A L     R5,SYNMSGA          GET ADDR OF MSG POINTER       S21014
         L     R5,0(R5)            GET ADDR MESSAGE              S21014
SYNTAX7  LH    R2,0(R5)            LOAD MESSAGE LENGTH
         SH    R2,FOUR             SUBTRACT 4 FOR LENGTH OF JUST MSG
         LA    R1,4(R5)            LOAD MSG ADDR
         CLC   0(8,R1),BLANKS      DOES MSG HAVE ID              Y02006
         BNE   SYNTAX8             YES - GO OUTPUT IT            Y02006
         MVC   0(7,R1),PTRSYN+4    MOVE IN MSG ID                Y02006
SYNTAX8  BRPRTMSG  (R1),(R2)        WRITE MESSAGE TO SYSPRINT    Y02006
SYNTAX1  TM    SWA,RDRSW           IS RDR SW ON
         BO    SYNTAX2             YES--DON'T DO WTO TO OPERATOR
         LR    R1,R5               MSG ADDR TO R1 FOR WTO
         WTO   MF=(E,(1))
         TM    SWC,SETFLSH         IS FLUSHMODE TO BE SET        Y02006
         BZ    SYNDONE             NO--DONE                      Y02006
         NI    SWC,XFF-SETFLSH     RESET SETFLSH INDICATOR       Y02006
         OI    SWD,FLSHMODE        SET FLUSHMODE                 Y02006
         B     SYNDONE             CLOSE OUT SYNTAX ROUTINE
         SPACE
***  TEST FOR FLUSH MODE  ***                                    Y02006
SYNTAX2  TM    SWC,SETFLSH         IS FLUSHMODE TO BE SET        Y02006
         BZ    SYNDONE             NO--DONE                      Y02006
         NI    SWC,XFF-SETFLSH     RESET SETFLSH INDICATOR       Y02006
         TM    SWD,FLSHMODE        IS FLSHMODE ALREADY SET       Y02006
         BO    SYNDONE             YES - DON'T ISSUE MESSAGE     Y02006
         OI    SWD,FLSHMODE        SET FLUSHMODE                 Y02006
         BRPRTMSG  FLUSHMSG,48     PRINT FLUSH MSG               X01980
         SPACE
SYNDONE  NI    SWD,XFF-NOSTDMG     TURN OFF NO STANDARD MSG SW   S21014
         L     R13,4(R13)          POINT TO CALLER'S SAVE AREA   S21014
         LM    R14,R12,12(R13)     RESTORE CALLER'S REGS
         BR    RETREG              RETURN
         SPACE
SYNSAVE  DC    18F'0'              SAVE AREA FOR SYNTAX ERROR ROUTINE
FLUSHMSG DC    C'AMD171I PROCESSING FOR CURRENT DUMP DISCONTINUED'
         SPACE
PTRSYN   WTO 'AMD165I ERROR IN PRECEDING CONTROL STATEMENT',           L
               MF=L,ROUTCDE=(2),DESC=7
         DROP  BASE1
         EJECT
***********************************************************************
*                                                                     *
**        ***  ROUTINE TO CONVERT A THREE BYTE ADDRESS  ***          **
*                                                                     *
***********************************************************************
         SPACE
         USING ADRCNVT,R15
ADRCNVT  ST    R5,R5SAVE           SAVE REGISTER 5               Y02006
         LA    R5,1(PREG)          ADDR OF VALUE TO BE CONVERTED Y02006
         ST    R1,ADRCSV           SAVE R1
         HEXCNVT (4),(5),3         CONVERT IT
         L     R1,ADRCSV           RESTORE R1
         L     R5,R5SAVE           RESTORE REGISTER 5            Y02006
         BR    RETREG              RETURN TO CALLER
ADRCSV   DC    F'0'                SAVE AREA FOR REG 1
         DROP  R15
         SPACE 3
***********************************************************************
*                                                                     *
**                ***  ROUTINE TO CONVERT A WORD  ***                **
*                                                                     *
***********************************************************************
         SPACE
         USING WRDCNVT,R15
WRDCNVT  ST    R5,R5SAVE           SAVE REGISTER 5               Y02006
         LR    R5,PREG             ADDR OF WORD TO BE CONVERTED  Y02006
         HEXCNVT (4),(5),4         CONVERT IT
         LR    PREG,R5             RESTORE PREG
         L     R5,R5SAVE           RESTORE REGISTER 5            Y02006
         BR    RETREG              RETURN TO CALLER
R5SAVE   DC    F'0'                REGISTER 5 SAVE AREA          Y02006
SYNPATCH DC    13F'0'              PATCH AREA                    X01980
         DROP  R15
         EJECT
AMDPRMSG CSECT
         SPACE
         USING *,R15                                             Y02006
         MODID                                                   Y02006
         DROP  R15                                               Y02006
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         BALR  BASE1,0             ESTABLISH REG 11 AS BASE
         USING *,BASE1
         LA    R3,PMSGSAVE         SAVE AREA CHAINNING
         ST    R13,PMSGSAVE+4
         ST    R3,8(R13)
         LR    R13,R3
         SPACE
PRTMSG   NOP   PRTRET              RETURN IF SWITCH SET           P
*                                  (NO SYSPRINT DD CARD)          P
*                                  DD CARD)
         TM    PTRDCB+DCBOFLGS,DCBOPEN IS SYSPRINT DCB OPEN
         BO    PRTMSG1             YES--BYPASS OPEN
         LR    R3,R1               SAVE REG 1 CONTENT ARROUND OPEN
         OPEN  (PTRDCB,OUTPUT)
         TM    PTRDCB+DCBOFLGS,DCBOPEN DID IT OPEN
         BZ    PRTMSG3             NO DD CARD...SET SWITCH TO RETURN
         LA    R4,PTRDCB           GET ADDR SYSPRINT DCB          M0732
         ST    R4,APTRDCB          STORE IN COMMON CSECT FOR END  M0732
***  PRINT TITLE FOR MESSAGE DATA SET  ***
         MVC   MSGBUF(L'MSGTITLE),MSGTITLE
         PUT   PTRDCB,MSGBUF
         MVI   MSGBUF,C' '         CLEAR MESSAGE BUFFER
         MVC   MSGBUF+1(119),MSGBUF
         PUT   PTRDCB,MSGBUF       SPACE AFTER TITLE
         LR    R1,R3               RESTORE REG 1
PRTMSG1  MVI   MSGBUF,X'40'        CLEAR BUFFER
         MVC   MSGBUF+1(119),MSGBUF
         LTR   R2,R2               TEST LENGTH
         BZ    PRTMSG2             ZERO--PRINT BLANKS
         BCTR  R2,0                DECR LENGTH FOR EXECUTE
         EX    R2,MSGMOVE          MOVE MESSAGE TO BUFFER
PRTMSG2  PUT   PTRDCB,MSGBUF       PRINT MESSAGE
PRTRET   L     R13,4(R13)          POINT TO CALLER'S SAVE AREA
         SPACE
         LM    R14,R12,12(R13)     RESTORE HIS REGS
         BR    RETREG              RETURN TO CALLER
         SPACE
PRTMSG3  OI    PRTMSG+1,X'F0'      NO SYSPRINT DD CARD--SET SW TO
*                                  RETURN ON ALL SUBSEQUENT ENTRIES
         B     PRTRET              RETURN
         SPACE
***  CONSTANTS AND SAVE AREA FOR PRTMSG ROUTINE  **
PMSGSAVE DC    18F'0'              REGISTER SAVE AREA
MSGBUF   DC    CL120' '
MSGTITLE DC    C'* * * *    A M D P R D M P  M E S S A G E  L O G    * X
               * * *'                                            Y01980
***  INSTRUCTION TO BE EXECUTED  ***
MSGMOVE  MVC   MSGBUF(0),0(R1)
         EJECT
PTRDCB   DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,                    X
               RECFM=F,LRECL=120,BLKSIZE=120
MSGPATCH DC    13F'0'              PATCH AREA                    X01980
         EJECT
AMDPRGFR CSECT
         SPACE
         USING *,R15                                             Y02006
         MODID                                                   Y02006
         DROP  R15                                               Y02006
         STM   R14,R12,12(R13)     STORE CALLER'S REGS
         BALR  BASE1,0             ESTABLISH REG 11 AS BASE
         USING *,BASE1
         LA    R2,FMTLNSA          SAVE AREA CHAINNING
         ST    R13,FMTLNSA+4
         ST    R2,8(R13)
         LR    R13,R2              ENTRY COMPLETE
         SPACE
         STH   R0,ASIDSV           SAVE ASID NUMBER              Y02006
         LR    R8,PREG             PATTERN ADDR TO R8 FOR BASE
         USING FMTPTRN,R8
         L     BUFREG,CURBUF       LOAD BUFFER ADDR
         USING OUTBUF,BUFREG
         SPACE
FMTLNLP  SR    R10,R10             ZERO INDEX REG
         TM    PTRNCD,X'FF'        TEST FOR END OF PATTERN
         BZ    FMTLNRT             YES--RETURN TO CALLER
         TM    PTRNCD,LBL          TEST FOR LABEL FOR THIS ENTRY
         BO    FMTLN1              YES--GO MOVE TO LABEL TO OUTPUT BUFF
FMTLNA   TM    PTRNCD,DTA          TEST FOR DATA FOR THIS ENTRY
         BO    FMTLN2              YES--PUT DATA INTO OUTPUT BUFFER
FMTLNB   LA    R8,4(R10,R8)        UPDATE PATTERN BASE TO NEXT ENTRY
         B     FMTLNLP             LOOP FOR ALL PATTERN ENTRIES
         SPACE 2
*
*   MOVE LABEL TO OUTPUT BUFFER
*
         SPACE
FMTLN1   IC    R3,PTRNLN           GET LENGTHS
         N     R3,LN1MSK           AND FOR LABEL LN ONLY
         SRL   R3,4                SHIFT TO LOW DIGIT OF REG
         TM    PTRNCD,LBLP         IS THERE A LABEL POINTER
         BZ    FMTLN1A             NO--BR AROUND
         L     R7,PTRNPTR          YES--LOAD IT INTO R7
         AH    R10,FOUR            ADD LN OF PTR TO INDEX
         B     FMTLN1B             BR AROUND
FMTLN1A  L     R7,NXTLBL           LOAD ADDR OF NEXT LABEL
FMTLN1B  LA    R4,1(R7,R3)         INCR NEXT LABEL ADDR
         ST    R4,NXTLBL           STORE IT BACK
         SR    R4,R4               CLEAR FOR IC
         IC    R4,PTRNOFF1         GET OFFSET INTO LINE OF LABEL
         LA    R4,ADDR(R4)         ADDR OF WHERE TO PUT LABEL ON LINE
         EX    R3,LBLMOVE          MOVE LABEL TO PRINT LINE
         B     FMTLNA              CONTINUE
         SPACE 2
*
*   PLACE DATA INTO PRINT LINE
*
         SPACE
FMTLN2   IC    R3,PTRNLN           GET LENGTHS
         N     R3,LN2MSK           AND OFF ALL BUT LAST DIGIT
         AH    R3,ONEA             INCR TO REAL LENGTH
         TM    PTRNCD,DTAP         IS THERE A DATA PTR
         BZ    FMTLN2A             BR IF NOT
         L     R7,PTRNPTR(R10)     YES--LOAD PTR TO DATA
         AH    R10,FOUR            ADD LN OF PTR TO INDEX REG
         B     FMTLN2B             BR AROUND
FMTLN2A  L     R7,NXTDTA           LOAD ADDR OF NEXT DATA
FMTLN2B  LA    R4,0(R7,R3)         UPDATE TO NEXT DATA ADDR
         ST    R4,NXTDTA           PUT IT BACK
         SR    R4,R4               CLEAR OFFSET REG
         IC    R4,PTRNOFF2         LOAD OFFSET OF DATA INTO PRINT LINE
         TM    PTRNCD,DTAC         TEST FOR DATA FROM CORE OR DUMP
         BO    FMTLN3              BR IF DIRECTLY FROM CORE
         TM    PTRNCD,DTAE         IS DATA TO BE EBCDIC
         LA    R2,FMTLNWK          LOAD ADDR OF WORK AREA TO R2
         BZ    FMTLN2C             BR IF NOT EBCDIC
         LA    R2,ADDR(R4)         LOAD TO R2 ADDR OF WHERE IN
*                                  BUFFER TO PUT DATA
FMTLN2C  STM   R2,R7,FMTLNSV       SAVE REGS R2 - R7
         LH    R0,ASIDSV           PICK UP ASID FOR BRREAD       Y02006
FMTLN2D  BRREAD  (R7),DATA,ASID=(R0)                             Y02006
         LCR   R5,R7               COMPLIMENT ADDR
         N     R5,LN3MSK           AND OFF ALL BUT LAST 2 BITS
         BNZ   FMTLN2E             BR IF NOT ZERO (LN IN R5)
         LA    R5,4                ZERO--USE A LN OF 4
FMTLN2E  SR    R3,R5               SUBTRACT LN TO BE MOVED FROM
*                                  REMAINING LENGTH
         BNP   FMTLN2F             BR IF REMAINING LN EQ OR LT 0 FOR
*                                  LAST MOVE
         AR    R7,R5               INCR 'FROM' ADDR
         BCTR  R5,0                DECR LN OF MOVE FOR EX
         EX    R5,DTAMOVE1         MOVE DATA
         LA    R2,1(R5,R2)         INCR 'TOO' ADDR
         B     FMTLN2D             LOOP FOR ALL DATA TO BE MOVED
         SPACE
FMTLN2F  AR    R3,R5               ADD BACK SUBTRACTED VAL TO LN
         BZ    FMTLN2G             ALL DONE IF ZERO
         BCTR  R3,0                DECR 1 FOR EX
         EX    R3,DTAMOVE1         DO LAST MOVE
FMTLN2G  LM    R2,R7,FMTLNSV       RESTORE REGS R2 - R7
         TM    PTRNCD,DTAE         IS DATA EBCDIC
         BO    FMTLNB              YES--DONE WITH DATA FOR THIS PATTERN
*                                  ENTRY IF SO
FMTLN2H  LA    R5,ADDR(R4)         ADDR OF WHERE IN BUFFER TO PUT
*                                  DATA
         BAL   R9,FMTLN4           CONVERT DATA TO PRINTABLE HEX
         B     FMTLNB              DONE WITH DATA FOR THIS PTRN ENTRY
         SPACE
FMTLN3   LR    R2,R7               DATA 'FROM' ADDR TO R2
         TM    PTRNCD,DTAE         IS DATA TO BE EBCDIC
         BZ    FMTLN2H             NO--GO CONVERT TO HEX
         LA    R2,ADDR(R4)         DATA 'TOO' ADDR TO R2
         LR    PREG,R7             DATA 'FROM' ADDR TO PREG
         BCTR  R3,0                DECR LN FOR EXECUTE
         EX    R3,DTAMOVE1         MOVE EBCDIC DATA TO BUFFER
         B     FMTLNB              CONTINUE WITH NEXT ENTRY IN PATTERN
         SPACE
FMTLN4   HEXCNVT (5),(2),(3)       CONVERT DATA TO PRINTABLE HEX
         BR    R9                  RETURN TO CALLER
         SPACE
*   EXECUTABLE INSTRUCTIONS
DTAMOVE1 MVC   0(0,R2),0(PREG)
LBLMOVE  MVC   0(0,R4),0(R7)
         SPACE 2
FMTLNRT  L     R13,4(R13)          POINT TO CALLER'S SAVE AREA
         LM    R14,R12,12(R13)     RESTORE CALLER'S REGS
         BR    RETREG              RETURN TO CALLER
         SPACE 3
*
*   CONSTANTS FOR FORMAT LINE ROUTINE
*
         SPACE
FMTLNSA  DC    18F'0'              FORMAT LINE RTN SAVE AREA
FMTLNSV  DC    6F'0'               TEMP REG SAVE AREA
LN1MSK   DC    F'240'
LN2MSK   DC    F'15'
LN3MSK   DC    F'3'
FMTLNWK  DC    4F'0'
NXTLBL   DC    F'0'
NXTDTA   DC    F'0'
ASIDSV   DC    H'0'                SAVE AREA FOR ASID VALUE      Y02006
         DROP  BUFREG,R8,BASE1
GFRPATCH DC    13F'0'              PATCH AREA                    X01980
         EJECT
FMTPTRN  DSECT                     DSECT FOR LINE FORMAT ROUTINE
PTRNCD   DS    BL1
PTRNLN   DS    XL1
PTRNOFF1 DS    XL1
PTRNOFF2 DS    XL1
PTRNPTR  DS    F
         EJECT
AMDPRTSV CSECT
         SPACE
         USING TCBQSAVE,R15        SAVE TCB EP
TCBQSAVE STM   R14,R12,12(R13)
         LA    R14,8               ENTRY CODE 8
         B     BASETCB             GO ESTABLISH BASE
         DROP  R15
         USING TCBREMV,R15
TCBREMV  STM   R14,R12,12(R13)     REMOVE TCB EP
         LA    R14,4               ENTRY CODE 4
         B     BASETCB             GO ESTABLISH BASE
         DROP  R15
         USING TCBRTRV,R15
TCBRTRV  STM   R14,R12,12(R13)     RETRIEVE TCB EP
         SR    R14,R14             ENTRY CODE 0
         DROP  R15
         SPACE
BASETCB  BALR  BASE1,0             ESTABLISH REG 11 AS BASE
         USING *,BASE1
         LA    R3,TCBSVREG         SAVE AREA CHAINING
         ST    R13,TCBSVREG+4
         ST    R3,8(R13)
         LR    R13,R3
         SPACE
         USING COMMON,COMBASE
         SPACE
         B     *+4(R14)            BRANCH ON ENTRY CODE
         B     RTRV                0 - RETRIEVE
         B     REMV                4 - REMOVE
*                                  8 - SAVE (FALL THROUGH)
         SPACE
SAVE     LA    R2,0(R2)            ZERO HIGH ORDER BYTE
         LTR   R2,R2               IS ADDR ZERO
         BZ    TCBRET              YES--RETURN
         LA    R4,TCBLIST          ADDR OF TCB LIST POINTER
TCBSVLP  L     R3,0(R4)            TCB LIST PTR
         LTR   R3,R3               IS PTR ZERO
         BZ    TCBSAVE2            YES--SAVE TCB ADDR
         C     R2,4(R3)            COMPARE TCB ADDRESSES
         BE    TCBSAVE3            TCB ADDRESS ALREADY ON THE LIST
         LR    R4,R3
         B     TCBSVLP             LOOP THROUGH LIST
TCBSAVE2 LA    R0,8                8 BYTES FOR TCBLIST ENTRY
         GETMAIN R,LV=(0)
         MVC   0(4,R1),TCBLIST     PLACE NEW ENTRY
         ST    R1,TCBLIST          ON TOP OF LIST
         ST    R2,4(R1)            PLACE TCB ADDR IN NEW ENTRY
         B     TCBRET              RETURN TO CALLER
         SPACE
TCBSAVE3 LA    R15,4               LOAD RETURN CODE TO INDICATE TCB
*                                  ALREADY ON THE TCBLIST
         B     TCBRET1             RETURN TO CALLER
         SPACE 2
REMV     LA    R2,0(R2)            CLEAR HIGH ORDER BYTE
         LTR   R2,R2               IS REG 2 ZERO
         BC    7,TCBREMV1          NO--BR AROUND NEXT INSTRUCTION
         OI    ALTCBSW+1,X'F0'     SET SW TO REMOVE ALL TCB ENTRIES
*                                  FROM LIST
TCBREMV1 LA    R4,TCBLIST          ADDR OF TCB LIST PTR
TCBRMLP  L     R3,0(R4)            TCB LIST PTR
         LTR   R3,R3               IS IT ZERO
         BZ    TCBRET              YES--RETURN
         C     R2,4(R3)            ARE TCB ADDRESSES EQUAL
ALTCBSW  BE    TCBREMV2            YES--REMOVE ENTRY FROM LIST
         LR    R4,R3
         B     TCBRMLP             NO--LOOP
TCBREMV2 LA    R0,8                8 BYTES FOR TCB LIST ENTRY
         LR    R1,R3               AREA TO BE FREED TO R1
         MVC   0(4,R4),0(R3)       REMOVE ENTRY FROM LIST
         FREEMAIN R,LV=(0),A=(1)
         B     TCBRMLP             LOOP THROUGH ALL ENTRIES
         SPACE
TCBRET   SR    R15,R15             ZERO RETURN CODE
TCBRET1  NI    ALTCBSW+1,X'80'     RESET ALL TCB REMOVE SWITCH
         L     R13,4(R13)          POINT TO CALLER'S SAVE AREA
         L     R14,12(R13)
         LM    R0,R1,20(R13)       DON'T RESTORE REG 2 - TCB ADDR OR
         LM    R3,R12,32(R13)      REG 15 - RETURN CODE
         BR    RETREG              RETURN TO CALLING PROGRAM
         SPACE
RTRV     LTR   R2,R2               IS REG 2 ZERO
         BCR   8,RETREG            YES--RETURN
         LA    R4,TCBLIST          ADDR OF TCBLIST PTR
TCBRTVLP L     R3,0(R4)            ADDR OF TCBLIST ENTRY
         LTR   R3,R3               IS IT ZERO
         BZ    TCBRTRV1            YES--ZERO R2 AND RETURN
         LR    R4,R3               STEP TO NEXT ENTRY
         BCT   R2,TCBRTVLP         LOOP FOR COUNT IN R2
         L     R2,4(R3)            LOAD TCB ADDR INTO R2
         B     TCBRET              AND RETURN
TCBRTRV1 SR    R2,R2               ZERO R2 TO INDICATE NO MORE TCB
*                                  ADDRESSES IN LIST
         B     TCBRET              RETURN
         SPACE 3
*****    TCB ROUTINE SAVE AREA
         SPACE
TCBSVREG DC    18F'0'
TSVPATCH DC   13F'0'               PATCH AREA                    X01980
         SPACE
         DROP  BASE1,COMBASE
         EJECT
AMDPRSTP CSECT
         SPACE
STPWTOR  EQU   128                 WTOR ISSUED INDICATOR
STPRECUR EQU   64                  RECURSION THROUGH STOP ROUTINE
         USING *,R15
         TM    STOPFLGS,STPRECUR   TEST FOR RECURSION THROUGH STOP
*                                  ROUTINE - STOP ISSUING BRWRITE
*                                  WHICH THEN CALLS STOP
         BCR   1,RETREG            RETURN IF SO
         SPACE
         STM   R14,R12,12(R13)     SAVE CALLER'S REGS
         BALR  BASE1,0             BASE STOP ROUTINE ON REG 11
         USING *,BASE1
         LA    R2,STOPSAVE         SAVE AREA CHAINING
         ST    R13,STOPSAVE+4
         ST    R2,8(R13)
         LR    R13,R2              ENTRY COMPLETE
         SPACE
         USING COMMON,COMBASE
         USING OUTBUF,BUFREG       BASE OUTPUT LINE DSECT
         SPACE
         TM    STOPFLGS,STPWTOR    HAS WTOR BEEN ISSUED
         BZ    STOPWTOR            NO--GO ISSUE IT
         TM    STOPECB,CMPLT       IS IT COMPLETE
         BZ    STOPRET             BRANCH TO RETURN IF NOT
         NI    STOPFLGS,XFF-STPWTOR RESET WTOR SW
         TR    STOPRPLY(8),CAPTABL TRANSLATE SMALL LETTERS TO     M3993
*                                  CAPITALS                       M3993
         BRPRTMSG  STOPRPLY,8      PRINT REPLY IN MESSAGE LOG
         CLC   STOPRPLY(4),STOP    WAS REPLY 'STOP'
         BNE   STOPWTOR            NO--GO REISSUE WTOR AND RETURN
         L     R7,AOUTDCB          LOAD ADDR OF OUTDCB FOR BASE
         USING OUTDCB,R7
         TM    OUTDCB+DCBOFLGS,DCBOPEN IS OUTDCB OPEN
         DROP  R7
         BZ    STPRT1              BR IF NOT
         OI    STOPFLGS,STPRECUR   INDICATE RECURSION
         BRWRITE 1                 SPACE A LINE
         L     BUFREG,CURBUF       RESTORE BUFFER ADDR
         MVC   ADDR(39),STOPMSG    MOVE MESSAGE TO BUFFR
         BRWRITE 1                 PRINT STOP MESSAGE
         NI    STOPFLGS,XFF-STPRECUR  RESET RECURSION SWITCH
*                                  PRINT DUMP TERMINATED MSG ON
STPRT1   BRPRTMSG  STOPMSG,39      SYSPRINT
         SR    R2,R2               INDICATE REMOVAL OF ALL TCBS
         L     R15,ATCBREMV        POINT TO TCB REMOVE ROUTINE
         BALR  RETREG,R15          LINK TO IT
         L     R15,STOPEXIT        POINT TO LATEST STOP ROUTINE IN
*                                  CHAIN
         BR    R15                 GO TO IT TO CLOSE OUT
         SPACE 2
***********************************************************************
*                                                                     *
*   ISSUE WTOR TO ENABLE OPERATOR TO TERMINATE DUMP                   *
*                                                                     *
***********************************************************************
         SPACE
STOPWTOR MVI   STOPECB,0           CLEAR ECB
         MVI   STOPRPLY,X'40'      BLANK REPLY BUFFER
         MVC   STOPRPLY+1(7),STOPRPLY
         CNOP  0,4
*                                                                S21014
STPWTORM WTOR  'AMD156I REPLY WITH STOP TO TERMINATE CURRENT FUNCTION',*
               STOPRPLY,8,STOPECB,ROUTCDE=(1),DESC=2
         BRPRTMSG  STPWTORM+16,53
         OI    STOPFLGS,STPWTOR    INDICATE WTOR DONE
         SPACE
STOPRET  L     R13,4(R13)          POINT TO CALLER'S SAVE AREA
         LM    R14,R12,12(R13)     RESTORE CALLER'S REGS
         BR    RETREG              RETURN TO BRRWRITE
         SPACE 2
*   CONSTANTS FOR STOPROUT
         SPACE
STOPSAVE DC    18F'0'              STOP ROUTINE SAVE AREA
STOPECB  DC    F'0'
STOPRPLY DC    CL8' '
STOPMSG  DC    C'AMD172I FUNCTION TERMINATED BY OPERATOR'        S21014
STOPFLGS DC    X'00'
STPPATCH DC    13F'0'              PATCH AREA                    X01980
         SPACE
         DROP  BASE1,BUFREG,COMBASE
         END   AMDPRCOM
