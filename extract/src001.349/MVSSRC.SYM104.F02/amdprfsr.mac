         GBLB  &PARMLST
AMDPRFSR START
         TITLE 'AMDPRFSR - FORMAT SERVICE ROUTINE'
***********************************************************************
*                                                                     *
* A 713100,718500,730900-730920,738500-738560,754900            SA55854
* C 713000,738400                                               SA55854
* C 243800                                                       YM1468
* A 557220,569100-569120,590900-591192,593100-593120            SA53335
* A 594599-597599,626700,636100-636120                          SA53335
* C 556800,556600,557000-557200,614000                          SA53335
* D 591000,594200                                               SA53335
* A 188210,200210,200220,243210-243230,269610-270010           Y01980 *
* A 322722-322728,355000-355470,355810,358010,388610           Y01980 *
* A 389410,389810,390410,390420,391000-391030,403410           Y01980 *
* A 415010,415020,480210,790810,829010,415810,419010           Y01980 *
* A 419020,479100,485610,580010-580040,633010,702402           Y01980 *
* A 681022-681048,702404,391040-391110,485620-485640           Y01980 *
* A 374210                                                     Y01980 *
* C 243240,303000,355800,356800,358000,358200,394000           Y01980 *
* C 399600,402200,403600,419200,480800,481600,482800           Y01980 *
* C 483200,546600,550400,791800,792600,810600,820610           Y01980 *
* C 820800,825210,828400-829000,829200,831200,419200           Y01980 *
* C 681010,681049,391200                                       Y01980 *
*                                                                     *
*                                                                     *
*          *** AMDPRFSR - FORMAT SERVICE ROUTINE ***                  *
*                                                                     *
* STATUS--OS/VS2 RELEASE 1.0                                          *
*                                                                     *
* FUNCTION--                                                          *
*    THIS ROUTINE BUILDS A LIST OF TCB ADDRESSES THAT REPRESENT       *
*    THE FAMILY TREE OF EACH TCB ON THE TCBLIST AS BUILT BY AMDPRFUR. *
*    IT THEN LINKS TO AMDPRFSB, AMDPRFMS, AMDPRFLD, AMDPRFDB, AND     *
*    AMDPRFIO TO FORMAT AND PRINT THE CONTROL BLOCKS CHAINED OFF      *
*    OF EACH TCB.  EACH TCB THAT IS ALSO FORMATTED IS ENTERED IN      *
*    THE TCB SUMMARY TABLE.                                           *
*    INTRODUCTORY COMMENTS FOR EACH CONTROL BLOCK FORMATTING          *
*    ROUTINE PRECEEDS THE RESPECTIVE CSECT.                           *
*                                                                     *
* ENTRY POINTS--                                                      *
*    AMDPRFSR IS THE ONLY ENTRY POINT.  CONTROL IS RECEIVED FROM      *
*    AMDPRFXT AFTER A 'FORMAT' CONTROL STATEMENT IS READ, FROM        *
*    AMDPRPJB AFTER A 'PRINT JOBNAME', FROM AMDPRPDR AFTER A 'PRINT   *
*    F03', FROM AMDPRPCR AFTER A 'PRINT CURRENT', OR FROM AMDPRTSO    *
*    AFTER A 'TSO SYSTEM=YES', 'TSO USER=PRINT', OR 'TSO USER=FORMAT' *
*    CONTROL STATEMENT IS READ.  STANDARD LINKAGE IS USED.            *
*                                                                     *
* INPUTS--                                                            *
*         REGISTER 0 - TERMINAL JOB IDENTIFICATION(TJID)              *
*         REGISTER 12 - ADDRESS OF COMMON CSECT                       *
*         FMTSW - 0 FOR INITIALIZATION (FIRST TIME ENTERED)           *
*                 1 FOR FORMATTING CONTROL BLOCKS                     *
*         TCBLIST - LIST OF TCB'S WHOSE FAMILIES ARE TO BE FORMATTED  *
*                                                                     *
* OUTPUT--                                                            *
*    WRITES FIRST LINE CONTAINING JOBNAME, STEPNAME, AND PROCSTEPNAME.*
*    WRITES ERROR MESSAGE 'ERROR IN TCB CHAIN'.                       *
* EXTERNAL REFERENCES--                                               *
*         GETMAIN - TO OBTAIN STORAGE FOR TABLE OF TCB'S THAT HAVE    *
*                   BEEN FORMATTED.                                   *
*         FREEMAIN - TO FREE ABOVE STORAGE.                           *
*         BRREAD - TO OBTAIN DATA FROM THE INPUT DUMP.                *
*         BRWRITE - TO WRITE DATA TO THE 'PRINTER' DATA SET.          *
*         AMDPRFTC - TO FORMAT THE TCB                                *
*         AMDPRFRB - TO FORMAT THE RB CHAIN                           *
*         AMDPRFMS - TO FORMAT THE MSS                                *
*         AMDPRFLD - TO FORMAT THE LOAD LIST                          *
*         AMDPRFDB - TO FORMAT THE DEB CHAIN                          *
*         AMDPRFIO - TO FORMAT THE TIOT                               *
*         AMDPRTSM - TO OBTAIN STORAGE FOR THE TCB SUMMARY TABLE      *
*         AMDPRTSV - FROM ADDRESSES IN COMMON, THIS CSECT IS USED     *
*                    TO RETRIEVE AND REMOVE TCB'S FROM THE TCBLIST    *
*         ADRCNVT - FROM ADDRESS IN COMMON, TO CONVERT 3 BYTES TO     *
*                   PRINTABLE HEX.                                    *
*                                                                     *
* EXITS,NORMAL--                                                      *
*    RETURN TO CALLER THROUGH STANDARD LINKAGE UNLESS 'STOP' HAS      *
*    BEEN ENTERED BY OPERATOR IN WHICH CASE CONTROL RETURNS TO        *
*    STOP ROUTINE WITHOUT RESTORING REGISTERS.                        *
*                                                                     *
* EXITS,ERROR--                                                       *
*    NONE--PROCESSING CONTINUES AFTER AN ERROR MESSAGE IS PRINTED     *
*                                                                     *
* TABLES/WORK AREAS--                                                 *
*    TABLE OF FORMATTED TCB'S.  TABLE CONTAINS ADDRESS OF EACH        *
*    TCB AS IT IS FORMATTED.  THIS IS TO AVOID FORMATTING THE SAME    *
*    TCB TWICE.                                                       *
*    'FMTEDP' CONTAINS ADDRESS OF FIRST FORMAT TABLE.                 *
*    TABLE FORMAT FOLLOWS:                                            *
*         ******************************                              *
*         * PTR TO NEXT TABLE OR ZEROS *                              *
*         ******************************                              *
*         * COUNT OF TCB'S IN TABLE    *                              *
*         ******************************                              *
*         * ADDRESS OF TCB FORMATTED   *                              *
*         * (UP TO 10 TCB ADDRESSES)   *                              *
*         ******************************                              *
*                                                                     *
*   ALSO A TCBLIST IS PASSED TO THIS MODULE THROUGH AN ADDRESS IN     *
*   COMMON. A SISTER TCBLIST IS BUILT BY THIS MODULE IN THE SAME      *
*   FORMAT AS THE TCBLIST.  THIS FORMAT IS AS FOLLOWS:                *
*         ************************************                        *
*         * PTR TO NEXT TCB ELEMENT OR ZEROS *                        *
*         ************************************                        *
*         * ADDRESS OF TCB                   *                        *
*         ************************************                        *
*                                                                     *
* ATTRIBUTES-- REUSABLE                                               *
*                                                                     *
* CHARACTER CODE DEPENDENCY-- NONE                                    *
*                                                                     *
* NOTES--                                                             *
*   BRREAD ERROR HANDLER:  IF A TCB CANNOT BE READ FROM THE INPUT     *
*   DUMP, A MESSAGE IS PRINTED, AND PROCESSING CONTINUES WITH THE     *
*   NEXT TCB ON THE DAUGHTER OR SISTER CHAIN.                         *
*                                                                     *
***********************************************************************
*/*AMDPRFSR: CHART (SEQ) */
*/*HEADER
*/*AMDPRFSR - FORMAT SERVICE ROUTINE FLOWCHARTS
*/*                                                      PAGE #     */
*/*AMDPRFSR: E START */
*/* P SAVE REGISTERS */
*/* P GET ADDR OF OUTPUT BUFFER */
*/* D  (YES,FMTINIT,NO,) INIT. PASS */
*/* P PUT ADDR OF FSR AND SUMMARY RTNS IN COMMON */
*/* M (,FMTDONE1) INDICATE INIT. PASS DONE */
*/*FMTINIT: M RESET SAVE TCB SWITCH FOR TSO PASS */
*/*FMTINT1: P SAVE TJID VALUE */
*/* M RESET FMTSW - INIT = 0 */
*/* P SET UP ERROR AND STOP ROUTINE ADDRS */
*/* S FMTCBPG: PURGE FORMAT TCB LISTS */
*/* P COMPUTE COUNT FOR TCB'S ON TCBLIST & POINT TO LAST ON LIST */
*/*FORMAT1: P SAVE TCB COUNT */
*/*FMTLOOP2: D (YES,FMTDONE,NO,) TCB COUNT = 0 */
*/* P DECREASE TCB COUNT BY ONE */
*/* S TCBRTRV: GET A TCB ADDR STARTING WITH LAST ON LIST */
*/*FAMTREE4: P SAVE ORIGINAL TCB ADDR */
*/* D (NO,TCBTOP,YES,) TJID = 0 */
*/* D (NO,TCBTOP,YES,) ARE ALL TCBS IN DUMP */
*/* D (NO,FMTLOOP1,YES,) IS IT MASTER SCHEDULER */
*/*FAMTREE5: S (,FAMDONE) FMTCBSAV: PUT TCB ON FORMAT TCBLIST */
*/*FMTLOOP1: S BRREAD: GET ADDR OF MOTHER TCB */
*/* D (YES,TCBTOP,NO,) PTR TO MOTHER = 0 */
*/* D (YES,TCBTOP,NO,) IS IT MASTER SCHEDULER */
*/* P (,FMTLOOP1) SET UP TO GET NEXT MOTHER */
*/*TCBTOP: P SAVE PTR TO TOP TCB IN TREE */
*/*FAMLOOP1: S BRREAD: GET ADDR OF DAUGHTER TCB */
*/* S FMTCBSAV: SAVE THIS TCB ON FORMAT TCBLIST */
*/* D (YES,FAMTREE1,NO,) TCB IN R2 = TOPTCB */
*/* S BRREAD: GET ADDR OF SISTER TCB */
*/* S SISSAVE: SAVE ADDR OF SISTER ON SISLIST */
*/*FAMTREE1: D (NO,FAMTREE2,YES,) WAS THERE A DAUGHTER */
*/* P (,FAMLOOP1) PUT DAUGHTER ADDR IN R2 */
*/*FAMTREE2: S SISGET: GET LAST SISTER TCB SAVED */
*/* D (NO,FAMDONE,YES,FAMLOOP1) WERE THERE ANY */
*/*FAMDONE: S BRREAD: GET TIOT PTR FROM ORIGINAL TCB */
*/* D (YES,FAMDONE1,NO,) IS TIOT PTR = 0 */
*/* D (YES,FAMDONE1,NO,) IS TIOT PTR > MACHINE ADDR */
*/* S BRREAD: GET THE JOBNAME FROM TIOT */
*/* P MOVE JOBNAME TO TITLE */
*/* S BRREAD: GET THE STEP NAME FROM TIOT */
*/* P MOVE STEP NAME TO TITLE */
*/* S BRREAD: GET THE PROC STEP NAME FROM TIOT */
*/* P MOVE PROC STEP NAME TO TITLE */
*/*FAMDONE2: P GET COUNT OF TCB'S IN THE FAMILY */
*/* P GET TJID FOR SUMMARY ROUTINE */
*/* S TCBSMGT: GET CORE AND BUILD TCB SUMMARY TABLE */
*/*FMTPRTLP: S FMTGET: GET A TCB ADDR */
*/* D (YES,FMTCBC,NO,) WAS THERE ONE */
*/* N (,FMTLOOP2) END OF 1 FAMILY; GET NEXT TCB ADDR ON TCBLIST */
*/*FAMDONE1: P (,FAMDONE2) BLANK OUT JOB,STEP AND PROC STEP NAMES IN
*/*THE TITLE */
*/*FMTCBC: D (NO,FMTCBS1,YES,) CORE FOR FORMAT TCB TABLE GOTTEN */
*/*FMTCBC1: D (YES,FMTCBC5,NO,) FORMATTED SWITCH ON */
*/* P INITIALIZE FIRST TCB TABLE */
*/* D (YES,FMTCBS,NO,) ONLY ONE TABLE */
*/*FMTCBC2: L FREE STORAGE FOR TABLE */
*/* D (NO,FMTCBC2,YES,FMTCBS) ALL DONE */
*/*FMTCBC5: D (YES,FMTCBS,NO,) IS TABLE PTR = 0 */
*/* D (YES,FMTCBC3,NO,) IS CNT OF TCB IN THIS TABLE = 0 */
*/*FMTCBC4: D (YES,FMTCBR0,NO,) DUPLICATE TCB ADDR IN TABLE */
*/* P UPDATE TCB COMPARE ADDRESS */
*/* D (NO,FMTCBC4,YES,) ALL TCB'S COMPARED */
*/*FMTCBC3: P (,FMTCBC5) STEP TO NEXT TABLE */
*/*FMTCBR0: M (,FMTPRTLP) TURN ON FORMATTED SWITCH */
*/*FMTCBS: P GET ADDR OF TABLE PTR */
*/*FMTCBSLP: D (YES,FMTCBS1,NO,) ADDR OF TCB ADDR TABLE = 0 */
*/* D (NO,FMTCBS2,YES,) CNT OF TCB IN TABLE = 10 (FULL) */
*/* P (,FMTCBSLP) STEP TO NEXT TABLE */
*/*FMTCBS1: L GET STORAGE FOR NEW TABLE */
*/* P ADD NEW TABLE TO CHAIN AND INIT IT */
*/*FMTCBS2: P CALCULATE NEXT TABLE SLOT USING COUNT */
*/* P PUT TCB ADDR INTO NEXT TABLE SLOT */
*/* P ADD ONE TO TCB ADDR COUNT */
*/* P PUT NEW COUNT IN TABLE */
*/* M (,FMTPRTL1) TURN ON FORMATTED SWITCH */
*/*FMTPRTL1: N THIS RTN CALLS OTHER RTNS TO FORMAT TCB AND ITS ASSOC.
*/*BLOCKS */
*/* D (NO,FMTPRTL2,YES,) SKIP SWITCH ON */
*/* S BRWRITE: SKIP TO NEW PAGE */
*/*FMTPRTL2: M TURN ON SKIP SWITCH */
*/* P MOVE TCB TITLE TO BUFFER */
*/* S BRWRITE: PRINT THE TITLE */
*/* S FMTSUMS: ADD TCB TO SUMMARY TABLE */
*/* P GET TJID OF TCB */
*/* S TCBPRNT: PRINT THE TCB */
*/* D (NO,FMTPRTLP,YES,) RETURN CODE = 0 */
*/* S RBPRNT: PRINT THE RB CHAIN */
*/* S MSSPRNT: PRINT MAIN STORAGE BLOCKS FOR TCB */
*/* S LOADPRT: PRINT LOAD LIST */
*/* S DEBPRNT: PRINT DEBS */
*/* S TIOTPRT: PRINT TIOT */
*/* N (,FMTPRTLP) LOOP  FOR ALL TCB'S ON FORMAT TCBLIST */
*/*FMTDONE: P RESTORE CALLER'S ERROR RTN ADDRESS */
*/* P RESTORE CALLER'S STOP RTN ADDR */
*/* S FMTCBPG: FREE TCBLISTS */
*/*FMTDONE1: R RETURN */
*/*FMTERR1: N ROUTINE FOR ERROR IN TCB CHAIN */
*/* P SET UP ADDRESSABILITY */
*/* D (YES,,NO,%Z) ERR BUILDING SUMMARY INFO */
*/* R RETURN VIA REG9 */
*/*%Z: D (YES,,NO,FMTERR1A) WAS ERROR READING TIOT */
*/* P (,FAMDONE2) MOVE 'UNKNOWN' TO JOBNAME */
*/*FMTERR1A: S BRWRITE: SPACE A LINE */
*/* S ADRCNVT: CONVERT TCB ADDR TO PRINTABLE HEX */
*/* P MOVE ERROR MSG TO BUFFER */
*/* M TURN OFF ERROR SWITCHES */
*/* S (,FAMTREE1) BRWRITE: WRITE THE ERROR MSG */
*/*FMTCBSAV: N RTN SAVE ADDRS IN R2 ON FORMAT TCBLIST */
*/* D (YES,%A,NO,) ADDR IN R2 */
*/* R RETURN VIA R9 */
*/*%A: P SAVE REAL TCBLIST PTR */
*/* P MOVE IN FORMAT TCBLIST PTR */
*/* S TCBSAVE: SAVE TCB ADDR IN R2 ON FORMAT TCBLIST */
*/* P RESTORE FORMAT TCBLIST PTR & REAL TCBLIST PTR */
*/* D (YES,%B,NO,) RETURN CODE = 0 */
*/* R RETURN VIA R9 */
*/*%B: P ADD 1 TO CNT OF TCB ADDR ON FORMAT TCBLIST */
*/* R RETURN VIA R9 */
*/*FMTGET: D (NO,%C,YES,) CNT FOR TCB ON FORMAT TCBLIST1= 0 */
*/*FMTGET1: P ZERO OUT R2 */
*/* R RETURN VIA R9 */
*/*%C: P SAVE TCBLIST PTR */
*/* P TCBLIST PTR = FORMAT TCBLIST PTR */
*/*FMTGET3: S TCBPTRV: GET A TCB ADDR */
*/* D (YES,FMTGET2,NO,) R2 = 0 */
*/* S TCBREMV: REMOVE THIS TCB ADDR FROM LIST */
*/* P DECREMENT COUNT BY 1 */
*/*FMTGET4: P SAVE FORMAT TCBLIST PTR */
*/* P RESTORE TCB LIST PTR */
*/* R RETURN VIA R9 */
*/*FMTGET2: P REDUCE COUNT BY ONE */
*/* D (YES,FMTGET3,NO,) COUNT > 0 */
*/* P (,FMTGET4) SET R2 = 0; NO MORE TCBS ON LIST */
*/*FMTSTP: P SET UP ADDRESSABILITY */
*/* P SET RETURN ADDR TO FMSTPOUT */
*/*FMTCBPG: P FTCBSAV = TCBLIST; TCBLIST = FTCBLIST */
*/* S TCBREMV: REMOVE ALL TCBS FROM LIST */
*/* P FTCBLIST = TCBLIST; TCBLIST = SISLIST */
*/* R RETURN VIA R9 */
*/*FMSTPOUT: P RESTORE ERROR HANDLER'S ADDR */
*/* P PUT CALLER'S STOP RTN ADDR IN COMMON */
*/* R GO TO CALLER'S STOP RTN */
*/*SISSAVE: P SAVE REAL TCBLIST PTR */
*/* P TCBLIST = SISLIST */
*/* S TCBSAVE: PUT SISTER ADDR ON SISTER TCBLIST */
*/* P SISLIST = TCBLIST */
*/* P TCBLIST = FTCBSAV */
*/* R RETURN VIA R9 */
*/*SISGET: P FTCBSAV = TCBLIST; TCBLIST = SISLIST */
*/* S TCBRTRV: GET A TCB ADDR */
*/* D (NO,SISGET1,YES,) WAS THERE ONE */
*/* S TCBREMV: REMOVE TCB FROM THE LIST */
*/*SISGET1: P SISLIST = TCBLIST; TCBLIST = FTCBSAV */
*/* R RETURN VIA R9 */
*/*FMTSUMS: P GET ADDR OF TCB SUMMARY TABLE PTRS */
*/* P POINT TO FIRST TABLE */
*/* D (NO,%D,YES,) CNT FOR TCB IN FAMILY = 0 */
*/* R RETURN VIA R9 */
*/*%D: P POINT TO FIRST TCB IN TABLE */
*/*FMTSUM2: D (YES,FMTSUM1,NO,) TCB ENTRY = 0 */
*/* P BUMP TO NEXT TCB ENTRY */
*/* D (NO,FMTSUM2,YES,) END OF TABLE */
*/*%E: R RETURN VIA R9 */
*/*FMTSUM1: P PUT TCB, CMP, NTC, OTC, LTC, &TID IN SUMMARY TABLE */
*/* P (,%E) MOVE PAGE # TO TABLE */
*/*AMDPRFTC: E TCBPRNT */
*/* P SET UP ADDRESSABILITY */
*/* P PUT ERROR RTN ADDR IN COMMON */
*/* M TURN OFF THE TCBPRNT SWITCH */
*/*TCBPRNTA: D (NO,TCBPRNT5,YES,) TJID = 0 */
*/* D (NO,TCBPRNT5,YES,) IS TCB CURRENT TCB */
*/* S BRWRITE: WRITE CURRENT TASK MSG */
*/*TCBPRNT5: P PUT TCB ADDR IN FORMAT PATTERN */
*/* S TCBFMPR: FORMAT AND PRINT FIRST LINE OF TCB */
*/*TCBPRNT1: S TCBFMPR: FORMAT AND PRINT LINE 7 OF TCB */
*/* S TCBFMPR: FORMAT AND PRINT LINE 8 OF TCB */
*/* S TCBFMPR: FORMAT AND PRINT LINE 9 OF TCB */
*/* S TCBFMPR: FORMAT AND PRINT LINE 10 OF TCB */
*/* S BRREAD: GET ADDRESS OF AOS/1-AOS/2 TCB EXTENSION */
*/* S (,TCBPRNTC) TCBFMPR: FORMAT AND PRINT LINE 1 OF AOS EXTENSION */
*/*TCBPRTV: N ROUTINE TO FORMAT AND PRINT AOS/2 TCB */
*/* S TCBFMPR: FORMAT AND PRINT LINE 2 OF TCB */
*/* S TCBPTRG: FORMAT AND PRINT REGS */
*/* S TCBFMPR: FORMAT AND PRINT LINE 5 OF TCB */
*/* S (,TCBPRNT1) TCBFMPR: FORMAT AND PRINT LINE 6 OF TCB */
*/*TCBFMPR: S FMTLINE: FORMAT THE LINE FOR PRINTING */
*/* S BRWRITE: PRINT THE LINE */
*/* R RETURN VIA R9 */
*/*TCBPRNTC: S BRREAD: GET FIFTH FLAG BYTE OF TCB */
*/* D (NO,TCBPRNT8,YES,) TASK TERMINATION FLAG ON */
*/* S BRWRITE: SPACE A LINE */
*/* S BRWRITE: WRITE TERMINATED MSG */
*/* P (,TCBPRDN1) SET RETURN CODE = 4 */
*/*TCBPRNT8: S BRWRITE: SPACE 2 LINES */
*/*TCBPRDN: P SET RETURN CODE = 0 */
*/*TCBPRDN1: P RESTORE PREVIOUS ERROR RTN ADDR */
*/* P RESTORE CALLER'S REGS */
*/* R RETURN */
*/*TCBPRER: N ROUTINE FOR FORMAT OR I/O ERROR */
*/* P SET UP ADDRESSABILITY */
*/* S (,TCBPRDN) BRWRITE: WRITE TCB FORMAT ERROR MSG */
*/*TCBPTRG: N ROUTINE TO PRINT REGS FOR TCBPRNT & RBPRNT RTNS */
*/* P SET UP ADDRESSABILITY */
*/* D (NO,TCBPTRG4,YES,) PCP/MFT SYSTEM */
*/* P (,TCBPTRG5) MOVE PCP/MFT REG 10 - 1 HEADING TO BUFFER */
*/*TCBPTRG4: P MOVE AOS/2 REG HEADING 0 - 7 TO BUFFER */
*/*TCBPTRG5: P LOAD OUTER LOOP COUNT */
*/*TCBPTRG1: P LOAD WHERE-TO-PUT-IT ADDR & INNER LOOP CNT */
*/*TCBPTRG2: P LOAD ADDR OF REGS */
*/* S BRREAD: GET THE REGS */
*/* S WRDCNVT: CONVERT REG TO PRINTABLE HEX */
*/* P UPDATE WORD INDEX & WHERE-TO-PUT-IT ADDR */
*/* D (NO,TCBPTRG2,YES,) 8 REGS DONE */
*/* S BRWRITE: PRINT ALINE */
*/* D (NO,TCBPTRG3,YES,) 2 LINES DONE */
*/* R RETURN */
*/*TCBPTRG3: D (NO,TCBPTRG6,YES,) PCP/MFT */
*/* P MOVE IN PCP/MFT REGS HEADING 2 - 9 */
*/* P (,TCBPTRG1) TURN OFF PCP/MFT SWITCH */
*/*TCBPTRG6: P (,TCBPTRG1) MOVE IN AOS/2 HEADING 8 - 15 */
*/*AMDPRFRB: E RBPRNT */
*/* P SET UP ADDRESSABILITY */
*/* P SET UP ERROR AND STOP ROUTINE ADDRS */
*/* S RBPRGE: PURGE ALL RB ADDRS ON RBLIST */
*/* P POINT TO RB ADDR IN TCB */
*/*RBLOOP1: S BRREAD: GET NEXT RB ADDR */
*/* D (YES,RBPRNT1,NO,) IS RB ADDR = 0 */
*/* D (YES,RBPRNT1,NO,) IS NEXT RB ADDR = TCB */
*/* S RBSAVE: SAVE RB ADDR ON RBLIST */
*/* P (,RBLOOP1) BUMP PTR TO NEXT RB */
*/*RBPRNT1: P MOVE 'ACTIVE RBS' HEADING TO BUFFER */
*/* S BRWRITE: WRITE THE HEADING */
*/* S RBGET: GET NEXT RB */
*/* D (NO,RBDONE,YES,) WAS THERE ONE */
*/*RBPRNT2: S BRREAD: GET RB SIZE/STATUS WORD */
*/* S ADRCNVT: CONVERT RB ADDR TO PRINTABLE HEX */
*/* D (SVRB,RBSVRB,IRB,RBIRB,PRB,) BR TYPE = ? */
*/* P (,RBPRNT4) GET ADDR OF PRB INDEX */
*/*RBSVRB: D (YES,RBTSVRB,NO,) TRANSIENT SVRB */
*/* P (,RBPRNT4) GET ADDR OF RESIDENT SVRB INDEX */
*/*RBTSVRB: P  (,RBPRNT4) GET ADDR OF TRANSIENT SVRB INDEX */
*/*RBIRB: D (YES,RBSIRB,NO,) SIRB */
*/* D (YES,RBTIRB,NO,) TIRB */
*/* P (,RBPRNT4) GET ADDR OF IRB INDEX */
*/*RBTIRB: P (,RBPRNT4) GET ADDR OF TIRB INDEX */
*/*RBSIRB: P GET ADDR OF SIRB INDEX */
*/*RBPRNT4: P GET ADDR OF BEGIN FIELD IN RB PREFIX */
*/* P SET UP FOR FORMAT ROUTINE */
*/* S FMTLINE: FORMAT THE LINE */
*/* S BRWRITE: PRINT THE LINE */
*/* P MOVE 'RESV', 'NM', OR 'FL-CDE'  TO BUFFER */
*/* S BRREAD: GET FIRST FIELD OF RB */
*/* S WRDCNVT: CONVERT THE FIRST FIELD OF RB */
*/* P MOVE 'APSW' TO BUFFER */
*/* S BRREAD: GET THE DATA FOR 'APSW' */
*/* S WRDCNVT: CONVERT THE DATA TO PRINTABLE HEX */
*/* P MOVE 'SZ-STAB' TO BUFFER */
*/* S BRREAD: GET THE DATA FOR THAT FIELD */
*/* S WRDCNVT: CONVERT THE DATA */
*/* P MOVE 'FL-CDE', 'LPDE', 'RESV', OR 'EPA' TO BUFFER */
*/* S BRREAD: GET THE DATA FOR THE FIELD */
*/* S WRDCNVT: CONVERT THE DATA */
*/* P MOVE 'PSW' TO BUFFER */
*/* S BRREAD: GET DATA FOR 1ST HALF OF PSW */
*/* S WRDCNVT: CONVERT THE DATA */
*/* S BRREAD: GET 2ND HALF OF PSW */
*/* S WRDCNVT: CONVERT THE PSW DATA */
*/* S BRWRITE: WRITE THE FIRST LINE OF RB */
*/* P MOVE 'Q' TO BUFFER */
*/* S BRREAD: GET DATA FOR 'Q' */
*/* S WRDCNVT: CONVERT THE 'Q' DATA */
*/* P MOVE 'WT-LNK' TO BUFFER */
*/* S BRREAD: GET DATA FOR 'WT-LNK' */
*/* S WRDCNVT: CONVERT THE DATA */
*/* D (SVRB,PRBPRT,PRB,PRBPRT,IRB,) TEST RB TYPE */
*/* D (YES,RBPRNT3,NO,) IRB ? */
*/* S BRREAD: GET NAME FIELD OF SIRB */
*/* P MOVE 'NM' TOBUFFER */
*/* P (,RBPRNT3) MOVE RTN NAME FROM SIRB TO BUFFER */
*/*RBPRNT3: S TCBPTRG: FORMAT AND PRINT REGS IN THE RB */
*/* D (NO,RBPRTDN,YES,) DOES RB HAVE EXT. SAVE AREA */
*/* S (,RBPRTDN) EXTSAPT: PRINT EXTENDED SAVE AREA */
*/*PRBPRT: N RTN TO COMPLETE THE FORMAT FOR PRBS & SVRBS */
*/* S BRREAD: GET CDE/LPDE PTR FROM RB */
*/* D (YES,RBPRT3,NO,) IS CDE/LPDE PTR = 0 */
*/* S BRREAD: GET FIRST FIELD OF CDE/LPDE */
*/* P SAVE CDE/LPDE ATTRIBUTES */
*/* S BRREAD: GET NAME FIELD OF CDE/LPDE */
*/* P MOVE 'NM' TO BUFFER */
*/* P MOVE NAME FROM CDE/LPDE TO BUFFER */
*/* S BRREAD: GET ENTRY POINT FROM CDE/LPDE */
*/* P MOVE 'EPA' TO BUFFER */
*/* S ADRCNVT: CONVERT ENTRY POINT ADDR TO PRINTABLE HEX */
*/* D (NO,CDE,YES,RBPRNT3) TRANS. SVRB */
*/*CDE: S BRREAD: GET PTR TO MAJOR CDE OR EXTENT LIST */
*/* P SAVE THE PTR */
*/* D (YES,RBPRT1,NO,) IS CURRENT CDE A MINOR */
*/*RBPRT2: P MOVE 'STA' TO BUFFER */
*/* S BRREAD: GET STARTING ADDR FROM MAJOR CDE */
*/* S ADRCNVT: CONVERT THE STARTING ADDRESS */
*/* P MOVE 'LN' TO BUFFER */
*/* S BRREAD: GET SIZE OF MODULE FROM CDE */
*/* S ADRCNVT: CONVERT SIZE */
*/*NOMAJOR: P MOVE 'ATR1' TO BUFFER */
*/* S HEXCNVT: CONVERT ATTRIBUTE FIELD */
*/*RBPRT3: D (YES,RBPRNT3,NO,) SVRB */
*/* S (,RBPRTDN) BRWRITE: PRINT LAST LINE OF RB */
*/*RBPRT1: N RTN TO GET EXTENT LIST PTR FROM MAJOR CDE */
*/* S BRREAD: GET XTENT LIST PTR FROM CDE */
*/* P (,RBPRT2) SAVE XTENT LIST PTR */
*/*RBFMPR: S FMTLINE: FORMAT THE LINE FOR PRINTING */
*/* S BRWRITE: PRINT THE LINE */
*/* R RETURN VIA R9 */
*/*RBPRTDN: N DONE PRINTING RB... LOOK FOR ANOTHER */
*/* S RBGET: GET NEXT RB ADDR */
*/* D (NO,RBDONE,YES,) WAS THERE ONE */
*/* S (,RBPRNT2) BRWRITE: SPACE 1 LINE */
*/*RBDONE: N DONE WITH RB CHAIN ... RETURN TO FORMAT RTN */
*/* S BRWRITE: SPACE 2 LINES */
*/* P RESTORE CALLER'S STOP RTN ADDR */
*/* P RESTORE REGS */
*/* R RETURN */
*/*TOOMANY: N MORE THAN 50 RBS ON RB CHAIN */
*/* P MOVE INFINITE LOOP MSG TO BUFFER */
*/* S (,RBPRNT1) BRWRITE: WRITE MSG AND SPACE 2 LINES */
*/*EXTSAPT: N PRINT RB EXTENDED SAVE AREA */
*/* P SET INDEX */
*/*EXTLOOP2: P GET INIT. WHERE-TO-PUT-IT ADDR */
*/* P LOAD LOOP COUNT */
*/*EXTLOOP1: S BRREAD: GET A WORD FROM EXTENDED SAVE AREA */
*/* S WRDCNVT: CONVERT THE WORD */
*/* P DECREMENT BYTES TO PRINT COUNT */
*/* D (NO,EXTDONE,YES,) ANY LEFT */
*/* P INCREMENT WHERE-TO-PUT-IT ADDR */
*/* P INCREMENT INDEX */
*/* D (NO,EXTLOOP1,YES,) LINE COMPLETE */
*/* S (,EXTLOOP2) BRWRITE: PRINT THE LINE */
*/*EXTDONE: S BRWRITE: PRINT LAST LINE */
*/* R RETURN VIA R9 */
*/*RBERROR: N ROUTINE FOR ERROR IN RB FORMAT */
*/* P SET UP ADDRESSABILITY */
*/* S BRWRITE: SPACE A LINE */
*/* P MOVE ERROR MSG TO BUFFER */
*/* S BRWRITE: PRINT MSG */
*/* M (,RBPRTDN) RESET ERROR SWITCHES */
*/*RBSAVE: P ADD ONE TO TOTAL RB COUNT */
*/* D (YES,TOOMANY,NO,) 50 RBS ON CHAIN */
*/* P SAVE TOTAL RB COUNT */
*/* P RBTLIST = TCBLIST */
*/* P TCBLIST = RBLIST */
*/* S TCBSAVE: SAVE RB ADDR ON RBLIST */
*/* D (YES,RBSAVE1,NO,) WAS RB ADDR ALREADY ON RBLIST */
*/* P ADD ONE TO CNT FOR RBS ON RBLIST */
*/*RBSAVE1: P RBLIST = TCBLIST; TCBLIST = RBTLIST */
*/* R RETURN VIA R9 */
*/*RBSTPOUT: P RESTORE ERROR HANDLER'S ADDR */
*/* P RESTORE CALLER'S STOP RTN ADDR IN COMMON */
*/* R CALLER'S STOP RTN */
*/*RBGET: P RBTLIST = TCBLIST; TCBLIST = RBLIST */
*/* P INDICATE FIRST RB ON LIST DESIRED */
*/* S TCBRTRV: GET FIRST RB ADDR FROM RBLIST */
*/* D (NO,RBGET1,YES,) WAS THERE ONE */
*/* S TCBREMV: REMOVE RB FROM RBLIST */
*/* P REDUCE RB COUNT FOR RBLIST BY ONE */
*/*RBGET1: P RBLIST = TCBLIST; TCBLIST = RBTLIST */
*/* R RETURN VIA R9 */
*/*RBSTP: N PURGE ROUTINE FOR STOP REQUEST */
*/* P SET UP ADDRESSABILITY */
*/* P SET RETURN ADDR TO RBSTPOUT */
*/* P RBTLIST = TCBLIST; TCBLIST = RBLIST */
*/* S TCBREMV: REMOVE ALL RBS FROM RBLIST */
*/* P RBLIST = TCBLIST; TCBLIST = RBTLIST */
*/* R RETURN VIA R9 */
*/*AMDPRFMS: E MSSPRNT */
*/* P SET UP ADDRESSABILITY */
*/* P SET UP ERROR RTN ADDR */
*/* P SET PQE COUNTER */
*/* S BRREAD: GET DUMMY PQE PTR FROM TCB */
*/* D (YES,MSSPRDNA,NO,) IS PTR = 0 */
*/* S MSSTITLE: PRINT MSS TITLE */
*/* S BRREAD: GET PQE POINTERS FROM DUMMY PQE */
*/* S MSSFMPR2: FORMAT AND PRINT D-PQE LINE */
*/*MSSPRLP1: D (YES,MSSPRDN,NO,) PQE ADDR = 0 */
*/* P PUT ADDR IN PATTERN */
*/* S MSSFMPR1: FORMAT AND PRINT LINE 1 OF PQE */
*/* S MSSFMPR2: FORMAT AND PRINT 2ND LINE OF PQE */
*/* P GET ADDR OF PTR TO NEXT PQE */
*/* P ADD 1 TO PQE CNT */
*/* D (YES,MSSLOOP,NO,) PQE CNT > 50 */
*/* P SAVE PQE CNT */
*/* S (,MSSPRLP1) BRREAD: GET PTR TO NEXT PQE */
*/*MSSLOOP: P MOVE PQE LOOP MSG TO BUFFER */
*/* S (,MSSPRDNA) BRWRITE: PRINT THE MSG */
*/*MSSTITLE: D (NO,MSSTTL1,YES,) AOS/2 DUMP */
*/* P MOVE AOS/2 MSS TITLE TO BUFFER */
*/*MSSTTL2: S BRWRITE: PRINT TITLE AND SPACE 2 LINES */
*/* R RETURN VIA R9 */
*/*MSSTTL1: P (,MSSTTL2) MOVE PCP/MFT MSS TITLE TO BUFFER */
*/*MSSFMPR1: P INDICATE SPACE 1 LINE */
*/*MSSFMPRA: S FMTLINE: FORMAT THE LINE */
*/* P LOAD LINES-TO-SPACE INDICATOR */
*/* S BRREAD: PRINT THE LINE */
*/* R RETURN VIA R9 */
*/*MSSFMPR3: P (,MSSFMPRA) INDICATE SPACE 3 LINES AFTER WRITE */
*/*MSSFMPR2: P (,MSSFMPRA) INDICAT SPACE 2 LINES AFTER PRINT */
*/*MSSPRDN: N ALL DONE .. RETURN TO FORMAT ROUTINE */
*/* S BRWRITE: SPACE 1 LINE */
*/*MSSPRDNA: P RESTORE PREVIOUS ERROR RTN ADDR */
*/* P RESTORE REGS */
*/* R RETURN */
*/*MSSERR: N MSS PRINT FORMAT ERROR */
*/* P SET UP ADDRESSABILITY */
*/* S BRWRITE: SPACE 1 LINE */
*/* P MOVE ERROR MSG TO BUFFER */
*/* S (,MSSPRDNA) BRWRITE: WRITE MSG AND SPACE 3 LINES */
*/*AMDPRFLD: E LOADPRT */
*/* N LOAD LIST PRINT ROUTINE */
*/* P SET UP ADDRESSABILITY */
*/* P SAVE TJID AND TCB ADDR */
*/* M LDSW = 0 */
*/* P SET UP ERROR RTN ADDR */
*/* P MOVE TITLE TO BUFFER */
*/* S BRWRITE: PRINT TITLE */
*/* S BRREAD: GET LOAD LIST PTR FROM TCB */
*/*LOADLP3A: P SET LOOP COUNTER TO 255 */
*/*LOADLP3: D (YES,LOADDONE,NO,) IS PTR = 0 */
*/* S BRREAD: GET LOAD LIST */
*/* P SAVE ADDR OF NEXT LOAD LIST ELEMENT */
*/* S BRREAD: GET CDE PTR */
*/* P SAVE RESP. COUNT */
*/* D (YES,LOADPRT6,NO,) CDE PTR = 0 */
*/*LOADPRT8: M SET SWITCH TO INDICATE SOMETHING ON LOAD LIST */
*/* P MOVE 'CDE' TO BUFFER */
*/* S ADRCNVT: CONVERT CDE ADDR */
*/* P MOVE 'NM' TO BUFFER */
*/* S BRREAD: GET THE CDE */
*/* P SAVE ATR1 AND NEXT PTR */
*/* S BRREAD: GET FIRST HALF OF NAME */
*/* P MOVE 1ST HALF OF NAME TO BUFFER */
*/* S BRREAD: GET 2ND HALF OF NAME */
*/* P MOVE IT TO BUFFER */
*/* P MOVE 'USE' TO BUFFER */
*/* S BRREAD: GET USE/EPA FIELD */
*/* S BYTECNVT: CONVERT USE COUNT */
*/* P MOVE 'RESP' TO BUFFER */
*/* D (NO,LOADPRT9,YES,) PRINTING JOB PACK Q */
*/* P (,LOADPRTD) MOVE 'NA' TO BUFFER */
*/*LOADPRT9: S BYTECNVT: CONVERT RESP. CNT */
*/*LOADPRTD: P MOVE 'EPA' TO BUFFER */
*/* S ADRCNVT: CONVERT ENTRY POINT ADDR */
*/* P MOVE 'ATR1' TO BUFFER */
*/* S BYTECNVT: CONVERT ATR1 */
*/*LOADPRT7: S BRREAD: GET EXTENT LIST OR MAJOR CDE PTR */
*/* D (YES,LOADPRT1,NO,LOADPRT2) WAS IT A MINOR CDE */
*/*LOADPRT2: D (NO,NOXLST,YES,) IS THERE AN EXTENT LIST */
*/* S BRREAD: GET NO. OF RELOC. FACTORS */
*/* D (YES,XLSTER,NO,) > 25 */
*/* D (YES,XLSTER,NO,) = 0 */
*/* P CALCULATE ADDR OF FIRST BLOCK */
*/*LOADLP1: P ZERO INDEXREG; LOAD NO. OF ENTRIES / LINE CNT */
*/* P MOVE 'STA' & 'LN' TO BUFFER */
*/*LOADLP2: S BRREAD: GET BLOCK ADDR */
*/* S ADRCNVT: CONVERT STARTING ADDR */
*/* S BRREAD: GET BLOCK LENGTH */
*/* S ADRCNVT: CONVERT LENGTH OF BLOCK */
*/* P INCR. INDEX AND COUNTERS */
*/* D (YES,LOADPRT5,NO,) REMAINING REL FACTORS = 0 */
*/* S (,LOADLP1) BRWRITE: PRINT THE LINE */
*/*XLSTER: P (,LOADPRT5) MOVE EXTENT LIST ERROR MSG TO BUFFER */
*/*NOXLST: P MOVE NO EXTENT LIST MSG TO BUFFER */
*/*LOADPRT5: S BRWRITE: PRINT THE LINE FOR CDE OR MSG */
*/* D (YES,JPQPRT,NO,) IS JOB PACK Q. BEING PRINTED */
*/*LOADPRT6: P  GET  ADDR OF NEXT LOAD LIST ELEMENT */
*/* D (YES,,NO,RESTCTR1) INFINITE LOOP? */
*/* P (,LOOPPRT1) ISSUE INFINITE LOOP IN LOAD LIST MESSAGE */
*/*RESTCTR1: P (,LOADLP3) UPDATE COUNTER */
*/*RESTCTR2: P (,LOADPRT8) UPDATE COUNTER */
*/*LOADPRT1: M (,LOADPRT7) RESET MINOR FLAG */
*/*JPQPRTA: P SET LOOP COUNTER TO 256 */
*/*JPQPRT: P GET ADDR OF NEXT CDE */
*/* D (YES,LOADDONE,NO,) END OF QUEUE */
*/* P  PUT ADDR OF CDE IN PARM. REG. */
*/* D (YES,,NO,RESTCTR2) INFINITE LOOP? */
*/* P (,LOADDONE) ISSUE LOOP IN JOB PACK QUEUE MESSAGE */
*/*LOADDONE: D (YES,LDDONE2,NO,) HAS JOB PACK Q. BEEN PRINTED */
*/* D (YES,LDDONE1,NO,) WAS ANYTHING ON LOAD LIST */
*/* S (,LDDONE1) BRWRITE: PRINT NO LLE MSG */
*/*LDDONE1: S BRWRITE: SPACE 2 LINES */
*/* D (YES,LDDONED, NO,) PCP DUNP */
*/* M INDICATE PRINTING JOB PACK QUEUE */
*/* S BRWRTIE: PRINT JOB PACK QUEUE TITLE */
*/* M RESET GOT ONE SWITCH */
*/* D (YES,LOADPRTF,NO,) MFT DUMP */
*/* S BRREAD: GET JOB PACK Q. PTR */
*/* P (,JPQPRT) SAVE ADDR OF 1ST CDE IN THE QUEUE */
*/*LDDONE2: D (YES,LDDONE3,NO,) WAS ANY THING ON JOB PACK Q. */
*/* S  BRWRITE: PRINT NO JOB PACK QUEUE MSG */
*/*LDDONE3: S BRWRITE: SPACE 2 LINES */
*/*LDDONED: P RESTORE PREVIOUS ERROR RTN ADDR */
*/* P RESTORE REGS */
*/* R RETURN */
*/*BYTECNVT: N RTN TO CONVERT ONE BYTE TO PRINTABLE HEX */
*/* P SAVE REG 1 */
*/* S HEXCNVT: CONVERT ONE BYTE */
*/* P RESTORE REG 1 */
*/* R RETURN VIA R9 */
*/*LOADERR: N ERROR WHILE PRINTING LOAD LIST */
*/* P SET UP ADDRESSABILITY */
*/* S BRWRITE: SPACE A LINE */
*/* D (YES,LOADERR1,NO,) PRINTING JOB PACK Q. */
*/* P MOVE 'ERROR IN LOAD LIST' MSG TO BUFFER */
*/*LOADERR2: S BRWRITE: PRINT THE ERROR MSG */
*/* M (,LOADDONE) RESET ERROR SWITCHES */
*/*LOADERR1: P (,LOADERR2) MOVE JOB PACK QUEUE ERROR MSG TO BUFFER */
*/*AMDPRFDB: E DEBPRNT */
*/* P SET UP ADDRESSABILITY */
*/* M CLEAR DEB SWITCH; ZERO DEB COUNT */
*/* P SET UP ERROR RTN ADDRESS */
*/*DEBPRNT8: S BRREAD: GET DEB CHAIN PTR */
*/* D (YES,NODEB,NO,) IS DEB PTR = 0 */
*/* M INDICATE DEB FOUND */
*/* P MOVE 'DEB' TO BUFFER */
*/* S ADRCNVT: CONVERT DEB PTR */
*/* P MOVE APPENDAGE IDS TO BUFFER */
*/* S BRREAD: GET APP VECTOR TABLE */
*/* D (YES,DEBPRNT1,NO,) IS I/O APP VEC TAB ADDR = 0 */
*/* S BRREAD: GET END OF EXT APP ADDR */
*/* S WRDCNVT: CONVERT END OF APP ADDR */
*/* S BRREAD: GET SIO APP ADDR */
*/* S WRDCNVT: CONVERT SIO APP ADDR */
*/* S BRREAD: GET PCI APP ADDR */
*/* S WRDCNVT: CONVERT PCI APP ADDR */
*/* S BRREAD: GET CHAN END APP ADDR */
*/* S WRDCNVT: CONVERT CHAN END APP ADDR */
*/* S BRREAD: GET ABNORMAL END APP ADDR */
*/* S WRDCNVT: CONVERT ABNORMAL END APP ADDR */
*/*DEBPRNT1: S BRWRITE: PRINT LINE OF APP ADDRESSES */
*/* P MOVE 'PFX' TO BUFFER */
*/* P CALCULATE ADDR OF DEB PREFIX */
*/* D (NO,DEBERR,YES,) ADDR > 0 */
*/*DEBPRNT2: S BRREAD: GET DEB PREFIX */
*/* S WRDCNVT: CONVERT A WORD OF PREFIX */
*/* D (NO,DEBPRNT2,YES,) 4 WORDS DONE */
*/* S BRWRITE: PRINT LINE OF DEB PREFIX */
*/* P MOVE 'TCB' TO BUFFER */
*/* S BRREAD: GET DEB TCB PTR */
*/* S WRDCNVT: CONVERT TCB ADDR */
*/* P MOVE 'NDEB' TO BUFFER */
*/* S BRREAD: GET NEXT DEB PTR */
*/* S WRDCNVT: CONVERT NEXT DEB PTR */
*/* P MOVE 'ASYN' TO BUFFER */
*/* S BRREAD: GET ASYN EXIT ADDR */
*/* S WRDCNVT: CONVERT ASYN EXIT ADDR */
*/* P MOVE 'SPRG' TO BUFFER */
*/* S BRREAD: GET SYSTEM IOB PURGE CHAIN PTR */
*/* S WRDCNVT: CONVERT SYS PURGE CHAIN ADDR */
*/* P MOVE 'UPRG' TO BUFFER */
*/* S BRREAD: GET USER IOB PURGE CHAIN PTR */
*/* S WRDCNVT: CONVERT USER PURGE CHAIN ADDR */
*/* P MOVE 'PLST' TO BUFFER */
*/* S BRREAD: GET PARM LIST PTR FOR PURGE ECB */
*/* S WRDCNVT: CONVERT PARM LIST PTR */
*/* P MOVE 'DCB' TO BUFFER */
*/* S BRREAD: GET DCB PTR */
*/* S WRDCNVT: CONVERT DCB ADDR */
*/* S BRWRITE: PRINT LINE OF DEB */
*/* P MOVE 'AVT' TO BUFFER */
*/* S BRREAD: GET I/O APP VECT TABLE ADDR */
*/* D (NO,DEBPRNT3,YES,) IS IT DIRECT ACCESS (ESCALE = 04)*/
*/* P (,DEBPRNT3) SET D. A. FLAGS */
*/*DEBPRNT3: S WRDCNVT: CONVERT I/O APP VECT TABLE ADDR */
*/* S BRWRITE: PRINT THE LINE */
*/* D (YES,,NO,XNTTEST) IS DEB FOR ISAM */
*/* P REDUCE EXTENTS BY 1 */
*/* P TURN ON ISAM SW */
*/*XNTTEST: D (YES,DEBDONE,NO,) NUMBER OF EXTENTS = 0 */
*/* D (YES,DEBPRNT5,NO,) DEB FOR D. A. */
*/* P MOVE 'OP-UCB' TO BUFFER */
*/* S BRWRITE: PRINT THE LINE */
*/*DEBPRNT4: S BRREAD: GET AN EXTENT */
*/* S WRDCNVT: CONVERT THE EXTENT */
*/* S BRWRITE: PRINT THE EXTENT */
*/* D (YES,DEBDONE,NO,DEBPRNT4) NUMBER OF EXTENT = 0 */
*/*DEBPRNT5: N ROUTINE TO PRINT 4-WORD EXTENT (DIRECT ACCESS) */
*/* D (NO,,YES,HAVE3525) IS 4-WORD EXTENT FOR 3525 */
*/* P MOVE EXTENT IDS TO BUFFER */
*/* S BRWRITE: PRINT IDS */
*/* D (YES,,NO,DEBPRNT5) IS THIS DEB FOR ISAM */
*/* P SKIP EXTENT 0 */
*/*DEBPRNT7: S BRREAD: GET AN EXTENT */
*/* S WRDCNVT: CONVERT FILE MASK AND UCB ADDR */
*/*DEBPRNT6: P INCR. TO NEXT WORD OF EXTENT */
*/* S BRREAD: GET AN EXTENT WORD */
*/* P MOVE WORD TO WORK AREA */
*/* D (NO,DEBPRNT6,YES,) 3 WORDS GOTTEN */
*/* S WRDCNVT: CONVERT STARTING CCHH OF EXTENT */
*/* S WRDCNVT: CONVERT ENDING CCHH OF EXTENT */
*/* S HEXCNVT: CONVERT NUMBER OF TRACKS FOR THIS EXTENT */
*/* S BRWRITE: PRINT EXTENT */
*/* D (NO,DEBPRNT7,YES,DEBDONE) NUMBER OF EXTENTS = 0 */
*/*HAVE3525: N ROUTINE TO PRINT EXTENT FOR 3525 MULTI-FUNCTION */
*/* P MOVE IDS TO BUFFER */
*/* S BRWRITE: PRINT IDS */
*/* P FORMAT 3525 LINE */
*/* S (,DEBDONE) BRWRITE: PRINT DATA LINE */
*/*DEBDONE: N DONE WITH THIS DEB ... LOOK FOR ANOTHER */
*/* M RESET D. A. FLAGS AND ISAM SW */
*/* S BRWRITE: SPACE A LINE */
*/* P ADD ONE TO DEB COUNT */
*/* D (YES,DEBINF,NO,) COUNT > 200 */
*/* P (,DEBPRNT8) POINT TO NEXT DEB */
*/*DEBERR: N ERROR IN DEB CHAIN ... WRITE MSG AND RETURN */
*/* P SET UP ADDRESSABILITY */
*/* S BRWRITE: SPACE A LINE */
*/* P MOVE ERROR MSG TO BUFFER */
*/* P (,NODEB3) RESET ERROR SWITCHES */
*/*NODEB: N DONE WITH DEB CHAIN */
*/* D (NO,NODEB1,YES,) WAS THERE A DEB */
*/* S BRWRITE: SPACE A LINE */
*/*NODEB2: P RESTORE PREVIOUS ERROR RTN ADDR AND REGS */
*/* R RETURN */
*/*NODEB1: P MOVE NO OPEN DEB MSG TO BUFFER */
*/*NODEB3: S (,NODEB2) BRWRITE: PRINT THE MSG */
*/*DEBINF: P (,NODEB3) MOVE DEB LOOP MSG TO BUFFER */
*/*AMDPRFIO: E TIOTPRT */
*/* P SET UP ADDRESSABILITY */
*/* P SET UP ERROR ROUTINE ADDR */
*/* S BRREAD: GET TIOT PTR FROM TCB */
*/* D (YES,NOTIOT,NO,) TIOT PTR = 0 */
*/* D (YES,NOTIOT,NO,) TIOT PTR > MACHINE ADDR */
*/* P MOVE 'TIOT' TO BUFFER */
*/* S ADRCNVT: CONVERT TIOT ADDR */
*/* P MOVE 'JOB' TO BUFFER */
*/* S BRREAD: GET 1ST FIELD OF TIOT */
*/* P MOVE JOB NAME TO BUFFER */
*/*TIOTLP4: D (NO,TIOTPRT2,YES,) VALID JOB NAME */
*/* M (,TIOTPRT3) SET VALID TIOT SWITCH */
*/*TIOTPRT2: M TURN OFF VALID TIOT SWITCH */
*/*TIOTPRT3: P MOVE 'STEP' TO BUFFER */
*/* S BRREAD: GET STEP NAME */
*/* P MOVE STEP NAME TO BUFFER */
*/* P MOVE 'PROC' TO BUFFER */
*/* S BRREAD: GET PROC NAME */
*/* P MOVE PROC NAME TO BUFFER */
*/* S BRWRITE: PRINT TIOT NAMES */
*/* D (NO,TIONVLD,YES,) IS TIOT VALID */
*/* S BRREAD: GET FIRST DD ENTRY */
*/* P LOAD LENGTH OF DD ENTRY */
*/* D (YES,NODDEN,NO,) IS IT = 0 */
*/* P MOVE DD ENTRY IDS TO BUFFER */
*/* S BRWRITE: PRINT DD ENTRY IDS */
*/*TIOTLP3: P CALCULATE DD ENTRY OFFSET */
*/* S HEXCNVT: CONVERT OFFSET */
*/* S WRDCNVT: CONVERT FIRST WORD OF DD ENTRY */
*/* P BUMP TO NAME ENTRY; LOAD LOOP COUNT */
*/*TIOTLP1: S BRREAD: GET 4 BYTES OF DD NAME */
*/* P MOVE 4 BYTES OF NAME TO BUFFER */
*/* P BUMP ADDR PTRS */
*/* D (NO,TIOTLP1,YES,) FULL DDNAME GOTTEN */
*/* S BRREAD: GET TTR-STC FIELD OF DD ENTRY */
*/* S WRDCNVT: CONVERT TTR-STC FIELD */
*/* P DECREMENT LENGTH OF DD ENTRY */
*/* D (NO,TIOTPRT1,YES,) IS IT > 0 */
*/* P DIVIDE LENGTH BY 4 */
*/* D (NO,TIOTPRT1,YES,) RESULTS > 0 */
*/*TIOTLP2: P INCREASE ADDR TO DEVICE ENTRY */
*/* S BRREAD: GET DEVICE ENTRY */
*/* S WRDCNVT: CONVERT DEVICE ENTRY */
*/* S BRWRITE: PRINT A TIOT DDNAME ENTRY LINE */
*/* D (NO,TIOTLP2,YES,) ALL DEVICE ENTRIES DONE */
*/*TIOTPRT1: S BRREAD: GET NEXT DD ENTRY */
*/* D (YES,TIOTDN1,NO,) IS ITS LENGTH = 0 */
*/* D (YES,NO,TIOTLP3) ARE THERE > 255 DD'S? */
*/* P PRINT INFINITE LOOP IN TIOT MESSAGE */
*/*TIOTDN1: P RESTORE PREVIOUS ERROR RTN ADDR AND REGS */
*/* R RETURN */
*/*NODDEN: S (,TIOTDN1) BRWRITE: SPACE A LINE */
*/*NOTIOT: P MOVE NO TIOT MSG TO BUFFER */
*/* S (,TIOTDN1) BRWRITE: PRINT THE MSG */
*/*TIONVLD: P MOVE NOT VALID MSG TO BUFFER */
*/* S (,TIOTDN1) BRWRITE: PRINT THE MSG */
*/*TIOTERR: N ERROR FORMATTING TIOT ... PRINT ERROR MSG & RETURN */
*/* P SET UP ADDRESSABILITY */
*/* S BRWRITE: SPACE A LINE */
*/* P MOVE TIOT ERROR MSG TO BUFFER */
*/* S (,TIOTDN1) BRWRITE: PRINT THE MSG */
*/*AMDPRTSM: E (MFR,TCBSMFR,MGT,TCBSMGT,MRY,) ...TCBSMRY...
*/*...TCBSMGT... ...TCBSMFR... */
*/* P SAVE REGISTERS */
*/* P (,BASESMRY) SET ENTRY CODE = 8 */
*/*TCBSMGT: E ENTRY */
*/* P SAVE REGISTERS */
*/* P (,BASESMRY) SET ENTRY CODE = 4 */
*/*TCBSMFR: E ENTRY */
*/* P SAVE REGISTERS */
*/* P SET ENTRY CODE = 0 */
*/*BASESMRY: P SET BASE REG UP */
*/*SMBASE: P CHAIN SAVE AREAS */
*/* D (0,SMFR,4,SMGT,8,SMRY) BRANCH ON ENTRY CODE */
*/*SMRY: P SET UP ERROR RTN ADDR */
*/* D (YES,TCBSMDN,NO,) ARE FIRST AND LAST TABLE PTRS = */
*/* S BRWRITE: SPACE A LINE */
*/* P SAVE CURRENT TABLE PTR */
*/*TCBSM1: D (YES,TCBSMDN,NO,) IS BACKWARD TAB PTR = 0 */
*/* P SAVE BACK PTR AS CURRENT PTR */
*/* D (YES,TCBSM1,NO,) IS COUNT FOR TCB ENTRIES = 0 */
*/* D (NO,TCBSM1,YES,) IS THER A VALID TCB ENTRY */
*/* D (YES,TSOPTRN,NO,) TSO CALL */
*/* P (,NTSOPTRN) SAVE ADDR OF NAMES IN PATTERN & POINT TO IT */
*/*TSOPTRN: P SAVE ADDR IN TSO PATTERN & POINT TO IT */
*/* P LOAD TJID VALUE */
*/*NTSOPTRN: S TCBSMFP1: FORMAT AND PRINT THE LINE */
*/* P POINT TO FIRST TCB ENTRY */
*/*TCBSM4: D (YES,TCBSM2,NO,) IS TCB ADDR = 0 */
*/* P STORE DATA INTO PATTERN */
*/*TCBSM5: S TCBSMFP1: FORMAT AND PRINT LINE */
*/* P POINT TO NEXT TCB ENTRY */
*/* D (NO,TCBSM4,YES,) ALL TCB ENTRIES DONE */
*/*TCBSM2: D (YES,TCBSM1,NO,) TOP OF THE PAGE */
*/* S (,TCBSM1) BRWRITE: SPACE A LINE */
*/*TCBSMFP1: D (NO,TCBSMFP2,YES,) TOP OF PAGE */
*/* P MOVE TITLE TO BUFFER */
*/* S BRWRITE: PRINT THE TITLE */
*/*TCBSMFP2: S FMTLINE: FORMAT THE LINE */
*/* S BRWRITE: PRINT THE LINE */
*/* R RETURN VIA R9 */
*/*TCBSMDN: P RESTORE PREVIOUS ERROR RTN ADDR */
*/*DONESUM: P RESTORE REGS */
*/* R RETURN */
*/*TCBSMERR: P SET UP ADDRESSABILITY */
*/* S BRWRITE SPACE A LINE */
*/* P MOVE ERROR MSG TO BUFFER */
*/* S (,TCBSM1) BRWRITE: PRINT THE MSG */
*/*SMGT: P CALCULATE AMOUNT OF STORAGE NEEDED FOR TABLE */
*/* L GET THE STORAGE */
*/*TCBSMG1: D (NO,TCBSMG2,YES,) GOTTEN STORAGE > 256 */
*/* P CLEAR 256 BYTES */
*/* P (,TCBSMG1) CALCULATE REMAINING LENGTH */
*/*TCBSMG2: D (YES,TCBSMG3,NO,) REMAINING LENGTH = 0 */
*/* P CLEAR REMAINING STORAGE */
*/*TCBSMG3: P MAKE NEW TABLE FIRST ENTRY IN CHAIN */
*/* D (YES,TCBSMG4,NO,) IS LAST PTR = 0 */
*/* P (,TCBSMG5) PUT BACK LINK PTR INTO TABLE */
*/*TCBSMG4: P STORE NEW TABLE ADDR AS LAST */
*/*TCBSMG5: P STORE # OF TCBS IN THIS FAMILY INTO TABLE */
*/* P MOVE JOBNAME AND STEPNAME TO TABLE */
*/* P (,DONESUM) SAVE TJID IN TABLE */
*/*SMFR: N THIS LABEL IS SAME AS TCBSMF1 */
*/*TCBSMF1: D (NO,%AA,YES,) IS PTR TO FIRST TABLE = 0 */
*/*TCBSMF2: P (,DONESUM) ZERO LAST PTR */
*/*%AA: P DELINK THIS TABLE */
*/* P CALCULATE SIZE OF TABLE FOR FREEMAIN */
*/* L (,TCBSMF1) FREE STORAGE OCCUPIED BY TABLE */
*/*AMDPRFSR: END */
         SPACE
         EQUATES
*                                                                 M3179
         OUTBUFM
         COMMON
AMDPRFSR CSECT
INIT     EQU   128
SKIPSW   EQU   64
TIOTSW1  EQU   X'01'               SET WHEN READING TIOT         X01980
SUMSW    EQU   X'02'               SET WHEN READING TCB          Y01980
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         BALR  BASE1,0             ESTABLISH REG 11 AS BASE REG
         USING *,BASE1
FSR      LA    R2,FMTSAVE          OBTAIN FORMAT ROUTINE SAVE AREA ADDR
         ST    R2,8(R13)           STORE IN HIGH SAVE AREA
         ST    R13,FMTSAVE+4       STORE CALLER'S SAVE AREA ADDR
*                                  IN FORMAT SAVE
         LR    R13,R2              SET UP FORMAT SAVE AREA
         SPACE
         USING COMMON,COMBASE      ADDRESS OF COMMON CSECT PASSED IN
*                                  REG 12
         USING OUTBUF,BUFREG       BASE OUTBUF DSECT
         L     BUFREG,CURBUF       LOAD ADDR OF OUTBUF TO BUFREG
         SPACE
         TM    FMTSW,INIT          TEST FOR INITIALIZATION PASS
         BO    FMTINIT             BRANCH TO REAL THING IF SW ON
         ST    R15,AFORMAT         STORE ADDRESS OF THIS ROUTINE
         LM    R2,R4,TCBSMFRA      LOAD SUMMARY RTN ADDR'S
         STM   R2,R4,ATCBSMFR      STORE IN COMMON CSECT
         OI    FMTSW,INIT          INDICATE INIT DONE
         B     FMTDONE1
         SPACE
FMTINIT  NI    SWE,XFF-FMTDSW      RESET SAVE TCB SWITCH
         STH   R0,TJIDSAVE         SAVE TJID VALUE
         NI    FMTSW,INIT          TURN OFF ALL BUT INIT SWITCH
         XC    TCBCNT1,TCBCNT1     ZERO TCB COUNT1
         XC    TCBCNT2,TCBCNT2     ZERO TCB COUNT2
         MVC   FMTSAVE1(4),ERRADDR SAVE PRESENT ERROR ROUTINE ADDRESS
         LA    R1,FMTERR1          LOAD ADDR OF ERROR ROUTINE
         ST    R1,ERRADDR          STORE ERROR ROUTINE ADDR SO THAT
*                                  IN THE EVENT OF AN ERROR THE ERRMSG
*                                  ROUTINE WILL BRANCH TO FMTERR1
         MVC   FMTSTPSV(4),STOPEXIT  SAVE CALLER'S STOP ROUTINE AD
         LA    R1,FMTSTP           POINT TO FORMAT'S STOP EXIT
         ST    R1,STOPEXIT         STORE IN COMMON CSECT
         BAL   R9,FMTCBPG          GO PURGE LISTS
         SR    R3,R3               CLEAR TCBCNT REG
         LA    R2,TCBLIST          LOAD ADDR TO TCBLIST PTR
FMTLOOP3 L     R2,0(R2)            LOAD TCBLIST PTR
         LTR   R2,R2               HAVE I REACHED THE END
         BZ    FORMAT1             YES--TCB COUNT IN R3
         AH    R3,ONEA             NO--ADD ONE TO TCB COUNT
         B     FMTLOOP3            LOOP TO END OF LIST
         SPACE
FORMAT1  STH   R3,TCBCNT1          STORE TCB COUNT
FMTLOOP2 LH    R3,TCBCNT1          LOAD TCB CNT TO R3
         LTR   R3,R3               IS THE TCB COUNT ZERO
         BZ    FMTDONE             YES--ALL DONE
         LR    R2,R3               LOAD COUNT TO R2
         BCTR  R3,0                DECR COUNT
         STH   R3,TCBCNT1          STORE BACK DECR COUNT
         L     R15,ATCBRTRV        LOAD ADDR OF TCBRTRV ROUTINE
         BALR  RETREG,R15          GO GET A TCB ADDR STARTING WITH
*                                  THE LAST TCB ON THE LIST (FIRST ONE
*                                  SAVED)
FAMTREE4 ST    R2,TCBORIG          SAVE ORIGINAL TCB ADDR
         LH    R0,TJIDSAVE         TEST TJID TO SEE WHETHER OR
         LTR   R0,R0               NOT MOTHER SHOULD BE FOUND
         BNZ   TCBTOP              BRANCH IF TIME-SHARING TO SKIP
*                                  MOTHER SEARCH
         TM    SWF,QSADMP          IS INPUT AN SVC DUMP          Y01980
         BZ    TCBTOP              YES--DON'T SEARCH FOR MOTHER  Y01980
         C     R2,MSTRTCB          COMPARE FOR MASTER
         BNE   FMTLOOP1            NOT MASTER
FAMTREE5 BAL   R9,FMTCBSAV         FOR PCP, MFT, OR MASTER SCHD TCB IN
*                                  AOS/2....PLACE THE TCB ADDRESS ON TH*
               E
*                                  FORMAT TCB LIST
         B     FAMDONE             FORMAT THE MASTER SCHEDULER TCB
         SPACE 2
FMTLOOP1 LA    PREG,MOTHER(R2)     LOAD ADDR OF MOTHER PTR
         BRREAD  (PREG),,TJID=TJIDSAVE
         L     PREG,0(PREG)        LOAD MOTHER PTR
         LA    PREG,0(PREG)        CLEAR POS HI BYTE
         LTR   PREG,PREG           IS MOTHER POINTER ZERO
         BZ    TCBTOP              YES--TOP OF TREE
         C     PREG,MSTRTCB        IS MOTHER MASTER SCHEDULER
         BE    TCBTOP              YES--TOP OF TREE
         LR    R2,PREG             NO--LOAD MOTHER TO R2 AND LOOP
         B     FMTLOOP1            UNTIL WE REACH THE TOP OF FAMILY
*                                  TREE
         SPACE
TCBTOP   ST    R2,TOPTCB           SAVE ADDR OF TOP TCB IN FAMILY TREE
FAMLOOP1 LA    PREG,DAUGHTER(R2)   LOAD ADDR OF DAUGHTER PTR     X01980
         BRREAD  (PREG),,TJID=TJIDSAVE
         L     R3,0(PREG)          LOAD DAU TO R3
         BAL   R9,FMTCBSAV         SAVE MOTHER ADDR ON THE FORMAT
*                                  TCBLIST                       X01980
         C     R2,TOPTCB           IS TCB ADDR IN R2 THE TOP TCB
         BE    FAMTREE1            YES--DON'T SAVE SISTER
         LA    PREG,SISTER(R2)     LAOD ADDR OF SISTER
         BRREAD  (PREG)
         L     R2,0(PREG)          LOAD SISTER PTR TO R2
         BAL   R9,SISSAVE          SAVE SISTER ADDR ON SISLIST
FAMTREE1 LTR   R3,R3               IS THERE A DAUGHTER
         BZ    FAMTREE2            NO--GO GET LAST SISTER SAVED
         LR    R2,R3               LOAD DAUGHTER PTR TO R2
         LH    R7,DAUCNT           GET DAUGHTER COUNT            X01980
         SH    R7,ONEA             REDUCE BY ONE                 X01980
         BZ    FAMTREE2            HAVE A LOOP, GET OUT          X01980
         STH   R7,DAUCNT           SAVE COUNT                    X01980
         B     FAMLOOP1            SAVE DAUGHTER AND PROCEED
         SPACE
FAMTREE2 BAL   R9,SISGET           GO GET LAST SISTER TCB SAVED
         MVC   DAUCNT(2),DAUMAX    RESET DAUGHTER LOOP CNT       X01980
         LTR   R2,R2               WHERE THERE ANY
         BZ    FAMDONE             NO--WE ARE DONE WITH TREE     X01980
         LH    R7,SISCNT           GET SISTER COUNT              X01980
         SH    R7,ONEA             REDUCE BY ONE                 X01980
         BZ    FAMDONE             HAVE A LOOP, GET OUT          X01980
         STH   R7,SISCNT           SAVE COUNT                    X01980
         B     FAMLOOP1            PRECEED WITH THIS SISTER      X01980
         SPACE 2
FAMDONE  L     PREG,TCBORIG        LOAD ORIGINAL TCB ADDR
         MVC   SISCNT(2),SISMAX    RESET SISTER LOOP CNT         X01980
         OI    FMTIOTSW,TIOTSW1    INDICATE READING TIOT         X01980
         LR    R2,PREG             SAVE IN R2 IN CASE OF ERROR   X01980
         LA    PREG,TCBTIOT(PREG)  LOAD ADDR OF TIOT PTR
         BRREAD  (PREG),DATA,TJID=TJIDSAVE
         L     R7,0(PREG)          TIOT ADDR
         LTR   PREG,R7             TEST FOR TIOT
         BZ    FAMDONE1            NO TIOT--BLANK NAMES OF TITLE
         C     R7,ADDRMAX          IS TIOT ADDR GT UPPER BOUNDS OF MACH
         BH    FAMDONE1            YES--NO TIOT
         BRREAD  (PREG)
         MVC   FMTITLE+4(8),0(PREG) MOVE JOBNAME TO TITLE
         LA    PREG,8(R7)          ADDR OF STEP NAME
         BRREAD  (PREG)
         MVC   FMTITLE+20(8),0(PREG) MOVE STEP NAME TO TITLE
         LA    PREG,16(R7)         ADDR OF PROC STEP NAME
         BRREAD  (PREG)
         MVC   FMTITLE+40(8),0(PREG) MOVE PROC STEP NAME TO TITLE
         B     FAMDONE2            BR AROUND
FAMDONE1 MVC   FMTITLE+4(8),BLANKS BLANK JOB NAME
FAMDONE3 MVC   FMTITLE+20(8),BLANKS BLANK STEP NAME
         MVC   FMTITLE+40(8),BLANKS BLANK PROC STEP NAME
FAMDONE2 LH    PREG,TCBCNT2        LOAD COUNT OF TCBS IN FAMILY
         LH    R0,TJIDSAVE         GET TJID FOR TCB SUMMARY ROUTINE
         NI    FMTIOTSW,XFF-TIOTSW1 RESET TIOTSW                 X01980
         L     R15,ATCBSMGT        ADDR OF TCB SUMMARY GET ROUTINE
         BALR  RETREG,R15          GO GET CORE FOR AND BUILD TCB
*                                  SUMMARY TABLE
FMTPRTLP BAL   R9,FMTGET           GET TCB ADDR
         LTR   R2,R2               WAS THERE ONE
         BZ    FMTLOOP2            NO--GET NEXT TCB ADDR ON TCBLIST
         EJECT
***********************************************************************
*                                                                     *
*   THIS ROUTINE IS USED FOR SAVING THE ADDRESSES OF TCBS THAT ARE    *
*   FORMATTED...THIS IS NESESSARY TO PREVENT THE FORMATTING OF ONE    *
*   TCB MORE THAN ONCE FOR A GIVEN OPERATION.                         *
*                                                                     *
***********************************************************************
         SPACE
FMTCBC   LA    R4,FMTEDP           ADDR OF FORMATTED TCB TABLE PTR
         L     R3,0(R4)            LOAD PTR TO FORMATTED TCB TABLE
         LTR   R3,R3               IS PTR ZERO
         BZ    FMTCBS1             YES--GET CORE FOR TABLE AND SAVE TCB
*                                  ADDRESS
FMTCBC1  TM    SWE,FMTDSW          TEST FOR FORMATTED SW  (SET WITH
*                                  TCB ADDR SAVED AND RESET WITH EACH
*                                  CONTROL STATEMENT) AND EACH TIME
*                                  FSR IS ENTERED WITH NON-ZERO TJID
         BNZ   FMTCBC5             SET--LOOK FOR DUPLICATE TCB ADDR
         L     R4,0(R3)            SAVE LINK OF FIRST TABLE
         XC    0(8,R3),0(R3)       ZERO LINK AND COUNT OF TCB ADDRS
         LTR   R4,R4               TEST FOR ONLY ONE TABLE
         BZ    FMTCBS              BRANCH IF SO
FMTCBC2  L     R3,0(R4)            ADDR OF NEXT TABLE IN R3
         FREEMAIN  R,LV=48,A=(R4)
         LTR   R4,R3               ALL DONE
         BNZ   FMTCBC2             NO--ZERO CNT OF NEXT
         B     FMTCBS              YES--STORE NEW TCB ADDR IN TABLE
         SPACE
FMTCBC5  L     R3,0(R4)            LOAD TABLE PTR
         LTR   R3,R3               IS IT ZERO
         BZ    FMTCBS              YES--DUPLICATE NOT FOUND...SAVE IT
         L     R5,4(R3)            LOAD CNT OF TCB ADDRS IN THIS TABLE
         LTR   R5,R5               IS CNT ZERO
         BZ    FMTCBC3             YES--LOOK AT NEXT TABLE
         LA    R7,8(R3)            INIT COMP ADDR
FMTCBC4  C     R2,0(R7)            COMP FOR EQ TCB ADDR
         BE    FMTCBR0             EQ FOUND--RETURN TO CALLER +4
         LA    R7,4(R7)            STEP COMP ADDR
         BCT   R5,FMTCBC4          LOOP FOR TCB ADDR CNT
FMTCBC3  LR    R4,R3               STEP TO NEXT TABLE
         B     FMTCBC5             LOOK AT NEXT TABLE
         SPACE
FMTCBS   LA    R4,FMTEDP           ADDR OF TABEL PTR
FMTCBSLP L     R3,0(R4)            ADDR OF TCB ADDR TABLE
         LTR   R3,R3               IS IT ZERO
         BZ    FMTCBS1             YES--MUST GET CORE FOR NEW TABLE
         L     R5,4(R3)            CNT OF TCB ADDRS ALREADY IN TABLE
         CH    R5,HTEN             IS TABLE FULL
         BL    FMTCBS2             NO--PUT TCBADDR IN THIS TABLE
         LR    R4,R3               YES--STEP TO NEXT TABLE
         B     FMTCBSLP            LOOP
         SPACE
FMTCBS1  GETMAIN R,LV=48           GET CORE FOR NEW TABLE
         ST    R1,0(R4)            ADD NEW TABLE
         ST    R3,0(R1)            TO CHAIN
         LR    R3,R1               TABLE ADDR TO R3
         SR    R5,R5               ZERO CNT
         SPACE
FMTCBS2  LR    R4,R5               LOAD CNT TO R4
         SLL   R4,2                MULTIPLY CNT BY 4 FOR INDEX
         LA    R4,8(R4)            ADD 8 TO INDEX
         ST    R2,0(R4,R3)         STORE TCB ADDR INTO NEXT TABLE SLOT
         AH    R5,ONEA             ADD ONE TO CNT OF TCB ADDRS IN TABLE
         ST    R5,4(R3)            STORE NEW CNT INTO TABLE
         OI    SWE,FMTDSW          SET FORMATTED SW
         B     FMTPRTL1            OK TO PRINT THIS TCB
         SPACE
FMTCBR0  OI    SWE,FMTDSW          SET FORMATTED SW
         B     FMTPRTLP            TCB ALREADY FORMATTED
         EJECT
***********************************************************************
*                                                                     *
*   THE FOLLOWING ROUTINE INVOKES THE VARIOUS FORMATTING ROUTINES     *
*   WHICH PRINT  THE TCB ADDRESSED BY REGISTER 2 AND SYSTEM CONTROL   *
*   BLOCKS ASSOCIATED WITH THAT TCB.                                  *
*                                                                     *
***********************************************************************
         SPACE
FMTPRTL1 TM    FMTSW,SKIPSW        TEST SKIP SWITCH SO THAT THERE
*                                  IS NO EJECT FOR FIRST TCB
         BZ    FMTPRTL2
         BRWRITE  SKIP             START NEW PAGE
FMTPRTL2 OI    FMTSW,SKIPSW        TURN ON SKIP SWITCH
         MVC   ADDR(48),FMTITLE    MOVE TITLE TO BUFFER
         BRWRITE 2                 PRINT TITLE
         BAL   R9,FMTSUMS          ADD TCB TO SUMMARY TABLE
         LH    R0,TJIDSAVE         PICK UP TJID VALUE FOR CALLS TO
*                                  CONTROL BLOCK FORMATING ROUTINES
         L     R15,ATCBPRNT        ADDR OF TCB PRINT ROUT
         BALR  RETREG,R15          PRINT TCB
         LTR   R15,R15             TEST FOR TERMINATED TASK
         BNZ   FMTPRTLP            PRINT NOTHING BUT TCB IF TASK HAS
*                                  TERMINATED
         L     R15,ARBPRNT         ADDR OF RB PRINT ROUT
         BALR  RETREG,R15          PRINT RB CHAIN
         L     R15,AMSSPRNT        ADDR OF MSS PRINT ROUTINE
         BALR  RETREG,R15          GO PRINT MAIN STORAGE BLOCKS FOR TCB
         L     R15,ALOADPRT        ADDR OF LOAD LIST PRINT ROUT
         BALR  RETREG,R15          GO PRINT LOAD LIST
         L     R15,ADEBPRNT        ADDR OF DEB PRINT ROUTINE
         BALR  RETREG,R15          PRINT DEBS
         L     R15,ATIOTPRT        ADDR OF TIOT PRINT ROUTINE
         BALR  RETREG,R15          PRINT TIOT
         B     FMTPRTLP            LOOP FOR ALL TCBS ON FORMAT TCBLIST
         SPACE
FMTDONE  MVC   ERRADDR,FMTSAVE1    RESTORE CALLER'S ERROR ROUTINE
         MVC   STOPEXIT(4),FMTSTPSV  RESTORE CALLER'S STOP ROUTINE
         BAL   R9,FMTCBPG          FREE LISTS
FMTDONE1 L     R13,4(R13)          EXIT LINKAGE
         LM    R14,R12,12(R13)
         BR    RETREG              RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*   ERROR IN TCB CHAIN....WRITE ERROR MSG AND CONTINUE WITH NEXT TCB  *
*                                                                     *
***********************************************************************
         SPACE
         DROP  BASE1
         USING *,R15               TEMPORARILY BASE ERROR ROUTINE
*                                  ON EP ADDRESS IN REG 15
FMTERR1  LA    R13,FMTSAVE         GET FORMAT SAVE AREA ADDR
         LM    R14,R12,12(R13)     RESTORE REGISTERS             X01980
         DROP  R15
         USING FSR,BASE1           NOW BASE ON REG 11
         NI    SWB,XFF-IOERR-FMTERR RESET ERROR SWITCHES
         TM    FMTIOTSW,SUMSW      WAS TCB BEING READ IN SUMMARY Y01980
         BZ    FMTERR1B            NO--CONTINUE                  Y01980
         NI    FMTIOTSW,XFF-SUMSW  RESET SWITCH                  Y01980
         BR    R9                  RETURN EXITING SUMMARY RTN    Y01980
FMTERR1B TM    FMTIOTSW,TIOTSW1    WAS TIOT BEING READ           Y01980
         BZ    FMTERR1A            NO--CONTINUE                  X01980
         MVC   FMTITLE+4(L'FMTUNK),FMTUNK  INDIC UNKNOWN JOBNAME YM1468
         B     FAMDONE3            RETURN TO FORMAT TCB'S        X01980
FMTERR1A BRWRITE 1                 SPACE A LINE
         ST    R2,FMTWORK          STORE TCBADDR TO BE CONVERTED
         LA    PREG,FMTWORK
         LA    R4,FMTERMSG+25      ADDR FOR CONVERTED TCB ADDR
         L     R15,AADRCNVT        ADDR OF 3 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT TCB ADDR
         MVC   ADDR(31),FMTERMSG   MOVE ERROR MSG TO BUFFER
         BRWRITE 1                 PRINT ERROR MSG
         B     FAMTREE2            CONTINUE WITH NEXT SISTER TCB X01980
         EJECT
***********************************************************************
*                                                                     *
*   THIS ROUTINE SAVES TCB ADDRS IN R2 ON THE FORMAT TCBLIST          *
*                                                                     *
***********************************************************************
         SPACE
FMTCBSAV LTR   R2,R2               IS THERE A TCB ADDR IN R2
         BCR   8,R9                RETURN TO CALLER IF NOT
         MVC   FTCBSAV,TCBLIST     SAVE REAL TCBLIST PTR
         MVC   TCBLIST,FTCBLIST    MOVE IN FORMAT TCBLIST PTR
         L     R15,ATCBSAVE        ADDR OF TCB SAVE ROUTINE
         BALR  RETREG,R15          SAVE THE TCB ADDR IN R2 ON THE
*                                  FORMAT TCB LIST
         MVC   FTCBLIST,TCBLIST    MOVE FORMAT TCBLIST PTR BACK
         MVC   TCBLIST,FTCBSAV     RESTORE THE REAL TCBLIST PTR
         LTR   R15,R15             WAS A TCB ADDR REALLY PLACED ON THE
*                                  LIST
         BCR   7,R9                NO--TCB ADDR IN R2 IS A DUPLICATE
*                                  OF ONE ALREADY SAVED...DON'T INCR
*                                  TCBCNT2
         LH    R0,TCBCNT2          LOAD COUNT OF TCB ADDRS ON FORMAT
*                                  TCBLIST
         AH    R0,ONEA             ADD ONE TO THAT COUNT
         STH   R0,TCBCNT2          STORE BACK INCR COUNT
         BR    R9                  RETURN TO CALLER
         SPACE 3
***********************************************************************
*                                                                     *
*   THIS ROUTINE WILL RETURN THE LAST TCB ADDR ON THE FORMAT TCBLIST  *
*   AND REMOVE THAT TCB ADDR FROM THE LIST                            *
*                                                                     *
***********************************************************************
         SPACE
FMTGET   LH    R0,TCBCNT2          LOAD COUNT OF TCB ADDRS ON FORMAT
*                                  TCBLIST
         LTR   R0,R0               IS IT ZERO
         BNP   FMTGET1             YES--NONE LEFT
         MVC   FTCBSAV,TCBLIST     SAVE TCBLIST PTR
         MVC   TCBLIST,FTCBLIST    MOVE IN FORMAT TCBLIST PTR
FMTGET3  LR    R2,R0               LOAD COUNT TO R2
         L     R15,ATCBRTRV        ADDR OF RETRIEVE ROUTINE
         BALR  RETREG,R15          GO GET TCB ADDR
         LTR   R2,R2               WAS THERE THAT MANY TCBS ON LIST
         BZ    FMTGET2             NO--DECR COUNT AND TRY AGAIN
         L     R15,ATCBREMV        ADDR OF REMOVE ROUTINE
         BALR  RETREG,R15          GO REMOVE THIS TCB ADDR FROM LIST
         SH    R0,ONEA             SUBTRACT ONE FROM COUNT
FMTGET4  MVC   FTCBLIST,TCBLIST    SAVE FORMAT TCBLIST PTR
         MVC   TCBLIST,FTCBSAV     RESTORE TCBLIST PTR
         STH   R0,TCBCNT2          STORE REMAINING COUNT BACK
         BR    R9                  RETURN TO CALLER
         SPACE
FMTGET1  SR    R2,R2               INDICATE NO MORE TCBS ON LIST
         BR    R9                  RETURN TO CALLER
         SPACE
FMTGET2  SH    R0,ONEA             SUBTRACT ONE FROM COUNT
         BP    FMTGET3             GO TRY AGAIN
         SR    R2,R2               INDICATE NO MORE TCBS ON LIST
         B     FMTGET4             RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*   THIS ROUTINE SAVES TCB ADDRS IN R2 ON THE SISTER TCBLIST          *
*                                                                     *
***********************************************************************
         SPACE
SISSAVE  MVC   FTCBSAV,TCBLIST     SAVE REAL TCBLIST PTR
         MVC   TCBLIST,SISLIST     MOVE IN SISTER LIST PTR
         L     R15,ATCBSAVE        ADDR OF TCBSAVE ROUTINE
         BALR  RETREG,R15          SAVE SISTER ADDR ON SISTER TCBLIST
         MVC   SISLIST,TCBLIST     MOVE SISLIST PTR BACK
         MVC   TCBLIST,FTCBSAV     RESTORE REAL TCBLIST PTR
         BR    R9                  RETURN TO CALLER
         SPACE 3
***********************************************************************
*                                                                     *
*   THIS ROUTINE WILL GET THE FIRST TCB ADDR ON THE SISTER TCBLIST    *
*   AND REMOVE THAT TCB FROM THE LIST                                 *
*                                                                     *
***********************************************************************
         SPACE
SISGET   MVC   FTCBSAV,TCBLIST     SAVE TCBLIST PTR
         MVC   TCBLIST,SISLIST     MOVE IN SISTER TCBLIST PTR
         LA    R2,1                NUMBER FOR FIRST ADDR ON LIST
         L     R15,ATCBRTRV        ADDR OF RETRIEVE ROUTINE
         BALR  RETREG,R15          GET A TCB ADDR
         LTR   R2,R2               WAS THERE ONE
         BZ    SISGET1             NO--AVOID REMOVAL
         L     R15,ATCBREMV        ADDR OF REMOVE ROUTINE
         BALR  RETREG,R15          REMOVE THIS TCB ADDR FROM THE LIST
SISGET1  MVC   SISLIST,TCBLIST     SAVE SISTER TCBLIST PTR
         MVC   TCBLIST,FTCBSAV     RESTORE TCBLIST PTR
         BR    R9                  RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*   THIS ROUTINE PLACES TCB ADDRESSES, DATA, AND PAGE NUMBERS INTO TCB*
*    SUMMARY TABLE.                                                   *
*                                                                     *
***********************************************************************
         SPACE
FMTSUMS  L     R3,TCBSMPTR         LOAD ADDR OF TCB SUMMARY TABLE
*                                  POINTERS
         L     R3,0(R3)            LOAD ADDR OF FIRST TABLE
         SR    R4,R4               CLEAR IC REG
         IC    R4,0(R3)            GET COUNT OF TCBS IN FAMILY
         LTR   R4,R4               TEST FOR ZERO
         BCR   8,R9                RETURN TO MAIN LINE IF TCBCNT IS
*                                  ZERO  (SHOULDN'T HAPPEN...)
         LA    R1,28(R3)           ADDR OF FIRST TCB ENTRY IN TABLE
FMTSUM2  OC    0(4,R1),0(R1)       TEST FOR ZERO TCB ENTRY
         BZ    FMTSUM1             ZERO--USE THIS ENTRY POSITION
         LA    R1,24(R1)           NO--INCR TO NEXT TCB ENTRY    Y01980
         BCT   R4,FMTSUM2          LOOP TILL A ZERO ENTRY FOUND OR TO
*                                  END OF TABLE
         BR    R9                  TABLE FULL--RETUR TO MAIN LINE
*                                  WITHOUT SAVING ANYTHING  (SHOULDN'T
*                                  HAPPEN...)
FMTSUM1  LR    R3,R1               SAVE PTR IN REG 3             Y01980
         OI    FMTIOTSW,SUMSW      INDICATE IN SUMMARY RTN       Y01980
         ST    R2,0(R3)            STORE TCB ADDR INTO TABLE     Y01980
         LA    PREG,16(R2)         POINT TO CMP FIELD            Y01980
         BRREAD (PREG)             READ PTR                      Y01980
         MVC   4(4,R3),0(PREG)     MOVE DATA TO TABLE            Y01980
         LA    PREG,SISTER(R2)     POINT TO SISTER TCB FIELD     Y01980
         BRREAD (PREG)             READ PTR                      Y01980
         MVC   8(4,R3),0(PREG)     MOVE DATA TO TABLE            Y01980
         LA    PREG,MOTHER(R2)     POINT TO MOTHER TCB FIELD     Y01980
         BRREAD (PREG)             READ PTR                      Y01980
         MVC   12(4,R3),0(PREG)     MOVE DATA TO TABLE           Y01980
         LA    PREG,DAUGHTER(R2)   POINT TO DAUGHTER TCB FIELD   Y01980
         BRREAD (PREG)             READ PTR                      Y01980
         MVC   16(4,R3),0(PREG)     MOVE DATA TO TABLE           Y01980
         LA    PREG,238(R2)        POINT TO TID FIELD            Y01980
         BRREAD (PREG)             READ PTR                      Y01980
         MVC   0(1,R3),0(PREG)     MOVE DATA TO TABLE            Y01980
         MVC   20(4,R3),TITLEPGE+5 MOVE EBCDIC PAGE NUMBER       Y01980
         NI    FMTIOTSW,XFF-SUMSW  INDICATE DONE WITH SUMMARY RTNY01980
         BR    R9                  RETURN TO MAIN LINE
         EJECT
***********************************************************************
*                                                                     *
*  FORMAT TCB STOP HANDLER                                            *
*                                                                     *
***********************************************************************
         SPACE
         USING *,R15
FMTSTP   LA    R13,FMTSAVE         POINT TO SAVE AREA
         LM    R14,R12,12(R13)     RESTORE REGS
         USING FSR,BASE1           SHIFT BACK TO REG 11 AS BASE
         DROP  R15
         LA    R9,FMSTPOUT         SET RETURN ADDRESS
*   PURGE ALL FORMAT TCB LISTS IN CASE OF STOP BY OPERATOR
FMTCBPG  MVC   FTCBSAV,TCBLIST     SAVE TCB LIST PTR
         MVC   TCBLIST,FTCBLIST    MOVE IN FORMAT TCB LIST PTR
         SR    R2,R2               ZERO R2 FOR COMPL REMOVAL
         L     R15,ATCBREMV        ADDR OF TCB REMOVE ROUT
         BALR  RETREG,R15          LINK TO IT
         MVC   FTCBLIST,TCBLIST    MOVE ZEROED PTR BACK
         MVC   TCBLIST,SISLIST     MOVE IN SISTER TCB LIST PTR
         L     R15,ATCBREMV        ADDR OF REMOVE ROUT
         BALR  RETREG,R15          LINK TO TCB REMOVE ROUT
         MVC   SISLIST,TCBLIST     MOVE ZEROED PTR BACK
         MVC   TCBLIST,FTCBSAV     RESTORE TCBLIST PTR
         BR    R9
FMSTPOUT MVC   ERRADDR(4),FMTSAVE1 RESTORE ERROR HANDLER'S ADDR
         L     R15,FMTSTPSV        GET CALLER'S STOP RTN. ADDRESS
         ST    R15,STOPEXIT        STORE BACK IN COMMON CSECT
         BR    R15                 BRANCH TO IT
         EJECT
***********************************************************************
*                                                                     *
*   CONSTANTS AND SAVE AREA FOR FORMAT ROUTINE                        *
*                                                                     *
***********************************************************************
         SPACE
FMTSAVE  DC    18F'0'              FORMAT REGISTER SAVE AREA
TCBORIG  DC    F'0'
FMTSTPSV DC    F'0'                SAVE AREA FOR STOP ROUTINE ADDRESS
FTCBSAV  DC    F'0'
FTCBLIST DC    F'0'
SISLIST  DC    F'0'
FMTEDP   DC    F'0'
FMTSAVE1 DC    F'0'                SAVE AREA FOR CALLER'S ERROR ROUTINE
*                                  ADDRESS
TOPTCB   DC    F'0'
FMTWORK  DC    F'0'
TCBSMPTR DC    A(FMTSFPTR)         ADDR OF TCB SUMMARY TABLE PTRS
ATCBPRNT DC    A(AMDPRFTC)         ADDR OF TCB PRINT ROUTINE
ARBPRNT  DC    A(AMDPRFRB)         ADDR ROUTINE TO PRINT RB'S
AMSSPRNT DC    A(AMDPRFMS)         ADDR ROUTINE TO MAIN STORAGE SUPER
ALOADPRT DC    A(AMDPRFLD)         ADDR OF LOAD LIST PRINT RTN
ADEBPRNT DC    A(AMDPRFDB)         ADDR ROUTINE TO PRINT DEB'S
ATIOTPRT DC    A(AMDPRFIO)         ADDR TIOT PRINT ROUTINE
TCBSMFRA DC    A(TCBSMFR)          ADDR TCB SUMMARY ROUTINES - ORDER
         DC    A(TCBSMGT)          MUST BE FR, GT, MRY
         DC    A(AMDPRTSM)
TCBCNT1  DC    H'0'
TCBCNT2  DC    H'0'
TJIDSAVE DC    H'0'
DAUCNT   DC    H'300'              DAUGHTER TCB LOOP COUNT       X01980
DAUMAX   DC    H'300'              TO RESET DAUCNT               X01980
SISCNT   DC    H'1000'             SISTER TCB LOOP COUNT         X01980
SISMAX   DC    H'1000'             TO RESET SISCNT               X01980
FMTUNK   DC    C'UNKNOWN'          FOR ERROR READING TIOT        X01980
FMTIOTSW DC    X'00'               SW SET FOR TIOT               X01980
FMTSW    DC    B'00000000'         BIT 1 - INIT SWITCH
FMTERMSG DC    CL32'ERROR IN TCB CHAIN   TCB'
FMTITLE  DC    C'JOB            STEP            PROCSTEP         '
FSRPCH   DC    20F'0'              PATCH AREA                    X01980
         SPACE
         DROP  BASE1,COMBASE
         EJECT
AMDPRFTC CSECT
         SPACE
***********************************************************************
*              *** AMDPRFTC - TCB PRINT ***                           *
*                                                                     *
* STATUS--OS/VS2 RELEASE 1.0                                          *
*                                                                     *
* FUNCTION--                                                          *
*    THIS ROUTINE FORMATS AND PRINTS THE TCB.                         *
*                                                                     *
* ENTRY POINTS--                                                      *
*    AMDPRFTC IS THE ONLY ENTRY.  CONTROL IS RECIEVED FROM AMDPRFSR.  *
*    STANDARD SUBROUTINE LINKAGE USED.                                *
*                                                                     *
* INPUTS--                                                            *
*         REGISTER 0 - TJID OF STORAGE CONTAINING TCB TO BE FORMATTED *
*         REGISTER 2 - TCB ADDRESS TO BE FORMATTED                    *
*         REGISTER 12 - ADDRESS OF COMMON AREA                        *
*                                                                     *
* OUTPUT--                                                            *
*    WRITES FORMATTED TCB AND IF THE TCB IS THE CURRENT TCB,          *
*    SO INDICATES.                                                    *
*    WRITES MESSAGE 'TASK HAS TERMINATED' AND ERROR MESSAGE 'ERROR    *
*    FORMATTING TCB'                                                  *
*    IF TASK HAS TERMINATED, RETURN CODE IS 4, OTHERWISE IT IS 0      *
*                                                                     *
* EXTERNAL REFERENCES--                                               *
*         BRREAD - TO OBTAIN DATA FROM THE INPUT DUMP.                *
*         BRWRITE - TO WRITE DATA TO THE 'PRINTER' DATA SET.          *
*         AMDPRGFR - FROM AN ADDRESS IN COMMON, TO FORMAT A LINE      *
*                    DESCRIBED BY THE FMTPTRN MACRO INSTRUCTION.      *
*         WRDCNVT - FROM AN ADDRESS IN COMMON, TO CONVERT 4 BYTES     *
*                   TO PRINTABLE HEX.                                 *
*                                                                     *
* EXITS,NORMAL--                                                      *
*    RETURN TO CALLER THROUGH STANDARD LINKAGE UNLESS 'STOP' HAS      *
*    BEEN ENTERED BY OPERATOR IN WHICH CASE CONTROL RETURNS TO        *
*    STOP ROUTINE WITHOUT RESTORING REGISTERS.                        *
*                                                                     *
* EXITS,ERROR--                                                       *
*    SAME AS NORMAL EXIT                                              *
*                                                                     *
* TABLES/WORK AREAS--                                                 *
*    FMTPTRN MACRO IS USED TO GENERATE A PATTERN FOR THE FORMATTED    *
*    TCB                                                              *
*                                                                     *
* ATTRIBUTES-- REUSABLE                                               *
*                                                                     *
* CHARACTER CODE DEPENDENCY-- NONE                                    *
*                                                                     *
* NOTES--                                                             *
*   BRREAD ERROR HANDLER:  IF A TCB CANNOT BE READ FROM THE INPUT     *
*   DUMP, A MESSAGE IS PRINTED AND CONTROL RETURNS TO AMDPRFSR.       *
*                                                                     *
***********************************************************************
         SPACE
PCPTCB   EQU   128
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         BALR  BASE1,0             ESTABLISH REG 11 AS BASE
         USING *,BASE1
TCBPRBAS LA    R3,TCBSAVE          SAVE AREA CHAINING
         ST    R13,TCBSAVE+4
         ST    R3,8(R13)
         LR    R13,R3
         SPACE
         USING COMMON,COMBASE
         MVC   TCBERSV,ERRADDR     SAVE PREVIOUS ERROR ROUTINE ADDR
         LA    R15,TCBPRER         ADDR OF TCBPRNT ERROR ROUTINE
         ST    R15,ERRADDR         STORE IN ERROR ROUT ADDR WORD
         MVI   TCBPRTSW,0          ZERO TCBPRNT SWITCH
TCBPRNTA EQU   *
         L     BUFREG,CURBUF       LOAD BUFFER ADDR
         LTR   R0,R0               BYPASS CURRENT TEST FOR
         BNZ   TCBPRNT5            TJID NOT ZERO
         C     R2,CURTCB           IS THIS TCB THE CURRENT TCB
         BNE   TCBPRNT5            NO--BR AROUND NEXT INSTRUCTIONS
         MVC   ADDR+46(28),CURMSG  MOVE CURRENT TASK MSG TO BUFFER
         BRWRITE 2                 PRINT MSG
TCBPRNT5 ST    R2,TCBLN11          PLACE TCB ADDR IN PATTERN
         LA    PREG,TCBLN1         LOAD ADDR OF PATTERN FOR FIRST LINE
*                                  OF TCB
         BAL   R9,TCBFMPR          FORMAT AND PRINT FIRST LINE OF TCB
         B     TCBPRTV             GO TO AOS/2 PRINT ROUT        Y01980
         EJECT
         SPACE 2
***********************************************************************
*                                                                     *
*   ROUTINE TO FORMAT AND PRINT AOS/2 TCB                             *
*                                                                     *
***********************************************************************
         SPACE
TCBPRTV  LA    PREG,TCBVID2        ADDR OF ID FOR BYTE 44 OF AOS/2 TCB
         ST    PREG,TCBLN21        STORE INTO PATTERN
         LA    PREG,TCBLN2         ADDR OF PATTERN
         BAL   R9,TCBFMPR          FORMAT AND PRINT LINE 2 OF TCB
         LA    R3,48               LOAD INDEX TO TCB REGS
         LA    R15,TCBPTRG         GET ADDRESS REG PRINT ROUTINE
         BALR  RETREG,R15          LINK TO IT
         LA    PREG,112(R2)        ADDR OF NEXT FIELD AFT REGS IN TCB
         ST    PREG,TCBLN31        STORE INTO PATTERN
         MVI   TCBLN32,LBL+LBLP+DTA SET PATTERN TO CONTINUE
         LA    PREG,TCBVID3        LOAD ADDR OF 'JST' ID
         ST    PREG,TCBLN33        STORE IT INTO PATTERN
         LA    PREG,TCBLN3         ADDR OF PATTERN
         BAL   R9,TCBFMPR          FORMAT AND PRINT LINE 5 OF TCB
         LA    PREG,TCBVID4        LOAD ADDR OF AOS/2'S LINE 6 IDS
         ST    PREG,TCBLN41        STORE INTO PATTERN
         LA    PREG,TCBLN4         ADDR OF PATTERN
         BAL   R9,TCBFMPR          FORMAT AND PRINT LINE 6 OF TCB
         LA    PREG,160(R2)        ADDR OF NEXT FIELD OF TCB     X01980
         ST    PREG,TCBLN51        STORE INTO PATTERN            X01980
         LA    PREG,TCBLN5         ADDR OF PATTERN               X01980
         BAL   R9,TCBFMPR          FORMAT AND PRINT LINE 7 OF TCBX01980
         LA    PREG,184(R2)        ADDR OF NEXT FIELD OF TCB     X01980
         ST    PREG,TCBLN81        STORE INTO PATTERN            X01980
         LA    PREG,TCBLN8         ADDR OF PATTERN               X01980
         BAL   R9,TCBFMPR          FORMAT AND PRINT LN 8 OF TCB  X01980
         LA    PREG,208(R2)        ADDR OF NEXT FIELD OF TCB     X01980
         ST    PREG,TCBLN91        STORE INTO PATTERN            X01980
         LA    PREG,TCBLN9         ADDR OF PATTERN               X01980
         BAL   R9,TCBFMPR          FORMAT AND PRINT LN 9 OF TCB  X01980
         LA    PREG,232(R2)        ADDR OF NEXT FIELD OF TCB     Y01980
         ST    PREG,TCBLN101       STORE INTO PATTERN            Y01980
         LA    PREG,TCBLN10        ADDR OF PATTERN               Y01980
         BAL   R9,TCBFMPR          FORMAT AND PRINT LN 10 OF TCB Y01980
         LA    PREG,208(R2)        ADDR OF TCB EXT2              X01980
         BRREAD (PREG),TJID=(R0)   READ EXT2 ADDR                Y01980
         L     PREG,0(PREG)        GET PTR TO EXT2               X01980
         ST    PREG,TCBE2L11       STORE INTO PATTERN            X01980
         LA    PREG,TCBE2LN1       ADDR OF PATTERN               X01980
         BAL   R9,TCBFMPR          FORMAT AND PRINT LN 1 OF EXT2 X01980
         B     TCBPRNTC            PREPARE FOR RETURN TO FORMAT  X01980
         SPACE 2
***********************************************************************
*                                                                     *
*   FORMAT PRINT LINE FOR TCB AND PRINT THE LINE                      *
*                                                                     *
***********************************************************************
         SPACE
TCBFMPR  L     R15,AFMTLINE        LOAD ADDR OF LINE FORMAT ROUT
         BALR  RETREG,R15          FORMAT THE TCB LINE
         BRWRITE 1                 PRINT THE LINE
         BR    R9                  RETURN TO CALLER
         SPACE 3
***********************************************************************
*                                                                     *
*   PREPARE FOR RETURN TO FORMAT ROUTINE                              *
*                                                                     *
***********************************************************************
         SPACE
TCBPRNTC EQU   *
         LA    PREG,TCBFLGS+4(R2)  ADDR OF FIFTH FLAG BYTE OF TCB
         BRREAD  (PREG),DATA,TJID=(R0)
         TM    0(PREG),X'80'       IS TASK TERMINATED
         BZ    TCBPRNT8            BR IF IT ISN'T
         BRWRITE 1                 SPACE A LINE
         MVC   ADDR(19),TERMMSG    MOVE TERMINATED MSG TO BUFFER
         BRWRITE 3                 PRINT MSG AND SPACE 3 LINES
         LA    R15,4               LOAD RETURN CODE OF 4
         B     TCBPRDN1            RETURN TO FORMAT
TCBPRNT8 BRWRITE 2                 SPACE 2 LINES
TCBPRDN  SR    R15,R15             ZERO RETURN CODE
TCBPRDN1 MVC   ERRADDR,TCBERSV     RESTORE PREVIOUS ERROR ROUTINE ADDR
         L     R13,4(R13)          POINT TO CALLER'S SAVE AREA
         L     R14,12(R13)
         LM    R0,R12,20(R13)      RESTORE CALLERS REGS
         BR    RETREG              RETURN TO FORMAT ROUTINE
         SPACE 3
***********************************************************************
*                                                                     *
*   FORMAT OR I/O ERROR...RETURN TO FORMAT ROUTINE                    *
*                                                                     *
***********************************************************************
         SPACE
         DROP  BASE1
         USING TCBPRER,R15
TCBPRER  LA    R13,TCBSAVE         GET TCB PRINT'S SAVE AREA
         LM    R14,R12,12(R13)     RESTORE OUR REGS
         DROP  R15
         USING TCBPRBAS,BASE1      SHIFT BACK TO REG 11 AS BASE
         L     BUFREG,CURBUF       RELOAD BUFFER ADDR
         MVC   ADDR(20),TCBERMSG   MOVE ERROR MSG TO BUFFER
         BRWRITE 3                 PRINT ERROR MSG
         B     TCBPRDN             RETURN TO FORMAT
         DROP  BASE1
         EJECT
***********************************************************************
*                                                                     *
*   THIS ROUTINE WILL PRINT THE REGISTERS FOR TCBPRNT ROUTINE AND     *
*   RBPRNT ROUTINE                                                    *
*                                                                     *
***********************************************************************
         SPACE
         USING *,R15
TCBPTRG  STM   R4,R9,TCBRGSV       SAVE R4 - R9
         LR    R7,R15              SHIFT TO REG 7 AS BASE FOR CALLS
*                                  TO READ AND AD-CONVERT
         DROP  R15
         USING TCBPTRG,R7
         ST    RETREG,TCBRGSV+24   SAVE RETURN ADDR
         TM    TCBPRTSW,PCPTCB     AM I PRINTING REGS FOR PCP/MFT TCB
         BZ    TCBPTRG4            BR IF NOT
         MVC   ADDR+13(7),REG3     MOVE 'RG 10-1' TO BUFFER
         B     TCBPTRG5            BR AROUND
TCBPTRG4 MVC   ADDR+13(6),REG1     MOVE 'RG 0-7' TO BUFFER
TCBPTRG5 EQU   *
         LA    R8,2                LOAD OUTER LOOP CNT
TCBPTRG1 LA    R4,ADDR+22          LOAD WHERE-TO-PUT-IT ADDR
         LA    R9,8                LOAD INNER LOOP CNT
TCBPTRG2 LA    PREG,0(R3,R2)       LOAD ADDR OF GPRS
*                                  ERL - SIGNAL BRREAD TO GENERATE
*                                  NEW P-LIST
&PARMLST SETB  1
         BRREAD  (PREG),DATA,TJID=(R0)
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT GPR TO PRINTABLE HEX
         AH    R3,FOUR             INCR WORD INDEX
         AH    R4,ELEVEN           INCR WHERE-TO-PUT-IT ADDR
         BCT   R9,TCBPTRG2         LOOP FOR 8 GPRS
         BRWRITE 1                 PRINT LINE
         BCT   R8,TCBPTRG3         LOOP FOR 2 LINES
         L     RETREG,TCBRGSV+24   RESTORE RETURN ADDR
         LM    R4,R9,TCBRGSV       RELOAD SAVED REGS
*                                  *** NOTE BASE GETS COLBERED ON LOAD
         BR    RETREG              RETURN TO CALLER
         SPACE
TCBPTRG3 TM    TCBPRTSW,PCPTCB     TEST FOR PRINTING PCP/MFT TCB
         BZ    TCBPTRG6            BR IF NOT
         MVC   ADDR+13(6),REG4     MOVE 'RG 2-9' TO BUFFER
         NI    TCBPRTSW,XFF-PCPTCB RESET PCP/MFT TCB INDICATOR    M3208
         B     TCBPTRG1            CONTINUE WITH REGS 2-9
TCBPTRG6 MVC   ADDR+13(7),REG2     MOVE 'RG 8-15' TO BUFFER
         B     TCBPTRG1            CONTINUE WITH REGS 8-15
         EJECT
***********************************************************************
*                                                                     *
*   CONSTANTS AND SAVE AREA FOR TCBPRNT                               *
*                                                                     *
***********************************************************************
         SPACE
TCBSAVE  DC    18F'0'              SAVE AREA FOR TCB PRINT
TCBWORK1 DC    F'0'
TCBERSV  DC    F'0'                SAVE AREA FOR ERROR ROUTINE ADDR
TCBRGSV  DC    7F'0'               SAVE AREA FOR TCB REGS PRINT ROUT
         SPACE
*   PATTERN FOR LINE 1 OF TCB
TCBLN1   FMTPTRN (LBL,DTA,LBLP,DTAP,DTAC),3,3,0,5,(TCBID1),(TCBLN11+1)
         FMTPTRN (LBL,DTA,DTAP),3,4,13,19,,(TCBLN11,0)
         FMTPTRN (LBL,DTA),3,4,30,38
         FMTPTRN (LBL,DTA),3,4,49,54
         FMTPTRN (LBL,DTA),3,4,65,71
         FMTPTRN (LBL,DTA),3,4,82,88
         FMTPTRN (LBL,DTA),3,4,99,105,,,LAST
         SPACE
*   PATTERN FOR LINE 2 OF TCB
TCBLN2   FMTPTRN (LBL,DTA),3,4,13,19
         FMTPTRN (LBL,DTA),6,4,30,38
         FMTPTRN (LBL,DTA),3,4,49,54
         FMTPTRN (LBL,DTA),3,4,65,71
         FMTPTRN (LBL,DTA),3,4,82,88
         FMTPTRN (LBL,DTA,LBLP),3,4,99,105,(TCBLN21,0),,LAST
         SPACE
*   PATTERN FOR LINE 5 OF TCB
TCBLN3   FMTPTRN (LBL,LBLP,DTA,DTAP),3,4,13,19,(TCBID3),(TCBLN31,0)
         FMTPTRN (LBL,DTA),3,4,30,38
         FMTPTRN (LBL,DTA),3,4,49,54
TCBLN32  FMTPTRN (LBL,DTA,LBLP),5,4,65,71,(TCBLN33,0)
         FMTPTRN (LBL,LBLP,DTA),3,4,82,88,(TCBID3A)
         FMTPTRN (LBL,DTA),3,4,99,105,,,LAST
         SPACE
*   PATTERN FOR LINE 6 OF TCB
TCBLN4   FMTPTRN (LBL,LBLP,DTA),3,4,13,19,(TCBID4)
         FMTPTRN (LBL,DTA),3,4,30,38
         FMTPTRN (LBL,DTA),3,4,49,54
         FMTPTRN (LBL,LBLP,DTA),5,4,65,71,(TCBLN41,0)
         FMTPTRN (LBL,DTA),5,4,82,88
         FMTPTRN (LBL,DTA),3,4,99,105,,,LAST
         SPACE
*   PATTERN FOR LINE 7 OF TCB
TCBLN5   FMTPTRN (LBL,LBLP,DTA,DTAP),4,4,13,19,(TCBID5),(TCBLN51,0)
         FMTPTRN (LBL,DTA),3,4,30,38
         FMTPTRN (LBL,DTA),4,4,49,54
         FMTPTRN (LBL,DTA),4,4,65,71                             X01980
         FMTPTRN (LBL,DTA),5,4,82,88
         FMTPTRN (LBL,DTA),4,4,99,105,,,LAST
*   PATTERN FOR LINE 8 OF TCB
TCBLN8   FMTPTRN (LBL,LBLP,DTA,DTAP),3,4,13,19,(TCBID8),(TCBLN81,0)
         FMTPTRN (LBL,DTA),3,4,30,38                             X01980
         FMTPTRN (LBL,DTA),3,4,49,54                             X01980
         FMTPTRN (LBL,DTA),4,4,65,71                             X01980
         FMTPTRN (LBL,DTA),4,4,82,88                             X01980
         FMTPTRN (LBL,DTA),3,4,99,105,,,LAST                     X01980
*    PATTERN FOR LINE 9 OF TCB
TCBLN9   FMTPTRN (LBL,LBLP,DTA,DTAP),4,4,13,19,(TCBID9),(TCBLN91,0)
         FMTPTRN (LBL,DTA),5,4,30,38                             Y01980
         FMTPTRN (LBL,DTA),4,4,49,54                             Y01980
         FMTPTRN (LBL,DTA),4,4,65,71                             Y01980
         FMTPTRN (LBL,DTA),5,4,82,88                             Y01980
         FMTPTRN (LBL,DTA),5,4,99,105,,,LAST                     Y01980
*    PATTERN FOR LINE 10 OF TCB
TCBLN10  FMTPTRN (LBL,LBLP,DTA,DTAP),5,4,13,19,(TCBID10),(TCBLN101,0)
         FMTPTRN (LBL,DTA),7,4,30,38                             Y01980
         FMTPTRN (LBL,DTA),4,4,49,54                             Y01980
         FMTPTRN (LBL,DTA),3,4,65,71                             Y01980
         FMTPTRN (LBL,DTA),3,4,82,88,,,LAST                      Y10980
*    PATTERN FOR LINE 1 OF TCB EXTENSION 2
TCBE2LN1 FMTPTRN (LBL,LBLP),4,,5,,(TCBE2ID1)                     X01980
         FMTPTRN (LBL,DTA,DTAP),3,4,13,19,,(TCBE2L11,0)          Y01980
         FMTPTRN (LBL,DTA),4,4,30,38,,,LAST                      Y01980
TCBID1   DC    C'TCBRBPPIEDEBTIOCMPTRNMSSPK-FLGFLGLLSJLB'
TCBID3   DC    C'FSATCBTME'
TCBID3A  DC    C'NTCOTC'
TCBID4   DC    C'LTCIQEECB'
TCBID5   DC    C'STABTCTUSERNDSPMDIDSJSCB'                       Y01980
TCBPID2  DC    C'RES'
TCBMID2  DC    C'JST'
TCBMID3  DC    C'PIB'
TCBMID4  DC    C'XTCBLP/FLRES'     LABELS FOR 6-TH LINE OF MFT TCB
TCBID8   DC    C'RESRESRESEXT1BITSDAR'  LABELS FOR 7TH LINE AOS2 X01980
TCBID9   DC    C'EXT2XTENTTIRBBACKLSQAPIOTIM'  LABELS FOR 8TH LN Y01980
TCBID10  DC    C'TMSAVABR-TIDQECBFOESWA'                         Y01980
TCBE2ID1 DC    C'EXT2GTFRCMP'           LABELS FOR EXT2 1ST LINE Y01980
TCBE2AD  DS    F                        ADDRESS OF TCB EXT2      X01980
TCBVID2  DC    C'JPQ'
TCBVID3  DC    C'JSTCB'                                          Y01980
TCBVID4  DC    C'TSFLGD-PQEAQE'    LABELS FOR 6-TH LINE AOS/2 TCBY01980
TCBPRTSW DC    X'00'
CURMSG   DC    C'*****   CURRENT TASK   *****'
TERMMSG  DC    C'TASK HAS TERMINATED'
TCBERMSG DC    C'ERROR FORMATTING TCB'
REG1     DC    C'RG 0-7'
REG2     DC    C'RG 8-15'
REG3     DC    C'RG 10-1'
REG4     DC    C'RG 2-9'
FTCPCH   DC    18F'0'              PATCH AREA                    X01980
         SPACE
         DROP  COMBASE,R7
         EJECT
AMDPRFRB CSECT
         SPACE
***********************************************************************
*                      *** AMDPRFRB - RB PRINT ***                    *
*                                                                     *
* STATUS--OS/VS2 RELEASE 1.0                                          *
*                                                                     *
* FUNCTION--                                                          *
*    THIS ROUTINE FORMATS AND PRINTS THE RB'S IN THE RB CHAIN OFF     *
*    THE TCB                                                          *
*                                                                     *
* ENTRY POINTS--                                                      *
*    AMDPRFRB IS THE ONLY ENTRY.  CONTROL IS RECEIVED FROM AMDPRFSR.  *
*    STANDARD SUBROUTINE LINKAGE USED.                                *
*                                                                     *
* INPUTS--                                                            *
*         REGISTER 0 - TJID OF STORAGE CONTAINING TCB TO BE FORMATTED *
*         REGISTER 2 - TCB ADDRESS FOR WHICH RB'S ARE TO BE FORMATTED *
*         REGISTER 12 - ADDRESS OF COMMON AREA                        *
*                                                                     *
* OUTPUTS--                                                           *
*    WRITES FORMATTED RB CHAIN                                        *
*    WRITES MESSAGE 'INFINITE LOOP IN RB CHAIN' IF MORE THAN 50       *
*    RB'S ARE IN THE CHAIN.                                           *
*    WRITES ERROR MESSAGE 'RB FORMAT ERROR'                           *
*                                                                     *
* EXTERNAL REFERENCES--                                               *
*         BRREAD - TO OBTAIN DATA FROM THE INPUT DUMP.                *
*         BRWRITE - TO WRITE DATA TO THE 'PRINTER' DATA SET.          *
*         AMDPRTSV - FROM ADDRESSES IN COMMON, THIS CSECT IS USED     *
*                    TO SAVE, RETRIEVE, AND REMOVE RB'S FROM AN RBLIST*
*         WRDCNVT - FROM AN ADDRESS IN COMMON, TO CONVERT 4 BYTES     *
*                   TO PRINTABLE HEX.                                 *
*         ADRCNVT - FROM ADDRESS IN COMMON, TO CONVERT 3 BYTES TO     *
*                   PRINTABLE HEX.                                    *
*                                                                     *
* EXITS,NORMAL--                                                      *
*    RETURN TO CALLER THROUGH STANDARD LINKAGE UNLESS 'STOP' HAS      *
*    BEEN ENTERED BY OPERATOR IN WHICH CASE CONTROL RETURNS TO        *
*    STOP ROUTINE WITHOUT RESTORING REGISTERS.                        *
*                                                                     *
* EXITS,ERROR--                                                       *
*    NONE--PROCESSING CONTINUES AFTER AN ERROR MESSAGE IS PRINTED     *
*                                                                     *
* TABLES/WORK AREAS--                                                 *
*    AN RBLIST IS CONSTRUCTED BY A BRANCH TO AMDPRTSV.  THIS LIST     *
*    CONTAINS THE RB'S TO BE FORMATTED.  THE FORMAT IS THE SAME       *
*    AS THE TCBLIST.                                                  *
*                                                                     *
* ATTRIBUTES-- REUSABLE                                               *
*                                                                     *
* CHARACTER CODE DEPENDENCY-- NONE                                    *
*                                                                     *
* NOTES--                                                             *
*   BRREAD ERROR HANDLER:  IF A PORTION OF AN RB CANNOT BE READ       *
*   FROM THE INPUT DUMP, A MESSAGE IS PRINTED AND PROCESSING          *
*   CONTINUES WITH THE NEXT RB.                                       *
*                                                                     *
***********************************************************************
         SPACE
RBNEXT   EQU   28
RBPFXS   EQU   8                   BACK DISPL TO USEABLE PREFIX  Y01980
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         BALR  BASE1,0             ESTABLISH REG 11 AS BASE
         USING *,BASE1
RBPRNBAS LA    R3,RBPRNTSV         SAVE AREA CHAINING
         ST    R13,RBPRNTSV+4
         ST    R3,8(R13)
         LR    R13,R3
         SPACE
         USING COMMON,COMBASE
         USING OUTBUF,BUFREG
         SPACE
         MVC   RBERRSV,ERRADDR     SAVE CURRENT ERROR ROUTINE ADDR
         LA    R15,RBERROR1        ADDR OF RB ERROR ROUTINE
         ST    R15,ERRADDR         STORE IN ERROR ADDR WORD
         MVC   RBSTPSV(4),STOPEXIT SAVE CALLER' STOP ROUTINE ADDRESS
         LA    R15,RBSTP           GET ADDRESS OF RB-PRINT STOP RTN.
         ST    R15,STOPEXIT        STORE IN COMMON CSECT
         L     BUFREG,CURBUF       LOAD BUFFER BASE
         BAL   R9,RBPRGE           GO PURGE POSSIBLE RB ADDRS ON RBLIST
         XC    RBCNT,RBCNT         ZERO RB COUNT
         XC    RBCNT1,RBCNT1       ZERO RB COUNT1
         LR    R4,R2               LOAD TCB ADDR TO R4
RBLOOP1  BRREAD  (R2),DATA,TJID=(R0)
         L     R2,0(PREG)          LOAD RB ADDR
         LA    R2,0(R2)            CLEAR POSSIBLE WAIT COUNT
         LTR   R2,R2               IS IT ZERO
         BZ    RBPRNT1             YES--ASSUME END OF CHAIN
         CR    R4,R2               COMPARE TO TCB ADDR
         BE    RBPRNT1             EQUAL--LAST RB POINTS TO TCB
         BAL   R9,RBSAVE           SAVE RB ADDR ON RBLIST
         LA    R2,RBNEXT(R2)       LOAD ADDR OF PTR TO NEXT RB
         B     RBLOOP1             LOOP TO END OF CHAIN
         SPACE 2
***********************************************************************
*                                                                     *
*   PRINT RBS IN THE REVERSE ORDER AS THEY EXISTED ON THE CHAIN       *
*   NOTE THAT RBERROR1IS THE BRREAD ERROR ROUTINE FOR THE ABOVE BREADS*
*   ONLY                                                              *
*                                                                     *
***********************************************************************
         SPACE
         DROP  BASE1                                             X01980
         USING RBERROR1,R15                                      X01980
RBERROR1 LA    R13,RBPRNTSV        GET ADDRESS OF RB PRINT'S SAVE AREA
         LM    R14,R12,12(R13)     RESTORE OUR REGS              X01980
         DROP  R15                                               X01980
         USING RBPRNBAS,BASE1      SHIFT BACK TO REG 11 AS BASE  X01980
RBPRNT1  LA    R15,RBERROR         ADDR OF REAL ERROR RTN        X01980
         ST    R15,ERRADDR         STORE IN ERROR ADDR WORD      X01980
         NI    SWB,XFF-FMTERR-IOERR RESET ERROR SWITCHES         X01980
         MVC   ADDR(10),ACTRBS     MOVE 'ACTIVE RBS' TO BUFFER   X01980
         BRWRITE 2                 PRINT AS HEADING
         BAL   R9,RBGET            GET NEXT RB
         LTR   R2,R2               AM I DONE
         BZ    RBDONE              YES--RETURN TO FORMAT ROUTINE
RBPRNT2  LA    PREG,8(R2)
         BRREAD  (PREG)
         MVC   RBSIZE(1),1(PREG)   SAVE RB SIZE
         MVZ   RBTYPE(1),2(PREG)   SAVE RB TYPE
         ST    R2,RBWORK           STORE RB ADDR TO BE CONVERTED
         LA    PREG,RBWORK         LOAD ADDR OF RB ADDR FOR CONVERT
*                                  ROUTINE
         LA    R4,ADDR+5           LOAD ADDR OF WHERE TO PUT CONVERTED
*                                  ADDRESS
         L     R15,AADRCNVT        LOAD ADDR OF CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT RB ADDRESS
         TM    RBTYPE,X'C0'        TEST FOR TYPE OF RB
         BO    RBSVRB              BR IF SVRB
         BM    RBIRB               RB IF IRB OR SIRB
         LA    R7,PRBIDX           LOAD ADDR OF PRB INDEX
         MVC   ADDR(4),PRB         MOVE TYPE TO OUTPUT LINE      Y01980
         B     RBPRNT4             CONTINUE
RBSVRB   TM    RBTYPE,X'10'        TEST FOR TRANSIENT SVRB
         BO    RBTSVRB             BR IF TRANSIENT
         LA    R7,RSVRBIDX         LOAD ADDR OF RES SVRB INDEX
         MVC   ADDR(4),SVRB        MOVE TYPE TO OUTPUT LINE      Y01980
         B     RBPRNT4             CONTINUE
RBTSVRB  LA    R7,TSVRBIDX         LOAD ADDR OF TRANSIENT SVRB INDEX
         MVC   ADDR(4),SVRB        MOVE TYPE TO OUTPUT LINE      Y01980
         B     RBPRNT4             CONTINUE
RBIRB    TM    RBTYPE,X'80'        TEST FOR SIRB
         BO    RBSIRB              BR IF SIRB
         TM    RBTYPE,X'60'        TEST FOR TIRB                 Y10980
         BO    RBTIRB              BR IF TIRB                    Y01980
         LA    R7,IRBIDX           LOAD ADDR OF IRB INDEX
         MVC   ADDR(4),IRB         MOVE TYPE TO OUTPUT LINE      Y01980
         B     RBPRNT4             CONTINUE
RBSIRB   LA    R7,SIRBIDX          LOAD ADDR OF SIRB INDEX
         MVC   ADDR(4),SIRB        MOVE TYPE TO OUTPUT LINE      Y01980
         B     RBPRNT4             CONTINUE                      Y01980
RBTIRB   LA    R7,TIRBIDX          LOAD ADDR OF TIRB INDEX       Y01980
         MVC   ADDR(4),TIRB        MOVE TYPE TO OUTPUT LINE      Y01980
RBPRNT4  LR    PREG,R2             ADDR OF RB                    Y01980
         LA    R5,RBPFXS           DISPL TO BEGIN FIELD OF PREF  Y01980
         SR    PREG,R5             POINT TO BEGIN FIELD OF PREF  Y01980
         ST    PREG,RBPFXD01       STORE INTO PATTERN            Y01980
         LA    PREG,RBPFXLN1       ADDR OF PATTERN               Y01980
         L     R15,AFMTLINE        ADDR OF LINE FORMAT RTN       Y01980
         BALR  RETREG,R15          FORMAT RB PREFIX LINE         Y01980
         BRWRITE 1                 PRINT THE LINE                Y01980
         IC    R3,0(R7)            LOAD ID INDEX FOR FIRST ID    Y01980
         LA    R5,RBIDS(R3)        ADDR OF CORRECT RB ID
         MVC   ADDR+13(6),0(R5)    MOVE 'RESP', 'NM', 'FL-CDE', OR
*                                  'TAB-LN' TO OUTPUT BUFFER
         BRREAD  (R2)              RB ADDR IN REG 2
         LA    R4,ADDR+20          LOAD ADDR OF WHERE IT'S TO GO
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT THE FIELD
         MVC   ADDR+31(4),APSW     MOVE 'APSW' TO OUTPUT BUFFER
         LA    PREG,4(R2)          ADDR OF APSW IN RB
         BRREAD  (PREG)
         LA    R4,ADDR+38          ADDR OF WHERE TO PUT APSW
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT APSW
         MVC   ADDR+49(7),WC       MOVE 'SZ-STAB' TO BUFFER      Y01980
         LA    PREG,8(R2)          ADDR OF THE FIELD IN RB
         BRREAD  (PREG)
         LA    R4,ADDR+60          ADDR OF WHERE TO PUT IT
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT SZ-STAB FIELD OF RB
         IC    R3,1(R7)            LOAD ID INDEX
         LA    R5,RBIDS(R3)        ADDR OF CORRECT ID
         MVC   ADDR+71(6),0(R5)    MOVE 'FL-CDE','LPDE','RESV',OR 'EPA'
*                                  TO OUTPUT BUFFER
         LA    PREG,12(R2)         ADDR OF FIELD IN RB
         BRREAD  (PREG)
         LA    R4,ADDR+78          ADDR OF LOCATION IN BUFFER FOR RB
*                                  FIELD
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT THIS FIELD OF RB
         MVC   ADDR+89(3),PSWNM    MOVE 'PSW' TO BUFFER
         LA    PREG,16(R2)         ADDR OF PSW IN RB
         BRREAD  (PREG)
         LA    R4,ADDR+93          ADDR FOR LEFT HALF OF RESUME PSW
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT LEFT HALF OF PSW
         LA    PREG,20(R2)         ADDR OF RIGHT HALF OF PSW
         BRREAD  (PREG)
         LA    R4,ADDR+102         ADDR FOR RIGHT HALF OF PSW
         L     R15,AWRDCNVT
         BALR  RETREG,R15          CONVERT RIGHT HALF OF PSW
         BRWRITE 1                 WRITE FIRST LINE OF RB
         MVC   ADDR+13(1),QTTR     MOVE 'Q' TO BUFFER            Y01980
         LA    PREG,24(R2)         ADDR OF Q FIELD IN RB
         BRREAD  (PREG)
         LA    R4,ADDR+20          ADDR OF WHERE TO PUT Q
         L     R15,AWRDCNVT
         BALR  RETREG,R15          CONVERT Q/TTR FIELD OF RB
         MVC   ADDR+31(6),WTLNK    MOVE 'WT-LNK' TO BUFFER
         LA    PREG,28(R2)         ADDR OF WT-LINK FIELD IN RB
         BRREAD  (PREG)
         LA    R4,ADDR+38          ADDR OF WHERE TO PUT WT-LINK FIELD
         L     R15,AWRDCNVT
         BALR  RETREG,R15          CONVERT WT-LINK FIELD OF RB
         TM    RBTYPE,X'C0'        TEST RB TYPE
         BNM   PRBPRT              BR IF PRB OR SVRB             Y01980
         TM    RBTYPE,X'40'        TEST FOR IRB AND TIRB
         BO    RBPRNT3             BR IF IRB OR TIRB
         BRREAD  (R2)
         MVC   ADDR+49(2),RBNM     MOVE 'NM' TO BUFFER
         MVC   ADDR+52(8),0(PREG)  MOVE ROUTINE NAME TO BUFFER
RBPRNT3  BRWRITE 1                 WRITE LINE                    Y01980
         LA    R3,32               INDEX TO RB REGS FOR TCBPTRG  Y01980
         L     R15,ATCBPTRG        GET ADDRESS OF REG PRINT ROUTINE
         BALR  RETREG,R15          LINK TO IT
         SR    R3,R3               CLEAR IC REG
         IC    R3,RBSIZE           LOAD RB SIZE IN DOUBLE WORDS
         SLL   R3,3                SHIFT TO MAKE IT IN BYTES
         LA    R4,96               SIZE OF RB WITHOUT EXTENDED SAVEAREA
         SR    R3,R4               SUBTRACT FROM RB SIZE
         BNP   RBPRTDN             BR IF NO EXTENDED SAVEAREA
         BAL   R9,EXTSAPT          PRINT EXTENDED SAVEAREA
         B     RBPRTDN             GET NEXT RB
         SPACE 2
***********************************************************************
*                                                                     *
*   HERE TO PRINT NAME, ENTRY POINT, STARTING ADDR, AND LENGTH OF     *
*   MODULES FOR PRBS AND SVRBS                                        *
*                                                                     *
***********************************************************************
         SPACE
PRBPRT   LA    PREG,12(R2)         ADDR OF CDE PTR
         BRREAD  (PREG)
         L     R7,0(PREG)          CDE ADDR TO R7
         LA    R7,0(R7)            CLEAR HIGH ORDER BYTE
         LTR   R7,R7               IS THERE A CDE
         BZ    RBPRT3              BR IF THERE ISN'T
         BRREAD  (R7)              CDE ADDR IN REG 7
         MVC   RBCDEATR(1),0(PREG) SAVE CDE ATTRIBUTES
         LA    PREG,8(R7)          ADDR OF NAME IN CDE
         BRREAD  (PREG)
         MVC   ADDR+49(2),RBNM     MOVE 'NM' TO BUFFER
         MVC   ADDR+52(8),0(PREG)  MOVE PROGRAM NAME TO BUFFER
         LA    PREG,16(R7)         ADDR OF ENTRY POINT
         BRREAD  (PREG)
         MVC   ADDR+63(3),RBEPA    MOVE 'EPA' TO BUFFER
         LA    R4,ADDR+67          ADDR OF WHERE TO PUT EPA
         L     R15,AADRCNVT        ADDR OF 3 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT ENTRY POINT ADDRESS
         TM    RBTYPE,X'10'        TRANSIENT SVRB                Y01980
         BO    RBPRNT3             YES--SKIP CDE CODE            Y01980
         LA    PREG,20(R7)         LOAD ADDR OF MAJOR CDE OR EXTENT
*                                  LIST POINTER
         BRREAD  (PREG)
         L     R8,0(PREG)          LOAD TO R8
         MVC   RBCDEAT2(1),0(PREG) SAVE ATTR2 BYTE               Y01980
         TM    RBCDEATR,MINCDE     IS CDE A MINOR
         BO    RBPRT1              YES--GET MAJOR
RBPRT2   MVC   ADDR+76(3),RBSTA    MOVE 'STA' TO BUFFER
         LA    PREG,12(R8)         ADDR OF STARTING ADDR
         BRREAD  (PREG)
         LA    R4,ADDR+80          ADDR OF WHERE TO PUT STA
         L     R15,AADRCNVT        ADDR OF 3 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT STARTING ADDR
         MVC   ADDR+89(2),RBLN     MOVE 'LN' TO BUFFER
         LA    PREG,8(R8)          ADDR OF SIZE
         BRREAD  (PREG)
         LA    R4,ADDR+92          ADDR OF WHERE TO PUT SIZE
         L     R15,AADRCNVT
         BALR  RETREG,R15          CONVERT SIZE
         MVC   ADDR+101(4),RBATTR  MOVE 'ATR1' TO BUFFER
         HEXCNVT ADDR+106,RBCDEATR,1 CONVERT ATR1 OF CDE
         MVC   ADDR+111(4),RBATTR2 MOVE 'ATR2' TO BUFFER         Y01980
         HEXCNVT ADDR+116,RBCDEAT2,1 CONVERT ATR2 BYTE           Y01980
RBPRT3   TM    RBTYPE,X'D0'        TEST FOR SVRB                 Y01980
         BNZ   RBPRNT3             BR TO PRINT REGS AND EXTENDED
*                                  SAVEAREA IF ANY
         BRWRITE 1                 PRINT LAST LINE OF PRB
         B     RBPRTDN             GET NEXT RB
         SPACE 2
***********************************************************************
*                                                                     *
*   CDE FOR RB IS A MINOR...GET MAJOR CDE FOR EXTENT LIST PTR         *
*                                                                     *
***********************************************************************
         SPACE
RBPRT1   LA    PREG,20(R8)         ADDR OF XL PTR IN MAJOR CDE
         BRREAD  (PREG)
         L     R8,0(PREG)          LOAD EXTENT LIST PTR
         B     RBPRT2              CONTINUE
         EJECT
***********************************************************************
*                                                                     *
*   DONE WITH RB CHAIN...RETURN TO FORMAT ROUTINE                     *
*                                                                     *
***********************************************************************
         SPACE
RBDONE   BRWRITE 2                 SPACE 2 LINES
         MVC   ERRADDR,RBERRSV     RESTORE ERROR ROUTINE ADDR TO IT'S
*                                  PREVIOUS VALUE
         MVC   STOPEXIT(4),RBSTPSV RESTORE CALLER'S STOP ROUTINE
         L     R13,4(R13)          POINT TO CALLER'S SAVE AREA
         LM    R14,R12,12(R13)     RESTORE CALLER'S REGISTERS
         BR    RETREG              RETURN TO FORMAT ROUTINE
         EJECT
***********************************************************************
*                                                                     *
*   DONE PRINTING RB...LOOK FOR ANOTHER                               *
*                                                                     *
***********************************************************************
         SPACE
RBPRTDN  BAL   R9,RBGET            GET NEXT RB ADDR
         LTR   R2,R2               WAS THERE ONE
         BZ    RBDONE              NO--ALL DONE
         BRWRITE 1                 YES--SPACE A LINE
         B     RBPRNT2             CONTINUE WITH THIS RB
         SPACE 2
***********************************************************************
*                                                                     *
*   MORE THAN 50 RBS ON RB CHAIN...PRINT INFINITE LOOP MESSAGE AND    *
*   PRINT THE FIRST 50                                                *
*                                                                     *
***********************************************************************
         SPACE
TOOMANY  MVC   ADDR(25),INFMSG     MOVE INFINITE LOOP MSG TO BUFFER
         BRWRITE 2                 PRINT AND SPACE 2 LINES
         B     RBPRNT1             PRINT THE 50 WE HAVE
         EJECT
***********************************************************************
*                                                                     *
*   PRINT RB EXTENDED SAVE AREA                                       *
*                                                                     *
***********************************************************************
         SPACE
EXTSAPT  MVC   ADDR+13(5),EXTSA    MOVE 'EXTSA' TO BUFFER
         LA    R8,96               SET INDEX
EXTLOOP2 LA    R4,ADDR+22          INIT WHERE TO PUT IT ADDR
         LA    R7,8                LOAD LOOP CNT (NO OF WRDS/LINE)
EXTLOOP1 LA    PREG,0(R8,R2)       ADDR OF EXTENDED SAVEAREA WORD
         BRREAD  (PREG)
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT WORD OF EXTENDED SAVEAREA
         SH    R3,FOUR             DECR BYTE CNT
         BNP   EXTDONE             BR OUT OF LOOP IF DONE
         AH    R4,ELEVEN           INCR WHERE-TO-PUT-IT ADDR
         AH    R8,FOUR             INCR INDEX
         BCT   R7,EXTLOOP1         LOOP TILL END OF LINE
         BRWRITE 1                 PRINT THIS LINE
         B     EXTLOOP2            CONTINUE WITH NEW LINE
         SPACE
EXTDONE  BRWRITE 1                 PRINT LAST LINE
         BR    R9                  RETURN TO CALLER
         SPACE 3
***********************************************************************
*                                                                     *
*   USE TCBSAVE ROUTINE TO SAVE RB ADDRESSES                          *
*                                                                     *
***********************************************************************
         SPACE
RBSAVE   LH    R3,RBCNT1           LOAD COUNT OF TOTAL NUMB OF RBS
         AH    R3,ONEA             ADD ONE TO COUNT
         CH    R3,FIFTY            COMPARE RB COUNT TO 50 TO TEST FOR
*                                  RB CHAIN LOOP
         BH    TOOMANY             IF GT 50 RBS ON CHAIN ASSUME
*                                  INFINITE LOOP IN CHAIN
         STH   R3,RBCNT1           STORE BACK INCR COUNT
         MVC   RBTLIST,TCBLIST     SAVE TCBLIST PTR
         MVC   TCBLIST,RBLIST      MOVE IN RBLIST PTR
         L     R15,ATCBSAVE        LOAD ADDR OF TCB SAVE ROUTINE
         BALR  RETREG,R15          LINK TO TCBSAVE ROUTINE TO SAVE RB
*                                  ADDRESS ON RBLIST
         LTR   R15,R15             TEST RETURN CODE
         BNZ   RBSAVE1             RB ADDR IS A DUPLICATE OF ONE
*                                  ALREADY ON THE RBLIST...DON'T INCR
*                                  RB COUNT
         LH    R3,RBCNT            LOAD RB COUNT
         AH    R3,ONEA             INCR COUNT
         STH   R3,RBCNT            PUT IT PACK
RBSAVE1  MVC   RBLIST,TCBLIST      SAVE RBLIST PTR
         MVC   TCBLIST,RBTLIST     RESTORE TCBLIST PTR
         BR    R9                  RETURN TO CALLER
         SPACE 2
***********************************************************************
*                                                                     *
*   USE TCBRTRV AND TCBREMV ROUTINES TO GET TOP RB ADDR ON RBLIST AND *
*   THEN REMOVE IT FROM THE LIST                                      *
*                                                                     *
***********************************************************************
         SPACE
RBGET    MVC   RBTLIST,TCBLIST     SAVE TCBLIST PTR
         MVC   TCBLIST,RBLIST      MOVE IN RBLIST PTR
         LA    R2,1                LOAD CNT FOR FIRST ON LIST
         L     R15,ATCBRTRV        ADDR OF TCB RETRIEVE ROUTINE
         BALR  RETREG,R15          LINK TO GET FIRST RB ADDRESS
         LTR   R2,R2               WAS THERE ANY
         BZ    RBGET1              BR IF NONE
         L     R15,ATCBREMV        ADDRESS OF REMOVE ROUTINE
         BALR  RETREG,R15          REMOVE THIS RB ADDRESS FROM RBLIST
         LH    R3,RBCNT            LOAD RB COUNT
         SH    R3,ONEA             DECR BY ONE
         STH   R3,RBCNT            STORE BACK REDUCED RB COUNT
RBGET1   MVC   RBLIST,TCBLIST      SAVE RBLIST PTR
         MVC   TCBLIST,RBTLIST     RESTORE TCBLIST PTR
         BR    R9                  RETURN TO CALLER
         SPACE 2
***********************************************************************
*                                                                     *
*   PURGE THE RB LIST IN THE EVENT THE OPERATOR STOPPED THE DUMP      *
*                                                                     *
***********************************************************************
         SPACE
         USING *,R15
RBSTP    LA    R13,RBPRNTSV        POINT TO SAVE AREA
         LM    R14,R12,12(R13)     RESTORE REGS
         USING RBPRNBAS,BASE1      SHIFT BACK TO REG 11 AS BASE
         DROP  R15
         LA    R9,RBSTPOUT         SET RETURN ADDRESS
RBPRGE   LR    R4,R2               SAVE R2
         MVC   RBTLIST,TCBLIST     SAVE TCBLIST PTR
         MVC   TCBLIST,RBLIST      MOVE IN RBLIST PTR
         SR    R2,R2               ZERO R2 FOR COMPL REMOVAL
         L     R15,ATCBREMV        ADDR OF TCB REMOVE ROUTINE
         BALR  RETREG,R15          LINK TO IT
         MVC   RBLIST,TCBLIST      MOVE BACK NOW ZEROED PTR
         MVC   TCBLIST,RBTLIST     RESTORE TCBLIST PTR
         LR    R2,R4               RESTORE R2
         BR    R9                  RETURN TO CALLER
RBSTPOUT MVC   ERRADDR(4),RBERRSV  RESTORE ERROR HANDLER'S ADDR
         L     R15,RBSTPSV         GET CALLER'S STOP ADDRESS
         ST    R15,STOPEXIT        STORE BACK IN COMMON CSECT
         BR    R15                 BRANCH TO IT
         EJECT
***********************************************************************
*                                                                     *
*   FORMAT PRINT LINE FOR RB AND PRINT THE LINE                       *
*                                                                     *
***********************************************************************
         SPACE
RBFMPR   L     R15,AFMTLINE        LOAD ADDR OF LINE FORMAT ROUT X01980
         BALR  RETREG,R15          FORMAT THE RB LINE            X01980
         MVC   ADDR(4),RBNAME      SET TYPE OF RB IN LINE        X01980
         BRWRITE 1                 PRINT THE LINE                X01980
         BR    R9                  RETURN TO CALLER              X01980
***********************************************************************
*                                                                     *
*   ERROR IN RB FORMAT...WRITE ERROR MESSAGE AND CONTINUE WITH        *
*   NEXT RB.                                                          *
*                                                                     *
***********************************************************************
         SPACE
         DROP  BASE1
         USING RBERROR,R15
RBERROR  LA    R13,RBPRNTSV        GET ADDRESS OF RB PRINT'S SAVE AREA
         LM    R14,R12,12(R13)     RESTORE OUR REGS
         DROP  R15
         USING RBPRNBAS,BASE1      SHIFT BACK TO REG 11 AS BASE
         L     BUFREG,CURBUF       RELOAD BUFFER ADDR
         BRWRITE 1                 SPACE A LINE
         MVC   ADDR(15),RBERRMSG   MOVE ERROR MSG TO BUFFER
         BRWRITE 1                 PRINT ERROR MSG
         NI    SWB,XFF-FMTERR-IOERR RESET ERROR SWITCHES
         B     RBPRTDN             CONTINUE
         EJECT
***********************************************************************
*                                                                     *
*   SAVEAREA AND CONSTANTS FOR RBPRNT ROUTINE                         *
*                                                                     *
***********************************************************************
         SPACE
RBPRNTSV DC    18F'0'              RB PRINT'S SAVE AREA
ATCBPTRG DC    A(TCBPTRG)          ADDRESS OF PRINT REG ROUTINE IN
*                                  TCB FORMATTING ROUTINE
RBERRSV  DC    F'0'                SAVE AREA FOR PREVIOUS ERROR ROUTINE
*                                  ADDRESS
RBSTPSV  DC    F'0'                SAVE AREA FOR STOP ROUTINE ADDR
RBWORK   DC    F'0'
RBTLIST  DC    F'0'
RBLIST   DC    F'0'
RBCNT    DC    H'0'                COUNT OF RB ADDRESSES ON RBLIST
RBCNT1   DC    H'0'                TOTAL COUNT OF RBS FOR LOOP CHECK
RBSIZE   DC    X'00'
RBTYPE   DC    X'00'
RBCDEATR DC    X'00'
RBCDEAT2 DC    X'00'               CDE ATR2 SAVE AREA            Y01980
PRBIDX   DC    X'0018'
RSVRBIDX DC    X'0018'
TSVRBIDX DC    X'061E'
IRBIDX   DC    X'0C24'
TIRBIDX  DC    X'0000'                                           Y01980
SIRBIDX  DC    X'1224'
RBIDS    DC    CL6'RESV'
         DC    CL6'RESV'                                         Y01980
         DC    CL6'FL-PSA'
         DC    CL6'NM'
         DC    CL6'FL-CDE'
         DC    CL6'LPDE'                                         Y01980
         DC    CL6'EPA'
ACTRBS   DC    C'ACTIVE RBS'
RBERRMSG DC    C'RB FORMAT ERROR'
INFMSG   DC    C'INFINITE LOOP IN RB CHAIN'
APSW     DC    C'APSW'
WC       DC    C'SZ-STAB'                                        Y01980
PSWNM    DC    C'PSW'
QTTR     DC    C'Q'                                              Y01980
WTLNK    DC    C'WT-LNK'
EXTSA    DC    C'EXTSA'
RBNM     DC    C'NM'
RBEPA    DC    C'EPA'
RBSTA    DC    C'STA'
RBLN     DC    C'LN'
LRBNM    DC    CL4'LRB'
LPRBNM   DC    CL4'LPRB'
T2SVCNM  DC    C'SVC-T2'
SZSTNM   DC    CL8'SZ/STAB'
USENM    DC    C'USE/EP'
RBATTR   DC    C'ATR1'
RBATTR2  DC    C'ATR2'                                           Y01980
RBPFXLN1 FMTPTRN (LBL,LBLP,DTA,DTAP),4,4,13,20,(RBPFXID1),(RBPFXD01,0)
         FMTPTRN (LBL,DTA),7,4,31,40,,,LAST  RB PREFIX PATTERN   Y01980
RBPFXID1 DC    C'FLG1WC-L-IC'                                    Y01980
RBNAME   DS    XL4                 TYPE OF RB BEING FORMATTED    X01980
PRB      DC    C'PRB '             NAME FOR PRB                  X01980
LPRB     DC    C'LPRB'             NAME FOR LPRB                 X01980
IRB      DC    C'IRB '             NAME FOR IRB                  X01980
SIRB     DC    C'SIRB'             NAME FOR SIRB                 X01980
SVRB     DC    C'SVRB'             NAME FOR SVRB                 X01980
TIRB     DC    C'TIRB'             NAME FOR TIRB                 X01980
XRB      DC    C'XRB '             NAME FOR UNKNOWN RB           X01980
FRBPCH   DC    30F'0'              PATCH AREA                    X01980
         DROP  BASE1,COMBASE
         EJECT
AMDPRFMS CSECT
         SPACE
***********************************************************************
*                 *** AMDPRFMS - MSS PRINT ***                        *
*                                                                     *
* STATUS--OS/VS2 RELEASE 1.0                                          *
*                                                                     *
* FUNCTION--                                                          *
*    THIS ROUTINE PRINTS MSS INFORMATION FOR THE TCB BEING FORMATTED. *
*                                                                     *
* ENTRY POINTS--                                                      *
*    AMDPRFMS IS THE ONLY ENTRY.  CONTROL IS RECEIVED FROM AMDPRFSR.  *
*    STANDARD SUBROUTINE LINKAGE USED.                                *
*                                                                     *
* INPUTS--                                                            *
*         REGISTER 0 - TJID OF STORAGE CONTAINING TCB TO BE FORMATTED *
*         REGISTER 2 - TCB ADDRESS FOR WHICH MSS INFO IS TO BE        *
*                      FORMATTED.                                     *
*         REGISTER 12 - ADDRESS OF COMMON AREA                        *
*                                                                     *
* OUTPUTS--                                                           *
*    WRITES DUMMY PQE FOLLOWED BY THE PQE CHAIN.                      *
*    WRITES ERROR MESSAGE 'FORMAT ERROR IN MAIN STORAGE BLOCKS',      *
*    AND 'INFINITE LOOP IN PQES'.                                     *
*                                                                     *
* EXTERNAL REFERENCES--                                               *
*         BRREAD - TO OBTAIN DATA FROM THE INPUT DUMP.                *
*         BRWRITE - TO WRITE DATA TO THE 'PRINTER' DATA SET.          *
*         AMDPRGFR - FROM AN ADDRESS IN COMMON, TO FORMAT A LINE      *
*                    DESCRIBED BY THE FMTPTRN MACRO INSTRUCTION.      *
*                                                                     *
* EXITS,NORMAL--                                                      *
*    RETURN TO CALLER THROUGH STANDARD LINKAGE.                       *
*                                                                     *
* EXITS,ERROR--                                                       *
*    SAME AS NORMAL EXIT                                              *
*                                                                     *
* TABLES/WORK AREAS--                                                 *
*    FMTPTRN MACRO IS USED TO GENERATE A PATTERN FOR THE FORMATTED    *
*    CONTROL BLOCKS.                                                  *
*                                                                     *
* ATTRIBUTES-- REUSABLE                                               *
*                                                                     *
* CHARACTER CODE DEPENDENCY-- NONE                                    *
*                                                                     *
* NOTES--                                                             *
*   BRREAD ERROR HANDLER:  IF THE PQE POINTER OR PQE'S CANNOT BE      *
*   READ A MESSAGE IS PRINTED AND CONTROL RETURNS TO AMDPRFSR.        *
*                                                                     *
***********************************************************************
         SPACE
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTER
         BALR  BASE1,0             ESTABLISH REG 11 AS BASE
         USING *,BASE1
MSSBASE  LA    R3,MSSSAVE          SAVE AREA CHAINING
         ST    R13,MSSSAVE+4
         ST    R3,8(R13)
         LR    R13,R3
         SPACE
         USING COMMON,COMBASE
         SPACE
         MVC   MSSPRERS,ERRADDR    SAVE PREVIOUS ROUTINES ERROR ROUT
*                                  ADDR
         LA    R15,MSSERR          LOAD MSSPRNT'S ERROR ROUT ADDR
         ST    R15,ERRADDR         ENABLE THE ERROR ROUTINE
         SPACE 2
***********************************************************************
*                                                                     *
*   PRINT PQES FOR AOS/2                                              *
*                                                                     *
***********************************************************************
         SPACE
         XC    PQECNT,PQECNT       ZERO PQE COUNT
         LA    PREG,TCBPQE+1(R2)   LOAD ADDR OF PTR TO DUMMY PQE Y01980
         ST    PREG,MSSPTN1A       STORE DUMMY PQE PTR INTO PATTERN
         BCTR  PREG,0              MAKE A WORD BDY               Y01980
         BRREAD  (PREG),DATA,TJID=(R0)
         L     R2,0(PREG)          LOAD PTR TO DUMMY PQE
         LA    R2,0(R2)            CLEAR POSSIBLE HI BYTE
         LTR   R2,R2               IS THERE A DUMMY PQE
         BZ    MSSPRDNA            NO--RETURN TO CALLER
         BAL   R9,MSSTITLE         YES--PRINT MSS TITLE
         LA    PREG,8(R2)          ADDR OF PQE POINTERS IN DUMMY PQE
         ST    PREG,MSSPTN1B       STORE INTO PATTERN
         BRREAD  (PREG)
         L     R2,0(PREG)          LOAD ADDR OF FIRST PQE TO R2
         LA    PREG,MSSPTN1        LOAD ADDR OF DUMMY PQE PATTERN
         BAL   R9,MSSFMPR2         GO FORMAT LINE, AND PRINT AND SPACE
*                                  TWO LINES
MSSPRLP1 LA    R2,0(R2)            CLEAR POSSIBLE HI BYTE FROM PQE ADDR
         LTR   R2,R2               TEST FOR ZERO PQE ADDR
         BZ    MSSPRDN             ZERO--ALL DONE
         ST    R2,MSSPTN2A         STORE PQE ADDR INTO PATTERN
         LA    PREG,MSSPTN2        LOAD ADDR OF PQE PATTERN
         BAL   R9,MSSFMPR1         GO FORMAT LINE, AND PRINT AND SPACE
*                                  ONE LINE
         LA    PREG,MSSPTN3        LOAD ADDR OF PATTERN FOR SECOND LINE
*                                  OF PQE
         BAL   R9,MSSFMPR2         GO FMT LN, PRT AND SPC 2 LNS
         LA    PREG,8(R2)          LOAD ADDR OF PTR TO NEXT PQE
         LH    R3,PQECNT           LOAD PQE COUNT
         AH    R3,ONEA             ADD 1 TO IT
         CH    R3,FIFTY            COMPARE TO 50
         BH    MSSLOOP             GT 50--CONSIDER IT A LOOP IN PQES
         STH   R3,PQECNT           STORE BACK PQECNT
         BRREAD  (PREG)
         L     R2,0(PREG)          LOAD PTR TO NEXT PQE
         B     MSSPRLP1            LOOP FOR ALL PQES
         SPACE 2
***********************************************************************
*                                                                     *
*   PRINT MSS TITLE                                                   *
*                                                                     *
***********************************************************************
         SPACE
MSSTITLE L     BUFREG,CURBUF       LOAD OUTPUT BUFFER ADDR
         USING OUTBUF,BUFREG
         MVC   ADDR(L'MSSVTTL),MSSVTTL MOVE AOS/2 MSS TITLE TO BUF
MSSTTL2  BRWRITE 2                 PRINT TITLE AND SPACE 2 LINES
         BR    R9                  RETURN TO CALLER
         DROP  BUFREG
         SPACE 2
***********************************************************************
*                                                                     *
*   FORMAT AND PRINT LINE                                             *
*                                                                     *
***********************************************************************
         SPACE
MSSFMPR3 LA    R3,3                LOAD NUMBER OF SPACES
         B     MSSFMPRA            CONTINUE
MSSFMPR2 LA    R3,2                LOAD NUMBER OF SPACES
         B     MSSFMPRA            CONTINUE
MSSFMPR1 LA    R3,1                LOAD NUMBER OF SPACES
MSSFMPRA L     R15,AFMTLINE        LOAD ADDR OF LINE FORMAT ROUT
         BALR  RETREG,R15          GO FORMAT PRINT LINE
         LR    PREG,R3             LOAD NUMBER OF LINES TO SPACE
         L     R15,AWRITE          LOAD ADDR OF WRITE ROUTINE
         BALR  RETREG,R15          GO PRINT LINE AND SPACE SPEC NUMB
*                                  OF LINES
         BR    R9                  RETURN TO CALLER
         SPACE 2
***********************************************************************
*                                                                     *
*   GREATER THAN 50 PQES...LET'S CONSIDER IT A LOOP                   *
*                                                                     *
***********************************************************************
         SPACE
MSSLOOP  L     BUFREG,CURBUF       LOAD ADDR OF OUTPUT BUFFER
         USING OUTBUF,BUFREG
         MVC   ADDR(L'MSSLPMSG),MSSLPMSG MOVE PQE LOOP MSG TO BUFFER
         BRWRITE 3                 PRINT AND SPACE 3 LINES
         B     MSSPRDNA            RETURN TO FORMAT ROUTINE
         SPACE 2
***********************************************************************
*                                                                     *
*   ALL DONE...RETURN TO FORMAT ROUTINE                               *
*                                                                     *
***********************************************************************
         SPACE
MSSPRDN  BRWRITE 1                 SPACE ONE MORE LINE
MSSPRDNA MVC   ERRADDR,MSSPRERS    RESTORE PREVIOUS ERROR ROUT ADDR
         L     R13,4(R13)          GET CALLER'S SAVE AREA ADDRESS
         LM    R14,R12,12(R13)     RESTORE HIS REGS
         BR    RETREG              RETURN TO CALLER (FORMAT ROUTINE)
         EJECT
***********************************************************************
*                                                                     *
*   MSS PRINT FORMAT ERROR                                            *
*                                                                     *
***********************************************************************
         SPACE
         DROP  BASE1
         USING MSSERR,R15
MSSERR   LA    R13,MSSSAVE         GET MSS PRINT'S SAVE AREA
         LM    R14,R12,12(R13)     RESTORE OUR REGS
         DROP  R15
         USING MSSBASE,BASE1       SHIFT BACK TO BASE1 - REG 11
         L     BUFREG,CURBUF       LOAD OUTPUT BUFFER ADDR
         BRWRITE 1                 SPACE A LINE
         MVC   ADDR(L'MSSERMSG),MSSERMSG MOVE ERROR MSG TO BUFFER
         BRWRITE 3                 PRINT AND SPACE 3 LINES
         B     MSSPRDNA            RETURN TO FORMAT
         EJECT
***********************************************************************
*                                                                     *
*   CONSTANTS FOR MSSPRNT ROUTINE                                     *
*                                                                     *
***********************************************************************
         SPACE
MSSSAVE  DC    18F'0'              MSS PRINT'S SAVE AREA
MSSPRERS DC    F'0'                SAVE AREA FOR PREVIOUS ERR ROUT ADR
         SPACE
*   PATTERN FOR AOS/2 DUMMY PQE
MSSPTN1  FMTPTRN (DTA,DTAP,LBL,LBLP),5,3,0,7,(MSSDPID),(MSSPTN1A,0)
         FMTPTRN (DTA,DTAP,LBL),5,4,16,22,,(MSSPTN1B,0)          Y01980
         FMTPTRN (DTA,LBL),4,4,33,38,,,LAST                      Y01980
         SPACE
*   PATTERN FOR LINE 1 OF AOS/2 PQE
MSSPTN2  FMTPTRN (DTA,DTAC,DTAP,LBL,LBLP),3,3,0,5,(MSSPQID1),(MSSPTN2A+X
               1)
         FMTPTRN (DTA,DTAP,LBL),3,4,14,18,,(MSSPTN2A,0)
         FMTPTRN (DTA,LBL),3,4,29,33
         FMTPTRN (DTA,LBL),3,4,44,48
         FMTPTRN (DTA,LBL),3,4,59,63,,,LAST
         SPACE
*   PATTERN FOR LINE 2 OF AOS/2 PQE
MSSPTN3  FMTPTRN (DTA,LBL),3,4,14,18
         FMTPTRN (DTA,LBL),3,4,29,33
         FMTPTRN (DTA,LBL),3,4,44,48
         FMTPTRN (DTA,LBL),3,4,59,63,,,LAST                      Y01980
         SPACE
*   PATTERN FOR PCP/MFT BOUNDRY BOX W/O HIERARCHY SUPPORT
MSSPTN4  FMTPTRN (DTA,DTAP),,4,,5,,(MSSPTN4A,0)
         FMTPTRN (DTA,LBL,LBLP),2,4,14,17,(MSSMID1),,LAST
         SPACE
*   PATTERN FOR PCP/MFT WITH HIERARCHY SUPPORT
MSSPTN5  FMTPTRN (DTA,DTAP,LBL,LBLP),6,4,0,7,(MSSMID2),(MSSPTN5A,0)
         FMTPTRN (DTA,LBL),2,4,16,19
         FMTPTRN (DTA,DTAP,LBL),6,4,30,37,,(MSSPTN5B,0)
         FMTPTRN (DTA,LBL),2,4,46,49,,,LAST
         SPACE
MSSDPID  DC    C'D-PQEFIRSTLAST'
MSSPQID1 DC    C'PQEFFBLFBNPQPPQTCBRSIRADFLG'
MSSMID1  DC    C'TO'
MSSMID2  DC    C'HIER 0TOHIER 1TO'
PQECNT   DC    H'0'                PQE CNTR USED TO PREVENT LOOP
MSSVTTL  DC    C'MAIN STORAGE'
MSSFTTL  DC    C'P/P BOUNDARIES'
MSSLPMSG DC    C'INFINITE LOOP IN PQES'                          Y01980
MSSERMSG DC    C'FORMAT ERROR IN MAIN STORAGE BLOCKS'
FMSPCH   DC    10F'0'              PATCH AREA                    X01980
         DROP  BASE1,COMBASE
         EJECT
AMDPRFLD CSECT
         SPACE
***********************************************************************
*                *** AMDPRFLD - LOAD LIST PRINT ***                   *
*                                                                     *
* STATUS--OS/VS2 RELEASE 1.0                                          *
*                                                                     *
* FUNCTION--                                                          *
*    THIS ROUTINE PRINTS THE LOAD LIST INCLUDING THE JOB PACK QUEUE.  *
*                                                                     *
* ENTRY POINTS--                                                      *
*    AMDPRFLD IS THE ONLY ENTRY.  CONTROL IS RECEIVED FROM AMDPRFSR.  *
*    STANDARD SUBROUTINE LINKAGE USED.                                *
*                                                                     *
* INPUTS--                                                            *
*         REGISTER 0 - TJID OF STORAGE CONTAINING TCB TO BE FORMATTED *
*         REGISTER 2 - TCB ADDRESS FOR WHICH LOAD LIST IS TO BE       *
*                      FORMATTED.                                     *
*         REGISTER 12 - ADDRESS OF COMMON AREA                        *
*                                                                     *
* OUTPUTS--                                                           *
*    WRITES FORMATTED LOAD LIST, AND JOB PACK QUEUE.                  *
*    WRITES MESSAGES 'NO ELEMENTS ON LOAD LIST',  'NOTHING IN JOB     *
*    PACK',AND 'NO EXTENT LIST'.                                      *
*    WRITES ERROR MESSAGES 'ERROR IN LOAD LIST'  'ERROR IN JOB PACK   *
*    QUEUE','ERROR IN EXTENT LIST','INFINITE LOOP IN LOAD LIST',      *
*    AND INFINITE LOOP IN JOB PACK QUEUE'.                            *
*                                                                     *
* EXTERNAL REFERENCES--                                               *
*         BRREAD - TO OBTAIN DATA FROM THE INPUT DUMP.                *
*         BRWRITE - TO WRITE DATA TO THE 'PRINTER' DATA SET.          *
*         AMDPRGFR - FROM AN ADDRESS IN COMMON, TO FORMAT A LINE      *
*                    DESCRIBED BY THE FMTPTRN MACRO INSTRUCTION.      *
*         ADRCNVT - FROM ADDRESS IN COMMON, TO CONVERT 3 BYTES TO     *
*                   PRINTABLE HEX.                                    *
*                                                                     *
* EXITS,NORMAL--                                                      *
*    RETURN TO CALLER THROUGH STANDARD LINKAGE.                       *
*                                                                     *
* EXITS,ERROR--                                                       *
*    SAME AS NORMAL EXIT                                              *
*                                                                     *
* TABLES/WORK AREAS--                                                 *
*    FMTPTRN MACRO IS USED TO GENERATE A PATTERN FOR THE FORMATTED    *
*    CONTROL BLOCKS.                                                  *
*                                                                     *
* ATTRIBUTES-- REUSABLE                                               *
*                                                                     *
* CHARACTER CODE DEPENDENCY-- NONE                                    *
*                                                                     *
* NOTES--                                                             *
*   BRREAD ERROR HANDLER:  IF A CDE CANNOT BE READ FROM THE INPUT     *
*   DUMP, A MESSAGE IS PRINTED.  IF THE LOAD LIST IS BEING FORMATTED  *
*   AN ATTEMPT IS MADE TO FORMAT THE JOB PACK QUEUE, IF THE JOB       *
*   PACK QUEUE IS BEING FORMATTED CONTROL RETURNS TO AMDPRFSR.        *
*                                                                     *
***********************************************************************
         SPACE
GOTONE   EQU   128
JBPQPRT  EQU   64
JPQPTR   EQU   44
PIBJPQ   EQU   44                                                X01980
TCBPIB   EQU   124
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         BALR  BASE1,0             ESTABLISH REG 11 AS BASE
         USING LOADBASE,BASE1
LOADBASE LA    R3,LOADSAVE         SAVE AREA CHAINING
         ST    R13,LOADSAVE+4
         ST    R3,8(R13)
         LR    R13,R3
         SPACE
         USING COMMON,COMBASE
         SPACE
         STH   R0,LODTJID          SAVE TJID VALUE
         ST    R2,LDTCBSV          SAVE TCB ADDRESS
         MVI   LDSW,0              ZERO LOAD SWITCH
         MVC   LDERSV,ERRADDR      SAVE PREV ERROR ROUTINE ADDRESS
         LA    R15,LOADERR         ADDR OF LOADPRT ERROR ROUTINE
         ST    R15,ERRADDR         STORE IN ERROR ADDR WORD
         L     BUFREG,CURBUF       LOAD BUFFER ADDRESS
         USING OUTBUF,BUFREG
         MVC   ADDR(9),LDTITLE     MOVE TITLE TO BUFFER
         BRWRITE 2                 PRINT TITLE
         LA    PREG,TCBLLEP(R2)    ADDR OF LOAD LIST PTR
         BRREAD  (PREG),DATA,TJID=LODTJID
         L     R2,0(PREG)          LOAD LOAD LIST PTR TO R2
LOADLP3A LA    R10,255             LOOP CONTROL FOR LOAD LIST   SA53335
         ST    R10,LOOPCTR         SAVE COUNTER                 SA53335
LOADLP3  LTR   PREG,R2             LLE PTR TO PARM REG AND TEST IT
         BZ    LOADDONE            ALL DONE IF ZERO
         BRREAD  (PREG)
         MVC   NXTLLE(4),0(PREG)   SAVE ADDR OF NEXT LOAD LIST ELEMENT
         LA    PREG,4(R2)          ADDR OF CDE PTR
         BRREAD  (PREG)
         L     R2,0(PREG)          LOAD CDE ADDR TO R2
         LA    R2,0(R2)            CLEAR RESP CNT
         MVC   LOADRESP(1),0(PREG) SAVE RESP COUNT
         LTR   R2,R2               TEST FOR CDE
         BZ    LOADPRT6            NO CDE--FORGET THIS LLE
LOADPRT8 OI    LDSW,GOTONE         SET SW TO INDICATE SOMETHING ON LOAD
*                                  LIST
         MVC   ADDR(3),CDEID       MOVE 'CDE' TO BUFFER
         LA    R4,ADDR+5           ADDR OF WHERE TO PUT CDE ADDR
         L     R15,AADRCNVT        ADDR OF 3 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT CDE ADDR
         MVC   ADDR+14(2),NMID     MOVE 'NM' TO BUFFER
         BRREAD  (R2)
         MVC   CDEATR1(4),0(PREG)  SAVE ATR1 OF CDE AND PTR TO NEXT
         LA    PREG,8(R2)          ADDR OF FIRST 4 BYTES OF NAME
         BRREAD  (PREG)
         MVC   ADDR+17(4),0(PREG)  MOVE 4 BYTES OF NAME
         LA    PREG,12(R2)         ADDR OF SECOND 4 BYTES OF NAME
         BRREAD  (PREG)
         MVC   ADDR+21(4),0(PREG)  MOVE 4 BYTES OF NAME
         MVC   ADDR+28(3),USEID    MOVE 'USE' TO BUFFER
         LA    PREG,4(R2)          POINT TO 2ND USECNT FIELD     Y01980
         BRREAD (PREG)             READ 1ST HALF OF USE CNT      Y01980
         LR    R5,PREG             LOAD FROM ADDR                Y01980
         LA    R4,ADDR+32          LOAD TO ADDR                  Y01980
         BAL   R9,BYTECNVT         CONVERT ONE BYTE OF USECNT    Y01980
         LA    PREG,16(R2)         ADDR OF USE-EPA
         BRREAD  (PREG)
         LR    R5,PREG             ADDR OF USE COUNT
         LA    R4,ADDR+34          WHERE TO PUT USE COUNT
         BAL   R9,BYTECNVT         GO CONVERT USE COUNT
         MVC   ADDR+39(4),RESPID   MOVE 'RESP' TO BUFFER
         TM    LDSW,JBPQPRT        PRINTING JOB PACK Q
         BNO   LOADPRT9            BR IF NOT FOR RESPONSIBILITY CNT
         MVC   ADDR+44(2),NA       NO RESP CNT--MOVE 'NA' TO BUFFER
         B     LOADPRTD            BR ARROUND
LOADPRT9 LA    R5,LOADRESP         ADDR OF RESPONSIBILITY COUNT
         LA    R4,ADDR+44          WHERE TO PUT RESP CNT
         BAL   R9,BYTECNVT         GO CONVERT RESP CNT
LOADPRTD MVC   ADDR+69(3),EPAID    MOVE 'EPA' TO BUFFER
         LA    R4,ADDR+73          ADDR OF WHERE-TO-PUT-IT
         L     R15,AADRCNVT        ADDR OF 3 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT ENTRY POINT ADDRESS
         MVC   ADDR+49(4),ATR1ID   MOVE 'ATR1' TO BUFFER
         LA    R5,CDEATR1          ADDR OF CDE ATTRIBUTES
         LA    R4,ADDR+54          WHERE TO PUT ATR1
         BAL   R9,BYTECNVT         CONVERT ATR1
LOADPRT7 LA    PREG,20(R2)         ADDR OF EXTENT LIST PTR OR MAJOR CDE
*                                  IF THIS CDE IS A MINOR
         BRREAD  (PREG)
         L     R2,0(PREG)          LOAD ADDR OF EXTENT LIST OR MAJOR
*                                  CDE
         MVC   ADDR+59(4),ATR2ID   MOVE 'ATR2' TO BUFFER         Y01980
         LR    R5,PREG             LOAD FROM ADDR                Y01980
         LA    R4,ADDR+64          LOAD TO ADDR                  Y01980
         BAL   R9,BYTECNVT         CONVERT ATTR2 BYTE            Y01980
         TM    CDEATR1,MINCDE      WAS IT A MINOR CDE
         BO    LOADPRT1            YES--GET ADDR OF EXTENT LIST FROM
*                                  MAJOR
LOADPRT2 LTR   R2,R2               IS THERE AN EXTENT LIST
         BZ    NOXLST              NO--TELL'EM ABOUT IT
         LA    PREG,4(R2)          ADDR OF NUMB OF RELOC FACTORS
         BRREAD  (PREG)
         L     R3,0(PREG)          LOAD NUMBER OF RELOCATION FACTORS
*                                  TO R3
         CL    R3,F25              IS IT GT 25
         BH    XLSTER              YES--DON'T PRINT IT
         LTR   R3,R3               IS IT ZERO
         BZ    XLSTER              YES--ERROR
         LA    R7,8(R2)            ADDR OF FIRST BLOCK LN
         LR    R8,R3               LOAD NUMB TO R8
         SLL   R8,2                MULTIPLY BY 4
         AR    R8,R7               ADDR OF FIRST BLOCK ADDR
LOADLP1  SR    R10,R10             ZERO INDEX REG
         LA    R9,2                LOAD COUNT FOR NUMB OF ENTRIES PER
*                                  LINE
         MVC   ADDR+82(3),STAID    MOVE 'STA' TO BUFFER
         MVC   ADDR+95(2),LNID     MOVE 'LN' TO BUFFER
LOADLP2  BRREAD  (R8)              ADDR OF BLOCK ADDR IN REG 8
         LA    R4,ADDR+86(R10)     ADDR OF WHERE TO PUT STA
         L     R15,AADRCNVT ADDR OF 3 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT STARTING ADDRESS
         LA    R4,ADDR+98(R10)     ADDR OF WHERE TO PUT LN
         LR    PREG,R7             ADDR OF BLOCK LN
         BRREAD  (R7)
         L     R15,AADRCNVT        ADDR OF 3 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT LENGTH OF BLOCK
         LA    R7,4(R7)            INCR LENGTH ADDR
         LA    R8,4(R8)            INCR BLOCK ADDR ADDR
         LA    R10,25              LOAD INDEX FOR SECOND ENTRY ON LINE
         BCT   R3,LOADPRT3         LOOP FOR NO OR REL FACTORS
         B     LOADPRT5            DONE--PRINT LINE
         SPACE
LOADPRT3 BRWRITE 1                 LINE FULL--PRINT IT           Y01980
         B     LOADLP1             START NEW LINE
         SPACE
NOXLST   MVC   ADDR+82(L'NXLSTMSG),NXLSTMSG MOVE MESSAGE         Y01980
         B     LOADPRT5            PRINT THE CDE
XLSTER   MVC   ADDR+82(20),XLSTEMSG MOVE ERROR MSG TO BUFFER     Y01980
         SPACE
LOADPRT5 BRWRITE 1                 PRINT THE CDE
         TM    LDSW,JBPQPRT        IS JOB PACK QUEUE BEING PRINTED
         BO    JPQPRT              YES--CONTINUE WITH NEXT CDE
LOADPRT6 L     R2,NXTLLE           LOAD ADDR OF NEXT LOAD LIST ELEMENT
         LA    R2,0(R2)            CLEAR HIGH ORDER BYTE
         L     R10,LOOPCTR         RESTORE COUNTER REGISTER     SA53335
         BCT   R10,RESTCTR1        GO UPDATE COUNTER & CONTINUE SA53335
* IF FALL THROUGH POSSIBLE LOOP - ISSUE COMMENT                 SA53335
         SPACE
         MVC   ADDR(L'LLLOOPMG),LLLOOPMG MOVE MSG TO BUFFER     SA53335
         B     LOOPPRT1            PRINT LOAD LIST LOOP MESSAGE SA53335
RESTCTR1 ST    R10,LOOPCTR         UPDATE COUNTER SAVE AREA     SA53335
         B     LOADLP3             LOOP THROUGH ENTIRE LOAD LST SA53335
RESTCTR2 ST    R10,LOOPCTR         UPDATE COUNTER SAVE AREA     SA53335
         B     LOADPRT8            FORMAT JOB PACK QUEUE        SA53335
         SPACE
LOADPRT1 NI    CDEATR1,XFF-MINCDE  RESET MINOR FLAG
         B     LOADPRT7            CONTINUE
         SPACE 2
***********************************************************************
*                                                                     *
*   INTERFACE ROUTINE FOR JOB PACK QUEUE PRINTING                     *
*                                                                     *
***********************************************************************
         SPACE
JPQPRTA  LA    R10,256             LOOP CONTROL FOR JOB PACK Q  SA53335
         ST    R10,LOOPCTR         SAVE COUNTER                 SA53335
JPQPRT   L     R2,NXTCDE           LOAD ADDR OF NEXT CDE ON Q
         LA    R2,0(R2)            CLEAR HIGH ORDER BYTE
         LTR   R2,R2               TEST FOR END OF Q
         BZ    LOADDONE            ALL DONE IF 0
         LA    PREG,NXTCDE         POINT PREG TO CDE ADDRESS
         L     R10,LOOPCTR         RESTORE COUNT REG            SA53335
         BCT   R10,RESTCTR2        GO UPDATE CTR AND CONTINUE   SA53335
         SPACE
* IF FALL THROUGH POSSIBLE LOOP IN JOB PACK QUEUE - ISSUE COMMENT
         MVC   ADDR(L'JPLOOPMG),JPLOOPMG PUT MESSAGE IN BUFFER  SA53335
LOOPPRT1 BRWRITE 1                 PRINT LOOP MESSAGE           SA53335
         B     LOADDONE            TERMINATE CURRENT PROCESS    SA53335
         EJECT
***********************************************************************
*                                                                     *
*   DONE WITH LOAD LIST                                               *
*                                                                     *
***********************************************************************
         SPACE
LOADDONE TM    LDSW,JBPQPRT        HAS THE JOB PACK Q BEEN PRINTED
         BO    LDDONE2             BR IF IT HAS
         TM    LDSW,GOTONE         WAS ANYTHING ON LOAD LIST
         BO    LDDONE1             BR IF THERE WAS
         MVC   ADDR(24),NOLLEMSG   MOVE MSG TO BUFFER
         BRWRITE 1                 PRINT NO LLE MESSAGE
LDDONE1  BRWRITE 2                 SPACE 2 LINES
         OI    LDSW,JBPQPRT        INDICATE PRINTING JOB PACK Q
         MVC   ADDR(14),JPQTTL     MOVE JOB PACK Q TITLE TO BUF
         BRWRITE 2                 PRINT JOB PACK Q TITLE
         NI    LDSW,XFF-GOTONE     RESET GOTONE SW
         L     R2,LDTCBSV          RESTORE TCB ADDRESS
         LA    PREG,JPQPTR(R2)     ADDR OF JOB PACK Q PTR
         BRREAD  (PREG)
         MVC   NXTCDE(4),0(PREG)   SAVE ADDR OF FIRST CDE IN Q
         B     JPQPRTA             PRINT JOB PACK CDES          SA53335
         SPACE
LDDONE2  TM    LDSW,GOTONE         WAS ANYTHING ON JOB PACK Q
         BO    LDDONE3             YES--RETURN
         MVC   ADDR(19),NOJPQMSG   NO--MOVE MESSAGE TO BUFFER
         BRWRITE 1                 PRINT NO JOB PACK Q MSG
LDDONE3  BRWRITE 2                 SPACE 2 LINES
LDDONED  MVC   ERRADDR,LDERSV      RESTORE PREVIOUS ERROR ROUTINE ADDR
         L     R13,4(R13)          GET CALLER'S SAVE AREA ADDR
         LM    R14,R12,12(R13)     RESTORE HIS REGS
         BR    RETREG              RETURN TO FORMAT ROUTINE
         EJECT
***********************************************************************
*                                                                     *
*   THIS ROUTINE CONVERTS 1 BYTE TO PRINTABLE HEX                     *
*                                                                     *
***********************************************************************
         SPACE
BYTECNVT LR    R0,R1               SAVE R1 OVER HEXCNVT
         HEXCNVT (4),(5),1         CONVERT ONE BYTE
         LR    R1,R0               RESTORE R1
         BR    R9                  RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*   ERROR WHILE PRINTING LOAD LIST                                    *
*                                                                     *
***********************************************************************
         SPACE
         DROP  BASE1
         USING LOADERR,R15
LOADERR  LA    R13,LOADSAVE        GET MSS PRINT'S SAVE AREA ADDRESS
         LM    R14,R12,12(R13)     RESTORE OUR REGS
         DROP  R15
         USING LOADBASE,BASE1      SHIFT TO BASE1 - REG 11
         L     BUFREG,CURBUF       RELOAD BUFFER ADDR
         BRWRITE 1                 SPACE A LINE
         TM    LDSW,JBPQPRT        TEST FOR PRINTING JOB PACK Q
         BO    LOADERR1            BR IF I WAS
         MVC   ADDR(18),LDERMSG    MOVE ERROR MSG TO BUFFER
         LA    R9,LDDONE1          IF PRINTING LOAD LIST, RETURN
*                                  TO TRY TO PRINT JOB PACK QUEUE
         B     LOADERR2            BR AROUND
LOADERR1 MVC   ADDR(23),JPQERMSG   MOVE JOB PACK Q ERROR MSG
         LA    R9,LDDONE3          IF PRINTING JOB PACK QUEUE,
*                                  RETURN TO EXIT
LOADERR2 BRWRITE 1                 PRINT ERROR MSG
         NI    SWB,XFF-FMTERR-IOERR RESET ERROR SWITCHES
         BR    R9                  RETURN ON R9 SET ABOVE
         EJECT
***********************************************************************
*                                                                     *
*   SAVE AREA AND CONSTANTS FOR LOADPRT ROUTINE                       *
*                                                                     *
***********************************************************************
         SPACE
LOADSAVE DC    18F'0'              MSS PRINT'S SAVE AREA
LDERSV   DC    F'0'
NXTLLE   DC    F'0'
LDWORK1  DC    F'0'
NXTCDE   DC    F'0'                PTR TO NEXT CDE AND CDE ATR1
F25      DC    F'25'
LDTCBSV  DC    F'0'                SAVE AREA FOR TCB ADDRESS
LODTJID  DC    H'0'
LOOPCTR  DS    F                   LOOP COUNTER                 SA53335
         SPACE
*   PATTERN FOR MFT LRB AND LPRB
LDPTRN1  FMTPTRN (LBL,LBLP,DTA,DTAP,DTAC),4,3,0,5,(LDPTRN1A,0),(LDPTRN1X
               B+1)
         FMTPTRN (LBL,LBLP,DTA,DTAP,DTAE),2,8,13,16,(LDMID1),(LDPTRN1B,X
               0)
         FMTPTRN (LBL,DTA),7,4,27,35                             X01980
         FMTPTRN (LBL,DTA),6,4,46,53,,,LAST                      X01980
         SPACE
*   PATTERN FOR MFT FRB
LDPTRN2  FMTPTRN (LBL,LBLP,DTA,DTAP,DTAC),3,3,0,5,(LDMID2),(LDPTRN2B+1)
         FMTPTRN (LBL,DTA,DTAP,DTAE),2,8,13,16,,(LDPTRN2B,0)
         FMTPTRN (LBL,DTA,DTAP,DTAC),2,3,27,30,,(LDWORK1+1)
         FMTPTRN (LBL,DTA,DTAP),5,4,39,46,,(LDPTRN2C,0)
         FMTPTRN (LBL,DTA),5,4,57,63
         FMTPTRN (LBL,DTA),7,4,73,81,,,LAST
* PATTERN FOR CDB
LCDBLN1  FMTPTRN (LBL,LBLP),3,,13,,(LCDBID1)                     X01980
         FMTPTRN (LBL,DTA,DTAP),8,4,21,31,,(LCDBLN11,0)          X01980
         FMTPTRN (LBL,DTA),7,4,41,50,,,LAST                      X01980
LDMID1   DC    C'NMSZ/STABUSE/EP'                                X01980
LDMID2   DC    C'FRBNMSZXRWTLXRREQXRTLPRB'
LCDBID1  DC    C'CDBNOT/LDADMODLNTH'                             X01980
LOADRESP DC    X'00'
CDEATR1  EQU   NXTCDE
LDSW     DC    X'00'
CDEID    DC    C'CDE'
NMID     DC    C'NM'
USEID    DC    C'USE'
RESPID   DC    C'RESP'
EPAID    DC    C'EPA'
ATR1ID   DC    C'ATR1'
ATR2ID   DC    C'ATR2'                                           Y01980
STAID    DC    C'STA'
LNID     DC    C'LN'
LPRBID   DC    CL4'LPRB'
LRBID    DC    CL4'LRB'
USEEPID  DC    C'USE/EP'
SZID     DC    C'SZ'
NA       DC    C'NA'
LDTITLE  DC    C'LOAD LIST'
NOLLEMSG DC    C'NO ELEMENTS ON LOAD LIST'
LDERMSG  DC    C'ERROR IN LOAD LIST'
JPQTTL   DC    C'JOB PACK QUEUE'
NOJPQMSG DC    C'NOTHING IN JOB PACK'
JPQERMSG DC    C'ERROR IN JOB PACK QUEUE'
XLSTEMSG DC    C'ERROR IN EXTENT LIST'
NXLSTMSG DC    C'NO EXTENT LIST'
LLLOOPMG DC    C'INFINITE LOOP IN LOAD LIST'                    SA53335
JPLOOPMG DC    C'INFINITE LOOP IN JOB PACK QUEUE'               SA53335
FLDPCH   DC    22F'0'              PATCH AREA                    X01980
         DROP  BUFREG,BASE1,COMBASE
         EJECT
AMDPRFDB CSECT
         SPACE
***********************************************************************
*                     *** AMDPRFDB - DEB PRINT ***                    *
*                                                                     *
* STATUS--OS/VS2 RELEASE 1.0                                          *
*                                                                     *
* FUNCTION--                                                          *
*    THIS ROUTINE FORMATS THE DEB'S ON THE DEB CHAIN OF THE TCB       *
*    BEING FORMATTED.                                                 *
*                                                                     *
* ENTRY POINTS--                                                      *
*    AMDPRFDB IS THE ONLY ENTRY.  CONTROL IS RECEIVED FROM AMDPRFSR.  *
*    STANDARD SUBROUTINE LINKAGE USED.                                *
*                                                                     *
* INPUTS--                                                            *
*         REGISTER 0 - TJID OF STORAGE CONTAINING TCB TO BE FORMATTED *
*         REGISTER 2 - TCB ADDRESS OF DEB CHAIN TO BE FORMATTED       *
*         REGISTER 12 - ADDRESS OF COMMON AREA                        *
*                                                                     *
* OUTPUT--                                                            *
*    WRITES FORMATTED DEB CHAIN                                       *
*    WRITES MESSAGES 'TASK HAS NO OPEN DATA SETS' OR 'INFINITE LOOP   *
*    IN DEB CHAIN' IF MORE THAN 200 DEB'S IN DEB CHAIN.               *
*    WRITES ERROR MESSAGE 'ERROR IN DEB CHAIN'                        *
*                                                                     *
* EXTERNAL REFERENCES--                                               *
*         BRREAD - TO OBTAIN DATA FROM THE INPUT DUMP.                *
*         BRWRITE - TO WRITE DATA TO THE 'PRINTER' DATA SET.          *
*         WRDCNVT - FROM AN ADDRESS IN COMMON, TO CONVERT 4 BYTES     *
*                   TO PRINTABLE HEX.                                 *
*         ADRCNVT - FROM ADDRESS IN COMMON, TO CONVERT 3 BYTES TO     *
*                   PRINTABLE HEX.                                    *
*                                                                     *
* EXITS,NORMAL--                                                      *
*    RETURN TO CALLER THROUGH STANDARD LINKAGE.                       *
*                                                                     *
* EXITS,ERROR--                                                       *
*    SAME AS NORMAL EXIT                                              *
*                                                                     *
* TABLES/WORK AREAS-- NONE                                            *
*                                                                     *
* ATTRIBUTES-- REUSABLE                                               *
*                                                                     *
* CHARACTER CODE DEPENDENCY-- NONE                                    *
*                                                                     *
* NOTES--                                                             *
*   BRREAD ERROR HANDLER:  IF A DEB CANNOT BE READ FROM THE INPUT     *
*   DUMP, A MESSAGE IS PRINTED AND CONTROL RETURNS TO AMDPRFSR.       *
*                                                                     *
***********************************************************************
         SPACE
DADEV    EQU   64
DEBFND   EQU   128
TCBDEB   EQU   8
ISAMTST  EQU   X'80'
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         BALR  BASE1,0             ESTABLISH REG 11 AS BASE
         USING DEBBASE,BASE1
DEBBASE  LA    R3,DEBSAVE          SAVE AREA CHAINING
         ST    R13,DEBSAVE+4
         ST    R3,8(R13)
         LR    R13,R3
         SPACE
         USING COMMON,COMBASE
         SPACE
         MVI   DEBSW,0             CLEAR DEB SWITCH
         XC    DEBCNT,DEBCNT       ZERO DEB COUNT
         MVC   DEBERSV,ERRADDR     SAVE PREVIOUS ERROR ROUTINE ADDR
         LA    R15,DEBERR          ADDR OF DEBPRNT ERROR ROUTINE
         ST    R15,ERRADDR         STORE IN ERROR ROUTINE ADDR WORD
         L     BUFREG,CURBUF       LOAD BUFFER ADDR
         USING OUTBUF,BUFREG
         LA    PREG,TCBDEB(R2)     ADDR OF DEB CHAIN PTR
DEBPRNT8 BRREAD  (PREG),DATA,TJID=(R0)
         L     R2,0(PREG)          LOAD DEB CHAIN PTR
         LA    R2,0(R2)            CLEAR POSSIBLE HIGH BYTE
         LTR   R2,R2               IS THERE A DEB
         BZ    NODEB               NO--ALL DONE
         OI    DEBSW,DEBFND        INDICATE DEB FOUND
         MVC   ADDR(3),DEBID       MOVE 'DEB' TO BUFFER
         LA    R4,ADDR+4           ADDR OF WHERE TO PUT DEB ADDR
         L     R15,AADRCNVT        ADDR OF 3 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT DEB ADDR
         MVC   ADDR+13(90),APPID   MOVE APPENDAGE IDS TO BUFFER
         LA    PREG,28(R2)         ADDR OF APP VEC TAB
         BRREAD  (PREG)
         L     R3,0(PREG)          LOAD ADDR OF I/O APP VEC TAB
         LA    R3,0(R3)            CLEAR HIGH ORDER BYTE
         LTR   R3,R3               IS IT ZERO
         BZ    DEBPRNT1            YES--NOTHING TO PRINT
         BRREAD  (R3)              ADDR OF END OF EXT APP ADDR IN R 3
         LA    R4,ADDR+33          ADDR OF WHERE TO PUT END OF EXT APP
*                                  ADDRESS                       X01980
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT RTN    X01980
         BALR  RETREG,R15          CONVERT END OF EXT APP ADDR
         LA    PREG,4(R3)          ADDR OF SIO APP ADDR
         BRREAD  (PREG)
         LA    R4,ADDR+49          ADDR OF WHERE TO PUT SIOA ADDRX01980
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT RTN    X01980
         BALR  RETREG,R15          CONVERT SIO APP ADDR
         LA    PREG,8(R3)          ADDR OF PCI APP ADDR
         BRREAD  (PREG)
         LA    R4,ADDR+65          ADDR OF WHERE TO PUT PCI APP ADDR
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT RTN    X01980
         BALR  RETREG,R15          CONVERT PCI APP ADDR
         LA    PREG,12(R3)         ADDR OF CH END APP ADDR
         BRREAD  (PREG)
         LA    R4,ADDR+81          ADDR OF WHERE TO PUT CH END APP ADDR
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT RTN    X01980
         BALR  RETREG,R15          CONVERT CH END APP ADDR
         LA    PREG,16(R3)         ADDR OF AB END APP ADDR
         BRREAD  (PREG)
         LA    R4,ADDR+97          ADDR OF WHERE TO PUT AB END APP ADDR
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT RTN    X01980
         BALR  RETREG,R15          CONVERT AB END APP ADDR
DEBPRNT1 BRWRITE 1                 PRINT LINE OF APP ADDRS
         MVC   ADDR+13(3),PFXID    MOVE 'PFX' TO BUFFER
         LR    R3,R2               DEB ADDR TO R3
         SH    R3,SIXTEEN          ADDR OF DEB PREFIX IN R3
         BNP   DEBERR1             ERROR IF ZERO OR NEG          A41628
         LA    R7,4                LOAD COUNT TO R7
         LA    R4,ADDR+17          ADDR OF WHERE TO PUT FIRST WORD OF
*                                  PREFIX
DEBPRNT2 BRREAD (R3)               PREFIX ADDR IN REG 3
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT WORD OF PREFIX
         AH    R4,ELEVEN           INCR WHERE-TO-PUT-IT ADDR
         LA    R3,4(R3)            INCR PREFIX ADDRESS
         BCT   R7,DEBPRNT2         LOOP FOR 4 WORDS
         BRWRITE 1                 PRINT LINE OF DEB PREFIX
         MVC   ADDR+13(3),DTCBID   MOVE 'TCB' TO BUFFER
         BRREAD  (R2)              DEB ADDR IN REG 2
         LA    R4,ADDR+17          ADDR OF WHERE TO PUT TCB ADDR
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT TCB ADDR
         MVC   ADDR+28(4),NDEBID   MOVE 'NDEB' TO BUFFER
         LA    PREG,4(R2)          ADDR OF NEXT DEB PTR
         BRREAD  (PREG)
         LA    R4,ADDR+33          ADDR OF WHERE TO PUT NXT DEB ADDR
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT NXT DEB ADDR
         MVC   ADDR+44(4),ASYNID   MOVE 'ASYN' TO BUFFER
         LA    PREG,8(R2)          ADDR OF ASYN EXIT ADDR
         BRREAD  (PREG)
         LA    R4,ADDR+49          ADDR OF WHERE TO PUT ASYN EXIT ADDR
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT ASYN EXIT ADDR
         MVC   ADDR+60(4),SPRGID   MOVE 'SPRG' TO BUFFER
         LA    PREG,12(R2)         ADDR OF SYSTEM IOB PURGE CHAIN PTR
         BRREAD  (PREG)
         LA    R4,ADDR+65          WHERE IT GOES
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          COMVERT SYS PRGE CH ADDR
         MVC   ADDR+76(4),UPRGID   MOVE 'UPRG' TO BUFFER
         LA    PREG,16(R2)         ADDR OF USER IOB PURGE CHAIN PTR
         BRREAD  (PREG)
         MVC   XTNTNO(1),0(PREG)   SAVE EXTENT NUMBER
         LA    R4,ADDR+81          ADDR OF WHERE TO PUT IT
         L     R15,AWRDCNVT
         BALR  RETREG,R15          CONVERT USER PRG CH ADDR
         MVC   ADDR+92(4),PLSTID   MOVE 'PLST' TO BUFFER
         LA    PREG,20(R2)         ADDR OF PARAMETER LIST FOR PURGE ECB
         BRREAD  (PREG)
         LA    R4,ADDR+97          ADDR OF WHERE PARM LIST PTR GOES
         L     R15,AWRDCNVT
         BALR  RETREG,R15          CONVERT PARM LIST ADDR
         MVC   ADDR+108(3),DCBID   MOVE 'DCB' TO BUFFER
         LA    PREG,24(R2)         ADDR OF DCB PTR
         BRREAD  (PREG)
         MVC   DEBDCB(4),0(PREG)   SAVE DCB ADDR                  M1748
         LA    R4,ADDR+112         ADDR OF WHERE IT GOES
         L     R15,AWRDCNVT
         BALR  RETREG,R15          CONVERT DCB ADDR
         BRWRITE 1                 PRINT THIS LINE OF DEB
         MVC   ADDR+13(3),AVTID    MOVE 'AVT' TO BUFFER
         LA    PREG,28(R2)         ADDR OF I/O APP VECT TABLE ADDR
         BRREAD  (PREG)
         TM    0(PREG),X'04'       TEST FOR DA
         BZ    DEBPRNT3            BR IF NOT DA
         OI    DEBSW,DADEV         SET DA DEVICE FLAG IF IT IS
DEBPRNT3 LA    R4,ADDR+17          ADDR OF WHERE TO PUT APP VECT TAB
*                                  ADDRESS
         L     R15,AWRDCNVT
         BALR  RETREG,R15          CONVERT I/O APP VECTOR TABLE ADDR
         BRWRITE 1                 PRINT LINE
         SR    R7,R7               CLEAR IC REG
         IC    R7,XTNTNO           LOAD NO OF EXTENTS
XNTTEST  LTR   R7,R7               TEST FOR ZERO
         BNP   DEBDONE             ZERO--NO EXTENTS TO PRINT
         TM    DEBSW,DADEV         IS THIS DEB FOR DA
         BO    DEBPRNT5            YES--4 WORD EXTENTS
         MVC   ADDR+14(6),OPUCBID  NO--1 WORD EXTENTS...MOVE 'OP-UCB'
*                                  TO BUFFER
         BRWRITE 1                 PRINT LINE
         LA    R3,32(R2)           ADDR OF FIRST EXTENT
         LA    R4,ADDR+13          ADDR OF WHERE TO PUT EXTENTS
DEBPRNT4 BRREAD (R3)
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT EXTENT
         BRWRITE 1                 PRINT EXTENT
         LA    R3,4(R3)            INCR TO NEXT EXTENT
         BCT   R7,DEBPRNT4         LOOP FOR NUMB OF EXTENTS
         B     DEBDONE             ALL DONE WITH DEB
         SPACE 3
***********************************************************************
*                                                                     *
*   PRINT 4 WORD EXTENTS (DIRECT ACCESS)                              *
*                                                                     *
***********************************************************************
         SPACE
DEBPRNT5 CLI   XTNTNO,X'01'        HOW MANY EXTENTS              Y01980
         BNH   NOTISAM             IF ONE OR LESS--NOT ISAM      Y01980
         LA    PREG,32(R2)         POINT TO FIRST WORD OF DEVICE Y01980
*                                  SECTION (UCB ADDR IF NOT ISAM)Y01980
         ST    PREG,DEBLO          SAVE ADDR OF DEVICE SECTION   Y01980
         LR    R9,R7               GET NUMBER OF EXTENTS         Y01980
         SLL   R9,4                MULTIPLY BY 16                Y01980
         LA    R9,0(PREG,R9)       GET ADDR OF END OF DEVICE SEC Y01980
         ST    R9,DEBHI            SAVE ENDING ADDR              Y01980
         BRREAD (PREG)             READ FIRST WD OF DEVICE SEC   Y01980
         NC    1(3,PREG),1(PREG)   TEST FOR ZERO PTR             Y01980
         BZ    ISAM                IF ZERO ASSUME ISAM DEB       Y01980
*                                  (UCB PTR NOT ZERO)
         CLC   1(3,PREG),DEBLO+1   DOES NON ZERO ADDR POINT INTO Y01980
*                                  DEVICE SECTION--HENCE ISAM
         BL    NOTISAM             IF LOWER MUST BE A UCB        Y01980
         CLC   1(3,PREG),DEBHI+1   TEST END OF DEVICE SECTION    Y01980
         BH    NOTISAM             IF HIGHER ITS NOT ISAM        Y01980
ISAM     OI    ISAMSW,ISAMTST      INDICATE ISAM DEB             Y01980
         BCTR  R7,0                DEREMENT EXTENT COUNT FOR ISAMY01980
         B     HAVEDA              CONTINUE WITH DA EXTENTS      Y01980
NOTISAM  CLI   XTNTNO,X'01'        HOW MANY EXTENTS              Y01980
         BH    HAVEDA              IF MORE THAN ONE ITS DA        M1748
         LA    R4,3                SET TO THREE FOR LOOP CNT      M1748
         LA    R3,36(R2)           ADDR OF FIRST DCB IF 3525      M1748
DCBREAD  BRREAD (R3)               READ DCB ADDR                  M1748
         CLC   1(3,PREG),DEBDCB+1  ARE DCB'S THE SAME             M1748
         BE    HAVE3525            YES--DEVICE SECTION IS 3525    M1748
         LA    R3,4(R3)            POINT TO NEXT DCB ADDR         M1748
         BCT   R4,DCBREAD          LOOP TO READ 3 ADDR            M1748
HAVEDA   MVC   ADDR+14(36),FMUCBID MOVE IDS TO BUFFER             M1748
         BRWRITE 1                 PRINT EXTENT IDS
         LA    R3,32(R2)           ADDR OF FIRST EXTENT
         TM    ISAMSW,ISAMTST      IS THIS AN ISAM DATA SET
         BZ    DEBPRNT7            NO--CONTINUE
         LA    R3,48(R2)           YES--SKIP EXTENT 0
DEBPRNT7 LA    R4,ADDR+13          ADDR OF WHERE TO PUT FIRST WORD OF
*                                  EXTENT
         BRREAD  (R3)
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT FILE MASK AND UCB ADDR
         LA    R8,3                LOAD COUNT TO R3
         LA    R9,DEBWORK          ADDR OF 3 WORD WORK AREA
DEBPRNT6 LA    R3,4(R3)            ICNR TO NEXT WORD OF EXTENT
         BRREAD  (R3)              EXTENT WORD ADDR IN REG 3
         MVC   0(4,R9),0(PREG)     MOVE 4 BYTES TO WORK AREA
         LA    R9,4(R9)            INCR WORK AREA ADDR
         BCT   R8,DEBPRNT6         LOOP FOR 3 WORDS
         LA    PREG,DEBWORK+2      ADDR OF STARTING CCHH OF EXTENT
         LA    R4,ADDR+24          ADDR OF WHERE IT GOES
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT STARTING CCHH OF EXTENT
         LA    PREG,DEBWORK+6      ADDR OF ENDING CCHH OF EXTENT
         LA    R4,ADDR+35          ADDR OF WHERE IT GOES
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT ENDING CCHH OF EXTENT
         HEXCNVT ADDR+46,DEBWORK+10,2 CONVERT NUMB OF TRACKS FOR THIS
*                                  EXTENT
         BRWRITE 1                 PRINT EXTENT
         LA    R3,4(R3)            INCR TO NEXT EXTENT
         BCT   R7,DEBPRNT7         LOOP FOR NUMB OF EXTENTS
         B     DEBDONE             DONE WITH DEB                  M1748
         SPACE
***********************************************************************
*                                                                     *
*  PRINT 4 WORD EXTENT FOR 3525                                       *
*                                                                     *
***********************************************************************
         SPACE
HAVE3525 MVC   ADDR+15(38),H3525 MOVE HEADING TO PRINT            M1748
         BRWRITE 1                 WRITE HEADING FOR 3525         M1748
         LA    R3,32(R2)           GET ADDR OF DEVICE SECTION     M1748
         ST    R3,F3525D           SET IN FORMAT PATTERN          M1748
         LA    PREG,F3525          GET ADDR OF FMTPTRN            M1748
         L     R15,AFMTLINE        ADDR OF FORMAT RTN             M1748
         BALR  RETREG,R15          GO FORMAT 3525 LINE            M1748
         BRWRITE 1                 WRITE 3525 LINE                M1748
         B     DEBDONE             DONE WITH DEB                  M1748
         SPACE
***********************************************************************
*                                                                     *
*   DONE WITH THIS DEB...LOOK FOR ANOUTHER                            *
*                                                                     *
***********************************************************************
         SPACE
DEBDONE  NI    DEBSW,XFF-DADEV     RESET DIRECT ACCESS FLAG
         NI    ISAMSW,XFF-ISAMTST  RESET ISAM SW
         BRWRITE 1                 SPACE A LINE
         LH    R3,DEBCNT           LOAD DEBCOUNT
         AH    R3,ONEA             ADD ONE TO IT
         CH    R3,TWOHND           IS IT GT 200
         BH    DEBINF              BR IF IT IS
         STH   R3,DEBCNT           STORE INCREMENTED COUNT BACK
         LA    PREG,4(R2)          ADDR OF NEXT DEB PTR
         B     DEBPRNT8            LOOP THROUGH DEB CHAIN
         SPACE 2
***********************************************************************
*                                                                     *
*   DONE WITH DEB CHAIN...RETURN TO FORMAT ROUTINE                    *
*                                                                     *
***********************************************************************
         SPACE
NODEB    TM    DEBSW,DEBFND        WAS THERE A DEB
         BZ    NODEB1              NO--WRITE A MSG TO THAT AFFECT
         BRWRITE 1                 SPACE ANOUTHER LINE
NODEB2   MVC   ERRADDR,DEBERSV     RESTORE PREVIOUS ERROR ROUTINE ADDR
         L     R13,4(R13)          POINT TO CALLER'S SAVE AREA
         LM    R14,R12,12(R13)     RESTORE CALLER'S REGISTERS
         BR    RETREG              RETURN TO FORMAT ROUTINE
         SPACE
NODEB1   MVC   ADDR(26),NODEBMSG   MOVE MSG TO BUFFER
NODEB3   BRWRITE 3                 PRINT MSG AND SPACE 3 LINES
         B     NODEB2              RETURN TO FORMAT
         SPACE 2
***********************************************************************
*                                                                     *
*   GREATER THAN 200 DEBS...CONSIDER IT AN INFINITE LOOP              *
*                                                                     *
***********************************************************************
         SPACE
DEBINF   MVC   ADDR(26),DEBIFMSG   MOVE INFINITE LOOP MSG TO BUFFER
         B     NODEB3              PRINT MSG AND RETURN TO FORMAT
         EJECT
***********************************************************************
*                                                                     *
*   ERROR IN DEB CHAIN...WRITE MSG AND RETURN TO FORMAT               *
*                                                                     *
***********************************************************************
         SPACE
         DROP  BASE1
         USING DEBERR,R15
DEBERR   LA    R13,DEBSAVE         POINT TO DEB PRINT'S SAVE AREA
         LM    R14,R12,12(R13)     RESTORE OUR REGS
         DROP  R15
         USING DEBBASE,BASE1       SHIFT BACK TO REG 11 AS BASE
DEBERR1  L     BUFREG,CURBUF       RELOAD BUFFER ADDR            A41628
         BRWRITE 1                 SPACE A LINE
         MVC   ADDR(18),DEBERMSG   MOVE ERROR MSG TO BUFFER
         NI    SWB,XFF-FMTERR-IOERR RESET ERROR SWITCHES
         B     NODEB3              RETURN TO FORMAT
         EJECT
***********************************************************************
*                                                                     *
*   SAVE AREA AND CONSTANTS FOR DEBPRNT ROUTINE                       *
*                                                                     *
***********************************************************************
         SPACE
DEBSAVE  DC    18F'0'              DEB PRINT'S SAVE AREA
DEBWORK  DC    3F'0'
DEBERSV  DC    F'0'
DEBCNT   DC    H'0'
DEBSW    DC    X'00'
XTNTNO   DC    X'00'               NUMB OF EXTENTS FOR CURRENT DEB
ISAMSW   DC    X'00'               ISAM DATA SET IF X'80'
DEBLO    DC    A(0)                BEGIN ADDR OF BDE DEVICE SEC  Y01980
DEBHI    DC    A(0)                END ADDR OF DEB DEVICE SECTIONY01980
DEBDCB   DC    F'0'                DCB ADDR SAVE                  M1748
H3525    DC    C'UCB       RDRDCB     PCHDCB     WTRDCB'          M1748
F3525    FMTPTRN (DTA,DTAP),,4,,13,,(F3525D,0)                    M1748
         FMTPTRN (DTA),,4,,24                                     M1748
         FMTPTRN (DTA),,4,,35                                     M1748
         FMTPTRN (DTA),,4,,46,,,LAST                              M1748
DEBID    DC    C'DEB'
APPID    DC    CL15'APPENDAGES'
         DC    CL16'EOEA'                                        X01980
         DC    CL16'SIOA'                                        X01980
         DC    CL16'PCIA'                                        X01980
         DC    CL16'CEA'                                         X01980
         DC    CL16'XCEA'                                        X01980
PFXID    DC    C'PFX'
DTCBID   DC    C'TCB'
NDEBID   DC    C'NDEB'
ASYNID   DC    C'ASYN'
SPRGID   DC    C'SPRG'
UPRGID   DC    C'UPRG'
PLSTID   DC    C'PLST'
DCBID    DC    C'DCB'
AVTID    DC    C'AVT'
OPUCBID  DC    C'OP-UCB'
FMUCBID  DC    CL11'FM-UCB'
         DC    CL12'START'
         DC    CL9'END'
         DC    CL4'TRKS'
NODEBMSG DC    C'TASK HAS NO OPEN DATA SETS'
DEBERMSG DC    C'ERROR IN DEB CHAIN'
DEBIFMSG DC    C'INFINITE LOOP IN DEB CHAIN'
FDBPCH   DC    20F'0'              PATCH AREA                    X01980
         DROP  BUFREG,BASE1,COMBASE
         EJECT
AMDPRFIO CSECT
         SPACE
***********************************************************************
*                 *** AMDPRFIO - TIOT PRINT ***                       *
*                                                                     *
* STATUS--OS/VS2 RELEASE 1.0                                          *
*                                                                     *
* FUNCTION--                                                          *
*    THIS ROUTINE PRINTS THE TIOT OF THE TCB BEING FORMATTED.         *
*                                                                     *
* ENTRY POINTS--                                                      *
*    AMDPRFIO IS THE ONLY ENTRY.  CONTROL IS RECEIVED FROM AMDPRFSR.  *
*    STANDARD SUBROUTINE LINKAGE USED.                                *
*                                                                     *
* INPUTS--                                                            *
*         REGISTER 0 - TJID OF STORAGE CONTAINING TCB TO BE FORMATTED *
*         REGISTER 2 - TCB ADDRESS TO BE FORMATTED                    *
*         REGISTER 12 - ADDRESS OF COMMON AREA                        *
*                                                                     *
* OUTPUTS--                                                           *
*    WRITES FORMATTED TIOT                                            *
*    WRITES MESSAGE 'TASK HAS NO TIOT'                                *
*    WRITES ERROR MESSAGE 'ERROR IN TIOT', 'INVALID TIOT', AND        *
*    'INFINITE LOOP IN TIOT'                                          *
*                                                                     *
* EXTERNAL REFERENCES--                                               *
*         BRREAD - TO OBTAIN DATA FROM THE INPUT DUMP.                *
*         BRWRITE - TO WRITE DATA TO THE 'PRINTER' DATA SET.          *
*         WRDCNVT - FROM AN ADDRESS IN COMMON, TO CONVERT 4 BYTES     *
*                   TO PRINTABLE HEX.                                 *
*         ADRCNVT - FROM ADDRESS IN COMMON, TO CONVERT 3 BYTES TO     *
*                   PRINTABLE HEX.                                    *
*                                                                     *
* EXITS,NORMAL--                                                      *
*    RETURN TO CALLER THROUGH STANDARD LINKAGE.                       *
*                                                                     *
* EXITS,ERROR--                                                       *
*    SAME AS NORMAL EXIT                                              *
*                                                                     *
* TABLES/WORK AREAS-- NONE                                            *
*                                                                     *
* ATTRIBUTES-- REUSABLE                                               *
*                                                                     *
* CHARACTER CODE DEPENDENCY-- NONE                                    *
*                                                                     *
* NOTES--                                                             *
*   BRREAD ERROR HANDLER:  IF THE TIOT CANNOT BE READ FROM THE INPUT  *
*   DUMP, A MESSAGE IS PRINTED AND CONTROL RETURNS TO AMDPRFSR.       *
*                                                                     *
***********************************************************************
         SPACE
MAXDD    EQU   256                                              SA55854
TIOTVLD  EQU   128
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         BALR  BASE1,0             ESTABLISH REG 11 AS BASE
         USING TIOTBASE,BASE1
TIOTBASE LA    R3,TIOSAV           SAVE AREA CHAINING
         ST    R13,TIOSAV+4
         ST    R3,8(R13)
         LR    R13,R3
         SPACE
         USING COMMON,COMBASE
         SPACE
         MVC   TIOERSV,ERRADDR     SAVE PREVIOUS ERROR ROUTINE ADDR
         LA    R15,TIOTERR         ADDR OF TIOTPRT ERROR ROUTINE
         ST    R15,ERRADDR         STORE IN ERROR ADDR WORD
         L     BUFREG,CURBUF       LOAD BUFFER ADDR
         USING OUTBUF,BUFREG
         LA    PREG,TCBTIOT(R2)    LOAD TIOT PTR ADDR
         BRREAD  (PREG),DATA,TJID=(R0)
         L     R2,0(PREG)          LOAD TIOT ADDR
         LA    R2,0(R2)            CLEAR POSSIBLE HIGH ORDER BYTE
         LTR   R2,R2               IS THERE A TIOT
         BZ    NOTIOT              NO--WRITE MSG AND RETURN TO FORMAT
         C     R2,ADDRMAX          COMPARE TIOT ADDR TO ADDRMAX
         BH    NOTIOT              GT ADDRMAX-NO TIOT
         MVC   ADDR(4),TIOTID      MOVE 'TITO' TO BUFFER
         LA    R4,ADDR+5           ADDR OF WHERE TO PUT TIOT ADDR
         L     R15,AADRCNVT        ADDR OF 3 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT TIOT ADDR
         MVC   ADDR+13(3),JOBID    MOVE 'JOB' TO BUFFER
         BRREAD  (R2)              TIOT ADDR IN REG 2
         MVC   ADDR+17(8),0(PREG)  MOVE JOBNAME TO BUFFER
         LR    R3,PREG             LOAD INDEX REG
         LA    R4,1                LOAD INCREMENT REG
         LA    R5,7(PREG)          LOAD COMPARITOR REG
TIOTLP4  TM    0(R3),X'40'         TEST FOR VALID JOBNAME IN TIOT
         BZ    TIOTPRT2            BR IF FOUND INVALID
         BXLE  R3,R4,TIOTLP4       LOOP TO END OF JOBNAME
         OI    TIOTSW,TIOTVLD      SET VALID TIOT SW
         B     TIOTPRT3            BR AROUND
TIOTPRT2 NI    TIOTSW,XFF-TIOTVLD  RESET VALID TIOT SW
TIOTPRT3 EQU   *
         MVC   ADDR+28(4),STEPID   MOVE 'STEP' TO BUFFER
         LA    PREG,8(R2)          ADDR OF STEP NAME
         BRREAD  (PREG)
         MVC   ADDR+33(8),0(PREG)  MOVE STEPNAME TO BUFFER
         MVC   ADDR+44(4),PROCID   MOVE 'PROC' TO BUFFER
         LA    PREG,16(R2)         ADDR OF PROCEEDURE NAME
         BRREAD  (PREG)
         MVC   ADDR+49(8),0(PREG)  MOVE PROC STEP NAME
         BRWRITE 2                 PRINT TIOT NAMES AND SPACE 2 LINES
         TM    TIOTSW,TIOTVLD      IS TIOT VALID
         BZ    TIONVLD             BR IF NOT VALID TIOT
         LA    R3,24(R2)           ADDR OF FIRST DD ENTRY
         SR    R7,R7               CLEAR IC REG
         BRREAD  (R3)
         IC    R7,0(PREG)          LOAD LENGTH OF DD ENTRY
         LTR   R7,R7               ARE THERE ANY DD ENTRIES
         BZ    NODDEN              BR IF THERE ARE NONE
         MVC   ADDR+13(49),DDENIDS MOVE DD ENTRY IDS TO BUFFER
         LR    R4,PREG             SAVE PREG ACCROSS BRWRITE
         BRWRITE 1                 PRINT DD ENTRY IDS
         LR    PREG,R4             RESTORE PREG
         LA    R9,MAXDD            SET LOOP CTR TO 256 - ONE    SA55854
*                                  MORE THAN MAXIMUM ALLOWED    SA55854
TIOTLP3  LR    R5,R3               DD ENTRY ADDR TO R5
         SR    R5,R2               SUBTRACT TIOT ADDR FOR OFFSET
         ST    R5,TIOTWORK         STORE IN WORK AREA FOR CONVERSION
         LR    R4,R1               SAVE R1 ACCROSS HEXCNVT
         HEXCNVT ADDR+14,TIOTWORK+2,2 CONVERT OFFSET
         LR    R1,R4               RESTORE R1
         LA    R4,ADDR+22          ADDR FOR FIRST WORD
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT FIRST WORD OF DD ENTRY
         LA    R3,4(R3)            INCR ADDR
         LA    R8,2                LOAD LOOP COUNT
         LA    R4,ADDR+33          ADDR OF WHERE TO PUT DDNAME
TIOTLP1  BRREAD  (R3)
         MVC   0(4,R4),0(PREG)     MOVE FOUR BYTES OF DDNAME
         LA    R4,4(R4)            INCR
         LA    R3,4(R3)             ADDRS
         BCT   R8,TIOTLP1          LOOP TO MOVE ENTIRE NAME
         BRREAD  (R3)              ADDR OF TTR-STC FIELD OF DD ENTRY
         LA    R4,ADDR+44          ADDR OF WHERE TO PUT IT
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT TTR-STC FIELD
         SH    R7,SIXTEEN          SUBTRACT 16 FROM LENGTH
         BNP   TIOTPRT1            NO DEVICE ENTRY
         SRL   R7,2                DIVIDE BY 4
         LTR   R7,R7               TEST AGAIN
         BNP   TIOTPRT1            NO DEVICE ENTRY
         LA    R4,ADDR+55          ADDR FOR DEV ENT IN BUFFER
TIOTLP2  LA    R3,4(R3)            INCR TO DEVICE ENTRY
         BRREAD  (R3)
         L     R15,AWRDCNVT        ADDR OF 4 BYTE CONVERT ROUTINE
         BALR  RETREG,R15          CONVERT DEVICE ENTRY
         BRWRITE 1                 PRINT THIS LINE
         BCT   R7,TIOTLP2          LOOP FOR NUMB OF ENTRIES
TIOTPRT1 LA    R3,4(R3)            INCR TO NEXT ENTRY IF ANY
         BRREAD  (R3)
         IC    R7,0(PREG)          LENGTH OF NEXT ENTRY
         LTR   R7,R7               IS THERE ANOTHER ENTRY
         BNP   TIOTDONE            NO SET UP TO RETURN          SA55854
         BCT   R9,TIOTLP3         HAVE > 255 DDS BEEN PROCESSED SA55854
         MVC   ADDR(L'TIOTLOOP),TIOTLOOP PUT INFINITE LOOP MSG  SA55854
*                                 IN MSG BUFFER (YES)           SA55854
         BRWRITE 1                PUT OUT LOOP MESSAGE          SA55854
         SPACE 2
***********************************************************************
*                                                                     *
*   ALL DONE WITH TIOT...RETURN TO FORMAT ROUTINE                     *
*                                                                     *
***********************************************************************
         SPACE
TIOTDONE DS    0H
TIOTDN1  MVC   ERRADDR,TIOERSV     RESTORE PREVIOUS ERROR ROUTINE ADDR
         L     R13,4(R13)          POINT TO CALLER'S SAVE AREA
         LM    R14,R12,12(R13)     RESTORE HIS REGS
         BR    RETREG              RETURN TO FORMAT ROUTINE
         SPACE 2
***********************************************************************
*                                                                     *
*   NO DD ENTRIES...SPACE 1 LINE AND RETURN                           *
*                                                                     *
***********************************************************************
         SPACE
NODDEN   BRWRITE 1                 SPACE A LINE
         B     TIOTDN1             RETURN TO FORMAT
         SPACE 2
***********************************************************************
*                                                                     *
*   NO TIOT...PRINT MESSAGE AND RETURN                                *
*                                                                     *
***********************************************************************
         SPACE
NOTIOT   MVC   ADDR(16),NOTIOMSG   MOVE MESSAG TO BUFFER
         BRWRITE 1                 PRINT MSG
         B     TIOTDONE            RETURN
         SPACE 2
***********************************************************************
*                                                                     *
*   INVALID TIOT...PRINT MESSAGE AND RETURN TO FORMAT                 *
*                                                                     *
***********************************************************************
         SPACE
TIONVLD  MVC   ADDR(12),NVLDMSG    MOVE NOT VALID MSG TO BUFFER
         BRWRITE 1                 PRINT MSG AND SPACE A LINE
         B     TIOTDN1             RETURN TO FORMAT
         EJECT
***********************************************************************
*                                                                     *
*   ERROR FORMATTING TIOT...PRINT ERROR MESSAGE AND RETURN TO FORMAT  *
*                                                                     *
***********************************************************************
         SPACE
         DROP  BASE1
         USING TIOTERR,R15
TIOTERR  LA    R13,TIOSAV          GET ADDR OF TIOT PRINT'S SAVE AREA
         LM    R14,R12,12(R13)     RESTORE HIS REGS
         DROP  R15
         USING TIOTBASE,BASE1
         L     BUFREG,CURBUF       RELOAD BUFFER ADDR
         BRWRITE 1                 SPACE A LINE
         MVC   ADDR(13),TIOERMSG   MOVE ERROR MSG TO BUFFER
         BRWRITE 1                 PRINT AND SPACE A LINE
         B     TIOTDN1             RETURN TO FORMAT ROUTINE
         EJECT
***********************************************************************
*                                                                     *
*   SAVE AREA AND CONSTANTS FOR TIOTPRT ROUTINE                       *
*                                                                     *
***********************************************************************
         SPACE
TIOSAV   DC    18F'0'              TIOT PRINT'S SAVE AREA
TIOTWORK DC    F'0'
TIOERSV  DC    F'0'
TIOTSW   DC    X'00'
TIOTID   DC    C'TIOT'
JOBID    DC    C'JOB'
STEPID   DC    C'STEP'
PROCID   DC    C'PROC'
DDENIDS  DC    CL10'OFFSET'
         DC    CL10'LN-STA'
         DC    CL11'DDNAME'
         DC    CL11'TTR-STC'
         DC    CL7'STB-UCB'
NOTIOMSG DC    C'TASK HAS NO TIOT'
TIOERMSG DC    C'ERROR IN TIOT'
NVLDMSG  DC    C'INVALID TIOT'
TIOTLOOP DC    C'INFINITE LOOP IN TIOT'                         SA55854
FIOPCH   DC    10F'0'              PATCH AREA                    X01980
         SPACE
         DROP  BUFREG,BASE1,COMBASE
         EJECT
AMDPRTSM CSECT
         SPACE
***********************************************************************
*              *** AMDPRTSM - PRINT TCB SUMMARY ***                   *
*                                                                     *
* STATUS--OS/VS1 RELEASE 1.0                                          *
*                                                                     *
* FUNCTION--                                                          *
*    THIS IS A COLLECTION OF THREE ROUTINES THAT BUILD TCB SUMMARY    *
*    TABLES, PRINT THE TCB SUMMARY, AND FREE THE CORE WHICH THE       *
*    SUMMARY TABLES OCCUPY.                                           *
*                                                                     *
* ENTRY POINTS--                                                      *
*        TCBSMGT - GETS CORE FOR THE TABLE, PLACES THE JOB AND STEP   *
*              NAMES INTO IT AND LINKS IT TO THE TOP OF THE CHAIN     *
*        AMDPRTSM - PRINTS A SUMMARY OF ALL TCBS FORMATTED USING THE  *
*              TCB SUMMARY TABLES.  FOR ANYTHING TO BE PRINTED THERE  *
*              MUST BE AT LEAST 2 TABLES ON THE LIST.                 *
*        TCBSMFR - FREES ALL CORE THAT THE TCB SUMMARY TABLES OCCUPY  *
*    AMDPRTSM AND TCBSMFR RECEIVES CONTROL THROUGH AN ENTRY IN THE    *
*    COMMON AREA.  TCBSMGT RECEIVES CONTROL FROM AMDPRFSR.  ALL       *
*    ENTRY POINTS USE STANDARD LINKAGE.                               *
*                                                                     *
* INPUTS--                                                            *
*    THE TCB SUMMARY TABLE IS POINTED TO BY AN INTERNAL POINTER.      *
*                                                                     *
* OUTPUTS--                                                           *
*    WRITES TCB SUMMARY TABLE                                         *
*                                                                     *
* EXTERNAL REFERENCES--                                               *
*         BRWRITE - TO WRITE DATA TO THE 'PRINTER' DATA SET.          *
*         GETMAIN - TO OBTAIN STORAGE FOR SUMMARY TABLE               *
*         FREEMAIN - TO RELEASE STORAGE FOR SUMMARY TABLE             *
*         AMDPRGFR - FROM AN ADDRESS IN COMMON, TO FORMAT A LINE      *
*                    DESCRIBED BY THE FMTPTRN MACRO INSTRUCTION.      *
*                                                                     *
* EXITS,NORMAL--                                                      *
*    RETURN TO CALLER THROUGH STANDARD LINKAGE.                       *
*                                                                     *
* EXITS,ERROR--                                                       *
*    SAME AS NORMAL EXIT                                              *
*                                                                     *
* TABLES/WORK AREAS--                                                 *
*   THE FORMAT OF A TCB SUMMARY TABLE IS AS FOLLOWS...                *
*                                                                     *
*      0 *********************************************************    *
*        * TCB  *      FORWARD       *      *      BACKWARD      *    *
*        * ENTRY*      POINTER       * X'00'*      POINTER       *    *
*        * CNT  *                    *      *                    *    *
*      8 *********************************************************    *
*        *                                                       *    *
*        *                        JOBNAME                        *    *
*        *                                                       *    *
*     16 *********************************************************    *
*        *                                                       *    *
*        *                       STEPNAME                        *    *
*        *                                                       *    *
*     24 *********************************************************    *
*        *             *             *                                *
*        *   TJID      *   RESERVED  *                                *
*        *             *             *                                *
*        *****************************                                *
*                                                                     *
*              TCB ENTRY...FROM 1 TO 255 PER TABLE                    *
*     +0 *********************************************************    *
*        *       *                   *                           *    *
*        *  TID  *  TCB ADDRESS      *  COMPLETION CODE          *    *
*        *       *                   *                           *    *
*     +8 *********************************************************    *
*        *                           *                           *    *
*        *   SISTER TCB ADDRESS      *   MOTHER TCB ADDRESS      *    *
*        *                           *                           *    *
*    +16 *********************************************************    *
*        *                           *                           *    *
*        *   DAUGHTER TCB ADDRESS    *    PAGE NUMBER (EBCDIC)   *    *
*        *                           *                           *    *
*        *********************************************************    *
*                                                                     *
*   THE FIRST TABLE IN THE LIST WILL HAVE A ZERO BACKWARD POINTER AND *
*   THE LAST TABLE WILL HAVE A ZERO FORWARD POINTER.                  *
*                                                                     *
*    FMTPTRN MACRO IS USED TO GENERATE A PATTERN FOR THE PRINTED      *
*    SUMMARY TABLE.                                                   *
*                                                                     *
* ATTRIBUTES-- REUSABLE                                               *
*                                                                     *
* CHARACTER CODE DEPENDENCY-- NONE                                    *
*                                                                     *
* NOTES-- NONE                                                        *
*                                                                     *
***********************************************************************
         EJECT
         USING AMDPRTSM,R15
         STM   R14,R12,12(R13)     PRINT SUMMARY EP
         LA    R14,8               ENTRY CODE 8
         B     BASESMRY            GO ESTABLISH BASE
         DROP  R15
         USING TCBSMGT,R15
TCBSMGT  STM   R14,R12,12(R13)     MAKE ENTRY EP
         LA    R14,4               ENTRY CODE 4
         B     BASESMRY            GO ESTABLISH BASE
         DROP  R15
         USING TCBSMFR,R15
TCBSMFR  STM   R14,R12,12(R13)     FREE SUMMARY TABLES
         SR    R14,R14             ENTRY CODE 0
         DROP  R15
         SPACE
BASESMRY BALR  BASE1,0             ESTABLISH REG 11 AS BASE
         USING *,BASE1
SMBASE   LA    R3,TCBSMSV          SAVE AREA CHAINING
         ST    R13,TCBSMSV+4
         ST    R3,8(R13)
         LR    R13,R3
         SPACE
         USING COMMON,COMBASE      REG 12 IS COMMON CSECT POINTER
         SPACE
         B     *+4(R14)            BRANCH ON ENTRY CODE
         B     SMFR                0 - FREE SUMMARY TABLES
         B     SMGT                4 - MAKE SUMMARY ENTRY
*                                  8 - FALL THROUGH TO PRINT SUMMARY
         SPACE
SMRY     MVC   TCBSMERS,ERRADDR    SAVE PREV ERROR ROUTINE ADDR
         LA    R15,TCBSMERR        ADDR OF TCBSMRY'S ERROR ROUTINE
         ST    R15,ERRADDR         ENABLE IT
         LA    R3,FMTSFPTR         LOAD ADDR OF TABLE POINTERS
         CLC   0(4,R3),4(R3)       ARE POINTERS EQUAL
         BE    TCBSMDN             YES--PTRS ARE EITHER 0 OR THERE IS
*                                  ONLY ONE TABLE...IN EITHER CASE NO
*                                  SUMMARY WILL BE PRINTED
         BRWRITE SKIP              SKIP TO LINE 1
         ST    R3,TCBSMCUR         SAVE CURRENT TABLE POINTER
TCBSM1   L     R3,TCBSMCUR         LOAD CURRENT (PREVIOUS) TABLE PTR
         L     R3,4(R3)            LOAD BACKWARD POINTER
         LTR   R3,R3               IS IT ZERO
         BZ    TCBSMDN             YES--ALL DONE PRINTING SUMMARY
         ST    R3,TCBSMCUR         SAVE NEW CURRENT TABLE ADDR
         SR    R4,R4               CLEAR IC REG
         SPACE 2
***********************************************************************
*                                                                     *
*   PRINT JOB AND STEP NAMES                                          *
*                                                                     *
***********************************************************************
         SPACE
         IC    R4,0(R3)            LOAD CNT OF TCB ENTRIES
         LTR   R4,R4               IS IT ZERO
         BZ    TCBSM1              YES--DONT PRINT ANYTHING FOR THIS
*                                  SUMMARY TABLE
         OC    28(4,R3),28(R3)     IS THERE AT LEAST 1 VALID TCB ENTRY
         BZ    TCBSM1              NO--DON'T PRINT ANYTHING FOR THIS
*                                  SUMMARY TABLE
         LA    PREG,8(R3)          ADDR OF NAMES
         TM    SWA,TSOSW           TEST FOR TSO CALL
         BO    TSOPTRN             BRANCH IF SO TO USE TSO PATTERN
         ST    PREG,TCBSPT1A       STORE INTO PATTERN
         LA    PREG,TCBSPT1        LOAD PATTERN ADDR TO PREG
         SR    R0,R0               CLEAR TJID REG
         B     NTSOPTRN            BRANCH AROUND
TSOPTRN  ST    PREG,TCBSPT4A       STORE ADDR OF JOBNAME IN PATTERN
         LA    PREG,TCBSPT4        POINT TO TSO PATTERN
         LH    R0,24(R3)           LOAD TJID REG
NTSOPTRN BAL   R9,TCBSMFP1         GO FORMAT LINE, PRINT IT AND SPACE
*                                  ONE LINE
         SPACE 2
***********************************************************************
*                                                                     *
*   TEST FOR TCB ENTRY AND SYSTEM TYPE                                *
*                                                                     *
***********************************************************************
         SPACE
         LA    R3,28(R3)           INCR R3 TO FIRST TCB ENTRY
TCBSM4   L     R2,0(R3)            LOAD TCB ADDR TO R2
         LTR   R2,R2               IS IT ZERO
         BZ    TCBSM2              ZERO--NO MORE ENTRIES IN THIS TABLE
         SPACE 2
***********************************************************************
*                                                                     *
*   PRINT SUMMARY FOR AOS/2                                           *
*                                                                     *
***********************************************************************
         SPACE
         LA    PREG,1(R3)          ADDR OF TCB ADDR
         ST    PREG,TCBSPT2A       STORE INTO PATTERN
         ST    R3,TCBSPT2E         STORE INTO PATTERN            Y01980
         LA    PREG,20(R3)         ADDR OF PAGE NUMBER           Y01980
         ST    PREG,TCBSPT2D       STORE INTO PATTERN
         LA    PREG,TCBSPT2        LOAD ADDR OF PATTERN TO PREG
TCBSM5   BAL   R9,TCBSMFP1         FORMAT AND PRINT LINE
         LA    R3,24(R3)           INCR TO NEXT TCB ENTRY        Y01980
         BCT   R4,TCBSM4           LOOP THROUGH ALL TCB ENTRIES
TCBSM2   LH    PREG,LINENUM        LOAD NUMB OF LINES PER PAGE -2
         C     PREG,LINECNT        AM I AT TOP OF PAGE
         BNH   TCBSM1              YES--BYPASS SPACING
         BRWRITE 1                 NO--SPACE A LINE
         B     TCBSM1              CONTINUE WITH NEXT TABLE
         SPACE 2
***********************************************************************
*                                                                     *
*   FORMAT AND PRINT LINE, ALSO PRINT TITLE IF TOP OF PAGE            *
*                                                                     *
***********************************************************************
         SPACE
TCBSMFP1 LH    R7,LINENUM          LOAD NUMB OF LINES PER PAGE -2
         C     R7,LINECNT          AM I AT THE TOP OF THE PAGE
         BH    TCBSMFP2            NO--DON'T PRINT TITLE
         ST    PREG,TCBSMRG1       SAVE PREG
         ST    BUFREG,TCBSMRG2     SAVE BUFREG
         L     BUFREG,CURBUF       LOAD ADDR OF OUTPUT BUFFER
         USING OUTBUF,BUFREG
         MVC   ADDR+39(L'TCBSMTTL),TCBSMTTL MOVE TITLE TO BUFFER
         BRWRITE 3                 PRINT TITLE AND SPACE 3 LINES
         DROP  BUFREG
         L     PREG,TCBSMRG1       RESTORE PREG
         L     BUFREG,TCBSMRG2     RESTORE BUFREG
TCBSMFP2 L     R15,AFMTLINE        ADDR OF LINE FORMAT
         BALR  RETREG,R15          GO FORMAT THE LINE
         BRWRITE 1                 PRINT THE LINE
         BR    R9                  RETURN TO CALLER
         SPACE 2
***********************************************************************
*                                                                     *
*   RETURN TO FORMAT ROUTINE                                          *
*                                                                     *
***********************************************************************
         SPACE
TCBSMDN  MVC   ERRADDR,TCBSMERS    RESTORE PREVIOUS ERROR ROUT ADDR
DONESUM  L     R13,4(R13)          POINT TO CALLER'S SAVE AREA
         LM    R14,R12,12(R13)     RESTORE CALLER'S REGISTERS
         BR    RETREG              RETURN
         EJECT
***********************************************************************
*                                                                     *
*   FORMAT ERROR PRINTING SUMMARY...PRINT ERROR MESSAGE AND CONTINUE  *
*   WITH NEXT SUMMARY TABLE.                                          *
*                                                                     *
***********************************************************************
         SPACE
         DROP  BASE1
         USING TCBSMERR,R15
TCBSMERR LA    R13,TCBSMSV         GET ADDRESS OF OUR SAVE AREA
         LM    R14,R12,12(R13)     RESTORE SUMMARY'S REGISTER
         DROP  R15
         USING SMBASE,BASE1
         L     BUFREG,CURBUF       LOAD OUTPUT BUFFER ADDR
         USING OUTBUF,BUFREG
         BRWRITE 1                 SPACE A LINE
         MVC   ADDR(L'TCBSERMS),TCBSERMS MOVE ERROR MSG TO BUFFER
         BRWRITE 2                 PRINT ERROR MSG AND SPACE 2 LINES
         B     TCBSM1              CONTINUE WITH NEXT TCB SUMMARY TABLE
         DROP  BUFREG
         EJECT
***********************************************************************
*                                                                     *
*   GET CORE FOR TCB SUMMARY TABLE AND PLACE JOB AND STEP NAMES INTO  *
*   IT, AND ENQUEUE IT ON TOP OF THE CHAIN.                           *
*                                                                     *
***********************************************************************
         SPACE
SMGT     LR    R2,R0               SAVE TJID IN REG 2
         LA    R5,XFF              LOAD AND-MASK
         NR    R5,PREG             AND FOR MAX TCBCNT OF 255
         LR    R4,R5               COPY TO R4
         MH    R4,C24              MULTIPLY BY 24 (24 BYTES PER TCB
*                                  ENTRY)                        Y01980
         LA    R4,28(R4)           ADD 28 BYTES FOR 8 BYTE LINK FIELD,
*                                   JOB AND STEP NAMES, AND TJID Y01980
         GETMAIN R,LV=(R4)         GET CORE FOR TABLE
         LR    R3,R4               LOAD LENGTH TO R3
         LR    R6,R1               SAVE ADDR OF GOTTEN CORE       M1956
TCBSMG1  CH    R3,H256             IS GOTTEN CORE LN GT 256
         BNH   TCBSMG2             NO--EXECUTE LAST XC
         XC    0(256,R1),0(R1)     ZERO 256 BYTES OF GOTTEN CORE
         SH    R3,H256             DECR FOR REM LN
         AH    R1,H256             INCR ADDR
         B     TCBSMG1             LOOP
         SPACE
TCBSMG2  LTR   R3,R3               IS REMAINING LN ZERO
         BZ    TCBSMG3             YES--ALL DONE
         BCTR  R3,0                DECR LN 1 FOR EXECUTE
         EX    R3,TCBSMGX          EX LAST EXCLUSIVE OR
TCBSMG3  L     R4,FMTSFPTR         LOAD ADDR OF FIRST TABLE
         ST    R4,0(R6)            MAKE NEW TABLE FIRST ENTRY IN CHAIN
         ST    R6,FMTSFPTR
         OC    FMTSLPTR,FMTSLPTR   IS LAST PTR ZERO
         BZ    TCBSMG4             BR IF IT IS
         ST    R6,4(R4)            STORE BACK LINK PTR INTO TABLE
         B     TCBSMG5             BR AROUND
TCBSMG4  ST    R6,FMTSLPTR         STORE NEW TABLE ADDR AS LAST
TCBSMG5  STC   R5,0(R6)            STORE NUMBER OF TCBS IN THIS FAMILY
*                                  INTO FIRST BYTE OF TABLE
         L     R4,AFMTTL           LOAD ADDR OF FORMAT TITLE
         MVC   8(8,R6),4(R4)       MOVE JOBNAME TO TABLE
         MVC   16(8,R6),20(R4)     MOVE STEPNAME TO TABLE
         STH   R2,24(R6)           STORE TJID IN SUMMARY TABLE
         B     DONESUM             GO RETURN
         SPACE
*   TO BE EXECUTED
TCBSMGX  XC    0(0,R1),0(R1)       TO ZERO REMAINDER OF TABLE
         EJECT
***********************************************************************
*                                                                     *
*   THIS ROUTINE FREES ALL TCB SUMMARY TABLES                         *
*                                                                     *
***********************************************************************
         SPACE
SMFR     DS    0H
TCBSMF1  L     R3,FMTSFPTR         LOAD PTR TO FIRST TABLE
         LTR   R3,R3               IS PTR ZERO
         BZ    TCBSMF2             YES--ZERO LAST PTR AND RETURN
         MVC   FMTSFPTR+1(3),1(R3) DELINK THIS TABLE
         SR    R4,R4               CLEAR IC REG
         IC    R4,0(R3)            LOAD TABLE TCB CNT
         MH    R4,C24              MULT BY 24 FOR LNG OF TCB ENTRIES
*                                                                Y01980
         LA    R4,28(R4)           ADD LN OF LINK FIELDS & NAMES Y01980
         FREEMAIN R,LV=(R4),A=(R3) FREE TABLES CORE
         B     TCBSMF1             LOOP TO FREE ALL TABLES
         SPACE
TCBSMF2  XC    FMTSLPTR,FMTSLPTR   ZERO LAST PTR
         B     DONESUM             GO RETURN
         EJECT
***********************************************************************
*                                                                     *
*   CONSTANTS FOR TCB SUMMARY ROUTINES                                *
*                                                                     *
***********************************************************************
         SPACE
TCBSMSV  DC    18F'0'              TCB SUMMARY'S SAVE AREA
TCBSMRG  DC    16F'0'
TCBSMRG1 DC    F'0'
TCBSMRG2 DC    F'0'
TCBSMERS DC    F'0'                SAVE AREA FOR PREV ERROR ROUT ADDR
AFMTTL   DC    A(FMTITLE)          ADDR OF FORMAT ROUTNES TITLE
FMTSFPTR DC    F'0'                FIRST TCB SUMMARY TABLE PTR
FMTSLPTR DC    F'0'                LAST TCB SUMMARY TABLE PTR
TCBSMCUR DC    F'0'                ADDR OF CURRENT SUMMARY TABLE
H256     DC    H'256'
C24      DC    H'24'               LENGTH OF TCB ENTRIES         Y01980
         SPACE
*   PATTERN FOR JOB AND STEP NAMES
TCBSPT1  FMTPTRN (LBL,LBLP,DTA,DTAP,DTAC,DTAE),3,8,0,5,(TCBSMID1),(TCBSX
               PT1A,0)
         FMTPTRN (LBL,DTA,DTAC,DTAE),4,8,15,20,,,LAST
         SPACE
*   PATTERN FOR JOBNAME, STEPNAME AND TJID
TCBSPT4  FMTPTRN (LBL,LBLP,DTA,DTAP,DTAC,DTAE),3,8,0,5,(TCBSMID1),(TCBSX
               PT4A,0)
         FMTPTRN (LBL,DTA,DTAC,DTAE),4,8,15,20
         FMTPTRN (LBL,DTA,DTAC),4,2,30,35,,,LAST
         SPACE
*   PATTERN FOR TCB ENTRY FOR AOS/2 AND MFT WITH ATTACH OPTION
TCBSPT2  FMTPTRN (LBL,LBLP,DTA,DTAP,DTAC),3,3,5,9,(TCBSMID2),(TCBSPT2A,X
               0)
         FMTPTRN (LBL,DTA,DTAC),3,4,19,23                        Y01980
         FMTPTRN (LBL,DTA,DTAC),3,4,34,38                        Y01980
         FMTPTRN (LBL,DTA,DTAC),3,4,49,53                        Y01980
         FMTPTRN (LBL,DTA,DTAC),3,4,64,68                        Y01980
         FMTPTRN (LBL,DTA,DTAP,DTAC),3,1,79,83,,(TCBSPT2E,0)     Y01980
         FMTPTRN (LBL,DTA,DTAP,DTAC,DTAE),4,4,88,93,,(TCBSPT2D,0),LAST
*                                                                Y01980
         SPACE
*   PATTERN FOR TCB ENTRY FOR PCP AND MFT W/0 ATTACH OPTION
TCBSPT3  FMTPTRN (LBL,LBLP,DTA,DTAP,DTAC),3,3,5,9,(TCBSMID2),(TCBSPT3A,X
               0)
         FMTPTRN (LBL,DTA,DTAP),3,4,19,23,,(TCBSPT3B,0)
         FMTPTRN (LBL,LBLP,DTA,DTAC,DTAP,DTAE),4,4,34,39,(TCBSMID3),(TCX
               BSPT3D,0),LAST
         SPACE
TCBSMID1 DC    C'JOBSTEPTJID'
TCBSMID2 DC    C'TCBCMPNTCOTCLTCTID'                             Y01980
TCBSMID3 DC    C'PAGE'
TCBSMTTL DC    C'* * * *    T C B  S U M M A R Y    * * * *'
TCBSERMS DC    C'FORMAT ERROR DURING TCB SUMMARY'
TSMPCH   DC    13F'0'              PATCH AREA                    X01980
         SPACE
         DROP  BASE1,COMBASE
         END
