         TITLE 'AMDPRNUC - PRINT NUCLEUS/SQA/CSA EXECUTOR ROUTINE      *
                       '
AMDPRNUC CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(16)                                          01S0001
         DC    C'AMDPRNUC  73.242'                              01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @11,0                                            01S0001
@PSTART  DS    0H                                               01S0001
         USING @PSTART,@11                                      01S0001
         ST    @13,@SA00001+4                                   01S0001
         LA    @14,@SA00001                                     01S0001
         ST    @14,8(,@13)                                      01S0001
         LR    @13,@14                                          01S0001
* SAVER13=R13;                    /* SAVE R13 FOR ERROR AND STOP     */
         ST    R13,SAVER13                                      01S0047
* RFY R13 UNRSTD;                 /* ROUTINES TO REFERENCE           */
* SAVERR=ERRADDR;                 /* SWAP ERROR AND STOP             */
         L     SAVERR,ERRADDR(,COMBASE)                         01S0049
* ERRADDR=ADDR(BRRDERR);          /* ROUTINE ADDRESSES               */
         LA    @10,BRRDERR                                      01S0050
         ST    @10,ERRADDR(,COMBASE)                            01S0050
* SAVSTOP=STOPEXIT;                                             01S0051
         L     SAVSTOP,STOPEXIT(,COMBASE)                       01S0051
* STOPEXIT=ADDR(STOPCODE);                                      01S0052
         LA    @10,STOPCODE                                     01S0052
         ST    @10,STOPEXIT(,COMBASE)                           01S0052
* IF OPERAND='NUCLEUS' × OPERAND(1)='N' THEN                    01S0053
         L     @10,KYWDBGN(,COMBASE)                            01S0053
         CLC   OPERAND(7,@10),@CC01186                          01S0053
         BE    @RT00053                                         01S0053
         CLI   OPERAND(@10),C'N'                                01S0053
         BNE   @RF00053                                         01S0053
@RT00053 DS    0H                                               01S0054
*   DO;                                                         01S0054
*/*                                                             02S0055
*     THIS SEGMENT PROCESSES THE 'PRINT NUCLEUS' CONTROL STATEMENT.
*       IT WRITES THE TITLE AT THE TOP OF THE PAGE, CALLS AMDPRUIM
*       TO LET EXIT ROUTINES PROCESS THE ENUCLEUS EXIT, ISSUES A
*       MESSAGE IF THE DEFAULT VALUE WAS USED FOR NUCTOP, AND   02S0055
*       PRINTS THE NUCLEUS BY CALLING AMDPRPCB AND AMDPRDPS.    02S0055
*                                                                    */
*                                                               02S0055
* GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE)                 02S0055
*   (BRWRITE SKIP);                                             02S0055
         BRWRITE SKIP
* BUFFER(40:LENGTH(NUCTTL)+39)=NUCTTL;                          02S0056
*                                                               02S0056
         L     @10,CURBUF(,COMBASE)                             02S0056
         MVC   BUFFER+39(42,@10),NUCTTL                         02S0056
* GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE)                 02S0057
*   (BRWRITE 2);                                                02S0057
         BRWRITE 2
* EXITFLAG=ENUCLEUS;                                            02S0058
         MVI   EXITFLAG(COMBASE),X'08'                          02S0058
* CALL AMDPRUIM;                  /* INTERFACE TO EXIT ROUTINES      */
*                                                               02S0059
         L     @15,AUSREXIT(,COMBASE)                           02S0059
         BALR  @14,@15                                          02S0059
* GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE)                 02S0060
*   (BRWRITE 1);                  /* SKIP A LINE                     */
         BRWRITE 1
* IF NUCTFRMC=OFF THEN            /* IF DEFAULT VALUE WAS USED FOR   */
         TM    NUCTFRMC(COMBASE),B'01000000'                    02S0061
         BNZ   @RF00061                                         02S0061
*   DO;                           /* NUCTOP, ISSUE COMMENT           */
*     BUFFER(1:LENGTH(NUCERMSG))=NUCERMSG;                      02S0063
*                                                               02S0063
         L     @10,CURBUF(,COMBASE)                             02S0063
         MVC   BUFFER(62,@10),NUCERMSG                          02S0063
*     GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE)             02S0064
*       (BRWRITE 2);                                            02S0064
         BRWRITE 2
*   END;                                                        02S0065
* PCBAD=ADDR(PCB);                /* SET UP A PCB TO PRINT FROM      */
@RF00061 LA    PCBAD,PCB                                        02S0066
* PCBPBGN=0;                      /* 0 THRU NUCTOP                   */
         SR    @10,@10                                          02S0067
         ST    @10,PCBPBGN(,PCBAD)                              02S0067
* PCBPEND=NUCTOP;                                               02S0068
         MVC   PCBPEND(4,PCBAD),NUCTOP(COMBASE)                 02S0068
* PCBPVIRT=ON;                                                  02S0069
         OI    PCBPVIRT(PCBAD),B'10000000'                      02S0069
* PCBPFUNC=PCBPENQ;                                             02S0070
         NI    PCBPFUNC(PCBAD),B'01111111'                      02S0070
* PREG=PCBAD;                                                   02S0071
         LR    PREG,PCBAD                                       02S0071
* CALL AMDPRPCB;                  /* ENQUEUE THE PCB                 */
         L     @15,APCBENQ(,COMBASE)                            02S0072
         BALR  @14,@15                                          02S0072
* CALL AMDPRDPS;                  /* PRINT THE DESCRIBED STORAGE     */
         L     @15,APRTSTG(,COMBASE)                            02S0073
         BALR  @14,@15                                          02S0073
*   END;                                                        01S0074
* ELSE                                                          01S0075
*   DO;                                                         01S0075
         B     @RC00053                                         01S0075
@RF00053 DS    0H                                               01S0076
*     IF OPERAND(1:3)='SQA' THEN                                01S0076
         L     @10,KYWDBGN(,COMBASE)                            01S0076
         CLC   OPERAND(3,@10),@CC01189                          01S0076
         BNE   @RF00076                                         01S0076
*       DO;                                                     01S0077
*/*                                                             02S0078
*     THIS SEGMENT PROCESSES THE 'PRINT SQA' CONTROL STATEMENT. 02S0078
*       IT PRINTS THE TITLE, OBTAINS THE SQA BOUNDARIES, AND    02S0078
*       PRINTS ALL AVAILABLE PIECES OF SQA IN THE DUMP.         02S0078
*                                                                    */
*                                                               02S0078
* GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE)                 02S0078
*   (BRWRITE SKIP);                                             02S0078
         BRWRITE SKIP
* BUFFER(44:LENGTH(SQATTL)+43)=SQATTL;                          02S0079
*                                                               02S0079
         L     @10,CURBUF(,COMBASE)                             02S0079
         MVC   BUFFER+43(34,@10),SQATTL                         02S0079
* GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE)                 02S0080
*   (BRWRITE 3);                                                02S0080
         BRWRITE 3
* CVTPTR=CVTADDR;                                               02S0081
         L     CVTPTR,CVTADDR(,COMBASE)                         02S0081
* IF CVTPTR ^= 0 THEN                                           02S0082
         LTR   CVTPTR,CVTPTR                                    02S0082
         BZ    @RF00082                                         02S0082
*   DO;                                                         02S0083
*/*                                                             03S0084
*     THIS SEGMENT GETS THE GDA ADDRESS FROM THE DUMP. IF THE   03S0084
*       GDA ADDRESS IS NOT AVAILABLE, AN ERROR MESSAGE IS PRINTED,
*       AND FLAGS ARE SET TO TERMINATE PROCESSING.              03S0084
*                                                                    */
*                                                               03S0084
* PREG=ADDR(CVTGDA);                                            03S0084
         LA    PREG,CVTGDA(,CVTPTR)                             03S0084
* GEN REFS(BRRDDATA)SETS(PREG,READERR)                          03S0085
*     FLOWS(BRRDERR)                                            03S0085
*   (BRREAD (PREG));                                            03S0085
         BRREAD (PREG)
* IF READERR=OFF THEN                                           03S0086
         TM    READERR,B'10000000'                              03S0086
         BNZ   @RF00086                                         03S0086
*   DO;                                                         03S0087
*     GDAPTR=RDWORD;              /* GET GDA ADDRESS                 */
         L     GDAPTR,RDWORD(,PREG)                             03S0088
*     IF GDAPTR=0 THEN                                          03S0089
         LTR   GDAPTR,GDAPTR                                    03S0089
         BNZ   @RF00089                                         03S0089
*       DO;                       /* ISSUE 'GDA ADDR 0' MESSAGE      */
*         BUFFER(1:LENGTH(GDA0MSG))=GDA0MSG;                    03S0091
*                                                               03S0091
         L     @10,CURBUF(,COMBASE)                             03S0091
         MVC   BUFFER(16,@10),GDA0MSG                           03S0091
*         GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE)         03S0092
*           (BRWRITE 1);                                        03S0092
         BRWRITE 1
*         PTERM=ON;               /* INDICATE 'PROC TERM' MESSAGE    */
         OI    PTERM,B'00100000'                                03S0093
*       END;                                                    03S0094
*   END;                                                        03S0095
* ELSE                                                          03S0096
*   DO;                           /* ERROR READING CVTGDA FIELD      */
*                                                               03S0096
         B     @RC00086                                         03S0096
@RF00086 DS    0H                                               03S0097
*     RFY R4 RSTD;                                              03S0097
*     R4=ADDR(CVTERMA1);                                        03S0098
         LA    R4,CVTERMA1                                      03S0098
*     CALL ADRCNVT;                                             03S0099
         L     @15,AADRCNVT(,COMBASE)                           03S0099
         BALR  @14,@15                                          03S0099
*     RFY R4 UNRSTD;                                            03S0100
*     BUFFER(1:LENGTH(CVTERMG1))=CVTERMG1;                      03S0101
*                                                               03S0101
         L     @10,CURBUF(,COMBASE)                             03S0101
         MVC   BUFFER(34,@10),CVTERMG1                          03S0101
*     GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE)             03S0102
*       (BRWRITE 1);                                            03S0102
         BRWRITE 1
*     READERR=OFF;                /* RESET READERR SWITCH            */
*     PTERM=ON;                   /* INDICATE 'PROC TERM' MESSAGE    */
         OI    PTERM,B'00100000'                                03S0104
         NI    READERR,B'01111111'                              03S0104
*     GDAPTR=0;                   /* INDICATE GDA WAS NOT FOUND      */
         SR    GDAPTR,GDAPTR                                    03S0105
*   END;                                                        03S0106
*     IF GDAPTR ^= 0 THEN         /* IF GDA WAS FOUND, CONTINUE      */
@RC00086 LTR   GDAPTR,GDAPTR                                    02S0107
         BZ    @RF00107                                         02S0107
*       DO;                                                     02S0108
*/*                                                             03S0109
*     THIS SEGMENT GETS THE SQA BOUNDARIES FROM THE DUMP AND    03S0109
*       ENQUEUES THE SQA PIECES FOR PRINTING BY CALLING         03S0109
*       AMDPRPCB.                                               03S0109
*                                                                    */
* GDAERFLD(1:8)='SQASPQEP';       /* ALTER MSG IN CASE OF ERROR      */
*                                                               03S0109
         MVC   GDAERFLD(8),@CC01192                             03S0109
* PREG=ADDR(SQASPQEP);                                          03S0110
         LA    PREG,SQASPQEP(,GDAPTR)                           03S0110
* GEN REFS(BRRDDATA)SETS(PREG,READERR)                          03S0111
*     FLOWS(BRRDERR)                                            03S0111
*   (BRREAD (PREG));                                            03S0111
         BRREAD (PREG)
* IF READERR=OFF THEN                                           03S0112
         TM    READERR,B'10000000'                              03S0112
         BNZ   @RF00112                                         03S0112
*   DO;                                                         03S0113
*     SPQESPTR=RDWORD;            /* GET SPQE POINTER FROM GDA       */
         L     SPQESPTR,RDWORD(,PREG)                           03S0114
*     IF SPQESPTR ^= 0 THEN       /* IF POINTER WAS THERE, CONTINUE  */
         LTR   SPQESPTR,SPQESPTR                                03S0115
         BZ    @RF00115                                         03S0115
*       DO;                                                     03S0116
*                                                               03S0116
*         PREG=ADDR(SPDQEPTR);                                  03S0117
         LA    PREG,SPDQEPTR(,SPQESPTR)                         03S0117
*         GEN REFS(BRRDDATA)SETS(PREG,READERR)                  03S0118
*             FLOWS(BRRDERR)                                    03S0118
*           (BRREAD (PREG));                                    03S0118
         BRREAD (PREG)
*         IF READERR=OFF THEN                                   03S0119
         TM    READERR,B'10000000'                              03S0119
         BNZ   @RF00119                                         03S0119
*           DO;                                                 03S0120
*             DQESEPTR=RDWORD;    /* GET DQE POINTER FROM SPQE       */
         L     DQESEPTR,RDWORD(,PREG)                           03S0121
*             IF DQESEPTR ^= 0 THEN  /* IF PTR WAS THERE, CONTINUE   */
         LTR   DQESEPTR,DQESEPTR                                03S0122
         BZ    @RF00122                                         03S0122
*               DO;                                             03S0123
*                 PCBAD=ADDR(PCB);                              03S0124
         LA    PCBAD,PCB                                        03S0124
*/*                                                             04S0125
*     THIS SEGMENT LOOPS THRU THE SQA DQE CHAIN ENQUEUEING SQA  04S0125
*       PIECES FOR PRINTING.                                    04S0125
*                                                                    */
* DO CTR=1 TO DQEMAX WHILE LOOPDONE=OFF;                        04S0125
         LA    CTR,1                                            04S0125
         B     @DE00125                                         04S0125
@DL00125 TM    LOOPDONE,B'01000000'                             04S0125
         BNZ   @DC00125                                         04S0125
*   DQELERFL(1:5)='BLKAD';        /* SET UP POSSIBLE ERROR MESSAGE   */
*                                                               04S0126
         MVC   DQELERFL(5),@CC01193                             04S0126
*   PREG=ADDR(DQEBLKAD);                                        04S0127
         LA    PREG,DQEBLKAD(,DQESEPTR)                         04S0127
*   GEN REFS(BRRDDATA)SETS(PREG,READERR)                        04S0128
*       FLOWS(BRRDERR)                                          04S0128
*     (BRREAD (PREG));                                          04S0128
         BRREAD (PREG)
*   IF READERR=OFF THEN                                         04S0129
         TM    READERR,B'10000000'                              04S0129
         BNZ   @RF00129                                         04S0129
*     DO;                         /* USE BLOCK ADDRESS & SIZE FIELDS */
*                                 /* TO CALCULATE ADDRESS RANGE      */
*       PCBPBGN=RDWORD;                                         04S0131
         L     @10,RDWORD(,PREG)                                04S0131
         ST    @10,PCBPBGN(,PCBAD)                              04S0131
*       PCBPEND=PCBPBGN+RDWORD2-1;                              04S0132
         A     @10,RDWORD2(,PREG)                               04S0132
         BCTR  @10,0                                            04S0132
         ST    @10,PCBPEND(,PCBAD)                              04S0132
*       PCBPVIRT=ON;                                            04S0133
         OI    PCBPVIRT(PCBAD),B'10000000'                      04S0133
*       PCBPFUNC=PCBPENQ;                                       04S0134
         NI    PCBPFUNC(PCBAD),B'01111111'                      04S0134
*       PREG=PCBAD;                                             04S0135
         LR    PREG,PCBAD                                       04S0135
*       CALL AMDPRPCB;            /* ENQUEUE STORAGE RANGE           */
         L     @15,APCBENQ(,COMBASE)                            04S0136
         BALR  @14,@15                                          04S0136
*     END;                                                      04S0137
*   ELSE                                                        04S0138
*     DO;                         /* READ ERROR ON DQE, ISSUE MSG    */
         B     @RC00129                                         04S0138
@RF00129 DS    0H                                               04S0139
*       READERR=OFF;                                            04S0139
*                                                               04S0139
         NI    READERR,B'01111111'                              04S0139
*       RFY R4 RSTD;                                            04S0140
*       R4=ADDR(DQELERMA);                                      04S0141
         LA    R4,DQELERMA                                      04S0141
*       CALL ADRCNVT;                                           04S0142
         L     @15,AADRCNVT(,COMBASE)                           04S0142
         BALR  @14,@15                                          04S0142
*       RFY R4 UNRSTD;                                          04S0143
*       BUFFER(1:LENGTH(DQELERMG))=DQELERMG;                    04S0144
*                                                               04S0144
         L     @10,CURBUF(,COMBASE)                             04S0144
         MVC   BUFFER(36,@10),DQELERMG                          04S0144
*       GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE)           04S0145
*         (BRWRITE 1);                                          04S0145
         BRWRITE 1
*       DQEERR=ON;                /* INDICATE ERROR ON DQE           */
         OI    DQEERR,B'00010000'                               04S0146
*     END;                                                      04S0147
*   DQELERFL(1:5)='PTR  ';        /* SET UP POSSIBLE ERROR MESSAGE   */
*                                                               04S0148
@RC00129 MVC   DQELERFL(5),@CC01194                             04S0148
*   PREG=ADDR(DQEPTR);                                          04S0149
         LA    PREG,DQEPTR(,DQESEPTR)                           04S0149
*   GEN REFS(BRRDDATA)SETS(PREG,READERR)                        04S0150
*       FLOWS(BRRDERR)                                          04S0150
*     (BRREAD (PREG));                                          04S0150
         BRREAD (PREG)
*   IF READERR=OFF THEN                                         04S0151
         TM    READERR,B'10000000'                              04S0151
         BNZ   @RF00151                                         04S0151
*     DO;                                                       04S0152
*       DQESEPTR=RDWORD;          /* GET POINTER TO NEXT DQE         */
         L     DQESEPTR,RDWORD(,PREG)                           04S0153
*       IF DQESEPTR=0 THEN        /* IF POINTER WAS 0,               */
         LTR   DQESEPTR,DQESEPTR                                04S0154
         BNZ   @RF00154                                         04S0154
*         LOOPDONE=ON;            /* FORCE EXIT FROM LOOP            */
         OI    LOOPDONE,B'01000000'                             04S0155
*     END;                                                      04S0156
*   ELSE                                                        04S0157
*     DO;                         /* READ ERROR ON POINTER TO NEXT   */
         B     @RC00151                                         04S0157
@RF00151 DS    0H                                               04S0158
*                                 /* DQE, ISSUE MESSAGE              */
*                                                               04S0158
*       RFY R4 RSTD;                                            04S0158
*       R4=ADDR(DQELERMA);                                      04S0159
         LA    R4,DQELERMA                                      04S0159
*       CALL ADRCNVT;                                           04S0160
         L     @15,AADRCNVT(,COMBASE)                           04S0160
         BALR  @14,@15                                          04S0160
*       RFY R4 UNRSTD;                                          04S0161
*       BUFFER(1:LENGTH(DQELERMG))=DQELERMG;                    04S0162
*                                                               04S0162
         L     @10,CURBUF(,COMBASE)                             04S0162
         MVC   BUFFER(36,@10),DQELERMG                          04S0162
*       GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE)           04S0163
*         (BRWRITE 1);                                          04S0163
         BRWRITE 1
*       DQEERR=ON;                /* INDICATE DQE READ ERROR         */
*       LOOPDONE=ON;              /* FORCE EXIT FROM LOOP            */
*       READERR=OFF;                                            04S0166
         OI    DQEERR,B'01010000'                               04S0166
         NI    READERR,B'01111111'                              04S0166
*     END;                                                      04S0167
* END;                                                          04S0168
@RC00151 AH    CTR,@CH00061                                     04S0168
@DE00125 CH    CTR,DQEMAX(,COMBASE)                             04S0168
         BNH   @DL00125                                         04S0168
@DC00125 DS    0H                                               04S0169
* IF LOOPDONE=ON THEN             /* IF LOOP EXIT WAS FORCED,        */
         TM    LOOPDONE,B'01000000'                             04S0169
         BNO   @RF00169                                         04S0169
*   LOOPDONE=OFF;                 /* RESET SWITCH                    */
         NI    LOOPDONE,B'10111111'                             04S0170
* ELSE                            /* IF LOOP EXIT WAS NOT FORCED,    */
*   DO;                           /* MAX EXCEEDED, ISSUE MSG         */
         B     @RC00169                                         04S0171
@RF00169 DS    0H                                               04S0172
*     BUFFER(1:LENGTH(DQELPMG))=DQELPMG;                        04S0172
*                                                               04S0172
         L     @10,CURBUF(,COMBASE)                             04S0172
         MVC   BUFFER(25,@10),DQELPMG                           04S0172
*     GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE)             04S0173
*       (BRWRITE 1);                                            04S0173
         BRWRITE 1
*     DQEERR=ON;                  /* INDICATE DQE ERROR              */
         OI    DQEERR,B'00010000'                               04S0174
*   END;                                                        04S0175
* IF DQEERR=ON THEN               /* IF ANY ERROR ON A DQE,          */
@RC00169 TM    DQEERR,B'00010000'                               04S0176
         BNO   @RF00176                                         04S0176
*   DO;                           /* CHECK FOR ENQUEUED STORAGE      */
*     IF PCBPTR=0 THEN            /* IF NO STORAGE WAS ENQUEUED,     */
         ICM   @10,15,PCBPTR(COMBASE)                           04S0178
         BNZ   @RF00178                                         04S0178
*       PTERM=ON;                 /* INDICATE 'PROC TERM' MESSAGE    */
         OI    PTERM,B'00100000'                                04S0179
*     ELSE                                                      04S0180
*       DO;                       /* STORAGE WAS ENQUEUED, ISSUE MSG */
         B     @RC00178                                         04S0180
@RF00178 DS    0H                                               04S0181
*         BUFFER(1:LENGTH(SQAPARTM))=SQAPARTM;                  04S0181
*                                                               04S0181
         L     @10,CURBUF(,COMBASE)                             04S0181
         MVC   BUFFER(32,@10),SQAPARTM                          04S0181
*         GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE)         04S0182
*           (BRWRITE 2);                                        04S0182
         BRWRITE 2
*       END;                                                    04S0183
*     DQEERR=OFF;                 /* RESET DQE ERROR SWITCH          */
@RC00178 NI    DQEERR,B'11101111'                               04S0184
*   END;                                                        04S0185
*               END;                                            03S0186
*             ELSE                                              03S0187
*               DO;               /* ISSUE 'NO DQE' MESSAGE          */
         B     @RC00122                                         03S0187
@RF00122 DS    0H                                               03S0188
*                 BUFFER(1:LENGTH(DQE0MSG))=DQE0MSG;            03S0188
*                                                               03S0188
         L     @10,CURBUF(,COMBASE)                             03S0188
         MVC   BUFFER(16,@10),DQE0MSG                           03S0188
*                 GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE) 03S0189
*                   (BRWRITE 1);                                03S0189
         BRWRITE 1
*                 PTERM=ON;       /* INDICATE 'PROC TERM' MESSAGE    */
         OI    PTERM,B'00100000'                                03S0190
*               END;                                            03S0191
*           END;                                                03S0192
*         ELSE                                                  03S0193
*           DO;                   /* DQE READ ERROR, ISSUE MESSAGE   */
*                                                               03S0193
         B     @RC00119                                         03S0193
@RF00119 DS    0H                                               03S0194
*             RFY R4 RSTD;                                      03S0194
*             R4=ADDR(SPQERRMA);                                03S0195
         LA    R4,SPQERRMA                                      03S0195
*             CALL ADRCNVT;                                     03S0196
         L     @15,AADRCNVT(,COMBASE)                           03S0196
         BALR  @14,@15                                          03S0196
*             RFY R4 UNRSTD;                                    03S0197
*             BUFFER(1:LENGTH(SPQERRMG))=SPQERRMG;              03S0198
*                                                               03S0198
         L     @10,CURBUF(,COMBASE)                             03S0198
         MVC   BUFFER(47,@10),SPQERRMG                          03S0198
*             GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE)     03S0199
*               (BRWRITE 1);                                    03S0199
         BRWRITE 1
*             READERR=OFF;        /* RESET READERR SWITCH            */
*             PTERM=ON;           /* INDICATE 'PROC TERM' MESSAGE    */
         OI    PTERM,B'00100000'                                03S0201
         NI    READERR,B'01111111'                              03S0201
*           END;                                                03S0202
*       END;                                                    03S0203
*     ELSE                                                      03S0204
*       DO;                       /* ISSUE 'NO SPQE' MESSAGE         */
         B     @RC00115                                         03S0204
@RF00115 DS    0H                                               03S0205
*         BUFFER(1:LENGTH(SPQE0MSG))=SPQE0MSG;                  03S0205
*                                                               03S0205
         L     @10,CURBUF(,COMBASE)                             03S0205
         MVC   BUFFER(17,@10),SPQE0MSG                          03S0205
*         GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE)         03S0206
*           (BRWRITE 1);                                        03S0206
         BRWRITE 1
*         PTERM=ON;               /* INDICATE 'PROC TERM' MESSAGE    */
         OI    PTERM,B'00100000'                                03S0207
*       END;                                                    03S0208
*   END;                                                        03S0209
* ELSE                                                          03S0210
*   DO;                           /* SPQE READ ERROR, ISSUE MESSAGE  */
*                                                               03S0210
         B     @RC00112                                         03S0210
@RF00112 DS    0H                                               03S0211
*     RFY R4 RSTD;                                              03S0211
*     R4=ADDR(GDAERMA);                                         03S0212
         LA    R4,GDAERMA                                       03S0212
*     CALL ADRCNVT;                                             03S0213
         L     @15,AADRCNVT(,COMBASE)                           03S0213
         BALR  @14,@15                                          03S0213
*     RFY R4 UNRSTD;                                            03S0214
*     BUFFER(1:LENGTH(GDAERMG))=GDAERMG;                        03S0215
*                                                               03S0215
         L     @10,CURBUF(,COMBASE)                             03S0215
         MVC   BUFFER(46,@10),GDAERMG                           03S0215
*     GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE)             03S0216
*       (BRWRITE 1);                                            03S0216
         BRWRITE 1
*     READERR=OFF;                /* RESET READERR SWITCH            */
*     PTERM=ON;                   /* INDICATE 'PROC TERM' MESSAGE    */
         OI    PTERM,B'00100000'                                03S0218
         NI    READERR,B'01111111'                              03S0218
*   END;                                                        03S0219
*         IF PCBPTR ^= 0 THEN     /* IF ANYTHING WAS ENQUEUED,       */
@RC00112 ICM   @10,15,PCBPTR(COMBASE)                           02S0220
         BZ    @RF00220                                         02S0220
*           CALL AMDPRDPS;        /* PRINT IT                        */
         L     @15,APRTSTG(,COMBASE)                            02S0221
         BALR  @14,@15                                          02S0221
*       END;                                                    02S0222
*   END;                                                        02S0223
* ELSE                                                          02S0224
*   DO;                           /* UNABLE TO ACCESS CVT            */
         B     @RC00082                                         02S0224
@RF00082 DS    0H                                               02S0225
*     BUFFER(1:LENGTH(CVTERMG))=CVTERMG;                        02S0225
*                                                               02S0225
         L     @10,CURBUF(,COMBASE)                             02S0225
         MVC   BUFFER(20,@10),CVTERMG                           02S0225
*     GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE)             02S0226
*       (BRWRITE 1);                                            02S0226
         BRWRITE 1
*     PTERM=ON;                   /* INDICATE 'PROC TERM' MESSAGE    */
         OI    PTERM,B'00100000'                                02S0227
*   END;                                                        02S0228
* IF PTERM=ON THEN                /* IF TERMINATE WITH ERROR WAS     */
@RC00082 TM    PTERM,B'00100000'                                02S0229
         BNO   @RF00229                                         02S0229
*   DO;                           /* INDICATED, ISSUE MESSAGE        */
*     PTERM=OFF;                                                02S0231
         NI    PTERM,B'11011111'                                02S0231
*     BUFFER(1:LENGTH(PTRMSG))=PTRMSG;                          02S0232
*                                                               02S0232
         L     @10,CURBUF(,COMBASE)                             02S0232
         MVC   BUFFER(21,@10),PTRMSG                            02S0232
*     GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE)             02S0233
*       (BRWRITE 1);                                            02S0233
         BRWRITE 1
*   END;                                                        02S0234
*       END;                                                    01S0235
*     ELSE                                                      01S0236
*       DO;                                                     01S0236
         B     @RC00076                                         01S0236
@RF00076 DS    0H                                               01S0237
*         IF OPERAND(1:3)='CSA' THEN                            01S0237
         L     @10,KYWDBGN(,COMBASE)                            01S0237
         CLC   OPERAND(3,@10),@CC01195                          01S0237
         BNE   @RF00237                                         01S0237
*           DO;                                                 01S0238
*/*                                                             02S0239
*     THIS SEGMENT PROCESSES THE 'PRINT CSA' CONTROL STATEMENT. 02S0239
*       IT PRINTS THE TITLE, OBTAINS THE CSA BOUNDARIES, AND    02S0239
*       PRINTS ALL AVAILABLE CSA IN THE DUMP.                   02S0239
*                                                                    */
*                                                               02S0239
* GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE)                 02S0239
*   (BRWRITE SKIP);                                             02S0239
         BRWRITE SKIP
* BUFFER(44:LENGTH(CSATTL)+43)=CSATTL;                          02S0240
*                                                               02S0240
         L     @10,CURBUF(,COMBASE)                             02S0240
         MVC   BUFFER+43(34,@10),CSATTL                         02S0240
* GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE)                 02S0241
*   (BRWRITE 3);                                                02S0241
         BRWRITE 3
* CVTPTR=CVTADDR;                                               02S0242
         L     CVTPTR,CVTADDR(,COMBASE)                         02S0242
* IF CVTPTR ^= 0 THEN                                           02S0243
         LTR   CVTPTR,CVTPTR                                    02S0243
         BZ    @RF00243                                         02S0243
*   DO;                                                         02S0244
*/*                                                             03S0245
*     THIS SEGMENT GETS THE GDA ADDRESS FROM THE DUMP. IF THE   03S0245
*       GDA ADDRESS IS NOT AVAILABLE, AN ERROR MESSAGE IS PRINTED,
*       AND FLAGS ARE SET TO TERMINATE PROCESSING.              03S0245
*                                                                    */
*                                                               03S0245
* PREG=ADDR(CVTGDA);                                            03S0245
         LA    PREG,CVTGDA(,CVTPTR)                             03S0245
* GEN REFS(BRRDDATA)SETS(PREG,READERR)                          03S0246
*     FLOWS(BRRDERR)                                            03S0246
*   (BRREAD (PREG));                                            03S0246
         BRREAD (PREG)
* IF READERR=OFF THEN                                           03S0247
         TM    READERR,B'10000000'                              03S0247
         BNZ   @RF00247                                         03S0247
*   DO;                                                         03S0248
*     GDAPTR=RDWORD;              /* GET GDA ADDRESS                 */
         L     GDAPTR,RDWORD(,PREG)                             03S0249
*     IF GDAPTR=0 THEN                                          03S0250
         LTR   GDAPTR,GDAPTR                                    03S0250
         BNZ   @RF00250                                         03S0250
*       DO;                       /* ISSUE 'GDA ADDR 0' MESSAGE      */
*         BUFFER(1:LENGTH(GDA0MSG))=GDA0MSG;                    03S0252
*                                                               03S0252
         L     @10,CURBUF(,COMBASE)                             03S0252
         MVC   BUFFER(16,@10),GDA0MSG                           03S0252
*         GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE)         03S0253
*           (BRWRITE 1);                                        03S0253
         BRWRITE 1
*         PTERM=ON;               /* INDICATE 'PROC TERM' MESSAGE    */
         OI    PTERM,B'00100000'                                03S0254
*       END;                                                    03S0255
*   END;                                                        03S0256
* ELSE                                                          03S0257
*   DO;                           /* ERROR READING CVTGDA FIELD      */
*                                                               03S0257
         B     @RC00247                                         03S0257
@RF00247 DS    0H                                               03S0258
*     RFY R4 RSTD;                                              03S0258
*     R4=ADDR(CVTERMA1);                                        03S0259
         LA    R4,CVTERMA1                                      03S0259
*     CALL ADRCNVT;                                             03S0260
         L     @15,AADRCNVT(,COMBASE)                           03S0260
         BALR  @14,@15                                          03S0260
*     RFY R4 UNRSTD;                                            03S0261
*     BUFFER(1:LENGTH(CVTERMG1))=CVTERMG1;                      03S0262
*                                                               03S0262
         L     @10,CURBUF(,COMBASE)                             03S0262
         MVC   BUFFER(34,@10),CVTERMG1                          03S0262
*     GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE)             03S0263
*       (BRWRITE 1);                                            03S0263
         BRWRITE 1
*     READERR=OFF;                /* RESET READERR SWITCH            */
*     PTERM=ON;                   /* INDICATE 'PROC TERM' MESSAGE    */
         OI    PTERM,B'00100000'                                03S0265
         NI    READERR,B'01111111'                              03S0265
*     GDAPTR=0;                   /* INDICATE GDA WAS NOT FOUND      */
         SR    GDAPTR,GDAPTR                                    03S0266
*   END;                                                        03S0267
*     IF GDAPTR ^= 0 THEN         /* IF GDA WAS FOUND, CONTINUE      */
@RC00247 LTR   GDAPTR,GDAPTR                                    02S0268
         BZ    @RF00268                                         02S0268
*       DO;                                                     02S0269
*/*                                                             03S0270
*     THIS SEGMENT OBTAINS THE CSA BOUNDARIES AND ENQUEUES THEM 03S0270
*       FOR PRINTING.                                           03S0270
*                                                                    */
* GDAERFLD(1:8)='CSAPQEP';        /* SET UP POSSIBLE ERROR MESSAGE   */
*                                                               03S0270
         MVI   GDAERFLD+7,C' '                                  03S0270
         MVC   GDAERFLD(7),@CC01196                             03S0270
* PREG=ADDR(CSAPQEP);                                           03S0271
         LA    PREG,CSAPQEP(,GDAPTR)                            03S0271
* GEN REFS(BRRDDATA)SETS(PREG,READERR)                          03S0272
*     FLOWS(BRRDERR)                                            03S0272
*   (BRREAD (PREG));                                            03S0272
         BRREAD (PREG)
* IF READERR=OFF THEN                                           03S0273
         TM    READERR,B'10000000'                              03S0273
         BNZ   @RF00273                                         03S0273
*   DO;                                                         03S0274
*     PQESEPTR=RDWORD;            /* GET PQE POINTER FROM GDA        */
         L     PQESEPTR,RDWORD(,PREG)                           03S0275
*     IF PQESEPTR ^= 0 THEN       /* IF PQE WAS THERE, CONTINUE      */
         LTR   PQESEPTR,PQESEPTR                                03S0276
         BZ    @RF00276                                         03S0276
*       DO;                                                     03S0277
*         PCBAD=ADDR(PCB);                                      03S0278
         LA    PCBAD,PCB                                        03S0278
*         PQERFLD(1:4)='REGN';    /* SET UP POSSIBLE ERROR MESSAGE   */
*                                                               03S0279
         MVC   PQERFLD(4),@CC01197                              03S0279
*         PREG=ADDR(PQEREGN);                                   03S0280
         LA    PREG,PQEREGN(,PQESEPTR)                          03S0280
*         GEN REFS(BRRDDATA)SETS(PREG,READERR)                  03S0281
*             FLOWS(BRRDERR)                                    03S0281
*           (BRREAD (PREG));                                    03S0281
         BRREAD (PREG)
*         IF READERR=OFF THEN                                   03S0282
         TM    READERR,B'10000000'                              03S0282
         BNZ   @RF00282                                         03S0282
*           DO;                                                 03S0283
*             PCBPBGN=RDWORD;     /* GET STARTING ADDRESS FROM PQE   */
         MVC   PCBPBGN(4,PCBAD),RDWORD(PREG)                    03S0284
*             PQERFLD(1:4)='SIZE'; /* SET UP POSSIBLE ERROR MESSAGE  */
*                                                               03S0285
         MVC   PQERFLD(4),@CC01198                              03S0285
*             PREG=ADDR(PQESIZE);                               03S0286
         LA    PREG,PQESIZE(,PQESEPTR)                          03S0286
*             GEN REFS(BRRDDATA)SETS(PREG,READERR)              03S0287
*                 FLOWS(BRRDERR)                                03S0287
*               (BRREAD (PREG));                                03S0287
         BRREAD (PREG)
*             IF READERR=OFF THEN                               03S0288
         TM    READERR,B'10000000'                              03S0288
         BNZ   @RF00288                                         03S0288
*               DO;               /* USE SIZE FROM PQE TO CALCULATE  */
*                 PCBPEND=PCBPBGN+RDWORD-1; /* ENDING ADDRESS        */
         L     @10,PCBPBGN(,PCBAD)                              03S0290
         A     @10,RDWORD(,PREG)                                03S0290
         BCTR  @10,0                                            03S0290
         ST    @10,PCBPEND(,PCBAD)                              03S0290
*                 PCBPVIRT=ON;                                  03S0291
         OI    PCBPVIRT(PCBAD),B'10000000'                      03S0291
*                 PCBPFUNC=PCBPENQ;                             03S0292
         NI    PCBPFUNC(PCBAD),B'01111111'                      03S0292
*                 PREG=PCBAD;                                   03S0293
         LR    PREG,PCBAD                                       03S0293
*                 CALL AMDPRPCB;  /* ENQUEUE ADDRESS RANGE           */
         L     @15,APCBENQ(,COMBASE)                            03S0294
         BALR  @14,@15                                          03S0294
*               END;                                            03S0295
*           END;                                                03S0296
@RF00288 DS    0H                                               03S0297
*         IF READERR=ON THEN      /* IF PQE READ ERROR, ISSUE MSG    */
@RF00282 TM    READERR,B'10000000'                              03S0297
         BNO   @RF00297                                         03S0297
*           DO;                                                 03S0298
*             READERR=OFF;                                      03S0299
*                                                               03S0299
         NI    READERR,B'01111111'                              03S0299
*             RFY R4 RSTD;                                      03S0300
*             R4=ADDR(PQERMA);                                  03S0301
         LA    R4,PQERMA                                        03S0301
*             CALL ADRCNVT;                                     03S0302
         L     @15,AADRCNVT(,COMBASE)                           03S0302
         BALR  @14,@15                                          03S0302
*             RFY R4 UNRSTD;                                    03S0303
*             BUFFER(1:LENGTH(PQERMG))=PQERMG;                  03S0304
*                                                               03S0304
         L     @10,CURBUF(,COMBASE)                             03S0304
         MVC   BUFFER(35,@10),PQERMG                            03S0304
*             GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE)     03S0305
*               (BRWRITE 1);                                    03S0305
         BRWRITE 1
*             PTERM=ON;           /* INDICATE 'PROC TERM' MESSAGE    */
         OI    PTERM,B'00100000'                                03S0306
*           END;                                                03S0307
*       END;                                                    03S0308
*     ELSE                                                      03S0309
*       DO;                       /* NO PQE, ISSUE MESSAGE           */
         B     @RC00276                                         03S0309
@RF00276 DS    0H                                               03S0310
*         BUFFER(1:LENGTH(PQE0MSG))=PQE0MSG;                    03S0310
*                                                               03S0310
         L     @10,CURBUF(,COMBASE)                             03S0310
         MVC   BUFFER(16,@10),PQE0MSG                           03S0310
*         GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE)         03S0311
*           (BRWRITE 1);                                        03S0311
         BRWRITE 1
*         PTERM=ON;               /* INDICATE 'PROC TERM' MESSAGE    */
         OI    PTERM,B'00100000'                                03S0312
*       END;                                                    03S0313
*   END;                                                        03S0314
* ELSE                                                          03S0315
*   DO;                           /* READ ERROR ON GDA, ISSUE MSG    */
         B     @RC00273                                         03S0315
@RF00273 DS    0H                                               03S0316
*     READERR=OFF;                                              03S0316
*                                                               03S0316
         NI    READERR,B'01111111'                              03S0316
*     RFY R4 RSTD;                                              03S0317
*     R4=ADDR(GDAERMA);                                         03S0318
         LA    R4,GDAERMA                                       03S0318
*     CALL ADRCNVT;                                             03S0319
         L     @15,AADRCNVT(,COMBASE)                           03S0319
         BALR  @14,@15                                          03S0319
*     RFY R4 UNRSTD;                                            03S0320
*     BUFFER(1:LENGTH(GDAERMG))=GDAERMG;                        03S0321
*                                                               03S0321
         L     @10,CURBUF(,COMBASE)                             03S0321
         MVC   BUFFER(46,@10),GDAERMG                           03S0321
*     GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE)             03S0322
*       (BRWRITE 1);                                            03S0322
         BRWRITE 1
*     PTERM=ON;                   /* INDICATE 'PROC TERM' MESSAGE    */
         OI    PTERM,B'00100000'                                03S0323
*   END;                                                        03S0324
*         IF PCBPTR ^= 0 THEN     /* IF ANYTHING WAS ENQUEUED,       */
@RC00273 ICM   @10,15,PCBPTR(COMBASE)                           02S0325
         BZ    @RF00325                                         02S0325
*           CALL AMDPRDPS;        /* PRINT IT                        */
         L     @15,APRTSTG(,COMBASE)                            02S0326
         BALR  @14,@15                                          02S0326
*       END;                                                    02S0327
*   END;                                                        02S0328
* ELSE                                                          02S0329
*   DO;                           /* UNABLE TO ACCESS CVT            */
         B     @RC00243                                         02S0329
@RF00243 DS    0H                                               02S0330
*     BUFFER(1:LENGTH(CVTERMG))=CVTERMG;                        02S0330
*                                                               02S0330
         L     @10,CURBUF(,COMBASE)                             02S0330
         MVC   BUFFER(20,@10),CVTERMG                           02S0330
*     GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE)             02S0331
*       (BRWRITE 1);                                            02S0331
         BRWRITE 1
*     PTERM=ON;                   /* INDICATE 'PROC TERM' MESSAGE    */
         OI    PTERM,B'00100000'                                02S0332
*   END;                                                        02S0333
* IF PTERM=ON THEN                /* IF TERMINATE WITH ERROR WAS     */
@RC00243 TM    PTERM,B'00100000'                                02S0334
         BNO   @RF00334                                         02S0334
*   DO;                           /* INDICATED, ISSUE MESSAGE        */
*     PTERM=OFF;                                                02S0336
         NI    PTERM,B'11011111'                                02S0336
*     BUFFER(1:LENGTH(PTRMSG))=PTRMSG;                          02S0337
*                                                               02S0337
         L     @10,CURBUF(,COMBASE)                             02S0337
         MVC   BUFFER(21,@10),PTRMSG                            02S0337
*     GEN REFS(AWRITE) SETS(CURBUF) FLOWS(STOPCODE)             02S0338
*       (BRWRITE 1);                                            02S0338
         BRWRITE 1
*   END;                                                        02S0339
*           END;                                                01S0340
@RF00334 DS    0H                                               01S0341
*       END;                                                    01S0341
@RF00237 DS    0H                                               01S0342
*   END;                                                        01S0342
@RC00076 DS    0H                                               01S0343
* ERRADDR=SAVERR;                 /* RESTORE PREVIOUS ERROR AND      */
@RC00053 ST    SAVERR,ERRADDR(,COMBASE)                         01S0343
* STOPEXIT=SAVSTOP;               /* STOP ROUTINE ADDRESSES          */
         ST    SAVSTOP,STOPEXIT(,COMBASE)                       01S0344
* RETURN;                                                       01S0345
@EL00001 L     @13,4(,@13)                                      01S0345
@EF00001 DS    0H                                               01S0345
@ER00001 LM    @14,@12,12(@13)                                  01S0345
         BR    @14                                              01S0345
*/*                                                             01S0346
*     BRREAD ERROR ROUTINE - THIS ROUTINE GETS CONTROL WHEN A   01S0346
*       BRREAD ERROR OCCURS. THE ROUTINE RESTORES REGISTERS, SETS
*       A SWITCH TO INDICATE THAT AN ERROR OCCURED, AND RETURNS 01S0346
*       TO THE MAIN LINE CODE BY BRANCHING ON REGISTER 14.      01S0346
*                                                                    */
*BRRDERR: GEN REFS(SAVER13);                                    01S0346
BRRDERR  DS    0H                                               01S0346
         USING *,R15
         L     R13,SAVER13
         LM    R14,R12,12(R13)
         DROP  R15
* READERR=ON;                                                   01S0347
         OI    READERR,B'10000000'                              01S0347
* RFY R14 RSTD;                                                 01S0348
* GO TO BRRDRTRN;                                               01S0349
         BR    R14                                              01S0349
* RFY R14 UNRSTD;                                               01S0350
*/*                                                             01S0351
*     STOP ROUTINE - THIS ROUTINE GETS CONTROL WHEN THE OPERATOR
*       REQUESTS 'STOP'. IT RESTORES REGISTERS, FREES ANY PCBS  01S0351
*       THAT HAVE NOT BEEN PROCESSED YET, RESTORES INTERNAL     01S0351
*       SWITCHES, DE-ACTIVATES THE ERROR AND STOP ROUTINES, AND 01S0351
*       RETURNS CONTROL TO THE NEXT HIGHER STOP ROUTINE.        01S0351
*                                                                    */
*STOPCODE: GEN REFS(SAVER13);                                   01S0351
STOPCODE DS    0H                                               01S0351
         USING *,R15
         L     R13,SAVER13
         LM    R14,R12,12(R13)
         DROP  R15
* DO WHILE PCBPTR ^= 0;                                         01S0352
         B     @DE00352                                         01S0352
@DL00352 DS    0H                                               01S0353
*   PREG=ADDR(PCB);                                             01S0353
         LA    PREG,PCB                                         01S0353
*   PREG->PCBPFUNC=PCBPDEQ;                                     01S0354
         OI    PCBPFUNC(PREG),B'10000000'                       01S0354
*   CALL AMDPRPCB;                                              01S0355
         L     @15,APCBENQ(,COMBASE)                            01S0355
         BALR  @14,@15                                          01S0355
* END;                                                          01S0356
@DE00352 ICM   @10,15,PCBPTR(COMBASE)                           01S0356
         BNZ   @DL00352                                         01S0356
* SWITCHES=''B;                                                 01S0357
         MVI   SWITCHES,X'00'                                   01S0357
* ERRADDR=SAVERR;                                               01S0358
         ST    SAVERR,ERRADDR(,COMBASE)                         01S0358
* STOPEXIT=SAVSTOP;                                             01S0359
         ST    SAVSTOP,STOPEXIT(,COMBASE)                       01S0359
* RFY R15 RSTD;                                                 01S0360
* R15=SAVSTOP;                    /* PERCOLATE TO NEXT STOP ROUTINE  */
         LR    R15,SAVSTOP                                      01S0361
* GO TO NEXTSTOP;                                               01S0362
         BR    R15                                              01S0362
* RFY R15 UNRSTD;                                               01S0363
* END AMDPRNUC                                                  01S0364
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSUT5  (NUCPROLG)                                        *
*/*%INCLUDE SYSUT5  (MACROS  )                                        *
*/*%INCLUDE SYSUT5  (DECLARES)                                        *
*/*%INCLUDE SYSLIB  (CVT     )                                        *
*/*%INCLUDE SYSLIB  (IHAGDA  )                                        *
*/*%INCLUDE SYSLIB  (IHASPQE )                                        *
*/*%INCLUDE SYSLIB  (IHADQE  )                                        *
*/*%INCLUDE SYSLIB  (IHAPQE  )                                        *
*/*%INCLUDE SYSLIB  (COMMON  )                                        *
*/*%INCLUDE SYSLIB  (AMDPCBPL)                                        *
*/*%INCLUDE SYSUT5  (PNUC    )                                        *
*/*%INCLUDE SYSUT5  (PSQA    )                                        *
*/*%INCLUDE SYSUT5  (GETGDA  )                                        *
*/*%INCLUDE SYSUT5  (GETGDA  )                                        *
*/*%INCLUDE SYSUT5  (GTSQABDY)                                        *
*/*%INCLUDE SYSUT5  (DQELOOP )                                        *
*/*%INCLUDE SYSUT5  (PCSA    )                                        *
*/*%INCLUDE SYSUT5  (GTCSABDY)                                        *
*/*%INCLUDE SYSUT5  (BRRDERR )                                        *
*/*%INCLUDE SYSUT5  (STOPCODE)                                        *
*;                                                              01S0364
@DATA    DS    0H
@CH00061 DC    H'1'
         DS    0F
@SA00001 DS    18F
         DS    0F
         DS    0D
SAVER13  DC    A(0)
@CC01189 DC    C'SQA'
@CC01195 DC    C'CSA'
@CC01197 DC    C'REGN'
@CC01198 DC    C'SIZE'
@CC01193 DC    C'BLKAD'
@CC01194 DC    C'PTR  '
@CC01186 DC    C'NUCLEUS'
@CC01196 DC    C'CSAPQEP'
@CC01192 DC    C'SQASPQEP'
SWITCHES DC    AL1(0)
         ORG   SWITCHES
READERR  DS    BL1
LOOPDONE EQU   SWITCHES+0
PTERM    EQU   SWITCHES+0
DQEERR   EQU   SWITCHES+0
@NM00055 EQU   SWITCHES+0
         ORG   SWITCHES+1
NUCTTL   DC    CL42'* * * *  N U C L E U S  P R I N T  * * * *'
SQATTL   DC    CL34'* * * *  S Q A  P R I N T  * * * *'
CSATTL   DC    CL34'* * * *  C S A  P R I N T  * * * *'
NUCERMSG DC    CL62'ERROR FINDING NUCLEUS BOUNDARIES - DEFAULT VALUES WC
               ILL BE USED'
GDA0MSG  DC    CL16'GDA ADDRESS IS 0'
CVTERMG1 DS    CL34
         ORG   CVTERMG1
@NM00056 DC    CL26'UNABLE TO ACCESS CVTGDA - '
CVTERMA1 DC    CL8'XXXXXX -'
         ORG   CVTERMG1+34
CVTERMG  DC    CL20'UNABLE TO ACCESS CVT'
PTRMSG   DC    CL21'PROCESSING TERMINATED'
DQE0MSG  DC    CL16'DQE ADDRESS IS 0'
SPQERRMG DS    CL47
         ORG   SPQERRMG
@NM00057 DC    CL39'UNABLE TO ACCESS SPQE FIELD SPDQEPTR - '
SPQERRMA DC    CL8'XXXXXX -'
         ORG   SPQERRMG+47
SPQE0MSG DC    CL17'SPQE ADDRESS IS 0'
GDAERMG  DS    CL46
         ORG   GDAERMG
@NM00058 DC    CL27'UNABLE TO ACCESS GDA FIELD '
GDAERFLD DC    CL11'XXXXXXXX - '
GDAERMA  DC    CL8'XXXXXX -'
         ORG   GDAERMG+46
DQELERMG DS    CL36
         ORG   DQELERMG
@NM00059 DC    CL20'UNABLE TO ACCESS DQE'
DQELERFL DC    CL8'XXXXX - '
DQELERMA DC    CL8'XXXXXX -'
         ORG   DQELERMG+36
PQERMG   DS    CL35
         ORG   PQERMG
@NM00060 DC    CL20'UNABLE TO ACCESS PQE'
PQERFLD  DC    CL7'XXXX - '
PQERMA   DC    CL8'XXXXXX -'
         ORG   PQERMG+35
PQE0MSG  DC    CL16'PQE ADDRESS IS 0'
SQAPARTM DC    CL32'ONLY PART OF SQA WILL BE PRINTED'
DQELPMG  DC    CL25'LOOP ASSUMED IN DQE CHAIN'
PCB      DS    CL12
         ORG   PCB
@NM00061 DC    12AL1(0)
         ORG   PCB+12
NUCPATCH DC    26F'0'
AMDPRNUC CSECT
DTAE     EQU   32                  DATA EBCDIC BIT
DTAC     EQU   16                  DATA IN CORE BIT
DTAP     EQU   8                   DATA PTR BIT
DTA      EQU   4                   DATA INCLUDED BIT
LBLP     EQU   2                   LABEL PTR BIT
LBL      EQU   1                   LABEL INCLUDED BIT
AMDPRNUC CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
CTR      EQU   @07
SAVSTOP  EQU   @05
SAVERR   EQU   @06
PCBAD    EQU   @02
PQESEPTR EQU   @03
DQESEPTR EQU   @03
SPQESPTR EQU   @02
GDAPTR   EQU   @02
CVTPTR   EQU   @02
R1       EQU   @01
R4       EQU   @04
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
COMBASE  EQU   @12
PREG     EQU   @01
BASE1    EQU   @11
BASE2    EQU   @10
BASE3    EQU   @09
BUFREG   EQU   @06
CNTREG   EQU   @03
LINEREG  EQU   @08
R0       EQU   @00
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R2       EQU   @02
R3       EQU   @03
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
STOPBASE EQU   @05
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTTSCVT EQU   CVTMAP+228
CVTTSFLG EQU   CVTTSCVT
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTRSV90 EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
GDA      EQU   0
GVSMFLAG EQU   GDA
GDAFLAGS EQU   GVSMFLAG
CSAPQEP  EQU   GDA+8
SQASPQEP EQU   GDA+24
VRPOSTQ  EQU   GDA+32
VRWAITQ  EQU   GDA+40
SPQESECT EQU   0
SPQEAD   EQU   SPQESECT
SPDQEPTR EQU   SPQESECT+4
SPQEFLGS EQU   SPQESECT+8
DQESECT  EQU   0
DQEPTR   EQU   DQESECT+4
DQEBLKAD EQU   DQESECT+8
PQESECT  EQU   0
PQESIZE  EQU   PQESECT+20
PQEREGN  EQU   PQESECT+24
VMMFLGS  EQU   PQESECT+30
COMMON   EQU   0
ERRADDR  EQU   COMMON
KYWDBGN  EQU   COMMON+12
NUCTOP   EQU   COMMON+32
CURBUF   EQU   COMMON+48
CVTADDR  EQU   COMMON+56
PCBPTR   EQU   COMMON+60
SWA      EQU   COMMON+122
SWB      EQU   COMMON+123
SWC      EQU   COMMON+124
SWD      EQU   COMMON+125
SWE      EQU   COMMON+126
SWF      EQU   COMMON+127
NUCTFRMC EQU   SWF
BUFSW    EQU   COMMON+128
PRSW     EQU   COMMON+129
TABLE    EQU   COMMON+659
HEXTABL  EQU   TABLE+63
AWRITE   EQU   COMMON+1500
AADRCNVT EQU   COMMON+1516
STOPEXIT EQU   COMMON+1528
APCBENQ  EQU   COMMON+1560
APRTSTG  EQU   COMMON+1572
DCBADDRS EQU   COMMON+1608
@NM00046 EQU   DCBADDRS+16
@NM00047 EQU   @NM00046
BRRDDATA EQU   COMMON+1984
AUSREXIT EQU   COMMON+2008
EXITFLAG EQU   COMMON+2022
DQEMAX   EQU   COMMON+2042
PCBPL    EQU   0
PCBPBGN  EQU   PCBPL
PCBPEND  EQU   PCBPL+4
PCBPFLG1 EQU   PCBPL+10
PCBPVIRT EQU   PCBPFLG1
PCBPFLG2 EQU   PCBPL+11
PCBPFUNC EQU   PCBPFLG2
AMDPRPCB EQU   0
AMDPRDPS EQU   0
BRRDRTRN EQU   0
NEXTSTOP EQU   0
ADRCNVT  EQU   0
AMDPRUIM EQU   0
OPERAND  EQU   0
READALL  EQU   0
RDWORD   EQU   READALL
RDWORD2  EQU   READALL+4
OUTBUF   EQU   0
BUFFER   EQU   OUTBUF+1
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV100 EQU   CVTS01+116
CVTRV109 EQU   CVTS01+117
CVTRV118 EQU   CVTS01+118
CVTRV127 EQU   CVTS01+119
CVTGDA   EQU   CVTS01+212
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTRV301 EQU   CVTS01+475
CVTRV300 EQU   CVTS01+474
CVTRV299 EQU   CVTS01+473
CVTRV298 EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTRV202 EQU   CVTS01+394
CVTRV201 EQU   CVTS01+392
CVTRV200 EQU   CVTS01+390
CVTRV199 EQU   CVTS01+388
CVTRV198 EQU   CVTS01+386
CVTRV197 EQU   CVTS01+384
CVTRV196 EQU   CVTS01+383
CVTRV195 EQU   CVTS01+382
CVTRV194 EQU   CVTS01+381
CVTRV193 EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTWSAG  EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTRV514 EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTRV146 EQU   CVTS01+134
CVTRV145 EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTRV142 EQU   CVTS01+126
CVTRV141 EQU   CVTS01+125
CVTRV140 EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTRV135 EQU   CVTRV127
CVTRV134 EQU   CVTRV127
CVTRV133 EQU   CVTRV127
CVTRV132 EQU   CVTRV127
CVTRV131 EQU   CVTRV127
CVTRV130 EQU   CVTRV127
CVTRV129 EQU   CVTRV127
CVTRV128 EQU   CVTRV127
CVTRV126 EQU   CVTRV118
CVTRV125 EQU   CVTRV118
CVTRV124 EQU   CVTRV118
CVTRV123 EQU   CVTRV118
CVTRV122 EQU   CVTRV118
CVTRV121 EQU   CVTRV118
CVTRV120 EQU   CVTRV118
CVTRV119 EQU   CVTRV118
CVTRV117 EQU   CVTRV109
CVTRV116 EQU   CVTRV109
CVTRV115 EQU   CVTRV109
CVTRV114 EQU   CVTRV109
CVTRV113 EQU   CVTRV109
CVTRV112 EQU   CVTRV109
CVTRV111 EQU   CVTRV109
CVTRV110 EQU   CVTRV109
CVTRV108 EQU   CVTRV100
CVTRV107 EQU   CVTRV100
CVTRV106 EQU   CVTRV100
CVTRV105 EQU   CVTRV100
CVTRV104 EQU   CVTRV100
CVTRV103 EQU   CVTRV100
CVTRV102 EQU   CVTRV100
CVTRV101 EQU   CVTRV100
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTRSV82 EQU   CVTS01+98
CVTRSV81 EQU   CVTS01+96
CVTSYSWT EQU   CVTS01+92
CVTRV327 EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTRSVA2 EQU   CVTS01
CTLCHAR  EQU   OUTBUF
@NM00054 EQU   PCBPFLG2
@NM00053 EQU   PCBPFLG1
PCBPTOPC EQU   PCBPFLG1
PCBPLOWC EQU   PCBPFLG1
PCBPREAL EQU   PCBPFLG1
PCBPASID EQU   PCBPL+8
CSADDR   EQU   COMMON+2072
@NM00052 EQU   COMMON+2070
TOPICHDR EQU   COMMON+2060
DFLTCSA  EQU   COMMON+2056
LPAMAX   EQU   COMMON+2052
DNUCTOP  EQU   COMMON+2048
XLMAX    EQU   COMMON+2044
ASCBMAX  EQU   COMMON+2040
TCBMAX   EQU   COMMON+2038
SRBMAX   EQU   COMMON+2036
DDMAX    EQU   COMMON+2034
DEBMAX   EQU   COMMON+2032
JPQMAX   EQU   COMMON+2030
LLEMAX   EQU   COMMON+2028
PQEMAX   EQU   COMMON+2026
RBMAX    EQU   COMMON+2024
@NM00051 EQU   COMMON+2023
AUSRASID EQU   COMMON+2020
AUSRTCBA EQU   COMMON+2016
AUSRDEL  EQU   COMMON+2012
AUSRINIT EQU   COMMON+2004
ASRBFMT  EQU   COMMON+2000
AASCBFMT EQU   COMMON+1996
BRRDADJ  EQU   COMMON+1992
BRRDINIT EQU   COMMON+1988
BUFERMAP EQU   COMMON+1980
ASCBMAP  EQU   COMMON+1976
CPUMAP   EQU   COMMON+1972
ASIDNDX  EQU   COMMON+1968
@NM00050 EQU   COMMON+1964
HDRTITLE EQU   COMMON+1864
HDRREGS  EQU   COMMON+1696
SACSWCAW EQU   COMMON+1684
ASVTADDR EQU   COMMON+1680
PREFXRGV EQU   COMMON+1676
PREFXRGR EQU   COMMON+1672
CURASCB  EQU   COMMON+1668
IPLCPU   EQU   COMMON+1666
QASID    EQU   COMMON+1664
QAPFT    EQU   COMMON+1660
@NM00049 EQU   COMMON+1656
REALMAX  EQU   COMMON+1652
SEGTABOR EQU   COMMON+1648
REALMAP  EQU   COMMON+1644
@NM00048 EQU   COMMON+1641
EDITER   EQU   COMMON+1640
AROOT    EQU   COMMON+1636
AEDITCB  EQU   COMMON+1632
TRCCOUNT EQU   COMMON+1628
ASYSUDCB EQU   @NM00046+1
ENDLIST  EQU   @NM00047
AINDCB   EQU   DCBADDRS+12
ARDRDCB  EQU   DCBADDRS+8
APTRDCB  EQU   DCBADDRS+4
AOUTDCB  EQU   DCBADDRS
ATCBSMRY EQU   COMMON+1604
ATCBSMFR EQU   COMMON+1600
ONGOPTR  EQU   COMMON+1596
AEND     EQU   COMMON+1592
AERRMSGA EQU   COMMON+1584
BUFREINT EQU   COMMON+1580
BUFSUM   EQU   COMMON+1576
AFORMAT  EQU   COMMON+1568
ASTPROUT EQU   COMMON+1564
ATCBRTRV EQU   COMMON+1556
ATCBREMV EQU   COMMON+1552
ATCBSAVE EQU   COMMON+1548
QATMERTN EQU   COMMON+1544
ALOADER  EQU   COMMON+1540
AEREXIT  EQU   COMMON+1536
SYNMSGA  EQU   COMMON+1532
ARGNBND  EQU   COMMON+1524
AWRDCNVT EQU   COMMON+1520
AFMTLINE EQU   COMMON+1512
ASYNTAX  EQU   COMMON+1508
APRTMSG  EQU   COMMON+1504
NONBLNK  EQU   COMMON+1244
BLNK     EQU   COMMON+988
@NM00045 EQU   COMMON+972
@NM00044 EQU   COMMON+915
EBCTABL  EQU   HEXTABL+10
@NM00043 EQU   HEXTABL
@NM00042 EQU   TABLE
CAPTABL  EQU   COMMON+403
TITLEPGE EQU   COMMON+394
@NM00041 EQU   COMMON+392
TITLETME EQU   COMMON+379
@NM00040 EQU   COMMON+377
TITLEDTE EQU   COMMON+364
@NM00039 EQU   COMMON+362
TITLEMOD EQU   COMMON+347
TITLEMSG EQU   COMMON+283
MSG2     EQU   COMMON+257
MSG1     EQU   COMMON+231
STOP     EQU   COMMON+227
TITLE    EQU   COMMON+222
BLANKS   EQU   COMMON+214
WTORMSG  EQU   COMMON+133
@NM00038 EQU   COMMON+130
@NM00037 EQU   PRSW
@NM00036 EQU   PRSW
PRNTREAL EQU   PRSW
PRNTRL   EQU   PRSW
TTLSW    EQU   PRSW
@NM00035 EQU   PRSW
QSEGTBSW EQU   PRSW
@NM00034 EQU   PRSW
@NM00033 EQU   BUFSW
PREFM    EQU   BUFSW
@NM00032 EQU   BUFSW
@NM00031 EQU   BUFSW
@NM00030 EQU   BUFSW
@NM00029 EQU   BUFSW
@NM00028 EQU   BUFSW
@NM00027 EQU   BUFSW
@NM00026 EQU   SWF
QUT1LOD  EQU   SWF
@NM00025 EQU   SWF
PAGEOK   EQU   SWF
DMPIC    EQU   SWF
QSADMP   EQU   SWF
QPRDINIT EQU   SWF
@NM00024 EQU   SWE
@NM00023 EQU   SWE
@NM00022 EQU   SWE
BUILDMAP EQU   SWE
TITLESW  EQU   SWE
RESPC    EQU   SWE
@NM00021 EQU   SWE
STOPSW   EQU   SWE
@NM00020 EQU   SWD
GPRSFND  EQU   SWD
CONTSW   EQU   SWD
NOLOADSW EQU   SWD
NOSTDMG  EQU   SWD
@NM00019 EQU   SWD
@NM00018 EQU   SWD
FLSHMODE EQU   SWD
@NM00017 EQU   SWC
@NM00016 EQU   SWC
@NM00015 EQU   SWC
EDITSW   EQU   SWC
TREADIN  EQU   SWC
POSITSW  EQU   SWC
SETFLSH  EQU   SWC
MSTRSW   EQU   SWC
@NM00014 EQU   SWB
@NM00013 EQU   SWB
QSYSUT2  EQU   SWB
ENDSW    EQU   SWB
@NM00012 EQU   SWB
@NM00011 EQU   SWB
FMTERR   EQU   SWB
IOERR    EQU   SWB
RDRSW    EQU   SWA
SETCVTSW EQU   SWA
@NM00010 EQU   SWA
GOSW     EQU   SWA
@NM00009 EQU   SWA
@NM00008 EQU   SWA
@NM00007 EQU   SWA
@NM00006 EQU   SWA
LINENUM  EQU   COMMON+120
LINENUMB EQU   COMMON+118
SIXTEEN  EQU   COMMON+116
TWELVE   EQU   COMMON+114
ELEVEN   EQU   COMMON+112
HTEN     EQU   COMMON+110
EIGHT    EQU   COMMON+108
SEVEN    EQU   COMMON+106
FIVE     EQU   COMMON+104
FOUR     EQU   COMMON+102
THREE    EQU   COMMON+100
TWO      EQU   COMMON+98
ONEA     EQU   COMMON+96
READTM   EQU   COMMON+92
RDERCNT  EQU   COMMON+88
READNO   EQU   COMMON+84
RDENTRY  EQU   COMMON+80
@NM00005 EQU   COMMON+78
FILESEQ  EQU   COMMON+76
INDD     EQU   COMMON+68
STORSIZE EQU   COMMON+64
TCBLIST  EQU   COMMON+52
PAGENUMB EQU   COMMON+44
LINECNT  EQU   COMMON+40
SIX      EQU   COMMON+36
WORK1    EQU   COMMON+24
DELIMCD  EQU   COMMON+20
KYWDEND  EQU   COMMON+16
VERBEND  EQU   COMMON+8
VERBGN   EQU   COMMON+4
PQERSVD  EQU   PQESECT+31
VVVRFLG  EQU   VMMFLGS
@NM00004 EQU   VMMFLGS
PQEHRID  EQU   PQESECT+29
PQERFLGS EQU   PQESECT+28
PQETCB   EQU   PQESECT+16
PQEBPQE  EQU   PQESECT+12
PQEFPQE  EQU   PQESECT+8
PQEBFBQE EQU   PQESECT+4
PQEFFBQE EQU   PQESECT
DQELNTH  EQU   DQESECT+12
DQEHRID  EQU   DQEBLKAD
DQFQEPTR EQU   DQESECT
SPQERES2 EQU   SPQESECT+12
SPQEKEY  EQU   SPQESECT+11
SPQEID   EQU   SPQESECT+10
SPQERES1 EQU   SPQESECT+9
SPQEOWN  EQU   SPQEFLGS
LASTSPQE EQU   SPQEFLGS
SPSHARE  EQU   SPQEFLGS
SPDQEAD  EQU   SPDQEPTR
SPQEPTR  EQU   SPQEAD
CSASPQEP EQU   GDA+52
PFSTCPAB EQU   GDA+48
VRWLEL   EQU   VRWAITQ+4
VRWFEL   EQU   VRWAITQ
VRPLEL   EQU   VRPOSTQ+4
VRPFEL   EQU   VRPOSTQ
SQASPLFT EQU   GDA+28
PASIZE   EQU   GDA+20
PASTRT   EQU   GDA+16
VRPQEP   EQU   GDA+12
VRDREG   EQU   GDA+4
RESV     EQU   GVSMFLAG+1
@NM00003 EQU   GDAFLAGS
WAITQUE  EQU   GDAFLAGS
SQATHRS2 EQU   GDAFLAGS
SQATHRS1 EQU   GDAFLAGS
GDAFLAG2 EQU   GDAFLAGS
NIPFOURK EQU   GDAFLAGS
GDAFLAG1 EQU   GDAFLAGS
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00002 EQU   CVTFIX+248
@NM00001 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTRSVA1 EQU   CVTXTNT2+48
CVTRSVA0 EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTRSV90
CVTRSV9G EQU   CVTRSV90
CVTRSV9F EQU   CVTRSV90
CVTRSV9E EQU   CVTRSV90
CVTRSV9D EQU   CVTRSV90
CVTRSV9C EQU   CVTRSV90
CVTRSV9B EQU   CVTRSV90
CVTRSV9A EQU   CVTRSV90
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTRV484 EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTINTLA EQU   CVTMAP+320
CVTERPV  EQU   CVTMAP+316
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRSV37 EQU   CVTDMSR
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTRV319 EQU   CVTUSR
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTTSCVB EQU   CVTTSCVT+1
CVTRSV25 EQU   CVTTSFLG
CVTRSV24 EQU   CVTTSFLG
CVTRSV23 EQU   CVTTSFLG
CVTRSV22 EQU   CVTTSFLG
CVTRSV21 EQU   CVTTSFLG
CVTRSV20 EQU   CVTTSFLG
CVTRSV19 EQU   CVTTSFLG
CVTTSRDY EQU   CVTTSFLG
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTIERLC EQU   CVTMAP+144
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00089 EQU   @RC00086
@RF00154 EQU   @RC00151
@RC00115 EQU   @RC00112
@RF00107 EQU   @RC00082
@RF00220 EQU   @RC00082
@RF00229 EQU   @RC00076
@RF00250 EQU   @RC00247
@RC00276 EQU   @RC00273
@RF00268 EQU   @RC00243
@RF00325 EQU   @RC00243
@RC00119 EQU   @RC00115
@RF00297 EQU   @RC00276
@RC00122 EQU   @RC00119
@RF00176 EQU   @RC00122
@ENDDATA EQU   *
         END   AMDPRNUC,(C'PL/S-II',0502,73242)
