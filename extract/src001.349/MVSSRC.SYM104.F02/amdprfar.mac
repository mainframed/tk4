         TITLE 'AMDPRFAR - MEMORY LEVEL FORMATTING ROUTINE             *
                        '
AMDPRFAR CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00001-@MAINENT)
         DC    AL1(16)                                             0001
         DC    C'AMDPRFAR  76.310'                                 0001
SRBRTN   DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00160-SRBRTN)
         ENTRY SRBRTN
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  LA    @10,4095(,@11)                                      0001
         USING @PSTART,@11                                         0001
         USING @PSTART+4095,@10                                    0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
         AH    @15,4(,@15)                                         0001
         BR    @15                                                 0001
@EP00001 MVC   @PC00001(4),0(@01)                                  0001
*   FARSAVRG=R13;                   /* SAVE ADDR OF FAR SAVE AREA    */
         ST    R13,FARSAVRG                                        0072
*   RESPECIFY                                                      0073
*     R13 UNRESTRICTED;                                            0073
*                                                                  0073
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZATION PASS                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0074
*   IF INITSW=0 THEN                /* IS ENTRY FOR INITIALIZATION   */
         CLI   INITSW,0                                            0074
         BNE   @RF00074                                            0074
*     DO;                           /* YES                           */
*       INITSW=1;                   /* INDICATE INITIALIZATION HAS 0076
*                                      BEEN DONE                     */
         MVI   INITSW,X'01'                                        0076
*       AASCBFMT=ADDR(AMDPRFAR);    /* PUT ADDR OF FAR IN COMMON     */
         L     @15,@CA00028                                        0077
         ST    @15,AASCBFMT(,COMBASE)                              0077
*       ASRBFMT=ADDR(SRBRTN);       /* PUT ADDR OF SRB IN COMMON     */
         L     @15,@CA00652                                        0078
         ST    @15,ASRBFMT(,COMBASE)                               0078
*       GO TO FAREXIT;              /* RETURN TO CALLER              */
         B     FAREXIT                                             0079
*     END;                                                         0080
*                                                                  0080
*   /*****************************************************************/
*   /*                                                               */
*   /* FINDING ASCB PASSED BY 'FSR'                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0081
*   IF ASCBADDR=0 THEN              /* WAS ADDR PASSED 0             */
@RF00074 L     @15,@PC00001                                        0081
         ICM   @14,7,ASCBADDR(@15)                                 0081
         BZ    @RT00081                                            0081
*     GO TO FAREXIT;                /* YES - RETURN TO CALLER        */
*   ASCBPTR=FSRASCB;                /* SET BASE FOR MAPPING MACRO    */
         MVC   ASCBPTR(4),FSRASCB(@15)                             0083
*   FARERSAV=ERRADDR;               /* SAVE ERROR RTN ADDR IN COMMON */
         MVC   FARERSAV(4),ERRADDR(COMBASE)                        0084
*   ERRADDR=ADDR(FARERRTN);         /* PUT ADDR OF FAR BRREAD ERROR
*                                      RTN IN COMMON                 */
         LA    @15,FARERRTN                                        0085
         ST    @15,ERRADDR(,COMBASE)                               0085
*   FARASID=AUSRASID;               /* ASID FOR BRREADS              */
         MVC   FARASID(2),AUSRASID(COMBASE)                        0086
*   BRNCHADR=ADDR(FARMSG1);         /* ERROR RETURN POINT FOR THIS 0087
*                                      BRREAD                        */
         LA    @15,FARMSG1                                         0087
         ST    @15,BRNCHADR                                        0087
*   GEN;                                                           0088
*                                                          /*OZ09006
         BAL   R14,FARCKSU        SEE IF SU S ARE CONF.      OZ09006
*   RESPECIFY                                                      0089
*     PREG RESTRICTED;                                             0089
*   PREG=ASCBPTR;                   /* SET UP TO READ ASCB           */
         L     PREG,ASCBPTR                                        0090
*   GEN REFS(BRRDDATA) FLOWS(FARERRTN)(BRREAD (PREG),DATA,ASID=0); 0091
*                                                                  0091
         BRREAD (PREG),DATA,ASID=0
*   /*****************************************************************/
*   /*                                                               */
*   /* SHOULD BRREAD FAIL AN ERROR MESSAGE IS PRINTED - PROCESSING   */
*   /* CONTINUES AT ASXBFIND                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0092
*   IF VALIDCK^='ASCB' THEN         /* DOES ASCB VALIDITY CHECK      */
         CLC   VALIDCK(4,PREG),@CC00655                            0092
         BE    @RF00092                                            0092
*     DO;                           /* NO                            */
*       OUTPUT(2:1+LENGTH(MSG02))=MSG02;/* PRINT VALIDITY CHECK MSG  */
         L     @15,CURBUF(,COMBASE)                                0094
         MVC   OUTPUT+1(26,@15),MSG02                              0094
*       GEN REFS(AWRITE)(BRWRITE 2);                               0095
         BRWRITE 2
*     END;                                                         0096
*   RESPECIFY                                                      0097
*     PREG UNRESTRICTED;                                           0097
*                                                                  0097
@RF00092 DS    0H                                                  0098
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMATTING ASCB - SHOULD ANY BRREAD FAIL AN ERROR MESSAGE IS  */
*   /* PRINTED - PROCESSING CONTINUES AT ASXBFIND                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0098
*   BRNCHADR=ADDR(FARMSG3);         /* ERROR RETURN POINT FOR BRREADS
*                                      BY GFR                        */
         LA    @15,FARMSG3                                         0098
         ST    @15,BRNCHADR                                        0098
*   RESPECIFY                                                      0099
*    (R0,                                                          0099
*     R1) RESTRICTED;                                              0099
*   R0=0;                           /* 0 ASID FOR RDC                */
         SLR   R0,R0                                               0100
*   DO I=1 TO DIM(CBFMTBL);         /* CALL THE FORMAT RTN TO FORMAT
*                                      THE ASCB ONE LINE AT A TIME   */
         LA    I,1                                                 0101
@DL00101 DS    0H                                                  0102
*     R1=CBFMTBL(I);                /* ADDRESS OF EACH LINE TO BE  0102
*                                      FORMATTED                     */
         LR    @03,I                                               0102
         SLA   @03,2                                               0102
         L     R1,CBFMTBL-4(@03)                                   0102
*     CALL AMDPRGFR;                                               0103
         L     @15,AFMTLINE(,COMBASE)                              0103
         BALR  @14,@15                                             0103
*     GEN(BRWRITE 1);               /* PRINT THE FORMATTED LINE      */
         BRWRITE 1
*   END;                                                           0105
         AH    I,@CH00077                                          0105
         CH    I,@CH00033                                          0105
         BNH   @DL00101                                            0105
*   GEN(BRWRITE 2);                 /* SKIP TWO LINES                */
         BRWRITE 2
*   RESPECIFY                                                      0107
*    (R0,                                                          0107
*     R1) UNRESTRICTED;                                            0107
*                                                                  0107
*   /*****************************************************************/
*   /*                                                               */
*   /* FINDING ASXB FOR THIS ASCB - SHOULD BRREAD FAIL OR ADDRESS IS */
*   /* ZERO, AN ERROR MESSAGE IS PRINTED - PROCESSING CONTINUES AT   */
*   /* SPLFIND                                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0108
*ASXBFIND:                                                         0108
*   BRNCHADR=ADDR(FARMSG4);         /* ERROR RETURN POINT FOR THIS 0108
*                                      BRREAD                        */
ASXBFIND LA    @15,FARMSG4                                         0108
         ST    @15,BRNCHADR                                        0108
*   RESPECIFY                                                      0109
*     PREG RESTRICTED;                                             0109
*   PREG=ADDR(ASCBASXB);            /* SET UP TO READ PTR TO ASXB    */
         L     PREG,ASCBPTR                                        0110
         LA    PREG,ASCBASXB(,PREG)                                0110
*   GEN(BRREAD (PREG));                                            0111
         BRREAD (PREG)
*   IF FARASXB1^=0 THEN             /* IS ADDR ZERO                  */
         ICM   @00,7,FARASXB1(PREG)                                0112
         BZ    @RF00112                                            0112
*     DO;                           /* NO                            */
*       ASXBADDR=FARASXB;           /* ADDR OF ASXB IN DUMP          */
         L     @00,FARASXB(,PREG)                                  0114
         ST    @00,ASXBADDR                                        0114
*       PREG=ASXBADDR;              /* SET UP TO READ ASXB           */
         LR    PREG,@00                                            0115
*       GEN(BRREAD (PREG),DATA,ASID=FARASID);                      0116
         BRREAD (PREG),DATA,ASID=FARASID
*       IF VALIDCK^='ASXB' THEN     /* DOES ASXB VALIDITY CHECK      */
         CLC   VALIDCK(4,PREG),@CC00660                            0117
         BE    @RF00117                                            0117
*         DO;                       /* NO                            */
*           OUTPUT(2:1+LENGTH(MSG5))=MSG5;/* PRINT VALIDITY CHECK MSG*/
         L     @15,CURBUF(,COMBASE)                                0119
         MVC   OUTPUT+1(26,@15),MSG5                               0119
*           GEN(BRWRITE 2);                                        0120
         BRWRITE 2
*         END;                                                     0121
*       RESPECIFY                                                  0122
*         PREG UNRESTRICTED;                                       0122
*                                                                  0122
@RF00117 DS    0H                                                  0123
*       /*************************************************************/
*       /*                                                           */
*       /* FORMATTING ASXB - SHOULD ANY BRREAD FAIL AN ERROR MESSAGE */
*       /* IS PRINTED - PROCESSING CONTINUES AT SPLFIND              */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0123
*       BRNCHADR=ADDR(FARMSG6);     /* ERROR RETURN POINT FOR BRREADS
*                                      BY GFR                        */
         LA    @15,FARMSG6                                         0123
         ST    @15,BRNCHADR                                        0123
*       RESPECIFY                                                  0124
*        (R0,                                                      0124
*         R1) RESTRICTED;                                          0124
*       R0=FARASID;                 /* ASID OF THIS MEMORY FOR RDC   */
         SLR   R0,R0                                               0125
         ICM   R0,3,FARASID                                        0125
*       DO I=1 TO DIM(XBFMTBL);     /* CALL THE FORMAT RTN TO FORMAT
*                                      THE ASXB ONE LINE AT A TIME   */
         LA    I,1                                                 0126
@DL00126 DS    0H                                                  0127
*         R1=XBFMTBL(I);            /* ADDRESS OF EACH LINE TO BE  0127
*                                      FORMATTED                     */
         LR    @03,I                                               0127
         SLA   @03,2                                               0127
         L     R1,XBFMTBL-4(@03)                                   0127
*         CALL AMDPRGFR;                                           0128
         L     @15,AFMTLINE(,COMBASE)                              0128
         BALR  @14,@15                                             0128
*         GEN(BRWRITE 1);           /* PRINT THE FORMATTED LINE      */
         BRWRITE 1
*       END;                                                       0130
         AH    I,@CH00077                                          0130
         CH    I,@CH00313                                          0130
         BNH   @DL00126                                            0130
*       GEN(BRWRITE 2);             /* SKIP TWO LINES                */
         BRWRITE 2
*       RESPECIFY                                                  0132
*        (R0,                                                      0132
*         R1) UNRESTRICTED;                                        0132
*     END;                                                         0133
*   ELSE                                                           0134
*     DO;                           /* PTR TO ASXB ADDR IS ZERO -  0134
*                                      ALSO RETURN POINT FOR READ  0134
*                                      ERROR WHILE ACCESSING ASXB    */
         B     @RC00112                                            0134
@RF00112 DS    0H                                                  0135
*FARMSG4:                                                          0135
*       OUTPUT(2:1+LENGTH(MSG4))=MSG4;/* PRINT ERROR FINDING ASXB MSG*/
FARMSG4  L     @01,CURBUF(,COMBASE)                                0135
         MVC   OUTPUT+1(18,@01),MSG4                               0135
*       GEN(BRWRITE 2);                                            0136
         BRWRITE 2
*     END;                                                         0137
*                                                                  0137
*   /*****************************************************************/
*   /*                                                               */
*   /* GET SPL ADDR FROM ASCB - IF NON-ZERO CALL 'SRB' RTN TO FORMAT */
*   /* SRB QUEUES                                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0138
*SPLFIND:                                                          0138
*   BRNCHADR=ADDR(FARMSG7);         /* ADDR OF ERROR RTN FOR THIS  0138
*                                      BRREAD                        */
@RC00112 DS    0H                                                  0138
SPLFIND  LA    @15,FARMSG7                                         0138
         ST    @15,BRNCHADR                                        0138
*   RESPECIFY                                                      0139
*     PREG RESTRICTED;                                             0139
*   PREG=ADDR(ASCBSPL);             /* SET UP TO READ PTR TO SPL     */
         L     PREG,ASCBPTR                                        0140
         LA    PREG,ASCBSPL(,PREG)                                 0140
*   GEN(BRREAD (PREG),DATA,ASID=0);                                0141
         BRREAD (PREG),DATA,ASID=0
*   SPLADDR=FARSPL;                 /* PTR TO SPL                    */
         MVC   SPLADDR(4),FARSPL(PREG)                             0142
*   RESPECIFY                                                      0143
*     PREG UNRESTRICTED;                                           0143
*   IF SPLPTR^=0 THEN               /* IS PTR ZERO                   */
         ICM   @15,7,SPLPTR                                        0144
         BZ    @RF00144                                            0144
*     DO;                           /* NO                            */
*       OUTPUT(2:1+LENGTH(LOCLTITL))=LOCLTITL;/* PRINT TITLE         */
         L     @01,CURBUF(,COMBASE)                                0146
         MVC   OUTPUT+1(27,@01),LOCLTITL                           0146
*       GEN(BRWRITE 2);                                            0147
         BRWRITE 2
*       SPLFLAG=SPLSW;              /* INDICATE SPL FOR SRB RTN      */
         OI    SPLFLAG,B'10000000'                                 0148
*       FSPLTYPE=0;                 /* INDICATE LSPL FOR SRB RTN     */
         MVI   FSPLTYPE,X'00'                                      0149
*       CALL AMDPRSRB(SPLADDR,FSPLTYPE);/* PARM IS ADDR OF SPL TO BE
*                                      PROCESSED,AND SPL TYPE (LSPL) */
         LA    @01,@AL00150                                        0150
         BAL   @14,AMDPRSRB                                        0150
*     END;                                                         0151
*   ELSE                                                           0152
*     DO;                           /* SPL PTR WAS ZERO              */
         B     @RC00144                                            0152
@RF00144 DS    0H                                                  0153
*FARMSG7:                                                          0153
*       OUTPUT(2:1+LENGTH(MSG7))=MSG7;/* PRINT ERROR FINDING SPL MSG */
FARMSG7  L     @01,CURBUF(,COMBASE)                                0153
         MVC   OUTPUT+1(17,@01),MSG7                               0153
*       GEN(BRWRITE 2);                                            0154
         BRWRITE 2
*     END;                                                         0155
*                                                                  0155
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK FOR USER REQUEST BY CALLING AMDPRUIM                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0156
*   EXITFLAG=BASID;                 /* SET ASCB FLAG FOR AMDPRUIM    */
@RC00144 MVI   EXITFLAG(COMBASE),X'40'                             0156
*   CALL AMDPRUIM;                                                 0157
*                                                                  0157
         L     @15,AUSREXIT(,COMBASE)                              0157
         BALR  @14,@15                                             0157
*   /*****************************************************************/
*   /*                                                               */
*   /* PREPARE TO RETURN TO CALLER                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0158
*   ERRADDR=FARERSAV;               /* RESTORE PREVIOUS ERROR RTN  0158
*                                      ADDR IN COMMON                */
         MVC   ERRADDR(4,COMBASE),FARERSAV                         0158
*FAREXIT:                                                          0159
*   RETURN;                         /* RETURN TO CALLER              */
*                                                                  0159
@EL00001 L     @13,4(,@13)                                         0159
@EF00001 DS    0H                                                  0159
@ER00001 LM    @14,@12,12(@13)                                     0159
         BR    @14                                                 0159
*   /*****************************************************************/
*   /*                                                               */
*   /* AMDPRSRB ENTRY POINT ADDR IN COMMON                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0160
*SRBRTN:                                                           0160
*   ENTRY(PSPLADDR,PSPLTYPE);       /* ENTRY TO SRB FOR EXTERNAL   0160
*                                      CALLS                         */
@EP00160 MVC   @PC00001+4(8),0(@01)                                0160
*   CALL AMDPRSRB(PSPLADDR,PSPLTYPE);                              0161
         L     @15,@PC00001+4                                      0161
         ST    @15,@AL00001                                        0161
         L     @15,@PC00001+8                                      0161
         ST    @15,@AL00001+4                                      0161
         LA    @01,@AL00001                                        0161
         BAL   @14,AMDPRSRB                                        0161
*   RETURN;                                                        0162
*                                                                  0162
         B     @EL00001                                            0162
*   /*****************************************************************/
*   /*                                                               */
*   /* BRREAD ERROR ROUTINE - REESTABLISH ADDRESSABILITY AND BRANCH  */
*   /* TO ADDRESS PUT IN BRNCHADR PRIOR TO BRREAD                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0163
*FARERRTN:                          /* SET UP ADDRESSABILITY FOR   0163
*                                      BRREAD ERROR RTN              */
*   GEN;                                                           0163
FARERRTN DS    0H                                                  0163
         USING *,R15
         L     R13,FARSAVRG
         LM    R14,R12,12(R13)
         DROP  R15
*   GO TO BREADERR;                 /* BRANCH TO SPECIFIC FUNCTION   */
*                                                                  0164
         L     @01,BRNCHADR                                        0164
         BR    @01                                                 0164
*   /*****************************************************************/
*   /*                                                               */
*   /* READ FAILED TRYING TO FIND THE ASCB - CONVERT THE ASCB ADDRESS*/
*   /* TO PRINTABLE HEX FOR MESSAGE                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0165
*FARMSG1:                                                          0165
*   RESPECIFY                                                      0165
*    (R1,                                                          0165
*     R4) RESTRICTED;                                              0165
FARMSG1  DS    0H                                                  0166
*   R1=ADDR(ASCBPTR);               /* ADDR TO CONVERT               */
         LA    R1,ASCBPTR                                          0166
*   R4=ADDR(ADDR1);                 /* ADDR OF OUTPUT LOCATION FOR 0167
*                                      CNVT RTN                      */
         LA    R4,ADDR1                                            0167
*   CALL ADRCNVT;                   /* AADRCNVT RTN                  */
         L     @15,AADRCNVT(,COMBASE)                              0168
         BALR  @14,@15                                             0168
*   RESPECIFY                                                      0169
*    (R1,                                                          0169
*     R4) UNRESTRICTED;                                            0169
*   OUTPUT(2:1+LENGTH(MSG01))=MSG01;/* PRINT ERROR FINDING ASCB MSG  */
         L     @01,CURBUF(,COMBASE)                                0170
         MVC   OUTPUT+1(26,@01),MSG01                              0170
*   GEN(BRWRITE 2);                                                0171
         BRWRITE 2
*   GO TO ASXBFIND;                 /* TRY TO GET ASXB               */
*                                                                  0172
         B     ASXBFIND                                            0172
*   /*****************************************************************/
*   /*                                                               */
*   /* A READ BY AMDPRGFR FAILED WHILE FORMATTING THE ASCB           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0173
*FARMSG3:                                                          0173
*   GEN(BRWRITE 1);                 /* PRINT PARTIALLY FILLED BUFFER */
FARMSG3  BRWRITE 1
*   OUTPUT(2:1+LENGTH(MSG3))=MSG3;  /* PRINT ERROR FORMATTING ASCB 0174
*                                      MSG                           */
         L     @01,CURBUF(,COMBASE)                                0174
         MVC   OUTPUT+1(27,@01),MSG3                               0174
*   GEN(BRWRITE 2);                                                0175
         BRWRITE 2
*   GO TO ASXBFIND;                 /* TRY TO GET ASXB               */
*                                                                  0176
         B     ASXBFIND                                            0176
*   /*****************************************************************/
*   /*                                                               */
*   /* A READ BY GFT FAILED WHILE FORMATTING THE ASXB                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0177
*FARMSG6:                                                          0177
*   GEN(BRWRITE 1);                 /* PRINT PARTIALLY FILLED BUFFER */
FARMSG6  BRWRITE 1
*   OUTPUT(2:1+LENGTH(MSG6))=MSG6;  /* PRINT ERROR FORMATTING ASXB 0178
*                                      MSG                           */
         L     @01,CURBUF(,COMBASE)                                0178
         MVC   OUTPUT+1(27,@01),MSG6                               0178
*   GEN(BRWRITE 2);                                                0179
         BRWRITE 2
*   GO TO SPLFIND;                  /* TRY TO GET SPL PTR            */
         B     SPLFIND                                             0180
*   GEN REFS(Z9SUFLG,Z9SUBITS);                                    0181
*                                                          /*OZ09006
FARCKSU  EQU   *                  CHECK SU ROUTINE           OZ09006
         TM    Z9SUFLG(R12),X'01' SU S CONFIGURED            OZ09006
         BZ    FARSURET           NO - RETURN                OZ09006
*                                 YES - MAKE SU00 CHANGES    OZ09006
         MVI   PASXBL8+9,X'36'                               OZ09006
         MVC   PASXBL8+13(3),=X'304A50'                      OZ09006
         MVC   LASXBL8+13(12),=C'USERSECRSENV'               OZ09006
         TM    Z9SUBITS(R12),X'04' SU05 CONFIGURED           OZ09006
         BZ    FARNO57             NO - THEN SKIP 5 & 7 CHANGES OZ14112
*                                  YES - MAKE SU05 CHANGES   OZ09006
         MVC   LASCBL1+20(12),=C'CMSFRV12RV10'               OZ09006
         MVC   LASCBL2+5(4),=C'IOSP'                         OZ09006
         MVC   LASCBL7+13(8),=C'LOCKLSQH'                    OZ09006
         TM    Z9SUBITS(R12),X'01' SU7 APPLIED?                 OZ14112
         BZ    FARNO57             NO - SKIP SU7 CHANGES        OZ14112
         MVC   LASCBL1+24(8),=C'SVRBSYNC'                       OZ14112
         MVC   LASCBL5+9(4),=C'RV44'                            OZ14112
         MVC   LASCBL9+20(4),=C'SRQ '                           OZ14112
FARNO57  EQU   *                                                OZ14112
FARSURET BR    R14                                           OZ09006
*AMDPRSRB:                                                         0182
*   PROC(QUEADDR,SPLTYPE);                                         0182
*                                                                  0182
         B     @EL00001                                            0182
AMDPRSRB STM   @14,@12,@SA00002                                    0182
         MVC   @PC00002(8),0(@01)                                  0182
*/********************************************************************/
*/*                                                                  */
*/*                     D E C L A R E S                              */
*/*                                                                  */
*/********************************************************************/
*                                                                  0183
*   DCL                                                            0183
*     SRBSAVRG FIXED(31) INIT(0);   /* ADDR OF SRB SAVE AREA - INIT
*                                      TO PREVENT ASSIGNMENT TO A REG*/
*   DCL                                                            0184
*     SRBERSAV FIXED(31) INIT(0);   /* ERROR RTN ADDR REMOVED FROM 0184
*                                      COMMON - INIT TO PREVENT    0184
*                                      ASSIGNMENT TO A REG           */
*   DCL                                                            0185
*     SRBRANCH PTR(31) INIT(0);     /* ADDR OF BRREAD ERROR RETURN 0185
*                                      POINTS - INIT TO PREVENT    0185
*                                      ASSIGNMENT TO A REG           */
*   DCL                                                            0186
*     READERR LABEL BASED(SRBRANCH) VALRG(BADFSTCK,SRBMSG1A,SRBMSG1B,
*         SRBMSG4,SRBMSG8,SRBMSG10,SRBMSG11);/* USED FOR BRANCH TO 0186
*                                      ERROR RTNS                    */
*   DCL                                                            0187
*     1 CURNTSRB PTR(31) BASED(PREG),/* USED TO ADDRESS SRB AFTER  0187
*                                      BRREAD                        */
*      2 * PTR(8),                                                 0187
*      2 CRNTSRB1 PTR(24);          /* USED TO CHECK FOR ADDR OF 0   */
*   DCL                                                            0188
*     1 SRBPTR PTR(31) GEND,        /* ADDR OF CURRENT SRB, USED IN
*                                      FMTPTRNS                      */
*      2 * PTR(8),                                                 0188
*      2 DUMPSRBA PTR(24);          /* USED TO CHECK FOR ADDR OF 0   */
*   DCL                                                            0189
*     SFWDPTR PTR(24);              /* ADDR OF NEXT SRB ON QUEUE     */
*   DCL                                                            0190
*     LASTQPTR PTR(24);             /* ADDR OF LAST SRB IN SPL       */
*   DCL                                                            0191
*     1 QUEADDR PTR(32),            /* ADDR OF SPL PASSED VIA CALL   */
*      2 QFLAG BIT(1),              /* SPL TYPE (GSPL/LSPL)          */
*      2 * BIT(7),                                                 0191
*      2 QUEPTR PTR(24);            /* USED TO CHECK FOR ADDR OF 0   */
*   DCL                                                            0192
*     LSPLPTR PTR(31) DEF(QUEADDR); /* BASE FOR LSPL MACRO           */
*   DCL                                                            0193
*     GSPLPTR PTR(31) DEF(QUEADDR); /* BASE FOR GSPL MACRO           */
*   DCL                                                            0194
*     SRBFMTBL(3) FIXED(31) INIT(ADDR(PSRBL1),ADDR(PSRBL2),ADDR(PSRBL3)
*         );                                                       0194
*                                                                  0194
*   /*****************************************************************/
*   /*                                                               */
*   /* ADDR OF EACH LINE OF SRB FMTPTRNS                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0195
*   DCL                                                            0195
*     MAXCTR FIXED(15);             /* LOOP CONTROL VALUE FOR      0195
*                                      PROCESSING SRB QUEUES         */
*   DCL                                                            0196
*     MINLOOP FIXED(31) CONSTANT(5);/* USED TO PROCESS 5 SRBS      0196
*                                      BEGINNING WITH LAST SRB PTR IN
*                                      SPL                           */
*   DCL                                                            0197
*     1 SRBSWS BIT(8),              /* INTERNAL SWITCHES             */
*      2 NOFSTPTR BIT(1),           /* INDICATE ABSENCE OF FIRST SRB
*                                      PTR IN SPL                    */
*      2 NOLSTPTR BIT(1),           /* INDICATE ABSENCE OF LAST SRB
*                                      PTR IN SPL                    */
*      2 PASTLPSW BIT(1),           /* FOR PROCESSING SRBS BEGINNING
*                                      WITH LAST SRB PTR IN SPL      */
*      2 ENDSWTCH BIT(1),           /* TO TERMINATE PROCESSING       */
*      2 * BIT(4);                  /* RESERVED                      */
*   DCL                                                            0198
*     SWOFF BIT(1) CONSTANT('0'B);  /* TO TURN OFF SWITCHES          */
*   DCL                                                            0199
*     SPLTYPE PTR(8);               /* SWITCH TO DETERMINE SPL TYPE
*                                      (GSPL/LSPL)                   */
*/********************************************************************/
*/*                                                                  */
*/*                 TITLES AND OUTPUT COMMENTS                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0200
*   DCL                                                            0200
*     NONQTITL CHAR(20) INIT('NON-QUIESCABLE QUEUE');              0200
*   DCL                                                            0201
*     SYSTITLE CHAR(12) INIT('SYSTEM QUEUE');                      0201
*   DCL                                                            0202
*     SMSG1 CHAR(14) INIT('QUEUE IS EMPTY');                       0202
*   DCL                                                            0203
*     SMSG2 CHAR(68) INIT(                                         0203
*'LOOP CONTROL VALUE IS ZERO, PROCESSING TERMINATED FOR ALL SRB QUEUES'
*         );                                                       0203
*   DCL                                                            0204
*     SMSG3 CHAR(34) INIT('ERROR FINDING POINTER TO FIRST SRB');   0204
*   DCL                                                            0205
*     SMSG4 CHAR(72) INIT('ERROR FINDING POINTER TO FIRST SRB, PROCESSI
*G TERMINATED FOR THIS QUEUE');                                    0205
*   DCL                                                            0206
*     SMSG5 CHAR(33) INIT('ERROR FINDING POINTER TO LAST SRB');    0206
*   DCL                                                            0207
*     SMSG6 CHAR(27) INIT('POINTER TO LAST SRB IS ZERO');          0207
*   DCL                                                            0208
*     SMSG7 CHAR(61) INIT(                                         0208
*'FORWARD POINTER IS ZERO, PROCESSING TERMINATED FOR THIS QUEUE'); 0208
*   DCL                                                            0209
*     1 SMSG8 CHAR(25),                                            0209
*      2 * CHAR(18) INIT('ERROR FINDING SRB '),                    0209
*      2 SADDR8 CHAR(6),                                           0209
*      2 * CHAR(1);                 /* EXTRA BYTE FOR AADRCNVT TO  0209
*                                      UNPAK IN                      */
*   DCL                                                            0210
*     SMSG9 CHAR(25) INIT('SRB FAILED VALIDITY CHECK');            0210
*   DCL                                                            0211
*     SMSG10 CHAR(26) INIT('ERROR WHILE FORMATTING SRB');          0211
*   DCL                                                            0212
*     SMSG11 CHAR(16) INIT('SRB CHAIN BROKEN');                    0212
*   DCL                                                            0213
*     SMSG12 CHAR(39) INIT('UNABLE TO FORMAT ANY SRBS ON THIS QUEUE');
*   DCL                                                            0214
*     SMSG13 CHAR(116) INIT('ERROR IN SRB CHAIN, LAST EXPECTED SRB HAS
*ON-ZERO FORWARD POINTER, WILL PROCESS FIVE MORE FOLLOWING FORWARD POIN
*ER');                                                             0214
*   DCL                                                            0215
*     SMSG14 CHAR(74) INIT('WILL PROCESS FIVE SRBS BEGINNING WITH SRB P
*INTED TO BY LAST QUEUE POINTER');                                 0215
*   DCL                                                            0216
*     SMSG15 CHAR(49) INIT(                                        0216
*         'LOOP IN SRB CHAIN, MORE THAN MAXIMUM NUMBER FOUND');    0216
*   DCL                                                            0217
*     SMSG16 CHAR(73) INIT('PROCESSING TERMINATED FOR THIS CHAIN, MORE
*HAN FIVE SRBS HAVE BEEN FOUND');                                  0217
*   DCL                                                            0218
*     SMSG17 CHAR(36) INIT('PROCESSING TERMINATED FOR THIS CHAIN');
*                                                                  0218
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING DECLARES DESCRIBE THE LABELS ON THE FORMAT      */
*   /* PATTERN LINES AND THE LABELS FOR EACH LINE OF THE SRB         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0219
*   DCL                                                            0219
*     PSRBL1 FIXED(31) GEND;                                       0219
*   DCL                                                            0220
*     PSRBL2 FIXED(31) GEND;                                       0220
*   DCL                                                            0221
*     PSRBL3 FIXED(31) GEND;                                       0221
*   DCL                                                            0222
*     1 SRBLBLS,                                                   0222
*      2 LSRBL1 CHAR(31) INIT('SRB+0  IDFLNKASCBCPAFFPASIDPTCB'),  0222
*      2 LSRBL2 CHAR(27) INIT('+14  EPRMTRPARMSAVEPKFPRIOR'),      0222
*      2 LSRBL3 CHAR(13) INIT('+26  RESVRESV');                    0222
*   GEN DATA;                                                      0223
*                                                                  0224
*   /*****************************************************************/
*   /*                                                               */
*   /* SAVE ADDR OF SRB SAVE AREA                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0224
*   RESPECIFY                                                      0224
*     R13 RESTRICTED;                                              0224
*   SRBSAVRG=R13;                                                  0225
         ST    R13,SRBSAVRG                                        0225
*   RESPECIFY                                                      0226
*     R13 UNRESTRICTED;                                            0226
*                                                                  0226
*   /*****************************************************************/
*   /*                                                               */
*   /* RESET SWITCHES FOR PROCESSING IF QUEUE POINTER IS NON-ZERO    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0227
*   IF QUEPTR=0 THEN                /* WAS ADDR OF SPL/SMQ PASSED 0  */
         L     @15,@PC00002                                        0227
         ICM   @14,7,QUEPTR(@15)                                   0227
         BZ    @RT00227                                            0227
*SRBEXIT:                                                          0228
*     RETURN;                       /* YES - RETURN TO CALLER        */
*   ELSE                                                           0229
*     DO;                                                          0229
*       MAXCTR=SRBMAX;              /* LOOP CONTROL VALUE FROM COMMON*/
         LH    MAXCTR,SRBMAX(,COMBASE)                             0230
*       IF MAXCTR=0 THEN            /* IS VALUE ZERO                 */
         LTR   MAXCTR,MAXCTR                                       0231
         BNZ   @RF00231                                            0231
*         DO;                       /* YES                           */
*           OUTPUT(2:1+LENGTH(SMSG2))=SMSG2;/* PRINT LOOP CNTRL VALUE
*                                      ERROR MSG                     */
         L     @01,CURBUF(,COMBASE)                                0233
         MVC   OUTPUT+1(68,@01),SMSG2                              0233
*           GEN(BRWRITE 2);                                        0234
         BRWRITE 2
*           GO TO SRBEXIT;          /* RETURN TO CALLER              */
         B     SRBEXIT                                             0235
*         END;                                                     0236
*       ELSE                                                       0237
*         DO;                       /* LOOP VALUE IS NOT ZERO        */
@RF00231 DS    0H                                                  0238
*           SRBERSAV=ERRADDR;       /* SAVE ERROR RTN ADDR IN COMMON */
         MVC   SRBERSAV(4),ERRADDR(COMBASE)                        0238
*           ERRADDR=ADDR(SRBERRTN); /* PUT ADDR OF SRB BRREAD ERROR
*                                      RTN IN COMMON                 */
         LA    @02,SRBERRTN                                        0239
         ST    @02,ERRADDR(,COMBASE)                               0239
*         END;                                                     0240
*     END;                                                         0241
*                                                                  0241
*   /*****************************************************************/
*   /*                                                               */
*   /* RESET ALL INTERNAL SWITCHES AND VALUES TO 0                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0242
*   SRBSWS='00'X;                                                  0242
         MVI   SRBSWS,X'00'                                        0242
*   SRBPTR=0;                                                      0243
         SLR   @04,@04                                             0243
         ST    @04,SRBPTR                                          0243
*   LASTQPTR=0;                                                    0244
*                                                                  0244
         SLR   LASTQPTR,LASTQPTR                                   0244
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESSING OF SMQS - ONLY A NEXT POINTER AVAILABLE            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0245
*   IF QFLAG=SWOFF THEN             /* IS THIS AN SMQ                */
         L     @04,@PC00002                                        0245
         TM    QFLAG(@04),B'10000000'                              0245
         BNZ   @RF00245                                            0245
*     DO;                           /* YES                           */
*       SRBRANCH=ADDR(SRBMSG4);     /* ERROR RETURN POINT FOR THIS 0247
*                                      BRREAD                        */
         LA    @02,SRBMSG4                                         0247
         ST    @02,SRBRANCH                                        0247
*       ENDSWTCH=SWON;              /* INDICATE TO TERMINATE THIS  0248
*                                      QUEUE SHOULD ERROR OCCUR      */
         OI    ENDSWTCH,B'00010000'                                0248
*       RESPECIFY                                                  0249
*         PREG RESTRICTED;                                         0249
*       PREG=QUEADDR;               /* SET UP TO READ FIRST SRB      */
         L     PREG,QUEADDR(,@04)                                  0250
*       GEN FLOWS(SRBERRTN)(BRREAD (PREG),DATA,ASID=0);            0251
         BRREAD (PREG),DATA,ASID=0
*       IF CRNTSRB1^=0 THEN         /* IS PTR 0                      */
         ICM   @04,7,CRNTSRB1(PREG)                                0252
         BZ    @RF00252                                            0252
*         DO;                       /* NO                            */
*           SRBPTR=CURNTSRB;        /* SRB ADDR IN DUMP              */
         MVC   SRBPTR(4),CURNTSRB(PREG)                            0254
*           RESPECIFY                                              0255
*             PREG UNRESTRICTED;                                   0255
*           NOLSTPTR=SWON;          /* INDICATE NO PTR TO LAST SRB 0256
*                                      EXISTS                        */
         OI    NOLSTPTR,B'01000000'                                0256
*           GO TO DECREMNT;         /* PROCESS THIS SRB              */
         B     DECREMNT                                            0257
*         END;                                                     0258
*       ELSE                                                       0259
*         GO TO QMPTYMSG;           /* PRINT QUEUE EMPTY MSG         */
*     END;                                                         0260
*                                                                  0260
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESSING OF SPLS - NEXT AND LAST POINTERS AVAILABLE -       */
*   /* NON-QUIESCABLE QUEUE IS HANDLED FIRST - TEST IS MADE TO       */
*   /* DETERMINE TYPE OF SPL, SO THAT PROPER LABELS ARE USED TO      */
*   /* ACCESS THE SRB POINTERS                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0261
*   OUTPUT(6:5+LENGTH(NONQTITL))=NONQTITL;/* PRINT TITLE             */
@RF00245 L     @04,CURBUF(,COMBASE)                                0261
         MVC   OUTPUT+5(20,@04),NONQTITL                           0261
*   GEN(BRWRITE 2);                                                0262
         BRWRITE 2
*   SRBRANCH=ADDR(SRBMSG1A);        /* ERROR RETURN POINT FOR THIS 0263
*                                      BRREAD                        */
         LA    @04,SRBMSG1A                                        0263
         ST    @04,SRBRANCH                                        0263
*   RESPECIFY                                                      0264
*     PREG RESTRICTED;                                             0264
*   IF SPLTYPE=0 THEN               /* IS THIS AN LSPL               */
         L     @04,@PC00002+4                                      0265
         CLI   SPLTYPE(@04),0                                      0265
         BNE   @RF00265                                            0265
*     DO;                           /* YES                           */
*       PREG=ADDR(LSPLNQF);         /* SET UP TO READ ADDR OF FIRST
*                                      SRB ON NONQ QUEUE             */
         L     @04,@PC00002                                        0267
         L     PREG,LSPLPTR(,@04)                                  0267
*       GEN(BRREAD (PREG));                                        0268
         BRREAD (PREG)
*       SRBPTR=CURNTSRB;            /* ADDR OF FIRST SRB ON QUEUE    */
         MVC   SRBPTR(4),CURNTSRB(PREG)                            0269
*       RESPECIFY                                                  0270
*         PREG UNRESTRICTED;                                       0270
*       IF DUMPSRBA=0 THEN          /* IS QUEUE EMPTY                */
         ICM   @04,7,DUMPSRBA                                      0271
         BNZ   @RF00271                                            0271
*         DO;                       /* YES - PRINT MSG AND RETURN    */
*QMPTYMSG:                                                         0273
*           OUTPUT(2:1+LENGTH(SMSG1))=SMSG1;/* PRINT QUEUE EMPTY MSG */
QMPTYMSG L     @01,CURBUF(,COMBASE)                                0273
         MVC   OUTPUT+1(14,@01),SMSG1                              0273
*           GEN(BRWRITE 2);                                        0274
         BRWRITE 2
*           IF ENDSWTCH=SWON THEN   /* IS THIS LAST QUEUE TO BE    0275
*                                      PROCESSED                     */
         TM    ENDSWTCH,B'00010000'                                0275
         BNO   @RF00275                                            0275
*             DO;                   /* YES                           */
*SRBDONE:                                                          0277
*               ERRADDR=SRBERSAV;   /* RESOTRE PREVIOUS ERROR RTN  0277
*                                      ADDR IN COMMON                */
SRBDONE  MVC   ERRADDR(4,COMBASE),SRBERSAV                         0277
*               GO TO SRBEXIT;      /* RETURN TO CALLER              */
         B     SRBEXIT                                             0278
*             END;                                                 0279
*           ELSE                                                   0280
*             GO TO FIRSTSYS;       /* PROCESS SYSTEM QUEUE OF SPL   */
*         END;                                                     0281
*       ELSE                                                       0282
*         DO;                       /* QUEUE IS NOT EMPTY            */
@RF00271 DS    0H                                                  0283
*LASTNONQ:                                                         0283
*           SRBRANCH=ADDR(BADFSTCK);/* ERROR RETURN POINT FOR THIS 0283
*                                      BRREAD                        */
LASTNONQ LA    @04,BADFSTCK                                        0283
         ST    @04,SRBRANCH                                        0283
*           RESPECIFY                                              0284
*             PREG RESTRICTED;                                     0284
*           PREG=ADDR(LSPLNQL);     /* SET UP TO READ LAST QUEUE PTR
*                                      IN LSPL                       */
         L     @04,@PC00002                                        0285
         L     PREG,LSPLPTR(,@04)                                  0285
         LA    PREG,LSPLNQL(,PREG)                                 0285
*         END;                                                     0286
*     END;                                                         0287
*   ELSE                                                           0288
*     DO;                           /* SPLTYPE INDICATES GSPL        */
         B     @RC00265                                            0288
@RF00265 DS    0H                                                  0289
*       PREG=ADDR(GSPLNQF);         /* SET UP TO READ FIRST SRB ON 0289
*                                      NONQ QUEUE                    */
         L     @04,@PC00002                                        0289
         L     PREG,GSPLPTR(,@04)                                  0289
*       GEN(BRREAD (PREG));                                        0290
         BRREAD (PREG)
*       IF CRNTSRB1=0 THEN          /* IS QUEUE EMPTY                */
         ICM   @04,7,CRNTSRB1(PREG)                                0291
         BZ    @RT00291                                            0291
*         GO TO QMPTYMSG;           /* YES - PRINT QUEUE EMPTY MSG   */
*       ELSE                                                       0293
*         SRBPTR=CURNTSRB;          /* ADDR OF FIRST SRB ON QUEUE    */
         MVC   SRBPTR(4),CURNTSRB(PREG)                            0293
*LSTNONQ1:                                                         0294
*       SRBRANCH=ADDR(BADFSTCK);    /* ERROR RETURN POINT FOR THIS 0294
*                                      BRREAD                        */
LSTNONQ1 LA    @04,BADFSTCK                                        0294
         ST    @04,SRBRANCH                                        0294
*       PREG=ADDR(GSPLNQL);         /* SET UP TO READ LAST QUEUE PTR
*                                      IN GSPL                       */
         L     @04,@PC00002                                        0295
         L     PREG,GSPLPTR(,@04)                                  0295
         LA    PREG,GSPLNQL(,PREG)                                 0295
*     END;                                                         0296
*   GEN(BRREAD (PREG));             /* READ LAST QUEUE PTR           */
@RC00265 DS    0H                                                  0297
         BRREAD (PREG)
*   IF CRNTSRB1^=0 THEN             /* IS PTR TO LAST SRB 0          */
         ICM   @04,7,CRNTSRB1(PREG)                                0298
         BZ    @RF00298                                            0298
*     DO;                           /* NO                            */
*       LASTQPTR=CURNTSRB;          /* PTR TO LAST SRB IN SPL        */
         L     LASTQPTR,CURNTSRB(,PREG)                            0300
*       RESPECIFY                                                  0301
*         PREG UNRESTRICTED;                                       0301
*     END;                                                         0302
*   ELSE                                                           0303
*     DO;                           /* PRT TO LAST SRB IS 0          */
         B     @RC00298                                            0303
@RF00298 DS    0H                                                  0304
*NOFSTCK1:                                                         0304
*       IF NOFSTPTR=SWON THEN       /* IS THERE A PTR TO FIRST SRB IN
*                                      SPL                           */
NOFSTCK1 TM    NOFSTPTR,B'10000000'                                0304
         BNO   @RF00304                                            0304
*         DO;                       /* NO - PRINT MSG AND TERMINATE
*                                      PROCESSING THIS QUEUE         */
*           OUTPUT(2:1+LENGTH(SMSG12))=SMSG12;/* PRINT 'UNABLE TO  0306
*                                      FORMAT MSG'                   */
         L     @01,CURBUF(,COMBASE)                                0306
         MVC   OUTPUT+1(39,@01),SMSG12                             0306
*           GEN(BRWRITE 2);                                        0307
         BRWRITE 2
*           GO TO ENDSWCK;          /* IS THERE ANOTHER QUEUE TO   0308
*                                      PROCESS                       */
         B     ENDSWCK                                             0308
*         END;                                                     0309
*       ELSE                                                       0310
*         DO;                       /* YES - PRINT NO LAST PTR MSG   */
@RF00304 DS    0H                                                  0311
*           NOLSTPTR=SWON;          /* INDICATE NO PTR TO LAST SRB IN
*                                      SPL                           */
         OI    NOLSTPTR,B'01000000'                                0311
*           OUTPUT(2:1+LENGTH(SMSG6))=SMSG6;/* NO LAST PTR MSG       */
         L     @04,CURBUF(,COMBASE)                                0312
         MVC   OUTPUT+1(27,@04),SMSG6                              0312
*           GEN(BRWRITE 2);                                        0313
         BRWRITE 2
*           GO TO DECREMNT;         /* PROCESS THE FIRST SRB         */
         B     DECREMNT                                            0314
*         END;                                                     0315
*     END;                                                         0316
*                                                                  0316
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINE VALUE FOR LOOP CONTROL WHILE PROCESSING THIS QUEUE  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0317
*NOFSTCK2:                                                         0317
*   IF NOFSTPTR=SWON THEN           /* IS THERE A PTR TO FIRST SRB   */
@RC00298 DS    0H                                                  0317
NOFSTCK2 TM    NOFSTPTR,B'10000000'                                0317
         BNO   @RF00317                                            0317
*     DO;                           /* NO                            */
*       SRBPTR=LASTQPTR;            /* PROCESS ONLY 5 SRBS BEGINNING
*                                      WITH PTR IN SPL TO LAST SRB   */
         ST    LASTQPTR,SRBPTR                                     0319
*       OUTPUT(2:1+LENGTH(SMSG14))=SMSG14;/* PRINT PROCESS 5 SRBS MSG*/
         L     @04,CURBUF(,COMBASE)                                0320
         MVC   OUTPUT+1(74,@04),SMSG14                             0320
*       GEN(BRWRITE 2);                                            0321
         BRWRITE 2
*       PASTLPSW=SWON;              /* INDICATE SPECIAL PROCESSING OF
*                                      5 SRBS                        */
         OI    PASTLPSW,B'00100000'                                0322
*       MAXCTR=MINLOOP;             /* SET LOOP CONTROL VALUE TO 5   */
         LA    MAXCTR,5                                            0323
*     END;                                                         0324
*                                                                  0324
*   /*****************************************************************/
*   /*                                                               */
*   /* DECREMNT LOOP VALUE AND ATTEMPT TO ACCESS THIS SRB            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0325
*DECREMNT:                                                         0325
*   MAXCTR=MAXCTR-1;                /* DECREMENT LOOP CONTROL VALUE  */
@RF00317 DS    0H                                                  0325
DECREMNT BCTR  MAXCTR,0                                            0325
*   SRBRANCH=ADDR(SRBMSG8);         /* ERROR RETURN POINT FOR THIS 0326
*                                      BRREAD                        */
         LA    @04,SRBMSG8                                         0326
         ST    @04,SRBRANCH                                        0326
*   RESPECIFY                                                      0327
*     PREG RESTRICTED;                                             0327
*   PREG=SRBPTR;                    /* SET UP TO READ SRB            */
         L     PREG,SRBPTR                                         0328
*   GEN(BRREAD (PREG));                                            0329
         BRREAD (PREG)
*   IF VALIDCK^='SRB' THEN          /* DOES SRB VALIDITY CHK @YM06904*/
         CLC   VALIDCK(3,PREG),@CC00852                            0330
         BE    @RF00330                                            0330
*     DO;                           /* NO                            */
*       OUTPUT(2:1+LENGTH(SMSG9))=SMSG9;/* PRINT VALIDITY CHECK MSG  */
         L     @04,CURBUF(,COMBASE)                                0332
         MVC   OUTPUT+1(25,@04),SMSG9                              0332
*       GEN(BRWRITE 2);                                            0333
         BRWRITE 2
*     END;                                                         0334
*   RESPECIFY                                                      0335
*     PREG UNRESTRICTED;                                           0335
*                                                                  0335
@RF00330 DS    0H                                                  0336
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMATTING SRB                                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0336
*   SRBRANCH=ADDR(SRBMSG10);        /* ERROR RETURN POINT FOR BRREADS
*                                      BY GFR                        */
         LA    @04,SRBMSG10                                        0336
         ST    @04,SRBRANCH                                        0336
*   RESPECIFY                                                      0337
*    (R0,                                                          0337
*     R1) RESTRICTED;                                              0337
*   R0=0;                           /* 0 ASID FOR RDC                */
         SLR   R0,R0                                               0338
*   DO I=1 TO DIM(SRBFMTBL);        /* CALL THE FORMAT RTN TO FORMAT
*                                      THE SRB ONE LINE AT A TIME    */
         LA    I,1                                                 0339
@DL00339 DS    0H                                                  0340
*     R1=SRBFMTBL(I);               /* ADDRESS OF EACH LINE TO BE  0340
*                                      FORMATTED                     */
         LR    @04,I                                               0340
         SLA   @04,2                                               0340
         L     R1,SRBFMTBL-4(@04)                                  0340
*     CALL AMDPRGFR;                                               0341
         L     @15,AFMTLINE(,COMBASE)                              0341
         BALR  @14,@15                                             0341
*     GEN(BRWRITE 1);               /* PRINT THE FORMATTED LINE      */
         BRWRITE 1
*   END;                                                           0343
         AH    I,@CH00077                                          0343
         CH    I,@CH00294                                          0343
         BNH   @DL00339                                            0343
*   GEN(BRWRITE 2);                 /* SKIP TWO LINES                */
         BRWRITE 2
*   RESPECIFY                                                      0345
*    (R0,                                                          0345
*     R1) UNRESTRICTED;                                            0345
*                                                                  0345
*   /*****************************************************************/
*   /*                                                               */
*   /* FOLLOWING LINK FIELD IN SRB TO GET THE NEXT ON THE QUEUE      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0346
*FWDPTR:                                                           0346
*   SRBRANCH=ADDR(SRBMSG11);        /* ERROR RETURN POINT FOR THIS 0346
*                                      BRREAD                        */
FWDPTR   LA    @04,SRBMSG11                                        0346
         ST    @04,SRBRANCH                                        0346
*   RESPECIFY                                                      0347
*     PREG RESTRICTED;                                             0347
*   PREG=ADDR(SRBFLNK);             /* SET UP TO READ NEXT SRB ON THE
*                                      QUEUE                         */
         L     PREG,SRBPTR                                         0348
         LA    PREG,SRBFLNK(,PREG)                                 0348
*   GEN(BRREAD (PREG));                                            0349
         BRREAD (PREG)
*   SFWDPTR=CURNTSRB;               /* ADDR OF NEXT SRB ON QUEUE     */
         L     SFWDPTR,CURNTSRB(,PREG)                             0350
*   RESPECIFY                                                      0351
*     PREG UNRESTRICTED;                                           0351
*                                                                  0351
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESSING SRBS BEGINNING WITH SRB POINTED TO BY LAST QUEUE   */
*   /* POINTER IN SPL - SPECIAL PROCESSING MODE                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0352
*   IF PASTLPSW=SWON THEN           /* IS THIS SPECIAL PROCESSING  0352
*                                      MODE                          */
         TM    PASTLPSW,B'00100000'                                0352
         BNO   @RF00352                                            0352
*     DO;                           /* YES                           */
*       IF SFWDPTR=0 THEN           /* IS LINK FIELD PTR 0           */
         LTR   SFWDPTR,SFWDPTR                                     0354
         BZ    @RT00354                                            0354
*         GO TO ENDSWCK;            /* YES - WAS THIS THE LAST QUEUE */
*       ELSE                                                       0356
*         DO;                       /* NO - LINK FIELD PTR WAS NOT 0 */
*PTRSWAP2:                                                         0357
*           SRBPTR=SFWDPTR;         /* SET UP TO PROCESS NEXT SRB    */
*                                                                  0357
PTRSWAP2 ST    SFWDPTR,SRBPTR                                      0357
*           /*********************************************************/
*           /*                                                       */
*           /* CHECK FOR LOOP IN THIS CHAIN                          */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0358
*MAXCTRCK:                                                         0358
*           IF MAXCTR<=0 THEN       /* IS THERE A LOOP IN CHAIN      */
MAXCTRCK LTR   MAXCTR,MAXCTR                                       0358
         BP    @RF00358                                            0358
*             DO;                   /* YES                           */
*               IF PASTLPSW=SWOFF THEN/* IS THIS SPECIAL PROCESSING
*                                      MODE                          */
         TM    PASTLPSW,B'00100000'                                0360
         BNZ   @RF00360                                            0360
*                 DO;               /* NO                            */
*                   OUTPUT(2:1+LENGTH(SMSG15))=SMSG15;/* PRINT LOOP
*                                      IN SRB CHAIN MSG              */
         L     @04,CURBUF(,COMBASE)                                0362
         MVC   OUTPUT+1(49,@04),SMSG15                             0362
*                   GEN(BRWRITE 2);                                0363
         BRWRITE 2
*                   IF NOLSTPTR=SWOFF THEN/* IS THIS QUEUE TO BE   0364
*                                      TERMINATED - NO LAST PTR TO 0364
*                                      FOLLOW                        */
         TM    NOLSTPTR,B'01000000'                                0364
         BNZ   @RF00364                                            0364
*                     DO;           /* NO                            */
*                       OUTPUT(2:1+LENGTH(SMSG14))=SMSG14;/* PRINT 0366
*                                      PROCESS 5 SRBS MSG            */
         L     @04,CURBUF(,COMBASE)                                0366
         MVC   OUTPUT+1(74,@04),SMSG14                             0366
*                       GEN(BRWRITE 2);                            0367
         BRWRITE 2
*                       GO TO PTRSWAP1;/* CONTINUE DOWN QUEUE        */
         B     PTRSWAP1                                            0368
*                     END;                                         0369
*                   ELSE                                           0370
*                     DO;           /* YES - QUEUE IS TO BE        0370
*                                      TERMINATED                    */
@RF00364 DS    0H                                                  0371
*                       OUTPUT(2:1+LENGTH(SMSG17))=SMSG17;/* PRINT 0371
*                                      PROCESSING TERMINATED MSG     */
         L     @01,CURBUF(,COMBASE)                                0371
         MVC   OUTPUT+1(36,@01),SMSG17                             0371
*                       GEN(BRWRITE 2);                            0372
         BRWRITE 2
*                     END;                                         0373
*                 END;                                             0374
*               ELSE                                               0375
*                 DO;               /* IT IS IN SPECIAL PROCESSING 0375
*                                      MODE                          */
         B     @RC00360                                            0375
@RF00360 DS    0H                                                  0376
*                   OUTPUT(2:1+LENGTH(SMSG16))=SMSG16;/* PRINT MORE
*                                      THAN 5 SRBS FOUND MSG         */
         L     @01,CURBUF(,COMBASE)                                0376
         MVC   OUTPUT+1(73,@01),SMSG16                             0376
*                   GEN(BRWRITE 2);                                0377
         BRWRITE 2
*                 END;                                             0378
*ENDSWCK:                                                          0379
*               IF ENDSWTCH=SWON THEN/* IS PROCESSING COMPLETED      */
@RC00360 DS    0H                                                  0379
ENDSWCK  TM    ENDSWTCH,B'00010000'                                0379
         BO    @RT00379                                            0379
*                 GO TO SRBDONE;    /* YES - PREPARE TO RETURN       */
*               ELSE                                               0381
*                 GO TO FIRSTSYS;   /* NO - PROCESS SYSTEM QUEUE OF
*                                      SPL                           */
         B     FIRSTSYS                                            0381
*             END;                                                 0382
*           ELSE                                                   0383
*             GO TO DECREMNT;       /* NO LOOP IN CHAIN - PROCESS  0383
*                                      THIS SRB                      */
*         END;                                                     0384
*     END;                                                         0385
*                                                                  0385
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK FOR EXPECTED END OF AN SPL QUEUE - SMQ WILL ALWAYS FAIL */
*   /* CHECK AS LASTQPTR WILL STILL BE ZERO                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0386
*   IF SRBPTR=LASTQPTR THEN         /* IS THIS THE END OF QUEUE      */
@RF00352 C     LASTQPTR,SRBPTR                                     0386
         BNE   @RF00386                                            0386
*     DO;                           /* YES                           */
*       IF SFWDPTR=0 THEN           /* IS FORWARD PTR 0              */
         LTR   SFWDPTR,SFWDPTR                                     0388
         BZ    @RT00388                                            0388
*         GO TO ENDSWCK;            /* YES - WAS THIS LAST QUEUE     */
*                                                                  0389
*       /*************************************************************/
*       /*                                                           */
*       /* SET UP TO PROCESS 5 SRBS BEGINNING WITH LAST EXPECTED SRB */
*       /* - SPECIAL PROCESSING MODE                                 */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0390
*       ELSE                                                       0390
*         DO;                       /* FORWARD POINTER WAS NOT ZERO  */
*           SRBPTR=SFWDPTR;         /* SET UP TO PROCESS NEXT SRB    */
         ST    SFWDPTR,SRBPTR                                      0391
*           OUTPUT(2:1+LENGTH(SMSG13))=SMSG13;/* PRINT NON-ZERO    0392
*                                      FORWARD PTR MSG               */
         L     @04,CURBUF(,COMBASE)                                0392
         MVC   OUTPUT+1(116,@04),SMSG13                            0392
*           GEN(BRWRITE 2);                                        0393
         BRWRITE 2
*         END;                                                     0394
*     END;                                                         0395
*   ELSE                                                           0396
*     DO;                           /* THIS IS NOT THE END OF THE  0396
*                                      QUEUE                         */
         B     @RC00386                                            0396
@RF00386 DS    0H                                                  0397
*       IF SFWDPTR^=0 THEN          /* IS FORWARD PTR 0              */
         LTR   SFWDPTR,SFWDPTR                                     0397
         BNZ   @RT00397                                            0397
*         GO TO PTRSWAP2;           /* NO - PROCESS NEXT SRB         */
*       IF QFLAG=SWOFF THEN         /* IS THIS AN SMQ                */
         L     @04,@PC00002                                        0399
         TM    QFLAG(@04),B'10000000'                              0399
         BZ    @RT00399                                            0399
*         GO TO SRBDONE;            /* YES - PREPARE TO RETURN       */
*       OUTPUT(2:1+LENGTH(SMSG11))=SMSG11;/* PRINT SRB CHAIN BROKEN
*                                      MSG                           */
         L     @04,CURBUF(,COMBASE)                                0401
         MVC   OUTPUT+1(16,@04),SMSG11                             0401
*       GEN(BRWRITE 2);                                            0402
*                                                                  0402
         BRWRITE 2
*       /*************************************************************/
*       /*                                                           */
*       /* IF THIS IS AN SMQ - TERMINATE PROCESSING AS LINK FIELD    */
*       /* CONTAINS ZEROS - IF THIS IS AN SPL DETERMINE IF THIS WAS  */
*       /* THE LAST QUEUE TO BE PROCESSED                            */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0403
*       IF NOLSTPTR=SWON THEN       /* IS THIS QUEUE TO BE TERMINATED
*                                      - NO LAST PTR TO FOLLOW       */
         TM    NOLSTPTR,B'01000000'                                0403
         BNO   @RF00403                                            0403
*         DO;                       /* YES                           */
*           OUTPUT(2:1+LENGTH(SMSG7))=SMSG7;/* PRINT END OF QUEUE MSG*/
         L     @01,CURBUF(,COMBASE)                                0405
         MVC   OUTPUT+1(61,@01),SMSG7                              0405
*           GEN(BRWRITE 2);                                        0406
         BRWRITE 2
*           GO TO ENDSWCK;          /* WAS THIS THE LAST QUEUE       */
         B     ENDSWCK                                             0407
*         END;                                                     0408
*       ELSE                                                       0409
*         DO;                       /* NO - THIS QUEUE DOES HAVE A 0409
*                                      LAST PTR                      */
@RF00403 DS    0H                                                  0410
*           OUTPUT(2:1+LENGTH(SMSG14))=SMSG14;/* PRINT PROCESS 5 SRBS
*                                      MSG                           */
         L     @04,CURBUF(,COMBASE)                                0410
         MVC   OUTPUT+1(74,@04),SMSG14                             0410
*           GEN(BRWRITE 2);                                        0411
         BRWRITE 2
*         END;                                                     0412
*PTRSWAP1:                                                         0413
*       SRBPTR=LASTQPTR;            /* SET UP TO PROCESS 5 MORE      */
PTRSWAP1 ST    LASTQPTR,SRBPTR                                     0413
*     END;                                                         0414
*                                                                  0414
*   /*****************************************************************/
*   /*                                                               */
*   /* REMAINDER OF SET UP FOR SPECIAL PROCESSING OF 5 SRBS          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0415
*   NOLSTPTR=SWON;                  /* INDICATE NO PTR TO LAST SRB IN
*                                      SPL                           */
@RC00386 DS    0H                                                  0416
*   PASTLPSW=SWON;                  /* INDICATE SPECIAL PROCESSING OF
*                                      5 SRBS                        */
         OI    NOLSTPTR,B'01100000'                                0416
*   MAXCTR=MINLOOP;                 /* SET LOOP CONTROL VALUE TO 5   */
         LA    MAXCTR,5                                            0417
*   GO TO DECREMNT;                 /* PROCESS MAX OF FIVE MORE SRBS */
*                                                                  0418
         B     DECREMNT                                            0418
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESSING OF SYSTEM QUEUE IN SPL                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0419
*FIRSTSYS:                                                         0419
*   NOFSTPTR=SWOFF;                 /* RESET SWITCH                  */
FIRSTSYS DS    0H                                                  0420
*   NOLSTPTR=SWOFF;                 /* RESET SWITCH                  */
*   PASTLPSW=SWOFF;                 /* RESET SWITCH                  */
*   ENDSWTCH=SWON;                  /* THIS IS THE LAST QUEUE IN SPL
*                                      TO BE PROCESSED               */
         OI    ENDSWTCH,B'00010000'                                0422
         NI    NOFSTPTR,B'00011111'                                0422
*   LASTQPTR=0;                     /* RESET VALUE                   */
         SLR   LASTQPTR,LASTQPTR                                   0423
*   MAXCTR=SRBMAX;                  /* LOOP CONTROL VALUE FROM COMMON*/
         LH    MAXCTR,SRBMAX(,COMBASE)                             0424
*   OUTPUT(6:5+LENGTH(SYSTITLE))=SYSTITLE;/* PRINT TITLE             */
         L     @04,CURBUF(,COMBASE)                                0425
         MVC   OUTPUT+5(12,@04),SYSTITLE                           0425
*   GEN(BRWRITE 2);                                                0426
         BRWRITE 2
*   SRBRANCH=ADDR(SRBMSG1B);        /* ERROR RETURN POINT FOR THIS 0427
*                                      BRREAD                        */
         LA    @04,SRBMSG1B                                        0427
         ST    @04,SRBRANCH                                        0427
*   RESPECIFY                                                      0428
*     PREG RESTRICTED;                                             0428
*   IF SPLTYPE=0 THEN               /* IS THIS AN LSPL               */
         L     @04,@PC00002+4                                      0429
         CLI   SPLTYPE(@04),0                                      0429
         BNE   @RF00429                                            0429
*     DO;                           /* YES                           */
*       PREG=ADDR(LSPLSYSF);        /* SET UP TO READ ADDR OF FIRST
*                                      SRB ON SYSTEM QUEUE           */
         L     @04,@PC00002                                        0431
         L     PREG,LSPLPTR(,@04)                                  0431
         LA    PREG,LSPLSYSF(,PREG)                                0431
*       GEN(BRREAD (PREG));                                        0432
         BRREAD (PREG)
*       IF CRNTSRB1=0 THEN          /* IS QUEUE EMPTY                */
         ICM   @04,7,CRNTSRB1(PREG)                                0433
         BZ    @RT00433                                            0433
*         GO TO QMPTYMSG;           /* YES - PRINT QUEUE EMPTY MSG   */
*       ELSE                                                       0435
*         SRBPTR=CURNTSRB;          /* ADDR OF FIRST SRB ON QUEUE    */
         MVC   SRBPTR(4),CURNTSRB(PREG)                            0435
*LASTSYS:                                                          0436
*       SRBRANCH=ADDR(BADFSTCK);    /* ERROR RETURN POINT FOR THIS 0436
*                                      BRREAD                        */
LASTSYS  LA    @04,BADFSTCK                                        0436
         ST    @04,SRBRANCH                                        0436
*       PREG=ADDR(LSPLSYSL);        /* SET UP TO READ ADDR OF LAST 0437
*                                      SRB ON SYSTEM QUEUE           */
         L     @04,@PC00002                                        0437
         L     PREG,LSPLPTR(,@04)                                  0437
         LA    PREG,LSPLSYSL(,PREG)                                0437
*     END;                                                         0438
*   ELSE                                                           0439
*     DO;                           /* SPLTYPE INDICATES GSPL        */
         B     @RC00429                                            0439
@RF00429 DS    0H                                                  0440
*       PREG=ADDR(GSPLSYSF);        /* SET UP TO READ ADDR OF FIRST
*                                      SRB ON SYSTEM QUEUE           */
         L     @04,@PC00002                                        0440
         L     PREG,GSPLPTR(,@04)                                  0440
         LA    PREG,GSPLSYSF(,PREG)                                0440
*       GEN(BRREAD (PREG));                                        0441
         BRREAD (PREG)
*       IF CRNTSRB1=0 THEN          /* IS QUEUE EMPTY                */
         ICM   @04,7,CRNTSRB1(PREG)                                0442
         BZ    @RT00442                                            0442
*         GO TO QMPTYMSG;           /* YES - PRINT QUEUE EMPTY MSG   */
*       ELSE                                                       0444
*         SRBPTR=CURNTSRB;          /* ADDR OF FIRST SRB ON QUEUE    */
         MVC   SRBPTR(4),CURNTSRB(PREG)                            0444
*LSTSYS1:                                                          0445
*       SRBRANCH=ADDR(BADFSTCK);    /* ERROR RETURN POINT FOR THIS 0445
*                                      BRREAD                        */
LSTSYS1  LA    @04,BADFSTCK                                        0445
         ST    @04,SRBRANCH                                        0445
*       PREG=ADDR(GSPLSYSL);        /* SET UP TO READ ADDR OF LAST 0446
*                                      SRB ON SYSTEM QUEUE IN GSPL   */
         L     @04,@PC00002                                        0446
         L     PREG,GSPLPTR(,@04)                                  0446
         LA    PREG,GSPLSYSL(,PREG)                                0446
*     END;                                                         0447
*   GEN(BRREAD (PREG));             /* READ LAST QUEUE PTR           */
@RC00429 DS    0H                                                  0448
         BRREAD (PREG)
*   IF CRNTSRB1=0 THEN              /* IS PTR TO LAST SRB 0          */
         ICM   @04,7,CRNTSRB1(PREG)                                0449
         BZ    @RT00449                                            0449
*     GO TO NOFSTCK1;               /* YES - SEE IF THERE IS A FIRST
*                                      PTR                           */
*   ELSE                                                           0451
*     DO;                                                          0451
*       LASTQPTR=CURNTSRB;          /* ADDR OF LAST SRB FROM SPL     */
         L     LASTQPTR,CURNTSRB(,PREG)                            0452
*       RESPECIFY                                                  0453
*         PREG UNRESTRICTED;                                       0453
*       GO TO NOFSTCK2;             /* IS THERE A FIRST SRB PTR IN 0454
*                                      SPL                           */
         B     NOFSTCK2                                            0454
*     END;                                                         0455
*                                                                  0455
*   /*****************************************************************/
*   /*                                                               */
*   /* BRREAD ERROR ROUTINE - REESTABLISH ADDRESSABILITY AND BRANCH  */
*   /* TO ADDRESS PUT IN SRBRANCH PRIOR TO BRREAD                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0456
*SRBERRTN:                          /* SET UP ADDRESSABILITY FOR   0456
*                                      BRREAD ROUTINE                */
*   GEN;                                                           0456
SRBERRTN DS    0H                                                  0456
         USING *,R15
         L     R13,SRBSAVRG
         LM    R14,R12,12(R13)
         DROP  R15
*   GO TO READERR;                  /* BRANCH TO SPECIFIC FUNCTION   */
*                                                                  0457
         L     @04,SRBRANCH                                        0457
         BR    @04                                                 0457
*   /*****************************************************************/
*   /*                                                               */
*   /* READ FAILED TRYING TO FIND POINTER TO FIRST SRB IN NONQ QUEUE */
*   /* OF SPL                                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0458
*SRBMSG1A:                                                         0458
*   OUTPUT(2:1+LENGTH(SMSG3))=SMSG3;/* PRINT ERROR FINDING FIRST SRB
*                                      PTR MSG                       */
SRBMSG1A L     @04,CURBUF(,COMBASE)                                0458
         MVC   OUTPUT+1(34,@04),SMSG3                              0458
*   GEN(BRWRITE 2);                                                0459
         BRWRITE 2
*   NOFSTPTR=SWON;                  /* INDICATE NO PTR TO FIRST SRB
*                                      IN SPL                        */
         OI    NOFSTPTR,B'10000000'                                0460
*   IF SPLTYPE=0 THEN               /* LSPL IS BEING PROCESSED       */
         L     @04,@PC00002+4                                      0461
         CLI   SPLTYPE(@04),0                                      0461
         BE    @RT00461                                            0461
*     GO TO LASTNONQ;               /* GET PTR TO LAST NONQ SRB FROM
*                                      LSPL                          */
*   ELSE                                                           0463
*     GO TO LSTNONQ1;               /* GET PTR TO LAST NONQ SRB FROM
*                                      GSPL                          */
*                                                                  0463
         B     LSTNONQ1                                            0463
*   /*****************************************************************/
*   /*                                                               */
*   /* READ FAILED TRYING TO FIND POINTER TO FIRST SRB IN SYSTEM     */
*   /* QUEUE OF SPL                                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0464
*SRBMSG1B:                                                         0464
*   OUTPUT(2:1+LENGTH(SMSG3))=SMSG3;/* PRINT ERROR FINDING FIRST SRB
*                                      PTR MSG                       */
SRBMSG1B L     @04,CURBUF(,COMBASE)                                0464
         MVC   OUTPUT+1(34,@04),SMSG3                              0464
*   GEN(BRWRITE 2);                                                0465
         BRWRITE 2
*   NOFSTPTR=SWON;                  /* INDICATE NO PTR TO FIRST SRB
*                                      IN SPL                        */
         OI    NOFSTPTR,B'10000000'                                0466
*   IF SPLTYPE=0 THEN               /* LSPL IS BEING PROCESSED       */
         L     @04,@PC00002+4                                      0467
         CLI   SPLTYPE(@04),0                                      0467
         BE    @RT00467                                            0467
*     GO TO LASTSYS;                /* GET PTR TO LAST SYSTEM SRB  0468
*                                      FROM LSPL                     */
*   ELSE                                                           0469
*     GO TO LSTSYS1;                /* GET PTR TO LAST SYSTEM SRB  0469
*                                      FROM GSPL                     */
*                                                                  0469
         B     LSTSYS1                                             0469
*   /*****************************************************************/
*   /*                                                               */
*   /* READ FAILED TRYING TO FIND POINTER TO LAST SRB IN EITHER NONQ */
*   /* OR SYSTEM QUEUE OF SPL                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0470
*BADFSTCK:                                                         0470
*   IF NOFSTPTR=SWON THEN           /* IS THERE A PTR TO FIRST SRB IN
*                                      SPL                           */
BADFSTCK TM    NOFSTPTR,B'10000000'                                0470
         BNO   @RF00470                                            0470
*     DO;                           /* NO                            */
*       OUTPUT(2:1+LENGTH(SMSG12))=SMSG12;/* PRINT UNABLE TO FORMAT
*                                      ANY SRBS MSG                  */
         L     @01,CURBUF(,COMBASE)                                0472
         MVC   OUTPUT+1(39,@01),SMSG12                             0472
*       GEN(BRWRITE 2);                                            0473
         BRWRITE 2
*       GO TO ENDSWCK;              /* WAS THIS THE LAST QUEUE       */
         B     ENDSWCK                                             0474
*     END;                                                         0475
*   OUTPUT(2:1+LENGTH(SMSG5))=SMSG5;/* PRINT ERROR FINDING LAST SRB
*                                      PTR MSG                       */
@RF00470 L     @04,CURBUF(,COMBASE)                                0476
         MVC   OUTPUT+1(33,@04),SMSG5                              0476
*   GEN(BRWRITE 2);                                                0477
         BRWRITE 2
*   NOLSTPTR=SWON;                  /* INDICATE NO PTR TO LAST SRB IN
*                                      SPL                           */
         OI    NOLSTPTR,B'01000000'                                0478
*   GO TO DECREMNT;                 /* PROCESS THIS SRB              */
*                                                                  0479
         B     DECREMNT                                            0479
*   /*****************************************************************/
*   /*                                                               */
*   /* READ FAILED TRYING TO FIND POINTER TO FIRST SRB IN SMQ        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0480
*SRBMSG4:                                                          0480
*   OUTPUT(2:1+LENGTH(SMSG4))=SMSG4;/* PRINT ERROR FINDING FIRST SRB
*                                      PTR-PROCESSING TERMINATED MSG */
SRBMSG4  L     @01,CURBUF(,COMBASE)                                0480
         MVC   OUTPUT+1(72,@01),SMSG4                              0480
*   GEN(BRWRITE 2);                                                0481
         BRWRITE 2
*   GO TO SRBDONE;                  /* RETURN TO CALLER              */
*                                                                  0482
         B     SRBDONE                                             0482
*   /*****************************************************************/
*   /*                                                               */
*   /* READ FAILED TRYING TO FIND ONE OF THE SRB'S ON A QUEUE -      */
*   /* CONVERT THE SRB ADDRESS TO PRINTABLE HEX FOR MESSAGE          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0483
*SRBMSG8:                                                          0483
*   RESPECIFY                                                      0483
*    (R1,                                                          0483
*     R4) RESTRICTED;                                              0483
SRBMSG8  DS    0H                                                  0484
*   R1=ADDR(SRBPTR);                /* ADDR TO CONVERT               */
         LA    R1,SRBPTR                                           0484
*   R4=ADDR(SADDR8);                /* ADDR OF OUTPUT LOCATION FOR 0485
*                                      CNVT RTN                      */
         LA    R4,SADDR8                                           0485
*   CALL ADRCNVT;                   /* AADRCNVT RTN                  */
         L     @15,AADRCNVT(,COMBASE)                              0486
         BALR  @14,@15                                             0486
*   RESPECIFY                                                      0487
*    (R1,                                                          0487
*     R4) UNRESTRICTED;                                            0487
*   OUTPUT(2:1+LENGTH(SMSG8))=SMSG8;/* PRINT ERROR FINDING SRB MSG   */
         L     @04,CURBUF(,COMBASE)                                0488
         MVC   OUTPUT+1(25,@04),SMSG8                              0488
*   GEN(BRWRITE 2);                                                0489
         BRWRITE 2
*   GO TO FWDPTR;                   /* GET PTR TO NEXT SRB ON QUEUE  */
*                                                                  0490
         B     FWDPTR                                              0490
*   /*****************************************************************/
*   /*                                                               */
*   /* A READ BY AMDPRGFR FAILED WHILE FORMATTING AN SRB             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0491
*SRBMSG10:                                                         0491
*   GEN(BRWRITE 1);                 /* PRINT PARTIALLY FILLED BUFFER */
SRBMSG10 BRWRITE 1
*   OUTPUT(2:1+LENGTH(SMSG10))=SMSG10;/* PRINT ERROR FORMATTING SRB
*                                      MSG                           */
         L     @04,CURBUF(,COMBASE)                                0492
         MVC   OUTPUT+1(26,@04),SMSG10                             0492
*   GEN(BRWRITE 2);                                                0493
         BRWRITE 2
*   GO TO FWDPTR;                   /* GET PTR TO NEXT SRB ON QUEUE  */
*                                                                  0494
         B     FWDPTR                                              0494
*   /*****************************************************************/
*   /*                                                               */
*   /* READ FAILED TRYING TO ACCESS THE LINK FIELD IN AN SRB         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0495
*SRBMSG11:                                                         0495
*   OUTPUT(2:1+LENGTH(SMSG11))=SMSG11;/* PRINT SRB CHAIN BROKEN MSG  */
SRBMSG11 L     @04,CURBUF(,COMBASE)                                0495
         MVC   OUTPUT+1(16,@04),SMSG11                             0495
*   GEN(BRWRITE 2);                                                0496
         BRWRITE 2
*   IF NOLSTPTR=SWON THEN           /* IS THIS QUEUE TO BE TERMINATED
*                                      - NO LAST PTR TO FOLLOW       */
         TM    NOLSTPTR,B'01000000'                                0497
         BO    @RT00497                                            0497
*     GO TO ENDSWCK;                /* YES - WAS THIS THE LAST QUEUE */
*   ELSE                                                           0499
*     DO;                           /* NO - THIS QUEUE DOES HAVE A 0499
*                                      LAST PTR                      */
*       OUTPUT(2:1+LENGTH(SMSG14))=SMSG14;/* PRINT PROCESS 5 SRBS MSG*/
         L     @04,CURBUF(,COMBASE)                                0500
         MVC   OUTPUT+1(74,@04),SMSG14                             0500
*       GEN(BRWRITE 2);                                            0501
         BRWRITE 2
*       GO TO PTRSWAP1;             /* SET UP TO PROCESS 5 MORE SRBS */
         B     PTRSWAP1                                            0502
*     END;                                                         0503
*   END AMDPRSRB;                                                  0504
@EL00002 DS    0H                                                  0504
@EF00002 DS    0H                                                  0504
@ER00002 LM    @14,@12,@SA00002                                    0504
         BR    @14                                                 0504
*   END AMDPRFAR                                                   0505
*                                                                  0505
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IHASPL  )                                       */
*/*%INCLUDE SYSLIB  (IHASRB  )                                       */
*/*%INCLUDE SYSLIB  (COMMON  )                                       */
*                                                                  0505
*       ;                                                          0505
@DATA    DS    0H
@CH00077 DC    H'1'
@CH00294 DC    H'3'
@CH00313 DC    H'9'
@CH00033 DC    H'11'
         DS    0F
@AL00150 DC    A(SPLADDR)              LIST WITH   2 ARGUMENT(S)
         DC    A(FSPLTYPE)
         DS    0F
@SA00001 DS    18F
@PC00001 DS    3F
@SA00002 DS    15F
@PC00002 DS    2F
@AL00001 DS    2A
         DS    0F
@CA00028 DC    A(AMDPRFAR)
@CA00652 DC    A(SRBRTN)
         DS    0D
FARSAVRG DC    F'0'
FARERSAV DC    F'0'
BRNCHADR DC    A(0)
SPLADDR  DS    AL4
         ORG   SPLADDR
SPLFLAG  DS    BL1
@NM00057 EQU   SPLADDR+0
SPLPTR   DS    AL3
         ORG   SPLADDR+4
SRBSAVRG DC    F'0'
SRBERSAV DC    F'0'
SRBRANCH DC    A(0)
INITSW   DC    XL1'00'
@CC00655 DC    C'ASCB'
@CC00660 DC    C'ASXB'
@CC00852 DC    C'SRB'
FARASID  DS    BL2
FSPLTYPE DS    BL1
LOCLTITL DC    CL27'LOCAL SERVICE PRIORITY LIST'
MSG01    DS    CL26
         ORG   MSG01
@NM00058 DC    CL19'ERROR FINDING ASCB '
ADDR1    DS    CL6
@NM00059 DS    CL1
         ORG   MSG01+26
MSG02    DC    CL26'ASCB FAILED VALIDITY CHECK'
MSG3     DC    CL27'ERROR WHILE FORMATTING ASCB'
MSG4     DC    CL18'ERROR FINDING ASXB'
MSG5     DC    CL26'ASXB FAILED VALIDITY CHECK'
MSG6     DC    CL27'ERROR WHILE FORMATTING ASXB'
MSG7     DC    CL17'ERROR FINDING SPL'
ASCBLBLS DS    CL293
         ORG   ASCBLBLS
LASCBL1  DC    CL32'ASCB+0  ASCBFWDPBWDPLOCKIOSPFSLQ'
LASCBL2  DC    CL28'+18  LSLQSPLCPUSASIDSEQNIOSM'
LASCBL3  DC    CL25'+2A  RV07DPSTORLDARSMCSCB'
LASCBL4  DC    CL23'+3C  TSBEJSTEWSTJSTLECB'
LASCBL5  DC    CL33'+58  UBETQSVCDUMPAFFNRCTFFLG1TMCH'
LASCBL6  DC    CL32'+6C  ASXBSWCTDSP1FLG2SSRBSRBSVSC'
LASCBL7  DC    CL29'+7A  NVSCTCBSCMSFCMSBQECBMECB'
LASCBL8  DC    CL29'+90  OUCBOUXBFMCTRS01XMPQIQEA'
LASCBL9  DC    CL28'+A4  RTWAMCCJBNIJBNSLGCBVGTT'
LASCBL10 DC    CL25'+BC  PCTTRS12SMCTRS14SWTL'
LASCBL11 DC    CL9'+C8  SRBT'
         ORG   ASCBLBLS+293
ASXBLBLS DS    CL195
         ORG   ASXBLBLS
LASXBL1  DC    CL32'ASXB+0  ASXBFTCBLTCBTCBSRS00MPST'
LASXBL2  DC    CL20'+14  LWARV14RV15IHSA'
LASXBL3  DC    CL9'+24  FLSA'
LASXBL4  DC    CL3'+48'
LASXBL5  DC    CL28'+6C  FRWASPSARSMDRCTDDDROUSB'
LASXBL6  DC    CL16'+84  TAXEPRGPSWD'
LASXBL7  DC    CL29'+A0  SIRBETSKFIQELIQEFRQELRQE'
LASXBL8  DC    CL29'+B8  FSRBLSRBRV16RV17RV18RV19'
LASXBL9  DC    CL29'+D0  RV20RV21RV22RV23RV24RV25'
         ORG   ASXBLBLS+195
SRBSWS   DS    BL1
         ORG   SRBSWS
NOFSTPTR DS    BL1
NOLSTPTR EQU   SRBSWS+0
PASTLPSW EQU   SRBSWS+0
ENDSWTCH EQU   SRBSWS+0
@NM00063 EQU   SRBSWS+0
         ORG   SRBSWS+1
NONQTITL DC    CL20'NON-QUIESCABLE QUEUE'
SYSTITLE DC    CL12'SYSTEM QUEUE'
SMSG1    DC    CL14'QUEUE IS EMPTY'
SMSG2    DC    CL68'LOOP CONTROL VALUE IS ZERO, PROCESSING TERMINATED FC
               OR ALL SRB QUEUES'
SMSG3    DC    CL34'ERROR FINDING POINTER TO FIRST SRB'
SMSG4    DC    CL72'ERROR FINDING POINTER TO FIRST SRB, PROCESSING TERMC
               INATED FOR THIS QUEUE'
SMSG5    DC    CL33'ERROR FINDING POINTER TO LAST SRB'
SMSG6    DC    CL27'POINTER TO LAST SRB IS ZERO'
SMSG7    DC    CL61'FORWARD POINTER IS ZERO, PROCESSING TERMINATED FOR C
               THIS QUEUE'
SMSG8    DS    CL25
         ORG   SMSG8
@NM00064 DC    CL18'ERROR FINDING SRB '
SADDR8   DS    CL6
@NM00065 DS    CL1
         ORG   SMSG8+25
SMSG9    DC    CL25'SRB FAILED VALIDITY CHECK'
SMSG10   DC    CL26'ERROR WHILE FORMATTING SRB'
SMSG11   DC    CL16'SRB CHAIN BROKEN'
SMSG12   DC    CL39'UNABLE TO FORMAT ANY SRBS ON THIS QUEUE'
SMSG13   DC    CL116'ERROR IN SRB CHAIN, LAST EXPECTED SRB HAS NON-ZEROC
                FORWARD POINTER, WILL PROCESS FIVE MORE FOLLOWING FORWAC
               RD POINTER'
SMSG14   DC    CL74'WILL PROCESS FIVE SRBS BEGINNING WITH SRB POINTED TC
               O BY LAST QUEUE POINTER'
SMSG15   DC    CL49'LOOP IN SRB CHAIN, MORE THAN MAXIMUM NUMBER FOUND'
SMSG16   DC    CL73'PROCESSING TERMINATED FOR THIS CHAIN, MORE THAN FIVC
               E SRBS HAVE BEEN FOUND'
SMSG17   DC    CL36'PROCESSING TERMINATED FOR THIS CHAIN'
SRBLBLS  DS    CL71
         ORG   SRBLBLS
LSRBL1   DC    CL31'SRB+0  IDFLNKASCBCPAFFPASIDPTCB'
LSRBL2   DC    CL27'+14  EPRMTRPARMSAVEPKFPRIOR'
LSRBL3   DC    CL13'+26  RESVRESV'
         ORG   SRBLBLS+71
         DS    CL3
CBFMTBL  DC    AL4(PASCBL1)
         DC    AL4(PASCBL2)
         DC    AL4(PASCBL3)
         DC    AL4(PASCBL4)
         DC    AL4(PASCBL5)
         DC    AL4(PASCBL6)
         DC    AL4(PASCBL7)
         DC    AL4(PASCBL8)
         DC    AL4(PASCBL9)
         DC    AL4(PASCBL10)
         DC    AL4(PASCBL11)
XBFMTBL  DC    AL4(PASXBL1)
         DC    AL4(PASXBL2)
         DC    AL4(PASXBL3)
         DC    AL4(PASXBL4)
         DC    AL4(PASXBL5)
         DC    AL4(PASXBL6)
         DC    AL4(PASXBL7)
         DC    AL4(PASXBL8)
         DC    AL4(PASXBL9)
FARPATCH DC    40F'0'
SRBFMTBL DC    AL4(PSRBL1)
         DC    AL4(PSRBL2)
         DC    AL4(PSRBL3)
AMDPRFAR CSECT
*
DTAE     EQU   32                  DATA EBCDIC BIT
DTAC     EQU   16                  DATA IN CORE BIT
DTAP     EQU   8                   DATA PTR BIT
DTA      EQU   4                   DATA INCLUDED BIT
LBLP     EQU   2                   LABEL PTR BIT
LBL      EQU   1                   LABEL INCLUDED BIT
AMDPRFAR CSECT
*                                   /* COMMENT DELIMITERS PREVENT
*                                      MACRO PHASE MODIFICATION
***********************************************************************
*                                                                     *
*   THE FOLLOWING ARE THE FORMAT PATTERNS FOR THE ASCB                *
*                                                                     *
***********************************************************************
          SPACE
PASCBL1  FMTPTRN (LBL,DTA,LBLP,DTAP,DTAC),4,3,0,6,ASCBLBLS,ASCBPTR+1
         FMTPTRN (LBL,DTA,DTAP),8,4,17,26,,(ASCBPTR,0)
         FMTPTRN (LBL,DTA),4,4,37,42
         FMTPTRN (LBL,DTA),4,4,53,58
         FMTPTRN (LBL,DTA),4,4,69,74
         FMTPTRN (LBL,DTA),4,4,85,90
         FMTPTRN (LBL,DTA),4,4,101,106,,,LAST
PASCBL2  FMTPTRN (LBL,DTA),9,4,16,26
         FMTPTRN (LBL,DTA),3,4,37,42
         FMTPTRN (LBL,DTA),4,4,53,58
         FMTPTRN (LBL,DTA),4,2,69,74
         FMTPTRN (LBL,DTA),4,2,85,90
         FMTPTRN (LBL,DTA),4,2,101,106,,,LAST
PASCBL3  FMTPTRN (LBL,DTA),9,1,16,26
         FMTPTRN (LBL,DTA),2,1,37,42
         FMTPTRN (LBL,DTA),4,4,53,58
         FMTPTRN (LBL,DTA),3,4,69,74
         FMTPTRN (LBL,DTA),3,4,85,90
         FMTPTRN (LBL,DTA),4,4,101,106,,,LAST
PASCBL4  FMTPTRN (LBL,DTA),8,4,16,26
         FMTPTRN (LBL,DTA),4,8,37,42
         FMTPTRN (LBL,DTA),4,8,61,66
         FMTPTRN (LBL,DTA),4,4,85,90
         FMTPTRN (LBL,DTA),3,4,101,106,,,LAST
PASCBL5  FMTPTRN (LBL,DTA),9,4,16,26
         FMTPTRN (LBL,DTA),4,4,37,42
         FMTPTRN (LBL,DTA),4,4,53,58
         FMTPTRN (LBL,DTA),4,2,69,74
         FMTPTRN (LBL,DTA),4,1,81,86
         FMTPTRN (LBL,DTA),4,1,91,96
         FMTPTRN (LBL,DTA),4,4,101,106,,,LAST
PASCBL6  FMTPTRN (LBL,DTA),9,4,16,26
         FMTPTRN (LBL,DTA),4,2,37,42
         FMTPTRN (LBL,DTA),4,1,53,58
         FMTPTRN (LBL,DTA),4,1,69,74
         FMTPTRN (LBL,DTA),4,2,81,86
         FMTPTRN (LBL,DTA),4,2,91,96
         FMTPTRN (LBL,DTA),3,2,101,106,,,LAST
PASCBL7  FMTPTRN (LBL,DTA),9,2,16,26
         FMTPTRN (LBL,DTA),4,4,37,42
         FMTPTRN (LBL,DTA),4,4,53,58
         FMTPTRN (LBL,DTA),4,4,69,74
         FMTPTRN (LBL,DTA),4,4,85,90
         FMTPTRN (LBL,DTA),4,4,101,106,,,LAST
PASCBL8  FMTPTRN (LBL,DTA),9,4,16,26
         FMTPTRN (LBL,DTA),4,4,37,42
         FMTPTRN (LBL,DTA),4,2,53,58
         FMTPTRN (LBL,DTA),4,2,69,74
         FMTPTRN (LBL,DTA),4,4,85,90
         FMTPTRN (LBL,DTA),4,4,101,106,,,LAST
PASCBL9  FMTPTRN (LBL,DTA),9,4,16,26
         FMTPTRN (LBL,DTA),3,4,37,42
         FMTPTRN (LBL,DTA),4,4,53,58
         FMTPTRN (LBL,DTA),4,4,69,74
         FMTPTRN (LBL,DTA),4,4,85,90
         FMTPTRN (LBL,DTA),4,4,101,106,,,LAST
PASCBL10 FMTPTRN (LBL,DTA),9,4,16,26
         FMTPTRN (LBL,DTA),4,2,37,42
         FMTPTRN (LBL,DTA),4,1,53,58
         FMTPTRN (LBL,DTA),4,1,69,74
         FMTPTRN (LBL,DTA),4,4,85,90,,,LAST
PASCBL11 FMTPTRN (LBL,DTA),9,8,16,26,,,LAST
AMDPRFAR CSECT
*                                   /* COMMENT DELINITERS PREVENT
*                                      MACRO PHASE MODIFICATIONS
***********************************************************************
*                                                                     *
*   THE FOLLOWING ARE THE FORMAT PATTERNS FOR THE ASXB                *
*                                                                     *
***********************************************************************
          SPACE
PASXBL1  FMTPTRN (LBL,DTA,LBLP,DTAP,DTAC),4,3,0,6,ASXBLBLS,ASXBADDR+1
         FMTPTRN (LBL,DTA,DTAP),8,4,17,26,(ASXBADDR,0)
         FMTPTRN (LBL,DTA),4,4,37,42
         FMTPTRN (LBL,DTA),4,4,53,58
         FMTPTRN (LBL,DTA),4,2,69,74
         FMTPTRN (LBL,DTA),4,2,85,90
         FMTPTRN (LBL,DTA),4,4,101,106,,,LAST
PASXBL2  FMTPTRN (LBL,DTA),8,4,16,26
         FMTPTRN (LBL,DTA),4,4,37,42
         FMTPTRN (LBL,DTA),4,4,53,58
         FMTPTRN (LBL,DTA),4,4,69,74,,,LAST
PASXBL3  FMTPTRN (LBL,DTA),9,16,16,26
         FMTPTRN (DTA),,16,,62
         FMTPTRN (DTA),,4,,98,,,LAST
PASXBL4  FMTPTRN (LBL,DTA),3,16,16,26
         FMTPTRN (DTA),,16,,62
         FMTPTRN (DTA),,4,,98,,,LAST
PASXBL5  FMTPTRN (LBL,DTA),9,4,16,26
         FMTPTRN (LBL,DTA),4,4,37,42
         FMTPTRN (LBL,DTA),4,4,53,58
         FMTPTRN (LBL,DTA),4,4,69,74
         FMTPTRN (LBL,DTA),3,4,85,90
         FMTPTRN (LBL,DTA),4,4,101,106,,,LAST
PASXBL6  FMTPTRN (LBL,DTA),9,4,16,26
         FMTPTRN (LBL,DTA),3,16,37,42
         FMTPTRN (LBL,DTA),4,8,85,90,,,LAST
PASXBL7  FMTPTRN (LBL,DTA),9,4,16,26
         FMTPTRN (LBL,DTA),4,4,37,42
         FMTPTRN (LBL,DTA),4,4,53,58
         FMTPTRN (LBL,DTA),4,4,69,74
         FMTPTRN (LBL,DTA),4,4,85,90
         FMTPTRN (LBL,DTA),4,4,101,106,,,LAST
PASXBL8  FMTPTRN (LBL,DTA),9,4,16,26
         FMTPTRN (LBL,DTA),4,4,37,42
         FMTPTRN (LBL,DTA),4,4,53,58
         FMTPTRN (LBL,DTA),4,4,69,74
         FMTPTRN (LBL,DTA),4,4,85,90
         FMTPTRN (LBL,DTA),4,4,101,106,,,LAST
PASXBL9  FMTPTRN (LBL,DTA),9,4,16,26
         FMTPTRN (LBL,DTA),4,4,37,42
         FMTPTRN (LBL,DTA),4,4,53,58
         FMTPTRN (LBL,DTA),4,4,69,74
         FMTPTRN (LBL,DTA),4,4,85,90
         FMTPTRN (LBL,DTA),4,4,101,106,,,LAST
AMDPRFAR CSECT
*                                   /* COMMENT DELIMITERS PREVENT
*                                      MACRO PHASE MODIFICATIONS
***********************************************************************
*                                                                     *
*   THE FOLLOWING ARE THE FORMAT PATTERNS FOR THE SRB                 *
*                                                                     *
***********************************************************************
          SPACE
PSRBL1   FMTPTRN (LBL,DTA,LBLP,DTAP,DTAC),3,3,0,6,SRBLBLS,SRBPTR+1
         FMTPTRN (LBL,DTA,DTAP),6,4,17,26,,(SRBPTR,0)
         FMTPTRN (LBL,DTA),4,4,37,42
         FMTPTRN (LBL,DTA),4,4,53,58
         FMTPTRN (LBL,DTA),5,2,69,75
         FMTPTRN (LBL,DTA),5,2,85,91
         FMTPTRN (LBL,DTA),4,4,101,107,,,LAST
PSRBL2   FMTPTRN (LBL,DTA),7,4,16,26
         FMTPTRN (LBL,DTA),4,4,37,42
         FMTPTRN (LBL,DTA),4,4,53,58
         FMTPTRN (LBL,DTA),4,4,69,75
         FMTPTRN (LBL,DTA),3,1,85,91
         FMTPTRN (LBL,DTA),5,1,101,107,,,LAST
PSRBL3   FMTPTRN (LBL,DTA),9,2,16,26
         FMTPTRN (LBL,DTA),4,4,37,42,,,LAST
AMDPRFAR CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
MAXCTR   EQU   @03
LASTQPTR EQU   @05
SFWDPTR  EQU   @02
I        EQU   @02
R0       EQU   @00
R1       EQU   @01
R4       EQU   @04
R13      EQU   @13
COMBASE  EQU   @12
PREG     EQU   @01
BASE1    EQU   @11
BASE2    EQU   @10
BASE3    EQU   @09
BUFREG   EQU   @06
CNTREG   EQU   @03
LINEREG  EQU   @08
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R14      EQU   @14
R15      EQU   @15
R2       EQU   @02
R3       EQU   @03
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
STOPBASE EQU   @05
ASCB     EQU   0
ASCBSPL  EQU   ASCB+28
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBASXB EQU   ASCB+108
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
SPLENTRY EQU   0
GSPL     EQU   0
GSPLNQ   EQU   GSPL
GSPLNQF  EQU   GSPLNQ
GSPLNQL  EQU   GSPLNQ+4
GSPLSYS  EQU   GSPL+8
GSPLSYSF EQU   GSPLSYS
GSPLSYSL EQU   GSPLSYS+4
LSPL     EQU   0
LSPLNQ   EQU   LSPL
LSPLNQF  EQU   LSPLNQ
LSPLNQL  EQU   LSPLNQ+4
LSPLSYS  EQU   LSPL+8
LSPLSYSF EQU   LSPLSYS
LSPLSYSL EQU   LSPLSYS+4
SRBSECT  EQU   0
SRB      EQU   SRBSECT
SRBFLNK  EQU   SRB+4
SRBFLC   EQU   SRB+12
COMMON   EQU   0
ERRADDR  EQU   COMMON
CURBUF   EQU   COMMON+48
SWA      EQU   COMMON+122
SWB      EQU   COMMON+123
SWC      EQU   COMMON+124
SWD      EQU   COMMON+125
SWE      EQU   COMMON+126
SWF      EQU   COMMON+127
BUFSW    EQU   COMMON+128
PRSW     EQU   COMMON+129
TABLE    EQU   COMMON+659
HEXTABL  EQU   TABLE+63
AWRITE   EQU   COMMON+1500
AFMTLINE EQU   COMMON+1512
AADRCNVT EQU   COMMON+1516
DCBADDRS EQU   COMMON+1608
@NM00043 EQU   DCBADDRS+16
@NM00044 EQU   @NM00043
BRRDDATA EQU   COMMON+1984
AASCBFMT EQU   COMMON+1996
ASRBFMT  EQU   COMMON+2000
AUSREXIT EQU   COMMON+2008
AUSRASID EQU   COMMON+2020
EXITFLAG EQU   COMMON+2022
SRBMAX   EQU   COMMON+2036
I3800SW  EQU   COMMON+2076
TITLEKEY EQU   COMMON+2077
Z9SUBITS EQU   COMMON+2100
Z9SUFLG  EQU   COMMON+2115
AMDPRGFR EQU   0
AMDPRUIM EQU   0
ADRCNVT  EQU   0
OUTPUT   EQU   0
BREADERR EQU   0
FARASXB  EQU   0
FARASXB1 EQU   FARASXB+1
VALIDCK  EQU   0
FARSPL   EQU   0
READERR  EQU   0
CURNTSRB EQU   0
CRNTSRB1 EQU   CURNTSRB+1
DUMPSRBA EQU   SRBPTR+1
FSRASCB  EQU   0
ASCBADDR EQU   FSRASCB+1
PSPLADDR EQU   0
PSPLTYPE EQU   0
QUEADDR  EQU   0
QFLAG    EQU   QUEADDR
QUEPTR   EQU   QUEADDR+1
SPLTYPE  EQU   0
GSPLPTR  EQU   QUEADDR
LSPLPTR  EQU   QUEADDR
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00062 EQU   QUEADDR
@NM00055 EQU   FSRASCB
@NM00061 EQU   SRBPTR
@NM00060 EQU   CURNTSRB
@NM00056 EQU   FARASXB
Z9ERRID  EQU   COMMON+2116
Z9SVCBUF EQU   COMMON+2096
TITLESTK EQU   TITLEKEY+12
@NM00054 EQU   TITLEKEY
I3800204 EQU   I3800SW
I380080  EQU   I3800SW
I3800ULN EQU   I3800SW
I3800KEY EQU   I3800SW
@NM00053 EQU   I3800SW
@NM00052 EQU   I3800SW
@NM00051 EQU   I3800SW
@NM00050 EQU   I3800SW
CSADDR   EQU   COMMON+2072
@NM00049 EQU   COMMON+2070
TOPICHDR EQU   COMMON+2060
DFLTCSA  EQU   COMMON+2056
LPAMAX   EQU   COMMON+2052
DNUCTOP  EQU   COMMON+2048
XLMAX    EQU   COMMON+2044
DQEMAX   EQU   COMMON+2042
ASCBMAX  EQU   COMMON+2040
TCBMAX   EQU   COMMON+2038
DDMAX    EQU   COMMON+2034
DEBMAX   EQU   COMMON+2032
JPQMAX   EQU   COMMON+2030
LLEMAX   EQU   COMMON+2028
PQEMAX   EQU   COMMON+2026
RBMAX    EQU   COMMON+2024
@NM00048 EQU   COMMON+2023
AUSRTCBA EQU   COMMON+2016
AUSRDEL  EQU   COMMON+2012
AUSRINIT EQU   COMMON+2004
BRRDADJ  EQU   COMMON+1992
BRRDINIT EQU   COMMON+1988
BUFERMAP EQU   COMMON+1980
ASCBMAP  EQU   COMMON+1976
CPUMAP   EQU   COMMON+1972
ASIDNDX  EQU   COMMON+1968
@NM00047 EQU   COMMON+1964
HDRTITLE EQU   COMMON+1864
HDRREGS  EQU   COMMON+1696
SACSWCAW EQU   COMMON+1684
ASVTADDR EQU   COMMON+1680
PREFXRGV EQU   COMMON+1676
PREFXRGR EQU   COMMON+1672
CURASCB  EQU   COMMON+1668
IPLCPU   EQU   COMMON+1666
QASID    EQU   COMMON+1664
QAPFT    EQU   COMMON+1660
@NM00046 EQU   COMMON+1656
REALMAX  EQU   COMMON+1652
SEGTABOR EQU   COMMON+1648
REALMAP  EQU   COMMON+1644
@NM00045 EQU   COMMON+1641
EDITER   EQU   COMMON+1640
AROOT    EQU   COMMON+1636
AEDITCB  EQU   COMMON+1632
TRCCOUNT EQU   COMMON+1628
ASYSUDCB EQU   @NM00043+1
ENDLIST  EQU   @NM00044
AINDCB   EQU   DCBADDRS+12
ARDRDCB  EQU   DCBADDRS+8
APTRDCB  EQU   DCBADDRS+4
AOUTDCB  EQU   DCBADDRS
ATCBSMRY EQU   COMMON+1604
ATCBSMFR EQU   COMMON+1600
ONGOPTR  EQU   COMMON+1596
AEND     EQU   COMMON+1592
AERRMSGA EQU   COMMON+1584
BUFREINT EQU   COMMON+1580
BUFSUM   EQU   COMMON+1576
APRTSTG  EQU   COMMON+1572
AFORMAT  EQU   COMMON+1568
ASTPROUT EQU   COMMON+1564
APCBENQ  EQU   COMMON+1560
ATCBRTRV EQU   COMMON+1556
ATCBREMV EQU   COMMON+1552
ATCBSAVE EQU   COMMON+1548
QATMERTN EQU   COMMON+1544
ALOADER  EQU   COMMON+1540
AEREXIT  EQU   COMMON+1536
SYNMSGA  EQU   COMMON+1532
STOPEXIT EQU   COMMON+1528
ARGNBND  EQU   COMMON+1524
AWRDCNVT EQU   COMMON+1520
ASYNTAX  EQU   COMMON+1508
APRTMSG  EQU   COMMON+1504
NONBLNK  EQU   COMMON+1244
BLNK     EQU   COMMON+988
@NM00042 EQU   COMMON+972
@NM00041 EQU   COMMON+915
EBCTABL  EQU   HEXTABL+10
@NM00040 EQU   HEXTABL
@NM00039 EQU   TABLE
CAPTABL  EQU   COMMON+403
TITLEPGE EQU   COMMON+394
@NM00038 EQU   COMMON+392
TITLETME EQU   COMMON+379
@NM00037 EQU   COMMON+377
TITLEDTE EQU   COMMON+364
@NM00036 EQU   COMMON+362
TITLEMOD EQU   COMMON+347
TITLEMSG EQU   COMMON+283
MSG2     EQU   COMMON+257
MSG1     EQU   COMMON+231
STOP     EQU   COMMON+227
TITLE    EQU   COMMON+222
BLANKS   EQU   COMMON+214
WTORMSG  EQU   COMMON+133
@NM00035 EQU   COMMON+130
@NM00034 EQU   PRSW
@NM00033 EQU   PRSW
PRNTREAL EQU   PRSW
PRNTRL   EQU   PRSW
TTLSW    EQU   PRSW
@NM00032 EQU   PRSW
QSEGTBSW EQU   PRSW
@NM00031 EQU   PRSW
@NM00030 EQU   BUFSW
PREFM    EQU   BUFSW
@NM00029 EQU   BUFSW
@NM00028 EQU   BUFSW
@NM00027 EQU   BUFSW
@NM00026 EQU   BUFSW
@NM00025 EQU   BUFSW
@NM00024 EQU   BUFSW
@NM00023 EQU   SWF
QUT1LOD  EQU   SWF
@NM00022 EQU   SWF
PAGEOK   EQU   SWF
DMPIC    EQU   SWF
QSADMP   EQU   SWF
NUCTFRMC EQU   SWF
QPRDINIT EQU   SWF
@NM00021 EQU   SWE
@NM00020 EQU   SWE
@NM00019 EQU   SWE
BUILDMAP EQU   SWE
TITLESW  EQU   SWE
RESPC    EQU   SWE
@NM00018 EQU   SWE
STOPSW   EQU   SWE
@NM00017 EQU   SWD
GPRSFND  EQU   SWD
CONTSW   EQU   SWD
NOLOADSW EQU   SWD
NOSTDMG  EQU   SWD
@NM00016 EQU   SWD
@NM00015 EQU   SWD
FLSHMODE EQU   SWD
@NM00014 EQU   SWC
@NM00013 EQU   SWC
SEGRD    EQU   SWC
EDITSW   EQU   SWC
TREADIN  EQU   SWC
POSITSW  EQU   SWC
SETFLSH  EQU   SWC
MSTRSW   EQU   SWC
@NM00012 EQU   SWB
@NM00011 EQU   SWB
QSYSUT2  EQU   SWB
ENDSW    EQU   SWB
@NM00010 EQU   SWB
@NM00009 EQU   SWB
FMTERR   EQU   SWB
IOERR    EQU   SWB
RDRSW    EQU   SWA
SETCVTSW EQU   SWA
@NM00008 EQU   SWA
GOSW     EQU   SWA
@NM00007 EQU   SWA
@NM00006 EQU   SWA
@NM00005 EQU   SWA
@NM00004 EQU   SWA
LINENUM  EQU   COMMON+120
LINENUMB EQU   COMMON+118
SIXTEEN  EQU   COMMON+116
TWELVE   EQU   COMMON+114
ELEVEN   EQU   COMMON+112
HTEN     EQU   COMMON+110
EIGHT    EQU   COMMON+108
SEVEN    EQU   COMMON+106
FIVE     EQU   COMMON+104
FOUR     EQU   COMMON+102
THREE    EQU   COMMON+100
TWO      EQU   COMMON+98
ONEA     EQU   COMMON+96
READTM   EQU   COMMON+92
RDERCNT  EQU   COMMON+88
READNO   EQU   COMMON+84
RDENTRY  EQU   COMMON+80
@NM00003 EQU   COMMON+79
RETCODE  EQU   COMMON+78
FILESEQ  EQU   COMMON+76
INDD     EQU   COMMON+68
STORSIZE EQU   COMMON+64
PCBPTR   EQU   COMMON+60
CVTADDR  EQU   COMMON+56
TCBLIST  EQU   COMMON+52
PAGENUMB EQU   COMMON+44
LINECNT  EQU   COMMON+40
SIX      EQU   COMMON+36
NUCTOP   EQU   COMMON+32
WORK1    EQU   COMMON+24
DELIMCD  EQU   COMMON+20
KYWDEND  EQU   COMMON+16
KYWDBGN  EQU   COMMON+12
VERBEND  EQU   COMMON+8
VERBGN   EQU   COMMON+4
@NM00002 EQU   SRB+40
@NM00001 EQU   SRB+38
SRBPRIOR EQU   SRB+37
SRBPKF   EQU   SRB+36
SRBSAVE  EQU   SRB+32
SRBPARM  EQU   SRB+28
SRBRMTR  EQU   SRB+24
SRBEP    EQU   SRB+20
SRBPTCB  EQU   SRBFLC+4
SRBPASID EQU   SRBFLC+2
SRBCPAFF EQU   SRBFLC
SRBASCB  EQU   SRB+8
SRBID    EQU   SRB
LSPLEND  EQU   LSPL+16
GSPLEND  EQU   GSPL+16
SPLLSRB  EQU   SPLENTRY+4
SPLFSRB  EQU   SPLENTRY
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBLGCB EQU   ASCB+180
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBCMSB EQU   ASCB+132
ASCBCMSF EQU   ASCB+128
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBQSVC EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSM  EQU   ASCB+52
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBASID EQU   ASCB+36
ASCBCPUS EQU   ASCB+32
ASCBLSLQ EQU   ASCB+24
ASCBFSLQ EQU   ASCB+20
ASCBIOSP EQU   ASCB+16
ASCBLOCK EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
FAREXIT  EQU   @EL00001
@RT00227 EQU   @EL00002
SRBEXIT  EQU   @EL00002
@RF00252 EQU   QMPTYMSG
@RF00275 EQU   FIRSTSYS
@RT00291 EQU   QMPTYMSG
@RT00354 EQU   ENDSWCK
@RT00379 EQU   SRBDONE
@RF00379 EQU   FIRSTSYS
@RF00358 EQU   DECREMNT
@RT00388 EQU   ENDSWCK
@RT00397 EQU   PTRSWAP2
@RT00399 EQU   SRBDONE
@RT00433 EQU   QMPTYMSG
@RT00442 EQU   QMPTYMSG
@RT00449 EQU   NOFSTCK1
@RT00461 EQU   LASTNONQ
@RF00461 EQU   LSTNONQ1
@RT00467 EQU   LASTSYS
@RF00467 EQU   LSTSYS1
@RT00497 EQU   ENDSWCK
@PB00002 EQU   @EL00001
@RT00081 EQU   FAREXIT
@ENDDATA EQU   *
         END   AMDPRFAR,(C'PLS0723',0701,76310)
