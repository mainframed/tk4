         TITLE 'AMDPRSEG - SEGMENT LOAD ROUTINE                        *
                        '
AMDPRSEG CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(19)                                             0001
         DC    C'AMDPRSEGR0300076209'                              0001
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         ST    @00,20(,@13)                                        0001
         STM   @02,@12,28(@13)                                     0001
         BALR  @10,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@10                                         0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
    SYNEPS
    USING  SYNTAX,R15              BASE EP-S OF AMDPRSYN         S21014
AMDPRSEG CSECT
*   LISTBASE=REG1;                  /* SAVE P-LIST POINTER           */
         ST    REG1,LISTBASE                                       0081
*   SYNMSGA=ADDR(AMDPRP01);         /* POINT TO MESSAGE ARRAY S21014 */
         L     @11,@CA00090                                        0082
         ST    @11,SYNMSGA(,COMBASE)                               0082
*   LOADSEC='0'B;                   /* TURN OFF SW. THAT INDICATES 0083
*                                      SECONDARY LOAD FUNCT          */
*   LOADEXIT='0'B;                  /* TURN OFF SW. THAT INDICATES 0084
*                                      EXIT LOAD FUNCT.              */
*   ALLMODIN='0'B;                  /* TURN OFF SW THAT INDICATES  0085
*                                      THAT NO MODULES NEED LOADING
*                                                              X01980*/
         NI    LOADSEC,B'01001111'                                 0085
*INIT:                                                             0086
*   IF INITSW='1'B THEN                                            0086
INIT     TM    INITSW,B'01000000'                                  0086
         BO    @RT00086                                            0086
*     GO TO TYPELOAD;                                              0087
*   STORSIZE=(STORSIZE+65535)&(-65536);/* ROUND TO NEXT 64K          */
         L     @11,@CF01123                                        0088
         AL    @11,STORSIZE(,COMBASE)                              0088
         N     @11,@CF01124                                        0088
         ST    @11,STORSIZE(,COMBASE)                              0088
*   IF STORSIZE>262144 THEN         /* ASSURE STORSIZE NOT TOO Y02006*/
         L     @03,@CF01125                                        0089
         CR    @11,@03                                             0089
         BNH   @RF00089                                            0089
*     STORSIZE=262144;              /* LARGE                   Y02006*/
         ST    @03,STORSIZE(,COMBASE)                              0090
*   MODCT=0;                        /* INIT IN-CORE MODULE COUNT TO 0*/
@RF00089 SLR   @11,@11                                             0091
         ST    @11,MODCT                                           0091
*   LPACT=0;                        /* INIT # OF MODULES IN LPA TABLE
*                                      TO ZERO                       */
         ST    @11,LPACT                                           0092
*   INITSW='1'B;                    /* FLAG INIT AS COMPLETE       0093
*                                      INITIALIZATION COMPLETE       */
         OI    INITSW,B'01000000'                                  0093
*TYPELOAD:                                                         0094
*   IF LISTPTR<0 THEN                                              0094
TYPELOAD L     @11,LISTPTR                                         0094
         LTR   @11,@11                                             0094
         BNM   @RF00094                                            0094
*SECNLOAD:                                                         0095
*     DO;                                                          0095
SECNLOAD DS    0H                                                  0096
*       LOADCT=1;                   /* SET UP TO LOAD ONE MODULE     */
         MVC   LOADCT(4),@CF00034                                  0096
*       LOADSEC='1'B;               /* INDICATE SECONDARY LOAD     0097
*                                      OPERATION                     */
         OI    LOADSEC,B'10000000'                                 0097
*       IF HIBYTE='80'X THEN        /* IS THIS AN EXIT LOAD          */
         CLI   HIBYTE,X'80'                                        0098
         BNE   @RF00098                                            0098
*XITLOD:                                                           0099
*         DO;                                                      0099
XITLOD   DS    0H                                                  0100
*           LOADEXIT='1'B;          /* INDICATE EXIT LOAD FUNCT.     */
         OI    LOADEXIT,B'00100000'                                0100
*           HIBYTE='00'X;                                          0101
         MVI   HIBYTE,X'00'                                        0101
*           REG1=LISTBASE;          /* SET UP BASE FOR REQMODNM      */
         L     @11,LISTBASE                                        0102
         LR    REG1,@11                                            0102
*           IF REQMODNM=XNAME THEN  /* IF MODULE IS IN               */
         CLC   REQMODNM(8,REG1),XNAME                              0103
         BE    @RT00103                                            0103
*             GOTO XITENPT;         /* GO GET ENTRY PT. AND RETURN TO
*                                      CALLER                        */
*           LISTBASE=-LISTBASE;     /* SET UP SO SOME COMMON CODE CAN
*                                      BE US ED                      */
         LCR   @11,@11                                             0105
         ST    @11,LISTBASE                                        0105
*           GOTO BLDL;                                             0106
         B     BLDL                                                0106
*         END;                                                     0107
*       REG1=-LISTBASE;             /* GET POINTER TO REQUESTED NAME */
@RF00098 L     REG1,LISTBASE                                       0108
         LCR   REG1,REG1                                           0108
*       FORMNUM2=49152;             /* SET LIMIT FOR EXTERNAL EDIT   */
         MVC   FORMNUM2(4),@CF01133                                0109
*       IF EDITSW='1'B THEN         /* IF EDIT IN PROCESS USE  Y02006*/
         TM    EDITSW(COMBASE),B'00001000'                         0110
         BO    @RT00110                                            0110
*         GOTO SETLIMIT;            /* LIMITNO1                Y02006*/
*       FORMNUM2=16384;             /* SET LIMIT FOR INTERNAL EDIT   */
         MVC   FORMNUM2(4),@CF01135                                0112
*SETLIMIT:                          /* CALCULATE SECONDARY MOD LIMIT */
*       LIMIT=30720+(STORSIZE/65536-2)*FORMNUM2-EXITSIZE;/* COMPARE
*                                      TO SEE IF REQUESTED MODULE IS
*                                      ALREADY IN CORE               */
SETLIMIT L     @04,STORSIZE(,COMBASE)                              0113
         SRDA  @04,32                                              0113
         D     @04,@CF01137                                        0113
         BCTR  @05,0                                               0113
         BCTR  @05,0                                               0113
         M     @04,FORMNUM2                                        0113
         AH    @05,@CH01136                                        0113
         SL    @05,EXITSIZE                                        0113
         ST    @05,LIMIT                                           0113
*       DO LISTAD=SECLOAD TO MODCT; /* S21014                        */
         L     @11,SECLOAD                                         0114
         B     @DE00114                                            0114
@DL00114 DS    0H                                                  0115
*         CALL INQ;                 /* GET A LIST ENTRY S21014       */
         BAL   @14,INQ                                             0115
*         IF LOADNAME=REQMODNM THEN /* S21014                        */
         CLC   LOADNAME(8,REG2),REQMODNM(REG1)                     0116
         BE    @RT00116                                            0116
*           GO TO INCORE;           /* RETURN CLEAN IF MODULE S21014
*                                      IS IN ALREADY S21014          */
*       END;                                                       0118
         LA    @11,1                                               0118
         AL    @11,LISTAD                                          0118
@DE00114 ST    @11,LISTAD                                          0118
         C     @11,MODCT                                           0118
         BNH   @DL00114                                            0118
*CHKLPA:                                                           0119
*                                                                  0119
*       /*************************************************************/
*       /*                                                           */
*       /* SEARCH LPA TO SEE IF MODULE IS IN THE LINK PACK AREA      */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0119
*       SECMODNM=REQMODNM;          /* SAVE MODULE NAME       @Y02014*/
CHKLPA   MVC   SECMODNM(8),REQMODNM(REG1)                          0119
*       SAVER1=REG1;                /* SAVE REGISTER 1        @Y02014*/
         ST    REG1,SAVER1                                         0120
*       LPAPTR=ADDR(LPATBL);        /* INITIALIZE TABLE PTR   @Y02014*/
         LA    @11,LPATBL                                          0121
         ST    @11,LPAPTR                                          0121
*       IF LPACT^=0 THEN            /* CHECK IF ANY NAMES IN TABLE 0122
*                                                             @Y02014*/
         L     @11,LPACT                                           0122
         LTR   @11,@11                                             0122
         BZ    @RF00122                                            0122
*         DO I=1 TO LPACT;          /* YES - SEARCH TABLE FOR MOD  0123
*                                                             @Y02014*/
         LA    @11,1                                               0123
         B     @DE00123                                            0123
@DL00123 DS    0H                                                  0124
*           IF REQMODNM=LPAMODNM THEN/* MODULE FOUND IN TAB   @Y02014*/
         L     @11,LPAPTR                                          0124
         CLC   REQMODNM(8,REG1),LPAMODNM(@11)                      0124
         BNE   @RF00124                                            0124
*             DO;                   /*                        @Y02014*/
*               REG1=LPAEP;         /* GET ENTRY POINT ADDRESS     0126
*                                                             @Y02014*/
         L     REG1,LPAEP(,@11)                                    0126
*               RFY                                                0127
*                 REG15 RSTD;       /*                        @Y02014*/
*               REG15=0;            /* SET RETURN CODE        @Y02014*/
         SLR   REG15,REG15                                         0128
*               GOTO SEGRET;        /* RETURN TO CALLER OZ12026      */
         B     SEGRET                                              0129
*               RFY                                                0130
*                 REG15 UNRSTD;     /*                        @Y02014*/
*             END;                  /*                        @Y02104*/
*           ELSE                                                   0132
*             LPAPTR=LPAPTR+LENGTH(LPAMOD);/* UPDATE POINTER TO TABLE
*                                      ENTRY                  @Y02014*/
@RF00124 LA    @11,12                                              0132
         AL    @11,LPAPTR                                          0132
         ST    @11,LPAPTR                                          0132
*         END;                      /*                        @Y02014*/
         LA    @11,1                                               0133
         AL    @11,I                                               0133
@DE00123 ST    @11,I                                               0133
         C     @11,LPACT                                           0133
         BNH   @DL00123                                            0133
*       LPAPTR=ADDR(LPATBL)+LPACT*LENGTH(LPAMOD);/* GET NEXT       0134
*                                      AVAILABLE SLOT IN TABLE     0134
*                                                             @Y02014*/
@RF00122 LA    @11,LPATBL                                          0134
         L     @03,LPACT                                           0134
         MH    @03,@CH00100                                        0134
         ALR   @11,@03                                             0134
         ST    @11,LPAPTR                                          0134
*       RFY                                                        0135
*         REG3 RSTD;                /*                        @Y02014*/
*       REG3=CVTPTR;                /* SET UP POINTER TO CVT  @Y02014*/
*                                                                  0136
         L     @11,CVTPTR                                          0136
         LR    REG3,@11                                            0136
*       /*************************************************************/
*       /*                                                           */
*       /* SEARCH LINK PACK AREA CDE CHAIN FOR SECONDARY MODULE      */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0137
*       CDEQUEUE=CVTQLPAQ;          /* GET ADDRESS OF LINK PACK AREA
*                                      CDE QUEUE              @Y02014*/
         L     CDEQUEUE,CVTQLPAQ(,@11)                             0137
*       NAMEPTR=REG1;               /* SET REG 9 TO ADDRESS OF MODULE
*                                      NAME FOR INPUT TO IEAQCDSR  0138
*                                                             @Y02014*/
         LR    NAMEPTR,REG1                                        0138
*       RFY                                                        0139
*         CDENTPTR RSTD;            /*                        @Y02014*/
*       CALL IEAQCDSR;              /* SEARCH CDE CHAIN FOR MODULE 0140
*                                      RETURN TO R14 IF FOUND RETURN
*                                      TO R14+4 IF NOT FOUND  @Y02014*/
         L     @14,CVTPTR                                          0140
         L     @15,CVTQCDSR(,@14)                                  0140
         BALR  @14,@15                                             0140
*       GEN FLOWS(READLPDE) NOSETS NOREFS SEQFLOW(SPACE);/* DIRECT-
*                                      IONS FOR COMPILER      @Y02014*/
         SPACE
*       GO TO MODFND1;              /* NAME FOUND, GO RECORD  @Y02014*/
*                                                                  0142
         B     MODFND1                                             0142
*       /*************************************************************/
*       /*                                                           */
*       /* SEARCH LPDE CHAIN FOR SECONDARY MODULE             @Y02014*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0143
*READLPDE:                                                         0143
*       CALL IEAVVMSR;              /* SEARCH LPDE CHAIN FOR MODULE
*                                      RETURN TO R14 IF FOUND, R14+4
*                                      IF NOT FOUND           @Y02014*/
READLPDE L     @14,CVTPTR                                          0143
         L     @15,CVTLPDSR(,@14)                                  0143
         BALR  @14,@15                                             0143
*       GEN FLOWS(READERR) NOSETS NOREFS SEQFLOW(SPACE);/* DIRECT- 0144
*                                      IONS FOR COMPILER      @Y02014*/
         SPACE
*       GOTO MODFND2;               /* NAME FOUND, GO RECORD  @Y02014*/
         B     MODFND2                                             0145
*READERR:                                                          0146
*       REG1=SAVER1;                /* RESTORE REGISTER 1     @Y02014*/
READERR  L     REG1,SAVER1                                         0146
*       GO TO BLDL;                 /* MODULE NOT IN LINK PACK AREA
*                                      GO SEE IF IT CAN BE LOADED  0147
*                                                             @Y02014*/
         B     BLDL                                                0147
*MODFND1:                                                          0148
*       LPAEP=CDENTPT;              /* NAME FOUND IN CDE CHAIN - GET
*                                      ADDRESS OF BEGINNING OF MODULE
*                                      FROM CDE               @Y02014*/
MODFND1  L     @15,LPAPTR                                          0148
         MVC   LPAEP(4,@15),CDENTPT(CDENTPTR)                      0148
*       RFY                                                        0149
*         CDENTPTR UNRSTD;          /*                        @Y02014*/
*       GOTO MODSAVE;               /* GO STORE ADDRESS       @Y02014*/
         B     MODSAVE                                             0150
*MODFND2:                           /* NAME FOUND IN LPDE CHAIN    0151
*                                                             @Y02014*/
*       LPDEPTR=NAMEREG0;           /* SET UP PTR TO LPDE FOR MODULE
*                                                             @Y02014*/
MODFND2  ST    NAMEREG0,LPDEPTR                                    0151
*       LPAEP=LPDENTP;              /* REG0 POINTS TO LPDE THAT    0152
*                                      CONTAINS MODULE ENTRY POINT 0152
*                                                             @Y02014*/
         L     @11,LPDEPTR                                         0152
         L     @15,LPAPTR                                          0152
         MVC   LPAEP(4,@15),LPDENTP(@11)                           0152
*MODSAVE:                                                          0153
*       LPAMODNM=SECMODNM;          /* PUT NAME OF MODULE IN TABLE 0153
*                                                             @Y02014*/
MODSAVE  L     @11,LPAPTR                                          0153
         MVC   LPAMODNM(8,@11),SECMODNM                            0153
*       IF LPACT<9 THEN             /* MAKE SURE DONT GO BEYOND TABLE
*                                      END                    @Y02014*/
         L     @11,LPACT                                           0154
         CH    @11,@CH00978                                        0154
         BNL   @RF00154                                            0154
*         LPACT=LPACT+1;            /* INCREMENT COUNT OF ENTRIES IN
*                                      TABLE                  @Y02014*/
         AL    @11,@CF00034                                        0155
         ST    @11,LPACT                                           0155
*       REG1=ADDR(SECMODNM);        /* GET PTR TO MOD NAME    @Y02014*/
@RF00154 LA    REG1,SECMODNM                                       0156
*       GEN;                                                       0157
*                                                          /* @Y02014*/
         LOAD EPLOC=(REG1)
*       REG1=LPAEP;                 /* GET MODULE ENTRY POINT @Y02014*/
         L     @11,LPAPTR                                          0158
         L     REG1,LPAEP(,@11)                                    0158
*       RFY                                                        0159
*         REG15 RSTD;               /*                        @Y02014*/
*       REG15=0;                    /* SET RETURN CODE        @Y02014*/
         SLR   REG15,REG15                                         0160
*       GOTO SEGRET;                /* RETURN TO CALLER OZ12026      */
         B     SEGRET                                              0161
*       RFY                                                        0162
*         REG15 UNRSTD;             /*                        @Y02014*/
*       RFY                                                        0163
*         REG3 UNRSTD;              /*                        @Y02014*/
*     END SECNLOAD;                 /*                        @Y02014*/
*   LOADSEC='0'B;                   /* INDICATE SEGEMENT LOAD        */
@RF00094 NI    LOADSEC,B'01111111'                                 0165
*   DO LOADCT=1 TO 5;               /* COUNT NODES IN REQUESTED    0166
*                                      S21014 PATH S21014            */
         LA    @11,1                                               0166
         ST    @11,LOADCT                                          0166
@DL00166 DS    0H                                                  0167
*     IF REQFLGS(LOADCT,1)='1'B THEN                               0167
         LR    @03,@11                                             0167
         SLA   @03,2                                               0167
         L     @15,LISTBASE                                        0167
         ALR   @15,@03                                             0167
         AL    @15,@CF01273                                        0167
         TM    REQFLGS(@15),B'10000000'                            0167
         BO    @RT00167                                            0167
*       GO TO WHATSIN;              /* S21014                        */
*   END;                                                           0169
*                                                                  0169
         AL    @11,@CF00034                                        0169
         ST    @11,LOADCT                                          0169
         CH    @11,@CH00123                                        0169
         BNH   @DL00166                                            0169
*/*  COMPARE SEGMENT TO INCORE LIST TO SEE WHAT MODULES ARE    S21014
*    ALREADY IN CORE                                           S21014*/
*                                                                  0170
*WHATSIN:                                                          0170
*   IF MODCT=0 THEN                                                0170
WHATSIN  L     @11,MODCT                                           0170
         LTR   @11,@11                                             0170
         BNZ   @RF00170                                            0170
*     DO;                           /* BYPASS COMPARE S21014 IF THIS
*                                      IS FIRST LOAD S21014          */
*       LOADPT=1;                   /* INIT AVAILABLE SLOT S21014 IN
*                                      LIST TO 1 S21014              */
         MVC   LOADPT(4),@CF00034                                  0172
*       GO TO BLDL;                 /* GO FIND MODULES S21014        */
         B     BLDL                                                0173
*     END;                          /* S21014                        */
*   IF MODCT>LOADCT THEN            /* GET MIN OF LOADCT AND S21014  */
@RF00170 L     @11,LOADCT                                          0175
         C     @11,MODCT                                           0175
         BNL   @RF00175                                            0175
*     J=LOADCT;                     /* MODCT FOR LIMIT OF S21014     */
         ST    @11,J                                               0176
*   ELSE                                                           0177
*     J=MODCT;                      /* COMPARE S21014                */
         B     @RC00175                                            0177
@RF00175 MVC   J(4),MODCT                                          0177
*   DO LISTAD=1 TO J;               /* S21014                        */
@RC00175 LA    @11,1                                               0178
         B     @DE00178                                            0178
@DL00178 DS    0H                                                  0179
*     CALL INQ;                     /* GET A LIST ENTRY S21014       */
         BAL   @14,INQ                                             0179
*     IF LOADNAME(6:8)^=REQNAME(LISTAD) THEN                       0180
         L     @11,LISTAD                                          0180
         LR    @03,@11                                             0180
         SLA   @03,2                                               0180
         L     @15,LISTBASE                                        0180
         ALR   @15,@03                                             0180
         AL    @15,@CF01274                                        0180
         CLC   LOADNAME+5(3,REG2),REQNAME-1(@15)                   0180
         BE    @RF00180                                            0180
*       DO;                         /* S21014                        */
*         LOADPT=LISTAD;            /* POINT TO NOW AVAILABLE S21014
*                                      UPDATE NUMBER OF MODULES TO BE
*                                      LOADES BY S21014 NUMBER     0182
*                                      ALREADY IN S21014             */
         ST    @11,LOADPT                                          0182
*         LOADCT=LOADCT-(LISTAD-1); /* S21014                        */
         LCR   @11,@11                                             0183
         AL    @11,@CF00034                                        0183
         AL    @11,LOADCT                                          0183
         ST    @11,LOADCT                                          0183
*         GO TO BLDL;                                              0184
         B     BLDL                                                0184
*       END;                                                       0185
*   END;                                                           0186
*                                                                  0186
@RF00180 LA    @11,1                                               0186
         AL    @11,LISTAD                                          0186
@DE00178 ST    @11,LISTAD                                          0186
         C     @11,J                                               0186
         BNH   @DL00178                                            0186
*   /*****************************************************************/
*   /*                                                               */
*   /* FALL OUT MEANS IN-CORE PATH IS OK                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0187
*   ALLMODIN='1'B;                  /* SHOW NO MODULES NEED LOADING  */
         OI    ALLMODIN,B'00010000'                                0187
*   GO TO CKEDITIN;                 /* DO ADJUST OR INIT       X01980*/
         B     CKEDITIN                                            0188
*BLDL:                                                             0189
*   REG2=(LOADCT*64)+8;             /* COMPUTE LENGTH OF BLDL LIST 0189
*                                      FOR GETMAIN                   */
BLDL     L     REG2,LOADCT                                         0189
         SLA   REG2,6                                              0189
         AH    REG2,@CH00037                                       0189
*   GEN(GETMAIN R,LV=(R2));         /* GET STORAGE FOR BLDL LIST     */
         GETMAIN R,LV=(R2)
*   BLDLBASE=REG1;                  /* BASE THE GOTTEN CORE          */
*                                                                  0191
         ST    REG1,BLDLBASE                                       0191
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING CODE FORMATS TO BLDL LIST                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0192
*   BLDLCT=LOADCT;                  /* STORE NUMBER OF ENTRIES       */
         L     @11,BLDLBASE                                        0192
         MVC   BLDLCT(2,@11),LOADCT+2                              0192
*   BENTRLN=64;                     /* LENGTH IS ALWAYS 64 FOR LOAD
*                                      MODULES                       */
         MVC   BENTRLN(2,@11),@CH00970                             0193
*   Q=BLDLBASE+4;                   /* POINT TO FIRST ENTRY IN BLDL
*                                      LIST                          */
         AH    @11,@CH00051                                        0194
         ST    @11,Q                                               0194
*   DO J=1 TO LOADCT;                                              0195
         LA    @11,1                                               0195
         B     @DE00195                                            0195
@DL00195 DS    0H                                                  0196
*     IF LOADSEC='1'B THEN                                         0196
         TM    LOADSEC,B'10000000'                                 0196
         BNO   @RF00196                                            0196
*       DO;                                                        0197
*         REG1=-LISTBASE;           /* POINT TO MODULE NAME          */
         L     REG1,LISTBASE                                       0198
         LCR   REG1,REG1                                           0198
*         MODNAME=REQMODNM;                                        0199
         L     @11,Q                                               0199
         MVC   MODNAME(8,@11),REQMODNM(REG1)                       0199
*       END;                                                       0200
*     ELSE                                                         0201
*       DO;                         /* FORM MODULE NAME FROM LAST 3
*                                      CHARACTERS S21014 IN        0201
*                                      DESCRIPTOR S21014             */
         B     @RC00196                                            0201
@RF00196 DS    0H                                                  0202
*         NAMEAREA(6:8)=REQNAME(J+LOADPT-1);/* S21014                */
         L     @11,J                                               0202
         AL    @11,LOADPT                                          0202
         SLA   @11,2                                               0202
         L     @03,LISTBASE                                        0202
         ALR   @03,@11                                             0202
         AL    @03,@CF01276                                        0202
         MVC   NAMEAREA+5(3),REQNAME-1(@03)                        0202
*         MODNAME=NAMEAREA;         /* STORE MODULE NAME IN BLDL LIST*/
         L     @11,Q                                               0203
         MVC   MODNAME(8,@11),NAMEAREA                             0203
*       END;                                                       0204
*     Q=Q+BENTRLN;                  /* STEP TO NEXT ENTRY            */
@RC00196 L     @11,BLDLBASE                                        0205
         LH    @11,BENTRLN(,@11)                                   0205
         AL    @11,Q                                               0205
         ST    @11,Q                                               0205
*   END;                                                           0206
         LA    @11,1                                               0206
         AL    @11,J                                               0206
@DE00195 ST    @11,J                                               0206
         C     @11,LOADCT                                          0206
         BNH   @DL00195                                            0206
*   REG2=BLDLBASE;                  /* POINT TO LIST FOR BLDL S21014 */
         L     REG2,BLDLBASE                                       0207
*   GEN;                                                           0208
         BLDL  0,(REG2)
         B     *+4(15)             BRANCH '1'B RETURN CODE FROM BLDL
         B     BLDLOK              0 - ALL ENTRIES IN LIST WERE FOUND
         B     NOTFOUND            4 - SOME MODULE NOT FOUND
         B     BLDLIOER            8 - I/O ERROR '1'B BLDL
*BLDLOK:                                                           0209
*   IF LOADSEC='0'B THEN            /* IF THIS IS A SEGMENT LOAD     */
BLDLOK   TM    LOADSEC,B'10000000'                                 0209
         BNZ   @RF00209                                            0209
*     DO;                                                          0210
*       IF XNAME(1)^=' ' THEN       /* AND AN EXIT MOD. IS IN        */
         CLI   XNAME,C' '                                          0211
         BE    @RF00211                                            0211
*         DO;                       /* DELETE THE EXIT MODULE        */
*           GEN;                                                   0213
          DELETE  EPLOC=XNAME
*           XNAME=' ';              /* BLANK OUT EXIT MODULE NAME    */
         MVI   XNAME+1,C' '                                        0214
         MVC   XNAME+2(6),XNAME+1                                  0214
         MVI   XNAME,C' '                                          0214
*           EXITSIZE=0;             /* SET EXIT MOD SIZE = ZERO      */
         SLR   @11,@11                                             0215
         ST    @11,EXITSIZE                                        0215
*         END;                                                     0216
*       GOTO OK2LOAD;                                              0217
         B     OK2LOAD                                             0217
*     END;                                                         0218
*   Q=BLDLBASE+4;                   /* SET UP BASE FOR BLDL LIST     */
@RF00209 LA    @11,4                                               0219
         L     @03,BLDLBASE                                        0219
         ALR   @03,@11                                             0219
         ST    @03,Q                                               0219
*   IF MODLEN>10240 THEN            /* DOES MOD. EXCEED ITS LIMIT    */
         CLC   MODLEN(3,@03),@CF01160+1                            0220
         BNH   @RF00220                                            0220
*     DO;                           /* YES                           */
*       RESPECIFY                                                  0222
*         REG15 RESTRICTED;         /*                         Y02006*/
*       REG15=4;                    /* SET MODULE TOO LARGE CODE     */
         LR    REG15,@11                                           0223
*       GOTO SETBR14;               /* SET DUMMY INTERFACE           */
         B     SETBR14                                             0224
*       RESPECIFY                                                  0225
*         REG15 UNRSTD;             /*                         Y02006*/
*     END;                                                         0226
*                                                                  0226
*   /*****************************************************************/
*   /*                                                               */
*   /* IF THIS IS A (NON EXIT) SECONDARY LOAD SEE IF LIMIT IS REACHED*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0227
*   IF LOADEXIT='0'B THEN                                          0227
@RF00220 TM    LOADEXIT,B'00100000'                                0227
         BNZ   @RF00227                                            0227
*     DO;                                                          0228
*       SMODSIZE=SMODSIZE+MODLEN;   /* ADD SIZE OF MOD. TO TOTAL   0229
*                                      SECONDARY MOD. SIZE           */
         L     @11,Q                                               0229
         MVC   @ZT00001+1(3),MODLEN(@11)                           0229
         L     @11,@ZT00001                                        0229
         AL    @11,SMODSIZE                                        0229
         ST    @11,SMODSIZE                                        0229
*       IF SMODSIZE>LIMIT THEN                                     0230
         C     @11,LIMIT                                           0230
         BNH   @RF00230                                            0230
*         DO;                                                      0231
*           CALL NOSPACE;           /* DELETE ALL SEC. MODULES       */
         BAL   @14,NOSPACE                                         0232
*           SMODSIZE=MODLEN;        /* GET LENGTH OF MOD. TO LOAD    */
         L     @11,Q                                               0233
         MVC   @ZT00001+1(3),MODLEN(@11)                           0233
         L     @11,@ZT00001                                        0233
         ST    @11,SMODSIZE                                        0233
*         END;                                                     0234
*     END;                                                         0235
*                                                                  0235
@RF00230 DS    0H                                                  0236
*   /*****************************************************************/
*   /*                                                               */
*   /* BRANCH AROUND DELETE LOOP IF FIRST LOAD                 S21014*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0236
*OK2LOAD:                                                          0236
*   IF MODCT=0 THEN                                                0236
@RF00227 DS    0H                                                  0236
OK2LOAD  L     @11,MODCT                                           0236
         LTR   @11,@11                                             0236
         BZ    @RT00236                                            0236
*     GO TO LOADIN;                 /* S21014                        */
*                                                                  0237
*   /*****************************************************************/
*   /*                                                               */
*   /* IN CASE OF 2-ARY LOAD, SET NEXT AVAILABLE LIST POONTER  S21014*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0238
*   IF LOADSEC='1'B THEN                                           0238
         TM    LOADSEC,B'10000000'                                 0238
         BNO   @RF00238                                            0238
*     DO;                           /* S21014                        */
*       LOADPT=MODCT+1;             /* NEXT AVAILABLE LIST S21014    */
         AL    @11,@CF00034                                        0240
         ST    @11,LOADPT                                          0240
*       GO TO LOADIN;               /* BRANCH AROUND DELETE S21014 0241
*                                      LOOP S21014                   */
         B     LOADIN                                              0241
*     END;                          /* S21014                        */
*/*  READY TO LOAD MODULES -                                   S21014
*    FIRST DELETE THOSE WHICH ARE NOT NEEDED.                  S21014
*    LOADPT TO BE LESS THAN OR EQUAL TO MODCT IF MODULES ARE   S21014
*    TO BE DELETED, OTHERWISE DO LOOP WILL NOT EXECUTE.        S21014*/
*                                                                  0243
*LOADIN:                                                           0243
*   IF LOADEXIT='1'B THEN           /* PROCESS EXIT LOADING        0243
*                                      DIFFERENTLY                   */
@RF00238 DS    0H                                                  0243
LOADIN   TM    LOADEXIT,B'00100000'                                0243
         BO    @RT00243                                            0243
*     GOTO XLODONLY;                                               0244
*   DO LISTAD=MODCT TO LOADPT BY-1; /* X01980                        */
         L     @11,MODCT                                           0245
         ST    @11,LISTAD                                          0245
         B     @DE00245                                            0245
@DL00245 DS    0H                                                  0246
*     CALL INQ;                     /* SET UP REG 2 FOR CALL TO    0246
*                                      S21104 INQ POINTS TO LISTAD 0246
*                                      S21104 ENTRY OF IN-CORE TABLE
*                                      S21104                        */
         BAL   @14,INQ                                             0246
*     CALL DELETE;                  /* DELETE MOD AT LISTAD S21014   */
         BAL   @14,DELETE                                          0247
*   END;                            /* S21014                        */
         SLR   @11,@11                                             0248
         BCTR  @11,0                                               0248
         AL    @11,LISTAD                                          0248
         ST    @11,LISTAD                                          0248
@DE00245 C     @11,LOADPT                                          0248
         BNL   @DL00245                                            0248
*   IF LOADSEC='0'B THEN            /* IF SEGMENT LOAD               */
         TM    LOADSEC,B'10000000'                                 0249
         BNZ   @RF00249                                            0249
*     DO;                                                          0250
*       SMODSIZE=0;                 /* RESET TOTAL SIZE OF SECONDARY
*                                      MOD. IN CORE TO ZERO          */
         SLR   @11,@11                                             0251
         ST    @11,SMODSIZE                                        0251
*CKEDITIN:                          /*                         X01980*/
*       IF SEGRD='1'B THEN          /* IF INIT READ FOR EDIT OZ12026 */
CKEDITIN TM    SEGRD(COMBASE),B'00000100'                          0252
         BNO   @RF00252                                            0252
*         DO;                       /* OZ12026                       */
*           SEGSAVE=ERRADDR;        /* SAVE PREVIOUS ADDRESS OZ12026 */
         MVC   SEGSAVE(4),ERRADDR(COMBASE)                         0254
*           ERRADDR=ADDR(SEGERAD);  /* HAVE ERROR RETURN HEREOZ12026 */
         LA    @11,SEGERAD                                         0255
         ST    @11,ERRADDR(,COMBASE)                               0255
*         END;                      /* OZ12026                       */
*       IF EDITSW='1'B THEN         /* IF EDIT IS NOT IN       Y02006*/
@RF00252 TM    EDITSW(COMBASE),B'00001000'                         0257
         BO    @RT00257                                            0257
*         GOTO LOAD;                /* PROCESS,ISSUE BRREAD INIT   0258
*                                                              Y02006*/
*       GEN REFS(BRRDINIT);                                        0259
NOEDIT    BRREAD INIT              GET BUFFERS AND INITIALIZE
*     END;                                                         0260
*   IF SEGRD='1'B THEN              /* IF INIT READ FOR EDIT OZ12026 */
@RF00249 TM    SEGRD(COMBASE),B'00000100'                          0261
         BNO   @RF00261                                            0261
*     DO;                           /* READ WAS GOOD OZ12026         */
*       ERRADDR=SEGSAVE;            /* RESTORE ERRADDR OZ12026       */
         MVC   ERRADDR(4,COMBASE),SEGSAVE                          0263
*       SEGRD='0'B;                 /* TURN OFF ERROR FLAG OZ12026   */
         NI    SEGRD(COMBASE),B'11111011'                          0264
*     END;                          /* OZ12026                       */
*LOAD:                                                             0266
*   IF ALLMODIN='1'B THEN           /* IF NO LOADING RETURN TO CALLER*/
@RF00261 DS    0H                                                  0266
LOAD     TM    ALLMODIN,B'00010000'                                0266
         BO    @RT00266                                            0266
*     GO TO INCORE;                 /*                         X01980*/
*   Q=BLDLBASE+4;                   /* POINT TO BLDL LIST S21014     */
         LA    @11,4                                               0268
         AL    @11,BLDLBASE                                        0268
         ST    @11,Q                                               0268
*   RESPECIFY                                                      0269
*     REG3 RESTRICTED;              /* Y02006                        */
*   DO J=1 TO LOADCT;               /* LOOP TO LOAD MODULES S21014   */
         LA    @11,1                                               0270
         B     @DE00270                                            0270
@DL00270 DS    0H                                                  0271
*     LISTAD=LOADPT+(J-1);          /* POINT TO AVAILABLE ENTRY    0271
*                                      S21014                        */
         BCTR  @11,0                                               0271
         AL    @11,LOADPT                                          0271
         ST    @11,LISTAD                                          0271
*     CALL INQ;                     /* LOCATE THE ENTRY S21014       */
         BAL   @14,INQ                                             0272
*     LOADNAME=MODNAME;             /* STORE MODULE NAME S21014 IN 0273
*                                      IN-CORE LIST S21014           */
         L     @11,Q                                               0273
         MVC   LOADNAME(8,REG2),MODNAME(@11)                       0273
*     REG3=ADDR(LOADNAME);          /* S21014                        */
         LR    REG3,REG2                                           0274
*     GEN;                                                         0275
*                                                                  0275
              LOAD  EPLOC=(R3)
              LR    R3,R0          SAVE EP ADDRESS IN REG 3
*     /***************************************************************/
*     /*                                                             */
*     /* TEST FOR LAST IN PATH OR 2-ARY LOAD, IF SO S21014 BYPASS    */
*     /* LINKING TO MODULE - DONE ONLY FOR SERVICE S21014 ROUTINES   */
*     /* S21014                                                      */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0276
*     IF J^=LOADCT THEN                                            0276
         CLC   J(4),LOADCT                                         0276
         BE    @RF00276                                            0276
*       GEN;                                                       0277
*                                   /* S21014                        */
              LR    R15,R3         EP ADDRESS TO TARGET REG    S21014
              BALR  R14,R15        LINK TO ALLOW ROUTINE         Y02006
*                                  TO SET-UP                   S21014
*       LOADEP=REG3;                /* SET EP ADDRESS IN LIST S21014 */
@RF00276 ST    REG3,LOADEP(,REG2)                                  0278
*     Q=Q+BENTRLN;                  /* UPDATE BLDL LIST ENTRY S21014
*                                      POINTER S21014                */
         L     @11,BLDLBASE                                        0279
         LH    @11,BENTRLN(,@11)                                   0279
         AL    @11,Q                                               0279
         ST    @11,Q                                               0279
*     MODCT=MODCT+1;                /* UPDATE IN-CORE COUNT S21014   */
         LA    @11,1                                               0280
         AL    @11,MODCT                                           0280
         ST    @11,MODCT                                           0280
*   END;                            /* S21014                        */
         LA    @11,1                                               0281
         AL    @11,J                                               0281
@DE00270 ST    @11,J                                               0281
         C     @11,LOADCT                                          0281
         BNH   @DL00270                                            0281
*/*  LOADING COMPLETE                                          S21014*/
*                                                                  0282
*LOADDONE:                                                         0282
*   IF LOADSEC='0'B THEN            /* S21014                        */
LOADDONE TM    LOADSEC,B'10000000'                                 0282
         BNZ   @RF00282                                            0282
*     SECLOAD=MODCT+1;              /* IN CASE OF SEGMENT LOAD S21014
*                                      UPDATE POSITION OF 2-ARY    0283
*                                      S21014 MODULES S21014         */
         LA    @11,1                                               0283
         AL    @11,MODCT                                           0283
         ST    @11,SECLOAD                                         0283
*   INQCODE=4;                      /* SET INQ FUNCTION CODE TO    0284
*                                      S21014 DEQUEUE UNUSED LIST  0284
*                                      S21014 BLOCKS S21014          */
@RF00282 MVI   INQCODE,X'04'                                       0284
*   CALL INQ;                       /* GO CLEAN UP LIST S21014       */
         BAL   @14,INQ                                             0285
*   INQCODE=0;                      /* RESTORE INQ FUNCTION S21014 0286
*                                      CODE TO REFERENCE S21014      */
         MVI   INQCODE,X'00'                                       0286
*   RESPECIFY                                                      0287
*     REG3 UNRESTRICTED;            /*                         Y02006*/
*   CALL FREEBLDL;                  /* GO FREE BLDL LIST             */
*                                                                  0288
         BAL   @14,FREEBLDL                                        0288
*   /*****************************************************************/
*   /*                                                               */
*   /* REG 2 STILL CONTAINS POINTER TO LAST ENTRY IN LIST      S21014*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0289
*INCORE:                                                           0289
*   REG1=LOADEP;                    /* RETURN EP ADDRESS S21014      */
INCORE   L     REG1,LOADEP(,REG2)                                  0289
*   RESPECIFY                                                      0290
*     REG15 RESTRICTED;             /*                         Y02006*/
*   REG15=0;                        /* GIVE CLEAN RETURN CODE        */
         SLR   REG15,REG15                                         0291
*   RESPECIFY                                                      0292
*     REG15 UNRSTD;                 /*                         Y02006*/
*   GOTO SEGRET;                    /* RETURN TO CALLER OZ12026      */
         B     SEGRET                                              0293
*/********************************************************************/
*/* LOAD THE EXIT MODULE AND BUILD ITS 'LIST'                        */
*/********************************************************************/
*                                                                  0294
*XLODONLY:                                                         0294
*   REG1=-LISTBASE;                 /* POINT TO MODULE NAME          */
XLODONLY L     REG1,LISTBASE                                       0294
         LCR   REG1,REG1                                           0294
*   XNAME=REQMODNM;                 /* MOVE NAME TO LIST             */
         MVC   XNAME(8),REQMODNM(REG1)                             0295
*   GEN;                                                           0296
          LOAD  EPLOC=(REG1)  LOAD THE MODULE
          ST   R0,XENTPT  PUT ENTRY POINT IN LIST
*   CALL FREEBLDL;                  /* FREE BLDL LIST STORAGE        */
         BAL   @14,FREEBLDL                                        0297
*   EXITSIZE=10240;                 /* SET UP EDIT EXIT MOD. SIZE    */
         MVC   EXITSIZE(4),@CF01160                                0298
*XITENPT:                                                          0299
*   REG1=XENTPT;                    /* GET MODULE ENTRY POINT        */
XITENPT  L     REG1,XENTPT                                         0299
*   RESPECIFY                                                      0300
*     REG15 RESTRICTED;             /*                         Y02006*/
*   REG15=0;                        /* SHOW GOOD COMPLETION          */
         SLR   REG15,REG15                                         0301
*   GOTO SEGRET;                    /* RETURN TO CALLER OZ12026      */
         B     SEGRET                                              0302
*                                                                  0303
*/********************************************************************/
*/*                                                                  */
*/*   THE FOLLOWING ROUTINES ARE ERROR HANDLERS.  EACH ROUTINE       */
*/*   PRINTS AN APPROPRIATE ERROR MESSAGE AND SETS UP A BR 14        */
*/*   INSTRUCTION AS THE CURRENT EXECUTOR.  RETURN TO CALLER   S21014*/
*/*   CAUSES NOP OF FUNCTION.                                  S21014*/
*/*                                                                  */
*/********************************************************************/
*/*  MODULE NOT FOUND BY BLDL                                        */
*                                                                  0303
*   GEN(USING SYNTAX,R15);          /* S21014                        */
         USING SYNTAX,R15
*NOTFOUND:                                                         0304
*   NOSTDMG='1'B;                   /* INDICATE AMD165I NOT Y02006 0304
*                                      REQUIRED S21014               */
NOTFOUND OI    NOSTDMG(COMBASE),B'00010000'                        0304
*   REG15=ASYNTAX;                  /* POINT TO MESSAGE WRITER S21014*/
         L     REG15,ASYNTAX(,COMBASE)                             0305
*   CALL SYNTAXB;                   /* ISSUE MESSAGE AMD177I S21014  */
         BAL   @14,SYNTAXB                                         0306
*   Q=BLDLBASE+4;                   /* POINT TO BLDL LIST            */
         LA    @14,4                                               0307
         AL    @14,BLDLBASE                                        0307
         ST    @14,Q                                               0307
*   DO J=1 TO BLDLCT;               /* PICK UP MODULE NAMES OF     0308
*                                      MODULES NOT FOUND             */
         LA    @14,1                                               0308
         B     @DE00308                                            0308
@DL00308 DS    0H                                                  0309
*     IF R=0 THEN                                                  0309
         L     @14,Q                                               0309
         CLI   R(@14),0                                            0309
         BNE   @RF00309                                            0309
*       DO;                         /* RECORD POINTER 0 MEANS NOT  0310
*                                      FOUND                         */
*         TEXT=MODNAME;             /* INDICATE MESSAGE AMD165I NOT
*                                      REQUIRED S21014               */
         L     @11,SYNMSGA(,COMBASE)                               0311
         L     @11,AMDPRP02+8(,@11)                                0311
         MVC   TEXT+12(8,@11),MODNAME(@14)                         0311
*         NOSTDMG='1'B;             /*                         Y02006*/
         OI    NOSTDMG(COMBASE),B'00010000'                        0312
*         REG15=ASYNTAX;            /* GET EP ADDR MSG WRITER S21014 */
         L     REG15,ASYNTAX(,COMBASE)                             0313
*         CALL SYNTAXC;             /* ISSUE NOT-FOUND MESSAGE S21014*/
         BAL   @14,SYNTAXC                                         0314
*       END;                                                       0315
*     Q=Q+BENTRLN;                  /* STEP TO NEXT ENTRY            */
@RF00309 L     @14,BLDLBASE                                        0316
         LH    @14,BENTRLN(,@14)                                   0316
         AL    @14,Q                                               0316
         ST    @14,Q                                               0316
*   END;                                                           0317
         LA    @14,1                                               0317
         AL    @14,J                                               0317
@DE00308 ST    @14,J                                               0317
         L     @11,BLDLBASE                                        0317
         CH    @14,BLDLCT(,@11)                                    0317
         BNH   @DL00308                                            0317
*   CALL PRNTMSG;                   /* PRINT MESSAGE AMD180I S21014  */
         BAL   @14,PRNTMSG                                         0318
*   REG15=8;                        /* SET NOT-FOUND RETURN C. S21014*/
         LA    REG15,8                                             0319
*   GO TO SETBR14;                  /* S21014                        */
         B     SETBR14                                             0320
*/*  I/O ERROR ON BLDL                                               */
*                                                                  0321
*SEGERAD:                           /* EDIT READ ERROR RETURNOZ12026 */
*   GEN;                                                           0321
SEGERAD  DS    0H                                                  0321
*                                  /* MUST RESTORE REGISTERS OZ12026
         BALR  R1,0                ESTABLISH BASE TO USE     OZ12026
         USING *,R1                ESTABLISH BASE TO USE     OZ12026
         LA    R13,@SA00001        GET SAVE AREA ADDRESS     OZ12026
         LM    R0,R12,@SA00001+20  LOAD REGS FROM SAVE AREA  OZ12026
         DROP  R1                  RELEASE REG 01 AS BASE    OZ12026*/
*   GOTO LOAD;                      /* CONTINUE HOUSEKEEPING OZ12026 */
         B     LOAD                                                0322
*BLDLIOER:                                                         0323
*   NOSTDMG='1'B;                   /* INDICATE AMD165I NOT Y02006 0323
*                                      REQUIRED S21014               */
BLDLIOER OI    NOSTDMG(COMBASE),B'00010000'                        0323
*   REG15=ASYNTAX;                  /* POINT TO MESSAGE WRITER S21014*/
         L     REG15,ASYNTAX(,COMBASE)                             0324
*   CALL SYNTAXD;                   /* ISSUE MESSAGE AMD178I S21014  */
         BAL   @14,SYNTAXD                                         0325
*   CALL PRNTMSG;                   /* PRINT MESSAGE AMD180I S21014  */
         BAL   @14,PRNTMSG                                         0326
*   REG15=12;                       /* SET BLDL I/O ERROR CODE S21014*/
         LA    REG15,12                                            0327
*   GO TO SETBR14;                                                 0328
         B     SETBR14                                             0328
*   RESPECIFY                                                      0329
*     REG15 UNRSTD;                 /*                         Y02006*/
*SETBR14:                                                          0330
*   REG1=ADDR(BR14);                /* POINT TO BR 14 INST. S21014   */
SETBR14  LA    REG1,BR14                                           0330
*   GOTO SEGRET;                    /* RETURN TO CALLER NOP OZ12026
*                                      EXECUTOR                      */
         B     SEGRET                                              0331
*   GEN;                                                           0332
*** NO-OP FUNCTION OF EXECUTOR  ***                             S21014
BR14     LA   R15,4                   SET ERROR RETURN CODE    S21014
         BR   R14                     RETURN TO CALLER          Y02006
*SEGRET:                            /* RETURN TO CALLER CODE OZ12026 */
*   IF SEGRD='1'B THEN              /* EDIT READ ERROR ON OZ12026    */
SEGRET   TM    SEGRD(COMBASE),B'00000100'                          0333
         BNO   @RF00333                                            0333
*     DO;                           /* OZ12026                       */
*       SEGRD='0'B;                 /* TURN OFF READ ERROR OZ12026   */
         NI    SEGRD(COMBASE),B'11111011'                          0335
*       ERRADDR=SEGSAVE;            /* RESTORE ERRADDR OZ12026       */
         MVC   ERRADDR(4,COMBASE),SEGSAVE                          0336
*       GEN;                                                       0337
*                                 /* BRANCH TO ERROR ADDR   OZ12026
         L     R15,ERRADDR(R12)   LOAD THE ERROR ROUTINE ADR OZ12026
         BR    R15                BRANCH TO IT              OZ12026 */
*     END;                          /* OZ12026                       */
*   RETURN;                         /* RETURN BACK TO CALLER OZ12026 */
@EL00001 L     @13,4(,@13)                                         0339
@EF00001 DS    0H                                                  0339
@ER00001 L     @14,12(,@13)                                        0339
         L     @00,20(,@13)                                        0339
         LM    @02,@12,28(@13)                                     0339
         BR    @14                                                 0339
*/********************************************************************/
*/*                                                                  */
*/*  NO ROOM IN REGION TO LOAD SECONDARY MODULE,                     */
*/*  DELETE ALL SECONDARY MODULES                                    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0340
*NOSPACE:                                                          0340
*   PROC;                                                          0340
         B     @EL00001                                            0340
NOSPACE  STM   @14,@12,@SA00002                                    0340
*   DO LISTAD=MODCT TO SECLOAD BY-1;/* S21014 LOOP TO DELETE - END OF
*                                      LIST FIRST S21014             */
         L     @11,MODCT                                           0341
         ST    @11,LISTAD                                          0341
         B     @DE00341                                            0341
@DL00341 DS    0H                                                  0342
*     CALL INQ;                     /* POINT TO MODULE ENTRY S21014  */
         BAL   @14,INQ                                             0342
*     CALL DELETE;                  /* S21014                        */
         BAL   @14,DELETE                                          0343
*   END;                            /* S21014                        */
         SLR   @11,@11                                             0344
         BCTR  @11,0                                               0344
         AL    @11,LISTAD                                          0344
         ST    @11,LISTAD                                          0344
@DE00341 C     @11,SECLOAD                                         0344
         BNL   @DL00341                                            0344
*   RETURN;                                                        0345
@EL00002 DS    0H                                                  0345
@EF00002 DS    0H                                                  0345
@ER00002 LM    @14,@12,@SA00002                                    0345
         BR    @14                                                 0345
*   END NOSPACE;                                                   0346
*PRNTMSG:                                                          0347
*   PROC;                           /* S21014                        */
PRNTMSG  STM   @14,@12,@SA00003                                    0347
*   RESPECIFY                                                      0348
*    (REG1,                                                        0348
*     REG2,                                                        0348
*     COMBASE) RESTRICTED;          /*                         Y02006*/
*   REG2=Q-BENTRLN;                 /* POINT TO MODULE CAUSING S21014*/
         L     REG2,Q                                              0349
         L     @11,BLDLBASE                                        0349
         SH    REG2,BENTRLN(,@11)                                  0349
*   INOP=LOADNAME;                  /* STORE NAME IN MSG TEXT S21014 */
         L     @11,SYNMSGA(,COMBASE)                               0350
         L     @11,AMDPRP03+16(,@11)                               0350
         MVC   INOP+12(8,@11),LOADNAME(REG2)                       0350
*   RESPECIFY                                                      0351
*     REG15 RESTRICTED;             /*                         Y02006*/
*   REG15=ASYNTAX;                  /* POINT TO MESSAGE WRITER S21014*/
         L     REG15,ASYNTAX(,COMBASE)                             0352
*   NOSTDMG='1'B;                   /* INDICATE MESSAGE AMD165I    0353
*                                      Y02006 NOT REQUIRED S21014    */
         OI    NOSTDMG(COMBASE),B'00010000'                        0353
*   CALL SYNTAXE;                   /* GO WRITE MESSAGE AMD180I    0354
*                                      S21014                        */
         BAL   @14,SYNTAXE                                         0354
*   RESPECIFY                                                      0355
*     REG15 UNRSTD;                 /*                         Y02006*/
*FREEBLDL:                                                         0356
*   ENTRY;                          /* S21014                        */
         B     @EC00356                                            0356
FREEBLDL STM   @14,@12,@SA00003                                    0356
@EC00356 DS    0H                                                  0357
*   RESPECIFY                                                      0357
*     REG3 RESTRICTED;              /*                         Y02006*/
*   REG2=(BLDLCT*BENTRLN)+8;        /* COMPUTE LENGTH OF BLDL LIST   */
         L     @11,BLDLBASE                                        0358
         LH    REG2,BLDLCT(,@11)                                   0358
         MH    REG2,BENTRLN(,@11)                                  0358
         AH    REG2,@CH00037                                       0358
*   REG3=BLDLBASE;                  /* POINT TO LIST                 */
         LR    REG3,@11                                            0359
*   GEN(FREEMAIN R,LV=(R2),A=(R3)); /* FREE IT                       */
         FREEMAIN R,LV=(R2),A=(R3)
*   RESPECIFY                                                      0361
*     REG3 UNRSTD;                  /*                         Y02006*/
*   END PRNTMSG;                    /* S21014                        */
@EL00003 DS    0H                                                  0362
@EF00003 DS    0H                                                  0362
@ER00003 LM    @14,@12,@SA00003                                    0362
         BR    @14                                                 0362
*DELETE:                                                           0363
*   PROC OPTIONS(DONTSAVE(15));     /* S21014                        */
DELETE   ST    @14,@SA00004                                        0363
         STM   @00,@12,@SA00004+4                                  0363
*   RESPECIFY                                                      0364
*    (REG1,                                                        0364
*     REG2,                                                        0364
*     COMBASE) RESTRICTED;          /*                         Y02006*/
*   MODCT=MODCT-1;                                                 0365
         L     @11,MODCT                                           0365
         BCTR  @11,0                                               0365
         ST    @11,MODCT                                           0365
*   RESPECIFY                                                      0366
*     REG3 RESTRICTED;              /*                         Y02006*/
*   REG3=ADDR(LOADNAME);            /* S21014                        */
         LR    REG3,REG2                                           0367
*   GEN;                                                           0368
*                                   /* S21014                        */
         DELETE  EPLOC=(R3)
         B     *+4(R15)
         B     DELETOK
         B     DELFAIL
*   RESPECIFY                                                      0369
*     REG3 UNRSTD;                  /*                         Y02006*/
*DELETOK:                                                          0370
*   RETURN;                         /* DELETE SUCCESSFUL RETURN    0370
*                                      S21014 TO CALLER S21014       */
@EL00004 DS    0H                                                  0370
@EF00004 DS    0H                                                  0370
@ER00004 L     @14,@SA00004                                        0370
         LM    @00,@12,@SA00004+4                                  0370
         BR    @14                                                 0370
*DELFAIL:                           /* BRANCH HERE FOR DELETE S21014
*                                      FAIL S21014                   */
*   SYNMSGA=ADDR(AMDPRP04);         /* SET UP TO ISSUE DELETE S21014
*                                      ERROR MESSAGE S21014          */
DELFAIL  LA    @11,20                                              0371
         AL    @11,SYNMSGA(,COMBASE)                               0371
         ST    @11,SYNMSGA(,COMBASE)                               0371
*   DELNAME=LOADNAME;               /* SET MODULE NAME IN S21014   0372
*                                      MESSAGE AMD181I S21014        */
         L     @11,DELFLMSG(,@11)                                  0372
         MVC   DELNAME+27(8,@11),LOADNAME(REG2)                    0372
*   RESPECIFY                                                      0373
*     REG15 RESTRICTED;             /*                         Y02006*/
*   REG15=ASYNTAX;                  /* POINT TO MESSAGE WRITER S21014*/
         L     REG15,ASYNTAX(,COMBASE)                             0374
*   NOSTDMG='1'B;                   /* INDICATE MESSAGE AMD165I    0375
*                                      Y02006 NOT REQUIRED S21014    */
         OI    NOSTDMG(COMBASE),B'00010000'                        0375
*   CALL SYNTAXA;                   /* GO WRITE MESSAGE S21014       */
         BAL   @14,SYNTAXA                                         0376
*   IF SECLOAD>MODCT THEN           /* IF IN-CORE COUNT DROPS S21014
*                                      BELOW 2-ARY LOAD POINT, S21014*/
         L     @14,MODCT                                           0377
         C     @14,SECLOAD                                         0377
         BNL   @RF00377                                            0377
*     SECLOAD=MODCT+1;              /* RESET 2-ARY POINT S21014      */
         AL    @14,@CF00034                                        0378
         ST    @14,SECLOAD                                         0378
*   REG15=16;                       /* SET DELETE FAIL RETURN S21014
*                                      CODE S21014                   */
@RF00377 LA    REG15,16                                            0379
*   RETURN TO SETBR14;              /* RETURN TO EXIT S21014         */
         LA    @14,SETBR14                                         0380
         LM    @00,@12,@SA00004+4                                  0380
         BR    @14                                                 0380
*   RESPECIFY                                                      0381
*     REG15 UNRSTD;                 /*                         Y02006*/
*   END DELETE;                     /* S21014                        */
         B     @EL00004                                            0382
*INQ:                                                              0383
*   PROC OPTIONS(DONTSAVE(2),NOSAVEAREA);                          0383
INQ      STM   @14,@01,12(@13)                                     0383
         STM   @03,@12,32(@13)                                     0383
*   RESPECIFY                                                      0384
*    (REG1,                                                        0384
*     REG2,                                                        0384
*     REG3,                                                        0384
*     COMBASE) RESTRICTED;          /*                         Y02006*/
*   P=INBASE;                       /* POINT TO FIRST BLOCK IN S21014
*                                      IN-CORE LIST S21014           */
*                                                                  0385
         MVC   P(4),INBASE                                         0385
*   /*****************************************************************/
*   /*                                                               */
*   /* LOOP TO LOCATE ITEM IDENTIFIED BY LISTAD                S21014*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0386
*   DO K=1 TO(LISTAD-1)/5;          /* S21014                        */
         LA    @11,1                                               0386
         B     @DE00386                                            0386
@DL00386 DS    0H                                                  0387
*     REG3=LINK;                    /* GET ADDR NEXT BLOCK S21014    */
         L     @11,P                                               0387
         L     REG3,LINK(,@11)                                     0387
*     IF REG3^=0 THEN               /* IS THERE ONE, S21014          */
         LTR   REG3,REG3                                           0388
         BZ    @RF00388                                            0388
*       P=REG3;                     /* IF SO, POINT TO IT S21014     */
         ST    REG3,P                                              0389
*     ELSE                                                         0390
*GETBLK:                                                           0390
*       DO;                         /* IF NOT, GET NEW BLOCK S21014  */
         B     @RC00388                                            0390
@RF00388 DS    0H                                                  0390
GETBLK   DS    0H                                                  0391
*         GEN(GETMAIN R,LV=64);     /* S21014                        */
         GETMAIN R,LV=64
*         LINK=REG1;                /* SET LINK IN PREVIOUS S21014 0392
*                                      BLOCK TO ADDR NEW BLOCK S21014*/
         L     @11,P                                               0392
         ST    REG1,LINK(,@11)                                     0392
*         P=REG1;                   /* POINT TO NEW BLOCK S21014     */
         ST    REG1,P                                              0393
*         LINK=0;                   /* SET LINK IN LAST BLOCK S21014
*                                      TO INDICATE LAST BLOCK S21014 */
         L     @11,P                                               0394
         SLR   @15,@15                                             0394
         ST    @15,LINK(,@11)                                      0394
*       END GETBLK;                 /* S21014                        */
*   END;                            /* S21014                        */
@RC00388 LA    @11,1                                               0396
         AL    @11,K                                               0396
@DE00386 ST    @11,K                                               0396
         L     @04,LISTAD                                          0396
         BCTR  @04,0                                               0396
         SRDA  @04,32                                              0396
         D     @04,@CF00123                                        0396
         CR    @11,@05                                             0396
         BNH   @DL00386                                            0396
*   IF INQCODE=0 THEN                                              0397
         CLI   INQCODE,0                                           0397
         BNE   @RF00397                                            0397
*     DO;                           /* TEST FUNCTION. IF JUST S21014
*                                      REFERENCING ENTRY, S21014   0398
*                                      RETURN ADDR IN REG 2 S21014   */
*       REG2=P+12*((LISTAD-1)//5);  /* S01980                        */
         L     @04,LISTAD                                          0399
         BCTR  @04,0                                               0399
         SRDA  @04,32                                              0399
         D     @04,@CF00123                                        0399
         MH    @04,@CH00100                                        0399
         AL    @04,P                                               0399
         LR    REG2,@04                                            0399
*       RETURN;                     /* S21014                        */
@EL00005 DS    0H                                                  0400
@EF00005 DS    0H                                                  0400
@ER00005 LM    @14,@01,12(@13)                                     0400
         LM    @03,@12,32(@13)                                     0400
         BR    @14                                                 0400
*     END;                          /* S21014                        */
*   ELSE                                                           0402
*DEQBLK:                                                           0402
*     DO;                           /* IF DEQ FUNCTION, FREE S21014
*                                      ALL REMAINNING BLOCKS S21014  */
@RF00397 DS    0H                                                  0402
DEQBLK   DS    0H                                                  0403
*       REG3=LINK;                  /* GET ADDRESS OF FIRST S21014 0403
*                                      BLOCK TO BE FREED S21014      */
         L     @11,P                                               0403
         L     REG3,LINK(,@11)                                     0403
*       LINK=0;                     /* SET LINK IN CURRENT BLOCK TO
*                                      IND. LAST S21014              */
         SLR   @15,@15                                             0404
         ST    @15,LINK(,@11)                                      0404
*TEST4END:                                                         0405
*       IF REG3=0 THEN              /* AT END OF QUEUE, S21014       */
TEST4END LTR   REG3,REG3                                           0405
         BZ    @RT00405                                            0405
*         RETURN;                   /* IF SO, RETURN S21014          */
*       P=REG3;                     /* IF NOT AT END, POINT TO S21014
*                                      NEXT BLOCK S21014             */
         ST    REG3,P                                              0407
*       REG3=LINK;                  /* SAVE LINK FROM THIS BLK S21014*/
         L     @11,P                                               0408
         L     REG3,LINK(,@11)                                     0408
*       REG1=P;                     /* ADDR OF BLK TO BE FREED S21014
*                                      FOR FREEMAIN S21014           */
         LR    REG1,@11                                            0409
*       GEN(FREEMAIN R,LV=64,A=(1));/* S21014                        */
         FREEMAIN R,LV=64,A=(1)
*       GO TO TEST4END;             /* GO FREE NEXT VLOCK S21014     */
         B     TEST4END                                            0411
*     END DEQBLK;                   /* S21014                        */
*   END INQ;                        /* S21014                        */
         B     @EL00005                                            0413
*TODCNVRT:                                                         0414
*   PROC OPTIONS(SAVE,NOSAVEAREA);                                 0414
*                                                                  0414
TODCNVRT STM   @14,@12,12(@13)                                     0414
*   /*****************************************************************/
*   /*                                                               */
*   /* POINTERS AND WORK REGISTERS USED BY TODCNVRT                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0415
*   DCL                                                            0415
*     PARMREG1 PTR(31) REG(1);      /* INPUT PARM REG POINTS TO    0415
*                                      PARMLIST. Y01980              */
*   DCL                                                            0416
*     PARMREG2 PTR(31) REG(2);      /* INPUT PARM REG CONTAINING   0416
*                                      REQUEST CODE. ALSO USED AS A
*                                      WORK REG WHEN UNPACKING.Y01980*/
*   DCL                                                            0417
*     L PTR(31) REG(4);             /* REGISTER USED FOR DIVIDES.  0417
*                                      WILL NORMALLY CONTAIN THE   0417
*                                      REMAINDER Y01980              */
*   DCL                                                            0418
*     W PTR(31) REG(5);             /* REGISTER USED FOR DIVIDES.  0418
*                                      WILL NORMALLY CONTAIN THE   0418
*                                      QUOTIENT.               Y01980*/
*   DCL                                                            0419
*     DAYREG PTR(31) REG(3);        /* USED TO CALCULATE CURRENT DAY
*                                                              Y01980*/
*   DCL                                                            0420
*     YEARREG PTR(31) REG(6);       /* USED TO CALCULATE CURRENT YR
*                                                              Y01980*/
*                                                                  0420
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING STRUCTURE DESCRIBES THE PARAMETER LIST FORMAT   */
*   /* AND IS USED TO REFERENCE THE PARAMETER LIST                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0421
*   DCL                                                            0421
*     1 INPUTLST BASED(PARMREG1),   /* INPUT PARMLIST          Y01980*/
*       3 CVTTZPTR PTR(31),         /* ADDR OF CVTTZ VALUE     Y01980*/
*       3 TODPTR PTR(31),           /* ADDR OF TOD CLOCK VALUE Y01980*/
*       3 OUTAREA PTR(31);          /* ADDR OF OUTPUT AREA     Y01980*/
*                                                                  0421
*   /*****************************************************************/
*   /*                                                               */
*   /* CVRTAREA IS A DOUBLE WORD AREA INTO WHICH THE TOD VALUE IS    */
*   /* INITIALLY MOVED SO IT IS ALIGNED ON A WORD BOUNDARY FOR       */
*   /* CONVERSION TO LOCAL TIME. CVRTAREA IS ALSO USED AS A WORKAREA */
*   /* WHEN CONVERTING TO DECIMAL                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0422
*   DCL                                                            0422
*     1 CVRTAREA CHAR(8) BDY(DWORD),/* WORK AREA               Y01980*/
*       3 TODWORD1 FIXED(31),       /* BITS 0-31 OF TOD VALUE  Y01980*/
*       3 TODWORD2 FIXED(31);       /* BITS 32-63 OF TOD VALUE Y01980*/
*                                                                  0422
*   /*****************************************************************/
*   /*                                                               */
*   /* CVTTZVAL AND TODVALUE ARE BASED VARIABLES USED WHEN           */
*   /* RERERENCING THE CVTTZ AND TOD CLOCK VALUES POINTED TO BY THE  */
*   /* INPUT PARM LIST. TIMEAREA IS USED TO REFERENCE THE OUTPUT AREA*/
*   /* IN WHICH THE CONVERTED TIME IS PLACED.                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0423
*   DCL                                                            0423
*     CVTTZVAL FIXED(31) BDY(WORD,2) BASED(CVTTZPTR);/* CVTTZ VALUE
*                                      PARAMETER               Y01980*/
*   DCL                                                            0424
*     TODVALUE CHAR(8) BASED(TODPTR);/* TOD CLOCK VALUE PARAMETER  0424
*                                                              Y01980*/
*   DCL                                                            0425
*     TIMEAREA(24) CHAR(1) BASED(OUTAREA);/* TIME OUTPUT AREA  Y01980*/
*   DCL                                                            0426
*     TIMEERIA CHAR(24) BASED(OUTAREA);/* USED TO REFERENCE OUTPUT 0426
*                                      AREA WHEN MOVING IN A ZERO  0426
*                                      TIME DUE TO A ZERO INPUT TOD
*                                      VALUE                   Y01980*/
*                                                                  0426
*   /*****************************************************************/
*   /*                                                               */
*   /* TODBRTAB IS USED TO PASS CONTROL TO THE PROPER TOD CONVERSION */
*   /* ROUTINE. THE REQUEST CODE PASSED IN PARMREG2 IS USED TO INDEX */
*   /* THE TABLE. THE POSSIBLE CODES AND ASSOCIATED ROUTINE ENTRY    */
*   /* POINTS ARE AS FOLLOWS: CODE ENTRY TYPE OF CONVERSION 1        */
*   /* FULLDATE CONVERT TO A FULL DATE AND TIME 2 RELTVTME CONVERT TO*/
*   /* RELATIVE TIME                                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0427
*   DCL                                                            0427
*    (FULLDATE,                                                    0427
*     RELTVTME) LABEL;              /* ENTRY LABELS FOR BRNCH TABLE
*                                                              Y01980*/
*   DCL                                                            0428
*     TODBRTAB(2) PTR(31)           /* TOD BRANCH TABLE        Y01980*/
*         INIT(ADDR(FULLDATE),      /* FULLDATE CONVERSION ROUTINE 0428
*                                                              Y01980*/
*         ADDR(RELTVTME));          /* RELATIVE TIME CONVERSION RTN
*                                                              Y01980*/
*                                                                  0428
*   /*****************************************************************/
*   /*                                                               */
*   /* CONSTANTS AND WORK VARIABLES                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0429
*   DCL                                                            0429
*     SIXTYMIL FIXED(31) INIT(60000000);/* NUMBER OF MICRO SECONDS IN
*                                      A MINUTE                Y01980*/
*   DCL                                                            0430
*     ZEROTOD CHAR(8) INIT('0000000000000000'X);/* USED TO CHK FOR 0430
*                                      ZERO TOD VALUE IN INPUT Y01980*/
*   DCL                                                            0431
*     ZEROTIME CHAR(12) INIT('00000.000000');/* RELATIVE TIME      0431
*                                      RETURNED WHEN WHEN TOD VALUE
*                                      IS ZERO FOR A RELATIVE TIME 0431
*                                      CONVERSION REQUEST      Y01980*/
*   DCL                                                            0432
*     NULLTIME CHAR(22) INIT('000000000.00.00.000000');/* FULL DATE
*                                      AND TIME RETURNED WHEN TOD  0432
*                                      VALUE IS ZERO FOR A FULL DATE
*                                      CON- VERSION REQUEST.   Y01980*/
*   DCL                                                            0433
*     TIMELEFT FIXED(31);           /* USED TO SAVE TIME REMAINING TO
*                                      BE CONVERTED            Y01980*/
*   DCL                                                            0434
*     SECONDS FIXED(31) BASED(ADDR(TIMELEFT));/* USED BY RELATIVE  0434
*                                      TIME CONVERSION ROUTINE TO  0434
*                                      SAVE SECONDS            Y01980*/
*                                                                  0434
*   /*****************************************************************/
*   /*                                                               */
*   /* RESTRICTED REGISTERS                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0435
*   RESPECIFY                                                      0435
*    (PARMREG1,                                                    0435
*     PARMREG2) RESTRICTED;         /*                         Y02006
*                                      RESTRICT PARM REGISTERS Y01980*/
*   RESPECIFY                                                      0436
*    (W,                                                           0436
*     L,                                                           0436
*     DAYREG,                                                      0436
*     YEARREG) RESTRICTED;          /*                         Y02006
*                                      RESTRICT WORK REGISTERS Y01980*/
*   RESPECIFY                                                      0437
*    (BASE1,                                                       0437
*     COMBASE) RESTRICTED;          /*                         Y02006*/
*                                                                  0437
*   /*****************************************************************/
*   /*                                                               */
*   /* RESTRICT COMMON AND BASE                                Y01980*/
*   /* BEGIN TIME OF DAY CONVERSION. MOVE THE TOD VALUE TO A DOUBLE  */
*   /* IF INPUT IS FROM SVC DUMP, TOD VALUE IS NOT CONVERTED WORD    */
*   /* AREA AND ADD THE CVTTZ VALUE TO TOD BIT POSITIONS 0-31.       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0438
*   GEN(BALR BASE1,0);              /* ESTABLISH Y01980              */
         BALR BASE1,0
*   GEN(USING *,BASE1);             /* ADDRESSABILITY Y01980         */
         USING *,BASE1
*   CVRTAREA=TODVALUE;              /* MOVE TOD VALUE TO A DOUBLEWORD
*                                      WORKAREA                Y01980*/
         L     @07,TODPTR(,PARMREG1)                               0440
         MVC   CVRTAREA(8),TODVALUE(@07)                           0440
*   IF QSADMP='1'B THEN             /* IF INPUT IS SADMP,    @ZA00410*/
         TM    QSADMP(COMBASE),B'00100000'                         0441
         BNO   @RF00441                                            0441
*     TODWORD1=TODWORD1+CVTTZVAL;   /* CHANGE TOD TO LOCAL TIMEY01980*/
*                                                                  0442
         L     @07,CVTTZPTR(,PARMREG1)                             0442
         MVC   @TF00001(4),CVTTZVAL(@07)                           0442
         L     @07,@TF00001                                        0442
         AL    @07,TODWORD1                                        0442
         ST    @07,TODWORD1                                        0442
*   /*****************************************************************/
*   /*                                                               */
*   /* CALCULATE TOTAL NUMBER OF MINUTES SINCE THE EPOCH TIME THE    */
*   /* NUMBER OF MICROSECONDS THAT HAVE PASSED IN THE CURRENT MINUTE.*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0443
*   GEN(LM L,W,CVRTAREA);           /* PUT TOD VALUE IN EVEN-ODD   0443
*                                      REGISTER PAIR           Y01980*/
@RF00441 DS    0H                                                  0443
         LM L,W,CVRTAREA
*   GEN(SRDL L,12);                 /* SHIFT TOD VALUE TO REMOVE THE
*                                      INSIGNIFICANT BITS      Y01980*/
         SRDL L,12
*   GEN(D L,SIXTYMIL);              /* DIVID TOD VALUE BY NUMBER OF
*                                      MICROSECONDS IN A MINUTE. W -
*                                      CONTAINS TOTAL MINUTES SINCE
*                                      THE EPOCH TIME          Y01980
*                                      L - CONTAINS TOTAL NUMBER OF
*                                      MICROSECONDS INTO CURRENT   0445
*                                      MINUTE                  Y01980*/
*                                                                  0445
         D L,SIXTYMIL
*   /*****************************************************************/
*   /*                                                               */
*   /* GO TO PROPER CONVERSION ROUTINE FOR PROCESSING THIS TOD       */
*   /* CONVERT REQUEST. USE THE REQUEST CODE IN PARMREG2 TO INDEX THE*/
*   /* TODBRTAB. THE CODES AND ASSOCIATED ROUTINE ENTRY LABELS ARE AS*/
*   /* FOLLOWS: CODE ENTRY TYPE OF CONVERSION 1 FULLDATE CONVERT TO A*/
*   /* FULL DATE AND TIME 2 RELTVTME CONVERT TO RELATIVE TIME        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0446
*   GOTO TODBRTAB(PARMREG2);        /* BRANCH ON REQUEST CODE  Y01980*/
         LR    @07,PARMREG2                                        0446
         SLA   @07,2                                               0446
         L     @07,TODBRTAB-4(@07)                                 0446
         BR    @07                                                 0446
*                                                                  0447
*   /*****************************************************************/
*   /*                                                               */
*   /* RELATIVE TIME CONVERSION -- THIS ROUTINE RECEIVES CONTROL AT  */
*   /* ENTRY 'RELTVTME'. IT CONVERTS THE TOD VALUE TO RELATIVE       */
*   /* SECONDS.MICROSECONDS FROM 0 A.M. OF THE CURRENT DAY REFLECTED */
*   /* BY THE TOD VALUE. THE CONVERTED TIME IS PLACED LEFT JUSTIFIED */
*   /* IN THE OUTPUT AREA PASSED BY THE TODCVRT CALLER AND IS IN THE */
*   /* FORM SSSSS.MMMMMM (EBCDIC). UPON ENTRY TO THIS ROUTINE THE TOD*/
*   /* VALUE HAS ALREADY BEEN CHANGED TO TOTAL MINUTES (IN W) AND    */
*   /* NUMBER OF MICROSECONDS INTO CURRENT MINUTE (IN L). WHEN       */
*   /* PROCESSING IS COMPLETED CONTROL IS RETURNED TO THE TODCNVRT   */
*   /* CALLER                                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0447
*RELTVTME:                                                         0447
*   IF TODVALUE=ZEROTOD THEN        /* IS TOD VALUE ZERO ?     Y01980*/
RELTVTME L     @07,TODPTR(,PARMREG1)                               0447
         CLC   TODVALUE(8,@07),ZEROTOD                             0447
         BNE   @RF00447                                            0447
*     DO;                           /* YES, PASS BACK A TIME OF ZERO */
*       TIMEERIA=ZEROTIME;          /* MOVE ZERO TIME INTO OUT AREA
*                                                              Y01980*/
         L     @07,OUTAREA(,PARMREG1)                              0449
         MVI   TIMEERIA+12(@07),C' '                               0449
         MVC   TIMEERIA+13(11,@07),TIMEERIA+12(@07)                0449
         MVC   TIMEERIA(12,@07),ZEROTIME                           0449
*       RETURN CODE(4);             /* INDICATE ZERO TOD TO CALLER 0450
*                                                              Y01980*/
         LA    @15,4                                               0450
         L     @14,12(,@13)                                        0450
         LM    @00,@12,20(@13)                                     0450
         BR    @14                                                 0450
*     END;                                                         0451
*   SECONDS=L/1000000;              /* CALCULATE NUMBER OF SECONDS 0452
*                                      INTO CURRENT MINUTE.    Y01980*/
@RF00447 LA    @07,TIMELEFT                                        0452
         L     @15,@CF01247                                        0452
         ST    @15,@TF00001                                        0452
         LR    @15,L                                               0452
         SLR   @14,@14                                             0452
         D     @14,@TF00001                                        0452
         ST    @15,SECONDS(,@07)                                   0452
*   L=L//1000000;                   /* CALCULATE NUMBER OF MICROSECS
*                                      INTO CURRENT SECOND     Y01980*/
         LR    @14,L                                               0453
         SRDA  @14,32                                              0453
         D     @14,@TF00001                                        0453
         LR    L,@14                                               0453
*   PARMREG2=ADDR(TIMEAREA(7));     /* GET ADDROF OUTPUT LOCATION IN
*                                      WHICH CONVERTED MICROSECS ARE
*                                      TO BE PLACED            Y01980*/
*                                                                  0454
         L     PARMREG2,OUTAREA(,PARMREG1)                         0454
         LA    PARMREG2,TIMEAREA+6(,PARMREG2)                      0454
*   /*****************************************************************/
*   /*                                                               */
*   /* CONVERT MICROSECONDS TO EBCDIC                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0455
*   GEN(CVD L,CVRTAREA);            /* CNVRT MICROSECONDS TO DECIMAL
*                                                              Y02006*/
         CVD L,CVRTAREA
*   GEN(UNPK 0(6,PARMREG2),CVRTAREA+4(4));/* UNPACK MICROSECONDS   0456
*                                                              Y01980*/
         UNPK 0(6,PARMREG2),CVRTAREA+4(4)
*   GEN(OI 5(PARMREG2),X'F0');      /* CHANGE SIGN TO A NUMERIC ZONE
*                                                              Y01980*/
         OI 5(PARMREG2),X'F0'
*   TIMEAREA(6)='.';                /* INSERT SEPARATER        Y01980*/
*                                                                  0458
         L     @07,OUTAREA(,PARMREG1)                              0458
         MVI   TIMEAREA+5(@07),C'.'                                0458
*   /*****************************************************************/
*   /*                                                               */
*   /* CALCULATE NUMBER OF SECONDS INTO CURRENT DAY AND CONVERT TO   */
*   /* EBCDIC                                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0459
*   L=((W//1440)*60)+SECONDS;       /* CALC SECONDS INTO CUR DAY   0459
*                                                              Y01980*/
         LR    @14,W                                               0459
         SRDA  @14,32                                              0459
         D     @14,@CF01250                                        0459
         MH    @14,@CH00119                                        0459
         LA    @15,TIMELEFT                                        0459
         AL    @14,SECONDS(,@15)                                   0459
         LR    L,@14                                               0459
*   PARMREG2=ADDR(TIMEAREA(1));     /* GET ADDR OF OUTPUT LOCATION IN
*                                      WHICH CONVERTED SECONDS ARE TO
*                                      BE PLACED               Y01980*/
         LR    PARMREG2,@07                                        0460
*   GEN(CVD L,CVRTAREA);            /* CONVRT SECONDS TO DECIMAL   0461
*                                                              Y01980*/
         CVD L,CVRTAREA
*   GEN(UNPK 0(5,PARMREG2),CVRTAREA+5(3));/* UNPACK SECONDS    Y01980*/
         UNPK 0(5,PARMREG2),CVRTAREA+5(3)
*   GEN(OI 4(PARMREG2),X'F0');      /* CHANGE SIGN TO A NUMERIC ZONE
*                                                              Y01980*/
         OI 4(PARMREG2),X'F0'
*   RETURN CODE(0);                 /* INDICATE TOD VALUE WAS CNVRTED
*                                                              Y01980
*                                      EXIT TO THE TODCNVRT CALLER 0464
*                                                              Y01980*/
         SLR   @15,@15                                             0464
         L     @14,12(,@13)                                        0464
         LM    @00,@12,20(@13)                                     0464
         BR    @14                                                 0464
*                                                                  0465
*   /*****************************************************************/
*   /*                                                               */
*   /* FULL DATA AND TIME CONVERSION -- THIS ROUTINE RECEIVES CONTROL*/
*   /* AT ENTRY LABEL 'FULLDATE'. IT CONVERTS THE TOD VALUE TO YEAR, */
*   /* JULIAN DAY, HOURS, MINUTES, SECONDS, AND MICROSECONDS. THE    */
*   /* CONVERTED TIME IS PLACED LEFT JUSTIFIED IN THE OUTPUT AREA    */
*   /* PASSED BY THE TODCNVRT CALLER AND IS IN THE FORM              */
*   /* YYYYDDDHH.MM.SS.MMMMMM (EBCDIC). UPON ENTRY TO THIS ROUTINE   */
*   /* THE TOD VALUE HAS ALREADY BEEN CHANGED TO TOTAL MINUTES SINCE */
*   /* EPOCH (IN W) AND NUMBER OF MICROSECONDS INTO CURRENT MINUTE   */
*   /* (IN L). WHEN PROCESSING IS COMPLETED CONTROL IS RETURNED TO   */
*   /* THE TODCNVRT CALLER.                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0465
*FULLDATE:                                                         0465
*   IF TODVALUE=ZEROTOD THEN        /* IS TOD VALUE ZERO ?     Y01980*/
FULLDATE L     @07,TODPTR(,PARMREG1)                               0465
         CLC   TODVALUE(8,@07),ZEROTOD                             0465
         BNE   @RF00465                                            0465
*     DO;                           /* YES, PASS BACK A TIME OF ZERO
*                                                              Y01980*/
*       TIMEERIA=NULLTIME;          /* MOVE ZERO TIME INTO OUT AREA
*                                                              Y01980*/
         L     @07,OUTAREA(,PARMREG1)                              0467
         MVI   TIMEERIA+22(@07),C' '                               0467
         MVI   TIMEERIA+23(@07),C' '                               0467
         MVC   TIMEERIA(22,@07),NULLTIME                           0467
*       RETURN CODE(4);             /* INDICATE ZERO TOD TO CALLER 0468
*                                                              Y01980*/
         LA    @15,4                                               0468
         L     @14,12(,@13)                                        0468
         LM    @00,@12,20(@13)                                     0468
         BR    @14                                                 0468
*     END;                                                         0469
*   SECONDS=L/1000000;              /* CALCULATE NUMBER OF SECONDS 0470
*                                                              Y01980*/
@RF00465 LA    @07,TIMELEFT                                        0470
         L     @15,@CF01247                                        0470
         ST    @15,@TF00001                                        0470
         LR    @15,L                                               0470
         SLR   @14,@14                                             0470
         D     @14,@TF00001                                        0470
         ST    @15,SECONDS(,@07)                                   0470
*   L=L//1000000;                   /* CALCULATE NO. OF MICROSECONDS
*                                                              Y01980*/
*                                                                  0471
         LR    @14,L                                               0471
         SRDA  @14,32                                              0471
         D     @14,@TF00001                                        0471
         LR    L,@14                                               0471
*   /*****************************************************************/
*   /*                                                               */
*   /* CONVERT MICROSECONDS TO EBCDIC IN THE OUTPUT AREA             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0472
*   PARMREG2=ADDR(TIMEAREA(17));    /* GET ADDR OF OUTPUT LOCATION IN
*                                      WHICH CONVERTED MICROSECS ARE
*                                      TO BE PLACED            Y01980*/
         L     PARMREG2,OUTAREA(,PARMREG1)                         0472
         LA    PARMREG2,TIMEAREA+16(,PARMREG2)                     0472
*   GEN(CVD L,CVRTAREA);            /* CNVRT MICROSECONDS TO DECIMAL
*                                                              Y01980*/
         CVD L,CVRTAREA
*   GEN(UNPK 0(6,PARMREG2),CVRTAREA+4(4));/* UNPACK MICROSECONDS   0474
*                                                              Y01980*/
         UNPK 0(6,PARMREG2),CVRTAREA+4(4)
*   GEN(OI 5(PARMREG2),X'F0');      /* CHANGE SIGN TO A NUMERIC ZONE
*                                                              Y01980*/
         OI 5(PARMREG2),X'F0'
*   TIMEAREA(16)='.';               /* INSERT SEPARATER        Y01980*/
*                                                                  0476
         L     @07,OUTAREA(,PARMREG1)                              0476
         MVI   TIMEAREA+15(@07),C'.'                               0476
*   /*****************************************************************/
*   /*                                                               */
*   /* CONVERT SECONDS TO EBCDIC IN THE OUTPUT AREA                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0477
*   L=SECONDS;                      /* GET NUMBER OF SECONDS   Y01980*/
         LA    @15,TIMELEFT                                        0477
         L     L,SECONDS(,@15)                                     0477
*   PARMREG2=ADDR(TIMEAREA(14));    /* GET ADDR OF OUTPUT LOCATION IN
*                                      WHICH CONVERTED SECONDS ARE TO
*                                      BE PLACED               Y01980*/
         LA    PARMREG2,TIMEAREA+13(,@07)                          0478
*   GEN(CVD L,CVRTAREA);            /* CNVRT SECONDS TO DECIMALY01980*/
         CVD L,CVRTAREA
*   GEN(UNPK 0(2,PARMREG2),CVRTAREA+6(2));/* UNPACK SECONDS    Y01980*/
         UNPK 0(2,PARMREG2),CVRTAREA+6(2)
*   GEN(OI 1(PARMREG2),X'F0');      /* CHANGE SIGN TO A NUMERIC ZONE
*                                                              Y01980*/
         OI 1(PARMREG2),X'F0'
*   TIMEAREA(13)='.';               /* INSERT SEPARATER        Y01980*/
*                                                                  0482
         L     @07,OUTAREA(,PARMREG1)                              0482
         MVI   TIMEAREA+12(@07),C'.'                               0482
*   /*****************************************************************/
*   /*                                                               */
*   /* CALCULATE NUMBER OF MINUTES INTO CURRENT HOUR AND CONVERT THE */
*   /* RESULT TO EBCDIC IN THE OUTPUT AREA. W CONTAINS TOTAL NUMBER  */
*   /* OF MINUTES FROM THE EPOCH                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0483
*   TIMELEFT=W/60;                  /* CALC TOTAL HOURS SINCE EPOCH
*                                                              Y01980*/
         LA    @15,60                                              0483
         ST    @15,@TF00001                                        0483
         LR    @15,W                                               0483
         SLR   @14,@14                                             0483
         D     @14,@TF00001                                        0483
         ST    @15,TIMELEFT                                        0483
*   L=W//60;                        /* CALC MINUTES INTO CURRENT HR
*                                                              Y01980*/
         LR    @14,W                                               0484
         SRDA  @14,32                                              0484
         D     @14,@TF00001                                        0484
         LR    L,@14                                               0484
*   PARMREG2=ADDR(TIMEAREA(11));    /* GET ADDR OF OUTPUT LOCATION IN
*                                      WHICH CONVERTED MINUTES ARE TO
*                                      BE PLACED               Y01980*/
         LA    PARMREG2,TIMEAREA+10(,@07)                          0485
*   GEN(CVD L,CVRTAREA);            /* CONVERT MINUTES TO DECIMAL  0486
*                                                              Y01980*/
         CVD L,CVRTAREA
*   GEN(UNPK 0(2,PARMREG2),CVRTAREA+6(2));/* UNPACK MINUTES    Y01980*/
         UNPK 0(2,PARMREG2),CVRTAREA+6(2)
*   GEN(OI 1(PARMREG2),X'F0');      /* CHANGE SIGN TO A NUMERIC ZONE
*                                                              Y01980*/
         OI 1(PARMREG2),X'F0'
*   TIMEAREA(10)='.';               /* INSERT SEPARATER        Y01980*/
*                                                                  0489
         L     @07,OUTAREA(,PARMREG1)                              0489
         MVI   TIMEAREA+9(@07),C'.'                                0489
*   /*****************************************************************/
*   /*                                                               */
*   /* CALCULATE NUMBER OF HOURS INTO CURRENT DAY AND CONVERT THE    */
*   /* RESULT TO EBCDIC IN THE OUTPUT AREA. TIMELEFT CONTAINS TOTAL  */
*   /* NUMBER OF HOURS SINCE THE EPOCH.                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0490
*   W=TIMELEFT;                     /* GET TOTAL HOURS SINCE EPOCH 0490
*                                                              Y01980*/
         L     W,TIMELEFT                                          0490
*   TIMELEFT=W/24;                  /* CALC TOTAL DAYS SINCE EPOCH 0491
*                                                              Y01980*/
         LA    @15,24                                              0491
         ST    @15,@TF00001                                        0491
         LR    @15,W                                               0491
         SLR   @14,@14                                             0491
         D     @14,@TF00001                                        0491
         ST    @15,TIMELEFT                                        0491
*   L=W//24;                        /* CALC HOURS INTO CURRENT DAY 0492
*                                                              Y01980*/
         LR    @14,W                                               0492
         SRDA  @14,32                                              0492
         D     @14,@TF00001                                        0492
         LR    L,@14                                               0492
*   PARMREG2=ADDR(TIMEAREA(8));     /* GET ADDR OF OUTPUT LOCATION IN
*                                      WHICH CONVERTED HOURS ARE TO
*                                      BE PLACED               Y01980*/
         LA    PARMREG2,TIMEAREA+7(,@07)                           0493
*   GEN(CVD L,CVRTAREA);            /* CONVERT HOURS TO DECIMALY01980*/
         CVD L,CVRTAREA
*   GEN(UNPK 0(2,PARMREG2),CVRTAREA+6(2));/* UNPACK HOURS      Y01980*/
         UNPK 0(2,PARMREG2),CVRTAREA+6(2)
*   GEN(OI 1(PARMREG2),X'F0');      /* CHANGE SIGN TO A NUMERIC ZONE
*                                                              Y01980*/
*                                                                  0496
         OI 1(PARMREG2),X'F0'
*   /*****************************************************************/
*   /*                                                               */
*   /* CALCULATE THE CURRENT YEAR AND JULIAN DAY USING 'TIMELEFT'    */
*   /* WHICH CONTAINS THE TOTAL NUMBER OF ELAPSED DAYS SINCE 1900.   */
*   /* FIRST CHECK WHETHER THE TIME IS IN THE 1900 THROUGH 1903 ERA  */
*   /* (I.E., LESS THAN 1460 ELAPSED DAYS). IF SO, THE TIME MUST BE  */
*   /* HANDLED IN A SPECIAL WAY SINCE 1900 IS NOT A LEAP YEAR AND    */
*   /* EACH YEAR IN THAT FOUR YEAR SPAN THUS CONTAINS EXACTLY 365    */
*   /* DAYS. IF THE ELAPSED TIME HOWEVER IS GREATER THAN 1459 DAYS   */
*   /* THEN EVERY FOUR YEARS CONTAINS 1461 DAYS RATHER THAN 1460 AND */
*   /* THE FIRST YEAR OF EACH GROUP IS A LEAP YEAR. THESE FOUR YEAR  */
*   /* GROUPS ARE REFERRED TO AS LEAP YEAR GROUPS (E.G., 1904-1907,  */
*   /* 1908-1911, ETC.). THE YEAR AND THE DAY WHEN THE ELAPSED TIME  */
*   /* FALLS INTO ONE OF THESE GROUPS MUST BE CALCULATED USING       */
*   /* STANDARD FORMULAS DIFFERENT FROM THE FORMULAS USED WHEN THE   */
*   /* TIME IS BETWEEN 1900 AND JANUARY 1, 1904.                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0497
*   IF TIMELEFT<1460 THEN           /* IS TIME ELAPSED WITHIN THE  0497
*                                      1900 THRU 1903 ERA?     Y01980*/
         L     @07,TIMELEFT                                        0497
         CH    @07,@CH01255                                        0497
         BNL   @RF00497                                            0497
*NOLEAPYR:                                                         0498
*     DO;                           /* YES CALCULATE YEAR AND DAY  0498
*                                      WITHIN THE 1900 THRU 1903 ERA
*                                                              Y01980*/
NOLEAPYR DS    0H                                                  0499
*       DAYREG=(TIMELEFT//365)+1;   /* CALCULATE CURRENT DAY   Y01980*/
         L     @07,TIMELEFT                                        0499
         LA    @15,365                                             0499
         LR    @14,@07                                             0499
         ST    @15,@TF00001                                        0499
         SRDA  @14,32                                              0499
         D     @14,@TF00001                                        0499
         AL    @14,@CF00034                                        0499
         LR    DAYREG,@14                                          0499
*       YEARREG=1900+(TIMELEFT/365);/* CALCULATE CURRENT YR.   Y01980*/
         LR    @14,@07                                             0500
         SRDA  @14,32                                              0500
         D     @14,@TF00001                                        0500
         AH    @15,@CH01259                                        0500
         LR    YEARREG,@15                                         0500
*     END NOLEAPYR;                                                0501
*                                                                  0501
*   /*****************************************************************/
*   /*                                                               */
*   /* THE TIME ELAPSED IS 1460 OR MORE DAYS (I.E., THE CURRENT YEAR */
*   /* AND DAY MUST BE WITHIN A LEAP YEAR GROUP). THUS ADJUST THE    */
*   /* ELAPSED TIME CONTAINED IN 'TIMELEFT' SO THAT 1904 CAN BE USED */
*   /* AS THE STARTING POINT FOR CALCULATING THE CURRENT YEAR AND    */
*   /* DAY. NEXT CALCULATE W, THE RELATIVE LEAP YEAR GROUP SINCE     */
*   /* 1904, AND L, THE NUMBER OF DAYS THAT HAVE ELAPSED IN THE      */
*   /* CURRENT LEAP YEAR GROUP. FINALLY, USE THESE VALUES IN THE     */
*   /* FORMULAS FOR CALCULATING THE CURRENT DAY AND YEAR WHEN ELAPSED*/
*   /* TIME IS GREATER THAN 1459. IN THE FORMULA USED TO CALCULATE   */
*   /* THE CURRENT JULIAN DAY, THE EXPRESSION IN PARENTHESES IS THE  */
*   /* NUMBER OF WHOLE DAYS THAT HAVE PAST IN THE CURRENT YEAR.      */
*   /* BECAUSE THE CURRENT DAY HAS NOT YET ELAPSED, IT IS NOT        */
*   /* INCLUDED IN THE RESULT PRODUCED BY THE EXPRESSION AND         */
*   /* THEREFORE 1 MUST BE ADDED TO GET THE ACTUAL JULIAN DAY. WITHIN*/
*   /* THE EXPRESSION THE FIRST TERM, R, MUST BE ADJUSTED BY 1 (I.E.,*/
*   /* L/731) IF THE TOTAL DAYS INTO THE LEAP YEAR GROUP IS GREATER  */
*   /* OR EQUAL TO 2 YEARS AND AGAIN BY 1 (I.E. L/1096) IF THE TOTAL */
*   /* DAYS IS EQUAL TO OR GREATER THAN 3                      YEARS.*/
*   /* THE AFFECT OF THIS IS THAT THE SECOND YEAR AND THIRD YEAR ARE */
*   /* FORCED TO 366 DAYS ONCE THE TOTAL DAYS INTO THE LEAP YEAR     */
*   /* GROUP EXCEEDS EACH OF THESE YEARS. THIS IS NECESSARY BECAUSE A*/
*   /* DIVISOR OF 366 IS USED. IN THE FORMULA FOR CALCULATING THE    */
*   /* YEAR, 1904 IS THE BASE YEAR. THE SECOND TERM (W * 4) YIELDS   */
*   /* THE RELATIVE NUMBER OF YEARS SINCE 1904 UP TO AND INCLUDING   */
*   /* THE LEAP YEAR IN THE CURRENT LEAP YEAR GROUP. THE THIRD TERM (*/
*   /* (L-1)/365 ) YIELDS THE RELATIVE YEAR WITHIN THE CURRENT LEAP  */
*   /* YEAR GROUP. THUS IF THE CURRENT YEAR IS A LEAP YEAR THE       */
*   /* RELATIVE YEAR WITHIN THE CURRENT LEAP YEAR GROUP IS 0 AND THE */
*   /* THIRD TERM WILL YIELD A RESULT OF ZERO.                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0502
*   ELSE                                                           0502
*LEAPYR:                                                           0502
*     DO;                           /* DATE IS GREATER THAN 1903   0502
*                                                              Y01980*/
         B     @RC00497                                            0502
@RF00497 DS    0H                                                  0502
LEAPYR   DS    0H                                                  0503
*       TIMELEFT=TIMELEFT-1460;     /* ADJUST ELAPSED TIME SO 1904 0503
*                                      BASE CAN BE USED IN FORMULA 0503
*                                                              Y01980*/
         L     @07,TIMELEFT                                        0503
         SH    @07,@CH01255                                        0503
         ST    @07,TIMELEFT                                        0503
*       W=TIMELEFT/1461;            /* DIVIDE TOTAL DAYS SINCE EPOCH
*                                      BY NUMBER OF DAYS IN A LEAP 0504
*                                      YEAR GROUP. THE RESULT, W,  0504
*                                      WILL BE THE RELATIVE LEAP YEAR
*                                      GROUP SINCE THE EPOCH.  Y01980*/
         LA    @15,1461                                            0504
         LR    @14,@07                                             0504
         ST    @15,@TF00001                                        0504
         SRDA  @14,32                                              0504
         D     @14,@TF00001                                        0504
         LR    W,@15                                               0504
*       L=TIMELEFT//1461;           /* CALCULATE TOTAL DAYS ELAPSED
*                                      IN CURRENT LEAP YEAR GROUP  0505
*                                                              Y01980*/
         LR    @14,@07                                             0505
         SRDA  @14,32                                              0505
         D     @14,@TF00001                                        0505
         LR    L,@14                                               0505
*       DAYREG=((L+L/731+L/1096)//366)+1;/* CALC JULIAN DAY    Y01980*/
         LR    @15,L                                               0506
         SLR   @14,@14                                             0506
         D     @14,@CF01263                                        0506
         LR    @14,@15                                             0506
         ALR   @14,L                                               0506
         LR    @15,L                                               0506
         ST    @14,@TF00001                                        0506
         SLR   @14,@14                                             0506
         D     @14,@CF01264                                        0506
         LR    @14,@15                                             0506
         AL    @14,@TF00001                                        0506
         SRDA  @14,32                                              0506
         D     @14,@CF01265                                        0506
         AL    @14,@CF00034                                        0506
         LR    DAYREG,@14                                          0506
*       YEARREG=1904+(W*4)+(L-1)/365;/* CALCULATE CURRENT YEAR Y01980*/
         LR    YEARREG,W                                           0507
         SLA   YEARREG,2                                           0507
         AH    YEARREG,@CH01266                                    0507
         LR    @14,L                                               0507
         BCTR  @14,0                                               0507
         SRDA  @14,32                                              0507
         D     @14,@CF01258                                        0507
         ALR   YEARREG,@15                                         0507
*     END LEAPYR;                                                  0508
*                                                                  0508
*   /*****************************************************************/
*   /*                                                               */
*   /* CONVERT THE DAY TO EBCDIC IN THE OUTPUT AREA                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0509
*   PARMREG2=ADDR(TIMEAREA(5));     /* GET ADDR OF OUTPUT LOCATION IN
*                                      WHICH CONVERTED DAY IS TO BE
*                                      PLACED                  Y01980*/
@RC00497 L     PARMREG2,OUTAREA(,PARMREG1)                         0509
         LA    PARMREG2,TIMEAREA+4(,PARMREG2)                      0509
*   GEN(CVD DAYREG,CVRTAREA);       /* CONVERT DAY TO DECIMAL  Y01980*/
         CVD DAYREG,CVRTAREA
*   GEN(UNPK 0(3,PARMREG2),CVRTAREA+6(2));/* UNPACK DAY        Y01980*/
         UNPK 0(3,PARMREG2),CVRTAREA+6(2)
*   GEN(OI 2(PARMREG2),X'F0');      /* CHANG SIGN TO A NUMERIC ZONE
*                                                              Y01980*/
*                                                                  0512
         OI 2(PARMREG2),X'F0'
*   /*****************************************************************/
*   /*                                                               */
*   /* CONVERT THE YEAR TO EBCDIC IN THE OUTPUT AREA                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0513
*   PARMREG2=ADDR(TIMEAREA(1));     /* GET ADDR OF OUTPUT LOCATION IN
*                                      WHICH CONVERTED YEAR IS TO BE
*                                      PLACED                  Y01980*/
         L     PARMREG2,OUTAREA(,PARMREG1)                         0513
*   GEN(CVD YEARREG,CVRTAREA);      /* CONVERT YEAR TO DECIMAL Y01980*/
         CVD YEARREG,CVRTAREA
*   GEN(UNPK 0(4,PARMREG2),CVRTAREA+5(3));/* UNPACK YEAR       Y01980*/
         UNPK 0(4,PARMREG2),CVRTAREA+5(3)
*   GEN(OI 3(PARMREG2),X'F0');      /* CHANGE SIGN TO A NUMERIC ZONE */
*                                                                  0516
         OI 3(PARMREG2),X'F0'
*   /*****************************************************************/
*   /*                                                               */
*   /* RETURN TO TODCNVRT CALLER                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0517
*   RETURN CODE(0);                 /* INDICATE TOD VALUE WAS CNVRTED
*                                                              Y01980*/
         SLR   @15,@15                                             0517
         L     @14,12(,@13)                                        0517
         LM    @00,@12,20(@13)                                     0517
         BR    @14                                                 0517
*   END TODCNVRT;                                                  0518
*   END AMDPRSEG                                                   0519
*                                                                  0519
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHACDE  )                                       */
*/*%INCLUDE SYSLIB  (IHALPDE )                                       */
*/*%INCLUDE SYSLIB  (COMMON  )                                       */
*                                                                  0519
*       ;                                                          0519
@DATA    DS    0H
@CH00051 DC    H'4'
@CH00037 DC    H'8'
@CH00978 DC    H'9'
@CH00100 DC    H'12'
@CH00119 DC    H'60'
@CH00970 DC    H'64'
@CH01255 DC    H'1460'
@CH01259 DC    H'1900'
@CH01266 DC    H'1904'
@CH01136 DC    H'30720'
         DS    0F
@SA00001 DS    18F
@SA00003 DS    15F
@SA00004 DS    14F
@SA00002 DS    15F
@TF00001 DS    F
@ZTEMPS  DS    0F
@ZT00001 DC    F'0'
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
         DS    0F
@CF00034 DC    F'1'
@CF00123 DC    F'5'
@CH00123 EQU   @CF00123+2
@CF01258 DC    F'365'
@CF01265 DC    F'366'
@CF01263 DC    F'731'
@CF01264 DC    F'1096'
@CF01250 DC    F'1440'
@CF01160 DC    F'10240'
@CF01135 DC    F'16384'
@CF01133 DC    F'49152'
@CF01123 DC    F'65535'
@CF01137 DC    F'65536'
@CF01125 DC    F'262144'
@CF01247 DC    F'1000000'
@CF01124 DC    F'-65536'
@CF01276 DC    F'-7'
@CF01273 DC    F'-4'
@CF01274 DC    F'-3'
@CA00090 DC    A(AMDPRP01)
         DS    0D
BLDLBASE DC    A(0)
Q        DS    A
P        DS    A
SEGSAVE  DS    A
SMODSIZE DC    F'0'
LIMIT    DS    F
EXITSIZE DC    F'0'
FORMNUM2 DS    F
LPDEPTR  DS    A
LPAPTR   DS    A
LPACT    DS    F
I        DS    F
SAVER1   DS    A
SIXTYMIL DC    F'60000000'
TIMELEFT DS    F
SWITCHES DC    X'00'
         ORG   SWITCHES
LOADSEC  DS    BL1
INITSW   EQU   SWITCHES+0
LOADEXIT EQU   SWITCHES+0
ALLMODIN EQU   SWITCHES+0
         ORG   SWITCHES+1
NAMEAREA DC    CL8'AMDPR'
         DS    CL3
PLIST    DS    CL4
         ORG   PLIST
LISTBASE DS    AL4
         ORG   LISTBASE
HIBYTE   DS    CL1
         ORG   PLIST+4
SEGDATA  DS    CL33
         ORG   SEGDATA
INBASE   DC    AL4(BLK1)
MODCT    DS    FL4
LOADCT   DS    FL4
LOADPT   DS    FL4
SECLOAD  DS    FL4
J        DS    FL4
K        DS    FL4
LISTAD   DS    FL4
INQCODE  DC    AL1(0)
         ORG   SEGDATA+33
         DS    CL3
BLK1     DS    CL64
         ORG   BLK1
B1       DS    CL60
L1       DC    A(0)
         ORG   BLK1+64
XITMOD   DS    CL12
         ORG   XITMOD
XNAME    DC    CL8' '
XENTPT   DC    A(0)
         ORG   XITMOD+12
LPATBL   DS    CL120
SECMODNM DS    CL8
         DS    CL4
CVRTAREA DS    CL8
         ORG   CVRTAREA
TODWORD1 DS    FL4
TODWORD2 DS    FL4
         ORG   CVRTAREA+8
ZEROTOD  DC    X'0000000000000000'
ZEROTIME DC    CL12'00000.000000'
NULLTIME DC    CL22'000000000.00.00.000000'
         DS    CL2
PATCH    DC    50F'0'
TODBRTAB DC    AL4(FULLDATE)
         DC    AL4(RELTVTME)
AMDPRSEG CSECT
*                                   /*                         Y01980*/
         ENTRY TODCNVRT                                        Y01980
AMDPRSEG CSECT
*
DTAE     EQU   32                  DATA EBCDIC BIT
DTAC     EQU   16                  DATA IN CORE BIT
DTAP     EQU   8                   DATA PTR BIT
DTA      EQU   4                   DATA INCLUDED BIT
LBLP     EQU   2                   LABEL PTR BIT
LBL      EQU   1                   LABEL INCLUDED BIT
AMDPRSEG CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
REG1     EQU   @01
REG2     EQU   @02
REG3     EQU   @03
REG15    EQU   @15
CDENTPTR EQU   @11
NAMEPTR  EQU   @09
NAMEREG0 EQU   @00
NAMEREG1 EQU   @01
CDEQUEUE EQU   @08
COMBASE  EQU   @12
BASE1    EQU   @11
PARMREG1 EQU   @01
PARMREG2 EQU   @02
L        EQU   @04
W        EQU   @05
DAYREG   EQU   @03
YEARREG  EQU   @06
BASE2    EQU   @10
BASE3    EQU   @09
BUFREG   EQU   @06
CNTREG   EQU   @03
LINEREG  EQU   @08
PREG     EQU   @01
R0       EQU   @00
R1       EQU   @01
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
STOPBASE EQU   @05
         EXTRN AMDPRP01
CVTPTR   EQU   16
REQLIST  EQU   0
REQFLGS  EQU   REQLIST
REQNAME  EQU   REQLIST+1
BLDLLIST EQU   0
BLDLCT   EQU   BLDLLIST
BENTRLN  EQU   BLDLLIST+2
BLDLENTR EQU   0
MODNAME  EQU   BLDLENTR
R        EQU   BLDLENTR+10
MODLEN   EQU   BLDLENTR+24
REQMODNM EQU   0
AMDPRP02 EQU   0
AMDPRP03 EQU   0
AMDPRP04 EQU   0
TEXT     EQU   0
INOP     EQU   0
DELFLMSG EQU   0
DELNAME  EQU   0
LISTBLK  EQU   0
LINK     EQU   LISTBLK+60
LISTITEM EQU   0
LOADNAME EQU   LISTITEM
LOADEP   EQU   LISTITEM+8
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTQCDSR EQU   CVTMAP+184
CVTQLPAQ EQU   CVTMAP+188
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
CDENTRY  EQU   0
CDENTPT  EQU   CDENTRY+16
CDATTR   EQU   CDENTRY+28
CDATTR2  EQU   CDENTRY+29
LPDE     EQU   0
LPDENTP  EQU   LPDE+16
LPDEATTR EQU   LPDE+28
LPDEATT2 EQU   LPDE+29
LPDEMJNM EQU   LPDE+32
LPAMOD   EQU   0
LPAMODNM EQU   LPAMOD
LPAEP    EQU   LPAMOD+8
IEAVVMSR EQU   0
IEAQCDSR EQU   0
COMMON   EQU   0
ERRADDR  EQU   COMMON
STORSIZE EQU   COMMON+64
SWA      EQU   COMMON+122
SWB      EQU   COMMON+123
SWC      EQU   COMMON+124
EDITSW   EQU   SWC
SEGRD    EQU   SWC
SWD      EQU   COMMON+125
NOSTDMG  EQU   SWD
SWE      EQU   COMMON+126
SWF      EQU   COMMON+127
QSADMP   EQU   SWF
BUFSW    EQU   COMMON+128
PRSW     EQU   COMMON+129
TABLE    EQU   COMMON+659
HEXTABL  EQU   TABLE+63
ASYNTAX  EQU   COMMON+1508
SYNMSGA  EQU   COMMON+1532
AEREXIT  EQU   COMMON+1536
DCBADDRS EQU   COMMON+1608
@NM00054 EQU   DCBADDRS+16
@NM00055 EQU   @NM00054
BRRDINIT EQU   COMMON+1988
INPUTLST EQU   0
CVTTZPTR EQU   INPUTLST
TODPTR   EQU   INPUTLST+4
OUTAREA  EQU   INPUTLST+8
CVTTZVAL EQU   0
TODVALUE EQU   0
TIMEAREA EQU   0
TIMEERIA EQU   0
SECONDS  EQU   0
AMDPRXIT EQU   0
INCQUANT EQU   0
LISTPTR  EQU   LISTBASE
CVTS01   EQU   CVTPGSIA
CVTLPDSR EQU   CVTS01+4
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTRV620 EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTRV612 EQU   CVTS01+664
CVTRV611 EQU   CVTS01+660
CVTRV610 EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTRV608 EQU   CVTS01+648
CVTRV607 EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTRV519 EQU   CVTS01+92
CVTRV327 EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTGETL  EQU   CVTS01
CSADDR   EQU   COMMON+2072
@NM00060 EQU   COMMON+2070
TOPICHDR EQU   COMMON+2060
DFLTCSA  EQU   COMMON+2056
LPAMAX   EQU   COMMON+2052
DNUCTOP  EQU   COMMON+2048
XLMAX    EQU   COMMON+2044
DQEMAX   EQU   COMMON+2042
ASCBMAX  EQU   COMMON+2040
TCBMAX   EQU   COMMON+2038
SRBMAX   EQU   COMMON+2036
DDMAX    EQU   COMMON+2034
DEBMAX   EQU   COMMON+2032
JPQMAX   EQU   COMMON+2030
LLEMAX   EQU   COMMON+2028
PQEMAX   EQU   COMMON+2026
RBMAX    EQU   COMMON+2024
@NM00059 EQU   COMMON+2023
EXITFLAG EQU   COMMON+2022
AUSRASID EQU   COMMON+2020
AUSRTCBA EQU   COMMON+2016
AUSRDEL  EQU   COMMON+2012
AUSREXIT EQU   COMMON+2008
AUSRINIT EQU   COMMON+2004
ASRBFMT  EQU   COMMON+2000
AASCBFMT EQU   COMMON+1996
BRRDADJ  EQU   COMMON+1992
BRRDDATA EQU   COMMON+1984
BUFERMAP EQU   COMMON+1980
ASCBMAP  EQU   COMMON+1976
CPUMAP   EQU   COMMON+1972
ASIDNDX  EQU   COMMON+1968
@NM00058 EQU   COMMON+1964
HDRTITLE EQU   COMMON+1864
HDRREGS  EQU   COMMON+1696
SACSWCAW EQU   COMMON+1684
ASVTADDR EQU   COMMON+1680
PREFXRGV EQU   COMMON+1676
PREFXRGR EQU   COMMON+1672
CURASCB  EQU   COMMON+1668
IPLCPU   EQU   COMMON+1666
QASID    EQU   COMMON+1664
QAPFT    EQU   COMMON+1660
@NM00057 EQU   COMMON+1656
REALMAX  EQU   COMMON+1652
SEGTABOR EQU   COMMON+1648
REALMAP  EQU   COMMON+1644
@NM00056 EQU   COMMON+1641
EDITER   EQU   COMMON+1640
AROOT    EQU   COMMON+1636
AEDITCB  EQU   COMMON+1632
TRCCOUNT EQU   COMMON+1628
ASYSUDCB EQU   @NM00054+1
ENDLIST  EQU   @NM00055
AINDCB   EQU   DCBADDRS+12
ARDRDCB  EQU   DCBADDRS+8
APTRDCB  EQU   DCBADDRS+4
AOUTDCB  EQU   DCBADDRS
ATCBSMRY EQU   COMMON+1604
ATCBSMFR EQU   COMMON+1600
ONGOPTR  EQU   COMMON+1596
AEND     EQU   COMMON+1592
AERRMSGA EQU   COMMON+1584
BUFREINT EQU   COMMON+1580
BUFSUM   EQU   COMMON+1576
APRTSTG  EQU   COMMON+1572
AFORMAT  EQU   COMMON+1568
ASTPROUT EQU   COMMON+1564
APCBENQ  EQU   COMMON+1560
ATCBRTRV EQU   COMMON+1556
ATCBREMV EQU   COMMON+1552
ATCBSAVE EQU   COMMON+1548
QATMERTN EQU   COMMON+1544
ALOADER  EQU   COMMON+1540
STOPEXIT EQU   COMMON+1528
ARGNBND  EQU   COMMON+1524
AWRDCNVT EQU   COMMON+1520
AADRCNVT EQU   COMMON+1516
AFMTLINE EQU   COMMON+1512
APRTMSG  EQU   COMMON+1504
AWRITE   EQU   COMMON+1500
NONBLNK  EQU   COMMON+1244
BLNK     EQU   COMMON+988
@NM00053 EQU   COMMON+972
@NM00052 EQU   COMMON+915
EBCTABL  EQU   HEXTABL+10
@NM00051 EQU   HEXTABL
@NM00050 EQU   TABLE
CAPTABL  EQU   COMMON+403
TITLEPGE EQU   COMMON+394
@NM00049 EQU   COMMON+392
TITLETME EQU   COMMON+379
@NM00048 EQU   COMMON+377
TITLEDTE EQU   COMMON+364
@NM00047 EQU   COMMON+362
TITLEMOD EQU   COMMON+347
TITLEMSG EQU   COMMON+283
MSG2     EQU   COMMON+257
MSG1     EQU   COMMON+231
STOP     EQU   COMMON+227
TITLE    EQU   COMMON+222
BLANKS   EQU   COMMON+214
WTORMSG  EQU   COMMON+133
@NM00046 EQU   COMMON+130
@NM00045 EQU   PRSW
@NM00044 EQU   PRSW
PRNTREAL EQU   PRSW
PRNTRL   EQU   PRSW
TTLSW    EQU   PRSW
@NM00043 EQU   PRSW
QSEGTBSW EQU   PRSW
@NM00042 EQU   PRSW
@NM00041 EQU   BUFSW
PREFM    EQU   BUFSW
@NM00040 EQU   BUFSW
@NM00039 EQU   BUFSW
@NM00038 EQU   BUFSW
@NM00037 EQU   BUFSW
@NM00036 EQU   BUFSW
@NM00035 EQU   BUFSW
@NM00034 EQU   SWF
QUT1LOD  EQU   SWF
@NM00033 EQU   SWF
PAGEOK   EQU   SWF
DMPIC    EQU   SWF
NUCTFRMC EQU   SWF
QPRDINIT EQU   SWF
@NM00032 EQU   SWE
@NM00031 EQU   SWE
@NM00030 EQU   SWE
BUILDMAP EQU   SWE
TITLESW  EQU   SWE
RESPC    EQU   SWE
@NM00029 EQU   SWE
STOPSW   EQU   SWE
@NM00028 EQU   SWD
GPRSFND  EQU   SWD
CONTSW   EQU   SWD
NOLOADSW EQU   SWD
@NM00027 EQU   SWD
@NM00026 EQU   SWD
FLSHMODE EQU   SWD
@NM00025 EQU   SWC
@NM00024 EQU   SWC
TREADIN  EQU   SWC
POSITSW  EQU   SWC
SETFLSH  EQU   SWC
MSTRSW   EQU   SWC
@NM00023 EQU   SWB
@NM00022 EQU   SWB
QSYSUT2  EQU   SWB
ENDSW    EQU   SWB
@NM00021 EQU   SWB
@NM00020 EQU   SWB
FMTERR   EQU   SWB
IOERR    EQU   SWB
RDRSW    EQU   SWA
SETCVTSW EQU   SWA
@NM00019 EQU   SWA
GOSW     EQU   SWA
@NM00018 EQU   SWA
@NM00017 EQU   SWA
@NM00016 EQU   SWA
@NM00015 EQU   SWA
LINENUM  EQU   COMMON+120
LINENUMB EQU   COMMON+118
SIXTEEN  EQU   COMMON+116
TWELVE   EQU   COMMON+114
ELEVEN   EQU   COMMON+112
HTEN     EQU   COMMON+110
EIGHT    EQU   COMMON+108
SEVEN    EQU   COMMON+106
FIVE     EQU   COMMON+104
FOUR     EQU   COMMON+102
THREE    EQU   COMMON+100
TWO      EQU   COMMON+98
ONEA     EQU   COMMON+96
READTM   EQU   COMMON+92
RDERCNT  EQU   COMMON+88
READNO   EQU   COMMON+84
RDENTRY  EQU   COMMON+80
@NM00014 EQU   COMMON+79
RETCODE  EQU   COMMON+78
FILESEQ  EQU   COMMON+76
INDD     EQU   COMMON+68
PCBPTR   EQU   COMMON+60
CVTADDR  EQU   COMMON+56
TCBLIST  EQU   COMMON+52
CURBUF   EQU   COMMON+48
PAGENUMB EQU   COMMON+44
LINECNT  EQU   COMMON+40
SIX      EQU   COMMON+36
NUCTOP   EQU   COMMON+32
WORK1    EQU   COMMON+24
DELIMCD  EQU   COMMON+20
KYWDEND  EQU   COMMON+16
KYWDBGN  EQU   COMMON+12
VERBEND  EQU   COMMON+8
VERBGN   EQU   COMMON+4
LPDEXTAD EQU   LPDEMJNM+4
LPDEXTLN EQU   LPDEMJNM
LPDEATT3 EQU   LPDE+30
LPDEAUTH EQU   LPDEATT2
LPDESYSL EQU   LPDEATT2
@NM00013 EQU   LPDEATT2
@NM00012 EQU   LPDEATT2
LPDERLC  EQU   LPDEATT2
LPDEXLE  EQU   LPDEATT2
@NM00011 EQU   LPDEATT2
LPDENLR  EQU   LPDEATTR
@NM00010 EQU   LPDEATTR
LPDEMIN  EQU   LPDEATTR
@NM00009 EQU   LPDEATTR
LPDESER  EQU   LPDEATTR
LPDEREN  EQU   LPDEATTR
@NM00008 EQU   LPDEATTR
LPDENIP  EQU   LPDEATTR
@NM00007 EQU   LPDE+26
LPDEUSE  EQU   LPDE+24
LPDEXLP  EQU   LPDE+20
LPDENAME EQU   LPDE+8
LPDERBP  EQU   LPDE+4
LPDECHN  EQU   LPDE
CDATTR3  EQU   CDENTRY+30
CDAUTH   EQU   CDATTR2
CDSYSLIB EQU   CDATTR2
CDOLY    EQU   CDATTR2
@NM00006 EQU   CDATTR2
CDRLC    EQU   CDATTR2
CDXLE    EQU   CDATTR2
CDREL    EQU   CDATTR2
CDSPZ    EQU   CDATTR2
CDNLR    EQU   CDATTR
CDJPA    EQU   CDATTR
CDMIN    EQU   CDATTR
CDNFN    EQU   CDATTR
CDSER    EQU   CDATTR
CDREN    EQU   CDATTR
CDNIC    EQU   CDATTR
CDNIP    EQU   CDATTR
@NM00005 EQU   CDENTRY+26
CDUSE    EQU   CDENTRY+24
CDXLMJP  EQU   CDENTRY+20
CDNAME   EQU   CDENTRY+8
CDRRBP   EQU   CDENTRY+4
CDCHAIN  EQU   CDENTRY
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00004 EQU   CVTFIX+248
@NM00003 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRSV37 EQU   CVTDMSR
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
ITEMS    EQU   LISTBLK
@NM00002 EQU   BLDLENTR+11
@NM00001 EQU   BLDLENTR+8
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00086 EQU   TYPELOAD
@RT00103 EQU   XITENPT
@RT00110 EQU   SETLIMIT
@RT00116 EQU   INCORE
@RT00167 EQU   WHATSIN
@RF00211 EQU   OK2LOAD
@RT00236 EQU   LOADIN
@RT00243 EQU   XLODONLY
@RT00257 EQU   LOAD
@RT00266 EQU   INCORE
@RF00333 EQU   @EL00001
DELETOK  EQU   @EL00004
@RT00405 EQU   @EL00005
@ENDDATA EQU   *
         END   AMDPRSEG,(C'PLS2155',0701,76209)
