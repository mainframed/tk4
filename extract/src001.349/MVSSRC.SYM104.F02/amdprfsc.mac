         TITLE 'AMDPRFSC - FORMATTING SERVICE CONTROL ROUTINE          *
                       '
AMDPRFSC CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL2(@EP00001-@MAINENT)
         DC    AL1(16)                                          01S0001
         DC    C'AMDPRFSC  73.353'                              01S0001
FORMAT   DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL2(@EP00095-FORMAT)
         ENTRY FORMAT
TCBSMRY  DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL2(@EP00675-TCBSMRY)
         ENTRY TCBSMRY
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @11,0                                            01S0001
@PSTART  LA    @10,4095(,@11)                                   01S0001
         USING @PSTART,@11                                      01S0001
         USING @PSTART+4095,@10                                 01S0001
         ST    @13,@SA00001+4                                   01S0001
         LA    @14,@SA00001                                     01S0001
         ST    @14,8(,@13)                                      01S0001
         LR    @13,@14                                          01S0001
         AH    @15,4(,@15)                                      01S0001
         BR    @15                                              01S0001
@EP00001 DS    0H                                               01S0002
*/*                                                                  */
*/* INITIALIZATION ROUTINE - ENTRY FROM AMDPRSEG                     */
*/*                                                                  */
*/* STORE 2 ENTRY POINT ADDRS IN COMMON FOR OTHER ROUTINES TO USE    */
*AFORMAT=ADDR(FORMAT);                                          01S0092
         L     @15,@CA02162                                     01S0092
         ST    @15,AFORMAT(,COMBASE)                            01S0092
*ATCBSMRY=ADDR(TCBSMRY);                                        01S0093
         L     @15,@CA02163                                     01S0093
         ST    @15,ATCBSMRY(,COMBASE)                           01S0093
*RETURN;                                                        01S0094
@EL00001 L     @13,4(,@13)                                      01S0094
@EF00001 DS    0H                                               01S0094
@ER00001 LM    @14,@12,12(@13)                                  01S0094
         BR    @14                                              01S0094
*/*                                                             01S0095
*   FORMAT - ENTRY TO FORMAT CONTROL BLOCKS.                    01S0095
*     THIS ROUTINE PERFORMS INITIALIZATION FOR THE STOP AND ERROR
*     ROUTINES AND ACTIVATES THEM. THEN THE PARAMETER LIST IS   01S0095
*     EXAMINED TO DETERMINE THE PROCESSING NEEDED. THE PARMLIST 01S0095
*     WILL CONTAIN EITHER AN INDICATOR THAT ALL ASCBS ARE TO BE 01S0095
*     DONE, OR AN ASCB ADDRESS AND THE CORRESPONDING ASID. AFTER
*     THE FORMATTING IS COMPLETED, THE ERROR ROUTINE IS DE-     01S0095
*     ACTIVATED, AND THE ASCBLIST IS CLEANED UP. RETURN IS MADE 01S0095
*     TO THE CALLER WITH THE STOP ROUTINE STILL ACTIVE BECAUSE  01S0095
*     TCB SUMMARY TABLES HAVE PROBABLY BEEN CREATED. THE CALLER 01S0095
*     MUST EVENTUALLY CALL TCBSMRY TO FREE THE TABLES           01S0095
*     AND DE-ACTIVATE THE STOP ROUTINE.                         01S0095
*                                                                    */
*FORMAT:                                                        01S0095
*  ENTRY (PASCB,PASID);                                         01S0095
@EP00095 MVC   @PC00001(8),0(@01)                               01S0095
*RFY R13 RSTD;                                                  01S0096
*SAVER13=R13;                           /* SAVE R13 FOR ERR OR STOP  */
         ST    R13,SAVER13                                      01S0097
*RFY R13 UNRSTD;                                                01S0098
*SAVERR=ERRADDR;                        /* SWAP ERROR ROUTINES       */
         MVC   SAVERR(4),ERRADDR(COMBASE)                       01S0099
*ERRADDR=ADDR(FSCERR);                                          01S0100
         LA    @15,FSCERR                                       01S0100
         ST    @15,ERRADDR(,COMBASE)                            01S0100
*IF STOPSAVD = OFF THEN                 /* DO NOT SWAP STOP ROUTINE  */
         TM    STOPSAVD,B'00000001'                             01S0101
         BNZ   @RF00101                                         01S0101
*  DO;                                  /* IF ALREADY THERE          */
*    SAVSTOP=STOPEXIT;                                          01S0103
         MVC   SAVSTOP(4),STOPEXIT(COMBASE)                     01S0103
*    STOPEXIT=ADDR(FSCSTOP);                                    01S0104
         LA    @15,FSCSTOP                                      01S0104
         ST    @15,STOPEXIT(,COMBASE)                           01S0104
*    STOPSAVD=ON;                                               01S0105
         OI    STOPSAVD,B'00000001'                             01S0105
*  END;                                                         01S0106
*/* GET CURRENT TCB ADDRESS (IF AVAILABLE) FOR AMDPRFTC              */
*                                                               01S0107
* PREG=ADDR(PSATOLD);                                           01S0107
@RF00101 LA    PREG,PSATOLD                                     01S0107
* R0=0;                                                         01S0108
         SR    R0,R0                                            01S0108
* GEN REFS(BRRDDATA)SETS(PREG,READERR)                          01S0109
*     FLOWS(FSCERR)                                             01S0109
*   (BRREAD (PREG),,ASID=(R0));                                 01S0109
         BRREAD (PREG),,ASID=(R0)
*IF READERR = OFF THEN                                          01S0110
         TM    READERR,B'00000010'                              01S0110
         BNZ   @RF00110                                         01S0110
*  CURTCB=RDPTR;                                                01S0111
         L     @15,@CA01872                                     01S0111
         SR    @14,@14                                          01S0111
         ICM   @14,7,RDPTR(PREG)                                01S0111
         ST    @14,CURTCB-CURTCB(,@15)                          01S0111
*ELSE                                                           01S0112
*  DO;                                                          01S0112
         B     @RC00110                                         01S0112
@RF00110 DS    0H                                               01S0113
*    CURTCB=0;                                                  01S0113
         L     @15,@CA01872                                     01S0113
         SR    @14,@14                                          01S0113
         ST    @14,CURTCB-CURTCB(,@15)                          01S0113
*    READERR=OFF;                                               01S0114
         NI    READERR,B'11111101'                              01S0114
*  END;                                                         01S0115
*IF PASCB=ALLFLAG THEN                  /* SHOULD WE DO ALL ASCBS    */
@RC00110 L     @15,@PC00001                                     01S0116
         CLC   PASCB(4,@15),@CF01848                            01S0116
         BNE   @RF00116                                         01S0116
*  DO;                                  /* YES, GO GET AS MANY ASCBS */
*                                       /*    AS POSSIBLE            */
*/*                                                             02S0118
*   THIS SEGMENT ATTEMPTS TO PROCESS ALL ASCBS IN THE DUMP      02S0118
*                                                                    */
*/* IF CVT IS IN THE DUMP, WE MAY FIND SOME ASCBS SOMEWHERE          */
*IF CVTADDR ^= 0 THEN                                           02S0118
         L     @15,CVTADDR(,COMBASE)                            02S0118
         LTR   @15,@15                                          02S0118
         BZ    @RF00118                                         02S0118
*  DO;                                                          02S0119
*    CVTPTR=CVTADDR;                                            02S0120
         LR    CVTPTR,@15                                       02S0120
*/* READ FOR ASVT POINTER                                            */
*                                                               02S0121
*    PREG=ADDR(CVTASVT);                                        02S0121
         LA    PREG,CVTASVT(,CVTPTR)                            02S0121
*    GEN REFS(BRRDDATA)SETS(PREG,READERR)                       02S0122
*        FLOWS(FSCERR)                                          02S0122
*      (BRREAD (PREG));                                         02S0122
         BRREAD (PREG)
*/* IF ASVT POINTER WAS READ, USE IT                                 */
*    IF READERR=OFF THEN                                        02S0123
         TM    READERR,B'00000010'                              02S0123
         BNZ   @RF00123                                         02S0123
*      DO;                                                      02S0124
*        ASVTPTR=RDPTR;                                         02S0125
         SR    ASVTPTR,ASVTPTR                                  02S0125
         ICM   ASVTPTR,7,RDPTR(PREG)                            02S0125
*        IF ASVTPTR ^= 0 THEN           /* IS ASVT THERE             */
         LTR   ASVTPTR,ASVTPTR                                  02S0126
         BZ    @RF00126                                         02S0126
*          DO;                          /* YES                       */
*/* READ MAXIMUM USER FIELD FROM ASVT (FOR LOOP CONTROL)             */
*                                                               02S0128
*            PREG=ADDR(ASVTMAXU);                               02S0128
         LA    PREG,ASVTMAXU(,ASVTPTR)                          02S0128
*            GEN REFS(BRRDDATA)SETS(PREG,READERR)               02S0129
*                FLOWS(FSCERR)                                  02S0129
*              (BRREAD (PREG));                                 02S0129
         BRREAD (PREG)
*/* IF ASVTMAXU WAS READ OK, LOOP THRU ASVT GETTING ASCBS            */
*            IF READERR=OFF THEN                                02S0130
         TM    READERR,B'00000010'                              02S0130
         BNZ   @RF00130                                         02S0130
*              DO;                                              02S0131
*                ASMAXU=RDWORD;                                 02S0132
         MVC   ASMAXU(4),RDWORD(PREG)                           02S0132
*/* INITIALIZE COUNTERS FOR ASVT LOOP                                */
*                ASCBCNT=1;                                     02S0133
         LA    @06,1                                            02S0133
         LR    ASCBCNT,@06                                      02S0133
*/*                                                             03S0134
*   THIS SEGMENT SEARCHES THE ASVT FOR ASCBS                    03S0134
*                                                                    */
*DO INCTR=1 TO ASMAXU WHILE OVERLIMT=OFF; /* LOOP THRU ASVT          */
         LR    INCTR,@06                                        03S0134
         B     @DE00134                                         03S0134
@DL00134 TM    OVERLIMT,B'10000000'                             03S0134
         BNZ   @DC00134                                         03S0134
*/* READ AN ENTRY                                                    */
*                                                               03S0135
*  PREG=ADDR(ASVTENTY(INCTR));                                  03S0135
         LR    @09,INCTR                                        03S0135
         SLA   @09,2                                            03S0135
         LA    PREG,ASVTENTY-4(@09,ASVTPTR)                     03S0135
*  R0=0;                                                        03S0136
         SR    R0,R0                                            03S0136
*  GEN REFS(BRRDDATA)SETS(PREG,READERR)                         03S0137
*      FLOWS(FSCERR)                                            03S0137
*    (BRREAD (PREG),,ASID=(R0));                                03S0137
         BRREAD (PREG),,ASID=(R0)
*/* IF ENTRY WAS READ OK, CHECK FOR ASCB POINTER IN ENTRY            */
*  IF READERR=OFF THEN                                          03S0138
         TM    READERR,B'00000010'                              03S0138
         BNZ   @RF00138                                         03S0138
*    DO;                                                        03S0139
*      IF READALL(1)=OFF & READALL(9:32) ^= '000000'X THEN      03S0140
         TM    READALL(PREG),B'10000000'                        03S0140
         BNZ   @RF00140                                         03S0140
         CLC   READALL+1(3,PREG),@CB02171                       03S0140
         BE    @RF00140                                         03S0140
*        DO;                                                    03S0141
*          TEMPASCB=RDPTR;                                      03S0142
         SR    @09,@09                                          03S0142
         ICM   @09,7,RDPTR(PREG)                                03S0142
         ST    @09,TEMPASCB                                     03S0142
*          RFY ASCB BASED(TEMPASCB);                            03S0143
*/* READ ASID FROM ASCB                                              */
*                                                               03S0144
*          PREG=ADDR(ASCBASID);                                 03S0144
         LA    PREG,ASCBASID(,@09)                              03S0144
*          GEN REFS(BRRDDATA)SETS(PREG,READERR)                 03S0145
*              FLOWS(FSCERR)                                    03S0145
*            (BRREAD (PREG));                                   03S0145
         BRREAD (PREG)
*/* IF ASID WAS READ OK, USE IT                                      */
*          IF READERR=OFF THEN                                  03S0146
         TM    READERR,B'00000010'                              03S0146
         BNZ   @RF00146                                         03S0146
*            TEMPASID=RDHWORD;                                  03S0147
         MVC   TEMPASID(2),RDHWORD(PREG)                        03S0147
*          ELSE                                                 03S0148
*/* OTHERWISE, CALCULATE WHAT IT SHOULD BE                           */
*            DO;                                                03S0148
         B     @RC00146                                         03S0148
@RF00146 DS    0H                                               03S0149
*              TEMPASID=INCTR;                                  03S0149
         STH   INCTR,TEMPASID                                   03S0149
*              READERR=OFF;                                     03S0150
         NI    READERR,B'11111101'                              03S0150
*            END;                                               03S0151
*/* QUEUE UP THE ASCB (QUEUEING USED TO CATCH DUPLICATES)            */
*          LISTSAVE=TCBLIST;                                    03S0152
@RC00146 L     LISTSAVE,TCBLIST(,COMBASE)                       03S0152
*          TCBLIST=ASCBLIST;                                    03S0153
         MVC   TCBLIST(4,COMBASE),ASCBLIST                      03S0153
*          RFY R2 RSTD;                                         03S0154
*          R2=TEMPASCB;                                         03S0155
         L     R2,TEMPASCB                                      03S0155
*          CALL ASCBSAV;                                        03S0156
         L     @15,ATCBSAVE(,COMBASE)                           03S0156
         BALR  @14,@15                                          03S0156
*          RFY R2 UNRSTD;                                       03S0157
*          RFY R15 RSTD;                                        03S0158
*          RC=R15;                      /* SAVE RETURN CODE          */
         ST    R15,RC                                           03S0159
*          RFY R15 UNRSTD;                                      03S0160
*          ASCBLIST=TCBLIST;                                    03S0161
         MVC   ASCBLIST(4),TCBLIST(COMBASE)                     03S0161
*          TCBLIST=LISTSAVE;                                    03S0162
         ST    LISTSAVE,TCBLIST(,COMBASE)                       03S0162
*          IF RC=0 THEN                 /* WAS ASCB ALREADY THERE    */
         L     @09,RC                                           03S0163
         LTR   @09,@09                                          03S0163
         BNZ   @RF00163                                         03S0163
*            DO;                        /* NO                        */
*              IF ASCBCNT>ASCBMAX THEN  /* ARE WE OVER ASCB LIMIT    */
         CH    ASCBCNT,ASCBMAX(,COMBASE)                        03S0165
         BNH   @RF00165                                         03S0165
*                OVERLIMT=ON;           /* YES, LEAVE LOOP, ISSUE MSG*/
         OI    OVERLIMT,B'10000000'                             03S0166
*              ELSE                     /* NO, PROCESS ASCB          */
*                DO;                                            03S0167
         B     @RC00165                                         03S0167
@RF00165 DS    0H                                               03S0168
*                  CALL DOADDRSP (TEMPASCB,TEMPASID);           03S0168
         LA    @01,@AL00168                                     03S0168
         BAL   @14,DOADDRSP                                     03S0168
*/* SKIP TO NEW PAGE                                                 */
*                                                               03S0169
*                  GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP) 03S0169
*                    (BRWRITE SKIP);                            03S0169
         BRWRITE SKIP
*                  ASCBCNT = ASCBCNT+1;                         03S0170
         AH    ASCBCNT,@CH00076                                 03S0170
*                END;                                           03S0171
*            END;                                               03S0172
*        END;                                                   03S0173
*    END;                                                       03S0174
*  ELSE                                                         03S0175
*/* COULDN'T READ ASVT ENTRY - ISSUE MSG & USE DISP CHAIN FOR REST   */
*/*   OF ASCBS                                                       */
*    DO;                                                        03S0175
         B     @RC00138                                         03S0175
@RF00138 DS    0H                                               03S0176
*      BUFFER(1:LENGTH(ASENTERM))=ASENTERM;                     03S0176
*                                                               03S0176
         L     @09,CURBUF(,COMBASE)                             03S0176
         MVC   BUFFER(29,@09),ASENTERM                          03S0176
*      GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)             03S0177
*        (BRWRITE 1);                                           03S0177
         BRWRITE 1
*      INCTR=ASMAXU;                    /* TO EXIT FROM LOOP         */
         L     INCTR,ASMAXU                                     03S0178
*      USEDSP=ON;                                               03S0179
*      READERR=OFF;                                             03S0180
         OI    USEDSP,B'00000100'                               03S0180
         NI    READERR,B'11111101'                              03S0180
*    END;                                                       03S0181
*END;                                                           03S0182
@RC00138 AH    INCTR,@CH00076                                   03S0182
@DE00134 C     INCTR,ASMAXU                                     03S0182
         BNH   @DL00134                                         03S0182
@DC00134 DS    0H                                               03S0183
*RFY ASCB BASED(ASCBPTR);                                       03S0183
*/* IF THERE WERE TOO MANY ASCBS, ISSUE ERROR MSGS & TERMINATE       */
*                IF OVERLIMT=ON THEN                            02S0184
         TM    OVERLIMT,B'10000000'                             02S0184
         BNO   @RF00184                                         02S0184
*                  DO;                                          02S0185
*                    CVD (ASCBMAX,FWORK);                       02S0186
         LH    @15,ASCBMAX(,COMBASE)                            02S0186
         CVD   @15,@TS00001                                     02S0186
         MVC   FWORK(4),@TS00001+4                              02S0186
*                    FWORK(29:32)=SIGNF;                        02S0187
         OI    FWORK+3,B'00001111'                              02S0187
*                    UNPK (ALIMIT,FWORK);                       02S0188
         UNPK  ALIMIT(5),FWORK(4)                               02S0188
*                    BUFFER(1:LENGTH(ASCBLIMG))=ASCBLIMG;       02S0189
*                                                               02S0189
         L     @15,CURBUF(,COMBASE)                             02S0189
         MVC   BUFFER(33,@15),ASCBLIMG                          02S0189
*                    GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)
*                      (BRWRITE 1);                             02S0190
         BRWRITE 1
*                    OVERLIMT=OFF;                              02S0191
*                    PTERM=ON;                                  02S0192
         OI    PTERM,B'01000000'                                02S0192
         NI    OVERLIMT,B'01111111'                             02S0192
*                  END;                                         02S0193
*              END;                                             02S0194
*            ELSE                                               02S0195
*/* COULDN'T GET ASVTMAXU - PRINT ERR MSG & USE DISPATCHING CHAIN    */
*              DO;                                              02S0195
         B     @RC00130                                         02S0195
@RF00130 DS    0H                                               02S0196
*                BUFFER(1:LENGTH(ASERMG))=ASERMG;               02S0196
*                                                               02S0196
         L     @15,CURBUF(,COMBASE)                             02S0196
         MVC   BUFFER(18,@15),ASERMG                            02S0196
*                GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)   02S0197
*                  (BRWRITE 1);                                 02S0197
         BRWRITE 1
*                USEDSP=ON;                                     02S0198
*                READERR=OFF;                                   02S0199
         OI    USEDSP,B'00000100'                               02S0199
         NI    READERR,B'11111101'                              02S0199
*              END;                                             02S0200
*          END;                                                 02S0201
*        ELSE                                                   02S0202
*/* ASVT POINTER WAS 0 - PRINT ERR MSG & USE DISPATCHING CHAIN       */
*          DO;                                                  02S0202
         B     @RC00126                                         02S0202
@RF00126 DS    0H                                               02S0203
*            BUFFER(1:LENGTH(ASVT0MSG))=ASVT0MSG;               02S0203
*                                                               02S0203
         L     @15,CURBUF(,COMBASE)                             02S0203
         MVC   BUFFER(17,@15),ASVT0MSG                          02S0203
*            GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)       02S0204
*              (BRWRITE 1);                                     02S0204
         BRWRITE 1
*            USEDSP=ON;                                         02S0205
         OI    USEDSP,B'00000100'                               02S0205
*          END;                                                 02S0206
*      END;                                                     02S0207
*    ELSE                                                       02S0208
*/* COULDN'T GET ASVT PTR - ISSUE MSG & USE DISP CHAIN               */
*      DO;                                                      02S0208
         B     @RC00123                                         02S0208
@RF00123 DS    0H                                               02S0209
*        BUFFER(1:LENGTH(ASERMG))=ASERMG;                       02S0209
*                                                               02S0209
         L     @15,CURBUF(,COMBASE)                             02S0209
         MVC   BUFFER(18,@15),ASERMG                            02S0209
*        GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)           02S0210
*          (BRWRITE 1);                                         02S0210
         BRWRITE 1
*        USEDSP=ON;                                             02S0211
*        READERR=OFF;                                           02S0212
         OI    USEDSP,B'00000100'                               02S0212
         NI    READERR,B'11111101'                              02S0212
*      END;                                                     02S0213
*/* USE ASCB DISPATCHING CHAIN IF INDICATED EARLIER                  */
*/*                                                             03S0214
*   THIS SEGMENT WILL USE THE ASCB DISPATCHING CHAIN (AS MAPPED OUT
*     BY AMDPRRDC) IF THE USE OF THE ASVT WAS NOT ENTIRELY SUCCESSFUL
*                                                                    */
*IF USEDSP=ON THEN                      /* DO WE USE ASCB DISP CHAIN */
@RC00123 TM    USEDSP,B'00000100'                               03S0214
         BNO   @RF00214                                         03S0214
*  DO;                                  /* YES, AND ISSUE MSG        */
*    USEDSP=OFF;                                                03S0216
         NI    USEDSP,B'11111011'                               03S0216
*    BUFFER(1:LENGTH(UDSPMSG))=UDSPMSG;                         03S0217
*                                                               03S0217
         L     @15,CURBUF(,COMBASE)                             03S0217
         MVC   BUFFER(39,@15),UDSPMSG                           03S0217
*    GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)               03S0218
*      (BRWRITE 1);                                             03S0218
         BRWRITE 1
*/* IF AMDPRRDC WAS ABLE TO READ ASCB DISP CHAIN, USE IT             */
*    IF ASCBMAP ^= 0 THEN                                       03S0219
         L     @15,ASCBMAP(,COMBASE)                            03S0219
         LTR   @15,@15                                          03S0219
         BZ    @RF00219                                         03S0219
*      DO;                                                      03S0220
*/* POINT TO ASCB MAP AND TABLE (BUILT BY RDC FROM DISP CHAIN)       */
*        MPPTR=ASCBMAP;                                         03S0221
         LR    MPPTR,@15                                        03S0221
*        TBPTR=ASCBTAB;                                         03S0222
         L     TBPTR,ASCBTAB(,MPPTR)                            03S0222
*/* LOOP THRU BOTH MAP AND TABLE                                     */
*        DO INCTR=1 TO ASCBNUM;                                 03S0223
         LA    INCTR,1                                          03S0223
         B     @DE00223                                         03S0223
@DL00223 DS    0H                                               03S0224
*/* IF RDC GOT ERROR READING ASID, SET ERROR FLAG FOR DOADDRSP       */
*          IF BADASID(INCTR)=ON THEN                            03S0224
         LR    @09,INCTR                                        03S0224
         SLA   @09,3                                            03S0224
         ALR   @09,TBPTR                                        03S0224
         AL    @09,@CF02210                                     03S0224
         TM    BADASID(@09),B'10000000'                         03S0224
         BNO   @RF00224                                         03S0224
*            ASIDSTAT=ON;                                       03S0225
         OI    ASIDSTAT,B'00100000'                             03S0225
*/* QUEUE UP ASCB                                                    */
*          LISTSAVE=TCBLIST;                                    03S0226
@RF00224 L     LISTSAVE,TCBLIST(,COMBASE)                       03S0226
*          TCBLIST=ASCBLIST;                                    03S0227
         MVC   TCBLIST(4,COMBASE),ASCBLIST                      03S0227
*          RFY R2 RSTD;                                         03S0228
*          R2=TBASCB(INCTR);                                    03S0229
         LR    @06,INCTR                                        03S0229
         SLA   @06,3                                            03S0229
         AL    @06,@CF02210                                     03S0229
         L     R2,TBASCB(@06,TBPTR)                             03S0229
*          CALL ASCBSAV;                                        03S0230
         L     @15,ATCBSAVE(,COMBASE)                           03S0230
         BALR  @14,@15                                          03S0230
*          RFY R2 UNRSTD;                                       03S0231
*          RFY R15 RSTD;                                        03S0232
*          RC=R15;                      /* SAVE RET CODE             */
         ST    R15,RC                                           03S0233
*          RFY R15 UNRSTD;                                      03S0234
*          ASCBLIST=TCBLIST;                                    03S0235
         MVC   ASCBLIST(4),TCBLIST(COMBASE)                     03S0235
*          TCBLIST=LISTSAVE;                                    03S0236
         ST    LISTSAVE,TCBLIST(,COMBASE)                       03S0236
*/* IF ASCB WAS NOT ALREADY QUEUED, PROCESS IT                       */
*          IF RC=0 THEN                                         03S0237
         L     @09,RC                                           03S0237
         LTR   @09,@09                                          03S0237
         BNZ   @RF00237                                         03S0237
*            DO;                                                03S0238
*              CALL DOADDRSP (TBASCB(INCTR),MPASID(INCTR));     03S0239
         LR    @09,INCTR                                        03S0239
         SLA   @09,3                                            03S0239
         AL    @09,@CF02210                                     03S0239
         LA    @09,TBASCB(@09,TBPTR)                            03S0239
         ST    @09,@AL00001                                     03S0239
         LR    @09,INCTR                                        03S0239
         AR    @09,@09                                          03S0239
         LA    @09,MPASID-2(@09,MPPTR)                          03S0239
         ST    @09,@AL00001+4                                   03S0239
         LA    @01,@AL00001                                     03S0239
         BAL   @14,DOADDRSP                                     03S0239
*/* IF THIS ISN'T THE LAST ASCB, THEN EJECT TO NEW PAGE FOR NEXT ONE */
*              IF INCTR<ASCBNUM THEN                            03S0240
         CH    INCTR,ASCBNUM(,MPPTR)                            03S0240
         BNL   @RF00240                                         03S0240
*                DO;                                            03S0241
*                                                               03S0241
*                  GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP) 03S0242
*                    (BRWRITE SKIP);                            03S0242
         BRWRITE SKIP
*                END;                                           03S0243
*            END;                                               03S0244
@RF00240 DS    0H                                               03S0245
*        END;                                                   03S0245
@RF00237 AH    INCTR,@CH00076                                   03S0245
@DE00223 CH    INCTR,ASCBNUM(,MPPTR)                            03S0245
         BNH   @DL00223                                         03S0245
*      END;                                                     03S0246
*    ELSE                                                       03S0247
*/* RDC COULDN'T READ DISP CHAIN - ISSUE ERR MSG & TERMINATE         */
*      DO;                                                      03S0247
         B     @RC00219                                         03S0247
@RF00219 DS    0H                                               03S0248
*        BUFFER(1:LENGTH(MAP0MSG))=MAP0MSG;                     03S0248
*                                                               03S0248
         L     @15,CURBUF(,COMBASE)                             03S0248
         MVC   BUFFER(37,@15),MAP0MSG                           03S0248
*        GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)           03S0249
*          (BRWRITE 1);                                         03S0249
         BRWRITE 1
*        PTERM=ON;                                              03S0250
         OI    PTERM,B'01000000'                                03S0250
*      END;                                                     03S0251
*  END;                                                         03S0252
*  END;                                                         02S0253
*ELSE                                                           02S0254
*/* NO CVT - ISSUE MSG & TERMINATE PROCESSING                        */
*  DO;                                                          02S0254
         B     @RC00118                                         02S0254
@RF00118 DS    0H                                               02S0255
*    BUFFER(1:LENGTH(NOCVTMG))=NOCVTMG;                         02S0255
*                                                               02S0255
         L     @15,CURBUF(,COMBASE)                             02S0255
         MVC   BUFFER(20,@15),NOCVTMG                           02S0255
*    GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)               02S0256
*      (BRWRITE 1);                                             02S0256
         BRWRITE 1
*    PTERM=ON;                                                  02S0257
         OI    PTERM,B'01000000'                                02S0257
*  END;                                                         02S0258
*/* CHECK FOR ANOTHER MESSAGE NEEDED, AND ISSUE IT                   */
*IF PTERM=ON THEN                                               02S0259
@RC00118 TM    PTERM,B'01000000'                                02S0259
         BNO   @RF00259                                         02S0259
*  DO;                                                          02S0260
*    BUFFER(1:LENGTH(PTRMSG))=PTRMSG;                           02S0261
*                                                               02S0261
         L     @15,CURBUF(,COMBASE)                             02S0261
         MVC   BUFFER(21,@15),PTRMSG                            02S0261
*    GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)               02S0262
*      (BRWRITE 1);                                             02S0262
         BRWRITE 1
*    PTERM=OFF;                                                 02S0263
         NI    PTERM,B'10111111'                                02S0263
*  END;                                                         02S0264
*  END;                                                         01S0265
*ELSE                                                           01S0266
*  CALL DOADDRSP (PASCB,PASID);         /* NO, DO THE ASCB GIVEN     */
         B     @RC00116                                         01S0266
@RF00116 L     @15,@PC00001                                     01S0266
         ST    @15,@AL00001                                     01S0266
         L     @15,@PC00001+4                                   01S0266
         ST    @15,@AL00001+4                                   01S0266
         LA    @01,@AL00001                                     01S0266
         BAL   @14,DOADDRSP                                     01S0266
*ERRADDR=SAVERR;                        /* RESTORE ERR RTN ADDR      */
@RC00116 MVC   ERRADDR(4,COMBASE),SAVERR                        01S0267
*                                       /* LEAVE STOP ADDR FOR LATER */
*LISTSAVE=TCBLIST;                      /* CLEAN OUT ASCBLIST        */
         L     LISTSAVE,TCBLIST(,COMBASE)                       01S0268
*TCBLIST=ASCBLIST;                      /*    BEFORE LEAVING         */
         MVC   TCBLIST(4,COMBASE),ASCBLIST                      01S0269
*RFY R2 RSTD;                                                   01S0270
*R2=0;                                                          01S0271
         SR    R2,R2                                            01S0271
*CALL ASCBREMV;                                                 01S0272
         L     @15,ATCBREMV(,COMBASE)                           01S0272
         BALR  @14,@15                                          01S0272
*RFY R2 UNRSTD;                                                 01S0273
*TCBLIST=LISTSAVE;                                              01S0274
         ST    LISTSAVE,TCBLIST(,COMBASE)                       01S0274
*ASCBLIST=0;                                                    01S0275
         SR    @15,@15                                          01S0275
         ST    @15,ASCBLIST                                     01S0275
*RETURN;                                                        01S0276
         B     @EL00001                                         01S0276
*/*                                                             01S0277
*   THIS INTERNAL PROCEDURE WILL CONTROL THE PROCESSING OF EACH ASCB
*     AS IT IS FOUND IN THE DUMP. ITS INPUT IS AN ASCB ADDRESS AND
*     THE CORRESPONDING ASID.                                   01S0277
*                                                                    */
*DOADDRSP: PROC (PASCB1,PASID1);                                01S0277
DOADDRSP STM   @14,@12,@SA00002                                 01S0277
         MVC   @PC00002(8),0(@01)                               01S0277
*DCL PASCB1 PTR(31),                    /* INPUT PARMS               */
*    PASID1 BIT(16);                                            01S0278
*AUSRASID=PASID1;                                               01S0279
         L     @15,@PC00002+4                                   01S0279
         MVC   AUSRASID(2,COMBASE),PASID1(@15)                  01S0279
*ASCBPTR=PASCB1;                                                01S0280
         L     @15,@PC00002                                     01S0280
         L     @15,PASCB1(,@15)                                 01S0280
         ST    @15,ASCBPTR                                      01S0280
*/*                                                             01S0281
*   FILL IN AND PRINT THE TITLE FOR THIS ADDRESS SPACE          01S0281
*                                                                    */
*/* READ THE FIRST JOBNAME POINTER FROM THE ASCB                     */
*                                                               01S0281
* PREG=ADDR(ASCBJBNI);                                          01S0281
         LA    PREG,ASCBJBNI(,@15)                              01S0281
* R0=0;                                                         01S0282
         SR    R0,R0                                            01S0282
* GEN REFS(BRRDDATA)SETS(PREG,READERR)                          01S0283
*     FLOWS(FSCERR)                                             01S0283
*   (BRREAD (PREG),,ASID=(R0));                                 01S0283
         BRREAD (PREG),,ASID=(R0)
*IF READERR=OFF THEN                                            01S0284
         TM    READERR,B'00000010'                              01S0284
         BNZ   @RF00284                                         01S0284
*  JOBNMPTR=RDPTR;                                              01S0285
         SR    JOBNMPTR,JOBNMPTR                                01S0285
         ICM   JOBNMPTR,7,RDPTR(PREG)                           01S0285
*ELSE                                                           01S0286
*  DO;                                                          01S0286
         B     @RC00284                                         01S0286
@RF00284 DS    0H                                               01S0287
*    JOBNMPTR=0;                                                01S0287
         SR    JOBNMPTR,JOBNMPTR                                01S0287
*    READERR=OFF;                                               01S0288
         NI    READERR,B'11111101'                              01S0288
*  END;                                                         01S0289
*/*                                                             02S0290
*   THIS SEGMENT WILL ATTEMPT TO GET THE JOBNAME FROM THE DUMP. IF
*     THE JOBNAME POINTER IS 0 OR IF NONE OF THE JOBNAME CAN BE READ,
*     THEN AN ERROR INDICATOR IS SET. IF ONLY THE FIRST HALF OF THE
*     JOBNAME CAN BE READ, THEN THE SECOND HALF IS SET TO '....' AND
*     NO ERROR IS INDICATED.                                    02S0290
*                                                                    */
*IF JOBNMPTR ^= 0 THEN                                          02S0290
@RC00284 LTR   JOBNMPTR,JOBNMPTR                                02S0290
         BZ    @RF00290                                         02S0290
*  DO;                                                          02S0291
*    PREG=JOBNMPTR;                     /* GET 1ST HALF OF JOBNAME   */
*                                                               02S0292
         LR    PREG,JOBNMPTR                                    02S0292
*    GEN REFS(BRRDDATA)SETS(PREG,READERR)                       02S0293
*        FLOWS(FSCERR)                                          02S0293
*      (BRREAD (PREG));                                         02S0293
         BRREAD (PREG)
*    IF READERR=OFF THEN                                        02S0294
         TM    READERR,B'00000010'                              02S0294
         BNZ   @RF00294                                         02S0294
*      DO;                                                      02S0295
*        JOBNAME(1:4)=READALL;                                  02S0296
         MVC   JOBNAME(4),READALL(PREG)                         02S0296
*        PREG=JOBNMPTR+4;               /* GET 2ND HALF OF JOBNAME   */
*                                                               02S0297
         LA    PREG,4                                           02S0297
         AR    PREG,JOBNMPTR                                    02S0297
*        GEN REFS(BRRDDATA)SETS(PREG,READERR)                   02S0298
*            FLOWS(FSCERR)                                      02S0298
*          (BRREAD (PREG));                                     02S0298
         BRREAD (PREG)
*        IF READERR=OFF THEN                                    02S0299
         TM    READERR,B'00000010'                              02S0299
         BNZ   @RF00299                                         02S0299
*          JOBNAME(5:8)=READALL;                                02S0300
         MVC   JOBNAME+4(4),READALL(PREG)                       02S0300
*        ELSE                                                   02S0301
*          DO;                                                  02S0301
         B     @RC00299                                         02S0301
@RF00299 DS    0H                                               02S0302
*            JOBNAME(5:8)=PERIODS;                              02S0302
         MVC   JOBNAME+4(4),PERIODS                             02S0302
*            READERR=OFF;                                       02S0303
         NI    READERR,B'11111101'                              02S0303
*          END;                                                 02S0304
*/* TRANSLATE UNPRINTABLE CHARACTERS TO PERIODS                      */
*        TABLE(EVAL('*')+1)='*';        /* CONSIDER '*' AS PRINTABLE */
@RC00299 LA    @15,92                                           02S0305
         ALR   @15,COMBASE                                      02S0305
         MVI   TABLE(@15),C'*'                                  02S0305
*        TR (JOBNAME,TABLE);                                    02S0306
         TR    JOBNAME(8),TABLE(COMBASE)                        02S0306
*        TABLE(EVAL('*')+1)='.';        /* RESTORE TABLE             */
         LA    @15,92                                           02S0307
         ALR   @15,COMBASE                                      02S0307
         MVI   TABLE(@15),C'.'                                  02S0307
*      END;                                                     02S0308
*    ELSE                                                       02S0309
*      DO;                                                      02S0309
         B     @RC00294                                         02S0309
@RF00294 DS    0H                                               02S0310
*        JOBNAMER=ON;                                           02S0310
         OI    JOBNAMER,B'10000000'                             02S0310
*        READERR=OFF;                                           02S0311
         NI    READERR,B'11111101'                              02S0311
*      END;                                                     02S0312
*  END;                                                         02S0313
*ELSE                                                           02S0314
*  JOBNAMER=ON;                                                 02S0314
         B     @RC00290                                         02S0314
@RF00290 OI    JOBNAMER,B'10000000'                             02S0314
*/* IF NO JOBNAME AVAILABLE, TRY 2ND JOBNAME POINTER                 */
*IF JOBNAMER=ON THEN                                            01S0315
@RC00290 TM    JOBNAMER,B'10000000'                             01S0315
         BNO   @RF00315                                         01S0315
*  DO;                                                          01S0316
*    JOBNAMER=OFF;                                              01S0317
*                                                               01S0317
         NI    JOBNAMER,B'01111111'                             01S0317
*    PREG=ADDR(ASCBJBNS);                                       01S0318
         L     PREG,ASCBPTR                                     01S0318
         LA    PREG,ASCBJBNS(,PREG)                             01S0318
*    GEN REFS(BRRDDATA)SETS(PREG,READERR)                       01S0319
*        FLOWS(FSCERR)                                          01S0319
*      (BRREAD (PREG));                                         01S0319
         BRREAD (PREG)
*    IF READERR=OFF THEN                                        01S0320
         TM    READERR,B'00000010'                              01S0320
         BNZ   @RF00320                                         01S0320
*      JOBNMPTR=RDPTR;                                          01S0321
         SR    JOBNMPTR,JOBNMPTR                                01S0321
         ICM   JOBNMPTR,7,RDPTR(PREG)                           01S0321
*    ELSE                                                       01S0322
*      DO;                                                      01S0322
         B     @RC00320                                         01S0322
@RF00320 DS    0H                                               01S0323
*        JOBNMPTR=0;                                            01S0323
         SR    JOBNMPTR,JOBNMPTR                                01S0323
*        READERR=OFF;                                           01S0324
         NI    READERR,B'11111101'                              01S0324
*      END;                                                     01S0325
*/*                                                             02S0326
*   THIS SEGMENT WILL ATTEMPT TO GET THE JOBNAME FROM THE DUMP. IF
*     THE JOBNAME POINTER IS 0 OR IF NONE OF THE JOBNAME CAN BE READ,
*     THEN AN ERROR INDICATOR IS SET. IF ONLY THE FIRST HALF OF THE
*     JOBNAME CAN BE READ, THEN THE SECOND HALF IS SET TO '....' AND
*     NO ERROR IS INDICATED.                                    02S0326
*                                                                    */
*IF JOBNMPTR ^= 0 THEN                                          02S0326
@RC00320 LTR   JOBNMPTR,JOBNMPTR                                02S0326
         BZ    @RF00326                                         02S0326
*  DO;                                                          02S0327
*    PREG=JOBNMPTR;                     /* GET 1ST HALF OF JOBNAME   */
*                                                               02S0328
         LR    PREG,JOBNMPTR                                    02S0328
*    GEN REFS(BRRDDATA)SETS(PREG,READERR)                       02S0329
*        FLOWS(FSCERR)                                          02S0329
*      (BRREAD (PREG));                                         02S0329
         BRREAD (PREG)
*    IF READERR=OFF THEN                                        02S0330
         TM    READERR,B'00000010'                              02S0330
         BNZ   @RF00330                                         02S0330
*      DO;                                                      02S0331
*        JOBNAME(1:4)=READALL;                                  02S0332
         MVC   JOBNAME(4),READALL(PREG)                         02S0332
*        PREG=JOBNMPTR+4;               /* GET 2ND HALF OF JOBNAME   */
*                                                               02S0333
         LA    PREG,4                                           02S0333
         AR    PREG,JOBNMPTR                                    02S0333
*        GEN REFS(BRRDDATA)SETS(PREG,READERR)                   02S0334
*            FLOWS(FSCERR)                                      02S0334
*          (BRREAD (PREG));                                     02S0334
         BRREAD (PREG)
*        IF READERR=OFF THEN                                    02S0335
         TM    READERR,B'00000010'                              02S0335
         BNZ   @RF00335                                         02S0335
*          JOBNAME(5:8)=READALL;                                02S0336
         MVC   JOBNAME+4(4),READALL(PREG)                       02S0336
*        ELSE                                                   02S0337
*          DO;                                                  02S0337
         B     @RC00335                                         02S0337
@RF00335 DS    0H                                               02S0338
*            JOBNAME(5:8)=PERIODS;                              02S0338
         MVC   JOBNAME+4(4),PERIODS                             02S0338
*            READERR=OFF;                                       02S0339
         NI    READERR,B'11111101'                              02S0339
*          END;                                                 02S0340
*/* TRANSLATE UNPRINTABLE CHARACTERS TO PERIODS                      */
*        TABLE(EVAL('*')+1)='*';        /* CONSIDER '*' AS PRINTABLE */
@RC00335 LA    @15,92                                           02S0341
         ALR   @15,COMBASE                                      02S0341
         MVI   TABLE(@15),C'*'                                  02S0341
*        TR (JOBNAME,TABLE);                                    02S0342
         TR    JOBNAME(8),TABLE(COMBASE)                        02S0342
*        TABLE(EVAL('*')+1)='.';        /* RESTORE TABLE             */
         LA    @15,92                                           02S0343
         ALR   @15,COMBASE                                      02S0343
         MVI   TABLE(@15),C'.'                                  02S0343
*      END;                                                     02S0344
*    ELSE                                                       02S0345
*      DO;                                                      02S0345
         B     @RC00330                                         02S0345
@RF00330 DS    0H                                               02S0346
*        JOBNAMER=ON;                                           02S0346
         OI    JOBNAMER,B'10000000'                             02S0346
*        READERR=OFF;                                           02S0347
         NI    READERR,B'11111101'                              02S0347
*      END;                                                     02S0348
*  END;                                                         02S0349
*ELSE                                                           02S0350
*  JOBNAMER=ON;                                                 02S0350
         B     @RC00326                                         02S0350
@RF00326 OI    JOBNAMER,B'10000000'                             02S0350
*/* IF NEITHER JOBNAME AVAILABLE, USE '*UNKNOWN'                     */
*    IF JOBNAMER=ON THEN                                        01S0351
@RC00326 TM    JOBNAMER,B'10000000'                             01S0351
         BNO   @RF00351                                         01S0351
*      DO;                                                      01S0352
*        JOBNAMER=OFF;                                          01S0353
         NI    JOBNAMER,B'01111111'                             01S0353
*        JOBNAME=UNKNOWN;                                       01S0354
         MVC   JOBNAME(8),UNKNOWN                               01S0354
*      END;                                                     01S0355
*  END;                                                         01S0356
@RF00351 DS    0H                                               01S0357
*BUFFER(1:LENGTH(JBTITLE))=JBTITLE;                             01S0357
*                                                               01S0357
@RF00315 L     @15,CURBUF(,COMBASE)                             01S0357
         MVC   BUFFER(12,@15),JBTITLE                           01S0357
* GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)                  01S0358
*   (BRWRITE 2);                                                01S0358
         BRWRITE 2
*R0=LENGTH(JOBTABLE);                                           01S0359
         LA    R0,40                                            01S0359
*GEN (GETMAIN R,LV=(0));                /* GET CORE FOR JOBTABLE     */
         GETMAIN R,LV=(0)
*TABREG=R1;                                                     01S0361
         LR    TABREG,R1                                        01S0361
*SUMTABL->NEXTTAB=TABREG;               /* QUEUE UP TABLE            */
         L     @03,SUMTABL                                      01S0362
         ST    TABREG,NEXTTAB(,@03)                             01S0362
*SUMTABL=TABREG;                                                01S0363
         ST    TABREG,SUMTABL                                   01S0363
*NEXTTAB=0;                             /* FILL IN TABLE             */
         SR    @03,@03                                          01S0364
         ST    @03,NEXTTAB(,TABREG)                             01S0364
*TJOBN=JOBNAME;                                                 01S0365
         MVC   TJOBN(8,TABREG),JOBNAME                          01S0365
*TASCBA=ASCBPTR;                                                01S0366
         MVC   TASCBA(4,TABREG),ASCBPTR                         01S0366
*TPAGEN=TITLEPGE(6:9);                                          01S0367
         MVC   TPAGEN(4,TABREG),TITLEPGE+5(COMBASE)             01S0367
*/* IF ASID WAS OK (ASIDSTAT=OFF) THEN USE IT IN TABLE               */
*IF ASIDSTAT=OFF THEN                                           01S0368
         TM    ASIDSTAT,B'00100000'                             01S0368
         BNZ   @RF00368                                         01S0368
*  DO;                                                          01S0369
*                                                               01S0369
*    UNPK(TASID1,AUSRASI1);                                     01S0370
         UNPK  TASID1(5,TABREG),AUSRASI1(3,COMBASE)             01S0370
*    TR(TASID1,EBCTABL);                                        01S0371
         TR    TASID1(5,TABREG),EBCTABL(COMBASE)                01S0371
*    TASID1(LENGTH(TASID1)) = ' ';                              01S0372
         MVI   TASID1+4(TABREG),C' '                            01S0372
*  END;                                                         01S0373
*ELSE                                                           01S0374
*  DO;                                                          01S0374
         B     @RC00368                                         01S0374
@RF00368 DS    0H                                               01S0375
*    TASID=PERIODS;                                             01S0375
         MVC   TASID(4,TABREG),PERIODS                          01S0375
*    ASIDSTAT=OFF;                                              01S0376
         NI    ASIDSTAT,B'11011111'                             01S0376
*  END;                                                         01S0377
*TCBENTF=0;              /* NOTE - THIS FIELD MUST BE FILLED IN 01S0378
*                           AFTER THE ASID TO OVERLAY ANY       01S0378
*                           EXTRANEOUS BLANK                         */
@RC00368 SR    @03,@03                                          01S0378
         ST    @03,TCBENTF(,TABREG)                             01S0378
*TCBENTL=ADDR(TCBENTF);  /* INITIALIZED FOR EASY QUEUEING            */
         LA    @15,TCBENTF(,TABREG)                             01S0379
         ST    @15,TCBENTL(,TABREG)                             01S0379
*TNXTA=0;                                                       01S0380
         ST    @03,TNXTA(,TABREG)                               01S0380
*TPREA=0;                                                       01S0381
*                                                               01S0381
         ST    @03,TPREA(,TABREG)                               01S0381
* PREG=ADDR(ASCBFWDP);                                          01S0382
         L     PREG,ASCBPTR                                     01S0382
         LA    PREG,ASCBFWDP(,PREG)                             01S0382
* GEN REFS(BRRDDATA)SETS(PREG,READERR)                          01S0383
*     FLOWS(FSCERR)                                             01S0383
*   (BRREAD (PREG));                                            01S0383
         BRREAD (PREG)
*IF READERR=OFF THEN                                            01S0384
         TM    READERR,B'00000010'                              01S0384
         BNZ   @RF00384                                         01S0384
*  DO;                                                          01S0385
*    TNXTA=RDPTR;                                               01S0386
*                                                               01S0386
         SR    @03,@03                                          01S0386
         ICM   @03,7,RDPTR(PREG)                                01S0386
         ST    @03,TNXTA(,TABREG)                               01S0386
*    PREG=ADDR(ASCBBWDP);                                       01S0387
         L     PREG,ASCBPTR                                     01S0387
         LA    PREG,ASCBBWDP(,PREG)                             01S0387
*    GEN REFS(BRRDDATA)SETS(PREG,READERR)                       01S0388
*        FLOWS(FSCERR)                                          01S0388
*      (BRREAD (PREG));                                         01S0388
         BRREAD (PREG)
*    IF READERR=OFF THEN                                        01S0389
         TM    READERR,B'00000010'                              01S0389
         BNZ   @RF00389                                         01S0389
*      DO;                                                      01S0390
*        TPREA=RDPTR;                                           01S0391
         SR    @03,@03                                          01S0391
         ICM   @03,7,RDPTR(PREG)                                01S0391
         ST    @03,TPREA(,TABREG)                               01S0391
*      END;                                                     01S0392
*  END;                                                         01S0393
@RF00389 DS    0H                                               01S0394
*READERR=OFF;                                                   01S0394
@RF00384 NI    READERR,B'11111101'                              01S0394
*/*                                                             02S0395
*   THIS SEGMENT CALLS THE ASCB FORMATTING ROUTINE, AND PERFORMS SETUP
*     AND CLEANUP FUNCTIONS FOR READING THE TCB CHAIN.          02S0395
*                                                                    */
*CALL ASCBFMT (ASCBPTR);                /* ALSO AUSRASID IS SET UP   */
         L     @15,AASCBFMT(,COMBASE)                           02S0395
         LA    @01,@AL00395                                     02S0395
         BALR  @14,@15                                          02S0395
*/* GET ASXB ADDRESS                                                 */
*                                                               02S0396
* PREG=ADDR(ASCBASXB);                                          02S0396
         L     PREG,ASCBPTR                                     02S0396
         LA    PREG,ASCBASXB(,PREG)                             02S0396
* GEN REFS(BRRDDATA)SETS(PREG,READERR)                          02S0397
*     FLOWS(FSCERR)                                             02S0397
*   (BRREAD (PREG));                                            02S0397
         BRREAD (PREG)
*IF READERR=OFF THEN                                            02S0398
         TM    READERR,B'00000010'                              02S0398
         BNZ   @RF00398                                         02S0398
*  DO;                                                          02S0399
*    ASXBPTR=RDPTR;                                             02S0400
         SR    ASXBPTR,ASXBPTR                                  02S0400
         ICM   ASXBPTR,7,RDPTR(PREG)                            02S0400
*/* IF ASXB ADDRESS IS OK, PROCESS THE TCBS, ELSE ISSUE MSG          */
*    IF ASXBPTR ^= 0 THEN                                       02S0401
         LTR   ASXBPTR,ASXBPTR                                  02S0401
         BZ    @RF00401                                         02S0401
*      DO;                                                      02S0402
*/*                                                             03S0403
*   THIS SEGMENT ATTEMPTS TO GET ALL OF THE TCBS FOR AN ADDRESS SPACE
*     BY READING THE TCB DISPATCHING CHAIN. THE NUMBER OF TCBS  03S0403
*     PROCESSED IS LIMITED BY TCBMAX (IN AMDPRCOM). ALSO, IF THE
*     SAME TCB IS FOUND AGAIN IN THE DUMP, AN ERROR IS ASSUMED IN THE
*     TCB DISPATCHING CHAIN, AND PROCESSING WILL BE TERMINATED FOR
*     THE ADDRESS SPACE.                                        03S0403
*                                                                    */
*/* GET POINTER TO FIRST TCB                                         */
*                                                               03S0403
* PREG=ADDR(ASXBFTCB);                                          03S0403
         LA    PREG,ASXBFTCB(,ASXBPTR)                          03S0403
* R0=PASID1;                                                    03S0404
         L     @06,@PC00002+4                                   03S0404
         SR    R0,R0                                            03S0404
         ICM   R0,3,PASID1(@06)                                 03S0404
* GEN REFS(BRRDDATA)SETS(PREG,READERR)                          03S0405
*     FLOWS(FSCERR)                                             03S0405
*   (BRREAD (PREG),,ASID=(R0));                                 03S0405
         BRREAD (PREG),,ASID=(R0)
*IF READERR=OFF THEN                                            03S0406
         TM    READERR,B'00000010'                              03S0406
         BNZ   @RF00406                                         03S0406
*  DO;                                                          03S0407
*    TCBFIRST=RDPTR;                                            03S0408
         SR    @09,@09                                          03S0408
         ICM   @09,7,RDPTR(PREG)                                03S0408
         ST    @09,TCBFIRST                                     03S0408
*    TCBNEXT=ADDR(TCBTCB)-ADDR(TCB);    /* DISPL OF TCB LINK FIELD   */
         L     @09,TCBPTR                                       03S0409
         LA    @06,TCBTCB(,@09)                                 03S0409
         SR    @06,@09                                          03S0409
         ST    @06,TCBNEXT                                      03S0409
*    TCBLAST=0;                                                 03S0410
         SR    TCBLAST,TCBLAST                                  03S0410
*  END;                                                         03S0411
*ELSE                                                           03S0412
*  DO;                                                          03S0412
         B     @RC00406                                         03S0412
@RF00406 DS    0H                                               03S0413
*/* ERROR ON START OF TCB CHAIN, ISSUE MSG, TRY OTHER END OF CHAIN   */
*    READERR=OFF;                                               03S0413
*                                                               03S0413
         NI    READERR,B'11111101'                              03S0413
*    RFY R4 RSTD;                                               03S0414
*    R4=ADDR(XFTCA);                                            03S0415
         LA    R4,XFTCA                                         03S0415
*    CALL ADRCNVT;                                              03S0416
         L     @15,AADRCNVT(,COMBASE)                           03S0416
         BALR  @14,@15                                          03S0416
*    RFY R4 UNRSTD;                                             03S0417
*    BUFFER(1:LENGTH(XFTCERMG))=XFTCERMG;                       03S0418
*                                                               03S0418
         L     @06,CURBUF(,COMBASE)                             03S0418
         MVC   BUFFER(54,@06),XFTCERMG                          03S0418
*    GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)               03S0419
*      (BRWRITE 1);                                             03S0419
         BRWRITE 1
*    TCBLAST=0;                                                 03S0420
         SR    TCBLAST,TCBLAST                                  03S0420
*/*                                                             04S0421
*   THIS SEGMENT GETS CONTROL IF ANY FORWARD POINTER IN THE TCB 04S0421
*     DISPATCHING CHAIN COULD NOT BE READ. IT ATTEMPTS TO READ THE
*     BACKWARD POINTER AND SET UP TO CHAIN THRU THE TCBS FROM THE
*     BACK OF THE QUEUE. IF THE BACKWARD POINTER CANNOT BE READ, THEN
*     FLAGS ARE SET TO TERMINATE THIS ADDRESS SPACE PROCESSING. 04S0421
*                                                                    */
*/* GET POINTER TO LAST TCB                                          */
*                                                               04S0421
* PREG=ADDR(ASXBLTCB);                                          04S0421
         LA    PREG,ASXBLTCB(,ASXBPTR)                          04S0421
* GEN REFS(BRRDDATA)SETS(PREG,READERR)                          04S0422
*     FLOWS(FSCERR)                                             04S0422
*   (BRREAD (PREG));                                            04S0422
         BRREAD (PREG)
*IF READERR=OFF THEN                                            04S0423
         TM    READERR,B'00000010'                              04S0423
         BNZ   @RF00423                                         04S0423
*  DO;                                                          04S0424
*/* USE END POINTER AS BEGINNING OF CHAIN                            */
*    TCBFIRST=RDPTR;                                            04S0425
         SR    @09,@09                                          04S0425
         ICM   @09,7,RDPTR(PREG)                                04S0425
         ST    @09,TCBFIRST                                     04S0425
*    TCBNEXT=ADDR(TCBBACK)-ADDR(TCB);                           04S0426
         L     @09,TCBPTR                                       04S0426
         LA    @06,TCBBACK(,@09)                                04S0426
         SR    @06,@09                                          04S0426
         ST    @06,TCBNEXT                                      04S0426
*  END;                                                         04S0427
*ELSE                                                           04S0428
*  DO;                                                          04S0428
         B     @RC00423                                         04S0428
@RF00423 DS    0H                                               04S0429
*/* ERROR ON ASXBLTCB, ISSUE MSG, GO TO NEXT ASCB                    */
*    READERR=OFF;                                               04S0429
*                                                               04S0429
         NI    READERR,B'11111101'                              04S0429
*    RFY R4 RSTD;                                               04S0430
*    R4=ADDR(XLTCA);                                            04S0431
         LA    R4,XLTCA                                         04S0431
*    CALL ADRCNVT;                                              04S0432
         L     @15,AADRCNVT(,COMBASE)                           04S0432
         BALR  @14,@15                                          04S0432
*    RFY R4 UNRSTD;                                             04S0433
*    BUFFER(1:LENGTH(XLTCERMG))=XLTCERMG;                       04S0434
*                                                               04S0434
         L     @09,CURBUF(,COMBASE)                             04S0434
         MVC   BUFFER(36,@09),XLTCERMG                          04S0434
*    GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)               04S0435
*      (BRWRITE 1);                                             04S0435
         BRWRITE 1
*    JTRM=ON;                                                   04S0436
*    LOOPDONE=ON;                       /* FORCE LOOP EXIT           */
         OI    JTRM,B'00011000'                                 04S0437
*  END;                                                         04S0438
*  END;                                                         03S0439
@RC00423 DS    0H                                               03S0440
*/* LOOP THRU TCBS IF EITHER END COULD BE FOUND                      */
*DO TCBCNTR=1 TO (TCBMAX+1) WHILE LOOPDONE=OFF;                 03S0440
@RC00406 LA    @09,1                                            03S0440
         B     @DE00440                                         03S0440
@DL00440 TM    LOOPDONE,B'00001000'                             03S0440
         BNZ   @DC00440                                         03S0440
*  IF (TCBFIRST ^= TCBLAST) & (TCBFIRST ^= 0) THEN              03S0441
         L     @09,TCBFIRST                                     03S0441
         CR    @09,TCBLAST                                      03S0441
         BE    @RF00441                                         03S0441
         LTR   @09,@09                                          03S0441
         BZ    @RF00441                                         03S0441
*    DO;                                                        03S0442
*/* NOT AT END OF TCB CHAIN, CHECK FOR DUPLICATE TCB                 */
*      LISTSAVE=TCBLIST;                                        03S0443
         L     LISTSAVE,TCBLIST(,COMBASE)                       03S0443
*      TCBLIST=FTCBLIST;                                        03S0444
         MVC   TCBLIST(4,COMBASE),FTCBLIST                      03S0444
*      RFY R2 RSTD;                                             03S0445
*      R2=TCBFIRST;                                             03S0446
         L     @06,TCBFIRST                                     03S0446
         LR    R2,@06                                           03S0446
*      CALL TCBSAVE;                                            03S0447
         L     @15,ATCBSAVE(,COMBASE)                           03S0447
         BALR  @14,@15                                          03S0447
*      RFY R15 RSTD;                                            03S0448
*      RC=R15;                                                  03S0449
         ST    R15,RC                                           03S0449
*      RFY (R2,R15) UNRSTD;                                     03S0450
*      FTCBLIST=TCBLIST;                                        03S0451
         MVC   FTCBLIST(4),TCBLIST(COMBASE)                     03S0451
*      TCBLIST=LISTSAVE;                                        03S0452
         ST    LISTSAVE,TCBLIST(,COMBASE)                       03S0452
*      IF RC=0 THEN                                             03S0453
         L     @09,RC                                           03S0453
         LTR   @09,@09                                          03S0453
         BNZ   @RF00453                                         03S0453
*        DO;                                                    03S0454
*/* NOT DUPLICATE TCB, CHECK FOR LOOP VALUE EXCEEDED                 */
*          IF TCBCNTR <= TCBMAX THEN                            03S0455
         CLC   TCBCNTR(2),TCBMAX(COMBASE)                       03S0455
         BH    @RF00455                                         03S0455
*            DO;                                                03S0456
*/* OK TO FORMAT TCB, ETC.                                           */
*/*                                                             04S0457
*   THIS SEGMENT SETS UP THE INTERFACE AND CALLS THE VARIOUS FORMATTING
*     ROUTINES FOR A TCB AND ITS RELATED CONTROL BLOCKS. ALSO, THE
*     TCB EXIT IS TAKEN VIA AMDPRUIM. THEN THE NEXT TCB POINTER IS
*     READ FROM THE DUMP. IF THE POINTER COULD NOT BE READ AND IT WAS
*     THE FORWARD POINTER, THEN THE BACKWARD POINTER IS GOTTEN. IF IT
*     WAS THE BACKWARD POINTER THAT COULD NOT BE READ, THEN     04S0457
*     PROCESSING IS TERMINATED FOR THE ADDRESS SPACE.           04S0457
*                                                                    */
*TCBPTR=TCBFIRST;                                               04S0457
         MVC   TCBPTR(4),TCBFIRST                               04S0457
*/*                                                             05S0458
*   THIS SEGMENT CONSTRUCTS THE TCB TITLE LINE AND WRITES IT, AND
*     CREATES AN ENTRY IN THE TCB SUMMARY TABLES FOR THE TCB.   05S0458
*                                                                    */
*/* SKIP TO NEW PAGE, SET UP TITLE SKELETON                          */
*                                                               05S0458
* GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)                  05S0458
*   (BRWRITE SKIP);                                             05S0458
         BRWRITE SKIP
*BUFFER(1:LENGTH(TITLJOB))=TITLJOB;                             05S0459
         L     @09,CURBUF(,COMBASE)                             05S0459
         MVC   BUFFER(48,@09),TITLJOB                           05S0459
*/* GET JOBNAME, STEPNAME, PROCNAME FOR TITLE FROM TIOT              */
*                                                               05S0460
* PREG=ADDR(TCBTIO);                                            05S0460
         L     PREG,TCBPTR                                      05S0460
         LA    PREG,TCBTIO(,PREG)                               05S0460
* GEN REFS(BRRDDATA)SETS(PREG,READERR)                          05S0461
*     FLOWS(FSCERR)                                             05S0461
*   (BRREAD (PREG));                                            05S0461
         BRREAD (PREG)
*IF READERR=OFF THEN                                            05S0462
         TM    READERR,B'00000010'                              05S0462
         BNZ   @RF00462                                         05S0462
*  DO;                                                          05S0463
*    TIOTPTR=RDPTR;                                             05S0464
         SR    TIOTPTR,TIOTPTR                                  05S0464
         ICM   TIOTPTR,7,RDPTR(PREG)                            05S0464
*    IF TIOTPTR ^= 0 THEN                                       05S0465
         LTR   TIOTPTR,TIOTPTR                                  05S0465
         BZ    @RF00465                                         05S0465
*      DO;                                                      05S0466
*/*                                                             06S0467
*   THIS SEGMENT READS THE JOBNAME, STEPNAME, AND PROCNAME FROM THE
*     TIOT TO USE IN THE TCB TITLE LINE. ANY READ ERROR WILL CAUSE
*     THE REST OF THE READS TO BE SKIPPED.                      06S0467
*                                                                    */
*/* READ JOBNAME                                                     */
*                                                               06S0467
*        PREG=ADDR(TIOCNJOB);                                   06S0467
         LR    PREG,TIOTPTR                                     06S0467
*        GEN REFS(BRRDDATA)SETS(PREG,READERR)                   06S0468
*            FLOWS(FSCERR)                                      06S0468
*          (BRREAD (PREG));                                     06S0468
         BRREAD (PREG)
*        IF READERR=OFF THEN                                    06S0469
         TM    READERR,B'00000010'                              06S0469
         BNZ   @RF00469                                         06S0469
*          DO;                                                  06S0470
*            JOBNM1=READALL;                                    06S0471
*                                                               06S0471
         L     @09,CURBUF(,COMBASE)                             06S0471
         MVC   JOBNM1(4,@09),READALL(PREG)                      06S0471
*            PREG=ADDR(TIOCNJOB(5));                            06S0472
         LA    PREG,TIOCNJOB+4(,TIOTPTR)                        06S0472
*            GEN REFS(BRRDDATA)SETS(PREG,READERR)               06S0473
*                FLOWS(FSCERR)                                  06S0473
*              (BRREAD (PREG));                                 06S0473
         BRREAD (PREG)
*            IF READERR=OFF THEN                                06S0474
         TM    READERR,B'00000010'                              06S0474
         BNZ   @RF00474                                         06S0474
*              DO;                                              06S0475
*                JOBNM2=READALL;                                06S0476
         L     @09,CURBUF(,COMBASE)                             06S0476
         MVC   JOBNM2(4,@09),READALL(PREG)                      06S0476
*/* READ STEPNAME                                                    */
*                                                               06S0477
*                PREG=ADDR(TIOCSTEP);                           06S0477
         LA    PREG,TIOCSTEP(,TIOTPTR)                          06S0477
*                GEN REFS(BRRDDATA)SETS(PREG,READERR)           06S0478
*                    FLOWS(FSCERR)                              06S0478
*                  (BRREAD (PREG));                             06S0478
         BRREAD (PREG)
*                IF READERR=OFF THEN                            06S0479
         TM    READERR,B'00000010'                              06S0479
         BNZ   @RF00479                                         06S0479
*                  DO;                                          06S0480
*                    STP1=READALL;                              06S0481
*                                                               06S0481
         L     @09,CURBUF(,COMBASE)                             06S0481
         MVC   STP1(4,@09),READALL(PREG)                        06S0481
*                    PREG=ADDR(TIOCSTEP(5));                    06S0482
         LA    PREG,TIOCSTEP+4(,TIOTPTR)                        06S0482
*                    GEN REFS(BRRDDATA)SETS(PREG,READERR)       06S0483
*                        FLOWS(FSCERR)                          06S0483
*                      (BRREAD (PREG));                         06S0483
         BRREAD (PREG)
*                    IF READERR=OFF THEN                        06S0484
         TM    READERR,B'00000010'                              06S0484
         BNZ   @RF00484                                         06S0484
*                      DO;                                      06S0485
*                        STP2=READALL;                          06S0486
         L     @09,CURBUF(,COMBASE)                             06S0486
         MVC   STP2(4,@09),READALL(PREG)                        06S0486
*/* READ PROCNAME                                                    */
*                                                               06S0487
*                        PREG=ADDR(TIOCSTEP(9));                06S0487
         LA    PREG,TIOCSTEP+8(,TIOTPTR)                        06S0487
*                        GEN REFS(BRRDDATA)SETS(PREG,READERR)   06S0488
*                            FLOWS(FSCERR)                      06S0488
*                          (BRREAD (PREG));                     06S0488
         BRREAD (PREG)
*                        IF READERR=OFF THEN                    06S0489
         TM    READERR,B'00000010'                              06S0489
         BNZ   @RF00489                                         06S0489
*                          DO;                                  06S0490
*                            PROC1=READALL;                     06S0491
*                                                               06S0491
         L     @09,CURBUF(,COMBASE)                             06S0491
         MVC   PROC1(4,@09),READALL(PREG)                       06S0491
*                            PREG=ADDR(TIOCSTEP(13));           06S0492
         LA    PREG,TIOCSTEP+12(,TIOTPTR)                       06S0492
*                            GEN REFS(BRRDDATA)SETS(PREG,READERR)
*                                FLOWS(FSCERR)                  06S0493
*                              (BRREAD (PREG));                 06S0493
         BRREAD (PREG)
*                            IF READERR=OFF THEN                06S0494
         TM    READERR,B'00000010'                              06S0494
         BNZ   @RF00494                                         06S0494
*                              DO;                              06S0495
*                                PROC2=READALL;                 06S0496
         L     @09,CURBUF(,COMBASE)                             06S0496
         MVC   PROC2(4,@09),READALL(PREG)                       06S0496
*                              END;                             06S0497
*                          END;                                 06S0498
@RF00494 DS    0H                                               06S0499
*                      END;                                     06S0499
@RF00489 DS    0H                                               06S0500
*                  END;                                         06S0500
@RF00484 DS    0H                                               06S0501
*              END;                                             06S0501
@RF00479 DS    0H                                               06S0502
*          END;                                                 06S0502
@RF00474 DS    0H                                               06S0503
*      END;                                                     05S0503
@RF00469 DS    0H                                               05S0504
*  END;                                                         05S0504
@RF00465 DS    0H                                               05S0505
*READERR=OFF;                                                   05S0505
@RF00462 NI    READERR,B'11111101'                              05S0505
*/* PRINT TITLE LINE FOR TCB                                         */
*                                                               05S0506
* GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)                  05S0506
*   (BRWRITE 2);                                                05S0506
         BRWRITE 2
*R0=LENGTH(TCBENTRY);                                           05S0507
         LA    R0,36                                            05S0507
*GEN (GETMAIN R,LV=(0));                /* GET CORE FOR TCB ENTRY    */
         GETMAIN R,LV=(0)
*ENTRYREG=R1;                                                   05S0509
         LR    ENTRYREG,R1                                      05S0509
*TABREG=SUMTABL;                        /* GET LAST TABLE            */
         L     TABREG,SUMTABL                                   05S0510
*TCBENTL->NEXTENT=ENTRYREG;             /* QUEUE ENTRY TO TABLE      */
         L     @09,TCBENTL(,TABREG)                             05S0511
         ST    ENTRYREG,NEXTENT(,@09)                           05S0511
*TCBENTL=ENTRYREG;                                              05S0512
         ST    ENTRYREG,TCBENTL(,TABREG)                        05S0512
*NEXTENT=0;                             /* INITIALIZE ENTRY          */
         SR    @09,@09                                          05S0513
         ST    @09,NEXTENT(,ENTRYREG)                           05S0513
*ETCBA=TCBPTR;                                                  05S0514
         L     @06,TCBPTR                                       05S0514
         ST    @06,ETCBA(,ENTRYREG)                             05S0514
*EPAGEN=TITLEPGE(6:9);                                          05S0515
         MVC   EPAGEN(4,ENTRYREG),TITLEPGE+5(COMBASE)           05S0515
*ECOMPC=''B;                                                    05S0516
         XC    ECOMPC(4,ENTRYREG),ECOMPC(ENTRYREG)              05S0516
*ESIS=0;                                                        05S0517
         ST    @09,ESIS(,ENTRYREG)                              05S0517
*EMOM=0;                                                        05S0518
         ST    @09,EMOM(,ENTRYREG)                              05S0518
*EDAU=0;                                                        05S0519
         ST    @09,EDAU(,ENTRYREG)                              05S0519
*ENXTT=0;                                                       05S0520
         ST    @09,ENXTT(,ENTRYREG)                             05S0520
*EPRET=0;                                                       05S0521
         ST    @09,EPRET(,ENTRYREG)                             05S0521
*/* READ FIELDS TO FILL IN ENTRY (1ST ERROR SKIPS REMAINING FIELDS)  */
*                                                               05S0522
* PREG=ADDR(TCBCMP);                                            05S0522
         LA    PREG,TCBCMP(,@06)                                05S0522
* GEN REFS(BRRDDATA)SETS(PREG,READERR)                          05S0523
*     FLOWS(FSCERR)                                             05S0523
*   (BRREAD (PREG));                                            05S0523
         BRREAD (PREG)
*IF READERR=OFF THEN                                            05S0524
         TM    READERR,B'00000010'                              05S0524
         BNZ   @RF00524                                         05S0524
*  DO;                                                          05S0525
*    ECOMPC=READALL;                                            05S0526
*                                                               05S0526
         MVC   ECOMPC(4,ENTRYREG),READALL(PREG)                 05S0526
*    PREG=ADDR(TCBNTC);                                         05S0527
         L     PREG,TCBPTR                                      05S0527
         LA    PREG,TCBNTC(,PREG)                               05S0527
*    GEN REFS(BRRDDATA)SETS(PREG,READERR)                       05S0528
*        FLOWS(FSCERR)                                          05S0528
*      (BRREAD (PREG));                                         05S0528
         BRREAD (PREG)
*    IF READERR=OFF THEN                                        05S0529
         TM    READERR,B'00000010'                              05S0529
         BNZ   @RF00529                                         05S0529
*      DO;                                                      05S0530
*        ESIS=RDPTR;                                            05S0531
*                                                               05S0531
         SR    @09,@09                                          05S0531
         ICM   @09,7,RDPTR(PREG)                                05S0531
         ST    @09,ESIS(,ENTRYREG)                              05S0531
*        PREG=ADDR(TCBOTC);                                     05S0532
         L     PREG,TCBPTR                                      05S0532
         LA    PREG,TCBOTC(,PREG)                               05S0532
*        GEN REFS(BRRDDATA)SETS(PREG,READERR)                   05S0533
*            FLOWS(FSCERR)                                      05S0533
*          (BRREAD (PREG));                                     05S0533
         BRREAD (PREG)
*        IF READERR=OFF THEN                                    05S0534
         TM    READERR,B'00000010'                              05S0534
         BNZ   @RF00534                                         05S0534
*          DO;                                                  05S0535
*            EMOM=RDPTR;                                        05S0536
*                                                               05S0536
         SR    @09,@09                                          05S0536
         ICM   @09,7,RDPTR(PREG)                                05S0536
         ST    @09,EMOM(,ENTRYREG)                              05S0536
*            PREG=ADDR(TCBLTC);                                 05S0537
         L     PREG,TCBPTR                                      05S0537
         LA    PREG,TCBLTC(,PREG)                               05S0537
*            GEN REFS(BRRDDATA)SETS(PREG,READERR)               05S0538
*                FLOWS(FSCERR)                                  05S0538
*              (BRREAD (PREG));                                 05S0538
         BRREAD (PREG)
*            IF READERR=OFF THEN                                05S0539
         TM    READERR,B'00000010'                              05S0539
         BNZ   @RF00539                                         05S0539
*              DO;                                              05S0540
*                EDAU=RDPTR;                                    05S0541
*                                                               05S0541
         SR    @09,@09                                          05S0541
         ICM   @09,7,RDPTR(PREG)                                05S0541
         ST    @09,EDAU(,ENTRYREG)                              05S0541
*                PREG=ADDR(TCBTCB);                             05S0542
         L     PREG,TCBPTR                                      05S0542
         LA    PREG,TCBTCB(,PREG)                               05S0542
*                GEN REFS(BRRDDATA)SETS(PREG,READERR)           05S0543
*                    FLOWS(FSCERR)                              05S0543
*                  (BRREAD (PREG));                             05S0543
         BRREAD (PREG)
*                IF READERR=OFF THEN                            05S0544
         TM    READERR,B'00000010'                              05S0544
         BNZ   @RF00544                                         05S0544
*                  DO;                                          05S0545
*                    ENXTT=RDPTR;                               05S0546
*                                                               05S0546
         SR    @09,@09                                          05S0546
         ICM   @09,7,RDPTR(PREG)                                05S0546
         ST    @09,ENXTT(,ENTRYREG)                             05S0546
*                    PREG=ADDR(TCBBACK);                        05S0547
         L     PREG,TCBPTR                                      05S0547
         LA    PREG,TCBBACK(,PREG)                              05S0547
*                    GEN REFS(BRRDDATA)SETS(PREG,READERR)       05S0548
*                        FLOWS(FSCERR)                          05S0548
*                      (BRREAD (PREG));                         05S0548
         BRREAD (PREG)
*                    IF READERR=OFF THEN                        05S0549
         TM    READERR,B'00000010'                              05S0549
         BNZ   @RF00549                                         05S0549
*                      DO;                                      05S0550
*                        EPRET=RDPTR;                           05S0551
         SR    @09,@09                                          05S0551
         ICM   @09,7,RDPTR(PREG)                                05S0551
         ST    @09,EPRET(,ENTRYREG)                             05S0551
*                      END;                                     05S0552
*                  END;                                         05S0553
@RF00549 DS    0H                                               05S0554
*              END;                                             05S0554
@RF00544 DS    0H                                               05S0555
*          END;                                                 05S0555
@RF00539 DS    0H                                               05S0556
*      END;                                                     05S0556
@RF00534 DS    0H                                               05S0557
*  END;                                                         05S0557
@RF00529 DS    0H                                               05S0558
*READERR=OFF;                                                   05S0558
@RF00524 NI    READERR,B'11111101'                              05S0558
*/* SET UP INTERFACE TO FORMATTING ROUTINES                          */
*RFY R2 RSTD;                                                   04S0559
*R2=TCBPTR;                                                     04S0560
         L     R2,TCBPTR                                        04S0560
*R0=AUSRASID;                                                   04S0561
         SR    R0,R0                                            04S0561
         ICM   R0,3,AUSRASID(COMBASE)                           04S0561
*/* FORMAT TCB AND SAVE RETURN CODE                                  */
*CALL AMDPRFTC;                                                 04S0562
         L     @15,@CV02037                                     04S0562
         BALR  @14,@15                                          04S0562
*RFY R15 RSTD;                                                  04S0563
*RC=R15;                                                        04S0564
         ST    R15,RC                                           04S0564
*RFY R15 UNRSTD;                                                04S0565
*/* IF TCB WAS NOT TERMINATED, FORMAT REST OF CONTROL BLOCKS         */
*IF RC=0 THEN                                                   04S0566
         L     @09,RC                                           04S0566
         LTR   @09,@09                                          04S0566
         BNZ   @RF00566                                         04S0566
*  DO;                                                          04S0567
*    CALL AMDPRFRB;                     /* FORMAT RB CHAIN           */
         L     @15,@CV02038                                     04S0568
         BALR  @14,@15                                          04S0568
*    CALL AMDPRFMS;                     /* FORMAT PQE CHAIN          */
         L     @15,@CV02039                                     04S0569
         BALR  @14,@15                                          04S0569
*    CALL AMDPRFLD;                     /* FORMAT LOAD LIST, JPQ     */
         L     @15,@CV02040                                     04S0570
         BALR  @14,@15                                          04S0570
*    CALL AMDPRFDB;                     /* FORMAT DEB CHAIN          */
         L     @15,@CV02041                                     04S0571
         BALR  @14,@15                                          04S0571
*    CALL AMDPRFIO;                     /* FORMAT TIOT               */
         L     @15,@CV02042                                     04S0572
         BALR  @14,@15                                          04S0572
*/* SPACE 2 LINES AND INTERFACE WITH EXIT ROUTINES                   */
*                                                               04S0573
*    GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)               04S0573
*      (BRWRITE 2);                                             04S0573
         BRWRITE 2
*    RFY R2 UNRSTD;                                             04S0574
*    AUSRTCBA=TCBPTR;                                           04S0575
         MVC   AUSRTCBA(4,COMBASE),TCBPTR                       04S0575
*    EXITFLAG=ATCB;                                             04S0576
         MVI   EXITFLAG(COMBASE),X'80'                          04S0576
*    CALL AMDPRUIM;                                             04S0577
         L     @15,AUSREXIT(,COMBASE)                           04S0577
         BALR  @14,@15                                          04S0577
*  END;                                                         04S0578
*/* READ FOR ADDRESS OF NEXT TCB IN CHAIN                            */
*PREG=TCBPTR+TCBNEXT;                                           04S0579
*                                                               04S0579
@RF00566 L     PREG,TCBPTR                                      04S0579
         A     PREG,TCBNEXT                                     04S0579
* GEN REFS(BRRDDATA)SETS(PREG,READERR)                          04S0580
*     FLOWS(FSCERR)                                             04S0580
*   (BRREAD (PREG));                                            04S0580
         BRREAD (PREG)
*IF READERR=OFF THEN                                            04S0581
         TM    READERR,B'00000010'                              04S0581
         BNZ   @RF00581                                         04S0581
*  DO;                                                          04S0582
*    TCBFIRST=RDPTR;                    /* POINT TO NEXT TCB         */
         SR    @09,@09                                          04S0583
         ICM   @09,7,RDPTR(PREG)                                04S0583
         ST    @09,TCBFIRST                                     04S0583
*  END;                                                         04S0584
*ELSE                                                           04S0585
*  DO;                                                          04S0585
         B     @RC00581                                         04S0585
@RF00581 DS    0H                                               04S0586
*/* UNABLE TO READ POINTER TO NEXT TCB, ISSUE MSG                    */
*    READERR=OFF;                                               04S0586
*                                                               04S0586
         NI    READERR,B'11111101'                              04S0586
*    RFY R4 RSTD;                                               04S0587
*    R4=ADDR(TCBLA);                                            04S0588
         LA    R4,TCBLA                                         04S0588
*    CALL ADRCNVT;                                              04S0589
         L     @15,AADRCNVT(,COMBASE)                           04S0589
         BALR  @14,@15                                          04S0589
*    RFY R4 UNRSTD;                                             04S0590
*    BUFFER(1:LENGTH(TCBERMG))=TCBERMG;                         04S0591
*                                                               04S0591
         L     @09,CURBUF(,COMBASE)                             04S0591
         MVC   BUFFER(47,@09),TCBERMG                           04S0591
*    GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)               04S0592
*      (BRWRITE 1);                                             04S0592
         BRWRITE 1
*/* CHECK TO SEE IF FORWARD OR BACKWARD CHAINING WAS BEING USED      */
*    IF TCBNEXT=(ADDR(TCBBACK)-ADDR(TCB)) THEN                  04S0593
         L     @09,TCBPTR                                       04S0593
         LA    @06,TCBBACK(,@09)                                04S0593
         SR    @06,@09                                          04S0593
         C     @06,TCBNEXT                                      04S0593
         BNE   @RF00593                                         04S0593
*      DO;                                                      04S0594
*/* BACKWARD CHAIN FAILED, FORCE LOOP EXIT, GO TO NEXT ASCB          */
*        LOOPDONE=ON;                                           04S0595
*        JTRM=ON;                                               04S0596
         OI    LOOPDONE,B'00011000'                             04S0596
*      END;                                                     04S0597
*    ELSE                                                       04S0598
*      DO;                                                      04S0598
         B     @RC00593                                         04S0598
@RF00593 DS    0H                                               04S0599
*/* FORWARD CHAIN FAILED, ISSUE MSG, TRY BACKWARD CHAIN              */
*        BUFFER(1:LENGTH(CENDMG))=CENDMG;                       04S0599
*                                                               04S0599
         L     @06,CURBUF(,COMBASE)                             04S0599
         MVC   BUFFER(32,@06),CENDMG                            04S0599
*        GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)           04S0600
*          (BRWRITE 1);                                         04S0600
         BRWRITE 1
*        TCBLAST=TCBFIRST;                                      04S0601
         L     TCBLAST,TCBFIRST                                 04S0601
*/*                                                             05S0602
*   THIS SEGMENT GETS CONTROL IF ANY FORWARD POINTER IN THE TCB 05S0602
*     DISPATCHING CHAIN COULD NOT BE READ. IT ATTEMPTS TO READ THE
*     BACKWARD POINTER AND SET UP TO CHAIN THRU THE TCBS FROM THE
*     BACK OF THE QUEUE. IF THE BACKWARD POINTER CANNOT BE READ, THEN
*     FLAGS ARE SET TO TERMINATE THIS ADDRESS SPACE PROCESSING. 05S0602
*                                                                    */
*/* GET POINTER TO LAST TCB                                          */
*                                                               05S0602
* PREG=ADDR(ASXBLTCB);                                          05S0602
         LA    PREG,ASXBLTCB(,ASXBPTR)                          05S0602
* GEN REFS(BRRDDATA)SETS(PREG,READERR)                          05S0603
*     FLOWS(FSCERR)                                             05S0603
*   (BRREAD (PREG));                                            05S0603
         BRREAD (PREG)
*IF READERR=OFF THEN                                            05S0604
         TM    READERR,B'00000010'                              05S0604
         BNZ   @RF00604                                         05S0604
*  DO;                                                          05S0605
*/* USE END POINTER AS BEGINNING OF CHAIN                            */
*    TCBFIRST=RDPTR;                                            05S0606
         SR    @09,@09                                          05S0606
         ICM   @09,7,RDPTR(PREG)                                05S0606
         ST    @09,TCBFIRST                                     05S0606
*    TCBNEXT=ADDR(TCBBACK)-ADDR(TCB);                           05S0607
         L     @09,TCBPTR                                       05S0607
         LA    @06,TCBBACK(,@09)                                05S0607
         SR    @06,@09                                          05S0607
         ST    @06,TCBNEXT                                      05S0607
*  END;                                                         05S0608
*ELSE                                                           05S0609
*  DO;                                                          05S0609
         B     @RC00604                                         05S0609
@RF00604 DS    0H                                               05S0610
*/* ERROR ON ASXBLTCB, ISSUE MSG, GO TO NEXT ASCB                    */
*    READERR=OFF;                                               05S0610
*                                                               05S0610
         NI    READERR,B'11111101'                              05S0610
*    RFY R4 RSTD;                                               05S0611
*    R4=ADDR(XLTCA);                                            05S0612
         LA    R4,XLTCA                                         05S0612
*    CALL ADRCNVT;                                              05S0613
         L     @15,AADRCNVT(,COMBASE)                           05S0613
         BALR  @14,@15                                          05S0613
*    RFY R4 UNRSTD;                                             05S0614
*    BUFFER(1:LENGTH(XLTCERMG))=XLTCERMG;                       05S0615
*                                                               05S0615
         L     @09,CURBUF(,COMBASE)                             05S0615
         MVC   BUFFER(36,@09),XLTCERMG                          05S0615
*    GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)               05S0616
*      (BRWRITE 1);                                             05S0616
         BRWRITE 1
*    JTRM=ON;                                                   05S0617
*    LOOPDONE=ON;                       /* FORCE LOOP EXIT           */
         OI    JTRM,B'00011000'                                 05S0618
*  END;                                                         05S0619
*      END;                                                     04S0620
*  END;                                                         04S0621
*            END;                                               03S0622
*          ELSE                                                 03S0623
*            DO;                                                03S0623
         B     @RC00455                                         03S0623
@RF00455 DS    0H                                               03S0624
*/* TCB COUNT EXCEEDED LIMIT, ISSUE MSG                              */
*              CVD (TCBMAX,FWORK);                              03S0624
         LH    @09,TCBMAX(,COMBASE)                             03S0624
         CVD   @09,@TS00001                                     03S0624
         MVC   FWORK(4),@TS00001+4                              03S0624
*              FWORK(29:32)=SIGNF;                              03S0625
         OI    FWORK+3,B'00001111'                              03S0625
*              UNPK (TLIMIT,FWORK);                             03S0626
         UNPK  TLIMIT(5),FWORK(4)                               03S0626
*              BUFFER(1:LENGTH(TCBLMG))=TCBLMG;                 03S0627
*                                                               03S0627
         L     @09,CURBUF(,COMBASE)                             03S0627
         MVC   BUFFER(32,@09),TCBLMG                            03S0627
*              GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)     03S0628
*                (BRWRITE 1);                                   03S0628
         BRWRITE 1
*              JTRM=ON;                                         03S0629
         OI    JTRM,B'00010000'                                 03S0629
*            END;                                               03S0630
*        END;                                                   03S0631
*      ELSE                                                     03S0632
*        DO;                                                    03S0632
         B     @RC00453                                         03S0632
@RF00453 DS    0H                                               03S0633
*/* DUPLICATE TCB FOUND, ERROR IN CHAIN                              */
*          BUFFER(1:LENGTH(TCBERMG1))=TCBERMG1;                 03S0633
*                                                               03S0633
         L     @09,CURBUF(,COMBASE)                             03S0633
         MVC   BUFFER(18,@09),TCBERMG1                          03S0633
*          GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)         03S0634
*            (BRWRITE 1);                                       03S0634
         BRWRITE 1
*          JTRM=ON;                                             03S0635
*          LOOPDONE=ON;                                         03S0636
         OI    JTRM,B'00011000'                                 03S0636
*        END;                                                   03S0637
*    END;                                                       03S0638
*  ELSE                                                         03S0639
*/* END OF TCB CHAIN, GET OUT OF LOOP                                */
*    LOOPDONE=ON;                                               03S0639
         B     @RC00441                                         03S0639
@RF00441 OI    LOOPDONE,B'00001000'                             03S0639
*END;                                                           03S0640
@RC00441 LA    @09,1                                            03S0640
         AH    @09,TCBCNTR                                      03S0640
@DE00440 STH   @09,TCBCNTR                                      03S0640
         LA    @06,1                                            03S0640
         AH    @06,TCBMAX(,COMBASE)                             03S0640
         CR    @09,@06                                          03S0640
         BNH   @DL00440                                         03S0640
@DC00440 DS    0H                                               03S0641
*LOOPDONE=OFF;                          /* RESET SWITCH              */
         NI    LOOPDONE,B'11110111'                             03S0641
*      END;                                                     02S0642
*    ELSE                                                       02S0643
*      DO;                                                      02S0643
         B     @RC00401                                         02S0643
@RF00401 DS    0H                                               02S0644
*        BUFFER(1:LENGTH(ASXB0MSG))=ASXB0MSG;                   02S0644
*                                                               02S0644
         L     @15,CURBUF(,COMBASE)                             02S0644
         MVC   BUFFER(17,@15),ASXB0MSG                          02S0644
*        GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)           02S0645
*          (BRWRITE 1);                                         02S0645
         BRWRITE 1
*        JTRM=ON;                                               02S0646
         OI    JTRM,B'00010000'                                 02S0646
*      END;                                                     02S0647
*  END;                                                         02S0648
*ELSE                                                           02S0649
*  DO;                                                          02S0649
         B     @RC00398                                         02S0649
@RF00398 DS    0H                                               02S0650
*/* READ ERROR ON ASCBASXB FIELD, ISSUE MSG                          */
*                                                               02S0650
*    RFY R4 RSTD;                                               02S0650
*    R4=ADDR(ASXERRMA);                                         02S0651
         LA    R4,ASXERRMA                                      02S0651
*    CALL ADRCNVT;                                              02S0652
         L     @15,AADRCNVT(,COMBASE)                           02S0652
         BALR  @14,@15                                          02S0652
*    RFY R4 UNRSTD;                                             02S0653
*    BUFFER(1:LENGTH(ASXERRMG))=ASXERRMG;                       02S0654
*                                                               02S0654
         L     @15,CURBUF(,COMBASE)                             02S0654
         MVC   BUFFER(36,@15),ASXERRMG                          02S0654
*    GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)               02S0655
*      (BRWRITE 1);                                             02S0655
         BRWRITE 1
*    JTRM=ON;                                                   02S0656
*    READERR=OFF;                                               02S0657
         OI    JTRM,B'00010000'                                 02S0657
         NI    READERR,B'11111101'                              02S0657
*  END;                                                         02S0658
*IF JTRM=ON THEN                                                02S0659
@RC00398 TM    JTRM,B'00010000'                                 02S0659
         BNO   @RF00659                                         02S0659
*  DO;                                                          02S0660
*    BUFFER(1:LENGTH(JTRMSG))=JTRMSG;                           02S0661
*                                                               02S0661
         L     @15,CURBUF(,COMBASE)                             02S0661
         MVC   BUFFER(44,@15),JTRMSG                            02S0661
*    GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)               02S0662
*      (BRWRITE 1);                                             02S0662
         BRWRITE 1
*    JTRM=OFF;                                                  02S0663
         NI    JTRM,B'11101111'                                 02S0663
*  END;                                                         02S0664
*/* CLEAN UP FTCBLIST IF NEEDED                                      */
*LISTSAVE=TCBLIST;                                              02S0665
@RF00659 L     LISTSAVE,TCBLIST(,COMBASE)                       02S0665
*TCBLIST=FTCBLIST;                                              02S0666
         MVC   TCBLIST(4,COMBASE),FTCBLIST                      02S0666
*RFY R2 RSTD;                                                   02S0667
*R2=0;                                                          02S0668
         SR    R2,R2                                            02S0668
*CALL TCBREMV;                                                  02S0669
         L     @15,ATCBREMV(,COMBASE)                           02S0669
         BALR  @14,@15                                          02S0669
*RFY R2 UNRSTD;                                                 02S0670
*TCBLIST=LISTSAVE;                                              02S0671
         ST    LISTSAVE,TCBLIST(,COMBASE)                       02S0671
*FTCBLIST=0;                                                    02S0672
         SR    @15,@15                                          02S0672
         ST    @15,FTCBLIST                                     02S0672
*RETURN;                                                        01S0673
@EL00002 DS    0H                                               01S0673
@EF00002 DS    0H                                               01S0673
@ER00002 LM    @14,@12,@SA00002                                 01S0673
         BR    @14                                              01S0673
*END DOADDRSP;                                                  01S0674
*/*                                                             01S0675
*   TCBSMRY - ENTRY POINT FOR PRINTING THE TCB SUMMARY.         01S0675
*     THIS ROUTINE FORMATS AND PRINTS ANY SUMMARY TABLES THAT MAY
*     HAVE BEEN CREATED BY THE MAIN FORMAT ROUTINE. ADDITIONALLY,
*     THE TABLES ARE FREED, AND THE STOP ROUTINE IS DE-ACTIVATED.
*                                                                    */
*TCBSMRY: ENTRY;                                                01S0675
@EP00675 DS    0H                                               01S0675
@EC00675 DS    0H                                               01S0676
*/* PRINT TITLE AT TOP OF PAGE                                       */
*                                                               01S0676
* GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)                  01S0676
*   (BRWRITE SKIP);                                             01S0676
         BRWRITE SKIP
*BUFFER(43:LENGTH(TSUMTTL)+42)=TSUMTTL;                         01S0677
*                                                               01S0677
         L     @15,CURBUF(,COMBASE)                             01S0677
         MVC   BUFFER+42(36,@15),TSUMTTL                        01S0677
* GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)                  01S0678
*   (BRWRITE 2);                                                01S0678
         BRWRITE 2
*/* IF ANY SUMMARY TABLES PRESENT, PROCESS THEM                      */
*IF SUMTABF ^= 0 THEN                                           01S0679
         ICM   @15,15,SUMTABF                                   01S0679
         BZ    @RF00679                                         01S0679
*  DO WHILE SUMTABF ^= 0;                                       01S0680
         B     @DE00680                                         01S0680
@DL00680 DS    0H                                               01S0681
*    TABREG=SUMTABF;                                            01S0681
         L     TABREG,SUMTABF                                   01S0681
*    SUMTABF=NEXTTAB;                                           01S0682
*                                                               01S0682
         MVC   SUMTABF(4),NEXTTAB(TABREG)                       01S0682
*    PREG=ADDR(JOBLINE);                                        01S0683
         LA    PREG,JOBLINE                                     01S0683
*    JOBLINEX=ADDR(TJOBN);                                      01S0684
         LA    @03,TJOBN(,TABREG)                               01S0684
         ST    @03,JOBLINEX                                     01S0684
*    CALL FMTLINE; /* FORMAT JOB LINE        */                 01S0685
*                                                               01S0685
         L     @15,AFMTLINE(,COMBASE)                           01S0685
         BALR  @14,@15                                          01S0685
*    GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)               01S0686
*      (BRWRITE 1);                                             01S0686
         BRWRITE 1
*/* PROCESS ANY TCB ENTRIES FOR THIS TABLE                           */
*    DO WHILE TCBENTF ^= 0;                                     01S0687
         B     @DE00687                                         01S0687
@DL00687 DS    0H                                               01S0688
*      ENTRYREG=TCBENTF;                                        01S0688
         L     ENTRYREG,TCBENTF(,TABREG)                        01S0688
*      TCBENTF=NEXTENT;                                         01S0689
*                                                               01S0689
         MVC   TCBENTF(4,TABREG),NEXTENT(ENTRYREG)              01S0689
*      PREG=ADDR(TCBLINE);                                      01S0690
         LA    PREG,TCBLINE                                     01S0690
*      TCBLINEX=ADDR(ETCBAA);                                   01S0691
         LA    @15,ETCBAA(,ENTRYREG)                            01S0691
         ST    @15,TCBLINEX                                     01S0691
*      CALL FMTLINE; /* FORMAT TCB LINE     */                  01S0692
*                                                               01S0692
         L     @15,AFMTLINE(,COMBASE)                           01S0692
         BALR  @14,@15                                          01S0692
*      GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)             01S0693
*        (BRWRITE 1);                                           01S0693
         BRWRITE 1
*/* FREE THE ENTRY                                                   */
*      R0=LENGTH(TCBENTRY);                                     01S0694
         LA    R0,36                                            01S0694
*      R1=ENTRYREG;                                             01S0695
         LR    R1,ENTRYREG                                      01S0695
*      GEN (FREEMAIN R,LV=(0),A=(1));                           01S0696
         FREEMAIN R,LV=(0),A=(1)
*    END;                                                       01S0697
@DE00687 ICM   @03,15,TCBENTF(TABREG)                           01S0697
         BNZ   @DL00687                                         01S0697
*/* FREE THE TABLE                                                   */
*    R0=LENGTH(JOBTABLE);                                       01S0698
         LA    R0,40                                            01S0698
*    R1=TABREG;                                                 01S0699
         LR    R1,TABREG                                        01S0699
*    GEN (FREEMAIN R,LV=(0),A=(1));                             01S0700
         FREEMAIN R,LV=(0),A=(1)
*/* SKIP A LINE BETWEEN JOBS                                         */
*                                                               01S0701
*    GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)               01S0701
*      (BRWRITE 1);                                             01S0701
         BRWRITE 1
*  END;                                                         01S0702
@DE00680 ICM   @15,15,SUMTABF                                   01S0702
         BNZ   @DL00680                                         01S0702
*ELSE                                                           01S0703
*  DO;                                                          01S0703
         B     @RC00679                                         01S0703
@RF00679 DS    0H                                               01S0704
*/* NO TABLES TO PROCESS, ISSUE MESSAGE                              */
*    BUFFER(1:LENGTH(NONTRYMG))=NONTRYMG;                       01S0704
*                                                               01S0704
         L     @15,CURBUF(,COMBASE)                             01S0704
         MVC   BUFFER(52,@15),NONTRYMG                          01S0704
*    GEN REFS(AWRITE) SETS(CURBUF) FLOWS(FSCSTOP)               01S0705
*      (BRWRITE 1);                                             01S0705
         BRWRITE 1
*  END;                                                         01S0706
*SUMTABL=ADDR(SUMTABF);                 /* RESET TABLE END PTR       */
@RC00679 LA    @15,SUMTABF                                      01S0707
         ST    @15,SUMTABL                                      01S0707
*/* DE-ACTIVATE STOP ROUTINE IF NEEDED                               */
*IF STOPSAVD=ON THEN                                            01S0708
         TM    STOPSAVD,B'00000001'                             01S0708
         BNO   @RF00708                                         01S0708
*  DO;                                                          01S0709
*    STOPEXIT=SAVSTOP;                                          01S0710
         MVC   STOPEXIT(4,COMBASE),SAVSTOP                      01S0710
*    STOPSAVD=OFF;                                              01S0711
         NI    STOPSAVD,B'11111110'                             01S0711
*  END;                                                         01S0712
*RETURN;                                                        01S0713
         B     @EL00001                                         01S0713
*/*                                                             01S0714
*   BRREAD ERROR ROUTINE - THIS ROUTINE GETS CONTROL AFTER ANY  01S0714
*     BRREAD ERROR. IT RESTORES THE REGISTERS, SETS AN ERROR SWITCH,
*     AND RETURNS TO THE MAINLINE IMMEDIATELY FOLLOWING THE BRREAD.
*                                                                    */
*FSCERR: GEN REFS(SAVER13); /*                                  01S0714
FSCERR   DS    0H                                               01S0714
         USING *,R15
         L     R13,SAVER13
         LM    R14,R12,12(R13)
         DROP  R15
*RFY R14 RSTD;                                                  01S0715
*READERR=ON;                                                    01S0716
         OI    READERR,B'00000010'                              01S0716
*GO TO BRRDERRT;                                                01S0717
         BR    R14                                              01S0717
*RFY R14 UNRSTD;                                                01S0718
*/*                                                             01S0719
*   STOP ROUTINE - THIS ROUTINE GETS CONTROL IF THE OPERATOR REQUESTS
*     'STOP'. IT RESTORES REGISTERS, FREES UP ANY SUMMARY TABLES THAT
*     MAY EXIST, CLEANS UP ASCBLIST AND FTCBLIST, RESETS ALL LOCAL
*     SWITCHES, AND PERCOLATES UP TO THE PREVIOUS STOP ROUTINE. 01S0719
*                                                                    */
*FSCSTOP: GEN REFS(SAVER13); /*                                 01S0719
FSCSTOP  DS    0H                                               01S0719
         USING *,R15
         L     R13,SAVER13
         LM    R14,R12,12(R13)
         DROP  R15
*/* FREE SUMMARY TABLES AND ENTRIES                                  */
*DO WHILE SUMTABF ^= 0;                                         01S0720
         B     @DE00720                                         01S0720
@DL00720 DS    0H                                               01S0721
*  TABREG=SUMTABF;                                              01S0721
         L     TABREG,SUMTABF                                   01S0721
*  SUMTABF=NEXTTAB;                                             01S0722
         MVC   SUMTABF(4),NEXTTAB(TABREG)                       01S0722
*  DO WHILE TCBENTF ^= 0;                                       01S0723
         B     @DE00723                                         01S0723
@DL00723 DS    0H                                               01S0724
*    ENTRYREG=TCBENTF;                                          01S0724
         L     ENTRYREG,TCBENTF(,TABREG)                        01S0724
*    TCBENTF=NEXTENT;                                           01S0725
         MVC   TCBENTF(4,TABREG),NEXTENT(ENTRYREG)              01S0725
*    R0=LENGTH(TCBENTRY);                                       01S0726
         LA    R0,36                                            01S0726
*    R1=ENTRYREG;                                               01S0727
         LR    R1,ENTRYREG                                      01S0727
*    GEN (FREEMAIN R,LV=(0),A=(1));                             01S0728
         FREEMAIN R,LV=(0),A=(1)
*  END;                                                         01S0729
@DE00723 ICM   @03,15,TCBENTF(TABREG)                           01S0729
         BNZ   @DL00723                                         01S0729
*  R0=LENGTH(JOBTABLE);                                         01S0730
         LA    R0,40                                            01S0730
*  R1=TABREG;                                                   01S0731
         LR    R1,TABREG                                        01S0731
*  GEN (FREEMAIN R,LV=(0),A=(1));                               01S0732
         FREEMAIN R,LV=(0),A=(1)
*END;                                                           01S0733
@DE00720 SR    @15,@15                                          01S0733
         C     @15,SUMTABF                                      01S0733
         BNE   @DL00720                                         01S0733
*SUMTABL=ADDR(SUMTABF);                                         01S0734
         LA    @08,SUMTABF                                      01S0734
         ST    @08,SUMTABL                                      01S0734
*/* CLEAN UP ASCBLIST AND FTCBLIST                                   */
*LISTSAVE=TCBLIST;                                              01S0735
         L     LISTSAVE,TCBLIST(,COMBASE)                       01S0735
*TCBLIST=ASCBLIST;                                              01S0736
         MVC   TCBLIST(4,COMBASE),ASCBLIST                      01S0736
*RFY R2 RSTD;                                                   01S0737
*R2=0;                                                          01S0738
         LR    R2,@15                                           01S0738
*CALL ASCBREMV;                                                 01S0739
         L     @15,ATCBREMV(,COMBASE)                           01S0739
         BALR  @14,@15                                          01S0739
*TCBLIST=FTCBLIST;                                              01S0740
         MVC   TCBLIST(4,COMBASE),FTCBLIST                      01S0740
*R2=0;                                                          01S0741
         SR    R2,R2                                            01S0741
*CALL TCBREMV;                                                  01S0742
         L     @15,ATCBREMV(,COMBASE)                           01S0742
         BALR  @14,@15                                          01S0742
*RFY R2 UNRSTD;                                                 01S0743
*/* RESET SWITCHES AND LIST FIELDS                                   */
*SWITCHES=''B;                                                  01S0744
         XC    SWITCHES(2),SWITCHES                             01S0744
*ASCBLIST=0;                                                    01S0745
         SR    @15,@15                                          01S0745
         ST    @15,ASCBLIST                                     01S0745
*FTCBLIST=0;                                                    01S0746
         ST    @15,FTCBLIST                                     01S0746
*/* RESTORE ERROR AND STOP ROUTINE ADDRESSES                         */
*ERRADDR=SAVERR;                                                01S0747
         MVC   ERRADDR(4,COMBASE),SAVERR                        01S0747
*STOPEXIT=SAVSTOP;                                              01S0748
         L     @15,SAVSTOP                                      01S0748
         ST    @15,STOPEXIT(,COMBASE)                           01S0748
*STOPSAVD=OFF;                                                  01S0749
         NI    STOPSAVD,B'11111110'                             01S0749
*/* PERCOLATE TO NEXT STOP ROUTINE                                   */
*RFY R15 RSTD;                                                  01S0750
*R15=SAVSTOP;                                                   01S0751
         L     @14,SAVSTOP                                      01S0751
         LR    R15,@14                                          01S0751
*GO TO NEXTSTOP;                                                01S0752
         BR    R15                                              01S0752
*RFY R15 UNRSTD;                                                01S0753
*END AMDPRFSC                                                   01S0754
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSUT5  (FSCPRLOG)                                        *
*/*%INCLUDE SYSUT5  (MACROS  )                                        *
*/*%INCLUDE SYSUT5  (DECLARES)                                        *
*/*%INCLUDE SYSLIB  (COMMON  )                                        *
*/*%INCLUDE SYSLIB  (CVT     )                                        *
*/*%INCLUDE SYSLIB  (IHAASCB )                                        *
*/*%INCLUDE SYSLIB  (IHAASXB )                                        *
*/*%INCLUDE SYSLIB  (IHAASVT )                                        *
*/*%INCLUDE SYSLIB  (IKJTCB  )                                        *
*/*%INCLUDE SYSLIB  (IEFTIOT1)                                        *
*/*%INCLUDE SYSLIB  (IHAPSA  )                                        *
*/*%INCLUDE SYSUT5  (DOALL   )                                        *
*/*%INCLUDE SYSUT5  (ASVTLP  )                                        *
*/*%INCLUDE SYSUT5  (CHECKDSP)                                        *
*/*%INCLUDE SYSUT5  (DOADDRSP)                                        *
*/*%INCLUDE SYSUT5  (GETJOBNM)                                        *
*/*%INCLUDE SYSUT5  (GETJOBNM)                                        *
*/*%INCLUDE SYSUT5  (FMCB    )                                        *
*/*%INCLUDE SYSUT5  (TCBLOOP )                                        *
*/*%INCLUDE SYSUT5  (GETLAST )                                        *
*/*%INCLUDE SYSUT5  (GETLAST )                                        *
*/*%INCLUDE SYSUT5  (CALLFCB )                                        *
*/*%INCLUDE SYSUT5  (GTTCBE  )                                        *
*/*%INCLUDE SYSUT5  (READTIOT)                                        *
*/*%INCLUDE SYSUT5  (TCBSMRY )                                        *
*/*%INCLUDE SYSUT5  (FSCERR  )                                        *
*/*%INCLUDE SYSUT5  (FSCSTOP )                                        *
*;                                                              01S0754
         B     @EL00001                                         01S0754
@DATA    DS    0H
@CH00076 DC    H'1'
         DS    0F
@AL00168 DC    A(TEMPASCB)             LIST WITH   2 ARGUMENT(S)
         DC    A(TEMPASID)
@AL00395 DC    A(ASCBPTR)              LIST WITH   1 ARGUMENT(S)
         DS    0F
@SA00001 DS    18F
@PC00001 DS    2F
@SA00002 DS    15F
@PC00002 DS    2F
@AL00001 DS    2A
         DS    0F
@CF02210 DC    F'-8'
@CF01848 DC    XL4'FFFFFFFF'
@CA02162 DC    A(FORMAT)
@CA02163 DC    A(TCBSMRY)
@CA01872 DC    A(CURTCB)
@CV02037 DC    V(AMDPRFTC)
@CV02038 DC    V(AMDPRFRB)
@CV02039 DC    V(AMDPRFMS)
@CV02040 DC    V(AMDPRFLD)
@CV02041 DC    V(AMDPRFDB)
@CV02042 DC    V(AMDPRFIO)
         DS    0D
ASCBPTR  DS    A
TCBPTR   DS    A
SAVERR   DC    A(0)
SAVSTOP  DC    A(0)
SAVER13  DC    A(0)
ASCBLIST DC    A(0)
FTCBLIST DC    A(0)
SUMTABF  DC    A(0)
SUMTABL  DC    AL4(SUMTABF)
RC       DS    F
TEMPASCB DS    A
ASMAXU   DS    F
TCBFIRST DS    A
TCBNEXT  DS    A
TCBCNTR  DS    H
         DS    0D
@TS00001 DS    CL8
@CB02171 DC    X'000000'
         DS    CL1
FWORK    DS    BL4
TEMPASID DS    BL2
UNKNOWN  DC    CL8'*UNKNOWN'
PERIODS  DC    CL4'....'
SWITCHES DC    AL2(0)
         ORG   SWITCHES
OVERLIMT DS    BL1
PTERM    EQU   SWITCHES+0
ASIDSTAT EQU   SWITCHES+0
JTRM     EQU   SWITCHES+0
LOOPDONE EQU   SWITCHES+0
USEDSP   EQU   SWITCHES+0
READERR  EQU   SWITCHES+0
STOPSAVD EQU   SWITCHES+0
JOBNAMER DS    BL1
         ORG   SWITCHES+2
JOBLINE  DS    CL33
         ORG   JOBLINE
@NM00084 DC    AL1(63)
@NM00085 DC    AL1(39)
@NM00086 DC    AL1(0)
@NM00087 DC    AL1(4)
@NM00088 DC    AL4(JOBTLBL)
JOBLINEX DC    A(0)
@NM00089 DC    AL1(21)
@NM00090 DC    AL1(51)
@NM00091 DC    AL1(27)
@NM00092 DC    AL1(32)
@NM00093 DC    AL1(21)
@NM00094 DC    AL1(51)
@NM00095 DC    AL1(43)
@NM00096 DC    AL1(48)
@NM00097 DC    AL1(21)
@NM00098 DC    AL1(51)
@NM00099 DC    AL1(59)
@NM00100 DC    AL1(64)
@NM00101 DC    AL1(53)
@NM00102 DC    AL1(51)
@NM00103 DC    AL1(75)
@NM00104 DC    AL1(80)
@NM00105 DC    AL1(53)
@NM00106 DC    AL1(51)
@NM00107 DC    AL1(15)
@NM00108 DC    AL1(20)
@NM00109 DC    AL1(0)
         ORG   JOBLINE+33
JOBTLBL  DC    CL23'JOBASCBFWDPBWDPPAGEASID'
TCBLINE  DS    CL41
         ORG   TCBLINE
@NM00110 DC    AL1(31)
@NM00111 DC    AL1(82)
@NM00112 DC    AL1(4)
@NM00113 DC    AL1(11)
@NM00114 DC    AL4(TCBLBL)
TCBLINEX DC    A(0)
@NM00115 DC    AL1(21)
@NM00116 DC    AL1(35)
@NM00117 DC    AL1(20)
@NM00118 DC    AL1(24)
@NM00119 DC    AL1(21)
@NM00120 DC    AL1(35)
@NM00121 DC    AL1(35)
@NM00122 DC    AL1(39)
@NM00123 DC    AL1(21)
@NM00124 DC    AL1(35)
@NM00125 DC    AL1(50)
@NM00126 DC    AL1(54)
@NM00127 DC    AL1(21)
@NM00128 DC    AL1(35)
@NM00129 DC    AL1(65)
@NM00130 DC    AL1(69)
@NM00131 DC    AL1(21)
@NM00132 DC    AL1(35)
@NM00133 DC    AL1(80)
@NM00134 DC    AL1(84)
@NM00135 DC    AL1(21)
@NM00136 DC    AL1(51)
@NM00137 DC    AL1(95)
@NM00138 DC    AL1(100)
@NM00139 DC    AL1(53)
@NM00140 DC    AL1(51)
@NM00141 DC    AL1(111)
@NM00142 DC    AL1(116)
@NM00143 DC    AL1(0)
         ORG   TCBLINE+41
TCBLBL   DC    CL29'TCB ATCMPNTCOTCLTCTCBBACKPAGE'
ASCBLIMG DS    CL33
         ORG   ASCBLIMG
@NM00144 DC    CL28'ASCB COUNT EXCEEDS LIMIT OF '
ALIMIT   DC    CL5'XXXXX'
         ORG   ASCBLIMG+33
NOCVTMG  DC    CL20'UNABLE TO ACCESS CVT'
ASVT0MSG DC    CL17'ASVT ADDRESS IS 0'
UDSPMSG  DC    CL39'WILL USE ASCB DISPATCHING CHAIN INSTEAD'
MAP0MSG  DC    CL37'UNABLE TO FIND ASCB DISPATCHING CHAIN'
PTRMSG   DC    CL21'FORMATTING TERMINATED'
ASENTERM DC    CL29'UNABLE TO ACCESS ASVT ENTRIES'
ASERMG   DC    CL18'ERROR FINDING ASVT'
CENDMG   DC    CL32'CONTINUING FROM END OF TCB CHAIN'
XFTCERMG DS    CL54
         ORG   XFTCERMG
@NM00145 DC    CL28'UNABLE TO ACCESS ASXBFTCB - '
XFTCA    DC    CL6'XXXXXX'
@NM00146 DC    CL20' - WILL TRY ASXBLTCB'
         ORG   XFTCERMG+54
XLTCERMG DS    CL36
         ORG   XLTCERMG
@NM00147 DC    CL28'UNABLE TO ACCESS ASXBLTCB - '
XLTCA    DC    CL6'XXXXXX'
@NM00148 DC    CL2' -'
         ORG   XLTCERMG+36
TCBERMG  DS    CL47
         ORG   TCBERMG
@NM00149 DC    CL39'UNABLE TO ACCESS POINTER TO NEXT TCB - '
TCBLA    DC    CL6'XXXXXX'
@NM00150 DC    CL2' -'
         ORG   TCBERMG+47
ASXB0MSG DC    CL17'ASXB ADDRESS IS 0'
JTRMSG   DC    CL44'FORMATTING TERMINATED FOR THIS ADDRESS SPACE'
ASXERRMG DS    CL36
         ORG   ASXERRMG
@NM00151 DC    CL28'UNABLE TO ACCESS ASCBASXB - '
ASXERRMA DC    CL6'XXXXXX'
@NM00152 DC    CL2' -'
         ORG   ASXERRMG+36
TCBLMG   DS    CL32
         ORG   TCBLMG
@NM00153 DC    CL27'TCB COUNT EXCEEDS LIMIT OF '
TLIMIT   DC    CL5'XXXXX'
         ORG   TCBLMG+32
TCBERMG1 DC    CL18'ERROR IN TCB CHAIN'
NONTRYMG DC    CL52'NO ENTRIES IN SUMMARY TABLE - TCB SUMMARY TERMINATEC
               D'
JBTITLE  DS    CL12
         ORG   JBTITLE
@NM00154 DC    CL4'JOB '
JOBNAME  DC    CL8'XXXXXXXX'
         ORG   JBTITLE+12
TSUMTTL  DC    CL36'* * * * T C B  S U M M A R Y * * * *'
TITLJOB  DC    CL48'JOB            STEP            PROCSTEP         '
FSCPATCH DC    60F'0'
AMDPRFSC CSECT
DTAE     EQU   32                  DATA EBCDIC BIT
DTAC     EQU   16                  DATA IN CORE BIT
DTAP     EQU   8                   DATA PTR BIT
DTA      EQU   4                   DATA INCLUDED BIT
LBLP     EQU   2                   LABEL PTR BIT
LBL      EQU   1                   LABEL INCLUDED BIT
AMDPRFSC CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
TCBLAST  EQU   @08
JOBNMPTR EQU   @02
INCTR    EQU   @04
TBPTR    EQU   @08
MPPTR    EQU   @07
ASCBCNT  EQU   @08
ENTRYREG EQU   @03
TABREG   EQU   @02
LISTSAVE EQU   @09
TIOTPTR  EQU   @02
ASVTPTR  EQU   @07
ASXBPTR  EQU   @07
CVTPTR   EQU   @02
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R4       EQU   @04
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
COMBASE  EQU   @12
PREG     EQU   @01
BASE1    EQU   @11
BASE2    EQU   @10
BASE3    EQU   @09
BUFREG   EQU   @06
CNTREG   EQU   @03
LINEREG  EQU   @08
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R3       EQU   @03
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
STOPBASE EQU   @05
         EXTRN CURTCB
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSATOLD  EQU   PSA+540
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
COMMON   EQU   0
ERRADDR  EQU   COMMON
CURBUF   EQU   COMMON+48
TCBLIST  EQU   COMMON+52
CVTADDR  EQU   COMMON+56
SWA      EQU   COMMON+122
SWB      EQU   COMMON+123
SWC      EQU   COMMON+124
SWD      EQU   COMMON+125
SWE      EQU   COMMON+126
SWF      EQU   COMMON+127
BUFSW    EQU   COMMON+128
PRSW     EQU   COMMON+129
TITLEPGE EQU   COMMON+394
TABLE    EQU   COMMON+659
HEXTABL  EQU   TABLE+63
EBCTABL  EQU   HEXTABL+10
AWRITE   EQU   COMMON+1500
AFMTLINE EQU   COMMON+1512
AADRCNVT EQU   COMMON+1516
STOPEXIT EQU   COMMON+1528
ATCBSAVE EQU   COMMON+1548
ATCBREMV EQU   COMMON+1552
AFORMAT  EQU   COMMON+1568
ATCBSMRY EQU   COMMON+1604
DCBADDRS EQU   COMMON+1608
@NM00042 EQU   DCBADDRS+16
@NM00043 EQU   @NM00042
ASCBMAP  EQU   COMMON+1976
BRRDDATA EQU   COMMON+1984
AASCBFMT EQU   COMMON+1996
AUSREXIT EQU   COMMON+2008
AUSRTCBA EQU   COMMON+2016
AUSRASID EQU   COMMON+2020
EXITFLAG EQU   COMMON+2022
TCBMAX   EQU   COMMON+2038
ASCBMAX  EQU   COMMON+2040
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTRSV90 EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
ASCB     EQU   0
ASCBFWDP EQU   ASCB+4
ASCBBWDP EQU   ASCB+8
ASCBASID EQU   ASCB+36
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBASXB EQU   ASCB+108
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBJBNI EQU   ASCB+172
ASCBJBNS EQU   ASCB+176
ASXB     EQU   0
ASXBFTCB EQU   ASXB+4
ASXBLTCB EQU   ASXB+8
ASXBAEQ  EQU   ASXB+168
ASVT     EQU   0
ASVTMAXU EQU   ASVT+516
ASVTFRST EQU   ASVT+524
ASVTENTY EQU   ASVT+528
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBTIO   EQU   TCB+12
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTCB   EQU   TCB+116
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBNTC   EQU   TCB+128
TCBOTC   EQU   TCB+132
TCBLTC   EQU   TCB+136
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBBACK  EQU   TCB+220
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
TIOT1    EQU   0
TIOCNJOB EQU   TIOT1
TIOCSTEP EQU   TIOT1+8
BRRDERRT EQU   0
NEXTSTOP EQU   0
JOBTABLE EQU   0
NEXTTAB  EQU   JOBTABLE
TJOBN    EQU   JOBTABLE+4
TASCBA   EQU   JOBTABLE+12
TNXTA    EQU   JOBTABLE+16
TPREA    EQU   JOBTABLE+20
TPAGEN   EQU   JOBTABLE+24
TASID    EQU   JOBTABLE+28
TCBENTF  EQU   JOBTABLE+32
TCBENTL  EQU   JOBTABLE+36
TCBENTRY EQU   0
NEXTENT  EQU   TCBENTRY
ETCBA    EQU   TCBENTRY+4
ETCBAA   EQU   ETCBA+1
ECOMPC   EQU   TCBENTRY+8
ESIS     EQU   TCBENTRY+12
EMOM     EQU   TCBENTRY+16
EDAU     EQU   TCBENTRY+20
ENXTT    EQU   TCBENTRY+24
EPRET    EQU   TCBENTRY+28
EPAGEN   EQU   TCBENTRY+32
ASMAP    EQU   0
ASCBTAB  EQU   ASMAP
ASCBNUM  EQU   ASMAP+4
MPASID   EQU   ASMAP+16
ASTAB    EQU   0
TBNT     EQU   ASTAB
TBASCB   EQU   TBNT
BADASID  EQU   TBASCB
OUTBUF   EQU   0
BUFFER   EQU   OUTBUF+1
READALL  EQU   0
RDWORD   EQU   READALL
RDHWORD  EQU   RDWORD
RDPTR    EQU   RDHWORD+1
ASCBREMV EQU   0
ASCBSAV  EQU   0
TCBREMV  EQU   0
TCBSAVE  EQU   0
ADRCNVT  EQU   0
FMTLINE  EQU   0
ASCBFMT  EQU   0
AMDPRUIM EQU   0
PASCB    EQU   0
PASID    EQU   0
PASCB1   EQU   0
PASID1   EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTASVT  EQU   CVTS01+208
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
TIOENTRY EQU   TIOT1+24
TIOESTTA EQU   TIOENTRY+1
TIOERLOC EQU   TIOENTRY+2
TIOELINK EQU   TIOERLOC+1
TIOESYOT EQU   TIOELINK
TIOESTTC EQU   TIOENTRY+15
TIOESTTB EQU   TIOENTRY+16
POOLSTAR EQU   TIOENTRY+20
TIOEDEVE EQU   TIOESTTB
TIOSTTB  EQU   TIOEDEVE
PSARSVTE EQU   PSARSVT
TASID1   EQU   TASID
AUSRASI1 EQU   AUSRASID
JOBNM1   EQU   BUFFER+4
JOBNM2   EQU   BUFFER+8
STP1     EQU   BUFFER+20
STP2     EQU   BUFFER+24
PROC1    EQU   BUFFER+40
PROC2    EQU   BUFFER+44
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
TIOUCBP  EQU   TIOEDEVE+1
TIOVERF  EQU   TIOSTTB
TIOUNLD  EQU   TIOSTTB
TIOMNTD  EQU   TIOSTTB
TIOSETU  EQU   TIOSTTB
TIOVLSR  EQU   TIOSTTB
TIOPVIO  EQU   TIOSTTB
TIOREQD  EQU   TIOSTTB
TIOUSED  EQU   TIOSTTB
TIOTFEND EQU   POOLSTAR+16
TIOPSLOT EQU   POOLSTAR+13
TIOPSTTB EQU   POOLSTAR+12
TIOPPOOL EQU   POOLSTAR+4
TIOPNSRT EQU   POOLSTAR+3
@NM00057 EQU   POOLSTAR+2
TIOPNSLT EQU   POOLSTAR+1
@NM00056 EQU   POOLSTAR
TIOEFSRT EQU   TIOENTRY+17
TIOSVERF EQU   TIOESTTB
TIOSUNLD EQU   TIOESTTB
TIOSMNTD EQU   TIOESTTB
TIOSSETU EQU   TIOESTTB
TIOSVLSR EQU   TIOESTTB
TIOSPVIO EQU   TIOESTTB
TIOSREQD EQU   TIOESTTB
TIOSUSED EQU   TIOESTTB
TIOSBALS EQU   TIOESTTC
TIOSBALP EQU   TIOESTTC
TIOSVOLS EQU   TIOESTTC
TIOSVOLP EQU   TIOESTTC
TIOSAFFS EQU   TIOESTTC
TIOSAFFP EQU   TIOESTTC
TIOSDEFR EQU   TIOESTTC
TIOSDKCR EQU   TIOESTTC
TIOEJFCB EQU   TIOENTRY+12
TIOEDDNM EQU   TIOENTRY+4
TIOTREM  EQU   TIOELINK
TIOESSDS EQU   TIOESYOT
TIOESYIN EQU   TIOELINK
TIOEQNAM EQU   TIOELINK
TIOEDYNM EQU   TIOELINK
TIOTTERM EQU   TIOELINK
TIOTRV01 EQU   TIOELINK
TIOSYOUT EQU   TIOELINK
TIOEWTCT EQU   TIOERLOC
TIOSDSP2 EQU   TIOESTTA
TIOSDSP1 EQU   TIOESTTA
TIOSLABL EQU   TIOESTTA
TIOSDADS EQU   TIOESTTA
TIOSJBLB EQU   TIOESTTA
TIOSPLTS EQU   TIOESTTA
TIOSPLTP EQU   TIOESTTA
TIOSLTYP EQU   TIOESTTA
TIOELNGH EQU   TIOENTRY
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTRV301 EQU   CVTS01+475
CVTRV300 EQU   CVTS01+474
CVTRV299 EQU   CVTS01+473
CVTRV298 EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTWSAG  EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTSYSWT EQU   CVTS01+92
CVTRV327 EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
RDBYTE   EQU   RDHWORD
CTLCHAR  EQU   OUTBUF
@NM00083 EQU   TBNT+4
@NM00082 EQU   ASMAP+6
@NM00055 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBRV143 EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBRSV48 EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00054 EQU   TCB+296
TCBRV185 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBACTIV EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBCCPVI EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBRSV96 EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBRV306 EQU   TCB+240
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBRSV36 EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBRSV35 EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00053 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBRSV04 EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00052 EQU   TCBPMASK
TCBRBP   EQU   TCB
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
ASVTEND  EQU   ASVT+528
ASVTAVAL EQU   ASVTENTY
ASVTAVAI EQU   ASVTFRST
ASVTRS00 EQU   ASVT+520
ASVTASVT EQU   ASVT+512
ASVTBEGN EQU   ASVT+512
@NM00051 EQU   ASVT
ASXBEND  EQU   ASXB+232
ASXBRV25 EQU   ASXB+228
ASXBRV24 EQU   ASXB+224
ASXBRV23 EQU   ASXB+220
ASXBRV22 EQU   ASXB+216
ASXBRV21 EQU   ASXB+212
ASXBRV20 EQU   ASXB+208
ASXBRV19 EQU   ASXB+204
ASXBRV18 EQU   ASXB+200
ASXBRV17 EQU   ASXB+196
ASXBRV16 EQU   ASXB+192
ASXBLSRB EQU   ASXBAEQ+20
ASXBFSRB EQU   ASXBAEQ+16
ASXBLRQE EQU   ASXBAEQ+12
ASXBFRQE EQU   ASXBAEQ+8
ASXBLIQE EQU   ASXBAEQ+4
ASXBFIQE EQU   ASXBAEQ
ASXBETSK EQU   ASXB+164
ASXBSIRB EQU   ASXB+160
ASXBPSWD EQU   ASXB+152
ASXBPRG  EQU   ASXB+136
ASXBRV26 EQU   ASXB+132
ASXBOUSB EQU   ASXB+128
ASXBDDR  EQU   ASXB+124
ASXBRCTD EQU   ASXB+120
ASXBRSMD EQU   ASXB+116
ASXBSPSA EQU   ASXB+112
ASXBFRWA EQU   ASXB+108
ASXBFLSA EQU   ASXB+36
ASXBIHSA EQU   ASXB+32
ASXBRV15 EQU   ASXB+28
ASXBRV14 EQU   ASXB+24
ASXBLWA  EQU   ASXB+20
ASXBMPST EQU   ASXB+16
ASXBRS00 EQU   ASXB+14
ASXBTCBS EQU   ASXB+12
ASXBASXB EQU   ASXB
ASXBEGIN EQU   ASXB
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBLGCB EQU   ASCB+180
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBCMSB EQU   ASCB+132
ASCBCMSF EQU   ASCB+128
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBQSVC EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSM  EQU   ASCB+52
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBLSLQ EQU   ASCB+24
ASCBFSLQ EQU   ASCB+20
ASCBIOSP EQU   ASCB+16
ASCBLOCK EQU   ASCB+12
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00050 EQU   CVTFIX+248
@NM00049 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTRSVA1 EQU   CVTXTNT2+48
CVTRSVA0 EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTRSV90
CVTRSV9G EQU   CVTRSV90
CVTRSV9F EQU   CVTRSV90
CVTRSV9E EQU   CVTRSV90
CVTRSV9D EQU   CVTRSV90
CVTRSV9C EQU   CVTRSV90
CVTRSV9B EQU   CVTRSV90
CVTRSV9A EQU   CVTRSV90
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTRV484 EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTINTLA EQU   CVTMAP+320
CVTERPV  EQU   CVTMAP+316
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRSV37 EQU   CVTDMSR
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTRV319 EQU   CVTUSR
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTIERLC EQU   CVTMAP+144
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
CSADDR   EQU   COMMON+2072
@NM00048 EQU   COMMON+2070
TOPICHDR EQU   COMMON+2060
DFLTCSA  EQU   COMMON+2056
LPAMAX   EQU   COMMON+2052
DNUCTOP  EQU   COMMON+2048
XLMAX    EQU   COMMON+2044
DQEMAX   EQU   COMMON+2042
SRBMAX   EQU   COMMON+2036
DDMAX    EQU   COMMON+2034
DEBMAX   EQU   COMMON+2032
JPQMAX   EQU   COMMON+2030
LLEMAX   EQU   COMMON+2028
PQEMAX   EQU   COMMON+2026
RBMAX    EQU   COMMON+2024
@NM00047 EQU   COMMON+2023
AUSRDEL  EQU   COMMON+2012
AUSRINIT EQU   COMMON+2004
ASRBFMT  EQU   COMMON+2000
BRRDADJ  EQU   COMMON+1992
BRRDINIT EQU   COMMON+1988
BUFERMAP EQU   COMMON+1980
CPUMAP   EQU   COMMON+1972
ASIDNDX  EQU   COMMON+1968
@NM00046 EQU   COMMON+1964
HDRTITLE EQU   COMMON+1864
HDRREGS  EQU   COMMON+1696
SACSWCAW EQU   COMMON+1684
ASVTADDR EQU   COMMON+1680
PREFXRGV EQU   COMMON+1676
PREFXRGR EQU   COMMON+1672
CURASCB  EQU   COMMON+1668
IPLCPU   EQU   COMMON+1666
QASID    EQU   COMMON+1664
QAPFT    EQU   COMMON+1660
@NM00045 EQU   COMMON+1656
REALMAX  EQU   COMMON+1652
SEGTABOR EQU   COMMON+1648
REALMAP  EQU   COMMON+1644
@NM00044 EQU   COMMON+1641
EDITER   EQU   COMMON+1640
AROOT    EQU   COMMON+1636
AEDITCB  EQU   COMMON+1632
TRCCOUNT EQU   COMMON+1628
ASYSUDCB EQU   @NM00042+1
ENDLIST  EQU   @NM00043
AINDCB   EQU   DCBADDRS+12
ARDRDCB  EQU   DCBADDRS+8
APTRDCB  EQU   DCBADDRS+4
AOUTDCB  EQU   DCBADDRS
ATCBSMFR EQU   COMMON+1600
ONGOPTR  EQU   COMMON+1596
AEND     EQU   COMMON+1592
AERRMSGA EQU   COMMON+1584
BUFREINT EQU   COMMON+1580
BUFSUM   EQU   COMMON+1576
APRTSTG  EQU   COMMON+1572
ASTPROUT EQU   COMMON+1564
APCBENQ  EQU   COMMON+1560
ATCBRTRV EQU   COMMON+1556
QATMERTN EQU   COMMON+1544
ALOADER  EQU   COMMON+1540
AEREXIT  EQU   COMMON+1536
SYNMSGA  EQU   COMMON+1532
ARGNBND  EQU   COMMON+1524
AWRDCNVT EQU   COMMON+1520
ASYNTAX  EQU   COMMON+1508
APRTMSG  EQU   COMMON+1504
NONBLNK  EQU   COMMON+1244
BLNK     EQU   COMMON+988
@NM00041 EQU   COMMON+972
@NM00040 EQU   COMMON+915
@NM00039 EQU   HEXTABL
@NM00038 EQU   TABLE
CAPTABL  EQU   COMMON+403
@NM00037 EQU   COMMON+392
TITLETME EQU   COMMON+379
@NM00036 EQU   COMMON+377
TITLEDTE EQU   COMMON+364
@NM00035 EQU   COMMON+362
TITLEMOD EQU   COMMON+347
TITLEMSG EQU   COMMON+283
MSG2     EQU   COMMON+257
MSG1     EQU   COMMON+231
STOP     EQU   COMMON+227
TITLE    EQU   COMMON+222
BLANKS   EQU   COMMON+214
WTORMSG  EQU   COMMON+133
@NM00034 EQU   COMMON+130
@NM00033 EQU   PRSW
@NM00032 EQU   PRSW
PRNTREAL EQU   PRSW
PRNTRL   EQU   PRSW
TTLSW    EQU   PRSW
@NM00031 EQU   PRSW
QSEGTBSW EQU   PRSW
@NM00030 EQU   PRSW
@NM00029 EQU   BUFSW
PREFM    EQU   BUFSW
@NM00028 EQU   BUFSW
@NM00027 EQU   BUFSW
@NM00026 EQU   BUFSW
@NM00025 EQU   BUFSW
@NM00024 EQU   BUFSW
@NM00023 EQU   BUFSW
@NM00022 EQU   SWF
QUT1LOD  EQU   SWF
@NM00021 EQU   SWF
PAGEOK   EQU   SWF
DMPIC    EQU   SWF
QSADMP   EQU   SWF
NUCTFRMC EQU   SWF
QPRDINIT EQU   SWF
@NM00020 EQU   SWE
@NM00019 EQU   SWE
@NM00018 EQU   SWE
BUILDMAP EQU   SWE
TITLESW  EQU   SWE
RESPC    EQU   SWE
@NM00017 EQU   SWE
STOPSW   EQU   SWE
@NM00016 EQU   SWD
GPRSFND  EQU   SWD
CONTSW   EQU   SWD
NOLOADSW EQU   SWD
NOSTDMG  EQU   SWD
@NM00015 EQU   SWD
@NM00014 EQU   SWD
FLSHMODE EQU   SWD
@NM00013 EQU   SWC
@NM00012 EQU   SWC
@NM00011 EQU   SWC
EDITSW   EQU   SWC
TREADIN  EQU   SWC
POSITSW  EQU   SWC
SETFLSH  EQU   SWC
MSTRSW   EQU   SWC
@NM00010 EQU   SWB
@NM00009 EQU   SWB
QSYSUT2  EQU   SWB
ENDSW    EQU   SWB
@NM00008 EQU   SWB
@NM00007 EQU   SWB
FMTERR   EQU   SWB
IOERR    EQU   SWB
RDRSW    EQU   SWA
SETCVTSW EQU   SWA
@NM00006 EQU   SWA
GOSW     EQU   SWA
@NM00005 EQU   SWA
@NM00004 EQU   SWA
@NM00003 EQU   SWA
@NM00002 EQU   SWA
LINENUM  EQU   COMMON+120
LINENUMB EQU   COMMON+118
SIXTEEN  EQU   COMMON+116
TWELVE   EQU   COMMON+114
ELEVEN   EQU   COMMON+112
HTEN     EQU   COMMON+110
EIGHT    EQU   COMMON+108
SEVEN    EQU   COMMON+106
FIVE     EQU   COMMON+104
FOUR     EQU   COMMON+102
THREE    EQU   COMMON+100
TWO      EQU   COMMON+98
ONEA     EQU   COMMON+96
READTM   EQU   COMMON+92
RDERCNT  EQU   COMMON+88
READNO   EQU   COMMON+84
RDENTRY  EQU   COMMON+80
@NM00001 EQU   COMMON+78
FILESEQ  EQU   COMMON+76
INDD     EQU   COMMON+68
STORSIZE EQU   COMMON+64
PCBPTR   EQU   COMMON+60
PAGENUMB EQU   COMMON+44
LINECNT  EQU   COMMON+40
SIX      EQU   COMMON+36
NUCTOP   EQU   COMMON+32
WORK1    EQU   COMMON+24
DELIMCD  EQU   COMMON+20
KYWDEND  EQU   COMMON+16
KYWDBGN  EQU   COMMON+12
VERBEND  EQU   COMMON+8
VERBGN   EQU   COMMON+4
@NM00081 EQU   PSA+3412
PSASTAK  EQU   PSA+3072
@NM00080 EQU   PSA+1032
PSAUSEND EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSARV060 EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSARV054 EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSAMODE  EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00079 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00078 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSARV011 EQU   PSASUP3
PSARV010 EQU   PSASUP3
PSARV009 EQU   PSASUP3
PSARV008 EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSAIPCRP EQU   PSASUP1
PSAIPCDR EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00077 EQU   FLCFSA
@NM00076 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00075 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00074 EQU   FLCIOA
@NM00073 EQU   FLCMCLA+15
@NM00072 EQU   FLCMCLA+14
@NM00071 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00070 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00069 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00068 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00067 EQU   FLCPER
@NM00066 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00065 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00064 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00063 EQU   FLCPIILC
@NM00062 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00061 EQU   FLCSVILC
@NM00060 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00059 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00058 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00140 EQU   @RC00138
@RF00163 EQU   @RC00138
@RC00165 EQU   @RC00138
@RC00126 EQU   @RC00123
@RF00214 EQU   @RC00118
@RC00219 EQU   @RC00118
@RF00259 EQU   @RC00116
@RC00294 EQU   @RC00290
@RC00330 EQU   @RC00326
@RC00453 EQU   @RC00441
@RC00401 EQU   @RC00398
@PB00002 EQU   @EC00675
@RF00708 EQU   @EL00001
@RC00130 EQU   @RC00126
@RC00455 EQU   @RC00453
@RF00184 EQU   @RC00130
@RC00581 EQU   @RC00455
@RC00593 EQU   @RC00455
@RC00604 EQU   @RC00455
@ENDDATA EQU   *
         END   AMDPRFSC,(C'PL/S-II',0502,73353)
