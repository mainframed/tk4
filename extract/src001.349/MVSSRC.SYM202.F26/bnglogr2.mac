 TITLE 'BNGLOGER - MVS LOGGER MODULE - WRITES TO SYS1.DEMFLOG D.S.'
         PRINT OFF
         MACRO
&NAME    BNGHJN &LABEL,&HJN
         LCLC  &HJA,&HJB
&HJA     SETC  '&SYSPARM'(1,4)
&HJB     SETC  '&SYSPARM'(5,4)
         AIF   ('&LABEL' EQ '').NOBRNCH
         B     &LABEL .                 BR AROUND CONSTANTS
         SPACE 2
.NOBRNCH ANOP
         AIF   ('&NAME' EQ '').NOLABEL
         DC    C'&NAME' .              MODULE IDENTIFIER
.NOLABEL ANOP
         DC    X'&HJA' .                DATE OF MODIFICATION
         AIF   ('&HJN' NE 'HJN').DATE
         DC    X'&HJB' .                HJN OF MODIFICATION
.DATE    ANOP
         AIF   ('&LABEL' EQ '').NOLBL
         SPACE 2
&LABEL   DS    0H
.NOLBL   ANOP
         MEND
         PRINT ON
***********************************************************************
*                                                                     *
* MODULE NAME = BNGLOGER                                              *
*                                                                     *
* DESCRIPTIVE NAME = MVS LOGGER FUNCTION OF DEMF RECORDING SUSBSYSTEM *
*                                                                     *
* COPYRIGHT = NONE                                                    *
*                                                                     *
* STATUS = RELEASE 1, LEVEL 1                                         *
*                                                                     *
* FUNCTION =   THIS MODULE IS PART OF THE DISPLAY EXCECPTION MONITOR. *
*              FACILITY.  IT RUNS AS A SYSTEM TASK THAT IS STARTED    *
*              FROM THE OPERATOR CONSOLE.  IT IS POSTED BY THE LOGREC *
*              RECORDER MODULE, SVC 76, AND WILL WRITE TO THE DEMF    *
*              DATA SET, RECORDS WHICH HAVE BEEN QUEUED IN A BUFFER   *
*              AREA BY THE SVC 76 ROUTINE.  THESE RECORDS ARE TELE-   *
*              PROCESSING MDR AND OBR RECORDS WHICH WILL LATER BE     *
*              RETRIEVED, FORMATTED, AND SENT TO A REMOTE TERMINAL    *
*              WHICH HAS MADE A REQUEST FOR INFORMATION ABOUT THE     *
*              ERROR ACTIVITY  FOR A GIVEN LINE OR LINES.  THIS       *
*              MODULE DOES NOT HANDLE THE RETRIEVAL AND FORMATTING    *
*              FUNCTIONS.  WHEN POSTED, IT WILL DETERMINE WHICH       *
*              BUFFER OR BUFFERS HAVE BEEN FILLED , AND WILL WRITE    *
*              THEM OUT TO THE DEMF DATA SET.  THE RECORDS ARE GROUPED*
*              ACCORDING TO LINE ADDRESS, AND WRITTEN TO A BDAM DATA  *
*              SET.  AFTER COMPLETION OF THE WRITE, THE MODULE WILL   *
*              ISSUE A WAIT  ON AN ECB WHICH WILL BE POSTED BY SVC 76 *
*              WHEN IT HAS AGAIN FILLED A BUFFER.                     *
*              THIS MODULE ALSO INITIALIZES THE COMMON DATA AREA IN   *
*              THE NUCLEUS  WITH THE BUFFER AREA ADDRESS AND SETS A   *
*              FLAG TO BE TESTED BY SVC 76 TO DETERMINE IF DEMF IS    *
*              ACTIVE.  A GETMAIN IS DONE FOR A BUFFER AREA.  IF ANY  *
*              ERROR CONDITIONS ARE ENCOUNTERED, A MESSAGE WILL BE    *
*              ISSUED AND THE STAE ROUTINE IS ENTERED TO RESET SYSTEM *
*              FLAGS AND TERMINATE LOGGING.                           *
*                                                                     *
* NOTES = NONE                                                        *
*                                                                     *
*    DEPENDENCIES = NONE                                              *
*                                                                     *
*    RESTRICTIONS = NONE                                              *
*                                                                     *
*    REGISTER CONVENTIONS = SEE REGISTERS EQU'S BELOW                 *
*                                                                     *
*    PATCH LABEL = PTCHAREA  (12 FULL WORDS)                          *
*                                                                     *
* MODULE TYPE = CONTROL                                               *
*                                                                     *
*    PROCESSOR = ASSEMBLER H                                          *
*                                                                     *
*    MODULE SIZE = 11920 DECIMAL BYTES                                *
*                                                                     *
*    ATTRIBUTES = SERIALLY REUSABLE                                   *
*                                                                     *
* ENTRY POINT = BNGLOGER                                              *
*                                                                     *
*    PURPOSE = SEE FUNCTION                                           *
*                                                                     *
*    LINKAGE = START COMMAND FROM SYSTEM OPERATOR.                    *
*              POST MACRO ISSUED BY IFBSVC76 ROUTINE (SVC 76).        *
*                                                                     *
* INPUT = ONE OR MORE INCIDENT RECORDS QUEUED IN THE BUFFER AREA,     *
*         AND THE CORRESPONDING BYTE IN THE BUFFER TABLE HAVING ITS   *
*         HIGH ORDER BIT SET TO ONE.                                  *
*                                                                     *
* OUTPUT = DEPENDING ON THE INPUT, ZERO, ONE OR MORE RECORDS WRITTEN  *
*          TO THE SYS1.DEMFLOG DATA SET.                              *
*                                                                     *
* EXIT-NORMAL = REGISTER 15 RETURN CODES RETURNED TO CALLER :         *
*               00 - OPERATION PERFORMED AS REQUESTED                 *
*                                                                     *
* EXIT-ERROR = NONE                                                   *
*                                                                     *
* EXTERNAL REFERENCE = SEE BELOW                                      *
*                                                                     *
*    ROUTINES = NONE                                                  *
*                                                                     *
*    DATA AREAS = BUFFER AREA USED BY IFBSVC76 AND BNGLOGER.          *
*                                                                     *
*    CONTROL BLOCK = CVT,IFBDCB00                                     *
*                                                                     *
* TABLES = CTRLTBL  - USED BY TRT IN IFBSVC76 TO FIND FREE BUFFER     *
*          BUFFTBL  - USED BY TRT IN IFBSVC76 TO FIND FREE BUFFER     *
*                                                                     *
* MACROS = CVT,DCB,GETMAIN,FREEMAIN,ESTAE,ENQ,DEQ,OPEN,CLOSE,WTO,WTOR,*
*          WAIT,READ,WRITE,CHECK,TIME,IHAPSA,MODESET.                 *
*                                                                     *
* CHANGE ACTIVITIES AS FOLLOWS:                                       *
* CHANGE 01  11/15/77  PROLOGUE ADDED                                 *
* CHANGE 02  02/24/78  BNGHJN MACRO ADDED                             *
*C200500                                                       @OZ29853
*A078000,178500,183500                                         @OZ29853
*A074500,157000,157500,163000                                  @OZ29866
*C149500,153500,377000,378500                                  @OZ29866
*                                                                     *
***********************************************************************
         EJECT
********                *****   REGISTER EQUATES   ****           ****
R0       EQU   0                       REGISTER 0
R1       EQU   1                       REGISTER 1
R2       EQU   2                       REGISTER 2
R3       EQU   3                       REGISTER 3
R4       EQU   4                       REGISTER 4
R5       EQU   5                       REGISTER 5
R6       EQU   6                       REGISTER 6
R7       EQU   7                       REGISTER 7
R8       EQU   8                       REGISTER 8
R9       EQU   9                       REGISTER 9
R10      EQU   10                      REGISTER 10
R11      EQU   11                      REGISTER 11
R12      EQU   12                      REGISTER 12
R13      EQU   13                      REGISTER 13
R14      EQU   14                      REGISTER 14
R15      EQU   15                      REGISTER 15
*
SAVEREG  EQU   13                      SAVE AND CONSTANT AREA REG.
BASEREG  EQU   12                      MODULE BASE REG.
BUFFREG  EQU   11                      DEMF BUFFER AREA REG.
CVTREG   EQU   3                       CVT BASE REG.
RETREG   EQU   14                      RETURN REGISTER
ENTREG   EQU   15                      ENTRY REGISTER
IFBREG   EQU   10                      IFBDCB NUCLEUS CSECT REGISTER.
DATAREG  EQU   8                       RECORD POINTER REGISTER.
LINKREG  EQU   2                       LINKAGE REGISTER.
BASERG2  EQU   6                       SECOND BASE REGISTER.
SLOTREG  EQU   3
BCTREG   EQU   4
*
*
*
********                 ***** MISCELLANEOUS EQUATES *****
         CVT   DSECT=YES
         PRINT NOGEN
         IHAPSA
         PRINT GEN
*
DCBDISP  EQU   16                      LOGREC DCB DISP. IN IFBDCB CSECT
OPENBIT  EQU   16                      DCB OPEN BIT.
DCBOFLGS EQU   48                      DISP IN DCB TO OPEN FLAGS.
         SPACE 2
ONE      EQU   1                   FOR DISPLACEMENT
TWO      EQU   2                   FOR DISPLACEMENT
EIGHT    EQU   8                   FOR DISPLACEMENT
TWEL     EQU   12                  FOR DISPLACEMENT
PRESIZE  EQU   7                   PREFIX LENGTH OF DEMFILE RECORD
MDR      EQU   X'91'               MDR RECORD TYPE
OBRBT    EQU   X'30'               OBR - BTAM RECORD TYPE
OBRTC    EQU   X'34'               OBR - TCAM RECORD TYPE
DDIDISP  EQU   64                  DISP IN LONG OBR TO DEV DEP INFO
ZERO     EQU   0
M3270EP  EQU   X'03'               MDR 3270 EP MODE
OBRNA1   EQU   X'E0'               UNWANTED OBRS: SDR CTRS,TEMP,SHORT
OBRNA2   EQU   X'60'               UNWANTED OBRS: CTR OVFLO, EOD
OBRCCTT  EQU   X'01'          OBR TCAM 3270 SW; ON IF CC/TT    @OZ29866
*                             VALID                            @OZ29866
ODEVCOM  EQU   X'40'          OBR DEVICE CLASS = COMMUNICATONS @OZ29866
ODEVUNT2 EQU   X'90'          OBR UNIT TYPE = SYNC ADAPT TYP 2 @OZ29866
ODEVNOT2 EQU   X'60'          OBR UNIT TYPE=NOT SYNC ADAP 2    @OZ29866
ODEVMOD3 EQU   X'07'          OBR MODEL BITS = BISYNCH 3       @OZ29866
ODEVNOT3 EQU   X'08'          OBR MODEL BITS = NOT BISYNCH 3   @OZ29866
BTAMSYN  EQU   X'32'          OBR BTAM CONTROL CHARACTER: SYN  @OZ29866
         EJECT
BNGLOGER CSECT
*
         STM   R14,R12,12(R13)         SAVE REGISTERS.
         LR    R12,R15                 LOAD FIRST BASE REG.
         USING BNGLOGER,BASEREG,BASERG2  NOTIFY ASM OF BASE REGS.
*
BNGLOGR2 BNGHJN SKIPID                                         @OZ29853
         LA    BASERG2,BNGLOGER+4095     INITIALIZE
         LA    BASERG2,1(BASERG2)      SECOND BASE REGISTER.
***
         GETMAIN   R,LV=96,SP=0        GET STORAGE FOR SAVE AREA.
***
         ST    SAVEREG,4(R1)           PERFORM SAVE AREA CHAINING.
         ST    R1,8(SAVEREG)           POINT LSA TO HSA.
         LR    SAVEREG,R1              R13 NOW POINTS TO NEW SAVE.
         USING SAVE,SAVEREG            EST. ADDRESSABILITY.
***
         GETMAIN   R,LV=4096,SP=241    GET BUFFER AREA STORAGE.
***
         LR    BUFFREG,R1              POINT BUFFREG TO BUFF AREA.
         USING BUFFER,BUFFREG      SET UP BUFFER ADDRESSABILITY
         SPACE 2
*  INITIALIZATION OF BUFFER CONTROL AREA
         SPACE 2
         MVI   BUFFLAG1,ZERO       CLEAR FLAG1
         MVI   BUFFLAG2,ZERO       CLEAR FLAG2
         SPACE 2
*
*****              LOCATE IFBDCB CSECT IN NUCLEUS AND INITIALIZE  ****
*****              CONSTANTS IN THE DEMF AREA.                    ****
*
         L     CVTREG,CVTPTR       FIND CVT
         USING CVTMAP,CVTREG       ESTABLISH CVT ADDRESSABILITY
         L     IFBREG,CVTDCB       GET POINTER TO LOGREC DCB
         DROP  CVTREG
         LA    CVTREG,DCBDISP      DISP OF LOGREC DCB IN IFBDCB00
         SR    IFBREG,CVTREG       POINT TO START OF MODULE
         USING IFBDCB,IFBREG           ESTABLISH DSECT ADDRESSABILITY
         SPACE 1
         STM   IFBREG,BASEREG,ESTAEP    SAVE REGS A,B,C
         ST    BASERG2,ESTAEP+TWEL      SAVE REG 6
         ESTAE STAERTN,CT,PARAM=ESTAEP,XCTL=NO,PURGE=QUIESCE,ASYNCH=YESX
               ,TERM=YES
         SPACE 1
         MODESET KEY=ZERO          PROTECT KEY ZERO
         TS    IFBFLGS1            IS DEMF ALREADY ACTIVE?(TEST HI BIT)
         BC    4,REJECT                YES, CAN'T HAVE ANOTHER
         SPACE 1
         ST    BUFFREG,IFBBUFP         ST BUFF AREA PTR IN COMM AREA
         MVC   BUFBYTES(L'BUFFTBL),BUFFTBL  BUSY BYTES TO COMM AREA
         SPACE 1
         LA    R7,PRESIZE          INIT PREFIX SIZE
         STH   R7,BUFPRESZ         STORE IN BUFFER CONTROL
         LA    R7,BUFECB               POINT TO DEMF TASK ECB.
         ST    R7,ECBPTR               INIT. ECB LIST.
         SPACE 1
         USING PSA,0
         MVC   IFBASCBP,PSAAOLD    MOVE ASCB PTR INTO DCB EXTENSION
         MODESET KEY=NZERO         PROTECTION KEY TCB
         SPACE 2
***
         OPEN  (LOGDCB,UPDAT)          OPEN DEMF DATA SET
***
         TM    LOGDCB+DCBOFLGS,OPENBIT DCB OPENED O.K.?
         BZ    ERROPEN                 BR IF NO TO ERROR RTN.
***
         WTOR  'BNG900A DEMF ACTIVE. REPLY ''END DEMF'' TO TERMINATE.',X
               REPLY,8,STOPECB,ROUTCDE=(1)
***
WAITLOG  EQU   *
         XC    BUFECB(4),BUFECB        CLEAR ECB FOR WAIT.
*   RESET ALL WTO ERROR FLAGS
         NI    BUFFLAG1,FOXS-(BUFBIGRC+BUFBIGRW+BUFBFULL+BUFBFULW)
WAIT2    EQU   *
***
         WAIT  ECBLIST=ECBPTR          WAIT FOR SVC 76 POST.
***
         TM    STOPECB,X'40'       DID OPER REQUEST END?
         BO    CHEKSTOP            BR IF YES TO TEST REPLY.
***********************************************************************
*                                                                     *
*              THE FOLLOWING CODE FINDS THE BUFFERS FILLED BY SVC     *
*              76 AND BRANCHES TO THE BDAM WRITE ROUTINE PUT          *
*              THE RECORD IN ITS 'BUCKET'.  AFTER THIS, THE BUFFER    *
*              TABLE IS SEARCHED AGAIN, IN CASE ANOTHER BUFFER WAS    *
*              FILLED DURING THE TIME WE WERE EXECUTING .  A NO-HIT   *
*              TABLE SEARCH RESULTS IN A WAIT FOR ANOTHER POST.       *
*                                                                     *
***********************************************************************
*
FINDBUF  EQU   *
         SR    R1,R1                   ZERO REGISTERS FOR
         SR    R2,R2                   TRT INSTRUCTION.
***
         LA    R3,BUFBYTES             POINT TO BUSY BYTES
         TRT   ZERO(BUFFS,R3),CTRLTBL     SEARCH FOR ACTIVE BUFFER.
***
         BC    8,WAITLOG               NO ACTIVE ENTRIES, GO WAIT.
         BC    4,BUFOUND               BR IF BUFFER FOUND.
         MVI   EOTIND,X'FF'            INDICATE BUFFER FOUND IS LAST.
BUFOUND  EQU   *
         SPACE 2
*  MESSAGE HANDLER
         SPACE 2
         ST    R1,CURRBUF          SAVE CURRENT BUFFER PTR
         TM    BUFFLAG1,BUFNOLOG+BUFBIGRC+BUFBFULL ANY ON?
         BZ    NOMSG
         SPACE 2
         TM    BUFFLAG1,BUFNOLOG+BUFNOLGW   LOGREC RECORDING
         BC    9,SKIP1             SKIP IF BOTH OR NEITHER BIT ON
         WTO   'BNG907I SYS1.LOGREC RECORDING OF DEMF RECORDS INHIBITEDX
               .',ROUTCDE=(2)
         OI    BUFFLAG1,BUFNOLGW   INHIBIT WTO SECOND TIME
SKIP1    EQU   *
         TM    BUFFLAG1,BUFBIGRC+BUFBIGRW    RECORD TOO BIG
         BC    9,SKIP2             SKIP IF BOTH OR NEITHER BIT ON
         WTO   'BNG908I SYS1.LOGREC RECORD(S) TOO BIG FOR DEMF BUFFER. X
               RECORD(S) LOST.',ROUTCDE=(2)
         OI    BUFFLAG1,BUFBIGRW   INHIBIT WTO SECOND TIME
SKIP2    EQU   *
         TM    BUFFLAG1,BUFBFULL+BUFBFULW    BUFFERS FULL
         BC    9,NOMSG             SKIP IF BOTH OR NEITHER BIT ON
         WTO   'BNG909I DEMF BUFFERS FULL. RECORD(S) LOST.',ROUTCDE=(2)
         OI    BUFFLAG1,BUFBFULW   INHIBIT WTO SECOND TIME
NOMSG    EQU   *
         SPACE 2
*  TEST FOR ACCEPTABLE INPUT RECORD TYPES
         SPACE 2
         L     R1,CURRBUF          POINT TO BUFFER BYTE TABLE HIT
         LR    DATAREG,R2              LOAD BUFF DISP IN MULTIPLIER.
         MH    DATAREG,BUFSIZE         REG2 INDEX CONTAINS BUFF NO.
         SH    DATAREG,BUFSIZE         DECREMENT TO CONV TO DISP.
         AR    DATAREG,BUFFREG         REG8 NOW POINTS TO ACTIVE BUFF.
         USING BTCAM,DATAREG       DSECT ADDRESSABILITY
         CLI   BTTYPE,MDR          MDR RECORD TYPE?
         BNE   OBR1                NO, TEST FOR OBR
         SPACE 2
* HERE FOR MDR TYPE
         CLI   MDRSWTCH,M3270EP    3270 EP MODE?
         BE    RECOK               YES, PROCESS IT
         B     COMPL               NO, TERMINATE PROCESSING THIS RECORD
         SPACE 2
OBR1     EQU   *
         TM    BTSWTCH,OBRNA1      ANY UNWANTED OBR TYPES?
         BC    5,COMPL             YES, TERMINATE PROCESSING THIS
         SPACE 2
*  HERE OBR RECORDS
         SPACE 2
* COMMON BTAM-TCAM PROCESSING
         LA    R7,DDIDISP+PRESIZE(DATAREG)  POINT TO DEV DEP   @OZ29866
*                                           INFORMATION        @OZ29866
         SR    R9,R9               CLEAR WORK REG
         IC    R9,BTDDDWD          DEV DEP DATA LENGTH (IN DWORDS)
         SLL   R9,3                MULT BY 8 TO GET BYTES
         LA    R7,0(R7,R9)         ADDR PAST DEV DEP DATA
         SR    R9,R9               CLEAR WORK REG
         IC    R9,BTSDRCT          GET STAT BYTE COUNT
         LA    R7,0(R7,R9)         ADDR OF SENSE BYTES
         MVC   BTPOLL,BTCCTT       MOVE POLLING CHARS IN OBR   @OZ29866
         SPACE 2
* OBR-BTAM PROCESSING FOR COMMON DISPLAY FORMAT
         CLI   BTTYPE,OBRBT        OBR-BTAM RECORD TYPE?
         BNE   OBR2                NO, TEST FOR OBR-TCAM
         MVC   BTSENSE1,ZERO(R7)   MOVE TO SENSE 1 FROM CALC. ADDR.
         MVC   BTBTOP,ONE(R7)      MOVE BTAM OP CODE
         MVI   BTSENSE2,ZERO       CLEAR SENSE BYTE 2
         SPACE 2                                               @OZ29866
*    TEST DEVICE TYPE FIELD IN OBR FOR BISYNCH 3 DEVICES.      @OZ29866
*    IF ALL TESTS OK, THEN CHECK CC IN BTCCTT (BTPOLL)         @OZ29866
         SPACE 1                                               @OZ29866
         CLI   BTDEVTP2,ODEVCOM    OBR DEV TYPE=COMMUNICATONS? @OZ29866
         BNE   OBR12               NO, SET F'S                 @OZ29866
         TM    BTDEVTP3,ODEVUNT2   OBR UNIT TYPE=SYNC ADAPT 2? @OZ29866
         BNO   OBR12               NO, SET F'S                 @OZ29866
         TM    BTDEVTP3,ODEVNOT2   OBR UNIT OTHER THAN SYN 2?  @OZ29866
         BNZ   OBR12               YES, SET F'S                @OZ29866
         TM    BTDEVTP0,ODEVMOD3   OBR MODEL BITS = BISYNCH 3? @OZ29866
         BNO   OBR12               NO, SET F'S                 @OZ29866
         TM    BTDEVTP0,ODEVNOT3   OBR MODEL BITS OTHER THAN   @OZ29866
*                                  BSC 3 ?                     @OZ29866
         BNZ   OBR12               YES, SET F'S                @OZ29866
         SPACE 2                                               @OZ29866
*    HERE IF DEVICE IS BISYNCH 3, NOW CHECK FOR VALID CC       @OZ29866
         SPACE 1                                               @OZ29866
         CLC   BTPOLL(ONE),BTPOLL+ONE    ARE BYTES EQUAL?      @OZ29866
         BNE   OBR12               NO, SO INVALID CC, SET FF'S @OZ29866
         CLI   BTPOLL,BTAMSYN      BTAM CONTROL CHAR? (SYN)    @OZ29866
         BE    OBR12               YES, SET FF'S               @OZ29866
         CLI   BTPOLL,ZERO         IS CU POLL CHAR ZERO?       @OZ29866
         BE    OBR12               YES, CONTROL UNIT IS VALID  @OZ29866
*    HERE IS VALID CC, JUST SET TERM FF                        @OZ29866
         MVI   BTPOLL+ONE,FOXS     INSERT FF TERM POLL CHAR    @OZ29866
         B     RECOK               PROCESS IT
OBR12    EQU   *                                               @OZ29866
         MVC   BTPOLL,HEXFF        INSERT F'S INTO OBR         @OZ29866
         B     RECOK               PROCESS IT                  @OZ29866
         SPACE 2
* OBR-TCAM PROCESSING FOR COMMON DISPLAY FORMAT
*
OBR2     EQU   *
         CLI   BTTYPE,OBRTC        OBR TCAM RECORD TYPE?
         BNE   COMPL               NO, TERMINATE PROCESSING THIS RECORD
         TM    BTFLAG,OBRNA2       UNWANTED RECORD TYPES?
         BC    5,COMPL             YES,TERM PROCESSING THIS RECORD
         MVC   BTSENSE1,ONE(R7)    MOVE SECOND SENSE TO FIRST
         MVI   BTSENSE2,ZERO       CLEAR SECOND SENSE BYTE
         MVC   BTCCW,BTTCOP        MOVE TCAM OP CODE INTO CCW 6TH BYTE
         TM    BTSWTCH,OBRCCTT     ARE CU/TERM POLL CHARS VALID@OZ29866
         BO    RECOK               YES, CONTINUE               @OZ29866
         MVC   BTPOLL,HEXFF        INSERT F'S INTO OBR         @OZ29866
         SPACE 2
RECOK    EQU   *
         ST    R1,CURRBUF              SAVE CURRENT BUFFER DISP IN TBL.
         BAL   LINKREG,EMFWRT          GO WRITE RECORD IN DEMF DATASET.
         L     R1,CURRBUF              POINT TO LAST TBL BYTE HIT.
         SPACE 2
COMPL    EQU   *
         NI    0(R1),X'7F'             RESET BUFFER ACTIVE INDICATOR.
         TM    EOTIND,X'FF'            WAS LAST HIT ON END OF TABLE?
         BZ    FINDBUF                 BR IF NO TO SCAN TBL AGAIN.
         MVI   EOTIND,X'00'            IF YES RESET LAST BYTE IND.
         B     WAITLOG                 AND GO TO WAIT FOR NEXT POST.
CHEKSTOP EQU   *
         OC    REPLY(ENDSIZE),CAPS     FOLD REPLY TO CAPITALS
         CLC   REPLY(ENDSIZE),ENDDEMF  DID OPER REPLY CORRECTLY?
         BE    RETURN                  IF YES BR TO GO AWAY.
         XC    REPLY(ENDSIZE),REPLY    NO, INIT FOR REISSUE OF WTOR.
         XC    STOPECB(4),STOPECB      CLEAR ECB FOR WAIT.
         WTOR  'BNG901A INVALID REPLY. TO TERMINATE DEMF, ENTER ''END DX
               EMF''.',REPLY,8,STOPECB,ROUTCDE=(1)
         B     WAIT2               GO WAIT FOR SVC 76 OR END.
REJECT   DS    0H
         WTO   'BNG902I DEMF ALREADY ACTIVE. REQUEST IGNORED.',        X
               ROUTCDE=(2)
         B     RETURN1
RETURN   EQU   *
         ENQ   (BNGADR,BUFFRADR,E,6,SYSTEMS),RET=NONE  ENQ ON BUFFER
         MODESET KEY=ZERO          PROTECTION KEY ZERO
         NI    IFBFLGS1,X'7F'   INDICATE DEMF NO LONGER ACTIVE.
         MODESET KEY=NZERO         PROTECTION KEY TCB
         DEQ   (BNGADR,BUFFRADR,6,SYSTEMS),RET=HAVE  DEQ ON BUFFER
         TM    LOGDCB+DCBOFLGS,OPENBIT  OPEN FAILURE?          @OZ29853
         BZ    RETURN2                  YES, GO TO RETURN2     @OZ29853
         TM    STAEFLAG,STAEON     STAE EXIT ENTERED?
         BO    STAE1               YES, PRINT ABNORM MSG
         WTO   'BNG903I DEMF BEING TERMINATED.',ROUTCDE=(2)
         B     STAE2               SKIP ABNORM MSG
STAE1    EQU   *
         WTO   'BNG910I DEMF BEING ABNORMALLY TERMINATED.',ROUTCDE=(2)
STAE2    EQU   *
         CLOSE (LOGDCB)
RETURN1  EQU   *
         MODESET KEY=NZERO         PROTECTION KEY TCB
RETURN2  EQU   *                                               @OZ29853
         TM    STAEFLAG,STAEON     STAE EXIT ENTERED?
         BO    STAE3               YES, SKIP STAE CANCEL
         STAE  0
STAE3    EQU   *
         FREEMAIN R,LV=4096,SP=241,A=(BUFFREG)
         TM    STAEFLAG,STAEON          STAE EXIT ENTERED?
         BO    STAE4                    YES, TERMINATE
         L     SAVEREG,HSAPTR      RELOAD REG 13.
         L     R1,EIGHT(SAVEREG)   LOAD ADDR OF SAVE AREA
         FREEMAIN R,LV=96,SP=0,A=(R1)
         LM    R14,R12,REGSAVE     RESTORE REGISTERS.
STAE4    EQU   *
         SR    R15,R15             INDICATE ZERO RETURN CODE.
         BR    R14                 RETURN TO SYSTEM.
         SPACE 5
STAERTN  EQU   *                   STAE EXIT ROUTINE
         USING STAERTN,R15         ESTABLISH TEMP ADDR.
         C     R0,STAETEST         TEST FOR SDWA CORE
         BE    NOSDWA              NO SDWA, USE REG 1
         L     R2,ZERO(R1)         PTR TO PARMS
NOSDWA   EQU   *
         LM    IFBREG,BASEREG,ZERO(R2) RESTORE REGS A,B,C
         L     BASERG2,TWEL(R2)    RESTOR REG 6
         DROP  R15                 DROP TEMP ADDR.
         USING BNGLOGER,BASEREG,BASERG2  RESTORE ORIG ADDR
         OI    STAEFLAG,STAEON     SET STAE ERROR FLAG
         B     RETURN              GO TO NORMAL TERMINATION
         SPACE 5
ERROPEN  EQU   *
***
         WTO   'BNG904I ERROR OPENING SYS1.DEMFLOG DATA SET. DEMF NOT AX
               CTIVATED.',ROUTCDE=(2)
***
         B     RETURN                                          @OZ29853
***
         EJECT
* THIS ROUTINE WILL WRITE TO DISK A VARIABLE LTH MDR OR OBR RECORD.
*
         USING EMFSLOT,SLOTREG     SETUP TO PROCESS A SLOT IN CTRL REC.
EMFWRT   STM   0,15,EMFSAVE
         TM    7(DATAREG),X'30'    IF THIS IS ANY OBR RECORD
         BNO   EMFLOG4             FOR A
         CLI   61(DATAREG),X'10'   GRAPHICS DEVICE, ALTER THE
         BNE   EMFLOG4             UNIT ADDR SO ALL 3277'S FALL
         NI    3(DATAREG),B'11100000'   INTO COMMON CTRL UNIT BUCKET.
EMFLOG4  DS    0H
         XC    EMFREL,EMFREL       SET RELATIVE BLK ADDR TO ZERO.
EMFLOG5  READ  ECBA3,DI,LOGDCB,EMFCTRL,4096,0,EMFREL  READ ZERO BLK.
         CHECK ECBA3
         LA    SLOTREG,EMFSLOT1    POINT TO 1ST ENTRY IN CTRL BLK.
         SR    BCTREG,BCTREG       SETUP TO LOOP ON NBR
         IC    BCTREG,EMFENTS      OF ENTRIES.
         LTR   BCTREG,BCTREG
         BZ    EMFLOG15            MUST BE 1ST ERROR OF THE DAY.
EMFLOG10 CLC   EMFPORT,1(DATAREG)  IS THIS ENTRY EQUAL OUR ITEM TO LOG?
         BE    EMFLOG40            YES. GO READ DATA BLOCK.
         LA    SLOTREG,SLOTLTH(SLOTREG)     NO. LOOP TO NEXT SLOT.
         BCT   BCTREG,EMFLOG10
         OC    EMFNEXT,EMFNEXT     NOT IN THIS BLK.  ANOTHER BLK EXIST?
         BZ    EMFLOG15            NO.  CREATE A CONTROL ENTRY.
         MVC   EMFREL,EMFNEXT+1    YES. SETUP TO READ THAT
         B     EMFLOG5               CHAIN RECORD.
EMFLOG15 BAL   LINKREG,EMFGETAD    GET A NEW BLOCK ADDRESS.
         STCM  0,7,EMFBLK          STORE AS DATA BLK ADDRESS.
         LA    0,DATAREA1          ZERO OUT THE DATA AREA.
         LH    1,H4096
         LA    14,*
         SR    15,15
         MVCL  0,14
         MVC   DATPORT,1(DATAREG)  INITIALIZE HEADER
         TIME  DEC
         STCM  0,15,DATTIME        PORTION OF THE
         STCM  1,15,DATDATE        DATA RECORD.
         LA    0,DATSLOT1
         SR    1,1
         IC    1,0(DATAREG)        MOVE THE DATA TO BE LOGGED
         LR    14,DATAREG          INTO THE FIRST SLOT.
         LR    15,1
         MVCL  0,14
         MVC   DATLTH+1(1),DATSLOT1  SET TOTAL LTH = THIS DATA.
         WRITE ECBB7,DI,LOGDCB,DATAREA1,4096,0,EMFBLK  WRITE DATA BLK.
         CHECK ECBB7
         OC    EMFREL,EMFREL       IS CTRL RECORD ZERO IN CORE?
         BZ    EMFLOG20            YES.  CONTINUE.
         XC    EMFREL,EMFREL       NO.  RE-READ IT.
         READ  ECBB15,DI,LOGDCB,EMFCTRL,4096,0,EMFREL
         CHECK ECBB15
EMFLOG20 DS    0H
         CLI   EMFENTS,254         IS CTRL BLOCK FULL?
         BE    EMFLOG30            YES. GO CREATE OVERFLOW.
         LA    SLOTREG,EMFSLOT1    NO. LOCATE NEXT
         SR    BCTREG,BCTREG       AVAILABLE
         IC    BCTREG,EMFENTS      SLOT.
         LTR   BCTREG,BCTREG
         BZ    EMFLOG26            MUST BE 1ST ERROR OF THE DAY.
EMFLOG25 LA    SLOTREG,SLOTLTH(SLOTREG)
         BCT   BCTREG,EMFLOG25
         IC    BCTREG,EMFENTS      ADD 1 TO NBR
EMFLOG26 LA    BCTREG,1(BCTREG)    OF ENTRIES IN
         STC   BCTREG,EMFENTS      THIS BLOCK.
EMFLOG27 MVC   EMFPORT,1(DATAREG)  FILL IN THE PORT ADDRESS,
         MVC   EMFBLKS,H1       SET TOTAL BLOCKS = 1,
         MVC   EMFHITS,H1       TOTAL HITS = 1,
         MVC   EMFSTART,EMFBLK     AND THE DATA BLK ADDR AS
         MVC   EMFEND,EMFBLK       1ST AND LAST IN THE CHAIN.
         WRITE ECBB23,DI,LOGDCB,EMFCTRL,4096,0,EMFREL  REWRITE CTRL BLK
         CHECK ECBB23
         LM    0,15,EMFSAVE
         BR    LINKREG
EMFLOG30 BAL   LINKREG,EMFGETAD    GET A NEW BLK ADDR FOR NEW CTRL BLK.
         STCM  0,7,EMFREL          STORE THE NEW ADDRESS.
         WRITE ECBC3,DI,LOGDCB,EMFCTRL,4096,0,EMFREL  WRITE OLD CTRL
         CHECK ECBC3
         MVC   EMFNEXT+1(3),EMFREL    PROMOTE THE BACK CHAIN FIELD.
         XC    EMFREL,EMFREL       RESET ADDR TO ZERO CTRL RECORD.
         OC    EMFFIRST,EMFFIRST   IF THIS WAS THE 1ST TIME
         BNZ   EMFLOG35            TO CREATE AN OVERFLOW, ALSO
         MVC   EMFFIRST,EMFNEXT    PROMOTE 1ST ADDR IN CHAIN.
EMFLOG35 MVI   EMFENTS,X'00'
         LA    0,EMFSLOT1          ZERO OUT THE COUNT AND DATA
         LA    1,EMFBLOCK-EMFSLOT1
         LA    14,*
         LA    15,0
         MVCL  0,14
         LA    SLOTREG,EMFSLOT1    POINT TO 1ST SLOT,
         MVI   EMFENTS,1           SET NBR ENTRIES = 1,
         B     EMFLOG27            AND GO MAKE CTRL ENTRY.
EMFLOG40 MVC   EMFBLK,EMFEND       MOVE ADDR OF NEWEST BLK IN CHAIN.
         READ  ECBD2,DI,LOGDCB,DATAREA1,4096,0,EMFBLK  READ DATA BLK.
         CHECK ECBD2
         LH    1,DATLTH            IS THERE ENOUGH ROOM
         SR    0,0                 LEFT IN THIS BLOCK
         IC    0,0(DATAREG)        FOR THIS DATA ITEM?
         AR    1,0
         C     1,=A(DATEND-DATSLOT1)
         BH    EMFLOG50            NO. GO BUILD DATA BLK CHAIN.
EMFLOG45 LA    0,DATSLOT1          YES.
         AH    0,DATLTH            POINT TO NEXT AVAILABLE POSITION.
         SR    1,1
         IC    1,0(DATAREG)
         LH    15,DATLTH
         AR    15,1
         STH   15,DATLTH
         LR    14,DATAREG
         LR    15,1
         MVCL  0,14                MOVE IN THE ITEM TO BE LOGGED.
         WRITE ECBD17,DI,LOGDCB,DATAREA1,4096,0,EMFBLK  REWRITE DATA.
         CHECK ECBD17
         LH    1,EMFHITS
         LA    1,1(1)              ADD 1 TO NBR HITS ON THIS LINE.
         STH   1,EMFHITS
         WRITE ECBD22,DI,LOGDCB,EMFCTRL,4096,0,EMFREL  REWRITE CTRL BLK
         CHECK ECBD22
         LM    0,15,EMFSAVE
         BR    LINKREG
EMFLOG50 BAL   LINKREG,EMFGETAD    GET A NEW BLOCK ADDRESS.
         STCM  0,7,EMFNEW          SAVE IT.
         STCM  0,7,DATFWD          MAKE IT NEW FORWARD ADDRESS.
         WRITE ECBE4,DI,LOGDCB,DATAREA1,4096,0,EMFBLK  UPDATE OLD BLK.
         CHECK ECBE4
         XC    DATFWD,DATFWD       FIX UP NEW BLOCK WITH NO FORWARD
         MVC   DATBACK,EMFBLK      CHAIN, BACK CHAIN POINTS TO OLD FULL
         MVC   EMFBLK,EMFNEW       BLOCK, AND SETUP TO USE NEW ADDRESS.
         MVC   EMFEND,EMFNEW       MAKE CTRL BLK POINT TO NEW BLOCK.
         LH    1,EMFBLKS           ADD 1 TO NBR BLKS IN CHAIN.
         LA    1,1(1)
         STH   1,EMFBLKS
         XC    DATLTH,DATLTH
         LA    0,DATSLOT1
         LA    1,DATEND-DATSLOT1
         LA    14,*
         SR    15,15
         MVCL  0,14                ZERO OUT THE DATA RECORD.
         B     EMFLOG45            GO MAKE ENTRY IN NEW BLOCK.
*  THIS SUBROUTINE WILL ACQUIRE AND RETURN IN REGISTER 0 A USABLE
*  DISK ADDRESS, EVEN IF IT HAS TO TAKE THE OLDEST BLOCK OUT OF THE
*  LONGEST CHAIN AND RE-USE IT.
EMFGETAD DS    0H
         MVC   SAVECTL,EMFREL      SAVE ADDR OF THIS CTRL BLK.
         ST    SLOTREG,SAVESLOT    SAVE ITS POSITION IN THE BLK.
         MVC   SAVEBLK,EMFBLK
         OC    EMFREL,EMFREL       IS CTRL BLK ZERO IN CORE?
         BZ    EMFGET10            YES.
         XC    EMFREL,EMFREL       NO.  RESET REL BLK ADDR AND READ IT.
         READ  ECBG3,DI,LOGDCB,EMFCTRL,4096,0,EMFREL
         CHECK ECBG3
EMFGET10 L     1,EMFLAST           IS THE LAST USED ADDRESS
         LA    1,1(1)              EQUAL TO THE TOTAL NUMBER
         C     1,EMFTOTAL          OF BLKS ALLOCATED TO THE FILE?
         BE    EMFGET30            YES. GO PURGE AN OLD BLOCK.
         ST    1,EMFLAST           NO. ASSIGN A NEW NUMBER.
         SRL   1,2                 COMPUTE LAST-USED PLUS 25%
         A     1,EMFLAST
         C     1,EMFTOTAL          IF RESULT IS LESS THAN TOTAL NBR
         BL    EMFGET15            RECORDS, FILE ISN'T 80% FULL YET.
         TM    BUFFLAG2,BUF80P     WAS 80 PCT WTO WRITTEN ONCE?
         BNZ   EMFGET15            ONLY WRITE 80% MSG TO OPER ONCE.
         WTO   'BNG905I DEMF DATA SET IS 80 PERCENT FULL.',ROUTCDE=(2)
         OI    BUFFLAG2,BUF80P     SET 80-PCT-WTO FLAG
EMFGET15 WRITE ECBG17,DI,LOGDCB,EMFCTRL,4096,0,EMFREL  REWRITE CTRL BLK
         CHECK ECBG17
         MVC   EMFNEW,EMFLAST+1    RETURN REQUESTED ADDRESS.
EMFGET20 DS    0H
         L     SLOTREG,SAVESLOT    RESTORE POINTER TO SLOT BEING USED.
         CLC   SAVECTL,EMFREL      SAME REC WE CAME IN WITH?
         BE    EMFGET25
         MVC   EMFREL,SAVECTL      NO. RESTORE CTRL BLK NBR.
         READ  ECBG20,DI,LOGDCB,EMFCTRL,4096,0,EMFREL  REFRESH CTRL BLK
         CHECK ECBG20
EMFGET25 DS    0H
         CLC   SAVEBLK,EMFBLK      IS DATA BLK SAME ONE WE CAME IN WITH
         BE    EMFGET28            YES. GET OUT.
         MVC   EMFBLK,SAVEBLK      RESTORE BLOCK ADDRESS.
         READ  ECBG28,DI,LOGDCB,DATAREA1,4096,0,EMFBLK
         CHECK ECBG28
EMFGET28 DS    0H
         SR    0,0
         ICM   0,7,EMFNEW
         BR    LINKREG             RETURN TO CALLER WITH NEW ADDR IN 0.
EMFGET30 TM    BUFFLAG2,BUF100P    WAS 100 PCT WTO WRITTEN ONCE?
         BNZ   EMFGET35            YES, SKIP WTO
         WTO   'BNG906I DEMF DATA SET IS 100 PERCENT FULL. GOING INTO RX
               E-USE MODE.',ROUTCDE=(2)
         OI    BUFFLAG2,BUF100P    SET 100-PCT-WTO FLAG
EMFGET35 LA    SLOTREG,EMFSLOT1    POINT TO 1ST SLOT IN CTRL BLK.
         SR    BCTREG,BCTREG       SETUP TO LOOP ON NBR
         IC    BCTREG,EMFENTS      OF ENTRIES IN BLOCK.
         LR    1,SLOTREG           PRIME A WORK REGISTER.
EMFGET37 CLC   EMFBLKS,(EMFBLKS-EMFPORT)(1)  IS THIS BUCKET LONGER
         BNH   EMFGET40                          THAN PREVIOUS?
         LR    1,SLOTREG           YES. SAVE ITS ADDRESS.
EMFGET40 LA    SLOTREG,SLOTLTH(SLOTREG)
         BCT   BCTREG,EMFGET37     HERE WE HAVE LONGEST/OLDEST BUCKET.
         LR    SLOTREG,1           POINT TO LONGEST/OLDEST.
         MVC   EMFBLK,EMFSTART         READ FIRST BLOCK.
         READ  ECBH13,DI,LOGDCB,DATAREA1,4096,0,EMFBLK
         CHECK ECBH13
         MVC   EMFNEW,EMFSTART     SAVE ADDR BEING FREED UP.
         MVC   EMFSTART,DATFWD     NOW 2ND BLK BECOMES 1ST BLOCK.
         LH    0,EMFBLKS
         BCTR  0,0                 REDUCE NBR BLKS THIS CHAIN BY 1.
         STH   0,EMFBLKS
         WRITE ECBH17,DI,LOGDCB,EMFCTRL,4096,0,EMFREL
         CHECK ECBH17
         MVC   EMFBLK,EMFSTART         READ NEW FIRST BLOCK.
         READ  ECBH20,DI,LOGDCB,DATAREA1,4096,0,EMFBLK
         CHECK ECBH20
         XC    DATBACK,DATBACK     ZERO BACK-CHAIN OF NEW 1ST BLK.
         MVC   EMFBLK,EMFSTART         REWRITE NEW FIRST BLOCK.
         WRITE ECBH24,DI,LOGDCB,DATAREA1,4096,0,EMFBLK
         CHECK ECBH24
         B     EMFGET20
         EJECT
********           *****    CONSTANTS AND DEFINED AREAS    *****
****
LOGDCB   DCB   DDNAME=DEMFLOG,DSORG=DA,MACRF=(RIC,WIC),OPTCD=R,RECFM=F
****
CTRLTBL  DC    XL128'00'               DUMMY PORTION OF TABLE.
         DC    XL40'0102030405060708090A0B0C0D0E0F101112131415161718191X
               A1B1C1D1E1F202122232425262728'
         DC    XL88'00'               DUMMY AREA.
***
BUFFTBL  DC    XL41'000102030405060708090A0B0C0D0E0F1011121314151617181X
               91A1B1C1D1E1F20212223242526277F'
BUFFS    EQU   40                  SIZE OF BUFFTBL-1
***
EOTIND   DC    X'00'                   CURRENT BUFF LAST INDICATOR.
CURRBUF  DC    F'0'                    PTR TO CURRENT BUFFER BYTE.
BUFSIZE  DC    H'100'                  BUFFER SIZE VALUE.
ECBPTR   DC    F'0'                    EMF TASK ECB PTR.
STOPTR   DC    X'80'               END OF ECB LIST IND.
         DC    AL3(STOPECB)        TERMINATION ECB.
STOPECB  DC    F'0'
REPLY    DC    D'0'
CAPS     DC    X'4040404040404040' TO FOLD REPLY INTO CAPS
H4096    DC    H'4096'             CONSTANT
H1       DC    H'1'                CONSTANT
HEXFF    DC    X'FFFF'             DISPLAYS REQUIRE X'FFFF' IN OBR REC
FOXS     EQU   X'FF'               FOR RESETTING FLAGS
ENDDEMF  DC    C'END DEMF'         EXACT REPLY MESSAGE TO TERM DEMF
BNGADR   DC    C'BNGLOGER'         QNAME FOR ENQ AND DEQ
BUFFRADR DC    C'BUFFER'           RNAME FOR ENQ AND DEQ
ESTAEP   DC    4F'0'               ESTAE PARMS (REG SAVE)
STAETEST DC    F'12'               STAE STORAGE TYPE TEST
STAEFLAG DC    X'00'               SWITCH SET WHEN ESTAE ENTERED
STAEON   EQU   X'80'               USED WHEN ESTAE ENTERED
ENDSIZE  EQU   8                   LENGTH OF 'END DEMF' MESSAGE
PTCHAREA DC    12F'0'              PATCH AREA
         LTORG
SAVESLOT DS    F                   SAVE POINTER TO SLOT IN USE.
SAVECTL  DS    CL3                 SAVE CTRL REC ADDRESS.
SAVEBLK  DS    CL3                 SAVE DATA BLK ADDRESS.
EMFREL   DS    CL3                 RELATIVE BLK FOR CTRL REC I/O
EMFBLK   DS    CL3                 REL BLK FOR DATA RECORD I/O
         DS    0F
         DC    X'00'
EMFNEW   DS    CL3                 SAVE AREA FOR NEW RELATIVE BLK ADDR
EMFSAVE  DS    16F
         DS    D
EMFCTRL  DS    0C                  I/O AREA COR CONTROL RECORDS.
EMFLAST  DS    F                   LAST USED BLOCK ADDRESS.
EMFTOTAL DS    F                   TOTAL BLOCKS IN DATASET.
EMFFIRST DS    F                   FIRST CTRL BLK IN CTRL CHAIN.
EMFNEXT  DS    F                   NEXT (BACKWARD) CTRL BLK IN CHAIN.
EMFENTS  DS    C                   NBR ENTRIES IN THIS CTRL BLK.
EMFRSVD  DS    CL15                RESERVED FOR FUTURE USE.
EMFSLOT1 DS    CL16          1ST OF 254 16-BYTE SLOTS IN CTRL BLK.
SLOTLTH  EQU   *-EMFSLOT1          LENGTH OF ONE SLOT.
         ORG   EMFCTRL+4096        REST OF BLOCK
EMFBLOCK EQU   *                   ENF OF CONTROL BLOCK.
DATAREA1 DS    0C                  AREA TO READ 1ST DATA BLOCK INTO.
DATPORT  DS    CL6                 PORT AND LIB ADDRESS
DATTIME  DS    CL4                 TIME OF ERROR.
DATDATE  DS    CL4                 DATE OF ERROR.
DATFWD   DS    CL3                 FORWARD CHAIN ADDRESS.
DATBACK  DS    CL3                 BACKWARD CHAIN ADDRESS.
DATLTH   DS    CL2                 NBR BYTES USED IN THIS BLOCK.
         DS    CL10         RESERVED FOR FUTURE USER
DATSLOT1 DS    C                   DATA BEGINS HERE.
         ORG   DATAREA1+4096
DATEND   EQU   *                   END OF DATA BLOCK
         SPACE 2
********           *****     DSECTS     *****              *****
         SPACE 2
IFBDCB   DSECT
IFBWORK  DS    89F                     ORIG IFBDCB CSECT CODE.
IFBBUFP  DS    1F                      BUFFER AREA POINTER.
IFBASCBP DS    1F                      MVS ASCB POINTER
         DS    4F                      RESERVED
IFBFLGS1 DS    XL1                     DEMF
IFBFLGS2 DS    XL1                      STATUS
IFBFLGS3 DS    XL1                       FLAGS
IFBFLGS4 DS    XL1
         SPACE 2
SAVE     DSECT
SAVERSVD DC    F'0'                    RESERVED
HSAPTR   DC    F'0'                    HIGHER SAVE AREA PTR.
LSAPTR   DC    F'0'                    LOWER SAVE AREA PTR.
REGSAVE  DC    15F'0'                  SAVE FOR REGS 14-12
WORKAREA DC    6F'0'                   WORK AREA FOR EMF.
         SPACE 2
EMFSLOT  DSECT                     DSECT FOR ONE CONTROL SLOT
EMFPORT  DS    CL6                 PORT ADDRESS AND/OR LIB NAME.
EMFBLKS  DS    CL2                 NBR BLKS IN THIS DETAIL CHAIN.
EMFHITS  DS    CL2                 TOTAL NBR HITS ON THIS LINE.
EMFSTART DS    CL3                 1ST BLOCK IN THIS CHAIN. (OLDEST)
EMFEND   DS    CL3                 LAST BLOCK IN THIS CHAIN. (NEWEST)
         SPACE 2
BUFFER   DSECT
         DS    4000C
BUFECB   DS    1F                  TASK ECB
BUFPOSTL DS    3F                  POST LIST (MVS)
BUFPRESZ DS    1H                  PREFIX SIZE
BUFBYTES DS    41C                 BUSY BYTES
BUFFLAG1 DS    XL1                 DEMF BUFFER FLAGS 1
*  1... .... (X'80')  BUFNOLOG  DO NOT WRITE TO LOGREC IF ON EMFILE
*  .1.. .... (X'40')  BUFBIGRC  RECORD TOO BIG FOR BUFFER
*  ..1. .... (X'20')  BUFBFULL  BUFFERS FULL
*
*  .... 1... (X'08')  BUFNOLGW    NO LOGREC RECORD IF ON EMFILE
*  .... .1.. (X'04')  BUFBIGRW    RECORD TOO BIG FOR BUFFER
*  .... ..1. (X'02')  BUFBFULW    BUFFERS FULL
BUFFLAG2 DS    XL1                 DEMF BUFFER FLAGS 2
*  .1.. .... (X'40')  BUF80P      SET WHEN 80 PERCENT WTO WRITTEN
*  ..1. .... (X'20')  BUF100P     SET WHEN 100 PERCENT WTO WRITTEN
         SPACE 2
BUFNOLOG EQU   X'80'               NO LOGREC RECORD IF SENT TO EMFILE
BUFBIGRC EQU   X'40'               RECORD TOO BIG FOR BUFFER
BUFBFULL EQU   X'20'               BUFFERS FULL
BUFNOLGW EQU   X'08'               WTO 'NOLOGREC' MSG
BUFBIGRW EQU   X'04'               WTO 'RECORD TOO BIG' MSG
BUFBFULW EQU   X'02'               WTO 'BUFFERS FULL' MSG
         SPACE 1
BUF80P   EQU   X'40'               WTO '80 PERCENT' MSG
BUF100P  EQU   X'20'               WTO '100 PERCENT' MSG
         SPACE 2
BTCAM    DSECT
         DS    CL7                 PREFIX
BTTYPE   DS    CL1                 MDR:91, OBR-BTAM:30, OBR-TCAM:34
         DS    CL2                 RESERVED
BTSWTCH  DS    CL1                 OBR SWITCHES
MDRSWTCH DS    CL1                 MDR SWITCHES
         DS    CL32                RESERVED
BTCCW    DS    CL1                 CCW BYTE 6 FOR TCAM OP CODE
         DS    CL10                RESERVED
BTDDDWD  DS    CL1                 DEV DEP DATA LENGTH (IN DWORDS)
         DS    CL1                 RESERVED                    @OZ29866
BTCCTT   DS    CL2                 CU/TERM POLLING CHARS       @OZ29866
BTDEVTP0 DS    CL1                 DEVICE TYPE BYTE 0          @OZ29866
BTDEVTP1 DS    CL1                 DEVICE TYPE BYTE 1          @OZ29866
BTDEVTP2 DS    CL1                 DEVICE TYPE BYTE 2          @OZ29866
BTDEVTP3 DS    CL1                 DEVICE TYPE BYTE 3          @OZ29866
BTSDRCT  DS    CL1                 STAT. BYTE COUNT
         DS    CL3                 RESERVED
BTPOLL   DS    CL2                 POLL ADDRESS (X'CCTT')      @OZ29866
         DS    CL2                 RESERVED
* START OF DEVICE DEPENDENT DATA
         DS    CL5                 RESERVED
BTTCOP   DS    CL1                 TCAM TP OP CODE
BTFLAG   DS    CL1                 OBR/SDR FLAG
         DS    CL2                 RESERVED
BTBTOP   DS    CL1                 BTAM OP CODE
BTSENSE1 DS    CL1                 SENSE BYTE 1
BTSENSE2 DS    CL1                 SENSE BYTE 2
         DS    CL6                 RESERVED
         END   BNGLOGER
