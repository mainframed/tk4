ICFBIF00 TITLE 'POWER WARNING FEATURE INITIALIZATION MODULE'
***********************************************************************
*                                                                     *
*   THIS MODULE IS PART OF THE POWER WARNING FEATURE SUPPORT
*                                                                     *
*                                                                     *
*                                                                     *
* FUNCTION - A. CHECK THE PWF TIME PARAMETER IN THE CVT TO SEE IF THE *
*               FUNCTION IS SUPPORTED.                                *
*                                                                     *
*            B. GETMAIN A 2K COMMUNICATION AREA FROM SUBPOOL 245 AND  *
*               STORE ITS ADDRESS IN THE CVT.                         *
*                                                                     *
*            C. ADJUST TIME PARAMETER ACCORDING TO ENGINEERING SPECS  *
*               AND SAVE IT IN THE COMMUNICATION AREA.                *
*                                                                     *
*            D. IF T=1 SPECIFIED SET 'COMMIT TO DUMP' FLG IN COMM.AREA*
*               AND NOTIFY THE OPERATOR THAT DUMP WILL OCCUR ON FIRST *
*               WARNING.                                              *
*                                                                     *
*            E. LOCATE THE WARN DATASETS. MAKE SURE THAT EACH WARN    *
*               DATASET RESIDES ON A SINGLE VOLUME AND THAT BOTH OF   *
*               THEM DON'T RESIDE ON THE SAME VOLUME.                 *
*                                                                     *
*            F. DYNAMICALLY ALLOCATE THE WARN DATASETS, THEN          *
*               FIND THE UCB'S FOR THE WARN DATASETS. MAKE SURE THEY  *
*               ARE D.A.DEVICES, UPS SUPPORTED AND OF THE SAME TYPE.  *
*                                                                     *
*            G. USING THE DEVTYPE MACRO                               *
*                     GET THE PHYSICAL CHARACTERISTICS OF THE DEVICE  *
*               ON WHICH THE WARN DATASETS RESIDE. SAVE THESE DATA IN *
*               THE COMM.AREA.                                        *
*                                                                     *
*            H. OPEN THE WARN DATASETS AND GET THE START AND SIZE OF  *
*               THE EXTENT FROM THE DEB. SAVE THE START OF EXTENT IN  *
*               THE COMM.AREA.                                        *
*                                                                     *
*            I. FROM THE CVT GET THE STORAGE SIZE AND MAKE SURE THAT  *
*               BOTH DATASETS ARE LARGE ENOUGH TO CONTAIN ALL STORAGE.*
*                                                                     *
*            J. READ THE CONTROL TRACK. MAKE SURE THE DATASET IS EMPTY*
*               BY CHECKING THE APPROPRIATE FLAG IN THE CNTL TRK.     *
*                                                                     *
*            K. IF MORE THAN 24 HOURS HAVE ELAPSED SINCE THE LAST     *
*               FORMATTING OF THE DATASETS, REFORMAT THEM.            *
*                                                                     *
*            L. INITIALIZE AND WRITE THE CONTROL TRACK TO REFLECT THE *
*               ENVIRONMENT AT THIS IPL.                              *
*            M. FIND AN AVAILABLE PATH TO THE WARN DEVICE (VIA IOSGEN *
*               MACRO) AND SAVE DEVICE ADDRESS AND UCB ADDRESS IN THE *
*               COMM.AREA.                                            *
*                                                                     *
*            N. COMPLETE INITIALIZATION OF THE COMM.AREA BY SETTING   *
*               UP THE CCW CHAIN (FOR FULL CYLINDER WRITE) AND THE    *
*               SEEK/SEARCH ADDRESSES FOR THE DUMP ROUTINE.           *
*                                                                     *
*            O. SET 'VOLUME BIT' IN THE WARN UCB'S. FLAG THE WARN UCBS*
*               'PERMANENTLY RESIDENT'.                               *
*                                                                     *
*            P. RESET THE 'WARN NOT INITIALIZED' FLAG IN THE CVT AND  *
*               TURN ON THE WARNING MASK IN CONTROL REGISTER 14.      *
*                                                                     *
*            Q. WRITE THE 'PWF INITIALIZATION COMPLETE' MESSAGE AND   *
*               RETURN TO THE CALLING MODULE.                         *
*                                                                     *
*            R. IF A WARN DATASET CONTAINS A VALID DUMP, ASK THE      *
*               OPERATOR IF HE WANTS TO RESTORE STORAGE OR ERASE THE  *
*               DUMP FROM THE DATASET.                                *
*                                                                     *
*            S. IF THE OPERATOR REQUESTS A RESTORE MAKE SURE THAT     *
*               THE STORAGE CONFIGURATION PRESENTLY ONLINE IS NOT     *
*               SMALLER THAN THE ONE ONLINE AT DUMP TIME, SET UP THE  *
*               INTERFACE TO THE RESTORE ROUTINE AND GIVE IT CONTROL  *
*               IN B.C.MODE, FULLY DISABLED AND WITH S.P.K.=0.        *
*                                                                     *
*            T. IF ANY UNUSUAL CONDITION IS ENCOUNTERED, NOTIFY THE   *
*               OPERATOR GIVING HIM THE CHOICE OF CONTINUING SYSTEM   *
*               OPERATION WITHOUT PWF SUPPORT OR TO STOP THE SYSTEM,  *
*               CORRECT THE PROBLEM AND RE-IPL.                       *
*                                                                     *
*            U. MAINTAIN AN INTERNAL 'FOOTPRINT TABLE'.               *
*                                                                     *
*                                                                     *
*                                                                     *
* ENTRY -    THE ONLY ENTRY TO THIS MODULE IS ICFBIE00.               *
*                                                                     *
*                                                                     *
*                                                                     *
* INPUT -    REGISTER 14 CONTAINS RETURN ADDRESS.                     *
*            CVTVOLF2 = 'WARN NOT INITIALIZED' FLAG.                  *
*            CVTVOLT2 = USER SUPPLIED TIME PARAMETER.                 *
*                                                                     *
*                                                                     *
*                                                                     *
* OUTPUT -   CVTVOLF2 RESET TO ZERO.                                  *
*            CVTVOLT2 CONTAINING ADDRESS OF PWF COMMUNICATION AREA.   *
*            WARN UCB'S MARKED AS 'PERMANENTLY RESIDENT' AND WITH     *
*               THE VOLUME BIT SET.                                   *
*            PWF COMMUNICATION AREA FULLY INITIALIZED.                *
*            WARN DATASETS FORMATTED AND WITH INITIALIZED CONTROL TRK.*
*                                                                     *
*                                                                     *
*                                                                     *
* EXTERNAL                                                            *
*  ROUTINES- GETMAIN.                                                 *
*            WTO.                                                     *
*            FREEMAIN.                                                *
*            WTOR.                                                    *
*            WAIT.                                                    *
*            STIMER.                                                  *
*            LOCATE.                                                  *
*            OBTAIN.                                                  *
*            DEVTYPE.                                                 *
*            OPEN.                                                    *
*            EXCP.                                                    *
*            CLOSE.                                                   *
*            IGF01MMM.                                                *
*            ESTAE.                                                   *
*                                                                     *
*                                                                     *
*                                                                     *
* REGISTER                                                            *
*  USAGE -   REGISTER 10 - BASE FOR COMMUNICATION AREA.               *
*                     11 - FIRST BASE FOR MODULE.                     *
*                     12 - SECOND BASE FOR MODULE.                    *
*                     13 - BASE FOR REGISTER SAVE AREA AND WORK AREA. *
*                     14 - RETURN REGISTER AND WORK REGISTER.         *
*                     15 - BASE FOR RESTORE ROUTINE AND WORK.         *
*                                                                     *
*                                                                     *
*                                                                     *
* MACROS -   GETMAIN.                                                 *
*            WTO.                                                     *
*            FREEMAIN.                                                *
*            IOSGEN.                                                  *
*            WTOR.                                                    *
*            WAIT.                                                    *
*            STIMER.                                                  *
*            LOCATE.                                                  *
*            OBTAIN.                                                  *
*            DEVTYPE.                                                 *
*            OPEN.                                                    *
*            EXCP.                                                    *
*            CLOSE.                                                   *
*            DCB.                                                     *
*            CAMLST.                                                  *
*            CVT.                                                     *
*            ICFWORK.                                                 *
*            IEFUCBOB.                                                *
*            IKJTCB.                                                  *
*            DCBD.                                                    *
*            IEZDEB.                                                  *
*            IEZJSCB.                                                 *
*            IEFTIOT1.                                                *
*            IECDLCH.                                                 *
*            IHAPSA.                                                  *
*            IECDCAT.                                                 *
*            IHAPCCA.                                                 *
*            IHACSD.                                                  *
*            IHASDWA.                                                 *
*            ESTAE.                                                   *
*            SETRP.                                                   *
*                                                                     *
*                                                                     *
* STATUS -
*          APARS FIXED @ZA00760,@ZA00521,@ZA30392
*
*       R 256800-257200                                        @ZA30392
*
***********************************************************************
         SPACE 5
ICFBIE00 CSECT
         SPACE 5
*              REGISTER EQUATES
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10            *BASE FOR ICFWORKA
R11      EQU   11            *BASE FOR MODULE
R12      EQU   12            *SECOND BASE FOR MODULE
R13      EQU   13            *BASE FOR REGISTER SAVE AREA & WORK AREA
R14      EQU   14            *RETURN REGISTER
R15      EQU   15
         SPACE 3
*              DECIMAL EQUATES
         SPACE
D0       EQU   0
D1       EQU   1
D2       EQU   2
D3       EQU   3
D4       EQU   4
D5       EQU   5
D6       EQU   6
D7       EQU   7
D8       EQU   8
D9       EQU   9
D10      EQU   10
D11      EQU   11
D12      EQU   12
D13      EQU   13
D15      EQU   15
D16      EQU   16
D18      EQU   18
D20      EQU   20
D23      EQU   23
D24      EQU   24
D25      EQU   25
D26      EQU   26
D27      EQU   27
D28      EQU   28
D30      EQU   30
D32      EQU   32
D33      EQU   33
D34      EQU   34
D35      EQU   35
D36      EQU   36
D37      EQU   37
D39      EQU   39
D40      EQU   40
D43      EQU   43
D44      EQU   44
D46      EQU   46
D48      EQU   48
D56      EQU   56
D76      EQU   76
D119     EQU   119
D127     EQU   127
D128     EQU   128
D223     EQU   223
D244     EQU   244
D380     EQU   380
D2047    EQU   2047
D4095    EQU   4095
D12288   EQU   12288
         SPACE 3
*              CHARACTER EQUATES
         SPACE
CA       EQU   C'A'
CB       EQU   C'B'
CBLK     EQU   C' '
         SPACE 3
*              HEXADECIMAL EQUATES
         SPACE
X00      EQU   X'00'
X01      EQU   X'01'
X02      EQU   X'02'
X04      EQU   X'04'
X05      EQU   X'05'
X06      EQU   X'06'
X07      EQU   X'07'
X08      EQU   X'08'
X0C      EQU   X'0C'
X0F      EQU   X'0F'
X10      EQU   X'10'
X20      EQU   X'20'
X31      EQU   X'31'
X40      EQU   X'40'
X50      EQU   X'50'
X60      EQU   X'60'
X7F      EQU   X'7F'
X80      EQU   X'80'
X87      EQU   X'87'
X8C      EQU   X'8C'
XDF      EQU   X'DF'
XEE      EQU   X'EE'
XF0      EQU   X'F0'
XF9      EQU   X'F9'
XFC      EQU   X'FC'
XFE      EQU   X'FE'
XFF      EQU   X'FF'
         EJECT
         STM   R14,R12,D12(R13)   *SAVE REGS IN ATTACHOR'S SAVE AREA
         LR    R11,R15       *LOAD BASE REGISTER FOR MODULE
         USING ICFBIE00,R11,R12     *ESTABLISH MODULE ADDRESSABILITY
         LA    R12,D4095(R11)     *LOAD SECOND BASE
         LA    R12,D1(R12)   *REGISTER FOR MODULE
         GETMAIN R,LV=ICFDSSIZ    *GETMAIN SAVE & WORK AREA
         ST    R1,D8(R13)    *FORWARD CHAINING OF SAVE AREAS
         ST    R13,D4(R1)    *BACKWARD CHAINING OF SAVE AREAS
         LR    R13,R1        *INITIALIZE POINTER TO OUR SAVE AREA
         USING ICFTIFDS,R13  *ESTABLISH ADDRESSABILITY TO WORK AREA
*****************************************************************
         XC    ICFESTPR(ICFPRMLS-ICFESTPR),ICFESTPR  *CLEAN ESTAE PARM
         LA    R10,ICFINRTR  *GET ADDRESS OF ERROR RETURN 1
         ST    R10,ICFESTPR  *SAVE IT IN ESTAE PARM AREA
         LA    R10,ICFEREX   *GET ADDRESS OF ERROR RETURN 2
         ST    R10,ICFESTPR+D4    *SAVE IT IN ESTAE PARM AREA
         LA    R10,ICFFREMB  *GET ADDRESS OF ERROR RETURN 3
         ST    R10,ICFESTPR+D8    *SAVE IT IN ESTAE PARM AREA
         LA    R10,ICFESTPR  *GET POINTER TO ESTAE PARAM AREA
         ESTAE ICFESTAE,CT,PARAM=(R10),RECORD=YES  *SETUP ESTAE ENV.
*****************************************************************
         GETMAIN R,LV=2048,SP=245      *GETMAIN COMMUNICATION AREA
         LR    R10,R1        *SAVE POINTER TO COMMUNICATION AREA
         USING ICFWORKA,R10  *ESTABLISH COMM.AREA ADDRESSABILITY
         MVI   ICFFLAGA,X80  *SET 'FUNCTION INOPER.' FLAG IN COMM.AREA
         L     R14,CVTPTR    *GET CVT POINTER
         USING CVT,R14       *ESTABLISH CVT ADDRESSABILITY
         L     R8,CVTCSD     *GET REAL ADDRESS OF CSD
         LRA   R8,D0(R8)     *DITTO
         BNZ   ICFLRAER      *IF ERROR GO SEND MESSAGE
         ST    R8,ICFADR3    *SAVE IT IN COMM. AREA
         L     R8,CVTPCCAT   *GET REAL ADDRESS OF PCCA VECTOR TABLE
         LRA   R8,D0(R8)     *DITTO
         BNZ   ICFLRAER      *IF ERROR GO SEND MESSAGE
         ST    R8,ICFADR2    *SAVE IT IN COMM. AREA
         L     R8,CVTTCBP    *GET POINTER TO NEW/OLD TCB
         MVC   ICFTCBSV,D4(R8)    SAVE OUR TCB ADDRESS
         MVC   ICFLRDAT,CVTDATE   *COPY DATE TO COMM. AREA
         XC    ICFLRTIM,ICFLRTIM  *SET TIME TO ZERO IN COMM. AREA
         STIDP ICFLRCPU      *STORE CPU ID IN COMM. AREA
         L     R8,CVTDCB     *GET POINTER TO LOGREC DCB
         S     R8,CF8        *LOGREC DCB - 8 CONTAINS POINTER
         L     R8,D0(R8)     *TO CHANNEL ASSIGNMENT TABLE
         MVC   ICFLRCHA,D0(R8)    *SAVE CHAN ASSGNMNT TBL IN COMM.AREA
         MVC   ICFFLAGB,CVTDCB    *COPY SYSTEM TYPE TO COMM.AREA
         LA    R8,CVTVOLF2-CVTTCBP  *GET DISPLACEMENT FOR MVT,SVM,MVM
         L     R9,D0(R8,R14) *GET CONTENTS OF OUR CVT SLOT
         ST    R10,D0(R8,R14) *SET PNTR TO COMM.AREA IN OUR CVT SLOT
         AR    R8,R14        *GET ADDR. OF OUR CVT SLOT
         NI    D0(R8),X7F         *RESET 'WARN NOT INIT.' FLAG IN CVT
         XC    ICFTRMSA(D12),ICFTRMSA  *CLEAR FOOTPRINT TABLE
         LA    R8,ICFTRMSA   *GET ADDRESS OF FOOTPRINT TABLE
         ST    R8,ICFADR1    *SAVE IT IN FIRST SLOT OF COMM.AREA
         ST    R13,ICFTRDMP  ***SAVE PTR TO WORKAREA FOR DEBUG*******
******************************************************************
         OI    ICFTRMSA+D0,X80    *UPDATE FOOTPRINT TABLE***********
******************************************************************
         ST    R11,ICFADR4   *SAVE MODULE E.P.A. IN COMM.AREA
         DROP  R14
         SPACE 3
*        THIS COMPLETES THE INITIAL HOUSEKEEPING
         SPACE 3
         LA    R9,D0(R9)     *GET RID OF FLAG
         LTR   R9,R9         *IS WARN FUNCTION INOPERATIVE?
         BZ    ICFSFI        *YES, GO SET FLAG FOR OTHER MODULES
         BCTR  R9,R0         *GET CORRECT TIME IN MSEC
         ST    R9,ICFTME00   *SAVE IT IN COMM AREA
         LTR   R9,R9         *WAS ORIGINAL TIME 1?
         BZ    ICFCMTDP      *YES, GO SEND MESSAGE
ICFSEMTD EQU   *
         C     R9,ICFEMTD    *IS SPECIFIED T N.L.THAN ENG.MINIMUM?
         BNL   ICFSKCCW      YES, SPECIFIED T IS OK
         MVC   ICFTME00,ICFEMTD   *NO, SET T TO ENGINEERING MINIMUM
******************************************************************
         OI    ICFTRMSA+D0,X40    *UPDATE FOOTPRINT TABLE***********
******************************************************************
         SPACE 5
ICFSKCCW EQU   *             *BUILD SKELETON OF CCW CHAIN IN WORK AREA
         LRA   R9,ICFCHR00   *GET SK/SRCH REAL ADDRESS
         BNZ   ICFLRAER      *IF ERROR GO SEND MESSAGE
         ST    R9,ICFCCW1    *STORE IN SEEK CCW
         LA    R9,D2(R9)     *GET SEARCH REAL ADDRESS
         ST    R9,ICFCCW2    *STORE IN SEARCH CCW
         LRA   R9,ICFSRC00   *GET TIC REAL ADDRESS
         BNZ   ICFLRAER      *IF ERROR GO SEND MESSAGE
         ST    R9,ICFCCW3    *STORE IN TIC CCW
         SR    R9,R9         *ZERO FOR DATA ADDRESS
         ST    R9,ICFCCW4    *STORE IN WRITE CCW
         LA    R9,D6         *COUNT FOR SEEK
         ST    R9,ICFCCW1+D4 *STORE IN SEEK CCW
         LA    R9,D5         *COUNT FOR SEARCH
         ST    R9,ICFCCW2+D4 *STORE IN SEARCH CCW
         LA    R9,D1         *COUNT FOR TIC
         ST    R9,ICFCCW3+D4 *STORE IN TIC CCW
         MVI   ICFCCW1,X07   *SEEK COMMAND IN PLACE
         MVI   ICFCCW1+D4,X60     *CC & SLI FLAGS IN PLACE
         MVI   ICFCCW2,X31   *SEARCH COMMAND IN PLACE
         MVI   ICFCCW2+D4,X60     *FLAGS IN PLACE
         MVI   ICFCCW3,X08   *TIC COMMAND IN PLACE
         MVI   ICFCCW3+D4,X60     *FLAGS IN PLACE
         MVI   ICFCCW4,X05   *WRITE COMMAND IN PLACE
         MVI   ICFCCW4+D4,X40     *CC FLAG IN PLACE
         EJECT
*        LOCATE SYS1.WARN DATASETS AND DYNAMICALLY ALLOCATE THEM,    *
*                                      OPEN THEM, CHCK THE           *
*        CONTROL TRACKS, WRITE FORMAT AND CLOSE THEM.                *
*        ALSO FIND PATH STATUS AND UPDATE COMMUNICATION AREA.        *
         SPACE
         MVI   ICFDSN,CBLK   *CLEAN DSN AREA FOR LOCATE
         MVC   ICFDSN+D1(D43),ICFDSN   *DITTO
         MVC   ICFDSN(D9),CCWARN  *BUILD DSN FOR LOCATE
         MVI   ICFDSN+D9,CA  *SET DSN FOR LOCATE TO WARNA
******************************************************************
         OI    ICFTRMSA+D0,X02    *UPDATE FOOTPRINT TABLE*************
****************************************************************
         BAL   R8,ICFWRNCH   *GO TO CHECKOUT SUBROUTINE
         SPACE 3
         ST    R7,ICFWAUCB   *SAVE WARNA UCB ADDR IN COMM AREA
         LA    R5,ICFIOMAP   *PREPARE TO FIND AVAILABLE PATH
         LR    R8,R13        *SAVE POINTER TO OUR SAVE & WORK AREA
         LA    R13,D12(R13)  *ADJUST POINTER TO SAVE AREA FOR IOSGEN
         BAL   R14,ICFNDPTH  *GO FIND AVAILABLE PATH
         LR    R13,R8        *RESET POINTER TO OUR SAVE & WORK AREA
******************************************************************
         OI    ICFTRMSA+D2,X08    *UPDATE FOOTPRINT TABLE*************
******************************************************************
         XC    ICFWADEV,ICFWADEV  *CLEAN ICFWADEV FIELD
         LA    R7,ICFWADEV   *PREPARE TO CHECK WARNA PATHS
         BAL   R8,ICFSDADD   *GO CHECK WARNA PATHS
         MVC   ICFWACHR(D6),ICFDEBCH   *SAVE INITIAL CCHH IN COMM AREA
         MVI   ICFWACHR+D6,X01    *SET INITIAL R = 1 IN COMM AREA
******************************************************************
         OI    ICFTRMSA+D2,X04    *UPDATE FOOTPRINT TABLE*************
******************************************************************
         EJECT
*        REPEAT SAME PROCEDURE FOR SYS1.WARNB.                       *
         SPACE
         MVI   ICFDSN+D9,CB  *SET DSN FOR LOCATE TO WARNB
******************************************************************
         OI    ICFTRMSA+D0,X01    *UPDATE FOOTPRINT TABLE*************
******************************************************************
         BAL   R8,ICFWRNCH   *GO TO CHECKOUT SUBROUTINE
         SPACE 3
         ST    R7,ICFWBUCB   *SAVE UCB ADDRESS IN COMM AREA
         LA    R5,ICFIOMAP   *PREPARE TO FIND AVAILABLE PATH
         LR    R8,R13        *SAVE POINTER TO OUR SAVE & WORK AREA
         LA    R13,D12(R13)  *ADJUST POINTER TO SAVE AREA FOR IOSGEN
         BAL   R14,ICFNDPTH  *GO FIND AVAILABLE PATH
         LR    R13,R8        *RESET POINTER TO OUR SAVE & WORK AREA
******************************************************************
         OI    ICFTRMSA+D2,X08    *UPDATE FOOTPRINT TABLE*************
******************************************************************
         XC    ICFWBDEV,ICFWBDEV  *CLEAN ICFWBDEV FIELD
         LA    R7,ICFWBDEV   *PREPARE TO CHECK WARNB PATHS
         BAL   R8,ICFSDADD   *GO CHECK WARNB PATHS
         MVC   ICFWBCHR(D6),ICFDEBCH   *SAVE INITIAL CCHH IN COMM AREA
         MVI   ICFWBCHR+D6,X01    *SET INITIAL R = 1 IN COMM. AREA
******************************************************************
         OI    ICFTRMSA+D2,X08    *UPDATE FOOTPRINT TABLE*************
******************************************************************
         EJECT
*        THIS SECTION COMPLETES THE INITIALIZATION OF THE            *
*         COMMUNICATION AREA.                                        *
         SPACE 3
         L     R9,ICFTRSIZ   *GET TRACK SIZE
         ST    R9,ICFCCW4+D4 *COMPLETE SKELETON CCWS. COUNT IN WRT CCW
         MVI   ICFCCW4+D4,X40     *CC FLAG IN PLACE
         L     R9,ICFTPC     *GET TRACKS PER CYLINDER
         BCTR  R9,R0         *LESS 1
         LA    R8,ICFSEK00   *POINT TO CCW CHAIN IN COMM AREA
ICFCCWLP EQU   *             *SET CCW CHAIN IN COMMUNICATION AREA
         MVC   D0(D32,R8),ICFCCW1 *COPY ONE SET OF CCWS
         L     R7,ICFCCW1    *GET SEEK ADRESS FROM SEEK CCW
         A     R7,CF8        *UPDATE IT
         ST    R7,ICFCCW1    *SET IT BACK
         A     R7,CF2        *UPDATE SRC ADDRESS
         ST    R7,ICFCCW2    *STORE IT IN SRCH CCW
         MVI   ICFCCW2,X31   *DON'T FORGET COMMAND
         L     R7,ICFCCW3    *GET TIC ADDRESS
         A     R7,CF32       *UPDATE IT
         ST    R7,ICFCCW3    *SET IT BACK
         LA    R8,D32(R8)    *POINT TO NEXT SET OF CCWS
         BCT   R9,ICFCCWLP   *REPEAT IF NOT FINISHED
         S     R8,CF32       *GO BACK TO LAST CCW SET
         MVI   D28(R8),X00   *BREAK CCW CHAIN - CC FLAG OFF
******************************************************************
         OI    ICFTRMSA+D0,X20    *UPDATE FOOTPRINT TABLE***********
******************************************************************
         MVC   ICFCHR,ICFWACHR    *INITIALIZE SET OF SK/SRC ADDRESSES
         MVI   ICFCHR+D7,X00 *CLEAN LOW ORDER BYTE
         L     R9,ICFTPC     *GET TRACKS PER CYLINDER
         BCTR  R9,R0         *LESS 1
         LA    R8,ICFCHR00   *POINT TO FIRST SK/SRC ADDR FIELD
ICFCHRLP EQU   *
         MVC   D0(D8,R8),ICFCHR   *FILL IN SK/SRC ADDRESS
         L     R7,ICFCHR+D4  *GET HHHHRR00
         A     R7,CF65536    *UPDATE HHHH BY 1
         ST    R7,ICFCHR+D4  *STORE IT BACK
         LA    R8,D8(R8)     *UPDATE POINTER TO NEXT SK/SRC ADDR FLD
         BCT   R9,ICFCHRLP   *REPEAT IF NOT FINISHED
******************************************************************
         OI    ICFTRMSA+D0,X10    *UPDATE FOOTPRINT TABLE***********
******************************************************************
         SR    R8,R8         *CONVERT
         L     R9,ICFTME00   *ORIGINAL
         M     R8,CF1000     *TIME IN
         SLDL  R8,D12        *TOD CLOCK
         STM   R8,R9,ICFTME01     *UNITS AND SAVE
ICFRTRN  EQU   *             *WRITE INITIALIZATION COMPLETE MESSAGES
         B     ICFNXMSG      *PETE DOESN'T WANT THIS MESSAGE
         LA    R1,ICFEXTMS   *VOLUME+START-OF-EXTENT MESSAGE
         WTO   MF=(E,(1))
ICFNXMSG EQU   *
         USING UCBD,R7       *ESTABLISH UCB ADDRESSABILITY
         L     R7,ICFWAUCB   *GET WARNA UCB
         OI    UCBTYP+D1,X02 *SET VOLUME BIT FOR DDR
         NI    SRTESTAT,XDF  *RESET RESERVED BIT IN UCB
         OI    SRTESTAT,X04  *SET PERM.RES. BIT IN UCB
         L     R7,ICFWBUCB   *GET WARNB UCB
         OI    UCBTYP+D1,X02 *SET VOLUME BIT FOR DDR
         NI    SRTESTAT,XDF  *RESET RESERVED BIT IN UCB
         OI    SRTESTAT,X04  *SET PERM.RES. BIT IN UCB
         DROP  R7
******************************************************************
         OI    ICFTRMSA+D0,X08    *UPDATE FOOTPRINT TABLE***********
******************************************************************
         LA    R1,ICFICMSG   *INITIALIZATION COMPLETE MESSAGE
         WTO   MF=(E,(R1))
         NI    ICFFLAGA,X7F  *RESET 'FUNCTION INOP.' FLAG IN COMM.AREA
         STCTL R14,R14,ICFSV8     *GET CONTENTS OF OUR CONTROL REG. 14
         TM    ICFSV8,X01    *IS WARNING BIT ON?
         BZ    ICFWRHIT      *NO, GO SEND 'WARNING BEFORE INIT' MSG
         EJECT
ICFRTRN2 EQU  *              *RETURN SEQUENCE
******************************************************************
         OI    ICFTRMSA+D0,X04    *UPDATE FOOTPRINT TABLE***********
******************************************************************
         LR    R1,R13        *GET POINTER TO SAVE & WORK AREA
         L     R13,D4(R13)   *GET BACWARD POINTER
         FREEMAIN R,LV=ICFDSSIZ,A=(1)
*****************************************************************
         ESTAE 0             *CANCEL ESTAE ENVIRONMENT
*****************************************************************
         L     R15,ICFTIFRC  *SET RETURN CODE
         L     R14,D12(R13)  *RESTORE RETURN REG
         LM    R0,R12,D20(R13)    *RESTORE OTHER REGISTERS
         BR    R14           *RETURN
         EJECT
ICFNDPTH EQU   *             *FIND AVAILABLE PATH
         IOSGEN MAP,TABLE=(R5),UCB=(R7),VAR=1
         SPACE 5
ICFSDADD EQU   *         *SET DEVICE ADDR.AND PATH FLAGS IN ICFWXDEV
         CLC   D2(D2,R5),CF1 *PRIMARY PATH ONLINE ON EITHER CPU?
         BNE   ICFPAXX       *YES, GO SEE ON WHICH CPU
         LA    R5,D4(R5)     *NO, TRY SECONDARY PATHS
         CLC   D2(D2,R5),CF1 *SECONDARY PATH ONLINE ON EITHER CPU?
         BE    ICFPNA        *NO, GO SEND MESSAGE
ICFPAXX  EQU   *
         TM    D2(R5),X01    *PATH ONLINE ON CPU 0?
         BNO   ICFSOPC1      *NO, GO SET 'PATH ON CPU 1' FLAG
         OI    D1(R7),X01    *SET 'PATH ON CPU 0' FLAG
         TM    D3(R5),X01     *PATH ONLINE ON CPU 1?
         BNO   ICFSDEVA      *NO, GO SAVE DEVICE ADDRESS
ICFSOPC1 EQU   *
         OI    D1(R7),X02    *SET 'PATH ON CPU 1' FLAG
ICFSDEVA EQU   *
         MVC   D2(D2,R7),D0(R5)   *SAVE DEVICE ADDRESS IN ICFWXDEV
         BR    R8            *BACK WHERE WE CAME FROM
         SPACE 5
ICFSFI   EQU   *             *TELL OPERATOR FUNCTION IS INOPERATIVE
         LA    R8,ICFINPMS   *MSG TEXT POINTER
         LA    R5,ICFINRTR   *RETURN ADDR
         B     ICFMSGR       *TO MESSAGE ROUTINE
         SPACE 5
ICFCMTDP EQU   *
         OI    ICFFLAGA,X40  *SET COMMIT TO DUMP FLAG
         LA    R8,ICFCTDMS   *LOAD MSG POINTER
         BAL   R5,ICFMSGR    *GO TO MSG ROUT
         LA    R1,ICFCTDM    *PREPARE COMMIT TO DUMP MSG
         WTO   MF=(E,(R1))
         B     ICFSEMTD      *BACK TO MAINLINE
         SPACE 5
ICFPNA   EQU   *
         LA    R8,ICFPNAMS   *LOAD MSG POINTER
         LA    R5,ICFINRTR   *PREPARE FOR RETURN
         B     ICFMSGR       *TO MSG ROUT
         SPACE 5
ICFINRTR EQU   *             *'FUNCTION INOPERATIVE' RETURN
         OI    ICFFLAGA,X80  *SET FUNCTION INOPERATIVE FLAG
         LA    R1,ICFQUITM   *GET POINTER TO MSG
         WTO   MF=(E,(R1))
         B     ICFRTRN2      *BACK TO MASTER SCHEDULER INITIALIZATION
         SPACE 5
ICFWRHIT EQU   *
         LA    R1,ICFWHMSG   *GET POINTER TO 'WARNING BEFOR INIT' MSG
         WTO   MF=(E,(1))    *SEND THE MESSAGE OUT
         B     ICFWAITR      *GO QUIT WITH CODE 027
         SPACE 5
ICFMSGR  EQU   *             *WTOR MESSAGE ROUTINE
         MVC   ICFMSWRD(D43),D0(R8)    *SET MESSAGE IN WTOR
ICFMSGR2 EQU   *              * RE-WRITE MESSAGE               @ZA00521
         LA    R1,ICFWTOR    *GET MSG POINTER
         XC    ICFANSW(D4),ICFANSW     *CLEAN REPLY AREA
         MVC   ICFWTOR+D1(D3),ICFANSAD *PUT REPLY AREA ADDR IN WTOR
         MVC   ICFWTOR+D4(D4),ICFREPAD *SET ECB ADDR IN WTOR
         XC    ICFREPLY,ICFREPLY  *ZERO ECB
         WTOR  MF=(E,(R1))
         WAIT  ECB=ICFREPLY  *WAIT FOR REPLY
         OC    ICFANSW,C4BLK *XLATE TO UPPER CASE
         CLC   ICFANSW(D4),CCGO   *IS REPLY GO?                @ZA00521
         BCR   D8,R5         *YES, GO BACK TO CALLER
         CLC   ICFANSW(D4),CCSTOP *Q. IS REPLY STOP?           @ZA00521
         BE    ICFWAITR           *YES, STOP WITH 027 WAIT     @ZA00521
         B     ICFMSGR2           *REPLY INVALID - REISSUE MSG @ZA00521
         EJECT
ICFWRNCH EQU   *
         ST    R8,ICFSV8     *SAVE REG 8
         LOCATE ICFWVOL      *LOCATE SYS1.WARNX DATASET
         LTR   R15,R15       *WAS LOCATE SUCCESSFUL?
         BNZ   ICFNCVOL      *NO, GO SEND MSG
*****************************************************************
         OI    ICFTRMSA+D1,X80    *UPDATE FOOTPRINT TABLE**************
*****************************************************************
         CLC   ICFNVOL,CH1   *MORE THAN 1 VOLUME?
         BNE   ICFMULTV      *YES, GO SEND MSG
         CLC   ICFVOLS,ICFPREV    *ON SAME VOLUME AS OTHER DATASET?
         BE    ICFSAMV       *YES, GO SEND MSG
         MVC   ICFPREV,ICFVOLS    *SAVE VOLSER FOR NEXT TIME AROUND
         MVC   ICFTUDSN+D15(D1),ICFDSN+D9  *SET CORRECT DSN FOR DYNALL
         MVC   ICFTUDDN+D12(D1),ICFDSN+D9  *SET CORRECT DDN FOR DYNALL
         MVC   ICFPDSIN+D6(D1),ICFDSN+D9   *SET CORRECT DDN FOR DEVTYP
*  THE FOLLOWING CODE IS TEMPORARY UNTIL MAST SCHED DYNALL IS FIXED
         L     R6,ICFTCBSV   *GET OUR TCB ADDRESS
         USING TCB,R6        *ESTABLISH TCB ADDRESSABILITY
         L     R7,TCBJSCB    *GET OUR JSCB ADDRESS
         ST    R7,ICFJSCBS   *SAVE IT FOR LATER
         USING IEZJSCB,R7    *ESTABLISH JSCB ADDRESSABILITY
         MVC   ICFJSTCS,JSCBTCBP  *SAVE ORIGINAL JSCBTCBP
         ST    R6,JSCBTCBP   *SET MAST.SCHED. TCB ADDR.INTO JSCBTCBP
         DROP  R6,R7
*  END OF THE TEMPORARY CODE FOR MAST.SCHED. DYNALL ***************
         LA    R1,ICFRBPTR   *SET POINTER TO OUR IRB PTR FOR DYNALLOC
         DYNALLOC
         L     R6,ICFTCBSV   *GET OUR TCB ADDRESS
         USING TCB,R6        *ESTABLISH TCB ADDRESSABILITY
         L     R6,TCBTIO     *GET OUR TIOT ADDRESS
         USING TIOT1,R6      *ESTABLISH TIOT ADDRESSABILITY
         ST    R6,ICFTIOTS   *SAVE TIOT ADDRESS FOR LATER
         SR    R7,R7         *CLEAR R7
ICFTIOLP EQU   *             *LOOK FOR THE TIOT ENTRY FOR THIS DATASET
         IC    R7,TIOELNGH   *IS THIS THE END OF THE TIOT?
         LTR   R7,R7         *IT IS IF ZERO
         BZ    ICFNOTON      *VOLSER NOT MOUNTED - GO SEND MSG
         CLC   ICFPDSIN,TIOEDDNM  *IS THIS OUR DD ENTRY?
         BE    ICFGOTDD      *YES, GO HANDLE IT
         AR    R6,R7         *GET NEXT TIOT ENTRY
         B     ICFTIOLP      *GO TAKE CARE OF IT
ICFGOTDD EQU   *
         L     R7,TIOESTTB   *GET UCB POINTER
         DROP  R6
         LA    R7,D0(R7)     *CLEAR HI ORDER BYTE
ICFUCBFD EQU   *
         USING UCBD,R7       *ESTABLISH UCB ADDRESSABILITY
         TM    UCBTYP+D2,X20 *IS THIS A DA DEVICE?
         BNO   ICFNSDEV      *NO, SEND 'UNSUPP.DEVICE' MSG
         CLC   SRTEVOLI(D6),ICFPREV    *IS THIS OUR VOLUME?
         BNE   ICFNCVOL      *NO, SEND 'VOLUME NOT FOUND' MSG
         TM    UCBTYP+D1,X01 *IS IT UPS SUPPORTED?
         BNO   ICFNOUPS      *NO, GO SEND MSG
* /* TEST FOR SYSRES DEVICE REMOVED BY OZ30392               @ZA30392*/
         CLI   ICFDSN+D9,CA  *WARNA DATASET?
         BE    ICFSVDT       *YES, GO SAVE DEVICE TYPE
         CLC   ICFDVPRE+D3(D1),UCBTYP+D3  *IS WARNB ON SAME UNTTYP AS A
         BNE   ICFDDT        *NO, GO SEND MSG
ICFBLJFC EQU   *
         OBTAIN ICFWDSN      *OBTAIN SYS1.WARNX DSCB
         LTR   R15,R15       *WAS OBTAIN SUCCESSFUL?
         BNZ   ICFNCVOL      *NO, GO SEND MESSAGE
*****************************************************************
         OI    ICFTRMSA+D1,X40    *UPDATE FOOTPRINT TABLE**************
*****************************************************************
         MVC   ICFJFCB(D10),ICFDSN     *SET DSN IN JFCB
         L     R9,ICFTIOTS   *GET OUR TIOT ADDRESS
         LA    R3,ICFPRMLS   *GET ADDRESS OF PARM LIST FOR OPEN
         DEVTYPE ICFPDSIN,ICFDVTYP,DEVTAB
         L     R6,ICFDVTYP+D4     *GET TRACK CAPACITY
         SRL   R6,D11        *ROUND DOWN
         SLL   R6,D11        *TO NEXT 2K
         ST    R6,ICFTRSIZ   *SAVE IN COMMUNICATION AREA
         LH    R6,ICFDVTYP+D10    *GET TRACKS PER CYLINDER
         LA    R5,D20        *GET MAXIMUM TRKS/CYL SUPPORTED BY PWF
         CR    R6,R5         *DOES THE WARNX DEVICE SATISFY THIS LIMIT?
         BH    ICFNSDEV      *NO, GO SEND 'UNSUPPORTED DEVICE' MSG
         ST    R6,ICFTPC     *SAVE IN COMM AREA
*****************************************************************
         OI    ICFTRMSA+D1,X20    *UPDATE FOOTPRINT TABLE**************
*****************************************************************
         SPACE 3
*        PREPARE TO OPEN SYS1.WARNX.
         SPACE
         ST    R9,D12(R3)    *SAVE TIOT POINTER
         MVC   ICFPRVOL(D6),SRTEVOLI   *VOLSER FROM UCB TO JFCB
         LA    R5,ICFDCB     *GET DCB POINTER
         USING IHADCB,R5     *ESTABLISH DCB ADDRESSABILITY
         MVC   DCBDDNAM+D6(D1),ICFDSN+D9  *SET CORRECT DDN IN DCB
         ST    R3,D0(R3)     *POINTER TO PARM LIST
         MVC   DCBEXLST+D1(D3),D1(R3)  *INTO DCB
         LA    R6,ICFJFCB    *GET JFCB POINTER
         ST    R6,D0(R3)     *GOES TO FIRST WORD PLACE
         MVI   D0(R3),X87    *'LAST ONE' INDICATOR
         MVI   D4(R3),X80    *DITTO
         LA    R1,D4(R3)     *PARM AREA FOR USE OF MACRO EXPANSION
         OPEN  ((R5),INOUT),TYPE=J,MF=(E,(1))
         TM    DCBOFLGS,X10   *WAS OPEN SUCCESSFUL?
         BNO   ICFNOPN       *NO, GO SEND MSG
         STM   R3,R5,ICFSV35 *SAVE REGS 3 TO 5
         OI    ICFESTPR,X0F  *SET FLAG FOR RETURN FROM ESTAE
         L     R6,DCBDEBAD    *GET DEB ADDRESS FROM DCB
         DROP  R5
         USING DEBBASIC,R6   *ESTABLISH BASIC DEB ADDRESSABILITY
         LA    R6,DEBBASND-DEBBASIC(R6)  *POINT TO DASD SECTION
         USING DEBDASD,R6    *ESTABLISH DASD SECT. ADDRESSABILITY
         MVC   ICFDEBCH,DEBBINUM   *SAVE START BBCCHH
*****************************************************************
         OI    ICFTRMSA+D1,X10    *UPDATE FOOTPRINT TABLE**************
*****************************************************************
         L     R3,X10        *GET CVT POINTER
         USING CVT,R3        *ESTABLISH CVT ADDRESSABILITY
         L     R3,CVTEORM    *GET REAL STORAGE SIZE FROM CVT
         DROP  R3
         ST    R3,ICFSTSIZ   *STORE IT IN COMM AREA
         SR    R2,R2         *CLEAR REG 2
         D     R2,ICFTRSIZ   *DIVIDE STRG SIZE BY TRACK CAPACITY
         LTR   R2,R2         *IS THERE A REMAINDER?
         BZ    ICFNORMD      *NO, WE HAVE THE NUMBER OF TRACKS NEEDED
         LA    R3,D1(R3)     *YES, ADD 1 TO NO OF TRCKS REQRD
         SR    R2,R2         *AND CLEAN REMAINDER
ICFNORMD EQU   *
         L     R4,ICFTPC     *GET TRACKS PER CYLINDER
         BCTR  R4,R0         *MINUS 1
         DR    R2,R4         *FIND NO OF CYLINDERS REQRD
         LTR   R2,R2         *ANY REMAINDER?
         BZ    ICFNOCRM      *NO, WE HAVE NO OF CYLINDERS REQRD
         LA    R3,D1(R3)     *YES, ADD 1 TO NO CYL REQRD
         SR    R2,R2         *AND CLEAN REMAINDER
ICFNOCRM EQU   *
         LA    R3,D1(R3)     *ADD 1 CYLINDER FOR CNTRL TRK
         LA    R4,D1(R4)     *RESTORE CORRECT NO TRKS PER CYL
         MR    R2,R4         *TRACKS REQUIRED IN DATASET
         LR    R2,R3         *SAVE THIS VALUE
         CH    R2,DEBNMTRK    *COMPARE WITH TRKS IN EXTENT
         BH    ICFSMEXT      *EXTENT TOO SMALL. GO SEND MSG
         SPACE 3
*        PREPARE TO USE EXCP TO READ CONTROL TRACK.
         SPACE
         MVC   ICFIOB+D33(D6),ICFDEBCH *SET SK/SRC ADDR IN IOB
         MVI   ICFIOB+D39,X01     *SET R = 1
         LA    R3,ICFCNTRK   *GET ADDR OF CNTRL TRK BUFFER
         O     R3,ICFRDCMD   *SET RD COMMAND IN PLACE
         ST    R3,ICFCCWS+D24     *STORE IN RD/WR CCW
         MVC   ICFCCWS+D30(D2),CH512   *SET COUNT IN RD/WR CCW
ICFRCT   EQU   *
         XC    ICFECB,ICFECB *ZERO OUT ECB
         EXCP  ICFIOB
         WAIT  ECB=ICFECB    *WAIT FOR COMPL. OF READ
         TM    ICFECB,X7F    *WAS READ SUCCESSFUL?
         BNO   ICFRDERR      *NO, GO TRY NEXT TRK OR SEND MSG
ICFGOTCT EQU   *
         CLC   ICFCTID,CCCNTL     *IS IT GOOD CNTRL TRK?
         BNE   ICFRDERR      *NO, GO TRY NEXT TRK OR SEND MSG
ICFGODCT EQU   *
*****************************************************************
         OI    ICFTRMSA+D1,X08    *UPDATE FOOTPRINT TABLE**************
*****************************************************************
         TM    ICFCTFLA,X80  *DOES DATASET STILL CONTAIN DUMP?
         BO    ICFDMPIN      *YES, GO TAKE CARE OF IT
         STCK  ICFCTED       *GET CURRENT DATE/TIME
         L     R4,ICFCTED    *PUT IT IN GPR
         S     R4,ICFCTST    *SUBTRACT DATE/TIME OF LAST FORMAT
         BM    ICFORMAT      *SOMETHING'S WRONG - GO FORMAT
         C     R4,CTOD24HR   *IS DIFFERENCE SMALLER THAN 24 HRS?
         BL    ICFSKFRM      *YES, SKIP FORMATTING
         SPACE 3
*        THE FOLLOWING SECTION WILL FORMAT THE WARNX DATASET.
         SPACE
ICFORMAT EQU   *
         MVC   ICFIOB+D33(D6),ICFDEBCH *SK/SRC ADDRESS IN IOB
         MVI   ICFIOB+D39,X00     *RR = 0 IN IOB
         L     R4,ICFTRSIZ   *GET TRACK SIZE
         LA    R4,D8(R4)     *INCREMENT BY 8 FOR COUNT FIELD
         GETMAIN R,LV=(R4)   *GET FORMAT BUFFER
         OI    ICFESTPR,XF0  *SET FLAG FOR RETURN FROM ESTAE
         ST    R1,ICFRMBUF   *SAVE ADDRESS OF BUFFER
         MVC   D0(D4,R1),ICFIOB+D35    *SET CCHH IN COUNT FIELD
         MVI   D4(R1),X01    *SET RR IN COUNT FIELD
         MVI   D5(R1),X00    *SET KL IN COUNT FIELD
         LA    R4,D5(R1)     *ADDRESS OF SECOND OPERAND
         LA    R2,D8(R1)     *ADDRESS OF FIRST OPERAND
         L     R3,ICFTRSIZ   *LNGTH OF FIRST OPERAND
         LA    R5,D1         *LNGTH OF SECND OPRND & PADDING
         MVCL  R2,R4         *CLEAN ALL FORMAT BUFFER
         LA    R1,D0(R1)     *CLEAN HIGH ORDER BYTE
         LR    R2,R1         *SAVE POINTER TO BUFFER
         O     R1,ICFWRCMD   *SET WRITE CKD COMMAND
         ST    R1,ICFCCWS+D24     *STORE IN RD/WR CCW
*****************************************************************
         OI    ICFTRMSA+D1,X04    *UPDATE FOOTPRINT TABLE**************
*****************************************************************
         SPACE 3
*        WRITE FORMAT FOR THE CONTROL TRACK
         SPACE
         MVC   ICFCCWS+D30(D2),CH520   *SET COUNT IN RD/WR CCW
         MVC   D6(D2,R2),CH512         *SET D L IN COUNT FIELD
         XC    ICFECB,ICFECB           *CLEAR ECB
         EXCP  ICFIOB        *WRITE FORMAT FOR CNTRL TRK
         WAIT  ECB=ICFECB
         TM    ICFECB,X7F    *ANY ERRORS?
         BNO   ICFWRER2      *YES, GO SEND MSG
*****************************************************************
         OI    ICFTRMSA+D1,X02    *UPDATE FOOTPRINT TABLE**************
*****************************************************************
         SPACE 3
*        WRITE FORMAT FOR THE REST OF THE DATASET
         SPACE
         L     R3,ICFIOB+D36      *GET CCHHHHRR
         A     R3,CF256           *INCREMENT HHHH BY 1
         ST    R3,ICFIOB+D36      *SET BACK IN IOB
         MVC   D0(D4,R2),ICFIOB+D35    *SET CCHH IN COUNT FIELD
         L     R4,ICFTRSIZ        *GET TRACK SIZE
         STH    R4,D6(R2)         *SET D L IN COUNT FIELD
         LA    R4,D8(R4)          *INCREMENT BY 8 FOR COUNT FIELD
         STH   R4,ICFCCWS+D30     *SET COUNT IN RD/WR CCW
         LH    R4,DEBNMTRK    *GET NO. TRKS IN EXTENT
         DROP  R6
         BCTR  R4,R0         *LESS 1 (CNTRL TRK)
         L     R5,ICFTPC     *GET TRKS PER CYL
         BCTR  R5,R0         *LESS 1 (CNTRL TRK)
ICFFMTLP EQU   *
         XC    ICFECB,ICFECB *CLEAR ECB
         EXCP  ICFIOB        *WRITE COUNT, KEY AND DATA
         WAIT  ECB=ICFECB
         TM    ICFECB,X7F    *ANY ERRORS?
         BNO   ICFWRER2      *YES, GO SEND MSG
         L     R3,ICFIOB+D36 *GET CCHHHHRR FROM IOB
         A     R3,CF256      *INCREMENT HHHH BY 1
         ST    R3,ICFIOB+D36      *SET IT BACK
         MVC   D0(D4,R2),ICFIOB+D35    *SET CCHH IN COUNT FIELD
         BCT   R4,ICFWRT01   *MORE TRACKS TO FORMAT?
*****************************************************************
         OI    ICFTRMSA+D1,X01    *UPDATE FOOTPRINT TABLE**************
*****************************************************************
         L     R1,ICFRMBUF   *NO, PREPARE TO FREEMAIN
         LH    R4,ICFCCWS+D30     *LNGTH OF BUFFER AREA
         FREEMAIN R,LV=(R4),A=(R1)     *FREE IT
         NI    ICFESTPR,X0F  *RESET FLAG FOR RETURN FROM ESTAE
ICFSKFRM EQU   *
         SPACE 3
*        THE FOLLOWING SECTION WILL INITIALIZE
*        AND WRITE THE CONTROL TRACK.
         SPACE
         MVC   ICFCTID,CCCNTL     *SET CNTRL TRK IDENTIFIER
         L     R2,ICFTPC     *GET NO. TRKS PER CYL
         BCTR  R2,R0         *LESS 1 - LAST TRK NO.
         STC   R2,ICFCTCF    *INITIALIZE:
         MVC   ICFCTCF+D1(D127),ICFCTCF      *CYLINDER FLAGS
         MVI   ICFCTFLA,X00  *FLAG A FIELD
         MVC   ICFCTTS,ICFTRSIZ   *NO. BYTES PER TRACK
         LRA   R3,D0(R10)    *GET REAL ADDR. OF COMM.AREA
         BNZ   ICFLRAER      *IF ERROR GO SEND MESSAGE
         ST    R3,ICFCTAWA   *COMMUNICATION AREA ADDR
         XC    ICFCTB11,ICFCTB11  *S.O.B. STORAGE ADDRESS
         MVC   ICFCTB12,ICFDEBCH+D2    *S.O.B. CCCCHHHH
         MVI   ICFCTB13,XFF  *ALL OTHER
         MVC   ICFCTB13+D1(D119),ICFCTB13    *STORAGE BLOCKS
         STCK  ICFCTST       *DATE/TIME OF FORMAT
         XC    ICFCTED(D48),ICFCTED     *ICFCTED THRU ICFCTCHA
         MVC   ICFCTTPC,ICFTPC    *SAVE TRKS/CYL IN CNTL TRK
         MVC   ICFCTSTS,ICFSTSIZ  *SAVE HIGHEST STRG ADDR IN CNTL TRK
         MVC   ICFCTDAT(D8),ICFLRDAT   *DATE & TIME OF DUMP -
*        THESE TWO FIELDS WILL BE UPDATED BY MCH APPNDG AT PROPER TIME.
         MVC   ICFCTCPU,ICFLRCPU  *CPU ID
         MVC   ICFCTCHA,ICFLRCHA  *CHANNEL ASSIGNMENT
         MVI   ICFCTRSV,XEE     *TO EASE IDENTIFICATION OF
         MVC   ICFCTRSV+D1(ICFCTEND-ICFCTRSV-D1),ICFCTRSV *CNTL TRK
*****************************************************************
         OI    ICFTRMSA+D2,X80    *UPDATE FOOTPRINT TABLE**************
*****************************************************************
         XC    ICFECB,ICFECB *CLEAR ECB
         MVC   ICFIOB+D33(D6),ICFDEBCH *SET SK/SRC ADDR IN IOB
         MVI   ICFIOB+D39,X01     *SET RR = 1 IN IOB
         LA    R3,ICFCNTRK   *GET ADDR OF CNTRL TRK BUFFER
         O     R3,ICFWDCMD   *SET WRITE DATA COMMAND
         ST    R3,ICFCCWS+D24      *STORE IN RD/WR CCW
         MVC   ICFCCWS+D30(D2),CH512   *SET COUNT IN RD/WR CCW
         EXCP  ICFIOB
         WAIT  ECB=ICFECB
         TM    ICFECB,X7F    *ANY ERRORS?
         BNO   ICFWRERR      *YES, GO SEND MSG
*****************************************************************
         OI    ICFTRMSA+D2,X40    *UPDATE FOOTPRINT TABLE**************
*****************************************************************
         MVO   ICFMVO,ICFDEBCH+D2(D2)  *CONVERT CCCC TO
         UNPK  ICFUNPK,ICFMVO     *PRINTABLE CHARACTERS
         SR    R3,R3         *TAKE
         LA    R4,ICFUNPK    *CARE*
         BAL   R8,ICFTRBYT   *OF
         LA    R4,ICFUNPK+D1 *ALPHA
         BAL   R8,ICFTRBYT   *NUMBERS
         LA    R4,ICFUNPK+D2 *BYTE
         BAL   R8,ICFTRBYT   *BY
         LA    R4,ICFUNPK+D3 *BYTE
         BAL   R8,ICFTRBYT   *SAME
         CLI   ICFDSN+D9,CA  *IS THIS WARNA?
         BNE   ICFWRNB       *NO, GO HANDLE WARNB
         MVC   ICFEXTMS+D13(D6),ICFPREV   *SET VOLSER IN OPR MSG
         MVC   ICFEXTMS+D20(D4),ICFUNPK   *SET CCCC IN OPR MSG
         B     ICFEXMDN      *ALL DONE FOR WARNA
ICFWRNB  EQU   *             *HANDLE WARNB MSG PORTION
         MVC   ICFEXTMS+D27(D6),ICFPREV   *SET VOLSER IN OPR MSG
         MVC   ICFEXTMS+D34(D4),ICFUNPK   *SET CCCC IN OPR MSG
ICFEXMDN EQU   *             *ALL DONE FOR WARNB TOO
         LM    R3,R5,ICFSV35   *RESTORE REGS 3 TO 5
         L     R8,ICFSV8     *RESTORE REG 8
*****************************************************************
         OI    ICFTRMSA+D2,X20    *UPDATE FOOTPRINT TABLE**************
*****************************************************************
ICFEREX  EQU   *
         LA    R1,D4(R3)     *SETUP TO CLOSE
         MVI   D4(R3),X80    *'LAST ONE' INDICATOR
         CLOSE ((R5)),MF=(E,(1))  *CLOSE WARNX DATASET
         NI    ICFESTPR,XF0  *RESET FLAG FOR RETURN FROM ESTAE
*  THE FOLLOWING CODE IS TEMPORARY UNTIL MAST.SCHED.DYNALL IS FIXED
         L     R6,ICFJSCBS   *GET POINTER TO OUR JSCB
         USING IEZJSCB,R6    *ESTABLISH JSCB ADDRESSABILITY
         MVC   JSCBTCBP,ICFJSTCS  *RESTORE JSCBTCBP FIELD
         DROP  R6
*  END OF THE TEMPORARY CODE FOR MAST.SCHED. DYNALL *********
*****************************************************************
         OI    ICFTRMSA+D2,X10    *UPDATE FOOTPRINT TABLE**************
*****************************************************************
         BR    R8       *ALL DONE WITH THIS DATASET. BACK TO MAINLINE
         EJECT
ICFWRT01 EQU   *
         BCT   R5,ICFFMTLP   *END OF CYLINDER?
         LM    R2,R3,ICFIOB+D32   *YES, UPDATE CCCC
         SLDL  R2,D8         *PUT BBBBCCCC IN R2
         A     R2,CF1        *INCREMENT CCCC BY 1
         SRDL  R2,D8         *REALIGN
         STM   R2,R3,ICFIOB+D32   *PUT BACK IN IOB
         XC    ICFIOB+D37(D2),ICFIOB+D37   *ZERO HHHH IN IOB
         L     R2,ICFRMBUF   *RESTORE PTR TO BUFFER
         MVC   D0(D4,R2),ICFIOB+D35   *SET CCHH IN COUNT FLD
         L     R5,ICFTPC     *INIT BCT REG FOR NEXT CYL
         B     ICFFMTLP      *BACK FOR NEXT CYLINDER
         SPACE 5
ICFSVDT  EQU   *
         MVC   ICFDVPRE,UCBTYP    *SAVE DEVICE TYPE
         B     ICFBLJFC      *BACK TO MAINLINE
         SPACE 5
ICFTRBYT EQU   *
         IC    R3,D0(R4)     *GET BYTE TO BE XLATED
         C     R3,CFF9       *IS THIS ALPHA NUMBER?
         BNH   ICFTREXT      *NO, LEAVE IT ALONE
         S     R3,CF39       *YES, XLATE IT TO PRINTABLE CHAR
         STC   R3,D0(R4)     *PUT BACK XLATED BYTE
ICFTREXT EQU   *
         BR    R8            *BACK TO MAINLINE
         SPACE 5
ICFNCVOL EQU   *
         LA    R8,ICFNCVMS   *LOAD MSG PTR
         MVC   ICFNCVMS+D37(D1),ICFDSN+D9   *SET DS IDENT IN MSG
         LA    R5,ICFINRTR   *PREPARE TO QUIT
         B     ICFMSGR       *GO TO MSG ROUTINE
         SPACE 5
ICFMULTV EQU   *
         LA    R8,ICFMVMSG   *LOAD MSG POINTER
         MVC   ICFMVMSG+D12(D1),ICFDSN+D9   *SET DS IDENT IN MSG
         LA    R5,ICFINRTR   *PREPARE TO QUIT
         B     ICFMSGR       *GO TO MSG ROUTINE
         SPACE 5
ICFSAMV  EQU   *
         LA    R8,ICFSVMSG   *LOAD MSG PTR
         LA    R5,ICFINRTR   *PREPARE TO QUIT
         B     ICFMSGR       *GO TO MSG ROUTINE
         SPACE 5
ICFNOTON EQU   *
         LA    R8,ICFNOMSG   *LOAD MSG PTR
         MVC   ICFNOMSG+D10(D6),ICFPREV           *FILL IN
         MVC   ICFNOMSG+D30(D1),ICFDSN+D9         *MESSAGE
         LA    R5,ICFINRTR   *PREPARE TO QUIT
         B     ICFMSGR       *GO TO MSG ROUTINE
         SPACE 5
ICFNSDEV EQU   *
         LA    R8,ICFNSDMS   *LOAD MSG POINTER
         MVC   ICFNSDMS+D12(D1),ICFDSN+D9  *FILL IN MSG
         LA    R5,ICFINRTR   *PREPARE TO QUIT
         B     ICFMSGR       *GO TO MSG ROUTINE
         SPACE 5
ICFNOUPS EQU   *
         LA    R8,ICFNPMSG   *LOAD MSG PTR
         MVC   ICFNPMSG+D10(D6),ICFPREV      *FILL IN MSG
         LA    R5,ICFINRTR   *PREPARE TO QUIT
         B     ICFMSGR       *GO TO MSG ROUTINE
         SPACE 5
ICFDDT   EQU   *
         LA    R8,ICFDDTMS   *LOAD MSG PTR
         LA    R5,ICFINRTR   *PREPARE TO QUIT
         B     ICFMSGR       *GO TO MSG ROUTINE
         SPACE 5
ICFNOPN  EQU   *
         LA    R8,ICFNOPMS   *LOAD MSG PTR
         MVC   ICFNOPMS+D27(D1),ICFDSN+D9   *SET DSN IN MSG
         BAL   R5,ICFMSGR    *GO TO MSG ROUTINE
         B     ICFINRTR      *GO QUIT
         SPACE 5
ICFSMEXT EQU   *
         LA    R8,ICFSEMSG   *LOAD MSG PTR
         MVC   ICFSEMSG+D12(D1),ICFDSN+D9   *SET DSN IN MSG
ICFCLRTR EQU   *             *CLOSE BEFORE QUITTING
         BAL   R5,ICFMSGR    *GO TO MSG ROUTINE
         LA    R8,ICFINRTR   *PREPARE TO QUIT (AFTER CLOSING)
         LM    R3,R5,ICFSV35      *RESTORE REGS 3 TO 5
         B     ICFEREX       *GO TO APPROPRIATE POINT IN MAINLINE
         SPACE 5
ICFRDERR EQU   *             *READ ERROR MSG ROUTINE
         MVC   ICFWH1,ICFIOB+D37  *GET HHHH OF CNTL TRK
         LH    R8,ICFWH1     *PUT IT IN GPR
         LA    R8,D1(R8)     *BUMP IT BY 1
         C     R8,ICFTPC     *TRYED ALL CYLINDER?
         BNL   ICFREMR       *YES, GO SEND ERROR MSG
         STH   R8,ICFWH1     *UPDATE HHHH
         MVC   ICFIOB+D37(D2),ICFWH1   *IN IOB
         B     ICFRCT        *TRY READ NEXT TRACK
ICFREMR  EQU   *
         LA    R8,ICFREMSG   *LOAD MSG PTR
         MVC   ICFREMSG+D30(D1),ICFDSN+D9   *SET DSN IN MSG
         LA    R5,ICFORMAT   *PREPARE TO FORMAT  (WAS ICFCLRTR)
         B     ICFMSGR       *GO SEND MSG
         SPACE 5
ICFDMPIN EQU   *             *DATASET CONTAINS VALID DUMP
         MVC   ICFVDMSG+D44(D1),ICFDSN+D9   *DSN IN MSG
ICFRFMR  EQU   *
         LA    R1,ICFVDMSG   *GET MSG POINTER
         XC    ICFANSW(D4),ICFANSW     *CLEAN REPLY AREA
         MVC   ICFVDMSG+D1(D3),ICFANSAD   *PUT REPLY ADDR IN WTOR
         MVC   ICFVDMSG+D4(D4),ICFREPAD   *PUT ECB ADDR IN WTOR
         XC    ICFREPLY,ICFREPLY  *ZERO ECB
         WTOR  MF=(E,(R1))
         WAIT  ECB=ICFREPLY  *WAIT FOR REPLY
         OC    ICFANSW,C4BLK *XLATE TO UPPER CASE
         CLC   ICFANSW(D4),CCREST *IS RESTORE REQUESTED?
         BE    ICFREST       *YES, GO DO IT
         CLC   ICFANSW(D4),CCFORM *IS FORMAT REQUESTED?
         BNE   ICFRFMR       *NO, REISSUE THIS MESSAGE
         SPACE 3
**************************************************************
*                                                                     *
*        WRITE ENTRY ON LOGREC TO RECORD PREVIOUS POWER FAILURE       *
*                                                                     *
**************************************************************
         SPACE
         XC    ICFLRBUF(D56),ICFLRBUF  *CLEAN LOGREC BUFFER
         L     R1,X10        *GET CVT POINTER
         S     R1,CF4        *GET POINTER TO CVTRELNO
         MVC   ICFLRBUF+D5(D1),D2(R1)  *SET RELEASE LEVEL
         PACK  ICFLRBUF+D48(D8),D0(D2,R1)   *PACK RELEASE NO.
         CVB   R1,ICFLRBUF+D48    *CONVERT RELEASE NO. TO BINARY
         MVI   ICFLRBUF,X50  *SET RECORD TYPE
         STC   R1,ICFLRBUF+D1     *RELEASE NO.
         MVI   ICFLRBUF+D2,X08    *WHATEVER IT IS
         MVC   ICFLRBUF+D8(D16),ICFCTDAT    *DATE, TIME & CPU ID
         MVI   ICFLRBUF+D24,X10   *WHATEVER IT IS
         MVC   ICFLRBUF+D24(D2),CCEN     *DITTO
         MVC   ICFLRBUF+D32(D8),ICFCTCHA   *CHAN. ASSIGNMNT
         MVC   ICFLRBUF+D40(D4),ICFCTSTS   *HIGHEST STRG ADDR
         LA    R0,D48        *GET RECORD LENGTH
         LNR   R0,R0         *MAKE IT NEGATIVE
         LA    R1,ICFLRBUF   *GET POINTER TO RECORD
         SVC   D76           *GO WRITE LOGREC RECORD
         SPACE 3
**************************************************************
*                                                                     *
*        SET UP FOR AND GO TO USER EXIT ROUTINE                       *
*                                                                     *
**************************************************************
         SPACE
         ST    R9,ICFUSPRM   *SAVE IT IN USER PARM LIST
         LA    R1,ICFUSPRM   *LOAD POINTER TO PARM LIST FOR USER
         L     R15,ICFTIUEP  *GET USER ROUTINE E.P.A.
         BALR  R14,R15       *PASS CONTROL TO USER ROUTINE
         B     ICFORMAT      *NOW GO FORMAT THE DATASET
         SPACE 3
ICFWRER2 EQU   *
         LA    R8,ICFWEMSG   *LOAD MSG PTR
         MVC   ICFWEMSG+D30(D1),ICFDSN+D9   *DSN IN MSG
         BAL   R5,ICFMSGR    *GO TO MSG ROUTINE
ICFFREMB EQU   *             *
         L     R1,ICFRMBUF   *PREPARE TO FREEMAIN
         LH    R4,ICFCCWS+D30     *LNGTH OF AREA TO FREE
         FREEMAIN R,LV=(R4),A=(R1)     *FREE IT
         NI    ICFESTPR,X0F  *RESET FLAG FOR RETURN FROM ESTAE
         LA    R8,ICFINRTR   *PREPARE TO QUIT
         LM    R3,R5,ICFSV35      *RESTORE REGS 3 TO 5
         B     ICFEREX       *GO QUIT (AFTER CLOSING THOUGH)
         SPACE 5
ICFWRERR EQU   *
         LA    R8,ICFWEMSG   *LOAD MSG POINTER
         MVC   ICFWEMSG+D30(D1),ICFDSN+D9   *DSN IN MSG
         B     ICFCLRTR      *GO QUIT AFTER CLOSING
         EJECT
********************************************************************
*                                                                     *
*              ESTAE EXIT ROUTINE                                     *
*                                                                     *
********************************************************************
         SPACE 1
ICFESTAE EQU   *
         STM   R14,R12,D12(R13)   *SAVE REGISTERS AT ABEND
         USING SDWA,R1       *ESTABLISH SDWA ADDRESSABILITY
         LM    R2,R13,SDWASR02      *REINIT REGISTERS FOR THIS MODULE
         SETRP RETADDR=ICFRETRY,DUMP=YES,RC=4  *SET UP FOR RETRY ROUT.
         LM    R1,R12,D24(R13)   *RESTORE APPROPRIATE REGISTERS
         LA    R15,D4        *INDICATE RETRY HAS TO TAKE PLACE
         BR    R14           *GO BACK TO TERMINATION PROCESSING
         SPACE 5
ICFRETRY EQU   *
         USING SDWA,R1       *ESTABLISH SDWA ADDRESSABILITY
         LM    R2,R13,SDWASR02      *REINIT REGISTERS FOR THIS MODULE
         LA    R1,ICFUNEMS   *GET 'UNEXPECTED ERROR' MESSAGE POINTER
         WTO   MF=(E,(1))    *WRITE MESSAGE OUT
         TM    ICFESTPR,XF0  *DO WE HAVE TO FREEMAIN FORMAT BUFFER?
         BO    ICFSER01      *YES, GO SET CORRECT RETURN ADDRESS
         TM    ICFESTPR,X0F  *DO WE HAVE TO CLOSE WARNX DCB?
         BO    ICFSER02      *YES, GO SET CORRECT RETURN ADDRESS
         L     R14,ICFESTPR+D0    *PREPARE RETURN TO MASTER SCHEDULER
         BR    R14           *GO SET FUNCTION INOPERATIVE
         SPACE 3
ICFSER01 EQU   *
         L     R14,ICFESTPR+D8    *PREPARE RETURN TO MASTER SCHEDULER
         BR    R14           *GO FREEMAIN FORMAT BUFFER,CLOSE WARNX AND
*                            *SET FUNCTION INOPERATIVE
         SPACE 3
ICFSER02 EQU   *
         LA    R8,ICFINRTR        *PREPARE CORRECT RETURN
         L     R14,ICFESTPR+D4    *PATH BACK TO MASTER SCHEDULER
         BR    R14           *GO CLOSE WARNX AND SET FUNCTION INOPER.
         SPACE 3
         EJECT
*        JOB FILE CONTROL BLOCK
         SPACE
ICFJFCB  EQU   *
         DC    CL44' '       *DATASET NAME
         DC    CL8' '        *EL. NAME, GEN#
         DC    B'00001000'   JOB-DATA MGMT INTFC
         DC    XL13'0'       SYSTEM CODE
         DC    X'01'         NO LABEL
         DC    X'0'          SPARE
         DC    XL2'0'        FILE SEQUENCE
         DC    XL2'0'        *VOLUME SEQUENCE
         DC    XL8'0'        *DATA MGMT MASK
         DC    XL6'0'        *DATES
         DC    X'0'          *INDICATOR 1
         DC    X'40'         *INDICATOR 2 - OLD
         DC    XL28'0'       *DCB FIELDS
         DC    X'0'          *BLOCK & TRACK
         DC    X'0'          *VOL SER COUNT
ICFPRVOL DC    CL30' '       *VOL SERS
         DC    XL4'0'        *VOL INFO
         DC    XL3'0'        *PRIMARY DA QUANT.
         DC    X'0'          *DA QUANT.
         DC    XL3'0'        *2NDARY DA QUANT.
         DC    X'0'          *INDICATOR EXTENT
         DC    XL3'0'        *DIRECTORY QUANT.
         DC    XL3'0'        *SPLIT JFCB
         DC    XL2'0'        *TTR 1ST ALLOC
         DC    XL3'0'        *JFCB SUB ALLOC
         DC    XL3'0'        *AV REC LENGTH
         DC    X'1'          *VOL COUNT
         DC    X'0'          *SPLIT
         EJECT
         SPACE 3
*        DATA CONTROL BLOCK
         SPACE
ICFDCB   DCB  DSORG=PS,DEVD=DA,MACRF=(E),IOBAD=ICFIOB,DDNAME=DDWARNX
         EJECT
         SPACE 3
*        IOB, ECB AND CCWS
         SPACE
         DS    0D            *FOR ALIGNMENT
ICFIOB   DS    0CL40
         DC    X'42'         *+00 COMM CHAIN & UNRELATED
         DC    XL4'0'        *+01
         DC    AL3(ICFECB)   *+05 ECB ADDRESS
         DC    XL9'0'        *+08
         DC    AL3(ICFCCWS)  *+17 CCW CHAIN ADDR
         DC    X'0'          *+20
         DC    AL3(ICFDCB)   *+21 DCB ADDRESS
         DC    XL8'0'        *+24
         DC    X'0'          *+32
         DC    XL7'1'        *+33 SEEK/SEARCH ADDR. WITH RR=01
         SPACE 5
ICFECB   DC    F'0'          *ECB FOR EXCP
         SPACE 5
ICFCCWS  DS    0D
         DC    X'1B',AL3(ICFIOB+D33),X'6000',XL2'6'   *SEEK CCW
         DC    X'31',AL3(ICFIOB+D35),X'6000',XL2'5'   *SEARCH CCW
         DC    X'08',AL3(ICFCCWS+D8),X'6000',XL2'1'   *TIC CCW
         DC    X'06',AL3(0),XL2'0',H'512'             *RD/WR CCW
         SPACE 5
ICFRDCMD DC    XL4'06000000' *READ COMMAND
ICFWRCMD DC    XL4'1D000000' *WRITE CKD COMMAND
ICFWDCMD DC    XL4'05000000' *WRITE DATA COMMAND
         EJECT
         SPACE 3
*        MISCELLANEOUS CONSTANTS AND FIELDS
         SPACE
         DS    0D            *ALIGN TO DOUBLEWORD
ICFRBPTR DC    X'80'
         DC    AL3(ICFRBLNG)
*
ICFRBLNG DC    X'14'         *RB LENGTH
ICFRBVRB DC    X'01'         *   VERB CODE
ICFRBFL1 DC    X'2000'       *   FLAGS1 - S99NOMNT=1
ICFRBERC DC    H'0'          *   ERROR CODE
ICFRBINF DC    H'0'          *   INFO CODE
ICFRBTXP DC    A(ICFTPTU1)   *   TEXT POINTERS
ICFRBRSV DC    F'0'          *   RESERVED
ICFRBFL2 DC    X'20000000'   *   FLAGS2 -S99NORES=1
*
ICFTPTU1 DC    A(ICFTUDSN)   *TEXT POINTER 1
ICFTPTU2 DC    A(ICFTUDSS)   *TEXT POINTER 2
ICFTPTU3 DC    X'80'         *TEXT POINTER 3
         DC    AL3(ICFTUDDN) *DITTO
*
ICFTUDSN DC    XL2'2'        *TEXT UNIT 1 - DATASET NAME
         DC    XL2'1'        *
         DC    XL2'A'        *
         DC    C'SYS1.WARNX'
ICFTUDSS DC    XL2'4'        *TEXT UNIT 2 - DATASET STATUS
         DC    XL2'1'        *
         DC    XL2'1'        *
         DC    X'01'         *
         DS    0F
ICFTUDDN DC    XL2'1'        *TEXT UNIT 3 - DDNAME
         DC    XL2'1'        *
         DC    XL2'7'        *
         DC    C'DDWARNX'    *
         DS    0D
ICFDDWA  DC    CL8'DDWARNA'  *
ICFDDWB  DC    CL8'DDWARNB'  *
ICFDEBCH DC    XL6'0'        *
ICFDEBTS DC    XL2'0'        *
CF8      DC    F'8'          *
CF1      DC    F'1'          *
CF2      DC    F'2'          *
CF3      DC    F'3'          *
CF4      DC    F'4'          *
CF65536  DC    F'65536'      *
CF32     DC    F'32'         *
CF256    DC    F'256'        *
CF1000   DC    F'1000'       *
CTOD24HR DC    F'86400'      *APRROX. 24 HRS IN TOD SECS
ICFEMTD  DC    F'10'          *ENGINEERING MINIMUM TIME PARAM. 10 MSEC
CF6      DC    F'6'          *
CFF9     DC    X'000000F9'   *
CF39     DC    X'00000039'   *
CH1      DC    H'1'          *
CH520    DC    H'520'        *
CH512    DC    H'512'        *
ICFUNPK  DC    XL4'0'        *
ICFMVO   DC    XL3'F'        *
CCWARN   DC    C'SYS1.WARN'  *
CCCNTL   DC    C'CNTL'       *
ICFTIFRC DC    F'0'          *RETURN CODE FIELD
ICFPDSIN DC    CL8'DDWARNX'  *FOR DEVTYPE MACRO
ICFPREV  DC    CL6' '        *VOLSER SAVE FIELD
CCEN     DC    C'EN'         *
CCGO     DC    C'GO  '       *                                 @ZA00521
CCSTOP   DC    C'STOP'       *                                 @ZA00521
C4BLK    DC    CL4' '        *
CCFORM   DC    C'FORM'       *
CCREST   DC    C'REST'       *
ICFBRFEP DC    A(ICFBRE00)   *RESTORE E.P.A.
ICFTIUEP DC    A(ICFBIE50)   *USER EXIT ROUTINE ENTRY POINT
         SPACE 3
ICFWDSN  CAMLST SEARCH,ICFDSN,ICFPREV,ICFWKA
         SPACE 3
ICFWVOL  CAMLST NAME,ICFDSN,,ICFWKA
         SPACE 3
ICFDSN   DS    CL44          *DSNAME FOR LOCATE
         DS    F             *
         DS    0D            *
ICFWKA   DS    0CL265        *WORK AREA FOR LOCATE MACRO
ICFNVOL  DS    CL2           *DITTO
ICFDEVCD DS    CL4           *DITTO
ICFVOLS  DS    CL6           *DITTO
ICFSEQN  DS    CL2           *DITTO
ICFOTVOL DS    19CL12        *DITTO
ICFZERS1 DS    CL10          *DITTO
ICFTTR1  DS    CL3           *DITTO
ICFZER2  DS    CL1           *DITTO
ICFTTR2  DS    CL3           *DITTO
ICFBLKVL DS    CL6           *DITTO
         EJECT
         SPACE 3
*        MESSAGES AND RELATED COSTANTS AND FIELDS
         SPACE
ICFANSW  DC    CL4'STOP'     *FIELD FOR OPERATOR REPLY
ICFREPLY DC    F'0'          *ECB FOR WTOR
ICFREPAD DC    A(ICFREPLY)   *ITS ADDRESS
ICFANSAD DC    AL3(ICFANSW)  *REPLY FLD ADDRESS
ICFINPMS DC    CL43'11 WARN TIME PARAMETER IS ZERO'
ICFCTDMS DC    CL43'12 WARN TIME PARAMETER IS ONE'
ICFNCVMS DC    CL43'13 LOCATE/OBTAIN FAILED FOR SYS1.WARNX'
ICFMVMSG DC    CL43'14 SYS1.WARNX RESIDES ON MORE THAN 1 VOLUME'
ICFSVMSG DC    CL43'15 BOTH SYS1.WARN DATASETS ON SAME VOLUME'
ICFNOMSG DC    CL43'16 VOLUME XXXXXX FOR SYS1.WARNX NOT MOUNTED'
ICFNPMSG DC    CL43'17 VOLUME XXXXXX ON UNPOWERED DEVICE'
ICFDDTMS DC    CL43'18 WARN DATASETS ON DIFFERENT DEVICE TYPES'
ICFNOPMS DC    CL43'19 COULD NOT OPEN SYS1.WARNX'
ICFSEMSG DC    CL43'20 SYS1.WARNX TOO SMALL FOR STORAGE SIZE'
ICFPNAMS DC    CL43'22 PATH NOT AVAILABLE FOR WARN DATASET'
ICFNSDMS DC    CL43'23 SYS1.WARNX RESIDES ON UNSUPPORTED DEVICE'
ICFREMSG DC    CL43'31 I/O ERROR READING SYS1.WARNX'
ICFWEMSG DC    CL43'32 I/O ERROR WRITING SYS1.WARNX'
         SPACE 5
ICFWTOR  WTOR  'ICFTIMXX XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX - REPC
               LY STOP OR GO',,4,ROUTCDE=(1,2,10),DESC=2,MF=L
ICFVDMSG WTOR  'ICFTIM21 VALID DUMP IN SYS1.WARNX - REPLY FORM OR REST'C
               ,,4,ROUTCDE=(1,2,10),DESC=2,MF=L
ICFCTDM  WTO   'ICFTIM51 WARN WILL DUMP AT FIRST WARNING',             C
               ROUTCDE=(1),DESC=2,MF=L
ICFQUITM WTO   'ICFTIM99 POWER WARNING FEATURE  - FUNCTION INOPERATIVE'C
               ,ROUTCDE=(1,10),DESC=2,MF=L
ICFEXTMS WTO   'ICFTIM58 XXXXXX CCCC - YYYYYY CCCC',                   C
               ROUTCDE=(1),DESC=2,MF=L
ICFICMSG WTO   'ICFTIM59 POWER WARNING FEATURE - INITIALIZATION COMPLETC
               E',ROUTCDE=(2),DESC=4,MF=L
ICFUNEMS WTO   'ICFTIM90 POWER WARNING FEATURE - UNEXPECTED ERROR',DESCC
               =2,ROUTCDE=(1),MF=L
ICFWHMSG WTO   'ICFTIM91 WARNING DETECTED BEFORE PWF INITIALIZATION',DEC
               SC=2,ROUTCDE=(1),MF=L
         SPACE 3
ICFPATCH DC    25CL4'DDDD'   *PATCH AREA
         EJECT
ICFTIFDS DSECT
ICFSAVEA DS    18F           *SAVE AREA
ICFIOSGS DS    F             *FOR IOSGEN SAVING MECHANISM
ICFSV35  DS    3F            *SAVE AREA FOR REGS 3 TO 5
ICFSV8   DS    F             *SAVE AREA FOR REG 8
ICFSV5   DS    F             *SAVE AREA FOR REG 5
ICFCCW1  DS    D             *WORK AREA FOR SEEK CCW
ICFCCW2  DS    D             *WORK AREA FOR SEARCH CCW
ICFCCW3  DS    D             *WORK AREA FOR TIC CCW
ICFCCW4  DS    D             *WORK AREA FOR WRITE CCW
ICFCHR   DS    D             *
ICFRMBUF DS    F             *SAVE FORMAT BUFFER POINTER
ICFDVTYP DS    5F            *WORK AREA FOR DEVTYPE MACRO
ICFDVPRE DS    F             *SAVE DEVICE TYPE
ICFWH1   DS    H             *WORK HALFWORD 1
ICFWH2   DS    H             *WORK HALFWORD 2
ICFLRBUF DS    7D            *LOGREC BUFFER
ICFUSPRM DS    F             *PARAMETER LIST FOR USER
ICFTIOTS DS    F             *SAVE AREA FOR OUR TIOT POINTER
ICFTCBSV DS    F             *SAVE AREA FOR OUR TCB POINTER
ICFJSCBS DS    F             *SAVE AREA FOR OUR JSCBTCBP POINTER
ICFJSTCS DS    F             *SAVE AREA FOR OUR JSCBTCBP FIELD
ICFESTPR DS    3F            *PARAMETER AREA FOR ESTAE
ICFPRMLS DS    4F            *PARAMETER LIST FOR OPEN
ICFDSEND EQU   *             *END OF WORK AREA
         EJECT
         CVT   DSECT=YES
         EJECT
         ICFWORK
         EJECT
UCBD     DSECT
         IEFUCBOB
         EJECT
         IKJTCB
         EJECT
         PRINT ON,NOGEN
         DCBD  DSORG=(PS)
         PRINT ON,GEN
         EJECT
TIOTDSEC DSECT
         IEFTIOT1
         EJECT
         IEZJSCB
         EJECT
         IEZDEB
         EJECT
         IECDLCH
         EJECT
         IHAPSA
         EJECT
         IHASDWA
         EJECT
         IECDCAT
         EJECT
         IHAPCCA
         EJECT
         IHACSD
         EJECT
ICFBIE00 CSECT
         SPACE 5
ICFDSSIZ EQU   ICFDSEND-ICFSAVEA
ICFMSWRD EQU   ICFWTOR+D18
         DROP  R10
         DROP  R11
         DROP  R12
         DROP  R13
         TITLE 'POWER WARNING FEATURE - RESTORE ROUTINE'
***********************************************************************
***********************************************************************
*                                                                     *
*                                                                     *
*  THIS ROUTINE RESTORES STORAGE FROM DISK PREVIOUSLY DUMPED BY       *
*        ICFBDF00--DUMP ROUTINE                                       *
*                                                                     *
*  TERMINATIONS--PSW WAIT, IC=26 SUCCESSFUL RESTORE                   *
*                PSW WAIT, IC=27 ALL OR PART NOT RESTORED             *
*                                                                     *
*  LINKAGE--REGISTER 15, ENTRY AND BASE REG                           *
*           REGISTER 10, TABLE POINTER-COMMUNICATION AREA             *
*           REGISTER  9, CCCCHHHH CONTROL TRACK                       *
*                                                                     *
*           REGISTER 14--POINTS TO A FOOTPRINT TABLE(1 WORD),         *
*                        FOLLOWED BY A RECORD OF TRACKS AND           *
*                        STORAGE THAT FAILED TO RESTORE               *
*          TRACK RECORDS-(3 WORDS EACH TRACK)                         *
*                WORD 1.-CCCCHHHH FAILING TRACK                       *
*                     2.-00AAAAAA BEGINNING ADR                       *
*                     3.-00AAAAAA ENDING ADR                          *
*                                                                     *
*          SENSE INFORMATION FROM LAST UNIT CHECK MAY BE              *
*          FOUND 24 BYTES PRECEDING FOOTPRINT TABLE                   *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*  FOOTPRINT TABLE-(ADR IN REG 14)-(1 WORD, BIT ON CONDITION)         *
*                                                                     *
*                HISTORICAL                                           *
*                 BIT 0.-RESTORE STARTED                              *
*                     1.-MOVED TO HEX 1000                            *
*                     2.-INITIALIZATION COMPLETE-START SP RESTORE     *
*                     3.-SP KEYS RESTORED-START DATA RESTORE          *
*                      X                                              *
*                     4.-DATA(LESS FIRST TRACK) RESTORED-MOVE PROGRAM *
*                     5.-PROGRAM MOVED TO DUMP WORK AREA              *
*                     6.-RE-INITIALIZATION COMPLETE-START FIRST TRK   *
*                     7.-FIRST TRK RESTORE COMPLETE-RESTORE COMPLETE  *
*                 SUB-HISTORY                                         *
*                 BIT 8.-1 OR BOTH SP TRKS READ                       *
*                     9.-1 OR MORE DATA TRKS RESTORED                 *
*                    1O.-1 OR MORE CYLS RESTORED                      *
*                    11.-1 OR MORE STORAGE BLOCKS RESTORED            *
*                      X                                              *
*                    12.-SP END FLAGGED BY LAST STORAGE BLOCK         *
*                    13.-SP END FLAGGED BY LAST SP KEY                *
*                    14.-DATA END FLAGGED BY LAST STORAGE BLOCK       *
*                    15.-DATA END FLAGGED BY LAST CYL FLAG            *
*                 CURRENT                                             *
*                BIT 16.-IN I/O ROUTINE                               *
*                    17.-GOING TO TIO                                 *
*                    18.-UNIT CHECK-DOING SENSE                       *
*                    19.-IN CORRECTABLE ERROR ROUTINE                 *
*                      X                                              *
*                    20.-IN TRACK RETRY                               *
*                    21.-IN CHANNEL ERROR HANDLER                     *
*                 ERROR RECORD                                        *
*                BIT 22.-1 OR MORE CORRECTABLE ERRORS OCCURRED        *
*                    23.-1 OR MORE TRACKS RETRIED                     *
*                      X                                              *
*                    24.-1 OR MORE TRACKS FAILED TO RESTORE           *
*                    25.-FIRST TRACK NOT RESTORED                     *
*                    26.-SP KEYS NOT RESTORED                         *
*                    27.-1 OR MORE CHANNEL ERRORS                     *
*                 TERMINATIONS                                        *
*                BIT 28.-UNIT CHECK ON SENSE                          *
*                    29.-10 TRACKS UNRESTORABLE                       *
*                    30.-10 CHANNEL ERRORS                            *
*                    31.-DEVICE NOT OPERATIVE                         *
*                                                                     *
***********************************************************************
         EJECT
         SPACE 3
* * * EQUATES * * *
RZ       EQU   0
RTAB     EQU   10
RCH      EQU   9
RCW      EQU   12
RBL      EQU   13
RM       EQU   8
Q0       EQU   0
Q1       EQU   1
Q2       EQU   2
Q3       EQU   3
Q4       EQU   4
Q5       EQU   5
Q6       EQU   6
Q8       EQU   8
Q12      EQU   12
Q14      EQU   14
Q16      EQU   16
QX12     EQU   X'12'
Q24      EQU   24
Q20      EQU   X'20'
Q40      EQU   X'40'
Q42      EQU   X'42'
Q80      EQU   X'80'
Q128     EQU   128
Q136     EQU   136
Q3F      EQU   X'3F'
QC0      EQU   X'C0'
QEE      EQU   X'EE'
QFF      EQU   255
M7       EQU   7
ICFPGNEW EQU   104
ICFCAW   EQU   72
ICFCSW   EQU   64
ICFMCH   EQU   112
ICFMCHA  EQU   116
ICFION   EQU   120
BUSY     EQU   2
STAT     EQU   4
NOTOP    EQU   1
         EJECT
         SPACE 3
* * * RELOCATION AND INITIALIZATION * * *
         SPACE 1
ICFBRE00 DS    0D             ****ENTRY****
         USING ICFBRE00,R15
         USING ICFWORKA,RTAB
ICFFIRST EQU   *
         B     ICFIDER
         DC    C'RESTORE PROGRAM ' IDENTIFY PROGRAM FOR DUMPS
ICFIDER  EQU   *
         LA    R14,ICFFOOT        FOOTPRINT ADR
         XC    ICFFOOT,ICFFOOT    CLEAR FOOTPRINT
***FOOTPRINT--BIT 0--RESTORE STARTED***
         OI    Q0(R14),Q80
         MVC   ICFPGNEW(Q16),ICFBUM SET PROG, MCH PSWS
         L     R2,ICFX1000         SET MOVE TO ADDRESS
         L     R3,ICFX800          MOVE 2048 BYTES
         LR    R4,R15              FROM ADDRESS
         L     R5,ICFPCT          COUNT OF PROGRAM
         MVCL  R2,R4              MOVE FROM PRESENT ADR TO HEX 1000
         L     R15,ICFX1000       SHIFT AND RUN AT 1000
         B     *+4
         LA    R14,ICFFOOT        FOOTPRINT ADR
***FOOTPRINT--BIT 1--MOVED TO X1000***
         OI    Q0(R14),Q40
         MVC   ICFCYFL(Q128),ICFCTCF   CONTROL INFO
         MVC   ICFBPT(Q136),ICFCTTS MORE INFO
         MVC   ICFTRPC(Q4),ICFCTTPC
         MVC   ICFPX(Q4),ICFCTPXR
         MVC   ICFSIOA+2(Q2),ICFCTRDA+2 DEVICE ADR
         MVC   ICFTIOA+2(Q2),ICFCTRDA+2
         CLI   ICFTIOA+2,Q6       SET MASK TO ENABLE RESTORE CHANNEL
         BNL   ICFHI              CH6 OR HIGHER
         MVC   ICFMCH(Q1),ICFTIOA+2
         TR    ICFMCH(Q1),ICFMASK  TRANSLATE CHANNEL TO MASK
         EJECT
         SPACE 3
ICFHI    EQU   *
         LA    RM,ICFCCH          CCHH ADR
         STCM  RM,M7,ICFSEEK+1    SET IN SEEK CCW
         LA    RM,Q2(RM)          BUMP BY 2
         STCM  RM,M7,ICFSERCH+1   SET IN SEARCH CCW
         LA    RM,ICFSERCH        ADR OF SERCH CCW
         STCM  RM,M7,ICFTIC+1     SET IN TIC CCW
         LA    RM,ICFCCHX         DUMMY CCHH ADR
         STCM  RM,M7,ICFSEEKX+1   DUMMY SEEK CCW
         MVC   ICFREAD+6(Q2),ICFBPT+2 SET CCW COUNT
         MVC   ICFREAD+2(Q2),ICFBPT+2 SET CCW ADR
         LA    RM,ICFSDAT         SENSE FIELD
         STCM  RM,M7,ICFSENSE+1   SET IN SENSE CCW
         ST    RCH,ICFCCHA        CCCCHHHH OF CNTL TRACK
         LA    RM,ICFEINT         SET PSWS
         ST    RM,ICFMCHA         ENABLE PSW
         MVC   ICFION(Q8),ICFMCH  I/O NEW
         MVC   ICFPSAVE(Q24),ICFPGNEW    *SAVE PSWS
         LA    RM,ICFDINT
         ST    RM,ICFDPSW+4       DISABLE PSW
         SPACE 1
* * * RESTORE SP KEYS * * *
         SPACE 1
***FOOTPRINT BIT 2-INITIALIZATION COMPLETE-START SP RESTORE***
         OI    Q0(R14),Q20
ICFSPMOR EQU   *
         L     RCH,ICFCCHA        CCCCHHHH OF SP TRACK
         LA    RCH,Q1(RCH)        UP TRACK BY 1 FOR SP KEYS
         ST    RCH,ICFCCHA        SET IN CCHH
         BAL   RBL,ICFSIO         GO READ SP KEYS
         B     ICFSPOK            NO ERROR
         BAL   RBL,ICFERR         ERROR
***FOOTPRINT BIT 26-SP KEYS NOT RESTORED***
         OI    Q3(R14),Q20
         NI    Q2(R14),Q3
         XC    ICFRTCT,ICFRTCT CLEAAR RETRY CTR
         XC    Q4(Q8,RCW),Q4(RCW) NO ADR FOR SP TRACK RECORDS
         MVC   ICFGOOD(Q8),ICFBUM SET WAIT CODE TO PARTIAL
         B     ICFSPNG
         EJECT
         SPACE 3
ICFSPOK  EQU   *
***FOOTPRINT BIT 8-1 OR MORE SP TRACKS READ***
         OI    Q1(R14),Q80
         NI    Q2(R14),Q3
         XC    ICFRTCT,ICFRTCT    CLEAR RETRY CTR
         L     R1,ICFBPT          ADR FIRST SP KEY
         LA    R2,Q1              INCREMENTER
         L     R3,ICF4095         MAX SP ON ONE TRACK
         AR    R3,R1              SET COMPARAND
         TS    ICFKFLAG           FIRST TIME
         BM    ICFSPSET           NO-CK KEY
         LA    RM,ICFCONF         GET CONFIGURATION MAP ADR
         SR    R1,R2              ADJUST R1 FOR BXH
ICFCFIN  EQU   *
         TM    Q0(RM),QFF         USED?
         BO    ICFSPEN1           LAST OF SP
         L     R5,Q0(RM)          STARTING STOR ADR
         L     R6,ICFX800         INCREMENT
         L     R7,Q8(RM)          ENDING STOR ADR
         LA    RM,Q16(RM)         TRY NEXT
         BXH   R1,R2,ICFSPMOR
ICFSPSET EQU   *
         TM    Q0(R1),QFF         LAST KEY
         BO    ICFSPEN2           YES
         IC    RZ,Q0(R1)          GET KEY
         SSK   RZ,R5              SET
         BXH   R5,R6,ICFCFIN      NEXT STORAGE BLOCK
         BXLE  R1,R2,ICFSPSET     NEXT KEY
         B     ICFSPMOR           GET MORE SP KEYS
***FOOTPRINT BIT 12-SP END FLAGGED BY LAST STORAGE BLOCK***
ICFSPEN1 EQU   *
         OI    Q1(R14),Q8
         B     ICFSPEN
***FOOTPRINT BIT 13-SP END FLAGGED BY LAST SP KEY***
ICFSPEN2 EQU   *
         OI    Q1(R14),Q4
         B     ICFSPEN
         EJECT
         SPACE 3
* * * THIS SECTION RESTORES ALL BUT FIRST TRACK * * *
ICFSPEN  EQU   *
***FOOTPRINT BIT 3-SP KEYS RESTORED-START DATA RESTORE***
        OI    Q0(R14),Q16
        SPACE 1
*R1 STORAGE ADDRESS
*R2 INCREMENT BY TRACK SIZE
*R3 END OF STORAGE BLOCK
*R4 CYL FLAG ADDRESS
*R5 0000HHHH
*R6 INCREMENT HEAD BY 1
*R7 NO. TRACKS PER CYL
*RCH 0000CCCC
*RM CONFIGURATION MAP ADDRESS
         SPACE 1
ICFSPNG   EQU   *
         LA    RM,ICFCONF         CONFIGURATION MAP
         LA    R4,ICFCYFL         CYL FLAGS
         LA    R6,Q1
         L     R1,ICFBPT          SKIP FIRST TRACK
         LR    R5,R6              **
         MVC   ICFCHSV(Q4),Q4(RM) SAVE FIRST TRACK ADDRESS
         TM    Q0(R4),Q3F         IS FIRST TRACK SPARE?
         BNZ   ICFSR              NO
         STH   R5,ICFCHSV+2       UPDATE THIS
         AR    R5,R6              SELECT NEXT TRACK
ICFSR    EQU   *
         STH   R5,Q6(RM)           POINT AT 2ND TRACK
         ST    R1,Q0(RM)           ADR 0 + BYTES PER TRACK
ICFSR1   EQU   *      * NEW BLOCK *
         TM    Q0(RM),QFF         LAST BLOCK USED?
         BO    ICFLT1             YES
         MVI   ICFBFLAG,Q0        CLEAR BLOCK FLAG
         LH    R5,Q6(RM)          STARTING TRACK
         L     R1,Q0(RM)          STARTING ADR
         L     R3,Q8(RM)          ENDING ADR
         ST    R3,ICFTOP          FOR ERR COR
         LH    RCH,Q4(RM)         STARTING CYL
         EJECT
         SPACE 3
ICFSR2   EQU   *      * NEW CYL *
         TM    Q0(R4),QC0         CYL USED?
         BZ    ICFLT2             NO-END
         L     R2,ICFBPT          BYTES PER TRACK
         LH    R7,Q14(RM)         LAST TRACK TO BE USED
         CH    RCH,Q12(RM)        IS THIS LAST CYL?
         BE    ICFSR3             YES
         L     R7,ICFTRPC         TRACKS PER CYL
         S     R7,ICF2            DOWN 2-ADJUST FOR BXLE
         TM    Q0(R4),Q80         BAD TRACK THIS CYL?
         BZ    ICFSR3             NO
         LA    R7,Q1(R7)          YES-BUMP COUNT BY 1
        SPACE 1
ICFSR3   EQU   *
         NI    Q0(R4),Q3F         CLEAR FLAG--GET SPARE TRACK
ICFSR4   EQU   *
         STH   RCH,ICFCCHA        SET CCCC
         STH   R5,ICFCCHA+2       SET TRACK TO READ
         CLC   ICFCCHA+3(Q1),Q0(R4) IS THIS SPARE TRACK
         BNE   ICFSR5             NO
         LA    R5,Q1(R5)          YES-GO TO NEXT TRACK
         B     ICFSR4
ICFSR5   EQU   *
         STCM  R1,M7,ICFREAD+1    SET ADR IN CCW
         BXH   R1,R2,ICFLST       UPDATE ADR
ICFSR6   EQU   *
         STH   R2,ICFREAD+6       SET COUNT IN CCW
         BAL   RBL,ICFSIO        GO RAED A TRACK
         B     ICFTROK           TRACK OK
         MVC   ICFGOOD(Q8),ICFBUM SET PARTIAL RESTORE
         B     ICFTROK1
         EJECT
         SPACE 3
ICFTROK  EQU   *
***FOOTPRINT BIT 9-1 OR MORE DATA TRACKS RESTORED***
        OI    Q1(R14),Q40
ICFTROK1 EQU   *
         XC    ICFRTCT,ICFRTCT    CLEAR RETRY CTR
         NI    Q2(R14),Q3
         TM    ICFBFLAG,Q80        NEED NEW BLOCK?
         BO    ICFSR1              YES
         BXLE  R5,R6,ICFSR4
         SR    R5,R5               START NEXT AT TRACK 0
         LA    R4,Q1(R4)           NEXT CYL FLAG
         LA    RCH,Q1(RCH)         NEXT CYL
***FOOTPRINT BIT 10-1 OR MORE CYLS RESTORED***
         OI    Q1(R14),Q20
         B     ICFSR2
ICFLST   EQU   *
         SR    R1,R3              GET COUNT DIFFERENT
         SR    R2,R1              SET IN R2
         LA    RM,Q16(RM)         SET FOR NEW BLOCK
         TS    ICFBFLAG
***FOOTPRINT BIT 11-1 OR MORE STORAGE BLOCKS RESTORED***
         OI    Q1(R14),Q16
         B     ICFSR6
***FOOTPRINT BIT 14-DAT END FLAGGED BY LAST STOR BLOCK***
ICFLT1   EQU   *
         OI    Q1(R14),Q2
         B     ICFLT
***FOOTPRINT BIT 15-DATA FLAGGED BY LAST CYL FLAG***
ICFLT2   EQU   *
         OI    Q1(R14),Q1
         EJECT
ICFLT    EQU   *
* * * THIS SECTION RESTORES FIRST TRACK--ADR 0 * * *
***FOOTPRINT BIT 4-DATA(LESS FIRST TRACK) RESTORED***
        OI    Q0(R14),Q8
         L     R2,ICFRADR          GET RAEDY TO MOVE
         L     R3,ICFX800          2048 BYTES
         LR    R4,R15              FROM PRESENT LOCATION
         LR    R5,R3               2048 BYTES
         MVCL  R2,R4               MOVE
         L     R15,ICFRADR         SET BASE REG TO NEW LOCATION
         B     *+4                 CHANGE
         LA    R14,ICFFOOT         KEEP FOOTPRINT HANDY
***FOOTPRINT BIT 5-PROGRAM MOVED TO DUMP WORK AREA***
         OI    Q0(R14),Q4
         LA    RM,ICFCCH           EXTENT ADR
         STCM  RM,M7,ICFSEEK+1     SET IN SEEK CCW
         LA    RM,Q2(RM)
         STCM  RM,M7,ICFSERCH+1    SET IN SEARCH CCW
         LA    RM,ICFSERCH         ADR OF SEARCH
         STCM  RM,M7,ICFTIC+1      SET IN TIC
         LA    RM,ICFCCHX          DUMMY EXTENT
         STCM  RM,M7,ICFSEEKX+1
         MVC   ICFREAD+6(Q2),ICFBPT+2 CCW COUNT
         XC    ICFREAD+1(Q3),ICFREAD+1 READ TO ADR 0
         LA    RM,ICFSDAT          SENSE
         STCM  RM,M7,ICFSENSE+1
         MVC   ICFCCHA(Q4),ICFCHSV  EXTENT FIRST TRACK
         LA    RM,ICFEINT         RE-INIT PSWS
         ST    RM,ICFMCHA
         MVC   ICFION(Q8),ICFMCH
         LA    RM,ICFDINT
         ST    RM,ICFDPSW+4
         ICM   RCW,M7,ICFPX+1      CHECK FOR PREFIX
         BZ    ICFNPX              NONE
         MVC   ICFPGNEW(Q24,RCW),ICFPGNEW MOVE PSWS IF PREFIXING
*        SPX   ICFPX               SET PREFIX
         DC    X'B210',S(ICFPX) TEMP DC FOR ASM
ICFNPX   EQU   *
         MVC   ICFPSAVE(Q24),ICFPGNEW    *SAVE PSWS
***FOOTPRINT BIT 6-RE-INITIALIZATION COMPLETE***
         OI    Q0(R14),Q2
         BAL   RBL,ICFSIO           READ
         B     ICFLTOK
         BAL   RBL,ICFERR
***FOOTPRINT BIT 25-FIRST TRACK NOT RESTORED***
         OI    Q3(R14),Q40
         LPSW  ICFBUM
         EJECT
ICFLTOK  EQU   *
***FOOTPRINT BIT 7-FIRST TRACK RESTORE COMPLETE-RESTORE COMPLETE***
         OI    Q0(R14),Q1
         LPSW  ICFGOOD
         SPACE 2
* ERROR HANDLING *
        SPACE 1
ICFERR   EQU   *
         TM    ICFSDAT,QC0        COMMAND REJECT OR INTERVENTION?
         BNZ   ICFBOMB1           YES-QUIT
         TM    ICFSDAT,Q8          DATA ERROR?
         BZ    ICFERND             NO-GO TO RETRY
         TM    ICFSDAT+2,Q40       CORRECTABLE?
         BO    ICFERC              YES-GO CORRECT
ICFERND  EQU   *
         ST    RBL,ICFRBLSV       SAVE LINK REG
***FOOTPRINT BIT 20-IN TRACK RETRY***
***FOOTPRINT BIT 23-1 OR MORE TRACKS RETRIED***
         OI    Q2(R14),Q8
         OI    Q2(R14),Q1
         LH    RCW,ICFRTCT         GET RETRY COUNT
         LA    RCW,Q1(RCW)         ADD 1
         STH   RCW,ICFRTCT         SAVE
         CH    RCW,ICFTEN          TEN RETRIES?
         BH    ICFFAIL             YES-GIVE UP ON THIS TRACK
         L     RBL,ICFCCHA         PICK FAILING TRACK
         C     RCW,ICF2           FIRST OR SECOND RETRY?
         BH    ICFSTAY            NEITHER
         BE    ICFDOWN            SECOND
         LA    RBL,Q1(RBL)        UP NEXT TRACK
         B     ICFSTAY
ICFDOWN  EQU   *
         S     RBL,ICF1           DOWN 1 TRACK
ICFSTAY  EQU   *
         ST    RBL,ICFCCHXA       SET TRACK EXTENT
         LA    RCW,ICFSEEKX       DO DUMMY SEEK
         BAL   RBL,ICFSIO0
         NOP   *                  IGNORE ERRORS
         L     RBL,ICFRBLSV
         S     RBL,ICF12
         BR    RBL                RETURN TO ORIGIN
         EJECT
ICFERC   EQU   *
         TM    ICFSDAT+1,Q1        INCOMPLETE?
         BO    ICFERND             YES-RETRY
***FOOTPRINT BIT 19-IN CORRECTABLE ERROR ROUTINE***
***FOOTPRINT BIT 22-1 OR MORE CORRECTABLE ERRORS OCCURRED***
         OI    Q2(R14),QX12
         ICM   RCW,M7,ICFSDAT+15   GET RESTART DISPLACEMENT
         LH    RZ,ICFSDAT+18       GET ERROR DISPLACEMENT
         SR    RCW,RZ              COMPUTE FORWARD DISPLACEMENT
         ICM   RZ,M7,ICFREAD+1     GET STARTING ADR
         AR    RCW,RZ              ADR OF ERROR
         L     RZ,ICFTOP           TOP OF STORAGE?
         SR    RZ,RCW              GET DIFFERENCE
         C     RZ,ICF3             LESS THAN 3?
         BNL   ICFERC1             NO
         STC   RZ,ICFXOR+1         YES-CHANGE COUNT
ICFERC1  EQU   *
ICFXOR   XC    Q0(Q3,RCW),ICFSDAT+20 CORRECT ERROR
         MVI   ICFXOR+1,Q2
         S     RBL,ICF8
         BR    RBL
         SPACE 1
* * *MAPS UNRESTORABLE TRACKS* * *
         SPACE 1
ICFFAIL  EQU   *
***FOOTPRINT BIT 24-1 OR MORE TRACKS FAILED TO RESTORE***
         OI    Q3(R14),Q80
         LH    RCW,ICFTFCT        COUNT TRACK FAILURES
         LA    RCW,Q1(RCW)        ADD  1
         STH   RCW,ICFTFCT        SAVE
         CH    RCW,ICFTEN         TEN TRACKS FAILED?
         BH    ICFBOMB4           YES-QUIT
         LA    RCW,ICFLAST        FIND SPOT TO MAP
ICFFAIL1 EQU   *
         CLI   Q0(RCW),QEE        USED SPOT?
         BE    ICFFAIL2           NO-USE IT
         LA    RCW,Q12(RCW)       YES-LOOK AT NEXT
         B     ICFFAIL1
ICFFAIL2 EQU   *
         MVC   Q0(Q4,RCW),ICFCCHA SAVE CCCCHHHH
         MVI   Q4(RCW),Q0
         MVC   Q5(Q3,RCW),ICFREAD+1 SAVE STARTING ADR
         L     RZ,Q4(RCW)
         A     RZ,ICFBPT         COMPUTE ENDING ADR
         ST    RZ,Q8(RCW)
         BR    RBL               RETURN
ICFBOMB4 EQU   *
***FOOTPRINT BIT 29-10 TRACKS FAILED TO RESTORE***
         OI    Q3(R14),Q4
         LPSW  ICFBUM
         EJECT
* * *I/O SUB-ROUTINE* * *
        SPACE 1
ICFSIO   EQU   *
***FOOTPRINT BIT 16-CURRENT-IN I/O ROUTINE***
         OI    Q2(R14),Q80
         ST    RBL,ICFRBLSV
         LA    RCW,ICFSEEK
         NI    ICFSFLAG,Q0
ICFSIO0  EQU   *
         ST    RCW,ICFCAW
ICFSIOA  SIO   Q0
         BC    BUSY,ICFSIOA       CC=2 BUSY
         BC    STAT,ICFSTIO       CC=1 STATUS STORED
         BC    NOTOP,ICFBOMB1     CC=3 NOT OPERATIONAL
ICFTIO   EQU   *
***FOOTPRINT BIT 17-GOING TO TIO***
         OI    Q2(R14),Q40
ICFTIOA  TIO   Q0
         BC    BUSY,ICFTIOA
         BC    STAT,ICFSTIO
         BC    NOTOP,ICFBOMB1
         NI    Q2(R14),Q3F
         BR    RBL
ICFBOMB1 EQU   *
***FOOTPRINT BIT 31-DEVICE NOT OPERATIVE***
         OI    Q3(R14),Q1
         LPSW  ICFBUM
ICFBOMB8 EQU   *
***FOOTPRINT BIT 28-UNIT CHECK ON SENSE***
         OI    Q3(R14),Q8
         LPSW  ICFBUM
ICFSTIO  EQU   *
         NC    ICFCSW+4(Q2),ICFENMSK ANY ENDING STATUS?
         BZ    ICFTIO             NO-LOOP UNTIL END
         TM    ICFCSW,Q4          LOGOUT PENDING?
         BO    ICFTRY             YES
         TM    ICFCSW+5,Q3F       CHANNEL ERRORS?
         BNZ   ICFTRY             YES-GO CLEAR
         TM    ICFCSW+4,Q42       UNIT CHECK-STATUS MODIFIER?
         BZ    ICFTIO             NO-CLEAR AND RETURN
         TM    ICFCSW+4,Q40       STATUS MODIFIER?
         BZ    ICFCK              NO-ASSUME UNIT CK
         B     ICFLPSWE           GO ENABLE FOR I/O INTERRUPT
         EJECT
         SPACE 3
* * * UNIT CHECK * * *
         SPACE 1
ICFCK    EQU   *
         TS    ICFSFLAG
         BM    ICFBOMB8
***FOOTPRINT BIT 18-UNIT CHECK, DOING SENSE***
         OI    Q2(R14),Q20
         LA    RBL,Q4(RBL)
         LA    RCW,ICFSENSE
         XC    ICFSDAT,ICFSDAT    CLEAR SENSE FIELD
         B     ICFSIO0
         SPACE 1
* * *THIS SECTION ENABLES CHANNELS TO CLEAR CHANNEL ERRORS* * *
***FOOTPRINT BIT 21-IN CHANNEL ERROR HANDLER***
***FOOTPRINT BIT 27-1 OR MORE CHANNEL ERRORS***
ICFTRY   EQU   *
         OI    Q2(R14),Q4
         OI    Q3(R14),Q16
         LH    RCW,ICFCECT        GET ERROR COUNT
         LA    RCW,Q1(RCW)        ADD 1
         STH   RCW,ICFCECT        SAVE
         CH    RCW,ICFTEN         TEN ERRORS?
         BNL   ICFBOMB2           YES-QUIT
ICFLPSWE EQU   *
         MVC   ICFPGNEW(Q24),ICFPSAVE    *RESTORE PSWS
         LPSW  ICFMCH            ENABLE
ICFEINT  EQU   *
         BAL   RBL,ICFTIO        GO DO TIO AGAIN
         LPSW  ICFDPSW           DISABLE
ICFDINT  EQU   *
         L     RBL,ICFRBLSV
         B     ICFSIO          GO TO SIO
ICFBOMB2 EQU   *
***FOOTPRINT BIT 30-10 CHANNEL ERRORS***
         OI    Q3(R14),Q2
         LPSW  ICFBUM
         EJECT
* * * DOUBLE WORDS, CCW S, ETC. * * *
*     *=MUST BE CONTIGUOUS
ICFSEEK  CCW   7,0,X'60',6        *
ICFSERCH CCW   X'31',0,X'60',5    *
ICFTIC   CCW   8,0,X'60',0        *
ICFREAD  CCW   6,0,X'20',0        *
ICFSENSE CCW   4,0,X'20',24
ICFSEEKX CCW   7,0,X'60',6        *
ICFREADX CCW   6,0,X'30',1        *
ICFGOOD  DC    X'0002000000000026'
ICFBUM   DC    X'0002000000000027'
ICFEPSW  DC    X'0204000000000000'
ICFDPSW  DC    D'0'
ICFPSAVE DC    3D'0'         *
         DC    H'0'               *SPACER
ICFCCH   DC    H'0'               *
ICFCCHA  DC    C'CCHH'            *
         DC    X'0100'            *
ICFCCHX  DC    H'0'               *
ICFCCHXA DC    C'CCHH'            *
         DC    X'0100'            *
* * * FULL WORDS * * *
         DS    0F
ICFPCT   DC    X'EE'               PADDING CHARACTER MVCL
         DC    AL3(ICFLAST-ICFFIRST) COUNT OF PROG
ICFX800  DC    F'2048'
ICF4095  DC    F'4095'
ICFX1000 DC    F'4096'
ICFCHSV  DC    F'0'
ICFRBLSV DC    F'0'
ICF1     DC    F'1'
ICF2    DC    F'2'
ICF3    DC    F'3'
ICF4    DC    F'4'
ICF8    DC    F'8'
ICF12   DC    F'12'
ICFENMSK DC    X'463F0000'
ICFTOP   DC    F'0'
         EJECT
         SPACE 3
* * * MISCELLANEOUS * * *
ICFFLAG  DC    F'0'                FLAGS
ICFSFLAG EQU   ICFFLAG            UNIT CHECK
ICFBFLAG EQU   ICFFLAG+1          STORAGE BLOCK
ICF1FLAG EQU   ICFFLAG+2          FIRST TRACK
ICFKFLAG EQU   ICFFLAG+3          STOR PROT
ICFTEN   DC    H'10'
ICFRTCT  DC    H'0'
ICFCECT  DC    H'0'
ICFTFCT  DC    H'0'
ICFMASK  DC    X'8040201008040200'
ICFCYFL  DC    32F'0'             * CYL FLAGS
ICFBPT   DC    F'0'               * BYTES PER TRACK
ICFRADR  DC    F'0'               * OVERLAY ADDRESS
ICFCONF  DC    32F'0'             * CONFIG MAP
ICFTRPC  DC    F'0'               * TRKS PER CYL
ICFPX    DC    F'0'
ICFRSPTC DC    100X'EE'    *******PATCH AREA*******
ICFSDAT  DC    XL24'0'            SENSE FIELD
ICFFOOT  DC    F'0'
ICFLAST  EQU   *
         DS    30F
         TITLE 'POWER WARNING FEATURE INITIALIZATION MODULE'
         DROP  R15
         DROP  RTAB
         USING ICFBIE00,R11,R12   *REESTABLISH MODULE ADDRESSABILITY
         USING ICFTIFDS,R13  *REESTABLISH ADDRESSABILITY TO WORK AREA
         USING ICFWORKA,R10  *REESTABLISH COMM.AREA ADDRESSABILITY
         SPACE 3
ICFREST  EQU   *             *SET UP FOR RESTORE
         LA    R5,ICFIOMAP   *PREPARE TO FIND AVAILABLE PATH
         LR    R8,R13        *SAVE POINTER TO OUR SAVE & WORK AREA
         LA    R13,D12(R13)  *ADJUST POINTER TO SAVE AREA FOR IOSGEN
         BAL   R14,ICFNDPTH  *GO FIND AVLBL PATH TO WARN DEVICE
         LR    R13,R8        *RESET POINTER TO OUR SAVE & WORK AREA
         XC    ICFCTRDA,ICFCTRDA  *CLEAN ICFCTRDA FIELD
         LA    R7,ICFCTRDA   *PREPARE TO CHECK RESTORE PATH
         BAL   R8,ICFSDADD   *GO CHECK PATH FOR RESTORE
         MVC   ICFSV8,ICFIOB+D35  *GET CCCCHHHH OF CNTL TRK
         L     R9,ICFSV8     *PUT IT IN R9 FOR RESTORE ROUTINE
*******************************************************************
         ESTAE 0    *CANCEL ESTAE  (LEAVING THE SYSTEM BEHIND)
*******************************************************************
         SPACE 3
*   MAKE SURE THAT THE RESTORE ROUTINE IS ALL CONTAINED               *
*   WHITHIN A 4K PAGE. IF IT CROSSES A 4K PAGE BOUNDARY               *
*   RELOCATE IT WITHIN A PAGE OVERLAYING THE INITIAL                  *
*   PART OF ICFBIF00.                                                 *
         SPACE 1
         LA    R4,ICFBRE00   *GET START OF RESTORE ROUTINE
         LR    R14,R4        *SAVE FOR LATER USE
         LR    R15,R4         SAVE FOR LATER                   @ZA00760
         LA    R6,ICFBCODE   *GET END OF CODE TO BE RELOCATED
         LR    R7,R6         *SAVE IT FOR LATER USE
         SRL   R4,D12         ALIGN TO 4K PAGE BOUNDARY        @ZA00760
         SRL   R6,D12         ALIGN TO 4K PAGE BOUNDARY        @ZA00760
         CR    R4,R6          DOES ROUTINE CROSS PAGE BOUNDARY @ZA00760
         BE    ICFNOREL      *NO, DON'T RELOCATE RESTORE ROUTINE
**********************************************************************
         OI    ICFTRMSA+D3,X80    *UPDATE FOOTPRINT TABLE***********
**********************************************************************
         LA    R4,ICFBIE00   *GET START OF MODULE
         LA    R4,D4095(R4)   ALIGN TO NEXT 4K BOUNDARY        @ZA00760
         SRL   R4,D12                                          @ZA00760
         SLL   R4,D12                                          @ZA00760
         LR    R15,R4        *SET UP BASE REGISTER FOR RESTORE
         SR    R14,R15       *COMPUTE RELOCATION FACTOR
         LA    R6,ICFBRE00   *GET START OF RESTORE ROUTINE
         SR    R7,R6         *GET LENGTH OF RESTORE ROUTINE
         LR    R5,R7         *IN BOTH LENGTH REGISTERS
         MVCL  R4,R6         *RELOCATE RESTORE ROUTINE SO THAT
*                            *IT FITS WITHIN A 2K PAGE
         SR    R11,R14       *ADJUST FIRST BASE REGISTER
         SR    R12,R14       *ADJUST SECOND BASE REGISTER
         B     ICFNOREL      *START EXECUTING RELOCATED CODE
ICFNOREL EQU   *
         SPACE 3
         LRA   R7,ICFMCIL    *GET REAL ADDR.OF STRG.CHK INNER LOOP
         BNZ   ICFLRAER      *IF ERROR GO SEND MESSAGE
         LRA   R15,D0(R15)   *RESTORE NEEDS REAL ADDRESS
         BNZ   ICFLRAER      *IF ERROR GO SEND MESSAGE
         LRA   R2,ICFCTB11   *GET REAL ADDR.OF 1ST STRG BLK FLD
         BNZ   ICFLRAER      *IF ERROR GO SEND MESSAGE
         LRA   R8,ICFMCOL    *GET REAL ADDR.OF OUTER LOOP
         BNZ   ICFLRAER      *IF ERROR GO SEND MESSAGE
         ST    R8,ICFBCPSW+D4     *SET REAL INST.ADDR.IN B.C. MODE PSW
         LA    R4,ICFBRE00   *COMPUTE DISPLACEMENT OF
         SR    R4,R11        *RESTORE ROUTINE ENTRY POINT
         LRA   R3,ICFBRE00   *GET REAL ADDRESS OF RESTORE ROUTINE E.P.
         BNZ   ICFLRAER      *IF ERROR GO SEND MESSAGE
         SR    R3,R4         *NOW BACK UP TO MODULE ENTRY POINT
         ST    R3,ICFADR4    *SAVE REAL ADDRESS OF THIS MODULE'S E.P.
         LRA   R10,D0(R10)   *GET REAL ADDR.OF COMM. AREA
         BNZ   ICFLRAER      *IF ERROR GO SEND MESSAGE
         USING PSA,R0        *ESTABLISH PSA ADDRESSABILITY
         MVC   ICFSVPIN,PINPSW  *SAVE PGM NEW PSW
         LA    R3,ICFMCR     *GET POINTER TO OUR PGM INTR ROUT
         ST    R3,PINPSW+D4  *SET IT IN PGM NEW PSW
         STOSM PINPSW,X00    *SET CURRENT SYSTEM MASK IN PGM NEW PSW
         NI    PINPSW,XFC     *DISABLE AGAINST I/O AND EXTERNALS
         STOSM ICFRSM+D1,X00 *SAVE CURRENT SYSTEM MASK FOR LATER USE
         LPSW  ICFBCPSW      *NOW SWITCH TO B.C. MODE
ICFMCOL  EQU   *
         L     R3,D0(R2)     *GET STRG ADR OF S.O.B.
         LA    R4,D4         *SET INCREMENT FOR BXLE
         L     R5,D8(R2)     *GET STRG ADR OF E.O.B.
         BCTR  R5,D0         *DON'T GO
         BCTR  R5,D0         *OUT OF
         BCTR  R5,D0         *STORAGE BLOCK
ICFMCIL  EQU   *
         L     R6,D0(R3)     *ACCESS 1 WORD OF STRG - IF STRG IS NOT
*              ONLINE A PGM CHK INTERRUPT WILL OCCUR GIVING CONTROL TO
*              ICFMCR. OTHERWISE CONTROL WILL GO TO NEXT INSTRUCTION.
         BXLE  R3,R4,D0(R7)  *KEEP SCANNING STRG BLOCK
         LA    R2,D16(R2)     *GET NEXT STRG BLK FIELD
         TM    D0(R2),XFF    *ARE WE FINISHED?
         BNO   D0(R8)        *NO, GO HANDLE NEXT STRG BLK
         SPACE 3
         L     R11,ICFADR4   *ADJUST THE BASE REGISTERS
         LA    R12,D4095(R11)     *OF THIS MODULE
         LA    R12,D1(R12)   *FOR BASIC CONTROL MODE
         MVC   PINPSW(D8),ICFPSW27     *NO PGM CHKS SHOULD OCCUR
         L     R2,ICFADR3    *GET REAL POINTER TO CSD FROM COMM.AREA
         USING CSD,R2        *ESTABLISH CSD ADDRESSABILITY
         CLI   CSDCPUOL+D1,X01    *IS MORE THAN ONE CPU ONLINE?
         BH    ICFRMPPR       *YES, GO TO MP INTERFACE PROCESSING
         TM    CSDFLAGS,CSDMP     *ARE WE ON MP SYST?
         BO    ICFCPUOK       *YES, GO SET PREFIX REGISTER TO ZERO
         B     ICFNOTMP      *NO, BYPASS MP CODE
         DROP  R2
ICFRMPPR EQU   *    *SET UP RESTORE INTFC.FOR MP
*        STAP  ICFIOMAP+D10  *STORE CPU ADDRESS
         DC    X'B212',S(ICFIOMAP+D10) *SIMULATE STAP INSTR.
         MVC   ICFIOMAP+D8(D2),ICFIOMAP+D10  *SAVE IT FOR LATER
         XI    ICFIOMAP+D11,X01   *GET OTHER CPU'S ADDRESS
         LH    R3,ICFIOMAP+D10    *SET IT IN REGISTER FOR SIGP
         SLL   R3,D2         *MULTIPLY BY 4 TO INDEX PCCA VECTOR TABLE
         L     R6,ICFADR2    *GET REAL ADDRESS OF PCCA VECTOR TABLE
         L     R6,D0(R3,R6)  *GET VIRTUAL ADDR. OF OTHER CPU'S PCCA
         SRL   R3,D2         *RESET OTHER CPU'S ADDR. FOR SIGP
         LRA   R6,D0(R6)     *GET REAL ADDR. OF OTHER CPU'S PCCA
         USING PCCA,R6       *ESTABLISH PCCA ADDRESSABILITY
         L     R6,PCCAPSAR   *GET REAL ADDRESS OF PSA
         DROP  R6
         MVC   D0(D8,R6),ICFPSW26 *PREPARE TO PUT OTHER CPU IN WAIT 026
         SR    R2,R2         *CLEAN STATUS REGISTER FOR SIGP
ICFIROCP EQU   *
*        SIGP  R2,R3,ICFSIGPR     *ISSUE 'PRGM RESET' SIGP
         DC    X'AE230008'   *SIMULATE SIGP INSTRUCTION
         BNZ   ICFIROCP      *IF NOT ACCEPTED TRY IT AGAIN
         SR    R2,R2         *CLEAN STATUS REGISTER FOR SIGP
ICFISOCP EQU   *
*        SIGP  R2,R3,ICFSIGPS     *ISSUE 'RESTART' TO OTHER CPU
         DC    X'AE230006'   *SIMULATE SIGP INSTRUCTION
         BNZ   ICFISOCP      *IF NOT ACCEPTED TRY IT AGAIN
         LH    R5,ICFIOMAP+D8     *GET ADDRESS OF OUR CPU
         LA    R4,D1         *SET MASK BIT IN R4
*        USING THE CPU ADDRESS TO INDEX THE 'PATH ON CPU' FLAGS
*        IN ICFCTRDA, SEE IF WE HAVE A PATH TO THE
         SLL   R4,D0(R5)     *RESTORE DEVICE FROM THIS CPU
         EX    R4,ICFTMINS   *DO WE HAVE A PATH FOR RESTORE ON THIS CPU
         BO    ICFCPUOK      *YES, WE ARE NOW READY TO RESTORE
         MVC   D0(D8,R6),ICFBCPSW *SET RESTART PSW FOR OTHER CPU
         MVI   D7(R6),X8C    *SET INSTR.ADDR. IN RESTART PSW
         XC    D4(D3,R6),D4(R6)   *CLEAN REST OF INSTR.ADDR.
         MVC   X8C(D12,R6),ICFRSCOD    *SET RESTART CODE FOR OTHER CPU
         STM   R10,R12,X80(R6)    *SAVE BASE REGISTERS IN OTHER PSA
         STM   R13,R9,ICFIOMAP+D12     *SAVE OTHER GPR'S IN COMM.AREA
         SR    R2,R2         *CLEAR STATUS REGISTER FOR SIGP
ICFROCPU EQU   *
*        SIGP  R2,R3,ICFSIGPR  *ISSUE 'PRGM RESET' TO OTHER CPU
         DC    X'AE230008'   *SIMULATE SIGP INSTRUCTION
         BNZ   ICFROCPU      *IF NOT ACCEPTED TRY IT AGAIN
         SR    R2,R2         *CLEAR STATUS REGISTER FOR SIGP
ICFSOCPU EQU   *
*        SIGP  R2,R3,ICFSIGPS     *ISSUE 'RESTART' TO OTHER CPU.
         DC    X'AE230006'   *SIMULATE SIGP INSTRUCTION
         BNZ   ICFSOCPU      *IF NOT ACCEPTED TRY IT AGAIN
*
*        AT THIS POINT THE OTHER CPU (WHICH HAS A PATH TO THE
*        RESTORE DEVICE) WILL LOAD ITS GPR'S FROM WHERE WE
*        JUST SAVED THEM AND BRANCH TO ICFCPUOK TO ENTER THE
*        RESTORE ROUTINE.
*
         LPSW  ICFPSW26  *THIS CPU WILL GO TO THE WAIT STATE (CODE 026)
         SPACE 3
ICFCPUOK EQU   *             *WE ARE NOW RUNNING ON THE RIGHT CPU
*        SPX   ICFBCPSW      *SET PREFIX REGISTER TO ZERO
         DC    X'B210',S(ICFBCPSW)  *SIMULATE SPX INSTRUCTION
ICFNOTMP EQU   *
         BR    R15           *GO TO RESTORE IN B.C.MODE & DISABLED
         SPACE 3
ICFMCR   EQU   *             *CONTROL WILL BE GIVEN TO THIS CODE IF
*              DURING A STORAGE SCAN A PROGRAM INTERRUPT OCCURRED.
*              THIS MEANS THAT WE DON'T HAVE THE SAME REAL STORAGE
*              CONFIGURATION AS AT THE TIME OF DUMP. THIS SECTION WILL
*              NOTIFY THE OPERATOR AND GO TO WAIT STATE (CODE 027).
         MVC   PINPSW(D8),ICFSVPIN     *RESTORE PGM NEW PSW
ICFRSM   STOSM ICFSVPIN,X00  *RESET ORIGINAL SYSTEM MASK (ENABLED)
         LA    R1,ICFISCMS   *GET MSG POINTER
         WTO   MF=(E,(R1))   *SEND 'INVALID STRG CONFIG' MSG
         B     ICFWAITR      *GO QUIT WITH WAIT 027
         SPACE 3
ICFLRAER EQU   *             *LRA INSTRUCTION FAILED
         LA    R1,ICFLRAMS   *GET MESSAGE POINTER
         WTO   MF=(E,(1))    *SEND 'LRA ERROR' MESSAGE
         SPACE 1
ICFWAITR EQU   *
         LA    R1,ICFREIPL   *SEND REIPL MESSAGE
         WTO   MF=(E,(1))
         STIMER WAIT,BINTVL=CFBI20S    *GIVE MSG TIME TO BE DISPLAYED
         LPSW  ICFPSW27      *LOAD DISABLED WAIT PSW (CODE 027)
         SPACE 5
ICFRSCOD EQU   *             *RESTART CODE TO BE MOVED TO OTHER PSA
         LM    R10,R12,X80(R0)    *INITIALIZE BASE REGISTERS
         LM    R13,R9,ICFIOMAP+D12     *INITIALIZE OTHER GPR'S
         B     ICFCPUOK      *GO TO RESTORE ROUTINE
*        END OF THE RESTART CODE TO BE MOVED TO OTHER PSA
ICFTMINS TM    ICFCTRDA+D1,X00    *IS PATH ON THIS CPU AVAILABLE
ICFSIGPR EQU   X08           *SIGP CODE FOR PROGRAM RESET
ICFSIGPS EQU   X06           *SIGP CODE FOR RESTART
         SPACE 5
ICFSVPIN DC    D'0'          *SAVE AREA FOR PGM NEW PSW
ICFBCPSW DC    D'0'          *PSW USED TO SWITCH TO B.C. MODE
ICFPSW27 DC    X'0002000000000027'  *DISABLED WAIT PSW (CODE 027)
ICFPSW26 DC    X'0002000000000026'  *SUCCESSFUL COMPLETION PSW
CFBI20S  DC    F'300'        *3 SECS IN BINARY INTERVALS
ICFREIPL WTO   'ICFTIM98 CORRECT PROBLEM AND RE-IPL',                  C
               DESC=2,ROUTCDE=(1),MF=L
ICFISCMS WTO   'ICFTIM97 INVALID STORAGE CONFIGURATION FOR RESTORE',DESC
               C=2,ROUTCDE=(1),MF=L
ICFLRAMS WTO   'ICFTIM96 ERROR DURING EXECUTION OF LRA INSTRUCTION',DESC
               C=2,ROUTCDE=(1),MF=L
ICFBCODE EQU   *             *END OF CODE TO BE RELOCATED
         DROP  R10
         DROP  R11
         DROP  R12
         DROP  R13
         TITLE 'ICFBIX50 - DUMMY USER EXIT ROUTINE FOR PWF'
***********************************************************************
*                                                                     *
*  THIS MODULE IS PART OF THE POWER WARNING FEATURE SUPPORT.          *
*                                                                     *
* FUNCTION-IMMEDIATELY RETURN CONTROL TO THE CALLING MODULE           *
*          WHEN THE USER DOES NOT SUPPLY HIS EXIT ROUTINE.            *
*                                                                     *
***********************************************************************
         SPACE 5
ICFBIE50 EQU  *
         USING ICFBIE50,R15  *ESTABLISH ADDRESSABILITY FOR USER EXIT
         SR    R15,R15        .SET RETURN CODE TO ZERO
         BR    R14            RETURN TO CALLER
         DROP  R15
         TITLE 'POWER WARNING FEATURE INITIALIZATION MODULE'
         END
