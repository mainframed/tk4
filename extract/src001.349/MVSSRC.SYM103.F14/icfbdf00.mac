ICFBDF00 TITLE 'MCH APPENDAGE && DUMP ROUTINE FOR PWF'
ICFBDE00 CSECT 0
* MODULE NAME...
*        ICFBDF00
*
* FUNCTIONS...
*         ICFBDF00 SERVES AS PART OF THE SOFTWARE SUPPORT FOR
*         THE POWER WARNING FEATURE. IT HAS THREE MAJOR SECTIONS:
*         THE APPENDAGE ROUTINE, THE USER ROUTINE, AND THE DUMP
*         ROUTINE. THE FUNCTIONS OF EACH ARE LISTED BELOW.
*          A. APPENDAGE ROUTINE
*             1. RECEIVE CONTROL FROM MCH VIA CALL
*             2. DETERMINE WHETHER FUNCTION IS IMPLEMENTED.
*             3. DETERMINE WHETHER CONDITIONS WARRANT AN
*                IMMEDIATE DUMP.
*             4. DETERMINE IF THIS IS A TRANSIENT WARNING.
*             5. IF DUMP CONDITIONS DON'T EXIST, TO RETURN
*                TO THE MCH IN AN APPROPRIATE MANNER.
*             6. IF DUMP CONDITIONS DO EXIST, TO GIVE CONTROL TO A
*                USER ROUTINE WHICH IS PHYSICALLY PART OF
*                THIS MODULE.
*             7. TO EXAMINE USER RETURN CODE, AND RETURN TO
*                MCH IF NECESSARY.
*             8. TO CLEAR PATHS TO THE DUMP DEVICES BY STOPPING
*                ALL I/O ACTIVITY ON EACH CHANNEL ON A PATH TO A
*                DUMP DEVICE.
*             9. TO GIVE CONTROL TO THE DUMP ROUTINE.
*
*          B. USER ROUTINE
*             1. TO PROVIDE THE USER WITH A MEANS OF DOING
*                SOME HOUSE CLEANING BEFORE DUMPING, OR OF AVOIDING
*                DUMPING MEMORY.
*
*          C. DUMP ROUTINE
*             1. TO CREATE AN IMAGE OF STORAGE ON AN EXTERNAL
*                DIRECT ACCESS DEVICE.
*                ( SEE COMMENTS ON PAGE PRECEEDING LOCATION
*                LABELLED ICFBDE99)
*
*
* ATTRIBUTES...
*        PERMANENTLY RESIDENT, SERIALLY REUSABLE, SUPERVISOR
*         MODE, AND USES PRIVILEGED INSTRUCTIONS.
*
*
* ENTRY POINTS...
*         ICFBDE00--ENTERED EITHER FROM MAIN LINE OF MCH BY
*                   A CALL, OR FROM THE UNEXPECTED ERROR
*                   HANDLER (SHUT) BY CALL.
*
* EXITS...
*
*       EXITS TO DISABLED WAIT STATE (CODE 26)...
*         1. SUCCUSSFULCOMPLETION OF DUMP.
*
*         EXITS TO DISABLED WAIT STATE (CODE 27)...
*         1. MISSING INTERRUPT DURING I/O CLEAR ROUTINE IN THE
*            APPENDAGE.
*         2. FAILURE TO COMPLETE DUMP ONCE DUMP WAS ENTERED.
*
*       EXIT TO THE MCH...
*       1. FUNCTION WAS NOT INITIALIZED (VIA BR 14).
*       2. FUNCTION INOPERATIVE (VIA BR 14).
*         3. TRANSIENT WARNING
*         4. USER RETURNED CODE OF 4
*
*
* INPUTS...
*         A. FOR ENTRY VIA ICFBDE00
*          1. R0  HAS ENTRY CODE (0 FOR NORMAL ENTRY, 4 FROM SHUT)
*            2. R14 POINTS TO RETURN POINT
*            3. R15 POINTS TO MY ENTRY POINT
*            4. EC MODE
*            5. MCIC (LOC XE8)
*
*
* OUTPUTS...
*         1. FOR RETURN TO MCH, ENVIRONMENT IS RESTORED EXCEPT
*            FOR SOME NONESSENTIAL LOGOUT FIELDS.
*          A. R15 = 0 IMPLIES CR14B7 SHOULD BE SET 0
*          B. R15 = 4 IMPLIES CR14B7 SHOULD BE SET 1
*         2. FOR USER ROUTINE, R15IS ITS ENTRY POINT, R14 IS
*            ITS RETURN ADDRESS, AND R13 POINTS TO A REGISTER
*            SAVE AREA.
*         3. FOR DUMP ROUTINE, R13 HAS WORK AREA POINTER, R15
*            ITS ENTRY POINT, CR0BIT0=0,CR2=FFFFFFFF,CR14=
*            00000000, AND PSW IS DISABLED, SUPERVISOR MODE,
*            AND KEY ZERO.
*         4. MAINTAIN A FOOTPRINT TABLE, TRACKING CONTROL FLOW
*            THROUGH THE APPENDAGE.
*
*
* TABLES AND WORK AREAS
*       PWF WORK AREA - MAPPED BY ICFWORK
*
*
* REGISTER CONVENTIONS
*          R9-- PWF WORK AREA POINTER
*          R10-- CVT BASE
*          R12-- ICFBDF00 BASE
*          R13-- SAVE AREA POINTER
*          R14-- RETURN ADDRESS
*          R15-- ENTRY ADDRESS (IF THROUGH ICFBDE00)
*
*
* STATUS...
*         APARS FIXED @ZA00508, @ZA00509, @ZA00510
*
         EJECT
CR1      EQU   1
CR0      EQU   0
CR2      EQU   2
CR14     EQU   14
CR15     EQU   15
         SPACE 2
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
W0       EQU   0
W1       EQU   1
W2       EQU   2
W3       EQU   3
W4       EQU   4
W5       EQU   5
W6       EQU   6
W7       EQU   7
W8       EQU   8
         EJECT
*        DECIMAL EQUATES
D0       EQU   0
D1       EQU   1
D2       EQU   2
D3       EQU   3
D4       EQU   4
D5       EQU   5
D6       EQU   6
D7       EQU   7
D8       EQU   8
D9       EQU   9
D10      EQU   10
D12      EQU   12
D13      EQU   13
D16      EQU   16
D20      EQU   20
D24      EQU   24
D23      EQU   23
D26      EQU   26
D27      EQU   27
D28      EQU   28
D232     EQU   232
D244     EQU   244                 MCHAPNDG COMMON PTR DISPLACEMENT
D256     EQU   256
D380     EQU   380                 CVT DISP OF WORK AREA PTR IN VS1
D488     EQU   488
         EJECT
*        HEXADECIMAL EQUATES
X00      EQU   X'00'
X01      EQU   X'01'
X02      EQU   X'02'
X04      EQU   X'04'
X08      EQU   X'08'
X0C      EQU   X'0C'
X0F      EQU   X'0F'
X10      EQU   X'10'               CVTPTR ADDR
X20      EQU   X'20'
X22      EQU   X'22'
X26      EQU   X'26'
X27      EQU   X'27'
X30      EQU   X'30'               MC OPSW LOC
X3F      EQU   X'3F'
X40      EQU   X'40'
X50      EQU   X'50'
X68      EQU   X'68'               PGM NPSW LOC
X70      EQU   X'70'               MC NPSW LOC
X72      EQU   X'72'
X78      EQU   X'78'
X7F      EQU   X'7F'
X80      EQU   X'80'
X88      EQU   X'88'
X90      EQU   X'90'
X98      EQU   X'98'
XAF      EQU   X'AF'
XBF      EQU   X'BF'
XC0      EQU   X'C0'
XD8      EQU   X'D8'               DISP OF CTLREGS IN MCHINLOG SV AREA
XE8      EQU   X'E8'               MCIC LOCATION
XFD      EQU   X'FD'
XFE      EQU   X'FE'
XFF      EQU   X'FF'
X100     EQU   X'100'
X180     EQU   X'180'              DISP OF GPR SAVE AREA IN PSA
X1C0     EQU   X'1C0'              DISP OF CR SAVE AREA IN PSA
XA02     EQU   X'A02'
XBFF     EQU   X'BFF'
         EJECT
*        MISCELLANEOUS EQUATES
CAW      EQU   X'48'
CSW      EQU   X'40'
EXOPSW   EQU   X'18'         EXTERNAL OLD PSW
MCOPSW   EQU   X'30'
IOOPSW   EQU   X'38'
EXNPSW   EQU   X'58'         EXTERNAL NEW PSW
PGNPSW   EQU   X'68'
MCNPSW   EQU   X'70'
IONPSW   EQU   X'78'
MCIC     EQU   X'E8'
SENSE    EQU   X'01'         EQUATE FOR SIGP SENSE CODE
PRGRST   EQU   X'08'         EQUATE FOR SIGP PROGRAM RESET CODE
RESTART  EQU   X'06'         EQUATE FOR SIGP RESTART CODE
RC0      EQU   0                   NORMAL RETURN, TRANSIENT WARNING
RC4      EQU   4                   HARD CHECK W/ NO CONCURRENT WARNING
RC8      EQU   8
RC12     EQU   12
RC16     EQU   16                  FUNCTION INOPERATIVE
         EJECT
ICFBDE00 CSECT 0
ICFTDE00 EQU   ICFBDE00
         ENTRY ICFEND
         ENTRY ICFEXT50,ICFEXT99
         SPACE 3
         TS    ICFEFLAG-ICFBDE00(R15)  TEST ENTRY FLAG
         BCR   D4,R15        IF SET, LOOP; R15 PTS TO ICFBDE00
         TM    ICFMFLGA-ICFBDE00(R15),ICF2CPUT  TEST FOR 2ND CPU THRU
         BNO   ICF1CPUI-ICFBDE00(R15)  IF SET, INIT 2ND CPU
         SPACE
*        FROM HERE, ONLY THE 2ND CPU EXECUTES THE FOLLOWING CODE.
         SPACE
         OI    ICFMFLGA-ICFBDE00(R15),ICF2CPUA  SET SECOND CPU ACTIVE
         LPSW  ICF2CPSW-ICFBDE00(R15)  DISABLE FOR MCI'S
ICF2CMCO EQU   *
         STM   R0,R15,ICF2CGRS-ICFBDE00(R15)  SAVE 2ND CPU'S REGISTERS
         LR    R12,R15       SET UP BASE REG
         USING ICFBDE00,R12
         STCTL CR0,CR15,ICF2CCRS  SAVE SECOND CPU'S CTLRS
         MVC   ICFCR02F(D4),ICFCR0MK   MOVE IN CR0 MASK
         NC    ICFCR02F(D4),ICF2CCRS   'AND' IT WITH CPU2'S CR0
         OI    ICFCR02F+D2,X80    TURN ON MALFUNCTION ALERT MASK
         LCTL  CR0,CR0,ICFCR02F   INIT. CR0
         MVC   ICF2CEOP(D8),EXOPSW     SAVE 2ND EXOPSW
         MVC   ICF2CENP(D8),EXNPSW     SAVE 2ND EXNPSW
         MVC   EXNPSW(D8),ICFEXPSW     SET UP 2ND EXNPSW
         STOSM ICFMWORK,X01  ENABLE FOR EXTERNALS
         B     ICFDMPLL      GO TO DUMP LOCK LOOP
         EJECT
ICF1CPUI EQU   *
         STM   R0,R15,ICFRDISP(R15) SAVE HIS REGS WHERE THEY WON'T
*                                  FOUL UP ANYTHING IN WARNA OR MCH
         LR    R12,R15             COPY MY BASE REG
         USING ICFTDE00,R12        NOW CHANGE BASE
         OI    ICFMFLGA,ICF2CPUT  SET SECOND CPU SIGNAL
         MVI   ICFEFLAG,X00  RELEASE SECOND CPU
         LA    R3,ICFSHENV         COPY SAVE AREA PTR
         SPACE 3
         L     R10,X10             LOAD CVT PTR
         USING ICFCVTOR,R10
         USING ICFWORKA,R9
         SR    R15,R15             INIT RETURN CODE            @ZA00508
         TM    CVTVOLF2,CVTVOLI2   TEST FOR FUNCTION NOT INITIALIZED
         BO    ICFWNOFF            RETURN TO MCH WITH R15 = 0  @ZA00508
         L     R9,CVTVOLF2         GET WORK AREA PTR FOR VS2 & MVT
         DROP  R10
         SPACE 3
         LRA   R9,D0(R9)     GET REAL ADDR OF ICFWORK
         BNZ   ICFWAT27
         ST    R9,ICFREALW   SAVE REAL ADDR OF ICFWORK
         EJECT
* SET UP MP FLAGS
         USING CSD,W8
         L     W8,ICFADR3    GET REAL ADDR OF CSD
         TM    CSDFLAGS,CSDMP     TEST FOR MP SYSTEM
         DROP  W8
         BNO   ICFNOMP
         OI    ICFMFLGA,ICFMPSYS  SET MP SYSTEM FLAG
ICFNOMP  EQU   *
         SPACE 3
         XC    ICFTRMCA(D4),ICFTRMCA  ZAP FOOTPRINT TABLE
         OI    ICFTRMCA,X80   SET FUNCTION ENTERED BIT
         SPACE 3
         LTR   R0,R0         TEST FOR 0 ENTRY CODE
         BNZ   ICFNTC4S      IF NOT, SKIP CR14 TEST
         TM    X1C0+CR14*D4,X01 TEST CR14 STORED AT INTERRUPT
*                               FOR BIT 7 OFF.
         BNO   ICFINOPR       IF NOT ENABLED FOR WARNING,QUIT
*        THIS CAN HAPPEN ON SOME MACHINES WHEN THE WARNING
*        BIT COMES ON AS THE RESULT OF ANOTHER INTERRUPT.
         SPACE 3
ICFNTC4S EQU   *
         LA    R13,ICFSAVE         GET SAVE AREA PTR
         ST    R3,D4(R13)          SAVE BACKWARD SAVE PTR
         TM    ICFFLAGA,X80        TEST FOR FUNCTION INOPERATIVE
         BZ    ICFENABL            CONTINUE IF NOT DISABLED
         OI    ICFTRMCA,X40   FUNCTION INOP BIT IS SET
         B     ICFINOPR            IF NOT OPERATIVE,RETURN TO PROG
         EJECT
*        COMPLETE SAVING ENVIRONMENT,ENABLE FOR MCI,RETURN ON TRANSIENT
ICFENABL EQU   *
         OI    ICFTRMCA,X20  TURN ON FUNCTION IS OPERATIVE
         SPACE
         MVC   ICF1CEOP(D8),EXOPSW     SAVE MCH'S EXTRN OPSW
         MVC   ICF1CENP(D8),EXNPSW     SAVE MCH'S EXTRN NPSW
         MVC   EXNPSW(D8),ICFEXPSW     SET UP MY EXTERNAL NPSW
         SPACE
         STCTL CR0,CR0,ICFCR01S   SAVE CR0
         MVC   ICFCR0FX(D4),ICFCR0MK   SET UP CR0 MASK
         NC    ICFCR0FX(D4),ICFCR01S   'AND' IT W/ CR0
         OI    ICFCR0FX+D2,X80    TURN ON MALFUNCTION ALERT MASK
         LCTL  CR0,CR0,ICFCR0FX   SET UP CTLR0
         SPACE
         L     W8,ICFMCPSW   LD MC DISABLED PSW
         ST    W8,ICFIOPSW   CLEAR FIRST WORD OF NEW PSW
         LA    W8,ICFIMCOF   GET SET FOR NEW PSW ADDR FIELD
         ST    W8,ICFIOPSW+D4          SAVE IT
         LPSW  ICFIOPSW      NOW DISABLE FOR MCI'S
ICFIMCOF EQU   *
         EJECT
*  SET UP MC PSWS AND CR14
         SPACE
         MVC   ICFMCOPS(D8),MCOPSW     SAVE MC OPSW
         MVC   ICFSNMCP(D8),MCNPSW     SAVE MC NPSW
         MVC   MCNPSW(D8),ICFMCPSW     SET UP MC NPSW
         SPACE
         STCTL CR14,CR14,ICFCR0FX      GET CTLR14
         OI    ICFCR0FX,X01  TURN ON WARNING MASK
         LCTL  CR14,CR14,ICFCR0FX      RESET CR14 W/ WARNING ON
         SPACE 3
         LR    W8,R0         COPY ENTRY CODE
         B     ICFENBTL(W8)  INDEX ENTRY BRANCH TABLE
ICFENBTL EQU   *
         B     ICFNRMEN      R0=0, GO TO NORMAL ENTRY PROCESSING
         B     ICFSHTEN      R0=4, GO TO SHUT ENTRY PROCESSING
         SPACE 3
ICFNRMEN EQU   *
         STCK  ICFTOD00            SAVE TOD CLOCK
         MVC   ICFCTST(D8),ICFTOD00 COPY START TIME
         BNZ   ICFCOMIT            COMMIT TO DUMP ON CLOCK FAILURE
         OI    ICFTRMCA,X10   1ST CLOCK OK
         TM    MCIC,XC0            TEST FOR SYS OR INSTR PROC DAMAGE
         BNZ   ICFCOMIT            IF ONE OR BOTH IS ON, COMMIT TO
*                                  DUMP BECAUSE OF CONCURRENT HARD MC
         TM    ICFFLAGA,X40        TEST FOR DUMP IMMEDIATE
         BO    ICFCOMIT
         OI    ICFTRMCA,X08   DUMP IMMEDIATE IS OFF
         EJECT
*        CALCULATE STOP TIME
         LA    W6,D1               LOAD CARRYBINCREMENT
         L     W7,ICFTOD00         LOAD H.O. HALF OF START TIME
         L     W8,ICFTOD00+D4      LOAD L.O. HALF OF START TIME
         AL    W8,ICFTME01+D4      ADD L.O. HALF OF INTERVAL
         BC    D12,ICFNOCRY        TEST FOR NO CARRY
         AR    W7,W6               INCREMENT H.O. PART ON CARRY
ICFNOCRY EQU   *
         A     W7,ICFTME01         ADD H.O. PART OF INTERVAL
         ST    W7,ICFTOD99         SAVE H.O. PART OF STOP TIME
         ST    W8,ICFTOD99+D4      SAVE L.O. PART OF STOP TIME
         SPACE 3
ICFMCKLP EQU   *
         LPSW  ICFTSTWN            TEST FOR HARD MACHINE CHECK
ICFNOMCK EQU   *
         LPSW  ICFMCOFF            TEMP. POWER FLUCTUATION, SO RETURN
*                                  AND MASK OFF MC'S
ICFNOMC1 EQU   *             NOTE- THIS STATEMENT MUST FOLLOW LPSW
         OI    ICFTRMCA,X02   TRANSIENT WARNING
         LA    R15,X04       SET RETURN CODE
         B     ICFNORMR      GO TO NORMAL RETURN
         SPACE 3
ICFUSRTN EQU   *
         OI    ICFTRMCA+D1,X08         USER RETURN CODE = 4
         OI    ICFFLAGA,X20  SET USER RC = 4 BIT IN FLAGA
         XR    R15,R15       SET RETURN CODE
         B     ICFNORMR      GO TO NORMAL RETURN
ICFSHRTN EQU   *
         XR    R15,R15       SET RETURN CODE FOR RETURN TO SHUT
ICFSHRT1 EQU   *
         OI    ICFTRMCA+D1,X04         SET RETURN TO SHUT BIT
         B     ICFNORMR      GO TO NORMAL RETURN
         EJECT
ICFMCKON EQU   *
         STCK  ICFTOD01            GET CURRENT TIME
         BNZ   ICFCOMIT            TEST FOR CLOCK FAILURE +
*                                  COMMIT IF BAD
         CLC   ICFTOD01(D8),ICFTOD99  COMPARE CLOCK TO END
         BNL   ICFCOMI1       COMMIT TO DUMP IF END
         TM    XE8+D1(R0),X80      TEST FOR MCIC WARNING (BIT 8)
         BO    ICFTCNCR            ON WARNING, GO TO CONCURRENCY TEST
         B     ICFCOMIT            IF NO WARNING, MUST HAVE BEEN A
*                                  HARD ERROR SO COMMIT TO DUMP
         EJECT
ICFNORMR EQU   *
         MVC   MCOPSW(D8),ICFMCOPS     RESET MC OLD PSW
         MVC   MCNPSW(D8),ICFSNMCP     RESET MC NEW PSW
         STNSM ICFMWORK,XFE  TURN OFF EXTERNALS
         MVC   EXOPSW(D8),ICF1CEOP     RESET EXT OPSW
         MVC   EXNPSW(D8),ICF1CENP     RESET EXT NPSW
         LCTL  CR0,CR0,ICFCR01S   RESET CR0
         B     ICFRTNCN      GO CONTINUE RETURN
         SPACE
ICFINOPR EQU   *
         XR    R15,R15       ZERO RETURN CODE
         SPACE
ICFRTNCN EQU   *
         OI    ICFTRMCA,X01  RETURN TO MCH
ICFWNOFF EQU   *                                               @ZA00508
* 2 LINES OF CODE DELETED HERE                                 @ZA00509
         TS    ICFEFLAG      HAS SECOND CPU ENTERED?
         BC    D8,ICFNMPRN   IF ZERO,RESET FLAGS AND RETURN
         SPACE
ICFWTCIL EQU   *
         TM    ICFMFLGA,ICFCPUIL  IS SECOND CPU IN LOOP?
         BNO   ICFWTCIL      IF NOT, WAIT TIL IT IS
         STM   R0,R15,ICFRSTSG    SAVE GPRS
         STCTL CR0,CR15,ICFRSTSC  SAVE CONTORL REGS
         XC    ICFSTPSW(D4),ICFSTPSW   CLEAR FLAGS
         LA    W8,ICF2CRTN
         ST    W8,ICFSTPSW+D4     SET UP SHTAP PSW
         MVI   ICFDMPLK,X00  RELEASE OTHER CPU
         SPACE
ICFLOKW1 EQU   *
         TM    ICFDMPLK,XFF  HAS OTHER CPU RELEASED?
         BNO   ICFLOKW1      IF NOT, WAIT TIL IT DOES
         SPACE
ICFNMPRN EQU   *
         XR    W8,W8
         STC   W8,ICFMFLGS   RESET FLAGS
         STH   W8,ICFMFLGS+D2     RESET FLAGS
         LCTL  CR0,CR0,ICFCR01S   RESTORE CR0
         STCTL CR14,CR14,ICFCR0FX      TURN OFF WARNING MASK
         NI    ICFCR0FX,XFE
         LCTL  CR14,CR14,ICFCR0FX
         MVC   ICFIOPSW(D4),ICFTSTWN   SET UP PSW TO ENABLE FOR MC'S
         LA    W8,ICFRENAB   SET UP ADDR OF ENABLE PSW
         ST    W8,ICFIOPSW+D4          SAVE IT
         LPSW  ICFIOPSW      LOAD ENABLE PSW
ICFRENAB EQU   *
         LM    R0,R14,ICFRDISP(R12)    RESTORE REGS
         BR    R14           RETURN
         EJECT
ICF2CRTN EQU   *
*
*        NOTE R15 CONTAINS RETURN CODE
*
         LCTL  CR0,CR15,ICF2CCRS  RESTORE CTLRS
         MVC   EXOPSW(D8),ICF2CEOP     RESET EXT OPSW
         MVC   EXNPSW(D8),ICF2CENP     RESET EXT NPSW
         MVC   ICFSTPSW(D4),ICFTSTWN   PSW SET FOR EC,^DAT,AND MC'S
         LA    W8,ICF2CENB
         ST    W8,ICFSTPSW+D4
         LPSW  ICFSTPSW
ICF2CENB EQU   *
         LM    R0,R14,ICF2CGRS
         BR    R14           RETURN TO MCH
         EJECT
*        TEST FOR CONCURRENT HARD MACHINE CHECK
ICFTCNCR EQU   *
         TM    MCIC,XC0            TEST FOR SYS OR INSTR PROC DAMAGE
         BC    D5,ICFCOMIT         BRANCH ON NOT ZERO
         B     ICFMCKLP            IF NO OTHER HARD MC, DO IT AGAIN
         EJECT
ICFSHTEN EQU   *
         OI    ICFTRMCA,X04         SET ENTRY VIA SHUT FLAG
         LA    R15,X04       SET RETURN CODE
         TM    ICFFLAGA,X20  TEST FOR USER RC = 4
         BO    ICFSHRTN      IF ON, RETURN W/ RC=0
         XR    W8,W8         CLEAR REG
         ST    W8,MCNPSW     DISABLE MCNPSW
         ST    W8,ICFDOUBL   DISABLE DISABLE PSW
         LA    W8,ICFSHTST
         ST    W8,ICFIOPSW+D4
         LA    W8,ICFSHWON
         ST    W8,MCNPSW+D4
         LA    W8,ICFSHRT1
         ST    W8,ICFDOUBL+D4  POINT DIABLE PSW TO SKIP RC RESET
         MVC   ICFIOPSW(D4),ICFTSTWN   ENABLE FOR MC'S
         STCK  ICFTOD00      SAVE TIME
         MVC   ICFCTST(D8),ICFTOD00  COPY IT
         LPSW  ICFIOPSW      TEST FOR WARNING
ICFSHTST EQU   *
         LPSW  ICFDOUBL      NO WARNING,SO DISABLE & RETURN
         EJECT
*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
*        PROVIDE A USER EXIT AND DETERMINE
*        THE AVAILABLE PATH TO THE DUMP DATA SET
*        WE ARE NOW COMMITED TO DUMP, SO MCH ENVIRONMENT IS
ICFCOMI1 EQU   *
         OI    ICFTRMCA+D1,X80     COMMIT TO DUMP DUE TO HARD WARNING
*        NO LONGER A PROBLEM
ICFCOMIT EQU   *
         L     R15,ICFEXT50        LOAD ADDR OF USER EXIT
*        !!!!!  WARNING  !!!!!
*        ALL I/O ACTIVITY IS IMMEDIATELY HALTED IN THE FOLLOWING
*        CODE, SO MAKE SURE THE USER ROUTINE'S I/O IS ALL FINISHED
*        BEFORE MAKING A RETURN !!!!!!!
*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
         OI    ICFTRMCA+D1,X40     SET USER ROUTINE ENTERED BIT
         BALR  R14,R15             LINK TO USER ROUTINE
         EJECT
*        USER 'EXIT RETURNS HERE
         B     ICFUSRRC(R15)       INDEX THE BRANCH WITH THE USER RC
ICFUSRRC EQU   *
         B     ICFDMPCN            IF 0 CONTINUE WITH DUMP
         B     ICFUSRTN            GO RETURN TO MCH
         SPACE 3
ICFDMPCN EQU   *
         OI    ICFTRMCA+D1,X20  USER RC = 0
ICFSHWON EQU   *
         OI    ICFMFLGA,ICFCTDST  SIGNAL COMMIT TO DUMP
         USING CSD,W8
         L     W8,ICFADR3    SET UP CSD BASE
         TM    CSDFLAGS,CSDMP     TEST FOR MP SYSTEM
         BNO   ICFNOTMP      GO HANDLE 2ND CPU NOT AVAILABLE CASE
         TM    ICFMFLGA,ICFCPUIL  TEST FOR CPU IN DUMP LOCK LOOP
         BO    ICF2CAVL      IF SO, GO TO 2ND CPU AVAIL CASE
         SPACE 3
*  IF SECOND CPU ISN'T IN LOOP, MUST RESTART IT.
*        STAP  ICFCPUAD      STORE PHYS ADR OF PROCESSOR
         DC    X'B212'       'STAP' OP CODE
         DC    S(ICFCPUAD)   ADDRESS
         XI    ICFCPUAD+D1,X01    FORM OTHER CPU'S ADDR
         L     W6,ICFWCPUA   PUT IN REG
         L     W7,ICFCPUMK   GET CPU MASK CONSTANT
         SRL   W7,D0(W6)     FORM MASK FOR OTHER CPU
         N     W7,CSDCPUAL   HAND' W/ CPU ACTIVE FIELD
         BZ    ICFNOTMP      IF ZERO, IT ISN'T AVAILABLE
         DROP  W8
         LR    W8,W6         COPY OTHER CPU'S ADDR
         XR    W7,W7         CLEAR STATUS REG
         EJECT
*        SIGP  W7,W8,SENSE   ISSUE SIGP SENSE TO OTHER CPU (X01)
         DC    X'AE78'       'SIGP' OP CODE,R1,R3
         DC    S(SENSE)      ADDRESS (SIGP COMMAND CODE)
         BNZ   ICFNOTMP      QUIT ON NON-ZERO RELEASE FROM SENSE
         SPACE
*        SIGP  W7,W8,PRGRST  ISSUE SIGP PROGRAM RESET (X08)
         DC    X'AE78'       'SIGP' OP CODE, R1, R3
         DC    S(PRGRST)     ADDRESS (SIGP COMMAND CODE)
         BNZ   ICFNOTMP      QUIT ON NON-ZERO RELEASE
ICFTRSTC EQU   *
         SPACE
*        SIGP  W7,W8,SENSE   ISSUE SENSE TO DETERMINE COMPLETION (X01)
         DC    X'AE78'       'SIGP' OP CODE, R1, R3
         DC    S(SENSE)      ADDRESS (SIGP COMMAND CODE)
         BC    D2,ICFTRSTC   CC=2,BUSY,GOT TEST AGAIN
         BC    D9,ICFNOTMP   CC=0,3,UNEXPECTED, SO QUIT
         SPACE
*  CC=1, STATUS RETURNED, CHECK FURTHER
         LA    W6,X40        SET BIT 25 IN W6
         CLR   W7,W6         TEST FOR BIT 25 (STOPPED) ON ALONE
         BNE   ICFNOTMP      IF NOT STOPPED, QUIT
         USING PCCA,W6
         L     W6,ICFADR2    GET REAL PCCAVT ORIGIN
         SLL   W8,D2         ALIGN FOR FULL WORDS
         L     W6,D0(W6,W8)  GET VIRTUAL PCCA ORIGIN FOR OTHER CPU
         SRL   W8,D2         REALIGN AS BEFORE
         LRA   W6,D0(W6)     TRANSLATE IT
         BNZ   ICFWAT27      IF TRANSLATION FAILS, GO TO WAIT 27
         L     W5,PCCAPSAR   GET REAL ADDR OF OTHER PCPU'S PSA
         DROP  W6
         XC    D0(D4,W5),D0(W5)   CLEAR FLAGS IN HIS RESTART PSW
         LA    W6,ICFDMPL1   GET ADDR OF DUMP LOCK LOOP
         ST    W6,D4(W5)     STORE IT IN HIS RESTART NPSW
         SPACE
*        SIGP  W7,W8,RESTART ISSUE SIGP RESTART (X06)
         DC    X'AE78'       'SIGP' OP CODE, R1,R3
         DC    S(RESTART)    ADDRESS (SIGP COMMAND CODE)
         BNZ   ICFNOTMP      IF NOT ACCEPTED, QUIT
ICFRSTLP EQU   *
         SPACE
*        SIGP  W7,W8,SENSE   ISSUE SIGP SENSE (X01)
         DC    X'AE78'       'SIGP' OP CODE, R1, R3
         DC    S(SENSE)      ADDRESS (SIGP COMMAND CODE)
         BC    D2,ICFRSTLP   IF BUSY, WAIT TIL COMPLETED
         BC    D5,ICFNOTMP   IF CC=1,3,QUIT
*  IF CC=0,MUST HAVE COMPLETED, SO WAIT FOR IT TO ENTER LOCK LOOP
ICFWFETL EQU   *
         TM    ICFMFLGA,ICFCPUIL  TEST FOR OTHER CPU IN LOOP
         BNO   ICFWFETL      IF NOT, WAIT FOR ENTRY TO LOOP
ICF2CAVL EQU   *
         OI    ICFMFLGA,ICFMPSYS  SET MP SYSTEM FLAG
         B     ICFGTBCM      IF SO, GO TO BC MODE
         EJECT
ICFNOTMP EQU   *
         NI    ICFMFLGA,XFF-ICFMPSYS   TURN OFF MPSYS FLAG,IE,SIGNAL
*                            OTHER CPU NOT AVAILABLE
ICFGTBCM EQU   *
         XR    W8,W8         CLEAR WORK REG
         ST    W8,ICFIOPSW   SET UP BC MODE, DISABLED PSW
         LA    W8,ICFBCDMP   SET UP PSW ADDR
         ST    W8,ICFIOPSW+D4          STORE ADDR
         LPSW  ICFIOPSW      GO TO BC MODE, DISABLED
ICFBCDMP EQU   *             THIS LABEL MUST FOLLOW LPSW
         SPACE 3
         USING ICFCVTOR,R10
         MVC   ICFLRDAT(D4),CVTDATE  SAVE DATE FOR DUMP ROUTINE
         DROP  R10
         L     W7,ICFTOD00         LD H.O. PART OF TIME OF INTERRUPT
         XR    W6,W6               CLEAR REMAINDER REG
         SLDL  W6,D13              MULT BY 8192
         D     W6,K15625           1 CLOCK UNIT = 1.04 SEC= 16384/15625
         SLL   W7,D1               MULT QUOTIENT BY 2(2*8192=16384)
*                                  THIS IS DONE FOR PROPER ROUNDING
         XR    W6,W6               CLEAR REMAINDER
         D     W6,K86400           DIV BY SEC PER DAY TO GET DAYS
*                                  W6 IS REMAINDER & HAS NUMBER
*                                  OF SECONDS IN THIS DAY FOR HH.MM.SS
         LR    W7,W6               SET UP DIVIDEND
         XR    W6,W6               CLEAR REMAINDER
         D     W6,K60              GET NUMBER OF MINUTES IN THIS DAY
*                                  W6 HAS SECONDS LEFT OVER
         LR    W5,W6               COPY SECONDS
         XR    W6,W6               CLEAR REMAINDER
         D     W6,K60              GET NUMBER OF HOURS IN THIS DAY
         MH    R6,HK100            MULT NO. OF MIN. BY 100
         AR    W5,W6               ADD TO SECONDS
         MH    W7,HK10T4           MULT NO. OF HOURS BY 10000
         AR    W5,W7               ADD TO SEC AND MIN
         CVD   W5,ICFDOUBL         MAKE TIME PACKED DEC.
         L     W5,ICFDOUBL+D4      LOAD LOW ORDER HALF
         SRL   W5,D4               CLEAR DECIMAL SIGN
         SLL   W5,D8               ALIGN  IN FIELD
         ST    W5,ICFLRTIM         SAVE FOR DUMP ROUTINE
         EJECT
*        SET UP FOR WARNA DATASET
*        CONTROL FLAG FOR WARNA OR WARNB IS ICFPTLPF
ICFPTCL1 EQU   *
         OI    ICFPTLPF,X80  SET ON FIRST EXTENT FLAG
         L     W1,ICFWAUCB   SET UP UCB ADDR REG
         LA    W7,ICFWADEV   SET UP DEVICE ADDR PTR REG
         LA    W2,ICFTRMCA+D2     SET UP FOOTPRINT TABLE PTR
         LA    W0,D10        SET UP CHANNEL LOGOUT COUNT
ICFPTCLR EQU   *
*  FOR IOSGEN,
*  W1 TPS TO UCB
*  W8 PTS TO IOSGEN MAP AREA
*  R14 IS LINK REG
*  R13 PTS TO 16 WORD SAVE AREA
         LPSW  ICFDNPSW      IOSGEN MUST BE IN DAT MODE TO WORK
ICFDATON EQU   *
         USING ICFCVTOR,R10
         L     R10,X10
         L     R9,CVTVOLF2             GET LOGICAL ADDR OF ICFWORK
         DROP R10
         LA    W8,ICFIOMAP   SET UP IOSGEN MAP PTR
         LA    R14,ICFMAPMK  SET UP LINK REG
         LA    R13,ICFIOMAP+D8    SET UP SAVE AREA PTR
         EJECT
         IOSGEN  MAP,TABLE=(W8),UCB=(W1),VAR=1
         EJECT
ICFMAPMK EQU   *
*        HERE IOSGEN MAP IS CONVERTED TO ANOTHER FORMAT
*             ****************************************************
*             * 4 BIT      * 4 BIT      * 4 BIT      * 4 BIT      *
*             * ONLINE/    * CHANNEL    * CONTROL    * DEVICE     *
*             * OFFLINE    * ADDRESS    * UNIT       * ADDRESS    *
*             * INDICATOR  *            * ADDRESS    *            *
*             ****************************************************
*              WHERE 0000 = ONLINE (PATH AVAILABLE)
*                    0001 = LAST ENTRY IN MAP
*                    0010 = OFFLINE (PATH NOT AVAILABLE)
         LPSW  ICFDFPSW      GO BACK TO BC MODE
ICFDATOF EQU   *
         L     R9,ICFREALW             GET REAL ADDR OF WORK AREA
         LA    R13,ICFSAVE   RELOAD SAVE AREA PTR
         MVC   ICF0CMAP(D2),ICFIOMAP   CPY PRIME PTH ADDR TO CPU0'S MAP
         MVC   ICF0CMAP+D2(D2),ICFIOMAP+D4  COPY 2ND PATH ADDR
         MVC   ICF1CMAP(D4),ICF0CMAP   COPY INTO CPU1'S MAP
         LA    W4,D2         SET UP INDEX
         XR    W6,W6
         XR    W3,W3
ICFMPFIN EQU   *
         IC    W6,ICFIOMAP(W4)    GET PRIMARY AVAIL. FLAG
         IC    W3,ICFIOMAP+D4(W4)      GET 2ND AVAIL FLAG
         AR    W3,W3         WEIGH 2ND PATH BY 2
         AR    W6,W3         COMPUTE INDEX
         SLL   W6,D2         ALIGN FOR FULL WORDS
         L     W5,ICFMMASK(W6)    INDEX MASK TABLE
         LA    W3,D3         GET COMPARAND
         CR    W4,W3         TEST WHETHER CPU1 IS DONE
         BE    ICFMAPCP      YES, DONE
         O     W5,ICF0CMAP   NO, 'OR' FLAGS IN CPU0'S MAP
         ST    W5,ICF0CMAP   STORE IT
         LR    W4,W3         SET UP INDEX FOR CPU 1
         B     ICFMPFIN      GO FINISH
ICFMAPCP EQU   *
         O     W5,ICF1CMAP   'OR' FLAGS IN CPU1'S MAP
         ST    W5,ICF1CMAP   STORE IT
         EJECT
*  MAPS ARE NOW COMPLETE, SO SET UP FOR PATH CLEAR
         XR    W3,W3
         XR    W4,W4
         NI    ICFMFLGA,XFF-ICFBCACC-ICFWDAC0-ICFWDAC1  RESET FLAGS
         IC    W3,ICFIOMAP+D2     GET FIRST CPU0 FLAF BYTE
         IC    W4,ICFIOMAP+D6     GET 2ND CPU0 FLAG BIT
         OR    W3,W4         IS WARN DATASET ACCESSIBLE FORM CPU0?
         BZ    ICFWDUT0      IF NOT, SKIP SETTING FLAG
         OI    ICFMFLGA,ICFWDAC0  SET WARN DS ACC. FROM CPU 0 FLAG
ICFWDUT0 EQU   *
         LR    W5,W3         COPY REG
         IC    W3,ICFIOMAP+D3     GET FIRST FLAG BYTE FOR CPU1
         IC    W4,ICFIOMAP+D7     GET SECOND FLAG BYTE FOR CPU1
         OR    W3,W4         IS WARN DS ACC. FORM CPU1?
         BZ    ICFWDUT1      IF NOT, SKIP SETTING FLAG
         OI    ICFMFLGA,ICFWDAC1  SET WARN DS ACC. FROM CPU 1 FLAG
ICFWDUT1 EQU   *
         NR    W3,W5         IS WARN DS ACC. FROM BOTH SIDES?
         BZ    ICFWDUTB      IF NOT, SKIP SETTING FLAG
         OI    ICFMFLGA,ICFBCACC  SET WARN DS ACC. FROM BOTH SIDES BIT
         EJECT
ICFWDUTB EQU   *
         TM    ICFMFLGA,ICFMPSYS  TEST FOR MP SYSTEM
         BO    ICFMPCAV      IF SO, GO HANDLE MP CASE AVAIL.
         LA    W8,ICF0CMAP   SET UP MAP ADR FOR PHYS CPU 0
         TM    ICFMFLGA,ICFWDAC0  TEST FOR PCPU0 AVAIL
         BO    ICFDEVLP      YES, GO CLEAR
         LA    W8,ICF1CMAP   SET UP MAP FOR PCPU1
         TM    ICFMFLGA,ICFWDAC1  TEST FOR CPU 1 AVAIL.
         BO    ICFDEVLP      YES, GO CLEAR
         B     ICFZAPAD      NO, QUIT THIS EXTENT
ICFMPCAV EQU   *
*        STAP  ICFCPUAD      GET PCPU ADDR
         DC    X'B212'       'STAP' OP CODE
         DC    S(ICFCPUAD)   ADDRESS
         L     W6,ICFWCPUA   PUT IT IN REG
         LTR   W6,W6         AM I ON 0 OR 1?
         BNZ   ICFTAVC1      IF 1, GO SET UP CHECK FOR CPU1
         LA    W8,ICF0CMAP   PT W8 TO PCPU0 MAP
         TM    ICFMFLGA,ICFWDAC0  IS WARN DS ACC. FORM THIS CPU?
         BO    ICFDEVLP      IF SO, GO CLEAR IT
         LA    W8,ICF1CMAP   PT W8 TO PCPU1 MAP
         TM    ICFMFLGA,ICFWDAC1  IS IT AVAIL FROM OTHER CPU?
         BNO   ICFZAPAD      IF NOT, ZAP THIS EXTENT
ICFSUSTC EQU   *
         XC    ICFSTPSW(D4),ICFSTPSW   CLEAR FLAG FIELD OF SHTAP PSW
         LA    W6,ICFDEVLP   GET DEV LOOP ADDR
         ST W6,ICFSTPSW+D4   PUT IT IN SHTAP PSW
         TM    ICFMFLGA,ICFCPUIL  IS OTHER CPU IN LOCK?
         BNO   ICFZAPAD      IF NOT, ZAP THIS EXTENT
         B     ICFSHTAP      IF SO, SHOILDER TAP IT
ICFTAVC1 EQU   *
         LA    W8,ICF1CMAP   PT W8 TO PCPU1 MAP
         TM    ICFMFLGA,ICFWDAC1  IS WARN DS AVAIL FORM PCPU1?
         BO    ICFDEVLP      IF SO, GO CLEAR IT
         LA    W8,ICF0CMAP   PT W8 TO PCPU0 MAP
         TM    ICFMFLGA,ICFWDAC0  IS WARN DS AVAIL FORM PCPU0?
         BNO   ICFZAPAD      IF NOT, QUIT THIS EXTENT
         B     ICFSUSTC      IF SO, GO SET UP SHTAP FOR CLEAR
         EJECT
*        PATH CLEARING AND PATH CHECKING ROUTINE
*        W8 PTS TO IOSGEN MAP
*        W7 PTS TO ICFWXDEV (X= A OR B)
*        W1 PTS TO ONE OF THE UCBS FOR THE PATH UNDER CONSIDERATION
*        W2 PTS TO BYTE IN FOOTPRINT TABLE
*        W0 HAS CHANNEL LOGOUT COUNT
         SPACE 3
*        SET UP CLEARING LOOP
ICFDEVLP EQU   *
         OI    D0(W2),X80          IOS DONE, NOW CLEAR PATH
         LR    W6,W8          COPY IOSGEN MAP ORG
ICFPTHOT EQU   *
         TM    D0(W6),X20     TEST FOR PATH OFFLINE
         BO    ICFTLSPT       IF SO, GO TO TEST LAST PATH
         OI    D0(W2),X40          AT LEAST 1 PATH AVAIL FROM IOS
         IC    W5,D0(W6)      GET FLAG AND CHANNEL NUMBER BYTE
         SLL   W5,D28         SHIFT OUT FLAG DIGIT
         SRL   W5,D20         SET UP C00 ADDRESS
         TCH   D0(W5)         DETERMINE STATE OF CHANNEL
         BC    D8,ICFHCTDV    CC=0,AVAILABLE,ISSUE HDV
         BC    D4,ICFINTPD    CC=1,INTERRUPT PENDING,GO ENABLE
         BC    D2,ICFBRTIP    CC=2,BURST IN PROG,HIO
         BC    D1,ICFPTHUA    CC=3,NOT OPER.,SET OFFLINE BIT
         SPACE 3
ICFPTHUA EQU   *
         LA    W0,D10        RESET CHANNEL LOGOUT COUNT
         OI    D0(W6),X20      SET PATH NOT AVAIL (OFFLINE)
*                             IN IOSGEN MAP
ICFTLSPT EQU   *
         TM    D0(W6),X10      TEST FOR LAST PATH IN MAP
         BO    ICFPTHCK       IF SO, GO CONFIRM A PATH
         LA    W6,D2(W6)      IF NOT, GET NEST MAP ENTRY
         B     ICFPTHOT       GO TEST PATH AND CLEAR IT
         EJECT
ICFBRTIP EQU   *
*        W5 CONTAINS"CXX" ADDR
*        W6 PTS TO MAP ENTRY
*        W7 PTS TO "CUD" LOCATION
*        W8 PTS TO IOSGEN MAP
*        W1 POINTS TO UCB OF ONE OF THE PATHS
         SPACE 3
         HIO   D0(W5)         STOP CHANNEL BURST OPERATION
         BC    D8,ICFINTPD    CC=0,INT.PENDING,GO ENABLE
         BC    D4,ICFHCSWC    CC=1,CSW STORED,GO CHECK IT
         BC    D2,ICFHITCH    CC=2,BURST OP STOPPED, GO TEST AGAIN
         BC    D1,ICFADSKP    CC=3,NOT OPER,SKIP THIS ADDR
         SPACE 3
ICFHCSWC EQU   *
         TM    CSW,X04        TEST FOR LOGOUT PENDING
         BNO   ICFHCTDV       IF NOT, GO ISSUE HALT DEVICE
         TM    CSW+D5,X04     TEST FOR CONCURRENT CHAN CNTL CHECK
         BNO   ICFHCTDV       IF NOT, GO ISSUE HDV
         BCT   W0,ICFINTPD         GO ENABLE FOR LOGOUT PENDING
         B     ICFPTHUA            IF >10 LOGOUTS ON THIS CHANNEL,
*                                  FLAG PATH AS UNAVAILABLE
         SPACE 3
ICFHITCH EQU   *
         TCH   D0(W5)         DETERMINE CHANNEL STATE
         BC    D8,ICFHCTDV    CC=00,AVAIL,ISSUE HDV
         BC    D4,ICFINTPD    CC=1,INT PENDING,GO ENABLE
         BC    D2,ICFBRTIP    CC=2,BURST MODE,ISSUE HIO
         BC    D1,ICFADSKP    CC=3,NOT OPER,SKIP THIS ADDR
         EJECT
ICFINTPD EQU   *
         LR    W4,W5          COPY 'CXX' ADDR
         SLL   W4,D2               ALIGN CHANNEL ADDR FOR FULL WORDS
         SRL   W4,D8          EXTRACT CHANNEL ADDR
         LA    W4,ICFCHTBL(W4)     FORM CHANNEL MASK ADDR
         LCTL  CR2,CR2,D0(W4)      SET CHANNEL MASK IN CTLR2
         LA    W3,ICFCHTBL+D6*D4 FORM ADDR OF CHAN 6 MASK
         CLR   W4,W3          COMPARE CHAN SELECTED W/ 6
         BL    ICFCHLT6       IF <6,GO ELSEWHERE
         LR    W4,W3          IF =>6,COPY MASK ADDR
ICFCHLT6 EQU   *
         MVC   ICFIOPSW(D4),D0(W4) SET UP SYS MASK
         LA    W3,X27
         ST    W3,ICFIOPSW+D4 SET WAIT STATE CODE
         OI    ICFIOPSW+D1,X02     SET WAIT BIT
         XC    IONPSW(D4),IONPSW   ZAP I/O NPSW
         LA    W3,ICFHCTDV
         ST    W3,IONPSW+D4   POINT I/O NPSW TO HDV
         LPSW  ICFIOPSW       ENABLE SELECTED CHANNEL
         SPACE 3
ICFHCTDV EQU   *
         TIO   D0(W5)              DETERMINE DEVICE STATE
         BC    D8,ICFADSKP         CC=0,AVAIL,GO DO NEXT ADDR
         BC    D4,ICFFTCSC         CC=1,CSW STORED, TEST FOR UC
         BC    D2,ICFBRTIP         CC=2,BUSY, ISSUE HIO
         BC    D1,ICFADSKP         CC=3,NOT OPER, GO DO NEXT ADDR
ICFFTCSC EQU   *
         TM    CSW+D4,X02          TEST FOR UC
         BO    ICFTIOSN      IF SO, GO SENSE IT
*                                  IF NOT, GO ON WITH HCT SEQ
*  FIX FOR CONTIGENT CONNECTION PROBLEM
*  UNIT CAUSING CONTIGENT CONNECTION MAY PRESENT CU END-BUSY STATUS
*  (X30)ON A TIO, SO TEST AGAIN FOR UNIT CHECK
         TM    CSW+D4,X30    CU END-BUSY?
         BO    ICFHCTDV      IF SO, CHECK FOR UNIT CHECK
         HDV   D0(W5)         STOP DEVICE REQUESTS
*        CLRIO D0(W5)         CLEAR STATUS
         DC    X'9D015000'
         TIO   D0(W5)         DETERMINE DEVICE STATE
         BC    D8,ICFADSKP    CC=0,AVAIL,GO DO NEXT ADDR
         BC    D4,ICFTCSWC    CC=1,CSW STORED,CHECK IT
         BC    D2,ICFBRTIP    CC=2,BUSY,ISSUE HIO
         BC    D1,ICFADSKP    CC=3,NOT OPER,GO DO NEXT ADDR
         EJECT
ICFTIOSN EQU   *
*
*        W5 HAS THE DEVICE ADDR (CUD)
   SPACE
*        SET UP CCW & CAW
         SPACE
         LA    W4,ICFSENSA         LOAD ADDR OF SENSE SAVE AREA
         ST    W4,ICFSNCCW         STORE IT IN THE SENSE CCW
         LA    W4,X04
         STC   W4,ICFSNCCW         SAVE THE SENCE COMD CODE IN THE CCW
         LA    W4,D24
         ST    W4,ICFSNCCW+D4      SET UP LENGTH & FLAGS IN CCW
         LA    W4,ICFSNCCW
         ST    W4,CAW              PUT CCW ADDR IN CH ADDR WORD
         SPACE
*        SET U P I/O NPSW
         SPACE
         XC    IONPSW(D4),IONPSW       ZAP IO NEW PSW
         LA    W4,ICFTSNCD
         ST    W4,IONPSW+D4        POINT I/O NPSW TO CHECK CE/DE
         SPACE
*        COPY DEVICE ADDR
         SPACE
         LR    W4,W5
         SPACE
*        ISSUE  SENIO & ENABLE
         SPACE
         XC    ICFIOPSW(D8),ICFIOPSW   ZAP ICFIOPSW
         SRL   W4,D8               ISOLATE CHANNEL ADDR
         SLL   W4,D2               ALIGN FOR FULL WORDS
         LA    W4,ICFCHTBL(W4)     GET ADDR OF CR2 CHAN MASK
         LCTL  CR2,CR2,D0(W4)      LOAD THE CHAN MASK
         STH   W5,IOOPSW+D2  STORE 'CUD' ADR FOR COMPARE
         CLI   IOOPSW+D2,D6        TEST FOR CHAN < OR => 6
         BL    ICFTSCL6            IF LT 6, SKIP NEXT INSTRUCTION
         LA    W4,ICFCHTBL+D6*D4   SET UP W4 FOR SYS MASK => 6
ICFTSCL6 EQU   *
         MVC   ICFIOPSW(D1),D0(W4)  SET UP SYSTEM MASK IN PSW
         MVI   ICFIOPSW+D1,X02     SET THE WAIT BIT
         LA    W4,X27
         ST    W4,ICFIOPSW+D4      SET WAIT STATE CODE
         EJECT
         SPACE
         SIO   D0(W5)              ISSUE SENSE I/O
         SPACE
         BC    D7,ICFADSKP         CC=1,2, OR 3,SKIP THIS ADDR
*                                  OTHERWISE ENABLE
ICFTSNCE EQU   *
         LPSW  ICFIOPSW            ENABLE & WAIT FOR CE/DE
         SPACE
*        NOW T EST FOR CE/DE
         SPACE
ICFTSNCD       EQU           *
         CH    W5,IOOPSW+D2  WAS INTERRUPT FROM SENSED DEVICE?
         BNE   ICFTSNCE      IF NOT,WAIT FOR COMPLETION
         B     ICFADSKP      IF SO, GO TO NEXT ADDRESS
         EJECT
ICFTCSWC EQU   *
         TM    CSW,X04        TEST FOR LOGOUT PENDING
         BNO   ICFADSKP       IF NOT SKIP THIS ADDR
         TM    CSW+D5,X04     TEST FOR CHAN CNTL CHECK
         BNO   ICFADSKP       IF NOT SKIP THIS ADDR
         BCT   W0,ICFINTPD         GO ENABLE FOR INTERRUPTS
         B     ICFPTHUA            IF >10 LOGOUTS ON THIS CHANNEL,
*                                  GO FLAG THIS PATH AS UNAVAILABLE
         SPACE 3
ICFADSKP EQU   *
         LA    W5,D1(W5)      INCR DEV ADDR
         LR    W4,W5          COPY NEW DEV ADDR
         SLL   W4,D24         GET RID OF "C" PART
         LTR   W4,W4          CHECK FOR "UD" = 0
         BNZ   ICFHCTDV            IF NOT DONE, GO HDV
         OI    D0(W2),X20          AT LEAST 1 PATH CLEARED
         B     ICFTLSPT            IF 0,CHANNEL'S DONE,DO NXT PATH
         EJECT
ICFPTHCK EQU   *
*        W7 PTS TO "CUD" ADDR
*        W8 PTS TO IOSGEN MAP ORG
*        W1 PTS TO UCB OF ONE OF THE PATHS
         SPACE 3
         OI    D0(W2),X10          SET PATH CHECK ENTERED
         TM    D0(W8),X20     TEST PATH AVAILABILITY
         BNO   ICFCHCNT       IF AVAILABLE, CONTINUE
ICFINMPT EQU   *
         TM    D0(W8),X10     TEST FOR LAST PATH DONE
         BNO   ICFMAPBP      IF NOT LAST PATH, GO BUMP AMP PTR
         TM    ICFMFLGA,ICFBCACC  ACCESSIBLE FROM OTHER CPU?
         BO    ICFCOCPU      IF SO, GO CLEAR IT FROM OTHER SIDE
         B     ICFZAPAD      IF NOT, QUIT THIS EXTENT
ICFMAPBP EQU   *
         LA    W8,D2(W8)      BUMP MAP PTR
         B     ICFPTHCK       KEEP CHECKING
ICFCHCNT EQU   *
         OI    D0(W2),X08          AT LEAST 1 PATH AVAIL AFTER CLEAR
         IC    W5,D0(W8)      GET FLAGS AND CHAN ADDR
         SLL   W5,D28         GET RID OF FLAGS
         SRL   W5,D26         ALIGN FOR FULL WORDS
         LA    W5,ICFCHTBL(W5) INDEX CHANNEL TABLE
         LCTL  CR2,CR2,D0(W5) SET UP CTL2 CHAN MASK
         XC    IONPSW(D8),IONPSW ZAP I/O NPSW
         LA    W4,ICFCHTCH
         ST    W4,IONPSW+D4   PT I/O NPSW TO TEST AGAIN FOR INT
         LA    W4,ICFCHTBL+D4*D6 LOAD CHAN 6 MASK ADDR
         CR    W5,W4          IS CHAN NO. <6 OR =>6?
         BL    ICFCCHL6       GOSET SYS MASK FOR CH <6
         LR    W5,W4          PT W5 TO PROPER SYS MASK FOR =>6
ICFCCHL6 EQU   *
         XC    ICFIOPSW(D8),ICFIOPSW ZAP PSW FIELD
         MVC   ICFIOPSW(D1),D0(W5) MOVE IN SYSTEM MASK
         LA    W4,ICFCHTCH
         ST    W4,ICFIOPSW+D4 PT PSW TO TEST CHANNEL
         LH    W4,D0(W8)      LOAD DEVICE "CUD"
         SLL   W4,D20
         SRL   W4,D20         CLEAR OUT FLAGS
ICFCHTCH EQU   *
         TCH   D0(W4)         CHECK FOR ANY MORE INT PEND
         BC    D8,ICFSENIO    CC=0,AVAIL,ISSUE SIO
         BC    D3,ICFINMPT    CC=2 OR 3,TRY ANOTHER PATH
         LPSW  ICFIOPSW       CC=1,INTERRUPT PEND,CLEAR IT
         EJECT
ICFSENIO EQU   *
*        W5 PTS TO PROPER SYSTEM MASK
*        CTLR2 HAS PROPER CHANNEL ENABLED
         SPACE 3
*        SET UP SENSE CCW AND CAW
         LA    W4,ICFSENSA    LOAD ADDR OF SENSE SAVE AREA
         ST    W4,ICFSNCCW    STORE IT IN SENSE CCW
         LA    W4,X04         SET UP SENSE COMMAND CODE
         STC   W4,ICFSNCCW    STORE COMMAND CODE
         LA    W4,D24
         ST    W4,ICFSNCCW+D4      SET UP FLAGS & COUNT FOR SENIO CCW
         LA    W4,ICFSNCCW    LOAD SENSE CCW ADDR
         ST    W4,CAW         STORE IT IN CHN ADDR WORD
*        SET UP I/O NPSW
         XC    IONPSW(D8),IONPSW ZAP IO NPSW
         LA    W4,ICFCEDE
         ST    W4,IONPSW+D4   POINT IT TO CE/DE ROUTINE
         XC    ICFIOPSW(D8),ICFIOPSW ZAP PSW
         MVC   ICFIOPSW(D1),D0(W5)  SET UP NEW SYSTEM MASK
         LA    W4,X27
         ST    W4,ICFIOPSW+D4 SET UP WAIT STATE CODE
         MVI   ICFIOPSW+D1,X02 SET WAIT BIT
*        SET UP DEVICE ADDR
         LH    W4,D0(W8)           LOAD FLAGS AND CUD ADDR
         SLL   W4,D20
         SRL   W4,D20              CLEAR FLAGS
         SPACE
         TIO   D0(W4)        IS PATH CLEAR?
         BC    D3,ICFINMPT   IF BUSY OR NOT OP., TRY ANOTHER PATH
         BC    D8,ICFCHEXT   CC=0,OK AND GO ON
         SPACE
         TM    CSW+D4,X02    UNIT CHECK STATUS?
         BNO   ICFINMPT      IF NOT, TRY ANOTHER PATH
ICFCHSEN EQU   *
         SIO   D0(W4)        ISSUE SENSE
         BC    D7,ICFINMPT   TRY ANOTHER PATH IF NOT ACCEPTED
ICFSNCC0 EQU   *
         OI    D0(W2),X04          CC=0 ON SENSE I/O
         LPSW  ICFIOPSW       ENABLE FOR THE INTERRUPT
ICFCEDE  EQU   *
         TM    CSW+D4,X0C        TEST FOR CHANNEL END/DEVICE END
         BNO   ICFZAPAD            IF NOT CE/DE,GO ZAP THIS ADDR
         OI    D0(W2),X02          SET CE/DE FOR SIO
         B     ICFINMPT      IF BOTH CE/DE, TRY ANOTHER PATH
         EJECT
ICFCOCPU EQU   *
*  CHECK OTHER CPU ROUTINE
*  ENTERED WHEN A BUSY IS FOUND WHEN CHECKING A DATASET AND AVAIL ON
*  OTHER CPU IS INDICATED
*        STAP  ICFCPUAD      GET PCPU ADDR
         DC    X'B212'       'STAP' OP CODE
         DC    S(ICFCPUAD)   ADDRESS
         LA    W8,ICF0CMAP   PT W8 TO PCPU0 MAP
         L W6,ICFWCPUA       PUT PCPU ADDR IN REG
         LTR   W6,W6         TEST FOR CPU 0
         BNZ   ICFCNC01      IF NOT ZERO, WE'LL GO THERE
         LA    W8,ICF1CMAP   IF 0,WE'LL GO TO PCPU1
ICFCNC01 EQU   *
         TM    ICFMFLGA,ICFCPUIL  IS OTHER CPU IN LOOP?
         BNO   ICFZAPAD      IF NOT, QUIT THIS EXTENT
         NI    ICFMFLGA,XFF-ICFBCACC   TURN OFF  AVAIL TO BOTH CPU FLAG
         XC    ICFSTPSW(D4),ICFSTPSW   CLEAR FLAGS OF SHTAP PSW
         LA    W6,ICFDEVLP   GET BRANCH ADDR
         ST    W6,ICFSTPSW+D4     SET UP SHTAP PSW
         B     ICFSHTAP      IF SO, GO SHOULDER TAP
         EJECT
ICFZAPAD EQU   *
         TM    ICFPTLPF,X80  ARE WE ON FIRST EXTENT?
         BNO   ICFWAT27      IF NOT, FIRST TIME MUST HAVE FAILED ALSO,
*                            SO SIGNAL DUMP FAILED
         XR    W4,W4         ZAP DEV ADDR REG
         STNSM ICFMWORK,X00  TURN OFF SYSTEM MASK
ICFCHEXT EQU   *
         STH   W4,D2(W7)     STORE DEV ADDR OF OPEN PATH
         OI    D0(W2),X01    WARNX PROCESSING COMPLETE
         B     ICFDCTLR      GO TO DUMP CONTROL ROUTINE
         EJECT
ICFDCTLR EQU   *
         USING CSD,W8
         L     W8,ICFADR3    SET UP REAL BASE FOR CSD
         TM    CSDFLAGS,CSDMP     IS THIS SUPPOSED TO BE AN MP SYSTEM?
         DROP  W8
         BNO   ICFDCUP1      IF NOT, GO TO UP CODE
*        STPX  ICFPXREG      STORE PREFIX REG IN COMMON AREA
         DC    X'B211'       'STPX' OP CODE
         DC    S(ICFPXREG)   ADDRESS
         B     ICFDCMU1      GO TO COMMON SECTION
ICFDCUP1 EQU   *
         MVC   ICFPXREG(D4),ICFALL0S   FOR UP SET PREFIX REG TO 0
ICFDCMU1 EQU   *
         STM   R0,R15,ICFRSTSG    SAVE GPRS FOR RETURN FROM DUMP
         STCTL CR0,CR15,ICFRSTSC  SAVE CTLRS ALSO
         LCTL  CR0,CR0,ICFALL0S   DISABLE CR0
         LCTL  CR2,CR2,ICFALL1S ENABLE ALL CHANNELS IN CR2
         XC    ICFCR0FX(D4),ICFCR0FX
         MVI   ICFCR0FX,X80
         LCTL  CR14,CR14,ICFCR0FX ENABLE CR14 FOR CHECK STOP ONLY
         LR    R13,R9        SET UP COMMON BASE FOR DUMP
         STNSM ICFMWORK,X'00'     MAKE SURE PSW IS DISABLED
         OI    ICFTRMCA+D1,X10    SET 'IN DUMP' BIT
         L     R15,ICFEXT99  LOAD DST ADDR IN DUMP ROUTINE
         LA    R14,ICFDMPRN  SET UP RETURN ADDR
         BR    R15 GO TO DUMP ROUTINE
         EJECT
ICFDMPRN EQU   *
*  AT THIS POINT, DUMP GIVES ME ADDR OF ICFDMPRN IN REG 12 AND RETURN
*  ADDR IN REG 14. HE HAS SAVED ALL HIS OWN REGS AND CTLRS AND WILL
*  RESTORE THEM WHEN I RETURN. ALSO, I GET AN ENTRY CODE IN R15.
         LA    W6,ICFDMPRN-ICFBDE00    GET DISP OF ICFDMPRN
         SR    R12,W6        COMPUTE ADDR OF ICFBDE00
         LM    R0,R13,ICFRSTSG    RESTORE GPRS
*                            DON'T RESTORE 14  OR 15 AS THEY HAVE RTN
*                            ADDR AND ENTRY CODE
         LCTL  CR0,CR15,ICFRSTSC  RESTORE CTLRS
         LTR   R15,R15       TEST FOR ZERO RTN CODE
         BZ    ICFWAT26      IF 0, DUMP WAS SUCCESSFUL
         TM    ICFPTLPF,X80  IF NOT 0, CHECK FOR WARN B DONE
         BNO   ICFWAT27      IF ^0 AND WARN B DONE,DUMP HAS FAILED
         NI    ICFPTLPF,X7F  TURN OF 'ON WARNA' FLAG
         ST    R14,ICFEXT99  POINT NEXT DUMP ENTRY CORRECTLY
         L     W1,ICFWBUCB   SET UP UCB ADDR
         LA    W2,ICFTRMCA+D3     SET UP FOOTPRINT TABLE PTR
         LA    W7,ICFWBDEV   SET UP DEV ADDR PTR
         LA    W8,ICFIOMAP   SET IOSGEN MAP PTR
         LA    W0,D10        SET UP LOGOUT COUNTER
         B     ICFPTCLR      GO CLEAR PATH FOR WARN B
         EJECT
ICFMAHDL EQU   *
*  MALFUNCTION ALERT HANDLER
         LPSW  ICFWAIT7      OTHER CPU CHECKSTOPPED IN PWF CODE SO
*                            CAN'T RECOVER
         EJECT
*
*        SHOULDER TAPPING ROUTINE
*
*  ICFSTPSW HAS PSW POINTING TO DESIRED LOCATION
*  ICFRSTSG IS A 16 WORD SAVE AREA FOR GPRS
*  ICFRSTSC IS 16 WORD SAVE AREA FOR CONTROL REGS
*
ICFSHTAP EQU   *
         STM   R0,R15,ICFRSTSG    SAVE GPRS
         STCTL CR0,CR15,ICFRSTSC  SAVE CTLRS
         MVI   ICFDMPLK,X00  RESET TS FLAG
         STOSM ICFMWORK,X01  ENABLE FOR EXTERNALS
ICFLOKWT EQU   *
         TM    ICFDMPLK,XFF  TEST FOR OTHER CPU AT INTERLOCK
         BNO   ICFLOKWT      IF NOT, WAIT TIL IT GETS THRU
         B     ICFDMPLL      GO TO DUMP LOCK LOOP
         EJECT
*
*        DUMP LOCK LOOP ROUTINE
*
*  CPU SPIN LOOP FOR MP SYSTEMS
ICFDMPL1 EQU   *             LOCK ENTRY POINT ON RESTART
         LA    R12,ICFDMPL1-ICFBDE00   LOAD DISPLACEMENT
         S     R12,D4        SUBTRACT ENTRY POINT (FROM RESTART PSW)
         LCR   R12,R12       FORM EP-DISP=ICFBDE00
         STCTL CR0,CR15,ICF2CCRS  SAVE SECOND CPU'S CTLRS
         MVC   ICFCR02F(D4),ICFCR0MK   MOVE IN CR0 MASK
         NC    ICFCR02F(D4),ICF2CCRS   'AND' IT WITH CPU2'S CR0
         OI    ICFCR02F+D2,X80    TURN ON MALFUNCTION ALERT MASK
         LCTL  CR0,CR0,ICFCR02F   INIT. CR0
         STOSM ICFMWORK,X01  ENABLE FOR EXTERNALS
*  NOW ENTER MAIN LOOP
ICFDMPLL EQU   *
*        R12 (BASE)MUST POINT TO ICFBDE00 AT THIS POINT
         OI    ICFMFLGA,ICFCPUIL  TURN ON CPU IN LOCK FLAG
ICFLTSAG EQU   *
         TS    ICFDMPLK      TEST LOCK
         BC    D4,ICFLTSAG   IF CC=1,WAIT IN LOOP
         NI    ICFMFLGA,XFF-ICFCPUIL   TURN OFF IN LOCK FLAG
         STNSM ICFMWORK,X00  TURN OFF EXTERNAL INTERRUPTS
         LM    R0,R15,ICFRSTSG    RESTORE SAVED GPRS
         LCTL  CR0,CR15,ICFRSTSC  RESTORE SAVED CTLRS
         LPSW  ICFSTPSW      GO TO BRANCH POINT
         EJECT
*
*  ICFWAT26 AND 27 ROUTINES
*
ICFWAT26 EQU   *
         XC    ICFWAIT(D8),ICFWAIT     CLEAR PSW
         MVI   ICFWAIT+D7,X26     SET WAIT STATE CODE
         B     ICFWAITC      GO TO WAIT COMMON CODE
ICFWAT27 EQU   *
         XC    ICFWAIT(D8),ICFWAIT     CLEAR WAIT PSW
         MVI   ICFWAIT+D7,X27     SET UNSUCESSFUL WAIT CODE
ICFWAITC EQU   *
         MVI   ICFWAIT+D1,X02     SET WAIT BIT
         TM    ICFMFLGA,ICFMPSYS  TEST FOR MP SYSTEM
         BO    ICFWATMP      IF MP, GO HANDLE IT
         LPSW  ICFWAIT       TERMINATE THE UP SYSTEM
ICFWATMP EQU   *
*        STAP  ICFCPUAD      GET ADDR OF THIS PCPU
         DC    X'B212'       'STAP' OP CODE
         DC    S(ICFCPUAD)   ADDRESS
         XI    ICFCPUAD+D1,X01    GET ADDR OF OTHER CPU
         USING PCCA,W2
         L     W2,ICFWCPUA   GET CPU ADDRESS
         SLL   W2,D2         ALIGN FOR FULL WORDS
         A     W2,ICFADR2    ADD ORIGIN OF PCCAVT
         L     W2,D0(W2)     GET LADDR OF OTHER CPU'S PCCA
         LRA   W2,D0(W2)     TRANSLATE IT
         BZ    ICFLSTOK      IF 0, LAST TRANSLATE WAS OK
         LPSW  ICFWAIT       OTHERWISE, STOP JUST THIS CPU
ICFLSTOK EQU   *
         L     W2,PCCAPSAR   GET REAL ADDR OF HIS PSA
         DROP W2
         MVC   D0(D8,W2),ICFWAIT  SET UP RESTART PSW
         XR    W2,W2         CLEAR STATUS REG
         L     W3,ICFWCPUA   PUT OTHER CPU'S PADDR IN REG
*        SIGP  W2,W3,PRGRST  ISSUE SIGP PROGRAM RESET (X08)
         DC    X'AE23'       'SIGP' OP CODE, R1, R3
         DC    S(PRGRST)     ADDRESS (SIGP COMMAND CODE)
ICFWATLP EQU   *
*        SIGP  W2,W3,RESTART ISSUE SIGP RESTART (X06)
         DC    X'AE23'       'SIGP' OP CODE, R1, R3
         DC    S(RESTART)    ADDRESS (SIGP COMMAND CODE)
         BNZ   ICFWATLP      WAIT TIL ACCEPTED
         LPSW  ICFWAIT       FINISHED!
         EJECT
*        PROGRAM DC'S
         DS    0F
ICFMFLGS DC    X'00FF0000'   FULL WORD FOR MP LOCKS AND FLAGS
ICFEFLAG EQU   ICFMFLGS      ENTRY LOCK
ICFDMPLK EQU   ICFMFLGS+D1   MAIN DUMP WAITING LOCK; INIT TO XFF
ICFMFLGA EQU   ICFMFLGS+D2   MVM  FLAG A BYTE
ICF2CPUT EQU   X'01'         BIT 7 IS 2ND CPU THRU FLAG
ICFCTDST EQU   X'02'         BIT 6 IS COMMIT TO DUMP SIGNALLED
ICFCPUIL EQU   X'04'         BIT 5 IS SECOND CPU IN DUMP LOCK LOOP
ICF2CPUA EQU   X'08'         BIT 4 IS 2ND CPU IN BDF CODE
ICFMPSYS EQU   X'10'         BIT 3 IS MP SYSTEM FLAG
ICFBCACC EQU   X'20'         BIT 2 IS DEVICE ACCESSIBLE FROM OTHER CPU
ICFWDAC1 EQU   X'40'         BIT 1 IS WARN DS AVAIL FROM PCPU1
ICFWDAC0 EQU   X'80'         BIT 0 IS WARN DS AVAIL FROM PCPU0
ICFMWORK EQU   ICFMFLGS+D3   WORK BYTE FOR STOSM AND STNSM
ICFPTLPF DC    X'00'               PATH LOOP FLAG
         DS 0D
ICFMCPSW DC    X'00080000'   MODULE MC NPSW (EC MODE,^DAT,^MC)
         DC    A(ICFMCKON)
ICFTSTWN DC    X'000C0000'   PSW ENABLED FOR HARD MC'S
         DC    A(ICFNOMCK)
ICFMCOFF DC    X'00080000'   PSW FOR CASE OF TRANSIENT
         DC    A(ICFNOMCK+D4)
ICFWAIT7 DC    X'0002000000000027'     WAIT 27 PSW
ICFDNPSW DC    X'04080000'   DAT MODE ON PSW
         DC    A(ICFDATON)
ICFDFPSW DC    F'0'          DAT MODE OFF PSW
         DC    A(ICFDATOF)
ICFEXPSW DC    F'0'          EXTERNAL NPSW FOR MALFUNCTION ALERTS
         DC    A(ICFMAHDL)
ICF2CPSW DC    F'0'          2ND CPU PSW DISABLING MC'S
         DC    A(ICF2CMCO)
ICF1CEOP DC    D'0'          1ST CPU EXOPSW S.A.
ICF1CENP DC    D'0'          1ST CPU EXNPSW S.A.
ICF2CEOP DC    D'0'          2ND CPU EXOPSW S.A.
ICF2CENP DC    D'0'          2ND CPU EXNPSW S.A.
ICFWAIT  DC    D'0'          TERMINATION PSW
ICFSTPSW DC    D'0'          SHOULDER TAP PSW
ICFIOPSW DC    D'0'                DOUBLE WORD FOR PSW FOR I/O
ICFSNCCW DC    D'0'                DOUBLE WORD FOR SENIO CCW
ICFDOUBL DC    D'0'                DOUBLE WORD WORK AREA
ICFCHTBL DC    X'80000000'         CTLR2 MASKS (CHANNEL TABLE)
         DC    X'40000000'
         DC    X'20000000'
         DC    X'10000000'
         DC    X'08000000'
         DC    X'04000000'
         DC    X'02000000'
         DC    X'01000000'
         DC    X'00800000'
         DC    X'00400000'
         DC    X'00200000'
         DC    X'00100000'
         EJECT
ICFMMASK DC    X'20003000'   MAP CONVERSION MASKS - BOTH PATHS OFFLINE
         DC    X'00003000'   PRIMARY ONLINE- SECONDARY OFFLINE
         DC    X'20001000'   PRIMARY OFFLINE - SECONDARY ONLINE
         DC    X'00001000'   BOTH PATHS ONLINE
ICF0CMAP DC    F'0'          MAP FOR PCPU0
ICF1CMAP DC    F'0'          MAP FOR PCPU1
ICFWCPUA DC    F'0'          FULL WORD FOR CPU ADDR
ICFCPUAD  EQU  ICFWCPUA+D2
ICFREALW DC    F'0'          REAL ADDR OF PWF WORK AREA
ICF2CGRS DC    16F'0'        2ND CPU'S GPR S.A.
ICF2CCRS DC    16F'0'        2ND CPU'S CTLR S.A.
ICFRSTSG DC    16F'0'        16 WORD SAVE AREA FOR SHTAP GPRS
ICFRSTSC DC    16F'0'        16 WORD SAVE AREA FOR SHTAP CTLRS
ICFCPUMK DC    X'80000000'   CONST FOR FORMING CPU MASK
ICFCR01S DC    F'0'          SAVE AREA FOR 1ST CPU'S CR0
ICFCR02F DC    F'0'          SECOND CPU WORK AREA
ICFCR0MK DC    X'00F80000'   MASK OFF ALL BUT PAGE & SEGMENT LENGTHS
ICFSHENV DC    16F'0'              16 WORD SAVE AREA FOR MCH REGS
ICFRDISP EQU   ICFSHENV-ICFTDE00   DISPLACEMENT FOR SAVING MCH REGS
ICFALL0S DC    F'0'                FULL WORD OF ZEROS
ICFALL1S DC    X'FFFFFFFF'         ALL 1'S FOR CTLR2 RESET
ICFCR0FX DC    F'0'                STORAGE FOR FIXING CTL REGS
ICFEXT50 DC    A(ICFBDE50)         USER EXIT ADCON
ICFEXT99 DC    A(ICFBDE99)         NORMAL DUMP EXIT VCON
K86400   DC    F'86400'            NUMBER OF SEC PER DAY
K15625   DC    F'15625'
K60      DC    F'60'
HK100    DC    H'100'
HK10T4   DC    H'10000'
         DS    0H
         DC    100X'77'            100 BYTE CE PATCH AREA
ICFSENSA DC    24X'00'             24 BYTE SAVE AREA FOR SENIO
         TITLE 'ICFBDF00 - POWER WARNING FEATURE - DUMP'
***********************************************************************
***********************************************************************
*                                                                     *
*                                                                     *
*  THIS ROUTINE DUMPS STORAGE ON DISK. IT TOLERATES ONE TRACK ERROR   *
*PER CYLINDER.                                                        *
*                                                                     *
*  ROUTINE WILL SWITCH TO ALTERNATE DEVICE IF--                       *
*   1.TWO TRACK ERRORS ON ONE CYLINDER.                               *
*   2.CHANNEL ERRORS (NOT DATA READ OR WRITE).                        *
*   3.DEVICE NOT AVAILABLE.                                           *
*                                                                     *
*  STORAGE IS SCANNED FOR SIZE, CONFIGURATION, AND UNCORRECTABLE      *
*ERRORS. VALIDATION IS ATTEMPTED (LIMIT 3 ATTEMPTS PER ERROR) BY      *
*WRITING ZEROES OR ONES IN THE QUADWORD INVOLVED. ACTUAL WRITE TO     *
*DISK IS EXECUTED WITH MACHINE CHECK MASK OFF.                        *
*                                                                     *
*  TERMINATIONS-PSW WAIT, IC=026, SUCCESSFUL DUMP.                    *
*               PSW WAIT, IC=027,  ALTERNATE DEVICE ALSO FAILED.      *
*                                                                     *
*  LINKAGE--PRESET BY MCK HANDLER APPENDAGE ROUTINE                   *
*           REGISTER 15, ENTRY AND BASE REGISTER (ICFBDE00)           *
*           REGISTER 13, TABLE POINTER (ICFWORKA).                    *
*                                                                     *
***********************************************************************
         SPACE 3
         EJECT
         SPACE 2
*** INITIALIZATION ***
         SPACE 1
* SET PSWS, CCWS, ETC.--ROUTINE IS MOVEABLE
ICFBDE99 EQU   *
         USING ICFBDE00,R15
         USING ICFBDE99,R15
         USING ICFWORKA,RTAB       POINTS TO ICFWORK
         MVC   ICFNEWPG(Q8),ICFBUM SET PROG PSW
* RTAB IS PRELOADED BY MCK HANDLER APPENDAGE ROUTINE
         ST    R14,ICFDRTAD  SAVE RETURN ADDR
         LA    RFP,ICFTRDMP        GET FOOTPRINT TABLE ADDRESS
         XC    Q0(Q4,RFP),Q0(RFP)  CLEAR AREA FOR USE
*** FOOTPRINT TABLE-HALF WORD-ICFTRDMP-BIT 0 DUMP ROUTINE STARTED ***
         OI    Q0(RFP),Q80        SET
         LA    RM,ICFPGIN         SET NEW PGM PSW
         ST    RM,ICFPGADR
         LA    RM,ICFMCKIN        SET NEW MACHINE CHECK PSW
         ST    RM,ICFMCADR
         LA    RM,ICFSCAN         PSW-ENABLE MACHINE CHECKS
         ST    RM,ICFMEN+4
         LA    RM,ICFESCAN        PSW--DISABLE MACH CKS
         ST    RM,ICFMDIS+4
         LA    RM,ICFSPCH         SP KEYS UCB ADR
         STCM  RM,M7,ICFPSEK+1    SEEK CCW
         LA    RM,Q2(RM)
         STCM  RM,M7,ICFPSER+1    SERCH CCW
         LA    RM,ICFPSER
         STCM  RM,M7,ICFPTIC+1    TIC TO SERCH
         LA    RM,ICFSPCH1        2ND SEEK
         STCM  RM,M7,ICFPSEK1+1
         LA    RM,Q2(RM)
         STCM  RM,M7,ICFPSER1+1   2ND SERCH
         LA    RM,ICFPSER1
         STCM  RM,M7,ICFPTIC1+1   2ND TIC
         LA    RM,ICF16F          CCW TO ERASE CNTL TRACK
         STCM  RM,M7,ICFT1CCW+1
         LA    R4,ICFWRD00   ADR OF FIRST WRITE CCW
         ST    R4,ICFSV4     SAVE ADR
         MVC   ICFCCSV(Q8),Q0(R4)  SAVE CCW
         EJECT
*** INIT CONTINUE ***
         SPACE 1
         LA    RM,ICFCNTRK        SET CNTL CCW
         STCM  RM,M7,ICFTWCCW+1   ADR FOR WRITE CCW
         STCM  RM,M7,ICFTRCCW+1   ADR FOR READ CCW
         LA    RM,ICFSDATA        SET SENSE CCW
         STCM  RM,M7,ICFSCCW+1
         XC    ICFPFLAG(L'ICFPFLAG),ICFPFLAG  CLEAR PROGRAM FLAGS
         LA    RM,ICFSERCH        SEARCH ID ADR
         STCM  RM,M7,ICFRDTIC+1   STORE IN READ TIC
         L     RUNIT,ICFWADEV     FIRST UNIT ADDRESS
         LA    RCH,ICFWACHR       STARTING CYLINDER
         MVC   ICFDMPWA(Q160),ICFCHR00  SAVE UCBS
ICFINIT2 EQU   *
         MVI   ICFQFLAG,Q0        CLEAR TRK ERR FLAG
         TM    ICFRFLAG,Q80       TEST FIRST OR SECOND ATTEMPT
         BZ    ICFINIT3           NOT SET-FIRST ATTEMPT
         L     R4,ICFSV4     GET ADR OF FIRST WRITE CCW
         MVC   Q0(Q8,R4),ICFCCSV       RESTORE CCW
         L     RUNIT,ICFWBDEV     ALTERNATE DEVICE ADDRESS
         LA    RCH,ICFWBCHR       ALTERNATE CYLINDER ADR
         LA    RFP,ICFTRDMP+2     FOOTPRINT TABLE SECONDARY DEVICE
* FOOTPRINT TABLE FOR SECONDARY IS HALFWORD-ICFTRDMP+2
         OI    Q0(RFP),Q80        START SECONDARY ATTEMPT
ICFINIT3 EQU   *
         ST    RCH,ICFSVCYL       SAVE STARTING ADR
         STCM  RCH,M7,ICFRSEEK+1  SET SEEK FOR CNTL READ
         LA    RCH,Q2(RCH)        SET ID ADR
         STCM  RCH,M7,ICFSERCH+1
*** FOOTPRINT BIT 1-INITIALIZATION COMPLETE ***
         OI    Q0(RFP),Q40
         BAL   RBL,ICFTIO         TEST AVAILABILITY
         NOP   *
         NOP   *                  SKIP ERRORS
         MVC   ICFRCCW(Q8),ICFTRCCW    SET READ CCW
         LA    RCW,ICFRSEEK       SET TO READ CNTL
         BAL   RBL,ICFSIO         GO READ
         NOP   *
         MVC   ICFRCCW(Q8),ICFT1CCW  ERASE CNTL TRACK
         LA    RCW,ICFRSEEK
         BAL   RBL,ICFSIO
         NOP   *                  SKIP ERRORS
*** FOOTPRINT BIT 2-CONTROL TRACK READ AND ERASED ***
         OI    Q0(RFP),Q20
         EJECT
*** SCAN STOR, SIZE, CONFIGURATION, ERRORS ***
         SPACE 1
         LM    R1,R3,ICFNDEX          SCAN STORAGE FOR SIZE,
         LM    R6,R7,ICFNDEX2         CONFIGURATION AND ERRORS
         MVI   ICFZFLAG,Q0            CLEAR PGM CK FLAG
         MVC   ICFFADR(Q4),ICFN16     PRESET FAIL ADR FOR MISCOMPARE
         LA    R4,ICFCTB11            STARTING ADDRESS BLOCK
         LA    R5,ICFCTB13            END ADR BLOCK
         MVC   ICFNEWPG(Q16),ICFPSWS SET NEW PSWS
         LPSW  ICFMEN                 ENABLE MACHINE CHECKS
ICFSCAN  EQU   *
         ST    R1,Q0(R4)              STORE ADR IN BLOCK
         LA    RZ,ICFSCAN1        RETURN ADR
ICFSCAN1 EQU   *
         OC    Q0(Q16,R1),Q0(R1)      READ STORAGE UNTIL PGM CK
         BXLE  R1,R2,ICFSCAN1
         B     ICFPGIN1              MAX STORAGE
ICFSCAN2 EQU   *
         TS    Q0(R4)                FLAG LAST BLOCK USED
         LPSW  ICFMDIS               END OF SCAN
ICFPGIN  EQU   *                     PROGRAM INTERRUPT HANDLER
         CLI   ICFTYPIN,Q5           INVALID ADDRESS?
         BE    ICFPGIN1              YES-EXPECTED
         LPSW  ICFBUM                NO-OTHER--TERMINATE
ICFPGIN1 EQU   *
         TS    ICFZFLAG              FIRST PCK THIS BLOCK
         BM    ICFPGIN2              NO
         S     R1,ICFQ1
         ST    R1,Q0(R5)             YES-ENDING ADDRESS
         A     R1,ICFQ1
         LA    R4,Q16(R4)            NEXT BLOCK
         LA    R5,Q16(R5)
         LA    RZ,ICFPGIN3        RETURN ADR
ICFPGIN2 EQU   *
         BXH   R1,R6,ICFSCAN2     INCREMENT BY 256K OR END
         OC    Q0(Q16,R1),Q0(R1)  TRY 256K HIGHER
ICFPGIN3 EQU   *
         MVI   ICFZFLAG,Q0        NO INTERRUPT, GO READ SOME MORE
         B     ICFSCAN
         EJECT
* * * MACHINE CHECKS * * *
         SPACE 1
ICFMCKIN EQU   *
         TM    ICFMCIC,Q80        UNCORRECTABLE STOR ERR?
         BZ    ICFMCKIS           NO
         NC    ICFSFAIL(Q4),ICFN16 ALIGN QUADWORD BOUNDARY
         C     R1,ICFSFAIL        FAIL ADR SAME?
         BNE   ICFMCKIS           NO
*** FOOTPRINT BIT 9-1 OR MORE UNCORRECT STORAGE ERRORS VALIDATED ***
         OI    Q1(RFP),Q40
         MVC   ICFVALX(Q16),ICFVAL RIPPLE VALIDATE PATTERN
         MVC   ICFVAL(Q48),ICF16F
         MVC   Q0(Q16,R1),ICFVAL  TRY VALIDATE-WRITE ONES OR ZEROES
         C     R1,ICFFADR         IS THIS REPEAT THIS ADR?
         BE    ICFMCKI            YES-IS IT SECOND  <<
         MVI   ICFQFLAG,Q0
         ST    R1,ICFFADR         NO-SAVE ERROR ADR
         B     ICFMCKIR           AND TRY AGAIN
ICFMCKI  EQU   *
         TS    ICFQFLAG
         BZ    ICFMCKIR
         AR    R1,R2              NEXT ADR
ICFMCKIR EQU   *
         ST    RZ,ICFMC4          SET RETURN ADR
ICFMCKIS EQU   *
         LPSW  ICFMCOLD           RETURN, RE-ENABLE MACH CKS
ICFESCAN EQU   *
*** FOOTPRINT BIT 3-STORAGE SCAN COMPLETE ***
         OI    Q0(RFP),Q16
         MVC   ICFNEWPG(Q8),ICFBUM  SET PROG PSW
         EJECT
* * * THIS SECTION DOES DUMP * * *
*USING REGS R1,R2,R3 INDEX UCBS, RCH CYLINDER NUMBER
*USING REGS R5,R6,R7 INDEX STORAGE ADRS, R4 CCW POINTER
         L      RCH,ICFSVCYL       FIRST CYLINDER--CNTL TRACK
         L      RCH,Q0(RCH)
         ST     RCH,ICFSPCH        SET CYL IN SP UCBS
         ST     RCH,ICFSPCH1
         LA     RM,ICFCTB11
         MVI    ICFQFLAG,Q0        CLEAR ERROR FLAG
         MVC   ICFCHR00(Q160),ICFDMPWA  RESTORE UCBS
ICFRSCAN EQU    *
         TM     Q0(RM),Q80         LAST BLOCK?
         BNZ    ICFEWR1            YES--GO WRITE CNTL TRACK
         L      R5,Q0(RM)          FIRST ADDRESS
         L      R6,ICFTRSIZ        BYTES PER TRACK
         L      R7,Q8(RM)          END OF STORAGE
         LA     R2,Q8              INCREMENT UCBS BY 8
         LA     R3,Q160            8X20 TRACKS
         LA     R1,ICFCHR00        ADR FIRST UCB
         AR     R3,R1
         LA     RCH,Q1(RCH)        INCREASE CYL BY 1
         STH    RCH,Q4(RM)         SET CYL FIRST BLOCK
         XC    D6(D2,RM),D6(RM)   ZERO TRACK FIRST BLOCK
         B      ICFWSET1
ICFWSET  EQU    *
         LA     RCH,Q1(RCH)        INCREASE CYL BY 1
         STH    RCH,Q12(RM)        SET CYL LAST BLOCK
ICFWSET1 EQU    *
         LA     R1,ICFCHR00        FIRST UCB
ICFWSET2 EQU    *
         ST     RCH,Q0(R1)         SET CYL ADR IN 20 UCBS
         BXLE   R1,R2,ICFWSET2
         LA     R4,ICFWRD00        FIRST CCW
         SR     RZ,RZ              TRACK COUNTER
         B      ICFWSET4
ICFWSET3 EQU    *
         LA     R4,Q32(R4)
         EJECT
***DUMP CONTINUE ***
         SPACE 2
ICFWSET4 EQU    *
         STCM   R5,M7,Q1(R4)       SET ADR IN WRITECCCW
         STH    RZ,Q14(RM)         COUNT TRACKS
         A      RZ,ICFQ1
         BXH    R5,R6,ICFEBLK      END OF STORAGE BLOCK
         TM     Q4(R4),Q40         LAST CCW AND TRACK
         BO     ICFWSET3           NO-SETNEXT CCW
         MVC    ICFCCSV(Q8),Q0(R4) SAVE LAST USED CCW
         ST    R4,ICFSV4     SAVE ADR OF LAST CCW USED
         LA     RCW,ICFSEK00       YES-WRITE CYLINDER
         BAL    RBL,ICFSIO
         BAL    RBL,ICFWOK         WRITE WAS OK
         BAL    RBL,ICFWNOK        WRITE IN ERROR
*** FOOTPRINT BIT 4-1 OR MORE CYLINDERS WRITTEN ***
         OI     Q0(RFP),Q8
         B      ICFWSET            NEXT CYLINDER
         SPACE 1
ICFEBLK  EQU    *                  END STORAGE BLOCK
         SR     R5,R7              GET STORAGE OVERRUN
         S     R5,ICFQ1
         SR     R6,R5              COMPUTE NEW COUNT
         MVC    ICFCCSV(Q8),Q0(R4) SAVE CCW
         ST    R4,ICFSV4     SAVECCW ADR
         STH    R6,Q6(R4)          SET COUNT IN CCW
         MVI    Q4(R4),Q20         TURN OFF COMMAND CHAIN
         LA     RCW,ICFSEK00       WRITE LAST(PARTIAL)CYLINDER
         BAL    RBL,ICFSIO
         BAL    RBL,ICFWOK        WRITE OK
         BAL    RBL,ICFWNOK       NOT OK
         MVC    Q0(Q8,R4),ICFCCSV  RESTORE LAST CCW
         LA     RM,Q16(RM)         NEXT STORAGE BLOCK
         B      ICFRSCAN
         EJECT
* * * WRITE CONTROL TRACK * * *
         SPACE 2
ICFEWR1  EQU    *                  WRITE CONTROL TRACK
*** FOOTPRINT BIT 5-DATA WRITE COMPLETE ***
         OI     Q0(RFP),Q4
         OI     ICFCTFLA,Q80      SET FLAG FOR SUCCESS
         MVC   ICFCTDAT(D8),ICFLRDAT  PUT DATE & TIME IN CTRL TRACK
         MVC   ICFCTPXR(D4),ICFPXREG PUT CONTENTS OF PREFIX REG IN
*                                  CONTROL TRACK
ICFEWR1A EQU    *
         L      R1,ICFSVCYL     GET CNTL TRACK LOCATION
         L      R3,ICFTPC       GET NUMBER OF TRACKS
         S      R3,ICFQ3        LESS 3
ICFEWR2  EQU    *
         MVC    ICFRCCW(Q8),ICFTWCCW CHANGE READ CCW TO WRITE
         STCK   ICFCTED            ENDING TIME
         LA     RCW,ICFRSEEK       WRITE CONTROL TRACK
         BAL    RBL,ICFSIO
         B      ICFENRD            FINISHED
* * * ERROR WHILE WRITTING CNTL TRACK * * *
         MVC    ICFRCCW(Q8),ICFT1CCW  ERASE CNTL TRACK
         LA     RCW,ICFRSEEK         BY WRITING 4 FF'S
         BAL    RBL,ICFSIO           AND ZEROES
         NOP    *                  IGNORE ERRORS
         L      R2,Q4(R1)          GET HEAD NUMBER
         A      R2,ICF10000        UPDATE HEAD BY 1
         ST     R2,Q4(R1)          SAVE
         BCT    R3,ICFEWR2         TRY WRITING AGAIN
*** FOOTPRINT BIT 14-FAILED TO WRITE CONTROL TRACK ***
         OI    Q1(RFP),Q2
         B      ICFBOMB            NO MORE TRACKS-QUIT
        SPACE 1
* * * ALL WRITE DATA TRACKS RETURN HERE * * *
         SPACE 1
ICFWOK   EQU   *            * * * WRITE WAS OK * * *
         STM   RBL,RCH,ICFRBLSV   SAVE REGS
         LA    RCH,ICFCTCF        CYLINDER FLAGS
ICFWOK1  EQU   *
         TM    Q0(RCH),QC         TEST IF FLAG BEEN USED
         BZ    ICFWOK2            NO
         LA    RCH,Q1(RCH)        LOOK AT NEXT ONE
         B     ICFWOK1
ICFWOK2  EQU   *
         OI    Q0(RCH),Q40        SET FLAG USED
         LM    RBL,RCH,ICFRBLSV   RESTORE REGS
         B     Q4(RBL)            RETURN
         EJECT
ICFWNOK  EQU   *   * * * ERROR HANDLER * * * WRITE NO GOOD
*** FOOTPRINT BIT 10-RETRYING WRITE USING SPARE TRACK ***
         OI    Q1(RFP),Q20
         STM   RBL,RCH,ICFRBLSV   SAVE REGS
         L     R1,ICFSVCSW        GET CCW ADR
ICFWNOK1 EQU   *
         S     R1,ICFQ8            LOOK AT FAILING CCW
         CLI   Q0(R1),M7           ADJUST TO POINT AT SEEK
         BNE   ICFWNOK1
         L     R1,Q0(R1)           GET UCB ADR
         LA    RCH,ICFCTCF         CYL FLAG
ICFWNOK2 EQU   *
         TM    Q0(RCH),QC          LOOK FOR UNUSED CYL FLAG
         BZ    ICFWNOK3            FOUND
         LA    RCH,Q1(RCH)        NOT FOUND, LOOK MORE
         B     ICFWNOK2
ICFWNOK3 EQU   *
         MVC   Q0(Q1,RCH),Q5(R1) STORE TRACK IN ERROR
         OI    Q0(RCH),Q80       FLAG IT BAD
         OI    ICFCTFLA,Q4       SET DUMP FLAG AS BAD TRACK
         STH   RZ,Q14(RM)         STORE LAST TRACK USED
         LA    RCH,ICFCHR19+8    ADR OF LAST UCB+8
         SR    RCH,R1            COMPUTE NUMBER OF BYTES TOMOVE
         EX    RCH,ICFMOVE       MOVE UCBS TO SKIP ONE TRACK
         LA    RCW,ICFSEK00      REWRITE CYL
         BAL   RBL,ICFSIO
         B     ICFW2OK          SECOND WRITE OK
         TS    ICFQFLAG         NOT OK-FLAG 2 BAD TRACKS
ICFW2OK  EQU   *
         NI    Q1(RFP),QC         CLEAR CURRENT FOOTPRINT
         MVC   ICFCHR00(Q160),ICFDMPWA  RESTORE UCBS
         LM    RBL,RCH,ICFRBLSV   RESTORE REGS
         TM    ICFQFLAG,Q80       TWO ERRORS
         BZR   RBL                NO
*** FOOTPRINT BIT 13-TWO TRACK ERRORS ON 1 CYLINDER ***
         OI    Q1(RFP),Q4
         MVC   Q0(Q8,R4),ICFCCSV  YES--RESTORE CCW
         MVI   ICFCTFLA,Q8      SETFLAG PARTIAL
         B     ICFEWR1A         GO WRITE CNTL
ICFMOVE  MVC   Q0(Q0,R1),Q8(R1) MOVE UCBS * *EXECUTE* *
         EJECT
***DUMP STOR PROT KEYS ***
         SPACE 1
ICFENRD  EQU    *                  CNTL TRACK WAS WRITTEN
*** FOOTPRINT BIT 6-CONTROL TRACK WRITTEN ***
         OI     Q0(RFP),Q2
         TM     ICFQFLAG,Q8        TWO TRACK ERROR
         BO     ICFBOMB            TES-GO TO SECONDARY
         OI     ICFSIO2+1,C'0'     SET SUCCESSFUL END SWITCH
         L      R2,Q4(R1)          GET HEAD NUMBER
         A      R2,ICF10000     BUMP HEAD BY 1
         ST     R2,ICFSPCH+4       SET IN UCB
         A      R2,ICF10000     NEXT HEAD
         ST     R2,ICFSPCH1+4      2ND UCB
         L      R1,ICFCTB13    GET END STORAGE
         A     R1,ICFQ1
ICFSP    EQU    *
         S      R1,ICF4K       SUBTRACT 4096
         STCM   R1,M7,ICFPCCW1+1 SET SECOND WR CCW
         S      R1,ICF4K       SUB 4096
         STCM   R1,M7,ICFPCCW+1  SET FIRST CCW
         NOP    ICFSP1         SWITCH IF SP OVERLAPS PROG
         OI     *-3,C'0'
         LR     R3,R1
         S      R3,ICF4K
         CR     R3,R15         IS SP OVERLAP PROG
         BNL    ICFSP1         NO
         LR     R1,R15         YES--PUT SP AREA BELOW PROG
         B      ICFSP
ICFSP1   EQU    *
         LA     R2,Q1
         LA     RM,ICFCTB11     GET FIRST ADDRESS
ICFSP2   EQU    *
         TM     Q0(RM),Q80       LAST BLOCK?
         BNZ    ICFSP4           YES
         L      R5,Q0(RM)        FIRST ADR
         L      R6,ICF2K         INCREMENT 2 K
         L      R7,Q8(RM)        LAST ADR
ICFSP3   EQU    *
         ISK    RZ,R5            READ KEY
         STC    RZ,Q0(R1)        STORE
         AR     R1,R2            UPDATE STORE ADR
         BXLE   R5,R6,ICFSP3     NEXT KEY
         LA     RM,Q16(RM)       NEXT BLOCK
         B      ICFSP2
ICFSP4   EQU    *
         TS     Q0(R1)         END SP KEYS
         LA     RCW,ICFPSEK
* * * GO SIO--WRITE SP KEYS * * *
         EJECT
* * * START I/O ROUTINE * * *
         SPACE 1
ICFSIO   EQU   *                  EXPECTS CAW IN RCW
*** FOOTPRINT BIT 11-IN I/O SUBROUTINE ***
         OI    Q1(RFP),Q16
         MVI   ICFSFLAG,Q0        CLEAR SENSE FLAG
ICFSIO0  EQU   *                 UNIT ADR IN RUNIT
         ST    RCW,ICFCAW        CCW ADR IN CAW
ICFSIO1  EQU   *
         SIO   Q0(RUNIT)         ISSUE START I/O-UNIT ADR IN RUNIT
ICFSIO2  EQU   *     AFTER CNTL TRACK WRITTEN SUCESSFUL END
         NOP   ICFPGEND     NEXT I/O OP
         BC    BUSY,ICFSIO1      CC=2, BUSY GO LOOP SIO
         BC    STAT,ICFSSIO      CC=4, STATUS STORED GO CKECK
         BC    NOTAV,ICFBOMBX    CC=3, NOT AVAILABLE TERMINATE
ICFTIO   EQU   *
         OI    Q1(RFP),Q16
         TIO   Q0(RUNIT)         ISSUE TEST I/O
         BC    BUSY,ICFTIO       BUSY, LOOP
         BC    STAT,ICFSTIO       STATUS STORED GO CHECK
         BC    NOTAV,ICFBOMBX     NOT AVAILABLE
         NI    Q1(RFP),QE         CLEAR CURRENT FOOTPRINT
         BR    RBL                CLEAR--RETURN
ICFSSIO  EQU   *
         TM    ICFCSW+4,Q40       TEST FOR STATUS MODIFIER
         BO    ICFSIO1            CONTROL UNIT BUSY
ICFSTIO  EQU   *
         TM    ICFSFLAG,QFF  IS SENSE FOR UNIT CHECK IN PROGRESS?
         BO    ICFBOMB       IF SO, TRY OTHER EXTENT
*  IF THIS WAS A SENSE,CSW+D4 SHOULD SHOW CE/DE,BUT EVEN IF IT
*  WASN'T, MUST SEE IF ANOTHER EXTENT IS AVAILABLE.
         L     RCW,Q63F           ANY ENDING STATUS?
         N     RCW,ICFCSW+4
         BZ    ICFTIO             NO-LOOP
         TM    ICFCSW+5,Q3F       ANY CHANNEL ERRORS?
         BNZ   ICFBOMBX           YES-GO TERMONATE
         TM    ICFCSW+4,Q2        UNIT CHECK?
         BZ    ICFTIO             NO-CLEAR AND RETURN
* * * UNIT CHECK * * *
*** FOOTPRINT BIT 8-1 OR MORE UNIT CHECKS OCCURRED ***
         OI    Q1(RFP),Q80
         TS    ICFSFLAG           FIRST OR SECOND UNIT CHECK
         BM    ICFBOMB
*** FOOTPRINT BIT 12-DOING SENSE OP ***
         OI    Q1(RFP),Q8
         MVC   ICFSVCSW(L'ICFSVCSW),ICFCSW  SAVE OLD CSW
         LA    RBL,Q4(RBL)        SET ERROR RETURN
         LA    RCW,ICFSCCW        SET FOR SENSE
         B     ICFSIO0            GO PERFORM SENSE
         EJECT
ICFBOMBX EQU   *
*** FOOTPRINT BIT 15-CHANNEL CKS. OR DEVICE NOT OPERATIVE ***
         OI    Q1(RFP),Q1
ICFBOMB  EQU   *      * * * THIS EXTENT HAS HAD IT * * *
         TS    ICFRFLAG           SET FLAG
         STM   R0,R15,ICFBOMSG    SAVE REGS FOR NEXT ENTRY
         STCTL CR0,CR15,ICFBOMSC  SAVE CTLRS FOR NEXT ENTRY
         L     R12,ICFDRTAD  LOAD BRANCH ADDR
         LA    R14,ICFBDE98  LOAD RETURN ADDR
         LA    R15,D4        LOAD RC OF 4
         BR    R12           RETURN TO MCH APPENDAGE
ICFBDE98 EQU   *
*  AT THIS ENTRY, R15 CONTAINS ADDR OF ICFBDE98
         LA    R6,ICFBDE98-ICFBDE99    GET DISPLACEMENT OF ICFBDE98
         SR    R15,R6        FORM ICFBDE98-(ICFBDE98-ICFBDE99)=ICFBDE99
*  NOW BASE IS SET UP
         LM    R0,R15,ICFBOMSG    RESTORE REGS
         LCTL  CR0,CR15,ICFBOMSC  RESTORE CTLRS
         B     ICFINIT2      GO HANDLE SECOND EXTENT
         SPACE 1
ICFPGEND EQU   *
*** FOOTPRINT BIT 7-SP KEYS READ, WRITTEN, DUMP COMPLETE ***
         OI    Q0(RFP),Q1
         L     R12,ICFDRTAD  GET APPENDAGE RETURN ADDR
         XR    R15,R15       SET RETURN CODE
         BR    R12           RETURN TO APPENDAGE FOR TERMINATION
         SPACE 2
* * * DOUBLE WORD CONSTANTS * * *
*     '*' CONSTANTS MUST BE CONTIGUOS
         SPACE 1
ICFRSEEK CCW   7,0,X'60',6       *SEEK FOR READ, WRITE, ERASE
ICFSERCH CCW   X'31',0,X'60',5   *SEARCH ID EQUAL
ICFRDTIC CCW   8,0,X'60',0       *TIC
ICFRCCW  CCW   6,0,X'20',512     *CCW FOR CONTROL TRACK
ICFSCCW  CCW   4,0,X'20',24       SENSE
ICFT1CCW CCW   5,0,X'20',4        ERASE CCW--WRITE 4 'FF'S
ICFTRCCW CCW   6,0,X'20',512      READ CCW
ICFTWCCW CCW   5,0,X'20',512      WRITE CCW
ICFPSEK  CCW   7,0,96,6          *SEEK FOR SP KEYS
ICFPSER  CCW   49,0,96,5         *SERCH ID
ICFPTIC  CCW   8,0,96,0          *TIC TO SERCH
ICFPCCW  CCW   5,0,96,4096       *WRITE 4096 SP KEYS
ICFPSEK1 CCW   7,0,96,6          *2ND SEEK SP
ICFPSER1 CCW   49,0,96,5        *SERCH ID
ICFPTIC1 CCW   8,0,96,0         *TIC TO SERCH
ICFPCCW1 CCW   5,0,32,4096      *WRITE 2ND 4096 SP KEYS
ICFSPCH  DC    X'0000CCCC00000100' *UCB FOR SP KEYS
ICFSPCH1 DC    X'0000CCCC00000100' *2ND UCB
ICFTOD   DC    1D'0'              STARTING TIME
ICFCCSV  DC    1D'0'               CCW SAVER
ICFRBLSV DC    1D'0'               REG SAVER
ICFVAL   DC    2D'0'              *STORAGE VALIDATION PATTERN
ICF16F   DC    16X'FF'            *2ND PATTERN
ICFEPAT0 DC    2XL8'0002000000004000' *3RD PATTERN
ICFVALX  DC    2D'0'                 *PATTERN RIPPLER
ICFSVCSW DC    1D'0'                  CSW SAVER
ICFBUM   DC    X'0002000000000027'  WAIT-CODE INVALID DUMP
ICFDMPDN DC    X'0002000000000026' WAIT-CODE VALID DUMP
ICFMEN   DC    X'0004000000000000'  ENABLE MACHINE CHECKS
ICFMDIS  DC    X'0000000000000000'  DISABLE MACH CKS
         EJECT
* * * FULL WORD CONSTANTS * * *
         SPACE 1
ICFPSWS  DC    X'00040000'       *PROGRAM NEW
ICFPGADR DC    F'0'              *ADDRESS
         DC    F'0'              *MACHINE NEW
ICFMCADR DC    F'0'              *ADDRESS
ICFQ1    DC    F'1'
ICFQ3    DC    F'3'
ICFQ8    DC    F'8'
ICF2K    DC    F'2048'
ICF4K    DC    F'4096'
ICFNDEX  DC    F'0'  *
         DC    F'16'  *
         DC    X'00FFFFFF'  *
ICFNDEX2 DC    F'262144'  *
         DC    X'00FFFFFF'  *
ICFN16   DC    X'00FFFFF0'
ICFSVCYL DC    F'0'
ICFFADR  DC    F'0'
ICFSV4   DC    F'0'
Q63F     DC    X'063F0000'       END STATUS CONSTANT
ICF10000 DC    X'00010000'        HEAD INCREMENTER
ICFBOMSG DC    16F'0'        16 WORD GPR SAVE AREA
ICFBOMSC DC    16F'0'        16 WORD CTLR SAVE AREA
ICFDRTAD DC    F'0'          RETURN ADDR FOR APPENDAGE
ICFPFLAG DC    F'0'              PROGRAM FLAGS
ICFRFLAG EQU   ICFPFLAG           1ST EXTENT FAIL FLAG
ICFSFLAG EQU   ICFPFLAG+1         UNIT CHECK FLAG
ICFZFLAG EQU   ICFPFLAG+2         PROGRAM CHECK FLAG
ICFQFLAG EQU   ICFPFLAG+3         TWO TRACKS ERROR FLAG
ICFSDATA DC    24X'0'
* * * PATCH AREA * * *
ICFPATCH DS    25F
ICFBDE50 EQU   *
*        INSERT USER ROUTINE HERE
         XR    R15,R15           ZAP RETURN CODE
         BR    R14               RETURN
         EJECT
* * * EQUATES * * *
RFP      EQU   14
RTAB     EQU   13                TABLE POINTER-DSECT BASE
RUNIT    EQU   12                UNIT ADDRESS
RCH      EQU   11                CYLINDER REFERENCE
RBL      EQU   10                BRANCH AND LINK
RCW      EQU   9                 CCW ADDRESS
RM       EQU   8                  MISC USE
RZ       EQU   0
NOTAV    EQU   1                  CC=3
BUSY     EQU   2                  CC=2
STAT     EQU   4                  CC=1
Q16      EQU   16
ICFNEWPG EQU   X'68'
M7       EQU   7
Q2       EQU   2
Q1       EQU   1
Q0       EQU   0
Q40      EQU   X'40'
Q3F      EQU   X'3F'
Q4       EQU   4
ICFCAW   EQU   72                  CAW ADDRESS
ICFCSW   EQU   64                  CSW
ICFMCIC  EQU   X'EA'               THIRD BYTE OF MCIC          @ZA00510
Q80      EQU   X'80'
ICFSFAIL EQU   248
Q48      EQU   48
ICFMC4   EQU   X'34'
ICFTYPIN EQU   43
Q8       EQU   8
Q160     EQU   160
Q6       EQU   6
Q20      EQU   X'20'
Q32      EQU   32
Q5       EQU   5
Q12      EQU   12
QFF      EQU   X'FF'
Q14      EQU   14
QC       EQU   X'C0'
QE       EQU   X'E0'
ICFMCOLD EQU   48
ICFEND   EQU   *
         EJECT
         ICFWORK
         EJECT
ICFCVTOR DSECT
         CVT
         EJECT
         IHACSD
         EJECT
         IHAPCCA
         EJECT
         IEFUCBOB
         IECDLCH
         EJECT
         IECDCAT
         EJECT
ICFBDE00 CSECT               RESUME CONTROL SECTION
          END
