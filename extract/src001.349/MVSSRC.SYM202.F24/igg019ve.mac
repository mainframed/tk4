* /* START OF SPECIFICATIONS ****
*01* PROCESSOR = ASSEMXF-370R
**** END OF SPECIFICATIONS ***/
         TITLE  ' IGG019VE - SYNCH  AND ERROR PROCESSING ROUTINE-(OCR)'
IGG019VE CSECT
***********************************************************    @YM00638
*MODULE-NAME                                                   @YM00638
* IGG019VE                                                     @YM00638
*                                                              @YM00638
*DESCRIPTIVE-NAME                                              @YM00638
* OCR SYNCH AND ERROR PROCESSING MODULE                        @YM00638
*                                                              @YM00638
*COPYRIGHT                                                     @YM00638
* NONE                                                         @YM00638
*                                                              @YM00638
*CHANGE-ACTIVITY                                               @YM00638
*
* RELEASE 20 ADDITIONS/CHANGES/DELETIONS
*A535500                                                         A33940
* RELEASE 21 ADDITIONS/CHANGES/DELETIONS
* RELEASE 22 ADDITIONS/CHANGES/DELETIONS
* RELEASE 23 ADDITIONS/CHANGES/DELETIONS
* RELEASE 24 ADDITIONS/CHANGES/DELETIONS
* RELEASE 25 ADDITIONS/CHANGES/DELETIONS
* RELEASE 26 ADDITIONS/CHANGES/DELETIONS
* RELEASE 27 ADDITIONS/CHANGES/DELETIONS
*
*
* STATUS - CHANGE LEVEL 01  RELEASE 20
*
*
*FUNCTION-SYNCH ROUTINE-TO ACQUIRE NEXT SEQUENTIAL IOB AND WAIT FOR
*                       COMPLETION(TEST PREVIOUS EXCP STATUS)
*                       1) NORMAL COMPLETION RETURNS TO GET ROUTINE
*                       2) INCOMPLETE ISSUES WAIT
*                       3) ABNORMAL CONDITION GOES TO USERS SYNAD ROUTN
*                       4) EOF CONDITION ISSUES EOV TO EXECUTOR
*        -EIB ROUTINE-
*                       1) SET ERROR INDICATOR BYTE
*        -COMPLETION CODE ROUTINE-
*                       1) SET COMPLETION CODE
*        -COUNTER ROUTINE-
*                       1) UPDATE TEMPORARY ERROR COUNTERS
*ENTRY POINTS
*        LABEL  OCR010
*        LABEL  OCR020
*        LABEL  OCR030
*        LABEL  OCR035
*
*ENTRY INSTRUCTION SEQUENCE
*             /SYNCH/             /EIB/          /COMP CODE/
*        LA    1,DCB
*        L     15,DCBGERR     L    15,DCBGERR     L    15,DCBGERR
*        BALR  14,15          BAL  14,8(15)       BAL  14,16(15)
*
*             /COUNTER/
*        L     15,DCBGERR
*        BAL   14,24(15)
*
*INPUT FROM CALLING ROUTINES -/SYNCH/EIB/COMP CODE/COUNTER/ ROUTINES
*        REG   0-1   N/A
*        REG   2    DCB ADDRESS
*        REG   3    IOB ADDRESS
*        REG   4-7  N/A
*        REG   8    N/A FOR GERR , MUST BE AVAILABLE FOR BASE REG
*                   FOR EIB,COMP CODE, AND COUNTER ROUTINES
*        REG   9-12 N/A
*        REG   13   WORK-SAVE ADDRESS
*        REG   14   CALLING ROUTINE IN-LINE RETURN ADDRESS
*        REG   15   BASE ADDRESS
*OUTPUT TO CALLING ROUTINES -/SYNCH/EIB/COMP CODE/ ROUTINES
*        REG   0-1  N/A
*        REG   2-7  AS UPON ENTRY EXCEPT FOR GERR PARAMETER CHANGES
*        REG   8    N/A EXCEPT GERR BASE
*        REG   9-12 SAME AS ENTRY
*        REG   13   WORK-SAVE ADDRESS
*        REG   14   ADDRESS OF IN-LINE RETURN
*        REG   15   N/A EXCEPT RETURN CODE FOR COMP CODE ROUTINE
*
*SYNAD REGISTERS - ENTRY FROM SYNCH TO SYNAD
*        REG   0    IOB ADDRESS
*        REG   1    DCB ADDRESS
*        REG   2-12 USER SPECIFIED
*        REG   13   WORK-SAVE ADDRESS
*        REG   14   RETURN ADDRESS TO SYNCH ROUTINE
*        REG   15   ENTRY ADDRESS TO SYNAD ROUTINE
*        ----------EXIT FROM SYNAD TO SYNCH
*        REG   0-1  N/A
*        REG   2-12 USER SPECIFIED
*        REG   13   WORK-SAVE AREA
*        REG   14   RETURN ADDRESS TO SYNCH ROUTINE
*        REG   15   ZERO OR ADDRESS OF USER SPECIFIED BRANCH ADDRESS
*
*EXTERNAL ROUTINES
*        IGG019VA        GET LOC,F
*        IGG019VB        GET LOC,V,U
*        IGG019VC        GET MOV,F
*        IGG019VD        GET MOV,V,U
*        IGG019VH        CNTRL
*        IGG019VI        RDLNE
*        EOV             END OF VOLUME ROUTINE
*
*EXITS-NORMAL
*        OCR090     BRANCH TO CALLING ROUTINE FROM GERR
*        OCR132     BRANCH AND LINK TO SYNAD
*        OCR250     BRANCH TO CALLING ROUTINE FROM EIB  ROUTINE
*        OCR330     BRANCH TO CALLING ROUTINE FROM COMP CODE ROUTINE
*        OCR410     BRANCH TO CALLING ROUTINE FROM COUNTER ROUTINE
*        OCR133     EXIT TO USER SPECIFIED RETURN ADDRESS
*        OCR147     EOV EXIT
*     -ABNORMAL
*        ABEND      COMPLETION-CODE =001  - ABE SPECIFIED
*TABLES/WORKAREA
*
*        USER SAVE/WORK AREA
*        DCB
*        IOB
*
*ATTRIBUTES--REENTRANT,REUSABLE,PROBLEM PROGRAM MODE
*
*
*
*
*
*
***********************************************************************
*
*  ALL REGISTER EQUATES HAVE AN 'R' AT THE END OF THE SYMBOL
*
***********************************************************************
*
PARA0R   EQU   0                   PARAMETER  REGISTER  0
PARA1R   EQU   1                   PARAMETER  REGISTER  1
WORK4R   EQU   1                   WORK REGISTER
R1       EQU   1                   USED IN DOM MACRO
DCBR     EQU   2                   DCB ADDRESS
IOBADR   EQU   3                   IOB ADDRESS
EOBADR   EQU   4                   EOB ADDRESS
RECADR   EQU   5                   RECORD ADDRESS
WORK1R   EQU   7                   WORK REGISTER
BASER    EQU   8                   BASE REGISTER FOR THIS ROUTINE
WORK8R   EQU   8                   REG 8 FOR RESTORE        @ZA04457
SAVR     EQU   13                  USER SAVE AREA
RETR     EQU   14                  RETURN ADDRESS
WORK2R   EQU   14                  WORK REGISTER
ENTRYR   EQU   15                  ENTRY ADDRESS
WORK3R   EQU   15                  WORK REGISTER
*
*
***********************************************************************
***********************************************************************
*
*                        ERROR COUNTER EQUATES
*
***********************************************************************
***********************************************************************
ECCOUNT  EQU   0                   EQUIP CHECK RETRY COUNT IN USER AREA
PERMEC   EQU   4                   PERMANENT EQUIPMENT CHECK COUNTER
WLRCOUNT EQU   8                   WRONG LNGTH CNT IN  USER AREA
PERMWLR  EQU   12                  PERMANENT WRONG LENGTH REC COUNTER
KCCOUNT  EQU   16                  KEYBOARD CORRECTION COUNTER
DCCOUNT  EQU   20                  DATA CHECK RETRY COUNT IN USER AREA
DCRETRY  EQU   36                  DATA CHECK RETRY COUNT IN IOB
WLRETRY  EQU   37                  WRONG LNGTH CNT  IN IOB
ECRETRY  EQU   38                  EQUIP CHECK RETRY COUNT IN IOB
***********************************************************************
*
*                        STATUS OR  SENSE
*
***********************************************************************
NONREC   EQU   X'02'               NON RECOVERY ERROR
EQUCHK   EQU   X'10'               EQUIPMENT CHECK ERROR
DATACHK  EQU   X'08'               DATA CHECK ERROR
KCORR    EQU   X'01'               KEY-BOARD CORRECTION
WLR      EQU   X'40'               WRONG LENGTH RECORD ERROR
UNEXCEP  EQU   X'01'               UNIT EXCEPTION IN STATUS IN CSW(IOB)
COMREJ   EQU   X'80'               COMMAND REJECT
INVCOM   EQU   X'08'               INVALID COMMAND
SENS0ERR EQU   X'24'               BUS OUT , OVERRUN
STAT1ERR EQU   X'3F'               PG C,PT C,C C C,C I C,C D C
***********************************************************************
*
*                        DCBEIB -ERROR INDICATOR BYTE
*
***********************************************************************
NRBIT    EQU   X'10'               NON RECOVERY
ECBIT    EQU   X'08'               EQUIPMENT CHECK
DCBIT    EQU   X'01'               DATA CHECK
KCHEBIT  EQU   X'02'               KEYBOARD CORRECTION
WLRBIT   EQU   X'04'               WRONG LENGTH RECORD
EIBERR   EQU   X'FF'               ANY ERROR IN DCBEIB
***********************************************************************
*
*                        DCB EQUATES
*
***********************************************************************
ABEND2ND EQU   X'10'               2ND TIME INDICATOR FOR EOV RTN,
*                                    USED TO ABEND WITH A RET CODE OF 1
FORUB    EQU   X'80'               TEST FOR FIXED OR UNDEFINED
EOFBIT   EQU   X'40'               EOF BIT SWITCH IN DCBORBYT
ERRFLGS  EQU   X'3F'               ERROR FLAGS IN DCBI FLGS-X'C0'
SYNADOFF EQU   X'7F'               TURN SYNAD IN PROGRESS BIT OFF
SYNADBIT EQU   X'80'               SYNAD-IN-PROCESS BIT IN DCBORBYT
ABE      EQU   X'20'               ABEND OPTION IN DCBEROPT
SKP      EQU   X'40'               SKIP OPTION IN DCBEROPT
***********************************************************************
*
*                        IOB EQUATES
*
***********************************************************************
ECB      EQU   4                   ECB OFFSET IN QSAM IOB
COMPLETE EQU   X'40'               TEST IF ECB POSTED COMPLETE
PERROR   EQU   X'41'               TEST IF ECB POSTED WITH PERM ERROR
PERROR44 EQU   X'44'               TEST IF PERM ERROR          @ZA00774
IOSIOB   EQU   8                   PLUS 8 FROM ACCESS METHOD IOB
SENSE0   EQU   10                  SENSE BYTE 0 IN IOB
SENSE1   EQU   11                  SENSE BYTE 1 IN IOB
INTCCW   EQU   16                  INTERRUPTED CCW IN CSW IN IOB
STATUS   EQU   20                  STATUS IN CSW IN IOB
RESIDUAL EQU   22                  OFFSET TO THE RESIDUAL COUNT IN CSW
CPADR    EQU   24                  OFFSET OF CHANNEL PROGRAM ADR IN IOB
TEMCCW   EQU   40                  OFFSET TO TEMPORARY CCW IN THE IOB
FLAG     EQU   44                  CCW FLAG BYTE AT IOB + 40
CCWSTART EQU   48                  START OF THE CHANNEL PROGRAM
RBCOM    EQU   X'0C'               READ BACKWARD COMMAND
BUF      EQU   0                   ADDR OF BUFFER OFFSET IN CCW
DATADR   EQU   0                   DATA ADDRESS OFFSET IN CCW
CNT      EQU   6                   COUNT FIELD OFFSET IN CCW
GNLCCW   EQU   8                   OFFSET TO GNL CCW IN RB AND GNL PAIR
CHAINOFF EQU   X'BF'               MASK TO TURN OFF COMMAND CHAINING
***********************************************************************
FOURRC   EQU   4                   RETURN CODE OF FOUR
EIGHTRC  EQU   8                   RETURN CODE OF EIGHT
TWELVERC EQU   12                  RETURN CODE OF TWELVE
ZERO     EQU   0                   USED AS A CONSTANT OF ZERO
ONE      EQU   X'01'               CONSTANT 1
CCWL     EQU   8                   LENGTH OF ONE CCW
SYSCC    EQU   12                  USED AS A SHIFT TO SET A SYSTEM C C
HIBYTE   EQU   24                  USED TO SHIFT TO HI ORDER BYTE
TWO      EQU   2                   USED AS A CONSTANT OF 2
ADDRESS  EQU   3                   LENGTH OF AN ADDRESS
INPREAD  EQU   X'90'               HI ORDER BYTE OF REG 1 FOR SYNAD ENT
RDNDATA  EQU   X'80'               INDICATES READ DATA
USERREG  EQU   36                  OFFSET IN SAVE AREA TO USER REGS
TEMPSAV  EQU   32                  OFFSET TO SAVE AREA FOR DCB
GETREG   EQU   24                  SAVE AREA FOR ADDRESS OF GET ROUTINE
RETREG   EQU   64                  SAVE AREA FOR RETURN ADDRESS
SAVREG   EQU   64                  OFFSET IN SAVE AREA FOR USER REGS
BASEREG  EQU   68                  OFFSET IN SAVE AREA FOR SYNCH ADDR
***********************************************************************
***********************************************************************
 EJECT
         USING IGG019VE,ENTRYR     USE  REGISTER 15 AS A TEMP BASE
         USING IHADCB,DCBR         USE  REGISTER 2 AS DCB BASE
***********************************************************************
*
*                        ENTRYS INTO THE SYNCH ROUTINE
*
***********************************************************************
*
OCR010   LR    BASER,ENTRYR        ENTRY +0 - LOAD NEW BASE REGISTER
         B     OCR040              BRANCH TO GERR ROUTINE
FOUR     DC    H'4'                FILLER - USED AS CONSTANT OF 4
OCR020   LR    BASER,ENTRYR        ENTRY +8 - LOAD NEW BASE REGISTER
         B     OCR200              BRANCH TO EIB ROUTINE
EIGHT    DC    H'8'                FILLER - USED AS CONSTANT OF 8
OCR030   LR    BASER,ENTRYR        ENTRY +16- LOAD NEW BASE REGISTER
         B     OCR300              BRANCH TO COMPLETION CODE ROUTINE
SIXTEEN  DC    H'16'               FILLER - USED AS CONSTANT OF 16
OCR035   LR    BASER,ENTRYR        ENTRY +24- LOAD NEW BASE REGISTER
         B     OCR400              BRANCH TO ERROR COUNTER ROUTINE
*
***********************************************************************
OCR040   STM   RETR,ENTRYR,SAVREG(SAVR) SAVE RETURN AND ENTRY REGISTERS
         DROP  ENTRYR              DROP TEMPORARY BASE REG
         USING IGG019VE,BASER      USE NEW BASE REGISTER
*
OCR045   L     IOBADR,0(IOBADR)    GET THE ADDRESS OF THE NEXT IOB
         LA    IOBADR,0(IOBADR)    CLEAR HI ORDER BYTE
*
         LA    WORK1R,CCWSTART(IOBADR)  GET ADDRESS OF CHANNEL PROGRAM
         L     WORK2R,BUF(WORK1R)  GET BUFFER ADDRESS
         LA    WORK2R,ONE(WORK2R)  CLEAR HI ORDER BYTE AND INCREMENT 1
         SH    WORK2R,CNT(WORK1R)  SUBTRACT CCW COUNT TO GET BUF STRT
         TM    DCBRECFM,FORUB      TEST FOR FIXED OR UNDEFINED FORMAT
         BO    OCR050              BRANCH IF FIXED OR UNDEFINED
*
         SH    WORK2R,FOUR         IF VAR RECORDS, SUB 4 MORE TO GET
*                                  START OF BUFFER
OCR050   ST    WORK2R,DCBRECAD     STORE ADDRESS OF FIRST RECORD
*
OCR060   TM    ECB(IOBADR),COMPLETE  IS EVENT NOT COMPLETE YET (X'80')
         BO    OCR065              IF COMPLETE BRANCH
*
         WAIT  ECB=ECB(IOBADR)     WAIT FOR EVENT TO COMPLETE
*
OCR065   L     PARA1R,DCBWTOID     LOAD POSSIBL WTO ID
         LTR   PARA1R,PARA1R       HAS WTO MESSAGE BEEN DELETED
         BZ    OCR070              IF ZEROS -YES, BRANCH
*
         DOM   MSG=(R1)            DELETE OPERATOR MESSAGE
*
         XC    DCBWTOID+1(ADDRESS),DCBWTOID+1  CLEAR MESSAGE ID
*
*
OCR070   BAL   RETR,OCR400         BRANCH AND LINK TO COUNTER ROUTINE
*
OCR080   L     RECADR,DCBRECAD     LOAD RECORD ADDRESS FOR RETURN
         LR    EOBADR,RECADR       COPY RECORD ADDRESS
         AH    EOBADR,DCBBUFL      ESTABLISH EOB ADDRESS FOR RETURN
         STM   IOBADR,RECADR,DCBIOBA REINITIALIZE DCB FIELDS
         TM    DCBORBYT,EOFBIT     TEST FOR END OF FILE CONDITION
         BO    OCR100             IF EOF ON, BRANCH TO EOV RTN
         CLI   ECB(IOBADR),PERROR  DID A PERMANENT ERROR OCCUR
         BE    OCR120              YES, BRANCH TO HANDLE PERM ERROR
         CLI   ECB(IOBADR),PERROR44 DID PERM ERROR OCCUR       @ZA00774
         BE    OCR120              YES,BRANCH                  @ZA00774
*
OCR085   L     RECADR,DCBRECAD     LOAD ADDRESS OF START OF REC
         L     RETR,RETREG(SAVR)   LOAD RETURN ADDRESS
         L     BASER,GETREG(SAVR)  LOAD ADDRESS OF GET ROUTINE
OCR090   BR    RETR                RETURN TO GET ROUTINE
 EJECT
***********************************************************************
*
*        THIS CODE EXECUTED IF THERE ARE ANY ERRORS
*
***********************************************************************
*
OCR100   XC    STATUS(TWO,IOBADR),STATUS(IOBADR) CLEAR STATUS
         OI    STATUS(IOBADR),UNEXCEP SET UNIT EXCEPTION BIT ON
*
OCR110   MVI   DCBORBYT,ZERO       TURN OFF DCBORBYT SWITCHES
         MVC   DCBEOBAD+1(ADDRESS),DCBRECAD+1 SET EOB CONDITION
         B     OCR145              BRANCH TO GO TO EOV ROUTINE
*
OCR120   L     WORK1R,INTCCW(IOBADR) GET CCW ADDRESS
         LA    WORK1R,0(WORK1R)    CLEAR HI ORDER BYTE
*
OCR125   SR    EOBADR,EOBADR       CLEAR REGISTER
         LA    WORK2R,CCWSTART+8(IOBADR)  LOAD ADDRESS OF CHANNEL PROGR
         CR    WORK1R,WORK2R       IS INTERRUPTED CCW VALID
         BL    OCR126              NO,BRANCH TO SET NEW EOB ADDRESS
         SH    WORK1R,EIGHT        BACK UP TO INTERRUPTED CCW
         L     EOBADR,DATADR(WORK1R) LOAD DATA ADDRESS FROM CCW
         LA    EOBADR,ONE(EOBADR)  CLEAR HI ORDER BYTE AND INC BY 1
*
OCR126   ST    EOBADR,DCBEOBAD     STORE NEW END OF BLOCK ADDRESS
*
OCR1261  BAL   RETR,OCR200         BRANCH AND LINK TO EIB ROUTINE
*
         BAL   RETR,OCR300         BRANCH AND LINK TO SET COMPLETION
*                                    CODE
         STC   ENTRYR,DCBEIB+1     STORE RETURN CODE
*
         TM    STATUS(IOBADR),UNEXCEP TEST FOR UNIT EXCEPTION CONDITION
         BZ    OCR130              BRANCH IF NOT UNIT EXCEPTION CONDITN
         LA    WORK2R,CCWSTART+8(IOBADR)   LOAD ADDR OF CHANNEL PROGRAM
         CR    WORK1R,WORK2R       COMPARE INT CCW WITH BEGIN OF CHAIN
         BNH   OCR110              BRANCH TO GO TO EOV ROUTINE
*
OCR127   OI    DCBORBYT,EOFBIT     SET EOF FOR NEXT GET
         SH    WORK1R,SIXTEEN      BACK UP 16 MORE TO LAST READ CCW
         L     EOBADR,DATADR(WORK1R) LOAD THE DATA ADDRESS
         LA    EOBADR,ONE(EOBADR)  CLEAR HI ORDER BYTE AND INC BY 1
         ST    EOBADR,DCBEOBAD     STORE NEW END OF BLOCK ADDRESS
         B     OCR085              RETURN TO LOAD GET REGISTERS
*
*
OCR130   CLI   DCBSYNAD+3,ONE      IS SYNAD ROUTINE SPECIFIED
         BE    OCR135              NO, SYNAD ROUTINE NOT SPEC -BRANCH
 EJECT
***********************************************************************
*
*        GO TO THE USER'S SYNAD ROUTINE
*
***********************************************************************
         ST    DCBR,TEMPSAV(SAVR)  STORE DCB ADDRESS
*
         LA    PARA1R,INPREAD      LOAD INPUT AND DATA BITS
         TM    0(WORK1R),RBCOM     TEST FOR READ BACKWARD COMMAND
         BNO   OCR131              BRANCH IF NOT READ BACKWARD
         CLC   RESIDUAL(TWO,IOBADR),CNT(WORK1R) COMP RESIDUAL TO ORGINL
         BL    OCR1311             BRANCH IF DATA READ
OCR131   LA    PARA1R,RDNDATA      SET TO NO DATA READ
OCR1311  SLL   PARA1R,HIBYTE       SHIFT TO HIGH ORDER BYTE
         OR    PARA1R,DCBR         DCB ADDRESS TO LOW ORDER 24 BITS
*
         LA    PARA0R,TEMCCW       LOAD OFFSET TO CHAN PROG
         SLL   PARA0R,HIBYTE       SHIFT TO HIGH ORDER BYTE
         LA    IOBADR,IOSIOB(IOBADR) POINT TO IOS IOB
         OR    PARA0R,IOBADR       IOB ADDRESS TO LOW ORDER BYTES
*
         NI    DCBIFLGS,ERRFLGS    TURN ERROR FLAGS OFF
         OI    DCBORBYT,SYNADBIT   SET SYNAD IN PROGRESS BIT ON
         L     ENTRYR,DCBSYNAD     LOAD SYNAD ROUTINE ADDRESS
         LM    DCBR,BASER,USERREG(SAVR) LOAD USER REGISTERS
OCR132   BALR  RETR,ENTRYR         BRANCH AND LINK TO USERS SYNAD ROUTN
*
         STM   DCBR,BASER,USERREG(SAVR) STORE USER REGISTERS
         L     DCBR,TEMPSAV(SAVR)  LOAD DCB ADDRESS
         L     IOBADR,DCBIOBA      LOAD IOB ADDRESS
         L     BASER,BASEREG(SAVR) RESTORE BASE REGISTER
         NI    DCBORBYT,SYNADOFF   TURN SYNAD IN PROCESS BIT OFF
         NI    DCBIFLGS,ERRFLGS    TURN DCB ERROR FLAGS OFF
*
*
         LTR   ENTRYR,ENTRYR       TEST REGISTER 15 FOR ZEROS
*
         BZ    OCR140              IF ZERO,BRANCH
*
         NI    DCBORBYT,ZERO       RESET DCBORBYT SWITCHES
         MVC   DCBEOBAD+1(ADDRESS),DCBRECAD+1  SET EOB CONDITION
         LM    DCBR,WORK8R,USERREG(SAVR) RESTORE USER REG'S    @ZA04457
OCR133   BR    ENTRYR              BRANCH TO USER SPECIFIED ADDRESS
*
OCR135   NI    DCBIFLGS,ERRFLGS    RESET ERRFLGS IN DCBIFLGS
OCR140   TM    DCBEROPT,ABE        IS ABEND OPTION SPECIFIED
         BZ    OCR150              NO, BRANCH TO TEST FOR SKP
*
         OI    DCBCIND2,ABEND2ND   SET 2ND TIME SWITCH FOR ABEND
         LA    PARA0R,ONE          LOAD 1 TO REG 0
         SLL   PARA0R,SYSCC        SHIFT LEFT 12 TO SET COMP CODE
         B     OCR147              BRANCH TO GO TO THE EOV ROUTINE
*
OCR145   LR    PARA0R,IOBADR       SET REGISTER 0 FOR EOV
***********************************************************************
*
*        EXIT TO EOV
*
***********************************************************************
OCR147   EOV   (DCBR)              GO TO END OF VOLUME ROUTINE
*                                  NO RETURN
***********************************************************************
*
OCR150   TM    DCBEROPT,SKP        IS SKIP OPTION SPECIFIED
         BZ    OCR170              NO, BRANCH AND ASSUME ACC OPTION
         MVI   DCBEIB+1,ZERO       CLEAR RETURN CODE IF RECORD IS SKIPD
         L     EOBADR,DCBEOBAD     LOAD END OF BLOCK ADDRESS
         LA    WORK2R,CCWSTART(IOBADR)  LOAD ADDRESS OF THE C P
         SH    EOBADR,CNT(WORK2R)  SUBTRACT RECORD SIZE IE BUFFER SIZE
*
         TM    DCBRECFM,FORUB      TEST FOR FIXED OR UNDEFINED FORMAT
         BO    OCR160              BRANCH IF FIXED OR UNDEFINED
         SH    EOBADR,FOUR         IF VARIABLE,SUBTRACT FOUR MORE BECS
*                                  CCW COUNT DOES NOT INCLUDE PREFIX
OCR160   ST    EOBADR,DCBEOBAD     STORE NEW END OF BLOCK ADDRESS
*
 EJECT
***********************************************************************
*
*        RESTART PROCEDURE
*
***********************************************************************
OCR170   L     WORK1R,CPADR(IOBADR) LOAD CHANNEL PROGRAM ADDRESS
         MVC   TEMCCW(CCWL,IOBADR),GNLCCW(WORK1R) MOVE GNL CCW TO TEMP
         NI    FLAG(IOBADR),CHAINOFF TURN CHAINING BIT OFF
         LA    WORK2R,TEMCCW(IOBADR) LOAD ADDRESS OF TEMP GNL CCW
         ST    WORK2R,CPADR(IOBADR) STORE CHANNEL PROGRAM ADDR TO IOB
         EXCP  IOSIOB(IOBADR)      EXECUTE CHANNEL PROGRAM
         WAIT  ECB=ECB(IOBADR)     WAIT FOR COMPLETION OF EVENT
         ST    WORK1R,CPADR(IOBADR)  STORE ADDR OF ORIGINAL CHANNEL PRG
         CLI   ECB(IOBADR),PERROR  CHECK FOR A PERMANENT ERROR
         BE    OCR1261             IF AN ERROR, BRANCH TO PROCESS
         CLI   ECB(IOBADR),PERROR44 DID PERM ERROR OCCUR       @ZA00774
         BE    OCR1261             YES,BRANCH                  @ZA00774
         LR    WORK1R,IOBADR       COPY IOB ADDRESS
OCR180   L     WORK1R,0(WORK1R)    GET NEXT IOB ADDRESS IN CHAIN
         LA    WORK1R,0(WORK1R)    CLEAR HI ORDER BYTE
         CR    IOBADR,WORK1R       HAS IOB BEEN SCHEDULED
         BE    OCR190              BRANCH TO SEE IF ANY RECS IN BUFFER
*
*                                  RESCHEDULE THE BUFFER
         EXCP  IOSIOB(WORK1R)      EXECUTE CHANNEL PROGRAM
         B     OCR180              BRANCH  TO CHECK NEXT IOB
*
OCR190   CLC   DCBRECAD+1(ADDRESS),DCBEOBAD+1 ARE THERE ANY RECORDS IN
*                                       BUFFER-MIGHT HAVE BEEN SKIPPED
         BL    OCR085              IF RECORDS IN BUFFER,RETURN
*                                  RESCHEDULE THE BUFFER
         EXCP  IOSIOB(IOBADR)      EXECUTE CHANNEL PROGRAM
         B     OCR045              IF NONE IN THIS BUFFER, GO GET NEXT
 EJECT
***********************************************************************
*
*        ERROR INDICATOR BYTE (EIB) ROUTINE
*
***********************************************************************
OCR200   MVI   DCBEIB,ZERO         CLEAR EIB
         L     WORK3R,DCBERRCN     LOAD FROM DCBERRCN POSSIBLE AREA ADR
*
         TM    SENSE0(IOBADR),NONREC DID NON-RECOVERY ERROR OCCUR
         BZ    OCR210              NO, BRANCH
         OI    DCBEIB,NRBIT        SET NON-RECOVERY BIT
*
OCR210   TM    SENSE0(IOBADR),EQUCHK DID AN EQ CHK ERROR OCCUR
         BZ    OCR220              NO, BRANCH
         LTR   WORK3R,WORK3R       IS AN ERROR COUNT ADDRESS SPECIFIED
         BZ    OCR215              NO, BRANCH
         L     WORK4R,PERMEC(WORK3R) LOAD PERMANENT EQUIP CHK COUNT
         LA    WORK4R,ONE(WORK4R)    INCREMENT COUNT BY 1
         ST    WORK4R,PERMEC(WORK3R) STORE  COUNT
*
OCR215   OI    DCBEIB,ECBIT        SET EQUIPMENT CHECK BIT IN DCBEIB
*
OCR220   TM    SENSE0(IOBADR),DATACHK DID A DATA CHECK ERROR OCCUR
         BZ    OCR230              NO,BRANCH
         OI    DCBEIB,DCBIT        SET DATA CHECK BIT IN DCBEIB
*
OCR230   TM    SENSE0(IOBADR),KCORR DID KEYBOARD CORRECTION OCCUR
         BZ    OCR240              NO,BRANCH
         OI    DCBEIB,KCHEBIT      SET KEYBOARD CORRECTION BIT DCBEIB
*
OCR240   TM    STATUS+1(IOBADR),WLR DID WRONG LNGTH RECORD OCCUR
         BCR   8,RETR              NO,BRANCH
         OI    DCBEIB,WLRBIT       SET WRONG LNGTH REC BIT IN DCBEIB
         LTR   WORK3R,WORK3R       IS AN ERRCNT ADDRESS SPECIFIED
         BCR   8,RETR              NO,BRANCH
         L     WORK4R,PERMWLR(WORK3R) LOAD PERMANENT WLR COUNT
         LA    WORK4R,ONE(WORK4R)    INCREMENT COUNT BY 1
         ST    WORK4R,PERMWLR(WORK3R)  STORE COUNT
*
OCR250   BR    RETR                RETURN TO CALLING ROUTINE
 EJECT
***********************************************************************
*
*        COMPLETION CODE ROUTINE
*
***********************************************************************
OCR300   SR    ENTRYR,ENTRYR       CLEAR RETURN CODE REGISTER
         TM    DCBEIB,EIBERR       TEST FOR ERROR INDICATED IN THE EIB
         BZ    OCR310              IF NONE,BRANCH
         LA    ENTRYR,FOURRC       SET A RETURN CODE OF FOUR
*
OCR310   TM    SENSE0(IOBADR),COMREJ TEST FOR COMMAND REJECT
         BNZ   OCR315                IF YES, BRANCH TO SET RETURN CODE
         TM    SENSE1(IOBADR),INVCOM TEST FOR INVALID COMMAND
         BZ    OCR320                IF NOT, BRANCH
OCR315   LA    ENTRYR,EIGHTRC      SET  RETURN CODE OF EIGHT
*
OCR320   TM    SENSE0(IOBADR),SENS0ERR  TEST FOR ERRORS IN SENSE
         BNZ   OCR325              BRANCH IF ERRORS ARE FOUND
         TM    STATUS+1(IOBADR),STAT1ERR TEST FOR ERRORS IN STATUS
         BCR   8,RETR              NO,BRANCH
OCR325   LA    ENTRYR,TWELVERC     SET RETURN CODE OF TWELVE
*
OCR330   BR    RETR                RETURN TO CALLING ROUTINE
 EJECT
***********************************************************************
*
*        ERROR COUNTER ROUTINE
*
***********************************************************************
*
OCR400   L     WORK4R,DCBERRCN     LOAD ADDRESS OF COUNTERS
         MVI   DCBEIB,ZERO         RESET EIB BYTE TO ZERO        A33940
         LTR   WORK4R,WORK4R       ARE COUNTERS SPECIFIED
         BCR   8,RETR              NO,BRANCH
*
         SR    WORK3R,WORK3R       CLEAR COUNT REGISTER
         IC    WORK3R,DCRETRY(IOBADR) LOAD DATA CHECK RETRY COUNT
         A     WORK3R,DCCOUNT(WORK4R) INCREMENT BY NUMBER OF RETRYS
         ST    WORK3R,DCCOUNT(WORK4R) STORE DATA CHECK RETRY COUNT
*
         SR    WORK3R,WORK3R       CLEAR COUNT REGISTER
         IC    WORK3R,ECRETRY(IOBADR) LOAD EQUIP CHECK RETRY COUNT
         A     WORK3R,ECCOUNT(WORK4R) INCREMENT BY NUMBER OF RETRYS
         ST    WORK3R,ECCOUNT(WORK4R) STORE EQUIP CHECK RETRY COUNT
*
         SR    WORK3R,WORK3R       CLEAR COUNT REGISTER
         IC    WORK3R,WLRETRY(IOBADR)  LOAD WLR RETRY COUNT
         A     WORK3R,WLRCOUNT(WORK4R)  INCREMENT BY NUMBER OF RETRYS
         ST    WORK3R,WLRCOUNT(WORK4R)  STORE WLR RETRY COUNT
         XC    DCRETRY(3,IOBADR),DCRETRY(IOBADR)  CLEAR IOB COUNTERS
*
         TM    SENSE0(IOBADR),KCORR DID KEYBOARD CORRECTION OCCUR
         BCR   8,RETR              NO,BRANCH
         L     WORK3R,KCCOUNT(WORK4R) LOAD KC COUNT
         LA    WORK3R,ONE(WORK3R)  INCREMENT BY ONE
         ST    WORK3R,KCCOUNT(WORK4R) STORE UPDATED KC COUNT
*
OCR410   BR    RETR                RETURN TO CALLING ROUTINE
 EJECT
***********************************************************************
*
*
         CNOP  0,8                 PAD TO DOUBLE WORD
         DCBD  DSORG=PS,DEVD=OR                                @YM00635
         END
