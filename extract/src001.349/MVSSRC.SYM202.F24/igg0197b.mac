* /* START OF SPECIFICATIONS ****
*01* PROCESSOR = ASSEMXF-370R
**** END OF SPECIFICATIONS ***/
         TITLE 'IGG0197B  OPEN EXECUTOR '
IGG0197B CSECT
***********************************************************    @YM00638
*MODULE-NAME                                                   @YM00638
* IGG0197B                                                     @YM00638
*                                                              @YM00638
*DESCRIPTIVE-NAME                                              @YM00638
* OCR OPEN EXECUTOR, STAGE 3                                   @YM00638
*                                                              @YM00638
*COPYRIGHT                                                     @ZA00775
* NONE                                                         @YM00638
*                                                              @YM00638
*CHANGE-ACTIVITY                                               @YM00638
*
* RELEASE 20 ADDITIONS/CHANGES/DELETIONS
* RELEASE 21 ADDITIONS/CHANGES/DELETIONS
* RELEASE 22 ADDITIONS/CHANGES/DELETIONS
* RELEASE 23 ADDITIONS/CHANGES/DELETIONS
* RELEASE 24 ADDITIONS/CHANGES/DELETIONS
* RELEASE 25 ADDITIONS/CHANGES/DELETIONS
* RELEASE 26 ADDITIONS/CHANGES/DELETIONS
* RELEASE 27 ADDITIONS/CHANGES/DELETIONS
*A069500,150500,252300,252600,314300,314600,320500,359300,      Y02967$
*A359600,361500,390100 - 390600,404500                          Y02967*
*C148000,277000 - 277600,439000 - 440200,463000 - 473000,       Y02967*
*C477000 - 478200                                               Y02967*
*                                                                     *
* STATUS - CHANGE LEVEL 00  RELEASE 20
*                                                                     *
*FUNCTION/OPERATION                                                   *
* IT LOADS DEVICE DEPENDENT ROUTINES IDENTIFIED BY A MASK SET IN STAGE*
*   2 IN DCBCNTRL                                                     *
* IT ENTERS THE ADDRESS OF THESE ROUTINES INTO THE DCB                *
* IT ENTERS THE IDENTIFICATION OF EACH ROUTINE LOADED INTO THE DEBSUBED
*   FIELD OF THE DEB                                                  *
* IT COMPLETES THE CHANNEL PROGRAMS BY INSERTING.A BUFFER ADDRESS INTO*
*   EACH CCW (QSAM)                                                   *
* IT WRITES A MOUNT MESSAGE TO THE OPERATOR INDICATING THE NAME       *
*   ASSOCIATED WITH THE VOLUME TO BE MOUNTED. IF NO NAME IS SPECIFIED *
*   IN THE VOLUME PARAMETER ON THE USERS DD CARD, THE NAME OCRINP IS  *
*   USED                                                              *
* IT ISSUES A NO-OP COMMAND TO CLEAR STATUS AND SENSE
* IT SEARCHES THE WTG TABLE TO PASS CONTROL TO ANOTHER EXECUTOR.      *
*   IF THE WTG TABLE HAS NO OTHER ENTRIES, THE EXECUTOR RETURNS CONTROL
*   TO THE OPEN ROUTINE.                                              *
*                                                                     *
*ENTRY POINT
*        LABEL  OCR010
*ENTRY METHOD- ENTERED FROM IGG0197A BY USE OF THE XCTL MACRO         *
*                                                                     *
*INPUT  SEE DESCRIPTION OF REGISTERS, USER'S DCB AND IOB'S            *
*                                                                     *
*OUTPUT  SEE DESCRIPTION OF REGISTERS, USER'S DCB AND IOB'S, WRITE TO *
*         OPERATOR MESSAGE                                            *
*                                                                     *
*EXITS-NORMAL  XCTL TO IGG0190S  (OPEN)                               *
*                                                                     *
*EXITS-ABNORNAL  SVC 13, ABEND 013 -INSUFFICIENT BUFFERS AVAILABLE    *
*                   IN BUFFER POOL TO SATISFY DCB BUFFER REQUIREMENTS *
*                                                                     *
*TABLES/WORKAREAS-WHERE TO GO TABLE                                   *
*                                                                     *
*ATTRIBUTES  REENTRANT, REUSABLE                                      *
***********************************************************************
*                                                                     *
*REGISTER CONVENTIONS USED THROUGH OUT ALL OPEN PASSES                *
*                                                                     *
***********************************************************************
RE       EQU   0                   WORK REG 5
RF       EQU   1                   WORK REG 6
RDCB     EQU   2                   DCB REGISTER
RBASE    EQU   3                   BASE REGISTER
RCORE    EQU   4                   WORK AREA ADDRESS
RPAR     EQU   5                   TOP OF PARAMETER LIST
RWTG     EQU   6                   TOP OF WTG TABLE
RPARC    EQU   7                   CURRENT PARAMETER
RWTGC    EQU   8                   CURRENT TRANS LOAD
RTIOT    EQU   9                   USED HERE AS WRK REG AND COMM VECT
RUCB     EQU   10                  USED ASICOUNTER AND UCB ADDRESS
RDEB     EQU   11                  DEB ADDRESS
RB       EQU   12                  WORK REG 1
RC       EQU   13                  WORK REG 2
RD       EQU   14                  WORK REG 3
RJ       EQU   15                  WORK REG 4
RTCB     EQU   15                       TCB REGISTER             Y02967
***********************************************************************
*
*        OFFSET EQUATES FOR WTG  AND XCTL TABLES
*                  ALSO FOR MOUNT MESSAGE AND UCB
*
***********************************************************************
WKAOFF   EQU   4                   OFFSET TO WORK AREA IN WTG TABLE
WTGID    EQU   6                   OFFSET TO ID IN WTG TABLE
WTGTTR14 EQU   14                       OFFSET TOTTR IN WTG TABLE
TEMP0    EQU   24                  OFFSET TO TEMP STORAGE IN WTG TABLE
TOTALOFF EQU   24                  OFFSET OF TOTAL TEXT LNGH IN WTG TAB
TEMP     EQU   25                  OFFSET TO TEMP STORAGE IN WTG TABLE
TEXTOFF  EQU   27                  OFFSET TO FIRST TEXT IN WTG TAB
WAOFF    EQU   32                  OFFSET OF WTG TABLE FROM BLDL TABLE
IDOFF    EQU   0                   OFFSET TO ID IN IDTTRL ENTRY
TTROFF   EQU   2                   OFFSET TO TTR IN IDTTRL ENTRY
LOFF     EQU   5                   OFFSET TO L IN IDTTRL ENTRY
UNIT     EQU   14                  UNIT POSITION IN MESSAGE
VOLID    EQU   18                  VOLUME PARAMETER IN MESSAGE
UNAME    EQU   13                  UNIT OFFSET IN UCB
QSAMCP   EQU   48                  OFFSET OF QSAM CHANNEL PROGRAM IS 48
***********************************************************************
*
*        LENGTHS
*
***********************************************************************
WGOFF    EQU   8                   LENGTH OF ENTRY IN WTG TABLE
PLOFF    EQU   4                   LENGTH OF ENTRY IN OPEN PARAM LIST
DEBSIZE  EQU   32                  SIZE OF THE DEB
ADDRESS  EQU   3                   LENGTH OF AN ADDRESS
CCWL     EQU   8                   LENGTH OF ONE CCW
CCWL2    EQU   16                  LENGTH OF A PAIR OF CCWS
WORD     EQU   4                   LENGTH OF DCBCNTRL - 4 BYTES
DOUBLEWD EQU   8                   DOUBLE WORD LENGTH IS 8 BYTES
UNITL    EQU   3                   LENGTH OF UNIT ADDRESS IS 3
VOLUMEL  EQU   6                   LENGTH OF VOLUME PARAMETER IS 6
IDLNGH   EQU   2                   LENGTH OF OPEN EXECUTOR ID
TTRLNGH  EQU   3                   LENGTH OF OPEN EXECUTOR TTR
IDTTRLL  EQU   6                   LENGTH OF IDTTRLL FIELD
TOTALL   EQU   3                   INDICATES LENGTH OF TOTAL TEXT
TEXTL    EQU   2                   INDICATES LENGTH OF FIRST TEXT REC
TXTOTL   EQU   5                   LENGTH OF TEXTL AND TOTALL
***********************************************************************
*
*        SHIFTS
*
***********************************************************************
BITS8    EQU   8                   USED TO SHIFT ONE BYTE
MULT8    EQU   3                   SHIFT TO MULTIPLY BY 8
BITS12   EQU   12                  USED TO SHIFT LEFT 12 BITS
***********************************************************************
*
*        CONSTANTS
*
***********************************************************************
QSAMB    EQU   X'01'               QSAM INDICATOR
ABENDCOD EQU   X'13'               OPEN ABEND SYSTEM CODE
BLANK    EQU   X'40'               USED TO CHECK FOR A BLANK CHARACTER
X5C      EQU   X'5C'               1288 DEVD ENTRY IN DCB
ZERO     EQU   0                   USED AS A ONE BYTE HEX 0 CONSTANT
ONE      EQU   1                   USED AS A CONSTANT OF 1
***********************************************************************
*
*        EQUATES FOR EXCP OF NO-OP COMMAND
*
***********************************************************************
ECB      EQU   4                   OFFSET OF ECB IN THE IOB
IOSIOB   EQU   8                   OFFSET OF THE IOS IOB IN THE ACCESS
*                                   METHOD IOB
CPADR    EQU   24                  OFFSET OF CHAN PROG ADDR IN IOB
TEMCCW   EQU   40                  OFFSET OF NO-OP CCW IN IOB
ERRFLGS  EQU   X'3F'               USED TO TURN OFF IOS ERRFLGS
***********************************************************************
***********************************************************************
 EJECT
         BALR  RBASE,0             LOAD BASE REGISTER
         USING OCR010,RBASE        MODULE BASE
         USING IHADCB,RDCB         DCB  BASE
         USING DEBBASIC,RDEB           DEB BASE REGISTER         Y02967
         USING FORCORE,RCORE       CORE BASE
         USING CVT,RF              CVT  BASE
         USING TCB,RTCB                 TCB BASE                 Y02967
         USING WTG,RWTG                                        @YM02503
*
OCR010   L     RDCB,0(RPARC)       GET DCB ADDRESS
         LA    RDCB,0(RDCB)        CLEAR HIGH ORDER BYTE
         L     RDEB,DCBDEBAD       GET DEB ADDRESS
         L     RCORE,WKAOFF(RWTGC) GET WORK AREA ADDRESS
*
         SR    RUCB,RUCB           CLEAR REGISTER
         SR    RF,RF               CLEAR REGISTER
         IC    RUCB,DEBNMEXT       GET NUMBER OF EXTENTS
         IC    RF,DEBEXSCL         GET SCALING FACTOR
         SLL   RUCB,0(RF)          SHIFT ACCORDING TO EXTENT SIZE
         IC    RF,DEBAMLNG         GET ACCESS METHOD LENGTH
         LA    RUCB,0(RF,RUCB)     ADD TO POINT TO SUBRT ID FIELD
         LA    RUCB,DEBSIZE(RUCB,RDEB) ADD  BASIC DEB SZ TO DEB ADDRESS
*
* RUCB NOW POINTS TO THE SUBROUTINE ID FIELD IN THE DEB
***********************************************************************
*
*        LOAD ACCESS METHOD MODULES
*
***********************************************************************
*
         MVI   0(RWTGC),ZERO       ZERO CURRENT ID ENTRY
*
         BAL   RF,POINT2ID         POINT TO THE END OF BLOCK ROUTINE
*
         BAL   RC,LOADMOD          LOAD THE EOB ROUTINE
*
         TM    DCBCIND2,QSAMB      IS QSAM USED
         BZ    OCR020              NO,BRANCH
         MVC   DCBEOB+1(ADDRESS),TEMP(RWTG) MOVE EOB ADDRESS TO DCB
         B     OCR030              BRANCH TO CONTINUE PROCESSING
*
OCR020   MVC   DCBEOBR+1(ADDRESS),TEMP(RWTG) MOVE EOB ADDRESS TO DCB
*
OCR030   BAL   RF,POINT2ID         POINT TO GET/READ ROUTINE
*
         BAL   RC,LOADMOD          LOAD GET/READ MODULE
*
         MVC   DCBGET+1(ADDRESS),TEMP(RWTG) MOVE GET/READ ADDRESS 2 DCB
*
         BAL   RF,POINT2ID         POINT TO GERR/CHECK ROUTINE
*
         BAL   RC,LOADMOD          LOAD  GERR/CHECK MODULE
*
         MVC   DCBGERR+1(ADDRESS),TEMP(RWTG) MOVE GERR/CHECK ADDRESS TO
*                                            DCB
         BAL   RF,POINT2ID         POINT TO CNTRL ROUTINE
*
         LTR   RC,RC               IS THERE A CNTRL ID
         BNZ   OCR040              YES, BRANCH
*
         XC    DCBCNTRL(WORD),DCBCNTRL CLEAR PARAMETER LIST
         OI    DCBCNTRL+3,ONE      SET VECTOR TO 1
         B     OCR050              BRANCH TO CONT PROCESSING
*
OCR040   BAL   RC,LOADMOD          LOAD CNTRL ROUTINE
*
         MVC   DCBCNTRL+1(ADDRESS),TEMP(RWTG) MOVE CNTRL ROUTINE TO DCB
OCR050   MVC   DCBEROPT(ONE),DXCCW6  REPLACE QSAM ERROR OPTIONS
         TM    DCBCIND2,QSAMB      THIS A QSAM DCB
         BZ    OCR060              NO, BRANCH
*
         LA    RB,RDLNEID          LOAD ADDRESS OF  RDLNE ID
         BAL   RC,LOADMOD          LOAD THE RDLNE ROUTINE
*
         MVC   DCBRDLNE+1(ADDRESS),TEMP(RWTG) MOVE RDLNE ADDRESS TO DCB
*
         B     OCR080              BRANCH TO CONT PROCESSING
*
OCR060   CLI   DCBDEVT,X5C         IS THE DEVICE A 1288
         BE    OCR070              YES, BRANCH
*
         LA    RB,DSPLYID          GET THE ADDRESS OF THE DSPLY ID
         BAL   RC,LOADMOD          LOAD THE DSPLY ROUTINE
*
         MVC   DCBDSPLY+1(ADDRESS),TEMP(RWTG) MOVE DSPLY ADDRESS TO DCB
*
OCR070   LA    RB,RESCNID          GET THE ADDRESS OF THE RESCN ID
         BAL   RC,LOADMOD          LOAD THE RESCN ID
*
         MVC   DCBRESCN+1(ADDRESS),TEMP(RWTG) MOVE RESCN
*
OCR080   L     RUCB,DCBIOBA        LOAD FIRST IOB ADDRESS
         LR    RTIOT,RUCB          SAVE ADDRESS IN WORK REGISTER
*
         TM    DCBCIND2,QSAMB      THIS DCB USING QSAM
         BZ    OCR095              NO,BRANCH
*
         XC    DCBEOBAD(DOUBLEWD),DCBEOBAD FORCE EOB CONDITION
         SR    RB,RB               CLEAR REGISTER TO INSERT COUNT
         IC    RB,DCBBUFNO         GET NUMBER OF BUFFERS
         LR    RD,RTIOT            SAVE FIRST IOB ADDRESS
OCR085   LA    RTIOT,QSAMCP(RTIOT) POINT TO CHANNEL PROGRAM
*                                    ASSUME  NORMAL SCHEDULINGG=8
*                                    ASSUME  IOB=32
*                                    ASSUME  CNTRL & RDLNE CCWS =8
         SR    RE,RE               CLEAR DIVIDE REGISTER
         LH    RF,DCBBUFL          LOAD BUFFER LENGTH
         LH    RJ,DCBLRECL         LOAD RECORD LENGTH
         DR    RE,RJ               CALC NUMBER OF LINES PER BUFFER
         L     RC,DCBBUFCB         LOAD ADDRESS OF BUFFER CONTROL BLOCK
         MODESET KEYADDR=DXUKEY,WORKREG=15   GET USER KEY      @YM02503
         L     RJ,0(RC)            GET A BUFFER ADDRESS
         LTR   RJ,RJ               VALID BUFFER ADDRESS
         BZ    OCRABEND            NO, BRANCH TO ABEND
         MVC   ONE(ADDRESS,RC),ONE(RJ) UPDATE BUFCB ADDRESS
         AH    RJ,DCBLRECL         ADJUST BUFFER FOR READ BACKWARD
         BCTR  RJ,0                DECREMENT BY ONE
*
OCR090   IC    RE,0(RTIOT)         SAVE OP CODE
         ST    RJ,0(RTIOT)         STORE BUFFER ADDRESS TO CCW
         STC   RE,0(RTIOT)         RESTORE OP CODE
*
         AH    RJ,DCBLRECL         UPDATE BUFFER ADDRESS
         LA    RTIOT,CCWL2(RTIOT)  UPDATE CCW ADDRESS
         BCT   RF,OCR090           IF MORE CCWS, CONTINUE
*
         L     RTIOT,0(RD)         GET NEXT IOB TO INITIALIZE
         LR    RD,RTIOT            UPDATE IOB POINTER
         BCT   RB,OCR085           IF MORE IOBS, CONTINUE
*
***********************************************************************
*
*        WRITE MOUNT MESSAGE
*
***********************************************************************
OCR095   EQU   *                                                 Y02967
         MODESET EXTKEY=DATAMGT         PUT SYSTEM IN OPEN KEY   Y02967
         LA    RF,MESSAGEA+48           GET WTO AREA           @YM02503
*
         MVC   0(WTOSIZE,RF),WTOBEGIN  MOVE WTO LIST FORM TO CORE
*
*
         L     RUCB,DEBTCBAD+32         GET UCB ADDRESS          Y02967
         MVC   UNIT(UNITL,RF),UNAME(RUCB) MOVE UNITNAME TO MESSAGE
*
*
         CLI   JFCBVOLS,BLANK      IS VOLID SPECIFIED
         BE    OCR100              NO,BRANCH
*
         MVC   VOLID(VOLUMEL,RF),JFCBVOLS MOVE SPECIFIED VOLID TO MESAG
         B     OCR110              BRANCH TO CONT PROCESSING
*
OCR100   MVC   VOLID(VOLUMEL,RF),OCRINP  MOVE DEFAULT ID TO MESSAGE
*
OCR110   LR    RUCB,RF             SAVE ADDRESS OF GETMAIN CORE
***********************************************************************
*
         WTO   MF=(E,(RF))         PARAMETER LIST ADDRESS IN REG.1
*
***********************************************************************
         ST    RF,DCBWTOID         STORE WTO MESSAGE IDENTIFICATION
***********************************************************************
*
*        ISSUE NO-OP TO CLEAR STATUS AND SENSE
*         BY BUILDING AN IOB IN THE OPEN WORKAREA AND PUTTING  @YM02503
*        THE DATA MANAGEMENT COPIED DCB ADDRESS INTO THE IOB. THIS
*        HAS TO BE DONE BECAUSE THE DEB HAS DATA MANAGEMENT DCB
*        ADDRESS IN IT AT THIS TIME.THE USER IOB CANNOT BE USED
*        AT THIS TIME BECAUSE THE IOD AND DCB WOULD BE IN TWO  @YM02503
*        DIFFERENT PROTECT KEYS.THIS CONDITION WOULD CAUSE     @YM02503
*        A PROTECTION CHECK AT EXCP TIME                       @YM02503
*
***********************************************************************
         LA    RB,MESSAGEA              GET IOB ADDRESS        @YM02503
         XC    0(40,RB),0(RB)           ZERO OUT IOB AREA      @YM02503
         ST    RB,0(RB)                 ONLY IOB IN CHAIN      @YM02503
         OI    0(RB),1                  FIRST IOB              @YM02503
         LA    RD,4(RB)                GET ECB ADDRESS         @YM02503
         ST    RD,12(RB)                PUT ECB ADDRESS IN IOB @YM02503
         OI    0(RD),X'7F'              SET ECB COMPLETE       @YM02503
         OI    8(RB),X'02'              SET UNRELATED FLAG ON IN IOB
         ST    RDCB,X'1C'(RB)           PUT D.M. DCB ADDR IN IOB
         LA    RD,40(RB)                GET IOB CCW ADDR       @YM02503
         ST    RD,X'18'(RB)             PUT CCW ADDR IN IOB    @YM02503
         MVC   TEMCCW(CCWL,RB),NOPCCW SET UP NO-OP CCW
         LA    RD,TEMCCW(RB)       LOAD ADDRESS OF NO-OP CCW
         ST    RD,CPADR(RB)        STORE ADDRESS OF NO-OP IN IOB
         EXCP  IOSIOB(RB)          EXECUTE THE NO-OP
         WAIT  ECB=ECB(RB)         WAIT FOR COMPLETION
         NI    DCBIFLGS,ERRFLGS    RESET ERROR FLAGS IF ANY
         IECRES INIT,DCBCOPY=FRWKAR,STM=(0,14,WTGPREFX)        @YM02503
         L     RDEB,DCBDEBAD           GET DEB ADDRESS         @YM02503
         MVC   DEBDCBAD+1(3),DXUDCBAD+1 PUT USER DCB ADDR IN DEB
***********************************************************************
*
*        GO TO NEXT EXECUTOR OR DO THIS ONE AGAIN
*
***********************************************************************
*
RELOOP   LA    RWTGC,WGOFF(RWTGC)   INCREMENT CURRENT WTG ENTRY
         LA    RPARC,PLOFF(RPARC)   INCREMENT CURRENT DCB ENTRY
         CLC   0(IDLNGH,RWTGC),AMIDCNST  THIS ROUTINE NEEDED AGAIN
         BCR   8,RBASE              YES, BRANCH TO BEGINNING
*
         CLC   0(IDLNGH,RWTGC),OPIDCNST END OF TABLE
         BC    7,RELOOP            NO,CHECK NEXT ENTRY
*
         LR    RPARC,RPAR          REINITIALIZE DCB LIST POINTER
         LA    RWTGC,WAOFF(RWTG)   REINITIALIZE WTG LIST POINTER
CHECK00  CLI   0(RWTGC),ZERO       IS THIS ENTRY COMPLETE
         BC    7,XCTLRTN           IF NOT, TRANSFER CONTROL
*
         LA    RWTGC,WGOFF(RWTGC)   GET NEXT WTG ENTRY
         LA    RPARC,PLOFF(RPARC)   GET NEXT DCB ENTRY
         BC    15,CHECK00           BRANCH TO CHECK NEXT ENTRY
***********************************************************************
*
*        SUBROUTINE TO LOAD MODULES
*
***********************************************************************
LOADMOD  EQU   *                                               @YM02503
         MVC   WTGTTR14(TTRLNGH,RWTG),TTROFF(RB) TTR TO DE     @YM02503
         MVC   WTGID(IDLNGH,RWTG),IDOFF(RB) MOVE ID TO DE
         SR    RF,RF               CLEAR RF
         IC    RF,LOFF(RB)         LOAD DOUBLE WORD LENGTH
         SLL   RF,MULT8            MULTPY BY EIGHT FOR BYTE LENGTH
         ST    RF,TEMP0(RWTG)      TEMP. STORE OF LENGTH
         MVC   TOTALOFF(TOTALL,RWTG),TEMP(RWTG) STORE 3 BYTE TOTAL LNGH
         MVC   TEXTOFF(TEXTL,RWTG),TEMP(RWTG) STORE 2 BYTE TEXT LENGTH
         L     RF,CVTPTR           GET COMM VECTOR POINTER
         L     RF,CVTSVDCB         GET SVC LIBS DCB ADR
*
         MODESET KEYADDR=DXUKEY,WORKREG=15   GET USER KEY      @YM02503
         LOAD  DE=(RWTG),DCB=(RF)  LOAD ACCESS METHOD ROUTINE
*
         MODESET EXTKEY=DATAMGT         PUT SYSTEM IN OPEN KEY   Y02967
         ST    RE,TEMP0(RWTG)      TEMP STORE OF ROUTINE ADDRESS
         MVC   0(IDLNGH,RUCB),0(RB) STORE ROUTINES ID IN DEB
         LA    RUCB,IDLNGH(RUCB)   UPDATE SUBROUTINE POINTER
         SR    RD,RD               CLEAR REG
         IC    RD,DEBNMSUB         GET NO.OF SUBRTNS LOADED SO FAR
         LA    RD,ONE(RD)          ONE MORE SUBROUTINE LOADED
         STC   RD,DEBNMSUB         STORE NEW TOTAL OF SUBRTNS LOADED
         BR    RC                  RETURN TO CALLING ROUTINE
**********************************************************************
*
*        SUBROUTINE TO CONVERT THE 2 BYTE IDS IN DCBCNTRL TO ID
*        ADDRESSES IN THE XCTL TABLE
*
**********************************************************************
POINT2ID SR    RC,RC               CLEAR RC
         LA    RE,TABLE            GET ADDRESS OF TTR TABLE
         LA    RB,IDTTRLL          SIX BYTE FIELD
         IC    RC,DCBCNTRL+3       GET TTR NO. FROM DCBCNTRL+3
         L     RJ,DCBCNTRL         SHIFT IDS
         SRL   RJ,BITS8                 RIGHT BY
         ST    RJ,DCBCNTRL                   ONE BYTE
         MR    RB,RB               CALCULATE WHERE TTR IS (6 XID)
         LR    RB,RC               LOAD THE PRODUCT
         AR    RB,RE               ADD THE BEGINNING ADDR OF THE TTR
         BR    RF                     TABLE, AND RETURN
*
**********************************************************************
*
XCTLRTN  MVC   TEMP0(TXTOTL,RWTG),XCTLCON RESTORE TOTAL AND TEST LNGHS
         MVC   WTGID(IDLNGH,RWTG),IDOFF(RWTGC) STORE ID IN WTG TABLE
         MVC   WTGTTR14(TTRLNGH,RWTG),TTROFF(RWTGC) TTR TO WTG TABLE
*
         LA    RJ,DXCCW12          SET UP FOR XCTL
*
         XCTL  DE=(RWTG),SF=(E,(RJ))  TRANSFER CONTROL TO NXT EXECUTOR
*
**********************************************************************
*
*
OCRABEND LA    RF,ABENDCOD         GET ABEND CODE
         SLL   RF,BITS12           SET UP REG FOR ABEND
         ABEND (RF),DUMP           ABEND WITH A SYSTEM COMPLETION CODE
*
MOVEDCB  MVC   0(0,RJ),0(RDCB)         MOVE D.M. DCB TO USER AREAY02967
**********************************************************************
OPIDCNST DC    C'0S'               END OF TABLE ID
AMIDCNST DC    C'7B'               ID OF THIS EXECUTOR
OCRINP   DC    C'OCRINP'           DEFAULT VOLUME PARAMETER
XCTLCON  DC    X'0004000400'       TOTAL AND TEXT LENGTH OF OPEN MODS
**********************************************************************
****     WTO LIST FORM--MOVED TO GOTTEN CORE, THE MESSAGE COMPLETED,
****                               AND THEN EXECUTED
         CNOP  0,8                 FORCE TO A DOUBLE WORD BOUNDARY
WTOBEGIN EQU   *                   WTO BEGINS ON A DOUBLE WORD
         WTO   'IEC001E M    ,      ',MF=L,ROUTCDE=7,DESC=3    @ZA00775
         CNOP  0,8                 FORCE TO A DOUBLE WORD BOUNDARY
WTOEND   EQU   *                   WTO ENDS ON A DOUBLE WORD BOUNDARY
***********************************************************************
NOPCCW   DC    X'0300000000000001' NO-OP COMMAND ON DOUBLE WORD BNDARY
***********************************************************************
WTOSIZE  EQU   WTOEND-WTOBEGIN     LENGTH OF WTO LIST FORM
* +0  1 BYTE
* +1  2 BYTES  MESSAGE LENGTH
* +3  1 BYTE   MCSFLAGS
* +4  MAX OF 72 BYTES  MESSAGE ID
*                      MESSAGE TEXT
*                TOTAL = 24 BYTES
* +28 2 BYTES  DESCRIPTOR CODE
* +30 2 BYTES  ROUTING CODE
* +32 2 BYTES  SVC 35
*
*  NOTE    UNIT ADDRESS AT +14
*          VOLUME PARAM AT +18
**********************************************************************
*
* BELOW ARE ROUTINES USED BY OCR PROCESSING
*
***********************************************************************
*                                                                Y02967
*                                                                Y02967
ZAPSZAPS DC    8C'ZAPSZAPS'             WORKAREA SPACE           Y02967
*
TABLE    DC    C'      '           FIRST ENTRY FILLER
*
GETLFID  DC    C'VA    '           ID-TTR-L  1
GETLVUID DC    C'VB    '           ID-TTR-L  2
GETMFID  DC    C'VC    '           ID-TTR-L  3
GETMVUID DC    C'VD    '           ID-TTR-L  4
SYNCHID  DC    C'VE    '           ID-TTR-L  5
READID   DC    C'VF    '           ID-TTR-L  6
CHECKID  DC    C'VG    '           ID-TTR-L  7
CNTRLID  DC    C'VH    '           ID-TTR-L  8
RDLNEID  DC    C'VI    '           ID-TTR-L  9
DSPLYID  DC    C'VJ    '           ID-TTR-L  10
RESCNID  DC    C'VK    '           ID-TTR-L  11
EOBID    DC    C'CC    '           ID-TTR-L  12
         DC    H'0'                END OF TABLE
         DC   2H'0'                FILLER
         DC    C'019'              OPEN SVC
         DC    AL1(117)            START OF TABLE FROM BEGINNING OF
*                                  MODULE
**********************************************************************
***********************************************************************
         IEZDEB LIST=YES                                         Y02967
**********************************************************************
         DCBD  DSORG=PS,DEVD=OR                                @YM00635
**********************************************************************
         IECDSECS  MAIN,WTG,PREFX,EXPAND=YES                   @YM02503
         IKJTCB                                                  Y02967
         IHARB                                                   Y02967
**********************************************************************
CVT      DSECT
         CVT
         END
         END
