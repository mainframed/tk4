* /* START OF SPECIFICATIONS ****
*01* PROCESSOR = ASSEMXF-370R
**** END OF SPECIFICATIONS ***/
   TITLE   'IGG019VD - GET MOVE VARIABLE AND UNDEFINED RECORDS (OCR)'
IGG019VD CSECT
***********************************************************    @YM00638
*MODULE-NAME                                                   @YM00638
* IGG019VD                                                     @YM00638
*                                                              @YM00638
*DESCRIPTIVE-NAME                                              @YM00638
* OCR GET, MOVE MODE, VARIABLE AND UNDEFINED RECORDS           @YM00638
*                                                              @YM00638
*COPYRIGHT                                                     @YM00638
* NONE                                                         @YM00638
*                                                              @YM00638
*CHANGE-ACTIVITY                                               @YM00638
*
* RELEASE 20 ADDITIONS/CHANGES/DELETIONS
* RELEASE 21 ADDITIONS/CHANGES/DELETIONS
* RELEASE 22 ADDITIONS/CHANGES/DELETIONS
* RELEASE 23 ADDITIONS/CHANGES/DELETIONS
* RELEASE 24 ADDITIONS/CHANGES/DELETIONS
* RELEASE 25 ADDITIONS/CHANGES/DELETIONS
* RELEASE 26 ADDITIONS/CHANGES/DELETIONS
* RELEASE 27 ADDITIONS/CHANGES/DELETIONS
*
* STATUS - CHANGE LEVEL 00  RELEASE 20
*
*
*FUNCTION-GET- TO MOVE A LOGICAL RECORD FROM A BUFFER TO A USER
*              WORKAREA. IF THE BUFFER IS EMPTIED A NEW ONE IS ACCEPTED
*              AFTER THE OLD ONE HAS BEEN SCHEDULED FOR REFILLING
*              BY THE END OF BLOCK ROUTINE
*         RELEASE- CAUSES THE REMAINING CONTENTS OF THE CURRENT BUFFER
*                  TO BE IGNORED
*
*ENTRY POINTS
*        LABEL  OCR010
*        LABEL  OCR020
*
*ENTRY INSTRUCTION SEQUENCE
*              GET                 RELESE
*                LA      1,DCB       LA      1,DCB
*                L       15,48(1)    L       15,48(1)
*                BALR    14,15       BALR    14,8(15)
*
*INPUT FROM USER AS ADDRESSES IN FOLLOWING REGISTERS
*        REG   0    USED IN MOVE MODE-CONTAINS ADDRESS OF INPUT AREA
*        REG   1    DCB ADDRESS
*        REG   13   WORK-SAVE ADDRESS
*        REG   14   USER IN-LINE RETURN ADDRESS
*        REG   15   THIS ROUTINES INITIAL BASE ADDRESS
*
*OUTPUT REGISTER ADDRESSES AS FOLLOWS
*        REG   0    NOT APPLICABLE
*        REG   1    RECORD ADDRESS LOCATED FOR USER
*        REG   13   WORK-SAVE ADDRESS
*        REG   14   RETURN ADDRESS
*        REG   15   RETURN CODE
*        REG   2-12 AS UPON ENTRY TO THIS ROUTINE
*
*EXTERNAL ROUTINES
*
*        IGG019VE - INPUT ERROR ROUTINE WHICH DETECTS, CORRECTS DEVICE
*                   ERRORS AND RETURNS BLOCK OF DATA.
*        IGG019CC   END OF BLOCK ROUTINE WHICH SCHEDULES REQUESTS.
*EXITS
*        OCR025     BRANCH TO USER,RETURNS PARAMETERS
*        OCR034     BRANCH AND LINK TO END OF BLOCK ROUTINE
*        OCR130     BRANCH AND LINK TO END OF BLOCK ROUTINE
*        OCR040     BRANCH AND LINK TO INPUT ERROR ROUTINE
*        OCR145     BRANCH TO USER, RETURNS PARAMETERS
*
*TABLES/WORKAREAS
*
*        USER  SAVE/WORK AREA-LAST 13 WORDS USED
*        DCB
*
*        IOB
*
*ATTRIBUTES---REENTRANT,REUSABLE,PROBLEM PROGRAM MODE
*
*******************************************************************
*
*  ALL REGISTER EQUATES HAVE AN 'R' AT THE END OF THE SYMBOL
*
*
***********************************************************************
PARA1R   EQU   1                   PARAMETER REGISTER 1
BUFADR   EQU   1                   ADDRESS OF BUFFER
DCBR     EQU   2                   DCB ADDRESS
IOBADR   EQU   3                   IOB ADDRESS
EOBADR   EQU   4                   EOB ADDRESS
RECADR   EQU   5                   RECORD ADDRESS
WORK3R   EQU   6                   WORK REGISTER
WORK1R   EQU   7                   WORK REGISTER
CON255R  EQU   7                   WORK REGISTER-CONTAINS 255
BASER    EQU   8                   BASE REGISTER
SAVR     EQU   13                  USER SAVE AREA
RETR     EQU   14                  RETURN ADDRESS
WORK2R   EQU   14                  WORK REGISTER
ENTRYR   EQU   15                  ENTRY ADDRESS
LNGHR    EQU   15                  WORK REGISTER-CONTAINS BUFFER LNGH
***********************************************************************
EOFBIT   EQU   X'40'               DCBORBYT-END OF FILE BIT
BUFPRIME EQU   X'20'               DCBORBYT-BUFFERS PRIMED BIT
ERRFLGS  EQU   X'3F'               DCBIFLGS-DCB ERROR FLGS OFF
BUF      EQU   0                   OFFSET OF BUFFER ADDRESS IN CCW
CNT      EQU   6                   OFFSET OF COUNT IN CCW
LINECNT  EQU   28                  OFFSET OF LINE COUNT IN ERROR CNTRS
NOERROR  EQU   X'00'               TESTS FOR RETURN CODE OF ZERO
C255     EQU   255                 USED TO CLEAR 256 BYTES OF CORE
C256     EQU   256                 USED TO INCREMENT POINTER BY 256
ADDRESS  EQU   3                   LENGTH OF AN ADDRESS
ONE      EQU   1                   USED TO INCREMENT BY 1
USERREG  EQU   36                  SAVE AREA OFFSET TO REG2
RETREG   EQU   20                  SAVE AREA OFFSET TO REG14
SAVREG   EQU   20                  SAVE AREA OFFSET TO STORE REGISTERS
REG0SAV  EQU   28                  OFFSET IN SAVE AREA FOR REGISTER 0
RELEASE  EQU   X'F0'               USED IF BUFFER IS TO BE RELEASED
LNGH     EQU   2                   LENGTH OF NUMBER IN PREFIX
LPREFIX  EQU   4                   LENGTH OF A VARIABLE RECORD PREFIX
ZERO     EQU   0                   USED AS A CONSTANT OF ZERO
UNDEF    EQU   X'C0'               USED TO TEST FOR UNDEFINED RECORDS
TWO      EQU   2                   USED AS AN OFFSET OF TWO IN PREFIX
 EJECT
         USING IGG019VD,ENTRYR     USE ENTRY POINT AS A BASE (REG 15)
         USING IHADCB,PARA1R       USE DCB ADDRESS AS A BASE (REG 1)
*
OCR010   B     OCR030              BRANCH AROUND RELEASE
ZEROS    DC    X'00000000'         FILL FOR ENTRY AT +8 - USE AS CON=0
*
OCR020   CLC   DCBEOBAD+1(ADDRESS),DCBRECAD+1 END OF BLOCK YET
         BCR   8,RETR              YES, RETURN TO USER
         OI    DCBIOBA,RELEASE     SET, RELEASE SWITCH
OCR025   BR    RETR                RETURN TO THE USER
OCR030   STM   RETR,BASER,SAVREG(SAVR) SAVE USER REGISTERS
*
         DROP  ENTRYR              DROP REG 15 AS BASE FOR MODULE
         DROP  PARA1R              DROP REG 1 AS BASE FOR DCB
         USING IGG019VD,BASER      NEW BASE REG ADDRESSABILITY
         USING IHADCB,DCBR         NEW DCB  REG ADDRESSABILITY
*
         LR    BASER,ENTRYR        LOAD BASE ADDRESS
         LR    DCBR,PARA1R         LOAD DCB ADDRESS
         LM    IOBADR,RECADR,DCBIOBA LOAD WORK REGISTERS
         TM    DCBORBYT,BUFPRIME   ARE THE BUFFERS PRIMED
         BNZ   OCR035              YES, BRANCH
***********************************************************************
*
*        PRIME BUFFERS SUBROUTINE
*
***********************************************************************
*
         NI    DCBIFLGS,ERRFLGS    MAKE SURE ERROR FLAGS ARE OFF
*
         SR    WORK3R,WORK3R       CLEAR A WORK REGISTER
         IC    WORK3R,DCBBUFNO     GET NUMBER OF BUFFERS
         B     OCR033              BRANCH TO SCHEDULE BUFFERS
*
OCR032   L     IOBADR,0(IOBADR)    GET NEXT IOB ADDRESS
         ST    IOBADR,DCBIOBA      STORE THE ADDRESS OF NEXT IOB TO DCB
OCR033   BAL   RETR,OCR100         BRANCH AND LINK TO CLEAR THE BUFFER
*
         L     ENTRYR,DCBEOB       LOAD ADDRESS OF END OF BLOCK ROUTINE
OCR034   BALR  RETR,ENTRYR         BRANCH AND LINK TO EOB ROUTINE
         BCT   WORK3R,OCR032       IF MORE IOBS TO SCHEDULE ,BRANCH
*
         OI    DCBORBYT,BUFPRIME   SET BUFFERS PRIMED SWITCH ON
*
***********************************************************************
OCR035   TM    DCBIOBA,RELEASE     RELEASE CALLED FOR
         BO    OCR095              BRANCH TO SCHEDULE BUFFER
*
         CR    RECADR,EOBADR       HAS END OF BLOCK BEEN REACHED YET
         BL    OCR045              NO, BRANCH
OCR037   L     ENTRYR,DCBGERR      LOAD ADDRESS OF SYNCH AND ERROR PROC
OCR040   BALR  RETR,ENTRYR         BRANCH AND LINK TO GERR RTN
OCR045   CLC   DCBERRCN+1(ADDRESS),ZEROS ARE COUNTERS SPECIFIED
         BE    OCR050              NO, BRANCH
*
         L     WORK1R,DCBERRCN     LOAD ADDRESS OF 32 BYTE  COUNT AREA
         L     WORK2R,LINECNT(WORK1R) LOAD NO. OF LINES READ
         LA    WORK2R,ONE(WORK2R)  ADD 1 TO THE COUNT
         ST    WORK2R,LINECNT(WORK1R) STORE COUNT
OCR050   LR    WORK2R,RECADR       LOAD RECORD ADDRESS
         L     PARA1R,REG0SAV(SAVR) MAKE WORK AREA ADDRESSABLE
         SR    WORK1R,WORK1R       CLEAR REGISTER
         IC    WORK1R,DCBOFFSR     LOAD CHANNEL PROGRAM OFFSET
         AR    WORK1R,IOBADR       LOAD CHANNEL PROGRAM ADDRESS
         LH    LNGHR,CNT(WORK1R)   LOAD LENGTH OF BUFFER FROM CCW
*
         TM    DCBRECFM,UNDEF      UNDEFINED RECORDS SPECIFIED
         BO    OCR055              YES, BRANCH
         LA    LNGHR,LPREFIX(LNGHR) ADD 4 TO VAR RECS TO GET END
OCR055   LR    WORK3R,LNGHR        LOAD COUNT TO SCAN RECORD BUFFER
OCR057   CLI   0(RECADR),ZERO      IS BUFFER  BYTE = 0
         BNE   OCR060              NO, BRANCH
         LA    RECADR,ONE(RECADR)  INCREMENT BUFFER POINTER BY 1
         BCT   WORK3R,OCR057       BRANCH TO CHECK NEXT BYTE FOR ZERO
OCR060   AR    WORK2R,LNGHR        ADD  MAX LNGH TO BEGIN TO GET END
OCR070   ST    WORK2R,DCBRECAD     STORE ADDRESS OF NEXT RECORD
         SR    WORK2R,RECADR       SUB BEGIN OF DATA FROM END OF BUFFER
*
         TM    DCBRECFM,UNDEF      TEST FOR UNDEFINED RECORDS
         BO    OCR080              YES, BRANCH
*
         LA    WORK2R,LPREFIX(WORK2R) ADD 4 TO VAR RECS TO INCLUDE PREF
         STH   WORK2R,DCBLRECL     STORE LNGTH TO DCB
         MVC   0(LNGH,PARA1R),DCBLRECL MOVE LENGTH TO PREFIX
         XC    TWO(LNGH,PARA1R),TWO(PARA1R) CLEAR RIGHTMOST TWO BYTES
*                                           OF PREFIX IN USER AREA
         LA    PARA1R,LPREFIX(PARA1R) GET ADDR OF RECORD IN WORK AREA
         SH    WORK2R,FOUR         SUBTRACT FOUR TO GET LNGTH OF REC
         B     OCR090              BRANCH TO MOVE RECORD
*
*
OCR080   STH   WORK2R,DCBLRECL     STORE RECORD LENGTH TO DCB
*
OCR090   LTR   WORK2R,WORK2R       TEST LENGTH OF RECORD FOR 0
         BZ    OCR092              IF LENGTH IS ZERO, DO NOT MOVE
         BCTR  WORK2R,0            DECREMENT LENGTH BY 1 FOR MOVE
         EX    WORK2R,OCR117E      MOVE RECORD TO USER WORK AREA
OCR092   CLC   DCBEOBAD+1(ADDRESS),DCBRECAD+1 TEST IF MORE THAN  RECS
         BH    OCR150              YES, BRANCH
*
*
OCR095   LA    RETR,OCR125         LOAD RETURN ADDRESS FOR SUBROUTINE
 EJECT
***********************************************************************
*
*        CLEAR BUFFER SUBROUTINE
*
***********************************************************************
OCR100   SR    WORK1R,WORK1R       CLEAR REGISTER
         IC    WORK1R,DCBOFFSR     GET OFFSET OF CHANNEL PROGRAM
         AR    WORK1R,IOBADR       GET ADDRESS OF CHANNEL PROGRAM
         L     BUFADR,BUF(WORK1R)  LOAD BUFFER ADDRESS
         LA    BUFADR,ONE(BUFADR)  CLEAR HI BYTE AND INCREMENT BY 1
         SH    BUFADR,CNT(WORK1R)  SUBTRACT RECORD LENGTH
         TM    DCBRECFM,UNDEF      UNDEFINED RECORDS
         BO    OCR105              YES, BRANCH
         SH    BUFADR,FOUR         FOUR BYTE PREFIX IN IN BUFFER
*
OCR105   LH    LNGHR,DCBBUFL       LOAD LENGTH OF BUFFER
         LA    CON255R,C255        LOAD CONSTANT = 255
         BCTR  LNGHR,0             DECREMENT LENGTH BY 1
*
OCR110   CR    LNGHR,CON255R       COMPARE LENGTH TO CLEAR WITH 255
         BNH   OCR120              IF 255 OR LESS, BRANCH
*
         EX    CON255R,OCR115E     CLEAR 256 BYTES
*
         SR    LNGHR,CON255R       SUBTRACT 255 FROM AMOUNT TO BE CLEAR
         BCTR  LNGHR,0             SUBTRACT ONE MORE
         LA    BUFADR,C256(BUFADR) INCREMENT BUFFER ADDRESS BY 256
         B     OCR110              BRANCH TO CLEAR NEXT PORTION OF BUF
*
OCR115E  XC    0(1,BUFADR),0(BUFADR) CLEAR INSTRUCTION USED BY EXECUTE
OCR117E  MVC   0(1,PARA1R),0(RECADR) MOVE INSTRUCTION USED BY EXECUTE
*
OCR120   EX    LNGHR,OCR115E       CLEAR REMAINDER OF BUFFER
         BR    RETR                BRANCH TO CALLING ROUTINE
***********************************************************************
 EJECT
OCR125   TM    DCBORBYT,EOFBIT     TEST IF END OF FILE IS ON
         BO    OCR135              IF YES, DO NOT SCHEDULE, BRANCH
         L     ENTRYR,DCBEOB       LOAD END OF BLOCK ROUTINE ADDRESS
*
OCR130   BALR  RETR,ENTRYR         BRANCH AND LINK TO THE EOB ROUTINE
*
OCR135   TM    DCBIOBA,RELEASE     IS RELEASE SWITCH ON
         BO    OCR037              IF YES, BRANCH
*
         SR    ENTRYR,ENTRYR       CLEAR REGISTER
         CLI   DCBEIB+1,NOERROR    IS RETURN CODE =0
         BE    OCR140              YES, BRANCH TO RESTORE REGS
*
         IC    ENTRYR,DCBEIB+1     LOAD RETURN CODE
         XC    DCBEIB+1(ONE),DCBEIB+1 CLEAR RETURN CODE SAVE AREA
*
OCR140   LM    DCBR,BASER,USERREG(SAVR) RESTORE USER REGISTERS
         L     PARA1R,REG0SAV(SAVR) RESTORE WORK AREA ADDRESS
         L     RETR,RETREG(SAVR)   RESTORE RETURN REGISTER
OCR145   BR    RETR                RETURN TO USER
*
OCR150   SR    ENTRYR,ENTRYR       SET RETURN CODE TO ZERO
         B     OCR140              BRANCH TO RETURN TO USER
FOUR     DC    H'4'                USED AS A CONSTANT OF 4
         CNOP  0,8                 PAD MODULE  TO DOUBLE WORD
         DCBD  DSORG=PS,DEVD=OR                                @YM00635
         END
