COMP     TITLE 'BLSRCOMP--IPCS COMPARE SUBCOMMAND                      *
                        '
*/* CHANGE ACTIVITY -------------------------------------------------*/
*/*   THIS MODULE WAS WRITTEN FOR @G57LPGW                           */
*/*------------------------------------------------------------------*/
BLSRCOMP CSECT ,                                                   0002
@MAINENT DS    0H                                                  0002
         USING *,@15                                               0002
         B     @PROLOG                                             0002
         DC    AL1(16)                                             0002
         DC    C'BLSRCOMP  78.057'                                 0002
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0002
         BALR  @12,0                                               0002
@PSTART  DS    0H                                                  0002
         USING @PSTART,@12                                         0002
         L     @00,@SIZDATD                                        0002
         BLSUALLR R,LV=(0)
         LR    @11,@01                                             0002
         USING @DATD,@11                                           0002
         ST    @13,@SA00001+4                                      0002
         LM    @00,@01,20(@13)                                     0002
         ST    @11,8(,@13)                                         0002
         LR    @13,@11                                             0002
*BLREXTRN - IDENTIFY EXTERNAL REFERENCES
         EXTRN BLSUVP31
         EXTRN BLSUVP32
         EXTRN BLSRVPCP
         EXTRN BLSRVPAS
         EXTRN BLSUVPVA
         EXTRN BLSRVPAD
*   RETC=0;                         /* RETURN CODE                   */
         SLR   @14,@14                                             0453
         ST    @14,RETC                                            0453
*   RF=0;                           /* RETURN CODE                   */
         SLR   RF,RF                                               0454
*   ESAU1(1:LENGTH(ESCO))=ESCO;     /* INITIALIZE SYMBOL RECORD      */
         MVC   ESAU1(182),ESCO                                     0455
*   ESAU2(1:LENGTH(ESCO))=ESCO;     /* INITIALIZE SYMBOL RECORD      */
         MVC   ESAU2(182),ESCO                                     0456
*   RESPECIFY                                                      0457
*     R1 RESTRICTED;                /* GETMAIN INTERFACE REGISTER    */
*   DO;                             /* GETMAIN (R)                 0458
*                                      LV(PAGELNTH)SP(ZZZSPEXC)      */
*     RESPECIFY                                                    0459
*      (GPR01F,                                                    0459
*       GPR00F) RESTRICTED;                                        0459
*     GPR00F=PAGELNTH;              /* LENGTH REQUESTED              */
         L     GPR00F,@CF00091                                     0460
*     GPR01F=ZZZSPEXC;              /* SP IN REG 1                   */
         LA    GPR01F,1                                            0461
*     GEN(SLL   GPR01F,24)                                         0462
*     NODEFS NOREFS NOSETS NOEXIT NOFLOWS SEQFLOW;                 0462
         SLL   GPR01F,24
*     GPR00F=GPR00F×GPR01F;         /* SP IN HIGH BYTE               */
         OR    GPR00F,GPR01F                                       0463
*     GPR01F=-1;                    /* INDICATE A GETMAIN REQUEST    */
         SLR   GPR01F,GPR01F                                       0464
         BCTR  GPR01F,0                                            0464
*     SVC(10);                      /* R-FORM OF GETMAIN             */
         SVC   10                                                  0465
*     RESPECIFY                                                    0466
*      (GPR01F,                                                    0466
*       GPR00F) UNRESTRICTED;                                      0466
*   END;                            /* GETMAIN (R)                 0467
*                                      LV(PAGELNTH)SP(ZZZSPEXC)      */
*   BUF1PT=R1;                      /* POINT TO BUFFER FOR FIRST   0468
*                                      COMPARAND                     */
         ST    R1,BUF1PT                                           0468
*   DO;                             /* GETMAIN (R)                 0469
*                                      LV(PAGELNTH)SP(ZZZSPEXC)      */
*     RESPECIFY                                                    0470
*      (GPR01F,                                                    0470
*       GPR00F) RESTRICTED;                                        0470
*     GPR00F=PAGELNTH;              /* LENGTH REQUESTED              */
         L     GPR00F,@CF00091                                     0471
*     GPR01F=ZZZSPEXC;              /* SP IN REG 1                   */
         LA    GPR01F,1                                            0472
*     GEN(SLL   GPR01F,24)                                         0473
*     NODEFS NOREFS NOSETS NOEXIT NOFLOWS SEQFLOW;                 0473
         SLL   GPR01F,24
*     GPR00F=GPR00F×GPR01F;         /* SP IN HIGH BYTE               */
         OR    GPR00F,GPR01F                                       0474
*     GPR01F=-1;                    /* INDICATE A GETMAIN REQUEST    */
         SLR   GPR01F,GPR01F                                       0475
         BCTR  GPR01F,0                                            0475
*     SVC(10);                      /* R-FORM OF GETMAIN             */
         SVC   10                                                  0476
*     RESPECIFY                                                    0477
*      (GPR01F,                                                    0477
*       GPR00F) UNRESTRICTED;                                      0477
*   END;                            /* GETMAIN (R)                 0478
*                                      LV(PAGELNTH)SP(ZZZSPEXC)      */
*   BUF2PT=R1;                      /* POINT TO BUFFER FOR 2ND     0479
*                                      COMPARAND                     */
         ST    R1,BUF2PT                                           0479
*   RESPECIFY                                                      0480
*     R1 UNRESTRICTED;              /* GETMAIN INTERFACE REGISTER    */
*   DO;                             /* BLSRPARS DISPLAY MF(E,PX)     */
*     DO;                           /* BLSRPARD CSECT()DSECT(PD)EQUAT
*                                      E(ESAU)EXIT(EXITRLSA,)MF(EXECU
*                                      TE,PX)FLAG ROUTING            */
*       DO;                         /* BLSUPARS CSECT(PC)DSECT(PD)EXI
*                                      T(EXITRLSA,)MF(EXECUTE,PX)FLAG
*                                      ROUTING                       */
*         CALL BLSUPARI(ZZ2,PCCSECT,PDAPTR);/* PARSE OPERANDS        */
         ST    R9,@AL00001                                         0484
         L     @14,PCPTR                                           0484
         ST    @14,@AL00001+4                                      0484
         LA    @14,PDAPTR                                          0484
         ST    @14,@AL00001+8                                      0484
         L     @10,ZZ2BVTP(,R9)                                    0484
         L     @15,BVTPARIP(,@10)                                  0484
         LA    @01,@AL00001                                        0484
         BALR  @14,@15                                             0484
*         RESPECIFY                                                0485
*          (GPR15F) RESTRICTED;                                    0485
*         IF GPR15F^=ZZZFLAGI THEN                                 0486
*                                                                  0486
         LTR   GPR15F,GPR15F                                       0486
         BZ    @RF00486                                            0486
*           /*********************************************************/
*           /*                                                       */
*           /* UNABLE TO PARSE                                       */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0487
*           DO;                     /* UNABLE TO PARSE               */
*             RETC=GPR15F;          /* RETURN CODE                   */
         ST    GPR15F,RETC                                         0488
*             GO TO EXITNORL;       /* EXIT WITHOUT PDL              */
         B     EXITNORL                                            0489
*           END;                                                   0490
*         RESPECIFY                                                0491
*          (GPR15F) UNRESTRICTED;                                  0491
@RF00486 DS    0H                                                  0492
*         RESPECIFY                                                0492
*          (PDRPTR) RESTRICTED;                                    0492
*         PDRPTR=PDAPTR;            /* ->PDL                         */
         L     PDRPTR,PDAPTR                                       0493
*         GENERATE REFS(PD,PDRPTR) CODE(USING PD,PDRPTR);          0494
         USING PD,PDRPTR
*         IF PXTEST=PXTEST1 THEN                                   0495
         CLC   PXTEST(2),@CH00043                                  0495
         BNE   @RF00495                                            0495
*           ZZ2AFX=ZZZ1;            /* TEST                          */
         OI    ZZ2AFX(R9),B'10000000'                              0496
*         ELSE                                                     0497
*           IF PXTEST=PXTEST0 THEN                                 0497
         B     @RC00495                                            0497
@RF00495 CLC   PXTEST(2),@CH00068                                  0497
         BNE   @RF00497                                            0497
*             ZZ2AFX=ZZZ0;          /* NOTEST                        */
         NI    ZZ2AFX(R9),B'01111111'                              0498
*         CALL BLSUPARU(ZZ2,PDDSECT,PXRO);/* SET ROUTING OPTIONS     */
@RF00497 DS    0H                                                  0499
@RC00495 ST    R9,@AL00001                                         0499
         ST    PDRPTR,@AL00001+4                                   0499
         LA    @14,PXRO                                            0499
         ST    @14,@AL00001+8                                      0499
         L     @08,ZZ2BVTP(,R9)                                    0499
         L     @15,BVTPARUP(,@08)                                  0499
         LA    @01,@AL00001                                        0499
         BALR  @14,@15                                             0499
*         RESPECIFY                                                0500
*          (GPR15F) RESTRICTED;                                    0500
*         RETC=MAX(RETC,GPR15F);    /* RETURN CODE                   */
         L     @14,RETC                                            0501
         CR    @14,GPR15F                                          0501
         BNL   *+6
         LR    @14,GPR15F                                          0501
         ST    @14,RETC                                            0501
*         RESPECIFY                                                0502
*          (GPR15F) UNRESTRICTED;                                  0502
*         IF RETC>ZZZFLAGE THEN     /* SERIOUS ERROR                 */
         C     @14,@CF00051                                        0503
         BH    @RT00503                                            0503
*           GO TO EXITRLSA;         /* EXIT WITH PDL                 */
*       END;                        /* BLSUPARS CSECT(PC)DSECT(PD)EXI
*                                      T(EXITRLSA,)MF(EXECUTE,PX)FLAG
*                                      ROUTING                       */
*     END;                          /* BLSRPARD CSECT()DSECT(PD)EQUAT
*                                      E(ESAU)EXIT(EXITRLSA,)MF(EXECU
*                                      TE,PX)FLAG ROUTING            */
*     CALL BLSRPADS(ZZ2,PDDSECT,PXDO);/* SET DISPLAY OPTIONS         */
         ST    R9,@AL00001                                         0507
         ST    PDRPTR,@AL00001+4                                   0507
         LA    @14,PXDO                                            0507
         ST    @14,@AL00001+8                                      0507
         L     @08,ZZ2RVTP(,R9)                                    0507
         L     @15,RVTPADSP(,@08)                                  0507
         LA    @01,@AL00001                                        0507
         BALR  @14,@15                                             0507
*   END;                            /* BLSRPARS DISPLAY MF(E,PX)     */
*   PD1VLEN=0;                      /* LENGTH OF FIRST COMPARAND     */
         SLR   @14,@14                                             0509
         ST    @14,PD1VLEN                                         0509
*   PD2VLEN=0;                      /* LENGTH OF SECOND COMPARAND    */
         SLR   PD2VLEN,PD2VLEN                                     0510
*                                                                  0511
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS ADDRESS OPERAND IF ENTERED                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0511
*   IF PK1=PN1ADDR THEN             /* FIRST OPERAND IS AN ADDRESS   */
         CLC   PK1(2),@CH00043                                     0511
         BNE   @RF00511                                            0511
*     DO;                                                          0512
*       CALL BLSRADDR(ZZ2,ESAU1,PD,PXAO,PD1A);/* RESOLVE ADDRESS     */
         ST    R9,@AL00001                                         0513
         LA    @14,ESAU1                                           0513
         ST    @14,@AL00001+4                                      0513
         LA    @14,PD                                              0513
         ST    @14,@AL00001+8                                      0513
         LA    @14,PXAO                                            0513
         ST    @14,@AL00001+12                                     0513
         LA    @14,PD1A                                            0513
         ST    @14,@AL00001+16                                     0513
         L     @08,ZZ2RVTP(,R9)                                    0513
         L     @15,RVTADDRP(,@08)                                  0513
         LA    @01,@AL00001                                        0513
         BALR  @14,@15                                             0513
*       IF RF>=ZZZFLAGS THEN        /* COULD NOT RESOLVE             */
         C     RF,@CF00033                                         0514
         BNL   @RT00514                                            0514
*         GO TO EXITRLSA;           /* EXIT                          */
*       PD1VLEN=ESAU1DLE;           /* SET LENGTH                    */
         L     @14,ESAU1DLE                                        0516
         ST    @14,PD1VLEN                                         0516
*     END;                                                         0517
*   IF PK2=PN2ADDR THEN             /* 2ND OPERAND IS ADDRESS        */
@RF00511 CLC   PK2(2),@CH00043                                     0518
         BNE   @RF00518                                            0518
*     DO;                                                          0519
*       CALL BLSRADDR(ZZ2,ESAU2,PD,PYAO,PD2A);/* RESOLVE ADDRESS     */
         ST    R9,@AL00001                                         0520
         LA    @14,ESAU2                                           0520
         ST    @14,@AL00001+4                                      0520
         LA    @14,PD                                              0520
         ST    @14,@AL00001+8                                      0520
         LA    @14,PYAO                                            0520
         ST    @14,@AL00001+12                                     0520
         LA    @14,PD2A                                            0520
         ST    @14,@AL00001+16                                     0520
         L     @08,ZZ2RVTP(,R9)                                    0520
         L     @15,RVTADDRP(,@08)                                  0520
         LA    @01,@AL00001                                        0520
         BALR  @14,@15                                             0520
*       IF RF>=ZZZFLAGS THEN        /* COULD NOT RESOLVE             */
         C     RF,@CF00033                                         0521
         BNL   @RT00521                                            0521
*         GO TO EXITRLSA;           /* EXIT                          */
*       PD2VLEN=ESAU2DLE;           /* SET LENGTH                    */
         L     PD2VLEN,ESAU2DLE                                    0523
*     END;                                                         0524
*                                                                  0525
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS VALUE OPERANDS IF ENTERED                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0525
*   IF PD1VVFP='1'B THEN                                           0525
@RF00518 TM    PD1VVFP,B'10000000'                                 0525
         BNO   @RF00525                                            0525
*     DO;                           /* FIRST OPERAND IS A VALUE      */
*       ESAU1(1:LENGTH(ESCO))=ESCO; /* INITIALIZE SYMBOL RECORD      */
         MVC   ESAU1(182),ESCO                                     0527
*       IF PD1VVT='X' THEN                                         0528
         CLI   PD1VVT,C'X'                                         0528
         BNE   @RF00528                                            0528
*         DO;                       /* HEX VALUE ENTERED             */
*           PD1VBUF=PD1VBUF&&PD1VBUF;/* ZERO BUFFER                  */
         XC    PD1VBUF(256),PD1VBUF                                0530
*           PD1VLEN=PD1VVL/2;       /* VALUE LENGTH                  */
         LH    @14,PD1VVL                                          0531
         LR    @08,@14                                             0531
         SRL   @08,1                                               0531
         ST    @08,PD1VLEN                                         0531
*           DO;                     /* BLRCNVCB(PD1VV(1:PD1VVL)) FROM
*                                      (CHARACTER)TO(BIT)SET(PD1VBUF(
*                                      1:PD1VLEN))TR(ZZ1TRCTX)       */
*             ZONED='0000000000000000';/* PAD INTERMEDIATE           */
         MVC   ZONED(16),@CC01840                                  0533
*             ZONED(1:+(PD1VVL))=PD1VV(1:PD1VVL);/* LEFT ALIGN SOURCE
*                                      STRING                        */
         BCTR  @14,0                                               0534
         L     @06,PD1VVP                                          0534
         EX    @14,@SM01874                                        0534
*             TR(ZONED,ZZ1TRCTX);   /* EBCDIC=>ZONED HEXADECIMAL     */
         L     @14,ZZ2ZZ1P(,R9)                                    0535
         TR    ZONED(16),ZZ1TRCTX(@14)                             0535
*             PACK(PACKED,ZONED(1:15));/* ZONED HEXADECIMAL=>BIT     */
         PACK  PACKED(8),ZONED(15)                                 0536
*             MVN(PACKED(57:64),ZONED(16:16));/* FINAL FOUR BITS     */
         MVN   PACKED+7(1),ZONED+15                                0537
*             PD1VBUF(1:PD1VLEN)=PACKED(1:+(PD1VLEN));/* BIT STRING
*                                      RESULT                        */
         BCTR  @08,0                                               0538
         EX    @08,@SM01876                                        0538
*           END;                    /* BLRCNVCB(PD1VV(1:PD1VVL)) FROM
*                                      (CHARACTER)TO(BIT)SET(PD1VBUF(
*                                      1:PD1VLEN))TR(ZZ1TRCTX)       */
*         END;                                                     0540
*       ELSE                                                       0541
*         DO;                       /* CHARACTER VALUE ENTERED       */
         B     @RC00528                                            0541
@RF00528 DS    0H                                                  0542
*           PD1VBUF='';             /* BLANK BUFFER                  */
         MVI   PD1VBUF,C' '                                        0542
         MVC   PD1VBUF+1(255),PD1VBUF                              0542
*           PD1VBUF(1:PD1VVL)=PD1VV(1:PD1VVL);/* MOVE STRING INTO  0543
*                                      BUFFER                        */
         LH    @14,PD1VVL                                          0543
         LR    @08,@14                                             0543
         BCTR  @08,0                                               0543
         L     @06,PD1VVP                                          0543
         EX    @08,@SM01878                                        0543
*           PD1VLEN=PD1VVL;         /* LENGTH IS AS ENTERED          */
         ST    @14,PD1VLEN                                         0544
*         END;                                                     0545
*     END;                                                         0546
@RC00528 DS    0H                                                  0547
*   IF PD2VVFP='1'B THEN                                           0547
@RF00525 TM    PD2VVFP,B'10000000'                                 0547
         BNO   @RF00547                                            0547
*     DO;                           /* 2ND OPERAND IS A VALUE        */
*       ESAU2(1:LENGTH(ESCO))=ESCO; /* INITIALIZE SYMBOL RECORD      */
         MVC   ESAU2(182),ESCO                                     0549
*       IF PD2VVT='X' THEN                                         0550
         CLI   PD2VVT,C'X'                                         0550
         BNE   @RF00550                                            0550
*         DO;                       /* HEX VALUE ENTERED             */
*           PD2VBUF=PD2VBUF&&PD2VBUF;/* ZERO BUFFER                  */
         XC    PD2VBUF(256),PD2VBUF                                0552
*           PD2VLEN=PD2VVL/2;       /* VALUE LENGTH                  */
         LH    @14,PD2VVL                                          0553
         LR    PD2VLEN,@14                                         0553
         SRL   PD2VLEN,1                                           0553
*           DO;                     /* BLRCNVCB(PD2VV(1:PD2VVL)) FROM
*                                      (CHARACTER)TO(BIT)SET(PD2VBUF(
*                                      1:PD2VLEN))TR(ZZ1TRCTX)       */
*             ZONED='0000000000000000';/* PAD INTERMEDIATE           */
         MVC   ZONED(16),@CC01840                                  0555
*             ZONED(1:+(PD2VVL))=PD2VV(1:PD2VVL);/* LEFT ALIGN SOURCE
*                                      STRING                        */
         BCTR  @14,0                                               0556
         L     @08,PD2VVP                                          0556
         EX    @14,@SM01880                                        0556
*             TR(ZONED,ZZ1TRCTX);   /* EBCDIC=>ZONED HEXADECIMAL     */
         L     @14,ZZ2ZZ1P(,R9)                                    0557
         TR    ZONED(16),ZZ1TRCTX(@14)                             0557
*             PACK(PACKED,ZONED(1:15));/* ZONED HEXADECIMAL=>BIT     */
         PACK  PACKED(8),ZONED(15)                                 0558
*             MVN(PACKED(57:64),ZONED(16:16));/* FINAL FOUR BITS     */
         MVN   PACKED+7(1),ZONED+15                                0559
*             PD2VBUF(1:PD2VLEN)=PACKED(1:+(PD2VLEN));/* BIT STRING
*                                      RESULT                        */
         LR    @14,PD2VLEN                                         0560
         BCTR  @14,0                                               0560
         EX    @14,@SM01882                                        0560
*           END;                    /* BLRCNVCB(PD2VV(1:PD2VVL)) FROM
*                                      (CHARACTER)TO(BIT)SET(PD2VBUF(
*                                      1:PD2VLEN))TR(ZZ1TRCTX)       */
*         END;                                                     0562
*       ELSE                                                       0563
*         DO;                       /* CHARACTER VALUE ENTERED       */
         B     @RC00550                                            0563
@RF00550 DS    0H                                                  0564
*           PD2VBUF='';             /* BLANK BUFFER                  */
         MVI   PD2VBUF,C' '                                        0564
         MVC   PD2VBUF+1(255),PD2VBUF                              0564
*           PD2VBUF(1:PD2VVL)=PD2VV(1:PD2VVL);/* MOVE STRING INTO  0565
*                                      BUFFER                        */
         LH    @14,PD2VVL                                          0565
         LR    @08,@14                                             0565
         BCTR  @08,0                                               0565
         L     @06,PD2VVP                                          0565
         EX    @08,@SM01884                                        0565
*           PD2VLEN=PD2VVL;         /* LENGTH IS AS ENTERED          */
         LR    PD2VLEN,@14                                         0566
*         END;                                                     0567
*     END;                                                         0568
@RC00550 DS    0H                                                  0569
*                                                                  0569
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE COMPARISON BUFFERS                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0569
*   IF PD1VVFP='1'B THEN            /* FIRST OBJECT IS A VALUE       */
@RF00547 TM    PD1VVFP,B'10000000'                                 0569
         BNO   @RF00569                                            0569
*     BUF1(1:PD1VLEN)=PD1VBUF(1:PD1VLEN);/* MOVE DATA TO COMP BLOCK  */
         L     @14,BUF1PT                                          0570
         L     @08,PD1VLEN                                         0570
         BCTR  @08,0                                               0570
         EX    @08,@SM01886                                        0570
*   IF PD2VVFP='1'B THEN            /* 2ND OBJECT IS A VALUE         */
@RF00569 TM    PD2VVFP,B'10000000'                                 0571
         BNO   @RF00571                                            0571
*     BUF2(1:PD2VLEN)=PD2VBUF(1:PD2VLEN);/* MOVE DATA TO COMP BLOCK  */
         L     @14,BUF2PT                                          0572
         LR    @08,PD2VLEN                                         0572
         BCTR  @08,0                                               0572
         EX    @08,@SM01888                                        0572
*   THELENTH=MIN(PD1VLEN,PD2VLEN);  /* SET SINGLE COMPARE LENGTH     */
@RF00571 L     THELENTH,PD1VLEN                                    0573
         CR    THELENTH,PD2VLEN                                    0573
         BNH   *+6
         LR    THELENTH,PD2VLEN                                    0573
*   ORIGLNTH=THELENTH;              /* SAVE LENGTH                   */
         ST    THELENTH,ORIGLNTH                                   0574
*   IF PD1VVFP='0'B THEN                                           0575
         TM    PD1VVFP,B'10000000'                                 0575
         BNZ   @RF00575                                            0575
*     DO;                           /* USE ADDRESS OR DEFAULT        */
*       ESAU1DLE=MIN(PAGELNTH,THELENTH);/* EITHER WHOLE THING OR   0577
*                                      BUFLN                         */
         L     @14,@CF00091                                        0577
         CR    @14,THELENTH                                        0577
         BNH   *+6
         LR    @14,THELENTH                                        0577
         ST    @14,ESAU1DLE                                        0577
*       ESAU1SYM='FIRST OPERAND DATA';                             0578
         MVI   ESAU1SYM+18,C' '                                    0578
         MVC   ESAU1SYM+19(12),ESAU1SYM+18                         0578
         MVC   ESAU1SYM(18),@CC01849                               0578
*       CALL BLSRACC(ZZ2,ESAU1,BUF1);/* GET INFORMATION              */
         ST    R9,@AL00001                                         0579
         LA    @14,ESAU1                                           0579
         ST    @14,@AL00001+4                                      0579
         L     @14,BUF1PT                                          0579
         ST    @14,@AL00001+8                                      0579
         L     @08,ZZ2RVTP(,R9)                                    0579
         L     @15,RVTRACCP(,@08)                                  0579
         LA    @01,@AL00001                                        0579
         BALR  @14,@15                                             0579
*     END;                                                         0580
*   IF PD2VVFP='0'B THEN                                           0581
@RF00575 TM    PD2VVFP,B'10000000'                                 0581
         BNZ   @RF00581                                            0581
*     DO;                           /* USE ADDRESS OR DEFAULT        */
*       ESAU2DLE=MIN(PAGELNTH,THELENTH);                           0583
         L     @14,@CF00091                                        0583
         CR    @14,THELENTH                                        0583
         BNH   *+6
         LR    @14,THELENTH                                        0583
         ST    @14,ESAU2DLE                                        0583
*       ESAU2SYM='SECOND OPERAND DATA';                            0584
         MVI   ESAU2SYM+19,C' '                                    0584
         MVC   ESAU2SYM+20(11),ESAU2SYM+19                         0584
         MVC   ESAU2SYM(19),@CC01851                               0584
*       CALL BLSRACC(ZZ2,ESAU2,BUF2);/* GET INFORMATION              */
         ST    R9,@AL00001                                         0585
         LA    @14,ESAU2                                           0585
         ST    @14,@AL00001+4                                      0585
         L     @14,BUF2PT                                          0585
         ST    @14,@AL00001+8                                      0585
         L     @08,ZZ2RVTP(,R9)                                    0585
         L     @15,RVTRACCP(,@08)                                  0585
         LA    @01,@AL00001                                        0585
         BALR  @14,@15                                             0585
*     END;                                                         0586
*                                                                  0587
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS MASK OPERAND IF ENTERED                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0587
*   IF PDMAVFP='1'B THEN            /* MASK OPERAND                  */
@RF00581 TM    PDMAVFP,B'10000000'                                 0587
         BNO   @RF00587                                            0587
*     DO;                                                          0588
*       IF PDMAVT^='X'×PDMAVL>16×PDMAVL/2^=THELENTH THEN           0589
         CLI   PDMAVT,C'X'                                         0589
         BNE   @RT00589                                            0589
         LH    @14,PDMAVL                                          0589
         C     @14,@CF00054                                        0589
         BH    @RT00589                                            0589
         SRL   @14,1                                               0589
         CR    @14,THELENTH                                        0589
         BE    @RF00589                                            0589
@RT00589 DS    0H                                                  0590
*         DO;                       /* INVALID TYPE OR LENGTH        */
*           CALL BLSUPUTV(ZZ2,M087);                               0591
         ST    R9,@AL00001                                         0591
         LA    @14,M087                                            0591
         ST    @14,@AL00001+4                                      0591
         L     @08,ZZ2BVTP(,R9)                                    0591
         L     @15,BVTPUTVP(,@08)                                  0591
         LA    @01,@AL00001                                        0591
         BALR  @14,@15                                             0591
*           RETC=ZZZFLAGS;          /* SET RETURN CODE               */
         MVC   RETC(4),@CF00033                                    0592
*           GO TO EXITRLSA;         /* EXIT                          */
         B     EXITRLSA                                            0593
*         END;                                                     0594
*       DO;                         /* BLRCNVCB(PDMAV(1:PDMAVL)) FROM
*                                      (CHARACTER)TO(BIT)SET(PDMABUF(
*                                      1:THELENTH))TR(ZZ1TRCTX)      */
@RF00589 DS    0H                                                  0596
*         ZONED='0000000000000000'; /* PAD INTERMEDIATE              */
         MVC   ZONED(16),@CC01840                                  0596
*         ZONED(1:+(PDMAVL))=PDMAV(1:PDMAVL);/* LEFT ALIGN SOURCE  0597
*                                      STRING                        */
         LH    @14,PDMAVL                                          0597
         BCTR  @14,0                                               0597
         L     @08,PDMAVP                                          0597
         EX    @14,@SM01890                                        0597
*         TR(ZONED,ZZ1TRCTX);       /* EBCDIC=>ZONED HEXADECIMAL     */
         L     @14,ZZ2ZZ1P(,R9)                                    0598
         TR    ZONED(16),ZZ1TRCTX(@14)                             0598
*         PACK(PACKED,ZONED(1:15)); /* ZONED HEXADECIMAL=>BIT        */
         PACK  PACKED(8),ZONED(15)                                 0599
*         MVN(PACKED(57:64),ZONED(16:16));/* FINAL FOUR BITS         */
         MVN   PACKED+7(1),ZONED+15                                0600
*         PDMABUF(1:THELENTH)=PACKED(1:+(THELENTH));/* BIT STRING  0601
*                                      RESULT                        */
         LR    @14,THELENTH                                        0601
         BCTR  @14,0                                               0601
         EX    @14,@SM01892                                        0601
*       END;                        /* BLRCNVCB(PDMAV(1:PDMAVL)) FROM
*                                      (CHARACTER)TO(BIT)SET(PDMABUF(
*                                      1:THELENTH))TR(ZZ1TRCTX)      */
*     END;                                                         0603
*                                                                  0604
*   /*****************************************************************/
*   /*                                                               */
*   /* PERFORM COMPARISON                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0604
*   RESPECIFY                                                      0604
*    (R2,                                                          0604
*     R3,                                                          0604
*     R4,                                                          0604
*     R5) RESTRICTED;               /* RESTRICT REGS FOR CLCL        */
@RF00587 DS    0H                                                  0605
*   FLAG1='1'B;                     /* INDICATE FIRST TIME THROUGH 0605
*                                      LOOP                          */
*                                                                  0605
         OI    FLAG1,B'10000000'                                   0605
*   /*****************************************************************/
*   /*                                                               */
*   /* IF UNEQUAL LENGTHS, INFORM USER                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0606
*   IF PD1VLEN^=PD2VLEN THEN                                       0606
         C     PD2VLEN,PD1VLEN                                     0606
         BE    @RF00606                                            0606
*     DO;                           /* TELL USER IF SHORTER LEN USED */
*       DO;                         /* BLRCNVUC(ORIGLNTH)          0608
*                                      FROM(UNSIGNED BINARY)TO(CHARAC
*                                      TER)SET(IN81T1)PATTERN      0608
*                                      REMARK(CONVERT LENGTH)        */
*                                                                  0608
*         /***********************************************************/
*         /*                                                         */
*         /* CONVERT LENGTH                                          */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0609
*         CVD(ORIGLNTH,PACKED);     /* UNSIGNED BINARY=>PACKED     0609
*                                      DECIMAL                       */
         L     @14,ORIGLNTH                                        0609
         CVD   @14,PACKED                                          0609
*         ZONED='40404040402020202020202020202120'X;/* ED PATTERN    */
         MVC   ZONED(16),@CB01854                                  0610
*         ED(ZONED(5:16),PACKED(17:64));/* PACKED DECIMAL=>EBCDIC    */
         ED    ZONED+4(12),PACKED+2                                0611
*         IN81T1=ZONED(17-LENGTH(IN81T1):16);/* EBCDIC RESULT        */
         MVC   IN81T1(8),ZONED+8                                   0612
*       END;                        /* BLRCNVUC(ORIGLNTH)          0613
*                                      FROM(UNSIGNED BINARY)TO(CHARAC
*                                      TER)SET(IN81T1)PATTERN      0613
*                                      REMARK(CONVERT LENGTH)        */
*       OLDN=2;                     /* NUMBER OF SEGMENTS            */
         MVC   OLDN(4),@CF00068                                    0614
*       OLDP(1)=ADDR(M031);         /* BASE MESSAGE                  */
         LA    @14,M031                                            0615
         ST    @14,OLDP                                            0615
*       OLDP(2)=ADDR(IN81);         /* SEGMENT                       */
         LA    @14,IN81                                            0616
         ST    @14,OLDP+4                                          0616
*       IN81L=12;                                                  0617
         MVC   IN81L(2),@CH00033                                   0617
*       IN81O=ADDR(M031T2)-ADDR(M031T);/* SET OFFSET OF SEGMENT      */
         MVC   IN81O(2),@CH01870                                   0618
*       CALL BLSUMPK1(ZZ2,IN81);    /* EDIT SEGMENT                  */
         ST    R9,@AL00001                                         0619
         LA    @14,IN81                                            0619
         ST    @14,@AL00001+4                                      0619
         L     @08,ZZ2BVTP(,R9)                                    0619
         L     @15,BVTMPK1P(,@08)                                  0619
         LA    @01,@AL00001                                        0619
         BALR  @14,@15                                             0619
*       CALL BLSUPUTO(ZZ2,OLD);     /* OUTPUT MESSAGE                */
         ST    R9,@AL00001                                         0620
         LA    @14,OLD                                             0620
         ST    @14,@AL00001+4                                      0620
         L     @08,ZZ2BVTP(,R9)                                    0620
         L     @15,BVTPUTOP(,@08)                                  0620
         LA    @01,@AL00001                                        0620
         BALR  @14,@15                                             0620
*     END;                                                         0621
*                                                                  0621
*   /*****************************************************************/
*   /*                                                               */
*   /* COMPARE UP TO PAGELNTH BYTES AT A TIME                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0622
*   DO J1=1 BY 1;                   /* CONTINUOUS LOOP OF COMPARES   */
@RF00606 LA    J1,1                                                0622
@DL00622 DS    0H                                                  0623
*     R2=BUF1PT;                    /* POINT TO COMPARAND            */
         L     R2,BUF1PT                                           0623
*     R4=BUF2PT;                    /* POINT TO COMPARAND            */
         L     R4,BUF2PT                                           0624
*     R3=MIN(PAGELNTH,THELENTH);    /* LENGTH TO COMPARE             */
         L     R3,@CF00091                                         0625
         CR    R3,THELENTH                                         0625
         BNH   *+6
         LR    R3,THELENTH                                         0625
*     R5=R3;                        /* LENGTH TO COMPARE             */
         LR    R5,R3                                               0626
*     IF ESAU1FSM='1'B×ESAU2FSM='1'B THEN/* IF INVALID               */
         TM    ESAU1FSM,B'00100000'                                0627
         BO    @RT00627                                            0627
         TM    ESAU2FSM,B'00100000'                                0627
         BNO   @RF00627                                            0627
@RT00627 DS    0H                                                  0628
*       DO;                                                        0628
*                                                                  0628
*         /***********************************************************/
*         /*                                                         */
*         /* DISCONTINUITY HIT BEFORE END OF COMPARISON              */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0629
*         ORIGLNTH=ORIGLNTH-THELENTH;/* GET NUMBER OF BYTES SEARCHED */
         L     @14,ORIGLNTH                                        0629
         SLR   @14,THELENTH                                        0629
         ST    @14,ORIGLNTH                                        0629
*         IF PKLIST=PNLIST THEN                                    0630
         CLC   PKLIST(2),@CH00043                                  0630
         BNE   @RF00630                                            0630
*           DO;                     /* LIST OPERAND                  */
*             DO;                   /* BLRCNVUC(ORIGLNTH)          0632
*                                      FROM(UNSIGNED BINARY)TO(CHARAC
*                                      TER)SET(IN81T1)PATTERN      0632
*                                      REMARK(CONVERT LENGTH)        */
*                                                                  0632
*               /*****************************************************/
*               /*                                                   */
*               /* CONVERT LENGTH                                    */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0633
*               CVD(ORIGLNTH,PACKED);/* UNSIGNED BINARY=>PACKED    0633
*                                      DECIMAL                       */
         CVD   @14,PACKED                                          0633
*               ZONED='40404040402020202020202020202120'X;/* ED    0634
*                                      PATTERN                       */
         MVC   ZONED(16),@CB01854                                  0634
*               ED(ZONED(5:16),PACKED(17:64));/* PACKED            0635
*                                      DECIMAL=>EBCDIC               */
         ED    ZONED+4(12),PACKED+2                                0635
*               IN81T1=ZONED(17-LENGTH(IN81T1):16);/* EBCDIC RESULT  */
         MVC   IN81T1(8),ZONED+8                                   0636
*             END;                  /* BLRCNVUC(ORIGLNTH)          0637
*                                      FROM(UNSIGNED BINARY)TO(CHARAC
*                                      TER)SET(IN81T1)PATTERN      0637
*                                      REMARK(CONVERT LENGTH)        */
*             OLDN=2;               /* 2 SEGMENTS                    */
         MVC   OLDN(4),@CF00068                                    0638
*             OLDP(2)=ADDR(IN81);   /* 1ST SEGMENT                   */
         LA    @14,IN81                                            0639
         ST    @14,OLDP+4                                          0639
*             OLDP(1)=ADDR(M029);   /* INSERT                        */
         LA    @14,M029                                            0640
         ST    @14,OLDP                                            0640
*             IN81O=ADDR(M029T2)-ADDR(M029T);/* OFFSET               */
         MVC   IN81O(2),@CH01871                                   0641
*             IN81L=12;             /* SET RETURN CODE               */
         MVC   IN81L(2),@CH00033                                   0642
*             CALL BLSUMPK1(ZZ2,IN81);/* EDIT SEGMENT                */
         ST    R9,@AL00001                                         0643
         LA    @14,IN81                                            0643
         ST    @14,@AL00001+4                                      0643
         L     @08,ZZ2BVTP(,R9)                                    0643
         L     @15,BVTMPK1P(,@08)                                  0643
         LA    @01,@AL00001                                        0643
         BALR  @14,@15                                             0643
*             CALL BLSUPUTO(ZZ2,OLD);/* OUTPUT MESSAGE               */
         ST    R9,@AL00001                                         0644
         LA    @14,OLD                                             0644
         ST    @14,@AL00001+4                                      0644
         L     @08,ZZ2BVTP(,R9)                                    0644
         L     @15,BVTPUTOP(,@08)                                  0644
         LA    @01,@AL00001                                        0644
         BALR  @14,@15                                             0644
*           END;                                                   0645
*         RETC=ZZZFLAGS;            /* SET RETURN CODE               */
@RF00630 MVC   RETC(4),@CF00033                                    0646
*         RF=0;                     /* NO EXTERNAL FAILURE           */
         SLR   RF,RF                                               0647
*         GO TO EXITRLSA;           /* EXIT                          */
         B     EXITRLSA                                            0648
*       END;                                                       0649
*     IF FLAG1='1'B&PDMAVFP='1'B THEN                              0650
*                                                                  0650
@RF00627 TM    FLAG1,B'10000000'                                   0650
         BNO   @RF00650                                            0650
         TM    PDMAVFP,B'10000000'                                 0650
         BNO   @RF00650                                            0650
*       /*************************************************************/
*       /*                                                           */
*       /* MASK COMPARANDS                                           */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0651
*       DO;                         /* ANY MASKING FIRST TIME        */
*         FLAG1='0'B;               /* TURN OFF FIRST TIME FLAG      */
         NI    FLAG1,B'01111111'                                   0652
*         BUF1(1:THELENTH)=BUF1(1:THELENTH)&PDMABUF(1:THELENTH);   0653
         L     @14,BUF1PT                                          0653
         LR    @08,THELENTH                                        0653
         BCTR  @08,0                                               0653
         EX    @08,@SN01894                                        0653
*         BUF2(1:THELENTH)=BUF2(1:THELENTH)&PDMABUF(1:THELENTH);   0654
         L     @14,BUF2PT                                          0654
         EX    @08,@SN01896                                        0654
*       END;                                                       0655
*     CLCL(R2,R4);                  /* PERFORM REQUESTED COMPARISON  */
*                                                                  0656
@RF00650 CLCL  R2,R4                                               0656
*     /***************************************************************/
*     /*                                                             */
*     /* INEQUALITY FOUND                                            */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0657
*     IF R3^=0 THEN                                                0657
         LTR   R3,R3                                               0657
         BZ    @RF00657                                            0657
*       DO;                         /* INEQUALITY                    */
*         IF BYT1>BYT2 THEN         /* COMPARAND 1 GREATER           */
         CLC   BYT1(1,R2),BYT2(R4)                                 0659
         BNH   @RF00659                                            0659
*           DO;                                                    0660
*             IF PKLIST=PNLIST THEN /* LIST OPERAND                  */
         CLC   PKLIST(2),@CH00043                                  0661
         BNE   @RF00661                                            0661
*               DO;                                                0662
*                 OLDN=2;           /* 2 SEGMENTS                    */
         MVC   OLDN(4),@CF00068                                    0663
*                 OLDP(1)=ADDR(M030);/* BASE SEGMENT                 */
         LA    @14,M030                                            0664
         ST    @14,OLDP                                            0664
*                 OLDP(2)=ADDR(MGT);/* INSERT                        */
         LA    @14,MGT                                             0665
         ST    @14,OLDP+4                                          0665
*                 CALL BLSUPUTO(ZZ2,OLD);/* OUTPUT MESSAGE           */
         ST    R9,@AL00001                                         0666
         LA    @14,OLD                                             0666
         ST    @14,@AL00001+4                                      0666
         L     @08,ZZ2BVTP(,R9)                                    0666
         L     @15,BVTPUTOP(,@08)                                  0666
         LA    @01,@AL00001                                        0666
         BALR  @14,@15                                             0666
*               END;                                               0667
*             RETC=8;               /* INDICATE COMPARAND 1 GREATER  */
@RF00661 MVC   RETC(4),@CF00051                                    0668
*             RF=0;                 /* NO EXTERNAL FAILURE           */
         SLR   RF,RF                                               0669
*           END;                                                   0670
*         ELSE                                                     0671
*           DO;                     /* ARG2 GREATER                  */
         B     @RC00659                                            0671
@RF00659 DS    0H                                                  0672
*             IF PKLIST=PNLIST THEN /* LIST REQUESTED                */
         CLC   PKLIST(2),@CH00043                                  0672
         BNE   @RF00672                                            0672
*               DO;                                                0673
*                 OLDN=2;           /* 2 SEGMENTS                    */
         MVC   OLDN(4),@CF00068                                    0674
*                 OLDP(1)=ADDR(M030);/* BASE SEGMENT                 */
         LA    @14,M030                                            0675
         ST    @14,OLDP                                            0675
*                 OLDP(2)=ADDR(MLT);/* INSERT                        */
         LA    @14,MLT                                             0676
         ST    @14,OLDP+4                                          0676
*                 CALL BLSUPUTO(ZZ2,OLD);/* OUTPUT MESSAGE           */
         ST    R9,@AL00001                                         0677
         LA    @14,OLD                                             0677
         ST    @14,@AL00001+4                                      0677
         L     @08,ZZ2BVTP(,R9)                                    0677
         L     @15,BVTPUTOP(,@08)                                  0677
         LA    @01,@AL00001                                        0677
         BALR  @14,@15                                             0677
*               END;                                               0678
*             RF=0;                 /* NO ERRORS                     */
@RF00672 SLR   RF,RF                                               0679
*             RETC=4;               /* INDICATE COMPARAND 2 GREATER  */
         MVC   RETC(4),@CF00040                                    0680
*           END;                                                   0681
*         GO TO EXITRLSA;           /* EXIT                          */
         B     EXITRLSA                                            0682
*       END;                                                       0683
*     THELENTH=THELENTH-PAGELNTH;   /* DECREMENT LENGTH BY LENGTH OF
*                                      BUFFER                        */
*                                                                  0684
@RF00657 SL    THELENTH,@CF00091                                   0684
*     /***************************************************************/
*     /*                                                             */
*     /* COMPARANDS ARE EQUAL                                        */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0685
*     IF THELENTH<=0 THEN           /* IF EXHAUSTED COMPARANDS       */
         LTR   THELENTH,THELENTH                                   0685
         BP    @RF00685                                            0685
*       DO;                         /* EQUAL ALL THE WAY             */
*         IF PKLIST=PNLIST THEN     /* LIST REQUESTED                */
         CLC   PKLIST(2),@CH00043                                  0687
         BNE   @RF00687                                            0687
*           DO;                                                    0688
*             OLDN=2;               /* 2 SEGMENTS                    */
         MVC   OLDN(4),@CF00068                                    0689
*             OLDP(1)=ADDR(M030);   /* BASE SEGMENT                  */
         LA    @14,M030                                            0690
         ST    @14,OLDP                                            0690
*             OLDP(2)=ADDR(MEQ);    /* INSERT                        */
         LA    @14,MEQ                                             0691
         ST    @14,OLDP+4                                          0691
*             CALL BLSUPUTO(ZZ2,OLD);/* OUTPUT MESSAGE               */
         ST    R9,@AL00001                                         0692
         LA    @14,OLD                                             0692
         ST    @14,@AL00001+4                                      0692
         L     @08,ZZ2BVTP(,R9)                                    0692
         L     @15,BVTPUTOP(,@08)                                  0692
         LA    @01,@AL00001                                        0692
         BALR  @14,@15                                             0692
*           END;                                                   0693
*         RETC=0;                   /* INDICATE COMPARANDS EQUAL     */
@RF00687 SLR   @14,@14                                             0694
         ST    @14,RETC                                            0694
*         RF=0;                     /* NO ERRORS                     */
         SLR   RF,RF                                               0695
*         GO TO EXITRLSA;           /* EXIT                          */
         B     EXITRLSA                                            0696
*       END;                                                       0697
*     ESAU1DLE=MIN(PAGELNTH,THELENTH);/* LENGTH IS AT MOST PAGELNTH
*                                      TO COMPARE                    */
@RF00685 L     @14,@CF00091                                        0698
         LR    @08,@14                                             0698
         CR    @08,THELENTH                                        0698
         BNH   *+6
         LR    @08,THELENTH                                        0698
         ST    @08,ESAU1DLE                                        0698
*     ESAU1LAD=ESAU1LAD+PAGELNTH;   /* INCREMENT ADDRESS TO COMPARE
*                                      AT                            */
         AL    @14,ESAU1LAD                                        0699
         ST    @14,ESAU1LAD                                        0699
*     CALL BLSRACC(ZZ2,ESAU1,BUF1); /* GET DATA                      */
         ST    R9,@AL00001                                         0700
         LA    @14,ESAU1                                           0700
         ST    @14,@AL00001+4                                      0700
         L     @14,BUF1PT                                          0700
         ST    @14,@AL00001+8                                      0700
         L     @08,ZZ2RVTP(,R9)                                    0700
         L     @15,RVTRACCP(,@08)                                  0700
         LA    @01,@AL00001                                        0700
         BALR  @14,@15                                             0700
*     ESAU2DLE=MIN(PAGELNTH,THELENTH);/* SET 2ND COMPARE LENGTH      */
         L     @14,@CF00091                                        0701
         LR    @08,@14                                             0701
         CR    @08,THELENTH                                        0701
         BNH   *+6
         LR    @08,THELENTH                                        0701
         ST    @08,ESAU2DLE                                        0701
*     ESAU2LAD=ESAU2LAD+PAGELNTH;   /* INC ADDRESS TO COMPARE AT     */
         AL    @14,ESAU2LAD                                        0702
         ST    @14,ESAU2LAD                                        0702
*     CALL BLSRACC(ZZ2,ESAU2,BUF2); /* GET DATA                      */
         ST    R9,@AL00001                                         0703
         LA    @14,ESAU2                                           0703
         ST    @14,@AL00001+4                                      0703
         L     @14,BUF2PT                                          0703
         ST    @14,@AL00001+8                                      0703
         L     @08,ZZ2RVTP(,R9)                                    0703
         L     @15,RVTRACCP(,@08)                                  0703
         LA    @01,@AL00001                                        0703
         BALR  @14,@15                                             0703
*   END;                                                           0704
         AL    J1,@CF00043                                         0704
         B     @DL00622                                            0704
*                                                                  0705
*   /*****************************************************************/
*   /*                                                               */
*   /* PROGRAM EXIT                                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0705
*EXITRLSA:                          /* EXIT WITH PDL                 */
*   RETC=MIN(MAX(RF,RETC),ZZZFLAGT);/* SET MAX RETURN CODE           */
EXITRLSA L     @14,RETC                                            0705
         CR    @14,RF                                              0705
         BNL   *+6
         LR    @14,RF                                              0705
         LA    @08,16                                              0705
         CR    @14,@08                                             0705
         BNH   *+6
         LR    @14,@08                                             0705
         ST    @14,RETC                                            0705
*   DO WHILE(PDAPTR^=0);            /* BLRRLSA MF(E,PD)              */
         B     @DE00706                                            0706
@DL00706 DS    0H                                                  0707
*     PDRPTR=PDAPTR;                                               0707
         L     PDRPTR,PDAPTR                                       0707
*     PDAPTR=PDXP;                                                 0708
         L     @14,PDXP-1(,PDRPTR)                                 0708
         LA    @14,0(,@14)                                         0708
         ST    @14,PDAPTR                                          0708
*     DO;                           /* FREEMAIN(R)                 0709
*                                      LV(PDL)SP(1)A(PDDSECT)        */
*       RESPECIFY                                                  0710
*        (GPR01F,                                                  0710
*         GPR00F) RESTRICTED;                                      0710
*       GPR00F=PDL;                 /* LENGTH REQUESTED              */
         L     GPR00F,PDL-1(,PDRPTR)                               0711
         ICM   GPR00F,8,@CB00932                                   0711
*       GPR01F=1;                   /* SP IN REG 1                   */
         LA    GPR01F,1                                            0712
*       GEN(SLL   GPR01F,24)                                       0713
*       NODEFS NOREFS NOSETS NOEXIT NOFLOWS SEQFLOW;               0713
         SLL   GPR01F,24
*       GPR00F=GPR00F×GPR01F;       /* SP IN HI BYTE                 */
         OR    GPR00F,GPR01F                                       0714
*       GPR01F=ADDR(PDDSECT);       /* SET REGISTER ONE              */
         LR    GPR01F,PDRPTR                                       0715
*       SVC(10);                    /* R-FORM OF GETMAIN             */
         SVC   10                                                  0716
*       RESPECIFY                                                  0717
*        (GPR01F,                                                  0717
*         GPR00F) UNRESTRICTED;                                    0717
*     END;                          /* FREEMAIN(R)                 0718
*                                      LV(PDL)SP(1)A(PDDSECT)        */
*   END;                            /* BLRRLSA MF(E,PD)              */
@DE00706 L     @14,PDAPTR                                          0719
         LTR   @14,@14                                             0719
         BNZ   @DL00706                                            0719
*EXITNORL:                                                         0720
*   DO;                             /* FREEMAIN(R) LV(PAGELNTH)SP(ZZZ
*                                      SPEXC)A(BUF1)                 */
EXITNORL DS    0H                                                  0721
*     RESPECIFY                                                    0721
*      (GPR01F,                                                    0721
*       GPR00F) RESTRICTED;                                        0721
*     GPR00F=PAGELNTH;              /* LENGTH REQUESTED              */
         L     GPR00F,@CF00091                                     0722
*     GPR01F=ZZZSPEXC;              /* SP IN REG 1                   */
         LA    GPR01F,1                                            0723
*     GEN(SLL   GPR01F,24)                                         0724
*     NODEFS NOREFS NOSETS NOEXIT NOFLOWS SEQFLOW;                 0724
         SLL   GPR01F,24
*     GPR00F=GPR00F×GPR01F;         /* SP IN HI BYTE                 */
         OR    GPR00F,GPR01F                                       0725
*     GPR01F=ADDR(BUF1);            /* SET REGISTER ONE              */
         L     GPR01F,BUF1PT                                       0726
*     SVC(10);                      /* R-FORM OF GETMAIN             */
         SVC   10                                                  0727
*     RESPECIFY                                                    0728
*      (GPR01F,                                                    0728
*       GPR00F) UNRESTRICTED;                                      0728
*   END;                            /* FREEMAIN(R) LV(PAGELNTH)SP(ZZZ
*                                      SPEXC)A(BUF1)                 */
*   DO;                             /* FREEMAIN(R) LV(PAGELNTH)SP(ZZZ
*                                      SPEXC)A(BUF2)                 */
*     RESPECIFY                                                    0731
*      (GPR01F,                                                    0731
*       GPR00F) RESTRICTED;                                        0731
*     GPR00F=PAGELNTH;              /* LENGTH REQUESTED              */
         L     GPR00F,@CF00091                                     0732
*     GPR01F=ZZZSPEXC;              /* SP IN REG 1                   */
         LA    GPR01F,1                                            0733
*     GEN(SLL   GPR01F,24)                                         0734
*     NODEFS NOREFS NOSETS NOEXIT NOFLOWS SEQFLOW;                 0734
         SLL   GPR01F,24
*     GPR00F=GPR00F×GPR01F;         /* SP IN HI BYTE                 */
         OR    GPR00F,GPR01F                                       0735
*     GPR01F=ADDR(BUF2);            /* SET REGISTER ONE              */
         L     GPR01F,BUF2PT                                       0736
*     SVC(10);                      /* R-FORM OF GETMAIN             */
         SVC   10                                                  0737
*     RESPECIFY                                                    0738
*      (GPR01F,                                                    0738
*       GPR00F) UNRESTRICTED;                                      0738
*   END;                            /* FREEMAIN(R) LV(PAGELNTH)SP(ZZZ
*                                      SPEXC)A(BUF2)                 */
*   RETURN CODE(RETC);              /* RETURN                        */
         L     @08,RETC                                            0740
         L     @13,4(,@13)                                         0740
         L     @00,@SIZDATD                                        0740
         LR    @01,@11                                             0740
         BLSUFRER R,LV=(0),A=(1)
         LR    @15,@08                                             0740
         L     @14,12(,@13)                                        0740
         LM    @00,@12,20(@13)                                     0740
         BR    @14                                                 0740
*                                                                  0741
*/*BLSRPEND--DEBUGGING MODULE                                        */
*/*BLSUPEND--MVS IPCS MODULE                                         */
*                                                                  0741
*   DECLARE                         /* DATA FOR AHB MACROS           */
*     PACKED BIT(64) BOUNDARY(DWORD),/* DATA CONVERSION WORK AREA    */
*     ZONED CHARACTER(16) BOUNDARY(DWORD);/* DATA CONVERSION WORK  0741
*                                      AREA                          */
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR00F FIXED(31) REG(0),                                     0742
*     GPR01F FIXED(31) REG(1),                                     0742
*     GPR15F FIXED(31) REG(15);                                    0742
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0743
*     I031F FIXED(31) BASED,                                       0743
*     I031P PTR(31) BASED,                                         0743
*     I015F FIXED(15) BASED,                                       0743
*     I015P PTR(15) BASED,                                         0743
*     I008P PTR(8) BASED,                                          0743
*     I001C CHAR(1) BASED;                                         0743
*   GENERATE NODEFS NOREFS DATA;                                   0744
*   END BLSRCOMP                    /* BLRPEND(BLSRCOMP)             */
*                                                                  0745
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (BLSRZZZ )                                       */
*/*%INCLUDE SYSLIB  (BLSUZZZ )                                       */
*/*%INCLUDE SYSLIB  (BLRFULL )                                       */
*/*%INCLUDE SYSLIB  (IKJCPPL )                                       */
*/*%INCLUDE SYSLIB  (IKJPSCB )                                       */
*/*%INCLUDE SYSLIB  (IKJECT  )                                       */
*/*%INCLUDE SYSLIB  (IKJUPT  )                                       */
*/*%INCLUDE SYSLIB  (BLSUSERV)                                       */
*/*%INCLUDE SYSLIB  (BLRSERV )                                       */
*/*%INCLUDE SYSLIB  (BLRSERVD)                                       */
*/*%INCLUDE SYSLIB  (BLSRSERV)                                       */
*                                                                  0745
*       ;                                                          0745
@EL00001 L     @13,4(,@13)                                         0745
@EF00001 L     @00,@SIZDATD                                        0745
         LR    @01,@11                                             0745
         BLSUFRER R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0745
         BR    @14                                                 0745
@DATA    DS    0H
@CH01871 DC    H'36'
@CH01870 DC    H'49'
@SM01874 MVC   ZONED(0),PD1VV(@06)
@SM01876 MVC   PD1VBUF(0),PACKED
@SM01878 MVC   PD1VBUF(0),PD1VV(@06)
@SM01880 MVC   ZONED(0),PD2VV(@08)
@SM01882 MVC   PD2VBUF(0),PACKED
@SM01884 MVC   PD2VBUF(0),PD2VV(@06)
@SM01886 MVC   BUF1(0,@14),PD1VBUF
@SM01888 MVC   BUF2(0,@14),PD2VBUF
@SM01890 MVC   ZONED(0),PDMAV(@08)
@SM01892 MVC   PDMABUF(0),PACKED
@SN01894 NC    BUF1(0,@14),PDMABUF
@SN01896 NC    BUF2(0,@14),PDMABUF
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@AL00001 DS    5A
BLSRCOMP CSECT
         DS    0F
@CF00043 DC    F'1'
@CH00043 EQU   @CF00043+2
@CF00068 DC    F'2'
@CH00068 EQU   @CF00068+2
@CF00040 DC    F'4'
@CF00051 DC    F'8'
@CF00033 DC    F'12'
@CH00033 EQU   @CF00033+2
@CF00054 DC    F'16'
@CF00091 DC    F'4096'
@DATD    DSECT
         DS    0D
PDAPTR   DS    A
ORIGLNTH DS    F
RETC     DS    F
PD1VLEN  DS    F
BUF1PT   DS    A
BUF2PT   DS    A
ESAU1    DS    CL694
         ORG   ESAU1
ESAU1RID DS    CL2
@NM00090 DS    BL6
@NM00091 DS    CL8
@NM00092 DS    BL8
ESAU1RDX DS    FL4
ESAU1SYM DS    CL31
ESAU1ELK DS    0C
ESAU1RV1 DS    CL1
ESAU1AS  DS    CL16
         ORG   ESAU1AS
ESAU1AS0 DS    0C
ESAU1AST DS    CL2
@NM00093 DS    BL2
ESAU1AS1 DS    FL4
ESAU1AS2 DS    FL4
@NM00094 DS    BL4
ESAU1AS9 DS    0C
         ORG   ESAU1+76
ESAU1LAD DS    AL4
ESAU1D   DS    CL60
         ORG   ESAU1D
ESAU1D00 DS    0C
ESAU1DOF DS    FL4
ESAU1DLE DS    FL4
ESAU1DOB DS    FL1
ESAU1DLB DS    FL1
ESAU1DT  DS    CL34
         ORG   ESAU1DT
ESAU1DT0 DS    0C
ESAU1DTY DS    CL1
@NM00095 DS    BL1
ESAU1DTD DS    CL31
ESAU1DTE DS    CL1
ESAU1DT9 DS    0C
         ORG   ESAU1D+44
ESAU1DIM DS    FL4
ESAU1DIL DS    FL4
ESAU1DF  DS    BL4
         ORG   ESAU1DF
ESAU1DFA DS    BL1
@NM00096 EQU   ESAU1DF+0
         ORG   ESAU1D+56
@NM00097 DS    BL4
ESAU1D99 DS    0C
         ORG   ESAU1+140
ESAU1MAD DS    AL4
@NM00098 DS    BL16
ESAU1KEY DS    BL1
ESAU1F   DS    BL3
         ORG   ESAU1F
ESAU1FS  DS    BL1
         ORG   ESAU1FS
ESAU1FSC DS    BL1
ESAU1FS2 EQU   ESAU1FS+0
ESAU1FSM EQU   ESAU1FS+0
ESAU1FSA EQU   ESAU1FS+0
ESAU1FSP EQU   ESAU1FS+0
ESAU1FSR EQU   ESAU1FS+0
ESAU1FSX EQU   ESAU1FS+0
ESAU1FSS EQU   ESAU1FS+0
         ORG   ESAU1F+1
ESAU1FC  DS    BL1
         ORG   ESAU1FC
ESAU1FCD DS    BL1
@NM00099 EQU   ESAU1FC+0
         ORG   ESAU1F+2
@NM00100 DS    BL1
         ORG   ESAU1+164
ESAU1ABS DS    FL4
@NM00101 DS    BL12
ESAU1R   DS    CL514
         ORG   ESAU1R
ESAU1RL  DS    FL2
ESAU1RT  DS    CL512
         ORG   ESAU1RT
ESAU1RT1 DS    CL512
         ORG   ESAU1+694
ESAU1999 DS    0C
         ORG   ESAU1+694
         DS    CL2
ESAU2    DS    CL694
         ORG   ESAU2
ESAU2RID DS    CL2
@NM00130 DS    BL6
@NM00131 DS    CL8
@NM00132 DS    BL8
ESAU2RDX DS    FL4
ESAU2SYM DS    CL31
ESAU2ELK DS    0C
ESAU2RV1 DS    CL1
ESAU2AS  DS    CL16
         ORG   ESAU2AS
ESAU2AS0 DS    0C
ESAU2AST DS    CL2
@NM00133 DS    BL2
ESAU2AS1 DS    FL4
ESAU2AS2 DS    FL4
@NM00134 DS    BL4
ESAU2AS9 DS    0C
         ORG   ESAU2+76
ESAU2LAD DS    AL4
ESAU2D   DS    CL60
         ORG   ESAU2D
ESAU2D00 DS    0C
ESAU2DOF DS    FL4
ESAU2DLE DS    FL4
ESAU2DOB DS    FL1
ESAU2DLB DS    FL1
ESAU2DT  DS    CL34
         ORG   ESAU2DT
ESAU2DT0 DS    0C
ESAU2DTY DS    CL1
@NM00135 DS    BL1
ESAU2DTD DS    CL31
ESAU2DTE DS    CL1
ESAU2DT9 DS    0C
         ORG   ESAU2D+44
ESAU2DIM DS    FL4
ESAU2DIL DS    FL4
ESAU2DF  DS    BL4
         ORG   ESAU2DF
ESAU2DFA DS    BL1
@NM00136 EQU   ESAU2DF+0
         ORG   ESAU2D+56
@NM00137 DS    BL4
ESAU2D99 DS    0C
         ORG   ESAU2+140
ESAU2MAD DS    AL4
@NM00138 DS    BL16
ESAU2KEY DS    BL1
ESAU2F   DS    BL3
         ORG   ESAU2F
ESAU2FS  DS    BL1
         ORG   ESAU2FS
ESAU2FSC DS    BL1
ESAU2FS2 EQU   ESAU2FS+0
ESAU2FSM EQU   ESAU2FS+0
ESAU2FSA EQU   ESAU2FS+0
ESAU2FSP EQU   ESAU2FS+0
ESAU2FSR EQU   ESAU2FS+0
ESAU2FSX EQU   ESAU2FS+0
ESAU2FSS EQU   ESAU2FS+0
         ORG   ESAU2F+1
ESAU2FC  DS    BL1
         ORG   ESAU2FC
ESAU2FCD DS    BL1
@NM00139 EQU   ESAU2FC+0
         ORG   ESAU2F+2
@NM00140 DS    BL1
         ORG   ESAU2+164
ESAU2ABS DS    FL4
@NM00141 DS    BL12
ESAU2R   DS    CL514
         ORG   ESAU2R
ESAU2RL  DS    FL2
ESAU2RT  DS    CL512
         ORG   ESAU2RT
ESAU2RT1 DS    CL512
         ORG   ESAU2+694
ESAU2999 DS    0C
         ORG   ESAU2+694
         DS    CL2
OLD      DS    CL12
         ORG   OLD
OLDN     DS    FL4
OLDP     DS    2A
         ORG   OLD+12
IN81     DS    CL12
         ORG   IN81
IN81L    DS    FL2
IN81O    DS    FL2
IN81T    DS    CL8
         ORG   IN81T
IN81T1   DS    CL8
         ORG   IN81+12
PDMABUF  DS    CL256
PD1VBUF  DS    CL256
PD2VBUF  DS    CL256
FLAGS    DS    BL1
         ORG   FLAGS
FLAG1    DS    BL1
@NM00168 EQU   FLAGS+0
         ORG   FLAGS+1
         DS    CL7
ZONED    DS    CL16
PACKED   DS    BL8
BLSRCOMP CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
PCPTR    DC    AL4(PC)
@CC01851 DC    C'SECOND OPERAND DATA'
@CC01849 DC    C'FIRST OPERAND DATA'
@CC01840 DC    C'0000000000000000'
@CB01854 DC    X'40404040402020202020202020202120'
@CB00932 DC    X'00'
         DS    CL6
ESCO     DS    CL182
         ORG   ESCO
ESCORID  DC    CL2'ES'
@NM00077 DC    X'000000000000'
@NM00078 DC    CL8' '
@NM00079 DC    X'00'
         DC    XL7'0'
ESCORDX  DC    A(0)
ESCOSYM  DC    CL31' '
ESCOELK  DS    0C
ESCORV1  DC    CL1' '
ESCOAS   DS    CL16
         ORG   ESCOAS
ESCOAS0  DS    0C
ESCOAST  DC    CL2'  '
@NM00080 DC    X'0000'
ESCOAS1  DC    A(0)
ESCOAS2  DC    A(0)
@NM00081 DC    X'00'
         DC    XL3'0'
ESCOAS9  DS    0C
         ORG   ESCO+76
ESCOLAD  DC    A(0)
ESCOD    DS    CL60
         ORG   ESCOD
ESCOD00  DS    0C
ESCODOF  DC    F'0'
ESCODLE  DC    A(4)
ESCODOB  DC    AL1(0)
ESCODLB  DC    AL1(0)
ESCODT   DS    CL34
         ORG   ESCODT
ESCODT0  DS    0C
ESCODTY  DC    CL1'U'
@NM00082 DC    X'00'
ESCODTD  DC    CL31'                               '
ESCODTE  DC    CL1' '
ESCODT9  DS    0C
         ORG   ESCOD+44
ESCODIM  DC    A(0)
ESCODIL  DC    F'0'
ESCODF   DC    X'00000000'
         ORG   ESCODF
ESCODFA  DS    BL1
@NM00083 EQU   ESCODF+0
         ORG   ESCOD+56
@NM00084 DC    X'00'
         DC    XL3'0'
ESCOD99  DS    0C
         ORG   ESCO+140
ESCOMAD  DC    A(0)
@NM00085 DC    X'00'
         DC    XL15'0'
ESCOKEY  DS    BL1
ESCOF    DC    X'00'
         DC    XL2'0'
         ORG   ESCOF
ESCOFS   DS    BL1
         ORG   ESCOFS
ESCOFSC  DS    BL1
ESCOFS2  EQU   ESCOFS+0
ESCOFSM  EQU   ESCOFS+0
ESCOFSA  EQU   ESCOFS+0
ESCOFSP  EQU   ESCOFS+0
ESCOFSR  EQU   ESCOFS+0
ESCOFSX  EQU   ESCOFS+0
ESCOFSS  EQU   ESCOFS+0
         ORG   ESCOF+1
ESCOFC   DS    BL1
         ORG   ESCOFC
ESCOFCD  DS    BL1
@NM00086 EQU   ESCOFC+0
         ORG   ESCOF+2
@NM00087 DS    BL1
         ORG   ESCO+164
ESCOABS  DC    A(0)
@NM00088 DC    X'00'
         DC    XL11'0'
ESCOR    DS    CL2
         ORG   ESCOR
ESCORL   DC    AL2(0)
ESCORT   DS    0C
         ORG   ESCORT
ESCORT1  DS    0C
         ORG   ESCO+182
ESCO999  DS    0C
         ORG   ESCO+182
M029     DS    CL46
         ORG   M029
M029L    DC    AL2(46)
M029O    DC    AL2(0)
M029T    DS    CL42
         ORG   M029T
M029T1   DC    CL36'BLS18029I COMPARE DISCONTINUED AFTER'
M029T2   DC    CL6' BYTES'
         ORG   M029+46
M030     DS    CL37
         ORG   M030
M030L    DC    AL2(37)
M030O    DC    AL2(0)
M030T    DS    CL33
         ORG   M030T
M030T1   DC    CL23'BLS18030I OPERAND 1 IS '
M030T2   DC    CL10' OPERAND 2'
         ORG   M030+37
         DS    CL1
M031     DS    CL70
         ORG   M031
M031L    DC    AL2(70)
M031O    DC    AL2(0)
M031T    DS    CL66
         ORG   M031T
M031T1   DC    CL49'BLS18031I OPERAND LENGTHS UNEQUAL, SHORTER LENGTH'
M031T2   DC    CL17' USED FOR COMPARE'
         ORG   M031+70
M087     DS    CL34
         ORG   M087
M087L    DC    AL2(34)
M087O    DC    AL2(0)
M087T    DS    CL30
         ORG   M087T
M087T1   DC    CL30'BLS18087I INVALID COMPARE MASK'
         ORG   M087+34
MGT      DS    CL16
         ORG   MGT
MGTL     DC    AL2(16)
MGTO     DC    AL2(M030T2-M030T)
MGTT     DS    CL12
         ORG   MGTT
MGTT1    DC    CL12'GREATER THAN'
         ORG   MGT+16
MLT      DS    CL13
         ORG   MLT
MLTL     DC    AL2(13)
MLTO     DC    AL2(M030T2-M030T)
MLTT     DS    CL9
         ORG   MLTT
MLTT1    DC    CL9'LESS THAN'
         ORG   MLT+13
         DS    CL1
MEQ      DS    CL12
         ORG   MEQ
MEQL     DC    AL2(12)
MEQO     DC    AL2(M030T2-M030T)
MEQT     DS    CL8
         ORG   MEQT
MEQT1    DC    CL8'EQUAL TO'
         ORG   MEQ+12
PXDO     DC    AL2(PXDSPL-PD)
         DC    2AL2(0)
         DC    AL2(PXDRMK-PD)
         DC    AL2(PXDREQ-PD)
         DC    AL2(PXDSTG-PD)
         DC    AL2(PXDSYM-PD)
         DC    AL2(PXDMCH-PD)
         DC    3AL2(0)
PXAO     DC    AL2(0)
         DC    AL2(PXA1-PD)
         DC    AL2(PXA2-PD)
         DC    AL2(0)
         DC    AL2(0)
         DC    AL2(PXCPU-PD)
         DC    AL2(0)
         DC    AL2(PXASI-PD)
         DC    AL2(0)
         DC    AL2(0)
         DC    AL2(PXDTYPE-PD)
         DC    AL2(0)
         DC    AL2(PXLENGTH-PD)
         DC    AL2(PXMULT-PD)
         DC    AL2(PXRMK-PD)
         DC    AL2(PXDTD-PD)
         DC    AL2(PXLEN-PD)
         DC    AL2(PXDIM-PD)
         DC    AL2(PXREM-PD)
         DC    AL2(PXNTRY-PD)
         DC    AL2(PXNTR-PD)
PXRO     DC    AL2(PXPRINT-PD)
         DC    AL2(PXTERM-PD)
         DC    AL2(PXDFLG-PD)
         DC    AL2(PXDFLV-PD)
PYAO     DC    AL2(0)
         DC    AL2(PYA1-PD)
         DC    AL2(PYA2-PD)
         DC    AL2(0)
         DC    AL2(0)
         DC    AL2(PYCPU-PD)
         DC    AL2(0)
         DC    AL2(PYASI-PD)
         DC    AL2(0)
         DC    AL2(0)
         DC    AL2(PYDTYPE-PD)
         DC    AL2(0)
         DC    AL2(PYLENGTH-PD)
         DC    AL2(PYMULT-PD)
         DC    AL2(PYRMK-PD)
         DC    AL2(PYDTD-PD)
         DC    AL2(PYLEN-PD)
         DC    AL2(PYDIM-PD)
         DC    AL2(PYREM-PD)
         DC    AL2(PYNTRY-PD)
         DC    AL2(PYNTR-PD)
@DATD    DSECT
         SPACE 2
***********************************************************************
* THE FOLLOWING AREA, BLRPATCH, IS RESERVED FOR PATCH APPLICATION     *
* TO OBTAIN PATCH ROOM IN THE @DATD AUTOMATIC STORAGE AREA, MODIFY    *
* CONSTANT @SIZDATD TO REFLECT THE DESIRED @DATD SIZE                 *
***********************************************************************
         SPACE
BLSRCOMP CSECT
         ORG
         DS    0D
BLRPATCH DC    CL8'ZAPAREA',(((*-BLSRCOMP+19)/20+7)/8)CL8'BLSRCOMP'
@DATD    DSECT
         DS    0H
@DATD    DSECT
         SPACE 2
***********************************************************************
* IKJPARM--BEGIN MACROS SPECIFYING COMMAND SYNTAX                     *
***********************************************************************
         SPACE
BLSRCOMP CSECT
PC       IKJPARM DSECT=PD
@DATD    DSECT
BLSRCOMP CSECT
PK1      IKJKEYWD DEFAULT='ADDRESS'
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'ADDRESS',SUBFLD=PS1ADDR
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'VALUE',SUBFLD=PS1VALUE
@DATD    DSECT
BLSRCOMP CSECT
PKLIST   IKJKEYWD DEFAULT='NOLIST'
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'LIST'
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'NOLIST'
@DATD    DSECT
BLSRCOMP CSECT
PKMASK   IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'MASK',SUBFLD=PSMASK
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'NOMASK'
@DATD    DSECT
BLSRCOMP CSECT
PKWITH   IKJKEYWD DEFAULT='WITH'
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'WITH',SUBFLD=PSWITH
@DATD    DSECT
BLSRCOMP CSECT
PXA1     IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'ABSOLUTE'
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'CPU',SUBFLD=PXSUBFB
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'HEADER'
@DATD    DSECT
BLSRCOMP CSECT
PXA2     IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'ASID',SUBFLD=PXSUBFE
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'REAL'
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'STATUS'
@DATD    DSECT
BLSRCOMP CSECT
PXDSPL   IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'DISPLAY',SUBFLD=PXSUBFD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'NODISPLAY',SUBFLD=PXSUBFD
@DATD    DSECT
BLSRCOMP CSECT
PXDTYPE  IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'AREA',SUBFLD=PXSUBFG
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'B',ALIAS=('BIT','HEXADECIMAL','X')
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'C',ALIAS=('CHARACTER')
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'MODULE',SUBFLD=PXSUBFG
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'POINTER',ALIAS=('PTR')
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'F',ALIAS=('SIGNED')
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'STRUCTURE',SUBFLD=PXSUBFG
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'UNSIGNED'
@DATD    DSECT
BLSRCOMP CSECT
PXLENGTH IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'LENGTH',SUBFLD=PXSUBFL
@DATD    DSECT
BLSRCOMP CSECT
PXMULT   IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'DIMENSION',ALIAS=('MULTIPLE'),SUBFLD=PXSUBFI
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'SCALAR'
@DATD    DSECT
BLSRCOMP CSECT
PXNTRY   IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'ENTRY',ALIAS=('ENTRIES'),SUBFLD=PXSUBFN
@DATD    DSECT
BLSRCOMP CSECT
PXRMK    IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'REMARK',SUBFLD=PXSUBFJ
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'NOREMARK'
@DATD    DSECT
BLSRCOMP CSECT
PXPRINT  IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'PRINT'
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'NOPRINT'
@DATD    DSECT
BLSRCOMP CSECT
PXTERM   IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'TERMINAL'
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'NOTERMINAL'
@DATD    DSECT
BLSRCOMP CSECT
PXDFLG   IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'FLAG',SUBFLD=PXSUBFM
@DATD    DSECT
BLSRCOMP CSECT
PXTEST   IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'TEST'
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'NOTEST'
@DATD    DSECT
BLSRCOMP CSECT
         SPACE
PXSUBFM  IKJSUBF
@DATD    DSECT
BLSRCOMP CSECT
PXDFLV   IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'INFORMATIONAL'
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'WARNING'
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'ERROR'
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'SERIOUS',ALIAS=('SEVERE')
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'TERMINATING'
@DATD    DSECT
BLSRCOMP CSECT
         SPACE
PXSUBFG  IKJSUBF
@DATD    DSECT
BLSRCOMP CSECT
PXDTD    IKJIDENT 'DATA NAME',FIRST=ALPHA,MAXLNTH=31,OTHER=ALPHANUM
@DATD    DSECT
BLSRCOMP CSECT
         SPACE
PXSUBFL  IKJSUBF
@DATD    DSECT
BLSRCOMP CSECT
PXLEN    IKJIDENT 'LENGTH',INTEG,PROMPT='LENGTH',VALIDCK=BLSUVP31
@DATD    DSECT
BLSRCOMP CSECT
         SPACE
PXSUBFI  IKJSUBF
@DATD    DSECT
BLSRCOMP CSECT
PXDIM    IKJIDENT 'DIMENSION',INTEG,PROMPT='DIMENSION',VALIDCK=BLSUVP31
@DATD    DSECT
BLSRCOMP CSECT
         SPACE
PXSUBFN  IKJSUBF
@DATD    DSECT
BLSRCOMP CSECT
PXNTR    IKJIDENT 'ENTRY(IES)',INTEG,RANGE,PROMPT='ENTRY(IES)',VALIDCK=*
               BLSUVP32
@DATD    DSECT
BLSRCOMP CSECT
         SPACE
PXSUBFJ  IKJSUBF
@DATD    DSECT
BLSRCOMP CSECT
PXREM    IKJPOSIT QSTRING,PROMPT='REMARK'
@DATD    DSECT
BLSRCOMP CSECT
         SPACE
PXSUBFB  IKJSUBF
@DATD    DSECT
BLSRCOMP CSECT
PXCPU    IKJIDENT 'CPU ADDRESS',INTEG,PROMPT='CPU ADDRESS',VALIDCK=BLSR*
               VPCP
@DATD    DSECT
BLSRCOMP CSECT
         SPACE
PXSUBFE  IKJSUBF
@DATD    DSECT
BLSRCOMP CSECT
PXASI    IKJIDENT 'ASID',INTEG,PROMPT='ASID',VALIDCK=BLSRVPAS
@DATD    DSECT
BLSRCOMP CSECT
         SPACE
PXSUBFD  IKJSUBF
@DATD    DSECT
BLSRCOMP CSECT
PXDRMK   IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'REMARK'
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'NOREMARK'
@DATD    DSECT
BLSRCOMP CSECT
PXDREQ   IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'REQUEST'
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'NOREQUEST'
@DATD    DSECT
BLSRCOMP CSECT
PXDSTG   IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'STORAGE'
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'NOSTORAGE'
@DATD    DSECT
BLSRCOMP CSECT
PXDSYM   IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'SYMBOL'
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'NOSYMBOL'
@DATD    DSECT
BLSRCOMP CSECT
PXDMCH   IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'MACHINE'
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'NOMACHINE'
@DATD    DSECT
BLSRCOMP CSECT
         SPACE
PSMASK   IKJSUBF
@DATD    DSECT
BLSRCOMP CSECT
PDMA     IKJPOSIT VALUE,PROMPT='MASK',VALIDCK=BLSUVPVA
@DATD    DSECT
BLSRCOMP CSECT
         SPACE
PS1ADDR  IKJSUBF
@DATD    DSECT
BLSRCOMP CSECT
PD1A     IKJPOSIT ADDRESS,,RANGE,DEFAULT='X',VALIDCK=BLSRVPAD
@DATD    DSECT
BLSRCOMP CSECT
         SPACE
PS1VALUE IKJSUBF
@DATD    DSECT
BLSRCOMP CSECT
PD1V     IKJPOSIT VALUE,PROMPT='VALUE 1',VALIDCK=BLSUVPVA
@DATD    DSECT
BLSRCOMP CSECT
         SPACE
PSWITH   IKJSUBF
@DATD    DSECT
BLSRCOMP CSECT
PK2      IKJKEYWD DEFAULT='ADDRESS'
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'ADDRESS',SUBFLD=PS2ADDR
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'VALUE',SUBFLD=PS2VALUE
@DATD    DSECT
BLSRCOMP CSECT
PYA1     IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'ABSOLUTE'
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'CPU',SUBFLD=PYSUBFB
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'HEADER'
@DATD    DSECT
BLSRCOMP CSECT
PYA2     IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'ASID',SUBFLD=PYSUBFE
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'REAL'
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'STATUS'
@DATD    DSECT
BLSRCOMP CSECT
PYDTYPE  IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'AREA',SUBFLD=PYSUBFG
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'B',ALIAS=('BIT','HEXADECIMAL','X')
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'C',ALIAS=('CHARACTER')
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'MODULE',SUBFLD=PYSUBFG
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'POINTER',ALIAS=('PTR')
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'F',ALIAS=('SIGNED')
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'STRUCTURE',SUBFLD=PYSUBFG
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'UNSIGNED'
@DATD    DSECT
BLSRCOMP CSECT
PYLENGTH IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'LENGTH',SUBFLD=PYSUBFL
@DATD    DSECT
BLSRCOMP CSECT
PYMULT   IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'DIMENSION',ALIAS=('MULTIPLE'),SUBFLD=PYSUBFI
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'SCALAR'
@DATD    DSECT
BLSRCOMP CSECT
PYNTRY   IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'ENTRY',ALIAS=('ENTRIES'),SUBFLD=PYSUBFN
@DATD    DSECT
BLSRCOMP CSECT
PYRMK    IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'REMARK',SUBFLD=PYSUBFJ
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'NOREMARK'
@DATD    DSECT
BLSRCOMP CSECT
PYTEST   IKJKEYWD
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'TEST'
@DATD    DSECT
BLSRCOMP CSECT
         IKJNAME 'NOTEST'
@DATD    DSECT
BLSRCOMP CSECT
         SPACE
PYSUBFG  IKJSUBF
@DATD    DSECT
BLSRCOMP CSECT
PYDTD    IKJIDENT 'DATA NAME',FIRST=ALPHA,MAXLNTH=31,OTHER=ALPHANUM
@DATD    DSECT
BLSRCOMP CSECT
         SPACE
PYSUBFL  IKJSUBF
@DATD    DSECT
BLSRCOMP CSECT
PYLEN    IKJIDENT 'LENGTH',INTEG,PROMPT='LENGTH',VALIDCK=BLSUVP31
@DATD    DSECT
BLSRCOMP CSECT
         SPACE
PYSUBFI  IKJSUBF
@DATD    DSECT
BLSRCOMP CSECT
PYDIM    IKJIDENT 'DIMENSION',INTEG,PROMPT='DIMENSION',VALIDCK=BLSUVP31
@DATD    DSECT
BLSRCOMP CSECT
         SPACE
PYSUBFN  IKJSUBF
@DATD    DSECT
BLSRCOMP CSECT
PYNTR    IKJIDENT 'ENTRY(IES)',INTEG,RANGE,PROMPT='ENTRY(IES)',VALIDCK=*
               BLSUVP32
@DATD    DSECT
BLSRCOMP CSECT
         SPACE
PYSUBFJ  IKJSUBF
@DATD    DSECT
BLSRCOMP CSECT
PYREM    IKJPOSIT QSTRING,PROMPT='REMARK'
@DATD    DSECT
BLSRCOMP CSECT
         SPACE
PYSUBFB  IKJSUBF
@DATD    DSECT
BLSRCOMP CSECT
PYCPU    IKJIDENT 'CPU ADDRESS',INTEG,PROMPT='CPU ADDRESS',VALIDCK=BLSR*
               VPCP
@DATD    DSECT
BLSRCOMP CSECT
         SPACE
PYSUBFE  IKJSUBF
@DATD    DSECT
BLSRCOMP CSECT
PYASI    IKJIDENT 'ASID',INTEG,PROMPT='ASID',VALIDCK=BLSRVPAS
@DATD    DSECT
BLSRCOMP CSECT
         SPACE
PS2ADDR  IKJSUBF
@DATD    DSECT
BLSRCOMP CSECT
PD2A     IKJPOSIT ADDRESS,,RANGE,DEFAULT='X',VALIDCK=BLSRVPAD
@DATD    DSECT
BLSRCOMP CSECT
         SPACE
PS2VALUE IKJSUBF
@DATD    DSECT
BLSRCOMP CSECT
PD2V     IKJPOSIT VALUE,PROMPT='VALUE 2',VALIDCK=BLSUVPVA
@DATD    DSECT
PD       DSECT
PD99     DS    0C
BLSRCOMP CSECT
         IKJENDP
         SPACE 2
***********************************************************************
* IKJENDP--END SYNTAX DESCRIPTION                                     *
***********************************************************************
         SPACE
@DATD    DSECT
         SPACE 2
***********************************************************************
* ALIGN END OF DATA ON A DOUBLEWORD BOUNDARY                          *
***********************************************************************
         SPACE
         DS    0D
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
BLSRCOMP CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
PD2VLEN  EQU   @07
THELENTH EQU   @06
J1       EQU   @07
R9       EQU   @09
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
RB       EQU   @11
RD       EQU   @13
RE       EQU   @14
RF       EQU   @15
PDRPTR   EQU   @10
GPR01F   EQU   @01
GPR00F   EQU   @00
GPR15F   EQU   @15
RA       EQU   @10
RC       EQU   @12
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
ZZ1      EQU   0
ZZ1ATTN  EQU   ZZ1+360
ZZ1EVE   EQU   ZZ1ATTN+4
ZZ1F     EQU   ZZ1+368
ZZ1N     EQU   ZZ1+1116
ZZ1TRCTX EQU   ZZ1+1392
ZZ2      EQU   0
ZZ2AMD   EQU   ZZ2
@NM00013 EQU   ZZ2AMD+7
ZZ2PRT   EQU   ZZ2+138
ZZ2PRTT  EQU   ZZ2PRT+4
ZZ2PRTT1 EQU   ZZ2PRTT+1
ZZ2A     EQU   ZZ2+272
ZZ2AF    EQU   ZZ2A+16
ZZ2AFX   EQU   ZZ2AF+5
ZZ2APID  EQU   ZZ2A+64
ZZ2AD    EQU   ZZ2A+74
ZZ2ADD   EQU   ZZ2AD
ZZ2ADDT  EQU   ZZ2ADD+2
ZZ2ADM   EQU   ZZ2AD+46
ZZ2ADMT  EQU   ZZ2ADM+2
ZZ2ADP   EQU   ZZ2AD+56
ZZ2ADPT  EQU   ZZ2ADP+2
ZZ2AZZ6P EQU   ZZ2A+140
ZZ2AQAS  EQU   ZZ2A+144
ZZ2AQD   EQU   ZZ2A+160
ZZ2AQDT  EQU   ZZ2AQD+10
ZZ2AQDF  EQU   ZZ2AQD+52
ZZ2STG   EQU   ZZ2+960
ZZ2ALLOP EQU   ZZ2+992
ZZ2FREEP EQU   ZZ2+996
ZZ2FF19P EQU   ZZ2+1000
ZZ2FRE1P EQU   ZZ2+1004
ZZ2FF18P EQU   ZZ2+1008
ZZ2DYNAP EQU   ZZ2+1012
ZZ2ZZ2CP EQU   ZZ2+1016
ZZ2ZZ2DP EQU   ZZ2+1020
ZZ2STAIP EQU   ZZ2+1024
ZZ2FF02P EQU   ZZ2+1028
ZZ2GETLP EQU   ZZ2+1032
ZZ2PARSP EQU   ZZ2+1036
ZZ2PTGTP EQU   ZZ2+1040
ZZ2PUTLP EQU   ZZ2+1044
ZZ2SCANP EQU   ZZ2+1048
ZZ2STCKP EQU   ZZ2+1052
ZZ2TRMOP EQU   ZZ2+1064
ZZ2TRMVP EQU   ZZ2+1068
ZZ2PUTNP EQU   ZZ2+1084
ZZ2TRMNP EQU   ZZ2+1088
ZZ2ZZ1P  EQU   ZZ2+1264
ZZ2BVTP  EQU   ZZ2+1280
ZZ2RVTP  EQU   ZZ2+1284
ZZ2CPPL  EQU   ZZ2+1292
ZZ2CPPLC EQU   ZZ2CPPL
ZZ2ITR   EQU   ZZ2+2840
ZZ2ITRE  EQU   ZZ2ITR+16
ZZ2ITSE  EQU   ZZ2+2864
ZZ2ES    EQU   ZZ2+2872
ZZ2AMDX  EQU   ZZ2+7160
ZZ2AXO   EQU   ZZ2+7934
ZZ2AXOT  EQU   ZZ2AXO+2
CMD      EQU   0
CMDT     EQU   CMD+4
PSCB     EQU   0
PSCBATR1 EQU   PSCB+16
ECT      EQU   0
ECTSWS   EQU   ECT+28
ECTSWS2  EQU   ECT+40
ECTSWS21 EQU   ECTSWS2
UPT      EQU   0
UPTSWS   EQU   UPT+12
SA       EQU   0
SA1      EQU   SA
SAR      EQU   SA+12
SAR1     EQU   SAR+12
BLSUMPK1 EQU   0
BLSUPARI EQU   0
BLSUPARU EQU   0
BLSUPUTO EQU   0
BLSUPUTV EQU   0
BVT      EQU   0
BVTPUTLP EQU   BVT+4
BVTPUTOP EQU   BVT+12
BVTPUTTP EQU   BVT+16
BVTPUTVP EQU   BVT+20
BVTPUTAP EQU   BVT+24
BVTPRTTP EQU   BVT+28
BVTPRTAP EQU   BVT+32
BVTPUTDP EQU   BVT+36
BVTMONP  EQU   BVT+40
BVTMON2P EQU   BVT+44
BVTVSARP EQU   BVT+48
BVTVSENP EQU   BVT+64
BVTVSERP EQU   BVT+68
BVTVSGEP EQU   BVT+72
BVTVSGUP EQU   BVT+76
BVTVSPOP EQU   BVT+80
BVTVSPUP EQU   BVT+84
BVTMPKNP EQU   BVT+104
BVTMONLP EQU   BVT+108
BVTPUTCP EQU   BVT+132
BVTMPK1P EQU   BVT+136
BVTZZ2RP EQU   BVT+140
BVTPGMRP EQU   BVT+144
BVTMONAP EQU   BVT+148
BVTBLDDP EQU   BVT+152
BVTBLDLP EQU   BVT+156
BVTPGMCP EQU   BVT+160
BVTPGMDP EQU   BVT+164
BVTPGMLP EQU   BVT+168
BVTMONCP EQU   BVT+180
BVTMONDP EQU   BVT+184
BVTMONTP EQU   BVT+188
BVTPARIP EQU   BVT+192
BVTPARUP EQU   BVT+196
BVTPRTNP EQU   BVT+204
BVTVSCRP EQU   BVT+208
BVTVSMRP EQU   BVT+212
BVTMONXP EQU   BVT+216
BVTTRMAP EQU   BVT+228
ZZ6      EQU   0
ZZ6D     EQU   ZZ6+128
ZZ6DD    EQU   ZZ6D+8
ZZ6DDT   EQU   ZZ6DD+4
ZZ6DQA   EQU   ZZ6D+68
ZZ6DF    EQU   ZZ6D+92
ZZ6B     EQU   ZZ6+768
BLSRACC  EQU   0
BLSRADDR EQU   0
BLSRPADS EQU   0
RVT      EQU   0
RVTADDRP EQU   RVT
RVTT01P  EQU   RVT+4
RVTTAP   EQU   RVT+8
RVTTBP   EQU   RVT+12
RVTTCP   EQU   RVT+16
RVTTFP   EQU   RVT+24
RVTTYP   EQU   RVT+40
RVTT02P  EQU   RVT+48
RVTT03P  EQU   RVT+52
RVTT04P  EQU   RVT+56
RVTACCLP EQU   RVT+60
RVTRACCP EQU   RVT+64
RVTTLP   EQU   RVT+68
RVTTMP   EQU   RVT+72
RVTTUP   EQU   RVT+80
RVTESGEP EQU   RVT+84
RVTESGUP EQU   RVT+88
RVTESARP EQU   RVT+92
RVTRAARP EQU   RVT+96
RVTRAGEP EQU   RVT+100
RVTADDPP EQU   RVT+104
RVTACCQP EQU   RVT+108
RVTSAGUP EQU   RVT+124
RVTSAGEP EQU   RVT+128
RVTESCKP EQU   RVT+132
RVTMSGAP EQU   RVT+136
RVTMSGDP EQU   RVT+140
RVTADDTP EQU   RVT+160
RVTADDUP EQU   RVT+164
RVTADD1P EQU   RVT+176
RVTADD2P EQU   RVT+180
RVTRSAGP EQU   RVT+184
RVTMSGBP EQU   RVT+188
RVTADDSP EQU   RVT+192
RVTADD3P EQU   RVT+196
RVTT05P  EQU   RVT+200
RVTPADSP EQU   RVT+204
RVTTRP   EQU   RVT+228
RVTADD4P EQU   RVT+232
RVTSAPCP EQU   RVT+236
RVTSAARP EQU   RVT+240
RVTSAGNP EQU   RVT+244
RVTT06P  EQU   RVT+248
RVTSAGCP EQU   RVT+252
RVTSAGQP EQU   RVT+256
RVTESGCP EQU   RVT+260
RVTESGQP EQU   RVT+264
RVTDUCKP EQU   RVT+276
RVTDUCCP EQU   RVT+280
PCCSECT  EQU   0
PDDSECT  EQU   0
PDXP     EQU   PDDSECT+1
PDL      EQU   PDDSECT+5
PDMAV    EQU   0
PD1AAE   EQU   0
PD1AAEAP EQU   PD1AAE
PD1AAEF  EQU   PD1AAE+8
PD1VV    EQU   0
PD2AAE   EQU   0
PD2AAEAP EQU   PD2AAE
PD2AAEF  EQU   PD2AAE+8
PD2VV    EQU   0
BYT1     EQU   0
BYT2     EQU   0
BUF1     EQU   0
BUF2     EQU   0
BLSRACCL EQU   0
BLSRACCQ EQU   0
BLSRADDP EQU   0
BLSRADDS EQU   0
BLSRADDT EQU   0
BLSRADDU EQU   0
BLSRADD1 EQU   0
BLSRADD2 EQU   0
BLSRADD3 EQU   0
BLSRADD4 EQU   0
BLSRDUCC EQU   0
BLSRDUCK EQU   0
BLSRESAR EQU   0
BLSRESCK EQU   0
BLSRESGC EQU   0
BLSRESGE EQU   0
BLSRESGQ EQU   0
BLSRESGU EQU   0
BLSRMSGA EQU   0
BLSRMSGB EQU   0
BLSRMSGD EQU   0
BLSRRAAR EQU   0
BLSRRAGE EQU   0
BLSRSAAR EQU   0
BLSRSAG  EQU   0
BLSRSAGC EQU   0
BLSRSAGE EQU   0
BLSRSAGN EQU   0
BLSRSAGQ EQU   0
BLSRSAGU EQU   0
BLSRSAPC EQU   0
BLSTA    EQU   0
BLSTB    EQU   0
BLSTC    EQU   0
BLSTF    EQU   0
BLSTL    EQU   0
BLSTM    EQU   0
BLSTR    EQU   0
BLSTU    EQU   0
BLSTY    EQU   0
BLST01   EQU   0
BLST02   EQU   0
BLST03   EQU   0
BLST04   EQU   0
BLST05   EQU   0
BLST06   EQU   0
BLSUALLO EQU   0
BLSUBLDD EQU   0
BLSUBLDL EQU   0
BLSUDYNA EQU   0
BLSUFREE EQU   0
BLSUFRE1 EQU   0
BLSUMON  EQU   0
BLSUMONA EQU   0
BLSUMONC EQU   0
BLSUMOND EQU   0
BLSUMONL EQU   0
BLSUMONT EQU   0
BLSUMONX EQU   0
BLSUMON2 EQU   0
BLSUMPKN EQU   0
BLSUPGMC EQU   0
BLSUPGMD EQU   0
BLSUPGML EQU   0
BLSUPGMR EQU   0
BLSUPRTA EQU   0
BLSUPRTN EQU   0
BLSUPRTT EQU   0
BLSUPUTA EQU   0
BLSUPUTC EQU   0
BLSUPUTD EQU   0
BLSUPUTL EQU   0
BLSUPUTN EQU   0
BLSUPUTT EQU   0
BLSUSTAI EQU   0
BLSUTRMA EQU   0
BLSUTRMN EQU   0
BLSUTRMO EQU   0
BLSUTRMV EQU   0
BLSUVSAR EQU   0
BLSUVSCR EQU   0
BLSUVSEN EQU   0
BLSUVSER EQU   0
BLSUVSGE EQU   0
BLSUVSGU EQU   0
BLSUVSMR EQU   0
BLSUVSPO EQU   0
BLSUVSPU EQU   0
BLSUZZ2C EQU   0
BLSUZZ2D EQU   0
BLSUZZ2R EQU   0
IKJEFF02 EQU   0
IKJEFF18 EQU   0
IKJEFF19 EQU   0
IKJGETL  EQU   0
IKJPARS  EQU   0
IKJPTGT  EQU   0
IKJPUTL  EQU   0
IKJSCAN  EQU   0
IKJSTCK  EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
PD1AAEA  EQU   0
PD1AA1   EQU   0
PD1AA2   EQU   0
PD1AE1   EQU   0
PD1AE2   EQU   0
PD1AM1   EQU   0
PD1AM2   EQU   0
PD2AAEA  EQU   0
PD2AA1   EQU   0
PD2AA2   EQU   0
PD2AE1   EQU   0
PD2AE2   EQU   0
PD2AM1   EQU   0
PD2AM2   EQU   0
PXASII   EQU   0
PXCPUI   EQU   0
PXDIMI   EQU   0
PXDTDI   EQU   0
PXLENI   EQU   0
PXNTRI1  EQU   0
PXNTRI2  EQU   0
PXREMQ   EQU   0
PYASII   EQU   0
PYCPUI   EQU   0
PYDIMI   EQU   0
PYDTDI   EQU   0
PYLENI   EQU   0
PYNTRI1  EQU   0
PYNTRI2  EQU   0
PYREMQ   EQU   0
PXCPUIP  EQU   PXCPU
PXCPUIF  EQU   PXCPU+6
PXASIIP  EQU   PXASI
PXASIIF  EQU   PXASI+6
PXDTDIP  EQU   PXDTD
PXDTDIF  EQU   PXDTD+6
PXLENIP  EQU   PXLEN
PXLENIF  EQU   PXLEN+6
PXDIMIP  EQU   PXDIM
PXDIMIF  EQU   PXDIM+6
PXREMQP  EQU   PXREM
PXREMQF  EQU   PXREM+6
@NM00108 EQU   PXNTR
PXNTRIP  EQU   @NM00108
PXNTRIF  EQU   @NM00108+6
PDMAVP   EQU   PDMA
PDMAVL   EQU   PDMA+4
PDMAVF   EQU   PDMA+6
PDMAVFP  EQU   PDMAVF
PDMAVT   EQU   PDMA+7
@NM00119 EQU   PD1A
PD1AMP   EQU   @NM00119
PD1AMF   EQU   @NM00119+6
PD1AEP   EQU   @NM00119+8
PD1AEF   EQU   @NM00119+14
PD1AAP   EQU   @NM00119+16
PD1AAF   EQU   @NM00119+22
PD1AAT   EQU   @NM00119+24
PD1AAEP  EQU   @NM00119+28
PD1VVP   EQU   PD1V
PD1VVL   EQU   PD1V+4
PD1VVF   EQU   PD1V+6
PD1VVFP  EQU   PD1VVF
PD1VVT   EQU   PD1V+7
PYCPUIP  EQU   PYCPU
PYCPUIF  EQU   PYCPU+6
PYASIIP  EQU   PYASI
PYASIIF  EQU   PYASI+6
PYDTDIP  EQU   PYDTD
PYDTDIF  EQU   PYDTD+6
PYLENIP  EQU   PYLEN
PYLENIF  EQU   PYLEN+6
PYDIMIP  EQU   PYDIM
PYDIMIF  EQU   PYDIM+6
PYREMQP  EQU   PYREM
PYREMQF  EQU   PYREM+6
@NM00148 EQU   PYNTR
PYNTRIP  EQU   @NM00148
PYNTRIF  EQU   @NM00148+6
@NM00157 EQU   PD2A
PD2AMP   EQU   @NM00157
PD2AMF   EQU   @NM00157+6
PD2AEP   EQU   @NM00157+8
PD2AEF   EQU   @NM00157+14
PD2AAP   EQU   @NM00157+16
PD2AAF   EQU   @NM00157+22
PD2AAT   EQU   @NM00157+24
PD2AAEP  EQU   @NM00157+28
PD2VVP   EQU   PD2V
PD2VVL   EQU   PD2V+4
PD2VVF   EQU   PD2V+6
PD2VVFP  EQU   PD2VVF
PD2VVT   EQU   PD2V+7
CPPL     EQU   ZZ2CPPL
CPPLUPT  EQU   CPPL+4
CPPLPSCB EQU   CPPL+8
CPPLECT  EQU   CPPL+12
PD1VBUFF EQU   PD1VBUF
PD1VBUFP EQU   PD1VBUF
PD2VBUFF EQU   PD2VBUF
PD2VBUFP EQU   PD2VBUF
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CPPLCBUF EQU   CPPL
@NM00167 EQU   PD2V+8
@NM00166 EQU   PD2VVF
@NM00162 EQU   PD2A+72
PD2AAV   EQU   @NM00157+32
PD2AAI   EQU   @NM00157+26
PD2AAS   EQU   @NM00157+25
@NM00161 EQU   PD2AAT
PD2AATQ  EQU   PD2AAT
PD2AATE  EQU   PD2AAT
PD2AATD  EQU   PD2AAT
PD2AATG  EQU   PD2AAT
PD2AATR  EQU   PD2AAT
PD2AATS  EQU   PD2AAT
@NM00160 EQU   @NM00157+23
PD2AAF8  EQU   PD2AAF
PD2AAF7  EQU   PD2AAF
PD2AAF6  EQU   PD2AAF
PD2AAF5  EQU   PD2AAF
PD2AAF4  EQU   PD2AAF
PD2AAF3  EQU   PD2AAF
PD2AAF2  EQU   PD2AAF
PD2AAFP  EQU   PD2AAF
PD2AAL   EQU   @NM00157+20
@NM00159 EQU   @NM00157+15
PD2AEF8  EQU   PD2AEF
PD2AEF7  EQU   PD2AEF
PD2AEF6  EQU   PD2AEF
PD2AEF5  EQU   PD2AEF
PD2AEF4  EQU   PD2AEF
PD2AEF3  EQU   PD2AEF
PD2AEF2  EQU   PD2AEF
PD2AEFP  EQU   PD2AEF
PD2AEL   EQU   @NM00157+12
@NM00158 EQU   @NM00157+7
PD2AMF8  EQU   PD2AMF
PD2AMF7  EQU   PD2AMF
PD2AMF6  EQU   PD2AMF
PD2AMF5  EQU   PD2AMF
PD2AMF4  EQU   PD2AMF
PD2AMF3  EQU   PD2AMF
PD2AMF2  EQU   PD2AMF
PD2AMFP  EQU   PD2AMF
PD2AML   EQU   @NM00157+4
@NM00150 EQU   PYNTR+16
@NM00149 EQU   @NM00148+7
PYNTRIF8 EQU   PYNTRIF
PYNTRIF7 EQU   PYNTRIF
PYNTRIF6 EQU   PYNTRIF
PYNTRIF5 EQU   PYNTRIF
PYNTRIF4 EQU   PYNTRIF
PYNTRIF3 EQU   PYNTRIF
PYNTRIF2 EQU   PYNTRIF
PYNTRIFP EQU   PYNTRIF
PYNTRIL  EQU   @NM00148+4
@NM00152 EQU   PYREM+8
@NM00151 EQU   PYREM+7
PYREMQF8 EQU   PYREMQF
PYREMQF7 EQU   PYREMQF
PYREMQF6 EQU   PYREMQF
PYREMQF5 EQU   PYREMQF
PYREMQF4 EQU   PYREMQF
PYREMQF3 EQU   PYREMQF
PYREMQF2 EQU   PYREMQF
PYREMQFP EQU   PYREMQF
PYREMQL  EQU   PYREM+4
@NM00147 EQU   PYDIM+8
@NM00146 EQU   PYDIM+7
PYDIMIF8 EQU   PYDIMIF
PYDIMIF7 EQU   PYDIMIF
PYDIMIF6 EQU   PYDIMIF
PYDIMIF5 EQU   PYDIMIF
PYDIMIF4 EQU   PYDIMIF
PYDIMIF3 EQU   PYDIMIF
PYDIMIF2 EQU   PYDIMIF
PYDIMIFP EQU   PYDIMIF
PYDIMIL  EQU   PYDIM+4
@NM00145 EQU   PYLEN+8
@NM00144 EQU   PYLEN+7
PYLENIF8 EQU   PYLENIF
PYLENIF7 EQU   PYLENIF
PYLENIF6 EQU   PYLENIF
PYLENIF5 EQU   PYLENIF
PYLENIF4 EQU   PYLENIF
PYLENIF3 EQU   PYLENIF
PYLENIF2 EQU   PYLENIF
PYLENIFP EQU   PYLENIF
PYLENIL  EQU   PYLEN+4
@NM00143 EQU   PYDTD+8
@NM00142 EQU   PYDTD+7
PYDTDIF8 EQU   PYDTDIF
PYDTDIF7 EQU   PYDTDIF
PYDTDIF6 EQU   PYDTDIF
PYDTDIF5 EQU   PYDTDIF
PYDTDIF4 EQU   PYDTDIF
PYDTDIF3 EQU   PYDTDIF
PYDTDIF2 EQU   PYDTDIF
PYDTDIFP EQU   PYDTDIF
PYDTDIL  EQU   PYDTD+4
@NM00156 EQU   PYASI+8
@NM00155 EQU   PYASI+7
PYASIIF8 EQU   PYASIIF
PYASIIF7 EQU   PYASIIF
PYASIIF6 EQU   PYASIIF
PYASIIF5 EQU   PYASIIF
PYASIIF4 EQU   PYASIIF
PYASIIF3 EQU   PYASIIF
PYASIIF2 EQU   PYASIIF
PYASIIFP EQU   PYASIIF
PYASIIL  EQU   PYASI+4
@NM00154 EQU   PYCPU+8
@NM00153 EQU   PYCPU+7
PYCPUIF8 EQU   PYCPUIF
PYCPUIF7 EQU   PYCPUIF
PYCPUIF6 EQU   PYCPUIF
PYCPUIF5 EQU   PYCPUIF
PYCPUIF4 EQU   PYCPUIF
PYCPUIF3 EQU   PYCPUIF
PYCPUIF2 EQU   PYCPUIF
PYCPUIFP EQU   PYCPUIF
PYCPUIL  EQU   PYCPU+4
@NM00129 EQU   PD1V+8
@NM00128 EQU   PD1VVF
@NM00124 EQU   PD1A+72
PD1AAV   EQU   @NM00119+32
PD1AAI   EQU   @NM00119+26
PD1AAS   EQU   @NM00119+25
@NM00123 EQU   PD1AAT
PD1AATQ  EQU   PD1AAT
PD1AATE  EQU   PD1AAT
PD1AATD  EQU   PD1AAT
PD1AATG  EQU   PD1AAT
PD1AATR  EQU   PD1AAT
PD1AATS  EQU   PD1AAT
@NM00122 EQU   @NM00119+23
PD1AAF8  EQU   PD1AAF
PD1AAF7  EQU   PD1AAF
PD1AAF6  EQU   PD1AAF
PD1AAF5  EQU   PD1AAF
PD1AAF4  EQU   PD1AAF
PD1AAF3  EQU   PD1AAF
PD1AAF2  EQU   PD1AAF
PD1AAFP  EQU   PD1AAF
PD1AAL   EQU   @NM00119+20
@NM00121 EQU   @NM00119+15
PD1AEF8  EQU   PD1AEF
PD1AEF7  EQU   PD1AEF
PD1AEF6  EQU   PD1AEF
PD1AEF5  EQU   PD1AEF
PD1AEF4  EQU   PD1AEF
PD1AEF3  EQU   PD1AEF
PD1AEF2  EQU   PD1AEF
PD1AEFP  EQU   PD1AEF
PD1AEL   EQU   @NM00119+12
@NM00120 EQU   @NM00119+7
PD1AMF8  EQU   PD1AMF
PD1AMF7  EQU   PD1AMF
PD1AMF6  EQU   PD1AMF
PD1AMF5  EQU   PD1AMF
PD1AMF4  EQU   PD1AMF
PD1AMF3  EQU   PD1AMF
PD1AMF2  EQU   PD1AMF
PD1AMFP  EQU   PD1AMF
PD1AML   EQU   @NM00119+4
@NM00118 EQU   PDMA+8
@NM00117 EQU   PDMAVF
@NM00110 EQU   PXNTR+16
@NM00109 EQU   @NM00108+7
PXNTRIF8 EQU   PXNTRIF
PXNTRIF7 EQU   PXNTRIF
PXNTRIF6 EQU   PXNTRIF
PXNTRIF5 EQU   PXNTRIF
PXNTRIF4 EQU   PXNTRIF
PXNTRIF3 EQU   PXNTRIF
PXNTRIF2 EQU   PXNTRIF
PXNTRIFP EQU   PXNTRIF
PXNTRIL  EQU   @NM00108+4
@NM00112 EQU   PXREM+8
@NM00111 EQU   PXREM+7
PXREMQF8 EQU   PXREMQF
PXREMQF7 EQU   PXREMQF
PXREMQF6 EQU   PXREMQF
PXREMQF5 EQU   PXREMQF
PXREMQF4 EQU   PXREMQF
PXREMQF3 EQU   PXREMQF
PXREMQF2 EQU   PXREMQF
PXREMQFP EQU   PXREMQF
PXREMQL  EQU   PXREM+4
@NM00107 EQU   PXDIM+8
@NM00106 EQU   PXDIM+7
PXDIMIF8 EQU   PXDIMIF
PXDIMIF7 EQU   PXDIMIF
PXDIMIF6 EQU   PXDIMIF
PXDIMIF5 EQU   PXDIMIF
PXDIMIF4 EQU   PXDIMIF
PXDIMIF3 EQU   PXDIMIF
PXDIMIF2 EQU   PXDIMIF
PXDIMIFP EQU   PXDIMIF
PXDIMIL  EQU   PXDIM+4
@NM00105 EQU   PXLEN+8
@NM00104 EQU   PXLEN+7
PXLENIF8 EQU   PXLENIF
PXLENIF7 EQU   PXLENIF
PXLENIF6 EQU   PXLENIF
PXLENIF5 EQU   PXLENIF
PXLENIF4 EQU   PXLENIF
PXLENIF3 EQU   PXLENIF
PXLENIF2 EQU   PXLENIF
PXLENIFP EQU   PXLENIF
PXLENIL  EQU   PXLEN+4
@NM00103 EQU   PXDTD+8
@NM00102 EQU   PXDTD+7
PXDTDIF8 EQU   PXDTDIF
PXDTDIF7 EQU   PXDTDIF
PXDTDIF6 EQU   PXDTDIF
PXDTDIF5 EQU   PXDTDIF
PXDTDIF4 EQU   PXDTDIF
PXDTDIF3 EQU   PXDTDIF
PXDTDIF2 EQU   PXDTDIF
PXDTDIFP EQU   PXDTDIF
PXDTDIL  EQU   PXDTD+4
@NM00116 EQU   PXASI+8
@NM00115 EQU   PXASI+7
PXASIIF8 EQU   PXASIIF
PXASIIF7 EQU   PXASIIF
PXASIIF6 EQU   PXASIIF
PXASIIF5 EQU   PXASIIF
PXASIIF4 EQU   PXASIIF
PXASIIF3 EQU   PXASIIF
PXASIIF2 EQU   PXASIIF
PXASIIFP EQU   PXASIIF
PXASIIL  EQU   PXASI+4
@NM00114 EQU   PXCPU+8
@NM00113 EQU   PXCPU+7
PXCPUIF8 EQU   PXCPUIF
PXCPUIF7 EQU   PXCPUIF
PXCPUIF6 EQU   PXCPUIF
PXCPUIF5 EQU   PXCPUIF
PXCPUIF4 EQU   PXCPUIF
PXCPUIF3 EQU   PXCPUIF
PXCPUIF2 EQU   PXCPUIF
PXCPUIFP EQU   PXCPUIF
PXCPUIL  EQU   PXCPU+4
PD2AAEXP EQU   PD2AAE+12
PD2AAEI  EQU   PD2AAE+10
PD2AAES  EQU   PD2AAE+9
@NM00165 EQU   PD2AAEF
PD2AAEFX EQU   PD2AAEF
PD2AAEFD EQU   PD2AAEF
@NM00164 EQU   PD2AAEF
@NM00163 EQU   PD2AAE+6
PD2AAEAL EQU   PD2AAE+4
PD1AAEXP EQU   PD1AAE+12
PD1AAEI  EQU   PD1AAE+10
PD1AAES  EQU   PD1AAE+9
@NM00127 EQU   PD1AAEF
PD1AAEFX EQU   PD1AAEF
PD1AAEFD EQU   PD1AAEF
@NM00126 EQU   PD1AAEF
@NM00125 EQU   PD1AAE+6
PD1AAEAL EQU   PD1AAE+4
PDSP     EQU   PDDSECT+4
@NM00089 EQU   PDDSECT
RVT99999 EQU   RVT+384
RVT0096P EQU   RVT+380
RVT0095P EQU   RVT+376
RVT0094P EQU   RVT+372
RVT0093P EQU   RVT+368
RVT0092P EQU   RVT+364
RVT0091P EQU   RVT+360
RVT0090P EQU   RVT+356
RVT0089P EQU   RVT+352
RVT0088P EQU   RVT+348
RVT0087P EQU   RVT+344
RVT0086P EQU   RVT+340
RVT0085P EQU   RVT+336
RVT0084P EQU   RVT+332
RVT0083P EQU   RVT+328
RVT0082P EQU   RVT+324
RVT0081P EQU   RVT+320
RVT0080P EQU   RVT+316
RVT0079P EQU   RVT+312
RVT0078P EQU   RVT+308
RVT0077P EQU   RVT+304
RVT0076P EQU   RVT+300
RVT0075P EQU   RVT+296
RVT0074P EQU   RVT+292
RVT0073P EQU   RVT+288
RVT0072P EQU   RVT+284
RVTDTUTP EQU   RVT+272
RVTDTMTP EQU   RVT+268
RVT0057P EQU   RVT+224
RVT0056P EQU   RVT+220
RVT0055P EQU   RVT+216
RVT0054P EQU   RVT+212
RVT0053P EQU   RVT+208
RVT0044P EQU   RVT+172
RVT0043P EQU   RVT+168
RVT0040P EQU   RVT+156
RVT0039P EQU   RVT+152
RVT0038P EQU   RVT+148
RVT0037P EQU   RVT+144
RVT0031P EQU   RVT+120
RVT0030P EQU   RVT+116
RVT0029P EQU   RVT+112
RVT0020P EQU   RVT+76
RVT0012P EQU   RVT+44
RVT0010P EQU   RVT+36
RVT0009P EQU   RVT+32
RVT0008P EQU   RVT+28
RVT0006P EQU   RVT+20
ZZ69999  EQU   ZZ6+1792
ZZ6BRB   EQU   ZZ6B+12
ZZ6BRC   EQU   ZZ6B+8
@NM00076 EQU   ZZ6B+6
ZZ6BFL   EQU   ZZ6B+4
ZZ6BDA   EQU   ZZ6B
@NM00075 EQU   ZZ6+540
ZZ6BUFI  EQU   ZZ6+536
ZZ6BUFP  EQU   ZZ6+532
ZZ6FILE  EQU   ZZ6+524
ZZ6BUFB  EQU   ZZ6+520
ZZ6BUFL  EQU   ZZ6+518
ZZ6BUFN  EQU   ZZ6+516
ZZ6ZZ6P  EQU   ZZ6+512
@NM00074 EQU   ZZ6+256
ZZ6D999  EQU   ZZ6D+128
@NM00073 EQU   ZZ6D+116
ZZ6DCAP  EQU   ZZ6D+112
ZZ6DPRP  EQU   ZZ6D+108
ZZ6DDA2  EQU   ZZ6D+104
ZZ6DDA1  EQU   ZZ6D+100
@NM00072 EQU   ZZ6DF
ZZ6DFSU  EQU   ZZ6DF
ZZ6DFST  EQU   ZZ6DF
ZZ6DFAB  EQU   ZZ6DF
ZZ6DFMP  EQU   ZZ6DF
ZZ6DFDU  EQU   ZZ6DF
ZZ6DFBS  EQU   ZZ6DF
ZZ6DQ2   EQU   ZZ6D+88
ZZ6DQ1   EQU   ZZ6D+84
ZZ6DQA9  EQU   ZZ6DQA+16
@NM00071 EQU   ZZ6DQA+12
ZZ6DQA2  EQU   ZZ6DQA+8
ZZ6DQA1  EQU   ZZ6DQA+4
@NM00070 EQU   ZZ6DQA+2
ZZ6DQAT  EQU   ZZ6DQA
ZZ6DQA0  EQU   ZZ6DQA
ZZ6DRDX  EQU   ZZ6D+64
ZZ6DELK  EQU   ZZ6D+64
ZZ6DMEM  EQU   ZZ6D+56
ZZ6DDT1  EQU   ZZ6DDT
ZZ6DDO   EQU   ZZ6DD+2
ZZ6DDL   EQU   ZZ6DD
@NM00069 EQU   ZZ6D+2
ZZ6DRID  EQU   ZZ6D
ZZ6RDCB  EQU   ZZ6
ZZ60000  EQU   ZZ6
BVT99999 EQU   BVT+256
BVT0064P EQU   BVT+252
BVT0063P EQU   BVT+248
BVT0062P EQU   BVT+244
BVT0061P EQU   BVT+240
BVT0060P EQU   BVT+236
BVT0059P EQU   BVT+232
BVT0057P EQU   BVT+224
BVT0056P EQU   BVT+220
BVTSTBLP EQU   BVT+200
BVT0045P EQU   BVT+176
BVT0044P EQU   BVT+172
BVT0033P EQU   BVT+128
BVT0032P EQU   BVT+124
BVT0031P EQU   BVT+120
BVT0030P EQU   BVT+116
BVT0029P EQU   BVT+112
BVT0026P EQU   BVT+100
BVT0025P EQU   BVT+96
BVT0024P EQU   BVT+92
BVT0023P EQU   BVT+88
BVT0016P EQU   BVT+60
BVT0015P EQU   BVT+56
BVT0014P EQU   BVT+52
BVT0003P EQU   BVT+8
BVT0001P EQU   BVT
SA99     EQU   SA+72
SARC     EQU   SAR+56
SARB     EQU   SAR+52
SARA     EQU   SAR+48
SAR9     EQU   SAR+44
SAR8     EQU   SAR+40
SAR7     EQU   SAR+36
SAR6     EQU   SAR+32
SAR5     EQU   SAR+28
SAR4     EQU   SAR+24
SAR3     EQU   SAR+20
SAR2     EQU   SAR+16
SAR0     EQU   SAR+8
SARF     EQU   SAR+4
SARE     EQU   SAR
SAFWD    EQU   SA+8
SABAK    EQU   SA+4
SA1L     EQU   SA1+1
SA1P     EQU   SA1
UPTPREFL EQU   UPT+23
UPTPREFX EQU   UPT+16
@NM00068 EQU   UPT+15
UPTLDEL  EQU   UPT+14
UPTCDEL  EQU   UPT+13
UPTWTP   EQU   UPTSWS
UPTMODE  EQU   UPTSWS
UPTALD   EQU   UPTSWS
UPTPAUS  EQU   UPTSWS
UPTNCOM  EQU   UPTSWS
UPTMID   EQU   UPTSWS
UPTNPRM  EQU   UPTSWS
UPTRCVR  EQU   UPTSWS
UPTUSER  EQU   UPT+2
@NM00067 EQU   UPT
@NM00066 EQU   ECT+52
@NM00065 EQU   ECT+48
@NM00064 EQU   ECT+44
@NM00063 EQU   ECTSWS2+1
@NM00062 EQU   ECTSWS21
ECTTABND EQU   ECTSWS21
ECTDEFCS EQU   ECTSWS21
ECTBKPB  EQU   ECT+36
ECTUSER  EQU   ECT+32
ECTDDNUM EQU   ECT+29
ECTATTN  EQU   ECTSWS
ECTBKGRD EQU   ECTSWS
ECTNNOT  EQU   ECTSWS
ECTNMAL  EQU   ECTSWS
ECTLOGF  EQU   ECTSWS
ECTATRM  EQU   ECTSWS
@NM00061 EQU   ECTSWS
ECTNOPD  EQU   ECTSWS
ECTSCMD  EQU   ECT+20
ECTPCMD  EQU   ECT+12
ECTSMSG  EQU   ECT+9
ECTMSGF  EQU   ECT+8
ECTIOWA  EQU   ECT+4
ECTRTCD  EQU   ECT+1
ECTRCDF  EQU   ECT
PSCBU    EQU   PSCB+64
PSCBRSZ  EQU   PSCB+60
PSCBLINE EQU   PSCB+59
PSCBCHAR EQU   PSCB+58
PSCBUPTL EQU   PSCB+56
PSCBUPT  EQU   PSCB+52
PSCBRLGB EQU   PSCB+48
PSCBDEST EQU   PSCB+40
@NM00060 EQU   PSCB+36
@NM00059 EQU   PSCB+32
@NM00058 EQU   PSCB+28
PSCBLTI2 EQU   PSCB+24
PSCBLTIM EQU   PSCB+20
PSCBATR2 EQU   PSCB+18
@NM00057 EQU   PSCBATR1
@NM00056 EQU   PSCBATR1
@NM00055 EQU   PSCBATR1
PSCBATTN EQU   PSCBATR1
PSCBVMNT EQU   PSCBATR1
PSCBJCL  EQU   PSCBATR1
PSCBACCT EQU   PSCBATR1
PSCBCTRL EQU   PSCBATR1
PSCBGPNM EQU   PSCB+8
PSCBUSRL EQU   PSCB+7
PSCBUSER EQU   PSCB
CMDT1    EQU   CMDT
CMDO     EQU   CMD+2
CMDL     EQU   CMD
ZZ299999 EQU   ZZ2+8192
ZZ2AXOT1 EQU   ZZ2AXOT
ZZ2AXOL  EQU   ZZ2AXO
@NM00054 EQU   ZZ2+7288
@NM00053 EQU   ZZ2AMDX+4
ZZ2AMDXC EQU   ZZ2AMDX
ZZ2HSD   EQU   ZZ2+3056
@NM00052 EQU   ZZ2ES
@NM00051 EQU   ZZ2+2868
ZZ2ITSEC EQU   ZZ2ITSE+1
@NM00050 EQU   ZZ2ITSE
ZZ2ITSEP EQU   ZZ2ITSE
ZZ2ITSEW EQU   ZZ2ITSE
@NM00049 EQU   ZZ2ITR+20
ZZ2ITREC EQU   ZZ2ITRE+1
@NM00048 EQU   ZZ2ITRE
ZZ2ITREP EQU   ZZ2ITRE
ZZ2ITREW EQU   ZZ2ITRE
@NM00047 EQU   ZZ2ITR+9
ZZ2ITRRC EQU   ZZ2ITR+8
ZZ2ITR2P EQU   ZZ2ITR+4
ZZ2ITRPP EQU   ZZ2ITR
@NM00046 EQU   ZZ2+1544
ZZ2PGM   EQU   ZZ2+1536
@NM00045 EQU   ZZ2+1526
ZZ2CW    EQU   ZZ2+1524
@NM00044 EQU   ZZ2+1504
@NM00043 EQU   ZZ2+1352
ZZ2FFSYP EQU   ZZ2+1348
ZZ2SASYP EQU   ZZ2+1344
ZZ2RDSYP EQU   ZZ2+1340
ZZ2RASYP EQU   ZZ2+1336
ZZ2PHSYP EQU   ZZ2+1332
ZZ2ESSYP EQU   ZZ2+1328
ZZ200SYP EQU   ZZ2+1324
ZZ2SCWP  EQU   ZZ2+1320
ZZ2TTLP  EQU   ZZ2+1316
ZZ2LOADP EQU   ZZ2+1312
ZZ2VRESP EQU   ZZ2+1308
ZZ2CPPLE EQU   ZZ2CPPL+12
ZZ2CPPLP EQU   ZZ2CPPL+8
ZZ2CPPLU EQU   ZZ2CPPL+4
ZZ2VRSAP EQU   ZZ2+1288
ZZ2DVTP  EQU   ZZ2+1276
@NM00042 EQU   ZZ2+1272
@NM00041 EQU   ZZ2+1268
ZZ2RPLP  EQU   ZZ2+1260
ZZ2TCBP  EQU   ZZ2+1256
@NM00040 EQU   ZZ2+1252
ZZ2ZZ2P  EQU   ZZ2+1248
@NM00039 EQU   ZZ2+1112
ZZ2FPDRP EQU   ZZ2+1108
ZZ2FDSDP EQU   ZZ2+1104
ZZ2APDRP EQU   ZZ2+1100
ZZ2ADSDP EQU   ZZ2+1096
ZZ2ENQ0P EQU   ZZ2+1092
@NM00038 EQU   ZZ2+1080
ZZ2MSG0P EQU   ZZ2+1076
ZZ2FT25P EQU   ZZ2+1072
ZZ2MSGSP EQU   ZZ2+1060
ZZ2ALOCP EQU   ZZ2+1056
@NM00037 EQU   ZZ2+976
ZZ2TOD   EQU   ZZ2+968
ZZ2STGN  EQU   ZZ2STG+4
ZZ2STGP  EQU   ZZ2STG
@NM00036 EQU   ZZ2+952
ZZ2SCMDE EQU   ZZ2+944
ZZ2SCMDN EQU   ZZ2+936
ZZ2IDENT EQU   ZZ2+928
ZZ2A9999 EQU   ZZ2A+656
@NM00035 EQU   ZZ2A+224
@NM00034 EQU   ZZ2A+220
ZZ2AQD99 EQU   ZZ2AQD+60
@NM00033 EQU   ZZ2AQD+56
@NM00032 EQU   ZZ2AQDF
ZZ2AQDFA EQU   ZZ2AQDF
ZZ2AQDIL EQU   ZZ2AQD+48
ZZ2AQDIM EQU   ZZ2AQD+44
ZZ2AQDT9 EQU   ZZ2AQDT+34
ZZ2AQDTE EQU   ZZ2AQDT+33
ZZ2AQDTD EQU   ZZ2AQDT+2
@NM00031 EQU   ZZ2AQDT+1
ZZ2AQDTY EQU   ZZ2AQDT
ZZ2AQDT0 EQU   ZZ2AQDT
ZZ2AQDLB EQU   ZZ2AQD+9
ZZ2AQDOB EQU   ZZ2AQD+8
ZZ2AQDLE EQU   ZZ2AQD+4
ZZ2AQDOF EQU   ZZ2AQD
ZZ2AQD00 EQU   ZZ2AQD
ZZ2AQAS9 EQU   ZZ2AQAS+16
@NM00030 EQU   ZZ2AQAS+12
ZZ2AQAS2 EQU   ZZ2AQAS+8
ZZ2AQAS1 EQU   ZZ2AQAS+4
@NM00029 EQU   ZZ2AQAS+2
ZZ2AQAST EQU   ZZ2AQAS
ZZ2AQAS0 EQU   ZZ2AQAS
ZZ2ADPTA EQU   ZZ2ADPT
ZZ2ADPL  EQU   ZZ2ADP
ZZ2ADMTA EQU   ZZ2ADMT
ZZ2ADML  EQU   ZZ2ADM
ZZ2ADDTA EQU   ZZ2ADDT
ZZ2ADDL  EQU   ZZ2ADD
@NM00028 EQU   ZZ2A+72
ZZ2APIDB EQU   ZZ2APID+3
ZZ2APIDA EQU   ZZ2APID
@NM00027 EQU   ZZ2A+24
@NM00026 EQU   ZZ2AF+5
@NM00025 EQU   ZZ2AF+3
ZZ2AFS   EQU   ZZ2AF+2
ZZ2AFD   EQU   ZZ2AF+2
ZZ2AFQ   EQU   ZZ2AF+2
ZZ2AF$   EQU   ZZ2AF+2
@NM00024 EQU   ZZ2AF+2
ZZ2AFM   EQU   ZZ2AF+2
@NM00023 EQU   ZZ2AF+2
@NM00022 EQU   ZZ2AF+1
ZZ2AFV   EQU   ZZ2AF+1
@NM00021 EQU   ZZ2AF+1
ZZ2AFC   EQU   ZZ2AF+1
@NM00020 EQU   ZZ2AF
ZZ2AFFS  EQU   ZZ2AF
ZZ2AFT   EQU   ZZ2AF
ZZ2AFP   EQU   ZZ2AF
@NM00019 EQU   ZZ2A+8
ZZ2ALINE EQU   ZZ2A+4
@NM00018 EQU   ZZ2A+3
ZZ2ASE   EQU   ZZ2A+2
ZZ2ACH   EQU   ZZ2A
@NM00017 EQU   ZZ2+264
@NM00016 EQU   ZZ2+263
ZZ2PRTT0 EQU   ZZ2PRTT
ZZ2PRTO  EQU   ZZ2PRT+2
ZZ2PRTL  EQU   ZZ2PRT
@NM00015 EQU   ZZ2AMD+56
ZZ2AMDXP EQU   ZZ2AMD+52
ZZ2AMDD  EQU   ZZ2AMD+48
ZZ2AMDL  EQU   ZZ2AMD+44
ZZ2AMDU  EQU   ZZ2AMD+28
ZZ2AMDF  EQU   ZZ2AMD+24
ZZ2AMDS  EQU   ZZ2AMD+20
ZZ2AMDC  EQU   ZZ2AMD+16
ZZ2AMDP  EQU   ZZ2AMD+12
ZZ2AMDB  EQU   ZZ2AMD+8
@NM00014 EQU   @NM00013
ZZ2AMD2  EQU   @NM00013
ZZ2AMD1  EQU   @NM00013
ZZ2AMD0  EQU   ZZ2AMD+6
ZZ2AMDA  EQU   ZZ2AMD+4
ZZ2AMDT  EQU   ZZ2AMD
ZZ199999 EQU   ZZ1+3072
@NM00012 EQU   ZZ1+2160
ZZ1TRTAS EQU   ZZ1+1904
ZZ1TRUPC EQU   ZZ1+1648
ZZ1NASID EQU   ZZ1N+274
ZZ1NSTRL EQU   ZZ1N+272
ZZ1NOFF  EQU   ZZ1N+268
ZZ1NBDY  EQU   ZZ1N+264
ZZ1NADE  EQU   ZZ1N+260
ZZ1NADB  EQU   ZZ1N+256
ZZ1NSTR  EQU   ZZ1N
@NM00011 EQU   ZZ1+1080
ZZ1TREBC EQU   ZZ1+824
ZZ1TRHEX EQU   ZZ1+568
@NM00010 EQU   ZZ1+377
ZZ1USTAE EQU   ZZ1+376
@NM00009 EQU   ZZ1F+1
@NM00008 EQU   ZZ1F
ZZ1FM    EQU   ZZ1F
ZZ1FX    EQU   ZZ1F
ZZ1FU    EQU   ZZ1F
ZZ1EVEC  EQU   ZZ1EVE+1
@NM00007 EQU   ZZ1EVE
ZZ1EVEP  EQU   ZZ1EVE
ZZ1EVEW  EQU   ZZ1EVE
ZZ1ACMP  EQU   ZZ1ATTN
@NM00006 EQU   ZZ1+144
ZZ1FPP   EQU   ZZ1+140
ZZ1ZZ6P  EQU   ZZ1+136
@NM00005 EQU   ZZ1+84
ZZ1PLINE EQU   ZZ1+80
ZZ1PGSZ  EQU   ZZ1+76
ZZ1PCNT  EQU   ZZ1+72
@NM00004 EQU   ZZ1+68
ZZ1TPAGE EQU   ZZ1+64
ZZ1TLINE EQU   ZZ1+60
@NM00003 EQU   ZZ1+48
ZZ1DSDP  EQU   ZZ1+44
ZZ1PDRP  EQU   ZZ1+40
ZZ1ZZ2P  EQU   ZZ1+36
ZZ1327WP EQU   ZZ1+32
ZZ1ACBP  EQU   ZZ1+28
@NM00002 EQU   ZZ1+24
ZZ1PDCBP EQU   ZZ1+20
ZZ1BLRBL EQU   ZZ1+16
@NM00001 EQU   ZZ1+12
ZZ1PNULL EQU   ZZ1+8
ZZ1NULL  EQU   ZZ1+4
ZZ1IDE   EQU   ZZ1
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00503 EQU   EXITRLSA
@RT00514 EQU   EXITRLSA
@RT00521 EQU   EXITRLSA
@RC00659 EQU   EXITRLSA
@ENDDATA EQU   *
         END   BLSRCOMP,(C'PLS1527',0701,78057)
