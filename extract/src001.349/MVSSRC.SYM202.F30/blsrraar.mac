RAAR     TITLE 'BLSRRAAR--ADD OR REPLACE AN ADDRESS SPACE RECORD       *
                        '
*/* CHANGE ACTIVITY -------------------------------------------------*/
*/*   THIS MODULE WAS WRITTEN FOR @G57LPRW                           */
*/*------------------------------------------------------------------*/
BLSRRAAR CSECT ,                                                01S0002
@MAINENT DS    0H                                               01S0002
         USING *,@15                                            01S0002
         B     @PROLOG                                          01S0002
         DC    AL1(16)                                          01S0002
         DC    C'BLSRRAAR  78.160'                              01S0002
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0002
         BALR  @12,0                                            01S0002
@PSTART  DS    0H                                               01S0002
         USING @PSTART,@12                                      01S0002
         L     @00,@SIZDATD                                     01S0002
         BLSUALLS R,LV=(0)
         LR    @11,@01                                          01S0002
         LA    @10,4095(,@11)                                   01S0002
         USING @DATD,@11                                        01S0002
         USING @DATD+4095,@10                                   01S0002
         ST    @13,@SA00001+4                                   01S0002
         LM    @00,@01,20(@13)                                  01S0002
         ST    @11,8(,@13)                                      01S0002
         LR    @13,@11                                          01S0002
         MVC   @PC00001(8),0(@01)                               01S0002
*                                                               01S0140
*/*------------------------------------------------------------------*/
*/* BLSRRAAR--ADD OR REPLACE AN ADDRESS SPACE RECORD                 */
*/*------------------------------------------------------------------*/
*                                                               01S0141
*                                                               02S0141
*/*------------------------------------------------------------------*/
*/* BLSRRA01--BLSRRAAR INITIALIZATION                                */
*/*------------------------------------------------------------------*/
*                                                               02S0141
*   FLAG='00'X;                     /* PROCESSING CONTROL FLAGS      */
         MVI   FLAG,X'00'                                       02S0141
         SPACE 1
*                                                               02S0142
*/*------------------------------------------------------------------*/
*/* INTERMEDIATE--OCCASIONALLY CONFLICTS WILL BE DETECTED DURING     */
*/* MERGE PROCESSING WHICH MUST BE RESOLVED BY GENERATING SEVERAL    */
*/* RECORD ENTRIES FROM A SINGLE INPUT ENTRY. IN THIS CASE AN        */
*/* ADDITIONAL BUFFER, RABA, WILL BE ALLOCATED AND USED TO BUFFER    */
*/* SOME OF THE ENTRIES PRODUCED. IF NO CONFLICTS ARISE DURING MERGE */
*/* PROCESSING, NO ALLOCATION WILL TAKE PLACE.                       */
*/*------------------------------------------------------------------*/
*                                                               02S0142
*   RABAP=ZZZZNULL;                 /* RABA NOT ALLOCATED            */
         SLR   @08,@08                                          02S0142
         ST    @08,RABAP                                        02S0142
         SPACE 1
*                                                               02S0143
*/*------------------------------------------------------------------*/
*/* INPUT 1--INITIALIZE RELATIVE TO THE ADDRESS SPACE PARAMETER      */
*/* RECORD, RAPA. THIS RECORD SUPPLIES INFORMATION JUST GATHERED     */
*/* REGARDING THE TOPOLOGY OF AN ADDRESS SPACE CONTAINED IN A DATA   */
*/* SET ON DIRECT ACCESS STORAGE. FOR EXAMPLE, A SEGMENT TABLE       */
*/* DESCRIBING NUMEROUS INVALID SEGMENTS MAY HAVE BEEN RETRIEVED     */
*/* FROM A SYSTEM/370 DUMP.                                          */
*/*------------------------------------------------------------------*/
*                                                               02S0143
*   RAMEUSE=RAPAUSE;                /* ENTRIES IN USE                */
         L     @15,@PC00001+4                                   02S0143
         LH    @15,RAPAUSE(,@15)                                02S0143
         STH   @15,RAMEUSE                                      02S0143
*   IF                              /* ABSURD INPUT RECORD           */
*       RAMEUSE=0×                  /* NO ENTRIES IN USE             */
*       RAMEUSE>RAPAHDI THEN        /* EXCESSIVE ENTRIES IN USE      */
         CR    @15,@08                                          02S0144
         BE    @RT00144                                         02S0144
         CH    @15,@CH00191                                     02S0144
         BH    @RT00144                                         02S0144
*     GO TO ERREXIT;                /* ERROR EXIT                    */
*   DO J1=RAMEUSE TO 1 BY-1;        /* VERIFY PARAMETER RECORD       */
         LR    J1,@15                                           02S0146
         B     @DE00146                                         02S0146
@DL00146 DS    0H                                               02S0147
*     RAMER(JL)=RAPAR(J1);          /* COPY CURRENT ENTRY            */
         LR    @08,J1                                           02S0147
         SLL   @08,5                                            02S0147
         L     @03,@PC00001+4                                   02S0147
         ALR   @03,@08                                          02S0147
         MVC   RAMER(32),RAPAR-32(@03)                          02S0147
*     IF                            /* PARAMETER RECORD ERROR        */
*         (J1<RAMEUSE&RAMERIA(JL)>=RAMERIA(JH))×/* OUT OF ORDER      */
*         RAMERLE(JL)=0×            /* ABSURD DATA LENGTH            */
*         RAPARNM(JL)=0 THEN        /* ABSURD NUMBER OF RECORDS      */
         LH    @08,RAMEUSE                                      02S0148
         CLR   J1,@08                                           02S0148
         BNL   @GL00003                                         02S0148
         CLC   RAMERIA(4),RAMERIA+32                            02S0148
         BNL   @RT00148                                         02S0148
@GL00003 SLR   @08,@08                                          02S0148
         CL    @08,RAMERLE                                      02S0148
         BE    @RT00148                                         02S0148
         L     @03,@PC00001+4                                   02S0148
         CH    @08,RAPARNM(,@03)                                02S0148
         BE    @RT00148                                         02S0148
*       GO TO ERREXIT;              /* ERROR EXIT                    */
*     RAMER(JH)=RAMER(JL);          /* CURRENT ENTRY=>NEXT ENTRY     */
         MVC   RAMER+32(32),RAMER                               02S0150
*   END;                            /* VERIFY PARAMETER RECORD       */
         BCTR  J1,0                                             02S0151
@DE00146 CL    J1,@CF00047                                      02S0151
         BNL   @DL00146                                         02S0151
         SPACE 1
*                                                               02S0152
*/*------------------------------------------------------------------*/
*/* INPUT 2--ONE OR MORE ADDRESS SPACE RECORDS FOR THIS ADDRESS      */
*/* SPACE MAY ALREADY BE STORED IN THE VSAM DEBUG CLUSTER. THE       */
*/* EXISTING INFORMATION MUST BE MERGED WITH THAT JUST GATHERED TO   */
*/* OBTAIN A COMPACT, CONSISTENT DESCRIPTION OF THE TOPOLOGY OF THE  */
*/* ADDRESS SPACE                                                    */
*/*------------------------------------------------------------------*/
*                                                               02S0152
*   RAUP(1:RAUPLRL)=RACO(1:RACOLRL);/* INITIALIZE ADDITION BUFFER    */
         L     @08,ZZ2RASYP(,R9)                                02S0152
         MVC   RAUP(148),RACO(@08)                              02S0152
*   RAUPRDX=ZZ6DRDX;                /* DATA SET INDEX                */
         L     @08,ZZ2AZZ6P(,R9)                                02S0153
         MVC   RAUPRDX(4),ZZ6DRDX(@08)                          02S0153
*   RAUPAS=RAPAAS;                  /* ADDRESS SPACE                 */
         L     @08,@PC00001+4                                   02S0154
         MVC   RAUPAS(16),RAPAAS(@08)                           02S0154
*   RESPECIFY                                                   02S0155
*    (R6,                           /* RECORD LENGTH                 */
*     R7,                           /* ->ACB                         */
*     R8) RESTRICTED;               /* KEY LENGTH                    */
*   R6=ZZZVSHRL;                    /* RECORD LENGTH                 */
         LA    R6,3072                                          02S0156
*   R7=ZZ1ACBP;                     /* ->ACB                         */
         L     @01,ZZ2ZZ1P(,R9)                                 02S0157
         L     R7,ZZ1ACBP(,@01)                                 02S0157
*   R8=RAUPLKL;                     /* KEY LENGTH                    */
         LA    R8,32                                            02S0158
*   GENERATE SETS(GENPRMU) CODE;                                02S0159
*/*-------------------------------------------------------------------*
*   CREATE AN RPL FOR UPDATE PROCESSING                               *
*---------------------------------------------------------------------*
         GENCB BLK=RPL,WAREA=(S,MYRPLU),ACB=(R7),AREA=(S,RAUP),        *
               AREALEN=(R6),ARG=(S,RAUP),OPTCD=(SEQ,MVE,GEN,KGE,UPD),  *
               LENGTH=256,KEYLEN=(R8),MF=(L,GENPRMU,GENPRMUL) */
*   RESPECIFY                                                   02S0160
*    (R6,                           /* RECORD LENGTH                 */
*     R8) UNRESTRICTED;             /* KEY LENGTH                    */
*   RESPECIFY                                                   02S0161
*    (RF) RESTRICTED;               /* BLSUVSCR RETURN CODE          */
*   CALL BLSUVSCR(ZZ2,GENPRMU);     /* CREATE AN RPL FOR UPDATE      */
         ST    R9,@AL00001                                      02S0162
         LA    @14,GENPRMU                                      02S0162
         ST    @14,@AL00001+4                                   02S0162
         L     @08,ZZ2BVTP(,R9)                                 02S0162
         L     @15,BVTVSCRP(,@08)                               02S0162
         LA    @01,@AL00001                                     02S0162
         BALR  @14,@15                                          02S0162
*   IF RF^=ZZZFLAGI THEN            /* BLSUVSCR DETECTED AN ERROR    */
         SLR   @14,@14                                          02S0163
         CR    RF,@14                                           02S0163
         BNE   @RT00163                                         02S0163
*     GO TO ERREXIT;                /* ERROR EXIT                    */
*   RESPECIFY                                                   02S0165
*    (RF) UNRESTRICTED;             /* BLSUVSCR RETURN CODE          */
         SPACE 1
*                                                               02S0166
*/*------------------------------------------------------------------*/
*/* INTERMEDIATE--ONE ADDRESS SPACE RECORD IMAGE, RAME, IS UTILIZED  */
*/* TO MERGE THE INFORMATION OBTAINED FROM INPUT 1 AND INPUT 2.      */
*/* CONFLICTING INFORMATION IS EXPECTED REGARDING THE TOPOLOGY OF    */
*/* ADDRESS SPACES IN SOME CIRCUMSTANCES. FOR EXAMPLE,               */
*/* (1) AMASADMP ATTEMPTS TO RETRIEVE SOME STORAGE FROM PAGE DATA    */
*/*     SETS TO AUGMENT THE INFORMATION OBTAINED FROM MAIN STORAGE.  */
*/*     SUCH PAGES ARE, OF COURSE, DESCRIBED AS BEING INVALID IN     */
*/*     THE APPLICABLE PAGE OR SEGMENT TABLES IN MAIN STORAGE.       */
*/* (2) MVS REAL STORAGE MANAGEMENT SUPPORTS A PROCESS KNOWN AS      */
*/*     RECLAIM WHERE A PAGE TABLE ENTRY IS MARKED INVALID BUT THE   */
*/*     CONTENTS OF A REAL STORAGE FRAME STILL REFLECT THAT PAGE.    */
*/* (3) MVS SDUMP WILL DUMP THE PAGE(S) CONTAINING THE CVT IF A DUMP */
*/*     OF THE NUCLEUS IS ALSO REQUESTED.                            */
*/*------------------------------------------------------------------*/
*/* CONFLICTS ARE RESOLVED BY PREFERRING TO RETAIN:                  */
*/* (1) INFORMATION DESCRIBING AVAILABLE STORAGE RATHER THAN         */
*/*     INFORMATION ASSERTING THAT THE STORAGE IS NOT AVAILABLE      */
*/* (2) INFORMATION DESCRIBING AVAILABLE STORAGE AT A LOWER ADDRESS  */
*/*     IN THE DATA SET THAN ANOTHER AVAILABLE SOURCE OF THE DATA.   */
*/*------------------------------------------------------------------*/
*                                                               02S0166
*   RAME(1:RAMELRL)=RAUP(1:RAUPLRL);/* INITIALIZE MERGE BUFFER       */
         MVC   RAME(148),RAUP                                   02S0166
*   RAMEUSE=0;                      /* INITIALIZE RAME               */
         STH   @14,RAMEUSE                                      02S0167
         SPACE 1
*                                                               02S0168
*/*------------------------------------------------------------------*/
*/* OUTPUT--ONE ADDRESS SPACE RECORD IMAGE, RAAD, IS USED TO         */
*/* CONSTRUCT OUTPUT RECORDS, ONE AT A TIME. ENTRIES ARE OBTAINED    */
*/* FROM THE INTERMEDIATE MERGE BUFFER AS SOON AS THEY ARE           */
*/* COMPLETE--CANNOT BE EXTENDED TO DESCRIBE A LARGER PART OF WHAT   */
*/* IS KNOWN ABOUT THE ADDRESS SPACE.                                */
*/*------------------------------------------------------------------*/
*                                                               02S0168
*   RAAD(1:RAADLRL)=RAME(1:RAMELRL);/* INITIALIZE RAAD               */
         MVC   RAAD(148),RAME                                   02S0168
*   RESPECIFY                                                   02S0169
*    (R6) RESTRICTED;               /* RECORD LENGTH                 */
*   R6=RAADHRL;                     /* MAXIMUM RECORD LENGTH         */
         LA    R6,3060                                          02S0170
*   GENERATE SETS(GENPRMA) CODE;                                02S0171
*/*-------------------------------------------------------------------*
*   CREATE AN RPL TO WRITE THE CONTENTS OF A FULL ADDITION BUFFER     *
*---------------------------------------------------------------------*
         GENCB BLK=RPL,WAREA=(S,MYRPLA),ACB=(R7),AREA=(S,RAAD),        *
               OPTCD=(DIR,MVE,NUP),RECLEN=(R6),LENGTH=256,             *
               MF=(L,GENPRMA,GENPRMAL) */
*   RESPECIFY                                                   02S0172
*    (R6,                           /* RECORD LENGTH                 */
*     R7) UNRESTRICTED;             /* ->ACB                         */
*   RESPECIFY                                                   02S0173
*    (RF) RESTRICTED;               /* BLSUVSCR RETURN CODE          */
*   CALL BLSUVSCR(ZZ2,GENPRMA);     /* CREATE AN RPL FOR ADDITION    */
         ST    R9,@AL00001                                      02S0174
         LA    @14,GENPRMA                                      02S0174
         ST    @14,@AL00001+4                                   02S0174
         L     @08,ZZ2BVTP(,R9)                                 02S0174
         L     @15,BVTVSCRP(,@08)                               02S0174
         LA    @01,@AL00001                                     02S0174
         BALR  @14,@15                                          02S0174
*   IF RF^=ZZZFLAGI THEN            /* BLSUVSCR DETECTED AN ERROR    */
         LTR   RF,RF                                            02S0175
         BNZ   @RT00175                                         02S0175
*     GO TO ERREXIT;                /* ERROR EXIT                    */
*   RESPECIFY                                                   02S0177
*    (RF) UNRESTRICTED;             /* BLSUVSCR RETURN CODE          */
*                                                               02S0178
*/*------------------------------------------------------------------*/
*/* BLSRRA02--BLSRRAAR MERGE PROCESSING                              */
*/*------------------------------------------------------------------*/
*/* ITERATIVELY PROCESS ADDRESS SPACE RECORDS UNTIL:                 */
*/* (1) THE INFORMATION ABOUT THE ADDRESS SPACE WHICH WAS SPECIFIED  */
*/*     BY THE CALLER HAS BEEN MERGED WITH WHAT WAS ALREADY KNOWN    */
*/*     AND                                                          */
*/* (2) THE DESCRIPTION OF THE ADDRESS SPACE IS LEFT-JUSTIFIED IN A  */
*/*     MINIMUM NUMBER OF ADDRESS SPACE RECORDS                      */
*/*------------------------------------------------------------------*/
*                                                               02S0178
*   JP=1;                           /* PARAMETER RECORD INDEX        */
         MVC   JP(4),@CF00047                                   02S0178
*   JU=0;                           /* UPDATE RECORD INDEX           */
         SLR   JU,JU                                            02S0179
*   PL=ZZZZNULL;                    /* ->BYTE AFTER LOW ENTRY        */
         SLR   PL,PL                                            02S0180
*   PH=ZZZZNULL;                    /* ->BYTE AFTER HIGH ENTRY       */
         SLR   PH,PH                                            02S0181
*   DO WHILE(                       /* PROCESS RA RECORDS            */
*         FLAGERR=ZZZ0&             /* NO PROCESSING ERRORS          */
*         (JP^=0×                   /* PARAMETER ENTRIES REMAIN      */
*         FLAGEOF=ZZZ0×             /* EXISTING ENTRIES REMAIN       */
*         RAMEUSE>JL×               /* INTERMEDIATE ENTRIES REMAIN   */
*         (RABAP^=ZZZZNULL&         /* RABA HAS BEEN ALLOCATED       */
*         RABAUSE^=0)));            /* ENTRIES REMAIN IN RABA        */
         B     @DE00182                                         02S0182
@DL00182 DS    0H                                               02S0183
*                                                               03S0183
*/*------------------------------------------------------------------*/
*/* BLSRRA03--READ EXISTING RECORD                                   */
*/*------------------------------------------------------------------*/
*                                                               03S0183
*   IF FLAGEOF=ZZZ0&JU=0 THEN       /* READ EXISTING RECORD          */
*                                                               03S0183
         TM    FLAGEOF,B'10000000'                              03S0183
         BNZ   @RF00183                                         03S0183
         SLR   @15,@15                                          03S0183
         CLR   JU,@15                                           03S0183
         BNE   @RF00183                                         03S0183
*     /***************************************************************/
*     /*                                                             */
*     /* READ EXISTING RECORD                                        */
*     /*                                                             */
*     /***************************************************************/
*                                                               03S0184
*     DO;                           /* READ EXISTING RECORD          */
*       RESPECIFY                                               03S0185
*        (RF) RESTRICTED;           /* RETURN CODES                  */
*       IF FLAGSCAN=ZZZ0 THEN       /* SEQUENTIAL SCAN INACTIVE      */
*                                                               03S0186
         TM    FLAGSCAN,B'00100000'                             03S0186
         BNZ   @RF00186                                         03S0186
*         /***********************************************************/
*         /*                                                         */
*         /* SEQUENTIAL SCAN INACTIVE                                */
*         /*                                                         */
*         /***********************************************************/
*                                                               03S0187
*         DO;                       /* SEQUENTIAL SCAN INACTIVE      */
*           FLAGSCAN=ZZZ1;          /* SEQUENTIAL SCAN ACTIVE        */
         OI    FLAGSCAN,B'00100000'                             03S0188
*           IF RAADFAD=ZZZZNULL THEN/* FIRST EXISTING RECORD         */
         SLR   @14,@14                                          03S0189
         CL    @14,RAADFAD                                      03S0189
         BNE   @RF00189                                         03S0189
*             IF RAPARIA(1)>ZZZZNULL THEN/* NEW DATA IN MIDDLE OF
*                                      SPACE                         */
         L     @05,@PC00001+4                                   03S0190
         L     @05,RAPARIA(,@05)                                03S0190
         CLR   @05,@14                                          03S0190
         BNH   @RF00190                                         03S0190
*               RAUPFAD=RAPARIA(1)-1;/* ->PORTION OF ADDRESS SPACE   */
         BCTR  @05,0                                            03S0191
         ST    @05,RAUPFAD                                      03S0191
*             ELSE                  /* NEW DATA BEGINS SPACE         */
*               RAUPFAD=ZZZZNULL;   /* ->ORIGIN OF ADDRESS SPACE     */
         B     @RC00190                                         03S0192
@RF00190 SLR   @14,@14                                          03S0192
         ST    @14,RAUPFAD                                      03S0192
*           ELSE                    /* 2ND, 3RD, ... EXISTING RECORD */
*             RAUPFAD=RAADFAD+1;    /* ->PORTION OF ADDRESS SPACE    */
         B     @RC00189                                         03S0193
@RF00189 LA    @14,1                                            03S0193
         AL    @14,RAADFAD                                      03S0193
         ST    @14,RAUPFAD                                      03S0193
*           CALL BLSUVSPO(ZZ2,MYRPLU);/* INDICATE SCAN ORIGIN        */
@RC00189 ST    R9,@AL00001                                      03S0194
         LA    @14,MYRPLU                                       03S0194
         ST    @14,@AL00001+4                                   03S0194
         L     @01,ZZ2BVTP(,R9)                                 03S0194
         L     @15,BVTVSPOP(,@01)                               03S0194
         LA    @01,@AL00001                                     03S0194
         BALR  @14,@15                                          03S0194
*           IF RF^=ZZZFLAGI THEN    /* POINT OPERATION FAILED        */
*                                                               03S0195
         LTR   RF,RF                                            03S0195
         BZ    @RF00195                                         03S0195
*             /*******************************************************/
*             /*                                                     */
*             /* POINT OPERATION FAILED                              */
*             /*                                                     */
*             /*******************************************************/
*                                                               03S0196
*             DO;                   /* POINT OPERATION FAILED        */
*               FLAGEOF=ZZZ1;       /* ALL EXISTING RECORDS READ     */
*               FLAGERR=ZZZ1;       /* AN ERROR HAS BEEN DETECTED    */
         OI    FLAGEOF,B'11000000'                              03S0198
*               GO TO L020;         /* ABORT PROCESSING LOOP         */
         B     L020                                             03S0199
*             END;                  /* POINT OPERATION FAILED        */
*         END;                      /* SEQUENTIAL SCAN INACTIVE      */
*       ELSE                        /* ERASE RECORD HELD FOR UPDATE  */
*                                                               03S0202
*         /***********************************************************/
*         /*                                                         */
*         /* ERASE RECORD HELD FOR UPDATE. THE INFORMATION FROM IT   */
*         /* WILL BE RECORDED IN ONE OR MORE NEW RECORDS             */
*         /*                                                         */
*         /***********************************************************/
*                                                               03S0202
*         DO;                       /* ERASE RECORD HELD FOR UPDATE  */
         B     @RC00186                                         03S0202
@RF00186 DS    0H                                               03S0203
*           CALL BLSUVSER(ZZ2,MYRPLU);/* ERASE RAUP                  */
         ST    R9,@AL00001                                      03S0203
         LA    @14,MYRPLU                                       03S0203
         ST    @14,@AL00001+4                                   03S0203
         L     @01,ZZ2BVTP(,R9)                                 03S0203
         L     @15,BVTVSERP(,@01)                               03S0203
         LA    @01,@AL00001                                     03S0203
         BALR  @14,@15                                          03S0203
*           IF RF^=ZZZFLAGI THEN    /* ERASE OPERATION FAILED        */
*                                                               03S0204
         LTR   RF,RF                                            03S0204
         BZ    @RF00204                                         03S0204
*             /*******************************************************/
*             /*                                                     */
*             /* ERASE OPERATION FAILED                              */
*             /*                                                     */
*             /*******************************************************/
*                                                               03S0205
*             DO;                   /* ERASE OPERATION FAILED        */
*               FLAGEOF=ZZZ1;       /* ALL EXISTING RECORDS READ     */
*               FLAGERR=ZZZ1;       /* AN ERROR HAS BEEN DETECTED    */
         OI    FLAGEOF,B'11000000'                              03S0207
*             END;                  /* ERASE OPERATION FAILED        */
*         END;                      /* ERASE RECORD HELD FOR UPDATE  */
@RF00204 DS    0H                                               03S0210
*       IF FLAGEOF=ZZZ0 THEN        /* READ EXISTING DATA            */
*                                                               03S0210
@RC00186 TM    FLAGEOF,B'10000000'                              03S0210
         BNZ   @RF00210                                         03S0210
*         /***********************************************************/
*         /*                                                         */
*         /* READ EXISTING DATA                                      */
*         /*                                                         */
*         /***********************************************************/
*                                                               03S0211
*         DO;                       /* READ EXISTING DATA            */
*           CALL BLSUVSGU(ZZ2,MYRPLU);/* RETRIEVE NEXT RECORD        */
         ST    R9,@AL00001                                      03S0212
         LA    @14,MYRPLU                                       03S0212
         ST    @14,@AL00001+4                                   03S0212
         L     @01,ZZ2BVTP(,R9)                                 03S0212
         L     @15,BVTVSGUP(,@01)                               03S0212
         LA    @01,@AL00001                                     03S0212
         BALR  @14,@15                                          03S0212
*           IF RF^=ZZZFLAGI THEN    /* NO RECORD READ                */
*                                                               03S0213
         LTR   RF,RF                                            03S0213
         BZ    @RF00213                                         03S0213
*             /*******************************************************/
*             /*                                                     */
*             /* NO RECORD READ                                      */
*             /*                                                     */
*             /*******************************************************/
*                                                               03S0214
*             DO;                   /* NO RECORD READ                */
*               FLAGEOF=ZZZ1;       /* ALL EXISTING RECORDS READ     */
*               FLAGERR=ZZZ1;       /* AN ERROR HAS BEEN DETECTED    */
         OI    FLAGEOF,B'11000000'                              03S0216
*               GO TO L020;         /* ABORT PROCESSING LOOP         */
         B     L020                                             03S0217
*             END;                  /* NO RECORD READ                */
*           ELSE                    /* RECORD READ                   */
*             IF                    /* IRRELEVANT RECORD             */
*                 RAUPRID^=ZZZRIDRA×/* DIFFERENT RECORD TYPE         */
*                 RAUPAS^=RAADAS THEN/* DIFFERENT ADDRESS SPACE      */
@RF00213 CLC   RAUPRID(2),@CC00136                              03S0219
         BNE   @RT00219                                         03S0219
         CLC   RAUPAS(16),RAADAS                                03S0219
         BE    @RF00219                                         03S0219
@RT00219 DS    0H                                               03S0220
*               FLAGEOF=ZZZ1;       /* ALL EXISTING RECORDS READ     */
         OI    FLAGEOF,B'10000000'                              03S0220
*             ELSE                  /* PERTINENT RECORD READ         */
*                                                               03S0221
*               /*****************************************************/
*               /*                                                   */
*               /* PERTINENT RECORD READ                             */
*               /*                                                   */
*               /*****************************************************/
*                                                               03S0221
*               DO;                 /* PERTINENT RECORD READ         */
         B     @RC00219                                         03S0221
@RF00219 DS    0H                                               03S0222
*                 IF RAMEUSE=0 THEN /* NO ENTRIES IN MERGE BUFFER    */
*                                                               03S0222
         ICM   @14,3,RAMEUSE                                    03S0222
         BNZ   @RF00222                                         03S0222
*                   /*************************************************/
*                   /*                                               */
*                   /* QUICKLY COPY THOSE ENTRIES WHICH HAVE BEEN    */
*                   /* READ BUT NEED NOT BE PROCESSED INDIVIDUALLY BY*/
*                   /* THE MERGE                                     */
*                   /*                                               */
*                   /*************************************************/
*                                                               03S0223
*                   DO JU=1 TO RAUPUSE-1 WHILE(RAUPRIA(JU+1)<RAPARIA(1)
*                         );        /* PROCESS DISJOINT ENTRIES      */
         LA    JU,1                                             03S0223
         B     @DE00223                                         03S0223
@DL00223 LR    @14,JU                                           03S0223
         SLL   @14,5                                            03S0223
         L     @05,@PC00001+4                                   03S0223
         L     @04,RAUPRIA(@14)                                 03S0223
         CL    @04,RAPARIA(,@05)                                03S0223
         BNL   @DC00223                                         03S0223
*                     RAMER(JX)=RAUPR(JU);/* NEW OUTPUT ENTRY        */
         LA    @01,RAUPR-32(@14)                                03S0224
         MVC   RAMER+64(32),0(@01)                              03S0224
*                     CALL BLSRRA11;/* PROCESS NEW OUTPUT ENTRY      */
         BAL   @14,BLSRRA11                                     03S0225
*                   END;            /* PROCESS DISJOINT ENTRIES      */
         AL    JU,@CF00047                                      03S0226
@DE00223 LH    @14,RAUPUSE                                      03S0226
         BCTR  @14,0                                            03S0226
         CLR   JU,@14                                           03S0226
         BNH   @DL00223                                         03S0226
@DC00223 DS    0H                                               03S0227
*                 ELSE              /* ENTRY(IES) IN MERGE BUFFER    */
*                   JU=1;           /* UPDATE RECORD INDEX           */
         B     @RC00222                                         03S0227
@RF00222 LA    JU,1                                             03S0227
*               END;                /* PERTINENT RECORD READ         */
@RC00222 DS    0H                                               03S0229
*         END;                      /* READ EXISTING DATA            */
@RC00219 DS    0H                                               03S0230
*       RESPECIFY                                               03S0230
*        (RF) UNRESTRICTED;         /* RETURN CODES                  */
@RF00210 DS    0H                                               03S0231
*     END;                          /* READ EXISTING RECORD          */
*                                                               03S0232
*/*------------------------------------------------------------------*/
*/* BLSRRA04--BLSRRAAR SEGMENT TO MERGE ENTRY INTO RAME              */
*/*------------------------------------------------------------------*/
*                                                               03S0232
*   PB=ZZZP31P1;                    /* NO RABA ENTRY AVAILABLE       */
@RF00183 L     @15,@CF00067                                     03S0232
         LR    PB,@15                                           03S0232
*   PP=ZZZP31P1;                    /* NO PARAMETER ENTRY AVAILABLE  */
         LR    PP,@15                                           03S0233
*   PU=ZZZP31P1;                    /* NO UPDATE ENTRY AVAILABLE     */
         LR    PU,@15                                           03S0234
*   IF                              /* RABA ENTRY AVAILABLE          */
*       RABAP^=ZZZZNULL&            /* RABA HAS BEEN ALLOCATED       */
*       RABAUSE^=0 THEN             /* RABA ENTRY AVAILABLE          */
         L     @02,RABAP                                        03S0235
         SLR   @15,@15                                          03S0235
         CR    @02,@15                                          03S0235
         BE    @RF00235                                         03S0235
         CH    @15,RABAUSE(,@02)                                03S0235
         BE    @RF00235                                         03S0235
*     PB=RABARIA(1);                /* ->FIRST BYTE DESCRIBED        */
         L     PB,RABARIA(,@02)                                 03S0236
*   IF JP^=0 THEN                   /* PARAMETER ENTRY AVAILABLE     */
@RF00235 L     @02,JP                                           03S0237
         LTR   @02,@02                                          03S0237
         BZ    @RF00237                                         03S0237
*     PP=RAPARIA(JP);               /* ->FIRST BYTE DESCRIBED        */
         SLL   @02,5                                            03S0238
         L     @15,@PC00001+4                                   03S0238
         L     PP,RAPARIA-32(@02,@15)                           03S0238
*   IF JU^=0 THEN                   /* PARAMETER ENTRY AVAILABLE     */
@RF00237 LTR   JU,JU                                            03S0239
         BZ    @RF00239                                         03S0239
*     PU=RAUPRIA(JU);               /* ->FIRST BYTE DESCRIBED        */
         LR    @02,JU                                           03S0240
         SLL   @02,5                                            03S0240
         L     PU,RAUPRIA-32(@02)                               03S0240
*   PX=MIN(PB,PP,PU);               /* ->FIRST BYTE DESCRIBED        */
@RF00239 LR    PX,PP                                            03S0241
         CLR   PX,PB                                            03S0241
         BNH   *+6
         LR    PX,PB                                            03S0241
         CLR   PX,PU                                            03S0241
         BNH   *+6
         LR    PX,PU                                            03S0241
*   IF PX<ZZZP31P1 THEN             /* SOURCE ENTRY TO BE MERGED     */
*                                                               03S0242
         CL    PX,@CF00067                                      03S0242
         BNL   @RF00242                                         03S0242
*     /***************************************************************/
*     /*                                                             */
*     /* SOURCE ENTRY TO BE MERGED                                   */
*     /*                                                             */
*     /***************************************************************/
*                                                               03S0243
*     DO;                           /* SOURCE ENTRY TO BE MERGED     */
*       FLAGSEL=ZZZ0;               /* NO ENTRY SELECTED             */
         NI    FLAGSEL,B'11101111'                              03S0244
*       IF PU=PX THEN               /* MERGE EXISTING ENTRY          */
*                                                               03S0245
         CLR   PU,PX                                            03S0245
         BNE   @RF00245                                         03S0245
*         /***********************************************************/
*         /*                                                         */
*         /* MERGE EXISTING ENTRY                                    */
*         /*                                                         */
*         /***********************************************************/
*                                                               03S0246
*         DO;                       /* MERGE EXISTING ENTRY          */
*           RAMER(JH)=RAUPR(JU);    /* HIGH ENTRY                    */
         LR    @08,JU                                           03S0247
         SLL   @08,5                                            03S0247
         LA    @04,RAUPR-32(@08)                                03S0247
         MVC   RAMER+32(32),0(@04)                              03S0247
*           IF JU<RAUPUSE THEN      /* ANOTHER ENTRY IN THIS RECORD  */
         LH    @08,RAUPUSE                                      03S0248
         CLR   JU,@08                                           03S0248
         BNL   @RF00248                                         03S0248
*             JU=JU+1;              /* NEXT EXISTING ENTRY INDEX     */
         AL    JU,@CF00047                                      03S0249
*           ELSE                    /* EXISTING DATA BUFFER EXHAUSTED*/
*                                                               03S0250
*             /*******************************************************/
*             /*                                                     */
*             /* EXISTING DATA BUFFER EXHAUSTED                      */
*             /*                                                     */
*             /*******************************************************/
*                                                               03S0250
*             DO;                   /* EXISTING DATA BUFFER EXHAUSTED*/
         B     @RC00248                                         03S0250
@RF00248 DS    0H                                               03S0251
*               JU=0;               /* EXISTING DATA BUFFER EXHAUSTED*/
         SLR   JU,JU                                            03S0251
*               IF RAUPFAD=ZZZP31MX THEN/* FINAL BYTE DESCRIBED      */
         CLC   RAUPFAD(4),@CF00127                              03S0252
         BNE   @RF00252                                         03S0252
*                 FLAGEOF=ZZZ1;     /* ALL EXISTING RECORDS READ     */
         OI    FLAGEOF,B'10000000'                              03S0253
*             END;                  /* EXISTING DATA BUFFER EXHAUSTED*/
@RF00252 DS    0H                                               03S0255
*           FLAGSEL=ZZZ1;           /* ENTRY SELECTED                */
@RC00248 OI    FLAGSEL,B'00010000'                              03S0255
*         END;                      /* MERGE EXISTING ENTRY          */
*       IF FLAGSEL=ZZZ0&PP=PX THEN  /* MERGE EXISTING ENTRY          */
*                                                               03S0257
@RF00245 TM    FLAGSEL,B'00010000'                              03S0257
         BNZ   @RF00257                                         03S0257
         CLR   PP,PX                                            03S0257
         BNE   @RF00257                                         03S0257
*         /***********************************************************/
*         /*                                                         */
*         /* MERGE PARAMETER ENTRY                                   */
*         /*                                                         */
*         /***********************************************************/
*                                                               03S0258
*         DO;                       /* MERGE PARAMETER ENTRY         */
*           RAMER(JH)=RAPAR(JP);    /* HIGH ENTRY                    */
         L     @08,JP                                           03S0259
         SLL   @08,5                                            03S0259
         L     @15,@PC00001+4                                   03S0259
         ALR   @15,@08                                          03S0259
         MVC   RAMER+32(32),RAPAR-32(@15)                       03S0259
*           IF RAMERFU(JH)=ZZZ1 THEN/* MISSING STORAGE DESCRIBED     */
*                                                               03S0260
         TM    RAMERFU+32,B'10000000'                           03S0260
         BNO   @RF00260                                         03S0260
*             /*******************************************************/
*             /*                                                     */
*             /* MISSING STORAGE DESCRIBED                           */
*             /*                                                     */
*             /*******************************************************/
*                                                               03S0261
*             DO;                   /* MISSING STORAGE DESCRIBED     */
*               RAMERLE(JH)=RAMERLE(JH)*MAX(RAMERNM(JH),1);/* LENGTH */
         LA    @08,1                                            03S0262
         LH    @15,RAMERNM+32                                   03S0262
         CR    @15,@08                                          03S0262
         BNL   *+6
         LR    @15,@08                                          03S0262
         M     @14,RAMERLE+32                                   03S0262
         ST    @15,RAMERLE+32                                   03S0262
*               RAMERNM(JH)=1;      /* ONE UNIT OF MISSING STORAGE   */
         STH   @08,RAMERNM+32                                   03S0263
*               RAMERDA(JH)=0;      /* NO DISK RECORD ADDRESS        */
         SLR   @08,@08                                          03S0264
         ST    @08,RAMERDA+32                                   03S0264
*               RAMEROF(JH)=0;      /* NO OFFSET                     */
         ST    @08,RAMEROF+32                                   03S0265
*             END;                  /* MISSING STORAGE DESCRIBED     */
*           IF JP<RAPAUSE THEN      /* ANOTHER PARAMETER RECORD ENTRY*/
@RF00260 L     @08,JP                                           03S0267
         L     @15,@PC00001+4                                   03S0267
         LH    @15,RAPAUSE(,@15)                                03S0267
         CLR   @08,@15                                          03S0267
         BNL   @RF00267                                         03S0267
*             JP=JP+1;              /* NEXT PARAMETER ENTRY INDEX    */
         AL    @08,@CF00047                                     03S0268
         ST    @08,JP                                           03S0268
*           ELSE                    /* PARAMETER BUFFER EXHAUSTED    */
*             JP=0;                 /* PARAMETER BUFFER EXHAUSTED    */
         B     @RC00267                                         03S0269
@RF00267 SLR   @08,@08                                          03S0269
         ST    @08,JP                                           03S0269
*           FLAGSEL=ZZZ1;           /* ENTRY SELECTED                */
@RC00267 OI    FLAGSEL,B'00010000'                              03S0270
*         END;                      /* MERGE PARAMETER ENTRY         */
*       IF FLAGSEL=ZZZ0&PB=PX THEN  /* MERGE RABA ENTRY              */
*                                                               03S0272
@RF00257 TM    FLAGSEL,B'00010000'                              03S0272
         BNZ   @RF00272                                         03S0272
         CLR   PB,PX                                            03S0272
         BNE   @RF00272                                         03S0272
*         /***********************************************************/
*         /*                                                         */
*         /* MERGE RABA ENTRY                                        */
*         /*                                                         */
*         /***********************************************************/
*                                                               03S0273
*         DO;                       /* MERGE RABA ENTRY              */
*           RABAP1=ADDR(RABA);      /* ->RABA (DURING MERGE)         */
         L     RABAP1,RABAP                                     03S0274
*           RESPECIFY                                           03S0275
*             RABA BASED(RABAP1);   /* LOCAL BASE                    */
*           RAMER(JH)=RABAR(1);     /* MERGE RABA ENTRY              */
         MVC   RAMER+32(32),RABAR(RABAP1)                       03S0276
*           RABAUSE=RABAUSE-1;      /* ENTRIES IN USE                */
*                                                               03S0277
         LH    @08,RABAUSE(,RABAP1)                             03S0277
         BCTR  @08,0                                            03S0277
         STH   @08,RABAUSE(,RABAP1)                             03S0277
*           /*********************************************************/
*           /*                                                       */
*           /* ELIMINATE SELECTED ENTRY                              */
*           /*                                                       */
*           /*********************************************************/
*                                                               03S0278
*           DO J3=1 TO RABAUSE;     /* ELIMINATE SELECTED ENTRY      */
         LA    J3,1                                             03S0278
         B     @DE00278                                         03S0278
@DL00278 DS    0H                                               03S0279
*             RABAR(J3)=RABAR(J3+1);/* BY ITERATIVE LEFT SHIFT       */
         LR    @08,J3                                           03S0279
         SLL   @08,5                                            03S0279
         ST    @08,@TF00001                                     03S0279
         ALR   @08,RABAP1                                       03S0279
         LR    @01,RABAP1                                       03S0279
         AL    @01,@TF00001                                     03S0279
         MVC   RABAR-32(32,@08),RABAR(@01)                      03S0279
*           END;                    /* ELIMINATE SELECTED ENTRY      */
         AL    J3,@CF00047                                      03S0280
@DE00278 LH    @08,RABAUSE(,RABAP1)                             03S0280
         CLR   J3,@08                                           03S0280
         BNH   @DL00278                                         03S0280
*           RESPECIFY                                           03S0281
*             RABA BASED(RABAP);    /* GLOBAL BASE                   */
*         END;                      /* MERGE RABA ENTRY              */
*       PH=                         /* ->BYTE AFTER HIGH ENTRY       */
*           RAMERIA(JH)+RAMERLE(JH)*RAMERNM(JH);                03S0283
@RF00272 L     PH,RAMERLE+32                                    03S0283
         MH    PH,RAMERNM+32                                    03S0283
         AL    PH,RAMERIA+32                                    03S0283
*       RAMEUSE=RAMEUSE+1;          /* ENTRIES IN USE                */
         LA    @15,1                                            03S0284
         LH    @14,RAMEUSE                                      03S0284
         ALR   @14,@15                                          03S0284
         STH   @14,RAMEUSE                                      03S0284
*       IF RAMEUSE=JL THEN          /* INITIAL ENTRY                 */
*                                                               03S0285
         CR    @14,@15                                          03S0285
         BNE   @RF00285                                         03S0285
*         /***********************************************************/
*         /*                                                         */
*         /* INITIAL ENTRY                                           */
*         /*                                                         */
*         /***********************************************************/
*                                                               03S0286
*         DO;                       /* INITIAL ENTRY                 */
*           RAMER(JL)=RAMER(JH);    /* LOW ENTRY                     */
         MVC   RAMER(32),RAMER+32                               03S0287
*           PL=PH;                  /* ->BYTE AFTER LOW ENTRY        */
         LR    PL,PH                                            03S0288
*           GO TO L020;             /* CONTINUE MERGE PROCESSING     */
         B     L020                                             03S0289
*         END;                      /* INITIAL ENTRY                 */
*     END;                          /* SOURCE ENTRY TO BE MERGED     */
@RF00285 DS    0H                                               03S0292
*                                                               03S0292
*/*------------------------------------------------------------------*/
*/* BLSRRA05--BLSRRAAR SEGMENT TO PROCESS MISSING STORAGE CASES      */
*/*------------------------------------------------------------------*/
*/* IF ENTRIES ARE DISJOINT, LOW ENTRY CAN BE TRANSMITTED TO OUTPUT  */
*/* AND MERGE PROCESSING CAN CONTINUE                                */
*/*------------------------------------------------------------------*/
*                                                               03S0292
*   IF PL<RAMERIA(JH) THEN          /* ENTRIES ARE DISJOINT          */
*                                                               03S0292
@RF00242 CL    PL,RAMERIA+32                                    03S0292
         BNL   @RF00292                                         03S0292
*     /***************************************************************/
*     /*                                                             */
*     /* ENTRIES ARE DISJOINT                                        */
*     /*                                                             */
*     /***************************************************************/
*                                                               03S0293
*     DO;                           /* ENTRIES ARE DISJOINT          */
*       CALL BLSRRA10;              /* SEND LOW ENTRY TO OUTPUT      */
         BAL   @14,BLSRRA10                                     03S0294
*       GO TO L020;                 /* CONTINUE MERGE PROCESSING     */
         B     L020                                             03S0295
*     END;                          /* ENTRIES ARE DISJOINT          */
         SPACE 1
*                                                               03S0297
*/*------------------------------------------------------------------*/
*/* PROCESS THE SITUATION WHERE LOW ENTRY DESCRIBES MISSING STORAGE  */
*/*------------------------------------------------------------------*/
*                                                               03S0297
*   IF RAMERFU(JL)=ZZZ1 THEN        /* LOW ENTRY=>MISSING STORAGE    */
*                                                               03S0297
@RF00292 TM    RAMERFU,B'10000000'                              03S0297
         BNO   @RF00297                                         03S0297
*     /***************************************************************/
*     /*                                                             */
*     /* LOW ENTRY=>MISSING STORAGE                                  */
*     /*                                                             */
*     /***************************************************************/
*                                                               03S0298
*     DO;                           /* LOW ENTRY=>MISSING STORAGE    */
*       IF RAMERFU(JH)=ZZZ1 THEN    /* ONE MISSING STORAGE RANGE     */
*                                                               03S0299
         TM    RAMERFU+32,B'10000000'                           03S0299
         BNO   @RF00299                                         03S0299
*         /***********************************************************/
*         /*                                                         */
*         /* ENTRIES DESCRIBE A SINGLE MISSING STORAGE RANGE         */
*         /*                                                         */
*         /***********************************************************/
*                                                               03S0300
*         DO;                       /* ONE MISSING STORAGE RANGE     */
*           PL=MAX(PL,PH);          /* ->BYTE AFTER LOW ENTRY        */
         CLR   PL,PH                                            03S0301
         BNL   *+6
         LR    PL,PH                                            03S0301
*           RAMERLE(JL)=PL-RAMERIA(JL);/* LENGTH                     */
         LR    @15,PL                                           03S0302
         SL    @15,RAMERIA                                      03S0302
         ST    @15,RAMERLE                                      03S0302
*           CALL BLSRRA21;          /* DELETE THE HIGH ENTRY         */
         BAL   @14,BLSRRA21                                     03S0303
*         END;                      /* ONE MISSING STORAGE RANGE     */
*       ELSE                        /* HIGH ENTRY AVAILABLE          */
*                                                               03S0305
*         /***********************************************************/
*         /*                                                         */
*         /* HIGH ENTRY AVAILABLE                                    */
*         /*                                                         */
*         /***********************************************************/
*                                                               03S0305
*         DO;                       /* HIGH ENTRY AVAILABLE          */
         B     @RC00299                                         03S0305
@RF00299 DS    0H                                               03S0306
*           IF PL>PH THEN           /* SPLIT LOW ENTRY               */
*                                                               03S0306
         CLR   PL,PH                                            03S0306
         BNH   @RF00306                                         03S0306
*             /*******************************************************/
*             /*                                                     */
*             /* SPLIT LOW ENTRY                                     */
*             /*                                                     */
*             /*******************************************************/
*                                                               03S0307
*             DO;                   /* SPLIT LOW ENTRY               */
*               RAMER(JX)=RAMER(JL);/* NEW RABA ENTRY                */
         MVC   RAMER+64(32),RAMER                               03S0308
*               RAMERIA(JX)=PH;     /* FIRST BYTE DESCRIBED          */
         ST    PH,RAMERIA+64                                    03S0309
*               RAMERLE(JX)=PL-PH;  /* MISSING STORAGE LENGTH        */
         LR    @15,PL                                           03S0310
         SLR   @15,PH                                           03S0310
         ST    @15,RAMERLE+64                                   03S0310
*               CALL BLSRRA30;      /* ADD ENTRY TO RABA             */
         BAL   @14,BLSRRA30                                     03S0311
*             END;                  /* SPLIT LOW ENTRY               */
*           IF RAMERIA(JL)<RAMERIA(JH) THEN/* ELIMINATE ANY OVERLAP  */
*                                                               03S0313
@RF00306 L     @15,RAMERIA                                      03S0313
         L     @14,RAMERIA+32                                   03S0313
         CLR   @15,@14                                          03S0313
         BNL   @RF00313                                         03S0313
*             /*******************************************************/
*             /*                                                     */
*             /* ELIMINATE ANY OVERLAP BETWEEN ENTRIES               */
*             /*                                                     */
*             /*******************************************************/
*                                                               03S0314
*             DO;                   /* ELIMINATE ANY OVERLAP         */
*               PL=MIN(PL,RAMERIA(JH));/* ->BYTE AFTER LOW ENTRY     */
         CLR   PL,@14                                           03S0315
         BNH   *+6
         LR    PL,@14                                           03S0315
*               RAMERLE(JL)=PL-RAMERIA(JL);/* LENGTH OF DATA         */
         LCR   @15,@15                                          03S0316
         ALR   @15,PL                                           03S0316
         ST    @15,RAMERLE                                      03S0316
*               CALL BLSRRA10;      /* SEND LOW ENTRY TO OUTPUT      */
         BAL   @14,BLSRRA10                                     03S0317
*             END;                  /* ELIMINATE ANY OVERLAP         */
*           ELSE                    /* LOW ENTRY NOT INTERESTING     */
*             CALL BLSRRA20;        /* DELETE LOW ENTRY              */
         B     @RC00313                                         03S0319
@RF00313 BAL   @14,BLSRRA20                                     03S0319
*         END;                      /* HIGH ENTRY AVAILABLE          */
*       GO TO L020;                 /* CONTINUE MERGE PROCESSING     */
         B     L020                                             03S0321
*     END;                          /* LOW ENTRY=>MISSING STORAGE    */
         SPACE 1
*                                                               03S0323
*/*------------------------------------------------------------------*/
*/* PROCESS THE SITUATION WHERE THE LOW ENTRY DESCRIBES AVAILABLE    */
*/* AND THE HIGH ENTRY DESCRIBES MISSING STORAGE                     */
*/*------------------------------------------------------------------*/
*                                                               03S0323
*   IF RAMERFU(JH)=ZZZ1 THEN        /* HIGH ENTRY=>MISSING STORAGE   */
*                                                               03S0323
@RF00297 TM    RAMERFU+32,B'10000000'                           03S0323
         BNO   @RF00323                                         03S0323
*     /***************************************************************/
*     /*                                                             */
*     /* HIGH ENTRY DESCRIBES A MISSING STORAGE RANGE                */
*     /*                                                             */
*     /***************************************************************/
*                                                               03S0324
*     DO;                           /* HIGH ENTRY=>MISSING STORAGE   */
*       IF PL=RAMERIA(JH) THEN      /* COMPATIBLE ENTRIES            */
*                                                               03S0325
         CL    PL,RAMERIA+32                                    03S0325
         BNE   @RF00325                                         03S0325
*         /***********************************************************/
*         /*                                                         */
*         /* COMPATIBLE ENTRIES                                      */
*         /*                                                         */
*         /***********************************************************/
*                                                               03S0326
*         DO;                       /* COMPATIBLE ENTRIES            */
*           CALL BLSRRA10;          /* SEND LOW ENTRY TO OUTPUT      */
         BAL   @14,BLSRRA10                                     03S0327
*           GO TO L020;             /* CONTINUE MERGE PROCESSING     */
         B     L020                                             03S0328
*         END;                      /* COMPATIBLE ENTRIES            */
*       IF PL<PH THEN               /* ELIMINATE ANY OVERLAP         */
*                                                               03S0330
@RF00325 CLR   PL,PH                                            03S0330
         BNL   @RF00330                                         03S0330
*         /***********************************************************/
*         /*                                                         */
*         /* ELIMINATE ANY OVERLAP                                   */
*         /*                                                         */
*         /***********************************************************/
*                                                               03S0331
*         DO;                       /* ELIMINATE ANY OVERLAP         */
*           RAMER(JX)=RAMER(JH);    /* NEW RABA ENTRY                */
         MVC   RAMER+64(32),RAMER+32                            03S0332
*           RAMERIA(JX)=PL;         /* FIRST BYTE DESCRIBED          */
         ST    PL,RAMERIA+64                                    03S0333
*           RAMERLE(JX)=PH-PL;      /* MISSING STORAGE LENGTH        */
         LR    @15,PH                                           03S0334
         SLR   @15,PL                                           03S0334
         ST    @15,RAMERLE+64                                   03S0334
*           CALL BLSRRA30;          /* ADD ENTRY TO RABA             */
         BAL   @14,BLSRRA30                                     03S0335
*         END;                      /* ELIMINATE ANY OVERLAP         */
*       CALL BLSRRA21;              /* DELETE THE HIGH ENTRY         */
@RF00330 BAL   @14,BLSRRA21                                     03S0337
*       GO TO L020;                 /* CONTINUE MERGE PROCESSING     */
         B     L020                                             03S0338
*     END;                          /* HIGH ENTRY=>MISSING STORAGE   */
*                                                               03S0340
*/*------------------------------------------------------------------*/
*/* BLSRRA06--PROCESS ENTRIES WHEN BOTH ENTRIES DESCRIBE AVAILABLE   */
*/* STORAGE. ASSURE THAT ONE OR BOTH HAVE BEEN REMOVED FROM THE      */
*/* MERGE BUFFER PRIOR TO THE COMPLETION OF PROCESSING               */
*/*------------------------------------------------------------------*/
*                                                               03S0340
*   RESPECIFY                                                   03S0340
*    (R0,                           /* ALIGNMENT INDICATOR           */
*     R1) RESTRICTED;               /* INTERVENING RECORD COUNT      */
@RF00323 DS    0H                                               03S0341
*   R0=0;                           /* PREPARE FOR DIVISION          */
         SLR   R0,R0                                            03S0341
*   R1=RAMERIA(JH)-RAMERIA(JL);     /* INTERVENING BYTE COUNT        */
         L     R1,RAMERIA+32                                    03S0342
         SL    R1,RAMERIA                                       03S0342
*   GENERATE REFS(RAMERLE) CODE(D     R0,RAMERLE);              03S0343
         D     R0,RAMERLE
         SPACE 1
*                                                               03S0344
*/*------------------------------------------------------------------*/
*/* MERGE ENTRIES IF POSSIBLE. AFTER A CONSOLIDATED LOW ENTRY IS     */
*/* CONSTRUCTED, THE HIGH ENTRY CAN BE DELETED AND MERGE PROCESSING  */
*/* CAN CONTINUE                                                     */
*/*------------------------------------------------------------------*/
*                                                               03S0344
*   IF                              /* ENTRIES CAN BE MERGED         */
*       R0=0&                       /* ALIGNMENT INDICATED           */
*       (RAMERDA(JL)+R1)=RAMERDA(JH)&/* ADJACENT DISK RECORDS        */
*       PL<=PH&                     /* LOW ENTRY ENDS IN TIME        */
*       PL>=RAMERIA(JH)&            /* HIGH ENTRY BEGINS IN TIME     */
*       RAMERLE(JL)=RAMERLE(JH)&    /* SAME LENGTH OF DATA           */
*       RAMERF(JL)=RAMERF(JH)&      /* SAME FLAGS                    */
*       RAMEROF(JL)=RAMEROF(JH) THEN/* SAME DATA OFFSET              */
*                                                               03S0344
         LTR   R0,R0                                            03S0344
         BNZ   @RF00344                                         03S0344
         LR    @15,R1                                           03S0344
         AL    @15,RAMERDA                                      03S0344
         CL    @15,RAMERDA+32                                   03S0344
         BNE   @RF00344                                         03S0344
         CLR   PL,PH                                            03S0344
         BH    @RF00344                                         03S0344
         CL    PL,RAMERIA+32                                    03S0344
         BL    @RF00344                                         03S0344
         CLC   RAMERLE(4),RAMERLE+32                            03S0344
         BNE   @RF00344                                         03S0344
         CLC   RAMERF(2),RAMERF+32                              03S0344
         BNE   @RF00344                                         03S0344
         CLC   RAMEROF(4),RAMEROF+32                            03S0344
         BNE   @RF00344                                         03S0344
*     /***************************************************************/
*     /*                                                             */
*     /* MERGE ENTRIES                                               */
*     /*                                                             */
*     /***************************************************************/
*                                                               03S0345
*     DO;                           /* MERGE ENTRIES                 */
*       RAMERNM(JL)=R1+RAMERNM(JH); /* NUMBER OF RECORDS             */
         LR    @15,R1                                           03S0346
         AH    @15,RAMERNM+32                                   03S0346
         STH   @15,RAMERNM                                      03S0346
*       CALL BLSRRA21;              /* DELETE THE HIGH ENTRY         */
         BAL   @14,BLSRRA21                                     03S0347
*       GO TO L020;                 /* CONTINUE MERGE PROCESSING     */
         B     L020                                             03S0348
*     END;                          /* MERGE ENTRIES                 */
         SPACE 1
*                                                               03S0350
*/*------------------------------------------------------------------*/
*/* IF ENTRIES DO NOT OVERLAP, LOW ENTRY CAN BE TRANSMITTED,         */
*/* DELETED, AND MERGE PROCESSING CAN CONTINUE.                      */
*/*------------------------------------------------------------------*/
*                                                               03S0350
*   IF PL<=RAMERIA(JH) THEN         /* ENTRIES DO NOT OVERLAP        */
*                                                               03S0350
@RF00344 CL    PL,RAMERIA+32                                    03S0350
         BH    @RF00350                                         03S0350
*     /***************************************************************/
*     /*                                                             */
*     /* ENTRIES DO NOT OVERLAP                                      */
*     /*                                                             */
*     /***************************************************************/
*                                                               03S0351
*     DO;                           /* ENTRIES DO NOT OVERLAP        */
*       CALL BLSRRA10;              /* SEND LOW ENTRY TO OUTPUT      */
         BAL   @14,BLSRRA10                                     03S0352
*       GO TO L020;                 /* CONTINUE MERGE PROCESSING     */
         B     L020                                             03S0353
*     END;                          /* ENTRIES DO NOT OVERLAP        */
         SPACE 1
*                                                               03S0355
*/*------------------------------------------------------------------*/
*/* PREFER TO RETAIN LOW ENTRY INFORMATION IF IT DESCRIBES DATA AT   */
*/* A LOWER DATA SET ADDRESS THAN THAT DESCRIBED BY THE HIGH ENTRY   */
*/*------------------------------------------------------------------*/
*                                                               03S0355
*   J2=RAMERDA(JL)+R1;              /* FINAL LOW ENTRY RECORD   03S0355
*                                                            @ZA32782*/
@RF00350 LR    J2,R1                                            03S0355
         AL    J2,RAMERDA                                       03S0355
*   IF                              /* LOW ENTRY PREFERRED           */
*       J2<RAMERDA(JH)×             /* LOWER RECORD ADDRESS(ES)      */
*       (J2=RAMERDA(JH)&            /* SAME RECORD ADDRESS           */
*       RAMEROF(JL)<RAMEROF(JH)) THEN/* LOWER OFFSET IN RECORD       */
*                                                               03S0356
         L     @03,RAMERDA+32                                   03S0356
         CLR   J2,@03                                           03S0356
         BL    @RT00356                                         03S0356
         CLR   J2,@03                                           03S0356
         BNE   @RF00356                                         03S0356
         CLC   RAMEROF(4),RAMEROF+32                            03S0356
         BNL   @RF00356                                         03S0356
@RT00356 DS    0H                                               03S0357
*     /***************************************************************/
*     /*                                                             */
*     /* LOW ENTRY PREFERRRED                                        */
*     /*                                                             */
*     /***************************************************************/
*                                                               03S0357
*     DO;                           /* LOW ENTRY PREFERRED           */
*       IF PL>=PH THEN              /* DELETE HIGH ENTRY             */
*                                                               03S0358
         CLR   PL,PH                                            03S0358
         BL    @RF00358                                         03S0358
*         /***********************************************************/
*         /*                                                         */
*         /* DELETE HIGH ENTRY--LOW ENTRY DESCRIBES SAME STORAGE     */
*         /*                                                         */
*         /***********************************************************/
*                                                               03S0359
*         DO;                       /* DELETE THE HIGH ENTRY         */
*           CALL BLSRRA21;          /* DELETE THE HIGH ENTRY         */
         BAL   @14,BLSRRA21                                     03S0360
*           GO TO L020;             /* CONTINUE MERGE PROCESSING     */
         B     L020                                             03S0361
*         END;                      /* DELETE THE HIGH ENTRY         */
*       R0=0;                       /* PREPARE FOR DIVISION          */
@RF00358 SLR   R0,R0                                            03S0363
*       R1=PL-RAMERIA(JH);          /* INTERVENING BYTE COUNT        */
         LR    R1,PL                                            03S0364
         SL    R1,RAMERIA+32                                    03S0364
*       RAMERIA(JH)=PL;             /* ->FIRST BYTE                  */
         ST    PL,RAMERIA+32                                    03S0365
*       RESPECIFY                                               03S0366
*        (RF) RESTRICTED;           /* LENGTH OF HIGH ENTRY RECORD(S)*/
*       RF=RAMERLE(JH);             /* LENGTH OF HIGH ENTRY RECORD(S)*/
         L     RF,RAMERLE+32                                    03S0367
*       GENERATE REFS(RAMERLE) CODE(DR    R0,RF);               03S0368
         DR    R0,RF
*       RESPECIFY                                               03S0369
*        (RF) UNRESTRICTED;         /* LENGTH OF HIGH ENTRY RECORD(S)*/
*       RAMERNM(JH)=RAMERNM(JH)-R1; /* NUMBER OF RECORDS             */
         LH    @08,RAMERNM+32                                   03S0370
         SLR   @08,R1                                           03S0370
         STH   @08,RAMERNM+32                                   03S0370
*       RAMERDA(JH)=RAMERDA(JH)+R1; /* RECORD ADDRESS                */
         LR    @08,R1                                           03S0371
         AL    @08,RAMERDA+32                                   03S0371
         ST    @08,RAMERDA+32                                   03S0371
*       IF R0^=0 THEN               /* PARTIAL RECORD DESCRIBED      */
*                                                               03S0372
         LTR   R0,R0                                            03S0372
         BZ    @RF00372                                         03S0372
*         /***********************************************************/
*         /*                                                         */
*         /* PARTIAL RECORD DESCRIBED                                */
*         /*                                                         */
*         /***********************************************************/
*                                                               03S0373
*         DO;                       /* PARTIAL RECORD DESCRIBED      */
*           RAMER(JX)=RAMER(JH);    /* NEW RABA ENTRY                */
         MVC   RAMER+64(32),RAMER+32                            03S0374
*           RAMERLE(JX)=RAMERLE(JX)-R0;/* LENGTH OF DATA             */
         L     @08,RAMERLE+64                                   03S0375
         SLR   @08,R0                                           03S0375
         ST    @08,RAMERLE+64                                   03S0375
*           RAMEROF(JX)=RAMEROF(JX)+R0;/* OFFSET OF DATA             */
         LR    @08,R0                                           03S0376
         AL    @08,RAMEROF+64                                   03S0376
         ST    @08,RAMEROF+64                                   03S0376
*           RAMERNM(JX)=1;          /* NUMBER OF RECORDS             */
         MVC   RAMERNM+64(2),@CH00047                           03S0377
*           CALL BLSRRA30;          /* ADD ENTRY TO RABA             */
         BAL   @14,BLSRRA30                                     03S0378
*           RAMERIA(JH)=PL+RAMERLE(JX);/* ->FIRST BYTE               */
         LR    @08,PL                                           03S0379
         AL    @08,RAMERLE+64                                   03S0379
         ST    @08,RAMERIA+32                                   03S0379
*           RAMERNM(JH)=RAMERNM(JH)-1;/* NUMBER OF RECORDS           */
         LH    @08,RAMERNM+32                                   03S0380
         BCTR  @08,0                                            03S0380
         STH   @08,RAMERNM+32                                   03S0380
*           RAMERDA(JH)=RAMERDA(JH)+1;/* DISK RECORD                 */
         LA    @08,1                                            03S0381
         AL    @08,RAMERDA+32                                   03S0381
         ST    @08,RAMERDA+32                                   03S0381
*         END;                      /* PARTIAL RECORD DESCRIBED      */
*       IF RAMERNM(JH)^=0 THEN      /* WHOLE RECORD(S) DESCRIBED     */
*                                                               03S0383
@RF00372 ICM   @08,3,RAMERNM+32                                 03S0383
         BZ    @RF00383                                         03S0383
*         /***********************************************************/
*         /*                                                         */
*         /* WHOLE RECORD(S) DESCRIBED                               */
*         /*                                                         */
*         /***********************************************************/
*                                                               03S0384
*         DO;                       /* WHOLE RECORD(S) DESCRIBED     */
*           RAMER(JX)=RAMER(JH);    /* NEW RABA ENTRY                */
         MVC   RAMER+64(32),RAMER+32                            03S0385
*           CALL BLSRRA30;          /* ADD ENTRY TO RABA             */
         BAL   @14,BLSRRA30                                     03S0386
*         END;                      /* WHOLE RECORD(S) DESCRIBED     */
*       CALL BLSRRA21;              /* DELETE THE HIGH ENTRY         */
@RF00383 BAL   @14,BLSRRA21                                     03S0388
*       GO TO L020;                 /* CONTINUE MERGE PROCESSING     */
         B     L020                                             03S0389
*     END;                          /* LOW ENTRY PREFERRED           */
         SPACE 1
*                                                               03S0391
*/*------------------------------------------------------------------*/
*/* FORWARD THE DESCRIPTION OF WHOLE RECORD(S) DESCRIBED BY THE LOW  */
*/* ENTRY WHICH PRECEDE THE PART OF THE ADDRESS SPACE DESCRIBED BY   */
*/* THE HIGH ENTRY                                                   */
*/*------------------------------------------------------------------*/
*                                                               03S0391
*   RAMER(JX)=RAMER(JL);            /* NEW OUTPUT ENTRY              */
@RF00356 MVC   RAMER+64(32),RAMER                               03S0391
*   IF R1^=0 THEN                   /* WHOLE RECORD(S) DESCRIBED     */
*                                                               03S0392
         LTR   R1,R1                                            03S0392
         BZ    @RF00392                                         03S0392
*     /***************************************************************/
*     /*                                                             */
*     /* ONE OR MORE WHOLE RECORDS DESCRIBED                         */
*     /*                                                             */
*     /***************************************************************/
*                                                               03S0393
*     DO;                           /* WHOLE RECORD(S) DESCRIBED     */
*       RAMERNM(JX)=R1;             /* NUMBER OF RECORDS             */
         STH   R1,RAMERNM+64                                    03S0394
*       P1=RAMERIA(JH)-R0;          /* ->BYTE AFTER OUTPUT ENTRY     */
         L     P1,RAMERIA+32                                    03S0395
         SLR   P1,R0                                            03S0395
*       CALL BLSRRA11;              /* PROCESS NEW OUTPUT ENTRY      */
         BAL   @14,BLSRRA11                                     03S0396
*       RAMERIA(JX)=P1;             /* ->FIRST BYTE DESCRIBED        */
         ST    P1,RAMERIA+64                                    03S0397
*       RAMERDA(JX)=RAMERDA(JX)+R1; /* NEXT DISK ADDRESS             */
         LR    @15,R1                                           03S0398
         AL    @15,RAMERDA+64                                   03S0398
         ST    @15,RAMERDA+64                                   03S0398
*     END;                          /* WHOLE RECORD(S) DESCRIBED     */
         SPACE 1
*                                                               03S0400
*/*------------------------------------------------------------------*/
*/* FORWARD THE DESCRIPTION OF ANY PARTIAL RECORD DESCRIBED BY THE   */
*/* LOW ENTRY WHICH PRECEDES THE PART OF THE ADDRESS SPACE DESCRIBED */
*/* BY THE HIGH ENTRY                                                */
*/*------------------------------------------------------------------*/
*                                                               03S0400
*   IF R0^=0 THEN                   /* PARTIAL RECORD DESCRIBED      */
*                                                               03S0400
@RF00392 LTR   R0,R0                                            03S0400
         BZ    @RF00400                                         03S0400
*     /***************************************************************/
*     /*                                                             */
*     /* PARTIAL RECORD DESCRIBED                                    */
*     /*                                                             */
*     /***************************************************************/
*                                                               03S0401
*     DO;                           /* PARTIAL RECORD DESCRIBED      */
*       RAMERLE(JX)=R0;             /* LENGTH OF DATA                */
         ST    R0,RAMERLE+64                                    03S0402
*       RAMERNM(JX)=1;              /* ONE RECORD DESCRIBED          */
         MVC   RAMERNM+64(2),@CH00047                           03S0403
*       CALL BLSRRA11;              /* PROCESS NEW OUTPUT ENTRY      */
         BAL   @14,BLSRRA11                                     03S0404
*     END;                          /* PARTIAL RECORD DESCRIBED      */
         SPACE 1
*                                                               03S0406
*/*------------------------------------------------------------------*/
*/* IF THE LOW ENTRY DESCRIBES STORAGE THAT ENDS PRIOR TO THE END OF */
*/* THE STORAGE DESCRIBED BY THE HIGH ENTRY, THE LOW ENTRY CAN NOW   */
*/* BE DELETED, AND MERGE PROCESSING CAN CONTINUE                    */
*/*------------------------------------------------------------------*/
*                                                               03S0406
*   IF PL<=PH THEN                  /* LOW ENTRY PROCESSED           */
*                                                               03S0406
@RF00400 CLR   PL,PH                                            03S0406
         BH    @RF00406                                         03S0406
*     /***************************************************************/
*     /*                                                             */
*     /* LOW ENTRY COMPLETELY PROCESSED                              */
*     /*                                                             */
*     /***************************************************************/
*                                                               03S0407
*     DO;                           /* LOW ENTRY PROCESSED           */
*       CALL BLSRRA20;              /* DELETE THE LOW ENTRY          */
         BAL   @14,BLSRRA20                                     03S0408
*       GO TO L020;                 /* CONTINUE MERGE PROCESSING     */
         B     L020                                             03S0409
*     END;                          /* LOW ENTRY PROCESSED           */
         SPACE 1
*                                                               03S0411
*/*------------------------------------------------------------------*/
*/* LOW ENTRY SPANS HIGH ENTRY                                       */
*/*------------------------------------------------------------------*/
*                                                               03S0411
*   R0=0;                           /* PREPARE FOR DIVISION          */
@RF00406 SLR   R0,R0                                            03S0411
*   R1=PH-RAMERIA(JL);              /* INTERVENING BYTE COUNT        */
         LR    R1,PH                                            03S0412
         SL    R1,RAMERIA                                       03S0412
*   GENERATE REFS(RAMERLE) CODE(D     R0,RAMERLE);              03S0413
         D     R0,RAMERLE
*   RAMERIA(JL)=PH;                 /* ->FIRST BYTE DESCRIBED        */
         ST    PH,RAMERIA                                       03S0414
*   RAMERDA(JL)=RAMERDA(JL)+R1;     /* RECORD ADDRESS                */
         LR    @07,R1                                           03S0415
         AL    @07,RAMERDA                                      03S0415
         ST    @07,RAMERDA                                      03S0415
*   RAMERNM(JL)=RAMERNM(JL)-R1;     /* NUMBER OF RECORDS             */
         LH    @07,RAMERNM                                      03S0416
         SLR   @07,R1                                           03S0416
         STH   @07,RAMERNM                                      03S0416
         SPACE 1
*                                                               03S0417
*/*------------------------------------------------------------------*/
*/* FORWARD THE DESCRIPTION OF ANY PARTIAL RECORD DESCRIBED BY THE   */
*/* LOW ENTRY WHICH FOLLOWS THE PART OF THE ADDRESS SPACE DESCRIBED  */
*/* BY THE HIGH ENTRY                                                */
*/*------------------------------------------------------------------*/
*                                                               03S0417
*   IF R0^=0 THEN                   /* PARTIAL RECORD DESCRIBED      */
*                                                               03S0417
         LTR   R0,R0                                            03S0417
         BZ    @RF00417                                         03S0417
*     /***************************************************************/
*     /*                                                             */
*     /* PARTIAL RECORD DESCRIBED                                    */
*     /*                                                             */
*     /***************************************************************/
*                                                               03S0418
*     DO;                           /* PARTIAL RECORD DESCRIBED      */
*       RAMER(JX)=RAMER(JL);        /* NEW RABA ENTRY                */
         MVC   RAMER+64(32),RAMER                               03S0419
*       RAMERLE(JX)=RAMERLE(JX)-R0; /* LENGTH OF DATA                */
         L     @07,RAMERLE+64                                   03S0420
         SLR   @07,R0                                           03S0420
         ST    @07,RAMERLE+64                                   03S0420
*       RAMEROF(JX)=RAMEROF(JX)+R0; /* OFFSET OF DATA                */
         LR    @07,R0                                           03S0421
         AL    @07,RAMEROF+64                                   03S0421
         ST    @07,RAMEROF+64                                   03S0421
*       RAMERNM(JX)=1;              /* ONE RECORD DESCRIBED          */
         MVC   RAMERNM+64(2),@CH00047                           03S0422
*       CALL BLSRRA30;              /* ADD ENTRY TO RABA             */
         BAL   @14,BLSRRA30                                     03S0423
*       RAMERIA(JL)=PH+RAMERLE(JX); /* ->FIRST BYTE DESCRIBED        */
         LR    @07,PH                                           03S0424
         AL    @07,RAMERLE+64                                   03S0424
         ST    @07,RAMERIA                                      03S0424
*       RAMERDA(JL)=RAMERDA(JL)+1;  /* RECORD ADDRESS                */
         LA    @07,1                                            03S0425
         AL    @07,RAMERDA                                      03S0425
         ST    @07,RAMERDA                                      03S0425
*       RAMERNM(JL)=RAMERNM(JL)-1;  /* NUMBER OF RECORDS             */
         LH    @07,RAMERNM                                      03S0426
         BCTR  @07,0                                            03S0426
         STH   @07,RAMERNM                                      03S0426
*     END;                          /* PARTIAL RECORD DESCRIBED      */
         SPACE 1
*                                                               03S0428
*/*------------------------------------------------------------------*/
*/* FORWARD THE DESCRIPTION OF ANY WHOLE RECORD(S) DESCRIBED BY THE  */
*/* LOW ENTRY WHICH FOLLOWS THE PART OF THE ADDRESS SPACE DESCRIBED  */
*/* BY THE HIGH ENTRY                                                */
*/*------------------------------------------------------------------*/
*                                                               03S0428
*   IF RAMERNM(JL)^=0 THEN          /* WHOLE RECORD(S) DESCRIBED     */
*                                                               03S0428
@RF00417 ICM   @07,3,RAMERNM                                    03S0428
         BZ    @RF00428                                         03S0428
*     /***************************************************************/
*     /*                                                             */
*     /* WHOLE RECORD(S) DESCRIBED                                   */
*     /*                                                             */
*     /***************************************************************/
*                                                               03S0429
*     DO;                           /* WHOLE RECORD(S) DESCRIBED     */
*       RAMER(JX)=RAMER(JL);        /* NEW RABA ENTRY                */
         MVC   RAMER+64(32),RAMER                               03S0430
*       CALL BLSRRA30;              /* ADD ENTRY TO RABA             */
         BAL   @14,BLSRRA30                                     03S0431
*     END;                          /* PARTIAL RECORD DESCRIBED      */
*   CALL BLSRRA20;                  /* DELETE THE LOW ENTRY          */
@RF00428 BAL   @14,BLSRRA20                                     03S0433
*   RESPECIFY                                                   03S0434
*    (R0,                           /* ALIGNMENT INDICATOR           */
*     R1) UNRESTRICTED;             /* INTERVENING RECORD COUNT      */
*L020:                              /* CONTINUE MERGE PROCESSING     */
*   END;                            /* PROCESS RA RECORDS            */
L020     DS    0H                                               02S0435
@DE00182 TM    FLAGERR,B'01000000'                              02S0435
         BNZ   @DC00182                                         02S0435
         SLR   @15,@15                                          02S0435
         CL    @15,JP                                           02S0435
         BNE   @DL00182                                         02S0435
         TM    FLAGEOF,B'10000000'                              02S0435
         BZ    @DL00182                                         02S0435
         CLC   RAMEUSE(2),@CH00047                              02S0435
         BH    @DL00182                                         02S0435
         L     @14,RABAP                                        02S0435
         CR    @14,@15                                          02S0435
         BE    @DC00182                                         02S0435
         CH    @15,RABAUSE(,@14)                                02S0435
         BNE   @DL00182                                         02S0435
@DC00182 DS    0H                                               02S0436
*                                                               02S0436
*/*------------------------------------------------------------------*/
*/* BLSRRA09--BLSRRAAR TERMINATION                                   */
*/*------------------------------------------------------------------*/
*                                                               02S0436
*   RAADUSE=RAADUSE+1;              /* ENTRIES IN USE                */
         LH    @06,RAADUSE                                      02S0436
         LA    @06,1(,@06)                                      02S0436
         STH   @06,RAADUSE                                      02S0436
*   RAADR(RAADUSE)=RAMER(JL);       /* FINAL RECORD ENTRY            */
         LR    @15,@06                                          02S0437
         SLA   @15,5                                            02S0437
         LA    @14,RAADR-32(@15)                                02S0437
         MVC   0(32,@14),RAMER                                  02S0437
*   RAADFAD=ZZZP31MX;               /* ->FINAL BYTE SUPPORTED        */
         MVC   RAADFAD(4),@CF00127                              02S0438
*   RAADDIM=MAX(RAADUSE,RAADLDI);   /* ENTRIES IN FINAL RECORD       */
         LA    @15,3                                            02S0439
         CR    @15,@06                                          02S0439
         BNL   *+6
         LR    @15,@06                                          02S0439
         STH   @15,RAADDIM                                      02S0439
*   IF RAADUSE^=RAADHDI THEN        /* SHORT RECORD                  */
*                                                               02S0440
         CH    @06,@CH00191                                     02S0440
         BE    @RF00440                                         02S0440
*     /***************************************************************/
*     /*                                                             */
*     /* SHORT RECORD                                                */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0441
*     DO;                           /* SHORT RECORD                  */
*       RESPECIFY                                               02S0442
*        (R6) RESTRICTED;           /* RECORD LENGTH                 */
*       R6=RAAD0RL+RAADDIM*LENGTH(RAADR);/* RECORD LENGTH            */
         SLA   @15,5                                            02S0443
         AH    @15,@CH00187                                     02S0443
         LR    R6,@15                                           02S0443
*       GENERATE SETS(MODPRMA) CODE                             02S0444
*           (MODCB RPL=(S,MYRPLA),RECLEN=(R6),MF=(L,MODPRMA,MODPRMAL));
         MODCB RPL=(S,MYRPLA),RECLEN=(R6),MF=(L,MODPRMA,MODPRMAL)
*       RESPECIFY                                               02S0445
*        (R6) UNRESTRICTED;         /* RECORD LENGTH                 */
*       RESPECIFY                                               02S0446
*        (RF) RESTRICTED;           /* BLSUVSMR RETURN CODE          */
*       CALL BLSUVSMR(ZZ2,MODPRMA); /* MODIFY AN RPL FOR ADDITION    */
         ST    R9,@AL00001                                      02S0447
         LA    @14,MODPRMA                                      02S0447
         ST    @14,@AL00001+4                                   02S0447
         L     @06,ZZ2BVTP(,R9)                                 02S0447
         L     @15,BVTVSMRP(,@06)                               02S0447
         LA    @01,@AL00001                                     02S0447
         BALR  @14,@15                                          02S0447
*       IF RF^=ZZZFLAGI THEN        /* BLSUVSMR DETECTED AN ERROR    */
         LTR   RF,RF                                            02S0448
         BNZ   @RT00448                                         02S0448
*         GO TO ERREXIT;            /* ERROR EXIT                    */
*       RESPECIFY                                               02S0450
*        (RF) UNRESTRICTED;         /* BLSUVSMR RETURN CODE          */
*     END;                          /* SHORT RECORD                  */
*   CALL BLSRRA12;                  /* WRITE THE OUTPUT BUFFER       */
@RF00440 BAL   @14,BLSRRA12                                     02S0452
*   IF FLAGSCAN=ZZZ1 THEN           /* TERMINATE SEQUENTIAL SCAN     */
*                                                               02S0453
         TM    FLAGSCAN,B'00100000'                             02S0453
         BNO   @RF00453                                         02S0453
*     /***************************************************************/
*     /*                                                             */
*     /* TERMINATE SEQUENTIAL SCAN                                   */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0454
*     DO;                           /* TERMINATE SEQUENTIAL SCAN     */
*       RESPECIFY                                               02S0455
*        (RF) RESTRICTED;           /* BLSUVSEN RETURN CODE          */
*       CALL BLSUVSEN(ZZ2,MYRPLU);  /* TERMINATE SCAN                */
         ST    R9,@AL00001                                      02S0456
         LA    @14,MYRPLU                                       02S0456
         ST    @14,@AL00001+4                                   02S0456
         L     @08,ZZ2BVTP(,R9)                                 02S0456
         L     @15,BVTVSENP(,@08)                               02S0456
         LA    @01,@AL00001                                     02S0456
         BALR  @14,@15                                          02S0456
*       IF RF^=ZZZFLAGI THEN        /* BLSUVSEN DETECTED AN ERROR    */
         LTR   RF,RF                                            02S0457
         BZ    @RF00457                                         02S0457
*         FLAGERR=ZZZ1;             /* AN ERROR HAS BEEN DETECTED    */
         OI    FLAGERR,B'01000000'                              02S0458
*       RESPECIFY                                               02S0459
*        (RF) UNRESTRICTED;         /* BLSUVSEN RETURN CODE          */
@RF00457 DS    0H                                               02S0460
*     END;                          /* TERMINATE SEQUENTIAL SCAN     */
*EXIT:                              /* COMMON EXIT PATH              */
*   IF FLAGERR=ZZZ0 THEN            /* NO ERRORS DETECTED            */
@RF00453 DS    0H                                               02S0461
EXIT     TM    FLAGERR,B'01000000'                              02S0461
         BNZ   @RF00461                                         02S0461
*     RETC=ZZZFLAGI;                /* RETURN CODE                   */
         SLR   RETC,RETC                                        02S0462
*   ELSE                            /* AN ERROR HAS BEEN DETECTED    */
*ERREXIT:                           /* ERROR EXIT                    */
*     RETC=ZZZFLAGT;                /* RETURN CODE                   */
         B     @RC00461                                         02S0463
@RF00461 DS    0H                                               02S0463
ERREXIT  LA    RETC,16                                          02S0463
*   IF RABAP^=ZZZZNULL THEN         /* RABA HAS BEEN ALLOCATED       */
@RC00461 L     @08,RABAP                                        02S0464
         LTR   @08,@08                                          02S0464
         BZ    @RF00464                                         02S0464
*      DO; /*FREEMAIN(RU) LV(RABA0RL+RABADIM*LENGTH(RABAR))A(RABA) SP(Z
*ZSPEXC)*/                                                      02S0465
*      RESPECIFY (GPR01F,GPR15F,GPR00F) RESTRICTED;             02S0466
*      GPR01F = 0; /* REG 1 MUST BE ZERO*/                      02S0467
         SLR   GPR01F,GPR01F                                    02S0467
*      GPR15F=3; /*SET TYPE*/                                   02S0468
         LA    GPR15F,3                                         02S0468
*      GPR00F = RABA0RL+RABADIM*LENGTH(RABAR); /* LENGTH REQUESTED*/
         LH    GPR00F,RABADIM(,@08)                             02S0469
         SLA   GPR00F,5                                         02S0469
         AH    GPR00F,@CH00187                                  02S0469
*      GPR01F=ADDR(RABA); /*SET REGISTER ONE*/                  02S0470
         LR    GPR01F,@08                                       02S0470
*      GPR15F=GPR15F+((ZZZSPEXC)*256); /* SUBPOOL VALUE*/       02S0471
         AH    GPR15F,@CH00281                                  02S0471
*      SVC(120); /*RC/RU-FORM OF GETMAIN*/                      02S0472
         SVC   120                                              02S0472
*      RESPECIFY (GPR01F,GPR15F,GPR00F) UNRESTRICTED;           02S0473
*      END; /*FREEMAIN(RU) LV(RABA0RL+RABADIM*LENGTH(RABAR))A(RABA) SP(
*ZZSPEXC)*/                                                     02S0474
*   RETURN CODE(RETC);                                          02S0475
@RF00464 L     @13,4(,@13)                                      02S0475
         L     @00,@SIZDATD                                     02S0475
         LR    @01,@11                                          02S0475
         BLSUFRES R,LV=(0),A=(1)
         LR    @15,@04                                          02S0475
         L     @14,12(,@13)                                     02S0475
         LM    @00,@12,20(@13)                                  02S0475
         BR    @14                                              02S0475
*                                                               02S0476
*/*------------------------------------------------------------------*/
*/* BLSRRA10--BLSRRAAR SUBROUTINES CONCERNED WITH OUTPUT             */
*/*------------------------------------------------------------------*/
*/* BLSRRA10--SEND THE LOW ENTRY TO OUTPUT                           */
*/*------------------------------------------------------------------*/
*                                                               02S0476
*BLSRRA10:                          /* SEND THE LOW ENTRY TO OUTPUT  */
*   PROCEDURE;                                                  02S0476
BLSRRA10 STM   @14,@06,@SA00002                                 02S0476
         STM   @09,@12,@SA00002+36                              02S0476
*   RAMER(JX)=RAMER(JL);            /* NEW OUTPUT ENTRY              */
         MVC   RAMER+64(32),RAMER                               02S0477
*   CALL BLSRRA20;                  /* DELETE THE LOW ENTRY          */
         BAL   @14,BLSRRA20                                     02S0478
         SPACE 1
*                                                               02S0479
*/*------------------------------------------------------------------*/
*/* BLSRRA11--PROCESS NEW OUTPUT ENTRY                               */
*/*------------------------------------------------------------------*/
*                                                               02S0479
*BLSRRA11:                          /* PROCESS NEW OUTPUT ENTRY      */
*   ENTRY;                                                      02S0479
         B     @EC00479                                         02S0479
BLSRRA11 STM   @14,@06,@SA00002                                 02S0479
         STM   @09,@12,@SA00002+36                              02S0479
@EC00479 DS    0H                                               02S0480
*   RAADUSE=RAADUSE+1;              /* ENTRIES IN USE                */
         LH    @06,RAADUSE                                      02S0480
         LA    @06,1(,@06)                                      02S0480
         STH   @06,RAADUSE                                      02S0480
*   RAADR(RAADUSE)=RAMER(JX);       /* FINAL RECORD ENTRY            */
         LR    @15,@06                                          02S0481
         SLA   @15,5                                            02S0481
         LA    @14,RAADR-32(@15)                                02S0481
         MVC   0(32,@14),RAMER+64                               02S0481
*   IF RAADUSE=RAADHDI THEN         /* ADD NEW RECORD                */
*                                                               02S0482
         LA    @15,94                                           02S0482
         CR    @06,@15                                          02S0482
         BNE   @RF00482                                         02S0482
*     /***************************************************************/
*     /*                                                             */
*     /* ADD A NEW ADDRESS SPACE RECORD TO THE DEBUG CLUSTER         */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0483
*     DO;                           /* ADD NEW RECORD                */
*       RAADDIM=RAADHDI;            /* ENTRIES IN CAPACITY RECORD    */
         STH   @15,RAADDIM                                      02S0484
*       RAADFAD=                    /* ->FINAL BYTE DESCRIBED        */
*           RAADRIA(RAADHDI)+RAADRLE(RAADHDI)*RAADRNM(RAADHDI)-1;
         L     @06,RAADRLE+2976                                 02S0485
         MH    @06,RAADRNM+2976                                 02S0485
         AL    @06,RAADRIA+2976                                 02S0485
         BCTR  @06,0                                            02S0485
         ST    @06,RAADFAD                                      02S0485
         SPACE 1
*                                                               02S0486
*/*------------------------------------------------------------------*/
*/* BLSRRA12--WRITE THE OUTPUT BUFFER                                */
*/*------------------------------------------------------------------*/
*                                                               02S0486
*BLSRRA12:                          /* WRITE THE OUTPUT BUFFER       */
*       ENTRY;                                                  02S0486
         B     @EC00486                                         02S0486
BLSRRA12 STM   @14,@06,@SA00002                                 02S0486
         STM   @09,@12,@SA00002+36                              02S0486
@EC00486 DS    0H                                               02S0487
*       IF FLAGSCAN=ZZZ1 THEN       /* SEQUENTIAL SCAN ACTIVE        */
*                                                               02S0487
         TM    FLAGSCAN,B'00100000'                             02S0487
         BNO   @RF00487                                         02S0487
*         /***********************************************************/
*         /*                                                         */
*         /* SEQUENTIAL SCAN ACTIVE                                  */
*         /*                                                         */
*         /***********************************************************/
*                                                               02S0488
*         DO;                       /* SEQUENTIAL SCAN ACTIVE        */
*           IF RAUP(1:ZZZVSKL)=RAAD(1:ZZZVSKL) THEN/* REPLACE RECORD */
*                                                               02S0489
         CLC   RAUP(128),RAAD                                   02S0489
         BNE   @RF00489                                         02S0489
*             /*******************************************************/
*             /*                                                     */
*             /* REPLACE RECORD                                      */
*             /*                                                     */
*             /*******************************************************/
*                                                               02S0490
*             DO;                   /* REPLACE RECORD                */
*               RESPECIFY           /* BEFORE MVCL                   */
*                (R0,               /* ->UPDATED ENTRIES             */
*                 R1,               /* LENGTH OF UPDATED ENTRIES     */
*                 RE,               /* ->OUTPUT ENTRIES              */
*                 RF) RESTRICTED;   /* LENGTH OF OUTPUT ENTRIES      */
*               R0=ADDR(RAUPR(1));  /* ->UPDATED ENTRIES             */
         LA    R0,RAUPR                                         02S0492
*               R1=RAUPUSE*LENGTH(RAUPR);/* LENGTH OF UPDATED ENTRIES*/
         LH    R1,RAUPUSE                                       02S0493
         SLA   R1,5                                             02S0493
*               RE=ADDR(RAADR(1));  /* ->OUTPUT ENTRIES              */
         LA    RE,RAADR                                         02S0494
*               RF=R1;              /* LENGTH OF OUTPUT ENTRIES      */
         LR    RF,R1                                            02S0495
*               MVCL(R0,RE);        /* COPY OUTPUT ENTRIES           */
         MVCL  R0,RE                                            02S0496
*               RESPECIFY           /* AFTER MVCL                    */
*                (R0,               /* DESTROYED                     */
*                 R1,               /* 0                             */
*                 RE) UNRESTRICTED; /* DESTROYED                     */
*               CALL BLSUVSPU(ZZ2,MYRPLU);/* REPLACE RAUP            */
         ST    R9,@AL00001                                      02S0498
         LA    @14,MYRPLU                                       02S0498
         ST    @14,@AL00001+4                                   02S0498
         L     @06,ZZ2BVTP(,R9)                                 02S0498
         L     @15,BVTVSPUP(,@06)                               02S0498
         LA    @01,@AL00001                                     02S0498
         BALR  @14,@15                                          02S0498
*               IF RF^=ZZZFLAGI THEN/* BLSUVSPU DETECTED AN ERROR    */
         LTR   RF,RF                                            02S0499
         BZ    @RF00499                                         02S0499
*                 FLAGERR=ZZZ1;     /* AN ERROR HAS BEEN DETECTED    */
         OI    FLAGERR,B'01000000'                              02S0500
*               RESPECIFY                                       02S0501
*                (RF) UNRESTRICTED; /* BLSUVSPU RETURN CODE          */
@RF00499 DS    0H                                               02S0502
*             END;                  /* REPLACE RECORD                */
*           ELSE                    /* TERMINATE SEQUENTIAL SCAN     */
*                                                               02S0503
*             /*******************************************************/
*             /*                                                     */
*             /* TERMINATE SEQUENTIAL SCAN. A NEW RECORD MUST BE     */
*             /* ADDED, PROBABLY TO THE SAME CONTROL INTERVAL AS THAT*/
*             /* FROM WHICH RAUP WAS OBTAINED                        */
*             /*                                                     */
*             /*******************************************************/
*                                                               02S0503
*             DO;                   /* TERMINATE SEQUENTIAL SCAN     */
         B     @RC00489                                         02S0503
@RF00489 DS    0H                                               02S0504
*               RESPECIFY                                       02S0504
*                (RF) RESTRICTED;   /* RETURN CODES                  */
*               IF RAUPRID=ZZZRIDRA&RAUPAS=RAADAS THEN/* ERASE RECORD*/
*                                                               02S0505
         CLC   RAUPRID(2),@CC00136                              02S0505
         BNE   @RF00505                                         02S0505
         CLC   RAUPAS(16),RAADAS                                02S0505
         BNE   @RF00505                                         02S0505
*                 /***************************************************/
*                 /*                                                 */
*                 /* ERASE RECORD HELD FOR UPDATE. THE INFORMATION IN*/
*                 /* IT WILL BE DISTRIBUTED TO ONE OR MORE NEW       */
*                 /* RECORDS                                         */
*                 /*                                                 */
*                 /***************************************************/
*                                                               02S0506
*                 DO;               /* ERASE RECORD HELD FOR UPDATE  */
*                   CALL BLSUVSER(ZZ2,MYRPLU);/* ERASE RAUP          */
         ST    R9,@AL00001                                      02S0507
         LA    @14,MYRPLU                                       02S0507
         ST    @14,@AL00001+4                                   02S0507
         L     @06,ZZ2BVTP(,R9)                                 02S0507
         L     @15,BVTVSERP(,@06)                               02S0507
         LA    @01,@AL00001                                     02S0507
         BALR  @14,@15                                          02S0507
*                   IF RF^=ZZZFLAGI THEN/* BLSUVSER DETECTED AN ERROR*/
         LTR   RF,RF                                            02S0508
         BZ    @RF00508                                         02S0508
*                     FLAGERR=ZZZ1; /* AN ERROR HAS BEEN DETECTED    */
         OI    FLAGERR,B'01000000'                              02S0509
*                 END;              /* ERASE RECORD HELD FOR UPDATE  */
@RF00508 DS    0H                                               02S0511
*               FLAGSCAN=ZZZ0;      /* SEQUENTIAL SCAN INACTIVE      */
@RF00505 NI    FLAGSCAN,B'11011111'                             02S0511
*               CALL BLSUVSEN(ZZ2,MYRPLU);/* TERMINATE SCAN          */
         ST    R9,@AL00001                                      02S0512
         LA    @14,MYRPLU                                       02S0512
         ST    @14,@AL00001+4                                   02S0512
         L     @06,ZZ2BVTP(,R9)                                 02S0512
         L     @15,BVTVSENP(,@06)                               02S0512
         LA    @01,@AL00001                                     02S0512
         BALR  @14,@15                                          02S0512
*               IF RF^=ZZZFLAGI THEN/* BLSUVSEN DETECTED AN ERROR    */
         LTR   RF,RF                                            02S0513
         BZ    @RF00513                                         02S0513
*                 FLAGERR=ZZZ1;     /* AN ERROR HAS BEEN DETECTED    */
         OI    FLAGERR,B'01000000'                              02S0514
*               RESPECIFY                                       02S0515
*                (RF) UNRESTRICTED; /* RETURN CODES                  */
@RF00513 DS    0H                                               02S0516
*             END;                  /* TERMINATE SEQUENTIAL SCAN     */
*         END;                      /* SEQUENTIAL SCAN ACTIVE        */
@RC00489 DS    0H                                               02S0518
*       IF FLAGSCAN=ZZZ0 THEN       /* SEQUENTIAL SCAN INACTIVE      */
*                                                               02S0518
@RF00487 TM    FLAGSCAN,B'00100000'                             02S0518
         BNZ   @RF00518                                         02S0518
*         /***********************************************************/
*         /*                                                         */
*         /* SEQUENTIAL SCAN INACTIVE                                */
*         /*                                                         */
*         /***********************************************************/
*                                                               02S0519
*         DO;                       /* SEQUENTIAL SCAN INACTIVE      */
*           RESPECIFY                                           02S0520
*            (RF) RESTRICTED;       /* BLSUVSPU RETURN CODE          */
*           CALL BLSUVSPU(ZZ2,MYRPLA);/* ADD AN ADDRESS SPACE RECORD */
         ST    R9,@AL00001                                      02S0521
         LA    @14,MYRPLA                                       02S0521
         ST    @14,@AL00001+4                                   02S0521
         L     @06,ZZ2BVTP(,R9)                                 02S0521
         L     @15,BVTVSPUP(,@06)                               02S0521
         LA    @01,@AL00001                                     02S0521
         BALR  @14,@15                                          02S0521
*           IF RF^=ZZZFLAGI THEN    /* BLSUVSPU DETECTED AN ERROR    */
         LTR   RF,RF                                            02S0522
         BZ    @RF00522                                         02S0522
*             FLAGERR=ZZZ1;         /* AN ERROR HAS BEEN DETECTED    */
         OI    FLAGERR,B'01000000'                              02S0523
*           RESPECIFY                                           02S0524
*            (RF) UNRESTRICTED;     /* BLSUVSPU RETURN CODE          */
@RF00522 DS    0H                                               02S0525
*         END;                      /* SEQUENTIAL SCAN INACTIVE      */
*       RAADUSE=0;                  /* ENTRIES IN USE                */
@RF00518 SLR   @06,@06                                          02S0526
         STH   @06,RAADUSE                                      02S0526
*     END;                          /* ADD NEW RECORD                */
*   RETURN;                         /* CONTINUE MERGE PROCESSING     */
@EL00002 DS    0H                                               02S0528
@EF00002 DS    0H                                               02S0528
@ER00002 LM    @14,@06,@SA00002                                 02S0528
         LM    @09,@12,@SA00002+36                              02S0528
         BR    @14                                              02S0528
*   END BLSRRA10;                   /* ADD DATA TO OUTPUT BUFFER     */
         B     @EL00002                                         02S0529
*                                                               02S0530
*/*------------------------------------------------------------------*/
*/* BLSRRA20--BLSRRAAR ENTRY DELETION SUBROUTINES                    */
*/*------------------------------------------------------------------*/
*/* BLSRRA20--DELETE THE LOW ENTRY                                   */
*/*------------------------------------------------------------------*/
*                                                               02S0530
*BLSRRA20:                          /* DELETE THE LOW ENTRY          */
*   PROCEDURE;                                                  02S0530
BLSRRA20 STM   @14,@06,12(@13)                                  02S0530
         STM   @09,@12,56(@13)                                  02S0530
*   PL=PH;                          /* ->BYTE AFTER LOW ENTRY        */
         LR    PL,PH                                            02S0531
*   RAMER(JL)=RAMER(JH);            /* LOW ENTRY                     */
         MVC   RAMER(32),RAMER+32                               02S0532
*   RAMEUSE=RAMEUSE-1;              /* ENTRIES IN USE                */
         LH    @06,RAMEUSE                                      02S0533
         BCTR  @06,0                                            02S0533
         STH   @06,RAMEUSE                                      02S0533
*   RETURN;                                                     02S0534
@EL00003 DS    0H                                               02S0534
@EF00003 DS    0H                                               02S0534
@ER00003 LM    @14,@06,12(@13)                                  02S0534
         LM    @09,@12,56(@13)                                  02S0534
         BR    @14                                              02S0534
         SPACE 1
*                                                               02S0535
*/*------------------------------------------------------------------*/
*/* BLSRRA21--DELETE THE HIGH ENTRY                                  */
*/*------------------------------------------------------------------*/
*                                                               02S0535
*BLSRRA21:                          /* DELETE THE HIGH ENTRY         */
*   ENTRY;                                                      02S0535
BLSRRA21 STM   @14,@06,12(@13)                                  02S0535
         STM   @09,@12,56(@13)                                  02S0535
*   PH=PL;                          /* ->BYTE AFTER HIGH ENTRY       */
         LR    PH,PL                                            02S0536
*   RAMER(JH)=RAMER(JL);            /* HIGH ENTRY                    */
         MVC   RAMER+32(32),RAMER                               02S0537
*   RAMEUSE=RAMEUSE-1;              /* ENTRIES IN USE                */
         LH    @06,RAMEUSE                                      02S0538
         BCTR  @06,0                                            02S0538
         STH   @06,RAMEUSE                                      02S0538
*   RETURN;                                                     02S0539
         B     @EL00003                                         02S0539
*   END BLSRRA20;                                               02S0540
*                                                               02S0541
*/*------------------------------------------------------------------*/
*/* BLSRRA30--BLSRRAAR SUBROUTINE TO ADD AN ENTRY TO RABA            */
*/*------------------------------------------------------------------*/
*                                                               02S0541
*BLSRRA30:                          /* PROCESS NEW RABA ENTRY        */
*   PROCEDURE;                                                  02S0541
BLSRRA30 STM   @14,@12,12(@13)                                  02S0541
*   RABAP2=ADDR(RABA);              /* ->RABA (LOCAL)                */
         L     RABAP2,RABAP                                     02S0542
*   RESPECIFY                                                   02S0543
*     RABA BASED(RABAP2);           /* LOCAL BASE FOR RECORD         */
*   IF RABAP2=ZZZZNULL THEN         /* RABA MUST BE ALLOCATED        */
*                                                               02S0544
         LTR   RABAP2,RABAP2                                    02S0544
         BNZ   @RF00544                                         02S0544
*     /***************************************************************/
*     /*                                                             */
*     /* RABA MUST BE ALLOCATED                                      */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0545
*     DO;                           /* RABA MUST BE ALLOCATED        */
*       RESPECIFY                                               02S0546
*        (R1) RESTRICTED;           /* ->STORAGE OBTAINED FOR RABA   */
*        DO; /*GETMAIN (RU) LV(RABAHRL) SP(ZZZSPEXC)*/          02S0547
*        RESPECIFY (GPR01F,GPR15F,GPR00F) RESTRICTED;           02S0548
*        GPR01F = 0; /* REG 1 MUST BE ZERO*/                    02S0549
         SLR   GPR01F,GPR01F                                    02S0549
*        GPR15F = 2; /* RU-TYPE GETMAIN */                      02S0550
         LA    GPR15F,2                                         02S0550
*        GPR00F = RABAHRL; /* LENGTH REQUESTED*/                02S0551
         LA    GPR00F,3060                                      02S0551
*        GPR15F = GPR15F×((ZZZSPEXC)*256); /* SP IN BYTE 2 */   02S0552
         O     GPR15F,@CF00281                                  02S0552
*        SVC(120); /*RC/RU-FORM OF GETMAIN*/                    02S0553
         SVC   120                                              02S0553
*        RESPECIFY (GPR01F,GPR15F,GPR00F) UNRESTRICTED;         02S0554
*        END; /*GETMAIN (RU) LV(RABAHRL) SP(ZZZSPEXC)*/         02S0555
*       RABAP2=R1;                  /* ->RABA                        */
         LR    RABAP2,R1                                        02S0556
*       RESPECIFY                                               02S0557
*        (R1) UNRESTRICTED;         /* ->STORAGE OBTAINED FOR RABA   */
*       RABA(1:LENGTH(RACO))=RACO;  /* RA RECORD BASE                */
         L     @08,ZZ2RASYP(,R9)                                02S0558
         MVC   RABA(148,RABAP2),RACO(@08)                       02S0558
*       RABADIM=RABAHDI;            /* NUMBER OF ENTRIES PRESENT     */
         MVC   RABADIM(2,RABAP2),@CH00191                       02S0559
*       RABAUSE=0;                  /* NO ENTRIES IN USE             */
         SLR   @08,@08                                          02S0560
         STH   @08,RABAUSE(,RABAP2)                             02S0560
*     END;                                                      02S0561
*   IF RABAUSE=RABADIM THEN         /* RABA OVERFLOW                 */
*                                                               02S0562
@RF00544 LH    @08,RABADIM(,RABAP2)                             02S0562
         CH    @08,RABAUSE(,RABAP2)                             02S0562
         BNE   @RF00562                                         02S0562
*     /***************************************************************/
*     /*                                                             */
*     /* RABA OVERFLOW                                               */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0563
*     DO;                           /* RABA OVERFLOW                 */
*       J4=RABADIM+RABAHDI;         /* DIMENSION OF NEW RECORD       */
         AH    @08,@CH00191                                     02S0564
         LR    J4,@08                                           02S0564
*       RESPECIFY                                               02S0565
*        (R1) RESTRICTED;           /* ->STORAGE OBTAINED FOR RABA   */
*        DO; /*GETMAIN (RU) LV(RABA0RL+J4*LENGTH(RABAR)) SP(ZZZSPEXC)*/
*        RESPECIFY (GPR01F,GPR15F,GPR00F) RESTRICTED;           02S0567
*        GPR01F = 0; /* REG 1 MUST BE ZERO*/                    02S0568
         SLR   GPR01F,GPR01F                                    02S0568
*        GPR15F = 2; /* RU-TYPE GETMAIN */                      02S0569
         LA    GPR15F,2                                         02S0569
*        GPR00F = RABA0RL+J4*LENGTH(RABAR); /* LENGTH REQUESTED*/
         LR    GPR00F,J4                                        02S0570
         SLL   GPR00F,5                                         02S0570
         AL    GPR00F,@CF00187                                  02S0570
*        GPR15F = GPR15F×((ZZZSPEXC)*256); /* SP IN BYTE 2 */   02S0571
         O     GPR15F,@CF00281                                  02S0571
*        SVC(120); /*RC/RU-FORM OF GETMAIN*/                    02S0572
         SVC   120                                              02S0572
*        RESPECIFY (GPR01F,GPR15F,GPR00F) UNRESTRICTED;         02S0573
*        END; /*GETMAIN (RU) LV(RABA0RL+J4*LENGTH(RABAR)) SP(ZZZSPEXC)*
*                                                               02S0574
*       RABAP3=R1;                  /* ->RABA                        */
         LR    RABAP3,R1                                        02S0575
*       RESPECIFY                                               02S0576
*        (R1) UNRESTRICTED;         /* ->STORAGE OBTAINED FOR RABA   */
*       RABAP3->RABA(1:RABALRL)=RABA(1:RABALRL);/* BASE RECORD       */
         MVC   RABA(148,RABAP3),RABA(RABAP2)                    02S0577
*       RABAP3->RABADIM=J4;         /* DIMENSION OF NEW RECORD       */
         STH   J4,RABADIM(,RABAP3)                              02S0578
*       DO J5=RABALDI+1 TO RABAUSE; /* COPY EXISTING ENTRIES         */
         LA    J5,4                                             02S0579
         B     @DE00579                                         02S0579
@DL00579 DS    0H                                               02S0580
*         RABAP3->RABAR(J5)=RABAR(J5);/* ONE AT A TIME               */
         LR    @08,J5                                           02S0580
         SLL   @08,5                                            02S0580
         ST    @08,@TF00001                                     02S0580
         ALR   @08,RABAP3                                       02S0580
         LR    @07,RABAP2                                       02S0580
         AL    @07,@TF00001                                     02S0580
         MVC   RABAR-32(32,@08),RABAR-32(@07)                   02S0580
*       END;                        /* COPY EXISTING ENTRIES         */
         AL    J5,@CF00047                                      02S0581
@DE00579 LH    @08,RABAUSE(,RABAP2)                             02S0581
         CLR   J5,@08                                           02S0581
         BNH   @DL00579                                         02S0581
*        DO; /*FREEMAIN(RU) LV(RABA0RL+RABADIM*LENGTH(RABAR))A(RABA) SP
*ZZZSPEXC)*/                                                    02S0582
*        RESPECIFY (GPR01F,GPR15F,GPR00F) RESTRICTED;           02S0583
*        GPR01F = 0; /* REG 1 MUST BE ZERO*/                    02S0584
         SLR   GPR01F,GPR01F                                    02S0584
*        GPR15F=3; /*SET TYPE*/                                 02S0585
         LA    GPR15F,3                                         02S0585
*        GPR00F = RABA0RL+RABADIM*LENGTH(RABAR); /* LENGTH REQUESTED*/
         LH    GPR00F,RABADIM(,RABAP2)                          02S0586
         SLA   GPR00F,5                                         02S0586
         AL    GPR00F,@CF00187                                  02S0586
*        GPR01F=ADDR(RABA); /*SET REGISTER ONE*/                02S0587
         LR    GPR01F,RABAP2                                    02S0587
*        GPR15F=GPR15F+((ZZZSPEXC)*256); /* SUBPOOL VALUE*/     02S0588
         AL    GPR15F,@CF00281                                  02S0588
*        SVC(120); /*RC/RU-FORM OF GETMAIN*/                    02S0589
         SVC   120                                              02S0589
*        RESPECIFY (GPR01F,GPR15F,GPR00F) UNRESTRICTED;         02S0590
*        END; /*FREEMAIN(RU) LV(RABA0RL+RABADIM*LENGTH(RABAR))A(RABA) S
*(ZZZSPEXC)*/                                                   02S0591
*       RABAP2=RABAP3;              /* ->RABA                        */
         LR    RABAP2,RABAP3                                    02S0592
*     END;                          /* RABA OVERFLOW                 */
*   DO                              /* MAKE ROOM FOR THE NEW ENTRY   */
*         J6=RABAUSE TO 1 BY-1      /* SEARCHING BACKWARD            */
*         WHILE(RABARIA(J6)>RAMERIA(JX));/* FOR ITS POSITION         */
@RF00562 LH    J6,RABAUSE(,RABAP2)                              02S0594
         B     @DE00594                                         02S0594
@DL00594 LR    @08,J6                                           02S0594
         SLL   @08,5                                            02S0594
         L     @05,RABARIA-32(@08,RABAP2)                       02S0594
         CL    @05,RAMERIA+64                                   02S0594
         BNH   @DC00594                                         02S0594
*     RABAR(J6+1)=RABAR(J6);        /* SHIFT ONE ENTRY AT A TIME     */
         ST    @08,@TF00001                                     02S0595
         ALR   @08,RABAP2                                       02S0595
         LR    @05,RABAP2                                       02S0595
         AL    @05,@TF00001                                     02S0595
         MVC   RABAR(32,@08),RABAR-32(@05)                      02S0595
*   END;                            /* MAKE ROOM FOR THE NEW ENTRY   */
         BCTR  J6,0                                             02S0596
@DE00594 CL    J6,@CF00047                                      02S0596
         BNL   @DL00594                                         02S0596
@DC00594 DS    0H                                               02S0597
*   RABAR(J6+1)=RAMER(JX);          /* INSERT NEW RABA ENTRY         */
         LR    @08,J6                                           02S0597
         SLL   @08,5                                            02S0597
         ALR   @08,RABAP2                                       02S0597
         MVC   RABAR(32,@08),RAMER+64                           02S0597
*   RABAUSE=RABAUSE+1;              /* ENTRIES IN USE                */
         LA    @08,1                                            02S0598
         AH    @08,RABAUSE(,RABAP2)                             02S0598
         STH   @08,RABAUSE(,RABAP2)                             02S0598
*   RABAP=RABAP2;                   /* ->RABA (GLOBAL)               */
         ST    RABAP2,RABAP                                     02S0599
*   RETURN;                         /* CONTINUE MERGE PROCESSING     */
@EL00004 DS    0H                                               02S0600
@EF00004 DS    0H                                               02S0600
@ER00004 LM    @14,@12,12(@13)                                  02S0600
         BR    @14                                              02S0600
*   END BLSRRA30;                   /* ADD DATA TO OUTPUT BUFFER     */
*                                                               01S0602
*/*BLSRPEND--DEBUGGING MODULE*/                                 01S0602
*                                                               01S0602
*/*BLSUPEND--MVS IPCS MODULE*/                                  01S0602
*                                                               01S0602
*                                                               01S0602
*                                                               01S0602
*    DECLARE /*GENERAL PURPOSE REGISTERS */                     01S0602
*      GPR00F FIXED(31) REG(0),                                 01S0602
*      GPR01F FIXED(31) REG(1),                                 01S0602
*      GPR15F FIXED(31) REG(15);                                01S0602
*                                                               01S0602
*    DECLARE /* COMMON VARIABLES */                             01S0603
*      I256C CHAR(256) BASED,                                   01S0603
*      I031F FIXED(31) BASED,                                   01S0603
*      I031P PTR(31)   BASED,                                   01S0603
*      I015F FIXED(15) BASED,                                   01S0603
*      I015P PTR(15)   BASED,                                   01S0603
*      I008P PTR(8)    BASED,                                   01S0603
*      I001C CHAR(1)   BASED;                                   01S0603
*    GENERATE NODEFS NOREFS DATA;                               01S0604
*   END BLSRRAAR /*BLRPEND(BLSRRAAR) */                         01S0605
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (BLSRZZZ )                                        *
*/*%INCLUDE SYSLIB  (BLSUZZZ )                                        *
*/*%INCLUDE SYSLIB  (BLRFULL )                                        *
*/*%INCLUDE SYSLIB  (IKJCPPL )                                        *
*/*%INCLUDE SYSLIB  (IKJPSCB )                                        *
*/*%INCLUDE SYSLIB  (IKJECT  )                                        *
*/*%INCLUDE SYSLIB  (IKJUPT  )                                        *
*/*%INCLUDE SYSLIB  (BLSUSERV)                                        *
*/*%INCLUDE SYSLIB  (BLRSERV )                                        *
*/*%INCLUDE SYSLIB  (BLRSERVD)                                        *
*/*%INCLUDE SYSLIB  (BLSRSERV)                                        *
*/*%INCLUDE SYSLIB  (BLSRRA01)                                        *
*/*%INCLUDE SYSLIB  (BLSRRA02)                                        *
*/*%INCLUDE SYSLIB  (BLSRRA03)                                        *
*/*%INCLUDE SYSLIB  (BLSRRA04)                                        *
*/*%INCLUDE SYSLIB  (BLSRRA05)                                        *
*/*%INCLUDE SYSLIB  (BLSRRA06)                                        *
*/*%INCLUDE SYSLIB  (BLSRRA09)                                        *
*/*%INCLUDE SYSLIB  (BLSRRA10)                                        *
*/*%INCLUDE SYSLIB  (BLSRRA20)                                        *
*/*%INCLUDE SYSLIB  (BLSRRA30)                                        *
*;                                                              01S0605
@EL00001 L     @13,4(,@13)                                      01S0605
@EF00001 L     @00,@SIZDATD                                     01S0605
         LR    @01,@11                                          01S0605
         BLSUFRES R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                  01S0605
         BR    @14                                              01S0605
@DATA    DS    0H
@CH00191 DC    H'94'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    2F
@SA00002 DS    13F
@AL00001 DS    2A
@TF00001 DS    F
BLSRRAAR CSECT
         DS    0F
@CF00047 DC    F'1'
@CH00047 EQU   @CF00047+2
@CF00187 DC    F'52'
@CH00187 EQU   @CF00187+2
@CF00281 DC    F'256'
@CH00281 EQU   @CF00281+2
@CF00127 DC    F'2147483647'
@CF00067 DC    XL4'80000000'
@DATD    DSECT
         DS    0D
RABAP    DS    A
JP       DS    F
RAME     DS    CL148
         ORG   RAME
RAMERID  DS    CL2
@NM00087 DS    BL6
RAMERDX  DS    FL4
RAMEAS   DS    CL16
         ORG   RAMEAS
RAMEAS0  DS    0C
RAMEAST  DS    CL2
@NM00088 DS    BL2
RAMEAS1  DS    FL4
RAMEAS2  DS    FL4
@NM00089 DS    BL4
RAMEAS9  DS    0C
         ORG   RAME+28
RAMEFAD  DS    AL4
RAMEELK  DS    0C
@NM00090 DS    BL16
RAMEDIM  DS    FL2
RAMEUSE  DS    FL2
RAMER    DS    CL32
         ORG   RAMER+0
RAMERIA  DS    AL4
RAMERLE  DS    FL4
RAMERNM  DS    FL2
RAMERF   DS    BL2
         ORG   RAMERF+0
RAMERFU  DS    BL1
RAMERFP  EQU   RAMERF+0
RAMERFR  EQU   RAMERF+0
@NM00091 EQU   RAMERF+0
         ORG   RAMER+12
RAMERDA  DS    FL4
RAMEROF  DS    FL4
@NM00092 DS    BL12
         ORG   RAME+148
RAME999  DS    0C
         ORG   RAME+148
FLAG     DS    BL1
         ORG   FLAG
FLAGEOF  DS    BL1
FLAGERR  EQU   FLAG+0
FLAGSCAN EQU   FLAG+0
FLAGSEL  EQU   FLAG+0
@NM00093 EQU   FLAG+0
         ORG   FLAG+1
         DS    CL3
MYUPDBUF DS    CL3072
MYRPLU   DS    CL256
MYRPLA   DS    CL256
RAAD     DS    CL3060
         ORG   RAAD
RAADRID  DS    CL2
@NM00094 DS    BL6
RAADRDX  DS    FL4
RAADAS   DS    CL16
         ORG   RAADAS
RAADAS0  DS    0C
RAADAST  DS    CL2
@NM00095 DS    BL2
RAADAS1  DS    FL4
RAADAS2  DS    FL4
@NM00096 DS    BL4
RAADAS9  DS    0C
         ORG   RAAD+28
RAADFAD  DS    AL4
RAADELK  DS    0C
@NM00097 DS    BL16
RAADDIM  DS    FL2
RAADUSE  DS    FL2
RAADR    DS    CL32
         ORG   RAADR+0
RAADRIA  DS    AL4
RAADRLE  DS    FL4
RAADRNM  DS    FL2
RAADRF   DS    BL2
         ORG   RAADRF+0
RAADRFU  DS    BL1
RAADRFP  EQU   RAADRF+0
RAADRFR  EQU   RAADRF+0
@NM00098 EQU   RAADRF+0
         ORG   RAADR+12
RAADRDA  DS    FL4
RAADROF  DS    FL4
@NM00099 DS    BL12
         ORG   RAAD+3060
RAAD999  DS    0C
         ORG   RAAD+3060
BLSRRAAR CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
@CC00136 DC    C'RA'
@DATD    DSECT
         SPACE 2
***********************************************************************
* THE FOLLOWING AREA, BLRPATCH, IS RESERVED FOR PATCH APPLICATION     *
* TO OBTAIN PATCH ROOM IN THE @DATD AUTOMATIC STORAGE AREA, MODIFY    *
* CONSTANT @SIZDATD TO REFLECT THE DESIRED @DATD SIZE                 *
***********************************************************************
         SPACE
BLSRRAAR CSECT
         ORG
         DS    0D
BLRPATCH DC    CL8'ZAPAREA',(((*-BLSRRAAR+19)/20+7)/8)CL8'BLSRRAAR'
@DATD    DSECT
         DS    0H
@DATD    DSECT
*---------------------------------------------------------------------*
*   RESERVE SPACE FOR GENCB AND MODCB PARAMETER LISTS                 *
*---------------------------------------------------------------------*
         DS    0F                      ALIGN PARAMETER LIST
GENPRMU  DS    (GENPRMUL)CL1           GENCB PARAMETER LIST
         ORG   GENPRMU                 ALIGN PARAMETER LIST
GENPRMA  DS    (GENPRMAL)CL1           GENCB PARAMETER LIST
         ORG   GENPRMU                 ALIGN PARAMETER LIST
MODPRMA  DS    (MODPRMAL)CL1           MODCB PARAMETER LIST
         ORG
@DATD    DSECT
         SPACE 2
***********************************************************************
* ALIGN END OF DATA ON A DOUBLEWORD BOUNDARY                          *
***********************************************************************
         SPACE
         DS    0D
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
BLSRRAAR CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RETC     EQU   @04
J6       EQU   @02
J5       EQU   @02
J4       EQU   @07
J3       EQU   @03
J2       EQU   @02
J1       EQU   @02
JU       EQU   @06
RABAP3   EQU   @06
RABAP2   EQU   @04
RABAP1   EQU   @02
P1       EQU   @02
PX       EQU   @02
PU       EQU   @04
PP       EQU   @05
PL       EQU   @07
PH       EQU   @08
PB       EQU   @03
R9       EQU   @09
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
RB       EQU   @11
RD       EQU   @13
RE       EQU   @14
RF       EQU   @15
GPR01F   EQU   @01
GPR15F   EQU   @15
GPR00F   EQU   @00
RA       EQU   @10
RC       EQU   @12
ZZ1      EQU   0
ZZ1ACBP  EQU   ZZ1+28
ZZ1ATTN  EQU   ZZ1+360
ZZ1EVE   EQU   ZZ1ATTN+4
ZZ1F     EQU   ZZ1+368
ZZ1N     EQU   ZZ1+1116
ZZ2      EQU   0
ZZ2AMD   EQU   ZZ2
@NM00021 EQU   ZZ2AMD+7
ZZ2PRT   EQU   ZZ2+138
ZZ2PRTT  EQU   ZZ2PRT+4
ZZ2PRTT1 EQU   ZZ2PRTT+1
ZZ2A     EQU   ZZ2+272
ZZ2AF    EQU   ZZ2A+16
ZZ2APID  EQU   ZZ2A+64
ZZ2AD    EQU   ZZ2A+74
ZZ2ADD   EQU   ZZ2AD
ZZ2ADDT  EQU   ZZ2ADD+2
ZZ2ADM   EQU   ZZ2AD+46
ZZ2ADMT  EQU   ZZ2ADM+2
ZZ2ADP   EQU   ZZ2AD+56
ZZ2ADPT  EQU   ZZ2ADP+2
ZZ2AZZ6P EQU   ZZ2A+140
ZZ2AQAS  EQU   ZZ2A+144
ZZ2AQD   EQU   ZZ2A+160
ZZ2AQDT  EQU   ZZ2AQD+10
ZZ2AQDF  EQU   ZZ2AQD+52
ZZ2STG   EQU   ZZ2+960
ZZ2ALLOP EQU   ZZ2+992
ZZ2FREEP EQU   ZZ2+996
ZZ2FF19P EQU   ZZ2+1000
ZZ2FRE1P EQU   ZZ2+1004
ZZ2FF18P EQU   ZZ2+1008
ZZ2DYNAP EQU   ZZ2+1012
ZZ2ZZ2CP EQU   ZZ2+1016
ZZ2ZZ2DP EQU   ZZ2+1020
ZZ2STAIP EQU   ZZ2+1024
ZZ2FF02P EQU   ZZ2+1028
ZZ2GETLP EQU   ZZ2+1032
ZZ2PARSP EQU   ZZ2+1036
ZZ2PTGTP EQU   ZZ2+1040
ZZ2PUTLP EQU   ZZ2+1044
ZZ2SCANP EQU   ZZ2+1048
ZZ2STCKP EQU   ZZ2+1052
ZZ2TRMOP EQU   ZZ2+1064
ZZ2TRMVP EQU   ZZ2+1068
ZZ2PUTNP EQU   ZZ2+1084
ZZ2TRMNP EQU   ZZ2+1088
ZZ2ZZ1P  EQU   ZZ2+1264
ZZ2BVTP  EQU   ZZ2+1280
ZZ2RVTP  EQU   ZZ2+1284
ZZ2CPPL  EQU   ZZ2+1292
ZZ2CPPLC EQU   ZZ2CPPL
ZZ2RASYP EQU   ZZ2+1336
ZZ2F     EQU   ZZ2+2824
ZZ2ITR   EQU   ZZ2+2840
ZZ2ITRE  EQU   ZZ2ITR+16
ZZ2ITSE  EQU   ZZ2+2864
ZZ2ES    EQU   ZZ2+2872
ZZ2AMDX  EQU   ZZ2+7160
ZZ2AXO   EQU   ZZ2+7934
ZZ2AXOT  EQU   ZZ2AXO+2
CMD      EQU   0
CMDT     EQU   CMD+4
PSCB     EQU   0
PSCBATR1 EQU   PSCB+16
ECT      EQU   0
ECTSWS   EQU   ECT+28
ECTSWS2  EQU   ECT+40
ECTSWS21 EQU   ECTSWS2
UPT      EQU   0
UPTSWS   EQU   UPT+12
SA       EQU   0
SA1      EQU   SA
SAR      EQU   SA+12
SAR1     EQU   SAR+12
BLSUVSCR EQU   0
BLSUVSEN EQU   0
BLSUVSER EQU   0
BLSUVSGU EQU   0
BLSUVSMR EQU   0
BLSUVSPO EQU   0
BLSUVSPU EQU   0
BVT      EQU   0
BVTPUTLP EQU   BVT+4
BVTPUTOP EQU   BVT+12
BVTPUTTP EQU   BVT+16
BVTPUTVP EQU   BVT+20
BVTPUTAP EQU   BVT+24
BVTPRTTP EQU   BVT+28
BVTPRTAP EQU   BVT+32
BVTPUTDP EQU   BVT+36
BVTMONP  EQU   BVT+40
BVTMON2P EQU   BVT+44
BVTVSARP EQU   BVT+48
BVTVSENP EQU   BVT+64
BVTVSERP EQU   BVT+68
BVTVSGEP EQU   BVT+72
BVTVSGUP EQU   BVT+76
BVTVSPOP EQU   BVT+80
BVTVSPUP EQU   BVT+84
BVTMPKNP EQU   BVT+104
BVTMONLP EQU   BVT+108
BVTPUTCP EQU   BVT+132
BVTMPK1P EQU   BVT+136
BVTZZ2RP EQU   BVT+140
BVTPGMRP EQU   BVT+144
BVTMONAP EQU   BVT+148
BVTBLDDP EQU   BVT+152
BVTBLDLP EQU   BVT+156
BVTPGMCP EQU   BVT+160
BVTPGMDP EQU   BVT+164
BVTPGMLP EQU   BVT+168
BVTMONCP EQU   BVT+180
BVTMONDP EQU   BVT+184
BVTMONTP EQU   BVT+188
BVTPARIP EQU   BVT+192
BVTPARUP EQU   BVT+196
BVTPRTNP EQU   BVT+204
BVTVSCRP EQU   BVT+208
BVTVSMRP EQU   BVT+212
BVTMONXP EQU   BVT+216
BVTTRMAP EQU   BVT+228
ZZ6      EQU   0
ZZ6D     EQU   ZZ6+128
ZZ6DD    EQU   ZZ6D+8
ZZ6DDT   EQU   ZZ6DD+4
ZZ6DRDX  EQU   ZZ6D+64
ZZ6DQA   EQU   ZZ6D+68
ZZ6DF    EQU   ZZ6D+92
ZZ6F     EQU   ZZ6+504
ZZ6B     EQU   ZZ6+768
RVT      EQU   0
RVTADDRP EQU   RVT
RVTT01P  EQU   RVT+4
RVTTAP   EQU   RVT+8
RVTTBP   EQU   RVT+12
RVTTCP   EQU   RVT+16
RVTTFP   EQU   RVT+24
RVTTYP   EQU   RVT+40
RVTT02P  EQU   RVT+48
RVTT03P  EQU   RVT+52
RVTT04P  EQU   RVT+56
RVTACCLP EQU   RVT+60
RVTRACCP EQU   RVT+64
RVTTLP   EQU   RVT+68
RVTTMP   EQU   RVT+72
RVTTUP   EQU   RVT+80
RVTESGEP EQU   RVT+84
RVTESGUP EQU   RVT+88
RVTESARP EQU   RVT+92
RVTRAGEP EQU   RVT+100
RVTADDPP EQU   RVT+104
RVTACCQP EQU   RVT+108
RVTSAGUP EQU   RVT+124
RVTSAGEP EQU   RVT+128
RVTESCKP EQU   RVT+132
RVTMSGAP EQU   RVT+136
RVTMSGDP EQU   RVT+140
RVTADDTP EQU   RVT+160
RVTADDUP EQU   RVT+164
RVTADD1P EQU   RVT+176
RVTADD2P EQU   RVT+180
RVTRSAGP EQU   RVT+184
RVTMSGBP EQU   RVT+188
RVTADDSP EQU   RVT+192
RVTADD3P EQU   RVT+196
RVTT05P  EQU   RVT+200
RVTPADSP EQU   RVT+204
RVTTRP   EQU   RVT+228
RVTADD4P EQU   RVT+232
RVTSAPCP EQU   RVT+236
RVTSAARP EQU   RVT+240
RVTSAGNP EQU   RVT+244
RVTT06P  EQU   RVT+248
RVTSAGCP EQU   RVT+252
RVTSAGQP EQU   RVT+256
RVTESGCP EQU   RVT+260
RVTESGQP EQU   RVT+264
RVTDUCKP EQU   RVT+276
RVTDUCCP EQU   RVT+280
RACO     EQU   0
RACOAS   EQU   RACO+12
RACOR    EQU   RACO+52
RACORF   EQU   RACOR+10
RABA     EQU   0
RABAAS   EQU   RABA+12
RABADIM  EQU   RABA+48
RABAUSE  EQU   RABA+50
RABAR    EQU   RABA+52
RABARIA  EQU   RABAR
RABARF   EQU   RABAR+10
BLSRACC  EQU   0
BLSRACCL EQU   0
BLSRACCQ EQU   0
BLSRADDP EQU   0
BLSRADDR EQU   0
BLSRADDS EQU   0
BLSRADDT EQU   0
BLSRADDU EQU   0
BLSRADD1 EQU   0
BLSRADD2 EQU   0
BLSRADD3 EQU   0
BLSRADD4 EQU   0
BLSRDUCC EQU   0
BLSRDUCK EQU   0
BLSRESAR EQU   0
BLSRESCK EQU   0
BLSRESGC EQU   0
BLSRESGE EQU   0
BLSRESGQ EQU   0
BLSRESGU EQU   0
BLSRMSGA EQU   0
BLSRMSGB EQU   0
BLSRMSGD EQU   0
BLSRPADS EQU   0
BLSRRAGE EQU   0
BLSRSAAR EQU   0
BLSRSAG  EQU   0
BLSRSAGC EQU   0
BLSRSAGE EQU   0
BLSRSAGN EQU   0
BLSRSAGQ EQU   0
BLSRSAGU EQU   0
BLSRSAPC EQU   0
BLSTA    EQU   0
BLSTB    EQU   0
BLSTC    EQU   0
BLSTF    EQU   0
BLSTL    EQU   0
BLSTM    EQU   0
BLSTR    EQU   0
BLSTU    EQU   0
BLSTY    EQU   0
BLST01   EQU   0
BLST02   EQU   0
BLST03   EQU   0
BLST04   EQU   0
BLST05   EQU   0
BLST06   EQU   0
BLSUALLO EQU   0
BLSUBLDD EQU   0
BLSUBLDL EQU   0
BLSUDYNA EQU   0
BLSUFREE EQU   0
BLSUFRE1 EQU   0
BLSUMON  EQU   0
BLSUMONA EQU   0
BLSUMONC EQU   0
BLSUMOND EQU   0
BLSUMONL EQU   0
BLSUMONT EQU   0
BLSUMONX EQU   0
BLSUMON2 EQU   0
BLSUMPKN EQU   0
BLSUMPK1 EQU   0
BLSUPARI EQU   0
BLSUPARU EQU   0
BLSUPGMC EQU   0
BLSUPGMD EQU   0
BLSUPGML EQU   0
BLSUPGMR EQU   0
BLSUPRTA EQU   0
BLSUPRTN EQU   0
BLSUPRTT EQU   0
BLSUPUTA EQU   0
BLSUPUTC EQU   0
BLSUPUTD EQU   0
BLSUPUTL EQU   0
BLSUPUTN EQU   0
BLSUPUTO EQU   0
BLSUPUTT EQU   0
BLSUPUTV EQU   0
BLSUSTAI EQU   0
BLSUTRMA EQU   0
BLSUTRMN EQU   0
BLSUTRMO EQU   0
BLSUTRMV EQU   0
BLSUVSAR EQU   0
BLSUVSGE EQU   0
BLSUZZ2C EQU   0
BLSUZZ2D EQU   0
BLSUZZ2R EQU   0
IKJEFF02 EQU   0
IKJEFF18 EQU   0
IKJEFF19 EQU   0
IKJGETL  EQU   0
IKJPARS  EQU   0
IKJPTGT  EQU   0
IKJPUTL  EQU   0
IKJSCAN  EQU   0
IKJSTCK  EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
PZ2      EQU   0
RAPA     EQU   0
RAPAAS   EQU   RAPA+12
RAPAUSE  EQU   RAPA+50
RAPAR    EQU   RAPA+52
RAPARIA  EQU   RAPAR
RAPARNM  EQU   RAPAR+8
RAPARF   EQU   RAPAR+10
CPPL     EQU   ZZ2CPPL
CPPLUPT  EQU   CPPL+4
CPPLPSCB EQU   CPPL+8
CPPLECT  EQU   CPPL+12
RAUP     EQU   MYUPDBUF
RAUPRID  EQU   RAUP
RAUPRDX  EQU   RAUP+8
RAUPAS   EQU   RAUP+12
RAUPFAD  EQU   RAUP+28
RAUPUSE  EQU   RAUP+50
RAUPR    EQU   RAUP+52
RAUPRIA  EQU   RAUPR
RAUPRF   EQU   RAUPR+10
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
RAUP999  EQU   RAUP+3060
@NM00111 EQU   RAUPR+20
RAUPROF  EQU   RAUPR+16
RAUPRDA  EQU   RAUPR+12
@NM00110 EQU   RAUPRF
RAUPRFR  EQU   RAUPRF
RAUPRFP  EQU   RAUPRF
RAUPRFU  EQU   RAUPRF
RAUPRNM  EQU   RAUPR+8
RAUPRLE  EQU   RAUPR+4
RAUPDIM  EQU   RAUP+48
@NM00109 EQU   RAUP+32
RAUPELK  EQU   RAUP+32
RAUPAS9  EQU   RAUPAS+16
@NM00108 EQU   RAUPAS+12
RAUPAS2  EQU   RAUPAS+8
RAUPAS1  EQU   RAUPAS+4
@NM00107 EQU   RAUPAS+2
RAUPAST  EQU   RAUPAS
RAUPAS0  EQU   RAUPAS
@NM00106 EQU   RAUP+2
CPPLCBUF EQU   CPPL
RAPA999  EQU   RAPA+3060
@NM00006 EQU   RAPAR+20
RAPAROF  EQU   RAPAR+16
RAPARDA  EQU   RAPAR+12
@NM00005 EQU   RAPARF
RAPARFR  EQU   RAPARF
RAPARFP  EQU   RAPARF
RAPARFU  EQU   RAPARF
RAPARLE  EQU   RAPAR+4
RAPADIM  EQU   RAPA+48
@NM00004 EQU   RAPA+32
RAPAELK  EQU   RAPA+32
RAPAFAD  EQU   RAPA+28
RAPAAS9  EQU   RAPAAS+16
@NM00003 EQU   RAPAAS+12
RAPAAS2  EQU   RAPAAS+8
RAPAAS1  EQU   RAPAAS+4
@NM00002 EQU   RAPAAS+2
RAPAAST  EQU   RAPAAS
RAPAAS0  EQU   RAPAAS
RAPARDX  EQU   RAPA+8
@NM00001 EQU   RAPA+2
RAPARID  EQU   RAPA
RABA999  EQU   RABA+3060
@NM00117 EQU   RABAR+20
RABAROF  EQU   RABAR+16
RABARDA  EQU   RABAR+12
@NM00116 EQU   RABARF
RABARFR  EQU   RABARF
RABARFP  EQU   RABARF
RABARFU  EQU   RABARF
RABARNM  EQU   RABAR+8
RABARLE  EQU   RABAR+4
@NM00115 EQU   RABA+32
RABAELK  EQU   RABA+32
RABAFAD  EQU   RABA+28
RABAAS9  EQU   RABAAS+16
@NM00114 EQU   RABAAS+12
RABAAS2  EQU   RABAAS+8
RABAAS1  EQU   RABAAS+4
@NM00113 EQU   RABAAS+2
RABAAST  EQU   RABAAS
RABAAS0  EQU   RABAAS
RABARDX  EQU   RABA+8
@NM00112 EQU   RABA+2
RABARID  EQU   RABA
RACO999  EQU   RACO+148
@NM00105 EQU   RACOR+20
RACOROF  EQU   RACOR+16
RACORDA  EQU   RACOR+12
@NM00104 EQU   RACORF
RACORFR  EQU   RACORF
RACORFP  EQU   RACORF
RACORFU  EQU   RACORF
RACORNM  EQU   RACOR+8
RACORLE  EQU   RACOR+4
RACORIA  EQU   RACOR
RACOUSE  EQU   RACO+50
RACODIM  EQU   RACO+48
@NM00103 EQU   RACO+32
RACOELK  EQU   RACO+32
RACOFAD  EQU   RACO+28
RACOAS9  EQU   RACOAS+16
@NM00102 EQU   RACOAS+12
RACOAS2  EQU   RACOAS+8
RACOAS1  EQU   RACOAS+4
@NM00101 EQU   RACOAS+2
RACOAST  EQU   RACOAS
RACOAS0  EQU   RACOAS
RACORDX  EQU   RACO+8
@NM00100 EQU   RACO+2
RACORID  EQU   RACO
RVT99999 EQU   RVT+384
RVT0096P EQU   RVT+380
RVT0095P EQU   RVT+376
RVT0094P EQU   RVT+372
RVT0093P EQU   RVT+368
RVT0092P EQU   RVT+364
RVT0091P EQU   RVT+360
RVT0090P EQU   RVT+356
RVT0089P EQU   RVT+352
RVT0088P EQU   RVT+348
RVT0087P EQU   RVT+344
RVT0086P EQU   RVT+340
RVT0085P EQU   RVT+336
RVT0084P EQU   RVT+332
RVT0083P EQU   RVT+328
RVT0082P EQU   RVT+324
RVT0081P EQU   RVT+320
RVT0080P EQU   RVT+316
RVT0079P EQU   RVT+312
RVT0078P EQU   RVT+308
RVT0077P EQU   RVT+304
RVT0076P EQU   RVT+300
RVT0075P EQU   RVT+296
RVT0074P EQU   RVT+292
RVT0073P EQU   RVT+288
RVT0072P EQU   RVT+284
RVTDTUTP EQU   RVT+272
RVTDTMTP EQU   RVT+268
RVT0057P EQU   RVT+224
RVT0056P EQU   RVT+220
RVT0055P EQU   RVT+216
RVT0054P EQU   RVT+212
RVT0053P EQU   RVT+208
RVT0044P EQU   RVT+172
RVT0043P EQU   RVT+168
RVT0040P EQU   RVT+156
RVT0039P EQU   RVT+152
RVT0038P EQU   RVT+148
RVT0037P EQU   RVT+144
RVT0031P EQU   RVT+120
RVT0030P EQU   RVT+116
RVT0029P EQU   RVT+112
RVTRAARP EQU   RVT+96
RVT0020P EQU   RVT+76
RVT0012P EQU   RVT+44
RVT0010P EQU   RVT+36
RVT0009P EQU   RVT+32
RVT0008P EQU   RVT+28
RVT0006P EQU   RVT+20
ZZ69999  EQU   ZZ6+1792
ZZ6BRB   EQU   ZZ6B+12
ZZ6BRC   EQU   ZZ6B+8
@NM00086 EQU   ZZ6B+6
ZZ6BFL   EQU   ZZ6B+4
ZZ6BDA   EQU   ZZ6B
@NM00085 EQU   ZZ6+540
ZZ6BUFI  EQU   ZZ6+536
ZZ6BUFP  EQU   ZZ6+532
ZZ6FILE  EQU   ZZ6+524
ZZ6BUFB  EQU   ZZ6+520
ZZ6BUFL  EQU   ZZ6+518
ZZ6BUFN  EQU   ZZ6+516
ZZ6ZZ6P  EQU   ZZ6+512
@NM00084 EQU   ZZ6F
ZZ6FINIT EQU   ZZ6F
ZZ6FDUOP EQU   ZZ6F
@NM00083 EQU   ZZ6+256
ZZ6D999  EQU   ZZ6D+128
@NM00082 EQU   ZZ6D+116
ZZ6DCAP  EQU   ZZ6D+112
ZZ6DPRP  EQU   ZZ6D+108
ZZ6DDA2  EQU   ZZ6D+104
ZZ6DDA1  EQU   ZZ6D+100
@NM00081 EQU   ZZ6DF
ZZ6DFSU  EQU   ZZ6DF
ZZ6DFST  EQU   ZZ6DF
ZZ6DFAB  EQU   ZZ6DF
ZZ6DFMP  EQU   ZZ6DF
ZZ6DFDU  EQU   ZZ6DF
ZZ6DFBS  EQU   ZZ6DF
ZZ6DQ2   EQU   ZZ6D+88
ZZ6DQ1   EQU   ZZ6D+84
ZZ6DQA9  EQU   ZZ6DQA+16
@NM00080 EQU   ZZ6DQA+12
ZZ6DQA2  EQU   ZZ6DQA+8
ZZ6DQA1  EQU   ZZ6DQA+4
@NM00079 EQU   ZZ6DQA+2
ZZ6DQAT  EQU   ZZ6DQA
ZZ6DQA0  EQU   ZZ6DQA
ZZ6DELK  EQU   ZZ6D+64
ZZ6DMEM  EQU   ZZ6D+56
ZZ6DDT1  EQU   ZZ6DDT
ZZ6DDO   EQU   ZZ6DD+2
ZZ6DDL   EQU   ZZ6DD
@NM00078 EQU   ZZ6D+2
ZZ6DRID  EQU   ZZ6D
ZZ6RDCB  EQU   ZZ6
ZZ60000  EQU   ZZ6
BVT99999 EQU   BVT+256
BVT0064P EQU   BVT+252
BVT0063P EQU   BVT+248
BVT0062P EQU   BVT+244
BVT0061P EQU   BVT+240
BVT0060P EQU   BVT+236
BVT0059P EQU   BVT+232
BVT0057P EQU   BVT+224
BVT0056P EQU   BVT+220
BVTSTBLP EQU   BVT+200
BVT0045P EQU   BVT+176
BVT0044P EQU   BVT+172
BVT0033P EQU   BVT+128
BVT0032P EQU   BVT+124
BVT0031P EQU   BVT+120
BVT0030P EQU   BVT+116
BVT0029P EQU   BVT+112
BVT0026P EQU   BVT+100
BVT0025P EQU   BVT+96
BVT0024P EQU   BVT+92
BVT0023P EQU   BVT+88
BVT0016P EQU   BVT+60
BVT0015P EQU   BVT+56
BVT0014P EQU   BVT+52
BVT0003P EQU   BVT+8
BVT0001P EQU   BVT
SA99     EQU   SA+72
SARC     EQU   SAR+56
SARB     EQU   SAR+52
SARA     EQU   SAR+48
SAR9     EQU   SAR+44
SAR8     EQU   SAR+40
SAR7     EQU   SAR+36
SAR6     EQU   SAR+32
SAR5     EQU   SAR+28
SAR4     EQU   SAR+24
SAR3     EQU   SAR+20
SAR2     EQU   SAR+16
SAR0     EQU   SAR+8
SARF     EQU   SAR+4
SARE     EQU   SAR
SAFWD    EQU   SA+8
SABAK    EQU   SA+4
SA1L     EQU   SA1+1
SA1P     EQU   SA1
UPTPREFL EQU   UPT+23
UPTPREFX EQU   UPT+16
@NM00077 EQU   UPT+15
UPTLDEL  EQU   UPT+14
UPTCDEL  EQU   UPT+13
UPTWTP   EQU   UPTSWS
UPTMODE  EQU   UPTSWS
UPTALD   EQU   UPTSWS
UPTPAUS  EQU   UPTSWS
UPTNCOM  EQU   UPTSWS
UPTMID   EQU   UPTSWS
UPTNPRM  EQU   UPTSWS
UPTRCVR  EQU   UPTSWS
UPTUSER  EQU   UPT+2
@NM00076 EQU   UPT
@NM00075 EQU   ECT+52
@NM00074 EQU   ECT+48
@NM00073 EQU   ECT+44
@NM00072 EQU   ECTSWS2+1
@NM00071 EQU   ECTSWS21
ECTTABND EQU   ECTSWS21
ECTDEFCS EQU   ECTSWS21
ECTBKPB  EQU   ECT+36
ECTUSER  EQU   ECT+32
ECTDDNUM EQU   ECT+29
ECTATTN  EQU   ECTSWS
ECTBKGRD EQU   ECTSWS
ECTNNOT  EQU   ECTSWS
ECTNMAL  EQU   ECTSWS
ECTLOGF  EQU   ECTSWS
ECTATRM  EQU   ECTSWS
@NM00070 EQU   ECTSWS
ECTNOPD  EQU   ECTSWS
ECTSCMD  EQU   ECT+20
ECTPCMD  EQU   ECT+12
ECTSMSG  EQU   ECT+9
ECTMSGF  EQU   ECT+8
ECTIOWA  EQU   ECT+4
ECTRTCD  EQU   ECT+1
ECTRCDF  EQU   ECT
PSCBU    EQU   PSCB+64
PSCBRSZ  EQU   PSCB+60
PSCBLINE EQU   PSCB+59
PSCBCHAR EQU   PSCB+58
PSCBUPTL EQU   PSCB+56
PSCBUPT  EQU   PSCB+52
PSCBRLGB EQU   PSCB+48
PSCBDEST EQU   PSCB+40
@NM00069 EQU   PSCB+36
@NM00068 EQU   PSCB+32
@NM00067 EQU   PSCB+28
PSCBLTI2 EQU   PSCB+24
PSCBLTIM EQU   PSCB+20
PSCBATR2 EQU   PSCB+18
@NM00066 EQU   PSCBATR1
@NM00065 EQU   PSCBATR1
@NM00064 EQU   PSCBATR1
PSCBATTN EQU   PSCBATR1
PSCBVMNT EQU   PSCBATR1
PSCBJCL  EQU   PSCBATR1
PSCBACCT EQU   PSCBATR1
PSCBCTRL EQU   PSCBATR1
PSCBGPNM EQU   PSCB+8
PSCBUSRL EQU   PSCB+7
PSCBUSER EQU   PSCB
CMDT1    EQU   CMDT
CMDO     EQU   CMD+2
CMDL     EQU   CMD
ZZ299999 EQU   ZZ2+8192
ZZ2AXOT1 EQU   ZZ2AXOT
ZZ2AXOL  EQU   ZZ2AXO
@NM00063 EQU   ZZ2+7288
@NM00062 EQU   ZZ2AMDX+4
ZZ2AMDXC EQU   ZZ2AMDX
ZZ2HSD   EQU   ZZ2+3056
@NM00061 EQU   ZZ2ES
@NM00060 EQU   ZZ2+2868
ZZ2ITSEC EQU   ZZ2ITSE+1
@NM00059 EQU   ZZ2ITSE
ZZ2ITSEP EQU   ZZ2ITSE
ZZ2ITSEW EQU   ZZ2ITSE
@NM00058 EQU   ZZ2ITR+20
ZZ2ITREC EQU   ZZ2ITRE+1
@NM00057 EQU   ZZ2ITRE
ZZ2ITREP EQU   ZZ2ITRE
ZZ2ITREW EQU   ZZ2ITRE
@NM00056 EQU   ZZ2ITR+9
ZZ2ITRRC EQU   ZZ2ITR+8
ZZ2ITR2P EQU   ZZ2ITR+4
ZZ2ITRPP EQU   ZZ2ITR
@NM00055 EQU   ZZ2F
ZZ2F3270 EQU   ZZ2F
@NM00054 EQU   ZZ2+1544
ZZ2PGM   EQU   ZZ2+1536
@NM00053 EQU   ZZ2+1526
ZZ2CW    EQU   ZZ2+1524
@NM00052 EQU   ZZ2+1504
@NM00051 EQU   ZZ2+1352
ZZ2FFSYP EQU   ZZ2+1348
ZZ2SASYP EQU   ZZ2+1344
ZZ2RDSYP EQU   ZZ2+1340
ZZ2PHSYP EQU   ZZ2+1332
ZZ2ESSYP EQU   ZZ2+1328
ZZ200SYP EQU   ZZ2+1324
ZZ2SCWP  EQU   ZZ2+1320
ZZ2TTLP  EQU   ZZ2+1316
ZZ2LOADP EQU   ZZ2+1312
ZZ2VRESP EQU   ZZ2+1308
ZZ2CPPLE EQU   ZZ2CPPL+12
ZZ2CPPLP EQU   ZZ2CPPL+8
ZZ2CPPLU EQU   ZZ2CPPL+4
ZZ2VRSAP EQU   ZZ2+1288
ZZ2DVTP  EQU   ZZ2+1276
@NM00050 EQU   ZZ2+1272
@NM00049 EQU   ZZ2+1268
ZZ2RPLP  EQU   ZZ2+1260
ZZ2TCBP  EQU   ZZ2+1256
@NM00048 EQU   ZZ2+1252
ZZ2ZZ2P  EQU   ZZ2+1248
@NM00047 EQU   ZZ2+1112
ZZ2FPDRP EQU   ZZ2+1108
ZZ2FDSDP EQU   ZZ2+1104
ZZ2APDRP EQU   ZZ2+1100
ZZ2ADSDP EQU   ZZ2+1096
ZZ2ENQ0P EQU   ZZ2+1092
@NM00046 EQU   ZZ2+1080
ZZ2MSG0P EQU   ZZ2+1076
ZZ2FT25P EQU   ZZ2+1072
ZZ2MSGSP EQU   ZZ2+1060
ZZ2ALOCP EQU   ZZ2+1056
@NM00045 EQU   ZZ2+976
ZZ2TOD   EQU   ZZ2+968
ZZ2STGN  EQU   ZZ2STG+4
ZZ2STGP  EQU   ZZ2STG
@NM00044 EQU   ZZ2+952
ZZ2SCMDE EQU   ZZ2+944
ZZ2SCMDN EQU   ZZ2+936
ZZ2IDENT EQU   ZZ2+928
ZZ2A9999 EQU   ZZ2A+656
@NM00043 EQU   ZZ2A+224
@NM00042 EQU   ZZ2A+220
ZZ2AQD99 EQU   ZZ2AQD+60
@NM00041 EQU   ZZ2AQD+56
@NM00040 EQU   ZZ2AQDF
ZZ2AQDFA EQU   ZZ2AQDF
ZZ2AQDIL EQU   ZZ2AQD+48
ZZ2AQDIM EQU   ZZ2AQD+44
ZZ2AQDT9 EQU   ZZ2AQDT+34
ZZ2AQDTE EQU   ZZ2AQDT+33
ZZ2AQDTD EQU   ZZ2AQDT+2
@NM00039 EQU   ZZ2AQDT+1
ZZ2AQDTY EQU   ZZ2AQDT
ZZ2AQDT0 EQU   ZZ2AQDT
ZZ2AQDLB EQU   ZZ2AQD+9
ZZ2AQDOB EQU   ZZ2AQD+8
ZZ2AQDLE EQU   ZZ2AQD+4
ZZ2AQDOF EQU   ZZ2AQD
ZZ2AQD00 EQU   ZZ2AQD
ZZ2AQAS9 EQU   ZZ2AQAS+16
@NM00038 EQU   ZZ2AQAS+12
ZZ2AQAS2 EQU   ZZ2AQAS+8
ZZ2AQAS1 EQU   ZZ2AQAS+4
@NM00037 EQU   ZZ2AQAS+2
ZZ2AQAST EQU   ZZ2AQAS
ZZ2AQAS0 EQU   ZZ2AQAS
ZZ2ADPTA EQU   ZZ2ADPT
ZZ2ADPL  EQU   ZZ2ADP
ZZ2ADMTA EQU   ZZ2ADMT
ZZ2ADML  EQU   ZZ2ADM
ZZ2ADDTA EQU   ZZ2ADDT
ZZ2ADDL  EQU   ZZ2ADD
@NM00036 EQU   ZZ2A+72
ZZ2APIDB EQU   ZZ2APID+3
ZZ2APIDA EQU   ZZ2APID
@NM00035 EQU   ZZ2A+24
@NM00034 EQU   ZZ2AF+5
ZZ2AFX   EQU   ZZ2AF+5
@NM00033 EQU   ZZ2AF+3
ZZ2AFS   EQU   ZZ2AF+2
ZZ2AFD   EQU   ZZ2AF+2
ZZ2AFQ   EQU   ZZ2AF+2
ZZ2AF$   EQU   ZZ2AF+2
@NM00032 EQU   ZZ2AF+2
ZZ2AFM   EQU   ZZ2AF+2
@NM00031 EQU   ZZ2AF+2
@NM00030 EQU   ZZ2AF+1
ZZ2AFV   EQU   ZZ2AF+1
@NM00029 EQU   ZZ2AF+1
ZZ2AFC   EQU   ZZ2AF+1
@NM00028 EQU   ZZ2AF
ZZ2AFFS  EQU   ZZ2AF
ZZ2AFT   EQU   ZZ2AF
ZZ2AFP   EQU   ZZ2AF
@NM00027 EQU   ZZ2A+8
ZZ2ALINE EQU   ZZ2A+4
@NM00026 EQU   ZZ2A+3
ZZ2ASE   EQU   ZZ2A+2
ZZ2ACH   EQU   ZZ2A
@NM00025 EQU   ZZ2+264
@NM00024 EQU   ZZ2+263
ZZ2PRTT0 EQU   ZZ2PRTT
ZZ2PRTO  EQU   ZZ2PRT+2
ZZ2PRTL  EQU   ZZ2PRT
@NM00023 EQU   ZZ2AMD+56
ZZ2AMDXP EQU   ZZ2AMD+52
ZZ2AMDD  EQU   ZZ2AMD+48
ZZ2AMDL  EQU   ZZ2AMD+44
ZZ2AMDU  EQU   ZZ2AMD+28
ZZ2AMDF  EQU   ZZ2AMD+24
ZZ2AMDS  EQU   ZZ2AMD+20
ZZ2AMDC  EQU   ZZ2AMD+16
ZZ2AMDP  EQU   ZZ2AMD+12
ZZ2AMDB  EQU   ZZ2AMD+8
@NM00022 EQU   @NM00021
ZZ2AMD2  EQU   @NM00021
ZZ2AMD1  EQU   @NM00021
ZZ2AMD0  EQU   ZZ2AMD+6
ZZ2AMDA  EQU   ZZ2AMD+4
ZZ2AMDT  EQU   ZZ2AMD
ZZ199999 EQU   ZZ1+3072
@NM00020 EQU   ZZ1+2160
ZZ1TRTAS EQU   ZZ1+1904
ZZ1TRUPC EQU   ZZ1+1648
ZZ1TRCTX EQU   ZZ1+1392
ZZ1NASID EQU   ZZ1N+274
ZZ1NSTRL EQU   ZZ1N+272
ZZ1NOFF  EQU   ZZ1N+268
ZZ1NBDY  EQU   ZZ1N+264
ZZ1NADE  EQU   ZZ1N+260
ZZ1NADB  EQU   ZZ1N+256
ZZ1NSTR  EQU   ZZ1N
@NM00019 EQU   ZZ1+1080
ZZ1TREBC EQU   ZZ1+824
ZZ1TRHEX EQU   ZZ1+568
@NM00018 EQU   ZZ1+377
ZZ1USTAE EQU   ZZ1+376
@NM00017 EQU   ZZ1F+3
@NM00016 EQU   ZZ1F+2
ZZ1FPRNT EQU   ZZ1F+2
@NM00015 EQU   ZZ1F+1
ZZ1FTCAM EQU   ZZ1F+1
ZZ1FACCM EQU   ZZ1F+1
@NM00014 EQU   ZZ1F
ZZ1FM    EQU   ZZ1F
ZZ1FX    EQU   ZZ1F
ZZ1FU    EQU   ZZ1F
ZZ1EVEC  EQU   ZZ1EVE+1
@NM00013 EQU   ZZ1EVE
ZZ1EVEP  EQU   ZZ1EVE
ZZ1EVEW  EQU   ZZ1EVE
ZZ1ACMP  EQU   ZZ1ATTN
@NM00012 EQU   ZZ1+144
ZZ1FPP   EQU   ZZ1+140
ZZ1ZZ6P  EQU   ZZ1+136
@NM00011 EQU   ZZ1+84
ZZ1PLINE EQU   ZZ1+80
ZZ1PGSZ  EQU   ZZ1+76
ZZ1PCNT  EQU   ZZ1+72
@NM00010 EQU   ZZ1+68
ZZ1TPAGE EQU   ZZ1+64
ZZ1TLINE EQU   ZZ1+60
@NM00009 EQU   ZZ1+52
ZZ1DMCBP EQU   ZZ1+48
ZZ1DSDP  EQU   ZZ1+44
ZZ1PDRP  EQU   ZZ1+40
ZZ1ZZ2P  EQU   ZZ1+36
ZZ1327WP EQU   ZZ1+32
@NM00008 EQU   ZZ1+24
ZZ1PDCBP EQU   ZZ1+20
ZZ1BLRBL EQU   ZZ1+16
@NM00007 EQU   ZZ1+12
ZZ1PNULL EQU   ZZ1+8
ZZ1NULL  EQU   ZZ1+4
ZZ1IDE   EQU   ZZ1
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00144 EQU   ERREXIT
@RT00148 EQU   ERREXIT
@RT00163 EQU   ERREXIT
@RT00175 EQU   ERREXIT
@RC00190 EQU   @RC00189
@RF00195 EQU   @RC00186
@RC00299 EQU   L020
@RC00313 EQU   L020
@RT00448 EQU   ERREXIT
@RF00482 EQU   @EL00002
@ENDDATA EQU   *
         END   BLSRRAAR,(C'PLS1803',0701,78160)
