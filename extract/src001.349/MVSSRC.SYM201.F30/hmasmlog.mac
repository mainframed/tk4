         TITLE 'HMASMLOG - THE SMP LOG LIST ROUTINE'
HMASMLOG CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'HMASMLOG  78.334'                                 0001
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @00,@12,20(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
         MVC   @PC00001(4),0(@01)                                  0001
         EJECT
*                                                                  0150
*   /*****************************************************************/
*   /*                                                               */
*   /* THE MAIN PROGRAM. THE COMPUTATIONS ARE PERFORMED BY VARIOUS   */
*   /* SUBROUTINES. THIS PROGRAM CHECKS FOR DATE RANGE AND CALLS THE */
*   /* ROUTINES AS REQUIRED.                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0150
*/* HMASMLOG: CHART (AREF)                                           */
*/*           E HMASMLOG MAIN SEGMENT                                */
*/*           P INITIALIZE R.C., OUTPUT AREA, IOP                    */
*/*           P MOVE PARM TO LOCAL AREA                              */
*/*           S CONVERT: CONVERT DATE RANGES                         */
*/*           D (YES,,NO,EXT) CONVERT OK?                            */
*/*           S HEADSET: SET UP HDRS & READ 1ST LOG RCRD             */
*/*           D (YES,EXT,NO,) FUNCTION OR SMP LVL ERR?               */
*/*           N READ SMPLOG TILL EOF OR ERROR OR DATE LIMIT EXCEED.  */
*/* %RDLOOP:  D (YES,%RC,NO,) LOG EOF OR I/O ERR?                    */
*/*           D (YES,%PRTCHK,NO,) PRINT ALL OF LOG?                  */
*/*           D (YES,%RC,NO,) DATE LIMIT EXCEED.?                    */
*/* %PRTCHK:  D (YES,%FORMAT,NO,) PRINT ALL OF LOG?                  */
*/*           D (YES,,NO,%READIT) DATE START FOUND?                  */
*/* %FORMAT:  S FORMAT: FORMAT LOG RECORD                            */
*/*           S PRINT: PRINT LOG RECORD                              */
*/*           D (YES,EXT,NO,) FUNC OR SMP LVL ERR?                   */
*/* %READIT:  S (,%RDLOOP) HMASMIO: READ NEXT LOG RECORD             */
*/* %RC:      P UPDATE LOG R.C. IF SERIOUS ERROR                     */
*/* EXT:      S WRAPUP: ISSUE COMPLETION MESSAGE                     */
*/*           P UPDATE LOG R.C. IF SERIOUS ERROR                     */
*/*           R RETURN TO CALLER W/HIGHEST RC                        */
*/*           HMASMLOG: END                                          */
*/*                                                                  */
*                                                                  0150
*   LOGRTNCD=ZERO;                  /* INIT RETURN CODE      @Z40SP00*/
         SLR   LOGRTNCD,LOGRTNCD                                   0150
*   SDATLIM(1)=LISTBDAT;            /* BEGIN DATE            @Z67SP00*/
         MVI   SDATLIM+6,C' '                                      0151
         L     @07,@PC00001                                        0151
         MVC   SDATLIM(6),LISTBDAT(@07)                            0151
*   SXXLIM(1)=CHAR0;                /*                       @Z67SP00*/
         MVI   SXXLIM,C'0'                                         0152
*   SDATLIM(2)=LISTEDAT;            /* ENDDATE               @Z67SP00*/
         MVI   SDATLIM+13,C' '                                     0153
         MVC   SDATLIM+7(6),LISTEDAT(@07)                          0153
*   SXXLIM(2)=CHAR0;                /*                       @Z67SP00*/
         MVI   SXXLIM+7,C'0'                                       0154
*   SDATA=BLANK;                    /* CLEAR THE OUTPUT LINE         */
         MVI   SDATA+1,C' '                                        0155
         MVC   SDATA+2(118),SDATA+1                                0155
         MVI   SDATA,C' '                                          0155
*   FLAGS=ZERO;                     /* CLEAR CONTROL FLAGS           */
         MVI   FLAGS,X'00'                                         0156
*   SAVEDATE=BLANK;                 /* INITIALIZE SAVED DATE VALUE   */
         MVI   SAVEDATE+1,C' '                                     0157
         MVI   SAVEDATE+2,C' '                                     0157
         MVI   SAVEDATE,C' '                                       0157
*   IOPPTR=CCAIOPTR;                /* SET BASE FOR THE IOP          */
         L     IOPPTR,CCAIOPTR(,CCAPTR)                            0158
*   SAVBUFAD=IOPBUFAD;              /* SAVE INPUT BUFFER ADDRESS     */
         L     SAVBUFAD,IOPBUFAD(,IOPPTR)                          0159
*   CALL CONVERT;                   /* CALL THE PACK/UNPACK ROUTINE  */
         BAL   @14,CONVERT                                         0160
*   LOGRTNCD=IOPRETRN;              /* SAVE RC               @YA07506*/
         SLR   LOGRTNCD,LOGRTNCD                                   0161
         IC    LOGRTNCD,IOPRETRN(,IOPPTR)                          0161
*   IF LOGRTNCD=IOPGOOD THEN        /* IF CONVERT WORKED, THEN       */
         CH    LOGRTNCD,@CH00303                                   0162
         BNE   @RF00162                                            0162
*     CALL HEADSET;                 /* SET UP THE HEADERS            */
         BAL   @14,HEADSET                                         0163
*   ELSE                                                           0164
*     GO TO EXT;                    /* RETURN WITH ERROR RC  @YA07506*/
*   IF LOGRTNCD<IOPRETRN            /* NEW RC?               @YA07506*/
*     THEN                                                         0165
         SLR   @07,@07                                             0165
         IC    @07,IOPRETRN(,IOPPTR)                               0165
         CR    LOGRTNCD,@07                                        0165
         BNL   @RF00165                                            0165
*     LOGRTNCD=IOPRETRN;            /* YES                   @YA07506*/
         LR    LOGRTNCD,@07                                        0166
*   IF LOGRTNCD>=STOPFUNC           /* EXIT?                 @YA07506*/
*     THEN                                                         0167
@RF00165 CH    LOGRTNCD,@CH00231                                   0167
         BNL   @RT00167                                            0167
*     GO TO EXT;                    /* YES                   @YA07506*/
         EJECT
*                                                                  0169
*   /*****************************************************************/
*   /*                                                               */
*   /* READ THE LOG AS LONG AS THE SECOND LIMIT HAS NOT BEEN REACHED */
*   /* AND NO ERRORS HAVE BEEN DETECTED.                     @Z40SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0169
*   DO WHILE(SCHKLMT(2)>=SLOGDATE×PRINTALL='1'B)&(IOPRETRN=IOPGOOD);
*                                                                  0169
         B     @DE00169                                            0169
@DL00169 DS    0H                                                  0170
*     /***************************************************************/
*     /*                                                             */
*     /* IF THE DATE IS IN RANGE, FORMAT AND PRINT IT        @Z40SP00*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0170
*     IF PRINTALL='1'B×SCHKLMT(1)<=SLOGDATE THEN                   0170
         TM    PRINTALL,B'10000000'                                0170
         BO    @RT00170                                            0170
         L     @07,IOPBUFAD(,IOPPTR)                               0170
         CLC   SCHKLMT(3),SLOGDATE(@07)                            0170
         BH    @RF00170                                            0170
@RT00170 DS    0H                                                  0171
*       DO;                         /* WE HAVE A LINE TO PREPARE     */
*         CALL FORMAT;              /* GET LINE FORMATTED            */
         BAL   @14,FORMAT                                          0172
*         CALL PRINT;               /* AND THEN GET IT PRINTED       */
         BAL   @14,PRINT                                           0173
*         IF LOGRTNCD>=STOPFUNC     /* SERIOUS ERROR?        @YA07506*/
*           THEN                                                   0174
         CH    LOGRTNCD,@CH00231                                   0174
         BNL   @RT00174                                            0174
*           GO TO EXT;              /* YES-EXIT              @YA07506*/
*       END;                                                       0176
*                                                                  0176
*     /***************************************************************/
*     /*                                                             */
*     /* NOW READ IN THE NEXT RECORD FROM THE LOG            @Z40SP00*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0177
*     IOPDSID=IOPHLDS;              /* INDICATE THE HLDS             */
@RF00170 MVI   IOPDSID(IOPPTR),X'01'                               0177
*     IOPFUNCT=IOPREAD;             /* AND A READ OPERATION          */
         MVI   IOPFUNCT(IOPPTR),X'01'                              0178
*     CALL HMASMIO(HMASMIOP);       /* CALL THE SMP I/O ROUTINE      */
         ST    IOPPTR,@AL00001                                     0179
         L     @15,@CV01309                                        0179
         LA    @01,@AL00001                                        0179
         BALR  @14,@15                                             0179
*   END;                                                           0180
@DE00169 L     @07,IOPBUFAD(,IOPPTR)                               0180
         CLC   SCHKLMT+3(3),SLOGDATE(@07)                          0180
         BNL   @GL00002                                            0180
         TM    PRINTALL,B'10000000'                                0180
         BNO   @DC00169                                            0180
@GL00002 CLI   IOPRETRN(IOPPTR),0                                  0180
         BE    @DL00169                                            0180
@DC00169 DS    0H                                                  0181
*   IF LOGRTNCD<IOPRETRN            /* CHANGE RC?            @YA07506*/
*       &IOPRETRN>IOPEOF            /* AND SERIOUS ERRROR    @YA07506*/
*     THEN                                                         0181
         SLR   @07,@07                                             0181
         IC    @07,IOPRETRN(,IOPPTR)                               0181
         CR    LOGRTNCD,@07                                        0181
         BNL   @RF00181                                            0181
         CLI   IOPRETRN(IOPPTR),4                                  0181
         BNH   @RF00181                                            0181
*     LOGRTNCD=IOPRETRN;            /* YES-DO IT             @YA07506*/
         LR    LOGRTNCD,@07                                        0182
*EXT:                                                              0183
*   CALL WRAPUP;                    /* ISSUE MSG AND POSIT. FOR    0183
*                                      PUTPUT                @YA07506*/
@RF00181 DS    0H                                                  0183
EXT      BAL   @14,WRAPUP                                          0183
*   IF LOGRTNCD<IOPRETRN            /* CHANGE RC?            @YA07506*/
*     THEN                                                         0184
         SLR   @02,@02                                             0184
         IC    @02,IOPRETRN(,IOPPTR)                               0184
         CR    LOGRTNCD,@02                                        0184
         BNL   @RF00184                                            0184
*     LOGRTNCD=IOPRETRN;            /* YES-DO IT             @YA07506*/
         LR    LOGRTNCD,@02                                        0185
*   RETURN CODE(LOGRTNCD);          /* RETURN HIGHEST RC     @YA07506*/
@RF00184 LR    @15,LOGRTNCD                                        0186
@EL00001 L     @13,4(,@13)                                         0186
@EF00001 DS    0H                                                  0186
@ER00001 L     @14,12(,@13)                                        0186
         LM    @00,@12,20(@13)                                     0186
         BR    @14                                                 0186
         EJECT
*                                                                  0187
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE SETS UP THE PAGE HEADERS WITH THE SMP I/O ROUTINE*/
*   /* AND PRIMES THE PRL WITH THE FIRST HLDS RECORD                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0187
*/* HEADSET:  CHART (AREF)                                           */
*/*           E SET PGE HDRS, RD 1ST LOG RCRD                        */
*/*           S HMASMIO: SEND FIRST HEADER                           */
*/*           S HMASMIO: SEND BLANK TO HEADER                        */
*/*           S HMASMIO: SEND SECOND HESDER                          */
*/*           S HMASMIO: POSITION LOG FOR INPUT                      */
*/*           S HMASMIO: READ FIRST LOG RECORD                       */
*/*           R RETURN WITH I/O RTN CODE                             */
*/*           HEADSET: END                                           */
*/*                                                                  */
*                                                                  0187
*HEADSET:                                                          0187
*   PROCEDURE;                      /*                       @Z67SP00*/
HEADSET  STM   @14,@12,@SA00002                                    0187
*   IOPFUNCT=IOPWRITE;              /* DEFAULT OPERATIOM     @Z40SP00*/
         MVI   IOPFUNCT(IOPPTR),X'51'                              0188
*   IOPDSID=CCALSTDS;               /* SPECIFY THE PRINTER   @Z67SP00*/
         MVC   IOPDSID(1,IOPPTR),CCALSTDS(CCAPTR)                  0189
*   DO NDXI=1 TO 6 WHILE IOPRETRN=IOPGOOD;/* CALL I/O ROUTINE@YA07506*/
         LA    NDXI,1                                              0190
@DL00190 CLI   IOPRETRN(IOPPTR),0                                  0190
         BNE   @DC00190                                            0190
*MYCASE:                                                           0191
*     DO;                           /* MYCASE:CASE(NDXI)NAMES(HD1,HD2
*                                      ,HD3,HD2,HD4,HD5)             */
MYCASE   DS    0H                                                  0192
*       DCL                                                        0192
*         CL0001@ LABEL BASED(CP0001@(NDXI)) VALUERANGE(HD1,HD2,HD3,HD2
*             ,HD4,HD5);            /* BRANCH TARGET                 */
*       DCL                                                        0193
*         CP0001@(6) PTR(31) INIT(ADDR(HD1),ADDR(HD2),ADDR(HD3),ADDR(
*             HD2),ADDR(HD4),ADDR(HD5));                           0193
*       GOTO CL0001@;               /* BRANCH TO SELECTED CASE       */
         LR    @03,NDXI                                            0194
         SLA   @03,2                                               0194
         L     @03,CP0001@-4(@03)                                  0194
         BR    @03                                                 0194
*HD1:                                                              0195
*       DO;                         /* SUBCASE SET UP FIRST HEADER   */
HD1      DS    0H                                                  0196
*         PRLHDADR=ADDR(SHEADR1);                                  0196
         L     @03,IOPBUFAD(,IOPPTR)                               0196
         LA    @15,SHEADR1                                         0196
         STCM  @15,7,PRLHDADR(@03)                                 0196
*         PRLHEAD='1'B;                                            0197
*         PRLBLANK='0'B;                                           0198
         OI    PRLHEAD(@03),B'10000000'                            0198
         NI    PRLBLANK(@03),B'11011111'                           0198
*         GOTO CE0001@;             /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0199
*       END HD1;                    /* END OF SUBCASE                */
*HD2:                                                              0201
*       DO;                         /* SUBCASE THEN SET UP BLANK LINE
*                                      IN HDR                        */
HD2      DS    0H                                                  0202
*         PRLBLANK='1'B;                                           0202
         L     @03,IOPBUFAD(,IOPPTR)                               0202
         OI    PRLBLANK(@03),B'00100000'                           0202
*         GOTO CE0001@;             /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0203
*       END HD2;                    /* END OF SUBCASE                */
*HD3:                                                              0205
*       DO;                         /* SUBCASE NOW SET UP SECOND   0205
*                                      HEADER                        */
HD3      DS    0H                                                  0206
*         PRLHDADR=ADDR(SHEADR2);                                  0206
         L     @03,IOPBUFAD(,IOPPTR)                               0206
         LA    @15,SHEADR2                                         0206
         STCM  @15,7,PRLHDADR(@03)                                 0206
*         PRLBLANK='0'B;                                           0207
         NI    PRLBLANK(@03),B'11011111'                           0207
*         GOTO CE0001@;             /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0208
*       END HD3;                    /* END OF SUBCASE                */
*HD4:                                                              0210
*       DO;                         /* SUBCASE NOW POSN HLDS FOR   0210
*                                      INPUT                         */
HD4      DS    0H                                                  0211
*         PRLFLGS=0;                /* THEN CLEAR ALL THE PRL FLAGS  */
         L     @03,IOPBUFAD(,IOPPTR)                               0211
         MVI   PRLFLGS(@03),X'00'                                  0211
*         IOPDSID=IOPHLDS;          /* INDICATE THE HLDS             */
         MVI   IOPDSID(IOPPTR),X'01'                               0212
*         IOPFUNCT=IOPPOSI;         /* AND REPOSITION THE D.S.       */
         MVI   IOPFUNCT(IOPPTR),X'02'                              0213
*         GOTO CE0001@;             /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0214
*       END HD4;                    /* END OF SUBCASE                */
*HD5:                                                              0216
*       DO;                         /* SUBCASE PRIME THE INPUT BUFFER*/
HD5      DS    0H                                                  0217
*         IOPFUNCT=IOPREAD;         /* SPECIFY A READ OPERATION      */
         MVI   IOPFUNCT(IOPPTR),X'01'                              0217
*         GOTO CE0001@;             /* BRANCH TO END OF CASE         */
         B     CE0001@                                             0218
*       END HD5;                    /* END OF SUBCASE                */
*CE0001@:                                                          0220
*     END MYCASE;                   /* END OF CASE                   */
CE0001@  DS    0H                                                  0221
*     CALL HMASMIO(HMASMIOP);       /* CALL THE SMP I/O ROUTINE      */
         ST    IOPPTR,@AL00001                                     0221
         L     @15,@CV01309                                        0221
         LA    @01,@AL00001                                        0221
         BALR  @14,@15                                             0221
*   END;                                                           0222
         AH    NDXI,@CH00038                                       0222
         CH    NDXI,@CH00049                                       0222
         BNH   @DL00190                                            0222
@DC00190 DS    0H                                                  0223
*   RETURN;                                                        0223
@EL00002 DS    0H                                                  0223
@EF00002 DS    0H                                                  0223
@ER00002 LM    @14,@12,@SA00002                                    0223
         BR    @14                                                 0223
*   END HEADSET;                                                   0224
         EJECT
*                                                                  0225
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE CONVERTS AND CHECKS THE RANGE INPUT VIA SLIMITS. */
*   /* THE FINAL RESULTS ARE PLACED IN SCHKLMTS FOR THE MAIN PROGRAM.*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0225
*/* CONVERT:  CHART (AREF)                                           */
*/*           E CONVERT DATE RANGES                                  */
*/*           D (YES,,NO,%CONVERT) IS THIS A LIST ALL?               */
*/*           P (,%RET) SET PRINT ALL SW ON                          */
*/* %CONVERT: D (YES,%PACK,NO,) GREG. DATES VALID?                   */
*/*           P SET LOG R.C. TO STOPFUNC                             */
*/*           P ISSUE ERROR MESSAGE                                  */
*/* %PACK:    P PACK & CVB STRT & END MMDDYY                         */
*/*           P ADJ. BIN. DAY FOR LEAP YEAR                          */
*/*           P SAVE STRT & END DATES AS JULIAN                      */
*/*           D (YES,%RET,NO,) START < END DATE?                     */
*/*           P SET LOG R.C. TO STOPFUNC                             */
*/* %RET:     R RETURN W/HIGHEST RC ENCOUN.                          */
*/*           CONVERT: END                                           */
*/*                                                                  */
*                                                                  0225
*CONVERT:                                                          0225
*   PROCEDURE;                      /*                       @Z67SP00*/
CONVERT  STM   @14,@12,@SA00003                                    0225
*   IOPRETRN=IOPGOOD;               /* DEFAULT RETURN CODE   @Z40SP00*/
         MVI   IOPRETRN(IOPPTR),X'00'                              0226
*   IF LISTALL2='1'B                /* IS THIS A LIST ALL ?  @Z67SP00*/
*     THEN                                                         0227
         L     @15,@PC00001                                        0227
         TM    LISTALL2(@15),B'10000000'                           0227
         BNO   @RF00227                                            0227
*     DO;                                                          0228
*       PRINTALL='1'B;              /* IF SO, SET THE ALL FLAG       */
         OI    PRINTALL,B'10000000'                                0229
*     END;                                                         0230
*                                                                  0230
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK TO MAKE SURE MMDDYY IS VALID FOR BOTH DATES             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0231
*   ELSE                                                           0231
*     DO;                                                          0231
         B     @RC00227                                            0231
@RF00227 DS    0H                                                  0232
*       DO NDXI=1 TO DIM(SLIMITS);  /* CONVERT 2 DATES       @Z67SP00*/
         LA    NDXI,1                                              0232
@DL00232 DS    0H                                                  0233
*         IF(SMMLIM(NDXI)<'01'×SMMLIM(NDXI)>'12'×SDDLIM(NDXI)<'01'×
*             SDDLIM(NDXI)>'31'×SYYLIM(NDXI)<'00'×SYYLIM(NDXI)>'99')
*           THEN                                                   0233
         LR    @03,NDXI                                            0233
         MH    @03,@CH00291                                        0233
         LA    @01,SMMLIM-7(@03)                                   0233
         CLC   0(2,@01),@CC01467                                   0233
         BL    @RT00233                                            0233
         LA    @01,SMMLIM-7(@03)                                   0233
         CLC   0(2,@01),@CC01468                                   0233
         BH    @RT00233                                            0233
         LA    @01,SDDLIM-7(@03)                                   0233
         CLC   0(2,@01),@CC01467                                   0233
         BL    @RT00233                                            0233
         LA    @01,SDDLIM-7(@03)                                   0233
         CLC   0(2,@01),@CC01469                                   0233
         BH    @RT00233                                            0233
         LA    @01,SYYLIM-7(@03)                                   0233
         CLC   0(2,@01),@CC01470                                   0233
         BL    @RT00233                                            0233
         LA    @01,SYYLIM-7(@03)                                   0233
         CLC   0(2,@01),@CC01471                                   0233
         BNH   @RF00233                                            0233
@RT00233 DS    0H                                                  0234
*           DO;                     /*                       @Z67SP00*/
*             HMASMMGP=''B;         /*                       @Z67SP00*/
         XC    HMASMMGP(16),HMASMMGP                               0235
*             MGPPRINT=ON;          /*                       @Z67SP00*/
*             MGPHLDS=ON;           /*                       @Z67SP00*/
         OI    MGPPRINT,B'10010000'                                0237
*             MGPMGNO1=HMA423I;     /* THE DATE RANGE SPECIFIED IS 0238
*                                      INVALID               @Z67SP00*/
         MVC   MGPMGNO1(2),@CH01364                                0238
*             MGPTYPE=MGPSEV;       /*                       @Z67SP00*/
         MVI   MGPTYPE,X'04'                                       0239
*             CALL HMASMMSG(HMASMMGP);/*                     @Z67SP00*/
         L     @15,@CV01310                                        0240
         LA    @01,@AL00240                                        0240
         BALR  @14,@15                                             0240
*             IOPRETRN=STOPFUNC;    /* SET ERROR RETURN CODE @YA07506*/
         MVI   IOPRETRN(IOPPTR),X'0C'                              0241
*           END;                    /*                       @Z67SP00*/
*       END;                                                       0243
@RF00233 AH    NDXI,@CH00038                                       0243
         CH    NDXI,@CH00046                                       0243
         BNH   @DL00232                                            0243
*       DO NDXI=1 TO DIM(SLIMITS);  /* CONVERT BOTH DATES    @Z67SP00*/
         LA    NDXI,1                                              0244
@DL00244 DS    0H                                                  0245
*         WORKAREA=''B;             /* CLEAR OUT THE WORKAREA        */
         XC    WORKAREA(8),WORKAREA                                0245
*         PACK(SPACKED,SLIMITS(NDXI));/* PACK THE EBCDIC MMDDYY0     */
         LR    @05,NDXI                                            0246
         MH    @05,@CH00291                                        0246
         LA    @01,SLIMITS-7(@05)                                  0246
         PACK  SPACKED(4),0(7,@01)                                 0246
*         SYYDEC(NDXI)=SPYY;        /* MOVE THE PACK YEAR            */
         LR    @05,NDXI                                            0247
         MH    @05,@CH00079                                        0247
         SLR   @15,@15                                             0247
         IC    @15,SPYY                                            0247
         STC   @15,SYYDEC-3(@05)                                   0247
*         SPTEMP=SPMM;              /* MOVE IN PACKED MONTH          */
         MVC   SPTEMP(1),SPMM                                      0248
*         SPCOMP=SPCOMP/16×'0F'X;   /* SHIFT AND ADD SIGN            */
         LA    @05,15                                              0249
         SLR   @15,@15                                             0249
         ICM   @15,3,SPCOMP                                        0249
         SRL   @15,4                                               0249
         OR    @15,@05                                             0249
         STH   @15,SPCOMP                                          0249
*         CVB(BINMONTH,WORKAREA);   /* CONVERT MONTH FOR INDEX       */
         CVB   BINMONTH,WORKAREA                                   0250
*         SPTEMP=SPDD;              /* MOVE IN PACKED DAYS           */
         MVC   SPTEMP(1),SPDD                                      0251
*         SPCOMP=SPCOMP/16×'0F'X;   /* SHIFT AND ADD SIGN            */
         SLR   @15,@15                                             0252
         ICM   @15,3,SPCOMP                                        0252
         SRL   @15,4                                               0252
         OR    @15,@05                                             0252
         STH   @15,SPCOMP                                          0252
*         CVB(BINDAY,WORKAREA);     /* CONVERT DAY FOR ADDING        */
         CVB   BINDAY,WORKAREA                                     0253
*         BINDAY=BINDAY+SENDATE(BINMONTH);/* CALCULATE JULIAN DAY    */
         LR    @15,BINMONTH                                        0254
         MH    @15,@CH00049                                        0254
         AH    BINDAY,SENDATE-6(@15)                               0254
*         SPTEMP=SPYY;              /* MOVE IN PACKED YEAR           */
         MVC   SPTEMP(1),SPYY                                      0255
*         SPCOMP=SPCOMP/16×'0F'X;   /* SHIFT AND ADD SIGN            */
         SLR   @15,@15                                             0256
         ICM   @15,3,SPCOMP                                        0256
         SRL   @15,4                                               0256
         OR    @15,@05                                             0256
         STH   @15,SPCOMP                                          0256
*         CVB(BINYEAR,WORKAREA);    /* CONVERT YEAR TO BIN FOR CHK   */
         CVB   BINYEAR,WORKAREA                                    0257
*         IF(BINYEAR&'03'X)^=0&BINDAY>59/* NOT LEAP YR & DAY > FEB 28*/
*           THEN                                                   0258
         LA    @05,3                                               0258
         NR    @05,BINYEAR                                         0258
         LTR   @05,@05                                             0258
         BZ    @RF00258                                            0258
         CH    BINDAY,@CH01069                                     0258
         BNH   @RF00258                                            0258
*           BINDAY=BINDAY-1;        /* NORMALIZE TABLE VALUE         */
         BCTR  BINDAY,0                                            0259
*         CVD(BINDAY,WORKAREA);     /* CONVERT DAY BACK TO DECIMAL   */
@RF00258 CVD   BINDAY,WORKAREA                                     0260
*         SDDEC(NDXI)=SPCOMP×'000F'X;/* MOVE DDD TO CORRECT AREA     */
         LR    @03,NDXI                                            0261
         MH    @03,@CH00079                                        0261
         LA    @15,15                                              0261
         SLR   @14,@14                                             0261
         ICM   @14,3,SPCOMP                                        0261
         OR    @15,@14                                             0261
         STH   @15,SDDEC-3(@03)                                    0261
*       END;                                                       0262
         AH    NDXI,@CH00038                                       0262
         CH    NDXI,@CH00046                                       0262
         BNH   @DL00244                                            0262
*       IF SCHKLMT(1)>SCHKLMT(2)    /* INVALID RANGE ?               */
*         THEN                                                     0263
         CLC   SCHKLMT(3),SCHKLMT+3                                0263
         BNH   @RF00263                                            0263
*         IOPRETRN=STOPFUNC;        /* SET ERROR RETURN CODE @YA07506*/
         MVI   IOPRETRN(IOPPTR),X'0C'                              0264
*     END;                                                         0265
*   RETURN;                         /* RETURN TO MAIN PROGRAM        */
@EL00003 DS    0H                                                  0266
@EF00003 DS    0H                                                  0266
@ER00003 LM    @14,@12,@SA00003                                    0266
         BR    @14                                                 0266
*   END CONVERT;                                                   0267
         B     @EL00003                                            0267
         EJECT
*                                                                  0268
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE FORMATS THE FRONT OF THE RECORD FOR OUTPUT TO THE*/
*   /* SMP I/O ROUTINE.                                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0268
*/* FORMAT:   CHART (AREF)                                           */
*/*           E FORMAT LOG RCRD FOR PRNT                             */
*/*           P BLANK OUTPUT RCRD DATE FIELD                         */
*/*           D (NO,,YES,%UNPACK) THIS RCD DATE = PREV DATE          */
*/*           P SAVE THIS RECORDS DATE                               */
*/*           P CONVERT YYDDD TO BINARY                              */
*/*           P ADJ. FOR LEAP YEAR                                   */
*/*           P CONVERT JULIAN TO GREGORIAN FOR PRINTING             */
*/* %UNPACK:  P UNPACK TIME STAMP FOR PRINTING                       */
*/*           R RETURN TO CALLER                                     */
*/*           FORMAT: END                                            */
*/*                                                                  */
*                                                                  0268
*FORMAT:                                                           0268
*   PROCEDURE;                      /*                       @Z67SP00*/
FORMAT   STM   @14,@12,12(@13)                                     0268
*   SBDATE=' ';                     /* CLEAR OUT DATE IN DATA AREA   */
         MVI   SBDATE+1,C' '                                       0269
         MVC   SBDATE+2(6),SBDATE+1                                0269
         MVI   SBDATE,C' '                                         0269
*   IF SLOGDATE^=SAVEDATE           /* SAME DATE AS LAST TIME ?      */
*     THEN                                                         0270
         L     @15,IOPBUFAD(,IOPPTR)                               0270
         CLC   SLOGDATE(3,@15),SAVEDATE                            0270
         BE    @RF00270                                            0270
*     DO;                           /* IF NOT                        */
*       SAVEDATE=SLOGDATE;          /* SAVE THIS DATE                */
         MVC   SAVEDATE(3),SLOGDATE(@15)                           0272
*       WORKAREA=''B;               /* AND CLEAR OUT THE WORKAREA    */
         XC    WORKAREA(8),WORKAREA                                0273
*       SPCONV=SLOGDDF;             /* MOVE DDDF FOR ALIGNMENT       */
         MVC   SPCONV(2),SLOGDDF(@15)                              0274
*       CVB(BINDAY,WORKAREA);       /* CONVERT LOG DDF TO BINARY     */
         CVB   BINDAY,WORKAREA                                     0275
*       SPCONV=SLOGYY;              /* MOVE DEC YEAR TO WORKAREA     */
         MVI   SPCONV+1,C' '                                       0276
         MVC   SPCONV(1),SLOGYY(@15)                               0276
*       SPCONV=SPCONV/16×'0F'X;     /* SHIFT AND ADD SIGN            */
         SLR   @05,@05                                             0277
         ICM   @05,3,SPCONV                                        0277
         SRL   @05,4                                               0277
         O     @05,@CF01474                                        0277
         STH   @05,SPCONV                                          0277
*       UNPK(SBYY,SPCONV);          /* UNPACK YEAR INTO MSG AREA     */
         UNPK  SBYY(2),SPCONV(2)                                   0278
*       CVB(BINYEAR,WORKAREA);      /* AND CONVERT YEAR TO BINARY    */
         CVB   BINYEAR,WORKAREA                                    0279
*       IF(BINYEAR&'03'X)^=0&BINDAY>59/* DOES DAY NEED ADJUSTING     */
*         THEN                                                     0280
         LA    @05,3                                               0280
         NR    @05,BINYEAR                                         0280
         LTR   @05,@05                                             0280
         BZ    @RF00280                                            0280
         CH    BINDAY,@CH01069                                     0280
         BNH   @RF00280                                            0280
*         BINDAY=BINDAY+1;          /* IF SO, ADJUST IT TO MATCH TBL */
         AH    BINDAY,@CH00038                                     0281
*       DO NDXI=1 TO 12 WHILE BINDAY>SENDATE(NDXI);/* GET THE INDEX  */
@RF00280 LA    NDXI,1                                              0282
@DL00282 LR    @15,NDXI                                            0282
         MH    @15,@CH00049                                        0282
         CH    BINDAY,SENDATE-6(@15)                               0282
         BNH   @DC00282                                            0282
*       END;                                                       0283
         AH    NDXI,@CH00038                                       0283
         CH    NDXI,@CH00231                                       0283
         BNH   @DL00282                                            0283
@DC00282 DS    0H                                                  0284
*       BINDAY=BINDAY-SENDATE(NDXI-1);/* FIND DAY OF THE MONTH       */
         LR    @15,NDXI                                            0284
         MH    @15,@CH00049                                        0284
         SH    BINDAY,SENDATE-12(@15)                              0284
*       SBMM=SEBCMONS(NDXI-1);      /* STICK IN THE MONTH            */
         LA    @14,SEBCMONS-12(@15)                                0285
         MVC   SBMM(3),0(@14)                                      0285
*       CVD(BINDAY,WORKAREA);       /* CONVERT DAYS BACK TO DECIMAL  */
         CVD   BINDAY,WORKAREA                                     0286
*       SPMASK=SPMASK×'0F'X;        /* CHANGE SIGN FIELD FOR UNPACK  */
         OI    SPMASK,X'0F'                                        0287
*       UNPK(SBDD,SPCONV);          /* UNPACK DAY INTO DATA AREA     */
         UNPK  SBDD(2),SPCONV(2)                                   0288
*       SBSLASH='/';                /* AND MOVE IN A SLASH           */
         MVI   SBSLASH,C'/'                                        0289
*     END;                                                         0290
*   SHHMMSS=PRLTIME;                /* MOVE IN TIME FOR UNPACKING    */
@RF00270 L     @01,IOPBUFAD(,IOPPTR)                               0291
         MVC   SHHMMSS(3),PRLTIME(@01)                             0291
*   UNPK(SEBCHMS,WORKAREA);         /* UNPACK THE TIME               */
         UNPK  SEBCHMS(8),WORKAREA(8)                              0292
*   SBHOURS=SEBCHH;                 /* NOW MOVE PACKED HOURS         */
         MVC   SBHOURS(2),SEBCHH                                   0293
*   SBMINS=SEBCMM;                  /* AND MINUTES                   */
         MVC   SBMINS(2),SEBCMM                                    0294
*   SBSECS=SEBCSS;                  /* AND SECONDS INTO DATA AREA    */
         MVC   SBSECS(2),SEBCSS                                    0295
*   SBDASH1='-';                    /* THEN SET IN THE DASHES        */
         MVI   SBDASH1,C'-'                                        0296
*   SBDASH2='-';                    /* TO SEPARATE HHMMSS            */
         MVI   SBDASH2,C'-'                                        0297
*   RETURN;                         /* AND GO BACK TO MAIN PROGRAM   */
@EL00004 DS    0H                                                  0298
@EF00004 DS    0H                                                  0298
@ER00004 LM    @14,@12,12(@13)                                     0298
         BR    @14                                                 0298
*   END FORMAT;                                                    0299
         EJECT
*                                                                  0300
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE SENDS THE RECORD TO THE SMP I/O ROUTINE AND      */
*   /* BREAKS UP THE OUTPUT IF IT IS GREATER THAN 60 CHARACTERS.     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0300
*/* PRINT:    CHART (AREF)                                           */
*/*           E PRINT FORMATTED RCRD                                 */
*/* %PRTLOOP: D (YES,%RET,NO,) ENTIRE LOG RCRD PRTD?                 */
*/*           D (YES,%RET,NO,) I/O ERROR?                            */
*/*           P OBTAIN 60 BYTE MAX PIECE OF RCRD.                    */
*/*           S HMASMIO: WRITE PIECE OF LOG RCRD TO PRINTER          */
*/*           P UPDATE LOG R.C. TO ANY SEVERE ERR.                   */
*/*           P BLANK OUTPUT RCRD DATE FIELD                         */
*/*           P (,%PRTLOOP) ADJUST TO NEXT PIECE OF LOG RCRD.        */
*/* %RET:     R RETURN W/HIGHEST RC ENCOUN.                          */
*/*           PRINT: END                                             */
*/*                                                                  */
*                                                                  0300
*PRINT:                                                            0300
*   PROCEDURE;                      /*                       @Z67SP00*/
PRINT    STM   @14,@02,@SA00005                                    0300
         STM   @04,@12,@SA00005+20                                 0300
*   IOPDSID=CCALSTDS;               /* SPECIFY THE PRINTER   @Z67SP00*/
         MVC   IOPDSID(1,IOPPTR),CCALSTDS(CCAPTR)                  0301
*   IOPFUNCT=IOPWRITE;              /* AND INDICATE A WRITE          */
         MVI   IOPFUNCT(IOPPTR),X'51'                              0302
*   UPLIM=80;                       /* INITIALIZE UPPER LIMIT        */
         LA    UPLIM,80                                            0303
*   DOWNLIM=1;                      /* INIT LOWER LIMIT FOR DO       */
         LA    DOWNLIM,1                                           0304
*   NDXI=0;                         /* INITIALIZE INDEXING VALUE     */
         SLR   NDXI,NDXI                                           0305
*   PRLRLEN=PRLRLEN-PHDRLEN;        /* SUBTRACT OFF LENTH OF HDR     */
*                                                                  0306
         L     @07,IOPBUFAD(,IOPPTR)                               0306
         LH    @15,PRLRLEN(,@07)                                   0306
         SL    @15,PHDRLEN                                         0306
         STH   @15,PRLRLEN(,@07)                                   0306
*   /*****************************************************************/
*   /*                                                               */
*   /* MOVE MESSAGE, BY PIECES IF NECESSARY, INTO BUFFER AND GET IT  */
*   /* PRINTED VIA HMASMIO ROUTINE, BUT CHECK FOR ERRORS.            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0307
*   DO WHILE PRLRLEN-NDXI>0&IOPRETRN=IOPGOOD;/*              @YA07506*/
         B     @DE00307                                            0307
@DL00307 DS    0H                                                  0308
*     IF PRLRLEN-NDXI<80+1 THEN     /* END OF THE MESSAGE ?          */
         L     @07,IOPBUFAD(,IOPPTR)                               0308
         LH    @07,PRLRLEN(,@07)                                   0308
         LR    @15,@07                                             0308
         SLR   @15,NDXI                                            0308
         CH    @15,@CH00567                                        0308
         BNL   @RF00308                                            0308
*       NDXI=PRLRLEN;               /* IF SO, POINT THERE            */
         LR    NDXI,@07                                            0309
*     ELSE                                                         0310
*       DO;                         /* ELSE, LOOK FOR A BLANK        */
         B     @RC00308                                            0310
@RF00308 DS    0H                                                  0311
*         DO NDXI=UPLIM TO DOWNLIM BY-1 WHILE PRLDATA(NDXI)^=' ';  0311
         LR    NDXI,UPLIM                                          0311
         B     @DE00311                                            0311
@DL00311 L     @07,IOPBUFAD(,IOPPTR)                               0311
         ALR   @07,NDXI                                            0311
         CLI   PRLDATA-1(@07),C' '                                 0311
         BE    @DC00311                                            0311
*         END;                                                     0312
         BCTR  NDXI,0                                              0312
@DE00311 CR    NDXI,DOWNLIM                                        0312
         BNL   @DL00311                                            0312
@DC00311 DS    0H                                                  0313
*         IF NDXI<=DOWNLIM THEN     /* 60 BYTE BGLOB ?               */
         CR    NDXI,DOWNLIM                                        0313
         BH    @RF00313                                            0313
*           NDXI=UPLIM;             /* IF SO, MOVE THE WHOLE THING   */
         LR    NDXI,UPLIM                                          0314
*       END;                                                       0315
@RF00313 DS    0H                                                  0316
*     SBMSG=' ';                    /* BLANK OUT THE MSG AREA        */
@RC00308 MVI   SBMSG+1,C' '                                        0316
         MVC   SBMSG+2(78),SBMSG+1                                 0316
         MVI   SBMSG,C' '                                          0316
*     SBMSG(1:NDXI-DOWNLIM+1)=PRLDATA(DOWNLIM:NDXI);/* MOVE DATA     */
         LR    @07,NDXI                                            0317
         SLR   @07,DOWNLIM                                         0317
         L     @01,IOPBUFAD(,IOPPTR)                               0317
         ALR   @01,DOWNLIM                                         0317
         EX    @07,@SM01499                                        0317
*     IOPBUFAD=ADDR(SOUTBUF);       /* POINT TO MY BFR IN PRL        */
         LA    @07,SOUTBUF                                         0318
         ST    @07,IOPBUFAD(,IOPPTR)                               0318
*     CALL HMASMIO(HMASMIOP);       /* GO GET LINE PRINTED           */
         ST    IOPPTR,@AL00001                                     0319
         L     @15,@CV01309                                        0319
         LA    @01,@AL00001                                        0319
         BALR  @14,@15                                             0319
*     IOPBUFAD=SAVBUFAD;            /* NOW RESTORE ORIGINAL PTR      */
         ST    SAVBUFAD,IOPBUFAD(,IOPPTR)                          0320
*     LOGRTNCD=MAX(LOGRTNCD,IOPRETRN);/* SAVE RC             @YA07506*/
         SLR   @07,@07                                             0321
         IC    @07,IOPRETRN(,IOPPTR)                               0321
         CR    LOGRTNCD,@07                                        0321
         BNL   *+6
         LR    LOGRTNCD,@07                                        0321
*     SBFRONT=' ';                  /* BLANK OUT THE MSG HEADER      */
         MVI   SBFRONT+1,C' '                                      0322
         MVC   SBFRONT+2(38),SBFRONT+1                             0322
         MVI   SBFRONT,C' '                                        0322
*     DOWNLIM=NDXI+1;               /* POINT TO START OF NEXT LINE   */
         LA    DOWNLIM,1                                           0323
         ALR   DOWNLIM,NDXI                                        0323
*     UPLIM=DOWNLIM+80-1;           /* AND TO THE END                */
         LR    UPLIM,DOWNLIM                                       0324
         SH    UPLIM,@CH01493                                      0324
*   END;                                                           0325
@DE00307 L     @07,IOPBUFAD(,IOPPTR)                               0325
         LH    @07,PRLRLEN(,@07)                                   0325
         SLR   @07,NDXI                                            0325
         LTR   @07,@07                                             0325
         BNP   @DC00307                                            0325
         CLI   IOPRETRN(IOPPTR),0                                  0325
         BE    @DL00307                                            0325
@DC00307 DS    0H                                                  0326
*   RETURN;                         /* GO BACK TO MAIN PROGRAM       */
@EL00005 DS    0H                                                  0326
@EF00005 DS    0H                                                  0326
@ER00005 LM    @14,@02,@SA00005                                    0326
         LM    @04,@12,@SA00005+20                                 0326
         BR    @14                                                 0326
*   END PRINT;                                                     0327
         EJECT
*WRAPUP:                                                           0328
*   PROCEDURE;                      /*                       @Z67SP00*/
WRAPUP   STM   @14,@12,@SA00006                                    0328
*/*                                                                  */
*/* WRAPUP:   CHART (AREF)                                           */
*/*           E WRITE COMPLETION MSG.                                */
*/*           S HMASMIO: TURN OFF SUB HEADER                         */
*/*           S HMASMIO: POSITION LOG FOR POSSIBLE SUBSEQ. OUTPUT    */
*/*           R RETURN W/HIGHEST RC ENCOUN.                          */
*/*           WRAPUP: END                                            */
*/*                                                                  */
*                                                                  0329
*   /*****************************************************************/
*   /*                                                               */
*   /* CALL HMASMIO TO DELETE ANY PAGE HEADINGS              @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0329
*   IOPDSID=CCALSTDS;               /* INDICATE LIST OUTPUT  @Z67SP00*/
         MVC   IOPDSID(1,IOPPTR),CCALSTDS(CCAPTR)                  0329
*   IOPFUNCT=IOPWRITE;              /*                       @Z67SP00*/
         MVI   IOPFUNCT(IOPPTR),X'51'                              0330
*   IOPBUFAD=ADDR(SOUTBUF);         /*                       @Z67SP00*/
         LA    @07,SOUTBUF                                         0331
         ST    @07,IOPBUFAD(,IOPPTR)                               0331
*   PRLFLGS=''B;                    /*                       @Z67SP00*/
         MVI   PRLFLGS(@07),X'00'                                  0332
*   PRLHEADO='1'B;                  /* TURN ON HEADER OFF FLAG       */
         OI    PRLHEADO(@07),B'01000000'                           0333
*   CALL HMASMIO(HMASMIOP);         /* AND GO DO IT                  */
         ST    IOPPTR,@AL00001                                     0334
         L     @15,@CV01309                                        0334
         LA    @01,@AL00001                                        0334
         BALR  @14,@15                                             0334
*   PRLFLGS=''B;                    /*                       @Z67SP00*/
         L     @07,IOPBUFAD(,IOPPTR)                               0335
         MVI   PRLFLGS(@07),X'00'                                  0335
*   IOPBUFAD=SAVBUFAD;              /* RESTORE POINTER TO PRL        */
*                                                                  0336
         ST    SAVBUFAD,IOPBUFAD(,IOPPTR)                          0336
*   /*****************************************************************/
*   /*                                                               */
*   /* CALL HMASMIO TO RESET SMPLOG FOR OUTPUT PROCESSING    @Z67SP00*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0337
*   IOPDSID=IOPHLDS;                /* INDICATE THE HLDS             */
         MVI   IOPDSID(IOPPTR),X'01'                               0337
*   IOPFUNCT=IOPPOSO;               /* AND POSN FOR OUTPUT FUNCTION  */
         MVI   IOPFUNCT(IOPPTR),X'55'                              0338
*   CALL HMASMIO(HMASMIOP);         /* AND GO DO IT                  */
         ST    IOPPTR,@AL00001                                     0339
         L     @15,@CV01309                                        0339
         LA    @01,@AL00001                                        0339
         BALR  @14,@15                                             0339
*   END WRAPUP;                                                    0340
@EL00006 DS    0H                                                  0340
@EF00006 DS    0H                                                  0340
@ER00006 LM    @14,@12,@SA00006                                    0340
         BR    @14                                                 0340
*   END HMASMLOG                                                   0341
*                                                                  0341
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (HMASMCCA)                                       */
*/*%INCLUDE SYSLIB  (HMASMIOP)                                       */
*/*%INCLUDE SYSLIB  (HMASMPRL)                                       */
*/*%INCLUDE SYSLIB  (HMASMMGP)                                       */
*                                                                  0341
*       ;                                                          0341
@DATA    DS    0H
@CH00303 DC    H'0'
@CH00038 DC    H'1'
@CH00046 DC    H'2'
@CH00079 DC    H'3'
@CH00049 DC    H'6'
@CH00291 DC    H'7'
@CH00231 DC    H'12'
@CH01069 DC    H'59'
@CH00567 DC    H'81'
@CH01364 DC    H'224'
@CH01493 DC    H'-79'
@SM01499 MVC   SBMSG(0),PRLDATA-1(@01)
         DS    0F
@AL00240 DC    A(HMASMMGP)             LIST WITH   1 ARGUMENT(S)
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@SA00006 DS    0F
@SA00005 DS    0F
@SA00002 DS    0F
@SA00003 DS    0F
         DS    15F
@AL00001 DS    1A
         DS    0F
@CF01474 DC    XL4'0F'
@CV01309 DC    V(HMASMIO)
@CV01310 DC    V(HMASMMSG)
         DS    0D
PHDRLEN  DC    AL4(PRLDATA-HMASMPRL)
FLAGS    DC    AL1(0)
         ORG   FLAGS
PRINTALL DS    BL1
@NM00195 EQU   FLAGS+0
         ORG   FLAGS+1
@CC01467 DC    C'01'
@CC01468 DC    C'12'
@CC01469 DC    C'31'
@CC01470 DC    C'00'
@CC01471 DC    C'99'
         DS    CL1
HMASMMGP DS    CL16
         ORG   HMASMMGP
MGPFIXED DS    CL12
         ORG   MGPFIXED
MGPCLEAR DS    CL6
         ORG   MGPCLEAR
MGPMGNO1 DS    FL2
MGPMGNO2 DS    FL2
MGPMGNO3 DS    FL2
         ORG   MGPFIXED+6
MGPFLAGS DS    BL2
         ORG   MGPFLAGS
MGPPRINT DS    BL1
MGPLIST  EQU   MGPFLAGS+0
MGPRPT   EQU   MGPFLAGS+0
MGPHLDS  EQU   MGPFLAGS+0
MGPWTOR  EQU   MGPFLAGS+0
MGPWTO   EQU   MGPFLAGS+0
MGPWTP   EQU   MGPFLAGS+0
@NM00178 EQU   MGPFLAGS+0
         ORG   MGPFIXED+8
MGPTYPE  DS    FL1
@NM00179 DS    CL3
         ORG   HMASMMGP+12
MGPVAR   DS    CL4
         ORG   MGPVAR
MGPVARPT DS    1A
         ORG   HMASMMGP+16
SHEADRS  DS    CL242
         ORG   SHEADRS
SHEADR1  DS    CL121
         ORG   SHEADR1
@NM00180 DC    CL1' '
@NM00181 DC    43CL1' '
HDR1     DC    CL77'SMP HISTORY LOG DATA SET MESSAGES'
         ORG   SHEADRS+121
SHEADR2  DS    CL121
         ORG   SHEADR2
@NM00182 DC    CL1' '
@NM00183 DC    9CL1' '
@NM00184 DC    CL8'  DATE  '
@NM00185 DC    6CL1' '
@NM00186 DC    CL8'  TIME  '
@NM00187 DC    34CL1' '
@NM00188 DC    CL7'MESSAGE'
@NM00189 DC    48CL1' '
         ORG   SHEADRS+242
         DS    CL2
SOUTBUF  DS    CL130
         ORG   SOUTBUF
SLENGTH  DC    H'120'
SSPAN    DC    H'0'
SPDATE   DC    CL3' '
STIME    DC    CL3' '
SDATA    DS    CL120
         ORG   SDATA
SBFRONT  DS    CL40
         ORG   SBFRONT
@NM00190 DC    9CL1' '
SBDATE   DS    CL8
         ORG   SBDATE
SBMM     DS    CL3
SBDD     DS    CL2
SBSLASH  DS    CL1
SBYY     DS    CL2
         ORG   SBFRONT+17
@NM00191 DC    6CL1' '
SBTIME   DS    CL8
         ORG   SBTIME
SBHOURS  DS    CL2
SBDASH1  DS    CL1
SBMINS   DS    CL2
SBDASH2  DS    CL1
SBSECS   DS    CL2
         ORG   SBFRONT+31
@NM00192 DC    9CL1' '
         ORG   SDATA+40
SBMSG    DS    CL80
         ORG   SOUTBUF+130
         DS    CL2
WORKAREA DS    BL8
         ORG   WORKAREA
@NM00194 DS    CL6
SPCOMP   DS    AL2
         ORG   SPCOMP
SPCONV   DS    CL2
         ORG   SPCONV
SPTEMP   DS    CL1
SPMASK   DS    CL1
         ORG   WORKAREA+8
SEBCHMS  DS    CL8
         ORG   SEBCHMS
@NM00196 DS    CL1
SEBCHH   DS    CL2
SEBCMM   DS    CL2
SEBCSS   DS    CL2
         ORG   SEBCHMS+8
SPACKED  DS    CL4
         ORG   SPACKED
SPMM     DS    CL1
SPDD     DS    CL1
SPYY     DS    CL1
@NM00197 DS    CL1
         ORG   SPACKED+4
SAVEDATE DS    CL3
         DS    CL1
PATCHLOG DS    CL80
         ORG   PATCHLOG
@NM00198 DC    80X'FF'
         ORG   PATCHLOG+80
SDATES   DS    CL6
         ORG   SDATES+0
SENDATE  DC    H'0'
SEBCMONS DC    CL3'01/'
@NM00193 DS    CL1
         ORG   SDATES+6
         ORG   SDATES+6
         DC    H'31'
         DC    CL3'02/'
         ORG   SDATES+12
         ORG   SDATES+12
         DC    H'60'
         DC    CL3'03/'
         ORG   SDATES+18
         ORG   SDATES+18
         DC    H'91'
         DC    CL3'04/'
         ORG   SDATES+24
         ORG   SDATES+24
         DC    H'121'
         DC    CL3'05/'
         ORG   SDATES+30
         ORG   SDATES+30
         DC    H'152'
         DC    CL3'06/'
         ORG   SDATES+36
         ORG   SDATES+36
         DC    H'182'
         DC    CL3'07/'
         ORG   SDATES+42
         ORG   SDATES+42
         DC    H'213'
         DC    CL3'08/'
         ORG   SDATES+48
         ORG   SDATES+48
         DC    H'244'
         DC    CL3'09/'
         ORG   SDATES+54
         ORG   SDATES+54
         DC    H'274'
         DC    CL3'10/'
         ORG   SDATES+60
         ORG   SDATES+60
         DC    H'305'
         DC    CL3'11/'
         ORG   SDATES+66
         ORG   SDATES+66
         DC    H'335'
         DC    CL3'12/'
         ORG   SDATES+72
SLIMITS  DS    CL7
         ORG   SLIMITS+0
SDATLIM  DS    CL7
         ORG   SDATLIM+0
SMMLIM   DS    CL2
SDDLIM   DS    CL2
SYYLIM   DS    CL2
SXXLIM   DS    CL1
         ORG   SLIMITS+14
SCHKLMT  DS    CL3
         ORG   SCHKLMT+0
SYYDEC   DS    AL1
SDDEC    DS    CL2
         ORG   SCHKLMT+6
CP0001@  DC    AL4(HD1)
         DC    AL4(HD2)
         DC    AL4(HD3)
         DC    AL4(HD2)
         DC    AL4(HD4)
         DC    AL4(HD5)
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
SAVBUFAD EQU   @06
NDXI     EQU   @02
DOWNLIM  EQU   @04
UPLIM    EQU   @05
BINDAY   EQU   @03
BINYEAR  EQU   @04
BINMONTH EQU   @04
LOGRTNCD EQU   @03
CCAPTR   EQU   @11
IOPPTR   EQU   @10
RTNCODE  EQU   @15
RTNREG   EQU   @14
HMASMCCA EQU   0
CCAFBUFR EQU   HMASMCCA+4
CCADSAD  EQU   CCAFBUFR+124
CCATPAD  EQU   CCAFBUFR+128
CCAFLAG7 EQU   CCAFBUFR+132
CCAFIOP  EQU   HMASMCCA+140
CCAIOPTR EQU   CCAFIOP
CCAFSYS  EQU   HMASMCCA+148
CCASREL  EQU   CCAFSYS+12
CCAFLAGA EQU   CCAFSYS+21
CCAFSTA  EQU   HMASMCCA+188
CCAFICT  EQU   HMASMCCA+192
CCAFPGM  EQU   HMASMCCA+208
CCABLDLP EQU   CCAFPGM
CCADBLDL EQU   CCAFPGM+4
CCAFGTP  EQU   HMASMCCA+224
CCASEGTP EQU   CCAFGTP
@NM00014 EQU   HMASMCCA+244
CCAFFUNC EQU   HMASMCCA+264
CCAFLAG1 EQU   CCAFFUNC+8
CCAFLAG2 EQU   CCAFFUNC+11
CCAFPROC EQU   HMASMCCA+276
CCAFLAG3 EQU   CCAFPROC
CCAFDIS  EQU   HMASMCCA+278
CCAFLAG4 EQU   CCAFDIS
CCAFLAG5 EQU   CCAFDIS+1
CCAFLAG6 EQU   CCAFDIS+2
CCAFCNV  EQU   HMASMCCA+281
CCAFLAG8 EQU   CCAFCNV
CCAFCTL  EQU   HMASMCCA+282
CCAFLAG9 EQU   CCAFCTL
CCALSTDS EQU   CCAFCTL+8
CCAFDSNG EQU   HMASMCCA+298
CCAFLAGB EQU   CCAFDSNG
CCABLDLA EQU   0
@NM00030 EQU   CCABLDLA
CCABLDLL EQU   0
@NM00032 EQU   CCABLDLL
CCALKDRC EQU   @NM00032+20
@NM00034 EQU   CCABLDLL+124
CCAASMRC EQU   @NM00034+20
@NM00036 EQU   CCABLDLL+248
CCACPYRC EQU   @NM00036+20
@NM00038 EQU   CCABLDLL+372
CCACOMRC EQU   @NM00038+20
@NM00040 EQU   CCABLDLL+496
CCAZAPRC EQU   @NM00040+20
@NM00042 EQU   CCABLDLL+620
CCASUPRC EQU   @NM00042+20
@NM00044 EQU   CCABLDLL+744
CCAUPDRC EQU   @NM00044+20
CCABLDLM EQU   0
CCABELMT EQU   CCABLDLM+4
CCABMPOS EQU   CCABELMT
HMASMIOP EQU   0
IOPDSID  EQU   HMASMIOP
IOPFUNCT EQU   HMASMIOP+1
IOPRETRN EQU   HMASMIOP+2
IOPNAME  EQU   HMASMIOP+4
@NM00048 EQU   HMASMIOP+12
@NM00049 EQU   @NM00048
IOPDDNAM EQU   HMASMIOP+24
IOPBUFAD EQU   HMASMIOP+52
IOPDRMAP EQU   HMASMIOP+56
IOPINAME EQU   IOPDRMAP
IOPINAM  EQU   IOPINAME
IOPITYP  EQU   IOPINAM
IOPUSERL EQU   IOPDRMAP+11
IOPEND   EQU   IOPDRMAP+12
IOPLMCTL EQU   0
IOPQSMIF EQU   0
@NM00159 EQU   IOPQSMIF
IOPQSMLS EQU   IOPQSMIF+8
IOPQSMNM EQU   IOPQSMLS
IOPBS02  EQU   0
IOPBS04  EQU   0
IOPBAPF  EQU   IOPBS04
HMASMPRL EQU   0
PRLRLEN  EQU   HMASMPRL
PRLSPAN  EQU   HMASMPRL+2
PRLFLGS  EQU   PRLSPAN
PRLHEAD  EQU   PRLFLGS
PRLHEADO EQU   PRLFLGS
PRLBLANK EQU   PRLFLGS
PRLDATE  EQU   HMASMPRL+4
PRLHDADR EQU   PRLDATE
PRLTIME  EQU   HMASMPRL+7
PRLEND   EQU   HMASMPRL+10
CL0001@  EQU   0
CCADSIDA EQU   0
CCATYPEA EQU   0
IOPBS01  EQU   0
IOPBS03  EQU   0
LISTPARM EQU   0
LISTPRM1 EQU   LISTPARM
LISTPRM2 EQU   LISTPARM+2
LISTALL2 EQU   LISTPRM2
LISTPRM3 EQU   LISTPARM+4
LISTPRM4 EQU   LISTPARM+6
LISTDATE EQU   LISTPARM+7
LISTBDAT EQU   LISTDATE
LISTEDAT EQU   LISTDATE+6
IOPUDATA EQU   IOPEND
IOPINAM3 EQU   IOPINAME
@NM00055 EQU   IOPINAM3
IOPSTCMP EQU   IOPUDATA
IOPDYNDT EQU   IOPUDATA
IOPSPACE EQU   IOPDYNDT+44
IOPDTYPE EQU   IOPDYNDT+50
IOPNTMAX EQU   IOPDRMAP
IOPNTMAP EQU   IOPDRMAP
IOPCDMAP EQU   IOPNTMAP
IOPPTMAP EQU   IOPCDMAP
IOPSCMAP EQU   IOPPTMAP
IOPDIRCT EQU   IOPSCMAP+12
IOPCDMAX EQU   IOPDIRCT
IOPCQMAP EQU   IOPDRMAP
@NM00066 EQU   IOPUDATA
@NM00067 EQU   IOPUDATA
IOPASMNT EQU   IOPUDATA
IOPASMDR EQU   IOPASMNT
IOPABUNT EQU   IOPASMDR+1
IOPLMDNT EQU   IOPUDATA
IOPLMDDR EQU   IOPLMDNT
IOPLMLEP EQU   IOPLMDDR+1
IOPLMDF1 EQU   IOPLMLEP
IOPFLGS2 EQU   IOPLMDF1
IOPLMDF2 EQU   IOPLMLEP+1
IOPLMDF3 EQU   IOPLMLEP+2
IOPLMDF4 EQU   IOPLMLEP+3
IOPLMDF5 EQU   IOPLMDDR+5
IOPFLGS3 EQU   IOPLMDF5
IOPLMDFX EQU   IOPLMDNT+24
@NM00076 EQU   IOPLMDFX
IOPLNTRY EQU   IOPLMDFX+8
IOPLSYS  EQU   IOPLNTRY
IOPSYSLB EQU   IOPLSYS
IOPMACNT EQU   IOPUDATA
IOPMACDR EQU   IOPMACNT
IOPRMIDE EQU   IOPMACDR+1
IOPRMST  EQU   IOPRMIDE+7
IOPFMIDE EQU   IOPMACDR+9
IOPMACFX EQU   IOPMACNT+24
IOPBUNT  EQU   IOPMACFX
IOPMCEND EQU   IOPMACNT+104
IOPMACVR EQU   IOPMCEND
IOPMCENT EQU   IOPMACVR
IOPMCDTA EQU   IOPMCENT
IOPMCASM EQU   IOPMCDTA
IOPMACID EQU   IOPMCASM
IOPMACST EQU   IOPMCASM+7
IOPMCIND EQU   IOPMCENT+8
IOPEOFNT EQU   IOPUDATA
IOPSRCNT EQU   IOPUDATA
IOPSRCDR EQU   IOPSRCNT
@NM00087 EQU   IOPSRCDR+1
@NM00089 EQU   @NM00087+7
@NM00093 EQU   IOPSRCDR+9
IOPSRCFX EQU   IOPSRCNT+24
@NM00097 EQU   IOPSRCFX
IOPSREND EQU   IOPSRCNT+104
IOPSRCVR EQU   IOPSREND
IOPSNTRY EQU   IOPSRCVR
IOPSRDTA EQU   IOPSNTRY
IOPSRCID EQU   IOPSRDTA
IOPSRCST EQU   IOPSRDTA+7
IOPMODNT EQU   IOPUDATA
IOPMODDR EQU   IOPMODNT
@NM00103 EQU   IOPMODDR+1
@NM00105 EQU   @NM00103+7
@NM00109 EQU   IOPMODDR+9
IOPMODFX EQU   IOPMODNT+24
@NM00113 EQU   IOPMODFX
IOPMDLEP EQU   IOPMODFX+8
IOPMODF1 EQU   IOPMDLEP
IOPMODF2 EQU   IOPMDLEP+1
IOPMODF3 EQU   IOPMDLEP+2
IOPMODF4 EQU   IOPMDLEP+3
IOPMDEND EQU   IOPMODNT+104
IOPMODVR EQU   IOPMDEND
IOPMNTRY EQU   IOPMODVR
IOPMDDTA EQU   IOPMNTRY
IOPLMODS EQU   IOPMDDTA
IOPMODID EQU   IOPLMODS
IOPMODST EQU   IOPLMODS+7
IOPDLBNT EQU   IOPUDATA
IOPDLBDR EQU   IOPDLBNT
IOPDLBFX EQU   IOPDLBNT+24
@NM00124 EQU   IOPDLBFX
IOPDLEND EQU   IOPDLBNT+104
IOPDLBVR EQU   IOPDLEND
IOPDNTRY EQU   IOPDLBVR
IOPDSYS  EQU   IOPDNTRY
IOPSYSNT EQU   IOPUDATA
IOPSYSDR EQU   IOPSYSNT
IOPSYSF1 EQU   IOPSYSDR+4
IOPFLGS7 EQU   IOPSYSF1
IOPSYSFX EQU   IOPSYSNT+24
@NM00131 EQU   IOPSYSFX
IOPSYEND EQU   IOPSYSNT+184
IOPSYSVR EQU   IOPSYEND
IOPSYSTR EQU   IOPSYSVR
IOPSYNTR EQU   IOPSYSTR
IOPPTFNT EQU   IOPUDATA
IOPPTFDR EQU   IOPPTFNT
IOPPSTAT EQU   IOPPTFDR+2
IOPPTFF1 EQU   IOPPSTAT
IOPFLGS5 EQU   IOPPTFF1
IOPPTFF2 EQU   IOPPSTAT+1
IOPPTFF3 EQU   IOPPSTAT+3
IOPPTFFX EQU   IOPPTFNT+24
@NM00140 EQU   IOPPTFFX
@NM00141 EQU   @NM00140
IOPPDTES EQU   IOPPTFFX+41
@NM00144 EQU   IOPPDTES
IOPPTPFX EQU   IOPPDTES+6
IOPDATES EQU   IOPPTPFX
IOPPTEND EQU   IOPPTFNT+104
IOPPTFVR EQU   IOPPTEND
IOPPNTRY EQU   IOPPTFVR
IOPPMODS EQU   IOPPNTRY
IOPENTNT EQU   IOPUDATA+104
IOPSRLNT EQU   IOPUDATA+104
IOPPRENT EQU   IOPUDATA+104
IOPNPRNT EQU   IOPUDATA+104
IOPSUPNT EQU   IOPUDATA+104
IOPREQNT EQU   IOPUDATA+104
IOPIRQNT EQU   IOPUDATA+104
IOPFIDNT EQU   IOPUDATA+104
IOPDELNT EQU   IOPUDATA+104
IOPVERNT EQU   IOPUDATA+104
IOPSBYNT EQU   IOPUDATA+104
IOPQSMNT EQU   IOPUDATA
IOPQSMDR EQU   IOPQSMNT
IOPQFMNT EQU   IOPUDATA
IOPQFMDR EQU   IOPQFMNT
IOPQFEND EQU   IOPQFMNT+2
IOPQFMVR EQU   IOPQFEND
IOPQFMLS EQU   IOPQFMVR
IOPQFMNM EQU   IOPQFMLS
IOPPTSYS EQU   IOPUDATA
IOPPTSDR EQU   IOPPTSYS
IOPPTSFX EQU   IOPPTSYS+24
IOPDSSPC EQU   IOPPTSFX
IOPPTFG1 EQU   IOPPTSFX+34
IOPPSEND EQU   IOPPTSYS+1064
IOPPTSVR EQU   IOPPSEND
IOPPTNTR EQU   IOPPTSVR
@NM00169 EQU   IOPPTNTR
IOPPTFMD EQU   @NM00169
IOPPTREL EQU   IOPPTFMD
IOPBPDS  EQU   IOPUDATA
IOPBLEP1 EQU   IOPBPDS+8
IOPBLEP2 EQU   IOPBPDS+9
@NM00173 EQU   IOPBPDS+18
IOPBFTB0 EQU   @NM00173
IOPBFTB1 EQU   IOPBFTB0
PRLDATA  EQU   PRLEND
SLOGDATE EQU   PRLDATE
SLOGYY   EQU   SLOGDATE
SLOGDDF  EQU   SLOGDATE+1
SLOGTIME EQU   PRLTIME
SHHMMSS  EQU   WORKAREA+4
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
SLOGSECS EQU   SLOGTIME+4
SLOGMINS EQU   SLOGTIME+2
SLOGHRS  EQU   SLOGTIME
IOPBCEND EQU   IOPBPDS+21
IOPBFTB3 EQU   IOPBFTB0+2
IOPBFTB2 EQU   IOPBFTB0+1
@NM00175 EQU   IOPBFTB1
IOPBAPFP EQU   IOPBFTB1
IOPBSSI  EQU   IOPBFTB1
IOPBPAGA EQU   IOPBFTB1
@NM00174 EQU   IOPBFTB1
IOPBAOSL EQU   IOPBFTB1
IOPBSEPA EQU   IOPBPDS+15
IOPBFTBL EQU   IOPBPDS+13
IOPBSTOR EQU   IOPBPDS+10
IOPBREFR EQU   IOPBLEP2
IOPBLEF  EQU   IOPBLEP2
IOPBTEST EQU   IOPBLEP2
IOPBNE   EQU   IOPBLEP2
@NM00172 EQU   IOPBLEP2
IOPBDC   EQU   IOPBLEP2
@NM00171 EQU   IOPBLEP1
IOPBSCTR EQU   IOPBLEP1
IOPBOL   EQU   IOPBLEP1
@NM00170 EQU   IOPBLEP1
IOPBOVLY EQU   IOPBLEP1
IOPBREUS EQU   IOPBLEP1
IOPBRENT EQU   IOPBLEP1
IOPBNL   EQU   IOPBPDS+7
IOPBTTRN EQU   IOPBPDS+4
IOPBZERO EQU   IOPBPDS+3
IOPBTTRT EQU   IOPBPDS
IOPPTIND EQU   IOPPTNTR+8
IOPPTSND EQU   IOPPTREL
@NM00168 EQU   IOPPTSFX+872
IOPSYZPP EQU   IOPPTSFX+772
IOPSYZPR EQU   IOPPTSFX+771
IOPSYZPS EQU   IOPPTSFX+763
IOPSYZAP EQU   IOPPTSFX+755
IOPSYUPP EQU   IOPPTSFX+655
IOPSYUPR EQU   IOPPTSFX+654
IOPSYUPS EQU   IOPPTSFX+646
IOPSYUPD EQU   IOPPTSFX+638
IOPSYSPP EQU   IOPPTSFX+538
IOPSYSPR EQU   IOPPTSFX+537
IOPSYSPS EQU   IOPPTSFX+529
IOPSYSUP EQU   IOPPTSFX+521
IOPSYLKP EQU   IOPPTSFX+421
IOPSYLKR EQU   IOPPTSFX+420
IOPSYLKS EQU   IOPPTSFX+412
IOPSYLKD EQU   IOPPTSFX+404
IOPSYCPP EQU   IOPPTSFX+304
IOPSYCPR EQU   IOPPTSFX+303
IOPSYCPS EQU   IOPPTSFX+295
IOPSYCPY EQU   IOPPTSFX+287
IOPSYCOP EQU   IOPPTSFX+187
IOPSYCOR EQU   IOPPTSFX+186
IOPSYCOS EQU   IOPPTSFX+178
IOPSYCOM EQU   IOPPTSFX+170
IOPSYASP EQU   IOPPTSFX+70
IOPSYASR EQU   IOPPTSFX+69
IOPSYASS EQU   IOPPTSFX+61
IOPSYASM EQU   IOPPTSFX+53
@NM00167 EQU   IOPPTSFX+35
@NM00166 EQU   IOPPTFG1
IOPPTSNJ EQU   IOPPTFG1
IOPPTSNP EQU   IOPPTFG1
IOPSYPLN EQU   IOPPTSFX+32
IOPDSPFX EQU   IOPPTSFX+6
IOPDSDIR EQU   IOPDSSPC+4
IOPDSSEC EQU   IOPDSSPC+2
IOPDSPRM EQU   IOPDSSPC
@NM00165 EQU   IOPPTSDR+4
IOPPTPEM EQU   IOPPTSDR+2
IOPPCNVL EQU   IOPPTSDR+1
@NM00164 EQU   IOPPTSDR
IOPQFMTP EQU   IOPQFMLS+8
@NM00163 EQU   IOPQFMLS+7
IOPQFMND EQU   IOPQFMNM
@NM00162 EQU   IOPQFMDR
@NM00158 EQU   IOPQSMDR
@NM00157 EQU   IOPSBYNT+8
IOPSBYST EQU   IOPSBYNT+7
IOPSBYNM EQU   IOPSBYNT
@NM00156 EQU   IOPVERNT+8
IOPVERST EQU   IOPVERNT+7
IOPVERNM EQU   IOPVERNT
@NM00155 EQU   IOPDELNT+8
IOPDELST EQU   IOPDELNT+7
IOPDELNM EQU   IOPDELNT
@NM00154 EQU   IOPFIDNT+8
IOPFIDST EQU   IOPFIDNT+7
IOPFIDNM EQU   IOPFIDNT
@NM00153 EQU   IOPIRQNT+8
IOPIRQST EQU   IOPIRQNT+7
IOPIRQNM EQU   IOPIRQNT
@NM00152 EQU   IOPREQNT+8
IOPREQST EQU   IOPREQNT+7
IOPREQNM EQU   IOPREQNT
@NM00151 EQU   IOPSUPNT+8
IOPSUPST EQU   IOPSUPNT+7
IOPSUPNM EQU   IOPSUPNT
@NM00150 EQU   IOPNPRNT+8
IOPNPRST EQU   IOPNPRNT+7
IOPNPRNM EQU   IOPNPRNT
@NM00149 EQU   IOPPRENT+8
IOPPREST EQU   IOPPRENT+7
IOPPRENM EQU   IOPPRENT
@NM00148 EQU   IOPSRLNT+8
IOPSRLST EQU   IOPSRLNT+7
@NM00147 EQU   IOPSRLNT+4
IOPSRLNM EQU   IOPSRLNT
@NM00146 EQU   IOPENTNT+8
IOPENTST EQU   IOPENTNT+7
IOPENTNM EQU   IOPENTNT
IOPPIND  EQU   IOPPNTRY+8
IOPPTFND EQU   IOPPMODS
IOPPFMID EQU   IOPPTFFX+73
@NM00145 EQU   IOPPTPFX+24
IOPUCLT  EQU   IOPDATES+21
IOPUCLD  EQU   IOPDATES+18
IOPACCT  EQU   IOPDATES+15
IOPACCD  EQU   IOPDATES+12
IOPRSTT  EQU   IOPDATES+9
IOPRSTD  EQU   IOPDATES+6
IOPAPPT  EQU   IOPDATES+3
IOPAPPD  EQU   IOPDATES
IOPRECT  EQU   @NM00144+3
IOPRECD  EQU   @NM00144
@NM00143 EQU   IOPPTFFX+8
@NM00142 EQU   @NM00140+7
IOPPRELN EQU   @NM00141
@NM00139 EQU   IOPPTFDR+20
IOPSBYNO EQU   IOPPTFDR+13
IOPDBYNO EQU   IOPPTFDR+6
@NM00138 EQU   IOPPTFF3
IOPFLF   EQU   IOPPTFF3
IOPDBYP  EQU   IOPPTFF3
IOPSBYP  EQU   IOPPTFF3
IOPPMDLP EQU   IOPPTFF2+1
IOPPADDP EQU   IOPPTFF2+1
@NM00137 EQU   IOPPTFF2+1
IOPLRFP  EQU   IOPPTFF2
IOPJCLP  EQU   IOPPTFF2
IOPSUPP  EQU   IOPPTFF2
IOPREQP  EQU   IOPPTFF2
IOPPREP  EQU   IOPPTFF2
IOPNPRP  EQU   IOPPTFF2
IOPIRQP  EQU   IOPPTFF2
IOPDELP  EQU   IOPPTFF2
IOPREGEN EQU   IOPFLGS5
IOPBYP   EQU   IOPFLGS5
IOPDUMMP EQU   IOPFLGS5
@NM00136 EQU   IOPFLGS5
IOPERROR EQU   IOPFLGS5
IOPACC   EQU   IOPFLGS5
IOPRES   EQU   IOPFLGS5
IOPAPP   EQU   IOPFLGS5
IOPPTYPE EQU   IOPPTFDR+1
@NM00135 EQU   IOPPTFDR
IOPSYSTP EQU   IOPSYSTR+8
IOPSYSND EQU   IOPSYNTR
@NM00134 EQU   IOPSYSFX+21
IOPSYSID EQU   IOPSYSFX+13
IOPNUCID EQU   IOPSYSFX+12
IOPSREL  EQU   IOPSYSFX+8
@NM00133 EQU   @NM00131+7
@NM00132 EQU   @NM00131
@NM00130 EQU   IOPSYSDR+5
@NM00129 EQU   IOPFLGS7
IOPSYNG  EQU   IOPFLGS7
IOPSYDL  EQU   IOPFLGS7
IOPSTSNP EQU   IOPFLGS7
IOPMTSNP EQU   IOPFLGS7
IOPPEMAX EQU   IOPSYSDR+2
IOPSCNVL EQU   IOPSYSDR+1
@NM00128 EQU   IOPSYSDR
IOPDLIND EQU   IOPDNTRY+8
IOPDLBND EQU   IOPDSYS
@NM00127 EQU   IOPDLBFX+8
@NM00126 EQU   @NM00124+7
@NM00125 EQU   @NM00124
@NM00123 EQU   IOPDLBDR+1
@NM00122 EQU   IOPDLBDR
IOPMDIND EQU   IOPMNTRY+8
@NM00121 EQU   IOPMODST
IOPMODND EQU   IOPMODID
IOPDLIB  EQU   IOPMODFX+72
@NM00120 EQU   IOPMODFX+12
@NM00119 EQU   IOPMODF4
@NM00118 EQU   IOPMODF3
@NM00117 EQU   IOPMODF2
IOPMPAGA EQU   IOPMODF2
IOPMNE   EQU   IOPMODF2
@NM00116 EQU   IOPMODF1
IOPMDC   EQU   IOPMODF1
IOPMREFR EQU   IOPMODF1
IOPMOVLY EQU   IOPMODF1
IOPMSCTR EQU   IOPMODF1
IOPMREUS EQU   IOPMODF1
IOPMRENT EQU   IOPMODF1
IOPMAPF  EQU   IOPMODF1
@NM00115 EQU   @NM00113+7
@NM00114 EQU   @NM00113
@NM00112 EQU   IOPMODDR+17
@NM00111 EQU   @NM00109+7
@NM00110 EQU   @NM00109
@NM00108 EQU   @NM00105
@NM00107 EQU   @NM00105
@NM00106 EQU   @NM00105
@NM00104 EQU   @NM00103
@NM00102 EQU   IOPMODDR
IOPSRIND EQU   IOPSNTRY+8
@NM00101 EQU   IOPSRCST
IOPSRCND EQU   IOPSRCID
IOPSRDLB EQU   IOPSRCFX+72
IOPSRSYS EQU   IOPSRCFX+64
@NM00100 EQU   IOPSRCFX+8
@NM00099 EQU   @NM00097+7
@NM00098 EQU   @NM00097
@NM00096 EQU   IOPSRCDR+18
IOPSRLNG EQU   IOPSRCDR+17
@NM00095 EQU   @NM00093+7
@NM00094 EQU   @NM00093
@NM00092 EQU   @NM00089
@NM00091 EQU   @NM00089
@NM00090 EQU   @NM00089
@NM00088 EQU   @NM00087
@NM00086 EQU   IOPSRCDR
IOPEOFND EQU   IOPEOFNT
IOPMCTYP EQU   IOPMCIND
@NM00085 EQU   IOPMACST
IOPMACND EQU   IOPMACID
IOPMCDLB EQU   IOPMACFX+72
IOPMCSYS EQU   IOPMACFX+64
@NM00084 EQU   IOPMACFX+8
IOPBUTYP EQU   IOPBUNT+7
IOPBUSMD EQU   IOPBUNT
@NM00083 EQU   IOPMACDR+18
IOPMCLNG EQU   IOPMACDR+17
IOPFMST  EQU   IOPFMIDE+7
IOPFMID  EQU   IOPFMIDE
@NM00082 EQU   IOPRMST
IOPRMASM EQU   IOPRMST
@NM00081 EQU   IOPRMST
IOPRMID  EQU   IOPRMIDE
@NM00080 EQU   IOPMACDR
IOPLMIND EQU   IOPLNTRY+8
IOPLMDND EQU   IOPSYSLB
@NM00078 EQU   @NM00076+7
@NM00077 EQU   @NM00076
@NM00075 EQU   IOPLMDDR+6
@NM00074 EQU   IOPFLGS3
IOPCHREP EQU   IOPFLGS3
IOPLINK  EQU   IOPFLGS3
IOPCOPY  EQU   IOPFLGS3
@NM00073 EQU   IOPLMDF4
@NM00072 EQU   IOPLMDF3
@NM00071 EQU   IOPLMDF2
IOPPAGA  EQU   IOPLMDF2
IOPNE    EQU   IOPLMDF2
@NM00070 EQU   IOPFLGS2
IOPDC    EQU   IOPFLGS2
IOPREFR  EQU   IOPFLGS2
IOPOVLY  EQU   IOPFLGS2
IOPSCTR  EQU   IOPFLGS2
IOPREUS  EQU   IOPFLGS2
IOPRENT  EQU   IOPFLGS2
IOPAPF   EQU   IOPFLGS2
@NM00069 EQU   IOPLMDDR
@NM00068 EQU   IOPASMDR+9
IOPABUTP EQU   IOPABUNT+7
IOPABUPT EQU   IOPABUNT
IOPNTLVL EQU   IOPASMDR
IOPALLOC EQU   @NM00067+4
IOPUSED  EQU   @NM00067
IOPTPSEQ EQU   @NM00066+8
IOPVLSER EQU   @NM00066+2
IOPBLKSI EQU   @NM00066
IOPCQMAX EQU   IOPCQMAP+12
@NM00065 EQU   IOPCQMAP+11
@NM00064 EQU   IOPCQMAP+8
@NM00063 EQU   IOPCQMAP
IOPPTMAX EQU   IOPCDMAX
@NM00062 EQU   IOPSCMAP+11
@NM00061 EQU   IOPSCMAP+8
@NM00060 EQU   IOPSCMAP
IOPDIRMX EQU   IOPNTMAX+12
@NM00059 EQU   IOPNTMAX+11
@NM00058 EQU   IOPNTMAX+8
@NM00057 EQU   IOPNTMAX
@NM00056 EQU   IOPDTYPE
IOPDMOD  EQU   IOPDTYPE
IOPDJCL  EQU   IOPDTYPE
IOPDSRC  EQU   IOPDTYPE
IOPDMAC  EQU   IOPDTYPE
IOPSDIR  EQU   IOPSPACE+4
IOPSSCND EQU   IOPSPACE+2
IOPSPRIM EQU   IOPSPACE
IOPDSN   EQU   IOPDYNDT
IOPNTYPE EQU   IOPSTCMP+17
IOPNNAME EQU   IOPSTCMP+9
IOPOTYPE EQU   IOPSTCMP+8
IOPONAME EQU   IOPSTCMP
IOPISEQ3 EQU   IOPINAM3+6
IOPITYP3 EQU   @NM00055+5
IOPIPTF3 EQU   @NM00055
LISTEYY  EQU   LISTEDAT+4
LISTEDD  EQU   LISTEDAT+2
LISTEMM  EQU   LISTEDAT
LISTBYY  EQU   LISTBDAT+4
LISTBDD  EQU   LISTBDAT+2
LISTBMM  EQU   LISTBDAT
@NM00005 EQU   LISTPRM4
LISTXREF EQU   LISTPRM4
LISTSEL  EQU   LISTPRM4
@NM00004 EQU   LISTPRM3+1
LISTERR  EQU   LISTPRM3+1
LISTBYP  EQU   LISTPRM3+1
LISTDEL  EQU   LISTPRM3+1
LISTNSUP EQU   LISTPRM3+1
LISTSUP  EQU   LISTPRM3+1
LISTUSER EQU   LISTPRM3
LISTAPAR EQU   LISTPRM3
LISTPTF  EQU   LISTPRM3
LISTFUNC EQU   LISTPRM3
LISTRES  EQU   LISTPRM3
LISTNOAC EQU   LISTPRM3
LISTNOAP EQU   LISTPRM3
LISTALL3 EQU   LISTPRM3
@NM00003 EQU   LISTPRM2+1
LISTMCS  EQU   LISTPRM2+1
LISTFMD  EQU   LISTPRM2+1
LISTSMD  EQU   LISTPRM2+1
LISTSYS  EQU   LISTPRM2
LISTDLB  EQU   LISTPRM2
LISTSRC  EQU   LISTPRM2
LISTMOD  EQU   LISTPRM2
LISTMAC  EQU   LISTPRM2
LISTLMD  EQU   LISTPRM2
LISTASM  EQU   LISTPRM2
@NM00002 EQU   LISTPRM1+1
LISTLOG  EQU   LISTPRM1+1
@NM00001 EQU   LISTPRM1
LISTPTS  EQU   LISTPRM1
LISTACRQ EQU   LISTPRM1
LISTCRQ  EQU   LISTPRM1
LISTSCDS EQU   LISTPRM1
LISTACDS EQU   LISTPRM1
LISTCDS  EQU   LISTPRM1
LISTALL1 EQU   LISTPRM1
PRLCONC  EQU   PRLTIME+2
@NM00177 EQU   PRLTIME
@NM00176 EQU   PRLFLGS
IOPBS04E EQU   IOPBS04+2
IOPBAPFC EQU   IOPBAPF+1
IOPBAPFL EQU   IOPBAPF
IOPBS2NM EQU   IOPBS02+3
IOPBS2EP EQU   IOPBS02
IOPQSMTP EQU   IOPQSMLS+8
@NM00161 EQU   IOPQSMLS+7
IOPQSMND EQU   IOPQSMNM
@NM00160 EQU   @NM00159+7
IOPQSMFM EQU   @NM00159
@NM00079 EQU   IOPLMCTL+17
IOPLMCRD EQU   IOPLMCTL+9
IOPLMCRN EQU   IOPLMCTL+1
IOPLMCC  EQU   IOPLMCTL
@NM00054 EQU   IOPUSERL
@NM00053 EQU   IOPUSERL
IOPALIS  EQU   IOPUSERL
IOPTTR   EQU   IOPDRMAP+8
IOPINAM2 EQU   IOPINAM+1
IOPITYP2 EQU   IOPITYP
@NM00052 EQU   HMASMIOP+32
IOPDELDD EQU   IOPDDNAM
@NM00051 EQU   @NM00048+10
IOPSEQNO EQU   @NM00048+8
@NM00050 EQU   @NM00049+7
IOPPTFNM EQU   @NM00049
IOPNAM17 EQU   IOPNAME
IOPTYPE  EQU   HMASMIOP+3
CCABMREC EQU   CCABELMT+10
CCABPOS  EQU   CCABMPOS+8
CCABNAME EQU   CCABMPOS
@NM00047 EQU   CCABLDLM+2
@NM00046 EQU   CCABLDLM
CCAUPDPM EQU   @NM00044+24
@NM00045 EQU   @NM00044+21
CCARUPDT EQU   CCAUPDRC
CCAUPDSP EQU   @NM00044+12
CCAUPDTE EQU   @NM00044+8
CCAUPDNM EQU   @NM00044
CCASUPPM EQU   @NM00042+24
@NM00043 EQU   @NM00042+21
CCARSUP  EQU   CCASUPRC
CCASUPSP EQU   @NM00042+12
CCAIOSUP EQU   @NM00042+8
CCASUPNM EQU   @NM00042
CCAZAPPM EQU   @NM00040+24
@NM00041 EQU   @NM00040+21
CCARZAP  EQU   CCAZAPRC
CCAZAPSP EQU   @NM00040+12
CCASPZAP EQU   @NM00040+8
CCAZAPNM EQU   @NM00040
CCACOMPM EQU   @NM00038+24
@NM00039 EQU   @NM00038+21
CCARCOMP EQU   CCACOMRC
CCACOMSP EQU   @NM00038+12
CCACOMRS EQU   @NM00038+8
CCACOMNM EQU   @NM00038
CCACPYPM EQU   @NM00036+24
@NM00037 EQU   @NM00036+21
CCARCOPY EQU   CCACPYRC
CCACPYSP EQU   @NM00036+12
CCACOPY  EQU   @NM00036+8
CCACPYNM EQU   @NM00036
CCAASMPM EQU   @NM00034+24
@NM00035 EQU   @NM00034+21
CCARASM  EQU   CCAASMRC
CCAASMSP EQU   @NM00034+12
CCAASM   EQU   @NM00034+8
CCAASMNM EQU   @NM00034
CCALKDPM EQU   @NM00032+24
@NM00033 EQU   @NM00032+21
CCARLINK EQU   CCALKDRC
CCALKDSP EQU   @NM00032+12
CCALKED  EQU   @NM00032+8
CCALKDNM EQU   @NM00032
CCAPGMPM EQU   @NM00030+24
@NM00031 EQU   @NM00030+21
CCABPGRC EQU   @NM00030+20
CCABPGSP EQU   @NM00030+12
CCABPGAD EQU   @NM00030+8
CCABPGNM EQU   @NM00030
CCAEND   EQU   HMASMCCA+371
@NM00029 EQU   HMASMCCA+309
CCACURDD EQU   CCAFDSNG+3
CCACURDS EQU   CCAFDSNG+2
@NM00028 EQU   CCAFLAGB
CCAOUTNG EQU   CCAFLAGB
CCALOGNG EQU   CCAFLAGB
CCAFMID  EQU   HMASMCCA+291
CCARPTDS EQU   CCAFCTL+7
CCATIME  EQU   CCAFCTL+4
CCADATE  EQU   CCAFCTL+1
@NM00027 EQU   CCAFLAG9
CCARVCAN EQU   CCAFLAG9
CCARVEST EQU   CCAFLAG9
CCAPTSNJ EQU   CCAFLAG9
CCASTSNP EQU   CCAFLAG9
CCAMTSNP EQU   CCAFLAG9
CCAPTSNP EQU   CCAFLAG9
@NM00026 EQU   CCAFLAG8
CCAACDSC EQU   CCAFLAG8
CCACDSC  EQU   CCAFLAG8
@NM00025 EQU   CCAFLAG6
CCAACRUP EQU   CCAFLAG6
CCACRQUP EQU   CCAFLAG6
CCAACDUP EQU   CCAFLAG6
CCACDSUP EQU   CCAFLAG6
@NM00024 EQU   CCAFLAG5
CCAACROS EQU   CCAFLAG5
CCACRQOS EQU   CCAFLAG5
CCAACDOS EQU   CCAFLAG5
CCACDSOS EQU   CCAFLAG5
@NM00023 EQU   CCAFLAG4
CCAACRIS EQU   CCAFLAG4
CCACRQIS EQU   CCAFLAG4
CCAACDIS EQU   CCAFLAG4
CCACDSIS EQU   CCAFLAG4
@NM00022 EQU   CCAFLAG3+1
CCARGNP  EQU   CCAFLAG3+1
CCADISRQ EQU   CCAFLAG3+1
CCAICTOK EQU   CCAFLAG3
CCADELP  EQU   CCAFLAG3
CCACMPRS EQU   CCAFLAG3
CCAZAPP  EQU   CCAFLAG3
CCALINKP EQU   CCAFLAG3
CCACOPYP EQU   CCAFLAG3
CCAASIP  EQU   CCAFLAG3
CCAUPDP  EQU   CCAFLAG3
CCAEOSMP EQU   CCAFLAG2
CCAEOFNC EQU   CCAFLAG2
@NM00021 EQU   CCAFLAG2
CCACHECK EQU   CCAFLAG2
CCATERM  EQU   CCAFLAG2
CCASVCLB EQU   CCAFLAG2
CCANCPTF EQU   CCAFLAG2
@NM00020 EQU   CCAFLAG1+1
CCAUNL   EQU   CCAFLAG1+1
CCARESET EQU   CCAFLAG1+1
CCALOG   EQU   CCAFLAG1+1
CCACNV   EQU   CCAFLAG1+1
CCALIST  EQU   CCAFLAG1
CCAUPDU  EQU   CCAFLAG1
CCAUPDJ  EQU   CCAFLAG1
CCARES   EQU   CCAFLAG1
CCAREJ   EQU   CCAFLAG1
CCAACCPT EQU   CCAFLAG1
CCAAPPLY EQU   CCAFLAG1
CCAREC   EQU   CCAFLAG1
CCAFUNCT EQU   CCAFFUNC
@NM00019 EQU   @NM00014+18
@NM00018 EQU   @NM00014+16
CCATBLPA EQU   @NM00014+12
@NM00017 EQU   @NM00014+8
@NM00016 EQU   @NM00014+4
@NM00015 EQU   @NM00014
CCAIFGTP EQU   CCAFGTP+16
CCAGTP3  EQU   CCAFGTP+12
CCAGTP2  EQU   CCAFGTP+8
CCAGTP1  EQU   CCAFGTP+4
CCASETAD EQU   CCASEGTP
CCACLST  EQU   CCAFPGM+12
CCASPDCB EQU   CCAFPGM+8
CCAICLMD EQU   CCAFICT+12
CCAICMOD EQU   CCAFICT+8
CCAICPTF EQU   CCAFICT+4
CCAICT   EQU   CCAFICT
CCARVAD  EQU   CCAFSTA
CCAACDID EQU   CCAFSYS+32
CCACDSID EQU   CCAFSYS+24
CCALNLEN EQU   CCAFSYS+22
@NM00013 EQU   CCAFLAGA
CCAPSYSF EQU   CCAFLAGA
CCAASYSF EQU   CCAFLAGA
CCACSYSF EQU   CCAFLAGA
CCANUCID EQU   CCAFSYS+20
CCAASREL EQU   CCAFSYS+16
CCACSREL EQU   CCASREL
CCAPEMAX EQU   CCAFSYS+10
CCAPGLEN EQU   CCAFSYS+8
CCAIOPAS EQU   CCAFSYS+4
CCAIOPCS EQU   CCAFSYS
CCAPESIZ EQU   CCAFIOP+4
@NM00012 EQU   CCAFLAG7+3
CCALOGP  EQU   CCAFLAG7+2
CCAOUTP  EQU   CCAFLAG7+2
CCASLBP  EQU   CCAFLAG7+2
CCARPTP  EQU   CCAFLAG7+2
CCALISTP EQU   CCAFLAG7+2
CCAJCLP  EQU   CCAFLAG7+2
CCAPTFP  EQU   CCAFLAG7+2
CCATLBP  EQU   CCAFLAG7+2
CCAUT3P  EQU   CCAFLAG7+1
CCAUT2P  EQU   CCAFLAG7+1
CCAUT1P  EQU   CCAFLAG7+1
CCAWK5P  EQU   CCAFLAG7+1
CCAWK4P  EQU   CCAFLAG7+1
CCAWK3P  EQU   CCAFLAG7+1
CCAWK2P  EQU   CCAFLAG7+1
CCAWK1P  EQU   CCAFLAG7+1
CCAACRQP EQU   CCAFLAG7
CCACRQP  EQU   CCAFLAG7
CCASTSP  EQU   CCAFLAG7
CCAMTSP  EQU   CCAFLAG7
CCAPTSP  EQU   CCAFLAG7
CCASCDSP EQU   CCAFLAG7
CCAACDSP EQU   CCAFLAG7
CCACDSP  EQU   CCAFLAG7
@NM00011 EQU   CCAFBUFR+122
@NM00010 EQU   CCAFBUFR+120
@NM00009 EQU   CCAFBUFR+118
CCATBFMX EQU   CCAFBUFR+116
CCA4BFMX EQU   CCAFBUFR+114
CCA3BFMX EQU   CCAFBUFR+112
CCA2BFMX EQU   CCAFBUFR+110
CCA1BFMX EQU   CCAFBUFR+108
CCAXBFMX EQU   CCAFBUFR+106
CCAQBFMX EQU   CCAFBUFR+104
CCASBFMX EQU   CCAFBUFR+102
CCAMBFMX EQU   CCAFBUFR+100
CCAPBFMX EQU   CCAFBUFR+98
CCAVBFMX EQU   CCAFBUFR+96
CCAABFMX EQU   CCAFBUFR+94
CCACBFMX EQU   CCAFBUFR+92
@NM00008 EQU   CCAFBUFR+88
@NM00007 EQU   CCAFBUFR+84
CCA4BFSZ EQU   CCAFBUFR+80
CCATBFSZ EQU   CCAFBUFR+76
CCAWBFSZ EQU   CCAFBUFR+72
CCAQBFSZ EQU   CCAFBUFR+68
CCAPBFSZ EQU   CCAFBUFR+64
CCAVBFSZ EQU   CCAFBUFR+60
CCACBFSZ EQU   CCAFBUFR+56
@NM00006 EQU   CCAFBUFR+52
CCA4BFOA EQU   CCAFBUFR+48
CCA4BFIA EQU   CCAFBUFR+44
CCATBFIA EQU   CCAFBUFR+40
CCAWBFOA EQU   CCAFBUFR+36
CCAWBFIA EQU   CCAFBUFR+32
CCAQBFOA EQU   CCAFBUFR+28
CCAQBFIA EQU   CCAFBUFR+24
CCAPBFOA EQU   CCAFBUFR+20
CCAPBFIA EQU   CCAFBUFR+16
CCAVBFOA EQU   CCAFBUFR+12
CCAVBFIA EQU   CCAFBUFR+8
CCACBFOA EQU   CCAFBUFR+4
CCACBFIA EQU   CCAFBUFR
CCAID    EQU   HMASMCCA
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00162 EQU   EXT
@RT00167 EQU   EXT
@RT00174 EQU   EXT
@RC00227 EQU   @EL00003
@RF00263 EQU   @EL00003
@ENDDATA EQU   *
         END   HMASMLOG,(C'PLS2048',0802,78334)
