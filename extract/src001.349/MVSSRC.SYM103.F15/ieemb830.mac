         TITLE 'IEEMB830 - SMF RECORD MANAGER                          *
                        '
IEEMB830 CSECT
* A (SMFMAJOR) APPROX. 273200                                @ZA10115*/
* A (ENQBEGIN) APPROX. 271700, 277020                        @ZA10115*/
* A (INITIAL) APPROX. 298705                                 @ZA10115*/
* A (IEEMB830) APPROX. 109500, 112500                        @ZA10115*/
* A (STAERTN) SEGMENT, A (IHASDWA) MAPPING MACROS.           @ZA10115*/
* A DECLARES * (P, AREA256, CORESW, REG5 - REG14,            @ZA10115*/
*              STAEPARM, EXITPARM)                           @ZA10115*/
* A APPROX. 295700, 299600, 314700, 316200                   @ZA10115*/
* A (EXIT) APPROX. 317250, 318200                            @ZA10115*/
* A DECLARES (ENQBEGIN) APPROX. 271700, 272110               @ZA12386*/
* C MAINLINE APPROX. 275600, 276200, 298748, 299400,299600,  @ZA12386*/
*                    314200, 314700                          @ZA12386*/
* C 15083200 MOVE FROM RET = HAVE LIST                       @ZA31277*/
* A 27202000,27206000,27718200-27719100 RET = HAVE LIST      @ZA31277*/
* C 15065603,15069603               BYPASS DUMP IF X22 ABEND @ZA31684*/
* A 15065800,15074600,15075400,15075600,15079300,15080400    @ZA31684*/
* A 30071000,30071500                RESET FUNCTION FLAGS    @ZA33075*/
         BALR  @11,0                   MODULE ADDRESSIBILITY
START    DS    0H                                              @ZA10115
         USING *,@11
IEEMB830 MODID BR=YES                  MODULE ID
*RECPTR=REG1;                          /* SET BASE FOR SMF RECORD    */
         LR    RECPTR,REG1                                      02S0061
*RESPECIFY REG1 UNRESTRICTED;                                   02S0062
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= PROLOG                                              */
*/*                                                                  */
*/*DESCRIPTIVE NAME= ESTABLISH DYNAMIC AREA FOR MODULE               */
*/*                  ALSO PREFORM ESTAE ENVIRONMENT INIT.    @ZA10115*/
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  GETMAIN FOR MODULE'S DYNAMIC AREA. SET UP ADDRESSABILITY@ZA10115*/
*/*  TO THE DYNAMIC AREA AND SET REGISTER 13 WITH THE SAVE AREA      */
*/*  ADDRESS. ALSO PERFORMS INITIALIZATION OF ESTAE ENVIRON- @ZA10115*/
*/*  MENT. RECOVERY ADDRESS POINTS TO STAERTN.               @ZA10115*/
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= IN-LINE SEGMENT                                      */
*/*  INPUT= NONE                                                     */
*/*                                                                  */
*/*EXITS=                                                            */
*/*  CONDITION= NORMAL- ADDRESSIBILITY ESTABLISHED TO GOTTEN DYNAMIC */
*/*             AREA AND ESTAE INITIALIZATION PERFORMED.     @ZA10115*/
*/*  OUTPUT=                                                         */
*/*    REGISTER 13- SAVE AREA ADDRESS                                */
*/*  RETURN CODES= NONE                                              */
*/*                                                                  */
*/********************************************************************/
*GEN(L     @00,@SIZDATD);              /* SIZE OF DYNAM CORE TO GET  */
         L     @00,@SIZDATD
*GEN(GETMAIN R,LV=(0));                /* GET DYNAMIC AREA           */
         GETMAIN R,LV=(0)
*GEN(LR    @12,@01);                   /* DYNAM AREA ADDRESSIBILITY  */
         LR    @12,@01
*GEN(USING @DATD,@12);                                          03S0066
         USING @DATD,@12
*GEN(LA    @13,@SA00001);              /* SAVE AREA POINTER          */
         LA    @13,@SA00001
*/********************************************************************/
*/*                                                                  */
*/* SETUP ESTAE ENVIRONMENT: INIT PARMLIST, ISSUE ESTAE      @ZA10115*/
*/*                                                                  */
*/********************************************************************/
*RFY (REG7,REG10) RSTD;            /* REG7 IS N, REG10 IS P  @ZA10115*/
*P = REG12;                         /* PTR TO GETMAINED AREA @ZA10115*/
         LR    P,REG12                                          03S0069
*N = (ADDR(@ENDDATD)-ADDR(@DATD)); /* SIZE OF AREA FOR LOOP  @ZA10115*/
         LA    N,@ENDDATD                                       03S0070
         LA    @02,@DATD                                        03S0070
         SLR   N,@02                                            03S0070
*DO WHILE(N>=256);                  /* BEGINNING OF LOOP TO  @ZA10115*/
         B     @DE00071                                         03S0071
@DL00071 DS    0H                                               03S0072
*   AREA256 = ''B;                  /* ZERO OUT GETMAINED    @ZA10115*/
         XC    AREA256(256,P),AREA256(P)                        03S0072
*   N = N-256;                      /* AREA OF CORE.         @ZA10115*/
         LA    @06,256                                          03S0073
         SLR   N,@06                                            03S0073
*   P = P+256;                      /*                       @ZA10115*/
         ALR   P,@06                                            03S0074
*END;                               /*                       @ZA10115*/
@DE00071 CH    N,@CH00100                                       03S0075
         BNL   @DL00071                                         03S0075
*IF N>0 THEN                        /* ANY LEFT, IF YES THEN @ZA10115*/
         LTR   N,N                                              03S0076
         BNP   @RF00076                                         03S0076
*   AREA256(1:N) = AREA256(1:N)&&AREA256(1:N); /* FINISH UP. @ZA10115*/
         LR    @06,N                                            03S0077
         BCTR  @06,0                                            03S0077
         EX    @06,@SX02039                                     03S0077
*RFY (REG7,REG10) UNRSTD;          /* R7&10 NO LONGER NEEDED @ZA10115*/
@RF00076 DS    0H                                               03S0079
*CORESW = '1'B;                     /* TURN ON CORE SWITCH   @ZA10115*/
         OI    CORESW,B'01000000'                               03S0079
*RFY (REG6,REG4,REG12,REG13) RSTD; /*                        @ZA10115*/
*REG4 = ADDR(STAEPARM);             /* PARM LIST ADDR TO REG @ZA10115*/
         LA    REG4,STAEPARM                                    03S0081
*BASEADDR = REG11;                  /* PTR TO PROGRAM BASE   @ZA10115*/
         ST    REG11,BASEADDR                                   03S0082
*DATAADDR = REG12;                  /* PTR TO GOTTEN CORE    @ZA10115*/
         ST    REG12,DATAADDR                                   03S0083
*STAELIST(1:ESTAELEN)=ELIST(1:ESTAELEN); /*MOVE STAE LIST    @ZA10115*/
         SLR   @10,@10                                          03S0084
         IC    @10,ESTAELEN                                     03S0084
         BCTR  @10,0                                            03S0084
         EX    @10,@SM02042                                     03S0084
*REG6 = ADDR(STAERTN);              /* EXIT RTN ADDR TO REG  @ZA10115*/
         LA    REG6,STAERTN                                     03S0085
*GEN REFS(STAELIST);                /*                       @ZA10115*/
         ESTAE (6),CT,RECORD=YES,PARAM=(4),TERM=YES,MF=(E,STAELIST)
*IF REG15 ^= 0 THEN                 /* WAS ESTAE SUCCESSFUL  @ZA10115*/
         LTR   REG15,REG15                                      03S0087
         BZ    @RF00087                                         03S0087
*  DO;                              /* NO -                  @ZA10115*/
*    RETCODE = 16;                  /* SET R.C. = 16         @ZA10115*/
         MVC   RETCODE(4),@CF00065                              03S0089
*    GOTO EXIT;                     /* EXIT TO CALLER        @ZA10115*/
         B     EXIT                                             03S0090
*  END;                                                   /* @ZA10115*/
*ELSE;                              /* YES - CONTINUE        @ZA10115*/
@RF00087 DS    0H                                               03S0093
*RFY (REG6,REG4,REG11,REG12,REG13) UNRSTD; /*                @ZA10115*/
*RETCODE=16;                           /* PRIME RETURN CODE - FOR
*                                         NOT RECORDING              */
         MVC   RETCODE(4),@CF00065                              02S0094
*IF CVTSMCA^=0 & SMCAFIRT='0'B &       /* IS THERE A SMCA?           */
*   SMCAMAN='1'B & (SMCAUSER='1'B × USERTYP>=128) THEN/* PROCESS
*                                         ONLY WHEN BOTH MAN AND
*                                         USER RECORDING BITS ON OR
*                                         ONLY USER RECORDING AND THIS
*                                         IS A USER RECORD (128-255) */
         L     @10,CVTPTR                                       01S0095
         L     @10,CVTSMCA(,@10)                                01S0095
         LTR   @10,@10                                          01S0095
         BZ    @RF00095                                         01S0095
         TM    SMCAMAN(@10),B'01000000'                         01S0095
         BNO   @RF00095                                         01S0095
         TM    SMCAFIRT(@10),B'00010000'                        01S0095
         BNZ   @RF00095                                         01S0095
         TM    SMCAUSER(@10),B'10000000'                        01S0095
         BO    @RT00095                                         01S0095
         CLI   USERTYP(RECPTR),128                              01S0095
         BL    @RF00095                                         01S0095
@RT00095 DS    0H                                               01S0096
*  DO;                                                          01S0096
*    SMCAPTR=CVTSMCA;                      /* LOAD SMCA BASE POINTER */
         L     @10,CVTPTR                                       01S0097
         L     SMCAPTR,CVTSMCA(,@10)                            01S0097
*    RESPECIFY SMCABASE BASED(SMCAPTR);                         01S0098
*    IF TCBJSTCA->TCBFA = '1'B THEN  /*JOBSTEP ABENDED       @ZA06202*/
         L     @10,CVTTCBP(,@10)                                01S0099
         L     @10,TCBPTR(,@10)                                 01S0099
         SLR   @02,@02                                          01S0099
         ICM   @02,7,TCBJSTCA(@10)                              01S0099
         TM    TCBFA(@02),B'10000000'                           01S0099
         BNO   @RF00099                                         01S0099
*      DO;                                 /*                @ZA06202*/
*        ENQTCB = TCBJSTCA;                /*GET JOBSTEP TCB @ZA06202*/
         ST    @02,ENQTCB                                       01S0101
*        IF ENQTCB ^= TCBPTR THEN          /*JOBSTEP REQUEST @ZA06202*/
         CR    @02,@10                                          01S0102
         BE    @RF00102                                         01S0102
*          DO;                             /*                @ZA06202*/
*          ENQBEGIN(1:ENQLENG) = ENQLIST1(1:ENQLENG); /*     @ZA06202*/
         L     @10,ENQLENG                                      01S0104
         BCTR  @10,0                                            01S0104
         EX    @10,@SM02044                                     01S0104
*          GEN REFS(SMFMAJOR,SMFMINOR,ENQCORE1,ENQTCB); /*   @ZA06202*/
           ENQ (SMFMAJOR,SMFMINOR,E,3,SYSTEM),RET=TEST,MF=(E,ENQCORE1),X
               TCB=ENQTCB                    ENQ TEST JS TCB   @ZA06202
*          RFY REG15 RSTD;             /*                    @ZA06202*/
*          IF REG15 ^= 0 THEN          /* IS SMF BUFFER ENQ  @ZA12386*/
         LTR   REG15,REG15                                      01S0107
         BZ    @RF00107                                         01S0107
*            DO;                       /* YES, CHECK ENQRC   @ZA12386*/
*              IF ENQRC=8 × ENQRC=20 THEN    /*              @ZA12386*/
         CLI   ENQRC(REG15),8                                   01S0109
         BE    @RT00109                                         01S0109
         CLI   ENQRC(REG15),20                                  01S0109
         BNE   @RF00109                                         01S0109
@RT00109 DS    0H                                               01S0110
*                DO;                   /* PREVIOUS REQUEST   @ZA12386*/
*                  RETCODE=16;         /* SMF NOT RECORDING  @ZA12386*/
         MVC   RETCODE(4),@CF00065                              01S0111
*                  GOTO EXIT;          /* EXIT TO CALLER     @ZA12386*/
         B     EXIT                                             01S0112
*                END;                  /*                    @ZA12386*/
*              ELSE;                   /* MUST BE RETCODE 4  @ZA12386*/
@RF00109 DS    0H                                               01S0115
*            END;                      /* ENQ AND WAIT       @ZA12386*/
*          ELSE;                       /* SMF BUF IS FREE    @ZA12386*/
@RF00107 DS    0H                                               01S0117
*          RFY REG15 UNRSTD;           /*                    @ZA06202*/
*          END;                            /*                @ZA06202*/
*        ELSE;                             /*                @ZA06202*/
@RF00102 DS    0H                                               01S0120
*      END;                                /*                @ZA06202*/
*    GEN(MVC   ENQCORE(ENQLEN),ENQLIST); /*MVC TO DYNAM CORE @ZA12386*/
@RF00099 DS    0H                                               01S0121
         MVC   ENQCORE(ENQLEN),ENQLIST
*    GEN(ENQ   MF=(E,ENQCORE));        /* ENQ ON SMF BUFFER  @ZA12386*/
         ENQ   MF=(E,ENQCORE)
*/* DELETE SETTING OF ENQSW                                  @ZA31277*/
*    IF SMCAMAN='1'B THEN              /* VERIFY SMF STILL RECORDING */
         TM    SMCAMAN(SMCAPTR),B'01000000'                     01S0123
         BNO   @RF00123                                         01S0123
*      DO;                                                      01S0124
*        SMCADSSP='0'B;                /* RESET SPACE CK FLG @ZA33075*/
*        SMCADSSW='0'B;                /* RESET SWITCH FLAG  @ZA33075*/
         NI    SMCADSSP(SMCAPTR),B'11111100'                    01S0126
*        RETCODE=0;                    /* INITIALIZE RETURN CODE     */
         SLR   @10,@10                                          01S0127
         ST    @10,RETCODE                                      01S0127
*        RECORDLN=USERSIZE;            /* GET LENGTH OF THE RECORD   */
         LH    @02,USERSIZE(,RECPTR)                            01S0128
         ST    @02,RECORDLN                                     01S0128
*        RECORDLN=RECORDLN & HMASK;    /* CLEAR HI-ORDER 2 BYTES     */
         N     @02,HMASK                                        01S0129
         ST    @02,RECORDLN                                     01S0129
*        IF RECORDLN^=0 THEN           /* DON'T TIME STAMP OR TAKE
*                                         USER EXIT IF ZERO LEN REC  */
         CR    @02,@10                                          01S0130
         BE    @RF00130                                         01S0130
*          DO;                                                  01S0131
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= SMFHEADR                                            */
*/*                                                                  */
*/*DESCRIPTIVE NAME= HEADER STAMP SMF RECORD                         */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  SET SYSTEM OPERATING ENVIRONMENT FLAG IN ALL SMF/USER RECORDS   */
*/*  AND PROVIDE TIME, DATE AND SYSTEM ID IN SMF RECORDS(TYPE 0-127) */
*/*  EXCEPT TYPES 4,5,34,35.                                         */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= IN-LINE SEGMENT                                      */
*/*  INPUT=                                                          */
*/*    SMF/USER RECORD                                               */
*/*    SMCASID- SYSTEM ID                                            */
*/*                                                                  */
*/*EXITS=                                                            */
*/*  CONDITION= NORMAL                                               */
*/*             SMF/USER RECORDS UPDATED                             */
*/*  OUTPUT=                                                         */
*/*    USERDATE- DATE IN SMF RECORD                                  */
*/*    USERTIME- TIME IN SMF RECORD                                  */
*/*    USERSYID- SYSTEM ID IN SMF RECORD                             */
*/*    USERCONT- SYSTEM OPERATING ENVIRONMENT FLAG                   */
*/*  RETURN CODES= NONE                                              */
*/*                                                                  */
*/********************************************************************/
*USERCONT=USERCONT × '02'X;            /* SET SYS OPERATING ENVIRON-
*                                         MENT FLAG ON IN SMF RECORD */
         OI    USERCONT(RECPTR),X'02'                           02S0132
*IF USERTYP < 128 & USERTYP ^= 4 &       /* TIME STAMP ONLY PROVIDED */
*   USERTYP ^= 5 & USERTYP ^= 34 &       /* FOR SMF RECS (TYPE 0-127)*/
*   USERTYP ^= 35 THEN                 /* EXCEPT TYPES 4,5,34,35     */
         CLI   USERTYP(RECPTR),128                              02S0133
         BNL   @RF00133                                         02S0133
         CLI   USERTYP(RECPTR),4                                02S0133
         BE    @RF00133                                         02S0133
         CLI   USERTYP(RECPTR),5                                02S0133
         BE    @RF00133                                         02S0133
         CLI   USERTYP(RECPTR),34                               02S0133
         BE    @RF00133                                         02S0133
         CLI   USERTYP(RECPTR),35                               02S0133
         BE    @RF00133                                         02S0133
*  DO;                                                          02S0134
*    RESPECIFY (REG0,REG1) RESTRICTED; /* OBTAIN DATE AND TIME OF    */
*    GEN(TIME BIN);                    /* DAY TO BE PLACED IN THE
*                                         SMF RECORD                 */
         TIME BIN
*    USERDATE=REG1;                    /* DATE                       */
         ST    REG1,USERDATE(,RECPTR)                           02S0137
*    USERTIME=REG0;                    /* TIME                       */
         ST    REG0,USERTIME(,RECPTR)                           02S0138
*    USERSYID=SMCASID;                 /* SYSTEM ID                  */
         MVC   USERSYID(4,RECPTR),SMCASID(SMCAPTR)              02S0139
*    RESPECIFY (REG0,REG1) UNRESTRICTED;                        02S0140
*  END;                                                         02S0141
*            IF SMCAEXT='1'B THEN      /* TAKE USER EXIT IF EXITS ARE*/
@RF00133 TM    SMCAEXT(SMCAPTR),B'00100000'                     01S0142
         BNO   @RF00142                                         01S0142
*              DO;                     /* ACTIVE                     */
*                CALL USEREXT;                                  01S0144
         BAL   @14,USEREXT                                      01S0144
*              END;                                             01S0145
*          END;                                                 01S0146
@RF00142 DS    0H                                               01S0147
*        IF RETCODE=0 THEN                                      01S0147
@RF00130 ICM   @10,15,RETCODE                                   01S0147
         BNZ   @RF00147                                         01S0147
*          DO;                                                  01S0148
*            DATASETS='0'B;            /* INIT 'SWITCHED' INDICATOR  */
         NI    DATASETS,B'01111111'                             01S0149
*            IF SMCADSTR='1'B THEN     /* IF DISASTER MODE TRY TO    */
         TM    SMCADSTR(SMCAPTR),B'01000000'                    01S0150
         BNO   @RF00150                                         01S0150
*              CALL EMPTYBUF;          /* FLUSH BUFFER               */
         BAL   @14,EMPTYBUF                                     01S0151
*            IF RETCODE=0 THEN         /* STILL IN DISASTER MODE?    */
@RF00150 ICM   @10,15,RETCODE                                   01S0152
         BNZ   @RF00152                                         01S0152
*              DO;                     /* NO, GET THE AVAIL BUFFER   */
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= GETBUFR                                             */
*/*                                                                  */
*/*DESCRIPTIVE NAME= GET AN AVAILABLE BUFFER                         */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  SET UP THE POINTER TO THE HALF OF THE SMF BUFFER INTO WHICH     */
*/*  RECORDS ARE CURRENTLY TO BE MOVED.                              */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= IN-LINE SEGMENT                                      */
*/*  INPUT=                                                          */
*/*    SMCABSW- SWITCH INDICATING WHICH HALF OF THE SMF BUFFER       */
*/*             IS TO BE USED '1' SECOND HALF  '0' FIRST HALF        */
*/*    SMCABUFP- ADDRESS OF THE SMF BUFFER                           */
*/*                                                                  */
*/*EXITS=                                                            */
*/*  CONDITION= NORMAL- BUFFER POINTER ESTABLISHED                   */
*/*  OUTPUT=                                                         */
*/*    BUFPTR(REG4)- POINTER TO CURRENT BUFFER HALF                  */
*/*  RETURN CODES= NONE                                              */
*/*                                                                  */
*/********************************************************************/
*IF SMCABSW='1'B THEN                  /* IF SMCABSW INDICATES THAT  */
         TM    SMCABSW(SMCAPTR),B'00000010'                     02S0154
         BNO   @RF00154                                         02S0154
*  BUFPTR=SMCABUFP+SMCABSIZ;           /* THE SECOND HALF OF THE SMF */
         L     BUFPTR,SMCABUFP(,SMCAPTR)                        02S0155
         AL    BUFPTR,SMCABSIZ(,SMCAPTR)                        02S0155
*ELSE                                  /* BUFFER IS TO BE USED, SET  */
*  BUFPTR=SMCABUFP;                    /* BUFPTR TO POINT THERE ELSE
*                                         POINT TO START OF BUFFER   */
         B     @RC00154                                         02S0156
@RF00154 L     BUFPTR,SMCABUFP(,SMCAPTR)                        02S0156
*                IF RECORDLN<18 THEN    /* IF RECORD LESS THAN 18    */
@RC00154 L     @10,RECORDLN                                     01S0157
         CH    @10,@CH02010                                     01S0157
         BNL   @RF00157                                         01S0157
*                  DO;                 /* BYTES CHECK TO SEE IF HALT
*                                         PROCESSING HAS BEEN REQ'D  */
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= HALTREC                                             */
*/*                                                                  */
*/*DESCRIPTIVE NAME= HALT RECORD PROCESSOR                           */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  ENTER HERE FOR RECORDS WHOSE LENGTH IS LESS THAN 18 BYTES.      */
*/*  CHECK FOR 'HALT' IN POSITIONS 5-8 IN THE RECORD AND IF NOT      */
*/*  NOT FOUND PASS ERROR RETURN CODE TO MAIN SEGMENT. IF THIS IS    */
*/*  A HALT RECORD THE CURRENT BUFFER IS FLUSHED TO THE DATA SET IF  */
*/*  IT CONTAINS ANY RECORDS. SMF WRITER (IEEMB829) IS THEN POSTED   */
*/*  TO PERFORM A DATA SET SWITCH. IF SWITCHING HAS ALREADY OCCURRED */
*/*  DUE TO RECOVERY FROM DISASTER OR AS A RESULT OF FLUSHING THE    */
*/*  BUFFER, THEN BYPASS SWITCHING FOR HALT.                         */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= IN-LINE SEGMENT                                      */
*/*  INPUT=                                                          */
*/*    SMF/USER RECORD LESS THAN 18 BYTES LONG                       */
*/*    CURRENT SMF BUFFER                                            */
*/*    DATASETS- SWITCH INDICATING WHETHER DATA SET SWITCH OCCURRED  */
*/*                                                                  */
*/*EXITS=                                                            */
*/*  CONDITION= NORMAL- IEEMB829 POSTED TO SWITCH DATA SETS          */
*/*  OUTPUT= NONE                                                    */
*/*  RETURN CODES= NONE                                              */
*/*                                                                  */
*/*  CONDITION= RECORD LESS THAN 18 BYTES AND NOT A HALT RECORD      */
*/*  OUTPUT= NONE                                                    */
*/*  RETURN CODES= RETURN CODE SET TO 8                              */
*/*                                                                  */
*/********************************************************************/
*IF USEREC(5:8)='HALT' THEN            /* IF RECORD CONTAINS 'HALT'  */
         CLC   USEREC+4(4,RECPTR),@CC02011                      02S0159
         BNE   @RF00159                                         02S0159
*  DO;                                 /* THEN A SWITCH WAS REQUESTED*/
*    IF DATASETS^='1'B THEN            /* DID SWITCH ALREADY OCCUR?  */
         TM    DATASETS,B'10000000'                             02S0161
         BO    @RF00161                                         02S0161
*      DO;                             /* NO, PROCESS HALT/EOD       */
*        IF SMFBLOCK>4 THEN            /* FLUSH CURRENT BUFFER IF    */
         LH    @10,SMFBLOCK(,BUFPTR)                            02S0163
         CH    @10,@CH00046                                     02S0163
         BNH   @RF00163                                         02S0163
*          DO;                         /* ANY RECORDS IN IT          */
*            CALL EMPTYBUF;            /* FLUSH CURRENT BUFFER       */
         BAL   @14,EMPTYBUF                                     02S0165
*          END;                                                 02S0166
*        IF RETCODE=0 & DATASETS^='1'B THEN         /* IF BUFFER WAS
*                                         FLUSHED TO SMF DATA SET    */
@RF00163 ICM   @10,15,RETCODE                                   02S0167
         BNZ   @RF00167                                         02S0167
         TM    DATASETS,B'10000000'                             02S0167
         BO    @RF00167                                         02S0167
*          DO;                         /* OK AND NO SWITCHING TOOK   */
*            SMCADSSW='1'B;            /* PLACE AS A RESULT, THEN    */
         OI    SMCADSSW(SMCAPTR),B'00000001'                    02S0169
*            CALL POSTWAIT;            /* POST THE WRITER TO PERFORM */
         BAL   @14,POSTWAIT                                     02S0170
*            SMCADSSW='0'B;            /* DATA SET SWITCHING         */
         NI    SMCADSSW(SMCAPTR),B'11111110'                    02S0171
*          END;                                                 02S0172
*      END;                                                     02S0173
*  END;                                                         02S0174
*ELSE                                  /* SET RETURN CODE INDICATING */
*  RETCODE=8;                          /* RECORD LESS THAN 18 BYTES  */
         B     @RC00159                                         02S0175
@RF00159 MVC   RETCODE(4),@CF00093                              02S0175
*                  END;                                         01S0176
*                ELSE                                           01S0177
*                  DO;                 /* DO RECORD PROCESSING       */
         B     @RC00157                                         01S0177
@RF00157 DS    0H                                               01S0178
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= RECPROC                                             */
*/*                                                                  */
*/*DESCRIPTIVE NAME= SMF RECORD PROCESSOR                            */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  FIRST DETERMINES WHETHER THE BUFFER SHOULD BE FLUSHED BEFORE    */
*/*  PROCESSING THE CURRENT RECORD, I.E. IF THE RECORD EXCEEDS THE   */
*/*  AMOUNT OF SPACE LEFT IN THE BUFFER, EMPTYBUF IS CALLED TO FLUSH */
*/*  THE CURRENT BUFFER. IF THE RECORD IS LARGER THAN THE SIZE OF    */
*/*  AN EMPTY BUFFER RECORD SPLITTING IS INVOKED TO SEGMENT THE      */
*/*  RECORD AND WRITE THE SEGMENTS TO THE SMF DATA SET. IF RECORD IS */
*/*  NOT TOO LARGE THEN RECMOVE IS CALLED TO MOVE THE RECORD INTO    */
*/*  CURRENT BUFFER.                                                 */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= IN-LINE SEGMENT                                      */
*/*  INPUT=                                                          */
*/*    SMF/USER RECORD                                               */
*/*    SMF BUFFER                                                    */
*/*    SMCABSIZ- SMF BUFFER SIZE                                     */
*/*                                                                  */
*/*EXITS=                                                            */
*/*  CONDITION= NORMAL- SMF/USER RECORD MOVED TO SMF BUFFER          */
*/*  OUTPUT=                                                         */
*/*    SMF BUFFER- CONTAINS SMF RECORD OR THE LAST SEGMENT OF A      */
*/*                SEGMENTED RECORD                                  */
*/*  RETURN CODES= NONE                                              */
*/*                                                                  */
*/********************************************************************/
*IF SMFBLOCK>4 & (RECORDLN>SMCABSIZ-4 ×       /* IF RECORD EXCEEDS   */
*  RECORDLN+SMFBLOCK>SMCABSIZ) THEN    /* BUFFER SIZE OR SPACE REMAIN-
*                                         ING IN BUFFER, WRITE BUFFER
*                                         IF ANYTHING IN IT          */
         LA    @10,4                                            02S0178
         LH    @02,SMFBLOCK(,BUFPTR)                            02S0178
         CR    @02,@10                                          02S0178
         BNH   @RF00178                                         02S0178
         L     @15,RECORDLN                                     02S0178
         L     @14,SMCABSIZ(,SMCAPTR)                           02S0178
         LCR   @10,@10                                          02S0178
         ALR   @10,@14                                          02S0178
         CR    @15,@10                                          02S0178
         BH    @RT00178                                         02S0178
         ALR   @15,@02                                          02S0178
         CR    @15,@14                                          02S0178
         BNH   @RF00178                                         02S0178
@RT00178 DS    0H                                               02S0179
*  DO;                                                          02S0179
*    CALL EMPTYBUF;                    /* SMF BUFFER TO SMF DATA SET */
         BAL   @14,EMPTYBUF                                     02S0180
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= GETBUFR                                             */
*/*                                                                  */
*/*DESCRIPTIVE NAME= GET AN AVAILABLE BUFFER                         */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  SET UP THE POINTER TO THE HALF OF THE SMF BUFFER INTO WHICH     */
*/*  RECORDS ARE CURRENTLY TO BE MOVED.                              */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= IN-LINE SEGMENT                                      */
*/*  INPUT=                                                          */
*/*    SMCABSW- SWITCH INDICATING WHICH HALF OF THE SMF BUFFER       */
*/*             IS TO BE USED '1' SECOND HALF  '0' FIRST HALF        */
*/*    SMCABUFP- ADDRESS OF THE SMF BUFFER                           */
*/*                                                                  */
*/*EXITS=                                                            */
*/*  CONDITION= NORMAL- BUFFER POINTER ESTABLISHED                   */
*/*  OUTPUT=                                                         */
*/*    BUFPTR(REG4)- POINTER TO CURRENT BUFFER HALF                  */
*/*  RETURN CODES= NONE                                              */
*/*                                                                  */
*/********************************************************************/
*IF SMCABSW='1'B THEN                  /* IF SMCABSW INDICATES THAT  */
         TM    SMCABSW(SMCAPTR),B'00000010'                     03S0181
         BNO   @RF00181                                         03S0181
*  BUFPTR=SMCABUFP+SMCABSIZ;           /* THE SECOND HALF OF THE SMF */
         L     BUFPTR,SMCABUFP(,SMCAPTR)                        03S0182
         AL    BUFPTR,SMCABSIZ(,SMCAPTR)                        03S0182
*ELSE                                  /* BUFFER IS TO BE USED, SET  */
*  BUFPTR=SMCABUFP;                    /* BUFPTR TO POINT THERE ELSE
*                                         POINT TO START OF BUFFER   */
         B     @RC00181                                         03S0183
@RF00181 L     BUFPTR,SMCABUFP(,SMCAPTR)                        03S0183
*  END;                                                         02S0184
@RC00181 DS    0H                                               02S0185
*IF RETCODE=0 THEN                     /* DISASTER CONDITION ARISE?  */
@RF00178 SLR   @10,@10                                          02S0185
         C     @10,RETCODE                                      02S0185
         BNE   @RF00185                                         02S0185
*  DO;                                 /* NO                         */
*    RECHEADR=0;                       /* INITIALIZE RDW/SDW    02S0187
*                                         DOES RECORD EXCEED THE     */
         ST    @10,RECHEADR                                     02S0187
*    IF RECORDLN>SMCABSIZ-4 THEN       /* SIZE OF AN EMPTY BUFFER?   */
         L     @02,RECORDLN                                     02S0188
         LA    @15,4                                            02S0188
         L     @14,SMCABSIZ(,SMCAPTR)                           02S0188
         LR    @09,@14                                          02S0188
         SLR   @09,@15                                          02S0188
         CR    @02,@09                                          02S0188
         BNH   @RF00188                                         02S0188
*      DO;                             /* IF YES, SEGMENT THE RECORD */
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= SPLITREC                                            */
*/*                                                                  */
*/*DESCRIPTIVE NAME= SMF RECORD SPLITTER                             */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  SPLIT THE SMF/USER RECORD UP INTO BUFFER SIZE SEGMENTS AND      */
*/*  POST THE SMF WRITER TO WRITE OUT EACH SEGMENT.                  */
*/*  CALCULATE THE NUMBER OF SEGMENTS NEEDED TO CONTAIN THE RECORD   */
*/*  AND THEN POST THE SMF WRITER TO PERFORM SPACE CHECKING, I.E. TO */
*/*  SEE IF THE DATA SET HAS ENOUGH SPACE TO CONTAIN ALL SEGMENTS.   */
*/*  THEN SEGMENT THE RECORD FLUSHING EACH SEGMENT IN TURN UP TO N-1 */
*/*  SEGMENTS. MOVE THE LAST PORTION OF THE RECORD TO THE BUFFER.    */
*/*  IN THE EVENT THAT THE RECORD EXCEEDS THE SIZE OF AN EMPTY SMF   */
*/*  DATA SET, THE RECORD IS SEGMENTED AND TRUNCATED WITH A RETURN   */
*/*  CODE BEING PASSED TO THE MAIN SEGMENT.                          */
*/*  IF AN I/O ERROR SHOULD OCCUR IN THE WRITER AND CAUSE A DATA SET */
*/*  SWITCH, NO MORE SEGMENTS WILL BE WRITTEN SINCE ALL SEGMENTS OF  */
*/*  A SPLIT RECORD MUST BE WRITTEN TO THE SAME SMF DATA SET.        */
*/*                                                                  */
*/*  OPERATION=                                                      */
*/*    THE NUMBER OF SEGMENTS NEEDED TO CONTAIN THE SMF RECORD =     */
*/*    RECORD SIZE-4/BUFFER SIZE-8 ADDING 1 IF THERE IS A REMAINDER  */
*/*                                                                  */
*/*ENTRY POINT= IN-LINE SEGMENT                                      */
*/*  INPUT=                                                          */
*/*    SMF/USER RECORD WHOSE SIZE EXCEEDS THAT OF THE SMF BUFFER     */
*/*    SMF BUFFER                                                    */
*/*                                                                  */
*/*EXITS=                                                            */
*/*  CONDITION= NORMAL- SMF/USER RECORD SPLIT AND WRITTEN IN SEGMENTS*/
*/*  OUTPUT=                                                         */
*/*    SMF RECORD SEGMENTS CONSISTING OF A SEGMENT DESCRIPTOR WORD   */
*/*    AND RECORD DATA- ×SEGMENT    ×SEGMENT    ×ZERO   ×DATA....×   */
*/*                     ×LEN________×INDICATOR__×_______×________×   */
*/*                      0           2           3       4           */
*/*    SEGMENT INDICATOR= 01- FIRST SEGMENT                          */
*/*                       03- MIDDLE SEGMENT                         */
*/*                       02- LAST SEGMENT                           */
*/*  RETURN CODES= NONE                                              */
*/*                                                                  */
*/*  CONDITION= SMF/USER RECORD WAS TRUNCATED                        */
*/*  OUTPUT= SAME AS ABOVE                                           */
*/*  RETURN CODES= RETURN CODE SET TO 4                              */
*/*                                                                  */
*/********************************************************************/
*SMCASGWR=(RECORDLN-4)/(SMCABSIZ-8);       /* CALC THE NUMBER OF     */
         SLR   @02,@15                                          03S0190
         SL    @14,@CF00093                                     03S0190
         LR    @00,@02                                          03S0190
         SRDA  @00,32                                           03S0190
         DR    @00,@14                                          03S0190
         ST    @01,SMCASGWR(,SMCAPTR)                           03S0190
*IF (RECORDLN-4)//(SMCABSIZ-8)^=0 THEN          /* SEGMENTS NEEDED   */
         LR    @06,@02                                          03S0191
         SRDA  @06,32                                           03S0191
         DR    @06,@14                                          03S0191
         CR    @06,@10                                          03S0191
         BE    @RF00191                                         03S0191
*  SMCASGWR=SMCASGWR+1;                /* TO CONTAIN THE RECORD      */
         AH    @01,@CH00043                                     03S0192
         ST    @01,SMCASGWR(,SMCAPTR)                           03S0192
*SMCADSSP='1'B;                        /* INDICATE SPACE CHECKING    */
@RF00191 OI    SMCADSSP(SMCAPTR),B'00000010'                    03S0193
*CALL POSTWAIT;                        /* POST WRITER TO SPACE CHECK */
         BAL   @14,POSTWAIT                                     03S0194
*SMCADSSP='0'B;                        /* CLEAR SPACE CHECK INDICATOR*/
         NI    SMCADSSP(SMCAPTR),B'11111101'                    03S0195
*IF RETCODE=0 THEN                     /* SPACE CHECK COMPLETE OK?
*                                         I.E. NO DISASTER OCCURRED  */
         ICM   @10,15,RETCODE                                   03S0196
         BNZ   @RF00196                                         03S0196
*  DO;                                 /* YES, SEGMENT THE RECORD    */
*    RECSEG=1;                         /* SET SEGMENT INDICATOR  1ST */
         MVI   RECSEG,X'01'                                     03S0198
*    DATAPTR=RECPTR+4;                 /* POINT TO RECORD DATA       */
         LA    @10,4                                            03S0199
         LR    @02,RECPTR                                       03S0199
         ALR   @02,@10                                          03S0199
         ST    @02,DATAPTR                                      03S0199
*    RECLEN=SMCABSIZ-4;                /* SET RECORD SIZE IN SDW     */
         LCR   @10,@10                                          03S0200
         AL    @10,SMCABSIZ(,SMCAPTR)                           03S0200
         STH   @10,RECLEN                                       03S0200
*    DATASETS='0'B;                                             03S0201
         NI    DATASETS,B'01111111'                             03S0201
*    DO K=1 TO SMCASGFT-1 WHILE(RETCODE=0 & DATASETS^='1'B);    03S0202
         LA    @10,1                                            03S0202
         B     @DE00202                                         03S0202
@DL00202 ICM   @10,15,RETCODE                                   03S0202
         BNZ   @DC00202                                         03S0202
         TM    DATASETS,B'10000000'                             03S0202
         BO    @DC00202                                         03S0202
*      CALL RECMOVE;                   /* MOVE A SEG TO THE BUFFER   */
         BAL   @14,RECMOVE                                      03S0203
*      RECSEG=3;                       /* SET MIDDLE SEG INDICATOR   */
         MVI   RECSEG,X'03'                                     03S0204
*      CALL EMPTYBUF;                  /* WRITE THE BUFFER           */
         BAL   @14,EMPTYBUF                                     03S0205
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= GETBUFR                                             */
*/*                                                                  */
*/*DESCRIPTIVE NAME= GET AN AVAILABLE BUFFER                         */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  SET UP THE POINTER TO THE HALF OF THE SMF BUFFER INTO WHICH     */
*/*  RECORDS ARE CURRENTLY TO BE MOVED.                              */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= IN-LINE SEGMENT                                      */
*/*  INPUT=                                                          */
*/*    SMCABSW- SWITCH INDICATING WHICH HALF OF THE SMF BUFFER       */
*/*             IS TO BE USED '1' SECOND HALF  '0' FIRST HALF        */
*/*    SMCABUFP- ADDRESS OF THE SMF BUFFER                           */
*/*                                                                  */
*/*EXITS=                                                            */
*/*  CONDITION= NORMAL- BUFFER POINTER ESTABLISHED                   */
*/*  OUTPUT=                                                         */
*/*    BUFPTR(REG4)- POINTER TO CURRENT BUFFER HALF                  */
*/*  RETURN CODES= NONE                                              */
*/*                                                                  */
*/********************************************************************/
*IF SMCABSW='1'B THEN                  /* IF SMCABSW INDICATES THAT  */
         TM    SMCABSW(SMCAPTR),B'00000010'                     04S0206
         BNO   @RF00206                                         04S0206
*  BUFPTR=SMCABUFP+SMCABSIZ;           /* THE SECOND HALF OF THE SMF */
         L     BUFPTR,SMCABUFP(,SMCAPTR)                        04S0207
         AL    BUFPTR,SMCABSIZ(,SMCAPTR)                        04S0207
*ELSE                                  /* BUFFER IS TO BE USED, SET  */
*  BUFPTR=SMCABUFP;                    /* BUFPTR TO POINT THERE ELSE
*                                         POINT TO START OF BUFFER   */
         B     @RC00206                                         04S0208
@RF00206 L     BUFPTR,SMCABUFP(,SMCAPTR)                        04S0208
*    END;                                                       03S0209
@RC00206 LA    @10,1                                            03S0209
         AH    @10,K                                            03S0209
@DE00202 STH   @10,K                                            03S0209
         L     @02,SMCASGFT(,SMCAPTR)                           03S0209
         BCTR  @02,0                                            03S0209
         CR    @10,@02                                          03S0209
         BNH   @DL00202                                         03S0209
@DC00202 DS    0H                                               03S0210
*  IF RETCODE=0 & DATASETS^='1'B THEN        /* IF NO DISASTER OR
*                                         DATA SET SWITCH OCCURRED   */
         ICM   @10,15,RETCODE                                   03S0210
         BNZ   @RF00210                                         03S0210
         TM    DATASETS,B'10000000'                             03S0210
         BO    @RF00210                                         03S0210
*    DO;                               /* MOVE AND WRITE LAST SEG    */
*      RECSEG=2;                       /* SET SEG INDICATOR = LAST   */
         MVI   RECSEG,X'02'                                     03S0212
*      IF SMCASGWR^=SMCASGFT THEN      /* NEED TO TRUNCATE RECORD?   */
         CLC   SMCASGWR(4,SMCAPTR),SMCASGFT(SMCAPTR)            03S0213
         BE    @RF00213                                         03S0213
*        DO;                           /* YES, WRITE A FULL BUFFER   */
*          RETCODE=4;                  /*    SET TRUNCATE RET CODE   */
         LA    @10,4                                            03S0215
         ST    @10,RETCODE                                      03S0215
*          RECLEN=SMCABSIZ-4;          /*    SET RECORD SIZE IN SDW  */
         LCR   @10,@10                                          03S0216
         AL    @10,SMCABSIZ(,SMCAPTR)                           03S0216
         STH   @10,RECLEN                                       03S0216
*        END;                                                   03S0217
*      ELSE                            /* NO, WRITE REMAIN'G PORTION */
*        RECLEN=RECORDLN-((SMCASGFT-1)*(SMCABSIZ-8)); /* SET RECORD
*                                         SIZE IN SDW FOR LAST SEG   */
         B     @RC00213                                         03S0218
@RF00213 L     @01,SMCASGFT(,SMCAPTR)                           03S0218
         BCTR  @01,0                                            03S0218
         L     @10,SMCABSIZ(,SMCAPTR)                           03S0218
         SL    @10,@CF00093                                     03S0218
         MR    @00,@10                                          03S0218
         LCR   @01,@01                                          03S0218
         AL    @01,RECORDLN                                     03S0218
         STH   @01,RECLEN                                       03S0218
*      CALL RECMOVE;                   /* MOVE LAST SEG TO BUFFER    */
@RC00213 BAL   @14,RECMOVE                                      03S0219
*    END;                                                       03S0220
*  ELSE                                                         03S0221
*    SMFBLOCK=4;                       /* INITIALIZE THE BUFFER      */
         B     @RC00210                                         03S0221
@RF00210 MVC   SMFBLOCK(2,BUFPTR),@CH00046                      03S0221
*  END;                                                         03S0222
*      END;                                                     02S0223
*    ELSE                              /* IF NOT, MOVE RECORD TO THE */
*      DO;                             /* SMF BUFFER                 */
         B     @RC00188                                         02S0224
@RF00188 DS    0H                                               02S0225
*        RECLEN=RECORDLN;              /* SET UP RECORD DESCRIPTOR   */
         MVC   RECLEN(2),RECORDLN+2                             02S0225
*        DATAPTR=RECPTR+4;             /* WORD AND DATA PTR          */
         LA    @10,4                                            02S0226
         ALR   @10,RECPTR                                       02S0226
         ST    @10,DATAPTR                                      02S0226
*        CALL RECMOVE;                 /* (RECHEADR,DATAPTR) PARMS   */
         BAL   @14,RECMOVE                                      02S0227
*      END;                                                     02S0228
*  END;                                                         02S0229
@RC00188 DS    0H                                               02S0230
*                  END;                                         01S0230
@RF00185 DS    0H                                               01S0231
*              END;                                             01S0231
@RC00157 DS    0H                                               01S0232
*          END;                                                 01S0232
@RF00152 DS    0H                                               01S0233
*      END;                                                     01S0233
@RF00147 DS    0H                                               01S0234
*    GEN(MVC   ENQCORE(ENQLEN),ENQLIST); /*MVC TO DYNAM CORE @ZA12386*/
@RF00123 DS    0H                                               01S0234
         MVC   ENQCORE(ENQLEN),ENQLIST
*    GEN(DEQ   MF=(E,ENQCORE));        /* DEQ FROM SMF BUFFR @ZA12386*/
         DEQ   MF=(E,ENQCORE)
*/* DELETE RESETTING OF ENQSW                                @ZA31277*/
*  END;                                                         01S0236
*EXIT:                                     /*                @ZA06202*/
*GEN(  ESTAE   0  );                /*FREE ESTAE INVIRONMENT @ZA10115*/
@RF00095 DS    0H                                               01S0237
EXIT       ESTAE   0
*RFY (REG10) RSTD;                                        /* @ZA10115*/
*REG10 = RETCODE;                  /* SAVE RETCODE ACROSS FREEMAIN
*                                                            @ZA10115*/
         L     REG10,RETCODE                                    01S0239
*    GEN(L     @00,@SIZDATD);                             /* @ZA10115*/
         L     @00,@SIZDATD
*    GEN(LR    @01,@12);                                  /* @ZA10115*/
         LR    @01,@12
*    GEN(FREEMAIN R,LV=(0),A=(1));     /* FREE DYNAMIC CORE  @ZA10115*/
         FREEMAIN R,LV=(0),A=(1)
*RESPECIFY REG15 RESTRICTED;                                    01S0243
*REG15=REG10;                          /* PASS RET CODE TO CALLER    */
         LR    REG15,REG10                                      01S0244
*RFY (REG10,REG15) UNRSTD;                                /* @ZA10115*/
*SVC(3);                               /* MODULE EXIT                */
         SVC   3                                                01S0246
*USEREXT:PROC;                                                  02S0247
USEREXT  STM   @14,@12,@SA00002                                 02S0247
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= USEREXT                                             */
*/*                                                                  */
*/*DESCRIPTIVE NAME= INTERFACE TO SMF USER EXIT                      */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  SET UP THE INTERFACE TO USER EXIT IEFU83 PASSING AS INPUT       */
*/*  THE ADDRESS OF THE SMF/USER RECORD.                             */
*/*  UPON RETURN FROM THE USER EXIT DETERMINE FROM THE RETURN CODE   */
*/*  PASSED BY THE USER WHETHER OR NOT TO CANCEL THE WRITING OF      */
*/*  THIS RECORD (RET CODE 4- CANCEL). PASS AN APPROPRIATE RETURN    */
*/*  CODE TO THE MAIN SEGMENT.                                       */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= USEREXT                                              */
*/*  INPUT=                                                          */
*/*    RECPTR(REG3)- ADDRESS OF SMF/USER RECORD                      */
*/*                                                                  */
*/*EXITS=                                                            */
*/*  CONDITION= NORMAL- SMF USER EXIT IEFU83 TAKEN                   */
*/*  OUTPUT=                                                         */
*/*    RETCODE- RETURN CODE FOR MAIN SEGMENT                         */
*/*  RETURN CODES=                                                   */
*/*    RETURN CODE 20- USER WANTS SMF/USER RECORD CANCELED           */
*/*    RETURN CODE 0- ISSUE RECORD NORMALLY                          */
*/*                                                                  */
*/********************************************************************/
*U83REC=RECPTR;                        /* RECORD PTR TO PARM LIST    */
         ST    RECPTR,U83REC                                    02S0248
*U83RESV=0;                            /* ZERO RESERVED FIELD        */
         SLR   @10,@10                                          02S0249
         ST    @10,U83RESV                                      02S0249
*RESPECIFY REG1 RESTRICTED;                                     02S0250
*REG1=ADDR(U83PARMS);                  /* PARM LIST ADDR IN REG1     */
         LA    REG1,U83PARMS                                    02S0251
*CALL IEFU83;                          /* TAKE SMF USER EXIT         */
         L     @15,SMCAU83(,SMCAPTR)                            02S0252
         BALR  @14,@15                                          02S0252
*RESPECIFY REG1 UNRESTRICTED;                                   02S0253
*RESPECIFY REG15 RESTRICTED;                                    02S0254
*IF REG15=4 THEN                       /* CHECK TO SEE IF USER WANTS */
         CH    REG15,@CH00046                                   02S0255
         BNE   @RF00255                                         02S0255
*  RETCODE=20;                         /* RECORD CANCELLED - R15 = 4 */
         MVC   RETCODE(4),@CF00926                              02S0256
*ELSE                                                           02S0257
*  RETCODE=0;                                                   02S0257
         B     @RC00255                                         02S0257
@RF00255 SLR   @14,@14                                          02S0257
         ST    @14,RETCODE                                      02S0257
*RESPECIFY REG15 UNRESTRICTED;                                  02S0258
*END USEREXT;                                                   02S0259
@EL00002 DS    0H                                               02S0259
@EF00002 DS    0H                                               02S0259
@ER00002 LM    @14,@12,@SA00002                                 02S0259
         BR    @14                                              02S0259
*EMPTYBUF:POSTWAIT:PROC;                                        02S0260
EMPTYBUF DS    0H                                               02S0260
POSTWAIT STM   @14,@12,@SA00003                                 02S0260
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= EMPTYBUF                                            */
*/*                                                                  */
*/*DESCRIPTIVE NAME= SMF BUFFER FLUSH                                */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  SERVICE ROUTINE USED TO POST THE SMF WRITER(IEEMB829) TO        */
*/*  PERFORM ONE OF SEVERAL FUNCTIONS. UPON COMPLETION OF THE WAIT   */
*/*  A CHECK IS MADE TO SEE THAT RECORDING HAS NOT BEEN SHUT DOWN AS */
*/*  A RESULT OF ABENDING IN THE SMF WRITER. IF A POST CODE OF 4     */
*/*  IS DETECTED THIS INDICATES THAT A DATA SET SWITCH WAS PERFORMED */
*/*  BY THE WRITER AND AN INDICATOR IS SET BY THIS ROUTINE.          */
*/*  A CHECK IS MADE TO SEE IF A DISASTER CONDITION WAS ENTERED IN   */
*/*  IEEMB829 PROCESSING AND IF SO, THE RETURN CODE IS SET UP TO     */
*/*  INDICATE NO SMF RECORDING.                                      */
*/*                                                                  */
*/*  OPERATION= NO SPECIAL ALGORITHMS ARE USED                       */
*/*                                                                  */
*/*ENTRY POINT= EMPTYBUF                                             */
*/*  INPUT=                                                          */
*/*    SMCAWECB- SMF WRITER ECB                                      */
*/*    SMCABECB- SMF RECORD MANAGER ECB                              */
*/*    BAASCB- SMF WRITER ASCB ADDRESS                               */
*/*    ASCBPTR- SMF RECORD MANAGER ASCB ADDRESS                      */
*/*    TCBPTR- SMF RECORD MANAGER TCB ADDRESS                        */
*/*                                                                  */
*/*EXITS=                                                            */
*/*  CONDITION= NORMAL- SMF WRITER POSTED TO PERFORM REQUESTED       */
*/*             FUNCTION                                             */
*/*  OUTPUT=                                                         */
*/*    DATASETS- INDICATOR SET IF WRITER SWITCHED DATA SETS          */
*/*  RETURN CODES= RETURN CODE SET TO 0                              */
*/*                                                                  */
*/*  CONDITION= SMF NO LONGER RECORDING                              */
*/*  OUTPUT= NONE                                                    */
*/*  RETURN CODES= RETURN CODE SET TO 16                             */
*/*                                                                  */
*/********************************************************************/
*IF SMCADSSP='0'B & SMCADSSW='0'B THEN /* POST TO WRITE A BUFFER?    */
         TM    SMCADSSP(SMCAPTR),B'00000011'                    02S0261
         BNZ   @RF00261                                         02S0261
*  DO;                                 /* YES, CHECK TO SEE IF BUFFER*/
*    IF SMFBLOCK<18 THEN               /* SIZE IS LESS THAN 18 BYTES */
         LA    @10,18                                           02S0263
         LH    @02,SMFBLOCK(,BUFPTR)                            02S0263
         CR    @02,@10                                          02S0263
         BNL   @RF00263                                         02S0263
*      DO;                             /* IT IS- MUST PAD OUT TO 18  */
*        SMFREC(SMFBLOCK-3:18)=                                 02S0265
*        SMFREC(SMFBLOCK-3:18) && SMFREC(SMFBLOCK-3:18);        02S0265
         ALR   @02,BUFPTR                                       02S0265
         LH    @15,SMFBLOCK(,BUFPTR)                            02S0265
         LCR   @15,@15                                          02S0265
         AH    @15,@CH02035                                     02S0265
         EX    @15,@SX02051                                     02S0265
*        SMFBLOCK=18;                  /* SET BUFFER SIZE IN BDW     */
         STH   @10,SMFBLOCK(,BUFPTR)                            02S0266
*        SMFREC(1:2)=14;               /* SET RECORD SIZE IN RDW/SDW */
         MVC   SMFREC(2,BUFPTR),@CH02025                        02S0267
*      END;                                                     02S0268
*  END;                                                         02S0269
@RF00263 DS    0H                                               02S0270
*RESPECIFY (REG0,REG1,REG2,REG3,REG4) RESTRICTED;               02S0270
@RF00261 DS    0H                                               02S0271
*REG2=ADDR(SMCAWECB);                  /* ADDR OF SMF WRITER ECB     */
         LA    REG2,SMCAWECB(,SMCAPTR)                          02S0271
*REG3=BAASCB;                          /* ADDR SMF WRITER ASCB  02S0272
*                                                            @YM00441*/
         L     @10,CVTPTR                                       02S0272
         L     @15,CVTMSER(,@10)                                02S0272
         L     REG3,BAASCB(,@15)                                02S0272
*REG4=ADDR(IEEMB827);                  /* ADDR OF ERROR ROUTINE      */
         L     REG4,@CV00138                                    02S0273
*SMCAASCB=ASCBPTR;                     /* PTR TO ASCB FOR WRITER
*                                                            @YM00441*/
         L     @10,CVTTCBP(,@10)                                02S0274
         MVC   SMCAASCB(4,SMCAPTR),ASCBPTR(@10)                 02S0274
*SMCABECB=SMCABECB && SMCABECB;        /* CLEAR SVC ECB              */
         XC    SMCABECB(4,SMCAPTR),SMCABECB(SMCAPTR)            02S0275
*SMCASTCB=TCBPTR;                      /* SVC'S TCB ADDR TO SMCA     */
         MVC   SMCASTCB(4,SMCAPTR),TCBPTR(@10)                  02S0276
*GEN(MVC   POSTL(POSTLEN),POSTD);      /* MOVE LIST FORM OF POST     */
         MVC   POSTL(POSTLEN),POSTD
*GEN(POST  (2),0,ASCB=(3),ERRET=(4),MF=(E,POSTL)); /* XMPOST IEEMB829*/
         POST  (2),0,ASCB=(3),ERRET=(4),MF=(E,POSTL)
*REG2=ADDR(SMCABECB);                                           02S0279
         LA    REG2,SMCABECB(,SMCAPTR)                          02S0279
*GEN(WAIT  ECB=(2));                                            02S0280
         WAIT  ECB=(2)
*RESPECIFY (REG0,REG1,REG2,REG3,REG4) UNRESTRICTED;             02S0281
*SMCAASCB=SMCAASCB && SMCAASCB;        /* CLEAR ASCB ADDR PTR IN SMCA*/
         L     @10,SMCAASCB(,SMCAPTR)                           02S0282
         LR    @02,@10                                          02S0282
         XR    @02,@10                                          02S0282
         ST    @02,SMCAASCB(,SMCAPTR)                           02S0282
*SMCASTCB=SMCASTCB && SMCASTCB;        /* CLEAR THIS USERS TCB PTR   */
         L     @10,SMCASTCB(,SMCAPTR)                           02S0283
         LR    @02,@10                                          02S0283
         XR    @02,@10                                          02S0283
         ST    @02,SMCASTCB(,SMCAPTR)                           02S0283
*RETCODE=16;                           /* PRIME RET CODE- NO RECORD'G*/
         MVC   RETCODE(4),@CF00065                              02S0284
*IF SMCAMAN='1'B THEN                  /* SMF STILL RECORDING?       */
         TM    SMCAMAN(SMCAPTR),B'01000000'                     02S0285
         BNO   @RF00285                                         02S0285
*  DO;                                 /* YES - HAS A DISASTER       */
*    IF SMCADSTR^='1'B THEN            /* CONDITION ARISEN?          */
         TM    SMCADSTR(SMCAPTR),B'01000000'                    02S0287
         BO    @RF00287                                         02S0287
*      DO;                             /* NO - IF THE WRITER HAS     */
*        IF POSTCODE='04'X THEN        /* POSTED WITH A CODE OF 4 IT */
         CLI   POSTCODE(SMCAPTR),X'04'                          02S0289
         BNE   @RF00289                                         02S0289
*          DATASETS='1'B;              /* INDICATES THE WRITER WAS   */
         OI    DATASETS,B'10000000'                             02S0290
*        RETCODE=0;                    /* FORCED TO PERFORM A DATA   */
@RF00289 SLR   @10,@10                                          02S0291
         ST    @10,RETCODE                                      02S0291
*      END;                            /* SET SWITCH OPERATION       */
*  END;                                                         02S0293
*END EMPTYBUF;                                                  02S0294
@EL00003 DS    0H                                               02S0294
@EF00003 DS    0H                                               02S0294
@ER00003 LM    @14,@12,@SA00003                                 02S0294
         BR    @14                                              02S0294
*RECMOVE:PROC;                                                  02S0295
RECMOVE  STM   @14,@12,12(@13)                                  02S0295
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT NAME= RECMOVE                                             */
*/*                                                                  */
*/*DESCRIPTIVE NAME= MOVE RECORD TO SMF BUFFER                       */
*/*                                                                  */
*/*FUNCTION=                                                         */
*/*  MOVES A RECORD OR RECORD SEGMENT TO THE SMF BUFFER. IT THEN     */
*/*  UPDATES THE BLOCK DESCRIPTOR WORD IN THE BUFFER TO REFLECT THE  */
*/*  INCREMENTED BUFFER LENGTH.                                      */
*/*                                                                  */
*/*  OPERATION=                                                      */
*/*    MOVING IS DONE 256 BYTES AT A TIME EACH PASS THROUGH A LOOP   */
*/*                                                                  */
*/*ENTRY POINT= RECMOVE                                              */
*/*  INPUT=                                                          */
*/*    DATAPTR- POINTER TO THE DATA PORTION OF THE RECORD            */
*/*    BUFPTR- POINTER TO THE SMF BUFFER                             */
*/*    RECLEN- RECORD LENGTH                                         */
*/*                                                                  */
*/*EXITS=                                                            */
*/*  CONDITION= NORMAL- RECORD OR RECORD SEGMENT MOVED TO SMF BUFFER */
*/*  OUTPUT=                                                         */
*/*    SMF BUFFER- WITH SMF/USER RECORD, BDW UPDATED WITH RECORD LEN */
*/*    DATAPTR- UPDATED TO POINT 1 BYTE PAST LAST BYTE MOVED         */
*/*  RETURN CODES= NONE                                              */
*/*                                                                  */
*/********************************************************************/
*CURRPTR=ADDR(SMFBUFFR(SMFBLOCK+1));   /* NEXT AVAIL BUFFER POSITION */
         LH    @10,SMFBLOCK(,BUFPTR)                            02S0296
         LA    @10,SMFBUFFR(@10,BUFPTR)                         02S0296
         ST    @10,CURRPTR                                      02S0296
*RECSIZE=RECLEN-4;                     /* LENGTH OF REC DATA PORTION */
         LH    @02,RECLEN                                       02S0297
         SH    @02,@CH00046                                     02S0297
         ST    @02,RECSIZE                                      02S0297
*SMFDESC=RECHEADR;                     /* SET UP RECORD/SEGMENT 02S0298
*                                         DESCRIPTOR WORD IN BUFFER  */
         MVC   SMFDESC(4,@10),RECHEADR                          02S0298
*DO STARTPOS=1 BY 256 WHILE(RECSIZE>256);       /* MOVE RECORD TO
*                                         THE SMF BUFFER             */
         LA    @10,1                                            02S0299
         STH   @10,STARTPOS                                     02S0299
         B     @DE00299                                         02S0299
@DL00299 DS    0H                                               02S0300
*  BUFFER(STARTPOS:STARTPOS+255)=RECORD(1:256);                 02S0300
         LH    @10,STARTPOS                                     02S0300
         L     @02,CURRPTR                                      02S0300
         ALR   @02,@10                                          02S0300
         L     @15,DATAPTR                                      02S0300
         MVC   BUFFER-1(256,@02),RECORD(@15)                    02S0300
*  DATAPTR=DATAPTR+256;                /* ADJ PTR WITHIN RECORD      */
         LA    @02,256                                          02S0301
         ALR   @15,@02                                          02S0301
         ST    @15,DATAPTR                                      02S0301
*  RECSIZE=RECSIZE-256;                /* CALC SIZE OF REMAINDER     */
         LCR   @02,@02                                          02S0302
         AL    @02,RECSIZE                                      02S0302
         ST    @02,RECSIZE                                      02S0302
*END;                                                           02S0303
         AH    @10,@CH00100                                     02S0303
         STH   @10,STARTPOS                                     02S0303
@DE00299 L     @10,RECSIZE                                      02S0303
         CH    @10,@CH00100                                     02S0303
         BH    @DL00299                                         02S0303
*BUFFER(STARTPOS:STARTPOS+RECSIZE-1)=    /* MOVE IN REMAINING        */
*RECORD(1:RECSIZE);                    /* PORTION OF THE RECORD      */
         LH    @02,STARTPOS                                     02S0304
         L     @01,CURRPTR                                      02S0304
         ALR   @01,@02                                          02S0304
         LR    @02,@10                                          02S0304
         BCTR  @02,0                                            02S0304
         L     @15,DATAPTR                                      02S0304
         EX    @02,@SM02054                                     02S0304
*SMFBLOCK=SMFBLOCK+RECLEN;             /* UPDATE BUFFER BLOCKSIZE    */
         LH    @02,SMFBLOCK(,BUFPTR)                            02S0305
         AH    @02,RECLEN                                       02S0305
         STH   @02,SMFBLOCK(,BUFPTR)                            02S0305
*DATAPTR=DATAPTR+RECSIZE;              /* UPDATE RECORD DATA PTR FOR */
         ALR   @15,@10                                          02S0306
         ST    @15,DATAPTR                                      02S0306
*END RECMOVE;                          /* RECORD SEGMENTING          */
@EL00004 DS    0H                                               02S0307
@EF00004 DS    0H                                               02S0307
@ER00004 LM    @14,@12,12(@13)                                  02S0307
         BR    @14                                              02S0307
*STAERTN: PROC OPTIONS(NOSAVEAREA,NOSAVE); /*                @ZA10115*/
STAERTN  DS    0H                                               02S0309
*/********************************************************************/
*/*                                                                  */
*/* ENTRY TO THIS RTN IS VIA ABEND/ESTAE INTERFACE WHEN THE  @ZA10115*/
*/* SVC HAS ABENDED UNDER THE USER TASK. CLEAN-UP IS PER-    @ZA10115*/
*/* FORMED AND UNLESS THE ABEND IS X22 TYPE, A DUMP IS       @ZA31684*/
*/* TAKEN.  ABEND PROCESSING IS CONTINUED.                   @ZA31684*/
*/*                                                                  */
*/********************************************************************/
*RFY (REG8,REG11,REG12,REG14) RSTD; /*                       @ZA10115*/
*REG11 = 12;                        /* SET UP FOR STAE       @ZA10115*/
         LA    REG11,12                                         02S0310
*GEN REFS(SDWAPARM,SDWAPTR,SDWAABCC); /* PARMLIST TEST       @ZA31684*/
         DROP  REG11                   CHANGE BASE REGISTER    @ZA10115
         USING STAERTN,REG15           NEW BASE REG, THIS RTN  @ZA10115
         CR    REG0,REG11              CHECK FOR STAE R/C 12   @ZA10115
         BE    NOPARM                  YES, NO STAE PARM AREA  @ZA10115
         L     REG2,SDWAPARM(,SDWAPTR) GET PARMLIST ADDR       @ZA10115
         LR    REG8,REG1               SAVE SDWA PTR           @ZA10115
         L     REG1,SDWAABCC(,SDWAPTR) GET COMPLETION CODE     @ZA31684
NOPARM   EQU   *                                               @ZA10115
         SLL   REG1,12(0)              CLEAR UNWANTED FIELDS   @ZA31684
         SRL   REG1,24(0)                FROM COMPLETION CODE  @ZA31684
         DROP  REG15                                           @ZA10115
         USING START,REG11             CHANGE BASE REGISTER    @ZA10115
*REG11 = REG2 -> BASESAVE;          /* ORIGINAL PROG. BASE   @ZA10115*/
         L     REG11,BASESAVE(,REG2)                            02S0312
*REG12 = REG2 -> DATASAVE;          /* DATA AREA REGISTER    @ZA10115*/
         L     REG12,DATASAVE(,REG2)                            02S0313
*IF REG1^='22'X THEN                 /* NO DUMP ON X22 ABEND @ZA31684*/
         CH    REG1,@CH02034                                    02S0314
         BE    @RF00314                                         02S0314
*  DO;                               /*                      @ZA31684*/
*    WORKAREA(1:DUMPLEN)=DUMPLIST(1:DUMPLEN);  /*MOVE LIST TO GETMAINED
*                                     CORE                   @ZA10115*/
         SLR   @15,@15                                          02S0316
         IC    @15,DUMPLEN                                      02S0316
         BCTR  @15,0                                            02S0316
         EX    @15,@SM02056                                     02S0316
*    REG1 = ADDR(WORKAREA);          /* PARM REG FOR DUMP    @ZA10115*/
         LA    REG1,WORKAREA                                    02S0317
*    GEN(  SDUMP   MF=(E,(1)));      /* ISSUE DUMP COMMAND   @ZA10115*/
           SDUMP   MF=(E,(1))
*  END;                              /* END SDUMP            @ZA31684*/
*/* REMOVE TEST FOR ENQUEUE                                  @ZA31277*/
*       ENQCORE(1:DEQLEN)=DEQLIST(1:DEQLEN);   /* INIT PLIST @ZA31277*/
@RF00314 L     @15,DEQLEN                                       02S0320
         BCTR  @15,0                                            02S0320
         EX    @15,@SM02058                                     02S0320
*    GEN(DEQ   MF=(E,ENQCORE));      /* RET = HAVE DEQ FROM SMF BUFFER
*                                                            @ZA31277*/
         DEQ   MF=(E,ENQCORE)
* /* REMOVE RESETTING OF ENQSW AND END STMT                  @ZA31277*/
*IF CORESW = '1'B THEN              /* DYNAMIC CORE HELD     @ZA10115*/
         TM    CORESW,B'01000000'                               02S0322
         BNO   @RF00322                                         02S0322
*  DO;                              /* YES, ISSUE FREEMAIN   @ZA10115*/
*    GEN(L     @00,@SIZDATD);                             /* @ZA10115*/
         L     @00,@SIZDATD
*    GEN(LR    @01,@12);                                  /* @ZA10115*/
         LR    @01,@12
*    GEN(FREEMAIN R,LV=(0),A=(1));   /* FREE DYNAMIC CORE    @ZA10115*/
         FREEMAIN R,LV=(0),A=(1)
*  END;                                                   /* @ZA10115*/
*RFY(REG8,REG11,REG12,REG14) UNRSTD;                      /* @ZA10115*/
@RF00322 DS    0H                                               02S0329
*REG15 = 0;                         /* SET STAE TERM CODE    @ZA10115*/
         SLR   REG15,REG15                                      02S0329
*END STAERTN;                                                   02S0330
@EL00005 DS    0H                                               02S0330
@EF00005 DS    0H                                               02S0330
@ER00005 BR    @14                                              02S0330
@PB00005 DS    0H                                               02S0330
*END IEEMB830                                                   01S0331
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (B830SPEC)                                        *
*/*%INCLUDE SYSLIB  (B830DATA)                                        *
*/*%INCLUDE SYSLIB  (CVT     )                                        *
*/*%INCLUDE SYSLIB  (IEEBASEA)                                        *
*/*%INCLUDE SYSLIB  (IEESMCA )                                        *
*/*%INCLUDE SYSLIB  (IEFPTRS )                                        *
*/*%INCLUDE SYSLIB  (IKJTCB  )                                        *
*/*%INCLUDE SYSLIB  (IHAASCB )                                        *
*/*%INCLUDE SYSLIB  (IHASDWA )                                        *
*/*%INCLUDE SYSLIB  (INITIAL )                                        *
*/*%INCLUDE SYSLIB  (INITSPEC)                                        *
*/*%INCLUDE SYSLIB  (PROLOG  )                                        *
*/*%INCLUDE SYSLIB  (PROLGSPC)                                        *
*/*%INCLUDE SYSLIB  (SMFHEADR)                                        *
*/*%INCLUDE SYSLIB  (HEADRSPC)                                        *
*/*%INCLUDE SYSLIB  (GETBUFR )                                        *
*/*%INCLUDE SYSLIB  (GETBUFR )                                        *
*/*%INCLUDE SYSLIB  (GETBUFR )                                        *
*/*%INCLUDE SYSLIB  (GETBSPEC)                                        *
*/*%INCLUDE SYSLIB  (GETBSPEC)                                        *
*/*%INCLUDE SYSLIB  (GETBSPEC)                                        *
*/*%INCLUDE SYSLIB  (HALTREC )                                        *
*/*%INCLUDE SYSLIB  (HALTSPEC)                                        *
*/*%INCLUDE SYSLIB  (RECPROC )                                        *
*/*%INCLUDE SYSLIB  (RECSPECS)                                        *
*/*%INCLUDE SYSLIB  (SPLITREC)                                        *
*/*%INCLUDE SYSLIB  (SPLITSPC)                                        *
*/*%INCLUDE SYSLIB  (USEREXT )                                        *
*/*%INCLUDE SYSLIB  (EXITSPEC)                                        *
*/*%INCLUDE SYSLIB  (EMPTYBUF)                                        *
*/*%INCLUDE SYSLIB  (EMPTYSPC)                                        *
*/*%INCLUDE SYSLIB  (RECMOVE )                                        *
*/*%INCLUDE SYSLIB  (MOVESPEC)                                        *
*/*%INCLUDE SYSLIB  (STAERTN )                                        *
*;                                                              01S0331
@DATA    DS    0H
@CH00043 DC    H'1'
@CH00046 DC    H'4'
@CH02025 DC    H'14'
@CH02010 DC    H'18'
@CH02035 DC    H'21'
@CH00100 DC    H'256'
@CH02034 DC    XL2'22'
@SX02039 XC    AREA256(0,P),AREA256(P)
@SM02042 MVC   STAELIST(0),ELIST
@SM02044 MVC   ENQBEGIN(0),ENQLIST1
@SX02051 XC    SMFREC-4(0,@02),SMFREC-4(@02)
@SM02054 MVC   BUFFER-1(0,@01),RECORD(@15)
@SM02056 MVC   WORKAREA(0),DUMPLIST
@SM02058 MVC   ENQCORE(0),DEQLIST
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@SA00002 DS    15F
@SA00003 DS    15F
IEEMB830 CSECT
         DS    0F
@CF00093 DC    F'8'
@CF00065 DC    F'16'
@CF00926 DC    F'20'
@DATD    DSECT
         DS    0D
DATAPTR  DS    A
CURRPTR  DS    A
RECHEADR DS    AL4
         ORG   RECHEADR
RECLEN   DS    FL2
RECSEG   DS    CL1
@NM00004 DS    CL1
         ORG   RECHEADR+4
ENQTCB   DS    A
REGSAVE  DS    A
STARTPOS DS    H
K        DS    H
DATAFLDS DS    CL12
         ORG   DATAFLDS
RETCODE  DS    AL4
RECSIZE  DS    FL4
RECORDLN DS    FL4
         ORG   DATAFLDS+12
U83PARMS DS    CL8
         ORG   U83PARMS
U83REC   DS    AL4
U83RESV  DS    AL4
         ORG   U83PARMS+8
WORKAREA DS    CL80
DATASETS DS    BL1
SWITCH   DS    CL1
         ORG   SWITCH
@NM00010 DS    BL1
CORESW   EQU   SWITCH+0
@NM00011 EQU   SWITCH+0
         ORG   SWITCH+1
         DS    CL2
STAEPARM DS    CL24
         ORG   STAEPARM
BASEADDR DS    AL4
DATAADDR DS    AL4
STAELIST DS    CL16
         ORG   STAEPARM+24
IEEMB830 CSECT
         DS    0F
@SIZDATD DC    AL1(245)
         DC    AL3(@ENDDATD-@DATD)
@CV00138 DC    V(IEEMB827)
         DS    0D
HMASK    DC    XL4'0000FFFF'
DUMPLEN  DC    AL1(DUMPEND-DUMPLIST)
ESTAELEN DC    AL1(ELISTEND-ELIST)
@CC02011 DC    C'HALT'
SMFMAJOR DC    CL8'SYSZSMF1'
SMFMINOR DC    CL3'BUF'
@DATD    DSECT
ENQCORE  ENQ   (SMFMAJOR,SMFMINOR,E,3,SYSTEM),MF=L             @ZA12386
POSTL    POST  ,MF=L
IEEMB830 CSECT
ENQLIST  ENQ   (SMFMAJOR,SMFMINOR,E,3,SYSTEM),MF=L             @ZA12386
ENQLEN   EQU   *-ENQLIST                                       @ZA12386
POSTD    POST  ,MF=L
POSTLEN  EQU   *-POSTD
@DATD    DSECT
ENQBEGIN DS    0F                                              @ZA06202
ENQCORE1 ENQ (SMFMAJOR,SMFMINOR,E,3,SYSTEM),RET=TEST,MF=L      @ZA06202
IEEMB830 CSECT
ENQLIST1 DS   0F                                               @ZA06202
  ENQ (SMFMAJOR,SMFMINOR,E,3,SYSTEM),RET=TEST,MF=L             @ZA06202
ENQLENG DC    A(*-ENQLIST1)                                    @ZA06202
IEEMB830 CSECT
DEQLIST  DS    0F                                              @ZA31277
  ENQ (SMFMAJOR,SMFMINOR,E,3,SYSTEM),RET=HAVE,MF=L             @ZA31277
DEQLEN   DC    A(*-DEQLIST)                                    @ZA31277
IEEMB830 CSECT
ELIST    ESTAE MF=L                                            @ZA10115
ELISTEND EQU   *                                               @ZA10115
IEEMB830 CSECT
DUMPLIST SDUMP HDR='IEEMB830 SVC DUMP',SDATA=(PSA,NUC,RGN,LPA,CSA),MF=L
DUMPEND  EQU   *                                               @ZA10115
IEEMB830 CSECT
PATCH830 DC    (50)X'00'
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEEMB830 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RECPTR   EQU   @03
BUFPTR   EQU   @04
SMCAPTR  EQU   @05
P        EQU   @10
REG15    EQU   @15
N        EQU   @07
REG0     EQU   @00
REG1     EQU   @01
REG2     EQU   @02
REG3     EQU   @03
REG4     EQU   @04
REG6     EQU   @06
REG7     EQU   @07
REG8     EQU   @08
REG10    EQU   @10
REG11    EQU   @11
REG12    EQU   @12
REG13    EQU   @13
REG14    EQU   @14
SDWAPTR  EQU   @01
REG5     EQU   @05
REG9     EQU   @09
CVTPTR   EQU   16
USEREC   EQU   0
USERDESC EQU   USEREC
USERSIZE EQU   USERDESC
USERCONT EQU   USEREC+4
USERTYP  EQU   USEREC+5
USERTIME EQU   USEREC+6
USERDATE EQU   USEREC+10
USERSYID EQU   USEREC+14
RECORD   EQU   0
SMFBUFFR EQU   0
SMFBLOCK EQU   SMFBUFFR
SMFREC   EQU   SMFBUFFR+4
SMFRECHD EQU   0
SMFDESC  EQU   SMFRECHD
BUFFER   EQU   SMFRECHD+4
ENQPARM  EQU   0
ENQRC    EQU   ENQPARM+3
AREA256  EQU   0
IEFU83   EQU   0
EXITPARM EQU   0
BASESAVE EQU   EXITPARM
DATASAVE EQU   EXITPARM+4
CVTMAP   EQU   0
CVTTCBP  EQU   CVTMAP
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTMSER  EQU   CVTMAP+148
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTSMCA  EQU   CVTMAP+196
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
BASE     EQU   0
@NM00014 EQU   BASE+13
BALGSTAT EQU   BASE+24
BALOG    EQU   BALGSTAT+4
BASFL    EQU   BASE+36
BARSW    EQU   BASFL
MSLOGST  EQU   BASE+46
BASPBYTE EQU   BASE+47
BAMONITR EQU   BASE+56
BAASCB   EQU   BASE+100
@NM00036 EQU   BASE+104
MSLGCLOZ EQU   BASE+108
MSCLOSSW EQU   MSLGCLOZ
MSLGWLOG EQU   BASE+112
MSWLOGSW EQU   MSLGWLOG
MSLGWTR  EQU   BASE+116
MSWTRSW  EQU   MSLGWTR
MSLGSTRT EQU   BASE+120
MSSTRTSW EQU   MSLGSTRT
MS1BASEX EQU   BASE+136
BASES01  EQU   0
MSNTAL   EQU   BASES01
MSSSB    EQU   BASES01+1
MSBTN    EQU   MSSSB
MSPFG    EQU   BASES01+2
MSECBFL  EQU   BASES01+3
MSTUS    EQU   BASES01+4
MSSSA    EQU   MSTUS
MSINLSW  EQU   MSSSA
MSREOF   EQU   MSSSA
MSNWP    EQU   MSSSA
MSFHF    EQU   BASES01+5
SMCABASE EQU   0
SMCAOPT  EQU   SMCABASE
SMCAEXT  EQU   SMCAOPT
SMCAMISC EQU   SMCABASE+1
SMCAUSER EQU   SMCAMISC
SMCAMAN  EQU   SMCAMISC
SMCAFIRT EQU   SMCAMISC
SMCABSW  EQU   SMCAMISC
SMCABUF  EQU   SMCABASE+12
SMCABSIZ EQU   SMCABUF
SMCASID  EQU   SMCABASE+16
SMCABUFP EQU   SMCABASE+20
SMCAPSTA EQU   SMCABASE+30
SMCAPLBL EQU   SMCABASE+34
SMCASTA  EQU   SMCABASE+46
SMCAALBL EQU   SMCABASE+50
SMCAWECB EQU   SMCABASE+56
SMCABECB EQU   SMCABASE+60
SMCASGWR EQU   SMCABASE+64
SMCASGFT EQU   SMCABASE+68
SMCAENTY EQU   SMCABASE+80
SMCAENDI EQU   SMCAENTY
SMCAFOPT EQU   SMCABASE+82
SMCASWA  EQU   SMCABASE+104
SMCADSTR EQU   SMCASWA
SMCADSSP EQU   SMCASWA
SMCADSSW EQU   SMCASWA
SMCAASCB EQU   SMCABASE+120
SMCAPGIN EQU   SMCABASE+136
SMCAPGOT EQU   SMCABASE+140
SMCAU83  EQU   SMCABASE+168
SMCASTCB EQU   SMCABASE+176
TCBASCB  EQU   0
TCBPTR   EQU   TCBASCB+4
ASCBPTR  EQU   TCBASCB+12
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFA    EQU   TCBFLGS1
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBJSTCA EQU   TCBJSTCB+1
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
ASCB     EQU   0
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
SDWA     EQU   0
SDWAPARM EQU   SDWA
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAERRB EQU   SDWAFLGS+1
SDWAERRC EQU   SDWAFLGS+2
SDWAERRD EQU   SDWAFLGS+3
SDWAIOFS EQU   SDWA+238
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWAACF2 EQU   SDWAPARQ+1
SDWAACF3 EQU   SDWAPARQ+2
SDWAACF4 EQU   SDWAPARQ+3
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWARECP EQU   SDWA+292
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWARA   EQU   SDWA+400
SDWADPVA EQU   SDWARA+2
POSTCODE EQU   SMCABECB+3
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
@NM00105 EQU   SDWA+512
SDWAVRA  EQU   SDWARA+4
SDWAURAL EQU   SDWARA+3
@NM00104 EQU   SDWADPVA
SDWAEBC  EQU   SDWADPVA
SDWAHEX  EQU   SDWADPVA
SDWAVRAL EQU   SDWARA
@NM00103 EQU   SDWA+396
SDWACOMP EQU   SDWA+392
SDWARCPL EQU   SDWA+364
@NM00102 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00101 EQU   SDWADDAT+3
@NM00100 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00099 EQU   SDWADDAT+1
@NM00098 EQU   SDWASDAT
SDWAQQS  EQU   SDWASDAT
SDWACBS  EQU   SDWASDAT
SDWAGTF  EQU   SDWASDAT
SDWASWA  EQU   SDWASDAT
SDWALSQA EQU   SDWASDAT
SDWASQA  EQU   SDWASDAT
SDWANUC  EQU   SDWASDAT
@NM00097 EQU   SDWADUMP+2
@NM00096 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00095 EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
SDWAREXN EQU   SDWARECP+16
SDWACSCT EQU   SDWARECP+8
SDWAMODN EQU   SDWARECP
@NM00094 EQU   SDWA+290
SDWAASID EQU   SDWA+288
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAAPLW EQU   SDWALKWS+16
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWASALL EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00093 EQU   SDWAACF3
@NM00092 EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
SDWAUPRG EQU   SDWAACF2
@NM00091 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00090 EQU   SDWAACF2
SDWARCRD EQU   SDWAACF2
SDWARCDE EQU   SDWAPARQ
SDWALCPU EQU   SDWACPUA+2
@NM00089 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
SDWARTYA EQU   SDWA+240
@NM00088 EQU   SDWA+239
@NM00087 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
SDWAFMID EQU   SDWA+236
@NM00086 EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWANRBE EQU   SDWAERRD
SDWACLUP EQU   SDWAERRD
@NM00085 EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAPERC EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASTAF EQU   SDWAERRC
SDWASRBM EQU   SDWAERRB
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00084 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWAPCHK EQU   SDWAERRA
SDWAMCHK EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00083 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00082 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAREGU EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00081 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR15 EQU   SDWASRSV+60
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR09 EQU   SDWASRSV+36
SDWASR08 EQU   SDWASRSV+32
SDWASR07 EQU   SDWASRSV+28
SDWASR06 EQU   SDWASRSV+24
SDWASR05 EQU   SDWASRSV+20
SDWASR04 EQU   SDWASRSV+16
SDWASR03 EQU   SDWASRSV+12
SDWASR02 EQU   SDWASRSV+8
SDWASR01 EQU   SDWASRSV+4
SDWASR00 EQU   SDWASRSV
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00080 EQU   SDWAINC2
@NM00079 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00078 EQU   SDWAILC2
@NM00077 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00076 EQU   SDWANXT2
@NM00075 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00074 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00073 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00072 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00071 EQU   SDWAINC1
@NM00070 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00069 EQU   SDWAILC1
@NM00068 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00067 EQU   SDWANXT1
@NM00066 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00065 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00064 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00063 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00062 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR15 EQU   SDWAGRSV+60
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00061 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00060 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
SDWACMPC EQU   SDWAABCC+1
@NM00059 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00058 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
SDWAREQ  EQU   SDWACMPF
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBLGCB EQU   ASCB+180
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBCMSB EQU   ASCB+132
ASCBCMSF EQU   ASCB+128
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBQSVC EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSM  EQU   ASCB+52
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBASID EQU   ASCB+36
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBLSLQ EQU   ASCB+24
ASCBFSLQ EQU   ASCB+20
ASCBIOSP EQU   ASCB+16
ASCBLOCK EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
@NM00057 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBCAUF  EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00056 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBACTIV EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBCCPVI EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBRSV96 EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBRV306 EQU   TCB+240
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00055 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00054 EQU   TCBPMASK
TCBRBP   EQU   TCB
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
ASCBNEXT EQU   TCBASCB+8
TCBNEXT  EQU   TCBASCB
SMCAWTCB EQU   SMCABASE+172
SMCAPGM  EQU   SMCABASE+164
SMCARGNM EQU   SMCABASE+160
SMCASPOT EQU   SMCABASE+156
SMCASPIN EQU   SMCABASE+152
SMCARGNS EQU   SMCABASE+148
SMCAPGRL EQU   SMCABASE+144
SMCADOMY EQU   SMCAPGOT
SMCADOMX EQU   SMCAPGIN
SMCATEXP EQU   SMCABASE+132
SMCASAVE EQU   SMCABASE+128
SMCARS21 EQU   SMCABASE+124
SMCATJID EQU   SMCAASCB+2
SMCAPOST EQU   SMCAASCB
SMCADSCT EQU   SMCABASE+116
SMCADSTM EQU   SMCABASE+108
SMCASWD  EQU   SMCABASE+107
SMCASWC  EQU   SMCABASE+106
SMCASWB  EQU   SMCABASE+105
SMCAZEOD EQU   SMCASWA
SMCANAVL EQU   SMCASWA
SMCANADA EQU   SMCASWA
SMCAOPFL EQU   SMCASWA
SMCASWAR EQU   SMCASWA
SMCAXNAM EQU   SMCABASE+96
@NM00053 EQU   SMCABASE+92
SMCAXCTL EQU   SMCABASE+88
SMCAWRTP EQU   SMCABASE+84
SMCAENAL EQU   SMCABASE+83
SMCAFGN  EQU   SMCAFOPT
SMCAFTDS EQU   SMCAFOPT
SMCAFR01 EQU   SMCAFOPT
SMCAFVOL EQU   SMCAFOPT
SMCAFDSA EQU   SMCAFOPT
SMCAFEXT EQU   SMCAFOPT
SMCAFOP2 EQU   SMCAFOPT
SMCAFOP1 EQU   SMCAFOPT
SMCAENOP EQU   SMCAENTY+1
SMCADSNF EQU   SMCAENDI
SMCARS20 EQU   SMCAENDI
SMCARS19 EQU   SMCAENDI
SMCARS18 EQU   SMCAENDI
SMCARS17 EQU   SMCAENDI
SMCARS16 EQU   SMCAENDI
SMCARS15 EQU   SMCAENDI
SMCARS14 EQU   SMCAENDI
SMCAWAIT EQU   SMCABASE+72
SMCAADCB EQU   SMCABASE+52
SMCAYORX EQU   SMCABASE+51
SMCAANL  EQU   SMCAALBL
SMCAASL  EQU   SMCAALBL
SMCAANSL EQU   SMCAALBL
SMCARS13 EQU   SMCAALBL
SMCARS12 EQU   SMCAALBL
SMCARS11 EQU   SMCAALBL
SMCARS10 EQU   SMCAALBL
SMCARS09 EQU   SMCAALBL
SMCAADAR EQU   SMCABASE+47
SMCAAVOL EQU   SMCASTA
SMCAAUNT EQU   SMCASTA
SMCARS08 EQU   SMCASTA
SMCAAMOD EQU   SMCASTA
SMCAAMTY EQU   SMCASTA
SMCAADA  EQU   SMCASTA
SMCAATAP EQU   SMCASTA
SMCAANAV EQU   SMCASTA
SMCAADEV EQU   SMCABASE+40
SMCAPDCB EQU   SMCABASE+36
SMCAXORY EQU   SMCABASE+35
SMCAPNL  EQU   SMCAPLBL
SMCAPSL  EQU   SMCAPLBL
SMCAPNSL EQU   SMCAPLBL
SMCARS07 EQU   SMCAPLBL
SMCARS06 EQU   SMCAPLBL
SMCARS05 EQU   SMCAPLBL
SMCARS04 EQU   SMCAPLBL
SMCARS03 EQU   SMCAPLBL
SMCAPDAR EQU   SMCABASE+31
SMCAPVOL EQU   SMCAPSTA
SMCAPUNT EQU   SMCAPSTA
SMCARS02 EQU   SMCAPSTA
SMCAMOD  EQU   SMCAPSTA
SMCAPMTY EQU   SMCAPSTA
SMCAPDA  EQU   SMCAPSTA
SMCAPTAP EQU   SMCAPSTA
SMCAPNAV EQU   SMCAPSTA
SMCAPDEV EQU   SMCABASE+24
SMCAJWT  EQU   SMCABASE+8
SMCATIOT EQU   SMCABASE+4
SMCATOFF EQU   SMCABASE+2
SMCADUMP EQU   SMCAMISC
SMCADBSY EQU   SMCAMISC
SMCAPSDP EQU   SMCAMISC
SMCAOPI  EQU   SMCAMISC
SMCAFGND EQU   SMCAOPT
SMCATDS  EQU   SMCAOPT
SMCARS01 EQU   SMCAOPT
SMCAVOL  EQU   SMCAOPT
SMCADSA  EQU   SMCAOPT
SMCAOPT2 EQU   SMCAOPT
SMCAOPT1 EQU   SMCAOPT
MSSPARE  EQU   BASES01+48
MSUCBAL  EQU   BASES01+44
MSUCBPR  EQU   BASES01+40
MSBOBECB EQU   BASES01+36
MSSJQ    EQU   BASES01+32
MSECB    EQU   BASES01+28
MSPBP    EQU   BASES01+24
MSERM    EQU   BASES01+22
MSPASS   EQU   BASES01+14
MSVRB    EQU   BASES01+6
MSQHR    EQU   MSFHF
@NM00052 EQU   MSFHF
MSPSDT   EQU   MSFHF
MSREPLYB EQU   MSFHF
MSFAX    EQU   MSFHF
MSTTT    EQU   MSFHF
MSCSD    EQU   MSFHF
MSNMF    EQU   MSFHF
MSJNF    EQU   MSSSA
MSYOUT   EQU   MSNWP
MSNRP    EQU   MSSSA
MSSRDR   EQU   MSREOF
MSWRLOG  EQU   MSSSA
MSNUPSW  EQU   MSSSA
MSWRPEN  EQU   MSSSA
MSSSSIPL EQU   MSINLSW
MSSUM    EQU   MSECBFL
MSMCR    EQU   MSECBFL
MSYSOUT  EQU   MSECBFL
MSYSIN   EQU   MSECBFL
MSATTN   EQU   MSECBFL
MSWTL    EQU   MSECBFL
MSWTO    EQU   MSECBFL
MSEXT    EQU   MSECBFL
MSCCS    EQU   MSPFG
MSBSP    EQU   MSPFG
MSSYT    EQU   MSPFG
MSSYN    EQU   MSPFG
MSICR    EQU   MSPFG
MSCMC    EQU   MSPFG
MSPNB    EQU   MSPFG
MSDATE   EQU   MSPFG
@NM00051 EQU   MSBTN
MSTN     EQU   MSBTN
@NM00050 EQU   MSBTN
@NM00049 EQU   MSBTN
MSSO     EQU   MSBTN
MSROLFLG EQU   MSBTN
MSCANFLG EQU   MSBTN
MSCONFLG EQU   MSBTN
MSPNIP   EQU   MSNTAL
MSQNIP   EQU   MSNTAL
MSCURE34 EQU   MSNTAL
@NM00048 EQU   MSNTAL
@NM00047 EQU   MSNTAL
@NM00046 EQU   MSNTAL
@NM00045 EQU   MSNTAL
MSNIP    EQU   MSNTAL
@NM00044 EQU   MS1BASEX+40
@NM00043 EQU   MS1BASEX+20
@NM00042 EQU   MS1BASEX
@NM00041 EQU   BASE+128
MSLGJSCB EQU   BASE+124
@NM00040 EQU   MSSTRTSW
MSSTRTP  EQU   MSSTRTSW
MSSTRTW  EQU   MSSTRTSW
@NM00039 EQU   MSWTRSW
MSWTRP   EQU   MSWTRSW
MSWTRW   EQU   MSWTRSW
@NM00038 EQU   MSWLOGSW
MSWLOGP  EQU   MSWLOGSW
MSWLOGW  EQU   MSWLOGSW
@NM00037 EQU   MSCLOSSW
MSCLOSP  EQU   MSCLOSSW
MSCLOSW  EQU   MSCLOSSW
MSLOGLMT EQU   @NM00036+1
MSLOGCLS EQU   @NM00036
MSSMFPRM EQU   BASE+96
MSCOMMND EQU   BASE+92
BASP12   EQU   BASE+90
BASTCNT  EQU   BASE+88
BASESCT  EQU   BASE+86
BAJNCNT  EQU   BASE+84
BASUBECB EQU   BASE+80
BALOGCOM EQU   BASE+76
BADACNT  EQU   BASE+74
BATACNT  EQU   BASE+72
BAJBNR   EQU   BASE+64
BASP11   EQU   BASE+62
BALCCNT  EQU   BASE+61
BADUMPID EQU   BASE+60
BABCMAX  EQU   BASE+58
BAMONTR2 EQU   BASE+57
@NM00035 EQU   BAMONITR
BAMACTVE EQU   BAMONITR
@NM00034 EQU   BAMONITR
@NM00033 EQU   BAMONITR
@NM00032 EQU   BAMONITR
@NM00031 EQU   BAMONITR
BASPACE  EQU   BAMONITR
BADSN    EQU   BAMONITR
BADSO    EQU   BASE+52
BALOGECB EQU   BASE+48
@NM00030 EQU   BASPBYTE
@NM00029 EQU   BASPBYTE
@NM00028 EQU   BASPBYTE
@NM00027 EQU   BASPBYTE
@NM00026 EQU   BASPBYTE
BAMASCH  EQU   BASPBYTE
BATRACE  EQU   BASPBYTE
BAMSSTAR EQU   BASPBYTE
@NM00025 EQU   MSLOGST
@NM00024 EQU   MSLOGST
MSLOGSTA EQU   MSLOGST
MSLOGIPL EQU   MSLOGST
MSLOGDAR EQU   MSLOGST
MSLOGCOM EQU   MSLOGST
MSLOGTHD EQU   MSLOGST
MSLOGENQ EQU   MSLOGST
BAMIPAR2 EQU   BASE+44
BAMINPAR EQU   BASE+42
BAPKES   EQU   BASE+40
BAICTR   EQU   BASE+38
@NM00023 EQU   BASE+37
BADSET   EQU   BARSW
BANOSET  EQU   BARSW
BAMIDNT  EQU   BARSW
BAHR     EQU   BARSW
BAVU     EQU   BARSW
BAINTSET EQU   BARSW
MSTODWTO EQU   BARSW
BAIN     EQU   BARSW
BACV     EQU   BASE+32
@NM00022 EQU   BALOG
@NM00021 EQU   BALOG
@NM00020 EQU   BALOG
@NM00019 EQU   BALOG
@NM00018 EQU   BALOG
@NM00017 EQU   BALOG
@NM00016 EQU   BALOG
BALOGINT EQU   BALOG
MSLOGSVC EQU   BALGSTAT
BAPRC    EQU   BASE+20
BAQ      EQU   BASE+16
BAIPLCC  EQU   @NM00014+2
@NM00015 EQU   @NM00014
BAIPL    EQU   BASE+12
BALAD    EQU   BASE+8
BATRM    EQU   BASE+4
BACHN    EQU   BASE
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00013 EQU   CVTFIX+248
@NM00012 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVT      EQU   CVTMAP
@NM00009 EQU   ENQPARM+8
@NM00008 EQU   ENQPARM+4
@NM00007 EQU   ENQPARM+2
@NM00006 EQU   ENQPARM+1
@NM00005 EQU   ENQPARM
@NM00003 EQU   SMFDESC+2
SMFLOCNT EQU   SMFDESC
@NM00002 EQU   SMFBUFFR+2
@NM00001 EQU   USERDESC+2
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00159 EQU   @RC00157
@RF00196 EQU   @RC00188
@RC00210 EQU   @RC00188
@RC00255 EQU   @EL00002
@RF00285 EQU   @EL00003
@RF00287 EQU   @EL00003
@PB00004 EQU   @PB00005
@RF00161 EQU   @RC00159
@RF00167 EQU   @RC00159
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IEEMB830,(C'PLS1944',0701,78193)
