 TITLE ' IEBTCR05 - READ/EDIT MODULE -- INTRODUCTORY NARRATIVE'
* FUNCTION/OPERATION:  THIS MODULE IS THE READ/EDIT PORTION OF THE
*   UTILITY. IT CONSISTS OF TWO CSECTS; ONE CONTAINING THE MTST AND
*   MTDI TRANSLATE & TEST TABLES AND THE MTST TRANSLATE TABLES, THE
*   OTHER CONTAINING THE REMAINDER OF THE MODULE.
*
*        CSECT NAME         CSECT USAGE             CSECT SIZE
*       ------------       -------------           ------------
*        IEBTCR05           READ AND EDIT              3572
*        CSECT2             TABLES                      778
*
*   DATA FROM THE 2495 TAPE CARTRIDGE READER IS READ VIA EXCP CODING
*   INTO ONE OF TWO BUFFERS WHICH ARE GETMAINED AS A RESULT OF THE USER
*   SPECIFYING THE BUFL = XXXX PARAMETER IN THE SYSUT1 DD STATEMENT.THE
*   DATA IS PROCESSED FROM ONE BUFFER WHILE MORE DATA IS BEING READ
*   INTO THE OTHER BUFFER.
*
*   THIS MODULE SCANS THE INPUT BUFFERS FOR SPECIAL CHARACTERS, & EDITS
*   AND/OR TRANSLATES THE DATA AS SPECIFIED BY THE USER. IF NO EDIT-
*   ING OR TRANSLATING IS REQUESTED, DATA IS SIMPLY PASSED FROM THE
*   INPUT BUFFERS TO THE OUTPUT AREA. IN EITHER CASE, DATA IS MOVED
*   EVENTUALLY TO THE OUTPUT AREA UNTIL THE AREA BECOMES FULL OR UNTIL
*   A LOGICAL END-OF-RECORD IS DETECTED, IN WHICH CASE THE OUTPUT AREA
*   IS TRANSFERRED TO AN OUTPUT DEVICE (IF REQUESTED) VIA THE QSAM PUT
*   MACRO (MOVE MODE). THE OUTPUT AREA IS THEN MADE AVAILABLE FOR
*   ANOTHER GROUP OF BYTES.
*
*   THIS CYCLE CONTINUES UNTIL AN END-OF-FILE CONDITION IS DETECTED ON
*   THE 2495 OR UNTIL A CONDITION ARISES THAT REQUIRES ABNORMAL TERM-
*   INATION OF THE MODULE.
*
*   INSTRUCTION LABELS ARE OF THE FORM TCRXXX OR TSWXXX WHERE XXX IS A
*   3 DIGIT NUMBER SEQUENCING UPWARD IN THE ORDER OF APPEARANCE IN THE
*   PROGRAM. THE TCRXXX LABELS INDICATE NORMAL INSTRUCTIONS, WHILE THE
*   TSWXXX LABELS INDICATE INSTRUCTIONS WHICH ARE MODIFIED DURING PRO-
*   GRAM EXECUTION. CONSTANTS AND WORKING AREAS ARE LABELLED IN SUCH A
*   MANNER AS TO BE MEANINGFUL OF THE FUNCTION FOR WHICH THEY WERE DE-
*   FINED. NO SPECIAL PATTERN IS USED EXCEPT THAT ALL CONTROL BLOCKS
*   FOR THE SYSUT1 DATA SET ARE LABELLED WITH THE PREFIX 'TCR'. ALSO,
*   THE TRANSLATE AND TEST TABLE VALUES ARE PREFIXED WITH 'MTST' OR
*   'MTDI' ACCORDING TO WHICHEVER TYPE VALUE IS BEING DEFINED.
*
* ENTRY POINTS:
*        IEBTCR05 - READ/EDIT MODULE
*
*   PARAMETER DATA IS PASSED 'BY NAME' AND CONSISTS OF A 560 BYTE
*   TABLE WHICH IS DEFINED AND DESCRIBED IN THE DRIVER MODULE, AND IS
*   COMMON TO ALL OTHER MODULES. IT CONSISTS OF EDIT PARAMETERS,
*   EXIT ROUTINE ADDRESSES, THE MTST TRANSLATE TABLE ADDRESS, MESSAGE
*   INDICATOR WORDS, EXIT LISTS, SPECIAL DCB PARAMETERS, AND THE DCBS
*   FOR SYSUT1, SYSUT2, AND SYSUT3.
*
*   THIS MODULE IS LINKED TO FROM THE DRIVER MODULE (IEBTCRIN) :
*
*                  LINK   EP=IEBTCR05,PARAM=COMMON
           EJECT
* INPUT:  INPUT CONSISTS OF DATA BYTES (READ VIA AN EXCP MACRO) FROM A
*   MAGNETIC TAPE CARTRIDGE MOUNTED ON A 2495 TAPE CARTRIDGE READER.
*   THIS TAPE MAY CONTAIN MTST DATA OR MTDI DATA, BOTH OF WHICH WILL
*   USUALLY REQUIRE EDITTING OF SPECIAL CHARACTERS. MTST DATA WILL
*   ALSO USUALLY REQUIRE TRANSLATION TO EBCDIC. THESE FUNCTIONS ARE
*   PERFORMED BY THIS MODULE.
*
*   THE FORMAT OF THE INPUT IS A CONTINUOUS STREAM OF CHARACTERS
*   WITHOUT INTER-RECORD GAPS. A READ COMMAND IS VALIDLY TERMINATED
*   BY ONE OF TWO CHARACTERS (HEX '19' AND HEX '1D') OR BY THE END-OF-
*   TAPE MARKER. IT MAY BE INVALIDLY TERMINATED BY A DATA CHECK OR BY
*   SOME OTHER HARDWARE FAILURE. IT IS THE FUNCTION OF THIS MODULE, BY
*   USE OF ITS EDITTING CAPABILITIES, TO CONVERT THE STREAM OF DATA
*   BYTES TO AN INTELLIGIBLE SET OF RECORDS FOR OUTPUT.
*
* OUTPUT:  OUTPUT CONSISTS OF RECORDS IN SEQUENTIAL MODE DIRECTED TO
*   ONE OF TWO DATA SETS WHICH MAY BE DEFINED BY THE USER TO EXIST ON
*   ANY DEVICE SUPPORTED BY THE QSAM ACCESS METHOD. ONE DATA SET
*   (SYSUT2) CONTAINS VALID RECORDS (AS DETERMINED BY THE MODULE IN
*   CONJUNCTION WITH THE USER'S SPECIFICATIONS). THE OTHER DATA SET
*   (SYSUT3) CONTAINS ERROR RECORDS (ALSO DETERMINED BY THIS MODULE IN
*   CONJUNCTION WITH THE USER'S SPECIFICATIONS). THESE ERROR RECORDS
*   WILL HAVE A FOUR BYTE ERROR DESCRIPTION WORD (EDW) APPENDED TO THE
*   FRONT OF THE RECORD (MTDI ONLY).
*
*   OUTPUT IS PERFORMED BY USING THE QSAM 'PUT' MACRO IN THE 'MOVE'
*   MODE OF OPERATION, AND IS DIRECTED TO ANY VALID SEQUENTIAL DATA SET
*   AS DEFINED BY THE USER EITHER IN THE CURRENT STEP OR ANY PREVIOUS
*   STEP OR JOB. THE OUTPUT DATA MAY BE FIXED, VARIABLE, OR UNDEFINED
*   AND MAY BE BLOCKED OR UNBLOCKED. THESE DATA SETS WILL NOT BE OPENED
*   OPENED UNTIL THE FIRST TIME A RECORD IS TO BE SENT TO THEM.
*
* EXTERNAL ROUTINES:  N/A
           EJECT
* EXITS - NORMAL:  OUTREC EXIT.
*                  THIS EXIT IS GIVEN CONTROL VIA A BAL INSTRUCTION
*                  JUST BEFORE THE OUTPUT RECORD IS PASSED TO THE NOR-
*                  MAL (SYSUT2) DATA SET. AT ENTRY, REG 1 CONTAINS THE
*                  ADDRESS OF A PARAMETER LIST WHICH CONTAINS THE ADDR
*                  OF THE OUTPUT RECORD AND THE ADDRESS OF THE RECORD
*                  LENGTH. IN THIS EXIT,THE  USER MAY PROCESS THE
*                  RECORD AND/OR PERFORM HIS OWN OUTPUT. UPON RETURN,
*                  A RETURN CODE OF ZERO WILL CAUSE THE RECORD NOT TO
*                  BE SENT TO SYSUT2. A RETURN CODE OF FOUR WILL CAUSE
*                  THE RECORD TO BE SENT TO SYSUT2. ANY OTHER RETURN
*                  CODE WILL CAUSE THE UTILITY TO TERMINATE.
*
*                  OUTHDR2,OUTHDR3,OUTTLR2, AND OUTTLR3 EXITS.
*
*                  OUTHDR2 AND OUTHDR3 ARE GIVEN CONTROL AT OPEN TIME
*                  FOR SYSUT2 AND SYSUT3 RESPECTIVELY,FOR THE PURPOSE
*                  OF CREATING USER OUTPUT HEADER LABELS.
*                  OUTTLR2 AND OUTTLR3 ARE GIVEN CONTROL AT CLOSE TIME
*                  FOR SYSUT2 AND SYSUT3 RESPECTIVELY,FOR THE PURPOSE
*                  OF CREATING USER OUTPUT TRAILER LABELS.
*                  AT ENTRY, REG 1 CONTAINS THE ADDRESS OF A PARAMETER
*                  LIST WHICH CONTAINS THE ADDRESS OF THE OUTPUT LABEL
*                  BUFFER AREA AND THE ADDR OF THE DCB BEING PROCESSED.
*                  UPON RETURN, A RETURN CODE OF ZERO WILL CAUSE NO
*                  LABEL TO BE WRITTEN AND NORMAL PROCESSING TO CON-
*                  TINUE. A RETURN CODE OF FOUR WILL CAUSE A LABEL TO
*                  BE WRITTEN AND NORMAL PROCESSING TO CONTINUE. A RE-
*                  TURN CODE OF EIGHT WILL CAUSE A LABEL TO BE WRITTEN
*                  AND A CHECK MADE FOR A COUNT OF EIGHT LABELS. IF
*                  EIGHT LABELS HAVE BEEN WRITTEN, NORMAL PROCESSING
*                  CONTINUES. IF LESS THAN EIGHT LABELS HAVE BEEN
*                  WRITTEN, CONTROL IS RETURNED TO THE EXIT ROUTINE.
*                  A RETURN CODE OF SIXTEEN CAUSES THE UTILITY TO
*                  TERMINATE.
*
*          ERROR:  ERROR EXIT.
*                  THIS EXIT IS GIVEN CONTROL VIA A BAL INSTRUCTION
*                  JUST BEFORE AN ERROR RECORD IS PASSED TO SYSUT3.
*                  AT ENTRY, REG 1 CONTAINS THE ADDRESS OF A PARAMETER
*                  LIST WHICH CONTAINS THE ADDRESS OF THE ERROR RECORD
*                  AND THE ADDRESS OF THE RECORD LENGTH. THE USER MAY
*                  EXAMINE AND MODIFY ANY BYTE IN THE ERROR RECORD
*                  AND/OR THE EDW. UPON RETURN, A RETURN CODE OF ZERO
*                  WILL CAUSE THE RECORD NOT TO BE SENT TO SYSUT3, BUT
*                  RATHER TO BE TREATED AS A VALID RECORD. THE EDW WILL
*                  BE REMOVED (AND RESET). A RETURN CODE OF FOUR WILL
*                  CAUSE THE RECORD TO BE SENT TO SYSUT3. ANY OTHER
*                  RETURN CODE WILL CAUSE THE UTILITY TO TERMINATE.
           EJECT
* TABLES/WORKAREAS:  WORKING STORAGE CONSISTS OF THE I/O CONTROL
*   BLOCKS AND THE CHANNEL PROGRAM NECESSARY FOR READING THE TCR,
*   SWITCHES, POINTERS, AND SAVE AREAS FOR VARIOUS EDITTING FUNCTIONS.
*   THE INPUT BUFFERS AND INTERMEDIATE OUTPUT WORKAREA ARE GETMAINED
*   FROM OUTSIDE THE PROGRAM AREA.
*   THREE TABLES ARE USED: AN MTDI TRANSLATE & TEST TABLE, AN MTST
*   TRANSLATE & TEST TABLE, AND AN MTST TRANSLATE TABLE. THE TRT TABLES
*   TABLES ARE USED TO DETECT SPECIAL CHARACTERS IN THE INPUT STREAM
*   FOR EDITTING PURPOSES. THE MTST TRANSLATE TABLE IS USED TO TRANS-
*   LATE THE MTST CHARACTERS TO EBCDIC. AN UPPER CASE TABLE, A LOWER
*   CASE TABLE, OR A USER DEFINED TABLE MAY BE USED.
*
* ATTRIBUTES:  THIS MODULE IS AN ONLY-LOADABLE MODULE. IT IS NOT
*   RE-ENTERABLE NOR RE-USABLE.
*
* NOTES:  THIS MODULE CONTAINS TYPE E CHARACTER CODE DEPENDENCIES. THE
*   THE OPERATION OF THIS MODULE DEPENDS UPON THE FOLLOWING PROPERTIES
*   OF THE INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET: HEX
*   REPRESENTATION IN TABLE FORM, AND CHARACTER CODE SEQUENCE. THE
*   SPECIFIC INSTRUCTION SEQUENCES, TABLES, AND CONSTANTS THAT REQUIRE
*   MODIFICATION WHEN THESE PROPERTIES OF THE CHARACTER SET ARE
*   CHANGED MAY BE IDENTIFIED BY:
*
*   1) THE INSTRUCTION SEQUENCE TCR320-4 TO TSW328 (SCAN ROUTINE) WHICH
*      DOES A PROGRAM LEVEL SEARCH, ASSUMES THAT THE PL CODES ARE
*      SEQUENTIALLY AND SUCCESSIVELY ASSIGNED.
*
*   2) THE INSTRUCTION SEQUENCE FROM TCR610 TO TCR612 (SCAN ROUTINE
*      FOR PL CODES) AND AT TCR860 (OUTPUT ROUTINE) WHICH CONVERT THE
*      PL CODES TO THE FORM '01' THROUGH '08' ALSO ASSUMES THAT THE PL
*      CODES ARE SEQUENTIALLY AND SUCCESSIVELY ASSIGNED.
*
*   3) THE TRANSLATE TABLES LABELLED 'EDWTT', 'UPPER', AND 'LOWER'
*      CONTAIN ENTRIES IN HEX NOTATION TO CONVERT DATA TO THE EBCDIC
*      CHARACTER SET.
*
*   4) THE CONSTANT LABELLED 'HEXEOR' AND THE SET OF EQU INSTRUCTIONS
*      FROM 'MTDILZF' TO 'MTSTUSRC' DEFINE THE SPECIAL CHARACTERS (IN
*      CHARACTER FORM) FOR THE INPUT DATA SET.
*
*   COMMENTS AND REMARKS ARE PROVIDED TO INDICATE THE CONSIDERATIONS
*   INVOLVED AND THE MECHANISM FOR CHANGING THE CODE.
  TITLE  ' IEBTCR05 - READ/EDIT MODULE -- REGISTER DEFINITIONS'
         SPACE 4
IEBTCR05 START 0
R0       EQU   0                   PARAMETER REGISTER
R1       EQU   1                   PARAMETER REGISTER
R2       EQU   2                   WORK REGISTER
R3       EQU   3                   INPUT BUFFER POINTER
R4       EQU   4                   WORK REGISTER
R5       EQU   5                   WORK REGISTER
R6       EQU   6                   WORK REGISTER
R7       EQU   7                   WORK REGISTER
R8       EQU   8                   WORK REGISTER
R9       EQU   9                   OUTPUT RECORD LENGTH
R10      EQU   10                  READ/EDIT BASE REGISTER
R11      EQU   11                  COMMON AREA BASE REGISTER
R12      EQU   12                  TRANSFER REGISTER
R13      EQU   13                  SAVEAREA REGISTER
R14      EQU   14                  TRANSFER REGISTER
R15      EQU   15                  PARAMETER REGISTER
         TITLE ' IEBTCR05 - READ/EDIT MODULE -- ENTRY ROUTINE'
*        THIS SECTION SAVES THE CALLERS GENERAL REGISTERS,ESTABLISHES
*        BASE REGISTERS FOR THE MODULE AND THE COMMON AREA,AND
*        COMPLETES FILLING IN THE COMMON AREA AND THE TCR IOB.
         SPACE 4
         SAVE  (14,12)             SAVE REGISTERS
         BALR  R10,0               SET UP
         USING *,R10                    READ/EDIT BASE
         ST    R13,SAVEREG+HSA
         LA    R5,SAVEREG          SET UP
         ST    R5,LSA(R13)                REGISTER
         LR    R13,R5                              SAVEAREA
         L     R11,0(R1)           GET ADDRESS OF COMMON AREA
         USING COMMON,R11          SET UP DSECT BASE
         LA    R0,TCRDCB           PUT ADDRESS OF TCR DCB
         ST    R0,DCBADDR                      IN EXCP IOB
         LA    R0,TCRIOB           PUT ADDRESS OF TCR IOB
         ST    R0,IOBADDR                      IN COMMON AREA
         MVC   EXLST2(DBLWRD),XL2  SET UP EXIT LIST FOR SYSUT2
         MVC   EXLST3(DBLWRD),XL3  SET UP EXIT LIST FOR SYSUT3
         LH    R0,BUFL             PICK UP INPUT BUFFER LENGTH
         EJECT
*        THIS SECTION DETERMINES THE SIZE OF THE INPUT BUFFERS AND
*        THE OUTPUT WORKAREA; THEN GETMAINS THESE AREAS. IF THERE IS
*        INSUFFICIENT CORE FOR THE GETMAIN, THE UTILITY IS TERMINATED.
         SPACE 4
         STH   R0,TCRCCW1+CNTFLD   STORE IT IN
         STH   R0,TCRCCW2+CNTFLD   BOTH CCWS
         SLA   R0,1                MULTIPLY BUFL BY 2
         ST    R0,BUFL1            SAVE 2*BUFL FOR FREEMAIN
         ST    R0,BUFL2
         GETMAIN VC,LA=BUFL1,A=GM1 GETMAIN INPUT BUFFERS
         LTR   R15,R15             SUCCESSFUL GETMAIN ?
         BZ    TCR015              BRANCH IF YES
TCR010   OI    ERRIND,NOCORE       INDICATE NOT ENOUGH CORE AVAILABLE
         MVI   GMAINERR,MSGFLAG    SET THE GETMAIN ERROR MESSAGE FLAG
         B     TCR999              BRANCH TO END UTILITY
TCR015   MVC   TCRCCW1(WORD),GM1   PUT INPUT BUFFER ADDRESS IN CCW1
         MVI   TCRCCW1,READ        RE-LOAD READ COMMAND
         L     R1,GM1
         AH    R1,TCRCCW1+CNTFLD   COMPUTE SECOND BUFFER ADDRESS
         ST    R1,TCRCCW2          STORE IT IN CCW2
         MVI   TCRCCW2,READ        RE-LOAD READ COMMAND
         LH    R0,UT2LRECL         GET SYSUT2 LRECL FOR WORKAREA LENGTH
         CH    R0,UT3LRECL         IS IT GREATER THAN SYSUT3 LRECL ?
         BNL   TCR020              BRANCH IF YES
         LH    R0,UT3LRECL         IF NO,USE SYSUT3 LRECL INSTEAD
TCR020   CH    R0,MAXLN            IS IT GREATER THAN MAXLN ?
         BNL   TCR030              BRANCH IF YES
         LH    R0,MAXLN            IF NO,USE MAXLN AS WORKAREA LENGTH
TCR030   AH    R0,TCON8            ADD 8 FOR EDW AND VAR LNG CTR
         ST    R0,WORKL1           SAVE IT FOR FREEMAIN
         ST    R0,WORKL2
         GETMAIN VC,LA=WORKL1,A=GM2         GETMAIN WORKAREA
         LTR   R15,R15             SUCCESSFUL GETMAIN ?
         BNZ   TCR010              BRANCH IF NO TO INDICATE GETMAIN ERR
         L     R1,GM2
         BAL   R14,TCR932          SET UP WORKAREA POINTERS
         EJECT
*        THIS SECTION SETS THE NOP SWITCHES WHEN MTDI IS SPECIFIED.
*        THE SWITCHES ARE ASSEMBLED FOR DEFAULT VALUES AS FOLLOWS:
*                   TYPE = MTDI
*                   EDIT = EDITD
*                   VERCHK = VOKCHK
         SPACE 4
         TM    PARM1,MTST          TYPE = MTST ?
         BO    TCR055              BRANCH IF YES
         L     R1,MTDIADDR         LOAD ADDR OF MTDI TRT TABLE
         TM    PARM2,NOEDIT        EDIT = NOEDIT ?
         BZ    TCR040              BRANCH IF NO
         OI    TSW315+1,BRANCH     TURN OFF SOR-EXPECTED SWITCH
         NI    TSW148+1,NOP        SET NOEDIT SWITCH
         B     TCR060              SKIP ALL EDIT SWITCH SETTINGS
TCR040   TM    PARM2,VOKCHK        VERCHK = VOKCHK ?
         BZ    TCR045              BRANCH IF NO
         NI    TSW658+1,NOP        SET VOKCHK SWITCH
TCR045   CLC   MINLN(2),TCON0      MINLN SPECIFIED ?
         BE    TCR050              BRANCH IF NO
         NI    TSW857+1,NOP        SET MINLN SWITCH
TCR050   TM    PARM2,EDITD         EDIT = EDITD ?
         BO    TCR070              BRANCH IF YES
         OI    TSW328+1,BRANCH     ELSE
         NI    TSW612+1,NOP            SET
         OI    TSW616+1,BRANCH
         OI    TSW625+1,BRANCH            SWITCHES
         OI    TSW662+1,BRANCH                    FOR
         NI    TSW846+1,NOP
         NI    TSW854+1,NOP                          EDITR
         NI    TSW888+1,NOP
         NI    TSW911+1,NOP
         B     TCR070              BRANCH TO SKIP MTST SWITCH SETTINGS
         EJECT
*        THIS SECTION SETS THE NOP SWITCHES WHEN MTST IS SPECIFIED
*        OR WHEN NOTRAN OR NOEDIT IS SPECIFIED.
         SPACE 4
TCR055   L     R1,MTSTADDR         LOAD ADDR OF MTST TRT TABLE
         OI    TSW140+1,BRANCH     AND SET MTST SWITCH
         OI    TSW315+1,BRANCH     TURN OFF SOR-EXPECTED SWITCH
         TM    PARM1,NOTRAN        TRANS = NOTRAN ?
         BO    TCR060              BRANCH IF YES
         OI    TSW852+1,BRANCH     SET MTST-WITH-TRANSLATE SWITCH
         TM    PARM1,STDUC         TRANS = STDUC ?
         BZ    TCR057              BRANCH IF NO
         L     R2,UPPERADR
         B     TCR058              BRANCH AROUND LOWER CASE SETTING
TCR057   TM    PARM1,STDLC         TRANS = STDLC ?
         BZ    TCR065              BRANCH IF NO;  TRANS = 'USERNAME'
         L     R2,LOWERADR
TCR058   ST    R2,TRANTABL         STORE TRANSLATE TABLE ADDRESS
         B     TCR065              SKIP NOTRAN-NOEDIT SWITCH
TCR060   OI    TSW347+1,BRANCH     SET NOTRAN-NOEDIT SWITCH
TCR065   OI    TSW100+1,BRANCH       AND
         OI    TSW114+1,BRANCH          SET
         OI    TSW125+1,BRANCH
         NI    TSW815+1,NOP                THE
         OI    TSW840+1,BRANCH
         OI    TSW853+1,BRANCH                SWITCHES
         OI    TSW863+1,BRANCH
         OI    TSW914+1,BRANCH                        FOR
         OI    TSW929+1,BRANCH
         OI    TSW931+1,BRANCH                  NOT-MTDI-WITH-EDIT
         EJECT
*        THIS SECTION SETS THE NOP SWITCHES WHEN THE ERROPT OPTION
*        (DEFAULT IS ERROPT = NORMAL) IS SPECIFIED,WHEN OUTREC AND/OR
*        ERROR EXIT IS SPECIFIED,AND/OR WHEN THE SYSUT2 AND/OR SYSUT3
*        DD STATEMENTS ARE MISSING.
         SPACE 4
TCR070   TM    EXITS,ERREXT        ERROR EXIT SPECIFIED ?
         BZ    TCR075              BRANCH IF NO
         NI    TSW862+1,NOP        SET ERROR EXIT SWITCHES
         NI    TSW992+1,NOP
         B     TCR080              BYPASS THE ERROPT CHECK
TCR075   TM    PARM2,NOERR         ERROPT = NOERR ?
         BZ    TCR080              BRANCH IF NO
         OI    TSW878+1,BRANCH     SET NOERR SWITCH
TCR080   TM    EXITS,OUTEXT        OUTREC EXIT SPECIFIED ?
         BZ    TCR085              BRANCH IF NO
         NI    TSW880+1,NOP        SET OUTREC EXIT SWITCHES
         NI    TSW994+1,NOP
TCR085   TM    NODDCARD,NOUT2      SYSUT2 DD CARD MISSING ?
         BZ    TCR090              BRANCH IF NO
         OI    TSW900+1,BRANCH     SET SYSUT2-DD-MISSING SWITCH
TCR090   TM    NODDCARD,NOUT3      SYSUT3 DD CARD MISSING ?
         BZ    TCR095              BRANCH IF NO
         OI    TSW935+1,BRANCH     SET SYSUT3-DD-MISSING SWITCH
TCR095   LA    R12,TSW315          SET RETURN ADDRESS FROM READ-ROUTINE
         ST    R1,TRTTABLE         STORE ADDRESS OF TRT TABLE
         TITLE ' IEBTCR05 - READ/EDIT MODULE -- READ ROUTINE'
*        THIS SECTION IS ENTERED (ONLY FOR MTDI WITH EDIT) WHEN THE
*        INPUT BUFFER IS EMPTY AND AN ED OR GS CODE TERMINATED THE
*        PREVIOUS READ. IF A START-OF-RECORD IS EXPECTED,NORMAL
*        PROCESSING CONTINUES;HOWEVER,IF NOT,THEN AN EOR MUST BE
*        FORCED ON THIS RECORD BEING PROCESSED (UNLESS IT IS TO BE
*        DELETED).
         SPACE 4
TSW100   NOP   TCR102              NOP IF MTDI WITH EDIT,ELSE BRANCH
TSW101   B     TCR102              NOP IF ED/GS SW IS ON; BR IF NOT ON
         OI    TSW101+1,BRANCH     TURN OFF ED/GS SW. (MAKE IT A BR)
         CLI   TSW315+1,NOP        IS SOR EXPECTED
         BE    TCR102              BRANCH IF SOR IS EXPECTED
         TM    SWITCH1,DELETE      IS THIS RECORD BEING DELETED?
         BZ    TCR615              BRANCH IF NO TO FORCE END OF RECORD
         NI    TSW315+1,NOP        ELSE SET SOR-EXPECTED SWITCH ON
         NI    SWITCH1,NORMAL      TURN OFF DELETE SWITCH
TCR102   L     R5,CCWADDR          GET CCW ADDRESS
         EJECT
*        THIS SECTION IS ENTERED IMMEDIATELY AFTER THE FIRST EXCP
*        INSTRUCTION FOR EACH TAPE;AND THEREAFTER ONLY WHEN PROCESSING
*        IS COMPLETED ON THE DATA FROM A PREVIOUS READ (EXCP).
         SPACE 4
TCR103   WAIT  ECB=TCRECB          WAIT FOR PREVIOUS READ,IF NEEDED
         NI    SWITCH2,X'FF'-EXCP  INDICATE EXCP COMPLETED
         CLI   TCRECB,NORMAL       NORMAL INTERRUPT?
         BNE   TCR105              BRANCH IF NO
TSW104   NOP   TCR110              NOP FOR FIRST TIME THRU,ELSE BRANCH
         OI    TSW104+1,BRANCH     CHANGE FIRST-TIME SWITCH TO BRANCH
         L     R2,MOUNTID
         DOM   MSG=(R2)            DELETE MOUNT MESSAGE (MCS FEATURE)
         B     TCR110              CONTINUE PROCESSING
TCR105   CLI   TCRECB,INTRCEPT     INTERCEPT CONDITION ?
         BE    TCR106              BRANCH IF YES
         CLI   TCRECB,PERMERR      PERMANENT ERROR ?
         BE    TCR107              BRANCH IF YES
TCR106   OI    ERRIND,TROUBLE      SET READ/EDIT ERR SW FOR TROUBLE
         B     TCR995              THEN BRANCH TO ABNORMAL END
TCR107   TM    STATUS+1,CDC+CCC+ICC  CHANNEL ERRORS ?
         BNZ   TCR106              BRANCH IF YES TO QUIT
         TM    STATUS+1,PROGRAM+PROTECT  PROG OR PROTECTION CHECKS ?
         BNZ   TCR106              BRANCH IF YES TO QUIT
         TM    STATUS,UNITCHK      UNIT CHECK ?
         BZ    TCR108              BRANCH IF NO
         TM    SENSE,DATACHK       DATA CHECK ?
         BZ    TCR106              BRANCH IF NO
         TM    SENSE,MULTERR       ARE THERE MULTIPLE ERRORS ?
         BNZ   TCR106              BRANCH IF YES
         OI    SWITCH2,DATACHK     INDICATE DATA CHECK ON THIS READ
         B     TCR109              SKIP UNIT EXCEPTION CHECK
TCR108   TM    STATUS,UNITEXC      UNIT EXCEPTION ?
         BZ    TCR106              BRANCH IF NO TO QUIT, ELSE
         OI    SWITCH2,UNITEXC     INDICATE UNIT EXCEPTION ON THIS READ
TCR109   MVI   IOBFLG1,TWO         RESET            * THIS IS
         MVI   IOBFLG2,ZERO            IOB          * NECESSARY
         MVI   IOBFLG3,ZERO              FLAGS      * TO ALLOW
         LA    R6,TCRDCB                            * ANOTHER EXCP
         USING IHADCB,R6                            * INSTRUCTION
         MVI   DCBIFLGS,ZERO       RESET DCB IFLAGS * TO BE
         DROP  R6                                   * VALIDLY EXECUTED
TCR110   MVI   TCRECB,ZERO         ZERO THE ECB COMPLETE BIT
         EJECT
*        THIS SECTION IS ENTERED AFTER EVERY WAIT INSTRUCTION. IF EOT
*        CONDITION IS ON,SOME INITIALIZATION MUST BE DONE FOR MTDI WITH
*        EDIT. IF UNIT EXCEPTION WAS DETECTED WITH THE EOT CONDITION ON
*        IT MEANS THAT IT HAPPENED ON A REWIND AND UNLOAD COMMAND.
*        (THIS RESULTS IN A EOF CONDITION FOR THE 2495). THEREFORE, THE
*        FINAL BUFFER MUST BE SENT TO THE PROPER OUTPUT DATA SET BEFORE
*        TERMINATING. IF UNIT EXCEPTION WAS NOT DETECTED ON THE REWIND
*        AND UNLOAD COMMAND, THEN ANOTHER TAPE IS READY TO BE READ, SO
*        EXCP IS ISSUED.
         SPACE 4
TSW113   NOP   TCR120              NOP IF EOT OR 1ST TIME THRU.ELSE BR
TSW114   NOP   TCR116              NOP IF MTDI WITH EDIT,ELSE BRANCH
         MVI   PLCNT,ZERO          ZERO THE PROGRAM LEVEL
         MVC   PLCNT+1(15),PLCNT                LENGTH SAVE AREAS
         OI    SWITCH1,NODUP       PREVENT DUPING IN FIRST RECORD
         MVI   SAVELS,LS0          RESET THE PREVIOUS LEVEL STATUS
TCR116   TM    SWITCH2,UNITEXC     WAS UNIT EXCEPTION POSTED?
         BZ    TCR118              BRANCH IF NO
         L     R5,NXTAVAIL         IF YES,RESET R5 TO 'PUT' FINAL BFR
         OI    TSW927+1,BRANCH     SET BRANCH TO END-UTILITY
         C     R5,STARTREC         ANY BYTES IN FINAL BUFFER ?
         BNE   TCR850              IF YES,BRANCH TO 'PUT' FINAL BUFFER
         B     TSW992              ELSE, BRANCH TO NORMAL END
TCR118   OI    TSW113+1,BRANCH     TURN OFF END OF TAPE  (EOT) SWITCH
         MVI   0(R5),READ          RE-LOAD TCR READ COMMAND
         OI    SWITCH2,EXCP        INDICATE EXCP ISSUED
         EXCP  TCRIOB
         B     TCR103              BRANCH TO WAIT
         EJECT
*        THIS SECTION IS ENTERED AFTER EVERY NORMAL READ COMMAND.
*        THE INPUT RECORD LENGTH IS COMPUTED AND THE INPUT POINTERS
*        ARE SET. IF A DATA CHECK WAS DETECTED,IT IS REPLACED WITH THE
*        REPLACE CHARACTER,AND A CHECK FOR DOUBLE DATA CHECK IS MADE.
*        WHEN ALL CHECKING IS DONE, THE CCWS ARE SWAPPED FOR THE NEXT
*        EXCP INSTRUCTION.
         SPACE 4
TCR120   LH    R6,CNTFLD(R5)       LOAD CCW COUNT
         SH    R6,RESIDUAL         CCW CNT - RESIDUAL CNT = RCD LNG
         L     R7,0(R5)            LOAD INPUT BUFFER ADDRESS
         LA    R7,0(R7)            CLEAR HIGH ORDER BYTE
         BCTR  R7,0                INPUT BUFFER - 1
         ST    R7,INPUTPTR         STORE IT FOR SCAN
         AR    R7,R6               BUFFER-1  +  LENGTH = END OF BUFFER
         TM    SWITCH2,DATACHK     WAS READ STOPPED BY A DATA CHECK?
         BNO   TCR130              BRANCH IF NO
         MVC   0(1,R7),REPLACE     INSERT REPLACE CHARACTER
         NI    SWITCH2,X'FF'-DATACHK
TSW125   NOP   TCR128              NOP IF MTDI WITH EDIT,ELSE BRANCH
         CH    R6,TCON1            RECORD LENGTH = 1 ?
         BH    TCR128              BRANCH IF NO
         TM    SWITCH1,DATACHK     WAS LAST READ ALSO TERM BY DATA CHK?
         BZ    TCR128              BRANCH IF NO
         OI    SWITCH1,TWOCHKS     INDICATE 2 SUCCESSIVE DATA CHECKS
TCR128   OI    SWITCH1,DATACHK     TURN ON DATA CHECK SWITCH
         B     TCR131              BYPASS NO-DATA-CHECK INDICATION
TCR130   NI    SWITCH1,NODATCHK    INDICATE NO DATA CHECK
TCR131   XI    TSW132,SWAP         CHANGE ADD TO SUB  OR  SUB TO ADD
TSW132   SH    R5,TCON8            CALCULATE NEXT CCW ADDR
         ST    R5,CCWADDR          STORE IT IN IOB
         EJECT
*        IF UNIT EXCEPTION IS DETECTED AND IT IS CAUSED BY AN ED OR ST
*        CODE, THEN A REWIND AND UNLOAD COMMAND IS ISSUED. OTHERWISE
*        ANOTHER READ COMMAND IS ISSUED.
         SPACE 4
         TM    SWITCH2,UNITEXC     WAS UNIT EXCEPTION POSTED?
         BNO   TCR160              BRANCH IF NO
         NI    SWITCH2,X'FF'-UNITEXC    TURN OFF UNIT EXCEPTION SWITCH
TSW140   NOP   TCR150              NOP IF TYPE=MTDI    BR IF TYPE=MTST
         NI    TSW101+1,NOP        SET ED/GS SWITCH ON (NOP)
         CLI   0(R7),MTDIGS        WAS UE CAUSED BY GS CODE?
         BNE   TCR150              BR IF NO
TSW148   B     TCR163              NOP IF EDIT=NOEDIT, ELSE    DROP GS
         B     TCR160              GO INCLUDE THE GS CODE
TCR150   NI    TSW113+1,NOP        SET EOT SWITCH ON (SET TO NOP)
         MVI   0(R5),REWIND        LOAD REWIND/UNLOAD COMMAND IN CCW
         B     TCR163              BRANCH TO DROP END DATA CODE
TCR160   LA    R7,1(R7)            ADDR OF BUFFER END + 1
TCR163   ST    R7,INPUTEND         STORE IT FOR SCAN
         OI    SWITCH2,EXCP        INDICATE EXCP ISSUED
         EXCP  TCRIOB
         SPACE 10
*        THIS SECTION INCREMENTS THE INPUT BUFFER POINTER.
         SPACE 2
TCR200   L     R3,INPUTPTR         POINT TO
         LA    R3,1(R3)              NEXT BYTE IN
         ST    R3,INPUTPTR             INPUT BUFFER
         ST    R3,FRSTSCAN         STORE SCAN START ADDRESS
         C     R3,INPUTEND         ANY BYTES LEFT IN BUFFER?
         BCR   LOW,R12             BR IF YES TO CALLER
         B     TSW100              NO,BRANCH TO READ RTN
         TITLE ' IEBTCR05 - READ/EDIT MODULE -- SCAN ROUTINE'
*        THE SCAN ROUTINE IS ALWAYS ENTERED AT TCR310. AFTER SUCESS-
*        FULLY POINTING TO THE NEXT BYTE IN THE INPUT BUFFER,A CHECK
*        IS MADE TO SEE IF A SOR IS EXPECTED. IF NOT,NORMAL SCANNING
*        CONTINUES. IF AN SOR IS EXPECTED,A SPECIAL SCAN IS MADE FOR
*        THE SOR CHARACTER. THIS IS DONE BY MODIFYING THE IMMEDIATE
*        OPERAND OF THE CLI INSTRUCTION AT TSW322 TO COMPARE AGAINST
*        THE 8 PROGRAM LEVEL CODES. IF THE BYTE IS NOT A VALID SOR
*        CODE,THE PROPER INDICATORS ARE SET AND NORMAL SCANNING
*        CONTINUES. TSW315 WILL ALWAYS BE A BRANCH IF MTST OR
*        MTDI WITH NOEDIT IS SPECIFIED. FOR MTDI WITH EDIT, IT IS
*        INITIALLY A NOP.
         SPACE 4
TCR310   BAL   R12,TCR200          POINT TO NEXT BYTE IN BUFFER
TSW315   NOP   TCR340              NOP IF SOR EXPECTED      BR IF NOT
         OI    TSW315+1,BRANCH     TURN OFF SOR-EXPECTED SWITCH
         MVI   EDWLS,LS0           RESET LEVEL STATUS
         MVI   EDWTS,ZERO          RESET TYPE STATUS
         NI    SWITCH1,RESET       RESET LEFT ZERO SWITCHES
         TM    SWITCH2,FRAGMENT    PROCESSING SHORT RECORD ? (EDITD)
         BZ    TCR319              BRANCH IF NO
         NI    SWITCH2,X'FF'-FRAGMENT
         MVI   SAVELS,LS0          RESET PREVIOUS LEVEL STATUS
         OI    SWITCH1,NODUP       TURN OFF DUP ALLOW SWITCH
TCR319   LA    R5,MTDIPL1-1        INITIALIZE SCAN FOR PL CODES
TCR320   LA    R5,1(R5)
         STC   R5,TSW322+1         INCREMENT IMMEDIATE OPERAND OF CLI
TSW322   CLI   0(R3),MTDIPL1       IS THIS BYTE A PL CODE ?
         BE    TCR610              BRANCH IF YES
         CLI   TSW322+1,MTDIPL8    HAS SCAN CHECKED FOR ALL PL CODES ?
         BNE   TCR320              IF NO, CHECK NEXT PL CODE
         CLI   0(R3),MTDICAN       IS THIS BYTE A CANCEL CODE ?
         BE    TCR330              BRANCH IF YES
         OI    EDWTS,SOREOR        INDICATE SOR/EOR ERR IN TYPE STATUS
         MVI   EDWLS,LS1           INDICATE LEVEL STATUS ERROR
         MVI   EDWSOR,BADSOR       MOVE '0E' TO SOR IN EDW
TSW328   NOP   TCR810              NOP IF EDITD; ELSE MOVE INVALID SOR
         B     TCR310              BRANCH TO CONTINUE SCAN
TCR330   OI    SWITCH1,DELDUP      SET DELETE SW; TURN OFF DUP ALLOW SW
         MVI   SAVELS,LS0          RESET PREVIOUS LEVEL STATUS
         B     TCR310              BRANCH TO CONTINUE SCAN
         EJECT
*        THIS SECTION DOES THE ACTUAL SCANNING OF THE INPUT BUFFER
*        BY USE OF A TRT INSTRUCTION (EXCEPT FOR NOEDIT OR NOTRAN).
*        AFTER THE TRT,REG 2 IS USED IN A BRANCH TABLE TO BRANCH TO
*        THE PROPER ROUTINE TO PROCESS THE SPECIAL CHARACTER THAT
*        STOPPED THE TRT.
         SPACE 4
TCR340   L     R8,INPUTEND         GET BUFFER END + 1
         SR    R8,R3               GET LENGTH OF BUFFER REMAINING
         CH    R8,TCON256          MORE THAN 256 BYTES LEFT?
         BNH   TCR345              BRANCH IF NO
         LH    R8,TCON256          SET LENGTH = 256
TCR345   BCTR  R8,0                DECREMENT LENGTH FOR TRT INST
         LR    R5,R3               GET ADDR OF FIRST BYTE SCANNED
         AR    R5,R8               ADD SCAN LENGTH - 1
         ST    R5,INPUTPTR         STORE AS BFR PTR IF NO SPECIAL CODES
         ST    R5,LASTSCAN         STORE LAST SCAN BYTE
TSW347   NOP   TCR360              BR IF NOTRAN OR NOEDIT,ELSE NOP
         SR    R2,R2               CLEAR R2 FOR BRANCH CODE FROM TRT
         L     R7,TRTTABLE         GET TRT TABLE ADDRESS
         EX    R8,TCR350           EXECUTE TRT
         BZ    TCR360              BRANCH IF NO SPECIAL CODES FOUND
         ST    R1,INPUTPTR         STORE SCAN END AS INPUT BUFFER PTR
         LR    R3,R1               SET R3 LIKEWISE
         TM    SWITCH1,DELETE      IS THIS RECORD BEING DELETED ?
         BZ    TCR349              BRANCH IF NO
         CH    R2,HEXEOR           ELSE,IS THIS END OF DELETED RECORD?
         BL    TCR310              BR TO SCAN IF VOK,RM,OR SOR
TCR349   B     TCR349(R2)          BR TO BRANCH TABLE FOR SPECIAL CODES
         B     TCR420              LEFT ZERO FILL
         B     TCR500              DUP
         B     TCR400              LEFT ZERO START
         B     TCR620              CANCEL
         B     TCR650              VERIFY OK OR RECORD MARK
         B     TCR600              PROGRAM LEVEL CODE
         B     TCR390              FD,AS,SW
         B     TCR370              SRC
         SPACE 2
TCR350   TRT   0(0,R3),0(R7)
         EJECT
*        THIS SECTION IS ENTERED WHEN NO SPECIAL CODES ARE DETECTED BY
*        THE SCAN TRT OR WHEN EITHER NOTRAN OR NOEDIT IS SPECIFIED.
         SPACE 2
TCR360   TM    SWITCH1,DELETE      IS THIS RECORD BEING DELETED ?
         BO    TCR310              BRANCH IF YES TO CONTINUE SCAN
         L     R3,LASTSCAN         GET ADDR OF LAST SCAN BYTE
         L     R6,INPUTEND         IS LAST SCAN BYTE
         BCTR  R6,0                     ALSO THE LAST BYTE
         CR    R6,R3                      IN THE INPUT BUFFER?
         BNE   TCR810              BR IF NO TO MOVE RTN
         TM    SWITCH1,DATACHK     YES,WAS IT A DATA CHECK?
         BZ    TCR810              BR IF NO TO MOVE RTN
         OI    SWITCH1,MOVEDC      INDICATE DATA CHECK TO BE MOVED
         B     TCR810              BR TO MOVE RTN
         SPACE 2
*        THIS SECTION REDUCES AN MTST REFERENCE CODE TO A SINGLE SRC
*        CODE. IT IS ENTERED (AT TCR370) WHEN A SRC CODE IS DETECTED
*        BY THE SCAN TRT. IT IS NOT ENTERED IF NOTRAN IS SPECIFIED.
         SPACE 2
TCR370   BAL   R12,TCR811          CALL MOVE RTN TO MOVE TO INCLUDE SRC
         LH    R7,ENDREF           SET MAX LNG  TO END OF REF CODE
TCR375   BAL   R12,TCR200          POINT TO NEXT BYTE IN BUFFER
         L     R6,INPUTEND         IS LAST SCAN BYTE
         BCTR  R6,0                     ALSO THE LAST BYTE
         CR    R6,R3                      IN THE INPUT BUFFER?
         BNE   TCR380              BR IF NO
         TM    SWITCH1,DATACHK     YES,WAS IT A DATA CHECK?
         BO    TCR385              BR IF YES TO CHECK NEXT BYTE
TCR380   CLI   0(R3),MTSTREF       NO,WAS IT A REFERENCE FILL CODE?
         BE    TCR385              BR IF YES
         CLI   0(R3),MTSTLSRC      NO,WAS IT A LOWER CASE SRC ?
         BE    TCR385              BR IF YES
         CLI   0(R3),MTSTUSRC      NO,WAS IT AN UPPER CASE SRC ?
         BE    TCR385              BR IF YES
         CLI   0(R3),MTSTLCR       NO,WAS IT A LOWER CASE CARRIER RET?
         BE    TCR310              BR IF YES  (END OF REF CODE)
         CLI   0(R3),MTSTUCR       NO,WAS IT AN UPPER CASE CARRIER RET?
         BE    TCR310              BR IF YES  (END OF REF CODE)
         BCTR  R3,0                DECREMENT BUFFER PTR  FOR RE-SCAN
         ST    R3,INPUTPTR         STORE IT AS INPUT BUFFER PTR
         B     TCR310              BR TO SCAN
TCR385   BCT   R7,TCR375           BR IF NOT END OF REF CODE
         B     TCR310              BR TO SCAN
         SPACE 2
*        THIS SECTION DROPS A FD,SW,OR AS CODE WHEN DETECTED BY THE
*        SCAN TRT. IT IS NOT ENTERED IF NOTRAN IS SPECIFIED.
         SPACE 2
TCR390   BCTR  R3,0                DECREMENT BUFFER PTR TO DROP CODE
         B     TCR810              BR TO MOVE RTN
         EJECT
*        THIS SECTION PROCESSES A LEFT ZERO START CODE. IT IS ENTERED
*        (AT TCR400) WHEN A LZS CODE IS DETECTED BY THE SCAN TRT.
         SPACE 2
TCR400   BCTR  R3,0                DECR BUFFER PTR TO SKIP LZS CODE
         MVI   LZCNT+1,ZERO        RESET LEFT ZERO FILL COUNT
         BAL   R12,TCR811          MOVE ALL BYTES UP TO LZS CODE
         L     R8,NXTAVAIL         SAVE LOCATION
         ST    R8,LZFLD                          FOR LZ FIELD
         OI    SWITCH1,LZSTART     SET LZS SWITCH
         B     TCR310              BRANCH TO CONTINUE SCAN
         SPACE 10
*        THIS SECTION PROCESSES A LEFT ZERO FILL CODE. IT IS ENTERED
*        (AT TCR420) WHEN A LZF CODE IS DETECTED BY THE SCAN TRT.
         SPACE 2
TCR420   TM    SWITCH1,LZSTART     LZS SWITCH ON ?
         BZ    TCR450              BRANCH IF NO
TCR422   LH    R2,LZCNT            INCREMENT
         LA    R2,1(R2)                      LZ FILL
         STH   R2,LZCNT                              COUNT
         MVC   0(1,R3),REPLACE     REPLACE LZ FILL; INDICATE LZ FLD ERR
         OI    SWITCH1,LZERR       IN CASE JUSTIFICATION FAILS
         BAL   R12,TCR811          MOVE ALL SCANNED INCLUDING LZ FILL
         TM    SWITCH1,LZSTART     LZS SWITCH ON ?
         BZ    TCR310              BRANCH IF NO TO RESCAN
         BAL   R12,TCR200          POINT TO NEXT BYTE IN INPUT BUFFER
         CLI   0(R3),MTDILZF       IS THIS BYTE ALSO A LZ FILL
         BE    TCR422              BR IF YES TO CONTINUE LZ FILL SCAN
         BCTR  R3,0                DECR BUFFER PTR TO RE-SCAN IT
         ST    R3,INPUTPTR         STORE IT
         NI    SWITCH1,RESET       RESET LEFT ZERO SWITCHES
         L     R5,NXTAVAIL         GET ADDR OF END OF LZ FIELD + 1
         L     R2,LZFLD            GET ADDR OF START OF LZ FIELD
         SR    R5,R2               GET FIELD LENGTH
         CH    R5,LZMAX            FIELD LENGTH GREATER THAN 15 ?
         BNH   TCR430              BRANCH IF NO TO JUSTIFY
         OI    EDWTS,FIELD         SET FIELD ERROR IN TYPE STATUS
         B     TCR310              BRANCH TO CONTINUE SCAN
         EJECT
*        THIS SECTION PERFORMS LEFT ZERO JUSTIFICATION. IT IS ENTERED
*        (AT TCR430) AT THE COMPLETION OF A LEFT ZERO FIELD,PROVIDED
*        THE FIELD IS NOT LONGER THAN 15 CHARACTERS.
         SPACE 2
TCR430   LH    R4,LZCNT            GET COUNT OF LEFT ZERO FILL CODES
         BCTR  R5,0                DECREMENT COUNT FOR MVC INST
         SR    R5,R4               GET NO. OF SIGNIFICANT DIGITS
         LR    R6,R2               GET ADDRESS OF START OF LZ FIELD
         AR    R6,R4               ADD SPACE FOR LZ FILLS
         EX    R5,TCR440           MOVE SIGNIFICANT DIGITS TO HOLDAREA
         EX    R5,TCR442           MOVE THEM BACK RIGHT JUSTIFIED
TCR435   MVI   0(R2),LS0           INSERT A LEADING ZERO
         LA    R2,1(R2)            INCREMENT THRU LZ FIELD
         BCT   R4,TCR435                UNTIL FIRST SIGNIFICANT DIGIT
         STH   R4,LZCNT            RESET LZ FILL COUNTER
         B     TCR310              BRANCH TO CONTINUE SCAN
         SPACE 2
TCR440   MVC   LZSAVE(0),0(R2)
TCR442   MVC   0(0,R6),LZSAVE
         SPACE 10
*        THIS SECTION SETS FIELD ERROR IN THE TYPE STATUS (OF EDW)
*        IF DUPLICATION OR LEFT ZERO JUSTIFICATION DOES NOT OCCUR.
*        IT IS ENTERED (AT TCR450) FROM THE LZF SECTION (NEAR TCR420),
*        AND FROM THE DUP SECTION (NEAR TCR500).
         SPACE 2
TCR450   MVC   0(1,R3),REPLACE     REPLACE FIELD ERROR BYTE
         OI    EDWTS,FIELD         SET FIELD ERROR IN TYPE STATUS
         B     TCR810              MOVE ALL BYTES UP TO & INCL ERR BYTE
         EJECT
*        THIS SECTION PROCESSES DUP CODES. IT IS ENTERED (AT TCR500)
*        WHEN A DUP CODE IS DETECTED BY THE SCAN TRT.
         SPACE 2
TCR500   NI    SWITCH1,RESET       RESET LEFT ZERO SWITCHES
         BCTR  R3,0                DECR INPUT PTR  TO RE-SCAN DUP CODE
         ST    R3,INPUTPTR         STORE IT
         BAL   R12,TCR811          MOVE ALL BYTES UP TO DUP CODE
         CLI   TSW315+1,NOP        SOR EXPECTED NOW ?
         BE    TCR310              IF YES, BR TO RE-SCAN SOR POSITION
         BAL   R12,TCR200          POINT TO DUP CODE AGAIN
         OI    SWITCH1,DUPCODE     SET DUP-ENCOUNTERED SWITCH
         TM    SWITCH1,NODUP       IS DUP ALLOWED ?
         BO    TCR450              BRANCH IF NO
         L     R5,NXTAVAIL         GET POSITION OF DUP CODE
         C     R5,PREVLB           IS DUP BEYOND END OF PREV RCD
         BNL   TCR450              BRANCH IF YES
         CLC   0(1,R5),REPLACE     IS BYTE TO BE DUPED A REPLACE CHAR ?
         BE    TCR450              BRANCH IF YES
         MVC   0(1,R3),0(R5)       PERFORM DUPLICATION
         B     TCR810              GO MOVE THE DUPED CHARACTER
         EJECT
*        THIS SECTION PROCESSES SOR POSITIONS. IT IS ENTERED AT
*        ONE OF FOUR PLACES:
*              TCR600 - IF A PL CODE IS DETECTED BY THE SCAN TRT. THIS
*                       WILL OCCUR ONLY WHEN THE PREVIOUS RECORD DOES
*                       NOT HAVE A VALID END-OF-RECORD CHARACTER.
*
*              TCR610 - IF A PL CODE IS FOUND WHEN IT IS EXPECTED.
*                       SEE CODE AT TSW322.
*
*              TCR615 - IF A RECORD ENDS WITH A GS OR ED CODE WITHOUT
*                       A VALID END-OF-RECORD. SEE CODE NEAR TSW101.
*
*              TCR620 - IF A CAN CODE IS DETECTED BY THE SCAN TRT. THIS
*                       WILL OCCUR ONLY WHEN THE PREVIOUS RECORD DOES
*                       NOT HAVE A VALID END-OF-RECORD.
         SPACE 4
TCR600   TM    SWITCH1,DELETE      IS THIS RECORD BEING DELETED ?
         BO    TCR608              BRANCH IF YES
         L     R5,INPUTPTR         IF NO, ARE THERE
         C     R5,FRSTSCAN         ANY BYTES TO MOVE ?
         BE    TCR618              IF NO,DROP BAD EOR FROM WORKAREA
         B     TCR620              IF YES,DONT MOVE BAD EOR TO WORKAREA
TCR608   NI    SWITCH1,NORMAL      TURN OFF DELETE SWITCH
TCR610   MVC   EDWSOR(1),0(R3)     STORE PL CODE IN SOR OF EDW
         NI    EDWSOR,HEXSOR       PUT SOR IN FORM OF HEX '0X'
TSW612   B     TCR310              NOP IF EDITR,ELSE BR TO CONT SCAN
         ST    R3,FRSTSCAN         STORE AS START OF SCAN
         B     TCR810              GO MOVE THE PL CODE
TCR615   NI    TSW845+1,NOP        SET EOR FORCED SWITCH
TSW616   NOP   TCR640              NOP IF EDITD, BRANCH IF EDITR
TCR618   L     R5,NXTAVAIL
         C     R5,STARTREC         ANY BYTES TO OUTPUT ?
         BE    TCR620              BRANCH IF NO, ELSE
         BCTR  R5,0                DECR WORKAREA ADDR SO THE BAD EOR
         ST    R5,NXTAVAIL         WONT BE RETAINED AS PART OF THE RCD.
TCR620   BCTR  R3,0                DECR INPUT PTR
         ST    R3,INPUTPTR         STORE IT FOR RE-SCAN
TSW625   NOP   TCR640              NOP IF EDITD,ELSE MOVE TO INCL EOR
         BCTR  R3,0                DECR INPUT PTR TO AVOID MOVING EOR
TCR640   NI    TSW315+1,NOP        SET SOR SWITCH TO EXPECT SOR (NOP)
         NI    SWITCH1,RESET       RESET LEFT ZERO SWITCHES
         OI    EDWTS,SOREOR        SET SOR/EOR ERROR IN TYPE STATUS
         MVI   EDWEOR,BADEOR       MOVE 'E' TO EOR IN EDW
         B     TCR810              GO MOVE PROPER NO. OF BYTES
         EJECT
*        THIS SECTION PROCESSES VOK AND/OR RM CODES. IT IS ENTERED
*        (AT TCR650) WHEN A VOK OR RM CODE IS DETECTED BY THE SCAN TRT.
         SPACE 2
TCR650   NI    SWITCH1,RESET       RESET LEFT ZERO SWITCHES
         NI    TSW315+1,NOP        SET SOR SWITCH TO EXPECT SOR  (NOP)
         TM    SWITCH1,DELETE      IS THIS RECORD BEING DELETED ?
         BZ    TCR655              BRANCH IF NO
         NI    SWITCH1,NORMAL      TURN OFF DELETE SWITCH
         B     TCR310              BRANCH TO CONTINUE SCAN
TCR655   MVI   EDWEOR,VOK          MOVE 'V' TO EOR IN EDW  (FOR VOK)
         CLI   0(R3),MTDIVOK       IS EOR A VOK ?
         BE    TSW662              BRANCH IF YES
         MVI   EDWEOR,RM           MOVE 'U' TO EOR IN EDW  (FOR RM)
TSW658   B     TSW662              NOP IF VERCHK = VOKCHK,BR IF NOCHK
         OI    EDWTS,SOREOR        SET SOR/EOR ERROR IN TYPE STATUS
TSW662   NOP   TCR810              BR IF EDITR TO INCL EOR, ELSE
         BCTR  R3,0                DECR INPUT PTR TO AVOID MOVING EOR
         B     TCR810              GO MOVE PROPER NO. OF BYTES
         TITLE ' IEBTCR05 - READ/EDIT MODULE -- MOVE ROUTINE'
*        THIS ROUTINE IS ENTERED ANY TIME A SPECIAL CHARACTER IS DE-
*        TECTED,OR THE END OF SCAN AREA IS REACHED. IF AN EOR WAS
*        FORCED, CONTROL PASSES DIRECTLY TO THE OUTPUT ROUTINE. OTHER-
*        WISE THE NUMBER OF BYTES TO MOVE AND THE NUMBER OF BYTES TO
*        OUTPUT ARE CALCULATED. IF THERE ARE NO BYTES TO MOVE AND:
*           1) NO BYTES TO OUTPUT, CONTROL RETURNS TO THE CALLER.
*           2) SOME BYTES TO OUTPUT, THEN:
*              A) IF SOR IS EXPECTED, CONTROL PASSES TO THE OUTPUT RTN.
*              B) IF SOR IS NOT EXPECTED, CONTROL RETURNS TO CALLER.
*        IF THERE ARE BYTES TO MOVE, THE SPACE AVAILABLE TO RECEIVE
*        THEM IS CALCULATED. IF ALL THE BYTES WILL FIT, ALL WILL BE
*        MOVED, ELSE ONLY ENOUGH WILL BE MOVED TO FILL THE AREA.
*
*        THIS ROUTINE IS ENTERED AT ONE OF TWO PLACES:
*
*              TCR810 - WHEN CONTROL MUST RETURN TO THE SCAN ROUTINE.
*              TCR811 - WHEN CONTROL MUST RETURN TO THE CALLING ROUTINE
         SPACE 4
TCR810   LA    R12,TCR310          SET RETURN TO SCAN RTN
TCR811   L     R5,NXTAVAIL         GET ADDR OF NEXT AVAIL IN WORKAREA
         CLI   TSW845+1,NOP        WAS EOR FORCED ?
         BE    TCR850              BRANCH IF YES TO OUTPUT
         L     R7,FRSTSCAN         GET ADDR OF FIRST BYTE SCANNED
         LA    R4,1(R3)            GET ADDRESS OF LAST SCANNED + 1
         SR    R4,R7               GET LENGTH OF SCANNED AREA
         BP    TCR814              BRANCH IF WE HAVE BYTES TO MOVE
         C     R5,STARTREC         ELSE, CHECK FOR BYTES TO OUTPUT
         BNE   TCR813              BRANCH IF WE'VE GOT SOME
         OI    SWITCH2,FRAGMENT    IF NONE, SET POSSIBLE SHORT RCD SW
         BR    R12                 AND RETURN TO CALLER
TCR813   CLI   TSW315+1,NOP        IF SOME, IS SOR EXPECTED ?
         BE    TCR850              BRANCH IF YES TO OUTPUT
         BR    R12                 ELSE RETURN TO CALLER
TCR814   L     R6,ENDREC           GET END OF RECORD + 1
         SR    R6,R5               NO. OF BYTES LEFT IN WORKAREA
TSW815   B     TCR816              BRANCH IF MTDI WITH EDIT, ELSE NOP
         BZ    TCR850              BRANCH TO OUTPUT IF WORKAREA FULL
TCR816   CR    R4,R6               WILL ALL SCANNED BYTES FIT?
         BNH   TCR820              BRANCH IF YES
         LR    R4,R6               ELSE
         B     TSW840                   GO MOVE WHAT WE CAN
         EJECT
*        THIS SECTION IS ENTERED ONLY IF ALL THE SCANNED BYTES WILL FIT
*        IN THE OUTPUT WORKAREA.
         SPACE 1
TCR820   TM    SWITCH1,MOVEDC      DATA CHECK TO BE MOVED?
         BZ    TCR844              BRANCH IF NO
         NI    SWITCH1,X'FF'-MOVEDC  INDICATE DC HAS BEEN MOVED
         OI    EDWTS,DATACHK       SET DATA CHECK SWITCH IN EDW
         TM    SWITCH1,TWOCHKS     TWO SUCCESSIVE DATA CHECKS ?
         BZ    TCR844              BRANCH IF NO
         NI    SWITCH1,NODATCHK    INDICATE DBL D.C. HANDLING COMPLETE
         MVI   EDWLS,LS1           INDICATE LEVEL STATUS ERROR
         B     TCR844              GO MOVE THE SECOND DATA CHECK BYTE
         SPACE 4
*        THIS SECTION IS ENTERED WHEN THERE ARE MORE BYTES TO MOVE THAN
*        SPACE REMAINING IN THE OUTPUT WORKAREA. THIS MEANS THE RECORD
*        EXCEEDED MAXLN BEFORE A VALID EOR WAS ENCOUNTERED.
         SPACE 1
TSW840   NOP   TCR844              NOP IF MTDI WITH EDIT,ELSE BRANCH
         OI    EDWTS,SOREOR+LNGERR SET SOR/EOR & INCORRECT LNG IN EDW
         MVI   EDWEOR,BADEOR       MOVE 'E' TO EOR IN EDW
         NI    TSW315+1,NOP        SET SOR EXPECTED SWITCH
         NI    TSW845+1,NOP        SET EOR FORCED SWITCH
         MVI   EDWLS,LS1           INDICATE LEVEL STATUS ERROR
         TM    SWITCH1,LZERR       INCOMPLETE LEFT ZERO FIELD ?
         BZ    TCR842              BRANCH IF NO
         OI    EDWTS,FIELD         SET FIELD ERROR IN TYPE STATUS
TCR842   NI    SWITCH1,RESET       TURN OFF LEFT ZERO SWITCHES
         SPACE 4
*        THIS SECTION DOES THE ACTUAL MOVING OF DATA BYTES FROM THE
*        INPUT BUFFER TO THE OUTPUT WORKAREA,AND UPDATES THE POINTERS.
         SPACE 1
TCR844   LTR   R4,R4               ANY BYTES TO MOVE ?
         BZ    TSW845              IF NO, SKIP MOVE CODE
         BCTR  R4,0                DECREMENT LENGTH FOR MVC INST
         EX    R4,TCR848           MOVE SOME BYTES
         LA    R4,1(R4)            RESTORE LENGTH
         AR    R5,R4               COMPUTE NEXT AVAIL BYTE IN WORKAREA
         ST    R5,NXTAVAIL         SAVE IT
         AR    R7,R4               COMPUTE NEXT BYTE TO BE MOVED
         ST    R7,FRSTSCAN         SAVE IT
TSW845   B     TCR811              NOP IF EOR FORCED, ELSE BR TO MOVE
TSW846   B     TCR847              BR IF EDITD TO SKIP NEXT SCAN POS
         BCTR  R7,0                IF EDITR, SCAN NEXT POS FOR EOR
TCR847   ST    R7,INPUTPTR         RESET SCAN POINTER ACCORDINGLY
         B     TCR811              GO MOVE SOME MORE
         SPACE 2
TCR848   MVC   0(0,R5),0(R7)
 TITLE ' IEBTCR05 - READ/EDIT MODULE -- OUTPUT PROCESSOR ROUTINE'
*        THIS ROUTINE IS CALLED BY THE MOVE ROUTINE ANY TIME THE OUT-
*        PUT WORKAREA BECOMES FULL,OR AN EOR IS DETECTED. FOR MTDI WITH
*        EDIT,CHECKS ARE MADE FOR PROGRAM LEVEL LENGTHS,MINLN, AND
*        DUP CODES. THE EDW IS PROPERLY UPDATED AND MOVED TO THE RCD.
         SPACE 2
TCR850   OI    TSW845+1,BRANCH     TURN OFF EOR FORCED SWITCH
         SR    R7,R7               ZERO OUT REG 7
         SR    R8,R8                              AND REG 8
         L     R9,NXTAVAIL         COMPUTE
         S     R9,STARTREC                RECORD LENGTH
         BNZ   TSW852              IF POSITIVE, GO PROCESS OUTPUT
         OI    SWITCH2,CANCEL      ELSE SET SHORT RECORD SWITCH
         B     TSW927              AND BYPASS OUTPUT
TSW852   NOP   TCR940              BR IF MTST WITH TRANS, ELSE NOP
TSW853   NOP   TCR861              NOP IF MTDI WITH EDIT,ELSE BRANCH
TSW854   B     TCR855              NOP IF EDITR   BRANCH IF EDITD
         CH    R9,TCON3            IS RECORD LESS THAN 3 BYTES ?
         BNL   TCR855              BRANCH IF NO
         OI    SWITCH2,CANCEL      SET SWITCH FOR RCD LESS THAN 3 BYTES
         B     TSW927              TREAT RCD AS BEING DELETED
TCR855   CLI   EDWSOR,BADSOR       WAS SOR IN ERROR ?
         BE    TSW857              BRANCH IF YES
         IC    R8,EDWSOR           GET SOR VALUE
         AR    R8,R8               DOUBLE IT TO POINT TO TABLE ENTRY
         CH    R7,PLCNT-2(R8)      IS PL LENGTH COUNT SET ?
         BNE   TCR856              BRANCH IF YES
         TM    EDWTS,TSERR         DOES RECORD HAVE AN ERROR ?
         BNZ   TSW857              BRANCH IF YES
         STH   R9,PLCNT-2(R8)      SET LENGTH FOR THIS PL CODE
         B     TSW857              SKIP LENGTH CHECK
TCR856   CH    R9,PLCNT-2(R8)      RECORD LENGTH = PL LENGTH ?
         BE    TSW857              BRANCH IF YES
         OI    EDWTS,LNGERR        SET INCORRECT LENGTH IN TYPE STATUS
         MVI   EDWLS,LS1           INDICATE LEVEL STATUS ERROR
TSW857   B     TCR858              NOP IF MINLN SPECIFIED, BR IF NOT
         CH    R9,MINLN            RECORD LENGTH LESS THAN MINLN ?
         BNL   TCR858              BRANCH IF NO, ELSE
         OI    EDWTS,LNGERR        SET INCORRECT LENGTH IN TYPE STATUS
TCR858   TM    SAVELS,LSERR        PREVIOUS LEVEL STATUS = 0 ?
         BZ    TCR860              BRANCH IF YES
         TM    EDWLS,LSERR         PRESENT LEVEL STATUS = 0 ?
         BNZ   TCR859              BRANCH IF NO
         TM    SWITCH1,DUPCODE     ANY DUP CODES IN THIS RECORD ?
         BZ    TCR860              BRANCH IF NO
TCR859   MVI   EDWLS,LS2           SET LEVEL STATUS = 2
TCR860   TR    EDWTS(2),EDWTT      TRANSLATE TYPE STAT & SOR TO EBCDIC
         L     R8,EDWADDR
         MVC   0(WORD,R8),EDW      MOVE EDW INTO OUTPUT RECORD
         TM    EDWLS,LSERR         LEVEL STATUS ERROR ?
         BM    TSW862              IF YES, CHECK FOR ERROR EXIT
TCR861   TM    EDWTS,TSERR         TYPE STATUS ERROR ?
         BZ    TSW880              IF NO, CHECK FOR OUTREC EXIT
         EJECT
*        THIS SECTION HANDLES THE ERROR EXIT. THE RECORD PLUS THE EDW
*        ARE ALWAYS PASSED TO THE EXIT. IF SYSUT2 SPECIFIES VARIABLE
*        LENGTH RECORDS, THE RDW IS ALSO APPENDED. UPON RETURN, THE NEW
*        EDW AND RECORD LENGTH ARE USED. IF THE RECORD HAS BEEN FIXED:
*            1) MTDI WITH EDIT --- PL LENGTH CHECKING IS PERFORMED AND
*                                  WE GO CHECK FOR OUTREC EXIT.
*            2) MTST OR NOEDIT --- DIRECTLY GO CHECK FOR OUTREC EXIT.
*        IF THE RECORD IS STILL INCORRECT, IT IS SENT TO SYSUT3.
*        IF RETURN CODE DOES NOT = 0 OR 4, THE UTILITY IS TERMINATED
*        WITH A MESSAGE.
         SPACE 2
TSW862   B     TSW878              NOP IF ERROR EXIT SPECIFIED,BR IF NO
         L     R6,STARTREC         SET POINTER FOR OUTPUT RECORD
TSW863   NOP   TCR864              NOP IF MTDI WITH EDIT, ELSE BRANCH
         AH    R9,TCON4            INCLUDE EDW IN RECORD LENGTH
         SH    R6,TCON4            SET POINTER TO INCLUDE EDW
TCR864   TM    UT3RECFM,NOTVAR     FIXED OR UNDEFINED RECORDS ?
         BO    TCR868              BRANCH IF YES
         AH    R9,TCON4            INCLUDE VAR FIELD IN RECORD LENGTH
         STH   R9,RDW              SET UP VARIABLE FIELD
         SH    R6,TCON4            SET POINTER TO INCLUDE VAR FIELD
         MVC   0(WORD,R6),RDW      MOVE THE VAR FIELD INTO THE RECORD
TCR868   ST    R6,PARMLIST              SET UP PARAMETER LIST
         ST    R9,RECLEN                FOR ERROR EXIT
         LA    R1,PARMLIST         SET UP REG 1 FOR USER ERROR EXIT
         L     R15,ERROR           LOAD ADDRESS OF USER ERROR EXIT
         BALR  R14,R15             BRANCH TO USER ERROR EXIT
         L     R1,EDWADDR
         MVC   EDW(WORD),0(R1)     USE NEW EDW (IF MODIFIED)
         L     R9,RECLEN           ALSO USE NEW RCD LGN (IF MODIFIED)
         L     R8,STARTREC         RESTORE R9 TO
         S     R8,PARMLIST             LOGICAL RECORD LENGTH
         SR    R9,R8                       FOR IEBTCRIN
         L     R5,STARTREC         COMPUTE
         AR    R5,R9                       EOR + 1  FOR BLANK-OUT RTN
         CH    R15,TCON8           SHOULD RCD GO TO NORMAL DATA SET ?
         BE    TSW880              BRANCH IF YES TO CHECK FOR OUTREC
         CH    R15,TCON4           SHOULD RCD GO TO ERROR DATA SET ?
         BE    TCR879              BRANCH IF YES TO OUTPUT IT
         CH    R15,TCON0           SHOULD RECORD GO NOPLACE ?
         BE    TCR887              BRANCH IF YES TO SKIP OUTPUT
         MVI   EXITERR+1,ERRABORT  ELSE SET MESSAGE TABLE AND
         B     TCR990              BRANCH TO ABNORMAL END
         EJECT
         SPACE 2
*        THIS SECTION HANDLES THE ERROPT OPTION.
         SPACE 2
TSW878   NOP   TSW880              NOP IF ERROPT = NORMAL, BR IF NOERR
TCR879   OI    SWITCH2,SYSUT3      INDICATE SYSUT3 RECORD
         B     TSW935               AND BRANCH TO OUTPUT SYSUT3
         SPACE 6
*        THIS SECTION HANDLES THE OUTREC EXIT. IF SYSUT2 SPECIFIES
*        VARIABLE LENGTH RECORDS, THE RDW IS APPENDED TO THE RECORD.
*        UPON RETURN, THE NEW RECORD LENGTH IS USED. THE RECORD IS
*        THEN SENT TO SYSUT2 UNLESS THE USER INDICATES NOT TO DO SO.
*        IF THE RETURN CODE DOES NOT = 0 OR 4, THE UTILITY IS
*        TERMINATED WITH A MESSAGE.
         SPACE 2
TSW880   B     TSW900              NOP IF OUTREC SPECIFIED,BR IF NOT
         L     R6,STARTREC         SET POINTER FOR OUTPUT RECORD
         TM    UT2RECFM,NOTVAR     FIXED OR UNDEFINED RECORDS ?
         BO    TCR883              BRANCH IF YES
         AH    R9,TCON4            INCLUDE VAR FIELD IN RECORD LENGTH
         STH   R9,RDW              SET UP VARIABLE FIELD
         SH    R6,TCON4            SET POINTER TO INCLUDE VAR FIELD
         MVC   0(WORD,R6),RDW      MOVE THE VAR FIELD INTO THE RECORD
TCR883   ST    R6,PARMLIST              SET UP PARAMETER LIST
         ST    R9,RECLEN                FOR OUTREC EXIT
         LA    R1,PARMLIST         SET UP REG1 FOR USER OUTREC EXIT
         L     R15,OUTREC          LOAD ADDRESS OF USER OUTREC EXIT
         BALR  R14,R15             BRANCH TO USER OUTREC EXIT
         L     R9,RECLEN           USE NEW RCD LNG (IF MODIFIED)
         L     R8,STARTREC         RESTORE R9 TO
         S     R8,PARMLIST             LOGICAL RECORD LENGTH
         SR    R9,R8                       FOR IEBTCRIN
         L     R5,STARTREC         COMPUTE
         AR    R5,R9                       EOR + 1  FOR BLANK-OUT RTN
         CH    R15,TCON4           SHOULD RCD GO TO NORMAL DATA SET ?
         BE    TSW900              BRANCH IF YES TO OUTPUT SYSUT2
         CH    R15,TCON0           SHOULD RECORD GO NOPLACE ?
         BNE   TCR890              IF NOT, THE GAME'S OVER,CHARLIE
TCR887   ST    R5,PREVLB           SAVE ADDR FOR END OF PREV RCD
TSW888   B     TSW927              BRANCH IF EDITD, ELSE
         LR    R8,R5               DECREMENT POINTER TO
         BCTR  R8,0                AVOID POSSIBILITY OF
         ST    R8,PREVLB           DUPING THE EOR CODE (FOR EDITR)
         B     TSW927              GO CLEAN UP
TCR890   MVI   EXITERR+1,OUTABORT  SET MESSAGE TABLE AND
         B     TCR990              BRANCH TO ABNORMAL END
         EJECT
*        THIS SECTION OPENS THE SYSUT2 (OR SYSUT3) DATA SET AND
*        CHECKS FOR ANY ADVERSE RESULTS FROM THE OPEN PROCESS.
*        IT IS ENTERED AT TSW900 FOR SYSUT2 RECORDS, AND AT
*        TSW903 (FROM TSW935) FOR SYSUT3 RECORDS.
         SPACE 2
TSW900   NOP   TSW927              BRANCH IF SYSUT2 DD MISSING,ELSE NOP
         LA    R4,UT2DCB           GET ADDRESS OF SYSUT2 DCB
         MVI   OPENERR+1,UT2OPERR  SET UP MESSAGE TABLE (JUST IN CASE)
         MVI   DCBERR+1,UT2OPERR
         USING IHADCB,R4           ESTABLISH DCB BASE
TCR903   TM    DCBOFLGS,DCBOPEN    IS DCB ALREADY OPEN?
         BO    TCR910              BRANCH IF YES
         OPEN  ((R4),(OUTPUT))     OPEN THE DCB
         TM    DCBOFLGS,DCBOPEN    DID DCB OPEN OK?
         BO    TCR904              BRANCH IF YES
         MVI   OPENERR,MSGFLAG     SET THE OPEN ERROR MESSAGE FLAG
         B     TCR991              BRANCH TO ABNORMAL END
TCR904   TM    ERRIND,BADDCB       INCONSISTENT DCB PARAMETERS ?
         BZ    TCR905              BRANCH IF NO  -  ALL OK
         MVI   DCBERR,MSGFLAG      SET DCB ERROR MESSAGE FLAG
         B     TCR991              BRANCH TO ABNORMAL END
TCR905   TM    ERRIND,DCBBIT4      PERMANENT HEADER ERROR ?    @ZA29418
         BZ    TCR907              BRANCH IF NO
         CLI   OPENERR+1,UT3OPERR  PROCESSING SYSUT3 ?
         BE    TCR906              BRANCH IF YES, ELSE WE HAVE SYSUT2
         MVI   EXLST2,DELETE       DELETE TLR2 EXIT REQUEST
         B     TCR995              BRANCH TO ABNORMAL END
TCR906   MVI   EXLST3,DELETE       DELETE TLR3 EXIT REQUEST
         B     TCR995              ELSE BRANCH TO ABNORMAL END
TCR907   LH    R0,DCBLRECL
         AH    R0,TCON8
         C     R0,WORKL1           LRECL GREATER THAN CURRENT WORKAREA
         BH    TCR923              BRANCH IF YES
TCR908   CLI   OPENERR+1,UT3OPERR  PROCESSING SYSUT3 ?
         BE    TCR909              BRANCH IF YES, ELSE WE'RE ON SYSUT2
         MVC   UT2RECFM(1),DCBRECFM    SET RECFM FOR SYSUT2
         B     TCR910               BRANCH TO CONTINUE
TCR909   MVC   UT3RECFM(1),DCBRECFM    SET RECFM FOR SYSUT3
TCR910   ST    R5,PREVLB               SAVE ADDR FOR END OF PREV RCD
TSW911   B     TCR912              BRANCH IF EDITD, ELSE
         LR    R2,R5               DECREMENT POINTER TO
         BCTR  R2,0                AVOID POSSIBILITY OF
         ST    R2,PREVLB           DUPING THE EOR CODE (FOR EDITR)
         EJECT
*        THIS SECTION DOES THE ACTUAL 'PUT' FOR THE RECORD. THE
*        RECORD DESCRIPTOR WORD IS CONSTRUCTED AND INCLUDED FOR
*        VARIABLE LENGTH RECORDS. IF A PERMANENT I/O ERROR OCCURS,
*        THE UTILITY IS TERMINATED WITH A MESSAGE.
         SPACE 2
TCR912   L     R6,STARTREC         SET POINTER FOR OUTPUT RECORD
TSW914   NOP   TCR915              NOP IF MTDI WITH EDIT, ELSE BRANCH
         TM    SWITCH2,SYSUT3      IS THIS A SYSUT3 RECORD ?
         BZ    TCR915              BRANCH IF NO
         AH    R9,TCON4            INCLUDE EDW IN RECORD LENGTH
         SH    R6,TCON4            SET POINTER TO INCLUDE EDW
TCR915   TM    DCBRECFM,NOTVAR     FIXED OR UNDEFINED RECORDS ?
         BZ    TCR918              BRANCH IF VARIABLE
         TM    DCBRECFM,UNDEF      UNDEFINED ?
         BZ    TCR917              BRANCH IF NO
         CH    R9,DCBBLKSI         OUTPUT RCD GREATER THAN BLKSIZE ?
         BNH   TCR916              BRANCH IF NO  -  WE'RE OK
         LH    R9,DCBBLKSI         ELSE USE BLKSIZE FOR OUTPUT RCD LNG
TCR916   STH   R9,DCBLRECL         PUT RECORD LENGTH IN LRECL
         B     TCR922              GO OUTPUT THE RECORD
TCR917   BAL   R14,TCR936          ELSE GO BLANK OUT REMAINING RECORD
         B     TCR922              CONTINUE
TCR918   AH    R9,TCON4            INCLUDE VAR FIELD IN RECORD LENGTH
         CH    R9,DCBLRECL         OUTPUT RECORD GREATER THAN LRECL ?
         BL    TCR920              BRANCH IF NO.  WE'RE OK
         LH    R9,DCBLRECL         ELSE USE LRECL FOR OUTPUT RCD LNG
TCR920   STH   R9,RDW              SET UP VARIABLE FIELD
         SH    R6,TCON4            SET POINTER TO INCLUDE VAR FIELD
         MVC   0(WORD,R6),RDW      MOVE THE VAR FIELD INTO THE RECORD
TCR922   PUT   (R4),(R6)           WRITE A RECORD FROM WORKAREA
         TM    ERRIND,DCBBIT6      PERMANENT I/O ERROR ?       @ZA29418
         BZ    TSW927              IF NO, GO CLEAN UP AFTER OUTPUT
         OI    ERRIND,DCBBIT4      SET READ/EDIT ERROR SWITCH  @ZA29418
         B     TCR998              RETURN TO DRIVER MODULE
         EJECT
*        THIS SECTION IS ENTERED ONLY WHEN LRECL ON THE DATA SET LABEL
*        IS GREATER THAN THE OUTPUT WORKAREA SIZE,THUS NECESSITATING A
*        GETMAIN FOR A LARGER WORKAREA. THE OLD WORKAREA IS THEN FREED
*        AFTER THE NEW POINTERS ARE SET UP.
         SPACE 2
TCR923   MVC   OLDLGTH,WORKL1      SAVE OLD WORKAREA LNG  FOR FREEMAIN
         MVC   OLDAREA,STRTWORK    SAVE OLD WORKAREA ADDR FOR FREEMAIN
         L     R5,STRTWORK         SET REG 5 = FROM-AREA
         ST    R0,WORKL1
         ST    R0,WORKL2
         GETMAIN VC,LA=WORKL1,A=GM2         GETMAIN NEW WORKAREA
         LTR   R15,R15             GETMAIN SUCCESSFUL ?
         BNZ   TCR010              BRANCH IF NO TO INDICATE GETMAIN ERR
         L     R1,GM2
         BAL   R14,TCR932          SET UP NEW WORKAREA POINTERS
         LH    R0,TCON256
         L     R1,STRTWORK         SET REG 1 = TO-AREA
         LR    R6,R9               GET LENGTH OF RECORD TO MOVE
         LA    R6,8(R6)            ADD 8 TO ALLOW FOR RDW & EDW
         B     TCR926              GO SET UP FOR MOVE
TCR924   MVC   0(0,R1),0(R5)
TCR925   MVC   0(256,R1),0(R5)     MOVE 256 BYTES
         AR    R1,R0               UPDATE THE TO-POINTER
         AR    R5,R0                AND THE FROM-POINTER
TCR926   SR    R6,R0               IS LENGTH GREATER THAN 256 ?
         BP    TCR925              BRANCH IF YES
         AR    R6,R0               RESTORE LENGTH IF LESS THAN 256
         BCTR  R6,0                DECREMENT COUNT FOR MVC INST
         EX    R6,TCR924           MOVE THE REST OF THE RECORD
         L     R5,STARTREC
         AR    R5,R9               COMPUTE NEXT AVAIL BYTE IN NEW AREA
         L     R0,OLDLGTH
         L     R1,OLDAREA
         FREEMAIN R,LV=(0),A=(1)   FREE THE OLD WORKAREA
         B     TCR908              CONTINUE NORMAL PROCESSING
         EJECT
*        THIS SECTION RE-INITIALIZES VARIOUS POINTERS AND THE EDW FOR
*        THE NEXT RECORD. IT IS ENTERED AFTER EVERY RECORD IS OUTPUT.
*        REG 7 = ZERO AT ENTRY.
         SPACE 2
TSW927   NOP   TSW992              NOP UNTIL EOF HAS BEEN REACHED
         NI    SWITCH1,DATACHK+MOVEDC  RE-SET READ/EDIT SWITCH1
         TM    SWITCH2,CANCEL      IS THIS A CANCELLED SHORT RECORD ?
         BZ    TCR928              BRANCH IF NO
         OI    SWITCH1,NODUP       ELSE SET SWITCH TO PREVENT DUPING
         MVI   EDWLS,LS0           RESET LS FOR RCDS LESS THAN 3 BYTES
TCR928   NI    SWITCH2,EXCP        RESET READ/EDIT SWITCH2
         L     R2,STARTREC         RESET POINTER TO
         ST    R2,NXTAVAIL         NEXT AVAILABLE BYTE IN WORKAREA
TSW929   NOP   TCR930              NOP IF MTDI WITH EDIT,ELSE BRANCH
         MVC   SAVELS(1),EDWLS     SAVE LEVEL STATUS
TCR930   ST    R7,EDW
         MVI   EDW,LS0             RE-INITIALIZE EDW
TSW931   NOP   TCR811              NOP IF MTDI WITH EDIT,ELSE GO MOVE
         BR    R12                 RETURN TO CALLER
         SPACE 2
*        THIS SECTION SETS UP THE OUTPUT WORKAREA POINTERS AFTER THE
*        AREA IS GETMAINED. IT NEED ONLY BE DONE ONCE UNLESS A NEW
*        WORKAREA IS GETMAINED. AT ENTRY,REG 1 CONTAINS THE ADDRESS
*        OF THE GETMAINED WORKAREA. REG 14 HAS THE ADDRESS OF THE
*        CALLING ROUTINE.
         SPACE 2
TCR932   ST    R1,STRTWORK         SAVE START OF WORKAREA
         AH    R1,TCON4
         ST    R1,EDWADDR          SET POINTER FOR ERROR RECORD
         AH    R1,TCON4
         ST    R1,NXTAVAIL         SAVE AS NEXT AVAIL RECORD AREA BYTE
         ST    R1,STARTREC         SAVE AS START OF RECORD
         AH    R1,MAXLN            ADD MAXLN
         ST    R1,ENDREC           SAVE AS ADDRESS OF SOR + MAXLN + 1
         L     R1,STRTWORK         GET START OF WORKAREA
         A     R1,WORKL1           ADD TOTAL WORKAREA LENGTH
         ST    R1,ENDWORK          SAVE AS END OF WORKAREA + 1
         BR    R14                 RETURN TO CALLER
         SPACE 2
*        THIS SECTION IS ENTERED INITIALLY FOR ALL SYSUT3 (ERROR)
*        RECORDS. THE DCB ADDRESS IS PICKED UP AND CONTROL IS PASSED
*        TO THE GENERAL OUTPUT SECTION (TSW902).
         SPACE 2
TSW935   NOP   TSW927              BRANCH IF SYSUT3 DD MISSING,ELSE NOP
         LA    R4,UT3DCB           GET ADDRESS OF SYSUT3 DCB
         MVI   OPENERR+1,UT3OPERR  SET UP MESSAGE TABLE  (JUST IN CASE)
         MVI   DCBERR+1,UT3OPERR
         B     TCR903              BR TO COMMON OUTPUT PROCESSOR
         EJECT
*        THIS SECTION BLANKS OUT THE REMAINDER OF THE OUTPUT WORKAREA
*        (FROM 'NXTAVAIL' TO 'ENDWORK') FOR FIXED LENGTH RECORDS.
         SPACE 2
TCR936   L     R2,ENDWORK          GET ADDRESS OF END OF WORKAREA
         SR    R2,R5               GET LENGTH IF AREA TO BLANK OUT
         BCR   NOTPLUS,R14         RETURN IF ZERO OR NEGATIVE
         MVI   0(R5),BLANK         BLANK OUT FIRST BYTE
         BCTR  R2,0                SO, DECREMENT COUNT BY ONE
         LH    R0,TCON256
         B     TCR939              GO SET UP FOR MOVE
TCR937   MVC   1(0,R5),0(R5)       BLANK OUT REST OF WORKAREA
TCR938   MVC   1(256,R5),0(R5)     BLANK OUT 256 BYTES OF WORKAREA
         AR    R5,R0               ADJUST WORKAREA POINTER
TCR939   SR    R2,R0               IS LENGTH GREATER THAN 256 ?
         BP    TCR938              BRANCH IF YES
         AR    R2,R0               RESTORE LENGTH IF LESS THAN 256
         BCTR  R2,0                DECREMENT COUNT FOR MVC INST
         EX    R2,TCR937           BLANK OUT REST OF WORKAREA
         BR    R14                 RETURN
         SPACE 2
*        THIS SECTION TRANSLATES MTST CODE IN THE OUTPUT WORKAREA TO
*        STANDARD UPPER CASE EBCDIC,STANDARD LOWER CASE EBCDIC,OR ANY
*        USER SUPPLIED CHARACTER SET. IT IS CALLED JUST PRIOR TO OUT-
*        PUTTING THE RECORD (TSW852).
         SPACE 2
TCR940   L     R2,STARTREC         GET START OF RECORD TO TRANSLATE
         L     R8,NXTAVAIL         GET ADDR OF NEXT AVAIL IN WORKAREA
         SR    R8,R2               GET LENGTH OF RECORD TO TRANSLATE
         L     R6,TRANTABL         GET TRANSLATE TABLE ADDRESS
         LH    R0,TCON256
         B     TCR948              GO SET UP FOR TRANSLATE
TCR944   TR    0(0,R2),0(R6)       TRANSLATE REST OF BUFFER
TCR946   TR    0(256,R2),0(R6)     TRANSLATE 256 BYTES
         AR    R2,R0               ADJUST RECORD POINTER
TCR948   SR    R8,R0               IS LENGTH GREATER THAN 256?
         BP    TCR946              BRANCH IF YES
         AR    R8,R0               RESTORE LENGTH IF LESS THAN 256
         BCTR  R8,0                DECREMENT COUNT FOR TR INST
         EX    R8,TCR944           TRANSLATE REST OF BUFFER
         B     TCR861              RETURN TO OUTPUT ROUTINE
 TITLE ' IEBTCR05 - READ/EDIT MODULE -- OUTHDR,OUTTLR EXITS'
*        THIS SECTION PROCESSES THE OUTHDR AND OUTTLR EXIT ROUTINES.
*        AT ENTRY, REG 0 IS UNPREDICTABLE, REG 2 - REG 13 ARE THE SAME
*        AS BEFORE. REG 1 CONTAINS THE ADDRESS OF A PARAMETER LIST
*        CREATED BY IOS AS FOLLOWS:
*              WORD 1 - POINTER TO 80 BYTE LABEL BUFFER AREA
*              WORD 2 - POINTER TO DCB BEING PROCESSED
*              WORD 3 - POINTER TO STATUS INFO (SEE SRL C28-6646)
*              WORD 4 - RESERVED
         SPACE 2
TCR950   MVI   TSW975+1,HDR2       SET TM INST  TO CHECK FOR OUTHDR2
         CLI   EXITERR,MSGFLAG     ERROR FLAG ALREADY ON ?
         BE    TCR953              IF YES, LEAVE IT ALONE
         MVI   EXITERR+1,HDR2BORT    SET MESSAGE
TCR953   L     R15,OUTHDR2                    AND EXIT ADDR FOR OUTHDR2
         B     TSW975              GO CHECK FOR OUTHDR2
         SPACE 2
TCR955   MVI   TSW975+1,TLR2       SET TM INST  TO CHECK FOR OUTTLR2
         CLI   EXITERR,MSGFLAG     ERROR FLAG ALREADY ON ?
         BE    TCR958              IF YES, LEAVE IT ALONE
         MVI   EXITERR+1,TLR2BORT      SET MESSAGE
TCR958   L     R15,OUTTLR2                    AND EXIT ADDR FOR OUTTLR2
         B     TSW975              GO CHECK FOR OUTTLR2
         SPACE 2
TCR960   MVI   TSW975+1,HDR3       SET TM INST  TO CHECK FOR OUTHDR3
         CLI   EXITERR,MSGFLAG     ERROR FLAG ALREADY ON ?
         BE    TCR963              IF YES, LEAVE IT ALONE
         MVI   EXITERR+1,HDR3BORT      SET MESSAGE
TCR963   L     R15,OUTHDR3                    AND EXIT ADDR FOR OUTHDR3
         B     TSW975              GO CHECK FOR OUTHDR3
         SPACE 2
TCR965   MVI   TSW975+1,TLR3       SET TM INST  TO CHECK FOR OUTTLR3
         CLI   EXITERR,MSGFLAG     ERROR FLAG ALREADY ON ?
         BE    TCR968              IF YES, LEAVE IT ALONE
         MVI   EXITERR+1,TLR3BORT      SET MESSAGE
TCR968   L     R15,OUTTLR3                    AND EXIT ADDR FOR OUTTLR3
         SPACE 2
TSW975   TM    EXITS,ZERO          EXIT REQUESTED ?
         BZ    TCR979              IF NOT,RETURN TO OPEN/CLOSE ROUTINE
         ST    R14,SAVE14
         BALR  R14,R15             BRANCH TO USER LABEL EXIT
         CH    R15,TCON16          TERMINATION REQUESTED ?
         L     R14,SAVE14
         BNE   TCR980              BRANCH IF NO
         MVI   EXITERR,MSGFLAG     ELSE SET PROPER
         OI    ERRIND,DCBBIT4      ERROR INDICATORS            @ZA29418
TCR979   SR    R15,R15             SET RETURN CODE TO ZERO
TCR980   BR    R14                 RETURN TO OPEN/CLOSE ROUTINE
 TITLE ' IEBTCR05 - READ/EDIT MODULE -- END OF MODULE PROCESSOR'
*        THIS SECTION SETS PROPER ERROR SWITCHES (IF NEEDED),
*        BRANCHES TO ERROR AND OUTREC ROUTINES (IF SPECIFIED) TO INDI-
*        CATE END-OF-FILE,CLOSES SYSUT2 AND SYSUT3 (IF OPENED),FREES
*        THE INPUT BUFFERS AND OUTPUT WORKAREA,AND RETURNS TO DRIVER.
         SPACE 1
TCR990   MVI   EXITERR,MSGFLAG     SET EXIT ERROR MESSAGE FLAG
TCR991   OI    ERRIND,DCBBIT4      SET READ/EDIT ERROR FLAG    @ZA29418
         B     TCR995              SKIP USER EXITS
TSW992   B     TSW994              NOP IF ERROR EXIT SPECIFIED,ELSE BR
         SR    R1,R1               SET PARAM REG = 0 TO DENOTE EOF
         L     R15,ERROR
         BALR  R14,R15             BRANCH TO ERROR EXIT ROUTINE
TSW994   B     TCR995              NOP IF OUTREC EXIT SPECIFIED,ELSE BR
         SR    R1,R1               SET PARAM REG = 0  TO DENOTE EOF
         L     R15,OUTREC
         BALR  R14,R15             BRANCH TO OUTREC EXIT ROUTINE
TCR995   LA    R4,UT2DCB           GET ADDRESS OF SYSUT2 DCB
         TM    DCBOFLGS,DCBOPEN    HAS SYSUT2 BEEN OPENED?
         BZ    TCR996              BRANCH IF NO TO AVOID CLOSE
         CLOSE ((R4))              CLOSE SYSUT2
TCR996   LA    R4,UT3DCB           GET ADDRESS OF SYSUT3 DCB
         TM    DCBOFLGS,DCBOPEN    HAS SYSUT3 BEEN OPENED?
         BZ    TCR998              BRANCH IF NO TO AVOID CLOSE
         CLOSE ((R4))              CLOSE SYSUT3
TCR998   TM    SWITCH2,EXCP        EXCP BEEN ISSUED           @ZA29418
         BZ    TCR997              BR IF NO                   @ZA29418
         WAIT  ECB=TCRECB          WAIT FORFINAL EXCP         @ZA29418
TCR997   L     R0,BUFL1                                       @ZA29418
         L     R1,TCRCCW1
         FREEMAIN R,LV=(0),A=(1)   FREE THE INPUT BUFFERS
         L     R0,WORKL1
         L     R1,STRTWORK
         FREEMAIN R,LV=(0),A=(1)   FREE THE WORKAREA
TCR999   L     R13,SAVEREG+HSA     RESTORE SAVE REGISTER
         RETURN (14,12),RC=(15)    RETURN TO DRIVER ROUTINE
  TITLE ' IEBTCR05 - READ/EDIT MODULE -- CONSTANTS SECTION'
*                   * * * * * * * * * * *
* * * * * * * * * * * CONSTANTS SECTION * * * * * * * * * * * * *
*                   * * * * * * * * * * *
           SPACE 2
LZMAX    DC    H'15'               MAXIMUM LEFT ZERO FIELD LENGTH
         SPACE 2
*                  MISCELLANEOUS COMPARE CONSTANTS
         SPACE 1
TCON0    DC    H'0'                ZERO
TCON1    DC    H'1'                ONE
TCON3    DC    H'3'                THREE
TCON4    DC    H'4'                FOUR
TCON8    DC    H'8'                EIGHT
TCON16   DC    H'16'               SIXTEEN
ENDREF   DC    H'45'               END OF REFERENCE CODE (MTST)
TCON256  DC    H'256'              TWO-FIFTY-SIX
         SPACE 6
*                  TR  &  TRT  TABLE ADDRESSES
         SPACE 1
MTDIADDR DC    A(TRTMTDI)          ADDRESS OF MTDI TRT TABLE
MTSTADDR DC    A(TRTMTST)          ADDRESS OF MTST TRT TABLE
UPPERADR DC    A(UPPER)            ADDR OF UPPER CASE TR TABLE (MTST)
LOWERADR DC    A(LOWER)            ADDR OF LOWER CASE TR TABLE (MTST)
         SPACE 6
*                  EXIT LIST ADDRESSES FOR HDR & TLR EXITS
         SPACE 1
XL2      DC    X'02'               CODE
         DC    AL3(TCR950)         A(OUTHDR2 EXIT)
         DC    X'84'               CODE
         DC    AL3(TCR955)         A(OUTTLR2 EXIT)
XL3      DC    X'02'               CODE
         DC    AL3(TCR960)         A(OUTHDR3 EXIT)
         DC    X'84'               CODE
         DC    AL3(TCR965)         A(OUTTLR3 EXIT)
         EJECT
*        THIS PAGE OF CONSTANTS DEFINES CHARACTER CODE DEPENDENT
*        VALUES. THE SHORT TR TABLE LABELLED EDWTT IS USED TO TRANSLATE
*        THE TYPE STATUS AND SOR VALUE IN THE EDW TO EBCDIC. IT MUST BE
*        CHANGED ACCORDINGLY, IF ANY OTHER CHARACTER SET IS TO BE USED.
*        THE LEVEL STATUS (EDWLS) AND THE EOR VALUE (EDWEOR) OF THE EDW
*        RECEIVE EBCDIC CODES DIRECTLY,SO THESE VALUES MUST BE CHANGED
*        IN THE CODING WHEREVER THEY ARE REFERENCED.
*
*        THE REMAINING VALUES ON THE PAGE ARE CHARACTER DEFINITIONS
*        FOR TCR INPUT (SYSUT1). IF THIS INPUT EVER CHANGES ITS CHAR-
*        ACTER SET,THESE VALUES WILL HAVE TO BE CHANGED ACCORDINGLY.
         SPACE 2
EDWTT    DC    C'01234567'         TRANSLATE TABLE FOR TYPE STATUS  &
         DC    C'89ABCDEF'         SOR IN ERROR DESCRIPTION WORD
         SPACE 1
HEXEOR   DC    H'20'               TRT TABLE ENTRIES FOR EOR (HEX 20)
         SPACE 2
MTDILZF  EQU   X'00'               LEFT ZERO FILL
MTDIDUP  EQU   X'11'               DUP
MTDILZS  EQU   X'12'               LEFT ZERO START
MTDICAN  EQU   X'18'               CANCEL
MTDIVOK  EQU   X'1E'               VERIFY OK
MTDIRM   EQU   X'3C'               RECORD MARK
MTDIPL1  EQU   X'71'               PROGRAM LEVEL 1
MTDIPL8  EQU   X'78'               PROGRAM LEVEL 8
MTDIGS   EQU   X'1D'               GROUP SEPARATOR
         SPACE 2
MTSTREF  EQU   X'00'               REFERENCE CODE FILLER
MTSTLCR  EQU   X'10'               LOWER CASE CARRIER RETURN
MTSTLSW  EQU   X'11'               LOWER CASE SWITCH CODE
MTSTLFD  EQU   X'13'               LOWER CASE FEED CODE
MTSTUCR  EQU   X'14'               UPPER CASE CARRIER RETURN
MTSTUSW  EQU   X'15'               UPPER CASE SWITCH CODE
MTSTUFD  EQU   X'17'               UPPER CASE FEED CODE
MTSTLAS  EQU   X'51'               LOWER CASE AUTOSEARCH CODE
MTSTUAS  EQU   X'55'               UPPER CASE AUTOSEARCH CODE
MTSTLSRC EQU   X'80'               LOWER CASE SEARCH CODE
MTSTUSRC EQU   X'84'               UPPER CASE SEARCH CODE
         EJECT
*                  CHANNEL COMMANDS FOR THE 2495 TAPE CARTRIDGE READER
         SPACE 1
READ     EQU   X'02'               READ COMMAND CODE FOR TCR
REWIND   EQU   X'0F'               REWIND/UNLOAD COMMAND CODE FOR TCR
         SPACE 2
*                  MESSAGE CODES TO BE INSERTED INTO THE MESSAGE
*                  INDICATOR WORDS IN THE COMMON REGION
         SPACE 1
UT2OPERR EQU   X'04'               * * * * * * * *
UT3OPERR EQU   X'05'               *             *
HDR2BORT EQU   X'06'               *   MESSAGE   *
TLR2BORT EQU   X'07'               *             *
HDR3BORT EQU   X'08'               *    CODES    *
TLR3BORT EQU   X'09'               *             *
OUTABORT EQU   X'0A'               *             *
ERRABORT EQU   X'0B'               * * * * * * * *
         SPACE 1
MSGFLAG  EQU   X'FF'               FLAG TO INDICATE MSG IS REQUIRED
         SPACE 2
*                  CSW STATUS BYTE MASKS
         SPACE 1
CDC      EQU   X'08'               CHANNEL DATA CHECK
CCC      EQU   X'04'               CHANNEL CONTROL CHECK
ICC      EQU   X'02'               INTERFACE CONTROL CHECK
PROGRAM  EQU   X'20'               PROGRAM CHECK
PROTECT  EQU   X'10'               PROTECTION CHECK
UNITCHK  EQU   X'02'               UNIT CHECK
UNITEXC  EQU   X'01'               UNIT EXCEPTION
         SPACE 2
*                  DATA CHECK MASKS
         SPACE 1
DATACHK  EQU   X'08'               ONE DATA CHECK FOUND
TWOCHKS  EQU   X'04'               TWO CONSECUTIVE DATA CHECKS FOUND
NODATCHK EQU   X'E3'               NO DATA CHECKS FOUND
MOVEDC   EQU   X'10'               DATA CHECK TO BE MOVED
         SPACE 2
*                  ECB CONDITION CODES
         SPACE 1
NORMAL   EQU   X'7F'               NORMAL INTERRUPT CONDITION
PERMERR  EQU   X'41'               PERMANENT I/O ERROR CONDITION
INTRCEPT EQU   X'44'               INTERCEPT CONDITION
         SPACE 2
*                  BRANCH-ON-CONDITION CODES
         SPACE 1
LOW      EQU   X'04'               CONDITION CODE 4
NOTPLUS  EQU   X'0D'               CONDITION CODE 13
         EJECT
*                  MISCELLANEOUS EQU CONSTANTS -- THE LABELS AND
*                  REMARKS SERVE TO EXPLAIN THEIR FUNCTION
         SPACE 1
NOP      EQU   X'00'               INSTRUCTION
BRANCH   EQU   X'F0'                      MODIFIER BYTES
         SPACE 2
MTST     EQU   X'80'               * * * * * * * * * *
NOTRAN   EQU   X'02'               *                 *
STDLC    EQU   X'08'               *   KEYWORD       *
STDUC    EQU   X'10'               *     PARAMETER   *
NOERR    EQU   X'02'               *       SWITCHES  *
VOKCHK   EQU   X'10'               *                 *
NOEDIT   EQU   X'20'               *                 *
EDITD    EQU   X'80'               * * * * * * * * * *
         SPACE 2
DUPCODE  EQU   X'01'               DUP CODE ENCOUNTERED
NODUP    EQU   X'02'               DUPLICATION NOT ALLOWED
DELETE   EQU   X'80'               RECORD IS TO BE DELETED
DELDUP   EQU   X'82'               COMBINATION OF NODUP AND DELETE
RESET    EQU   X'9F'               RESET LEFT ZERO SWITCHES
SOREOR   EQU   X'01'               SOR  OR  EOR ERROR
LNGERR   EQU   X'02'               LENGTH ERROR
FRAGMENT EQU   X'10'               CANCELLED SHORT RECORD  (EDITD)
CANCEL   EQU   X'20'               CANCELLED SHORT RECORD  (EDITR)
FIELD    EQU   X'04'               FIELD ERROR
LZSTART  EQU   X'40'               LEFT ZERO START CODE ENCOUNTERED
LZERR    EQU   X'20'               LEFT ZERO JUSTIFICATION ERROR
         SPACE 2
ERREXT   EQU   X'04'               ERROR EXIT REQUESTED
OUTEXT   EQU   X'08'               OUTREC EXIT REQUESTED
         SPACE 2
LSERR    EQU   X'03'               LEVEL STATUS ERROR MASK
TSERR    EQU   X'0F'               TYPE STATUS ERROR MASK
         SPACE 2
VOK      EQU   X'E5'               VOK INDICATION IN EDW
RM       EQU   X'E4'               RM  INDICATION IN EDW
BADSOR   EQU   X'0E'               BAD SOR INDICATION IN EDW
BADEOR   EQU   X'C5'               BAD EOR INDICATION IN EDW
HEXSOR   EQU   X'0F'               HEX MASK FOR SOR CONVERSION
         SPACE 2
TROUBLE  EQU   X'28'               TROUBLE FLAG (PERM I/O ERROR ON UT1)
MULTERR  EQU   X'37'               MULTIPLE ERROR MASK (SYSUT1)
NOCORE   EQU   X'48'               NO CORE AVAILABLE FOR GETMAIN
         EJECT
ZERO     EQU   0                   ZERO
TWO      EQU   2                   TWO
BLANK    EQU   X'40'               BLANK
         SPACE 2
NOUT2    EQU   X'04'               SYSUT2 DD STATEMENT MISSING
NOUT3    EQU   X'08'               SYSUT3 DD STATEMENT MISSING
BADDCB   EQU   X'80'               INCONSISTENT DCB PARAMETERS
SYSUT3   EQU   X'40'               SYSUT3 RECORD  ( ERROR RECORD )
         SPACE 2
LS0      EQU   X'F0'               LEVEL
LS1      EQU   X'F1'                    STATUS
LS2      EQU   X'F2'                          VALUES
         SPACE 2
HDR2     EQU   X'80'               HEADER
TLR2     EQU   X'40'                     TRAILER
HDR3     EQU   X'20'                            EXIT
TLR3     EQU   X'10'                                INDICATORS
         SPACE 2
HSA      EQU   4                   NEXT HIGHER LEVEL SAVEAREA
LSA      EQU   8                   NEXT LOWER LEVEL SAVEAREA
         SPACE 2
CNTFLD   EQU   X'06'               COUNT FIELD IN CCW
SWAP     EQU   X'01'               SWITCH FOR SWAPPING CCW'S
WORD     EQU   X'04'               FULL WORD LENGTH
DBLWRD   EQU   X'08'               DOUBLE WORD LENGTH
         SPACE 2
DCBOPEN  EQU   X'10'               DCB IS PROPERLY OPENED
EXCP     EQU   X'80'               EXCP HAS BEEN ISSUED
         SPACE 2
NOTVAR   EQU   X'80'               NOT VARIABLE LENGTH RCDS  ( F OR U )
UNDEF    EQU   X'40'               UNDEFINED RECORD (RECFM=U)
 TITLE ' IEBTCR05 - READ/EDIT MODULE -- WORKING STORAGE SECTION'
*                   * * * * * * * * * * * * * *
* * * * * * * * * * * WORKING STORAGE SECTION * * * * * * * * * *
*                   * * * * * * * * * * * * * *
           SPACE 2
SAVELS   DC    X'F0'               LEVEL STATUS FOR PREVIOUS RECORD
SAVEREG  DS    18F                 REGISTER SAVE AREA
SAVE14   DS    F                   SAVEWORD FOR R14 AT HDR,TLR TIME
         SPACE 4
TCRECB   DC    X'7F000000'         TCR EVENT CONTROL BLOCK
         SPACE 4
TCRIOB   EQU   *                   TCR INPUT/OUTPUT BLOCK
         SPACE 1
IOBFLG1  DC    X'02'               I/O FLAGS 1
IOBFLG2  DC    X'00'               I/O FLAGS 2
SENSE    DC    X'00'               TCR SENSE BYTE
         DC    X'00'               NOT USED (SECOND SENSE BYTE)
         DC    X'00'               TCR ECB COMPLETION CODE
         DC    AL3(TCRECB)         TCR ECB ADDRESS
IOBFLG3  DC    X'00'               I/O FLAGS 3
         DC    XL3'00'             LAST SEVEN    -     COMMAND ADDR
STATUS   DC    XL2'00'             BYTES OF      -     STATUS
RESIDUAL DC    XL2'00'             PREV CSW      -     RESIDUAL COUNT
CCWADDR  DC    X'00'               SIO CONDITION CODE
         DC    AL3(TCRCCW1)        CHANNEL PROGRAM ADDRESS
DCBADDR  DC    X'00'               RESERVED
         DC    XL3'00'             TCR DCB ADDRESS
         DC    2F'0'               USED BY IOS
         SPACE 4
TCRCCW1  CCW   02,X'00',X'20',2000               TCR INPUT
TCRCCW2  CCW   02,X'00',X'20',2000               CHANNEL PROGRAM
         SPACE 4
RDW      DC    F'0'                RECORD DESCRIPTOR WORD
         SPACE 2
LZCNT    DC    H'0'                COUNT OF LEFT ZERO FILL CODES
         EJECT
SWITCH1  DC    B'00000010'     READ/EDIT SWITCHES    AS FOLLOWS:
*
*              BIT 0  SET TO 1 INDICATES RECORD TO BE DELETED
*              BIT 1  SET TO 1 INDICATES FIELD IN LZ MODE
*              BIT 2  SET TO 1 INDICATES LZ FIELD ERROR
*              BIT 3  SET TO 1 INDICATES DATA CK TO BE MOVED
*              BIT 4  SET TO 1 INDICATES DATA CHECK
*              BIT 5  SET TO 1 INDICATES TWO SUCCESSIVE DATA CHECKS
*              BIT 6  SET TO 1 INDICATES DUP NOT ALLOWED
*              BIT 7  SET TO 1 INDICATES DUP ENCOUNTERED
         SPACE 1
SWITCH2  DC    B'00000000'
*              BIT 0  SET TO 1 INDICATES EXCP HAS BEEN ISSUED
*              BIT 1  SET TO 1 INDICATES SYSUT3 RECORD
*              BIT 2  SET TO 1 INDICATES RCD LESS THAN 3 BYTES (EDITR)
*              BIT 3  SET TO 1 INDICATES POSSIBLE SHORT RECORD (EDITD)
*              BIT 4  SET TO 1 INDICATES DATA CHECK
*              BIT 5  NOT USED
*              BIT 6  NOT USED
*              BIT 7  SET TO 1 INDICATES UNIT EXCEPTION
         SPACE 2
EDW      EQU   *         ERROR DESCRIPTION WORD   AS FOLLOWS:
*
*                   THE 4 BYTE EDW IS APPENDED TO AN ERROR RECORD
*                   TO BE PASSED TO THE ERROR EXIT OR TO SYSUT3
*                   THE FIRST BYTE IS USED TO STORE LEVEL STATUS
*        IF IT = 0, ERROR WONT CAUSE QUESTIONABLE DATA IN NEXT RECORD
*        IF IT = 1, ERROR MAY CAUSE QUESTIONABLE DATA IN NEXT RECORD
*        IF IT = 2, RECORD HAS QUESTIONABLE DATA DUE TO PREVIOUS RECORD
*                   AND MAY CAUSE QUESTIONABLE DATA IN NEXT RECORD
*
EDWLS    DC    X'F0'     LEVEL STATUS
         SPACE 2
*                   THE SECOND BYTE IS USED TO STORE TYPE STATUS
*        IF ALL BITS ARE 0, THIS RECORD CONTAINS NO IDENTIFIABLE ERROR
*        BITS 0,1,2 3  ARE UNUSED AND MUST BE 0
*        IF BIT 4 = 1, RECORD CONTAINS A CHARACTER ERROR
*        IF BIT 5 = 1, RECORD CONTAINS A FIELD ERROR
*        IF BIT 6 = 1, RECORD CONTAINS A LENGTH ERROR
*        IF BIT 7 = 1, RECORD CONTAINS A FIELD (SOR/EOR) ERROR
*
EDWTS    DC    X'00'     TYPE STATUS
         SPACE 2
*                   THE THIRD BYTE IS USED TO STORE THE SOR CHARACTER
*
EDWSOR   DC    X'00'     SOR
         SPACE 2
*                   THE FOURTH BYTE IS USED TO STORE THE EOR CHARACTER
*
EDWEOR   DC    X'00'     EOR
         EJECT
*                  POINTERS WITHIN THE INPUT BUFFER
         SPACE 1
INPUTPTR DC    F'0'      ADDR OF NEXT AVAILABLE BYTE IN INPUT BUFFER
INPUTEND DC    F'0'      ADDR OF LAST BYTE + 1  IN INPUT BUFFER
FRSTSCAN DC    F'0'      ADDR OF FIRST BYTE SCANNED
LASTSCAN DC    F'0'      ADDR OF LAST BYTE SCANNED
         SPACE 2
*                  POINTERS WITHIN THE OUTPUT WORKAREA
         SPACE 1
STRTWORK DC    F'0'      ADDRESS OF WORKAREA
EDWADDR  DC    F'0'      ADDRESS OF ERROR DESCRIPTION WORD
STARTREC DC    F'0'      ADDRESS OF OUTPUT RECORD
NXTAVAIL DC    F'0'      ADDRESS OF NEXT AVAILABLE BYTE IN WORKAREA
LZFLD    DC    F'0'      ADDR OF FIRST BYTE OF LZ FIELD IN WORKAREA
PREVLB   DC    F'0'      ADDR OF LAST BYTE + 1 OF PREVIOUS RECORD
ENDREC   DC    F'0'      ADDRESS OF STARTREC + MAXLN + 1 IN WORKAREA
ENDWORK  DC    F'0'      ADDRESS OF END OF WORKAREA
         SPACE 2
GM1      DC    F'0'      WORKWORDS
BUFL1    DC    F'0'               USED
BUFL2    DC    F'0'                   FOR
GM2      DC    F'0'                      GETMAIN
WORKL1   DC    F'0'                             AND
WORKL2   DC    F'0'                                FREEMAIN
         SPACE 2
OLDLGTH  DC    F'0'      LENGTH OF DISCARDED WORKAREA
OLDAREA  DC    F'0'      ADDRESS OF DISCARDED WORKAREA
         SPACE 4
PARMLIST DC    F'0'      PARAMETER LIST FOR USER EXITS
         DC    A(RECLEN) PTR TO RCD LNG FOR ERROR,OUTREC EXITS
         SPACE 2
RECLEN   DC    F'0'      RECORD LENGTH FOR ERROR,OUTREC EXITS
         SPACE 4
TRTTABLE DC    F'0'      ADDRESS OF TRT TABLE
LZSAVE   DC    4F'0'     SAVE AREA FOR LZ JUSTIFICATION
PLCNT    DC    8H'0'     RECORD LENGTHS FOR PROGRAM LEVELS
 TITLE ' IEBTCR05 - READ/EDIT MODULE -- TRANSLATE AND TEST TABLES'
*                   * * * * * * * * * * * * * * *
* * * * * * * * * * * TRANSLATE AND TEST TABLES * * * * * * * * * *
*                   * * * * * * * * * * * * * * *
         SPACE 2
IEBTCRTB CSECT
         DS    0F                  TABLE ALIGNMENT
         SPACE 2
TRTMTDI  DC    256X'00'            START OF MTDI TRANSLATE TABLE
         SPACE 1
         ORG   TRTMTDI+MTDILZF     LEFT ZERO FILL
         DC    X'04'                              CODE
         ORG   TRTMTDI+MTDIDUP     DUP
         DC    X'08'                              CODE
         ORG   TRTMTDI+MTDILZS     LEFT ZERO START
         DC    X'0C'                              CODE
         ORG   TRTMTDI+MTDICAN     CANCEL
         DC    X'10'                              CODE
         ORG   TRTMTDI+MTDIVOK     VERIFY OK
         DC    X'14'                              CODE
         ORG   TRTMTDI+MTDIRM      RECORD MARK
         DC    X'14'                              CODE
         ORG   TRTMTDI+MTDIPL1     PROGRAM LEVEL
         DC    8X'18'                             CODES
         SPACE 1
         ORG   TRTMTDI+256         END OF MTDI TRANSLATE TABLE
         SPACE 4
TRTMTST  DC    256X'00'            START OF MTST TRANSLATE TABLE
         SPACE 1
         ORG   TRTMTST+MTSTLSW     LOWER CASE
         DC    X'1C'                          SWITCH CODE
         ORG   TRTMTST+MTSTLFD     LOWER CASE
         DC    X'1C'                          FEED CODE
         ORG   TRTMTST+MTSTUSW     UPPER CASE
         DC    X'1C'                          SWITCH CODE
         ORG   TRTMTST+MTSTUFD     UPPER CASE
         DC    X'1C'                          FEED CODE
         ORG   TRTMTST+MTSTLAS     LOWER CASE
         DC    X'1C'                          AUTOSEARCH CODE
         ORG   TRTMTST+MTSTUAS     UPPER CASE
         DC    X'1C'                          AUTOSEARCH CODE
         ORG   TRTMTST+MTSTLSRC    LOWER CASE
         DC    X'20'                          SEARCH CODE
         ORG   TRTMTST+MTSTUSRC    UPPER CASE
         DC    X'20'                          SEARCH CODE
         SPACE 1
         ORG   TRTMTST+256         END OF MTST TRANSLATE TABLE
 TITLE ' IEBTCR05 - READ/EDIT MODULE -- MTST TRANSLATE TABLES'
*                   * * * * * * * * * * * * *
* * * * * * * * * * * MTST TRANSLATE TABLES * * * * * * * * * * *
*                   * * * * * * * * * * * * *
         SPACE 2
UPPER    DC    X'E9F2E3D5E97CE3D5'     *********************
         DC    X'F1F3E7E49E7BE7E4'     *                   *
         DC    X'0D4040400D404040'     *                   *
         DC    X'4019404040194040'     *                   *
         DC    X'F5F6C5D26C4AC5D2'     *      UPPER        *
         DC    X'F7F8C4C3505CC4C3'     *                   *
         DC    X'F0F9C8C25D4DC8C2'     *      CASE         *
         DC    X'F440D3405B40D340'     *                   *
         DC    X'5A4BD17EA14BD14E'     *      MTST         *
         DC    X'D4E5C7C6D4E5C7C6'     *                   *
         DC    X'0540404005404040'     *      TRANSLATE    *
         DC    X'1640402216404022'     *                   *
         DC    X'7DC9D7D87FC9D7D8'     *      TABLE        *
         DC    X'D9C15E6BD9C17A6B'     *                   *
         DC    X'E2E6E860E2E6E86D'     *                   *
         DC    X'D6406140D6406F40'     *                   *
         DC    X'1E4040401E'           *********************
         SPACE 4
LOWER    DC    X'A9F2A395E97CE3D5'     *********************
         DC    X'F1F3A7A49E7BE7E4'     *                   *
         DC    X'0D4040400D404040'     *                   *
         DC    X'4019404040194040'     *                   *
         DC    X'F5F685926C4AC5D2'     *      LOWER        *
         DC    X'F7F88483505CC4C3'     *                   *
         DC    X'F0F988825D4DC8C2'     *      CASE         *
         DC    X'F44093405B40D340'     *                   *
         DC    X'5A4B917EA14BD14E'     *      MTST         *
         DC    X'94A58786D4E5C7C6'     *                   *
         DC    X'0540404005404040'     *      TRANSLATE    *
         DC    X'1640402216404022'     *                   *
         DC    X'7D8997987FC9D7D8'     *      TABLE        *
         DC    X'99815E6BD9C17A6B'     *                   *
         DC    X'A2A6A860E2E6E86D'     *                   *
         DC    X'96406140D6406F40'     *                   *
         DC    X'1E4040401E'           *********************
 TITLE ' IEBTCR05 - READ/EDIT MODULE -- COMMON TABLE AREA'
COMMON   DSECT                     COMMON TABLE
         SPACE 2
EXITS    DS    1C                  EXIT ROUTINE INDICATORS
         SPACE 1
*                   BIT 0     SET TO 1 INDICATES OUTHDR2 EXIT REQUESTED
*                   BIT 1     SET TO 1 INDICATES OUTTLR2 EXIT REQUESTED
*                   BIT 2     SET TO 1 INDICATES OUTHDR3 EXIT REQUESTED
*                   BIT 3     SET TO 1 INDICATES OUTTLR3 EXIT REQUESTED
*                   BIT 4     SET TO 1 INDICATES OUTREC  EXIT REQUESTED
*                   BIT 5     SET TO 1 INDICATES ERROR   EXIT REQUESTED
*                   BIT 6-7   NOT USED
         SPACE 3
PARM1    DS    1C                  TYPE AND TRANS INDICATORS
         SPACE 1
*                   BIT 0     SET TO 1 INDICATES  TYPE = MTST
*                   BIT 1     SET TO 1 INDICATES  TYPE = MTDI
*                   BIT 2     NOT USED
*                   BIT 3     SET TO 1 INDICATES  TRANS = STDUC
*                   BIT 4     SET TO 1 INDICATES  TRANS = STDLC
*                   BIT 5     SET TO 1 INDICATES  TRANS = 'USERNAME'
*                   BIT 6     SET TO 1 INDICATES  TRANS = NOTRAN
*                   BIT 7     NOT USED
         SPACE 3
PARM2    DS    1C                  EDIT,VERCHK,AND ERROPT INDICATORS
         SPACE 1
*                   BIT 0     SET TO 1 INDICATES  EDIT = EDITD
*                   BIT 1     SET TO 1 INDICATES  EDIT = EDITR
*                   BIT 2     SET TO 1 INDICATES  EDIT = NOEDIT
*                   BIT 3     SET TO 1 INDICATES  VERCHK = VOKCHK
*                   BIT 4     SET TO 1 INDICATES  VERCHK = NOCHK
*                   BIT 5     SET TO 1 INDICATES  ERROPT = NORMAL
*                   BIT 6     SET TO 1 INDICATES  ERROPT = NOERR
*                   BIT 7     NOT USED
         SPACE 3
REPLACE  DS    1C                  DATA CHECK REPLACE CHARACTER
         SPACE 3
MINLN    DS    2C                  MINLN VALUE
         SPACE 3
MAXLN    DS    2C                  MAXLN VALUE
         EJECT
OUTHDR2  DS    F                   A(OUTHDR2 EXIT)
OUTTLR2  DS    F                   A(OUTTLR2 EXIT)
OUTHDR3  DS    F                   A(OUTHDR3 EXIT)
OUTTLR3  DS    F                   A(OUTTLR3 EXIT)
OUTREC   DS    F                   A(OUTREC EXIT)
ERROR    DS    F                   A(ERROR  EXIT)
TRANTABL DS    F                   A(TRANSLATE TABLE)
         DS    F                   A(MESSAGE MODULE)
         SPACE 3
         DS    24F                 NOT USED BY R/E
         SPACE 3
*              THE FOLLOWING TABLE CONTAINS MESSAGE INDICATORS
*              EACH ENTRY CONSISTS OF 4 BYTES
*              A LITERAL WILL BE INSERTED IN MSG VIA A CODE IN BYTE 2
         SPACE 2
         DS    14F       *
OPENERR  DS    F         *
DCBERR   DS    F         *    BYTE 1  = X'00'     DO NOT DISPLAY MSG
         DS    F         *            = X'FF'     DISPLAY THE MSG
EXITERR  DS    F         *
GMAINERR DS    F         *    BYTE 2  = X'03'     INSERT X'SYSUT1  '
         DS    F         *            = X'04'            X'SYSUT2  '
*                        *            = X'05'            X'SYSUT3  '
*                        *            = X'06'            X'OUTHDR2 '
*                        *            = X'07'            X'OUTTLR2 '
*                        *            = X'08'            X'OUTHDR3 '
*                        *            = X'09'            X'OUTTLR3 '
*                        *            = X'10'            X'OUTREC  '
*                        *            = X'11'            X'ERROR   '
*                        *
*                        *    BYTES 3,4           NOT USED
         SPACE 2
MOUNTID  DS    F                   MOUNT MESSAGE ID
         SPACE 2
IOBADDR  DS    F                   IOB ADDRESS
         SPACE 2
BUFL     DS    2C                  BUFFER LENGTH
         SPACE 2
ERRIND   DS    C                   BIT 4 ON INDICATES READ/EDIT ERROR
*                                  BIT 2 ON INDICATES PERM I/O ERROR
*                                  BIT 1 ON INDICATES NO CORE AVAILABLE
*                                  BIT 0 ON INDICATES INCONSISTENT
*                                                       DCB PARAMETERS
         SPACE 1
NODDCARD DS    C                   BIT 5 INDICATES SYSUT2 DD MISSING
*                                  BIT 4 INDICATES SYSUT3 DD MISSING
         EJECT
         DS    3F                  EXIT LIST FOR SYSIN
         DS    5F                  EXIT LIST FOR SYSPRINT
         DS    F                   EXIT LIST FOR SYSUT1
         DS    3F                  EXIT LIST
EXLST2   DS    2F                            FOR SYSUT2
         DS    3F                  EXIT LIST
EXLST3   DS    2F                            FOR SYSUT3
         SPACE 3
         DS    3F                  NOT USED BY R/E
         SPACE 3
UT2LRECL DS    2C                  SYSUT2 LRECL
UT2BLKSI DS    2C                  SYSUT2 BLKSIZE
UT2RECFM DS    2C                  SYSUT2 RECFM
UT3LRECL DS    2C                  SYSUT3 LRECL
UT3BLKSI DS    2C                  SYSUT3 BLKSIZE
UT3RECFM DS    2C                  SYSUT3 RECFM
         SPACE 3
TCRDCB   DS    13F                 DCB FOR SYSUT1
UT2DCB   DS    24F                 DCB FOR SYSUT2
UT3DCB   DS    24F                 DCB FOR SYSUT3
 TITLE ' IEBTCR05 - READ/EDIT MODULE -- DCB TEMPLATE'
         DCBD  DSORG=PS
         END
