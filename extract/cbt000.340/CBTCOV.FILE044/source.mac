./ ADD NAME=HILITE                                 12SEP93 18.15 --
*process system(mvs) optimize(time);

 /*  THIS EXAMPLE REQUIRES ISPF 3.3 OR LATER *********************** */
 /*                                                                  */
 /*                                                                  */
 /* Copyright International Business Machines Corporation, 1992      */
 /* All Rights Reserved                                              */
 /*                                                                  */
 /* This is sample code.  IBM PROVIDES THIS CODE ON AN "AS IS"       */
 /* BASIS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR            */
 /* IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED              */
 /* WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR        */
 /* PURPOSE.                                                         */

 hilite:
    proc(exdata,panname,pansect,msgid,araydim,varname,varlen,varval)
        options(main noexecops);
    declare
      exdata   fixed bin(31),       /* Not used here                 */
      panname  char(8),             /* Panel name                    */
      pansect  char(1),             /* Panel section                 */
      msgid    char(8),             /* Last message id               */
      araydim  fixed bin(31),       /* Array dimention               */
      varname  char(8),             /* Variable names passed in      */
      varlen   fixed bin(31),       /* Variable value lengths kludge */
      varval   fixed bin(31);       /* String of values              */
    declare
      varlen_array(5) fixed bin(31) based(addr(varlen)), /* Array of
                                       lengths                       */
      zwidth_p ptr,                 /* Pointer to width of screen    */
      field_p  ptr,                 /* Pointer to field name         */
      posit_p  ptr,                 /* Pointer to cursor position    */
      zdata_p  ptr,                 /* Pointer to zdata dynamic area */
      shadow_p ptr,                 /* Pointer to shadow variable    */
      zwidth   char(3)     based(zwidth_p),/* Width of screen        */
      field    char(5)     based(field_p), /* Cursor field name      */
      posit    char(8)     based(posit_p), /*   And position in field*/
      zdata    char(10000) based(zdata_p), /* Dynamic area(edit data)*/
      shadow   char(10000) based(shadow_p); /* Shadow variable area  */
    declare
      a        fixed bin(31),       /* Index into shadow or zdata    */
      chars(10000) char(1) based,   /* Based array of single chars   */
      realpos  fixed bin(31),       /* Binary version of var 'posit' */
      width    fixed bin(31),       /* Binary version if var 'zwidth'*/
      st_line  fixed bin(31);       /* Start(or end) of line in zdata*/

    /*****************************************************************/
    /* Get pointers to the values of each passed in variable         */
    /*****************************************************************/

    zwidth_p = addr(varval);
    field_p  = addr(zwidth_p -> chars(varlen_array(1)+1));
    posit_p  = addr(field_p  -> chars(varlen_array(2)+1));
    zdata_p  = addr(posit_p  -> chars(varlen_array(3)+1));
    shadow_p = addr(zdata_p  -> chars(varlen_array(4)+1));

    substr(shadow,1,varlen_array(5)) = ' '; /* Blank shadow variable */
    if field = 'ZDATA' then                 /* If cursor is in ZDATA */
      do;
        /*************************************************************/
        /* Get position of cursor within zdata field                 */
        /*************************************************************/

        realpos = substr(posit,1,varlen_array(3)); /* Convert to bin */
        width = substr(zwidth,1,varlen_array(1));  /* Convert to bin */
        st_line = ((realpos - 1) / width) * width + 8;

        if realpos >= st_line then      /* If cursor in data area    */
          do;
            /*********************************************************/
            /* Scan backwards and forwards looking for a blank.      */
            /* For each non-blank character, put a 'W' in shadow var.*/
            /*********************************************************/

            do a = realpos to st_line by - 1 /* Scan backwards       */
                              while(substr(zdata,a,1)^=' ');
              substr(shadow,a,1) = 'W';      /* put char in shadow   */
            end;
            st_line = st_line + width - 9;   /* calculate end of line*/
            st_line = min(st_line,varlen_array(5)); /* don't overflow*/
            do a = realpos to st_line while(substr(zdata,a,1)^=' ');
              substr(shadow,a,1) = 'W'; /* update shadow for fwd scan*/
            end;
          end;
      end;
    end hilite;
