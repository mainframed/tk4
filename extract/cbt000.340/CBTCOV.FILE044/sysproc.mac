./ ADD NAME=ALLOCS                                 12SEP93 18.15 --
ISREDIT MACRO (DDNAME)
/*
/* Name:  ALLOCS Clist
/*
/* Function: This is an ISPF/PDF edit macro to create TSO
/*           allocate statements for all of the not-new
/*           allocations for a TSO session
/*
/*           It replaces the current file with CLIST allocate
/*           statements.  It runs by running the LISTALC command,
/*           trapping the output, placing the output into the
/*           editor, then turning the LISTALC output into
/*           allocate commands.
/*
/*           If a DD name is supplied, only the allocation
/*           statement for that DD name is created.
/*
/* Syntax: ALLOCS <ddname>
/*
/*
/*
ISPEXEC CONTROL ERRORS RETURN
CONTROL ASIS
ISREDIT (DW) = DATA_WIDTH
ISREDIT (STATE) = USER_STATE
ISREDIT CAPS OFF
ISREDIT DEL ALL .ZL .ZF
GOTO LISTALC
RETRN:-
ISREDIT X &STR(-) ALL
ISREDIT X ' ' 3 ALL
ISREDIT DEL ALL X
ISREDIT FIND P'^' 1 FIRST
SET FINDRC=&LASTCC
SET FINDRC=0
DO WHILE &FINDRC=0
  ISREDIT SHIFT ) .ZCSR 11
  ISREDIT FIND P'^' 1
  SET FINDRC=&LASTCC
END
ISREDIT X ALL
ISREDIT F P'^' ALL 1 9
ISREDIT C ' ' '' ALL 1 9 NX
ISREDIT FIND P'^' 1 FIRST
SET FINDRC=&LASTCC
SET FINDRC=0
DO WHILE &FINDRC=0
  ISREDIT (DATA) = LINE .ZCSR
  SET SYSDVAL=&DATA
  READDVAL DD ETC
  ISREDIT LINE .ZCSR =  < 1 '&DD' >
  ISREDIT RFIND
  SET FINDRC=&LASTCC
END
/* ---------------------------------------------------------------- */

ISREDIT X ALL P'^' 1
ISREDIT C P'=' ' ' ALL NX 9 &DW
ISREDIT FIND P'^' 1 FIRST
SET FINDRC=&LASTCC
DO WHILE &FINDRC=0
  ISREDIT LABEL .ZCSR = .B
  ISREDIT (DATA) = LINE .ZCSR
  SET DATA=&DATA
  ISREDIT FIND  ' ' 1 PREV
  SET DATA=&STR(ALLOC F(&DATA) REUSE SHR DATASET(
  ISREDIT LINE_BEFORE .ZCSR = < 1 (DATA) 66 '+' >
  ISREDIT DEL .B .B ALL
  ISREDIT FIND P'^' 1
  SET FINDRC=&LASTCC
END
ISREDIT FIND TERMFILE WORD  FIRST
SET FINDRC=&LASTCC
SET FINDRC=0
DO WHILE &FINDRC=0
  ISREDIT (DATA) = LINE .ZCSR
  SET SYSDVAL =&DATA
  READDVAL DS DD
  SET DATA=ALLOC F(&DD) REUSE SHR DATASET(&NRSTR(*))
  ISREDIT LINE .ZCSR = (DATA)
  ISREDIT FIND TERMFILE WORD
  SET FINDRC=&LASTCC
END
ISREDIT FIND NULLFILE WORD  FIRST
SET FINDRC=&LASTCC
DO WHILE &FINDRC=0
  ISREDIT (DATA) = LINE .ZCSR
  SET SYSDVAL =&DATA
  READDVAL DS DD
  SET DATA=&STR(ALLOC F(&DD) REUSE DUMMY
  ISREDIT LINE .ZCSR = (DATA)
  ISREDIT RFIND
  SET FINDRC=&LASTCC
END
ISREDIT C REUSE ' REUSE' ALL 12
ISREDIT C REUSE ' REUSE' ALL 13
ISREDIT C REUSE ' REUSE' ALL 14
ISREDIT C REUSE ' REUSE' ALL 15
ISREDIT C REUSE ' REUSE' ALL 16
ISREDIT C REUSE ' REUSE' ALL 17
ISREDIT C REUSE ' REUSE' ALL 18
ISREDIT C ' ' '         ' 10 ALL
ISREDIT X ALL
ISREDIT C " " "'" ALL 19
ISREDIT FIND P'^   ' FIRST 19 &DW NX
SET FINDRC=&LASTCC
DO WHILE &FINDRC=0
  ISREDIT C ' ' "'"
  ISREDIT C ' ' "+" 66
  ISREDIT FIND P'^   ' 19 &DW NX
  SET FINDRC=&LASTCC
END
ISREDIT LINE_AFTER .ZL = 'ALLOC'
ISREDIT LABEL .ZL = .A
ISREDIT FIND ALLOC WORD 1 LAST .ZF .A
ISREDIT RFIND
SET FINDRC=&LASTCC
DO WHILE &FINDRC=0
  ISREDIT (B) = LINENUM .A
  SET B=&B-1
  ISREDIT RESET LABEL
  ISREDIT LABEL &B = .B    /* .B = .A - 1 (LINE BEFORE OLD .A) */
  ISREDIT LABEL .ZCSR = .A /* GET NEW TOP LABEL     */
  ISREDIT F '+' LAST .A .B
  IF &LASTCC=0 THEN +
    DO
      ISREDIT (A) = LINENUM .A
      ISREDIT (B) = LINENUM .ZCSR
      IF &B ^= &A THEN +
        ISREDIT C '+' ")" LAST .A .B
    END
  ISREDIT FIND ALLOC WORD 1 LAST .ZF .A
  ISREDIT RFIND
  SET FINDRC=&LASTCC
END
ISREDIT DEL ALL .ZL .ZL
ISREDIT C ' )' ')' ALL
SET CHANGERC=&LASTCC
DO WHILE &CHANGERC=0
  ISREDIT C * * ALL
  SET CHANGERC=&LASTCC
END
SET A=64
ISREDIT F P'^' &A
SET FINDRC=&LASTCC
DO WHILE &FINDRC>0
  ISREDIT C '  +' ' +' ALL
  SET A=&A-1
  ISREDIT F P'^' &A
  SET FINDRC=&LASTCC
END
SET DATA=&NRSTR(----------------------------------------)
SET DATA=&STR(&DATA.&DATA)
SET DATA=&SUBSTR(1:66,&DATA.&DATA)
SET DATA=&STR(/)&NRSTR(*)&SUBSTR(1:66,&DATA.&DATA)&NRSTR(*)&STR(/)
ISREDIT F ALLOC WORD 1 LAST
SET FINDRC=&LASTCC
DO WHILE &FINDRC=0
  ISREDIT LINE_BEFORE .ZCSR = (Z)
  ISREDIT LINE_BEFORE .ZCSR = (DATA)
  ISREDIT LINE_BEFORE .ZCSR = (Z)
  ISREDIT RFIND
  SET FINDRC=&LASTCC
END
ISREDIT LINE_AFTER  .ZL = (Z)
ISREDIT LINE_AFTER  .ZL = (DATA)
ISREDIT USER_STATE = (STATE)
ISREDIT F P'=' FIRST
ISREDIT RESET
IF &DDNAME^=&STR() THEN +
  DO
      ISREDIT X ALL
      ISREDIT F '(&DDNAME)'
      IF &LASTCC=0 THEN +
        DO
          ISREDIT F '/*' PREV
          ISREDIT LABEL .ZCSR = .A
          ISREDIT F '/*' NEXT
          ISREDIT LABEL .ZCSR = .B
          ISREDIT DEL .ZF .A ALL
          ISREDIT DEL .B  .ZL ALL
        END
  END
ISREDIT LINE_BEFORE .ZF = (DATA)
SET HEADING=&STR(Allocations for user &SYSUID. at &SYSTIME, on &SYSDATE
ISREDIT LINE_BEFORE .ZF = < 1 '/*' 4 (HEADING) 69 '*/'>
ISREDIT LINE_BEFORE .ZF = (DATA)
ISREDIT LINE_BEFORE .ZF = 'CONTROL MSG NOFLUSH LIST'
ISREDIT CHANGE " '*" " '" ALL
ISREDIT RESET
EXIT CODE(1)


LISTALC:-
   ISREDIT REC OFF
   SET SYSDVAL = LISTA ST
   READDVAL C1 C2
   ISREDIT LINE_AFTER .ZF = 'TEMPORARY TOP LINE'
   SET SYSOUTTRAP=900
   LISTA ST
   SET SYSOUTTRAP=0
   SET A = &SYSOUTLINE
   SET ZERRSM=&A LINE(S) ADDED
   SET ZERRLM=&A LINE(S) WERE ADDED TO THE FILE FROM THE LISTA COMMAND
   SET ZERRALRM=YES
   DO WHILE &A>0
     SET LINE = SYSOUTLINE&A
     SET LINE = &&&LINE
     SET LINE = &STR(&LINE)
     ISREDIT LINE_BEFORE .ZF = (LINE)
     SET A=&A-1
   END
   ISREDIT RESET
   ISREDIT X ALL 'TEMPORARY TOP LINE' 1
   ISREDIT DELETE ALL X
   ISREDIT LOCATE .ZF
 GOTO RETRN
ü
./ ADD NAME=BREAKPT                                12SEP93 18.15 --
/* REXX - Save and restore sets of breakpoints for ISPF TEST (opt7.8)*/
/*                                                                   */
/* Function : Save and restore lists of breakpoints in ISPF dialog   */
/*            Test                                                   */
/*                                                                   */
/* Syntax:  (Must be executed as a TSO command in options 7.8)       */
/*             BREAKPT Save|Load|Merge|Delete <name>                 */
/*       -or-                                                        */
/*             BREAKPT SOrt                                          */
/*                                                                   */
/*                                                                   */
/*      SAVE   - Save all current breakpoints under a specified name.*/
/*               Will prompt for name if none is entered.            */
/*                                                                   */
/*      LOAD   - Load a specified set of previously saved            */
/*               breakpoints. Will prompt for name and show existing */
/*               names if none is entered.                           */
/*                                                                   */
/*      MERGE  - Add a saved set of breakpoints to the existing      */
/*               list of breakpoints. Will prompt for name and       */
/*               show existing names if none is entered.             */
/*                                                                   */
/*      DELETE - Delete a previously saved set of breakpoints.       */
/*               breakpoints. Will prompt for name and show existing */
/*               names if none is entered.                           */
/*                                                                   */
/*      SORT   - Sort the current list by service name.              */
/*                                                                   */
/*  **** CAUTION **************************************************  */
/*  *                                                             *  */
/*  * This exec changes the dialog test table displayed by ISPF.  *  */
/*  * ISPF expects to do all of the table management, and in some *  */
/*  * cases this exec can cause ISPF to abend.  Be sure to press  *  */
/*  * a scroll key after each use of this exec.                   *  */
/*  *                                                             *  */
/*  ***************************************************************  */
/*                                                                   */
/*********************************************************************/


Address ispexec
Parse Upper Arg option tabname .
If 0=abbrev('SAVE', option,1) & 0=abbrev('LOAD',  option,1) & ,
   0=abbrev('MERGE',option,1) & 0=abbrev('DELETE',option,1) & ,
   0=abbrev('SORT', option,2) Then
 Do
  Parse Source . . me .
  Address 'TSO' 'CLRSCRN'         /* Use local clear screen command */
  Say center('  'me 'COMMAND HELP  ',78,'-')
  Say
  Say 'Syntax:  '
  Say '         'me'  Save|Load|Merge|Delete <name>'
  Say '   -or-  '
  Say '         'me'  SOrt'
  Say
  Say
  Say '  SAVE   - Save all current breakpoints under a specified name.'
  Say
  Say '  LOAD   - Load a specified set of previously saved breakpoints.'
  Say
  Say '  MERGE  - Add a saved set of breakpoints to the existing'
  Say '           list of breakpoints.'
  Say
  Say '  DELETE - Delete a previously saved set of breakpoints.'
  Say
  Say '  SORT   - Sort the current list by service name.'
  Say
  Say copies('-',78)
  Say 'This exec must be run on the Dialog Test breakpoints panel'
  Say '(usually option 7.8).'
  Say copies('-',78)
  Exit
 End
If 1=abbrev('SAVE',  option,1) Then option = 'SAVE'
If 1=abbrev('LOAD',  option,1) Then option = 'LOAD'
If 1=abbrev('SORT',  option,2) Then option = 'SORT'
If 1=abbrev('MERGE', option,1) Then option = 'MERGE'
If 1=abbrev('DELETE',option,1) Then option = 'DELETE'
keys='ISPYBVL,ISPYBVS,ISPYBVW,ISPYBVF,ISPYBVA,ISPYBVQ'
keys='NAME,'keys

Address 'TSO' 'CLRSCRN'
If check_for_test()^=0 Then Exit
If option ^= 'SORT' Then
  Do
    If tabname=''    Then Call get_name
    If tabname=''    Then Exit
  End
If option = 'LOAD'   Then Call load_table
If option = 'SAVE'   Then Call save_table
If option = 'SORT'   Then Call sort_table
If option = 'MERGE'  Then Call merge_table
If option = 'DELETE' Then Call delete_table

Say '+'copies('-',76)'+'
Say '|'copies(' ',76)'|'
Say '|'centre(option 'complete',76)'|'
Say '|'copies(' ',76)'|'
Say '|'centre('Press a scroll key',76)'|'
Say '|'centre('when the breakpoint table is displayed',76)'|'
Say '|'copies(' ',76)'|'
Say '+'copies('-',76)'+'


Exit

/*-----------------------------------------------------------------*/
check_for_test: Procedure Expose tablenam

     Address 'TSO' 'SUBCOM ISPEXEC'
     tabrc=rc
     If tabrc = 0 Then
       Do
         'ISPEXEC VGET (ZSCREEN)'
         tablenam='ISPYBT'zscreen
         'ISPEXEC CONTROL ERRORS RETURN'
         'ISPEXEC TBTOP   'tablenam
         tabrc = rc
         'ISPEXEC CONTROL ERRORS RETURN'
       End
     If tabrc ^= 0 Then
       Do
         Parse Source . . me .
         Say 'The 'me' command is only valid from ISPF option 7.8'.
       End

     Return tabrc


/*-----------------------------------------------------------------*/
open_saved_breakpoints_table:


     'ISPEXEC CONTROL ERRORS RETURN'
     'ISPEXEC TBCREATE BREAKTAB NAMES('keys') WRITE'
     If rc > 0 Then
       'ISPEXEC TBOPEN BREAKTAB WRITE'
     'ISPEXEC CONTROL ERRORS CANCEL'
     'ISPEXEC TBSORT BREAKTAB FIELDS('||,
          'NAME,C,A,ISPYBVS,C,A,ISPYBVW,C,D,ISPYBVF,C,A,'||,
          'ISPYBVA,C,A,ISPYBVQ,C,A)'
     'ISPEXEC TBTOP BREAKTAB'
     'ISPEXEC TBSKIP BREAKTAB'
     Return


/*-----------------------------------------------------------------*/
get_name:  /* Get a name for a saved set */



     Call open_saved_breakpoints_table
     n=0
     lastname=''
     If rc=0 Then
       Do
         Say 'The following table names already exist.'
         Say copies('-',78)
       End
     Do While rc = 0
       If lastname^=name Then
         Do
           n=n+1
           Say right(n,3)') 'left(name,8)
           lastname=name
         End
       'ISPEXEC TBSKIP BREAKTAB'
     End
     'ISPEXEC TBTOP BREAKTAB'
     Say copies('-',78)
     Say
     Say 'Enter table name or null to end.'
     Pull name
     tabname = name
     'ISPEXEC TBCLOSE BREAKTAB'
     Return


/*-----------------------------------------------------------------*/
load_table:


     Call open_saved_breakpoints_table
     'ISPEXEC TBVCLEAR BREAKTAB'
     name=tabname
     'ISPEXEC TBSCAN BREAKTAB ARGLIST(NAME)'
     If rc>0 Then
       Do
         Say 'Set 'tabname' does not exist or is empty'
         Exit
       End
     Else
       Do
         'ISPEXEC TBTOP 'tablenam
         'ISPEXEC TBSKIP 'tablenam
         Do While rc = 0
           'ISPEXEC TBDELETE 'tablenam
           'ISPEXEC TBSKIP 'tablenam
         End
         'ISPEXEC TBTOP  BREAKTAB'
         'ISPEXEC TBSKIP BREAKTAB'
         Do Until rc>0
           If tabname=name Then
             'ISPEXEC TBADD 'tablenam
           'ISPEXEC TBSKIP BREAKTAB'
         End
         'ISPEXEC TBSORT 'tablenam' FIELDS(ISPYBVS,C,A)'
         'ISPEXEC TBTOP 'tablenam
       End
     'ISPEXEC TBCLOSE BREAKTAB'
     Return


/*-----------------------------------------------------------------*/
merge_table:


     Call open_saved_breakpoints_table
     'ISPEXEC TBVCLEAR BREAKTAB'
     name=tabname
     'ISPEXEC TBSCAN BREAKTAB ARGLIST(NAME)'
     If rc>0 Then
       Do
         Say 'Set 'tabname' does not exist or is empty'
         Exit
       End
     Else
       Do
         'ISPEXEC TBTOP 'tablenam
         'ISPEXEC TBSKIP 'tablenam
         Do While rc = 0
           If ispybvs='' Then
             'ISPEXEC TBDELETE 'tablenam
           'ISPEXEC TBSKIP 'tablenam
         End
         'ISPEXEC TBTOP  BREAKTAB'
         'ISPEXEC TBSKIP BREAKTAB'
         Do Until rc>0
           If tabname=name Then
             'ISPEXEC TBADD 'tablenam
           'ISPEXEC TBSKIP BREAKTAB'
         End
         'ISPEXEC TBSORT 'tablenam' FIELDS('||,
            'ISPYBVS,C,A,ISPYBVW,C,D,ISPYBVF,C,A,ISPYBVA,C,A,'||,
            'ISPYBVQ,C,A)'
         'ISPEXEC TBTOP  'tablenam
         'ISPEXEC TBSKIP 'tablenam
         lastline = ''
         Do While rc = 0
           line=name'$'ispybvs'$'ispybvw'$'ispybvf'$'ispybva
           line=line'$'ispybvq
           If line=lastline Then
             'ISPEXEC TBDELETE 'tablenam
           else
              lastline=line
           'ISPEXEC TBSKIP 'tablenam
         End
         'ISPEXEC TBTOP 'tablenam
       End
     'ISPEXEC TBCLOSE BREAKTAB'
     Return



/*-----------------------------------------------------------------*/
delete_table:


     Call open_saved_breakpoints_table
     'ISPEXEC TBVCLEAR BREAKTAB'
     name=tabname
     'ISPEXEC TBSCAN BREAKTAB ARGLIST(NAME)'
     If rc>0 Then
       Do
         Say 'Set 'tabname' does not exist or is empty'
         Exit
       End
     Else
       Do
         'ISPEXEC TBTOP  BREAKTAB'
         'ISPEXEC TBSKIP BREAKTAB'
         Do Until rc>0
           If tabname=name Then
             'ISPEXEC TBDELETE BREAKTAB'
           'ISPEXEC TBSKIP BREAKTAB'
         End
       End
     'ISPEXEC TBCLOSE BREAKTAB'
     Return


/*-----------------------------------------------------------------*/
save_table:


     Call open_saved_breakpoints_table
     Do Until rc>0
       If tabname=name Then
         'ISPEXEC TBDELETE breaktab'
       'ISPEXEC TBSKIP BREAKTAB'
     End
     name=tabname
     n=0
     'ISPEXEC TBTOP 'tablenam
     'ISPEXEC TBSKIP 'tablenam
     Do While rc = 0
       If ispybvs^='' Then
         Do
           n=n+1
           'ISPEXEC TBADD  'breaktab
         End
       'ISPEXEC TBSKIP 'tablenam
     End
     'ISPEXEC TBTOP  BREAKTAB'
     'ISPEXEC TBTOP 'tablenam
     'ISPEXEC TBCLOSE BREAKTAB'
     Return



/*-----------------------------------------------------------------*/
sort_table:

     'ISPEXEC TBSORT 'tablenam' FIELDS(ISPYBVS,C,A)'
     'ISPEXEC TBTOP  'tablenam

     Return
ü
./ ADD NAME=COMMANDS                               12SEP93 18.15 --
PROC 0 PREF(ISR) LIST CONLIST SYMLIST
/*********************************************************************/
/** ISPF/PDF Command Table Processor                                **/
/**                                                                 **/
/** Syntax : COMMANDS                                               **/
/**                                                                 **/
/** Function : Edit Command table using 3.9, and copy changed member**/
/**            into profile member &PREF.CMDS                       **/
/**                                                                 **/
/** Requires :                                                      **/
/**                                                                 **/
/**         ISPF and ISPF/PDF versions 2.3                          **/
/**                                                                 **/
/**         TABLES - The profile dataset allocated to ISPTABL       **/
/**         PPANELS- None                                           **/
/**         MSGS   - None                                           **/
/**         SKELS  - None                                           **/
/**         CLISTS - None                                           **/
/**         CLISTS - None                                           **/
/**                                                                 **/
/*********************************************************************/
CONTROL NOMSG
IF &CONLIST=CONLIST THEN CONTROL CONLIST
IF &SYMLIST=SYMLIST THEN CONTROL SYMLIST
IF &LIST=LIST THEN CONTROL LIST
ISPEXEC CONTROL ERRORS RETURN
SET XXX=XXX
SET UCMRC=999
SET ZMSG000S=&STR()
SET NEW=&STR()
SET STATUS=CLOSED
ISPEXEC TBOPEN &PREF.CMDS
SET TBOPENRC = &LASTCC
IF &TBOPENRC=8 THEN SET NEW = NEW
ELSE IF &TBOPENRC=12 THEN SET STATUS=OPEN
ISPEXEC LMINIT DDNAME(ISPPROF) DATAID(INP) ENQ(EXCLU)
ISPEXEC LMINIT DDNAME(ISPPROF) DATAID(OUT) ENQ(EXCLU)
IF &LASTCC>0 THEN +
  DO
    ISPEXEC SETMSG MSG(ISRZ002)
    SET ZMSG000S = &STR(.)
  END
IF &STR(&ZMSG000S) = &STR() THEN +
  IF &NEW ^= NEW THEN +
    IF &STATUS=OPEN THEN +
      DO
        ISPEXEC LMCOPY FROMID(&INP) FROMMEM(&PREF.CMDS) +
                       TODATAID(&OUT) REPLACE TOMEM(&XXX.CMDS)
        IF &LASTCC>0 THEN +
          DO
            ISPEXEC SETMSG MSG(ISRZ002)
            SET ZMSG000S = &STR(.)
          END
      END
    ELSE +
      SET XXX=&PREF
  ELSE +
    SET XXX=&PREF
IF &STR(&ZMSG000S) = &STR() THEN +
  DO
    SET UCMA=&PREF
    ISPEXEC VPUT (UCMA)
    ISPEXEC TBCLOSE &XXX.CMDS
    ISPEXEC SELECT PGM(ISPUCM) PARM(&XXX)
    SET &UCMRC=&LASTCC
    IF &UCMRC<12 THEN +
      DO
        ISPEXEC TBOPEN &XXX.CMDS
        SET TBOPENRC= &LASTCC
        ISPEXEC TBSORT &XXX.CMDS FIELDS(ZCTVERB)
        ISPEXEC TBCLOSE &XXX.CMDS
        IF &TBOPENRC=0 THEN +
          DO
            IF &XXX^=&PREF THEN +
              DO
                  ISPEXEC LMCOPY FROMID(&OUT) FROMMEM(&XXX.CMDS) +
                       TODATAID(&INP) REPLACE TOMEM(&PREF.CMDS)
                IF &LASTCC=0 THEN +
                  DO
                    SET ZMSG000S=TABLE UPDATED
                    SET ZMSG000L=MEMBER &PREF.CMDS WAS SAVED.
                  END
                ELSE +
                  DO
                    SET ZMSG000S=TABLE NOT ALTERED
                    SET ZMSG000L=MEMBER &PREF.CMDS WAS NOT SAVED. +
(IEBGENER RC=&LASTCC)
                  END
              END
            ELSE +
              DO
                SET ZMSG000S=TABLE UPDATED
                SET ZMSG000L=MEMBER &PREF.CMDS WAS SAVED.
              END
          END
        ELSE +
          DO
            IF &STR(&XXX)^=&STR(&PREF) THEN +
              DELETE &PREF.CMDS
            SET ZMSG000S=TABLE ERASED
            SET ZMSG000L=MEMBER &PREF.CMDS WAS ERASED IF IT EXISTED.
          END
      END
    ELSE +
      DO
        SET ZMSG000S=TABLE NOT ALTERED
        SET ZMSG000L=MEMBER &PREF.CMDS WAS NOT SAVED.
      END
  END
IF &STR(&XXX)^=&STR(&PREF) THEN +
  ISPEXEC  LMMDEL  DATAID(&INP) MEMBER(&XXX.CMDS)
IF &STATUS=CLOSED THEN ISPEXEC TBCLOSE &PREF.CMDS
IF &STR(&ZMSG000S) = &STR() THEN +
  ISPEXEC SETMSG MSG(ISPZ000)
ISPEXEC CONTROL DISPLAY REFRESH
ISPEXEC CONTROL ERRORS CANCEL
IF &STR(&XXX)^=&STR(&PREF) AND &STATUS=OPEN AND &UCMRC<12 THEN +
  DO
    ISPEXEC VGET (ZSPLIT)
    IF &ZSPLIT = NO THEN +
      DO
        WRITE WOULD YOU LIKE AN IMMEDIATE RESTART OF ISPF?
        WRITENR PLEASE TYPE YES OR NO:
        READ
        IF &SUBSTR(1:1,&SYSDVAL&STR( ))=Y THEN -
          DO
            WRITE A 'CONTROL RESTART' COMMAND WILL BE ISSUED.
            WRITE THIS WILL CAUSE A DIALOG ERROR AND RESTART ISPF.
            WRITE THE ERROR IS EXPECTED!
            ISPEXEC CONTROL RESTART
          END
      END
    ELSE +
      DO
        WRITE
        WRITE
        WRITE SINCE YOU ARE IN SPLIT SCREEN MODE, YOU DO NOT HAVE
        WRITE THE OPTION OF AN IMMEDIATE RESTART.  COMMAND TABLES
        WRITE CAN NOT BE RE-INITIALIZED.
        WRITE
        WRITE
        WRITE YOU MUST EXIT ISPF FOR COMMAND TABLE RE-INITIALIZATION.
        WRITE
      END
  END
ü
./ ADD NAME=DYNAREA                                12SEP93 18.15 --
/* REXX - Dynamic area example */
/*                                                                  */
/* Copyright International Business Machines Corporation, 1992      */
/* All Rights Reserved                                              */
/*                                                                  */
/* This is sample code.  IBM PROVIDES THIS CODE ON AN "AS IS"       */
/* BASIS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR            */
/* IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED              */
/* WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR        */
/* PURPOSE.                                                         */
Address ispexec
red   = '01'x                 /* Assign attribute bytes to colors */
blue  = '02'x
green = '03'x
white = '04'x
maxlines = 600                /* set maximum number of lines */
dyndata  = ''                 /* initialize data             */
Do a = 1 to maxlines by 3     /* Create some dummy data      */
  dyndata=dyndata||white||left('This is'red ||'red  'white||a  ,29)
  dyndata=dyndata||white||left('This is'blue||'blue 'white||a+1,29)
  dyndata=dyndata||white||left('This is'green'green'white||a+2 ,29)
End
/*    Add a bottom of data maker to the end of the data      */
  dyndata = dyndata||blue||centre(green||'BOTTOM'||blue,29,'*')

curline = 1;                        /* set current line              */

Do Until disprc > 0                 /* display loop until end or err */
  dynarea = substr(dyndata,1+(curline-1)*30)  /* set dynamic variable*/
  size = length(dynarea)                   /* Set a scalar variable  */
  'ISPEXEC DISPLAY PANEL(DYNAREA)'         /* Display the data       */
  disprc = rc                              /* save return code       */
  'ISPEXEC VGET (ZVERB,ZSCROLLA,ZSCROLLN)' /* get scroll values      */
  SELECT                            /* Process scrolling             */
    When(zverb  = 'UP')   Then      /* Scroll up                     */
     If zscrolla = 'MAX' Then       /*    if scroll was max          */
      curline = 1                   /*      scroll to top            */
     Else                           /*    else a number is known     */
      curline = max(1,curline-zscrolln); /* (maximum is top)         */
    When(zverb  = 'DOWN') Then      /* Scroll down                   */
     If zscrolla = 'MAX' Then       /*    if scroll was max          */
      curline = maxlines            /*      scroll to bottom         */
     Else                           /*    else a number is known     */
      curline = min(maxlines,curline+zscrolln); /* (max is bottom)   */
    Otherwise;                      /* could use left & right too    */
  End

End
/*      The panel follows here.  It should be named DYNAREA
)ATTR
 @ AREA(DYNAMIC)   SCROLL(ON) EXTEND(ON)
 01 TYPE(DATAOUT)  COLOR(RED)
 02 TYPE(DATAOUT)  COLOR(BLUE)
 03 TYPE(DATAOUT)  COLOR(GREEN)
 04 TYPE(DATAOUT)  COLOR(WHITE)
 $  TYPE(TEXT)     COLOR(YELLOW)
)BODY
%---------------------  EXAMPLE FOR USING A DYNAMIC AREA  --------------
%COMMAND ===>_ZCMD                                            %SCROLL ==
%
+ This area is fixed.   size: &size
+
+ This is an input field%===>_somevar +
+
+This is extendable  @dynarea                     @

       $This should be at the bottom of the screen when in full screen.
)END
*/

ü
