1
-
-
0                                     DYNAM
+                                     _____
-
                           Dynamic Allocation Interface
-
           INTRODUCTION
+          INTRODUCTION
+          ____________
0             DYNAM provides an interface between a high level language
           such as COBOL or PLI, and SVC 99, the system dynamic alloca-
           tion  routine.    It  allows  the  user  to  acquire  system
           resources as the need arises and  free them when they are no
           longer required.  DYNAM  takes  simple parameters consisting
           of character strings and translates them into the text units
           required by  SVC 99.   In addition,   a special  information
           retrieval function can be called to provide all the informa-
           tion available about a particular allocation.  This informa-
           tion is returned in a fixed format data structure.  For more
           information about SVC 99 refer to the IBM manual:
0               OS/VS2 MVS SYSTEM PROGRAMMING LIBRARY: JOB MANAGEMENT
                    GC28-0627-2
-
           WORK AREA
+          WORK AREA
+          ____ ____
0             The first parameter to DYNAM is a workarea.   This worka-
           rea can be supplied  by the user or can be  obtained for the
           user by DYNAM. If obtained by DYNAM it can be used by subse-
           quent calls to DYNAM and freed later, or can be acquired and
           freed on the same call.
0             If the user supplies a work  area,  the first word of the
           work area must contain the length in bytes.
0                (FORTRAN)
                     INTEGER WORK(500)/2000/
                     CALL DYNAM (WORK, . . .)
                 (PLI)
                     DCL 1 WORKAREA,
                       2 WA_LENGTH   FIXED BIN (31) INIT (2000),
                       2 FILLER      CHAR (2000);
                     CALL DYNAM (WORK, . . .)
-
0                                     - 1 -
1
-                (COBOL)
                     01  WORK.
                         02  WORK-LEN  PIC S9(9) COMP SYNC VALUE +2000.
                         02  WORK-AREA PIC X(2000).
                     . . .
                     CALL 'DYNAM' USING WORK . . .
0             If DYNAM is to supply its own work area, this can be done
           explicitly by coding:
0               DCL WORK    FIXED BIN(31) INIT(0);
                CALL DYNAM (WORK, 'INIT')
0             WORK then becomes  a reference to the  acquired work area
           and must  be specified on all  subsequent calls to  DYNAM as
           the first parameter.  The workarea can later be free by cod-
           ing:
0               CALL DYNAM (WORK, 'END')
0             If dynam is to acquire a  workarea to be used only during
           one invocation,  the workarea is implicitly acquired by cod-
           ing:
0               CALL DYNAM (0, . . .)
0             This is  used when the  programmer only wants  to perform
           one dynamic allocation and then continue with his program.
-
           OPERATIONS
+          OPERATIONS
+          __________
0             The second parameter to DYNAM describes the operation you
           wish to perform.    There are two different  types of opera-
           tions:  those  that have to  do with dynamic  allocation and
           those that have to do with the interface itself.
0               Interface Operations
                INIT     - aquire a work area
                END      - free the work area previously acquired by INI
0               Allocation Operations
                ALLOC     - allocate a dataset
                UNALLOC   - unallocate a dataset
                CONCAT    - concatenate 2 or more DD names
                UNCONCAT  - unconcatenate previously concatenated DD nam
                REMOVE    - remove in-use attribute
                DDALLOC   - allocate a DD name
                INFO      - retrieve information about an allocation
-
-                                     - 2 -
1
-          OPERANDS
+          OPERANDS
+          ________
0             The  third  and  subsequent  parameters  supply  operands
           needed to perform dynamic allocation.  Only one operand par-
           ameter is required  but it is sometimes convenient  to use a
           larger number, for example when obtaining allocation parame-
           ters from  a user  at a terminal  in an  interactive manner.
           Normal OS linkage  conventions flag the last  parameter in a
           parameter list so a variable  number of parameters is easily
           allowed if the high level host language supports it. Operand
           parameters must be delimited on the right by a semicolon.
0             Operands consist of a keyword and an optional value.   if
           a value  is present it is  separated from the keyword  by an
           equals (=)  sign.  Operands are separated from each other by
           one of more spaces and an operand string is delimited on the
           right by  a semicolon.    If a  keyword requires  a list  of
           values, the values in the list are separated by a comma.
0             Keywords may be  abbreviated by specifying enough  of the
           keyword so that it is unambiguous.  In cases where an entire
           keyword is  the same as  the first  few letters of  a longer
           keyword, ambiguity is resolved by picking the first keyword.
           In describing  DYNAM keywords below the  unambiguous portion
           of the keyword is written in uppercase.
0             An attempt has  been made to minimize the  number of key-
           words that require values.
-
           ALLOC
+          ALLOC
+          _____
0             This operation is equivalent to dataset allocation during
           job step  initialization;  the  parameter list  to DYNAM  is
           equivalent to a DD statement.   You  can request most of the
           JCL services that you can code on a DD statement.   In addi-
           tion you can  specify dataset passwords which do  not have a
           JCL equivalent.   The following is  a list of JCL parameters
           and the equivalent DYNAM keyword.
0               DD card parameter      DYNAM keyword
+               __ ____ _________      _____ _______
                COPIES=num             COPies=num
                DCB=(*.ddname)         DCBDD=ddname
                DCB=(dsname)           DCBDS=dsname
                DCB=(BLKSIZE=num)      BLKsize=num
                DCB=(BUFALN=key)       BUFAln=key  (key = D×F)
                DCB=(BUFIN=num)        BUFIN=num
                DCB=(BUFL=num)         BUFL=num
                DCB=(BUFMAX=num)       BUFMAX=num
                DCB=(BUFNO=num)        BUFNo=num
                DCB=(BUFOFF=num)       BUFOFf=num
                DCB=(BUFOUT=num)       BUFOUt=num
                DCB=(BUFRQ=num)        BUFRq=num
0                                     - 3 -
1
-               DCB=(BUFSIZE=num)      BUFSize=num
                DCB=(BUFTEK=key)       BUFTEK=key  (key = A×E×R×S)
                DCB=(CODE=key)         CODe=key  (key = A×B×C×F×I×N×T)
                DCB=(DEN=2)            D800
                DCB=(DEN=3)            D1600
                DCB=(DEN=4)            D6250
                DCB=(DIAGNS=TRACE)     TRAce
                DCB=(DSORG=key)        DSORG=key  (key = CX×DA×DAU×GS×
                                                         PO×PS×PSU×TQ×
                                                         TX×TCAM×VSAM)
                DCB=(EROPT=ABE)        ABE
                DCB=(EROPT=ACC)        ACC
                DCB=(EROPT=SKP)        SKp
                DCB=(KEYLEN=num)       KEYlen=num
                DCB=(LIMCT=num)        LImct=num
                DCB=(LRECL=num)        LRecl=num
                DCB=(MODE=key)         MODE=key  (key = C×CO×CR×E×EO×ER)
                DCB=(NCP=num)          NCP=num
                DCB=(OPTCD=key)        OPTCD=key  (see note 1 below)
                DCB=(PRTSP=key)        PRTsp=key  (key = 0×1×2×3)
                DCB=(RECFM=key)        RECFM=key  (see note 2 below)
                DCB=(RECFM=F)          F
                DCB=(RECFM=FA)         FA
                DCB=(RECFM=FAS)        FAS
                DCB=(RECFM=FB)         FB
                DCB=(RECFM=FBA)        FBA
                DCB=(RECFM=FBAS)       FBAS
                DCB=(RECFM=FBM)        FBM
                DCB=(RECFM=FBS)        FBMS
                DCB=(RECFM=FM)         FM
                DCB=(RECFM=FMS)        FMS
                DCB=(RECFM=FS)         FS
                DCB=(RECFM=U)          U
                DCB=(RECFM=V)          V
                DCB=(RECFM=VA)         VA
                DCB=(RECFM=VAS)        VAS
                DCB=(RECFM=VB)         VB
                DCB=(RECFM=VBA)        VBA
                DCB=(RECFM=VBAS)       VBAS
                DCB=(RECFM=VBM)        VBM
                DCB=(RECFM=VBMS)       VBMS
                DCB=(RECFM=VBS)        VBS
                DCB=(RECFM=VM)         VM
                DCB=(RECFM=VMS)        VMS
                DCB=(RECFM=VS)         VS
                DCB=(STACK=num)        STACK=num
                DCB=(TRTCH=key)        TRTch=key  (key = C×E×ET×T)
                DISP=(MOD)             MOD
                DISP=(NEW)             NEW
                DISP=(OLD)             OLD
                DISP=(SHR)             SHr
                DISP=(,CATLG)          CAtlg
                DISP=(,DELETE)         DElete
                DISP=(,KEEP)           KEEp
0                                     - 4 -
1
-               DISP=(,UNCATLG)        UNCatlg
                DISP=(,,CATLG)         CCatlg
                DISP=(,,DELETE)        CDelete
                DISP=(,,KEEP)          CKeep
                DISP=(,,UNCATLG)       CUncatlg
                DSN=...(name)          MEmber=name
                DSN=dsname             DSN=dsname
                DUMMY                  DUMMY
                FCB=(name)             FORms=name
                FCB=(,ALIGN)           ALIgn
                FCB=(,VERIFY)          VERIFYF
                FREE=CLOSE             CLose
                HOLD=YES               Hold
                LABEL=(num)            DSSeq=num
                LABEL=(EXPDT=yyddd)    Expdt=yyddd
                LABEL=(RETPD=num)      RETpd=num
                LABEL=(,AL)            AL
                LABEL=(,AUL)           AUL
                LABEL=(,BLP)           BLP
                LABEL=(,LTM)           LTM
                LABEL=(,NL)            NL
                LABEL=(,NSL)           NSL
                LABEL=(,SL)            SL
                LABEL=(,SUL)           SUL
                LABEL=(,,IN)           Input
                LABEL=(,,NOPWREAD)     PASSWRite
                LABEL=(,,OUT)          OUTput
                LABEL=(,,PASSWORD)     PASSRead
                MSVGP=name             MSVGP=name
                OUTLIM=num             OUTLim=num
                QNAME=name             QNAME=name
                SPACE=(num)            BLOck=num
                SPACE=(CYL)            CYL
                SPACE=(TRK)            TRK
                SPACE=(,(num))         PRIMary=num
                SPACE=(,(,num))        SECondary=num
                SPACE=(,(,,num))       DIRectory=num
                SPACE=(,,RLSE)         RLse
                SPACE=(,,,ALX)         ALX
                SPACE=(,,,CONTIG)      CONtig
                SPACE=(,,,MXIG)        MXIG
                SPACE=(,,,,ROUND)      ROund
                SYSOUT=name            SYSOUt=name
                SYSOUT=(,name)         SYSOUProg=name
                SYSOUT=(,,name)        SYSOUForms=name
                TERM=TS                TErmfile
                UCS=(,FOLD)            FOLdmode
                UCS=(,,VERIFY)         VERIFYC
                UNIT=name              UNIT=name
                UNIT=(,num)            UNITCount=num
                UNIT=(,P)              PARallel
                VOL=(,,num)            VOLSeq=num
                VOL=(,,,num)           VOLCount=num
                VOL=(,,,,REF=name)     VOLRef=name
0                                     - 5 -
1
-               VOL=(,,,,SER=(name))   VOLume=name
                VOL=(PRIVATE)          PRIVate
0               note 1:  For a complete listing of possible values
                for the  OPTCD parameter refer  to the  IBM manual
                OS/VS2 JCL.
0               note 2:  In  addition to the stand  alone keywords
                for Fixed, Undefined,  and Variable record formats
                others may  be coded by  using the  RECFM=key key-
                word.   For  a complete listing  refer to  the IBM
                manual OS/VS2 JCL.
0               Others                 DYNAM keyword
+               ______                 _____ _______
                DDNAME on DD card      DD=name
                PASSWORD               PASSWOrd=password
                /*ROUTE dest           REMOTE=dest
                assign the permanently
                allocated attribute to
                this resource          PERManent
                assign the convertible
                attribute to this
                resource               CONVert
0               note:  For a complete  explaination of the perman-
                ently  allocated  attribute  and  the  convertible
                attribute refer to SPL: JOB MANAGEMENT.
-
           ALLOCR
+          ALLOCR
+          ______
0             This operation is the same  as ALLOC except that informa-
           tion about the  allocation is to be returned  to the caller.
           The  third parameter  to DYNAM  is  a data  area into  which
           information is to be placed.  The fourth and subsequent par-
           ameters are the same as  the third and subsequent parameters
           for the ALLOC operation.
0             The information data area has the following format:
0               DCL 1 RETURN_AREA UNALIGNED,
                  2 DDNAME          CHAR (8),
                  2 DSNAME          CHAR (44),
                  2 DSORG           BIT (16),
                  2 VOLSER          CHAR (6);
0               DDNAME, DSNAME, and VOLSER are self explanatory.
                DSORG is one of:
                    x'0000' - dsorg cannot be determined
                    x'0004' - TR
                    x'0008' - VSAM
                    X'0020' - TQ
                    X'0040' - TX
0                                     - 6 -
1
-                   X'0080' - GS
                    X'0200' - PO
                    X'0300' - POU
                    X'0400' - MQ
                    X'0800' - CQ
                    X'1000' - CX
                    X'2000' - DA
                    X'2100' - DAU
                    X'4000' - PS
                    X'4100' - PSU
                    X'8000' - IS
                    X'8100' - ISU
-
           UNALLOC
+          UNALLOC
+          _______
0             This operation unallocates a dataset  by DD name or data-
           set name.  The following is a list of JCL parameters and the
           equivalent DYNAM keyword.
0               DD card parameter      DYNAM keyword
+               __ ____ _________      _____ _______
                DISP=(,CATLG)          CAtlg
                DISP=(,DELETE)         DElete
                DISP=(,KEEP)           KEEp
                DISP=(,UNCATLG)        UNCatlg
                DSN=...(name)          MEmber=name
                DSN=dsname             DSN=dsname
0               Others                 DYNAM keyword
+               ______                 _____ _______
                DDNAME on DD card      DD=name
                change SYSOUT class    NEWClass=name
                put SYSOUT output
                into the hold queue    NEWHold
                take SYSOUT output
                out of the hold queue  NEWNohold
                change SYSOUT
                routing                NEWRemote=name
                unallocate the
                resource even if
                permanently allocated  UNAlloc
                remove the in-use
                attribute even if
                permanently allocated  REMOVe
-
           CONCAT AND UNCONCAT
+          CONCAT AND UNCONCAT
+          ______ ___ ________
0             These two operations concatenate  and unconcatenate data-
           sets.  The datasets can only be identified by using DD names
           of datasets currently  allocated so therefore the  only key-
           word needed in the third parameter to DYNAM is DD=name.   To
-                                     - 7 -
1
-          concatentate  you  provide   a  list  of  DD   names,   e.g.
           DD=SYSLIB,FILE2,FILE3.   The contenation  is then identified
           by the  first DD name in  the list.   To  unconcatenate just
           provide DD=name.
-
           INFO
+          INFO
+          ____
0             This operation requests information retrieval.  The third
           parameter to  DYNAM is  a data  area into  which information
           will be placed.    The fourth and subsequent  parameters are
           operands that  specify the allocations about  which informa-
           tion is to be retrieved.
0             The information data area has the following format:
0               DCL 1 INFORMATION UNALIGNED,
                  2 DDNAME        CHAR (8),
                  2 DSNAME        CHAR (44),
                  2 MEMBER        CHAR (8),
                  2 STATUS        BIT (8),
                  2 DISP          BIT (8),
                  2 COND_DISP     BIT (8),
                  2 DSORG         BIT (16),
                  2 LIMIT         FIXED BIN (15),
                  2 ATTRIBUTE     BIT (8),
                  2 LAST_ENTRY    BIT (8),
                  2 TYPE          BIT (8);
0               DDNAME DSNAME and MEMBER are self explanatory.  If
                no member is allocated then the contents of MEMBER
                will be unchanged.
                STATUS,  DISP  and COND_DISP are the  same respec-
                tively as those  specified in the DISP  operand in
                JCL.
                STATUS is one of:
                    X'01' - OLD
                    X'02' - MOD
                    X'04' - NEW
                    X'08' - SHR
                DISP is one of:
                    X'01' - UNCATLG
                    X'02' - CATLG
                    X'04' - DELETE
                    X'08' - KEEP
                    X'10' - PASS
                COND_DISP is one of:
                    X'01' - UNCATLG
                    X'02' - CATLG
                    X'04' - DELETE
                    X'08' - KEEP
                DSORG is one of:
                    x'0000' - dsorg cannot be determined
0                                     - 8 -
1
-                   x'0004' - TR
                    x'0008' - VSAM
                    X'0020' - TQ
                    X'0040' - TX
                    X'0080' - GS
                    X'0200' - PO
                    X'0300' - POU
                    X'0400' - MQ
                    X'0800' - CQ
                    X'1000' - CX
                    X'2000' - DA
                    X'2100' - DAU
                    X'4000' - PS
                    X'4100' - PSU
                    X'8000' - IS
                    X'8100' - ISU
                LIMIT is  the number of  allocations that  must be
                freed before a new allocation can be made.
                ATTRIBUTE is one of:
                    X'80' - permanently concatenated attribute
                    X'40' - in-use attribute
                    X'20' - permanently allocated attribute
                    X'10' - convertible attribute
                    X'08' - dynamically allocated attribute
                LAST_ENTRY indicates if this is  the last entry in
                the list of allocations for  this job.  It has the
                values:
                    X'80' - if last entry
                    X'00' - otherwise
                TYPE is one of:
                    X'80' - DUMMY data set
                    X'40' - terminal
                    X'00' - otherwise
0             The following DYNAM keywords are supported:
0               Purpose               DYNAM keyword
+               _______               _____ _______
                select an allocation
                by DD name            DD=name
                select an allocation
                by DSN name           DSN=name
                select an allocation
                by a relative number  RELNO=num
-
           EXCEPTIONAL CONDITIONS
+          EXCEPTIONAL CONDITIONS
+          ___________ __________
0             DYNAM returns a  condition code in registers 15  and 0 as
           well as in  the second word of  the workarea if one  is pro-
           vided.   The  use of register 15  allows a COBOL  program to
           interrogate the return code through the COBOL special regis-
           ter RETURN-CODE and allows the same  for PLI through the use
-                                     - 9 -
1
-          of  the pseudo  function PLIRETV.    The use  of register  0
           allows FORTRAN and  PASCAL to call DYNAM as  a function that
           returns an integer result.  If  the actual allocation fails,
           then messages are written to the job log and the return code
           from SVC 99 is returned to the user.  If DYNAM itself fails,
           then the return code is a DYNAM return code.
0               SVC 99 Return Codes
                  00 successful allocation
                  04 environment, resource, or system routine failure
                  08 request denied by installation validation routine
                  12 invalid SVC 99 parameter list
                DYNAM Return Codes
                  16 invalid verb (parameter 2)
                  20 invalid keyword (parameter 3)
                  24 work area overflow
                  28 invalid value keyword
-
           EXAMPLES
+          EXAMPLES
+          ________
0          1) In PLI allocate a new dataset:
                DCL WORK    FIXED BIN(31) INIT(0);
                DCL PLIRETV BUILTIN;
                DCL DYNAM   ENTRY OPTIONS (ASSEMBLER,RETCODE);
                FETCH DYNAM;
                CALL DYNAM(WORK, 'INIT ');
                CALL DYNAM(WORK, 'ALLOC ', 'DSN=USERID.DATA NEW CATLG;',
                                           'VOL=USER01;',
                                           'TRK PRIMARY=1 SECONDARY=1;',
                                           'LRECL=80 BLKSIZE=6080 FB;')
                IF PLIRETV = 0 THEN
                    code to execute upon success of allocation
                ELSE
                    code to execute upon failure of allocation
0          2) In COBOL allocate an exsisting dataset to ddname SYSIN:
                01  DY-STUFF.
                    02  DY-WORK         PIC S9(9) COMP SYNC VALUE +0.
                    02  DY-WORK         PIC X(5) VALUE 'INIT '.
                    02  DY-ALLOC        PIC X(6) VALUE 'ALLOC '.
                    02  DY-TEXT         PIC X(100).
                    . . .
                PROCEDURE DIVISION.
                    CALL 'DYNAM' USING DY-WORK DY-INIT.
                    . . .
                    MOVE 'DSN=A0011.AA.T999D DD=SYSIN SHR;' TO
                         DY-TEXT.
                    CALL 'DYNAM' USING DY-WORK DY-ALLOC DY-TEXT.
                    IF RETURN-CODE = ZERO THEN
                        whatever
                    ELSE
                        do something to recover gracefully.
0                                     - 10 -
1
-          3) In PLI allocate a concatenation:
                . . .
                CALL DYNAM(WORK, 'INIT ');
                . . .
                CALL DYNAM(WORK, 'ALLOC ', 'DSN=SYS1.USERLINK;',
                                           'DD=SYSLIB SHR;');
                CALL DYNAM(WORK, 'ALLOC ', 'DSN=SYS1.LINKUMW;',
                                           'DD=FILE2 SHR;');
                CALL DYNAM(WORK, 'CONCAT ', 'DD=SYSLIB,FILE2;');
0          4)    Other  sample programs are  available in a  PDS called
           SYS4.DYNAM.SAMPLES.  The programs included are:
0                DYASM    - an assembler program to test DYNAM
                 DYLISTA  - an assembler program to list allocated datas
                 DYCOB    - a cobol program that allocates cobol dataset
                 DYPLI    - a pli program to test DYNAM
                 DYFORT   - a fortran program
-
           LANGAUGE CONSIDERATIONS
+          LANGAUGE CONSIDERATIONS
+          ________ ______________
0             In PLI remember to put in:
                 DCL DYNAM  ENTRY OPTIONS(ASM,RETCODE);
                 FETCH DYNAM;  /* JUST FETCH DYNAM ONCE */
0             In FORTRAN  and PASCAL remember  to link edit  DYNAM into
           the load module you wish to produce.  This is done by adding
           SYS1.LINKUMW to the  SYSLIB datasets at link  edit or loader
           time.
-
-
-
-
-
-
-
-
                                      - 11 -
