         TITLE 'DISCLAIMER - INSTALLATION INSTRUCTIONS'
***********************************************************************
*                                                                     *
*     THIS PROGRAM, DEVELOPED AT FPL OR SUPPLIED BY OTHER USERS       *
*     ON A NON-RESTRICTIVE BASIS, IS OF GENERAL INTEREST              *
*     SUBMITTED FOR UNRESTRICTED DISTRIBUTION.  THIS PROGRAM          *
*     HAS MET A BASIC SET OF PROGRAMMING AND DOCUMENTATION            *
*     STANDARDS, BUT MAY NOT HAVE BEEN PROGRAM TESTED IN ANY          *
*     FORMAL FASHION BY FPL.  THE USER IS EXPECTED TO MAKE THE        *
*     FINAL EVALUATION AS TO THE USEFULLNESS IN HIS OWN               *
*     ENVIRONMENT.                                                    *
*                                                                     *
*     FPL MAKES NO WARRANTY, EXPRESSED OR IMPLIED, INCLUDING, BUT     *
*     NOT LIMITED TO, THE IMPLIED WARRANTIES OR MERCHANTABILITY AND   *
*     FITNESS FOR A PARTICULAR PUTPOSE AS TO THE DOCUMENTATION,       *
*     FUNCTION, OR PERFORMANCE OF THESE PROGRAMS.                     *
*                                                                     *
*     ACCEPTANCE AND USE OF THIS PROGRAM CONSTITUTES A RELEASE        *
*     FROM LIABILITY OF FPL FOR ANY PROBLEMS USE OF THE PROGRAM       *
*     MAY CAUSE AT THE USER'S INSTALLATION.                           *
*                                                                     *
*     USERS ARE INVITED TO SUBMIT SUGGESTIONS OR ERROR DOCUMENTATION  *
*     TO FPL, HOWEVER, NO PROMISE CAN BE MADE THAT SUCH SUGGESTIONS   *
*     WILL BE IMPLEMENTED OR ERRORS CORRECTED.  SUBMIT COMMENTS TO:   *
*              COORDINATOR OF TECHNICAL SYSTEMS                       *
*              SYSTEMS & PROGRAMMING DEPARTMENT                       *
*              FLORIDA POWER & LIGHT COMPANY - GENERAL OFFICE         *
*              P. O. BOX  529100                                      *
*              MIAMI, FLORIDA  33152                                  *
*                                                                     *
*     THIS PROGRAM IS MADE AVAILABLE BY FPL WITHOUT CHARGE OR         *
*     CONSIDERATION.  RECIPIENTS ARE FREE TO MAKE THIS PROGRAM        *
*     AVAILABLE TO OTHERS IN LIKE MANNER.  IT MAY NOT BE SOLD.        *
*                                                                     *
* INSTALLATION INSTRUCTIONS                                           *
*                                                                     *
*     THIS MODULE MAY BE ASSEMBLED AND LINKED INTO A LIBRARY IN THE   *
*     LINK LIST OR SPECIFIED AS A STEPLIB.  APF AUTHORIZATION IS      *
*     NOT REQUIRED.                                                   *
*                                                                     *
*     BEFORE ASSEMBLING THE MODULE, INSURE THAT ALL THE REQUIRED      *
*     MACROS ARE AVAILABLE.  SOME MACROS FROM SYS1.AMODGEN MAY BE     *
*     REQUIRED.  THE $ENTER MACRO USES SYSTEM VARIABLE SYMBOLS        *
*     &SYSDATE AND &SYSTIME.  THESE SYMBOLS ARE NOT SUPPORTED BY ALL  *
*     ASSEMBLERS.  IF THE ASSEMBLER TO BE USED DOES NOT SUPPORT THESE *
*     SYMBOLS, THE $ENTER MACRO MUST BE MODIFIED.                     *
*                                                                     *
***********************************************************************
SS0283   TITLE 'DMPSPOOL - JES2 INPUT JOB SPOOL DUMP PROGRAM'
***********************************************************************
*                                                                     *
* NAME         SS0283 ALIAS DMPSPOOL                                  *
*                                                                     *
* FUNCTION     READ INPUT JOBS FROM SPOOL AND PRODUCE A QSAM DATA     *
*              CONTAINING THE EXTRACTED JCL AND INPUT DATA.           *
*                                                                     *
* DESCRIPTION  THIS PROGRAM IS DESIGNED TO EXTRACT FROM A JES2        *
*              SPOOL DATA SET JOBS WHICH ARE AWAITING EXECUTION.      *
*                                                                     *
*              THIS CAN BE USED WHEN A CATASTROPHIC ERROR REQUIRING   *
*              A COLD START IS NECESSARY, OR WHEN SWITCHING           *
*              OPERATING SYSTEMS.                                     *
*                                                                     *
*              JOBS EXTRACTED FROM THE QUEUE REMAIN IN THE JOB        *
*              QUEUE AND ELIGIBLE FOR EXECUTION.                      *
*                                                                     *
*              THE OUTPUT JOBSTREAM DOES NOT CONTAIN /*PRIORITY       *
*              JES2 CONTROL STATEMENTS.                               *
*                                                                     *
*              ALL DATA IS OBTAINED FROM DISK RESIDENT JES2 CONTROL   *
*              BLOCKS.  THE CHECKPOINT RECORD IS READ AND THE         *
*              JOB QUEUE ELEMESTS (JQE'S) ARE SCANNED TO LOCATE       *
*              JOBS AWAITING EXECUTION.                               *
*                                                                     *
*              THE JQE IS USED TO LOCATE THE JOB CONTROL TABLE        *
*              (JCT) IN THE SPOOL DATA SET.  THE NAME OF THE          *
*              READER IS OBTAINED FROM THE JCT.                       *
*                                                                     *
*              THE JCT IS USED TO LOCATE THE INPUT/OUTPUT TABLE       *
*              (IOT) IN THE SPOOL DATA SET.  THE IOT CONTAINS         *
*              A PERIPHERAL DATA DESCRIPTION BLOCK (PDDB) FOR THE     *
*              INPUT JCL.  SPOOL RECORDS CONTAINING COMPRESSED        *
*              JCL STATEMENTS ARE READ, THE JCL EXPANDED AND PUT      *
*              TO THE OUTPUT DATA SET.  JES2 CONTROL CARDS HAVE       *
*              BEEN CONVERTED BY JES2 TO COMMENT CARDS BY ADDING      *
*              AN INITIAL SLASH.  THE SLASH IS REMOVED BEFORE THE     *
*              RECORD IS WRITTEN TO THE OUTPUT DATA SET.              *
*                                                                     *
*              AN INSTREAM DATA SET (DD *  OR  DD DATA) IS INDICATED  *
*              BY A CONTROL RECORD.  WHEN THIS RECORD IS ENCOUNTERED, *
*              DATA BLOCKS CONTAINING COMPRESSED DATA RECORDS ARE     *
*              READ, THE DATA RECORDS EXPANDED AND WRITTEN.  AFTER    *
*              THE INSTREAM DATA SET HAS BEEN PROCESSED, THE          *
*              REMAINING JCL IS PROCESSED.                            *
*                                                                     *
*              IF AN ERROR IS ENCOUNTERED WHILE PROCESSING A JOB,     *
*              AN ERROR MESSAE IS GENERATED WITH THE SYSOUT DATA      *
*              AND THE JOB IS DELETED.  THE JOB IS DELETED BY         *
*              PLACING A /*DEL STATEMENT INTO THE OUTPUT DATA         *
*              SET SO THE INTERNAL READER WILL DELETE THE JOB         *
*              WHEN IT IS RE-SUBMITTED.  IF NO RECORDS WERE           *
*              GENERATED FOR THE JOB, THE /*DEL STATEMENT IS          *
*              NOT GENERATED.                                         *
*                                                                     *
*              A WTO MESSAGE IS GENERATED FOR EACH DELETED JOB        *
*              AND THE TOTALS MESSAGE.  IF THE MESSAGES ARE TO        *
*              BE SUPPRESSED (FOR TESTING), SPECIFY PARM=NOWTO        *
*              ON THE EXEC STATEMENT.                                 *
*                                                                     *
* ENVIRONMENT  OS/VS2 RELEASE 3.7                                     *
*              JES2 VERSION 4.0, VERSION 4.1                          *
*                                                                     *
* DDNAMES      CHKPT      DEFINES THE JES2 CHECKPOINT DATA SET.       *
*                                                                     *
*              HASPACE    DEFINES THE FIRST EXTENT OF SPOOL SPACE.    *
*                                                                     *
*              HASPACE2   DEFINES THE SECOND EXTENT OF SPOOL SPACE.   *
*                                                                     *
*              SYSLIST    DEFINES THE OUTPUT LISTING DATA SET.        *
*                         THE JOB CARD FOR EACH EXTRACTED JOB         *
*                         WILL BE PRINTED.                            *
*                                                                     *
*              OUTPUT     DEFINES A SEQUENTIAL DATA SET TO CONTAIN    *
*                         THE EXTRACTED JCL AND DATA.                 *
*                                                                     *
*              SNAPDUMP   DEFINES A DATA SET TO CONTAIN SNAP DUMPS    *
*                         IF ERRORS ARE ENCOUNTERED.                  *
*                                                                     *
* SAMPLE JCL   //JESQ   EXEC  PGM=DMPSPOOL                            *
*              //CHKPT    DD  DISP=SHR,DSNAME=SYS1.HASPCKPT,          *
*              //             UNIT=SYSDA,VOL=SER=SPOOL1               *
*              //HASPACE  DD  DISP=SHR,DSNAME=SYS1.HASPACE,           *
*              //             UNIT=SYSDA,VOL=SER=SPOOL1               *
*              //HASPACE2 DD  DISP=SHR,DSNAME=SYS1.HASPACE,           *
*              //             UNIT=SYSDA,VOL=SER=SPOOL2               *
*              //OUTPUT   DD  DISP=(NEW,KEEP),DSNAME=JES2QUE,         *
*              //             UNIT=TAPE,LABEL=(1,SL),                 *
*              //             DCB=BLKSIZE=8000                        *
*              //SYSLIST  DD  SYSOUT=*                                *
*              //SNAPDUMP DD  SYSOUT=*                                *
*                                                                     *
* MISCELLANEOUS                                                       *
*              THIS PROGRAM WAS OBTAINED FROM PAUL ENGELS AT          *
*              PRATT & WHITNEY                                        *
*                                                                     *
* DEPENDENCIES THIS PROGRAM IS HIGHLY DEPENDENT ON JES2 CONTROL       *
*              BLOCKS, THE DEVICE TYPE ON WHICH THE SPOOL DATA        *
*              SET IS LOCATED, AND THE VALUES IN JES2PARM.            *
*                                                                     *
*              DEPENDENT DATA IS DEFINED IN ONE AREA OF THE PROGRAM.  *
*              WHEN ANY OF THIS DATA IS CHANGED, THE PROGRAM MUST     *
*              BE REASSEMBLED.                                        *
*                                                                     *
* FPL MACROS USED                                                     *
*                                                                     *
*              $ENTER      ENTRY LINKAGE                              *
*              $RTRN       RETURN LINKAGE                             *
*                                                                     *
* IBM MACROS USED                                                     *
*                                                                     *
*              OPEN                                                   *
*              CLOSE                                                  *
*              DCB                                                    *
*              PUT                                                    *
*              EXCP                                                   *
*              WAIT                                                   *
*              GETMAIN                                                *
*              FREEMAIN                                               *
*              SNAP                                                   *
*              WTO                                                    *
*                                                                     *
* JES2 MACROS USED                                                    *
*                                                                     *
*              $JQE                                                   *
*              $JCT                                                   *
*              $SCR                                                   *
*                                                                     *
*                                                                     *
***********************************************************************
         TITLE 'UPDATE LOG'
***********************************************************************
*                                                                     *
* 08/01/77  UPDATE FOR 3350 SPOOL VOLUME                              *
*           CORRECT ERROR IN PDDBOFF EXPRESSION                       *
*                                                                     *
* 11/02/77  WHEN AN ERROR OCCURS DURING PROCESSING, TAKE A SNAP       *
*                DUMP, DELETE THE JOB, AND PROCEED TO NEXT JOB        *
*           ADD WTO'S TO OPERATOR AND PERMIT NOWTO PARM               *
*           ELIMINATE NEED TO HARD CODE CCHHR OF CHECKPOINT DATA SET  *
*                                                                     *
* 06/12/78  CHANGE NAME TO CONFORM TO FPL NAMING STANDARDS.           *
*           UPDATE DEPENDENT DATA FOR JES2 VERSION 4.1.               *
*                                                                     *
***********************************************************************
         TITLE 'DEPENDENT DATA'
         LCLC  &CKPTTTR
         LCLA  &BUFSIZE,&NUMDA,&NUMTGV
&BUFSIZE SETA  4008                    FROM JES2PARM
&NUMDA   SETA  2                       FROM JES2PARM
&NUMTGV  SETA  2081                    FROM JES2PARM
         SPACE
BUFDSECT EQU   0
BUFSTART EQU   X'58'                   LENGTH OF BUFFER HEADER
IOTTGMAP EQU   X'98'                   FROM $IOT
PDDBOFF  EQU   IOTTGMAP-BUFSTART+&NUMDA*((((&NUMTGV+7)/8+1)/2)*2)+8
*                                      JCL PDDB FOLLOWS TRACK MAP
QUESIZE  EQU   X'2EB4'                 FROM IEHDASDR DUMP OF CHECKPT
FIRSTJQE EQU   X'02E4'                 FROM IEHDASDR DUMP OF CHECKPT
TRKSCYL  EQU   30                      TRKS/CYL OF SPOOL DEVICE
MAXR     EQU   4                       SPOOL RECORDS PER TRACK
JCT      EQU   1                       KEEP $JCT MACRO HAPPY
CVTPCNVT EQU   28                      FROM CVT MACRO
*
*
*
         PUNCH '  ALIAS DMPSPOOL'
         TITLE 'ENTRY LINKAGE'
S0283    $ENTER BASE=R8,SAVE=SAVEAREA
         L     R2,0(R1)                LOAD PARM FIELD ADDRESS
         CLC   =H'5',0(R2)             CHECK LENGTH
         BNE   OPEN
         CLC   =C'NOWTO',2(R2)         CHECK VALUE
         BNE   OPEN
         OI    FLAGS,$NOWTO            SET INDICATOR
         TITLE 'OPEN FILES'
***********************************************************************
*                                                                     *
*        OPEN FILES                                                   *
*                                                                     *
***********************************************************************
         SPACE
OPEN     OPEN  (SYSLIST,OUTPUT,        OPEN OUTPUT DATA SET            +
               OUTPUT,OUTPUT,          OPEN PRINT DATA SET             +
               CHKPT,INPUT,            OPEN SYS1.HASPCKPT              +
               HASPACE,INPUT,          OPEN SPOOL DATA SET             +
               HASPACE2,INPUT,         OPEN SECOND SPOOL DATA SET      +
               SNAPDUMP,OUTPUT)        OPEN SNAP DUMP DATA SET
         L     R3,HASPACE+44           DEB ADDR
         ST    R3,SPOOLDEB             SAVE IT
         TITLE 'OBTAIN STORAGE'
***********************************************************************
*                                                                     *
*        OBTAIN WORKING STORAGE                                       *
*                                                                     *
***********************************************************************
         GETMAIN R,LV=16384            GET 16K FOR CHECKPOINT RECORD
         STCM  R1,7,RJQDATA+1          STORE ADDRESS IN CHANNEL PGM
         LA    R0,FIRSTJQE(R1)         LOAD ADDRESS OF FIRST JQE
         ST    R0,QCURRENT             INITIALIZE JQE POINTER
         ST    R1,CHKPTBGN             SAVE START ADDRESS
         A     R1,=A(QUESIZE)          CALCULATE END OF CHECKPT REC
         ST    R1,CHKPTEND             SAVE END ADDRESS
         SPACE 2
         GETMAIN R,LV=16384            GET 4 4K BLOCKS
         LA    R1,0(R1)                MAKE SURE HIGH BYTE = 00
         ST    R1,JCTBEGIN             FIRST 4K BLOCK FOR JCT
         LA    R1,4095(R1)                END OF BLOCK ADDRESS
         ST    R1,JCTEND2                 STORE IN SNAP LIST
         LA    R1,1(R1)                   NEXT BLOCK
         ST    R1,IOTBEGIN             NEXT 4K BLOCK FOR IOT
         LA    R1,4095(R1)                END OF BLOCK ADDRESS
         ST    R1,IOTEND                  STORE IN SNAP LIST
         LA    R1,1(R1)                   NEXT BLOCK
         ST    R1,JCLBEGIN             NEXT 4K BLOCK FOR JCL RECORDS
         LA    R1,4095(R1)                END OF BLOCK ADDRESS
         ST    R1,JCLEND                  STORE IN SNAP LIST
         LA    R1,1(R1)                   NEXT BLOCK
         ST    R1,DATAREC              NEXT 4K BLOCK FOR DATA RECORDS
         LA    R1,4095(R1)                END OF BLOCK ADDRESS
         ST    R1,DATAEND                 STORE IN SNAP LIST
         LA    R1,1(R1)                   NEXT BLOCK
         MVI   ENDLIST,X'80'           END OF LIST INDICATOR
         TITLE 'READ CHECKPOINT RECORD'
***********************************************************************
*                                                                     *
*        READ CHECKPOINT RECORD                                       *
*                                                                     *
***********************************************************************
         SPACE 2
         L     R0,=X'00000100'         TTRN OF JQE RECORD
         L     R1,CHKPT+44             LOAD DEB ADDRESS
         LA    R2,QLOCREC1             ADDRESS TO RECEIVE MBBCCHHR
         L     R14,16                  LOAD CVT ADDRESS
         L     R15,CVTPCNVT(R14)       LOAD ADDRESS OF CONVERSION SR
         STM   R9,R13,SAVEAREA+12      SAVE REGISTERS
         BALR  R14,R15                 CONVERT TTRN TO MBBCCHHR
         LM    R9,R13,SAVEAREA+12      RESTORE REGISTERS
         MVC   IOBSEEK(8),QLOCREC1     JOB Q DISK ADDR INTO IOB
         LA    R1,CHKPT                DCB PTR FOR CHKPT DATA SET
         ST    R1,IOBDCBPT             STORE IN IOB
         LA    R2,READJOBQ             CCW FOR READ
         STCM  R2,7,IOBSTART           STORE IN IOB
         SPACE 2
         EXCP  SPOOLIOB                START READ
         SPACE 2
         WAIT  ECB=SPOOLECB            WAIT FOR COMPLETE
         SPACE 2
BKPT1    CLI   SPOOLECB,X'7F'          TEST FOR ERROR
         BNE   BADJQREC
         LA    R1,HASPACE              DCB PTR FOR SPOOL SPACE
         ST    R1,IOBDCBPT             STORE IN IOB
         LA    R12,1                   INITIALIZE SNAP ID
         CVD   R12,WORK                CONVERT TO EBCDIC
         UNPK  SNAPID,WORK+6(2)
         OI    SNAPID+2,X'F0'          SET ZONE
         TITLE 'FIND A JOB ON THE INPUT QUEUE'
***********************************************************************
*                                                                     *
*        FIND A JOB ON THE INPUT QUEUE                                *
*                                                                     *
***********************************************************************
         SPACE
NEXTNTRY L     R3,QCURRENT             CURRENT JOB Q ELEMENT (JQE)
         USING JQEDSECT,R3             JQE ADDRESSABILITY
         TM    JQEFLAGS,QUEBUSY        ELIMINATE EXECUTING TASKS
         BNZ   ENDJOB
         CLI   JQETYPE,C'A'-X'80'      ELIMINATE JOBS ON PURGE OR OUTPT
         BL    ENDJOB
         MVC   JOBNAME,JQEJNAME        SAVE JOBNAME FOR MESSAGES
         LH    R1,JQEJOBNO             LOAD JOB NUMBER
         CVD   R1,WORK
         UNPK  WORK(5),WORK+5(3)
         OI    WORK+4,X'F0'
         MVC   JOBNO,WORK+1            SAVE JOB NUMBER FOR MESSAGES
         AP    EXTRACTD,=P'1'          COUNT THIS JOB
         NI    FLAGS,X'FF'-$PUNCHED    CLEAR PUNCHED INDICATOR
         TITLE 'READ JCT (JOB CONTROL TABLE)'
***********************************************************************
*                                                                     *
*        READ JCT (JOB CONTROL TABLE) AND IOT                         *
*                                                                     *
***********************************************************************
         SPACE
GETAJCT  L     R1,JQETRAK              MTTR OF JCT
         SPACE 3
         BAL   R6,TTRCNVRT             GO CONVERT TTR TO MBBCCHHR
         MVC   TYPE,=C'JCT '           TYPE OF RECORD BEING READ
         L     R1,JCTBEGIN             LOAD ADDRESS OF INPUT AREA
         BAL   R7,SPOOLIO              GO READ RECORD FROM SPOOL
         SPACE 3
         L     R3,JCTBEGIN             GET ADDR OF THIS REC
         USING JCTSTART,R3             JCT ADDRESSABILITY
         MVC   READER(8),JCTINDEV      NAME OF INPUT READER
         OI    FLAGS,$SWITCH           SWITCH ON TO PRINT JOB CARD
         L     R1,JCTIOT               MTTR OF JCTIOTTR
         DROP  R3
         SPACE 3
         BAL   R6,TTRCNVRT             GO CONVERT TTR TO MBBCCHHR
         MVC   TYPE,=C'IOT '           TYPE OF RECORD BEING READ
         L     R1,IOTBEGIN             LOAD ADDRESS OF INPUT AREA
         BAL   R7,SPOOLIO              GO READ RECORD FROM SPOOL
         SPACE 3
         L     R3,IOTBEGIN             GET ADDR OF IOT
         ICM   R1,15,PDDBOFF+4(R3)     PDBMTTR FOR INPUT JCL
         TITLE 'READ JCL RECORD FROM SPOOL'
***********************************************************************
*                                                                     *
*        READ JCL RECORD FROM SPOOL                                   *
*                                                                     *
***********************************************************************
         SPACE
JCL      BAL   R6,TTRCNVRT             CONVERT TTR TO MBBCCHHR
         MVC   TYPE,=C'JCL '           TYPE OF RECORD BEING READ
         L     R1,JCLBEGIN             ADDRESS OF INPUT AREA
         BAL   R7,SPOOLIO              GO READ RECORD FROM SPOOL
         SPACE 2
         L     R3,JCLBEGIN             START OF BUFFER
         LA    R4,10(R3)               FIRST LRECL IN BUFFER
         USING SCRDSECT,R4             CONTROL RECORD DSECT
JCLA     EQU   *
         CLI   SCRTLENG,X'FF'          CHECK FOR END OF SPOOL RECORD
         BE    JCLC
         CLI   1(R4),X'FF'
         BE    JCLC
         LA    R2,SCRTEXT              POINT TO DATA
         TM    FLAGS,$SWITCH           SEE IF FIRST CARD
         BZ    CHECKCTL
*--------PRINT FIRST CARD OF EACH JOB
         NI    FLAGS,X'FF'-$SWITCH     TURN OFF SWITCH
         BAL   R11,JCLPUT              PUNCH A CARD
         PUT   SYSLIST,LIST            PRINT THE RECORD
         B     JCLB
         SPACE 2
*--------CHECK FOR DD *
CHECKCTL CLC   SCRTLENG(3),CNTRLREC    CORRECT LENGTH TO BE CONTROL REC
         BNE   JCLAAA
         CLC   SCRITERM(2),CNTRLEND    CONTROL RECORD END IDENTIFIER
         BNE   JCLAAA
         ICM   R1,15,SCRIMTTR          LOAD MTTR OF DATA
         ST    R4,LJCLSAVE             SAVE ADDRESS OF LAST JCL RECORD
         B     CARDIN+4
         SPACE 3
*--------OUTPUT JCL RECORD
JCLAAA   EQU   *
         TM    1(R4),X'08'             TEST FOR NULL INPUT RECORD
         BO    JCLB
         BAL   R11,JCLPUT              PUT JCL RECORD
         SPACE 2
JCLB     EQU   *
         SR    R15,R15                 CLEAR
         IC    R15,SCRTLENG            LENGTH OF JCL IMAGE
         LA    R4,3(R15,R4)            PUT TO NEXT RECORD
         B     JCLA
         SPACE 2
JCLC     EQU   *
         L     R1,0(R3)                MTTR OF NEXT SPOOL RECORD
         LTR   R1,R1                   TEST FOR EXISTANCE
         BZ    ENDEND
         B     JCL
         SPACE 3
         DROP  R4
         TITLE 'DD *   PROCESSING'
***********************************************************************
*                                                                     *
*        DD  *    PROCESSING                                          *
*                                                                     *
***********************************************************************
         SPACE
CARDIN   L     R1,2(R4)                TTR OF DATA
         OI    FLAGS,$INSTREM          INDICATE INSTREAM PROCESSING
         BAL   R6,TTRCNVRT             CONVERT TTR TO MBBCCHHR
         MVC   TYPE,=C'DATA'           TYPE OF RECORD BEING READ
         L     R1,DATAREC              ADDRESS OF INPUT AREA
         BAL   R7,SPOOLIO              READ DATA RECORD
         L     R10,DATAREC             START OF BUFFER FOR DATA
         LA    R9,10(R10)              1ST LRECL IN BUFFER
         SPACE 2
CARDINA  EQU   *
         CLI   0(R9),X'FF'             END OF DATA
         BE    CARDINB
         LA    R2,3(R9)                CARD RECORD
         LR    R4,R9                   CONTROL CHARACTERS FOR JCLPUT
         BAL   R11,JCLPUT              GO PUT A CARD
         SR    R1,R1                   CLEAR
         IC    R1,0(R9)                LENGTH OF LRECL
         LA    R9,3(R1,R9)             POINT TO NEXT LRECL
         B     CARDINA
         SPACE 2
CARDINB  EQU   *
         L     R10,DATAREC             START OF BUFFER FOR DATA
         L     R1,0(R10)               NEXT MTTR
         LTR   R1,R1                   TEST FOR EXISTANCE
         BNZ   CARDIN+4                READ ANOTHER BUFFER
         L     R4,LJCLSAVE             RESTORE ADDR OF LAST JCL REC
         NI    FLAGS,X'FF'-$INSTREM    INSTREAM PROCESSING COMPLETE
         B     JCLB                    GO BACK TO THE JCL FILE
         TITLE 'PUT A JCL OR DATA RECORD'
***********************************************************************
*                                                                     *
*        PUT A JCL RECORD OR DATA RECORD                              *
*                                                                     *
*        R2 - ADDRESS OF RECORD                                       *
*        R4 - ADDRESS OF RECORD LENGTH   (1 BYTE)                     *
*                                                                     *
***********************************************************************
JCLPUT   EQU   *
         LR    R10,R4                  SAVE LOCATION OF THIS RECORD
         SR    R1,R1                   CLEAR
         IC    R1,0(R4)                LENGTH OF JCL IMAGE
BKPT2    LTR   R1,R1                   CHECK FOR DATA LINE OF 0 BYTES
         BZ    RECLEN0
         BCTR  R1,0                    MINUS 1 FOR EX
         MVC   CARD,BLANKS             CLEAR RECORD
         EX    R1,JCLMOVE              COPY DATA
         TM    FLAGS,$INSTREM          TEST FOR INSTREAM PROCESSING
         BO    PUTCARD
*--------RESTORE JES2 CONTROL CARDS
         CLC   =C'//*JOBPARM ',CARD
         BE    SHIFT
         CLC   =C'//*SETUP ',CARD
         BE    SHIFT
         CLC   =C'//*OUTPUT ',CARD
         BE    SHIFT
         CLC   =C'//*MESSAGE ',CARD
         BE    SHIFT
         CLC   =C'//*ROUTE ',CARD
         BNE   PUTCARD
SHIFT    MVC   CARD,CARD+1             SHIFT OUT INITIAL SLASH
PUTCARD  PUT   OUTPUT,CARD             PUT RECORD
         OI    FLAGS,$PUNCHED          INDICATE A CARD PUNCHED
         BR    R11                     RETURN
         SPACE 1
JCLMOVE  MVC   CARD(1),0(R2)           JCL RECORD TO PUT BUFFER
         TITLE 'END OF A JOB'
***********************************************************************
*                                                                     *
*        END OF A JOB                                                 *
*                                                                     *
***********************************************************************
ENDEND   EQU   *
         PUT   OUTPUT,SLASHER          PUT // RECORD
         SPACE 2
ENDJOB   EQU   *
         L     R3,QCURRENT             THIS JOBQUE ENTRY
         LA    R3,JQELNGTH(R3)         INCREMENT TO NEXT JQE
         ST    R3,QCURRENT             STORE NEW JQE ADDRESS
         C     R3,CHKPTEND             TEST FOR END OF RECORD
         BL    NEXTNTRY                GO BACK FOR MORE
         UNPK  WORK(5),EXTRACTD
         OI    WORK+4,X'F0'
         MVC   ETOTAL,WORK+1
         UNPK  WORK(5),DELETED
         OI    WORK+4,X'F0'
         MVC   DTOTAL,WORK+1
         LA    R2,ENDRUN
PUTEND   PUT   SYSLIST,(R2)            PUT MESSAGE
         TM    FLAGS,$NOWTO            TEST WTO FLAG
         BO    CLOSE
         MVC   WTO+4(124),1(R2)        COPY MESSAGE INTO WTO
         WTO   MF=(E,WTO)              DISPLAY MESSAGE
CLOSE    L     R1,CHKPTBGN             LOAD AREA ADDRESS
         FREEMAIN R,LV=16384,A=(1)     FREE IT
         L     R1,JCTBEGIN             LOAD AREA ADDRESS
         FREEMAIN R,LV=16384,A=(1)     FREE IT
         CLOSE (SYSLIST,,OUTPUT,,CHKPT,,HASPACE,,HASPACE2,,SNAPDUMP)
         $RTRN RC=0                    RETURN
         TITLE 'READ RECORD FROM SPOOL'
***********************************************************************
*                                                                     *
*        READ RECORD FROM SPOOL                                       *
*                                                                     *
***********************************************************************
         SPACE
SPOOLIO  STCM  R1,B'0111',SPOOLRD+1    STORE INPUT ADDR IN CP
         SR    R0,R0                   0
         ST    R0,SPOOLECB             ECB
         LA    R4,SPOOLREC
         STCM  R4,7,IOBSTART           CP ADDR IN IOB
         SPACE 2
         LA    R15,HASPACE
         CLI   MSPOOL,X'00'            IN FIRST EXTENT = SPOOL1
         BE    *+8
         LA    R15,HASPACE2            DCB ADDRESS FOR SPOOL2
         ST    R15,IOBDCBPT            DCB IN IOB FOR EXCP
         SPACE 2
         EXCP  SPOOLIOB                START READ
         SPACE 2
         WAIT  ECB=SPOOLECB            WAIT FOR COMPLETION
BKPT3    CLI   SPOOLECB,X'7F'          TEST FOR ERROR
         BNE   IOERROR
         BR    R7                      RETURN
         TITLE 'CONVERT MTTR TO MBBCCHHR'
***********************************************************************
*                                                                     *
*        CONVERT TTR TO MBBCCHHR                                      *
*                                                                     *
*        R1 - MTTR                                                    *
*             M   -  EXTENT NUMBER                                    *
*             TT  -  RELATIVE TRACK                                   *
*             R   -  RECORD NUMBER                                    *
*                                                                     *
*        MBBCCHHR TO IOB SEEK ADDRESS                                 *
*                                                                     *
***********************************************************************
TTRCNVRT EQU   *
         SR    R0,R0                   CLEAR 0
         ST    R1,LASTTTR              SAVE LAST TRR FOR DEBUGGING
         LA    R2,TRKSCYL              TRACKS/CYL OF SPOOL DEVICE
         SPACE 1
         CLM   R1,1,=AL1(MAXR)         CHECK AGAINST MAX RECORD
BKPT4    BH    BADTTR
         SPACE 1
         STCM  R1,8,MSPOOL             SAVE SPOOL EXTENT
         ICM   R1,8,HEXZERO            ZERO THE EXTENT NUMBER
         STC   R1,IOBSEEK+7            RECORD NUMBER IN IOBSEEK
         SRL   R1,8                    SHIFT TO TT
         DR    R0,R2
         STCM  R0,3,IOBSEEK+5          TRACK NUMBER
         STCM  R1,3,IOBSEEK+3          CYL NUMBER
         BR    R6                      RETURN
         SPACE
LASTTTR  DC    F'0'
MSPOOL   DC    X'00'
HEXZERO  DC    X'00'
         TITLE 'ERRORS'
***********************************************************************
*                                                                     *
*        ERRORS                                                       *
*                                                                     *
***********************************************************************
         SPACE
*--------ERROR READING JQE RECORD
BADJQREC UNPK  WORK(9),SPOOLECB(5)     CONVERT ECB TO EBCDIC
         TR    WORK,TRTABLE
         MVC   JQECB,WORK
         LA    R2,BADJQMSG             LOAD MESSAGE ADDRESS
         B     PUTEND
         SPACE
*--------RECORD WITH ZERO LENGTH FOUND
RECLEN0  MVC   REC0TYPE,TYPE           MOVE IN JCL/DATA
         MVC   REC0JOB,JOBNAME         MOVE IN JOB NAME
         MVC   REC0NO,JOBNO            MOVE IN JOB NUMBER
         UNPK  WORK(9),LASTTTR(5)      CONVERT MTTR TO EBCDIC
         TR    WORK,TRTABLE
         MVC   REC0TTR,WORK
         MVC   REC0ID,SNAPID           MOVE SNAP ID INTO MESSAGE
         LA    R2,REC0MSG              LOAD MESSAGE ADDRESS
         B     DELJOB
         SPACE
*--------I/O ERROR PROCESSING SPOOL DATA SET
IOERROR  MVC   IOTYPE,TYPE             MOVE TYPE TO MESSAGE
         MVC   IOJOBNM,JOBNAME         MOVE JOB NAME TO MESSAGE
         MVC   IOJOBNO,JOBNO           MOVE JOB NUMBER TO MESSAGE
         UNPK  WORK(9),SPOOLECB(5)     CONVERT ECB TO EBCDIC
         TR    WORK,TRTABLE
         MVC   IOECB,WORK
         UNPK  WORK(9),LASTTTR(5)      CONVERT TTR TO EBCDIC
         TR    WORK,TRTABLE
         MVC   IOTTR,WORK
         MVC   IOID,SNAPID             COPY SNAP ID
         LA    R2,IOERRMSG             LOAD MESSAGE ADDRESS
         B     DELJOB
         SPACE
*--------BAD TTR ENCOUNTERED
BADTTR   MVC   TTRJOBNM,JOBNAME        MOVE JOBNAME INTO MESSAGE
         MVC   TTRJOBNO,JOBNO          MOVE JOB NUMBER INTO MESSAGE
         UNPK  WORK(9),LASTTTR(5)      CONVERT TTR TO EBCDIC
         TR    WORK,TRTABLE
         MVC   TTRTTR,WORK
         MVC   TTRID,SNAPID            COPY SNAP ID
         LA    R2,TTRMSG               LOAD MESSAGE ADDRESS
         SPACE
*--------DELETE THE JOB AND PROCESS NEXT JOB
DELJOB   PUT   SYSLIST,(R2)            PUT MESSAGE
         TM    FLAGS,$NOWTO            TEST FOR WTO
         BO    DELJOB1
         MVC   WTO+4(124),1(R2)        COPY MESSAGE INTO WTO
         WTO   MF=(E,WTO)              WRITE MESSAGE
DELJOB1  SNAP  DCB=SNAPDUMP,           TAKE DUMP FOR DEBUGGING LATER   +
               PDATA=REGS,                                             +
               ID=(R12),                                               +
               LIST=SNAPLIST,                                          +
               STRHDR=HDRLIST          REMOVE THIS OPERAND IF NO SU 33
         LA    R12,1(R12)              INCREMENT ID
         CVD   R12,WORK                CONVERT TO EBCDIC
         UNPK  SNAPID,WORK+6(2)
         OI    SNAPID+2,X'F0'          SET ZONE
         SPACE
         TM    FLAGS,$PUNCHED          SEE IF ANY OUTPUT GENERATED
         BZ    DELJOB2
         PUT   OUTPUT,DELETE           PUT /*DEL RECORD
DELJOB2  SP    EXTRACTD,=P'1'          DECREMENT EXTRACTED COUNT
         AP    DELETED,=P'1'           INCREMENT DELETED COUNT
         B     ENDJOB                  GO TO NEXT JOB
         TITLE 'DATA AREAS'
***********************************************************************
*                                                                     *
*        DATA AREAS                                                   *
*                                                                     *
***********************************************************************
         SPACE
         LTORG
         SPACE 3
SAVEAREA DS    18F
LJCLSAVE DC    F'0'
SPOOLDEB DC    F'0'
QCURRENT DC    F'0'
TYPE     DC    CL4' '
EXTRACTD DC    PL3'0'                  EXTRACTED JOB COUNT
DELETED  DC    PL3'0'                  DELETED JOB COUNT
         DS    D                       ALIGNMENT
WORK     DS    CL9                     BINARY TO EBCDIC WORK AREA
JOBNAME  DC    CL8' '                  JOB NAME
JOBNO    DC    CL4' '                  JOB NUMBER
***********************************************************************
*                                                                     *
*        SNAP DUMP PARAMETERS - SU 33 REQUIRED FOR DUMP HEADERS       *
*                                                                     *
***********************************************************************
SNAPID   DC    CL3' '                  SNAP DUMP IDENTIFIER
SNAPLIST DS    0F                      ALIGNMENT
CHKPTBGN DS    A                       CHECKPOINT RECORD LIMITS
CHKPTEND DS    A
JCTBEGIN DS    A                       JCT
JCTEND2  DS    A
IOTBEGIN DS    A                       IOT
IOTEND   DS    A
JCLBEGIN DS    A                       JCL
JCLEND   DS    A
DATAREC  DS    A                       DATA
DATAEND  DS    A
ENDLIST  EQU   *-4                     END OF LIST INDICATOR
         SPACE
HDRLIST  DC    A(CHKPTHDR)
         DC    A(JCTHDR)
         DC    A(IOTHDR)
         DC    A(JCLHDR)
         DC    X'80',AL3(DATAHDR)
         SPACE
CHKPTHDR DC    FL1'24',CL24'CHECKPOINT RECORD'
JCTHDR   DC    FL1'24',CL24'JOB CONTROL TABLE RECORD'
IOTHDR   DC    FL1'24',CL24'I/O TABLE RECORD'
JCLHDR   DC    FL1'24',CL24'JCL RECORD'
DATAHDR  DC    FL1'24',CL24'INPUT STREAM DATA RECORD'
         EJECT
TRTABLE  EQU   *-C'0'
         DC    C'0123456789ABCDEF'
QLOCREC1 DC    XL8'00'                 MBBCCHHR OF JQE RECORD
         SPACE 3
BLANKS   DC    80C' '
SLASHER  DC    CL80'//'
DELETE   DC    CL80'/*DEL'
IOERRMSG DC    CL133' '
         ORG   IOERRMSG
         DC    C' ***** DMPSPOOL - ERROR PROCESSING '
IOTYPE   DC    C'____'
         DC    C' FOR JOB '
IOJOBNM  DC    C'________'
         DC    C'('
IOJOBNO  DC    C'____'
         DC    C') AT MTTR '
IOTTR    DC    C'________'
         DC    C', ECB=X'''
IOECB    DC    C'________'
         DC    C'''. JOB DELETED.'
         ORG   IOERRMSG+111
         DC    C'SNAP ID = '
IOID     DC    C'___'
         ORG
         SPACE
TTRMSG   DC    CL133' '
         ORG   TTRMSG
         DC    C' ***** DMPSPOOL - BAD TTR ('
TTRTTR   DC    C'________'
         DC    C') PROCESSING JOB '
TTRJOBNM DC    C'________'
         DC    C'('
TTRJOBNO DC    C'____'
         DC    C').  JOB DELETED.'
         ORG   TTRMSG+111
         DC    C'SNAP ID = '
TTRID    DC    C'___'
         ORG
REC0MSG  DC    CL133' '
         ORG   REC0MSG
         DC    C' ***** DMPSPOOL - ZERO '
REC0TYPE DC    C'____'
         DC    C' RECORD ENCOUNTERED PROCESSING JOB '
REC0JOB  DC    C'________'
         DC    C'('
REC0NO   DC    C'____'
         DC    C') AT MTTR '
REC0TTR  DC    C'________'
         DC    C'.'
         ORG   REC0MSG+111
         DC    C'SNAP ID = '
REC0ID   DC    C'____'
         ORG
         SPACE
BADJQMSG DC    CL133' '
         ORG   BADJQMSG
         DC    C' ***** DMPSPOOL - UNABLE TO READ JOB QUEUE RECORD. '
         DC    C'ECB=X'''
JQECB    DC    C'________'
         DC    C'''.'
         ORG
         SPACE
LIST     DC    CL133'0'
CARD     EQU   LIST+5,80               CARD IMAGE
READER   EQU   LIST+90,8               NAME OF READER THAT READ JOB
ENDRUN   DC    CL133' '
         ORG   ENDRUN
         DC    C'0***** DMPSPOOL - END OF RUN.  '
ETOTAL   DC    C'0000'
         DC    C' JOBS EXTRACTED  '
DTOTAL   DC    C'0000'
         DC    C' JOBS DELETED'
         ORG
         SPACE
*--------LIST FORM OF WTO
WTO      WTO   '1234567890123456789012345678901234567890123456789012345+
               67890123456789012345678901234567890123456789012345678901+
               2345678901234',                                         +
               ROUTCDE=(2,11),                                         +
               MF=L
         SPACE
*--------CONTROL RECORD HEADER
CNTRLREC DC    AL1(9)                  CONROL RECORD LENGTH
         DC    AL1(SCRFLAGS)           CONTROL RECORD ID
         DC    AL1(9)                  LENGTH BEFORE TRUNCATION
*--------CONTROL RECORD AND BLOCK END IDENTIFIERS
CNTRLEND DC    X'FF'                   END OF CONTROL RECORD
         DC    X'FF'                   END OF BLOCK
         SPACE 2
FLAGS    DC    X'00'                   INDICATORS
$SWITCH  EQU   X'80'   1... ....       PRINT FIRST CARD OF EACH JOB
$INSTREM EQU   X'40'   .1.. ....       INSTREAM DATA PROCESSING
$PUNCHED EQU   X'20'   ..1. ....       A CARD HAS BEEN PUNCHED FOR JOB
$NOWTO   EQU   X'10'   ...1 ....       SUPPRESS WTO'S
*                      .... XXXX       NOT USED
         EJECT
***********************************************************************
*                                                                     *
*        IOB                                                          *
*                                                                     *
***********************************************************************
SPOOLECB DC    F'0'
SPOOLIOB DC    X'42000000'
IOBECBCC DC    X'00'
IOBECBPT DC    AL3(SPOOLECB)
IOBFLAG3 DC    X'00'
IOBCSW   DC    7X'00'
IOBSIOCC DC    X'00'
IOBSTART DC    3X'00'
IOBDCBPT DC    A(HASPACE)          DCB POINTER
IOBRESTR DC    X'00',3X'00'
         DC    H'0'
         DC    H'0'
IOBSEEK  DC    2F'0'
         SPACE 2
***********************************************************************
*                                                                     *
*        CHANNEL PGM TO READ CHECKPOINT RECORD                        *
*                                                                     *
***********************************************************************
         SPACE
READJOBQ CCW   X'31',IOBSEEK+3,X'60',5 SEACH ID EQUAL
         CCW   X'08',*-8,0,1           TIC *-8
RJQDATA  CCW   X'06',0,X'40',QUESIZE   READ DATA
         CCW   X'03',0,X'20',1         NOP
         SPACE 2
***********************************************************************
*                                                                     *
*        CHANNEL PGM TO READ SPOOL RECORD                             *
*                                                                     *
***********************************************************************
         SPACE
SPOOLREC CCW   X'31',IOBSEEK+3,X'60',5
         CCW   X'08',*-8,0,1
SPOOLRD  CCW   X'06',0,X'40',&BUFSIZE  READ DATA - SPOOL RECORD
         CCW   X'03',0,X'20',1
         EJECT
***********************************************************************
*                                                                     *
*        DCB'S                                                        *
*                                                                     *
***********************************************************************
         SPACE
CHKPT    DCB   DDNAME=CHKPT,                                           +
               MACRF=E,                                                +
               DSORG=PS,                                               +
               IOBAD=SPOOLIOB,                                         +
               DEVD=DA
         EJECT
HASPACE  DCB   DDNAME=HASPACE,                                         +
               MACRF=E,                                                +
               DSORG=PS,                                               +
               IOBAD=SPOOLIOB,                                         +
               DEVD=DA
         EJECT
HASPACE2 DCB   DDNAME=HASPACE2,                                        +
               MACRF=E,                                                +
               DSORG=PS,                                               +
               IOBAD=SPOOLIOB,                                         +
               DEVD=DA
         EJECT
OUTPUT   DCB   DDNAME=OUTPUT,                                          +
               DSORG=PS,                                               +
               MACRF=PM,                                               +
               RECFM=FB,                                               +
               LRECL=80
         EJECT
SYSLIST  DCB   DDNAME=SYSLIST,                                         +
               DSORG=PS,                                               +
               MACRF=PM,                                               +
               RECFM=FA,                                               +
               LRECL=133,                                              +
               BLKSIZE=133
         EJECT
SNAPDUMP DCB   DDNAME=SNAPDUMP,                                        +
               MACRF=W,                                                +
               DSORG=PS,                                               +
               RECFM=VBA,                                              +
               LRECL=125,                                              +
               BLKSIZE=882
         TITLE 'JES2 CONTROL BLOCKS'
***********************************************************************
*                                                                     *
*        JES2 CONTROL BLOCKS                                          *
*                                                                     *
***********************************************************************
         $JQE  DOC=YES
         $JCT  DOC=YES
         $SCR  DOC=YES
         END
