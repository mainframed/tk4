         PRINT NOGEN
         DMSMACRO TYPE=DSECT
         PRINT ON,GEN
UNT0     TITLE 'D M S U N T 0  UNIT DATASAVE ROUTINE FOR DMS'
DMSUNT0  CSECT
         USING *,R15                    BASE FOR I/O
         B     UNTSIO                   SIO
         DROP  R15
         USING *,R15                    BASE FOR SIO
         B     UNTIOI                   I/O
         CSECTID DMSUNT0                CSECT IDENTIFIER
         DROP  R15
UNTSIO   BALR  R11,R0                   ASSIGN BASE
         USING *,R11                    REGISTER
         USING DMSCONST,DMSREG
         USING PSA,R0
         L     R7,PREGSAVE+24(R0)
         BAL   R12,UCBLOOK
         ST    R6,PSUCB(R0)
         MVC   PSUCB(1),DATASFLG
         MVI   PSTYPE,BIT0             INDICATE SIO
         LA    R0,8                     FIRST SAVE CSW
         LA    R1,FLCCSW(R0)            INTO RECORD
         BALR  R12,R13                  SAVE IT
         LA    R0,4                     INDICATE FOUR BYTES
         LA    R1,16(,R6)               -> OF DEVTYPE IN UCB
         BALR  R12,R13                  GO SAVE DEVTYPE FIELD
         SR    R15,R15                  INDICATE RECORD TO BE SAVED
         TM    CCWNUM,ALLBIT            IS CCW ON
         BZR   R14                      NO, RETURN
         L     R0,FLCCAW(R0)
         ST    R0,PSUSER(R0)            SAVE CAW TO WORK SPACE
         BAL   R8,RTOVRTN               CONVERT CAW TO VIRTUAL
         ST    R1,PSUSER+4              SAVE IT TO WORK
         MVC   PSUSER+4(1),FLCCAW       MOVE CAW KEY TO VIRT. CAW
         LR    R2,R1                    GET VIRTUAL ADDRESS OF FIRST
         LA    R0,8                     SAVE 8 BYTES
         LA    R1,PSUSER(R0)            POINT TO AREA
         BALR  R12,R13                  SAVE IT
         B     CCWSAVE                  AND DO REST OF WORK
         DROP  R11
         EJECT
UNTIOI   BALR  R11,R0                   ASSIGN  NEW  BASE
         USING *,R11
         L     R7,FLCIOA(R0)
         LA    R7,0(R7)                 CLEAR HIGH ORDER BYTE
         BAL   R12,UCBLOOK             GET UCB
         LA    R0,8                     FIRST SAVE CSW
         LA    R1,FLCCSW(R0)            INTO RECORD
         BALR  R12,R13                  SAVE IT
         LA    R0,4                     INDICATE FOUR BYTES
         LA    R1,16(,R6)               -> OF DEVTYPE IN UCB
         BALR  R12,R13                  GO SAVE DEVTYPE FIELD
         SR    R15,R15                  INDICATE RECORD TO BE SAVED
         CLI   FLCIOA+3,0               CONTROL AND UNIT ZERO
         BCR   0,R14                    CHANGED CODE FOR CU 0
         TM    FLCCSW+5,BIT0            IS IT A PCI
         BO    *+10                     YES, DO NOT TEST CHANNEL END
         TM    FLCCSW+4,BIT4            IS CHANNEL END ON
         BZR   R14                      NO, RETURN
         TM    FLCCSW+3,BIT5+BIT6+BIT7  IS CCW ON DOUBLEWORD-BOUNDARY
         BNZR  R14                      NO, RETURN
         L     R2,FLCCSW(R0)            TAKE REAL CCW +8
         LA    R2,0(R2)                 CLAR HIGH BYTE
         CL    R2,F8                    IS ADDRESS AT LEAST 8
         BLR   R14                      NO, RETURN
         SL    R2,F8                    POINT TO CCW
         CL    R2,HIMACH                IS CCW WITHIN REAL STORAGE
         BHR   R14                      NO,RETURN
         LR    R0,R2                    GET REAL ADDRESS
         BAL   R8,RTOVRTN               INTO VIRTUAL ONE
         SR    R15,R15                  INDICATE RECORD TO BE SAVED
         LRA   R3,0(R1)                 IS TRANSLATION AVAILABLE
         BNER  R14                      GO BACK IF NOT
         CLI   0(R1),4                  IS IT A SENSE COMMAND
         BE    UNTSENSE                 YES DO SPECIAL HANDLING
         TM    CCWNUM,ALLBIT            ARE CCW'S TO BE SAVED
         BZR   R14                      NO, GO BACK
         L     R7,FLCIOA(R0)            GET UNIT ADDRESS
         LA    R7,0(R7)                 CLEAR HIGH BYTE
         BAL   R12,UCBLOOK              GET UCB INTO REGISTER 6
         MVI   PSTYPE,0                 INDICAT IOI
         CLI   2(R6),ALLBIT             IS IT UCB
         BNER  R14                      NO, RETURN
         SL    R6,F4                    POINT TO UCB - 4
         L     R5,0(R6)                 GET IOQ ELEMENT
         L     R7,8(R5)                 GET IOSR ADDRESS
         LA    R6,4(R6)                 INCREMENT TO ORIGINAL UCB
         C     R6,16(R7)                ARE UCB ADDRESSES EQUAL
         BNER  R14                      NO RETURN
         MVC   PSUSER(4),72(R7)         REAL CCW ADDRESS
         L     R0,PSUSER                LOAD IT AND
         BAL   R8,RTOVRTN               TRANSLATE
         ST    R1,PSUSER+4              SAVE IT TO WORK
         LR    R2,R1                    SAVE START ADDRESS OF CHAIN
         LA    R0,8                     LENGTH OF DATA TO BE SAVED
         LA    R1,PSUSER                POINT TO ADDRESS WORDS
         BALR  R12,R13                  SAVE IT
         LTR   R15,R15                  RECORD OK
         LA    R15,0(R0,R0)             RECORD SHOULD BE SAVED
         BNZR  R14                      RECORD BAD, DO NOT CONTINUE
         ST    R6,PSUCB(R0)             UCB ADDRESS FOR CCWSAVE
         MVC   PSUCB(1),DATAIFLG        SAVE DATA FLAG TO HIGH ORDER B
         B     CCWSAVE
         EJECT
UNTSENSE ST    R3,PSUSER                SAVE REAL ADDRESS
         ST    R1,PSUSER+4              SAVE VIRTUAL CCW ADDRESS
         LR    R2,R1                    SAVE CCW ADDR
         MVC   PSUSER+8(8),0(R2)        SENSE CCW TO WORK
         OI    PSUSER+12,DATABIT        INDICATE DATA FOLLOWS
         L     R0,PSUSER+8(R0)          GET DATA ADDRESS FROM CCW
         BAL   R8,RTOVRTN               CONVERT TO VIRTUAL
         ST    R1,PSUSER+16(R0)         VIRTUAL DATA ADDRESS
         MVI   PSUSER+16,X'04'          SAVE SENSE OPCODE
         MVC   PSUSER+8(1),PSUSER+16    TO CCW
         LR    R3,R1                    SAVE VIRTUAL DATA ADDR
         LA    R0,22                    SAVE 20 BYTES
         LH    R4,6(R2)                 GET CCW COUNT
         STH   R4,PSUSER+20(R0)         SAVE DATA LNGT
         SH    R4,FLCCSW+6(R0)          SUBTRACT RESIDUAL COUNT
         BNP   NOSENSDA                 DO NOT SAVE ZERO OR NEGATIV
         LA    R4,2(R4)                 INCREASE BY LENGTH OF HALFWORD
         LRA   R6,0(R3)                 IS DATA ADDRESS ACCESSABLE
         BNE   NOSENSDA                 NO, SO SAVE WITHOU DATA
         STH   R4,PSUSER+20(R0)         SAVE LNGT OF SENSE
         B     SENSCONT                 CONTINUE
NOSENSDA SR    R4,R4                    INDICATE
         NI    PSUSER+12,ALLBIT-DATABIT TURN OFF DATA BIT
         LA    R0,20                    SAVE ONLY 20 BYTES
SENSCONT EQU   *
         LA    R1,PSUSER(R0)            SENSE CCW
         BALR  R12,R13
         LTR   R15,R15                  CCW SAVED
         LA    R15,0(R0)                INDICATE RECORD TO BE HELD
         BNZR  R14                      NO,RETURN
         LTR   R4,R4                    IS DATA LENGTH ZERO
         BZR   R14                      YES, RETURN
         BCTR  R4,R0                    SUBTRACT LENGTH OF COUNT
         BCTR  R4,R0                    FIELD
         LTR   R0,R4                    LOAD LENGTH REGISTER
         BNPR  R14                      RETURN IF NOT POSITIVE
         BCTR  R4,R0                    ASSUME SENSE INFO SHORTER 256
         EX    R4,UNTSMOVE              DATA
         LA    R1,PSUSER(R0)            POINT TO SENSE DATA
         BALR  R12,R13                  SAVE SENSE DATA
         SR    R15,R15                  AND
         BR    R14                      RETURN
UNTSMOVE MVC   PSUSER(1),0(R3)          MOVE SENSE DATA TO WORK SPACE
         DROP  R11
         EJECT
CCWSAVE  LA    R2,0(R2)                 CLEAR HIGH ORDER BYTE
         BALR  R11,R0                   ASSIGN NEW
         USING *,R11                    REGISTER
         ST    R2,PSCCWSTR              SAVE CCW START ADDRESS
         SR    R4,R4                    CLEAR REGISTER
         IC    R4,CCWNUM                GET NUMBER OF CCW'S
         XC    PSCWPATH(16),PSCWPATH    CLEAR PATHES BEFORE START
         TM    CCWNUM,ALLBIT            HOW MANY CCW ARE SPECIFIED
         BZ    CCWBACKS                 GO BACK IF NONE BUT SAVE
         BM    CCWRETRY                 TAKE VALUE AS IT IS
         SLL   R4,24                    INDICATE ALL CCW'S
CCWRETRY LA    R9,7                     AND MASK
         NR    R9,R2                    VALIDATE
         BNZ   CCWBACK1                                              RF
         LRA   R5,0(R2)                 GET REAL ADDRESS
         BNE   CCWBACKS                 TRANSLATION NOT AVAILABLE
         CL    R5,HIMACH                ADDRESS MUST BE
         BNL   CCWBACKS                 WITHIN REAL CORE
         CL    R2,PSCCWSTR              IS IT START OF CHAIN
         BE    CCWMOVE                  YES, DO NOT SAVE AGAIN
         ST    R5,PSUSER                SAVE REAL CCW ADDRESS
         ST    R2,PSUSER+4              SAVE VIRTUAL CCW ADDRESS
         LA    R0,8                     INDICATE 8 BYTES TO BE SAVED
         LA    R1,PSUSER                POINT TO DATA START
         BALR  R12,R13                  SAVE DATAS
         LTR   R15,R15                  EVERYTHING OK?
         BNZ   CCWBACKS                 NO, EXIT
CCWMOVE  MVC   PSUSER(8),0(R2)          MOVE CCW
         CLI   0(R2),0                  IS OP-CODE ZERO
         BNE   CCWNOPRO                 NO, CONTINUE
         LR    R9,R2                    SET WORK REGISTER
         TM    PSTYPE,BIT2              FORCE F2 OP CODE ALLOWED     RF
         BNO   CCWPREV                  NO                           RF
*        THIS LINE IS DELETED BY RS                                  RS
         MVI   PSUSER,X'F2'             ALSO IN PSUSER               RF
         B     CCWNOPRO                 GO AND CONTINUE              RF
CCWPREV  SL    R9,=F'8'                 POINT TO PREVIOUS CCW
         CLI   0(R9),0                  STILL ZERO
         BE    CCWPREV                  YES, TRY NEXT
         TM    4(R9),128                IS CHAINING ON
         BZ    CCWNOPRO                 NO, DO NOY CHANGE
         MVC   PSUSER(1),0(R9)          YES, PROPAGATE CCW OP-CODE
CCWNOPRO DS    0H
         L     R0,0(R2)                 SAVE
         BAL   R8,RTOVRTN               VIRTUAL DATA
         ST    R1,PSUSER+8              ADDRESS OF THIS CCW
         MVC   PSUSER+8(1),PSUSER       OPCODE TO VIRT CCW
         LA    R9,12                    LOAD BYTE COUNT
         TM    PSTYPE,BIT0              IS IT SIO EVENT
         BO    CCW000                   YES, SO DO NOT CHECK CSW
         TM    PSTYPE,BIT1              NO, SO CHECK IF CCW SAVED
         BO    CSWTEST                  YES, CHECK FOR END CCW
         OI    PSTYPE,BIT1              NO, SET CHAIN STARTED
         B     CCW000                   START SAVE OF CCWS
CSWTEST  CLM   R5,7,FLCCSW+1            IS CSW ADDRESS REACHED
         BE    CCWBACKS                 YES, SO STOP SAVE OF CCWCHAIN
         AL    R5,=F'8'                 ADD 8 TO R5                  RH
         CLM   R5,7,FLCCSW+1            IS FOLLOWING CCW NEEDED      RH
         BNE   CCW000                   YES,NOT REACHED IOI CCW      RH
         XC    PSCWPATH(16),PSCWPATH    REACHED IOI CCW,CLEAR PATH   RH
CCW000   MVI   PSCCWCD,0                CLEAR CCW BYTE
         MVN   PSCCWCD(1),PSUSER        SET EFFECTIVE OP-CODE
         SR    R7,R7                    ZERO REGISTER FOR INSERT
         IC    R7,PSUSER                INSERT COMMAND CODE
         TM    PSCCWCD,7                IS IT TIC                    RH
         BNZ   CCW020                   NO                           RH
         TM    PSCCWCD,8                SURE TIC                     RH
         BZ    CCW020                   NO                           RH
         XC    PSUSER+4(4),PSUSER+4     CLEAR SECOND HALF OF TIC
         B     WRTCCW                   SAVE TIC-CCW
CCW020   SR    R7,R7                    CLEAR REGISTER
         IC    R7,PSUSER                GET OP-CODE
         IC    R7,OPTABLE(R7)           GET MASK FROM TABLE
         L     R3,PSUCB                 -> OF UCB
         EX    R7,CCWTEST               IS SPECIAL HANDLING REQUIRED
         BZ    CCW080                   NO, NORMAL PROCESSING
         SLL   R7,30                    ISOLATE LOW ORDER BITS
         LTR   R7,R7                    WAS IT CONTROL COMMAND
         BZ    CCW075                   NO, STATUS MODIFIER
         BP    CCW055                   YES,ZERO DATA ADDRESS
         TM    18(R3),8                 IS IT UNIT RECORD
         BZ    CCW055                   NO, ZERO DATA ADDRESS
         OI    PSCCWUNU,CONTCOM         SET IT CONTROL COMMAND
         CLI   19(R3),9                 IS IT 3211 PRINTER
         BE    CCW080                   YES, USE DATA ADDRESS
         CLI   19(R3),14                IS IT 3800
         BE    CCW080                   YES, USE DATA ADDRESS
         CLI   19(R3),66                IS IT 3850
         BE    CCW080                   YES, USE DATA ADDRESS
         CLI   19(R3),27                IS IT 1287
         BE    CCW075                   YES, GO OUT
         CLI   19(R3),28                IS IT 1288
         BE    CCW075                   YES, GO OUT
         CLI   19(R3),22                IS IT 3890
         BE    CCW075                   YES, GO OUT
         CLI   19(R3),23                IS IT 3886
         BE    CCW075                   YES SET STATUS MODIFIER
CCW055   OI    PSCCWUNU,CONTCOM         INDICATE CONTROL COMMAND
CCW060   TM    18(R3),64                IS IT COMMUNICATIONS DEV
         BZ    CCW070                   NO, SO ITS CONTROL COMMAND
         CLI   19(R3),20                IS IT 2955
         BE    CCW070                   YES                          RI
         SLL   R7,1                     INSPECT CONTROL COMM BIT     RI
         LTR   R7,R7                    IS IT CNTRL COMMAND          RI
         BZ    CCW075                   NO,SO IT IS SM CCW           RI
         SPACE
CCW070   EQU   *
         NI    PSUSER+4,ALLBIT-DATABIT  RESET DATA
         NI    PSUSER+4,ALLBIT-IDABIT   AND IDA BIT
         B     WRTCCW                   SAVE CCW
         SPACE
CCW075   OI    PSCCWUNU,STATMOD         TURN ON STATUS MODIFIER AND
         NI    PSCCWUNU,ALLBIT-CONTCOM  TURN OFF CONTROL COMMAND
         SPACE
CCW080   TM    4(R2),CCWSKIP            IS IT SKIP
         BNO   CCW100                   NO, SO ITS A VALID DATA ADDRESS
         TM    PSCCWCD,1                IS IT OUTPUT
         BO    CCW100                   YES, GO OUT
         B     CCW070                   NO, NODATA
         SPACE
CCWTEST  TM    18(R3),X'00'             DEVTYPE AND CODE - TEST
         SPACE
CCWBACKS SR    R15,R15                  INDICATE SAVEING
         BR    R14                      AND RETURN
CCWBACK1 TM    PSTYPE,BIT0              IS IT SIO                    RF
         BO    CCWBACKS                 YES                          RF
         L     R0,FLCCSW                LOAD IOI ADDRESS             RS
         BAL   R8,RTOVRTN               TRANSLATE TO VIRTUEL         RS
         SL    R1,=F'8'                 SUBTRACT EIGTH               RS
         LTR   R2,R2                    IS R2 ZERO                   RF
         BZ    CCWBACK2                 YES,LOAD R2                  RF
         CLR   R2,R1                    CCW SAVED WHICH LEAD TO IOI  RS
         BE    CCWBACKS                 YES OK                       RF
CCWBACK2 LR    R2,R1                    NO,SET UP TO SAVE IT         RS
         OI    PSTYPE,BIT2              ALLOW FORCING FOR OP CODE F2 RF
         B     CCWRETRY                                              RF
         EJECT
CCW100   TM    PSUCB,DATAIOF            ARE DATA TO BE SAVED
         BO    CCW070                   NO, DO NOT SAVE DATA
         TM    PSUCB,DATASPEC           ARE THERE SPECIAL CODES
         BZ    NOCCWCOD                 NO, NO TABLE TO BE USED
         LA    R7,DATASCOD              ASSUME SIO
         TM    PSTYPE,BIT0              IS IT SIO
         BO    *+8                      YES, DO NOT RELOAD
         LA    R7,DATAICOD              NO, MUST BE IOI
         SR    R6,R6                    CLEAR FOR
         IC    R6,PSUSER                INSERT OP-CODE
         LR    R5,R6                    ALSO TO ANOTHER REG
         LA    R15,7                    AND MASK
         NR    R6,R15                   OFFSET TO MASK BYTE
         SRL   R5,3                     DIVIDE BY 8
         IC    R6,DMSTRTAB(R6)          LOAD MASK
         LA    R7,0(R5,R7)              POINT TO BYTE TO BE TESTED
         EX    R6,DMSTSTMK              IS THIS CODE SELECTED
         BZ    CCW070                   NO, SO DO NOT SAVE
         B     CCWDSON                  YES, SO SAVE ALSO WITH DATA
         SPACE
NOCCWCOD TM    PSCCWCD,1                IS IT OUTPUT OPERATION
         BZ    CODINPUT                 NO, IT IS INPUT
         TM    PSUCB,DATAIOO            IS OUTPUT DATA BIT ON
         BZ    CCW070                   NOT ON = NO DATA
         B     CCWDSON                  ON, SO SAVE DATA
CODINPUT TM    PSUCB,DATAIOI            IS INPUT SELECTED
         BZ    CCW070
         SPACE 3
CCWDSON  EQU   *
         NI    PSUSER+4,ALLBIT-3        ASSUME NO IDA OR DATA
         XR    R0,R0                    CLEAR REGISTER
         ICM   R0,7,PSUSER+9            IS DATA ADDRESS ZERO
         BZ    CCW070                   YES, DO NOT SAVE DATA
         OI    PSUSER+4,DATABIT         SET DATA BIT ON
         TM    4(R2),CCWIDA             IS INDIRECT DATA ADDRESSING ON
         BZ    *+8                      NO, DO NOT TURN ON
         OI    PSUSER+4,IDABIT          SET IDA BIT ON
         SPACE 3
WRTCCW   MVC   PSCCW(8),PSUSER          SAVE CCW
         TM    PSTYPE,BIT0              IS IT SIO EVENT
         BO    CCWRCNT                  YES,DO NOT MODIFY COUNT
         TM    PSCCWCD,7                IS IT TIC                    RH
         BNZ   WRTCCW1                  NO                           RH
         TM    PSCCWCD,8                SURE TIC                     RH
         BO    CCWRCNT                  YES                          RH
WRTCCW1  L     R0,FLCCSW(R0)            GET REAL CCW ADDR+8          RH
         BAL   R8,RTOVRTN               TRANSLATE
         SL    R1,F8                    POINT TO CCW
         LA    R1,0(R1)                 CLEAR HIGH BYTE
         CR    R1,R2                    IS IT THIS CCW
         BNE   CCWRCNT                  NO, DO NOT MODIFY COUNT
         LH    R6,PSCCW+6(R0)           YES, SO GET COUNT
         SH    R6,FLCCSW+6(R0)          SUBTRACT RESIDUAL LENGTH
         BP    CCWMODCT                 GOOD VALUE, MODIFY CCW
         NI    PSUSER+4,ALLBIT-DATABIT  INDICATE NO IDA
         NI    PSUSER+4,ALLBIT-DATABIT  NOR DATA FOLLWO
         MVC   PSCCW(8),PSUSER          MOVE CCW TO LOW CORE
         B     CCWRCNT                  AND CONTINUE
CCWMODCT STH   R6,PSCCW+6(R0)           SIMULATE LOW COUNT
CCWRCNT  EQU   *
         LR    R0,R9                    SET LENGTH OF SAVE
         LA    R1,PSUSER                SET ADDRESS OF CCW AND
         BALR  R12,R13                  SAVE IT
         LTR   R15,R15                  COULD IT BE SAVED
         BNZ   CCWBACKS                 NO,SO SAVE WHAT WE HAVE
         TM    PSCCW+4,IDABIT+DATABIT   IS EITHER IDA OR DATA SELECTED
         BZ    NODATAS                  NO, SO POINT TO NEXT CCW
         BM    NOIDAS                   IF 1 BIT IS ONE MUST BE DATA B
         LH    R6,PSCCW+6               FORCE COUNT TO BE
         N     R6,CCWMCNT               LESS THAN 64K
         L     R0,0(R2)                 GET REAL ADDRESS OF IDA LIST
         BAL   R8,RTOVRTN               GET VIRTUAL ADDRESS OF IT
         LRA   R0,0(R1)                 IS IT A VALID POINTER
         BNE   NOIDAS
         LR    R3,R1                    SET R3 TO CURRENT IDA
         L     R0,0(R3)                 GET REAL IDA-ADDRESS-WORD
         ST    R0,PSUSER(R0)            SAVE IT TO LOW CORE AND
         MVI   PSUSER,0                 ENSURE HIGH BYTE IS ZERO
         BAL   R8,RTOVRTN               GET VIRTUAL ADDRESS OF IT
         ST    R1,PSUSER+4(R0)          SAVE IT
IDAIDA   EQU   *
         L     R5,0(R3)                 ADDRESS OF DATA
         LR    R7,R5
         SLL   R7,21                    GET OFFSET WITHIN
         SRL   R7,21                    THIS PAGE
         CLI   PSCCWCD,12               IS IT READ BACKWARD
         BNE   IDANORM                  NO, USE NORMAL
         LA    R7,1(R7)                 ADD ONE FOR LIMIT
         B     IDACONT
IDANORM  LA    R5,2048(R0)              GET MAXIMUM LENGTH
         SLR   R5,R7                    SUBTRACT OFFSET
         LR    R7,R5                    TAKE NUMBER OF BYTES WITHIN
IDACONT  SLR   R6,R7                    SUBTRACT IT FROM CCW LENGTH
         LTR   R6,R6
         BP    NEXTIDA                  THIS IS NOT LAST IDA
         STC   R9,PSIDACNT(R0)          SAVE IDA-COUNT
         L     R0,0(R3)                 THIS IS LAST IDA, SO
         ST    R0,PSUSER+8(R0)          SAVE REAL IDA
         BAL   R8,RTOVRTN               AND
         ST    R1,PSUSER+12(R0)         SAVE VIRTUAL IDA TO RECORD
         LA    R0,16                    4 WORDS TO BE SAVED
         LA    R1,PSUSER(R0)            POINT TO DATA START
         BALR  R12,R13                  GO DO IDAS TO RECORD
         LTR   R15,R15                  WAS SAVE POSSIBLE
         BNZ   CCWBACKS                 NO, SO SAVE WHAT WE HAVE
         MVC   PSUSER+8(4),PSUSER+4    MAKE ADDRESS VIRTUAL
         EJECT
NOIDAS   LH    R6,PSCCW+6               DATA LENGTH
         N     R6,CCWMCNT               NOT MORE THAN 64K
         CH    R6,DATASLNG             WILL ALL DATA BE SAVED
         BH    SPLIDATA                 NO, SPLIT THEM UP
         L     R1,PSUSER+8              GET DATA ADDRESS
         LNR   R0,R6                    MAKE LENGTH NEGATIVE TO ADD LNG
         CLI   PSCCWCD,12               IS IT READ BACKWARD
         BNE   *+6                      NO, GO AROUND SUBTRACT
         ALR   R1,R0                    SUBTRACT LENGTH
         BALR  R12,R13                  AND SAVE DATA
         LTR   R15,R15                  ARE DATA SAVED
         BM    CCWBACK1                                              RF
         BZ    NODATAS                  ALL DATA ARE SAVED
         BCTR  R15,R0                   RETURNED LENGTH IS +1
         LTR   R15,R15                  DO WE HAVE MORE SPACE
         BZ    CCWBACKS                 NO, SO RETURN
         LR    R0,R15                   GET RESIDUAL LENGTH AND FILL
         BALR  R12,R13                  UP RECORD
         B     CCWBACKS                 NOW RETURN
NEXTIDA  LA    R3,4(R3)                 POINT TO NEXT IDA
         B     IDAIDA                   AND CONTINUE
         EJECT
SPLIDATA EQU   *
         LH    R7,DATASLNG              GET LENGTH OF DATA TO BE SAVED
         LA    R7,6(R7)                 ADD 3 LENGTH FIELDS
         SR    R0,R0                    CLEAR REGISTER
         BALR  R12,R13                  GET RESIDUAL LENGTH
         CR    R7,R15                   IS THERE ENOUGH SPACE FOR ALL
         BL    SPISOK                   YES CONTINUE
         BCTR  R15,R0                   GET REAL AVAILABLE VALUE
         SRL   R15,1                    RE SHURE ITS
         SLL   R15,1                    AN EVEN VALUE
         CH    R15,F8+2                 AT LEAST 8 FOR TWO DATA BYTES
         BL    CCWBACKS                 NO  SO RETURN
         LR    R7,R15                   YES GET NEW VALUE
SPISOK   LNR   R7,R7                    MAKE VALUE NEGATIVE
         LA    R0,2                     LENGTH OF LENGTH FIELD
         STH   R7,PSUSER+254(R0)        STORE VALUE TO WORK
         LA    R1,PSUSER+254(R0)        LOAD ADDRESS OF DATA
         BALR  R12,R13                  AND SAVE IT
         LPR   R7,R7                    MAKE VALUE POSITIVE
         SH    R7,=H'6'                 GET OLD DATA LENGTH
         SRL   R7,1                     DIVIDE IT BY TWO
         L     R1,PSUSER+8(R0)          START OF DATA
         LA    R1,0(,R1)                CLEAR HIGH ORDER BYTE
         LNR   R0,R7                    DATA WITH LENGTH FIELD TO BE
         CLI   PSCCWCD,12               IS IT READ BACKWARD
         BNE   *+6                      NO, SO DO NOT SUBTRACT
         ALR   R1,R0                    YES, SUBTRACT LENGTH FROM START
         BALR  R12,R13                  AND SAVE PART 1
         L     R1,PSUSER+8(R0)          START OF DATA
         LA    R1,0(,R1)                CLEAR HIGH ORDER BYTE
         CLI   PSCCWCD,12               IS IT READ BACK
         BNE   *+6                      NO, GO AROUND NEGATION
         LNR   R6,R6                    YES, MAKE COUNT NEGATIV AND
         ALR   R1,R6                    POINT TO DATA REAL END
         CLI   PSCCWCD,12               IS IT READ BACK
         BE    *+6                      YES,DO NOT SUBTRACT LENGTH
         ALR   R1,R0                    OF DATA TO BE SAVED
         BALR  R12,R13                  SAVE DATA
         EJECT
NODATAS  BCTR  R4,R0                    SUBTRACT ONE FROM CCW  COUNT
         LTR   R4,R4                    ALL CCW SAVED
         BZ    CCWBACKS                 RETURN,ALLDONE
         TM    PSCCWCD,7                IS IT TIC                    RH
         BNZ   NODATAS1                 NO                           RH
         TM    PSCCWCD,8                SURE TIC                     RH
         BO    CCWISTIC                 YES                          RH
NODATAS1 TM    PSCCWUNU,STATMOD         IS IT STATUS MODIFIRR        RH
         BO    CCWISTAM                 YES, SO GO OUT
CCWTSTCH TM    PSCCW+4,CCWDC+CCWCC      IS COMMAND OR DATA CHAINING
         BNZ   CCWCHAIN
CCWSAME  L     R2,PSCWPATH              GET PATH IF THERE IS ONE
         LTR   R2,R2                    IS THERE A SECOND PATH
         BZ    CCWBACK1                                              RF
         MVC   PSCWPATH(12),PSCWPATH+4  MOVE NEXT PATHES
         XC    PSCWPATH+12(4),PSCWPATH+12 AND CLEAR OLD ONE
         CL    R2,PSCWPATH              IS IT SAME CCW
         BE    CCWSAME                  YES, SKIP IT
CCWSAME1 CL    R2,PSCWPATH+4            IS NEXT CCW THE SAME
         BNE   CCWSAME2                 NO, SO CONTINUE
         MVC   PSCWPATH+4(8),PSCWPATH+8 YES, SKIP IT
         B     CCWSAME1                 PROCEESS NEXT CCW
CCWSAME2 B     CCWRETRY                 GO, FOLLOW NEW CCW CHAIN
CCWCHAIN MVI   PSIDACNT,0
         LA    R2,8(R2)                 POINT TO NEXT CCW
         C     R2,PSCWPATH              IS IT SAME AS CURRENT PATH
         BNE   NXTPATH                  NO CHECK NEXT PATH
         MVC   PSCWPATH(12),PSCWPATH+4  MOVE NEXT PATHES
         XC    PSCWPATH+12(4),PSCWPATH+12 AND CLEAR OLD PATH
         B     CCWRETRY
NXTPATH  C     R2,PSCWPATH+4            IS IT THIS PATH
         BNE   NXTP1                    LOOK FOR NEXT
         MVC   PSCWPATH+4(8),PSCWPATH+8 MOVE PATHES
         XC    PSCWPATH+12(4),PSCWPATH+12 AND CLEAR PATH
         B     CCWRETRY                 AND PROCESS NEXT CCW
NXTP1    C     R2,PSCWPATH+8
         BNE   NXTP2
         MVC   PSCWPATH+8(4),PSCWPATH+12
         XC    PSCWPATH+12(4),PSCWPATH+12
         B     CCWRETRY                 PROCESS
NXTP2    C     R2,PSCWPATH+12
         BNE   CCWRETRY
         XC    PSCWPATH+12(4),PSCWPATH+12
         B     CCWRETRY
CCWISTAM TM    8(R2),8                  IS NEXT CCW A TIC            RK
         BO    YESEVTIC                 YES MAY BE                   RK
NOTIC    L     R3,PSUCB                 NO,SEE                       RK
         SR    R7,R7                    IF STATUS                    RK
         IC    R7,0(,R2)                MODIFIER IS                  RK
         IC    R7,OPTABLE(R7)           FOR CURRENT                  RK
         EX    R7,CCWTEST               CCW                          RK
         BNZ   SETPATH1                 SAVE SM+16 PATH              RK
NONOTIC  MVI   PSCCWUNU,0               NO, IGNORE STATUS MOD.
         B     CCWCHAIN                 AND SAVE NEXT
YESEVTIC TM    8(R2),7                  IS IT A TIC
         BNZ   NOTIC                    NOT A TIC                    RK
         L     R0,8(R2)                 GET REAL TIC-TO ADDRESS
         BAL   R8,RTOVRTN               GET VIRTUAL ADDRESS
         CR    R1,R2                    COMPARE FOR NOP-TIC
         BE    CCWTSTCH                 IGNORE STAT. MOD TIC
         SL    R2,F8                    SUBTRACT EIGHT
         CR    R1,R2                    COMPARE TIC ADDR.
         LA    R2,8(R2)                 RESTORE VALUE
         BE    CCWTSTCH                 IGNORE TIC - 16
         SL    R2,F8                    SUBTRACT
         SL    R2,F8                    TWICE TIME 8
         CR    R1,R2                    COMPARE TIC TO ADDR.
         LA    R2,16(R2)                RESTORE VALUE
          BE   CCWTSTCH                 IGNORE TIC - 24
SETPATH1 LR    R1,R2                    SAVE R2                      RK
         ICM   R5,7,PSCWPATH+1          IS FIRST PATH FREE
         BNZ   ISNPFREE                 LOOK FOR NEXT PATH
         LA    R2,16(R2)                POINT TO CCW BEHIND STATUS MOD.
         ST    R2,PSCWPATH              SAVE OLD PATH
         LR    R2,R1                    AND FOLLOW TIC
         B     NONOTIC
         SPACE
ISNPFREE ICM   R5,7,PSCWPATH+5          IS THIS PATH AVAI LABLE
         BNZ   ISNPFRE1                 NO, CHECK NEXT
         LA    R2,16(R2)                POINT TO CCW BEHIND SM-CCW
         ST    R2,PSCWPATH+4            SAVE OLD PATH
         LR    R2,R1                    AND FOLLOW
         B     CCWRETRY                 TIC-CCW
         SPACE
ISNPFRE1 ICM   R5,7,PSCWPATH+9          IS PATH WORD FREE
         BNZ   ISNPFRE2                 NO, CHECK NEXT
         LA    R2,16(R2)                NEW PATH CCW
         ST    R2,PSCWPATH+8            SAVE OLD PATH
         LR    R2,R1                    NEW PATH TO FOLLOW
         B     CCWRETRY                 FOLLOW TIC
         SPACE
ISNPFRE2 ICM   R5,7,PSCWPATH+13         IS PATH WORD FREE
         BNZ   CCWTSTCH                 NO, IGNORE NEW PATH
         LA    R2,16(R2)
         ST    R2,PSCWPATH+12
         LR    R2,R1
         B     CCWRETRY
         SPACE
CCWISTIC TM    PSCCWUNU,STATMOD         WAS PREVIOUS A STAT. MOD
         BO    NONOTIC                  YES, DO NOT FOLLOW TIC
         L     R0,0(R2)                 REAL TIC-TO ADDRESS
         BAL   R8,RTOVRTN               TRANSLATE TO VIRTUAL
         CR    R1,R2                    IS TIC-TO HIGHER
         BE    CCWSAME                  PREVENT TIC LOOP             RR
         BH    USCCWTIC                 YES, SET IT AS NEW
         LA    R9,0(R2)                 SAVE                         RG
         SL    R9,=F'8'                 SUBTRACT 8                   RG
         CR    R9,R1                    IS RESULT TIC LOOP           RG
         BE    CCWTSTCH                 YES,DO NOT LOOP              RG
         C     R1,PSCCWSTR              IS TIC TO WITHIN RANGE
         BL    USCCWTIC                 NO, USE TIC ADDRESS AS NEXT
         LA    R9,0(R2)                 POINT TO TIC CCW
         SL    R9,=F'24'                SET LOW LIMIT
         CR    R1,R9                    IS IT A TIC LOWER THAN -24
         BNL   CCWSAME                  NO, PREVENT LOOP             RR
         L     R9,PSUCB                 GET THE UCB
         TM    18(R9),X'50'             IS IT COMMUNICATION OR DISPLAY
         BNZ   USCCWTIC                 YES, SO FOLLOW TIC
*        THIS LINE IS DELETED                                        RR
USCCWTIC LR    R2,R1                    LOAD ADDRESS OF NEW CCW
         B     CCWRETRY                 AND FOLLOW TIC
         EJECT
UCBLOOK  DS    0H
         L     R1,16                    CVT ADDRESS
         USING CVT,R1
         L     R4,CVTILK1(R0)           IECILK1
         L     R5,CVTILK2(R0)           IECILK2
         DROP  R1
         SLDL  R6,24                    CHANNE VALUE FROM UNIT ADDRESS
         SR    R9,R9                    INSURE REGISTER IS ZERO
         IC    R9,0(R4,R6)              LOAD K VALUE
         SR    R6,R6                    CLEAR REGISTER
         SLDL  R6,4                     SHIFT CU VALUE FROM UNIT ADDR
         ALR   R6,R9                    ADD VALUE  T7607
         ALR   R6,R6                    AND DOUBLE T7607
         LH    R9,0(R4,R6)              L  VALUE
         SRL   R7,27                    GET TWICE UNIT
         SLL   R9,1                     DOUBLE L VALUE
         ALR   R7,R9                    ADD IT TO TABLE ENTRY
         ALR   R5,R7                    -> TABLE ENTRY
         LH    R6,0(R5)                 GET UCB ADDRESS
         BR    R12                      RETURN
         EJECT
RTOVRTN  DS    0H
         USING DMSCONST,DMSREG
         ST    R5,PSRSAVE               SAVE REGISTER 5
         BALR  R5,R0                    GET BASE
         USING *,R5                     ADDRESSABILITY
         LR    R15,R0                   PARM TO WORKREG
         L     R1,DMSPAGVT              -> PAGING VECTOR TABLE
         N     R15,DMSPAGMK             REMOVE UNUSED BITS
         SRL   R15,8                    NON IT IS RBN
         CH    R15,16(R1)               IS IT BELOW FIRST PFTE
         BL    RTVLOW                   YES, GO OUT
         CH    R15,18(R1)               IS IT ALLREADY A VIRTUAL ONE
         BH    RTVHIGH                  YES, GO OUT
         L     R1,DMSPFTP               -> PAGE FRAME TABLE
         LH    R1,2(R1,R15)             TAKE VBN OUT OF IT
         SLL   R1,8                     MOVE TO CORRECT PLACE
         N     R1,DMSPAGMK              REMOVE UNUSED BITS
         LR    R15,R0                   EXTRACT
         N     R15,DMSDISMK             DISPLACEMENT AND
         OR    R1,R15                   ADD IT
         SR    R15,R15                  INDICATE TRANSLATION DONE
         L     R5,PSRSAVE               RELOAD CALLERS REGISTER 5
         LA    R1,0(R1)                 CLEAR HIGH ORDER BYTE
         BR    R8                       RETURN
         SPACE
RTVLOW   EQU   *
RTVHIGH  LA    R15,4                    INDICATE NOT TRANSLATED
         LR    R1,R0                    REAL AND VIRT MAY BE SAME
         L     R5,PSRSAVE               RELOAD CALLERS REGISTER 5
         LA    R1,0(R1)                 CLEAR HIGH ORDER BYTE
         BR    R8                       RETURN
         DROP  R5
         EJECT
F4       DC    F'4'
F8       DC    F'8'
CCWMCNT  DC    X'0000FFFF'              MAXIMUM CCW COUNT
         LTORG
DATABIT  EQU   1                        DATA FOLLOW THIS CCW
IDABIT   EQU   2                        IDALIST FOLLOWS THIS CCW
CCWDC    EQU   128                      DATA CHAINING
CCWCC    EQU   64                       COMMAND CHAINING
CCWSKIP  EQU   16                       SUPPRESS DATA X-FER
CCWIDA   EQU   4                        CCW USES INDIRECT ADDRESSING
PSCWPATH EQU   PSUSER+152               4 WORDS FOR PATH CHAINING
PSCCW    EQU   PSUSER+168               CCW SAVE AREA
PSCCWSTR EQU   PSUSER+176               ADDRESS OF FIRST CCW
PSUCB    EQU   PSUSER+184               UCB ADDRESS OF THIS I/O EVENT
PSCCWCD  EQU   PSUSER+188               REAL COMMAND CODE
PSCCWUNU EQU   PSUSER+189               FLAG BYTE
*        B     '10000000'               STATUS MODIFIER CCW
*        B     '01000000'               CONTROL COMMAND
CONTCOM  EQU   128
STATMOD  EQU   64
PSTYPE   EQU   PSUSER+190               EVENT TYPE
*        B     '10000000'               SIO EVENT
*        B     '00000000'               I/O INTERRUPT
*        B     '01000000'               CSW COMPARE FLAG
*        B     '00100000'               CAN FORCE OP CODE F2         RF
PSIDACNT EQU   PSUSER+191               IDA-COUNT
PSRSAVE  EQU   PSUSER+200               SAVEAREA FOR RTVRTN
UNTPATCH DC    256X'00'                 UNT0 PATCH AREA
         END
