         PRINT NOGEN
         DMSMACRO TYPE=DSECT
         PRINT ON,GEN
LDC      TITLE 'D M S L D C  LOADER CONTROL ROUTINE'
DMSLDC   PGMSTART
         USING DMSCONST,DMSREG
         USING PSA,PSAREG
         L     DMSREG,=V(DMSCONST)      GET SHARED CONST
         ICM   R9,7,DMSVADP+1           -> TO SQA CONST
         BZ    REGOK                    NO SQA AVAILABLE
         LR    DMSREG,R9                GET SQA AS BASE
REGOK    TM    DMSFUNCT,DMSSTOP         IS STOP FUNCTION SELECTED
         BO    STOP                     YES, DO CLEANUP
         TM    DMSFUNCT,DMSMONIT        IS MONITOR SELECTED
         BO    MONITOR                  YES, CONNECT MONITOR
         LA    R15,16                   NOTHING TO DO
         ST    R15,RETCODE              SAVE RETURN CODE
         SPACE
RETURN   L     R13,4(R13)               GET OLD SAVE AREA
         L     R14,12(R13)              GET -> CALLERS RETURN
         L     R15,RETCODE              GET MY RETURN-CODE
         LM    R0,R12,20(R13)           GET OTHER REGISTERS
         BR    R14                      BACK TO CALLER
         EJECT
MONITOR  BAL   R14,CLEARTN              INSURE EVERITHING IS ZERO
         LA    R6,DMMNTR                MONITOR IS ALLWAYS LOADED
         BAL   R14,LOADRTN              GO AND LOAD IT
         CLI   DMUSR,BLANK              IS A USER ROUTINE TO BE LOADED
         BE    DMNOUSR                  NO, DO NOT LOAD
         LA    R6,DMUSR                 POINT TO RTN ENTRY
         BAL   R14,LOADRTN              LOAD RTN
         B     ALLOAD                   LOAD IS COMPLETE IF USER RTN
DMNOUSR  CLI   DMUNT+6,BLANK            IS A USER RTN TO BE LOADED
         BE    DMNOUNT                  NO UNIT RTN
         LA    R6,DMUNT                 LOAD
         BAL   R14,LOADRTN              ROUTINE
         B     DMNOSIO                  GO AROUND SIO AND IO LOADING
DMNOUNT  CLI   DMIOI+6,BLANK            IS I/O TO BE LOADED
         BE    DMNOIOI                  NO, DO NOT LOAD
         LA    R6,DMIOI                 POINT TO I/O ENTRY
         BAL   R14,LOADRTN              AND LOAD IT
DMNOIOI  CLI   DMSIO+6,BLANK            IS SIO TO BE LOADED
         BE    DMNOSIO                  NO, CHECK NEXT
         LA    R6,DMSIO                 POINT TO ENTRY AND
         BAL   R14,LOADRTN              LOAD IT
DMNOSIO  LA    R6,DMPGM                 POINT TO START OF NORMAL ENTR
         SR    R7,R7                    CLEAR REG
         IC    R7,DYNRTAB               GET ENTRY LENGTH
LOADLP   CLC   0(8,R6),=8C' '           IS END OF TABLE REACHED
         BE    ALLOAD                   YES, GO OUT OF LOOP
         CLI   6(R6),BLANK              ROUTINE TO BE LOADED
         BE    NEXTRTN                  NO, LOAD NEXT
         BAL   R14,LOADRTN              LOAD ROUTINE
NEXTRTN  LA    R6,0(R7,R6)              INCREMENT ENTRY ADDRESS
         B     LOADLP
         EJECT
ALLOAD   DS    0H
         SR    R5,R5                    CLEAR REGISTER 5
         SR    R7,R7                    CLEAR REGISTER 7
         IC    R7,DYNRTAB               GET SIZE OF TABLE ENTRY
         LA    R6,DMMNTR                AND -> TO TABLE
          LA   R8,13                    GET MODULE COUNT
ADDLOOP   EQU   *
         L     R4,12(R6)                GET SIZE OF ROUTINE
         LA    R5,0(R4,R5)              ADD MODULE SIZE
         LA    R6,0(R7,R6)              ADJUST TABLE POINTER
          BCT   R8,ADDLOOP
ADDED    ST    R5,DMSFIXSZ              STORE SIZE OF WHOLE MODULE
         DISABLE KEY=ZERO,MODE=SUP
         L     R0,DMSFIXSZ              GET SP-ID AND SIZE FOR GETMAIN
         GETMAIN RC,LV=(0),SP=SPID      GET STORAGE
         LTR   R15,R15                  IS CORE GOTTEN
         BZ    STOROK                   YES, CONTINUE
         ST    R15,RETCODE              SAVE RETURNCODE
         MESSAGE 14                     ISSUE MESSAGE AND
         B     RETURN                   GO BACK
         SPACE 3
STOROK   DS    0H
         ST    R1,DMSFIXAD              SAVE ADDRESS OF FIXED CORE
         LA    R2,0(R1)                 GET ADDRESS INTO REGISTER TWO
         LA    R6,DMMNTR                MONITOR IS ALWAYS TO BE MOVED
         BAL   R14,MOVELONG             MOVE MONITOR TO FIXED CORE
         CLI   DMUSR,BLANK              IS A USER MONITOR THERE
         BE    VMNOUSR                  NO, DO NOT MOVE
         LA    R6,DMUSR                 POINT TO TABLE ENTRY AND
         BAL   R14,MOVELONG             MOVE ROUTINE
         L     R6,DMUSR+16              GET ADDRESS OF ENTRY
         LA    R7,0(R6)                 OFFSET 00 IS EXTERNAL
         ST    R7,DMEXT+16              ENTRY ->
         LA    R7,4(R6)                 OFFSET 04 IS SVC
         ST    R7,DMSVC+16              ENTRY ->
         LA    R7,8(R6)                 OFFSET 08 IS PGM
         ST    R7,DMPGM+16              ENTRY ->
         ST    R7,DMPER+16              ENTRY -> PER=PGM
         ST    R7,DMMON+16              ENTRY -> MON=PGM
         ST    R7,DMDAT+16              ENTRY -> DAT=PGM
         LA    R7,12(R6)                OFFSET 12 IS MCH
         ST    R7,DMMCH+16              ENTRY ->
         LA    R7,16(R6)                OFFSET 16 IS I/O
         ST    R7,DMIOI+16              ENTRY ->
         LA    R7,20(R6)                OFFSET 20 IS S/O
         ST    R7,DMSIO+16              ENTRY ->
         LA    R7,24(R6)                OFFSET 24 IS DSP
         ST    R7,DMDSP+16              ENTRY ->
         B     ALLMOVED
VMNOUSR  DS    0H
         CLI   DMUNT+6,BLANK            IS A UNIT ROUTINE SPECIFIED
         BE    VMNOUNT                  NO, DO NOT MOVE
         LA    R6,DMUNT                 POINT TO TABLE ENTRY AND
         BAL   R14,MOVELONG             MOVE UNIT ROUTINE
         L     R6,DMUNT+16              GET ENTRY POINT OF UNIT RTN
         LA    R7,0(R6)                 OFFSET 00 IS S/O
         ST    R7,DMSIO+16              ENTRY ->
         LA    R7,4(R6)                 OFFSET 04 IS I/O
         ST    R7,DMIOI+16              ENTRU ->
         B     VMNOSIO                  GO AROUND MOVE OF S/O AND I/O
VMNOUNT  CLI   DMIOI+6,BLANK            IS I/O TO BE MOVED
         BE    VMNOIOI                  NO DO NOT MOVE
         LA    R6,DMIOI                 POINT TO TABLE ENTRY AND MOVE
         BAL   R14,MOVELONG             ROUTINE TO FIXED STORAGE
VMNOIOI  CLI   DMSIO+6,BLANK            IS SIO TO BE MOVED
         BE    VMNOSIO                  NO, DO NOT MOVE
         LA    R6,DMSIO                 POINT TO SIO RTN AND
         BAL   R14,MOVELONG             MOVE
VMNOSIO  LA    R6,DMPGM                 POINT TO FIRST NORMAL ENTRY
         SR    R7,R7                    CLEAR REGISTER
         IC    R7,DYNRTAB               GET LENGTH OF ENTRY
MOVELP   CLC   0(8,R6),=8C' '           IS END OF TABLE REACHED
         BE    ALLMOVED                 YES, GO OUT OF LOOP
         CLI   6(R6),BLANK              IS THIS TO BE MOVED
         BE    NXTMVE                   NO, DO NOT
         BAL   R14,MOVELONG             MOVE
NXTMVE   LA    R6,0(R7,R6)              POINT TO NEXT ENTRY
         B     MOVELP                   MOVE ALL RTN'S
ALLMOVED DS    0H
         SERILIZE WORD=CONLOCK
         TM    STARTFL1,PSWSAVED        ARE PSW ALREADY SAVED
         BO    PSWALLMV                 SO DO NOT SAVE AGAIN
         MVC   EXTNPSW(8),FLCENPSW      SAVE EXTERNAL NEW PSW
         MVC   SVCNPSWD(8),FLCSNPSW     SAVE SVC NEW PSW
         MVC   PGMNPSW(8),FLCPNPSW      SAVE PGM NEW PSW
         MVC   MCHNPSW(8),FLCMNPSW      SAVE MCH NEW PSW
         MVC   IOINPSW(8),FLCINPSW      SAVE I/O NEW PSW
         MVC   RESNPSW(8),FLCRNPSW      SAVE RESTART NEW PSW
         OI    STARTFL1,PSWSAVED
PSWALLMV L     R2,DMSCVTP               GET CVT ADDRESS
         USING CVT,R2
         L     R2,CVT0DS                -> DISPATCHER ENTRY
         DROP  R2
         LA    R3,X'ED4'(R2)            GET LENGTH OF DISPATCHER
         LA    R4,5                     ASSUME FIVE HOOKS
         LA    R6,DSPHOOK1              POINT TO FIRST TABLE ENTRY
DISPLOOP CLC   0(2,R2),=X'AF00'         SEARCH POSSIBLE HOOK
         BE    CHDSPHK                  COULD BE ONE
NEXTDISP LA    R2,2(R2)                 NO,CHECK NEXT
         CR    R3,R2                    STILL IN DISPATCHER
         BH    DISPLOOP                 YES,CONTINUE SEARCH
         OI    STARTFL2,NODISP          INDICATE NO DISPATCHER EVENTS
         XC    DSPHOOK1(72),DSPHOOK1    INDICATE NO DISPATCHER
         MESSAGE 15
         B     DISPDONE                 GO OUT OF LOOP
CHDSPHK  CLC   2(2,R2),=H'4'            MAX. VALUE IS 4
         BH    NEXTDISP                 NOT VALID, SEARCH NEXT
         CLC   2(2,R2),=H'1'            MIN. VALUE IS 1
         BL    NEXTDISP                 NOT VALID SEARCH NEXT
         MVC   4(4,R6),0(R2)            MOVE HOCK INSTR.TO CONST
         LA    R5,4(R2)                 INCREMENT FOR LPSW COMPARE
         ST    R5,0(R6)                 SAVE ADDRESS OF FUTURE INTERRPT
         MVI   0(R6),4                  INDICATE FOUR BYTE HOOK
         LA    R6,12(R6)                POINT TO NEXT TABLE ENTRY
         BCT   R4,NEXTDISP              TRY ALL HOOKS
         C     R9,=F'1234567'           IS SWITCH SET
         BE    DISPDONE                 YES, GO OUT
         L     R9,=F'1234567'           SET SWITCH
         L     R2,DMSCVTP               -> CVT
         USING CVT,R2
         L     R2,CVTEXP1               -> EXIT ENTRY
         DROP  R2
         LA    R3,X'320'(R2)            END SEARCH ADDRESS
         LA    R4,2                     SEARCH ONE HOOK
         LA    R6,DSPHOOK6              POINT TO EXIT HOOK
         BCT   R4,DISPLOOP              SEARCH HOOK
DISPDONE ICM   R2,7,DMSDSVP+1           -> TO DSS VECTOR TABLE
         BNZ   DSVOK                    POINTER IS PRESENT
         MVI   DMSREAS2,SYSBDSS1        HOOK NOT FOUND
BADSYS   OI    DMSFUNCT,DMSEOJ          DOWN LEVEL DMS MODULES
         MESSAGE 13
         FREE  WORD=CONLOCK
         LA    R15,16                   GET HIGH RETURN CODE
         B     LOADERR                  AND RETURN TO CALLER
         SPACE
DSVOK    CLC   0(3,R2),=C'DSV'          VERIFY DSSVT
         MVI   DMSREAS2,SYSBDSS2        HOOK NOT FOUND
         BNE   BADSYS                   BAD POINTER
         L     R3,X'88'(R2)             GET -> OF SID HOOK
         LA    R4,20                    SEARCH UP TO 40 BYTES
         MVI   DMSREAS2,SYSBDSIO        HOOK NOT FOUND
MCGTLP   CLC   0(4,R3),SIOHOOKI         SEARCH GTF SIO-HOOK
         BE    GOODSIO                  YES GO OUT
         LA    R3,2(R3)                 POINT TO NEXT
         BCT   R4,MCGTLP                AND RETRY
         B     BADSYS                   NOT FOUND
         SPACE
GOODSIO  MVC   SIOHOOK+4(4),0(R3)       MOVE HOOK INSTR TO CONST
         LA    R3,4(R3)                 POINT TO FUTURE INTRPT
         ST    R3,SIOHOOK               AND SAVE IT INTO CONST
         MVI   SIOHOOK,4                SET LENGTH OF HOOK
*        L     R3,X'A0'(R2)             BYPASS USELESS INSRUCTION    RO
         MVI   DMSREAS2,SYSBDVCP        HOOK NOT FOUND
         L     R3,16                    -> TO CVT                    RO
         L     R3,360(R3)               -> TO LPA DIRECTORY          RO
         LTR   R3,R3                    VALID ADDR                   RO
         BZ    BADSYS                   NO                           RO
VCPULOOP CLC   8(8,R3),=C'IEEVDSS '     IS IT ENTRY FOR VARY CPU HOO RO
         BE    LPAHKOK                  YES                          RO
         CLI   8(R3),X'FF'              END OF LPDE REACHED          RO
         BE    BADSYS                   YES,IEEVDSS NOT FOUND        RO
         LA    R3,40(R3)                STEP TO NEXT LPDE            RO
         B     VCPULOOP                 AND SEARCH                   RO
LPAHKOK  L     R3,16(R3)                GET ENTRY POINT (HOOK ADDR)  RO
         CLC   0(2,R3),DMSHOOK          IS IT DSS NOPR
         BNE   BADSYS                   NO, GO OUT
         LA    R9,PGFIXECB              POINT TO ECB
         PGFIX R,A=(R3),ECB=(R9)
          B     *+4(R15)                USE BRANCHTABLE
          B    NOPAGWT                  FIX REQUEST IS DONE
          B     PGNOTFXD                NOT SATISFIED
          B     PGFIXWT                 WAIT FOR COMPL.
          B     PGNOTFXD                NOT SATISFIED
PGFIXWT   XC   PGFIXECB(4),PGFIXECB     CLEAR ECB
          WAIT ECB=PGFIXECB
         CLI   PGFIXECB,BLANK           NORMAL COMPLETION
         BE    NOPAGWT                  YES,CONTINUE
FREEPGWD MESSAGE 18
         OI    DMSFUNCT,DMSEOJ+DMSTEST
          FREE WORD=CONLOCK
          B     LOADERR
PGNOTFXD ST     R15,RETCODE             SET RETURN CODE
          B     FREEPGWD                GO AND FREE WORD
NOPAGWT   EQU  *
         MVC   VCPUHK+4(2),0(R3)        MOVE NOPR TO CONST
         LA    R3,2(R3)                 POINT TO FUTURE INTRPT
         ST    R3,VCPUHK                AND SAVE ADDRESS
         MVI   VCPUHK,2                 SET LENGTH OF HOOK
         L     R3,=V(WRTECBL)           POINT TO WRT0
         LA    R9,PGFIXECB              MY FIX-ECB
         PGFIX R,A=(R3),ECB=(R9)        AND ISSUE PAGEFIX
         B     *+4(R15)                 USE BRANCHTABLE
         B     NOPAGWT1                 FIX REQUEST IS DONE
         B     PGNOTFXD                 NOT SATISFIED
         B     PGFIXWT1                 WAIT FOR COMPLETION
         B     PGNOTFXD                 NOT SATISFIED
PGFIXWT1 XC    PGFIXECB(4),PGFIXECB     CLEAR ECB
         WAIT  ECB=PGFIXECB             WAIT FOR COMLETION
         CLI   PGFIXECB,BLANK           NORMAL COMPLETION
         BE    NOPAGWT1                 YES, CONTINUE
         B     FREEPGWD                 NO,TERMINATE
NOPAGWT1 DS    0H
         L     R3,X'B0'(R2)             GET ACR-HOOK
         MVI   DMSREAS2,SYSBDACR        HOOK NOT FOUND
         CLC   0(2,R3),DMSHOOK          IS IT NOPR
         BNE   BADSYS                   NO, GO OUT
         MVC   IOACRHK+4(2),0(R3)       MOVE HOOK INSTR.TO CONST
         LA    R3,2(R3)                 ADDRESS OF INTERPT
         ST    R3,IOACRHK               AND SAVE
         MVI   IOACRHK,2                INDICATE TWO BYTE HOOK
         L     R3,X'BC'(R2)             RTM REFRAISH ->
         MVI   DMSREAS2,SYSBDRTM        HOOK NOT FOUND
         CLC   0(2,R3),DMSHOOK          IS IT NOPR
         BNE   BADSYS                   NO, GO OUT
         MVC   RTMHOOK+4(2),0(R3)       MOVE HOOK INSTR. TO CONST
         LA    R3,2(R3)                 POINT TO INTRPT
         ST    R3,RTMHOOK               AND SAVE IT
         MVI   RTMHOOK,2                INDICATE TWO BYTE HOOK
         L     R3,X'EC'(R2)             -> STOP CPU HOOK
         MVI   DMSREAS2,SYSBDCPU        HOOK NOT FOUND
         CLC   0(2,R3),DMSHOOK          IS IT NOPR
         BNE   BADSYS                   NO, GO OUT
         MVC   STOPHOOK+4(2),0(R3)      SAVE HOOK
         LA    R3,2(R3)                 INTRPT ->
         ST    R3,STOPHOOK              SAVE IT
         MVI   STOPHOOK,2               INDICATE TWO BYTE HOOK
         XC    DUMYHOOK(12),DUMYHOOK    CLEAR END TABLE ENTRY
         MVI   DMSREAS2,SYSOKHOK        ALL HOOKS WERE FOUND
         SPACE 3
         TM    DMMNTR+8,RLOADED+RMOVED  IS ROUTINE PRESENT
         BNO   BADSYS                   NO,TERMINATE
         L     R2,DMMNTR+16             GET ADDRESS OF MONITOR
         USING MRTABLE,R2               ASSIGN BASE FOR CONST TABLE
         L     R3,MRSIO                 GET OFFSET TO SIO-ENTRY
         LA    R4,0(R2,R3)              CALCULATE SIO ENTRY
         ST    R4,SIOHOOK+8             SAVE IT
         L     R3,MRDSP                 GET DISPATCHER ENTRY
         LA    R4,0(R2,R3)              CALCULATE DISPATCHER ENTRY
         ST    R4,DSPHOOK1+8            SET ENTRY OF DISPATCHER
         ST    R4,DSPHOOK2+8            SET ENTRY OF DISPATCHER
         ST    R4,DSPHOOK3+8            SET ENTRY OF DISPATCHER
         ST    R4,DSPHOOK4+8            SET ENTRY OF DISPATCHER
         ST    R4,DSPHOOK5+8            SET ENTRY OF DISPATCHER
         ST    R4,DSPHOOK6+8            SET ENTRY OF DISPATCHER
         L     R3,MRVCPU                GET OFFSET TO VARY CPU
         LA    R4,0(R2,R3)              CALCULATE ENTRY OF IT
         ST    R4,VCPUHK+8              AND STORE IT
         L     R3,MRACR                 GET I/O RESTART INTERUPT
         LA    R4,0(R2,R3)              CALCULATE REAL ENTRY
         ST    R4,IOACRHK+8             AND SAVE IT
         L     R3,MRRTM                 GET RTM ENTRY
         LA    R4,0(R2,R3)              CALCULATE ADDRESS
         ST    R4,RTMHOOK+8             SAVE IT
         L     R3,MRSTOP                GET STOPHOOK
         LA    R4,0(R2,R3)              GET EMTRY
         ST    R4,STOPHOOK+8            AND SAVE IT
         SERILIZE  WORD=DMSBUFFW,BUSY=BADSYS  FORCE OTHER CPU'S TO WAIT
         L     R2,DMMNTR+16             -> OF MONITOR
NMASK    STNSM ORMASK+1,BIT5            DISABLE I/O AND EXTERNAL
SVCPLOAD L     R9,PCCAVTP               GET ADDRESS VECTOR
         L     R3,MRSVC                 GET SVC OFFSET
         LA    R4,0(R2,R3)              POINT TO CODE
         LA    R5,16                    CPU 0-F
         STCM  R4,7,X'65'(R0)           MODIFY SVC NEW PSW
SVCPLOOP L     R8,0(R9)                 GET PCCA
         LA    R8,0(R8)                 CLEAR HIGH BYTE
         LTR   R8,R8                    IS THERE A PCCA
         BNZ   SVCPLOK                  YES, MODIFY
         LA    R9,4(R9)                 TAKE NEXT
         BCT   R5,SVCPLOOP              PROCESS ALL
         B     PGMPLOAD                 GO TO NEXT
SVCPLOK  EQU   *
         L     R7,24(R8)                GET VIRTUAL ADDRESS OF PSA
         STCM  R4,7,X'65'(R7)           MODIFY SVC NEW PSW
         LA    R9,4(R9)                 POINT TO NEXT PCCA
         BCT   R5,SVCPLOOP
         SPACE
PGMPLOAD L     R9,PCCAVTP               GET ADDRESS VECTOR TABLE
         L     R3,MRPGM                 GET PGM OFFSET
         LA    R4,0(R2,R3)              POINT TO CODE
         LA    R5,16                    CPU 0-F
         STCM  R4,7,X'6D'(R0)           MODIFY PGMNEW PSW
         OI    X'68'(R0),BIT5           ENABLE DAT
         MVC   PPGMFLIH-PSA(16),DMSMFLIH
PGMPLOOP L     R8,0(R9)                 -> PCCA
         LA    R8,0(R8)                 CLEAR HIGH BYTE
         LTR   R8,R8                    IS THERE A PCCA
         BNZ   PGMPLOK                  YES, MODIFY
         LA    R9,4(R9)                 TAKE NEXT
         BCT   R5,PGMPLOOP              PROCESS ALL
         B     RESPLOAD                 GO TO NEXT
PGMPLOK  EQU   *
         L     R7,24(R8)                GET VIRTUAL ADDRESS OF PSA
         DROP  PSAREG
         USING PSA,R7
         STCM  R4,7,X'6D'(R7)           MODIFY PGM NEW PSW
         OI    X'68'(R7),BIT5           ENABLE DAT
         MVC   PPGMFLIH(16),DMSMFLIH    MOVE PGM CODE TO PSA
         LA    R9,4(R9)                 POINT TO NEXT PCCA
         BCT   R5,PGMPLOOP
         SPACE
RESPLOAD L     R9,PCCAVTP               GET ADDRESS VECTOR TABLE
         L     R3,MRRES                 GET RESTART ENTRY OFFSET
         LA    R4,0(R2,R3)              POINT TO CODE
         LA    R5,16                    CPU 0-F
         STCM  R4,7,X'05'(R0)           MODIFY RESTART NEW PSW
RESPLOOP L     R8,0(R9)                 -> PCCA
         LA    R8,0(R8)                 CLEAR HIGH BYTE
         LTR   R8,R8                    IS THERE A PCCA
         BNZ   RESPLOK                  YES, MODIFY
         LA    R9,4(R9)                 TAKE NEXT
         BCT   R5,RESPLOOP              PROCESS ALL
         B     EXTPLOAD                 GO TO NEXT
RESPLOK  EQU   *
         L     R7,24(R8)                GET VIRTUAL ADDRESS OF PSA
         STCM  R4,7,X'05'(R7)           MODYFY RESTART NEW PSW
         LA    R9,4(R9)                 POINT TO NEXT PCCA
         BCT   R5,RESPLOOP
         SPACE
EXTPLOAD L     R9,PCCAVTP               GET PCCA VECTOR TABLE
         CLI   DMPER+6,BLANK            IS PER ON
         BNE   *+12                     YES, CONNECT HOOK
         CLI   DMEXT+6,BLANK            IS  EXTERNAL SELECTED
         BE    MCHPLOAD                 NO, CHECK NEXT
         L     R3,MREXT                 GET EXTERNAL OFFSET
         LA    R4,0(R2,R3)              CALCULATE ENTRY
         LA    R5,16                    CPU 0-F
         STCM  R4,7,X'5D'(R0)           MODIFY EXTERNAL NEW PSW
EXTPLOOP L     R8,0(R9)                 GET PCCA
         LA    R8,0(R8)                 CLEAR HIGH BYTE
         LTR   R8,R8                    IS THERE A PCCA
         BNZ   EXTPLOK                  YES, MODIFY
         LA    R9,4(R9)                 POINT TO NEST
         BCT   R5,EXTPLOOP              PROCESS ALL
         B     MCHPLOAD
EXTPLOK  EQU   *
         L     R7,24(R8)                GET VIRUTAL ADDRESS OF PSA
         STCM  R4,7,X'5D'(R7)           MODIFY EXTERNAL NEW PSW
         LA    R9,4(R9)                 POINT TO NEXT PCCA
         BCT   R5,EXTPLOOP
         SPACE
MCHPLOAD L     R9,PCCAVTP               GET PCCA VECTOR TABLE
         CLI   DMPER+6,BLANK            IS PER ON
         BNE   *+12                     YES, CONNECT HOOK
         CLI   DMMCH+6,BLANK            IS MCH SELECTED
         BE    IOIPLOAD                 NO,CHECK NEXT
         L     R3,MRMCH                 GET MCH OFFSET
         LA    R4,0(R2,R3)              CALCULATE ENTRY
         LA    R5,16                    CPU 0-F
         STCM  R4,7,X'75'(R0)           MODIFY MCH NEW PSW
         OI    X'70'(R0),BIT5           ENABLE DAT
MCHPLOOP L     R8,0(R9)                 -> PCCA
         LA    R8,0(R8)                 CLEAR HIGH BYTE
         LTR   R8,R8                    IS THERE A PCCA
         BNZ   MCHPLOK                  YES, MODIFY
         LA    R9,4(R9)                 TAKE NEXT
         BCT   R5,MCHPLOOP              PROCESS ALL
         B     IOIPLOAD
MCHPLOK  EQU   *
         L     R7,24(R8)                GET VIRTUAL ADDRESS OF  PSA
         STCM  R4,7,X'75'(R7)           MODIFY MCH NEW PSW
         OI    X'70'(R7),BIT5           ENABLE DAT
         LA    R9,4(R9)                 POINT TO NEXT PCCA
         BCT   R5,MCHPLOOP
         SPACE
IOIPLOAD L     R9,PCCAVTP               GET PCCA VECTOR TABLE
         CLI   DMPER+6,BLANK            IS PER ON
         BNE   IOIULOAD                 YES, SO CONNECT HOOK
         CLI   DMUNT+6,BLANK            IS UNIT SELECTED
         BNE   IOIULOAD                 YES, SET ENTRY
         CLI   DMIOI+6,BLANK            IS I/O SELECTED
         BE    HKPLOAD                  NO, GO TO HOOK PROCESSING
IOIULOAD L     R3,MRIOI                 GET I/O OFFSET
         LA    R4,0(R2,R3)              GET ENTRY ADDRESS
         LA    R5,16                    CPU 0-F
         STCM  R4,7,X'7D'(R0)           MODIFY I/O NEW PSW
IOIPLOOP L     R8,0(R9)                 -> PCCA
         LA    R8,0(R8)                 CLEAR HIGH BYTE
         LTR   R8,R8                    IS THERE A PCCA
         BNZ   IOIPLOK                  YES, MODIFY
         LA    R9,4(R9)                 TAKE NEXT
         BCT   R5,IOIPLOOP              PROCESS ALL
         B     HKPLOAD
IOIPLOK  EQU   *
         L     R7,24(R8)                GET ADDRESS OF PSA
         STCM  R4,7,X'7D'(R7)           MODIFY I/O NEW PSW
         LA    R9,4(R9)                 POINT TO NEXT PCCA
         BCT   R5,IOIPLOOP
         DROP  R7
         USING PSA,PSAREG
         SPACE
HKPLOAD  EQU   *
         L     R4,VCPUHK                GET ADDRESS OF HOOK INTERRUPT
         LRA   R5,0(R4)                 TEST AVAILABILITY
         BNE   RTMPLOAD                 GO TO NEXT
         SR    R5,R5                    CLEAR REGISTER
         LA    R5,VCPUHK                GET ADDRESS OF HOOK ENTRY
         BAL   R14,CONHOOK              GO TO HOOK CONNECT RTN
RTMPLOAD LA    R5,RTMHOOK               CONNECT RTM REFRAISH CODE
         BAL   R14,CONHOOK              GO TO HOOK ROUTINE
STOPLOAD LA    R5,STOPHOOK              POINT TO STOP/RESTART CPU
         BAL   R14,CONHOOK              GO TO HOOK ROUTINE
         CLI   DMPER+6,BLANK            IS PER ON
         BNE   *+12                     YES, CONNECT HOOK
         CLI   DMIOI+6,BLANK            IS ACR RETRY TO BE CONNECTED
         BE    SIOPLOAD                 NO,CHECK NEXT
         LA    R5,IOACRHK               YES  POINT TO ENTRY
         BAL   R14,CONHOOK              GO TO HOOK ROUTINE
SIOPLOAD CLI   DMUNT+6,BLANK            IS UNIT SELECTED
         BNE   SIOULOAD                 YES, SET ENTRY
         CLI   DMPER+6,BLANK            IS PER ON
         BNE   SIOULOAD                  YES, CONNECT HOOK
         CLI   DMSIO+6,BLANK            IS SIO TE BE SELECTED
         BE    DSPPLOAD                 NO, CHECK DISPATCHER
SIOULOAD LA    R5,SIOHOOK               POINT TO ENTRY
         BAL   R14,CONHOOK              AND CONNECT
DSPPLOAD CLI   DMPER+6,BLANK            IS PER TO BE CONNECTED
         BNE   DSPHKCON                 YES, CONNECT
         CLI   DMDSP+6,BLANK            IS DISPATCHER TO BE CONNECTED
         BE    ENDHOOK                  NO, CONNECTION COMPLETED
DSPHKCON DS    0H
         TM    STARTFL2,NODISP          NO DISPATCHER EVENTS
         BO    ENDHOOK                  THERE IS DISPATCHER NOT TO BE
         LA    R5,DSPHOOK1              POINT TO DISPATCHER
         BAL   R14,CONHOOK              AND CONNECT
         LA    R5,DSPHOOK2
         BAL   R14,CONHOOK
         LA    R5,DSPHOOK3
         BAL   R14,CONHOOK
         LA    R5,DSPHOOK4
         BAL   R14,CONHOOK
         LA    R5,DSPHOOK5
         BAL   R14,CONHOOK
         LA    R5,DSPHOOK6
         BAL   R14,CONHOOK
ENDHOOK  EQU   *
         FREE  WORD=DMSBUFFW            RESET SERIALIZATION
ORMASK   STOSM NMASK+1,0                ENABLE THIS SYSTEM
         FREE  WORD=CONLOCK             RESET SERIALIZATION
         XC    RETCODE(4),RETCODE       INDICATE CONNECTION DONE
         B     RETURN                   GO BACK TO CALLER
         EJECT
CONHOOK  SR    R6,R6                    CLEAR REGISTER 6
         IC    R6,0(R5)                 GET LENGTH OF HOOK INTO R6
         LR    R7,R6                    GET SAME VALUE INTO 7
         LNR   R7,R7                    GET LENGTH NEGATIVE
         L     R8,0(R5)                 GET ADDRESS OF HOOK INTERRUPT
         LA    R8,0(R8)                 MAKE IT POSITIVE
         ALR   R8,R7                    SUBTRACT LENGTH OF HOOK
         LA    R9,DMSHOOK+4             POINT TO HOOK
         ALR   R9,R7                    SUBTRACT LENGTH OF HOOK
         BCTR  R6,R0                    SUBTRACT 1 FOR EXECUTE
         EX    R6,HOOKMOVE              MOVE HOOK TO PLACE
         BR    R14                      RETURN TO CALLER
HOOKMOVE MVC   0(1,R8),0(R9)            EXECUTED MOVE INSTRUCTION
         EJECT
STOP     EQU   *
         XC    DUMYHOOK(12),DUMYHOOK    FORCE ZERO ENTRY
         CLI   RTMHOOK,0                IS DMS DISCONNECTED
         BE    DELROUT                  YES,DELETE ROUTINES
         TM    DMMNTR+8,RLOADED+RMOVED  IS MONITOR PRESENT
         BNO   USVMNTR                  USE VIRTUAL ROUTINE
         L     R2,DMMNTR+16             GET ADDRESS OF MONITOR
DSCON    L     R3,MRDSCN                GET DISCONNECT ROUTINE
          LA    R3,0(R2,R3)             POINT TO RTN
         BAL   R14,0(R3)                GO AND DISCONNECT
         B     DELROUT                  CONTINUE
USVMNTR  L     R2,DMMNTR+8              GET ADDRESS OF MONITOR
         B     DSCON                    AND GO TO HIM
DELROUT  L     R5,DMSFIXSZ              GET MODULES SIZE
         LTR   R5,R5                    IS  STORAGE AVAILABLE
         BZ    STORFREE                 DO NOT FREEMAIN
         L     R1,DMSFIXAD              GET ADDRESS OF AREA
         LTR   R1,R1                    IS IT ZERO
         BZ    STORFREE                 YES, DO NOT FREEMAIN
         MVI   DMSFIXSZ,SPID            SET SUBPOOL ID
         L     R0,DMSFIXSZ              GET SPOOLID AND LENGTH
         FREEMAIN R,LV=(0),A=(1)        FREE STORAGE
STORFREE DS    0H
         SR    R7,R7                    CLEAR REGISTER
         ST    R7,DMSFIXSZ              CLEAR LENGTH
         TM    STARTFL1,STAENT          WAS STAE ENTERED
         BO    RTNFREED                 YES, GO OUT OF DELETE
         TM    DMSFUNCT,DMSEOJ          IS DMS TO BE TERMINATED
         BO    RTNFREED                 YES,DO NOT DELETE
         L     R5,DMMNTR+8              GET VIRTUAL RTN
         LA    R5,0(R5)                 CLEAR HIGH BYTE
         LTR   R5,R5                    IS MONITOR PRESENT
         BZ    DLNOMNTR                 DO NOT DELETE MONITOR
         LA    R6,DMMNTR                GET MONITOR ADDRESS
         BAL   R14,DELRTN               AND DELETE
DLNOMNTR CLI   DMUSR,BLANK              WAS A USER-RTN LOADED
         BE    DLNOUSR                  NO, DO NOT DELETE
         LA    R6,DMUSR                 POINT TO USER-MONITOR
         BAL   R14,DELRTN               AND DELETE
DELREF   MVC   DMUSR(8),=8C' '          CLEAR USER NAME
         LA    R6,DMUNT                 POINT TO FIRST ROUTINE
         IC    R7,DYNRTAB               GET ENTRY LENGTH
DLREFRLP CLC   0(8,R6),=8C' '           END OF TABLE REACHED
         BE    RTNFREED                 YES GO OUT OF LOOP
         MVI   6(R6),BLANK              CLEAR ROUTINE ID
         XC    8(12,R6),8(R6)           CLEAR ADDRESSES
         LA    R6,0(R7,R6)              POINT TO NEXT ENTRY
         B     DLREFRLP                 AND CLEAR
DLNOUSR  CLI   DMUNT+6,BLANK            WAS A SPECIAL UNIT RTN LOADED
         BE    DLNOUNT                  NO, DO NOT  DELETE
         LA    R6,DMUNT                 POINT TO ENTRY
         BAL   R14,DELRTN               AND DELETE
         B     DLNOSIO                  CONTINUE
DLNOUNT  CLI   DMIOI+6,BLANK            IS I/O RTN TO BE DELETED
         BE    DLNOIOI                  NO, DO NOT DELETE
         LA    R6,DMIOI                 POINT TO RTN ENTRY AND
         BAL   R14,DELRTN               DELETE
DLNOIOI  CLI   DMSIO+6,BLANK            IS THERE A SIO RTN TO BE LOADED
         BE    DLNOSIO                  NO, DO NOT DELETE
         LA    R6,DMSIO                 POINT TO ENTRY AND
         BAL   R14,DELRTN               DELETE
DLNOSIO  SR    R7,R7                    GET LENGTH OF ENTRY
         IC    R7,DYNRTAB               INTO REG
         LA    R6,DMPGM                 POINT TO FIRST NORMAL ENTRY
DLLOOP   CLC   0(8,R6),=8C' '           END OF TABLE REACHED
         BE    DELREF                   YES, DO CLEANUP
         CLI   6(R6),BLANK              IS IT A LOADED RTN
         BE    DLNEXT                   NO, GET NEXT
         BAL   R14,DELRTN               DELETE
DLNEXT   LA    R6,0(R7,R6)              POINT TO NEXT ONE
         B     DLLOOP                   AND DELETE
         SPACE
RTNFREED DS    0H
         B     RETURN
         EJECT
LOADRTN  DS    0H
         LOAD  EPLOC=(R6),ERRET=LOADERR
         STCM  R0,7,9(R6)               SAVE ENTRY -> INTO TABLE
         MVI   8(R6),RLOADED            INDICATE ROUTINE IS LOADED
         ST    R1,12(R6)                STORE AUTHORIZATION CODE
         SLL   R1,3                     GET ACTUAL LENGTH
         STCM  R1,7,13(R6)              SAVE SIZE OF RTN
         BR    R14                      GO  BACK TO CALLER
         SPACE
LOADERR  MVI   RETCODE+3,4              TERMINATE
         B     RETURN                   DMS
         SPACE
CLEARTN  LA    R7,13                    LOOP COUNT FOR 13 ROUTINES
         SR    R8,R8                    CLEAR LENGTH REG
         IC    R8,DYNRTAB               GET ENTRY LENGTH
         LA    R6,DMMNTR                GET START OF TABLE
CLEARLOP XC    8(12,R6),8(R6)           CLEAR ADDRESSES AND SIZE
         LA    R6,0(R8,R6)              INCREMENT BY TABLE LENGTH
         BCT   R7,CLEARLOP              CLEAR ALL
         BR    R14                      RETURN
         SPACE
MOVELONG ST    R2,16(R6)                SAVE -> TO ROUTINE IN TABLE
         L     R3,12(R6)                GET LENGTH TO BE MOVED
         LA    R5,0(R3)                 GET LENGTH WITH ZERO HIGH BYTE
         LR    R9,R5                    SAME LENGTH TO SECOND OPERAND
         LR    R4,R2                    GET TO ADDRESS
         L     R8,8(R6)                 GET FROM ADDRESS
         MVCL  R4,R8                    MOVE ROUTINE
         OI    8(R6),RMOVED             INDICATE  RTN MOVED
         LA    R2,0(R3,R2)              POINT TO NEW ADDRESS
         BR    R14
         SPACE
DELRTN   DELETE EPLOC=(R6)              DELETE RTN
         XC    8(12,R6),8(R6)           CLEAR ADDRESS
         BR    R14                      RETURN TO CALLER
         EJECT
         LTORG
         END   DMSLDC
