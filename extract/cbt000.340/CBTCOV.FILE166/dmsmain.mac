         PRINT NOGEN
         DMSMACRO TYPE=DSECT
         PRINT ON,GEN
MAIN     TITLE 'D M S  M A I N  C S E C T'
*****************************************
*                                       *
*                                       *
*        D M S M A I N                  *
*                                       *
*                                       *
*                                       *
*****************************************
         SPACE
DMSMAIN  PGMSTART
         USING DMSCONST,DMSREG          AND ASSIGN BASE
         USING PSA,PSAREG
         TM    DMSFUNCT,DMSEDT          IS EDIT SPECIFIED
         BO    TESTF                    YES, BYPASS INITIALIZATION
MAIN000  LA    DMSREG,0(DMSREG)         CLEAR HIGH ORDER BYTE (FLAG)
         C     DMSREG,DMSVADP           IS SQA PAGE PRESENT
         BE    TESTF                    YES,ALL IS INITIALIZED
         ENQ   (QNAME,RNAME,,8,SYSTEM),RET=TEST IS DMS RUNNING
         LTR   R15,R15
         BZ    ENQ                      NO, GO AND ENQUEUE
         MESSAGE 27
         OI    DMSFUNCT,DMSEOJ
         B     TESTF
         SPACE
DSSACTIV MESSAGE 17                     ISSUE ERROR MESSAGE
         OI    DMSFUNCT,DMSEOJ          FORCE TERMINATION
         B     TESTF                    GO AND DO CLEANUP
         SPACE
ENQ      ENQ   (QNAME,RNAME,,8,SYSTEM),RET=HAVE
         OI    STARTFL1,ENQDONE         INDICATE ENQUEUE IS DONE
         ENQ   (AHLQNAME,AHLRNAME,E,3,SYSTEM),RET=USE
         LTR   R15,R15                  IS IT OK
         BZ    GTFOK                    YES CONTINUE
         MESSAGE 16
         OI    DMSFUNCT,DMSEOJ          FORCE TERMINATION
         B     TESTF                    DO CLEANUP
         SPACE
GTFOK    OI    STARTFL1,GTFENQ
         SPACE
NOENQ    EQU   *
STAE     STAE  STAERTN                  SET UP STAE FOR TEST PARM
         LTR   R15,R15                  COULD SCB BE CREATED
         BZ    STAE001                  YES,GO AND CONTINUE
         MESSAGE 11                     WRITE MSG
         B     MAIN001                  GO AROUND SETTING OF FLAG
STAE001  OI    STARTFL1,STAEDONE        SET STAE DONE FLAG
MAIN001  CKAPF MOD=DMSTRACE             CHECK AUTHORIZATION
         B     *+4(R15)                 USE BRANCHTABLE
         B     APFOK                    AUTHORIZAITION IS OK
         B     APFNOK                   PGM IS NOT AUTHORIZED
APFNOK   MESSAGE 10                     WRITE  MESSAGE
         LA    R15,12                   RETCODE IS I2
         ST    R15,RETCODE              SAVE RETURNCODE
TERMINAT OI    DMSFUNCT,DMSEOJ          REQUEST TERMINATION
         B     TESTF
APFOK    DISABLE                        DISABLE
         GETPAGE                        GET SQA PAGE
         LTR   R15,R15                  WAS PAGE GOTTEN
         BZ    PAGEOK                   YES, GO AND CONTINUE
PAGENOK  MESSAGE 12
         MVI   RETCODE+3,16             SET NONZERO RETURNCODE
         B     TERMINAT                 TERMINATE DMS
NOKISPSA MESSAGE 13
         MVI   RETCODE+3,13
         MVI   DMSREAS2,SYSBDPSA        PSA NOT ZERO
         B     TERMINAT
PAGEOK   LRA   R4,0(R0,R1)              GET REAL ADDRESS
         BNE   PAGENOK                  AND STOR IT INTO CONST
         ST    R4,DMSRADP               ALSO
         ST    R1,DMSVADP               SAVE  VIRTUAL ADDRESS
         LR    R4,R1                    SQA PAGE INTO REGISTER 4
         LR    R5,DMSREG                CSECT INTO REGISTER 5
         L     R2,DMSLNGT               GET ACTUAL LENGTH OF CONST
         SRL   R2,3                     DMSCONST HAS DWORD BOUND.
XFERLOOP LM    R6,R7,0(R5)              GET 8 BYTES OF CONST AND
         STM   R6,R7,0(R4)              STORE INTO SQA
         LA    R5,8(R5)                 INCREASE ADDRESS BY 8
         LA    R4,8(R4)                 INCREASE ADDRESS BY 8
         BCT   R2,XFERLOOP              MOVE ALL
         L     DMSREG,DMSVADP           ASSIGN NEW CONST
         CLC    DMSMFLIH(8),PPGMFLIH    WAS DMS ACTIVE BEFORE
         BE    CHKCPU                   YES, CONTINUE
         LA    R1,192                   LOAD LOOP COUNT
         SR    R2,R2                    CLEAR REGISTER
         LA    R3,PSLPSW                POINT TO START OF MYPSA
VERLOOP  CL    R2,0(R3)                 IS IT ZERO
         BNE   NOKISPSA                 NO, ISSUE MESSAGE
         LA    R3,4(R3)                  INCREMENT BY FOUR
         BCT   R1,VERLOOP               VERIFY ALL OF MYPSA
CHKCPU   L     R1,16                    GET CVT ADDRESS
         ST    R1,DMSCVTP               STORE CVT POINTER INTO CONST
         SL    R1,=F'8'                 POINT TO PREFIX
         MVC   DMSRELS1(8),0(R1)        AND SAVE IT TO CONST
         L     R1,X'41C'(R1)            ADDRESS OF IHASU BIT STRING
         LTR   R1,R1                    IS STRING PRESENT
         BNP   *+10                     NO, DO NOT MOVE
         MVC   DMSSULEV(14),0(R1)       YES, MOVE STRING
         L     R2,PSAAOLD(R0)            GET
         ST    R2,DMSASCBP              ASCB ADDRESS
         L     R3,PSATOLD(R0)           GET
         ST    R3,DMSTCBP               TCB ADDRESS
         MVC   DMSRBP(4),0(R3)          -> RB
         TM    DMSSULEV+6,X'20'         IS SU 50 INSTALLED
         BNZ   NOKISPSA                 YES, TERMINATE
         L     R3,DMSCVTP               -> CVT
         USING CVT,R3
         L     R4,CVTPVTP               -> PVT
         ST    R4,DMSPAGVT              SAVE IT TO CONST
         L     R4,12(R4)                -> PAGE FRAME TABLE
         ST    R4,DMSPFTP               SAVE IT TO CONST
         L     R4,CVTEORM               -> HIGHEST REAL STORAGE
         ST    R4,HIMACH                SAVE IT TO CONST
         L     R4,CVTPCCAT              GET ADDRES OF CPU VECTOR TABLE
         ST    R4,PCCAVTP               SAVE CONFIG. VECTOR TABLE
         SR    R8,R8                    CLEAR REGISTER FOR COUNT
         XC    CPUBLKS(64),CPUBLKS      SET CPU-BLOCK POINTERS TO ZERO
         LA    R7,16                    PROCESS ALL CPU'S
CPULP    L     R6,0(R4)                 GET NEXT PCCA
         LTR   R6,R6                    IS THERE A PCCA
         BZ    NOPCCA                   NO,DO NOT BUMP COUNT
         LA    R8,1(R8)                 YES, BUMP COUNT BY ONE
NOPCCA   LA    R4,4(R4)                 POINT TO NEXT
         BCT   R7,CPULP                 PROCESS ALL
         STCM  R8,1,CPUNUM              SAVE NUMBERS OF CPU'S
ENDCPU   L     R5,CVTCSD                GET CSD POINTER
         DROP  R3
         TM    23(R5),BIT0              IS IT A MP
         BO    CPUMULT                  YES,GO SET MP FLAG
         OI    CPUFLG,CPUUP             NO, SET UNI-PROCESSOR
         B     *+8                      GO AROUND
CPUMULT  OI    CPUFLG,CPUMP             SET MP FLAG
         SPACE
         L     R4,DMSASCBP              GET ASCB-ADDRESS
         OI    103(R4),X'01'            SET MEMORY NOT SWAPPABLE
         OI    43(R4),X'F0'             SET DISP-PRIORITT TO 240
         L     R8,DMSCVTP               GET -> CVT
         USING CVT,R8
         L     R9,CVTEXT2               GET CVT EXTENSION
         DROP  R8
         L     R8,0(R9)                 GET DSSVT
         ST    R8,DMSDSVP               SAVE ADDRESS
         SR    R8,R8                    CLEAR REGISTER
         LA    R9,CPUBLKS               POINT TO CPU-BLOCK TABLE
         ICM   R8,1,CPUNUM              GET NUMBER OF CPU'S
         BZ    CPUPNOK                  DO NOT CAUSE LOOP
CPUPAGLP GETPAGE
         LTR   R15,R15                  WAS PAGE GOTTEN
         BZ    CPUPOK                   YES, CONTINUE
CPUPNOK  MESSAGE 12                     WRITE  MESSAGE AND
         B     TERMINAT                 TERMINAT
CPUPOK   ST    R1,0(R9)                 SAVE ADDRESS OF COU-BLOCK PAGE
         ST    DMSREG,0(R1)             SAVE CONST INTO CPUBLK
         LA    R9,4(R9)                 POINT TO NEXT BLOCK
         BCT   R8,CPUPAGLP              GET BLOCK FOR ALL CPU'S
         SR    R8,R8                    CLEAR REGISTER
         IC    R8,CPUNUM                GET NUMBER OF CPU'S
         LA    R9,CPUBLKS               GET POINTER TO CPU-BLOCK TABLE
         L     R7,PCCAVTP               GET POINTER TO VECCOR TABLE
         LA    R6,16                    CPU 0 - F
INITLP   L     R4,0(R9)                 POINT TO SQA CPU BLOCK
         LTR   R4,R4                    MUST
         BZ    CPUPNOK                  DO NOT CAUSE LOOP
INITLPNT L     R5,0(R7)                 TAKE PCCA POINTER
         LTR   R5,R5                    IS THERE ONE
         BNZ   NEXTINIT                 YES, CONTINUE
         LA    R7,4(R7)                 TAKE NEXT
         BCT   R6,INITLPNT              AND PROCESS
         B     INALLDON                 CONTINUE
NEXTINIT L     R2,24(R5)                -> OF PSA
         XC    PSCLOCK-PSA(16,R2),PSCLOCK-PSA(R2)
         MVI   PSADMSF-PSA(R2),0        CLEAR DMS FLAG
         ST    R4,PSCPUBLK(R2)          SAVE PSA ADDRESS
         CLC   PSACPUPA(2),16(R5)       IS IT MY CPU
         BNE   *+8                      NO, DO NOT MODIFY
         ST    R4,PSCPUBLK              YES, SAVE CPU-BLOCK
         ST    DMSREG,PSACONST(R2)      CONST ADDRESS TO PSA
         LA    R7,4(R7)                 NEXT
         LA    R9,4(R9)                 NEXT BLOCK
         BCTR  R6,R0                    SUBTRACT ONE
         BCT   R8,INITLP                GET NEXT ONES
INALLDON EQU   *
         ST    DMSREG,PSACONST          CONST ADDRESS TO PSA
         LA    R6,16                    CPU 0-F
         L     R7,PCCAVTP               -> VECTOR TABLE
CONLOOP  L     R9,0(R7)                 -> PCCA
         LA    R9,0(R9)                 CLEAR HIGH BYTE
         LTR   R9,R9                    IS THERE A PCCA
         BNZ   CONOK                    YES, MODIFY
         LA    R7,4(R7)                 POINT TO NEXT
         BCT   R6,CONLOOP               PROCESS ALL
         B     CONDONE                  GO OUT
CONOK    L     R9,24(R9)                -> TO PSA
         ST    DMSREG,PSACONST(R9)      -> TO DMSCONST
         BCT   R6,CONLOOP
CONDONE  EQU   *
         ST    DMSREG,PSACONST          CONSTANT TO PSA
         SR    R6,R6                    CLEAR REGISTER
          L     R8,DMSBWNTD             IS BUFFER VALUE SELECTED
          LTR   R8,R8                    IS IT
          BNZ   *+8                     YES, DO NOT LOAD
          L     R8,DMSBDFLT             GET DEFAULT VALUE
          C     R8,DMSMINBF             IS IT OK
          BNL   *+8                     YES USE IT
         L      R8,DMSMINBF             NO, LOAD MINIMUM
BVALOK   LR    R7,R8                    GET BUFFER VALUE INTO REGISTER
         SRL   R7,1                     GET HALF OF IT
         ST    R8,DMSBDFLT              SAVE DEFAULT TAKEN
         IC    R6,CPUNUM                GET NUMBERS OF CPU
         B     BCTINST                  GO ASSUME 1 CPU
BCTLP    LA    R8,0(R8,R7)              INCREASE FOR NEXT CPU
BCTINST  BCT   R6,BCTLP                 GO TO INCREASE
         ST    R8,DMSBWNTD              SAVE NUMBER OF WANTED BUFFERS
         XC    DMSBALC(4),DMSBALC       SET NUMBER OF ALLOCKTED TO ZERO
         LA    R7,DMSFBUFF              POINT TO FIRST BUFFER ADDRESS
         SR    R6,R6                    CLEAR REGISTER
         PRINT NOGEN
BUFFLP   GETPAGE                        GET SQA  PAGE
         PRINT GEN
         LTR   R15,R15                  IS  PAGE GOTTEN
         BNZ   BUFFNOK                  NO, CHECK FOR DEFAULT
         LA    R1,0(R1)                 CLEAR HIGH ORDER BYTE
         ST    R1,0(R7)                 CHAIN IT
         LA    R6,1(R6)                 BUMP  BUFFER COUNT BY ONE AND
         ST    R6,DMSBALC               STORE IT INTO CONST
         LR    R7,R1                    POINT TO NEXT
         BCT   R8,BUFFLP
BUFFNOK  L     R5,DMSFBUFF              GET FIRST BUFFER
         ST    R5,0(R7)                 COMPLETE CHAINING OF THE BUFFS
         C     R6,DMSBWNTD              ARE  ALL BUFFERS GOTTEN
         BE    BUFFOK                   YES, DONT ISSUE MSG
         MESSAGE 12                     ISSUE MSG
         L     R6,DMSBALC               GET NUMBER OF PAGES GOTTEN
         C     R6,DMSBDFLT              DO WE HAVE REQUIRED AMOUNT
         BNL   BUFFOK                   YES, CONTINUE
         OI    DMSFUNCT,DMSSTOP         NO, SET STOP
         B     STOP                     GO AND RESET
BUFFOK   EQU   *
         L     R5,DMSFBUFF              INITIALIZE
         ST    R5,DMSWRBUF              BUFFER
         ST    R5,DMSDISBF              POINTERS
         EJECT
TESTF    EQU   *
         TM    DMSFUNCT,DMSEOJ          END OF JOB SELECTED
         BNO   NEXTF                    NO, DO NOT SET STOP
         OI    DMSFUNCT,DMSSTOP         YES, SET STOP BIT
NEXTF    TM    DMSFUNCT,DMSSTOP         IS STOP SELECTED
         BO    STOP                     YES, PROCESS STOP
         TM    DMSFUNCT,DMSEDT          IS EDIT SELECTED
         BO    EDIT                     YES,PROCESS EDIT
         TM    DMSFUNCT,DMSMONIT        MONITOR  MUST BE SELECTED
         BO    MONITOR                  YES, GO TO MONITOR
NOGOGO   OI    DMSFUNCT,DMSEOJ          INVALID FUNCTION
         LA    R15,16                   RETURN CODE IS 16
         ST    R15,RETCODE              SAVE RETURNCODE
         B     TESTF                    GO AND STOP
         EJECT
EDIT     EQU   *
         L     DMSREG,=V(DMSCONST)      EDIT USES ORIGINAL CONST
         LA    R4,DMEDIT                POINT TO EDIT ROUTINE NAME
         LOAD  EPLOC=(R4),ERRET=EDITERR
         ST    R0,DMEDIT+8              STORE ROUTINE ADDRESS INTO
         LR    R15,R0                   LOAD ENTRY POINT OF EDIT
         BALR  R14,R15                  GOTO EDIT
         SPACE
         LA    R4,DMEDIT                POINT TO EDIT ROUTINE NAME
         L     R5,DMEDIT+8              GET ROUTINE ADDRESS
         LTR   R5,R5                    IS IT LOADED
         BZ    EDITERR                  NO, DO NOT DELETE
         DELETE EPLOC=(R4)
         XC    DMEDIT+8(4),DMEDIT       CLEAR ROUTINE ADDRESS
EDITERR  EQU   *
RETURN   L     R13,4(R13)               RETURN
         L     R14,12(R13)              TO
         L     R15,RETCODE              CALLER
         LM    R0,R12,20(R13)
         BR    R14
         EJECT
MONITOR  DS    0H
         L     R15,DMLDC+8              GET LOADER ADDRESS
         BALR  R14,R15                  AND  GO TO HIM TO LOAD
         LTR   R15,R15                  ANYTHING OK
         BZ    ENDDMS                   YES, GO AND CONTINUE
         OI    DMSFUNCT,DMSSTOP         NO, SET STOP BIT
         B     TESTF                    DO CLEANUP
         EJECT
STOP     EQU   *
         L     DMSREG,=V(DMSCONST)      GET VIRTUAL CONST
         ICM   R5,7,DMSVADP+1           GET  SQA  CSECT, IS THERE ONE?
         BZ    NOCONST                  THERE IS NO SQA CONST PAGE
          DROP DMSREG
          USING DMSCONST,R5
         TM    PGFIXECB,BLANK            WAS PAGE FIXED
         BNO   NOPAGFR                  NO, DO NOT FREE
          L     R4,VCPUHK               GET HOOK INTRPT
          BCTR R4,R0                    SUBTRACT
          BCTR R4,R0                    TWO
          LA    R4,0(R4)                CLEAR HIGH BYTE
         LA    R2,PGFIXECB
         PGFREE R,A=(R4),ECB=(R2)
         MVI   PGFIXECB,0               CLEAR ECB
          DROP R5
          USING DMSCONST,DMSREG
NOPAGFR  EQU   *
         LR    R4,DMSREG                YES, DO NOT DESTROT CONSTREG
         L     R2,DMSLNGT               GET LENGTH OF CONST
         SRL   R2,3                     DIVIDE BY EIGHT
MOVELOOP LM    R6,R7,0(R5)              GET EIGHT BYTES
         STM   R6,R7,0(R4)              AND STORE THEM BACK
         LA    R5,8(R5)                 GET NEXT
         LA    R4,8(R4)                 ADDRESS
         BCT   R2,MOVELOOP              WHOLE CSECTISTO BE MOVED
         L     R4,DMSVADP               POINT TO PAGE IN DEFAULT REG.
         XC    DMSVADP(4),DMSVADP       INDICATE CONST IS FREED
         RELPAGE
NOCONST  EQU   *
         LA    R5,CPUBLKS               POINTTO TABLE OF CPU BLOCKS
         L     R8,0(R5)                 POINT  REGISTER  8  TO  BLOCK
         LTR   R8,R8                    IS THERE A BLOCK
         BZ    ENDBLOCK                 NO, DONT  FREE
GETMVE   GETMAIN EC,LV=4096,A=MWORK,SP=1,BNDRY=PAGE
         LTR   R15,R15                  STORAGE GOTTEN
         BZ    MOVELONG                 YES, MOVE
         OI    STARTFL1,GETFAIL         INDICATE  GETMAIN  FAICED
         SR    R1,R1                    SET ADDRESS TO 0
         B     FREEALL                  DO  NOT  MOVE
MOVELONG L     R1,MWORK                 ADDRESS OF
         LR    R2,R1                    GOTTEN CORE
         L     R3,PAGESIZE              GET LENGTH TO BE MOVED
         LR    R9,R3                    IN BOTH COUNT REGS.
         MVCL  R2,R8                    MOVE  WHOLE PAGE
FREEALL  L     R4,0(R5)                 POINT TO BLOCK TO BE FREED
         ST    R1,0(R5)                 CHAIN OR CLEAR
         RELPAGE                        FREE  PAGE
         LA    R5,4(R5)                 POINT TO NEXT BLOCK
         L     R8,0(R5)                 GET NEXT BLOCK
         LTR   R8,R8                    IS THERE  A BLOCK
         BZ    ENDBLOCK                 NO, GO OUT
         SR    R1,R1                    CLEA REGISTER
         TM    STARTFL1,GETFAIL         IS GETMAIN FAILED
         BO    FREEALL                  YES, DO  FREEMAIN ONLY
         B     GETMVE                   NO, GET STORAGE
ENDBLOCK EQU   *
         XC    BUFFWORK(24),BUFFWORK    CLEAR WORK SPACE
         LM    R2,R4,DMSFBUFF           GET BUFFER POINTERS
         STM   R2,R4,BUFFWORK+12        AND SAVE
         LA    R2,0(R2)                 CLEAR HIGH ORDER BYTE
         LR    R8,R2                    SAME INTO R8
         LTR   R8,R8                    IS THERE A BUFFER
         BZ    NODATB
         LA    R3,BUFFWORK              POINT TO FIRST NEW BUFFER
FATLOOP  TM    STARTFL1,GETFAIL         CAN GETMAIN BE OK
         BO    FREONLY                  NO, FREE ONLY
         GETMAIN EC,LV=4096,A=MWORK+4,SP=1,BNDRY=PAGE
         L     R1,MWORK+4               -> OF CORE
         LTR   R15,R15                  SUCCESSFULL GETMAIN
         BZ    SPACEOK                  YES, CONTINUE
         OI    STARTFL1,GETFAIL         NO, INDICATE NO STORAGE
         B     FREONLY
SPACEOK  ST    R1,0(R3)                 CHAIN,BUFFER
         LR    R6,R8                    GET FROM ADDRESS INTO R6
         LR    R4,R1                    GET TO   ADDRESS INTO R4
         L     R5,PAGESIZE              GET SIZE
         LR    R7,R5                    INTO REGISTERS
         MVCL  R4,R6                    MOVE STOREGE
         CLM   R8,7,DMSWRBUF+1          IS THIS A CURRENT
         BNE   NCLM                     NO, DO NEXT COMPARE
         ST    R1,BUFFWORK+4            DO CURRENT BUFFER CHAINING
NCLM     CLM   R8,7,DMSDISBF+1          IS THIS A CURRENT
         BNE   FREONLY                  NO, CONTINUE
         ST    R1,BUFFWORK+8            DO CURRENT BUFFER CHAINING
FREONLY  LR    R4,R8                    POINT TO  BLOCK  IN DEFAULT REG
         L     R8,0(R8)                 POINT TO NEXT BLOCK
         RELPAGE                        FREE DATA BLOCK
         TM    STARTFL1,EOBUFFER        ALL FREED
         BO    OUTLOP                   YES, GO OUT
         TM    STARTFL1,GETFAIL         GETMAIN FAILED
         BO    CONTIN                   DO NOT CHAIN
         L     R3,0(R3)                 POINT TO NEXT BLOCK
CONTIN   LA    R8,0(R8)                 CLEAR HIGH BYTE
         CR    R8,R2                    CIRCLE CLOSED
         BNE   FATLOOP                  GET NEXT
         OI    STARTFL1,EOBUFFER        FREE ONE MORE
OUTLOP   NI    STARTFL1,ALLBIT-EOBUFFER RESET FLAG
         XC    DMSFBUFF(12),DMSFBUFF    CLEAR BUFFER POINTERS
         TM    STARTFL1,GETFAIL         WAS GETMAIN FAILED
         BO    NODATB                   YES, DO   NOT  CHAINING
         MVC   0(4,R3),BUFFWORK         COMPLET CIRCLE CHAINING
NODATB   EQU   *
         TM    STARTFL1,GTFENQ          WAS ENQ DONE
         BNO   NOGTFEN                  NO DO NOT DEQ
         DEQ   (AHLQNAME,AHLRNAME,3,SYSTEM)
         NI    STARTFL1,ALLBIT-GTFENQ
NOGTFEN  EQU   *
         TM    STARTFL2,DSSSET          HAS DSS BIT BEEN SET
         BNO   DSSRESET                 DO, DONOT RESET
         NI    STARTFL2,ALLBIT-DSSSET   RESET
         NI    PSADSSFL,ALLBIT-BIT0     RESET DSS FLAG
DSSRESET TM    STARTFL1,ENQDONE         WAS  ENQ DONE
         BZ    NODEQ                    NO, DONT  DEQ
         NI    STARTFL1,ALLBIT-ENQDONE  SET FLAG OFF
         DEQ   (QNAME,RNAME,8,SYSTEM)   DEQ
NODEQ    TM    STARTFL1,STAEDONE        WAS STAE  DONE
         BZ    NOSTAOFF                 NO. DONT SET STME OFF
         TM    STARTFL1,STAENT          WAS STAE ENTERED
         BO    STAERET                  YES, RETURN TO STAE
         STAE  0                        CANCEL RECENT STAE-EXIT
         NI    STARTFL1,ALLBIT-STAEDONE  SET STAE DONE BIT OFF
NOSTAOFF NI    STARTFL1,ALLBIT-GETFAIL   ASSUME GETMAIN OK
         NI    STARTFL1,ALLBIT-EDTONLY   ALLOW NEW PROCESSING
         NI    STARTFL1,ALLBIT-EOBUFFER  ASSUME NEW OPTIOWS
         L     R15,DMLDC+8              GET LOADER ADDRESS
         BALR  R14,R15                  GO TO LOADER CONTROLER TO
*                                       DELETE THE ROUTINES
         LTR   R15,R15                  IS DELETE OK
         BZ    ASKNEW                   YES,REQUEST NEW FUNCTIONS
         ST    R15,RETCODE              SAVE RETURNCODE
         OI    DMSFUNCT,DMSEOJ          NO, DO NOT REQUEST NEW FUNCT.
ASKNEW   TM    DMSFUNCT,DMSEOJ          IS DMS TO BE STOPPED
         BO    ENDDMS                   YES DO NOT ZERO RETCODE
         XC    RETCODE(4),RETCODE       CLEAR RETURNCODE
         XC    CONLOCK(4),CONLOCK
         XC    STARTFL1(4),STARTFL1
         MVI   DMSREAS1,0
         XC    DMSSEQCT(32),DMSSEQCT
         XC    DMSCPSA(256),DMSCPSA
         XC    DMSCPSA+256(176),DMSCPSA+256
         XC    DMSCUSR(256),DMSCUSR
         XC    DMSXMPST(4),DMSXMPST
ENDDMS   EQU   *
         L     R13,4(R13)               GET OLD SAVE
         L     R14,12(R13)              GET RETURN ADDRESS
         L     R15,RETCODE              GET RETURN CODE
         LTR   R15,R15                  IS RETURN CODE ZERO
         BZ    NODUMP                   YES, DO NOT ABEND
         TM    DMSFUNCT,DMSEOJ+DMSTST   IS DMS TO BE TERM WITH TEST
         BNO   NODUMP                   NO, DO NOT ABEND
         ABEND 1,DUMP                   FORCE DUMP
NODUMP   EQU   *
         LM    R0,R12,20(R13)           GET OTHER OLD REGS
         BR    R14                      RETURN
         EJECT
STAERTN  DS    0D
         DROP  DMSREG,R11               DROP CURRENT BASES
         USING *,R15                    SET  NEW BASE
         B     STAROUND                 GO AROUND
STAMAIN  DC    V(DMSCONST)
         DC    A(DMSMAIN)
STAROUND LM    DMSREG,R11,STAMAIN       RELOAD REGISTERS
         DROP  R15
         USING DMSCONST,DMSREG
         USING DMSMAIN,R11
         DISABLE
         OI    STARTFL1,STAENT          SET STAE ENTERED
         OI    DMSFUNCT,DMSEOJ          FORCE END OF JOB
         ICM   R4,7,DMSVADP+1           CHECK IF SQA PAGE IS PRESENT
         BZ    TESTF                    NO, TERMINATE
         LR    DMSREG,R4                YES,POINT TO IT
         OI    STARTFL1,STAENT          AGAIN SET
         OI    DMSFUNCT,DMSEOJ          FLMOS
         B     TESTF
STAERET  SR    R15,R15                  CONTINUE ABEND
         SVC   3                        EXIT
         EJECT
QNAME    DC    CL8'DMSMAIN'
RNAME    DC    CL8'DMSTRACE'
AHLQNAME DC    CL8'VS2TRACE'
AHLRNAME DC    CL3'GTF'
MWORK    DC    2F'0'
         LTORG
         END   DMSMAIN
