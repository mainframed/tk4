         TITLE 'EXIMPORT - GEN JCL FOR EXPORTS AND IMPORTS'
***********************************************************************
*                                                                     *
*                D  I  S  C  L  A  I  M  E  R                         *
*                                                                     *
*        AS ALWAYS YOU USE THIS PROGRAM AT YOUR OWN RISK. THERE       *
*        ARE NO GUARANTEES INTENDED.                                  *
*                                                                     *
*                                                                     *
*             MODULE NAME = EXIMPORT                                  *
*                                                                     *
*             DESCRIPTIVE NAME = GENERATE THE JCL NECESSARY FOR       *
*                EXPORTING AND IMPORTING THE DATA SETS ON A           *
*                SPECIFIED VOLUME.                                    *
*                                                                     *
*             FUNCTION =                                              *
*                CREATES ONE DATA SET WITH THE JCL FOR EXPORTING      *
*                THE DATA SETS ON A SPECIFIED VOLUME AND ANOTHER      *
*                FOR IMPORTING THE SAME DATA SETS.  FOR VSAM          *
*                FILES, THE JCL WILL BE SET UP TO EXECUTE             *
*                IDCAMS, EXPORTING TO TAPE AND THEN IMPORTING         *
*                BACK ONTO THE SAME VOLUME FROM THE TAPE.             *
*                FOR NON-VSAM FILES, THE PROGRAM IEBGENER IS          *
*                EXECUTED TO COPY THE DATA SET TO TAPE AND THEN       *
*                BACK TO THE SAME VOLUME.                             *
*                                                                     *
*                OPERATION =                                          *
*                   OPEN THE VTOC FOR THE SPECIFIED VOLUME            *
*                   OPEN THE SPECIFIED OUTPUT FILES (FOR THE JCL)     *
*                   READ FORMAT 1 RECORDS OF VTOC FOR DATA SET NAME   *
*                   FOR VSAM FILES, IGNORE .INDEX FILES AND           *
*                     REMOVE THE .DATA FROM THE REST SO EXPORT-       *
*                     IMPORT IS SET UP FOR THE CLUSTER.               *
*                   FOR NON-VSAM FILE, CALCULATE PARAMETERS           *
*                     TO RECONSTUCT THE DATA SET WHEN COPYING         *
*                     BACK TO THE VOLUME.                             *
*                   WRITE OUT JCL TO BOTH EXPORT AND IMPORT DATA      *
*                     SETS.                                           *
*                   CONTINUE READING VTOC TIL ALL DATA SETS PROCESSED *
*                   CLOSE VTOC AND OUTPUT FILES                       *
*                   EXIT                                              *
*                                                                     *
*              NOTES =                                                *
*                                                                     *
*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *
*                    REGISTERS 0 TO 1  = WORK REGISTERS               *
*                    REGISTERS 2 TO 4  = LINKAGE & WORK REGISTERS     *
*                    REGISTERS 5 TO 9  = WORK REGISTERS               *
*                    REGISTER  10      = ADDRESSABILITY TO DCB,       *
*                                        JFCB & DSCB                  *
*                    REGISTER  11      = ADDRESSABILITY TO REST OF    *
*                                        EXIMPORT CSECT               *
*                    REGISTER  12      = ADDRESSABILITY TO EXIMPORT   *
*                                        CSECT                        *
*                    REGISTER  13      = SAVE AREA REGISTER AND       *
*                                        ADDRESSABILITY TO GETMAINED  *
*                                        WORK AREA                    *
*                    REGISTERS 14,15   = WORK REGISTERS               *
*                                                                     *
*             MACROS =                                                *
*                SAVE, GETMAIN, RDJFCB, OPEN, CVAFSEQ, CVAFDIR,       *
*                CLOSE, TRKCALC, PUT, DEVTYPE                         *
*                                                                     *
*             CHANGE ACTIVITY =                                       *
*                10/21/83  WRITTEN.      BC.                          *
*                10/28/83  ADDED SYSPRINT & CLIST                     *
*                          CHANGED READING OF VTOC TO                 *
*                            USE CVAF MACROS.     BC.                 *
*                                                                     *
* SAMPLE JCL =                                                        *
*                                                                     *
*  BOTH VSAM AND NON-VSAM FILES:                                      *
*                                                                     *
*     //JOBNAME  JOB (GEE1,0104),'PROG NAME',CLASS=S,MSGCLASS=A,      *
*     //         MSGLEVEL=(2,0),USER=SYSPGM,PASSWORD=????????         *
*     //STEP1    EXEC  PGM=EXIMPORT,PARM='DATE=OCT14'                 *
*     //VTOC   DD UNIT=3350,VOL=SER=DLX170,DISP=OLD                   *
*     //EXPORT DD DSN=T99999.TEST.EXPJCL,VOL=SER=DLXTS1,UNIT=3380,    *
*     //            DISP=(NEW,CATLG),SPACE=(TRK,(10,1)),              *
*     //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)              *
*     //IMPORT DD DSN=T99999.TEST.IMPJCL,VOL=SER=DLXTS1,UNIT=3380,    *
*     //            DISP=(NEW,CATLG),SPACE=(TRK,(10,1)),              *
*     //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)              *
*     //CLIST  DD DSN=T99999.TEST.CLIST,VOL=SER=DLXTS1,UNIT=3380,     *
*     //            DISP=(NEW,CATLG),SPACE=(TRK,(5,1)),               *
*     //            DCB=(RECFM=VB,LRECL=255,BLKSIZE=6233)             *
*     //SYSPRINT DD SYSOUT=*                                          *
*                                                                     *
*  VSAM ONLY:                                                         *
*                                                                     *
*     //JOBNAME  JOB (GEE1,0104),'PROG NAME',CLASS=S,MSGCLASS=A,      *
*     //         MSGLEVEL=(2,0),USER=SYSPGM,PASSWORD=????????         *
*     //STEP1    EXEC  PGM=EXIMPORT,                                  *
*     //         PARM='DATE=OCT14,VSAMONLY'                           *
*     //VTOC   DD UNIT=3350,VOL=SER=DLX170,DISP=OLD                   *
*     //EXPORT DD DSN=T99999.TEST.EXPJCL,VOL=SER=DLXTSO,UNIT=3350,    *
*     //            DISP=(NEW,CATLG),SPACE=(TRK,(10,1)),              *
*     //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)              *
*     //IMPORT DD DSN=T99999.TEST.IMPJCL,VOL=SER=DLXTSO,UNIT=3350,    *
*     //            DISP=(NEW,CATLG),SPACE=(TRK,(10,1)),              *
*     //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)              *
*     //CLIST  DD DSN=T99999.TEST.CLIST,VOL=SER=DLXTS1,UNIT=3380,     *
*     //            DISP=(NEW,CATLG),SPACE=(TRK,(5,1)),               *
*     //            DCB=(RECFM=VB,LRECL=255,BLKSIZE=6233)             *
*     //SYSPRINT DD SYSOUT=*                                          *
*                                                                     *
*  VSAM ONLY, IMPORTING TO A DIFFERENT VOLUME:                        *
*                                                                     *
*     //JOBNAME  JOB (GEE1,0104),'PROG NAME',CLASS=S,MSGCLASS=A,      *
*     //         MSGLEVEL=(2,0),USER=SYSPGM,PASSWORD=????????         *
*     //STEP1    EXEC  PGM=EXIMPORT,                                  *
*     //         PARM='DATE=OCT14,VSAMONLY,UNIT=3380,VOL=DLXTS3'      *
*     //VTOC   DD UNIT=3350,VOL=SER=DLX170,DISP=OLD                   *
*     //EXPORT DD DSN=T99999.TEST.EXPJCL,VOL=SER=DLXTSO,UNIT=3350,    *
*     //            DISP=(NEW,CATLG),SPACE=(TRK,(10,1)),              *
*     //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)              *
*     //IMPORT DD DSN=T99999.TEST.IMPJCL,VOL=SER=DLXTSO,UNIT=3350,    *
*     //            DISP=(NEW,CATLG),SPACE=(TRK,(10,1)),              *
*     //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)              *
*     //CLIST  DD DSN=T99999.TEST.CLIST,VOL=SER=DLXTS1,UNIT=3380,     *
*     //            DISP=(NEW,CATLG),SPACE=(TRK,(5,1)),               *
*     //            DCB=(RECFM=VB,LRECL=255,BLKSIZE=6233)             *
*     //SYSPRINT DD SYSOUT=*                                          *
*                                                                     *
*  NOTE:  TO IMPORT TO A NEW VOLUME, BOTH 'UNIT=' AND 'VOL=' PARMS    *
*         MUST BE SPECIFIED.  IF EITHER IS LEFT OUT, THE PROGRAM      *
*         WILL DEFAULT TO JUST 'VSAM ONLY'.                           *
*                                                                     *
***********************************************************************
         PRINT NOGEN
*
EXIMPORT CSECT
         SAVE  (14,12)                 SAVE REGISTERS
         LR    R12,R15
         USING EXIMPORT,R12            ESTABLISH ADDRESSABILITY
         LA    R11,4095(R12)
         USING EXIMPORT+4095,R11       ESTABLISH ADDRESSABILITY TO REST
         LR    R2,R1                   PRESERVE PTR TO PARMS
         GETMAIN R,LV=LDATA            GET DYNAMIC WORK AREA
         LR    R10,R1                  PRESERVE PTR TO WORK AREA
         ST    R13,4(R10)              STORE ADDR OF PREVIOUS SA
         ST    R10,8(,R13)             STORE ADDR OF CURRENT SA
         LR    R13,R10                 LOAD ADDR OF CURRENT SA
         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY
*
*  GET PARMS FOR DATE, VSAM ONLY, VOLUME AND UNIT.
*
GETPARM  EQU   *
         L     R5,0(R2)                GET PARM ADDRESS
         LH    R3,0(R5)                SAVE PARM LENGTH
         LTR   R3,R3                   ANY PARM DATA?
         BZ    GP40                    IF NOT, BRANCH
         LA    R5,2(R5)                SKIP PARM LENGTH FIELD
         MVI   VSAMONLY,C'N'           INIT VSAM ONLY FLAG
         MVI   NEWUNIT,X'40'           CLEAR UNIT BUFFER
         MVC   NEWUNIT+1(L'NEWUNIT-1),NEWUNIT
         MVI   NEWVOL,X'40'            CLEAR VOLUME BUFFER
         MVC   NEWVOL+1(L'NEWVOL-1),NEWVOL
GP05     EQU   *
         LA    R4,PARMBUF              SET POINTER INTO PARM BUFFER
         MVI   PARMBUF,X'40'           CLEAR PARM BUFFER
         MVC   PARMBUF+1(L'PARMBUF-1),PARMBUF
GP10     EQU   *
         CLI   0(R5),C','              DELIMITING COMMA?
         BE    GP20                    IF SO, BRANCH
         MVC   0(1,R4),0(R5)           STORE PARM CHARACTER
         LA    R4,1(R4)                INCREMENT PARM BUFFER POINTER
         LA    R5,1(R5)                GO TO NEXT PARM CHARACTER
         BCT   R3,GP10                 LOOP BACK TIL DONE
GP20     EQU   *
         CLC   PARMBUF(5),=C'DATE='    CHECK FOR DATE PARAMETER
         BNE   GP30                    IF NOT, BRANCH
         MVC   DATE,PARMBUF+5          STORE DATE
         B     GP60
GP30     EQU   *
         CLC   PARMBUF(4),=C'VOL='     CHECK FOR VOLUME PARAMETER
         BNE   GP40                    IF NOT, BRANCH
         MVC   NEWVOL,PARMBUF+4        STORE NEW VOLUME
         B     GP60
GP40     EQU   *
         CLC   PARMBUF(5),=C'UNIT='    CHECK FOR UNIT PARAMETER
         BNE   GP50                    IF NOT, BRANCH
         MVC   NEWUNIT,PARMBUF+5       STORE NEW UNIT
         B     GP60
GP50     EQU   *
         CLC   PARMBUF(8),=C'VSAMONLY' DO VSAM ONLY?
         BNE   GP60                    IF NOT, BRANCH
         MVI   VSAMONLY,C'Y'           IF SO, SET FLAG
GP60     EQU   *
         LA    R4,PARMBUF              RESET POINTER INTO PARM BUFFER
         MVI   PARMBUF,X'40'           CLEAR PARM BUFFER
         MVC   PARMBUF+1(L'PARMBUF-1),PARMBUF
         LTR   R3,R3                   ANY MORE PARMS?
         BZ    GP70                    IF NOT, EXIT
         LA    R5,1(R5)                IF SO, SKIP COMMA
         B     GP05                    AND LOOP BACK
GP70     EQU   *
         MVI   SPCLVSAM,C'N'           INIT FLAG
         CLI   VSAMONLY,C'Y'           FOR VSAM ONLY?
         BNE   GP80                    IF NOT, BRANCH
         CLI   NEWVOL,X'40'            NEW VOLUME PRESENT?
         BE    GP80                    IF NOT, BRANCH
         CLI   NEWUNIT,X'40'           NEW UNIT PRESENT?
         BE    GP80                    IF NOT, BRANCH
         MVI   SPCLVSAM,C'Y'           SET FLAG
GP80     EQU   *
*
*  INITIALIZE THE WORK AREA.  OPEN THE VTOC, EXPORT, AND IMPORT
*  DATA SETS.  INITIALIZE DEVICE PARAMETERS.
*
INIT     EQU   *
         LA    R6,DATA                 SET UP REGISTERS FOR
         LA    R7,MOVEL                  LONG MOVE
         LA    R8,CDATA
         LA    R9,MOVEL
         MVCL  R6,R8                   LOAD INITIAL DATA INTO WORKAREA
         LA    R10,VTOC                GET ADDRESS OF DCB1
         USING IHADCB,R10              ADDRESSIBILITY TO DCB
         LA    R9,JFCBA                GET ADDRESS OF BUFFER
         ST    R9,EXLIST               STORE ADDRESS IN EXIT LIST
         MVI   EXLIST,X'87'            SET END OF LIST & JFCB BYTE
         LA    R6,EXLIST               GET ADDRESS OF EXIT LIST
         ST    R6,DCBEXLST             STORE IN DCB
         DROP  R10
         LR    R10,R9
         RDJFCB (VTOC,),MF=(E,EX1)     READ JOB FILE CONTROL BLOCK
         USING INFMJFCB,R10            ESTABLISH ADDRESSABILITY
         LTR   R15,R15                 CHECK RETURN CODE
         BNZ   RETURN                  IF NOT SUCCESSFUL, EXIT
         MVI   JFCBDSNM,X'04'          CHANGE DATASET NAME TO
         MVC   JFCBDSNM+1(43),JFCBDSNM   44 X'04'S
         OI    JFCBTSDM,JFCNWRIT       SET FLAG NOT TO WRITE BACK
         MVC   VOL,JFCBVOLS            SAVE VOLSER
         DROP  R10
         OPEN  (VTOC,INPUT),TYPE=J,MF=(E,EX2) OPEN THE VTOC
         LTR   R15,R15
         BNZ   CLOSEX
         LA    R10,VTOC                GET ADDRESSING TO THE
         USING IHADCB,R10                VTOC DCB AGAIN
         L     R9,DCBDEBAD             SAVE THE ADDRESS OF THE DEB
         ST    R9,DEBADDR                FOR READING THE VTOC
         DROP  R10
         OPEN  (EXPORT,OUTPUT),MF=(E,EX2)  OPEN EXPORT DATA SET
         LTR   R15,R15
         BNZ   CLOSEX
         OPEN  (IMPORT,OUTPUT),MF=(E,EX2)  OPEN IMPORT DATA SET
         LTR   R15,R15
         BNZ   CLOSEX
         OPEN  (CLIST,OUTPUT),MF=(E,EX2)  OPEN CLIST DATA SET
         LTR   R15,R15
         BNZ   CLOSEX
         MVI   CLINE,X'40'             INITIALIZE CLIST LINE
         MVC   CLINE+1(L'CLINE-1),CLINE   TO ALL SPACES
         MVC   CMDLINE(L'FSTLINE),FSTLINE  OUTPUT FIRST LINE OF CLIST
         BAL   R3,PRINTC
         MVC   CMDLINE(L'SNDLINE),SNDLINE  OUTPUT SECOND LINE OF CLIST
         BAL   R3,PRINTC
         OPEN  (SYSPRINT,OUTPUT),MF=(E,EX2)  OPEN SYSPRINT DATA SET
         LTR   R15,R15
         BNZ   CLOSEX
         MVI   SPLINE,X'40'            INITIALIZE LINE
         MVC   SPLINE+1(L'SPLINE-1),SPLINE
         MVC   SPLINE(L'AIXLINE),AIXLINE LOAD FIRST LINE INTO SYSPRINT
         PUT   SYSPRINT,SPLINE
         MVI   SPLINE,X'40'            RE-INITIALIZE LINE
         MVC   SPLINE+1(L'SPLINE-1),SPLINE
         PUT   SYSPRINT,SPLINE         OUTPUT BLANK LINE
         MVI   LINE,X'40'              INITIALIZE LINE
         MVC   LINE+1(L'LINE-1),LINE     TO ALL SPACES
         DEVTYPE VTOCLBL,DEVBUF,DEVTAB  GET DEVICE PARAMETERS
         USING IECSDSL1,R10            ESTABLISH ADDRESSABILITY
         LA    R10,DSCB                LOAD DSCB ADDRESS
         MVI   BUFLIST,X'00'           INITIALIZE BUFFER LIST
         MVC   BUFLIST+1(BUFLEN-1),BUFLIST
         OI    BFLHFL,BFLHDSCB         DSCB'S TO BE READ WITH LIST
         MVI   BFLHNOE,1               ONE BUFFER LIST ENTRY
         LA    R9,DS1FMTID             GET ADDRESS OF DSCB BUFFER
         ST    R9,BFLEBUF              AND STORE IN BUFFER LIST
         MVI   BFLELTH,DSCBLTH         READ ONLY DATA PORTION
         MVI   DS1DSNAM,X'00'          INITIALIZE DATA SET NAME
         MVC   DS1DSNAM+1(L'DS1DSNAM-1),DS1DSNAM
*
*  READ THE VTOC FORMAT-1 RECORDS.  PROCESS ALL DATA SETS ON VOLUME
*    WITH THE EXCEPTION OF A FEW (SUCH AS THE VTOC INDEX, CATALOG
*    CATALOG INDEX, TEMPORARY DATA SETS, ETC.)
*
READIT   EQU   *
         L     R9,DEBADDR              GET DEB ADDRESS AND READ VTOC
         CVAFSEQ DEB=(R9),BUFLIST=BUFLIST,DSN=DS1DSNAM,MF=(E,EX3)
         LTR   R15,R15                 IF SUCCESSFUL,
         BZ    RI05                      BRANCH
         LR    R9,R15                  SAVE RETURN CODE
         MVC   RCODE,CVSTAT              AND STATUS
         CVAFDIR ACCESS=RLSE,BUFLIST=0,IXRCDS=NOKEEP,MF=(E,EX3)
         LR    R15,R9                  RELEASE BUFFERS & RESTORE RC
         C     R15,=F'4'               JUST A 4?
         BNE   CLOSEX                  IF NOT, BRANCH TO ERROR EXIT
         CLI   RCODE,STAT032           IS IT END OF DATA?
         BE    CLOSE                   IF SO, NORMAL EXIT
         ABEND 10,DUMP
         B     CLOSEX                  ELSE, BRANCH TO ERROR EXIT
RI05     EQU   *
         CLI   DS1FMTID,C'1'           FORMAT 1 RECORD?
         BNE   READIT                  IF NOT, GO BACK FOR ANOTHER
         CLC   DS1DSNAM(11),=C'SYS1.VTOCIX'
         BE    READIT
         CLC   DS1DSNAM(9),=C'SYS1.VVDS'
         BE    READIT
         CLC   DS1DSNAM(7),=C'CATALOG'            IGNORE CERTAIN
         BE    READIT                              DATA SETS
         CLC   DS1DSNAM(8),=C'CATINDEX'
         BE    READIT
         CLC   DS1DSNAM(8),=C'FDRABR.V'
         BE    READIT
         CLC   DS1DSNAM(3),=C'SYS'
         BNE   PROCDS
         LA    R7,DS1DSNAM+3
         LA    R8,5
RI10     EQU   *
         TM    0(R7),X'F0'
         BNO   PROCDS
         LA    R7,1(R7)
         BCT   R8,RI10
         B     READIT
*
*  IF VSAM .INDEX FILE, SKIP IT.  IF .DATA, REMOVE THE .DATA SO
*    ONLY THE CLUSTER NAME IS LEFT.  IF VSAM ALTERNATE INDEX,
*    OUTPUT MESSAGE TO SYSPRINT AND GO ON TO THE NEXT DATA SET.
*    FOR ALL DATA SETS TO BE PROCESSED, BUILED THE TAPE DATA SET
*    NAME AND CALCULATE THE SEQUENCE NUMBER.
*
PROCDS   EQU   *
         TM    DS1DSORG,DS1DSGPO       PARTITIONED DATA SET?
         BO    READIT                  IF SO, SKIP IT
         MVC   SAVDSNAM,DS1DSNAM       SAVE THE DATA SET NAME
         TM    DS1DSORG+1,DS1ACBM      VSAM FILE?
         BO    PD05                    IF SO, BRANCH
         CLI   VSAMONLY,C'Y'           VSAM ONLY?
         BE    READIT                  IF SO, GO BACK FOR ANOTHER
         B     PD30                    IF NOT, GO AHEAD
PD05     EQU   *
         LA    R7,SAVDSNAM             GET ADDRESS OF DATA SET NAME
         LA    R8,L'SAVDSNAM           SET LOOP FOR MAX OF 44
PD10     EQU   *
         CLI   0(R7),C' '              LOOK FOR END OF NAME
         BE    PD20                    IF FOUND, BRANCH
         LA    R7,1(R7)                IF NOT, INCREMENT ADDRESS
         BCT   R8,PD10                 AND LOOP
PD20     EQU   *
         S     R7,=F'5'                GO BACK 5 CHARACTERS
         CLC   0(5,R7),=C'.DATA'       IS THIS THE DATA COMPONENT?
         BNE   READIT                  IF NOT, SKIP IT
         MVC   0(5,R7),=C'     '       IF SO, CLEAR OUT FOR CLUSTER
         S     R7,=F'4'                GO BACK 5 MORE CHARACTERS
         CLC   0(3,R7),=C'AIX'         IS THIS AN ALTERNATE INDEX?
         BNE   PD30                    IF NOT, CONTINUE
         MVC   SPDSN(L'SAVDSNAM),SAVDSNAM   GET ALTERNATE INDEX NAME
         PUT   SYSPRINT,SPLINE         WRITE LINE INTO SYSPRINT FILE
         B     READIT                  AND SKIP IT
PD30     EQU   *
         MVC   TAPEDSN,SAVDSNAM        BUILD TAPE DATA SET NAME
         LA    R5,TAPEDSN
         BAL   R2,NXTSPC               POINT TO END OF DATA SET NAME
         MVI   0(R5),C'.'              TACK ON DATE GIVEN IN PARAMETERS
         MVC   1(5,R5),DATE
         MVC   6(3,R5),=C'EXP'
         AP    SEQNUM,=P'1'            INCREMENT SEQUENCE NUMBER
         UNPK  SEQ#,SEQNUM             UNPACK SEQUENCE NUMBER
         MVZ   SEQ#+7(1),SEQ#+6        MOVE ZONE BYTE
         LA    R6,SEQ#+4               LEFT JUSTIFY & SPACE FILL
         MVI   NUM,X'40'               INIT NUMBER
         MVC   NUM+1(L'NUM-1),NUM
         LA    R7,NUM
         LA    R8,4                    ONLY WORRY ABOUT LAST 4 DIGITS
PD40     EQU   *
         CLI   0(R6),C'0'              LEADING ZERO?
         BNE   PD50                    IF NOT, GET IT
         LA    R6,1(R6)                INCREMENT POINTER
         BCT   R8,PD40                 LOOP THRU 4 CHARACTERS
         B     PD60
PD50     EQU   *
         MVC   0(1,R7),0(R6)           IF SOMETHING ELSE, MOVE IT
         LA    R7,1(R7)                INCREMENT POINTER
         LA    R6,1(R6)                INCREMENT POINTER
         BCT   R8,PD50                 LOOP THRU 4 CHARACTERS
PD60     EQU   *
         TM    DS1DSORG+1,DS1ACBM      VSAM FILE?
         BO    VSAM                    IF SO, BRANCH TO VSAM SECTION
*
*  GENERATE JCL FOR NON-VSAM FILES.
*
NONVSAM  EQU   *
*
*  CONVERT PARMS INTO EBCDIC - SECONDARY ALLOCATION, RECORD LENGTH,
*    AND BLOCK LENGTH.
*
         MVC   LRECL(2),=X'0000'       PUT RECORD LENGTH INTO
         MVC   LRECL+2(2),DS1LRECL       A FULL WORD
         MVI   WORK3,X'00'
         MVC   WORK3+1(3),DS1SCALO+1   GET SECONDARY ALLOCATION
         L     R7,WORK3
         BAL   R2,CNVEBC               CONVERT TO EBCDIC
         MVC   SECALLOC,WORK2          AND STORE
         L     R7,LRECL                GET RECORD LENGTH
         BAL   R2,CNVEBC               CONVERT TO EBCDIC
         MVC   RECLEN,WORK2            AND STORE
         MVC   WORK3(2),DS1BLKL        GET BLOCK SIZE
         SLR   R7,R7
         LH    R7,WORK3
         BAL   R2,CNVEBC               CONVERT TO EBCDIC
         MVC   BLKSIZE,WORK2           AND STORE
*
*  FIGURE OUT DEVICE TYPE
*
GETDEVT  EQU   *
         CLI   DEVBUF+3,X'0B'          IS THIS A 3350?
         BNE   GD10                    IF NOT, BRANCH
         MVC   TYPE,=C'3350,'          STORE TYPE
         B     GD20                    AND CONTINUE
GD10     EQU   *
         MVC   TYPE,=C'3380,'          MUST BE 3380
GD20     EQU   *
*
*  CALCULATE PRIMARY ALLOCATION
*
CALCPRI  EQU   *
         MVC   TRKSPCYL(2),DEVBUF+10   SAVE # TRACKS / CYLINDER
         MVC   HIHH(2),DS1EXT1+8       SAVE UPPER TRACK
         MVC   LOHH(2),DS1EXT1+4       SAVE LOWER TRACK
         MVC   HICC(2),DS1EXT1+6       SAVE UPPER CYLINDER
         MVC   LOCC(2),DS1EXT1+2       SAVE LOWER CYLINDER
         LA    R5,ALLOC                GET ADDRESS TO BUILD ALLOC PARMS
         MVI   ALLOC,X'40'             CLEAR THE BUFFER
         MVC   ALLOC+1(L'ALLOC-1),ALLOC
         SLR   R6,R6
         LH    R6,HIHH                 GET UPPER TRACK
         SLR   R7,R7
         LH    R7,HICC                 GET UPPER CYLINDER
         CH    R6,LOHH                 UPPER TRACK > LOWER TRACK?
         BNL   CP10                    IF SO, BRANCH
         SH    R7,=X'0001'             OTHERWISE, BORROW A CYLINDER
         AH    R6,TRKSPCYL             AND ADD A CYL OF TRACKS
CP10     EQU   *
         SH    R7,LOCC                 UPPER CYL - LOWER CYL
         MH    R7,TRKSPCYL             CONVERT TO TRACKS
         SH    R6,LOHH                 UPPER TRK - LOWER TRK
         AR    R7,R6                   ADD TOGETHER FOR TOTAL TRACKS
         AH    R7,=X'0001'             ADJUSTMENT OF 1 TRACK
         TM    DS1SCALO,X'C0'          IS ALLOCATION IN CYLINDERS?
         BO    CP20                    IF SO, BRANCH
         TM    DS1SCALO,X'40'          IS IT IN BLOCKS?
         BO    CP30                    IF SO, BRANCH
         MVC   0(5,R5),=C'TRK,('       INDICATE TRACKS
         B     CP40                    AND CONTINUE
CP20     EQU   *
         MVC   0(5,R5),=C'CYL,('       INDICATE CYLINDERS
         SLR   R6,R6                   AND CONVERT TRACKS TO CYLS
         SLR   R8,R8
         LH    R8,TRKSPCYL             GET # OF TRACKS PER CYLINDER
         DR    R6,R8                   DIVIDE INTO # OF TRACKS
         LTR   R6,R6                   ANY REMAINDER?
         BZ    CP40                    IF NOT, BRANCH
         LA    R7,1(R7)                IF SO, ADD ANOTHER CYL
         B     CP40
CP30     EQU   *
         MVC   0(8,R5),BLKSIZE         GET BLOCK SIZE
         BAL   R2,NXTSPC
         MVC   0(2,R5),=C',('
         ST    R10,WORK3               SAVE REGISTER 11
         TRKCALC FUNCTN=TRKCAP,TYPE=DEVBUF+3,DD=DS1BLKL,R=1,MF=(E,EX5)
         L     R10,WORK3               RESTORE REGISTER 11
         ST    R0,NUMBLKS
         SLR   R6,R6                   MULTIPLY # OF TRKS BY
         M     R6,NUMBLKS                # OF BLKS PER TRK
CP40     EQU   *
         BAL   R2,CNVEBC               CONVERT TO EBCDIC
         MVC   PRIALLOC,WORK2          AND STORE
*
*  FIGURE OUT RECORD FORMAT
*
GETRECF  EQU   *
         MVI   RECFMT,X'40'            CLEAR OUT RECORD FORMAT
         MVC   RECFMT+1(L'RECFMT-1),RECFMT
         LA    R6,RECFMT               GET STARTING ADDRESS
         TM    DS1RECFM,X'C0'          UNDEFINED RECORD FORMAT?
         BNO   GR10                    IF NOT, BRANCH
         MVI   0(R6),C'U'              SET TO 'U' FOR UNDEFINED
         B     GR30
GR10     EQU   *
         TM    DS1RECFM,X'80'          FIXED LENGTH RECORD?
         BNO   GR20                    IF NOT, BRANCH
         MVI   0(R6),C'F'              SET TO 'F' FOR FIXED BLOCKED
         B     GR30
GR20     EQU   *
         TM    DS1RECFM,X'40'          VARIABLE LENGTH RECORD?
         BNO   GR40                    IF NOT, BRANCH
         MVI   0(R6),C'V'              SET TO 'V' FOR VARIABLE
GR30     EQU   *
         LA    R6,1(R6)                GO TO NEXT CHARACTER
GR40     EQU   *
         TM    DS1RECFM,X'10'          BLOCKED?
         BNO   GR50                    IF NOT, BRANCH
         MVI   0(R6),C'B'              SET TO 'B' FOR BLOCKED
         LA    R6,1(R6)                GO TO NEXT CHARACTER
GR50     EQU   *
         TM    DS1RECFM,X'20'          TRACK OVERFLOW?
         BNO   GR60                    IF NOT, BRANCH
         MVI   0(R6),C'T'              SET TO 'T' FOR TRACK OVERFLOW
         LA    R6,1(R6)                GO TO NEXT CHARACTER
GR60     EQU   *
         TM    DS1RECFM,X'08'          SPANNED OR STANDARD?
         BNO   GR70                    IF NOT, BRANCH
         MVI   0(R6),C'S'              SET TO 'S' FOR SPAN OR STANDARD
         LA    R6,1(R6)                GO TO NEXT CHARACTER
GR70     EQU   *
         TM    DS1RECFM,X'04'          ASA CONTROL CHARACTER?
         BNO   GR80                    IF NOT, BRANCH
         MVI   0(R6),C'A'              SET TO 'A' FOR ASA CHARACTER
         LA    R6,1(R6)                GO TO NEXT CHARACTER
GR80     EQU   *
         TM    DS1RECFM,X'02'          MACHINE CONTROL CHARACTER?
         BNO   GR90                    IF NOT, BRANCH
         MVI   0(R6),C'M'              SET TO 'M' FOR MACHINE CHARACTER
GR90     EQU   *
*
*  FIGURE OUT TAPE BLOCK SIZE
*
GETTBLK  EQU   *
         L     R7,=F'32760'
         CLI   RECFMT,C'F'             FIXED RECORD LENGTH?
         BNE   GB10                    IF NOT, BRANCH
         SLR   R6,R6
         D     R6,LRECL                GET INTEGER PART OF 32760/LRECL
         M     R6,LRECL                AND MULTIPLY BY LRECL
GB10     EQU   *
         BAL   R2,CNVEBC               CONVERT TO EBCDIC
         MVC   TBLKSIZE,WORK2          AND STORE
*
*  CONSTUCT JCL
*
         MVC   LINE(2),=C'//'          GET READY FOR JCL LINES
         MVC   LLABEL(4),=C'STEP'      START LINE1
         MVC   LLABEL+4(L'NUM),NUM     GIVE STEP A SEQUENCE NUMBER
         MVC   LCOL1(L'LINE1B),LINE1B  SET UP EXECUTE LINE
         MVI   PRNTFLG,C'B'            SET FLAG TO OUTPUT TO BOTH
         BAL   R3,PRINTIT              OUTPUT JCL LINES
         MVC   LLABEL(L'LINE2A),LINE2A SET UP SYSPRINT LINE
         BAL   R3,PRINTIT              OUTPUT TO BOTH FILES
         MVC   LLABEL(6),=C'SYSUT2'    SET UP FIRST SYSUT2 LINE
         MVC   LCOL1(L'LINE3A),LINE3A  ADD TAPE DATA SET NAME
         MVC   LCOL1+L'LINE3A(L'TAPEDSN),TAPEDSN
         LA    R5,LCOL1
         BAL   R2,NXTSPC
         MVC   0(L'LINE3B,R5),LINE3B   ADD DATA SET DISPOSITION
         MVI   PRNTFLG,C'E'            PUT THIS LINE IN EXPORT ONLY
         BAL   R3,PRINTIT
         MVC   LLABEL(6),=C'SYSUT1'    MODIFY TO SYSUT1 FOR IMPORT
         MVC   0(L'LINE3C,R5),LINE3C   CHANGE DISPOSITION
         MVI   PRNTFLG,C'I'            PUT INTO IMPORT FILE ONLY
         BAL   R3,PRINTIT
         MVC   LCOL2(L'LINE4A),LINE4A  SET UP SECOND SYSUT2 LINE
         MVC   LCOL2+L'LINE4A(L'LINE4B),LINE4B
         LA    R5,LCOL2
         CLI   REF,C' '                REFER BACK TO A PREVIOUS DD?
         BNE   NV10                    IF SO, BRANCH
         MVC   REF(L'REFSYSUT),REFSYSUT  IF NOT, LOAD IT FOR NEXT TIME
         B     NV20
NV10     EQU   *
         BAL   R2,NXTSPC
         MVC   0(L'REF,R5),REF         REFER BACK TO PREVIOUS DD
NV20     EQU   *
         BAL   R2,NXTSPC               FIND END OF LINE SO FAR
         MVC   0(L'LINE4C,R5),LINE4C   ADD TAPE LABEL
         MVC   L'LINE4C(L'NUM,R5),NUM  LOAD SEQUENCE NUMBER
         BAL   R2,NXTSPC
         MVI   0(R5),C','
         MVI   PRNTFLG,C'E'            PRINT IN EXPORT FILE ONLY
         BAL   R3,PRINTIT
         MVI   LLABEL,X'40'            CLEAR OUT LINE
         MVC   LLABEL+1(77),LLABEL
         MVC   LCOL2(L'LINE4B),LINE4B  SET UP SECOND SYSUT1 LINE
         MVI   LCOL2+L'LINE4B,C')'
         MVI   PRNTFLG,C'I'            PRINT IN IMPORT FILE ONLY
         BAL   R3,PRINTIT
         MVC   LCOL2(L'LINE5A),LINE5A  SET UP THIRD SYSUT2 LINE
         MVC   LCOL2+L'LINE5A(L'TBLKSIZE),TBLKSIZE  GET TAPE BLK SIZE
         LA    R5,LCOL2
         BAL   R2,NXTSPC
         MVC   0(L'LINE5B,R5),LINE5B   ADD TAPE DENSITY
         CLI   RECLEN,X'40'            RECORD LENGTH OF ZERO?
         BE    NV30                    IF SO, BRANCH
         MVC   L'LINE5B(L'LINE5C,R5),LINE5C  ADD RECORD LENGTH
         MVC   L'LINE5B+L'LINE5C(L'RECLEN,R5),RECLEN
NV30     EQU   *
         BAL   R2,NXTSPC
         MVC   0(L'LINE5D,R5),LINE5D   ADD RECORD FORMAT
         MVC   L'LINE5D(L'RECFMT,R5),RECFMT
         BAL   R2,NXTSPC
         MVI   0(R5),C')'              ADD ENDING PAREN
         MVC   PRNTFLG,C'E'            OUTPUT INTO EXPORT FILE ONLY
         BAL   R3,PRINTIT
         MVI   LLABEL,C' '             CLEAR OUT LINE BUFFER
         MVC   LLABEL+1(77),LLABEL
         MVC   LLABEL(6),=C'SYSUT1'    SET UP FIRST SYSUT1 EXPORT LINE
         MVC   LCOL1(L'LINE3A),LINE3A  PUT IN DATA SET NAME
         MVC   LCOL1+L'LINE3A(L'SAVDSNAM),SAVDSNAM
         LA    R5,LCOL1
         BAL   R2,NXTSPC
         MVC   0(L'LINE6B,R5),LINE6B   ADD DATA SET DISPOSITION
         BAL   R3,PRINTIT              PUT INTO EXPORT FILE ONLY
         MVC   LLABEL(6),=C'SYSUT2'    CHANGE TO SYSUT2 FOR IMPORT
         MVC   0(L'LINE3B,R5),LINE3B   CHANGE DISPOSITION
         MVC   L'LINE3B(L'LINE6C,R5),LINE6C  ADD PROPER ALLOCATION
         MVC   L'LINE3B+L'LINE6C(L'ALLOC,R5),ALLOC
         BAL   R2,NXTSPC
         MVC   0(L'PRIALLOC,R5),PRIALLOC  ADD PRIMARY ALLOCATION
         CLI   SECALLOC,X'40'             ANY SECONDARY ALLOCATION?
         BE    NV40                       IF NOT, BRANCH
         BAL   R2,NXTSPC
         MVI   0(R5),C','
         MVC   1(L'SECALLOC,R5),SECALLOC  ADD SECONDARY ALLOCATION
NV40     EQU   *
         BAL   R2,NXTSPC
         MVC   0(3,R5),=C')),'
         MVI   PRNTFLG,C'I'             PUT INTO IMPORT FILE ONLY
         BAL   R3,PRINTIT
         MVC   LCOL2(L'LINE7C),LINE7C   SET UP 2ND SYSUT2 FOR IMPORT
         MVC   LCOL2+L'LINE7C(L'VOL),VOL  ADD VOLSER
         MVC   LCOL2+L'LINE7C+L'VOL(L'LINE7D),LINE7D  ADD UNIT
         MVC   LCOL2+L'LINE7C+L'VOL+L'LINE7D(L'TYPE),TYPE
         MVC   LCOL2+L'LINE7C+L'VOL+L'LINE7D+L'TYPE(L'LINE5A),LINE5A
         LA    R5,LCOL2
         BAL   R2,NXTSPC
         MVC   0(L'BLKSIZE,R5),BLKSIZE  ADD BLOCK SIZE
         BAL   R2,NXTSPC
         CLI   RECLEN,X'40'             RECORD LENGTH PRESENT?
         BE    NV50                     IF NOT, BRANCH
         MVC   0(L'LINE5C,R5),LINE5C    ADD RECORD LENGTH
         MVC   L'LINE5C(L'RECLEN,R5),RECLEN
         BAL   R2,NXTSPC
NV50     EQU   *
         MVC   0(L'LINE5D,R5),LINE5D    ADD RECORD FORMAT
         MVC   L'LINE5D(L'RECFMT,R5),RECFMT
         BAL   R2,NXTSPC
         MVI   0(R5),C')'
         MVI   PRNTFLG,C'I'            PUT INTO IMPORT FILE ONLY
         BAL   R3,PRINTIT
         MVC   LLABEL(L'LINE8A),LINE8A  SET UP 'SYSIN DD DUMMY'
         MVI   PRNTFLG,C'B'            PUT INTO BOTH FILES
         BAL   R3,PRINTIT
         B     GENCLIST                GO TO CREATE RECORD IN CLIST
*
*  GENERATE OUTPUT RECORDS FOR VSAM FILES.
*
VSAM     EQU   *
         MVC   LINE(2),=C'//'          GET READY FOR JCL LINES
         MVC   LLABEL(4),=C'STEP'      START LINE 1
         MVC   LLABEL+4(L'NUM),NUM     GIVE STEP A SEQUENCE NUMBER
         MVC   LCOL1(L'LINE1A),LINE1A  SET UP EXECUTE LINE
         MVI   PRNTFLG,C'B'            SET FLAG TO OUTPUT TO BOTH
         BAL   R3,PRINTIT              PRINT THE LINES
         MVC   LLABEL(L'LINE2A),LINE2A SET UP SYSPRINT LINE
         BAL   R3,PRINTIT              PRINT THE LINES
         MVC   LLABEL(3),=C'DD1'       START DD1 LINE
         MVC   LCOL1(L'LINE3A),LINE3A  INDICATE TAPE DATA SET NAME
         MVC   LCOL1+L'LINE3A(L'TAPEDSN),TAPEDSN
         LA    R5,LCOL1
         BAL   R2,NXTSPC               FIND BLANK SPACE
         MVC   0(L'LINE3B,R5),LINE3B   ADD DATA SET DISPOSITION
         MVI   PRNTFLG,C'E'            PRINT IN EXPORT FILE
         BAL   R3,PRINTIT
         MVC   0(L'LINE3C,R5),LINE3C   CHANGE DATA SET DISPOSITION
         MVI   PRNTFLG,C'I'            PRINT IN IMPORT FILE
         BAL   R3,PRINTIT
         MVC   LCOL2(L'LINE4A),LINE4A  SET UP SECOND DD1 LINE
         MVC   LCOL2+L'LINE4A(L'LINE4B),LINE4B  BY ADDING UNIT & VOL
         LA    R5,LCOL2
         CLI   REF,C' '                REFER BACK TO PREVIOUS?
         BNE   VS10                    IF SO, BRANCH
         MVC   REF(L'REFDD1),REFDD1    IF NOT, LOAD IT FOR NEXT TIME
         B     VS20
VS10     EQU   *
         BAL   R2,NXTSPC
         MVC   0(L'REF,R5),REF         REFER BACK TO PREVIOUS DD
VS20     EQU   *
         BAL   R2,NXTSPC               FIND END OF LINE SO FAR
         MVC   0(L'LINE4C,R5),LINE4C   ADD TAPE LABEL
         MVC   L'LINE4C(L'NUM,R5),NUM  LOAD SEQUENCE NUMBER
         BAL   R2,NXTSPC
         MVI   0(R5),C','
         MVI   PRNTFLG,C'E'            PRINT IN EXPORT FILE
         BAL   R3,PRINTIT
         MVI   LLABEL,X'40'            CLEAR OUT LINE
         MVC   LLABEL+1(77),LLABEL
         MVC   LCOL2(L'LINE4B),LINE4B  SET UP SECOND DD1 FOR IMPORT
         MVI   LCOL2+L'LINE4B,C')'     END WITH PAREN
         MVI   PRNTFLG,C'I'            PRINT IN IMPORT FILE
         BAL   R3,PRINTIT
         MVC   LCOL2(L'LINE5A),LINE5A  SET UP THIRE DD1 FOR EXPORT
         MVC   LCOL2+L'LINE5A(5),=C'32760'  SET TAPE BLOCK SIZE
         MVC   LCOL2+L'LINE5A+5(L'LINE5B),LINE5B  SET TAPE DENSITY
         MVI   LCOL2+L'LINE5A+5+L'LINE5B,C')'
         MVC   PRNTFLG,C'E'            OUTPUT INTO EXPORT FILE ONLY
         BAL   R3,PRINTIT
         MVI   LLABEL,C' '             CLEAR OUT LINE BUFFER
         MVC   LLABEL+1(77),LLABEL
         CLI   SPCLVSAM,C'Y'           IS THIS A SPECIAL VSAM REQUEST?
         BNE   VS30                    IF NOT, BRANCH
         MVC   LLABEL(3),=C'DD2'       IF SO, SET UP SPECIAL DD2 LINE
         MVC   LCOL1(L'LINE5E),LINE5E  GET THE UNIT INFORMATION
         MVC   LCOL1+L'LINE5E(L'NEWUNIT),NEWUNIT
         MVI   LCOL1+L'LINE5E+L'NEWUNIT,C','
         LA    R5,LCOL1+L'LINE5E+L'NEWUNIT+1  CHANGE GEARS TO SHORTEN
         MVC   0(L'LINE7C,R5),LINE7C   GET THE VOLUME
         MVC   L'LINE7C(L'NEWVOL,R5),NEWVOL
         MVC   L'LINE7C+L'NEWVOL(L'LINE5F,R5),LINE5F  FINISH LINE
         MVI   PRNTFLG,C'I'             OUTPUT TO IMPORT ONLY
         BAL   R3,PRINTIT               PRINT THE LINE
VS30     EQU   *
         MVC   LLABEL(L'LINE6A),LINE6A SET UP 'SYSIN DD *' LINE
         MVI   PRNTFLG,C'B'            SET FLAG FOR BOTH
         BAL   R3,PRINTIT              OUTPUT THE LINES
         MVC   LINE(8),=C'  EXPORT'    SET UP 'SYSIN' LINE FOR EXPORT
         MVC   LINE+9(L'SAVDSNAM),SAVDSNAM  LOAD DATA SET NAME
         LA    R5,LINE+8
         BAL   R2,NXTSPC
         MVC   1(L'LINE7A,R5),LINE7A   LOAD REST OF 'SYSIN' LINE
         MVC   PRNTFLG,C'E'            WRITE INTO EXPORT FILE ONLY
         BAL   R3,PRINTIT
         MVI   LLABEL,C' '             CLEAR OUT LINE
         MVC   LLABEL+1(77),LLABEL
         MVC   LINE(8),=C'  IMPORT'    SET UP 'SYSIN' LINE FOR IMPORT
         MVC   LINE+9(11),=C'OUTDATASET('
         MVC   LINE+20(L'SAVDSNAM),SAVDSNAM  ADD DATA SET NAME
         LA    R5,LINE+20
         BAL   R2,NXTSPC
         MVC   0(L'LINE7B,R5),LINE7B   LOAD REST OF 'SYSIN' LINE
         MVI   PRNTFLG,C'I'            WRITE INTO IMPORT FILE ONLY
         CLI   SPCLVSAM,C'Y'           SPECIAL VSAM REQUESTED?
         BNE   VS40                    IF NOT, BRANCH
         BAL   R2,NXTSPC               FIND END OF LINE
         MVI   1(R5),C'-'              AND INDICATE CONTINUED
         BAL   R3,PRINTIT              WRITE THE LINE
         LA    R5,LINE+9               POINT TO START FOR NEXT LINE
         MVC   0(9,R5),=C'OBJECTS(('   START OUT NEXT LINE
         MVC   9(L'SAVDSNAM,R5),SAVDSNAM  LOAD DATA SET NAME
         BAL   R2,NXTSPC               FIND NEXT SPACE
         MVC   1(L'LINE7E,R5),LINE7E   ADD VOLUME
         MVC   1+L'LINE7E(L'NEWVOL,R5),NEWVOL
         MVC   1+L'LINE7E+L'NEWVOL(L'LINE7F,R5),LINE7F  FINISH LINE
VS40     EQU   *
         BAL   R3,PRINTIT              PRINT THE LINE
*
*  CREATE RECORD FOR CLIST
*
GENCLIST EQU   *
         MVC   CMDLINE(6),=C'DELETE'        SET UP CLIST LINE
         MVC   CMDLINE+7(L'TAPEDSN),TAPEDSN   ADD TAPE DATA SET NAME
         LA    R5,CMDLINE                     FIND NEXT SPACE
         BAL   R2,NXTSPC
         MVC   1(9,R5),=C'NOSCRATCH'          JUST DELETE FROM CATALOG
         BAL   R3,PRINTC                    PRINT THE LINE
         B     READIT
*
*  CLOSE FILES AND TERMINATE PROGRAM.
*
CLOSEX   EQU   *                       ERROR EXIT
         LR    R7,R15                  SAVE CONTENTS OF R15
         CLOSE (VTOC,,EXPORT,,IMPORT,,CLIST,,SYSPRINT),MF=(E,EX4)
         LR    R15,R7                  RESTORE CONTENTS OF R15
         B     RETURN
CLOSE    EQU   *
         MVC   CMDLINE(L'LSTLINE),LSTLINE  PUT LAST LINE INTO CLIST
         BAL   R3,PRINTC
         CLOSE (VTOC,,EXPORT,,IMPORT,,CLIST,,SYSPRINT),MF=(E,EX4)
         SLR   R15,R15
RETURN   L     R13,4(R13)              RESTORE REGISTERS
         RETURN (14,12),RC=(15)        AND END
*
***********************************************************************
*                                                                     *
*                      SUBROUTINES                                    *
*                                                                     *
***********************************************************************
*
*  SUBROUTINE TO WRITE THE OUTPUT LINE INTO THE CLIST DATA SET
*
PRINTIT  EQU   *
         CLI   PRNTFLG,C'I'            IMPORT ONLY?
         BE    PI10                    IF SO, BRANCH
         PUT   EXPORT,LINE             WRITE INTO EXPORT FILE
         CLI   PRNTFLG,C'B'            IMPORT ALSO?
         BNE   PI20                    IF NOT, BRANCH
PI10     EQU   *
         PUT   IMPORT,LINE             WRITE INTO IMPORT FILE
         MVI   LLABEL,X'40'            RESET THE LINE BUFFER
         MVC   LLABEL+1(77),LLABEL     TO SPACES
PI20     EQU   *
         BR    R3                      RETURN
*
*  SUBROUTINE TO PRINT THE CLIST
*
PRINTC   EQU   *
         AP    LINE#,=P'100'           INCREMENT LINE NUMBER
         UNPK  LINENO,LINE#            UNPACK LINE NUMBER
         MVZ   LINENO+7(1),LINENO+6      & MOVE ZONE BYTE
         LA    R5,CMDLINE
         BAL   R2,NXTSPC               FIND LINE LENGTH
         LA    R2,CLINE
         SR    R5,R2                   CALCULATE LINE LENGTH
         STH   R5,CLINE                  AND STORE
         MVC   CLINE+2(2),=X'0000'
         PUT   CLIST,CLINE             WRITE INTO CLIST FILE
         MVI   CLINE,X'40'             RESET THE LINE BUFFER
         MVC   CLINE+1(L'CLINE-1),CLINE  TO SPACES
         BR    R3                      RETURN
*
*  SUBROUTINE TO POINT TO THE NEXT DATA POSITION IN THE OUTPUT LINE.
*
NXTSPC   EQU   *
         LA    R5,1(R5)                INCREMENT POINTER
         CLC   0(4,R5),=C'    '        CHECK FOR A SPACE
         BNE   NXTSPC                  LOOP TIL SPACE FOUND
         BR    R2                      RETURN
*
*  SUBROUTINE TO CONVERT FROM BINARY TO EBCDIC AND LEFT JUSTIFY.
*
CNVEBC   EQU   *
         CVD   R7,PWORK                CONVERT TO PACKED DECIMAL
         UNPK  WORK1,PWORK+3(5)        UNPACK RESULTS
         MVZ   WORK1+7(1),WORK1+6      MOVE THE ZONE BYTE
         MVI   WORK2,X'40'             CLEAR OUT OTHER WORK BUFFER
         MVC   WORK2+1(L'WORK2-1),WORK2
         LA    R6,WORK2                GET ADDRESSES FOR MOVE
         LA    R8,WORK1
         LA    R9,8                    MOVE MAX OF 8 CHARACTERS
CE10     EQU   *
         CLI   0(R8),C'0'              LEADING ZERO?
         BE    CE30                    IF SO, BRANCH
CE20     EQU   *
         MVC   0(1,R6),0(R8)           MOVE A CHARACTER
         LA    R6,1(R6)                INCREMENT POINTERS
         LA    R8,1(R8)
         BCT   R9,CE20                 AND LOOP TIL DONE
         B     CE40
CE30     EQU   *
         LA    R8,1(R8)                INCREMENT ONE POINTER
         BCT   R9,CE10                 AND LOOP
CE40     EQU   *
         BR    R2                      RETURN
*
***********************************************************************
*                                                                     *
*                     CONSTANT DATA                                   *
*                                                                     *
***********************************************************************
*
*  REGISTER EQUATES
*
R0       EQU   00
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
         LTORG
*
*    THE FOLLOWING DATA IS USED TO INIT PART OF THE GETMAIN'ED AREA
*
CDATA    DS    0F
ISEQNUM  DC    P'00000000'
ILINE#   DC    P'00000000'
IREF     DC    CL20' '
DCB1     DCB   DDNAME=VTOC,DSORG=PS,RECFM=U,KEYLEN=44,BLKSIZE=96,      X
               MACRF=(R),EODAD=CLOSE
DCB2     DCB   DDNAME=EXPORT,DSORG=PS,RECFM=FB,LRECL=80,               X
               MACRF=(PM)
DCB3     DCB   DDNAME=IMPORT,DSORG=PS,RECFM=FB,LRECL=80,               X
               MACRF=(PM)
DCB4     DCB   DDNAME=CLIST,DSORG=PS,RECFM=VB,LRECL=255,               X
               MACRF=(PM)
DCB5     DCB   DDNAME=SYSPRINT,DSORG=PS,RECFM=FB,LRECL=132,            X
               MACRF=(PM)
LIST1    RDJFCB (,),MF=L
LIST2    OPEN   (,),MF=L
LIST3    CVAFSEQ ACCESS=GT,IXRCDS=KEEP,BRANCH=NO,MF=L
LIST4    CLOSE  (,),MF=L
LIST5    TRKCALC MF=L
MOVEL    EQU   *-CDATA
*
*
*  MISCELLANEOUS CONSTANTS
*
LINE1A   DC    C'EXEC PGM=IDCAMS'
LINE1B   DC    C'EXEC PGM=IEBGENER'
LINE2A   DC    C'SYSPRINT DD SYSOUT=*'
LINE3A   DC    C'DD DSN='
LINE3B   DC    C',DISP=(,CATLG),'
LINE3C   DC    C',DISP=(OLD,PASS),'
LINE4A   DC    C'UNIT=TAPE62,'
LINE4B   DC    C'VOL=(,RETAIN'
LINE4C   DC    C'),LABEL='
LINE5A   DC    C'DCB=(BLKSIZE='
LINE5B   DC    C',DEN=4'
LINE5C   DC    C',LRECL='
LINE5D   DC    C',RECFM='
LINE5E   DC    C'DD UNIT='
LINE5F   DC    C',DISP=SHR'
LINE6A   DC    C'SYSIN    DD *'
LINE6B   DC    C',DISP=(OLD,DELETE,KEEP)'
LINE6C   DC    C'SPACE=('
LINE7A   DC    C'OUTFILE(DD1) PURGE PERMANENT'
LINE7B   DC    C') INFILE(DD1)'
LINE7C   DC    C'VOL=SER='
LINE7D   DC    C',UNIT='
LINE7E   DC    C'VOLUMES('
LINE7F   DC    C') FILE(DD2)))'
LINE8A   DC    C'SYSIN    DD DUMMY'
REFDD1   DC    C',REF=*.STEP1.DD1'
REFSYSUT DC    C',REF=*.STEP1.SYSUT2'
VTOCLBL  DC    CL8'VTOC'
FSTLINE  DC    C'PROC 0'
SNDLINE  DC    C'CONTROL LIST NOFLUSH PROMPT MSG'
LSTLINE  DC    C'END'
AIXLINE  DC    C'THE FOLLOWING ALTERNATE INDEXES WILL NOT BE EXPORTED:'
*
***********************************************************************
*                                                                     *
*                    DSECTS FOR GETMAIN'ED AREA                       *
*                                                                     *
***********************************************************************
WORKAREA DSECT
SAVEAREA DS    18F
*
LINE     DS    0CL80
         DS    CL2
LLABEL   DS    CL8
         DS    CL1
LCOL1    DS    CL2
         DS    CL1
LCOL2    DS    CL66
*
CLINE    DS    0CL255
         DS    CL2
LINENO   DS    CL8
CMDLINE  DS    CL245
*
SPLINE   DS    0CL132
         DS    CL5
SPDSN    DS    CL127
*
ALLOC    DS    CL10
BLKSIZE  DS    CL8
DATE     DS    CL5
NEWUNIT  DS    CL4
NEWVOL   DS    CL6
NUM      DS    CL4
PRNTFLG  DS    CL1
PARMBUF  DS    CL20
PRIALLOC DS    CL8
RCODE    DS    CL1
RECFMT   DS    CL4
RECLEN   DS    CL8
SAVDSNAM DS    CL44
SECALLOC DS    CL8
SEQ#     DS    CL8
SPCLVSAM DS    CL1
TAPEDSN  DS    CL44
TBLKSIZE DS    CL8
TYPE     DS    CL5
VSAMONLY DS    CL1
VOL      DS    CL6
WORK1    DS    CL8
WORK2    DS    CL8
DSCB     DS    XL140
JFCBA    DS    XL176
HICC     DS    1H
LOCC     DS    1H
HIHH     DS    1H
LOHH     DS    1H
TRKSPCYL DS    1H
DEBADDR  DS    1F
EXLIST   DS    1F
DEVBUF   DS    5F
LRECL    DS    1F
NUMBLKS  DS    1F
WORK3    DS    1F
PWORK    DS    1D
BUFLIST  ICVAFBFL DSECT=NO
BUFLEN   EQU   *-BUFLIST
*
DATA     DS    0F
SEQNUM   DS    P'00000000'
LINE#    DS    P'00000000'
REF      DS    CL20
VTOC     DCB   DDNAME=VTOC,DSORG=PS,RECFM=U,KEYLEN=44,BLKSIZE=96,      X
               MACRF=(R),EODAD=CLOSE
EXPORT   DCB   DDNAME=EXPORT,DSORG=PS,RECFM=FB,LRECL=80,               X
               MACRF=(PM)
IMPORT   DCB   DDNAME=IMPORT,DSORG=PS,RECFM=FB,LRECL=80,               X
               MACRF=(PM)
CLIST    DCB   DDNAME=CLIST,DSORG=PS,RECFM=VB,LRECL=255,               X
               MACRF=(PM)
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,RECFM=FB,LRECL=132,            X
               MACRF=(PM)
EX1      RDJFCB (,),MF=L
EX2      OPEN   (,),MF=L
EX3      CVAFSEQ ACCESS=GT,IXRCDS=KEEP,BRANCH=NO,MF=L
         ORG   EX3
CVPLMAP  ICVAFPL DSECT=NO
EX4      CLOSE  (,),MF=L
EX5      TRKCALC MF=L
*
LDATA    EQU   *-WORKAREA
*
*
DSCB1    DSECT
         IECSDSL1 1
DSCBLTH  EQU   *-DSCB1-L'DS1DSNAM
JFCB     DSECT
         IEFJFCBN ,
DCBSECT  DSECT
         DCBD  DSORG=PS,DEVD=DA
         END   EXIMPORT
