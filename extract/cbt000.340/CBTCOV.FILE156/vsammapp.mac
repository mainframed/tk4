        /* DATA SET O9291B15   AT LEVEL 003 AS OF 12/24/80    */
        /* DATA SET O9291B15   AT LEVEL 002 AS OF 05/12/80    */
 O9291B15: PROCEDURE OPTIONS ( MAIN ) REORDER;
0  DEFAULT RANGE ( I:N )    VALUE ( FIXED BINARY (31) );
   DEFAULT RANGE(*)         STATIC;
-  DECLARE
      DETLIN            FILE SEQUENTIAL RECORD OUTPUT,
      DETLOUT           FILE SEQUENTIAL RECORD INPUT,
      VOLMIN            FILE SEQUENTIAL RECORD OUTPUT,
      VOLMOUT           FILE SEQUENTIAL RECORD INPUT,
      VSAMCAT           FILE SEQUENTIAL RECORD INPUT,
      DISKTBL           FILE SEQUENTIAL RECORD INPUT,
      VSAMKEY           FILE DIRECT INPUT ENVIRONMENT( VSAM )
                        RECORD KEYED,
   /* DEBUGPT           FILE STREAM OUTPUT PRINT, */
      PRTFILE           FILE SEQUENTIAL RECORD OUTPUT;
0  DECLARE 1 DETAIL_CLUSTER,
      2  DC_VOLSER      CHAR (6) INIT (' '),
      2  DC_CCHHCCHH    BIT (64) INIT ('0'B),
      2  DC_CLUSTER     CHAR (44) INIT (' '),
      2  DC_DATASET     CHAR (44) INIT (' '),
      2  DC_NTRACKS     FIXED BINARY (31) INIT (0),
      2  DC_ANCHOR_RBA  BIT (24) INIT ('0'B);
0  DECLARE 1 DETAIL_VOLUME,
      2  DV_ENTNAME          CHAR (44),  /* VOLUME SERIAL NUMBER */
      2  DV_VOLSTMP          BIT (64),   /* VOLUME TIME STAMP */
      2  DV_VOLDVCHR,                    /* DEVICE CHARACTERISTICS */
          3  VDEVT           BIT (32),   /* DEVICE TYPE */
          3  VMAX_BLOCK      BIT (32),   /* MAXIMUM BLOCK SIZE */
          3  VCYL_VOL        BIT (16),   /* CYLINDERS/VOLUME */
          3  VTRK_CYL        BIT (16),   /* TRACKS/CYLINDER */
          3  VBYTES_TRK      BIT (16),   /* BYTES/TRACK */
          3  VGAP_BYTES      BIT (8),    /* BYTES REQUIRED FOR GAPS */
          3  VGAPL_BYTES     BIT (8),    /* BYTES FOR GAPS FOR LAST */
          3  VNKEY_BYTES     BIT (8),    /* BYTES SUB FOR NOT KEYED */
          3  VOLDFLAGS       BIT (8),    /* FLAGS */
          3  VTOLERANCE      BIT (16),   /* TOLERANCE FACTOR */
      2  DV_ANCHOR_RBA       BIT (24);   /* RBA FOR CLUSTER BASE */
0  DECLARE 1 CAT_GENERAL BASED ( VSAMPTR ),
      2  ZZA                 BIT (8),
      2  CURRBA              BIT (24),
      2  ZZB                 BIT (320),
      2  ENTYPE              CHAR (1);   /* RECORD TYPE */
0  DECLARE 1 CAT_TYPE_C BASED ( VSAMPTR ),
      2  ZZA                 BIT (392),
      2  CENTNAME            CHAR (44);  /* CLUSTER NAME */
0  DECLARE 1 CAT_TYPE_V BASED ( VSAMPTR ),
      2  ZZA                 BIT (392),
      2  VENTNAME            CHAR (8);   /* VOLUME SERIAL NUMBER */
0  DECLARE
      ( ADDR, BIT, DATE, HIGH, ONCHAR, PLIRETC, SUBSTR, TIME, UNSPEC )
                        BUILTIN,
      ( I, J )          FIXED BINARY (31) INIT (0),
      VSAMPTR           POINTER,
      NEW_RECORD        CHAR (505) INIT (' '),
      TRK_CYL           FIXED BINARY (31) INIT (0),
      DATA_EXTENTS(DATA_EXTENTS_SIZE) BIT (64) INIT ('0'B) CONTROLLED,
      DATA_EXTENTS_SIZE FIXED BINARY (31) INIT (124),
      OLD_KEYS(OLD_KEYS_SIZE) CHAR (3) INIT (' ') CONTROLLED,
      OLD_KEYS_SIZE     FIXED BINARY (31) INIT (60),
      RETURN_CODE       FIXED BINARY (31) INIT (0);
-         ON ERROR BEGIN;
              ON ERROR SYSTEM;
              PUT DATA;
              GO TO END_VSAM3;
              END;
          SUBSTR( VH1_DATE, 1, 2 ) = SUBSTR( DATE(), 3, 2 );
          SUBSTR( VH1_DATE, 4, 2 ) = SUBSTR( DATE(), 5, 2 );
          SUBSTR( VH1_DATE, 7, 2 ) = SUBSTR( DATE(), 1, 2 );
          SUBSTR( VH1_TIME, 1, 2 ) = SUBSTR( TIME(), 1, 2 );
          SUBSTR( VH1_TIME, 4, 2 ) = SUBSTR( TIME(), 3, 2 );
          ALLOCATE DATA_EXTENTS, OLD_KEYS;
          OPEN FILE ( VSAMCAT ), FILE ( VSAMKEY ),
              FILE ( DETLIN ), FILE ( VOLMIN );
          ON ENDFILE ( VSAMCAT ) GO TO END_VSAM;
 READ_VSAM: READ FILE ( VSAMCAT ) INTO ( NEW_RECORD );
          VSAMPTR = ADDR( NEW_RECORD );
          DC_DATASET = ' ';
          OLD_KEYS = HIGH(3);
0         IF ENTYPE = 'V' THEN V0: DO;
              DC_CLUSTER = '              DATA SPACE  RBA=';
              DC_ANCHOR_RBA = CURRBA;
              DV_ANCHOR_RBA = CURRBA;
              CALL PROCESS_VSAM_VOLUME( NEW_RECORD, ENTYPE );
              END V0;
0         IF ENTYPE = 'C' THEN DO;
              DC_CLUSTER = CENTNAME;
              DC_ANCHOR_RBA = CURRBA;
           /* PUT FILE ( DEBUGPT ) DATA ( DETAIL_CLUSTER ) SKIP(3); */
              CALL PROCESS_VSAM_CLUSTER( NEW_RECORD, ENTYPE );
              END;
0         GO TO READ_VSAM;
1PROCESS_VSAM_CLUSTER: PROCEDURE ( CURRENT_RECORD, CURRENT_TYPE )
           OPTIONS( REENTRANT ) RECURSIVE REORDER;
-  DEFAULT RANGE(*)         AUTOMATIC;
   DECLARE
     ( VSAMPTR, VSAMPTR1, VSAMPTR3, VSAMPTR4 )
                        POINTER,
     VSAMPTR1A          DEFINED ( VSAMPTR1 ) FIXED BINARY (31)
                        UNALIGNED POSITION (1),
     VSAMPTR3A          DEFINED ( VSAMPTR3 ) FIXED BINARY (31)
                        UNALIGNED POSITION (1),
     VSAMPTR4A          DEFINED ( VSAMPTR4 ) FIXED BINARY (31)
                        UNALIGNED POSITION (1),
     ( I, J, K )        FIXED BINARY (31) INIT (0),
     CURRENT_RECORD     CHAR (505),
     NEW_RECORD         CHAR (505) INIT (' '),
     CHAR3              CHAR (3) INIT (' '),
     CURRENT_TYPE       CHAR (1);
 DECLARE BIT24 BIT (24) INIT ('0'B);
0         VSAMPTR = ADDR( CURRENT_RECORD );
       /* PUT FILE ( DEBUGPT ) EDIT ( 'PROCESS_VSAM_CLUSTER--', ENTYPE,
              '  CURRENT_TYPE--',CURRENT_TYPE)(SKIP(3),A,A,A,A);
          PUT FILE ( DEBUGPT ) DATA ( CAT_TYPE_C ) SKIP;
          PUT FILE ( DEBUGPT ) DATA ( DC_ANCHOR_RBA ) SKIP; */
-         IF ENTYPE = 'C' × ENTYPE = 'G' THEN C_G: DO;
              VSAMPTR1 = VSAMPTR;
              VSAMPTR1A = VSAMPTR1A + CLEN_FIX_FLDS;
           /* IF ENTYPE = 'C' THEN DO;
                  PUT FILE ( DEBUGPT ) DATA ( CENTNAME );
                  PUT FILE ( DEBUGPT ) DATA ( CAT_TYPE_C.ZZA ) SKIP;
                  END; */
              DATA_EXTENTS = '0'B;
              J = SNO_SOF;
              IF J > SREC_SUBSCRIPT THEN DO;
                  PUT EDIT ( 'PROCESS_VSAM_CLUSTER--C' ) ( SKIP(5), A );
                  PUT EDIT ( 'NUMBER OF FIELDS IN THE SET OF FIELDS ',
                      'IS GREATER THAN THE DEFAULT MAXIMUM.' )
                     ( SKIP, A, A );
                  PUT DATA ( SET_OF_FIELDS ) SKIP;
                  RETURN_CODE = 88;
                  GO TO END_VSAM2;
                  END;
              IF OLD_KEYS( OLD_KEYS_SIZE ) ^= HIGH(3) THEN
                  CALL OLD_KEYS_SMALL;
              DO I = 1 TO J;
                  IF SREC_GROUP_CD( I ) = 2 THEN DO;
                      VSAMPTR3 = VSAMPTR1;
                      VSAMPTR3A = VSAMPTR3A + 6 + 5 * J
                          + SUBSTR( SREC_CINUM( I ), 9, 16 );
                      IF ASSOC_TYPE = 'D' THEN D4: DO;
                      D5: DO K = 1 TO OLD_KEYS_SIZE;
                              IF OLD_KEYS( K ) = ASSOC_NAME THEN
                                  LEAVE D4;
                              IF OLD_KEYS( K ) = HIGH(3) THEN DO;
                                  OLD_KEYS( K ) = ASSOC_NAME;
                                  LEAVE D5;
                                  END;
                              END D5;
                          READ FILE ( VSAMKEY ) INTO ( NEW_RECORD )
                              KEY ( ASSOC_NAME );
                          CALL PROCESS_VSAM_CLUSTER( NEW_RECORD,
                              ENTYPE );
                          END D4;
                      END;
                  END;
              IF OLD_KEYS( OLD_KEYS_SIZE ) ^= HIGH(3) THEN
                  CALL OLD_KEYS_SMALL;
              DO I = 1 TO J;
                  IF SREC_GROUP_CD( I ) = 2 THEN DO;
                      VSAMPTR3 = VSAMPTR1;
                      VSAMPTR3A = VSAMPTR3A + 6 + 5 * J
                          + SUBSTR( SREC_CINUM( I ), 9, 16 );
                      IF ASSOC_TYPE = 'I' THEN D6: DO;
                      D7: DO K = 1 TO OLD_KEYS_SIZE;
                              IF OLD_KEYS( K ) = ASSOC_NAME THEN
                                  LEAVE D6;
                              IF OLD_KEYS( K ) = HIGH(3) THEN DO;
                                  OLD_KEYS( K ) = ASSOC_NAME;
                                  LEAVE D7;
                                  END;
                              END D7;
                          READ FILE ( VSAMKEY ) INTO ( NEW_RECORD )
                              KEY ( ASSOC_NAME );
                          CALL PROCESS_VSAM_CLUSTER( NEW_RECORD,
                              ENTYPE );
                          END D6;
                      END;
                  END;
              IF OLD_KEYS( OLD_KEYS_SIZE ) ^= HIGH(3) THEN
                  CALL OLD_KEYS_SMALL;
              DO I = 1 TO J;
                  IF SREC_GROUP_CD( I ) = 2 THEN DO;
                      VSAMPTR3 = VSAMPTR1;
                      VSAMPTR3A = VSAMPTR3A + 6 + 5 * J
                          + SUBSTR( SREC_CINUM( I ), 9, 16 );
                      IF ASSOC_TYPE = 'G' THEN D8: DO;
                      D9: DO K = 1 TO OLD_KEYS_SIZE;
                              IF OLD_KEYS( K ) = ASSOC_NAME THEN
                                  LEAVE D8;
                              IF OLD_KEYS( K ) = HIGH(3) THEN DO;
                                  OLD_KEYS( K ) = ASSOC_NAME;
                                  LEAVE D9;
                                  END;
                              END D9;
                          READ FILE ( VSAMKEY ) INTO ( NEW_RECORD )
                              KEY ( ASSOC_NAME );
                          CALL PROCESS_VSAM_CLUSTER( NEW_RECORD,
                              ENTYPE );
                          END D8;
                      END;
                  END;
              IF OLD_KEYS( OLD_KEYS_SIZE ) ^= HIGH(3) THEN
                  CALL OLD_KEYS_SMALL;
              IF SHO_GROUP_CD ^= '0'B × SHO_SEQ_NO ^= '0'B ×
                  UNSPEC( SHO_CINUM ) ^= '0'B THEN D12: DO;
                 D13: DO K = 1 TO OLD_KEYS_SIZE;
                          IF OLD_KEYS( K ) = SHO_CINUM THEN LEAVE D12;
                          IF OLD_KEYS( K ) = HIGH(3) THEN DO;
                              OLD_KEYS( K ) = SHO_CINUM;
                              LEAVE D13;
                              END;
                          END D13;
                      READ FILE ( VSAMKEY ) INTO ( NEW_RECORD )
                          KEY ( SHO_CINUM );
                      CALL PROCESS_VSAM_CLUSTER( NEW_RECORD,
                         ENTYPE );
                  END D12;
              END C_G;
-         IF ENTYPE = 'E' THEN E: DO;
              VSAMPTR1 = VSAMPTR;
              VSAMPTR1A = VSAMPTR1A + ELEN_FIX_FLDS;
              J = SNO_SOF;
              IF J > SREC_SUBSCRIPT THEN DO;
                  PUT EDIT ( 'PROCESS_VSAM_CLUSTER--E' ) ( SKIP(5), A );
                  PUT EDIT ( 'NUMBER OF FIELDS IN THE SET OF FIELDS ',
                      'IS GREATER THAN THE DEFAULT MAXIMUM.' )
                     ( SKIP, A, A );
                  PUT DATA ( SET_OF_FIELDS ) SKIP;
                  RETURN_CODE = 88;
                  GO TO END_VSAM2;
                  END;
              IF OLD_KEYS( OLD_KEYS_SIZE ) ^= HIGH(3) THEN
                  CALL OLD_KEYS_SMALL;
              DO I = 1 TO J;
                  IF SREC_GROUP_CD( I ) = '00000010'B THEN DO;
                      VSAMPTR3 = VSAMPTR1;
                      VSAMPTR3A = VSAMPTR3A + 6 + 5 * J
                          + SUBSTR( SREC_CINUM( I ), 9, 16 );
                      IF ASSOC_TYPE = 'D' × ASSOC_TYPE = 'I'
                          × ( ASSOC_TYPE = 'G' & CURRENT_TYPE = 'C' )
                          THEN D10: DO;
 /* THIS SECTION NOT DEBUGGED YET BECAUSE CONDITIONS WERE NOT MET */
 RETURN_CODE = 88; PUT EDIT ( 'ENTYPE E1' ) ( SKIP(2), A );
 PUT DATA ( CAT_TYPE_E, SET_OF_FIELDS ) SKIP;
                          BIT24 = UNSPEC( ASSOC_NAME );
                          PUT DATA ( ASSOC_TYPE, BIT24 ) SKIP(2);
                     D11: DO K = 1 TO OLD_KEYS_SIZE;
                              IF OLD_KEYS( K ) = ASSOC_NAME THEN
                                  LEAVE D10;
                              IF OLD_KEYS( K ) = HIGH(3) THEN DO;
                                  OLD_KEYS( K ) = ASSOC_NAME;
                                  LEAVE D11;
                                  END;
                              END D11;
                          READ FILE ( VSAMKEY ) INTO ( NEW_RECORD )
                              KEY ( ASSOC_NAME );
                          CALL PROCESS_VSAM_CLUSTER( NEW_RECORD,
                              CURRENT_TYPE );
                          END D10;
                      END;
                  IF SREC_GROUP_CD( I ) = '10000010'B THEN D18: DO;
 /* THIS SECTION NOT DEBUGGED YET BECAUSE CONDITIONS WERE NOT MET */
 RETURN_CODE = 88; PUT EDIT ( 'ENTYPE E2' ) ( SKIP(2), A );
 PUT DATA ( CAT_TYPE_E, SET_OF_FIELDS ) SKIP;
                      UNSPEC( CHAR3 ) = SREC_CINUM( I );
                 D19: DO K = 1 TO OLD_KEYS_SIZE;
                          IF OLD_KEYS( K ) = CHAR3 THEN LEAVE D18;
                          IF OLD_KEYS( K ) = HIGH(3) THEN DO;
                              OLD_KEYS( K ) = CHAR3;
                              LEAVE D19;
                              END;
                          END D19;
                      READ FILE ( VSAMKEY ) INTO ( NEW_RECORD )
                          KEY ( CHAR3 );
                      CALL PROCESS_VSAM_CLUSTER( NEW_RECORD,
                          CURRENT_TYPE );
                      END D18;
                  IF SREC_GROUP_CD( I ) = '00000011'B & ( CURRENT_TYPE
                      = 'D' × CURRENT_TYPE = 'I' ) THEN DO;
                      VSAMPTR4 = VSAMPTR1;
                      VSAMPTR4A = VSAMPTR4A + 6 + 5 * J
                          + SUBSTR( SREC_CINUM( I ), 9, 16 );
                      CALL PULL_VOLUME( VSAMPTR4, CURRENT_TYPE );
                      END;
                  IF SREC_GROUP_CD( I ) = '10000011'B THEN D14: DO;
 /* THIS SECTION NOT DEBUGGED YET BECAUSE CONDITIONS WERE NOT MET */
 RETURN_CODE = 88; PUT EDIT ( 'ENTYPE E4' ) ( SKIP(2), A );
 PUT DATA ( CAT_TYPE_E, SET_OF_FIELDS ) SKIP;
                      UNSPEC( CHAR3 ) = SREC_CINUM( I );
                 D15: DO K = 1 TO OLD_KEYS_SIZE;
                          IF OLD_KEYS( K ) = CHAR3 THEN LEAVE D14;
                          IF OLD_KEYS( K ) = HIGH(3) THEN DO;
                              OLD_KEYS( K ) = CHAR3;
                              LEAVE D15;
                              END;
                          END D15;
                      READ FILE ( VSAMKEY ) INTO ( NEW_RECORD )
                          KEY ( CHAR3 );
                      CALL PROCESS_VSAM_CLUSTER( NEW_RECORD,
                          CURRENT_TYPE );
                      END D14;
                  END;
              IF OLD_KEYS( OLD_KEYS_SIZE ) ^= HIGH(3) THEN
                  CALL OLD_KEYS_SMALL;
              IF SHO_GROUP_CD ^= '0'B × SHO_SEQ_NO ^= '0'B ×
                  UNSPEC( SHO_CINUM ) ^= '0'B THEN D20: DO;
                 D21: DO K = 1 TO OLD_KEYS_SIZE;
                          IF OLD_KEYS( K ) = SHO_CINUM THEN LEAVE D20;
                          IF OLD_KEYS( K ) = HIGH(3) THEN DO;
                              OLD_KEYS( K ) = SHO_CINUM;
                              LEAVE D21;
                              END;
                          END D21;
                      READ FILE ( VSAMKEY ) INTO ( NEW_RECORD )
                          KEY ( SHO_CINUM );
                      CALL PROCESS_VSAM_CLUSTER( NEW_RECORD,
                          CURRENT_TYPE );
                  END D20;
              END E;
-         IF ENTYPE = 'D' × ENTYPE = 'I' THEN D_I: DO;
              DC_DATASET = DENTNAME;
              VSAMPTR1 = VSAMPTR;
              VSAMPTR1A = VSAMPTR1A + DLEN_FIX_FLDS;
           /* PUT FILE ( DEBUGPT )
                  DATA ( CAT_TYPE_D_I, SET_OF_FIELDS ) SKIP; */
              J = SNO_SOF;
              IF J > SREC_SUBSCRIPT THEN DO;
                  PUT EDIT ( 'PROCESS_VSAM_CLUSTER--D' ) ( SKIP(5), A );
                  PUT EDIT ( 'NUMBER OF FIELDS IN THE SET OF FIELDS ',
                      'IS GREATER THAN THE DEFAULT MAXIMUM.' )
                     ( SKIP, A, A );
                  PUT DATA ( SET_OF_FIELDS ) SKIP;
                  RETURN_CODE = 88;
                  GO TO END_VSAM2;
                  END;
              IF OLD_KEYS( OLD_KEYS_SIZE ) ^= HIGH(3) THEN
                  CALL OLD_KEYS_SMALL;
              DO I = 1 TO J;
                  IF SREC_GROUP_CD( I ) = '00000011'B THEN DO;
                      VSAMPTR4 = VSAMPTR1;
                      VSAMPTR4A = VSAMPTR4A + 6 + 5 * J
                          + SUBSTR( SREC_CINUM( I ), 9, 16 );
                      CALL PULL_VOLUME( VSAMPTR4, ENTYPE );
                      END;
                  IF SREC_GROUP_CD( I ) = '10000011'B THEN D16: DO;
                      UNSPEC( CHAR3 ) = SREC_CINUM( I );
                 D17: DO K = 1 TO OLD_KEYS_SIZE;
                          IF OLD_KEYS( K ) = CHAR3 THEN LEAVE D16;
                          IF OLD_KEYS( K ) = HIGH(3) THEN DO;
                              OLD_KEYS( K ) = CHAR3;
                              LEAVE D17;
                              END;
                          END D17;
                      READ FILE ( VSAMKEY ) INTO ( NEW_RECORD )
                          KEY ( CHAR3 );
                      CALL PROCESS_VSAM_CLUSTER( NEW_RECORD,
                          ENTYPE );
                      END D16;
                  END;
              IF SHO_GROUP_CD ^= '0'B × SHO_SEQ_NO ^= '0'B ×
                  UNSPEC( SHO_CINUM ) ^= '0'B THEN D22: DO;
                 D23: DO K = 1 TO OLD_KEYS_SIZE;
                          IF OLD_KEYS( K ) = SHO_CINUM THEN LEAVE D22;
                          IF OLD_KEYS( K ) = HIGH(3) THEN DO;
                              OLD_KEYS( K ) = SHO_CINUM;
                              LEAVE D23;
                              END;
                          END D23;
                      READ FILE ( VSAMKEY ) INTO ( NEW_RECORD )
                          KEY ( SHO_CINUM );
                      CALL PROCESS_VSAM_CLUSTER( NEW_RECORD,
                         ENTYPE );
                  END D22;
              END D_I;
       /* PUT FILE ( DEBUGPT )
              EDIT ( 'LEAVE PROCESS_VSAM_CLUSTER--', ENTYPE,
              '  CURRENT_TYPE--',CURRENT_TYPE)(SKIP(2),A,A,A,A); */
-PULL_VOLUME: PROCEDURE ( C_VOLUME, CURRENT_TYPE )
          REORDER OPTIONS ( REENTRANT ) RECURSIVE;
   DECLARE
     ( C_VOLUME, VSAMPTR4, VSAMPTR5 )
                        POINTER,
     CURRENT_TYPE       CHAR (1),
     WORK_SPACE         FIXED BINARY (31) INIT (0),
     VSAMPTR5A          DEFINED ( VSAMPTR5 ) FIXED BINARY (31)
                        UNALIGNED POSITION (1),
     ( I, J, K )        FIXED BINARY (31) INIT (0);
0         VSAMPTR4 = C_VOLUME;
       /* PUT FILE ( DEBUGPT )
              EDIT ( 'PULL_VOLUME--', CURRENT_TYPE )(SKIP(2),A,A); */
          IF VOL_OFFSET > 2 THEN DC_VOLSER = VOL_VOLSER;
          VSAMPTR5 = VSAMPTR4;
          VSAMPTR5A = VSAMPTR5A + VOL_OFFSET;
          VSAMPTR5A = VSAMPTR5A + VOL_VFLDLEN + 2;
          VSAMPTR5A = VSAMPTR5A + VOL_VFLDLEN + 2;
  /****** IF J ^= VOL_VFLDLEN / 20 THEN DO;
              PUT EDIT ( 'NUMBER OF FIELDS IN THE NUMBER OF EXTENTS ',
                  'FOR A VOLUME DOES NOT MATCH THE LENGTH OF THE FIELD')
                  ( SKIP(5), A, A );
              PUT DATA ( VOLUME_GC3, VOL_VFLDLEN ) SKIP;
              RETURN_CODE = 88;
              GO TO END_VSAM2;
              END; ***************** REMOVED BECAUSE AN ERROR BUT
  NOT REMOVED FROM VERSION SENT TO SHARE MVS MODS TAPE ****************/
          J = VOL_VFLDLEN / 20;
      D0: DO I = 1 TO J;
              DC_CCHHCCHH = VOL_CCHHCCHH( I );
              DC_NTRACKS = VOL_TRKS( I );
              IF CURRENT_TYPE = 'D' THEN
              D1: DO K = 1 TO DATA_EXTENTS_SIZE;
                  IF DATA_EXTENTS( K ) = '0'B THEN DO;
                      DATA_EXTENTS( K ) = DC_CCHHCCHH;
                      WRITE FILE ( DETLIN ) FROM ( DETAIL_CLUSTER );
                      LEAVE D1;
                      END;
                  END D1;
                 ELSE IF CURRENT_TYPE = 'I' THEN DO;
                      DO K = 1 TO DATA_EXTENTS_SIZE;
                      IF DATA_EXTENTS( K ) = DC_CCHHCCHH THEN LEAVE D0;
                      IF DATA_EXTENTS( K ) = '0'B THEN LEAVE;
                      END;
                  WRITE FILE ( DETLIN ) FROM ( DETAIL_CLUSTER );
                  END;
              END D0;
-  DECLARE 1 VOLUME_GC3 BASED ( VSAMPTR4 ),
      2  VOL_NO_VLF          BIT (8),    /* NUMBER OF VAR-LEN FLDS */
      2  VOL_OFFSET          BIT (8),    /* OFFSET TO VAR_LEN FLDS */
      2  ZZA                 BIT (32),
      2  VOL_VOLSER          CHAR (6);   /* VOLUME SERIAL NUMBER */
-  DECLARE VOL_NO_VFIELD     FIXED BINARY (31) INIT (21);
 /* INIT VALUE MUST BE EQUAL TO NUMBER OF SUBSCRIPTS FOR VOL_VFIELD */
   DECLARE 1 VOLUME_GC3_VAR BASED ( VSAMPTR5 ),
      2  VOL_VFLDLEN         BIT (16),   /* LENGTH OF THE FIELD */
      2  VOL_VFIELD(21),                 /* DATA FIELD */
         3  ZZA              BIT (16),
         3  VOL_CCHHCCHH     BIT (64),   /* LOW & HIGH CYL & HEAD */
         3  VOL_TRKS         BIT (16),   /* NUMBER OF TRACKS */
         3  ZZB              BIT (64);
0         END PULL_VOLUME;
-  DECLARE 1 CAT_TYPE_C BASED ( VSAMPTR ),
      2  ZZA                 BIT (352),
      2  ENTYPE              CHAR (1),   /* RECORD TYPE */
      2  ZZB                 BIT (24),
      2  CLEN_FIX_FLDS       BIT (8);    /* LENGTH OF FIX LEN FIELDS */
-  DECLARE 1 CAT_TYPE_D_I BASED ( VSAMPTR ),
      2  ZZA                 BIT (384),
      2  DLEN_FIX_FLDS       BIT (8),    /* LENGTH OF FIX LEN FIELDS */
      2  DENTNAME            CHAR (44),  /* THE DATA SET'S DSNAME */
      2  ZZB                 BIT (112),
      2  DATTR1              BIT (8);    /* DATA SET ATTRIBUTES */
-  DECLARE SREC_SUBSCRIPT    FIXED BINARY (31) INIT (10);
 /* INIT VALUE MUST BE EQUAL TO NUMBER OF SUBSCRIPTS FOR SREC BELOW */
   DECLARE 1 SET_OF_FIELDS BASED ( VSAMPTR1 ),
      2  SHOREXT,
          3  SHO_CINUM       CHAR (3),   /* CINO OF EXTENSION RECORD */
          3  SHO_GROUP_CD    BIT (8),    /* GROUP CODE NUMBER */
          3  SHO_SEQ_NO      BIT (8),    /* SET NO OF SOF POINTED TO */
      2  SNO_SOF             BIT (8),    /* NUMBER OF SOF POINTERS */
      2  SREC(10),           /* POINTERS TO SOF IN THE RECORD */
          3  SREC_CINUM      BIT (24),   /* CINUM OF EXTENSION REC &
                                            DSPL OF SOF FROM BEGIN */
          3  SREC_GROUP_CD   BIT (8),    /* GROUP CODE NUMBER */
          3  ZZA             BIT (8);
-  DECLARE 1 ASSOC_GC2 BASED ( VSAMPTR3 ),
      2  ZZA                 BIT (16),
      2  ASSOC_TYPE          CHAR (1),   /* ALLOC RECORD TYPE */
      2  ASSOC_NAME          CHAR (3);   /* CI NUMBER OF CLUSTER */
-  DECLARE 1 CAT_TYPE_E BASED ( VSAMPTR ),
      2  ZZA                 BIT (384),
      2  ELEN_FIX_FLDS       BIT (8);    /* LENGTH OF FIX LEN FIELDS */
0         END PROCESS_VSAM_CLUSTER;
1PROCESS_VSAM_VOLUME: PROCEDURE ( CURRENT_RECORD, CURRENT_TYPE )
           OPTIONS( REENTRANT ) RECURSIVE REORDER;
-  DEFAULT RANGE(*)         AUTOMATIC;
   DECLARE
     ( VSAMPTR, VSAMPTR1, VSAMPTR3 )
                        POINTER,
     VSAMPTR1A          DEFINED ( VSAMPTR1 ) FIXED BINARY (31)
                        UNALIGNED POSITION (1),
     VSAMPTR3A          DEFINED ( VSAMPTR3 ) FIXED BINARY (31)
                        UNALIGNED POSITION (1),
     ( I, J, K )        FIXED BINARY (31) INIT (0),
     CURRENT_RECORD     CHAR (505),
     NEW_RECORD         CHAR (505) INIT (' '),
     CHAR3              CHAR (3) INIT (' '),
     HOLD_RBA           BIT (24) INIT ('0'B),
     CURRENT_TYPE       CHAR (1);
 DECLARE BIT24 BIT (24) INIT ('0'B);
0         VSAMPTR = ADDR( CURRENT_RECORD );
       /* PUT FILE ( DEBUGPT )
              EDIT ( 'PROCESS_VSAM_VOLUME--', ENTYPE,
              '  CURRENT_TYPE--', CURRENT_TYPE ) (SKIP(3),A,A,A,A);
          PUT FILE ( DEBUGPT ) DATA ( DC_ANCHOR_RBA ) SKIP; */
-         IF ENTYPE = 'V' THEN V: DO;
              VSAMPTR1 = VSAMPTR;
              VSAMPTR1A = VSAMPTR1A + VLEN_FIX_FLDS;
           /* PUT FILE ( DEBUGPT )
                  DATA ( CAT_TYPE_V, SREC_CINUM, SREC_GROUP_CD,
                  SNO_SOF ) SKIP; */
              DC_VOLSER = SUBSTR( VENTNAME, 1, 6 );
              DV_ENTNAME = VENTNAME;
              DV_VOLSTMP = VVOLSTMP;
              DV_VOLDVCHR = VVOLDVCHR;
              WRITE FILE ( VOLMIN ) FROM ( DETAIL_VOLUME );
           /* PUT FILE ( DEBUGPT ) DATA ( DETAIL_VOLUME ) SKIP(2); */
              TRK_CYL = VTRK_CYL;
              J = SNO_SOF;
              IF J > SREC_SUBSCRIPT THEN DO;
                  PUT EDIT ( 'PROCESS_VSAM_VOLUME--V' ) ( SKIP(5), A );
                  PUT EDIT ( 'NUMBER OF FIELDS IN THE SET OF FIELDS ',
                      'IS GREATER THAN THE DEFAULT MAXIMUM.' )
                     ( SKIP, A, A );
                  PUT DATA ( SET_OF_FIELDS ) SKIP;
                  RETURN_CODE = 88;
                  GO TO END_VSAM2;
                  END;
              IF OLD_KEYS( OLD_KEYS_SIZE ) ^= HIGH(3) THEN
                  CALL OLD_KEYS_SMALL;
              DO I = 1 TO J;
                  IF SREC_GROUP_CD( I ) = '00000110'B THEN DO;
                      VSAMPTR3 = VSAMPTR1;
                      VSAMPTR3A = VSAMPTR3A + 6 + 6 * J
                          + SUBSTR( SREC_CINUM( I ), 9, 16 );
                      CALL PULL_VVOLUME( VSAMPTR3 );
                      END;
                  IF SREC_GROUP_CD( I ) = '10000110'B THEN D2: DO;
                      HOLD_RBA = DC_ANCHOR_RBA;
                      DC_ANCHOR_RBA = SREC_CINUM( I );
                      UNSPEC( CHAR3 ) = SREC_CINUM( I );
                  D3: DO K = 1 TO OLD_KEYS_SIZE;
                          IF OLD_KEYS( K ) = CHAR3 THEN LEAVE D2;
                          IF OLD_KEYS( K ) = HIGH(3) THEN DO;
                              OLD_KEYS( K ) = CHAR3;
                              LEAVE D3;
                              END;
                          END D3;
                      READ FILE ( VSAMKEY ) INTO ( NEW_RECORD )
                          KEY ( CHAR3 );
                      CALL PROCESS_VSAM_VOLUME( NEW_RECORD,
                         ENTYPE );
                      DC_ANCHOR_RBA = HOLD_RBA;
                      END D2;
                  END;
              IF SHO_GROUP_CD ^= '0'B × SHO_SEQ_NO ^= '0'B ×
                  UNSPEC( SHO_CINUM ) ^= '0'B THEN D6: DO;
                      HOLD_RBA = DC_ANCHOR_RBA;
                      DC_ANCHOR_RBA = UNSPEC( SHO_CINUM );
                  D7: DO K = 1 TO OLD_KEYS_SIZE;
                          IF OLD_KEYS( K ) = SHO_CINUM THEN LEAVE D6;
                          IF OLD_KEYS( K ) = HIGH(3) THEN DO;
                              OLD_KEYS( K ) = SHO_CINUM;
                              LEAVE D7;
                              END;
                          END D7;
                      READ FILE ( VSAMKEY ) INTO ( NEW_RECORD )
                          KEY ( SHO_CINUM );
                      CALL PROCESS_VSAM_VOLUME( NEW_RECORD,
                         ENTYPE );
                      DC_ANCHOR_RBA = HOLD_RBA;
                  END D6;
              END V;
-         IF ENTYPE = 'W' THEN W: DO;
              VSAMPTR1 = VSAMPTR;
              VSAMPTR1A = VSAMPTR1A + WLEN_FIX_FLDS;
              J = SNO_SOF;
           /* PUT FILE ( DEBUGPT )
                  DATA ( CAT_TYPE_W, SET_OF_FIELDS ) SKIP; */
              IF J > SREC_SUBSCRIPT THEN DO;
                  PUT EDIT ( 'PROCESS_VSAM_VOLUME--W' ) ( SKIP(5), A );
                  PUT EDIT ( 'NUMBER OF FIELDS IN THE SET OF FIELDS ',
                      'IS GREATER THAN THE DEFAULT MAXIMUM.' )
                     ( SKIP, A, A );
                  PUT DATA ( SET_OF_FIELDS ) SKIP;
                  RETURN_CODE = 88;
                  GO TO END_VSAM2;
                  END;
              IF OLD_KEYS( OLD_KEYS_SIZE ) ^= HIGH(3) THEN
                  CALL OLD_KEYS_SMALL;
              DO I = 1 TO J;
                  IF SREC_GROUP_CD( I ) = '00000110'B THEN DO;
                      VSAMPTR3 = VSAMPTR1;
                      VSAMPTR3A = VSAMPTR3A + 6 + 6 * J
                          + SUBSTR( SREC_CINUM( I ), 9, 16 );
                      CALL PULL_VVOLUME( VSAMPTR3 );
                      END;
                  IF SREC_GROUP_CD( I ) = '10000110'B THEN D4: DO;
                      HOLD_RBA = DC_ANCHOR_RBA;
                      DC_ANCHOR_RBA = SREC_CINUM( I );
                      UNSPEC( CHAR3 ) = SREC_CINUM( I );
                  D5: DO K = 1 TO OLD_KEYS_SIZE;
                          IF OLD_KEYS( K ) = CHAR3 THEN LEAVE D4;
                          IF OLD_KEYS( K ) = HIGH(3) THEN DO;
                              OLD_KEYS( K ) = CHAR3;
                              LEAVE D5;
                              END;
                          END D5;
                      READ FILE ( VSAMKEY ) INTO ( NEW_RECORD )
                          KEY ( CHAR3 );
                      CALL PROCESS_VSAM_VOLUME( NEW_RECORD,
                          CURRENT_TYPE );
                      DC_ANCHOR_RBA = HOLD_RBA;
                      END D4;
                  END;
              IF SHO_GROUP_CD ^= '0'B × SHO_SEQ_NO ^= '0'B ×
                  UNSPEC( SHO_CINUM ) ^= '0'B THEN D10: DO;
                  HOLD_RBA = DC_ANCHOR_RBA;
                  DC_ANCHOR_RBA = UNSPEC( SHO_CINUM );
             D11: DO K = 1 TO OLD_KEYS_SIZE;
                      IF OLD_KEYS( K ) = SHO_CINUM THEN LEAVE D10;
                      IF OLD_KEYS( K ) = HIGH(3) THEN DO;
                          OLD_KEYS( K ) = SHO_CINUM;
                          LEAVE D11;
                          END;
                      END D11;
                  READ FILE ( VSAMKEY ) INTO ( NEW_RECORD )
                      KEY ( SHO_CINUM );
                  CALL PROCESS_VSAM_VOLUME( NEW_RECORD,
                      ENTYPE );
                  DC_ANCHOR_RBA = HOLD_RBA;
                  END D10;
              END W;
       /* PUT FILE ( DEBUGPT )
              EDIT ( 'LEAVE PROCESS_VSAM_VOLUME--', ENTYPE,
              '  CURRENT_TYPE--', CURRENT_TYPE ) (SKIP(2),A,A,A,A); */
-PULL_VVOLUME: PROCEDURE ( C_VOLUME )
          REORDER OPTIONS ( REENTRANT ) RECURSIVE;
   DECLARE
     ( C_VOLUME, VSAMPTR4 )
                        POINTER,
     WORK_SPACE         FIXED BINARY (31) INIT (0),
     BIT4               BIT (4) INIT ('0'B),
     HEXCHAR            CHAR (16) INIT ('0123456789ABCDEF'),
     VSAMPTR4A          DEFINED ( VSAMPTR4 ) FIXED BINARY (31)
                        UNALIGNED POSITION (1),
     ( I, J, K )        FIXED BINARY (31) INIT (0);
0         VSAMPTR4 = C_VOLUME;
       /* PUT FILE ( DEBUGPT ) EDIT ( 'PULL_V_VOLUME' ) (SKIP(2),A);
          PUT FILE ( DEBUGPT ) DATA ( DATASPACE_GC6 ) SKIP; */
          DO I = 1 TO DSP_NODSPEXT;
              K = DSP_SPEXTST( I );
              WORK_SPACE = K / TRK_CYL;
              J = K - ( WORK_SPACE * TRK_CYL );
           /* PUT FILE ( DEBUGPT ) DATA ( K, WORK_SPACE, J ) SKIP; */
              SUBSTR( DC_CCHHCCHH, 1, 32 ) =
                  SUBSTR( WORK_SPACE, 16, 16 ) ×× SUBSTR( J, 16, 16 );
              K = DSP_SPEXTST( I ) + DSP_SPEXTNT( I ) - 1;
              WORK_SPACE = K / TRK_CYL;
              J = K - ( WORK_SPACE * TRK_CYL );
           /* PUT FILE ( DEBUGPT )
                  DATA ( K, WORK_SPACE, J, TRK_CYL ) SKIP; */
              SUBSTR( DC_CCHHCCHH, 33, 32 ) =
                  SUBSTR( WORK_SPACE, 16, 16 ) ×× SUBSTR( J, 16, 16 );
              DC_NTRACKS = DSP_SPEXTNT( I );
              DO K = 1 TO 6;
                  BIT4 = SUBSTR( DC_ANCHOR_RBA, 1 + ( K - 1 ) * 4, 4 );
                  J = BIT4;
                  SUBSTR( DC_CLUSTER, K + 30, 1 ) =
                      SUBSTR( HEXCHAR, J + 1, 1 );
                  END; /* I CHANGED TO K IN THIS LOOP TO FIX ERROR */
           /* PUT FILE ( DEBUGPT )
                  DATA ( DETAIL_CLUSTER ) SKIP; */
              WRITE FILE ( DETLIN ) FROM ( DETAIL_CLUSTER );
              END;
-  DECLARE 1 DATASPACE_GC6 BASED ( VSAMPTR4 ),
      2  DSP_NO_VLF          BIT (8),    /* NUMBER OF VAR-LEN FLDS */
      2  DSP_OFFSET          BIT (8),    /* OFFSET TO VAR_LEN FLDS */
      2  DSP_DSCBTS          BIT (64),   /* FORMAT-1 DSCB TIME STAMP */
      2  DSP_DSCBPTR         BIT (40),   /* CCHHR OF THE FORMAT-1 DSCB*/
      2  DSP_SPHDFLG         BIT (8),    /* DATA SPACE FLAGS */
      2  DSP_NODSPEXT        BIT (8),    /* NUMBER OF DS EXTENTS */
      2  DSP_DSPSOPTS        BIT (8),    /* SPACE OPTIONS FOR DS */
      2  DSP_DSPSSQ          BIT (24),   /* SECONDARY SPACE ALLOC */
      2  DSP_SPEXTENT(16),               /* EXTENT DESCRIPTORS */
         3  DSP_SPEXTST      BIT (16),   /* EXTENT STARTING TRACK */
         3  DSP_SPEXTNT      BIT (16);   /* TRACKS IN THE EXTENT */
0         END PULL_VVOLUME;
-  DECLARE 1 CAT_TYPE_V BASED ( VSAMPTR ),
      2  ZZA                 BIT (352),
      2  ENTYPE              CHAR (1),   /* RECORD TYPE */
      2  ZZB                 BIT (24),
      2  VLEN_FIX_FLDS       BIT (8),    /* LENGTH OF FIX LEN FIELDS */
      2  VENTNAME            CHAR (44),  /* VOLUME SERIAL NUMBER */
      2  VVOLSTMP            BIT (64),   /* VOLUME TIME STAMP */
      2  VVOLDVCHR,                      /* DEVICE CHARACTERISTICS */
          3  VDEVT           BIT (32),   /* DEVICE TYPE */
          3  VMAX_BLOCK      BIT (32),   /* MAXIMUM BLOCK SIZE */
          3  VCYL_VOL        BIT (16),   /* CYLINDERS/VOLUME */
          3  VTRK_CYL        BIT (16),   /* TRACKS/CYLINDER */
          3  VBYTES_TRK      BIT (16),   /* BYTES/TRACK */
          3  VGAP_BYTES      BIT (8),    /* BYTES REQUIRED FOR GAPS */
          3  VGAPL_BYTES     BIT (8),    /* BYTES FOR GAPS FOR LAST */
          3  VNKEY_BYTES     BIT (8),    /* BYTES SUB FOR NOT KEYED */
          3  VOLDFLAGS       BIT (8),    /* FLAGS */
          3  VTOLERANCE      BIT (16);   /* TOLERANCE FACTOR */
-  DECLARE SREC_SUBSCRIPT    FIXED BINARY (31) INIT (100);
 /* INIT VALUE MUST BE EQUAL TO NUMBER OF SUBSCRIPTS FOR SREC BELOW */
   DECLARE 1 SET_OF_FIELDS BASED ( VSAMPTR1 ),
      2  SHOREXT,
          3  SHO_CINUM       CHAR (3),   /* CINO OF EXTENSION RECORD */
          3  SHO_GROUP_CD    BIT (8),    /* GROUP CODE NUMBER */
          3  SHO_SEQ_NO      BIT (8),    /* SET NO OF SOF POINTED TO */
      2  SNO_SOF             BIT (8),    /* NUMBER OF SOF POINTERS */
      2  SREC(100),          /* POINTERS TO SOF IN THE RECORD */
          3  SREC_CINUM      BIT (24),   /* CINUM OF EXTENSION REC &
                                            DSPL OF SOF FROM BEGIN */
          3  SREC_GROUP_CD   BIT (8),    /* GROUP CODE NUMBER */
          3  ZZA             BIT (16);
-  DECLARE 1 CAT_TYPE_W BASED ( VSAMPTR ),
      2  ZZA                 BIT (384),
      2  WLEN_FIX_FLDS       BIT (8);    /* LENGTH OF FIX LEN FIELDS */
-         END PROCESS_VSAM_VOLUME;
1END_VSAM: CLOSE FILE ( VSAMCAT ), FILE ( VSAMKEY ),
              FILE ( DETLIN ) ENVIRONMENT ( REREAD ),
              FILE ( VOLMIN ) ENVIRONMENT ( REREAD );
          FREE DATA_EXTENTS, OLD_KEYS;
0OLD_KEYS_SMALL: PROCEDURE REORDER;
              PUT EDIT ( 'PROCESS_VSAM_CLUSTER--THE SIZE OF "OLD_',
                  'KEYS" IS NOT LARGE ENOUGH, EXPAND IT AND RERUN ',
                  'THE JOB.') ( SKIP(5), A, A, A );
              PUT DATA ( OLD_KEYS_SIZE ) SKIP;
              RETURN_CODE = 88;
              GO TO END_VSAM2;
              END OLD_KEYS_SMALL;
          IF RETURN_CODE ^= 0 THEN GO TO END_VSAM2;
          CALL PLISRTA (
              ' SORT FIELDS=(1,10,CH,A,15,4,CH,A) ',
              ' RECORD TYPE=F,LENGTH=(109) ',
              129000, RETURN_CODE, 'DETL' );
          IF RETURN_CODE ^= 0 THEN GO TO END_VSAM2;
          CALL PLISRTA (
              ' SORT FIELDS=(1,6,CH,A) ',
              ' RECORD TYPE=F,LENGTH=(75) ',
              129000, RETURN_CODE, 'VOLM' );
          IF RETURN_CODE ^= 0 THEN GO TO END_VSAM2;
-  DECLARE 1 DISK_CHARACTERISTICS( DISK_CHARACTERISTICS_SIZE )
                        CONTROLLED,
      2  DEVT           CHAR (6),
      2  UCBTYP         BIT (8),
      2  TRACKCYL       FIXED DECIMAL (5),
      2  CYLDEVICE      FIXED DECIMAL (7),
      2  BYTESTRACK     FIXED DECIMAL (10),
      2  VERIFIED       BIT (1) INIT ('1'B),
0  1 PDISK_CHARCTR UNALIGNED,
      2  PDEVIC         CHAR (6),
      2  ZZA            CHAR (1),
      2  PUNITTYPE      CHAR (8),
      2  ZZB            CHAR (1),
      2  PTRK_CYL       CHAR (7),
      2  ZZC            CHAR (1),
      2  PCYL_DEV       CHAR (7),
      2  ZZD            CHAR (1),
      2  PBYTES_TRACK   CHAR (11),
      2  ZZE            CHAR (37),
0  DISK_CHARACTERISTICS_SIZE FIXED BINARY (31) INIT(0);
-         OPEN FILE ( DISKTBL );
          ON ENDFILE ( DISKTBL ) GO TO END_DISKTBL1;
          DO I = 1 BY 1;
              READ FILE ( DISKTBL ) INTO ( PDISK_CHARCTR );
              IF SUBSTR( PDEVIC, 1, 1 ) ^= '*' THEN
                  DISK_CHARACTERISTICS_SIZE =
                      DISK_CHARACTERISTICS_SIZE + 1;
              END;
 END_DISKTBL1: CLOSE FILE ( DISKTBL ) ENVIRONMENT ( REREAD );
          ALLOCATE DISK_CHARACTERISTICS;
          ON CONVERSION ONCHAR = '0';
          OPEN FILE ( DISKTBL );
          ON ENDFILE ( DISKTBL ) GO TO END_DISKTBL2;
          READ FILE ( DISKTBL ) INTO ( PDISK_CHARCTR );
          IF PDEVIC ^= '*DEVIC' THEN DO;
              PUT DATA ( PDISK_CHARCTR, DISK_CHARACTERISTICS )
                  SKIP(3);
              RETURN_CODE = 88;
              GO TO END_VSAM2;
              END;
          DO I = 1 TO DISK_CHARACTERISTICS_SIZE;
              READ FILE ( DISKTBL ) INTO ( PDISK_CHARCTR );
              DEVT( I ) = PDEVIC;
              UCBTYP( I ) = BIT( PUNITTYPE, 8 );
              TRACKCYL( I ) = PTRK_CYL;
              CYLDEVICE( I ) = PCYL_DEV;
              BYTESTRACK( I ) = PBYTES_TRACK;
              VERIFIED( I ) = '1'B;
              END;
 END_DISKTBL2: CLOSE FILE ( DISKTBL );
1  DECLARE
      ERROR_LINE        CHAR (133) INIT (
       '0======> ERROR IN CATALOG, SKIPPING TO NEXT VOLUME <======' ),
      LINE_CNT          FIXED DECIMAL (3) INIT (0),
      DTL_HD3           CHAR (133) INIT (' '),
      C_VOLUME          CHAR (6) INIT (' '),
      H_DATASET         CHAR (44) INIT (' '),
      H_CCHHCCHH        BIT (64) INIT ('0'B),
      ( FCCB, FHHB, LCCB, LHHB )
                        BIT (16) INIT ('0'B),
      ( FCC, FHH, LCC, LHH, FCCH, FHHH, LCCH, LHHH, RTRKS, HTRKS,
      FCC_S, FHH_S, LCC_S, LHH_S, TRACKS_CYL )
                        FIXED BINARY (31) INIT (0),
      PRT_AVAIL         BIT (1) INIT ('0'B),
      DETL_EOF          BIT (1) INIT ('0'B),
      VOLM_EOF          BIT (1) INIT ('0'B);
-  DECLARE 1 VOL_HD1,
      2  VH1_CC         CHAR (1) INIT (' '),
      2  VH1_VOLUME     CHAR (6) INIT (' '),
      2  ZZB            CHAR (26) INIT (' '),
      2  ZZC            CHAR (38) INIT
                        ('VSAM TRACK ALLOCATION MAP FOR VOLUME "'),
      2  VH1_VOLUME1    CHAR (6) INIT (' '),
      2  ZZD            CHAR (25) INIT ('"'),
      2  VH1_DATE       CHAR (10) INIT ('MM/DD/YY'),
      2  VH1_TIME       CHAR (5) INIT ('HH:MM'),
      2  ZZE            CHAR (10) INIT ('     PAGE '),
      2  VH1_PAGE       PIC 'ZZ,ZZ9' INIT (0);
-  DECLARE 1 VOL_HD2,
      2  ZZA            CHAR (27) INIT ('0DEVICE DESCRIPTION:  TYPE='),
      2  VH2_TYPE       CHAR (6) INIT (' '),
      2  ZZB            CHAR (22) INIT ('     DISK PACK NOCYLS='),
      2  VH2_NOCYLS     PIC 'ZZZZ9' INIT (0),
      2  ZZC            CHAR (14) INIT ('     TRKS/CYL='),
      2  VH2_TRKCYL     PIC 'ZZZ9' INIT (0),
      2  ZZD            CHAR (13) INIT ('     TRKSIZE='),
      2  VH2_TRKSIZE    PIC 'ZZZ,ZZ9' INIT (0),
      2  ZZE            CHAR (20) INIT ('     MAX BLOCK SIZE='),
      2  VH2_MAXBLOCK   PIC 'ZZZ,ZZZ,ZZZ,ZZ9';
-  DECLARE 1 DTL_HD1,
      2  ZZA            CHAR (27) INIT ('-'),
      2  ZZB            CHAR (23) INIT ('CLUSTER NAME'),
      2  ZZC            CHAR (28) INIT ('FIRST TRK   LAST TRK'),
      2  ZZD            CHAR (15) INIT ('#TRKS'),
      2  ZZG            CHAR (40) INIT ('DSNAME, DATA SPACE, OR USAGE');
-  DECLARE 1 DTL_HD2,
      2  ZZA            CHAR (27) INIT ('+'),
      2  ZZB            CHAR (23) INIT ('_______ ____'),
      2  ZZC            CHAR (28) INIT ('_____ ___   ____ ___'),
      2  ZZD            CHAR (15) INIT ('_____'),
      2  ZZG            CHAR (40) INIT ('______  ____ _____  __ _____');
-  DECLARE 1 DTL_LINE,
      2  ZZA            CHAR (2) INIT (' '),
      2  DT4_CLUSTER    CHAR (44) INIT (' '),
      2  ZZB            CHAR (4) INIT (' '),
      2  DT4_FCC        CHAR (4) INIT (' '),
      2  ZZC            CHAR (1) INIT ('.'),
      2  DT4_FHH        CHAR (4) INIT (' '),
      2  ZZD            CHAR (2) INIT (' '),
      2  DT4_LCC        CHAR (4) INIT (' '),
      2  ZZE            CHAR (1) INIT ('.'),
      2  DT4_LHH        CHAR (4) INIT (' '),
      2  ZZF            CHAR (4) INIT (' '),
      2  DT4_NTRACKS    PIC '--------9' INIT (0),
      2  ZZG            CHAR (4) INIT (' '),
      2  DT4_DATASET    CHAR (46) INIT (' ');
-         FCCH, FHHH, LCCH, LHHH, RTRKS = 0;
          OPEN FILE ( DETLOUT ), FILE ( VOLMOUT ), FILE ( PRTFILE );
          ON ENDFILE ( DETLOUT ) DETL_EOF = '1'B;
          ON ENDFILE ( VOLMOUT ) VOLM_EOF = '1'B;
          READ FILE ( VOLMOUT ) INTO ( DETAIL_VOLUME );
          READ FILE ( DETLOUT ) INTO ( DETAIL_CLUSTER );
          DO UNTIL ( DETL_EOF & VOLM_EOF );
              C_VOLUME = SUBSTR( DV_ENTNAME, 1, 6 );
              DO WHILE ( C_VOLUME > DC_VOLSER ) UNTIL ( DETL_EOF );
                  READ FILE ( DETLOUT ) INTO ( DETAIL_CLUSTER );
                  END;
              VH1_VOLUME, VH1_VOLUME1 = C_VOLUME;
              VH1_PAGE = 1;
              WRITE FILE ( PRTFILE ) FROM ( VOL_HD1 );
              VH1_CC = '1';
              VH2_NOCYLS = VCYL_VOL;
              VH2_TRKCYL = VTRK_CYL;
              RTRKS = 0;
              VH2_TRKSIZE = VBYTES_TRK;
              VH2_MAXBLOCK = VMAX_BLOCK;
              DO I = 1 TO DISK_CHARACTERISTICS_SIZE
                  UNTIL ( UCBTYP( I ) = SUBSTR( VDEVT, 25, 8 ) );
                  END;
              IF I > DISK_CHARACTERISTICS_SIZE THEN DO;
                  PUT EDIT ( 'NO DEVICE TYPE RECORD IN THE "DISKTBL" ',
                      'TABLE FOR THE DEVICE--', C_VOLUME )
                      ( SKIP(4), A, A, A );
                  PUT DATA(DETAIL_VOLUME,DISK_CHARACTERISTICS) SKIP(8);
                  RETURN_CODE = 88;
                  GO TO END_VSAM2;
                  END;
              VH2_TYPE = DEVT( I );
              IF ( TRACKCYL( I ) ^= VTRK_CYL × CYLDEVICE( I ) ^=
                  VCYL_VOL × BYTESTRACK( I ) ^= VMAX_BLOCK )
                  & VERIFIED( I ) THEN DO;
                  PUT EDIT ( 'VALUES IN "DISKTBL" TABLE FOR TRK/CYL, ',
                      'BYTES/TRK, OR CYL/DEV IS INCORRECT.' )
                      ( SKIP(4), A, A );
                  PUT DATA(DETAIL_VOLUME,DISK_CHARACTERISTICS) SKIP(2);
               /* RETURN_CODE = 99;
                  GO TO END_VSAM2; */
                  END;
              VERIFIED( I ) = '0'B;
              WRITE FILE ( PRTFILE ) FROM ( VOL_HD2 );
              WRITE FILE ( PRTFILE ) FROM ( DTL_HD1 );
              WRITE FILE ( PRTFILE ) FROM ( DTL_HD2 );
              WRITE FILE ( PRTFILE ) FROM ( DTL_HD3 );
              LINE_CNT = 7;
              H_DATASET = ' ';
              H_CCHHCCHH = '0'B;
         D24: DO WHILE ( DC_VOLSER = C_VOLUME ) UNTIL ( DETL_EOF );
               /* PUT DATA ( DETAIL_CLUSTER ) SKIP(2); */
                  FCCB = SUBSTR( DC_CCHHCCHH, 1, 16);
                  FHHB = SUBSTR( DC_CCHHCCHH, 17, 16);
                  LCCB = SUBSTR( DC_CCHHCCHH, 33, 16);
                  LHHB = SUBSTR( DC_CCHHCCHH, 49, 16);
                  FCC = FCCB;
                  FHH = FHHB;
                  LCC = LCCB;
                  LHH = LHHB;
                  IF ( LCC - FCC ) * VTRK_CYL + LHH - FHH + 1
                      ^= DC_NTRACKS THEN DO;
                      PUT EDIT ( 'THE NUMBER OF TRACKS IN THIS ',
                          'EXTENT DOES NOT EQUAL THE CCHH-CCHH.  ',
                          'PROBABLE GARBAGE IN THE CATALOG RECORD.' )
                          ( SKIP(4), A, A, A );
                      PUT DATA ( DETAIL_CLUSTER, DETAIL_VOLUME,
                          FCC, FHH, LCC, LHH ) SKIP;
                      WRITE FILE ( PRTFILE ) FROM ( ERROR_LINE );
                      RETURN_CODE = 106;
                      LEAVE D24;
                      END;
                  IF LINE_CNT > 59 THEN CALL PRINT_HEADER;
                  IF SUBSTR( DC_CLUSTER, 1, 24 ) =
                      '              DATA SPACE' & RTRKS ^= 0 THEN DO;
                      PRT_AVAIL = '1'B;
                      CALL CONV_HEX( SUBSTR( FCC_S, 16, 16 ),
                          DT4_FCC );
                      CALL CONV_HEX( SUBSTR( FHH_S, 16, 16 ),
                          DT4_FHH );
                      HTRKS = ( LCC_S - FCC_S ) * TRACKS_CYL +
                          LHH_S - FHH_S + 1;
                      CALL CONV_HEX( SUBSTR( LCC_S, 16, 16 ),
                          DT4_LCC );
                      CALL CONV_HEX( SUBSTR( LHH_S, 16, 16 ),
                          DT4_LHH );
                      DT4_CLUSTER = ' ';
                      DT4_NTRACKS = HTRKS;
                      DT4_DATASET = '***** AVAILABLE *****';
                      RTRKS = RTRKS - HTRKS;
                      WRITE FILE ( PRTFILE ) FROM ( DTL_LINE );
                      IF RTRKS < 0 THEN DO;
                          PUT EDIT ( 'DATASET(S) LARGER THAN ASSOCIATE',
                              'D DATA SPACE, OBVIOUS PROBLEM SOMEWHERE')
                              ( SKIP(4), A, A);
                          PUT DATA ( DETAIL_VOLUME, DETAIL_CLUSTER,
                              HTRKS, RTRKS ) SKIP;
                          WRITE FILE ( PRTFILE ) FROM ( ERROR_LINE );
                          RETURN_CODE = 108;
                          LEAVE D24;
                          END;
                      LINE_CNT = LINE_CNT + 1;
                      PRT_AVAIL = '0'B;
                      END;
                  IF RTRKS ^= 0 THEN D10: DO;
                      IF FCC_S = FCC & FHH_S = FHH THEN LEAVE;
                      PRT_AVAIL = '0'B;
                      IF FCC_S = FCC & FHH_S ^= FHH THEN DO;
                          PRT_AVAIL = '1'B;
                          CALL CONV_HEX( FCCB, DT4_FCC );
                          CALL CONV_HEX( SUBSTR( FHH_S, 16, 16 ),
                              DT4_FHH );
                          END;
                      IF FCC_S ^= FCC THEN DO;
                          PRT_AVAIL = '1'B;
                          CALL CONV_HEX( SUBSTR( FCC_S, 16, 16 ),
                              DT4_FCC );
                          CALL CONV_HEX( SUBSTR( FHH_S, 16, 16 ),
                              DT4_FHH );
                          END;
                      IF LCC > LCC_S × ( LCC = LCC_S & LHH > LHH_S )
                          THEN DO;
                          PUT EDIT ( 'DATASET LARGER THAN ASSOCIATED ',
                              'DATA SPACE, OBVIOUS PROBLEM SOMEWHERE.' )
                              ( SKIP(4), A, A );
                          PUT DATA ( DETAIL_VOLUME, DETAIL_CLUSTER, LCC,
                              LHH, LCC_S, LHH_S, FCC_S, FHH_S ) SKIP;
                          RETURN_CODE = 104;
                          GO TO END_VSAM2;
                          END;
                      IF PRT_AVAIL THEN DO;
                          LCCH = FCC;
                          LHHH = FHH;
                          LHHH = LHHH - 1;
                          IF LHHH < 0 THEN DO;
                              LCCH = LCCH - 1;
                              LHHH = TRACKS_CYL - 1;
                              END;
                          HTRKS = ( LCCH - FCC_S ) * TRACKS_CYL +
                              LHHH - FHH_S + 1;
                          CALL CONV_HEX( SUBSTR( LCCH, 16, 16 ),
                              DT4_LCC );
                          CALL CONV_HEX( SUBSTR( LHHH, 16, 16 ),
                              DT4_LHH );
                          DT4_CLUSTER = ' ';
                          DT4_NTRACKS = HTRKS;
                          DT4_DATASET = '***** AVAILABLE *****';
                          RTRKS = RTRKS - HTRKS;
                          WRITE FILE ( PRTFILE ) FROM ( DTL_LINE );
                          IF RTRKS < 0 THEN DO;
                              PUT EDIT ( 'DATASET(S) LARGER THAN ',
                                  'ASSOCIATED DATA SPACE, OBVIOUS ',
                                  'PROBLEM SOMEWHERE' ) ( SKIP(4), A,A);
                              PUT DATA ( DETAIL_VOLUME, DETAIL_CLUSTER,
                                  HTRKS, RTRKS ) SKIP;
                              WRITE FILE ( PRTFILE ) FROM ( ERROR_LINE);
                              RETURN_CODE = 112;
                              LEAVE D24;
                              END;
                          LINE_CNT = LINE_CNT + 1;
                          PRT_AVAIL = '0'B;
                          END;
                      END D10;
                  IF SUBSTR( DC_CLUSTER, 1, 24 ) =
                      '              DATA SPACE' THEN DO;
                      FCC_S = FCC;
                      FHH_S = FHH;
                      LCC_S = LCC;
                      LHH_S = LHH;
                      TRACKS_CYL = VTRK_CYL;
                      RTRKS = DC_NTRACKS;
                      END;
                     ELSE DO;
                      RTRKS = RTRKS - DC_NTRACKS;
                      IF RTRKS < 0 THEN DO;
                          PUT EDIT ( 'DATASET(S) LARGER THAN ASSOCIATE',
                              'D DATA SPACE, OBVIOUS PROBLEM SOMEWHERE')
                              ( SKIP(4), A, A);
                          PUT DATA ( DETAIL_VOLUME, DETAIL_CLUSTER,
                              RTRKS ) SKIP;
                          WRITE FILE ( PRTFILE ) FROM ( ERROR_LINE );
                          RETURN_CODE = 116;
                          LEAVE D24;
                          END;
                      FCC_S = LCC;
                      FHH_S = LHH + 1;
                      IF FHH_S >= TRACKS_CYL THEN DO;
                          FCC_S = FCC_S + 1;
                          FHH_S = FHH_S - TRACKS_CYL;
                          END;
                      END;
                  IF LINE_CNT > 59 THEN CALL PRINT_HEADER;
                  DT4_CLUSTER = DC_CLUSTER;
                  DT4_NTRACKS = DC_NTRACKS;
                  DT4_DATASET = DC_DATASET;
                  CALL CONV_HEX( FCCB, DT4_FCC );
                  CALL CONV_HEX( FHHB, DT4_FHH );
                  CALL CONV_HEX( LCCB, DT4_LCC );
                  CALL CONV_HEX( LHHB, DT4_LHH );
                  WRITE FILE ( PRTFILE ) FROM ( DTL_LINE );
                  LINE_CNT = LINE_CNT + 1;
                  READ FILE ( DETLOUT ) INTO ( DETAIL_CLUSTER );
                  END D24;
              READ FILE ( VOLMOUT ) INTO ( DETAIL_VOLUME );
              END;
-CONV_HEX: PROCEDURE ( BIT16, CHAR4 ) REORDER;
0         DECLARE
             BIT16      BIT (16),
             CHAR4      CHAR (4),
             BIT4       BIT (4) INIT ('0'B),
             ( I, J )   FIXED BINARY (15) INIT (0),
             HEXCHAR    CHAR (16) INIT ('0123456789ABCDEF');
0         DO I = 1 TO 4;
              BIT4 = SUBSTR( BIT16, 1 + ( I - 1 ) * 4, 4 );
              J = BIT4;
              SUBSTR( CHAR4, I, 1 ) = SUBSTR( HEXCHAR, J + 1, 1 );
              END;
          END CONV_HEX;
-PRINT_HEADER: PROCEDURE REORDER;
          VH1_PAGE = VH1_PAGE + 1;
          WRITE FILE ( PRTFILE ) FROM ( VOL_HD1 );
          WRITE FILE ( PRTFILE ) FROM ( DTL_HD1 );
          WRITE FILE ( PRTFILE ) FROM ( DTL_HD2 );
          WRITE FILE ( PRTFILE ) FROM ( DTL_HD3 );
          LINE_CNT = 5;
          END PRINT_HEADER;
-END_VSAM2: IF RETURN_CODE ^= 0 THEN CALL PLIRETC(RETURN_CODE);
               ELSE CALL PLIRETC(0);
 END_VSAM3: END O9291B15;
