./ ADD NAME=CUT      0101-90122-90123-1236-00409-00409-00000-$A1238
/*********************************REXX**********************************
*                                                                      *
* CUT is a REXX ISPF edit macro to copy or move lines from the current *
* edit session and place them in a shared ISPF table. The PASTE macro  *
* will copy or move the data into another edit session.  See the       *
* tutorial starting with panel #CUT for further information.           *
*                                                                      *
* CUT <REPLACE > <TABLE table> <NX> <col-1 col-2> <COPY> <range>       *
*     <EXTEND  >               <X >               <MOVE>               *
*     <SHOW    >                                                       *
*     <DELETE  >                                                       *
*     <PROMPT  >                                                       *
*     <PROFILE >                                                       *
*     <HELP × ?>                                                       *
*                                                                      *
*                                                                      *
* Douglas H. Adams                                                     *
* Mail Code 110-SH28                                                   *
* Rockwell International Corporation                                   *
* 2201 Seal Beach Boulevard                                            *
* P.O. Box 2515                                                        *
* Seal Beach, California 90740-1515                                    *
*                                                                      *
* (213) 797-2618                                                       *
*                                                                      *
***********************************************************************/

Signal on novalue
If address() ^== "TSO" Then do
   Say "CUT must be executed under TSO"
   Exit 12
   End
If sysvar("SYSISPF") ^== "ACTIVE" Then do
   Say "CUT must be executed under ISPF"
   Exit 12
   End
Zerralrm = "NO"
Zerrhm = "#CUT"
Address ISREDIT "MACRO (PARM) NOPROCESS"
If rc ^= 0 Then call error_msg "CUT is an edit macro",,
                             "CUT must be invoked under the ISPF editor"
Address ISREDIT "SCAN OFF"

/***********************************************************************
* Create or obtain cut/paste profile parameter values                  *
***********************************************************************/
Address ISPEXEC "TBSTATS CUTPROF STATUS2(STATUS2) LIBRARY(ISPPROF)"
Select
   When status2 = 1 Then do /* table is not open */
      Address ISPEXEC "TBSTATS CUTPROF STATUS1(STATUS1)",
                      "LIBRARY(ISPPROF)"
      If status1 = 2 Then do /* table does not exist */
         Address ISPEXEC "TBCREATE CUTPROF WRITE SHARE LIBRARY(ISPPROF)"
         Table = "CUTPASTE"
         Cut = "REPLACE"
         Status = ""
         Lcut = ""
         Rcut = ""
         Cmdcut = "C"
         Tcut = ""
         Bcut = ""
         Paste = "COPY"
         At = ""
         Lpaste = ""
         Rpaste = ""
         Cmdpaste = "A"
         Tpaste = ""
         Bpaste = ""
         Address ISPEXEC "TBADD CUTPROF",
                         "SAVE(TABLE CUT STATUS LCUT RCUT CMDCUT",
                              "TCUT BCUT PASTE AT LPASTE RPASTE",
                              "CMDPASTE TPASTE BPASTE)"
         Address ISPEXEC "TBSAVE CUTPROF LIBRARY(ISPPROF)"
         End
      Else do /* table exists */
         Address ISPEXEC "TBOPEN CUTPROF WRITE SHARE LIBRARY(ISPPROF)"
         Address ISPEXEC "TBTOP CUTPROF"
         Address ISPEXEC "TBSKIP CUTPROF"
         End
      End
   When status2 = 5 Then do /* table is open as share write */
      Address ISPEXEC "TBTOP CUTPROF"
      Address ISPEXEC "TBSKIP CUTPROF"
      End
   Otherwise
      Call error_msg "CUTPROF invalid status",,
                     "Table CUTPROF is open as other than SHARE WRITE"
   End

/***********************************************************************
* Parse parameters specified on edit macro call                        *
***********************************************************************/
Default_table = table
Table_expected = 0
Nlabel = 0
Ncolumn = 0
Parm = translate(parm," ",",")
Parse upper var parm value parm
Do while value ^== ""
   Select
      When table_expected             Then do
                                         Table = value
                                         Table_expected = 0
                                         End
      When abbrev("REPLACE",value,1)  Then cut = "REPLACE"
      When abbrev("EXTEND",value,1)   Then cut = "EXTEND"
      When abbrev("SHOW",value,1)     Then cut = "SHOW"
      When abbrev("DELETE",value,1)   Then cut = "DELETE"
      When abbrev("PROMPT",value,4)   Then cut = "PROMPT"
      When abbrev("PROFILE",value,4)  Then cut = "PROFILE"
      When abbrev("HELP",value,1)     Then cut = "HELP"
      When value == "?"               Then cut = "HELP"
      When abbrev("TABLE",value,1)    Then table_expected = 1
      When value == "X"               Then status = "X"
      When abbrev("NX",value,1)       Then status = "NX"
      When datatype(value,"number") &,
           ncolumn < 2                Then do
                                         Ncolumn = ncolumn+1
                                         If ncolumn = 1
                                         Then lcut = value
                                         Else rcut = value
                                         End
      When abbrev("COPY",value,1)     Then cmdcut = "C"
      When abbrev("MOVE",value,1)     Then cmdcut = "M"
      When substr(value,1,1) == "." &,
           nlabel < 2                 Then do
                                         Nlabel = nlabel+1
                                         If nlabel = 1
                                         Then tcut = value
                                         Else bcut = value
                                         End
      Otherwise
         Call error_msg value "is invalid",,
                    "Press your HELP key for a list of valid parameters"
      End
   Parse upper var parm value parm
   End

Select

/***********************************************************************
* Process option "HELP"                                                *
***********************************************************************/
   When cut == "HELP" Then do
      Address ISPEXEC "CONTROL DISPLAY SAVE"
      Address ISPEXEC "SELECT PGM(ISPTUTOR) PARM(#CUT)"
      Address ISPEXEC "CONTROL DISPLAY RESTORE"
      Exit 1
      End

/***********************************************************************
* Process option "PROFILE"                                             *
***********************************************************************/
   When cut == "PROFILE" Then do
      Address ISPEXEC "TBGET CUTPROF"
      Address ISPEXEC "DISPLAY PANEL(CUTPROF)"
      If rc = 0 Then do
         Address ISPEXEC "TBSTATS" table "STATUS1(STATUS1)"
         If status1 = 1
         Then call error_msg table "unavailable",,
                               "Table" table "exists in a table library"
         Address ISPEXEC "TBPUT CUTPROF",
                         "SAVE(TABLE CUT STATUS LCUT RCUT CMDCUT",
                              "TCUT BCUT PASTE AT LPASTE RPASTE",
                              "CMDPASTE TPASTE BPASTE)"
         Address ISPEXEC "TBSAVE CUTPROF LIBRARY(ISPPROF)"
         End
      Exit 1
      End

/***********************************************************************
* Process option "PROMPT"                                              *
***********************************************************************/
   When cut == "PROMPT" Then do
      Address ISPEXEC "TBGET CUTPROF"
      Address ISPEXEC "DISPLAY PANEL(CUTPRMPT)"
      If rc ^= 0 Then exit 1
      End

   Otherwise nop
   End

/***********************************************************************
* Validate and create or open cut/paste table if necessary             *
***********************************************************************/
If table_expected Then call error_msg "Table name missing",,
                        "TABLE keyword must be followed by a table name"
If ^ datatype(substr(table,1,1),"uppercase") ×,
   ^ datatype(table,"alphanumeric")
Then call error_msg "Table" table "invalid",,
                 "Name must be alphanumeric, first character alphabetic"
Address ISPEXEC "TBSTATS" table "STATUS2(STATUS2)"
Select
   When status2 = 1 Then do /* table is not open */
      If table ^== default_table Then do
         Address ISPEXEC "TBSTATS" table "STATUS1(STATUS1)"
         If status1 = 1 Then call error_msg table "unavailable",,
                               "Table" table "exists in a table library"
         End
      Address ISPEXEC "TBCREATE" table "NOWRITE SHARE NAMES(CUTDATA)"
      If rc ^= 0 Then do
         Address ISPEXEC "TBOPEN" table "NOWRITE SHARE"
         If rc ^= 0 Then call error_msg "Open failed",,
                                 "Table" table "cannot be opened, rc" rc
         End
      End
   When status2 = 4 Then nop /* table is open as share nowrite */
   Otherwise
      Call error_msg table "Invalid status",,
                     "Table" table "is open as other than SHARE NOWRITE"
   End
Address ISPEXEC "TBQUERY" table "NAMES(NAMES) KEYNUM(KEYNUM)"
If names ^== "(CUTDATA)" × keynum ^= 0 Then do
   Address ISPEXEC "TBEND" table
   Call error_msg table "unavailable",,
                  "Table" table "was not created by the CUT macro"
   End

/***********************************************************************
* Process option "SHOW"                                                *
***********************************************************************/
If cut == "SHOW" Then do
   Address ISREDIT "PROCESS DEST"
   Select
      When rc = 0
         Then address ISREDIT "(LINENUM) = LINENUM .ZDEST"
      When rc = 8
         Then do
         Address ISREDIT "(LINENUM,COLNUM) = CURSOR"
         If linenum = 1 & colnum = 0
         Then linenum = 0
         End
      Otherwise
         Call error_msg "Invalid line command",,
                        "Valid commands with SHOW are A or B"
      End
   Dataset = ""
   Address ISPEXEC "TBBOTTOM" table
   Do rows = 0 by 1 while rc = 0
      Address ISREDIT "LINE_AFTER" linenum "= NOTELINE (CUTDATA)"
      If dataset ^== "" Then do
         Msg = dataset"("member")   BOUNDS" lcut rcut
         Address ISREDIT "LINE_AFTER" linenum "= MSGLINE (MSG)"
         Dataset = ""
         End
      Address ISPEXEC "TBSKIP" table "NUMBER(-1)"
      End
   Zerrsm = rows "lines displayed"
   Zerrlm = "from table" table
   Address ISPEXEC "SETMSG MSG(ISRZ002)"
   Exit 1
   End

/***********************************************************************
* Process option "DELETE"                                              *
***********************************************************************/
If cut == "DELETE" Then do
   Address ISPEXEC "TBBOTTOM" table
   Do until rc ^= 0
      Address ISPEXEC "TBDELETE" table
      End
   Address ISPEXEC "TBEND" table
   Zerrsm = "All data deleted"
   Zerrlm = "All data deleted from table" table
   Address ISPEXEC "SETMSG MSG(ISRZ002)"
   Exit 1
   End

/***********************************************************************
* Process bounds (left and right columns)                              *
***********************************************************************/
Address ISREDIT "(WIDTH) = DATA_WIDTH"
Width = format(width)
Select
   When ncolumn = 0 & lcut == ""
      Then address ISREDIT "(LCUT RCUT) = BOUNDS"
   When ncolumn = 1 Then call error_msg "column number missing",,
                     "one column number was specified--two are required"
   Otherwise nop
   End
Left = min(lcut,rcut)
Right = min(max(lcut,rcut),width)
Lcut = left
Rcut = right
If left > width Then call error_msg "Column" left "invalid",,
                              "Left column" left "is greater than" width
Length = right-left+1

/***********************************************************************
* Process range (top and bottom lines)                                 *
***********************************************************************/
Address ISREDIT "(LEVEL) = MACRO_LEVEL"
If level = 1 Then do
   Address ISREDIT "PROCESS RANGE C M"
   Rc_process = rc
   Zfrange = ".ZFRANGE"
   Zlrange = ".ZLRANGE"
   End
Else do
   rc_process = 4
   Zfrange = ".ZFIRST"
   Zlrange = ".ZLAST"
   End
Select
   When nlabel = 0 & rc_process = 0 Then do
      Address ISREDIT "(CMDCUT) = RANGE_CMD"
      Address ISREDIT "(TOP) = LINENUM" zfrange
      Address ISREDIT "(BOTTOM) = LINENUM" zlrange
      End
   When nlabel = 1 & rc_process ^= 0 Then do
      Address ISREDIT "(TOP) = LINENUM" tcut
      If rc ^= 0 Then call error_msg tcut "invalid",,
                                     tcut "invalid or not found"
      Bottom = top
      End
   When nlabel = 2 & rc_process ^= 0 Then do
      Address ISREDIT "(LINE1) = LINENUM" tcut
      If rc ^= 0 Then call error_msg tcut "invalid",,
                                     tcut "invalid or not found"
      Address ISREDIT "(LINE2) = LINENUM" bcut
      If rc ^= 0 Then call error_msg bcut "invalid",,
                                     bcut "invalid or not found"
      Top = min(line1,line2)
      Bottom = max(line1,line2)
      End
   When nlabel = 0 & rc_process ^= 0
      Then call error_msg "Range not specified",,
                          "Specify range or copy/move line command(s):",
                          "C, CC, Cn, M, MM, or Mn"
   When nlabel ^= 0 & rc_process = 0
      Then call error_msg "Command conflict",,
                    cmdcut "line command conflicts with label parameter"
   End
Rows = bottom-top+1

Select

/***********************************************************************
* Process option "REPLACE"                                             *
***********************************************************************/
   When cut == "REPLACE" Then do
      Address ISPEXEC "TBBOTTOM" table "NOREAD"
      Do until rc ^= 0
         Address ISPEXEC "TBDELETE" table
         End
      End

/***********************************************************************
* Process option "EXTEND"                                              *
***********************************************************************/
   When cut == "EXTEND" Then Address ISPEXEC "TBBOTTOM" table "NOREAD"

   Otherwise nop
   End

/***********************************************************************
* Process data                                                         *
***********************************************************************/
Lines = 0
Address ISREDIT "(DATASET) = DATASET"
Address ISREDIT "(MEMBER) = MEMBER"
Firstrow = "SAVE(DATASET MEMBER LCUT RCUT) MULT("rows")"

Do line = top to bottom
   If status ^== "" Then do
      Address ISREDIT "(XSTATUS) = XSTATUS" line
      If status ^== xstatus Then iterate
      End
   Address ISREDIT "(CUTDATA) = LINE" line
   If length ^= width Then do
      If cmdcut == "M" Then do
         Editdata = overlay(" ",cutdata,left,length)
         Address ISREDIT "LINE" line "= (EDITDATA)"
         End
      Cutdata = substr(cutdata,left,length)
      End
   Cutdata = strip(cutdata,"Trailing")
   Address ISPEXEC "TBADD" table firstrow
   Lines = lines+1
   Firstrow = ""
   End line

If cmdcut == "M" & length = width
Then address ISREDIT "DELETE" top bottom
Address ISPEXEC "TBTOP" table
If cmdcut == "C" Then Zerrsm = lines "lines copied"
                 Else Zerrsm = lines "lines moved"
Zerrlm = "to table" table
Address ISPEXEC "SETMSG MSG(ISRZ002)"
Exit 1

/***********************************************************************
* Issue error message and exit abnornally                              *
***********************************************************************/
Error_msg: Procedure
Parse arg zerrsm,zerrlm
Zerralrm = "YES"
Zerrhm = "#CUT"
Address ISPEXEC "SETMSG MSG(ISRZ002)"
Exit 12

/***********************************************************************
* Trap uninitialized variables                                         *
***********************************************************************/
Novalue:
   Say "Uninitialized variable in line" sigl":"
   Say sourceline(sigl)
   Trace "?Results"
   Nop
./ ADD NAME=PASTE    0101-90122-90123-1236-00407-00407-00000-$A1238
/*********************************REXX**********************************
*                                                                      *
* PASTE is a REXX ISPF edit macro to copy or move lines from a shared  *
* ISPF table into the current edit session. The table must have        *
* previously been created by the CUT macro.  See the tutorial starting *
* with panel #CUT for further information.    Syntax:                  *
*                                                                      *
* PASTE <COPY  > <TABLE table> <AT at> <col-1 col-2> <AFTER>   <range> *
*       <MOVE  >                                     <BEFORE>          *
*       <HELP|?>                                     <OVERLAY>         *
*       <PROMPT>                                                       *
*                                                                      *
*                                                                      *
* Douglas H. Adams                                                     *
* Mail Code 110-SH28                                                   *
* Rockwell International Corporation                                   *
* 2201 Seal Beach Boulevard                                            *
* P.O. Box 2515                                                        *
* Seal Beach, California 90740-1515                                    *
*                                                                      *
* (213) 797-2618                                                       *
*                                                                      *
***********************************************************************/

Signal on novalue
If address() ^== "TSO" Then do
   Say "CUT must be executed under TSO"
   Exit 12
   End
If sysvar("SYSISPF") ^== "ACTIVE" Then do
   Say "CUT must be executed under ISPF"
   Exit 12
   End
Zerralrm = "NO"
Zerrhm = "#CUT"
Address ISREDIT "MACRO (PARM) NOPROCESS"
If rc ^= 0 Then call error_msg "PASTE is an edit macro",,
                           "PASTE must be invoked under the ISPF editor"
Address ISREDIT "SCAN OFF"

/***********************************************************************
* Obtain cut/paste default parameter values                            *
***********************************************************************/
Address ISPEXEC "TBSTATS CUTPROF STATUS2(STATUS2) LIBRARY(ISPPROF)"
Select
   When status2 = 1 Then do /* table is not open */
      Address ISPEXEC "TBOPEN CUTPROF WRITE SHARE LIBRARY(ISPPROF)"
      If rc ^= 0 Then call error_msg "Profile does not exist",,
                 "CUT/PASTE profile must be created by the CUT macro"
      Address ISPEXEC "TBTOP CUTPROF"
      Address ISPEXEC "TBSKIP CUTPROF"
      End
   When status2 = 5 Then do /* table is open as share write */
      Address ISPEXEC "TBTOP CUTPROF"
      Address ISPEXEC "TBSKIP CUTPROF"
      End
   Otherwise
      Call error_msg "CUTPROF invalid status",,
                     "Table CUTPROF is open as other than SHARE WRITE"
   End

/***********************************************************************
* Parse parameters specified on edit macro call                        *
***********************************************************************/
Table_expected = 0
At_expected = 0
Ncolumn = 0
Nlabel = 0
Parm = translate(parm," ",",")
Parse upper var parm value parm
Do while value ^== ""
   Select
      When table_expected             Then do
                                         Table = value
                                         Table_expected = 0
                                         End
      When at_expected                Then do
                                         At = value
                                         At_expected = 0
                                         End
      When abbrev("COPY",value,1)     Then paste = "COPY"
      When abbrev("MOVE",value,1)     Then paste = "MOVE"
      When abbrev("PROMPT",value,1)   Then paste = "PROMPT"
      When abbrev("HELP",value,1)     Then paste = "HELP"
      When value == "?"               Then paste = "HELP"
      When abbrev("TABLE",value,1)    Then table_expected = 1
      When abbrev("AT",value,2)       Then at_expected = 1
      When datatype(value,"number") &,
           ncolumn < 2                Then do
                                         Ncolumn = ncolumn+1
                                         If ncolumn = 1
                                         Then lpaste = value
                                         Else rpaste = value
                                         End
      When abbrev("AFTER",value,2)    Then cmdpaste = "A"
      When abbrev("BEFORE",value,1)   Then cmdpaste = "B"
      When abbrev("OVERLAY",value,1)  Then cmdpaste = "O"
      When substr(value,1,1) == "." &,
           nlabel < 2                 Then do
                                      Nlabel = nlabel+1
                                      If nlabel = 1
                                      Then tpaste = value
                                      Else bpaste = value
                                      End
      Otherwise
         Call error_msg value "is invalid",,
                    "Press your HELP key for a list of valid parameters"
      End
   Parse upper var parm value parm
   End

Select

/***********************************************************************
* Process option "HELP"                                                *
***********************************************************************/
   When paste == "HELP" Then do
      Address ISPEXEC "CONTROL DISPLAY SAVE"
      Address ISPEXEC "SELECT PGM(ISPTUTOR) PARM(#CUT)"
      Address ISPEXEC "CONTROL DISPLAY RESTORE"
      Exit 1
      End

/***********************************************************************
* Process option "PROMPT"                                              *
***********************************************************************/
   When paste == "PROMPT" Then do
      Address ISPEXEC "TBGET CUTPROF"
      Address ISPEXEC "DISPLAY PANEL(PSTPRMPT)"
      If rc ^= 0 Then exit 1
      End

   Otherwise nop
   End

/***********************************************************************
* Validate and open cut/paste table if necessary                       *
***********************************************************************/
If table_expected Then call error_msg "Table name missing",,
                        "TABLE keyword must be followed by a table name"
Address ISPEXEC "TBSTATS" table "STATUS2(STATUS2)"
Select
   When status2 = 1 Then do /* table is not open */
      Address ISPEXEC "TBOPEN" table "SHARE NOWRITE"
      If rc ^= 0 Then call error_msg table "does not exist",,
                                table "must be created by the CUT macro"
      End
   When status2 = 4 Then nop /* table is open as share nowrite */
   Otherwise
      Call error_msg table "Invalid status",,
                     "Table" table "is open as other than SHARE NOWRITE"
   End
Address ISPEXEC "TBQUERY" table "NAMES(NAMES) ROWNUM(ROWNUM)",
                                "KEYNUM(KEYNUM)"
If names ^= "(CUTDATA)" | keynum ^= 0 Then do
   Address ISPEXEC "TBEND" table
   Call error_msg table "unavailable",,
                  "Table" table "was not created by the CUT macro"
   End
If rownum = 0 Then call error_msg "Table" table "is empty",,
                               "Table" table "does not contain any data"

/***********************************************************************
* Process bounds (left and right columns)                              *
***********************************************************************/
Address ISREDIT "(WIDTH) = DATA_WIDTH"
Width = format(width)
Select
   When ncolumn = 0 & lcut == ""
      Then address ISREDIT "(LPASTE RPASTE) = BOUNDS"
   When ncolumn = 2 Then Call error_msg "column number missing",,
                    "one column number was specified--two are required"
   Otherwise nop
   End
Left = min(lpaste,rpaste)
Right = min(max(lpaste,rpaste),width)
Lpaste = left
Rpaste = right
If left > width Then call error_msg "Column" left "invalid",,
                              "Left column" left "is greater than" width

/***********************************************************************
* Process range (top and bottom lines)                                 *
***********************************************************************/
Address ISREDIT "(ZLAST) = LINENUM .ZLAST"
Address ISREDIT "(LEVEL) = MACRO_LEVEL"
If level = 1 Then do
   Address ISREDIT "PROCESS DEST RANGE O"
   Rc_process = rc
   Zfrange = ".ZFRANGE"
   Zlrange = ".ZLRANGE"
   Zdest = ".ZDEST"
   End
Else do
   rc_process = 12
   Zfrange = ".ZFIRST"
   Zlrange = ".ZLAST"
   Zdest = ".ZLAST"
   End
Select
   When zlast = 0 Then do
      Top = 0
      Cmdpaste = "A"
      End
   When rc_process = 0 Then call error_msg "Line command conflict",,
                               "A or B command conflicts with O command"
   When nlabel = 0 & rc_process = 4 Then do
      Address ISREDIT "(TOP) = LINENUM" zdest
      Cmdpaste = "A"
      End
   When nlabel = 0 & rc_process = 8 Then do
      Address ISREDIT "(CMDPASTE) = RANGE_CMD"
      Address ISREDIT "(TOP) = LINENUM" zfrange
      Address ISREDIT "(BOTTOM) = LINENUM" .zlrange
      Top = format(top)
      Bottom = format(bottom)
      End
   When nlabel = 0 & rc_process = 12 Then do
      Address ISREDIT "(TOP) = LINENUM" zfrange
      Address ISREDIT "(BOTTOM) = LINENUM" zlrange
      Top = format(top)
      Bottom = format(bottom)
      If top ^= bottom Then call error_msg "Missing line commands",,
                                   "Enter line command: A, B or O/OO/On"
      Cmdpaste = "A"
      End
   When nlabel > 0 & rc_process < 12
   Then call error_msg "Command conflict",,
                      "Line command conflicts with line label parameter"
   When nlabel = 1 & cmdpaste == "A" Then do
      Address ISREDIT "(TOP) = LINENUM" tpaste
      If rc ^= 0 Then call error_msg "Invalid label" tpaste,,
                                "Label" tpaste "is invalid or undefined"
      End
   When nlabel = 1 & cmdpaste == "B" Then do
      Address ISREDIT "(TOP) = LINENUM" tpaste
      If rc ^= 0 Then call error_msg "Invalid label" tpaste,,
                                "Label" tpaste "is invalid or undefined"
      Top = top-1
      End
   When nlabel = 1 & cmdpaste == "O" Then do
      Address ISREDIT "(TOP) = LINENUM" tpaste
      If rc ^= 0 Then call error_msg "Invalid label" tpaste,,
                                "Label" tpaste "is invalid or undefined"
      Bottom = top
      End
   When nlabel = 2 & cmdpaste ^== "O"
      Then call error_msg "Too many labels",,
                  "Only one label can be specified with AFTER or BEFORE"
   When nlabel = 2 & cmdpaste == "O" Then do
      Address ISREDIT "(FIRST) = LINENUM" tpaste
      If rc ^= 0 Then call error_msg "Invalid label" tpaste,,
                                "Label" tpaste "is invalid or undefined"
      Address ISREDIT "(LAST) = LINENUM" bpaste
      If rc ^= 0 Then call error_msg "Invalid label" bpaste,,
                                "Label" bpaste "is invalid or undefined"
      Top = min(first,last)
      Bottom = max(first,last)
      End
   Otherwise
      Call error_msg "Catastrophic error",,
                     "Catastrophic error occurred in processing range"
   End

Lines = 0
Truncated = 0

/***********************************************************************
* Process cursor or AT parameter (override table bounds)               *
***********************************************************************/
Select
   When at == "" Then do
      Address ISREDIT "(,CURSOR) = CURSOR"
      At = format(cursor)
      End
   When at ^== "" & CMDPASTE == "O" Then do
      If at > width Then call error_msg "AT value" at "invalid",,
                                   "AT value" at "is greater than" width
      End
   When at ^== "" & CMDPASTE ^== "O"
   Then call error_msg "Command conflict",,
                 "AT command must only be specified with O line command"
  End

Select

/***********************************************************************
* Destination specified (A or B command)                               *
***********************************************************************/
   When cmdpaste == "A" | cmdpaste == "B" Then do
      Address ISPEXEC "TBTOP" table
      Address ISPEXEC "TBSKIP" table
      Rc_skip = rc
      Do line = top by 1 while rc_skip = 0
         Address ISREDIT "LINE_AFTER" line "= <(LCUT) (CUTDATA)>"
         If rc = 4 Then truncated = truncated+1
         Lines = lines+1
         Address ISPEXEC "TBSKIP" table
         Rc_skip = rc
         End line
      End

/***********************************************************************
* Range specified (O, OO, or On command)                               *
***********************************************************************/
   When cmdpaste == "O" Then do
      If at ^= 0 & at > rpaste
         Then call error_msg "Cursor out of bounds",,
                       "Cursor position greater than right bound" rpaste
      Line = top
      Do while line <= bottom
         Address ISPEXEC "TBTOP" table
         Address ISPEXEC "TBSKIP" table
         Rc_skip = rc
         Do line = line to bottom while rc_skip = 0
            If at = 0 Then do
               Left = lcut
               Right = rcut
               End
            Else do
               Left = at
               Right = at+rcut-lcut
               End
            Address ISREDIT "(EDITDATA) = LINE" line
            Start_cut = max(1,lpaste-lcut+1)
            Length = min(right,rpaste)-max(left,lpaste)+1
            Cutdata = substr(cutdata,start_cut,length)
            Start_paste = max(left,lpaste)
            Editdata = overlay(cutdata,editdata,start_paste)
            Address ISREDIT "LINE" line "= (EDITDATA)"
            If left < lpaste | right > rpaste
            Then truncated = truncated+1
            Lines = lines+1
            Address ISPEXEC "TBSKIP" table
            Rc_skip = rc
            End line
         End
      End

   End

Select

/***********************************************************************
* Process MOVE command                                                 *
**********************************************************************/
   When paste == "MOVE" Then do
      Address ISPEXEC "TBBOTTOM" table
      Do until rc ^= 0
         Address ISPEXEC "TBDELETE" table
         End
      Address ISPEXEC "TBEND" table
      If truncated = 0 Then do
         Zerrsm = lines "lines moved"
         Zerrlm = "From table" table
         Address ISPEXEC "SETMSG MSG(ISRZ002)"
         End
      Else do
         Zerrsm = truncated "lines truncated"
         Zerrlm = lines "lines moved from table" table
         Zerralrm = "YES"
         Address ISPEXEC "SETMSG MSG(ISRZ002)"
         End
      End

/***********************************************************************
* Process COPY command                                                 *
***********************************************************************/
   When paste == "COPY" Then do
      Address ISPEXEC "TBTOP" table
      If truncated = 0 Then do
         Zerrsm = lines "lines copied"
         Zerrlm = "From table" table
         Zerralrm = "NO"
         Address ISPEXEC "SETMSG MSG(ISRZ002)"
         End
      Else do
         Zerrsm = truncated "lines truncated"
         Zerrlm = lines "lines copied from table" table
         Address ISPEXEC "SETMSG MSG(ISRZ002)"
         End
      End

   End

/***********************************************************************
* Normal exit                                                          *
***********************************************************************/
Exit 0

/***********************************************************************
* Issue error message and exit abnormally                              *
***********************************************************************/
Error_msg: Procedure
Parse arg zerrsm,zerrlm
Zerralrm = "YES"
Zerrhm = "#CUT"
Address ISPEXEC "SETMSG MSG(ISRZ002)"
Exit 12

/***********************************************************************
* Trap uninitialized variables                                         *
***********************************************************************/
Novalue:
   Say "Uninitialized variable in line" sigl":"
   Say sourceline(sigl)
   Trace "?Results"
   Nop
