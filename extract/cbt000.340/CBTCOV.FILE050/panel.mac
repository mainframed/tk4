./ ADD NAME=$STORAGE 0101-93133-93180-1729-00142-00009-00000-$A1019
)attr default($^@)
 ~ type(text) color(turq)  intens(high)
 ` type(text) color(green) intens(low)
 ! type(text) color(red)   intens(high)
 ÷ type(text) color(turq)  intens(high)
 \ type(text) color(white) intens(high) hilite(uscore)
 # area(scrl) extend(on)
)body
$TUTORIAL ------------------- Display Main Storage ------------------- T
$Command ===>@zcmd                                            $Scroll ==
#help
)area help
^Main storage is displayed in the following format:
^
~aaaaaaaa soooo!_`xxxxxxxx!_`xxxxxxxx!_`xxxxxxxx!_`xxxxxxxx    ccccccccc
^
~a...^is a hexadecimal storage address.
~s   ^is the sign (+ or -) of~oooo.
~o...^is the hexadecimal offset from the currently located address (see
!_   ^is an input selection field (see below).
`x...^is the hexadecimal representation of the storage beginning at ÷aaa
`c...^is the character representation of the storage beginning at ÷aaaaa
^
\                              Command Invocation
^
$STORage÷<?|address|name>
^
÷?^displays this tutorial.
÷address^initially locates the specified hexadecimal address.
÷name^initially locates a control block with the specified name.
^See the$Locate^command and$control blocks^below.
^
\                               Primary Commands
^
$DOWN÷<n|Csr|Half|Page|Max>^(&dn) scrolls the display toward address 7FF
^
$UP  ÷<n|Csr|Half|Page|Max>^(&up) scrolls the display toward address 000
^
$Locate÷{name|address}^positions the display with the specified address
^       top of the screen.  The previously located name/address is saved
^       pushdown stack.
÷Name^specifies a 1-8 character alphanumeric name with the first charact
^     alphabetic. See$control blocks^and the$Equate^command, below.
÷Address^specifies a 1-8 digit hexadecimal address.  The address may opt
^        be suffixed with a period to prevent confusion with a name.
^
$+÷offset^positions the display at the specified positive hexadecimal of
^  from the currently located address.
^
$-÷offset^positions the display at the specified negative hexadecimal of
^  from the currently located address.
^
$Back÷<n|Max>^displays a previously located address from the pushdown st
^     The default for÷n^is 1.
^
$Equate÷name address^associates the specified name with the specified ad
^      ÷name^may be used in a$Locate^command.
^      ÷address^is one of the following:
^               1-8 hexadecimal digits.
^              ÷CURSOR^or÷CSR^is the word where the cursor is positioned
^              ÷X^is the first address displayed on the screen.
^              ÷*^is the currently Located address.
^
$Pointers^displays a panel with the most recently located addresses. You
^         select a pointer by positioning the cursor on the selection fi
^         pressing enter. You may optionally type a non-blank character.
^
$Find÷string <NEXT|PREV> <CHARs|PREfix|SUFfix|WORD>^is similar to the FI
^     command in ISPF Browse. The syntax and meaning of the supported pa
^     are identical to Browse.
^
$RFIND^repeats the action of the previous$Find^command.
^
\                               Selection Fields
^
^Selection fields provide an alternative to the$Locate^command.  A selec
^code typed next to a hexadecimal word causes the contents of that word
^located. The following codes are supported:
^
$?^specifies a 31-bit address.
^
$%^specifies a 24-bit address (i.e., only the last three bytes are used)
^
^You may also place the cursor anywhere on a selection field or the foll
^word. This is equivalent to specifying$?^if the storage at that address
^valid. Otherwise it is equivalent to specifying$%.^
^
\                                Control Blocks
^
^Many÷names^of control blocks are predefined for use with the$Locate^com
^
÷ACCVT    ^ACF2 Communications Vector Table (ACF2)
÷ACEE     ^Accessor Environment Element (RACF)
÷ACT      ^Account Control Table (Converter/Interpreter)
÷ACUCB    ^ACF2 Address Space Control Block (ACF2)
÷ASCB     ^Address Space Control Block (Supervisor)
÷ASMVT    ^ASM Vector Table (Auxiliary Storage Manager)
÷ASSB     ^Address Space Secondary Block (Supervisor)
÷ASXB     ^Address Space Extension Block (Supervisor)
÷BASEA    ^Master Scheduler Resident Data Area (System Command)
÷CVT      ^Communications Vector Table
÷CVTEXT1  ^CVT OS-OS/VS Common Extension
÷CVTEXT2  ^CVT OS/VS1-OS/VS2 Common Extension
÷CVTSMEXT ^CVT Virtual Storage Address Extension
÷DEB      ^Data Extent Block
÷DSAB     ^Data Set Association Block (Allocation)
÷DSABQDB  ^DSAB Queue Descriptor Block (Allocation)
÷ECVT     ^Extended Communications Vector Table (Supervisor)
÷GDA      ^Global Data Area (Virtual Storage Manager)
÷JCT      ^Job Control Table (Converter/Interpreter)
÷JCTX     ^Job Control Table Extension (Converter/Interpreter)
÷JESCT    ^JES Control Table (Initiator)
÷JMR      ^Job Management Record (Converter/Interpreter)
÷JSCB     ^Job Step Control Block (Scheduler)
÷LDA      ^Local Data Area (Virtual Storage Manager)
÷MEMDSECT ^Memory Data Block Header (JES3)
÷MEMENTRY ^Memory Data Block Entry (JES3)
÷OUCB     ^User Control Block (SRM)
÷OUSB     ^User Swappable Block (SRM)
÷OUXB     ^User Extension Block (SRM)
÷PCCAVT   ^Physical Configuration Communication Area Vector Table (MP Re
÷PCCB     ^Private Catalog Control Block (Allocation)
÷PSA      ^Prefixed Save Area (Supervisor)
÷PSCB     ^Protected Step Control Block (TSO/E)
÷RB       ^Request Block (Task Manager)
÷SCT      ^Step Control Table (Converter/Interpreter)
÷SCTX     ^Step Control Table Extension (Converter/Interpreter)
÷SCVT     ^Secondary Communication Vector Table
÷SMCA     ^System Management Control Area (SMF)
÷SSCVT    ^Subsystem Communications Vector Table (Initiator)
÷SSIB     ^Subsystem Identification Block (Initiator)
÷SSVT     ^Subsystem Vector Table (Primary Subsystem)
÷STCB     ^Secondary Task Control Block (Task Manager)
÷TCB      ^Task Control Block (Task Manager)
÷TCT      ^Timing Control Table (SMF)
÷TIOT     ^Task Input/Output Table (Allocation)
^-----------------------------------------------------------------------
)init
 &dn = pfk(down)
 &up = pfk(up)
 &zup = $storage
)end
./ ADD NAME=STORAGE  0100-93123-93210-1334-00023-00016-00000-$A1019
)attr
 @  type(output)  color(turq)   intens(high)
 #  area(dynamic) extend(on)    scroll(on)   datamod(05)
 01 type(dataout) color(turq)   intens(high)
 02 type(datain)  color(turq)   intens(low)
 03 type(dataout) color(green)  intens(low)
 04 type(char)    color(red)                 hilite(reverse)
 05 type(datain)  color(red)    intens(high) hilite(uscore)
 06 type(dataout) color(green)  intens(high)
 07 type(char)    color(white)               hilite(uscore)
)body
%Display Main Storage ------------------------------ Located:@name    @l
%Command ===>_zcmd                                            %Scroll ==
#AREA,SHADOW
)init
 .help = $storage
)reinit
 refresh *
)proc
 &csrpos = .csrpos
 &cursor = .cursor
 &lvline = lvline(area)
)end
./ ADD NAME=STORAGEP 0100-93139-93139-1502-00019-00016-00000-$A1019
)panel
)attr
 @ type(input)  caps(on) color(red) intens(high) pad('_')
 # type(output) caps(off) color(turq) intens(high)
)body window(24,13)
%----------------------%
%Command ===>_zcmd     %
+  Name     Address
)model
@Z#PTRNAME #PTR     +
)init
 .zvars = '(select)'
 &select = &z
 &zwinttl = 'Current Pointers'
)proc
 &ptrcsr = .cursor
 &ptrpos = .csrpos
 &ptrrow = .csrrow
)end
