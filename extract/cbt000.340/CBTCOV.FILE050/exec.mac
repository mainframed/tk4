./ ADD NAME=STORAGE                                15SEP93 20.31 --
/*REXX******************************************************************
*                                                                      *
*                 ISPF Dialog to Display Main Storage                  *
*                                                                      *
* Display format (80 bytes):                                           *
*          1         2         3         4         5         6         *
* 1...5....0....5....0....5....0....5....0....5....0....5....0....5... *
* Haaaaaaaa sooooI NxxxxxxxxI NxxxxxxxxI NxxxxxxxxI Nxxxxxxxx   Ncc... *
*                                                                      *
* a = Hexadecimal address (8 bytes).                                   *
* s = Sign of offset (+ or -).                                         *
* o = Hexadecimal offset from LOCATEd byte (4 bytes).                  *
* x = Hexadecimal representation of storage at address (4*8 bytes).    *
* c = Character representation of storage at address (32 bytes).       *
*                                                                      *
* H = Field attribute "01"x: highlighted output field.                 *
* I = Field attribute "02"x: input field;                              *
*     field attribute "05"x: input field with data modified by user.   *
* N = Field attribute "03"x: normal output field;                      *
*     field attribute "06"x: highlighted output field for LOCATEd word,*
*                            or FIND string.                           *
*                                                                      *
* Shadow attribute "04"x: highlight for LOCATEd byte.                  *
* Shadow attribute "07"x: highlight for FIND bytes.                    *
*                                                                      *
* See tutorial panel $STORAGE for more information.                    *
*                                                                      *
* Note: use of the RFIND command requires entries in the ISPCMDS table *
* in file ISPTLIB in the following order:                              *
*                                                                      *
* VERB     T  ACTION                                                   *
*                DESCRIPTION                                           *
* RFIND    0  &USRRFIND                                                *
*                Repeat FIND                                           *
* RFIND    0  SETVERB                                                  *
*                Repeat FIND                                           *
*                                                                      *
*                                                                      *
* Douglas H. Adams                                                     *
* Mail Code 110-SE28                                                   *
* Rockwell International Corporation                                   *
* 2201 Seal Beach Boulevard                                            *
* P. O. Box 2515                                                       *
* Seal Beach, California 90740-1515                                    *
*                                                                      *
* (310) 797-2618                                                       *
*                                                                      *
* July 29, 1993                                                        *
*                                                                      *
***********************************************************************/

Usrrfind = "PASSTHRU"

Signal on novalue
Numeric digits 10
Address ISPEXEC

If arg(1) = "?" | abbrev("HELP",arg(1),1)
Then do
   "SELECT PGM(ISPTUTOR) PARM($STORAGE)"
   Exit
   End

/***********************************************************************
* Initialize                                                           *
***********************************************************************/
"PQUERY PANEL(STORAGE) AREANAME(AREA) DEPTH(DEPTH)"
StorageSize = Depth*16
AreaSize = Depth*80
Area = copies(" ",AreaSize)
Shadow = Area
FindShadow = Shadow
FindAttr = 0
NonDisplay = xrange("00"x,"3F"x) || "FF"x
NoFormat? = 0
PointerNumber = 0
Name = ""
Call EquateControlBlocks
If arg() == 0
Then Zcmd = "LOCATE PSA"
Else Zcmd = "LOCATE" arg(1)
If ^ Locate()
Then exit
FindPreviousString = ""

/***********************************************************************
* Display Main Storage                                                 *
***********************************************************************/
Call FormatArea
"DISPLAY PANEL(STORAGE) CURSOR("Cursor") CSRPOS("CsrPos")"
Do while rc == 0
   Call commands
   If NoFormat?
   Then NoFormat? = 0
   Else call FormatArea
   "DISPLAY CURSOR("Cursor") CSRPOS("CsrPos")"
   End

Exit

/***********************************************************************
* Format the dynamic area.                                             *
* Format the dynamic area shadow to highlight the most recently        *
* located byte.                                                        *
***********************************************************************/
FormatArea:

Area = ""
Do Location = First to Last by 16
   Offset = Location-Pointer
   Select
      When Offset >= 0 & Offset <= 65535
      Then HexOffset = "+"d2x(Offset,4)
      When Offset < 0 & Offset >= -65535
      Then HexOffset = "-"d2x(-Offset,4)
      Otherwise HexOffset = "     "
      End
   HexLoc = d2x(Location,8)
   Char = storage(HexLoc,16)
   Hex = c2x(Char)
   If Char ^== ""
   Then Area = Area || "01"x || HexLoc || " " || HexOffset,
                    || "024003"x || substr(Hex, 1,8),
                    || "024003"x || substr(Hex, 9,8),
                    || "024003"x || substr(Hex,17,8),
                    || "024003"x || substr(Hex,25,8),
                    || "40404003"x||translate(Char,,NonDisplay,".")" "
   Else Area = Area || "01"x || HexLoc || " ",
                    || "034040"x || left("Storage not available",67)
   End

If FindAttr ^== 0
Then Area = overlay("06"x,Area,FindAttr)
Shadow = FindShadow
FindShadow = ""
FindAttr = 0
If Pointer >= First & Pointer <= Last & storage(Located) ^== ""
Then do
   LocAttr = (Pointer-First)%16*80+18+(Pointer-First)//16%4*11
   Area = overlay("06"x,Area,LocAttr)
   Shadow = overlay("0404"x,Shadow,LocAttr+1+(Pointer-First)//4*2)
   End

Return

/***********************************************************************
* Process commands                                                     *
***********************************************************************/
Commands:

Parse upper var Zcmd Sign +1 . 1 Command .
If Cursor = "ZCMD"
Then CsrPos = 1
If Zcmd ^= ""
Then Zverb = ""
Else "VGET (ZVERB ZSCROLLA ZSCROLLN) SHARED"
Select
   When Zcmd = "" & Zverb = ""
   Then call SelectionCode
   When Sign == "+" | Sign == "-"
   Then call ScrollOffset
   When abbrev("BACK",Command,1)
   Then call Back
   When Command == "CANCEL"
   Then leave
   When Zverb = "DOWN"
   Then call Down
   When abbrev("EQUATE",Command,1)
   Then call Equate
   When Command == "EXIT"
   Then leave
   When abbrev("FIND",Command,1)
   Then call Find
   When Zverb = "LEFT"
   Then nop
   When abbrev("LOCATE",Command,1)
   Then call Locate
   When abbrev("POINTERS", Command,1)
   Then call Pointers
   When command == "RFIND"
   Then call Rfind
   When Zverb = "RIGHT"
   Then nop
   When Zverb = "UP"
   Then call Up
   Otherwise "SETMSG MSG(STOR000) MSGLOC(ZCMD)"
   End
Return

/***********************************************************************
* Selection Code % (24 bit) and ? (31 bit)                             *
***********************************************************************/
SelectionCode:

Msg = ""
CodePos = pos("05"x,Area)
If CodePos ^== 0
Then do
   Code = substr(Area,CodePos+1,1)
   Select
      When code == "%"
      Then Msg = SetPointer(Hex2dec(substr(Area,CodePos+5,6)))
      When code == "?"
      Then Msg = SetPointer(Hex2dec(substr(Area,CodePos+3,8)))
      When code == " "
      Then Area = overlay("02"x,Area,CodePos)
      Otherwise
         NoFormat? = 1
         Msg = "STOR008"
         Cursor = "AREA"
         CsrPos = CodePos+1
      End
   If msg == ""
   Then call Stack
   Else "SETMSG MSG("Msg")"
   Return
   End

Loc31 = CursorWord()
If Loc31 ^== 0
Then do
   Loc24 = right(Loc31,6)
   Select
      When storage(Loc31) ^== ""
      Then Msg = SetPointer(Hex2dec(Loc31))
      When storage(Loc24) ^== ""
      Then Msg = SetPointer(Hex2dec(Loc24))
      Otherwise Msg = SetPointer(Hex2dec(Loc31))
      End
   If msg == ""
   Then call Stack
   Else "SETMSG MSG("Msg")"
   End
Return

/***********************************************************************
* + and - Commands (scroll to Offset from Located address)             *
***********************************************************************/
ScrollOffset:

Parse var Zcmd Sign +1 Hex "."
Hex = strip(Hex)
If ^ ValidAddress(Hex)
Then "SETMSG MSG(STOR001) MSGLOC(ZCMD)"
Else do
   Zcmd = ""
   If Sign == "+"
   Then Loc = min(Pointer+Hex2dec(Hex),2147483647)
   Else Loc = max(Pointer-Hex2dec(Hex),0)
   First = Loc-Loc//16
   Last = min(First+StorageSize,2147483647)
   Cursor = "AREA"
   CsrPos = 19+(Loc-First)%4*11+(Loc-First)//4*2
   End
Return

/***********************************************************************
* Back Command                                                         *
***********************************************************************/
Back:

Parse upper var Zcmd . Amount
Select
   When Amount = ""
   Then PointerNumber = PointerNumber-1
   When abbrev("MAX",Amount,1)
   Then PointerNumber = 1
   When datatype(Amount,"Whole number")
   Then PointerNumber = PointerNumber-Amount
   Otherwise
      "SETMSG MSG(STOR006) MSGLOC(ZCMD)"
      Return
      End
If PointerNumber < 1
Then do
   "SETMSG MSG(STOR007) MSGLOC(ZCMD)"
   PointerNumber = 1
   End
Zcmd = ""
Call SetPointer PointerStack.PointerNumber,NameStack.PointerNumber
Return

/***********************************************************************
* Scroll DOWN Command                                                  *
***********************************************************************/
Down:

PreviousFirst = First
If Zscrolla ^= "MAX"
Then First = First+Zscrolln*16
Else First = 2147483648-StorageSize
Last = First+StorageSize
Call SetCursor
Return

/***********************************************************************
* EQUATE Command                                                       *
***********************************************************************/
Equate:

Msg = ""
Parse upper var Zcmd . Symbol Value "."
Select
   When Symbol = "" | Value = ""
   Then Msg = "STOR005"
   When ^ ValidName(Symbol)
   Then Msg = "STOR002"
   When Value = "*"
   Then do
      Name = Symbol
      NameStack.PointerNumber = Name
      Value = Located
      End
   When wordpos(Value,"CURSOR CSR") ^== 0
   Then do
      Value = CursorWord()
      If Value == 0
      Then Msg = "STOR009"
      End
   When Value = "X"
   Then Value = First
   When ^ ValidAddress(Value)
   Then Msg = "STOR001"
   Otherwise nop
   End
If Msg == ""
Then do
   Zcmd = ""
   Equate.Symbol = Hex2dec(Value)
   End
Else "SETMSG MSG("Msg") MSGLOC(ZCMD)"
Return

/***********************************************************************
* FIND Command                                                         *
*                                                                      *
* FIND|F string <NEXT|PREV> <CHARS|PREFIX|SUFFIX|WORD>                 *
* All supported parameters are the same as ISPF Browse.                *
***********************************************************************/
Find:

If Symbol("FindInitialized?") ^== "VAR"
Then call FindInitialization
Call FindScan
Call FindParse
If ^ FindError?
Then do
   If FindToken ^== "*"
   Then call FindAnalyze
   Call FindExecute
   End
Return

/***********************************************************************
* LOCATE Command                                                       *
***********************************************************************/
Locate:

Msg = ""
Parse upper var Zcmd . Symbol 1 . Hex "."
Select
   When Symbol("Equate.Symbol") == "VAR"
   Then Msg = SetPointer(Equate.Symbol,Symbol)
   When ValidAddress(Hex)
   Then Msg = SetPointer(Hex2dec(Hex))
   When ValidName(Symbol)
   Then Msg = "STOR003"
   Otherwise Msg = "STOR004"
   End
If Msg == ""
Then do
   Call Stack
   Zcmd = ""
   End
Else "SETMSG MSG("Msg") MSGLOC(ZCMD)"
Return Msg == ""

/***********************************************************************
* POINTERS Command                                                     *
***********************************************************************/
Pointers:

"TBCREATE STORAGEP NAMES(PTRNAME PTR) NOWRITE REPLACE"
Do N = 1 to PointerMaximum
   PtrName = NameStack.N
   Ptr = d2x(PointerStack.N,8)
   "TBADD STORAGEP MULT("PointerMaximum")"
   End
"TBTOP STORAGEP"
"ADDPOP"
"TBDISPL STORAGEP PANEL(STORAGEP)"
If rc == 0
Then do
   Select
      When Ztdsels > 0
      Then call SetPointer Hex2dec(Ptr),PtrName
      When PtrCsr = "SELECT"
      Then do
         "TBTOP STORAGEP"
         "TBSKIP STORAGEP NUMBER("PtrRow")"
         Call SetPointer Hex2dec(Ptr),PtrName
         End
      Otherwise nop
      End
   End
"REMPOP"
"TBEND STORAGEP"
Return

/***********************************************************************
* RFIND (Repeat FIND) Command                                          *
***********************************************************************/
Rfind:

Parse var Zcmd . extraneous
If extraneous ^== ""
Then "SETMSG MSG(STOR114) MSGLOC(ZCMD)"
Else do
   If FindPreviousString == ""
   Then "SETMSG MSG(STOR103) MSGLOC(ZCMD)"
   Else call FindExecute
   End
Return

/***********************************************************************
* Scroll UP Command                                                    *
***********************************************************************/
Up:

PreviousFirst = First
If Zscrolla ^= "MAX"
Then First = max(First-Zscrolln*16,0)
Else First = 0
Last = First+StorageSize
Call SetCursor
Return

/***********************************************************************
* Validate that a string is a hexadecimal address                      *
***********************************************************************/
ValidAddress:

Return arg(1) ^== "" & datatype(arg(1),"X") & length(arg(1)) <= 8

/***********************************************************************
* Validate that a string is a Name                                     *
***********************************************************************/
ValidName:

Return datatype(left(arg(1),1),"M") & datatype(arg(1),"A") &,
       length(arg(1)) <= 8

/***********************************************************************
* Obtain 8-byte hexadecimal word near cursor position                  *
***********************************************************************/
CursorWord:

If Cursor = "AREA" &  CsrPos//80 >= 16 & CsrPos//80 <= 59
Then return substr(Area,CsrPos%80*80+19+(CsrPos//80-16)%11*11,8)
Else return 0

/***********************************************************************
* Determine storage location corresponding to cursor position          *
***********************************************************************/
Position2Location:

If Cursor ^= "AREA"
Then return First-1
CursorRow = (CsrPos-1)%80+1
CursorCol = (CsrPos-1)//80+1
Select
   When CursorCol < 16
   Then Location = First+16*(CursorRow-1)
   When CursorCol > 59
   Then Location = First+16*CursorRow
   Otherwise
      CursorWord = (CursorCol-16)%11
      CursorByte = (max((CursorCol-16)//11,3)-3)%2
      Location = First+16*(CursorRow-1)+4*CursorWord+CursorByte
   End
Return Location
/***********************************************************************
* Convert hexadecimal address to decimal                               *
***********************************************************************/
Hex2dec:

Return c2d(bitand(right(x2c(arg(1)),4,"00"x),"7FFFFFFF"x))

/***********************************************************************
* Set Pointer Location                                                 *
***********************************************************************/
SetPointer:

HexLoc = d2x(arg(1),8)
If storage(HexLoc) ^== ""
Then do
   Pointer = arg(1)
   Name = arg(2)
   First = Pointer-Pointer//16
   Last = min(First+StorageSize,2147483647)
   Located = HexLoc
   Cursor = "AREA"
   CsrPos = 17+(Pointer-First)%4*11
   Return ""
   End
Else return "STOR010"

/***********************************************************************
* Set cursor position within dynamic area                              *
***********************************************************************/
SetCursor:

If Cursor ^= "AREA"
Then return
CsrPos = CsrPos+(PreviousFirst-First)*5
If CsrPos > 0 & CsrPos < AreaSize
Then return
Cursor = "ZCMD"
CsrPos = 1
Return

/***********************************************************************
* Stack current Pointer Location                                       *
***********************************************************************/
Stack:

PointerNumber = PointerNumber+1
PointerMaximum = PointerNumber
PointerStack.PointerNumber = Pointer
NameStack.PointerNumber = Name
Return

/***********************************************************************
* Equate control block Names                                           *
***********************************************************************/
EquateControlBlocks:

Equate.PSA = 0

Equate.CVT = c2d(storage("10",4))
   Equate.ASMVT = c2d(storage(d2x(Equate.CVT+704),4))
   Equate.BASEA = c2d(storage(d2x(Equate.CVT+148),4))
   Equate.CVTEXT1 = c2d(storage(d2x(Equate.CVT+252),4))
   Equate.CVTEXT2 = c2d(storage(d2x(Equate.CVT+328),4))
   Equate.CVTSMEXT = c2d(storage(d2x(Equate.CVT+1196),4))
   Equate.ECVT = c2d(storage(d2x(Equate.CVT+140),4))
   Equate.GDA = c2d(storage(d2x(Equate.CVT+560),4))
   Equate.JESCT = c2d(storage(d2x(Equate.CVT+296),4))
      Equate.SSCVT = c2d(storage(d2x(Equate.JESCT+24),4))
         Equate.SSVT = c2d(storage(d2x(Equate.SSCVT+16),4))
   Equate.PCCAVT = c2d(storage(d2x(Equate.CVT+764),4))
   Equate.SCVT = c2d(storage(d2x(Equate.CVT+200),4))
   Equate.SMCA = c2d(storage(d2x(Equate.CVT+197),3))

Equate.ASCB = c2d(storage("224",4))
   Equate.ASSB = c2d(storage(d2x(Equate.ASCB+336),4))
   Equate.ASXB = c2d(storage(d2x(Equate.ASCB+108),4))
   Equate.LDA = c2d(storage(d2x(Equate.ASCB+48),4))
      Equate.ACEE = c2d(storage(d2x(Equate.ASXB+200),4))
      Equate.OUSB = c2d(storage(d2x(Equate.ASXB+128),4))
   Equate.OUCB = c2d(storage(d2x(Equate.ASCB+144),4))
   Equate.OUXB = c2d(storage(d2x(Equate.ASCB+148),4))

Equate.TCB = c2d(storage("21C",4))
   Equate.DEB = c2d(storage(d2x(Equate.TCB+9),3))
   Equate.JSCB =,
            c2d(storage(d2x(c2d(storage(d2x(Equate.TCB+181),3))+348),4))
      Equate.DSABQDB = c2d(storage(d2x(Equate.JSCB+320),4))
         Equate.DSAB = c2d(storage(d2x(Equate.DSABQDB+13),3))
      Equate.JCT = c2d(storage(d2x(Equate.JSCB+260),4))+16
         Equate.ACT = c2d(storage(d2x(Equate.JCT+40),3))+16
         Equate.JCTX = c2d(storage(d2x(Equate.JCT+36),3))+16
         Equate.JMR = c2d(storage(d2x(Equate.JCT+134),3))+16
      Equate.PCCB = c2d(storage(d2x(Equate.JSCB+204),4))
      Equate.PSCB = c2d(storage(d2x(Equate.JSCB+264),4))
      Equate.SCT = c2d(storage(d2x(Equate.JSCB+328),4))+16
         Equate.SCTX = c2d(storage(d2x(Equate.SCT+68),3))+16
      Equate.SSIB = c2d(storage(d2x(Equate.JSCB+316),4))
   Equate.RB = c2d(storage(d2x(Equate.TCB),4))
   Equate.STCB = c2d(storage(d2x(Equate.TCB+312),4))
   Equate.TCT = c2d(storage(d2x(Equate.TCB+165),3))
   Equate.TIOT = c2d(storage(d2x(Equate.TCB+12),4))

/*------------------------------- ACF2 -------------------------------*/
CurrentSSCVT = c2d(storage(d2x(Equate.SSCVT+4),4))
Do while CurrentSSCVT ^== 0 & Symbol("Equate.ACCVT") ^== "VAR"
   If storage(d2x(CurrentSSCVT+8),4) == "ACF2"
   Then do
      Equate.ACCVT = c2d(storage(d2x(CurrentSSCVT+20),4))
         Equate.ACUCB = ,
           c2d(storage(d2x(c2d(storage(d2x(Equate.ASCB+36),2))*32+,
                           c2d(storage(d2x(Equate.ACCVT+100),4))+28),4))
      End
   CurrentSSCVT = c2d(storage(d2x(CurrentSSCVT+4),4))
   End

/*------------------------------- JES3 -------------------------------*/
If storage(d2x(Equate.SSCVT+8),4) == "JES3"
Then do
   Equate.MEMENTRY = c2d(storage(d2x(Equate.SSIB+32),4))
      Equate.MEMDSECT = c2d(storage(d2x(Equate.MEMENTRY+4),4))
   End

Return

/***********************************************************************
* FIND Command - scan parameter string for tokens                      *
***********************************************************************/
FindScan:

Parse var Zcmd . Parms
Category = translate(Parms,CategoryTable,ParmsTable,3)"7"
StartPos = 1
CurrentPos = 1
CurrentState = init
FindError? = 0
NumberOfTokens = 0
Do N = 1 by 1 while CurrentPos <= length(Parms)
   NumberOfTokens = N
   Token.N = ""
   String.N = ""
   Type.N = ""
   Keyword.N = ""
   Do CurrentPos = CurrentPos by 1,
      until wordpos(CurrentAction,"endtok endstr syntax") ^== 0
      Column = substr(Category,CurrentPos,1)
      CurrentAction = A.Column.CurrentState
      Select
         When CurrentAction == "nop"
         Then nop
         When CurrentAction == "start"
         Then call StartOfString
         When CurrentAction == "endstr"
         Then call EndOfString
         When CurrentAction == "scpx"
         Then call StartCPXString
         When CurrentAction == "endcpx"
         Then call EndCPXString
         When CurrentAction == "endq"
         Then call EndQuotedString
         When CurrentAction == "endtok"
         Then nop
         When CurrentAction == "syntax"
         Then call SyntaxError
         End
      CurrentState = S.Column.CurrentState
      End
   End
Return

/***********************************************************************
* FIND Command scan - beginning of string                             *
***********************************************************************/
StartOfString:

StartPos = CurrentPos
Return
/***********************************************************************
* FIND Command scan - end of unquoted string                           *
***********************************************************************/
EndOfString:

Token.N = substr(Parms,StartPos,CurrentPos-StartPos)
String.N = Token.N
Uppercase = translate(Token.N)
Keyword.N = Parameter.Uppercase
Return
/***********************************************************************
* FIND Command scan - character, picture, or hexadecimal string        *
***********************************************************************/
StartCPXString:

StartPos = CurrentPos-1
Type.N = translate(substr(Parms,StartPos,1))
Return
/***********************************************************************
* FIND Command scan - end of character, picture, or hexadecimal string *
***********************************************************************/
EndCPXString:

Token.N = substr(Parms,StartPos,CurrentPos-StartPos+1)
String.N = substr(Token.N,2,length(Token.N)-3)
Type.N = translate(substr(Parms,CurrentPos,1))
Return
/***********************************************************************
* FIND Command scan - end of quoted string                             *
***********************************************************************/
EndQuotedString:

Token.N = substr(Parms,StartPos,CurrentPos-StartPos+1)
If Type.N == ""
Then String.N = substr(Token.N,2,length(Token.N)-2)
Else String.N = substr(Token.N,3,length(Token.N)-3)
Return
/***********************************************************************
* FIND Command scan - incomplete quoted string                         *
***********************************************************************/
SyntaxError:

FindError? = 1
"SETMSG MSG(STOR100) MSGLOC(ZCMD)"
Return
/***********************************************************************
* FIND Command scan - token analysis                                   *
***********************************************************************/
FindAnalyze:

If FindType == ""
Then FindString = translate(FindString)
If FindType == "X"
Then FindString = x2c(FindString)
If FindDirection == "PREV"
Then FindString = reverse(FindString)
If FindType == "P"
Then do N = 1 to length(FindString)
   Class = substr(FindString,N,1)
   VerifyTable.N = Picture.Class
   End
FindPreviousString = FindString
FindPreviousType = FindType
Return
/***********************************************************************
* FIND Command - parse the parameter list                              *
***********************************************************************/
FindParse:

If FindError?
Then return
Msg = ""
String.0 = ""
String# = 0
Type# = 0
Keyword.0 = ""
Direction# = 0
Qualifier# = 0
Do N = 1 to NumberOfTokens until StringFound?
   StringFound? = Keyword.N == "" | Keyword.N == "*"
   End
Select
   When NumberOfTokens == 0
   Then Msg = "STOR101"
   When NumberOfTokens == 1
   Then call FindString
   When ^ StringFound?
   Then Msg = "STOR104"
   Otherwise do N = 1 to NumberOfTokens while Msg == ""
      If Keyword.N == "" | Keyword.N == "*"
      Then call FindString
      Else call FindKeyword
      End
   End
If Msg == ""
Then do
   FindToken = Token.String#
   FindString = String.String#
   FindType = Type.Type#
   If Direction# ^== 0
   Then FindDirection = Keyword.Direction#
   Else FindDirection = "NEXT"
   If Qualifier# ^== 0
   Then FindQualifier = Keyword.Qualifier#
   Else FindQualifier = "CHARS"
   End
Else do
   FindError? = 1
   "SETMSG MSG("Msg") MSGLOC(ZCMD)"
   End
Return

/***********************************************************************
* FIND Command parse - key word found                                  *
***********************************************************************/
FindKeyword:

Select
   When wordpos(Keyword.N,Directions) ^== 0 & Direction# ^== 0
   Then do
      FindError? = 1
      Key1 = Token.Direction#
      Key2 = Token.N
      "SETMSG MSG(STOR107) MSGLOC(ZCMD)"
      End
   When wordpos(Keyword.N,Qualifiers) ^== 0 & Qualifier# ^== 0
   Then do
      FindError? = 1
      Key1 = Token.Qualifier#
      Key2 = Token.N.
      "SETMSG MSG(STOR107) MSGLOC(ZCMD)"
      End
   When wordpos(Keyword.N,Directions) ^== 0
   Then Direction# = N
   When wordpos(Keyword.N,Qualifiers) ^== 0
   Then Qualifier# = N
   End
Return
/***********************************************************************
* FIND Command parse - string found                                    *
***********************************************************************/
FindString:

Select
   When String# ^== 0
   Then Msg = "STOR102"
   When String.N == ""
   Then Msg = "STOR106"
   When Type.N == "X" & length(String.N)//2 ^== 0
   Then Msg = "STOR109"
   When Type.N == "X",
        & ^ (dataType(String.N,"X") & dataType(String.N,"A"))
   Then Msg = "STOR111"
   When Keyword.N == "*" & FindPreviousString == ""
   Then Msg = "STOR108"
   When Keyword.N == "*"
   Then do
      String.N = FindPreviousString
      Type.N = FindPreviousType
      String# = N
      Type# = N
      End
   Otherwise
      String# = N
      Type# = N
   End
Return
/***********************************************************************
* FIND Command - execution                                             *
***********************************************************************/
FindExecute:

Zcmd = ""
FindCursor = Position2Location()

Storage = ""
FindLocation = ""
Select
   When FindDirection == "NEXT" & FindCursor < 2147483647
   Then do
      FindStart = FindCursor+1
      StorageStart = FindStart
      If StorageStart >= 2048
      Then StorageLength = StorageStart%4096*4096+4096-StorageStart
      Else StorageLength = 2048-StorageStart
      Storage = storage(d2x(StorageStart),StorageLength)
      If ^ FindSearch()
      Then do StorageStart = StorageStart,
              +StorageLength-length(FindString)+1,
              by 4096 to 2147479552,
              until Storage == "" |  FindSearch()
         StorageLength = 4096+length(FindString)-1
         Storage = storage(d2x(StorageStart),StorageLength)
         End
      End
   When FindDirection == "PREV" & FindCursor > 0
   Then do
      FindStart = FindCursor-1
      StorageStart = FindStart%4096*4096
      StorageLength = FindStart-StorageStart+1
      If StorageLength > 0
      Then do
         Storage = storage(d2x(StorageStart),StorageLength)
         If ^ FindSearch()
         Then do StorageStart = StorageStart,
                 -StorageLength+length(FindString)-1,
                 by -4096 to 0,
                 until Storage == "" | FindSearch()
            StorageLength = 4096+length(FindString)-1
            Storage = storage(d2x(StorageStart),StorageLength)
            End
         End
      End
   Otherwise nop
   End

Qual = FindQualifier
Token = FindToken
Select
   When FindLocation ^== ""
   Then do
      Call FindPosition
      "SETMSG MSG(STOR105)"
      End
   When FindDirection == "NEXT"
   Then "SETMSG MSG(STOR113)"
   When FindDirection == "PREV"
   Then "SETMSG MSG(STOR112)"
   End
Return
/***********************************************************************
* FIND Command - search a page of storage                              *
***********************************************************************/
FindSearch:

Position = 0
Qualified? = 0
Verified? = 0
If FindType == ""
Then Storage = translate(Storage)
If FindDirection == "PREV"
Then Storage = reverse(storage)
Do until Qualified? | Position == 0
   If FindType ^== "P"
   Then Position = pos(FindString,Storage,Position+1)
   Else do until Verified?
      Position = verify(Storage,VerifyTable.1,"Match",Position+1)
      If Position > StorageLength-length(FindString)
      Then Position = 0
      If Position == 0
      Then leave
      Candidate = substr(Storage,Position,length(FindString))
      Do N = 2 to length(FindString),
         while verify(substr(Candidate,N,1),VerifyTable.N,"Match")
         End
      Verified? = N > length(FindString)
      End
   If Position ^== 0
   Then do
      If FindDirection == "NEXT"
      Then FindLocation = StorageStart+Position-1
      Else Findlocation = StorageStart+StorageLength-Position
      PrevChar = storage(d2x(FindLocation-1,8),1)
      NextChar = storage(d2x(FindLocation+length(FindString),8),1)
      PrevAlphameric? = verify(PrevChar,Alphameric,"Match") ^== 0
      NextAlphameric? = verify(NextChar,Alphameric,"Match") ^== 0
      Select
         When FindQualifier == "CHARS"
         Then Qualified? = 1
         When FindQualifier == "PREFIX"
         Then Qualified? = ^ PrevAlphameric? & NextAlphameric?
         When FindQualifier == "SUFFIX"
         Then Qualified? = PrevAlphameric? & ^ NextAlphameric?
         When FindQualifier == "WORD"
         Then Qualified? = ^ PrevAlphameric? & ^ NextAlphameric?
         End
      End
   End
Return Qualified?
/***********************************************************************
* Find Command - position cursor and scroll if required                *
***********************************************************************/
FindPosition:

Cursor = "AREA"
If FindLocation < First |,
   FindLocation+length(FindString) > First+16*Lvline
Then do
   First = Max(FindLocation-FindLocation//16-16,0)
   Last = min(First+StorageSize,2147483647)
   End
FindRow = (FindLocation-First)%16
FindOffset = (FindLocation-First)//16
FindWord = FindOffset%4
FindByte = FindOffset//4
FindAttr = 80*FindRow+16+11*Findword+2
FindCol = 16+11*Findword+3+FindByte*2
CsrPos = 80*FindRow+FindCol
FindChar = 80*FindRow+64+FindOffset
FindShadow = right("0707"x,CsrPos+1)
FindShadow = overlay("07"x,FindShadow,FindChar)
Do Loc = FindLocation+1 to FindLocation+length(FindString)-1
   FindRow = (Loc-First)%16
   FindOffset = (Loc-First)//16
   FindWord = FindOffset%4
   FindByte = FindOffset//4
   FindHex = 80*FindRow+16+11*Findword+3+FindByte*2
   FindChar = 80*FindRow+64+FindOffset
   FindShadow = overlay("0707"x,FindShadow,FindHex)
   FindShadow = overlay("07"x,FindShadow,FindChar)
   End
Return
/***********************************************************************
* FIND Command - initialization                                        *
***********************************************************************/
FindInitialization:

FindInitialized? = 1
FindPreviousString = ""
FindToken = ""
FindString = ""
FindType = ""
FindDirection = ""
FindQualifier = ""
CurrentAction = ""

ParmsTable = " ,cpxCPX'"""xrange()
CategoryTable = 1244444456

Parse Value 1    2     3      4     5      6     7      8,
      with  init str   cpxstr sqstr esqstr dqstr edqstr ecpx

/*          1      2      3      4      5      6      7               */
/*          blank  comma  other  cpx    squote dquote end             */
State =,
/*init  */  init   init   str    cpxstr sqstr  dqstr  init,
/*str   */  init   init   str    str    str    str    init,
/*cpxstr*/  init   init   str    str    sqstr  dqstr  init,
/*sqstr */  sqstr  sqstr  sqstr  sqstr  esqstr sqstr  init,
/*esqstr*/  init   init   sqstr  ecpx   esqstr init   init,
/*dqstr */  dqstr  dqstr  dqstr  dqstr  dqstr  edqstr init,
/*edqstr*/  init   init   dqstr  ecpx   edqstr init   init,
/*ecpx  */  init   init   sqstr  sqstr  sqstr  sqstr  init

/*          blank  comma  other  cpx    squote dquote end             */
Action =,
/*init  */ "nop    nop    start  start  start  start  endstr",
/*str   */ "endstr endstr nop    nop    nop    nop    endstr",
/*cpxstr*/ "endstr endstr nop    nop    scpx   scpx   endstr",
/*sqstr */ "nop    nop    nop    nop    endq   nop    syntax",
/*esqstr*/ "endtok endtok syntax endcpx nop    syntax endtok",
/*dqstr */ "nop    nop    nop    nop    nop    endq   syntax",
/*edqstr*/ "endtok endtok nop    endcpx syntax nop    endtok",
/*endcpx*/ "endtok endtok syntax syntax syntax syntax endtok"

Parse var state,
   s.1.1 s.2.1 s.3.1 s.4.1 s.5.1 s.6.1 s.7.1,
   s.1.2 s.2.2 s.3.2 s.4.2 s.5.2 s.6.2 s.7.2,
   s.1.3 s.2.3 s.3.3 s.4.3 s.5.3 s.6.3 s.7.3,
   s.1.4 s.2.4 s.3.4 s.4.4 s.5.4 s.6.4 s.7.4,
   s.1.5 s.2.5 s.3.5 s.4.5 s.5.5 s.6.5 s.7.5,
   s.1.6 s.2.6 s.3.6 s.4.6 s.5.6 s.6.6 s.7.6,
   s.1.7 s.2.7 s.3.7 s.4.7 s.5.7 s.6.7 s.7.7,
   s.1.8 s.2.8 s.3.8 s.4.8 s.5.8 s.6.8 s.7.8

Parse var action,
   a.1.1 a.2.1 a.3.1 a.4.1 a.5.1 a.6.1 a.7.1,
   a.1.2 a.2.2 a.3.2 a.4.2 a.5.2 a.6.2 a.7.2,
   a.1.3 a.2.3 a.3.3 a.4.3 a.5.3 a.6.3 a.7.3,
   a.1.4 a.2.4 a.3.4 a.4.4 a.5.4 a.6.4 a.7.4,
   a.1.5 a.2.5 a.3.5 a.4.5 a.5.5 a.6.5 a.7.5,
   a.1.6 a.2.6 a.3.6 a.4.6 a.5.6 a.6.6 a.7.6,
   a.1.7 a.2.7 a.3.7 a.4.7 a.5.7 a.6.7 a.7.7,
   a.1.8 a.2.8 a.3.8 a.4.8 a.5.8 a.6.8 a.7.8

Asterisk = "*"
Keywords =   "* CHAR  CHARS NEXT PRE    PREFIX PREV SUF    SUFFIX WORD"
SpelledOut = "* CHARS CHARS NEXT PREFIX PREFIX PREV SUFFIX SUFFIX WORD"
Parameter. = ""
Parse var SpelledOut,
   Parameter.asterisk Parameter.CHAR Parameter.CHARS Parameter.NEXT,
   Parameter.PRE Parameter.PREFIX Parameter.PREV Parameter.SUF,
   Parameter.SUFFIX Parameter.WORD
Directions = "NEXT PREV"
Qualifiers = "CHARS PREFIX SUFFIX WORD"

Do N = 0 to 255
   Class = d2c(N)
   Select
      When Class == "="
      Then Picture.Class = xrange()
      When Class == "@"
      Then Picture.Class = "abcdefghijklmnopqrstuvwxyz",
                        || "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      When Class == "#"
      Then Picture.Class = "0123456789"
      When Class == "$"
      Then Picture.Class = xrange("41"x,"80"x) || xrange("8A"x,"90"x),
                        || xrange("9A"x,"A1"x) || xrange("AA"x,"C0"x),
                        || xrange("CA"x,"D0"x) || xrange("DA"x,"E1"x),
                        || xrange("EA"x,"EF"x) || xrange("FA"x,"FE"x)
      When Class == "^"
      Then Picture.Class = xrange(,"3F"x) || xrange("41"x)
      When Class == "."
      Then Picture.Class = xrange(,"3F"x) || "FF"x
      When Class == "-"
      Then Picture.Class = xrange(,"EF"x) || xrange("FA"x)
      When Class == "<"
      Then Picture.Class = "abcdefghijklmnopqrstuvwxyz"
      When Class == ">"
      Then Picture.Class = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      When datatype(Class,"Lowercase")
      Then Picture.Class = Class || translate(Class)
      When datatype(Class,"Uppercase")
      Then Picture.Class = Class || translate(Class,,
                                    "abcdefghijklmnopqrstuvwxyz",,
                                    "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
      Otherwise Picture.Class = Class
      End
   End
Alphameric = "$#@abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
             || "0123456789"
Return
