***********************************************************************
*                                                                     *
*                             LKGETT                                  *
*                                                                     *
*        ROUTINE TO CONVERT TOPOLOGICAL DATA STRUCTURE TO A SINGLE    *
*        LINEAR CANONICALIZED CHARACTER STRING SUITABLE FOR TYPEWRITER*
*        OUTPUT.                                                      *
*        THE TOPOLOGICAL DATA STRUCTURE IS RETURNED TO FREE STORAGE.  *
*                                                                     *
***********************************************************************
         SPACE
LKGETT  $ENTER ,
         USING LKPMLIST,R1         TELL ASSEMBLER WHAT CALLER TOLD ME
         L     PCHAR,PMCHLOC       GET LOC. OF CHARACTER STRING
         L     COUNT3,PMELLNG      GET LENGTH OF PRIMARY LINE
         L     COUNT2,LKSIZE       GET SIZE OF FREE LIST
         AR    COUNT2,COUNT3       ADD PRIMARY LINE ELEMENTS
         L     PFOR,PMELFIR        GET LOC. OF FIRST LINK ELEMENT
         USING LINKELEM,PFOR
         SR    MULT,MULT           CLEAR MULTIPLER REGISTER
         MVC   SAVEH0,LINKWID      INIT LAST CHARACTER WIDTH
         B     FORMT2              DON'T CHECK FIRST CHARACTER
         SPACE
FORMT1   DS    0H
         CLC   SAVEH0,LINKWID      SAME CHARACTER WIDTH .Q
         BE    FORMT2              BRANCH IF YES
         MVC   SAVEH0,LINKWID      GET NEW WIDTH
         MVI   SAVEX0,TDEVHMI-TDEVICEA  HORIZONTAL MOTION INDEX
         ST    PCHAR,SAVEF0        WHERE TO PUT IT
         LR    R0,R1               RETAIN INPUT PARM POINTER
         LA    R1,SAVED0           POINT TO PARM AREA
        $CALL  LKGESC              ADD ESCAPE SEQUENCE
         LR    PCHAR,R1            NEXT AVAILABLE COLUMN
         LR    R1,R0               RESTORE INPUT PARM POINTER
         SPACE
FORMT2   DS    0H
         IC    MULT,LINKMULT       GET MULTIPLIER
         ST    MULT,LKMULT         SAVE MULTIPLIER
         IC    R0,LINKCHAR         GET CHARACTER
FORMT3   DS    0H
         STC   R0,0(,PCHAR)        SET CHARACTER
         LA    PCHAR,1(,PCHAR)     ADVANCE CHARACTER POINTER
         BCT   MULT,FORMT3         MULTIPLY CHARACTER
         SPACE
         LR    PDOWN,PFOR          SET POINTER
         DROP  PFOR
         USING LINKELEM,PDOWN
         SPACE
FORMT4   DS    0H
         OC    LINKDOWN,LINKDOWN   ANY MORE DOWN POINTERS .Q
         BZ    FORMT9              BRANCH IF NOT
         L     PDOWN,LINKDOWN      YES, GET POINTER
         LA    COUNT2,1(,COUNT2)   INCREMENT FREE LINK COUNTER
         CLI   LINKCHAR,CESCAPE    ESCAPE CHARACTER .Q
         BE    FORMT7              BRANCH IF YES
         CLI   LINKCHAR,C' '       IS OVERSTRIKE CHARACTER BLANK .Q
         BE    FORMT8              BRANCH AROUND IF YES
         L     MULT,LKMULT         RETRIEVE MULTIPLIER
         IC    R0,LINKCHAR         GET CHARACTER
         SPACE
FORMT5   DS    0H
         MVI   0(PCHAR),CBACKSP    INSERT A BACKSPACE
         LA    PCHAR,1(,PCHAR)     ADVANCE OUTPUT CHAR POINTER
         BCT   MULT,FORMT5         AS OFTEN AS REQUIRED
         L     MULT,LKMULT         RETRIEVE MULTIPLIER AGAIN
FORMT6   DS    0H
         STC   R0,0(,PCHAR)        SET OVERSTRIKE CHARACTER
         LA    PCHAR,1(,PCHAR)     ADVANCE OUTPUT CHAR POINTER
         BCT   MULT,FORMT6         AS OFTEN AS REQUIRED
         B     FORMT8              AND CONTINUE
         SPACE
FORMT7   DS    0H
         MVC   0(1,PCHAR),LINKCHAR ADD ESCAPE CHARACTER
         IC    MULT,LINKMULT       LENGTH OF ESCAPE FUNCTION
         EX    MULT,FORMTMVC       ENTER ESCAPE FUNCTION
         LA    PCHAR,2(MULT,PCHAR) BUMP OUTPUT POINTER
FORMT8   DS    0H
         MVC   LINKFOR,LINKDOWN    SWITCH POINTERS
         B     FORMT4              CHECK FOR MORE DOWN POINTERS
FORMTMVC MVC   1(*-*,PCHAR),LINKESC     ADD ESCAPE FUNCTION
         SPACE
FORMT9   DS    0H
         DROP  PDOWN
         USING LINKELEM,PFOR
         L     R0,LINKFOR          SAVE PRIMARY FORWARD POINTER
         MVC   LINKFOR,LINKDOWN    RELINK PRIMARY
         ST    R0,0(,PDOWN)        AND LINK LAST ELEMENT
         LR    PFOR,R0             ADVANCE ALONG PRIMARY
         BCT   COUNT3,FORMT1       PROCESS NEXT CHARACTER
         DROP  PFOR
         SPACE
         MVC   0(4,PDOWN),LKSTAR   ADD TO FREE LINK LIST
         MVC   LKSTAR,PMELFIR      ...
         ST    COUNT2,LKSIZE       SET FREE LIST LENGTH
         S     PCHAR,PMCHLOC       CALCULATE CHARACTER STRING LENGTH
         ST    PCHAR,PMCHLNG       ...
         XC    PMELLNG,PMELLNG     INDICATE STRING HAS BEEN FREED
         DROP  R1
        $EXIT  RC=0                RETURN TO CALLER
