***********************************************************************
*                                                                     *
*              INTERNAL FUNCTION 'GETNUM'                             *
*                                                                     *
***********************************************************************
         SPACE
*        TO ENTER:   $CALL  GETNUM
*                  SRSWS ON TO IGNORE BLANKS
*                  SRSWS OFF TO RETURN ON FIRST BLANK
*
*        CC=BOMIT IF ARG IS OMITTED           (COUNT=1)
*        CC=BPOS  IF ARG IS POSITIVE OR ZERO  (COUNT=NUMBER)
*                                             (TEMP=LENGTH-1)
*        CC=BNEG  IF ARG IS NEGATIVE          (COUNT=NUMBER)
*                                             (TEMP=LENGTH-1)
*        CC=BDNO  IF ARG IS NOT NUMERIC       (COUNT=START ADDR)
*                                             (TEMP=ERROR#)
         SPACE
*
*  INITIALIZE
*
GETNUM  $ENTER ,
         XC    TERMSWK(TERMSLEN),TERMSWK     ZERO TERMS WORK AREA
         MVC   TERMSWIT,SWITCHS    SAVE CALLER'S SWITCHS
        $OFF   SWITCHS,SRSWS       FORGET CALLED BY .SR
         L     X2,ARGSTART         START OF SCAN AREA
         L     R1,ARGSTOP          END OF THE LINE
         LA    R0,1                BXLE INCREMENT
         CLR   X2,R1               ALREADY AT THE END .Q
         BH    GEXPDN              BRANCH IF YES
GEXPLP   DS    0H
         CLI   0(X2),C' '          SKIP LEADING BLANKS
         BNE   GEXPDN              BRANCH IF DONE
         BXLE  X2,R0,GEXPLP        GO TILL EXAUSTED
GEXPDN   DS    0H
         ST    X2,FTXPPT           SAVE FIRST BYTE POINTER
         ST    X2,ERRSTART         IN CASE OF ERROR
         BAL   RETURN,GEXPSW       CONVERT TO INTERNAL FORMAT
         LA    COUNT,1             FOR OMITTED EXPRESSION
         BC    BOMIT,SETRET        RETURN NOW IF NO ARGUMENT
         MVI   NUMSIGN,C' '        CLEAR UNARY OPERATOR
         CLI   0(X2),IPLUS         UNARY PLUS .Q
         BE    GEXPUN              BRANCH IF YES
         CLI   0(X2),IMINUS        UNARY MINUS .Q
         BNE   GEXPSET             BRANCH IF NOT
GEXPUN   DS    0H
         MVC   NUMSIGN,0(X2)       MOVE INTERNAL SIGN
         LA    X3,TRSLTB           POINT TO TRANSLATE TABLE
         TR    NUMSIGN,0(X3)       CONVERT TO EXTERNAL FORMAT
GEXPSET  DS    0H
         LA    COUNT,NTRMS         GET ADDRESS OF NTRMS
         LA    X1,TERMS            GET ADDRESS OF TERMS
         LA    R15,OPRNS           GET ADDRESS OF OPRNS
         LA    TEMP,RLIST          GET ADDRESS OF RLIST
*
*  SCAN OF THE EXPRESSION FOR TERMS OR OPERATORS
*
LOOK     DS    0H
         C     X2,ARGSTOP          AT END OF STRING TO SCAN .Q
         BH    BLCOM01             BRANCH IF YES
         MVC   WRKCHAR,0(X2)       MOVE IN NEXT CHAR
         LA    X3,TRSLTB           POINT TO TRANSLATE TABLE
         TR    WRKCHAR,0(X3)       TRANSLATE TO EXTERNAL
         CLC   WRKCHAR,PSYMBOL     WORKING PAGE SYMBOL .Q
         BE    LOOK01              BRANCH IF YES
         CLC   WRKCHAR,PSYMBOL+1   DEFAULT PAGE SYMBOL .Q
         BE    LOOK01              BRANCH IF YES
         CLC   WRKCHAR,PSYMBOL+2   ALTERNATE PAGE SYMBOL .Q
         BNE   LOOK02              BRANCH IF NOT
LOOK01   DS    0H
         L     X3,PACNTI           GET INTEGER PAGE NUMBER
         ST    X3,0(,X1)           VALUE TO TERMS LIST
         LA    R0,1                MAX LENGTH OF PAGE SYM
         LR    R1,R0               AND ACTUAL LENGTH OF PAGE SYM
         AR    X2,R1               BUMP COLUMN POINTER
         B     ABSD                VERIFY AND CHECK
         SPACE
LOOK02   DS    0H
         CLI   0(X2),IALPHA        IS CHAR ALPHANUMERIC .Q
         BH    NOTAM               BRANCH IF NOT
         ST    X2,ERRSTART         SAVE POINTER TO FIRST BYTE OF TERM
         CLI   0(X2),IA            IS CHAR A NUMBER .Q
         BL    DEC
         CLI   1(X2),IQUOTE        IS NEXT CHAR A QUOTE .Q
         BE    NEXTQ
         B     ERR9                ILLEGAL CHARACTER
*
*  DECIMAL SELF-DEFINING VALUE IN THE EXPRESSION
*
DEC      DS    0H
         LA    R0,3                DECIMAL TYPE INDICATOR
         BAL   RETURN,SDVCF        TO SELF-DEFINING VALUE ROUTINE
         LA    R0,8                MAX NUMBER OF HEX DIGITS
         ST    X3,0(,X1)           VALUE TO TERMS LIST
         LA    R0,10               MAX NO OF DIGITS
         B     ABSD                GO AND CHECK RESULT
*
*  1ST CHARACTER IS ALPHABETIC AND 2ND IS A QUOTE
*
NEXTQ    DS    0H
         CLI   0(X2),IB            BINARY SELF-DEFINING VALUE .Q
         BE    BINRY
         CLI   0(X2),IC            CHARACTER SELF-DEFINING VALUE .Q
         BE    CHARS
         CLI   0(X2),IX            HEXADECIMAL SELF-DEFINING VALUE .Q
         BE    HEX
         B     ERR9                ILLEGAL CHARACTER
*
*  BINARY SELF-DEFINING VALUE IN THE EXPRESSION
*
BINRY    DS    0H
         LA    X2,2(,X2)           POINT TO FIRST CHARACTER
         LA    R0,1                BINARY TYPE INDICATOR
         BAL   RETURN,SDVCF        TO SELF-DEFINING VALUE ROUTINE
         LA    R0,32               MAX NUM OF BITS
         B     LM
*
*  CHARACTER SELF-DEFINING VALUE IN THE EXPRESSION
*
CHARS    DS    0H
         LA    X2,2(,X2)           POINT TO FIRST CHARACTER
         LA    R0,8                CHARACTER TYPE INDICATOR
         BAL   RETURN,SDVCF        TO SELF-DEFINING VALUE ROUTINE
         LA    R0,4                MAX NO OF CHARACTERS
         ST    X3,0(,X1)           VALUE TO TERMS LIST
         LA    X3,TRSLTB           POINTER TO TRANSLATE TABLE
         TR    0(4,X1),0(X3)       TRANSLATE TO EXTERNAL VALUE
         B     CKQ
*
*  HEXADECIMAL SELF-DEFINING VALUE IN THE EXPRESSION
*
HEX      DS    0H
         LA    X2,2(,X2)           POINT TO FIRST CHARACTER
         LA    R0,4                HEXADECIMAL TYPE INDICATOR
         BAL   RETURN,SDVCF        TO SELF-DEFINING VALUE ROUTINE
         LA    R0,8                MAX NO OF HEX DIGITS
LM       DS    0H
         ST    X3,0(,X1)           VALUE TO TERMS LIST
CKQ      DS    0H
         CLI   0(X2),IQUOTE        IS ENDING CHAR A QUOTE .Q
         BNE   ERR9
         LA    X2,1(,X2)           POINT TO CHARACTER AFTER QUOTE
         LTR   R1,R1               IS CNTR ZERO
         BZ    ERR9
ABSD     DS    0H
         CLR   R1,R0               IS ACTUAL LENGTH GT MAXIMUM .Q
         BH    ERR0
         CLI   COND,CONDA          IS COND UNCHANGED .Q
         BH    ABSCK
         B     COMPT4              THIS IS ABSOLUTE TERM
ABSCK    DS    0H
         CLI   COND,CONDE          TWO TERMS IN A ROW .Q
         BNL   ERR10               ERROR IF YES
COMPT4   DS    0H
         MVI   COND,CONDE          SET ABSOLUTE TERM
COMPT    DS    0H
         LA    R0,TERMS            START OF TERMS LIST
         LR    R1,X1               THIS IS WHERE WE'RE AT
         SR    R1,R0               THIS IS THE DIFFERENCE
         CH    R1,CTTERMC          TOO MANY TERMS .Q
         BH    ERR2                BRANCH IF YES
         MVI   0(COUNT),X'02'      2 TO NTRMS LIST
         LA    COUNT,1(,COUNT)     BUMP NTRMS COUNT BY ONE
         LA    X1,4(,X1)           BUMP BY FOUR (FOR TERMS)
         LA    TEMP,2(,TEMP)       BUMP RLIST POINTER BY TWO
         B     LOOK
*
*  1ST CHARACTER IS NOT ALPHANUMERIC
*
NOTAM    DS    0H
         CLI   0(X2),ICOMMA        IS CHARACTER AN OPERATOR .Q
         BL    LTCOM               BRANCH IF YES
         CLI   0(X2),ILPARN        IS CHARACTER LEFT PAREN .Q
         BE    LPAR                BRANCH IF YES
         CLI   0(X2),IRPARN        IS CHARACTER RIGHT PAREN .Q
         BE    RPAR                BRANCH IF YES
         CLI   0(X2),IBLANK        IS CHARACTER BLANK .Q
         BE    BLCOM               BRANCH IF YES
         B     ERR9                ALL ELSE IS ILLEGAL FIRST CHAR
*
*  RIGHT PARENTHESIS IN THE EXPRESSION
*
RPAR     DS    0H
         CLI   COND,CONDE          DOES RIGHT PAREN FOLLOW TERM .Q
         BL    ERR12               ERROR IF NOT
         MVI   COND,CONDE          SET RIGHT PAREN COND
         CLI   PCNTR,0             IS PCNTR =0
         BH    NOEND               NO, CONTINUE SCANNING
         B     ERR9                YES, UNBALANCED PAREN
*
*  1ST CHARACTER IS EITHER +,-,*, OR /.
*
LTCOM    DS    0H
         CLI   0(X2),IASTER        IS CHARACTER AN ASTERISK .Q
         BE    STAR
         BH    SLASH
*
*  + OR - IN THE EXPRESSION
*
PLMIN    DS    0H
         CLI   COND,CONDE          WAS LAST ENTRY A TERM .Q
         BNL   PLMIN3              BRANCH IF YES
         CLI   COND,CONDA          1ST OPERATOR/TERM .Q
         BE    COMPT4              ENTER ZERO OPERAND IF YES
         MVI   COND,CONDC          UNARY OPERATOR
PLMIN2   DS    0H
         LA    R0,IALPHA-2         BUMP OPERATOR BY TWO
         B     SET1                AND ENTER SAME
PLMIN3   DS    0H
         MVI   COND,CONDB          BINARY + OR -
SET      DS    0H
         LA    R0,IALPHA
SET1     DS    0H
         IC    R1,0(,X2)
         SR    R1,R0
         STC   R1,NEWOP            HIERARCHY CODE TO NEWOP
*
*  MAIN LOOP TO PERFORM ARITHMETIC
*
LOOP     DS    0H
         LA    R1,OPRNS            POINT TO FIRST OPERATOR ENTRY
         CR    R15,R1              ARE THERE PREVIOUS OPERATORS .Q
         BH    ONZ
         CLI   ENDOE,0             IS ENDOE=0
         BH    FINIS
PUT      DS    0H
         MVC   0(1,R15),NEWOP      NEWOP TO OPRNS LIST
BUMPY    DS    0H
         LA    R15,1(,R15)         BUMP R15 BY 1 (FOR OPRNS)
BUMPR    DS    0H
         LA    X2,1(,X2)           BUMP BY ONE FOR NON-ALFNUM
         B     LOOK
ONZ      DS    0H
         BCTR  R15,0               POINT R15 TO PREVIOUS OPERATOR
         CLC   0(1,R15),NEWOP      IS NEW HIERARCHY LT-EQ PREVIOUS
         BNL   LE
         CLI   NEWOP,OPSLASH       TEST NEW OP /
         BNE   STEPUP              NO
         CLI   0(R15),OPSTAR       TEST PREV OP *
         BE    WORK                YES, DO * FIRST
STEPUP   DS    0H
         LA    R15,1(,R15)         ADD 1 BACK TO R15
         B     PUT
LE       DS    0H
         CLI   NEWOP,OPUMINUS      IS THIS UNARY - .Q
         BE    STEPUP              JUST ENTER IT IF YES
         CLI   NEWOP,OPUPLUS       IS THIS UNARY + .Q
         BE    STEPUP              JUST ENTER IF YES
         CLI   0(R15),OPEND        IS OLD HIERARCHY ZERO .Q
         BH    WORK
         IC    R1,PCNTR            SUBTRACT 1 FROM PCNTR
         BCTR  R1,0
         STC   R1,PCNTR
         B     BUMPR
*
*  LEFT PARENTHESIS IN THE EXPRESSION
*
LPAR     DS    0H
         CLI   COND,CONDE          WAS A TERM LAST ENTRY .Q
         BNL   LPEND               POSSIBLE END OF EXP IF YES
         MVI   COND,CONDB          SET LEFT PAREN COND
         SR    R1,R1               ZERO WORK REGISTER
         IC    R1,PCNTR            GET CURRENT LEVEL OF PARENS
         CH    R1,CTPARENC         ARE THERE TOO MANY LEFT PARENS
         BH    ERR1                ERROR IF TOO MANY
         LA    R1,1(,R1)           INCREMENT LEVEL OF PARENS
         STC   R1,PCNTR
         MVI   0(R15),0            ZERO TO OPRNS LIST
         B     BUMPY
*
*  ASTERISK IN THE EXPRESSION
*
STAR     DS    0H
         CLI   COND,CONDE          DOES A TERM PRECEDE .Q
         BL    ERR12               ERROR IF NOT
*
*  ASTERISK IS MULTIPLICATION OPERATOR
*
FORD1    DS    0H
         MVI   COND,CONDD          SET MULT/DIV COND
         B     PLMIN2              GO ADJUST OPERATION
*
*  SLASH IN THE EXPRESSION
*
SLASH    DS    0H
         CLI   COND,CONDE          DOES A TERM PRECEDE .Q
         BL    ERR12               ERROR IF NOT
         B     FORD1               ENTER THE SLASH
*
*  BLANK IN THE EXPRESSION
*
BLCOM    DS    0H
        $IFOFF TERMSWIT,SRSWS,BLCOM01   BRANCH IF BLANKS SIGNIFICANT
         LA    X2,1(,X2)           POINT TO NEXT CHARACTER
         B     LOOK                AND TRY AGAIN
BLCOM01  DS    0H
         CLI   COND,CONDE          TERM PRECEDE BLANK .Q
         BL    ERR17               ERROR IF NOT
*
*  LEFT PARENTHESIS END CONDITION
*
LPEND    DS    0H
         CLI   PCNTR,0             IS PCNTR =0
         BH    ERR17
ENDNG    DS    0H
         MVI   ENDOE,15            SET ENDOE NON-ZERO
NOEND    DS    0H
         MVI   NEWOP,OPEND         SET NEWOP ZERO
         B     LOOP
*
*  PERFORM ARITHMETIC WORK
*
WORK     DS    0H
         ST    TEMP,NCOMP          STORE RLIST POINTER IN NCOMP
         LA    R0,8                POINT TO FIRST OF THE TWO
         SR    X1,R0               TERMS ENTRIES
         LA    R0,2                POINT TO FIRST OF THE TWO
         SR    COUNT,R0            NTRMS ENTRIES
         IC    R0,1(,COUNT)        2ND NTRMS  ENTRY TO R0
         SR    TEMP,R0             SUBTRACT 2ND NTERMS ENTRY
         SR    R1,R1               ZERO A WORK REGISTER
         IC    R1,0(,R15)          GET OPERATOR FUNCTION
         AR    R1,R1               DOUBLE IT
         LH    R1,OPBRANCH(R1)     GET INDEX BRANCH VALUE
         B     GETNUM(R1)          THE APPROPRIATE ROUTINE
OPBRANCH DC    H'1'                ZERO ERROR
         DC    AL2(OPPLS-GETNUM)   BINARY PLUS
         DC    AL2(OPMINS-GETNUM)  BINARY MINUS
         DC    AL2(OPUPLS-GETNUM)  UNARY PLUS
         DC    AL2(OPUMINS-GETNUM) UNARY MINUS
         DC    AL2(MULDV-GETNUM)   MULTIPLICATION
         DC    AL2(MULDV-GETNUM)   DIVISION
*
*  OPERATOR IS SUBTRACTION.  COMPLEMENT 2ND VALUE AND CHANGE THE
*  RELOCATION SIGN BYTE OF THE TERMS IN THE 2ND VALUE.
*
OPUMINS  DS    0H
         CLI   0(TEMP),OPPLUS      IS SIGN BYTE + .Q
         BL    NOCHGU              BRANCH IF ABSOLUTE
         BE    PLCHGU              BRANCH IF SIGN +
         MVI   0(TEMP),OPPLUS      CHANGE - SIGN TO +
         B     NOCHGU              AND CONTINUE
PLCHGU   DS    0H
         MVI   0(TEMP),OPMINUS     CHANGE + SIGN TO -
NOCHGU   DS    0H
         L     R1,4(,X1)           GET CURRENT VALUE
         LCR   R1,R1               COMPLEMENT 2ND TERMS LIST ENTRY
OPUSET   DS    0H
         LA    X1,4(,X1)           BUMP OPND POINTER
         L     TEMP,NCOMP          RESTORE RLIST POINTER
         LA    COUNT,1(,COUNT)     UNARY HAS BUT ONE TERM
         B     STORE               AND CONTINUE
OPUPLS   DS    0H
         L     R1,4(,X1)           GET CURRENT VALUE
         B     OPUSET              AND REENTER IT
*
OPMINS   DS    0H
         L     R1,4(,X1)           GET 2ND TERMS LIST ENTRY
         LCR   R1,R1               COMPLEMENT 2ND TERMS LIST ENTRY
         ST    R1,4(,X1)
CHG      DS    0H
         CLI   0(TEMP),OPPLUS      TEST SIGN BYTE IN 2ND RLIST
         BL    NOCHG               BRANCH IF ABS. VALUE
         BE    PLCHG               BRANCH IF SIGN +
         MVI   0(TEMP),OPPLUS      CHANGE SIGN TO +
         B     NOCHG
PLCHG    DS    0H
         MVI   0(TEMP),OPMINUS     CHANGE SIGN TO -
NOCHG    DS    0H
         LA    TEMP,2(,TEMP)       POINT TO NEXT RLIST ENTRY
         CL    TEMP,NCOMP
         BL    CHG                 BRANCH BACK IF MORE ENTRIES
         SR    TEMP,R0             SUBTRACT 2ND NTERMS ENTRY
*
*  OPERATION IS ADDITION OR SUBTRACTION.  SCRATCH ENTRIES IN THE
*  RELOCATION LIST WHERE POSSIBLE.
*
OPPLS    DS    0H
         IC    R0,0(,COUNT)        FIRST NTRMS ENTRY TO R0
         LR    R1,TEMP             POINT R1 TO 2ND NTRMS LIST
         SR    TEMP,R0             POINT TO 1ST NTERMS LIST
         LR    X3,R1               SAVE R1
BCOMP    DS    0H
         CLI   0(TEMP),OPPLUS      IS FIRST SIGN + .Q
         BL    NSCR                BRANCH IF ABS. VALUE (CODE =0)
         BH    F2MIN               BRANCH IF FIRST SIGN -
         CLI   0(R1),OPMINUS       IS SECOND SIGN -
         BL    NSCR                BRANCH IF SIGN NOT -
OPP      DS    0H
         MVI   0(TEMP),X'00'       ZERO TO FIRST SIGN
         MVI   0(R1),0             ZERO TO SECOND SIGN
         B     NSCR
F2MIN    DS    0H
         CLI   0(R1),OPPLUS        IS SECOND SIGN +
         BE    OPP
NSCR     DS    0H
         LA    R1,2(,R1)           POINT R1 TO NEXT IN 2ND RLIST
         CL    R1,NCOMP
         BL    BCOMP               BRANCH BACK IF MORE IN 2ND LIST
         LA    TEMP,2(,TEMP)       POINT TO NEXT IN 1ST LIST
         LR    R1,X3               START OF 2ND LIST BACK TO R1
         CLR   R1,TEMP
         BH    BCOMP               BRANCH BACK IF MORE IN 1ST LIST
         L     TEMP,NCOMP          RESTORE RLIST POINTER
         LCR   R1,R1               COMPLEMENT R1
         AR    R1,TEMP             2ND NTRMS ENTRY TO R1
         IC    R0,0(,COUNT)        1ST NTRMS ENTRY TO R0
         AR    R1,R0               ADD THE 2 NTRMS ENTRIES
         STC   R1,0(,COUNT)        SUM TO POSITION OF THE 1ST
*
*  PERFORM ADDITION
*
         L     R1,0(,X1)           1ST TERMS LIST ENTRY TO R1
         A     R1,4(,X1)           ADD 2ND ENTRY
         BO    ERR13               -DUMMY-APPROP. OVERFLOW ROUTINE TO S
STORE    DS    0H
         ST    R1,0(,X1)           RESULT TO 1ST TERMS LIST ENTRY
         LA    X1,4(,X1)           BUMP BY FOUR (FOR TERMS LIST)
         LA    COUNT,1(,COUNT)     BUMP NTRMS COUNT BY ONE
         B     LOOP
*
*  OPERATOR IS MULTIPLICATION OR DIVISION.
*
MULDV    DS    0H
         SR    R1,R1               CLEAR R1
         IC    R1,0(,COUNT)        1ST NTERMS ENTRY TO R1
         AR    R0,R1               ADD THE 2 NTRMS ENTRIES
         STC   R0,0(,COUNT)        SUM TO 1ST ENTRY LOCATION
         SR    TEMP,R1             SUBTRACT 1ST NTRMS ENTRY
         LA    R0,2                2 TO R0
         L     R1,NCOMP
         SR    R1,R0               C(NCOMP)-2 TO R1
MORE     DS    0H
         CLI   0(TEMP),X'00'
         BH    *+4                 JUST FOR NOW
         BXLE  TEMP,R0,MORE
         SR    R1,R1               ZERO R1
         C     R1,4(,X1)
         BE    STORE               BRANCH IF 2ND TERMS ENTRY =0
         L     R0,0(,X1)           1ST TERMS ENTRY TO R0
         SRDA  R0,32               PROPAGATE SIGN BIT
         CLI   0(R15),OPSTAR       IS OPERATOR * OR /
         BH    DIV                 BRANCH IF /
*
*  PERFORM MULTIPLICATION
*
         M     R0,4(,X1)           MULTIPLY BY 2ND TERMS ENTRY
         LTR   R1,R1
         BNL   CHK0                BRANCH IF LOW-ORDER NON-NEG
         LCR   R0,R0               COMPLEMENT HIGH-ORDER
         BCTR  R0,0                SUBTRACT 1 FROM THE COMPLEMENT
CHK0     DS    0H
         LTR   R0,R0
         BC    7,ERR13             ERROR  IF HIGH-ORDER NOW NOT=0
         B     STORE
*
*  PERFORM DIVISION
*
DIV      DS    0H
         D     R0,4(,X1)           DIVIDE 1ST BY 2ND TERMS ENTRY
         B     STORE
*
*  END OF EXPRESSION FOUND
*
FINIS    DS    0H
         LR    TEMP,X2             TRANSFER SCANNING ADDRESS
         ST    TEMP,ARGSTART       SCAN NEXT TIME FROM HERE
         S     TEMP,FTXPPT         LESS STARTING ADDRESS
         BCTR  TEMP,0              LENGTH-1 OF SCANNED STRING
         BAL   RETURN,GEXPSW       CONVERT TO EXTERNAL FORMAT
         L     COUNT,TERMS         RESTORE FINAL RESULT
         LTR   COUNT,COUNT         TEST RESULTING VALUE OF EXPRESSION
         BNZ   FINIS01             BRANCH NOT ZERO
        $CC    POS                 ZERO IS POSITIVE
FINIS01  DS    0H
         B     SETRET              RETURN TO CALLER
         EJECT
*
*  ERROR FOUND
*
* TABLE OF ERROR CODES USED IN GETNUM
SELFDEF  EQU   4                   SELF-DEF. VALUE TOO LARGE
ARITHER  EQU   8                   ARITHMETIC ERROR-OVERFLOW
ILORDER  EQU   12                  TWO TERMS NOT SEPARATE
ILLCHAR  EQU   16                  ILLEGAL CHARACTER
MNYERR   EQU   20                  EXP. CONTAINS MORE THAN CTTERMC TRMS
OPERR    EQU   24                  TWO OPERATORS ILLEGALLY COUPLED
PARERR   EQU   28                  TOO MANY LEVELS OF PARENS
ENDERR   EQU   32                  EXP. END PREMATURE-UNPAIRED PAREN
         SPACE
*
*  ERROR IS SELF-DEFINING VALUE TOO LARGE
*
ERR0     DS    0H
         LA    COUNT,SELFDEF       SELF-DEF. VALUE TOO LARGE
         B     FATLER              BRANCH TO ERROR EXIT
*
*  TOO MANY LEVELS OF PARENTHESES
*
ERR1     DS    0H
         LA    COUNT,PARERR        TOO MANY LEVELS OF PARENS
         B     FATLER
*
*  TOO MANY TERMS IN EXPRESSION
*
ERR2     DS    0H
         LA    COUNT,MNYERR        TOO MANY TERMS IN EXPRESSION
         B     FATLER              GO TO ERROR EXIT
*
*  ERROR IS ARITHMETIC
*
ERR13    DS    0H
         LA    COUNT,ARITHER       ARITHMETIC ERROR
         B     FATLER              BRANCH TO ERROR EXIT
*
*ERROR IS ILLEGAL CHARACTER
*
ERR9     DS    0H
         LA    COUNT,ILLCHAR       ILLEGAL CHARACTER
         B     FATLER              BRANCH TO ERROR EXIT
*
* ERROR IS TWO CONSECUTIVE OPERATORS
*
ERR12    DS    0H
         LA    COUNT,OPERR         ILLEGAL ORDER OF OPERATORS
         B     FATLER              BRANCH TO ERROR EXIT
*
*ERROR IS ILLEGAL END OF EXPRESSION OR UNPAIRED PARENS
*
ERR17    DS    0H
         LA    COUNT,ENDERR        EXPRESSION END PREMATURE
         B     FATLER              BRANCH TO ERROR EXIT
*
* ERROR IS TWO CONSECUTIVE TERMS
*
ERR10    DS    0H
         LA    COUNT,ILORDER       ILLEGAL ORDER OF TERMS
         B     FATLER              BRANCH TO ERROR EXIT
*
FATLER   DS    0H
         ST    X2,ARGSTART         WE GOT THIS FAR IN STRING
         BAL   RETURN,GEXPSW       CONVERT TO EXTERNAL FORMAT
         LR    TEMP,COUNT          SET ERROR NUMBER
         L     COUNT,FTXPPT        RESET SCAN START ADDR
        $CC    DNO                 SET ERROR RETURN CODE
SETRET   DS    0H
        $RESTOR KEEP=(TEMP,COUNT)  RESTORE CALLER'S REGS
         BR    RETURN              RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*              GEXPSW --- INTERNAL TEXT TO EXTERNAL AND VICE-VERSA    *
*                                                                     *
***********************************************************************
         SPACE
GEXPSW   DS    0H
        $SAVE  ,                   SAVE CALLER'S REGISTERS
         L     R1,ARGSTOP          EXPRESSION END
         S     R1,FTXPPT           LESS EXPRESSION START
         BM    GEXPSW01            BRANCH IF EMPTY
         L     X2,FTXPPT           EXPRESSION START
         LA    X3,TRSLTB           POINTER TO TRANSLATE TABLE
         EX    R1,GEXPTR           REVERSE CODES
        $CC    POS                 SUCCESS
         B     GEXPSW02            GO TO RETURN
GEXPTR   TR    0(*-*,X2),0(X3)     TRANSLATE INPUT STRING
GEXPSW01 DS    0H
        $CC    OMIT                NO ARGUMENT
GEXPSW02 DS    0H
        $RESTOR ,                  RESTORE CALLER'S REGS
         BR    RETURN              RETURN TO CALLER
         SPACE
***********************************************************************
* CONVERT SELF-DEFINING VALUES - FENDALL                              *
* ENTER WITH REGISTER X2 POINTING TO 1ST CHARACTER OF CONSTANT.       *
* LOAD REGISTER X1 WITH CONSTANT TYPE INDICATOR -                     *
*        1 = BINARY                                                   *
*        3 = DECIMAL                                                  *
*        4 = HEX                                                      *
*        8 = CHARACTER                                                *
* BRANCH WITH RETURN REGISTER RETURN.                                 *
* RETURNS WITH CONVERTED VALUE IN REGISTER X3, RIGHT JUSTIFIED,       *
* SIGNIFICANT CHARACTER COUNT IN REGISTER R1, X2 AT FIRST             *
* NON-CONSTANT CHARACTER.                                             *
* LEADING BITS MAY BE LOST IF VALUE TOO LARGE.                        *
***********************************************************************
         SPACE
SDVCF    DS    0H
        $SAVE  ,                   SAVE CALLER'S REGISTERS
         LR    X1,R0               CONVERT TYPE
         STC   X1,SDV08+1          STORE SHIFT
         SR    X3,X3               CLEAR RETURN VALUE
         LR    R0,X3               CLEAR R0
         LR    R1,X3               CLEAR COUNT
         CLI   SDV08+1,8           TEST FOR C-CONSTANT
         BNE   SDV01               NO
         L     X3,SDV09            YES, LOAD EXTERNAL ZEROS
SDV01    DS    0H
         LA    R15,SDV08-1(X1)     TEST CHAR RANGE
         C     X2,ARGSTOP          AT END OF STRING TO SCAN .Q
         BH    SDV07               RETURN IF YES
         CLC   0(1,X2),0(R15)
         BH    SDV07               EXIT ON TOO HIGH
         IC    R0,0(,X2)
         LR    R15,X3              SAVE CUMULATIVE VALUE
         CLI   SDV08+1,8           TEST FOR C-CONSTANT
         BNE   SDV04               NO, TO SHIFT
         CLI   0(X2),IQUOTE        TEST '
         BNE   SDV04               NO
         CLI   1(X2),IQUOTE        TEST ''
         BE    SDV03               YES, TO SKIP
         B     SDV07               NO, EXIT
SDV03    DS    0H
         LA    X2,1(,X2)           SKIP ' OR +
SDV04    DS    0H
         CLI   SDV08+1,3           TEST FOR DECIMAL CONSTANT
         BNE   SDV05               BRANCH IF NOT
         SLA   X3,0(X1)            OLD VALUE TIMES EIGHT
         BO    SDVOFLO             ERROR IF OVERFLOW
         AR    R15,R15             TWICE OLD VALUE
         BO    SDVOFLO             BRANCH IF OVERFLOW
         AR    X3,R15              TEN TIMES OLD VALUE
         BO    SDVOFLO             BRANCH IF OVERFLOW
         AR    X3,R0               PLUS NEXT DIGIT
         BNO   SDV06               BRANCH IF NO OVERFLOW
SDVOFLO  DS    0H
         LA    R1,10               TOO MANY DECIMAL DIGITS
         B     SDV06               AND CONTINUE
SDV05    DS    0H
         SLL   X3,0(X1)            SHIFT OLD VALUE
         ALR   X3,R0               ADD CHAR TO VALUE
SDV06    DS    0H
         LA    R1,1(,R1)           STEP COUNT
         LA    X2,1(,X2)           STEP COLUMN POINTER
         B     SDV01               TO NEXT CHAR
SDV07    DS    0H
        $RESTOR KEEP=(R1,X2,X3)    RESTORE CALLER'S REGISTERS
         BR    RETURN              RETURN TO CALLER
         SPACE 2
SDV08    DC    X'0100090F000000FF' LIMITS
TERMSWIT DC    XL10'00'            WORK WITH SWITCHS
SDV09    DC    0F'0',C'0000'       EBCDIC ZEROES
CTTERMC  DC    0H'0',AL2(24*4)     4*(MAX-1) NUMBER OF TERMS
CTPARENC DC    0H'0',AL2(10)       MAX-1 NUMBER OF PARENS
FTXPPT   DS    F                   SAV AREA FOR PTR TO 1ST BYTE
WRKCHAR  DC    C' '                EXTERNAL FORMAT WORK CHARACTER
         SPACE 2
TERMSWK  DS    0D                  TERMS WORK AREA START
TERMS    DS    25F                 LIST OF VALUES
RLIST    DS    25H                 RELOCATABILITY LIST
PCNTR    DS    C                   COUNTER OF LEVEL OF '('
NTRMS    DS    25C                 NUMBER OF TERMS PER TERMS ENTRY
OPRNS    DS    40C                 LIST OF OPERATIONS
COND     DS    C                   VALIDITY INDICATOR
ENDOE    DS    C                   END EXPRESSION FLAG
NEWOP    DS    C                   LATEST OPERATION FOUND
TERMSLEN EQU   *-TERMS             LENGTH OF TERMS WORK AREA
         SPACE
NCOMP    DC    F'0'                SAVE RLIST POINTER
         SPACE 2
*                                       *******************************
*                                       * TRANSLATE TABLE             *
*                                       *******************************
*        THE TRANSLATE TABLE PERMITS TRANSLATION FROM EXTERNAL CODE TO
*        INTERNAL CODE AND VICE VERSA. THE POSITION CORRESPONDING TO
*        THE EXTERNAL CODE FOR A SYMBOL CONTAINS ITS INTERNAL CODE,
*        AND THE POSITION CORRESPONDING TO ITS INTERNAL CODE CONTAINS
*        ITS EXTERNAL CODE.
*        EXAMPLE- THE EXTERNAL CODE FOR 'A' IS HEX C1 (DECIMAL 193),
*        AND THE INTERNAL CODE IS HEX 0A (DECIMAL 10). THE 193-D TABLE
*        ENTRY IS HEX 0A, AND THE 10-TH TABLE ENTRY IS HEX C1
*        TABLE STARTS WITH THE 0-TH ENTRY
*
         DC    0D'0'               ALIGN TRANSLATE TABLE
TRSLTB   DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'
         DC    X'C7C8C9D1D2D3D4D5D6D7D8D9E2E3E4E5'
         DC    X'E6E7E8E95B7B7C4E605C616B7E504B4D'
         DC    X'5D7D40333435363738393A3B3C3D3E3F'
         DC    X'324142434445464748494A2E4C2F274F'
         DC    X'2D5152535455565758595A2429305E5F'
         DC    X'282A62636465666768696A2B6C6D6E6F'
         DC    X'707172737475767778797A2526312C7F'
         DC    X'808182838485868788898A8B8C8D8E8F'
         DC    X'909192939495969798999A9B9C9D9E9F'
         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    X'C00A0B0C0D0E0F101112CACBCCCDCECF'
         DC    X'D0131415161718191A1BDADBDCDDDEDF'
         DC    X'E0E11C1D1E1F20212223EAEBECEDEEEF'
         DC    X'00010203040506070809FAFBFCFDFEFF'
         EJECT
******** INTERNAL CHARACTER CODES *************************************
IZERO    EQU   X'00'               NUMBERS
I1       EQU   X'01'
I2       EQU   X'02'
I3       EQU   X'03'
I4       EQU   X'04'
I5       EQU   X'05'
I6       EQU   X'06'
I7       EQU   X'07'
I8       EQU   X'08'
I9       EQU   X'09'
IA       EQU   X'0A'               LETTERS
IB       EQU   X'0B'
IC       EQU   X'0C'
ID       EQU   X'0D'
IE       EQU   X'0E'
IF       EQU   X'0F'
IG       EQU   X'10'
IH       EQU   X'11'
II       EQU   X'12'
IJ       EQU   X'13'
IK       EQU   X'14'
IL       EQU   X'15'
IM       EQU   X'16'
IN       EQU   X'17'
IO       EQU   X'18'
IP       EQU   X'19'
IQ       EQU   X'1A'
IR       EQU   X'1B'
IS       EQU   X'1C'
IT       EQU   X'1D'
IU       EQU   X'1E'
IV       EQU   X'1F'
IW       EQU   X'20'
IX       EQU   X'21'
IY       EQU   X'22'
IZ       EQU   X'23'
IDOLLR   EQU   X'24'               EXTRA LETTERS
IPOUND   EQU   X'25'
IAT      EQU   X'26'
IPLUS    EQU   X'27'               SPECIAL CHARACTERS
IMINUS   EQU   X'28'
IMULT    EQU   X'29'
IASTER   EQU   X'29'
IDIVID   EQU   X'2A'
ICOMMA   EQU   X'2B'
IEQUAL   EQU   X'2C'
IAMPSD   EQU   X'2D'
IPRIOD   EQU   X'2E'
ILPARN   EQU   X'2F'
IRPARN   EQU   X'30'
IQUOTE   EQU   X'31'
IBLANK   EQU   X'32'
IALPHA   EQU   IAT                 LAST ALPHA CHARACTER
******** END INTERNAL CHARACTER CODES *********************************
         EJECT
***********************************************************************
*         *PREVIOUS*                                                  *
*  CHAR   *  COND  *     ACTION                                       *
***********************************************************************
* START   *   --   * SET COND = 0                                     *
***********************************************************************
*  (      *0/1/2/3 * SET COND = 1                                     *
*         *4       * IF PCNTR GT CTTERMC, LOG 'PARERR'                *
***********************************************************************
*  )      *0/1/2/3 * LOG 'OPERR'                                      *
*         *4       * SET COND = 4, IF PCNTR=0 END EXPRESSION          *
***********************************************************************
*  +-     *0       * SET INITIAL ZERO TERM                            *
*         *1/2/3   * SET COND = 2                                     *
*         *4       * SET COND = 1                                     *
***********************************************************************
*  *      *0/1/2/3 * LOG 'OPERR'                                      *
*         *4       * SET COND = 3                                     *
***********************************************************************
*  /      *0/1/2/3 * LOG 'OPERR'                                      *
*         *4       * SET COND =3                                      *
***********************************************************************
*ABSOLUTE *0/1/2/3 * SET COND = 4                                     *
*TERM     *4       * LOG 'OPERR'                                      *
***********************************************************************
* OR BLANK*0/1/2/3 * LOG 'ENDERR'                                     *
*         *4       * IF PCNTR GT 0, LOG 'ENDERR'                      *
***********************************************************************
         SPACE
CONDA    EQU   0                   INITIAL COND SETTING
CONDB    EQU   1                   LEFT PAREN, BINARY + OR -
CONDC    EQU   2                   UNARY + OR -
CONDD    EQU   3                   ASTERISK OR SLASH
CONDE    EQU   4                   ABSOLUTE TERM OR RIGHT PAREN
*
*        HEIRARCHY CODES FOR OPRNS
OPEND    EQU   0                   BLANK OR COMMA
OPPLUS   EQU   1                   BINARY PLUS
OPMINUS  EQU   2                   BINARY MINUS
OPUPLUS  EQU   3                   UNARY PLUS
OPUMINUS EQU   4                   UNARY MINUS
OPSTAR   EQU   5                   MULTIPLICATION
OPSLASH  EQU   6                   DIVISION
