***********************************************************************
*                                                                     *
*              INTERNAL FUNCTION 'IXDUMP' -- PRINT INDEX              *
*                                                                     *
***********************************************************************
         SPACE
*        TO ENTER  --   LA    R1,INDEX ANCHOR POINTER
*                      $CALL  IXDUMP
         SPACE
IXDUMP  $ENTER ,
         LR    X3,R1               RETAIN INDEX ANCHOR POINTER
         L     R1,0(,X3)           GET INDEX ANCHOR POINTER
         LTR   R1,R1               ANYTHING QUEUED .Q
         BZ    IXD01               RETURN IMMEDIATELY IF NOT
         SPACE
         MVC   APIMMIN,F1          DEFAULT MIN RECORD NUMBER
         MVC   APIMMAX,F16MEG      DEFAULT MAX RECORD NUMBER
         MVC   APIMGOTO,BLANKS     CLEAR GOTO TARGET
         MVC   APIMMEMB,BLANKS     BLANK MEMBER NAME
         MVC   APIMNAME,IXDNAME    DUMMY REMOTE NAME
         XC    APIMFLAG,APIMFLAG   CLEAR FLAGS
        $ON    APIMFLAG,(IO$RM,IO$INRM) THE WAY IT IS
        $ON    APIMFLAG,IO$UEOF    AND THE WAY THAT I WANT IT
        $CALL  RMFIND              GET REMOTE INSERTION POINT
         LA    R1,RMQLEN           REMOTE QUEUE ELEMENT LENGTH
        $CALL  GETCELL             GET A WORK AREA
         BC    BNEG,IXDE018        BRANCH IF FAILED
         USING RMQD,TEMP           RETURNED AREA
         XC    RMQD(RMQLEN),RMQD   CLEAR THE AREA
         L     R1,VSCRICVT         COMMUNICATION VECTOR ADDRESS
         L     R1,VIXDRM-SCRICVT(,R1)   EXIT ADDRESS
         ST    R1,RMQEXIT          ENTER REMOTE READ EXIT
         MVC   RMQCHN,RMQCHN-RMQD(X1)   NEXT POINTER
         ST    TEMP,RMQCHN-RMQD(X1)     LAST POINTER
         MVI   RMQFLAG,RMQKEEP     FLAG ATTRIBUTES
         MVC   RMQCNT,F1           CALL COUNT
         MVC   RMQNAME,APIMNAME    REMOTE IDENTIFIER
         MVC   RMQAD,0(X3)         SAVE DATA ANCHOR POINTER
         XC    0(4,X3),0(X3)       CLEAR SYSTEM ANCHOR
         DROP  TEMP
         SPACE
         SR    R1,R1               ZERO CALL PARM REGISTER
         BCTR  R1,0                AND MAKE IT NEGATIVE
        $CALL  RMIMBED             ENTER DUMMY REMOTE ONTO READER STACK
         B     IXD01               AND GO TO RETURN
         SPACE
IXDE018  DS    0H
         MVI   EFLAG018,ERRSET     NO CORE FOR DUMMY REMOTE
         SPACE
IXD01    DS    0H
        $EXIT  RC=0                AND RETURN TO CALLER
         SPACE
IXDNAME  DC    CL8'SYSIX'          DUMMY REMOTE NAME
         EJECT
***********************************************************************
*                                                                     *
*              INTERNAL ROUTINE 'IXDRM' -- IX REMOTE READ ROUTINE     *
*                                                                     *
***********************************************************************
         SPACE
IXDRM   $ENTER ,                   DUMMY REMOTE READ EXIT
         LR    X3,R1               ENTRY POINTER TRANSFER
         USING FILBLOCK,X3         AND TELL THE ASSEMBLER
         L     R15,BUFF3AD         WORK AREA
         USING RMQR,R15            USED THIS WAY FOR RETURN
         XC    RMQRCHN,RMQRCHN     CLEAR CHAIN
         MVC   RMQRDATA(B2LG-2),BLANKS CLEAR DATA
         LA    R0,B2LG-2           MAXIMUM LENGTH
         STH   R0,RMQRLEN          SET ITS LENGTH
         L     X1,FILIXAD          GET ENTRY DATA ADDRESS
         LA    X1,0(,X1)           CLEAR CHARACTER
         LTR   X1,X1               ANY ENTRY TO PROCESS .Q
         BNZ   IXD110              BRANCH IF YES
         LA    X1,FILH3AD          THIRD LEVEL POINTER
         BAL   RETURN,IXD010       TRY IT
         LA    X1,FILH2AD          SECOND LEVEL POINTER
         BAL   RETURN,IXD010       TRY IT
         LA    X1,FILH1AD          FIRST LEVEL POINTER
         LA    RETURN,IXD998       END OF FILE POINTER
         SPACE
IXD010   DS    0H
         L     X2,0(,X1)           ENTRY POINTER
         LA    X2,0(,X2)           CLEAR HIGH BYTE
         LTR   X2,X2               ANY PRESENT .Q
         BZR   RETURN              BRANCH BACK IF NOT
         USING IXHBLK,X2           TELL THE ASSEMBLER OF WHAT WE'VE GOT
         LA    COUNT,FILH1AD       LEVEL ONE POINTER
         SR    COUNT,X1            LESS WHAT WE'RE DOING NOW
         LCR   COUNT,COUNT         POSITIVE OFFSET
         BNZ   IXD020              BRANCH IF NOT LEVEL ONE
         IC    TEMP,IXHBTXTU       FIRST UPPER CHARACTER
         EX    TEMP,IXDCLI         COMPARE WITH LAST
         BE    IXD020              BRANCH IF EQUAL
         STC   TEMP,FILIXALF       SET LAST CHAR
         MVC   RMQRDATA(1),PERIND  CONTROL WORD INDICATOR
         MVC   RMQRDATA+1(2),IXDSI      SIGNAL CONTROL WORD
         MVC   RMQRDATA+4(L'IXDNAME0),IXDNAME0  LEVEL ZERO REMOTE NAME
         MVC   RMQRDATA+L'IXDNAME0+6(1),FILIXALF  ADD ONE ARGUMENT
         CLI   FILIXALF,C''''      IS CHARACTER A SINGLE QUOTE .Q
         BNE   IXD014              BRANCH IF NOT
         MVI   RMQRDATA+L'IXDNAME0+5,C'"'    ENTER DOUBLE QUOTE BEFORE
         MVI   RMQRDATA+L'IXDNAME0+7,C'"'    AND AFTER
         B     IXD016              AND CONTINUE
IXD014   DS    0H
         MVI   RMQRDATA+L'IXDNAME0+5,C''''   ENTER SINGLE QUOTE BEFORE
         MVI   RMQRDATA+L'IXDNAME0+7,C''''   AND AFTER
IXD016   DS    0H
         LA    R0,RMQRDATA+4       START OF REMOTE NAME
         ST    R0,ARGSTART         SET START ADDR
         LA    R0,RMQRDATA+L'IXDNAME0+7 END OF ARG HERE
         ST    R0,ARGSTOP          SET END ADDR
        $CALL  SITST               IS THERE SUCH A REMOTE .Q
         L     R15,BUFF3AD         RESTORE WORK BUFFER ADDRESS
         BC    15-BOMIT,IXD018     BRANCH IF NOT
         B     IXD997              ELSE RETURN THE SIGNAL
IXD018   DS    0H
         MVC   RMQRDATA(B2LG-2),BLANKS  CLEAR DATA AGAIN
IXD020   DS    0H
         CLI   0(X1),X'FF'         HAS INTER LEVEL SIGNAL BEEN DONE .Q
         BE    IXD024              BRANCH IF YES
         MVI   0(X1),X'FF'         MARK IT DONE NOW
         LA    TEMP,RMQRDATA       POINT TO START OF WORK AREA
         MVC   0(1,TEMP),PERIND    CONTROL WORD INDICATOR
         MVC   1(2,TEMP),IXDSI     ENTER SIGNAL CONTROL WORD
         LA    TEMP,4(,TEMP)       NEXT FREE SLOT
         ST    TEMP,ARGSTART       SET START ADDRESS
         LA    R1,0(COUNT,COUNT)   DOUBLE CALL LEVEL
         LA    R1,IXDNAME1(R1)     POINT TO APPROPRIATE SIGNAL NAME
         MVC   0(L'IXDNAME1,TEMP),0(R1) LEVEL 'N' REMOTE NAME
         LA    TEMP,L'IXDNAME1(,TEMP)   NEXT FREE SLOT
         ST    TEMP,ARGSTOP        SET END ADDRESS
         SR    R1,R1               ZERO WORK REG
         IC    R1,IXHBTXTL         GET LENGTH-1 OF LEVEL OPERAND
         LA    R1,1(,R1)           GET ACTUAL LENGTH
         CVD   R1,DECM             CONVERT TO DECIMAL
         OI    DECM+7,X'0F'        AND FIX THE SIGN
         UNPK  1(3,TEMP),DECM+6(2) ENTER LENGTH OF INDEX LEVEL
         LA    TEMP,4(,TEMP)       POINT PAST FIRST ARGUMENT
        $CALL  SITST               IS THERE SUCH A REMOTE .Q
         L     R15,BUFF3AD         RESTORE WORK BUFFER ADDR
         BC    15-BOMIT,IXD022     BRANCH IF NOT
         B     IXD997              ELSE RETURN SIGNAL
IXD022   DS    0H
         MVC   RMQRDATA(B2LG-2),BLANKS  CLEAR DATA AGAIN
IXD024   DS    0H
         L     TEMP,IXHBNEXT       NEXT POINTER ACROSS
         ST    TEMP,0(,X1)         SAVE AWAY FOR THE FUTURE
         L     R1,IXHBLOWR         NEXT LOWER POINTER
         LA    R0,FILH3AD          LAST ENTRY
         CR    X1,R0               IS THAT WHAT WE'RE DOING .Q
         BE    IXD026              BRANCH IF YES
         ST    R1,4(,X1)           PROCESS THIS NEXT TIME
IXD026   DS    0H
         SR    TEMP,TEMP           PREPARE LENGTH REGISTER
         IC    TEMP,IXHBTXTL       LENGTH-1 OF STRING
         LA    R1,IXHBTXTU+1(TEMP) POINT TO ORIGINAL STRING
         L     X1,IXHBENTA         REFERENCE DATA POINTER
         LA    X1,0(,X1)           CLEAR HIGH BYTE
         LA    R0,IXHBLK           WHERE IS BLOCK TO FREE
         DROP  X2
         LA    X2,RMQRDATA         RESULTING TARGET
         EX    TEMP,IXDMVC1        MOVE ORIGINAL STRING TO AREA
         LA    X2,RMQRDATA+1(TEMP) POINT TO LAST CHAR+1
         LA    R1,IXHBLKL+2(TEMP,TEMP)  LENGTH OF SAME
        $CALL  FREECELL            FREE UP THE BLOCK
         L     R15,BUFF3AD         RESTORE RMQR POINTER
         LTR   X1,X1               ANY REFERENCE DATA PRESENT .Q
         BZ    IXD997              BRANCH TO SIMPLE RETURN IF NOT
         SPACE
         USING IXEBLK,X1           INDEX ENTRY DATA
         SR    COUNT,COUNT         PREPARE FOR LENGTH
         IC    COUNT,IXEBTXTL      GET LENGTH OF ENTRY TEXT
         MVC   0(L'IXDREF,X2),IXDREF    ENTER REFERENCE SEPARATOR STRNG
         LA    X2,L'IXDREF(,X2)    BUMP OUTPUT POINTER
         BCTR  COUNT,0             GET LENGTH-1
         EX    COUNT,IXDMVC2       MOVE ENTRY DATA
         L     TEMP,IXEBNEXT       NEXT ENTRY POINTER
         LA    R0,IXEBLK           WHERE TO FREE
         LA    R1,IXEBLKL          HOW MUCH TO FREE
        $CALL  FREECELL            AND FREE THE BLOCK
         L     R15,BUFF3AD         RESTORE RMQR POINTER
         LTR   TEMP,TEMP           ANY MORE ENTRY DATA
         BNZ   IXD030              BRANCH IF YES
         LA    X2,0(COUNT,X2)      LAST CHAR+1
         BCTR  X2,0                BACKUP ONE
         MVI   0(X2),C' '          TRAILING BLANK
IXD030   DS    0H
         IC    R0,FILIXAD          SAVE HIGH BYTE
         ST    TEMP,FILIXAD        SET NEXT ENTRY ADDRESS
         STC   R0,FILIXAD          RESTORE HIGH BYTE
         B     IXD997              AND RETURN THE DATA
         SPACE
IXD110   DS    0H
         LA    X2,RMQRDATA         POINT TO TARGET
         SR    COUNT,COUNT         TEXT LENGTH REG
         IC    COUNT,IXEBTXTL      LENGTH OF ENTRY
         BCTR  COUNT,0             LENGTH-1
         EX    COUNT,IXDMVC3       ENTER THE DATA
         L     TEMP,IXEBNEXT       NEXT ENTRY DATA
         LA    R0,IXEBLK           WHERE TO FREE
         LA    R1,IXEBLKL          HOW MUCH TO FREE
        $CALL  FREECELL            AND FREE THE AREA
         L     R15,BUFF3AD         RESTORE RMQR POINTER
         LTR   TEMP,TEMP           ANY MORE ENTRY BLOCKS .Q
         BNZ   IXD120              BRANCH IF NOT
         BCTR  COUNT,0             DECREMENT LENGTH
         LA    X2,0(COUNT,X2)      POINT TO LAST CHAR
         MVI   0(X2),C' '          CHANGE COMMA TO BLANK
IXD120   DS    0H
         IC    R0,FILIXAD          SAVE HIGH BYTE
         ST    TEMP,FILIXAD        SAVE NEXT ENTRY POINTER
         STC   R0,FILIXAD          RESTORE HIGH BYTE
         SPACE
IXD997   DS    0H
         LA    R1,RMQR             POINT TO RESULT
         B     IXD999              AND GO TO RETURN
IXD998   DS    0H
         SR    R1,R1               NO RETURN POINTER FOR EOF
IXD999   DS    0H
        $RESTOR KEEP=(R1)          RESTORE CALLER'S REGS
         BR    RETURN              AND RETURN TO CALLER
         SPACE
IXDCLI   CLI   FILIXALF,*-*        COMPARE LAST ALPHA
IXDMVC1  MVC   0(*-*,X2),0(R1)     MOVE ENTRY LEVEL
IXDMVC2  MVC   0(*-*,X2),IXEBTXT   MOVE ENTRY DATA
IXDMVC3  MVC   0(*-*,X2),IXEBTXT   MOVE MORE ENTRY DATA
         SPACE
IXDSI    DC    C'SI'               SIGNAL CONTROL WORD
IXDNAME0 DC    CL8'SYSIX0'         LEVEL ZERO ALPHA CHANGE
IXDNAME1 DC    CL8'SYSIX1'         LEVEL ONE CHANGE
IXDNAME2 DC    CL8'SYSIX2'         LEVEL TWO CHANGE
IXDNAME3 DC    CL8'SYSIX3'         LEVEL THREE CHANGE
IXDREF   DC    C'&&SYSIXREF.'      LEVEL/REFERENCE SEPARATOR STRING
         SPACE
         DROP  X1
         DROP  X3
         DROP  R15
