LOGT     TITLE 'DCMSLOGT   PRINT LOG TASK PROCESSOR'
DCMSLOGT DCMSTART RENT,LV=DCMSLEN
*
*
*              D C M S   P R I N T   L O G   T A S K
*
*
*        THIS TASK HANDLES THE ALLOCATION, OPEN, WRITE, AND CLOSE
*        FUNCTIONS ASSOCIATED WITH THE PRINTING OF SCREEN IMAGES
*        IT FUNCTIONS BY PERFORMING THE TASKS IDENTIFIED BY WORK
*        ELEMENTS THAT HAVE BEEN QUEUED TO IT WHEN IT WAKES UP.
*        IT WILL GO TO SLEEP ONLY WHEN THE WORK QUEUE IS EMPTY.
         SPACE 8
*
*  INPUT PARAMETERS
*        C(R1)+0  ->  2 WORD AREA TO SAVE THE ADDRESS OF STACK HEAD
*                       AND WORK-TO-DO ECB
*        C(R1)+4  ->  ECB TO BE POSTED WHEN INITIALIZATION IS COMPLETE
*        C(R1)+8  ->  ECB THAT WHEN POSTED WE MUST TERMINATE.
*
         EJECT
         L     R1,PARMADDR         GET ADDR OF PARMS
         MVC   ECBLST(4),8(R1)     SET ADDR OF TERM ECB
         LM    R1,R2,0(R1)         GET REST OF PARMS
         LA    R15,STACKHD         POINT TO STACK HEAD
         ST    R15,0(R1)           SAVE ADDR OF STACK HEAD
         LA    R15,WORKECB         GET ADDR OF ECB
         ST    R15,4(R1)           SAVE ADDR
         ST    R15,ECBLST+4        SAVE IN WAIT LIST
         MVI   ECBLST+4,X'80'      SET END OF LIST
         XC    STACKHD,STACKHD
         XC    WORKECB,WORKECB     CLEAR AREAS
         XC    DCBCHAIN,DCBCHAIN   CLEAR CHAIN
         MVI   TIMELINE,C' '
         MVC   TIMELINE+1(79),TIMELINE  BLANK OUT AREA
         POST  (R2)                TELL CONTROLLER WE ARE READY
         EJECT
*
*        M A I N   L O O P
*
         USING TDCB,R7
         USING LOGDCBLK,R8
         USING LOGELEM,R9
MAINLP   CLC   STACKHD,=F'0'       ARE WE EMPTY
         BNE   WORKTODO            IF NOT THEN WORK TO DO
         WAIT  ECBLIST=ECBLST
         L     R1,ECBLST           LOOK AT TERM ECB
         TM    0(R1),X'40'         WAS IT SET
         BO    SHUTDOWN            IF SO THEN SHUT DOWN LOG FUNCTION
         SPACE 5
WORKTODO XC    WORKECB,WORKECB     CLEAR THE ECB
*
*        NOW DO A FANCY DEQUE TO PROCESS IN FIFO
*
         SR    R2,R2
         L     R9,STACKHD          POINT AT FIRST
DEQUE1   CLC   LOGELINK,=F'0'      MORE THAN ONE ELEM
         BNE   DEQUE2              IF SO THEN GO TO END OF CHAIN
         CS    R9,R2,STACKHD       IF ONLY ONE TRY TO DEQUE
         BNE   DEQUE1              TRY AGAIN
         B     PROCESWK            GO AND PROCESS IT
DEQUE2   LR    R2,R9               SET PREVIOUS ADDR
         L     R9,LOGELINK         LINK TO NEXT
         CLC   LOGELINK,=F'0'      IS THIS THE END OF CHAIN
         BNE   DEQUE2              IF NOT KEEP GOING
         MVC   LOGELINK-LOGELEM(,R2),=F'0'  SET NEW END
*
*        NOW FIND WHAT TYPE OF WORK TO DO
*
PROCESWK DS    0H
         L     R1,LOGEFUNC         GET FUNCTION CODE
         C     R1,=A(LOGEOPEN)     IS IT ALLOC AND OPEN
         BE    LOGTOPN
         C     R1,=A(LOGEPUT)      IS IT PUT
         BE    LOGTPUT
         C     R1,=A(LOGECLOS)     IS IT CLOSE
         BE    LOGTCLOS
         B     MAINLP         *******WRONG FUNCTION CODE
         EJECT
*
*        ALLOCATE AND OPEN THE PRINT DATASET
*
LOGTOPN  DS    0H
         GETMAIN R,LV=LOGDLEN      GET A DCB ELEMENT
         LR    R8,R1               SET BASE REGISTER
         MVC   LOGDCBLK(LOGDLEN),LOGINIT   PREFORMAT IT
         LA    R1,LOGECLS          SET UP PARMS FOR ALLOC
         ST    R1,CLASADDR
         L     R7,LOGETDCB         POINT AT TDCB
         LA    R1,LOGEDEST         SET UP PARMS FOR ALLOC
         ST    R1,DESTPARM
         MVC   DESTPARM+4(2),=H'8'
*        ALLOC SYSOUT=CLASADDR,
*              DEST=DESTPARM,
*              DDNRET=DDHAHA,
*              FREE=CLOSE,MF=AUTO
*
*        FOLLOWING CODE FROM EXPANSION OF ALLOC MACRO FROM
*        VTOC COMMAND ON MODS TAPE
*
         LA    R1,DYNSP1           LOAD ADDR OF PARAM LIST
         USING DYN1DS,R1           USE GENERATED DSECT
         LA    R15,DYN1RB          LOAD ADDRESS OF S99 RB
         USING S99RB,R15
         ST    R15,0(R1)           AND STORE IN RB POINTER
         XC    4(DYN1LEN-4,R1),4(R1)  ZERO PARAMETER LIST
         MVI   S99RBLN,20          MOVE IN LIST LENGTH
         MVI   S99VERB,S99VRBAL    MOVE IN VERB CODE
         LA    R14,DYN1TUP             LOAD ADDRESS OF TU POINTERS
         ST    R14,S99TXTPP            STORE ADDRESS IN S99 RB
         LA    R15,DYN1TU              POINT TO SPACE FOR TEXT UNITS
         USING S99TUNIT,R15
         SPACE 1
**       SYSOUT CLASS TEXT UNIT
         L     R14,CLASADDR            LOAD ADDRESS OF SYSOUT CLASS
         MVC   S99TUPAR(1),0(R14)       AND MOVE IT TO TEXT UNIT
         MVI   S99TUKEY+1,DALSYSOU     SET SYSOUT KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVI   S99TULNG+1,1            SET LENGTH FIELD
         ST    R15,DYN1TUP+0           STORE TEXT UNIT ADDRESS
         LA    R15,8(R15)              BUMP TEXT UNIT PTR TO NEXT SLOT
         SPACE 1
**       FREE = CLOSE TEXT UNIT
         MVI   S99TUKEY+1,DALCLOSE     MOVE IN TEXT UNIT KEY
         ST    R15,DYN1TUP+4           STORE TEXT UNIT ADDR
         LA    R15,4(R15)              BUMP TEXT UNIT PTR TO NEXT SLOT
         SPACE 1
**       SYSOUT DESTINATION TEXT UNIT
         LR    R0,R2                   SAVE CONTENTS OF REG 2
         LH    R2,DESTPARM+4           LOAD LENGTH OF TEXT UNIT
         LTR   R2,R2                   TEST FOR ZERO
         BZ    *+30                    IF NO TEXT UNIT ,SKIP
         L     R14,DESTPARM            LOAD ADDR OF TEXT UNIT
         STH   R2,S99TULNG             STORE LENGTH OF TEXT UNIT
         BCTR  R2,0                    DECREMENT FOR EXECUTE
         EX    R2,DYN1MVC              MOVE IN TEXT UNIT
         MVI   S99TUKEY+1,DALSUSER     MOVE IN TEXT UNIT KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         ST    R15,DYN1TUP+8           STORE TEXTUNIT ADDRESS
         LA    R15,14(R15)             BUMP TEXT UNIT PTR TO NEXT SLOT
         SPACE 1
**       DDNAME RETURN TEXT UNIT
         MVI   S99TUKEY+1,DALRTDDN     SET RETURN DDNAME KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVI   S99TULNG+1,8            SET LENGTH FIELD
         MVC   S99TUPAR(8),=CL8' '     INITIALIZE FIELD TO BLANKS
         ST    R15,DYN1TUP+12          STORE TEXT UNIT ADDRESS
         LA    R15,14(R15)             BUMP TEXT UNIT PTR TO NEXT SLOT
         SPACE 1
**       UNALLOC AT CLOSE TEXT UNIT
         MVI   S99TUPAR+1,DALCLOSE     MOVE IN CLOSE TEXT UNIT KEY
         ST    R15,DYN1TUP+16          STORE TEXT UNIT ADDRESS
         LA    R15,4(R15)              BUMP TEXT UNIT PTR TO NEXT SLOT
         SPACE 1
         MVI   DYN1TUP+16,X'80'        SET HIGH ORDER BIT ON TEXT PTRS
         MVI   DYN1RBP,X'80'           SET HIGH ORDER BIT ON RB PTR
         B     *+10                    SKIP NEXT INSTRUCTION
DYN1MVC  MVC   S99TUPAR(0),0(R14)      EXECUTED MOVE
         LR    R2,R0                   RETSORE CONTENTS OF REGISTER 2
         DROP  R1,R15                  DEACTIVATE ADDRESSABILITY
         LA    R14,4(R1)               POINT TO REQUEST BLOCK
         DYNALLOC
         USING DYN1RB,R14              SET UP ADDRESSABILITY
**       NOTE R14 HAS RB ADDRESS, R15 HAS SVC 99 RETURN CODE
         SPACE 1
DYN1DS   DSECT DSECT TO MAP SVC 99 DATA
DYN1RBP  DS    F                       SVC 99 REQ BLOCK POINTER
DYN1RB   DS    5F                      SVC 99 REQUEST BLOCK
DYN1TUP  DS    CL20                    SPACE FOR TEXT POINTERS
DYN1TU   DS    CL44                    SAPCE FOR TEXT UNITS
DDHAHA   EQU   DYN1TU+30               OFFSET TO RETURNED DDNAME
DYN1LEN  EQU   *-DYN1RBP               LENGTH OF SPACE USED
DCMSLOGT CSECT
         SPACE 5
         LTR   R15,R15             ANY ERROR
         BNZ   LOGTOPEX            IF ANY THEN EXIT
         LA    R2,LOGDDCB          POINT TO DCB
         MVC   DCBDDNAM-IHADCB(8,R2),DDHAHA+2  MOVE IN DDNAME
         MVC   TDCBLDDN(8),DDHAHA+2            SAVE FOR DISPLAY
         OPEN  ((R2),(OUTPUT)),MF=(E,LOGDOPEN)
         TM    LOGDDCB+DCBOFLGS-IHADCB,X'10' DID IT OPEN OK
         BZ    LOGTOPEX            IF NOT THE IGNORE
         ST    R8,TDCBLGDC         SET POINTER TO DCB SEGEMENT
         MVC   LOGDCHN,DCBCHAIN    CHAIN ELEMENT ON
         ST    R8,DCBCHAIN         SET NEW HEAD OF CHAIN
LOGTOPEX L     R2,LOGELEN          GET LENGTH OF ELEMENT
         MVI   TDCBLGDC,0          CLEAR TOP BYTE
         FREEMAIN R,LV=(R2),A=(R9)
         B     MAINLP              ALL DONE
LOGINIT  LOGDCBLK DSECT=NO
         EJECT
*
*        CLOSE THE FILE AND CLEAN UP
*
LOGTCLOS DS    0H
         L     R7,LOGETDCB         POINT TO TDCB
         L     R8,TDCBLGDC         POINT TO LOG DCB SEGMENT
         LA    R8,0(R8)            CLEAR TOP BYTE
         LTR   R8,R8               IS THERE A SEGEMENT
         BZ    LOGTCLEX            IF NOT THEN EXIT
         LA    R2,LOGDDCB
         CLOSE ((R2),DISP),MF=(E,LOGDOPEN)
         XC    TDCBLGDC,TDCBLGDC  CLEAR FIELD
         LA    R1,DCBCHAIN-(LOGDCHN-LOGDCBLK)  POINT AT FIRST
LGTCL1   C     R8,LOGDCHN-LOGDCBLK(R1)   FIND THE CURRENT ONE
         BE    LGTCL2              YES SO DECHAIN
         ICM   R1,15,LOGDCHN-LOGDCBLK(R1)   GO TO NEXT ONE
         BZ    LGTCL3              IF NO MORE THEN EXIT
         B     LGTCL1              TRY NEXT ONE
LGTCL2   MVC   LOGDCHN-LOGDCBLK(4,R1),LOGDCHN  RECHAIN
LGTCL3   DS    0H
         FREEMAIN R,LV=LOGDLEN,A=(R8)
LOGTCLEX L     R2,LOGELEN          GET LENGTH OF WORK ELEM
         FREEMAIN R,LV=(R2),A=(R9)
         B     MAINLP              ALL DONE SO GO BACK
         EJECT
*
*        WRITE A SCREEN OUT
*
LOGTPUT  DS    0H
         L     R7,LOGETDCB         POINT TO TDCB
         L     R8,TDCBLGDC         POINT TO LOG DCB
         LTR   R8,R8               IS THERE A DCB
         BZ    LOGTPTEX            IF NOT THEN EXIT
         LA    R2,24               GET NUMBER OF LINES
         LA    R3,LOGESCRN         GET ADDR OF START OF LINES
         LA    R4,LOGDDCB          POINT TO DCB
         XI    LOGDFLG,LOGDPG      FLIP PAGE EJECT FLAG
         BZ    LOGTPT1             BRANCH IF IN MIDDLE
         PUT   (R4),PAGEDASH       OUTPUT EJECT
         B     LOGTPT2             CONTINUE
LOGTPT1  PUT   (R4),SPACDASH
LOGTPT2  DS    0H
         MVI   0(R3),C' '          PUT IN CC OF BLANK
         PUT   (R4),(R3)           OUTPUT A LINE
         LA    R3,80(R3)           GO TO NEST
         BCT   R2,LOGTPT2
         PUT   (R4),DASH
         MVC   TIMELINE+44(23),LOGETIME+1 SET TIMESTAMP
         MVC   TIMELINE+72(8),LOGENAME  SET NAME
         PUT   (R4),TIMELINE
LOGTPTEX L     R2,LOGELEN          GET LENGTH OF ELEMENT
         FREEMAIN R,LV=(R2),A=(R9)
         B     MAINLP
         EJECT
*
*        C O N S T A N T S
*
PAGEDASH DC    C'1',79C'-'
SPACDASH DC    C'-',79C'-'
DASH     DC    C' ',79C'-'
         EJECT
*
*        SHUTDOWN PROCESSOR
*
SHUTDOWN DS    0H
         L     R8,DCBCHAIN         POINT AT CHAIN OF OPEN ONES
SHDW1    LTR   R8,R8               TEST FOR END OF CHAIN
         BZ    LOGTEXIT            IF SO THEN EXIT
         LA    R2,LOGDDCB          POINT AT DCB
         CLOSE ((R2),DISP),MF=(E,LOGDOPEN)
         L     R8,LOGDCHN          GO TO NEXT ONE
         B     SHDW1               GO AND DO IT
         EJECT
LOGTEXIT DCMSTOP SERV=NO
DCMSWORK DSECT
DCBCHAIN DS    A                   HEAD OF LOGD ELEMENTS
STACKHD  DS    F                   HEAD OF WORK ELEM STACK
WORKECB  DS    F                   WORK-TO-DO ECB
ECBLST   DS    2F                  WAIT LIST
CLASADDR DS    F                   PARM LIST FOR ALLOC
DESTPARM DS    F,H                 PARM LIST FOR ALLOC
TIMELINE DS    CL80
*        DYNSPACE ,                SPACE FOR THE ALLOC MACRO
*
**       RESERVE SPACE FOR ALLOC/FREE MACRO WORK AREA
*
DYNSP1   DS    0F,CL88                 RESERVE SPACE
DCMSLEN  EQU   *-DCMSWORK
         EJECT
*
*        D S E C T S
*
         LOGELEM SCREEN=YES
         LOGDCBLK
         TDCB
         DCBD
         IEFZB4D0
         IEFZB4D2
         END
