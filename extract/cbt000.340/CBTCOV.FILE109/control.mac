CONTROL  TITLE 'DCMS SYSTEM TASK CONTROL MODULE'
US1NG    OPSYN USING
USING    OPSYN
DR0P     OPSYN DROP
DROP     OPSYN
         PUNCH ' ALIAS DCMS      '
         PUNCH ' ALIAS IEDQTCAM  '
         PUNCH ' ALIAS DCMSTSO   '
         DCMSREGS
         EJECT
CONTROL  CSECT ,
         USING *,R15
         SAVE  (14,12),,*
         LA    R12,SAVE                NEW SAVE AREA
         ST    R13,SAVE+4              NEW POINTS TO OLD
         ST    R12,8(R13)              OLD POINTS TO NEW
         LR    R13,R12                 NEW SAVE AREA POINTER
         LR    R11,R15                 MAIN BASE REG
         AR    R10,R10
         AR    R10,R11
         DROP  R15
         USING CONTROL,R11
         USING CONTROL+4096,R10
         ST    R1,PARMADDR
         EJECT
*D C M S D A T A     A R E A
         GETMAIN R,SP=4,LV=DCDALEN
         ST    R1,VECTOR
         ST    R1,DCDASAVE
         LR    R12,R1
         USING DCDA,R12
         LA    R1,DCDAYSD
         ST    R1,DCDASTAT
         LA    R1,DCDAYLG
         ST    R1,DCDALOGO
         L     R1,PARMADDR
         ST    R1,DCDAPARM
         LA    R1,100           D E F A U L T   INTERVAL
         ST    R1,DCDAINTV
         LA    R1,10            D E F A U L T   SAMPLE
         ST    R1,DCDASAMP
         MVC   DCDAFLAG(4),DFLTFLAG
         XC    DCDASLOG,DCDASLOG
*
*
*        SYSTEM LOGO SCREEN INIT
*
*
         LOAD EP=DSF1LOGO
         LR   R2,R0
         LM    R15,R1,0(R2)
         L     R14,DCDALOGO
         MVCL  R14,R0
         DELETE EP=DSF1LOGO
*
*
*        SERVICE ROUTINE DYNAMIC ACCESS INIT
*
*
         LOAD EP=####TERM
         ST   R0,DCDALOAD
         ST   R0,####SAVE
*
*
*        SYSTEM CONFIGURATION DATA INIT
*
*
         L     R3,16
         USING CVT,R3
         LA    R1,8
         LR    R2,R3
         SR    R2,R1
         MVC   HEXWORK1(4),0(R2)
         L     R15,=A(@HEX)
         BALR  R14,R15
         MVC   DCDASYS(4),HEXWORK2+4
         MVI   DCDAVERS,C'R'
         MVI   DCDAVERS+1,C' '
         MVI   DCDAVERS+2,C' '
         MVC   DCDAVERS+3(2),4(R2)
         MVC   DCDAVERS+6(2),6(R2)
         MVI   DCDAVERS+5,C'.'
         L     R2,CVTJESCT
         USING JESCT,R2
         MVC   DCDAJES(4),JESPJESN
         DROP  R2
         L     R2,CVTSMCA
         MVC   DCDASMCA(4),016(R2)
*
*
*
PCCAT00P EQU   0
PCCAT01P EQU   4
PCCAPCCA EQU   0
PCCACPID EQU   4
PCCACPUA EQU   16
PCCACPFM EQU   18
*
*
*
         MVC   DCDACPU0(24),BLANKS
         L     R2,CVTPCCAT
         L     R1,PCCAT00P(R2)
         LTR   R1,R1
         BZ    SKIPCPU
         MVC   DCDACPU0(12),PCCACPID(R1)
*        COPY CPU 0 SERIAL
         L     R1,PCCAT01P(R2)
         LTR   R1,R1
         BZ    SKIPCPU
         MVC   DCDACPU1(12),PCCACPID(R1)
*        COPY CPU 1 SERIAL
SKIPCPU  EQU  *
         DROP  R3
*
         MVC   DCDADCDA,=CL4'DCDA'
*
*
         EJECT
*
* SEE IF THE USER SPECIFIED THE 'NOUADS' PARM..
*
         L      R1,PARMADDR
         L      R1,0(,R1)          ADDRESS THE PARM FIELD
         LH     R2,0(,R1)          SEE IF SPECIFIED
         LTR    R2,R2              WELL ??
         BZ     NOPARM
         BCTR   R2,0               REDUCE FOR EXECUTE.
         LA     R3,NOUADS
         EX     R2,PARMCLC         SEE IF SAME
         BNE    NOPARM             NO.. IGNORE
         XC     VUADS,VUADS
         OI     PARMFLAG,PARMNUAD  OTHERWISE USE UADS
NOPARM   EQU    *
         INUSE
* PREVENT 522 ABENDS BY SETTING OFF A TIMER EVERY 1 MINUTE
         STIMER REAL,TIMEEXIT,BINTVL=TIMEVAL
         SPACE 5
*______________________________________________________________________
*
* SET UP FOR MODIFY/STOP COMMANDS  SET UP SYSUADS
*
*----------------------------------------------------------------------
         SPACE 2
         EXTRACT CECBADDR,FIELDS=COMM  GET COMM ECB AND CIB POINTERS
         L     R3,CECBADDR             ADDR OF COMM ECB POINTER
         ICM   R2,15,4(R1)             GET FIRST CIB ADDRESS
         BZ    NOCIB                   SKIP IF THERE ISNT ONE
         QEDIT ORIGIN=4(R3),BLOCK=(R2)  FREE INITIAL CIB
NOCIB    EXTRACT CECBADDR,FIELDS=COMM
         QEDIT ORIGIN=4(R3),CIBCTR=5    ALLOW FIVE CIBS
         SPACE 2
*----------------------------------------------------------------------
* OPEN SYSUADS FOR SUBTASKS TO ENJOY
* IF THE  USER  SPECIFIED NO UADS  CHECKING THEN DON'T ATTEMPT  IT..
*----------------------------------------------------------------------
         TM    PARMFLAG,PARMNUAD       SEE IF NO UADS IS SPECIFIED
         BO    NOC0                    GO AHEAD
         LA    R1,SYSUADS          SET POINTER TO DCB            BFG001
         ST    R1,VUADS              IN VECTOR TABLE             BFG001
         OPEN  (SYSUADS,INPUT)         OPEN SYSUADS DCB FOR LOGON
         TM    SYSUADS+48,X'10'        DID SHE OPEN ?
         BO    NOC0                    OK FOR DAT
         WTO   'DCMS - UNABLE TO OPEN SYSUADS'
         XC    VUADS,VUADS             FAKE THE 'NOUADS' PARM
         OI    PARMFLAG,PARMNUAD
NOC0     EQU   *
         EJECT
         INUSE
         SPACE 2                                                 BFG001
*                                                                BFG001
*        ATTACH THE LOG TASK                                     BFG001
*                                                                BFG001
         XC    LOGTECB(20),LOGTECB CLEAR THE ECBS                BFG001
         LA    R1,TDCBPRMS         SETUP PARM LIST               BFG001
         LA    R2,LOGTINEC                                       BFG001
         LA    R3,LOGTTREC                                       BFG001
         STM   R1,R3,LOGINITP                                    BFG001
         LA    R1,LOGINITP         POINT TO PARM LIST            BFG001
         ATTACH EP=DCMSLOGT,ECB=LOGTECB,                         BFG001X
               SF=(E,ATLIST),SZERO=YES                           BFG001
         ST    R1,LOGTTCB          SAVE TCB ADDR                 BFG001
         WAIT  ECB=LOGTINEC        WAIT FOR INITIALIZATION       BFG001
         SPACE 2                                                 BFG001
* LOAD THE LTT AND START LINE TASKS
         LOAD  EP=LTT#
         LR    R2,R0
         USING LTT,R2
         ST    R2,VLTT                 SAVE ADDR IN VECTOR TABLE
         SR    R3,R3                   CLEAR TERM INDEX
NEXTLTT  ICM   R0,3,LTTENTDW           NEXT ENTRY SIZE
         BZ    LASTLTT                 ZERO MARKS END OF LIST
         LA    R4,LTTFTDCB             FWD TDCB POINTER ADDR
         LR    R5,R2                   BACK TDCB PTR IS LTT ENTRY ADDR
         ICM   R5,8,=X'80'             FLAG AS LTT ADDR
         LH    R6,LTTTCNT              TDCB COUNT
* INIT AND CHAIN THE TDCB'S FOR EACH LINE
GETTDCB  GETMAIN R,LV=TDCBLEN+ACCTLEN+DUPTLEN+DUPTSTSZ,SP=SPTDCB
         USING TDCB,R1
         XC    TDCB(TDCBLEN+ACCTLEN),TDCB CLEAR THE WHOLE THING
         ST    R1,LISTTDCB(R3)         ADD TO TDCB LIST
         ST    R1,0(R4)                NEW ADDR TO PREV ENTRY FWD PTR
         ST    R5,TDCBBKP              PREV ENTRY ADDR TO BACK PTR
         LR    R5,R1                   SAVE FOR NEXT BACK PTR
         LA    R4,TDCBFWDP             SAVE FWD PTR ADDR FOR NEXT ENTRY
         LA    R0,TDCB+TDCBLEN         POINT AT TACCT
         ST    R0,TDCBACCT             INITIALIZE POINTER
         L     R0,DCDASAVE             GET DCDA AREA
         ST    R0,TDCBDCDA             POINT TO DCDA
         MVC   TDCBLGST(8),TDCBPRMS   MOVE INIT PARMS            BFG001
*
*        INITIALIZE THE D U P T
*
         LA    R14,TDCB+TDCBLEN+ACCTLEN POINT AT DUPT
         ST    R14,TDCBDUPT             INITIALIZE POINTER
         CALL  DUPTINIT
         LR    R1,R5                   RESTORE TDCB POINTER
         LA    R0,VECTOR               CONTROL TASK ADDR VECTOR
         ST    R0,TDCBVECT             PUT IT IN TDCB
         L     R0,DCDASAVE             GET DCDA AREA
         ST    R0,TDCBDCDA             POINT TO DCDA
         STH   R3,TDCBSEQ              SAVE TDCB INDEX
         LA    R3,4(R3)                TDCBLIST INDEX
         BCT   R6,GETTDCB              GO GET REST OF TDCB'S
         ST    R2,TDCBFWDP             END CHAIN WITH LTT ENTRY ADDR
         MVI   TDCBFWDP,X'80'          FLAG AS LTT ADDR
         ST    R1,LTTBTDCB             LTT POINTS TO LAST TDCB
         DROP  R1
* NOW ATTACH THE LINE TASK AND WAIT FOR IT TO INITIALIZE
         ATTACH EPLOC=LTTIONME,ECB=LTTENDEC,PARAM=((R2)),SF=(E,ATLIST)
         ST    R1,LTTIOTCB             SAVE TCB ADDR
         LA    R0,LTTENDEC             ATTACH ECB ADDRESS
         LA    R1,LTTSPECB             COMM ECB ADDRESS
         STM   R0,R1,IOECBL            MAKE AN ECB LIST
         MVI   IOECBL+4,X'80'          END OF LIST INDICATOR
         WAIT  ECBLIST=IOECBL          WAIT FOR LINE TO INITIALIZE
         TM    LTTENDEC,X'40'          DID TASK END
         BZ    NOTABND1                BR IF NOT, STILL OK
         MVC   LNOTMSG+18(8),LTTDDNME  LINE DIED WHILE INITIALIZING
LNOTMSG  WTO   'DCMS LINE XXXXXXXX FAILED TO OPEN'
         MVI   LTTENDEC,0              UNPOST THE ECB
NOTABND1 MVI   LTTSPECB,0              UNPOST ECB
         AH    R2,LTTENTDW             ADD ENTRY LENGTH TO LTT BASE
         B     NEXTLTT                 GO INIT NEXT ENTRY
         DROP  R2
LASTLTT  EQU   *                       END OF LTT STARTUP CODE
         EJECT
         INUSE
* NOW ATTACH A USER TASK FOR EACH TDCB
         LM    R3,R5,BXLEREGS          PREPARE TO SEARCH TDCB LIST
         L     R6,=F'-1'               ID OF UNUSE ENTRY
ATTLOOP  C     R6,LISTTDCB(R3)         SEE IF ENTRY IN USE
         BE    NOATT                   BR IF NOT USED
         ATTACH MF=(E,LISTTDCB(R3)),SF=(E,USERATT),                    X
               ESTAI=(STAI,LISTTDCB(R3))
         ST    R1,LISTTCB(R3)          SAVE TCB ADDR IN LIST
NOATT    BXLE  R3,R4,ATTLOOP           ATTACH ALL USER TASKS
* BUILD THE SYSTEM MASTER ECB LIST
* THIS CODE AND ECB LIST SUPPORT UP TO 10 LINE TASKS
         L     R2,VLTT                 GET START OF LTT
         USING LTT,R2
         LA    R3,10                   MAX NO. OF LINES I CAN TAKE
         LA    R4,ECBLIST+12-8     ADDR-8 OF FIRST BLANK ENTRY   BFG001
         SR    R5,R5                   CLEAR FOR ICM
ECBLOOP  ICM   R5,3,LTTENTDW           GET LTT ENTRY SIZE
         BZ    LASTECB                 BR IF DONE
         LA    R4,8(R4)                NEXT ECBLIST SPACE
         LA    R0,LTTSPECB             LINE COMMUNICATION ECB
         LA    R1,LTTENDEC             TASK ABEND ECB ADDR
         STM   R0,R1,0(R4)             ADD BOTH TO ECB LIST
         AR    R2,R5                   POINT TO NEXT ENTRY
         BCT   R3,ECBLOOP              CHECK NEXT LTT ENTRY
         ABEND 5,DUMP                  DIE IF ECBLIST IS SHORT
LASTECB  MVI   4(R4),X'80'             MARK END OF ECB LIST
         L     R1,CECBADDR             PTR TO MODIFY ECB ADDRESS
         L     R1,0(R1)                MODIFY ECB ADDRESS
         ST    R1,ECBLIST              TO ECB LIST FIRST ENTRY
         SPACE 2
* ALL INITIALIZATION COMPLEE
         EJECT
*______________________________________________________________________
*
* MAIN WAIT LOOP __ WAIT FOR SUBTASK REQUEST OR COMMAND
*
*----------------------------------------------------------------------
         SPACE 2
WAITTEST WAIT  ECBLIST=ECBLIST         WAIT FOR ANY EVENT
         L     R1,ECBLIST              ADDR OF MODIFY ECB
         TM    0(R1),X'40'             MODIFY OR STOP COMMAND?
         BO    COMMAND                 BR IF YES
         TM    REQECB,X'40'            ETXR WANT SERVICE?
         BO    GENREQT                 BR IF YES
         TM    LOGTECB,X'40'       DID LOG TASK DIE              BFG001
         BO    LOGDIED             PROCESS IF SO                 BFG001
         L     R2,VLTT                 GET START OF LTT AGAIN
         SR    R3,R3                   CLEAR FOR ICM
LTTECBLP ICM   R3,3,LTTENTDW           GET ENTRY SIZE
         BZ    WAITTEST                BR IF END OF LTT
         TM    LTTENDEC,X'40'          DID I/O TASK DIE?
         BZ    NOTAB2                  BR IF NO, KEEP GOING
         ABEND 2,DUMP                  DIE IF I/O ABENDED
NOTAB2   TM    LTTSPECB,X'40'          SEE IF I/O TASK POSTED
         BO    GENREQLT                BR IF YES, CHECK FOR REQUEST
         AR    R2,R3                   ADD ENTRY LENGTH
         B     LTTECBLP                CHECK REST OF LTT ENTRIES
         EJECT                                                   BFG001
         INUSE ,                                                 BFG001
*                                                                BFG001
*        IF LOG TASK DIED THEN DETACH AND WAIT FOR SERV END      BFG001
*                                                                BFG001
LOGDIED  L     R1,LOGTTCB          POINT AT TCB                  BFG001
         MVC   LOGTABCD,16(R1)     SAVE COMP CODE                BFG001
         DETACH LOGTTCB            GET RID OF TASK               BFG001
         XC    LOGTECB,LOGTECB     SET POST OFF                  BFG001
         XC    LOGTTCB,LOGTTCB     SET PRESENT OFF               BFG001
         B     WAITTEST            WAIT FOR NEXT ITEM            BFG001
         EJECT
         INUSE
* TDCB SERVICE REQUESTS
GENREQLT MVI   LTTSPECB,0              UNPOST LTT ECB
         DROP  R2
*ENREQT  EQU   *    FOLLOWING MACRO IS BROKEN, ADD LABEL BY HAND
GENREQT  STATUS STOP SYNCH             DONT LET SUBTASKS SQUIRM ABOUT
GENREQ   MVI   REQECB,0                UNPOST ECB
         LM    R3,R5,BXLEREGS          PREPARE TO SEARCH TDCB LIST
GENLP1   L     R2,LISTTDCB(R3)         GET TDCB ADDRESS
         LTR   R2,R2                   SEE IF DUMMY ENTRY
         BM    GENLP2                  BR IF ENTRY NOT IN USE
         USING TDCB,R2
         TM    TDCBCFLG,TDCBNTR        IS NEW TASK REQUIRED
         BO    GENTASK                 BR IF YES
GENLP2   BXLE  R3,R4,GENLP1            SEARCH ALL TDCB ENTRIES
         STATUS START                  RESUME OPERATION
         B     WAITTEST                WAIT FOR NEXT REQUEST
* TASK SUSPENSION OR STAI REQUEST
GENTASK  NI    TDCBCFLG,255-TDCBNTR    NEW TASK IN PROGRESS
         TM    TDCBCFLG,TDCBLOG        IS USER LOGGED ON
         BZ    GENLP2                  IF NOT, IGNORE CLEAR KEY
* FIND A TDCBLIST HOLE
         L     R1,=F'-1'               UNUSED ENTRY INDICATOR
         LM    R5,R7,BXLEREGS          PREPARE TO SEARCH TDCB LIST
GTLOOP1  C     R1,LISTTDCB(R5)         SEE IF ENTRY IN USE
         BE    GTHOLE                  BR IF NOT IN USE
         BXLE  R5,R6,GTLOOP1           SEARCH WHOLE TABLE
         ABEND 5,DUMP                  NO MORE UNUSED ENTRIES
GTHOLE   GETMAIN R,LV=TDCBLEN,SP=SPTDCB GET ANOTHER TDCB
         LR    R4,R1                   SAVE NEW TDCB ADDR
* REGISTER USAGE
* R2 OLD TDCB ADDR
* R3 OLD TDCB INDEX
* R4 NEW TDCB ADDR
* R5 NEW TDCB INDEX
         MVC   0(TDCBLEN,R4),TDCB      COPY OLD TDCB TO NEW
         OI    TDCBCFLG,TDCBIACT       OLD TASK INACTIVE
         DROP  R2
         USING TDCB,R4                 NOW INIT THE NEW TDCB
         XC    TDCBWECB,TDCBWECB       CLEAR PENDING I/O STUFF
         XC    TDCBPECB,TDCBPECB       CLEAR POLLING ECB
         XC    TDCBSTWA,TDCBSTWA       CLEAR STAI STUFF
         XC    TDCBCFLG,TDCBCFLG       CLEAR FLAGS
         XC    TDCBLGDC,TDCBLGDC   CLEAR LOG DCB PT              BFG001
         OI    TDCBCFLG,TDCBLOG        NOTE LOGGED ON
         OC    TDCBSTWA-TDCB(,R2),TDCBSTWA-TDCB(R2) DID OLD TASK ABEND
         BZ    GTNOABND
         OI    TDCBCFLG,TDCBRETA+TDCBRETP     NOTE PREV TASK ABENDED
GTNOABND ST    R2,TDCBPEND             POINT BACK TO OLD TDCB
         XC    TDCBSECB,TDCBSECB       CLEAR STAI ECB
         STH   R5,TDCBSEQ              SAVE TDCB INDEX
         BAL   R15,SWAPTDCB            PUT NEW TDCB ON CHAIN, REMV OLD
         ST    R4,LISTTDCB(R5)         PUT TDCB ADDR IN TDCB TABLE
         ATTACH MF=(E,LISTTDCB(R5)),SF=(E,USERATT),                    X
               ESTAI=(STAI,LISTTDCB(R5))
         ST    R1,LISTTCB(R5)          PUT TCB ADDR IN TABLE
         B     GENREQ                  SEE IF MORE OF THE SAME NEEDED
         DROP  R4
         INUSE
* TDCB SWAP -- REMOVES ONE TDCB FROM THE CAHIN AND ADDS ANOTHER
* R2 TDCB TO REMOVE
* R4 TDCB TO ADD
* R1 WORK REG
* R15 RETURN ADDRESS
SWAPTDCB ICM   R1,15,TDCBFWDP-TDCB(R2) OLD FWD POINTER
         ST    R1,TDCBFWDP-TDCB(R4)    TO NEW TDCB
         BM    SWAPLTTB                BR IF ITS AN LTT ADDRESS
         ST    R4,TDCBBKP-TDCB(R1)     POINT NEXT TDCB BACK TO NEW TDCB
SWAPB    ICM   R1,15,TDCBBKP-TDCB(R2)  OLD BACK PTR
         ST    R1,TDCBBKP-TDCB(R4)     TO NEW TDCB
         BM    SWAPLTTF                BR IF ITS AN LTT ADDR
         ST    R4,TDCBFWDP-TDCB(R1)    POINT PREV TDCB FWD TO NEW TDCB
         BR    R15
SWAPLTTB ST    R4,LTTBTDCB-LTT(R1)     POINT LTT TO NEW END OF LIST
         B     SWAPB
SWAPLTTF ST    R4,LTTFTDCB-LTT(R1)     POINT LTT AT NEW HEAD OF LIST
         BR    R15
         EJECT
         INUSE
         DCMSERV FORCE=YES
         EJECT
         INUSE
*----------------------------------------------------------------------
*
* MODIFY/STOP COMMAND PROCESSOR
*
*----------------------------------------------------------------------
         SPACE 2
COMMAND  EXTRACT CECBADDR,FIELDS=COMM
         L     R3,CECBADDR             ADDRESS OF COMMAND ECB PTRR
         L     R2,4(R3)                ADDRESS OF CIB
         CLI   4(R2),X'40'             IS IT STOP VERB
         BE    STOP                    BR IF YES
         CLI   4(R2),X'44'             IS IT MODIFY VERB
         BE    MODIFY                  BR IF YES
BADCIB   WTO   'UNKNOWN DCMS COMMAND'
CIBEND   EXTRACT CECBADDR,FIELDS=COMM
         L      R3,CECBADDR
         L      R2,4(R3)
         QEDIT ORIGIN=4(R3),BLOCK=(2)  FREE THE CIB
         B     WAITTEST                AND CHECK FOR MORE WORK
STOP     CLC   LOGTTCB,=F'0'       IS LOG TASK DEAD              BFG001
         BE    STOP2               IF SO THEN CONTINUE           BFG001
         POST  LOGTTREC            REQUEST TERM                  BFG001
         WAIT  ECB=LOGTECB         WAIT FOR TERM                 BFG001
         DETACH LOGTTCB            GET RID OF TCB                BFG001
STOP2    ABEND 999                 CRUDE, BUT EFFECTIVE          BFG001
MODIFY   CLC   =H'4',14(R2)            SEE IF DATA LENGTH BIG ENOUGH
         BL    BADCIB                  IF NOT, IGNORE CIB
         CLC   =C'SNAP',16(R2)         SEE IF SNAP REQUESTED
         BNE   BADCIB                  IF NOT,IGNORE CIB
*SNAP DUMP ALL SUBTASKS
SNAPALL  OPEN  (CTLSNAP,OUTPUT)        OPEN SNAP DUMP DATA SET
         LH    R3,ID                   GET DUMP ID FOR THIS ROUND
         L     R4,16                   GET THE CVT ADDRESS
         L     R4,0(R4)                GET NEW-OLD ADDRESS
         L     R4,4(R4)                MY TCB ADDRESS
         BAL   R2,SNAP                 DUMP MYSELF
         L     R4,X'88'(R4)            FIRST SUBTASK ADDRESS
SNAPLOOP LTR   R4,R4                   ANY MORE TASKS
         BZ    ENDSNAP                 BR IF NOT
         BAL   R2,SNAP                 ELSE DUMP ANOTHER TASK
         L     R4,X'80'(R4)            GET SISTER TASK
         B     SNAPLOOP                CONTINUE SEARCH
ENDSNAP  LA    R3,1(R3)                INCREMENT ID
         STH   R3,ID                   SAVE FOR NEXT TIME
         CLOSE CTLSNAP                 CLOSE SNAP DATA SET
         B     CIBEND                  FREE THE CIB
SNAP     SNAP  DCB=CTLSNAP,ID=(R3),TCB=(R4),SDATA=CB,PDATA=ALL
         BR    R2
         DROP  R11
         EJECT
*----------------------------------------------------------------------
*
* THE FOLLOWING CODE IS THE TIMER EXIT ROUTINE. JUST RESTART THE CLOCK.
*
*----------------------------------------------------------------------
         SPACE 2
         INUSE
         USING *,R15
TIMEEXIT LR    R10,R14                 SAVE RETURN ADDRESS
         LR    R12,R15
         USING TIMEEXIT,R12
         DROP  R15
         L     R11,DCDASAVE
         USING DCDA,R11
         LA    R1,DCDASTAT
         CALL  STATSUB
*
*
         DROP  R11
         STIMER REAL,TIMEEXIT,BINTVL=TIMEVAL
         BR    R10                     END OF EXIT
         DROP  R12
         EJECT
*----------------------------------------------------------------------
*
* STAI EXIT - RUNS ON FAILING TCB
*
* THIS EXIT NOTIFIES THE MAIN TASK THAT A NEW TASK IS NEEDED
* AND THEN WAITS TO BE POSTED.  WHEN IT IS POSTED, IT SCHEDULES
* RETRY IF DESIRED
*
*----------------------------------------------------------------------
         USING *,R11
STAI     SAVE  (14,12)
         INUSE
         LR    R11,R15                 BASE REG
         L     R15,16                  GET CVT ADDRESS
         L     R15,0(R15)              GET NEW/OLD
         L     R15,4(R15)              GET MY TCB ADDRESS
         LM    R3,R5,BXLEREGS          SET TO LOOK AT TCB LIST
STAILP1  C     R15,LISTTCB(R3)         SEE IF TCB IS A DIRECT SUBTASK
         BE    STAIHIT                 BR IF YES
         BXLE  R3,R4,STAILP1           SCAN ALL TCB ENTRIES
* IF THE TCB ISNT FOUND, THE TASK IS NOT A DIRECT SUBTASK AND
* SHOULD BE IGNORED BY THIS EXIT
         CH    R0,=H'12'               IS THERE AN SDWA
         BNE   YESSDWA                 BR IF YES
         SR    R15,R15                 ELSE SKIP RETRY
         BR    R14                     AND RETURN TO ABEND
YESSDWA  SETRP REGS=(14,12),DUMP=NO,RC=0 NO RETRY
STAIHIT  L     R2,LISTTDCB(R3)         GET TDCB ADDRESS
         USING TDCB,R2
         CH    R0,=H'12'               SEE IF SDWA OBTAINED
         BNE   GOTSDWA                 BR IF YES
         SR    R1,R1                   ZERO SDWA POINTER
GOTSDWA  XC    TDCBSECB,TDCBSECB       CLEAR THE STAI ECB
         ST    R1,TDCBSTWA             SAVE STAI WORK AREA ADDR
         OI    TDCBCFLG,TDCBNTR        NOTE NEW TASK REQ
         POST  REQECB                  START THE MAIN TASK
         WAIT  ECB=TDCBSECB            WAIT FOR RETRY INSTRUCTIONS
         TM    TDCBCFLG,TDCBRET        IS RETRY WANTED
         BZ    STAITERM                BR IF NO
         ICM   R1,15,TDCBSTWA          GET SDWA POINTER
         BZ    STAITERM                SKIP RETRY IF NO SDWA
         NI    TDCBCFLG,255-TDCBRETP-TDCBRETA-TDCBRET CLEAR ALL RETRY
         SR    R4,R4
         ICM   R4,7,13(R4)             RETRY ADDR FROM WORK AREA PSW
*   THE FOLLOWING MACRO SPECIFIES TASK TO BE RETRIED
         SETRP REGS=(14,12),RC=4,RETADDR=(R4),RETREGS=YES,    XXXXXXXXXX
               DUMP=NO,FRESDWA=YES     RESTART THE TASK
         SPACE 2
* THE FOLLOWING CODE DOES NOT RETRY TH E FAILING TASK
         SPACE 2
STAITERM NI    TDCBCFLG,255-TDCBLOG    NOTE THAT THIS IS A LOGOFF
         XC    TDCBSECB,TDCBSECB       ERASE SIGNS OF ABEND
         XC    TDCBSTWA,TDCBSTWA       BECAUSE IF THIS IS LAST TDCB
         NI    TDCBCFLG,255-TDCBRETP   ON CHAIN IT WILL BE REUSED
         ICM   R1,15,TDCBSTWA          GET SDWA ADDR
         BNZ   YESSDWA                 SKIP RETRY WHEN SDWA EXISTS
         SR    R15,R15                 NOTE NO RETRY
         BR    R14                     END OF STAI EXIT
         DROP  R2
         DROP  R11
         EJECT
* END OF TASK EXIT ROUTINE
* CLEANS UP ANY PENDING SUBTASKS, FREES UNCHAINED TDCBS AND DETACHES
* DEAD TASKS.  IF DEAD TASK IS NOT LOGGING OFF, THE SELECTOR
* IS RE-ATTACHED
         INUSE
         USING *,R15
ETXR     L     R11,=A(CONTROL)         STANDARD BASE REG
         DROP  R15
         USING CONTROL,R11
* FIRST FIND THE DEAD TASK'S INDEX
         LM    R3,R5,BXLEREGS          PREPARE TO SEARCH TCB LIST
EXTRLP1  C     R1,LISTTCB(R3)          SEE IF TASK FOUND
         BE    ETXRHIT                 BR IF CORRENT INDEX FOUND
         BXLE  R3,R4,EXTRLP1           CONTINUE THRU LIST
         ABEND 4,DUMP                  ABEND IF STRAY TCB
ETXRHIT  L     R2,LISTTDCB(R3)         GET HIS TDCB ADDR
         USING TDCB,R2
         SPACE 2
         TM    TDCBCFLG,TDCBLOG        IS THIS A LOGOFF
         BO    ETXREND                 BR IF NOT, JUST REATTACH
         ICM   R4,15,TDCBPEND          GET PENDING TDCB ADDR
         BZ    ETXREND                 BR IF NONE EXISTS
         LH    R5,TDCBSEQ-TDCB(R4)     PEND TASK'S TCB INDEX
         L     R6,LISTTCB(R5)          PEND TCB ADDRESS
         STATUS STOP SYNCH             STOP ALL SUBS FOR CHAIN MANIPULA
* REGISTER CONTENTS AT THIS POINT
* R2 IS DEAD TASKS TDCB ADDR
* R3 IS DEAD TASKS TDCB, TCB INDEX
* R4 IS PEND TASKS TDCB ADDRESS
* R5 IS PEND TASKS TDCB, TCB INDEX
* R6 IS PEND TASKS TCB ADDRESS   GOT ALL THAT STRAIGHT?
         TM    TDCBCFLG-TDCB(R4),TDCBRETP PENDIN TDCB IN STAI
         BZ    ETXRNRET                BR IF NOT
         POST  TDCBSECB-TDCB(R4)       START PEND TASK IN STAI
         B     ETXRSWAP                GO PUT TDCB ON CHAIN
* IF PEND TASK NOT IN STAI, IT MUST BE SUSPENDED
ETXRNRET STATUS START,TCB=(R6)         REDUCE HIS STOP COUNT
ETXRSWAP BAL   R15,SWAPTDCB            PUT NEW TDCB ON CHAIN
         OI    TDCBCFLG,TDCBIACT       NOTE THIS TDCB INACTIVE
         NI    TDCBCFLG-TDCB(R4),255-TDCBIACT MAKE PENDING TDCB ACTIVE
         STATUS START                  LET SUBTASKS RUN AGAIN
         OC    TDCBWECB-TDCB(4,R4),TDCBWECB-TDCB(R4) IS I/O PENDING
         BZ    ETXREND                 NO, GOOD LUCK CHARLIE
         L     R1,TDCBLECB-TDCB(R4)    YES,POINT AT LINE TASK ECB
         POST  (1)                     KICK IT
ETXREND  L     R1,LISTTCB(R3)          DEAD TCB
         MVC   TDCBABND,16(R1)         COPY COMPLETION CODE
         DETACH LISTTCB(R3)            GET RID OF DEAD TASK
         TM    TDCBCFLG,TDCBIACT       THIS TDCB INACTIVE
         BZ    ETXRACT                 BR IF ACTIVE
* MAKE SURE TDCB TO BE FREED ISNT ON SOMEONES PEND LIST
         LM    R5,R7,BXLEREGS          PREPARE TO SEARCH TDCB LIST
ETENDLP1 L     R1,LISTTDCB(R5)         PICK UP A TDCB ADDR
         LTR   R1,R1                   SEE IF ITS IN USE
         BM    ETENDLP2                BR IF NOT - IGNORE IT
         C     R2,TDCBPEND-TDCB(R1)    SEE IF IT HAS A PTR TO DEAD TDCB
         BE    ETPEND                  BR IF YES
ETENDLP2 BXLE  R5,R6,ETENDLP1          CONTINUE THRU TDCB LIST
         FREEMAIN R,LV=TDCBLEN,SP=SPTDCB,A=(R2) FREE THE TDCB
         SR    R0,R0                   DEVELOP A WORD OF ONES
         BCTR  R0,0
         ST    R0,LISTTCB(R3)          CLEAR OUT THE TCB, TDCB LISTS
         ST    R0,LISTTDCB(R3)
         BR    R14                     END OF ETXR ROUTINE
ETPEND   SR    R0,R0                   CLEAR OUT PTR TO TDCB ABOUT TO
         ST    R0,TDCBPEND-TDCB(R1)    BE FREED
         B     ETENDLP2                CHECK OTHER TDCBS FOR DRILL
ETXRACT  LR    R2,R14                  SAVE RETURN ADDR
         ATTACH MF=(E,LISTTDCB(R3)),SF=(E,USERATT),                    X
               ESTAI=(STAI,LISTTDCB(R3))
         ST    R1,LISTTCB(R3)
         BR    R2                      RETURN FROM ETXR
         DROP  R2
         DROP R11
         EJECT
         LTORG
HEXMASKS DC    XL4'F0F0F0F0'
TRTBL    DS    0H
         DC    240C' '
         DC    C'0123456789ABCDEF'
         DC    4C' '
PARMADDR DC    A(0)
DCDASAVE DC    A(0)
####SAVE DC    A(0)
USERATT  ATTACH  SF=L,EP=SELECT#,ETXR=ETXR
ATLIST   ATTACH SF=L
SAVE     DS    18F
IOECBL   DS    3F
EDECB    DC    F'0'
CECBADDR DC    F'0'                    COMMAND ECB POINTER
CIBADDR  DC    F'0'                    CIB POINTER
REQECB   DC    F'0'                    POSTED BY STAI EXIT
TIMEVAL  DC    A(100*60)               1 MINUTES
BXLEREGS DC    A(0,4,4*99)             TDCB LIST SEARCH LOOP REGS
ID       DC    H'100'
SPTDCB   EQU   1                       TDCB GETMAIN SUBPOOL
         DS    0F
DECWORK1 DS    XL2
DECWORK2 DS    XL2
DECWORK3 DS    D
DECWORK4 DS    CL4
TDCBADDR DS    F .
DOUBLE   DS    D .
@CLEARSA DS    6F .
HEXWORK1 DS    XL5
HEXWORK2 DS    CL8
HEXWORK3 DS    CL8
PWORK    DC    CL22' '
* THE FOLLOWING ECB LIST ALLOWS 10 LINE TASKS
ECBLIST  DC    A(0,REQECB,LOGTECB),20A(0)                        BFG001
*  LOG TASK ECBS AND WORK AREAS                                  BFG001
LOGINITP DC    A(TDCBPRMS,LOGTINEC,LOGTTREC)                     BFG001
TDCBPRMS DS    2F                  ADDR OF LOGT STACK AND ECB    BFG001
LOGTECB  DS    F                   END-OF-TASK ECB               BFG001
LOGTINEC DS    F                   POSTED WHEN LOGT INITED       BFG001
LOGTTREC DS    F                   POST TO TERM LOGT             BFG001
LOGTTCB  DS    F                   ADDR OF TCB                   BFG001
LOGTABCD DS    F                   ABEND CODE                    BFG001
* USER TDCB AND TCB LISTS
         SPACE 2
LISTTDCB DC    100F'-1'
LISTTCB  DC    100F'-1'                LIST OF TCB ADDEESSES
NOUADS   DC     C'NOUADS'
PARMCLC  CLC    2(0,R1),0(R3)      <<< EXECUTED >>>
PARMFLAG DC     X'0'               FLAG BYTE
PARMNUAD EQU    X'80'              NO-UADS SPECIFIED
         PRINT NOGEN
CTLSNAP  DCB   RECFM=VBA,MACRF=W,BLKSIZE=1632,LRECL=125,DDNAME=CTLSNAP,X
               DSORG=PS
         PRINT GEN
* SYSTEM ADDRESS VECTOR
*                                                                BFG001
*                                                                BFG001
*                                                                BFG001
         VECTOR DSECT=NO                                         BFG001
*                                                                BFG001
*                                                                BFG001
DFLTFLAG DC    XL4'00000000'
         SPACE 2
* DCB FOR ACCOUNT VERIFICATION
         PUSH   PRINT
         PRINT  NOGEN
SYSUADS  DCB   DDNAME=SYSUADS,DSORG=PO,MACRF=R,RECFM=F
         POP    PRINT
EDITMASK DC    XL4'40202120'
BLANKS   DC    CL79' '
         DC    CL79' '
*EXMASKS DC    XL4'F0F0F0F0'
*RTBL    DS    0H
*        DC    240C' '
*        DC    C'0123456789ABCDEF'
*        DC    4C' '
         EJECT
         DCMSDATA
         DCMSUPT
         EJECT
         LTT
         TDCB
         TACCT
         IHASDWA
         IEESMCA
         EJECT
         IEFJESCT
         EJECT
         CVT DSECT=YES,LIST=YES
         END
