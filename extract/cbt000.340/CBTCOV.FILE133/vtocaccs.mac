         MACRO
         VTOCACCS &SYSTEM=360,&MAXCORE=16777208 .
         LCLA  &I .
         AIF   ('&SYSTEM' EQ '360' OR '&SYSTEM' EQ '370').SYSOK
         MNOTE 8,'SYSTEM=&SYSTEM INCORRECT - MUST BE 360 OR 370'
         MEXIT
.SYSOK   ANOP
         AIF   (&MAXCORE GE 176 AND &MAXCORE LT 16777209).COREOK
         MNOTE 8,'MAXCORE=&MAXCORE INCORRECT - MUST BE NUMERIC AND BETWX
               EEN 176 AND 16777208'
         MEXIT
.COREOK  ANOP
VTOC TITLE ' V T O C   A C C E S S   M E T H O D'
         MNOTE *,'THIS GENERATION HAS MAXCORE=&MAXCORE AND'
         MNOTE *,'   SYSTEM=&SYSTEM'
*
* PURPOSE -
*
*       THE PURPOSE OF THIS PROGRAM IS TO PROVIDE AN ACCESS METHOD TO
*  RETRIEVE DATA SET CONTROL BLOCKS FROM AN O/S VTOC EASILY AND
*  CHEAPLY.  ALL ACCESS IS BY THE 'LOCATE' MODE, THAT IS, WITH THE
*  ADDRESS OF THE DATA BLOCK RETURNED IN REGISTER 1.
*
* RESTRICTIONS AND WARNINGS -
*
*     SINCE THE VTOC ACCESS METHOD TAKES ALL BUT 4K OF THE AVAILABLE
*  STORAGE ( UP TO MAXCORE ), IF ANY OTHER IS TO REMAIN AVAILABLE FOR
*  OTHER PURPOSES IT MUST BE ACQUIRED BEFORE THE OPEN AND RELEASED
*  AFTER THE OPEN, OR MAXCORE MUST BE SET UP FOR A LIMITED SIZE.
*
*
* INPUTS -
*
*  REGISTERS 0 AND 1 MUST CONTAIN THE FOLLOWING VALUES -
*        OPEN SETS THE READ CCW'S SO THAT ONLY THE DATA PORTION OF
*        RECORDS IS RETURNED WHEN A 'GET' IS REQUESTED.  OPENWKEY SETS
*        THE READ CCW'S SO THAT BOTH THE KEY AND DATA PORTIONS OF
*        RECORDS ARE RETURNED WHEN A 'GET IS REQUESTED.  THE 44 BYTE
*        KEY (IF PRESENTED) IS IN FRONT OF THE 96 BYTE DATA RECORD.
* OPEN     R0=1,R1=A(8 CHARACTER LEFT JUSTIFIED DDNAME TO BE OPENED)
* OPENWKEY R0=2,R1=A(8 CHARACTER LEFT JUSTIFIED DDNAME TO BE OPENED)
* GET      R0=3,R1=ANY VALUE - GET THE NEXT (KEY AND) DATA BLOCK ADDRES
* GETBYCHR R0=4,R1=A(5 BYTE ADDRESS OF CCHHR) - GET THE (KEY AND)
*              DATA BLOCK AT THE SPECIFIED CCHHR.
* CLOSE    R0=5,R1=ANY VALUE - CLOSE THE FILE
*
* OUTPUTS -
*
*     FOR OPEN AND OPENWKEY, THE DCB WILL BE OPENED, AND THE NUMBER OF
*          DATA BLOCKS PER TRACK RETURNED IN R1.
*     FOR GET OR GETBYCHR, THE ADDRESS OF THE REQUESTED DATA BLOCK WILL
*          BE RETURNED IN REGISTER 1.
*     FOR CLOSE, THE DCB WILL BE CLOSED
         EJECT
* MACRO 'VTOC' USAGE -
*
* ONLY ASSEMBLER LANGUAGE PROGRAMS MAY CALL THIS ACCESS METHOD.
* THE MACRO 'VTOC' IS AVAILABLE TO FACILITATE THE CALLING OF THIS
* PROGRAM.  THE FORMATS ALLOWED ARE DESCRIBED BELOW.
*
*     OPEN REQUEST
*
*        VTOC  OPEN,DDNMSYMB      'OPEN' MUST BE CODED AS SHOWN.
*                                 'DDNMSYMB' IS THE ASSEMBLER SYMBOL OF
*                                 AN 8 CHARACTER LEFT-JUSTIFIED DDNAME
*                                 TO BE OPENED FOR INPUT OF DATA BLOCKS
*                                 ONLY (NO KEYS).
*        VTOC  OPENWKEY,DDNMSYMB  SAME AS ABOVE, BUT OPENED WITH KEYS.
*
*     CLOSE REQUEST
*
*        VTOC  CLOSE              'CLOSE' MUST BE CODED AS SHOWN.
*
*     GET REQUEST
*
*        VTOC  GET                'GET' MUST BE CODED AS SHOWN.  WHEN
*                                 R15 = 0, R1 = A(DATA) OR A(KEY+DATA).
*                                 IF R15 NOT = 0, R1 IS INDETERMINATE.
*                                 SEE 'OPENWKEY' ABOVE.
*        VTOC  GETBYCHR,CHRSYMB   'GETBYCHR' MUST BE CODED AS SHOWN.
*                                 'CHRSYMB' IS THE ASSEMBLER SYMBOL
*                                 OF A 5 BYTE AREA CONTAINING THE
*                                 FULL DISK ADDRESS OF THE DESIRED
*                                 DATA BLOCK.  SEE 'OPENWKEY' ABOVE.
*
*     ALTERNATE CODINGS -  WHERE A SECOND OPERAND IS CODED, (1) MAY BE
*                          USED IF R1 CONTAINS THE ADDRESS OF THE
*                          REQUIRED AREA.  (REGNAME) MAY ALSO BE USED
*                          WHERE 'REGNAME' IS A SYMBOLIC REGISTER, IF
*                          'REGNAME' IS NOT R0 OR R14.
*
         EJECT
* RETURN CODES -
*
*        0     REQUESTED SERVICE COMPLETED NORMALLY
*                  NO ERRORS WERE FOUND
*        4     END OF DATA
*        8     DCB NOT OPEN
*                  DDNAME DESCRIBED A NON-D.A. DEVICE OR A DATACELL
*                  DDNAME IS NOT IN TIOT
*                  DD IS 'DUMMY' OR 'DSN=NULLFILE'
*        12    MORE THAN ONE VOLUME SERIAL ON DDCARD OR NO DDCARD
*        16    PERMANENT I/O ERROR
*        20    INVALID REQUEST CODE
*                  R0 WAS NOT 1,2,3,4 OR 5
*        24    PAST ADDRESS OF HIGHEST F1 DSCB EVER ON PACK
*        28    INVALID REQUEST SEQUENCE
*                  AN OPEN WAS REQUESTED AND DCB IS ALREADY OPEN
*                       OR
*                  A CLOSE WAS REQUESTED AND DCB IS ALREADY CLOSED
*                       OR
*                  A GET WAS REQUESTED AND
*                       2) END-OF-DATA HAD OCCURRED OR
*                       2) A PERMANENT I/O ERROR OCCURRED OR
*                       3) A DATA BLOCK WAS OF AN INCORRECT LENGTH
*        32    NOT USED
*        36    NO CORE FOR DATA
*                  LESS THAN 4272 BYTES AVAILABLE
*        40    VTOCACCS NOT LINKEDITED WITH CALLING PROGRAM.  THIS
*                  RETURN CODE IS GIVEN ONLY BY THE 'VTOC' MACRO.
*
*   AUTHOR         DARRELL D. WILCOX
*   INSTALLATION   KING COUNTY SYSTEMS SERVICES
*                  ROOM E-208 KING COUNTY COURTHOUSE
*                  THIRD AT JAMES STREETS
*                  SEATTLE, WA  98104
*   IF MODIFICATIONS OR CORRECTIONS ARE MADE, I WOULD GREATLY
*        APPRECIATE GETTING A COPY OF THEM.
*
* LATEST REVISION DATE -
*        3/1/74 - R001       ADDITIONAL 370 INSTRUCTIONS USED
*        3/5/74 - R002       TESTS FOR D.A. AND DATACELL ADDED
*        3/6/74 - R003       REMOVED 256 BYTE MINIMUM FROM CODE THAT
*                            ZEROES GETMAINED AREA ON 360 CPU
         EJECT
VTOCACCS CSECT
.LOOP    ANOP
R&I      EQU   &I .
&I       SETA  &I+1 .
         AIF   (&I LT 16).LOOP
HIF1DSCB EQU   X'80' .
READON   EQU   X'40' .
KEYS     EQU   X'20' .
RESET    EQU   X'00' .
JFCBTSDM EQU   52
DCBDDNAM EQU   40 .
DCBDEBAD EQU   44 .
DCBOFLGS EQU   48 .
DEBSTRCC EQU   38
CVTPRLTV EQU   32 .
DVCEND   EQU   B'00001000' .            DEVICE END
CHNLEND  EQU   B'00000100' .            CHANNEL END
UNITECP  EQU   B'00000001' .            UNIT  EXCEPTION
DS4HPCHR EQU   45 .
DS4DEVDT EQU   74
JFCBNVOL EQU   117 .
JFCBVOLS EQU   118 .
         EJECT
         B     72(,R15) .               BRANCH AROUND REGSAVE AREA
         DS    17F
         STM   R14,R12,12(R13) .        SAVE REGISTERS
         ST    R13,4(,R15) .            SAVE A(PRIOR SAVE AREA)
         ST    R15,8(,R13) .            BACK-CHAIN
         LR    R13,R15 .                LOAD BASE AND SAVE AREA PNTR
         USING VTOCACCS,R13
         SPACE 3 .
         AR    R0,R0 .                  DOUBLE REQUEST CODE
         AR    R0,R0 .                  DO IT AGAIN
         BNP   SETRC20 .                NOT PLUS MEANS INVALID
         CH    R0,H20 .                 TEST FOR TOO BIG
         BH    SETRC20 .                TOO BIG IS INVALID
         LR    R15,R0 .                 LOAD INTO INDEX REGISTER
         B     *(R15) .                 GO TO PROPER ROUTINE
         B     OPEN .
         B     OPENWKEY .
         B     GET .
         B     GETBYCHR
         B     CLOSE .
         EJECT
OPENWKEY EQU   * .
         OI    CNTRL,KEYS .             OPEN WITH KEYS REQUESTED
         MVI   MDL2CCW1,RDKYDATA+MULTITRK SET READ KEY-AND-DATA OPCODE
         LA    R9,140 .                 KEY LENGTH + DATA LENGTH
         B     OPENCOMN .               GO TO COMMON OPEN CODE
OPEN     EQU   * .
         MVI   MDL2CCW1,RDDATA+MULTITRK SET READ-DATA OPCODE IN CCW
         LA    R9,96                    DATA LENGTH
OPENCOMN EQU   * .
         TM    DCB+DCBOFLGS,X'10' .     IS DCB ALREADY OPEN/Q
         BO    SETRC28 .                YES, MUST DO CLOSE FIRST
         ST    R9,READREGS+4 .          SAVE FOR LATER
         STH   R9,MDL2CCW1+6 .          STORE LENGTH TO BE READ IN CCW
         MVC   DCB+DCBDDNAM(8),0(R1) .  MOVE DDNAME INTO DCB
         L     R14,16 .                 A(CVT)
         L     R14,0(,R14) .            A(TCB POINTERS)
         L     R14,4(,R14) .            A(CURRENT TCB)
         L     R14,12(,R14) .           A(TIOT)
         LA    R15,24 .                 INDEX VALUE TO FIRST ENTRY
TIOTLOOP EQU   * .
         AR    R14,R15 .                ADD LENGTH TO START
         AIF   ('&SYSTEM' NE '370').NOT370B
         ICM   R15,1,0(R14) .           LOAD DD ENTRY LENGTH       R001
         AGO   .END360B
.NOT370B ANOP
         IC    R15,0(,R14) .            LOAD DD LENGTH
         LTR   R15,R15 .                SET CONDITION CODE
.END360B ANOP
         BZ    SETRC8 .                 BRANCH IF DD NOT FOUND
         CLC   DCB+DCBDDNAM(8),4(R14) . DDCARD NAME THE SAME/Q
         BNE   TIOTLOOP .               TRY ANOTHER DD ENTRY
         AIF   ('&SYSTEM' NE '370').NOT370C
         ICM   R15,7,17(R14) .          LOAD A(UCB ALLOCATED)      R001
         AGO   .END360C
.NOT370C ANOP
         L     R15,16(,R14) .           LOAD A(UCB ALLOCATED)
         LTR   R15,R15 .                SET CONDITION CODE
.END360C  ANOP
         BZ    SETRC8 .                 BRANCH IF 'DUMM' OR 'NULLFILE'
         CLI   18(R15),X'20' .          IS THIS A D.A. DEVICE/Q    R002
         BNE   SETRC8 .                 BRANCH IF NOT              R002
         CLI   19(R15),X'05' .          IS THIS A DATACELL/Q       R002
         BE    SETRC8 .                 BRANCH IF YES              R002
         MVI   JFCB+JFCBNVOL,X'00' .    SET NUMBER OF VOLUMES TO ZERO
*        RDJFCB DCB
         RDJFCB DCB .
         SPACE 1
         CLI   JFCB+JFCBNVOL,X'01' .    ONE-AND-ONLY-ONE VOLSER/Q
         BNE   SETRC12 .                MORE THAN ONE, OR NO DDCARD
         MVI   JFCB,X'04' .             FIRST BYTE OF VTOC NAME
         MVC   JFCB+1(43),JFCB .        CREATE VTOC NAME BY PROPOGATION
         OI    JFCB+JFCBTSDM,X'0A' .    REQUEST 'NO RETURN TO QUEUE' &
*                                         'NO REVERSE MERGE TO DSCB'
         MVC   VOLSER,JFCB+JFCBVOLS .   SAVE VOLUME SERIAL NUMBER
         EJECT
*        OPEN  DCB,TYPE=J               OPEN FOR INPUT
         OPEN  DCB,TYPE=J .             OPEN FOR INPUT
         SPACE 1
         TM    DCB+DCBOFLGS,X'10' .     DID IT OPEN OKAY/Q
         BZ    SETRC8 .                 BRANCH IF NOT
* GET 4K FOR BLDL, ABEND, AND ANYBODY ELSE THAT NEEDS IT
*        GETMAIN EC,LV=4096,A=HIGHRBLK
         GETMAIN EC,LV=4096,A=HIGHRBLK .
         SPACE 1
         LTR   R15,R15 .                DID I GET RESERVED STORAGE/Q
         BNZ   SETRC36 .                BRANCH IF NOT
         SPACE 1
* DO A GETMAIN FOR ALL STORAGE
*        GETMAIN VC,LA=SIZES,A=COREADDR
         GETMAIN VC,LA=SIZES,A=COREADDR .
         SPACE 1
         LR    R6,R15 .                 SAVE RETURN CODE PAST FREEMAIN
         SPACE 1
* RELEASE THE 4K RESERVE
*        FREEMAIN E,LV=4096,A=HIGHRBLK
         FREEMAIN E,LV=4096,A=HIGHRBLK .
         SPACE 1
         LTR   R6,R6 .                  DID I GET THE BUFFER STORAGE/Q
         BNZ   SETRC36 .                NO CORE FOR DATA
         SPACE 1
         LM    R14,R15,COREADDR .       LOAD ADDRESS AND LENGTH
         LR    R4,R14 .                 SAVE A(BUFFER AREA)
         LR    R5,R15 .                 SAVE BUFFER AREA LENGTH
         AIF   ('&SYSTEM' NE '370').NOT370A
         SR    R1,R1 .                  USE ZERO FILL
         MVCL  R14,R0 .                 CLEAR GETMAIN AREA
         AGO   .END360A .
.NOT370A ANOP
         LR    R1,R14 .                 LOAD GETMAIN AREA ADDRESS
         AR    R15,R14 .                ADD ADDRESS TO LENGTH = A(END)
         LA    R14,256 .                MAXIMUM LENGTH FOR XC INST.
         SR    R15,R14 .                BACK UP 256 BYTES INTO AREA
         CR    R1,R15 .                 END BELOW START/Q          R003
         BH    *+14 .                   BRANCH LT 256 BYTES TO ZEROR003
         XC    0(256,R1),0(R1) .        ZERO 256 BYTES OF AREA
         BXLE  R1,R14,*-6 .             BRANCH UNTIL WHOLE AREA ZERO
         AR    R15,R14 .                GET TO VERY END AGAIN
         SR    R15,R1 .                 MINUS NEXT ADDRESS TO ZERO
         BNP   *+10 .                   BRANCH IF NO FRACTION OF 256
         BCTR  R15,0 .                  SUBTRACT 1 FOR EX TO XC INST.
         EX    R15,XCLR .               ZERO REMAINING BYTES
.END360A ANOP
         EJECT
* CALCULATE HOW MANY BUFFERS WE HAVE
         LR    R15,R5 .                 LOAD LENGTH GOTTEN
         SH    R15,H24 .                MINUS SIDE,TIC,RDCOUNT CCWS
         LA    R1,8(,R9) .              L'BUFFER+L'CCW TO FILL BUFFER
         SR    R14,R14 .                ZERO FOR DIVISION
         ST    R14,HIH2OBLK .           INITIALIZE FIELD TO ZERO
         DR    R14,R1 .                 HOW MANY BUFFERS FIT IN CORE/Q
* SINCE GETMAIN WAS FOR AT LEAST 1 BUFFER, NO TEST FOR ZERO IS MADE
         LR    R1,R15 .                 SAVE NUMBER OF BUFFERS IN R15
* GENERATE THE CHANNEL PGM
         SLL   R1,3 .                   TIMES 8 (1 CCW PER BUFFER)
* R1 = NUMBER OF BUFFERS * CCW PGM LENGTH PER BUFFER (8) = NUMBER OF
*        CCW PROGRAM BYTES REQUIRED TO READ DATA TO FILL ALL BUFFERS.
         ST    R4,CPGMADDR .            STORE IN IOB
         MVC   MDL1CCW2+1(3),CPGMADDR+1 MOVE TIC ADDRESS INTO CCW
         MVC   0(16,R4),MDL1CCW1 .      MOVE FIRST TWO CCWS
         LA    R4,16(,R4) .             INCREMENT TO OPEN SPOT IN CHAIN
* R1 = LENGTH OF READ CCW'S + RDCOUNT + START ADDR = BUFFER START ADDR
         LA    R1,8(R1,R4) .            LOAD ADDRESS OF FIRST BUFFER
         ST    R1,BUFFADDR .            STORE FOR LATER USE
         MVC   MDL2CCW1+1(3),BUFFADDR+1 MOVE A(FIRST BUFFER) TO READCCW
         LM    R0,R1,MDL2CCW1 .         LOAD CCW INTO REGISTERS
         LA    R14,8 .                  LOAD CONSTANT INTO REGISTER
GENCCW   EQU   * .
         STM   R0,R1,0(R4) .            STORE CCW INTO CHANNEL PGM
         AR    R0,R9 .                  INCREMENT ADDRESS TO NEXT BUFFR
         AR    R4,R14 .                 A(NEXT OPEN SPOT IN CCW CHAIN)
         BCT   R15,GENCCW .             BACK FOR NEXT READ CCW
         MVC   0(8,R4),MDL3CCW1 .       MOVE READCOUNT FOR NEXT RECORD
         LA    R0,X'100' .              SET TTRK = 00000100
         ST    R0,FW .                  STORE FOR EXCP CALCULATIONS
         L     R1,DCB+DCBDEBAD .        LOAD A(DEB) TO GET EXTENT INFO
         MVC   MBBCCHHR+3(4),DEBSTRCC(R1) MOVE CCHH OF START-OF-EXTENT
         MVI   MBBCCHHR+7,X'01' .       START WITH R1 TO READ F4 DSCB
         BAL   R7,EXCP .                GO FILL BUFFERS
         AR    R2,R1 .                  GET A(F4 DSCB)
         TM    CNTRL,KEYS .             DID WE READ WITH KEYS/Q
         BO    CCWWKEYS .               BRANCH IF YES
         SH    R2,=H'44' .              BACK UP AND PRETEND IF NOT
CCWWKEYS EQU   * .
         SR    R1,R1 .                  ZERO REGISTER TO START WITH
         IC    R1,DS4DEVDT(,R2) .       LOAD NUMBER OF DSCBS PER TRACK
         STH   R1,BLKSPER .             SAVE IN A SAFE PLACE
         MVC   MBBCCHHR+3(5),DS4HPCHR(R2) MOVE HIGHEST CCHHR USED BY F1
         BAL   R7,CHRCNVRT .            GO GET TTR OF HIGHEST F1 EVER
         LH    R14,TTR0 .               LOAD TT
         MH    R14,BLKSPER .            TIMES BLOCKS PER TRACK
         SR    R15,R15 .                ZERO R15
         IC    R15,TTR0+2 .             LOAD R NUMBER
         LA    R14,1(R14,R15) .         GIVE RC=24 AFTER HIGHH2O DSCB
         ST    R14,HIH2OBLK .           SAVE FOR LATER
         BAL   R7,TESTH2O .             GO GET READY FOR RC=24
         OI    CNTRL,READON .           OKAY FOR READ NOW
         B     SETRC0 .                 NORMAL ENDING
         EJECT
GET      EQU   * .
         TM    CNTRL,READON .           IS IT OKAY TO READ/Q
         BZ    SETRC28 .                NO, SET INVALID SEQUENCE CODE
         LM    R1,R3,READREGS .         RELOAD REGISTERS
* R1 = A(LAST DATA BLOCK RETURNED TO CALLER)
* R2 = LENGTH OF THE BUFFERS
* R3 = A(LAST BUFFER IN CORE)
BXLETEST EQU   * .
         BXLE  R1,R2,STREGS .           GET NEXT LREC
         TM    CNTRL,HIF1DSCB .         HERE BECAUSE OF HIGHEST F1/Q
         BO    SETRC24 .                BRANCH IF YES
         TM    CHNLSTUS,CHNLEND+DVCEND+UNITECP WAS END OF FILE HIT/Q
         BO    SETRC4 .                 BRANCH IF YES
         MVC   MBBCCHHR+3(5),CCHHR .    SET IOB UP FOR NEXT EXCP
         BAL   R7,CHRCNVRT .            GO CONVERT CCHHR TO TTR0
         MVC   FW,TTR0 .                MOVE FOR EXCP CALCULATIONS
         BAL   R7,EXCP .                GO FILL BUFFERS
         B     BXLETEST .               GO RETRY THE 'GET'
STREGS   EQU   * .
         STM   R1,R3,READREGS .         SAVE REGISTERS FOR NEXT GET
         B     SETRC0 .                 NORMAL END
         SPACE 1
GETBYCHR EQU   * .
         TM    CNTRL,READON .           IS IT OKAY TO READ/Q
         BZ    SETRC28 .                NO, SET INVALID SEQUENCE CODE
         MVC   MBBCCHHR+3(5),0(R1) .    MOVE CCHHR OF REQUIRED BLOCK
         BAL   R7,CHRCNVRT .            GO CONVERT TO TTR0
         SR    R0,R0 .                  ZERO REGISTER 0
         IC    R0,TTR0+2 .              LOAD R OF TTR
         LH    R1,TTR0 .                LOAD TT OF TTR0
         MH    R1,BLKSPER .             NUMBER OF BLOCKS ON TT TRKS
         AR    R1,R0 .                  ADD R BLOCKS TO TT*BLKSPER
         C     R1,LOWRBLK .             IS THE BLOCK I WANT IN CORE/Q
         BL    LOCATE .                 BRANCH IF LOWER THAN IN CORE
         C     R1,HIGHRBLK .            IS THE BLOCK I WANT IN CORE/Q
         BNL   LOCATE .                 BRANCH IF TOO HIGH
         S     R1,LOWRBLK .             SUBTRACT BEGIN RELATIVE BLOCKNO
         MH    R1,READREGS+6 .          MULTIPLY BY BUFFER LENGTH
         A     R1,BUFFADDR .            ADD START ADDRESS = BUFFER WANT
         B     SETRC0 .                 GO SET RETURN CODE
         SPACE 1
LOCATE   EQU   * .
*        OBTAIN CAMLST3                 GET DSCB BY ADDRESS
         OBTAIN CAMLST3                 GET DSCB BY ADDRESS
         SPACE 1
         LTR   R15,R15 .                TEST FOR SUCCESSFUL
         BNZ   ABND1000 .               BAD BAD BAD
         LA    R1,DSCB .                LOAD A(KEY AND DATA)
         TM    CNTRL,KEYS .             WERE KEYS REQUESTED/Q
         BO    SETRC0 .                 BRANCH IF YES
         LA    R1,DSCB+44 .             LOAD A(NO KEYS, JUST DATA)
         B     SETRC0 .                 GO SET RETURN CODE
          EJECT
CLOSE    EQU   * .
         TM    DCB+DCBOFLGS,X'10' .     IS IT OPEN/Q
         BZ    SETRC28 .                NO
         SR    R15,R15 .                ZERO REGISTER
         C     R15,COREADDR .           SHOULD I DO A FREEMAIN/Q
         BE    NOFREE .                 BRANCH IF NOT
*        FREEMAIN V,A=COREADDR
         FREEMAIN V,A=COREADDR .
         SPACE 1
         XC    COREADDR,COREADDR .      ZERO SO ONLY 1 FREEMAIN DONE
NOFREE   EQU   * .
*        CLOSE DCB
         CLOSE DCB .
         SPACE 1
         MVI   CNTRL,RESET .            RESET CONTROL BITS
         B     SETRC0 .                 NORMAL END
         EJECT
SETRC0   EQU   * .
         SR    R15,R15 .                SET RETURN CODE TO ZERO
         B     RETURN .                 RETURN TO THE USER
SETRC4   EQU   * .
         LA    R15,4 .                  SET RETURN CODE
         B     PRERETRN .               GO RESET READ OK SWITCH & EXIT
SETRC8   EQU   * .
         LA    R15,8 .                  SET RETURN CODE
         B     PRERETRN .               GO RESET READ OK SWITCH & EXIT
SETRC12  EQU   * .
         LA    R15,12 .                 SET RETURN CODE
         B     PRERETRN .               GO RESET READ OK SWITCH & EXIT
SETRC16  EQU   * .
         LA    R15,16 .                 SET RETURN CODE
         B     PRERETRN .               GO RESET READ OK SWITCH & EXIT
SETRC20  EQU   * .
         LA    R15,20 .                 SET RETURN CODE
         B     PRERETRN .               GO RESET READ OK SWITCH & EXIT
SETRC24  EQU   * .
         ST    R1,READREGS .            UPDATE A(NEXT DSCB) TO RETURN
         NI    CNTRL,255-HIF1DSCB .     RESET FLAG ABOUT HIGHEST F1
         MVC   READREGS+8(4),TRUEREGS . RESTORE TRUE UPPER LIMIT
         LA    R15,24 .                 SET RETURN CODE
         B     RETURN .                 RETURN TO USER
SETRC28  EQU   * .
         LA    R15,28 .                 SET RETURN CODE
         B     PRERETRN .               GO RESET READ OK SWITCH & EXIT
SETRC36  EQU   * .
         XC    COREADDR,COREADDR .      ZERO TO STOP FREEMAIN IN CLOSE
         LA    R15,36 .                 SET RETURN CODE
PRERETRN EQU   * .
         MVI   CNTRL,RESET .            MUST CLOSE AND OPEN
RETURN   EQU   * .
         L     R13,4(,R13) .            RELOAD REG 13
         L     R14,12(,R13) .           LOAD RETURN ADDRESS
         LM    R2,R12,28(R13) .         RELOAD REGISTERS
         BR    R14 .                    RETURN TO USER
         EJECT
         CNOP   0,4 .
ABND1000 EQU   * .
         ST    R1,* .
*        ABEND 1000,DUMP
         ABEND 1000,DUMP .
         SPACE 3
CHRCNVRT EQU   *
         STM   R0,R15,8(R13) .          NON-STANDARD SAVE
         L     R15,16 .                 A(CVT)
         L     R15,CVTPRLTV(,R15) .     A(CCHHR-TO-TTR CONVERT ROUTINE)
         L     R1,DCB+DCBDEBAD .        LOAD A(DEB)
         LA    R2,MBBCCHHR .            LOAD OUTPUT ADDRESS
         LR    R8,R13 .                 SAVE SAVE AREA ADDRESS
         BALR  R14,R15 .
* REGISTERS 0-2 AND 9-15 ARE USED BY TTR CONVERT, AND NOT RESTORED
         DROP  R13
         USING VTOCACCS,R8
         ST    R0,TTR0 .                SAVE TTR0 IF CCHHR-TO-TTR
         LM    R0,R15,8(R8) .           RESTORE REGISTERS
         DROP  R8
         USING VTOCACCS,R13
         BR    R7 .                     RETURN TO USER
         EJECT
EXCP     EQU   * .
*        EXCP  IOB
         EXCP  IOB .
         SPACE 1
*        WAIT  ECB=ECB
         WAIT  ECB=ECB .
         SPACE 1
         CLI   ECB,X'7F' .              WAS IT A NORMAL END/Q
         BE    EXCPOKAY .               BRANCH IF NORMAL
         CLI   ECB,X'42' .              WAS IT AN EXTENT VIOLATION/Q
         BE    EXTNTVIO .               YES, END OF DATA SET FOUND
         CLI   ECB,X'44' .              WAS IT INTERCEPTED/Q
         BE    EXCP .                   REISSUE IF SO
         CLI   ECB,X'41' .              WAS IT AN I/O ERROR/Q
         BNE   SETRC16 .                IF NOT, SOME OTHER ERROR
         SPACE 3
* ECB POSTED WITH I/O ERROR. IF WE GET
*    DEVICE END + CHNNEL END + UNIT EXCEPTION
*    THEN WE FOUND AN END-OF-FILE INDICATOR
         SPACE 3
         TM    CHNLSTUS,DVCEND+CHNLEND+UNITECP .WAS IT AN END OF FILE/Q
         BNO   SETRC16 .                BRANCH IF NOT
EXTNTVIO EQU   * .
         MVI   CHNLSTUS,CHNLEND+DVCEND+UNITECP SET END-OF-FILE STATUS
         EJECT
EXCPOKAY EQU   * .
         L     R3,IOB+8 .               LOAD A(LAST CCW EXEC'D +8)
         LA    R3,0(,R3) .              ZERO HIGH BYTE
         SH    R3,H8 .                  BACK UP ONE CCW LENGTH
         L     R15,CPGMADDR .           LOAD START OF CCW PGM ADDRESS
         LA    R15,16(,R15) .           LOAD A(FIRST READ CCW)
         SR    R3,R15 .                 LENGTH OF READ CCW'S EXECUTED
         BNP   SETRC4 .                 NO BUFFER FILLED = END-OF-FILE
         SRL   R3,3 .                   DIVIDE BY 8 = NUMBER OF READS
         SR    R0,R0 .                  ZERO REGISTER ZERO
         IC    R0,FW+2 .                PICK UP RECORDS ON LAST TRACK
         LH    R1,FW .                  LOAD NUMBER OF FULL TRACKS USED
         MH    R1,BLKSPER .             NUMBER OF BLOCKS ON TRACKS USED
         AR    R1,R0 .                  RELATIVE BLOCK ADDRESS
         ST    R1,LOWRBLK .             SET NEW LOWER LIMIT
         AR    R1,R3 .                  ADD NUMBER NOW IN CORE
         ST    R1,HIGHRBLK .            SAVE
         BCTR  R3,0 .                   MINUS 1 TO GET DISPLACEMENT
         MH    R3,READREGS+6 .          NUMBER TIMES LENGTH OF EACH
         L     R1,BUFFADDR .            LOAD A(FIRST FILLED BUFFER)
         AR    R3,R1 .                  PLUS START = A(LAST BUFFER FULL
         L     R2,READREGS+4 .          LOAD LENGTH OF EACH ENTRY
         SR    R1,R2 .                  ADJUST BACKWARDS ONE LENGTH
         STM   R1,R3,READREGS .         SAVE THE INFORMATION
TESTH2O  EQU   * .
         NI    CNTRL,255-HIF1DSCB .     ASSUME HI F1 NOT IN CORE
         CLC   HIH2OBLK,LOWRBLK .       IS HIGHEST F1 BELOW IN-CORE/Q
         BLR   R7 .                     YES, USER READING TO EOF
         CLC   HIH2OBLK,HIGHRBLK .      IS HIGHEST F1 ABOVE IN-CORE/Q
         BHR   R7 .                     YES, NOT READ IN YET
         ST    R3,TRUEREGS .            SAVE ACTUAL IN-CORE LIMIT
         L     R3,HIH2OBLK .            LOAD RELATIVE BLOCK NUMBER
         S     R3,LOWRBLK .             MINUS IN-CORE LOW RELBLKNO
         MH    R3,READREGS+6 .          TIMES LENGTH = DISPLACEMENT
         A     R3,BUFFADDR .            PLUS START = A(CORE LOCATION)
         ST    R3,READREGS+8 .          STOP WHEN WE 'GET' THERE
         OI    CNTRL,HIF1DSCB .         LEAVE A NOTE IN THE MILK BOTTLE
         BR    R7 .                     RETURN TO USER
         AIF   ('&SYSTEM' EQ '370').NOT360B
XCLR     XC    0(0,R1),0(R1) .          SUBJECT OF EX INSTRUCTION
.NOT360B ANOP
         EJECT
IOBPREFX DC    0D'0',X'21',AL3(IOBPREFX) DO NOT MOVE THIS OR NEXT 2 CRD
ECB      DC    F'0'
IOB      DC    0D'0',X'42',AL3(0),A(ECB,0,0)
CHNLSTUS EQU   IOB+12 .
CPGMADDR DC    A(0,DCB,0,0)
MBBCCHHR DC    XL8'00'
         SPACE 3 .
SIZES    DC    F'176,&MAXCORE'
FW       DC    F'0'
JOBFILE  DC    0F'0',X'87',AL3(JFCB)
         SPACE 3 .
*CAMLST3 CAMLST SEEK,MBBCCHHR+3,VOLSER,DSCB
CAMLST3  CAMLST SEEK,MBBCCHHR+3,VOLSER,DSCB
         EJECT
*DCB     DCB   DSORG=PS,MACRF=E,EXLST=JOBFILE,DDNAME=ANY,IOBAD=IOB
DCB      DCB   DSORG=PS,MACRF=E,EXLST=JOBFILE,DDNAME=ANY,IOBAD=IOB
         EJECT
***********************************************************************
*                                                                     *
*   CHANNEL COMMAND AND CHANNNEL COMMAND CODE EQUATES                 *
*                                                                     *
***********************************************************************
SILI     EQU   X'20' .                  SUPPRESS INCORRECT LENGTH INDIC
CHAIN    EQU   X'40' .             COMMAND CODE CHAINING TO NEXT CCW.
SRCHIDEQ EQU   X'31' .                  SEARCH IDENTIFIER EQUAL
TIC      EQU   X'08' .                  TRANSFER IN CHANNEL
RDCOUNT  EQU   X'12' .                  READ COUNT
RDDATA   EQU   X'06' .                  READ DATA
RDKYDATA EQU   X'0E' .                  READ KEY AND DATA
MULTITRK EQU   X'80' .                  MULTIPLE TRACK MODE INDICATOR
MDL1CCW1 CCW   SRCHIDEQ,MBBCCHHR+3,CHAIN+SILI,5 .ONE OF TWO
MDL1CCW2 CCW   TIC,*-8,CHAIN+SILI,1 .       TWO OF TWO
MDL2CCW1 CCW   RDDATA+MULTITRK,0,CHAIN,0
MDL3CCW1 CCW   RDCOUNT+MULTITRK,CCHHR,SILI,5 . READ NEXT BLOCK ADDRESS
         SPACE 3 .
H8       DC    H'8'
H20      DC    H'20'
H24      DC    H'24'
CNTRL    DC    X'00'
         SPACE 3 .
JFCB     DS    22D
         ORG   JFCB
DSCB     DS    19D
COREADDR DS    2F
LOWRBLK  DS    F
HIGHRBLK DS    F
BUFFADDR DS    F
TTR0     DS    F
HIH2OBLK DS    F
TRUEREGS DS    F
CCHHR    DS    0F,CL5
BLKSPER  DS    H
         ORG
READREGS DS    3F
VOLSER   DS    CL6
         MEND
