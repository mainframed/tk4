         MACRO
         CTLGBKUP &SYSTEM=360,&MAXCORE=16777208,&BBUFS=99,&QBUFS=50 .
         LCLA  &I .
         AIF   ('&SYSTEM' EQ '360' OR '&SYSTEM' EQ '370').SYSOK
         MNOTE 8,'SYSTEM=&SYSTEM INCORRECT - MUST BE 360 OR 370'
         MEXIT
.SYSOK   ANOP
         AIF   (&MAXCORE GE 6000 AND &MAXCORE LE 16777208).COREOK
         MNOTE 8,'MAXCORE=&MAXCORE INCORRECT - MUST BE NUMERIC AND BETWX
               EEN 6000 AND 16777208'
         MEXIT
.COREOK  ANOP
         AIF   (&BBUFS GE 1 AND &BBUFS LE 99).BBUFSOK
         MNOTE 8,'BBUFS=&BBUFS INVALID - MUST BE BETWEEN 1-99'
         MEXIT
.BBUFSOK ANOP
         AIF   (&QBUFS GE 1 AND &QBUFS LE 255).QBUFSOK
         MNOTE 8,'QBUFS=&QBUFS INVALID - MUST BE BETWEEN 1-255'
         MEXIT
.QBUFSOK ANOP
CTBK TITLE 'CTLGBKUP - CATALOG BACKUP AND RELOAD PROGRAM'
         MNOTE *,'THIS GENERATION HAS SYSTEM=&SYSTEM, BBUFS=&BBUFS,'
         MNOTE *,'   QBUFS=&QBUFS, AND MAXCORE=&MAXCORE'
*
* PURPOSE -
         SPACE 2 .
*         IN ORDER TO PROVIDE A BACKUP COPY OF THE SYSTEM CATALOG AND
*        TO RECOVER FROM A CATALOG DISASTER AT A SPEED GREATER THAN THE
*        SNAILS PACE OF IEHMOVE, THIS PROGRAM WAS WRITTEN.  THE PARM
*        FIELD CONTROLS WHICH OPERATION IS TO BE DONE AS FOLLOWS . . .
         SPACE 3 .
* DUMP -
         SPACE 2 .
*         THIS OPERATION PRODUCES A SEQUENTIAL DATA SET OF THE SYSTEM
*        CATALOG.  THE DDCARD NAMED 'CTLGDUMP' DESCRIBES THE VOLUME ON
*        WHICH THE CATALOG RESIDES.  ONLY UNIT, VOL AND DISP=OLD ARE
*        REQUIRED.  THE DDCARD NAMED 'TAPE' DESCRIBES A SEQUENTIAL DATA
*        SET, USUALLY ON TAPE, THAT IS TO RECEIVE THE CATALOG INFOR-
*        MATION.
         SPACE 3 .
* LOAD -
         SPACE 2 .
*         THIS OPERATION TAKES A PREVIOUSLY CREATED SEQUENTIAL DATA
*        SET AND WRITES THE INFORMATION INTO A SYSTEM CATALOG.  THE
*        CATALOG MAY BE NEW OR OLD, BUT IT MUST BE OF THE SAME DEVICE
*        TYPE AS ON WHICH THE ORIGINAL CATALOG RESIDED.  THE DDCARD
*        NAMED 'CTLGLOAD' DESCRIBES THE VOLUME ON WHICH THE SYSTEM
*        CATALOG RESIDES THAT IS TO BE THE RECEIVER OF THE DATA.  THE
*        DDCARD NAMED 'TAPE' DESCRIBES THE EXISTING SEQUENTIAL DATA SET
*        THAT IS TO BE LOADED INTO THE CATALOG
         SPACE 3 .
* MESSAGES -
         SPACE 2 .
*         THERE IS NO MESSAGE FILE.  ALL MESSAGES ARE PRODUCED ON THE
*        JCL LISTING VIA WTO WITH ROUTCDE=(11). ALL ARE SELF-EXPLAN-
*        ATORY, AND ALL RESULT IN A RETURN CODE OF 8, EXCEPT THE
*        'NORMAL END-OF-JOB' MESSAGE WHICH GIVES A RETURN CODE OF 0.
         EJECT
* GENERATION -
         SPACE 2 .
*         THE PROGRAM IS WRITTEN AS A MACRO, SO THAT SEVERAL PARAMETERS
*        CAN BE VARIED.  THE PARAMETERS ARE ...
*
*          SYSTEM=       PERMISSABLE VALUES = (360,370)
*                        DEFAULT VALUE = 360
*                        PURPOSE = TO CONTROL THE GENERATION OF 360 OR
*                            370 MACHINE INSTRUCTIONS.
*          MAXCORE=      PERMISSABLE VALUES = (6000 TO 16777208)
*                        DEFAULT VALUE = 16777208
*                        PURPOSE = TO LIMIT THE AMOUNT OF STORAGE THAT
*                            IS 'GETMAINED', PRIMARILY FOR OS/VS.
*          BBUFS=        PERMISSABLE VALUES = (1 TO 99)
*                        DEFAULT VALUE = 99
*                        PURPOSE = TO LIMIT THE NUMBER OF BSAM BUFFERS
*                            USED TO WRITE INTO A CATALOG.  CHAINED
*                            SCHEDULING IS USED.
*          QBUFS=        PERMISSABLE VALUES = (1 TO 255)
*                        DEFAULT VALUE = 50
*                        PURPOSE = TO LIMIT NUMBER OF QSAM BUFFERS
*                            USED TO READ OR WRITE THE SEQUENTIAL DATA
*                            SET.
         SPACE 3 .
*              NOTE - BBUFS AND QBUFS ARE UPPER LIMITS. .A SMALLER
*                    VALUE MAY BE USED IF -
*                         2) INSUFFICIENT MEMORY IS AVAILABLE OR
*                         2) DCB=BUFNO IS USED IN THE JCL FOR 'TAPE' OR
*                         3) DCB=NCP IS USED IN THE JCL FOR 'CTLGLOAD'
         SPACE 3 .
*                     MEMORY IS DIVIDED AS FOLLOWS - 1/4 TO THE INPUT
*                        FILE, 3/4 TO THE OUTPUT FILE UNLESS-
*                          BUFNO*BLKSIZE IS LESS THAN THE PORTION
*                             ASSIGNED.
         SPACE 3
*   AUTHOR         DARRELL D. WILCOX
*   INSTALLATION   KING COUNTY SYSTEMS SERVICES
*                  ROOM E-208 KING COUNTY COURTHOUSE
*                  THIRD AT JAMES STREETS
*                  SEATTLE, WA  98104
*   IF MODIFICATIONS OR CORRECTIONS ARE MADE, I WOULD GREATLY
*        APPRECIATE GETTING A COPY OF THEM.
* DATE OF LATEST REVISION -
         SPACE 1
*        2/26/74 - R001      ADDED RESERVE/RELEASE TO PROTECT FROM
*                            UPDATES WHILE PROCESSING.
*        2/27/74 - R002      CORRECTED BUG WHEN NCP IS GREATER THAN
*                            THE NUMBER OF RECORDS BEING RELOADED.
*        2/28/74 - R003      REMOVED RESTRICTION IN CODE THAT ZEROES
*                            GETMAIN AREA.  256 MINIMUM PREVIOUSLY.
*        3/1/74 - R004       CHANGES IN QSAM DCB EXIT CODE TO PREVENT
*                            DCB=BUFNO OVERRIDE FROM CAUSING 804 OR 80A
*        9/18/74 - R005      ADDED USE STATISTICS TO PROGRAM AND
*                            CHANGED BASE REG FROM R12 TO R13
*        7/25/75 - R006      CORRECTED RELOAD BUG GRACIOUSLY POINTED   X
*                            OUT BY GENE BARNS OF FRANKLIN LIFE INS.
         EJECT
CTLGBKUP CSECT
.LOOP    ANOP
R&I      EQU   &I .
&I       SETA  &I+1 .
         AIF   (&I LT 16).LOOP
DECBOSET EQU   0 .
KEYOSET  EQU   20 .
LOADBIT  EQU   X'80' .
RSRVON   EQU   X'40' .
NCPON    EQU   X'20' .
DCBFDAD  EQU   5 .
DCBTRBAL EQU   18 .
DCBBUFNO EQU   20 .
DCBBUFCB EQU   21 .
DCBDDNAM EQU   40 .                                                R001
DCBOFLGS EQU   48 .
DCBBLKSI EQU   62 .
DCBNCP   EQU   72 .
DCBLRECL EQU   82 .
JFCBTSDM EQU   52 .
JFCBIND2 EQU   87 .
JFCNCP   EQU   106 .
JFCBVOLS EQU   118 .
         EJECT
         B     72(,R15) .               BRANCH AROUND SAVE AREA    R005
         DS    17F .                    SAVE AREA                  R005
         STM   R14,R12,12(R13) .        SAVE REGISTERS
         ST    R13,4(,R15) .            SAVE A(PREVIOUS SAVE AREA) R005
         ST    R15,8(,R13) .            BACK-CHAIN SAVE AREAS      R005
         LR    R13,R15 .                LOAD BASE AND SAVE AREA REGR005
         USING CTLGBKUP,R13 .                                      R005
         L     R1,0(,R1) .              A(PARM AREA)
         CLC   DUMP(6),0(R1) .          DUMP REQUESTED/Q
         BE    PARMOKAY .               YES, BRANCH
         OI    FLAGS,LOADBIT .          NO, MUST BE LOAD
         CLC   LOAD(6),0(R1) .          LOAD REQUESTED/Q
         BNE   BADPARM .                WRONG TEXT
PARMOKAY EQU   * .
         BAL   R10,GETRSRV .            GET RESERVED CORE
         BAL   R10,GETMAIN .            GET ALL CORE
         L     R3,CORESIZE .            LOAD AMOUNT GOTTEN
         BAL   R10,FREEMAIN .           GO RELEASE THE CORE
         BAL   R10,FREERSRV .           RELEASE RESERVED CORE
         LR    R2,R3 .                  SAVE FOR A WHILE
         SRL   R3,2 .                   DIVIDE BY 4 = 1/4 TOTAL
         SR    R2,R3 .                  TOTAL - 1/4 = 3/4 OF TOTAL
         LA    R4,284 .                 L'DECB+L'(KEY+DATA)=20+(8+256)
         TM    FLAGS,LOADBIT .          WAS LOAD REQUESTED/Q
         BO    LOADCTLG .               BRANCH IF YES
         EJECT
*DUMPCTLG
*
* 3/4 OF CORE IS TO GO TO BUFFERS FOR TAPE
*
         LR    R3,R2 .                  OPEN EXIT USES R3 FOR AMOUNT
*        OPEN  (TAPE,OUTPUT)            OPEN EXIT IS USED
         OPEN  (TAPE,OUTPUT) .          OPEN EXIT IS USED
         SPACE 1
         TM    TAPE+DCBOFLGS,X'10' .    WAS OPEN SUCCESSFUL/Q
         BZ    NOTOPEN1 .               NO, BRANCH
         LA    R2,CATIN .               A(DDNAME TO RESERVE)       R001
         BAL   R10,RESERVE .            GO RESERVE DEVICE          R001
         SR    R11,R11 .                ZERO COUNTER               R005
         SR    R12,R12 .                ZERO COUNTER               R005
*        CTLG  OPENWKEY,CATIN           REQUEST OPEN FOR INPUT
         CTLG  OPENWKEY,CATIN .         REQUEST OPEN FOR INPUT
         SPACE 1
         LTR   R15,R15 .                WAS OPEN OKAY/Q
         BZ    READLOOP .               OPEN SUCCESSFUL
         CH    R15,H32 .                NO SYSCTLG ON DISK/Q
         BE    NOCTLGDS .               BRANCH IF NOT
         B     NOTOPEN2 .               SOME OTHER REASON
READLOOP EQU   * .
*        CTLG  GET                      GET CATALOG BLOCK
         CTLG  GET .                    GET CATALOG BLOCK
         SPACE 1
         CH    R15,H4 .                 WHAT IS RETURN CODE/Q
         BL    NORMAL .                 ZERO MEANS RECORD RETRIEVED
         BE    WRITSTAT .               4 MEANS END-OF-FILE        R005
         DC    H'0' .                   YECH
NORMAL   EQU   * .
         LA    R12,1(,R12) .            +1 TO TOTAL BLOCKS READ    R005
         OC    0(8,R1),0(R1) .          IS BLOCK FREE/Q            R005
         BNZ   *+8 .                    BRANCH IF IN USE           R005
         LA    R11,1(,R11) .            +1 TO FREE COUNTER         R005
         LR    R0,R1 .                  PUT ADDRESS INTO R0
*        PUT   TAPE,(0)
         PUT   TAPE,(0) .
         SPACE 1
         B     READLOOP .               GO DO NEXT
         EJECT
*
* 1/4 OF CORE IS TO GO TO BUFFERS FOR TAPE
*
LOADCTLG EQU   * .
         MVI   JFCB,X'00' .             SET FIRST BYTE TO ZERO
*        RDJFCB CATOUT                  GET JFCB FOR MODIFICATION
         RDJFCB CATOUT .                GET JFCB FOR MODIFICATION
         SPACE 1
         CLI   JFCB,X'00' .             WAS READ OKAY/Q
         BE    NOTOPEN2 .               NO, NO DD CARD I GUESS
         SR    R15,R15 .                ZERO R15
         AIF   ('&SYSTEM' NE '370').NOT370D
         ICM   R15,1,JFCB+JFCNCP .      LOAD USER SPECIFIED NCP
         AGO   .END360D
.NOT370D ANOP
         IC    R15,JFCB+JFCNCP .        LOAD NUMBER OF CHANNEL PROGRAMS
         LTR   R15,R15 .                USER SPECIFIED ANY/Q
.END360D ANOP
         BZ    NONCP .                  BRANCH IF NONE SPECIFIED
         OI    FLAGS,NCPON .            YES, DO NOT ALTER NUMBER
         STH   R15,NCPNUMBR .           SAVE FOR LATER USE
         MH    R15,H380 .               NCP*(ICB+DECB+KEY+DATA)=380
         LA    R15,96(,R15) .           ADD ONE IOB ALSO
         AR    R3,R2 .                  1/4 + 3/4 = TOTAL CORE
         SR    R3,R15 .                 TOTAL - BSAMBUFS = QSAMBUFS
         B     COREOK .                 GO OPEN TAPE FILE NOW
NONCP    EQU   * .
         C     R2,MAXCORE .             IS 3/4 MORE THAN CAN BE USED/Q
         BNH   COREOK .                 BRANCH IF NOT
         AR    R3,R2 .                  GET TOTAL AMOUNT
         S     R3,MAXCORE .             LEAVE ENOUGH FOR MAX USE
         EJECT
COREOK   EQU   * .
*        OPEN  TAPE                     OPEN EXIT IS USED
         OPEN  TAPE .                   OPEN EXIT IS USED
         SPACE 1
         TM    TAPE+DCBOFLGS,X'10' .    IS IT OPEN/Q
         BZ    NOTOPEN1 .               BRANCH IF NOT
         TM    FLAGS,NCPON .            USER SPECIFIED NCP/Q
         BO    DOOPEN .                 BRANCH IF YES
         BAL   R10,GETRSRV .            GET RESERVED CORE
         BAL   R10,GETMAIN .            GET ALL CORE
         L     R3,CORESIZE .            LOAD AMOUNT GOTTEN
         BAL   R10,FREEMAIN .           RELEASE ALL CORE
         BAL   R10,FREERSRV .           RELEASE RESERVED CORE
         SR    R2,R2 .                  ZERO R2
         D     R2,F380 .                DIVIDE (ICB+DECB+KEY+DATA)
         LA    R2,&BBUFS .              LOAD MAXIMUM NUMBER OF BUFFERS
         CR    R3,R2 .                  TOO MANY BUFFERS/Q
         BNH   *+6 .                    BRANCH IF NOT
         LR    R3,R2 .                  LOAD MAXIMUM NUMBER
         STH   R3,NCPNUMBR .            BSAM USES NCP FOR IOB NUMBER
* SUPPOSEDLY, ONLY 99 CAN BE SPECIFIED FOR NCP, BUT IF A LARGER VALUE
*   IS PUT IN THERE BY THE PROGRAM, OPEN CONSTRUCTS ICB'S FOR WHATEVER
*   NUMBER WAS GIVEN.
         STC   R3,CATOUT+DCBNCP .       STORE NUMBER INTO NCP IN DCB
         EJECT
DOOPEN   EQU   * .
         LA    R2,CATOUT+DCBDDNAM .     A(DDNAME TO RESERVE)       R001
         BAL   R10,RESERVE .            GO RESERVE DEVICE          R001
         MVC   JFCB(L'Q),Q .            MOVE SYSCTLG DSNAME TO JFCBR001
         MVC   JFCB+L'Q(44-L'Q),JFCB+L'Q-1 BLANK OUT REST OF DSN   R001
*        OBTAIN CAMLST                  PREVENT ABEND 213 BY PROVING   X
                                        DSCB EXISTS ON DISK
         OBTAIN CAMLST .                PREVENT ABEND 213 BY PROVING   X
                                        DSCB EXISTS ON DISK
         SPACE 1
         LTR   R15,R15 .                CHECK RETURN CODE FOR OKAY
         BNZ   NOCTLGDS .               BRANCH IF READ FAILED
         OI    JFCB+JFCBTSDM,X'02' .    REQUEST 'NO MERGE TO DSCB'
         NI    JFCB+JFCBIND2,X'3F' .    TURN OFF ALL DISPOSITION BITS
         OI    JFCB+JFCBIND2,X'40' .    TURN ON 'DISP=OLD' BITS
*        OPEN  (CATOUT,OUTPUT),TYPE=J
         OPEN  (CATOUT,OUTPUT),TYPE=J .
         SPACE 1
         TM    CATOUT+DCBOFLGS,X'10' .  IS IT OPEN/Q
         BZ    NOTOPEN2 .               BRANCH IF NOT
         BAL   R10,GETRSRV .            GET RESERVED CORE
         BAL   R10,GETMAIN .
         BAL   R10,FREERSRV .           RELEASE RESERVED CORE
         LM    R14,R15,COREADDR .       LOAD A(AREA),F'LENGTH OF AREA'
         AIF   ('&SYSTEM' NE '370').NOT370A
         SR    R1,R1 .                  USE ZERO FILL
         MVCL  R14,R0 .                 ZERO AREA
         AGO   .END360A .
.NOT370A ANOP
         LR    R1,R14 .                 LOAD GETMAIN AREA ADDRESS
         AR    R15,R14 .                ADD ADDRESS TO LENGTH = A(END)
         LA    R14,256 .                MAXIMUM LENGTH FOR XC INST.
         SR    R15,R14 .                BACK UP 256 BYTES INTO AREA
         CR    R1,R15 .                 COMPARE START TO FINISH    R003
         BH    *+14 .                   B IF LESS THAN 256 TO ZERO R003
         XC    0(256,R1),0(R1) .        ZERO 256 BYTES OF AREA
         BXLE  R1,R14,*-6 .             BRANCH UNTIL WHOLE AREA ZERO
         AR    R15,R14 .                GET TO VERY END AGAIN
         SR    R15,R1 .                 MINUS NEXT ADDRESS TO ZERO
         BNP   *+10 .                   BRANCH IF NO FRACTION OF 256
         BCTR  R15,0 .                  SUBTRACT 1 FOR EX TO XC INST.
         EX    R15,XCLR .               ZERO REMAINING BYTES
.END360A ANOP
         L     R15,CORESIZE .           LOAD AMOUNT GOTTEN
         SR    R14,R14 .                ZERO R14
         DR    R14,R4 .                 DIVIDE BY 284=(DECB+KEY+DATA)
         LTR   R5,R15 .                 LOAD AND TEST # BUFFERS
         BNP   NOCORE .                 MUST HAVE AT LEAST ONE
         CH    R5,NCPNUMBR .            MORE THAN CHANNEL PROGRAMS/Q
         BNH   *+8 .                    BRANCH IF NOT MORE
         LH    R5,NCPNUMBR .            NCP IS UPPER LIMIT ON BUFFERS
         L     R3,COREADDR .            LOAD START ADDRESS OF BUFFERS
         SPACE 3 .
         EJECT
PRIMWRIT EQU   * .
*        GET   TAPE,KEYOSET(,R3)        FILL DATA AREA IN BUFFER AREA
         GET   TAPE,KEYOSET(,R3) .      FILL DATA AREA IN BUFFER AREA
         SPACE 1
*        WRITE DECBOSET(,R3),SF,CATOUT,KEYOSET(,R3),MF=E WRITE DATA
         WRITE DECBOSET(,R3),SF,CATOUT,KEYOSET(,R3),MF=E WRITE DATA
         SPACE 1
         AR    R3,R4 .                  LOAD A(NEXT BUFFER AREA)
         BCT   R5,PRIMWRIT .            DO ALL BUFFERS
         SR    R3,R4 .                  BACK UP TO LAST BUFFER
         LR    R5,R3 .                  R5=A(LAST BUFFER)
         SPACE 3 .
PREWRITE EQU   * .
         L     R3,COREADDR .            RELOAD START ADDRESS
WRITLOOP EQU   * .
*        CHECK DECBOSET(,R3)            WAIT FOR BSAM TO COMPLETE
         CHECK DECBOSET(,R3) .          WAIT FOR BSAM TO COMPLETE
         SPACE 1
*        GET   TAPE,KEYOSET(,R3)        REFILL DATA AREA
         GET   TAPE,KEYOSET(,R3) .      REFILL DATA AREA
         SPACE 1
*        WRITE DECBOSET(,R3),SF,MF=E    WRITE DATA AGAIN FROM BUFFER
         WRITE DECBOSET(,R3),SF,MF=E .  WRITE DATA AGAIN FROM BUFFER
         SPACE 1
         BXLE  R3,R4,WRITLOOP .         ONWARD TO NEXT BUFFER
         B     PREWRITE .               WRAP TO NEXT BUFFER
         EJECT
WRITSTAT EQU   * .                                                 R005
         CVD   R12,JFCB .               CONVERT INTO DECIMAL       R005
         ED    READFLD,JFCB+4 .         EDIT INTO MESSAGE LINE     R005
*BLKSREAD WTO  ' 9,999,999 BLOCKS READ',ROUTCDE=(11) .             R005
BLKSREAD WTO   ' 9,999,999 BLOCKS READ',ROUTCDE=(11) .             R005
         ORG   BLKSREAD+8 .                                        R005
READFLD  DC    X'40206B2020206B202120' .                           R005
         ORG   , .                                                 R005
         CVD   R11,JFCB .               CONVERT INTO DECIMAL       R005
         ED    FREEFLD,JFCB+4 .         EDIT INTO MESSAGE LINE     R005
*BLKSFREE WTO  ' 9,999,999 BLOCKS FREE',ROUTCDE=(11) .             R005
BLKSFREE WTO   ' 9,999,999 BLOCKS FREE',ROUTCDE=(11) .             R005
         ORG   BLKSFREE+8 .                                        R005
FREEFLD  DC    X'40206B2020206B202120' .                           R005
         ORG   , .                                                 R005
         SR    R12,R11 .                    TOTAL-FREE=USED        R005
         CVD   R12,JFCB .               CONVERT INTO DECIMAL       R005
         ED    USEDFLD,JFCB+4 .         EDIT INTO MESSAGE LINE     R005
*BLKSUSED WTO  ' 9,999,999 BLOCKS USED',ROUTCDE=(11) .             R005
BLKSUSED WTO   ' 9,999,999 BLOCKS USED',ROUTCDE=(11) .             R005
         ORG   BLKSUSED+8 .                                        R005
USEDFLD  DC    X'40206B2020206B202120' .                           R005
         ORG   , .                                                 R005
         SPACE 3
EOF      EQU   * .
*        CTLG  CLOSE                    CLOSE INPUT FROM CATALOG
         CTLG  CLOSE .                  CLOSE INPUT FROM CATALOG
         SPACE 1
         LA    R2,TAPE .                A(DCB)
         BAL   R10,CLOSE .              GO CLOSE FILE
         BAL   R10,FREEPOOL .           GO FREEPOOL FILE
         TM    FLAGS,LOADBIT .          DOING A DUMP/Q
         BZ    DUMPING .                YES, NO FREEMAIN OR CHECKS
         LR    R10,R3 .                 SAVE CURRENT ADDRESS
*        R5 WILL CONTAIN EITHER THE NUMBER OF BUFFERS REMAINING TO R002
*              BE PRIMED, OR IF ALL PRIMED, THE A(LAST BUFFER)     R002
         LH    R14,NCPNUMBR .           LOAD NUMBER OF BUFFERS     R002
         CR    R14,R5 .                 HOW MANY BUFFERS PRIMED/Q  R002
         BE    IODONE .                 ZERO WERE PRIMED           R002
         BH    PREEOF .                 ONLY SOME WERE PRIMED      R002
         BXLE  R3,R4,EOFCHECK .         ALL BUFFERS WERE PRIMED
PREEOF   EQU   * .
         L     R3,COREADDR .            LOAD START OF BUFFERS
EOFCHECK EQU   * .
         CR    R10,R3 .                 BACK TO CURRENT YET/Q
         BE    IODONE .                 BRANCH IF YES, ALL DONE
*        CHECK DECBOSET(,R3)            WAIT FOR I/O TO STOP
         CHECK DECBOSET(,R3) .          WAIT FOR I/O TO STOP
         SPACE 1
         BXLE  R3,R4,EOFCHECK .         WAIT FOR ALL BUFFERS
         B     PREEOF .                 WRAP AROUND TO START
IODONE   EQU   * .
         BAL   R10,FREEMAIN .           RELEASE CORE GOTTEN
         MVI   CATOUT+DCBFDAD+7,X'FF' . FIX UP SO CTLG MGMT WORKS OKAY
         XC    DCBTRBAL(2,R2),DCBTRBAL(R2) ZERO TRACK BALANCE
         LA    R2,CATOUT .              LOAD A(DCB)
         BAL   R10,CLOSE .              GO CLOSE FILE
         EJECT
DUMPING  EQU   * .
*        DEQ   (Q,Q,12,SYSTEMS) .                                  R001
         DEQ   (Q,Q,12,SYSTEMS) .                                  R001
         SPACE 1
*        WTO   '      NORMAL END-OF-JOB',ROUTCDE=(11)
         WTO   '      NORMAL END-OF-JOB',ROUTCDE=(11)
         SPACE 1
RETURN   EQU   * .
         L     R13,4(,R13) .            RELOAD A(OLD SAVE AREA)    R005
         LM    R14,R12,12(R13) .        RELOAD REGISTERS
         LA    R15,0 .                  DO NOT MOVE THIS OR NEXT CARD
RETCODE  EQU   *-1 .                    RETURN CODE BYTE
         BR    R14 .                    RETURN TO USER
         EJECT
QSAMEXIT EQU   * .
* R3 IS ASSUMED TO CONTAIN THE AMOUNT OF CORE FOR TAPE BUFFERS
*        INSTRUCTIONS REMOVED                                      R004
         LH    R9,DCBBLKSI(,R1) .       LOAD BLKSIZE FROM DCB
         LH    R7,DCBLRECL(,R1) .       LOAD LRECL FROM DCB
         SR    R8,R8 .                  ZERO FOR DIVISION
         DR    R8,R7 .                  BLKSIZE DIVIDED BY LRECL
         LTR   R9,R9 .                  ANY BLKSIZE SUPPLIED/Q
         BNZ   *+8 .                    BRANCH IF YES
         LA    R9,1 .                   MUST HAVE AT LEAST EQUAL TO 1
         MH    R9,DCBLRECL(,R1) .       BLK FACTOR * LRECL = BLKSIZE
         STH   R9,DCBBLKSI(,R1) .       SAVE IN DCB
         LA    R9,100(,R9) .            ADD IOB/ICB LENGTH TO BLKSIZE
         SR    R2,R2 .                  ZERO R2
         DR    R2,R9 .                  DIVIDE CORE AVAILABLE BY
*                                        (BLKSIZE+ICB/IOB+CCW CHAIN)
         LTR   R3,R3 .                  AT LEAST ONE/Q
         BNZ   *+8 .                    YES, AT LEAST ONE
         LA    R3,1 .                   MUST HAVE AT LEAST ONE
         LA    R2,&QBUFS .              LOAD MAXIMUM NUMBER OF BUFFERS
         CLI   DCBBUFNO(R1),X'00' .     BUFNO EXPLICITLY GIVEN/Q   R004
         BE    *+8 .                    NO, USE ASSEMBLED MAXIMUM  R004
         IC    R2,DCBBUFNO(,R1) .       USE OVERRIDE VALUE         R004
         CR    R3,R2 .                  TOO MANY BUFFERS/Q
         BNH   *+6 .                    BRANCH IF NOT
         LR    R3,R2 .                  LOAD MAXIMUM NUMBER
* 255 IS MAXIMUM FOR QSAM BUFFER NUMBER
         STC   R3,DCBBUFNO(,R1) .       STORE INTO DCB
         BR    R14 .                    RETURN TO OPEN PROCESSING
         EJECT
GETMAIN  EQU   * .
*        GETMAIN VC,LA=SIZES,A=COREADDR
         GETMAIN VC,LA=SIZES,A=COREADDR .
         SPACE 1
         LTR   R15,R15 .                WAS MINIMUM GOTTEN/Q
         BNZ   NOCORE .                 BRANCH IF NOT EVEN MINIMUM
         BR    R10 .                    RETURN
         SPACE 3 .
FREEMAIN EQU   * .
*        FREEMAIN V,A=COREADDR          RELEASE CORE
         FREEMAIN V,A=COREADDR .        RELEASE CORE
         SPACE 1
         BR    R10 .                    RETURN
         SPACE 3 .
CLOSE    EQU   * .
         TM    DCBOFLGS(R2),X'10' .     IS FILE OPEN/Q
         BZR   R10 .                    JUST RETURN IF NOT
*        CLOSE ((R2))
         CLOSE ((R2)) .
         SPACE 1
         BR    R10 .                    RETURN
         EJECT
FREEPOOL EQU   * .
         TM    DCBBUFCB+2(R2),X'01' .   DOES BUFFER POOL EXIST/Q
         BOR   R10 .                    JUST RETURN IF NOT
*        FREEPOOL (R2)
         FREEPOOL (R2) .
         SPACE 1
         BR    R10 .                    RETURN
         SPACE 3 .
GETRSRV  EQU   * .
*        GETMAIN EC,LV=4096,A=DSCB
         GETMAIN EC,LV=4096,A=DSCB .
         SPACE 1
         LTR   R15,R15 .                WAS GETMAIN SUCCESSFUL/Q
         BNZ   NOCORE .                 BRANCH IF NOT
         OI    FLAGS,RSRVON .           INDICATE RESERVED GOTTEN
         BR    R10 .                    RETURN
         SPACE 3 .
FREERSRV EQU   * .
*        FREEMAIN E,LV=4096,A=DSCB
         FREEMAIN E,LV=4096,A=DSCB .
         SPACE 1
         NI    FLAGS,255-RSRVON .       INDICATE CORE RELEASED
         BR    R10 .                    RETURN
         EJECT
RESERVE  EQU   * .                                                 R001
* R2 CONTAINS THE A(DDNAME UPON WHICH A RESERVE IS WANTED)
         L     R1,16 .                  A(CVT)                     R001
         L     R1,0(,R1) .              A(TCB POINTERS)            R001
         L     R1,4(,R1) .              A(CURRENT TCB)             R001
         L     R1,12(,R1) .             A(TIOT)                    R001
         LA    R15,24 .                 INDEX VALUE TO FIRST ENTRY R001
         SPACE 1
TIOTLOOP EQU   * .                                                 R001
         AR    R1,R15 .                 ADD LENGTH TO ENTRY ADDRESSR001
         AIF   ('&SYSTEM' NE '370').NOT370B                        R001
         ICM   R15,1,0(R1) .            PICK UP ENTRY LENGTH       R001
         AGO   .END360B                                            R001
.NOT370B ANOP                                                      R001
         IC    R15,0(,R1) .             PICK UP ENTRY LENGTH       R001
         LTR   R15,R15 .                SET THE CONDITION CODE     R001
.END360B ANOP                                                      R001
         BZ    NOTOPEN2 .               BRANCH IF AT END OF TIOT   R001
         CLC   0(8,R2),4(R1) .          IS THIS DD ENTRY WANTED/Q  R001
         BNE   TIOTLOOP .               GO TRY NEXT IF NOT         R001
         AIF   ('&SYSTEM' NE '370').NOT370C                        R001
         ICM   R15,7,17(R1) .           LOAD A(UCB)                R001
         AGO   .END360C                                            R001
.NOT370C ANOP                                                      R001
         L     R15,16(,R1) .            LOAD A(UCB)                R001
         LTR   R15,R15 .                SET CONDITON CODE          R001
.END360C ANOP                                                      R001
         BZ    NOTOPEN2 .               BRANCH IF DD DUMMY         R001
         CLI   18(R15),X'20' .          IS THIS A D.A. DEVICE/Q    R001
         BNE   NOTOPEN2 .               BRANCH IF NOT DIRECT ACCESSR001
         CLI   19(R15),X'05' .          IS THIS D.A. A DATACELL/Q  R001
         BE    NOTOPEN2 .               DATA CELL NOT SUPPORTED    R001
         ST    R15,Q+8 .                A(UCB) IS PART OF THE RNAMER001
         SPACE 3
*        RESERVE (Q,Q,E,12,SYSTEMS),UCB=Q+8 .                      R001
         RESERVE (Q,Q,E,12,SYSTEMS),UCB=Q+8 .                      R001
         SPACE 1
         LTR   R15,R15 .                TEST RETURN                R001
         BZR   R10 .                    I HAVE THE UNIT NOW        R001
         CLI   3(R15),X'08' .           DID I GET THE DEVICE/Q     R001
         BER   R10 .                    RETURN IF YES              R001
         DC    H'0' .                   YECH                       R001
         EJECT
         CNOP  0,4 .                    ALIGN
NOTOPEN1 EQU   * .
         BAL   R1,SVC35 .               ISSUE WTO, SET RETCODE, EXIT
*        WTO   'COULD NOT OPEN ''TAPE''',ROUTCDE=(11),MF=L
         WTO   'COULD NOT OPEN ''TAPE''',ROUTCDE=(11),MF=L
         SPACE 3 .
         CNOP  0,4 .                    ALIGN
NOTOPEN2 EQU   * .
         BAL   R1,SVC35 .               ISSUE WTO, SET RETCODE, EXIT
*        WTO   'COULD NOT OPEN ''CTLGDUMP'' OR ''CTLGLOAD''',          X
               ROUTCDE=(11),MF=L
         WTO   'COULD NOT OPEN ''CTLGDUMP'' OR ''CTLGLOAD''',          X
               ROUTCDE=(11),MF=L
         SPACE 3 .
         CNOP  0,4 .                    ALIGN
NOCTLGDS EQU   * .
         BAL   R1,SVC35 .               ISSUE WTO, SET RETCODE, EXIT
*        WTO   'SYSCTLG DOES NOT EXIST ON DISK',ROUTCDE=(11),MF=L
         WTO   'SYSCTLG DOES NOT EXIST ON DISK',ROUTCDE=(11),MF=L
         EJECT
         CNOP  0,4 .                    ALIGN
NOCORE   EQU   * .
*        WTO   'INSUFFICIENT CORE',ROUTCDE=(11)
         WTO   'INSUFFICIENT CORE',ROUTCDE=(11)
         SPACE 1
         TM    FLAGS,RSRVON .           IS CORE STILL RESERVED/Q
         BZ    NORSRV .                 BRANCH IF NOT
         BAL   R10,FREERSRV .           RELEASE RESERVED CORE
NORSRV   EQU   * .
         B     SETRC8 .                 GO SET RETURN CODE AND EXIT
         SPACE 3 .
         CNOP  0,4 .                    ALIGN
BADPARM  EQU   * .
         BAL   R1,SVC35 .               ISSUE WTO, SET RETCODE, EXIT
*        WTO   'PARM FIELD NOT ''DUMP'' OR ''LOAD''',ROUTCDE=(11),MF=L
         WTO   'PARM FIELD NOT ''DUMP'' OR ''LOAD''',ROUTCDE=(11),MF=L
         SPACE 3 .
SVC35    DC    0H'0' .                  ALIGN
         SVC   35 .                     ISSUE WTO SVC
SETRC8   EQU   * .
         MVI   RETCODE,X'08' .          SET RETURN CODE TO 8
         B     RETURN .                 EXIT
         AIF   ('&SYSTEM' EQ '370').NOT360B
XCLR     XC    0(0,R1),0(R1) .          SUBJECT OF EX INSTRUCTION
.NOT360B ANOP
         CNOP  0,4 .
         EJECT
*TAPE    DCB   DSORG=PS,MACRF=(GM,PM),DDNAME=TAPE,EODAD=EOF,LRECL=264, X
               RECFM=FB,EXLST=JOBFILE1
TAPE     DCB   DSORG=PS,MACRF=(GM,PM),DDNAME=TAPE,EODAD=EOF,LRECL=264, X
               RECFM=FB,EXLST=JOBFILE1
         EJECT
*CATOUT  DCB   DSORG=PS,DDNAME=CTLGLOAD,KEYLEN=8,BLKSIZE=256,LRECL=256,X
               MACRF=W,RECFM=FS,EXLST=JOBFILE2,OPTCD=C
CATOUT   DCB   DSORG=PS,DDNAME=CTLGLOAD,KEYLEN=8,BLKSIZE=256,LRECL=256,X
               MACRF=W,RECFM=FS,EXLST=JOBFILE2,OPTCD=C
         SPACE 1
         ORG   CATOUT+DCBBUFCB .
         DC    3X'00' .                 PREVENT BUFFER ACQUISITION
         ORG
*CAMLST  CAMLST SEARCH,JFCB,JFCB+JFCBVOLS,DSCB
CAMLST   CAMLST SEARCH,JFCB,JFCB+JFCBVOLS,DSCB .
         SPACE 1
JOBFILE1 DC    0F'0',X'85',AL3(QSAMEXIT)
JOBFILE2 DC    0F'0',X'87',AL3(JFCB)
F380     DC    A(96+20+8+256)           (ICB+DECB+KEY+DATA)
H380     EQU   F380+2 .
SIZES    DC    F'6000,&MAXCORE'
MAXCORE  DC    A(&BBUFS*(8+256+20+104)) NCPMAX*(KEY+DATA+DECB+ICB)
Q        DC    CL8'SYSCTLG',A(0)        FULLWORD ALIGN             R006
DUMP     DC    H'4',C'DUMP' .
LOAD     DC    H'4',C'LOAD' .
H4       EQU   LOAD .
H32      DC    H'32'
FLAGS    DC    X'00'
CATIN    DC    CL8'CTLGDUMP'
JFCB     DS    22D
DSCB     DS    19D
COREADDR DS    2F
CORESIZE EQU   COREADDR+4 .
NCPNUMBR DS    H
         MEND
