         MACRO
         CTLGACCS &SYSTEM=360,&MAXCORE=16777208 .
         LCLA  &I .
         AIF   ('&SYSTEM' EQ '360' OR '&SYSTEM' EQ '370').SYSOK
         MNOTE 8,'SYSTEM=&SYSTEM INCORRECT - MUST BE 360 OR 370'
         MEXIT
.SYSOK   ANOP
         AIF   (&MAXCORE GE 296 AND &MAXCORE LT 16777209).COREOK
         MNOTE 8,'MAXCORE=&MAXCORE INCORRECT - MUST BE NUMERIC AND BETWX
               EEN 296 AND 16777208'
         MEXIT
.COREOK  ANOP
CTLG TITLE '  C A T A L O G   A C C E S S   M E T H O D'
         MNOTE *,'THIS GENERATION HAS SYSTEM=&SYSTEM AND'
         MNOTE *,'   MAXCORE=&MAXCORE'
*
* PURPOSE -
*
*       THE PURPOSE OF THIS PROGRAM IS TO PROVIDE AN ACCESS METHOD TO
*  RETRIEVE CATALOG BLOCKS FROM AN O/S SYSTEM CATALOG EASILY AND
*  CHEAPLY.  ALL ACCESS IS BY THE 'LOCATE' MODE, THAT IS, WITH THE
*  ADDRESS OF THE DATA BLOCK RETURNED IN REGISTER 1.
*
*
* RESTRICTIONS AND WARNINGS -
*
*     CATALOGS ARE NOT SUPPORTED ON DATACELLS
*
*     SINCE THE CATALOG ACCESS METHOD TAKES ALL BUT 4K OF THE AVAILABLE
*  STORAGE, IF ANY OTHER IS TO REMAIN AVAILABLE FOR OTHER PURPOSES IT
*  MUST BE ACQUIRED BEFORE THE OPEN, AND THEN RELEASED AFTER THE OPEN.
*
* INPUTS -
*
*  REGISTERS 0 AND 1 MUST CONTAIN THE FOLLOWING VALUES -
*        OPEN SETS THE READ CCW'S SO THAT ONLY THE DATA PORTION OF
*        RECORDS IS RETURNED WHEN A 'GET' IS REQUESTED.  OPENWKEY SETS
*        THE READ CCW'S SO THAT BOTH THE KEY AND DATA PORTIONS OF
*        RECORDS ARE RETURNED WHEN A 'GET IS REQUESTED.  THE 8 BYTE
*        KEY (IF PRESENTED) IS IN FRONT OF THE 256 BYTE DATA RECORD.
* OPEN     R0=1,R1=A(8 CHARACTER LEFT JUSTIFIED DDNAME TO BE OPENED)
* OPENWKEY R0=2,R1=A(8 CHARACTER LEFT JUSTIFIED DDNAME TO BE OPENED)
* GET      R0=3,R1=ANY VALUE - GET THE NEXT (KEY AND) DATA BLOCK ADDRES
* GETBYTTR R0=4,R1=A(3 BYTE RELATIVE TRACK ADDRESS) - GET THE (KEY AND)
*              DATA BLOCK AT THE SPECIFIED TTR.
* CLOSE    R0=5,R1=ANY VALUE - CLOSE THE FILE
*
* OUTPUTS -
*
*     FOR OPEN AND OPENWKEY, THE DCB WILL BE OPENED
*     FOR GET OR GETBYTTR, THE ADDRESS OF THE REQUESTED DATA BLOCK WILL
*          BE RETURNED IN REGISTER 1.
*     FOR CLOSE, THE DCB WILL BE CLOSED
*
*   AUTHOR         DARRELL D. WILCOX
*   INSTALLATION   KING COUNTY SYSTEMS SERVICES
*                  ROOM E-208 KING COUNTY COURTHOUSE
*                  THIRD AT JAMES STREETS
*                  SEATTLE, WA  98104
*   IF MODIFICATIONS OR CORRECTIONS ARE MADE, I WOULD GREATLY
*        APPRECIATE GETTING A COPY OF THEM.
*
* LATEST REVISION DATE -
*        3/1/74 - R001       INCLUDED 370 INSTRUCTIONS NOT USED BEFORE
*        3/1/74 - R002       ADDED TESTS FOR NON-D.A. AND DATACELLS
*        3/1/74 - R003       REMOVED 256 MINIMUM FROM 360 CODE THAT
*                            ZEROES GETMAINED AREA
         EJECT
* MACRO 'CTLG' USAGE -
*
* ONLY ASSEMBLER LANGUAGE PROGRAMS MAY CALL THIS ACCESS METHOD.
* THE MACRO 'CTLG' IS AVAILABLE TO FACILITATE THE CALLING OF THIS
* PROGRAM.  THE FORMATS ALLOWED ARE DESCRIBED BELOW.
*
*     OPEN REQUEST
*
*        CTLG  OPEN,DDNMSYMB      'OPEN' MUST BE CODED AS SHOWN.
*                                 'DDNMSYMB' IS THE ASSEMBLER SYMBOL OF
*                                 AN 8 CHARACTER LEFT-JUSTIFIED DDNAME
*                                 TO BE OPENED FOR INPUT OF DATA BLOCKS
*                                 ONLY (NO KEYS).
*        CTLG  OPENWKEY,DDNMSYMB  SAME AS ABOVE, BUT OPENED WITH KEYS.
*
*     CLOSE REQUEST
*
*        CTLG  CLOSE              'CLOSE' MUST BE CODED AS SHOWN.
*
*     GET REQUEST
*
*        CTLG  GET                'GET' MUST BE CODED AS SHOWN.  WHEN
*                                 R15 = 0, R1 = A(DATA) OR A(KEY+DATA).
*                                 IF R15 NOT = 0, R1 IS INDETERMINATE.
*                                 SEE 'OPENWKEY' ABOVE.
*        CTLG  GETBYTTR,TTRSYMB   'GETBYTTR' MUST BE CODED AS SHOWN.
*                                 'TTRSYMB' IS THE ASSEMBLER SYMBOL
*                                 OF A 3 BYTE AREA CONTAINING THE
*                                 RELATIVE BLOCK ADDRESS OF THE DESIRED
*                                 DATA BLOCK.  SEE 'OPENWKEY' ABOVE.
*
*     ALTERNATE CODINGS -  WHERE A SECOND OPERAND IS CODED, (1) MAY BE
*                          USED IF R1 CONTAINS THE ADDRESS OF THE
*                          REQUIRED AREA.  (REGNAME) MAY ALSO BE USED
*                          WHERE 'REGNAME' IS A SYMBOLIC REGISTER, IF
*                          'REGNAME' IS NOT R0 OR R14.
*
         EJECT
* RETURN CODES -
*
*        0     REQUESTED SERVICE COMPLETED NORMALLY
*                  NO ERRORS WERE FOUND
*        4     END OF DATA
*        8     DCB NOT OPEN
*                  1) DEVICE IS NOT DIRECT ACCESS
*                  2) DEVICE IS A DATACELL
*                  3) DDCARD IS MISSING
*                  4) DD IS A 'DUMMY' OR 'DSN=NULLFILE'
*        12    MORE THAN ONE VOLUME SERIAL ON DDCARD OR NO DDCARD
*        16    PERMANENT I/O ERROR
*        20    INVALID REQUEST CODE
*                  R0 WAS NOT 1,2,3,4 OR 5
*        24    NOT USED
*        28    INVALID REQUEST SEQUENCE
*                  AN OPEN WAS REQUESTED AND DCB IS ALREADY OPEN
*                       OR
*                  A CLOSE WAS REQUESTED AND DCB IS ALREADY CLOSED
*                       OR
*                  A GET WAS REQUESTED AND
*                       1) END-OF-DATA HAD OCCURRED OR
*                       2) A PERMANENT I/O ERROR OCCURRED OR
*                       3) A DATA BLOCK WAS OF AN INCORRECT LENGTH
*        32    NO SYSCTLG DATASET ON VOLUME
*        36    NO CORE FOR DATA
*                  LESS THAN 4360 CONTIGUOUS BYTES WERE AVAILABLE
*        40    CTLGACCS NOT LINKEDDITED WITH CALLING PROGRAM.  THIS
*                  RETURN CODE IS GIVEN ONLY BY THE 'CTLG' MACRO.
         EJECT
CTLGACCS CSECT
.LOOP    ANOP
R&I      EQU   &I .
&I       SETA  &I+1 .
         AIF   (&I LT 16).LOOP
READON   EQU   X'40' .
KEYS     EQU   X'20' .
RESET    EQU   X'00' .
DCBFDAD  EQU   5 .
DCBBUFCB EQU   21 .
DCBIOBA  EQU   28 .
DCBDDNAM EQU   40 .
DCBDEBAD EQU   44 .
DCBOFLGS EQU   48 .
DVCEND   EQU   B'00001000' .            DEVICE END
CHNLEND  EQU   B'00000100' .            CHANNEL END
UNITECP  EQU   B'00000001' .            UNIT  EXCEPTION
DS4DEVDB EQU   75 .
JFCBTSDM EQU   52 .
JFCBNVOL EQU   117 .
JFCBVOLS EQU   118 .
         EJECT
         STM   R14,R12,12(R13) .        SAVE REGISTERS
         LR    R12,R15 .                LOAD BASE REG
         USING CTLGACCS,R12 .
         ST    R13,SAVE+4 .             SAVE REG13
         LR    R15,R13 .
         LA    R13,SAVE .               NEW SAVE AREA
         ST    R13,8(,R15) .            BACK CHAIN
         AR    R0,R0 .                  DOUBLE REQUEST CODE
         AR    R0,R0 .                  DO IT AGAIN
         BNP   SETRC20 .                NOT PLUS MEANS INVALID
         CH    R0,H20 .                 TEST FOR TOO BIG
         BH    SETRC20 .                TOO BIG IS INVALID
         LR    R15,R0 .                 LOAD INTO INDEX REGISTER
         B     *(R15) .                 GO TO PROPER ROUTINE
         B     OPEN .
         B     OPENWKEY .
         B     GET .
         B     GETBYTTR .
         B     CLOSE .
         EJECT
OPENWKEY EQU   * .
         OI    CNTRL,KEYS .             OPEN WITH KEYS REQUESTED
         MVI   MDL2CCW1,RDKYDATA+MULTITRK SET READ KEY-AND-DATA OPCODE
         LA    R9,264 .                 KEY LENGTH + DATA LENGTH
         B     OPENCOMN .               GO TO COMMON OPEN CODE
OPEN     EQU   * .
         MVI   MDL2CCW1,RDDATA+MULTITRK SET READ-DATA OPCODE IN CCW
         LA    R9,256 .                 DATA LENGTH
OPENCOMN EQU   * .
         TM    DCB+DCBOFLGS,X'10' .     IS DCB ALREADY OPEN/Q
         BO    SETRC28 .                YES, MUST DO CLOSE FIRST
         ST    R9,READREGS+4 .          SAVE FOR LATER
         STH   R9,MDL2CCW1+6 .          STORE LENGTH TO BE READ IN CCW
         MVC   DCB+DCBDDNAM(8),0(R1) .  MOVE DDNAME INTO DCB
         MVI   JFCB+JFCBNVOL,X'00' .    SET NUMBER OF VOLUMES TO ZERO
*        RDJFCB DCB
         RDJFCB DCB .
         SPACE 1
         CLI   JFCB+JFCBNVOL,X'01' .    ONE-AND-ONLY-ONE VOLSER/Q
         BNE   SETRC12 .                MORE THAN ONE, OR NO DDCARD
         MVI   JFCB,X'04' .             FIRST BYTE OF VTOC NAME
         MVC   JFCB+1(43),JFCB .        CREATE VTOC NAME BY PROPOGATION
         L     R14,16 .                 A(CVT)
         L     R14,0(,R14) .            A(TCB POINTERS)
         L     R14,4(,R14) .            A(CURRENT TCB)
         L     R14,12(,R14) .           A(TIOT)
         LA    R15,24 .                 INDEX VALUE TO FIRST ENTRY
TIOTLOOP EQU   * .
         AR    R14,R15 .                ADD LENGTH TO START
         AIF   ('&SYSTEM' NE '370').NOT370B
         ICM   R15,1,0(R14) .           LOAD ENTRY LENGTH          R001
         AGO   .END360B
.NOT370B ANOP
         IC    R15,0(,R14) .            LOAD ENTRY LENGTH
         LTR   R15,R15 .                SET CONDITION CODE
.END360B ANOP
         BZ    SETRC8 .                 BRANCH IF ENTRY NOT FOUND
         CLC   DCB+DCBDDNAM(8),4(R14) . DDCARD NAME THE SAME/Q
         BNE   TIOTLOOP .               BRANCH IF NOT WANTED
         AIF   ('&SYSTEM' NE '370').NOT370C
         ICM   R15,7,17(R14) .          LOAD A(UCB ALLOCATED)
         AGO   .END360C
.NOT370C ANOP
         L     R15,16(,R14) .           LOAD A(UCB ALLOCATED)
         LTR   R15,R15 .                SET CONDITION CODE
.END360C ANOP
         BZ    SETRC8 .                 BRANCH IF DUMMY OR NULLFILE
         CLI   18(R15),X'20' .          IS THIS A D.A. DEVICE/Q    R002
         BNE   SETRC8 .                 BRANCH IF NOT              R002
         CLI   19(R15),X'05' .          IS THIS A DATACELL/Q       R002
         BE    SETRC8 .                 BRANCH YES, NOT SUPPORTED  R002
         AIF   ('&SYSTEM' NE '370').NOT370Z
         MVC   FW,24(R15) .             MOVE TTR0 OF VTOC TO FULLWORD
         AGO   .END360Z                                       JDM
.NOT370Z ANOP                                                 JDM
         MVC   FW,24(R15) .     MOVE TTR0 OF VTOC TO FULLWORD JDM
.END360Z ANOP                                                 JDM
         EJECT
         AIF   ('&SYSTEM' NE '370').NOT370D                        JDM
*        DEVTYPE DCB+DCBDDNAM,DSCB,DEVTAB,RPS                     JDM
         DEVTYPE DCB+DCBDDNAM,DSCB,DEVTAB,RPS                     JDM
.NOT370D ANOP
*        DEVTYPE DCB+DCBDDNAM,DSCB,DEVTAB  GET DEVICE CHARACTERISTICS
         DEVTYPE DCB+DCBDDNAM,DSCB,DEVTAB .GET DEVICE CHARACTERISTICS
.END360D ANOP                                                      JDM
         SPACE 1
         LTR   R15,R15                  DEVTYPE OK ???        JDM
         BNZ   ABND1001                 GOODBYE ALL !!!       JDM
         LH    R1,DSCB+10 .             LOAD TRACKS/CYLINDER
         LTR   R1,R1 .                  WAS DEVTYPE SUCCESSFUL/Q
         BZ    SETRC8 .                 BRANCH IF NOT
         LH    R15,FW .                 LOAD TT OF VTOC ADDRESS
         SR    R14,R14 .                ZERO FOR DIVISION
         DR    R14,R1 .                 HOW MANY CYLINDERS/Q
         STH   R15,CCHHR .              STORE CYLINDER ADDRESS
         STH   R14,CCHHR+2 .            STORE HEAD ADDRESS
         MVI   CCHHR+4,X'01' .          WANT FIRST RECORD ON TRACK
         SPACE 3 .
*        OBTAIN CAMLST3                 GET FORMAT 4 DSCB
         OBTAIN CAMLST3 .               GET FORMAT 4 DSCB
         SPACE 1
         LTR   R15,R15 .                TEST FOR SUCCESSFUL
         BNZ   ABND1000 .               BAD BAD BAD
         SR    R0,R0 .                  ZERO REGISTER ZERO
         IC    R0,DSCB+DS4DEVDB .       LOAD NUMBER OF BLOCKS PER TRACK
         STH   R0,BLKSPER .             SAVE IN A SAFE PLACE
         MVI   JFCB,C' ' .              FIRST BYTE IS BLANK
         MVC   JFCB+1(43),JFCB .        BLANK ENTIRE DSNAME
         MVC   JFCB(7),=C'SYSCTLG' .    PUT CATALOG DSNAME IN JFCB
         OI    JFCB+JFCBTSDM,X'08'+X'02' REQUEST 'NO RETURN TO QUEUE' &
*                                         'NO REVERSE MERGE TO DSCB'
         SPACE 3 .
*        OBTAIN CAMLST1                 GET SYSCTLG DSCB
         OBTAIN CAMLST1 .               GET SYSCTLG DSCB
         SPACE 1
         LTR   R15,R15 .                WAS OBTAIN SUCCESSFUL/Q
         BNZ   SETRC32 .                NO SYSCTLG ON THIS PACK
         SPACE 3 .
*        OPEN  DCB,TYPE=J               OPEN FOR INPUT
         OPEN  DCB,TYPE=J .             OPEN FOR INPUT
         SPACE 1
         TM    DCB+DCBOFLGS,X'10' .     DID IT OPEN OKAY/Q
         BZ    SETRC8 .                 BRANCH IF NOT
         MVC   SAVEIOBA,DCB+DCBIOBA .   SAVE BSAM IOB ADDRESS
         LA    R15,IOB .                LOAD ADDRESS OF MY IOB
         ST    R15,DCB+DCBIOBA .        STORE INTO DCB
         EJECT
* GET 4K FOR BLDL, ABEND, AND ANYBODY ELSE THAT NEEDS IT
*        GETMAIN EC,LV=4096,A=HIGHRBLK
         GETMAIN EC,LV=4096,A=HIGHRBLK .
         SPACE 1
         LTR   R15,R15 .                DID I GET RESERVED STORAGE/Q
         BNZ   SETRC36 .                BRANCH IF NOT
         SPACE 3 .
* DO A GETMAIN FOR ALL STORAGE
*        GETMAIN VC,LA=SIZES,A=COREADDR
         GETMAIN VC,LA=SIZES,A=COREADDR .
         SPACE 1
         LR    R6,R15 .                 SAVE RETURN CODE PAST FREEMAIN
         SPACE 3 .
* RELEASE THE 4K RESERVE
*        FREEMAIN E,LV=4096,A=HIGHRBLK
         FREEMAIN E,LV=4096,A=HIGHRBLK .
         SPACE 1
         LTR   R6,R6 .                  DID I GET THE BUFFER STORAGE/Q
         BNZ   SETRC36 .                NO CORE FOR DATA
         SPACE 3 .
         LM    R14,R15,COREADDR .       LOAD ADDRESS AND LENGTH
         LR    R4,R14 .                 SAVE A(BUFFER AREA)
         LR    R5,R15 .                 SAVE BUFFER AREA LENGTH
         AIF   ('&SYSTEM' NE '370').NOT370A
         SR    R1,R1 .                  USE ZERO FILL
         MVCL  R14,R0 .                 CLEAR GETMAIN AREA
         AGO   .END360A .
.NOT370A ANOP
         LR    R1,R14 .                 LOAD GETMAIN AREA ADDRESS
         AR    R15,R14 .                ADD ADDRESS TO LENGTH = A(END)
         LA    R14,256 .                MAXIMUM LENGTH FOR XC INST.
         SR    R15,R14 .                BACK UP 256 BYTES INTO AREA
         CR    R1,R15 .                 IS END BEFORE START/Q      R003
         BH    *+14 .                   BRANCH LESS THAN 256 BYTES R003
         XC    0(256,R1),0(R1) .        ZERO 256 BYTES OF AREA
         BXLE  R1,R14,*-6 .             BRANCH UNTIL WHOLE AREA ZERO
         AR    R15,R14 .                GET TO VERY END AGAIN
         SR    R15,R1 .                 MINUS NEXT ADDRESS TO ZERO
         BNP   *+10 .                   BRANCH IF NO FRACTION OF 256
         BCTR  R15,0 .                  SUBTRACT 1 FOR EX TO XC INST.
         EX    R15,XCLR .               ZERO REMAINING BYTES
.END360A ANOP
         EJECT
* CALCULATE HOW MANY BUFFERS WE HAVE
         LR    R15,R5 .                 LOAD LENGTH GOTTEN
         SH    R15,H24 .                MINUS SIDE,TIC,RDCOUNT CCWS
         LA    R1,8(,R9) .              L'BUFFER+L'CCW TO FILL BUFFER
         SR    R14,R14 .                ZERO FOR DIVISION
         DR    R14,R1 .                 HOW MANY BUFFERS FIT IN CORE/Q
* SINCE GETMAIN WAS FOR AT LEAST 1 BUFFER, NO TEST FOR ZERO IS MADE
         ST    R15,NUMBBUFS .           SAVE NUMBER OF BUFFERS
         LR    R1,R15 .                 SAVE NUMBER OF BUFFERS IN R15
* GENERATE THE CHANNEL PGM
         SLL   R1,3 .                   TIMES 8 (1 CCW PER BUFFER)
* R1 = NUMBER OF BUFFERS * CCW PGM LENGTH PER BUFFER (8) = NUMBER OF
*        CCW PROGRAM BYTES REQUIRED TO READ DATA TO FILL ALL BUFFERS.
         ST    R4,CPGMADDR .            STORE IN IOB
         MVC   MDL1CCW2+1(3),CPGMADDR+1 MOVE TIC ADDRESS INTO CCW
         MVC   0(16,R4),MDL1CCW1 .      MOVE FIRST TWO CCWS
         LA    R4,16(,R4) .             INCREMENT TO OPEN SPOT IN CHAIN
* R1 = LENGTH OF READ CCW'S + RDCOUNT + START ADDR = BUFFER START ADDR
         LA    R1,8(R1,R4) .            LOAD ADDRESS OF FIRST BUFFER
         ST    R1,BUFFADDR .            STORE FOR LATER USE
         MVC   MDL2CCW1+1(3),BUFFADDR+1 MOVE A(FIRST BUFFER) TO READCCW
         LM    R0,R1,MDL2CCW1 .         LOAD CCW INTO REGISTERS
         LA    R14,8 .                  SET CONSTANT INTO REGISTER
GENCCW   EQU   * .
         STM   R0,R1,0(R4) .            STORE CCW INTO CHANNEL PGM
         AR    R0,R9 .                  INCREMENT ADDRESS TO NEXT BUFFR
         AR    R4,R14 .                 A(NEXT OPEN SPOT IN CCW CHAIN)
         BCT   R15,GENCCW .             BACK FOR NEXT READ CCW
         MVC   0(8,R4),MDL3CCW1 .       MOVE READCOUNT FOR NEXT RECORD
         LA    R0,X'100' .              SET TTRK = 00000100
         ST    R0,FW .                  STORE FOR EXCP CALCULATIONS
         BAL   R7,TTRCNVRT .            GO GET DISK ADDRESS OF BLOCK 1
         BAL   R7,EXCP .                GO FILL BUFFERS
         SR    R1,R9 .                  BACK UP BUFFER ADDRESS FOR
         ST    R1,READREGS .              FIRST GET REQUEST
         LH    R1,BLKSPER .             LOAD DATA BLOCKS PER TRACK
         OI    CNTRL,READON .           OKAY FOR READ NOW
         B     SETRC0 .                 NORMAL ENDING
         EJECT
GET      EQU   * .
         TM    CNTRL,READON .           IS IT OKAY TO READ/Q
         BZ    SETRC28 .                NO, SET INVALID SEQUENCE CODE
         LM    R1,R3,READREGS .         RELOAD REGISTERS
* R1 = A(LAST DATA BLOCK RETURNED TO CALLER)
* R2 = LENGTH OF THE BUFFERS
* R3 = A(LAST BUFFER IN CORE)
         BXLE  R1,R2,STREGS .           GET NEXT LREC
         TM    CHNLSTUS,CHNLEND+DVCEND+UNITECP WAS END OF FILE HIT/Q
         BO    SETRC4 .                 BRANCH IF YES
         MVC   MBBCCHHR+3(5),CCHHR .    SET IOB UP FOR NEXT EXCP
         BAL   R7,EXCP .                GO FILL BUFFERS
         B     SETRC0 .                 GO SET RETURN CODE
STREGS   EQU   * .
         STM   R1,R3,READREGS .         SAVE REGISTERS FOR NEXT GET
         B     SETRC0 .                 NORMAL END
         SPACE 3
GETBYTTR EQU   * .
         TM    CNTRL,READON .           IS IT OKAY TO READ/Q
         BZ    SETRC28 .                NO, SET INVALID SEQUENCE CODE
         SR    R0,R0 .                  ZERO REGISTER 0
         IC    R0,2(,R1) .              LOAD R OF TTR
         MVC   FW(3),0(R1) .            ALIGN TT OF TTR ON HALFWORD
         LH    R1,FW .                  LOAD TT
         MH    R1,BLKSPER .             NUMBER OF BLOCKS ON TT TRKS
         AR    R1,R0 .                  ADD R BLOCKS TO TT*BLKSPER
         C     R1,LOWRBLK .             IS THE BLOCK I WANT IN CORE/Q
         BL    LOCATE .                 BRANCH IF LOWER THAN IN CORE
         C     R1,HIGHRBLK .            IS THE BLOCK I WANT IN CORE/Q
         BNL   LOCATE .                 BRANCH IF TOO HIGH
         S     R1,LOWRBLK .             SUBTRACT BEGIN RELATIVE BLOCKNO
         MH    R1,READREGS+6 .          MULTIPLY BY BUFFER LENGTH
         A     R1,BUFFADDR .            ADD START ADDRESS = BUFFER WANT
         ST    R1,READREGS .            SET GET FOR NEXT SEQUENTIAL
         B     SETRC0 .                 GO SET RETURN CODE
         SPACE 3 .
LOCATE   EQU   * .
         L     R0,FW .                  LOAD TTR0 FOR CONVERT ROUTINE
         BAL   R7,TTRCNVRT .            CHANGE TTR TO MBBCCHHR
         BAL   R7,EXCP .                GO ISSUE I/O REQUEST
         B     SETRC0 .                 GO SET RETURN CODE
         EJECT
CLOSE    EQU   * .
         TM    DCB+DCBOFLGS,X'10' .     IS IT OPEN/Q
         BZ    SETRC28 .                NO
         SR    R15,R15 .                ZERO REGISTER
         C     R15,COREADDR .           SHOULD I DO A FREEMAIN/Q
         BE    NOFREE .                 BRANCH IF NOT
*        FREEMAIN V,A=COREADDR
         FREEMAIN V,A=COREADDR .
         SPACE 1
         XC    COREADDR,COREADDR .      ZERO SO ONLY 1 FREEMAIN DONE
NOFREE   EQU   * .
         MVC   DCB+DCBIOBA(4),SAVEIOBA .RESTORE BSAM IOB ADDRESS
*        CLOSE DCB
         CLOSE DCB .
         SPACE 1
         MVI   CNTRL,RESET .            RESET CONTROL BITS
         B     SETRC0 .                 NORMAL END
         EJECT
SETRC0   EQU   * .
         SR    R15,R15 .                SET RETURN CODE TO ZERO
         B     RETURN .                 RETURN TO THE USER
SETRC4   EQU   * .
         LA    R15,4 .                  SET RETURN CODE
         B     PRERETRN .               GO RESET READ OK SWITCH & EXIT
SETRC8   EQU   * .
         LA    R15,8 .                  SET RETURN CODE
         B     PRERETRN .               GO RESET READ OK SWITCH & EXIT
SETRC12  EQU   * .
         LA    R15,12 .                 SET RETURN CODE
         B     PRERETRN .               GO RESET READ OK SWITCH & EXIT
SETRC16  EQU   * .
         LA    R15,16 .                 SET RETURN CODE
         B     PRERETRN .               GO RESET READ OK SWITCH & EXIT
SETRC20  EQU   * .
         LA    R15,20 .                 SET RETURN CODE
         B     PRERETRN .               GO RESET READ OK SWITCH & EXIT
SETRC28  EQU   * .
         LA    R15,28 .                 SET RETURN CODE
         B     PRERETRN .               GO RESET READ OK SWITCH & EXIT
SETRC32  EQU   * .
         LA    R15,32 .                 SET RETURN CODE
         B     PRERETRN .               GO RESET READ OK SWITCH & EXIT
SETRC36  EQU   * .
         XC    COREADDR,COREADDR .      ZERO TO STOP FREEMAIN IN CLOSE
         LA    R15,36 .                 SET RETURN CODE
PRERETRN EQU   * .
         MVI   CNTRL,RESET .            MUST CLOSE AND OPEN
RETURN   EQU   * .
         L     R13,SAVE+4 .             RELOAD REG 13
         L     R14,12(,R13) .           LOAD RETURN ADDRESS
         LM    R2,R12,28(R13) .         RELOAD REGISTERS
         BR    R14 .                    RETURN TO USER
         EJECT
         CNOP   0,4 .
ABND1000 EQU   * .
         ST    R1,* .
*        ABEND 1000,DUMP
         ABEND 1000,DUMP .
ABND1001 EQU   *                                              JDM
*        ABEND 1001,DUMP                                      JDM
         ABEND 1001,DUMP .                                    JDM
         SPACE 3 .
TTRCNVRT EQU   * .
         STM   R0,R15,SAVE+8 .          NON-STANDARD SAVE
         LR    R8,R13 .                 SAVE SAVE AREA ADDRESS
         L     R1,DCB+DCBDEBAD .        LOAD A(DEB)
         LA    R2,MBBCCHHR .            LOAD OUTPUT ADDRESS
         L     R15,16 .                 A(CVT)
         L     R15,28(,R15) .           A(TTR CONVERT ROUTINE)
         BALR  R14,R15 .
* REGISTERS 0-2 AND 9-15 ARE USED BY TTR CONVERT, AND NOT RESTORED
         LM    R0,R15,8(R8) .           RESTORE REGISTERS
         MVC   CCHHR,MBBCCHHR+3 .       SET UP FOR FIRST GET REQUEST
         BR    R7 .                     RETURN TO USER
         EJECT
EXCP     EQU   * .
         MVC   DCB+DCBFDAD(8),MBBCCHHR .MOVE FULL DISK ADDRESS TO DCB
*        EXCP  IOB
         EXCP  IOB .
         SPACE 1
*        WAIT  ECB=ECB
         WAIT  ECB=ECB .
         SPACE 1
         CLI   ECB,X'7F' .              WAS IT A NORMAL END/Q
         BE    EXCPOKAY .               BRANCH IF NORMAL
         CLI   ECB,X'42' .              WAS IT AN EXTENT VIOLATION/Q
         BE    EXTNTVIO .               YES, END OF CATALOG FOUND
         CLI   ECB,X'44' .              WAS IT INTERCEPTED/Q
         BE    EXCP .                   REISSUE IF SO
         CLI   ECB,X'41' .              WAS IT AN I/O ERROR/Q
         BNE   SETRC16 .                IF NOT, SOME OTHER ERROR
* ECB POSTED WITH I/O ERROR. IF WE GET
*    DEVICE END + CHNNEL END + UNIT EXCEPTION
*    THEN WE FOUND THE END OF THE CATALOG
         TM    CHNLSTUS,DVCEND+CHNLEND+UNITECP .WAS IT AN END OF FILE/Q
         BNO   SETRC16 .                BRANCH IF NOT
EXTNTVIO EQU   * .
         MVI   CHNLSTUS,CHNLEND+DVCEND+UNITECP SET END-OF-FILE STATUS
EXCPOKAY EQU   * .
         L     R3,IOB+8 .               LOAD A(LAST CCW EXEC'D +8)
         LA    R3,0(,R3) .              ZERO HIGH BYTE
         SH    R3,H8 .                  BACK UP ONE CCW LENGTH
         L     R15,CPGMADDR .           LOAD START OF CCW PGM ADDRESS
         LA    R15,16(,R15) .           LOAD A(FIRST READ CCW)
         SR    R3,R15 .                 LENGTH OF READ CCW'S EXECUTED
         BNP   SETRC4 .                 NO BUFFER FILLED = END-OF-FILE
         SRL   R3,3 .                   DIVIDE BY 8 = NUMBER OF READS
         SR    R0,R0 .                  ZERO REGISTER ZERO
         IC    R0,FW+2 .                PICK UP RECORDS ON LAST TRACK
         LH    R1,FW .                  LOAD NUMBER OF FULL TRACKS USED
         MH    R1,BLKSPER .             NUMBER OF BLOCKS ON TRACKS USED
         AR    R1,R0 .                  RELATIVE BLOCK ADDRESS
         ST    R1,LOWRBLK .             SET NEW LOWER LIMIT
         AR    R1,R3 .                  ADD NUMBER NOW IN CORE
         ST    R1,HIGHRBLK .            SAVE
         L     R1,BUFFADDR .            LOAD A(FIRST FILLED BUFFER)
         ST    R1,READREGS .            SAVE FOR LATER
         BCTR  R3,0 .                   MINUS 1 TO GET DISPLACEMENT
         MH    R3,READREGS+6 .          NUMBER TIMES LENGTH OF EACH
         AR    R3,R1 .                  PLUS START = A(LAST BUFFER FULL
         ST    R3,READREGS+8 .          SAVE FOR LATER
         BR    R7 .                     RETURN TO USER
         AIF   ('&SYSTEM' EQ '370').NOT360B
XCLR     XC    0(0,R1),0(R1) .          SUBJECT OF EX INSTRUCTION
.NOT360B ANOP
         EJECT
IOBPREFX DC    0D'0',X'21',AL3(IOBPREFX) DO NOT MOVE THIS OR NEXT 2 CRD
ECB      DC    F'0'
IOB      DC    0D'0',X'42',AL3(0),A(ECB,0,0)
CHNLSTUS EQU   IOB+12 .
CPGMADDR DC    A(0,DCB,0,0)
MBBCCHHR DC    XL8'00'
         SPACE 3 .
SIZES    DC    F'296,&MAXCORE' .
FW       DC    F'0'
JOBFILE  DC    0F'0',X'87',AL3(JFCB)
         SPACE 3 .
*CAMLST1 CAMLST SEARCH,JFCB,JFCB+JFCBVOLS,DSCB
CAMLST1  CAMLST SEARCH,JFCB,JFCB+JFCBVOLS,DSCB .
         SPACE 3 .
*CAMLST3 CAMLST SEEK,CCHHR,JFCB+JFCBVOLS,DSCB
CAMLST3  CAMLST SEEK,CCHHR,JFCB+JFCBVOLS,DSCB .
         EJECT
*DCB     DCB   DSORG=PS,MACRF=R,LRECL=256,BLKSIZE=256,KEYLEN=8,RECFM=F,X
               EXLST=JOBFILE,DDNAME=ANY
DCB      DCB   DSORG=PS,MACRF=R,LRECL=256,BLKSIZE=256,KEYLEN=8,RECFM=F,X
               EXLST=JOBFILE,DDNAME=ANY
          EJECT
         ORG   DCB+DCBBUFCB .
         DC    3X'00'                   PREVENT BUFFER ACQUISITION
         ORG
         SPACE 3 .
H8       DC    H'8'
H20      DC    H'20'
H24      DC    H'24'
CNTRL    DC    X'00'
         SPACE 1
***********************************************************************
*                                                                     *
*   CHANNEL COMMAND AND CHANNNEL COMMAND CODE EQUATES                 *
*                                                                     *
***********************************************************************
         SPACE
SILI     EQU   X'20' .                  SUPPRESS INCORRECT LENGTH INDIC
CHAIN    EQU   X'40' .             COMMAND CODE CHAINING TO NEXT CCW.
         SPACE
SRCHIDEQ EQU   X'31' .                  SEARCH IDENTIFIER EQUAL
TIC      EQU   X'08' .                  TRANSFER IN CHANNEL
RDCOUNT  EQU   X'12' .                  READ COUNT
RDDATA   EQU   X'06' .                  READ DATA
RDKYDATA EQU   X'0E' .                  READ KEY AND DATA
MULTITRK EQU   X'80' .                  MULTIPLE TRACK MODE INDICATOR
MDL1CCW1 CCW   SRCHIDEQ,MBBCCHHR+3,CHAIN+SILI,5 .ONE OF TWO
MDL1CCW2 CCW   TIC,*-8,CHAIN+SILI,1 .       TWO OF TWO
MDL2CCW1 CCW   RDDATA+MULTITRK,0,CHAIN,256 .
MDL3CCW1 CCW   RDCOUNT+MULTITRK,CCHHR,SILI,5 . READ NEXT BLOCK ADDRESS
         SPACE 3 .
JFCB     DS    22D
DSCB     DS    19D
SAVE     DS    18F
COREADDR DS    2F
SAVEIOBA DS    F
NUMBBUFS DS    F
LOWRBLK  DS    F
HIGHRBLK DS    F
BUFFADDR DS    F
READREGS DS    3F
CCHHR    DS    0F,CL5
BLKSPER  DS    H
         MEND
