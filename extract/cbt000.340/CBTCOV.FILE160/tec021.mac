C                  COMPUTER CHESS STRATEGY
C
C   1.  AM I IN CHECK, AND IF SO, CAN I
C       CAPTURE THE CHECKING PIECE,
C       INTERPOSE A PIECE,
C       OR MOVE AWAY?
C
C   2.  ARE ANY EXCHANGES POSSIBLE-
C       CAN I TAKE A MAN?
C       CAN MY MAN BE TAKEN AND SHOULD I MOVE AWAY?
C
C   3.  IF I HAVE NOT CASTLED, CAN I DO SO NOW?
C
C   4.  CAN I DEVELOPE A MINOR PIECE?
C
C   5.  CAN I OCCUPY AN OPEN FILE?
C
C   6.  CAN I MOVE A PAWN?
C
C   7.  CAN I MOVE A PIECE OR MY KING?
C
C
C                  PROCEDURES
C
C   MAIN PROGRAM
C   PIECE ROUTINES:  SK2, SP2, SN2, SB2, SR2
C   FUNCTION PIEC3
C   ASSIGNMENT ROUTINE
C   MOVE ROUTINE
C   EVALUATION ROUTINE
C
C
C                  MEANING OF VARIABLES
C
C   BOARD(8,8):    POSITIONS OF CHESS PIECES
C   CODE:          1 - PIECE MAY CONTINUE MOVING IN SAME DIRECTION
C                  2 - OBSTACLE IS IN WAY OF PIECE; DISCONTINUE
C                      PRESENT LINE OF MOVEMENT
C   COL:           -1 - WHITE'S MOVE    1 - BLACK'S MOVE
C   COLOR:         1 - COMPUTER WHITE   2 - COMPUTER BLACK
C   COL2(1):       'WHITE'     COL2(2):  'BLACK'
C   DPAWN(1):      RECORD OF WHITE'S DOUBLED PAWNS
C   DPAWN(2):      RECORD OF BLACK'S DOUBLED PAWNS
C   (I,J) (IN,JN) (INT,JNT) (IAT,IBT):  SUBSCRIPTED VARIABLES
C                  POSITION ON BOARD OF PIECE
C   IA, IB, IC, ID, IE, IG, IP:  SUBSCRIPTED VARIABLES
C   IMT, IPI:      VARIABLES
C   ICOL, ISIGN, JSIGN, LSIGN:  (+1 OR -1) FOR USE IN CALCULATIONS
C   IDMAN(8,8,64): SQUARES FROM WHICH OPPONENT'S PIECES ATTACK THIS SQUA
C   IGMAN(8,8,64): SQUARES FROM WHICH COMPUTER'S PIECES GUARD THIS SQUAR
C   IMOVE(50):     STORAGE OF ALL MOVES
C   IPICK:         RANDOM MOVE WHICH IS CHOSEN AND TEST VARIABLE
C   IPOINT:        CURRENT BEST POINT TOTAL
C   ISUB:          TEST VARIABLE FOR STALEMATE
C   ITEST:         1 - MOVE IS A CAPTURE   2 - MOVE IS A SIMPLE MOVE
C                  3 - ALL MOVES ARE COMPLETED UP TO 'MOVE2'
C   ITIME:         RANDOM NUMBER
C   IZ(10):        KEEPS COUNT OF WHICH MOVE IS TO BE MADE
C   JMOVE:         MOVE NUMBER BEING PLAYED BY COMPUTER
C   JZ, KZ, LZ:    VARIABLES FOR STORAGE MANAGEMENT OF CODED MOVES
C   K, KP:         COUNTER FOR NUMBER OF MOVES CONSIDERED UP TO 'MOVE2'
C   KING(2), PAWN(16), KNIGH(4), BISH(4), ROOK(4), QUEEN(4):
C                  CONTAINS POSITIONS OF EACH PIECE
C   KMOVE(10):     STORAGE OF ORIGINAL MOVES FOR COMPUTER
C   MOVE(10):      STORAGE OF CODES OF CURRENT MOVES
C   MOVEP(10):     STORAGE OF CODES OF PASSED MOVES
C   MOVES:         NUMBER OF MOVES PLAYED AHEAD
C   MOVE2:         NUMBER OF MOVES CONSIDERED FOR ANALYSIS
C   NTEST:         COUNTER FOR NUMBER OF HALF-MOVES UP TO 'MOVES'
C   PB(8):         STORAGE OF ONE ROW OF PIECES NAMES
C   PB2(13):       'K-', 'P-', 'N-', ... , 'B ', 'R ', 'Q '
C   PIECE:         LOCATION OF PIECE
C   PIEC1:         CODE OF PIECE MOVED
C                  1-KING, 2-PAWN, 3-KNIGHT, 4-BISHOP, 5-ROOK, 6-QUEEN
C   PIEC2:         CODE OF PIECE CAPTURED
C   PN(1):  'KING'  PN(2):  'PAWN'  PN(3):  'KNIGHT'
C   PN(4):  'BISHOP' PN(5): 'ROOK'  PN(6):  'QUEEN'
C   POINT:         NEWLY FIGURED POINT TOTAL
C                  HIGHER POINTS MEANS BETTER BOARD POSITION FOR WHITE
C
C
C
C
        DOUBLE PRECISION PN(6),COL2(2)
        INTEGER BOARD,PIEC1,PIEC2,DPAWN,POINT,CODE,COLOR,COL
        INTEGER PAWN,KING,KNIGH,BISH,ROOK,QUEEN
        DIMENSION KMOVE(10), IZ(20), DPAWN(2), PB2(13), PB(8)
        COMMON/Q/IPICK,IB,ID,POINT,MOVE(10),MOVEP(10),IGMAN(8,8,64),
     * IDMAN(8,8,64),IE,K,KP,COLOR,IGAME,IMOVE(50),IP,PIEC1,BOARD(8,8),
     * IA,IC,ITEST,ISIGN,JSIGN,CODE,COL,PIEC2,MOVE2,PAWN(16),KING(2),
     * KNIGH(4),BISH(4),ROOK(4),QUEEN(4)
        DATA MOVES/3/,JMOVE/1/
        DATA PB2/'Q-','R-','B-','N-','P-','K-','  ','K ','P ','N ',
     * 'B ','R ','Q '/
        DATA PN/'KING  ','PAWN  ','KNIGHT  ','BISHOP  ','ROOK  ',
     * 'QUEEN  '/,COL2/'WHITE  ','BLACK  '/
        WRITE(6,5400)
5400    FORMAT('1','WELCOME TO COMPUTER CHESS - CREATOR: WAYNE HARVEY'/
     * 1X,'TO ENTER YOUR MOVE USE NUMERIC NOTATION'/1X,
     * 'P-K4 FOR WHITE WOULD BE WRITTEN 25-45'/1X,
     * '00-00 IS CASTLE KING SIDE, 00-01 IS CASTLE QUEEN SIDE'/1X,
     * '11-11 SIGNIFIES YOU WOULD LIKE TO OFFER A DRAW'/1X,
     * 'A ''-'' NEXT TO THE PIECE SIGNIFIES THAT THE PIECE IS BLACK'/
     * 1X,'PLEASE NOW TYPE IN THE TIME - THANK YOU'/)
        READ(5,*) ITIME
        WRITE(6,5500)
5500    FORMAT(1X,'WOULD YOU LIKE TO PLAY WHITE OR BLACK? '/1X,
     * 'TYPE 1 FOR WHITE, 2 FOR BLACK'/)
        READ(5,*) COLOR
C     INITIALIZE ALL VARIABLES
        COLOR = 3 - COLOR
        LSIGN = 1 - COLOR/2*2
        IGAME = 0
        DO 999 I=1,8
        DO 999 J=1,8
999     BOARD(I,J) = 0
        DO 910 I=1,2
        J = KING(I)/10
910     BOARD(J,-10*J + KING(I)) = 1-(I-1)*2
        DO 911 I=1,16
        J = PAWN(I)/10
        IF(J .NE. 0) BOARD(J,-10*J + PAWN(I)) = 2*(-I/9*2 +1)
911     CONTINUE
        DO 920 I=1,4
        DO 920 J=1,4
        K = PIEC3(J, I)
917     IA = K/10
        IF(K .NE. 0) BOARD(IA,-10*IA+K)=(2+J)*(-I/3*2+1)
920     CONTINUE
        IPICK = 0
        IF(COLOR .EQ. 2) GO TO 6005
7001    WRITE(6,7000)
7000    FORMAT(/1X,'WOULD YOU LIKE TO SEE THE BOARD POSITION')
        READ(5,7100) PB(1)
7100    FORMAT(A1)
        IF(PB(1) .EQ. PB2(10)) GO TO 6100
        DO 6000 I=1,8
        WRITE(6,4001)
4001    FORMAT(1X,41('*'))
        DO 5000 J=1,8
        PB(J) = PB2(BOARD(9-I,J) + 7)
5000    CONTINUE
        WRITE(6,5001) (PB(J),J=1,8)
5001    FORMAT(1X,8('*',1X,A2,1X),'*')
6000    CONTINUE
        WRITE(6,4001)
6100    IF(IPICK .EQ. 0) GO TO 6002
        IF(LSIGN*IPOINT .GE. 350) GO TO 826
6005    WRITE(6,6003)
6003    FORMAT('0', 'YOUR NEXT MOVE, PLEASE'/)
        READ(5,6004) I,J
6004    FORMAT(I2,1X,I2)
        IPICK = 0
        IMOVE(8) = 10 + J*90
        IF(I .EQ. 0) GO TO 6014
        IF(I-J .EQ. 0) GO TO 6015
        IMOVE(8) = I*10**4+J*10**2+10*IABS(BOARD(I/10,I-I/10*10))+
     * IABS(BOARD(J/10,J-J/10*10))
6014    CALL SMOVE(8,I,J,IN,JN,1)
        GO TO 7001
6015    CALL EVAL(POINT)
        IF(LSIGN*POINT .LT. 0) GO TO 851
        WRITE(6,855)
855     FORMAT(' ','I AM SORRY I CANNOT ACCEPT YOUR OFFER OF A DRAW')
        GO TO 6005
6002    NTEST = 0
        JZ = 1-MOVE2
        COL = 3 - 2*COLOR
        DO 99 I = 1,MOVES
99      IZ(I) = MOVE2*(I-1) + 1
        COL = -COL
100     ITEST = 1
        K = 1
        KP = 1
        DO 98 I=1,8
        DO 98 J=1,8
        DO 98 IA=1,64
        IGMAN(I,J,IA) = 0
        IDMAN(I,J,IA) = 0
98      CONTINUE
        DO 101 I=1,MOVE2
        MOVEP(I) = 0
101     MOVE(I) = 0
C     THE NEXT SECTION DETERMINES IGMAN AND IDMAN USED TO
C     EVALUATE THREATS ON PIECES OR THE KING.
        DO 105 I=1,8
        DO 105 J=1,8
        ISUB = IABS(BOARD(I,J)) + 1
        GO TO (105,900,901,902,903,904,903), ISUB
900     CALL SK2(I,J,LOC)
        GO TO (105,200),LOC
901     CALL SP2(I,J,LOC)
        GO TO (105,200),LOC
902     CALL SN2(I,J,LOC)
        GO TO (105,200),LOC
903     CALL SB2(I,J,LOC)
        GO TO (105,200),LOC
904     CALL SR2(I,J,LOC)
        GO TO (105,200),LOC
105     CONTINUE
C     THE NEXT SECTION CONSIDERS THE POSSIBILITY OF
C     THE COMPUTER BEING IN CHECK.
C     CAN THE CONPUTER CAPTURE THE CHECKING PIECE?
        IB = (COL + 1)/2 + 1
        POINT= -500
        IF(IGMAN(KING(3-IB)/10,KING(3-IB)-KING(3-IB)/10*10,1) .NE. 0)
     * GO TO 23
        POINT= -POINT
        IF(KING(IB) .EQ. 0) GO TO 23
        IA = KING(IB)/10
        IB = KING(IB) - 10*IA
        IF(IDMAN(IA,IB,1) .EQ. 0) GO TO 106
        IF(IDMAN(IA,IB,2) .NE. 0) GO TO 3
        IC = IDMAN(IA,IB,1)/10
        ID = IDMAN(IA,IB,1) - 10*IC
        IF(IGMAN(IC,ID,1) .EQ. 0) GO TO 2
        DO 6 I=1,8
        IG = IGMAN(IC,ID,I)
        IF(IG .EQ. 0) GO TO 2
        IE = IG/10
        IP = IG - IE*10
        IF(IABS(BOARD(IE,IP)) .NE. 1) GO TO 6050
        IF(IDMAN(IC,ID,1) .NE. 0) GO TO 6
6050    MOVE(K) = 10**4*IG + 1000*IC + 100*ID + 10*IABS(BOARD(IE,IP)) +
     * IABS(BOARD(IC,ID))
        K = K + 1
        IF(K .GT. MOVE2) GO TO 200
6       CONTINUE
C     CAN THE COMPUTER INTERPOSE A PIECE?
2       IE = IC - IA
        IP = ID - IB
        IF(IABS(IE) .GE. 2) GO TO 6051
        IF(IABS(IP) .LT. 2) GO TO 3
6051    IF(IABS(BOARD(IC,ID)) .EQ. 3) GO TO 3
        ISIGN = 0
        JSIGN = 0
        IF(IE .NE. 0) ISIGN = IE/IABS(IE)
        IF(IP .NE. 0) JSIGN = IP/IABS(IP)
        IF(ISIGN .EQ. 0) IE = IP
8       IE = IABS(IE) - 1
        DO 7 I = 1, IE
        IP = ISIGN*I + IA
        IG = JSIGN*I + IB
        IF(IGMAN(IP,IG,1) .EQ. 0) GO TO 7
        DO 12 J = 1,64
        IC = IGMAN(IP,IG,J)
        IF(IC .EQ. 0) GO TO 3
        IF(IC .EQ. 10*IA+IB) GO TO 12
        ID = IC/10
        MOVE(K)=10**4*IC +  1000*IP + 100*IG + 10*
     * IABS(BOARD(ID,-10*ID+IC))+IABS(BOARD(IP,IG))
        K = K + 1
        IF(K .GT. MOVE2) GO TO 200
12      CONTINUE
7       CONTINUE
C     CAN I MOVE MY KING AWAY?
3       ITEST = 2
        CALL SK2(IA,IB,LOC)
        GO TO (11,200),LOC
11      IF(K .NE. 1) GO TO 998
        ISUB = ISUB/10 +JZ/IABS(JZ) +2
        GO TO (800,24,23,22), ISUB
22      CALL EVAL(POINT)
23      IPOINT=POINT*((NTEST-(NTEST+2)/2*2+2)*2-1)*LSIGN
        KZ = NTEST*MOVE2 + MOVE2
        NTEST = NTEST + 1
        GO TO 204
24      IF(MOVEP(1) .EQ. 0) GO TO 850
998     DO 13 I=K,MOVE2
13      MOVE(I) = MOVEP(I-K+1)
        GO TO 200
C     ARE ANY EXCHANGES POSSIBLE, OR SHOULD THE COMPUTER
C     MOVE HIS MAN AWAY?
C     CAN THE COMPUTER CAPTURE A PIECE OR A PAWN?
106     DO 108 ITEST=1,2
        DO 109 I=1,8
        IF(ITEST .EQ. 2) GO TO 107
        IA = 2-COL + (I/2*2)/I
        IB = (I+1)/2
        PIECE = PIEC3(IB, IA)
115     IF(PIECE .EQ. 0) GO TO 109
        IB = PIECE/10
        IC = PIECE - 10*IB
        GO TO 28
107     IA=4*(1-COL) + I
        IF(PAWN(IA) .EQ. 0) GO TO 109
        IB = PAWN(IA)/10
        IC = PAWN(IA) - 10*IB
28      IF(IGMAN(IB,IC,1) .EQ. 0) GO TO 109
        DO 111 IA=1,64
        IF(IDMAN(IB,IC,IA) .EQ. 0) GO TO 112
111     CONTINUE
112     IF(IGMAN(IB,IC,IA) .NE. 0) IA=0
        DO 110 J=1,64
        ID = IGMAN(IB,IC,J)
        IE = ID/10
        IF(ID .EQ. 0) GO TO 109
        MOVE(K) = 10**4*ID + 1000*IB + 100*IC + 10*
     * IABS(BOARD(IE,-10*IE+ID)) + IABS(BOARD(IB,IC))
        IF(IABS(BOARD(IE,-10*IE+ID)) .LE. IABS(BOARD(IB,IC))) GO TO 26
        IF(IA .NE. 0) GO TO 27
26      K = K + 1
        IF(K .GT. MOVE2) GO TO 200
        GO TO 110
27      MOVEP(KP) = MOVE(K)
        IF(KP .LE. MOVE2) KP = KP+1
110     CONTINUE
109     CONTINUE
108     CONTINUE
C     CAN ONE OF THE COMPUTERS PIECES BE TAKEN?  IF SO, MOVE IT.
120     ITEST = 2
        DO 131 ID = 1,8
        IA = 2 + COL + (ID/2*2)/ID
        IE = 4-(ID-1)/2
        PIECE = PIEC3(IE, IA)
126     IF(PIECE .EQ. 0) GO TO 131
        IB = PIECE/10
        IC = PIECE - 10*IB
        IF(IDMAN(IB,IC,1) .EQ. 0) GO TO 131
        GO TO (127,128,129,128), IE
127     CALL SN2(IB,IC,LOC)
        GO TO (131,200),LOC
128     CALL SB2(IB,IC,LOC)
        GO TO (131,200),LOC
129     CALL SR2(IB,IC,LOC)
        GO TO (131,200),LOC
131     CONTINUE
C     CAN ONE OF THE COMPUTERS PAWNS BE CAPTURED?
C     IF SO, MOVE IT.
        DO 132 ID = 1,8
        IA = 4*(1+COL) + ID
        IF(PAWN(IA) .EQ. 0) GO TO 132
        IB = PAWN(IA)/10
        IC = PAWN(IA)-10*IB
        DO 113 IA=1,64
        IF(IGMAN(IB,IC,IA) .EQ. 0) GO TO 114
113     CONTINUE
114     IF(IDMAN(IB,IC,IA) .EQ. 0) GO TO 132
        CALL SP2(IB,IC,LOC)
        GO TO (132,200),LOC
132     CONTINUE
C     CAN THE COMPUTER CASTLE?  IF SO, CASTLE KING SIDE, QUEEN SIDE.
        IA = 1 + (COL + 1)/2 *7
        DO 140 I=1,2
        IB = 1 - I
        IF(IABS(BOARD(IA,5)+BOARD(IA,7*IB+8)) .NE. 6) GO TO 140
        IF(IDMAN(IA,5*IB+6,1) + IDMAN(IA,5*IB+7,1) + IDMAN(IA,5*IB+8,1)
     * - IB*IDMAN(IA,4,1) + IABS(BOARD(IA,4*IB+6) + BOARD(IA,4*IB+7)
     * - IB*BOARD(IA,4)) .NE. 0) GO TO 140
        MOVE(K) = 10-IB*90
        K = K + 1
        IF(K .GT. MOVE2) GO TO 200
140     CONTINUE
C     CAN THE COMPUTER DEVELOPE A MINOR PIECE?
C     DEVELOPE THE KNIGHT.
        DO 145 ID = 1,2
        IA = ID + 1 + COL
        IB = IA/3*7 + 1
        IC = 7-5*(IA-IA/2*2)
        IF(BOARD(IB,IC) .NE. -3*COL) GO TO 145
        CALL SN2(IB,IC,LOC)
        GO TO (145,200),LOC
145     CONTINUE
C     DEVELOPE THE BISHOP.
        DO 146 ID = 1,2
        IA = ID + 1 + COL
        IB = IA/3*7 + 1
        IC = 6 - 3*(IA-IA/2*2)
        IF(BOARD(IB,IC) .NE. -4*COL) GO TO 146
        CALL SB2(IB,IC,LOC)
        GO TO (146,200),LOC
146     CONTINUE
C     CAN THE COMPUTER OCCUPY AN OPEN FILE?
        DO 151 J=1,8
        DO 152 I=1,8
        IF(BOARD(I,J)*COL .GT. 0) GO TO 151
152     CONTINUE
        DO 153 IG =1,4
        IB = (IG + 1)/2
        IA = COL + 1 + IB
154     PIECE = ROOK(IA)*(2-IB) + QUEEN(IA)*(IB-1)
156     IF(PIECE .EQ. 0) GO TO 153
        IB = PIECE/10
        IC = PIECE-10*IB
        IF(IC .EQ. J) GO TO 153
        DO 157 IA=1,64
        IF(IDMAN(IB,J,IA) .EQ. 0) GO TO 158
157     CONTINUE
158     IF(IGMAN(IB,J,IA) .EQ. 0) GO TO 153
        ID = IABS(IC-J)
        ISIGN = ID/(J-IC)
        DO 159 IP = 1,ID
        IF(BOARD(IB,ISIGN*IP+IC) .NE. 0) GO TO 153
159     CONTINUE
        MOVE(K) = PIECE*10**4 + 1000*IB + 100*J +
     * 10*IABS(BOARD(IB,IC)) + IABS(BOARD(IB,J))
        K = K + 1
        IF(K .GT. MOVE2) GO TO 200
153     CONTINUE
151     CONTINUE
C     CAN THE COMPUTER MOVE A PAWN?
        DO 171 ID = 1,8
        IA = ID*5-ID/2*6-ID/3*3-ID/4*2-ID/5-ID/6+ID/7-ID/8*4+4*(1+COL)
        IF(PAWN(IA) .EQ. 0) GO TO 171
        IB = PAWN(IA)/10
        IC = PAWN(IA) - 10*IB
        CALL SP2(IB,IC,LOC)
        GO TO (171,200),LOC
171     CONTINUE
C     CAN THE COMPUTER MOVE A PIECE?
        DO 181 IA = 2,9
        ID = 2 + COL + ((IA-1)/2*2)/(IA-1)
        IB = IA/2*4 - IA/4*7 - IA/6*3 + IA/8*4
        PIECE = PIEC3(IB,ID)
186     IF(PIECE .EQ. 0) GO TO 181
        ID = PIECE/10
        IG = PIECE - 10*ID
        GO TO (187,188,189,188), IB
187     CALL SN2(ID,IG,LOC)
        GO TO (181,200),LOC
188     CALL SB2(ID,IG,LOC)
        GO TO (181,200),LOC
189     CALL SR2(ID,IG,LOC)
        GO TO (181,200),LOC
181     CONTINUE
C     CAN THE KING MOVE ALTHOUGH HE IS NOT IN CHECK?
        IB = (COL+1)/2 + 1
        IA = KING(IB)/10
        IB = KING(IB)-10*IA
        ISUB = 10
        GO TO 3
C     TRANSFER THE CODED MOVES FROM MOVE(I) TO
C     IMOVE(I) FOR PERMANENT STORAGE.
200     JZ = JZ + MOVE2
        KZ = JZ + MOVE2 - 1
        DO 201 I = JZ,KZ
        LZ = I - JZ + 1
        IMOVE(I) = MOVE(LZ)
        IF(I .LT. MOVE2 + 1) KMOVE(I) = MOVE(LZ)
201     CONTINUE
C     MAKE THE NEXT MOVE STORED IN IZ
        NTEST = NTEST + 1
        IF(NTEST .EQ. MOVES) GO TO 202
205     KZ = IZ(KZ/MOVE2)
        CALL SMOVE(KZ,I,J,IN,JN,1)
        COL = -COL
        GO TO 100
C     EVALUATE EACH OF THE FINAL MOVES
202     JSIGN = (2*(MOVES-MOVES/2*2)-1)*LSIGN
        IPOINT = -1000*JSIGN
        DO 203 LZ = JZ,KZ
        IF(IMOVE(LZ) .EQ. 0) GO TO 204
        CALL SMOVE(LZ,I,J,IN,JN,1)
        CALL EVAL(POINT)
        CALL SMOVE(LZ,I,J,IN,JN,2)
        IF(JSIGN*(IPOINT-POINT) .LT. 0) IPOINT = POINT
203     CONTINUE
C     RESET CONDITIONS TO BEGIN CYCLE AGAIN.
204     KZ = KZ - MOVE2
        JZ = IZ(KZ/MOVE2)
        CALL SMOVE(JZ,I,J,IN,JN,2)
        IMOVE(JZ) = IPOINT
        IZ(KZ/MOVE2) = JZ + 1
        IF(JZ .EQ. KZ) GO TO 206
        IF(IMOVE(JZ+1) .EQ. 0) GO TO 206
        JZ = KZ-MOVE2 + 1
        COL = -COL
        NTEST = NTEST - 1
        GO TO 205
C     RESET CONDITIONS FOR THE LAST TIMES.
206     IMOVE(JZ+1) = 1000
        JSIGN = (2*(KZ/MOVE2 - KZ/MOVE2/2*2) - 1)*LSIGN
        IPOINT = -1000*JSIGN
        IF(KZ .EQ. MOVE2) GO TO 500
        LZ = KZ-MOVE2 + 1
        DO 207 I=LZ,KZ
        IF(IMOVE(I) .EQ. 1000) GO TO 208
        IF(JSIGN*(IPOINT-IMOVE(I)) .LT. 0) IPOINT = IMOVE(I)
207     CONTINUE
208     IZ(KZ/MOVE2) = LZ
        NTEST = NTEST - 1
        COL = -COL
        GO TO 204
C     DETERMINE THE MOVE THE COMPUTER WILL MAKE.
500     DO 501 I=1, MOVE2
        IF(IMOVE(I) .EQ. 1000) GO TO 800
        IF(JSIGN*(IPOINT-IMOVE(I))) 502,503,501
502     J = 1
        IZ(1) = I
        IPOINT = IMOVE(I)
        GO TO 501
503     J = J + 1
        IZ(J) = I
501     CONTINUE
        NTEST = IZ(1)
        IF(-LSIGN*IMOVE(NTEST) .GT. 150) K = 1
C     THE FOLLOWING SECTION CHOOSES THE CORRECT MOVE IF
C     MORE THAN ONE ARE EQUALLY GOOD.
800     WRITE(6,801) JMOVE, COL2(COLOR)
801     FORMAT('0', ' MOVE NUMBER ', I3, ' FOR ', A5, ' IS--')
        IF(K .EQ. 1) GO TO 823
        JMOVE = JMOVE+1
        IPICK = 0
        IF(J .EQ. 1) GO TO 802
        ITIME = ITIME + JMOVE
        IPICK = MOD(ITIME,J)
802     IPICK = IZ(IPICK + 1)
        IMOVE(IPICK) = KMOVE(IPICK)
        IF(KMOVE(IPICK) .LT. 1000) GO TO 818
        CALL SMOVE(IPICK,I,J,IN,JN,2)
        CALL EVAL(POINT)
        IF(JMOVE .GT. 8) IGAME=2-(IA*2/945)
        PIEC1 = IABS(PIEC1)
        IF(PIEC2 .LT. 0) PIEC2 = -PIEC2
        IN = IABS(IN)
        JN = IABS(JN)
        IF(PIEC2 .EQ. 0) GO TO 810
C     THE FOLLOWING IS FOR A CAPTURE
        WRITE(6,805) PN(PIEC1),I,J,PN(PIEC2),IN,JN
805     FORMAT(' ',A6,'(',I2,', ',I2,') X ',A6,'(',I2,', ',I2,')')
        GO TO 825
C     THE FOLLOWING IS FOR A SIMPLE MOVE
810     JNT = 6 - (JN/5*5)
        INT = JN*5-JN/2*7-JN/3*4-JN/5*5+JN/6*8-JN/7*6+JN/8*4
        IN = IABS(9*(COLOR-1)-IN)
        IF(INT .EQ. 2) GO TO 816
        WRITE(6,815) PN(PIEC1),I,J,PN(JNT),PN(INT),IN
815     FORMAT(' ',A6,'(',I2,', ',I2,') - ',A6,1X,A6,1X,I2)
        GO TO 825
816     WRITE(6,817) PN(PIEC1),I,J,PN(JNT),IN
817     FORMAT(' ',A6,'(',I2,', ',I2,') - ',A6,1X,I2)
        GO TO 825
818     JNT = KMOVE(IPICK)/100*5 + 1
        WRITE(6,819) PN(JNT)
819     FORMAT(' ','CASTLE ',A6,' SIDE')
825     ITEST = 5
        CALL SMOVE(IPICK,I,J,IN,JN,1)
        IF(LSIGN*IPOINT .LT. 350) GO TO 7001
        WRITE(6,827)
827     FORMAT(1X, 'CHECKMATE')
        GO TO 7001
850     WRITE(6,830)
830     FORMAT(' ', 'IT APPEARS WE HAVE STALEMATED')
        GO TO 826
851     WRITE(6,831)
831     FORMAT(' ','AFTER CAREFUL CONSIDERATION I HAVE DECIDED TO ACCEPT
     * A DRAW')
        GO TO 826
823     WRITE(6,824)
824     FORMAT(' ', 'RESIGNS')
826     STOP
        END
        SUBROUTINE SK2(I, J, LOC)
        INTEGER BOARD,PIEC1,PIEC2,DPAWN,POINT,CODE,COLOR,COL
        INTEGER PAWN,KING,KNIGH,BISH,ROOK,QUEEN
        COMMON/Q/IPICK,IB,ID,POINT,MOVE(10),MOVEP(10),IGMAN(8,8,64),
     * IDMAN(8,8,64),IE,K,KP,COLOR,IGAME,IMOVE(50),IP,PIEC1,BOARD(8,8),
     * IA,IC,ITEST,ISIGN,JSIGN,CODE,COL,PIEC2,MOVE2,PAWN(16),KING(2),
     * KNIGH(4),BISH(4),ROOK(4),QUEEN(4)
C     THIS PROGRAM DETERMINES WHERE THE KING MAY MOVE
        DO 5 INT = 1,3
        DO 5 JNT = 1,3
        IN = I + INT - 2
        JN = J + JNT - 2
        CALL ASSIG(I,J,IN,JN)
        IF(ITEST .EQ. 3) GO TO 6
5       CONTINUE
        LOC=1
        RETURN
        LOC=2
6       RETURN
        END
        SUBROUTINE SP2(I, J, LOC)
        INTEGER BOARD,PIEC1,PIEC2,DPAWN,POINT,CODE,COLOR,COL
        INTEGER PAWN,KING,KNIGH,BISH,ROOK,QUEEN
        COMMON/Q/IPICK,IB,ID,POINT,MOVE(10),MOVEP(10),IGMAN(8,8,64),
     * IDMAN(8,8,64),IE,K,KP,COLOR,IGAME,IMOVE(50),IP,PIEC1,BOARD(8,8),
     * IA,IC,ITEST,ISIGN,JSIGN,CODE,COL,PIEC2,MOVE2,PAWN(16),KING(2),
     * KNIGH(4),BISH(4),ROOK(4),QUEEN(4)
        IPI = BOARD(I,J)/IABS(BOARD(I,J))
        IF(ITEST .EQ. 2) GO TO 6
C     THE FOLLOWING SECTION DETERMINES POSSIBLE
C     CAPTURES BY PAWNS.
        IN = I + IPI
        DO 5 JNT = 1,2
        JN = J + JNT/2*2 -1
        CALL ASSIG(I,J,IN,JN)
        IF(ITEST .EQ. 3) GO TO 11
5       CONTINUE
        LOC=1
        RETURN
C     THE FOLLOWING SECTION DETERMINES ONLY PAWN MOVES.
6       IN = I + 2*IPI
        IF(BOARD(IN,J) .NE. 0) GO TO 7
        IF(BOARD(IN-IPI,J) .NE. 0) GO TO 7
        IF(5*(COL+1)/2 + 2 .NE. I) GO TO 7
        CALL ASSIG(I,J,IN,J)
        IF(ITEST .EQ. 3) GO TO 11
7       IN = IN-IPI
        IF(BOARD(IN,J) .NE. 0) GO TO 10
        CALL ASSIG(I,J,IN,J)
10      IF(ITEST .EQ. 3) GO TO 11
        LOC=1
        RETURN
        LOC=2
11      RETURN
        END
        SUBROUTINE SN2(I, J, LOC)
        INTEGER BOARD,PIEC1,PIEC2,DPAWN,POINT,CODE,COLOR,COL
        INTEGER PAWN,KING,KNIGH,BISH,ROOK,QUEEN
        COMMON/Q/IPICK,IB,ID,POINT,MOVE(10),MOVEP(10),IGMAN(8,8,64),
     * IDMAN(8,8,64),IE,K,KP,COLOR,IGAME,IMOVE(50),IP,PIEC1,BOARD(8,8),
     * IA,IC,ITEST,ISIGN,JSIGN,CODE,COL,PIEC2,MOVE2,PAWN(16),KING(2),
     * KNIGH(4),BISH(4),ROOK(4),QUEEN(4)
C     THIS PROGRAM DETERMINES WHERE THE KNIGHT MAY MOVE.
        DO 6 INT = 1,4
        IN = INT/3*(INT + INT/2) - INT + I
        JN = IABS(IN - I) - 3 + J
5       CALL ASSIG(I,J,IN,JN)
        IF(ITEST .EQ. 3) GO TO 7
        JN = 2*J-JN
        IF(JN-J .GT. 0) GO TO 5
6       CONTINUE
        LOC=1
        RETURN
        LOC=2
7       RETURN
        END
        SUBROUTINE SB2(I, J, LOC)
        INTEGER BOARD,PIEC1,PIEC2,DPAWN,POINT,CODE,COLOR,COL
        INTEGER PAWN,KING,KNIGH,BISH,ROOK,QUEEN
        COMMON/Q/IPICK,IB,ID,POINT,MOVE(10),MOVEP(10),IGMAN(8,8,64),
     * IDMAN(8,8,64),IE,K,KP,COLOR,IGAME,IMOVE(50),IP,PIEC1,BOARD(8,8),
     * IA,IC,ITEST,ISIGN,JSIGN,CODE,COL,PIEC2,MOVE2,PAWN(16),KING(2),
     * KNIGH(4),BISH(4),ROOK(4),QUEEN(4)
C     THIS PROGRAM DETERMINES WHERE THE BISHOP MAY MOVE.
        IA = 1
        IMT = 1
20      DO 13 INT = IMT,8
        IF(IA .EQ. 120) GO TO 14
        IF(INT-I) 7,13,10
7       IN = -INT
        IF(IA .EQ. 6) GO TO 10
        IF(IA .EQ. 2) GO TO 11
9       JN = -IABS(IN)
        CALL ASSIG(I,J,I+IN,J+JN)
        IF(ITEST .EQ. 3) GO TO 16
        GO TO (11,12), CODE
10      IF(IA .LT. 6) IA = 6
        IF(INT .LT. I) GO TO 25
        IF(INT .GT. 8) GO TO 14
        IN = INT - I
        IF(IA .NE. 24) GO TO 9
11      IF(IA .EQ. 3) GO TO 13
        IF(IA .EQ. 30) GO TO 13
        IF(IA .EQ. 120) GO TO 13
        JN = IABS(IN)
        CALL ASSIG(I,J,I+IN,J+JN)
        IF(ITEST .EQ. 3) GO TO 16
        IF(CODE .EQ. 1) GO TO 13
C     THE FOLLOWING IS FOR WHEN THE LINE OF MOVEMENT IS BLOCKED.
12      IA = IA*((IN/IABS(IN)*2 + JN/IABS(JN) + 3)/2 + 2)
        IF(JN .GE. 0) GO TO 13
        IF(IA .NE. 6) GO TO 11
        IF(IN .GT. 0) GO TO 11
13      CONTINUE
14      IF(IABS(BOARD(I,J)) .NE. 6) GO TO 15
        CALL SR2(I,J,LOC)
        GO TO (15,16),LOC
15      IF(ITEST .EQ. 3) GO TO 16
        LOC=1
        RETURN
25      IMT = I + 1
        GO TO 20
        LOC=2
16      RETURN
        END
        SUBROUTINE SR2(I, J, LOC)
        INTEGER BOARD,PIEC1,PIEC2,DPAWN,POINT,CODE,COLOR,COL
        INTEGER PAWN,KING,KNIGH,BISH,ROOK,QUEEN
        COMMON/Q/IPICK,IB,ID,POINT,MOVE(10),MOVEP(10),IGMAN(8,8,64),
     * IDMAN(8,8,64),IE,K,KP,COLOR,IGAME,IMOVE(50),IP,PIEC1,BOARD(8,8),
     * IA,IC,ITEST,ISIGN,JSIGN,CODE,COL,PIEC2,MOVE2,PAWN(16),KING(2),
     * KNIGH(4),BISH(4),ROOK(4),QUEEN(4)
C     THIS PROGRAM DETERMINES WHERE THE ROOK MAY MOVE
        IA = 1
        GO TO 5
7       IA = I
5       DO 15 INT = IA,8
        IF(INT-I) 6,9,8
6       IN = -INT
        CALL ASSIG(I,J,I+IN,J)
        IF(ITEST .EQ. 3) GO TO 17
        GO TO (15,7), CODE
8       IN = INT - I
        CALL ASSIG(I,J,I+IN,J)
        IF(ITEST .EQ. 3) GO TO 17
        GO TO (15,16), CODE
12      IB = J
        GO TO 10
9       IB = 1
10      DO 14 JNT = IB,8
        IF(JNT-J) 11,14,13
11      JN = -JNT
        CALL ASSIG(I,J,I,J+JN)
        IF(ITEST .EQ. 3) GO TO 17
        GO TO (14,12), CODE
13      JN = JNT -J
        CALL ASSIG(I,J,I,J+JN)
        IF(ITEST .EQ. 3) GO TO 17
        IF(CODE .EQ. 2) GO TO 15
14      CONTINUE
15      CONTINUE
16      IF(ITEST .EQ. 3) GO TO 17
        LOC=1
        RETURN
        LOC=2
17      RETURN
        END
        FUNCTION PIEC3(I, J)
        INTEGER BOARD,PIEC1,PIEC2,DPAWN,POINT,CODE,COLOR,COL
        INTEGER PAWN,KING,KNIGH,BISH,ROOK,QUEEN
        COMMON/Q/IPICK,IB,ID,POINT,MOVE(10),MOVEP(10),IGMAN(8,8,64),
     * IDMAN(8,8,64),IE,K,KP,COLOR,IGAME,IMOVE(50),IP,PIEC1,BOARD(8,8),
     * IA,IC,ITEST,ISIGN,JSIGN,CODE,COL,PIEC2,MOVE2,PAWN(16),KING(2),
     * KNIGH(4),BISH(4),ROOK(4),QUEEN(4)
        GO TO (1,2,3,4), I
1       PIEC3 = KNIGH(J)
        RETURN
2       PIEC3 = BISH(J)
        RETURN
3       PIEC3 = ROOK(J)
        RETURN
4       PIEC3 = QUEEN(J)
        RETURN
        END
        SUBROUTINE ASSIG(I,J,IN,JN)
        INTEGER BOARD,PIEC1,PIEC2,DPAWN,POINT,CODE,COLOR,COL
        INTEGER PAWN,KING,KNIGH,BISH,ROOK,QUEEN
        COMMON/Q/IPICK,IB,ID,POINT,MOVE(10),MOVEP(10),IGMAN(8,8,64),
     * IDMAN(8,8,64),IE,K,KP,COLOR,IGAME,IMOVE(50),IP,PIEC1,BOARD(8,8),
     * IA,IC,ITEST,ISIGN,JSIGN,CODE,COL,PIEC2,MOVE2,PAWN(16),KING(2),
     * KNIGH(4),BISH(4),ROOK(4),QUEEN(4)
C     TEST CONDITIONS OF LEGALITY OF MOVE.
        CODE = 2
        IF(IN .LE. 0) GO TO 75
        IF(JN .LE. 0) GO TO 75
        IF(IN .GE. 9) GO TO 75
        IF(JN .GE. 9) GO TO 75
        CODE = 1
        IF(IABS(IN-I)+IABS(JN-J) .EQ. 0) GO TO 75
15      ISIGN = IABS(BOARD(I,J))
        JSIGN = IABS(BOARD(IN,JN))
C     DETERMINE THE CORRECT CODE
        IF(ITEST .EQ. 2) GO TO 5
        IF(BOARD(IN,JN)*COL .GT. 0) GO TO 45
        IF(JSIGN+CODE .EQ. 1) CODE = CODE - 1
        IF((IN-I)*(JN-J) .EQ. 0) GO TO 35
        IF(ISIGN+JSIGN .EQ. 10) CODE = CODE-1
        IF(ISIGN+JSIGN .EQ. 12) CODE = CODE-1
        GO TO 45
35      IF((ISIGN+1)/2+(JSIGN+1)/2 .GT. 5) CODE = CODE - 1
C     THE FOLLOWING IS ONLY FOR ATTACK AND DEFENCE PURPOSES.
45      CODE = CODE + 1
        IF(BOARD(I,J)*COL .GT. 0) GO TO 55
        DO 65 IA=1,64
        IF(IGMAN(IN,JN,IA) .EQ. 0) GO TO 66
65      CONTINUE
66      IGMAN(IN,JN,IA) = 10*I + J
        GO TO 75
55      DO 67 IA=1,64
        IF(IDMAN(IN,JN,IA) .EQ. 0) GO TO 68
67      CONTINUE
68      IDMAN(IN,JN,IA) = 10*I + J
75      RETURN
C     THE FOLLOWING IS ONLY FOR MOVING PURPOSES.
5       IF(ISIGN .NE. 1) GO TO 90
        IF(IDMAN(IN,JN,1) .NE. 0) GO TO 10
90      IF(BOARD(IN,JN) .NE. 0) GO TO 6
        CODE = CODE - 1
        MOVE(K) = 10**5*I+10**4*J+10**3*IN+100*JN+10*ISIGN+JSIGN
        DO 95 IA=1,64
        IF(IDMAN(IN,JN,IA) .EQ. 0) GO TO 96
95      CONTINUE
96      IF(IGMAN(IN,JN,IA) .EQ. 0) GO TO 91
89      K = K+1
        IF(K .GT. MOVE2) ITEST = 3
        GO TO 6
91      DO 97 IA=1,64
        IF(IGMAN(IN,JN,IA) .EQ. 0) GO TO 98
97      CONTINUE
98      IF(IDMAN(IN,JN,IA) .EQ. 0) GO TO 89
        MOVEP(KP) = MOVE(K)
        IF(KP .LE. MOVE2) KP=KP+1
6       CODE = CODE + 1
10      RETURN
        END
        SUBROUTINE SMOVE(IAT,I,J,IN,JN,IBT)
        INTEGER BOARD,PIEC1,PIEC2,DPAWN,POINT,CODE,COLOR,COL
        INTEGER PAWN,KING,KNIGH,BISH,ROOK,QUEEN
        COMMON/Q/IPICK,IB,ID,POINT,MOVE(10),MOVEP(10),IGMAN(8,8,64),
     * IDMAN(8,8,64),IE,K,KP,COLOR,IGAME,IMOVE(50),IP,PIEC1,BOARD(8,8),
     * IA,IC,ITEST,ISIGN,JSIGN,CODE,COL,PIEC2,MOVE2,PAWN(16),KING(2),
     * KNIGH(4),BISH(4),ROOK(4),QUEEN(4)
C     DETERMINE VARIABLES FOR MOVE FROM CODED INTEGER
        IA = IAT
        IB = IBT
        ICOL = (IAT-1)/MOVE2
        ICOL = ((ICOL/2*2-ICOL)*2+1)*(COLOR*2-3)
        IF(IMOVE(IA) .LT. 1000) GO TO 50
        I = IMOVE(IA)/10**5
        J = (IMOVE(IA) - I*10**5)/10**4
        IN = (IMOVE(IA)-I*10**5-J*10**4)/10**3
        JN = (IMOVE(IA)-IMOVE(IA)/10**3*10**3)/10**2
        PIEC1 = -(IMOVE(IA)-IMOVE(IA)/100*100)/10*ICOL
        PIEC2 = (IMOVE(IA)-IMOVE(IA)/10*10)*ICOL
        IF(IPICK .EQ. 0) GO TO 1
        IF(ITEST .EQ. 5) GO TO 1
        GO TO 200
C     ASSIGN NEW BOARD POSITIONS - MAKE THE MOVE.
1       IB = IB - 1
        IF(IB .EQ. 1) GO TO 5
        BOARD(IN,JN)=BOARD(I,J)
        IF(IABS(BOARD(I,J)) .NE. 2) GO TO 2
        IF(IN .EQ. 1) BOARD(IN,JN) = -6*ICOL
        IF(IN .EQ. 8) BOARD(IN,JN) = -6*ICOL
2       BOARD(I,J) = 0
        GO TO 100
5       BOARD(I,J) = PIEC1
        BOARD(IN,JN) = PIEC2
100     DO 199 IC = 1,2
        IAT = 1/(IC-IB+IB/IC)
        ID = 1-2*ICOL*(IC-1) + ICOL
        IF(IB+IC .EQ. 1) GO TO 101
        IE=I
        I=IN
        IN=IE
        IE=J
        J=JN
        JN=IE
101     IE=(IC-1)*ICOL*PIEC2 + (IC-2)*ICOL*PIEC1 + 1
        GO TO (199,102,103,104,104,104,104), IE
102     KING(ID/2+1) = (10*IN+JN)*IAT
        GO TO 199
103     ID=4*ID
        DO 109 IP=1,8
        IF(PAWN(IP+ID) .EQ. 10*I+J) GO TO 110
        IF(PAWN(IP+ID)+IB+IC .EQ. 3) GO TO 110
109     CONTINUE
110     PAWN(IP+ID) = (10*IN+JN)*IAT
        GO TO 199
104     IE = IE-3
        IP=1
        IF(PIEC3(IE,ID+1) .NE. 10*I+J) IP=2
        IF(PIEC3(IE,ID+1)+IB+IC .EQ. 3) IP=1
        GO TO (105,106,107,114), IE
105     KNIGH(IP+ID) = (10*IN+JN)*IAT
        GO TO 199
106     BISH(IP+ID) = (10*IN+JN)*IAT
        GO TO 199
107     ROOK(IP+ID) = (10*IN+JN)*IAT
        GO TO 199
114     QUEEN(IP+ID) = (10*IN+JN)*IAT
199     CONTINUE
        IAT=IA
        RETURN
C     CASTLE - EITHER SIDE
50      IC=(ICOL+1)/2*7 + 1
        IE = 10/IMOVE(IA)
        BOARD(IC,5) = ICOL*(1-IB)
        BOARD(IC,7*IE+1) = ICOL*5*(1-IB)
        BOARD(IC,4*IE+3) = ICOL*(IB-2)
        BOARD(IC,2*IE+4) = ICOL*5*(IB-2)
        ID=(ICOL+1)/2*2
        KING(ID/2 + 1) = 10*IC+4*(IE/IB)+2*IB+1
        ROOK(IE+ID+1) = 10*IC+3*(1-IB)-5*(IE/IB)+7*IE+4
200     RETURN
        END
        SUBROUTINE EVAL(IAT)
        INTEGER BOARD,PIEC1,PIEC2,DPAWN,POINT,CODE,COLOR,COL
        INTEGER PAWN,KING,KNIGH,BISH,ROOK,QUEEN
        DIMENSION DPAWN(2)
        COMMON/Q/IPICK,IB,ID,POINT,MOVE(10),MOVEP(10),IGMAN(8,8,64),
     * IDMAN(8,8,64),IE,K,KP,COLOR,IGAME,IMOVE(50),IP,PIEC1,BOARD(8,8),
     * IA,IC,ITEST,ISIGN,JSIGN,CODE,COL,PIEC2,MOVE2,PAWN(16),KING(2),
     * KNIGH(4),BISH(4),ROOK(4),QUEEN(4)
        IA = 0
        POINT = 0
        DPAWN(1) = 0
        DPAWN(2) = 0
        DO 11 IB = 1,8
C     POINTS FOR DOUBLED PAWNS
        POINT = POINT + ((2*DPAWN(2)-1)/2-(2*DPAWN(1)-1)/2)*4
        DPAWN(1) = 0
        DPAWN(2) = 0
        DO 10 IC = 1,8
        IF(BOARD(IC,IB) .EQ. 0) GO TO 10
        ISIGN = BOARD(IC,IB)/IABS(BOARD(IC,IB))
C     POINTS FOR CONTROL OF THE CENTER
        POINT = POINT + ISIGN*((IC+1)/4*((IB+1)/4)*((10-IC)/4)*((10-IB)/
     * 4)+3*(IC/4*((9-IC)/4)*(IB/4)*((9-IB)/4)))
        ID = 2 - IABS(BOARD(IC,IB))
        IF(ID) 5,7,8
5       IE = IB*5-IB/2*7-IB/3*4+IB/4*4-IB/6-IB/7*6+ID-1
        IF(IE .NE. 1) IE = 0
C     POINTS FOR VALUE OF PIECE MINUS POINTS IF PIECE HAS NOT MOVED
        ID = ISIGN*(BOARD(IC,IB)*18-5/BOARD(IC,IB)*30-4/BOARD(IC,IB)*4+
     * 3/BOARD(IC,IB)*16)
        POINT=POINT+ISIGN*ID
        IA=IA+ID
        IF(IABS(BOARD(IC,IB)) .NE. 5) GO TO 10
C     POINTS FOR ROOK ON OPPONENTS SECOND RANK
6       IF(2+(IABS(BOARD(IC,IB))/BOARD(IC,IB)+1)/2*5 .EQ. IC) POINT =
     * POINT + 4*ISIGN
        GO TO 10
7       ID = (1-ISIGN)/2 + 1
        DPAWN(ID) = DPAWN(ID) + 1
        POINT = POINT + ISIGN*12
        IA=IA+12
C     POINTS FOR PAWN CHAIN
        IF(IB .EQ. 1) GO TO 15
        IF(BOARD(ISIGN+IC,IB-1) .EQ. BOARD(IC,IB)) POINT = POINT+ISIGN
15      IF(IB .EQ. 8) GO TO 10
        IF(BOARD(ISIGN+IC,IB+1) .EQ. BOARD(IC,IB)) POINT = POINT+ISIGN
        GO TO 10
C     POINTS FOR HAVING KING ON BOARD
8       POINT = POINT + 500*ISIGN
        IF(IABS(5-IB) .EQ. 2) POINT = POINT + 5*ISIGN*(1/IC+IC/8)
10      CONTINUE
11      CONTINUE
        IAT = POINT
        RETURN
        END
      BLOCK DATA
        COMMON/Q/IPICK,IB,ID,POINT,MOVE(10),MOVEP(10),IGMAN(8,8,64),
     * IDMAN(8,8,64),IE,K,KP,COLOR,IGAME,IMOVE(50),IP,PIEC1,BOARD(8,8),
     * IA,IC,ITEST,ISIGN,JSIGN,CODE,COL,PIEC2,MOVE2,PAWN(16),KING(2),
     * KNIGH(4),BISH(4),ROOK(4),QUEEN(4)
      DATA MOVE2/5/
      DATA KING/15,85/,
     *     PAWN/21,22,23,24,25,26,27,28,71,72,73,74,75,76,77,78/,
     *     KNIGH/12,17,82,87/,
     *     BISH/13,16,83,86/,
     *     ROOK/11,18,81,88/,
     *     QUEEN/14,0,84,0/
      END
