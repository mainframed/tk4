         MACRO
&LABL    RENTR &ID,&BASE=12,&PARM=,&WORK=72
.*
.*   THIS MACRO GENERATES A REENTRANT STANDARD LINKAGE
.*
.*LABEL RENTR BASE=(B1,...),PARM=(PREG,PNAME),WORK=(LEN,WNAME)
.*   ID - IF NULL, CSECT STA. GENERATED. IF *, ENTRY STA. GENERATED.
.*   B1,... - BASE REGISTER(S) FOR ENTRY
.*   PREG - REG. TO BE LOADED W/CONTENTS OF R1, IF DESIRED
.*   PNAME - NAME FOR USING ON PREG, IF DESIRED
.*   LEN - LENGTH OF WORK AREA (GETMAIN), IF DESIRED
.*   WNAME - NAME FOR USING ON WORK AREA (R13), IF DESIRED
.*
         GBLC  &@LWRWKL
         LCLA  &L,&M,&N
         LCLC  &B,&C
&@LWRWKL SETC '&WORK(1)'
         AIF   ('&ID' EQ '*').STARID
&LABL    CSECT
&C       SETC  ''
         AGO   .NOLABL
.STARID  ENTRY &LABL                             INDICATE ENTRY POINT
&C       SETC  '&LABL'
.NOLABL  ANOP
&L       SETA  K'&LABL
&M       SETA  &L/2*2
&N       SETA  &M+6
         AIF   (&L-&M EQ 1).NOPAD
&B       SETC  '
.NOPAD   ANOP
&C       BC    15,&N.(0,15)                      BRANCH AROUND ID
         DC    X'&L',C'&LABL&B'                  IDENTIFIER
         STM   14,12,12(13)                      SAVE REGISTERS
&B       SETC  '&BASE(1)'
         AIF   ('&B' EQ '0' OR '&B' EQ '15').DBASE
         LR    &B,15                             ENTRY ADDRESS
.DBASE   AIF   (N'&BASE LE 1).ONEBASE
         LA    15,2048(0,0)                      HALF PAGE CONSTANT
&N       SETA  2
.BASES   LA    &BASE(&N),2048(15,&BASE(&N-1))    SET NEXT BASE
&B       SETC  '&B,&BASE(&N)'
&N       SETA  &N+1
         AIF   (&N LE N'&BASE).BASES
.ONEBASE USING &LABL,&B
         AIF   ('&PARM(1)' EQ '').NOPARM
         LR    &PARM(1),1                        PARM ADDRESS
         AIF   ('&PARM(2)' EQ '').NOPARM
         USING &PARM(2),&PARM(1)
.NOPARM  ANOP
         AIF   ('&@LWRWKL' EQ '' OR '&@LWRWKL' EQ '0').NOWORK
         LA    0,&@LWRWKL                        WORK AREA LENGTH
         SLR   1,1                               ZERO ADRESS
         BCTR  1,0                               INDICATE GETMAIN
         SVC   10                                ISSUE GETMAIN SVC
         ST    13,4(0,1)                         CHAIN
         ST    1,8(0,13)                           SAVE
         LR    13,1                                  AREAS
         AIF   ('&WORK(2)' EQ '').NOWORK
         USING &WORK(2),13
.NOWORK  ANOP
         MEND  , RENTR                                         LW  9/74
         MACRO
&LABL    REXIT &T,&RC=0,&WORK=
.*
.*   THIS MACRO IS USED TO EXIT FROM A REENTRANT PROGRAM
.*    ENTERED WITH THE RENTR MACRO OR THE EQUIVALENT.
.*
         GBLC  &@LWRWKL
         LCLC  &L
&L       SETC  '&WORK'
         AIF   (('&L' NE '') AND ('&L' NE '0')).NEWL
&L       SETC  '&@LWRWKL'
         AIF   (('&L' EQ '') OR ('&L' EQ '0')).NOLEN
.NEWL    ANOP
&LABL    LA    1,0(0,13)                         WORK AREA ADDRESS
         L     13,4(0,13)                        OLD SAVE AREA ADDRESS
         AIF   ('&RC'(1,1) NE '(').RCNREG
         ST    &RC(1),16(0,13)                   SAVE RETURN CODE
.RCNREG  ANOP
         LA    0,&L                              WORK AREA LENGTH
         SVC   10                                ISSUE FREEMAIN SVC
.CKRC    LM    14,12,12(13)                      RESTORE REGISTERS
         AIF   (('&RC' EQ '') OR ('&RC'(1,1) EQ '(')).NORC
         AIF   ('&RC' EQ '0').ZERORC
         LA    15,&RC                            SET RETURN CODE
         AGO   .NORC
.ZERORC  SLR   15,15                             ZERO RETURN CODE
.NORC    AIF   ('&T' NE 'T').NOT
         MVI   12(13),X'FF'                      SET RETURN INDICATION
.NOT     BCR   15,14                             RETURN
         MEXIT
.NOLEN   AIF   ('&LABL' EQ '').NOLAB
&LABL    DS    0H
.NOLAB   AIF   ('&RC'(1,1) NE '(').CKRC
         AIF   ('&RC' EQ '(15)').RC15
         LR    15,&RC(1)                         LOAD RETURN CODE
.RC15    L     14,12(0,13)                       RESTORE R14
         LM    2,12,28(13)                       RESTORE R2-R12
         AGO   .NORC
         MEND  , REXIT                                         LW  7/74
         MACRO
&LABL    TPTGT &BUFF,&LEN,&TYPE=,&ASID=,&UIDL=
.*
.*   THIS MACRO IS USED TO PRINT A MESSAGE AT A TSO TERMINAL
.*    OR RECEIVE INPUT FROM SAME.
.*
         LCLA  &N,&GET,&UID,&HIP,&NOW,&HOL,&BRK,&EDI
         LCLC  &L
&L       SETC  'L'''
         AIF   ('&LABL' EQ '').NOLABL
&LABL    DS    0H
.NOLABL  ANOP
         AIF   ('&BUFF' EQ '').NOBUF
         AIF   ('&BUFF' EQ '(1)').GOTBUF
         AIF   ('&BUFF'(1,1) EQ '(').REGBUF
         LA    1,&BUFF                           BUFFER ADDRESS
         AGO   .GOTBUF
.REGBUF  LR    1,&BUFF(1)                        BUFFER ADDRESS
.GOTBUF  ANOP
         AIF   ('&LEN' EQ '').NOLEN
         AIF   ('&LEN' EQ '(0)').GOTLEN
         AIF   ('&LEN'(1,1) EQ '(').REGLEN
         LA    0,&LEN                            BUFFER LENGTH
         AGO   .GOTLEN
.REGLEN  LR    0,&LEN(1)                         BUFFER LENGTH
         AGO   .GOTLEN
.NOLEN   LA    0,&L&BUFF                         BUFFER LENGTH
.GOTLEN  ANOP
         AIF   ('&UIDL' EQ '').NOUID
         AIF   ('&UIDL' EQ '(15)').GOTUID
         AIF   ('&UIDL'(1,1) EQ '(').REGUID
         LA    15,&UIDL                          USERID ADDRESS
         AGO   .GOTUID
.REGUID  LR    15,&UIDL(1)                       USERID ADDRESS
.GOTUID  ANOP
&UID     SETA  64
.NOUID   ANOP
         AIF   ('&ASID' EQ '').NOAID
         AIF   ('&ASID'(1,1) EQ '(').REGAID
         LA    14,&ASID                          ADDRESS SPACE ID
         SLL   14,16                             IN HI HALFWORD
         OR    0,14                              OF R0
         AGO   .NOAID
.REGAID  SLL   &ASID(1),16                       ASID IN HI HALFWORD
         OR    0,&ASID(1)                        OF R0
.NOAID   ANOP
         AIF   ('&TYPE' EQ '').NOTYP
&N       SETA  N'&TYPE
.TYPLOOP AIF   ('&TYPE(&N)' NE 'GET').NOGET
&GET     SETA  128
         AGO   .TYPGOT
.NOGET   AIF   ('&TYPE(&N)' NE 'PUT').NOPUT
&GET     SETA  0
         AGO   .TYPGOT
.NOPUT   AIF   ('&TYPE(&N)' NE 'HIGHP').NOHIP
&HIP     SETA  32
         AGO   .TYPGOT
.NOHIP   AIF   ('&TYPE(&N)' NE 'LOWP').NOLOP
&HIP     SETA  0
         AGO   .TYPGOT
.NOLOP   AIF   ('&TYPE(&N)' NE 'NOWAIT').NONOW
&NOW     SETA  16
         AGO   .TYPGOT
.NONOW   AIF   ('&TYPE(&N)' NE 'WAIT').NOWAI
&NOW     SETA  0
         AGO   .TYPGOT
.NOWAI   AIF   ('&TYPE(&N)' NE 'HOLD').NOHOL
&HOL     SETA  8
         AGO   .TYPGOT
.NOHOL   AIF   ('&TYPE(&N)' NE 'NOHOLD').NONOH
&HOL     SETA  0
         AGO   .TYPGOT
.NONOH   AIF   ('&TYPE(&N)' NE 'BREAKIN').NOBRK
&BRK     SETA  4
         AGO   .TYPGOT
.NOBRK   AIF   ('&TYPE(&N)' NE 'NOBREAK').NONOB
&BRK     SETA  0
         AGO   .TYPGOT
.NONOB   AIF   ('&TYPE(&N)' NE 'FULLSCR').NOFSC
&EDI     SETA  3
         AGO   .TYPGOT
.NOFSC   AIF   ('&TYPE(&N)' NE 'CONTROL').NOCTL
&EDI     SETA  2
         AGO   .TYPGOT
.NOCTL   AIF   ('&TYPE(&N)' NE 'ASIS').NOASI
&EDI     SETA  1
         AGO   .TYPGOT
.NOASI   AIF   ('&TYPE(&N)' NE 'EDIT').NOEDI
&EDI     SETA  0
.NOEDI   MNOTE 4,'INVALID TYPE ''&TYPE(&N)'' IGNORED.'
.TYPGOT  ANOP
&N       SETA  &N-1
         AIF   (&N GE 1).TYPLOOP
&N       SETA  &GET+&UID+&HIP+&NOW+&HOL+&BRK+&EDI
         AIF   (&N EQ 0).NOTYP
         AIF   (&N LT 16).LOTYP
         NOP   &N.(15)                           OPTION BYTE
         AGO   .INTYP
.LOTYP   NOPR  &N                                OPTION BYTE
.INTYP   ICM   1,8,*-1                           INSERT OPTIONS IN R1
.NOTYP   ANOP
         SVC   93                                ISSUE TPUT/TGET SVC
         MEXIT
.NOBUF   MNOTE 8,'MISSING BUFFER ADDRESS.'
         MEND
STRK     TITLE 'SUBROUTINE ENCODE(NUM,LEN,STR) - CONVERT INTEGER TO STRX
               ING'
ENCODE   RENTR BASE=15,WORK=0
         LM    2,4,0(1)       PICK UP PARM ADDR'S
         L     2,0(,2)        NUM
         L     3,0(,3)        LEN
         CVD   2,DWORD        DECIMAL
         MVC   TEXT,MASK      COPY MASK
         LA    1,TEXT+L'TEXT-1  POINT TO LAST DIGIT
         EDMK  TEXT,DWORD+2   UNPACK
         BNM   *+10           SKIP IF NOT MINUS
         BCTR  1,0            BACK UP
         MVI   0(1),C'-'      INSERT SIGN
         LA    0,TEXT+L'TEXT  TEXT END ADDR
         SLR   0,1            LENGTH
         CR    3,0            ENOUGH ROOM?
         BL    NOROOM         NOPE
         LA    1,TEXT+L'TEXT  END ADDR AGAIN
         SLR   1,3            NEW START ADDR
EXMOVE   BCTR  3,0            BUMP LENGTH DOWN
         EX    3,MOVE         MOVE TEXT TO RESULT
         B     EXIT
NOROOM   LA    1,STARS        POINT TO ASTERISKS
         B     EXMOVE         MOVE 'EM IN
MOVE     MVC   0(0,4),0(1)    (EXECUTED)
MASK     DC    X'402020202020202020202120'   EDIT MASK
STARS    DC    (L'MASK)C'*'   ASTERISKS FOR OVERFLOW
TEXT     DS    CL(L'MASK)   STRING WORK AREA
         TITLE 'ENTRY DECODE(NUM,LEN,STR) - CONVERT STRING TO INTEGER'
DECODE   RENTR *,BASE=15,WORK=0
         LM    2,4,0(1)       PICK UP PARM ADDR'S
         L     3,0(,3)        LEN
         BCTR  3,0            LEN-1
         EX    3,PACK         PACK IT
         CVB   0,DWORD        BINARY
         ST    0,0(,2)        STORE RESULT
EXIT     REXIT T,RC=0
PACK     PACK  DWORD,0(0,4)   (EXECUTED)
DWORD    DS    D   DECIMAL WORK AREA
         TITLE 'SUBROUTINE ASSIGN(VAR1,LEN,VAR2) - MOVE VAR2 TO VAR1'
ASSIGN   RENTR BASE=15,WORK=0
         LM    2,4,0(1)       PICK UP PARM ADDR'S
         L     3,0(,3)        LEN
         LR    5,3            COPY LEN
         MVCL  2,4            MOVE IT
         REXIT T,RC=0
         TITLE 'LOGICAL FUCTION COMPAR(VAR1,LEN,VAR2) - COMPARE VAR1 WIX
               TH VAR2'
COMPAR   RENTR BASE=15,WORK=0
         LM    2,4,0(1)       PICK UP PARM ADDR'S
         L     3,0(,3)        LEN
         LR    5,3            COPY LEN
         LA    0,1            SET TRUE
         CLCL  2,4            COMPARE
         BE    *+6            SKIP IF EQUAL
         SLR   0,0            FALSE IF NOT EQUAL
         SLR   15,15          ZERO RETURN CODE
         REXIT T,RC=(15)
         TITLE 'SUBROUTINE SQUISH(DST,SRC1,SRC2,...) - COMPRESS CHARS'
SQUISH   RENTR BASE=15,WORK=0
         L     2,0(,1)        DESTINATION ADDR
SQLOOP   L     3,4(,1)        SOURCE ADDR
         MVC   0(1,2),0(3)    MOVE BYTE
         LA    2,1(,2)        BUMP DESTINATION POINTER
         LA    1,4(,1)        BUMP SOURCE POINTER
         LTR   3,3            WAS THAT THE LAST ONE?
         BNM   SQLOOP         NO: CONTINUE
         REXIT T,RC=0         YES: RETURN
         TITLE 'SUBROUTINE INPUT(CHAR) - GET TERMINAL INPUT'
INPUT    RENTR BASE=12,WORK=0
         L     2,0(,1)        RESULT ADDR
         ICM   1,15,BALANCE   # OF CHARS LEFT IN BUFFER
         BP    GOTSOME        NOT ZERO
         LA    1,BUFFER       BUFFER ADDR
         ST    1,CURSOR       STORE AS NEXT CHAR ADDR
         TPTGT (1),L'BUFFER,TYPE=GET  GET A LINE
         TR    BUFFER,TRANTBL  BLANK OUT BAD CHARS
         LTR   15,15          DID WE GET THE WHOLE LINE?
         BNZ   GOTSOME        NOPE
         LA    15,BUFFER(1)   YES: TEXT END ADDR
         MVI   0(15),C';'     INDICATE END
         LA    1,1(,1)        BUMP LENGTH
GOTSOME  BCTR  1,0            COUNT DOWN
         ST    1,BALANCE      SAVE COUNT
         L     1,CURSOR       CHAR ADDR
         MVC   0(1,2),0(1)    MOVE TO RESULT
         MVC   1(3,2),TRANTBL PAD WITH BLANKS
         LA    1,1(,1)        BUMP CHAR POINTER
         ST    1,CURSOR       SAVE IT
         B     INEXIT         RETURN
         SPACE 1
*        ENTRY CHEW - CANCEL CURRENT LINE
         SPACE 1
CHEW     RENTR *,BASE=12,WORK=0
         SLR   0,0            GET SOME ZEROS
         ST    0,BALANCE      INDICATE EMPTY BUFFER
         TCLEARQ INPUT        CLEAR TCAM BUFFERS
         B     INEXIT         RETURN
         SPACE 1
*        ENTRY BACKUP - DECREMENT BUFFER CURSOR
         SPACE 1
BACKUP   RENTR *,BASE=12,WORK=0
         L     2,CURSOR       NEXT CHAR ADDR
         CLI   0(2),C';'      SEMICOLON?
         BE    INEXIT         YES: DON'T BACK UP
         ICM   1,15,BALANCE   PICK UP BALANCE
         BNP   BACKEOL        SPECIAL CASE IF EMPTY
         LA    1,1(,1)        BUMP BALANCE
         ST    1,BALANCE      SAVE IT
         BCTR  2,0            DECREMENT CURSOR
         ST    2,CURSOR       SAVE IT
         B     INEXIT         RETURN
BACKEOL  MVI   BUFFER,C';'    STORE SEMICOLON
         LA    1,1            K
         ST    1,BALANCE      ONE CHARACTER LEFT
         LA    1,BUFFER       ADDRESS
         ST    1,CURSOR       SAVE IT
         SPACE 2
INEXIT   REXIT T,RC=0
BALANCE  DC    F'0'   NUMBER OF CHARACTERS LEFT IN BUFFER
CURSOR   DS    A   ADDRESS OF NEXT CHARACTER IN BUFFER
BUFFER   DS    CL79   INPUT BUFFER
         DS    C   SPACE FOR SEMICOLON
TRANTBL  DC    CL256' '   TRANSLATE TABLE
         ORG   TRANTBL+C'.'
         DC    C'.'
         ORG   TRANTBL+C';'
         DC    C';'
         ORG   TRANTBL+C'-'
         DC    C'-'
         ORG   TRANTBL+X'81'
         DC    C'ABCDEFGHI'
         ORG   TRANTBL+X'91'
         DC    C'JKLMNOPQR'
         ORG   TRANTBL+X'A2'
         DC    C'STUVWXYZ'
         ORG   TRANTBL+C'A'
         DC    C'ABCDEFGHI'
         ORG   TRANTBL+C'J'
         DC    C'JKLMNOPQR'
         ORG   TRANTBL+C'S'
         DC    C'STUVWXYZ'
         ORG   TRANTBL+C'0'
         DC    C'0123456789'
         ORG   ,
         TITLE 'FUNCTION RAN - RANDOM NUMBER BETWEEN 0 AND 1'
RAN      RENTR BASE=12,WORK=0
         ICM   3,15,SEED      PICK UP SEED
         BNZ   SEEDED         SKIP IF ALREADY SEEDED
         TIME  TU             GET TIME OF DAY
         LA    3,1            K
         OR    3,0            MAKE SURE IT'S ODD
SEEDED   SLR   2,2            CLEAR FOR WHAT FOLLOWS
         M     2,ROOT         MULTIPLY
         D     2,PRIME        DIVIDE
         ST    2,SEED         USE IT NEXT TIME
         SLL   2,1            MAKE IT EVEN
         ST    2,DOUBLE+4     SAVE FOR FLOAT
         SWR   0,0            CLEAR FOR ADD
         AD    0,DOUBLE       LOAD AND NORMALIZE
         SLR   15,15          ZERO RETURN CODE
         REXIT T,RC=(15)      RETURN
         DS    0D             ALIGN
DOUBLE   DC    X'4600000000000000'
ROOT     DC    F'16807'
PRIME    DC    X'7FFFFFFF'
SEED     DC    F'0'
         TITLE 'SUBROUTINE PROMPT(LEN,TEXT) - TPUT NO CARRIAGE RETURN'
PROMPT   RENTR BASE=12,WORK=0
         LM    2,3,0(1)       PARM ADDR'S
         L     0,0(,2)        PICK UP LENGTH
         TPTGT (3),(0),TYPE=ASIS TPUT
         REXIT T,RC=0         RETURN
         DROP  ,
         TITLE 'RTN TO LOGOFF TSO USER'
LOGOUT   CSECT ,
         USING LOGOUT,15
         L     1,16                CVT
         L     1,0(,1)             TCB PTR
         L     1,4(,1)             TCB
         L     1,180(,1)           JSCB
         L     1,264(,1)           PSCB
         L     1,48(,1)            RLGB
         MVC   4(L'RLGTXT,1),RLGTXT  INSERT LOGOFF CMD
         L     1,256(,1)           ECT
         NI    28(1),255-X'80'     HAS OPERANDS
         OI    28(1),X'10'         TMP PLEASE LOGOFF USER
         SLR   15,15               RC=0
         BR    14                  RETURN
RLGTXT   DC    C'LOGOFF '
*
*        TSO LINK FOR FORTRAN
*
**********************************************************
*
*        CALL TSO(LENGTH OF STRING,STRING)
*
*        WHERE STRING IS PARM TO PASSED TO THE TSO TMP
*
TSO      CSECT
         SAVE  (14,12),,*
         LR    12,15              GET BASE
         USING TSO,12
         LA    15,SAVEAREA        CHAIN SAVEAREAS
         ST    13,4(,15)
         ST    15,8(,13)
         LR    13,15
         LM    2,3,0(1)           GET PARM  ADDRS
         L     2,0(,2)            GET COMMAND LENGTH
         STH   2,TMPPARM          PUT LENGTH INTO PARM FIELD
         BCTR  2,0                DECREMENT R2 FOR EXECUTE
         EX    2,CMDMOV           MOVE THE COMMAND
         LINK  ,MF=(E,PARMPNTR),SF=(E,LINKLIST)
         L     13,4(,13)
         RETURN (14,12),T,RC=0
SAVEAREA DS    18A                SAVEAREA
PARMPNTR DC    X'80',AL3(TMPPARM) PARM LIST
TMPPARM  DS    H
COMMAND  DS    CL256
CMDMOV   MVC   COMMAND(0),0(3)    SAMPLE MVC FOR EX
LINKLIST LINK  EP=IKJEFT01,SF=L   MAKE DCS FOR LINK
         END   , ASSEMBLER LANGAUGE ROUTINES FOR STARTREK
