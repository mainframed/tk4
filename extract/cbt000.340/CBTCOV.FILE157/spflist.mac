 SPFLIST: PROC OPTIONS(MAIN) REORDER;
0/* ***************************************************************** */
 /*                                                                   */
 /*      PROGRAM -- SPFLIST                                           */
 /*      LANGUAGE -- PL/I IBM OPTIMIZING COMPILER                     */
 /*      AUTHOR -- AUGUST TREUBIG                                     */
 /*      INSTALLATION -- MIDDLE SOUTH SERVICES, INC.                  */
 /*                      200 WESTBANK EXPRESSWAY                      */
 /*                      GRETNA, LOUISIANA 70053                      */
 /*      TELEPHONE -- 504-362-9500                                    */
 /*      DATE WRITTEN -- SEPT 1976 (APPROXIMATE)                      */
 /*      CURRENT LEVEL OF SPF -- 2.2.1 (MOD1)                         */
 /*                                                                   */
 /*      SUBROUTINES USED -- READPDS - USED TO READ A PARTITIONED     */
 /*                                    DATA SET FROM PL/I.            */
 /*                          ABSTOP - ALLOWS A PL/I PROGRAM TO ABEND  */
 /*                                   WITH A SELECTED USER ABEND.     */
 /*                                                                   */
 /*      THIS CODE IS THE ACTUAL CODE FROM "TUT" CONVERTED FROM PL/S  */
 /*      TO PL/I, NATURALLY.  IF AT SOME POINT IT CEASES TO FUNCTION  */
 /*      WITH A NEW LEVEL OF SPF, THE SAME TACT MAY BE TAKEN AGAIN.   */
 /*                                                                   */
 /*      SAMPLE JCL --                                                */
 /*                                                                   */
 /*      //STEP1   EXEC PGM=SPFLIST                                   */
 /*      //SYSPRINT  DD SYSOUT=*                                      */
 /*      //PLIDUMP   DD SYSOUT=*                                      */
 /*      //PRINT     DD SYSOUT=*                                      */
 /*      //MENUS     DD DSN=SPF22.MOD1.MENUS,DISP=SHR (OR WHATEVER)   */
 /*                                                                   */
 /* ***************************************************************** */
0        DFT   RANGE(*) STATIC UNAL;
0        DCL   PRINT FILE RECORD OUTPUT
                     ENV(FB CTLASA RECSIZE(81) TOTAL);
         DCL   SYSPRINT       FILE STREAM OUTPUT;
0        DCL   NULL           BUILTIN;
         DCL   PLIDUMP        BUILTIN;
         DCL   MOD            BUILTIN;
         DCL   INDEX          BUILTIN;
         DCL   SUBSTR         BUILTIN;
         DCL   LENGTH         BUILTIN;
         DCL   ABSTOP         ENTRY;
         DCL   READPDS        ENTRY;
         DCL   CLOSPDS        ENTRY;
0        DCL   ISTRING        CHAR(80) BASED(PDSPTR) VARYING;
0        DCL   INPUT          CHAR(80) INIT(' ');
0        DCL   OUTPUT         CHAR(81) INIT(' ');
0        DCL   OVERPRT        CHAR(81) INIT('+ ');
0        DCL 1 TRAILER,
               2 FILL01       CHAR(10) INIT('0MEMBER - '),
               2 TMEMB        CHAR(8),
               2 FILL02       CHAR(10) INIT(' MOTHER - '),
               2 TMOTH        CHAR(8),
               2 FILL03       CHAR(10) INIT(' SISTER - '),
               2 TSIST        CHAR(8),
               2 FILL04       CHAR(12) INIT(' DAUGHTER - '),
               2 TDAUG        CHAR(8),
               2 FILL05       CHAR(7) INIT(' ');
0        DCL   CURFLDS        CHAR(7);  /* CURRENT MENU FIELD CODES   */
         DCL 1 MENUFLD        DEF CURFLDS POS(1),
               2 INPND        CHAR(1),  /* INPUT, NON-DISPLAY         */
               2 INPHI        CHAR(1),  /* INPUT, HIGH INTENSITY      */
               2 INPLO        CHAR(1),  /* INPUT, LOW INTENSITY       */
               2 OUTHI        CHAR(1),  /* OUTPUT, HIGH INTENSITY     */
               2 OUTLO        CHAR(1),  /* OUTPUT, LOW INTENSITY      */
               2 VARHI        CHAR(1),  /* VARIABLE, LOW INTENSITY    */
               2 VARLO        CHAR(1);  /* VARIABLE, HIGH INTENSITY   */
0        DCL   DFLTFLDS       CHAR(7)   /* DEFAULT MENU FIELD CODES   */
                              INIT('^%×&$#@');
0        DCL 1 PDS,
               2 PDSPTR       PTR,
               2 WORK         FIXED BIN(31) INIT(0),
               2 DDNAME       CHAR(8) INIT('MENUS'),
               2 MEMBER       CHAR(8),
               2 BLKSIZE      FIXED BIN,
               2 LRECL        FIXED BIN,
               2 RECFM        BIT(8),
               2 DSNAME       CHAR(44);
0        DCL   CHAR           CHAR(1);
         DCL   NUMBER         PIC '9' DEF CHAR;
0        DCL   ACTION (3)     CHAR(8) INIT((3)' ');
         DCL   I              FIXED BIN;
         DCL   J              FIXED BIN;
         DCL   K              FIXED BIN;
         DCL 1 SWITCHES,
               2 FIRST_SWITCH BIT(1) INIT('0'B),
               2 TUTU_BIT     BIT(1) INIT('0'B),
               2 SEQ_NUM      BIT(1) INIT('0'B),
               2 PRINT_HI     BIT(1) INIT('0'B),
               2 HI_INTEN     BIT(1) INIT('0'B);
0  DCL
     TUTSPTR  PTR,                      /* PTR TO CURRENT STACK ENTRY*/
     TUTHP    PTR,                      /* PTR TO CURRENT HISTORY ENT*/
     TUTMSEL  CHAR(8),                  /* SELECT FIELD FROM MENU    */
     TUTMCODE CHAR(8),                  /* TRANSLATED MENU SELECTION */
     TUTKPREV CHAR(8) INIT('BACK'),     /* KEYWORD FOR "PREV"        */
     TUTKUP   CHAR(8) INIT('UP  '),     /* KEYWORD FOR "UP"          */
     TUTKSKIP CHAR(8) INIT('SKIP'),     /* KEYWORD FOR "SKIP"        */
     TUTKIX   CHAR(8) INIT('INDEX'),    /* KEYWORD FOR "INDEX"       */
     TUTKIXP  CHAR(8) INIT('TINDEX'),   /* PAGE NAME FOR INDEX       */
     TUTKTUT  CHAR(8) INIT('TOP'),      /* KEYWORD FOR TOP PAGE      */
     TUTKTUTP CHAR(8) INIT('TTUTOR'),   /* PAGE NAME FOR TOP PAGE    */
     TUTKHELP CHAR(8) INIT('THELP'),    /* PAGE NAME FOR HELP        */
     TUTTERR  CHAR(8) INIT('TERR '),    /* PAGE NAME FOR ERROR MENU  */
     TUTCL    FIXED BIN(15),            /* LENGTH OF SELECT VERB     */
     TUTWORK8 CHAR(8),                  /* WORK AREA                 */
     TUTERRNR CHAR(4);                  /* ERROR INDICATOR           */
0  DCL
     1 TUTBITS,                         /* BIT FLAGS                 */
       2 TUTH1    BIT(1),               /*   1ST HISTORY FOR ENTRY   */
       2 TUTHBP   BIT(1),               /*   BYPASS HISTORY KEEPING  */
       2 TUTNOSV  BIT(1),               /*   NO SAVE STACK ENTRY     */
       2 FILL01   BIT(5);               /*                           */
0  DCL
     1 TUTSTACK BASED(TUTSPTR),         /* STACK ENTRY FORMAT        */
       2 TUTSCHN  PTR,                  /*   CHAIN TO PREVIOUS ENTRY */
       2 TUTSENR  FIXED BIN(15),        /*   ENTRY NUMBER            */
       2 TUTSBODY,                      /*                           */
         3 TUTSFLGS,                    /*   FLAGS                   */
           4 TUTSPT BIT(1),             /*     NEW REQUEST FLAG      */
           4 TUTSSUBR BIT(1),           /*     SUBROUTINE ACTION     */
           4 FILL01 BIT(14),            /*                           */
         3 TUTSNAME CHAR(8),            /*   ENTRY NAME              */
         3 TUTSMOTH CHAR(8),            /*   NAME OF MOTHER          */
         3 TUTSSIST CHAR(8),            /*   NAME OF SISTER          */
         3 TUTSDAUG CHAR(8);            /*   NAME OF DAUGHTER        */
0  DCL
     1 TUTHIST  BASED(TUTHP),           /* HISTORY ENTRY FORMAT      */
       2 TUTHCHN  PTR,                  /*   CHAIN TO PREVIOUS ENTRY */
       2 TUTHENR  FIXED BIN(15),        /*   ENTRY NUMBER            */
       2 TUTHBODY,                      /*                           */
         3 TUTHFLGS,                    /*   FLAGS                   */
           4 TUTHPT BIT(1),             /*     NEW REQUEST FLAG      */
           4 TUTHSUBR BIT(1),           /*     SUBROUTINE ACTION     */
           4 FILL01 BIT(14),            /*                           */
         3 TUTHNAME CHAR(8),            /*   ENTRY NAME              */
         3 TUTHMOTH CHAR(8),            /*   NAME OF MOTHER          */
         3 TUTHSIST CHAR(8),            /*   NAME OF SISTER          */
         3 TUTHDAUG CHAR(8);            /*   NAME OF DAUGHTER        */
0  DCL
     1 TUTSAVE,                         /* SAVED STACK ENTRY FORMAT  */
       2 TUTVCHN  PTR,                  /*   CHAIN TO PREVIOUS ENTRY */
       2 TUTVENR  FIXED BIN(15),        /*   ENTRY NUMBER            */
       2 TUTVBODY,                      /*                           */
         3 TUTVFLGS,                    /*   FLAGS                   */
           4 TUTVPT BIT(1),             /*     NEW REQUEST FLAG      */
           4 TUTVSUBR BIT(1),           /*     SUBROUTINE ACTION     */
           4 FILL01 BIT(14),            /*                           */
         3 TUTVNAME CHAR(8),            /*   ENTRY NAME              */
         3 TUTVMOTH CHAR(8),            /*   NAME OF MOTHER          */
         3 TUTVSIST CHAR(8),            /*   NAME OF SISTER          */
         3 TUTVDAUG CHAR(8);            /*   NAME OF DAUGHTER        */
0        DCL   R1             PTR;
0        DCL   TLDHELP        CHAR(8) INIT('T');
0        DCL   TLDENDK        BIT(1) INIT('0'B);
0    ON ERROR SNAP BEGIN;
                     ON ERROR SYSTEM;
                     CALL PLIDUMP('TCFHB');
                     CALL ABSTOP;
                   END; /* ON ERROR */
0        OPEN FILE(PRINT);
0    TUTVCHN = NULL;
     TUTVENR = '';
     TUTVBODY = '';
     TUTSPTR = NULL;                    /* INDICATE NO STACK         */
     TUTHP = NULL;                      /* INDICATE NO HISTORY       */
     TUTH1 = '1'B;                      /* INDIC 1ST HIST FOR ENTRY  */
     TUTHBP = '0'B;                     /* INDIC SAVE HISTORY        */
     TUTERRNR = '';                     /* INIT ERROR INDICATOR      */
     CALL TUTI(TLDHELP);                /* SET UP 1ST PAGE NAME      */
     TUTSSUBR = '1'B;                   /* INDICATE TOP LEVEL        */
     DO WHILE(TLDENDK = '0'B);          /* LOOP TILL END REQUESTED   */
       IF TUTERRNR    = ' ' THEN        /* IF NO ERROR ON PREV PASS  */
         DO;                            /*                           */
           IF  TUTSNAME    = ' '  THEN  /* IF NO VALID PAGE NAME     */
             DO;                        /*                           */
               TUTSNAME = TUTKTUTP;     /*   GO TO TOP PAGE          */
               TUTVCHN = NULL;
               TUTVENR = '';
               TUTVBODY = '';
             END;                       /*                           */
           ELSE                         /* PAGE NAME SEEMS OK        */
             ;                          /*                           */
           TUTMSEL = '';                /* INITIALIZE FIELDS TO BE   */
           TUTMCODE = '';               /*     RETURNED FROM MENU    */
           TUTSMOTH = '';               /*                           */
           TUTSSIST = '';               /*                           */
           TUTSDAUG = '';               /*                           */
           CALL MHA(TUTSNAME,           /* PUT UP TUTORIAL PAGE      */
                TUTMSEL,TUTMCODE,TUTSMOTH,TUTSSIST,TUTSDAUG);
 /* EOF */ IF TUTSNAME = 'TTUTOR' &     /* THIS IS THE CODE TO DETER-*/
 /* EOF */    TUTSMOTH = 'TTUTOR' &     /* MINE IF WE ARE AT THE END */
 /* EOF */    TUTSSIST = 'TTUTOR'       /* OF THE TUTORIAL RATHER    */
             THEN                       /* THAN THE START AND TO     */
               IF FIRST_SWITCH          /* PRESS THE "END" KEY TO    */
                 THEN TLDENDK = '1'B;   /* EXIT.                     */
                 ELSE FIRST_SWITCH = '1'B;
         END;                           /*                           */
       ELSE                             /* HAVE CALLED MERR          */
         TUTERRNR = '';                 /* RESET ERROR INDICATOR     */
       IF TUTSNAME = 'TINDEX4'          /* EOF LOGIC FOR PRE 2.1 SPF */
         THEN TLDENDK = '1'B;
       IF TLDENDK = '0'B THEN           /* IF END NOT REQUESTED      */
 TUTP:      /* PROCESS RESPONSE             - INCLUDED FROM TUT      */
   DO;                                  /*                           */
     TUTH1 = '1'B;                      /* INDIC 1ST HIST FOR ENTRY  */
     TUTHBP = '0'B;                     /* NO BYPASS HISTORY KEEPING */
     IF SUBSTR(TUTMSEL,1,1) ^= ' ' &    /* IF SELECT CODE NON-BLANK  */
        SUBSTR(TUTMSEL,1,1) < '0' &     /*       AND NON-NUMERIC AND */
        SUBSTR(TUTMCODE,1,1) ^= ' '     /*       PAGE NAME RETURNED  */
       THEN
       DO;                              /*   THEN CAME FROM INDEX    */
         DO WHILE(TUTSENR ^= 0);        /*     DELETE ENTIRE STACK   */
           CALL TUTD;                   /*       DELETE STACK ENTRY  */
         END;                           /*                           */
         TUTVCHN = NULL;
         TUTVENR = '';
         TUTVBODY = '';
       END;                             /*                           */
     ELSE                               /* DIDNT COME FROM INDEX     */
       ;                                /*                           */
     TUTCL = 8;                         /* LENGTH OF ENTERED COMMAND */
     IF SUBSTR(TUTMCODE,1,1) = ' ' THEN /* IF NO TRANSLATED CODE     */
       IF SUBSTR(TUTMSEL,1,1) = ' ' THEN /* IF BLANK FOR "NEXT"      */
 TUTN:      /* PROCESS NEXT                 - INCLUDED FROM TUTP     */
   DO;                                  /*                           */
     IF TUTVCHN  ^= NULL  THEN          /* IF JUST HAD AN "UP"       */
       IF TUTSNAME = TUTVMOTH THEN      /* IF REAL MOTHER OF SAVED   */
         DO;                            /*                           */
           TUTWORK8 = TUTVNAME;         /*   NAME OF SAVED ENTRY     */
           CALL TUTI(TUTWORK8);         /*   RESTORE SAVED ENTRY     */
           TUTSBODY = TUTVBODY;         /*   FILL IN FROM SAVED      */
           TUTSNAME = TUTWORK8;         /*   RESTORE ENTRY NAME      */
           TUTNOSV = '1'B;              /*   NO SAVE STACK ENTRY     */
         END;                           /*                           */
       ELSE                             /* NOT REAL MOTHER OF SAVED  */
         ;                              /*                           */
     ELSE                               /* NOT HERE FROM "UP"        */
       TUTNOSV = '0'B;                  /*   OK TO SAVE STACK ENTRY  */
     IF TUTSDAUG    ^= ' ' THEN         /* IF WE HAVE A DAUGHTER     */
       CALL TUTI(TUTSDAUG);             /*   INSERT DAUGHTER IN STACK*/
     ELSE                               /* NO DAUGHTER               */
       IF ((TUTSSIST    ^= ' ') &       /* IF WE HAVE A SISTER AND   */
           (TUTSSUBR = '0'B) &          /*       THIS IS NOT SUBR AND*/
           (TUTSENR ^= 1)) THEN         /*       NOT TOP LEVEL       */
         CALL TUTR(TUTSSIST);           /*   INSERT SISTER IN STACK  */
       ELSE                             /* NO SISTER EITHER          */
         CALL TUTU(0);                  /*   TREAT AS "UP" REQUEST   */
     IF TUTNOSV = '1'B THEN             /* IF NO SAVE STACK ENTRY    */
       DO;
         TUTVCHN = NULL;
         TUTVENR = '';
         TUTVBODY = '';
       END;
     ELSE                               /* OK TO KEEP SAVED STACK    */
       ;                                /*                  ENTRY    */
   END TUTN;                            /*                           */
       ELSE                             /*                           */
         IF TUTMSEL =                   /* IF "PREV"                 */
               TUTKPREV THEN
 TUTPR:     /* PROCESS PREVIOUS             - INCLUDED FROM TUTP     */
   DO;                                  /*                           */
     IF TUTHP ^= NULL THEN              /* IF WE HAVE A HISTORY ENT  */
       DO WHILE(TUTSPT = '0'B);         /* PROCESS HISTORY ENTRIES   */
                                        /*   UNTIL NEW REQUEST FOUND */
         IF TUTHENR ^= 0 THEN           /* IF NOT NULL ENTRY         */
           DO;                          /*                           */
             DO WHILE(TUTSENR ^= TUTHENR /*TILL REQ STACK ENTRY FOUND*/
                    & TUTSPTR ^= NULL   /*   OR END OF STACK         */
                    & TUTSENR ^= 0);
               IF TUTSENR > TUTHENR THEN   /* IF STACK IS TOO DEEP   */
                 DO;                       /*                        */
                   TUTHBP = '1'B;          /*   BYPASS HISTORY       */
                   CALL TUTD;              /*   DELETE STACK ENTRY   */
                   TUTVDAUG = TUTVNAME;    /*                        */
                 END;                      /*                        */
               ELSE                        /* STACK NOT TOO DEEP     */
                 IF TUTSENR < TUTHENR THEN /*   STACK TOO SHALLOW    */
                   DO;                     /*                        */
                     TUTHBP = '1'B;        /*   BYPASS HISTORY       */
                     CALL TUTI(TUTHNAME);  /*   INSERT STACK ENTRY   */
                   END;                    /*                        */
                 ELSE                      /*   STACK IS JUST RIGHT  */
                   ;                       /*                        */
             END;                       /*                           */
             TUTSBODY = TUTHBODY;       /* COPY HISTORY DATA TO STACK*/
           END;                         /*                           */
         ELSE                           /* NULL ENTRY                */
           DO;                          /*                           */
             TUTHBP = '1'B;             /* BYPASS HISTORY            */
             CALL TUTD;                 /* DELETE STACK ENTRY        */
             TUTVDAUG = TUTVNAME;       /*                           */
             IF TUTHPT = '1'B THEN      /* COPY NEW REQUEST FLAG     */
               TUTSPT = '1'B;           /*      FROM HISTORY ENTRY   */
             ELSE                       /*                           */
               TUTSPT = '0'B;           /*                           */
           END;                         /*                           */
         CALL TUTF;                     /* FREE HISTORY ENTRY        */
       END;                             /*                           */
     ELSE                               /* NO HISTORY ENTRIES        */
       ;                                /*                           */
   END TUTPR;                           /*                           */
         ELSE                           /*                           */
         IF TUTMSEL =                   /* IF "UP"                   */
            TUTKUP THEN
           CALL TUTU(1);                /* PROCESS "UP"              */
         ELSE                           /*                           */
           IF TUTMSEL =                 /* IF "SKIP" TO SISTER       */
              TUTKSKIP THEN
             IF TUTSSIST    ^= ' ' THEN /* IF WE HAVE A SISTER       */
               CALL TUTR(TUTSSIST);     /*   GO TO IT                */
             ELSE                       /* NO SISTER TO GO TO        */
               CALL TUTU(0);            /*   TREAT AS "UP" REQUEST   */
           ELSE                         /*                           */
 TUTT:      /* PROCESS TOPIC                - INCLUDED FROM TUTP     */
   DO;                                  /*                           */
     IF TUTMSEL =                       /* IF "INDEX"                */
        TUTKIX THEN
       DO;                              /*                           */
         DO WHILE(TUTSENR ^= 0);        /* DELETE ENTIRE STACK       */
           CALL TUTD;                   /*   DELETE STACK ENTRY      */
         END;                           /*                           */
         CALL TUTI(TUTKTUTP);           /*   INITIALIZE STACK TO TOP */
         CALL TUTI(TUTKIXP);            /*   INSERT INDEX STACK ENT  */
         TUTVCHN = NULL;
         TUTVENR = '';
         TUTVBODY = '';
       END;                             /*                           */
     ELSE                               /* NOT "INDEX"               */
       IF TUTMSEL =                     /* IF "TUTOR"                */
          TUTKTUT THEN
         DO;                            /*                           */
           DO WHILE(TUTSENR ^= 0);      /* DELETE ENTIRE STACK       */
             CALL TUTD;                 /*   DELETE STACK ENTRY      */
           END;                         /*                           */
           CALL TUTI(TUTKTUTP);         /*   INSERT TUTOR STACK ENT  */
           TUTVCHN = NULL;
           TUTVENR = '';
           TUTVBODY = '';
         END;                           /*                           */
       ELSE                             /* NOT "TUTOR" OR "INDEX"    */
         DO;                            /*                           */
           TUTERRNR = 'T001';           /*   INDICATE ERROR          */
           CALL ABSTOP('0002');         /*   "INVALID SELECTION"     */
         END;                           /*                           */
   END TUTT;                            /*                           */
     ELSE                               /* WE HAVE A SELECTION CODE  */
       IF ((TUTMCODE ^= TUTKHELP) ×     /* IF NOT HELP TWICE IN A    */
           (TUTSNAME ^= TUTKHELP)) THEN /*                      ROW  */
         DO;                            /*                           */
           CALL TUTI(TUTMCODE);         /*   INSERT PAGE IN STACK    */
           TUTSSUBR = '1'B;             /*   INDIC SUBROUTINE ACTION */
         END;                           /*                           */
       ELSE                             /* 2ND SUCCESSIVE HELP       */
         ;                              /*   IGNORE                  */
   END TUTP;                            /*                           */
       ELSE                             /* END REQUESTED             */
         ;                              /*                           */
     END;                               /*                           */
 TUTTERM:   /* TERMINATION HOUSEKEEPING     - INCLUDED FROM TUT      */
   DO;                                  /*                           */
     DO WHILE(TUTSPTR ^= NULL);         /* FREEMAIN STACK ENTRIES    */
       R1 = TUTSPTR;                    /*   ADDRESS OF STACK ENTRY  */
       TUTSPTR = TUTSCHN;               /*   GET ADDR OF NEXT ENTRY  */
       FREE R1 -> TUTSTACK;             /*   FREE ENTRY              */
     END;                               /*                           */
     DO WHILE(TUTHP ^= NULL);           /* FREEMAIN HISTORY ENTRIES  */
       R1 = TUTHP;                      /*   ADDRESS OF HISTORY ENT  */
       TUTHP = TUTHCHN;                 /*   GET ADDR OF NEXT ENTRY  */
       FREE R1 -> TUTHIST;              /*   FREE ENTRY              */
     END;                               /*                           */
   END TUTTERM;                         /*                           */
     TLDENDK = '0'B;                    /* RESET END KEY FLAG        */
0        CALL CLOSPDS(PDS);
         CLOSE FILE(PRINT);
1TUTI:      /* INSERT INTO STACK            - INCLUDED FROM TUT      */
   PROCEDURE                            /*                           */
         (TUTINAME);                    /* NAME OF INSERTED ENTRY    */
     DECLARE                            /*                           */
       TUTINAME CHAR(8);                /* NAME OF INSERTED ENTRY    */
     IF TUTSPTR = NULL THEN             /* IF STACK NOT INITIALIZED  */
       DO;                              /*   BUILD STACK ENTRY ZERO  */
         ALLOC TUTSTACK SET(R1);        /*   GET STACK ENTRY AREA    */
         R1->TUTSCHN = NULL;
         R1->TUTSENR = '';
         R1->TUTSBODY = '';
         TUTSPTR = R1;                  /*   CURRENT STACK ENTRY     */
       END;                             /*                           */
     ELSE                               /* STACK HAS BEEN INITIALIZED*/
       ;                                /*                           */
     CALL TUTG(0);                      /* GENERATE HISTORY ENTRY    */
     ALLOC TUTSTACK SET(R1);            /* GET STACK ENTRY AREA      */
     R1->TUTSCHN = NULL;
     R1->TUTSENR = '';
     R1->TUTSBODY = '';
     R1->TUTSCHN = TUTSPTR;             /* CHAIN TO PREVIOUS ENTRY   */
     R1->TUTSENR = TUTSENR+1;           /* STACK ENTRY NUMBER        */
     TUTSPTR = R1;                      /* MAKE NEW ENTRY CURRENT    */
     TUTSNAME = TUTINAME;               /* PUT ENTRY NAME IN ENTRY   */
     TUTVCHN = NULL;
     TUTVENR = '';
     TUTVBODY = '';
   RETURN;                              /*                           */
 END TUTI;                              /*                           */
1TUTR:      /* REPLACE STACK ENTRY          - INCLUDED FROM TUT      */
   PROCEDURE                            /*                           */
         (TUTRNAME);                    /* NAME OF INSERTED ENTRY    */
     DECLARE                            /*                           */
       TUTRNAME CHAR(8);                /* NAME OF INSERTED ENTRY    */
     CALL TUTG(1);                      /* GENERATE HISTORY ENTRY    */
     CALL TUTG(0);                      /* GENERATE NULL HISTORY     */
     TUTSFLGS = 0;                      /* RESET FLAGS               */
     TUTSNAME = TUTRNAME;               /* PUT NEW NAME IN ENTRY     */
     TUTSMOTH = '';                     /* INITIALIZE MOTHER NAME    */
     TUTSSIST = '';                     /* INITIALIZE SISTER NAME    */
     TUTSDAUG = '';                     /* INITIALIZE DAUGHTER NAME  */
     TUTVCHN = NULL;
 /*  TUTVENR = '';
     TUTVBODY = ''; */
   RETURN;                              /*                           */
 END TUTR;                              /*                           */
1TUTD:      /* DELETE FROM STACK            - INCLUDED FROM TUT      */
   PROCEDURE;                           /*                           */
     IF TUTSENR ^= 0 THEN               /* IF STACK ENTRY TO DELETE  */
       DO;                              /*                           */
         CALL TUTG(1);                  /* GENERATE HISTORY ENTRY    */
         TUTSAVE = TUTSTACK;            /* SAVE PREVIOUS STACK ENTRY */
         TUTVDAUG = '';                 /* FUDGE UP SAVED ENTRY      */
         TUTVSUBR = '0'B;               /*                           */
         R1 = TUTSPTR;                  /* ADDRESS OF STACK ENTRY    */
         TUTSPTR = TUTSCHN;             /* SET TO NEXT STACK ENTRY   */
         FREE R1 -> TUTSTACK;           /*   FREE ENTRY              */
       END;                             /*                           */
     ELSE                               /* STACK ALREADY EMPTY       */
       ;                                /*                           */
   RETURN;                              /*                           */
 END TUTD;                              /*                           */
1TUTG:      /* GENERATE HISTORY ENTRY       - INCLUDED FROM TUT      */
   PROCEDURE                            /*                           */
         (TUTGDATA);                    /* SAVE DATA INDICATOR       */
                                        /*   0 - CREATE NULL HISTORY */
                                        /*   1 - SAVE CURR STACK ENT */
     DECLARE                            /*                           */
       TUTGDATA FIXED BIN(31);          /* SAVE DATA INDICATOR       */
     IF TUTHBP = '0'B THEN              /* IF HISTORY TO BE GEND     */
       DO;                              /*                           */
         ALLOC TUTHIST SET(R1);         /*  GET ANOTHER ENTRY        */
         IF TUTGDATA = 0 THEN           /* IF NO DATA TO SAVE        */
           DO;
             R1->TUTHCHN = NULL;
             R1->TUTHENR = '';
             R1->TUTHBODY = '';
           END;
         ELSE                           /* HAVE DATA TO SAVE         */
           R1->TUTHIST = TUTSTACK;      /*   SAVE STACK ENTRY        */
         R1->TUTHCHN = TUTHP;           /* CHAIN NEW HISTORY ENTRY   */
         TUTHP = R1;                    /* CURRENT HISTORY           */
         IF TUTH1 = '1'B THEN           /* IF NEW ACTION             */
           TUTHPT = '1'B;               /*   SO FLAG IN HISTORY ENT  */
         ELSE                           /* NOT NEW ACTION            */
           TUTHPT = '0'B;               /*   SO FLAG IN HISTORY ENT  */
         TUTH1 = '0'B;                  /* NO LONGER FIRST HISTORY   */
         TUTHBP = '0'B;                 /* RESET BYPASS HISTORY FLAG */
       END;                             /*                           */
     ELSE                               /* NO HISTORY WANTED         */
       ;                                /*                           */
   RETURN;                              /*                           */
 END TUTG;                              /*                           */
1TUTF:      /* FREE HISTORY ENTRY           - INCLUDED FROM TUT      */
   PROCEDURE;                           /*                           */
     IF TUTHP ^= NULL THEN              /* IF WE HAVE A HISTORY ENT  */
       DO;                              /*                           */
         R1 = TUTHP;                    /* ADDRESS OF HISTORY ENTRY  */
         TUTHP = TUTHCHN;               /* SET PTR TO PREVIOUS ENTRY */
         FREE R1 -> TUTHIST;            /*  FREE HISTORT ENTRY       */
       END;                             /*                           */
     ELSE                               /* NO HISTORY ENTRIES        */
       ;                                /*                           */
   RETURN;                              /*                           */
 END TUTF;                              /*                           */
1TUTU:      /* PROCESS UP REQUEST           - INCLUDED FROM TUT      */
   PROCEDURE                            /*                           */
         (TUTUS);                       /* STRAIGHT UP FLAG          */
     DECLARE                            /*                           */
       TUTUS    FIXED BIN(31);          /* STRAIGHT UP FLAG          */
     TUTU_BIT = '1'B;
     DO WHILE (TUTU_BIT);               /*   LOOP TILL END OF STACK  */
       IF TUTSENR = 1 THEN              /* IF EXACTLY 1 ENTRY        */
         IF TUTSMOTH    ^= ' ' THEN     /*   IF A MOTHER EXISTS      */
           DO;                          /*                           */
             TUTSAVE = TUTSTACK;        /*     SAVE STACK ENTRY      */
             CALL TUTR(TUTSMOTH);       /*     USE MOTHER NEXT       */
           END;                         /*                           */
         ELSE                           /*   HAS NO MOTHER           */
           IF TUTSSIST    ^= ' ' THEN /*       IF A SISTER EXISTS    */
             CALL TUTR(TUTSSIST);       /*       USE SISTER NEXT     */
           ELSE                         /*     NO SISTER EITHER      */
             CALL TUTD;                 /*       DELETE STACK ENTRY  */
       ELSE                             /*                           */
         IF TUTSENR ^= 0 THEN           /* IF OVER 1 ENTRY           */
           IF TUTSSUBR = '1'B THEN      /* IF SUBROUTINE ENTRY       */
             CALL TUTD;                 /*   DELETE STACK ENTRY      */
           ELSE                         /* NOT SUBROUTINE ENTRY      */
             DO;                        /*                           */
               CALL TUTD;               /* DELETE STACK ENTRY        */
               IF TUTUS = 0 THEN        /* IF NOT STRAIGHT UP        */
                 IF TUTSSUBR = '1'B THEN /*  IF SUBROUTINE ENTRY     */
                   CALL TUTD;           /*     DELETE STACK ENTRY    */
                 ELSE                   /*   NOT SUBROUTINE ENTRY    */
                   CALL TUTR(TUTSSIST); /*     REPLACE WITH SISTER   */
               ELSE                     /* STRAIGHT UP REQUEST       */
                 ;                      /*   USE THIS ENTRY          */
             END;                       /*                           */
         ELSE                           /* NO STACK ENTRIES          */
           ;                            /*                           */
       IF TUTSPTR = NULL ×
          TUTSENR = 0 ×
          TUTSNAME ^= ' '
         THEN
           TUTU_BIT = '0'B;
     END;                               /*                           */
   RETURN;                              /*                           */
 END TUTU;                              /*                           */
1/* ***************************************************************** */
 /*                                                                   */
 /*      THIS PROC IS A REPLACEMENT FOR NORMAL SPF MENU HANDLER.      */
 /*      IT WILL WRITE THE MENU TO A PRINT FILE RATHER THAN THE TUBE  */
 /*      TO GIVE A HARD COPY OF ANY SPF MENU.                         */
 /*                                                                   */
 /*      BRIGHT FIELDS ARE OVERPRINTED.                               */
 /*                                                                   */
 /* ***************************************************************** */
0MHA: PROC(TSNAME,TSMSEL,TSMCODE,TSMOTH,TSSIST,TSDAUG);
         DCL   TSNAME         CHAR(8);
         DCL   TSMSEL         CHAR(8);
         DCL   TSMCODE        CHAR(8);
         DCL   TSMOTH         CHAR(8);
         DCL   TSSIST         CHAR(8);
         DCL   TSDAUG         CHAR(8);
         DCL   COUNT          FIXED BIN INIT(0);
         DCL   LINE           FIXED BIN INIT(0) AUTO;
0        COUNT = COUNT + 1;
         IF MOD(COUNT,2) = 1
           THEN SUBSTR(OUTPUT,1,1) = '1';
           ELSE SUBSTR(OUTPUT,1,1) = '-';
         ACTION(1), ACTION(2), ACTION(3) = 'BOO-BOO';
         CURFLDS = DFLTFLDS;
         MEMBER = TSNAME;
         CALL READPDS(PDS);
         IF PDSPTR = NULL
           THEN
             DO;
               PUT LIST('MEMBER NOT FOUND');
               PUT DATA(MEMBER);
               CALL ABSTOP('0001');
             END;
           ELSE TSMCODE = '';
0        DO WHILE(PDSPTR ^= NULL);
           INPUT = ISTRING;
0          IF SUBSTR(INPUT,1,8) = '<FIELDS>'
             THEN
               DO;
                 CURFLDS = SUBSTR(INPUT,9,7);
               END;
             ELSE /* *** */
0          IF SUBSTR(INPUT,1,8) = '<ACTION>'
             THEN
               DO;
                 CALL READPDS(PDS);     /* READ PAST <ACTION> STMT    */
                 INPUT = ISTRING;
0                DO WHILE(PDSPTR ^= NULL &
                          SUBSTR(INPUT,1,5) ^= '<END>');
                   CHAR = SUBSTR(INPUT,1,1);
                   IF CHAR > '2' &
                      CHAR < '6'
                     THEN
                       DO;
                         J = INDEX(INPUT,'INIT(''');
                         DO K = J+7 TO J+14 WHILE(SUBSTR(INPUT,K,1)
                                                  ^= '''');
                         END;
                         K = K - (J+6);
                         ACTION(NUMBER-2) = SUBSTR(INPUT,J+6,K);
                       END;
                   CALL READPDS(PDS);   /* READ NEXT STATEMEMT        */
                   INPUT = ISTRING;
                 END;
                 PDSPTR = NULL;         /* FORCE END-FILE             */
               END;
             ELSE
               DO;
                 DO I = 1 TO 80;
                   IF SUBSTR(INPUT,I,1) = OUTHI
                     THEN
                       DO;
                         HI_INTEN = '1'B;
                         SUBSTR(INPUT,I,1) = ' ';
                       END;
                     ELSE /* *** */
                   IF SUBSTR(INPUT,I,1) = OUTLO
                     THEN
                       DO;
                         HI_INTEN = '0'B;
                         SUBSTR(INPUT,I,1) = ' ';
                       END;
                     ELSE /* *** */
                   IF SUBSTR(INPUT,I,1) = INPLO ×
                      SUBSTR(INPUT,I,1) = INPHI ×
                      SUBSTR(INPUT,I,1) = INPND ×
                      SUBSTR(INPUT,I,1) = VARHI ×
                      SUBSTR(INPUT,I,1) = VARLO
                     THEN
                       DO;
                         IF SUBSTR(INPUT,I,1) = INPHI ×
                            SUBSTR(INPUT,I,1) = VARHI
                           THEN HI_INTEN = '1'B;
                           ELSE HI_INTEN = '0'B;
                         DO J = I TO I+9 WHILE(SUBSTR(INPUT,J,1)
                                                 ^= ' ');
                           SUBSTR(INPUT,J,1) = ' ';
                         END;
                       END;
0                  SUBSTR(OUTPUT,I+1,1) = SUBSTR(INPUT,I,1);
                   IF HI_INTEN &
                      SUBSTR(INPUT,I,1) ^= ' '
                     THEN
                       DO;
                         PRINT_HI = '1'B;
                         SUBSTR(OVERPRT,I+1,1) = SUBSTR(INPUT,I,1);
                       END;
                 END;
                 LINE = LINE + 1;
                 WRITE FILE(PRINT) FROM(OUTPUT);
                 IF PRINT_HI
                   THEN WRITE FILE(PRINT) FROM(OVERPRT);
                 OUTPUT = '';
                 OVERPRT = '+ ';
               END;
0          IF PDSPTR ^= NULL
             THEN
               DO;
                 CALL READPDS(PDS);
                 INPUT = ISTRING;
               END;
         END;
0      TSMCODE = '';
       TSMOTH = ACTION(1);
       TSSIST = ACTION(2);
       TSDAUG = ACTION(3);
0      DO WHILE(LINE < 26);
         DO WHILE(LINE + 3  < 26);
           SUBSTR(OUTPUT,1,1) = '-';
           WRITE FILE(PRINT) FROM(OUTPUT);
           LINE = LINE + 3;
         END;
         DO WHILE(LINE + 2 < 26);
           SUBSTR(OUTPUT,1,1) = '0';
           WRITE FILE(PRINT) FROM(OUTPUT);
           LINE = LINE + 2;
         END;
         SUBSTR(OUTPUT,1,1) = ' ';
         WRITE FILE(PRINT) FROM(OUTPUT);
         LINE = LINE + 1;
       END;
0      TMEMB = MEMBER;             /* DEBUGGING OF MENU CHAIN */
       TMOTH = ACTION(1);          /* WRITE MAY BE REMOVED    */
       TSIST = ACTION(2);
       TDAUG = ACTION(3);
       WRITE FILE(PRINT) FROM(TRAILER);
     END; /* MHA */
0  END; /* SPFLIST */
