READPDS  TITLE '* * * READ A MEMBER OF A PARTITIONED DATA SET FROM A PL*
               /I (OPTIMIZER) PROGRAM * * *'
***********************************************************************
*                                                                     *
*        CSECT NAME -- READPDS                                        *
*        OTHER ENTRY POINTS -- CLOSPDS                                *
*        LANGUAGE -- IBM 370 ASSEMBLER XF OR H                        *
*        ATTRIBUTES -- REENTRANT, REUSABLE                            *
*        SUBROUTINES USED -- NONE                                     *
*        ATTACH, LINK, LOAD OR XCTL TO -- NONE                        *
*        OPERATING SYSTEM -- OS/370 MVS REL 3.8                      *
*        OPERATING LANGUAGE -- OPTIMIZING PLI VER 3 MOD 0             *
*        VERSION -- 1.3 (UPDATE -- 7/26/78)                           *
*        MESSAGE PREFIX -- NONE                                       *
*        DATE WRITTEN -- 4/20/74                                      *
*        AUTHOR -- AUGUST TREUBIG                                     *
*        INSTALLATION -- MIDDLE SOUTH SERVICES, INC.                  *
*                        200 WEST BANK EXPRESSWAY                     *
*                        GRETNA, LOUISIANA 70053                      *
*                                                                     *
*                                                                     *
*        READPDS WILL ALLOW THE PLI PROGRAMMER TO SELECTIVELY READ ANY*
*        MEMBER OF A PARTITIONED DATA SET.  THE USER PASSES A         *
*        STRUCTURE IN WHICH THE DDNAME, MEMBER NAME ETC ARE CONTAINED.*
*        THE READPDS SUBROUTINE PASSES A POINTER BACK TO THE CALLING  *
*        PROGRAM OF THE RECORD AND ASSORTED DATA SET RELATED INFO.    *
*        THE POINTER IS NULLED IF ANY ERRORS ARE DETECTED OR END OF   *
*        FILE IS REACHED ON THE CURRENT MEMBER.                       *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        EXAMPLE --                                                   *
*                                                                     *
*        DCL 1 CALL_STRUCTURE STATIC UNALIGNED,                       *
*              2 PDSPTR PTR,            /* POINTER TO RECORD */       *
*              2 WORK FIXED BIN(31) INIT(0) /* USED BY READPDS */     *
*              2 DDNAME CHAR(8),        /* THE DDNAME OF THE PDS */   *
*              2 MEMBER CHAR(8),        /* THE MEMBER TO BE READ */   *
*              2 BLKSIZE FIXED BIN(15), /* RETURNED BLOCKSIZE OF PDS **
*              2 LRECL FIXED BIN(15),   /* RETURNED LRECL OF PDS */   *
*              2 RECFM BIT(8),          /* RETURNED RECFM OF PDS */   *
*              2 DSNAME CHAR(44);       /* RETURNED DATA SET NAME */  *
*                                                                     *
*        DCL CARD CHAR(80) BASED(PDSPTR); /* FOR RECFM=F OR FB    */  *
*            OR:                                                      *
*        DCL CARD CHAR(*) BASED(PDSPTR) VARYING;/* FOR RECFM=V OR VB*/*
*                                                                     *
*        DCL READPDS ENTRY;                                           *
*        DCL CLOSPDS ENTRY;                                           *
*                                                                     *
*        CALL READPDS(CALL_STRUCTURE);                                *
*        IF  PDSPTR = NULL                                            *
*          THEN ..... /* END OF FILE AND ERROR CHECK */               *
*        /*    IF THE POINTER IS NULL AFTER THE FIRST CALL FOR A  */  *
*        /*    NEW MEMBER NAME, THE MEMBER WAS NOT FOUND          */  *
*                                                                     *
*        TO CLOSE DATA SET                                            *
*                                                                     *
*        CALL CLOSPDS(CALL_STRUCTURE);                                *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*        INITIALIZE AND TEST IF A DSA FOR THIS USER STRUCTURE EXISTS  *
***********************************************************************
         SPACE
         ENTRY CLOSPDS
READPDS  CSECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SAVE  (14,12),,*
         LR    R12,R15                  SET UP BASE REGISTER
         USING READPDS,R12              ADDRESS PROGRAM
         L     R11,0(R1)                LOAD PTR TO LOCATOR
         L     R11,0(R11)               LOAD PTR TO STRUCTURE
         USING PDSUSER,R11              ADDRESS STRUCTURE
         ICM   R10,15,WORKAREA          LOAD PTR TO WORK AREA  & TEST
         BNZ   NOTFIRST                 WORK AREA EXISTS, BRANCH
         EJECT
***********************************************************************
*        GET A WORK/SAVE AREA AND INITIALIZE                          *
***********************************************************************
         SPACE
         USING PDSDSECT,R13             ADDRESS WORK AREA
         GETMAIN R,LV=DSECTLEN          GET A WORK AREA
         ST    R1,8(R13)                SAVE AREA
         ST    R13,4(R1)                CHAIN
         LR    R13,R1                   LOAD WORK AREA PTR
         MVC   PDSDCB,DUMMYDCB          MOVE IN MODEL DCB
         SPACE
NEWDD    DS    0H
         MVC   CURDDNAM,PDSDDNAM        MOVE DDNAME TO WORK AREA
         LA    R10,PDSDCB               LOAD PTR TO DCB
         USING IHADCB,R10               ADDRESS DCB
         MVC   DCBDDNAM,PDSDDNAM        MOVE DDNAME TO DCB
         GETMAIN R,LV=176               GET CORE FOR JFCB
         ST    R1,EXLIST                STORE PTR TO JFCB AREA
         MVI   EXLIST,X'87'             SET END + JFCB BITS
         LA    R1,EXLIST                SET EXIT LIST
         ST    R1,DCBEXLST              PTR IN THE DCB
         OI    OPENLIST,X'80'           SET END IND IN OPEN
         EJECT
***********************************************************************
*        OPEN PDS, READ THE JFCB AND MOVE THE GOODIES TO THE USERS    *
*        STRUCTURE                                                    *
***********************************************************************
         SPACE
         RDJFCB (PDSDCB,INPUT),         READ THE JFCB                  *
               MF=(E,OPENLIST)
         BXH   R15,R15,PDSEOF           TEST RC, BRANCH IF NO DD CARD
         OPEN  MF=(E,OPENLIST),TYPE=J   OPEN PDS
         L     R1,EXLIST                LOAD PTR TO JFCB
         MVC   PDSDSN,0(R1)             MOVE DSNAME TO USER STRUCTURE
         LA    R1,0(R1)                 CLEAR SUBPOOL
         FREEMAIN R,LV=176,A=(1)        FREE JFCB AREA
         ST    R13,WORKAREA             SET PTR TO DSA IN CALLERS AREA
         MVI   PDSFLAG,0                CLEAR PDS FLAG
         TM    DCBRECFM,DCBRECU         IS THE RECFM=U
         BO    NOTRECV                  YES, BRANCH
         TM    DCBRECFM,DCBRECV         IS THE RECFM=V
         BZ    NOTRECV                  NO, BRANCH
         OI    PDSFLAG,PDSRECV          INDICATE VARIABLE PROCESSING
         TM    DCBRECFM,DCBRECBR         IS THE RECFM=VB
         BZ    NOTRECV                  NO, BRANCH
         OI    PDSFLAG,PDSRECB          INDICATE BLOCKED PROCESSING
         SPACE
NOTRECV  DS    0H
         MVC   PDSBLKSI,DCBBLKSI        MOVE
         MVC   PDSLRECL,DCBLRECL             GOODIES
         MVC   PDSRECFM,DCBRECFM                     TO USER STRUCTURE
         XC    CURRMEM,CURRMEM          CLEAR CURRENT MEMBER NAME
         LH    R0,DCBBLKSI              LOAD BLOCKSIZE
         GETMAIN R,LV=(0)               GET A BUFFER
         ST    R1,BUFFADDR              STORE PTR TO BUFFER IN WORK
         B     TESTDCB
         EJECT
***********************************************************************
*        CHAIN SAVE AREAS AND LOAD WORK AREA PTR                      *
***********************************************************************
         SPACE
NOTFIRST DS    0H
         ST    R10,8(R13)               CHAIN SAVE
         ST    R13,4(R10)               AREAS
         LR    R13,R10                  LOAD PTR TO WORK AREA
         LA    R10,PDSDCB               LOAD PTR TO DCB
         SPACE
***********************************************************************
*        CHECK TO SEE IF USER CHANGED THE DDNAME OR MEMBER NAME       *
***********************************************************************
         SPACE
TESTDCB  DS    0H
         TM    DCBOFLGS,DCBOFOPN        IS DCB OPEN
         BZ    PDSEOF                   NO, SET EOF
         SPACE
         CLC   CURDDNAM,PDSDDNAM        DID THE USER CHANGE DDNAMES
         BE    SAMEDD                   NO, BRANCH
         LH    R0,DCBBLKSI              LOAD BLOCK SIZE
         L     R1,BUFFADDR              LOAD PTR TO BUFFER
         FREEMAIN R,LV=(0),A=(1)        FREE BUFFER
         CLOSE (,LEAVE),MF=(E,OPENLIST) CLOSE PDS
         B     NEWDD
         SPACE
SAMEDD   DS    0H
         CLC   CURRMEM,PDSMEMB          DID USER CHANGE MEMBERS
         BE    SAMEMEMB                 NO, BRANCH
         MVC   CURRMEM,PDSMEMB          STOPR NEW MEMBER NAME
         FIND  (R10),CURRMEM,D          FIND MEMBER ON PDS
         BXH   R15,R15,PDSEOF           TEST RC, BRANCH IF ERROR
         LH    R4,DCBLRECL              LOAD INDEX
         LA    R3,1                     SET
         SR    R5,R5                        REG TO
         STM   R3,R5,CURSAVE                       CAUSE A READ
         EJECT
***********************************************************************
*        READ AND DEBLOCK  RECORD                                     *
***********************************************************************
         SPACE
SAMEMEMB DS    0H
         LM    R3,R5,CURSAVE            LOAD BLOCK PTRS
         BXLE  R3,R4,NOREAD             INDEX - TEST - BRANCH
         L     R3,BUFFADDR              RESET BUFFER PTR
         READ  PDSECB,SF,PDSDCB,        READ A BLOCK                   *
               (R3),'S',MF=E
         CHECK PDSECB                   CHECK READ
         L     R2,DCBIOBA               LOAD PTR TO IOB
         LH    R1,DCBBLKSI              LOAD BLKSIZE
         SH    R1,22(,R2)               CALC LENGTH OF BLOCK
         BCTR  R1,R0                    SUBTRACT ONE
         LA    R5,0(R3,R1)              CALC END OF BLOCK  PTR
         TM    PDSFLAG,PDSRECV          IS THIS VARIABLE PROCESSING
         BZ    NOREAD                   NO, BRANCH
         LA    R3,4(R3)                 JUMP OVER BDW
         SPACE
NOREAD   DS    0H
         TM    PDSFLAG,PDSRECB          IS THIS VB PROCESSING
         BZ    NOTBLKD                  NO, BRANCH
         LH    R4,0(R3)                 LOAD RDW
         LR    R1,R4                    MOVE TO WORK REG
         SH    R1,=H'4'                 SUBTRACT LENGTH OF RDW
         STH   R1,PDSLRECL              STORE IN USER AREA
         STH   R1,2(R3)                 MAKE LOOK LIKE PLI VAR STRING
         LA    R1,2(R3)                 LOAD PTR TO START OF STRING
         ST    R1,RECADDR               STORE RECORD PTR FOR USER
         B     SAVECUR
         SPACE
NOTBLKD  DS    0H
         ST    R3,RECADDR               STORE RECORD PTR FOR USER
         SPACE
SAVECUR  DS    0H
         STM   R3,R5,CURSAVE            SAVE BLOCK PTRS
         SPACE
PDSRETRN DS    0H
         L     R13,4(R13)               LOAD PTR TO OLD SAVE AREA
NOWORK   RETURN (14,12)                 RETURN TO USER
         SPACE
***********************************************************************
*        END OF FILE -- NULL RECORD PTR AND RETURN                    *
***********************************************************************
         SPACE
PDSEOF   DS    0H
         XC    RECADDR,RECADDR          NULL USERS PTR
         MVI   RECADDR,255
         XC    CURRMEM,CURRMEM          CLEAR CURRENT MEMBER NAME
         B     PDSRETRN
         DROP  R12,R13,R10              DROP OLD BASE
         EJECT
***********************************************************************
*        CLOSE PDS ROUTINE                                            *
***********************************************************************
         SPACE
CLOSPDS  DS    0H
         SAVE  (14,12),,CLOSPDS
         LR    R12,R15                  SET UP BASE REG
         USING CLOSPDS,R12
         L     R11,0(R1)                LOAD PTR TO LOCATOR
         L     R11,0(R11)               LOAD PTR TO STRUCTURE
         ICM   R10,15,WORKAREA          LOAD & TEST PTR TO WORK AREA
         USING PDSDSECT,R10
         BZ    RETURN                   NO WORK AREA, RETURN
         LA    R9,PDSDCB                LOAD PTR TO DCB
         USING IHADCB,R9
         LH    R0,DCBBLKSI              LOAD BLOCKSIZE
         L     R1,BUFFADDR              LOAD PTR TO BUFFER
         FREEMAIN R,LV=(0),A=(1)        FREE BUFFER
         CLOSE (,LEAVE),MF=(E,OPENLIST) CLOSE PDS
         FREEMAIN R,LV=DSECTLEN,A=(R10) FREE WORK AREA
         XC    WORKAREA,WORKAREA
         XC    RECADDR,RECADDR          NULL USERS PTR
         MVI   RECADDR,255
         XC    8(4,R13),8(R13)          SAY NO SAVE AREA CHAIN
         SPACE
RETURN   DS    0H
         RETURN (14,12)
         EJECT
***********************************************************************
*        MODEL DCB                                                    *
***********************************************************************
         SPACE
DUMMYDCB DCB   DSORG=PO,                                               *
               MACRF=R,                                                *
               EODAD=PDSEOF
DCBLENG  EQU   *-DUMMYDCB
         EJECT
***********************************************************************
*        SAVE AREA AND WORK AREA DSECT                                *
***********************************************************************
         SPACE
PDSDSECT DSECT
         DS    18F                      SAVE AREA
PDSDCB   DS    XL(DCBLENG)              PDS DCB AREA
BUFFADDR DS    F                        POINTER TO BUFFER
CURSAVE  DS    3A                       BUFFER POINTER SAVE
CURRMEM  DS    CL8                      CURRENT MEMEBER NAME
CURDDNAM DS    CL8                      CURRENT DD NAME
OPENLIST DS    F                        OPEN MACRO LIST
EXLIST   DS    A                        JFCB EXIT LIST
         READ  PDSECB,SF,MF=L           READ MACRO LIST FORM
PDSFLAG  DS    AL1                      FLAGS
PDSRECV  EQU   B'10000000'              RECFM = V
PDSRECB  EQU   B'01000000'              RECFM = VB
DSECTLEN EQU   *-PDSDSECT
         SPACE
***********************************************************************
*        MAPPING DSECT OF CALLERS STRUCTURE                           *
***********************************************************************
         SPACE
PDSUSER  DSECT
RECADDR  DS    A                        POINTER TO RECORD
WORKAREA DS    A                        POINTER TO READPDS WORK AREA
PDSDDNAM DS    CL8                      CALLERS DDNAME
PDSMEMB  DS    CL8                      CALLERS MEMBER
PDSBLKSI DS    H                        PDS BLOCK SIZE
PDSLRECL DS    H                        PDS RECORD LENGTH
PDSRECFM DS    BL1                      PDS RECORD FORMAT
PDSDSN   DS    CL44                     PDS DATA SET NAME
         EJECT
***********************************************************************
*        DCB DSECT                                                    *
***********************************************************************
         SPACE
         DCBD  DSORG=PO,DEVD=DA
         END
