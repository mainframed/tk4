RACFMGR  TITLE '                        RACF MANAGER INTERFACE ROUTINE'
***********************************************************************
*
*    RACFMGR   --   RACF MANAGER INTERFACE ROUTINE (FROM PL/I,COBOL)
*                   VERSION 2.0     JACK TAYLOR  10/1/80
*
*    CALL RACFMGR(ACTION,CLASS,ENTRY,WKSIZ,VOLSER,FIELD1,FIELD2...ETC.)
*
*    PUBLICATIONS
*    ************
*
*    OS/VS2 WTSC: SOME CONSIDERATIONS REGARDING RACF
*    OS/VS2 RACF: INSTALLATION REFERENCE MANUAL
*
*    EXTERNAL REFERENCES
*    *******************
*
*    SVC NNN    AUTHORIZATION ON/OFF
*    SVC 132    RACF MANAGER
*
*    QUESTIONS, INSTALLATION REQUIREMENTS
*    ************************************
*
*    QUESTIONS CONCERNING USAGE OF THIS MODULE WILL BE ACCEPTED BY
*    THE AUTHOR PROVIDING THAT:  1. THE USER HAS READ ALL DOCUMENTATION
*                                   WHICH FOLLOWS;
*                                2. HAS READ THE WTSC REFERENCED ABOVE;
*                                3. HAS MODIFIED THE AUTHORIZATION
*                                   SECTION OF THIS PROGRAM TO CONFORM
*                                   TO THE INSTALLATION REQUIREMENTS.
*                                   A.  EQUATES/CONSTANTS AUTHSVC,
*                                       AUTHONR,AUTHOFFR,AUTHREG MUST
*                                       BE MODIFIED.
*                                   B.  LABELED SECTIONS @AUTHON AND
*                                       @AUTHOFF ARE CORRECTED AS
*                                       NECESSARY.
*                                   C.  OR OPTIONS SWITCH AUTHON IS
*                                       DISABLED AND THIS PROGRAM IS
*                                       INVOKED IN THE APPROPRIATE KEY.
*                                     WARNING.... EXTREME CAUTION
*                                     **SHOULD BE EXERCISED IN USING
*                                     **AUTHORIZATIONS.  AS A MINIMUM
*                                     **SUCH AN SVC SHOULD CHECK THE
*                                     **CALLER'S LIBRARY AUTHORIZATION
*                                     **OR THE CALLER'S AUTHORITY.
*                                     **GENERAL AUTHORIZATION SVCS SUCH
*                                     **AS DOCUMENTED IN THE SPF MANUAL
*                                     **CONSTITUTE A SERIOUS SECURITY
*                                     **EXPOSURE.......................
*                                4. HAS REVIEWED IN PARTICULAR THE
*                                   SECTION "NOTES CONCERNING RELEASE
*                                   DEPENDENCIES."
*
*                                JACK TAYLOR, COMPUTER SECURITY ADMIN.
*                                ARIZONA PUBLIC SERVICE (MST)
*                                (602) 271-2549
         EJECT
*    DESCRIPTION
*    ***********
*
*    AT INVOCATION REGISTER 1 POINTS TO A LIST OF ADDRESSES:
*          ->ACTION        MANAGER ACTION:  LOCATE,NEXT(C),ADD,
*                                           RENAME,ALTER(I),DELETE(A)
*          ->CLASS         RESOURCE CLASS:  USER,GROUP,DATASET,ETC.
*          ->ENTRY         ENTRY NAME: 2 BYTE LENGTH & NAME (PL/I LEN.)
*          ->WKSIZ         FULLWORD: SUBPOOL IN HIGH ORDER BYTE; LENGTH
*                          IN BYTES 1-3 FOR THE MANAGER WORK AREA
*                          TO BE GETMAINED BY THIS ROUTINE.
*                          ANY WORKAREA SIZE LESS THAN MINIMUM (E.G. 0)
*                          WILL FORCE AN ESTIMATION OF THE REQUIRED
*                          WORKSIZE (LOCATE: SUM(FLDMAXL+MGRPAD)*1.125;
*                          UPDATE: MGR MINIMUM SIZE).
*                         *IF THE ACTION IS RENAME, THIS VECTOR POINTS
*                          A 2 BYTE LENGTH PREFIX FOLLOWED BY THE
*                          ENTITY NEWNAME.
*          ->VOLSER        VOLUME SERIAL/NEWNAME OR BLANKS(=>NO VALUE)
*          ->FIELD1        FIRST FIELD DESCRIPTOR
*          ->FIELD2        SECOND FIELD DESCRIPTOR
*          ... ETC.
*          ->FIELDN        NTH (LAST) FIELD DESCRIPTOR (128 MAXIMUM)
*                          X'80' REQUIRED IN HIGH ORDER BYTE!!!!!!!
          EJECT
*    FIELD DESCRIPTORS MUST BE OF THE FORMAT:
*          DS   0F         FULLWORD BOUNDARY
*FLDNAME   DS   CL8        NAME OF FIELD
*FLDTEST   DS   AL4        -> ANY TEST DESCRIPTORS TO BE PERFORMED.
*                             IF POINTER IS 0 OR NULL (ADDRESS PORTION
*                             ZERO)...NO TESTS ARE ASSUMED
*FLDMAXL   DS   H          MAXIMUM LENGTH OF DATA TO BE RETURNED. IF
*                          ACTUAL DATA LENGTH IS GREATER, ONLY THIS
*                          MANY CHARACTERS WILL BE RETURNED. HOWEVER,
*                          FLDACTL WILL CONTAIN THE ACTUAL DATA LENGTH.
*                          (NOT USED FOR ANY UPDATE REQUESTS.)
*FLDACTL   DS   H          ACTUAL LENGTH OF DATA. THIS VALUE IS UPDATED
*                          FOR LOCATE REQUESTS AND MUST BE SUPPLIED FOR
*                          UPDATE REQUESTS. (SEE ALSO NOTES.)
*                          CAUTION:  IF ACTL>MAXL ONLY MAXL WILL BE
*                          RETURNED BUT ACTL WILL SHOW ACTUAL AMOUNT.
*FLDDATA   DS   CL?        ACTUAL DATA FOR UPDATE (OR RETURNED-LOCATE)
*
*
****  THE TEST DESCRIPTORS ARE DESCRIBED AS FOLLOWS:
*
*          DS   0F         FULLWORD BOUNDARY
*TESTNAME  DS   CL8        NAME OF FIELD TO BE TESTED
*TESTTEST  DS   AL4        -> NEXT TESTFLD; 0 OR NULL PTR=> NO MORE
*TESTCOND  DS   CL2        TEST CONDITION TO BE PERFORMED
*                          (OPTIONS ARE EQ,NE,GT,LT,GE,LE,ON,MX,ZE)
*TESTLNTH  DS   H          LENGTH OF COMPARISON DATA
*TESTDATA  DS   CL?        COMPARISON DATA
*
****
****   IN PLI, THE CORRESPONDING DECLARATIONS ARE:
****
*  DCL 1 ACTION1,      /* MAY BE STATIC OR AUTOMATIC  */
*        2 FLDNAME   CHAR(8),
*        2 FLDTEST   PTR INIT(NULL),  /* INIT(ADDR(TEST1)): AUTO ONLY*/
*        2 FLDMAXL   FIXED BIN(15,0),
*        2 FLDDATA   CHAR(*) VARYING;
*
*  DCL 1 TEST1,       /* MAY BE STATIC OR AUTOMATIC        */
*        2 TESTNAME  CHAR(8)  INIT('NAME'),/* FOR EXAMPLE  */
*        2 TESTTEST  PTR      INIT(NULL), /* INIT(ADDR(TEST2)), ETC. */
*        2 TESTCOND  CHAR(2)  INIT('EQ'),      /* FOR EXAMPLE  */
*        2 TESTDATA  CHAR(*)  VARYING;
          EJECT
*********************  OPERATION **************************************
*
*    CALL RACFMGR(ACTION,CLASS,ENTRY,WKSIZ,VOLSER,FIELD1,FIELD2...ETC.)
*
*    THE REQUEST IS CHECKED FOR VALIDITY AND A PARAMETER LIST IS
*    BUILT AS IF ICHEINTY DID IT. UP TO 128 ICHEACTN (ACTION REQUESTS)
*    ARE BUILT AS REQUESTED BY THE FIELD DESCRIPTORS.  IF REQUESTED,
*    ANY ICHETEST MACROS ARE BUILT ALSO.  NOTE THAT THE MAPPING FOR
*    THE PASSED FIELD DESCRIPTORS IS CONSIDERABLY SIMPLIFIED FROM THE
*    NORMAL ICHEACTN AND ICHETEST DEFINITIONS.  TO ACCOMPLISH THIS
*    THE ACTUAL TEMPLATE DESCRIPTORS (IN MEMORY) ARE REFERENCED TO
*    DETERMINE THE ACTUAL ATTRIBUTES OF A PARTICULAR FIELD.  IN THIS
*    WAY IT WAS POSSIBLE TO GREATLY SIMPLIFY THE MACRO REQUIREMENTS
*    WHILE RETAINING THE FLEXIBILITY.  AFTER ALL THE MACROS ARE BUILT,
*    THE RACF MANAGER IS INVOKED VIA SVC 132.  IF RETURN CODE IS NON-
*    ZERO IT IS RETURNED TO THE CALLER.  OTHERWISE, IF THE REQUEST
*    WAS A LOCATE OR NEXT(C) THE FIELD DESCRIPTOR DATA FIELDS ARE
*    UPDATED ACCORDING TO INFORMATION FROM THE MANAGER.  THE
*    LENGTH FIELD IS ALWAYS UPDATED.
*
*    IF AN ADD OR ALTER(I) REQUEST, NO VALUES OR LENGTHS ARE TOUCHED.
*
*    DELETE(A) REQUESTS DO NOT USE FIELD DESCRIPTORS.
*
*    RENAME IS SUPPORTED BUT WTSC. MANUAL LACKS DOCUMENTATION.
*    NOTE THAT FOR RENAME, WKAREA IS NOT USED AS SUCH BUT RATHER
*    POINTS TO A VARYING LENGTH CHARACTER STRING WHICH IDENTIFIES
*    THE NEW ENTRY NAME.  NOTE RENAME DOES NOT USE THE LENGTH BYTE.
*
*    NOTE THAT IF A MANAGER ERROR OCCURRED, FIELD DESCRIPTORS ARE
*    OF COURSE UNTOUCHED.
*
*    ALSO NOTE THAT NEXT REQUESTS PROCESS THE RACF ENTRY NEXT IN
*    COLLATING SEQUENCE AFTER THE ONE POINTED TO BY ENTRY; AND THAT
*    ENTRY IS UPDATED BY THE MANAGER. THEREFORE TO GET 1ST ENTRY IN
*    A CLASS, SPECIFY ENTRY LENGTH OF 1 AND VALUE OF X'00'.
        EJECT
*    NOTES, SPECIALIZED FUNCIONS, LIMITATIONS
*    ****************************************
*    (SEE ALSO WTSC. FOR MUCH MORE INFORMATION)
*
*    IF FLDTEST OR TESTPTR ZERO OR NULL, OR IF TESTCOND INVALID,
*    NO TEST WILL BE PERFORMED.  IF FLD INFORMATION INVALID OR
*    IF FLDMAXL=0 (LOCATE REQUESTS) OR FLDACTL=0 (UPDATE REQUEST),
*    RUN=NO IS ASSUMED BUT GROSS ERRORS WILL CAUSE 105<R15<256.
*
*    IF FLDACTL=-1 THEN THE SPECIFIED FIELD OR OCCURRENCE WILL BE
*    DELETED. (ALTER REQUESTS).
*
*    IF FLDACTL=-2 THEN THE SPECIFIED COUNT FIELD WILL BE INCREMENTED
*    BY 1.    (ALTER REQUESTS).
*
*    IF, FOR AN ADD OR ALTER REQUEST, THE FIELD SPECIFIED IS A
*    COUNT FIELD FOR A REPEAT GROUP, AND FLDACTL>2 THEN THE GROUP=YES
*    OPTION IS SET IN THE ICHEACTN MACRO.  THIS MEANS THAT BOTH THE
*    COUNT FIELD AND REPEAT GROUP FOLLOWING IT WILL BE UPDATED BY
*    FLDDATA.
*
*    WARNING:  NOTE THAT IF THE COUNT FIELD WAS NOT INITIALLY ZERO, AN
*    ERRONEOUS PROFILE WILL BE BUILT. (SEE WTSC FOR FURTHER INFO.)
*
*    IF A LOCATE REQUEST IS FOR A VARIABLE LENGTH FIELD WHICH IS NOT
*    PART OF A COMBINATION FIELD OR REPEAT GROUP, THEN THE ONE BYTE
*    LENGTH PREFIX IS NOT RETURNED BUT RATHER THE HALFWORD LENGTH
*    FLDACTL IS ADJUSTED CORRECTLY.  THIS ACHIEVES COMPATIBILITY WITH
*    VARYING CHARACTER STRINGS IN PLI.  HOWEVER FOR REPEAT GROUPS, OR
*    COMBINATION FIELDS, THE LENGTH PREFIX FOR VARYING FIELDS MUST/WILL
*    BE SUPPLIED, FOR LOCATE OR UPDATE REQUESTS.  SIMILARLY FOR UPDATE
*    REQUESTS, IF THE FIELD DESCRIBES A SIMPLE VARYING LENGTH STRING,
*    THE ONE-BYTE ADDITIONAL LENGTH PREFIX SHOULD NOT BE FURNISHED.
*
*    THIS VERSION IS LIMITED TO A TOTAL ICHEACTN/ICHETEST AREA OF
*    ABOUT 3K WHICH AFFECTS THE MAXIMUM NUMBER OF ACTNS/TESTS
*    WHICH CAN BE SUPPORTED.  EXCESSIVELY LARGE
*    NUMBERS OF CALLING PARAMETERS WITH LARGE NUMBERS OF TESTS MAY
*    EXCEED SAVEAREA SPACE WHICH WILL RESULT IN RETURN CODE 260.
*
*    NOTE THAT ICHETEST MACROS ARE SUPPORTED IN CONJUCTION WITH
*    ICHEACTN MACROS BUT TESTS CANNOT BE SPECIFIED AS SUPPORTED
*    BY ASSEMBLER MACRO DEFINITION  ICHEINTY  TESTS=(....
*
*    FOR NON-LOCATE REQUESTS, A WKSIZE LENGTH OF ZERO MAY BE
*    SPECIFIED MEANING SP=0 AND MINIMUM MANAGER WORKAREA LENGTH.
*
*    FOR LOCATE REQUESTS, A WKSIZE LENGTH < MINIMUM (E.G. 0) WILL
*    CAUSE AN AN ESTIMATION OF WORKSIZE TO BE COMPUTED AS
*    SUM(FLDMAXL+MGRPAD)*1.125.  IF THIS IS INSUFFICIENT,
*    (MGR RC 44) THEN THE CALLER MUST SUPPLY AN ADEQUATE LENGTH.
*
*    SEE OPERATIONAL DESCRIPTION REGARDING WKAREA WHEN REQUEST
*    ACTION IS RENAME.
*
*    SMC=NO IS NOT SUPPORTED FOR MANAGER INVOCATION.
*
*    SEE NOTE BELOW FOR MANAGER RETURN CODE 36.
*
*    WITH DEFAULT OPTIONS SWITCH SETTINGS, AUTHORIZED SUBPOOLS
*    MAY NOT BE GETMAINED.  HOWEVER THE SWITCH SETTINGS MAY BE
*    MODIFIED TO SPECIFY: NO STAX MACRO; NO JSCB AUTHORIZATION
*    SVC; NO MODESET,...ETC.  THESE SWITCHES ARE CONTAINED IN
*    FLAG FIELD 'OPTIONS' AND MAY BE CHANGED OR ZAPPED ACCORDINGLY.
*
        EJECT
*    ERROR CODES   (MANAGER <100, ROUTINE >100)
*    ***********
*
*    00     SUCCESSFUL
*    04     RECOVERY ENVIRONMENT COULD NOT BE ESTABLISHED
*    08     ADD - PROFILE ALREADY EXISTS
*    12     ENTRY DOES NOT EXIST (NEXT(C)-NO MORE ENTRIES)
*    16     RESERVED
*    20     NO ENOUGH SPACE IN RACF DATASET
*    24     I/O ERROR IN PROCESSING RACF DATASET
*    28     RACF NOT ACTIVE
*    32     WORK AREA NOT PROVIDED AND REQUIRED
*    36     ERROR IN ACTION OR TEST BLOCK; R0 CODE IN BITS 16-19
*    40     RESERVED
*    44     WORKAREA NOT LARGE ENOUGH; RESPECIFY SUBPOOL/LENGTH
*    48     WORKAREA LESS THAN MINIMUM SIZE; NO DATA RETURNED
*    52     TEST CONDITION NOT MET
*    56     NO VOLUME SPECIFIED AND RACF HAS MULTIPLE DATASET ENTRIES
*    60     VOLUME SPECIFIED NOT ASSOCIATED WITH ANY PROFILE
*    64     CANNOT DELETE IBM-DEFINED ENTRY
*    68     ALTERI REQUEST WOULD CAUSE INCREASED PROFILE SIZE
*    72     REQUEST INCREASES INDICES BEYOND THE MAXIMUM(10)
*    76     INVALID INDEX BLOCK ENCOUNTERED
*    80     UPDATE REQUEST BUT EXTENDED BIT IN ICB IS ON
*
*    101-256 INVALID PARAMETER IDENTIFIED BY RC-100
*    260     >128 FIELDS REQUESTED OR TOO MANY ACTIONS AND TESTS
*    264     DELETE(A) CALL CANNOT HAVE FIELD DESCRIPTORS
*    268     FIELDS REQUESTED BUT MGR. RETURNED NO DATA AT ALL
*
*    NOTE THAT ONLY THE LOWER 12 BITS OF REG 15 SHOULD BE
*    TESTED FOR RETURN CODE 36 BECAUSE BITS 16-19 REPRESENT
*    A SPECIAL EXTRA RETURN CODE FROM R0. (SEE WTSC.)
*
*    ATTRIBUTES
*    **********
*
*    REENTRANT; REFRESHABLE
*
*    REGISTER USAGE - GENERAL
*    **************
*
*    R1-10 WORK
*    R11   R1SAVE
*    R12   BASE REGISTER
*    R13   SAVE AREA
*    R14   INTERNAL LINKAGE
*    R15   RETURN CODE FROM MANAGER
         EJECT
*    NOTES CONCERNING RELEASE DEPENDENCIES
*    *************************************
*
*    THIS ROUTINE MAY MALFUNCTION IF CHANGES ARE MADE TO:  THE RACF
*    MANAGER INVOCATION MACROS ICHEINTY, ICHEACTN OR ICHETEST; THE
*    DATASET TEMPLATE STRUCTURE (POINTED TO BY RCVT+X'10'); THE
*    FORMAT OF THE MANAGER WORK AREA; THE LOCATION OF THE RCVT IN
*    THE CVT; OR FUNCTIONAL CHANGE TO MANAGER OPERATION.
*    EXAMINATION OF APPLICABLE MACROS OR IBM CODE SHOULD REVEAL THE
*    SOURCE OF PROBLEM PARTICULARLY IF IT OCCURS FOLLOWING RACF
*    MAINTENANCE.  TO MINIMIZE CODE CHANGES, EQUATES ARE USED AS
*    MUCH AS POSSIBLE AND MOST ARE GROUPED TOGETHER AND IDENTIFIED.
*    HOWEVER, SUBTLE CHANGES TO THE MANAGER MACROS MAY CAUSE ERRORS
*    SINCE THE ACTUAL MACROS ARE NOT USED IN THIS CODE; THUS SIMPLE
*    REASSEMBLY WILL NOT HELP.
*
********************************************************************
         EJECT
RACFMGR  CSECT
         SAVE (14,12),,*                     SAVE CALLER'S REGS
         LR    BASE,R15                      SAVE BASE REGISTER
         USING RACFMGR,BASE
         LR    R11,R1                        SAVE EXIT LIST ADDRESS
         USING PARMLIST,R11
SP#      EQU   0                             SUBPOOL NUMBER
         GETMAIN R,LV=GSIZE,SP=SP#           R1 POINTS TO MY AREA
         ST    R13,4(,R1)                    SAVE CALLER'S SAVE
         ST    R1,8(,R13)                    SAVE CURRENT SAVEAREA
         LR    R13,R1
         USING SAVEAREA,R13
*
****     INITIALIZE                          ****
*
         LR    R2,R13                       GET -> SAVE AREA
         A     R2,COMOFST                   GET -> AREA TO BE ZEROED
         L     R3,COMSIZE                    AND ITS SIZE
         SLR   R5,R5                        SET LENGTH AND PAD TO NULLS
         MVCL  R2,R4                        CLEAR IT ALL OUT
         EJECT
***********************************************************************
*                                                                     *
*    FIRST CHECK THE ACTION REQUESTED AND CONVERT IT TO A             *
*    ICHEINTY OPTION.  CONVERT CLASS TO ENTITY TYPE.                  *
*                                                                     *
***********************************************************************
         L     R4,ACTPTR                     GET -> ACTION REQUESTED
         LTR   R4,R4
         BZ    @ERR101                       IF NO PTR, ERROR
         CLC   0(6,R4),=C'LOCATE'            LOCATE REQUEST?
         BNE   @NEXT                         NO, CONTINUE
         MVI   IPLOPT1,LOCATE                YES, SET INDICATOR
         B     @CLASS                        CHECK CLASS NEXT
@NEXT    CLC   0(4,R4),=C'NEXT'              NEXT REQUEST?
         BNE   @ADD                          NO, CONTINUE
         MVI   IPLOPT1,NEXT                  YES, SET INDICATOR
@NEXTC   CLC   0(5,R4),=C'NEXTC'             NEXTC REQUEST?
         BNE   @CLASS                        NO, CONTINUE
         OI    IPLOPT1,NEXTC                 YES, SET INDICATOR
         B     @CLASS                        CHECK CLASS NEXT
@ADD     CLC   0(3,R4),=C'ADD'               ADD REQUEST?
         BNE   @DELETE                       NO, CONTINUE
         MVI   IPLOPT1,ADD                   YES, SET INDICATOR
         B     @CLASS                        CHECK CLASS NEXT
@DELETE  CLC   0(6,R4),=C'DELETE'            DELETE REQUEST?
         BNE   @ALTER                        NO, CONTINUE
         MVI   IPLOPT2,DELETE                YES, SET INDICATOR
         CLC   0(7,R4),=C'DELETEA'           DELETEA REQUEST?
         BNE   @CLASS                        NO, CONTINUE
         OI    IPLOPT2,DELETEA               YES, SET INDICATOR
         B     @CLASS                        CHECK CLASS NEXT
@ALTER   CLC   0(5,R4),=C'ALTER'             ALTER REQUEST?
         BNE   @RENAME                       NO, CONTINUE
         MVI   IPLOPT2,ALTER                 YES, SET INDICATOR
         CLC   0(6,R4),=C'ALTERI'            ALTERI REQUEST?
         BNE   @CLASS                        NO, CONTINUE
         OI    IPLOPT2,ALTERI                YES, SET INDICATOR
         B     @CLASS                        CHECK CLASS NEXT
@RENAME  CLC   0(6,R4),=C'RENAME'            RENAME REQUEST?
         BNE   @ERR101                       NO, ERROR
         MVI   IPLOPT1,RENAME                YES, SET INDICATOR
@CLASS   EQU   *
         L     R4,CLASSPTR                   GET -> CLASS REQUESTED
         LTR   R4,R4
         BZ    @ERR102                       IF NO PTR, ERROR
         CLC   0(5,R4),=C'GROUP'             GROUP REQUEST?
         BNE   @USER                         NO, CHECK NEXT
         MVI   ENTYPE,GROUP                  SET ENTYPE
         B     @ENTRY                        CONTINUE
@USER    CLC   0(4,R4),=C'USER'              USER REQUEST?
         BNE   @CONNECT                      NO, CHECK NEXT
         MVI   ENTYPE,USER                   SET ENTYPE
         B     @ENTRY                        CONTINUE
@CONNECT CLC   0(7,R4),=C'CONNECT'           CONNECT REQUEST?
         BNE   @DATASET                      NO, CHECK NEXT
         MVI   ENTYPE,CONNECT                SET ENTYPE
         B     @ENTRY                        CONTINUE
@DATASET CLC   0(7,R4),=C'DATASET'           DATASET REQUEST?
         BNE   @GENERAL                      NO, CHECK NEXT
         MVI   ENTYPE,DATASET                SET ENTYPE
         B     @ENTRY                        CONTINUE
@GENERAL ST    R4,CLASS                      ST -> GENERAL CLASS
         MVI   ENTYPE,GENERAL                SET ENTYPE
         EJECT
***********************************************************************
*                                                                     *
*    NOW CHECK ENTITY (ENTRY) NAME FOR CORRECT LENGTH AND CONVERT     *
*    2 BYTE LENGTH (PL/I) TO MANAGER SINGLE BYTE FORMAT.              *
*                                                                     *
***********************************************************************
@ENTRY   L     R4,ENTRYPTR                   GET -> 2 BYTE LENGTH +
         LTR   R4,R4                          ENTRY NAME
         BZ    @ERR103                       IF NO PTR, ERROR
         CLC   0(2,R4),=H'1'                 ERROR IF TOO SMALL
         BL    @ERR103
         CLC   0(2,R4),=H'255'               ERROR IF TOO LARGE
         BH    @ERR103
         LA    R4,1(0,R4)                    MANAGER USES 1 BYTE LENGTH
         ST    R4,ENTRY                      ST -> ENTRY
***********************************************************************
*                                                                     *
*    CHECK FOR WKAREA PTR FOR EITHER GETMAIN OR RENAME REQUEST        *
*                                                                     *
***********************************************************************
         L     R4,WORKPTR                    GET -> SP & LENGTH
         LA    R4,0(,R4)                     CONVERT TO ADDRESS
         LTR   R4,R4                         ANY POINTER?
         BZ    @ERR104                       NO, POINTER ERROR
         TM    IPLOPT1,RENAME                RENAME REQUEST?
         BZ    @NOTREN                       NO, CONTINUE
         LA    R4,2(,R4)                     YES, NEWNAME; SKIP LENGTH
         ST    R4,WKAREA                     SAVE -> LEN.+NEWNAME
         B     @VOLCHK                        AND CONTINUE
@NOTREN  L     R3,0(,R4)                     GET SP & LENGTH
         ST    R3,WKSPLEN                     AND SAVE IT
***********************************************************************
*                                                                     *
*    CHECK VOLUME SERIAL PASSED (IF ANY). THEN IF DELETE SPECIFIED    *
*    MAKE SURE THERE ARE NO ACTIONS SPECIFIED (=> MGR RC 36)          *
*                                                                     *
***********************************************************************
@VOLCHK  L     R6,VOLPTR                     GET -> VOLSER
         LTR   R6,R6                         IF NO POINTER,
         BZ    @DELCHK                        CONTINUE
         CLI   0(R6),C'$'                    IF VALID CHARACTER,
         BNL   @STVOL                         PROCESS VOLSER
         CLI   0(R6),C' '                    ELSE IF VOLSER BLANK,
         BE    @DELCHK                        ASSUME NO VOLSER
         B     @ERR105                       OTHERWISE PROCESS ERROR
@STVOL   ST    R6,VOLSER                     ST -> VOLSER
@DELCHK  LTR   R6,R6                         LAST VECTOR X'80'...?
         BM    @ACTTOT                       YES, #FLDS=0;CALL MGR
         TM    IPLOPT2,DELETE+DELETEA        NO, DELETE REQUESTED?
         BNZ   @ERR264                       YES, ERROR: NO ACTNS W/DEL
         EJECT
@FIELDS  DS    0H
***********************************************************************
*                                                                     *
*    NOW LOOP THROUGH ALL OF THE FIELD REQUESTS SPECIFIED BY CALLER.  *
*    FOR EACH ONE, BUILD AN ICHEACTN AND ASSOCIATED ICHETEST MACROS   *
*    IN THE GETMAINED AREA.  THE ICHEACTN POINTERS ARE LISTED IN      *
*    THE ICHEINTY EXPANSION... SO STORE THEM THERE ALSO.              *
*    THE FORMAT OF THE ICHEACTN/TEST AREA IS ICHEACTN1...             *
*    ICHEACTN1/TEST VECTORS...ICHEACTN1/FIELD DATA LENGTH...ICHEACTN1/*
*    FIELD DATA POINTER...ICHEACTN2....ETC.   NOTE THAT FOR LOCATE-   *
*    TYPE REQUESTS, FIELD DATA LENGTH IS USED FOR A POINTER TO        *
*    ASSOCIATED CALLING PARAMETER FIELD DESCRIPTOR; AND FIELD DATA    *
*    POINTER IS USED FOR A POINTER TO THE ASSOCIATED TEMPLATE         *
*    DEFINITION.  (THESE FIELDS ARE NOT USED BY THE MGR.)             *
*                                                                     *
*    R1   WORK                    R9  COUNT OF ICHEACTNS              *
*    R2   ICHEACTN TEST ->S       R10 LAST ADDR AVAILABLE (MAXADDR)   *
*    R3   WORK                    R11 RESTRICTED                      *
*    R4   -> ICHEINTY ACTN ->S    R12 RESTRICTED                      *
*    R5   WORK                    R13 RESTRICTED                      *
*    R6   -> INPUT FLD. DSC.      R14 WORK; LINK                      *
*    R7   -> INPUT PARMSTACK      R15 WORK; -> ACTUAL TEMPLATE;       *
*    R8   -> ACTUAL ICHEACTN          -> NEXT ICHEACTN (FROM @TEMPLAT)*
*                                                                     *
*        NOTE THAT ACTN AREA HAS BEEN COMPLETELY ZEROED OUT.          *
*                                                                     *
***********************************************************************
         L     R15,CVT                       GET -> CVT
         L     R15,RCVT(,R15)                GET -> RCVT
         L     R15,RACFTMPL(,R15)            GET -> TEMPLATES
         ST    R15,TMPLPTR                   SAVE -> TEMPLATES
         SR    R9,R9                         ZERO FLDS COUNTER
         LA    R7,F1PTR                      GET -> 1ST INPUT FIELD->
         LA    R4,ACTNPTRS                   GET -> 1ST INTY ACTN ->
         LR    R10,R13                       GET -> SAVEAREA
         A     R10,SPILOFST                  GET -> SPILL AREA
         ST    R10,MAXADDR                   SAVE MAXIMUM AREA ADDR.
         LA    R8,ACTNS                      GET -> ICHEACTN AREA
         USING ICHEACTN,R8
@ACTLOOP L     R6,0(,R7)                     GET -> INPUT FIELD
         USING FIELD,R6
         LTR   R6,R6                         IF NO POINTER,
         BZ    @ACTTOT                        GO TOTAL
         LA    R9,1(,R9)                     ELSE BUMP UP COUNTER
         C     R9,MAXACTN                    IF TOO MANY FIELDS,
         BH    @ERR260                        PROCESS ERROR
         ST    R8,0(,R4)                     ST -> ICHEACTN
         ST    R8,ACTNSAVE                   SAVE R8 POINTER
         MVC   ICHANAME,FLDNAME              MOVE IN FIELD NAME
         LA    R1,ICHANAME                   GET -> FIELD NAME
         BAL   R14,@TEMPLAT                  GO FETCH TEMPLATE
         LTR   R15,R15                       IF NO POINTER,
         BZ    @ERRFLD                       THEN FIELD NOT DEFINED
         USING TEMPLATE,R15                  ELSE EXAMINE IT
         ST    R15,TMPLNOW                   SAVE TEMPLATE ->
         TM    IPLOPT1,LOCATE+NEXT+NEXTC     UPDATE REQUEST?
         BZ    @CHKUPD1                      YES, PROCESS
         LH    R1,FLDMAXL                    NO, PROCESS LOCATE
         LTR   R1,R1                         IS MAXLNTH>0?
         BP    @ESTLEN                       YES, CONTINUE
         MVI   ICHANORI,NORUN                NO, SET NORUN INDICATOR
         B     @CHKTST                       AND CONTINUE
@ESTLEN  L     R5,ESTWKSIZ                   GET CURRENT ESTIMATED SIZE
         LA    R5,MGRPAD(R5,R1)              ADD MAX LENGTH PLUS PAD
         ST    R5,ESTWKSIZ                    AND SAVE UPDATED ESTIMATE
         B     @CHKTST                       CONTINUE
@CHKUPD1 MVI   ICHA#FLD,1                    SET FLDDATA COUNT TO 1
         LH    R1,FLDACTL                    GET ACTUAL DATA LENGTH
         TM    TMPLTYPE,TMPLCNT              COUNT FLD. OF REPEAT GRP?
         BZ    @CHKZERO                      NO, CHECK FOR NORUN
         C     R1,=F'2'                      IS LENGTH < 2?
         BL    @CHKZERO                      YES, CHECK FOR NORUN
         BE    @CHKTST                       ELSE IF LENGTH=2, NOT GRP
         MVI   ICHAGRPI,GROUPYES             >2=>GROUP UPDT(SEE NOTES)
         DROP  R15
@CHKZERO LTR   R1,R1                         IS LENGTH ^= 0?
         BNZ   @CHKTST                       YES, CONTINUE
         MVI   ICHANORI,NORUN                NO, SET NORUN INDICATOR
@CHKTST  LA    R2,ICHADSEL(,R8)              GET -> TEST ->S AREA
         LA    R15,8(,R2)                    -> NEXT ACTN IF NO TESTS
         TM    ICHANORI,NORUN                NO RUN REQUESTED?
         BNZ   @CHKROOM                      YES, NO TESTS
         CR    R15,R10                       AVAILABLE SPACE EXCEEDED?
         BNL   @ERR260                       YES, EXIT
         L     R1,FLDTEST                    GET -> ANY TESTFLD(S)
         LA    R1,0(,R1)                     CONVERT TO ADDRESS
         LTR   R1,R1                         ANY POINTER?
         BZ    @CHKROOM                      NO, NO TESTS
         BAL   R14,@TESTS                    GO PROCESS TESTS
@CHKROOM CR    R15,R10                       SPACE EXCEEDED?
         BNL   @ERR260                       YES, EXIT
         ST    R6,0(,R2)                     ASSUME LOCATE; SAVE FLD.->
         MVC   4(4,R2),TMPLNOW                AND -> TEMPLATE
         TM    IPLOPT1,LOCATE+NEXT+NEXTC     UPDATE REQUEST?
         BNZ   @ACTNEXT                      NO, ALL DONE WITH THIS ONE
         LH    R1,FLDACTL                    YES, GET ACTUAL LENGTH
         LTR   R1,R1                         LENGTH <=0?
         BZ    @ACTNEXT                      =0 => NO RUN IS SET; EXIT
         BM    @DELCNT                       <0, DELETE OR COUNT MAYBE
         ST    R1,0(,R2)                     SAVE UPDATE LEN.(ICHAFLDL)
         LA    R5,FLDDATA                    GET -> FIELD DATA
         ST    R5,4(,R2)                      AND SAVE IT
         L     R3,TMPLNOW                    RESTORE TEMPLATE
         USING TEMPLATE,R3
         TM    TMPLTYPE,TMPLRPTG+TMPLCOMB+TMPLFLAG+TMPLCNT  SIMPLE VAR.
*                                            LENGTH FIELD?
         BNZ   @ACTNEXT                      NO, ALL DONE WITH THIS ONE
         CLI   TMPLLNTH+1,255                VARIABLE LENGTH FIELD?
         BNE   @ACTNEXT                      NO, ALL DONE WITH THIS ONE
         LA    R1,1(,R1)                     YES, INCREASE LENGTH BY 1
         ST    R1,0(,R2)                     AND UPDATE ICHEACTN
         BCTR  R5,0                          AND DECREMENT -> BY ONE
         ST    R5,4(,R2)                      TO POINT TO 1 BYTE LENGTH
         B     @ACTNEXT                      ALL DONE WITH THIS ONE
         DROP  R3
@DELCNT  XC    0(4,R2),0(R2)                 ZERO LENGTH FIELD
         C     R1,=F'-2'                     -1=>DELETE;-2=>INCR. COUNT
         BL    @ERRFLD                       LESS IS ERROR
         ST    R1,4(,R2)                     TELL MANAGER TO DO IT
@ACTNEXT LTR   R6,R6                         IF HIGH ORDER BIT ON,
         BM    @ACTTOT                        ALL DONE; TOTAL
         LA    R7,4(,R7)                     ELSE BUMP UP POINTERS
         LA    R4,4(,R4)
         LR    R8,R15                        R8 -> NEXT ICHEACTN
         B     @ACTLOOP                      LOOP TILL DONE
@ACTTOT  STC   R9,ACTN#                      STORE NUMBER OF ACTIONS
         DROP  R6,R8
         EJECT
@SVC132  DS    0H
***********************************************************************
*                                                                     *
*    INVOKE THE MANAGER VIA SVC 132 (ICHEINTY PROTOTYPE).             *
*                                                                     *
*    FIRST COMPUTE THE SIZE OF MANAGER WORKAREA TO BE GETMAINED.      *
*    (UNLESS REQUEST IF FOR RENAME WHICH DOES NOT USE WORKAREA.)      *
*     THEN DISABLE ANY ATTENTION INTERRUPTS.  AND GET AUTHORIZED.     *
*    FOR SECURITY, THE AUTHORIZATION SVC CHECKS TO MAKE SURE THIS     *
*    MODULE IS IN AN AUTHORIZED LIBRARY.  OTHER INSTALLATIONS MAY     *
*    REQUIRE A DIFFERENT SVC INVOCATION MECHANISM.                    *
*                                                                     *
*    R1   LINKAGE                 R9  UNRESTRICTED                    *
*    R2   MGR R0 SAVE             R10 UNRESTRICTED                    *
*    R3   MGR RETURN CODE SAVE    R11 RESTRICTED                      *
*    R4   UNRESTRICTED            R12 RESTRICTED                      *
*    R5   UNRESTRICTED            R13 RESTRICTED                      *
*    R6   UNRESTRICTED            R14 RESTRICTED                      *
*    R7   UNRESTRICTED            R15 MGR RETURN CODE                 *
*    R8   UNRESTRICTED                                                *
*                                                                     *
***********************************************************************
         TM    IPLOPT1,RENAME                RENAME REQUEST?
         BNZ   @STAX                         YES, SKIP GETMAIN
         L     R3,WKSPLEN                    GET SUBPOOL AND LENGTH
         LA    R3,0(,R3)                     GET RID OF SUBPOOL
         C     R3,MGRMINSZ                   SIZE < MINIMUM?
         BNL   @GETMGR                       NO, USE IT
         L     R3,MGRMINSZ                   YES, USE MINIMUM SIZE
         STCM  R3,7,WKSPLEN+1                SAVE IT IN CASE UPDATE
         TM    IPLOPT1,LOCATE+NEXT+NEXTC     UPDATE REQUEST?
         BZ    @GETMGR                       YES, USE MINIMUM SIZE
         L     R4,ESTWKSIZ                   GET SIZE ESTIMATED
         AR    R3,R4                         ADD TO MINIMUM SIZE
         SRL   R4,3                          GET 12.5% CONTINGENCY
         AR    R3,R4                          AND ADD IT ON
         STCM  R3,7,WKSPLEN+1                STORE UPDATE LENGTH
@GETMGR  L     R0,WKSPLEN                    GET SP & LEN. FOR GET
         GETMAIN R,LV=(0)                    GET MANAGER AREA
         OI    CFLAGS1,MGRGET                SET MGR GETMAIN FLAG
         ST    R1,WKAREA                     SAVE FOR MANAGER
         USING MGRWORK,R1
         LR    R2,R1                         GET -> FOR CLEAR
         SLR   R5,R5                         ACTUAL LEN. IN R3
         MVCL  R2,R4                         ZERO OUT MGR AREA
         MVC   MGRWORKL+1(3),WKSPLEN+1       GIVE MANAGER LENGTH
         DROP  R1
@STAX    TM    OPTIONS,NOSTAX                STAX TO BE ISSUED?
         BNZ   @AUTH                         NO, CONTINUE
         STAX  DEFER=YES                     STOP ATTENTION INTERRUPTS
@AUTH    TM    OPTIONS,NOAUTHON              JSCBAUTH TO BE SET?
         BNZ   @KEY0                         NO, CHECK MODESET
         L     AUTHREG,AUTHONR               YES, GET AUTHORIZED
         SVC   AUTHSVC
@KEY0    TM    OPTIONS,NOKEYSET              MODESET TO BE ISSUED?
         BNZ   @MGRSVC                       NO, INVOKE MANAGER
         MODESET KEY=ZERO
@MGRSVC  MVI   ICHERSV,1                     SET RESERVED FLAG FOR INTY
         LA    R15,FLDEF                     GET -> FIELD DEF. AREA
         ST    R15,FLDEFPTR                  SAVE IT FOR MANAGER
         LA    R1,ICHEINTY                   GET -> PARMLIST
         SVC   MGRSVC                        CALL RACF MANAGER
         LR    R2,R0                         GET REG 0 CODE IF ERROR
         LR    R3,R15                        SAVE REG 15
         TM    OPTIONS,NOKEYSET              ISSUE MODESET?
         BNZ   @AUTHOFF                      NO, CHECK JSCB AUTH
         MODESET KEY=NZERO                   GET BACK TO ORIGINAL KEY
@AUTHOFF TM    OPTIONS,NAUTHOFF              RESET JSCBAUTH?
         BNZ   @STAXOFF                      NO, CHECK STAX
         L     AUTHREG,AUTHOFFR              SETUP FOR JSCBAUTH RESET
         SVC   AUTHSVC                       CANCEL AUTHORIZATION
@STAXOFF TM    OPTIONS,NOSTAX                STAX REQUESTED?
         BNZ   @MGRRET                       NO, SKIP IT
         STAX  DEFER=NO                      RESUME ATTENTION INTERUPTS
         SPACE 1
@MGRRET  LR    R15,R3                        RESTORE REG 15
         C     R15,=F'36'                    IF MANAGER ERROR^=36,
         BNE   @132R15                        CHECK FOR OTHER
         SLL   R2,12                         MOVE R0 TO END IN BIT 19
         OR    R15,R2                         AND ADD TO REG 15
         B     @RETURN                        AND EXIT
         SPACE 3
@132R15  LTR   R15,R15                       CHECK FOR MANAGER ERROR
         BNZ   @RETURN                       IF YES, EXIT
         TM    IPLOPT1,LOCATE+NEXT+NEXTC     IF UPDATE,
         BZ    @RETURN                        EXIT
         EJECT
***********************************************************************
*                                                                     *
*    ********    PROCESS ANY LOCATE REQUESTS               ********   *
*    NOW LOOP THROUGH ALL OF THE FIELD REQUESTS SPECIFIED BY CALLER.  *
*    FOR EACH ONE, RETURN TO HIS FIELD DATA AREA ANY INFORMATION      *
*    RETURNED BY THE MANAGER IN THE WORKAREA.  NOTE THAT IF FIELD     *
*    REQUESTED WAS A SIMPLE VARIABLE LENGTH FIELD, THEN THE ACTUAL    *
*    LENGTH IS RETURNED IN FLDACTL WITH THE ONE BYTE LENGTH REMOVED   *
*    FROM FLDDATA.  IF NO INFORMATION RETURNED FOR A SPECIFIED FLD.,  *
*    ITS LENGTH WILL BE ZERO.  IF NO INFORMATION RETURNED AT ALL      *
*    FROM THE MANAGER, ERROR 268 IS ISSUED.                           *
*                                                                     *
*    R1   -> ICHEACTN             R9  COUNT OF ICHEACTNS              *
*    R2   -> FIELD DATA (FLDDATA) R10 -> ACTN VECTOR IN ICHEINTY      *
*    R3   LENGTH OF FIELD DATA    R11 RESTRICTED                      *
*    R4   -> DATA IN WORKAREA     R12 RESTRICTED                      *
*    R5   LENGTH OF DATA IN R4    R13 RESTRICTED                      *
*    R6   -> INPUT FLD. DSC.      R14 UNRESTRICTED; LINKAGE           *
*    R7   -> INPUT PARMSTACK      R15 UNRESTRICTED; -> TEMPLATE       *
*    R8   UNRESTRICTED                                                *
*                                                                     *
***********************************************************************
         L     R8,WKAREA                     GET -> WORKAREA
         USING MGRWORK,R8
         L     R5,MGRDATAL                   GET LENGTH RETURNED
         LTR   R5,R5                         IF NOTHING RETURNED,
         BNP   @ERR268                        CHECK FOR ERROR
         LA    R4,MGRDATA                    GET -> RETURNED DATA
         DROP  R8
         SLR   R9,R9                         ZERO COUNTER
         IC    R9,ACTN#                      GET # OF ACTIONS
         LTR   R9,R9                         IF ZERO,
         BZ    @RETURN                        EXIT
         LA    R10,ACTNPTRS                  GET -> ICHEINTY ACTN->S
         LA    R7,F1PTR                      GET -> FIRST FIELD DSC.
@VALLOOP L     R6,0(,R7)                     GET -> FIRST FIELD
         USING FIELD,R6
         L     R1,0(,R10)                    GET -> 1ST ICHEACTN
         USING ICHEACTN,R1
         TM    ICHANORI,NORUN                NORUN REQUESTED?
         BNZ   @PTRBUMP                      YES, SKIP THIS ACTN
         LH    R5,0(,R4)                     GET LENGTH OF DATA
         STH   R5,FLDACTL                    SAVE FOR CALLER
         LA    R4,2(,R4)                     SKIP LENGTH IN BUFFER
         LTR   R5,R5                         IS LENGTH 0?
         BZ    @PTRBUMP                      YES, SKIP THIS ONE
         LA    R2,FLDDATA                    GET -> CALLER'S DATA
         SLR   R15,R15
         IC    R15,ICHA#TST                  GET # OF TESTS
         SLL   R15,2                          X 4; LEN. OF TEST VECTORS
         L     R15,ICHADSEL+4(R15,R1)        GET -> TEMPLATE DEFINITION
         USING TEMPLATE,R15
         TM    TMPLTYPE,TMPLRPTG+TMPLCOMB+TMPLFLAG+TMPLCNT  SIMPLE VAR.
         BNZ   @VALMOVE                      FIELD?  NO, MOVE IT
         CLI   TMPLLNTH+1,255                VARIABLE LENGTH FIELD?
         BNE   @VALMOVE                      NO, MOVE IT
         BCTR  R5,0                          YES, DECREMENT LENGTH BY 1
         LA    R4,1(,R4)                     AND SKIP ONE BYTE LENGTH
         STH   R5,FLDACTL                    UPDATE LENGTH FOR CALLER
@VALMOVE LR    R3,R5                         COPY MOVE LENGTH
         CH    R3,FLDMAXL                    IS LENGTH > MAXIMUM?
         BNH   *+8                           NO, CONTINUE
         LH    R3,FLDMAXL                    YES, USE MAXIMUM
         LA    R8,0(R5,R4)                   GET -> NEXT DATA IN WORK
         MVCL  R2,R4                         GIVE CALLER THE DATA
         LR    R4,R8                         R4 -> NEXT DATA IN WORK
@PTRBUMP LA    R7,4(0,R7)                    BUMP UP POINTERS
         LA    R10,4(,R10)
         BCT   R9,@VALLOOP                   LOOP TILL DONE
         DROP  R1,R6,R15
         SLR   R15,R15                       MANAGER RETURN CODE=0
         EJECT
*
@RETURN  DS    0H                            SO RETURN
         LR    R9,R15                        SAVE RETURN CODE
         TM    CFLAGS1,MGRGET                MGR AREA GETMAINED?
         BZ    @WRAPUP                       NO, SKIP MGRAREA FREE
         L     R3,WKSPLEN                    GET SP & LEN. FOR CLEAR
         LR    R0,R3                          AND FREE
         LA    R3,0(,R3)                     GET RID OF SP# FOR MOVE
         L     R2,WKAREA                     GET -> WKAREA FOR CLEAR
         LR    R1,R2                          AND FREE
         SLR   R5,R5                         SET LENGTH/PAD TO NULLS
         MVCL  R2,R4                         CLEAR IT ALL FOR SECURITY
         FREEMAIN R,LV=(0),A=(1)             FREE MANAGER AREA
@WRAPUP  LR    R1,R13                        SET UP FOR FREE
         L     R13,4(,R13)                   RESTORE CALLER'S REG
         FREEMAIN R,LV=GSIZE,A=(1),SP=SP#    FREE THE AREA
         LR    R15,R9                        RESTORE RETURN CODE
         RETURN (14,12),RC=(15)              RETURN ANY ERROR
         EJECT
@TEMPLAT DS    0H
***********************************************************************
*                                                                     *
*    ********    LOCATE THIS FIELD'S TEMPLATE              ********   *
*                                                                     *
*    A VECTOR TO THE TEMPLATE DEFINITIONS HAS ALREADY BEEN STORED     *
*    IN TMPLPTR.  THIS VECTOR POINTS TO A SERIES OF TEMPLATE          *
*    DESCRIPTOR VECTORS WHICH ARE SEQUENCED FOR ENTYPES 0 (NOT USED), *
*    1, 2, 3...ETC.  ONCE THE CORRECT TEMPLATE DESCRIPTOR IS FOUND,   *
*    THEN IT IS SCANNED FOR A FIELD MATCHING THE ONE POINTED TO BY    *
*    REGISTER 1.  IF NO FIELD NAME MATCH IS FOUND, R15 IS RETURNED    *
*    AS ZERO.  OTHERWISE THE -> TEMPLATE DEFINITION FOR THE SPECIFIED *
*    FIELD IS RETURNED.                                               *
*                                                                     *
*    R1   RESTRICTED(-> FLDNAME)  R9  -> TEMPLATE DEFINITIONS         *
*    R2   UNRESTRICTED            R10 -> TEMPLATE VECTOR TABLE        *
*    R3   UNRESTRICTED            R11 RESTRICTED                      *
*    R4   UNRESTRICTED            R12 RESTRICTED                      *
*    R5   UNRESTRICTED            R13 RESTRICTED                      *
*    R6   UNRESTRICTED            R14 UNRESTRICTED; OFFSET VECTOR     *
*    R7   UNRESTRICTED            R15 UNRESTRICTED; -> TEMPLATE OR 0  *
*    R8   UNRESTRICTED                                                *
*                                                                     *
***********************************************************************
         SLR   R15,R15                       ASSUME NO TEMPLATE
         STM   R14,R12,TEMPSAVE              SAVE REGS
         L     R10,TMPLPTR                   GET -> TEMPLATE VECTORS
         SLR   R14,R14
         IC    R14,ENTYPE                    GET CLASS REQUESTED
         SLL   R14,2                         MULTIPLY BY 4 FOR OFFSET
         L     R9,0(R14,R10)                 GET -> CORRECT TEMPLATE
         USING TEMPLATE,R9
@TMPLCHK CLI   TMPLNAME,X'00'                IF NO NAME FOUND,
         BE    @TMPRETR                       TELL CALLER -> IS 0
         CLC   TMPLNAME,0(R1)                DO NAMES MATCH?
         BE    @TMPLFND                      YES, FOUND IT
         LA    R9,TMPLDSEL(,R9)              NO, CHECK NEXT TEMPLATE
         B     @TMPLCHK                        AND LOOP AGAIN
@TMPLFND LR    R15,R9                        RETURN -> TO CALLER
@TMPRETR L     R14,TEMPSAVE                  RESTORE REGISTERS
         LM    R0,R12,TEMPSAVE+8
         BR    R14                            AND RETURN
         DROP  R9
         EJECT
@TESTS   DS    0H
***********************************************************************
*                                                                     *
*    ********    BUILD ALL REQUESTED TESTS (ICHETEST)      ********   *
*                                                                     *
*    AT ENTRY, REG 1 POINTS TO A TESTFLD DESCRIPTOR.  R2 -> TEST ->S  *
*    IN THE CURRENT ICHEACTN.  THIS ROUTINE REMAPS THE CALLER'S       *
*    TESTFLDS INTO ICHETEST FORMAT AND ANCHORS THEIR VECTORS          *
*    IN THE CURRENT ICHEACTN.  R15 IS RETURNED TO CALLER WITH THE     *
*    ADDRESS OF THE NEXT ICHEACTN TO BE BUILT.  ICHA#TST IN ICHEACTN  *
*    IS UPDATED WITH THE ACTUAL NUMBER OF TESTS TO BE PERFORMED.      *
*    AT EXIT, R2 IS UPDATED TO POINT TO THE CURRENT ICHEACTN          *
*    FLDDATA AREA (LENGTH FULLWORD PLUS POINTER).                     *
*                                                                     *
*    R1   RESTRICTED(-> TESTFLD)  R9  RESTRICTED (CURRENT ACTN #)     *
*    R2   -> ICHEACTN TESTS PTRS  R10 RESTRICTED (MAX. ADDRESS)       *
*    R3   UNRESTRICTED            R11 RESTRICTED                      *
*    R4   # OF TESTS (LOOP CTR.)  R12 RESTRICTED                      *
*    R5   UNRESTRICTED            R13 RESTRICTED                      *
*    R6   # OF TEST CONDITIONS    R14 UNRESTRICTED                    *
*    R7   -> TESTFLD              R15 -> NEXT ICHEACTN OR 0 AT EXIT   *
*    R8   -> ICHETEST                                                 *
*                                                                     *
*    NOTES: 1. TEST AREAS (ICHETEST) ARE INITIALLY ZEROED OUT.        *
*           2. ICHEACTN TEST PTRS ARE ALSO INITIALLY ZERO (=> NO TEST)*
*                                                                     *
***********************************************************************
         STM   R14,R12,TEMPSAVE              SAVE REGISTERS
         LA    R15,1                         HOW MANY TESTS? SO FAR 1
         LR    R7,R1                         GET -> 1ST TEST FIELD
         USING TESTFLD,R7
@TESTCNT L     R7,TESTTEST                   GET -> NEXT TESTFLD
         LA    R7,0(,R7)                     CONVERT TO ADDRESS
         LTR   R7,R7                         ANY VECTOR?
         BNP   @TESTTOT                      NO, ALL COUNTED
         LA    R15,1(,R15)                   YES, BUMP COUNTER
         C     R15,=F'256'                   TOO MANY TESTS?
         BNL   @ERRFLD                       YES, PROCESS ERROR
         B     @TESTCNT                      NO, LOOP TILL DONE
@TESTTOT LR    R4,R15                        SAVE NO. OF TESTS FOR LOOP
         USING ICHEACTN,R8                   R8 -> ICHEACTN AT ENTRY
         STC   R15,ICHA#TST                  SAVE NO. FOR MANAGER
         DROP  R8
         SLL   R15,2                         MULTIPLY BY 4 FOR OFFSET
         LA    R8,8(R15,R2)                  GET -> 1ST ICHETEST;
         USING ICHETEST,R8                    SKIP FLDDATA VALUES
@TSTLOOP LH    R3,TESTLNTH                   GET LENGTH OF TEST DATA
         LTR   R3,R3                         IS LENGTH <= 0?
         BNP   @NOTEST                       YES, SKIP TEST
         LA    R6,#CONDS                     GET # TEST CONDITIONS
         LA    R5,CONDTBL                    GET ADDR OF TEST TABLE
@TSTLB01 CLC   0(2,R5),TESTCOND              CONDITION MATCH TABLE?
         BE    @TSTCOND                      YES, EXIT LOOP
         LA    R5,2(,R5)                     NO, BUMP TO NEXT ENTRY
         BCT   R6,@TSTLB01                    AND LOOP AGAIN
         B     @NOTEST                       NO CONDITION; SKIP TEST
@TSTCOND STC   R6,ICHTCOND                   SAVE CONDITION #
         MVC   ICHTNAME,TESTNAME             SAVE FIELD NAME
         ST    R3,ICHTLNTH                   STORE FULLWORD LENGTH
         LA    R3,TESTDATA                   STORE -> TEST DATA
         ST    R3,ICHTDATA
         ST    R8,0(,R2)                     STORE -> ICHETEST IN ACTN
         LA    R8,ICHTDSEL(,R8)              BUMP TO NEXT ICHETEST
@NOTEST  CR    R8,R10                        TOO MUCH DATA?
         BNL   @ERRFLD                       YES, PROCESS ERROR
         LA    R2,4(,R2)                     BUMP TO NEXT ACTN TEST->
         L     R7,TESTTEST                   BUMP TO NEXT TESTFLD ->
         BCT   R4,@TSTLOOP                   LOOP UNTIL NO MORE TESTS
         LR    R15,R8                        ALL DONE, RETURN -> ACTN
         L     R14,TEMPSAVE                  RESTORE REGISTERS
         LM    R0,R1,TEMPSAVE+8
         LM    R3,R12,TEMPSAVE+20
         BR    R14
         DROP  R7,R8
         EJECT
***********************************************************************
*                                                                     *
*    PROCESS ERRORS DETECTED BY THIS ROUTINE.  OTHER ERRORS MAY       *
*    BE DETECTED BY THE MANAGER, OF COURSE.  NOTE THAT THE CALLER     *
*    MAY NOT USE THE RETURN CODE AS A VECTOR TABLE OFFSET.            *
*                                                                     *
***********************************************************************
@ERR101  LA    R15,101             INVALID PARM # 1   ACTION
         B     @RETURN
@ERR102  LA    R15,102             INVALID PARM # 2   CLASS
         B     @RETURN
@ERR103  LA    R15,103             INVALID PARM # 3   ENTRY
         B     @RETURN
@ERR104  LA    R15,104             INVALID PARM # 4   WKSIZ
         B     @RETURN
@ERR105  LA    R15,105             INVALID PARM # 5   VOLSER
         B     @RETURN
@ERR260  LA    R15,260             MORE THAN THE MAXIMUM # OF FIELDS
         B     @RETURN
@ERR264  LA    R15,264             FIELDS CANNOT BE SPECIFIED FOR
         B     @RETURN              DELETE REQUEST
@ERR268  CLI   ACTN#,0             IF NUMBER OF ACTIONS ZERO,
         BZ    @RETURN              NO DATA OK; RETURN
         LA    R15,268              ELSE SET NO DATA RETURNED
         B     @RETURN
@ERRFLD  LTR   R9,R9                PROCESS ALL OTHER PARAMETER ERRORS
         BP    *+8                  IF R9 NOT 0, RC -> PARM
         LA    R9,1                    ELSE 1ST PARM ASSUMED
         LA    R15,105(0,R9)        RC -> TO BAD PARM FLD. NO. + 100
         B     @RETURN
*
         EJECT
*
*        COMMON REGISTER EQUATES
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
BASE     EQU   R12
         EJECT
*
*****  SEE NOTES CONCERNING RELEASE DEPENDENCIES CONCERNING
*****  THE FOLLOWING EQUATES AND CONSTANTS
*
CVT      EQU   X'10'                        -> CVT
RCVT     EQU   X'3E0'                       -> RCVT
RACFTMPL EQU   X'10'                        -> RACF TEMPLATES
NORUN    EQU   X'80'                        NO RUN INDICATOR
GROUPYES EQU   X'80'                        GROUP=YES INDICATOR
LOCATE   EQU   X'40'                        LOCATE    REQUEST
NEXTC    EQU   X'20'                        NEXTC     REQUEST
NEXT     EQU   X'10'                        NEXT      REQUEST
ADD      EQU   X'08'                        ADD       REQUEST
RENAME   EQU   X'04'                        RENAME    REQUEST
DELETE   EQU   X'80'                        DELETE    REQUEST
DELETEA  EQU   X'40'                        DELETEA   REQUEST
ALTER    EQU   X'08'                        ALTER     REQUEST
ALTERI   EQU   X'04'                        ALTERI    REQUEST
GROUP    EQU   1                            ENTYPE=GROUP
USER     EQU   2                            ENTYPE=USER
CONNECT  EQU   3                            ENTYPE=CONNECT
DATASET  EQU   4                            ENTYPE=DATASET
GENERAL  EQU   5                            ENTYPE=GENERAL
         SPACE 2
CONDTBL  DC    CL2'ZE'          9           CONDITION=ALL ZEROES
         DC    CL2'MX'          8           CONDITION=MIXED (1S,0S)
         DC    CL2'ON'          7           CONDITION=ALL ONES
         DC    CL2'LE'          6           CONDITION=  <=
         DC    CL2'GE'          5           CONDITION=  >=
         DC    CL2'LT'          4           CONDITION=  <
         DC    CL2'GT'          3           CONDITION=  >
         DC    CL2'NE'          2           CONDITION=  ^=
         DC    CL2'EQ'          1           CONDITION=  =
#CONDS   EQU   (*-CONDTBL)/2                NUMBER OF CONDITIONS
SAVESIZ  EQU   4096                         SAVE AREA SIZE
GETSIZE  DC    A(GSIZE)                     GETMAIN SIZE
MAXACT   EQU   128                          MAXIMUM # OF ICHEACTNS
MAXACTN  DC    A(MAXACT)                    MAXIMUM # OF ACTIONS
SPILOFST DC    A(SPILL-SAVEAREA)            OFFSET TO SPILL AREA
SPILLSIZ EQU   16                           SIZE  OF SPILL AREA
COMOFST  DC    A(COMAREA-SAVEAREA)          OFFSET TO COMMON AREA
COMSIZE  DC    A(CSIZE)                     LENGTH OF COMMON AREA
MGRMINSZ DC    A(MGRMINL)                   MIN. LEN. FOR MGR WORKAREA
MGRSVC   EQU   132                          MANAGER SVC NUMBER
AUTHSVC  EQU   XXX                          AUTHORIZATION SVC NUMBER
MGRPAD   EQU   6                            PADDING OVERHEAD FOR LENGTH
*                                           IN WORKAREA + EXTRA LENGTH
*                                           FIELDS FOR VARIABLE,REPEAT
AUTHREG  EQU   R0                           AUTHORIZATION REGISTER
AUTHOFFR DC    F'0'                         R0 VALUE TO TURN OFF AUTH
AUTHONR  DC    XL4'80000000'                R0 VALUE TO TURN ON AUTH
*
         EJECT
***********************************************************************
*                                                                     *
*    OPTIONS SWITCHES......  THESE SWITCHES MAY BE ALTERED TO         *
*    DISABLE THE ISSUANCE OF STAX, AUTHSVC, MODESET...ETC.            *
*    AUTHORIZED CALLERS MAY NOT NEED SOME OF THESE FEATURES.          *
*                                                                     *
***********************************************************************
OPTIONS  DC    AL1(STAX+AUTHON+NAUTHOFF+KEYSET)   OPTIONS FLAGS
NOSTAX   EQU   X'80'                        NO STAX DESIRED
STAX     EQU   X'00'                        STAX DESIRED
NOAUTHON EQU   X'40'                        NO AUTHORIZATION ON SVC
AUTHON   EQU   X'00'                        TURN AUTHORIZATION ON
NAUTHOFF EQU   X'20'                        NO AUTHORIZATION OFF SVC
AUTHOFF  EQU   X'00'                        TURN AUTHORIZATION OFF
NOKEYSET EQU   X'10'                        NO MODESET DESIRED
KEYSET   EQU   X'00'                        MODESET DESIRED
         EJECT
SAVEAREA DSECT                              COMMON SAVEAREA
SAVEREGS DS    18A                          CALLER'S REGS
TEMPSAVE DS    16A                          INTERNAL REGS SAVE
MAXADDR  DS    A                            MAXIMUM ACTN AREA ADDR
TMPLPTR  DS    A                            MAXIMUM ACTN AREA ADDR
TMPLNOW  DS    A                            MAXIMUM ACTN AREA ADDR
WKSPLEN  DS    F                            MGR SUBPOOL AND LENGTH
ACTNSAVE DS    A                            CURRENT ICHEACTN SAVE
*
COMAREA  EQU   *                            COMMON AREA (ZEROED OUT)
CFLAGS1  DS    AL1                          CONTROL FLAGS
MGRGET   EQU   X'80'                        MANAGER AREA GETMAINED FLAG
         DS    AL3                          RESERVED
ESTWKSIZ DS    F                            ESTIMATED MGR WORKSIZE
ICHEINTY DS    0F                           MANAGER INVENTORY MACRO
IPLOPT1  DS    AL1                          ACTION
IPLOPT2  DS    AL1                          ACTION (CONT.)
ICHERSV  DS    AL1                          RESERVED   (=1)
ENTYPE   DS    AL1                          RESOURCE CLASS TYPE
ENTRY    DS    AL4                          -> ENTRY NAME
FLDEFPTR DS    AL4                          -> FIELD DEFINITIONS
RBA      DS    AL4                          -> RBA (NOT USED);
*                                              CAN BE USED FOR ALTERI
CLASS    DS    AL4                          -> RESOURCE CLASS
WKAREA   DS    AL4                          -> WORK AREA (OR NEWNAME)
VOLSER   DS    AL4                          -> VOLUME SER. (OPTIONAL)
FLDEF    DS    AL1                          RESERVED
         DS    AL1                          MAX. # OF TESTS
         DS    AL1                          CURRENT # OF TESTS
ACTN#    DS    AL1                          NUMBER OF ICHEACTN'S
ACTNPTRS DS    (MAXACT)AL4                  -> TO ICHEACTNS
*
ACTNS    DS    0F                           LOCATION OF 1ST ICHEACTN
         ORG   SAVEAREA+SAVESIZ-SPILLSIZ    OFFSET TO MANAGER AREA
SPILL    DS    (SPILLSIZ)XL1                SPILL AREA
CSIZE    EQU   *-COMAREA
GSIZE    EQU   *-SAVEAREA
         EJECT
FIELD    DSECT                               CALLER'S FIELD DESCRIPTORS
FLDNAME  DS    CL8                           FIELD NAME
FLDTEST  DS    A                             -> 1ST TEST FLD IF ANY
FLDMAXL  DS    H                             MAXIMUM LENGTH (LOCATE)
FLDACTL  DS    H                             ACTUAL LENGTH OF DATA
FLDDATA  DS    CL256                         FIELD DATA
         SPACE 4
TESTFLD  DSECT                               CALLER'S TEST FIELDS
TESTNAME DS    CL8                           FIELD NAME
TESTTEST DS    AL4                           -> NEXT TEST FLD IF ANY
TESTCOND DS    CL2                           CONDITION TO BE TESTED
TESTLNTH DS    H                             ACTUAL LENGTH OF DATA
TESTDATA DS    CL256                         TEST DATA
         EJECT
ICHEACTN DSECT                               ACTION TO BE PERFORMED
ICHA#TST DS    AL1                           # OF TESTS TO PERFORM
ICHA#FLD DS    AL1                           # OF FLD DATA POINTERS
ICHANORI DS    AL1                           NO RUN INDICATOR
ICHAGRPI DS    AL1                           GROUP=YES INDICATOR
ICHANAME DS    CL8                           FIELD NAME
ICHADSEL EQU   *-ICHEACTN                    LENGTH OF BASIC ICHEACTN
***      DS    N*AL4                         ->S TO NO. OF ICHETESTS
ICHAFLDL DS    AL4                           LENGTH OF FLDATA (UPDATE)
*                                            -> ASSOCIATED FIELD DSC.
*                                               (LOCATE REQUESTS)
*                                               (OR NO RUN UPDATE RQST)
ICHAFLDV DS    AL4                           -> FIELD (UPDATE ONLY)
*                                            -> ASSOCIATED TMPL. DEF.
*                                               (LOCATE REQUESTS)
*                                               (OR NO RUN UPDATE RQST)
         SPACE 4
ICHETEST DSECT                               ACTION TO BE PERFORMED
ICHTCOND DS    AL1                           TYPE OF TEST (CONDITION)
ICHTRESU DS    AL1                           RESULTS OF TEST(NOT USED)
         DS    AL2                           RESERVED
ICHTNAME DS    CL8                           FIELD NAME
ICHTLNTH DS    AL4                           LENGTH OF TEST DATA
ICHTDATA DS    AL4                           -> TEST DATA
ICHTDSEL EQU   *-ICHETEST                    LENGTH OF ICHETEST
         EJECT
TEMPLATE DSECT                               TEMPLATE DEFINITION
TMPLNAME DS    CL8                           FIELD NAME
TMPLTYPE DS    AL1                           TYPE OF FIELD
TMPLRPTG EQU   X'80'                         TYPE= REPEAT GROUP
TMPLCOMB EQU   X'40'                         TYPE= COMBINATION FIELD
TMPLFLAG EQU   X'20'                         TYPE= FLAG FIELD
TMPLCNT  EQU   X'10'                         TYPE= COUNT FIELD OF RPTG
TMPLENCR EQU   X'04'                         TYPE= ENCRYPTED FIELD
         DS    AL3                           RESERVED
TMPLLNTH DS    H                             LENGTH OF FIELD
TMPLDSEL EQU   *-TEMPLATE                    LENGTH OF TEMPLATE
         SPACE 4
MGRWORK  DSECT                              MANAGER WORK AREA
MGRWORKL DS    F                            MANAGER WORK AREA LENGTH
MGRWORKR DS    F                            MANAGER RBA
         DS    F                            RESERVED
MGRWORKD DS    F                            MANAGER DUPLICATE DSN CNT
         DS    F                            RESERVED
         DS    F                            RESERVED
MGRDATAL DS    F                            LENGTH OF RETURNED DATA
MGRMINL  EQU   *-MGRWORK+2                  MINIMUM MGR WORK LENGTH
MGRDATA  DS    CL256                        START OF RETURNED DATA
         EJECT
PARMLIST DSECT                               REG1 ENTRY PARAMETER LIST
ACTPTR   DS    A                             -> ACTION TO BE PERFORMED
CLASSPTR DS    A                             -> CLASS NAME
ENTRYPTR DS    A                             -> ENTRY NAME
WORKPTR  DS    A                             -> WORKAREA SP&LEN.; OR
*                                            -> NEWNAME FOR RENAME RQST
VOLPTR   DS    A                             -> VOLSER,BLANKS OR NO PTR
F1PTR    DS    A                             -> FIRST FIELD DESCRIPTOR
F2PTR    DS    A                             -> SECOND FLD. DSC...ETC.
         END
