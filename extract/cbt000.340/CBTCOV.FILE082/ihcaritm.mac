         MACRO
         IHCARITM
         GBLA  &ERR
         AIF   (&ERR EQ 0).FINNO
IHCEFNTH CSECT
         AGO   .FIN01
.FINNO   ANOP
IHCFINTH CSECT
.FIN01   ANOP
*A100500,101100-101600,188100-188500,205500,199000,233030-233780 A41074
*A242100-242900,243500,386200-386600,454500,511500               A41074
*C528000                                                         A41074
*D196000-201000,202000,216000-218000,515000-516000               A41074
         EXTRN IBCOM#
         EXTRN INTSWTCH
         EXTRN INT6SWCH
         EXTRN IHCUOPT
         EXTRN ADCON#
         EXTRN FIOCS#
         ENTRY ARITH#
         ENTRY ADJSWTCH
*
* STATUS - CHANGE LEVEL 02,  15JULY71   RELEASE 21
*
* FUNCTION/OPERATION--IHCFINTH, A MEMBER OF THE FORTRAN SYSTEM LIBRARY,
*    PROCESSES ARITHMETIC-TYPE AND SPECIFICATION PROGRAM INTERRUPTS
*    AND CONTINUES EXECUTION
*
* ENTRY POINTS--
*
*    1. ARITH# IS THE ADDRESS SPECIFIED BY A SPIE MACRO IN IBFINT, THE
*       INITIALIZATION SECTION OF THE FORTRAN LIBRARY MODULE IHCFCOMH.
*       THE SYSTEM PASSES CONTROL TO THIS ADDRESS WHENEVER ONE OF THE
*       FOLLOWING PROGRAM INTERRUPTIONS OCCUR:
*           G--SPECIFICATION (HANDLED ONLY IF THE BOUNDARY ALIGNMENT
*                             OPTION WAS SELECTED AT SYSTEM GENERATION)
*           9--FIXED POINT DIVIDE
*          11--DECIMAL DIVIDE
*          12--EXPONENT OVERFLOW
*          13--EXPONENT UNDERFLOW
*          15--FLOATING POINT DIVIDE
*
*    2. ADJSW IS A SWITCH INITIALIZED TO ZERO WHICH IS SET TO ONE WHEN
*       THE BOUNDARY ADJUSTMENT MODULE IHCADJST IS LOADED. THE FORTRAN
*       ROUTINE IBEXIT IN IHCFCOMA WHICH TERMINATES EXECUTION REFERENCE
*       ADJSW IN ORDER TO DETERMINE WHETHER IHCADJST IS TO BE DELETED
*
* INPUT--THE SYSTEM PASSES THE ADDRESS OF THE PROGRAM INTERRUPTION
*    ELEMENT (PIE) IN REGISTER 1.
*
* OUTPUT--OUTPUT CONSISTS OF THE ERROR MESSAGE IHC210I.
*
* EXITS--
*    RETURN IS ALWAS TO THE SYSTEM VIA REGISTER 14. THE SYSTEM THEN
*    RETURNS TO THE INTERRUPTED PROGRAM.
*
* TABLES/WORK AREAS--
*    'SAVERR' - REGISTER STORAGE ARE MAINTAINED FOR USE BY IHCADJST AND
*               AND THE ANALYZER OF EXECUTE INSTRUCTIONS. THE REGISTERS
*               ARE STORED IN THE ORDER 0-15
*
* EXTERNAL ROUTINES--
*    1. IHCFCOMH, CONTAINS INTERRUPTION TYPE SWITCHES WHICH ARE REFER-
*       ENCED BY THE FORTRAN LIBRARY ROUTINES IHCFOVER AND IHCDVCHK
*    2. IHCFIOSH, THE SEQUENTIAL I/O INTERFACE WITH DATA MANAGEMENT.
*    3. IHCFCVTH, THE I/O DATA CONVERSION PACKAGE
*    4. IHCUOPT,  USER OPTION TABLE
*
* ATTRIBUTES--THIS MODULE IS NOT REENTRANT, BUT IS SERIALLY REUSABLE
         EJECT
*  REGISTER DEFINITIONS
R0       EQU   0                                                   HWRE
DEC      EQU   2                                                   HWRE
GRX      EQU   2
GRY      EQU   3
SPILL    EQU   4
ADR      EQU   6                                                   HWRE
ORER     EQU   5                                                   HWRE
SWT      EQU   7                                                   HWRE
R8       EQU   8
R9       EQU   9                                                   HWRE
R10      EQU   10
R11      EQU   11
R        EQU   14
L        EQU   15
         SPACE 3
*  BRANCHING CONDITIONS
HIEQ     EQU   10
ALWAYS   EQU   15
         SPACE 3
*  MISCELLANEOUS CODES
ON       EQU   X'FF'
OFF      EQU   X'00'
HALF     EQU   X'0F'
INIT     EQU   X'00'
FMTOUT   EQU   X'FF'
RITE     EQU   X'02'
NULL     EQU   X'00'
ANYILC   EQU   X'C0'                                               HWRE
OVERFL   EQU   X'F0'
UNDERFL  EQU   X'0F'
OVFL     EQU   B'00100000'
UNFL     EQU   B'00010000'
          AIF   (&ERR EQ 1).FIN23
DVD      EQU   B'01000100'
          AGO   .FIN24
.FIN23    ANOP
DVD       EQU   B'01000000'                                      A41074
DVD2      EQU   B'00000001'                                      A41074
DVD3      EQU   B'00000100'                                      A41074
.FIN24    ANOP
P        EQU   C'P'
I        EQU   C'I'
M        EQU   C'M'
         EJECT
*
* ARITHMETIC PROGRAM INTERRUPT
*
*
*    THE BOUNDARY ALIGNMENT MODULE IHCADJST IS DEPENDENT ON THE
*    FOLLOWING CONDITIONS IN THE ROUTINE ARITH-
*      1. ARITH USES REGISTER 15 AS A BASE REGISTER
*
*
         USING     *,L
ARITH#   EQU   *
         AIF   (&ERR EQ 1).FIN1
         MVI   OPSW+27,C'P'            INITIALIZE MESSAGE
.FIN1    ANOP
         ST    14,SPVRRET
         ST     1,PIEADR
         STM   3,13,SAVERR+12  SAVE REGS PASSED TRANSPARANTLY      HWRE
         MVC   SAVERR(12),20(1)   AND VIA PIE FOR USE BY IHCADJUST HWRE
         MVC   SAVERR+56(8),12(1)   AND FOR ANALYSIS OF EXECUTE    HWRE
*                                 INSTR BY HARDWARE FIXUP RTN
         L     R8,VIBCOM
         LR    R9,1          SAVE ADDRESS OF PIE                   HWRE
         LH        SPILL,6(0,1)        GET INTERRUPTION CODE
         TM    8(1),ANYILC    IS INTERRUPTION IMPRECISE            MU91
         BZ    IMPR           GO TO IMPRECISE INTERRUPT ANALYZER   MU91
         SPACE 3
         SH    SPILL,SIX                                           BNDR
         SLA       SPILL,2             POSITION TO WORD BOUNDARY
         BZ    LDADC              BRANCH ON SPEC INT TO AVOID      4648X
                                       IGNORE SWITCH TEST
         CH        SPILL,MOST
         BC        HIEQ,RETURN         BRANCH IF NOT IN TABLE
         L     R10,VINTSW
         TM    0(10),ON           ARE INTERRUPTS TO BE IGNORED     HWRE
         BO    FIX                BRANCH IF IGNORE SWITCH ON       HWRE
LDADC    EQU   *                                                   4648
         BC        ALWAYS,TRAPS(SPILL) BRANCH TO APPROPRIATE ROUTINE
*
TRAPS    DS        0F
         BC    ALWAYS,SPEC             SPECIFICATION               BNDR
         BC    ALWAYS,RETURN           DATA                        BNDR
         BC        ALWAYS,FXOVF        FIXED-POINT OVERFLOW
         BC        ALWAYS,FXDVC        FIXED-POINT DIVIDE
         BC        ALWAYS,DCOVF        DECIMAL OVERFLOW
         BC        ALWAYS,DCDVC        DECIMAL DIVIDE
         BC        ALWAYS,FPOVF        EXPONENT OVERFLOW
         BC        ALWAYS,FPUNF        EXPONENT UNDERFLOW
         BC        ALWAYS,FPSIG        SIGNIFICANCE
         BC        ALWAYS,FPDVC        FLOATING-POINT DIVIDE
MOST     DC        AL2(*-TRAPS)
*
FPOVF    MVI   72(R8),ON     SET O/U INDICATOR                     HWRE
         OI    122(R8),OVERFL
         AIF   (&ERR EQ 0).FIN2
         MVI   ERRORNO+3,207           SET ERROR NUMBER IN PARAMETER
*                                      LIST FOR ERROR MONITOR
         MVI   MSGB+5,C'7'             PUT NUMBER INTO MESSAGE
         MVC   MSGM1(12),OVERFLOW      PUT OVERFLOW AS CAUSE OF INT.
.FIN2    ANOP
         B     FIX
*
FPUNF    MVI   72(R8),HALF                                         HWRE
         AIF   (&ERR EQ 0).FIN3
         MVI   ERRORNO+3,208           SER ERROR NUMBER IN PARAMETER
*                                      LIST FOR ERROR MONITOR
         MVI   MSGB+5,C'8'             MOVE ERROR NO. TO MESSAGE
         MVC   MSGM1(12),UNDRFLOW      PUT UNDERFLOW AS CAUSE OF INT.
.FIN3    ANOP
         OI    122(R8),UNDERFL
         B     FIX
*
DVCHK    MVI   73(R8),ON     SET DIVIDE CHECK INDICATOR            HWRE
         AIF   (&ERR EQ 0).FIN4
         MVI   ERRORNO+3,209           SER ERROR NUMBER IN PARAMETER
*                                      LIST FOR ERROR MONITOR
         MVI   MSGB+5,C'9'             MOVE ERROR NO. TO MESSAGE
         MVC   MSGM1(12),DIVIDE        PUT DIVIDE CHECK AS CAUSE OF INT
         CLI   7(1),X'0F'              IS THIS A FLOATING POINT DIVIDE
         BNE   DVD1                    NO, DO NOT HANDLEALONG WITH DATA
         B     FIX
DVD1     EQU   *
.FIN4    ANOP
         NI    TEM+3,X'00'                                         HWRE
         AIF   (&ERR EQ 0).FIN27
         TM    DIVSW,ON       IMPRECISE INTERRUPT?               A41074
         BO    FIX            YES - BRANCH TO FIX                A41074
         MVI   MSGB+35,P      INDICATE PRECISE INT IN MSG        A41074
.FIN27   ANOP
         B     ALERT         GO TO WRITE MESSAGE                   HWRE
         SPACE 3
IMPR     L     R10,VINTSW
         TM    0(R10),ON
         BO    RETURN
         AIF   (&ERR EQ 1).FIN5
         MVI   OPSW+27,I
.FIN5    ANOP
         SLL   SPILL,20            POSITION TO DETERMINE WHICH AND HOW X
                                  MANY BITS ARE TURNED ON
         ST    SPILL,TEM
         AIF (&ERR EQ 1).FIN6
BLOOPER  SLL   SPILL,1  MOVE FIRST BIT TO BE TESTED TO SIGN BIT POSIT
         LTR   SPILL,SPILL         IS IT ON
         BH    BLOOPER       IF NO, LOOK AT NEXT BIT
         SLL   SPILL,1        MOVE OUT ON BIT WHICH TERMINATED THE LOOP
         LTR   SPILL,SPILL    IS THERE ANOTHER BIT TURNED ON
         BZ    INTCODE            IF NO, GO TO DETERMINE INTERRUPT     X
                                  FROM TEN BIT FIELD
* MULTIPLE INTERRUPT CONDITION
         AIF   (&ERR EQ 1).FIN7
         MVI   OPSW+27,M      INDICATE MULTIPLE INTERRUPTS IN MESSAGE
*
* IN THE LOW ORDER BYTE OF TEM BIT 0 CORRESPONDS TO BIT 20 OF THE OLD
* PSW
INTCODE  TM    TEM,DVD        IS ONE OR ARE BOTH DIVIDE CHECK BITS ON
         BC    10,UNFTEST    IF NEITHER THEN CHECK FOR UNDERFLOW
         MVI   73(R8),ON      SET DIVIDE CHECK SWITCH ON           MD91
UNFTEST  TM    TEM,UNFL       IS UNDERFLOW BIT ON
         BZ    OVFTEST
         MVI   72(R8),HALF   SET O/U INDICATOR TO UNDERFLOW        MD91
         OI    122(R8),UNDERFL
OVFTEST  TM    TEM,OVFL           IS OVERFLOW BIT ON
         BNO   ALERT
         MVI   72(R8),ON     SET O/U INDICATOR TO OVERFLOW         MD91
         OI    122(R8),OVERFL
         B     ALERT
          AGO   .FIN7
.FIN6     ANOP
          OI    DIVSW,ON      SET SWITCH FOR IMPR INT LOOP       A41074
          TM    TEM,UNFL      UNDERFLOW INTERRUPT?               A41074
          BZ    OVFTEST       NO TEST NEXT INT                   A41074
          BAL   R10,FPUNF     YES-SET UP MESSAGE 208             A41074
          BAL   R10,ALERT     WRITE MESSAGE                      A41074
OVFTEST   TM    TEM,OVFL      OVERFLOW INTERRUPT?                A41074
          BZ    DVTEST        NO - TEST NEXT INT                 A41074
          BAL   R10,FPOVF     YES - SET UP MESSAGE 207           A41074
          BAL   R10,ALERT     WRITE MESSAGE                      A41074
DVTEST    TM    TEM,DVD       FIXED PT DIV INTERRUPT?            A41074
          BZ    DV1TEST       NO - TEST NEXT INT                 A41074
          BAL   R10,DVCHK     YES-SET UP MESSAGE 209             A41074
          BAL   R10,ALERT     WRITE MESSAGE                      A41074
DV1TEST   TM    TEM,DVD2      DEC DIV INTERRUPT?                 A41074
          BZ    DV2TEST       NO - TEST NEXT INT                 A41074
          BAL   R10,DVCHK     YES-SET UP MESSAGE 209             A41074
          BAL   R10,ALERT     GO WRITE MESSAGE                   A41074
DV2TEST   TM    TEM,DVD3      FLTING PT DIV INTERRUPT?           A41074
          BZ    ENDIMP        NO - END IMPR INT TESTING          A41074
          BAL   R10,DVCHK     YES -SET UP MESSAGE 209            A41074
          BAL   R10,ALERT     WRITE MESSAGE                      A41074
ENDIMP    NI    DIVSW,OFF     TURN OFF IMPR SWITCH               A41074
          B     RETURN        RETURN                             A41074
.FIN7     ANOP
*
         SPACE
         SPACE
*
*
*
* HARDWARE CHANGE FIXUP ROUTINE
*
*
          AIF   (&ERR EQ 0).FIN22
FIX       TM    DIVSW,ON      IMPRECISE INTERRUPT?               A41074
          BZ    FIX1          NO-CONTINUE                        A41074
          MVI   MSGB+35,I     INDICATE IMPR IN MSG               A41074
          BR    R10           RETURN TO IMPR LOOP                A41074
FIX1      MVI   MSGB+35,P     INDICATE PRECISE IN MSG            A41074
          CLI   7(1),X'0C'    WAS INTERRUPT OVERFLOW?            A41074
          AGO   .FIN25
.FIN22    ANOP
FIX      CLI   7(1),X'0C'         WAS INTERRUPT OVERFLOW           HWRE
.FIN25    ANOP
         BNE   UNTEST                                              HWRE
         LA    SWT,1          INTERRUPTION WAS OVERFLOW            HWRE
         B     FIND                                                HWRE
UNTEST   LA    SWT,9         UNDERFLOW CODE                        HWRE
FIND     L     ADR,8(0,1)     OBTAIN ADDRESS FROM  OPPSW           HWRE
         OI    TEM+3,X'FF'                                         HWRE
         SR    ORER,ORER
         SR    R11,R11            INDICATOR FOR EXECUTE            HWRE
         LA    DEC,2
         SLR   ADR,DEC        POINT TO 2 BYTE INSTR ADDR           HWRE
         LTR   ADR,ADR        TEST FOR 4 BYTE INSTR
         BNM   SELECT
         SLR   ADR,DEC        POINT TO 4 BYTE INSTR ADDR
SELECT   CLI   0(ADR),X'44'       WAS INSTRUCTION AN EXECUTE       HWRE
         BNE   NOTEX                                               HWRE
         SR    ORER,ORER                                           HWRE
         LA    1,SAVERR
         LH    SPILL,2(0,ADR)
         SRDL  SPILL,16
         IC    SPILL,1(0,ADR)
         SLDL  SPILL,16
         LA    R11,60
         LA    GRY,4095
         NR    GRY,SPILL
         SRL   SPILL,6
         LA    R0,2
EXLOOP   SRL   SPILL,4
         LR    DEC,R11
         NR    DEC,SPILL
         BZ    CLOSER
         EX    0,ACTIONS
CLOSER   BCT   R0,EXLOOP
         SRL   SPILL,4
         LR    ADR,GRY
         LR    DEC,R11
         NR    DEC,SPILL
         BZ    NOMOD
         IC    ORER,3(DEC,1)
NOMOD    IC    R0,1(0,ADR)
         OR    ORER,R0
         SPACE 3
NOTEX    LA    R0,3               INDEX FOR SHORT OPERATION        HWRE
         OI    TEM+2,X'FF'
         TM    0(ADR),X'10'   TEST FOR SHORT OPERATION
         BO    SHORTOP
         NI    TEM+2,X'00'
         LA    R0,7               INDEX FOR LONG OPERATION         HWRE
SHORTOP  LA    GRY,240        GENERAL PURPOSE MASK
         AR    SWT,R0         ADD INDICES TO DETERMINE INSTR TO EX HWRE
         LTR   R11,R11
         BNE   EXSTOR
         IC    ORER,1(0,ADR) OBTAIN R1,X2 OR R1,R2 FIELD OF INSTR  HWRE
EXSTOR   NR    ORER,GRY      ZERO X2 OR R2 FIELD                   HWRE
         EX    ORER,MODIFY   STORE REGISTER CONTENTS FOR MSG       HWRE
         TM    0(10),ON           ARE INTERRUPTS TO BE IGNORED     HWRE
         BO    SKIPIT
         EJECT
*  MESSAGE PRINTOUT ROUTINE
         AIF   (&ERR EQ 1).FIN10
ALERT    LA        GRX,OUTPTR          SELECT SYSTEM OUTPUT DEVICE
         L         1,VFIOCS
         BALR      0,1                 INITIALIZE FILE
         DC        AL1(INIT)
         DC        AL1(FMTOUT)
         NOP   0
         MVC   0(40,GRX),OPSW          SET CONSTANT PART OF MSG    BNDR
         LA    GRY,40(0,GRX)           UPDATE BUFFER POINTER       BNDR
         L     GRX,PIEADR    OBTAIN ADDRESS OF PIE                 HWRE
         LA        GRX,4(0,GRX)        POINT TO OPSW IN PIE
         L         1,VADCON
         L         1,92(0,1)
         BALR      0,1                 CONVERT PSW TO HEX
         DC        AL1(8)
         DC        AL1(20)
         LA    GRX,60                  GET NUMBER OF BYTES OUTPUT
         CLI   TEM+3,X'FF'
         BNE   MSGWRT
         MVC   30(18,GRY),REGMSG
         LA    GRY,48(0,GRY)
         LA    GRX,REGHOLD
         L     1,VADCON
         L     1,92(0,1)
         BALR  0,1
         DC    AL1(8)
         DC    AL1(20)
         LA    GRX,108
         CLI   TEM+2,X'FF'
         BNE   MSGWRT
         MVC   12(8,GRY),20(GRY)  SHORT OP BLANK 2D HALF OF REG    HWRE
MSGWRT   L     1,VFIOCS
         BALR      0,1                 WRITE THE MESSAGE
         DC        AL1(RITE)
         DC        AL1(NULL)
         NOP   0
         AGO   .FIN9
.FIN10   ANOP
ALERT    L     GRX,VIBCOM              GET ADDR OF IBCOM
         LA    13,IBCSV(0,GRX)
         L     GRY,SAVERR+52           GET USER'S SAVE AREA
         L     GRY,4(0,GRY)            GET PREVIOUS SAVE AREA SINCE
*                                      THIS ONE WAS NOT USED
         ST    GRY,4(0,13)             STORE AS PREVIOUS SAVE AREA
         L     SPILL,VADCON
         L     1,92(0,SPILL)
         LA    GRY,MSGM2               POINT TO AREA TO BE CONVERTED TO
         L     GRX,PIEADR
         LA    GRX,4(0,GRX)            POINT TO AREA TO CONVERT FROM
         BALR  0,1                     GO TO CONVERT
         DC    AL1(8)
         DC    AL1(18)
         L     1,92(0,SPILL)
         LA    GRY,MSGM4
         LA    GRX,REGHOLD
         BALR  0,1
         DC    AL1(8)
         DC    AL1(18)
         LA    1,PARAMS                GET ADDRESS OF PARAMETER LIST
*                                      FOR THE ERROR MONITOR
         MVC   EXP+3(1),REGHOLD        MOVE EXPONENT TO PARAMETER LIST
         NI    EXP+3,X'7F'             TURN OFF NEGATIVE INDICATOR
         LR    SPILL,L
         LR    R0,R
         DROP  L
         USING ARITH#,SPILL
         CLI   TEM+3,X'FF'             IS DATA IN ERROR TO BE PASSED
         BE    ERMONCL                 YES GO TO CALL ERROR MONITOR
         LA    15,MSGSHORT             GET LENGTH OF MESSAGE
         ST    15,MSG                  STORE AS MESSAGE LENGTH
         MVI   PARAMS+8,X'80'          SET LAST PARAMETER INDICATOR
         L     15,VIHCERRM             GET ADDRESS OF ERROR MONITOR
         BALR  14,15                   LINK TO THE ERROR MONITOR
         MVI   PARAMS+8,X'00'          RESET LAST PARAMETER INDICATOR
         LA    15,MSGLNG               GET LENGTH OF REGULAR MESSAGE
         ST    15,MSG                  RESET MESSAGE LENGTH
         MVI   MSGB+4,C'0'             RESET MESSAGE TO 0 IN POSITION 4
         B     COMMON
ERMONCL  L     15,VIHCERRM             GET ADDRESS OF ERROR MONITOR
         BALR  14,15                   LINK TO THE ERROR MONITOR
COMMON   EQU   *
         LR    L,SPILL
         LR    R,R0
         DROP  SPILL
         USING ARITH#,L
          TM    DIVSW,ON      IMPRECISE INTERRUPT?               A41074
          BZ    SKIPIT        YES-CONTINUE CHECKING FOR TYPE     A41074
          BR    R10           RETURN TO IMPR LOOP                A41074
.FIN9    ANOP
         EJECT
SKIPIT   EQU   *
         CLI   TEM+3,X'FF'   OVERFLOW OR UNDERFLOW                 HWRE
         BNE   RETURN        IF NO SKIP FIXUP                      HWRE
         AIF   (&ERR EQ 0).FIN11
         CLI   RETCD+3,1               DID USER FIX UP HIS OWN DATA
         BNE   SETRG                   NO, GO TO GIVE STANDARD FIXUP
         STC   SWT,TEM                 SET UP SO THAT WE CAN DETERMINE
         NI    TEM,X'07'               WHETHER IT IS A 4 OR 8 BYTE
         IC    SWT,TEM                 DATA ITEM
         EX    ORER,MODIFY2(SWT)       EXECUTE A LD OR A LE
         TM    0(ADR),X'0A'            IS THIS AN ADD OR SUBTRACT
         BNO   RETURN                  NO, RETURN
         NI    8(R9),X'CF'             SET CONDITION CODE TO ZERO
         TM    REGHOLD,X'80'           IS NUMBER NEGATIVE
         BZ    POS                     NO THEN GO TEST IF IT IS ZERO
         OI    8(R9),X'10'             SET CONDITION CODE TO NEG.
         B     RETURN
POS      LR    SPILL,ORER              SET REGISTER INTO ANOTHER IN
         SRL   SPILL,4                 ORDER TO SET UP TO EXECUTE AN
         OR    ORER,SPILL              LTER OR AN LTDR
         EX    ORER,LTDER(SWT)         EXECUTE THE LTDR OR LTER
         BZ    RETURN                  IF NUMBER IS ZERO RETURN
*                                      SINCE CON. CODE WAS SET UP FOR
*                                      ZERO AS DEFAULT
         OI    8(R9),X'20'             OTHERWISE NUMBER IS POSITIVE
*                                      SO SET CON. CODE TO POSITIVE
         B     RETURN
SETRG    CLI   7(R9),X'0F'             WAS THIS A FLOATING POINT
*                                      DIVIDE CHECK
         BE    RETURN                  YES RETURN(NO STANDARD FIX)
         AGO   .FIN12
.FIN11   ANOP
SETRG    EQU   *
.FIN12   CLI   7(R9),X'0D'             WAS INTERRUPT UNDERFLOW
         BE    EXUN
         EX    ORER,MODIFY(SWT) ZERO OR MAXIMIZE REGISTER          HWRE
EXUN     LR    SPILL,ORER    MANIPULATE TO PLACE R1,R1 IN LOW ORDERHWRE
         SRL   SPILL,4       BYTE OF ORER                          HWRE
         OR    ORER,SPILL                                          HWRE
         CLI   7(R9),X'0D'                                         HWRE
         BNE   TSIGN                                               HWRE
         EX    ORER,MODIFY(SWT) ZERO OR MAXIMIZE REGISTER          HWRE
         TM    0(ADR),X'0A'  ONLY OP CODES ENDING WITH A OR B WILL HWRE
         BNO   TSIGN         GIVE ONES INDICATION AND THE ONLY     HWRE
*                            FLOATING POINT INSTR OF THIS TYPE ARE
*                            ADD AND SUBTRACT NORMALIZED
         NI    8(R9),X'CF'   SET CON CODE TO ZERO FOR UNDERFLOW    HWRE
*                            CAUSED BY ADD OR SUBTRACT
TSIGN    TM    REGHOLD,X'80'  WAS SIGN NEGATIVE                    HWRE
         BZ    RETURN                                              HWRE
         EX    ORER,SETSIGN   MAKE REG                             HWRE
RETURN   LM    3,13,SAVERR+12  RESTORE REGS NOT STORED IN PIE      HWRE
RETURNA  BCR   ALWAYS,R                RETURN                      BNDR
*                                                                  BNDR
*                                                                  BNDR
SPEC     CLI   ADJSW,X'00'                                         BNDR
         BE    LOADADJ                                             BNDR
SPEC2    EQU   *
         AIF   (&ERR EQ 1).FIN14
         MVI   OPSW+27,C'A'            SET BOUND.ADJ.CODE IN MSG
         AGO   .FIN15
.FIN14   ANOP
         MVC   MSGB+4(2),=C'10'
         MVI   ERRORNO+3,210           SET ERROR NO. IN PARAMETER LIST
*                                      FOR ERROR MONITOR
         MVC   MSGM1(12),SPECIF
          MVI   MSGB+35,P     INDICATE PRECISE IN MESSAGE        A41074
.FIN15   ANOP
         NI    TEM+3,X'00'   TURN O/U MSG CONTROL SWITCH OFF     HWRE
         L     2,VFIOCS                LOAD PARAMETERS FOR BOUNDARYBNDR
         LA    1,SPVRRET               ADJUSTMENT                  HWRE
         LM    14,15,ADJADR            ROUTINE                     HWRE
         BR    14                      GO TO BOUND ADJ RTN         BNDR
         DS    0F                                                  BNDR
ADJADR   DS    F                       ENTRY POINT OF BOUND ADJ RTNBNDR
         DC    A(SAVERR)                                           BNDR
SPVRRET  DS    F                  RETURN ADDR(TO SUPERVISOR)       HWRE
         DC    A(ARITH#)                                           HWRE
         DC    H'0'                                                BNDR
         DC    S(ALERT)
PIEADR   DS    F                   ADDR OF PIE                     HWRE
USEROPT  DC    A(IHCUOPT)                                          BNDR
         DC    A(INT6SWCH)                                         4648
ADJSW    DC    X'00'                                               BNDR
ADJSWTCH EQU   ADJSW
LOADADJ  LR    2,15
         LOAD  EP=IHCADJST
         LR    15,2
         MVI   ADJSW,X'01'             SET SW TO AVOID LATER LOADS BNDR
         ST    0,ADJADR                                            BNDR
         B     SPEC2                                               BNDR
MODIFY   STD   0,REGHOLD                                           HWRE
         LE    0,MAX               MAXIMIZE REGISTER               HWRE
         LD    0,MAX                                               HWRE
         SER   0,0                 ZERO REGISTER                   HWRE
SIX      DC    AL2(6)
         SDR   0,0                                                 HWRE
SETSIGN  LNER  0,0                 MAKE REGISTER NEGATIVE          HWRE
         AIF   (&ERR EQ 0).FIN18
MODIFY2  LD    0,REGHOLD
         LE    0,REGHOLD
LTDER    LTDR  0,0
         DC    H'0'
         LTER  0,0
.FIN18   ANOP
ACTIONS  AL    GRY,0(DEC,1)
TEM      DS    F
VIBCOM   DC    AL4(IBCOM#)
VINTSW   DC    A(INTSWTCH)
VFIOCS   DC    AL4(FIOCS#)
VADCON   DC    AL4(ADCON#)
REGHOLD  DS    D
SAVERR   DS    16F
MAX      DC    X'7FFFFFFFFFFFFFFF'       LARGEST NUMBER
OUTPTR   DC    X'04000000'
OPSW     DC        C'0IHC210I PROGRAM'
         AIF   (&ERR EQ 1).FIN16
         DC    C' INTERRUPT( ) OL'                                 BNDR
         DC    C'D PSW IS'                                         BNDR
REGMSG   DC    C'REGISTER CONTAINED'
*
         AGO   .FIN17
.FIN16   ANOP
IBCSV    EQU   X'C4'
VIHCERRM DC    V(IHCERRM)
DIVSW     DC    X'00'         INDICATES IMPRECISE INTERRUPT      A41074
OVERFLOW DC    C'  OVERFLOW  '
UNDRFLOW DC    C' UNDERFLOW  '
DIVIDE   DC    C'DIVIDE CHECK'
SPECIF   DC    C' ALIGNMENT  '
PARAMS   DC    A(MSG)                  ADDRESS OF MESSAGE
         DC    A(RETCD)                ADDRESS OF RETURN CODE FIELD
         DC    A(ERRORNO)              ADDRESS OF ERROR NUMBER
         DC    A(REGHOLD)              ADDRESS OF REGISTER CONTENTS
         DC    XL1'80'
         DC    AL3(EXP)                ADDRESS OF EXPONENT
RETCD    DC    F'0'
EXP      DC    F'0'
ERRORNO  DC    F'0'
MSG      DC    A(MSGE-MSGB)
MSGB      DC    C'IHC20 I IBCOM - PROGRAM INTERRUPT ( ) - '      A41074
MSGM1    DC    C'             OLD PSW IS'
MSGM2    DC    18C' '
MSGM3    DC    C' . REGISTER CONTAINED '
MSGM4    DC    18C' '
MSGE     EQU   *
MSGSHORT EQU   MSGM3-MSGB
MSGLNG   EQU   MSGE-MSGB
.FIN17   ANOP
         SPACE     3
*
FXOVF    EQU       ALERT
FXDVC    EQU       DVCHK
DCOVF    EQU       ALERT
DCDVC    EQU       DVCHK
FPSIG    EQU       ALERT
FPDVC    EQU       DVCHK
*
         MEND
