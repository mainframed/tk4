*        %GOTO XRBBSL;                                               /*
         MACRO
         IEZXRB &DSECT=YES
         AIF   ('&DSECT' EQ 'NO').NODSCT
XRBPRFX  DSECT , -            XRBPTR-12
         AGO   .CONT
.NODSCT  ANOP
         DS    0F -
XRBPRFX  EQU   * -            XRBPTR-12
.CONT    ANOP
         IEZBITS , -          SYMBOLIC BIT DEFINITIONS
         SPACE 1
***********************************************************************
*                                                                     *
*        THIS MACRO MAPS MFT REQUEST BLOCKS                           *
*                                                                     *
*        LPRB - LOADED PROGRAM REQUEST BLOCK                          *
*        LRB  - LOAD REQUEST BLOCK                                    *
*        PRB  - PROGRAM REQUEST BLOCK                                 *
*        IRB  - INTERRUPTION REQUEST BLOCK                            *
*        SIRB - SYSTEM INTERRUPT REQUEST BLOCK                        *
*        SVRB - SUPERVISOR REQUEST BLOCK                              *
*        FRB  - FETCH REQUEST BLOCK                                   *
*                                                                     *
*    RELEASE 21, 6/11/71, LEVEL=1                                     *
***********************************************************************
         SPACE 1
*                             *****************************************
*                             *    PREFIX FOR LPRB (12 BYTES)         *
*                             *               LRB (8 BYTES)           *
*                             *               FRB (8 BYTES)           *
*                             *****************************************
         SPACE 1
XRBQMAJ  DS    A -            LPRB FOR MFT WITH SUBTASKING ONLY -
*                             ADDRESS OF MAJOR RB FOR PROGRAM THAT
*                             CONTAINS THE EMBEDDED ENTRY POINT
*                             ESTABLISHED BY THE IDENTIFY MACRO
*                             INSTRUCTION THAT CREATED THIS LPRB
         SPACE 1
XRBPRFX1 EQU   * -            XRBPTR-8 - PREFIX FOR LRB AND FRB
         SPACE 1
XRBSUC   DS    A -            ADDRESS OF XRBSUC FIELD IN RB FOR PROGRAM
*                             LOADED JUST PRIOR TO PROGRAM REPRESENTED
*                             BY THIS RB
XRBPRE   DS    A -            ADDRESS OF XRBSUC FIELD IN RB FOR PROGRAM
*                             LOADED IMMEDIATELY AFTER PROGRAM
*                             REPRESENTED BY THIS RB
         SPACE 2
         DS    0D -
XRB      EQU   * -            XRBPTR
         SPACE 1
*                             *****************************************
*                             *    BASIC SECTION OF ALL RB'S          *
*                             *****************************************
         SPACE 1
XRBNM    DS    CL8 -          FOR LPRB, LRB, PRB, FRB - PROGRAM NAME.
*                             FOR IRB - FOR TIMER, FIRST BYTE CONTAINS
*                             FLAGS -- FOR ALL OTHER USES, CONTAINS NO
*                             MEANINGFUL INFORMATION.
*                             FOR SIRB - 8-CHARACTER NAME OF ERROR
*                             ROUTINE CURRENTLY OCCUPYING THE 400-BYTE
*                             IOS TRANSIENT AREA
*                             FOR SVRB - TYPE 2 SVC, NO MEANINGFUL
*                             INFORMATION -- TYPE 3 OR 4 SVC, BYTES 0-3
*                             CONTAIN TTRN ADDRESS, ON SVC LIBRARY, OF
*                             LOAD MODULE.  BYTES 4-7 CONTAIN 4-DIGIT
*                             NUMBER OF THE FORM YSSS, WHERE Y IS THE
*                             NUMBER OF CURRENT PHASE OF ROUTINE AND
*                             SSS IS THE SVC NUMBER IN UNPACKED DECIMAL
*                             (SIGNED) FORM
XRBSZ    DS    H -            NUMBER OF CONTIGUOUS DOUBLE WORDS
*                             OCCUPIED BY RB, PROGRAM (IF APPLICABLE),
*                             AND ASSOCIATED SUPERVISOR WORK AREAS.
*                             DOES NOT INCLUDE PROGRAM SIZE IF PROGRAM
*                             EXTENT LIST IS PRESENT
XSTAB    DS    0BL2 -         FLAG BYTES
XSTAB1   DS    BL1 -          FIRST BYTE OF XSTAB
XRBTYPF  EQU   BIT0+BIT1+BIT2+BIT3 - INDICATE TYPE OF RB
XRBPRB   EQU   X'00' -        PRB - PROGRAM WAS NOT LOADED VIA A LOAD
*                             MACRO INSTRUCTION AND DOES NOT HAVE
*                             MINOR ENTRIES IDENTIFIED VIA AN
*                             IDENTIFY MACRO INSTRUCTION
XRBPRB2  EQU   BIT3 -         PRB - PROGRAM WAS NOT LOADED VIA A LOAD
*                             MACRO INSTRUCTION AND DOES HAVE MINOR
*                             ENTRIES IDENTIFIED VIA AN IDENTIFY
*                             MACRO INSTRUCTION
XRBLPRB  EQU   BIT2 -         LPRB - PROGRAM WAS LOADED VIA A LOAD
*                             MACRO INSTRUCTION AND DOES NOT HAVE
*                             MINOR ENTRIES IDENTIFIED VIA AN
*                             IDENTIFY MACRO INSTRUCTION
XRBLPRB2 EQU   BIT2+BIT3 -    LPRB - PROGRAM WAS LOADED VIA A LOAD
*                             MACRO INSTRUCTION AND DOES HAVE MINOR
*                             ENTRIES IDENTIFIED VIA AN IDENTIFY
*                             MACRO INSTRUCTION
XRBIRB   EQU   BIT1 -         IRB
XRBFRB   EQU   BIT1+BIT3 -    FRB
XRBSIRB  EQU   BIT0 -         SIRB
XRBSVRB  EQU   BIT0+BIT1 -    SVRB - PROGRAM IS TYPE 2 SVC ROUTINE OR
*                             TYPE 3 OR 4 SVC ROUTINE THAT HAS NOT YET
*                             BEEN LOADED
XRBSVRB2 EQU   BIT0+BIT1+BIT3 SVRB - PROGRAM IS TYPE 3 OR 4 SVC
*                             ROUTINE THAT HAS BEEN LOADED
XRBLPRB3 EQU   BIT0+BIT1+BIT2 LPRB - THIS BLOCK DESCRIBES A MINOR ENTRY
*                             IDENTIFIED VIA AN IDENTIFY MACRO
*                             INSTRUCTION
XRBLRB   EQU   BIT0+BIT1+BIT2+BIT3 - LRB
XRBSVRES EQU   BIT4 -         THE TYPE 3 OR 4 SVC ROUTINE IS RESIDENT
XRBCKPT  EQU   BIT5 -         A CHECKPOINT MAY BE TAKEN IN A USER EXIT
*                             FROM THIS SVC ROUTINE
XRBHBL   EQU   BIT6 -         FOR LRB, LPRB, PRB - THE PROGRAM WAS
*                             HIERARCHY BLOCK LOADED.  A PROGRAM EXTENT
*                             LIST EXISTS
XRBETXR  EQU   BIT6 -         IRB IS FOR AN ETXR EXIT ROUTINE    ICB299
XRBREFR  EQU   BIT7 -         REFRESHABLE MODULE
XSTAB2   DS    BL1 -          SECOND BYTE OF XSTAB
         SPACE 1
*                             THE FOLLOWING BIT DEFINITIONS ARE FOR
*                             ALL RB'S EXCEPT FRB'S
XRBTCBP  EQU   BIT0 -         XRBLNK FIELD POINTS TO TCB
XRBACTV  EQU   BIT1 -         ACTIVE PROGRAM
XRBRSREG EQU   BIT2 -         REGISTERS 2-14 TO BE RESTORED FROM XRBREG
XRBREUS  EQU   BIT3 -         REENTERABLE OR REUSABLE PROGRAM
XRBIRBBT EQU   BIT4+BIT5 -    2-BIT INDICATOR FIELD
XRBNOIQE EQU   X'00' -        IRB HAS NO INTERRUPT QUEUE ELEMENTS
XRBIQERE EQU   BIT5 -         IRB HAS INTERRUPT QUEUE ELEMENTS WHICH
*                             ARE REQUEST ELEMENTS
XRBDLPRB EQU   BIT4 -         THIS IS A DUMMY LPRB, IN A PARTITION,
*                             FOR A PROGRAM IN REENTERABLE LOAD MODULE
*                             AREA
XRBIQENR EQU   BIT4+BIT5 -    IRB HAS INTERRUPT QUEUE ELEMENTS WHICH
*                             ARE NOT REQUEST ELEMENTS
XRBFRRB  EQU   BIT6 -         RB STORAGE IS TO BE FREED WHEN PROGRAM
*                             RETURNS
XRBWAIT  EQU   BIT7 -         IF ZERO, WAIT ON A SINGLE EVENT OR ON ALL
*                             OF THE SPECIFIED EVENTS.  IF ONE, WAIT ON
*                             LESS THAN THE NUMBER OF SPECIFIED EVENTS.
         SPACE 1
*                             THE FOLLOWING BIT DEFINITIONS ARE FOR
*                             FRB'S ONLY
XRBNRENT EQU   BIT0 -         IF ZERO, MODULE BEING LOADED IS
*                             REENTERABLE.  IF ONE, MODULE BEING LOADED
*                             IS NOT REENTERABLE.
XRBGTMAN EQU   BIT1 -         IF ZERO, FINCH ROUTINE HAS NOT EXECUTED A
*                             GETMAIN MACRO INSTRUCTION.  IF ONE, FINCH
*                             ROUTINE HAS EXECUTED A GETMAIN MACRO
*                             INSTRUCTION.
XRWTL    DS    0A -           FOR FRB ONLY - ADDRESS OF MOST RECENT
*                             WAIT LIST ELEMENT
XRBEP    DS    0A -           ALL RB'S EXCEPT FRB - ENTRY POINT ADDRESS
XRBUSE   DS    FL1 -          ALL RB'S EXCEPT FRB - USE COUNT
XRBEPA   DS    AL3 -          SAME AS XRBEP ABOVE
XLRBEND  DS    0F -           END OF LRB UNLESS EXTENT LIST IS PRESENT
XRBPSW   DS    0CL8 -         ALL RB'S EXCEPT FRB - USER'S OLD PSW
XRREQ    DS    A -            FRB ONLY - ADDRESS OF TCB FOR TASK WHICH
*                             REQUESTED THAT THE MODULE BE LOADED
XRTLPRB  DS    A -            FRB ONLY - ADDRESS OF LPRB BUILT BY FINCH
*                             FOR PROGRAM WHICH HAS BEEN BROUGHT IN BY
*                             A LOAD MACRO INSTRUCTION
XFRBEND  DS    0F -           END OF FRB
XRBQ     DS    A -            FOR IRB, SIRB - ADDRESS OF 12-BYTE OR
*                             16-BYTE REQUEST ELEMENT.
*                             FOR LPRB, PRB - ADDRESS OF LPRB
*                             DESCRIBING AN ENTRY IDENTIFIED VIA THE
*                             IDENTIFY MACRO INSTRUCTION.
*                             FOR SVRB - FOR TYPE 3 OR 4 SVC'S, SIZE OF
*                             PROGRAM IN BYTES.
XRBLNK   DS    0A -           ADDRESS OF PREVIOUS RB FOR TASK.  ADDRESS
*                             OF TCB IF THIS IS FIRST OR ONLY RB ON
*                             QUEUE.
XRBWT    DS    FL1 -          WAIT COUNT
XRBLNKA  DS    AL3 -          SAME AS XRBLNK ABOVE
XPRBEND  DS    0F -           END OF PRB UNLESS EXTENT LIST IS PRESENT
XLPRBEND DS    0F -           END OF LPRB UNLESS EXTENT LIST IS PRESENT
XRBREG   DS    0CL64 -        FOR IRB, SIRB, SVRB - SAVE AREA FOR 16
*                             GENERAL REGISTERS
XRBREG0  DS    F -            SAVE AREA FOR REGISTER 0
XRBREG1  DS    F -            SAVE AREA FOR REGISTER 1
XRBREG2  DS    F -            SAVE AREA FOR REGISTER 2
XRBREG3  DS    F -            SAVE AREA FOR REGISTER 3
XRBREG4  DS    F -            SAVE AREA FOR REGISTER 4
XRBREG5  DS    F -            SAVE AREA FOR REGISTER 5
XRBREG6  DS    F -            SAVE AREA FOR REGISTER 6
XRBREG7  DS    F -            SAVE AREA FOR REGISTER 7
XRBREG8  DS    F -            SAVE AREA FOR REGISTER 8
XRBREG9  DS    F -            SAVE AREA FOR REGISTER 9
XRBREG10 DS    F -            SAVE AREA FOR REGISTER 10
XRBREG11 DS    F -            SAVE AREA FOR REGISTER 11
XRBREG12 DS    F -            SAVE AREA FOR REGISTER 12
XRBREG13 DS    F -            SAVE AREA FOR REGISTER 13
XRBREG14 DS    F -            SAVE AREA FOR REGISTER 14
XRBREG15 DS    F -            SAVE AREA FOR REGISTER 15
XIRBEND  DS    0F -           END OF IRB
XSIRBEND DS    0F -           END OF SIRB
XRBESA   DS    12F -          SVRB - EXTENDED SAVE AREA OF UP TO SIX
*                             DOUBLEWORDS REQUESTED FOR SVC ROUTINE
XSVRBEND DS    0F -           END OF SVRB HAVING FULL EXTENDED SAVE
*                             AREA
         SPACE 2
         AIF   ('&DSECT' EQ 'NO').NODSCT2
XRBPEL   DSECT , -            XRBPLPTR
         AGO   .CONT2
.NODSCT2 ANOP
         DS    0F
XRBPEL   EQU   * -            XRBPLPTR
.CONT2   ANOP
         SPACE 1
*                             *****************************************
*                             *    PROGRAM EXTENT LIST                *
*                             *    FOR LRB, LPRB, PRB                 *
*                             *                                       *
*                             * PRESENT ONLY IF PROGRAM WAS HIERARCHY *
*                             * BLOCK LOADED.  IT IS A CONTINUATION   *
*                             * OF LRB, LPRB OR PRB.                  *
*                             *****************************************
         SPACE 1
XLISTLH0 DS    F -            LENGTH IN BYTES OF PROGRAM EXTENT
*                             CONTAINED IN HIERARCHY 0.  THIS DOES NOT
*                             INCLUDE RB LENGTH.
XLISTLH1 DS    F -            LENGTH IN BYTES OF PROGRAM EXTENT
*                             CONTAINED IN HIERARCHY 1.
XLISTAH0 DS    A -            ADDRESS OF PROGRAM EXTENT CONTAINED IN
*                             HIERARCHY 0.  IT IS NOT RB ADDRESS.
XLISTAH1 DS    A -            ADDRESS OF PROGRAM EXTENT CONTAINED IN
*                             HIERARCHY 1
         MEND  , */
*%XRBBSL  :  ;
*
*DECLARE
*  1 XRBPRFX  BASED(XRBPTR-12),
*
*/* **************************************************************** */
*/*                                                                  */
*/*      THIS MACRO MAPS MFT REQUEST BLOCKS                          */
*/*                                                                  */
*/*      LPRB - LOADED PROGRAM REQUEST BLOCK                         */
*/*      LRB  - LOAD REQUEST BLOCK                                   */
*/*      PRB  - PROGRAM REQUEST BLOCK                                */
*/*      IRB  - INTERRUPTION REQUEST BLOCK                           */
*/*      SIRB - SYSTEM INTERRUPT REQUEST BLOCK                       */
*/*      SVRB - SUPERVISOR REQUEST BLOCK                             */
*/*      FRB  - FETCH REQUEST BLOCK                                  */
*/*                                                                  */
*/*  RELEASE 21, 6/11/71, LEVEL=1                                    */
*/* **************************************************************** */
*
*/*                           ************************************** */
*/*                           *    PREFIX FOR LPRB (12 BYTES)        */
*/*                           *               LRB (8 BYTES)          */
*/*                           *               FRB (8 BYTES)          */
*/*                           ************************************** */
*
*   2 XRBQMAJ     PTR(31);               /* LPRB FOR MFT WITH
*                                           SUBTASKING ONLY -
*                                           ADDRESS OF MAJOR RB FOR
*                                           PROGRAM THAT  CONTAINS
*                                           THE EMBEDDED ENTRY POINT
*                                           ESTABLISHED BY THE
*                                           IDENTIFY MACRO
*                                           INSTRUCTION THAT CREATED
*                                           THIS LPRB                */
*
*DECLARE
*  1 XRBPRFX1 BASED(XRBPTR-8),
*                                        /* PREFIX FOR LRB AND FRB   */
*
*   2 XRBSUC      PTR(31),               /* ADDRESS OF XRBSUC FIELD
*                                           IN RB FOR PROGRAM LOADED
*                                           JUST PRIOR TO PROGRAM
*                                           REPRESENTED  BY THIS RB  */
*   2 XRBPRE      PTR(31);               /* ADDRESS OF XRBSUC FIELD
*                                           IN RB FOR PROGRAM LOADED
*                                           IMMEDIATELY AFTER
*                                           PROGRAM   REPRESENTED BY
*                                           THIS RB                  */
*
*
*DECLARE
*  1 XRB      BASED(XRBPTR)  BDY(DWORD),
*
*/*                           ************************************** */
*/*                           *    BASIC SECTION OF ALL RB'S         */
*/*                           ************************************** */
*
*   2 XRBNM       CHAR(8),               /* FOR LPRB, LRB, PRB, FRB
*                                           - PROGRAM NAME.  FOR IRB
*                                           - FOR TIMER, FIRST BYTE
*                                           CONTAINS  FLAGS -- FOR
*                                           ALL OTHER USES, CONTAINS
*                                           NO  MEANINGFUL
*                                           INFORMATION.  FOR SIRB -
*                                           8-CHARACTER NAME OF
*                                           ERROR   ROUTINE
*                                           CURRENTLY OCCUPYING THE
*                                           400-BYTE  IOS TRANSIENT
*                                           AREA  FOR SVRB - TYPE 2
*                                           SVC, NO MEANINGFUL
*                                           INFORMATION -- TYPE 3 OR
*                                           4 SVC, BYTES 0-3 CONTAIN
*                                           TTRN ADDRESS, ON SVC
*                                           LIBRARY, OF  LOAD
*                                           MODULE.  BYTES 4-7
*                                           CONTAIN 4-DIGIT  NUMBER
*                                           OF THE FORM YSSS, WHERE
*                                           Y IS THE  NUMBER OF
*                                           CURRENT PHASE OF ROUTINE
*                                           AND  SSS IS THE SVC
*                                           NUMBER IN UNPACKED
*                                           DECIMAL (SIGNED) FORM    */
*   2 XRBSZ       FIXED(15),             /* NUMBER OF CONTIGUOUS
*                                           DOUBLE WORDS  OCCUPIED
*                                           BY RB, PROGRAM (IF
*                                           APPLICABLE),  AND
*                                           ASSOCIATED SUPERVISOR
*                                           WORK AREAS.  DOES NOT
*                                           INCLUDE PROGRAM SIZE IF
*                                           PROGRAM  EXTENT LIST IS
*                                           PRESENT                  */
*   2 XSTAB       CHAR(2),               /* FLAG BYTES               */
*    3 XSTAB1      CHAR(1),              /* FIRST BYTE OF XSTAB      */
*     4 XRBTYPF  BIT(4),                 /* INDICATE TYPE OF RB      */
*%DCL XRBPRB   CHAR;
*%XRBPRB  ='''0000''B';                  /* PRB - PROGRAM WAS NOT
*                                           LOADED VIA A LOAD MACRO
*                                           INSTRUCTION AND DOES NOT
*                                           HAVE MINOR ENTRIES
*                                           IDENTIFIED VIA AN
*                                           IDENTIFY MACRO
*                                           INSTRUCTION              */
*%DCL XRBPRB2  CHAR;
*%XRBPRB2 ='''0001''B';                  /* PRB - PROGRAM WAS NOT
*                                           LOADED VIA A LOAD MACRO
*                                           INSTRUCTION AND DOES
*                                           HAVE MINOR ENTRIES
*                                           IDENTIFIED VIA AN
*                                           IDENTIFY MACRO
*                                           INSTRUCTION              */
*%DCL XRBLPRB  CHAR;
*%XRBLPRB ='''0010''B';                  /* LPRB - PROGRAM WAS
*                                           LOADED VIA A LOAD MACRO
*                                           INSTRUCTION AND DOES NOT
*                                           HAVE MINOR ENTRIES
*                                           IDENTIFIED VIA AN
*                                           IDENTIFY MACRO
*                                           INSTRUCTION              */
*%DCL XRBLPRB2 CHAR;
*%XRBLPRB2='''0011''B';                  /* LPRB - PROGRAM WAS
*                                           LOADED VIA A LOAD MACRO
*                                           INSTRUCTION AND DOES
*                                           HAVE MINOR ENTRIES
*                                           IDENTIFIED VIA AN
*                                           IDENTIFY MACRO
*                                           INSTRUCTION              */
*%DCL XRBIRB   CHAR;
*%XRBIRB  ='''0100''B';                  /* IRB                      */
*%DCL XRBFRB   CHAR;
*%XRBFRB  ='''0101''B';                  /* FRB                      */
*%DCL XRBSIRB  CHAR;
*%XRBSIRB ='''1000''B';                  /* SIRB                     */
*%DCL XRBSVRB  CHAR;
*%XRBSVRB ='''1100''B';                  /* SVRB - PROGRAM IS TYPE 2
*                                           SVC ROUTINE OR TYPE 3 OR
*                                           4 SVC ROUTINE THAT HAS
*                                           NOT YET BEEN LOADED      */
*%DCL XRBSVRB2 CHAR;
*%XRBSVRB2='''1101''B';                  /* SVRB - PROGRAM IS TYPE 3
*                                           OR 4 SVC ROUTINE THAT
*                                           HAS BEEN LOADED          */
*%DCL XRBLPRB3 CHAR;
*%XRBLPRB3='''1110''B';                  /* LPRB - THIS BLOCK
*                                           DESCRIBES A MINOR ENTRY
*                                           IDENTIFIED VIA AN
*                                           IDENTIFY MACRO
*                                           INSTRUCTION              */
*%DCL XRBLRB   CHAR;
*%XRBLRB  ='''1111''B';                  /* LRB                      */
*     4 XRBSVRES BIT(1),                 /* THE TYPE 3 OR 4 SVC
*                                           ROUTINE IS RESIDENT      */
*     4 XRBCKPT  BIT(1),                 /* A CHECKPOINT MAY BE
*                                           TAKEN IN A USER EXIT
*                                           FROM THIS SVC ROUTINE    */
*     4 XRBHBL   BIT(1),                 /* FOR LRB, LPRB, PRB - THE
*                                           PROGRAM WAS  HIERARCHY
*                                           BLOCK LOADED. A PROGRAM
*                                           EXTENT LIST EXISTS       */
*      5 XRBETXR  BIT(1),                /* IRB IS FOR ETXR EXIT
*                                           ROUTINE            ICB299*/
*     4 XRBREFR  BIT(1),                 /* REFRESHABLE MODULE       */
*    3 XSTAB2      CHAR(1),              /* SECOND BYTE OF XSTAB     */
*     4 XRBTCBP  BIT(1),                 /* XRBLNK FIELD POINTS TO
*                                           TCB                      */
*      5 XRBNRENT BIT(1),                /* IF ZERO, MODULE BEING
*                                           LOADED IS  REENTERABLE.
*                                           IF ONE, MODULE BEING
*                                           LOADED IS NOT
*                                           REENTERABLE.  (FRB ONLY) */
*     4 XRBACTV  BIT(1),                 /* ACTIVE PROGRAM           */
*      5 XRBGTMAN BIT(1),                /* IF ZERO, FINCH ROUTINE
*                                           HAS NOT EXECUTED A
*                                           GETMAIN MACRO
*                                           INSTRUCTION. IF ONE,
*                                           FINCH ROUTINE HAS
*                                           EXECUTED A GETMAIN MACRO
*                                           INSTRUCTION.  (FRB ONLY) */
*     4 XRBRSREG BIT(1),                 /* REGISTERS 2-14 TO BE
*                                           RESTORED FROM XRBREG     */
*     4 XRBREUS  BIT(1),                 /* REENTERABLE OR REUSABLE
*                                           PROGRAM                  */
*     4 XRBIRBBT BIT(2),                 /* 2-BIT INDICATOR FIELD    */
*%DCL XRBNOIQE CHAR;
*%XRBNOIQE='''00''B';                    /* IRB HAS NO INTERRUPT
*                                           QUEUE ELEMENTS           */
*%DCL XRBIQERE CHAR;
*%XRBIQERE='''01''B';                    /* IRB HAS INTERRUPT QUEUE
*                                           ELEMENTS WHICH ARE
*                                           REQUEST ELEMENTS         */
*%DCL XRBDLPRB CHAR;
*%XRBDLPRB='''10''B';                    /* THIS IS A DUMMY LPRB, IN
*                                           A PARTITION, FOR A
*                                           PROGRAM IN REENTERABLE
*                                           LOAD MODULE AREA.        */
*%DCL XRBIQENR CHAR;
*%XRBIQENR='''11''B';                    /* IRB HAS INTERRUPT QUEUE
*                                           ELEMENTS WHICH ARE NOT
*                                           REQUEST ELEMENTS         */
*     4 XRBFRRB  BIT(1),                 /* RB STORAGE IS TO BE
*                                           FREED WHEN PROGRAM
*                                           RETURNS                  */
*     4 XRBWAIT  BIT(1),                 /* IF ZERO, WAIT ON A
*                                           SINGLE EVENT OR ON ALL
*                                           OF THE SPECIFIED EVENTS.
*                                           IF ONE, WAIT ON LESS
*                                           THAN THE NUMBER OF
*                                           SPECIFIED EVENTS.        */
*   2 XRBWTL      PTR(31),               /* FOR FRB ONLY - ADDRESS
*                                           OF MOST RECENT  WAIT
*                                           LIST ELEMENT             */
*    3 XRBEP       PTR(31),              /* ALL RB'S EXCEPT FRB -
*                                           ENTRY POINT ADDRESS      */
*     4 XRBUSE      PTR(8),              /* ALL RB'S EXCEPT FRB -
*                                           USE COUNT                */
*     4 XRBEPA      PTR(24),             /* SAME AS XRBEP ABOVE      */
*   2 XLRBEND     CHAR(0),               /* END OF LRB UNLESS
*                                           EXTENT LIST IS PRESENT   */
*   2 XRBPSW      CHAR(8)  BDY(DWORD),   /* ALL RB'S EXCEPT FRB -
*                                           USER'S OLD PSW           */
*    3 XRREQ       PTR(31),              /* FRB ONLY - ADDRESS OF
*                                           TCB FOR TASK WHICH
*                                           REQUESTED THAT THE
*                                           MODULE BE LOADED         */
*    3 XRTLPRB     PTR(31),              /* FRB ONLY - ADDRESS OF
*                                           LPRB BUILT BY FINCH FOR
*                                           PROGRAM WHICH HAS BEEN
*                                           BROUGHT IN BY  A LOAD
*                                           MACRO INSTRUCTION        */
*   2 XFRBEND     CHAR(0),               /* END OF FRB               */
*   2 XRBQ        PTR(31),               /* FOR IRB, SIRB - ADDRESS
*                                           OF 12-BYTE OR  16-BYTE
*                                           REQUEST ELEMENT.  FOR
*                                           LPRB, PRB - ADDRESS OF
*                                           LPRB  DESCRIBING AN
*                                           ENTRY IDENTIFIED VIA THE
*                                           IDENTIFY MACRO
*                                           INSTRUCTION.  FOR SVRB -
*                                           FOR TYPE 3 OR 4 SVC'S,
*                                           SIZE OF PROGRAM IN
*                                           BYTES.                   */
*   2 XRBLNK      PTR(31),               /* ADDRESS OF PREVIOUS RB
*                                           FOR TASK. ADDRESS OF TCB
*                                           IF THIS IS FIRST OR ONLY
*                                           RB ON  QUEUE.            */
*    3 XRBWT       PTR(8),               /* WAIT COUNT               */
*    3 XRBLNKA     PTR(24),              /* SAME AS XRBLNK ABOVE     */
*   2 XPRBEND     CHAR(0),               /* END OF PRB UNLESS
*                                           EXTENT LIST IS PRESENT   */
*   2 XLPRBEND    CHAR(0),               /* END OF LPRB UNLESS
*                                           EXTENT LIST IS PRESENT   */
*   2 XRBREG      CHAR(64)  BDY(WORD),   /* FOR IRB, SIRB, SVRB -
*                                           SAVE AREA FOR 16
*                                           GENERAL REGISTERS        */
*    3 XRBREG0     FIXED(31),            /* SAVE AREA FOR REGISTER 0 */
*    3 XRBREG1     FIXED(31),            /* SAVE AREA FOR REGISTER 1 */
*    3 XRBREG2     FIXED(31),            /* SAVE AREA FOR REGISTER 2 */
*    3 XRBREG3     FIXED(31),            /* SAVE AREA FOR REGISTER 3 */
*    3 XRBREG4     FIXED(31),            /* SAVE AREA FOR REGISTER 4 */
*    3 XRBREG5     FIXED(31),            /* SAVE AREA FOR REGISTER 5 */
*    3 XRBREG6     FIXED(31),            /* SAVE AREA FOR REGISTER 6 */
*    3 XRBREG7     FIXED(31),            /* SAVE AREA FOR REGISTER 7 */
*    3 XRBREG8     FIXED(31),            /* SAVE AREA FOR REGISTER 8 */
*    3 XRBREG9     FIXED(31),            /* SAVE AREA FOR REGISTER 9 */
*    3 XRBREG10    FIXED(31),            /* SAVE AREA FOR REGISTER 10*/
*    3 XRBREG11    FIXED(31),            /* SAVE AREA FOR REGISTER 11*/
*    3 XRBREG12    FIXED(31),            /* SAVE AREA FOR REGISTER 12*/
*    3 XRBREG13    FIXED(31),            /* SAVE AREA FOR REGISTER 13*/
*    3 XRBREG14    FIXED(31),            /* SAVE AREA FOR REGISTER 14*/
*    3 XRBREG15    FIXED(31),            /* SAVE AREA FOR REGISTER 15*/
*   2 XIRBEND     CHAR(0),               /* END OF IRB               */
*   2 XSIRBEND    CHAR(0),               /* END OF SIRB              */
*   2 XRBESA   (12) FIXED(31),           /* SVRB - EXTENDED SAVE
*                                           AREA OF UP TO SIX
*                                           DOUBLEWORDS REQUESTED
*                                           FOR SVC ROUTINE          */
*   2 XSVRBEND    CHAR(0);               /* END OF SVRB HAVING FULL
*                                           EXTENDED SAVE AREA       */
*
*
*DECLARE
*  1 XRBPEL   BASED(XRBPLPTR),
*
*/*                           ************************************** */
*/*                           *    PROGRAM EXTENT LIST               */
*/*                           *    FOR LRB, LPRB, PRB                */
*/*                           *                                      */
*/*                           * PRESENT ONLY IF PROGRAM WAS HIERARCHY*/
*/*                           * BLOCK LOADED.  IT IS A CONTINUATION  */
*/*                           * OF LRB, LPRB OR PRB.                 */
*/*                           ************************************** */
*
*   2 XLISTLH0    FIXED(31),             /* LENGTH IN BYTES OF
*                                           PROGRAM EXTENT
*                                           CONTAINED IN HIERARCHY
*                                           0.  THIS DOES NOT
*                                           INCLUDE RB LENGTH.       */
*   2 XLISTLH1    FIXED(31),             /* LENGTH IN BYTES OF
*                                           PROGRAM EXTENT
*                                           CONTAINED IN HIERARCHY 1 */
*   2 XLISTAH0    PTR(31),               /* ADDRESS OF PROGRAM
*                                           EXTENT CONTAINED IN
*                                           HIERARCHY 0. IT IS NOT
*                                           RB ADDRESS.              */
*   2 XLISTAH1    PTR(31);               /* ADDRESS OF PROGRAM
*                                           EXTENT CONTAINED IN
*                                           HIERARCHY 1              */
