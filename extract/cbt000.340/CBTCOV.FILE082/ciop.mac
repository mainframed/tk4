         MACRO
         CIOP  &PHASE=,&ENTRY=CBEGIN,&EOFWK=CEOD,&EOFIPT=EOFIPT,       C
               &EOFLIB=EOFLIB,&INPUT=INPUT,&LIST=LIST,&PUNCH=PUNCH,    C
               &NFLIB=NFLIB,&DATE=NODATE,&INREG=3,&OUTREG=4,           C
               &SKIPPH=NOSKP
.*       NOTES ON SKIPPH= PARAM...
.*            A DYNAMIC PHASE BYPASS SCHEME IS PROVIDED TO PERMIT
.*            THOSE PHASES NOT REQUIRED IN A GIVEN COMPILATION TO
.*            BE BYPASSED (I.E., NEVER LOADED).
.*      IN THE PHASE(S) PRECEEDING A BYPASSABLE PHASE, SKIPPH IS...
.*             SKIPPH=(BYPASS-PHASE,LOG-FILE,BIT-NUM,FOLLOWING-PHASE)
.*             * BYPASS-PHASE IS NAME OF BYPASSABLE PHASE(EG,DST)
.*             * LOG-FILE IS 'YES'IF B-C OR C-B FILE COPY IN PHASE.
.*             * BIT-NUM IS NUMBER OF BIT IN UBYPAS ASS'G TO PHASE.
.*               FOLLOWING-PHASE IS FIRST NON-BYPASSABLE PHASE
.*               *-THESE 3 REPEATED IF SEVERAL CONSECUTIVE PHASES
.*                  ARE BYPASSABLE...   E.G...
.*           SKIPPH=(A1,A2,A3,B1,B2,B3,C1,C2,C3,D1)
.*              (A,B,C, BYPASSABLE, D IS NOT).
.*               A BIT OF THE COMMON ARRAY'UBYPAS' IS ASSIGNED TO
.*               THE PHASE TO BE BYPASSED AND AT ANY TIME PRIOR TO
.*               THAT PHASE THAT IT IS DETERMINED THAT THAT PHASE
.*               MAY BE NEEDED, ITS BIT IS SET.  IN THE IMMED. PRECEED-
.*               ING PHASE (AS WELL AS POSSIBLY EARLIER IF SEVERAL
.*               CONSECUTIVE PHASES ARE BYPASSABLE) THE CALL-NEXT-PHASE
.*               OPERATION IN THE 'CEXIT' PART OF ITS CIOP WILL
.*               BE CHANGED TO...
.*     CIBYFT  NEXT=&SKIPPH
.*   NOTE... FIRST BIT (NUM 0) OF UBYPAS RESERVED FOR LOG FILE SW
.*          BUT IS NOT USED IN OS.   LOG FILES ARE SWITCHED BY REVERS-
.*          ING DECB'S IN COMMON.
         LCLA  &SKIPS
         LCLB  &XPH,&TRM
         LCLB  &CSA,&CSB
         LCLC  &D,&CIOP,&NEXT,&SIO,&NPH,&LPH,&FC,&TC
         LCLC  &CSNA,&CSNB
.*(
*2800007300,057600                                                 3782
.*)
&CSNA    SETC  'IEP&PHASE.A'
&CSNB    SETC  'IEP&PHASE.B'
IEP&PHASE.00 CSECT
         AIF   ('&PHASE' NE 'CBL').P1
&NEXT    SETC  '   SYSNN'
&CIOP    SETC  'X       '
&SIO     SETC  '        '
&XPH     SETB  1
         AGO   .P99
.P1      AIF   ('&PHASE'NE 'SYS').P2
&NEXT    SETC  'DPCSETNN'
&CIOP    SETC  'X       '
&SIO     SETC  '        '
&XPH     SETB  1
         AGO   .P99
.P2      AIF   ('&PHASE' NE 'SET').P3
&NEXT    SETC  'DS1    X'
&CIOP    SETC  'X       '
&SIO     SETC  '        '
&XPH     SETB  1
&TRM     SETB  1
CTERMC   EQU   0                   EARLY TERMINATION CODE FOR SET
         AGO   .P99
.P3      AIF   ('&PHASE' NE 'DS1').P4
&NEXT    SETC  'DS2    X'
&CIOP    SETC  '  CN  VC'
&SIO     SETC  'LIO O   '
&TRM     SETB  1
CTERMC   EQU   1                   EARLY TERMINATION CODE FOR DS1
&CSA     SETB  1
         AGO   .P99
.P4      AIF   ('&PHASE' NE 'DS2').P5
&NEXT    SETC  '        '
&CIOP    SETC  '  CN  VC'
&SIO     SETC  'LIO  2  '
&TRM     SETB  1
CTERMC   EQU   2                   EARLY TERMINATION CODE FOR DS2
&CSA     SETB  1
         AGO   .P99
.P5      AIF   ('&PHASE' NE 'DPC').P8
&NEXT    SETC  'ALC    X'
&CIOP    SETC  'AB   CVA'
&SIO     SETC  '    O3  '
&CSA     SETB  1
         AGO   .P99
.P8    AIF   ('&PHASE' NE 'DST').P8ALC
&NEXT  SETC  'ALC    X'
&CIOP  SETC  'AB   CVA'
&SIO   SETC  '    O3  '
&CSA   SETB  1
       AGO   .P99
.P8ALC AIF   ('&PHASE' NE 'ALC').P9
&NEXT    SETC  'BLD    X'
&CIOP    SETC  'A C B RA'
&SIO     SETC  '    O3  '
&TRM     SETB  1
CTERMC   EQU   3                   EARLY TERMINATION CODE FOR ALC
&CSA     SETB  1
         AGO   .P99
.P9      AIF   ('&PHASE' NE 'BLD').P10
&NEXT    SETC  'DMG    X'
&CIOP    SETC  'N  A CN '
&SIO     SETC  '    O5  '
&CSA     SETB  1
         AGO   .P99
.P10     AIF   ('&PHASE' NE 'DMG').P11
&NEXT    SETC  'LIT    X'
&CIOP    SETC  '  CA  RC'
&SIO     SETC  '    O4  '
&FC      SETC  'A'
&TC      SETC  'A'
         AGO   .P99
.P11     AIF   ('&PHASE' NE 'LIT').P12
&NEXT    SETC  'IOT    X'
&CIOP    SETC  '  CA  RC'
&SIO     SETC  '     3  '
&CSA     SETB  1
         AGO   .P99
.P12     AIF   ('&PHASE' NE 'IOT').P13
&NEXT    SETC  'SIS    X'
&CIOP    SETC  'A    CRA'
&SIO     SETC  '    O1  '
&CSA     SETB  1
&CSB     SETB  1
         AGO   .P99
.P13     AIF   ('&PHASE' NE 'SIS').P14
&NEXT    SETC  'PS1PMGNX'
&CIOP    SETC  'X       '
&SIO     SETC  '        '
&XPH     SETB  1
         AGO   .P99
.P14     AIF   ('&PHASE' NE 'PMG' AND '&PHASE' NE 'SMG').P15
&NEXT    SETC  'LST    X'
&CIOP    SETC  '  CN  RA'
&SIO     SETC  'LIO O6  '
&CSA     SETB  1
         AGO   .P99
.P15     AIF   ('&PHASE' NE 'LST').P16
&NEXT    SETC  '        '
&CIOP    SETC  'X       '
&SIO     SETC  '  O     '
&FC      SETC  'A'
&TC      SETC  'A'
         AGO   .P99
.P16     AIF   ('&PHASE' NE 'PS1').P17
&NEXT    SETC  'PS2     '
&CIOP    SETC  'AB   CN '
&SIO     SETC  '    O   '
&CSA     SETB  1
&CSB     SETB  1
         AGO   .P99
.P17     AIF   ('&PHASE' NE 'PS2').P18
&NEXT    SETC  'PS3     '
&CIOP    SETC  'AB   CN '
&SIO     SETC  '    O3  '
&CSA     SETB  1
&CSB     SETB  1
         AGO   .P99
.P18     AIF   ('&PHASE' NE 'PS3').P19
&NEXT    SETC  'PS4     '
&CIOP    SETC  'AB   CN '
&SIO     SETC  '    O   '
&CSA     SETB  1
&CSB     SETB  1
         AGO   .P99
.P19     AIF   ('&PHASE' NE 'PS4').P19A
&NEXT    SETC  'PG1     '
&CIOP    SETC  'AB   CN '
&SIO     SETC  '    O3  '
&CSA     SETB  1
&CSB     SETB  1
         AGO   .P99
.P19A    AIF   ('&PHASE' NE 'PG1').P20
&NEXT    SETC  'PG2     '
&CIOP    SETC  'A CAB N '
&SIO     SETC  '    O8A '
&TC      SETC  'P'
&CSA     SETB  1
&CSB     SETB  1
         AGO   .P99
.P20     AIF   ('&PHASE' NE 'PG2').P21
&NEXT    SETC  'PG3     '
&CIOP    SETC  'A CAB N '
&SIO     SETC  '    O8A '
&TC      SETC  'P'
&CSA     SETB  1
         AGO   .P99
.P21     AIF   ('&PHASE' NE 'PG3').P22
&NEXT    SETC  'PG4     '
&CIOP    SETC  'A CAB N '
&SIO     SETC  '    O8A '
&TC      SETC  'P'
&CSA     SETB  1
&CSB     SETB  1
         AGO   .P99
.P22     AIF   ('&PHASE' NE 'PG4').P22A
&NEXT    SETC  'PG5     '
&CIOP    SETC  'A CAB N '
&SIO     SETC  '        '
&CSA     SETB  1
&CSB     SETB  1
         AGO   .P99
.P22A    AIF   ('&PHASE' NE 'PG5').P22B
&NEXT    SETC  'PG6     '
&CIOP    SETC  'A CAB N '
&SIO     SETC  '    O3  '
&CSA     SETB  1
         AGO   .P99
.P22B    AIF   ('&PHASE' NE 'PG6').P22C
&NEXT    SETC  'PG7     '
&CIOP    SETC  'A CAB N '
&SIO     SETC  '    O8A '
&TC      SETC  'P'
&CSA     SETB  1
&CSB     SETB  1
         AGO   .P99
.P22C    AIF   ('&PHASE' NE 'PG7').P22D
&NEXT    SETC  'PGP     '
&CIOP    SETC  'A CAB N '
&SIO     SETC  '    O3  '
&CSA     SETB  1
&CSB     SETB  1
         AGO   .P99
.P22D    AIF   ('&PHASE' NE 'PGP').P22EA
&NEXT    SETC  'PGQ     '
&CIOP    SETC  'A CAB N '
&SIO     SETC  '    O8A '
&TC      SETC  'P'
&CSA     SETB  1
         AGO   .P99
.P22EA   AIF   ('&PHASE' NE 'PGQ').P22EB
&NEXT    SETC  'PG9     '
&CIOP    SETC  'A CAB N '
&SIO     SETC  '    O8A '
&TC      SETC  'P'
&CSA     SETB  1
         AGO   .P99
.P22EB   AIF   ('&PHASE' NE 'PG9').P23
&NEXT    SETC  'ASP    X'
&CIOP    SETC  'A CAB N '
&SIO     SETC  '    O8A '
&TC      SETC  'P'
&CSA     SETB  1
&CSB     SETB  1
         AGO   .P99
.P23     AIF   ('&PHASE' NE 'ASP').P24
&NEXT    SETC  '   AS1NN'
&CIOP    SETC  'X       '
&SIO     SETC  '        '
&XPH     SETB  1
         AGO   .P99
.P24     AIF   ('&PHASE' NE 'AS1').P24A
&NEXT    SETC  'AS2    X'
&CIOP    SETC  '  CA  RC'
&SIO     SETC  '   PO3  '
&TRM     SETB  1
CTERMC   EQU   4
&CSA     SETB  1
         AGO   .P99
.P24A    AIF   ('&PHASE' NE 'AS2').P24B
&NEXT    SETC  'ASA    X'
&CIOP    SETC  'A    CRA'
&SIO     SETC  '   P    '
&TRM     SETB  1
CTERMC   EQU   4
&CSA     SETB  1
         AGO   .P99
.P24B    AIF   ('&PHASE' NE 'ASA').P24BA
&NEXT    SETC  'AS3    X'
&CIOP    SETC  'N  N  N '
&SIO     SETC  '   PO7  '
&TRM     SETB  1
CTERMC   EQU   4
&CSA     SETB  1
         AGO   .P99
.P24BA   AIF   ('&PHASE' NE 'AS3').P24C
&NEXT    SETC  'AS4    X'
&CIOP    SETC  'A    CRA'
&SIO     SETC  '   P    '
&TRM     SETB  1
CTERMC   EQU   4
&CSA     SETB  1
         AGO   .P99
.P24C    AIF   ('&PHASE' NE 'AS4').P24D
&NEXT    SETC  'AS5    X'
&CIOP    SETC  'A    CRA'
&SIO     SETC  '   PO7  '
&CSA     SETB  1
         AGO   .P99
.P24D    AIF   ('&PHASE' NE 'AS5').P25
&NEXT    SETC  'ASW    X'
&SIO     SETC  '   P    '
&TRM     SETB  1
CTERMC   EQU   4
&CSA     SETB  1
         AGO   .P99
.P25     AIF   ('&PHASE' NE 'ASW').P26
&NEXT    SETC  '   AS6NN'
&CIOP    SETC  'X       '
&SIO     SETC  '        '
&XPH     SETB  1
         AGO   .P99
.P26     AIF   ('&PHASE' NE 'AS6').P27
&NEXT    SETC  'PD1    X'
&CIOP    SETC  'A    CN '
&SIO     SETC  '  OPO3  '
&CSA     SETB  1
&FC      SETC  'S'
         AGO   .P99
.P27     AIF   ('&PHASE' NE 'PD1').P27A
&NEXT    SETC  'PD2    X'
&CIOP    SETC  '   A  N '
&SIO     SETC  '    O7  '
&CSA     SETB  1
         AGO   .P99
.P27A    AIF   ('&PHASE' NE 'PD2').P28
&NEXT    SETC  '        '
&CIOP    SETC  'X       '
&SIO     SETC  '  O     '
&CSA     SETB  1
         AGO   .P99
.P28     MEXIT
.P99     ANOP
&SKIPS   SETA  N'&SKIPPH
         AIF   (&SKIPS GT 1).SKIP1
&LPH     SETC  '&NEXT'(1,3)
&NPH     SETC  '&NEXT'(4,3)
.SKIP1 ANOP
CR0      EQU   0                   ***  REGISTER EQUATES FOR CIOP  ***
CR1      EQU   1
CR2      EQU   2
CR3      EQU   3
CR4      EQU   4
CR5      EQU   5
CR6      EQU   6
CR7      EQU   7
CR8      EQU   8
CR9      EQU   9
CR10     EQU   10
CR11     EQU   11
CR12     EQU   12
CR13     EQU   13
CR14     EQU   14
CR15     EQU   15
C0       EQU   0                   ***  REGISTER EQUATES FOR PHASES  **
C1       EQU   1
C2       EQU   2
C3       EQU   13
C4       EQU   14
C5       EQU   15
B1       EQU   5                   BASE REG NO. 1
B2       EQU   6                   BASE REG NO. 2
B3       EQU   7                   BASE REG NO. 3
L1       EQU   8                   LINK REG
P1       EQU   9                   PARM REG
W1       EQU   10
W2       EQU   11
W3       EQU   12
S1       EQU   3                   INPUT REG
S2       EQU   4                   OUTPUT REG
INREG    EQU   &INREG
OUTREG   EQU   &OUTREG
*                 EQUATE INSTRUCTIONS FOR COMMON AREA
*  INSTRUCTION           STOR/ALLOC              DESCRIPTION
UPCRD    EQU   0                   CL80  FIRST CARD OF PROCEDURE DIV.
UPNAM    EQU   80                  D  PROGRAM NAME FROM SOURCE
UBASE    EQU   88                  F  DISPLACEMENT FROM MAP PARM
UERRS    EQU   92                  C   DIAGNOSTIC SEVERITY LEVEL SWITCH
* BIT 0 - D , BIT 1 - E , BIT 2 - C , BIT 3 - W
USUBR    EQU   94                  2D  OBJ. TIME SUBROUTINES CALLED
UIOTB    EQU   112                 INDICATES OBJECT TIME SUBROUTINES
USMTB    EQU   115                 INDICATES OBJECT TIME SUBROUTINES
UTEMB    EQU   118                 INDICATES OBJECT TIME SUBROUTINES
USTBA    EQU   121                 INDICATES OBJECT TIME SUBROUTINES
UATSG    EQU   128                 C    NO. OF SEGMENTS
USGTB    EQU   129                 4C    NOTEWORD OF SEG TABLE
UGTEM    EQU   139                 C  NUMBER OF GENERATED TEMPORARIES
USSEQ    EQU   140                 3H  PREVIOUS SOURCE SEQ. NUMBER
USRCE    EQU   146                 H  COUNT OF SOURCE
URGBL    EQU   148                 3H  REG/BL OF LABEL REC DATA NAME
UBLOC    EQU   154                 H  COUNT OF BASE LOCATORS
UDCBF    EQU   156                 9C  DCB FOR FORMS OFLO NAME
UWORK    EQU   165                 C  SIZE OF WORK AREAS
UATBL    EQU   166                 H  SIZE OF ATTRIBUTE TABLE
UWSIZ    EQU   168                 F  WORKING STORAGE CORE SIZE
UISEQ    EQU   172                 H  INTERNAL SEQUENCE NUMBER
USTBL    EQU   174                 H  SIZE OF SUPP. ATRIB. TABLE
UGNLB    EQU   176                 H  COUNT OF GENERATED LABELS
UAOPT    EQU   178                 H  ACCEPT OPTION USED
UCLOS    EQU   182                 H   1ST B.L. ASSIGNED TO FILE SEC.
UALST    EQU   187                 C  NUMBER OF ALTERNATE STATEMENTS
UWSRG    EQU   191                 C  REG. ASSIGNED TO WORKING STOR.
UBDIS    EQU   192                 3C  ADR. IN BASE/DIS. FORM
UDOPT    EQU   195
UNEXT    EQU   196                 3C  NEXT BASE/DIS IN W.S. (END)
USWCH    EQU   199                 C  SWITCH BYTE
*  0 BIT - TRACE SWITCH                1 BIT - SEGMENTED ATRIB TABLE
*  2 BIT - ALTER SWITCH                3 BIT - PERFORM SWITCH
*  4 BIT - SECTION SWITCH              5 BIT - FLOATING POINT
*  6 BIT - SUBPROGRAM
UHASH    EQU   203                 3C HASH TABLE ADDRESS
ULINK    EQU   209                 C  LAST BASE ASSIGNED TO LINKAGE
UGENL    EQU   210                 H  HIGHEST GENERATED LABEL USED
UNSLA    EQU   228                 H  NUMBER OF SOURCE LABELS
UNEXC    EQU   230                 H  NO. ENTRY PNTS. FOR EXTRN CALL
UNALS    EQU   232                 H  NO. OF ALTERED STATEMENTS
UNCSR    EQU   234                 H  NO. OF SUBROUTINES CALLED
UNLIT    EQU   236                 H  NUMBER OF LITERALS
UNUST    EQU   238                 C  NO. EXITS FOR CHKPT OR LABELS
UCOMA    EQU   239                 C  AREA FOR COMMA
UPOIN    EQU   240                 C  AREA FOR PERIOD
UBYPAS EQU   241         ONE BYTE AREA FOR PHASE BYPASS SCHEME
*                                  BIT 0 = LOG FILE SW
*                                  BIT 1 = DST TO BE CALLED IF ON
CUBYPS EQU   UBYPAS             EQUATE DOS & OS SYMBOLS FOR SYS INDEPCE
UDCBR    EQU   244                 F  ADDR OF DCB FOR RERUN
UBUCK    EQU   248                 F  CTR FOR 01 & 77 IN LINKAGE SEC
USEGS    EQU   293                 X'00'  IF DICTIONARY HAS NOT    000E
*                                         BEEN SEGMENTED           000E
*                                  X'40'  IF DICTIONARY HAS BEEN   000E
*                                         SEGMENTED                000E
UCNTS    EQU   294                 H  COUNT OF SOURCE RECORDS      000E
UCNTD    EQU   296                 H  COUNT OF DATA ITEMS          000E
UCNTP    EQU   298                 H  COUNT OF VERBS IN PROC DIV.  000E
ULNCT    EQU   300                 2H  LINES/PAGE & LINE COUNTER
UCNCD    EQU   304
UXDSP    EQU   X'40'               UCNCD-DISPLAY OBJECT CHECK-1 IS YES
UXFLG    EQU   X'20'               UCNCD-DIAGS, 1 IS NO WARNINGS
UXEDT    EQU   X'10'               UCNCD-PICTURE. 1 FOR INVERTED EDIT
UXBUG    EQU   X'8'                UCNCD-1 FOR DEBUG OPTION
UXPF2    EQU   X'1'                UCNCD- 00 - PFM1 01 - PFM2
UXPF3    EQU   X'2'                UCNCD            10 - PFM3
UCNCE    EQU   305
UXLST    EQU   X'80'               UCNCE- 1 FOR NO SOURCE LIST
UXDEK    EQU   X'40'               UCNCE- 1 FOR NO DECK
UXDMP    EQU   X'20'               UCNCE- 1 FOR NO DMAP
UXPMP    EQU   X'10'               UCNCE- 1 FOR NO PMAP
UXERR    EQU   X'8'                UCNCE- 1 IF NOSPIE              000E
USTSZ    EQU   150                 SEG TABLE SIZE--NOT IN COMM AREA
UCWKA    EQU   400                 POINTERS TO WORK A DECB'S
UCWKB    EQU   408                 POINTERS TO WORK B DECB'S
UCWKC    EQU   416                 POINTERS TO WORK C DECB'S
UCDCBIN  EQU   424                 POINTER TO SYSIN DCB
UCDCBOUT EQU   428                 POINTER TO SYSOUT DCB
UCDCBLIB EQU   432                 POINTER TO SYSLIB DCB
UCDCBA   EQU   436                 POINTER TO SYSUT1 DCB
UCDCBB   EQU   440                 POINTER TO SYSUT2 DCB
UCDCBC   EQU   444                 POINTER TO SYSUT3 DCB
UCDCBPCH EQU   448                 POINTER TO SYSPUNCH DCB
UCTBADR  EQU   452                 ADR OF CORE FROM LATEST GETMAIN
UCTBSZ   EQU   456                 SIZE OF CORE FROM LATEST GETMAIN
UCATAB   EQU   464                 SIZE OF GETMAIN FOR ATRIB. TABLE
UCPSEQ   EQU   464                 3C  SEQ FOR PUNCH, OVERLAY UCATAB
UCDEBUG  EQU   468                 ADR OF DEBUG MODULE, IF CALLED
UCSW     EQU   472                 FRAME SWITCHES
CXIFA    EQU   X'80'               UCSW- 1 IF INVERTED FILE ASSIGNMENTS
UCSTAB   EQU   476
UCMAX    EQU   480
UCREP    EQU   484
UCINVLST EQU   500                 PARAMETERS FOR INVOCATION
*DISPLACEMENTS OF FIELDS IN DCBS
CDEVT    EQU   17                  DCBDEVT
CTAPE    EQU   X'81'               DEVT CODE FOR TAPE FILES
CEODAD   EQU   32                  DCBEODAD
CBLKSI   EQU   62                  DCBBLKSIZE
*DISPLACEMENTS OF FIELDS IN THE EXTENDED DECB           **STORED BY **
CTTP     EQU   4                   TYPE OPERAND         COPEN
CTLT     EQU   6                   LENGTH OPERAND       CPUT
CTDCB    EQU   8                   DCB ADDRESS          CONSTANT
CTAR     EQU   12                  AREA POINTER         BUFFER ASSIGN
CTPT     EQU   20                  POSITION IN BUFFER   CPUT & CGET
CTLX     EQU   24                  LIMIT OF BUFFER      COPEN
CTSZ     EQU   28                  BUFFER SIZE          SET
CTSWCH   EQU   30                  ONE BYTE FOR SWITCHES
CDWRT    EQU   X'80'               ON WHEN BUFFER HAS BEEN WRITTEN ONCE
CET&PHASE   STM   CR14,CR12,12(CR13)
         BALR  B1,0
         AIF   (NOT &XPH).XPH0
         USING *,B1
         ST    CR13,CRSAVE+4       STORE LOCATION OF HIGHER LEVEL S.A.
         LA    CR13,CRSAVE         POINT TO SAVE AREA FOR C.P. USE
         AGO   .XPH1
.XPH0    USING *,B1
         AIF   (NOT &CSA).CSEND
         USING &CSNA,B2
         L     B2,=A(&CSNA)
         AIF   (NOT &CSB).CSEND
         USING &CSNB,B3
         L     B3,=A(&CSNB)
.CSEND   AIF   ('&PHASE'(1,2) NE 'AS').CSEND1
         USING XASTBLOC,B3
.CSEND1  ST    CR13,CRSAVE+4       STORE ADR OF SAVE AREA
         AIF   ('&CIOP'(1,1) EQ 'X').SQO
         MVC   CWKA(24),UCWKA(CR2)  MOVE IN POINTERS TO WK FILE DECB'S
.SQO     ST    CR2,CCOMM           PUT ADR OF COMMON AREA IN LOCAL BKT
         AIF   ('&PHASE' NE 'AS6').NLNCT
         MVC   CLNCT(2),ULNCT(CR2) MOVE IN LINE COUNT BUCKET
         AGO   .XLNCT
.NLNCT   MVC   CLNCT(4),ULNCT(CR2) MOVE IN LINE COUNT & REMAINDER
.XLNCT   L     CR9,UCDEBUG(CR2)    T   LOAD ADR OF DEBUG MODULE
         ST    CR9,CDEBUG          T   STORE FOR LATER USE
         LA    CR13,CRSAVE         T   POINT TO SAVE AREA FOR DEBUG
         LA    CR15,CNAME          T   POINT TO PHASE NAME
         BALR  L1,CR9              T   LINK TO DEBUG ROUTINE FOR ENTRY
         DC    H'1'                T   INDICATES ENTRY
.XPH1    AIF   ('&PHASE' NE 'PD1').PDG1
         BAL   L1,CCLOSE           DO CCLOSE FOR AS2
         DC    X'02040000'
         LM    CR8,CR9,UCWKA(CR2)    POINT TO WKA DECB'S
         LM    CR10,CR11,UCWKC(CR2)    POINT TO WK C DECB'S
         L     CR1,CTAR(CR8)       POINT TO 1ST WKA BUFFER
         C     CR1,CTAR(CR9)       IS IT THE LOWER
         BL    CPDG1               IF YES O.K.
         L     CR1,CTAR(CR9)       ELSE LOAD THE LOWER
CPDG1    LH    CR0,CTSZ(CR8)       LOAD SIZE OF WKA BUFFER
         AR    CR0,CR0             DOUBLE FOR TOTAL TO FREE
         ST    CR0,CWPDG1          STORE FOR LATER USE
         LA    CR13,CRSAVE
*        FREEMAIN  R,LV=(0),A=(1)
         FREEMAIN  R,LV=(0),A=(1)
         L     CR1,CTAR(CR10)      LOAD ADR OF 1ST WKC BUFFER
         L     CR0,CTAR(CR11)      LOAD ADR OF 2ND WKC DECB
         CR    CR1,CR0             IS LOWER OF THE TWO IN CR1
         BL    CPDG2               IF YES O.K.
         LR    CR1,CR0             ELSE GET THE LOWER IN CR1
         L     CR0,CTAR(CR10)      AND HIGHER IN CR0
CPDG2    AH    CR0,CTSZ(CR10)      ADD LENGTH OF WK B BUFFER TO ADR OF
         SH    CR0,CTSZ(CR8)       HIGHER BUFFER, SUBTRACT LENGTH OF
         ST    CR0,CTAR(CR9)       WKA BUFFER TO GIVE ADR OF NEW 2ND
         SH    CR0,CTSZ(CR8)       WKA BUFFER, THEN DUNK AGAIN TO GIVE
         ST    CR0,CTAR(CR8)       ADR OF NEW 1ST WKA BUFFER.  THEN
         ST    CR0,CWPDG1+4        STORE FOR LATER USE
         SR    CR0,CR1             CALC LENGTH OF LEFT OVER TO FREE
         BZ    CPDG3               BRANCH IF NO LEFT OVER
*        FREEMAIN  R,LV=(0),A=(1)
         FREEMAIN  R,LV=(0),A=(1)
CPDG3    EQU   *
.PDG1    AIF   ('&TC' NE 'A').STC
         MVC   CCORAD(4),UCTBADR(CR2)
.STC     AIF   ('&TC' NE 'P').NPT
         LA    CR13,CRSAVE
         GETMAIN  VU,LA=CPTAB,A=CCORAD
         LM    CR11,CR12,CCORAD    LOAD ADR & SIZE OF EXTRA CORE
         LR    CR1,CR11            PREPARE TO FREE LOWER 600 BYTES FOR
         LA    CR0,800             SPACE FOR END OF EXTENT ROUTINES
         AR    CR11,0              BUMP POINTER TO EXTRA CORE
         SR    CR12,0              DUNK SIZE OF EXTRA CORE
         STM   CR11,CR12,CCORAD    STORE ADR AND SIZE OF EXTRA CORE
*        FREEMAIN R,LV=(0),A=(1)   FREE ENOUGH CORE FOR END OF EXTENT
         FREEMAIN R,LV=(0),A=(1)   FREE ENOUGH CORE FOR END OF EXTENT
.NPT     AIF   ('&SIO'(1,4) NE 'LIO ').NIN1
         LM    CR8,CR12,0(CR3)     LOAD POINTERS TO SYS FILE DECB'S
         STM   CR8,CR12,CPCON      STORE IN LOCAL AREAS
         LA    CR1,UPCRD(CR2)      POINT TO CARD AREA IN COMMON
         ST    CR1,&INPUT          STORE ITS ADR AS 1ST BUFFER
         LM    CR15,CR1,UCDCBIN(CR2)   POINT TO SYSIN & SYSLIB DCBS
         AIF   ('&EOFIPT' EQ '').NEFIN
         LA    CR3,&EOFIPT         LOAD ADR OF END OF FILE ROUTINE
         ST    CR3,CSAVE
         MVC   CEODAD+1(3,CR15),CSAVE+1  EOF ADR FOR SYSIN TO SYSIN DCB
.NEFIN   MVC   CEODAD+1(3,CR1),CFECON    EOF ADR FOR SYSLIB TO DCB
         MVC   &LIST.(4),CTAR(CR8)  SET POINTER TO PRINT AREA NO. 1
         LR    CR1,CR10            POINT TO CARD READER DECB
         AIF   ('&PHASE' NE 'DS2').MIX
         MVC   CTAR(4,CR10),20(CR10)  RESET POINTER TO 2ND READ BUFFER
         MVC   CTAR(4,CR11),20(CR11)  RESET LIBRARY BUFFER POINTER
.MIX     LA    CR13,CRSAVE         POINT TO SAVE AREA FOR O/S USE
         BAL   CR14,CWRT           READ FROM STANDARD LINKAGE
         AGO   .RIN
.NIN1    AIF   ('&SIO'(1,4) NE '  O ').NIN2
         LM    CR9,CR10,0(CR3)     LOAD POINTERS TO DECB'S
         STM   CR9,CR10,CPCON      STORE IN LOCAL BUCKETS
         AIF   ('&PHASE' NE 'PD2').FLG1
         MVI   CPCON,X'0'          SET UP FLAG FOR FIRST CHECK
.FLG1    MVC   &LIST.(4),CTAR(CR9)  SET POINTER TO PRINT AREA-1
         AGO   .RIN
.NIN2    AIF   ('&PHASE'(1,2) NE 'AS' OR '&PHASE' EQ 'ASP' OR '&PHASE' C
               EQ 'ASW').RIN
         LM    CR9,CR10,0(CR4)     POINTERS TO PUNCH DECB'S
         STM   CR9,CR10,CCCON      STORE IN LOCAL BUCKETS
         AIF   ('&PHASE' NE 'AS6').RIN
         LM    CR9,CR10,0(CR3)     POINTERS TO PRINT DECB'S
         STM   CR9,CR10,CPCON      STORE IN LOCAL BUCKETS
         BAL   L1,CVC66            GO PRINT FIRST P-MAP HEADER
         DC    AL4(CHEAD1)
         MVI   CXP6+1,C'-'         SET SPACING FOR LINE TWO OF HEAD
         BAL   L1,CVC66            GO PRINT SECOND P-MAP HEADER
         DC    AL4(CHEAD2)
         MVI   CXP6+1,C'0'         SET TRIPLE SPACE BEFORE NEXT LINE
         LH    L1,CLNS
         SH    L1,CON4             DUNK LINE COUNT 4, FOR SPACES
         STH   L1,CLNS
.RIN     AIF   ('&PHASE' NE 'BLD').GCOR1
         LA    CR13,CRSAVE         POINT TO SAVE AREA FOR O/S USE
         MVC   CSAVE+1(3),UHASH(CR2)  GET ADR OF HASH TABLE FROM COMM
         L     CR9,CSAVE
         MVC   CHASH(256),0(CR9)   M
         MVC   CHASH+256(246),256(CR9)
*          ***  ROUTINE TO FREE WKB BUFFERS, RELOCATING WKA BUFFERS ***
         LM    CR8,CR11,UCWKA(CR2)   POINT TO DECB'S FOR WKA AND WKB
         L     CR0,CTAR(CR10)      POINT TO 1ST WKB BUFFER
         C     CR0,CTAR(CR11)      IS IT THE HIGHER OF THE WKB BUFFERS
         BH    CBLD1               IF YES O.K.
         L     CR0,CTAR(CR11)      ELSE LOAD ADR OF HIGHER WKB BUFFER
CBLD1    L     CR1,CTAR(CR8)       LOAD ADR OF OLD WKA BUFFER
         C     CR1,CTAR(CR9)       IS IT THE LOWER OF THE TWO
         BL    CBLD2               IF YES O.K.
         L     CR1,CTAR(CR9)       ELSE LOAD ADR OF LOWER WKA BUFFER
CBLD2    AH    CR0,CTSZ(CR11)      CALC ADR OF HI WKB BUF + ITS LENGTH
         SH    CR0,CTSZ(CR8)       MINUS LENGTH OF WKA BUFFER, TO GIVE
*                                  NEW LOCATION OF 2ND WKA BUFFER.
         ST    CR0,CTAR(CR9)       STORE LOCATION OF NEW WKA BUFFER
         SH    CR0,CTSZ(CR8)       CALC ADR OF NEW 1ST WKA BUFFER
         ST    CR0,CTAR(CR8)       STORE LOCATION OF NEW 1ST WKA BUFFER
         SR    CR0,CR1             CALC LENGTH FOR FREEMAIN
*        FREEMAIN  R,LV=(0),A=(1)
         FREEMAIN  R,LV=(0),A=(1)
         MVC   CSAVE+6(2),UATBL(CR2)  SIZE OF ATRIB. TABLE TO F.W.
         L     CR1,CSAVE+4         LOAD SIZE OF ATRIB. TABLE
         LA    CR1,511(CR1)        CALC UATBL+5+HTBL+4
         C     CR1,CBCOR           IS REQUIREMENT LESS THAN MIN SIZE
         BH    CBLD3               IF NO SKIP
         ST    CR1,CBCOR           EL2E STORE REQUIRMENT AS MIN
CBLD3    ST    CR1,CBCOR+4         STORE REQUIREMENT AS MAXIMUM
*        GETMAIN VU,LA=CBCOR,A=CCORAD
         GETMAIN VU,LA=CBCOR,A=CCORAD
         LM    CR9,CR10,CCORAD     LOAD ADR AND SIZE OF RETURNED CORE
         STM   CR9,CR10,UCTBADR(CR2)  STORE FOR LATER FREEMAIN
         LA    CR8,502             LOAD SIZE OF HTABL
         LA    CR11,0(CR9,CR10)     POINT TO LIMIT OF AREA
         SR    CR11,CR8            POINT TO UPPER 502 BYTES
         MVC   0(256,CR11),CHASH   STORE HASH TABLE FOR DMG
         MVC   256(246,CR11),CHASH+256
         ST    CR11,CSAVE          STORE ADR OF HASH TABLE FOR MOVE
         MVC   UHASH(3,CR2),CSAVE+1  MOVE ADR OF HASH TABLE TO COMM
         LA    CR9,506             LOAD SIZE OF HASH TABLE + PREFIX
         SR    CR10,CR9            REDUCE SIZE OF CORE BY THAT
         ST    CR10,CCORSZ         STORE SIZE OF AVAIL CORE
         LM    CR10,CR11,UCDCBA(CR2) POINT TO DCB'S FOR WKA & WKB
         CLI   CDEVT(CR10),CTAPE   IS WKA ON TAPE
         BNE   *+10                IF NOT LEAVE BLKSIZE FOR DISK
         MVC   CBLKSI(2,CR10),CTAPB ELSE PLUG TAPE FILE BLKSIZE
         CLI   CDEVT(CR11),CTAPE   IS WKB ON TAPE
         BNE   *+10                IF NOT LEAVE DISK BLKSIZE
         MVC   CBLKSI(2,CR11),CTAPB ELSE PLUG BLOCKSIZE FOR TAPE
.GCOR1   AIF   ('&PHASE' NE 'AS1').NFP
         ZAP   UCPSEQ(3,CR2),CONE(1)  INITIALIZE OBJECT DECK SEQ. NO.
*      ***  ROUTINE TO FREE CORE ASSIGNED TO WORK B  ****
         LM    CR8,CR11,CWKB       LOAD POINTERS TO WKB & C DECB'S
         TM    UCSW(CR2),CXIFA     IS WKC CURRENTLY ASSIGNED TO UT3
         BZ    CASF2               IF ZERO IT IS.. SKIP NEXT ROUTINE.
*      ***   TO AVOID FRAGMENTING CORE, IF WK C IS ON SYSUT2 WE FLUSH
*      ***   ITS BUFFERS, FREE THEM, AND ASSIGN THE WK B BUFFERS TO C
         LR    CR1,CR10            POINT TO DECB WITH PARAM REG
         L     CR12,CTAR(CR1)      POINT TO BUFFER
         L     CR14,CTPT(CR1)      LOAD CURRENT POINTER TO BUFFER
         SR    CR14,CR12           CALC CURRENT SIZE OF BUFFER OCCUPIED
         STH   CR14,CTLT(CR1)      STORE LENGTH IN DECB
         STH   CR14,0(CR12)        STORE LENGTH IN BUFFER
         BAL   CR14,CWRT           WRITE BUFFER
         LR    CR1,CR11            POINT TO BUFFER BEING WRITTEN NOW
         C     CR12,CTAR(CR11)    IS THIS THE LOWER WK C BUFFER
         BL    CASF0                IF YES SKIP
         L     CR12,CTAR(CR11)     ELSE POINT TO LOWER
CASF0    TM    CTSWCH(CR1),CDWRT   WAS A WRITE EVER ISSUED ON IT
         BZ    CASF1               IF NO DON'T CHECK IT
         BAL   CR14,CCHK           ELSE ENSURE COMPLETION OF WRITE
CASF1    LR    CR1,CR10            POINT TO OTHER DECB
         BAL   CR14,CCHK           CHECK IT
         MVC   CTAR(4,CR10),CTAR(CR8)  WK B BUFFER ADR TO WK C DECB
         MVC   CTAR(4,CR11),CTAR(CR9)  WK B BUFFER ADR TO WK C DECB
         BAL   L1,COPEN            GO INITIALIZE WK C BUFFER POINTERS
         DC    X'00002000'
         LR    CR1,CR12             POINT TO WK C BUFFER AREA
         B     CASF3
CASF2    L     CR1,CTAR(CR8)       LOAD ADR OF 1ST BUFFER
         C     CR1,CTAR(CR9)       IS IT THE LOWER OF THE TWO
         BL    CASF3               IF YES O.K.
         L     CR1,CTAR(CR9)       ELSE LOAD THE LOWER OF THE TWO
CASF3    LH    CR0,CTSZ(CR9)       LOAD THE LENGTH OF A WK B BUFFER
         AR    CR0,CR0             DOUBLE FOR TOTAL TO BE FREED
*        FREEMAIN  R,LV=(0),A=(1)     FREE CORE USED BY WKB BUFFERS
         FREEMAIN  R,LV=(0),A=(1)     FREE CORE USED BY WKB BUFFERS
*        GETMAIN VU,LA=CPTAB,A=CCORAD
         GETMAIN VU,LA=CPTAB,A=CCORAD
         LM    CR11,CR12,CCORAD    LOAD ADR & SIZE OF EXTRA CORE
         LR    CR1,CR11            PREPARE TO FREE LOWER 600 BYTES FOR
         LA    CR0,4088      SPACE FOR END OF EXTENT ROUTINES     22075
         AR    CR11,0              BUMP POINTER TO EXTRA CORE
         SR    CR12,0              DUNK SIZE OF EXTRA CORE
         STM   CR11,CR12,CCORAD    STORE ADR AND SIZE OF EXTRA CORE
         STM   CR11,CR12,UCTBADR(CR2)  STORE INFO FOR LATER FREEMAIN
*        FREEMAIN R,LV=(0),A=(1)   FREE ENOUGH CORE FOR END OF EXTENT
         FREEMAIN R,LV=(0),A=(1)   FREE ENOUGH CORE FOR END OF EXTENT
.NFP     AIF   ('&PHASE' NE 'PD2').NFP2
         MVC   CPDSW(1),UCNCD(CR2) MOVE FLAGE SWITCH TO LOCAL BUCKET
.NFP2    AIF   ('&PHASE' NE 'PMG' AND '&PHASE' NE 'SMG').GCOR2
         L     CR0,UCATAB(CR2)     SIZE OF ATABL FROM BLD PHASE
         ST    CR0,UCTBSZ(CR2)     STORE SIZE FOR FREEMAIN
*        GETMAIN  R,LV=(0)
         GETMAIN  R,LV=(0)
         ST    CR1,CCORAD
         ST    CR1,UCTBADR(CR2)
.GCOR2   AIF   ('&PHASE'(1,2) NE 'AS' OR '&PHASE' EQ 'AS1' OR '&PHASE' C
               EQ 'ASP' OR '&PHASE' EQ 'ASW').DST1
         MVC   CCORAD(8),UCTBADR(CR2)  GET TABLE CORE ADR & SIZE
       AGO   .SNTA
.DST1  AIF   ('&PHASE' NE 'DST').SNTA
       BAL   L1,COPEN              OPEN A AND B OUTPUT, C INPUT
       DC    X'00201000'           (FILES B AND C HAVE BEEN SWITCHED)
.SNTA    B     &ENTRY
         AIF   (&XPH).XPH2
CNAME    DC    C'&PHASE'           T   NAME OF PHASE
CLNCT    DC    H'60'               LINE COUNT - OVERLAID FROM COMM
CLNS     DC    H'1'
CDEBUG   DC    F'0'                T   ADR OF DEBUG ROUTINE STORED HERE
CCOMM    DC    F'0'                ADR OF COMMON AREA STORED HERE
.XPH2    ANOP
CRSAVE   DC    18F'0'             SAVE AREA FOR CONTROL PROGRAM USE
         AIF   ('&PHASE' NE 'PG4').PG4
ROMAC  SR    C1,C1
       IC    C1,16(S1)                 PLACE DCB POINTER IN C1
       MH    C1,RCH03                  MULTIPLY BY 3
       SH    C1,RCH03                  SUBTRACT 3
       LA    C3,RDCBF(C1)              C3 POINTS TO DCB ADDR
       MVC   DESTFD(3),0(C3)           DCB ADDR TO DESTFD
       MVI   GLX,X'A0'                 ZERO FIRST BYTE
       MVC   GLX+1(2),21(S1)           USER LABEL TO BUCKET
       MVC   SENDFD(3),RSPN1
       MVC   XFIELD(3),RSPN2
       MVC   YFIELD(3),RSPN3
       MVC   AAA(3),RSPN4
       LH    W1,RGENL
       AH    W1,RCH01
       STH   W1,RGENL
       MVC   GL2+1(2),RGENL
         LA    W1,R0538            POINT TO COMMON OVERFLOW STRING
         BAL   L1,INTER2           PUTOUT COMMON INSTRUCTIONS
         TM    0(S1),X'02'         IS CONDITION NOT-OVERFLOW
         BZ    ROMAC1              GO PUTOUT IS-OVERFLOW INSTRUCTIONS
         LA    W1,R0538A           POINT TO NOT-OVERFLOW INSTRUCTIONS
         BAL   L1,INTER2           PUTOUT NOT-OVERFLOW INSTRUCTIONS
         B     RETRN               RETURN TO PHASE
ROMAC1   LH    W1,RGENL            GET LAST LABEL USED
         AH    W1,RCH01            ADD ONE
         STH   W1,RGENL            SAVE IT
         MVC   GL3+1(2),RGENL      PUT IT IN GL3
         LA    W1,R0538B           POINT TO IS-OVERFLOW INSTRUCTIONS
         BAL   L1,INTER2           PUTOUT IS-OVERFLOW INSTRCTIONS
         B     RETRN               RETURN TO PHASE
R0538    DC    AL2(L128-D)         LA   2,DCB
         DC    AL2(L771-D)         L    1,68(2)
         DC    AL2(L772-D)         L    1,12(1)
         DC    AL2(L773-D)         TM   0(1),X'40'
         DC    AL2(L306-D)         BC   1,GL2
         DC    AL2(L791-D)         LA   0,1
         DC    AL2(L636-D)         SVC  1
         DC    AL2(L170-D)         GL2
         DC    AL2(L774-D)         TM   44(2),X'10'
         DC    H'0'                END OF STRING
R0538A   DC    AL2(L775-D)         BC   14,GLX
         DC    AL2(L776-D)         NI   44(2),X'EF'
         DC    H'0'                END OF STRING
R0538B   DC    AL2(L790-D)         BC   14,GL3
         DC    AL2(L776-D)         NI   44(2),X'EF'
         DC    AL2(L792-D)         BC   15,GLX
         DC    AL2(L793-D)         GL3
         DC    H'0'                END OF STRING
.PG4     AIF   ('&PHASE' NE 'PG9').PG9
IPTCALL  DC    AL2(L993-D)         L    0,=V(IHD03300)
         DC    AL2(L996-D)         ST   0,204(3)
         DC    H'0'
DRET     DC    AL2(L463-D)         STM  3,10,324(3)
         DC    AL2(L601-D)
       DC    AL2(L600-D)
       DC    AL2(L536-D)
       DC    AL2(L477-D)
       DC    AL2(L474-D)
       DC    AL2(L521-D)
       DC    H'0'
.PG9     AIF   ('&PHASE' NE 'ALC').ALC
ALC002   DC    0F'0'
HSHTBL DC    16H'0'                      HASH TABLER
       DC    X'0052'                    LOAD ADDRESS OF QUOTE
       DC    34H'0'
       DC    X'0031'                    LOAD ADDRESS OF SPACE
       DC    39H'0'
       DC    X'00C9'                    LOAD ADDRESS OF TALLY
       DC    2H'0'
       DC    X'00B2'             LOAD ADDR OF HIGH-VALUES AND LOW-VALS
       DC    49H'0'
       DC    X'0062'                    LOAD ADDRESS OF QUOTES
       DC    34H'0'
       DC    X'0041'                    LOAD ADDRESS OF SPACES
       DC    29H'0'
       DC    X'0001'                    LOAD ADDRESS OF ZERO
       DC    7H'0'
       DC    X'009E'                    LOAD ADDRESS OF LOW-VALUE
       DC    H'0'
       DC    X'0073'                    LOAD ADDRESS OF HIGH-VALUE
       DC    4H'0'
       DC    X'0010'                    LOAD ADDRESS OF ZEROS
       DC    16H'0'
       DC    X'0020'                    LOAD ADDRESS OF ZEROES
       DC    12H'0'
.ALC     AIF   ('&PHASE' NE 'AS6').SCPR
CCORAD   DC    F'0'                BUCKET FOR EXTRA CORE LOCATION
CCORSZ   DC    F'0'                BUCKET FOR EXTRA CORE SIZE
CHEAD1   DC    42C' '              FIRST HEADING LINE FOR P-MAP
         DC    C'PROCEDURE DIVISION MAP'
         DC    56C' '
CHEAD2   DC    3C'LINE/POS  ADDR    INSTRUCTION        '
         DC    9C' '
.SCPR    AIF   ('&PHASE' NE 'AS4').SCPRX
         DC    0F'0'
ENTRF01  DC    X'D2'               OUTPUT FOR INITIALIZIATION  OS
         DC    AL3(ENTRF06-ENTRF01-4)
         DC    CL8' '
ENTRF011 STM   14,12,12(13)        SAVE
         BALR  3,0
ENTRF02  LR    15,3
         DC    X'5B3F000A'         POINT TO GLOBAL TABLE START
*   THE PRECEDING INSTRUCTION SHOULD BE
*        S     3,ENTRF03-ENTRF02(15)
*   BUT WE WOULD GET AN ALIGNMENT DIAGNOSTIC
         BC    15,ENTRF04-ENTRF02(15)
ENTRF03  DC    AL4(ENTRF02-ENTRF011)  ERT  ENTRF02-STGT HERE
ENTRF04  LA    14,252(3)
         ST    13,256(3)           SAVE OLD SAVE AREA POINTER
ENTRF05  ST    14,8(13)
         LR    13,14               SET UP NEW SAVE AREA POINTER
         LM    3,12,324(3)         INITALIZE REGISTER
         LR    2,1                 SAVE PARAMETER REGISTER
         LA    1,204(3)
         SVC   14
         ST    1,200(3)
         LR    1,2                 RESTORE PARAMETER REGISTER
ENTRF06  STM   14,12,12(13)
ENTRF07  ST    14,8(13)
.SCPRX   AIF   ('&PHASE' NE 'BLD').SSHS
         LTORG
CTAPB    DC    X'7FFF'             MAXIMUM BLOCKSIZE FOR TAPE FILES
CHASH    DC    502X'0'             TEMP STORE AREA FOR HASH TABLE
         DS    2800C PAD FOR GETMAIN, TO MAKE BLD EQ PMG
         EJECT
IEPBLDA  CSECT
         DS    1650C PAD FOR GETMAIN TO MAKE BLD>PMG+SIS           7719
CCORDF   DC    F'1984'     SIZE DIFFERENCE BETWEEN PMG/SMG        22075
CBCOR    DC    F'2506'             SMALLEST SEG. SIZE + HTABL
         DC    F'0'                UATBL + 4 + HTBL
CCORAD   DC    F'0'                ADR OF EXTRA CORE
CCORSZ   DC    F'0'                SIZE OF EXTRA CORE
.SSHS    AIF   ('&PHASE' NE 'PD1').PDG2
CWPDG1   DC    2F'0'               BUCKET FOR INFO TO FREE WKA BUFFERS
.PDG2    AIF   ('&PHASE' NE 'PD2').PDG3
CPDSW    DC    X'0'                UCNCD IS MOVED TO THIS POS.
CPREF    DC    C'IEP'             IDENTIFIER FOR E ON DIAG. NOS.
.PDG3    AIF   ('&TC' EQ '' AND '&PHASE' NE 'AS1' AND '&PHASE' NE      C
               'AS2' AND '&PHASE' NE 'AS3' AND '&PHASE' NE 'AS4').PART2
         AGO   .NOSCORF
.PART2   AIF   ('&PHASE' NE 'AS5' AND '&PHASE'(2,2) NE 'MG' AND        C
               '&PHASE' NE 'ASA').SCORF
.NOSCORF ANOP
CCORAD   DC    F'0'                ADR OF EXTRA CORE
         AIF   ('&PHASE'(1,2) NE 'AS' AND '&TC' NE 'P').SCORF
CCORSZ   DC    F'0'                SIZE OF EXTRA CORE
         AIF   ('&PHASE' NE 'AS1').NOSCRFA                         1939
CPTAB    DC    F'4288'     MINIMUM TABLE SIZE                     22075
         DC    F'131000'     UPPER LIMIT OF TABLE CORE GETMAIN     1939
         AGO   .SCORF                                              1939
.NOSCRFA AIF   ('&TC' NE 'P').SCORF                                1939
CPTAB    DC    F'1000'             MINIMUM TABLE SIZE
         DC    F'64000'            UPPER LIMIT OF TABLE CORE GETMAIN
.SCORF   AIF   (NOT &TRM).SCORP
CTERML   DC    A(CTERMN)           POINTER TO MODULE NAME
         DC    A(0)                NUL POINTER TO DCB
CTERMN   DC    C'IEPTRM00'
CTERM    LA    CR12,CTERMC         LOAD UNIQUE EARLY TERMINATION CODE
         L     CR13,CRSAVE+4       POINT TO HIGHER LEVEL SAVE AREA
         L     CR14,12(CR13)       RESTORE RETURN REGISTER
         LA    CR15,CTERML         POINT TO ADCONS FOR XCTL MACRO
         LM    CR0,CR11,20(CR13)   RESTORE OTHER REGISTERS
         SVC   7                   AND CALL EARLY TERMINATION MODULE
.SCORP   AIF   (&SKIPS GT 1).NTSL  ASSUME BYPASSING PHASES '    '.
         AIF   ('&NEXT'(4,3) EQ '   ').SL
         AIF   ('&NEXT'(8,1) EQ 'N').RL
CLINKS   MVC   CPHLN+3(3),0(CR15)
.RL      ANOP
CLINK    LA    CR15,CPHADR        POINT TO MODULE NAME POINTER
         AIF   (&XPH).XPH3
         LA    CR13,CRSAVE         POINT TO SAVE AREA
         L     CR2,CCOMM           POINT TO COMM AREA FOR NEXT PHASE
.XPH3    AIF   ('&PHASE' EQ 'CBL' OR '&PHASE' EQ 'SYS').NDEX
         L     CR9,UCDEBUG(CR2)    T   LOAD ADR OF DEBUG ROUTINE
         ST    L1,CRSAVE           T   STORE LINK REG
         BALR  L1,CR9              T   GO TO EXIT ROUTINE
         DC    H'2'                T   INDICATES EXIT FROM PHASE
         L     L1,CRSAVE           T   RESTORE LINK REG
.NDEX    SVC   6                   LINK TO NEXT PHASE
         BR    L1
CPHLN    DC    CL8'IEP&NPH.00'
CPHADR   DC    A(CPHLN)
         DC    A(0)
.SL      AIF   ('&NEXT'(1,3) EQ '   ' OR '&NEXT'(8,1) EQ 'X').NTSL
         AIF   ('&NEXT'(8,1) EQ 'N').NTSL
CEXITS   MVC   CPHN01+3(3),0(CR15)
.NTSL    AIF   ('&PHASE' EQ 'CBL').SKY
CEXIT    DC    0H'0'              ROUTINE TO EXIT FROM PHASE
         AIF   ('&PHASE' NE 'BLD').NBLD
         L     CR2,CCOMM           POINT TO COMMON AREA
         MVC   UCATAB(4,CR2),TBSZ  STORE SIZE OF GETMAIN FOR PMG-SMG
.NBLD    AIF   ('&PHASE' NE 'ALC').SHSH
         LM    CR10,CR11,CWKA      POINT TO WKA DECB'S
         L     CR9,CTAR(CR10)      POINT TO BUFFER 1 FOR WKA
         C     CR9,CTAR(CR11)      IS THIS THE LOWER
         BL    COKAY               IF YES BR
         L     CR9,CTAR(CR11)      ELSE LOAD ADR OF LOWER BUFFER
COKAY    MVC   0(256,CR9),0(CR8)   MOVE HASH TABLE TO BUFFER AREA
         MVC   256(246,CR9),256(CR8)
         ST    CR9,CSAVE
         L     CR2,CCOMM           POINT TO COMM AREA
         MVC   UHASH(3,CR2),CSAVE+1    NEW HASH TBL ADR TO COMM BKT
.SHSH    AIF   ('&SIO'(1,4) EQ '    ').REX
         LA    CR13,CRSAVE
         AIF   ('&PHASE'(1,2) EQ 'AS' AND '&PHASE' NE 'AS6').SE2
         L     CR1,CPCON+4         POINT TO LAST DECB WRITTEN
         LTR   CR1,CR1             WAS THIS DECB WRITTEN FROM
         BM    *+8                 IF NOT DONT CHECK IT
         BAL   CR14,CCHK           ASSURE ITS COMPLETION
         AIF   ('&PHASE' NE 'DS1' AND '&PHASE' NE 'DS2').SE1
         L     CR1,CCCON           POINT TO LAST DECB READ FROM
         L     CR3,CTAR(CR1)       POINT TO ITS BUFFER
         BAL   CR14,CCHK           ENSURE ITS COMPLETION
         L     CR2,CCOMM           POINT TO COMM AREA
         MVC   UPCRD(80,CR2),0(CR3)  MOVE EXTRA CARD TO COMM FIELD
.SE1     AIF   ('&PHASE' NE 'AS6').REX
.SE2     L     CR1,CCCON LOAD ADD OF NEXT TO LAST DCB PNCHD FROM  17579
         LTR   CR1,CR1       WAS THIS DECB WRITTEN FROM           17579
         BM    *+8           IF NOT DONT CHECK IT                 17579
         BAL   CR14,CCHK     ELSE CHECK ITS COMPLETION            17579
         L     CR1,CCCON+4 LOAD ADDRESS OF LAST DECB PUNCHED FROM 17579
         LTR   CR1,CR1             WAS THIS DECB WRITTEN FROM
         BM    *+8                 IF NOT DONT CHECK IT
         BAL   CR14,CCHK           ELSE CHECK ITS COMPLETION
.REX     AIF   ('&FC' EQ '').NFC
         LA    CR13,CRSAVE
         L     CR2,CCOMM
         L     CR1,UCTBADR(CR2)
         L     CR0,UCTBSZ(CR2)     LOAD SIZE OF CORE FOR FREEMAIN
*        FREEMAIN  R,LV=(0),A=(1)
         FREEMAIN  R,LV=(0),A=(1)
.FCOR1   AIF   ('&PHASE' NE 'LST').FCOR2
*          ***  ROUTINE TO GET BUFFERS FOR WORK B  ***
         LM    CR3,CR4,UCWKB(CR2)  POINT TO WKB DECB'S
         LH    CR0,CTSZ(CR3)       LOAD LENGTH OF ONE WKB BUFFER
         AR    CR0,CR0             DOUBLE FOR TOTAL NEEDED
*        GETMAIN  R,LV=(0)         GET CORE FOR BUFFERS
         GETMAIN  R,LV=(0)         GET CORE FOR BUFFERS
         ST    CR1,CTAR(CR3)       STORE ADR IN 1ST DECB
         AH    CR1,CTSZ(CR3)       BUMP BY LENGTH FOR ADR OF 2ND BUFFER
         ST    CR1,CTAR(CR4)       STORE ADR IN 2ND DECB
.NFC     AIF   ('&TC' NE 'P').FCOR2
         L     CR0,CCORSZ
         L     CR1,CCORAD
         LA    CR13,CRSAVE
*        FREEMAIN  R,LV=(0),A=(1)
         FREEMAIN  R,LV=(0),A=(1)
.FCOR2   AIF   ('&PHASE' NE 'PD1').FCOR3
         CLI   CL1+3,C'X'          WAS ANY TABLE LOADED
         BE    CPEX1               IF NOT SKIP DELETE MACRO
*        DELETE EPLOC=CL1          DELETE LAST TABLE USED
         DELETE EPLOC=CL1          DELETE LAST TABLE USED
CPEX1    LM    CR0,CR1,CWPDG1      LOAD INFO TO FREE WKA BUFFERS
         LA    CR13,CRSAVE
*        FREEMAIN  R,LV=(0),A=(1)
         FREEMAIN  R,LV=(0),A=(1)
.FCOR3   AIF   ('&NEXT'(1,3) EQ '   ').SX
         LA    CR15,CPHAD1      POINT TO ADDRESS OF NEXT PHASE NAME
         AIF   (&XPH).SYSX
         L     CR2,CCOMM           POINT TO COMMON AREA
         LA    CR13,CRSAVE         T   POINT TO SAVE AREA
.SYSX    L     CR9,UCDEBUG(CR2)    T   POINT TO DEBUG MODULE OR DUMMY
         BALR  L1,CR9              T   GO CHECK EXIT FOR DEBUG
         DC    H'2'                T   INDICATES EXIT
         AIF   (&XPH).XPH4
         MVC   ULNCT(4,CR2),CLNCT  SAVE LINE COUNT BUCKETS
.XPH4    AIF   ('&CIOP'(1,1) EQ 'X').RE
         MVC   UCWKA(24,CR2),CWKX    SAVE CURRENT WK FILE DECB POINTERS
.RE      AIF   ('&PHASE'(1,2) NE 'PS' OR '&PHASE' EQ 'PS4').FCOR4
         CLI   CPHN01+4,C'G'       WAS NEXT PHASE CHANGED TO GENERATOR
         BE    CEXIT1              IF YES DON'T SWITCH WKB AND WKC
.FCOR4   AIF   ('&PHASE'(1,2) NE 'PG' OR '&PHASE'  EQ 'PG9').FCORX
         CLI   CPHN01+3,C'A'       DID CEXITS SPECIFY EXIT TO AS0
         BE    CEXIT1              IF YES DON'T SWITCH WKB AND WKC
.FCORX   AIF   ('&PHASE'(1,2) NE 'PS' AND '&PHASE'(1,2) NE 'PG').FCOR5
         AIF   ('&PHASE' EQ 'PS4' OR '&PHASE' EQ 'PG9').FCOR5
         XI    UCSW(CR2),CXIFA     ADD MOD 2 FOR INVERT. FILE ASSIGN.
         LM    CR8,CR11,UCWKB(CR2)  LOAD WKB & C DECB POINTERS
         STM   CR10,CR11,UCWKB(CR2)  STORE WKC POINTERS IN WKB POSITION
         STM   CR8,CR9,UCWKC(CR2)  AND WKB POINTERS IN WKC POSITION
CEXIT1   EQU   *
.FCOR5 AIF   ('&PHASE' NE 'DST').SKIP4
       BAL   L1,CCLOSE
       DC    X'00020100'
.SKIP4   AIF   (&SKIPS GT 1).SKIP6
&NEXT  SETC  '&LPH'
.SKIP5 ANOP
       CIBYFT  NEXT=&NEXT
         AGO   .EX
.SKIP6   CIBYFT  NEXT=&SKIPPH
         AGO   .EX
.SX      AIF   (&XPH).XPH5
         LA    CR13,CRSAVE         T   POINT TO SAVE AREA
         L     CR9,CDEBUG          T   LOAD ADR OF DEBUG MODULE
         BALR  L1,CR9              T   GO TO DEBUG MODULE OR DUMMY
         DC    H'4'                T   INDICATES RETURN TYPE EXIT
         L     CR2,CCOMM           POINT TO COMM AREA
         MVC   ULNCT(4,CR2),CLNCT    STORE LINE COUNT
.XPH5    L     CR13,CRSAVE+4       RESTORE REG 13
         LM    CR14,CR12,12(CR13)  RESTORE OTHER REGS
         BR    CR14                RETURN TO LOWER PHASE
.EX      AIF   ('&PHASE' NE 'DS1').DS1
CPUTA    DC    0H'0'
CPUTB    DC    0H'0'
         AGO   .SPAB
.DS1     AIF   ('&PHASE' EQ 'PD1').PUTP
         AIF   ('&PHASE' EQ 'ASA').PUTP
         AIF   ('&CIOP'(1,1) EQ 'X').SC
         AIF   ('&CIOP'(1,1) EQ 'N').SAP
         AIF   ('&CIOP'(1,1) EQ ' ').SPA
CPUTA  MVI   CWK+1,CWKA-CWKX       LOCATE FILE A DECB ADCONS
       MVI   CDP,C'A'              T    FLAG FILE A ON I/O  TRACE
         AIF   ('&CIOP'(2,1) NE 'B').SPB
       B     CPUT                       GO TO COMMON PUT ROUTINE
.SPA     AIF   ('&CIOP'(2,1) NE 'B').SPAB
CPUTB  MVI   CWK+1,CWKB-CWKX       LOCATE FILE B DECB ADCONS
       MVI   CDP,C'B'              T    FLAG FILE B ON I/O TRACE
.SPB     AIF   ('&CIOP'(3,1) NE 'C').SPC
       B     CPUT                       GO TO COMMON PUT ROUTINE
.SPAB    AIF   ('&CIOP'(3,1) NE 'C').SPC
CPUTC  MVI   CWK+1,CWKC-CWKX       LOCATE FILE C DECB ADCONS
       MVI   CDP,C'C'              T    FLAG FILE B ON I/O TRACE
.SPC     ANOP
CPUT   STM   CR13,CR3,CSAVE             STORE REGS IN PRIVATE AREA
         MVI   CPD2,C'O'           T   INDICATE OUTPUT RECORD TO TRACE
*                                      *CCLOSE ASSUMES THAT CPUT USES
*                                       ONLY THESE REGS, , IF THIS IS
*                                       CHANGED CCLOSE MUST BE FIXED.
       LR    CR2,OUTREG                 CR2 POINTS TO RECORD
       LH    CR3,CWK                    CR3 + CWKX LOCATES DECB ADCONS
.PUTP    ANOP
CPUT0  L     CR1,CWKX(CR3)             *CR1 POINTS TO DECB OF BUFFER
*                                       WHICH IS BEING FILLED. THIS IS
*                                       THE ENTRY POINT FROM CCLOSE,
*                                       AND ANY CHANGES TO REGISTER
*                                       STATUS AT THIS POINT MUST BE
*                                       MADE IN CCLOSE ALSO.
CPUT1  SR    CR15,CR15
       IC    CR15,3(CR2)                CR15 HAS LENGTH - 4
CPUT2  L     CR14,CTPT(CR1)             CR14 HAS CURRENT POS IN BUFFER
       LA    CR13,4(CR14,CR15)
       C     CR13,CTLX(CR1)             COMP TO LAST POS IN BUFFER + 1
       BH    CPUT3                      IF HI GO WRITE CURRENT CONTENTS
       ST    CR13,CTPT(CR1)             ELSE STORE NEXT POS
       LA    CR15,3(CR15)               CR15 HAS LENGTH OF RECORD - 1
       EX    CR15,CMV                   MOVE RECORD TO BUFFER
         ST    CR14,CDGWK               STORE LOCATION
         BAL   CR14,CDRP2          T   GO TRACE
CPUT5  LM    CR13,CR3,CSAVE            *RESTORE REGS. IN CCLOSE THIS
*                                       INSTRUCTION IS REPLACED BY EXIT
       BR    L1                         AND EXIT
CMV    MVC   0(0,CR14),0(CR2)
CPUT3  L     CR13,CTAR(CR1)             LOAD POINTER TO BUFFER
       SR    CR14,CR13                  CALC ACTUAL LENGTH FOR WRITE
       STH   CR14,CTLT(CR1)             STORE IN LENGTH FIELD OF DECB
       STH   CR14,0(CR13)               AND STORE IN BUFFER
CPUT4  LA    CR13,CRSAVE                POINT CR13 TO PHASE SAVE AREA
       OI    CTSWCH(CR1),CDWRT          INDICATE BUFFER WAS WRITTEN
         BAL   CR14,CWRT           GO TO COMMON WRITE-READ LINKAGE
       LA    CR1,CWKX(CR3)
       LM    CR0,CR1,0(CR1)
*                             AND CR1 HAS ADR OF DECB TO FILL NEXT.
       ST    CR0,CWKX+4(CR3)            SWITCH ADCONS
       ST    CR1,CWKX(CR3)
       TM    CTSWCH(CR1),CDWRT          WAS BUFFER WRITTEN YET
         BZ    CPUT6               IF NOT SKIP PAST CHECK MACRO
         BAL   CR14,CCHK           GO TO COMMON CHECK LINKAGE
CPUT6    L     CR1,CWKX(CR3)
       L     CR14,CTAR(CR1)             CR14 HAS BUFFER ADR
       LA    CR14,4(CR14)               BUMP TO FIRST RECORD POS
       ST    CR14,CTPT(CR1)             STORE IN TABLE
       B     CPUT1
.SAP     AIF   ('&CIOP'(4,1) EQ 'N').SAG
         AIF   ('&CIOP'(4,1) NE 'A').SGA
CGETA  MVI   CWK+1,CWKA-CWKX       LOCATE FILE A DECB ADCONS
       MVI   CDP,C'A'              T    FLAG FILE A ON I/O TRACE
         AIF   ('&CIOP'(5,1) NE 'B').SGB
       B     CGET                       GO TO COMMON GET ROUTINE
.SGA     AIF   ('&CIOP'(5,1) NE 'B').SGAB
CGETB  MVI   CWK+1,CWKB-CWKX       LOCATE FILE B DECB ADCONS
       MVI   CDP,C'B'              T    FLAG FILE B ON I/O TRACE
.SGB     AIF   ('&CIOP'(6,1) NE 'C').SGC
       B     CGET                       GO TO COMMON GET ROUTINE
.SGAB    AIF   ('&CIOP'(6,1) NE 'C').SGC
CGETC  MVI   CWK+1,CWKC-CWKX       LOCATE FILE C DECB ADCONS
       MVI   CDP,C'C'              T    FLAG FILE C ON I/O TRACE
.SGC     ANOP
CGET   STM   CR13,CR3,CSAVE             STORE REGS IN PRIVATE AREA
         MVI   CPD2,C'I'           T   INDICATE INPUT RECORD TO TRACE
       LH    CR3,CWK                    CR3 LOCATES DECB ADCONS
       L     CR1,CWKX(CR3)              CR1 HAS DECB ADR
       L     CR2,CTPT(CR1)              CR2 HAS CURRENT RECORD ADR
       C     CR2,CTLX(CR1)              IS THIS OUT OF BUFFER
       BNL   CGET3                      IF YES GO READ NEW BUFFER
CGET1    CLC   CEOF(8),0(CR2)      IS THIS AN END OF FILE MARKER
         BE    CGETF               IF YES EXIT
       SR    CR15,CR15
       IC    CR15,3(CR2)                CR15 HAS LENGTH - 4
       LA    CR14,4(CR2,CR15)           CR15 HAS NEXT POS IN BUFFER
       ST    CR14,CTPT(CR1)             STORE IN POINTER SAVE AREA
       ST    CR2,CRSAVE                 STORE POINTER TO RECORD
         BAL   CR14,CDRP2          T   GO TRACE
CGET2    LM    CR13,CR3,CSAVE
       L     INREG,CRSAVE               LOAD INREG WITH RECORD LOCATION
       BR    L1
CGET3  LA    CR13,CRSAVE                POINT TO PHASES SAVE AREA
         BAL   CR14,CWRT           GO TO COMMON WRITE-READ LINKAGE
       LA    CR1,CWKX(CR3)
       LM    CR0,CR1,0(CR1)
*                             CR1 HAS ADR OF DECB TO BE DEBLOCKED NEXT
       ST    CR1,CWKX(CR3)              SWITCH ADCONS
       ST    CR0,CWKX+4(CR3)
         BAL   CR14,CCHK           GO TO COMMON CHECK LINKAGE
       L     CR1,CWKX(CR3)              REPOINT CR1 TO DECB OF
*                                       NEXT BUFFER TO BE DEBLOCKED
       L     CR2,CTAR(CR1)              CR2 HAS BUFFER ADR
       LH    CR14,0(CR2)                CR15 HAS LENGTH OF BUFFER
       LA    CR15,0(CR2,CR14)           CR15 HAS END OF BUFFER +1
       ST    CR15,CTLX(CR1)             STORE IN TABLE
CGET4  LA    CR2,4(CR2)                 CR2 HAS ADR OF FIRST RECORD
       B     CGET1
CGETF    LM    CR13,CR3,CSAVE      RESTORE REGS
         B     &EOFWK              BR TO EOF ENTRY POINT
.SAG     ANOP
CDRP2    STM   CR8,CR10,CDRSAV     T   STORE REGS
         L     CR9,CDEBUG          T   LOAD ADR OF DEBUG ROUTINE
         LA    CR10,CDP            T   POINT TO PARM FOR IOTRACE
         LA    CR13,CRSAVE         T   POINT TO SAVE AREA
         BALR  L1,CR9              T   CR2 POINTS TO RECORD
         DC    H'3'                T   INDICATES RECORD TRACE
         LM    CR8,CR10,CDRSAV     T   RESTORE REGS
         BR    CR14                T   RETURN
CDP      DC    C' '                T   NAME OF FILE PUT HERE FOR TRACE
CPD2     DC    C' '                T   I FOR INPUT , O FOR OUTPUT
CDRSAV   DC    3F'0'               T   SAVE AREA FOR IOTRACE
         AIF   ('&SIO'(5,1) NE 'O').SO
*                   OPEN
*
*      CALLING  SEQUENCE ---
*            BAL  L1,COPEN
*             DC  X'T0'       OPTION FOR FILE A
*             DC  X'T0'       OPTION FOR FILE B
*             DC  X'T0'       OPTION FOR FILE C
*
*            T = 1 IF FILE IS TO BE INITIALIZED FOR INPUT
*            T = 2 IF FILE IS TO BE INITIALIZED FOR OUTPUT
*            T = 0 IF FILE IS NOT TO BE USED
*            LOW ORDER FOUR BITS SHOULD BE ZERO - THEY ARE RESERVED FOR
*            LATER USES.
*
*      ACTION ---
*         1. POINTERS TO DECBS  ARE RETRIEVED FROM COMM. REGION
*         2. TYPE CODES IN DECBS  ARE SET TO READ OR WRITE
*         3. POINTER TO CURRENT POS IN BUFFER IS INITIALIZED
*         4. POINTER TO LAST POSITION OF BUFFER+1 IS SET
*         5. BUFFERS ARE FILLED IF INPUT
COPEN    STM   CR12,CR4,CSAVE      STORE REGS IN PRIVATE AREA
       LA    CR4,CWKA                   CR4 POINTS TO FILE A ADCONS
         LA    CR12,3              CR12 COUNTS LOOP ON FILE PARAMS
COPEN1 TM    0(L1),X'30'                IS FILE TO BE USED
       BZ    COPEN4
       LA    CR13,CRSAVE                CR13 POINTS TO PHASE SAVE AREA
       LA    CR3,2                      CR3 COUNTS LOOP ON DECB S
       L     CR1,4(CR4)                 CR1 POINTS TO 2ND DECB FOR FILE
COPEN2 L     CR2,CTAR(CR1)              CR2 HAS ADR OF BUFFER
       LA    CR0,4(CR2)                 BUMP PAST COUNT FLD TO ADR
*                                       OF FIRST RECORD
       ST    CR0,CTPT(CR1)              STORE IN POINTER FIELD
       AH    CR2,CTSZ(CR1)              ADD LENGTH OF BUFFER MINUS 4
*                                       TO GIVE LIMIT OF BUFFER
       ST    CR2,CTLX(CR1)         STORE IN LIMIT FIELD
       NI    CTSWCH(CR1),255-CDWRT      REMOVE FLAG FOR WRITE ON BUF
         MVI   CTTP(CR1),X'0'           WIPE OUT TYPE BYTE
       MVI   CTTP+1(CR1),X'20'          FLAG DECB FOR WRITE. OVERRIDE
*                                       LATER IF SHOULD BE READ
       L     CR1,0(CR4)                 CR1 POINTS TO 1ST DECB OF FILE
       BCT   CR3,COPEN2                 LOOP TO HANDLE 1ST DECB
         AIF   ('&CIOP'(4,1) EQ 'N' AND '&PHASE' NE 'ASA').SOR1
       TM    0(L1),X'10'           IS THE FILE AN INPUT FILE
       BZ    COPEN4                IF NOT, HANDLE NEXT FILE
       LA    CR3,2                      CR3 COUNTS LOOP ON DECBS  AGAIN
COPEN3 MVI   CTTP+1(CR1),X'80'          SET TYPE CODE FOR READ
         MVI   CTTP(CR1),X'80'          SET U FORMAT TYPE CODE
         BAL   CR14,CWRT           GO TO COMMON WRITE-READ LINKAGE
       L     CR1,4(CR4)                 POINT TO 2ND BUFFERS DECB
       BCT   CR3,COPEN3                 LOOP TO FILL 2ND BUFFER
       L     CR1,0(CR4)                 POINT TO DECB FOR 1ST BUFFER
         BAL   CR14,CCHK                GO TO COMMON CHECK ROUTINE
       L     CR1,0(CR4)
       L     CR2,CTAR(CR1)              CR2 HAS ADR OF BUFFER
       AH    CR2,0(CR2)                 ADD ACTUAL LENGTH FROM COUNT
       ST    CR2,CTLX(CR1)         STORE IN LIMIT FIELD
.SOR1    ANOP
COPEN4 LA    CR4,8(CR4)                 POINT TO ADCONS FOR NEXT FILE
       LA    L1,1(L1)                   BUMP POINTER TO PARAMS
         BCT   CR12,COPEN1         LOOP FOR ALL FILE PARAMS
         LM    CR12,CR4,CSAVE      RESTORE REGS FROM PRIVATE AREA
         DC    X'47F80001'         B    1(L1)  AVOID WARNING DIAG.
.SO      AIF   ('&SIO'(6,1) EQ ' ').C999
         AIF   ('&SIO'(6,1) NE '2' AND '&SIO'(6,1) NE '6' AND          C
               '&SIO'(6,1) NE '4').C124
*                       CCLOSE FOR TYPES TWO  AND  FOUR
CCLOSE  STM  CR13,CR4,CSAVE
       LA    CR4,3                     *CR4 COUNTS LOOP-MUST BE REG NOT
*                                      * USED BY CPUT
       LA    CR3,0                     *CR3 INDEXES CWKX- MUST BE SAME
*                                      * REG USED FOR THIS BY CPUT
       MVC   CPUT5(4),CCLBR1           *SET RETURN FROM CPUT BEFORE
*                                      * REGS ARE RESTORED. DONT USE L1
CCLOS1   TM    0(L1),X'2'          IS OUTPUT FILE TO BE CLOSED
         BZ    CCLOS4              IF NO CHECK NEXT PARAMETER
       LA    CR2,CEOF                  *POINT TO EOF RECORD WITH SAME
       B     CPUT0                     *PUT EOF RECORD, USING ENTRY PT
*                                      * AFTER REGS ARE SAVED.
*                                      *ASSUME CR1 GETS DECB ADR IN
*                                      * CPUT ROUTINE.
CCLOS2 L     CR14,CTPT(CR1)             CR14 GETS POINTER TO NEXT POS
       L     CR15,CTAR(CR1)             CR15 GETS BUFFER ADR
       SR    CR14,CR15                  CALC LENGTH OF ACTUAL BUFFER
          STH   CR14,0(CR15)               STORE ACTUAL LENGTH IN BUFFE
         STH   CR14,CTLT(CR1)
*                                      * REG USED FOR POINTER BY CPUT
       LA    CR13,CRSAVE                POINT CR13 TO SAVE AREA
         L     CR2,CWKX+4(CR3)
         TM    CTSWCH(CR2),CDWRT   WAS OTHER BUFFER EVER WRITTEN
         BO    CCLOS2A             IF YES RETURN
       LA    CR15,100              PREPARE TO WRITE EXTRA RECORD
       STH   CR15,CTLT(CR2)          TO POINT TO AND FOR READ-AHEAD
       BAL   CR14,CWRT                  GO TO COMMON ROUTINE TO WRITE
       B     CCLOS2B               GO FINISH BUFFER FLUSHING
CCLOS2A  BAL   CR14,CWRT                GO TO COMMON WRITE ROUTINE
       L     CR1,CWKX+4(CR3)            CR1 HAS ADR OF 2ND DECB
         BAL   CR14,CCHK                GO TO COMMON CHECK ROUTINE
CCLOS2B  L     CR1,CWKX+4(CR3)     CR1 GETS ADR OF 2ND DECB
         BAL   CR14,CWRT                GO TO COMMON WRITE ROUTINE
       L     CR1,CWKX(CR3)              CR1 GETS ADR 1ST DECB
         BAL   CR14,CCHK                GO TO COMMON CHECK ROUTINE
       L     CR1,CWKX+4(CR3)            CR1 GETS ADR 2ND DECB
         BAL   CR14,CCHK                GO TO COMMON CHECK ROUTINE
CCLOS3   LA    CR13,CRSAVE
       L     CR1,CWKX+4(CR3)            CR1 HAS ADR OF DECB
       L     CR1,CTDCB(CR1)             CR1 HAS ADR OF DCB
       LR    CR0,CR1                    CR0 HAS ADR OF DCB
         SH    CR0,CON4            DUNK-NOTEWORD IS IN WORD BEFORE DCB
       POINT  (1),(0)
         B     CCLOS5
CCLOS4 TM    0(L1),X'4'                 IS THIS A TYPE 4 CLOSE
       BO    CCLOS3                     IF YES GO REPOSITION
CCLOS5 LA    CR3,8(CR3)                 BUMP TO INDEX CWKX
       LA    L1,1(L1)                   L1 POINTS TO PARAM FOR NXT FILE
       BCT   CR4,CCLOS1                 LOOP FOR NEXT FILE
       LM    CR13,CR4,CSAVE
         DC    X'47F80001'         B    1(L1)  AVOID WARNING DIAG.
CCLBR1 B     CCLOS2                    *EARLY RETURN FROM CPUT SWITCH
         AGO   .C999
.C124    AIF   ('&SIO'(6,1) NE '3' AND '&SIO'(6,1) NE '7').C14
*                       CCLOSE FOR TYPES ONE,  TWO  AND  FOUR
CCLOSE  STM  CR13,CR4,CSAVE
       LA    CR4,3                     *CR4 COUNTS LOOP-MUST BE REG NOT
*                                      * USED BY CPUT
         SR    CR3,CR3                 *CR3 INDEXES CWKX- MUST BE SAME
*                                      * REG USED FOR THIS BY CPUT
       MVC   CPUT5(4),CCLBR1           *SET RETURN FROM CPUT BEFORE
*                                      * REGS ARE RESTORED. DONT USE L1
CCLOS1   TM    0(L1),X'2'          IS OUTPUT FILE TO BE CLOSED
         BZ    CCLOS5              IF NO CHECK FOR INPUT FILE REPOS.
       LA    CR2,CEOF                  *POINT TO EOF RECORD WITH SAME
       B     CPUT0                     *PUT EOF RECORD, USING ENTRY PT
*                                      * AFTER REGS ARE SAVED.
*                                      *ASSUME CR1 GETS DECB ADR IN
*                                      * CPUT ROUTINE.
CCLOS2 L     CR14,CTPT(CR1)             CR14 GETS POINTER TO NEXT POS
       L     CR15,CTAR(CR1)             CR15 GETS BUFFER ADR
       SR    CR14,CR15                  CALC LENGTH OF ACTUAL BUFFER
          STH   CR14,0(CR15)               STORE ACTUAL LENGTH IN BUFFE
         STH   CR14,CTLT(CR1)
*                                      * REG USED FOR POINTER BY CPUT
       LA    CR13,CRSAVE                POINT CR13 TO SAVE AREA
         L     CR2,CWKX+4(CR3)     CR2 POINTS TO OTHER DECB
         TM    CTSWCH(CR2),CDWRT   WAS OTHER BUFFER WRITTEN
         BO    CCLOS2A             IF YES BR
         LA    CR15,100            ELSE PREPARE DUMMY RECORD
         STH   CR15,CTLT(CR2)        FOR READ AHEAD
         BAL   CR14,CWRT           GO TO COMMON WRITE ROUTINE
         B     CCLOS2B             SKIP OVER CHECK ON OTHER BUFFER
CCLOS2A  BAL   CR14,CWRT                GO TO COMMON WRITE ROUTINE
       L     CR1,CWKX+4(CR3)            CR1 HAS ADR OF 2ND DECB
         BAL   CR14,CCHK                GO TO COMMON CHECK ROUTINE
CCLOS2B  L   CR1,CWKX+4(CR3)            CR1 GETS ADR OF 2ND DECB
         BAL   CR14,CWRT                GO TO COMMON WRITE ROUTINE
       L     CR1,CWKX(CR3)              CR1 GETS ADR 1ST DECB
         BAL   CR14,CCHK                GO TO COMMON CHECK ROUTINE
       L     CR1,CWKX+4(CR3)            CR1 GETS ADR 2ND DECB
         BAL   CR14,CCHK                GO TO COMMON CHECK ROUTINE
CCLOS3  L    CR1,CWKX+4(CR3)            CR1 HAS ADR OF DECB
       L     CR1,CTDCB(CR1)             CR1 HAS ADR OF DCB
       LR    CR0,CR1                    CR0 HAS ADR OF DCB
         SH    CR0,CON4            DUNK-NOTEWORD IS IN WORD BEFORE DCB
*      POINT  (1),(0)              REPOSITION FILE
       POINT  (1),(0)
CCLOS4 LA    CR3,8(CR3)            CR3 INDEXES DECB'S FOR NEXT
       LA    L1,1(L1)                   L1 POINTS TO PARAM FOR NXT FILE
       BCT   CR4,CCLOS1                 LOOP FOR NEXT FILE
         MVC   CPUT5(4),CCLBR2     RESTORE CPUT5 INSTRUCTION
       LM    CR13,CR4,CSAVE
         DC    X'47F80001'         B    1(L1)  AVOID WARNING DIAG.
CCLOS5   TM    0(L1),X'5'          IS THIS TYPE 1 OR TYPE 4 CLOSE
         BZ    CCLOS4              IF NO CHECK NEXT PARAMETER
         LA    CR13,CRSAVE
         TM    0(L1),X'4'          IS THIS A TYPE 4 CLOSE
         BO    CCLOS3              IF YES GO REPOSITION FILE
         L     CR1,CWKX+4(CR3)     POINT TO DECB BEING READ WITH
         BAL   CR14,CCHK           CHECK ITS COMPLETION
         B     CCLOS3
CCLBR1 B     CCLOS2                    *EARLY RETURN FROM CPUT SWITCH
CCLBR2   LM    CR13,CR3,CSAVE      RESTORE CPUT5
         AGO   .C999
.C14     AIF   ('&SIO'(6,1) NE '5' AND '&SIO'(6,1) NE '1').C1234
*                       CCLOSE FOR TYPES ONE AND FOUR
CCLOSE  STM  CR13,CR4,CSAVE
       LA    CR4,3                     *CR4 COUNTS LOOP-MUST BE REG NOT
*                                      * USED BY CPUT
         SR    CR3,CR3                 *CR3 INDEXES CWKX- MUST BE SAME
*                                      * REG USED FOR THIS BY CPUT
CCLOS1   TM    0(L1),X'5'          IS THIS TYPE 1 OR TYPE 4 CLOSE
         BZ    CCLOS4              IF NO CHECK NEXT PARAMETER
         LA    CR13,CRSAVE
         TM    0(L1),X'4'          IS THIS A TYPE 4 CLOSE
         BO    CCLOS3              IF YES GO REPOSITION FILE
         L     CR1,CWKX+4(CR3)     POINT TO DECB BEING READ WITH
         BAL   CR14,CCHK           CHECK ITS COMPLETION
CCLOS3  L    CR1,CWKX+4(CR3)            CR1 HAS ADR OF DECB
       L     CR1,CTDCB(CR1)             CR1 HAS ADR OF DCB
       LR    CR0,CR1                    CR0 HAS ADR OF DCB
         SH    CR0,CON4            DUNK-NOTEWORD IS IN WORD BEFORE DCB
*      POINT  (1),(0)
       POINT  (1),(0)
CCLOS4 LA    CR3,8(CR3)            CR3 INDEXES DECB'S FOR NEXT
       LA    L1,1(L1)                   L1 POINTS TO PARAM FOR NXT FILE
       BCT   CR4,CCLOS1                 LOOP FOR NEXT FILE
       LM    CR13,CR4,CSAVE
         DC    X'47F80001'         B    1(L1)  AVOID WARNING DIAG.
         AGO   .C999
.C1234   ANOP
*                       CCLOSE FOR TYPES ONE,  TWO,  THREE,  AND  FOUR
CCLOSE  STM  CR13,CR4,CSAVE
       LA    CR4,3                     *CR4 COUNTS LOOP-MUST BE REG NOT
*                                      * USED BY CPUT
         SR    CR3,CR3                 *CR3 INDEXES CWKX- MUST BE SAME
*                                      * REG USED FOR THIS BY CPUT
       MVC   CPUT5(4),CCLBR1           *SET RETURN FROM CPUT BEFORE
*                                      * REGS ARE RESTORED. DONT USE L1
CCLOS1   TM    0(L1),X'2'          IS OUTPUT FILE TO BE CLOSED
         BZ    CCLOS5              IF NO CHECK FOR INPUT FILE REPOS.
         L     CR1,CWKX(CR3)
CCLOS1A  LA  CR2,CEOF                  *POINT TO EOF RECORD WITH SAME
       B     CPUT0                     *PUT EOF RECORD, USING ENTRY PT
*                                      * AFTER REGS ARE SAVED.
*                                      *ASSUME CR1 GETS DECB ADR IN
*                                      * CPUT ROUTINE.
CCLOS2 L     CR14,CTPT(CR1)             CR14 GETS POINTER TO NEXT POS
       L     CR15,CTAR(CR1)             CR15 GETS BUFFER ADR
       SR    CR14,CR15                  CALC LENGTH OF ACTUAL BUFFER
       STH   CR14,0(CR15)               STORE ACTUAL LENGTH IN BUFFER
         STH   CR14,CTLT(CR1)
*                                      * REG USED FOR POINTER BY CPUT
       LA    CR13,CRSAVE                POINT CR13 TO SAVE AREA
         L     CR2,CWKX+4(CR3)     CR2 POINTS TO OTHER DECB
         TM    CTSWCH(CR2),CDWRT   WAS OTHER BUFFER EVER WRITTEN
         BO    CCLOS2A             IF YES RETURN
       LA    CR15,100              PREPARE TO WRITE EXTRA RECORD
       STH   CR15,CTLT(CR2)          TO POINT TO AND FOR READ-AHEAD
       BAL   CR14,CWRT                  GO TO COMMON ROUTINE TO WRITE
       B     CCLOS2B               GO FINISH BUFFER FLUSHING
CCLOS2A  BAL   CR14,CWRT                GO TO COMMON WRITE ROUTINE
       L     CR1,CWKX+4(CR3)            CR1 HAS ADR OF 2ND DECB
         BAL   CR14,CCHK                GO TO COMMON CHECK ROUTINE
CCLOS2B  L   CR1,CWKX+4(CR3)            CR1 GETS ADR OF 2ND DECB
         BAL   CR14,CWRT                GO TO COMMON WRITE ROUTINE
       L     CR1,CWKX(CR3)              CR1 GETS ADR 1ST DECB
         BAL   CR14,CCHK                GO TO COMMON CHECK ROUTINE
       L     CR1,CWKX+4(CR3)            CR1 GETS ADR 2ND DECB
         BAL   CR14,CCHK                GO TO COMMON CHECK ROUTINE
         TM    0(L1),X'1'          IS THIS A TYPE 3 CCLOSE
         BZ    CCLOS3              IF NO DONT REPOSITION
         L     CR2,CCOMM
         L     CR1,UCDCBA(CR2)
*        NOTE   (1)
         NOTE   (1)
         ST    CR1,UCREP(CR2)
CCLOS3  L    CR1,CWKX+4(CR3)            CR1 HAS ADR OF DECB
       L     CR1,CTDCB(CR1)             CR1 HAS ADR OF DCB
       LR    CR0,CR1                    CR0 HAS ADR OF DCB
         SH    CR0,CON4            DUNK-NOTEWORD IS IN WORD BEFORE DCB
*      POINT  (1),(0)
       POINT  (1),(0)
CCLOS4 LA    CR3,8(CR3)            CR3 INDEXES DECB'S FOR NEXT
       LA    L1,1(L1)                   L1 POINTS TO PARAM FOR NXT FILE
       BCT   CR4,CCLOS1                 LOOP FOR NEXT FILE
         MVC   CPUT5(4),CCLBR2
       LM    CR13,CR4,CSAVE
         DC    X'47F80001'         B    1(L1)  AVOID WARNING DIAG.
CCLOS5   TM    0(L1),X'5'          IS THIS TYPE 1 OR TYPE 4 CLOSE
         BZ    CCLOS4              IF NO CHECK NEXT PARAMETER
         LA    CR13,CRSAVE
         TM    0(L1),X'4'          IS THIS A TYPE 4 CLOSE
         BO    CCLOS3              IF YES GO REPOSITION FILE
         L     CR1,CWKX+4(CR3)     POINT TO DECB BEING READ WITH
         BAL   CR14,CCHK           CHECK ITS COMPLETION
         B     CCLOS3
CCLBR1 B     CCLOS2                    *EARLY RETURN FROM CPUT SWITCH
CCLBR2   LM    CR13,CR3,CSAVE
.C999    AIF   ('&PHASE'(1,2) NE 'PG').SREP
         AIF   ('&PHASE'(3,1) EQ '4' OR '&PHASE'(3,1) EQ '5' OR        C
               '&PHASE'(3,1) EQ '7').SREP
CREP     STM   CR13,CR1,CSAVE      STORE REGS IN PRIVATE AREA
         LA    CR13,CRSAVE         POINT TO SAVE AREA FOR C.P. USE
         L     CR1,CWKA+4          LOAD ADR OF DECB BEING READ
         BAL   CR14,CCHK           ENSURE COMPLETION OF OPERATION
         MVI   CEND+3,C'F'              RESTORE END FLAG TO 1EOF
         L     CR14,CCOMM          POINT CR14 TO COMM AREA
         LA    CR0,UCREP(CR14)     POINT CR0 TO NOTEWORD
         L     CR1,UCDCBA(CR14)    LOAD ADR OF WKA DCB
*        POINT  (1),(0)            POINT TO CONTINUE WRITING
         POINT  (1),(0)            POINT TO CONTINUE WRITING
         ST    L1,CRSAVE           SAVE LINK REGISTER
         LM    CR13,CR1,CSAVE      RESTORE REGS SINCE COPEN SAVES THEM
         BAL   L1,COPEN            SET UP FILE FOR CPUTA
         DC    X'20000000'
       L     L1,CRSAVE
         BR    L1
.SREP    AIF   ('&CIOP'(7,1) EQ 'N' OR '&CIOP'(1,1) EQ 'X').SCD
&D       SETC  '&CIOP'(8,1)
         AIF   ('&PHASE' EQ 'PMG').NDGQ
         AIF   ('&PHASE' EQ 'SMG').NDGQ
         AIF   ('&CIOP'(7,1) NE 'V').SDGR
         AIF   ('&PHASE' NE 'DS1').DS11
CVDAGA   DC    0H'0'
.DS11    ANOP
CVDAG&D  STM   CR0,CR1,CDGSAV           ENTRY POINT
       ST    OUTREG,CDGSS2         SAVE OUTREG
       BAL   1,CDG7                GET NYYY IN REG 0
         AGO   .SDGB
.SDGR    ANOP
CDIAG&D  STM   CR0,CR1,CDGSAV
       ST    OUTREG,CDGSS2         SAVE OUTREG
       LH    0,0(L1)               NYYY TO REG 0
       LA    L1,2(L1)              POINT TO NEXT PARAMETER
.SDGB    ANOP
CDG1   STH   0,CDGSRC+4            NYYY TO MESSG-NO. FIELD
       NI    CDGSRC+4,X'0F'        0YYY IN MESSG-NO. FIELD
       SRL   0,12                  NO OF TRLRS N0/N3 IN REG 0
       LTR   0,0
       BC    7,CDG2                IF NO. OF TRLRS NOT ZERO, GO TO CDG2
       MVI   CDGSRC,X'82'          DIAG-WITHOUT-TRLRS CODE TO SRC
       B     CDG3                  GO TO CDG3
CDG2   MVI   CDGSRC,X'84'          DIAG-WITH-TRLRS CODE TO SRC
CDG3   STH   0,CDGSCN              SAVE TRLRS-COUNT
       BAL   1,CDG7                GET POSSEQ IN REG 0
       LR    1,0                   POSSEQ TO REG 1
       MVC   CDGSRC+1(2),1(1)      POS 1/4 AND SEQ 0/11 TO SRC
       TM    0(1),X'01'
       BC    8,CDG4                IF POS 0 IS 0, GO TO CDG4
       OI    CDGSRC,X'01'          1 TO POS 0 IN SRC
CDG4   LA    OUTREG,CDGSRC         ADR OF DIAG
         BAL   L1,CPUT&D                CPUT DIAG RECORD
       L     L1,CDGSPT             RESTORE PNTR
       LH    1,CDGSCN              TRLRS-COUNT TO REG 1
       NI    CDGSRC,X'E5'
       OI    CDGSRC,X'E4'          TRLR CODE TO SRC
       LTR   1,1
       BC    8,CDG6                IF NO. OF TRLRS IS ZERO, GO TO CDG6
CDG5   STH   1,CDGSCN              SAVE TRLRS-COUNT
       BAL   1,CDG7                GET ADDR OF NEXT WORD IN REG 0
       LR    OUTREG,0              ADR OF NEXT WORD TO OUTREG
       SH    OUTREG,CDGTHR         DUNK OUTREG BY 3 TO ALLOW SPACE
*                                    FOR SRC 0/2 IN CIOP IOAREA
         BAL   L1,CPUT&D                CPUT TRAILER
       L     1,CDGWK               ADDR OF REC IN CIOP IOAREA TO REG 1
       MVC   0(3,1),CDGSRC         SRC 0/2 TO CIOP IOAREA
       L     L1,CDGSPT             RESTORE PNTR
       LH    1,CDGSCN              TRLRS-COUNT TO REG 1
       BCT   1,CDG5                IF TRLRS-COUNT NOT ZERO, GO TO CDG5
CDG6   LM    0,1,CDGSAV            RESTORE REG 0 AND 1
       L     OUTREG,CDGSS2
       BR    L1                    RETURN TO THE PHASE
CDG7   ST    1,CDGWK               SAVE RETURN ADDR
       L     1,CDGSAV+4            RESTORE REG 1 TO PHASE CONTENTS
       L     OUTREG,CDGSS2         RESTORE INITIAL CONTENTS OF OUTREG
       EX    0,0(L1)               ADDR OF NEXT WORD TO REG 0
       LA    L1,4(L1)              UPDATE PNTR
       ST    L1,CDGSPT             SAVE PNTR
       L     1,CDGWK         RESTORE RETURN ADDR
       BR    1                     RETURN TO MAIN ROUTINE
CDGSAV   DC    2F'0'               SAVE REG 0 AND 1
CDGSS2   DC    F'0'                SAVE REG S2
CDGSPT   DC    F'0'                SAVE POINTER
CDGSCN   DC    H'0'                SAVE TRLRS-COUNT
CDGSRC   DC    H'0'                SIX BYTE FIELD
       DC    H'2'                   *SRC AND DIAG-REC
         DC    H'0'
*
*            CONSTANTS
CDGTHR DC    H'3'
.SCD     ANOP
CDGWK    DC    F'0'                ADDR OF RECORD RETURNED FROM CPUT
.NDGQ    ANOP
CWKX     DC    0F'0'               BASE OF DECB POINTER STRING
CWKA     DC    2F'0'                    INITIALIZED WITH DECB ADDRESSES
CWKB     DC    2F'0'                    INITIALIZED WITH DECB ADDRESSES
CWKC     DC    2F'0'                    INITIALIZED WITH DECB ADDRESSES
CEOF   DC    F'4'                       SRC OF EOD RECORD
&D       SETC  'F'
         AIF   ('&SIO'(7,1) EQ ' ').REOF
&D       SETC  '&SIO'(7,1)
.REOF    ANOP
CEND     DC    C'1EO&D.'           END OF FILE MARKER
CWK    DC    H'0'
CON4   EQU   CEOF+2                SNEAKY WAY TO GET A CONSTANT   CHECK
.SC      AIF   ('&PHASE' NE 'LST').NCLST
CCLOSE   STM   CR13,CR4,CSAVE      SPECIAL CCLOSE FOR LST
         L     CR2,CCOMM           POINT TO COMM AREA
         LA    CR13,CRSAVE         POINT TO SAVE AREA FOR C.P. USE
         L     CR1,UCDCBB(CR2)     POINT TO DCB FOR WK B
         LR    CR0,CR1
         SH    CR0,CON4            POINT TO WORD PRECEDING DCB
*        POINT (1),(0)             REPOSITION WK B
         POINT (1),(0)
         LM    CR13,CR4,CSAVE
         B     4(L1)
CON4     DC    H'4'
.NCLST   AIF   ('&PHASE' NE 'PD1').PD1
CLOAD    STM   CR13,CR1,CSAVE      STORE REGS IN PRIVATE AREA
         LA    CR13,CRSAVE         POINT TO SAVE AREA FOR C.P. USE
         CLI   CL1+3,C'X'          IS THIS THE 1ST LOAD
         BE    CL3                 IF YES DO NOT DELETE
         BAL   CR0,CL2             ELSE POINT TO NAME WITH PARM REG
CL1      DC    C'IEPXXX00'         NAME OF CURRENT TABLE
CL2      SVC   9                   DELETE CURRENT TABLE
CL3      MVC   CL1+3(3),0(L1)      MOVE IN NEW TABLE NAME
         LA    CR0,CL1             POINT TO NEW TABLE NAME
         SR    CR1,CR1             INDICATE NO DCB USED--LINKLIB
         SVC   8                   LOAD NEW TABLE
         LR    S2,CR0              PUT TABLE ADR IN TABLE BASE REG
         LM    CR13,CR1,CSAVE      RESTORE REGS
         B     4(L1)               EXIT
.PD1     AIF   ('&PHASE' NE 'BLD' AND '&PHASE' NE 'AS2' AND '&PHASE'   C
               NE 'AS3' AND '&PHASE' NE 'AS5' AND '&PHASE' NE          C
               'PD1').STW1
CWRITE   STM   CR13,CR4,CSAVE      STORE REGS IN PRIVATE AREA
         ST    CR9,CRDSV    STORE AREA POINTER
         LA    CR13,CRSAVE         POINT TO SAVE AREA FOR C.P. USE
         AIF   ('&PHASE' EQ 'PD1').WPD11
CWT0     NI    CWTS,X'FE'          RESET NOTE SWITCH
.WPD11   L     CR15,CWKB           POINT TO WORK B DECB
         L     CR15,CTDCB(CR15)    LOAD ADR OF WORK B DCB
         ST    CR15,CWDECB+CTDCB   STORE ADR IN DECB FOR WRITE
         LH    CR2,CBLKSI(CR15)    CR2 HAS BLKSIZE OF WKB
         STH   CR2,CWDECB+CTLT     STORE BLKSIZE AS MAX TO WRITE
         MVC   CWRD+2(2),0(P1)     MOVE LENGTH, WHICH IS 16 BITS AND
         L     CR4,CWRD            POSITIVE, TO FULL WORD AND LOAD IT.
*                                  SET N = 0 FOR COMMENTS
CWT1     ST    CR9,CWDECB+CTAR     STORE ADR FOR WRITE
         CR    CR4,CR2             COMP LNTH - N(BLKSIZE) TO BLKSIZE
         BH    CWT2                IF HIGH GO WRITE BLKSIZE CHUNK
        CH    CR4,=H'30'   AVOID NOISE RECORD
        BH    CWT3
        LA    CR4,30
CWT3     STH   CR4,CWDECB+CTLT     ELSE WRITE LNTH - N(BLKSIZE)
         BAL   CR3,CWTC
         LM    CR13,CR4,CSAVE      RESTORE REGS
         L     CR9,CRDSV  RESTORE AREA POINTER
         BR    L1
CWT2     BAL   CR3,CWTC            WRITE BLKSIZE CHUNK
         AR    CR9,CR2             BUMP ADR BY BLKSIZE
         SR    CR4,CR2             DUNK LNTH BY BLKSIZE,, THUS N=N+1
         B     CWT1                LOOP
CWTC     LA    CR1,CWDECB          POINT TO DECB
         BAL   CR14,CWRT           GO TO COMMON READ-WRITE LINKAGE
         LA    CR1,CWDECB          POINT AGAIN TO DECB
         BAL   CR14,CCHK           GO TO COMMON CHECK LINKAGE
         AIF   ('&PHASE' EQ 'PD1').WPD12
         TM    CWTS,X'1'           IS THIS FIRST WRITE
         BCR   1,CR3               IF NO RETURN
         AIF   ('&PHASE' NE 'BLD').NSPT
         TM    DSW,SSEG            IS NOTE WANTED
         BCR   8,CR3               IF NO RETURN
.NSPT    L     CR1,CWDECB+CTDCB    ELSE POINT TO DCB
*        NOTE  (1)                 NOTE FIRST OR ONLY WRITE
         NOTE  (1)                 NOTE FIRST OR ONLY WRITE
         ST    CR1,CSAVE+16        STORE IN REG SAVE AREA
         OI    CWTS,X'1'           INDICATE FIRST WRITE HAS BEEN DONE
.WPD12   BR    CR3
         AIF   ('&PHASE' NE 'BLD' AND '&PHASE' NE 'PD1').XXQPR
CRDSV    DC    F'0'
.XXQPR   ANOP
         AIF   ('&PHASE'(1,2) NE 'AS').STW2
CPWRITE  STM   CR13,CR4,CSAVE      STORE REGS IN PRIVATE AREA
         ST    CR9,CRDSV    STORE AREA POINTER
         LA    CR13,CRSAVE         POINT TO SAVE AREA FOR C.P. USE
         L     CR2,CCORAD
CPWT1    C     CR1,0(0,CR2)
         LA    CR2,4(0,CR2)
         BNE   CPWT1
         L     CR1,0(0,CR2)
         ST    CR1,CRSAVE          STORE NOTEWORD IN UNUSED AREA
         LR    CR0,CR13            POINT TO NOTEWORD WITH REG 0
         L     CR1,CWKB            POINT TO WORK B DECB
         L     CR1,CTDCB(CR1)      LOAD ADR OF WORK B DCB
*        POINT  (1),(0)
         POINT  (1),(0)
         B     CWT0                GO TO NORMAL CWRITE ROUTINE
.STW2    ANOP
CWRD     DC    F'0'                WORK FIELD TO LOAD 16 BIT LENGTH
CWDECB   DC    F'0'                ECB
         DC    X'0020'             TYPE
         DC    H'0'                LNTH
         DC    F'0'                DCB
         DC    F'0'                AREA
         DC    F'0'                POINTER
CWTS     DC    X'0'                SWITCH
.STW1    AIF   ('&PHASE'(2,2) NE 'MG' AND '&PHASE' NE 'LST' AND        C
               '&PHASE'(1,2) NE 'AS' AND '&PHASE' NE                   C
               'PD2').SRT
         AIF   ('&PHASE' EQ 'AS1' OR '&PHASE' EQ 'ASP' OR '&PHASE' EQ  C
               'ASW' OR '&PHASE' EQ 'ASA').SRT
CREAD    STM   CR13,CR4,CSAVE      STORE REGS IN PRIVATE AREA
         ST    CR9,CRDSV           STORE AREA POINTER
         LA    CR13,CRSAVE         POINT TO SAVE AREA FOR CP USE
         AIF   ('&PHASE'(1,2) NE 'AS').SSPQ
         ST    CR1,CRSAVE          STORE NOTEWORD FROM PHASE
.SSPQ    AIF   ('&PHASE' EQ 'LST' OR '&PHASE' EQ 'PD2').NSYMF
         L     CR1,CWKB            POINT TO WORK B DECB
         L     CR1,CTDCB(CR1)      LOAD ADR OF WORK B DCB
         AGO   .SYMF
.NSYMF   L     CR14,CCOMM          POINT TO COMMON AREA
         AIF   ('&PHASE' EQ 'LST').NSYM1
         L     CR1,UCWKB(CR14)     POINT TO WORK B DECB
         L     CR1,CTDCB(CR1)      LOAD WORK B DCB ADR
         AGO   .SYMF
.NSYM1   L     CR1,UCDCBB(CR14)    POINT TO DCB FOR WORKB
.SYMF    ST    CR1,CRDECB+CTDCB    STORE ADR IN DECB FOR READ
         LH    CR2,CBLKSI(CR1)     LOAD BLKSIZE FOR WKB
         AIF   ('&PHASE' EQ 'PMG' OR '&PHASE' EQ 'LST' OR '&PHASE' EQ  C
               'PD2').STPT
         AIF   ('&PHASE'(1,2) NE 'AS').SSPP
         LR    CR0,CR13            POINT TO PREVIOUSLY STORED NOTEWORD
**       POINT  (1),(0)
         POINT (1),(0)             POSITION FILE FOR READ
         AGO   .STPT
.SSPP    AIF   ('&PHASE' NE 'SMG').SSELPT
         TM    SWITCH,SSEG         IS POINT REQUIRED
         BZ    CRDNPT              IF NO SKIP
.SSELPT  MVC   CRSAVE(4),0(W1)     MOVE NOTEWORD TO FW BOUND
         LR    CR0,CR13           POINT TO NOTEWORD
*        POINT  (1),(0)
         POINT (1),(0)             POSITION FILE FOR READ
CRDNPT   DC    0H'0'
.STPT    BAL   CR3,CRDC            GO READ FIRST OR ONLY CHUNK
         MVC   CWRD+2(2),0(P1)     MOVE LENGTH, WHICH IS 16 BITS AND
         L     CR4,CWRD            POSITIVE, TO FULL WORD AND LOAD IT.
*                                  SET N=0 FOR COMMENTS
CREAD1   CR    CR4,CR2             COMP. LNTH-N(BLKSIZE) TO BLKSIZE
         BH    CREAD2              IF HIGH THERE'S MORE TO BE READ
         LM    CR13,CR4,CSAVE      ELSE RESTORE REGS
         L     CR9,CRDSV           RESTORE POINTER TO FIRST OF AREA
         BR    L1                  AND EXIT
CREAD2   AR    CR9,CR2             BUMP AREA POINTER BY BLKSIZE
         SR    CR4,CR2             DUNK LNTH BY BLKSIZE,,THUS N=N+1
         BAL   CR3,CRDC            GO READ THE N-TH CHUNK
         B     CREAD1              LOOP TO SEE IF THERE'S ANY MORE
CRDC     ST    CR9,CRDECB+CTAR     STORE CURRENT AREA POINTER IN DECB
         LA    CR1,CRDECB          POINT TO DECB
         BAL   CR14,CWRT           GO TO COMMON READ-WRITE LINKAGE
         LA    CR1,CRDECB          POINT TO DECB
         BAL   CR14,CCHK           GO TO COMMON CHECK LINKAGE
         BR    CR3                 RETURN
         AIF   ('&PHASE' EQ 'AS2' OR '&PHASE' EQ 'AS3' OR '&PHASE' EQ  C
               'AS5').SCWRD
CWRD     DC    F'0'                WORK FIELD TO LOAD 16 BIT LENGTH
.SCWRD   ANOP
CRDECB   DC    F'0'                ECB
         DC    X'8080'             TYPE
         DC    H'0'                LNTH
         DC    F'0'                DCB
         DC    F'0'                AREA
         DC    F'0'                POINTER
CRDSV    DC    F'0'
.SRT     AIF   ('&CIOP'(1,1) EQ 'X' AND '&SIO'(1,4) EQ '    ').SCSP
CWRT     L     15,8(1)             WRITE LINKAGE--NON-STANDARD
         L     15,48(15)           LOAD READ/WRITE ROUTINE ADR
         BR    15                  NON-STANDARD,,REG 14 ALREADY LOADED
CCHK     L     15,8(1)             CHECK LINKAGE--NON-STANDARD
         L     15,52(15)           LOAD CHECK ROUTINE ADR
         BR    15                  NON-STANDARD,,REG 14 ALREADY LOADED
CSAVE    DC    9F'0'               FRAME SAVE AREA
.SCSP    AIF   ('&PHASE' NE 'AS1' AND '&PHASE' NE 'AS2' AND '&PHASE'   C
               NE 'AS3' AND '&PHASE' NE 'ASA').SYQ
CCCON    DC    2F'0'
         AIF   ('&PHASE' NE 'AS1').SCZP
ZPUTC    BR    L1                  NO-OP RETURN FOR INCLUDE CARDS
.SCZP    ANOP
XPUTC    STM   CR13,CR3,CSAVE      STORE REGS IN CIOP AREA
         L     CR3,CCOMM           POINT TO COMMON AREA
         TM    UCNCE(CR3),UXDEK    CHECK FOR NO DECK OPTION
         BO    CXP2                IF YES SKIP PUNCH COMMAND
         LA    CR13,CRSAVE         POINT TO SAVE AREA FOR CP USE
         LM    CR1,CR2,CCCON       LOAD POINTERS TO PUNCH DECB'S
         ST    CR1,CCCON+4         SWITCH THEIR LOCATIONS
         ST    CR2,CCCON
         LTR   CR1,CR1             TEST FOR FIRST WRITE
         BM    CXP1                IF FIRST DON'T CHECK
         BAL   CR14,CCHK           CHECK PREVIOUS WRITE
CXP1     MVI   CCCON+4,X'0'        REMOVE FLAG FOR FIRST WRITE
         L     CR1,CCCON+4         RELOAD DECB POINTER
         L     CR2,CTAR(CR1)       LOAD POINTER TO PUNCH BUFFER
         MVC   0(72,CR2),4(S2)     MOVE DATA TO PUNCH BUFFER
         MVC   72(4,CR2),XPNAM     PROG I.D. FROM LOCAL STORE TO CARD
         UNPK  76(4,CR2),UCPSEQ(3,CR3)  PUT OBJECT DECK SEQ. NO. IN BUF
         OI    79(CR2),X'F0'       CLEAR SIGN PUNCH FROM SEQ. NO.
         AP    UCPSEQ(3,CR3),CONE(1) BUMP OBJECT DECK SEQ. NO.
         BAL   CR14,CWRT           WRITE BUFFER
CXP2     LM    CR13,CR3,CSAVE      RESTORE REGS
         BR    L1                  RETURN
CONE     DC    X'1F00'             CONSTANT FOR OBJECT DECK SEQ. NO.
         AGO   .SKY
.SYQ     AIF   ('&PHASE' NE 'AS4' AND '&PHASE' NE 'AS5' AND '&PHASE'   C
               NE 'AS6').SY1
         AIF   ('&PHASE' NE 'AS6').CA3
CPCON    DC    2F'0'               POINTERS TO PRINT DECB'S
.CA3     ANOP
CCCON    DC    2F'0'               POINTERS TO PUNCH DECB'S
YPUTC    STM   CR13,CR4,CSAVE      STORE REGS IN PRIVATE AREA
YPUTC2   LA    CR3,CCCON          POINT TO PUNCH DECB POINTERS
         LA    CR4,71              LOAD LENGTH FOR EXECUTING MOVE
         L     CR2,CCOMM           POINT TO COMM AREA
         TM    UCNCE(CR2),UXDEK    SET CC ONE IF NODECK OPTION TAKEN
         AIF   ('&PHASE' NE 'AS6').CA64
         B     COUT                GO TO COMMON OUTPUT ROUTINE
CVC66    STM   CR13,CR4,CSAVE      STORE REGS IN PRIVATE AREA
         LA    CR3,CPCON           POINT TO PRINT DECB POINTERS
         LA    CR4,119             LOAD LENGTH OF MOVE
         L     CR2,CCOMM           POINT TO COMM AREA
         TM    UCNCE(CR2),UXPMP    SET CC ONE IF NOPMAP OPTION TAKEN
.CA64    ANOP
COUT     BO    CXP4                SKIP OUT IF NODECK OR NOPMAP SET
         LA    CR13,CRSAVE         POINT TO SAVE AREA FOR C.P. USE
         LM    CR1,CR2,0(CR3)      LOAD POINTERS TO DECB'S
         ST    CR1,4(CR3)          SWITCH THEIR LOCATIONS
         ST    CR2,0(CR3)
         LTR   CR1,CR1             TEST FOR FIRST WRITE OF BUFFER
         BM    CXP1                IF FIRST DONT CHECK PREVIOUS WRITE
         BAL   CR14,CCHK           CHECK PREVIOUS WRITE
CXP1     MVI   4(CR3),X'0'         REMOVE FLAG FOR FIRST WRITE
         L     CR1,4(CR3)          RE-LOAD POINTER TO DECB
         MVC   CRSAVE(4),0(L1)     MOVE PARAM TO BOUNDARY
         L     CR3,CRSAVE          LOAD POINTER TO OUTPUT INFO
         L     CR2,CTAR(CR1)       LOAD POINTER TO BUFFER
         CH    CR4,C80             IS THIS A PRINT REQUEST
         BNH   CXP5                BRANCH IF PUNCH TO PUT IN SEQ. NO.
CXP6     MVI   0(CR2),C' '         SINGLE SPACE CHAR, AFTER HEADINGS
         MVI   CXP6+1,C' '         SET SINGLE SPACE AFTER FIRST LINE
         LH    CR0,CLNS            LOAD COUNT OF REMAINING LINES
         BCT   CR0,CXP2            BR IF NOT ZERO
         MVI   0(CR2),C'1'         ELSE SKIP TO NEXT PAGE
         LH    CR0,CLNCT           RE-LOAD LINE COUNT
CXP2     STH   CR0,CLNS            STORE REMAINING LINE COUNT
         LA    CR2,1(CR2)          BUMP PAST CONTROL CHARACTER POS.
CXP3     EX    CR4,CMVC            MOVE INFO TO BUFFER
         BAL   CR14,CWRT           WRITE BUFFER
CXP4     LM    CR13,CR4,CSAVE      RESTORE REGS USED BY ROUTINE
         BC    15,4(L1)
CXP5     L     CR14,CCOMM          POINT TO COMM AREA
         MVC   72(4,CR2),XPNAM     PROG I.D. FROM LOCAL STORE TO CARD
         UNPK  76(4,CR2),UCPSEQ(3,CR14)  SEQUENCE OBJECT DECK
         OI    79(CR2),X'F0'       REMOVE SIGN PUNCH FROM SEQ. NO.
         AP    UCPSEQ(3,CR14),CONE(1)  BUMP OBJECT DECK SEQUENCE NO.
         B     CXP3                RETURN TO COMMON ROUTINE
CONE     DC    X'1F00'             CONSTANT FOR SEQUENCE NOS.
CMVC     MVC   0(0,CR2),0(CR3)
C80      DC    H'80'
         AGO   .SKY
.SY1     AIF   ('&SIO'(3,1) NE 'O').SY2
CPRINT   STM   CR13,CR2,CSAVE
         L     CR2,CCOMM           POINT TO COMM AREA
         AIF   ('&PHASE' NE 'LST').NDMAP
         TM    UCNCE(CR2),UXDMP    CHECK FOR NODMAP OPTION
         AGO   .TOGETH
.NDMAP   AIF   ('&PHASE' EQ 'PD2').TOG2
         TM    UCNCE(CR2),UXLST    CHECK FOR NOLIST OPTION
.TOGETH  BO    CP3                 IF ON SKIP PRINTING
.TOG2    LA    CR13,CRSAVE         POINT TO SAVE AREA FOR C.P. USE
         LM    CR1,CR2,CPCON       LOAD POINTERS TO DECB'S
         ST    CR1,CPCON+4         SWITCH THEIR POSITIONS
         ST    CR2,CPCON
         MVC   &LIST.(4),CTAR(CR2)   LOAD POINTER TO NEXT PRINT AREA
         BAL   CR14,CWRT           GO TO COMMON I/O LINKAGE TO WRITE
         TM    CPCON,X'80'         IS THIS FIRST TIME THRU
         BO    CP2                 IF YES DONT CHECK OTHER DECB
         LR    CR1,CR2             ELSE POINT TO OTHER DECB
         BAL   CR14,CCHK           AND GO CHECK IT
CP2      MVI   CPCON,X'0'
CP3      LM    CR13,CR2,CSAVE      RESTORE REGS
         BR    L1
&LIST    DC    F'0'
CPCON    DC    2F'0'               POINTER TO PRINT DECB'S
.SY2     AIF   ('&SIO'(2,1) NE 'I').SKY
CCCON    DC    F'0'                POINTER TO READER DECB
CFCON    DC    2F'0'               FILLED WITH POINTERS TO LIB. DECB'S
&INPUT   DC    F'0'                POINTER TO NEXT CARD
CIPT     STM   CR13,CR4,CSAVE      STORE REGS IN CIOP AREA
         LA    CR13,CRSAVE         POINT TO SAVE AREA FOR O/S USE
CIPTSW   BC    0,CFIPT             SWITCH FOR LIBRARY INPUT
         L     CR1,CCCON           POINT TO READER DECB
         BAL   CR14,CCHK           GO TO COMMON CHECK ROUTINE TO
*                                  ENSURE COMPLETION OF PREVIOUS READ.
*                                  MUST CHECK BEFORE NEXT READ
         L     CR1,CCCON           POINT TO DECB FOR READ. CHECK
*                                  WIPES IT OUT.
         L     CR2,CTAR(CR1)       LOAD ADR OF NEXT BUFFER
         MVC   CTAR(4,CR1),&INPUT    INSERT ADR OF OTHER BUFFER TO RD.
         ST    CR2,&INPUT          STORE POINTER TO NEXT BUFFER
         BAL   CR14,CWRT           GO TO COMMON I/O LINKAGE FOR READ
         LM    CR13,CR4,CSAVE      RESTORE REGS
         BR    L1                  EXIT
CFIND    STM   CR13,CR4,CSAVE      STORE REGS IN CIOP AREA
         LA    CR13,CRSAVE         POINT TO SAVE AREA FOR C.P. USE
         L     CR1,CCOMM           POINT TO COMM AREA
         L     CR1,UCDCBLIB(CR1)   POINT TO LIBRARY DCB
         SR    CR14,CR14           CLEAR WORK REG
         AIF   ('&PHASE'(1,1) NE 'D').LIBMG
         LA    CR0,2(W1)           POINT TO NAME
         IC    CR14,0(W1)          LOAD LENGTH OF MEMBER NAME
         LA    CR14,0(W1,CR14)     POINT TO POSITION AFTER NAME
         AGO   .LIB1
.LIBMG   LA    CR0,4(P1)           POINT TO MEMBER NAME FROM SOURCE
         IC    CR14,3(P1)          LOAD LENGTH OF MEMBER NAME
         LA    CR14,4(P1,CR14)     POINT TO POSITION FOLLOWING NAME
.LIB1    MVI   0(CR14),C' '        MOVE IN BLANK
         MVC   1(7,CR14),0(CR14)   CLEAR AREA TO BLANKS
         FIND  (1),(0),D           ISSUE FIND ON MEMBER NAME
         B     *+4(CR15)           BRANCH ON RETURN CODE REGISTER
         B     CFGOOD              RETURN CODE 0
         B     CFBAD               NOT ON LIBRARY
         B     CFBAD              PERM I/O ERROR
CFGOOD   MVI   CIPTSW+1,X'F0'      SET SWITCH FOR CIPT FROM LIB
         LM    CR1,CR2,CFCON       LOAD POINTERS TO LIB. DECB'S
         MVC   CTAR(4,CR2),&INPUT  INPUT BUFFER 1 TO LIB. POOL
         BAL   CR14,CWRT           ISSUE READ ON BUFFER 1
         LM    CR13,CR4,CSAVE      RESTORE REGS
         BR    L1
CFIPT    LM    CR2,CR3,CFCON       LOAD POINTERS TO LIBRARY DECB'S
         ST    CR3,CFCON           SWITCH   POINTERS
         ST    CR2,CFCON+4
         LR    CR1,CR3             POINT TO IDLE BUFFER
         BAL   CR14,CWRT           ISSUE READ
         LR    CR1,CR2             POINT TO BUFFER BEING FILLED
         MVC   &INPUT.(4),CTAR(CR2)  PASS BUFFER ADR TO PHASE
         BAL   CR14,CCHK           CHECK ACTIVE BUFFER
         LM    CR13,CR4,CSAVE      RESTORE REGS
         BR    L1
CFEND    MVI   CIPTSW+1,X'0'       RESET SWITCH TO READER
         LM    CR13,CR4,CSAVE      RESTORE REGS
         B     &EOFLIB             GO TO END OF FILE ON LIB. ADR
CFBAD    LM    CR13,CR4,CSAVE      RESTORE REGS
         B     &NFLIB              GO TO ADR FOR MEMBER NOT ON LIB
CFECON   DC    AL3(CFEND)          EOF ADR FOR SYSLIB
.SKY     AIF   ('&ENTRY' NE 'CBEGIN').SCBG
CBEGIN   DC    0H'0'
.SCBG    EJECT
         MEND
