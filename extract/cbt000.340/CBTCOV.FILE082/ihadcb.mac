*        %GOTO DCBBSL;                                               /*
         MACRO
         IHADCB &DSORG=,&DEVD=
         DCBD   DSORG=&DSORG,DEVD=&DEVD
         MEND   ,  */
*%DCBBSL  :  ;
*%/*  CHANGES TO THIS MACRO SHOULD ALSO BE MADE TO THE DCBD MACRO. */;
*
*/* **************************************************************** */
*/*      BEFORE THE INCLUDE FOR THIS MACRO, THE MACRO VARIABLES      */
*/*      LISTED BELOW MUST BE SET TO 0 (OPTION NOT WANTED) OR        */
*/*      1 (OPTION WANTED).  THERE SHOULD BE AT LEAST ONE DSORG      */
*/*      VARIABLE AND ONE DEVD VARIABLE SET TO 1 UNLESS DSORGGS      */
*/*      OR DSORGLR IS SET.  IF DSORGGS IS SET TO 1, IT              */
*/*      MUST BE THE ONLY VARIABLE SET TO 1.  IF NO DSORG VARIABLE   */
*/*      IS SET TO 1, EXCP WITH EXTENSION IS ASSUMED.                */
*/*                                                                  */
*/*      MACRO IHADCBDF CONTAINS MACRO-TIME PLS STATEMENTS TO        */
*/*      DECLARE AND SET TO 0 ALL THE MACRO VARIABLES FOR IHADCB.    */
*/*      YOU SHOULD INCLUDE IHADCBDF, THEN PUT STATEMENTS TO SET     */
*/*      THE PROPER MACRO VARIABLES TO 1, AND THEN INCLUDE IHADCB.   */
*/*                                                                  */
*/*      THE MACRO VARIABLES ARE THE FOLLOWING -                     */
*/*                                                                  */
*/*      DSORGIS - ISAM                                              */
*/*      DSORGDA - BDAM                                              */
*/*      DSORGBX - BTAM LINE GROUP                                   */
*/*      DSORGCX - BTAM AND QTAM LINE GROUPS                         */
*/*      DSORGQX - QTAM LINE GROUP                                   */
*/*      DSORGCQ - QTAM COMMUNICATIONS DIRECT ACCESS QUEUE           */
*/*      DSORGMQ - QTAM MESSAGE QUEUE                                */
*/*      DSORGQS - QSAM                                              */
*/*      DSORGPS - QSAM AND BSAM-BPAM                                */
*/*      DSORGBS - BSAM-BPAM                                         */
*/*      DSORGPO - BSAM-BPAM                                         */
*/*      DSORGXA - EXCP WITH APPENDAGES                              */
*/*      DSORGXE - EXCP WITH EXTENSION                               */
*/*      DSORGLR - DCBLRECL FIELD ONLY                               */
*/*      DSORGGS - GRAPHICS WITH APPENDAGES                          */
*/*      DSORGTX - TCAM LINE GROUP                                   */
*/*      DSORGTQ - TCAM MESSAGE QUEUE                                */
*/*      DSORGTR - TCAM 3705                                   S22024*/
*/*      DEVDDA  - DIRECT ACCESS                                     */
*/*      DEVDTA  - MAGNETIC TAPE                                     */
*/*      DEVDPT  - PAPER TAPE                                        */
*/*      DEVDPR  - PRINTER                                           */
*/*      DEVDRD  - CARD READER                                       */
*/*      DEVDPC  - CARD PUNCH                                        */
*/*      DEVDBS  - BINARY SYNCHRONOUS COMMUNICATION                  */
*/*      DEVDWT  - WORLD TRADE TELEGRAPH                             */
*/*      DEVDMR  - MAGNETIC CARD READER                              */
*/*      DEVDOR  - OPTICAL READER                                    */
*/*                                                                  */
*/* **************************************************************** */
*/*   OS     RELEASE 21.8, 12/05/73                                  */
*/*   OS/VS1 RELEASE 03.1, 12/05/73                                  */
*/* **************************************************************** */
*
*%IF DSORGCX=1  %THEN                    /* IF DSORGCX IS SET TO 1,  */
*    %DSORGBX=1;                         /* SET DSORGBX AND          */
*%IF DSORGCX=1  %THEN                    /* DSORGQX TO 1             */
*    %DSORGQX=1;
*%IF DSORGPS=1  %THEN                    /* IF DSORGPS IS SET TO 1,  */
*    %DSORGBS=1;                         /* SET DSORGBS AND          */
*%IF DSORGPS=1  %THEN                    /* DSORGQS TO 1             */
*    %DSORGQS=1;
*%IF DSORGPO=1  %THEN
*    %DSORGBS=1;
*%IF DEVDPC=1   %THEN
*    %DEVDRD=1;
*
*%IF DSORGLR=0  %THEN                    /* IF NOT DCBLRECL ONLY,    */
*    %GOTO B1A;                          /* BR TO COMMENTS    SA68367*/
*%IF DSORGIS=1  %THEN                    /* IF ALSO ANY OTHER DSORG  */
*    %GOTO B1A;                          /* BR TO COMMENTS    SA68367*/
*%IF DSORGQS=1  %THEN                    /*                   SA68367*/
*    %GOTO B1A;                          /*                   SA68367*/
*%IF DSORGBS=1  %THEN                    /*                   SA68367*/
*    %GOTO B1A;                          /*                   SA68367*/
*%IF DSORGDA=1  %THEN                    /*                   SA68367*/
*    %GOTO B1A;                          /*                   SA68367*/
*%IF DSORGBX=1  %THEN                    /*                   SA68367*/
*    %GOTO B1A;                          /*                   SA68367*/
*%IF DSORGQX=1  %THEN                    /*                   SA68367*/
*    %GOTO B1A;                          /*                   SA68367*/
*%IF DSORGCQ=1  %THEN                    /*                   SA68367*/
*    %GOTO B1A;                          /*                   SA68367*/
*%IF DSORGMQ=1  %THEN                    /*                   SA68367*/
*    %GOTO B1A;                          /*                   SA68367*/
*%IF DSORGTX=1  %THEN                    /*                   SA68367*/
*    %GOTO B1A;                          /*                   SA68367*/
*%IF DSORGTQ=1  %THEN                    /*                   SA68367*/
*    %GOTO B1A;                          /*                   SA68367*/
*%IF DSORGTR=1  %THEN                    /*                   SA68367*/
*    %GOTO B1A;                          /*                   SA68367*/
*%IF DSORGXA=1  %THEN                    /*                   SA68367*/
*    %GOTO B1A;                          /*                   SA68367*/
*%IF DSORGXE=1  %THEN                    /*                   SA68367*/
*    %GOTO B1A;                          /*                   SA68367*/
*%IF DSORGGS=0  %THEN                    /*                   SA68367*/
*    %GOTO BA;                           /* SKIP COMMENTS     SA68367*/
*%B1A    :  ;                            /*                   SA68367*/
*/*                     DCB SYMBOLIC DEFINITION FOR                  */
*%IF DSORGIS=0  %THEN
*    %GOTO B2;
*/*                     INDEXED SEQUENTIAL                           */
*%B2     :  ;
*%IF DSORGQS=0  %THEN                    /* IF BOTH                  */
*    %GOTO B2B;                          /* QSAM AND BSAM-BPAM,      */
*%IF DSORGBS=0  %THEN                    /* DO NOT                   */
*    %GOTO B2A;                          /* BRANCH                   */
*/*                     PHYSICAL SEQUENTIAL                          */
*%GOTO B3     ;
*%B2A    :  ;
*%IF DSORGQS=0  %THEN
*    %GOTO B2B;
*/*                     QSAM                                         */
*%B2B    :  ;
*%IF DSORGBS=0  %THEN
*    %GOTO B3;
*/*                     BSAM-BPAM                                    */
*%B3     :  ;
*%IF DSORGDA=0  %THEN
*    %GOTO B4;
*/*                     DIRECT ACCESS                                */
*%B4     :  ;
*%IF DSORGBX=0  %THEN                    /* IF BOTH                  */
*    %GOTO B4B;                          /* BTAM AND QTAM,           */
*%IF DSORGQX=0  %THEN                    /* DO NOT                   */
*    %GOTO B4A;                          /* BRANCH                   */
*/*                     COMMUNICATIONS LINE GROUP                    */
*%GOTO B5     ;
*%B4A    :  ;
*%IF DSORGBX=0  %THEN
*    %GOTO B4B;
*/*                     BTAM LINE GROUP                              */
*%B4B    :  ;
*%IF DSORGQX=0  %THEN
*    %GOTO B5;
*/*                     QTAM LINE GROUP                              */
*%B5     :  ;
*%IF DSORGCQ=0  %THEN
*    %GOTO B6;
*/*                     COMMUNICATIONS DIRECT ACCESS QUEUE           */
*%B6     :  ;
*%IF DSORGMQ=0  %THEN
*    %GOTO B6A;
*/*                     QTAM MESSAGE QUEUE                           */
*%B6A    :  ;
*%IF DSORGTX=0  %THEN
*    %GOTO B6B;
*/*                     TCAM LINE GROUP                              */
*%B6B    :  ;
*%IF DSORGTQ=0  %THEN
*    %GOTO B7;
*/*                     TCAM MESSAGE QUEUE                           */
*%B7     :  ;
*%IF DSORGTR=0  %THEN
*    %GOTO B7A;                          /*                    S22024*/
*/*                     3705 LINE GROUP                              */
*%B7A    :  ;                            /*                    S22024*/
*%IF DSORGXA=0  %THEN                    /* IF EXCP WITH BOTH        */
*    %GOTO B8;                           /* EXTENSION AND            */
*%IF DSORGXE=0  %THEN                    /* APPENDAGES,              */
*    %GOTO B9;                           /* DO NOT BRANCH            */
*/*                     EXCP WITH EXTENSION AND APPENDAGES           */
*%GOTO BA     ;
*%B8     :  ;
*%IF DSORGXE=0  %THEN
*    %GOTO B9;
*/*                     EXCP WITH EXTENSION                          */
*%GOTO BA     ;
*%B9     :  ;
*%IF DSORGXA=0  %THEN
*    %GOTO B0;
*/*                     EXCP WITH APPENDAGES                         */
*%GOTO BA     ;
*%B0     :  ;
*%IF DSORGGS=0  %THEN
*    %GOTO B00;
*/*                     GRAPHICS WITH APPENDAGES                     */
*%GOTO BA     ;
*%B00    :  ;
*%IF DSORGIS=1  %THEN                    /* IF ANY DSORG VARIABLE    */
*    %GOTO BA;                           /* IS SET TO ONE,           */
*%IF DSORGBX=1  %THEN                    /* BRANCH TO BA             */
*    %GOTO BA;
*%IF DSORGDA=1  %THEN
*    %GOTO BA;
*%IF DSORGQX=1  %THEN
*    %GOTO BA;
*%IF DSORGCQ=1  %THEN
*    %GOTO BA;
*%IF DSORGMQ=1  %THEN
*    %GOTO BA;
*%IF DSORGQS=1  %THEN
*    %GOTO BA;
*%IF DSORGBS=1  %THEN
*    %GOTO BA;
*%IF DSORGTX=1  %THEN
*    %GOTO BA;
*%IF DSORGTQ=1  %THEN
*    %GOTO BA;
*%IF DSORGLR=1  %THEN
*    %GOTO BA;
*%IF DSORGTR=1  %THEN
*    %GOTO BA;                           /*                    S22024*/
*/*                     EXCP WITH EXTENSION                          */
*%DSORGXE=1;
*%BA     :  ;
*
*%IF DSORGGS=1  %THEN
*    %GOTO SLIP;
*
*DECLARE
*  1 IHADCB   BASED(DCBPTR),
*   2 *           CHAR(52);              /* DESCRIBED IN FOLLOWING
*                                           STRUCTURES               */
*
*%IF DEVDDA=1   %THEN                    /* IF NO DEVD VARIABLE IS   */
*    %GOTO C1A;                          /* SET TO ONE,              */
*%IF DEVDTA=1   %THEN                    /* BRANCH TO C4             */
*    %GOTO C1A;
*%IF DEVDPT=1   %THEN
*    %GOTO C1A;
*%IF DEVDPR=1   %THEN
*    %GOTO C1A;
*%IF DEVDRD=1   %THEN
*    %GOTO C1A;
*%IF DEVDWT=1   %THEN
*    %GOTO C1A;
*%IF DEVDOR=1   %THEN
*    %GOTO C1A;
*%IF DEVDMR=0   %THEN
*    %GOTO C4;
*%C1A: ;
*/*                     DEVICE INTERFACES                            */
*
*%IF DEVDDA=0   %THEN
*    %GOTO C1;
*/*                     DIRECT ACCESS DEVICES                        */
*
*DECLARE 1 IHADCS00
*      BASED(ADDR(IHADCB)),
*   2 DCBRELAD    CHAR(4),               /* PARTITIONED ORGANIZATION
*                                           DATA SET -  ADDRESS (IN
*                                           THE FORM TTRN) OF MEMBER
*                                           CURRENTLY USED. ---
*                                           SYS1.LOGREC DATA SET -
*                                           IF CCH OPTION HAS  BEEN
*                                           SPECIFIED IN SYSGEN
*                                           PROCESS, ADDRESS OF A
*                                           12-BYTE PARAMETER IN THE
*                                           EXPANSION  OF MACRO
*                                           INSTRUCTION IGFCATAP     */
*   2 DCBKEYCN    PTR(8),                /* KEYED BLOCK OVERHEAD
*                                           CONSTANT                 */
*   2 DCBFDAD     CHAR(8);               /* FULL DISK ADDRESS IN THE
*                                           FORM OF MBBCCHHR OF
*                                           RECORD THAT WAS JUST
*                                           READ OR WRITTEN          */
*
*DECLARE 1 IHADCS01
*      BASED(ADDR(DCBFDAD)+7),
*   2 DCBDVTBL    PTR(31),               /* SAME AS DCBDVTBA BELOW   */
*    3 *           CHAR(1),              /* LAST BYTE OF DCBFDAD     */
*    3 DCBDVTBA    PTR(24)  BDY(BYTE),   /* ADDRESS OF ENTRY IN I/O
*                                           DEVICE  CHARACTERISTICS
*                                           TABLE FOR DEVICE BEING
*                                           USED                     */
*   2 *           PTR(8),                /* DCBKEYLE - KEY LENGTH OF
*                                           DATA SET                 */
*   2 *           CHAR(1),               /* DCBDEVT - DEVICE TYPE    */
*%;/* FOR MASKS FOR ISAM DIRECT ACCESS, SEE DCBOVDEV IN ISAM SECTION */
*%DCL DCBDV311 CHAR;
*%DCBDV311='''21''X';                    /* 2311 DISK DRIVE          */
*%DCL DCBDV301 CHAR;
*%DCBDV301='''22''X';                    /* 2301 PARALLEL DRUM       */
*%DCL DCBDV303 CHAR;
*%DCBDV303='''23''X';                    /* 2303 SERIAL DRUM         */
*%DCL DCBDV302 CHAR;
*%DCBDV302='''24''X';                    /* 2302 DISK STORAGE        */
*%DCL DCBDV321 CHAR;
*%DCBDV321='''25''X';                    /* 2321 DATA CELL DRIVE     */
*%DCL DCBDV314 CHAR;
*%DCBDV314='''28''X';                    /* 2314 DISK STORAGE
*                                           FACILITY                 */
*   2 DCBTRBAL    FIXED(15);             /* TRACK BALANCE. NUMBER OF
*                                           BYTES REMAINING ON
*                                           CURRENT TRACK AFTER A
*                                           WRITE OPERATION  (THIS
*                                           QUANTITY MAY BE NEGATIVE
*                                           IF THERE  ARE NO BYTES
*                                           REMAINING ON TRACK).     */
*
*%C1     :  ;
*%IF DEVDTA=0   %THEN
*    %GOTO C2;
*/*                     MAGNETIC TAPE                                */
*
*DECLARE 1 IHADCS02
*      BASED(ADDR(IHADCB)),
*   2 *           CHAR(12),              /* RESERVED FOR I/O
*                                           SUPERVISOR               */
*   2 DCBBLKCT    FIXED(31),             /* BLOCK COUNT FOR EACH
*                                           VOLUME                   */
*   2 DCBTRTCH    CHAR(1),               /* TAPE RECORDING TECHNIQUE
*                                           FOR 7-TRACK TAPE         */
*%DCL DCBMTE   CHAR;
*%DCBMTE  ='''23''X';                    /* E - EVEN PARITY          */
*%DCL DCBMTT   CHAR;
*%DCBMTT  ='''3B''X';                    /* T - BCD/EBCDIC
*                                           TRANSLATION              */
*%DCL DCBMTC   CHAR;
*%DCBMTC  ='''13''X';                    /* C - DATA CONVERSION      */
*%DCL DCBMTET  CHAR;
*%DCBMTET ='''2B''X';                    /* ET - EVEN PARITY AND
*                                           TRANSLATION              */
*   2 *           CHAR(1),               /* DCBDEVT - DEVICE TYPE    */
*%DCL DCBDVMT  CHAR;
*%DCBDVMT ='''81''X';                    /* 2400 SERIES MAGNETIC
*                                           TAPE UNIT (7-TRACK  OR
*                                           9-TRACK)                 */
*%DCL DCBDVMT3 CHAR;
*%DCBDVMT3='''83''X';                    /* 3400 SERIES MAGNETIC
*                                           TAPE UNIT          ICB277*/
*   2 DCBDEN      CHAR(1),               /* TAPE DENSITY - 2400
*                                           SERIES MAGNETIC TAPE
*                                           UNITS                    */
*%;/*                                       CODE  7-TRACK   9-TRACK  */
*%DCL DCBMTDN0 CHAR;
*%DCBMTDN0='''03''X';                    /*  0     200 BPI    -      */
*%DCL DCBMTDN1 CHAR;
*%DCBMTDN1='''43''X';                    /*  1     556 BPI    -      */
*%DCL DCBMTDN2 CHAR;
*%DCBMTDN2='''83''X';                    /*  2     800 BPI   800 BPI */
*%DCL DCBMTDN3 CHAR;
*%DCBMTDN3='''C3''X';                    /*  3      -       1600 BPI */
*%DCL DCBMTDN4 CHAR;                     /*                    99223 */
*%DCBMTDN4='''D3''X';                    /*  4      -       6250 BPI */
*   2 *           CHAR(1);               /* RESERVED                 */
*
*%C2     :  ;
*%IF DEVDPT=0   %THEN
*    %GOTO C3;
*/*                     PAPER TAPE                                   */
*
*DECLARE 1 IHADCS03
*      BASED(ADDR(IHADCB)+8),
*   2 DCBLCTBL    PTR(31),               /* ADDRESS OF TRANSLATE
*                                           TABLE                    */
*   2 *           CHAR(4),               /* RESERVED                 */
*   2 DCBCODE     CHAR(1),               /* PAPER TAPE CODE BEING
*                                           USED. THE  APPROPRIATE
*                                           TRANSLATE TABLE IS MADE
*                                           AVAILABLE                */
*%DCL DCBPTCDN CHAR;
*%DCBPTCDN='''80''X';                    /* N - NO CONVERSION        */
*%DCL DCBPTCDI CHAR;
*%DCBPTCDI='''40''X';                    /* I - IBM BCD              */
*%DCL DCBPTCDF CHAR;
*%DCBPTCDF='''20''X';                    /* F - FRIDEN               */
*%DCL DCBPTCDB CHAR;
*%DCBPTCDB='''10''X';                    /* B - BURROUGHS            */
*%DCL DCBPTCDC CHAR;
*%DCBPTCDC='''08''X';                    /* C - NATIONAL CASH
*                                           REGISTER                 */
*%DCL DCBPTCDA CHAR;
*%DCBPTCDA='''04''X';                    /* A - ASCII (8-TRACK)      */
*%DCL DCBPTCDT CHAR;
*%DCBPTCDT='''02''X';                    /* T - TELETYPE             */
*   2 *           CHAR(1),               /* DCBDEVT - DEVICE TYPE    */
*%DCL DCBDVPTP CHAR;
*%DCBDVPTP='''50''X';                    /* 2671 PAPER TAPE READER   */
*   2 *           CHAR(1),               /* RESERVED                 */
*   2 DCBPTFLG    CHAR(1),               /* PAPER TAPE FLAGS         */
*    3 *        BIT(3),                  /* RESERVED                 */
*    3 DCBPTIC  BIT(1),                  /* INVALID CHARACTER IN
*                                           LAST RECORD READ         */
*    3 DCBPTECT BIT(1),                  /* END OF RECORD CHARACTER
*                                           REACHED IN  TRANSLATION  */
*    3 DCBPTECR BIT(1),                  /* END OF RECORD CHARACTER
*                                           DETECTED DURING  READ    */
*    3 DCBPTUCT BIT(1),                  /* IF ONE, UPPER CASE
*                                           TRANSLATE.  IF ZERO,
*                                           LOWER CASE TRANSLATE     */
*    3 DCBPTERR BIT(1);                  /* ERROR DETECTED ON READ   */
*
*%C3     :  ;
*%IF DEVDPR=0   %THEN
*    %GOTO C3A;
*/*                     PRINTER                                      */
*
*DECLARE 1 IHADCS04
*      BASED(ADDR(IHADCB)+16),
*   2 DCBPRTSP    CHAR(1),               /* NUMBER INDICATING NORMAL
*                                           PRINTER SPACING          */
*%DCL DCBPRSP0 CHAR;
*%DCBPRSP0='''01''X';                    /* 0 - NO SPACING           */
*%DCL DCBPRSP1 CHAR;
*%DCBPRSP1='''09''X';                    /* 1 - SPACE ONE LINE       */
*%DCL DCBPRSP2 CHAR;
*%DCBPRSP2='''11''X';                    /* 2 - SPACE TWO LINES      */
*%DCL DCBPRSP3 CHAR;
*%DCBPRSP3='''19''X';                    /* 3 - SPACE THREE LINES    */
*   2 *           CHAR(1),               /* DCBDEVT - DEVICE TYPE    */
*%DCL DCBDVPR1 CHAR;
*%DCBDVPR1='''48''X';                    /* 1403 PRINTER AND 1404
*                                           PRINTER (CONTINUOUS FORM
*                                           SUPPORT ONLY)            */
*%DCL DCBDVPR2 CHAR;
*%DCBDVPR2='''4A''X';                    /* 1443 PRINTER             */
*%DCL DCBDVPR3 CHAR;
*%DCBDVPR3='''49''X';                    /* 3211 PRINTER             */
*   2 DCBPRTOV    CHAR(1),               /* TEST-FOR-PRINTER-OVERFLOW
*                                           MASK  (PRTOV MASK)       */
*%DCL DCBPRC9  CHAR;
*%DCBPRC9 ='''20''X';                    /* 9 - TEST FOR CHANNEL 9
*                                           OVERFLOW                 */
*%DCL DCBPRC12 CHAR;
*%DCBPRC12='''10''X';                    /* 12 - TEST FOR CHANNEL 12
*                                           OVERFLOW                 */
*   2 *           CHAR(1);               /* RESERVED                 */
*
*%C3A    :  ;
*%IF DEVDRD=0   %THEN
*    %GOTO C3B;
*/*                     CARD READER, CARD PUNCH                      */
*
*DECLARE 1 IHADCS05
*      BASED(ADDR(IHADCB)+16),
*   2 DCBMODE     CHAR(1),               /* MODE OF OPERATION FOR
*                                           1442 CARD READ  PUNCH
*                                           (BITS 0-3)               */
*    3 DCBSTACK    CHAR(1),              /* STACKER SELECTION (BITS
*                                           4-7)                     */
*     4 DCBMODEC BIT(1),                 /* COLUMN BINARY MODE       */
*     4 DCBMODEE BIT(1),                 /* EBCDIC MODE              */
*     4 DCBMODEO BIT(1),                 /* OPTICAL MARK READ MODE   */
*     4 DCBMODER BIT(1),                 /* READ COLUMN ELIMINATE
*                                           MODE                     */
*     4 *        BIT(2),                 /* RESERVED                 */
*     4 DCBSTCK2 BIT(1),                 /* STACKER 2                */
*     4 DCBSTCK1 BIT(1),                 /* STACKER 1                */
*   2 *           CHAR(1),               /* DCBDEVT - DEVICE TYPE    */
*%DCL DCBDVCR0 CHAR;
*%DCBDVCR0='''41''X';                    /* 2540 CARD READER         */
*%DCL DCBDVCP0 CHAR;
*%DCBDVCP0='''42''X';                    /* 2540 CARD PUNCH          */
*%DCL DCBDVCRP CHAR;
*%DCBDVCRP='''43''X';                    /* 1442 CARD READ PUNCH     */
*%DCL DCBDVCR1 CHAR;
*%DCBDVCR1='''44''X';                    /* 2501 CARD READER         */
*%DCL DCBDVCPR CHAR;
*%DCBDVCPR='''45''X';                    /* 2520 CARD READ PUNCH     */
*%DCL DCBDVCR2 CHAR;
*%DCBDVCR2='''46''X';                    /* 3505 CARD READER   XM0629*/
*%DCL DCBDVCP1 CHAR;
*%DCBDVCP1='''4C''X';                    /* 3525 CARD PUNCH    XM0629*/
*   2 *           CHAR(1),               /* RESERVED                 */
*   2 DCBFUNC     CHAR(1),               /* FUNCTION INDICATOR FOR
*                                           THE 3525                 */
*    3 DCBFNCBI BIT(1),                  /* INTERPRET (PUNCH AND
*                                           PRINT TWO LINES)         */
*    3 DCBFNCBR BIT(1),                  /* READ                     */
*    3 DCBFNCBP BIT(1),                  /* PUNCH                    */
*    3 DCBFNCBW BIT(1),                  /* PRINT                    */
*    3 DCBFNCBD BIT(1),                  /* DATA PROTECTION          */
*    3 DCBFNCBX BIT(1),                  /* THIS DATA SET IS TO BE
*                                           PRINTED                  */
*    3 DCBFNCBT BIT(1),                  /* TWO-LINE PRINT SUPPORT
*                                           REQUEST                  */
*    3 *        BIT(1);                  /* RESERVED                 */
*
*%C3B    :  ;
*%IF DEVDWT=0   %THEN
*    %GOTO C3C;
*/*                     WORLD TRADE TELEGRAPH                        */
*
*DECLARE 1 IHADCS06
*      BASED(ADDR(IHADCB)+16),
*   2 DCBBQFLG    CHAR(1),               /* WTTA FLAG BYTE           */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 DCBBQWRU BIT(1),                  /* WRU FEATURE IS TO BE
*                                           USED                     */
*    3 DCBBQIAM BIT(1),                  /* IAM FEATURE IS TO BE
*                                           USED                     */
*    3 DCBBQWRS BIT(1),                  /* WRU FEATURE TO BE USED
*                                           IN SEND HEADER  SUBGROUP */
*    3 DCBBQWRE BIT(1),                  /* WRU FEATURE TO BE USED
*                                           IN END SEND  SUBGROUP    */
*    3 *        BIT(3),                  /* RESERVED                 */
*   2 DCBWTEOM    CHAR(1),               /* EOM CHARACTER            */
*   2 DCBWTEOT    CHAR(1),               /* EOT CHARACTER            */
*   2 DCBWTPAD    PTR(8);                /* NUMBER OF PAD (LTRS)
*                                           CHARACTERS REQUIRED  FOR
*                                           MOTOR-ON DELAY           */
*
*%C3C    :  ;
*%IF DEVDOR=1   %THEN                    /* IF EITHER DEVDOR OR      */
*    %GOTO C3C1;                         /* DEVDMR IS SET TO ONE,    */
*%IF DEVDMR=0   %THEN                    /* BRANCH TO                */
*    %GOTO C4;                           /* C3C1                     */
*%C3C1: ;
*/*                     OPTICAL READER AND MAGNETIC CHAR READER      */
*
*DECLARE 1 IHADCS07
*      BASED(ADDR(IHADCB)),
*   2 DCBWTOID    PTR(31),               /* SAME AS DCBWTOIA BELOW   */
*    3 *           CHAR(1),              /* RESERVED                 */
*    3 DCBWTOIA    PTR(24)  BDY(BYTE);   /* A BINARY IDENTIFICATION
*                                           NUMBER ASSIGNED  BY
*                                           COMMUNICATIONS TASK TO
*                                           MESSAGE ISSUED  BY WTO
*                                           MACRO. THIS NUMBER IS
*                                           USED BY THE DOM MACRO
*                                           WHEN MESSAGE IS NO
*                                           LONGER   REQUIRED (MCS
*                                           SUPPORT). ---  FOR
*                                           MAGNETIC CHAR READER -
*                                           AFTER FIRST  READ HAS
*                                           BEEN ISSUED, CONTAINS
*                                           ADDRESS OF MAGNETIC
*                                           INTERRUPT CONTROL BLOCK
*                                           (MICB)  BEING USED BY
*                                           THE APPENDAGES.          */
*
*%IF DEVDOR=0   %THEN
*    %GOTO C3D;
*/*                     OPTICAL READER DEVICES                       */
*/*                     1285, 1287, 1288, 3886                       */
*
*DECLARE 1 IHADCS08
*      BASED(ADDR(DCBWTOID)+4),
*   2 DCBERRCN    PTR(31),               /* SAME AS DCBERRCA BELOW   */
*    3 DCBLNNUM    PTR(8),               /* 3886 DOCUMENT LINE NUMBER*/
*    3 DCBERRCA    PTR(24)  BDY(BYTE),   /* ADDRESS OF 32 BYTES OF
*                                           DECLARED STORAGE
*                                           SPECIFIED BY THE USER IN
*                                           HIS PROGRAM.  THIS
*                                           STORAGE WILL BE USED BY
*                                           THE  PROGRAMMING SUPPORT
*                                           AS EIGHT 4-BYTE COUNTERS
*                                           IN WHICH TOTALS OF
*                                           CERTAIN 1285, 1287 AND
*                                           1288 ERROR CONDITIONS
*                                           ARE ACCUMULATED.         */
*     4 DCBLFMAT    PTR(8),              /* 3886 LINE FORMAT NUMBER  */
*     4 DCBORFLG    CHAR(1),             /* 3886 FLAGS               */
*      5 DCBEOPFG    BIT(1),             /* END OF PAGE              */
*      5 *           BIT(7),             /* RESERVED                 */
*     4 *           PTR(8),              /* RESERVED                 */
*   2 DCBDSPLY    PTR(31),               /* SAME AS DCBDSPLA BELOW   */
*    3 DCBFRID     CHAR(4),              /* 3886 FORMAT RECORD ID    */
*     4 *           CHAR(1),             /* RESERVED                 */
*     4 DCBDSPLA    PTR(24)  BDY(BYTE),  /* ADDRESS OF DSPLY (BSAM)
*                                           ROUTINE USED FOR
*                                           KEYBOARD ENTRY OF A
*                                           COMPLETE FIELD           */
*   2 DCBRESCN    PTR(31),               /* SAME AS DCBRESCA BELOW   */
*    3 DCBRDLNE    PTR(31),              /* SAME AS DCBRDLNA BELOW   */
*     4 DCBFRTBA    PTR(31),             /* 3886 FORMAT RECORD TABLE */
*      5 *           CHAR(1),            /* RESERVED                 */
*      5 DCBRESCA    PTR(24)  BDY(BYTE), /* ADDRESS OF RESCN (BSAM)
*                                           ROUTINE USED TO  FORCE
*                                           ON-LINE CORRECTION OF
*                                           UNREADABLE  CHARACTERS   */
*       6 DCBRDLNA    PTR(24)  BDY(BYTE),/* ADDRESS OF RDLNE (QSAM)
*                                           ROUTINE USED TO  FORCE
*                                           ON-LINE CORRECTION OF
*                                           UNREADABLE  CHARACTERS   */
*   2 DCBORBYT    CHAR(1),               /* OPTICAL READER BYTE USED
*                                           BY BSAM/QSAM             */
*    3 DCBORSYN BIT(1),                  /* SYNAD IN CONTROL         */
*    3 DCBOREOF BIT(1),                  /* END OF FILE (EOF)        */
*    3 DCBORBFP BIT(1),                  /* BUFFERS PRIMED (QSAM)    */
*    3 *        BIT(5),                  /* RESERVED                 */
*   2 *           CHAR(1),               /* DCBDEVT - DEVICE TYPE    */
*%DCL DCBDVOR5 CHAR;
*%DCBDVOR5='''5A''X';                    /* 1285 OPTICAL READER      */
*%DCL DCBDVOR7 CHAR;
*%DCBDVOR7='''5B''X';                    /* 1287 OPTICAL READER      */
*%DCL DCBDVOR8 CHAR;
*%DCBDVOR8='''5C''X';                    /* 1288 OPTICAL READER      */
*%DCL DCBDVOR9 CHAR;
*%DCBDVOR9='''57''X';                    /* 3886 OPTICAL READER      */
*   2 DCBEIB      CHAR(1),               /* ERROR INDICATOR BYTE     */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 DCBORNRM BIT(1),                  /* THE 1287 OR 1288 SCANNER
*                                           WAS UNABLE TO  LOCATE
*                                           THE REFERENCE MARK       */
*    3 DCBORREJ BIT(1),                  /* FOR 1287, A STACKER
*                                           SELECT COMMAND WAS
*                                           GIVEN AFTER ALLOTTED
*                                           TIME HAD ELAPSED AND THE
*                                           DOCUMENT HAS BEEN PUT IN
*                                           REJECT  POCKET. FOR 1288
*                                           UNFORMATTED ONLY,
*                                           END-OF-PAGE HAS OCCURRED.*/
*    3 DCBORERR BIT(1),                  /* A NONRECOVERABLE ERROR
*                                           HAS OCCURRED.            */
*    3 DCBORECK BIT(1),                  /* AN EQUIPMENT CHECK
*                                           RESULTED IN AN
*                                           INCOMPLETE READ          */
*    3 DCBORWLR BIT(1),                  /* A WRONG-LENGTH RECORD
*                                           CONDITION HAS  OCCURRED  */
*    3 DCBORHPR BIT(1),                  /* FOR QSAM - OPERATOR
*                                           ENTERED ONE OR MORE
*                                           CHARACTERS FROM THE
*                                           KEYBOARD.  FOR BSAM - A
*                                           HOPPER EMPTY CONDITION
*                                           HAS  OCCURRED            */
*    3 DCBORDCK BIT(1),                  /* A DATA CHECK HAS
*                                           OCCURRED                 */
*   2 *           CHAR(1);               /* RESERVED                 */
*
*%C3D    :  ;
*%IF DEVDMR=0   %THEN
*    %GOTO C4;
*/*                     MAGNETIC CHARACTER READER DEVICES            */
*/*                     1419 MAGNETIC CHARACTER READER               */
*/*                     1275 OPTICAL READER SORTER                   */
*/*                     3890 MAGNETIC CHARACTER READER               */
*
*DECLARE 1 IHADCS09
*      BASED(ADDR(IHADCB)),
*   2 DCBSSID     CHAR(8);               /* BEFORE DCB IS OPENED -
*                                           NAME OF USER'S  STACKER
*                                           SELECT ROUTINE.          */
*
*DECLARE 1 IHADCS10
*      BASED(ADDR(DCBSSID)),
*   2 *           PTR(31),               /* AFTER DCB IS OPENED -
*                                           DCBWTOID                 */
*   2 DCBSSAD     PTR(31),               /* ADDRESS OF USER'S
*                                           STACKER SELECT ROUTINE   */
*    3 DCBIMG      PTR(31),              /* 3890 ADDR OF USER'S
*                                           IMAGE PROC RTN           */
*     4 *           CHAR(1),             /* RESERVED                 */
*     4 DCBSSADA    PTR(24)  BDY(BYTE),  /* ADDRESS OF USER'S
*                                           STACKER SELECT ROUTINE   */
*   2 DCBIMAGE    PTR(31),               /* SAME AS DCBIMAGA BELOW   */
*    3 DCBMRFG     CHAR(1),              /* BUFFER INDICATOR         */
*     4 DCBMRBCT BIT(2),                 /* TWO-BIT BINARY COUNTER
*                                           WHICH INDICATES  INTO
*                                           WHICH BUFFER STATUS
*                                           INFORMATION IS  TO BE
*                                           POSTED                   */
*     4 *        BIT(6),                 /* RESERVED                 */
*    3 DCBIMAGA    PTR(24)  BDY(BYTE),   /* ADDRESS OF PARAMETER
*                                           LIST USED TO
*                                           COMMUNICATE BETWEEN
*                                           USER'S PROCESSING
*                                           ROUTINES AND HIS STACKER
*                                           SELECT ROUTINES          */
*   2 DCBECBLT    PTR(31),               /* SAME AS DCBECBLA BELOW   */
*    3 DCBHDR      PTR(31),              /* 3890 ADDR OF USER'S
*                                           HEADER DATA AREA         */
*     4 DCBMRIND    CHAR(1),             /* INDICATOR AND COUNTER
*                                           BYTE                     */
*      5 DCBMRDCT BIT(3),                /* THREE-BIT BINARY COUNTER
*                                           OF NUMBER OF  DOCUMENTS
*                                           READ AFTER DISENGAGE     */
*      5 DCBMRSCU BIT(1),                /* DCB WAS ALTERED WHEN
*                                           SYNAD ROUTINE WAS
*                                           ENTERED DUE TO SECONDARY
*                                           CONTROL UNIT  (SCU)
*                                           ERROR                    */
*      5 DCBMRPLO BIT(1),                /* POCKET LIGHT HAS BEEN
*                                           TURNED ON                */
*      5 DCBMRPLS BIT(1),                /* POCKET LIGHT 0-6 IS
*                                           BEING SET ON             */
*      5 DCBMRERP BIT(1),                /* ERROR RECOVERY PROCEDURE
*                                           IS EXECUTING FOR PRIMARY
*                                           CONTROL UNIT (PCU)       */
*      5 DCBMRERS BIT(1),                /* ERROR RECOVERY PROCEDURE
*                                           IS EXECUTING FOR
*                                           SECONDARY CONTROL UNIT
*                                           (SCU)                    */
*     4 DCBECBLA    PTR(24)  BDY(BYTE),  /* ADDRESS OF ECB LIST
*                                           PASSED TO WAIT MACRO  BY
*                                           CHECK MACRO WHEN NO
*                                           1419/1275 IS  AVAILABLE
*                                           FOR PROCESSING           */
*   2 DCBMRFLG    CHAR(1),               /* FLAG BYTE                */
*    3 DCBMRSCC BIT(1),                  /* FIRST OR SECOND
*                                           SECONDARY CONTROL UNIT
*                                           COMMAND CHAIN IS BEING
*                                           USED                     */
*    3 DCBMRDBG BIT(1),                  /* DEBUGGING MODE IN USE    */
*    3 DCBMRDRU BIT(1),                  /* DISENGAGE REQUESTED BY
*                                           USER                     */
*    3 DCBMRDR  BIT(1),                  /* DISENGAGE REQUESTED      */
*    3 DCBMRPCC BIT(2),                  /* TWO-BIT BINARY COUNTER
*                                           INDICATING FIRST,
*                                           SECOND OR THIRD PRIMARY
*                                           CONTROL UNIT  COMMAND
*                                           CHAIN IS BEING USED      */
*    3 DCBMRDWT BIT(1),                  /* WTO MESSAGE MUST BE
*                                           DELETED                  */
*    3 DCBMRUE  BIT(1),                  /* UNIT EXCEPTION           */
*   2 *           CHAR(1),               /* DCBDEVT - DEVICE TYPE    */
*%DCL DCBDVMR  CHAR;
*%DCBDVMR ='''5D''X';                    /* 1419 MAGNETIC CHARACTER
*                                           READER                   */
*%DCL DCBDVORS CHAR;
*%DCBDVORS='''5F''X';                    /* 1275 OPTICAL READER
*                                           SORTER                   */
*%DCL DCBDVMRS CHAR;
*%DCBDVMRS='''56''X';                    /* 3890 MAGNETIC CHARACTER
*                                           READER SORTER            */
*   2 DCBAPPIN    CHAR(1),               /* AN INDICATOR USED BY THE
*                                           APPENDAGES TO  PASS
*                                           INFORMATION ABOUT ONE
*                                           CHANNEL CHAIN  TO AN
*                                           APPENDAGE ASSOCIATED
*                                           WITH ANOTHER  CHANNEL
*                                           CHAIN                    */
*   2 *           CHAR(1);               /* RESERVED                 */
*
*%C4     :  ;
*%IF DSORGTR=0  %THEN                    /* IF NOT TR BYPASS 3705    */
*    %GOTO C41;                          /* CODE.              S22024*/
*
*/*                     3705 LINE TERMINAL                           */
*
*DECLARE 1 IHADCS1A
*      BASED(ADDR(IHADCB)+8),            /*                    S22024*/
*   2 DCBIPLTX    CHAR(8),               /* NAME OF MODULE TO BE USED
*                                           TO IPL THE 3705    S22024*/
*   2 DCBBCKUP    PTR(31),               /* FULL WORD ADDRESS-SAME
*                                           AS DCBBCKUA        S22024*/
*    3 *          BIT(8),                /* RESERVED           S22024*/
*    3 DCBBCKUA   PTR(24)  BDY(BYTE);    /* ADDRESS OF THE DCB FOR
*                                           THE BACKUP 3705    S22024*/
*%C41    :  ;
*%IF DSORGIS=1  %THEN                    /* IF DSORGIS AND DSORGDA   */
*    %GOTO C4A;                          /* AND DSORGQS AND DSORGBS  */
*%IF DSORGDA=1  %THEN                    /* AND DSORGXE              */
*    %GOTO C4A;                          /* ARE ALL SET TO ZERO,     */
*%IF DSORGQS=1  %THEN                    /* BRANCH TO C5             */
*    %GOTO C4A;
*%IF DSORGBS=1  %THEN
*    %GOTO C4A;
*%IF DSORGXE=0  %THEN
*    %GOTO C5;
*%C4A: ;
*/*                     ACCESS METHOD COMMON INTERFACE               */
*
*DECLARE 1 IHADCS11
*      BASED(ADDR(IHADCB)+16),
*   2 DCBRELB     FIXED(31),             /* SAME AS DCBREL BELOW     */
*    3 DCBKEYLE    PTR(8),               /* KEY LENGTH OF DATA SET   */
*    3 DCBREL      PTR(24)  BDY(BYTE),   /* NUMBER OF RELATIVE
*                                           TRACKS OR BLOCKS IN THIS
*                                           DATA SET (BDAM)          */
*     4 DCBDEVT     CHAR(1),             /* DEVICE TYPE              */
*%DCL DCBDVTRM CHAR;
*%DCBDVTRM='''4F''X';                    /* TERMINAL. (DD CONTAINS
*                                           TERM=TS)                 */
*   2 DCBBUFCB    PTR(31),               /* ADDRESS OF BUFFER POOL
*                                           CONTROL BLOCK            */
*    3 DCBBUFNO    PTR(8),               /* NUMBER OF BUFFERS
*                                           REQUIRED FOR THIS DATA
*                                           SET. MAY RANGE FROM 0 TO
*                                           255. IF  UNBLOCKED
*                                           SPANNED RECORDS ARE
*                                           USED, NUMBER OF SEGMENT
*                                           WORK AREAS REQUIRED FOR
*                                           THIS DATA SET.           */
*    3 DCBBUFCA    PTR(24)  BDY(BYTE),   /* ADDRESS OF BUFFER POOL
*                                           CONTROL BLOCK            */
*   2 DCBBUFL     FIXED(15),             /* LENGTH OF BUFFER.  MAY
*                                           RANGE FROM 0 TO  32,767. */
*   2 DCBDSORG    CHAR(2),               /* DATA SET ORGANIZATION
*                                           BEING USED               */
*    3 DCBDSRG1    CHAR(1),              /* FIRST BYTE OF DCBDSORG   */
*     4 DCBDSGIS BIT(1),                 /* IS - INDEXED SEQUENTIAL
*                                           ORGANIZATION             */
*     4 DCBDSGPS BIT(1),                 /* PS - PHYSICAL SEQUENTIAL
*                                           ORGANIZATION             */
*     4 DCBDSGDA BIT(1),                 /* DA - DIRECT ORGANIZATION */
*     4 DCBDSGCX BIT(1),                 /* CX - BTAM OR QTAM LINE
*                                           GROUP                    */
*     4 DCBDSGCQ BIT(1),                 /* CQ - QTAM DIRECT ACCESS
*                                           MESSAGE QUEUE            */
*     4 DCBDSGMQ BIT(1),                 /* MQ - QTAM PROBLEM
*                                           PROGRAM MESSAGE QUEUE    */
*     4 DCBDSGPO BIT(1),                 /* PO - PARTITIONED
*                                           ORGANIZATION             */
*     4 DCBDSGU  BIT(1),                 /* U - UNMOVABLE, THE DATA
*                                           CONTAINS  LOCATION
*                                           DEPENDENT INFORMATION    */
*    3 DCBDSRG2    CHAR(1),              /* SECOND BYTE OF DCBDSORG  */
*     4 DCBDSGGS BIT(1),                 /* GS - GRAPHICS
*                                           ORGANIZATION             */
*     4 DCBDSGTX BIT(1),                 /* TX - TCAM LINE GROUP     */
*     4 DCBDSGTQ BIT(1),                 /* TQ - TCAM MESSAGE QUEUE  */
*     4 *        BIT(1),                 /* RESERVED                 */
*     4 DCBACBM BIT(1),                  /* ACCESS METHOD CONTROL
*                                           BLOCK          ICBI DCB-1*/
*     4 DCBDSGTR   BIT(1),               /* TR - TCAM 3705           */
*     4 *       BIT(2),                  /*  RESERVED      ICBI DCB-1*/
*   2 DCBIOBAD    PTR(31),               /* ADDRESS OF IOB WHEN
*                                           CHAINED SCHEDULING IS
*                                           USED OR FOR 1419/1275    */
*    3 DCBODEB     PTR(31),              /* ADDRESS OF OLD DEB       */
*     4 DCBLNP      PTR(8),              /* 3525 PRINTER LINE
*                                           POSITION COUNTER         */
*      5 DCBQSLM     CHAR(1),            /* QSAM LOCATE MODE LOGICAL
*                                           RECORD INTERFACE
*                                           INDICATOR BYTE FOR UPDAT
*                                           PROCESSING OF  SPANNED
*                                           RECORDS                  */
*       6 DCB1DVDS BIT(1),               /* ONLY ONE DEVICE IS
*                                           ALLOCATED TO THIS  DATA
*                                           SET                      */
*       6 DCBUPDCM BIT(1),               /* UPDATE COMPLETE, FREE
*                                           OLD DEB                  */
*       6 DCBUPDBT BIT(2),               /* UPDATE BITS              */
*%DCL DCBUPDT  CHAR;
*%DCBUPDT ='''10''B';                    /* UPDATE TO TAKE PLACE     */
*%DCL DCBNUPD  CHAR;
*%DCBNUPD ='''11''B';                    /* NO UPDATE TO TAKE PLACE  */
*%DCL DCBSVDEB CHAR;
*%DCBSVDEB='''01''B';                    /* OLD DEB ADDRESS MUST BE
*                                           SAVED                    */
*       6 *        BIT(4),               /* RESERVED                 */
*     4 DCBIOBAA    PTR(24)  BDY(BYTE),  /* SAME AS DCBIOBAD ABOVE   */
*      5 DCBODEBA    PTR(24)  BDY(BYTE); /* ADDRESS OF OLD DEB       */
*
*DECLARE 1 IHADCS50
*      BASED(ADDR(DCBIOBAD)),            /*                ICBI DCB-4*/
*   2 DCBSVCXL    PTR(31),               /* SAME AS DCBSVCXA BELOW
*                                                          ICBI DCB-4*/
*    3 *          PTR(8),                /* RESERVED       ICBI DCB-4*/
*    3 DCBSVCXA   PTR(24)  BDY(BYTE),    /* POINTER TO EXIT LIST OF
*                                           JES C.I. INTERFACE
*                                           CONTROL SVC    ICBI DCB-4*/
*/*                     FOUNDATION EXTENSION                         */
*
*   2 DCBEODAD    PTR(31),               /* SAME AS DCBEODA BELOW    */
*    3 DCBBFALN    CHAR(1),              /* BUFFER ALIGNMENT BITS    */
*     4 DCBHIARC    CHAR(1),             /* HIERARCHY BITS           */
*      5 DCBBFTEK    CHAR(1),            /* BUFFERING TECHNIQUE BITS */
*       6 DCBH1    BIT(1),               /* HIERARCHY 1 MAIN STORAGE
*                                           - BIT 5 IS ZERO          */
*       6 DCBBFT   BIT(3),               /* BUFFERING TECHNIQUE      */
*%DCL DCBBFTA  CHAR;
*%DCBBFTA ='''110''B';                   /* QSAM LOCATE MODE
*                                           PROCESSING OF SPANNED
*                                           RECORDS - OPEN IS TO
*                                           CONSTRUCT A RECORD AREA
*                                           IF IT AUTOMATICALLY
*                                           CONSTRUCTS BUFFERS       */
*%DCL DCBBFTR  CHAR;
*%DCBBFTR ='''010''B';                   /* FOR BSAM CREATE BDAM
*                                           PROCESSING OF UNBLOCKED
*                                           SPANNED RECORDS -
*                                           SOFTWARE TRACK OVERFLOW.
*                                           FOR BSAM INPUT
*                                           PROCESSING OF UNBLOCKED
*                                           SPANNED RECORDS WITH
*                                           KEYS - RECORD OFFSET
*                                           PROCESSING.              */
*        7 DCBBFTS  BIT(1),              /* SIMPLE BUFFERING - BIT 3
*                                           IS ZERO                  */
*        7 DCBBFTKR BIT(1),              /* UNBLOCKED SPANNED
*                                           RECORDS - SOFTWARE
*                                           TRACK OVERFLOW (BDAM)    */
*        7 DCBBFTE  BIT(1),              /* EXCHANGE BUFFERING - BIT
*                                           1 IS ZERO                */
*       6 DCBBFTKD BIT(1),               /* DYNAMIC BUFFERING (BTAM) */
*       6 DCBH0    BIT(1),               /* HIERARCHY 0 MAIN STORAGE
*                                           - BIT 0 IS ZERO          */
*       6 DCBBFA   BIT(2),               /* BUFFER ALIGNMENT         */
*%DCL DCBBFAD  CHAR;
*%DCBBFAD ='''10''B';                    /* DOUBLEWORD BOUNDARY      */
*%DCL DCBBFAF1 CHAR;
*%DCBBFAF1='''01''B';                    /* FULLWORD NOT A
*                                           DOUBLEWORD BOUNDARY,
*                                           CODED IN  DCB MACRO
*                                           INSTRUCTION              */
*%DCL DCBBFAF2 CHAR;
*%DCBBFAF2='''11''B';                    /* FULLWORD NOT A
*                                           DOUBLEWORD BOUNDARY,
*                                           CODED IN  DD STATEMENT   */
*    3 DCBEODA     PTR(24)  BDY(BYTE),   /* ADDRESS OF A
*                                           USER-PROVIDED ROUTINE TO
*                                           HANDLE END-OF-DATA
*                                           CONDITIONS               */
*   2 DCBEXLST    PTR(31),               /* ADDRESS OF USER-PROVIDED
*                                           LIST OF EXITS            */
*    3 DCBRECFM    CHAR(1),              /* RECORD FORMAT            */
*     4 DCBRECLA BIT(3),                 /* RECORD LENGTH INDICATOR
*                                           - ASCII                  */
*%DCL DCBRECD  CHAR;
*%DCBRECD ='''001''B';                   /* ASCII VARIABLE RECORD
*                                           LENGTH                   */
*      5 DCBRECL  BIT(2),                /* RECORD LENGTH INDICATOR  */
*%DCL DCBRECF  CHAR;
*%DCBRECF ='''10''B';                    /* FIXED RECORD LENGTH      */
*%DCL DCBRECV  CHAR;
*%DCBRECV ='''01''B';                    /* VARIABLE RECORD LENGTH   */
*%DCL DCBRECU  CHAR;
*%DCBRECU ='''11''B';                    /* UNDEFINED RECORD LENGTH  */
*      5 DCBRECTO BIT(1),                /* TRACK OVERFLOW           */
*     4 DCBRECBR BIT(1),                 /* BLOCKED RECORDS          */
*     4 DCBRECSB BIT(1),                 /* FOR FIXED LENGTH RECORD
*                                           FORMAT - STANDARD
*                                           BLOCKS.  FOR VARIABLE
*                                           LENGTH RECORD  FORMAT -
*                                           SPANNED RECORDS          */
*     4 DCBRECCC BIT(2),                 /* CONTROL CHARACTER
*                                           INDICATOR                */
*%DCL DCBRECCA CHAR;
*%DCBRECCA='''10''B';                    /* ASA CONTROL CHARACTER    */
*%DCL DCBRECCM CHAR;
*%DCBRECCM='''01''B';                    /* MACHINE CONTROL
*                                           CHARACTER                */
*%DCL DCBRECC  CHAR;
*%DCBRECC ='''00''B';                    /* NO CONTROL CHARACTER     */
*     4 DCBRECKL BIT(1),                 /* KEY LENGTH (KEYLEN) WAS
*                                           SPECIFIED IN DCB  MACRO
*                                           INSTRUCTION              */
*    3 DCBEXLSA    PTR(24)  BDY(BYTE);   /* ADDRESS OF USER-PROVIDED
*                                           LIST OF EXITS            */
*
*%C5     :  ;
*%IF DSORGBX=0  %THEN
*    %GOTO C5B;
*%IF DSORGQX=0  %THEN                    /* IF DSORGQX IS SET TO ONE */
*    %GOTO C5A1;                         /* AND DSORGIS OR DSORGDA   */
*%IF DSORGIS=1  %THEN                    /* OR DSORGQS OR DSORGBS    */
*    %GOTO C5A;                          /* OR DSORGXE               */
*%IF DSORGDA=1  %THEN                    /* IS SET TO ONE,           */
*    %GOTO C5A;                          /* BRANCH TO C5A            */
*%IF DSORGQS=1  %THEN
*    %GOTO C5A;
*%IF DSORGBS=1  %THEN
*    %GOTO C5A;
*%IF DSORGXE=1  %THEN
*    %GOTO C5A;
*%C5A1: ;
*/*                     BTAM LINE GROUP INTERFACE                    */
*
*%IF DSORGIS=1  %THEN                    /* IF DSORGIS OR DSORGDA    */
*    %GOTO C5A;                          /* OR DSORGQS OR DSORGBS    */
*%IF DSORGDA=1  %THEN                    /* OR DSORGXE               */
*    %GOTO C5A;                          /* IS SET TO ONE,           */
*%IF DSORGQS=1  %THEN                    /* BRANCH TO C5A            */
*    %GOTO C5A;
*%IF DSORGBS=1  %THEN
*    %GOTO C5A;
*%IF DSORGXE=1  %THEN
*    %GOTO C5A;
*DECLARE 1 IHADCS12
*      BASED(ADDR(IHADCB)+20),
*   2 DCBBUFCB    PTR(31),               /* ADDRESS OF BUFFER POOL
*                                           CONTROL BLOCK            */
*    3 DCBBUFNO    PTR(8),               /* NUMBER OF BUFFERS
*                                           OBTAINED BY OPEN         */
*    3 DCBBUFCA    PTR(24)  BDY(BYTE),   /* ADDRESS OF BUFFER POOL
*                                           CONTROL BLOCK            */
*   2 DCBBUFL     FIXED(15),             /* BUFFER LENGTH            */
*   2 DCBDSORG    CHAR(2),               /* DATA SET ORGANIZATION
*                                           BEING USED               */
*    3 DCBDSRG1    CHAR(1),              /* FIRST BYTE OF DCBDSORG   */
*     4 DCBDSGIS BIT(1),                 /* IS - INDEXED SEQUENTIAL
*                                           ORGANIZATION             */
*     4 DCBDSGPS BIT(1),                 /* PS - PHYSICAL SEQUENTIAL
*                                           ORGANIZATION             */
*     4 DCBDSGDA BIT(1),                 /* DA - DIRECT ORGANIZATION */
*     4 DCBDSGCX BIT(1),                 /* CX - BTAM OR QTAM LINE
*                                           GROUP                    */
*     4 DCBDSGCQ BIT(1),                 /* CQ - QTAM DIRECT ACCESS
*                                           MESSAGE QUEUE            */
*     4 DCBDSGMQ BIT(1),                 /* MQ - QTAM PROBLEM
*                                           PROGRAM MESSAGE QUEUE    */
*     4 DCBDSGPO BIT(1),                 /* PO - PARTITIONED
*                                           ORGANIZATION             */
*     4 DCBDSGU  BIT(1),                 /* U - UNMOVABLE, THE DATA
*                                           CONTAINS  LOCATION
*                                           DEPENDENT INFORMATION    */
*    3 DCBDSRG2    CHAR(1),              /* SECOND BYTE OF DCBDSORG  */
*     4 DCBDSGGS BIT(1),                 /* GS - GRAPHICS
*                                           ORGANIZATION             */
*     4 DCBDSGTX BIT(1),                 /* TX - TCAM LINE GROUP     */
*     4 DCBDSGTQ BIT(1),                 /* TQ - TCAM MESSAGE QUEUE  */
*     4 *        BIT(1),                 /* RESERVED                 */
*     4 DCBACBM BIT(1),                  /* ACCESS METHOD CONTROL
*                                           BLOCK          ICBI DCB-1*/
*     4 DCBDSGTR   BIT(1),               /* TR - TCAM 3705           */
*     4 *       BIT(2),                  /*  RESERVED      ICBI DCB-1*/
*   2 DCBIOBAD    PTR(31),               /* BASE FOR ADDRESSING
*                                           IOB'S (BASE = ADDRESS OF
*                                           FIRST IOB MINUS LENGTH
*                                           OF AN IOB)               */
*    3 *           PTR(8),               /* DCBDEVTP - INDEX TO
*                                           DEVICE ENTRY IN THE
*                                           DEVICE I/O DIRECTORY     */
*    3 DCBIOBAA    PTR(24)  BDY(BYTE),   /* SAME AS DCBIOBAD ABOVE   */
*   2 DCBBFTEK    CHAR(1),               /* BUFFERING TECHNIQUE FLAG
*                                           BITS                     */
*    3 DCBHIARC    CHAR(1),              /* HIERARCHY FLAG BITS      */
*     4 DCBH1    BIT(1),                 /* HIERARCHY 1 MAIN STORAGE
*                                           - BIT 5 IS ZERO          */
*     4 DCBBFT   BIT(3),                 /* BUFFERING TECHNIQUE      */
*%DCL DCBBFTA  CHAR;
*%DCBBFTA ='''110''B';                   /* QSAM LOCATE MODE
*                                           PROCESSING OF SPANNED
*                                           RECORDS - OPEN IS TO
*                                           CONSTRUCT A RECORD AREA
*                                           IF IT AUTOMATICALLY
*                                           CONSTRUCTS BUFFERS       */
*%DCL DCBBFTR  CHAR;
*%DCBBFTR ='''010''B';                   /* FOR BSAM CREATE BDAM
*                                           PROCESSING OF UNBLOCKED
*                                           SPANNED RECORDS -
*                                           SOFTWARE TRACK OVERFLOW.
*                                           FOR BSAM INPUT
*                                           PROCESSING OF UNBLOCKED
*                                           SPANNED RECORDS WITH
*                                           KEYS - RECORD OFFSET
*                                           PROCESSING.              */
*      5 DCBBFTS  BIT(1),                /* SIMPLE BUFFERING - BIT 3
*                                           IS ZERO                  */
*      5 DCBBFTKR BIT(1),                /* UNBLOCKED SPANNED
*                                           RECORDS - SOFTWARE
*                                           TRACK OVERFLOW (BDAM)    */
*      5 DCBBFTE  BIT(1),                /* EXCHANGE BUFFERING - BIT
*                                           1 IS ZERO                */
*     4 DCBBFTKD BIT(1),                 /* DYNAMIC BUFFERING (BTAM) */
*     4 DCBH0    BIT(1),                 /* HIERARCHY 0 MAIN STORAGE
*                                           - BIT 0 IS ZERO          */
*     4 DCBBFA   BIT(2),                 /* BUFFER ALIGNMENT         */
*%DCL DCBBFAD  CHAR;
*%DCBBFAD ='''10''B';                    /* DOUBLEWORD BOUNDARY      */
*%DCL DCBBFAF1 CHAR;
*%DCBBFAF1='''01''B';                    /* FULLWORD NOT A
*                                           DOUBLEWORD BOUNDARY,
*                                           CODED IN  DCB MACRO
*                                           INSTRUCTION              */
*%DCL DCBBFAF2 CHAR;
*%DCBBFAF2='''11''B';                    /* FULLWORD NOT A
*                                           DOUBLEWORD BOUNDARY,
*                                           CODED IN  DD STATEMENT   */
*   2 *           CHAR(1),               /* DCBERROP - ERROR
*                                           RECOVERY PROCEDURE BITS  */
*   2 *           PTR(8),                /* DCBBUFCT - MAX NUMBER OF
*                                           READ BUFFERS             */
*   2 *           CHAR(1),               /* RESERVED                 */
*   2 DCBEXLST    PTR(31),               /* ADDRESS OF USER-PROVIDED
*                                           EXIT LIST                */
*    3 *           PTR(8),               /* DCBEIOBX - SIZE OF IOB   */
*    3 DCBEXLSA    PTR(24)  BDY(BYTE);   /* ADDRESS OF USER-PROVIDED
*                                           EXIT LIST                */
*
*%C5A    :  ;
*DECLARE 1 IHADCS13
*      BASED(ADDR(IHADCB)+33),
*   2 DCBERROP    CHAR(1),               /* ERROR RECOVERY PROCEDURE
*                                           BITS                     */
*    3 *        BIT(3),                  /* RESERVED                 */
*    3 DCBERPT  BIT(1),                  /* ON-LINE TEST FACILITIES
*                                           TO BE USED               */
*    3 DCBERPC  BIT(1),                  /* THRESHOLD AND CUMULATIVE
*                                           ERROR COUNTS TO  BE
*                                           MAINTAINED               */
*    3 DCBERPW  BIT(1),                  /* TEXT-WRITE ERRORS TO BE
*                                           RETRIED                  */
*    3 DCBERPR  BIT(1),                  /* TEXT-READ ERRORS TO BE
*                                           RETRIED                  */
*    3 DCBERPN  BIT(1),                  /* IF ZERO, BASIC ERP TO BE
*                                           FOLLOWED ---  IF ONE, NO
*                                           ERP TO BE FOLLOWED       */
*   2 DCBBUFCT    PTR(8);                /* CONTAINS MAXIMUM NUMBER
*                                           OF BUFFERS TO BE
*                                           OBTAINED BY BTAM FOR
*                                           READ OPERATION  (DYNAMIC
*                                           BUFFERING ONLY)          */
*
*%IF DSORGQX=1  %THEN                    /* IF DSORGQX OR DSORGTX    */
*    %GOTO C5B;                          /* IS SET TO ONE,           */
*%IF DSORGTX=1  %THEN                    /* BRANCH TO C5B            */
*    %GOTO C5B;
*DECLARE 1 IHADCS14
*      BASED(ADDR(IHADCB)+28),
*   2 DCBDEVTP    PTR(8);                /* INDEX TO DEVICE ENTRY IN
*                                           THE DEVICE I/O
*                                           DIRECTORY                */
*
*DECLARE 1 IHADCS15
*      BASED(ADDR(IHADCB)+36),
*   2 DCBEIOBX    PTR(8);                /* SIZE OF EXTENDED IOB.
*                                           SIZE OF AN IOB
*                                           ASSOCIATED WITH THIS DCB */
*
*%C5B    :  ;
*%IF DSORGTX=0  %THEN
*    %GOTO C5B1;
*/*                     TCAM LINE GROUP INTERFACE                    */
*
*DECLARE 1 IHADCS16
*      BASED(ADDR(IHADCB)+20),
*   2 DCBMHA      PTR(31),               /* SAME AS DCBMH BELOW      */
*    3 DCBBUFOU    CHAR(1),              /* NUMBER OF OUTPUT BUFFERS
*                                           (BITS 4-7)               */
*     4 DCBBUFIN    CHAR(1),             /* NUMBER OF INPUT BUFFERS
*                                           (BITS 0-3)               */
*      5 DCBBFIN  BIT(4),                /* NUMBER OF BUFFERS
*                                           ASSIGNED  INITIALLY FOR
*                                           RECEIVING OPERATIONS,
*                                           FOR   EACH LINE IN LINE
*                                           GROUP                    */
*      5 DCBBFOUT BIT(4),                /* NUMBER OF BUFFERS
*                                           ASSIGNED  INITIALLY FOR
*                                           SENDING OPERATIONS, FOR
*                                           EACH LINE IN LINE GROUP  */
*    3 DCBMH       PTR(24)  BDY(BYTE),   /* ADDRESS OF MESSAGE
*                                           HANDLER FOR THIS LINE
*                                           GROUP                    */
*   2 *           PTR(8),                /* DCBINTVL - NUMBER OF
*                                           SECONDS OF  INVITATION
*                                           DELAY                    */
*   2 DCBPCI      CHAR(1),               /* PROGRAM CONTROLLED
*                                           INTERRUPTION HANDLING    */
*    3 DCBPCIX1 BIT(1),                  /* PCI=(X,)       ICBI DCB-8*/
*    3 DCBPCIX2 BIT(1),                  /* PCI=(,X)       ICBI DCB-8*/
*    3 DCBPCIA1 BIT(1),                  /* PCI=(A,)                 */
*    3 DCBPCIA2 BIT(1),                  /* PCI=(,A)                 */
*    3 DCBPCIN1 BIT(1),                  /* PCI=(N,)                 */
*    3 DCBPCIN2 BIT(1),                  /* PCI=(,N)                 */
*    3 DCBPCIR1 BIT(1),                  /* PCI=(R,)                 */
*    3 DCBPCIR2 BIT(1),                  /* PCI=(,R)                 */
*%IF DSORGIS=1  %THEN                    /* IF DSORGIS OR DSORGBX    */
*    %GOTO C5B2;                         /* OR DSORGDA OR DSORGQX    */
*%IF DSORGBX=1  %THEN                    /* OR DSORGCQ OR DSORGQS    */
*    %GOTO C5B2;                         /* OR DSORGBS OR DSORGXE    */
*%IF DSORGDA=1  %THEN                    /* IS SET TO ONE,           */
*    %GOTO C5B2;                         /* BRANCH TO C5B2           */
*%IF DSORGQX=1  %THEN
*    %GOTO C5B2;
*%IF DSORGCQ=1  %THEN
*    %GOTO C5B2;
*%IF DSORGQS=1  %THEN
*    %GOTO C5B2;
*%IF DSORGBS=1  %THEN
*    %GOTO C5B2;
*%IF DSORGXE=1  %THEN
*    %GOTO C5B2;
*   2 DCBDSORG    CHAR(2),               /* DATA SET ORGANIZATION
*                                           BEING USED               */
*    3 DCBDSRG1    CHAR(1),              /* FIRST BYTE OF DCBDSORG   */
*     4 DCBDSGIS BIT(1),                 /* IS - INDEXED SEQUENTIAL
*                                           ORGANIZATION             */
*     4 DCBDSGPS BIT(1),                 /* PS - PHYSICAL SEQUENTIAL
*                                           ORGANIZATION             */
*     4 DCBDSGDA BIT(1),                 /* DA - DIRECT ORGANIZATION */
*     4 DCBDSGCX BIT(1),                 /* CX - BTAM OR QTAM LINE
*                                           GROUP                    */
*     4 DCBDSGCQ BIT(1),                 /* CQ - QTAM DIRECT ACCESS
*                                           MESSAGE QUEUE            */
*     4 DCBDSGMQ BIT(1),                 /* MQ - QTAM PROBLEM
*                                           PROGRAM MESSAGE QUEUE    */
*     4 DCBDSGPO BIT(1),                 /* PO - PARTITIONED
*                                           ORGANIZATION             */
*     4 DCBDSGU  BIT(1),                 /* U - UNMOVABLE, THE DATA
*                                           CONTAINS  LOCATION
*                                           DEPENDENT INFORMATION    */
*    3 DCBDSRG2    CHAR(1),              /* SECOND BYTE OF DCBDSORG  */
*     4 DCBDSGGS BIT(1),                 /* GS - GRAPHICS
*                                           ORGANIZATION             */
*     4 DCBDSGTX BIT(1),                 /* TX - TCAM LINE GROUP     */
*     4 DCBDSGTQ BIT(1),                 /* TQ - TCAM MESSAGE QUEUE  */
*     4 *        BIT(1),                 /* RESERVED                 */
*     4 DCBACBM BIT(1),                  /* ACCESS METHOD CONTROL
*                                           BLOCK          ICBI DCB-1*/
*     4 DCBDSGTR   BIT(1),               /* TR - TCAM 3705           */
*     4 *       BIT(2),                  /*  RESERVED      ICBI DCB-1*/
*%GOTO C5B3   ;
*%C5B2   :  ;
*   2 *           CHAR(1),               /* DCBDSRG1 - FIRST BYTE OF
*                                           DCBDSORG                 */
*   2 *           CHAR(1),               /* DCBDSRG2 - SECOND BYTE
*                                           OF DCBDSORG              */
*%C5B3   :  ;
*   2 DCBBUFMA    PTR(8);                /* MAXIMUM NUMBER OF
*                                           BUFFERS TO BE USED FOR
*                                           DATA TRANSFER FOR EACH
*                                           LINE IN THIS GROUP       */
*
*%C5B1   :  ;
*%IF DSORGQX=1  %THEN                    /* IF DSORGQX AND DSORGTX   */
*    %GOTO C5B4;                         /* ARE BOTH SET TO ZERO,    */
*%IF DSORGTX=0  %THEN                    /* BRANCH TO C6             */
*    %GOTO C6;
*%C5B4 : ;
*/*                     QTAM LINE GROUP INTERFACE                    */
*
*DECLARE 1 IHADCS17
*      BASED(ADDR(IHADCB)+20),
*   2 DCBCLPS     PTR(31),               /* ADDRESS OF LINE
*                                           PROCEDURE SPECIFICATION
*                                           ROUTINE                  */
*    3 DCBBUFRQ    PTR(8),               /* NUMBER OF BUFFERS
*                                           REQUESTED FOR A READ  OR
*                                           WRITE OPERATION          */
*    3 DCBCLPSA    PTR(24)  BDY(BYTE),   /* SAME AS DCBCLPS ABOVE    */
*   2 DCBINTVL    PTR(8),                /* NUMBER OF SECONDS OF
*                                           INTENTIONAL DELAY
*                                           BETWEEN PASSES THROUGH A
*                                           POLLING LIST  FOR
*                                           NONSWITCHED LINES        */
*   2 *           CHAR(1),               /* RESERVED                 */
*%IF DSORGIS=1  %THEN                    /* IF DSORGIS OR DSORGBX    */
*    %GOTO C5C;                          /* OR DSORGDA OR DSORGQS    */
*%IF DSORGBX=1  %THEN                    /* OR DSORGBS OR DSORGXE    */
*    %GOTO C5C;                          /* OR DSORGTX               */
*%IF DSORGDA=1  %THEN                    /* IS SET TO ONE,           */
*    %GOTO C5C;                          /* BRANCH TO C5C            */
*%IF DSORGQS=1  %THEN
*    %GOTO C5C;
*%IF DSORGBS=1  %THEN
*    %GOTO C5C;
*%IF DSORGXE=1  %THEN
*    %GOTO C5C;
*%IF DSORGTX=1  %THEN
*    %GOTO C5C;
*   2 DCBDSORG    CHAR(2),               /* DATA SET ORGANIZATION
*                                           BEING USED               */
*    3 DCBDSRG1    CHAR(1),              /* FIRST BYTE OF DCBDSORG   */
*     4 DCBDSGIS BIT(1),                 /* IS - INDEXED SEQUENTIAL
*                                           ORGANIZATION             */
*     4 DCBDSGPS BIT(1),                 /* PS - PHYSICAL SEQUENTIAL
*                                           ORGANIZATION             */
*     4 DCBDSGDA BIT(1),                 /* DA - DIRECT ORGANIZATION */
*     4 DCBDSGCX BIT(1),                 /* CX - BTAM OR QTAM LINE
*                                           GROUP                    */
*     4 DCBDSGCQ BIT(1),                 /* CQ - QTAM DIRECT ACCESS
*                                           MESSAGE QUEUE            */
*     4 DCBDSGMQ BIT(1),                 /* MQ - QTAM PROBLEM
*                                           PROGRAM MESSAGE QUEUE    */
*     4 DCBDSGPO BIT(1),                 /* PO - PARTITIONED
*                                           ORGANIZATION             */
*     4 DCBDSGU  BIT(1),                 /* U - UNMOVABLE, THE DATA
*                                           CONTAINS  LOCATION
*                                           DEPENDENT INFORMATION    */
*    3 DCBDSRG2    CHAR(1),              /* SECOND BYTE OF DCBDSORG  */
*     4 DCBDSGGS BIT(1),                 /* GS - GRAPHICS
*                                           ORGANIZATION             */
*     4 DCBDSGTX BIT(1),                 /* TX - TCAM LINE GROUP     */
*     4 DCBDSGTQ BIT(1),                 /* TQ - TCAM MESSAGE QUEUE  */
*     4 *        BIT(1),                 /* RESERVED                 */
*     4 DCBACBM BIT(1),                  /* ACCESS METHOD CONTROL
*                                           BLOCK          ICBI DCB-1*/
*     4 DCBDSGTR   BIT(1),               /* TR - TCAM 3705           */
*     4 *       BIT(2),                  /*  RESERVED      ICBI DCB-1*/
*   2 DCBIOBAD    PTR(31),               /* ADDRESS OF FIRST IOB     */
*    3 DCBDEVTP    PTR(8),               /* DEVICE TYPE POINTER      */
*    3 DCBIOBAA    PTR(24)  BDY(BYTE),   /* ADDRESS OF FIRST IOB     */
*   2 DCBLCBAD    PTR(31),               /* BASE FOR ADDRESSING
*                                           LCB'S (BASE = ADDRESS OF
*                                           FIRST LCB MINUS LENGTH
*                                           OF ONE LCB)              */
*    3 DCBCPRI     CHAR(1),              /* COMMUNICATION PRIORITY
*                                           BITS                     */
*     4 *        BIT(5),                 /* RESERVED                 */
*     4 DCBCPR   BIT(1),                 /* RECEIVING HAS PRIORITY   */
*     4 DCBCPE   BIT(1),                 /* RECEIVING AND SENDING
*                                           HAVE EQUAL PRIORITY      */
*     4 DCBCPS   BIT(1),                 /* SENDING HAS PRIORITY     */
*    3 DCBLCBA     PTR(24)  BDY(BYTE),   /* SAME AS DCBLCBAD ABOVE   */
*   2 DCBEXLST    PTR(31),               /* ADDRESS OF EXIT LIST     */
*    3 DCBEIOBX    PTR(8),               /* EXTENDED IOB INDEX. SIZE
*                                           OF LCB.                  */
*    3 DCBEXLSA    PTR(24)  BDY(BYTE);   /* ADDRESS OF EXIT LIST     */
*
*%GOTO C6     ;
*%C5C    :  ;
*   2 *           CHAR(1),               /* DCBDSRG1 - FIRST BYTE OF
*                                           DCBDSORG                 */
*   2 *           CHAR(1),               /* DCBDSRG2 - SECOND BYTE
*                                           OF DCBDSORG              */
*%IF DSORGTX=0  %THEN                    /* IF DSORGTX               */
*    %GOTO C5C1;                         /* IS SET TO ZERO,          */
*%IF DSORGIS=1  %THEN                    /* OR DSORGIS OR DSORGBX    */
*    %GOTO C5C1;                         /* OR DSORGDA OR DSORGCQ    */
*%IF DSORGBX=1  %THEN                    /* OR DSORGQS OR DSORGBS    */
*    %GOTO C5C1;                         /* OR DSORGXE               */
*%IF DSORGDA=1  %THEN                    /* IS SET TO ONE,           */
*    %GOTO C5C1;                         /* BRANCH TO C5C1           */
*%IF DSORGCQ=1  %THEN
*    %GOTO C5C1;
*%IF DSORGQS=1  %THEN
*    %GOTO C5C1;
*%IF DSORGBS=1  %THEN
*    %GOTO C5C1;
*%IF DSORGXE=1  %THEN
*    %GOTO C5C1;
*   2 DCBIOBAD    PTR(31),               /* ADDRESS OF FIRST IOB     */
*    3 DCBDEVTP    PTR(8),               /* DEVICE TYPE POINTER      */
*    3 DCBIOBAA    PTR(24)  BDY(BYTE);   /* ADDRESS OF FIRST IOB     */
*
*%GOTO C5C2   ;
*%C5C1   :  ;
*   2 DCBDEVTP    PTR(8),                /* DEVICE TYPE POINTER      */
*   2 *           PTR(24)  BDY(BYTE);    /* DCBIOBAA - ADDRESS OF
*                                           FIRST IOB                */
*
*%C5C2   :  ;
*%IF DSORGTX=0  %THEN
*    %GOTO C5D;
*DECLARE 1 IHADCS18
*      BASED(ADDR(IHADCB)+32),
*   2 DCBTRANA    PTR(31),               /* ADDRESS OF TRANSLATION
*                                           TABLE                    */
*    3 *           CHAR(1),              /* DCBCPRI - COMMUNICATION
*                                           PRIORITY BITS            */
*    3 DCBTRANS    PTR(24)  BDY(BYTE);   /* ADDRESS OF TRANSLATION
*                                           TABLE                    */
*
*%C5D    :  ;
*DECLARE 1 IHADCS19
*      BASED(ADDR(IHADCB)+32),
*   2 DCBLCBAD    PTR(31),               /* BASE FOR ADDRESSING
*                                           LCB'S (BASE = ADDRESS OF
*                                           FIRST LCB MINUS LENGTH
*                                           OF ONE LCB)              */
*    3 DCBCPRI     CHAR(1),              /* COMMUNICATION PRIORITY
*                                           BITS                     */
*     4 *        BIT(5),                 /* RESERVED                 */
*     4 DCBCPR   BIT(1),                 /* RECEIVING HAS PRIORITY   */
*     4 DCBCPE   BIT(1),                 /* RECEIVING AND SENDING
*                                           HAVE EQUAL PRIORITY      */
*     4 DCBCPS   BIT(1),                 /* SENDING HAS PRIORITY     */
*    3 DCBLCBA     PTR(24)  BDY(BYTE),   /* SAME AS DCBLCBAD ABOVE   */
*%IF DSORGIS=1  %THEN                    /* IF DSORGIS OR DSORGBX    */
*    %GOTO C5E;                          /* OR DSORGDA OR DSORGQS    */
*%IF DSORGBX=1  %THEN                    /* OR DSORGBS OR DSORGXE    */
*    %GOTO C5E;                          /* IS SET TO ONE,           */
*%IF DSORGDA=1  %THEN                    /* BRANCH TO C5E            */
*    %GOTO C5E;
*%IF DSORGQS=1  %THEN
*    %GOTO C5E;
*%IF DSORGBS=1  %THEN
*    %GOTO C5E;
*%IF DSORGXE=1  %THEN
*    %GOTO C5E;
*   2 DCBEXLST    PTR(31),               /* ADDRESS OF EXIT LIST     */
*    3 DCBEIOBX    PTR(8),               /* EXTENDED IOB INDEX. SIZE
*                                           OF LCB                   */
*    3 DCBEXLSA    PTR(24)  BDY(BYTE);   /* ADDRESS OF EXIT LIST     */
*
*%GOTO C6     ;
*%C5E    :  ;
*   2 DCBEIOBX    PTR(8),                /* EXTENDED IOB INDEX. SIZE
*                                           OF LCB.                  */
*   2 *           PTR(24)  BDY(BYTE);    /* DCBEXLSA - ADDRESS OF
*                                           EXIT LIST                */
*
*%C6     :  ;
*%IF DSORGMQ=1  %THEN                    /* IF DSORGMQ AND DSORGTQ   */
*    %GOTO C61;                          /* ARE BOTH SET TO ZERO,    */
*%IF DSORGTQ=0  %THEN                    /* BRANCH TO C7             */
*    %GOTO C7;
*%C61 : ;
*/*                     QTAM PROBLEM PROGRAM MESSAGE QUEUE INTERFACE */
*
*DECLARE 1 IHADCS20
*      BASED(ADDR(IHADCB)+20),
*   2 DCBTRMAD    PTR(31),               /* ADDRESS OF USER-PROVIDED
*                                           AREA IN WHICH  THE
*                                           TERMINAL NAME IS STORED  */
*%IF DSORGQX=1  %THEN                    /* IF DSORGQX OR DSORGTX    */
*    %GOTO C6A;                          /* IS SET TO ONE,           */
*%IF DSORGTX=1  %THEN                    /* BRANCH TO C6A            */
*    %GOTO C6A;
*    3 DCBBUFRQ    PTR(8),               /* NUMBER OF BUFFERS TO BE
*                                           FILLED FROM THE  DIRECT
*                                           ACCESS QUEUE             */
*%GOTO C6B    ;
*%C6A    :  ;
*    3 *           PTR(8),               /* DCBBUFRQ - NUMBER OF
*                                           BUFFERS TO BE FILLED
*                                           FROM THE DIRECT ACCESS
*                                           QUEUE                    */
*%C6B    :  ;
*    3 DCBTRMA     PTR(24)  BDY(BYTE),   /* SAME AS DCBTRMAD ABOVE   */
*   2 DCBSOWA     FIXED(15),             /* SIZE OF USER-PROVIDED
*                                           WORK AREA                */
*%IF DSORGIS=1  %THEN                    /* IF DSORGIS OR DSORGBX    */
*    %GOTO C6C;                          /* OR DSORGDA OR DSORGQX    */
*%IF DSORGBX=1  %THEN                    /* OR DSORGQS OR DSORGBS    */
*    %GOTO C6C;                          /* OR DSORGXE OR DSORGTX    */
*%IF DSORGDA=1  %THEN                    /* IS SET TO ONE,           */
*    %GOTO C6C;                          /* BRANCH TO C6C            */
*%IF DSORGQX=1  %THEN
*    %GOTO C6C;
*%IF DSORGQS=1  %THEN
*    %GOTO C6C;
*%IF DSORGBS=1  %THEN
*    %GOTO C6C;
*%IF DSORGXE=1  %THEN
*    %GOTO C6C;
*%IF DSORGTX=1  %THEN
*    %GOTO C6C;
*   2 DCBDSORG    CHAR(2),               /* DATA SET ORGANIZATION
*                                           BEING USED               */
*    3 DCBDSRG1    CHAR(1),              /* FIRST BYTE OF DCBDSORG   */
*     4 DCBDSGIS BIT(1),                 /* IS - INDEXED SEQUENTIAL
*                                           ORGANIZATION             */
*     4 DCBDSGPS BIT(1),                 /* PS - PHYSICAL SEQUENTIAL
*                                           ORGANIZATION             */
*     4 DCBDSGDA BIT(1),                 /* DA - DIRECT ORGANIZATION */
*     4 DCBDSGCX BIT(1),                 /* CX - BTAM OR QTAM LINE
*                                           GROUP                    */
*     4 DCBDSGCQ BIT(1),                 /* CQ - QTAM DIRECT ACCESS
*                                           MESSAGE QUEUE            */
*     4 DCBDSGMQ BIT(1),                 /* MQ - QTAM PROBLEM
*                                           PROGRAM MESSAGE QUEUE    */
*     4 DCBDSGPO BIT(1),                 /* PO - PARTITIONED
*                                           ORGANIZATION             */
*     4 DCBDSGU  BIT(1),                 /* U - UNMOVABLE, THE DATA
*                                           CONTAINS  LOCATION
*                                           DEPENDENT INFORMATION    */
*    3 DCBDSRG2    CHAR(1),              /* SECOND BYTE OF DCBDSORG  */
*     4 DCBDSGGS BIT(1),                 /* GS - GRAPHICS
*                                           ORGANIZATION             */
*     4 DCBDSGTX BIT(1),                 /* TX - TCAM LINE GROUP     */
*     4 DCBDSGTQ BIT(1),                 /* TQ - TCAM MESSAGE QUEUE  */
*     4 *        BIT(1),                 /* RESERVED                 */
*     4 DCBACBM BIT(1),                  /* ACCESS METHOD CONTROL
*                                           BLOCK          ICBI DCB-1*/
*     4 DCBDSGTR   BIT(1),               /* TR - TCAM 3705           */
*     4 *       BIT(2),                  /*  RESERVED      ICBI DCB-1*/
*   2 DCBIOBAD    PTR(31),               /* BEFORE OPEN - ADDRESS OF
*                                           AVT ---  AFTER OPEN -
*                                           BASE FOR ADDRESSING
*                                           IOB'S   (BASE = ADDRESS
*                                           OF FIRST IOB MINUS
*                                           LENGTH   OF ONE IOB)     */
*    3 *           PTR(8),               /* DCBBUFMA - MAXIMUM
*                                           NUMBER OF BUFFERS TO  BE
*                                           USED FOR DATA TRANSFER
*                                           FOR EACH LINE  IN THIS
*                                           GROUP                    */
*    3 DCBIOBAA    PTR(24)  BDY(BYTE);   /* SAME AS DCBIOBAD ABOVE   */
*%GOTO C6D    ;
*%C6C    :  ;
*   2 *           CHAR(1),               /* DCBDSRG1 - FIRST BYTE OF
*                                           DCBDSORG                 */
*   2 *           CHAR(1),               /* DCBDSRG2 - SECOND BYTE
*                                           OF DCBDSORG              */
*   2 *           PTR(31);               /* DCBIOBAD - BASE FOR
*                                           ADDRESSING IOB'S         */
*%C6D    :  ;
*
*DECLARE 1 IHADCS21
*      BASED(ADDR(IHADCB)+28),
*   2 DCBSEGAD    PTR(31),               /* ADDRESS OF CURRENT
*                                           SEGMENT                  */
*%IF DSORGTQ=0  %THEN
*    %GOTO C6D1;
*   2 DCBTHRES    PTR(8);                /* FOR NON-REUSABLE MESSAGE
*                                           QUEUE RECORDS,
*                                           PERCENTAGE OF
*                                           NON-REUSABLE DISK
*                                           MESSAGE   QUEUE RECORDS
*                                           TO BE USED BEFORE A
*                                           FLUSH   CLOSEDOWN OF THE
*                                           SYSTEM IS INITIATED.
*                                           FOR REUSABLE MESSAGE
*                                           QUEUE RECORDS AND
*                                           CHECKPOINT RECORDS, THIS
*                                           FIELD IS  RESERVED       */
*%GOTO C6D2   ;
*%C6D1   :  ;
*   2 *           CHAR(1);               /* RESERVED                 */
*%C6D2   :  ;
*
*%IF DSORGIS=1  %THEN                    /* IF DSORGIS OR DSORGDA    */
*    %GOTO C7;                           /* OR DSORGQS OR DSORGBS    */
*%IF DSORGDA=1  %THEN                    /* OR DSORGXE               */
*    %GOTO C7;                           /* IS SET TO ONE,           */
*%IF DSORGQS=1  %THEN                    /* BRANCH TO C7             */
*    %GOTO C7;
*%IF DSORGBS=1  %THEN
*    %GOTO C7;
*%IF DSORGXE=1  %THEN
*    %GOTO C7;
*DECLARE 1 IHADCS22
*      BASED(ADDR(IHADCB)+32),
*   2 DCBEODAD    PTR(31),               /* ADDRESS OF USER-PROVIDED
*                                           ROUTINE                  */
*%IF DSORGBX=1  %THEN                    /* IF DSORGBX OR DSORGQX    */
*    %GOTO C6E;                          /* OR DSORGTX               */
*%IF DSORGQX=1  %THEN                    /* IS SET TO ONE,           */
*    %GOTO C6E;                          /* BRANCH TO C6E            */
*%IF DSORGTX=1  %THEN
*    %GOTO C6E;
*   2 DCBEXLST    PTR(31),               /* ADDRESS OF EXIT LIST     */
*%GOTO C6F    ;
*%C6E    :  ;
*   2 *           PTR(31),               /* DCBEXLST - ADDRESS OF
*                                           EXIT LIST                */
*%C6F    :  ;
*    3 DCBRECFM    CHAR(1),              /* RECORD FORMAT            */
*%DCL DCBRECR  CHAR;
*%DCBRECR ='''02''X';                    /* RECORD                   */
*%DCL DCBRECG  CHAR;
*%DCBRECG ='''04''X';                    /* MESSAGE                  */
*%DCL DCBRECS  CHAR;
*%DCBRECS ='''08''X';                    /* SEGMENT                  */
*%IF DSORGBX=1  %THEN                    /* IF DSORGBX OR DSORGQX    */
*    %GOTO C6G;                          /* OR DSORGTX               */
*%IF DSORGQX=1  %THEN                    /* IS SET TO ONE,           */
*    %GOTO C6G;                          /* BRANCH TO C6G            */
*%IF DSORGTX=1  %THEN
*    %GOTO C6G;
*    3 DCBEXLSA    PTR(24)  BDY(BYTE);   /* ADDRESS OF EXIT LIST     */
*%GOTO C7     ;
*%C6G    :  ;
*    3 *           PTR(24)  BDY(BYTE);   /* DCBEXLSA - ADDRESS OF
*                                           EXIT LIST                */
*%C7     :  ;
*
*%IF DSORGCQ=0  %THEN                    /* IF DSORGCQ               */
*    %GOTO C8;                           /* IS SET TO ZERO           */
*%IF DSORGIS=1  %THEN                    /* OR DSORGIS OR DSORGBX    */
*    %GOTO C8;                           /* OR DSORGDA OR DSORGQX    */
*%IF DSORGBX=1  %THEN                    /* OR DSORGQS OR DSORGBS    */
*    %GOTO C8;                           /* OR DSORGXE               */
*%IF DSORGDA=1  %THEN                    /* IS SET TO ONE,           */
*    %GOTO C8;                           /* BRANCH TO C8             */
*%IF DSORGQX=1  %THEN
*    %GOTO C8;
*%IF DSORGQS=1  %THEN
*    %GOTO C8;
*%IF DSORGBS=1  %THEN
*    %GOTO C8;
*%IF DSORGXE=1  %THEN
*    %GOTO C8;
*/*                     QTAM DIRECT ACCESS MESSAGE QUEUE             */
*
*DECLARE 1 IHADCS23
*      BASED(ADDR(IHADCB)+20),
*   2 DCBBUFCB    PTR(31),               /* ADDRESS OF TERMINAL
*                                           TABLE                    */
*    3 DCBBUFNO    CHAR(1),              /* RESERVED                 */
*    3 DCBBUFCA    PTR(24)  BDY(BYTE),   /* ADDRESS OF TERMINAL
*                                           TABLE                    */
*   2 DCBBUFL     FIXED(15),             /* SIZE OF THE DATA IN
*                                           BUFFER EQUATED TO
*                                           IECKBUFL                 */
*   2 DCBDSORG    CHAR(2),               /* DATA SET ORGANIZATION
*                                           BEING USED               */
*    3 DCBDSRG1    CHAR(1),              /* FIRST BYTE OF DCBDSORG   */
*     4 DCBDSGIS BIT(1),                 /* IS - INDEXED SEQUENTIAL
*                                           ORGANIZATION             */
*     4 DCBDSGPS BIT(1),                 /* PS - PHYSICAL SEQUENTIAL
*                                           ORGANIZATION             */
*     4 DCBDSGDA BIT(1),                 /* DA - DIRECT ORGANIZATION */
*     4 DCBDSGCX BIT(1),                 /* CX - BTAM OR QTAM LINE
*                                           GROUP                    */
*     4 DCBDSGCQ BIT(1),                 /* CQ - QTAM DIRECT ACCESS
*                                           MESSAGE QUEUE            */
*     4 DCBDSGMQ BIT(1),                 /* MQ - QTAM PROBLEM
*                                           PROGRAM MESSAGE QUEUE    */
*     4 DCBDSGPO BIT(1),                 /* PO - PARTITIONED
*                                           ORGANIZATION             */
*     4 DCBDSGU  BIT(1),                 /* U - UNMOVABLE, THE DATA
*                                           CONTAINS  LOCATION
*                                           DEPENDENT INFORMATION    */
*    3 DCBDSRG2    CHAR(1),              /* SECOND BYTE OF DCBDSORG  */
*     4 DCBDSGGS BIT(1),                 /* GS - GRAPHICS
*                                           ORGANIZATION             */
*     4 DCBDSGTX BIT(1),                 /* TX - TCAM LINE GROUP     */
*     4 DCBDSGTQ BIT(1),                 /* TQ - TCAM MESSAGE QUEUE  */
*     4 *        BIT(1),                 /* RESERVED                 */
*     4 DCBACBM BIT(1),                  /* ACCESS METHOD CONTROL
*                                           BLOCK          ICBI DCB-1*/
*     4 DCBDSGTR   BIT(1),               /* TR - TCAM 3705           */
*     4 *       BIT(2),                  /*  RESERVED      ICBI DCB-1*/
*   2 DCBIOBAD    PTR(31);               /* ADDRESS OF IOB           */
*
*%C8     :  ;
*%IF DSORGTR=0  %THEN                    /* IF NOT TR BYPASS 3705    */
*    %GOTO C8A8;                         /* EXPANSION          S22024*/
*
*DECLARE 1 IHADCS2K
*      BASED(ADDR(IHADCB)+20),           /*                    S22024*/
*   2 DCBDUMPD    PTR(31),               /* FULL WORD LABEL-SAME AS
*                                           DCBDUMPA           S22024*/
*    3 DCBUNITN   BIT(8),                /* NUMBER OF UNITS FOR READ
*                                           FOLLOWING ATTENTIONS22024*/
*    3 DCBDUMPA   PTR(24)  BDY(BYTE),    /* ADDRESS OF THE DCB USED
*                                           FOR DUMPING THE 3705     */
*   2 *           CHAR(1),               /* RESERVED           S22024*/
*   2 DCBTRSTA    CHAR(1),               /* STATUS BYTE. WHEN SET TO
*                                           1,THE INDICATORS HAVE THE
*                                           SPECIFIED MEANING  S22024*/
*    3 DCBAUTOI  BIT(1),                 /* IPLAUTO=YES SPECIFIED
*                                           IN THE DCB         S22024*/
*    3 DCBAUTOD  BIT(1),                 /* DMPAUTO=YES WAS SPECIFIED
*                                           IN THE DCB MACRO   S22024*/
*    3 DCBINITL  BIT(1),                 /* BRINGUP=YES WAS SPECIFIED
*                                           IN THE DCB MACRO   S22024*/
*    3 DCBRSTRT  BIT(1),                 /* RESTART IN PROCESS S22024*/
*    3 DCBIPLED  BIT(1),                 /* 3705 HAS BEEN IPL'DS22024*/
*    3 DCBBAKUP  BIT(1),                 /* BACKUP=YES WAS SPECIFIED
*                                           IN THE DCB MACRO   S22024*/
*    3 DCBNIDLE  BIT(1),                 /* IDLE=NO WAS SPECIFIED
*                                           IN THE OPEN MACRO OR
*                                           WAS IMPLIED BY DEFAULT   */
*    3 DCBCHNGL  BIT(1),                 /* IPL TEXT HAS BEEN
*                                           CHANGED            S22024*/
*%IF DSORGCQ=1  %THEN                    /* IF DSORGCQ               */
*    %GOTO C8A0;                         /*      OR            S22024*/
*%IF DSORGIS=1  %THEN                    /*    DSORGIS               */
*    %GOTO C8A0;                         /*      OR            S22024*/
*%IF DSORGBX=1  %THEN                    /*    DSORGBX               */
*    %GOTO C8A0;                         /*      OR            S22024*/
*%IF DSORGDA=1  %THEN                    /*    DSORGDA               */
*    %GOTO C8A0;                         /*      OR            S22024*/
*%IF DSORGQX=1  %THEN                    /*    DSORGQX               */
*    %GOTO C8A0;                         /*      OR            S22024*/
*%IF DSORGQS=1  %THEN                    /*    DSORGQS               */
*    %GOTO C8A0;                         /*      OR            S22024*/
*%IF DSORGBS=1  %THEN                    /*    DSORGBS               */
*    %GOTO C8A0;                         /*      OR            S22024*/
*%IF DSORGTX=1  %THEN                    /*   DSORGTX                */
*   %GOTO  C8A0;                         /*      OR            S22024*/
*%IF DSORGMQ=1  %THEN                    /*    DSORGMQ               */
*   %GOTO C8A0;                          /*      OR            S22024*/
*%IF DSORGTQ=1  %THEN                    /*    DSORGTQ               */
*    %GOTO C8A0;                         /*      OR            S22024*/
*%IF DSORGXE=1  %THEN                    /*    DSORGXE               */
*    %GOTO C8A0;                         /* BYPASS 3705 EXPANSION    */
*   2 DCBDSORG    CHAR(2),               /* DATA SET ORGANIZATION
*                                           BEING USED         S22024*/
*    3 DCBDSRG1   CHAR(1),               /* FIRST BYTE OF DCBDSORG   */
*    3 DCBDSRG2   CHAR(1),               /* SECOND BYTE OF DCBDSORG  */
*     4 *         BIT(5),                /* FIRST 5 BITS  DSORG      */
*     4 DCBDSGTR  BIT(1),                /* DSORG=TR SPECIFIED S22024*/
*   2 DCBIOBAD    PTR(31),               /* ADDRESS OF IOB     S22024*/
*%GOTO  C8A2;
*%C8A0   : ;                             /*                    S22024*/
*   2 *           CHAR(2),               /* DCBDSORG           S22024*/
*   2 *           PTR(31),               /* DCBIOBAD           S22024*/
*%C8A2   :  ;
*   2 DCBRNCKD    PTR(31),               /* FULL WORD ADDR-DCBRNCKA  */
*    3 *          CHAR(1),               /* RESERVED           S22024*/
*    3 DCBRNCKA   PTR(24)  BDY(BYTE),    /* ADDRESS OF THE DCB USED
*                                           TO RETAIN INCIDENT
*                                           CHECKPOINT RECORDS
*                                           GENERATED BY THE 3705    */
*%IF DSORGIS=1  %THEN                    /*    DSORGIS               */
*    %GOTO C8A3;                         /*      OR            S22024*/
*%IF DSORGBX=1  %THEN                    /*    DSORGBX               */
*    %GOTO C8A3;                         /*      OR            S22024*/
*%IF DSORGDA=1  %THEN                    /*    DSORGDA               */
*    %GOTO C8A3;                         /*      OR            S22024*/
*%IF DSORGQX=1  %THEN                    /*    DSORGQX               */
*    %GOTO C8A3;                         /*      OR            S22024*/
*%IF DSORGQS=1  %THEN                    /*    DSORGQS               */
*    %GOTO C8A3;                         /*      OR            S22024*/
*%IF DSORGBS=1  %THEN                    /*    DSORGBS               */
*    %GOTO C8A3;                         /*      OR            S22024*/
*%IF DSORGXE=1  %THEN                    /*    DSORGXE               */
*    %GOTO C8A3;                         /*      OR            S22024*/
*%IF DSORGTX=1  %THEN                    /*    DSORGTX               */
*   %GOTO  C8A3;                         /*      OR            S22024*/
*%IF DSORGMQ=1  %THEN                    /*    DSORGMQ               */
*   %GOTO C8A3;                          /*      OR            S22024*/
*%IF DSORGTQ=1  %THEN                    /*    DSORGTQ               */
*    %GOTO C8A3;                         /* BYPASS 3705 EXPANSION    */
*   2 DCBEXLST    PTR(31),               /* FULL WORD ADDRESS-SAME
*                                           AS DCBEXLSA        S22024*/
*%GOTO  C8A4;                            /*                    S22024*/
*%C8A3   :  ;
*   2 *           PTR(31),               /* DCBEXLST           S22024*/
*%C8A4   :  ;
*%IF DSORGBX=1  %THEN                    /*    DSORGBX               */
*    %GOTO C8A5;                         /*      OR            S22024*/
*%IF DSORGQX=1  %THEN                    /*    DSORGQX               */
*    %GOTO C8A5;                         /*      OR            S22024*/
*%IF DSORGTX=1  %THEN                    /*    DSORGTX               */
*    %GOTO C8A5;                         /*  BYPASS 3705 EXPANSION   */
*    3 DCBEIOBX    CHAR(1),              /* SIZE,IN BYTES,OF THE IOB */
*%GOTO C8A6  ;
*%C8A5   :  ;
*    3 *           CHAR(1),              /* DCBEIOBX           S22024*/
*%C8A6   :  ;
*%IF DSORGIS=1  %THEN                    /*    DSORGIS               */
*    %GOTO C8A7;                         /*      OR            S22024*/
*%IF DSORGBX=1  %THEN                    /*    DSORGBX               */
*    %GOTO C8A7;                         /*      OR            S22024*/
*%IF DSORGDA=1  %THEN                    /*    DSORGDA               */
*    %GOTO C8A7;                         /*      OR            S22024*/
*%IF DSORGQX=1  %THEN                    /*    DSORGQX               */
*    %GOTO C8A7;                         /*      OR            S22024*/
*%IF DSORGQS=1  %THEN                    /*    DSORGQS               */
*    %GOTO C8A7;                         /*      OR            S22024*/
*%IF DSORGBS=1  %THEN                    /*    DSORGBS               */
*    %GOTO C8A7;                         /*      OR            S22024*/
*%IF DSORGTX=1  %THEN                    /*    DSORGTX               */
*    %GOTO C8A7;                         /*      OR            S22024*/
*%IF DSORGMQ=1  %THEN                    /*    DSORGMQ               */
*   %GOTO C8A7;                          /*      OR            S22024*/
*%IF DSORGTQ=1  %THEN                    /*    DSORGTQ               */
*    %GOTO C8A7;                         /*      OR            S22024*/
*%IF DSORGXE=1  %THEN                    /*    DSORGXE               */
*    %GOTO C8A7;                         /* BYPASS 3705 EXPANSION    */
*    3 DCBEXLSA   PTR(24)  BDY(BYTE);    /* ADDRESS OF THE EXIT LIST */
*%GOTO C8A8 ;                            /*                    S22024*/
*%C8A7   : ;
*    3 *          PTR(24)  BDY(BYTE);    /* DCBEXLSA           S22024*/
*%C8A8   :  ;
*%IF DSORGLR=0  %THEN                    /* IF DSORGLR               */
*    %GOTO C81;                          /* IS SET TO ONE            */
*%IF DSORGIS=1  %THEN                    /* AND DSORGIS AND DSORGBX  */
*    %GOTO C81;                          /* AND DSORGDA AND DSORGQX  */
*%IF DSORGBX=1  %THEN                    /* AND DSORGCQ AND DSORGMQ  */
*    %GOTO C81;                          /* AND DSORGXA AND DSORGQS  */
*%IF DSORGDA=1  %THEN                    /* AND DSORGBS AND DSORGXE  */
*    %GOTO C81;                          /* ARE ALL SET TO ZERO,     */
*%IF DSORGQX=1  %THEN                    /* BRANCH TO CF             */
*    %GOTO C81;
*%IF DSORGCQ=1  %THEN
*    %GOTO C81;
*%IF DSORGMQ=1  %THEN
*    %GOTO C81;
*%IF DSORGXA=1  %THEN
*    %GOTO C81;
*%IF DSORGQS=1  %THEN
*    %GOTO C81;
*%IF DSORGBS=1  %THEN
*    %GOTO C81;
*%IF  DSORGTR=1  %THEN
*     %GOTO  C81 ;
*%IF DSORGXE=0  %THEN
*    %GOTO CF;
*%C81 : ;
*/*                     FOUNDATION BEFORE OPEN                       */
*
*DECLARE 1 IHADCS24
*      BASED(ADDR(IHADCB)+40),
*   2 DCBDDNAM    CHAR(8),               /* NAME ON THE DD STATEMENT
*                                           WHICH DEFINES  THE DATA
*                                           SET ASSOCIATED WITH THIS
*                                           DCB                      */
*   2 DCBOFLGS    CHAR(1),               /* FLAGS USED BY OPEN
*                                           ROUTINE                  */
*    3 DCBOFLWR BIT(1),                  /* IF ZERO, LAST I/O
*                                           OPERATION WAS READ OR
*                                           POINT. IF ONE, LAST I/O
*                                           OPERATION WAS  WRITE.    */
*     4 DCBOFIOD BIT(1),                 /* DATA SET IS BEING OPENED
*                                           FOR INPUT OR  OUTPUT
*                                           (BDAM)                   */
*    3 DCBOFLRB BIT(1),                  /* LAST I/O OPERATION WAS
*                                           IN READ BACKWARD  MODE   */
*    3 DCBOFEOV BIT(1),                  /* SET TO 1 BY EOV WHEN IT
*                                           CALLS CLOSE  ROUTINE FOR
*                                           CONCATENATION OF DATA
*                                           SETS  WITH UNLIKE
*                                           ATTRIBUTES               */
*    3 DCBOFOPN BIT(1),                  /* AN OPEN HAS BEEN
*                                           SUCCESSFULLY COMPLETED   */
*    3 DCBOFPPC BIT(1),                  /* SET TO 1 BY PROBLEM
*                                           PROGRAM TO INDICATE A
*                                           CONCATENATION OF UNLIKE
*                                           ATTRIBUTES               */
*    3 DCBOFTM  BIT(1),                  /* TAPE MARK HAS BEEN READ  */
*    3 DCBOFUEX BIT(1),                  /* SET TO 0 BY AN I/O
*                                           SUPPORT FUNCTION WHEN
*                                           THAT FUNCTION TAKES A
*                                           USER EXIT. SET TO 1 ON
*                                           RETURN FROM USER EXIT TO
*                                           THE I/O  SUPPORT
*                                           FUNCTION WHICH TOOK THE
*                                           EXIT.                    */
*    3 DCBOFIOF BIT(1),                  /* SET TO 1 BY AN I/O
*                                           SUPPORT FUNCTION IF  DCB
*                                           IS TO BE PROCESSED BY
*                                           THAT FUNCTION            */
*   2 DCBIFLG     CHAR(1),               /* FLAGS USED BY IOS IN
*                                           COMMUNICATING ERROR
*                                           CONDITIONS AND IN
*                                           DETERMINING CORRECTIVE
*                                           PROCEDURES               */
*    3 DCBIBEC  BIT(2),                  /* ERROR CORRECTION
*                                           INDICATOR                */
*%DCL DCBIFNEP CHAR;
*%DCBIFNEP='''00''B';                    /* NOT IN ERROR PROCEDURE   */
*%DCL DCBEX    CHAR;
*%DCBEX   ='''01''B';                    /* ERROR CORRECTION OR IOS
*                                           PAGE FIX IN PROCESS      */
*%DCL DCBIFPEC CHAR;
*%DCBIFPEC='''11''B';                    /* PERMANENT ERROR
*                                           CORRECTION               */
*    3 DCBIBPCT BIT(2),                  /* PRINTER CARRIAGE TAPE
*                                           PUNCH INDICATOR          */
*%DCL DCBIFC9  CHAR;
*%DCBIFC9 ='''10''B';                    /* CHANNEL 9 PRINTER
*                                           CARRIAGE TAPE PUNCH
*                                           SENSED                   */
*%DCL DCBIFC12 CHAR;
*%DCBIFC12='''01''B';                    /* CHANNEL 12 PRINTER
*                                           CARRIAGE TAPE PUNCH
*                                           SENSED                   */
*    3 DCBIBIOE BIT(2),                  /* IOS ERROR ROUTINE USE
*                                           INDICATOR                */
*%DCL DCBIFER  CHAR;
*%DCBIFER ='''00''B';                    /* ALWAYS USE I/O
*                                           SUPERVISOR ERROR ROUTINE */
*%DCL DCBIFNE1 CHAR;
*%DCBIFNE1='''01''B';                    /* NEVER USE I/O SUPERVISOR
*                                           ERROR ROUTINE            */
*%DCL DCBIFTIM CHAR;
*%DCBIFTIM='''01''B';                    /* TEST IOS MASK (IMSK) FOR
*                                           ERROR PROCEDURE  (BTAM)  */
*%DCL DCBIFNE2 CHAR;
*%DCBIFNE2='''10''B';                    /* NEVER USE I/O SUPERVISOR
*                                           ERROR ROUTINE            */
*%DCL DCBIFNE3 CHAR;
*%DCBIFNE3='''11''B';                    /* NEVER USE I/O SUPERVISOR
*                                           ERROR ROUTINE            */
*    3 *        BIT(2),                  /* RESERVED                 */
*   2 DCBMACR     CHAR(2),               /* MACRO INSTRUCTION
*                                           REFERENCE                */
*    3 DCBMACR1    CHAR(1),              /* FIRST BYTE OF DCBMACR    */
*     4 DCBMRECP BIT(1),                 /* EXECUTE CHANNEL PROGRAM
*                                           (EXCP) ---  ALWAYS ZERO
*                                           (BSAM, QSAM, BPAM,
*                                           BISAM,   QISAM, BDAM)
*                                           --- RESERVED (QTAM,
*                                           BTAM)                    */
*     4 DCBMRFE  BIT(1),                 /* FOUNDATION EXTENSION IS
*                                           PRESENT (EXCP)           */
*      5 DCBMRGET BIT(1),                /* GET (QSAM, QISAM, TCAM)  */
*       6 DCBMRPTQ BIT(1),               /* PUT FOR MESSAGE GROUP
*                                           (QTAM) ---  ALWAYS ZERO
*                                           (BSAM, BPAM, BISAM,
*                                           BDAM) --- RESERVED
*                                           (BTAM)                   */
*     4 DCBMRAPG BIT(1),                 /* APPENDAGES ARE REQUIRED
*                                           (EXCP)                   */
*      5 DCBMRRD  BIT(1),                /* READ (BSAM, BPAM, BISAM,
*                                           BDAM, BTAM)              */
*       6 DCBMRWRQ BIT(1),               /* WRITE FOR LINE GROUP
*                                           (QTAM) ---  ALWAYS ZERO
*                                           (QSAM, QISAM)            */
*     4 DCBMRCI  BIT(1),                 /* COMMON INTERFACE (EXCP)  */
*      5 DCBMRMVG BIT(1),                /* MOVE MODE OF GET (QSAM,
*                                           QISAM)                   */
*       6 DCBMRRDK BIT(1),               /* KEY SEGMENT WITH READ
*                                           (BDAM) ---  ALWAYS ZERO
*                                           (BISAM) ---  RESERVED
*                                           (BSAM, BPAM, QTAM, BTAM) */
*     4 DCBMRLCG BIT(1),                 /* LOCATE MODE OF GET
*                                           (QSAM, QISAM)            */
*      5 DCBMRRDI BIT(1),                /* ID ARGUMENT WITH READ
*                                           (BDAM) ---  ALWAYS ZERO
*                                           (BISAM) ---  RESERVED
*                                           (EXCP, BSAM, BPAM, QTAM,
*                                           BTAM)                    */
*     4 DCBMRABC BIT(1),                 /* USER'S PROGRAM MAINTAINS
*                                           ACCURATE BLOCK  COUNT
*                                           (EXCP)                   */
*      5 DCBMRPT1 BIT(1),                /* POINT (WHICH IMPLIES
*                                           NOTE) (BSAM, BPAM)       */
*       6 DCBMRSBG BIT(1),               /* SUBSTITUTE MODE OF GET
*                                           (QSAM)                   */
*        7 DCBMRDBF BIT(1),              /* DYNAMIC BUFFERING
*                                           (BISAM, BDAM) ---
*                                           ALWAYS ZERO (QISAM) ---
*                                           RESERVED (QTAM, BTAM)    */
*     4 DCBMRCRL BIT(1),                 /* CNTRL (BSAM, QSAM)       */
*      5 DCBMRCHK BIT(1),                /* CHECK (BISAM)            */
*       6 DCBMRRDX BIT(1),               /* READ EXCLUSIVE (BDAM)    */
*        7 DCBPGFXA BIT(1),              /* PAGE FIX APPENDAGE IS
*                                           SPECIFIED (EXCP)
*                                           ---   RESERVED (BTAM,
*                                           BPAM, QISAM, QTAM)       */
*     4 DCBMRDMG BIT(1),                 /* DATA MODE OF GET (QSAM)  */
*      5 DCBMRCK  BIT(1),                /* CHECK (BDAM) ---
*                                           RESERVED (EXCP, BSAM,
*                                           BPAM, BISAM, QISAM,
*                                           QTAM, BTAM)              */
*    3 DCBMACR2    CHAR(1),              /* SECOND BYTE OF DCBMACR   */
*     4 DCBMRSTL BIT(1),                 /* SETL (QISAM) --- ALWAYS
*                                           ZERO (BSAM, QSAM, BPAM,
*                                           BISAM, BDAM) ---
*                                           RESERVED (EXCP, QTAM,
*                                           BTAM)                    */
*     4 DCBMRPUT BIT(1),                 /* PUT (QSAM, TCAM) - PUT
*                                           OR PUTX (QISAM)          */
*      5 DCBMRGTQ BIT(1),                /* GET FOR MESSAGE GROUP
*                                           (QTAM) ---  ALWAYS ZERO
*                                           (BSAM, BPAM, BISAM,
*                                           BDAM) --- RESERVED
*                                           (EXCP, BTAM)             */
*     4 DCBMRWRT BIT(1),                 /* WRITE (BSAM, BPAM,
*                                           BISAM, BDAM, BTAM)       */
*      5 DCBMRRDQ BIT(1),                /* READ FOR LINE GROUP
*                                           (QTAM) ---  ALWAYS ZERO
*                                           (QSAM, QISAM) ---
*                                           RESERVED (EXCP)          */
*     4 DCBMRMVP BIT(1),                 /* MOVE MODE OF PUT (QSAM,
*                                           QISAM)                   */
*      5 DCBMRWRK BIT(1),                /* KEY SEGMENT WITH WRITE
*                                           (BDAM) ---  ALWAYS ZERO
*                                           (BISAM) ---  RESERVED
*                                           (EXCP, BSAM, BPAM, QTAM,
*                                           BTAM)                    */
*     4 DCBMR5WD BIT(1),                 /* FIVE-WORD DEVICE
*                                           INTERFACE (EXCP)         */
*      5 DCBMRLDM BIT(1),                /* LOAD MODE BSAM (CREATE
*                                           BDAM DATA SET)  (BSAM)   */
*       6 DCBMRLCP BIT(1),               /* LOCATE MODE OF PUT
*                                           (QSAM, QISAM)            */
*        7 DCBMRIDW BIT(1),              /* ID ARGUMENT WITH WRITE
*                                           (BDAM) ---  ALWAYS ZERO
*                                           (BISAM) ---  RESERVED
*                                           (BPAM, QTAM, BTAM)       */
*     4 DCBMR4WD BIT(1),                 /* FOUR-WORD DEVICE
*                                           INTERFACE (EXCP)         */
*      5 DCBMRPT2 BIT(1),                /* POINT (WHICH IMPLIES
*                                           NOTE) (BSAM, BPAM)       */
*       6 DCBMRTMD BIT(1),               /* SUBSTITUTE MODE (QSAM)   */
*        7 DCBMRUIP BIT(1),              /* UPDATE IN PLACE (PUTX)
*                                           (QISAM) ---  ALWAYS ZERO
*                                           (BISAM) ---  RESERVED
*                                           (BDAM, QTAM, BTAM)       */
*     4 DCBMR3WD BIT(1),                 /* THREE-WORD DEVICE
*                                           INTERFACE (EXCP)         */
*      5 DCBMRCTL BIT(1),                /* CNTRL (BSAM, QSAM)       */
*       6 DCBMRSTK BIT(1),               /* SETL BY KEY (QISAM)      */
*        7 DCBMRAWR BIT(1),              /* ADD TYPE OF WRITE (BDAM)
*                                           ---  ALWAYS ZERO (BISAM)
*                                           ---  RESERVED (BPAM,
*                                           QTAM, BTAM)              */
*     4 DCBMR1WD BIT(1),                 /* ONE-WORD DEVICE
*                                           INTERFACE (EXCP)         */
*      5 DCBMRSWA BIT(1),                /* USER'S PROGRAM HAS
*                                           PROVIDED A SEGMENT  WORK
*                                           AREA POOL (BSAM CREATE
*                                           BDAM, BDAM)              */
*       6 DCBMRDMD BIT(1),               /* DATA MODE (QSAM)         */
*        7 DCBMRSTI BIT(1);              /* SETL BY ID (QISAM) ---
*                                           ALWAYS ZERO (BISAM) ---
*                                           RESERVED (BPAM, QTAM,
*                                           BTAM)                    */
*
*/*                     FOUNDATION AFTER OPEN                        */
*
*DECLARE 1 IHADCS25
*      BASED(ADDR(IHADCB)+40),
*   2 DCBTIOT     FIXED(15),             /* OFFSET FROM TIOT ORIGIN
*                                           TO TIOELNGH FIELD IN
*                                           TIOT ENTRY FOR DD
*                                           STATEMENT ASSOCIATED
*                                           WITH THIS DCB            */
*   2 DCBMACRF    CHAR(2),               /* SAME AS DCBMACR BEFORE
*                                           OPEN                     */
*    3 DCBMACF1    CHAR(1),              /* FIRST BYTE OF DCBMACRF   */
*     4 DCBMFECP BIT(1),                 /* EXECUTE CHANNEL PROGRAM
*                                           (EXCP)                   */
*     4 DCBMFFE  BIT(1),                 /* FOUNDATION EXTENSION IS
*                                           PRESENT (EXCP)           */
*      5 DCBMFGET BIT(1),                /* GET (QSAM, QISAM, TCAM)  */
*       6 DCBMFPTQ BIT(1),               /* PUT FOR MESSAGE GROUP
*                                           (QTAM)                   */
*     4 DCBMFAPG BIT(1),                 /* APPENDAGES ARE REQUIRED
*                                           (EXCP)                   */
*      5 DCBMFRD  BIT(1),                /* READ (BSAM, BPAM, BISAM,
*                                           BDAM, BTAM)              */
*       6 DCBMFWRQ BIT(1),               /* WRITE FOR LINE GROUP
*                                           (QTAM)                   */
*     4 DCBMFCI  BIT(1),                 /* COMMON INTERFACE (EXCP)  */
*      5 DCBMFMVG BIT(1),                /* MOVE MODE OF GET (QSAM,
*                                           QISAM)                   */
*       6 DCBMFRDK BIT(1),               /* KEY SEGMENT WITH READ
*                                           (BDAM)                   */
*     4 DCBMFLCG BIT(1),                 /* LOCATE MODE OF GET
*                                           (QSAM, QISAM)            */
*      5 DCBMFRDI BIT(1),                /* ID ARGUMENT WITH READ
*                                           (BDAM)                   */
*     4 DCBMFABC BIT(1),                 /* USER'S PROGRAM MAINTAINS
*                                           ACCURATE BLOCK  COUNT
*                                           (EXCP)                   */
*      5 DCBMFPT1 BIT(1),                /* POINT (WHICH IMPLIES
*                                           NOTE) (BSAM, BPAM)       */
*       6 DCBMFSBG BIT(1),               /* SUBSTITUTE MODE OF GET
*                                           (QSAM)                   */
*        7 DCBMFDBF BIT(1),              /* DYNAMIC BUFFERING
*                                           (BISAM, BDAM)            */
*     4 DCBMFCRL BIT(1),                 /* CNTRL (BSAM, QSAM)       */
*      5 DCBMFCHK BIT(1),                /* CHECK (BISAM)            */
*       6 DCBMFRDX BIT(1),               /* READ EXCLUSIVE (BDAM)    */
*     4 DCBMFDMG BIT(1),                 /* DATA MODE OF GET (QSAM)  */
*      5 DCBMFCK  BIT(1),                /* CHECK (BDAM)             */
*    3 DCBMACF2    CHAR(1),              /* SECOND BYTE OF DCBMACRF  */
*     4 DCBMFSTL BIT(1),                 /* SETL (QISAM)             */
*     4 DCBMFPUT BIT(1),                 /* PUT (QSAM, TCAM) - PUT
*                                           OR PUTX (QISAM)          */
*      5 DCBMFGTQ BIT(1),                /* GET FOR MESSAGE GROUP
*                                           (QTAM)                   */
*     4 DCBMFWRT BIT(1),                 /* WRITE (BSAM, BPAM,
*                                           BISAM, BDAM, BTAM)       */
*      5 DCBMFRDQ BIT(1),                /* READ FOR LINE GROUP
*                                           (QTAM)                   */
*     4 DCBMFMVP BIT(1),                 /* MOVE MODE OF PUT (QSAM,
*                                           QISAM)                   */
*      5 DCBMFWRK BIT(1),                /* KEY SEGMENT WITH WRITE
*                                           (BDAM)                   */
*     4 DCBMF5WD BIT(1),                 /* FIVE-WORD DEVICE
*                                           INTERFACE (EXCP)         */
*      5 DCBMFLDM BIT(1),                /* LOAD MODE BSAM (CREATE
*                                           BDAM DATA SET)  (BSAM)   */
*       6 DCBMFLCP BIT(1),               /* LOCATE MODE OF PUT
*                                           (QSAM, QISAM)            */
*        7 DCBMFIDW BIT(1),              /* ID ARGUMENT WITH WRITE
*                                           (BDAM)                   */
*     4 DCBMF4WD BIT(1),                 /* FOUR-WORD DEVICE
*                                           INTERFACE (EXCP)         */
*      5 DCBMFPT2 BIT(1),                /* POINT (WHICH IMPLIES
*                                           NOTE) (BSAM, BPAM)       */
*       6 DCBMFTMD BIT(1),               /* SUBSTITUTE MODE (QSAM)   */
*        7 DCBMFUIP BIT(1),              /* UPDATE IN PLACE (PUTX)
*                                           (QISAM)                  */
*     4 DCBMF3WD BIT(1),                 /* THREE-WORD DEVICE
*                                           INTERFACE (EXCP)         */
*      5 DCBMFCTL BIT(1),                /* CNTRL (BSAM, QSAM)       */
*       6 DCBMFSTK BIT(1),               /* SETL BY KEY (QISAM)      */
*        7 DCBMFAWR BIT(1),              /* ADD TYPE OF WRITE (BDAM) */
*     4 DCBMF1WD BIT(1),                 /* ONE-WORD DEVICE
*                                           INTERFACE (EXCP)         */
*      5 DCBMFSWA BIT(1),                /* USER'S PROGRAM HAS
*                                           PROVIDED A SEGMENT  WORK
*                                           AREA POOL (BSAM CREATE
*                                           BDAM, BDAM)              */
*       6 DCBMFDMD BIT(1),               /* DATA MODE (QSAM)         */
*        7 DCBMFSTI BIT(1),              /* SETL BY ID (QISAM)       */
*   2 DCBDEBAD    PTR(31),               /* ADDRESS OF ASSOCIATED
*                                           DEB                      */
*    3 DCBIFLGS    CHAR(1),              /* SAME AS DCBIFLG BEFORE
*                                           OPEN                     */
*     4 DCBIFEC  BIT(2),                 /* ERROR CORRECTION
*                                           INDICATOR                */
*     4 DCBIFPCT BIT(2),                 /* PRINTER CARRIAGE TAPE
*                                           PUNCH INDICATOR          */
*     4 DCBIFIOE BIT(2),                 /* IOS ERROR ROUTINE USE
*                                           INDICATOR                */
*     4 *        BIT(2),                 /* RESERVED                 */
*    3 DCBDEBA     PTR(24)  BDY(BYTE);   /* ADDRESS OF ASSOCIATED
*                                           DEB                      */
*
*%IF DSORGBX=1  %THEN                    /* IF DSORGBX AND DSORGDA   */
*    %GOTO C8A1;                         /* AND DSORGQX AND DSORGBS  */
*%IF DSORGDA=1  %THEN                    /* ARE ALL SET TO ZERO,     */
*    %GOTO C8A1;                         /* BRANCH TO C8A            */
*%IF DSORGQX=1  %THEN
*    %GOTO C8A1;
*%IF DSORGBS=0  %THEN
*    %GOTO C8A;
*%C8A1 : ;
*DECLARE 1 IHADCS26
*      BASED(ADDR(IHADCB)+48),
*   2 DCBWRITE    PTR(31),               /* SAME AS DCBWRITA BELOW
*                                                              Y01963*/
*    3 DCBREAD     PTR(31),              /* SAME AS DCBREADA BELOW
*                                                              Y01963*/
*     4 *           CHAR(1),             /* DCBOFLGS           Y01963*/
*     4 DCBWRITA    PTR(24),             /* ADDRESS OF WRITE MODULE
*                                                              Y01963*/
*      5 DCBREADA    PTR(24);            /* ADDRESS OF READ MODULE
*                                                              Y01963*/
*
*%C8A    :  ;
*%IF DSORGIS=1  %THEN                    /* IF DSORGIS AND DSORGQX   */
*    %GOTO C8A9;                         /* AND DSORGMQ AND DSORGQS  */
*%IF DSORGQX=1  %THEN                    /* ARE ALL SET TO ZERO,     */
*    %GOTO C8A9;                         /* BRANCH TO C8B            */
*%IF DSORGMQ=1  %THEN
*    %GOTO C8A9;
*%IF  DSORGTR=1  %THEN
*     %GOTO  C8A9 ;
*%IF DSORGQS=0  %THEN
*    %GOTO C8B;
*%C8A9 : ;
*DECLARE 1 IHADCS27
*      BASED(ADDR(IHADCB)+48),
*   2 DCBGET      PTR(31),               /* SAME AS DCBGETA BELOW
*                                                              Y01963*/
*    3 DCBPUT      PTR(31),              /* SAME AS DCBPUTA BELOW
*                                                              Y01963*/
*     4 *          CHAR(1),              /* DCBOFLGS           Y01963*/
*     4 DCBGETA    PTR(24),              /* ADDRESS OF GET MODULE
*                                                              Y01963*/
*      5 DCBPUTA     PTR(24);            /* ADDRESS OF PUT MODULE
*                                                              Y01963*/
*
*%C8B    :  ;
*%IF  DSORGTR=1  %THEN
*     %GOTO  C8B3 ;
*%IF DSORGTX=0  %THEN
*    %GOTO C8B1;
*%C8B3   :  ;
*/*                     3705 EXTENSION                               */
*/*                     TCAM LINE GROUP EXTENSION                    */
*
*DECLARE 1 IHADCS43
*      BASED(ADDR(IHADCB)+48),
*   2 DCBSCTAB    PTR(31),               /* ADDRESS OF SPECIAL
*                                           CHARACTERS TABLE (SCT)   */
*    3 *           CHAR(1),              /* DCBOFLGS - FLAGS USED BY
*                                           OPEN ROUTINE             */
*    3 DCBSCTAD    PTR(24)  BDY(BYTE),   /* ADDRESS OF SPECIAL
*                                           CHARACTERS TABLE (SCT)   */
*   2 DCBILCT     PTR(8),                /* COUNT OF INVITATION
*                                           LISTS                    */
*   2 DCBUNTCT    PTR(8),                /* BEFORE OPEN - NUMERICAL
*                                           VALUE OF SCT.  AFTER
*                                           OPEN - COUNT OF UNITS
*                                           FOR 1 BUFFER.            */
*   2 DCBBUFSI    FIXED(15);             /* SIZE OF ALL BUFFERS USED
*                                           FOR THIS LINE  GROUP     */
*%IF  DSORGTX=0  %THEN
*     %GOTO  C8B1;                       /*                    S22024*/
*DECLARE 1 IHADCS2A
*      BASED(ADDR(IHADCB)+56),           /*                    XM4470*/
*   2 DCBRESER    CHAR(4),               /* NUMBER OF RESERVED BYTES
*                                           IN BUFFERS               */
*    3 DCBRESB1    PTR(8),               /* NUMBER OF BYTES RESERVED
*                                           IN THE BUFFER  RECEIVING
*                                           FIRST INCOMING SEGMENT
*                                           OF A  MESSAGE            */
*    3 DCBRESB2    PTR(8),               /* NUMBER OF BYTES RESERVED
*                                           IN ALL BUFFERS  EXCEPT
*                                           THE ONE CONTAINING FIRST
*                                           SEGMENT  OF A MESSAGE    */
*    3 *           CHAR(2),              /* RESERVED                 */
*
*/*      THE FOLLOWING 4 BYTES MAY BE REPEATED 'N' TIMES             */
*   2 DCBINVLI    PTR(31),               /* ADDRESS OF INVITATION
*                                           LIST                     */
*    3 DCBINVCI    CHAR(1),              /* TYPE OF COMMUNICATION
*                                           INTERFACE FOR 2701  DATA
*                                           ADAPTER UNIT             */
*     4 *        BIT(2),                 /* RESERVED                 */
*     4 DCBINVB1 BIT(1),                 /* IF ZERO, UNIT (A,)  IF
*                                           ONE, UNIT (B,)           */
*     4 *        BIT(1),                 /* RESERVED                 */
*     4 DCBINVB2 BIT(1),                 /* IF ZERO, UNIT (,A)  IF
*                                           ONE, UNIT (,B)           */
*     4 *        BIT(3),                 /* RESERVED                 */
*    3 DCBINVLA    PTR(24)  BDY(BYTE);   /* ADDRESS OF INVITATION
*                                           LIST                     */
*
*%C8B1 : ;
*%IF DSORGXA=1  %THEN                    /* IF DSORGXA AND DSORGXE   */
*    %GOTO C8B2;                         /* ARE BOTH SET TO ZERO,    */
*%IF DSORGXE=0  %THEN                    /* BRANCH TO C9             */
*    %GOTO C9;
*%C8B2 : ;
*/*                     EXCP WITH EXTENSION OR APPENDAGES            */
*
*DECLARE 1 IHADCS28
*      BASED(ADDR(IHADCB)+52),
*%IF DSORGIS=1  %THEN                    /* IF DSORGIS OR DSORGDA    */
*    %GOTO C8C;                          /* OR DSORGQS OR DSORGBS    */
*%IF DSORGDA=1  %THEN                    /* IS SET TO ONE,           */
*    %GOTO C8C;                          /* BRANCH TO C8C            */
*%IF DSORGQS=1  %THEN
*    %GOTO C8C;
*%IF DSORGBS=1  %THEN
*    %GOTO C8C;
*   2 DCBOPTCD    CHAR(1),               /* OPTION CODES             */
*%GOTO C8D    ;
*%C8C    :  ;
*   2 *           CHAR(1),               /* DCBOPTCD - OPTION CODES  */
*%C8D    :  ;
*%IF DSORGQS=1  %THEN                    /* IF DSORGQS OR DSORGBS    */
*    %GOTO C8E;                          /* IS SET TO 1,             */
*%IF DSORGBS=1  %THEN                    /* BRANCH TO C8E            */
*    %GOTO C8E;
*    3 *        BIT(5),                  /* RESERVED                 */
*    3 DCBOPTZ  BIT(1),                  /* MAGNETIC TAPE DEVICES -
*                                           USE REDUCED ERROR
*                                           RECOVERY PROCEDURE
*                                           (EXCP, BSAM, BPAM, QSAM) */
*     4 DCBSRCHD BIT(1),                 /* USE SEARCH DIRECT,
*                                           INSTEAD OF SEARCH
*                                           PREVIOUS, ON RECORD
*                                           POSITION SENSING  DEVICE
*                                           (EXCP, BSAM, BPAM, QSAM)
*                                                              ICB217*/
*    3 *        BIT(2),                  /* RESERVED                 */
*%C8E : ;
*   2 *           CHAR(7);               /* RESERVED                 */
*
*%IF DSORGXA=0  %THEN
*    %GOTO C9;
*/*                     EXCP APPENDAGE LIST                          */
*
*DECLARE 1 IHADCS44
*      BASED(ADDR(IHADCB)+60),
*   2 DCBEOEA     CHAR(2),               /* END OF EXTENT APPENDAGE
*                                           ID                       */
*   2 DCBPCIA     CHAR(2),               /* PROGRAM CONTROLLED
*                                           INTERRUPTION  APPENDAGE
*                                           ID                       */
*   2 DCBSIOA     CHAR(2),               /* START I/O APPENDAGE ID   */
*   2 DCBCENDA    CHAR(2),               /* CHANNEL END APPENDAGE ID */
*   2 DCBXENDA    CHAR(2),               /* ABNORMAL END APPENDAGE
*                                           ID                       */
*   2 *           CHAR(2);               /* RESERVED                 */
*
*%C9     :  ;
*%IF DSORGIS=0  %THEN
*    %GOTO CA;
*/*                     BISAM-QISAM INTERFACE                        */
*
*DECLARE 1 IHADCS29
*      BASED(ADDR(IHADCB)+52),
*   2 DCBOPTCD    CHAR(1),               /* OPTION CODES             */
*%IF DSORGQS=1  %THEN                    /* IF DSORGQS OR DSORGBS    */
*    %GOTO C9A;                          /* IS SET TO 1,             */
*%IF DSORGBS=1  %THEN                    /* BRANCH TO C9A            */
*    %GOTO C9A;
*    3 DCBOPTW  BIT(1),                  /* WRITE VALIDITY CHECK
*                                           (DASD)  (BSAM, BPAM,
*                                           QSAM, ISAM, BDAM)        */
*%GOTO C9B    ;
*%C9A : ;
*    3 *        BIT(1),                  /* DCBOPTW - SAME AS BSAM   */
*%C9B : ;
*    3 DCBOPTUF BIT(1),                  /* FULL-TRACK INDEX WRITE   */
*    3 DCBOPTM  BIT(1),                  /* MASTER INDEXES           */
*    3 DCBOPTI  BIT(1),                  /* INDEPENDENT OVERFLOW AREA*/
*    3 DCBOPTY  BIT(1),                  /* CYLINDER OVERFLOW AREA   */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 DCBOPTL  BIT(1),                  /* DELETE OPTION            */
*    3 DCBOPTR  BIT(1),                  /* REORGANIZATION CRITERIA  */
*   2 DCBMAC      CHAR(1),               /* EXTENSION OF DCBMACRF
*                                           FIELD FOR ISAM           */
*    3 *        BIT(4),                  /* RESERVED                 */
*    3 DCBMACUR BIT(1),                  /* UPDATE FOR READ          */
*    3 DCBMACUW BIT(1),                  /* UPDATE TYPE OF WRITE     */
*    3 DCBMACAW BIT(1),                  /* ADD TYPE OF WRITE        */
*    3 DCBMACRE BIT(1),                  /* READ EXCLUSIVE           */
*   2 DCBNTM      PTR(8),                /* NUMBER OF TRACKS THAT
*                                           DETERMINE THE
*                                           DEVELOPMENT OF A MASTER
*                                           INDEX  MAXIMUM
*                                           PERMISSABLE VALUE - 99   */
*   2 DCBCYLOF    PTR(8),                /* NUMBER OF TRACKS TO BE
*                                           RESERVED ON EACH  PRIME
*                                           DATA CYLINDER FOR
*                                           RECORDS THAT  OVERFLOW
*                                           FROM OTHER TRACKS ON
*                                           THAT   CYLINDER          */
*   2 DCBSYNAD    PTR(31),               /* ADDRESS OF USER'S SYNAD
*                                           ROUTINE                  */
*   2 DCBRKP      FIXED(15),             /* RELATIVE POSITION OF
*                                           FIRST BYTE OF KEY
*                                           WITHIN EACH LOGICAL
*                                           RECORD                   */
*   2 DCBBLKSI    FIXED(15),             /* BLOCK SIZE               */
*   2 DCBMSWA     PTR(31),               /* ADDRESS OF MAIN STORAGE
*                                           WORK AREA FOR USE BY
*                                           CONTROL PROGRAM WHEN NEW
*                                           RECORDS ARE  BEING ADDED
*                                           TO AN EXISTING DATA SET  */
*   2 DCBSMSI     FIXED(15),             /* NUMBER OF BYTES IN AREA
*                                           RESERVED TO HOLD
*                                           HIGHEST LEVEL INDEX      */
*   2 DCBSMSW     FIXED(15),             /* NUMBER OF BYTES IN WORK
*                                           AREA USED BY  CONTROL
*                                           PROGRAM WHEN NEW RECORDS
*                                           ARE  BEING ADDED TO DATA
*                                           SET                      */
*   2 DCBMSHI     PTR(31),               /* ADDRESS OF MAIN STORAGE
*                                           AREA TO HOLD  HIGHEST
*                                           LEVEL INDEX              */
*    3 DCBNCP      PTR(8),               /* NUMBER OF COPIES OF
*                                           READ-WRITE (TYPE K)
*                                           CHANNEL PROGRAMS THAT
*                                           ARE TO BE  ESTABLISHED
*                                           FOR THIS DCB. (99
*                                           MAXIMUM)                 */
*    3 DCBMSHIA    PTR(24)  BDY(BYTE),   /* SAME AS DCBMSHI ABOVE    */
*   2 DCBSETL     PTR(31),               /* ADDRESS OF SETL MODULE
*                                           FOR QISAM.  ADDRESS OF
*                                           CHECK MODULE FOR BISAM   */
*   2 DCBEXCD1    CHAR(1),               /* FIRST BYTE IN WHICH
*                                           EXCEPTIONAL  CONDITIONS
*                                           DETECTED IN PROCESSING
*                                           DATA  RECORDS ARE
*                                           REPORTED TO THE USER     */
*    3 DCBEXNKY BIT(1),                  /* LOWER KEY LIMIT NOT FOUND*/
*    3 DCBEXIDA BIT(1),                  /* INVALID DEVICE ADDRESS
*                                           FOR LOWER LIMIT          */
*    3 DCBEXNSP BIT(1),                  /* SPACE NOT FOUND          */
*    3 DCBEXINV BIT(1),                  /* INVALID REQUEST          */
*    3 DCBEXIER BIT(1),                  /* UNCORRECTABLE INPUT ERROR*/
*    3 DCBEXOER BIT(1),                  /* UNCORRECTABLE OUTPUT
*                                           ERROR                    */
*    3 DCBEXBLI BIT(1),                  /* BLOCK COULD NOT BE
*                                           REACHED (INPUT)          */
*    3 DCBEXBLU BIT(1),                  /* BLOCK COULD NOT BE
*                                           REACHED (UPDATE)         */
*   2 DCBEXCD2    CHAR(1),               /* SECOND BYTE IN WHICH
*                                           EXCEPTIONAL  CONDITIONS
*                                           DETECTED IN PROCESSING
*                                           DATA  RECORDS ARE
*                                           REPORTED TO THE USER     */
*    3 DCBEXSEQ BIT(1),                  /* SEQUENCE CHECK           */
*    3 DCBEXDUP BIT(1),                  /* DUPLICATE RECORD         */
*    3 DCBEXCLD BIT(1),                  /* DCB CLOSED WHEN ERROR
*                                           WAS DETECTED             */
*    3 DCBEXOFL BIT(1),                  /* OVERFLOW RECORD          */
*    3 DCBEXLTH BIT(1),                  /* FOR PUT - LENGTH FIELD OF
*                                           RECORD LARGER THAN LENGTH
*                                           INDICATED IN DCBLRECL    */
*     4 DCBEXRDE BIT(1),                 /* READ EXCLUSIVE           */
*    3 *        BIT(3),                  /* RESERVED                 */
*   2 DCBLRECL    FIXED(15),             /* FOR FIXED-LENGTH RECORD
*                                           FORMATS, LOGICAL  RECORD
*                                           LENGTH. FOR
*                                           VARIABLE-LENGTH  RECORD
*                                           FORMATS, MAXIMUM LOGICAL
*                                           RECORD  LENGTH OR AN
*                                           ACTUAL LOGICAL RECORD
*                                           LENGTH CHANGED
*                                           DYNAMICALLY BY USER WHEN
*                                           CREATING THE DATA SET    */
*   2 DCBESETL    PTR(31),               /* ADDRESS OF ESETL ROUTINE
*                                           IN GET MODULE            */
*   2 DCBLRAN     PTR(31),               /* ADDRESS OF READ-WRITE K
*                                           MODULE OR  EXCLUSIVE
*                                           MODULE                   */
*   2 DCBLWKN     PTR(31),               /* ADDRESS OF WRITE KN
*                                           MODULE                   */
*   2 DCBRELSE    PTR(31),               /* WORK AREA FOR TEMPORARY
*                                           STORAGE OF  REGISTER
*                                           CONTENTS                 */
*   2 DCBPUTX     PTR(31),               /* WORK AREA FOR TEMPORARY
*                                           STORAGE OF  REGISTER
*                                           CONTENTS                 */
*   2 DCBRELEX    PTR(31),               /* ADDRESS OF READ
*                                           EXCLUSIVE MODULE         */
*   2 DCBFREED    PTR(31),               /* ADDRESS OF DYNAMIC
*                                           BUFFERING MODULE         */
*   2 DCBHIRTI    PTR(8),                /* NUMBER OF INDEX ENTRIES
*                                           THAT FIT ON A  PRIME
*                                           DATA TRACK               */
*   2 DCBFTMI2    CHAR(7),               /* DIRECT ACCESS DEVICE
*                                           ADDRESS OF FIRST  TRACK
*                                           OF SECOND LEVEL MASTER
*                                           INDEX (IN  THE FORM
*                                           MBBCCHH)                 */
*   2 DCBLEMI2    CHAR(5),               /* DIRECT ACCESS DEVICE
*                                           ADDRESS OF LAST  ACTIVE
*                                           ENTRY IN SECOND LEVEL
*                                           MASTER INDEX (IN THE
*                                           FORM CCHHR)              */
*   2 DCBFTMI3    CHAR(7),               /* DIRECT ACCESS DEVICE
*                                           ADDRESS OF FIRST  TRACK
*                                           OF THIRD LEVEL MASTER
*                                           INDEX (IN  THE FORM
*                                           MBBCCHH)                 */
*   2 DCBLEMI3    CHAR(5),               /* DIRECT ACCESS DEVICE
*                                           ADDRESS OF LAST  ACTIVE
*                                           ENTRY IN THIRD LEVEL
*                                           MASTER INDEX  (IN THE
*                                           FORM CCHHR)              */
*   2 DCBNLEV     PTR(8),                /* NUMBER OF LEVELS OF
*                                           INDEX                    */
*   2 DCBFIRSH    CHAR(3),               /* HHR OF FIRST DATA RECORD
*                                           ON EACH  CYLINDER. FOR
*                                           VARIABLE LENGTH RECORD
*                                           PROCESSING, R PORTION OF
*                                           THIS FIELD IS  ALWAYS
*                                           X'01'.                   */
*   2 DCBHMASK    CHAR(1),               /* BYTE INDICATING 2301 OR
*                                           NOT                      */
*%DCL DCBHMDRM CHAR;
*%DCBHMDRM='''07''X';                    /* DEVICE IS 2301 DRUM      */
*%DCL DCBHMNDM CHAR;
*%DCBHMNDM='''FF''X';                    /* DEVICE IS OTHER THAN
*                                           2301 DRUM                */
*   2 DCBLDT      CHAR(2),               /* HH IS THE LAST PRIME
*                                           DATA TRACK ON EACH
*                                           CYLINDER                 */
*   2 DCBHIRCM    CHAR(1),               /* HIGHEST POSSIBLE R FOR
*                                           TRACKS OF THE  CYLINDER
*                                           AND MASTER INDICES       */
*   2 DCBHIRPD    CHAR(1),               /* HIGHEST R ON ANY PRIME
*                                           TRACK IN DATA SET. FOR
*                                           VARIABLE-LENGTH RECORDS,
*                                           THIS  REPRESENTS THE
*                                           GREATEST NUMBER OF
*                                           PHYSICAL RECORDS ON ANY
*                                           PRIME TRACK IN  THE DATA
*                                           SET                      */
*   2 DCBHIROV    CHAR(1),               /* FOR FIXED-LENGTH RECORD
*                                           FORMAT, HIGHEST
*                                           POSSIBLE R FOR OVERFLOW
*                                           DATA TRACKS. FOR
*                                           VARIABLE-LENGTH RECORD
*                                           FORMAT, UNUSED.          */
*   2 DCBHIRSH    CHAR(1),               /* FOR FIXED-LENGTH RECORD
*                                           FORMAT, R OF LAST DATA
*                                           RECORD ON A SHARED
*                                           TRACK, IF  APPLICABLE.
*                                           FOR VARIABLE-LENGTH
*                                           RECORD  FORMAT, UNUSED.  */
*   2 DCBTDC      FIXED(15),             /* USER-SUPPLIED NUMBER OF
*                                           RECORDS TAGGED  FOR
*                                           DELETION.                */
*   2 DCBNCRHI    FIXED(15),             /* NUMBER OF STORAGE
*                                           LOCATIONS NEEDED TO
*                                           HOLD THE HIGHEST LEVEL
*                                           INDEX                    */
*   2 DCBRORG3    FIXED(31),             /* FOR EACH USE OF DATA
*                                           SET, NUMBER OF READ  OR
*                                           WRITE ACCESSES TO AN
*                                           OVERFLOW RECORD  WHICH
*                                           IS NOT FIRST IN A CHAIN
*                                           OF SUCH  RECORDS         */
*   2 DCBNREC     FIXED(31),             /* NUMBER OF LOGICAL
*                                           RECORDS IN PRIME DATA
*                                           AREA                     */
*   2 DCBST       CHAR(1),               /* STATUS INDICATORS        */
*    3 DCBSTSSM BIT(1),                  /* SINGLE SCHEDULE MODE     */
*    3 DCBSTKSQ BIT(1),                  /* KEY SEQUENCE CHECKING IS
*                                           TO BE PERFORMED          */
*    3 DCBSTLOD BIT(1),                  /* LOADING HAS COMPLETED.
*                                           SET TO 1 BY CLOSE ROUTINE
*                                           AND TO 0 BY FIRST
*                                           EXECUTION OF PUT ROUTINE */
*    3 DCBSTNCY BIT(1),                  /* EXTENSION OF DATA SET
*                                           WILL BEGIN ON NEW
*                                           CYLINDER                 */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 DCBSTNMC BIT(1),                  /* FIRST MACRO INSTRUCTION
*                                           NOT YET RECEIVED         */
*    3 DCBSTLBF BIT(1),                  /* LAST BLOCK FULL          */
*    3 DCBSTLTF BIT(1),                  /* LAST TRACK FULL          */
*   2 DCBFTCI     CHAR(7),               /* DIRECT ACCESS DEVICE
*                                           ADDRESS OF FIRST  TRACK
*                                           OF CYLINDER INDEX (IN
*                                           THE FORM  MBBCCHH).      */
*   2 DCBHIIOV    CHAR(1),               /* FOR FIXED LENGTH RECORD
*                                           FORMAT, HIGHEST
*                                           POSSIBLE R FOR
*                                           INDEPENDENT OVERFLOW
*                                           DATA  TRACKS. FOR
*                                           VARIABLE LENGTH RECORD
*                                           FORMAT, UNUSED           */
*   2 DCBFTMI1    CHAR(7),               /* DIRECT ACCESS DEVICE
*                                           ADDRESS OF FIRST  TRACK
*                                           OF FIRST LEVEL MASTER
*                                           INDEX (IN  THE FORM
*                                           MBBCCHH).                */
*   2 DCBNTHI     PTR(8),                /* NUMBER OF TRACKS OF
*                                           HIGH-LEVEL INDEX         */
*   2 DCBFTHI     CHAR(7),               /* DIRECT ACCESS DEVICE
*                                           ADDRESS OF FIRST  TRACK
*                                           OF HIGHEST LEVEL INDEX
*                                           (IN THE  FORM MBBCCHH).  */
*   2 DCBLPDA     CHAR(8),               /* DIRECT ACCESS DEVICE
*                                           ADDRESS OF LAST  PRIME
*                                           DATA RECORD IN PRIME
*                                           DATA AREA  (IN THE FORM
*                                           MBBCCHHR).               */
*   2 DCBLETI     CHAR(5),               /* DIRECT ACCESS DEVICE
*                                           ADDRESS OF LAST  ACTIVE
*                                           NORMAL ENTRY OF TRACK
*                                           INDEX ON  LAST ACTIVE
*                                           CYLINDER (IN THE FORM
*                                           CCHHR).                  */
*   2 DCBOVDEV    CHAR(1),               /* DEVICE TYPE FOR
*                                           INDEPENDENT OVERFLOW     */
*%;/* THESE SAME MASKS APPLY TO DCBDEVT FOR ISAM DIRECT ACCESS       */
*%DCL DCBDVI11 CHAR;
*%DCBDVI11='''01''X';                    /* 2311 DISK DRIVE          */
*%DCL DCBDVI01 CHAR;
*%DCBDVI01='''02''X';                    /* 2301 PARALLEL DRUM       */
*%DCL DCBDVI03 CHAR;
*%DCBDVI03='''03''X';                    /* 2303 SERIAL DRUM         */
*%DCL DCBDVI02 CHAR;
*%DCBDVI02='''04''X';                    /* 2302 DISK STORAGE        */
*%DCL DCBDVI21 CHAR;
*%DCBDVI21='''05''X';                    /* 2321 DATA CELL DRIVE     */
*%DCL DCBDVI14 CHAR;
*%DCBDVI14='''08''X';                    /* 2314 DISK STORAGE
*                                           FACILITY                 */
*   2 DCBNBOV     FIXED(15),             /* FOR FIXED LENGTH RECORD
*                                           FORMAT, RESERVED. FOR
*                                           VARIABLE LENGTH RECORD
*                                           FORMAT, IF THE
*                                           INDEPENDENT OVERFLOW
*                                           OPTION IS SELECTED,
*                                           CONTAINS, IN BINARY,
*                                           NUMBER OF BYTES LEFT ON
*                                           CURRENT TRACK OF
*                                           INDEPENDENT OVERFLOW
*                                           AREA                     */
*   2 DCBLECI     CHAR(5),               /* DIRECT ACCESS DEVICE
*                                           ADDRESS OF LAST  ACTIVE
*                                           ENTRY IN CYLINDER INDEX
*                                           (IN THE  FORM CCHHR).    */
*   2 *           CHAR(1),               /* RESERVED                 */
*   2 DCBRORG2    FIXED(15),             /* NUMBER OF TRACKS
*                                           (PARTIALLY OR WHOLLY)
*                                           REMAINING IN INDEPENDENT
*                                           OVERFLOW AREA            */
*   2 DCBLEMI1    CHAR(5),               /* DIRECT ACCESS DEVICE
*                                           ADDRESS OF LAST  ACTIVE
*                                           ENTRY IN FIRST LEVEL
*                                           MASTER INDEX  (IN THE
*                                           FORM CCHHR).             */
*   2 *           CHAR(1),               /* RESERVED                 */
*   2 DCBNOREC    FIXED(15),             /* NUMBER OF LOGICAL
*                                           RECORDS IN AN OVERFLOW
*                                           AREA                     */
*   2 DCBLIOV     CHAR(8),               /* DIRECT ACCESS DEVICE
*                                           ADDRESS OF LAST  AREA
*                                           (IN THE FORM MBBCCHHR).  */
*   2 DCBRORG1    FIXED(15),             /* NUMBER OF CYLINDER
*                                           OVERFLOW AREAS THAT  ARE
*                                           FULL                     */
*   2 *           CHAR(2),               /* RESERVED                 */
*   2 DCBWKPT1    PTR(31),               /* POINTER TO WORK AREA OR
*                                           TO CONSTRUCTED  CHANNEL
*                                           PROGRAM FOR WHICH SPACE
*                                           IS  OBTAINED BY GETMAIN
*                                           MACRO INSTRUCTIONS
*                                           ISSUED BY OPEN EXECUTORS */
*   2 DCBWKPT2    PTR(31),               /* ADDITIONAL POINTER AS IN
*                                           DCBWKPT1                 */
*   2 DCBWKPT3    PTR(31),               /* ADDITIONAL POINTER AS IN
*                                           DCBWKPT1                 */
*   2 DCBWKPT4    PTR(31),               /* ADDITIONAL POINTER AS IN
*                                           DCBWKPT1                 */
*   2 DCBWKPT5    PTR(31),               /* ADDITIONAL POINTER AS IN
*                                           DCBWKPT1                 */
*   2 DCBWKPT6    PTR(31);               /* ADDITIONAL POINTER AS IN
*                                           DCBWKPT1                 */
*
*DECLARE 1 IHADCS55
*      BASED(ADDR(IHADCB)+64),           /*                ICBI DCB-5*/
*   2 DCBLPDT    CHAR(8);                /* FOR ISAM RESUME LOAD, THE
*                                           LAST PRIME DATA TRACK ON
*                                           THE LAST PRIME DATA
*                                           CYLINDER IN THE FORM
*                                           MBBCCHHR.      ICBI DCB-5*/
*
*%CA     :  ;
*%IF DSORGDA=0  %THEN
*    %GOTO CB;
*/*                     BDAM INTERFACE                               */
*
*DECLARE 1 IHADCS30
*      BASED(ADDR(IHADCB)+52),
*   2 DCBCHECK    PTR(31),               /* ADDRESS OF CHECK MODULE  */
*%IF DSORGIS=1  %THEN
*    %GOTO CA1;
*    3 DCBOPTCD    CHAR(1),              /* OPTION CODES             */
*%GOTO CA2    ;
*%CA1 : ;
*    3 *           CHAR(1),              /* DCBOPTCD - OPTION CODES  */
*%CA2 : ;
*%IF DSORGIS=1  %THEN                    /* IF DSORGIS OR DSORGQS    */
*    %GOTO CA3;                          /* OR DSORGBS               */
*%IF DSORGQS=1  %THEN                    /* IS SET TO 1,             */
*    %GOTO CA3;                          /* BRANCH TO CA3            */
*%IF DSORGBS=1  %THEN
*    %GOTO CA3;
*     4 DCBOPTW  BIT(1),                 /* WRITE VALIDITY CHECK
*                                           (DASD)  (BSAM, BPAM,
*                                           QSAM, ISAM, BDAM)        */
*%GOTO CA4    ;
*%CA3 : ;
*     4 *        BIT(1),                 /* DCBOPTW - SAME AS BSAM
*                                           AND ISAM                 */
*%CA4 : ;
*     4 DCBOPTTO BIT(1),                 /* TRACK OVERFLOW           */
*     4 DCBOPTE  BIT(1),                 /* EXTENDED SEARCH          */
*     4 DCBOPTF  BIT(1),                 /* FEEDBACK                 */
*     4 DCBOPTA  BIT(1),                 /* ACTUAL ADDRESSING        */
*     4 DCBOPTDB BIT(1),                 /* DYNAMIC BUFFERING        */
*     4 DCBOPTRE BIT(1),                 /* READ EXCLUSIVE           */
*     4 DCBOPTRB BIT(1),                 /* RELATIVE BLOCK ADDRESSING*/
*    3 DCBCHCKA    PTR(24)  BDY(BYTE),   /* ADDRESS OF CHECK MODULE  */
*%IF DSORGIS=1  %THEN
*    %GOTO CAA;
*   2 DCBSYNAD    PTR(31),               /* ADDRESS OF SYNAD ROUTINE */
*   2 *           CHAR(2),               /* RESERVED                 */
*   2 DCBBLKSI    FIXED(15),             /* MAXIMUM BLOCK SIZE       */
*%GOTO CAB    ;
*%CAA    :  ;
*   2 *           PTR(31),               /* DCBSYNAD - ADDRESS OF
*                                           SYNAD ROUTINE            */
*   2 *           CHAR(2),               /* RESERVED                 */
*   2 *           FIXED(15),             /* DCBBLKSI - MAXIMUM BLOCK
*                                           SIZE                     */
*%CAB    :  ;
*   2 DCBIOBSQ    PTR(31),               /* ADDRESS OF FIRST IOB ON
*                                           UNSCHEDULED QUEUE FOR
*                                           EITHER A WRITE-ADD
*                                           REQUEST WHEN  ANOTHER
*                                           WRITE-ADD IS IN PROGRESS
*                                           OR A  READ-EXCLUSIVE
*                                           REQUEST WHEN THE
*                                           READ-EXCLUSIVE LIST IS
*                                           FULL                     */
*   2 DCBSQND     PTR(31),               /* ADDRESS OF LAST IOB ON
*                                           UNSCHEDULED QUEUE        */
*   2 DCBIOBUQ    PTR(31),               /* ADDRESS OF FIRST IOB ON
*                                           UNPOSTED QUEUE           */
*   2 DCBUQND     PTR(31),               /* ADDRESS OF LAST JOB ON
*                                           UNPOSTED QUEUE  THAT IS
*                                           MAINTAINED BY THE READ
*                                           EXCLUSIVE  MODULE        */
*   2 *           CHAR(1),               /* RESERVED                 */
*   2 DCBLIMCT    PTR(24)  BDY(BYTE),    /* NUMBER OF TRACKS OR
*                                           NUMBER OF RELATIVE
*                                           BLOCKS TO BE SEARCHED
*                                           (EXTENDED SEARCH OPTION) */
*   2 DCBXARG     PTR(31),               /* ADDRESS OF READ
*                                           EXCLUSIVE LIST           */
*    3 DCBXCNT     PTR(8),               /* NUMBER OF ENTRIES IN
*                                           READ EXCLUSIVE LIST      */
*    3 DCBXARGA    PTR(24)  BDY(BYTE),   /* ADDRESS OF READ
*                                           EXCLUSIVE LIST           */
*   2 DCBDRDX     PTR(31),               /* ADDRESS OF READ
*                                           EXCLUSIVE MODULE         */
*    3 DCBMVXNO    PTR(8),               /* TOTAL NUMBER OF EXTENTS
*                                           IN MULTIVOLUME  DATA SET */
*    3 DCBDRDXA    PTR(24)  BDY(BYTE),   /* ADDRESS OF READ
*                                           EXCLUSIVE MODULE         */
*   2 DCBDFOR     PTR(31),               /* ADDRESS OF A FORMAT
*                                           MODULE                   */
*   2 DCBDFBK     PTR(31),               /* ADDRESS OF A FEEDBACK
*                                           MODULE                   */
*   2 DCBDYNB     PTR(31);               /* FOR DYNAMIC BUFFERING,
*                                           ADDRESS OF DYNAMIC
*                                           BUFFER MODULE. FOR
*                                           UNBLOCKED SPANNED
*                                           RECORDS WITH BFTEK=R
*                                           SPECIFIED AND NO
*                                           DYNAMIC BUFFERING,
*                                           ADDRESS OF SEGMENT  WORK
*                                           AREA CONTROL BLOCK       */
*
*%CB     :  ;
*%IF DSORGQX=0  %THEN
*    %GOTO CC;
*/*                     QTAM INTERFACE                               */
*
*DECLARE 1 IHADCS31
*      BASED(ADDR(IHADCB)+52),
*   2 DCBKSTAT    CHAR(4),               /* FOUR THRESHOLD VALUES
*                                           FOR ERROR COUNTS         */
*    3 DCBKSTA1    PTR(8),               /* THRESHOLD VALUE FOR
*                                           NUMBER OF  TRANSMISSIONS */
*    3 DCBKSTA2    PTR(8),               /* THRESHOLD VALUE FOR
*                                           NUMBER OF DATA CHECKS    */
*    3 DCBKSTA3    PTR(8),               /* THRESHOLD VALUE FOR
*                                           NUMBER OF  INTERVENTIONS
*                                           REQUIRED                 */
*    3 DCBKSTA4    PTR(8),               /* THRESHOLD VALUE FOR
*                                           NUMBER OF TIMEOUTS       */
*
*/*                     QTAM POLLING LIST ORIGIN                     */
*
*   2 DCBCPOLL    PTR(31),               /* A 4-BYTE FIELD FOR EACH
*                                           POLLING LIST             */
*    3 DCBPLBYT    CHAR(1),              /* ADAPTER TYPE             */
*     4 *        BIT(4),                 /* RESERVED                 */
*     4 DCBCPWTT BIT(1),                 /* WTTA                     */
*     4 *        BIT(3),                 /* RESERVED                 */
*    3 DCBCPOLA    PTR(24)  BDY(BYTE);   /* ADDRESS OF THE POLLING
*                                           LIST                     */
*
*%CC     :  ;
*%IF DSORGTQ=0  %THEN
*    %GOTO CC1;
*/*                     TCAM MESSAGE QUEUE INTERFACE                 */
*
*DECLARE 1 IHADCS32
*      BASED(ADDR(IHADCB)+52),
*%IF DSORGIS=1  %THEN                    /* IF DSORGIS OR DSORGDA    */
*    %GOTO CC1A;                         /* OR DSORGQS OR DSORGBS    */
*%IF DSORGDA=1  %THEN                    /* IS SET TO ONE,           */
*    %GOTO CC1A;                         /* BRANCH TO CC1A           */
*%IF DSORGQS=1  %THEN
*    %GOTO CC1A;
*%IF DSORGBS=1  %THEN
*    %GOTO CC1A;
*   2 DCBOPTCD    CHAR(1),               /* OPTION CODES             */
*%GOTO CC1B   ;
*%CC1A : ;
*   2 *           CHAR(1),               /* DCBOPTCD - OPTION CODES  */
*%CC1B : ;
*    3 DCBOPTWP BIT(1),                  /* SOURCE OR DESTINATION
*                                           NAME PRECEDES MESSAGE
*                                           (AFTER CONTROL BYTE)
*                                           (TCAM PROCESS QUEUE)     */
*    3 DCBOPTUM BIT(1),                  /* WORK UNIT IS A MESSAGE.
*                                           DEFAULT WORK UNIT IS A
*                                           RECORD.  (TCAM PROCESS
*                                           QUEUE)                   */
*    3 DCBOPTCB BIT(1),                  /* CONTROL BYTE PRECEDES
*                                           WORK UNIT  (TCAM PROCESS
*                                           QUEUE)                   */
*     4 DCBOPTCP BIT(1),                 /* CHECKPOINT DATA SET      */
*    3 *        BIT(3),                  /* RESERVED                 */
*    3 DCBOPTIM BIT(1),                  /* NON-REUSABLE MESSAGE
*                                           QUEUE DATA SET           */
*    3 DCBOPTRM BIT(1),                  /* REUSABLE MESSAGE QUEUE
*                                           DATA SET                 */
*%IF DSORGIS=1 %THEN                     /* IF DSORGIS SET TO 1      */
*    %GOTO CC1D;                         /* BRANCH TO CC1D ICBI DCB-9*/
*%IF DSORGDA=1 %THEN                     /* IF DSORGDA SET TO 1      */
*    %GOTO CC1D;                         /* BRANCH TO CC1D ICBI DCB-9*/
*%IF DSORGBS=1 %THEN                     /* IF DSORGBS SET TO 1      */
*   %GOTO CC1D;                          /* BRANCH TO CC1D ICBI DCB-9*/
*%IF DSORGQS=1 %THEN                     /* IF DSORGQS SET TO 1      */
*   %GOTO CC1D;                          /* BRANCH TO CC1D ICBI DCB-9*/
*   2 *        CHAR(9),                  /* RESERVED       ICBI DCB-9*/
*   2 DCBBLKSI     FIXED(15);            /* BLOCK SIZE     ICBI DCB-9*/
*%GOTO CC1   ;
*%CC1D : ;
*   2 *        CHAR(11);                 /* RESERVED                 */
*
*%CC1 : ;
*%IF DSORGMQ=0  %THEN
*    %GOTO CD;
*/*                     QTAM PROBLEM PROGRAM MESSAGE QUEUE INTERFACE */
*
*DECLARE 1 IHADCS33
*      BASED(ADDR(IHADCB)+52),
*   2 DCBRECRD    PTR(31),               /* NOT USED BY QTAM         */
*%IF DSORGIS=1  %THEN                    /* IF DSORGIS OR DSORGDA    */
*    %GOTO CCA;                          /* IS SET TO ONE,           */
*%IF DSORGDA=1  %THEN                    /* BRANCH TO CCA            */
*    %GOTO CCA;
*   2 DCBSYNAD    PTR(31),               /* ADDRESS OF USER-PROVIDED
*                                           SYNAD ROUTINE TO BE
*                                           ENTERED IF A WORK UNIT
*                                           IS LONGER THAN  THE WORK
*                                           AREA PROVIDED FOR INPUT  */
*%GOTO CCB    ;
*%CCA    :  ;
*   2 *           PTR(31),               /* DCBSYNAD - ADDRESS OF
*                                           USER-PROVIDED SYNAD
*                                           ROUTINE TO BE ENTERED IF
*                                           A WORK UNIT IS  LONGER
*                                           THAN THE WORK AREA
*                                           PROVIDED FOR  INPUT      */
*%CCB    :  ;
*   2 DCBEOBLK    PTR(31);               /* NOT USED BY QTAM         */
*
*%CD     :  ;
*%IF DSORGBX=0  %THEN
*    %GOTO CDF;
*/*                     BTAM INTERFACE                               */
*
*DECLARE 1 IHADCS34
*      BASED(ADDR(IHADCB)+52),
*   2 DCBLERB     PTR(31),               /* ADDRESS OF LINE ERROR
*                                           BLOCK                    */
*    3 DCBRDYQ  PTR(31),                 /* ADDRESS OF USER/BTAM
*                                           ROUTINE TO PROCESS
*                                           LOCAL 3270 DEVICE READY
*                                           INTERRUPTS        XA02235*/
*     4 DCBRDYI  CHAR(1),                /* READYQ INDICATORS        */
*      5 *        BIT(6),                /* RESERVED                 */
*      5 DCBRDYIQ BIT(1),                /* ADDRESS IS READYQ AND
*                                           NOT LERB                 */
*      5 DCBRDYIZ BIT(1);                /* READYQ SPECIFIED, BUT
*                                           ADDRESS WAS 0, SO USING
*                                           BTAM READYQ ROUTINE      */
*
*%IF DEVDBS=0   %THEN
*    %GOTO CDF;
*/*                     BSC INTERFACE                                */
*
*DECLARE 1 IHADCS35
*      BASED(ADDR(IHADCB)+56),
*   2 DCBXMODE    CHAR(1),               /* MODE OF TRANSMISSION FOR
*                                           BINARY  SYNCHRONOUS
*                                           COMMUNICATION (BSC)      */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 DCBXMIBC BIT(1),                  /* INTERMEDIATE BLOCK
*                                           CHECKING IS TO BE
*                                           PERFORMED                */
*    3 DCBXMDA1 BIT(1),                  /* TRANSMISSION IS THROUGH
*                                           A 2701 DATA ADAPTER UNIT
*                                           DUAL COMMUNICATION
*                                           INTERFACE B              */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 DCBXMDA2 BIT(1),                  /* TRANSMISSION IS IN CODE B
*                                           FOR A 2701 DATA ADAPTER
*                                           UNIT DUAL CODE FEATURE   */
*    3 *        BIT(3),                  /* RESERVED                 */
*   2 DCBXCODE    CHAR(1),               /* BSC CONTROL STATION FLAG
*                                           AND  TRANSMISSION CODE   */
*    3 DCBXCCSF BIT(1),                  /* BSC CONTROL STATION FLAG
*                                           IF ZERO, THIS IS THE
*                                           CONTROL STATION.
*                                           IF ONE, THIS IS THE
*                                           REMOTE STATION.          */
*    3 DCBXCPTP BIT(1),                  /* IF PTOP IS SPECIFIED IN
*                                           SYSGEN PROCEDURE -
*                                           SCHEDULE AN ASYNCHRONOUS
*                                           EXIT TO INTERFACE
*                                           RESOLUTION ROUTINE       */
*    3 DCBXCTR1 BIT(1),                  /* 6-BIT TRANSCODE IS BEING
*                                           USED (BIT 4 IS ALSO ON)  */
*    3 DCBXCAS1 BIT(1),                  /* USASCII TRANSMISSION CODE
*                                           IS BEING USED (BIT 5 IS
*                                           ALSO ON)                 */
*    3 DCBXCEBC BIT(2),                  /* IF BOTH BITS ARE ZERO,
*                                           EBCDIC  TRANSMISSION
*                                           CODE IS BEING USED.      */
*     4 DCBXCTR2 BIT(1),                 /* 6-BIT TRANSCODE IS BEING
*                                           USED (BIT 2 IS ALSO ON)  */
*     4 DCBXCAS2 BIT(1),                 /* USASCII TRANSMISSION CODE
*                                           IS BEING USED (BIT 3 IS
*                                           ALSO ON)                 */
*    3 *        BIT(2),                  /* RESERVED                 */
*   2 DCBBSRSV    CHAR(1),               /* DLE CONTROL CHARACTER    */
*   2 DCBBSWBT    CHAR(1),               /* RESERVED                 */
*   2 DCBIRRAD    PTR(31),               /* BEFORE OPEN - IF PTOP IS
*                                           SPECIFIED IN THE SYSGEN
*                                           PROCEDURE, ADDRESS OF
*                                           INTERFACE  RESOLUTION
*                                           ROUTINE.  AFTER OPEN,
*                                           THE FOLLOWING 4
*                                           CHARACTERS  OCCUPY THIS
*                                           SPACE.                   */
*    3 DCBBSTSX    CHAR(1),              /* DLE CONTROL CHARACTER    */
*    3 DCBBSSTX    CHAR(1),              /* STX CONTROL CHARACTER    */
*    3 DCBBSTEX    CHAR(1),              /* DLE CONTROL CHARACTER    */
*    3 DCBBSETX    CHAR(1),              /* ETX CONTROL CHARACTER    */
*   2 DCBBSAK0    CHAR(2),               /* ACK-0 CONTROL CHARACTER  */
*   2 DCBBSAK1    CHAR(2),               /* ACK-1 CONTROL CHARACTER  */
*   2 DCBBSENQ    CHAR(1),               /* ENQ CONTROL CHARACTER    */
*   2 DCBBSNAK    CHAR(1),               /* NAK CONTROL CHARACTER    */
*   2 DCBBSETB    CHAR(1),               /* ETB CONTROL CHARACTER    */
*   2 DCBBSDLE    CHAR(1),               /* DLE CONTROL CHARACTER    */
*   2 DCBBSEOT    CHAR(1),               /* EOT CONTROL CHARACTER    */
*   2 DCBBSSYN    CHAR(3),               /* SYN, SYN, SYN CONTROL
*                                           CHARACTERS               */
*   2 DCBBSONL    CHAR(2),               /* SOH % CONTROL CHARACTERS */
*   2 DCBBSSAK    CHAR(2),               /* WACK CONTROL CHARACTERS  */
*   2 DCBBSRVI    CHAR(2),               /* DLE @ CONTROL CHARACTERS */
*   2 *           CHAR(18);              /* RESERVED                 */
*
*%CDF : ;
*%IF DSORGQS=1  %THEN                    /* IF DSORGQS AND DSORGBS   */
*    %GOTO CDF1;                         /* ARE BOTH ZERO,           */
*%IF DSORGBS=0  %THEN                    /* BRANCH TO CF             */
*    %GOTO CF;                           /*                   SA68367*/
*%CDF1 : ;
*/*                     QSAM-BSAM-BPAM COMMON INTERFACE              */
*
*DECLARE 1 IHADCS36
*      BASED(ADDR(IHADCB)+52),
*%IF DSORGDA=1  %THEN
*    %GOTO CDA1;
*   2 DCBGERR     PTR(31),               /* ADDRESS OF SYNCHRONIZING
*                                           ROUTINE FOR GET          */
*    3 DCBPERR     PTR(31),              /* ADDRESS OF SYNCHRONIZING
*                                           ROUTINE FOR PUT          */
*     4 DCBCHECK    PTR(31),             /* ADDRESS OF CHECK MODULE  */
*%IF DSORGIS=1  %THEN
*    %GOTO CDA;
*      5 DCBOPTCD    CHAR(1),            /* OPTION CODES             */
*%GOTO CD2    ;
*%CDA1 : ;
*   2 *           PTR(31),               /* DCBGERR, DCBPERR OR
*                                           DCBCHECK                 */
*%CDA : ;
*      5 *           CHAR(1),            /* DCBOPTCD - OPTION CODES  */
*%CD2 : ;
*       6 DCBOPTW  BIT(1),               /* WRITE VALIDITY CHECK
*                                           (DASD)  (BSAM, BPAM,
*                                           QSAM, ISAM, BDAM)        */
*       6 DCBOPTU  BIT(1),               /* ALLOW DATA CHECK CAUSED
*                                           BY INVALID CHARACTER
*                                           (1403 PRINTER WITH UCS
*                                           FEATURE)  (BSAM, BPAM,
*                                           QSAM)                    */
*       6 DCBOPTC  BIT(1),               /* CHAINED SCHEDULING USING
*                                           PCI  (BSAM, BPAM, QSAM)  */
*       6 DCBOPTH  BIT(1),               /* 1287/1288 OPTICAL READER
*                                           - HOPPER EMPTY EXIT
*                                           (BSAM, BPAM)             */
*        7 DCBOPTO  BIT(1),              /* 1285/1287 OPTICAL READER
*                                           - ON-LINE CORRECTION
*                                           (QSAM)                   */
*         8 DCBBCKPT BIT(1),             /* CHANNEL-END APPENDAGE IS
*                                           TO BYPASS DOS EMBEDDED
*                                           CHECKPOINT RECORDS ON
*                                           TAPE  (BSAM, QSAM) ICB226*/
*       6 DCBOPTQ  BIT(1),               /* TRANSLATION TO OR FROM
*                                           ASCII (BSAM, BPAM, QSAM) */
*       6 DCBOPTZ  BIT(1),               /* MAGNETIC TAPE DEVICES -
*                                           USE REDUCED ERROR
*                                           RECOVERY PROCEDURE
*                                           (EXCP, BSAM, BPAM, QSAM) */
*        7 DCBSRCHD BIT(1),              /* USE SEARCH DIRECT,
*                                           INSTEAD OF SEARCH
*                                           PREVIOUS, ON RECORD
*                                           POSITION SENSING DEVICE
*                                           (EXCP, BSAM, BPAM, QSAM)
*                                                              ICB217*/
*       6 DCBOPTT  BIT(1),               /* USER TOTALING
*                                           (BSAM, QSAM)             */
*       6 *        BIT(1),               /* RESERVED                 */
*%IF DSORGDA=1  %THEN
*    %GOTO CD1;
*      5 DCBGERRA    PTR(24) BDY(BYTE),  /* ADDRESS OF SYNCHRONIZING
*                                           ROUTINE FOR GET          */
*       6 DCBPERRA    PTR(24) BDY(BYTE), /* ADDRESS OF SYNCHRONIZING
*                                           ROUTINE FOR PUT          */
*        7 DCBCHCKA   PTR(24) BDY(BYTE), /* ADDRESS OF CHECK MODULE  */
*%GOTO CD3    ;
*%CD1 : ;
*      5 *           PTR(24),            /* DCBGERRA, DCBPERRA OR
*                                           DCBCHCKA                 */
*%CD3 : ;
*%IF DSORGIS=1  %THEN                    /* IF DSORGIS OR DSORGDA    */
*    %GOTO CDB;                          /* OR DSORGMQ               */
*%IF DSORGDA=1  %THEN                    /* IS SET TO ONE,           */
*    %GOTO CDB;                          /* BRANCH TO CDB            */
*%IF DSORGMQ=1  %THEN
*    %GOTO CDB;
*   2 DCBSYNAD    PTR(31),               /* ADDRESS OF USER-PROVIDED
*                                           SYNAD ROUTINE            */
*    3 DCBIOBL     PTR(8),               /* IOB LENGTH IN DOUBLE
*                                           WORDS                    */
*    3 DCBSYNA     PTR(24) BDY(BYTE),   /* ADDRESS OF USER-PROVIDED
*                                           SYNAD ROUTINE            */
*%GOTO CD4    ;
*%CDB : ;
*   2 *           PTR(31),               /* DCBSYNAD - ADDRESS OF
*                                           SYNAD ROUTINE            */
*    3 DCBIOBL     PTR(8),               /* IOB LENGTH IN DOUBLE
*                                           WORDS                    */
*    3 *           PTR(24)  BDY(BYTE),   /* DCBSYNA - ADDRESS OF
*                                           SYNAD ROUTINE            */
*%CD4 : ;
*   2 DCBCIND1    CHAR(1),               /* CONDITION INDICATORS     */
*    3 DCBCNTOV BIT(1),                  /* DIRECT ACCESS - TRACK
*                                           OVERFLOW IN USE
*                                           (BSAM, BPAM, QSAM)
*                                           2540 CARD PUNCH - DATA
*                                           SET WAS OPENED BUT NO
*                                           DATA WAS WRITTEN  (QSAM) */
*    3 DCBCNSRD BIT(1),                  /* SEARCH DIRECT
*                                           (BSAM, BPAM, QSAM)       */
*    3 DCBCNEVB BIT(1),                  /* END OF VOLUME - USED BY
*                                           EOB ROUTINES
*                                           (BSAM, BPAM, QSAM)       */
*    3 DCBCNEVA BIT(1),                  /* END OF VOLUME - USED BY
*                                           CHANNEL-END APPENDAGE
*                                           ROUTINES  (BSAM, BPAM,
*                                           QSAM)                    */
*    3 *        BIT(1),                  /* RESERVED       ICBI DCB-2*/
*    3 DCBCNBRM BIT(1),                  /* BLOCKED RECORD BIT
*                                           MODIFIED       ICBI DCB-2*/
*    3 *       BIT(1),                   /* RESERVED       ICBI DCB-2*/
*    3 DCBCNEXB BIT(1),                  /* EXCHANGE BUFFERING
*                                           SUPPORTED  (QSAM)        */
*   2 DCBCIND2    CHAR(1),               /* CONDITION INDICATORS     */
*    3 DCBCNSTO BIT(1),                  /* PARTITIONED DATA SET -
*                                           STOW HAS BEEN PERFORMED
*                                           (BSAM, BPAM, QSAM)
*                                           SEQUENTIAL DATA SET -
*                                           UPDATE  (BSAM, BPAM)     */
*    3 DCBCNWRO BIT(1),                  /* DIRECT ORGANIZATION DATA
*                                           SET - LAST I/O WAS A
*                                           WRITE RECORD ZERO
*                                           (BSAM, BPAM, QSAM)
*                                           SEQUENTIAL DATA SET -
*                                           UPDATE EOF IS INDICATED
*                                           (BSAM, BPAM)             */
*    3 DCBCNCLO BIT(1),                  /* CLOSE IN PROCESS (QSAM)  */
*    3 DCBCNIOE BIT(1),                  /* PERMANENT I/O ERROR
*                                           (BSAM, BPAM, QSAM)       */
*    3 DCBCNBFP BIT(1),                  /* OPEN ACQUIRED BUFFER POOL
*                                           (BSAM, BPAM, QSAM)       */
*    3 DCBCNCHS BIT(1),                  /* CHAINED SCHEDULING BEING
*                                           SUPPORTED  (BSAM, BPAM,
*                                           QSAM)                    */
*    3 DCBCNFEO BIT(1),                  /* FEOV BIT  (BSAM, BPAM,
*                                            QSAM)                   */
*    3 DCBCNQSM BIT(1),                  /* ALWAYS ZERO (BSAM, BPAM)
*                                           THIS IS A QSAM DCB (QSAM)*/
*%IF DSORGIS=1  %THEN                    /* IF DSORGIS OR DSORGDA    */
*    %GOTO CDC;                          /* IS SET TO ONE,           */
*%IF DSORGDA=1  %THEN                    /* BRANCH TO CDC            */
*    %GOTO CDC;
*   2 DCBBLKSI    FIXED(15),             /* MAXIMUM BLOCK SIZE       */
*%GOTO CD7    ;
*%CDC : ;
*   2 *           FIXED(15),             /* DCBBLKSI - MAXIMUM BLOCK
*                                           SIZE                     */
*%CD7 : ;
*   2 DCBWCPO     PTR(8),                /* OFFSET OF WRITE CHANNEL
*                                           PROGRAM FROM THE  START
*                                           OF IOB                   */
*   2 DCBWCPL     PTR(8),                /* LENGTH OF WRITE CHANNEL
*                                           PROGRAM                  */
*   2 DCBOFFSR    PTR(8),                /* OFFSET OF READ CCW FROM
*                                           BSAM/BPAM PREFIX  OF IOB */
*   2 DCBOFFSW    PTR(8),                /* OFFSET OF WRITE CCW FROM
*                                           BSAM/BPAM PREFIX OF IOB  */
*   2 DCBIOBA     PTR(31),               /* FOR NORMAL SCHEDULING,
*                                           ADDRESS OF QSAM OR
*                                           BSAM/BPAM PREFIX OF IOB.
*                                           FOR CHAINED  SCHEDULING,
*                                           ADDRESS OF ICB. FOR
*                                           1419/1275, ADDRESS OF
*                                           MAGNETIC INTERRUPT
*                                           CONTROL BLOCK (MICB)
*                                           CURRENTLY BEING
*                                           PROCESSED BY READ
*                                           ROUTINE. FOR TSO
*                                           TERMINAL DATA SET OPENED
*                                           FOR INPUT AND  FORMAT U,
*                                           SIMULATED LOW-ORDER FOUR
*                                           BYTES  OF IOBCSW         */
*
*   2 DCBCICB     PTR(31),               /* SAME AS DCBCICBA BELOW
*                                                              ICB354*/
*    3 *          PTR(8),                /* DCBNCP (BSAM,BPAM) ICB354*/
*    3 DCBCICBA   PTR(24);               /* POINTER TO JES C.I.
*                                           CONTROL BLOCK (CICB)
*                                                          ICBI DCB-4*/
*DECLARE 1 IHADCS52
       BASED(ADDR(IHADCB)+80),           /*                ICBI DCB-4*/
*   2 DCBDIRCT    FIXED(15),             /* NUMBER OF BYTES USED IN
*                                           LAST DIRECTORY BLOCK
*                                           (RANGE 0-254)
*                                           (BSAM, BPAM)       ICB295*/
*    3 DCBQSWS     CHAR(1),              /* FLAG BYTE          ICB295*/
*     4 DCBUSASI    CHAR(1),             /* FLAG BYTE FOR ASCII
*                                           TAPES                    */
*      5 *        BIT(1),                /* RESERVED                 */
*      5 DCBBLBP  BIT(1),                /* BLOCK PREFIX IS FOUR-BYTE
*                                           FIELD CONTAINING BLOCK
*                                           LENGTH IN UNPACKED
*                                           DECIMAL (SPECIFIED BY
*                                           BUFFER=L)                */
*      5 DCBQADFS BIT(3),                /* USED TO PERFORM SEQUENCE
*                                           CHECKING WITH MULTIPLE
*                                           FUNCTION SUPPORT FOR 3525
*                                           (BSAM, QSAM)             */
*       6 DCBQADF1 BIT(1),               /* FIRST BIT OF DCBQADFS    */
*       6 DCBQADF2 BIT(1),               /* SECOND BIT OF DCBQADFS   */
*       6 DCBQADF3 BIT(1),               /* THIRD BIT OF DCBQADFS    */
*      5 *        BIT(2),                /* RESERVED                 */
*      5 DCBQSTRU BIT(1),                /* TRUNC ENTRY POINT ENTERED
*                                           (QSAM)                   */
*    3 DCBBUFOF    PTR(8),               /* BLOCK PREFIX LENGTH
*                                           (0-99), SPECIFIED BY
*                                           BUFOFF=N OR BUFOFF=L     */
*     4 DCBDIRCQ    PTR(8);              /* NUMBER OF BYTES USED IN
*                                           LAST DIRECTORY BLOCK
*                                           (RANGE 0-254)
*                                           (QSAM)             ICB295*/
*/*                      BSAM-QSAM-TCAM INTERFACE                    */
*DECLARE 1 IHADCS37
*      BASED(ADDR(IHADCB)+60),           /*                ICBI DCB-3*/
*   2 DCBFLAG1    CHAR(1),               /* SAM-TCAM APP. PROG.
*                                           FLAGS          ICBI DCB-3*/
*    3 DCBSTQCK    BIT(1),               /* STOP=QUICK SPECIFIED FOR
*                                           SAM-TCAM DCB   ICBI DCB-3*/
*    3 DCBSTFLS    BIT(1),               /* STOP=FLUSH SPECIFIED FOR
*                                           SAM-TCAM DCB   ICBI DCB-3*/
*    3 *           BIT(6);               /* RESERVED (TCAM-SAM)
*                                                          ICBI DCB-3*/
*
*%IF DSORGBS=0  %THEN
*    %GOTO CE;
*/*                     BSAM-BPAM INTERFACE                          */
*
*DECLARE 1 IHADCS38
*      BASED(ADDR(IHADCB)+72),
*   2 DCBEOBR     PTR(31),               /* ADDRESS OF END-OF-BLOCK
*                                           MODULE FOR READ          */
*%IF DSORGIS=1  %THEN
*    %GOTO CDD;
*    3 DCBNCP      PTR(8),               /* NUMBER OF CHANNEL
*                                           PROGRAMS.                */
*%GOTO CD8    ;
*%CDD : ;
*    3 *           PTR(8),               /* DCBNCP - NUMBER OF
*                                           CHANNEL PROGRAMS.        */
*%CD8 : ;
*                                        /* NUMBER OF READ OR WRITE
*                                           REQUESTS WHICH MAY BE
*                                           ISSUED PRIOR TO A CHECK,
*                                           NUMBER OF IOB'S
*                                           GENERATED.  (99 MAXIMUM) */
*    3 DCBEOBRA    PTR(24)  BDY(BYTE),   /* ADDRESS OF END-OF-BLOCK
*                                           MODULE FOR READ          */
*   2 DCBEOBW     PTR(31),               /* ADDRESS OF END-OF-BLOCK
*                                           MODULE FOR WRITE. FOR
*                                           BSAM CREATE BDAM
*                                           PROCESSING OF  UNBLOCKED
*                                           SPANNED RECORDS WITH
*                                           BKTEK=R  SPECIFIED,
*                                           ADDRESS OF SEGMENT WORK
*                                           AREA  CONTROL BLOCK      */
*   2 *           FIXED(15),             /* DCBDIRCT - NUMBER OF
*                                           BYTES USED IN  LAST
*                                           DIRECTORY BLOCK (RANGE
*                                           0-254)             ICB295*/
*%IF DSORGIS=1  %THEN
*    %GOTO CDE;
*   2 DCBLRECL    FIXED(15),             /* LOGICAL RECORD LENGTH    */
*%GOTO CD9    ;
*%CDE : ;
*   2 *           FIXED(15),             /* DCBLRECL - LOGICAL
*                                           RECORD LENGTH            */
*%CD9 : ;
*   2 DCBPOINT    PTR(31),               /* ADDRESS OF NOTE/POINT
*                                           MODULE                   */
*    3 DCBCNTRL    PTR(31),              /* ADDRESS OF CNTRL MODULE  */
*     4 DCBNOTE     PTR(31);             /* ADDRESS OF NOTE/POINT
*                                           MODULE                   */
*
*%CE : ;
*%IF DSORGQS=0  %THEN
*    %GOTO FIN;
*/*                     QSAM INTERFACE                               */
*
*%IF DSORGDA=0  %THEN
*    %GOTO CE1;
*DECLARE 1 IHADCS39
*      BASED(ADDR(IHADCB)+52),
*   2 DCBGERR     PTR(31),               /* ADDRESS OF SYNCHRONIZING
*                                           ROUTINE FOR GET          */
*    3 DCBPERR     PTR(31),              /* ADDRESS OF SYNCHRONIZING
*                                           ROUTINE FOR PUT          */
*     4 *           CHAR(1),             /* DCBOPTCD - OPTION CODES  */
*     4 DCBGERRA    PTR(24)  BDY(BYTE),  /* ADDRESS OF SYNCHRONIZING
*                                           ROUTINE FOR GET          */
*      5 DCBPERRA    PTR(24)  BDY(BYTE); /* ADDRESS OF SYNCHRONIZING
*                                           ROUTINE FOR PUT          */
*
*%CE1 : ;
*DECLARE 1 IHADCS40
*      BASED(ADDR(IHADCB)+72),
*   2 DCBEOBAD    PTR(31),               /* FOR SIMPLE BUFFERING,
*                                           ADDRESS OF LAST  BYTE OF
*                                           CURRENT BUFFER           */
*    3 DCBLCCW     PTR(31),              /* FOR EXCHANGE BUFFERING,
*                                           ADDRESS OF LAST  CCW IN
*                                           LIST                     */
*   2 DCBCCCW     PTR(31),               /* FOR EXCHANGE BUFFERING
*                                           ADDRESS OF  CURRENT OR
*                                           NEXT CCW                 */
*    3 DCBRECAD    PTR(31),              /* ADDRESS OF CURRENT OR
*                                           NEXT LOGICAL RECORD      */
*     4 DCBRECBT    CHAR(1),             /* FLAG BYTE                */
*      5 DCBRCREL BIT(4),                /* RELSE MACRO HAS BEEN
*                                           ISSUED  (QSAM WITH
*                                           SIMPLE BUFFERING)        */
*       6 DCBRCTRU BIT(1),               /* TRUNC MACRO HAS BEEN
*                                           ISSUED (QSAM LOCATE MODE)*/
*       6 DCBRCFGT BIT(1),               /* FIRST GET AFTER OPEN
*                                           (QSAM LOCATE MODE)       */
*      5 *        BIT(4),                /* RESERVED                 */
*     4 DCBRECA     PTR(24)  BDY(BYTE),  /* ADDRESS OF CURRENT OR
*                                           NEXT LOGICAL RECORD      */
*   2 *           CHAR(1),               /* DCBQSWS - FLAG BYTE      */
*   2 *           PTR(8),                /* DCBDIRCQ - NUMBER OF
*                                           BYTES USED IN LAST
*                                           DIRECTORY BLOCK
*                                           (RANGE 0-254)      ICB295*/
*%IF DSORGIS=1  %THEN                    /* IF DSORGIS OR DSORGBS    */
*    %GOTO CEE;                          /* IS SET TO ONE,           */
*%IF DSORGBS=1  %THEN                    /* BRANCH TO CEE            */
*    %GOTO CEE;
*   2 DCBLRECL    FIXED(15),             /* LOGICAL RECORD LENGTH    */
*%GOTO CEEA   ;
*%CEE : ;
*   2 *           FIXED(15),             /* DCBLRECL - LOGICAL
*                                           RECORD LENGTH            */
*%CEEA : ;
*%IF DSORGBS=1  %THEN
*    %GOTO CEF;
*   2 DCBCNTRL    PTR(31),               /* ADDRESS OF CNTRL MODULE  */
*%GOTO CEF1   ;
*%CEF : ;
*   2 *           PTR(31),               /* DCBCNTRL - ADDRESS OF
*                                           CNTRL MODULE             */
*%CEF1 : ;
*    3 DCBEROPT    CHAR(1),              /* ERROR OPTION             */
*     4 DCBERACC BIT(1),                 /* ACCEPT PERMANENT ERROR   */
*     4 DCBERSKP BIT(1),                 /* SKIP PERMANENT ERROR     */
*     4 DCBERABE BIT(1),                 /* ABNORMAL END OF TASK     */
*     4 *        BIT(5),                 /* RESERVED                 */
*%IF DSORGBS=1  %THEN
*    %GOTO CEF2;
*    3 DCBCNTRA    PTR(24)  BDY(BYTE),   /* ADDRESS OF CNTRL MODULE  */
*%GOTO CEF3   ;
*%CEF2 : ;
*    3 *           PTR(24)  BDY(BYTE),   /* DCBCNTRA - ADDRESS OF
*                                           CNTRL MODULE             */
*%CEF3 : ;
*   2 *           CHAR(2),               /* RESERVED                 */
*   2 DCBPRECL   FIXED(15),              /* BLOCK LENGTH, MAXIMUM
*                                           BLOCK LENGTH OR  DATA
*                                           LENGTH                   */
*   2 DCBEOB      PTR(31);               /* ADDRESS OF END OF BLOCK
*                                           MODULE                   */
*
*    %GOTO FIN;                          /* BRANCH TO FIN     SA68367*/
*%CF : ;
*%IF DSORGLR=0  %THEN                    /* IF NOT DSORGLR    SA68367*/
*    %GOTO FIN;                          /* BRANCH TO FIN     SA68367*/
*%IF DSORGIS=1  %THEN                    /* IF DSORGIS, THEN ALREADY */
*    %GOTO FIN;                          /* EXPANDED LRECL    SA68367*/
*DECLARE 1 IHADCS41
*      BASED(ADDR(IHADCB)+82),
*   2 DCBLRECL    FIXED(15);             /* LOGICAL RECORD LENGTH    */
*
*%GOTO FIN    ;
*%SLIP : ;
*/*                     GRAPHIC DEVICE INTERFACE                     */
*
*DECLARE
*  1 IHADCB   BASED(DCBPTR),
*   2 *           CHAR(12),              /* RESERVED                 */
*   2 DCBBRSA     PTR(15),               /* BUFFER RESTART ADDRESS.
*                                           BLANK BEFORE  EXECUTION
*                                           OF SECOND I/O OPERATION  */
*   2 DCBGTYPE    CHAR(1),               /* TYPE OF BUFFER
*                                           MANAGEMENT AND ATTENTION
*                                           HANDLING                 */
*%DCL DCBGTEXP CHAR;
*%DCBGTEXP='''00''X';                    /* EXPRESS                  */
*%DCL DCBGTBAS CHAR;
*%DCBGTBAS='''01''X';                    /* BASIC                    */
*   2 *           CHAR(1),               /* RESERVED                 */
*   2 DCBBFRST    PTR(15),               /* BLANK BEFORE EXECUTION
*                                           OF OPEN ROUTINE.
*                                           STARTING ADDRESS FOR
*                                           BUFFER AFTER  EXECUTION
*                                           OF OPEN ROUTINE          */
*   2 DCBBFRSZ    FIXED(15),             /* BLANK BEFORE EXECUTION
*                                           OF OPEN ROUTINE.  SIZE
*                                           OF BUFFER AFTER
*                                           EXECUTION OF OPEN
*                                           ROUTINE.                 */
*
*/*                     COMMON INTERFACE                             */
*
*   2 *           CHAR(6),               /* RESERVED                 */
*   2 DCBDSORG    CHAR(2),               /* DATA SET ORGANIZATION
*                                           BEING USED               */
*    3 DCBDSRG1    CHAR(1),              /* FIRST BYTE OF DCBDSORG   */
*     4 DCBDSGIS BIT(1),                 /* IS - INDEXED SEQUENTIAL
*                                           ORGANIZATION             */
*     4 DCBDSGPS BIT(1),                 /* PS - PHYSICAL SEQUENTIAL
*                                           ORGANIZATION             */
*     4 DCBDSGDA BIT(1),                 /* DA - DIRECT ORGANIZATION */
*     4 DCBDSGCX BIT(1),                 /* CX - BTAM OR QTAM LINE
*                                           GROUP                    */
*     4 DCBDSGCQ BIT(1),                 /* CQ - QTAM DIRECT ACCESS
*                                           MESSAGE QUEUE            */
*     4 DCBDSGMQ BIT(1),                 /* MQ - QTAM PROBLEM
*                                           PROGRAM MESSAGE QUEUE    */
*     4 DCBDSGPO BIT(1),                 /* PO - PARTITIONED
*                                           ORGANIZATION             */
*     4 DCBDSGU  BIT(1),                 /* U - UNMOVABLE, THE DATA
*                                           CONTAINS  LOCATION
*                                           DEPENDENT INFORMATION    */
*    3 DCBDSRG2    CHAR(1),              /* SECOND BYTE OF DCBDSORG  */
*     4 DCBDSGGS BIT(1),                 /* GS - GRAPHICS
*                                           ORGANIZATION             */
*     4 DCBDSGTX BIT(1),                 /* TX - TCAM LINE GROUP     */
*     4 DCBDSGTQ BIT(1),                 /* TQ - TCAM MESSAGE QUEUE  */
*     4 *        BIT(1),                 /* RESERVED                 */
*     4 DCBACBM BIT(1),                  /* ACCESS METHOD CONTROL
*                                           BLOCK          ICBI DCB-1*/
*     4 *       BIT(3),                  /*  RESERVED      ICBI DCB-1*/
*   2 DCBIOBAD    PTR(31),               /* BLANK BEFORE EXECUTION
*                                           OF OPEN ROUTINE.
*                                           ADDRESS OF STANDARD
*                                           FIELDS OF FIRST IOB
*                                           AFTER EXECUTION OF OPEN
*                                           ROUTINE                  */
*
*/*                     FOUNDATION EXTENSION                         */
*
*   2 DCBPOLST    PTR(31),               /* ADDRESS OF AREA WHERE A
*                                           DCB LIST IS TO BE
*                                           CONSTRUCTED FOR POLLING
*                                           PURPOSES                 */
*    3 DCBGNCP     PTR(8),               /* NUMBER OF I/O
*                                           INSTRUCTIONS TO BE
*                                           ISSUED   BEFORE A WAIT
*                                           MACRO INSTRUCTION        */
*    3 DCBPOLSA    PTR(24)  BDY(BYTE),   /* SAME AS DCBPOLST ABOVE   */
*   2 DCBEXLST    PTR(31),               /* ADDRESS OF USER'S EXIT
*                                           LIST                     */
*    3 *           CHAR(1),              /* RESERVED                 */
*    3 DCBEXLSA    PTR(24)  BDY(BYTE),   /* ADDRESS OF USER'S EXIT
*                                           LIST                     */
*
*/*                     FOUNDATION BEFORE OPEN                       */
*
*   2 DCBDDNAM    CHAR(8),               /* 8-BYTE NAME FROM DD
*                                           STATEMENT THAT  DEFINES
*                                           DATA SET ASSOCIATED WITH
*                                           THIS DCB                 */
*   2 DCBOFLG     CHAR(1),               /* FLAGS USED BY OPEN
*                                           ROUTINE                  */
*    3 DCBOFGRW BIT(1),                  /* IF ZERO, LAST I/O
*                                           OPERATION WAS GREAD.
*                                           IF ONE, LAST I/O
*                                           OPERATION WAS GWRITE.    */
*    3 *        BIT(1),                  /* RESERVED                 */
*    3 DCBOFEOV BIT(1),                  /* SET TO 1 BY EOV WHEN IT
*                                           CALLS CLOSE  ROUTINE FOR
*                                           CONCATENATION OF DATA
*                                           SETS  WITH UNLIKE
*                                           ATTRIBUTES               */
*    3 DCBOFOPN BIT(1),                  /* AN OPEN HAS BEEN
*                                           SUCCESSFULLY COMPLETED   */
*    3 DCBOFPPC BIT(1),                  /* SET TO 1 BY PROBLEM
*                                           PROGRAM TO INDICATE A
*                                           CONCATENATION OF UNLIKE
*                                           ATTRIBUTES               */
*    3 DCBOFTM  BIT(1),                  /* TAPE MARK HAS BEEN READ  */
*    3 DCBOFUEX BIT(1),                  /* SET TO 0 BY AN I/O
*                                           SUPPORT FUNCTION WHEN
*                                           THAT FUNCTION TAKES A
*                                           USER EXIT. SET TO 1 ON
*                                           RETURN FROM USER EXIT TO
*                                           THE I/O  SUPPORT
*                                           FUNCTION WHICH TOOK THE
*                                           EXIT.                    */
*    3 DCBOFIOF BIT(1),                  /* SET TO 1 BY AN I/O
*                                           SUPPORT FUNCTION IF  DCB
*                                           IS TO BE PROCESSED BY
*                                           THAT FUNCTION            */
*   2 DCBIFLG     CHAR(1),               /* SET TO ZERO BY GRAPHIC
*                                           ROUTINES BUT USED  BY
*                                           IOS IN COMMUNICATING
*                                           ERROR CONDITIONS  AND IN
*                                           DETERMINING CORRECTIVE
*                                           PROCEDURES               */
*   2 DCBMACR     CHAR(2),               /* MACRO INSTRUCTION
*                                           REFERENCE                */
*    3 DCBMACR1    CHAR(1),              /* FIRST BYTE OF DCBMACR    */
*     4 *        BIT(2),                 /* RESERVED                 */
*     4 DCBMRRD  BIT(1),                 /* READ                     */
*     4 *        BIT(3),                 /* RESERVED                 */
*     4 DCBMRCRL BIT(1),                 /* CNTRL                    */
*     4 *        BIT(1),                 /* RESERVED                 */
*    3 DCBMACR2    CHAR(1),              /* SECOND BYTE OF DCBMACR   */
*     4 *        BIT(2),                 /* RESERVED                 */
*     4 DCBMRWRT BIT(1),                 /* WRITE                    */
*     4 *        BIT(3),                 /* RESERVED                 */
*     4 DCBMRCTL BIT(1),                 /* CNTRL                    */
*     4 *        BIT(1);                 /* RESERVED                 */
*
*/*                     FOUNDATION AFTER OPEN                        */
*
*DECLARE 1 IHADCS42
*      BASED(ADDR(IHADCB)+40),
*   2 DCBTIOT     PTR(15),               /* OFFSET FROM TIOT ORIGIN
*                                           TO DD ENTRY  ASSOCIATED
*                                           WITH THIS DCB            */
*   2 DCBMACRF    CHAR(2),               /* SAME AS DCBMACR BEFORE
*                                           OPEN                     */
*    3 DCBMACF1    CHAR(1),              /* FIRST BYTE OF DCBMACRF   */
*     4 *        BIT(2),                 /* RESERVED                 */
*     4 DCBMFRD  BIT(1),                 /* READ                     */
*     4 *        BIT(3),                 /* RESERVED                 */
*     4 DCBMFCRL BIT(1),                 /* CNTRL                    */
*     4 *        BIT(1),                 /* RESERVED                 */
*    3 DCBMACF2    CHAR(1),              /* SECOND BYTE OF DCBMACRF  */
*     4 *        BIT(2),                 /* RESERVED                 */
*     4 DCBMFWRT BIT(1),                 /* WRITE                    */
*     4 *        BIT(3),                 /* RESERVED                 */
*     4 DCBMFCTL BIT(1),                 /* CNTRL                    */
*     4 *        BIT(1),                 /* RESERVED                 */
*   2 DCBDEBAD    PTR(31),               /* ADDRESS OF ASSOCIATED
*                                           DEB                      */
*    3 DCBIFLGS    CHAR(1),              /* SAME AS DCBIFLG BEFORE
*                                           OPEN                     */
*    3 DCBDEBA     PTR(24)  BDY(BYTE),   /* ADDRESS OF ASSOCIATED
*                                           DEB                      */
*   2 DCBGIOCR    PTR(31),               /* ADDRESS OF GRAPHICS I/O
*                                           CONTROL ROUTINE          */
*    3 DCBOFLGS    CHAR(1),              /* SAME AS DCBOFLG BEFORE
*                                           OPEN                     */
*    3 DCBGIOCA    PTR(24)  BDY(BYTE);   /* ADDRESS OF GRAPHICS I/O
*                                           CONTROL ROUTINE          */
*
*%FIN: ;
