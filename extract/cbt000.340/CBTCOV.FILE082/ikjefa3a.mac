            %GOTO  A3AGO;
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
* /*                                                                 */
* /*                       I K J E F A 3 A                           */
* /*                                                                 */
* /*             ACCOUNT/DELETE DEFINE CONSTANTS MACRO               */
* /*                                                                 */
* /*   STATUS                                                        */
* /*   CHANGE LEVEL 000                                              */
* /*   PTMS INCLUDED: 2582,4175,4478,4483,5522                       */
* /*   CHANGE LEVEL 001                                              */
* /*   APARS INCLUDED: 45306                                         */
* /*   PTMS INCLUDED: 1850,1859                                      */
* /*   C    285104,288304,291304                              A45306 */
* /*   C    254588-254695                                      M1850 */
* /*   C    267394,162240                                      M1859 */
* /*   D    162280-162368,162744-162820                        M1859 */
* /*   C    83200,83800,85800,89800,90400,93200,96700,97600,   21974 */
* /*   C    98200,101000,105600,106200,122600,125000,128200,   21974 */
* /*   C    130200,132400,135600,142146,142150,142194,146200,  21974 */
* /*   C    149000,185800,193726-193732,193864,193865,193997,  21974 */
* /*   C    193998,198600-199000,221800-222200,235200,236200,  21974 */
* /*   C    237200,238124,276522,276530,276574,276575          21974 */
* /*   D    183880-183984,276208-276394,279544-279837          21974 */
* /*                                                                 */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
* /*                                                                 */
 %A3AGO:     ;
           %IF XSECT = 'CSECT'
             %THEN
               %GOTO  TARG2;
             %ELSE    %;
           GENERATE DATA;
&SECTN1  DSECT
 @ENDGEN
             %GOTO  TARG2A;
 %TARG2:     ;
           GENERATE DATA;
&SECTN1  CSECT
 @ENDGEN
 %TARG2A:    ;
 /*                     DEFINE ROUTINE NAMES                         */
 00280000           DECLARE
 00300000                 /* IDENTIFY EXTERNAL ENTRIES AND NAMES
 00320000                 IKJEFA31  ENTRY EXTERNAL,  /* DELETE MESSAGES
 00340000                 ANDXL  NONLOCAL EXTERNAL ; /* MESSAGE INDEX
 00360000
 00380000
 00400000           DECLARE
 00420000                 /* REGISTER ASSIGNMENTS
 00440000                 R0   REG(0)  PTR(31),/* GP REGISTER 0
 00460000                 R1   REG(1)  PTR(31),/* GP REGISTER 1
 00480000                   POSTR  PTR(31) REG(1),  /* PTR TO ECB FOR PO
 00500000                 R2   REG(2)  PTR(31), /* GP REGISTER 2
 00540000                   PLPTR PTR(31) REG(2),/* PTR TO ACCOUNT PARM
 00560000                   IOPLPTR PTR(31) REG(2), /* PTR TO SERV RTN P
 00564000                 R3   REG(3)  PTR(31),/* GP REGISTER 3
 00580000                   RECBP PTR(31) REG(3), /* PTR TO ECB FOR WAIT
 00600000                   CHRPTR  PTR(31)  REG(3),  /* PTR TO SCAN CHA
 00624000                 R4   REG(4)  PTR(31),/* GP REGISTER 4
 00640000                   PDLPTR  PTR(31) REG(4), /* PTR TO PARSE DESC
 00660000                   GMSPP   PTR(31)  REG(4),  /* PTR TO GOTMAIN
 00700000                 R5   REG(5)  PTR(31),/* GP REGISTER 5
 00720000                   PDLPTRA PTR(31) REG(5), /* PTR TO PARSE DESC
 00740000                   QLNGR   PTR(31) REG(5),  /* ENQUEUE NAME LEN
 00744000                 R6   REG(6)  PTR(31),/* GP REGISTER 6
 00780000                   QNAMR   PTR(31) REG(6),  /* PTR TO ENQUEUE N
 00784000                   CHRCTR  PTR(31)  REG(6),  /* SCAN COUNTER
 00788000                 R7   REG(7)  PTR(31),/* GP REGISTER 7
 00800000                 R8   REG(8)  PTR(31),/* GP REGISTER 8
 00820000                 R9   REG(9)  PTR(31),/* GP REGISTER 9
 00840000                 R10  REG(10) PTR(31),/* GP REGISTER 10
 00860000                 R11  REG(11) PTR(31),/* GP REGISTER 11
 00880000                 R12  REG(12) PTR(31),/* GP REGISTER 12
 00900000                 R13  REG(13) PTR(31),/* GP REGISTER 13
 00920000                 R14  REG(14) PTR(31),/* GP REGISTER 14
 00940000                 R15  REG(15) PTR(31);/* GP REGISTER 15
 00960000
 00980000           RESTRICT  (PLPTR);         /* RESERVE FOR POINTER SE
 01000000           RESTRICT  (R8);            /* BASE PTR FOR STATIC DA
 01020000           RESTRICT  (R9);            /* BASE PTR FOR IKJDEL2
 01040000           RESTRICT  (R7);            /* 2ND BASE PTR FOR IKJDE
 01044000
 01060000

           DECLARE
                 /* SAVE AREAS FOR LINK REGISTER                     */
                 SAV14A  PTR(31),
                 SAV14AB PTR(31),
                 SAV14CL PTR(31),
                 SAV14DC PTR(31),
                 SAV14DL PTR(31),
                 SAV14DS PTR(31),
                 SAV14FM PTR(31),
                 SAV14FR PTR(31),
                 SAV14GB PTR(31),
                 SAV14GL PTR(31),
                 SAV14LC PTR(31),
                 SAV14MF PTR(31),
                 SAV14PT PTR(31),
                 SAV14SP PTR(31),
                 SAV14V  PTR(31);
 01380000           DECLARE
 01384000                 /* PROCESSOR FLOW POINTERS
 01388000                 1 FLOPTRS BDY(WORD), /* FLOW POINTER AREA
 01392000                   2 SAV14E  PTR(31), /* FOR ERRFLO
 01392800                   2 SAV14DR PTR(31), /* FOR DRDFLO
 01396000                   2 SAV14NC PTR(31), /* FOR FOR RD DIREC FLOW
 01396400                   2 SAV14NQ PTR(31); /* FOR ENQUEUE FLOW
 01404000
 01407600           DECLARE
 01411200                 /* PSEUDO-LABEL FLOW SWITCHES
 01414800                 ERRFLO  LABEL BASED(SAV14E),
 01418400                 DRDFLO  LABEL BASED(SAV14DR),
 01422000                 INCFLO  LABEL BASED(SAV14NC),  /*
 01425600                 NQFLO   LABEL BASED(SAV14NQ);  /*
 01427600
 01429200           DECLARE
 01432800                 /* LOCATE RETURN CODE
 01436400                 RCPTR  PTR(31),      /* PTR TO RTN CODE LIST
 01438400                 1 RTCLIST  BASED(RCPTR),  /* NAME OF RTN CODE
 01438800                   2 RCLRES  CHAR(3), /* RESERVED
 01439200                   2 RCLC1  PTR(8),   /* 1ST RETURN CODE
 01439600                 SAVAR  PTR(31) BASED(R13+4),    /* CALLER'S SA
 01440000                 RETRNCD PTR(31) BASED(SAVAR+16); /* RETURN COD
 01460000

           DECLARE
                 DPLPTR  PTR(31),     /* FOR DELETE POINT LIST       */
                 DNMIDP  PTR(31),     /* FOR DPL ENTRY               */
                 DPLNDP  PTR(31),     /* FOR END OF DPL              */
                 NAMPTR  PTR(31);     /* FOR CURRENT PDE             */
 01680000           DECLARE
 01700000                 /* SAVE AREA FOR NODELIST PARSE VALIDITY CHK E
 01720000                 SVCHKPS  CHAR(72) BDY(WORD);
 01740000
 01760000
 01780000           DECLARE
 01800000                 /* POINTERS FOR MAPPING FORMATS
 01820000                 HEDBPTR  PTR(31),    /* HEADER BLOCK
 01840000                 UADSNPTR PTR(31),    /* PROTOTYPE OFFSET BLOCK
 01860000                 DPOBPTR  PTR(31),    /* PASSWORD OFFSET BLOCK
 01880000                 DNOBPTR  PTR(31),    /* ACCOUNT NUMBER OFFSET
 01900000                 DROBPTR  PTR(31),    /* PROCEDURE NAME OFFSET
 01920000                 UADSPPTR PTR(31),    /* PASSWORD DATA BLOCK
 01940000                 UADSAPTR PTR(31),    /* ACCOUNT NUMBER DATA BL
 01960000                 UADSRPTR PTR(31),    /* PROCEDURE NAME DATA BL
 01980000                 UADSDPTR PTR(31),    /* PROTOTYPE NAME DATA BL
 01984000                 FSQEPTR  PTR(31),    /* FREE SPACE QUEUE ELEME
 02000000                 UIDLPTR  PTR(31);    /* DELETE POINT LIST
 02020000
 02040000 @EJECT
 02060000   %INCLUDE SYSLIB(IKJEFUAD);
 02080000 @EJECT
 02100000*        %GOTO ACTMC3;
 02140000         MACRO
 02160000         IKJEFDPL
 02180000         EJECT
 02200000** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 02220000**
 02240000**                D E L E T E   P O I N T   L I S T
 02260000**
 02280000** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 02300000**
 02320000**            I-----------------------------------------------I
 02340000**      0     I DADP                                          I
 02360000**            I-----------------------------------------------I
 02380000
**      4     I DCDP                                          I      *
**           -I-----------------------------------------------I-     *
**      8     I DUSERID (DUSRID1,DUSRIDN)                     I      *
**            I                                               I      *
**            I-----------------------------------------------I      *
**     16     I DUOFFS (DUOFFLG,DUOFNEX,DUOFSUB,DUOFDAT)      I      *
**            I                                               I      *
**            I-----------I-----------------------------------I      *
**     28     I DUCLS     I DUFLOC                            I      *
**            I-----------I-----------I-----------I-----------I      *
**     32     I DUSRDTN               I DUSRDCN               I      *
**           -I-----------I-----------I-----------I-----------I-     *
**     36     I DPASWD (DPSWD1,DPSWDN)                        I      *
**            I                                               I      *
**            I-----------------------------------------------I      *
**     44     I DPOFFS (DPOFFLG,DPOFNEX,DPOFSUB,DPOFDAT)      I      *
**            I                                               I      *
**            I-----------I-----------------------------------I      *
**     56     I DPCLS     I DPFLOC                            I      *
**            I-----------I-----------I-----------I-----------I      *
**     60     I DPSWDTN               I DPSWDCN               I      *
**           -I-----------I-----------I-----------I-----------I-     *
**     64     I DACCTN (DACCTN1,DACCTNN)                      I      *
**            I-----------------------------------------------I      *
**     72     I DAOFFS (DAOFFLG,DAOFNEX,DAOFSUB,DAOFDAT)      I      *
**            I                                               I      *
**            I-----------I-----------------------------------I      *
**     84     I DACLS     I DAFLOC                            I      *
**            I-----------I-----------I-----------I-----------I      *
**     88     I DACCTTN               I DACCTCN               I      *
**           -I-----------I-----------I-----------I-----------I-     *
**     92     I DROCNM (DROCNM1,DROCNMN)                      I      *
**            I-----------------------------------------------I      *
**    100     I DROFFS (DROFFLG,DROFNEX,DROFSUB,DROFDAT)      I      *
**            I                                               I      *
**            I-----------I-----------------------------------I      *
**    112     I DRCLS     I DRFLOC                            I      *
**            I-----------I-----------I-----------I-----------I      *
**    116     I DRCNMTN               I DRCNMCN               I      *
**           -I-----------I-----------I-----------I-----------I-     *
**    120     I DEND      I                                          *
**            I-----------I                                          *
**                                                                   *
**                                                                   *
         SPACE 1
         SPACE 1
DPLB     DSECT ,DPLPTR
         SPACE 1
         DS    0F                      ALIGN TO WORD BOUNDARY
DADP     DS    AL4                     PTR WITHIN DPL TO LEVEL
**                                      ..ORIGINALLY ASSIGNED AS
**                                      ..POINT OF DELETION
DCDP     DS    AL4                     PTR WITHIN DPL TO LEVEL
**                                      ..CURRENTLY ACTIVE AS THE
**                                      ..POINT OF DELETION
         SPACE 1
DUSERID  DS    0CL8                    CURRENT USERID LIST
DUSRID1  DS    AL4                     PTR TO FIRST USERID PDE
DUSRIDN  DS    AL4                     PTR TO CURRENT USERID PDE
DUOFFS   DS    0CL12                   DUMMY USERID OFFSET BLOCK
DUOFFLG  DS    BL1                     DUMMY OFFSET CONTROL FLAGS
DUOFLG1  EQU   X'80'                   DUMMY CHAINING FLAG
DUOFNEX  DS    AL3                     DUMMY OFFSET TO NEXT OFFSET
DUOFSUB  DS    AL4                     DUMMY OFFSET TO SUB-LEVEL
DUOFDAT  DS    AL4                     DUMMY OFFSET TO DATA BLOCK
DUCLS    DS    BL1                     USERID COMMAND LIST FLAGS
DUCLSF1  EQU   X'80'                   ..0 -- IF USERID SUPPLIED
**                                      ..1 -- IF * IN COMMAND FIELD
**                                      ..FLAGS 1 - 7 RESERVED
DUFLOC   DS    AL3                     DUMMY PTR TO OFFSET BLOCK
DUSRDXN  DS    0CL4                    DUMMY USERID NAME COUNTS
DUSRDTN  DS    AL2                     DUMMY TOTAL NUMBER OF NAMES
DUSRDCN  DS    AL2                     DUMMY NUMBER OF CURRENT NAME
         SPACE 1
DPASWD   DS    0CL8                    CURRENT PASSWORD LIST
DPASWD1  DS    AL4                     PTR TO FIRST PASSWORD PDE
DPASWDN  DS    AL4                     PTR TO CURRENT PASSWORD PDE
DPOFFS   DS    0CL12                   PASSWORD OFFSET BLOCK
DPOFFLG  DS    BL1                     PASSWD OFFSET CONTROL FLAGS
DPOFLG1  EQU   X'80'                   PASSWD OFFSET CHAINING FLAG
**                                      ..0 -- CONTINUE CHAINING
**                                      ..1 -- LAST PASSWORD FOR
**                                      .......THIS USERID
**                                      FLAGS 1 - 7 RESERVED
DPOFNEX  DS    AL3                     OFFSET TO ENXT PASSWD OFFSET
DPOFSUB  DS    AL4                     OFFSET TO ASSOCIATED ACCOUNT
**                                      ..NUMBER OFFSET
DPOFDAT  DS    AL4                     OFFSET TO PASSWD DATA BLOCK
DPCLS    DS    BL1                     PASSWORD COMMAND LIST FLAGS
DPCLSF1  EQU   X'80'                   ..0 -- IF PASSWORD SUPPLIED
**                                      ..1 -- IF * IN COMMAND FIELD
DPCLSF2  EQU   X'40'                   ..0 -- IF SINGLE PASSWORD
**                                      ..1 -- IF PASSWORD LIST
DPFLOC   DS    AL3                     POINTER TO CURRENT PASSWD
**                                      ..OFFSET BLOCK (DPOFFS)
DPSWDXN DS     0CL4                    PASSWORD NAME COUNTS
DPSWDTN  DS    AL2                     TOTAL NUMBER OF PASSWORDS
DPSWDCN  DS    AL2                     NUMBER OF CURRENT PASSWD
         SPACE 1
DACCTN   DS    0CL8                    CURRENT ACCOUNT NUMBER LIST
DACCTN1  DS    AL4                     PTR TO FIRST ACCT NMBR PDE
DACCTNN  DS    AL4                     PTR TO CURRENT ACCT NMBR PDE
DAOFFS   DS    0CL12                   ACCOUNT NUMBER OFFSET BLOCK
DAOFFLG  DS    BL1                     ACCT NMBR OFFSET CNTRL FLAGS
DAOFLG1  EQU   X'80'                   ACCTNMBR OFFSET CHAINING FLG
**                                      ..0 -- CONTINUE CHAINING
**                                      ..1 -- LAST ACCT NMBR FOR
**                                      .......THIS PASSWORD
**                                      FLAGS 1 - 7 RESERVED
DAOFNEX  DS    AL3                     OFFSET TO NEXT ACCT NMBR
**                                      ..OFFSET BLOCK
DAOFSUB  DS    AL4                     OFFSET TO ASSOCIATED PROCNAME
**                                      ..OFFSET BLOCK
DAOFDAT  DS    AL4                     OFFSET TO ACCOUNT NUMBER DATA
DACLS    DS    BL1                     ACCT NMBR COMMAND LIST FLAGS
DACLSF1  EQU   X'80'                    ..0 -- IF ACCT NMBR SUPPLIED
**                                      ..1 -- IF * IN COMMAND FIELD
DAFLOC   DS    AL3                     POINTER TO CURRENT ACCOUNT
**                                      ..NUMBER OFFSET BLOCK (DAOFFS)
DACCTXN  DS    0CL2                    ACCTNMBR NAME COUNTS
DACCTTN  DS    AL2                     TOTAL NUMBER OF ACCT NMBRS
DACCTCN  DS    AL2                     NUMBER OF CURRENT ACCTNMBR
         SPACE 1
DROCNM   DS    0CL8                    CURRENT PROCNAME LIST
DROCNM1  DS    AL4                     PTR TO FIRST PROCNAME PDE
DROCNMN  DS    AL4                     PTR TO CURRENT PROCNAME PDE
DROFFS   DS    0CL12                   PROCNAME OFFSET BLOCK
DROFFLG  DS    BL1                     PROCNAME OFFSET CNTRL FLAGS
**                                      ..0 -- CONTINUE CHAINING
**                                      ..1 -- LAST PROCNAME FOR
**                                      .......THIS ACCOUNT NUMBER
DROFNEX  DS    AL3                     OFFSET TO NEXT PROCNAME
**                                      ..OFFSET BLOCK
DROFSUB  DS    AL4                     DUMMY SUBLEVEL OFFSET
DROFDAT  DS    AL4                     OFFSET TO PROCNAME DATA BLOCK
DRCLS    DS    BL1                     PROCNAME COMMAND LIST FLAGS
DRCLSF1  EQU   X'80'                    ..0 -- IF PROCNAME SUPPLIED
**                                      .......NO ASTERISK ABILITY
DRFLOC   DS    AL3                     POINTER TO CURRENT PROCNAME
**                                      ..OFFSET BLOCK (DROFFS)
DRCNMXN  DS    0CL4                    PROCNAME NAME COUNTS
DRCNMTN  DS    AL2                     TOTAL NUMBER OF PROCNAMES
DRCNMCN  DS    AL2                     TOTAL NUMBER OF PROCNAMES
         SPACE 1
DEND     DS    AL1                     END OF DPL FLAG -- 'FF'
         EJECT
** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
**                                                                   *
**            D  P  L    E N T R Y    P R O T O T Y P E              *
**                                                                   *
** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
**                                                                   *
**            I-----------------------------------------------I      *
**      0     I NAMID (NAMID1)                                I      *
**            I - - - - - - - - - - - - - - - - - - - - - - - I      *
**      4     I (NAMIDN)                                      I      *
**            I-----------I-----------------------------------I      *
**      8     I NMOFFS    I (NMOFNEX)                         I      *
**            I (NMOFFLG) I                                   I      *
**            I - - - - - I - - - - - - - - - - - - - - - - - I      *
**     12     I (NMOFSUB)                                     I      *
**            I - - - - - - - - - - - - - - - - - - - - - - - I      *
**     16     I (NMOFDAT)                                     I      *
**            I-----------I-----------------------------------I      *
**     20     I NMCLS     I NMFLOC                            I      *
**            I-----------I-----------I-----------I-----------I      *
**     24     I NMDTN                 I NMDCN                 I      *
**           -I-----------I-----------I-----------I-----------I-     *
**     28     I NMTST     I                                          *
**            I-----------I                                          *
**                                                                   *
**                                                                   *
DNAMID   DSECT ,DNMIDP
         SPACE 1
         DS    0F                      ALIGN ON WORD BOUNDARY
NAMID    DS    0CL8                    DPL ENTRY NAME LIST
NAMID1   DS    AL4                     PTR TO FIRST NAME PDE
NAMIDN   DS    AL4                     PTR TO CURRENT NAME PDE
NMOFFS   DS    0CL12                   NAME OFFSET BLOCK
NMOFFLG  DS    BL1                     NAME OFFSET CONTROL FLAGS
**                                      ..0 -- CONTINUE CHAINING
**                                      ..1 -- LAST NAME OF LEVEL
NMOFNEX  DS    AL3                     OFFSET TO NEXT NAME OFFSET
NMOFSUB  DS    AL4                     OFFSET TO SUBLEVEL OFFSET
NMOFDAT  DS    AL4                     OFFSET TO NAME DATA BLOCK
NMCLS    DS    BL1                     NAME COMMAND LIST FLAGS
NMVLDG1  EQU   X'80'                    ..0 -- IF NAME SUPPLIED
**                                      ..1 -- IF * IN COMMAND FIELD
NMFLOC   DS    AL3                     PTR,TO CURRENT NAME OFFSET
**                                      ..(NMOFFS)
NMDTN    DS    AL2                     TOTAL NUMBER OF NAMES
NMDCN    DS    AL2                     NUMBER OF CURRENT NAME
NMTST    DS    AL1                     END OF DPL FLAG -- 'FF'
         EJECT
** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
**                                                                   *
**                   N A M E    L I S T    P  D  E                   *
**                         P R O T O T Y P E                         *
** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
**                                                                   *
**            I-----------------------------------------------I      *
**      0     I NAMPTR1                                       I      *
**            I-----------------------I-----------I-----------I      *
**      4     I NAMLNG                I NAMFLGS   I RESERVED  I      *
**            I-----------------------I-----------I-----------I      *
**      8     I NPTRNEX (NPNEXC)                              I      *
**            I-----------------------------------------------I      *
**                                                                   *
**                                                                   *
         SPACE 1
NAMPDE   DSECT ,NAMPTR                                               *
         SPACE 1
         DS    0F                      ALIGN TO WORD BOUNDARY
NAMPTR1  DS    AL4                     PTR TO NAME (CHAR STRING)
NAMLNG   DS    AL2                     LENGTH OF NAME STRING
NAMFLGS  DS    BL1                     NAME OF FLAG AREA
NAMFLG1  EQU   X'80'                   ..0 -- PARAMETER OMITTED
**                                      ..1 -- PARAMETER SUPPLIED
**                                      ..FLAGS 2 - 8 RESERVED
         DS    BL1                     RESERVED
NPTRNEX  DS    0AL4                    PTR TO NEXT PDE IN LIST
**                                      ..NOTE -- THIS FIELD DOES
**                                      .......NOT EXIST IN SINGLE
**                                      .......UNCHAINED ENTRY
NPNEXC   DS    CL4                     END OF LIST CHARACTER FLAGS
         MEND   ,       */
*%ACTMC3  :  ;
*/*  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*/*                                                                  */
*/*               D E L E T E   P O I N T   L I S T                  */
*/*                                                                  */
*/*  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*/*                                                                  */
*/*           I-----------------------------------------------I      */
*/*     0     I DADP                                          I      */
*/*           I-----------------------------------------------I      */
*/*     4     I DCDP                                          I      */
*/*          -I-----------------------------------------------I-     */
*/*     8     I DUSERID (DUSRID1,DUSRIDN)                     I      */
*/*           I                                               I      */
*/*           I-----------------------------------------------I      */
*/*    16     I DUOFFS (DUOFFLG,DUOFNEX,DUOFSUB,DUOFDAT)      I      */
*/*           I                                               I      */
*/*           I-----------I-----------------------------------I      */
*/*    28     I DUCLS     I DUFLOC                            I      */
*/*           I-----------I-----------I-----------------------I      */
*/*    32     I DUSRDTN               I DUSRDCN               I      */
*/*          -I-----------------------I-----------------------I-     */
*/*    36     I DPASWD (DPSWD1,DPSWDN)                        I      */
*/*           I                                               I      */
*/*           I-----------------------------------------------I      */
*/*    44     I DPOFFS (DPOFFLG,DPOFNEX,DPOFSUB,DPOFDAT)      I      */
*/*           I                                               I      */
*/*           I-----------I-----------------------------------I      */
*/*    56     I DPCLS     I DPFLOC                            I      */
*/*           I-----------I-----------I-----------------------I      */
*/*    60     I DPSWDTN               I DPSWDCN               I      */
*/*          -I-----------------------I-----------------------I-     */
*/*    64     I DACCTN (DACCTN1,DACCTNN)                      I      */
*/*           I                                               I      */
*/*           I-----------------------------------------------I      */
*/*    72     I DAOFFS (DAOFFLG,DAOFNEX,DAOFSUB,DAOFDAT)      I      */
*/*           I                                               I      */
*/*           I-----------I-----------------------------------I      */
*/*    84     I DACLS     I DAFLOC                            I      */
*/*           I-----------I-----------I-----------------------I      */
*/*    88     I DACCTTN               I DACCTCN               I      */
*/*          -I-----------------------I-----------------------I-     */
*/*    92     I DROCNM (DROCNM1,DROCNMN)                      I      */
*/*           I-----------------------------------------------I      */
*/*   100     I DROFFS (DROFFLG,DROFNEX,DROFSUB,DROFDAT)      I      */
*/*           I                                               I      */
*/*           I-----------I-----------------------------------I      */
*/*   112     I DRCLS     I DRFLOC                            I      */
*/*           I-----------I-----------I-----------------------I      */
*/*   116     I DRCNMTN               I DRCNMCN               I      */
*/*           I-----------I-----------I-----------------------I      */
*/*   120     I DEND      I                                          */
*/*           I-----------I                                          */
*/*                                                                  */
*/*                                                                  */
*
*
*DECLARE
*  1 DPLB     BASED(DPLPTR),
*
*
*   2 DADP     PTR(31)  BDY(WORD),
*                                    /* PTR WITHIN DPL TO LEVEL      */
*/*                                     ..ORIGINALLY ASSIGNED AS     */
*/*                                     ..POINT OF DELETION          */
*   2 DCDP     PTR(31),              /* PTR WITHIN DPL TO LEVEL      */
*/*                                     ..CURRENTLY ACTIVE AS THE    */
*/*                                     ..POINT OF DELETION          */
*
*   2 DUSERID  CHAR(8) BDY(WORD),    /* CURRENT USERID LIST          */
*    3 DUSRID1  PTR(31),             /* PTR TO FIRST USERID PDE      */
*    3 DUSRIDN  PTR(31),             /* PTR TO CURRENT USERID PDE    */
*   2 DUOFFS   CHAR(12) BDY(WORD),   /* DUMMY USERID OFFSET BLOCK    */
*    3 DUOFFLG  CHAR(1),             /* DUMMY OFFSET CONTROL FLAGS   */
*     4 DUOFLG1  BIT(1),             /* DUMMY CHAINING FLAG          */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 DUOFLG7  BIT(1),             /* DUMMY USERID DELETION        */
*     4 DUOFLG8  BIT(1),             /* DUMMY DELETION FAILURE       */
*    3 DUOFNEX  PTR(24)  BDY(WORD,2),
*                                    /* DUMMY OFFSET TO NEXT OFFSET  */
*    3 DUOFSUB  PTR(31),             /* DUMMY OFFSET TO SUB-LEVEL    */
*    3 DUOFDAT  PTR(31),             /* DUMMY OFFSET TO DATA BLOCK   */
*   2 DUCLS    CHAR(1),              /* USERID COMMAND LIST FLAGS    */
*    3 DUCLSF1  BIT(1),              /* ..0 -- IF USERID IS SUPPLIED */
*/*                                     ..1 -- IF * IN COMMAND FIELD */
*/*                                     ..FLAGS 2 - 5 RESERVED       */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*   2 DUFLOC   PTR(24) BDY(BYTE),    /* DUMMY PTR TO OFFSET BLOCK    */
*   2 DUSRDTN  PTR(16),              /* DUMMY TOTAL NUMBER OF NAMES  */
*   2 DUSRDCN  PTR(16),              /* DUMMY NUMBER OF CURRENT NAME */
*
*   2 DPASWD   CHAR(8) BDY(WORD),    /* CURRENT PASSWORD LIST        */
*    3 DPASWD1  PTR(31),             /* PTR TO FIRST PASSWORD PDE    */
*    3 DPASWDN  PTR(31),             /* PTR TO CURRENT PASSWORD PDE  */
*   2 DPOFFS   CHAR(12) BDY(WORD),   /* PASSWORD OFFSET BLOCK        */
*    3 DPOFFLG  CHAR(1),             /* PASSWD OFFSET CONTROL FLGS   */
*     4 DPOFLG1  BIT(1),             /* PASSWD OFFSET CHAINING FLG   */
*/*                                     ..0 -- CONTINUE CHAINING     */
*/*                                     ..1 -- LAST PASSWORD FOR     */
*/*                                     .......THIS USERID           */
*/*                                     FLAGS 2 - 5 RESERVED         */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 DPOFLG7  BIT(1),             /* PASSWORD DELETION OCCURENCE  */
*     4 DPOFLG8  BIT(1),             /* PASSWORD DELETION FAILURE    */
*    3 DPOFNEX  PTR(24)  BDY(WORD,2),
*                                    /* OFFSET TO NEXT PASSWD OFFSET */
*    3 DPOFSUB  PTR(31),             /* OFFSET TO ASSOCIATED ACCOUNT */
*/*                                     ..NUMBER OFFSET              */
*    3 DPOFDAT  PTR(31),             /* OFFSET TO PASSWD DATA BLOCK  */
*   2 DPCLS    CHAR(1),              /* PASSWORD COMMAND LIST FLAGS  */
*    3 DPCLSF1  BIT(1),              /* ..0 IF PASSWORD SUPPLIED     */
*/*                                     ..1 -- IF * IN COMMAND FIELD */
*    3 DPCLSF2  BIT(1),              /* ..0 IF SINGLE PASSWORD       */
*/*                                     ..1 IF PASSWORD LIST         */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*   2 DPFLOC   PTR(24) BDY(WORD,2),  /* POINTER TO CURRENT PASSWORD  */
*/*                                     ..OFFSET BLOCK (DPOFFS)      */
*   2 DPSWDTN  PTR(16),              /* TOTAL NUMBER OF PASSWORDS    */
*   2 DPSWDCN  PTR(16),              /* NUMBER OF CURRENT PASSWORD   */
*
*   2 DACCTN   CHAR(8) BDY(WORD),    /* CURRENT ACCOUNT NUMBER LIST  */
*    3 DACCTN1  PTR(31),             /* PTR TO FIRST ACCT NMBR PDE   */
*    3 DACCTNN  PTR(31),             /* PTR TO CURRENT ACCT NMBR PDE */
*   2 DAOFFS   CHAR(12) BDY(WORD),   /* ACCOUNT NUMBER OFFSET BLOCK  */
*    3 DAOFFLG  CHAR(1),             /* ACCT NMBR OFFSET CNTRL FLAGS */
*     4 DAOFLG1  BIT(1),             /* ACCTN OFFSET CHAINING FLG    */
*/*                                     ..0 -- CONTINUE CHAINING     */
*/*                                     ..1 -- LAST PASSWORD FOR     */
*/*                                     .......THIS USERID           */
*/*                                     FLAGS 2 - 5 RESERVED         */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 DAOFLG7  BIT(1),             /* ACCTN DELETION OCCURENCE     */
*     4 DAOFLG8  BIT(1),             /* ACCTN DELETION FAILURE       */
*    3 DAOFNEX  PTR(24)  BDY(WORD,2),
*                                    /* OFFSET TO NEXT ACCT NMBR     */
*/*                                     ..OFFSET BLOCK               */
*    3 DAOFSUB  PTR(31),             /* OFFSET TO ASSOCIATED         */
*/*                                     ..PROCNAME OFFSET BLOCK      */
*    3 DAOFDAT  PTR(31),             /* OFFSET TO ACCOUNT NUMBER
*                                       DATA                         */
*   2 DACLS    CHAR(1),              /* ACCT NMBR COMMAND LIST FLAGS */
*    3 DACLSF1  BIT(1),              /* ..0 -- IF ACCT NMBR SUPPLIED */
*/*                                     ..1 -- IF * IN COMMAND FIELD */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*   2 DAFLOC   PTR(24) BDY(BYTE),    /* POINTER TO CURRENT ACCOUNT   */
*/*                                     ..NUMBER OFFSET BLOCK (DAOFF */
*   2 DACCTTN  PTR(16),              /* TOTAL NUMBER OF ACCT NMBRS   */
*   2 DACCTCN  PTR(16),              /* NUMBER OF CURRENT ACCT NMBR  */
*
*   2 DROCNM   CHAR(8) BDY(WORD),    /* CURRENT PROCNAME LIST        */
*    3 DROCNM1  PTR(31),             /* PTR TO FIRST PROCNAME PDE    */
*    3 DROCNMN  PTR(31),             /* PTR TO CURRENT PROCNAME PDE  */
*   2 DROFFS   CHAR(12) BDY(WORD),   /* PROCNAME OFFSET BLOCK        */
*    3 DROFFLG  CHAR(1),             /* PROCNAME OFFSET CNTRL FLAGS  */
*     4 DROFLG1  BIT(1),             /* PROCNAME OFFSET CHAINING FLG */
*/*                                     ..0 -- CONTINUE CHAINING     */
*/*                                     ..1 -- LAST PROC NAME FOR    */
*/*                                     .......THIS ACCOUNT NUMBER   */
*/*                                     FLAGS 2 - 5 RESERVED         */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 DROFLG7  BIT(1),             /* PROCNAME DELETION OCCURENCE  */
*     4 DROFLG8  BIT(1),             /* PROCNAME DELETION FAILURE    */
*    3 DROFNEX  PTR(24)  BDY(BYTE),
*                                    /* OFFSET TO NEXT PROCNAME      */
*/*                                     ..OFFSET BLOCK               */
*    3 DROFSUB  PTR(31),             /* DUMMY SUBLEVEL OFFSET        */
*    3 DROFDAT  PTR(31),             /* OFFSET TO PROCNAME DATA
*                                       BLOCK                        */
*   2 DRCLS    CHAR(1),              /* PROCNAME COMMAND LIST FLAGS  */
*    3 DRCLSF1  BIT(1),              /* ..0 -- IF PROCNAME SUPPLIED  */
*/*                                     ..1 -- IF * IN COMMAND FIELD */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*   2 DRFLOC   PTR(24) BDY(BYTE),    /* POINTER TO CURRENT PROCNAME  */
*/*                                     ..OFFSET BLOCK (DROFFS)      */
*   2 DRCNMTN  PTR(16),              /* TOTAL NUMBER OF PROCNAMES    */
*   2 DRCNMCN  PTR(16),              /* NUMBER OF CURRENT PROCNAME   */
*
*   2 DEND     BIT(8);               /* END-OF-DPL FLAG -- 'FF'      */
*
           DECLARE
                 /* PTR TO CURRENT ACTIVE LEVEL                      */
                 LEVLP  PTR(31);
 @EJECT
*/*  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*/*                                                                  */
*/*           D  P  L    E N T R Y    P R O T O T Y P E              */
*/*                                                                  */
*/*  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*/*                                                                  */
*/*           I-----------------------------------------------I      */
*/*     0     I NAMIDA (NAMID1)                               I      */
*/*           I - - - - - - - - - - - - - - - - - - - - - - - I      */
*/*     4     I (NAMIDN1)                                     I      */
*/*           I-----------I-----------------------------------I      */
*/*     8     I NMOFFS1   I (NMFNEX1)                         I      */
*/*           I (NMFLG11) I                                   I      */
*/*           I - - - - - I - - - - - - - - - - - - - - - - - I      */
*/*    12     I (NMFSUB1)                                     I      */
*/*           I - - - - - - - - - - - - - - - - - - - - - - - I      */
*/*    16     I (NMFDAT1)                                     I      */
*/*           I-----------I-----------------------------------I      */
*/*    20     I NMCLS1    I NMFLOC1                           I      */
*/*           I-----------I-----------I-----------------------I      */
*/*    24     I NMDTN1                I NMDCN1                I      */
*/*          -I-----------------------I-----------------------I-     */
*/*    28     I NAMIDB (NAMID2)   (NMTST1)                    I      */
*/*           I - - - - - - - - - - - - - - - - - - - - - - - I      */
*/*    32     I (NAMIDN2)                                     I      */
*/*           I-----------I-----------------------------------I      */
*/*    36     I NMOFFS2   I (NMFNEX2)                         I      */
*/*           I (NMFLG21) I                                   I      */
*/*           I - - - - - I - - - - - - - - - - - - - - - - - I      */
*/*    40     I (NMFSUB2)                                     I      */
*/*           I - - - - - - - - - - - - - - - - - - - - - - - I      */
*/*    44     I (NMFDAT2)                                     I      */
*/*           I-----------I-----------------------------------I      */
*/*    48     I NMCLS2    I NMFLOC2                           I      */
*/*           I-----------I-----------I-----------------------I      */
*/*    52     I NMDTN2                I NMDCN2                I      */
*/*           I-----------I-----------I-----------------------I      */
*/*    56     I NMTST2    I                                          */
*/*           I-----------I                                          */
*/*                                                                  */
*/*                                                                  */
*
*DECLARE
*  1 DNAMID   BASED(DNMIDP),
*
*   2 NAMIDA   CHAR(8)  BDY(WORD),
*                                    /* DPL ENTRY NAME LIST          */
*    3 NAMID1   PTR(31),             /* PTR TO FIRST NAME PDE        */
*    3 NAMIDN1  PTR(31),             /* PTR TO CURRENT NAME PDE      */
*   2 NMOFFS1  CHAR(12) BDY(WORD),   /* NAME OFFSET BLOCK            */
*    3 NMFLG1S  CHAR(1),             /* NAME OFFSET CONTROL FLAGS    */
*     4 NMFLG11  BIT(1),             /* ITEM OFFSET CHAINING FLAG    */
*/*                                     ..0 -- CONTINUE CHAINING     */
*/*                                     ..1 -- LAST NAME OF LEVEL    */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 NMFLG17  BIT(1),             /* ITEM DELETION OCCURENCE      */
*     4 NMFLG18  BIT(1),             /* ITEM DELETION FAILURE        */
*    3 NMFNEX1  PTR(24)  BDY(WORD,2),
*                                    /* OFFSET TO NEXT NAME OFFSET   */
*    3 NMFSUB1  PTR(31),             /* OFFSET TO SUBLEVEL OFFSET    */
*    3 NMFDAT1  PTR(31),             /* OFFSET TO NAME DATA BLOCK    */
*   2 NMCLS1   CHAR(1),              /* NAME COMMAND LIST FLAGS      */
*    3 NMBLDG1  BIT(1),              /* ..0 -- IF NAME SUPPLIED      */
*/*                                     ..1 -- IF * IN COMMAND FIELD */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*   2 NMFLOC1  PTR(24) BDY(BYTE),    /* PTR TO CURRENT NAME OFFSET   */
*/*                                     ..(NMOFFS)                   */
*   2 NMDXN1   PTR(32) BDY(WORD),    /* NUMBER OF NAMES AREA   M4483 */
*    3 NMDTN1   PTR(16),             /* TOTAL NUMBER OF NAMES        */
*    3 NMDCN1   PTR(16),             /* NUMBER OF CURRENT NAME       */
*
*
*   2 NAMIDB   CHAR(8)  BDY(WORD),
*                                    /* DPL ENTRY NAME LIST          */
*    3 NAMID2   PTR(31),             /* PTR TO FIRST NAME PDE        */
*     4 NMTST1 PTR(8),               /* END OF DPL FLAG -- 'FF'      */
*    3 NAMIDN2  PTR(31),             /* PTR TO CURRENT NAME PDE      */
*   2 NMOFFS2  CHAR(12) BDY(WORD),   /* NAME OFFSET BLOCK            */
*    3 NMFLG2S  CHAR(1),             /* NAME OFFSET CONTROL FLAGS    */
*/*   4 NMFLG21  BIT(1),                ..0 -- CONTINUE CHAINING     */
*/*                                     ..1 -- LAST NAME OF LEVEL    */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 NMFLG27  BIT(1),             /* ITEM DELETION OCCURENCE      */
*     4 NMFLG28  BIT(1),             /* ITEM DELETION FAILURE        */
*    3 NMFNEX2  PTR(24)  BDY(WORD,2),
*                                    /* OFFSET TO NEXT NAME OFFSET   */
*    3 NMFSUB2  PTR(31),             /* OFFSET TO SUBLEVEL OFFSET    */
*    3 NMFDAT2  PTR(31),             /* OFFSET TO NAME DATA BLOCK    */
*   2 NMCLS2   CHAR(1),              /* NAME COMMAND LIST FLAGS      */
*    3 NMBLDG2  BIT(1),              /* ..0 -- IF NAME SUPPLIED      */
*/*                                     ..1 -- IF * IN COMMAND FIELD */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*   2 NMFLOC2  PTR(24) BDY(BYTE),    /* PTR,TO CURRENT NAME OFFSET   */
*/*                                     ..(NMOFFS)                   */
*   2 NMDXN2   PTR(32) BDY(WORD),    /* NUMBER OF NAMES AREA   M4483 */
*    3 NMDTN2   PTR(16),             /* TOTAL NUMBER OF NAMES        */
*    3 NMDCN2   PTR(16),             /* NUMBER OF CURRENT NAME       */
*   2 NMTST2   PTR(8);               /* END OF DPL FLAG -- 'FF'      */
*
           DECLARE
                 /* RESERVE NAME MEMBER                              */
                 SAVCT  PTR(31),
                 /* CURRENT TEST NAME NUMBER                         */
                 TSTCTN  PTR(16);
 13760000           DECLARE
 13780000                 /* PTR TO ITEM NAME CHARACTER STRING
 13800000                 NAMECP  PTR(31);
 13820000
 13840000           DECLARE
 13860000                 /* CURRENT UADS NAME CHARACTER STRING
 13880000                 NAMEC  CHAR(8) BASED(NAMECP);
 13900000
 13920000           DECLARE
 14020000                 /* ELEMENT INCREMENT FOR DELETE POINT LIST
 14040000                 LSPAN  FIXED(31) BDY(WORD)
 14060000                       INIT(ADDR(DPASWD)-ADDR(DUSERID));
 14080000 @EJECT
 14100000*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 14120000*/* *
 14140000
*/* *            P R E V I O U S   O F F S E T   B L O C K           */
*/* *                                                                */
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
*/* *                                                                */
*/* *                                                                */
*/* *               I----------I--------------------------------I    */
*/* *          0    I LASUNNFL I LASUNNEX                       I    */
*/* *               I----------I--------------------------------I    */
*/* *          4    I LASUNSFL I LASUNSUB                       I    */
*/* *               I----------I--------------------------------I    */
*/* *          8    I LASUNDFL I LASUNDAT                       I    */
*/* *               I----------I--------------------------------I    */
*/* *                                                                */
*
*DECLARE
*  1 LASUNODE BASED(NMFLOC1),
*
*   2 LASUNWD1 PTR(31),              /* NAME OF FIRST WORD           */
*    3 LASUNNFL CHAR(1),             /* GENERAL OFFSET BLOCK         */
*/*                                    ..INDICATORS                  */
*     4 LASUNFLG BIT(1),             /* ..0 -- CONTINUE CHAINING     */
*/*                                    ..1 -- LAST OFFSET BLOCK FOR  */
*/*                                    .......THIS OFFSET CHAIN      */
*/*                                    .. FLAGS 1 THRU 7 ARE RESERVE */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*     4 *        BIT(1),             /* RESERVED                     */
*    3 LASUNNEX PTR(24)  BDY(WORD,2),
*                                    /* OFFSET TO NEXT OFFSET BLOCK  */
*   2 LASUNWD2 PTR(31),              /* NAME OF SECOND WORD          */
*    3 LASUNSFL CHAR(1),             /* RESERVED                     */
*    3 LASUNSUB PTR(24)  BDY(WORD,2),
*                                    /* OFFSET TO ASSOCIATED OFFSET  */
*   2 LASUNWD3 PTR(31),              /* NAME OF THIRD WORD           */
*    3 LASUNDFL CHAR(1),             /* RESERVED                     */
*    3 LASUNDAT PTR(24)  BDY(WORD,2);
*                                    /* OFFSET TO DATA BLOCK         */
 @EJECT
*/*  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*/*                                                                  */
*/*                  N A M E    L I S T    P  D  E                   */
*/*                        P R O T O T Y P E                         */
*/*                                                                  */
*/*  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*/*                                                                  */
*/*           I-----------------------------------------------I      */
*/*     0     I NAMPTR1                                       I      */
*/*           I-----------------------I-----------I-----------I      */
*/*     4     I NAMLNG                I NAMFLGS   I RESERVED  I      */
*/*           I-----------------------I-----------I-----------I      */
*/*     8     I NPTRNEX (NPNEXC)                              I      */
*/*           I-----------------------------------------------I      */
*/*                                                                  */
*/*                                                                  */
*
*DECLARE
*  1 NAMPDE   BASED(NAMPTR),
*
*
*   2 NAMPTR1  PTR(31)  BDY(WORD),
*                                    /* PTR TO NAME (CHAR STRING)    */
*   2 NAMLNG   PTR(16)  BDY(WORD),
*                                    /* LENGTH OF NAME STRING        */
*   2 NAMFLGS  CHAR(1),              /* NAME OF FLAG AREA            */
*    3 NAMFLG1  BIT(1),              /* ..0 -- PARAMETER OMITTED     */
*/*                                     ..1 -- PARAMETER SUPPLIED    */
*/*                                     ..FLAGS 2 - 6 RESERVED       */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 *        BIT(1),              /* RESERVED                     */
*    3 NAMFLGC  BIT(2),              /* DELETE CONTROL FLAGS         */
*     4 NAMFLG7  BIT(1),             /* ITEM DELETED                 */
*     4 NAMFLG8  BIT(1),             /* ITEM DELETE FAILURE          */
*   2 *        CHAR(1),              /* RESERVED                     */
*   2 NPNEXC   CHAR(4) BDY(WORD),    /* END OF LIST CHARACTER FLAGS  */
*    3 NPTRNEX  PTR(31);             /* PTR TO NEXT PDE IN LIST      */
*/*                                     ..NOTE -- THIS FIELD DOES    */
*/*                                     .......NOT EXIST IN SINGLE   */
*/*                                     .......UNCHAINED ENTRY       */
*
           DECLARE
                 /* CURRENT PDE NAME CHARACTER STRING                */
                 NAMPTRC  CHAR(40) BASED(NAMPTR1);
 15080000           DECLARE
 15220000                 /* DPL END FLAG
 15240000                 DENDF  BIT(8)  INIT('FF'X);
 15260000
 15280000
 15300000           DECLARE
 15320000                 /* CONTENTS OF OFFSET BLOCKS
 15340000                 NMOFFC1  CHAR(12) BASED(NMFLOC1),
 15360000                 NMOFFC2  CHAR(12) BASED(NMFLOC2);
 15380000
 15400000           DECLARE
 15500000           /* IDENTITY LIST
 15520000                 STOLST  CHAR(8) BDY(HWORD), /* FOR STOW
 15540000                 UDLMOD  CHAR(8) BDY(HWORD); /* FOR UDL
 15560000
 15580000           DECLARE
 15600000                 /* DELETE CONTROL-DATA ITEMS
 15620000                 DWDMSK  BIT(16) INIT('FFF8'X),  /* MASK FOR DB
 15640000                 HWDMSK  BIT(16) INIT('FFFE'X), /* MASK FOR HAL
 15660000                 1 DLCTLR  BIT(32),   /* DELETE CONTROL AREA
 15680000                   2 DELECF  BIT(32), /* NAME OF CONTROL FLAG A
 15700000                     3 PLNOW  BIT(1), /* BIT0 = 1 FOR PUTLINE A
 15720000                     3 DELRS1 BIT(1), /* BIT1 = RESERVED
 15740000                     3 DELRS2 BIT(1), /* BIT2 = RESERVED
 15760000                     3 PLFAIL BIT(1), /* BIT3 = 1 FOR PUTLINE F
 15780000                     3 UIDNTR BIT(1), /* BIT4 = 1 FOR USERID EN
 15800000                     3 PWDNTR BIT(1), /* BIT5 = 1 FOR PASSWD EN
 15820000                     3 ACNNTR BIT(1), /* BIT6 = 1 FOR ACCTNR EN
 15840000                     3 NODLIN BIT(1), /* BIT7 = 1 FOR NODELIST
 15860000                     3 DATLIN BIT(1), /* BIT8 = 1 FOR DATALIST
 15880000                     3 ALEVEL BIT(1), /* BIT9 = 1 FOR ACCTN DP
 15900000                     3 DELERR BIT(1), /* BIT10 = 1 FOR ERROR CO
 15920000                     3 PBUFLG BIT(1), /* BIT11 = 1 FOR PSEUDO-B
 15940000                     3 DELRSP BIT(1), /* BIT12 = 1 FOR ID DELET
 15960000                     3 ENQNOW BIT(1), /* BIT13 = 1 FOR ENQ ACTI
 15980000                     3 PNTRYF BIT(1), /* BIT14 = 1 FOR PARSE EN
 16000000
                     3 FLGNST BIT(1), /* BIT15 = 1 FOR NO ASTERISK   */
                     3 PRTNOW BIT(1), /* BIT16 = 1 FOR DELETED       */
                     3 DELNOW BIT(1), /* BIT17 = 1 FOR DELETE FAILED */
                     3 SUPFGS BIT(2), /* SUPPORT FLAGS               */
                       4 PWDSUP BIT(1), /* BIT18  FOR PASSWD SUPPRT  */
                       4 ACNSUP BIT(1), /* BIT19  FOR ACCTN SUPPORT  */
                     3 NODELR BIT(1), /* BIT20 = 1 FOR NO STATUS CHK */
                     3 FRENOW BIT(1), /* BIT21 = 1 FOR FREEMAIN ACTV */
                     3 RDDONE BIT(1), /* BIT22 = 1 FOR READ SUCCESS  */
                     3 STRNOW BIT(1), /* BIT23 = 1 FOR ASTERISK NOW  */
                     3 DATNOW BIT(1), /* BIT24 = 1 FOR DATL GETMAIN  */
                     3 WRKDON BIT(2), /* GENERAL WORK DONE FLAGS     */
                       4 DELDON BIT(1), /* BIT25  FOR DELETE ACTION  */
                       4 WRTDON BIT(1), /* BIT26  FOR WRITE ACTION   */
                     3 RDINTL BIT(1), /* BIT27 = 1 FOR INITIAL READ  */
                     3 GSUPFS BIT(2), /* GENERAL SUPPORT FLAGS M2582 */
                       4 GPWDSP BIT(1), /* BIT 28  FOR GENL PSWD SP  */
                       4 GACNSP BIT(1), /* BIT 29  FOR GENL ACTN SP  */
                     3 STODON BIT(1), /* BIT30 = STOW DELETION M5522 */
                     3 DELEFR BIT(1), /* RESERVED FLAGS        M5522 */
                 NAMCTR  FIXED(15),   /* NAME LIST COUNTER           */
                 STRNGLN FIXED(15),   /* LENGTH OF PSTRING           */
                 GOTMNP  PTR(31),     /* PTR TO GOTMAIN LIST         */
                 DPFLOC1 PTR(31),     /* PTR TO 1ST PASSWORD OB      */
                 DAFLOC1 PTR(31),     /* PTR TO 1ST ACCOUNT NNMBR    */
                 DRFLOC1 PTR(31),     /* PTR TO 1ST PROCNAME OB      */
                 RTNCODE FIXED(31),   /* RETURN CODE AREA      M1859 */
                 SAVGR0  PTR(31),     /* SAVE AREA FOR REGISTER 0    */
                 SAVGR1  PTR(31),     /* SAVE AREA FOR REGISTER 1    */
                 DBUFPTR PTR(31),     /* PTR TO IMPORTED DATALIST    */
                 UDLSTP  PTR(31),     /* PTR TO LAST PREVIOUS UDL    */
                 UIDLAST PTR(31)      /* LAST PREVIOUS ENTRY         */
                       BASED(UDLSTP),
                 SOFFS   PTR(15),     /* RESERVE SEGMENT OFFSET      */
                 SPAREH  PTR(15);     /* RESERVED HALF WORD          */
 16283900           DECLARE
 16285800                 /* DOUBLE WORD AREA USED BY CVD INSTRUCTION
 16287700                 1 DBLWORD BDY(DWORD) CHAR(8),  /* NAME OF AREA
 16289600                   2 DBLWD1 CHAR(4),  /* FIRST WORD OF AREA
 16291500                   2 DBLWD2 CHAR(4);  /* SECOND WORD OF AREA
 16293400
 16295300
           /* CREATE SUBPOOL IDENTIFIER                              */
           GENERATE DATA;
         DS    0F                     ALIGN TO WORD BOUNDARY
SPN1     DC   AL1(&SPN)               DEFINE PRIME SUBPOOL
         DC   AL3(0)                  ASSIGN SPACE FOR LENGTH
 @ENDGEN
 16308600           DECLARE
 16310500                 /* DEFINE NAME OF SUBPOOL IDENTIFIER
 16312400                 SPN1  GENERATED CHAR(4);
 16314300
 16316200           DECLARE
 16318100                 /* FIRST 8 BYTES OF NEW UDL
 16320000                 GOTMSPZ  BIT(64) BASED(GOTMNP);
 16340000
 16740000           /* CREATE MODEL PARAMETER LISTS, CONTROL BLOCKS
 17040000           GENERATE DATA;
 17060000DELDCBM  DCB   DSORG=PO,DDNAME=SYSUADS,MACRF=(R,W),RECFM=FB,KEY
 17080021DCBLG    EQU   *-DELDCBM              LENGTH OF DCB
 17100000BLDUDLM  GETMAIN  EC,LV=16,SP=&SPN,MF=L
 17120000BGMLNG   EQU   *-BLDUDLM              LENGTH OF PARM LIST
 17140000NQOPNM   ENQ   (EQNAM1,ERNAM1,E,8,SYSTEM),RET=HAVE,MF=L  FOR OP
 17160000DLOPNLM  OPEN  (,(UPDAT)),MF=L        FOR OPEN
 17180000DDOPNLM  OPEN  (,(INPUT)),MF=L        FOR OPEN
 17184000MNQMBR   ENQ   (EQNAM1,,E,8,SYSTEM),RET=USE,MF=L
 17200000MDQMBR   DEQ   (EQNAM1,,8,SYSTEM),RET=HAVE,MF=L
 17220000DLCLSLM  CLOSE (,),MF=L               FOR CLOSE
 17240000DQOPNM   DEQ    (EQNAM1,ERNAM1,8,SYSTEM),RET=HAVE,MF=L   FOR OP
 17260000MVCLNG   EQU   *-DELDCBM              LENGTH OF INITIALIZATION
 17320000MDIRDCB  DCB   DDNAME=SYSUADS,DEVD=DA,DSORG=PS,MACRF=(RP),
S17340000               RECFM=F,KEYLEN=0,BLKSIZE=256
 17360000DIRDLG   EQU   *-MDIRDCB              LENGTH OF DCB
 17364000PTPBKM   PUTLINE  OUTPUT=(0,TERM,SINGLE,INFOR),MF=L    FOR PUTL
 17380000PTPBKMM  PUTLINE  OUTPUT=(0,TERM,MULTLVL,INFOR),MF=L   FOR PUTL
 17384000PTPBLG   EQU   *-PTPBKMM              LENGTH OF PUTLINE PARM BL
 17400000MPTLCPL  LINK  EP=IKJPUTL,SF=L        FOR PUTLINE
 17420000MPRSCPL  LINK  EP=IKJPARS,SF=L        FOR PARSE
 17440000@DATD    DSECT                        RE-ESTABLISH AUTOMATIC DS
 17460000 @ENDGEN
 17480000
 17500000           DECLARE
 17520000                 /* DEFINE NAMES OF MODEL PARM LISTS, CONTROL B
 17540000
                 PTPBKM  GENERATED CHAR(40),  /* FOR PUTLINE         */
                 PTPBKMM GENERATED CHAR(40),  /* FOR PUTLINE         */
                 MPTLCPL GENERATED CHAR(48),  /* FOR PUTLINE         */
                 MPRSCPL GENERATED CHAR(48);  /* FOR PARSE           */
 17640000           /* CREATE PARAMETER LISTS, CONTROL BLOCKS
 17660000           GENERATE DATA;
 17680000DELDCB   DCB   DSORG=PO,DDNAME=SYSUADS,MACRF=(R,W),RECFM=FT
 17700021BLDUDL   GETMAIN  EC,LV=16,SP=&SPN,MF=L
 17720000NQOPN    ENQ   (,,,,),MF=L            FOR OPEN ENQUEUE
 17740000NQLNG    EQU   *-NQOPN                LENGTH OF ENQUEUE PARM BL
 17760000DLOPNL   OPEN  (,),MF=L               FOR OPEN
 17780000DLOPNLG  EQU   *-DLOPNL               LENGTH OF OPEN  C P  PARM
 17800000DDOPNL   OPEN  (,),MF=L               FOR OPEN
 17804000NQMBR    ENQ   (,,,,),MF=L
 17820000DQMBR    DEQ   (,,,),MF=L
 17840000DLCLSL   CLOSE (,),MF=L               FOR CLOSE
 17860000DLCLSLG  EQU   *-DLCLSL               LENGTH OF CLOSE  C P  PAR
 17880000DQOPN    DEQ   (,,,),MF=L             FOR OPEN DEQUEUE
 17900000DQLNG    EQU   *-DQOPN                LENGTH OF DEQUEUE PARM BL
 17920000*DIRDCB  IS    PART OF THE DIRECTORY WORK AREA, DIRWA
 17960000PTPBK    PUTLINE  ,MF=L               FOR PUTLINE
 17980000PTLCPL   LINK  ,SF=L                  FOR SEND(LINK)
 18000000PRSCPL   LINK  ,SF=L                  FOR PARSE
 18020000LNKLNG   EQU   *-PRSCPL               LENGTH OF LINK CP PARM LI
 18040000GMLST    GETMAIN  ,MF=L               FOR GETMAIN
 18040800 @ENDGEN
 18060000
 18080000           DECLARE
 18100000                 /* DEFINE NAMES OF PARM LISTS, CONTROL BLOCKS
 18120000                 DPLBA   GENERATED CHAR(121), /* FOR DPL SAVE
 18140000                 DPLBAB  BIT(968) BASED(ADDR(DPLBA)),/* FOR CLE
 18144000                 DPLBS   GENERATED CHAR(121), /* FOR DPL SAVE
 18160000                 NQOPN   GENERATED CHAR(24),  /* FOR OPEN ENQUE
 18180000                 NQMBR   GENERATED CHAR(8),   /* FOR MEMBER ENQ
 18200000                 DQMBR   GENERATED CHAR(8),   /* FOR MEMBER DEQ
 18220000                 DQOPN   GENERATED CHAR(24),  /* FOR OPEN DEQUE
 18240000                 DELDCB  GENERATED CHAR(48),  /* FOR DCB
 18260000                 DLCLSL  GENERATED CHAR(24),  /* FOR CLOSE
 18280000                 DLOPNL  GENERATED CHAR(24),  /* FOR OPEN
 18300000                 DDOPNL  GENERATED CHAR(24),  /* FOR OPEN
 18304000                 PTPBK   GENERATED CHAR(40),  /* FOR PUTLINE EX
 18340000
                 PTLCPL  GENERATED CHAR(48),  /* FOR PUTLINE         */
                 PRSCPL  GENERATED CHAR(48);  /* FOR PARSE           */
 18384000           DECLARE
 18399200                 /* AREA FOR GETMAIN RESPONSE
 18399300                 GMAINA  PTR(31);
 18399400
 18400000           /* CREATE MASK FOR DCB
 18420000           GENERATE DATA;
 18440000         DCBD  DSORG=PO               MASK FOR UADS DCB
 18460000@DATD    DSECT                        RE-ESTABLISH AUTOMATIC DS
 18464000 @ENDGEN
 18480000
 18480700           GENERATE DATA;
 18492700         DS    0F                     ALIGN TO WORD BOUNDARY
 18496600DPLBA    DS    CL((DEND-DPLB)+1)      AREA FOR DPL
 18500500         DS    0F                     ALIGN TO WORD BOUNDARY
 18504400DPLBS    DS    CL((DEND-DPLB)+1)      AREA FOR RESERVE DPL
 18508300 @ENDGEN
 18512200
 18516100           DECLARE
 18520000                 /* READ/WRITE PARAMETER BLOCK
 18540000                 1 RWPB  BDY(WORD),   /* NAME OF PARM BLOCK
 18560000                   2 RWPBA  BIT(192) BDY(WORD), /*  AREA TO CLE
 18580021                     3 RWPFGS BIT(8), /* CONTROL FLAGS
 18600000                       4 RWPF1 BIT(1),/* 0 = LOGICAL MEMBER
 18620000 /*                                      1 = SINGLE PHYSICAL ME
 18640000                       4 RWPF2 BIT(1),/* 0 = RWPNBR IS PTR TO M
 18660000 /*                                            NAME
 18680000 /*                                      1 = RWPNBR IS PTR TO B
 18700000 /*                                            ENTRY
 18720000                       4 RWPF3 BIT(1),/* 0 = RWPWAP IS NONPERTI
 18740000 /*                                      1 = RWPWAP IS PTR TO D
 18760000                       4 RWPF4 BIT(1),/* 0 = BUFFER FOR EXISTIN
 18780000 /*                                            BLOCKS
 18800000 /*                                      1 = BUFFER FOR EXISTIN
 18820000 /*                                            BLOCKS + 1
 18840000                       4 RWPF5 BIT(1),/* 0 = NOT WRITE REQUEST
 18860000 /*                                      1 = WRITE REQUEST
 18880000                       4 RWPF6 BIT(1),/* 0 = READ DIRECTORY AND
 18900000 /*                                      1 = READ DIRECTORY ONL
 18920000                       4 RWPF7 BIT(1),/* 0 = NO ENQ/DEQ
 18940000
 /*                                      1 = ENQ/DEQ REQUESTED       */
                       4 RWPF8 BIT(1),/* RESERVED                    */
                     3 RWPUDP PTR(24),/* PTR TO UADS DCB             */
                     3 RWPNBP PTR(31),/* PTR TO MEMBERNAME/BLDLENTRY */
                     3 RWPWAP PTR(31),/* PTR TO DIRECTORY WORK AREA  */
                     3 RWPRBP PTR(31),/* PTR TO READ BLDL ENTRY      */
                     3 RWPNOM PTR(8), /* NO OF MEMBERS READ/TO WRITE */
                     3 RWPBUF PTR(24),/* PTR TO BUFFER (EXCL DECB)   */
                     3 RWPAPL PTR(31),/* PTR TO ACCOUNT PARM LIST    */
                       4 RWPCHR CHAR(1),/* MODULE IDENTIFIER CHAR    */
                       4 RWPARP PTR(24);/* PTR TO ACCOUNT PARM LIST  */
 19140000           DECLARE
 19160000                 /* MEMBER NAME CHARACTER STRING
 19180000                 RDNAMC  CHAR(8) BASED(RWPNBP);
 19200000
 19220000           DECLARE
 19240000                 /* DIRECTORY WORK AREA FOR READ/WRITE ROUTINE
 19260000                 1 DIRWA  BDY(WORD),  /* NAME OF AREA
 19280000                   2 DIRDCB CHAR(88), /* BSAM DCB AREA (INPUT)
 19300000                   2 DIRBLK CHAR(256);/* PDS DIRECTORY AREA
 19320000
 19340000           DECLARE
 19344000                 /* NAME OF FIRST MEMBER IN UADS
 19348000                 RDNAMD  CHAR(8) BASED(ADDR(DIRBLK)+2);
 19352000
 19356000           DECLARE
 19358000                 /* COMPARISON FACTORS IN DIRECTORY PROCESSING
 19358400                 DIRBLKP PTR(31),    /* PTR TO DIRECTORY ENTRY
 19358800                 DRBLASP PTR(31),    /* PTR TO PREVIOUS ENTRY N
 19359200                 DIRBDAP PTR(31),    /* PTR TO TEST ENTRY NAME
 19359600                 COMPNAM CHAR(8);    /* CURRENT TEST NAME
 19359800
 19359900           DECLARE
 19366600                 /* FIRST ENTRY IN DIRECTORY BLOCK
 19368600                 1 DIRBLKA  BASED(ADDR(DIRBLK)) BDY(BYTE), /* N
 19370600                   2 DIRBLNG  CHAR(2),  /*LENGTH OF BLOCK
 19372621                   2 DIRBNAM1 CHAR(8),  /* 1ST ENTRY NAME
 19373000                   2 DIRBTTR1 CHAR(3),  /* TTR OF 1ST MEMBER
 19373121                   2 DIRBCA1  CHAR(1),  /* COUNT OF USER AREA
 19373221                     3 DIRBAL1  BIT(1), /* ALIAS FLAG
 19375200                     3 DIRBTT1  BIT(2), /* COUNT OF TTRNS
 19377200
                     3 DIRBCB1  BIT(5); /* COUNT OF USER DATA  M     */
 19379900           DECLARE
 19380000                 /* CURRENT TEST ENTRY IN DIRECTORY BLOCK
 19382000                 1 DIRBDA   BDY(BYTE) BASED(DIRBDAP),  /* NAME
 19384000                   2 DIRBNAM CHAR(8),  /* CURRENT TEST NAME
 19386000                   2 DIRBTTR CHAR(3),  /* TTR TO TEST ENTRY
 19386421                   2 DIRBCA  CHAR(1),  /* COUNT OF USER AREA
 19386521                     3 DIRBAL   BIT(1), /* ALIAS FLAG
 19388500                     3 DIRBTT   BIT(2), /* COUNT OF TTRNS
 19390500                     3 DIRBCB   BIT(5); /* COUNT OF USER DATA
 19392500
 19393200           DECLARE
 19393300                 /* CURRENT PREVIOUS TEST ENTRY IN DIRECTORY
 19395300                 1 DRBLAS  BDY(BYTE) BASED(DRBLASP),  /* NAME
 19397300                   2 DRBLNAM CHAR(8),  /* PREVIOUS TEST NAME
 19399300                   2 DRBLTTR CHAR(3),  /* TTR TO PREVIOUS ENTRY
 19399721                   2 DRBLC   CHAR(1),  /* COUNT OF USER AREA
 19399821                     3 DRBLAL   BIT(1), /* ALIAS FLAG
 19405500                     3 DRBLTT   BIT(2), /* COUNT OF TTRNS
 19405900                     3 DRBLCB   BIT(5); /* COUNT OF USER DATA
 19406300
 19411500           DECLARE
 19415300                 /* LOCATION TO ISOLATE USER DATA COUNT
 19415700                 1 DIRBCAX  BDY(BYTE),  /* NAME OF AREA
 19416100                   2 DIRBTX  BIT(3),    /* ZERO AREA
 19416500                   2 DIRBCX  BIT(5);    /* VALUE AREA
 19416900
 19417000           DECLARE
 19417100                 /* ARITHMETIC VALUE OF USER DATA COUNT
 19418000                 DIRBC  PTR(8) BASED(ADDR(DIRBCAX)); /* VALUE
 19418400
 19418800           DECLARE
 19420000                 /* PARSE INPUT  P P  PARAMETER LIST MASK
 19422900                 1 PARSNPL BASED(R1), /* NAME OF INPUT PARM LIS
 19428600                   2 PARSNL1 PTR(31), /* PTR TO PDE
 19434300                   2 PARSNL2 PTR(31), /* PTR TO DELETE BASE PTR
 19440000                   2 PARSNL3 PTR(31); /* PTR TO 2ND LEVEL MESSA
 19450000                                      /*
 19452000
 19460000           DECLARE
 19480000                 /* PARAMETER LIST PASSED TO PARSE EXIT ROUTINE
 19500000
                 1 DELPRMS BASED(PARSNL2), /* NAME OF PARAMETER AREA */
                   2 DLPRM1  PTR(31), /* DELETE BASE PTR             */
                   2 DLPRM2 PTR(31);  /* DELETE RENT AREA PTR        */
 19580000
 19600000           DECLARE
 19620000                 /* TEST CHARACTER IN PSTRING
 19640000                 PSCHAR CHAR(1) BASED(CHRPTR);
 19660000
 19680000
 19700000
 19720000           DECLARE
 19740000                 /* DEFINE NAME OF FLAG FIELD IN DCB
 19760000                 DCBOFLGS  GENERATED LABEL;
 19780000
 19800000           DECLARE
 19820000                 /* DCB FLAGS USED BY OPEN
 19840000                 1 DCBFLGS   BASED(ADDR(DCBOFLGS)),
 19860021                   2 *       BIT(3),  /* SPACER
 19880021                   2 DCBOFLG BIT(1);  /* 1 = SUCCESSFUL OPEN
 19900021
 19920000
 19939621           DECLARE
 19940000                 /* ENQUEUE NAMES FOR OPEN
 19960000                 EQNAM1  CHAR(8) INIT('SYSIKJUA'),/* MAJOR RESO
 19980000                 ERNAM1  CHAR(8) INIT('OPENUADS');/* MINOR RESO
 20000000
 20020000           DECLARE
 20040000                 /* ACCOUNT-TO-SUBCP PARAMETER LIST
 20060000                 1 ACCTPL  BDY(WORD)  /* NAME OF PARM LIST
 20080000                         BASED(SAVGR1),
 20100000                   2 AUPTP  PTR(31),  /* PTR TO CURRENT UPT
 20120000                   2 AECTP  PTR(31),  /* PTR TO ENVIRONMENT CT
 20140000                   2 AECBP  PTR(31),  /* PTR TO ACCOUNT EVENT C
 20160000                   2 ACBFP  PTR(31),  /* PTR TO ACCOUNT COMMAND
 20180000                   2 ARESP  PTR(31);  /* PTR TO RESPONSE AREA
 20200000
 20220000           DECLARE
 20240000                 /* ACCOUNT COMMUNICATIONS ECB
 20260000                 1 ACCTECB  BDY(WORD) /* NAME OF ECB AREA
 20280000                     BASED(AECBP),
 20300000                   2 ECBCODE PTR(31), /* COMPLETION CODE AREA
 20320000
                     3 ECBWT  BIT(1), /* BIT0 = 1 FOR WAITING        */
                     3 ECBCPL BIT(1); /* BIT1 = 1 FOR COMPLETE       */
 20380000           DECLARE
 20400000                 /* STAE PARAMETER LIST
 20420000                 1 STAEPL1,           /* NAME OF STAE PARM LIST
 20440000                   2 STAPRM1  PTR(31),/* DEL CODE BASE PTR (11)
 20460000                   2 STAPRM2  PTR(31),/* RENT DATA PTR (12)
 20480000                   2 STAPRM3  PTR(31),/* 2ND DEL2 CODE BASE PTR
 20484000                   2 STAPRM4  PTR(31),/* STATIC DATA BASE PTR (
 20486000                   2 STAPRM5  PTR(31);/* DEL2 CODE BASE PTR (9)
 20488000
 20500000           DECLARE
 20520000                 /* STAE INPUT  P P  PARAMETER LIST
 20540000                 1 STAENPL BASED(R2), /* NAME OF LIST
 20560000                   2 STAENL1 PTR(31), /* ACCOUNT CODE BASE PTR
 20580000                   2 STAENL2 PTR(31); /* ACCOUNT RENT BASE PTR
 20600000
 20620000           DECLARE
 21200000                 /* AREA FOR SERVICE ROUTINE PARAMETER LIST
 21220000                 1 PLOUT  BDY(WORD),  /* NAME OF PARM LIST AREA
 21240000                   2 PLOUTA CHAR(12), /* AREA FOR COMMON POINTE
 21260000                   2 PLOUTB  CHAR(4), /* AREA FOR INDIVIDUAL DA
 21280000                   2 PLOUTC  CHAR(8), /* AREA FOR INDIVIDUAL DA
 21300000                     3 PLOUTZ BIT(64);  /* NAME FOR CLEARING
 21320000
 21340000           DECLARE
 21360000                 /* SET BASE POINTERS MODEL AREA
 21380000                 1 BASPTRS,           /* NAME OF MODEL PTR AREA
 21400000                   2 BASUPTP  PTR(31),/* PTR TO CURRENT UPT
 21420000                   2 BASECTP  PTR(31),/* PTR TO CURRENT ECT
 21440000                   2 BASECBP  PTR(31),/* PTR TO CURRENT CP ECB
 21460000                   2 BASEBFP  PTR(31),/* PTR TO ACCOUNT COMMAND
 21480000                   2 BASERSP  PTR(31);/* PTR TO RESPONSE AREA
 21500000 @EJECT
 21520000           DECLARE
 21540000                 /* PTR TO ENVIRONMENT CONTROL TABLE
 21560000                 ECTPTR  PTR(31) BASED(ADDR(BASECTP));
 21580000
 21600000           %INCLUDE SYSLIB(IKJECT);
 21604000
 21900000
 22000000

           DECLARE
                 /* AREA FOR OUTPUT PARAMETER BLOCK                  */
                 1 PBOUT  CHAR(20) BDY(WORD);
 22100000           DECLARE
 22120000                 /* COMMAND BUFFER ACTION AREA
 22140000                 1 NUCBUFN            /* NAME OF BUFFER AREA
 22160000                       BASED(ACBFP) BDY(WORD),
 22180021                   2 NUCBUF CHAR(512) BDY(HWORD),/* NAME OF BUF
 22200021                     3 NUCBFHD  CHAR(4) BDY(HWORD), /* HEADER A
 22220021                       4 NUCBFLN PTR(15),/* LENGTH OF BUFFER
 22240000                       4 NUCBFOF PTR(15),/* OFFSET TO CURRENT S
 22260000                     3 NUCBFST  CHAR(508); /* CHARACTER STRING
 22280000
 22300000           DECLARE
 22320000                 1 GMBLN  PTR(15),    /* GETMAIN BUFFER LENGTH
 22340000                   2 GMBLNB  BIT(16); /* NAME FOR DBL WORD ROUN
 22360000
 22380000           DECLARE
 22400000                 /* PARAMETER LIST FOR PUTLINE
 22420000                 1 PUTLPL BASED(ADDR(PLOUT)),  /* NAME OF PARM
 22440000                   2 PLPLUPT PTR(31), /* PTR TO UPT
 22460000                   2 PLPLECT PTR(31), /* PTR TO ECT
 22480000                   2 PLPLECB PTR(31), /* PTR TO ACCOUNT ECB
 22500000                   2 PLPLPBK PTR(31); /* PTR TO PUTLINE PARM BL
 22520000 @EJECT
 22540000           DECLARE
 22560000                 /* PTR TO PUTLINE PARAMETER BLOCK
 22580000                 PTPBPTR  PTR(31);
 22600000
 22620000   %INCLUDE  SYSLIB(IKJPTPB);
 22640000 @EJECT
 22660000           DECLARE
 22680000                 /* PTR TO PARSE PARAMETER LIST
 22700000                 PPLPTR  PTR(31);
 22720000
 22740000    %INCLUDE SYSLIB(IKJPPL);          /* GET PARSE PARM LIST MA
 22760000
 22780000           %INCLUDE  SYSLIB(IKJIOPL);  /* GET SERVICE RTN PL MA
 22784000
 22788000           DECLARE
 22800000
                 /* PARAMETER LIST FOR PARSE                         */
                 PPLSP  CHAR(LENGTH(PPL));
 22920000           DECLARE
 22940000                 /* DEFINE PARAMETER LIST FOR CLEARING
 22960000                 PPLB  BIT(LENGTH(PPL)) BASED(ADDR(PPLSP));
 23000000
 23060000           DECLARE
 23080000                 /* RESERVE LENGTH AND OFFSET OF COMMAND BUFFER
 23100000                 1 CBHDSAV,           /* NAME OF HEADER SAVE AR
 23120000                   2 CBHDSV1  CHAR(4) /* COMMAND SCAN RESULTANT
 23140000                         BDY(HWORD),
 23160000                     3 HDSVL1  PTR(15), /* BUFFER LENGTH
 23180000                     3 HDSVO1  PTR(15); /* CURRENT SAVE
 23200000           DECLARE
 23220000                 /* RESERVE LENGTH AND OFFSET OF COMMAND BUFFER
 23240000                 CBHDSV2  CHAR(4);    /* FOR NODELIST SCAN
 23260000
 23280000
 23300000           DECLARE
 23460000                 /* AREAS USED IN PARSING COMMAND ENTRIES
 23462000                 1  PARSARS  BIT(320) BDY(WORD), /* PARSE AREAS
 23470000                   /* RESERVE SPACE FOR PDE BLOCKS
 23480000                   2 PDESPAZ  BIT(192) BDY(WORD), /* NAME OF AR
 23500000                     3 NODEID  CHAR(8) BDY(WORD), /* USERID PDE
 23520021                       4 NODIDP PTR(31),/* PTR TO NAME
 23540000                       4 NODIDL FIXED(15),/* LENGTH OF NAME
 23560000                       4 NODIDF BIT(8), /* FLAGS
 23580000                       4 NODIDR BIT(8), /* RESERVED
 23600000                     3 NODEPW  CHAR(8) BDY(WORD), /* PASSWORD P
 23620021                       4 NODPWP PTR(31),/* PTR TO NAME
 23640000                       4 NODPWL FIXED(15),/* LENGTH OF NAME
 23660000                       4 NODPWF BIT(8), /* FLAGS
 23680000                       4 NODPWR BIT(8), /* RESERVED
 23700000                     3 NODEAN  CHAR(8) BDY(WORD), /* ACCT NUMBE
 23720021                       4 NODANP PTR(31),/* PTR TO NAME
 23740000                       4 NODANL FIXED(15),/* LENGTH OF NAME
 23760000                       4 NODANF BIT(8), /* FLAGS
 23780000                       4 NODANR BIT(8), /* RESERVED
 23800000                   /* SAVE AREAS FOR PARSE RESPONSE PTRS
 23812000                   2 PARSRSP  BIT(128) BDY(WORD),  /*  RESPONSE
 23812421                     3 CMDRPTR  PTR(31),  /* PTR TO COMMAND REP
 23814000
                     3 NDRPTRA  PTR(31),  /* PTR TO NODELIST REPLY   */
                     3 RESPONS  PTR(31),  /* PTR TO ITEM REPLY       */
                     3 DATRPTR  PTR(31);  /* PTR TO DATALIST REPLY   */
 23818800
 23820000           DECLARE
 23840000                 /* AREAS FOR ENTRY PDE NAME
 23860000                 1 NODLNMS,           /* NAME OF AREAS
 23880000                   2 NODIDC  CHAR(8), /* USERID AREA
 23900000                     3 NODIDC1 CHAR(1), /* 1ST CHAR OF USERID
 23920000                     3 NODIDCR CHAR(7), /* REMAINING 7 CHARACTE
 23940000                   2 NODPWC  CHAR(8), /* PASSWORD AREA
 23960000                   2 NODANC  CHAR(40),/* ACCOUNT NUMBER AREA
 23980000                   2 NODPNC  CHAR(8); /* PROCEDURE NAME AREA
 24000000
 24020000           DECLARE
 24040000                 /* PTR TO DATA LIST PDE
 24060000                 DATLOC  PTR(31);
 24080000
 24100000           DECLARE
 24120000                 /*  RESPONSE AREAS FOR PARSE
 24140000                 PARESPA  CHAR(4) BDY(WORD),  /* FOR NODELIST S
 24160000                 PARESPB  CHAR(4) BDY(WORD);  /* FOR DATALIST S
 24180000
 24200000
 24220000           DECLARE
 24228000                 /* PARSE ELEMENT NAMES
 24232000                 DELCMD  GENERATED LABEL,
 24236000                 NODELST GENERATED LABEL,
 24236800                 DATALST GENERATED LABEL,
 24237600                 DATLST  GENERATED LABEL,
 24238400                 DATITM  GENERATED LABEL,
 24239200                 NDLSTPA GENERATED LABEL,
 24239300                 NODEIDP GENERATED LABEL,
 24239400                 NODEPWP GENERATED LABEL,
 24239500                 NODEANP GENERATED LABEL,
 24239600                 NDLSTIA GENERATED LABEL,
 24239700                 NODEIDM GENERATED CHAR(8),
 24239800                 NDLSTI2 GENERATED LABEL,
 24239900                 NODEPWM GENERATED CHAR(8),
 24246600                 NDEPWAM GENERATED CHAR(8),
 24250600                 NDLSTI3 GENERATED LABEL,
 24251400
                 NODEANM GENERATED CHAR(8),
                 NDEANAM GENERATED CHAR(8),
                 NDLSTIAS GENERATED LABEL,
                 NODEIDMS GENERATED CHAR(8),
                 NDLSTI2S GENERATED LABEL,
                 NODEPWMS GENERATED CHAR(8),
                 NDLSTI3S GENERATED LABEL,
                 NODEANMS GENERATED CHAR(8),
                 PRSDPW  GENERATED LABEL,
                 DATPW   GENERATED LABEL,
                 PRSDAN  GENERATED LABEL,
                 DATAN   GENERATED LABEL,
                 PRSDPN  GENERATED LABEL,
                 DATPN   GENERATED LABEL;
 24263200           DECLARE
 24267200           /* PTRS TO FORCE CODE WITH ADDRESSING CAPABILITY TO
 24268000                 DELCMDP  PTR(31) INIT(ADDR(DELCMD)),
 24268800                 NLSTIPP  PTR(31) INIT(ADDR(NDLSTPA)),
 24268900                 NLSTIASP PTR(31) INIT(ADDR(NDLSTIAS)),
 24270700                 NLSTIAP  PTR(31) INIT(ADDR(NDLSTIA)),
 24271500                 NLSTI2SP PTR(31) INIT(ADDR(NDLSTI2S)),
 24272300                 NLSTI2P  PTR(31) INIT(ADDR(NDLSTI2)),
 24272400                 NLSTI3SP PTR(31) INIT(ADDR(NDLSTI3S)),
 24272500                 NLSTI3P  PTR(31) INIT(ADDR(NDLSTI3)),
 24272600                 PRSDPWP  PTR(31) INIT(ADDR(PRSDPW)),
 24274400                 PRSDANP  PTR(31) INIT(ADDR(PRSDAN)),
 24274500                 PRSDPNP  PTR(31) INIT(ADDR(PRSDPN));
 24275300
 24276100
 24276400           DECLARE
 24277200                 /* DATA LIST PDE MASK
 24278000                 1 CMDDID  BASED(DATLOC), /* NAME OF DATA LIST
 24278100                   2 CMDDNMP PTR(31), /* PTR TO CHARACTER STRIN
 24283500                   2 CMDDLNG PTR(15), /* LENGTH OF CHAR STRING
 24287500                   2 CMDDFLG CHAR(1), /* FLAGS
 24288300                     3 CMDDFL1 BIT(1),  /* 1 = PARAMETER ENTERE
 24289100                                        /* 0 = NO PARM ENTERED
 24290900                     3 CMDDFRS BIT(7),  /* RESERVED FLAGS
 24291700                   2 CMDDRES BIT(8);  /* RESERVED
 24292500
 24292600           DECLARE
 24292700
                 /* DATA LIST IMPORT BUFFER MASK                     */
                 1 DBUF  BASED(DBUFPTR), /* NAME OF MASK             */
                   2 DBUFLNG PTR(15), /* LENGTH OF BUFFER            */
                   2 DBUFOFF PTR(15), /* TEXT OFFSET                 */
                   2 DBUFLHP CHAR(1), /* SPACE FOR LEFT PAREND       */
                   2 DBUFTXT CHAR(32767);  /* TEXT AREA              */
 24305000           DECLARE
 24305800                 /* DATA LIST CHARACTER STRING FROM PARSE
 24307400                 CMDDNMC  CHAR(32762) BASED(CMDDNMP);
 24308200
 24308300           DECLARE
 24308400                 /* STANDARD DATALIST IMPORT BUFFER
 24308500                 1 NUDBUF,            /* NAME OF NEW DATALIST B
 24308600                   2 NUDBLNG PTR(15), /* LENGTH OF BUFFER
 24308700                   2 NUDBLP CHAR(1),  /* SPACE FOR LEFT PAREND
 24308800                   2 NUDBTXT CHAR(257);  /* TEXT AREA
 24308900 @EJECT
 24309000 /*      C L A S S   I N I T I A L   P O I N T E R   C H A I N
 24310600
 24315300           DECLARE
 24320000                 /* INITIAL PASSWORD OFFSET BLOCK
 24340000                 1 PSWD1OB  BDY(WORD) /* NAME OF BLOCK
 24360000                       BASED(DPFLOC1),
 24380000                   2 PSWD1XC  CHAR(4),     /* END OF CHAIN CHEC
 24400000                     3 PSWD1FL  CHAR(1),   /* FLAG AREA
 24420000                       4 PSWD1F1  BIT(1),  /* ..0 -- CONTINUE C
 24440000 /*                                           ..1 -- LAST PASSW
 24460000                     3 PSWD1XP  PTR(24)    /* PTR TO NEXT PASSW
 24480000                          BDY(BYTE),
 24500000                   2 PSWD1SP  PTR(31),     /* PTR TO FIRST ACCT
 24520000                   2 PSWD1DP  PTR(31);     /* PTR TO PASSWORD D
 24540000
 24560000           DECLARE
 24580000                 /* INITIAL ACCOUNT NUMBER OFFSET BLOCK
 24600000                 1 ACTN1OB  BDY(WORD) /* NAME OF BLOCK
 24620000                       BASED(DAFLOC1),
 24640000                   2 ACTN1XC  CHAR(4),     /* END OF CHAIN CHEC
 24660000                     3 ACTN1FL  CHAR(1),   /* FLAG AREA
 24680000                       4 ACTN1F1  BIT(1),  /* ..0 -- CONTINUE C
 24700000 /*                                           ..1 -- LAST ACCTN
 24720000 /*                                           .....FOR THE CURR
 24740000
 /*                                           .....PASSWORD          */
                     3 ACTN1XP  PTR(24)    /* PTR TO NEXT ACCTNMBR   */
                           BDY(BYTE),
                   2 ACTN1SP  PTR(31),     /* PTR TO FIRST PROCNAME  */
                   2 ACTN1DP  PTR(31);     /* PTR TO ACCTNMBR DATA   */
 24860000           DECLARE
 24880000                 /* INITIAL PROCEDURE NAME OFFSET BLOCK
 24900000                 1 PRNM1OB  BDY(WORD) /* NAME OF BLOCK
 24920000                       BASED(DRFLOC1),
 24940000                   2 PRNM1XC  CHAR(4),     /* END OF CHAIN CHEC
 24960000                     3 PRNM1FL  CHAR(1),   /* FLAG AREA
 24980000                       4 PRNM1F1  BIT(1),  /* ..0 -- CONTINUE C
 25000000 /*                                           ..1 -- LAST PROCN
 25020000 /*                                           .....FOR THE CURR
 25040000 /*                                           .....ACCOUNT NUMB
 25060000                     3 PRNM1XP PTR(24)/* PTR TO NEXT PROCNAME
 25080000                         BDY(BYTE),
 25100000                   2 PRNM1SP  PTR(31),     /* RESERVED
 25120000                   2 PRNM1DP  PTR(31);     /* PTR TO PROCNAME D
 25140000
 25160000           DECLARE
 25180000                 /* PTR TO INITIAL OFFSET CHAIN POINTER
 25200000                 DCHNP  PTR(31);
 25220000
 25240000           DECLARE
 25260000                 /* PTR TO CURRENT DELETE OFFSET BLOCK
 25280000                 DELOP  PTR(31),
 25300000                 /* PTR TO NEXT DELETE OFFSET BLOCK
 25320000                 TSTOP  PTR(31);
 25340000
 25360000           DECLARE
 25380000                 /* PARAMETER BLOCK FOR GETSPACE/FREESPACE ROUT
 25400000                 1 SPAZPB  BDY(WORD), /* NAME OF BLOCK
 25420000                   2 SPZBUFP PTR(31), /* PTR TO MEMBER (BUFFER)
 25440000                   2 SPZBLKN FIXED(15), /* NMBR OF EXTENSION BL
 25444000                   2 SPZBLNG FIXED(15), /* LENGTH OF SPACE INVO
 25448000                   2 SPZBLOC PTR(31);   /* MEMBER BLOCK OFFSET
 25452000 /*                                       1, SPACE SUPPLIED
 25456000 /*                                          (RESPONSE FROM GET
 25456800 /*                                       2, SPACE TO FREE
 25457600 /*                                          (REQUEST TO FREESP
 25458400

           DECLARE
                 /* RESERVE PARAMETER TO FREE DATA BLOCK             */
                 1 SPZBLCA BDY(WORD), /* NAME OF AREA          M1850 */
                   2 SPZBLCD PTR(31), /* LOCATION OF DATA      M1850 */
                   2 SPZBLGD PTR(15); /* LENGTH OF DATA BLOCK  M1850 */
 25473000           DECLARE
 25476500                 /* PTR TO LAST PREVIOUS OB
 25480000                 LASTOP  PTR(31);
 25500000
 25520000           DECLARE
 25540000                 /* PTR TO READ/WRITE PARM BLOCK
 25560000                 RWPBP  PTR(31);
 25580000
 25600000           DECLARE
 25620000                 /* POINTERS FOR MESSAGE AREA ADDRESSING
 25640000                 MSGNO   PTR(15),     /* NO OF CURRENT MESSAGE
 25660000                 MOFFNO  PTR(31),     /* PTR TO MESSAGE OFFSET
 25680000                 MOFFNC  PTR(15)      /* CURRENT MESSAGE TEXT O
 25700000                       BASED(MOFFNO),
 25720000                 MSGPTR  PTR(31);     /* CURRENT MESSAGE TEXT A
 25740000
 25760000           DECLARE
 25780000                 /* MESSAGE BUFFER FORMAT
 25800000                 1 MSGBUFM  BASED(MSGPTR), /* NAME OF MESSAGE B
 25820000                   2 MSGBLG  PTR(15), /* LENGTH OF MESSAGE
 25840000                   2 MSGBUF  PTR(15), /* TEXT OFFSET
 25860000                   2 MSGTXT  CHAR(1); /* INITIAL MESSAGE CHARAC
 25880000
 25900000           DECLARE
 25920000                 /* SINGLE LEVEL MESSAGE POINTER AREA MASK
 25940000                 1 TMXMDL             /* NAME OF MASK
 25960000                        BASED(MSGPTR),
 25980000                   2 TMXMN   PTR(31), /* NUMBER OF MESSAGE SEGM
 26000000                   2 TMXMP1  PTR(31), /* PTR TO 1ST SEGMENT
 26020000                   2 TMXMP2  PTR(31), /* PTR TO 2ND SEGMENT
 26040000                   2 TMXMP3  PTR(31), /* PTR TO 3RD SEGMENT
 26060000                   2 TMXMP4  PTR(31), /* PTR TO 4TH SEGMENT
 26080000                   2 TMXMP5  PTR(31); /* PTR TO 5TH SEGMENT
 26100000
 26120000           DECLARE
 26140000
                 /* SUBSEQUENT MESSAGE SEGMENT MASKS                 */
                 TMSMT1  CHAR(148)    /* AREA FOR SEGMENT 1          */
                       BASED(TMXMP1),
                 TMSMT2  CHAR(148)    /* AREA FOR SEGMENT 2          */
                       BASED(TMXMP2),
                 TMSMT3  CHAR(148)    /* AREA FOR SEGMENT 3          */
                       BASED(TMXMP3),
                 TMSMT4  CHAR(148)    /* AREA FOR SEGMENT 4          */
                       BASED(TMXMP4),
                 TMSMT5  CHAR(148)    /* TEXT OF MSG SEGMENT 5       */
                       BASED(TMXMP5);
 26380000
 26400000           DECLARE
 26420000                 /* AREA FOR FIRST ACTIVE MESSAGE PARAMETER LIS
 26440000                                      /* FUNCTION DESCRIPTION F
 26444000                                      /* SINGLE LEVEL MESSAGE O
 26448000                                      /*    MULTILEVEL MESSAGE
 26452000                 1 TMSGNS1 BDY(WORD), /* NAME OF AREA
 26460000                   2 TMSGNNO1 PTR(31),/* NUMBER OF SEGMENTS /
 26480000                                      /*    PTR TO NEXT LEVEL
 26484000                   2 TMSGNP10 PTR(31),/* PTR TO 1ST SEGMENT /
 26500000                                      /*    NUMBER OF SEGMENTS
 26504000                   2 TMSGNP12 PTR(31),/* PTR TO 2ND SEGMENT /
 26520000                                      /*    PTR TO 1ST SEGMENT
 26524000                   2 TMSGNP13 PTR(31),/* PTR TO 3RD SEGMENT /
 26540000                                      /*    PTR TO 2ND SEGMENT
 26544000                   2 TMSGNP14 PTR(31),/* PTR TO 4TH SEGMENT /
 26560000                                      /*    PTR TO 3RD SEGMENT
 26564000                   2 TMSGNP15 PTR(31),/* PTR TO 5TH SEGMENT /
 26580000                                      /*    PTR TO 4TH SEGMENT
 26584000                   2 TMSGNP16 PTR(31);/* PTR TO 6TH SEGMENT /
 26588000                                      /*    PTR TO 5TH SEGMENT
 26592000
 26600000           DECLARE
 26604000                 /* AREA FOR SECOND ACTIVE MESSAGE PARAMETER LI
 26608000                                      /* FUNCTION DESCRIPTION F
 26608800                                      /* SINGLE LEVEL MESSAGE O
 26609600                                      /*    MULTILEVEL MESSAGE
 26610400                 1 TMSGNS2 BDY(WORD), /* NAME OF AREA
 26612000                   2 TMSGNNO2 PTR(31),/* NUMBER OF SEGMENTS /
 26616000                                      /*    PTR TO NEXT LEVEL
 26616100
                   2 TMSGNP21 PTR(31),/* PTR TO 1ST SEGMENT /        */
                                      /*    NUMBER OF SEGMENTS       */
                   2 TMSGNP22 PTR(31),/* PTR TO 2ND SEGMENT /        */
                                      /*    PTR TO 1ST SEGMENT       */
                   2 TMSGNP23 PTR(31),/* PTR TO 3RD SEGMENT /        */
                                      /*    PTR TO 2ND SEGMENT       */
                   2 TMSGNP24 PTR(31),/* PTR TO 4TH SEGMENT /        */
                                      /*    PTR TO 3RD SEGMENT       */
                   2 TMSGNP25 PTR(31),/* PTR TO 5TH SEGMENT /        */
                                      /*    PTR TO 4TH SEGMENT       */
                   2 TMSGNP26 PTR(31);/* PTR TO 6TH SEGMENT /        */
                                      /*    PTR TO 5TH SEGMENT       */
 26629800           DECLARE
 26634900                 /*  AREA FOR FIRST ACTIVE MESSAGE INSERT SEGME
 26640000                 1 TMSGTIX1 BDY(HWORD),/* NAME OF SEGMENT AREA
 26660000                   2 TMSGTIL1 PTR(15),/* SEGMENT TEXT LENGTH
 26680000                   2 TMSGTIO1 PTR(15),/* SEGMENT TEXT OFFSET
 26700000                   2 TMSGTIN1 CHAR(146);  /* INSERT TEXT AREA
 26720000           DECLARE
 26724000                 /*  AREA FOR SECOND ACTIVE MESSAGE INSERT SEGM
 26728000                 1 TMSGTIX2 BDY(HWORD),/* NAME OF SEGMENT AREA
 26732000                   2 TMSGTIL2 PTR(15),/* SEGMENT TEXT LENGTH
 26736000                   2 TMSGTIO2 PTR(15),/* SEGMENT TEXT OFFSET
 26736800                   2 TMSGTIN2 CHAR(146);  /* INSERT TEXT AREA
 26737600
 26738400           DECLARE
 26739200                  /* AREA FOR ERROR CODE IMAGE
 26739300                  MSGCDE  CHAR(4) BASED(ADDR(TMSGTIN1));    /*
 26739421
 26739500           DECLARE
 26740000           /* MULTISEGMENT MESSAGE FORMAT
 26760000                 /* MESSAGE SEGMENT 1 MASK
 26780000                 1 TMS1MDL            /* NAME OF MASK
 26800000                        BASED(TMXMP1),
 26820000                   2 TMS1ML  PTR(15), /* LENGTH OF TEXT
 26840000                   2 TMS1MO  PTR(15), /* TEXT OFFSET
 26860000                   2 TMS1MT CHAR(10); /* TEXT AREA
 26880000           DECLARE
 26900000                 /* MESSAGE SEGMENT 2 MASK
 26920000                 1 TMS2MDL            /* NAME OF MASK
 26940000                        BASED(TMXMP2),
 26960000
                   2 TMS2ML  PTR(15), /* LENGTH OF TEXT              */
                   2 TMS2MO  PTR(15), /* TEXT OFFSET                 */
                   2 TMS2MT CHAR(144);/* TEXT AREA                   */
           DECLARE
                 /* MESSAGE SEGMENT 3 MASK                           */
                 1 TMS3MDL            /* NAME OF MASK                */
                        BASED(TMXMP3),
                   2 TMS3ML  PTR(15), /* LENGTH OF TEXT              */
                   2 TMS3MO  PTR(15), /* TEXT OFFSET                 */
                   2 TMS3MT CHAR(144);/* TEXT AREA                   */
           DECLARE
                 /* MESSAGE SEGMENT 4 MASK                           */
                 1 TMS4MDL            /* NAME OF MASK                */
                        BASED(TMXMP4),
                   2 TMS4ML  PTR(15), /* LENGTH OF TEXT              */
                   2 TMS4MO  PTR(15), /* TEXT OFFSET                 */
                   2 TMS4MT CHAR(144);/* TEXT AREA                   */
 27320000           DECLARE
 27340000                 /* MESSAGE SEGMENT 5 MASK
 27360000                 1 TMS5MDL            /* NAME OF MASK
 27380000                        BASED(TMXMP5),
 27400000                   2 TMS5ML  PTR(15), /* LENGTH OF EXT
 27420000                   2 TMS5MO  PTR(15), /* TEXT OFFSET
 27440000                   2 TMS5MT CHAR(144);/* TEXT AREA
 27460000
 27480000           DECLARE
 27484000                 /* MULTI-LEVEL MESSAGE POINTER AREA MASK
 27488000                 /* FIRST LEVEL MESSAGE POINTER AREA MASK
 27488800                 1 TMLMDL1 BASED(MSGPTR),  /* NAME OF MASK
 27492000                   2 TMLNX1  PTR(31), /* PTR TO NEXT LEVEL
 27496000                   2 TMLMN1  PTR(31), /* NUMBER OF MESSAGE SEGM
 27496800                   2 TMLMP11 PTR(31), /* PTR TO 1ST SEGMENT
 27497600                   2 TMLMP12 PTR(31), /* PTR TO 2ND SEGMENT
 27498400                   2 TMLMP13 PTR(31), /* PTR TO 3RD SEGMENT
 27499200                   2 TMLMP14 PTR(31), /* PTR TO 4TH SEGMENT
 27499300                   2 TMLMP15 PTR(31); /* PTR TO 5TH SEGMENT
 27499400           DECLARE
 27504500                 /* SECOND LEVEL MESSAGE POINTER AREA MASK
 27509300                 1 TMLMDL2 BASED(TMLNX1),  /* NAME OF MASK
 27509400                   2 TMLNX2  PTR(31), /* PTR TO NEXT LEVEL
 27509500                   2 TMLMN2  PTR(31), /* NUMBER OF MESSAGE SEGM
 27509600
                   2 TMLMP21 PTR(31), /* PTR TO 1ST SEGMENT          */
                   2 TMLMP22 PTR(31), /* PTR TO 2ND SEGMENT          */
                   2 TMLMP23 PTR(31), /* PTR TO 3RD SEGMENT          */
                   2 TMLMP24 PTR(31), /* PTR TO 4TH SEGMENT          */
                   2 TMLMP25 PTR(31); /* PTR TO 5TH SEGMENT          */
           DECLARE
                 /* THIRD LEVEL MESSAGE POINTER AREA MASK            */
                 1 TMLMDL3 BASED(TMLNX1),  /* NAME OF MASK           */
                   2 TMLNX3  PTR(31), /* PTR TO NEXT LEVEL           */
                   2 TMLMN3  PTR(31), /* NUMBER OF MESSAGE SEGMENTS  */
                   2 TMLMP31 PTR(31), /* PTR TO 1ST SEGMENT          */
                   2 TMLMP32 PTR(31), /* PTR TO 2ND SEGMENT          */
                   2 TMLMP33 PTR(31), /* PTR TO 3RD SEGMENT          */
                   2 TMLMP34 PTR(31), /* PTR TO 4TH SEGMENT          */
                   2 TMLMP35 PTR(31); /* PTR TO 5TH SEGMENT          */
 27525900           DECLARE
 27529900                 /* MESSAGE LEVEL 1, SEGMENT 1 MASK
 27530000                 1 TM11MDL BASED(TMLMP11),  /* NAME OF MASK
 27530100                   2 TM11ML  PTR(31), /* LENGTH OF SEGMENT
 27530200                   2 TM11MO  PTR(31), /* TEXT OFFSET
 27530400                   2 TM11MT CHAR(144);/* TEXT AREA
 27530500           DECLARE
 27534600                 /* MESSAGE LEVEL 1, SEGMENT 2 MASK
 27534700                 1 TM12MDL BASED(TMLMP12),  /* NAME OF MASK
 27534800                   2 TM12ML  PTR(31), /* LENGTH OF SEGMENT
 27534900                   2 TM12MO  PTR(31), /* TEXT OFFSET
 27535000                   2 TM12MT CHAR(144);/* TEXT AREA
 27535100           DECLARE
 27536300                 /* MESSAGE LEVEL 1, SEGMENT 3 MASK
 27537100                 1 TM13MDL BASED(TMLMP13),  /* NAME OF MASK
 27537200                   2 TM13ML  PTR(31), /* LENGTH OF SEGMENT
 27537300                   2 TM13MO  PTR(31), /* TEXT OFFSET
 27537400                   2 TM13MT CHAR(144);/* TEXT AREA
 27537500           DECLARE
 27542000                 /* MESSAGE LEVEL 1, SEGMENT 4 MASK
 27546000                 1 TM14MDL BASED(TMLMP14),  /* NAME OF MASK
 27546100                   2 TM14ML  PTR(31), /* LENGTH OF SEGMENT
 27546200                   2 TM14MO  PTR(31), /* TEXT OFFSET
 27546300                   2 TM14MT CHAR(144);/* TEXT AREA
 27546400           DECLARE
 27547900                 /* MESSAGE LEVEL 1, SEGMENT 5 MASK
 27548700
                 1 TM15MDL BASED(TMLMP15),  /* NAME OF MASK          */
                   2 TM15ML  PTR(31), /* LENGTH OF SEGMENT           */
                   2 TM15MO  PTR(31), /* TEXT OFFSET                 */
                   2 TM15MT CHAR(144);/* TEXT AREA                   */
 27549500           DECLARE
 27550300                 /* MESSAGE LEVEL 2, SEGMENT 1 MASK
 27550400                 1 TM21MDL BASED(TMLMP21),  /* NAME OF MASK
 27550500                   2 TM21ML  PTR(31), /* LENGTH OF SEGMENT
 27550600                   2 TM21MO  PTR(31), /* TEXT OFFSET
 27550700                   2 TM21MT CHAR(144);/* TEXT AREA
 27550800           DECLARE
 27550900                 /* MESSAGE LEVEL 2, SEGMENT 2 MASK
 27552400                 1 TM22MDL BASED(TMLMP22),  /* NAME OF MASK
 27553200                   2 TM22ML  PTR(31), /* LENGTH OF SEGMENT
 27553300                   2 TM22MO  PTR(31), /* TEXT OFFSET
 27553400                   2 TM22MT CHAR(144);/* TEXT AREA
 27553500           DECLARE
 27553600                 /* MESSAGE LEVEL 2, SEGMENT 3 MASK
 27553700                 1 TM23MDL BASED(TMLMP23),  /* NAME OF MASK
 27553800                   2 TM23ML  PTR(31), /* LENGTH OF SEGMENT
 27553900                   2 TM23MO  PTR(31), /* TEXT OFFSET
 27555400                   2 TM23MT CHAR(144);/* TEXT AREA
 27555500           DECLARE
 27556300                 /* MESSAGE LEVEL 2, SEGMENT 4 MASK
 27556400                 1 TM24MDL BASED(TMLMP24),  /* NAME OF MASK
 27556500                   2 TM24ML  PTR(31), /* LENGTH OF SEGMENT
 27556600                   2 TM24MO  PTR(31), /* TEXT OFFSET
 27556700                   2 TM24MT CHAR(144);/* TEXT AREA
 27556800           DECLARE
 27556900                 /* MESSAGE LEVEL 2, SEGMENT 5 MASK
 27561500                 1 TM25MDL BASED(TMLMP25),  /* NAME OF MASK
 27565500                   2 TM25ML  PTR(31), /* LENGTH OF SEGMENT
 27565600                   2 TM25MO  PTR(31), /* TEXT OFFSET
 27565700                   2 TM25MT CHAR(144);/* TEXT AREA
 27565800
 27565900           DECLARE
 27566000                 /* MESSAGE LEVEL 3, SEGMENT 1 MASK
 27566100                 1 TM31MDL BASED(TMLMP31),  /* NAME OF MASK
 27567600                   2 TM31ML  PTR(31), /* LENGTH OF SEGMENT
 27568400                   2 TM31MO  PTR(31), /* TEXT OFFSET
 27569200                   2 TM31MT CHAR(144);/* TEXT AREA
 27570700
           DECLARE
                 /* MESSAGE LEVEL 3, SEGMENT 2 MASK                  */
                 1 TM32MDL BASED(TMLMP32),  /* NAME OF MASK          */
                   2 TM32ML  PTR(31), /* LENGTH OF SEGMENT           */
                   2 TM32MO  PTR(31), /* TEXT OFFSET                 */
                   2 TM32MT CHAR(144);/* TEXT AREA                   */
           DECLARE
                 /* MESSAGE LEVEL 3, SEGMENT 3 MASK                  */
                 1 TM33MDL BASED(TMLMP33),  /* NAME OF MASK          */
                   2 TM33ML  PTR(31), /* LENGTH OF SEGMENT           */
                   2 TM33MO  PTR(31), /* TEXT OFFSET                 */
                   2 TM33MT CHAR(144);/* TEXT AREA                   */
           DECLARE
                 /* MESSAGE LEVEL 3, SEGMENT 4 MASK                  */
                 1 TM34MDL BASED(TMLMP34),  /* NAME OF MASK          */
                   2 TM34ML  PTR(31), /* LENGTH OF SEGMENT           */
                   2 TM34MO  PTR(31), /* TEXT OFFSET                 */
                   2 TM34MT CHAR(144);/* TEXT AREA                   */
           DECLARE
                 /* MESSAGE LEVEL 3, SEGMENT 5 MASK                  */
                 1 TM35MDL BASED(TMLMP35),  /* NAME OF MASK          */
                   2 TM35ML  PTR(31), /* LENGTH OF SEGMENT           */
                   2 TM35MO  PTR(31), /* TEXT OFFSET                 */
                   2 TM35MT CHAR(144);/* TEXT AREA                   */
 27580000           DECLARE
 27583600                 /* ACCOUNT SERVICE ROUTINES PARAMETERS
 27590400                 NOSEXT  FIXED(15),   /* RESERVE NMBT OF EXT BL
 27591800                 GSPPB  CHAR(12),     /* AREA FOR GETSPACE PARM
 27595900                 FSPPB  CHAR(12);     /* AREA FOR FREESPACE PAR
 27600000
 27620000           DECLARE
 27639500                 /* PDE NAME STRINGS
 27639600                 NAMEID  CHAR(8)  BASED(NODIDP),
 27639700                 NAMEPW  CHAR(8)  BASED(NODPWP),
 27639800                 NAMEAN  CHAR(40) BASED(NODANP);
 27639900
 27646600           DECLARE
 27650600                 /* PSEUD0-BUFFER FOR OBTAINED NODELIST PSTRING
 27651400                 1 PSBUF  CHAR(128) BDY(WORD),  /* NAME OF BUFF
 27652221                   2 PSBUFHDP BDY(WORD),  /*  HEADER+PAREND ARE
 27653021                     3 PSBUFHD,         /* NAME OF HEADER AREA
 27653100
                       4 PSBUFL  PTR(15), /* BUFFER LSNGTH           */
                       4 PSBUFO  PTR(15),  /* CURRENT BUFFER OFFSET  */
                     3 PSBUFLP  CHAR(1),  /* LEFT END PAREND FOR PS  */
                   2 PSBUFTX  CHAR(123);  /* PSTRING TEXT AREA       */
 27657100           DECLARE
 27657200                 /* INDIVIDUAL BUFFER FOR NODELIST ITEM
 27657300                 1 NODIBUF  CHAR(56) BDY(HWORD),  /* NAME OF BU
 27657421                   2 NDIBFHD BDY(HWORD),  /* NAME OF HEADER
 27657521                     3 NDIBFL  PTR(15),/* BUFFER LENGTH
 27657600                     3 NDIBFO  PTR(15),/* CURRENT BUFFER OFFSET
 27657700                   2 NDIBFTX  CHAR(52);/* ITEM TEXT AREA
 27663200
 27667200           DECLARE
 27668000                 /* DEFINE BUFFER HEADER FOR PARSE
 27668800                 PARSBHD  CHAR(4) BASED(PPLCBUF);
 27668900
 27670700
 27671500           DECLARE
 27672300                 /* NODELIST PSTRING PARSE PDE
 27672400                 1 CMDNID  BASED(ADDR(NODELST)), /* NAME OF PDE
 27672500                   2 CMDNNMP PTR(31), /* PTR TO PSTRING
 27672600                   2 CMDNLNG PTR(15), /* NUMBER OF CHARS
 27674400                   2 CMDNFLG CHAR(1), /* FLAGS
 27674500                     3 CMDNFL1 BIT(1),/* 1 = PARAMETER ENTERED
 27675300 /*                                      3 = PARM NOT ENTERED
 27676100                     3 CMDNFRS BIT(7),/* FLAGS 1 - 7 RESERVED
 27676200                   2 CMDNRES  BIT(8); /* RESERVED
 27676300
 27681000           DECLARE
 27685000                 /* NODELIST TEXT AREA
 27685800                 SUPBUF  CHAR(124) BASED(CMDNNMP);
 27687400
 27688200           DECLARE
 27688300                 /* NODELIST USERID PARSE PDE
 27688400                 1 NDLAN1 BASED(ADDR(NODEIDP)), /* NAME OF PDE
 27688500                   2 NDLAN1P PTR(31), /* PTR TO USERID
 27688600                   2 NDL1LNG FIXED(15),  /* NUMBER OF CHARACTER
 27688700                   2 NDL1FLG BIT(8),  /* FLAGS
 27688800                     3 NDL1FL1 BIT(1),  /* 1 = PARAMETER ENTERE
 27688900 /*                                        0 = PARM NOT ENTERED
 27690500                     3 NDL1FRS BIT(7),  /* FLAGS 2 - 8 RESERVED
 27690600
                   2 NDL1RES  BIT(8); /* RESERVED                    */
 27691500           DECLARE
 27691600                 /* NODELIST PASSWORD PARSE PDE
 27691700                 1 NDLAN2 BASED(ADDR(NODEPWP)), /* NAME OF PDE
 27691800                   2 NDLAN2P PTR(31), /* PTR TO PASSWORD
 27691900                   2 NDL2LNG FIXED(15),  /* NUMBER OF CHARACTER
 27692000                   2 NDL2FLG BIT(8),  /* FLAGS
 27693600                     3 NDL2FL1 BIT(1),  /* 1 = PARAMETER ENTERE
 27693700 /*                                        0 = PARM NOT ENTERED
 27694500                     3 NDL2FRS BIT(7),  /* FLAGS 2 - 8 RESERVED
 27694600                   2 NDL2RES  BIT(8); /* RESERVED
 27694700
 27694800           DECLARE
 27694900                 /* NODELIST ACCOUNT NUMBER PARSE PDE
 27695000                 1 NDLAN3 BASED(ADDR(NODEANP)),  /* NAME OF PDE
 27695100                   2 NDLAN3P PTR(31), /* PTR TO ACCOUNT NUMBER
 27695200                   2 NDL3LNG FIXED(15),  /* NUMBER OF CHARACTER
 27715200                   2 NDL3FLG BIT(8),  /* FLAGS
 27719200                     3 NDL3FL1 BIT(1),  /* 1 = PARAMETER ENTERE
 27723200 /*                                        0 = PARM NOT ENTERED
 27727200                     3 NDL3FRS BIT(7),  /* FLAGS 2 - 8 RESERVED
 27731200                   2 NDL3RES  BIT(8); /* RESERVED
 27732000
 27732800           DECLARE
 27733600                 /* NODELIST USERID RESERVED PDE
 27734400                 1 NDLIDM  BASED(ADDR(NODEID)),  /* NAME OF PDE
 27734500                   2 NDLINMP  PTR(31),    /* PTR TO USERID NAME
 27734600                   2 NDLILNG  FIXED(15),  /* NUMBER OF CHARS IN
 27734700                   2 NDLIFLG  BIT(8),     /* FLAGS
 27734800                     3 NDLIFL1  BIT(1),   /* 1 = PARAMETER ENTE
 27734900 /*                                          0 = PARM NOT ENTER
 27735000                     3 NDLIFRS  BIT(6),   /* FLAGS 2 - 7 RESERV
 27735100                     3 NDLIFL8  BIT(1),   /* 1 = USERID DELETED
 27741800 /*                                          0 = NOT DELETED
 27745800                   2 NDLIRES  BIT(8);     /* RESERVED
 27746600
 27747400           DECLARE
 27748200                 /* NODELIST PASSWORD RESERVED PDE
 27748300                 1 NDLPWM  BASED(ADDR(NODEPW)),  /* NAME OF PDE
 27748400                   2 NDLPNMP  PTR(31),    /* PTR TO PASSWORD NA
 27750600                   2 NDLPLNG  FIXED(15),  /* NUMBER OF CHARS IN
 27751400
                   2 NDLPFLG  BIT(8),     /* FLAGS                   */
                     3 NDLPFL1  BIT(1),   /* 1 = PARAMETER ENTERED   */
 /*                                          0 = PARM NOT ENTERED    */
                     3 NDLPFRS  BIT(6),   /* FLAGS 2 - 7 RESERVED    */
                     3 NDLPFL8  BIT(1),   /* PASSWD DELETE STATUS    */
 /*                                          1 = PASSWD DELETED      */
 /*                                          0 = NOT DELETED         */
                   2 NDLPRES  BIT(8);     /* RESERVED                */
 27758400           DECLARE
 27762400                 /* NODELIST ACCOUNT NUMBER RESERVED PDE
 27763200                 1 NDLANM  BASED(ADDR(NODEAN)),  /* NAME OF PDE
 27764000                   2 NDLANMP  PTR(31),    /* PTR TO ACCOUNT NUM
 27764100                   2 NDLALNG  FIXED(15),  /* NUMBER OF CHARS IN
 27765900                   2 NDLAFLG  BIT(8),     /* FLAGS
 27766700                     3 NDLAFL1  BIT(1),   /* 1 = PARAMETER ENTE
 27767500 /*                                          0 = PARM NOT ENTER
 27767600                     3 NDLAFRS  BIT(6),   /* FLAGS 2 - 7 RESERV
 27767700                     3 NDLAFL8  BIT(1),   /* ACCTNMBR DELETE ST
 27767800 /*                                          1 = ACCTNMBR DELET
 27769600 /*                                          0 = NOT DELETED
 27769700                   2 NDLARES    BIT(8);   /* RESERVED
 27770500
 27771300           DECLARE
 27771400                 /* DATA LIST ANONYMOUS ITEM PARSE PDE
 27771500                 1 DALINM   BASED(ADDR(DATITM)), /* NAME OF PDE
 27776200                   2 DALINMP  PTR(31),    /* PTR TO ITEM NAME
 27780200                   2 DALILNG  FIXED(15),  /* NUMBER OF CHARS IN
 27781000                   2 DALIFLG  BIT(8),     /* FLAGS
 27782600                     3 DALIFL1  BIT(1),   /* 1 = PARAMETER ENTE
 27783400 /*                                          0 = NO PARM ENTERE
 27783500                     3 DALIFRS  BIT(7),   /* FLAGS 1 - 7 RESERV
 27783600                   2 DALINEX    BIT(8);   /* RESERVED FOR CHAIN
 27783700
 27783800           DECLARE
 27783900                 /* NAME OF AREA TO BE CHECKED FOR 'DATA'
 27784000                 TSTBUFR  CHAR(4) BASED(DATLOC);
 27784100
 27785700           DECLARE
 27785800                 /* DATA LIST PASSWORD PARSE PDE
 27786600                 1 DALPWM  BASED(ADDR(DATPW)),   /* NAME OF PDE
 27786700                   2 DALPNMP  PTR(31),    /* PTR TO PASSWORD NA
 27786800
                   2 DALPLNG  FIXED(15),  /* NUMBER OF CHARS IN NAME */
                   2 DALPFLG  BIT(8),     /* FLAGS                   */
                     3 DALPFL1  BIT(1),   /* 1 = PARAMETER ENTERED   */
 /*                                          0 = NO PARM ENTERED     */
                     3 DALPFRS  BIT(7),   /* FLAGS 1 - 7 RESERVED    */
                   2 DALPNEX  BIT(8);     /* RESERVED FOR CHAIN PTR  */
 27789700           DECLARE
 27789800                 /* DATA LIST ACCOUNT NUMBER PARSE PDE
 27789900                 1 DALANM  BASED(ADDR(DATAN)),   /* NAME OF PDE
 27790000                   2 DALANMP  PTR(31),    /* PTR TO ACCOUNT NUM
 27790100                   2 DALALNG  FIXED(15),  /* NUMBER OF CHARS IN
 27790200                   2 DALAFLG  BIT(8),     /* FLAGS
 27790300                     3 DALAFL1  BIT(1),   /* 1 = PARAMETER ENTE
 27790400 /*                                          0 = NO PARM ENTERE
 27810400                     3 DALAFRS  BIT(7),   /* FLAGS 1 - 7 RESERV
 27814400                   2 DALANEX  BIT(8);     /* RESERVED FOR CHAIN
 27818400
 27822400           DECLARE
 27826400                 /* DATA LIST PROCNAME PARSE PDE
 27827200                 1 DALRNM  BASED(ADDR(DATPN)),   /* NAME OF PDE
 27828000                   2 DALRNMP  PTR(31),    /* PTR TO PROCNAME NA
 27828800                   2 DALRLNG  FIXED(15),  /* NUMBER OF CHARS IN
 27829600                   2 DALRFLG  BIT(8),     /* FLAGS
 27829700                     3 DALRFL1  BIT(1),   /* 1 = PARAMETER ENTE
 27829800 /*                                          0 = NO PARM ENTERE
 27829900                     3 DALRFRS  BIT(7),   /* FLAGS 1 - 7 RESERV
 27830000                   2 DALRNEX  BIT(8);     /* RESERVED FOR CHAIN
 27830100
 27830200
 27830300           /* DEFINE NAME CHARACTER STRINGS
 27837000           DECLARE
 27841000                 /* NODELIST USERID CHARACTER STRING
 27841800                 1 NDLIPC  CHAR(8) BASED(NDLINMP),
 27842600                   2 NDLIPC1 CHAR(1);
 27843400
 27843500           DECLARE
 27843600                 /* NODELIST PASSWORD NAME CHARACTER STRING
 27845800                 1 NDLPPC  CHAR(8) BASED(NDLPNMP),
 27846600                   2 NDLPPC1 CHAR(1);
 27847400
 27847500           DECLARE
 27847600
                 /* NODELIST ACCOUNT NUMBER CHARACTER STRING         */
                 1 NDLAPC  CHAR(40) BASED(NDLANMP),
                   2 NDLAPC1 CHAR(1);
 27848000           DECLARE
 27848100                 /* DATA LIST NAME CHARACTER STRING
 27853600                 1 NMPTRC  CHAR(40) BASED(NAMPTR1),
 27857600                   2 NMPTRC1 CHAR(1);
 27858400
 27859200           DECLARE
 27859400                 /* PROTO-DATA BLOCK USAGE COUNT
 27864900                 UADSNCTR  PTR(8) BASED(UADSDPTR);
 27870400
 27890400           GENERATE DATA;
 27910400&SECTN2  CSECT
 27930400DELCMD   IKJPARM   DSECT=DELPD
 27990400NODELST  IKJPOSIT   PSTRING,VALIDCK=CHKPS,PROMPT='(NODELIST)',
S28010400               HELP='NODELIST OF USERID/,PASSWORD/,ACCTNUMBER'
 28030400DATALST  IKJKEYWD
 28050400         IKJNAME   'DATA',SUBFLD=DATLST
 28070400DATLST   IKJSUBF
 28090400DATITM   IKJIDENT  'DATALIST',LIST,MAXLNTH=50,
S28110400               FIRST=ANY,OTHER=ANY,PROMPT='DATALIST'
 28130400         IKJENDP
 28150400*
 28170400NDLSTPA  IKJPARM   DSECT=NDLPDP
 28190400NODEIDP  IKJIDENT  'USERID',ASTERISK,MAXLNTH=50,
S28210400               FIRST=ANY,OTHER=ANY
 28230400NODEPWP  IKJIDENT  'PASSWORD',ASTERISK,MAXLNTH=50,
S28250400               FIRST=ANY,OTHER=ANY
 28270400NODEANP  IKJIDENT  'ACCOUNT NUMBER',ASTERISK,MAXLNTH=50,
S28290400               FIRST=ANY,OTHER=ANY
 28310400         IKJENDP
 28330400*
 28350400NDLSTIA  IKJPARM   DSECT=NDLPDA
 28370400NODEIDM  IKJIDENT  'USERID',LIST,MAXLNTH=7,PROMPT='USERID',
S28390400               FIRST=ALPHA,OTHER=ALPHANUM,
S28410400               HELP='USERID, ASTERISK IS INVALID AT DELETE LEVE
 28414400         IKJENDP
 28430400*
 28450400NDLSTI2  IKJPARM   DSECT=NDLPD2
 28470400NODEPWM  IKJIDENT  'PASSWORD',LIST,MAXLNTH=8,
S28490400
               PROMPT='PASSWORD',FIRST=ALPHANUM,OTHER=ALPHANUM,        S
               HELP='PASSWORD, ASTERISK IS INVALID AT DELETE LEVEL'
         IKJENDP
*
NDLSTI3  IKJPARM   DSECT=NDLPD3
NODEANM  IKJIDENT  'ACCOUNT NUMBER',LIST,MAXLNTH=40,                   S
               FIRST=ANY,OTHER=ANY,PROMPT='ACCOUNT NUMBER',            S
               VALIDCK=CHKANS,                                         S
               HELP='ACCOUNT NUMBER, ASTERISK IS INVALID AT DELETE LEVES
               L'
         IKJENDP
*
NDLSTIAS IKJPARM   DSECT=NDLPDAS
NODEIDMS IKJIDENT  'USERID',LIST,ASTERISK,MAXLNTH=7,PROMPT='USERID',   S
               FIRST=ALPHA,OTHER=ALPHANUM
         IKJENDP
*
NDLSTI2S IKJPARM   DSECT=NDLPD2S
NODEPWMS IKJIDENT  'PASSWORD',LIST,ASTERISK,MAXLNTH=8,                 S
               PROMPT='PASSWORD',FIRST=ALPHANUM,OTHER=ALPHANUM
         IKJENDP
*
NDLSTI3S IKJPARM   DSECT=NDLPD3S
NODEANMS IKJIDENT  'ACCOUNT NUMBER',LIST,ASTERISK,MAXLNTH=40,          S
               FIRST=ANY,OTHER=ANY,PROMPT='ACCOUNT NUMBER',            S
               VALIDCK=IKJEFA55
         IKJENDP
*
*
PRSDPW   IKJPARM   DSECT=PWDPD
DATPW    IKJIDENT  'PASSWORD',LIST,MAXLNTH=8,                          S
               FIRST=ALPHANUM,OTHER=ALPHANUM,PROMPT='PASSWORD',        S
               HELP='PASSWORD, ASTERISK IS INVALID AT DELETE LEVEL'
         IKJENDP
*
PRSDAN   IKJPARM   DSECT=ANMPD
DATAN    IKJIDENT  'ACCOUNT NUMBER',LIST,MAXLNTH=40,                   S
               FIRST=ANY,OTHER=ANY,PROMPT='ACCOUNT NUMBER',            S
               VALIDCK=CHKANS,                                         S
               HELP='ACCOUNT NUMBER, ASTERISK IS INVALID AT DELETE LEVES
               L AND APOSTROPHE IS INVALID ACCTNMBR CHARACTER'
         IKJENDP
*
PRSDPN   IKJPARM   DSECT=PNMPD
DATPN    IKJIDENT  'PROCEDURE NAME',LIST,MAXLNTH=8,                    S
               FIRST=ALPHA,OTHER=ALPHANUM,PROMPT='PROCEDURE NAME',     S
               HELP='PROCEDURE NAME, ASTERISK IS INVALID AT DELETE LEVES
               L'
         IKJENDP
*
@DATD    DSECT                        RE-ESTABLISH AUTOMATIC DSECT
 @ENDGEN
