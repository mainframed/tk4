          MACRO
         IEATRANS &SYS=MP65,&TSO=NO
         LCLB  &B(2)
&B(1)    SETB  ('&SYS' EQ 'MP65')                                 20021
&B(2)    SETB  ('&TSO' EQ 'YES')                                  20021
.*  SWITCH  &B(1)  SET TO ZERO - MULTIPROCESSING /M65 NOT INCL    20021
.*  SWITCH  &B(1)  SET TO ONE - MULTIPROCESSING /M65 INCLUDED     20021
.*                                                                20021
.*  SWITCH  &B(2)  SET TO ZERO - TIME SHARING OPTION NOT INCLUDED 20021
.*  SWITCH  &B(2)  SET TO ONE  - TIME SHARING OPTION INCLUDED     20021
.*                                                                20021
.*                                                                20021
         AIF   (&B(1) AND &B(2)).TSO01                            20021
         AIF   (&B(1)).TSO02                                      20021
         AIF   (&B(2)).TSO01A                                     20021
         TITLE 'TRANSIENT AREA HANDLER'                           20021
         AGO   .TSO02A                                            20021
.TSO01   TITLE 'TRANSIENT AREA HANDLER WITH MP/65 AND TSO'        20021
         AGO   .TSO02A                                            20021
.TSO02 TITLE 'TRANSIENT AREA HANDLER WITH MP/65'                  20021
         AGO   .TSO02A                                            20021
.TSO01A  TITLE 'TRANSIENT AREA HANDLER WITH TSO'                  20021
.TSO02A  ANOP                                                     20021
IEAQTR00 START 0
*0358,266600,268200-268600,269600,270600-271400,276600-280600      I251
*0358,287800,288200,291800,320600                                  I251
*783000,783500-788000                                            A33247
*696950-696960                                                    M0448
*
*
***********************************************************************
*MODULE NAME        IEAQTR33 - TRANSIENT AREA HANDLER                 *
*                                                                     *
*FUNCTION           1.   TO MONITOR THE SVC TRANSIENT AREAS           *
*                                                                     *
*                   2.   TO PREPARE FOR THE EXECUTION OF TYPES 2,3,   *
*                        AND 4, SVC ROUTINES.                         *
*                                                                     *
*ENTRY POINTS       1.   IEAQTR00 - SECOND LEVEL INTERRUPT HANDLER    *
*                                                                     *
*                   2.   IEAQTR01 - EXIT SUBROUTINE FOR TYPES 2,3,AND *
*                                   4,SVC ROUTINES                    *
*                                                                     *
*                   3.   IEAQTR02 - TRANSIENT AREA REFRESH ROUTINE    *
*                                                                     *
*                   4.   IEAQTR03 - TRANSIENT AREA XCTL SUBROUTINE    *
*                                                                     *
*                   5.   IEAQTR04 - FETCH INTERFACE ROUTINE           *
*                                                                     *
*                   THE CONDITIONS AND PURPOSE OF ENTRY TO EACH OF THE*
*                   ROUTINES IS DISCUSSED IN DETAIL BELOW.            *
*                                                                     *
*EXTERNAL REFERENCES                                                  *
*                   1.   IEAQTAQ - ADDRESS OF THE TRANSIENT AREA      *
*                                  CONTROL TABLE (TACT)               *
*                                                                     *
*                   2.   IEAHEAD - ADDRESS OF THE FIRST HIGHEST       *
*                                  PRIORITY TCB IN THE READY QUEUE    *
*                                                                     *
*                   3.   IEAODS  - ADDRESS OF THE DISPATCHER          *
*                                                                     *
*                   4.   SVCDCB  - ADDRESS OF THE SVC LIBRARY DCB     *
*                                                                     *
*                   5.   IEAQAB00 - ENTRY POINT ADDRESS OF ABTERM     *
*                                                                     *
*                   6.   IECPBLDL- ENTRY POINT ADDRESS OF BLDL ROUTINE*
*                                                                     *
*                   7.   IEAQTAQ1- ADDRESS OF THE END OF THE TRANSIENT*
*                                  AREA CONTROL TABLE (TACT)          *
*                                                                     *
*                   8.   IEAODS02- ADDRESS OF THE TASK SWITCH ROUTINE *
*                                                                     *
*                   9.   IEAQLPAQ- ADDRESS OF THE TOP C.D.ENTRY IN THE*
*                                  LINK PACK QUEUE                    *
*                                                                     *
*ERROR CONDITIONS                                                     *
*                   1.   BLDL ERROR                                   *
*                                                                     *
*                        A.   MODULE NOT FOUND                        *
*                                                                     *
*                             (1).  THE TASK REQUESTING THE SVC       *
*                                   ROUTINE IS ABNORMALLY TERMINATED  *
*                                                                     *
*                             (2).  REGISTER 1 CONTAINS AN ERROR      *
*                                   CODE OF X'806'                    *
*                                                                     *
*                        B.   PERMANENT IO ERROR                      *
*                                                                     *
*                             (1). THE PERMANENT ERROR FLAGS OF THE   *
*                                  DCB FOR THE SVCLIB ARE TURNED OFF. *
*                                                                     *
*                             (2). A X'C06' ERROR CODE IS LOADED INTO *
*                                  REG1 AND ABTERM IS BRANCHED TO.    *
*                                                                     *
*                   2.   FETCH ERROR                                  *
*                                                                     *
*                        THE PROCEDURE FOLLOWED IS THE SAME AS THAT   *
*                        DISCUSSED AT 1.B. EXCEPT THAT REGISTER 14    *
*                        WILL POINT TO THE FETCH RETRY ADDRESS.       *
*                                                                     *
*ATTRIBUTES                                                           *
*                   RESIDENT, SUPERVISOR STATE, DISABLED EXCEPT WHEN  *
*                   FETCHING AN SVC ROUTINE                           *
*                                                                     *
*APPLICABILITY                                                        *
*                   OPTION 4 SYSTEM ONLY                              *
*                                                                     *
*SVCS USED                                                            *
*                   1.   SVC 3 -   EXIT - TO RELEASE RESOURCES NO     *
*                                  LONGER NEEDED BY THE TRANSIENT AREA*
*                                  HANDLER OR BY ROUTINES IN THE      *
*                                  TRANSIENT AREAS                    *
*                                                                     *
*                   2.   SVC 4 -   GETMAIN - TO ACQUIRE STORAGE FROM  *
*                                  SUBPOOL 255 FOR SVRBS.             *
*                                                                     *
*RESTRICTIONS                                                         *
*                   NONE                                              *
*                                                                     *
         EJECT
*                        TABLES AND CONTROL BLOCKS                    *
*                                                                     *
*        1.    TCB- TASK CONTROL BLOCK                                *
*                                                                     *
*              A.   TCBRBP -  ADDRESS OF THE CURRENT RB ON THE TCB    *
*                             READY QUEUE                             *
*              B.   TCBFLGS-  TCB DISPATCHABILITY FLAGS. DETERMINE    *
*                             WHETHER OR NOT THE TASK IS              *
*                             DISPATCHABLE                            *
*              C.   TCBDSP -  INDICATES DISPATCHING PRIORITY OF TASK  *
*              D.   TCBGRS -  GENERAL REGISTER SAVE AREA              *
*              E.   TCBTCB -  ADDRESS OF THE NEXT LOWER PRIORITY TCB  *
*                             ON THE TCB QUEUE                        *
*                                                                     *
*        2.    SVRB-SUPERVISOR REQUEST BLOCK FOR TRANSIENT ROUTINES   *
*                                                                     *
*              A.   RBTABNO - DISPLACEMENT VALUE TO THE TACT ENTRY ON *
*                             WHICH SVRB IS QUEUED                    *
*              B.   RBRTLNTH- LENGTH OF SVC ROUTINE                   *
*              C.   RBABOPSW- USED AS A SAVE AREA FOR LOW ORDER 4 BYTES
*                             OF ROUTINE NAME IF THE LOW ORDER IS     *
*                             UNIQUE                                  *
*              D.   RBSIZE -  SIZE OF REQUEST BLOCK IN DOUBLE WORDS   *
*                             INCLUDES EXTENDED SAVE AREA             *
*              E.   RBSTAB -  STATUS AND ATTRIBUTE BITS               *
*                                                                     *
*                             X'C002' = RESIDENT ROUTINE              *
*                                                                     *
*                             X'D002' = TRANSIENT ROUTINE             *
*              F.   RBSVTQN-  QUEUING FIELD FOR REQUESTS ON THE REQUEST
*                             QUEUE(DEFERRED) OR THE USER QUEUE       *
*              G.   RBOPSW -  PSW FOR THE ROUTINE TO GAIN CONTROL WHEN*
*                             THE TRANSIENT AREA HANDLER EXITS        *
*              H.   RBTAWCSA - WAIT COUNT SAVE AREA FOR ROUTINES WHICH*
*                             HAVE BEEN OVERLAID                      *
*              I.   RBSVTTR-  TTR FOR SVC ROUTINE                     *
*              J.   RBWCF  -  WAIT COUNT FIELD                        *
*              K.   RBLINK *  QUEUING FIELD FOR REQUESTS ON THE TCB   *
*                             READY QUEUE                             *
*              L.   RBGRSAVE- GENERAL REGISTER SAVE AREA              *
*              M.   RBSVESA - EXTENDED SAVE AREA                      *
*                                                                     *
*        3.    TACT- TRANSIENT AREA CONTROL TABLE                     *
*                                                                     *
*              A.   IEAQTAQ - TOP OF THE TACT. LIST ORIGIN OF THE     *
*                             REQUEST QUEUE. DEFERRED REQUESTS ARE    *
*                             QUEUED ON THIS FIELD                    *
*              B.   IEAQTAQ+4-A FULL WORD CONSTANT DETERMINED AT      *
*                             SYSTEM GENERATION TIME. INDICATES THE   *
*                             NUMBER OF TRANSIENT AREAS AVAILABLE IN  *
*                             THE SYSTEM.                             *
*                                                                     *
*                             EACH TRANSIENT AREA IS REPRESENTED IN   *
*                             THE TACT BY A 4 WORD ENTRY AND THEY ARE *
*                             ASSEMBLED CONTIGUOUSLY TO IEAQTAQ+4. A  *
*                             DESCRIPTION OF A MODEL ENTRY FOLLOWS    *
*                                                                     *
*              C.   TACTFLGS- REFLECTS THE STATUS OF THE ASSICIATED   *
*                             TRANSIENT AREA                          *
*                             FLAGS:                                  *
*                             (1). X'40'= TRANSIENT AREA IS BEING     *
*                                         LOADED                      *
*                             (2). X'20'= TRANSIENT AREA IS FREE      *
*                                                                     *
*                             (3). X'00'= TRANSIENT AREA IS IN USE    *
*                                                                     *
*              D.   TACTBAD - ADDRESS OF ASSOCIATED TRANSIENT AREA    *
*                                                                     *
*              E.   TACTQAD - LIST ORIGIN OF THE USER QUEUE FOR THE   *
*                             ASSOCIATED TRANSIENT AREA               *
*                                                                     *
*              F.   TACTTTR - TTR OF THE ROUTINE CURRENTLY IN THE     *
*                             TRANSIENT AREA. USED FOR IDENTIFICATION *
*                                                                     *
*              G.   TACTTCB - ADDRESS OF THE FETCH TCB FOR THE        *
*                             ASSOCIATED TRANSIENT AREA               *
*                                                                     *
*              H.   TACTSIZE- INCREMENTAL VALUE TO THE NEXT TACT ENTRY*
*                                                                     *
*              I.   IEAQTAQ1- END OF THE TACT. USED TO CONTROL TACT   *
*                             SCANNING LOOPS                          *
*                                                                     *
*        4.    CDE - CONTENTS DIRECTORY ENTRY
*              A.   CDNAME - NAME OF MODULE DEFINED BY CDE
*              B.   CDEP - ENTRY POINT TO MODULE DEFINED BY CDE
*                                                                     *
         EJECT                                                        *
*ROUTINE NAME                                                         *
*                   IEAQTR00 - SVC SECOND LEVEL INTERRUPT HANDLER     *
*                                                                     *
*FUNCTION           1.   TO CREATE AND INITIALIZE AN SVRB FOR TYPES   *
*                        2,3,OR 4 SVCS.                               *
*                                                                     *
*                   2.   TO SET UP INPUT CONDITIONS AND ENVIRONMENTAL *
*                        REGISTERS FOR THE ROUTINE                    *
*                                                                     *
*                   3.   DETERMINES WHETHER THE REQUESTED ROUTINE IS  *
*                        IN CORE (EITHER A TYPE 2 ROUTINE OR A        *
*                        A TRANSIENT ROUTINE IN THE LPA OR IN A       *
*                        TRANSIENT AREA
*                                                                     *
*                   4.   IF THE REQUESTED ROUTINE IS NOT IN CORE, FIND*
*                        A TRANSIENT AREA INTO WHICH THE ROUTINE CAN  *
*                        BE LOADED. THIS DECISION IS BASED ON WHETHER *
*                        A TRANSIEN AREA IS:                          *
*                                                                     *
*                        A.    FREE - FLAG BYTE IN THE TACT = X'20'   *
*                                                                     *
*                        B.   HAS NO READY USERS ON THE TRANSIENT AREA*
*                             USER QUEUE                              *
*                                                                     *
*                        C.   OR THE CALLER HAS A HIGHER DISPATCHING  *
*                             PRIORITY THAN THE CURRENT USERS OF THE  *
*                             TRANSIENT AREAS.                        *
*                                                                     *
*                   5.   IF A TRANSIENT AREA IS NOT AVAILABLE FOR THE *
*                        ROUTINE, THE CALLER'S REQUEST IS QUEUED ON A *
*                        LIST OF REQUESTS WAITING FOR TRANSIENT AREAS.*
*                        THESE DEFERRED REQUESTS ARE SUBSEQUENTLY     *
*                        SERVICED WHEN A TRANSIENT AREA BECOMES       *
*                        AVAILABLE
*                                                                     *
*ENTRY POINTS       1.   IEAQTR00 - ENTERED BY THE SVC FLIH WHEN IT   *
*                                   DETERMINES THAT THE REQUESTED SVC *
*                                   IS NOT A TYPE 1.                  *
*                                                                     *
*                   2.   TARESTRT - ENTRY POINT FOR DEFERRED REQUESTS *
*                                   WHEN RESTARTED
*                                                                     *
*INPUT              1.   REGISTER 3 - CVT ADDRESS                     *
*                                                                     *
*                   2.   REGISTER 4 - CURRENT TCB ADDRESS             *
*                                                                     *
*                   3.   REGISTER 5 - ADDRES OF CURRENT RB FOR CURRENT*
*                                     TCB                             *
*                   4.   REGISTER 6 - SVC TABLE ENTRY FOR REQUESTED   *
*                                     ROUTINE                         *
*                                                                     *
*                            SVC TABLE FORMAT                         *
*                        ******************************               *
*                        *       *                    *               *
*        TYPE 2 SVC      * X'80' * ENTRY POINT ADDR   *               *
*                        *       *                    *               *
*                        ******************************               *
*                        *       *          *         *               *
*        TYPE 3 AND 4 SVC* B'11'* LENGTH    *   TTR   *               *
*                        *      *           *         *               *
*                        ******************************               *
*                                                                     *
*                   5.   REGISTER 7 - ADDRESS OF SVC INTERRUPT REGISTER
*                                     SAVE AREA (IEASCSAV)            *
*                                                                     *
*                   6.   REGISTER 12 -ENTRY POINT ADDRESS(IEAQTR00)   *
*                                     USED AS BASE VALUE              *
*                                                                     *
*                   7.   THE SVC OLD PSW SAVED AT INTERRUPT TIME MUST *
*                        BE AT LOCATION 32 FOR ENTRY AT IEAQTR00      *
*                                                                     *
*                   8.   THE CURRENT PSW MUST BE DISABLED FOR ALL     *
*                        MASKABLE INTERRUPTS EXCEPT MACHINE CHECK. IT *
*                        MUST BE IN SUPERVISOR MODE AND HAVE THE      *
*                        SUPERVISOR PROTECT KEY OF ZERO.              *
*                                                                     *
*OUTPUT                                                               *
*                   NONE                                              *
*                                                                     *
*EXIT POINTS        1.   TO THE REQUESTED SVC ROUTINE IF IT IS        *
*                        ALREADY IN CORE
*                        A.  REGISTER CONTENTS
*                            REGS 13,15,0,1 - SAME AS WHEN SVC WAS    *
*                            ISSUED
*                            REGS 2,6-12 - UNDEFINED
*                            REG 3 - ADDRESS OF CVT
*                            REG 4 - ADDRESS OF CURRENT TCB
*                            REG 5 - ADDRESS OF CURRENT RB
*                        B.  THE PSW IS DISABLED FOR ALL MASKABLE     *
*                            INTERRUPTS EXCEPT MACHINE CHECK AND IS   *
*                            IN SUPERVISOR MODE WITH PROTECT          *
*                            KEY OF ZERO
*                   2.   TO THE DISPATCHER TO
*                        A.  DISPATCH THE TRANSIENT AREA FETCH TASK   *
*                            TO LOAD THE REQUESTED ROUTINE
*                            1.  THE CALLING TASK IS IN WAIT STATE    *
*                                (RB WAIT) UNTIL THE REQUESTED        *
*                                ROUTINE IS LOADED
*                            2.  THE REGISTERS FOR ENTRY TO THE       *
*                                REQUESTED ROUTINE ARE INITIALIZED    *
*                                IN THE CALLING TCB AS DEFINED ABOVE  *
*                            3.  THE PSW IN THE CURRENT RB ON THE     *
*                                CALLING TASK IS INITIALIZED TO       *
*                                ENTER THE ROUTINE IN THE TRANSIENT   *
*                                AREA BEING LOADED, IS DISABLED FOR   *
*                                ALL MASKABLE INTERRUPTS EXCEPT       *
*                                MACHINE CHECK AND IS INSUPERVISOR    *
*                                MODE WITH PROTECT KEY OF ZERO        *
*                        B.  CAUSE A TASK SWITCH AFTER DEFERRING      *
*                            A REQUEST
*                            1.  THE CALLING TASK (DEFERRED REQUEST)  *
*                                IS IN WAIT STATE (RB WAIT) UNTIL     *
*                                A TRANSIENT AREA BECOMES AVAILABLE   *
*                            2.  THE REGISTERS FOR REENTRY AT         *
*                                'TARESTRT' ARE INITIALIZED IN THE TCB*
*                            3.  THE PSW IN THE CURRENT RB IS         *
*                                INITIALIZED TO REENTER AT 'TARESTRT' *
*                                IS DISABLED FOR ALL MASKABLE         *
*                                INTERRUPTS EXCEPT MACHINE CHECK AND  *
*                                IS IN SUPERVISOR MODE WITH PROTECT   *
*                                KEY OF ZERO
*                                                                     *
*ERRORS                                                               *
*                   NONE                                              *
*                                                                     *
*TABLES AND CONTROL BLOCKS REFERENCED                                 *
*                   SEE DESCRIPTION ABOVE
*                                                                     *
         EJECT
*ROUTINE NAME                                                         *
*                   IEAQTR01 - EXIT SUBROUTINE FOR TYPES 2,3,AND 4    *
*                              SVC ROUTINES                           *
*                                                                     *
*FUNCTION           1.   TO MOVE THE REGISTERS FROM THE EXITING SVRBS *
*                        SAVE AREA TO THE CURRENT TCB                 *
*                                                                     *
*                   2.   TO DEQUEUE THE SVRB OF TYPES 3 AND 4 SVC     *
*                        ROUTINES FROM THE TRANSIENT AREA USER QUEUES *
*                        AS THEY EXIT                                 *
*                                                                     *
*                   3.   AND TO FREE THE TRANSIENT AREA IF THERE ARE  *
*                        NO MORE USERS OF THE ROUTINE CURRENTLY IN THE*
*                        TRANSIENT AREA ON THE USER QUEUE             *
*                                                                     *
*ENTRY POINTS       1.   IEAQTR01 - ENTERED BY EXIT WHEN A TYPE 2,3,  *
*                                   OR 4, SVC ROUTINE IS EXITING      *
*                                                                     *
*                   2.   TAXEXIT  - ENTERED BY THE TRANSIENT AREA XCTL*
*                                   ROUTINE VIA A BALR TO DEQUEUE THE *
*                                   CALLERS SVRB,THAT IS, THE SVRB    *
*                                   UNDER WHICH THE XCTL WAS ISSUED.  *
*                                                                     *
*INPUT              1.   REGISTER 4 - CURRENT TCB ADDRESS             *
*                                                                     *
*                   2.   REGISTER 5 - CURRENT SVRB ADDRESS (SVRB TO BE
*                                     DEQUEUED IF ENTERED AT TAXEXIT) *
*                                                                     *
*                   3.   REGISTER 14- RETURN ADDRESS                  *
*                                                                     *
*                   4.   THE PSW MUST BE DISABLED FOR ALL MASKABLE    *
*                        INTERRUPTS EXCEPT MACHINE CHECK. IT MUST BE  *
*                        IN SUPERVISOR MODE AND HAVE A PROTECT KEY OF *
*                        ZERO                                         *
*                                                                     *
*                   5.  REGISTER 12 - ENTRY POINT ADDRESS = IEAQTR01  *
*                       USED AS A BASE VALUE                          *
*                                                                     *
*OUTPUT                                                               *
*                   NONE                                              *
*                                                                     *
*EXIT POINTS        RETURN TO SVC EXIT OR THE TRANSIENT AREA XCTL     *
*                   ROUTINE VIA A BRANCH ON REGISTER 14               *
*                                                                     *
*ERRORS                                                               *
*              NONE                                                   *
*                                                                     *
*TABLES AND CONTROL BLOCKS REFERENCED                                 *
*                   SEE DESCRIPTION ABOVE
         EJECT
*ROUTINE NAME                                                         *
*                   IEAQTR02 - REFRESH ROUTINE                        *
*                                                                     *
*FUNCTION
*                   1.   TO DETERMINE WHTHER ANY DEFERRED REQUESTS    *
*                        FOR USE OF A TRANSIENT AREA CAN NOW BE       *
*                        DISPATCHED
*                                                                     *
*                   2.   OR WHETHER A HIGHER PRIORITY TASK CAN OVERLAY*
*                        A CURRENT USER OF A TRANSIENT AREA           *
*                                                                     *
*                   3.   THE TRANSIENT AREA CONTROL TABLE(TACT) IS    *
*                        SEARCHED FOR A TRANSIENT AREA THAT IS NOT    *
*                        LOADING. IF NONE IS FOUND, CONTROL RETURNS TO*
*                        THE DISPATCHER                               *
*                                                                     *
*                   4.   IF ONE IS FOUND AND IT HAS NO READY USERS ON *
*                        THE USER QUEUE, DEFERRED REQUESTS ARE MADE   *
*                        READY  THE TASK SWITCH INDICATOR IS SET AND  *
*                        THE DISPATCHER IS GIVEN CONTROL. USERS ARE   *
*                        DETERMINED TO BE READY IF:                   *
*                        A.   THE TCB DISPATCHABILITY FLAGS ARE OFF   *
*                                                                     *
*                        B.   THE TOP RB ON THE TCB READY QUEUE IS    *
*                             ALSO ON THE USER QUEUE OF A TRANSIENT   *
*                             AREA.                                   *
*                                                                     *
*                   5.   IF A TRANSIENT AREA HAS BEEN FOUND BUT HAS   *
*                        READY USERS, THE HIGHEST PRIORITY TASK ON THE*
*                        USERS QUEUE IS FOUND.                        *
*                                                                     *
*                   6.   IF THE ROUTINE REQUIRED BY THIS TASK IS      *
*                        ALREADY IN THE TRANSIENT AREA, THE REFRESH   *
*                        PROCESS CONTINUES AT STEP 3 ABOVE            *
*                                                                     *
*                   7.   IF IT IS NOT, ALL USERS OF THE ROUTINE IN    *
*                        THE TRANSIENT AREA ARE PLACED IN WAIT STATE, *
*                        THE TRANSIENT AREA FETCH TASK IS MADE READY  *
*                        TO FETCH THE ROUTINE FOR THE HIGHEST         *
*                        PRIORITY TASK AND THE TASK SWITCH INDICATOR  *
*                        IS SET
*                                                                     *
*                   8.   IF THERE ARE MORE TRANSIENT AREAS TO REFRESH,*
*                        THE PROCESS CONTINUES AT STEP 3 ABOVE.       *
*                        OTHERWISE, CONTROL RETURNS TO THE DISPATCHER.*
*                                                                     *
*ENTRY POINTS       IEAQTR02 - ENTERED BY EXIT ON ALL EXITS EXCEPT    *
*                              ON EXIT FROM A P.I. EXIT ROUTINE OR    *
*                              AN EXIT FROM AN IRB WHICH IS           *
*                              RESCHEDULED
*                                                                     *
*INPUT              1.   ALL USER REGISTERS MUST HAVE BEEN SAVED IN   *
*                        THE CURRENT TCB                              *
*                                                                     *
*                   2.   THE PSW MUST BE DISABLED FOR ALL MASKABLE    *
*                        INTERRUPTS EXCEPT MACHINE CHECK. IT MUST BE  *
*                        IN SUPERVISOR MODE WITH PROTECT KEY OF ZERO  *
*                                                                     *
*                   3.  REGISTER 12 - ENTRY POINT ADDRESS = IEAQTR02  *
*                       USED AS A BASE VALUE                          *
*                                                                     *
*OUTPUT                                                               *
*                   NONE                                              *
*                                                                     *
*EXIT POINTS        TO THE DISPATCHER
*                                                                     *
*ERRORS                                                               *
*                   NONE                                              *
*                                                                     *
*TABLES AND CONTROL BLOCKS REFERENCED                                 *
*                   SEE DESCRIPTION ABOVE
*                                                                     *
         EJECT
*ROUTINE NAME                                                         *
*                   IEAQTR03 - TRANSIENT AREA XCTL ROUTINE            *
*                                                                     *
*FUNCITON           1.   TO DETERMINE WHETHER THE REQUESTED ROUTINE IS*
*                        IN MAIN STORAGE, EITHER IN THE LINK PACK AREA*
*                        OR IN A TRANSIENT AREA.                      *
*                                                                     *
*                   2.   TO FIND AN AVAILABLE TRANSIENT AREA INTO     *
*                        WHICH THE REQUESTED ROUTINE MAY BE LOADED    *
*                        WHEN IT HAS NOT ALREADY BEEN BROUGHT INTO    *
*                        MAIN STORAGE. A TRANSIENT AREA IS CONSIDERED *
*                        AVAILABLE IF                                 *
*                                                                     *
*                        A.   IT IS FREE - TACTFLGS = X'20'           *
*                                                                     *
*                        B.   IT HAS NO READY USERS ON THE USER QUEUE *
*                                                                     *
*                        C.   THE CURRENT REQUEST REPRESENTS A HIGHER *
*                             DISPATCHING PRIORITY THAN THOSE ON THE  *
*                             USER QUEUE                              *
*                                                                     *
*                   3.   IF A TRANSIENT AREA IS NOT AVAILABLE, THE    *
*                        CURRENT REQUEST IS QUEUED ON THE REQUEST     *
*                        QUEUE(DEFERRED)                              *
*                                                                     *
*                   4.   IF AN AVAILABLE TRANSIENT AREA HAS BEEN FOUND*
*                        THIS ROUTINE SCHEDULES THE TRANSIENT AREA    *
*                        FETCH TASK TO LOAD THE REQUESTED ROUTINE     *
*                                                                     *
*ENTRY POINTS       1.   IEAQTR03 - ENTERED BY THE SVC 7 ROUTINE(XCTL)*
*                                   WHEN IT DETERMINES THAT THE RB    *
*                                   TYPE UNDER WHICH THE XCTL WAS     *
*                                   ISSUED WAS AN SVRB.               *
*                                                                     *
*                   2.   TAXRETRY - ENTERED BY THE DISPATCHER WHEN A  *
*                                   PREVIOUS REQUEST HAD BEEN DEFERRED*
*                                   BECAUSE NO TRANSIENT AREA WAS     *
*                                   AVAILABLE.                        *
*                                                                     *
*INPUT              1.   REGISTER 4- ADDRESS OF CURRENT TCB           *
*                                                                     *
*                   2.   REGISTER 5 -ADDRESS OF CURRENT SVRB          *
*                                                                     *
*                   3.   REGISTER 8 -ADDRESS OF SVRB FOR ROUTINE      *
*                                    ISSUING THE XCTL                 *
*                                                                     *
*                   4.   REGISTER 12-ENTRY POINT ADDRESS = IEAQTR03   *
*                                    USED AS BASE VALUE               *
*                                                                     *
*                   5.   REGISTER 15-ADDRESS OF XCTL PARAMETER LIST   *
*                                                                     *
*                        FORMAT OF PARAMETER LIST                     *
*                                                                     *
*                            *********************                    *
*                            *     *             *                    *
*                            *FLAG * ADDRESS     *                    *
*                            *     *             *                    *
*                            *********************                    *
*                            *                   *                    *
*                            * OTHER  DATA       *                    *
*                            *                   *                    *
*                            *********************                    *
*                                                                     *
*                   FLAG BIT DETERMINES WHAT THE ADDRESS POINTS TO    *
*                                                                     *
*                   1.   BIT 0 = 0 ADDRESS POINTS TO AN 8 BYTE ENTRY  *
*                                  POINT NAME. BLDL REQUIRED BEFORE   *
*                                  FETCHING THE ROUTINE               *
*                                                                     *
*                   2.   BIT 0 = 1 ADDRESS POINTS TO A BLDL ENTRY. NO *
*                                  BLDL REQUIRED                      *
*                                                                     *
*                        FORMAT OF BLDL ENTRY                         *
*                                                                     *
*                            **************************               *
*                            *                        *               *
*                   OFFSET 0 * 8 BYTE NAME FIELD      *               *
*                            *                        *               *
*                            **************************               *
*                            *                        *               *
*                            *   OTHER  DATA          *               *
*                            *                        *               *
*                            **************************               *
*                            *                        *               *
*                   OFFSET 14*         *8 BYTE TTR    *               *
*                            *                        *               *
*                            **************************               *
*                            *                        *               *
*                            *    OTHER  DATA         *               *
*                            *                        *               *
*                            **************************               *
*                            *                        *               *
**                  OFFSET 27*              *2  BYTE  *               *
*                            *              * LENGTH  *               *
*                            **************************               *
*                                                                     *
*                   6.   THE PSW MUST BE DISABLED FOR ALL MASKABLE    *
*                        INTERRUPTS EXCEPT MACHINE CHECK. IT MUST BE  *
*                        IN SUPERVISOR MODE WITH PROTECT KEY OF ZERO. *
*                                                                     *
*OUTPUT                                                               *
*                   NONE                                              *
*                                                                     *
*EXIT POINTS        1.   TO EXIT VIA SVC 3 TO DEQUEUE THE SVRB FOR    *
*                        XCTL AND TO CAUSE THE REQUESTED ROUTINE      *
*                        TO BE DISPATCHED
*                                                                     *
*                   2.   TO THE DISPATCHER VIA A BRANCH ON REGISTER 14*
*                        TO CAUSE A TASK SWITCH WHEN THE CURREN REQUEST
*                        HAS BEEN DEFERRED OR TO DISPATCH THE TRANSIENT
*                        AREA FETCH TASK                              *
*                                                                     *
*                   3.   ALL REGISTERS HAVE BEEN SAVED IN THE CURRENT *
*                        TCB                                          *
*                                                                     *
*ERRORS                                                               *
*                   NONE                                              *
*                                                                     *
*TABLES AND CONTROL BLOCKS REFERENCED                                 *
*                   SEE DESCRIPTION ABOVE
                    EJECT
*ROUTINE NAME                                                         *
*                   IEAQTR04 - BLDL AND FETCH INTERFACE ROUTINE       *
*                                                                     *
*FUNCTION           1.   TO INITIALIZE THE TRANSIENT AREA FETCH TASK  *
*                        TO ISSUE A BLDL FOR THE ENTRY POINT NAME OF  *
*                        THE REQUESTED ROUTINE                        *
*                                                                     *
*                   2.   TO INITIALIZE THE TRANSIENT AREA FETCH TASK  *
*                        TO LOAD THE REQUESTED ROUTINE                *
*                                                                     *
*                   3.   TO FIND AND INITIALIZE OTHER USERS OF THE    *
*                        ROUTINE JUST LOADED                          *
*                                                                     *
*ENTRY POINTS       1.   TABLDL - ENTRY POINT WHEN THE
*                                  TRANSIENT AREA XCTL ROUTINE HAS    *
*                                  DETERMINED THAT A BLDL IS REQUIRED.*
*                                                                     *
*                   2.   IEAQTR04 - ENTRY POINT WHEN ONLY A FETCH OF  *
*                                   THE REQUESTED ROUTINE IS REQUIRED *
*                                                                     *
*                        THE TRANSIENT AREA XCTL ROUTINE SETS THE PSW *
*                        IN THE SVRB FOR THE FETCH TASK TO THE BLDL   *
*                        ENTRY POINT WHEN REQUIRED. IT IS RESET TO THE*
*                        FETCH ENTRY POINT IN THIS ROUTINE            *
*                                                                     *
*INPUT              1.   REGISTER 2 - ADDRESS OF THE TACT ENTRY       *
*                                     ASSOCIATED WITH THE TRANSIENT   *
*                                     AREA TO BE LOADED
*                                                                     *
*                   2.   REGISTER- 5 CURRENT SVRB ADDRESS             *
*                                                                     *
*                   3.   REGISTER- 7 ADDRESS OF PREASSEMBLED IOB AND  *
*                                    CHANNEL PROGRAM ASSOCIATED WITH  *
*                                    THE TRANSIENT AREA TO BE LOADED  *
*                                                                     *
*                   4.   REGISTER- 9 FETCH ENTRY POINT ADDRESS(IEWFTRA
*                        N).
*                                                                     *
*                   5.   REGISTER-10 ADDRESS OF TACT                  *
*                                                                     *
*                   6.   REGISTER 11 - ADDRESS OF TCB OF CALLER OF    *
*                                      ROUTINE BEING LOADED
*                                                                     *
*                   7.   REGISTER 12 - BASE VALUE = IEAQTR00          *
*                                                                     *
*                   8.   REGISTER 13 - ADDRESS OF SVRB FOR CALLER OF  *
*                                      ROUTINE BEING LOADED           *
*                                                                     *
*                   9.   THE PSW MUST BE DISABLED FOR ALL MASKABLE    *
*                        INTERRUPTS EXCEPT MACHINE CHECK. IT MUST BE  *
*                        IN SUPERVISOR MODE WITH PROTECT KEY OF ZERO. *
*                        THE PSW IS ENABLED FOR ALL INTERRUPTS ACROSS *
*                        BLDL AND FETCH.                              *
*                                                                     *
*                                                                     *
*OUTPUT                                                               *
*                   NONE                                              *
*                                                                     *
*EXIT POINTS        1.   TO THE DISPATCHER VIA A BRANCH ON REGISTER 7 *
*                        TO DISPATCH THE ROUTINE JUST LOADED          *
*                                                                     *
*                   2.   TO ABTERM VIA A BALR TO TERMINATE THE        *
*                        REQUESTOR'S TASK IF BLDL WAS UNABLE TO FIND  *
*                        THE REQUESTED NAME                           *
*                                                                     *
*                   1. TO ABTERM VIA A BALR WITH A X'C06' IF A        *
*                      PERMANENT IO ERROR IS ENCOUNTERED BY BLDL      *
*                      OR FETCH.                                      *
*                                                                     *
*                                                                     *
*ERRORS                                                               *
*                   SEE DISCUSSION ABOVE                              *
*                                                                     *
*TABLES AND CONTROL BLOCKS REFERENCED                                 *
*                   SEE DESCRIPTION ABOVE
*                                                                     *
***********************************************************************
         EJECT
         ENTRY IEAQTR01
         ENTRY IEAQTR02
         ENTRY IEAQTR03
         ENTRY IEASVRB
         ENTRY IEAQTR04
         ENTRY TAUSERCT
         ENTRY IEAQSVCQ
         ENTRY TBNOTFND                                            DAR
         EXTRN IEAQTAQ
         AIF   (&B(1)).MVT0100                                    20021
         EXTRN IEATCBP
.MVT0100 ANOP                                                     20021
         EXTRN IEAHEAD
         EXTRN IEA0DS
         EXTRN SVCDCB
         EXTRN IEA0AB00
         EXTRN IECPBLDL
         EXTRN IEAQTAQ1
         EXTRN IEA0DS02
         EXTRN IEAQLPAQ
         AIF   (NOT &B(1)).MVT0200                                20021
         USING IEAQFX00,0                                          MP65
.MVT0200 ANOP                                                     20021
***********************************************************************
*        SVC SECOND LEVEL INTERRUPT HANDLER
***********************************************************************
         SPACE
*           INPUT
*              RBASE  -12- ENTRY POINT OF TAH = IEAQTR00
*              RINPUT - 6-SVC TABLE ENTRY FOR REQUESTED ROUTINE
*        RWORK2 - 7-ADDR OF LOW CORE REG SAVW AREA(IEASCSAV)
*              RCVT   - 3- CVT ADDR
*              RTCB   - 4- CURRENT TCB ADDR
*              RRB    - 5- ADDR OF CURRENT RB FOR CURRENT TCB
*              CONDITION CODE OF HEX '00' OR '10' INDICATES A
*                  NON-RESIDENT SVC IS REQUESTED
         SPACE 2
         USING *,RBASE
TAH      DS    0H
         BAL   RBLDRET,BLDSVRB .   CREATE AND INITIALIZE SVRB
         OI    TCBTSFLG(RTCB),TCBATT .       SET BIT TO PREVENT   20021
*                                    TERMINAL ATTENTION EXITS     20021
*                                    WHILE SVC RTN IS RUNNING.    20021
*
         AL    RINPUT,TYPETEST .   IF BITS 0 AND 1 OF INPUT ARE SET
         BC    1,TRANSVC .         ROUTINE NOT TYPE 2         BJ A46241
*        ROUTINE IS RESIDENT-ENTER ROUTINE
TAHENTA1 MVI   RBSTAB(RSVRB),X'C0' .    FLAG SVRB RESIDENT
TAHENT1  LM    0,1,RBGRSAVE(RSVRB) .    RELOAD PARAMETER REGS
         LR    RRB,RSVRB
         LM    13,15,RBGRSAVE+REG13(RSVRB)
         BALR  14,RINPUT .         SET RETURN REG AND ENTER ROUTINE
TAHEXIT  SVC   EXIT
         SPACE 2
         EJECT
***********************************************************************
*        TRANSIENT SVC ROUTINE REQUESTED
***********************************************************************
         SPACE 2
*        EXTRACT DATA FROM INPUT AND INITIALIZE SVRB
         SPACE
TRANSVC  LH    RWORK3,SVCID(RRB) . GET SVCID                  BJ M2564
         CVD   RWORK3,SVCNAME . CONVERT SVC NUMBER TO DECIMAL BJ M2564
         UNPK  SVCLPANM+4(4),SVCNAME+5(3) .UNPACK TO 4 DIGITS BJ M2564
         LM    R0,R1,SVCLPANM . SVCNAME IN REGISTERS          BJ M2564
         LR    RWORK2,RINPUT                                  BJ M2564
         SRL   RWORK2,18 .         GET LENGTH OF REQUESTED ROUTINE
         STH   RWORK2,RBRTLNTH(RSVRB) . STORE IN SVRB
         N     RINPUT,TTRMASK .    GET TTR OF REQUESTED ROUTINE
         ST    RINPUT,RBSVTTRW(RSVRB) . STORE IN SVRB
         ST    R1,RBABOPSW(RSVRB) .STORE NAME OF SVC ROUTINE IN SVRB
         SPACE 2
*        CHECK IF ROUTINE IS IN CORE AND IF A TAB IS FREE
*        OR HAS NO READY USER OR -CAN BE OVERLAID BY THE CALLER
         SPACE
TARESTRT L     RTAQP,TAQPTR
         L     RTACTENT,4(RTAQP) . LOAD NUMBER OF TACT ENTRIES
         LA    RTACT,8(RTAQP) .    LOAD ADDR OF TACT
         SPACE
TAH1     TM    TACTFLGS(RTACT),LOADMSK  IF TAB IS BEING LOADED
         BO    TAH2 .                      CHECK
         C     RTTR,TACTTTRW(RTACT) .   COMPARE TTRS TO SEE IF
*            * RTTR=RINPUT * R6 *      REQUESTED ROUTINE IS IN CORE
         BE    TAHENTER .               ENTER ROUTINE IF EQUAL
         SPACE
         SPACE
TAH2     LA    RTACT,TACTSIZE(RTACT) .  INCREMENT TO NEXT TACT ENTRY
         BCT   RTACTENT,TAH1 .          BRANCH IF MORE ENTRIES
         SPACE
         L     RTACT1,TACTNEXT .       NEXT TACT ENTRY ON QUEUE
         BAL   RCOMRET3,TATABCK
         L     RCVT,16 .           RELOAD CVT ADDRESS
         L     RTAQP,TAQPTR .      AND TAH QUEUES POINTERS
         LTR   RTACT,RTACT
         BC    7,TAHFREE .             TAB AVILABLE USE TAB FOUND
         SPACE 2
*        ALL TRANSIENT AREAS ARE IN USE - QUEUE CURRENT REQUEST
*                ON REQUEST QUEUE
         SPACE
         MVC   RBSVTQN+1(3,RSVRB),1(RTAQP)  MOVE ADDR OF LAST ENTRY ON
*                                           REQUEST QUEUE TO SVRB
         ST    RSVRB,0(RTAQP) .         STORE SVRB ADDR IN QUEUE PTR
         MVI   RBWCF(RSVRB),X'FF' .     PUT RB IN WAIT
         MVC   RBOPSW(8,RSVRB),TAHPSWST MOVE RESUME PSW TO RB
         SPACE 2
*        SET UP TASK SWITCH AND ENTER DISPATCHER
         SPACE
         STM   R0,R15,TCBGRS(RTCB) .         SAVE REGS IN TCB
         L     R10,CVTTCBP(RCVT)
         SR    RFRETAB,RFRETAB
         ST    RFRETAB,0(R10) .    SET NEW TO ZERO
         L     R10,TDSPTCH
         BR    R10 .                    BRANCH TO DISPATCHER
         SPACE 2
*        ENTER ROUTINE WHICH IS IN TRANSIENT AREA
         SPACE
TAHENTER MVI   TACTFLGS(RTACT),X'00' .  INDICATE TAB IN USE
         BAL   RRETURN,TAHNQ .     QUEUE SVRB ON USER QUEUE
         L     RWORK1,0(RTACT) .   LOAD ADDRESS OF TRANSIENT AREA
         SR    RTACT,RTAQP .    GET DISPLACEMENT OF TACT ENTRY
         STH   RTACT,RBTABNO(RSVRB) .   STORE IN SVRB
         B     TAHENT1 .           RELOAD REGS AND ENTER ROUTINE
         SPACE 2
*        INITIALIZE CALLING TASK TO ENTER ROUTINE AND POST TA FETCH
*           TASK TO LOAD ROUTINE
*
TAHFREE  BAL   RCOMRET,TAHSETWT .      OVERLAY CURRENT USER OF TAB
         BAL   RCOMRET,TAHTACT1 .      INCREMENT ADDR OF TACT ENTRY5575
         SPACE
TAHFENT  MVI   RBWCF(RSVRB),X'FF'  PUT SVRB ON CALLING TASK IN WAIT
         BAL   RRETURN,TAHNQ .     QUEUE SVRB ON USER QUEUE
         LM    R0,R1,RBGRSAVE(RSVRB) .  LOAD INPUT REGISTERS
         LR    RRB,RSVRB .                      FOR SVC ROUTINE
         LM    R13,R15,RBGRSAVE+REG13(RSVRB)
         LA    R14,TAHEXIT
         STM   R0,R5,TCBGRS(RTCB) .          STORE IN CALLING TASK TO
         STM   R13,R15,TCBGRS+REG13(RTCB) .     BE PASSED TO SVC ROUT
         MVC   RBOPSW(5,RRB),PSW .      MOVE DISABLED PSW TO PSW
         MVC   RBOPSW+5(3,RRB),TACTBAD(RTACT)   MOVE TAB ADDR AS RH-PSW
         LR    RWORK1,RTACT
         SR    RWORK1,RTAQP . GET DISPLACEMENT OF TACT ENTRY
         STH   RWORK1,RBTABNO(RRB) .           STORE IN SVRB
         L     RWORK2,TACTTCB(RTACT)  LOAD @ OF FETCH TCB FOR TAB  MO17
         L     RWORK1,0(RWORK2) .    LOAD @ OF RB ON FETCH TASK    MO17
         MVC   EXSAV(8,RWORK1),SVCLPANM STORE NAME IN SAVE AREA    MO17
TAHFENT1 L     RWORK2,TACTTCB(RTACT)   LOAD ADDR OF FETCH TCB FOR TAB
         L     RWORK1,0(RCVT) .    INDICATE TASK SWITCH TO FETCH TASK
         ST    RWORK2,0(RWORK1)
         L     RWORK1,0(RWORK2) .  LOAD ADDR OF RB ON FETCH TASK
         MVI   RBWCF(RWORK1),X'00' MAKE FETCH TASK READY
         MVI   TACTFLGS(RTACT),LOADMSK .     INDICATE TAB LOADING
         AIF   (NOT &B(2)).TSO11                                  M4271
         BAL   R10,NOSWAP .            SET TSO TASK NOT SWAPABLE  M4271
.TSO11   ANOP                                                     M4271
         ST    RTCB,TCBGRS+REG11(RWORK2)  PASS TCB ADDR TO FETCH TASK
         ST    RRB,TCBGRS+REG13(RWORK2) . PASS SVRB ADDR
         L     R10,TDSPTCH .       BRANCH TO DISPATCHER TO ENTER
         BR    R10 .                 FETCH TASK
         EJECT
***********************************************************************
*        EXIT SUBROUTINE FOR TYPE 2,3 AND 4 SVC ROUTINES
***********************************************************************
         SPACE
*        RRETURN = RETURN ADDRESS
*        RTCB = ADDRESS OF CURRENT TCB
*        RRB = ADDRESS OF CURRENT RB(IN THIS CASE AN SVRB)
*        RBASE = BASE OF PROGRAM
         SPACE
         USING *,RBASE
IEAQTR01 L     RBASE,TAHADR
         USING TAH,RBASE
         MVC   TCBGRS+REG2(52,RTCB),RBGRSAVE+REG2(RRB)   SAVE REGS 2-14
         STM   R0,R1,TCBGRS(RTCB) .    SAVE REGS 15,0, AND 1
         ST    R15,TCBGRS+REG15(RTCB)
         TM    RBSTAB(RRB),MRBXSNT .   IF RB IS NOT TRANSIENT
         BCR   14,RRETURN .              RETURN TO EXIT
         SPACE 2
*        DETERMINE TACT ENTRY USED BY EXITING ROUTINE
         SPACE
TAXEXIT  L     RTAQP,TAQPTR .     LOAD ADDR OF TAH CONTROL TABLES
         LH    RWORK1,RBTABNO(RRB) LOAD DISP OF TACT ENTRY FROM RB
         LA    RTACT,0(RWORK1,RTAQP) . LOAD ADDR OF TACT ENTRY
         SPACE 2
*        SEARCH USERS QUEUE FOR ANOTHER USER OF EXITING ROUTINE
         SPACE
         SR    RUSER,RUSER
         LTR   RWORK1,RWORK1      RB ON DEFERED REQUEST QUEUE? @SA70927
         BNZ   NOTUSERQ            NO                          @SA70927
         LR    RWORK1,RTACT        LOAD THE ADDRESS OF THE     @SA70927
*                                  DEFERRED REQUEST QUEUE      @SA70927
         B     TAHEXIT1            AND GO SEARCH IT            @SA70927
NOTUSERQ EQU   *                                               @SA70927
         LA    RUSERQ,TACTQADW(RTACT) . LOAD ADDRESS OF USER QUEUE PTR
TAHEXIT1 L     RSVRB,0(RUSERQ) .   LOAD ADDR OF SVRB ON QUEUE
         LTR   RSVRB,RSVRB .      IF SVRB ADDR IS ZERO
         BZ    TAHEXIT4 .           SEARCH IS COMPLETE
*
*
         CR    RSVRB,RRB .        IF SVRB IS EXITING RB
         BE    TAHEXIT3 .           DEQUEUE SVRB
*
         LR    RUSER,RSVRB
*
TAHEXIT2 LA    RUSERQ,RBSVTQN(RSVRB) LOAD ADDRESS OF NEXT ON QUEUE
         B     TAHEXIT1
*        DEQUEUE EXITING SVRB FROM USER QUEUE
TAHEXIT3 MVC   1(3,RUSERQ),RBSVTQN+1(RSVRB) MOVE PTR TO NXT ON QUEUE TO
         XC    0(2,RSVRB),0(RSVRB) .   ZERO  TA Q PTR         BL  M2155
         MVI   RBSTAB(RSVRB),X'C0' .   SET RB AS RESIDENT     BL  M2155
         L     RWORK1,TAUSERCT .   DECREMNENT COUNT OF TRANSIENT
         BCTR  RWORK1,0 .          AREA USERS
         ST    RWORK1,TAUSERCT
         B     TAHEXIT2 .                    PREVIOUS SVRB
*
TAHEXIT4 LTR   RUSER,RUSER .       IF THERE ARE OTHER USERS OF ROUTINE
         BCR   7,RRETURN .         RETURN TO EXIT
         MVI   TACTFLGS(RTACT),TABFREE  INDICATE TAB IS FREE
         BR    RRETURN
         EJECT
***********************************************************************
*        REFRESH ROUTINE - ENTERED BY DISPATCHER WHEN ALL TASKS IN
*              SYSTEM ARE NOT READY
***********************************************************************
         SPACE
*        ALL USER REGISTERS ARE SAVED IN THE TCB'S
*        REGISTER 12 (RBASE) CONTAINS THE ADDRESS OF IEAQTR02
         SPACE 2
         USING *,RBASE
IEAQTR02 L     RBASE,TAHADR
         USING TAH,RBASE
         SR    RINDDEQ,RINDDEQ .       INITILIZE DEQUEUE INDICATOR
         C     RINDDEQ,TAUSERCT .  ANY USERS OF TRANSIENT AREAS
         BC    8,TAHBRDIS .            NO TO DISPATCHER
         L     RTAQP,TAQPTR .     POINTER TO TAH'S TABLES
         L     RTACTENT,4(RTAQP) . NUMBER OF TACT ENTRIES
         LA    RTACT,8(RTAQP) .    ADDR OF TACT TABLE
*
*        FIND ALL TABS THAT CAN BE REFRESHED AND SETUP TA FETCH
*        TASKS TO REFRESH ROUTINES
*
TAHDISP1 TM    TACTFLGS(RTACT),LOADMSK  IS THE TAB LOADING
         BO    TAHDISP2 .               YES CHECK FOR MORE TACT ENRRIES
         LA    RUSECK,TAUSECK3 .       ALL USERS TO BE CHECKED
         BAL   RCOMRET1,TAUSERCK .      FIND HIGHES PRIORITY USER
*
         LTR   RTCB2,RTCB2 .            WAS A USER FOUND
         BZ    TAINDEQ .           NO-INDICATE REQUESTS CAN BE DEQUED
         AIF   (NOT &B(1)).MVT0300                                20021
         BM    TAHDISP2 .          SKIP IF TAB IN USE ON OTHER CPU MP65
.MVT0300 ANOP                                                     20021
         L     RRB,TCBRBP(RTCB2) . LOAD ADDR OF SVRB OF ROUT TO REFRESH
         CLC   TACTTTR(3,RTACT),RBSVTTR(RRB) IS USER ROUTINE IN TAB
         BE    TAHDISP2 .                         YES CHECK MORE TACTS
         BAL   RCOMRET,TAHSETWT .           NO SET ALL USER'S IN WAIT
*
         L     RCVT,16 .           LOAD CVT ADDR FOR TASK SWITCH RTN
         L     RWORK2,TACTTCB(RTACT) .      ADDR OF FETCH TCB FOR TAB
         L     RWORK1,0(RWORK2) .            ADDR OF RB ON FETCH TASK
         MVC    EXSAV(8,RWORK1),ZEROUT .    BLANK OUT NAME         MO17
         ST    RTCB2,TCBGRS+REG11(RWORK2) .  PASS TCB ADDR TO FETCH TSK
         ST    RRB,TCBGRS+REG13(RWORK2) .    PASS SVRB TO FETCH TASK
         MVI   RBWCF(RWORK1),X'00' .         MAKE FETCH TASK READY
         AIF   ('&SYS' NE 'MP65').NOMP1                          A35875
         SR    R11,R11 .                                         A35875
         ST    R11,X'2C0' .                                      A35875
.NOMP1   ANOP                                                    A35875
         L     R11,TASKSWIH .                ADDR OF TASK SWITCH RTN
         LR    R10,RWORK2
         BALR  R14,R11 .                     TASK SWITCH ROUTINE
         MVI   TACTFLGS(RTACT),LOADMSK .     INDICATE TAB LOADING
*
         AIF   (NOT &B(2)).TSO12                                  M4271
         LR    R4,RTCB2 .              LOAD THE TCB FOR TSO CHECK M4669
         BAL   R10,NOSWAP .            SET TSO TASK NOT SWAPABLE  M4271
.TSO12   ANOP                                                     M4271
TAHDISP2 LA    RTACT,TACTSIZE(RTACT) .  INCREMENT TO NEXT TACT
         BCT   RTACTENT,TAHDISP1 .      MORE ENTRIES BRANCH BACK
*
         LTR   RINDDEQ,RINDDEQ .        CAN SVRB'S ON REQ Q BE DEQUEUED
         BZ    TAHBRDIS .          NO TO DISPATCHER                102
*
*        MAKE DEFERRED REQUESTS READY TO RUN
*
         SR    R0,R0
         L     RTAQP,TAQPTR
         LA    R14,TAHDISP3 .           RETURN ADDR FOR TASK SWITCH RTN
         L     RWORK2,0(RTAQP) .        ZERO
         ST    R0,0(RTAQP) .           CLEAR REQUEST QUEUE PNTR
TAHDISP3 LTR   R10,RWORK2 .             MORE SVRBS
         BZ    TAHBRDIS .              NO TO DISPATCHER
         MVI   RBWCF(RWORK2),X'00' .    ZERO WAIT COUNT
         L     RWORK2,RBSVTQN(R10) .    ZERO PTR
         ST    R0,RBSVTQN(R10) .       IN CURRENT SVRB
TAHDISP4 TM    RBSTAB+1(R10),RBTCBNXT . GET ITS
         L     R10,RBLINKW(R10) .               TCB
         BZ    TAHDISP4 .               TO TASK SWITCH RTN
         AIF   ('&SYS' NE 'MP65').NOMP2                          A35875
         SR    R11,R11 .                                         A35875
         ST    R11,X'2C0' .                                      A35875
.NOMP2   ANOP                                                    A35875
         L     R11,TASKSWIH .    TASK SWITCH ROUTINE ADDR          104
         BR    R11 .                    NEXT SVRB  VIA TASK SWITCH RTN
         SPACE
TAINDEQ  BAL   RINDDEQ,TAHDISP2 .  INDICATE DEFERRED REQUESTS CAN RUN
         SPACE
TAHBRDIS L     RRETURN,TDSPTCH .       LOAD DISPATCHER ADDR
         BR    RRETURN
         SPACE 5
         EJECT
***********************************************************************
*        TRANSIENT AREA XCTL ROUTINE
***********************************************************************
         SPACE
*            INPUT
*              RCVT - ADDRESS OF CVT
*              RTCB - ADDRESS OF CURRENT TCB
*              RRB  - ADDRESS OF CURRENT SVRB (SVRB FOR XCTL)
*              RCSVRB ADDRESS OF SVRB FOR ROUTINE GIVING XCTL
*              RBASE- ENTRY POINT ADDR
*              R15  - ADDR OF XCTL PARAMETER LIST
         SPACE 2
         USING *,RBASE
IEAQTR03 L     RBASE,TAHADR
TAXCTL   EQU   IEAQTR03
         USING TAH,RBASE
         SPACE
         TM    RBSTAB(RCSVRB),X'10' .  IS CALLER A TRANSIENT ROUTINE
         BZ    TASEARCH .              NO CHECK IF REQUESTED RTN IS
*                                      IN THE LPA
         LR    RWORK2,RRB .            SAVE REQ SVRB
         LR    RRB,RCSVRB
         BAL   RRETURN,TAXEXIT .       YES REMOVE CALLER FROM USER
         LR    RRB,RWORK2 .            RELOAD ORIGNAL SVRB
*                                      QUEUE OF TAB
*        CHECK IF ROUTINE IS IN LPA
*
TASEARCH L     RPARM1,0(R15) .     LOAD FIRST WORD OF XCTL PARM LIST
         MVC   SVCNAME(8),0(RPARM1) .    MOVE NAME TO FULL WORD BOUNDRY
         LM    R0,R1,SVCNAME .         LOAD NAME OF REQUESTED ROUTINE
         BAL   R14,CDESCAN
         B     TAXTEST . NO SEARCH TABS FOR RTN               BJ M2500
         SPACE 2
*        ROUTINES IS IN LPA SETUP ENTRY TO ROUTINE
*
         MVI   RBSTAB(RCSVRB),X'C0' .  YES FLAG CALLERS SVRB RESIDENT
         XC    RBTABNO(8,RCSVRB),RBTABNO(RCSVRB)
*                                      CLEAR FIRST DOUBLE WORD AND
*                                      TTR FIELD OF CALLERS SVRB
         XC    RBSVTTR(3,RCSVRB),RBSVTTR(RCSVRB)
         L     R15,CDEP(R15) .         ENTRY POINT FROM CDE
TAHEXIT5 LA    R15,0(R15) .            CLEAR HIGH ORDER BYTE
         ST    R15,RBOPSW+4(RCSVRB) .  SET UP PSW AND LINKAGE REGS TO
         LM    R0,R1,RBGRSAVE(RRB) .   ENTER REQUESTED RTN WHEN
         SVC   EXIT .                  REDISPATCHED AND EXIT FROM XCTL
         SPACE 2
*        ROUTINE IS NOT IN LPA-BRING ROUTINE INTO TA
TAXTEST  TM    0(RPARM1),X'80' . IS PARM LIST PDS ENTRY       BJ M2500
         BNO   TAXRETRY . NO SKIP SPECIAL PROCESSING          BJ M2500
         MVC   EXSAV(3,RRB),DETTR(RPARM1) . MOVE TTR ADDR     BJ M2500
         MVC   EXSAV+4(2,RRB),DELENGTH(RPARM1) . MOVE LENGTH  BJ M2500
*
TAXRETRY STM   R0,R15,TCBGRS(RTCB) .   SAVE REGS IN CASE RETRY NEEDED
         SR    RWORK2,RWORK2
         ST    RWORK2,RBABOPSW(RCSVRB) .CLEAR NAME FIELD IN SVRB
         MVI   RBSTAB(RCSVRB),X'D0' .  FLAG SVRB TRANSIENT
TAXRTRY1 ST    R1,RBABOPSW(RCSVRB) .    STORE RIGHT HALF OF NAME IN
*                                       SVRB NAME FIELD
         L     RTAQP,TAQPTR
         L     RWORK2,4(RTAQP) .       USE NUMBER OF TACT ENTRIES
*                                      FOR LOOP CONTROL
         LA    RTAQP,TACTDISP(RTAQP) .  GET POINTER TO FIRST TACT
TAXLOOP  TM    TACTFLGS(RTAQP),LOADMSK  IS TAB LOADING
         BO    TAXLOOP1 .              YES
         L     RTACT,TACTTCB(RTAQP) .  LOAD ADDR OF TA FETCH TCB
*                                      FOR TAB
         L     RTACT,TCBRBP(RTACT) LOAD ADDR OF TA FETCH SVRB
         CLC   RBABOPSW(4,RTACT),EXSAV+R4(RTACT) . IS NAME IN    A37045
*                             EXTENDED SAVE AREA SAVME AS SVRB   A37045
         BNE   TAXLOOP1 .   NO, NAME IN EXTEND SAVE AREA INVALID A37045
         CLC   EXSAV(8,RTACT),TCBGRS(RTCB) REQUESTED NAME=NAME  A24425
*                                      IN TAB                   A24425
         BE    TABFOUND .     YES OVERLAY TAB                     19472
TAXLOOP1 LA    RTAQP,TACTSIZE(RTAQP) .  NO INCREMENT TO NEXT TACT
         BCT   RWORK2,TAXLOOP .        AND RETURN IF MORE ENTRIES
         SPACE 2
*        FIND A TAB TO USE FOR REQUESTED ROUTINE
*
SKIPSRCH L     RTACT1,TACTNEXT .       YES SET UP TO FIND AVAILABLE
*                                      TAB
         BAL   RCOMRET3,TATABCK .      FIND TAB WHICH IS FREE
         LTR   RTACT,RTACT .           IS A TAB AVAILABLE
         BP    TOVERLAY .              YES OVERLAY ALL USERS QUEUED
*                                      FOR THIS ROUTINE
         SPACE 2
*        NO TAB AVAIAILABLE - DEFER REQUEST FOR LATER RETRY
         SPACE
         L     RRB,TCBRBP(RTCB) .      RELOAD SVRB ADDRESS
         L     RTAQP,TAQPTR .          NO QUEUE CURRENT CALLER ON
         MVC   RBSVTQN+1(3,RRB),1(RTAQP) REQUEST QUEUE AND SET UP PSW
         ST    RRB,0(RTAQP) .          TO REENTER ABOVE WHEN
         MVI   RBWCF(RRB),X'01' .      REDISPATCHED
         MVC   RBOPSW(8,RRB),RTRYPSW
         L     R14,X'10'                LOAD CVT POINTER
         L     R14,0(0,R14) .          ADDR OF NEW/OLD
         SR    R0,R0
         ST    R0,0(0,R14) .           SET NEW TO ZERO
         AIF   ('&SYS' NE 'MP65').NOMP3
         LR    R10,RTCB .         SET R10 WITH TCB FOR TASK SWT. A35875
         L     R5,TASKSWIH .      GET  ADDRESS OF TASK SWITCH    A35875
         BALR  R14,R5 .            GO TO TASK SWITCH             A35875
.NOMP3   ANOP
         L     R14,TDSPTCH
         BR    R14 .                   EXIT TO DISPATCHER
         SPACE 2
*        ROUTINE IS IN TAB--ENTER ROUTINE
*
TABFOUND MVC   RBSVTTR(3,RCSVRB),TACTTTR(RTAQP)
*                            MOVE TTR AND LENGTH FIELDS OF
*                            REQUESTED RTN FROM LAST USERS REQUEST
*                            BLOCK TO CURRENT CALLERS SVRB
         MVC   RBRTLNTH(2,RCSVRB),RBRTLNTH(RTACT)
         L     R15,TAUSERCT
         LA    R15,1(R15) .            INCREMENT COUNT OF TAB USERS
         ST    R15,TAUSERCT
         MVC   RBSVTQN+1(3,RCSVRB),TACTQAD(RTAQP) QUEUE CALLER ON TAB'S
         ST    RCSVRB,TACTQADW(RTAQP) .    USER QUEUE
         MVI   TACTFLGS(RTAQP),X'00' . FLAG TAB IN USE
         L     R15,0(RTAQP) .          TAB ADDRESS USED IN PSW TO
*                                      DISPATCH REQUESTED ROUTINE
         S     RTAQP,TAQPTR .      STORE TACT ENTRY DISPLACEMENT IN
         STH   RTAQP,RBTABNO(RCSVRB)  SVRB
         B     TAHEXIT5 .              ENTER REQUESTED RTN
         SPACE 2
*        INITIALIZE TO USE TAB FOUND FOR REQUESTED ROUTINE
*
TOVERLAY BAL   RCOMRET,TAHSETWT .      PLACE ALL USERS OF REQUESTED
*                                      RTN IN WAIT STATE
         BAL   RCOMRET,TAHTACT1 .      INCREMENT ADDR OF TACT ENTRY5575
         LR    RPARM,RPARM1
         L     RSVRB,TCBRBP(RTCB) .     RELOAD XCTL'S SVRB ADDR
         L     RRB,RBLINKW(RSVRB) .    RELOAD CALLERS SVRB ADDR
*
         MVI   RBWCF(RRB),X'01' .  SET WAIT COUNT IN CALLERS SVRB
         L     R15,TACTBADW(RTACT) .   LOAD EP ADDR FROM TACT
         LA    R15,0(R15) .        AND STORA IN CALLER'S PSW TO
         ST    R15,RBOPSW+4(RRB) . CAUSE REQUESTED ROUT TO BE ENTERD
         L     RWORK1,TACTTCB(RTACT) .  LOAD ADDR OF TA FETCH TCB  MO17
         L     RWORK1,TCBRBP(RWORK1) .  LOAD ADDR OF TA FETCH SVRB MO17
         MVC    EXSAV(8,RWORK1),TCBGRS(RTCB) PUT NAME IN SAVE     19472
*                                            AREA                 19472
         MVC   RBOPSW(8,RSVRB),EXITPSW  SET PSW IN XCTL'S SVRB TO POINT
*                                         TO AN SVC 3 SO THAT EXIT WILL
*                                         BE ENTERED WHEN TASK IS
*                                         REDISPATCHED
         MVI   RBSTAB(RRB),X'D0' .       SET RB TRANSIENT    BL   M2155
         MVC   RBSVTQN+1(3,RRB),TACTQAD(RTACT)  QUE CALLER ON USER Q
         ST    RRB,TACTQADW(RTACT)
         L     RWORK1,TAUSERCT
         LA    RWORK1,1(RWORK1) .       INCREMENT COUNT OF USERS
         ST    RWORK1,TAUSERCT
         LTR   RPARM,RPARM .       IF ADDR OF ENTRY POINT NAME GIVEN
         BP    TAXCTL2  .            (BIT 0=0) BRANCH TO ISSUE BLDL
         SPACE
         MVC   RBSVTTR(3,RRB),EXSAV(RSVRB) . MOVE TTR &LTH    BJ M2500
         MVC   RBRTLNTH(2,RRB),EXSAV+4(RSVRB) . FROM SAVE ARA BJ M2500
TAXCTL1  LR    RTAQP,RTACT .       STORE TACT ENTRY DISP IN SVRB
         S     RTAQP,TAQPTR
         STH   RTAQP,RBTABNO(RRB)
         MVC   TCBGRS(60,RTCB),RBGRSAVE(RSVRB)  MOVE INPUT REG TO TCB
         ST    R15,TCBGRS+REG15(RTCB)
         L     RCVT,16 .           RELOAD CVT ADDR
         B     TAHFENT1 .          BRANCH TO POST FETCH TASK
         SPACE 2
*        ENTRY POINT NAME PASSED TO XCTL, SET UP SPECIAL ENTRY TO
*           FETCH TASK TO HAVE IT ISSUE A BLDL BEFORE FETCHING
         SPACE
TAXCTL2  L     RWORK2,TACTTCB(RTACT)
         SPACE
         L     RWORK1,0(RWORK2) .  LOAD SVRB ADDR
         MVC   RBOPSW(8,RWORK1),BLDLPSW   SET PSW TO ENTER FETCH TASK
         XC    TACTTTR(3,RTACT),TACTTTR(RTACT)  ZERO TTR FIELD SO
*                                    TAHABEND WILL WORK IF TASK ABENDS
         B     TAXCTL1
         EJECT
***********************************************************************
*        COMMON SUBROUTINES
***********************************************************************
         SPACE 5
***********************************************************************
*        CREATE AND INITIALIZE AN SVRB
***********************************************************************
         SPACE
*        THE CHANGE FOR TSO WHERE THE SVC GETMAIN IS CHANGED     A29117
*             TO A BRANCH TYPE GETMAIN FIXES APAR 29117          A29117
         SPACE
BLDSVRB  MVC   RBOPSW(8,RRB),SVCOPSW .  SAVE SVC OLD PSW IN CURRENT RB
         LM    R0,R1,GETPARAM .    INIT PARM REG FOR GETMAIN      20021
         L     R15,ARMBRNCH .      GET BRANCH ENTRY FOR GETMAIN   20021
         BALR  R14,R15 .           GO GETMAIN                     20021
         LR    RSVRB,R1 .          GET ADDRESS FROM GETMAIN       20021
         MVC   RBGRSAVE(64,RSVRB),0(RWORK2) .         MOVE SVRB   20021
         SPACE
         SPACE
*        INITIALIZE SVRB TO BE USED
         SPACE
         XC    0(32,RSVRB),0(RSVRB) .               CLEAR SVRB
         MVI   RBSIZE+1(RSVRB),18   MOVE SIZE IN DOUBLE WORDS TO SVRB
         MVI   RBSTAB(RSVRB),X'D0' .           FLAG SVRB TRANSIENT
         MVI   RBSTAB+1(RSVRB),X'02' .           FLAG SVRB DYNAMIC
         ST    RRB,RBLINKW(RSVRB) .   CHAIN SVRB TO TCB/RB QUEUE
         ST    RSVRB,TCBRBP(RTCB)
         BR    RBLDRET .          RETURN
         SPACE 2
         EJECT
***********************************************************************
*        MAKE ALL SVRBS ON REQUEST QUEUE READY AND REMOVE FROM QUEUE
***********************************************************************
         SPACE
*            INPUT
*              RUSERQ - ADDR OF FIRST SVRB ON REQUEST QUEUE
*              RTAQP   -ADDR OF REQUEST QUEUE POINTER
         SPACE
TAHREQDQ SR    RWORK2,RWORK2
         ST    RWORK2,0(RTAQPX) .      ZERO REQUEST QUEUE POINTER
TAHREQ1  MVI   RBWCF(RUSERQ),X'00' .   CLEAR WAIT COUNT IN SVRB
         L     RWORK3,RBSVTQN(RUSERQ) . LOAD ADDR OF NEXT SVRB ON QUEUE
         ST    RWORK2,RBSVTQN(RUSERQ) . CLEAR PTR IN CURRENT SVRB
         LTR   RUSERQ,RWORK3 .          IF MORE SVRBS ON QUEUE
         BC    7,TAHREQ1 .             BRANCH TO DEQUEUE NEXT
         BR    RCOMRET .               RETURN
         SPACE 5
***********************************************************************
*        PLACE ALL USERS OF ROUTINE IN TAB IN WAIT STATE
***********************************************************************
         SPACE
*            INPUT
*              RTACT - ADDR OF TACT ENTRY FOR TAB
         SPACE
TAHSETWT L     RWORK2,TACTQADW(RTACT) .LOAD ADDR OF SVRB ON USER Q
TASETWT1 LTR   RWORK2,RWORK2 .         IF NO MORE SVRB'S
         BCR   8,RCOMRET .             RETURN
         CLC   TACTTTR(3,RTACT),RBSVTTR(RWORK2) .IF SVRB IS NOT USING
         BC    7,TASETWT2 .                        ROUTINE-CHECK NEXT
         MVC   RBWCSA(1,RWORK2),RBWCF(RWORK2) .SAVE USERS WAIT COUNT
         MVI   RBWCF(RWORK2),X'FF' .           SET MAXIMUM WAIT COUNT
TASETWT2 L     RWORK2,RBSVTQN(RWORK2) .  LOAD ADDR OF NEXT SVRB ON QUE
         B     TASETWT1
         SPACE 5
***********************************************************************
*        QUEUE SVRB ON USERS QUEUE FOR TAB CONTAINING REQUESTED ROUTINE
***********************************************************************
*
TAHNQ    MVC   RBSVTQN+1(3,RSVRB),TACTQAD(RTACT)
         ST    RSVRB,TACTQADW(RTACT)
         L     RWORK1,TAUSERCT .  INCREMENT
         LA    RWORK1,1(RWORK1) .           T A '>
         ST    RWORK1,TAUSERCT .           USER S COUNT
         BR    RRETURN
*******************************************************************5575
*        INCREMENT ADDRESS OF TACT ENTRY                           5575
*******************************************************************5575
*                                                                  5575
TAHTACT1 LA    RWORK1,TACTSIZE(RTACT) .                            5575
         C     RWORK1,TACTEND .                                    5575
         BC    7,TAHTACT2 .                                        5575
         L     RWORK1,TACTSTRT .                                   5575
TAHTACT2 ST    RWORK1,TACTNEXT .                                   5575
         BR    RCOMRET .                                           5575
         EJECT
         SPACE 5
***********************************************************************
*****  SUBROUTINE TO FIND LOADED SVC ROUTINE IN THE LPA  *****
***********************************************************************
*      REGISTER 0  CONTAINS THE LEFT  HALF OF THE NAME TO BE          *
*      REGISTER 1  CONTAINS THE RIGHT HALF          SCANNED FOR       *
*      REGISTER 15 CONTAINS THE ADDR OF THE TOP CD ENTRY
*      REGISTER 14 RETURN R14   IF NOT FOUND                          *
*                         R14 +4 IF FOUND                             *
         SPACE 2
CDESCAN  L     R15,IEAQSVCQ .          LOAD PNTR TO SVC QUEUE
CDESCAN1 LA    R15,0(R15) .            CLEAR HIGH ORDER BYTE
         LTR   R15,R15 .               IS THERE A C D E
         BCR   8,R14 .                 NO-RETURN NOT IN L P A
         C     R0,CDNAME(R15) .        FIRST HALF OF NAME EQUAL
         BNE   CDESCAN2 .              NO, GET PNTR TO NEXT ENTRY
         C     R1,CDNAME+4(R15) .      SECOND HALF OF NAME EQUAL
         BE    4(R14) .                YES RETURN NAME FOUND
CDESCAN2 L     R15,0(R15)
         B     CDESCAN1 .              NO, CHECK NEXT CDE
*
         EJECT
***********************************************************************
*     FIND A TAB TO USE SEARCH EACH TACT STARTING WITH INPUT TACT
***********************************************************************
         SPACE 2
*        FOR 1. A FREE TAB
*            2. A TAB WITH NO READY USERS
*            3. THE TAB WITH THE LOWEST PRIORITY SET OF USERS
*        INPUT RTACT1-ADDRESS OF TACT TO START SEARCH
*              RTCB  -ADDRESS OF CALLING TCB
*              RCOMRET3-RETURN ADDRESS
*        OUTPUT RTACT-ADDRESS OF TACT ENTRY FOR TAB TO USE
         SPACE 2
TATABCK  SR    RNOTRDY,RNOTRDY
         LR    RTACT,RTACT1 .          SAVE INPUT TACT ADDR
         SR    RLOWTCB,RLOWTCB
         SR    RLOTACT,RLOTACT
TATABCK1 TM    TACTFLGS(RTACT),LOADMSK .IF TAB IS LOADING
         BO    TATABCK2 .                CHECK NEXT TACT ENTRY
         TM    TACTFLGS(RTACT),TABFREE .IF TAB IS FREE
         BCR   7,RCOMRET3 .            RETURN TAB CAN BE USED
         SPACE
         LA    RUSECK,TAUSECK4 .        CHECK ONLY USERS OF RTN IN TAB
         BAL   RCOMRET1,TAUSERCK .      FIND HIGHEST PRIORITY USER
         LTR   RTCB1,RTCB2 .            WAS A READY USER FOUND
         BZ    TATABCK4 .               NO SAVE TACT AND CHECK NEXT
         AIF   (NOT &B(1)).MVT0400                                20021
         BM    TATABCK2 .          SKIP IF TAB IN USE ON OTHER CPU MP65
.MVT0400 ANOP                                                     20021
         SPACE
         LTR   RTCB2,RLOWTCB .         LOAD PREVIOUS LOW TCB ADDR
         BZ    TATABCK5
         LA    RCOMRET1,TATABCK2
         BAL   RCOMRET2,TPRIORTY .      IF NEW TCB < PREVIOUS LOW
         BR    RCOMRET1
TATABCK5 LR    RLOWTCB,RTCB1 .         SAVE NEW TCB AS LOW TCB
         LR    RLOTACT,RTACT
         SPACE
TATABCK2 LA    RTACT,TACTSIZE(RTACT) . LOAD ADDR OF NEXT TACT ENTRY
         C     RTACT,TACTEND .          IS IT A TACT ENTRY ADDR
         BC    7,TATABCK3
         L     RTACT,TACTSTRT .         NO LOAD ADDR OF FIRST TACT
         SPACE
TATABCK3 CR    RTACT1,RTACT .          IF TACT ADDR NOT=I/P TACT ADDR
         BC    7,TATABCK1 .             CHECK NEXT TACT
         SPACE
         LTR   RTACT,RNOTRDY .          NO READY USERS
         BCR   7,RCOMRET3 .            RETURN THIS TACT           25402
         LTR   RLOWTCB,RLOWTCB .       ALL TABS BEING LOADED ?    25402
         BCR   8,RCOMRET3 .            YES - RETURN NO FREE TABS  25402
         LR    RTCB1,RLOWTCB
         LR    RTCB2,RTCB
         BAL   RCOMRET2,TPRIORTY  .     IS CALLING TCB HIGHER THAN LOW
         SR    RLOTACT,RLOTACT .         NO-RETURN ZERO TACT ADDR
         LR    RTACT,RLOTACT .           YES-RETURN LOW TACT ADDR
         BR    RCOMRET3 .               RETURN
         SPACE 2
TATABCK4 LTR   RNOTRDY,RNOTRDY
         BC    7,TATABCK2
         LR    RNOTRDY,RTACT .          NO READY USERS SAVE TACT ADDR
         B     TATABCK2 .               IN NOT RDY AND CHK NEXT TACT
         EJECT
***********************************************************************
*        FIND HIGHEST PRIORITY USER OF A TRANSIENT AREA(READY TO RUN)
***********************************************************************
*
*        INPUT-RTACT-ADDRESS OF TACT ENTRY
*              RUSECK- TAUSECK3 IF ALL USERS TO BE CHECKED
*                    - TAUSECK4 IF ONLY USERS OF ROUTINE IN TAB TO BE
*                         CHECKED
*              RCOMRET1- RETURN ADDRESS
*        OUTPUT-RTCB2-ZERO OR ADDRESS OF HIGHEST READY USER'S TCB
*
         SPACE 2
TAUSERCK DS    0H .                                               20021
         AIF   (NOT &B(1)).MVT0500                                20021
         L     RTCB2,PREFIX2 .     PREFIX FOR OTHER CPU'S PSA      MP65
         L     RTCB2,IEATCBP+4-IEAQFX00(RTCB2) .TCB OTHER CPU      MP65
         L     RTCB2,TCBRBP(RTCB2) .         CURRENT RB            MP65
         TM    RBSTAB(RTCB2),X'D0' .    IF NOT TRANSIENT SVRB      MP65
         BNO   CHECKNEW .          NOW GO CHECK NEW POINTER      A35606
         LH    RTCB2,RBTABNO(RTCB2)                                MP65
         A     RTCB2,TAQPTR .      TAB ADDR FOR OLD2               MP65
         CR    RTCB2,RTACT .       COMPARE WITH GIVEN TAB          MP65
         BE    RETURNCD .          GO SET RETURN CODE RB NOT USE A35606
CHECKNEW EQU   * .                                               A35606
         L     RTCB2,PREFIX2 .     GET PREFIX FOR OTHER CPU      A35606
         L     RTCB2,IEATCBP(RTCB2) . GET POINTER TO NEW         A35606
         LTR   RTCB2,RTCB2 .            IS NEW = '0'              M3851
         BE    TAUSECK0 .               YES, CONTINUE CHECKING    M3851
         L     RTCB2,ZERO(RTCB2) . GET NEW'S RB POINTER          A35606
         TM    RBSTAB(RTCB2),X'D0' IS THIS A TRANS. SVRB         A35606
         BNO   TAUSECK0 .          NO. CONTINUE CHECKING         A35606
         LH    RTCB2,RBTABNO(RTCB2) GET INDEXING FACTOR FOR TACT A35606
         A     RTCB2,TAQPTR .      GET THE RIGHT TACT            A35606
         CR    RTCB2,RTACT .       ARE THE TACTS THE SAME        A35606
         BNE   TAUSECK0 .          GO CONTINUE CHECKING          A35606
RETURNCD EQU   * .                                               A35606
         LNR   RTCB2,RTCB2 .       SET RTCB2 NEGATIVE              MP65
         BR    RCOMRET1 .          AND RETURN                      MP65
TAUSECK0 DS    0H                                                  MP65
.MVT0500 ANOP                                                     20021
         SR    RTCB2,RTCB2 .           CLEAR HIGH USE INDICATOR
         L     RUSERQ,TACTQADW(RTACT) . LOAD ADDR OF SVRB ON USER QUEUE
TAUSECK1 LTR   RTCB1,RUSERQ .      IF NO MORE USERS (ADDR = 0)
         BCR   8,RCOMRET1 .        RETURN
TAUSECK2 TM    RBSTAB+1(RTCB1),RBTCBNXT TEST IF NEXT ON RB/TCB Q IS TCB
         L     RTCB1,RBLINKW(RTCB1) .   LOAD NEXT ON QUEUE
         BZ    TAUSECK2 .          BRANCH IF NEXT IS AN RB
         SPACE
         OC    TCBFLGS+3(2,RTCB1),TCBFLGS+3(RTCB1) .IF TASK IS NONDISP
         BC    7,TAUSECK4 .            CHECK NEXT USER
         C     RUSERQ,TCBRBP(RTCB1) .  IF QUEUED SVRB IS NOT TOP RB
         BC    7,TAUSECK4 .            CHECK NEXT USER
         CLI   RBWCF(R6),X'FF' .       IS RB OVERLAID?            M6263
         BE    TAUSECK7 .              YES, CHECK ALTERNATE SA    M6576
         CLI   RBWCF(R6),X'00' .       IS WAIT COUNT ZERO?        M6263
         BNE   TAUSECK4 .              NO, GET NEXT USER          M6576
TAUSECK5 EQU   * .                                                M6576
         CLC   TACTTTR(3,RTACT),RBSVTTR(RUSERQ) . IF ROUTINE IS IN TA
         BCR   7,RUSECK .                         BRANCH
         SPACE
TAUSECK3 BAL   RCOMRET2,TPRIORTY . IS USER TCB HIGHER THAN PREVIOUS HI
         LR    RTCB2,RTCB1 .       YES-SAVE NEW HIGH TCB ADDRESS
         SPACE
TAUSECK4 L     RUSERQ,RBSVTQN(RUSERQ) . LOAD ADDR OF NEXT USER
         B     TAUSECK1
         SPACE
TAUSECK7 EQU   * .                                                M6576
         CLI   RBWCSA(R6),X'00' .      IS ALTERNATE SA 0?         M6263
         BNE   TAUSECK4 .              NO, GET NEXT USER          M6576
         B     TAUSECK5 .              YES, CHECK FOR REFRESH     M6576
         EJECT
***********************************************************************
*        DETERMINE WHICH OF TWO TASKS IS HIGHER PRIORITY
***********************************************************************
*        INPUT- RTCB1 - ADDR OF FIRST TCB
*               RTCB2 - ADDR OF SECOND TCB OR ZERO
*               RCOMRET2 - RETURN ADDRESS
*        RETURN TO RCOMRET2 IF FIRST TCB IS HIGHER PRIORITY
*            TO RCOMRET2 +2 IF SECOND TCB IS HIGHER (OR TCB1=TCB2)
         SPACE 2
TPRIORTY LTR   RTCB2,RTCB2 .       IF SECOND TCB IS ZERO
         BCR   8,RCOMRET2 .        RETURN- FIRST TASK IS HIGH
         CLC   TCBDSP(1,RTCB1),TCBDSP(RTCB2)  COMPARE PRIORITIES
         BCR   2,RCOMRET2 .        FIRST TASK HIGH
         BL    2(RCOMRET2) .       SECOND TASK HIGH
         SPACE
*        PRIORITIES EQUAL-CHECK POSITION IN READY QUEUE
         SPACE
         CR    RTCB1,RTCB2 .       COMPARE TCB ADDRESSES
         BE    2(RCOMRET2) .       RETURN-TCB'S EQUAL
         L     RWORK2,TCBTCB(RTCB1)  LOAD ADDR OF NXT ON READY QUE
TPRIOR1  LTR   RWORK2,RWORK2 .     IF ADDR IS ZERO
         BZ    2(RCOMRET2) .       RETURN-SECOND TCB HIGH
         CLC   TCBDSP(1,RTCB1),TCBDSP(RWORK2)  IF PRIORITY OF NEXT IS
         BH    2(RCOMRET2) .       LOWER THAN TCB1-RETURN-TCB2 IS HIGH
         CR    RWORK2,RTCB2 .      IF TCB ON READY Q = SECOND TCB
         BCR   8,RCOMRET2 .        RETURN-FIRST TCB HIGH
         L     RWORK2,TCBTCB(RWORK2) LOADADDR OF NEXT ON READY QQUE
         B     TPRIOR1
         AIF   (NOT &B(2)).TSO13                                  M4271
         EJECT
****************************************************************  M4271
*                                                                 M4271
*    THIS ROUTINE SETS THE TIME SHARING USER NONSWAPPABLE         M4271
*      DURING THE TRANSIENT AREA FETCH PROCESSING                 M4271
****************************************************************  M4271
          SPACE 2                                                 M4271
NOSWAP   EQU   * .                                                M4271
         TM    TCBTSFLG(RTCB),TCBTSTSK . IS THIS A TIME-SHARING   M4271
*                                         USER?                   M4271
         BZ    NOTSFTCH .                NO, DON'T SET            M4271
         L     RCVT,CVTADDR .            GET CVT ADDRESS          M4271
         LR    RWORK1,R15 .              SAVE REG 15 ACCROSS      M4271
         L     R15,CVTTSCVT(RCVT) .      GET TIME-SHARING CVT     M4271
         USING TSCVT,R15 .                                        M4271
         L     R15,TSCVTI01 .            GET BRANCH ADDRESS       M4271
         DROP  R15 .                                              M4271
         L     R1,TCBJSCB(RTCB) .      OBTAIN USERS TERM #        M4271
         USING IEZJSCB,R1 .                                       M4271
         LH    R0,JSCBTJID .                                      M4271
         DROP  R1 .                                               M4271
         SR    R1,R1 .                                            M4271
         TSEVENT  DONTSWAP,TJID=(R0),ENTRY=BRANCH                 M4271
NOTSFTCH EQU   * .                                                M4271
         BR    R10 .           RETURN                             M4271
.TSO13   ANOP                                                     M4271
         EJECT
***********************************************************************
*        THIS CODE RUNS UNDER A SYSTEM TCB. THERE IS ONE TCB FOR EACH
*          TAB. THE TCB IS POSTED BY THE MAINLINE ROUTINE WHEN IT IS
*          NECESSART TO LOAD A TAB.
***********************************************************************
         SPACE 2
***********************************************************************
*        THE FOLLOWING CODE EXECUTES UNDER THE TA FETCH TASK TO BLDL
*          FOR THE ENTRY POINT NAME OF THE REQUESTED PHASE
***********************************************************************
TABLDL   STM   R0,R15,RBGRSAVE(RRB) .   SAVE INPUT REGS
TABLDL1  L     RSVRB,0(RTACT) .    LOAD ADDR OF TAB AS BLDL       19022
*                                  WORK AREA                      19022
         MVC   BLDLWA+8(8,RSVRB),RBSVESA(RRB)   EP NAME TO TAB FOR BLDL
         MVC   BLDLWA+4(4,RSVRB),BLDLPARM .  BLDL LIST PARMETER TO TAB
         ST    RRB,BLDLWA(RSVRB) .   SAVE RB ADDR ACROSS BLDL
         LA    R0,BLDLWA+4(RSVRB) .  LOAD ADDR OF BLDL PARM
         L     R1,SVCLDCB .          LOAD ADDR OF SVC LIB DCB
         L     R15,TBLDLADR .        LOAD ADDR OF BLDL
         LA    RSVRB,0(0,RSVRB) .    CLEAR HI BYTE OF TAB ADDR
         SSM   ENABLE
         BALR  R14,R15
         SPACE 2
         L     RRB,BLDLWA(RSVRB) .     RELOAD RB ADDRESS
         L     RBASE,RBGRSAVE+REG12(RRB)  RELOAD BASE
         SSM   DISABLE .
         LM    R0,R14,RBGRSAVE(RRB) .  RESTORE INPUT REGS         20021
         B     ERRTEST(R15) .      GO TO ROUTINE PLUS RET CODE    20021
ERRTEST  B     GOODBLDL .          R.C.=0 - FOUND GO TO FETCH     20021
         B     NOTFOUND .          R.C.=4 - MODULE NOT FOUND      20021
         B     TBIOERR1 .          R.C.=8 - PERMANENT I/O ERROR   20021
         SPACE
*        MODULE FOUND SET UP TO GO TO FETCH ROUTINE
GOODBLDL L     RWORK1,0(RTACT) .   LOAD TAB ADDRESS               20021
         SPACE
*     MOVE TTR AND MODULE LENGTH TO THE SVRB                      M0448
         SPACE
         MVC   RBSVTTR(3,RSVRB),BLDLWA+8+DETTR(RWORK1)
         MVC   RBRTLNTH(2,RSVRB),BLDLWA+8+DELENGTH(RWORK1) .      M0448
         B     TAHFETCH .          GO TO FETCH
         SPACE 2
NOTFOUND L     RWORK2,ERRCDE       LOAD ERROR CODE '806'          20021
DARENTRY EQU   *
         AIF   (NOT &B(2)).TSO07                                  20021
         L     RTCBIN,RBGRSAVE+REG11(RRB)  LOAD TCB ADDR          20021
*                                 BLDL WAS ISSUED FOR.            20021
         TM    TCBTSFLG(RTCBIN),TCBTSTSK  IS REQUESTOR A TIME-    20021
*                                         SHARING USER?           20021
         BZ    NOTTSTSK .         NO. CONTINUE.                   20021
*                                                                 20021
*...AFTER A TIME-SHARING USER COMPLETES HIS TA BLDL PROCESSING    20021
*   HE CAN BE SWAPPED.  THE FOLLOWING CODE INFORMS THE TIME-      20021
*   SHARING DRIVER THAT THIS TIME-SHARING USER CAN NOW BE         20021
*   SWAPPED IN/OUT.                                               20021
*                                                                 20021
         L     R1,TCBJSCB(RTCBIN) OBTAIN TIME-SHARING USER'S      20021
         USING IEZJSCB,R1 .       TERMINAL JOB IDENTIFICATION.    20021
         LH    R0,JSCBTJID .                                      20021
         DROP  R1 .                                               20021
         SR    R1,R1 .                                            20021
         TSEVENT  OKSWAP,TJID=(0)                                 20021
NOTTSTSK EQU   *                                                  20021
*...CONTINUE BLDL PROCESSING FOR THIS TASK.                       20021
.TSO07   ANOP                                                     20021
         LR    R1,RWORK2 .         PUT ERROR CODE IN PARM REG     20021
         SR    RWORK2,RWORK2 .     CLEAR WORK REG
         ST    RWORK2,TACTTTRW(RTACT)  INDICATE TAB EMPTY
         MVI   TACTFLGS(RTACT),TABFREE  INDICATE TAB FREE
         LR    R0,RTCBIN .              LOAD ADDR OF TCB TO TERMINATE
         ST    R15,TCBGRS+REG15(RTCBIN)  STORE FETCH RETURN CODE IN 15
         SPACE
*     MOVE NAME OF MODULE NOT FOUND INTO TCB REGS 2,3             M2733
         SPACE
         L     RWORK2,0(RTACT) .                                  M2733
         MVC   TCBGRS+8(8,RTCBIN),BLDLWA+8(RWORK2) .              M2733
*                                      TASK MUST BE SET DISPABLE  M4267
*                                      BEFORE GOING TO ABTERM     M4267
         MVI   RBWCF(RSVRB),X'00' .    ZERO WAIT COUNT            M4267
         NI    TCBFLGS2(RTCBIN),X'DF' .   TURN OFF ABTERM BIT  @JK67721
         L     RRETURN,ABTERM .         BRANCH TO ABTERM
         BALR  RRETURN,RRETURN
         NI    TACTTCB(RTACT),ZERO . ZERO RETRY COUNT IN TCT  BJ M2500
         L     R3,TACTTCB(R2) . TRANSIENT AREA TCB             BJ M2500
         L     R3,0(R3) . TRANSIENT AREA SVRB                 BJ M2500
         SR    RWORK2,RWORK2 . CLEAR NAME                     BJ M2500
         ST    RWORK2,4(R3) . IN TRANSIENT SVRB               BJ M2500
         B     TAHCK5 .                 BRANCH TO EXIT FROM FETCH TASK
         SPACE
TBIOERR1 CLI   TACTTCB(RTACT),FIVE   TEST NO. OF RETRIES AND      19022
         BH    TBIOERR .           IF GT 5 ABEND THE USER AND     19022
         BL    TBIOERR3 .          IF LESS THAN S RETRY AGAIN     19022
         L     RWORK6,CVTADDR .    OTHERWISE CHECK FOR I/O RMS    19022
         TM    CVTRMSGG(RWORK6),DDRIN . IN SYSTEM BY CHECKING     19022
         BNO   TBIOERR .           THE CVT, ABEND IF NOT PRESENT  19022
         L     RWORK6,CVTRMS(RWORK6) .  GET ADDR OF RMS TABLE     19022
         L     RWORK6,0(RWORK6)                                   19022
         TM    RMSFLG(RWORK6),RMSIN .   CHECK IF IO RMS IS IN     19022
         BZ    TBIOERR .            . SYSTEM ABENDING IF NOT      19022
         L     TO15,ADDRIOMS(RWORK6) . GET ADDR OF IO RMS         19022
         BALR  FROM14,TO15  .      AND GIVE CONTROL.              19022
         LTR   RCODE,RCODE .       TEST FOR SUCCESSFUL SWITCH     19022
         BNZ   TBIOERR .           AND ABEND IF NOT               19022
         OI    TACTTCB(RTACT),FOX .  SET RETRY COUNT GT FIVE      19022
         B     TABLDL1 .           AND RETRY AGAIN.               19022
         SPACE
TBIOERR3 IC    RWORK6,TACTTCB(RTACT) .  GET I/O RETRY COUNT FROM  19022
         LA    RWORK6,ONE(RWORK6) .     TACT AND INCR BY 1  AND   19022
         STC   RWORK6,TACTTCB(RTACT) .  SET BACK IN TACT  AND     19022
         B     TABLDL1 .                RETRY IO AGAIN            19022
         SPACE 2
TBIOERR  L     R1,SVCLDCB .       GET DCB FOR SVCLIB               I251
         NI    DCBIFLGS(R1),X'3F'  KILL DCB PERMANENT ERROR        I251
         L     RWORK2,IOERROR .   LOAD ERROR CODE 'C06'           20021
         B     DARENTRY .         ABTERM REQUESTOR                 I251
*
*IF A TRANSIENT AREA FETCH TASK IS ABNORMALLY TERMINATED, DAMAGE   I251
*ASSESSMENT WILL INTERCEPT THE ABEND AND CAUSE THIS MODULE TO BE   I251
*GIVEN CONTROL HERE.  IN THIS INSTANCE, THIS MODULE WILL A2T5RM THE9251
*TASK WHICH REQUESTED THE SVC ROUTINE.                             I251
*
*ABEND CODES USED BY THIS MODULE AND THEIR MEANING:                I251
*   806 - MODULE NOT FOUND BY BLDL                                 I251
*   C06 - A PERMANENT I/O ERROR WAS ENCOUNTERED ON SVCLIB OR A     I251
*         TRANSIENT AREA FETCH TASK WAS ABNORMALLY TERMINATED.     I251
*
*INPUT REQUIRED AT THIS POINT:                                     I251
*   XR5 - ADDRESS OF THE TRANSIENT AREA FETCH SVRB                 I251
*         THIS REGISTER MUST BE INITIALIZED BY DAR AND STORED INTO I251
*         THE XR5 SAVE AREA SLOT IN DARS (ABENDS) SVRB             I251
TBNOTFND LM    R0,R15,RBGRSAVE(RRB)  REINITIALIZE TAH XRS          I251
         B     TBIOERR  .                                          I251
         SPACE 2
***********************************************************************
*        FETCH INTERFACE ROUTINE
***********************************************************************
         SPACE 2
*          INPUT REGS
*              RTACT   -TACT ENTRY ADDR
*              RSVRB   -SVRB ADDR
         SPACE
IEAQTR04 STM   R0,R15,RBGRSAVE(RRB)   SAVE REGS IN SVRB TO PRESERVE
*                                        FIXED REGS ACROSS FETCH
TAHFETCH EQU   *                                                  20021
         MVC   RBRTLNTH(6,RRB),RBRTLNTH(RSVRB)  MOVE LENTH AND NAME
*                                      TO TA SVRB
         L     RWORK3,RBSVTTRW(RSVRB) . MOVE ROUTINE LENGTH AND TTR
         ST    RWORK3,TACTTTRW(RTACT)
         SLL   RWORK3,8 .                 TO FETCH WORK AREA
         ST    RWORK3,TAWATTR(RTAB)
         LH    RWORK3,RBRTLNTH(RSVRB)
         STH   RWORK3,TAWALNTH(RTAB)
         BALR  RFTCHRET,RFETCH .        BRANCH TO FETCH TO LOAD ROUTINE
         LM    R2,R14,RBGRSAVE+REG2(RRB)
         LTR   R15,R15 .         TEST RETURN CODE                 M0110
         BNZ   TBIOERR1 .        FETCH ERROR CHK FOR I/O REC      M0110
         NI    TACTTCB(RTACT),ZERO . ZERO RETRY COUNT IN TACT    A35606
         AIF   (NOT &B(2)).TSO09                                  20021
*                                                                 20021
*...AFTER A TIME-SHARING USER COMPLETES HIS TA FETCH PROCESSING   20021
*   HE CAN BE SWAPPED. THE FOLLOWING CODE INFORMS THE TIME-       20021
*   SHARING DRIVER THAT THIS TIME-SHARING USER CAN NOW BE         20021
*   SWAPPED IN/OUT.                                               20021
*                                                                 20021
         TM    TCBTSFLG(RTCBIN),TCBTSTSK  IS REQUESTOR A TIME-    20021
*                                         SHARING USER?           20021
         BZ    NOTTSUSR .         NO. CONTINUE.                   20021
         LR    RWORK1,R15 .       SAVE FTCH RETURN CODE.          20021
         L     R1,TCBJSCB(RTCBIN) OBTAIN TIME-SHARING USER'S      20021
         USING IEZJSCB,R1 .       TERMINAL JOB IDENTIFICATION.    20021
         LH    R0,JSCBTJID .                                      20021
         DROP  R1 .                                               20021
         SR    R1,R1 .                                            20021
         TSEVENT  OKSWAP,TJID=(0) .                               20021
         LR    R15,RWORK1 .       PUT FTCH RETURN CODE IN R15     20021
NOTTSUSR EQU   * .                                                20021
*...CONTINUE TA FETCH PROCESSING.                                 20021
.TSO09   ANOP                                                     20021
         SPACE 2
***********************************************************************
*        FIND AND INITIALIZE OTHER USERS OF ROUTINE IN TAB
***********************************************************************
         SPACE
TAHCHECK L     RUSERQ,TACTQADW(RTACT) . LOAD ADDR OF SVRB
         MVI   TACTFLGS(RTACT),0 .     INDICATE LOADING COMPLETE AND
*                                      TAB IN USE
TAHCK1   LTR   RUSERQ,RUSERQ .          IS THERE AN SVRB
         BZ    TAHCK4 .                 NO-BRANCH TO CHECK REQUEST QUE
         CLC   TACTTTR(3,RTACT),RBSVTTR(RUSERQ)  IF SVRB IS NOT USING
         BC    7,TAHCK3 .                    ROUTINE-CHECK NEXT ON QUE
         SPACE
*    POST WILL DECREMENT THE SAVED WAIT COUNT IN THE XSNT-SVRB.  A33247
         SPACE 1                                                 A33247
         MVC   RBWCF(1,RUSERQ),RBWCSA(RUSERQ) .RESTORE THE SAVED A33247
*                                            AND UPDATED COUNT   A33247
         MVI   RBWCSA(RUSERQ),X'00' .   CLEAR WAIT CT SAVE AREA  A33247
TAHCK3   L     RUSERQ,RBSVTQN(RUSERQ) . LOAD ADDR OF NEXT ON QUEUE
         B     TAHCK1
         SPACE 2
*        MAKE USERS ON REQUEST QUEUE READY
         SPACE
TAHCK4   L     RWORK3,0(RTAQPX)    LOAD ADDR OF SVRB ON REQUEST QUEUE
         LTR   RUSERQ,RWORK3
         BZ    TAHCK5
         BAL   RCOMRET,TAHREQDQ
         SPACE 2
TAHCK5   L     RCVT,16 .                                    BJ A50017
        L     RWORK3,ZERO(RCVT)  . POINTER TO NEW           BJ A50017
        SR    RWORK2,RWORK2                                 BJ A50017
        ST    RWORK2,ZERO(RWORK3) . ZERO NEW                BJ A50017
        AIF   ('&SYS' NE 'MP65').NOMP4
         L     R1,PREFIX2 .           GET PREFIX FOR OTHER CPU   A35875
         ST    RWORK2,X'2C0'(R1) .    ZERO NEW IN OTHER CPU      A35875
TAHCKDSQ EQU   * .                                               A35875
         MVI   RBWCF(RRB),X'01' .    SET WAIT COUNT              A35875
         AGO   .NOMP6 .                                          A35875
.NOMP4  ANOP
        L     RWORK2,TACTQADW(RTACT) . GET ADDR OF SVRB      BJ A50017
        LTR   RWORK2,RWORK2 . IS THERE AN SVRB               BJ A50017
        BZ    TODISP                                         BJ A50017
        B     TESTAF . TEST IF POINTING TO TCB
TALOOP  EQU   *
        L     RWORK2,RBLINKW(RWORK2) . PICK UP NEXT RB POINTER
TESTAF  EQU   *
        TM    RBSTAB+ONE(RWORK2),TCB . IS THIS POINTING TO TCB
        BZ    TALOOP . NO, GET THE NEXT POINTER
        L     RWORK2,RBLINKW(RWORK2) . YES, GET ITS TCB ADDR
        LA    RWORK2,ZERO(RWORK2) . CLEAR THE FLAG BYTE
        LR    R10,RWORK2 . SET R10 WITH TCB FOR TASK SWITCH
        L     R11,TASKSWIH  . GET ADDR OF TASK SWITCH ROUTINE
        BALR  R14,R11 . GO TO TASK SWITCH
TODISP  MVI   RBWCF(RRB),X'01' . SET WAIT COUNT               BJ A50017
        AGO   .NOMP6                                          BJ A50017
.NOMP6   ANOP .                                                  A35875
         MVC   TCBGRS(64,RTCB),RBGRSAVE(RRB) .    RESET REGS IN TCB
         MVC   RBOPSW(8,RRB),TFTCHPSW   RESET ENTRY POINT PSW IN RB
         L     RWORK2,TDSPTCH
         BR    RWORK2 .              BRANCH TO DISPATCHER
         EJECT
*
*
***********************************************************************
*        CONSTANTS FOR EXTERNAL REFERENCES
         SPACE
TAQPTR   DC    A(IEAQTAQ)
ABTERM   DC    A(IEA0AB00)
TBLDLADR DC    A(IECPBLDL) .       ADDRESS OF BLDL
TDSPTCH  DC    A(IEA0DS)
SVCLDCB  DC    A(SVCDCB)
IEASVRB  DC    A(0) .              ADDRESS OF PREALLOCATED SVRB
IEAQSVCQ DC    A(0) .        ADDRESS OF SVC QUEUE
TASKSWIH DC    A(IEA0DS02) .           TASK SWITCH RTN ADDR
         AIF   (NOT &B(1)).MVT0600                                20021
TAHHEAD  DC    A(IEAHEAD) .                                        MP65
.MVT0600 ANOP                                                     20021
ZERO     EQU   0 .                                                 I251
ONE      EQU   1 .                                                 I251
TCB      EQU   X'80' .                                             I251
****************************************
*        SVRB FIELD DISPLACEMENTS
         SPACE
RBTABNO  EQU   0 .            DISP OF TACT ENTRY FOR TAB USED BY SVRB
RBRTLNTH EQU   2 .            LENGTH OF SVC ROUTINE
RBABOPSW EQU   4 .           DISP OF EP NAME IN SVRB
RBSIZE   EQU   8 .            SIZE OF RB
RBSTAB   EQU   10 .           STATUS BITS
RBSVTQN  EQU   12 .           PTR TO NEXT SVRB ON A TAH QUEUE
RBCDE    EQU   12 .           POINTER TO CDE FOR RESIDENT MODULES 25792
RBOPSW   EQU   16 .           OLD PSW
SVCID    EQU   18 . SVC NUMBER FROM PSW IN RB                 BJ M2500
RBWCSA   EQU   24 .           WAIT COUNT FIELD SAVE AREA
RBSVTTR  EQU   25 .           TTR FOR SVC ROUTINE
RBSVTTRW EQU   24 .           TTR-WORD BOUNDRY DISPLACEMENT
RBWCF    EQU   28 .           WAIT COUNT FIELD
RBLINK   EQU   29 .           TCB/RB LINK FIELD
RBLINKW  EQU   28 .           TCB/RB LINK FIELD-WORD BOUNDRY DISP
RBGRSAVE EQU   32 .           REGISTER SAVE AREA
RBSVESA  EQU   96 .                DISPLACEMENT OF ESA
****************************************
*        TCB FIELD DISPLACEMENTS
*
TCBGRS   EQU   48 .           REGISTER SAVE AREA
TCBFLGS  EQU   29
TCBFLGS1 EQU   30 .          SECOND BYTE OF DISPATCHABILITY FLAGS
TCBFLGS2 EQU   31 .          3RD BYTE OF DISPATCHABILITY FLAGS @JK67721
TCBFLGS4 EQU   33 .           DISPATCHABILITY FLAGS IN TCB
TCBRBP   EQU   0 .            POINTER TO CURRENT RB ON TCB-RB CHAIN
TCBDSP   EQU   35 .           DISPATCHING PRIORITY
TCBTCB   EQU   116 .
TCBTSFLG EQU   148 .              TIME SHARING STATUS FLAGS       20021
TCBTSTSK EQU   X'80' .            INDICATES THIS TASK IS A        20021
*                                 TIME-SHARING TASK               20021
TCBATT   EQU   X'20' .            INDICATES THAT ATTENTION        20021
*                                 EXITS ARE NOT TO BE             20021
*                                 SCHEDULED FOR THIS TASK         20021
TCBJSCB  EQU   180 .              PTR TO JOB STEP CTL BLOCK.      20021
*
*************************
*        TACT ENTRY DISPLACEMENTS
         SPACE
TACTFLGS EQU   0 .                FLAGS
TACTBAD  EQU   1 .                TAB ADDRESS
TACTBADW EQU   0 .                TAB ADDRESS-WORD BOUNDRY
TACTQAD  EQU   5 .                USER QUEUE ADDRESS
TACTQADW EQU   4 .                USER QUEUE ADDRESS-WORD BOUNDRY
TACTTTR  EQU   9 .                TTR
TACTTTRW EQU   8 .                TTR-WORD BOUNDARY DISP
TACTTCB  EQU   12 .       ADDR OF FETCH TASK FOR TAB
*
TACTSIZE EQU   16 .               SIZE OF TACT ENTRY
         SPACE
*************************
*        FETCH WORK AREA DISPLACEMENTS
         SPACE
TAWASIZE EQU   68 .                SIZE OF FETCH WORK AREA
TAWATTR  EQU   36 .                DISP OF TTR
TAWALNTH EQU   62 .                DISP OF ROUTINE LENGTH
         SPACE
*************************
         SPACE
*        DIRECTORY ENTRY DISPLACEMENTS
         DS    0F
DETTR    EQU   14 .                DISP OF - TTR IN DE
DELENGTH EQU   27 .                        - LENGTH OF ROUTINE IN DE
DESTAB   EQU   22 .                        - ATTRIBUTE BITS IN DE
DELNTH   EQU   32 .                LENGTH OF DE ENTRY
***********************************************************************
*      CONTENTS DIRECTORY DISPLACEMENTS                               *
CDEP     EQU   16                      DISPLACEMENT ENTRY POINT CDE
CDNAME   EQU   8                  DISPLACEMENT OF SVC NAME IN THE CDE
*************************
*        REGISTER ASSIGNMENTS
RIN0     EQU   0
RUSER    EQU   0
REMTYTAB EQU   0
RWAITTAB EQU   0
RNOTRDY  EQU   0
RINDDEQ  EQU   1
RTACT1   EQU   1
RWORK3   EQU   1
RFRETAB  EQU   1
RTACT    EQU   2
RBLDRET  EQU   2
RQLOOP   EQU   3
RCVT     EQU   3
RLOWTCB  EQU   3
RTCB     EQU   4
RTACTTCB EQU   4
RENTLOOP EQU   5
RRB      EQU   5
RUSECK   EQU   5
RWORK1   EQU   6
RWORK6   EQU   6 .                 WORK REGISTER                  19022
RINPUT   EQU   6
RUSERQ   EQU   6
RTTR     EQU   6
RWA      EQU   6
RWORK2   EQU   7
RTAB     EQU   7
RFTCHRET EQU   8
RTACTENT EQU   8
RCSVRB   EQU   8
RLOTACT  EQU   8
RCOMRET1 EQU   9
RFETCH   EQU   9
RTAQP    EQU   9
FINRFLG  EQU   9
RCOMRET2 EQU   10
RINDEX   EQU   10
RTAQPX   EQU   10
RTCBIN   EQU   11
RENTADR  EQU   11
RCOMRET  EQU   11
RCOMRET3 EQU   11
RBASE    EQU   12
RSVRB    EQU   13
RRSTTACT EQU   13
RPARM1   EQU   13
RTCB1    EQU   14
FINRLINK EQU   14
RPARM    EQU   14
RRETURN  EQU   14
RERRCD   EQU   15
RRSTTCB  EQU   15
RTCB2    EQU   15
         SPACE 2
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
FOX      EQU   X'0F' .             USED TO SET RETRY COUNT IN TACT19022
FIVE     EQU   X'05' .             USED TO TEST COUNT IN TACT     19022
FROM14   EQU   14 .                REG USED TO HOLD NSI           19022
TO15     EQU   15 .                REG USED TO BRANCH ON          19022
RCODE    EQU   15 .                REG WHICH HOLDS RETURN CODE    19022
R15      EQU   15
FINRADR  EQU   8 .                         -ADDR OF TAB TO LOAD
FINRDE   EQU   5
FINRWA   EQU   13
FINRDCB  EQU   7
***********************************************************************
*        CVT DISPLACEMENTS
         SPACE
CVTTCBP  EQU   0
CVTEXIT  EQU    80
         AIF   (NOT &B(2)).TSO012                                 20021
CVTTSCVT EQU   228 .                                              20021
CVTTSFLG EQU   228 .                                              20021
CVTTSRDY EQU   X'80' .                                            20021
.TSO012  ANOP                                                     20021
CVTADDR  EQU   16 .                ADDR OF CVT IN LOW CORE        19022
CVTRMS   EQU   116 .               ADDR OF CVT RMS TABLE          19022
CVTRMSGG EQU   182 .               ADDR OF CVT RMS BITS           19022
         SPACE 2
***********************************************************************
*        MISCELLANEOUS EQUATES AND CONSTANTS
         SPACE
TACTDISP EQU   8 .                DISP OF TACT FROM IEAQTAQ
MRBXSNT  EQU   X'D0' .            MASK TO CHECK IF SVRB IS TRANSIENT
         AIF   (&B(1)).MVT0700                                    20021
SVCOPSW  EQU   32
.MVT0700 ANOP                                                     20021
FTCHWA   EQU   424
REGS     EQU   52
EXIT     EQU   3
REG2     EQU   8 .                 DISP OF REG 2 IN SAVE AREAS
REG10    EQU   40
REG11    EQU   44
REG12    EQU   48
REG13    EQU   52
REG14    EQU   56
REG15    EQU   60
TABFREE  EQU   X'20' .             MASK TO CHECK TAB FREE FLAG IN TACT
LOADMSK  EQU   X'40' .             MASK TO INDICATE TAB IS LOADING
RBTCBNXT EQU   X'80' .             MASK TO CHECK IF TCG NEXT ON QUEUE
DDRIN    EQU   X'20' .             IO RMS MASK                    19022
RMSIN    EQU   X'80' .             IO RMS MASK                    19022
RMSFLG   EQU   20 .                IO RMS DISP                    19022
ADDRIOMS EQU   20 .                IO RMS DISP                    19022
         DS    0F
GETPARAM DC    X'FF000090FFFFFFFF'  GETMAIN PARAMETER LIST FOR    20021
*                                    144 BYTES FROM SP 255.       20021
SVCLPANM DC    C'IGC00000' .
SVCNAME  DS    2D .                DOUBLE WORD WORK TO CONVERT TO BCD
         DS    0F .
IGMASK   DC    X'00000400' . EXCLUSIVE OR RESULT OF IGG0 AND IGC0
TTRMASK  DC    X'0003FFFF' .
TYPETEST DC    X'40000000' .       MASK TO CHECK IF XSNT ROUT REQUESTED
BLDLPARM DC    X'0001' .           BLDL PARAMETER
         DC    AL2(DELNTH)
BLDLWA   EQU   400 .               SIZE OF BLDL WORK AREA
ERRCDE   DC    X'80806000' .       ERROR FOUND IN BLDL
IOERROR  DC    X'80C06000' .      PERMANENT I/O ERROR ABEND CODE   I251
         AIF   (&B(1)).MVT0800                                    20021
TCBHEAD  DC    A(IEAHEAD) .                                        I251
.MVT0800 ANOP  .                                                  20021
ARMBRNCH DC    V(RMBRANCH) .      REGISTER-TYPE BRANCH ENTRY TO   20021
*                                 GETMAIN.                        20021
FOUR     DC    F'4' .                                              I251
DCBIFLGS EQU   44 .          OFFSET TO FLAGS IN SVCLIB DCB         I251
TAHADR   DC    A(TAH) .            BASE OF PROGRAM
         DS    0D .
TAHPSWST DC    X'00040000' .           RESTART PSW
         DC    A(TARESTRT) .
PSW      DC    X'00040000' .        DISABLED PSW
         DC    AL4(0) .
EXITPSW  DC    X'FF040000' .       PSW TO ENTER EXIT AFTER REFRESH
         DC    A(TAHEXIT) .
TFTCHPSW DC    X'00040000' .
         DC    A(IEAQTR04) .
BLDLPSW  DC    X'00040000' .       PSW TO ENTER BLDL PART OF FETCH TASK
         DC    A(TABLDL) .
RTRYPSW  DC    X'00040000' .
         DC    A(TAXRETRY) .       PSW TO ENTER SLIH FOR RETRY
         SPACE
         SPACE
ENABLE   EQU   TTRMASK+2 .
DISABLE  EQU   TTRMASK .
TAUSERCT DC    XL4'00' .          T A USER COUNT
TACTSTRT DC    A(IEAQTAQ+8) .
TACTNEXT DC    A(IEAQTAQ+8) .
TACTEND  DC    A(IEAQTAQ1) .
ZEROUT   DC    X'0000000000000000'                               A35875
EXSAV    EQU   96
         EJECT
         AIF   (NOT &B(2)).TSO015                                 20021
         SPACE 4                                                  20021
         IKJTSCVT                                                 20021
         SPACE 4                                                  20021
*************************                                         20021
*        JOBSTEP CONTROL BLOCK                                    20021
         SPACE                                                    20021
         IEZJSCB                                                  20021
         SPACE 4                                                  20021
.TSO015  ANOP                                                     20021
         AIF   (NOT &B(1)).MVT0900                                20021
         IEAQFX 65,MCH,M65MP                                      20021
.MVT0900 ANOP                                                     20021
         SPACE
         MEND
