* RELEASE 19 CHANGES
* 376000                                                         A22573
*                                                                A27003
*                                                                A28226
* 487200-487400                                                  A28235
* RELEASE 20 CHANGES                                             A28589
* 110200,237000,258000                                           A28589
* 189200-195400 (CP34 MOVED FROM IEX50004 TO IEX500003)          A28589
* START OF IEX50T. LAST PART OF IEX50.                             0216
*     IEX50 CONTAINS A COPY IEX50T MACRO                           0205
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50003, CP51'
         DS    0H
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        COMPILER PROGRAM NR. 51                                      *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   UPPER BOUND HANDLING                                              *
*        CONTEXT              STATEMENT                               *
*        SOURCE OPERATOR      COMMA, RIGHT BRACKET                    *
*        STACK OPERATOR                                               *
*        OPERANDS             UPPER BOUNDARY                          *
*                             LOWER BOUNDARY IN STACK                 *
*                             ARRAY IDENTIFIER                        *
*                                                                     *
         SPACE 3
RF       EQU   14                  REGISTER 14
         SPACE 2
* BIT PATTERNS
         SPACE
SCOMMA   EQU   X'25'                    OPERATOR ,
BOOTYPEM EQU   X'03'                    BOOLEAN TYPE MASK
REALTYPM EQU   X'02'                    REAL TYPE
         SPACE 2
CP51     EQU   *
         USING *,BASE
         LA    RETURN,EQD2              RETURN IF OPERAND MISSING
         BAL   R3,OPDTESF(SBR)          OPERAND TEST
         BAL   RETURN,TARITHM(SBR)      TEST IF OPERAND ARITHMETIC
         B     EQD1                     IF ARITHMETIC
EQD2     LA    OPDK,5(0,OPDK)           CLOPD
EQD3     CLI   0(SOURCE),X'28'          IS IN SOURCE BRACKET
         BE    EQD4                     IF YES BRANCH
         BCTR  OPTK,SBR                 CLOPT    SNOT
EQD4     LA    OPDK,10(0,OPDK)          CLEAR TWO OPERANDS
         SH    OPTK,CON2(0,SBR)         CLEAR TWO OPERATORS
         MVC   KONSUM(2,WAREG),0(OPDK)  OPDK,= OPDK+C(OPDK)
         AH    OPDK,KONSUM(0,WAREG)     REMOVE STACKED ARRAY IDENTIF.
ETB3     LA    OPDK,5(0,OPDK)           CLOPD
         NI    HCOMPMOD(WAREG),X'FE'    OPOFL=FALSE
ETE3     CLI   1(SOURCE),X'2F'          IS SOURCE+1 ZETA
         MVC   GREGN(2,SBR),ZEROHW(WAREG)      CLEAR COUNTER
         BL    ETF2                     BRANCH IF IT IS AN OPERATOR
         BH    ETF4                     BRANCH IF IT IS AN OPERAND
         BAL   R4,JBUFFER(SBR)          CHANGE BUFFER
         B     ETE3
ETF2     LA    SOURCE,1(0,SOURCE)       INCREASE SOURCE BY ONE
         CLI   0(SOURCE),X'25'          IS IN SOURCE KOMMA
         BNE   COMP(0,SBR)              BRANCH TO COMPARE IF NO KOMMA
ETH2     BR    SBR                      SNOT
ETF4     BAL   RETURN,SERR1(0,SBR)      ERROR 170
         DC    H'191'                    ERROR 191 170 NOT EXISTING
         BR    SBR
EQD1     TM    HCOMPMOD(WAREG),X'80'    CMT
         BO    EQD2                     BRANCH IF FALSE
*  COMPLIE  MODE  TRUE
         BAL   RETURN,OPDREC(0,SBR)     OPERAND RECOGNIZER
         TM    1(OPDK),INTEGM           OPERAND INTEGER
         BO    EQG1                     YES
         BAL   RETURN,TRREIN(0,SBR)     GENERATE A CALL TO CONVERSION
*                                       *REAL INTEGER
         AH    P,ONEENTRY(0,WAREG)      RESERVE PLACE FOR OPERAND
         STH   P,WORKPL(0,WAREG)
         BAL   RETURN,MAXCH(0,SBR)      CHECK MAX
         STH   P,EQF2+2                 INSERT DISPL.IN STORE INSTR.
         BAL   INFORM,GENTXT4(0,SBR)     GENERATE AN INSTR. TO
EQF2     ST    STH,DISP(CDSA,0)         *STORE STH
         MVC   0(2,OPDK),INTEGTYP       INTERNAL NAME,INTEGER IN STACK
         STH   P,SPBNST+2(WAREG)
         MVC   2(3,OPDK),SPBNST+1(WAREG)
EQG1     BAL   RETURN,MOVEOPDK(SBR)     RESERVE ONE OPDK ENTRY
         MVC   0(5,OPDK),10(OPDK)       MOVE LOWER BOUNDRY
         MVI   10(OPDK),X'C0'           ITAB IDENTIFIER
         MVI   11(OPDK),X'31'           INTEGER VARIABLE
         MVC   12(1,OPDK),SPBNST+1(WAREG)     *CURRENT PBN AND LAST
         MVC   13(2,OPDK),USPEI2(WAREG)     *ENTRY IN SMF TO OPERAND
         MVC   0(2,OPTK),FORMINUS       FOR.= AND - TO OPERATOR STACK
         BAL   RETURN,MOVEOPTK(SBR)     RESERVE ONE OPTK ENTRY
         ST    SOURCE,HHSOURCE          SAVE SOURCE-POINTER
         LA    SOURCE,HTRICK            SET SOURCE TO HTRICK
         LA    CCT,324(0,CCT)           SWITCH TO EXPRESSION CONTEXT
         L     R1,ADDHZB1
         L     BASE,DSCPTAB+4*69(0,SBR)     BRANCH TO CONTROL PROGRAM
         BR    R1                       TO CP 69
* RETURN FROM CP20 AFTER ASSIGNMENT OF UPPER-LOWER BOUNDRY+1 TO SMF
DERE2    EQU   *
         L     SOURCE,HHSOURCE          RESET SOURCE
         TM    HCOMPMOD+2(WAREG),NOTEST
         BO    ERE2                     NO ARRAY BOUND TEST GENERATED
         BAL   INFORM,GENTXT4(0,SBR)     GENERATE AN OBJECT TIME
         BNH   ARRAYBD(0,FSA)           *TEST FOR ARRAY BOUNDRY ERROR
ERE2     EQU   *
         LH    R1,USPEI2(0,WAREG)       COMPUTE AND
         LA    R1,4(0,R1)               *STORE NEXT ENTRY IN
         STH   R1,USPEI2(0,WAREG)       *SMF IN USPEI2
         CLI   0(SOURCE),SCOMMA         MORE BOUND PAIRS LEFT IN ARRAY
         BNE   ERE3                     NO
         MVC   0(2,OPDK),INTEGTYP       OPERAND INTEGR VALUE
         AH    P,ONEENTRY(0,WAREG)
         STH   P,SPBNST+2(0,WAREG)      CURRENT PBN AND NEXT OBJECT
         MVC   2(3,OPDK),SPBNST+1(WAREG)     *TIME STACK DISPL. TO
         SH    P,ONEENTRY(0,WAREG)      *OPERAND IN STACK
         BR    SBR                      SCAN TO NEXT OPERATOR
ERE3     EQU   *                   LAST BOUND PAIR IN THIS ARRAY
         LA    OPDK,5(0,OPDK)           REMOVE ONE OPERAND
         MVI   ERJ4+3,X'01'             DETERMINE AND INSERT
         TM    1(OPDK),BOOTYPEM         *Z=8,4 OR 1 INTO
         BO    ERJ41                    *LOAD
         MVC   ERJ4+2(2),ONEENTRY(WAREG)     *GPRA
         TM    1(OPDK),REALTYPM         *INSTRUCTION
         BO    ERJ41                    *
         MVI   ERJ4+3,X'04'             *
ERJ41    BAL   INFORM,GENTXT6(SBR)      GENERATE
         SR    GPRC,GPRC                *CLEAR REG
ERJ4     LA    GPRA,DISP(0,0)             A LOAD GPRA INSTR.
         SR    R1,R1                    CALCULATE
         IC    R1,USPEI4+1(WAREG)       *LENGTH OF SMF P-PART
         STC   R1,ESE4+1                NUMBER OF SUBSCRIPTS TO CODE
         LA    R1,1(0,R1)               *AND
         SLL   R1,2                     *INSERT
         BCTR  R1,0                     *IN CODE FOR COPY OF
         STC   R1,ESF4+1                *SMF
ESB1     LH    R1,USPEI2(0,WAREG)
         STH   R1,ESD1+2                DISP IN SMF TO INSTR.
         SH    R1,CON4(0,SBR)           NEXT ENTRY IN SMF
         STH   R1,USPEI2(0,WAREG)       *CALCULATED DOWNWARDS
         STH   R1,ESK1+2                INSERT IN CODE
         BAL   INFORM,GENTXT4(0,SBR)     GENERATE
ESD1     ST    GPRA,DISP(CDSA,0)        *A STORE OF P(4)
         LH    R1,USPEI4(0,WAREG)       REDUCE DIMENSION
         BCTR  R1,0                     *COUNT
         LTR   R1,R1                    CODE FOR LAST ENTRY P(1) GEN
         BL    ESC2                     YES
         STH   R1,USPEI4(0,WAREG)       STORE DIMENSION VALUE
         STH   P,ESH1+2                 INSERT DISPL.OF LOWER BOUND
         SH    P,ONEENTRY(0,WAREG)      RELEASE OBJECT TIME STACK
         LA    INFORM,ESE1              GENERATE CODE FOR
         BAL   LENGTH,GENTXTS(0,SBR)     *PETERMINE OF SMF
         DC    H'12'                     *
         B     ESB1                     CONTINUE TO NEXT ENTRY IN SMF
ESC2     LA    OPDK,5(0,OPDK)           REMOVE ARRAY IDENTIFIER
         BCTR  OPTK,0                   REMOVE ARRAY OPERATOR
         MVC   USPEI4(2,WAREG),0(OPDK)     NUMBER OF PREVIOUSLY
*                                       *STACKED ARRAY IDENT.TO WORKAR
ESE21    LH    RF,USPEI2(0,WAREG)
ESE22    STH   RF,ESE3+2                SMF DISPL. FOR LAST ELEMENT+1
         SH    RF,CON4(0,SBR)
         STH   RF,ESJ2+2                SMF DISPL. FOR FIRST ELEMENT
         SH    RF,CON4(0,SBR)
         STH   RF,ESC3+2                SMF DISPL. FOR ZERO ELEMENT
         SH    RF,CON4(SBR)             SMF-DISPL FOR START OF SMF
         STH   RF,ESE5+8                *TO CODE
         STH   RF,ESE5+2                *
         MVZ   ESE5+2(1),ESE5+4         *
         MVC   ESE4+2(2),ESE5+2         *
         LA    INFORM,ESE2              GENERATE CODE FOR RESERVATION
         BAL   LENGTH,GENTXTS(0,SBR)    *OF MAIN STORAGE FOR ARRAY
         DC    Y(ESE4-ESE2+4)           LENGTH OF GENERATED CODE
         LH    R1,USPEI4(0,WAREG)       ANY ARRAY IDENT. WITH SAME
         SH    R1,CON5(0,SBR)           *DIMENSIONS LEFT IN STACK
         BM    ETB3                     NO
         STH   R1,USPEI4(0,WAREG)       SAVE NUMBER OF ARRAYS LEFT
         LA    OPDK,5(0,OPDK)           CLEAR OPERAND
         NC    ESF4+4(2),CLEARDIS(WAREG)     SMF+16 OF ORIGINAL ARRAY
         OC    ESF4+4(2),ESD1+2         *INSERTED AS DISPLAC.
         MVC   WORKPL(2,WAREG),3(OPDK)
         NI    WORKPL(WAREG),X'0F'
         LH    R1,WORKPL(0,WAREG)
         LA    RF,16(0,R1)
         STH   RF,ESF4+2                NEW SMF -DISP +16
         OI     ESF4+2,CDSA*16          REGISTER CDSA TO CODE
         BAL   INFORM,GENTXT6(0,SBR)
ESF4     MVC   DISP(0,CDSA),DISP(CDSA)
         SH    RF,CON4(0,SBR)           NEW USPEI4 TO R1=SMF-DISP+12
         B     ESE22
*CODE FOR RESERVATION OF MAIN STORAGE FOR ARRAY
ESE2     LR    0,GPRA
         BAL   ADR,GETMSTO(FSA)         CALL GETMAIN ROUTINE IN FSA
ESJ2     ST    1,DISP(CDSA,0)
         LR    STH,1
         SR    1,GPRC
ESC3     ST    1,DISP(CDSA,0)
         AR    STH,GPRA
ESE3     ST    STH,DISP(CDSA,0)
ESE5     MVC   0(4,CDSA),12(CDSA)       MOVE CHAINING ADDRESS
         LA    ADR,0(0)                 STORE DISPL. OF LAST SMF
         ST    ADR,12(CDSA)             *IN DSA
ESE4     MVI   0(CDSA),0                NUMBER OF SUBSCRIPTS TO SMF
ESE1     LR    GPRB,GPRA                CODE FOR DETERMINE OF
ESH1     M     GPRB-1,DISP(CDSA,0)      *SMF
         AR    GPRC,GPRB                *
ESK1     M     GPRA-1,DISP(CDSA,0)      *
         SPACE 2
*CONSTANTS AND VARIABLES
         SPACE
FORMINUS DC    X'2D01'                  FOR.= AND - OPERATORS
HTRICK   DC    X'00'                    +
         DC    X'C801000004'            1 AS INTEGER CONSTANT
         DC    X'1C'                    DO
HHSOURCE DS    F                        SAVE AREA FOR SOURCE
ADDHZB1  DC    A(DHZB1)                 ADRESS IN CP 69
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50003, CP52'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        COMPILER PROGRAM NR. 52                                      *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   ARRAY DECLARATION, BEGINNING                                      *
*        CONTEXT              STATEMENT                               *
*        SOURCE OPERATOR      LEFT BRACKET, COMMA                     *
*        STACK OPERATOR       ARRAY                                   *
*        OPERAND              ARRAY IDENTIFIER                        *
*                                                                     *
         SPACE 3
CP52     EQU   *
         USING *,BASE
         CLI   0(SOURCE),SCOMMA         2S SOURCE A COMMA
         BNE   EWF1                     NO,LAST ARRAY IDENTIFIER
         LH    GREG,GREGN(SBR)
         LA    GREG,5(GREG)             COUNT ARRAY IDENTIFIERS
         STH   GREG,GREGN(SBR)
         BR    SBR                      SNOT
EWF1     BAL   RETURN,MOVEOPTK(SBR)     RESERVE ONE OPTK ENTRY
         MVI   0(OPTK),X'2C'            OPTH(SPEC. BRACKET)
         SH    OPDK,CON10(0,SBR)        OPDK IS DECREASED BY TEN
         CR    OPTK,OPDK                CHECK OVERFLOW
         BNL   STACKOFL(0,SBR)
         MVC   5(5,OPDK),10(OPDK)       MOVE ARRAY IDENTIFIER
         MVC   10(2,OPDK),GREGN(SBR)      NUMBER OF ARRAY IDENTIFIERS-1
*                                      TO OPERAND STACK
*  CALCULATE AND SAVE NUMBER OF SUBSCRIPTS IN USPE14
         SR    R1,R1
         IC    R1,8(OPDK)
         SRL   R1,4
         LA    R1,1(R1)
         STH   R1,USPEI4(WAREG)
*  CALCULATE AND SAVE SMF DISPL +16 IN USPE12
         MVC   USPEI2(2,WAREG),8(OPDK)
         NI    USPEI2(WAREG),X'0F'
         LH    R1,USPEI2(WAREG)
         LA    R1,16(R1)
         STH   R1,USPEI2(WAREG)
         MVC   0(2,OPDK),INTEGTYP       OPERAND INTEGER VALUE IN STACK
         AH    P,ONEENTRY(0,WAREG)      NEXT OBJECT TIME ENTRY
         STH   P,SPBNST+2(0,WAREG)      CURRENT PBN AND
         MVC   2(3,OPDK),SPBNST+1(WAREG)     *DISPL TO OPERAND STACK
         SH    P,ONEENTRY(0,WAREG)      RELEASE OBJECT TIME STACK
         BR    SBR                      SCAN TO NEXT OPERATOR
         SPACE 2
*CONSTANTS AND VARIABLES
         SPACE
INTEGTYP DC    X'4031'                  INTEGER TYPE VARIABLE
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50003, CP54'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        C O M P I L E R   P R O G R A M   N R . 5 4                  *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   ARRAY DECLARATION, TERMINATION                                    *
*        CONTEXT              STATEMENT                               *
*        SOURCE OPERATOR      DELTA                                   *
*        STACK OPERATOR       ARRAY                                   *
*        OPERAND              NONE                                    *
*                                                                     *
         SPACE 3
CP54     EQU   *
         USING *,BASE
         TM    HCOMPMOD(WAREG),X'01'    OPDT
         BO    FAC2                     BRANCH IF TRUE
FAE2     BCTR  OPTK,0                   CLOPT
         BAL   RETURN,SCHDL(0,SBR)      SEMICOLON HANDLING
         SH    CCT,CON290(0,SBR)        SWITCH TO PROGRAM CONTEXT
         BR    SBR                      SNOT
FAC2     BAL   RETURN,SERR4(0,SBR)      ERR.PATTERN ENTRY
         DC    H'164'                   WITH ERR.NR.164
         LA    OPDK,5(0,OPDK)           CLOPD
         B     FAE2
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50003, CP56'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        C O M P I L E R   P R O G R A M   N R . 5 6                  *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   DESIGNATIONAL EXPRESSIONS                                         *
*        CONTEXT              STATEMENT                               *
*        SOURCE OPERATOR      (                                       *
*        STACK OPERATOR       GOTO, SWITCH =                          *
*        OPERAND              NONE                                    *
*                                                                     *
         SPACE 3
CP56     EQU   *
         USING *,BASE
FEB1     TM    HCOMPMOD(WAREG),X'01'    OPDT
         BO    FEB2
FEC1     LA    CCT,324(0,CCT)           CSW(EXP)
         BAL   RETURN,MOVEOPTK(SBR)     OPTH(SOURCE)
         MVC   0(1,OPTK),0(SOURCE)
         BR    SBR                      SNOT
FEB2     BAL   RETURN,SERR4(0,SBR)      ERR.PATTERN ENTRY
         DC    H'164'                   WITH ERR.NR.164
         LA    OPDK,5(0,OPDK)           CLOPD
         NI    HCOMPMOD(WAREG),X'FE'    OPDFL=FALSE
         B     FEC1
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50003, CP59'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        C O M P I L E R   P R O G R A M   N R   5 9                  *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   SWITCH LIST HANDLING                                              *
*        CONTEXT              STATEMENT                               *
*        SOURCE OPERATOR      COMMA, DELTA                            *
*        STACK OPERATOR       SWITCH =                                *
*        OPERANDS             DESIGNATIONAL OPERAND (NTH PARAMETER)   *
*                             PARAMETERCOUNT AND PRPOINT (N-1 ENTRIES(*
*                             SWITCH IDENTIFIER                       *
*                             LABEL OPERAND                           *
*                                                                     *
         SPACE 3
         USING *,BASE
CP59     EQU   *
         LA    RETURN,FKJ2              RETURN IF OPERAND MISSING
         BAL   R3,OPDTESF(SBR)          OPERAND TEST
         TM    1(OPDK),X'08'            IS OPERAND A LABEL
         BZ    FKC2                     IF NOT BRANCH TO ERROR 175
         TM    0(OPDK),APIMASK
         BO    FKJ2
         TM    1(OPDK),X'04'            SWITCH IDENTIFIER
         BO    FKC2                     YES ERROR
         TM    HCOMPMOD(WAREG),X'80'    CMT
         BO    FKJ2                     BR IF FALSE
         BAL   RETURN,OPDREC(SBR)       OPERANDRECOGNIZER
         TM    3(OPDK),ADR*16           DESIGNATIONAL EXPRESSION
         BO    FKH2                     YES
*
*              GENERATE LLC (LOAD LABEL COMMON)
*
         MVN   FKG15+2(1),3(OPDK)
         MVC   FKG15+3(1),4(OPDK)
         BAL   INFORM,GENTXT4(SBR)
FKG15    L     ADR,0(LAT)               **GENERATED CODE**
         SR    TEMP,TEMP
         IC    TEMP,2(OPDK)
         CH    TEMP,SPBNST(WAREG)       CURRENT BLOCK
         BNE   FKG14                    NO
         BAL   INFORM,GENTXT2(SBR)      LOAD GDSA WITH CDSA
         LR    GDSA,CDSA                **GENERATED CODE**
         B     FKH1
FKG14    SLL   TEMP,3
         STH   TEMP,FKG16+2
         BAL   INFORM,GENTXT4(SBR)
FKG16    L     GDSA,0(PBT)              **GENERATED CODE**
         SPACE
FKH1     EQU   *
         BAL   INFORM,GENTXT4(SBR)      GENERATE BRANCH TO CSWE-ROUTINE
         B     CSWE2(FSA)               **GENERATED CODE**
         SPACE
         ST    PRPOINT,WORKPL(WAREG)    NEXT THUNK ADDR
         MVC   2(3,OPDK),WORKPL+1(WAREG)                TO OPERAND STCK
         SPACE
FKJ2     EQU   *
         IC    TEMP,6(OPDK)             UPDATE
         LA    TEMP,5(TEMP)                    SLSWE
         STC   TEMP,1(OPDK)             STORE IN STACK
         MVI   0(OPDK),X'00'
         CLI   0(SOURCE),DELTA          IS SOURCE OPERATOR DELTA
         BCR   7,SBR                    IF NOT BRANCH TO SNOT
         SPACE
FKF3     EQU   *
         SR    TEMP,TEMP
         IC    TEMP,1(OPDK)             TEMP = NR OF ELEMENTS * 5
         LA    TEMP,5(TEMP,OPDK)        TEMP POINTS AT SWITCH ID
         ST    TEMP,WORKPL(WAREG)
         ST    TEMP,STENTRY
         MVC   HALFW(2,WAREG),3(TEMP)   GET
         LH    RF,HALFW(WAREG)              LABEL
         N     RF,HEXFFF(SBR)                     NUMBER
         A     RF,LATAB(WAREG)          GET LAT ENTRY OF SWITCH
         ST    PRPOINT,0(RF)            STORE PRPOINT IN LAT
         SPACE
FKF41    SR    R1,R1
         IC    R1,3(TEMP)               GET
         SRL   R1,4                         ELEMENT
         LA    R1,1(R1)                             COUNT
         STH   R1,FKF42+2               STORE IN GENERATED CODE
         TM    3(R14),X'02'             IS LIST ON WORD BOUNDRY
         BZ    FKF42-4                  YES
         BAL   INFORM,GENTXT2(SBR)      NO OPERATION
         BCR   0,0                      **GENERATED CODE**
         ST    PRPOINT,0(R14)           ADJUST LAT ENTRY
         BAL   INFORM,GENTXT4(SBR)      GENERATE ELEMENT COUNT
FKF42    DC    H'0',H'0'                **GENERATED CODE**
         SPACE
         MVC   HALFW(2,WAREG),0(OPDK)   INITIALIZE PARAM COUNT
         SPACE
FKF45    EQU   *                        GENERATE ONE THUNK ADDRESS
         L     TEMP,STENTRY
         SH    TEMP,CON5(SBR)
         ST    TEMP,STENTRY
         ST    PRPOINT,FKF48            SAVE PRPOINT
         MVC   FKF46+1(3),2(TEMP)
         CNOP  0,4
         BAL   INFORM,GENTXT4(SBR)      GENERATE TXT-RECORD
FKF46    DC    F'0'                     **GENERATED CODE**
         L     INFORM,FKF48
         BAL   LENGTH,GENRLD(SBR)       GENERATE RLD-RECORD
         DC    H'4'
         DC    H'1'
         DC    H'1'
         SPACE
         LH    TEMP,HALFW(WAREG)        DECREASE
         SH    TEMP,CON5(SBR)                    PARAM
         STH   TEMP,HALFW(WAREG)                       COUNT
         BP    FKF45                    BRANCH IF COUNT NOT ZERO
         SPACE
         L     TEMP,WORKPL(WAREG)
         LA    OPDK,15(TEMP)            CLEAR OPERANDSTACK
         MVC   HALFW(2,WAREG),8(TEMP)   GET
         LH    TEMP,HALFW(WAREG)            LAT
         A     TEMP,LATAB(WAREG)                ENTRY
         ST    PRPOINT,0(TEMP)          STORE PRPOINT IN LAT
         SPACE
         BCTR  OPTK,0                   CLOPT
         BAL   RETURN,SCHDL(SBR)        SEMIC COUNTER HANDLING
         L     CCT,PRC(SBR)             SWITCH TO PROGRAM CONTEXT
         BR    SBR                      TO SNOT
         SPACE
FKH2     SH    P,ONEENTRY(WAREG)
         MVI   RII(WAREG),X'00'         REGISTER ADR FREE
         B     FKH1
         SPACE
FKB25    BAL   RETURN,STACKAPI(SBR)     INTRODUCE API
         B     FKJ2
         SPACE
FKC2     BAL   RETURN,SERR2(SBR)
         DC    H'175'
         LA    OPDK,5(OPDK)             PREPARE FOR INSERTING API
         B     FKB25
         SPACE 2
* WORKAREAS
         SPACE
STENTRY  DS    F                        WORK AREA
FKF48    DS    F
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50003, CP62'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        C O M P I L E R   P R O G R A M   N R   6 2                  *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   GOTO STATEMENT                                                    *
*        CONTEXT              STATEMENT                               *
*        SOURCE OPERATOR      EPSILON, ETA, ;, END, ELSE              *
*        STACK OPERATOR       GOTO                                    *
*        OPERAND              DESIGNATIONAL OPERAND                   *
*                                                                     *
         SPACE 3
         USING *,BASE
CP62     EQU   *
         LA    RETURN,FXJ1              RETURN IF OPERAND MISSING
         BAL   R3,OPDTESF(SBR)          OPERAND TEST
         TM    1(OPDK),X'08'            IS OPD LABEL
         BZ    FXC2                     BRANCH IF OPD IS NOT A LABEL
         TM    1(OPDK),X'04'
         BO    FXC2
         TM    HCOMPMOD(WAREG),X'80'    CMT
         BO    FXJ1                     FALSE
         SPACE
         BAL   RETURN,OPDREC(SBR)
         TM    3(OPDK),ADR*16           DESIGNATIONAL EXPRESSION
         BO    FXE4                     YES
         CLC   SPBNST+1(1,WAREG),2(OPDK)    TEST IF CURRENT PBN
         BNE   FXG3                     BR IF NOT
         SPACE
         MVN   FXH15+2(1),3(OPDK)
         MVC   FXH15+3(1),4(OPDK)
         BAL   INFORM,GENTXT6(SBR)      GENERATE BRANCH TO LABEL
FXH15    L     BRR,0(LAT)               **GENERATED CODE**
         BR    BRR                      **GENERATED CODE**
         B     FXJ1
         SPACE 2
*              GENERATE LLC (LOAD LABEL COMMON)
         SPACE
FXG3     MVN   FXG35+2(1),3(OPDK)
         MVC   FXG35+3(1),4(OPDK)
         BAL   INFORM,GENTXT4(SBR)
FXG35    L     ADR,0(LAT)               **GENERATED CODE**
         SR    TEMP,TEMP
         IC    TEMP,2(OPDK)
         SLL   TEMP,3
         STH   TEMP,FXG36+2
         BAL   INFORM,GENTXT4(SBR)
FXG36    L     GDSA,0(PBT)              **GENERATED CODE**
         B     FXH2
         SPACE
FXJ1     LA    OPDK,5(0,OPDK)           CLOPD
         NI    HCOMPMOD(WAREG),X'FE'    OPDFL=FALSE
         MVI   GPBN+1(WAREG),X'FF'      GDSA UNDEFINED
         BCT   OPTK,COMP(0,SBR)         CLOPT AND COMP
         SPACE
FXC2     TM    0(OPDK),APIMASK          ALL PURPOUSE IDENTIFYER
         BO    FXJ1                     YES
         BAL   RETURN,SERR2(SBR)
         DC    H'175'
         B     FXJ1
FXE4     SH    P,ONEENTRY(WAREG)        RELEASE STACK
         XI    RII(WAREG),RIIADRM       REG ADR FREE
         SPACE 2
*              GENERATE UNCONDITIONAL JUMP TO COMMON LABEL, 'UJTCL'
         SPACE
FXH2     BAL   INFORM,GENTXT4(SBR)
         B     RETPROL(FSA)             **GENERATED CODE**
         B     FXJ1
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50003, CP85'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        C O M P I L E R   P R O G R A M   N R   8 5                  *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   BEGIN OF SWITCH LIST                                              *
*        CONTEXT              PROGRAM                                 *
*        SOURCE OPERATOR       =                                      *
*        STACK OPERATOR       SWITCH                                  *
*        OPERANDS             NR OF SWITCH EL * 5 AND PRPOINT         *
*                             SWITCH IDENTIFIER                       *
*                             LABEL OPERAND                           *
*                                                                     *
         SPACE 3
         USING *,BASE
CP85     EQU   *
         SPACE
KSB1     BAL   RETURN,MOVEOPDK(SBR)     RESERVE ONE MORE OPDK ENTRY
         MVC   0(2,OPDK),ZEROHW(WAREG)  INITIAL ZEROES TO SLSWE
         ST    PRPOINT,WORKPL(WAREG)
          MVC   2(3,OPDK),WORKPL+1(WAREG) FIRST THUNKADDR TO STACK
         L     CCT,STC(SBR)             SWITCH TO STATEMENT CONTEXT
         SPACE
         MVC   13(2,OPDK),LN(WAREG)     STORE LN IN OPDK
         SPACE
         MVI   0(OPTK),X'2E'            'SWITCH.=' REPLACES 'SWITCH'
         BR    SBR                      GO TO SNOT
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX0003, CP34'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        C O M P I L E R   P R O G R A M   N R . 3 4                  *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   IF IN STATEMENT CONTEXT                                           *
*        CONTEXT              STATEMENT                               *
*        SOURCE OPERATOR      IF                                      *
*        STACK OPERATOR       GOTO, SWITCH =, PROCEDURE BRACKET,LEFT  *
*                             BRACKET  ST PROC BRACKET, FOR =, STEP,  *
*                             UNTIL, WHILE,  , ARRAY DECL BRACKET,    *
*                             S.E. (SEE MATRIX)                       *
*        OPERAND              NONE                                    *
*                                                                     *
         SPACE 3
CP34     EQU   *
         USING *,BASE
CKB1     TM    HCOMPMOD(WAREG),X'01'    OPDT
         BZ    CKD1                     BRANCH IF FALSE
         BAL   RETURN,SERR4(0,SBR)      ERR.PATTERN ENTRY
         DC    H'164'                   WITH ERR.NR.164
         LA    OPDK,5(0,OPDK)           CLOPD
CKD1     BAL   RETURN,MOVEOPTK(SBR)     OPTH(SOURCE)
         MVC   0(1,OPTK),0(SOURCE)
         LA    CCT,324(0,CCT)           CSW(EXP)
         CLI   0(OPTK),X'1D'
         BNE   0(SBR)
         TM    HCOMPMOD(WAREG),X'80'
         BO    0(SBR)
         BAL   RETURN,CLEARRG(SBR)
         BR    SBR                      SNOT
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50004, CP12'
IEX50004 CSECT
         SPACE 2
* CP12,CP19,CP20,CP21,CP22,CP23,CP33,CP57,CP61                   A28589
* CP64,CP71,CP83,CP84
*
*        OWN DEFINITIONS WITHIN CONTROL SECTION IEX50004
*
RETURNO  EQU   14
TEMP     EQU   15
NOASSIGN EQU   X'08'
INREGBIT EQU   X'40'
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        C O M P I L E R   P R O G R A M   N R   1 2
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   ASSIGNMENT                                                        *
*        CONTEXT              PROGRAM                                 *
*        SOURCE OPERATOR       =                                      *
*        STACK OPERATOR       BEGIN, ;, THENS, ELSES,DO               *
*        OPERAND              LEFT SIDE VARIABLE                      *
*                                                                     *
         SPACE 3
         USING *,BASE
CP12 EQU *
AWC1     TM    HCOMPMOD(WAREG),X'01'    OPDT
         BZ    AWC2                     IF FALSE BRANCH
AWD1     EQU   *                   ENTRY FROM CP21
         TM    0(OPDK),X'08'            IS ASSIGMENT POSSIBLE
         BO    AWD2                     IF NO BRANCH TO AWD2
         TM    0(OPDK),INREGBIT         TEST IF OPD IN REGISTER
          BZ    AWJ1                    BRANCH IF YES
          TM    1(OPDK),X'C0'           TEST IF OPD TYPE PROCED IDENT
          BO    AWF2                    BRANCH IF YES
          TM    1(OPDK),X'20'           TEST IF OPD CALLED BY NAME
         BO    AWJ1                     BRANCH IF NOT
          TM    HCOMPMOD(WAREG),X'80'   CMT
          BO    AWJ1                    BRANCH IF FALSE
*
*              GENERATE ASSIGNMENT CONTROL
*
          BAL   RETURN,ROUTINE1(SBR)    LOAD VPLACE,WPLACE
         LH    R1,WPLACE(0,WAREG)
         LA    R1,4(0,R1)
         STH   R1,AWE45+2
         MVZ   AWE45+2(1),VPLACE(WAREG) INSERT REG INTO CODE
         LA    INFORM,AWE45
         BAL   LENGTH,GENTXTS(SBR)
         DC    H'8'
          BAL   RETURN,OPDREC(SBR)
         MVC   2(1,OPDK),SPBNST+1(WAREG)    CURRENT BLOCK ,NEVER FCTVA
*                                           ALWAYS ADDR, NEVER VALUE
         SPACE
AWJ1     BAL   RETURN,MOVEOPTK(SBR)     OPTH(SOURCE)
         MVC   0(1,OPTK),0(SOURCE)
         BR    SBR
         SPACE
AWC2     BAL   RETURN,SERR3(SBR)
         DC    H'176'
         SPACE 2
AWC4     EQU   *                   ENTRY FROM CP21
         BAL   RETURN,STACKAPI(SBR)
         B     AWJ1
         SPACE
AWD2     BAL   RETURN,SERR1(SBR)        ERROR NR 190
         DC    H'190'
         LA    OPDK,5(OPDK)             TO PREPARE STACKAPI
         B     AWC4                     BRANCH
         SPACE 2
AWF2     EQU   *                   CHANGE INT NAME TO OBJ T STACK NAME
         MVI   0(OPDK),X'C0'
         NI    1(OPDK),X'03'
         OI    1(OPDK),X'30'
         MVI   3(OPDK),X'00'
         MVI   4(OPDK),X'18'            DISPL IS 24
         B     AWJ1
         SPACE
AWE45    TM    0(CDSA),X'08'            **GENERATED CODE**
         BO    OERR22(FSA)              **GENERATED CODE**
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50004, CP19'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        C O M P I L E R   P R O G R A M   N R . 1 9                  *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   IF IN ASSIGNMENT STATEMENT                                        *
*        CONTEXT              PROGRAM                                 *
*        SOURCE OPERATOR      IF                                      *
*        STACK OPERATOR        =                                      *
*        OPERAND              NONE                                    *
*                                                                     *
         SPACE 3
         USING *,BASE
CP19     EQU   *
         SPACE 2
BGB1     LA    CCT,290(0,CCT)           CSW(STC)
         B     COMP(0,SBR)              COMPARE
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50004, CP20'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        C O M P I L E R   P R O G R A M   N R   2 0
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   ASSIGNMENT                                                        *
*        CONTEXT              PROGRAM                                 *
*        SOURCE OPERATOR      ;, EPSILON, ETA, END, ELSE              *
*        STACK OPERATOR        =                                      *
*        OPERAND              RIGHT SIDE OPERAND                      *
*                                                                     *
         SPACE 3
CP20     EQU   *
         USING *,BASE
         SPACE 2
         LA    RETURN,BIG2
         BAL   R3,OPDTEST(0,SBR)
         BAL   RETURN,ARRTEST1(0,SBR)
         TM    1(OPDK),X'03'            IS OPD.BOOL.,REAL OR INTEGER
         BZ     BIE3                    ERROR IF NOT
         SPACE
BIC2     EQU   *
DBIC2    EQU   *
         SPACE
         TM    1(OPDK),X'04'
         BO    BIE32
         TM    HCOMPMOD(WAREG),X'80'    COMPILE MODE TEST
         BO   BIE4                      FALSE
         TM    0(OPDK),INREGBIT         TEST IF OPD 'IN REGISTER'
         BZ    BID4                     BRANCH IF YES
         BAL   RETURN,OPDREC(SBR)       OPERANDRECOGNIZER
         B     BID4
         SPACE
         SPACE
BIG2     EQU   *
DBIG2    EQU   *
         SPACE
         BCTR  OPTK,0                   CLEAR OPERATOR
         SPACE 2
         CLI   0(OPTK),X'18'            TEST IF 'FOR'
         BNE   BIJ2                     BRANCH IF NOT
         LA    OPDK,5(OPDK)             RELEASE OPERAND
         L     R1,ADJH1E43              GO
         L     BASE,DSCPTAB+4*6(SBR)       TO
         BR    R1                              CP43
         SPACE 2
BIJ2     EQU   *
         CLI   0(OPTK),X'2C'            TEST IF ARRAYBRACKET
         BNE   BIK2                     BRANCH IF NOT
         LA    OPDK,5(OPDK)             CLEAR OPERAND
         L     R1,ADERE2                GO
         L     BASE,DSCPTAB+4*51(SBR)      TO
         BR    R1                             CP51
         SPACE 2
BIK2     EQU   *
         CLI   0(OPTK),X'16'            TEST IF OPERATOR IS 'ASSIGN'
         BE    BIK1                     BRANCH IF YES
         SPACE 2
BIK5     EQU   *
         NI    HCOMPMOD(WAREG),X'FE'    OPDFLAG = FALSE
         LA    OPDK,10(OPDK)            CLEAR OPERAND TWICE
         B     COMP(SBR)                TO COMPARE
         SPACE 2
BIK1     EQU   *                   RESTORE P, RII, RIR, CII, CIR
         LH    P,STRDP
         MVC   CII(8,WAREG),STRDCIRI
         MVC   5(5,OPDK),0(OPDK)        MOVE LAST OPD TO NXT LAST SPOT
         LA    OPDK,5(OPDK)             CLEAR OPERAND              5601
         TM    RII(WAREG),RIIADRM       ADR OCCUPIED               5601
         BZ    BIK3                     NO                         5601
         C     OPDK,RUTI+32(0,WAREG)                               5601
         BNE   BIK3                                                5601
         MVI   RII(WAREG),X'00'         RELEASE 'ADR' IN REG USE TABLE
BIK3     TM    0(OPDK),X'20'                                       5601
         BZ    BIC2
         TM    0(OPDK),X'40'
         BO    BIC2
         MVI   RII(WAREG),X'01'
         ST    OPDK,RUTI+32(WAREG)
         B     BIC2
         SPACE 2
BID4     TM    5(OPDK),NOASSIGN         TEST NO-ASSIGNMENT BIT
         BO    BIE31                    ERROR IF NO-ASSIGNMENT BIT
         SPACE 2
BIE4     TM    1(OPDK),X'03'            TEST TYPE BITS
         BZ    BIE3                     ERROR IF ZEROES IN TYPE FIELD
         BM    BIAE2                    BR IF MIXED (=NOT BOOLEAN)
         SPACE
         TM    6(OPDK),X'03'            IS NEXT LAST OPD BOOLEAN
         BC    12,BIE34                 BRANCH IF NOT BOOLEAN
         TM    HCOMPMOD(WAREG),X'80'    CMT
         BO    BIG2                     FALSE
         SPACE 2
BIG5     EQU   *                   GENERATE BOOLEAN ASSIGN
         TM    0(OPDK),X'C0'
         BC    12,BIBG1
         TM    1(OPDK),X'30'            TEST IF RIGHT OPD BOOL CONST
         BC    5,BIBG1                  BRANCH IF NOT A CONSTANT
         SPACE 2
BIAH16   EQU   *                   GENERATE ASSIGN, RIGHT OPD BOOL CON
         BAL   RETURN,SAVECIRI
         LA    OPDK,5(0,OPDK)
         TM    0(OPDK),X'20'
         BO    BIAH161
         BAL   RETURN,ROUTINE1(0,SBR)
BIAH162  SH    OPDK,CON5(0,SBR)
         MVC   BIAH18+2(2),WPLACE(WAREG)
         MVZ   BIAH18+2(1),VPLACE(WAREG)
         NI    4(OPDK),X'01'
         MVC   BIAH18+1(1),4(OPDK)      INSERT CONSTANT TO CODE
         BAL   INFORM,GENTXT4(SBR)
BIAH18   MVI   0(0),X'00'               **GENERATED CODE**
         B     BIG2
BIAH161  BAL   RETURN,ROUTINE3(0,SBR)
         B     BIAH162
         SPACE 2
BIAE2    TM    6(OPDK),X'03'            IS LAST OPD NONBOOLEAN
         BM    BIBA1                    BR IF MIXED,ERROR OTHERWISE
         SPACE 2
         TM    5(OPDK),APIMASK          IS BLO AN API              5603
         BO    BIG2                     BRANCH IF API
BIE33    BAL   RETURN,SERR1(0,SBR)
         DC    H'193'
         B     BIG2
BIE34    TM    0(OPDK),APIMASK          IS LO AN API               5603
         BO    BIG2                     BRANCH IF API
         B     BIE33
BIE31    TM    5(OPDK),APIMASK          IS BLO AN API              5603
         BO    BIG2                     BRANCH IF API
BIE3     BAL   RETURN,SERR1(SBR)
         DC    H'192'
         B     BIG2
BIE32    TM    0(OPDK),APIMASK          IS LO AN API               5603
         BO    BIG2                     BRANCH IF API
         B     BIE3
         SPACE 2
BIBA1    EQU   *
         TM    HCOMPMOD(WAREG),X'80'    CMT
         BO    BIG2                     FALSE
         SPACE
         TM    6(OPDK),X'02'            IS NXT LAST OPD 'REAL'
         BZ    BICA1                    BR IF NOT
         SPACE
         TM    1(OPDK),X'02'            IS LAST OPERAND 'REAL'
         BO    BIBG1                    BR IF YES
         SPACE
         BAL   RETURN,TRINRE(SBR)       GENERATE INTEGER-REAL CONV
         SPACE 2
BIBG1    EQU   *                   GENERATE 'ASSIGN REAL'
         BAL   RETURN,SAVECIRI
         L     R1,ADHEB2
         L     BASE,DSCPTAB+4*69(SBR)
         BR    R1
         SPACE 2
BICA1    EQU   *                   IS LAST (RIGHT) OPERAND 'REAL'
         TM    1(OPDK),X'02'
          BZ    BICF1                   BR IF NOT
         SPACE
         BAL   RETURN,TRREIN(SBR)       GENERATE REAL-INTEGER CONV
         BAL   RETURN,ROUTINE7(SBR)     GET NEXT FREE REGISTER
         SLA   R14,2
         ST    OPDK,RUTI(WAREG,R14)     OPDK TO REG USAGE TABLE
         SLA   R14,2
         LA    R14,STH(R14)
         STC   R14,BICA15+1             REGISTER NR TO INSTRUCTION
         BAL   INFORM,GENTXT2(SBR)
BICA15   LR    0,0                      **GENERATED CODE**
         SPACE
         MVI   0(OPDK),X'88'
         MVI   1(OPDK),X'31'
         MVC   2(1,OPDK),SPBNST+1(WAREG)
         STH   P,HALFW(WAREG)
         MVC   3(2,OPDK),HALFW(WAREG)
         MVZ   3(1,OPDK),BICA15+1
         SPACE 2
BICF1    EQU   *                   GENERATE 'ASSIGN INTEGER'
         BAL   RETURN,SAVECIRI
         L     R1,ADHZB1
         L     BASE,DSCPTAB+4*69(SBR)
         BR    R1
         SPACE 2
RELOSREG EQU   *                   RELEASE OBJ T STACK ENTRY AND REG
         TM    0(OPDK),X'C0'
         BCR   1,RETURN                 RETURN IF IDENT FROM ITAB
         SH    P,ONEENTRY(WAREG)        RELEASE ONE OBJ T STACK ENTRY
         TM    0(OPDK),INREGBIT
         BCR   1,RETURN                 RETURN IF OPD NOT 'IN REGISTER'
         NI    RII(WAREG),X'FE'         RELEASE 'ADR' IN REG USE TABLE
          BR   RETURN
         SPACE 2
SAVECIRI EQU   *                   SAVE P, CII, CIR, RII, RIR
         STH   P,STRDP
         MVC   STRDCIRI(8),CII(WAREG)
         BR    RETURN
         SPACE
STRDP    DS    H
STRDCIRI DS    8C
         SPACE 2
ADHEB2   DC    A(DHEB2)
ADHZB1   DC    A(DHZB1)
ADERE2   DC    A(DERE2)            ENTRY TO CP51, BASE CP51
ADJH1E43  DC   A(DJH1E43)          ENTRY TO CP43, BASE CP6
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50004, CP21'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        C O M P I L E R   P R O G R A M   N R . 2 1                  *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   MULTIPLE ASSIGNMENT                                               *
*        CONTEXT              PROGRAM                                 *
*        SOURCE OPERATOR       =                                      *
*        STACK OPERATOR        =                                      *
*        OPERAND              LEFT SIDE VARIABLE                      *
*                                                                     *
         USING *,BASE
CP21     EQU   *
BKB1     TM    HCOMPMOD(WAREG),X'01'    OPDT
         BZ    BKB2                     IF FALSE BRANCH
         IC    R0,1(0,OPDK)             LOAD GPR0,OPDK+1
         IC    R1,6(0,OPDK)             LOAA GPR1,OPDK+6
         N     R0,TYPETEST(0,SBR)       CLEAR FIRST 3O BITS OF GPR0
         N     R1,TYPETEST(0,SBR)       CLEAR FIRST 3O BITS OF GPR1
         L      BASE,DSCPTAB+4*12(SBR)  PREPARE FOR BRANCH TO CP12
         SR    R0,R1                    SUBTRACT
         BZ     AWD1-CP12(BASE)         IF EQUAL BR TO AWD1 IN CP12
         TM    0(OPDK),APIMASK          IS LO AN API               5603
         BCR   1,SBR                    BRANCH TO SNOT IF API
         TM    5(OPDK),APIMASK          IS BLO AN API              5603
         BCR   1,SBR                    BRANCH TO SNOT IF API
         BAL   RETURN,SERR1(0,SBR)      ERR.PATTERN ENTRY
         DC    H'172'                   WITH ERROR NR 172
         B     AWC4-CP12(BASE)          WITH DISPL AWC4
BKB2     BAL   RETURN,SERR4(0,SBR)      ERR.PATTERN ENTRY
         DC    H'162'                   WITH ERR.NR.162
         BR    SBR                      SNOT
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50004, CP22, CP23'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        C O M P I L E R   P R O G R A M   N R . 2 2                  *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   ARITHM OR BOOL EXPRESSION IN ASSIGNMENT STATEMENT                 *
*        CONTEXT              PROGRAM                                 *
*        SOURCE OPERATOR      (, ARITHM OP, BOOL OP, REL OP           *
*        STACK OPERATOR        =                                      *
*        OPERAND              ARRAY OR PROCEDURE IDENTIFIER OR ARITH- *
*                             METIC OR BOOLEAN OPERAND OR NONE        *
*                                                                     *
CP22     EQU   *
         USING *,BASE
BMB1     L     CCT,EXC(SBR)             CSW(EXP)
         B     COMP(0,SBR)              COMPARE
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        C O M P I L E R   P R O G R A M   N R . 2 3                  *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   PARAMETERLESS PROCEDURE STATEMENT OR STATEMENT END                *
*        CONTEXT              PROGRAM                                 *
*        SOURCE OPERATOR      ;, EPSILON, ETA, END                    *
*        STACK OPERATOR       ;                                       *
*        OPERAND              PROCEDURE IDENTIFIER OR NONE            *
*                                                                     *
         USING *,BASE
CP23     EQU   *
BOB1     TM    HCOMPMOD(WAREG),X'01'    OPDT
         BZ    BOD1                     IF FALSE BRANCH
         BAL   RETURN,PLPRST(SBR)
         LA    OPDK,5(0,OPDK)
         NI    HCOMPMOD(WAREG),X'FE'
BOD1     CLI   0(SOURCE),X'0B'          IS IN SOURCE SEMICOLON
         BNE   BOE1                     IF NOT BRANCH
         BAL   RETURN,SCHDL(0,SBR)      ENTER SEMICOLON HANDLING
         BR    SBR                      SNOT
BOE1     BCT   OPTK,COMP(0,SBR)         CLOPT AND COMP
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50004, CP33, CP34'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        C O M P I L E R   P R O G R A M   N R . 3 3                  *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   ARITHMETIC OR BOOLEAN EXPRESSIONS IN STATEMENT CONTEXT            *
*        CONTEXT              STATEMENT                               *
*        SOURCE OPERATOR      ARITHM OR BOOLEAN OR RELATIONAL OPERATOR*
*        STACK OPERATOR       PROCEDURE BRACKET, LEFT BRACKET,        *
*                             ST PROC BRACKET,FOR =, STEP, UNTIL,     *
*                             WHILE,  , ARRAY DECL BRACKET            *
*        OPERAND              ARITHMETIC OR BOOLEAN OPERAND           *
*                                                                     *
CP33     EQU   *
         USING *,BASE
CIB1     LA    CCT,324(0,CCT)           CSW(EXP)
         B     COMP(0,SBR)              COMPARE
         SPACE 3
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50004, CP57'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        C O M P I L E R   P R O G R A M   N R   5 7
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   PROCEDURE CALL                                                    *
*        CONTEXT              STATEMENT                               *
*        SOURCE OPERATOR      , OR )                                  *
*        STACK OPERATOR       PROCEDURE BRACKET                       *
*        OPERANDS             ACTUAL PARAMETER                        *
*                             PARAMETER COUNT AND PRPOINTER AT CALL   *
*                             PAR CHAR AND PRPOINTER AT NEXT THUNK ADR*
*                             LABEL NUMBER                            *
*                             PROCEDURE IDENTIFIER                    *
*                                                                     *
         SPACE 3
         USING *,BASE
CP57     EQU   *
         SPACE 2
*              COMPUTE FOR LATER REFERENCE (FROM SLPAR IN STACK)
*              STACKADDRESS WHICH POINTS TO ENTRY CONTAINING LN
*              (=ONE ENTRY AFTER PROCEDURE IDENTIFIER ENTRY)
*              ALSO, STORE SLPAR (NUMBER OF PARAMETERS TIMES FIVE)
         SPACE
FGAA1    EQU   *
FGAA2    TM    HCOMPMOD(WAREG),X'01'   OPDTEST                     0050
         BZ    FGAB2                   FALSE                       0050
         MVC   STACKST(2),5(OPDK)
         LH    TEMP,STACKST
         LA    TEMP,10(TEMP,OPDK)
         ST    TEMP,STACKST
         MVC   STSLPAR(2),5(OPDK)       MOVE SLPAR
         SPACE
         TM    HCOMPMOD(WAREG),X'80'    COMPILE MODE TEST
         BO    FGAG1                    FALSE
         OI    PROCWPS(SBR),X'80'       NO PARAMETERLESS PROC.CHECK
         BAL   RETURN,OPDREC(SBR)       OPERANDRECOGNIZER
         XI    PROCWPS(SBR),X'80'       SWITCH OFF
         SPACE 2
FGCA1    EQU   *                   LOAD ACTUAL PARAMETER ADDR, 'LAPA'
         TM    0(OPDK),X'20'            TEST IF OPD REPRESENTS ADDRESS
         BO    FGCB3                    YES
         BAL   RETURN,CLEARRG(SBR)      STORE REGS IN OBJ TIME STACK
         BAL   RETURN,DECOMP(SBR)       DECOMPOSE OPERAND
         LH    TEMP,OPDPBN(WAREG)       GET
         SLA   TEMP,3                       PBN
         STH   TEMP,FGCD35+2                   TIMES EIGHT TO GEN CODE
         LH    TEMP,OPDLN(WAREG)        LN
         STH   TEMP,FGCD34+2               TO GENERATED
         STH   TEMP,FGCF34+2                            CODE
         SPACE
         TM    1(OPDK),X'08'            IS OPERAND LABEL OR SWITCH
         BO    FGCD3                    YES
         SPACE
         TM    1(OPDK),X'C0'            IS OPERAND PROCEDURE
         BZ    *+12                     NO PROCEDURE
         TM    0(OPDK),X'80'
         BO    FGCE3
         SPACE
FGCF21   BAL   RETURN,ROUTINE1(SBR)    FIND DISPL AND REG          0050
         MVC   FGCF25+2(2),WPLACE(WAREG)     INSERT DISPL.IN CODE
         MVZ   FGCF25+2(1),VPLACE(WAREG)     INSERT REG.  IN CODE
         BAL   INFORM,GENTXT4(SBR)
FGCF25   LA    ADR,0(0)                 **GENERATED CODE**
         TM    0(OPDK),X'C0'            IDENTIFIER FROM ITAB
         BO    FGAF1                    YES
         SH    P,ONEENTRY(WAREG)        RELEASE STACK ENTRY
         B     FGAF1                    EXIT FROM 'LAPA'
         SPACE
FGCB3    BAL   RETURN,ROUTINE3(SBR)     LOAD REG ADR
         B     FGAF1                    EXIT FROM 'LAPA'
         SPACE
FGCD3    EQU   *                   LABEL OR SWITCH IDENTIFIER
         BAL   INFORM,GENTXT4(SBR)
FGCD34   L      ADR,0(LAT)              **GENERATED CODE**
         BAL   INFORM,GENTXT4(SBR)
FGCD35   L     GDSA,0(PBT)              **GENERATED CODE**
         B     FGAF1                    EXIT FROM 'LAPA'
         SPACE
FGCE3    EQU   *                   PROCEDURE IDENTIFIER
         TM    1(OPDK),X'40'            TEST IF STANDARD PROCEDURE
         BZ    FGCF4                    YES
         SPACE
         TM    3(OPDK),X'F0'            PARAMETERLESS PROCEDURE
         BZ    FGCF33                  YES                         0050
         SPACE
         MVC   FGCF35+1(1),2(OPDK)
         LA    INFORM,FGCF34
         BAL   LENGTH,GENTXTS(SBR)
         DC    H'12'
         B     FGAF1                    EXIT FROM 'LAPA'
FGCF33   TM    1(OPDK),X'20'           Q. CALLED BY VALUE          0050
         BZ    FGAF1                   NO                          0050
         B     FGCF21                  YES                         0050
         SPACE
FGCF34   L     ADR,0(LAT)               **GENERATED CODE**
FGCF35   MVI   PROLPBN(FSA),X'00'       **GENERATED CODE**
         STM   PBT,LAT,PROLREG(FSA)     **GENERATED CODE**
         SPACE
FGCF4    EQU   *                   STANDARD PROCEDURE IDENTIFIER
         TM    4(OPDK),X'80'            IS IT ABS, SIGN, LENGTH, OR ENT
         BO    FGCF41                   YES, NO LAT ENTRY
         IC    TEMP,4(OPDK)             GET
         N     TEMP,FGXFC                   ENTRY
         A     TEMP,LATAB(WAREG)                  IN LAT
         NI    0(TEMP),X'7F'            INSERT ZERO-BIT
         OI    IOTAB+16(WAREG),X'01'    ALL DATA SETS MAY BE NEEDED
         SPACE
FGCF41   LA    TEMP,2(0)                IS PRPOINT
         NR    TEMP,PRPOINT                        AT HALFW BOUNDARY
         BC    4,FGCF42                 YES
         BAL   INFORM,GENTXT2(SBR)
         LR    R1,R1                    **GENERATED 'NO-OP' CODE**
         SPACE
FGCF42   MVC    FGCF45(4),1(OPDK)       INSERT 1ST PART OF ST PROC ID
         LA    INFORM,FGCF44
          BAL  LENGTH,GENTXTS(SBR)
         DC    H'22'
         B     FGAF1                    EXIT FROM LAPA
         SPACE
         CNOP  2,4
FGCF44   BALR  BRR,0                    **GENERATED CODE**
         L     ADR,8(BRR)               **GENERATED CODE**
         B     12(BRR)                  **GENERATED CODE**
FGCF45   DC    F'0'                     **GENERATED CODE**
         MVI   PROLPBN(FSA),X'00'       **GENERATED CODE**
         STM   PBT,LAT,PROLREG(FSA)     **GENERATED CODE***
         SPACE 2
FGAF1    EQU   *                   GENERATE CALL OF CAP2
         BAL   INFORM,GENTXT4(SBR)
         B     CAP2(FSA)                **GENERATED CODE**
         MVI   GPBN+1(WAREG),X'FF'      GDSA IS NOT CONTROLLED
         SPACE 2
FGAG1    MVC   5(2,OPDK),0(OPDK)        PAR CHAR OF LO INTO NXT L OPD
         ST    PRPOINT,WORKPL(WAREG)    NEXT THUNK ADDR
         MVC   2(3,OPDK),WORKPL+1(WAREG)                TO LAST OPD
         LH    TEMP,STSLPAR             UPDATE
         LA    TEMP,5(TEMP)                    SLPAR
         STH   TEMP,STSLPAR             SLPAR TO
         MVC   0(2,OPDK),STSLPAR                 LAST OPERAND
         SPACE
FGBA1    CLI   0(SOURCE),X'26'          IS IN SOURCE RIGHT PARENTHESIS
         BCR   7,SBR                    NO, GO TO SNOT
         SPACE
         L     TEMP,STACKST             GET ADDR OF PROCED ID - 5
         TM    5(TEMP),X'10'            IS PROCEDURE IDENTIFIER API
         BO    FGBD1                    YES, NO PARAMETER NR CHECK
         SR    RETURN,RETURN
         IC    RETURN,8(TEMP)           GET NUMB OF PAR IN PROC IDENT
         SRL   RETURN,4
         SPACE
         LH    R0,STSLPAR               GET NR OF PARAMS TIMES FIVE
         SRDA    R0,32                  COMPUTE
         LH    R2,CON5(SBR)                     NR OF
         DR    R0,R2                                  PARAMETERS
         STH   R1,FGOUTPAR+6            NR TO GENERATED CODE
         CR    R1,RETURN                PARAMETER COUNT    COMPARE
          BE    FGBD1                   CORRECT NO
         TM    6(TEMP),X'30'            IS PROCEDURE FORMAL PARAMETER
         BM    FGBD1                    YES, NO ERROR
         BAL   RETURN,SERR1(SBR)        ERROR IF NOT
         DC    H'187'
FGBD1    L     OPDK,STACKST             CLEAR OPDK FROM ALL PARAM ENTR
          LA   OPDK,5(OPDK)
         NI    3(OPDK),X'0F'            CLEAR PARAMETER COUNT
         TM    HCOMPMOD(WAREG),X'80'    COMPILE MODE TEST
         BO    FGBH1                    BRANCH IF FALSE
         SPACE
         L     TEMP,STACKST             GET
         MVC   HALFW(2,WAREG),3(TEMP)       ADDR OF
         LH    RETURN,HALFW(WAREG)                  LAT
         A     RETURN,LATAB(WAREG)                      ENTRY
         ST    PRPOINT,0(RETURN)        VALUE OF PRPOINT TO LAT ENTRY
         SPACE 2
FGBD11   EQU   *                   GENERATE PROCEDURE CALL
         TM    1(OPDK),FORMPM          IS PROCEDURE FORMAL       A28226
         BC    9,*+12                  NO                        A28226
         BAL   INFORM,GENTXT4(SBR)                               A28226
         MVI   PROLPBN-1(FSA),X'FF'                              A28226
*  SET SW IN FSA TO DETECT WHEN ACT PROCEDURE IS PARAMETERLESS   A28226
         OI    PROCWPS(SBR),X'80'       SET SWITCH IN OPERANDRECOGN
         BAL   RETURN,OPDREC(SBR)
         XI    PROCWPS(SBR),X'80'       SWITCH OFF
         NI    1(OPDK),X'3F'            CLEAR PROCEDURE BITS
         TM    1(OPDK),FORMPM           IS IT FORMAL PARAMETER
         BC    9,*+12                   NO
         BAL   INFORM,GENTXT4(SBR)      GENERATE CALL PROCEDURE FORMAL
         BAL   BRR,PROLOGFP(FSA)        **GENERATED CODE**
FGBG1    SR    TEMP,TEMP                INITIALIZE
         STH   TEMP,PARCOUNT                       PARAMETER COUNT
FGBG12   LH    TEMP,PARCOUNT            HAVE ALL PARAMS
         CH    TEMP,STSLPAR                             BEEN PROCESSED
         BE    FGBH1                    BR IF YES TO CONTINUE
         SPACE
FGBG13   EQU   *                   GENERATE ONE ENTRY IN PARAMETER LIST
         LA    TEMP,5(TEMP)             FIND
         STH   TEMP,PARCOUNT                 PARA-
         L     RETURN,STACKST                     METER
         SR    RETURN,TEMP                              IN STACK
         MVC   FGOUTPAR+4(2),0(RETURN)  CHARACTER BYTES TO GENER CODE
         MVC   FGOUTPAR+1(3),2(RETURN)  ADDR OF THUNK TO GENER CODE
         ST    PRPOINT,THUNKADR         SAVE PRPOINT FOR RLD-RECORD
         LA    INFORM,FGOUTPAR
         BAL   LENGTH,GENTXTS(SBR)
         DC    H'8'
         L     INFORM,THUNKADR
         BAL   LENGTH,GENRLD(SBR)       GENERATE RLD-RECORD
         DC    H'4'
         DC    H'1'
         DC    H'1'
         MVI   FGOUTPAR+7,X'0'          ZERO TO NEXT PAR NR FIELD
         B     FGBG12
         SPACE
         SPACE 1
*  ROUTINE THAT CHECKS FOR THE PRESENCE OF 'FOR','IF' OR 'GOTO'  A28589
*   IMMEDIATELY AFTER PROCEDURE CALLS. CALLED BY CP57 AND CP61   A28589
         DROP  BASE                                              A28589
FGBG20   LR    R0,BASE                                           A28589
         BALR  BASE,0                                            A28589
         USING *,BASE                                            A28589
         ST    R0,FGBG29               SAVE OLD BASE REG         A28589
         ST    RETURN,FGBG28                                     A28589
         CLI   1(SOURCE),X'2F'         SOURCE BUFFER EMPTY?      A28589
         BNE   FGBG22                  NO                        A28589
         BAL   RETURN,JBUFFER(0,SBR)                             A28589
FGBG22   CLI   1(SOURCE),X'18'         NEXT OPERATOR 'FOR' ?     A28589
         BE    FGBG27                  YES                       A28589
         CLI   1(SOURCE),X'1D'          NEXT OPERATOR 'IF' ?     A28589
         BE    FGBG27                  YES                       A28589
         CLI   1(SOURCE),X'17'          NEXT OPERATOR 'GOTO' ?   A28589
         BE    FGBG27                  YES                       A28589
FGBG25   L     RETURN,FGBG28                                     A28589
         L     BASE,FGBG29             RESTORE OLD BASE REG      A28589
         BCTR  OPTK,RETURN             CLOPT AND RETURN          A28589
FGBG27   LA    SOURCE,1(0,SOURCE)      INCREASE SOURCE PTR       A28589
         BAL   RETURN,SERR3(0,SBR)     ERROR PATTERN ENTRY       A28589
         DC    H'194'                                            A28589
         BCT   SOURCE,FGBG25           DECREASE SOURCE PTR       A28589
FGBG28   DS    F                                                 A28589
FGBG29   DS    F                                                 A28589
         DROP  BASE                                              A28589
         USING CP57,BASE                                         A28589
         SPACE 1
FGBH1    BAL   RETURN,FGBG20           CHECK NEXT OPERATOR       A28589
         SPACE
         CLI   0(OPTK),X'30'            IS PROG CONTEXT OP IN STACK
         BNE   FGBG4                    BR IF NOT
         SPACE
         NI    HCOMPMOD(WAREG),X'FE'    'FALSE' TO OPDFLAG
         L     CCT,PRC(SBR)             SWITCH TO PROGR CONTEXT
         TM    3(OPDK),REGADRM          OPERAND IN ADR
         BZ    *+12                     NO
         SH    P,ONEENTRY(WAREG)        RELEASE STACK
         XI    RII(WAREG),RIIADRM       ADR NOT OCCUPIED
         LA    OPDK,5(OPDK)             RELEASE PROCEDURE IDENT
         SPACE
FGBK5    BCT   OPTK,SNOTSP(SBR)         CLOPT, BR TO SNOTSPECIAL
         SPACE 2
FGBG4    CLI   0(OPTK),X'33'            IS STMT CONTEXT OP IN STACK
         BE    FGBK5                    YES
         L     CCT,EXC(SBR)             SWITCH TO EXPRESSION CONTEXT
         BCT   OPTK,SNOTSP(0,SBR)       CLOPT, GO TO SNOTSPECIAL
         SPACE
FGAB2    BAL   RETURN,SERR3(SBR)        ERROR PATTERN ENTRY
         DC    H'176'
         BAL   RETURN,STACKAPI(SBR)     INSERT API
         OI    HCOMPMOD(WAREG),X'01'    OPERANDFLAG=TRUE
         B     FGAA2                                               0050
         SPACE 3
* CONSTANTS AND WORKAREAS
         SPACE
         DS    0F
FGXFC    DC    X'000000FC'              TO EXTRACT LN FROM OPERAND
FGOUTPAR DC    F'0'                     **GENERATED
         DC    F'0'                                 CODE**
STACKST  DS    F                        PTR TO OPDK ENTRY NEXT TO PROC
STSLPAR  DS    H                        NR OF PARAMETERS TIMES FIVE
PARCOUNT DS    H                        TEMP STORAGE TO COUNT PARAMS
THUNKADR DS    F                        TEMPORARY STORAGE
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50004, CP61'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*         C O M P I L E R   P R O G R A M   N R   6 1
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   CALL OF STANDARD PROCEDURES                                       *
*        CONTEXT              STATEMENT                               *
*        SOURCE OPERATOR      , OR )                                  *
*        STACK OPERATOR       STANDARD PROCEDURE BRACKET              *
*        OPERANDS             ACTUAL PARAMETER                        *
*                             PARAMETER COUNT AND PRPOINTER AT CALL   *
*                             PROCEDURE IDENTIFIER                    *
*                                                                     *
         SPACE 3
CP61     EQU   *
         USING *,BASE
         SPACE 2
FOB2     LA    RETURN,FOC2              OPERAND
         BAL   R3,OPDTESF(SBR)                  TEST
         SPACE
FOC2     BAL   RETURN,MOVEOPDK(SBR)     COPY
         MVC   0(5,OPDK),5(OPDK)             PARAMETER ENTRY
         SPACE
         SR    R1,R1                    INCREASE
         IC    R1,10(OPDK)                       PARA-
         LA    R1,4(R1)                               METER
         STC   R1,10(OPDK)                                  COUNTER
         SPACE
         TM    15(OPDK),X'10'           IS PROCED IDENTIFIER API
         BO    FOF4                     YES, NO CHECKING
         SPACE
         MVC   FOE2PCH(2),17(OPDK)      GET
         LH    R2,FOE2PCH                   PAR CHAR
         SRL   R2,0(R1)                              FROM
         STC   R2,FOE2PCH                                 PROCED IDENT
         SPACE
         BAL   RETURN,FQA2              TEST TYPE
         SPACE
FOH2     TM    16(OPDK),X'03'           IS STAND FUNCTION HANDLED
         BC    5,FTB2                   YES
         SPACE
FOB4     TM    HCOMPMOD(WAREG),X'80'    COMPILE MODE TEST
         BO    FOD4                     FALSE
         BAL   RETURN,ADRTRANS          GENERATE ADDRESS TRANSFER
         SPACE
FOC4     BAL   RETURN,FRA3              CONSTRUCT FLAGS
         SPACE
FOD4     TM    18(OPDK),X'0F'           ARE SPECIAL ACTIONS REQUIRED
         BC    5,FSB1                   YES
FOF4     LA    OPDK,10(OPDK)            RELEASE TWO ENTRIES IN OPDSTACK
         CLI   0(SOURCE),X'25'          IS IN SOURCE COMMA
         BCR   8,SBR                    YES, GO TO SNOT
         SPACE
FPA21    SR    R1,R1                    GET NR OF
         IC    R1,0(OPDK)                         PARAMETERS HANDLED
         TM    9(OPDK),X'03'            HOW MANY INDICATED IN PROC ID
         BZ    FPA23                    ONE
         BM    FPA22                    TWO
         SH    R1,CON4(SBR)             THREE
FPA22    SH    R1,CON4(SBR)
FPA23    SH    R1,CON4(SBR)
         BC    7,FPA1                   ERROR IF NUMBER DOES NOT CHECK
FPB2     TM    HCOMPMOD(WAREG),X'80'    CMT
         BO    *+8                      FALSE
         SPACE
         BAL   RETURN,LOADR1            GENERATE CALL OF STAND PROCED
         SPACE
FPG2     L     R3,FGBGADR                                        A28589
         BALR  RETURN,R3               CHECK NEXT OPERATOR       A28589
         SPACE
         CLI   0(OPTK),X'30'            CHECK CONTEXT OPERATOR
         BNE   FPC5                      IF NOT PROGR CONTEXT
         L     CCT,PRC(SBR)             SWITCH TO PROGRAM CONTEXT
         NI    HCOMPMOD(WAREG),X'FE'    SET OPDFLAG FALSE
         LA    OPDK,10(OPDK)            CLEAR TWO OPERANDS
FPG3     BCT   OPTK,SNOTSP(SBR)         CLOPT AND GO TO SNOT SPECIAL
         SPACE
FPC5     TM    6(OPDK),X'03'            IS STANDARDFUNCTION HANDLED
         BC    7,FPD5                   YES
FPD4     BAL   RETURN,SERR3(SBR)        NO, ERROR
         DC    H'168'
FPD5     CLI   0(OPTK),X'33'            IS IT STATEMENT CONTEXT
         BE    FPE4                     YES
         L     CCT,EXC(SBR)             NO% SWITCH TO EXPR CONTEXT
FPE4     LA    OPDK,10(OPDK)            CLOPD TWICE
         BAL   RETURN,STACKAPI(SBR)     INTRODUCE API
         B     FPG3
         EJECT
FQA2     EQU   *                   SUBROUTINE FOR TYPE TEST OF CURR PAR
         ST    RETURN,LOADR1R
         TM    0(OPDK),X'10'            CHECK IF OPERAND IS API
         BO    FOH2                     YES
         TM    1(OPDK),X'08'            IS PAR LABEL
         BO     FQJ1                    YES
         TM    FOE2PCH,X'03'            IS IT STRING OR PROCEDURE
         BZ    FQD3                     YES
         TM    1(OPDK),X'04'            IS PARAMETER ARRAY IDENTIFIER
         BO    *+8                      YES, BYPASS NEXT TEST
         BAL   RETURN,ARRTEST1(SBR)     TEST FOR PROCEDURE IDENTIFIER
         XC    FOE2PCH(1),1(OPDK)       COMP ACT PAR WITH CHAR FROM PRI
         TM    FOE2PCH,X'07'            TEST ARRAY AND TYPE BITS
         L     RETURN,LOADR1R
          BCR  8,RETURN                 RETURN IF ZEROES
         BO    FQJ1                     ERROR IF ONESS
         TM    FOE2PCH,X'08'            CALL BY NAME INDIC IN CHAR
         BO    FQJ1                     IF YES BR TO ERROR
         TM    FOE2PCH,X'03'            TEST TYPE BITS
         BC    12,FQJ1                  ERROR IF ZEROES OR MIXED
         TM    1(OPDK),X'03'            TEST TYPE OF PAR
         BC    9,FQJ1                   ERROR IF NOT ARITHM TYPE
         BR    RETURN                   RETURN
         SPACE
FQD3     TM    FOE2PCH,X'0C'            IS STRING INDIC BY PROCED ID
         BC    5,FQE3                   NO
         TM    0(OPDK),X'01'            IS PAR STRING
         BZ    FQJ1                     ERROR IF NOT
         BR    RETURN                   RETURN
FQE3     TM    1(OPDK),X'C0'            IS PAR PROCEDURE
         BZ    FQJ1                     ERROR IF NOT
         BO    FQF3                     IF PROCEDURE
         TM    1(OPDK),X'80'            IS PAR STAND PROCEDURE
         BO    FQJ1                     ERROR IF YES
         SPACE
FQF3     TM    1(OPDK),X'30'            IS PAR FORMAL PARAMETER
         BC    9,FQG3                   NO
         TM    1(OPDK),X'20'            YES, IS IT CALLED BY VALUE
         BO    FQJ1                     ERROR IF YES
         SPACE
FQG3     TM    HCOMPMOD(WAREG),X'80'    COMPILE MODE TEST
         BO    FOF4                     FALSE
         SPACE
         TM    1(OPDK),X'10'            FORMAL PAR CALLED BY NAME
         BO    FQH4                     YES
         SPACE
         TM    3(OPDK),X'E0'            HAS IT MORE THAN ONE PARAMETER
         BC    5,FQJ1                   ERROR IF YES
         TM    3(OPDK),X'10'            DOES IT HAVE ONE PARAMETER
         BZ    FQJ1                     ERROR IF NOT
         SPACE
         MVC   FQG35+1(1),2(OPDK)       PBN TO GENERATED CODE
         MVN   FQG36+4(1),8(OPDK)       MOVE
         MVC   FQG36+5(1),9(OPDK)            LABEL NUMBER
         BAL   RETURN,GETPARP
         STH   TEMP,FQG36+2             STORE DISP IN GENERATED CODE
         OI    FQG36+2,X'A0'            REG CDSA TO GENERATED CODE
         LA    INFORM,FQG35
         BAL   LENGTH,GENTXTS(SBR)
         DC    H'14'
         SPACE
         B     FOF4
FQG35    MVI   PROLPBN(FSA),X'0'        **GENERATED CODE**
         STM   PBT,LAT,PROLREG(FSA)     **GENERATED CODE**
FQG36    MVC   0(4,CDSA),0(LAT)         **GENERATED CODE**
         SPACE
FQH4     NI    1(OPDK),X'3F'            REMOVE PROCED BITS FOR OPDREC
         BAL   RETURN,ADRTRANS          ADDRESS TRANSFER (CALL ACT PAR)
         B     FOF4
         SPACE 2
FPA1     BAL   RETURN,SERR1(SBR)   ERROR PATTERN ENTRIES
         DC    H'187'
         B     FPG2
         SPACE
FQJ1     BAL   RETURN,SERR1(SBR)
         DC    H'188'
         B     FOH2
         SPACE 3
FRA3     EQU   *                   CONSTRUCT FLAGS
FRC3     TM    FOE2PCH,X'08'            DOES PROCEDURE SPECIFY 'NAME'
         BZ    FOD4                     NO
         SPACE
         TM    1(OPDK),X'04'            IS CURR PARAMETER ARRAY
         BO    FOD4                     YES
         SPACE
         TM    1(OPDK),X'30'            TEST IF FORMAL PAR
         BC    9,FRF3                   NO
         TM    1(OPDK),X'20'            YES, IS IT CALLED BY NAME
         BO    FRF3                     NO
         LA    OPDK,5(0,OPDK)           ADJUST OPDK FOR ROUT 1
         BAL   RETURN,ROUTINE1(SBR)     GET ADDR OF FORMAL PARAMETER
         SH    OPDK,CON5(SBR)           RESTORE OPDK
         LH    R1,WPLACE(WAREG)         GET ADDR OF
         LA    R1,4(0,R1)                           CHAR BYTES
         STH   R1,FRE24+2                                      TO GEN C
         MVZ   FRE24+2(1),VPLACE(WAREG)
         BAL   INFORM,GENTXT4(SBR)      GENERATE 'NO-ASSIGNMENT TEST'
FRE24    TM    0(0),X'08'               **GENERATED CODE**         0216
         SPACE
         TM    18(OPDK),X'02'           IS PROCED IDENTIFIER SYSACT
         BO    FRG2                     YES
         BAL   INFORM,GENTXT4(SBR)      NO, GENERATE BR TO OBJ T ERROR
         BO    OERR22(FSA)              **GENERATED CODE**
         MVC   2(1,OPDK),SPBNST+1(WAREG)     CURR PBN TO PARAMETER
         B     FOD4
         SPACE
FRG2     BAL   RETURN,GETPARP           GET DISP IN OBJ TIME STACK
         STH   TEMP,FRG25+2             STORE IT IN GENERATED CODE
         OI    FRG25+2,X'A0'            INSERT REG NR
         LA    INFORM,FRG24             GEN INSERTION OF NO-ASS-FLAG
         BAL   LENGTH,GENTXTS(SBR)           IF PROC ID IS SYSACT
         DC    H'10'
         B     FOD4
         SPACE
FRG24    BALR  STH,0                    **GENERATED CODE**
         BZ    8(STH)                   **GENERATED CODE**
FRG25    MVI   0(CDSA),X'40'            **GENERATED CODE**
         SPACE
FRF3     TM    0(OPDK),X'08'            NO-ASSIGNM-FLAG IN PARAMETER
         BZ    FOD4                     NO
         TM    18(OPDK),X'02'           IS PROCED ID SYSACT
         BZ    FRH3                     ERROR IF NOT
         SPACE
         BAL   RETURN,GETPARP           DISP IN OBJ T ST
         STH   TEMP,FRG45+2                              TO GENER CODE
         OI    FRG45+2,X'A0'            INSERT REG NR
         BAL   INFORM,GENTXT4(SBR)      GENER INSERTION OF NO-ASS-FLAG
FRG45    MVI   0(CDSA),X'40'            **GENERATED CODE**
         B     FOD4
         SPACE
FRH3     BAL   RETURN,SERR1(SBR)        ERROR PATTERN ENTRY
         DC    H'188'
         B     FOF4
         SPACE 3
FSB1     EQU   *                   SPECIAL ACTIONS, I/O PROCEDURES
         TM    18(OPDK),X'0C'           TEST IF INPUT OR OUTPUT
         BZ    FSB3                     BRANCH IF NEITHER
         CLI   10(OPDK),X'04'           IS CURR PARAMETER THE FIRST
         BNE   FOF4                     NO
         BAL   LENGTH,FSSUBR            TEST RANGE OF DATASETNR ETC
         SPACE
FSD2     EQU   *                        MAKE INSERTION IN I/O TAB
         TM    18(OPDK),X'08'           IS IT INPUT
         BZ    FSD4                    NO                          0050
         TM    1(OPDK),X'FC'           TEST IF INT CONST, 1ST TEST 0050
         BC    5,FSD3                  NO                          0050
         TM    0(OPDK),X'C0'           TEST IF INT CONST, 2ND TEST 0050
         BC    12,FSD3                 NO                          0050
         CLI   9(OPDK),X'04'            IS DSN = 1
         BE    FRH3                     YES, ERROR
FSD3     OI    0(INFORM),X'80'         NO, INDICATE INPUT          0050
FSD4     TM    18(OPDK),X'04'          OUTPUT                      0050
         BZ    FSD6                    NO                          0050
         TM    1(OPDK),X'FC'           TEST IF INT CONST, 1ST TEST 0050
         BC    5,FSD5                  NO                          0050
         TM    0(OPDK),X'C0'           TEST IF INT CONST, 2ND TEST 0050
         BC    12,FSD5                 NO                          0050
         CLI   9(OPDK),X'00'            IS DSN = 0
         BE    FRH3                     YES, ERROR
FSD5     OI    0(INFORM),X'40'         NO, INDICATE OUTPUT         0050
FSD6     B     FOF4                                                0050
FSB3     TM    18(OPDK),X'01'           PUT/GET
         BZ    *+8                      NO
         OI    IOTAB+17(WAREG),X'FF'    YES
         TM    18(OPDK),X'02'           SYSACT
         BZ    FOF4                     NO
         SPACE
FSF3     EQU   *                        SPECIAL ACTIONS SYSACT
         CLI   10(OPDK),X'08'           TEST PARAMETER COUNT
         BH    FOF4                     BR OUT IF THIRD PARAMETER
         BL    FSG4                     BR IF FIRST PARAMETER
         TM    1(OPDK),X'FC'            TEST IF INT CONST, 1ST TEST
         BC    5,*+12                   NO
         TM    0(OPDK),X'C0'            TEST IF INT CONST, 2ND TEST
         BC    1,FSJ2                   YES
         MVI   SYSACTF,X'08'            INDICATE UNDET FUNCTION
FSFJ35   SR    TEMP,TEMP                GET
         IC    TEMP,11(OPDK)                ENTRY
         SRA   TEMP,2                             IN
         LA    TEMP,IOTAB(TEMP,WAREG)                I/O TAB
         OC    0(1,TEMP),SYSACTF        INSERT SYSACT-BIT
         B     FOF4
         SPACE
FSJ2     BAL   LENGTH,FSSUBR            INTEGER CONST TEST ETC
         CLI   4(OPDK),X'00'            IS SYSACT-FUNCTION ZERO
         BE    FSE1                     YES, ERROR
         MVI   SYSACTF,X'20'
         CLI   4(OPDK),X'10'            IS FUNCTION = 4
         BE    FSAA                     YES
         CLI   4(OPDK),X'34'            NO, IS FUNCTION = 13
         BNE   FSBB                     NO
         SPACE
FSAA     EQU   *                        FUNCTION IS 4 OR 13
         CLI   11(OPDK),X'04'           IS DSN = 0 OR 1
         BNH   FRH3                     YES, ERROR
         B     FSFJ35                   NO, OK
         SPACE
FSBB     CLI   4(OPDK),X'20'            IS FUNCTION = 8
         BE    FSBB1                    YES
         MVI   SYSACTF,X'04'            NO, INDICATE OTHER FUNCTION
         B     FSFJ35
FSBB1    CLI   11(OPDK),X'00'           IS DSN = 0
         BE    FRH3                     YES, ERROR
         MVI   SYSACTF,X'10'            NO,
         B     FSFJ35                       OK
         SPACE
FSG4     EQU   *                        HANDLE FIRST SYSACT-PARAMETER
         BAL   LENGTH,FSSUBR            CHECK OF INTEGER CONST ETC
         MVC   11(1,OPDK),OPDADR+1(WAREG)  STORE DATASETNR IN PTR+1
         B     FOF4
         SPACE
FSSUBR   EQU   *                        CHECK OF PARAMETER
         TM    1(OPDK),X'FC'            TEST IF INT CONST, 1ST TEST
         BC    5,FSSUBR1                BR IF NOT
         TM    0(OPDK),X'C0'            TEST IF INT CONST, 2ND TEST
         BC    12,FSSUBR1               NO
         SPACE
         TM    2(OPDK),X'FF'            IS CONST IN CONST POOL ZERO
         BC    5,FSE1                   ERROR IF NOT CONSTPOOL ZERO
         BAL   RETURN,DECOMP(SBR)       DECOMPOSE OPERAND
         LH    TEMP,OPDADR(WAREG)       GET DISP IN CONST POOL ZERO
         SRA   TEMP,6
         BZ    FSSUBR2                  BR IF CONST LESSTHAN 16
         SPACE
FSE1     BAL   RETURN,SERR1(SBR)        ERROR IF NOT
         DC    H'189'
         B     FOF4
         SPACE
FSSUBR1  MVI   OPDADR+1(WAREG),X'40'    4*16 INTO OPDADR+1
FSSUBR2  MVI   OPDADR(WAREG),X'00'      ZERO TO OPDADR FIRST BYTE
         LH    TEMP,OPDADR(WAREG)
         SRA   TEMP,2
         LA    INFORM,IOTAB(WAREG,TEMP) ADDR OF IOTAB-ENTRY
         BR    LENGTH                   RETURN
         EJECT
* HANDLING OF ACTUAL PARAMETER FOR STANDARD FUNCTION PROCEDURE
         SPACE 2
FTB2     CLI   0(SOURCE),X'26'          TEST IF SOURCE RIGHTPARENTH
         BE    FTC2                     CONTINUE IF YES
         OI    HCOMPMOD(WAREG),X'80'    ERROR IF NOT
         B      FOF4
         SPACE
FTC2     TM    HCOMPMOD(WAREG),X'80'    IS IT SYNTAX CHECK MODE
         BO    FOF4                     YES
         SPACE
         BCTR  OPTK,0                   NO, CLEAR ONE OPERATOR
         SPACE
         CLI   0(OPTK),X'33'            TEST CONTEXT OPERATOR
         BL    FTD3                     BR IF PRC-OPT
         BE    FTE1                     BR IF STC-OPT
         L     CCT,EXC(SBR)             SWITCH TO EXPR-CONTEXT
FTE1     BCTR  OPTK,0                   CLOPT
         SPACE
         TM    19(OPDK),X'80'           IS IT ABS, SIGN, LENGTH, ENTIER
         BZ    FUB2                     NO
         BAL   RETURN,OPDREC(SBR)       EXAMINE  PARAMETER
         SPACE
         CLI   19(OPDK),X'E0'           IS PROCED ID 'LENGTH'
         BE    FTG1                     YES
         CLI   19(OPDK),X'F0'           IS PROC 'ENTIER'
         BE    FUD1                     YES
         SPACE
FTH2     TM    1(OPDK),X'02'            IS PARAM OF TYPE REAL
         BO    FUB2                     YES
         BAL   RETURN,TRINRE(SBR)       NO, GENERATE INTEGER-REAL CONV
         B     FUB2
         SPACE
FTD3     L     CCT,PRC(SBR)             SWITCH TO PROGRAM CONTEXT
         SPACE
         MVC   HALFW(2,WAREG),13(OPDK)  RESTORE
         LH    P,HALFW(WAREG)                   OBJ TIME STACK PTR
         SPACE
         NI    HCOMPMOD(WAREG),X'FE'    OPDFLAG=FALSE
         LA    OPDK,20(OPDK)            CLEAR FOUR OPERANDS
         BCT   OPTK,SNOTSP(SBR)         CLEAR OPERATOR, GO TO SNOTSPEC
         SPACE 2
FTG1     EQU   *                   GENERATE CODE FOR 'LENGTH'
         BAL   RETURN,ROUTIN15(SBR)     LOAD VW-PLACE
         MVC   FTG12+4(2),WPLACE(WAREG) ADDRESS OF STRING
         MVZ   FTG12+4(1),VPLACE(WAREG)                   TO GEN CODE
         SPACE
         BAL   RETURN,ROUTINE7(SBR)     FIND NEXT GPR
         LR    TEMP,R14
         SLL   R14,4                    STORE
         STC   R14,FTG13+1                    REG NR
         STC   R14,FTG13+5                           IN
         STC   R14,FTG13+7                              GENER CODE
         OR    TEMP,R14                 SAVE
         STC   TEMP,FUOTRG                   REG NR USED
         SPACE
         LA    INFORM,FTG12
         BAL   LENGTH,GENTXTS(SBR)
         DC    H'14'
         B     FUF1
         SPACE
FTG12    MVC   HW(2,FSA),0(0)           **GENERATED CODE**
FTG13    LH    0,HW(0,FSA)              **GENERATED CODE**
         BCTR  0,0                      **GENERATED CODE**
         BCTR  0,0                      **GENERATED CODE**
         SPACE 2
FTG3     EQU   *                   GENERATE CODE FOR 'SIGN'
         LA    R3,FTG35                 RETURN ADDR IF VALUE IN REG
         BAL   RETURN,ROUTIN15(SBR)     LOAD VW-PLACE IF NOT VAL IN REG
         BAL   RETURN,ROUTIN11(SBR)     FIND NEXT FPR
         LR    TEMP,R14                 REG
         SLL   TEMP,4                       NR
         STC   TEMP,FTG31+1                    TO
         OR    TEMP,R14                          GENER
         STC   TEMP,FTG33+1                             CODE
         BAL   RETURN,ROUTIN12(SBR)     REG NOT OCCUPIED
         SPACE
         MVC   FTG31+2(2),WPLACE(WAREG) ADDRESS TO
         MVZ   FTG31+2(1),VPLACE(WAREG)            GENER CODE
         BAL   INFORM,GENTXTP4(SBR)
FTG31    LD    0,0(0)                   **GENERATED CODE**
FTG32    BAL   INFORM,GENTXTP2(SBR)
FTG33    LTDR  0,0                      **GENERATED CODE**
         B     FTH4
         SPACE
FTG35    MVC   FTG33+1(1),VPLACE(WAREG) REG NR TO GENER CODE
         BAL   RETURN,ROUTIN12(SBR)     REG NOT OCCUPIED
         B     FTG32
         SPACE
FTH4     BAL   RETURN,ROUTINE7(SBR)     FIND NEXT GPR
         LR    TEMP,R14                 SAVE
         SLL   R14,4                         REG
         OR    TEMP,R14                          NUM-
         STC   TEMP,FUOTRG                           BER
         SPACE
         STC   R14,FTH42+3              REG
         STC   R14,FTH43+1                 NR TO
         STC   R14,FTH43+7                        GENER CODE
         SPACE
         LA    INFORM,FTH42
         BAL   LENGTH,GENTXTS(SBR)
         DC    H'18'
         B     FUF1
         SPACE
FTH42    BALR  BRR,0                    **GENERATED CODE**
         LA    0,1                      **GENERATED CODE**
         BP    16(0,BRR)                **GENERATED CODE**
FTH43    BCTR  0,0                      **GENERATED CODE**
         BZ    16(0,BRR)                **GENERATED CODE**
         BCTR  0,0                      **GENERATED CODE**
         SPACE 3
FUB2     CLI   19(OPDK),X'80'           IS PROCEDURE ID 'ABS'
         BE    FUB3                     YES
         SPACE
         CLI   19(OPDK),X'C0'           IS IT 'SIGN'
         BE    FTG3                     YES
         B     FUD2
         SPACE 3
FUD1     EQU   *                   GENERATE CALL OF 'ENTIER'
         TM    1(OPDK),X'03'            TEST IF
         BC    9,FUD12                          OPND
         TM    1(OPDK),X'01'                         INTEGER
         BO    FUD14                    YES
         SPACE
FUD12    LA    R3,FUD13                 RETURN ADDR IF VALUE IN REG
         BAL   RETURN,ROUTIN15(SBR)     LOAD VW-PLACE IF NOT VAL IN REG
         TM    RIR+1(WAREG),X'01'       IS FPR0 FREE
         BZ    FUD10                    YES
         BAL   RETURN,ROUTIN14(SBR)     NO, CLEAR IT
         NI    RIR+1(WAREG),X'FE'       FPR0 NOT OCCUPIED
         SPACE
FUD10    MVC   FUD15+2(2),WPLACE(WAREG) ADDRESS OF VALUE
         MVZ   FUD15+2(1),VPLACE(WAREG)                  TO GEN CODE
         BAL   INFORM,GENTXTP4(SBR)
FUD15    LD    0,0(0,0)                 **GENERATED CODE**
         SPACE
FUD11    BAL   RETURN,ROUTINE7(SBR)     FIND NEXT GPR
         LR    TEMP,R14                 REG NR
         SLL   R14,4                          TO
         STC   R14,FUD16+1                       GEN CODE
         OI    FUD16+1,X'0E'            REG STH TO GEN CODE
         OR    TEMP,R14                 SAVE
         STC   TEMP,FUOTRG                   REG NR USED
         SPACE
         TM    RII(WAREG),X'01'         IS ADR FREE
         BZ    FUD17                    YES
         BAL   RETURN,ROUTIN10(SBR)     NO, CLEAR IT
FUD17    BAL   INFORM,GENTXT6(SBR)
         BAL   ADR,ENTIER(FSA)          **GENERATED CODE**
FUD16    LR    0,STH                    **GENERATED CODE**
         B     FUF1
         SPACE
FUD13    TM    3(OPDK),X'F0'            IS VALUE IN FPR0
         BZ    FUD18                    YES
         TM    RIR+1(WAREG),X'01'       NO, IS FPR0 FREE
         BZ    *+12                     YES
         BAL   RETURN,ROUTIN14(SBR)     NO, CLEAR IT
         NI    RIR+1(WAREG),X'FE'       FPR0 NOT OCCUPIED
         SPACE
         MVN   FUD19+1(1),VPLACE(WAREG) REG NR TO GENER CODE
         BAL   INFORM,GENTXTP2(SBR)
FUD19    LDR   0,0                      **GENERATED CODE**
         SPACE
         BAL   RETURN,ROUTIN12(SBR)     REG NOT OCCUPIED
         B     FUD11
         SPACE
FUD18    NI    RIR+1(WAREG),X'FE'       FPR0 NOT OCCUPIED
         B     FUD11
         SPACE
FUD14    MVC   15(5,OPDK),0(OPDK)       PARAMETER IS INSERTED AS RESULT
         TM    0(OPDK),X'40'            VALUE OR ADDR IN REG
         BO    FUG3                     NO
         SR    R4,R4
         IC    R4,3(OPDK)               GET
         SRL   R4,4                         REG NR
         SLL   R4,2                     4 TIMES REG NR
         LA    OPDK,15(0,OPDK)          ADJUST OPDK
         ST    OPDK,RUTI(R4,WAREG)      INTRODUCE CORRECT OPDK ADDR
         B     SNOTSP(0,SBR)
         SPACE 3
FUB3     EQU   *                   GENERATE CODE FOR 'ABS'
         LA    R3,FUB4                  RETURN ADDR IF VALUE IN REG
         BAL   RETURN,ROUTIN15(SBR)     LOAD VW-PLACE IF NOT VAL IN REG
         BAL   RETURN,ROUTIN11(SBR)     FIND NEXT FPR
         LR    TEMP,R14
         SLL   TEMP,4
         STC   TEMP,FUB31+1             REG NR TO GEN CODE
         OR    TEMP,R14                 SAVE REG NR
         STC   TEMP,FUOTRG                          IN TWO HALF BYTES
         MVC   FUB31+2(2),WPLACE(WAREG) ADDR OF VALUE
         MVZ   FUB31+2(1),VPLACE(WAREG)               TO GENER CODE
         BAL   INFORM,GENTXTP4(SBR)
FUB31    LD    0,0(0)                   **GENERATED CODE**
         SPACE
         MVC   FUB41+1(1),FUOTRG        REG NR TO NEXT GENER INSTR
         B     FUB42
         SPACE
FUB4     IC    TEMP,VPLACE(WAREG)       REG NR TO
         STC   TEMP,FUB41+1                       GENER CODE
         STC   TEMP,FUOTRG                                   & SAVE BYT
FUB42    BAL   INFORM,GENTXTP2(SBR)
FUB41    LPDR  0,0                      **GENERATED CODE**
         SPACE
         B     FUF2
         SPACE 3
FUD2     EQU   *                   GENERATE CALL FOR REMAINING FUNCTS
         BAL   RETURN,ADRTRANS          GENERATE ADDRESS TRANSFER
         LA    OPDK,10(OPDK)            ADJUST OPDK FOR SUBROUTINE
         BAL   RETURN,LOADR1            GEN LOAD OF PARREG AND FNC CALL
         SH    OPDK,CON10(SBR)          RESTORE OPDK
         MVI   FUOTRG,X'00'             INDICATE FPR0
         OI    RIR+1(WAREG),X'01'       INDICATE FPR0
         MVI   CIR+1(WAREG),X'00'                     OCCUPIED
         SPACE
FUF2     EQU   *                        A FLOATING POINT REG IS USED
         SR    TEMP,TEMP                GET
         IC    TEMP,FUOTRG                  REG NUMBER
         SRL   TEMP,4                                  USED
         SLL   TEMP,1                   MULT BY 2
         LA    R1,15(0,OPDK)            ADDRESS OF OPERAND
         ST    R1,RUTR(TEMP,WAREG)                         TO RUTR
         SPACE 2
FUG2     EQU   *                   REPLACE PROCEDURE ID BY RESULT
         MVC   HALFW(2,WAREG),13(OPDK)  RESTORE
         LH    P,HALFW(WAREG)                   OBJ TIME ST POINTER
         AH    P,ONEENTRY(WAREG)        ADD SIZE OF ONE ENTRY
         STH   P,FUOTSC+4               OBJ T STACK DISP TO GEN CODE
         MVZ   FUOTSC+4(1),FUOTRG       INSERT REGISTER NUMBER
         MVC   FUOTSC+3(1),SPBNST+1(WAREG)   CURRENT PBN
         MVC   15(5,OPDK),FUOTSC+1      INSERT OPERAND INTO STACK
         MVI   FUOTSC+2,X'32'           RESTORE TYPE 'REAL'
         SPACE
FUG3     LA    OPDK,15(OPDK)            CLEAR THREE OPERANDS
         B     SNOTSP(SBR)              GO TO SNOT SPECIAL
         SPACE
FUF1     EQU   *                        A GENERAL REGISTER IS USED
         MVI   FUOTSC+2,X'31'           INSERT TYPE 'INTEGER'
         SR    TEMP,TEMP                GET
         IC    TEMP,FUOTRG                  REG
         SRL   TEMP,4                           NR
         SLL   TEMP,2                   MULTIPLY BY 4
         LA    R1,15(0,OPDK)            GET ADDR OF OPERAND
         ST    R1,RUTI(TEMP,WAREG)      STORE ADDRESS IN RUTI
         B     FUG2
         SPACE 3
LOADR1   EQU   *                   GEN LOAD PARREG AND STAND PROC CALL
         ST    RETURN,LOADR1R           SAVE RETURN ADDRESS
         TM    FUOTFP,X'80'             IS FPR0 USED BUT NOT CLEARED
         BZ    LOADR2                   NO
         NI    FUOTFP,X'7F'             RESET INDICATOR
         BAL   RETURN,CLEARRG(SBR)      SAVE ALL REGISTERS
         SPACE
LOADR2   MVC   HALFW(2,WAREG),3(OPDK)   GET
         LH    P,HALFW(WAREG)               ADDR OF
         LH    TEMP,ONEENTRY(WAREG)                 PARAMETER
         AR    TEMP,P                                         LIST
         STH   TEMP,FPB21+2             ADDR TO GENERATED CODE
         NI    9(OPDK),X'FC'            LAT DISP
         MVC    FPB22+3(1),9(OPDK)               TO GENERATED CODE
         BAL   INFORM,GENTXT4(SBR)
FPB21     LA   R1,0(CDSA)               **GENERATED CODE**
         BAL   INFORM,GENTXT6(SBR)
FPB22    L     ENTRY,0(LAT)             **GENERATED CODE**
         BALR  RETURNO,ENTRY            **GENERATED CODE**
         SPACE
         L     RETURN,LOADR1R
         BR    RETURN
         SPACE 2
ADRTRANS EQU   *                   GENERATE TRANSFER OF PARAM ADDRESS
         ST    RETURN,ADRTRRET          SAVE RETURN ADDRESS
         SPACE
         BAL   RETURN,GETPARP           GET DISP IN OBJ T STACK FOR PAR
         STH   TEMP,ADRTR2+2            DISP
         STH   TEMP,ADRTR4+2                 TO
         STH   TEMP,ADRTR6+2                    GENERATED
         STH   TEMP,ADRTR8+2                              CODE
         SPACE
         TM    16(OPDK),X'02'           IS STANDARD FUNCTION HANDLED
         BZ    ADRTR0                   NO
         TM    1(OPDK),X'02'            YES, IS PARAM OF TYPE REAL
         BO    ADRTR0                   YES
         BAL   RETURN,OPDREC(SBR)       NO,
         BAL   RETURN,TRINRE(SBR)           GENERATE CONVERSION
         SPACE
ADRTR0   BAL   RETURN,LDVWPLC(SBR)      LOAD VWPLACE
         TM    0(OPDK),X'20'            TEST IF ADDRESS OR VALUE
         BO    ADRTR3                   ADDRESS
         SPACE
         MVC   ADRTR1+2(2),WPLACE(WAREG) MOVE ADDRESS OF VALUE
         MVZ   ADRTR1+2(1),VPLACE(WAREG)                       TO GEN C
         BAL   INFORM,GENTXT4(SBR)
ADRTR1   LA    STH,0(0)                 **GENERATED CODE**
         SPACE
         BAL   INFORM,GENTXT4(SBR)
ADRTR2   ST    STH,0(CDSA)              **GENERATED CODE**
         SPACE
         B     ADRTR7
         SPACE
ADRTR3   OI    FUOTFP,X'80'             INDICATE ADDRESS FROM ADR
         SPACE
ADRTR31  CLI   VPLACE(WAREG),X'AA'      IS ADDRESS IN STACK
         BE    ADRTR5                   YES
         BAL   INFORM,GENTXT4(SBR)
ADRTR4   ST    ADR,0(CDSA)              **GENERATED CODE**
         BAL RETURN,RELADR              RELEASE REG ADR
         B     ADRTR61
         SPACE
ADRTR5   MVC   ADRTR6+4(2),WPLACE(WAREG) DISP IN STACK TO GENER CODE
         OI    ADRTR6+4,X'A0'           REG CDSA TO
         OI   ADRTR6+2,X'A0'                        GENERATED CODE
         SH    P,ONEENTRY(WAREG)        RELEASE STACK
         BAL   INFORM,GENTXT6(SBR)
ADRTR6   MVC   0(4,0),0(0)              **GENERATED CODE**
ADRTR61  BAL   RETURN,CLEARRG(SBR)      STORE ALL REGISTERS USED
         SPACE
ADRTR7   TM    16(OPDK),X'03'           IS STAND FUNCTION HANDLED
         BC    5,ADRTR9                 YES, CONV ALREADY MADE IF NEC
         TM    FOE2PCH,X'03'            IS CONVERSION NECESSARY
         BZ    ADRTR9                   NO
         OI    ADRTR8+2,X'A0'           REG CDSA TO GENERATED CODE
         BAL   INFORM,GENTXT4(SBR)
ADRTR8   OI    0(0),X'80'               **GENERATED CODE**
         SPACE
ADRTR9   L     RETURN,ADRTRRET          LOAD RETURN ADDRESS
         BR    RETURN
         SPACE 2
RELADR   EQU   *                   RELEASE OF REGISTER ADR
         SH    P,ONEENTRY(WAREG)        RELEASE STACK
         XI    RII(WAREG),RIIADRM       ADR NOT OCCUPIED
         BR    RETURN
         SPACE 2
GETPARP  EQU   *                   COMPUTE OBJ TIME ST DISP FOR PARAM
         MVC   HALFW(2,WAREG),13(OPDK)  GET STORED P-VALUE
         SR    TEMP,TEMP
         IC    TEMP,10(OPDK)            GET NR OF PARAMS TIMES FOUR
         AH    TEMP,HALFW(WAREG)        ADD TO STORED P
         AH    TEMP,ONEENTRY(WAREG)     ADD SIZE OF ONE ENTRY
         SH    TEMP,CON4(SBR)           SUBTRACT SIZE OF ONE PAR ENTRY
         BR    RETURN
         SPACE 3
* CONSTANTS AND AREAS
         SPACE
FOE2PCH  DS    H                        TO SAVE PARAM CHAR FROM PROC ID
SYSACTF  DC    H'0'                     TEMP STOR OF SYSACT FUNCTION
FUOTSC   DC    X'0088'                 AREA TO BUILD             A22573
         DC    X'3200'                                OPD REPR
         DC    X'0000'                                         RESULT
FUOTRG   DC    X'00'                    REGISTER NR USED
FUOTFP   DC    X'00'                    TO IND ADDR FROM ADR IF ST FUNC
FGBGADR  DC    A(FGBG20)
LOADR1R  DC    F'0'                     TO SAVE RETURN ADDRESS
ADRTRRET EQU   LOADR1R
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50004, CP64'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        C O M P I L E R   P R O G R A M   N R   6 4
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   OPENING BRACKET                                                   *
*        CONTEXT              PROGRAM, STATEMENT, EXPRESSION          *
*        SOURCE OPERATOR      (                                       *
*        STACK OPERATOR       ANY                                     *
*        OPERAND              NONE OR PROCEDURE IDENTIFIER            *
*                                                                     *
         SPACE 3
         USING *,BASE
CP64     EQU   *
         SPACE
GDAA1    TM    HCOMPMOD(WAREG),X'01'    OPERAND TEST
         BO    GDAE1                    BRANCH IF TRUE
         C     CCT,PRC(SBR)             TEST CONTEXT
         BNE   GDAB3                    IF NOT PROGRAM CONTEXT
         BAL   RETURN,SERR3(SBR)        ERROR OTHERWISE
         DC    H'176'
         BAL   RETURN,STACKAPI(SBR)     API TO OPERANDSTACK
         SPACE
GDAE1    BAL   RETURN,MOVEOPTK(SBR)     CURR CONTEXT OPERATOR
         MVC   0(1,OPTK),99(CCT)                              TO OPTK
         C     CCT,PRC(SBR)             TEST IF PROGRAM CONTEXT
         BE    GDAG1                    YES
         SPACE
         TM    0(OPDK),X'10'            IS PROC API
         BO    GDAG1                    YES
         TM    1(OPDK),X'03'            IS IT 'TYPE' PROCEDURE
         BC    5,GDAG1                  YES
         SPACE
         BAL   RETURN,SERR3(SBR)        NO, ERROR
         DC    H'168'
         B     GDAH11
         SPACE
GDAG1    L     CCT,STC(SBR)             SWITCH TO STATEMENT CONTEXT
GDAH1    TM    1(OPDK),X'C0'            IS OPERAND PROCEDURE IDENTIFIER
         BC    5,GDAJ1                  YES
         SPACE
         BAL   RETURN,SERR3(SBR)        NO, ERROR
         DC    H'183'
GDAH11   BAL   RETURN,MOVEOPDK(SBR)     GET ONE OPDK ENTRY
         B     GDBC2
         SPACE
GDAJ1    BAL   RETURN,MOVEOPDK(SBR)     GET ONE OPDK ENTRY
         SPACE
         TM    6(OPDK),X'40'            IS IT STANDARD PROCEDURE
         BZ    GDCA1                    YES
         SPACE
GDBA1    TM    5(OPDK),X'10'            IS PROC API
         BO    GDBA3                    YES
         TM    8(OPDK),X'F0'            IS NR OF PARAMETERS ZERO
          BC   5,GDBA2                  NO
         TM    6(OPDK),X'30'            IS PROCED FORMAL PARAMETER
         BC    9,*+12                   NO, ERROR
         TM    6(OPDK),X'10'            CALLED BY NAME
         BO    GDBA3                    YES, OK
         SPACE
         BAL   RETURN,SERR1(SBR)
         DC    H'187'
GDBB15   EQU   *
GDBC2    MVC   5(5,OPDK),API(SBR)       API REPLACES NEXT LAST ST ENTRY
GDBA3    BAL   RETURN,MOVEOPDK(SBR)     INCR OPERANDSTACK
GDBA4    BAL   RETURN,LATRES(SBR)       RESERVE ONE LAT-ENTRY
GDBB4    MVC   8(2,OPDK),LN(WAREG)      LN TO OPDK
         MVC   0(2,OPDK),ZEROHW(WAREG)  PARAM NR INITIALLY ZERO
         SPACE
         TM    HCOMPMOD(WAREG),X'80'    COMPILE MODE TEST
         BO    GDBH4                    FALSE
         SPACE
         BAL   RETURN,CLEARRG(SBR)      STORE ALL REGS USED
         MVC   GDBG45+2(2),LN(WAREG)    GENERATE BRANCH
         BAL   INFORM,GENTXT4(SBR)                      PAST THUNKS
GDBG45   L     ADR,0(LAT)               **GENERATED CODE**
         BAL   INFORM,GENTXT2(SBR)
         BCR   15,ADR                   **GENERATED CODE**
         SPACE
GDBH4    ST    PRPOINT,WORKPL(WAREG)    PRPOINT
         MVC   2(3,OPDK),WORKPL+1(WAREG)        TO OPDK
          MVI   1(OPTK),X'29'           PROCEDURE BRACKET TO OPTK
GDBH42   BAL   RETURN,MOVEOPTK(SBR)     INCREASE OPTK
         BR    SBR                      GO TO SNOT
         SPACE 2
GDBA2    TM    5(OPDK),X'C0'            IS OPND IN REG OR OBJ TIME ST
         BM    GDBA3                    YES (NOT FORMAL PARAMETER)
         TM    6(OPDK),X'30'            IS OPND FORMAL PARAMETER
         BC    9,GDBA3                  NO
         TM    6(OPDK),X'20'            YES, IS IT CALLED BY VALUE
         BZ    GDBA3                    NO
GDBB2    BAL   RETURN,SERR1(SBR)        YES, ERROR
         SPACE
         DC    H'174'
         B     GDBB15
         SPACE 2
GDCA1    EQU   *                   OPERAND IS STANDARD PROCEDURE ID
         TM    HCOMPMOD(WAREG),X'80'    COMPILE MODE TEST
         BO    GDCG1                    FALSE
         TM    9(OPDK),X'80'            IS IT ABS, SIGN, LENGTH, ENTIER
         BO    GDCC1                    YES
         SPACE
         IC    TEMP,9(OPDK)             MOVE 0-BIT
         N     TEMP,HEXFC                          INTO
         A     TEMP,LATAB(WAREG)                        CORR
         NI    0(TEMP),X'7F'                                 LAT-ENTRY
         SPACE
GDCC1    STH   P,HALFW(WAREG)           STORE P-VALUE
         MVC   3(2,OPDK),HALFW(WAREG)                 IN OPDK
         AH     P,ONEENTRY(WAREG)       RESERVE SPACE FOR
         LA    P,8(P)                                     PARAM-LIST
         STH   P,WORKPL(WAREG)          CHECK FOR
         BAL   RETURN,MAXCH(SBR)                  P-OVERFLOW
         SPACE
GDCG1    MVC   0(2,OPDK),ZEROHW(WAREG)  ZEROES TO PARAM COUNT FIELD
         SPACE
         MVI   1(OPTK),X'2A'            STAND PROCEDURE BRACKET TO OPTK
         B     GDBH42
         SPACE 2
GDAB3    L     CCT,EXC(SBR)             SWITCH TO EXPR-CONTEXT
         BAL   RETURN,MOVEOPTK(SBR)     SOURCE OPERATOR
         MVC   0(1,OPTK),0(SOURCE)                      TO STACK
         BR    SBR                      GO TO SNOT
         SPACE 2
* CONSTANT
         SPACE
         DS    0F
HEXFC    DC    X'000000FC'              TO EXTRACT DISP IN LAT
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50004, CP71'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        C O M P I L E R   P R O G R A M   N R . 7 1                  *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   STATEMENT END                                                     *
*        CONTEXT              STATEMENT                               *
*        SOURCE OPERATOR      EPSILON, ETA, END, ELSE, ;, S.E. STC    *
*                             (SEE MATRIX)                            *
*        STACK OPERATOR       S.E. STC (SEE MATRIX)                   *
*        OPERAND              NOT DECISIVE                            *
*                                                                     *
         SPACE 3
         USING *,BASE
CP71     EQU   *
         SPACE 2
JCB1     L     CCT,PRC(SBR)             SWITCH TO PROGRAM CONTEXT
         B     COMP(0,SBR)              GO TO COMP
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50004, CP84'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        C O M P I L E R   P R O G R A M   N R . 8 4                  *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   NOT PERMITTED OPERATOR PAIR                                       *
*        SOURCE AND STACK OPERATOR      SEE MATRIXES                  *
*        OPERAND                        NONE OR ONE                   *
*                                                                     *
         SPACE 3
         USING *,BASE
CP84     EQU   *
         SPACE 2
KQB1     BAL   RETURN,SERR1(0,SBR)      TERMINATING ERROR
         DC    H'173'                   WITH ERR.NR.173
         SPACE
         B     CPERR1-SNOT(SBR)         BRANCH TO TERMINATION
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50005, CP17'
IEX50005 CSECT
         SPACE
* CP17,CP18,CP26,CP27,CP28,CP29,CP30,CP31,CP63,CP65,CP66,CP67,
* CP68,CP70,CP72,CP73,CP74,CP75,CP76,CP77,CP78,CP79,CP80,CP86,CP87
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        COMPILER PROGRAM NR. 17
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   IF-STATEMENT WITH ALTERNATIVE                                     *
*        CONTEXT              PROGRAM                                 *
*         SOURCE OPERATOR     ELSE                                    *
*        STACK OPERATOR       THENS                                   *
*        OPERANDS             CASE I)   LABEL NUMBER                  *
*                             CASE II)  PROCEDURE IDENTIFIER          *
*                                       LABEL NUMBER                  *
         SPACE 3
CP17     EQU   *
         USING *,BASE
BCB1     TM    HCOMPMOD(WAREG),X'01'         OPDT
         BZ    BCB2                          BRANCH IF FALSE
         BAL   RETURN,PLPRST(0,SBR)          BRANCH TO PLPRST HANDL.
         LA    OPDK,5(0,OPDK)                CLOPD
BCB2     MVI   0(OPTK),X'28'                 STACK 'ELSES'
         MVI   GPBN+1(WAREG),X'FF'           DESTROY GLOBAL PBN
         TM    HCOMPMOD(WAREG),X'80'         CMT
         BCR   1,SBR                         IF SYNTAX TO SNOT
         BAL   RETURN,LATRES(0,SBR)          RESERVE LABEL
         MVC   BCD2+2(2),LN(WAREG)           INTR. LABEL NR AS DISPL.
         BAL   INFORM,GENTXT6(0,SBR)
BCD2     L     BRR,0(LAT,0)                  ***GENERATE***
         BCR   15,BRR                        ***GENERATE***
         L     R1,LATAB(0,WAREG)             LOAD ADDRESS OF LAT
         MVC   WORKPL(2,WAREG),3(OPDK)       LOAD LABEL NUMBER
         LH    R2,WORKPL(0,WAREG)
         ST    PRPOINT,0(R1,R2)              STORE PRPINTER INTO LAT
         MVC   3(2,OPDK),LN(WAREG)           KEEP NEW LABEL
         BR    SBR                           BRANCH TO SNOT
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50005, CP83'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        C O M P I L E R   P R O G R A M   N R   8 3
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   CODE PROCEDURE DECLARATION (IN CALLING PROGRAM)                   *
*        CONTEXT              PROGRAM                                 *
*        SOURCE OPERATOR      GAMMA                                   *
*        STACK OPERATOR       PI, PHI, BETA                           *
*        OPERANDS             LABEL NUMBER                            *
*                             PROCEDURE IDENTIFIER                    *
*                                                                     *
         SPACE 3
         USING *,BASE
CP83     EQU   *
         SPACE 2
KOB1     BAL   RETURN,DECOMP(SBR)       DECOMPOSE OPERAND
         LH    RETURN,OPDLN(WAREG)      GET ADDR OF
         L     TEMP,LATAB(WAREG)                    LAT-ENTRY
         ST    PRPOINT,0(RETURN,TEMP)   STORE PRPOINT IN LAT
         SPACE
         MVC   KOC15(8),1(SOURCE)       PROCED NAME TO GENER CODE
         LH    TEMP,SPBNST(WAREG)       GET CURRENT PBN
         SLL   TEMP,3                   DISP IN PBTAB
         STH   TEMP,KOC16                             TO GENER CODE
         LA    INFORM,KOC14
         BAL   LENGTH,GENTXTS(SBR)
         DC    H'14'
         SPACE
         OI    IOTAB+16(WAREG),X'01'    ALL DATA SETS MAY BE NEEDED
         SPACE
KOG1     LA    SOURCE,8(0,SOURCE)       INCREASE SOURCE BY 8
         BR    SBR                      GO TO SNOT
         SPACE 2
KOC14    BAL   ADR,LOADPP(FSA)          **GENERATED CODE**
KOC15    DS    8C                       **GENERATED CODE**
KOC16    DS    H                        **GENERATED CODE**
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50005, CP18'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        COMPILER PROGRAM NR. 18
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   END OF CONDITIONAL STATEMENT                                      *
*        CONTEXT              PROGRAM                                 *
*        SOURCE OPERATOR      SEMICOLON,EPSILON, ETA, END             *
*        STACK  OPERATOR      ELSES                                   *
*        OPERANDS             CASE I)   LABEL NUMBER                  *
*                             CASE II)  PROCEDURE IDENTIFIER          *
*                                       LABEL NUMBER                  *
         SPACE 3
CP18     EQU   *
         USING *,BASE
BEB1     TM    HCOMPMOD(WAREG),X'01'         OPDT
         BZ    BEB2                          BRANCH IF FALSE
         BAL   RETURN,PLPRST(0,SBR)          BRANCH TO PLPRST HANDL.
         LA    OPDK,5(0,OPDK)                CLOPD
         NI    HCOMPMOD(WAREG),X'FE'         OPDFL=FALSE
BEB2     TM    HCOMPMOD(WAREG),X'80'         CMT
         BO    BEE2                          BRANCH IF FALSE
         MVC   WORKPL(2,WAREG),3(OPDK)       LOAD LABEL NUMBER
         LH    R2,WORKPL(0,WAREG)
         L     R1,LATAB(0,WAREG)             LOAD ADDRESS OF LATAB
         ST    PRPOINT,0(R1,R2)              STORE PRPOINTER IN TO LAT
BEE2     LA    OPDK,5(0,OPDK)                CLOPD
         MVI   GPBN+1(WAREG),X'FF'           DESTROY GLOBAL DSA
         BCT   OPTK,COMP(0,SBR)              CLOPT AND COMPARE
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50005, CP26'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        COMPILER PROGRAM NR.26
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   ERRONEOUS CASE                                                    *
*        CONTEXT              PROGRAM                                 *
*        SOURCE OPERATOR      ARRAY, SWITCH, PHI, PI                  *
*        STACK OPERATOR       .=, SEMICOLON,THENS, ELSES              *
*        OPERANDS                                                     *
         SPACE 3
CP26     EQU   *
         USING *,BASE
         BAL   RETURN,ERR166(0,SBR)          OPDT AND ERR 166/7
BUE2     BCTR  OPTK,0                        RELEASE ONE OPERATOR
         CLI   1(OPTK),X'1C'                 IS OPTK 'DO'
         BE    BUE3                          BRANCH IF 'DO'
         BL    BUG3                          BRANCH IF '= OR '
BUC3     LA    OPDK,5(0,OPDK)                RELEASE ONE  OPERAND
BUG4     B     COMP(0,SBR)                   BRANCH TO COMPARE
BUE3     SR    R0,R0                    CLEAR 4 OPERANDS +
         TM    6(OPDK),X'02'
         LA    OPDK,20(0,OPDK)
         BZ    COMP(SBR)
         MVC   WORKPL(2,WAREG),3(OPDK)
         LH    R0,WORKPL(WAREG)
         AR    OPDK,R0
         B     COMP(SBR)
BUG3     CLI   1(OPTK),X'0B'                 IS IN OPTK SEMICOLON
         BE    COMP(0,SBR)                   BRANCH TO COMPARE IF ;
         B     BUC3                          BRANCH IF ASSIGMENT
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50005, CP27'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        COMPILER PROGRAM NR. 27
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   ERRONEOUS CASE                                                    *
*        CONTEXT              PROGRAM, STATEMENT                      *
*        SOURCE OPERATOR      SEE MATRICES                            *
*        STACK OPERATOR       SEE MATRICES                            *
*        OPERANDS             VARIABLE NUMBER OF OPERANDS ACCORDING TO*
*                             THE OPERATOR                            *
         SPACE 3
CP27     EQU   *
         USING *,BASE
BWB1     TM    HCOMPMOD(WAREG),X'01'         OPDT
         BZ    BWB2                          BRANCH IF FALSE
         BAL   SRETURN,SERR3(0,SBR)          ERROR PATTERN ENTRY
         DC    H'195'                        ERROR NR 195
         LA    OPDK,5(0,OPDK)                RELEASE ONE OPERAND
         NI    HCOMPMOD(WAREG),X'FE'         OPDFL=FALSE
BNE2     BCTR  OPTK,0                        RELEASE ONE OPERATOR
         SR    R1,R1                         LOAD
         IC    R1,1(0,OPTK)                       OPERATOR INTO GPR1
         SLL   R1,2                          MULTIPLY BY FOUR
         B     LISTE-24(R1)
LISTE    B     COMP(0,SBR)                   LEFT PARENTHESIS
         B     BWF4C                    COLON
         B     BWH3                          BRACKET
         B     BWJ3                          ARRAY
         B     BWJ41                         SWITCH
         B     BWJ41                         SEMICOLON
         B     BWJ41                         BEGIN
         B     BWJ41                         BETHA
         B     BWJ41                         PHI
         B     BWJ41
         B     BWJ41                         EQUAL
         B     BWJ41                         LESS
         B     BWJ41                         GREATER
         B     BWJ41                         NOTEQUAL
         B     BWJ41                         NOTGREATER
         B     BWJ41                         NOLLESS
         B     BWF4                          ASSIGMENT
         B     COMP(0,SBR)                   GOTO
         B     BWK7                          FOR
         B     BWK5                          STEP
         B     BWK4                          UNTIL
         B     BWK5                          WHILE
         B     BWJ41                         DO
         B     COMP(0,SBR)                   IF
         B     BWF4                          THEN
         B     BWJ41                         ELSE
         B     BWJ41                         NOT
         B     BWJ41                         IMPLICATION
         B     BWJ41                         OR
         B     BWJ41                         AND
         B     BWJ41                         EQUIVALENT
         B     BWJ41                         ALPHA
         B     COMP(0,SBR)                   IFS
         B     BWJ41                         THENS
         B     BWJ41                         ELSES
         B     BWG3                          PARENT. IN PROCEDURE
         B     BWG4                          PARENT. IN STANDARD FUNCT.
         B     BWJ41                         MONODIC MINUS
         B     BWF4B                    BRACKET  RECL
         B     BWK6                          FOR.=
         B     BWK3                          SWITCH.=
BWK4     LA    OPDK,5(0,OPDK)                CLOPD
BWK5     BCTR  OPTK,0                        CLOPT
BWK6     BCTR  OPTK,0                        CLOPT
BWK8     LA    OPTK,1(OPTK)             RESERVE ONE PLACE IN STACK 0205
         MVI   0(OPTK),X'1C'            STACK 'DO'                 0205
         B     COMP(0,SBR)                   BRANCH TO COMPARE
BWK7     BAL   RETURN,STACKAPI(0,SBR)        STACK  API
         B     BWK8
BWF4     LA    OPDK,5(0,OPDK)                RELEASE ONE OPERAND
         B     COMP(0,SBR)                   BRANCH TO COMPARE
BWH3     LA    OPDK,15(0,OPDK)               RELEASE THREE OPERANDS
         B     BWG31                         BRANCH
BWJ4     CLI   0(SOURCE),X'0B'         IS IN SOURCE SEMICOLON
         BE    BWJ41
         B     COMP(SBR)
BWG4     LA    OPDK,20(0,OPDK)               RELEASE FOUR OPERANDS
         B     BWG31                         BRANCH
BWG3     SR    R0,R0                         RELEASE
         IC    R0,0(OPDK)                            N
         SLL   R0,8                                    +
         IC    R0,1(OPDK)                                2
         LA    OPDK,10(R0,OPDK)                            OPERANDS
BWG31    TM    0(OPTK),X'30'                 CHECK IF IN STACK CONT.OPT
         BC    12,COMP(0,SBR)                BRANCH TO COMPARE IF NOT
         BCTR  OPTK,0                        RELEASE ONE OPERATOR
         L     CCT,PRC(0,SBR)                LOAD CCT WITH PROG CONT MA
         CLI   1(OPTK),X'30'                 CHECK IF PROG CONT OPT
         BE    COMP(0,SBR)                   BRANCH IF PCO TO COMPARE
         L     CCT,STC(0,SBR)                LOAD CCT WITH STAT CONT MA
         CLI   1(OPTK),X'33'                 CHECK IF STAT CONT OPT
         BE    COMP(0,SBR)                   BRANCH IF STC TO COMPARE
         L     CCT,EXC(0,SBR)                LOAD CCT WITH EXP CONT MAT
         B     COMP(0,SBR)                   BRANCH TO COMPARE
BWK3     SR    R1,R1
         IC    R1,1(OPDK)               NR OF SWITCH ELEMENT OPERANDS
         LA    OPDK,20(OPDK,R1)         CLEAR OPERANDS
         B     COMP(SBR)                COMPARE
BWF4C    BCTR  OPTK,0                   IF COLON
BWF4B    BCTR  OPTK,0                   IF ARRAY BRACKET
         LA    OPDK,15(OPDK)            RELEASE 3 OPERANDS
BWJ3     AH    OPDK,GREGN(SBR)          CLEAR NUMBER OF ARRAY IDENT.
         MVC   GREGN(2,SBR),ZEROHW(WAREG)      CLEAR COUNTER
         B     COMP(SBR)
BWB2     BAL   SRETURN,SERR3(0,SBR)          ERROR PATTERN ENTRY
         DC    H'194'                        ERROR NR 194
         B     BNE2                          BRANCH
BWJ41    L     BASE,DSCPTAB+4*84(0,SBR)      UNCONDITIOAL BRANCH TO
         BR    BASE                          CP 84
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50005, CP28, CP29'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        COMPILER PROGRAM NR.28
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   ERRONEOUS CASE - DECLARATION IN WRONG  POSITION                   *
*        CONTEXT              PROGRAM                                 *
*        SOURCE OPERATOR      S                                       *
*        STACK OPERATOR       SEE PROGRAM CONTEXT  MATRIX             *
*        OPERANDS             VARIABLE NUMBER OF OPERANDS ACCORDING TO*
*                             THE OPERATOR                            *
         SPACE 2
CP28     EQU   *
         USING *,BASE
         BAL   RETURN,ERR166(0,SBR)
         BAL   RETURN,SCHDL(SBR)        SEMICOLON HANDLING
         CLI   0(OPTK),X'07'            STACK OPERATOR COLON
         BE    BYF1                     YES
         CLI   0(OPTK),X'2C'            ARRAY BRACKET IN STACK
         BE    BYF1+2                   YES
         CLI   0(OPTK),X'0A'            SWITCH  IN STACK
         BE    BYF2                     YES
         BR    SBR                      SNOT
BYF1     BCTR  OPTK,0                   RELEASE COLON
         SH    OPTK,CON2(SBR)           RELEASE BRACKET AND ARRAY
         LA    OPDK,15(OPDK)            RELEASE 3 OPERANDS
         AH    OPDK,GREGN(SBR)          CLEAR NUMBER OF ARRAY IDENT.
         MVC   GREGN(2,SBR),ZEROHW(WAREG)      CLEAR COUNTER
         BR    SBR                      SNOT
BYF2     LA    OPDK,10(OPDK)            CLEAR TWO OPERANDS
         BCTR  OPTK,SBR                 CLEAR SWITCH, SNOT
          SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        COMPILER PROGRAM NR.29
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   ERRONEOUS CASE  - BEGIN OF DECLARATION                            *
*        CONTEXT              PROGRAM                                 *
*        SOURCE OPERATOR      ARRAY,SWITCH,PI,PHI                     *
*        STACK OPERATOR       BEGIN, DO                               *
*        OPERANDS             NONE OR ONE                             *
         SPACE 2
CP29     EQU   *
         USING *,BASE
         BAL   RETURN,ERR166(0,SBR)
CAF1     L     BASE,DSCPTAB+4*4(0,SBR)       LOAD ADDRESS OF CP 4
         BR    BASE                          BRANCH TO CP4
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50005, CP30, CP31'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        COMPILER PROGRAM NR.30
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        ERRONEOUS CASE  - LABEL IN INCORRECT POSITION                *
*        CONTEXT              PROGRAM                                 *
*        SOURCE OPERATOR      LABEL OPERATOR                          *
*        STACK OPERATOR       SEE PROGRAM CONTEXT MATRIX              *
*        OPERANDS             LABEL IDENTIFIER                        *
         SPACE 2
CP30     EQU   *
         USING *,BASE
CCB1     TM    HCOMPMOD(WAREG),X'01'         OPDT
         BZ    BKQB1                         BRANCH IF NO OPERAND
         BAL   RETURN,SERR2(0,SBR)           ERROR PATTERN ENTRY
         DC    H'169'                        ERROR NR 169
         LA    OPDK,5(0,OPDK)                RELEASE ONE OPERAND
         BR    SBR                           BRANCH TO SNOT
BKQB1    L     BASE,DSCPTAB+4*84(0,SBR)      LOAD ADDRESS OF OP84
         BR    BASE                          BRANCH TO CP84
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        COMPILER PROGRAM NR.31
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   ERRONEOUS CASE  - INCORRECT CONVINATION OF OPERATORS IN PROGRAM   *
*                     CONTEXT                                         *
*        SOURCE OPERATOR      SEE PROGRAM CONTEXT MATRIX              *
*        STACK  OPERATOR      SEE PROGRAM CONTEXT MATRIX              *
*        OPERANDS             NONE OR ONE                             *
         SPACE 2
CP31     EQU   *
         USING *,BASE
CEF1     LA    CCT,614(0,CCT)                SWITCH TO EXPRESSION CONT.
CEB1     TM    HCOMPMOD(WAREG),X'01'         OPDT
         BZ    CEB2                          BRANCH IF FALSE
         BAL   RETURN,SERR4(0,SBR)           ERROR PATTERN ENTRY
         DC    H'161'                        ERROR NR 161
         B     COMP(0,SBR)                   BRANCH TO COMPARE
CEB2     BAL   RETURN,SERR4(0,SBR)           ERROR PATTERN ENTRY
         DC    H'160'                        ERROR NR 160
         B     COMP(0,SBR)                   BRANCH TO COMPARE
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50005, CP63'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              COMPLIER PROGRAM 63
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   MONADIC MINUS SIGN                                                *
*        CONTEXT              EXPRESSION                              *
*        SOURCE OPERATOR      ALL EXCEPT 'NOT',C,1),'IF','POWER'      *
*        STACK OPERATOR       MONADIC MINUS                           *
*        OPERANDS             ARITHMETIC OPERAND                      *
         SPACE 2
CP63     EQU   *
         USING *,BASE
         LA    RETURN,GBD4                   LOAD RETURN ADD FOR ERROR
         BAL   R3,OPDTEST(SBR)               OPDT AND ERROR NR 162
         BAL   RETURN,ARRTEST1(0,SBR)        ARRAY AND PROC. TEST
         TM    1(OPDK),X'03'                 IS OPERAND ARITHMETIC
         BM    GAD1                          BRANCH IF OPER. IS ARITH.
         TM    0(OPDK),APIMASK          IS OPERAND API             5603
         BZ    GAC2                          BRANCH IF OPERAND NOT API
GBD4     BCT   OPTK,COMP(0,SBR)              RELEASE 1 OPT AND COMPARE
GAD1     TM    HCOMPMOD(WAREG),X'C0'   CMT OR SUBSC OPTIMIZED    A28235
         BC    5,GBD4                                            A28235
         BAL   RETURN,OPDREC(0,SBR)          OPERAND RECOGNIZER
         TM    1(OPDK),X'02'                 CHECK IF OPERAND IS REAL
         BZ    GBE1                          IF OPERAND IS INTEG BRANCH
         TM    0(OPDK),X'20'            IS OPERAND A VALUE
         BO    GAH3                          BRANCH IF ADDRESS
         TM    0(OPDK),X'40'                 IS OPERAND IN A REGISTER
         BO    GAH2                          BRANCH IF IN CORE
         IC    R14,3(OPDK)                   *INSERT
GBC5     STC   R14,GAJ1+1                    *REGISTER
         SRL   R14,4                         *INTO
         STC   R14,WORKPL(0,WAREG)           *GENERATED
         MVN   GAJ1+1(1),WORKPL(WAREG)
         BAL   INFORM,GENTXTP2(0,SBR)        BRANCH TO GENERATE ROUTINE
GAJ1     LCDR  0,0                           ***GENERATE***
GAJ11    OI    0(OPDK),X'08'                 INSERT NO ASSIGMENT BIT
         BCT   OPTK,COMP(0,SBR)              DELEASE OPERATOR AND COMP
GAH2     TM    0(OPDK),X'80'                 WAS LO IN A REG.BEFORE
         BO    GAH3                          BRANCH IF NOT
         SH    P,ONEENTRY(0,WAREG)           RELEASE 1.OBJ. STACK ENTRY
GAH3     BAL   RETURN,ROUTIN11(0,SBR)        RESERVE A FLOT POINT REG.
         SH    OPDK,CON5(0,SBR)              INCREASE OPERAND STACK
         TM    5(OPDK),X'20'                 IS LO A VALUE
         BZ    GBC2                          BRANCH IF IT IS A VALUE
         BAL   RETURN,ROUTINE2(0,SBR)   BRANCH TO ROUTINE NR 2
GBC4     LA    OPDK,5(0,OPDK)                DECREASE OPERAND STACK
         SLL   R14,4
         B     GBC5                          BRANCH
GBC2     BAL   RETURN,ROUTINE4(0,SBR)        GENERATE LOADING INTO FPR
         B     GBC4                          BRANCH
GBE1     TM    0(OPDK),X'20'                 IS OPERAND A VALUE
         BO    GBF3                          BRANCH IF ADDRESS
         TM    0(OPDK),X'40'                 IS OPERAND IN A REGISTER
         BO    GBF2                          BRANCH IF IN CORE
         IC    R14,3(OPDK)                   *INSERT
GBG11    STC   R14,GBG1+1                    *REGISTER
         SRL   R14,4                         *INTO
         STC   R14,WORKPL(0,WAREG)           *GENERATED
         MVN   GBG1+1(1),WORKPL(WAREG)       *CODE
         BAL   INFORM,GENTXT2(0,SBR)         BRANCH TO GENERATE ROUTINE
GBG1     LCR   0,0                      ***GENERATE***
         B     GAJ11                         BRANCH
GBF2     TM    0(OPDK),X'80'                 WAS LO IN A REG,BEFORE
         BO    GBF3                      DECREASE
         SH    P,ONEENTRY(0,WAREG)           RELEASE 1 OBJ.STACK ENTRY
GBF3     BAL   RETURN,ROUTINE7(0,SBR)        RESERVE GENERAL PURPOSE R.
         SH    OPDK,CON5(0,SBR)              INCREASE OPERAND STACK
         TM    5(OPDK),X'20'                 IS LO A VALUE
         BO    GBH5                          BRANCH IF ADDRESS
         BAL   RETURN,ROUTINE5(0,SBR)        GENERATE LOADING INTO GPR
GBK4     LA    OPDK,5(0,OPDK)                DECREASE OPERAND STACK
         SLL   R14,4                         SHIFT REGISTER NUMBER
         B     GBG11                         BRANCH
GBH5     BAL   RETURN,ROUTINE6(0,SBR)        GENERATE LOANDING INTO GPR
         B     GBK4                          BRANCH
GAC2     BAL   SRETURN,SERR2(0,SBR)          ERROR PATTERN ENTRY
         DC    H'163'                        ERROR NR. 163
GAC4     MVC   0(5,OPDK),API(SBR)            MOVE API
         BCT   OPTK,COMP(0,SBR)              RELEASE OPERATOR AND COMP
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50005, CP65'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        C O M P I L E R   P R O G R A M   N R . 6 5                  *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   HANDLING OF 'NOT' AND 'IF'                                        *
*        CONTEXT              EXPRESSION                              *
*        SOURCE OPERATOR      CASE I 'NOT'                            *
*                             CASE II 'IF'                            *
*                                                                     *
*        STACK OPERATOR       CASE I  ALL EXCEPT  'NOT',ARITHMETICAL  *
*                                     OPERATORS,RELATIONAL OPERATORS  *
*        CASE II 'IF','IFS'                                           *
*                                                                     *
*        OPERANDS             NONE                                    *
         SPACE 2
CP65     EQU   *
         USING *,BASE
GFC1     TM    HCOMPMOD(WAREG),X'01'         OPDT
         BZ    GFC2                          BRANCH IF FALSE
         BAL   RETURN,SERR4(0,SBR)           ERROR PATTERN ENTRY
         DC    H'164'                        ERROR NR. 164
         LA    OPDK,5(0,OPDK)                RELEASE ONE OPERAND
GFC2     BAL   RETURN,MOVEOPTK(0,SBR)        INCREASE OPT STACK POINTER
         MVC   0(1,OPTK),0(SOURCE)           INSERT SOURCE INTO STACK
         BR    SBR                           BRANCH TO SNOT
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50005, CP66'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        COMPILER PROGRAM NR.66
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   HANDLING OF PLUS AND MINUS                                        *
*        CONTEXT              EXPRESSION                              *
*         SOURCE OPERATOR     +,-                                     *
*        STACK  OPERATOR      ALL EXCEPT ARITHMETIC  OPERATORS        *
*        OPERANDS             NONE OR ONE ARITHMETIC OPERAND.         *
         SPACE 2
CP66     EQU   *
         USING *,BASE
         BAL   RETURN,MOVEOPTK(0,SBR)        INCREASE OPT STACK POINTER
         TM    HCOMPMOD(WAREG),X'01'         OPDT
         BZ    GHC2                          BRANCH IF FALSE
         MVC   0(1,OPTK),0(SOURCE)           INSERT SOURCE INTO STACK
         BR    SBR                           BRANCH TO SNOT
GHC2     CLI   0(SOURCE),X'01'               IS IN SOURCE MINUS
         BC    7,GHC3                        BRANCH IF NOT
         MVI   0(OPTK),X'2B'                 STACK MONADIC MINUS
         BR    SBR                           BRANCH TO SNOT
GHC3     MVI   SWVAL(SBR),X'FF'              SET SWITCH TO ONE
         BCTR  OPTK,0                        DECREASE OPT STACK POINTER
GHC4     CLI   1(SOURCE),X'2F'               IS IN SOURCE END OF BUFF.
         BL    GHC5                          BRANCH IF OPERATOR
         BCR   2,SBR                         IF OPERAND BRANCH TO SNOT
         BAL   RETURN,JBUFFER(0,SBR)
         B     GHC4                          BRANCH
GHC5     CLI   1(SOURCE),X'06'               IS IN SOURCE 'C'
         BCR   8,SBR                         BRANCH IF 'C' TO SNOT
         BAL   RETURN,SERR4(0,SBR)           ERROR PATTERN ENTRY
         DC    H'160'                        ERROR NR. 160
         BR    SBR                           BRANCH TO SNOT
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50005, CP67, CP68'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        COMPILER PROGRAM NR.67
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   STACKING OF ARITHMETIC,RELATIONAL OR BOOLEAN OPERATORS            *
*        CONTEXT              EXPRESSION                              *
*        SOURCE OPERATOR      SEE EXPRESSION CONTEXT  MATRIX          *
*        STACK  OPERATOR      SEE EXPRESSION CONTEXT  MATRIX          *
*        OPERANDS             ONE OPERAND                             *
         SPACE 2
CP67     EQU   *
         USING *,BASE
GSC1     TM    HCOMPMOD(WAREG),X'01'         OPDT
         BZ    GJC2                          BRANCH IF FALSE
         BAL   RETURN,MOVEOPTK(0,SBR)        INCREASE OPT STACK POINTER
         MVC   0(1,OPTK),0(SOURCE)           INSERT SOURCE INTO STACK
         CLI   0(OPTK),X'05'                 IS OPT POWER
         BCR   7,SBR                         BRANCH IF NOT
         MVI   SWVAL(SBR),X'00'              SET SWITCH TO ZERO
         BR    SBR                           BRANCH TO SNOT
GJC2     BAL   RETURN,SERR4(0,SBR)           ERROR PATTERN ENTRY
         DC    H'162'                        ERROR NR.162
         BR    SBR                           BRANCH TO SNOT
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        COMPILER PROGRAM NR.68                                       *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   3PENING AND CLOSING PARENTHESIS                                   *
*        CONTEXT              EXPRESSION                              *
*        SOURCE OPERATOR      )                                       *
*        STACK OPERATOR       (                                       *
*        OPERANDS             ONE                                     *
         SPACE 2
CP68     EQU   *
         USING *,BASE
         LA    RETURN,GLF2                   LOAD RETURN ADDRSS
         BAL   R3,OPDTEST(SBR)               OPDT AND ERROR 162
GLF2     BCT   OPTK,SPEC(0,SBR)              RELEASE OPT AND SNOT SP
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50005, CP70, CP72'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        COMPILER PROGRAM NR.70
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   CONTEXT SWITCH,EXPRESSION CONTEXT                                 *
*        CONTEXT              EXPRESSION                              *
*        SOURCE OPERATOR      ),'ELSE' ALL OPERATORS NOT SPECIFIED IN *
*                             EXPRESSION CONTEXT                      *
*        STACK OPERATOR       ALL OPERATORS NOT SPECIFIED IN EXPRESSIO*
*                             CONTEXT                                 *
*        OPERANDS             NOT TREATED                             *
         SPACE 2
CP70     EQU   *
         USING *,BASE
JAF1     SH    CCT,CON324(0,SBR)             SWITCH TO STATM  CONTEXT
         B     COMP(0,SBR)                   BRANCH TO COMPARE
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*              COMPILER PROGRAM NR. 72                                *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   NESTED CONDITIONAL EXPRESSIONS                                    *
*        CONTEXT              EXPRESSION                              *
*        SOURCE OPERATOR      'ELSE'                                  *
*        STACK OPERATOR       'ELSE'                                  *
*        OPERANDS             NOT TR,                                 *
         SPACE 2
CP72     EQU   *
         USING *,BASE
         BCTR  OPTK,0                        DECREASE OPT STACK POINTER
         CLI   0(OPTK),X'16'                 IS OPT ASSIGMENT
         BE    JAF2                          BRANCH IF ASSIGMENT   0228
         CLI   0(OPTK),X'17'                 IS OPT GOTO           0228
JAF2     LA    OPTK,1(0,OPTK)                INCR OPT STACK PT     0228
         L     BASE,DSCPTAB+4*75(0,SBR)      LOAD ADDRESS OF CP 75 0228
         BNE   0(BASE)                       BRANCH IF NOT ASSIGMENT
         L     BASE,DSCPTAB+4*79(0,SBR)      LOAD ADDRESS OF CP 79
         BR    BASE                          BRANCH TO CP 79
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50005, CP73, CP74'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        COMPILER PROGRAM NR.73
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   ERRONEOUS CASE - THE OPENING PARENTHESIS IS MISSING IN A          *
*                    CONDITIONAL EXPRESSION                           *
*        CONTEXT              EXPRESSION                              *
*        SOURCE OPERATOR      'IF'                                    *
*        STACK OPERATOR       SEE EXPRESSION CONTEXT MATRIX           *
*        OPERANDS             NONE OR ONE                             *
         SPACE 2
CP73     EQU   *
         USING *,BASE
JGB1     TM    HCOMPMOD(WAREG),X'01'         OPDT
         BZ    JGB2                          BRANCH IF FALSE
         BAL   SRETURN,SERR4(0,SBR)          ERROR PATTERN ENTRY
         DC    H'161'                        ERROR NR.161
         LA    OPDK,5(0,OPDK)                RELEASE ONE OPERAND
JGE1     BAL   RETURN,MOVEOPTK(0,SBR)        INCREASE BY 1 OPT.POINTER
         MVI   0(OPTK),X'06'                 INSERT '(' INTO STACK
         BAL   RETURN,MOVEOPTK(0,SBR)        INCREASE BY 1 OPT.POINTER
         MVC   0(1,OPTK),0(SOURCE)           INSERT SOURCE INTO STACK
         BR    SBR                           BRANCH TO SNOT
JGB2     BAL   SRETURN,SERR4(0,SBR)          ERROR PATTERN ENTRY
         DC    H'160'                        ERROR NUMBER 160
         B     JGE1                          BRANCH.
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        COMPILER PROGRAM NR.74
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   ERRONEOUS CASE - CONBINATION OF TWO RELATIONAL OPERATORS          *
*        CONTEXT              EXPRESSION                              *
*        SOURCE OPERATORS     RELATIONAL OPERATOR                     *
*        STACK OPERATORS      RELATIONAL OPERATOR                     *
*        OPERANDS             NONE OR ONE                             *
         SPACE 2
CP74     EQU   *
         USING *,BASE
JIB1     TM    HCOMPMOD(WAREG),X'01'         OPDT
         BZ    JIB2                     BRANCH IF FALSE
         BAL   RETURN,SERR4(0,SBR)           ERROR PATTERN ENTRY
         DC    H'161'                        ERROR NR 161
JIF2     BAL   RETURN,MOVEOPTK(0,SBR)        INCREASE BY 1 OPT.POINTER
         MVI   0(OPTK),X'02'                 INSERT * INTO STACK
         BR    SBR                           BRANCH TO SNOT
JIB2     BAL   RETURN,SERR4(0,SBR)           ERROR PATTERN ENTRY
         DC    H'160'                        ERROR NR 160
         BAL   RETURN,STACKAPI(0,SBR)        STACK ALL PURPOSE IDENT.
         B     JIF2
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50005, CP75'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        COMPILER PROGRAM NR.75
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   ERRONEOUS CASE - NOT PERMITED OPERATOR PAIR WHERE THE STACK       *
*                    OPERATOR IS ASSUMED TO BE THE CORRECT ONE        *
*        CONTEXT              PROGRAM, STATEMENT, EXPRESSION          *
*        SOURCE OPERATOR      SEE CONTEXT MATRICES                    *
*        STACK OPERATOR       SEE CONTEXT MATRICES                    *
*        OPERANDS             NONE OR ONE                             *
         SPACE 2
CP75     EQU   *
         USING *,BASE
JKB1     TM    HCOMPMOD(WAREG),X'01'         OPDT
         BZ    JKB2                          BRANCH IF FALSE
         BAL   RETURN,SERR3(0,SBR)           ERROR PATTERN ENTRY
         DC    H'195'                        ERROR NR 195
         LA    OPDK,5(0,OPDK)                RELEASE ONE OPERAND
         BR    SBR                           BRANCH TO SNOT
JKB2     BAL   RETURN,SERR3(0,SBR)           ERROR PATTERN ENTRY
         DC    H'194'                        ERROR NR 194
         BR    SBR                           BRANCH TO SNOT
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50005, CP76'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        COMPILER PROGRAM NR. 76
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   BOOLEAN OPERATIONS                                                *
*        CONTEXT              EXPRESSION                              *
*        SOURCE OPERATOR      SEE EXPRESSION CONTEXT MATRIX           *
*        STACK  OPERATOR      SEE EXPRESSION CONTEXT MATRIX           *
*        OPERAND              TWO OPERANDS                            *
         SPACE 2
CP76     EQU   *
         USING *,BASE
         LA    RETURN,JRF41
         BAL   R3,OPDTEST(SBR)               OPDT AND ERROR 162
         BAL   RETURN,ARRTEST2(0,SBR)
         TM    6(OPDK),X'03'                 IS BLO BOOLEAN
         BC    12,JMC2                       BRANCH IF NOT
         TM    1(OPDK),X'03'                 IS LO BOOLEAN
         BC    12,JMC3                       BRANCH IF NOT
         TM    HCOMPMOD(WAREG),X'80'         CMT
         BO    JRF41                         BRANCH IF FALSE
         BAL   RETURN,OPDREC(0,SBR)          OPERAND RECOGNIZER (LO)
         LA    OPDK,5(0,OPDK)                DECREASE OPERAND POINTER
         BAL   RETURN,OPDREC(0,SBR)          OPERAND RECOGNIZER (BLO)
         SH    OPDK,CON5(0,SBR)              INCREASE OPERAND POINTER
         TM    5(OPDK),X'A0'                 IS BLO A VALUE OR IN STACK
         BC    5,JOB1                        BRANCH IF NOT
         MVC   YPLACE(2,WAREG),8(OPDK)      Y=DISP(BLO)
         OI    YPLACE(WAREG),X'A0'           X= CDSA.
JNE1     TM    0(OPDK),X'20'                 IS LO A VALUE
         BO    JNE5                          BRANCH IF NOT
         TM    0(OPDK),X'80'                 IS LO IN STACK
         BO    JNF2                          BRANCH IF NOT
         MVC   WPLACE(2,WAREG),3(OPDK)       W=DISP(LO)
         OI    WPLACE(WAREG),X'A0'           V= CDSA
JRB3     MVC   JRC3+2(2),YPLACE(WAREG)       PREPARE INSTRUCTION
         MVC   JRC3+4(2),WPLACE(WAREG)
         TM    0(OPTK),X'02'                 IS OPT 'IMPL'OR'EQUIV'
         BZ    JRC4                          BRANCH IF 'IMPL'OR'EQUIV'
         TM    0(OPTK),X'01'                 IS OPT AND
         BO    JRC2                          BRANCH IF OPT IS AND
JRC22    MVI   JRC3,X'D6'                    PREPARE INSTRUCTION
JRC21    BAL   INFORM,GENTXT6(0,SBR)         BRANCH TO GENERATE ROUTINE
JRC3     OC    0(1,0),0(0)                   ***GENERATE***
JRF4     NI    YPLACE(WAREG),X'0F'           CLEAR REGISTER NUMBER
         LH    P,YPLACE(WAREG)               LOAD VALUE OF OBJ.ST.POINT
         OI    5(OPDK),X'08'                 INSERT NO-ASSIGNMENT BIT
JRF41    LA    OPDK,5(0,OPDK)                CLOPD
JRG4     BCT   OPTK,COMP(0,SBR)              CLOPT AND COMPARE
JRC2     MVI   JRC3,X'D4'                    INSERT OPER-CODE INTO CODE
         B     JRC21
JRC4     MVC   JRC41+2(2),JRC3+2             PREPARE INSTRUCTION
         BAL   INFORM,GENTXT4(0,SBR)         BRANCH TO GENERATE ROUTINE
JRC41    XI    0(0),X'01'                    ***GENERATE***
         CLI   0(OPTK),X'21'                 IS OPT EQUIV
         BE    JRC22                         BRANCH IF OPT IS EQUIV
         MVI   JRC3,X'D7'                    INSERT OPER-CODE INTO CODE
         B     JRC21
JNF2     TM    2(OPDK),X'FF'                 IS LO A CONSTANT
         BC    5,JNF4                        BRANCH IF NOT
JSB3     MVC   JSE3+1(1),4(OPDK)             PREPARE INTRUCTION
         NI    JSE3+1,X'01'
         MVC   JSE3+2(2),YPLACE(WAREG)
         TM    0(OPTK),X'02'                 WHICH OPT
         BZ    JSE4                          BRANCH IF EQU OR IMPL
         TM    0(OPTK),X'01'                 IS OPT AND
         BO    JSE2                          BRANCH IF OPT IS AND
JSE22    MVI   JSE3,X'96'                    PREPARE INSTRUCTION
JSE21    BAL   INFORM,GENTXT4(0,SBR)         BRANCH TO GENERATE ROUTINE
JSE3     OI    0(0),X'00'                    ***GENERATE***
         B     JRF4
JSE2     MVI   JSE3,X'94'                    PREPARE INSTRUCTION
         B     JSE21
JSE4     MVC   JSE41+2(2),JSE3+2             PREPARE INSTRUCTION
         BAL   INFORM,GENTXT4(0,SBR)         BRANCH TO GENERATE ROUTINE
JSE41    XI    0(0),X'01'                    ***GENERATE***
         CLI   0(OPTK),X'21'                 IS OPT EQUIV
         BE    JSE22                         BRANCH IF OPT IS EQUIV.
         MVI   JSE3,X'97'                    PREPARE INSTRUCTION
         B     JSE21
JNF4     BAL   RETURN,ROUTINE1(0,SBR)        ROUTINE NR. 1
JNF41    MVZ   WPLACE(1,WAREG),VPLACE(WAREG) PREPARE W-V-PLACE
         B     JRB3
JNE5     BAL   RETURN,ROUTINE3(0,SBR)        ROUTINE NR. 3
         B     JNF41
JOB1     TM    0(OPDK),X'A0'                 IS LO A VALUE AND IN STACK
         BC    5,JOC2                        BRANCH IF NOT
         MVC   YPLACE(2,WAREG),3(OPDK)       Y= DISPL(LO)
         OI    YPLACE(WAREG),X'A0'           X=CDSA
         CLI   0(OPTK),X'21'                 IS OPT IMPL
         BNE   JOE2                          BRANCH IF NOT
         AH    P,ONEENTRY(WAREG)             RESERVE OBJECT STACK ENTRY
         STH   P,WORKPL(WAREG)               CHECK MAX
         BAL   RETURN,MAXCH(0,SBR)
         MVC   JOG1+4(2),YPLACE(WAREG)       PREPARE INSTRUCTION
         MVC   JOG1+2(2),WORKPL(WAREG)
         OI    JOG1+2,X'A0'
         BAL   INFORM,GENTXT6(0,SBR)         BRANCH TO GENERATE ROUTINE
JOG1     MVC   0(1,CDSA),0(0)                ***GENERATE***
         MVC   3(2,OPDK),WORKPL(WAREG)       ADJUST OPERAND
         B     JPB1
JOE2     MVC   WORKPL(5,WAREG),0(OPDK)       CHANGE LO AND BLO
         MVC   0(5,OPDK),5(OPDK)
         MVC   5(5,OPDK),WORKPL(WAREG)
         B     JNE1
JOC2     AH    P,ONEENTRY(0,WAREG)           INCREASE P
         STH   P,WORKPL(0,WAREG)             CHECK MAX
         BAL   RETURN,MAXCH(0,SBR)
         STH   P,YPLACE(WAREG)               Y.=DISPL
         OI    YPLACE(WAREG),X'A0'           X=CDSA.
JPB1     TM    5(OPDK),X'20'                 IS BLO A VALUE
         BO    JQB2                          BRANCH IF ADDRESS
         TM    7(OPDK),X'FF'                 IS BLO A CONSTANT
         BC    5,JQB2                        BRANCH IF NOT
         MVC   JQE1+1(1),9(OPDK)             PREPARE INSTRUCTION
         NI    JQE1+1,X'01'
         MVC   JQE1+2(2),YPLACE(WAREG)
         BAL   INFORM,GENTXT4(0,SBR)         BRANCH TO GENERATE ROUTINE
JQE1     MVI   0(CDSA),X'00'                 ***GENERATE***
         OI    6(OPDK),X'30'                 ADJUST OPDK ENTRY OF BLO
JQE2     NI    5(OPDK),X'5F'
         MVC   7(1,OPDK),SPBNST+1(WAREG)
         MVC   8(2,OPDK),YPLACE(WAREG)
         NI    8(OPDK),X'0F'
         B     JNE1
JMC2     BCTR  OPTK,0                        DECRESE BY 1 OPT.ST.POINT.
         BAL   RETURN,SERR2(0,SBR)           ERROR PATTERN ENTRY
         DC    H'182'                        ERROR NR.182
         LA    OPTK,1(0,OPTK)                INCREASE BY 1 OPT ST.POINT
JMC31    MVC   5(5,OPDK),API(SBR)            INSERT ALL PURPOSE IDENT.
         B     JRF41
JMC3     BAL   SRETURN,SERR2(0,SBR)          BRANCH TO ERROR ROUTINE
         DC    H'182'                        ERROR NR. 182
         B     JMC31
JQB2     LA    OPDK,5(0,OPDK)                INCREASE OPDK
         TM    0(OPDK),X'20'                 IS BLO A VALUE
         BO    JQB4
         BAL   RETURN,ROUTINE1(0,SBR)        LOAD W-V-PLACE FOR VALUE
JQD3     SH    OPDK,CON5(0,SBR)              INCREASE OPERAND ST.POINT
         MVC   JQE3+2(2),YPLACE(WAREG)       PREPARE INSTRUCTION
         MVC   JQE3+4(2),WPLACE(WAREG)
         MVZ   JQE3+4(1),VPLACE(WAREG)
         BAL   INFORM,GENTXT6(0,SBR)         BRANCH TO GENERATE ROUTINE
JQE3     MVC   0(1,0),0(0)                   ***GENERATE***
         B     JQE2
JQB4     BAL   RETURN,ROUTINE3(0,SBR)
         OI    0(OPDK),X'40'                 ADJUST OPERAND
         B     JQD3                          BRANCH.
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50005, CP77'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        COMPILER PROGRAM NR.77
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   LOGICAL OPERATION NOT                                             *
*        CONTEXT              EXPRESSION                              *
*        SOURCE OPERATOR      ALL EXCEPT 'NOT',(,(/,'IF',ARITHMETIC   *
*                             AND RELATIONAL OPERATORS                *
*        STACK OPERATOR       'NOT'                                   *
*        OPERANDS             ONE BOOLEAN                             *
         SPACE 2
CP77     EQU   *
         USING *,BASE
         LA    RETURN,JWB2                   LOAD RETURN ADDRESS
         BAL   R3,OPDTEST(SBR)               OPDT AND ERROR 162
         BAL   RETURN,ARRTEST1(0,SBR)        ARRAY AND PROC TEST
         TM    1(OPDK),X'03'                 IS OPERAND BOOLEAN
         BO    JWD1                          BRANCH IF BOOLEAN
         BAL   SRETURN,SERR2(0,SBR)          ERROR PATTERN ENTRY
         DC    H'182'                        ERROR NR.182
JWC4     MVC   0(5,OPDK),API(SBR)        INTRODUCE API
JWK3     BCT   OPTK,COMP(0,SBR)              RELEASE OPERATOR AND COMP.
JWD1     TM    HCOMPMOD(WAREG),X'80'         CMT
         BO    JWK3                          BRANCH IF FALSE
         BAL   RETURN,OPDREC(0,SBR)          OPERAND RECOGNIZER
         TM    0(OPDK),X'20'                 IS OPERAND A VALUE
         BO    JWF2                          BRANCH IF ADDRESS
         TM    2(OPDK),X'FF'                 IS OPERAND A VARIABLE
         BZ    JWH1                          BRANCH IF CONSTANT
         TM    0(OPDK),X'80'                 IS OPERAND IN OBJ.ST.
         BO    JWG3                          BRANCH IF IN NOT IN STACK
JWH21    MVC   JWH2+2(2),3(OPDK)             PREPARE INSTRUCTION
         OI    JWH2+2,X'A0'                  INTRODUCE CDSA
         BAL   INFORM,GENTXT4(0,SBR)         BRANCH TO GENERATE ROUTINE
JWH2     XI    0(CDSA),X'01'                 ***GENERATE***
JWH3     OI    0(OPDK),X'08'                 INSERT NO ASSIGMENT BIT
JWB2     BCT   OPTK,COMP(0,SBR)              RELEASE OPERATOR AND COMP.
JWG3     BAL   RETURN,ROUTINE1(0,SBR)        LOAD W-V-PLACE FOR VALUE
JWG31    AH    P,ONEENTRY(0,WAREG)           RESERVE OBJECT STACK ENTRY
         STH   P,WORKPL(0,WAREG)             STORE P INTO WORKPL
         BAL   RETURN,MAXCH(0,SBR)           CHECK MAXIMUM
         NI    0(OPDK),X'5F'                 ADJUST OPERAND
         MVC   3(2,OPDK),WORKPL(WAREG)       INSERT OBJ. ST. DISPLACEME
         MVC   2(1,OPDK),SPBNST+1(WAREG)     INSERT BLOCK NUMBER
         MVC   JWJ3+2(2),WORKPL(WAREG)       PREPARE INSTRUCTION
         OI    JWJ3+2,X'A0'                  INSERT CDSA
         MVC   JWJ3+4(2),WPLACE(WAREG)       INSERT W-PLACE
         MVZ   JWJ3+4(1),VPLACE(WAREG)       INSERT V-PLACE
         BAL   INFORM,GENTXT6(0,SBR)         BRANCH TO GENERATE ROUTINE
JWJ3     MVC   0(1,CDSA),0(0)                ***GENERATE***
         B     JWH21                         BRANCH
JWH1     AH    P,ONEENTRY(0,WAREG)      INCREASE P
         STH   P,WORKPL(0,WAREG)             STORE P INTO WORKPL
         BAL   RETURN,MAXCH(0,SBR)           CHECK MAXIMUM
         MVC   JWK1+2(2),WORKPL(WAREG)       PREPARE INSTRUCTION
         OI    JWK1+2,X'A0'                  INSERT CDSA
JWK11    MVI   JWK1+1,X'00'                  INSERT FALSE
         TM    4(OPDK),X'01'                 IS CONSTANT TRUE
         BO    JWK12                         BRANCH IF TRUE
         MVI   JWK1+1,X'01'                  INSERT TRUE
JWK12    BAL   INFORM,GENTXT4(0,SBR)         BRANCH TO GENERATE ROUTINE
JWK1     MVI   0(CDSA),X'00'                 ***GENERATE***
         MVC   3(2,OPDK),WORKPL(WAREG)       INSERT OBJ. DISPLACEMENT
         NI    0(OPDK),X'5F'                 ADJUST OPERAND
         OI    1(OPDK),X'30'                 SET OPERAND AS VARIABLE
         MVC   2(1,OPDK),SPBNST+1(WAREG)     INSERT BLOCK NUMBERT
         B     JWH3                          BRANCH
JWF2     BAL   RETURN,ROUTINE3(0,SBR)        LOAD V-W-PLACE FOR ADDRESS
         OI    0(OPDK),X'40'                 ADJUST OPERAND
         B     JWG31                         BRANCH
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50005, CP78'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        COMPILER PROGRAM NR.78
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   IF.CLAUSE                                                         *
*        CONTEXT              EXPRESSION                              *
*        SOURCE OPERATOR      'THEN'                                  *
*        STACK OPERATOR       'IF','IFS'                              *
*        OPERANDS             BOOLEAN OPERANDS                        *
         SPACE 2
CP78     EQU   *
         USING *,BASE
         LA    RETURN,JZB1
         BAL   R3,OPDTEST(SBR)               OPDT AND ERROR 162
         BAL   RETURN,ARRTEST1(0,SBR)
         TM    1(OPDK),X'03'                 IS OPERAND BOOLEAN
         BO    JYD1                          BRANCH IF BOOLEAN
         BAL   RETURN,SERR2(0,SBR)           ERROR PATTERN ENTRY
         DC    H'182'                        ERROR NR 182
JZB1     CLI   0(OPTK),X'26'                 IS OPERATOR IFS
         MVC   0(1,OPTK),0(SOURCE)           INSERT SOURCE INTO STACK
         BCR   7,SBR                         BRANCH IF IF TO SNOT
         MVI   0(OPTK),X'27'                 INSERT THENS INTO STACK
         SH    CCT,CON614(0,SBR)             SWITCH TO PROGRAM CONTEXT
         BR    SBR                           BRANCH TO SNOT
JYD1     TM    HCOMPMOD(WAREG),X'80'         CMT
         BO    JZB1                          BRANCH IF FALSE
         BAL   RETURN,OPDREC(0,SBR)          OPERAND RECOGNIZER
         TM    0(OPDK),X'20'                 IS OPERAND A VALUE
         BO    JYF2                          BRANCH IF ADDRESS
         TM    0(OPDK),X'80'                 IS OPERAND IN OBJECT STACK
         BO    JYH12                         BRANCH IF NOT
         SH    P,ONEENTRY(0,WAREG)           RELEASE OBJ STACK ENTRY
JYH12    BAL   RETURN,ROUTINE1(0,SBR)        LOAD V-W-PLACE FOR VALUE
JYH11    MVC   JYH1+2(2),WPLACE(WAREG)  INTRODUCE DISPLACEMENT
         MVZ   JYH1+2(1),VPLACE(WAREG)       INSERT V-PLACE INTO CODE
         BAL   INFORM,GENTXT4(0,SBR)         BRANCH TO GENERATE ROUTINE
JYH1     TM    0(0),X'FF'                    ***GENERATE***
         BAL   RETURN,LATRES(0,SBR)          RESERVE LABEL
         MVC   3(2,OPDK),LN(WAREG)           INSERT LABEL INTO OPERAND
         MVC   JYJ3+2(2),LN(WAREG)           INSERT LABEL INTO CODE
         BAL   INFORM,GENTXT6(0,SBR)         BRANCH TO GENERATE ROUTINE
JYJ3     L     BRR,0(LAT,0)
         BCR   8,BRR                         ***GENERATE***
         B     JZB1                          BRANCH
JYF2     BAL   RETURN,ROUTINE3(0,SBR)        LOAD W-V-PLACE FOR ADDRESS
         B     JYH11                         BRANCH
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50005, CP79'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        COMPILER PROGRAM NR.79
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   END OF CONDITIONAL EXPRESSION                                     *
*        CONTEXT              EXPRESSION                              *
*        SOURCE OPERATOR      SEE EXPTESSION CONTEXT  MATRIX          *
*        STACK OPERATOR       'ELSE'                                  *
*        OPERANDS             TWO OPERANDS AND ONE LABEL              *
         SPACE 2
CP79     EQU   *
         USING *,BASE
         LA    RETURN,KBB2                   LOAD RETURN ADDRESS
         BAL   R3,OPDTEST(SBR)               OPDT AND ERROR 162
         BAL   RETURN,ARRTEST1(0,SBR)
         TM    1(OPDK),X'03'                 IS LO BOOLEAN
         BO    KBD1                          BRANCH IF LO IS BOOLEAN
         BM    KCB11
         TM    1(OPDK),X'08'                 IS LO A LABEL
         BZ    KFB2                          BRANCH IF NOT LABEL
         TM    6(OPDK),X'08'                 IS BLD A LABEL
         BZ    KBD2                          BRANCH IF NOT LABEL
         TM    HCOMPMOD(WAREG),X'80'         CMT
         BO    KBD31                         BRANCH IF FALSE
         BAL   RETURN,OPDREC(0,SBR)
         TM    1(OPDK),X'40'
         BO    KBD2
         TM    3(OPDK),X'80'
         BO    KBH1                          BRANCH IF YES
KFE1     MVC   KFE11+2(2),3(OPDK)            PREPARE INSTRUCTION
         OI    RII(WAREG),X'01'
         SR    R15,R15                       PREPARE INSTRUCTION
         IC    R15,2(OPDK)
         SLL   R15,3
         STH   R15,WORKPL(0,WAREG)
         MVC   KFE12+2(2),WORKPL(WAREG)
         LA    INFORM,KFE11
         BAL   LENGTH,GENTXTS(0,SBR)
         DC    H'8'
         B     KBH1
KFE11    L     ADR,0(LAT,0)                  ***GENERATE***
KFE12    L     GDSA,0(PBT,0)                 ***GENERATE***
KFB2     BAL   SRETURN,SERR1(0,SBR)          BRANCH TO ERROR ROUTINE
         DC    H'178'                        ERROR NR 178
         B     KBD3
KBB2     LA   OPDK,10(0,OPDK)                CLEAR TWO OPERANDS
KBD4     MVC   0(5,OPDK),API(SBR)            INTRODUCE API
KBJ4     BCT   OPTK,COMP(0,SBR)              CLOPT AND COMPARE
KBD1     TM    6(OPDK),X'03'                 IS BLO BOOLEAN
         BO    KBE1                          BRANCH IF BLO IS BOOLEAN
         TM    0(OPDK),APIMASK          IS LO AN API               5603
         BO    KBD3                          BRANCH IF API
KBD2     BAL   SRETURN,SERR1(0,SBR)          BRANCH TO ERROR ROUTINE
         DC    H'165'                        ERROR NR 165
KBD3     LA    OPDK,10(0,OPDK)               CLEAR TWO OPERANDS
         B     KBD4
KBE1     TM    HCOMPMOD(WAREG),X'80'         CMT
         BO    KBD31                         BRANCH IF FALSE
         BAL   RETURN,OPDREC(0,SBR)          OPERAND RECOGNIZER
         TM    0(OPDK),X'20'
         BO    KBF4
         TM    0(OPDK),X'80'                 IS LO IN STACK
         BO    KBF3                          BRANCH IF NOT
         CLC   3(2,OPDK),8(OPDK)             ARE LO AND BLO IN=PLACE
         BNE   KBG2                          BRANCH IF NOT
KBH1     MVC   WORKPL(2,WAREG),8(OPDK)       LOAD LAST P
         NI    WORKPL(WAREG),X'0F'
         LH    P,WORKPL(WAREG)
KBH11    MVC   WORKPL(2,WAREG),13(OPDK)      TRANSFER PRPOINT TO LAT
         LH    R15,WORKPL(0,WAREG)           ENTRY INDICATED BY OPDK+13
         L     R14,LATAB(0,WAREG)
         ST    PRPOINT,0(R14,R15)
KBD31    MVC   10(5,OPDK),5(OPDK)            C(OPDK+10)=C(OPDK+5)
         LA    OPDK,10(0,OPDK)              CLEAR TWO OPERANDS
         MVI   GPBN+1(WAREG),X'FF'
         OI    0(OPDK),X'08'
         BCT   OPTK,COMP(0,SBR)              CLOPT AND COMPARE
KBG2     MVC   KBG21+4(2),3(OPDK)            PREPARE INSTRUCTION
         OI    KBG21+4,X'A0'
KBG22    MVC   KBG21+2(2),8(OPDK)
         OI    KBG21+2,X'A0'
         BAL   INFORM,GENTXT6(0,SBR)
KBG21    MVC   0(1,CDSA),0(CDSA)             ***GENERATE***
         B     KBH1
KBF3     TM    2(OPDK),X'FF'                 IS LO A CONSTANT
         BZ    KBG3                          BRANCH IF LO IS A CONSTANT
         BAL   RETURN,ROUTINE1(0,SBR)        BRANCH TO ROUTINE NR 1
KBH3     MVC   KBG21+4(2),WPLACE(WAREG)      PREPARE INSTRUCTION
         MVZ   KBG21+4(1),VPLACE(WAREG)
         B     KBG22
KBF4     BAL   RETURN,ROUTINE3(0,SBR)        BRANCH TO ROUTINE NR 3
         B     KBH3
KBG3     MVC   KBG31+1(1),4(OPDK)            PREPARE INSTRUCTION
         NI    KBG31+1,X'01'
         MVC   KBG31+2(2),8(OPDK)
         OI    KBG31+2,X'A0'
         BAL   INFORM,GENTXT4(0,SBR)
KBG31    MVI   0(CDSA),X'00'                 ***GENERATE***
         B     KBH1
KCB11    TM    5(OPDK),X'40'
         BZ    KCB1
         MVZ   8(1,OPDK),10(OPDK)
         SR    R14,R14
         LA    R15,1
         XI    5(OPDK),X'C0'
         IC    R14,8(OPDK)
         SRL   R14,4
         TM   6(OPDK),X'02'
         BZ    KCB12
         STC   R14,CIR+1(WAREG)
         SRL   R14,1
         SLL   R15,0(R14)
         STC   R15,KCE112+1
KCE112   OI    RIR+1(WAREG),X'00'
         B     KCB1
KCB12    SLL   R15,0(R14)
         STC   R15,KCB13+1
KCB13    OI    RII+1(WAREG),X'00'
         STC   R14,CII+1(WAREG)
KCB1     TM    6(OPDK),X'03'                 IS BLO REAL OR INTEGER
         BC    9,KBD21                       BRANCH IF NOT
         TM    HCOMPMOD(WAREG),X'80'         CMT
         BO    KBD31                         BRANCH IF FALSE
KCE1     BAL   RETURN,OPDREC(0,SBR)          OPERAND RECOGNIZER
         TM    1(OPDK),X'02'                 IS LO REAL
         BZ    KEB1                          BRANCH IF LO INTEGER
         TM    6(OPDK),X'02'                 IS BLO REAL
         BZ    KDB1                          BRANCH IF BLO IS INTEGER
         LA    RETURN,KCF4
         BAL   R3,ROUTIN15(0,SBR)
KCE11    MVC   WORKPL(2,WAREG),ZEROHW(WAREG)
         MVZ   WORKPL(1,WAREG),8(OPDK)       CHECK IF LO AND BLO ARE
         MVZ   WORKPL+1(1,WAREG),3(OPDK)     LOADED IN THE SAME FPR
         CLC   WORKPL(1,WAREG),WORKPL+1(WAREG)
         BNE   KCF2                          BRANCH IF NOT EQUAL
         SR    R14,R14                       INTRODUCE OPDK ADD IN RUTR
         IC    R14,WORKPL(WAREG)
         SRL   R14,3
KCG11    LA    OPDK,10(0,OPDK)
         ST    OPDK,RUTR(R14,WAREG)
         SH    OPDK,CON10(0,SBR)
         B     KBH1
KCF2     SR    R14,R14                  LOAD FPR NR OF  LO
         IC    R14,WORKPL+1(WAREG)
         SRL   R14,5                    PREPARE MASK TO SET RIR
         LA    R15,1
         SLL   R15,0(R14)
         STC   R15,KCF21+1
         XI    KCF21+1,X'FF'
KCF21    NI    RIR+1(WAREG),X'00'
         SLL   R14,1                         PREPARE INSTRUCTION
         STC   R14,KCG2+1
         OC    KCG2+1(1),WORKPL(WAREG)
         BAL   INFORM,GENTXTP2(0,SBR)
KCG2     LDR   0,0                           ***GENERATE***
KCH21    SR    R14,R14                       SET TO ONE RIR
         IC    R14,8(OPDK)
         SRL   R14,5
         LA    R15,1
         SLL   R15,0(R14)
         STC   R15,KCH2+1
KCH2     OI    RIR+1(WAREG),X'00'
         SLL   R14,1                         SET CIR
         STC   R14,CIR+1(WAREG)
         SLL   R14,1
         B     KCG11
KCE4     BAL   RETURN,ROUTINE1(0,SBR)        BRANCH TO ROUTINE NR.1
KCF4     MVZ   KCH4+1(1),8(OPDK)             PREPARE INSTRUCTION
         MVN   KCH4+1(1),VPLACE(WAREG)
         MVC   KCH4+2(2),WPLACE(WAREG)
         BAL   INFORM,GENTXTP4(0,SBR)
KCH4     LD    0,0(0,0)                      ***GENERATE***
         B     KCH21
KDB1     LA    RETURN,KDC41
         BAL   R3,ROUTIN15(0,SBR)
         TM    3(OPDK),X'F0'                 IS LO ON FPR0
         BC    5,KDE31                       BRANCH IF LO IS NOT IN FP0
KDG11    BAL   INFORM,GENTXT6(0,SBR)
         BALR  BRR,0                        ***GENERATE
         BC    15,10(0,BRR)
         MVC   WORKPL(2,WAREG),13(OPDK)
         LH    R15,WORKPL(0,WAREG)
         L     R14,LATAB(0,WAREG)
         ST    PRPOINT,0(R14,R15)
         LA    OPDK,5(0,OPDK)
         NI    RIR+1(WAREG),X'FE'
         BAL   RETURN,TRINRE(0,SBR)
         LA    OPDK,5(0,OPDK)
         ST    OPDK,RUTR(0,WAREG)
         SH    OPDK,CON10(0,SBR)
         B     KBD31
KDE31    SR    R14,R14                       PREPARE INSTRUCTION
         IC    R14,3(OPDK)
         SRL   R14,4
         STC   R14,KDF3+1
         SRL   R14,1
         LA    R15,1
         SLL   R15,0(R14)
         STC   R15,WORKPL(WAREG)
         XI    WORKPL(WAREG),X'FF'
         NC    RIR+1(1,WAREG),WORKPL(WAREG)
         BAL   INFORM,GENTXTP2(0,SBR)
KDF3     LDR   0,0                           ***GENERATE***
         B     KDG11
KDC41    MVC   KDC4+2(2),WPLACE(WAREG)       PREPARE INSTRUCTION
         MVN   KDC4+1(1),VPLACE(WAREG)
         BAL   INFORM,GENTXTP4(0,SBR)
KDC4     LD    0,0(0,0)                      ***GENERATE****
         AH    P,ONEENTRY(0,WAREG)
         B     KDG11
KEB1     TM    6(OPDK),X'01'                 IS BLO INTEGER
         BZ    KEC2                          BRANCH IF NOT INTEGER
         LA    RETURN,KEF31
         BAL   R3,ROUTIN15(0,SBR)
         MVC   WORKPL(2,WAREG),ZEROHW(WAREG) CHECK IF LO AND BLO ARE IN
         MVZ   WORKPL(1,WAREG),8(OPDK)       THE SAME GPR
         MVZ   WORKPL+1(1,WAREG),3(OPDK)
         CLC   WORKPL(1,WAREG),WORKPL+1(WAREG)
         BNE   KEF2                          BRANCH IF NOT EQUAL
         SR    R14,R14                       INTRODUCE OPDK ADD IN RUTI
         IC    R14,WORKPL(WAREG)
         SRL   R14,2
KEG1     LA    OPDK,10(0,OPDK)
         ST    OPDK,RUTI(R14,WAREG)
         SH    OPDK,CON10(0,SBR)
         B     KBH1
KEF2     SR    R14,R14                       LOAD GPR NR OF LO
         IC    R14,WORKPL+1(WAREG)
         SRL   R14,4                         PREPARE MASK TO SET RII
         LA    R15,1                        TO ZERO
         SLL   R15,0(R14)
         STC   R15,KEF21+1
         XI    KEF21+1,X'FF'
KEF21    NI    RII+1(WAREG),X'00'
         STC   R14,KEG21+1
         OC    KEG21+1(1),WORKPL(WAREG)
         BAL   INFORM,GENTXT2(0,SBR)
KEG21    LR    0,0                           ***GENERATE***
KEH21    SR    R14,R14                       SET TO ONE RII
         IC    R14,8(OPDK)
         SRL   R14,4
         LA    R15,1
         SLL   R15,0(R14)
         STC   R15,KEH2+1
KEH2     OI    RII+1(WAREG),X'00'
         STC   R14,CII+1(WAREG)              SET CII
         SLL   R14,2
         B     KEG1
KEF31    MVZ   KEG3+1(1),8(OPDK)             PREPARE INSTRUCTION
         MVN   KEG3+1(1),VPLACE(WAREG)
         MVC   KEG3+2(2),WPLACE(WAREG)
         BAL   INFORM,GENTXT4(0,SBR)
KEG3     L     0,0(0,0)
         B     KEH21
KEC2     NI    RIR+1(WAREG),X'FE'
         BAL   RETURN,TRINRE(0,SBR)
         B     KCE11
KBD21    TM    5(OPDK),APIMASK          IS BLO AN API              5603
         BO    KBD2+6                        BRANCH IF API
         B     KBD2
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50005, CP80'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        COMPILER PROGRAM NR.80
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   BEGIN OF CONDITIONAL EXPRESSION                                   *
*        CONTEXT              EXPRESSION                              *
*        SOURCE OPERATOR      'IF'                                    *
*        STACK OPERATOR       (                                       *
*        OPERANDS             NONE                                    *
         SPACE 2
CP80     EQU   *
         USING *,BASE
KIN1     TM    HCOMPMOD(WAREG),X'01'         OPDT
         BZ    KIB2                          BRANCH IF FALSE
         BAL   SRETURN,SERR4(0,SBR)          ERROR PATTERN ENTRY
         DC    H'164'                        ERROR NR.164
         LA    OPDK,5(0,OPDK)           CLOPD
KIF2     BAL   RETURN,MOVEOPTK(0,SBR)        RESERVE OPERATOR STACK FNT
         MVC   0(1,OPTK),0(SOURCE)           INSERT SOURCE INTO STACK
         BR    SBR                           BRANCH TO SNOT
KIB2     TM    HCOMPMOD(WAREG),X'80'         CMT
         BO    KIF2                          BRANCH IF FALSE
         BAL   RETURN,CLEARRG(0,SBR)         CLEAR REGISTERS
         B     KIF2                          BRANCH
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50005, CP86'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        COMPILER PROGRAM NR.86
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   ERRONEOUS CASE - WRONG CONDITIONAL EXPRESSION  OR STATEMENT       *
*        CONTEXT              EXPRESSION                              *
*        SOURCE OPERATOR      'ELSE'                                  *
*        STACK OPERATOR       'IF','IFS'                              *
*        OPERANDS             NONE OR ONE                             *
         SPACE 2
CP86     EQU   *
         USING *,BASE
KUB1     TM    HCOMPMOD(WAREG),X'01'         OPDT
         BZ    KUB2                          BRANCH IF FALSE
         BAL   RETURN,SERR4(0,SBR)           ERROR PATTERN ENTRY
         DC    H'161'                        ERROR NR 161
KUE1     CLI   0(OPTK),X'1D'                 IS IN OPERATOR STACK 'IF'
         BNE   KUE2                          BRANCH IF NOT IF
         MVC   0(1,OPTK),0(SOURCE)           INSERT SOURCE INTO STACK
         BAL   RETURN,STACKAPI(0,SBR)
         BR    SBR                           BRANCH TO SNOT
KUB2     BAL   RETURN,SERR4(0,SBR)           ERROR PATTERN ENTRY
         DC    H'160'                   WITH ERR.NR.160
         SH    OPDK,CON5(0,SBR)              RESERVE OPERAND STACK ENT.
         B     KUE1                          BRANCH
KUE2     SH    CCT,CON614(0,SBR)        CSW(P.C.)
         MVI   0(OPTK),X'27'                 INSERT THENS INTO STACK
         BR    SBR                           BRANCH TO SNOT
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50005, CP87'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        COMPILER PROGRAM NR.87
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   FIRST ALTERNATIVE IN CONDITIONAL  EXPRESSION                      *
*        CONTEXT              EXPRESSION                              *
*        SOURCE OPERATOR      'ELSE'                                  *
*        STACK OPERATOR       'THEN'                                  *
*        OPERANDS             ONE OPERAND AND ONE LABEL               *
         SPACE 2
CP87     EQU   *
         USING *,BASE
         LA    RETURN,KWJ3                   LOAD RETURN ADDRESS
         BAL   R3,OPDTEST(SBR)               OPDT AND ERROR 162
         BAL   RETURN,ARRTEST1(0,SBR)
         TM    HCOMPMOD(WAREG),X'80'         CMT
         BO    KWJ3                          BRANCH IF FALSE
         BAL   RETURN,OPDREC(0,SBR)          BRANCH TO OPERAND RECDG.
         TM    1(OPDK),X'03'                 IS LO BOOLEAN
         BO    KWE1                          BRANCH IF LO IS BOOLEAN
         BM    KXB1
         TM    1(OPDK),X'08'                 IS LO LABEL
         BZ    KYB2
         TM   1(OPDK),X'04'
         BO    KYB2
         TM    3(OPDK),X'80'
         BO    KWG13
         TM    RII(WAREG),X'01'              IS ADR OCCUPIED
         BZ    KYF1                          BRANCH IF NOT
         BAL   RETURN,ROUTIN10(0,SBR)        STADR
KYF1     MVC   KYF11+2(2),3(OPDK)            PREPARE INSTRUCTION
         SR    R15,R15                       PREPARE INSTRUCTION
         IC    R15,2(0,OPDK)
         SLL   R15,3
         STH   R15,WORKPL(0,WAREG)
         MVC   KYF12+2(2),WORKPL(WAREG)
         LA    INFORM,KYF11
         BAL   LENGTH,GENTXTS(0,SBR)
         DC    H'8'
         AH    P,ONEENTRY(0,WAREG)
         STH   P,WORKPL(0,WAREG)
         MVC   3(2,OPDK),WORKPL(WAREG)
         OI    3(OPDK),X'80'
         NI   0(OPDK),X'0F'
         OI    0(OPDK),X'A0'
KWG13    MVI   RII(WAREG),X'00'
         B     KWG12
KYF11    L     ADR,0(LAT,0)                  ***GENERATE***
KYF12    L     GDSA,0(PBT,0)                 ***GENERATE***
KYB2     BAL   SRETURN,SERR1(0,SBR)          BRANCH TO ERROR ROUTINE
         DC    H'178'                        ERROR NR 178
         MVC   0(5,OPDK),API(SBR)
         B     KWJ3
KWJ3     MVC   0(1,OPTK),0(SOURCE)           C(OPTK)=C(SOURCE)
         MVI   GPBN+1(WAREG),X'FF'
         BR    SBR                           SNOT
KWE1     TM    0(OPDK),X'20'                 IS LO A VALUE
         BO    KWE3                          BRANCH IF LO IS NOT A VAL
         TM    0(OPDK),X'80'                 IS LO IN OBJECT STACK
         BO    KWF2                          BRANCH IF NOT
KWG12    SH    P,ONEENTRY(0,WAREG)
KWG1     BAL   RETURN,LATRES(0,SBR)
         MVC   KWH1+2(2),LN(WAREG)           PREPARE INSTRUCTION
         BAL   INFORM,GENTXT6(0,SBR)
KWH1     L     BRR,0(LAT,0)                  ***GENERATE***
         BCR   15,BRR
         MVC   WORKPL(2,WAREG),8(OPDK)       TRANSF PRPOINT TO LAT ENTR
         LH    R15,WORKPL(0,WAREG)           INDICATED BY OPDK+8
         L     R14,LATAB(0,WAREG)
         ST    PRPOINT,0(R15,R14)
         MVC   8(2,OPDK),LN(WAREG)           TRANSF LNR TO OPDK+5 ENTRY
         B     KWJ3
KWF2     TM    2(OPDK),X'FF'                 IS LO A CONSTANT
         BZ    KWF21                         BRANCH IF LO IS A CONSTANT
         BAL   RETURN,ROUTINE1(0,SBR)        BRANCH TO ROUTINE  NR.1
KWG2     AH    P,ONEENTRY(0,WAREG)           INCREASE P
         STH   P,WORKPL(0,WAREG)
         BAL   RETURN,MAXCH(0,SBR)           CHECK MAXIMUM
         MVC   KWH2+2(2),WORKPL(WAREG)       PREPARE INSTRUCTION
         OI    KWH2+2,X'A0'
         MVC   KWH2+4(2),WPLACE(WAREG)
         MVZ   KWH2+4(1),VPLACE(WAREG)
         BAL   INFORM,GENTXT6(0,SBR)
KWH2     MVC   0(1,CDSA),0(0)                ***GENERATE***
KWF23    MVC   3(2,OPDK),WORKPL(WAREG)       ADJUST OPDK ENTRY
         NI    0(OPDK),X'5F'
         MVC   2(1,OPDK),SPBNST+1(WAREG)
         B     KWG12
KWF21    AH    P,ONEENTRY(0,WAREG)           INCREASE P
         STH   P,WORKPL(0,WAREG)
         BAL   RETURN,MAXCH(0,SBR)           CHECK MAX
         NI    4(OPDK),X'01'
         MVC   KWF22+2(2),WORKPL(WAREG)      PREPARE INSTRUCTION
         OI    KWF22+2,X'A0'
         MVC   KWF22+1(1),4(OPDK)
         BAL   INFORM,GENTXT4(0,SBR)
KWF22    MVI   0(CDSA),X'00'                 ***GENERATE***
         OI    1(OPDK),X'30'                 ADJUST OPDK ENTRY
         B     KWF23
KWE3     BAL   RETURN,ROUTINE3(0,SBR)        BRANCH TO ROUTINE NR3
         XI    0(OPDK),X'60'
         B     KWG2
KXB1     TM    1(OPDK),X'02'                 IS LO REAL
         BZ    KXB3                          BRANCH IF LO IS INTEGER
         TM    0(OPDK),X'20'                 IS LO A VALUE
         BO    KXC2                          BRANCH IF NOT VALUE
         TM    0(OPDK),X'40'                 IS LO IN A FPR
         BZ     KXH22
         TM    0(OPDK),X'80'                 WAS LO IN A FPR BEFORE
         BO    KXC2                          BRANCH IF NOT
         SH    P,ONEENTRY(0,WAREG)           REDUCE O
KXC2     BAL   RETURN,ROUTIN11(0,SBR)        BRANCH TO ROUTINE 11
         SH    OPDK,CON5(0,SBR)              REDUCE OPDK
         TM    5(OPDK),X'20'                IS LO A VALUE
         BZ    KXG2                          BRANCH IF LO IS A VALUE
         BAL   RETURN,ROUTINE2(0,SBR)        LOAD LO INTO A FPR
KXH2     LA    OPDK,5(0,OPDK)                INCREACE OPDK
KXH22    BAL   RETURN,ROUTIN12(0,SBR)
KWG11    MVC   5(1,OPDK),3(OPDK)
         B     KWG1
KXG2     BAL   RETURN,ROUTINE4(0,SBR)        LOAD FOR
         B     KXH2
KXB3     TM    0(OPDK),X'20'                 IS LO A VALUE
         BO    KXC4                          BRANCH IF NOT VALUE
         TM    0(OPDK),X'40'                 IS LO IN A GPR
         BZ    KXH21
         TM    0(OPDK),X'80'                 WAS LO IN A GPR BEFORE
         BO    KXC4                          BRANCH IF NOT
         SH    P,ONEENTRY(0,WAREG)           REDUCE P
KXC4     BAL   RETURN,ROUTINE7(0,SBR)        BRANCH TO ROUTINE 11
         SH    OPDK,CON5(0,SBR)              REDUCE OPDK
         TM    5(OPDK),X'20'                IS LO A VALUE
         BZ    KXG4                          IF YES BRANCH
         BAL   RETURN,ROUTINE6(0,SBR)        LOAD LO INTO GPR
KXH23    LA    OPDK,5(0,OPDK)
KXH21    BAL   RETURN,ROUTINE8(0,SBR)
         B     KWG11
KXG4     BAL   RETURN,ROUTINE5(0,SBR)        LOAD LO IN GPR
         B     KXH23
         TITLE 'IEX50, COMPILATION PHASE, CSECT IEX50006, CP69'
IEX50006 CSECT
         SPACE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        COMPILER PROGRAM NR. 69                                      *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   ARITHMETIC AND RELATIONAL OPERATIONS                              *
*        CONTEXT              EXPRESSION                              *
*        SOURCE OPERATOR      SEE EXPRESSION CONTEXT  MATRIX          *
*        STACK OPERATOR       SEE EXPRESSION CONTEXT  MATRIX          *
*        OPERANDS             TWO OPERANDS                            *
         SPACE 2
CP69     EQU   *
         USING *,BASE
GNB1     TM    HCOMPMOD(WAREG),X'01'         OPDT
         BZ    GNB2                          BRANCH IF FALSE
         BAL   RETURN,ARRTEST2(0,SBR)
         TM    1(OPDK),X'03'                 IS LO ARITHMETIC
         BC    9,GND2                        BRANCH IF NOT
         TM    6(OPDK),X'03'                 IS BLO ARITHMETIC
         BC    9,GND22                       BRANCH IF NOT
         TM    HCOMPMOD(WAREG),X'C0'         CMT AND SUBSC
         BC    5,GOE11                       BRANCH IF FALSE
         BAL   RETURN,OPDREC(0,SBR)          OPERAND RECOGNIZER  LO
         LA    OPDK,5(0,OPDK)                INCREASE OPDK
         BAL   RETURN,OPDREC(0,SBR)          OPERAND RECOGNIZER  BLO
         SH    OPDK,CON5(0,SBR)              DECREASE OPDK
         TM    1(OPDK),X'02'                 IS LO REAL
         BZ    GOB3                          BRANCH IF INTEGER
         TM    6(OPDK),X'02'                 IS BLO REAL
         BZ    HQB1                         BRANCH IF BLO INTEGER
HEB1     CLI   0(OPTK),X'05'                 IS OPT POWER
         BE    HOB1
DHEB2    EQU   *
         TM    5(OPDK),X'20'                 IS BLO A VALUE
         BO    HFB1                          BRANCH IF BLO NOT VALUE
         TM    5(OPDK),X'40'                 IS BLO IN A FPR
         BO    HEC3                          BRANCH IF NOT IN A FPR
HEE31    MVZ   UPLACE(1,WAREG),8(OPDK)       U=R(BLO)
         LA    OPDK,5(0,OPDK)
         BAL   RETURN,CLFPR
         SH    OPDK,CON5(0,SBR)
         CLI   0(OPTK),X'10'
         BL    HEF2
         SH    P,ONEENTRY(0,WAREG)
HEF2     LA    RETURN,HLD1
         BAL   R3,ROUTIN15(0,SBR)
         MVN   UPLACE(1,WAREG),VPLACE(WAREG)
         BAL   RETURN,CLFPR
         BAL   RETURN,ROUTIN12(0,SBR)        ROUTINE NR 12
         B     HKD1
HEC3     TM    5(OPDK),X'80'                 WAS BLO IN A REGISTER
         BO    HFB1
         SH    P,ONEENTRY(0,WAREG)           REDUCE P
HFB1     TM    0(OPDK),X'20'                 IS LO A VALUE
         BO    HGD1                          BRANCH IF ADDRESS
         TM    0(OPDK),X'40'                 IS LO IN A FPR
         BO    HGB1                          BRANCH IF NOT
         CLI   0(OPTK),X'03'                 IS OPT /
         BNE   HFD2                          BRANCH IF NOT /
         TM    RIR+1(WAREG),X'0F'
         BO    HFB11
         BAL   RETURN,ROUTIN11(0,SBR)
         SH    P,ONEENTRY(0,WAREG)
         BAL   RETURN,CLFPR
         SLL   R3,1
         SLL   R14,4
         OR    R3,R14
         SRL   R14,4
         STC   R3,HFB12+1
         STC   R3,UPLACE(WAREG)
         TM    5(OPDK),X'20'
         BO    HFB13
         BAL   RETURN,ROUTINE4(0,SBR)
HFB14    BAL   INFORM,GENTXTP2(0,SBR)
HFB12    DDR   0,0
         B     GOE2
CLFPR    SR    R3,R3
         IC    R3,3(OPDK)
         SRL   R3,5
         LA    R15,1
         SLL   R15,0(R3)
         STC   R15,HEE3+1
         XI    HEE3+1,X'FF'
HEE3     NI    RIR+1(WAREG),X'00'
         BR    RETURN
HFB13    BAL   RETURN,ROUTINE2(0,SBR)
         B     HFB14
HFB11    SR    R14,R14                       STORE LO
         IC    R14,3(OPDK)
         STC   R14,UPLACE(0,WAREG)           U=R(BLO)
         SRL   R14,4
         BAL   RETURN,ROUTIN13(0,SBR)
         TM    5(OPDK),X'20'                 IS BLO A VALUE
         BO    HFF2                          BRANCH IF BLO IS AN ADDRES
         BAL   RETURN,ROUTINE4(0,SBR)
HFG2     BAL   RETURN,ROUTINE1(0,SBR)
         B     HLD1
HFF2     BAL   RETURN,ROUTINE2(0,SBR)        ROUTINE NR 2
         B     HFG2
HFD2     MVZ   UPLACE(1,WAREG),3(OPDK)       V=R(LO)
         CLI   0(OPTK),X'16'                 IS OPT .=
         BNE   HFD3                          BRANCH IF NOT
         BAL   RETURN,ROUTIN12(0,SBR)
         LA    OPDK,5(0,OPDK)                INCREASE OPDK
         BAL   RETURN,ROUTIN15(0,SBR)
HFC51    SH    OPDK,CON5(0,SBR)              DECREASE OPDK
         B     HLD1
HFD3     MVC   KONSUM(5,WAREG),0(OPDK)
         MVC   0(5,OPDK),5(OPDK)
         MVC   5(5,OPDK),KONSUM(WAREG)
         TM    0(OPTK),X'10'                 IS OPT ARITHMETIC
         BO    HFE4                          BRANCH IF RELATIONAL
HFH3     MVI   SWREL(SBR),X'FF'              SWREL=FF
HGG11    TM    0(OPDK),X'20'                 IS LO A VALUE
         LA    RETURN,HLD1
         BO    HFJ3                          BRANCH IF ADDRESS
         B     ROUTINE1(0,SBR)
HFJ3     B     ROUTINE3(0,SBR)
HFE4     BAL   RETURN,ROUTIN12(0,SBR)        ROUTINE NR 12
         B     HFH3
HGB1     TM    0(OPDK),X'80'                 WAS LO IN A REGISTER
         BO    HGD1                          BRANCH IF NOT
         SH    P,ONEENTRY(0,WAREG)
HGD1     CLI   0(OPTK),X'16'                 IS OPT .=
         BE    HGD2                          BRANCH IF YES
         BAL   RETURN,ROUTIN11(0,SBR)        ROUTINE NR.11
         TM    5(OPDK),X'20'                 IS BLO A VALUE
         BZ    HGG1                          BRANCH IF BLO IS A VALUE
         BAL   RETURN,ROUTINE2(0,SBR)        ROUTINE NR.2
HGH1     SLL   R14,4                         1=R(BLO)
         STC   R14,UPLACE(0,WAREG)
         CLI   0(OPTK),X'10'                 IS OPT ARITHMETIC
         BL    HGG11                         BRANCH IF OPT ARITHMETIC
         BAL   RETURN,ROUTIN12(0,SBR)
         B     HGG11
HGG1     BAL   RETURN,ROUTINE4(0,SBR)        ROUTINE NR.4
         B     HGH1
HGD2     TM    5(OPDK),X'20'                 IS BLO A VALUE
         BO    HJB1                          BRANCH IF ADDRESS
         TM    0(OPDK),X'20'                 IS LO A VALUE
         BO    HGB2                          BRANCH IF ADDRESS
         BAL   RETURN,ROUTINE1(0,SBR)        ROUTINE NR.1
         MVC   HJH11+2(2),8(OPDK)            PREPARE INSTRUCTION
         CLC   SPBNST+1(1,WAREG),7(OPDK)     IS DSA OF BLO CDSA
         BNE   HGB4                          BRANCH IF NOT
         OI    HJH11+2,X'A0'                 PREPARE INSTRUCTION
         B     HJH1
HGB4     CLI   GPBN+1(WAREG),X'FF'           IS GDSA DESTROYED
         BE    HGB41                         BRANCH IF YES
         CLC   GPBN(1,WAREG),7(OPDK)         IS DSA OF BLO IN GPBN
         BNE   HGB5                          BRANCH IF NOT
HGC4     OI    HJH11+2,X'90'                 PREPARE INSTRUCTION
         B     HJH1
HGB41    MVI   GPBN+1(WAREG),X'00'           SFT TO ZERO
HGB5     SR    R1,R1                         PREPARE INSTRUCTION
         IC    R1,7(OPDK)
         SLL   R1,3
         STH   R1,WORKPL(0,WAREG)
         CLI   VPLACE(WAREG),X'99'           IS DSA OF LO IN GDSA
         BE    HGE5                          BRANCH IF YES
         MVC   HGA5+2(2),WORKPL(WAREG)
         BAL   INFORM,GENTXT4(0,SBR)
HGA5     L     GDSA,0(PBT,0)
         MVC   GPBN(1,WAREG),7(OPDK)         STORE NEW GDSA        0218
         B     HGC4
HGE5     MVC   HGF5+2(2),WORKPL(WAREG)
         BAL   INFORM,GENTXT4(0,SBR)
HGF5     L     STH,0(PBT,0)
         OI    HJH11+2,X'E0'                 PREPAPRE INSTRUCTION
         B     HJH1
HGB2     BAL   RETURN,ROUTINE3(0,SBR)
         MVC   HJH11+4(2),WPLACE(WAREG)
         MVZ   HJH11+4(1),VPLACE(WAREG)
         LA    OPDK,5(0,OPDK)                INCREASE OPDK
         BAL   RETURN,ROUTINE1(0,SBR)        ROUTINE NR 1
         SH    OPDK,CON5(0,SBR)              DECREASE OPDK
         MVC   HJH11+2(2),WPLACE(WAREG)
         MVZ   HJH11+2(1),VPLACE(WAREG)
         B     HJH111
HJB1     LA    OPDK,5(0,OPDK)                INCREASE OPDK
         BAL   RETURN,ROUTINE3(0,SBR)        ROUTINE NR 3
         MVC   HJH11+2(2),WPLACE(WAREG)
         MVZ   HJH11+2(1),VPLACE(WAREG)
         SH    OPDK,CON5(0,SBR)              DECREASE OPDK
         TM    0(OPDK),X'20'                 IS LO AVALUE
         BO    HJC1                          BRANXH IF ADDRESS
         BAL   RETURN,ROUTINE1(0,SBR)        ROUTINE NR 1
HJH1     MVC   HJH11+4(2),WPLACE(WAREG)
         MVZ   HJH11+4(1),VPLACE(WAREG)
HJH111   MVI   HJH11+1,X'00'
         TM    1(OPDK),X'03'
         BO    HJH13
         MVI   HJH11+1,X'03'
         TM    1(OPDK),X'01'
         BO    HJH13
         LH    R14,ONEENTRY(WAREG)
         BCTR  R14,0
         STC   R14,HJH11+1
HJH13    BAL   INFORM,GENTXT6(0,SBR)
HJH11    MVC   0(8,0),0(0)                   *** GENERATE***
HLE21    L     R1,ADBIG2                    BRANCH TO CP20
         MVI   SWREL(SBR),X'00'
         L     BASE,DSCPTAB+4*20(0,SBR)
         BR    R1
ADBIG2   DC    A(DBIG2)
HJC1     MVC   HJC11+2(2),3(OPDK)
         BAL   INFORM,GENTXT4(0,SBR)
HJC11    L     STH,0(CDSA,0)
         MVI   VPLACE(WAREG),X'E0'
         B     HJH1
HKD1     MVC   HKH4+1(1),UPLACE(WAREG)
         MVI   HKH4,X'2A'
         CLI   0(OPTK),X'01'                 IS OPT MINUS
         BL    HKH41                         BRANCH IF OPT PLUS
         BE    HKF2                          BRANCH IF OPT MINUS
         MVI   HKH4,X'2C'
         CLI   0(OPTK),X'03'                 IS OPT REAL DIVISION
         BL    HKH41                         BRANCH IF OPT MULTIPLIC
         BE    HKD2                          BRANCH IF OPT DIVISION
         TM    0(OPTK),X'10'                 IS OPT RELATIONAL
         BO    HKA2                          BRANCH IF OPT RELATION
HKG22    CLI   0(OPTK),X'04'
         BE    GOE112
HKG2     BAL   RETURN,SERR2(0,SBR)           ERROR
         DC    H'194'
GOE1     LA    OPDK,5(0,OPDK)
GOEZ     STH   P,WORKPL(WAREG)
         MVN   3(1,OPDK),WORKPL(WAREG)
         MVC   4(1,OPDK),WORKPL+1(WAREG)
         OI    0(OPDK),X'08'
GOF1     BCT   OPTK,COMP(0,SBR)              CLOP AND COMPARE
HKA2     MVI   HKH4,X'29'                    PREPARE INSTRUCTIONS
HKH41    BAL   INFORM,GENTXTP2(0,SBR)
HKH4     ADR   0,0                           ***GENERATE***
         CLI   0(OPTK),X'10'
         BL    GOE2
IMB1     AH    P,ONEENTRY(0,WAREG)
         STH   P,WORKPL(WAREG)               CHECK MAX
         BAL   RETURN,MAXCH(0,SBR)
         MVC   8(2,OPDK),WORKPL(WAREG)
         MVC   IMD2+2(2),WORKPL(WAREG)       PREPARE INSTRUCTION
         OI    IMD2+2,X'A0'
         NI    IMH4+1,X'0F'
         TM    SWREL(SBR),X'FF'                                     C
         BO    INE2
         CLI   0(OPTK),X'11'                 IS OPT GREATER
         BL    IME4                          BRANCH ON =
         BE    IMG4                          BRANCH ON LOWER
         CLI   0(OPTK),X'13'
         BE    IMH41                         BRANCH ON NOT EQUAL
         BL    IMC4                          BRANCH ON GREATER
         CLI   0(OPTK),X'15'
         BE    IMD4                          BRANCH ON NOT LOW
         BH    HKG2                          BRANCH ON ERROR
IMF4     OI    IMH4+1,X'D0'                  PREPARE INSTRUCTION
IMH51    MVC   IMH5+2(2),IMD2+2
         LA    INFORM,IMD2
         BAL   LENGTH,GENTXTS(0,SBR)
         DC    H'14'
         OI    6(OPDK),X'03'                 ADJUST OPDK ENTRY OF BLO
         OI    5(OPDK),X'40'
         NI    5(OPDK),X'5F'
         B     GOE1                          RETURN
IMD2     MVI   0(CDSA),X'01'                 ***GENERATE***
         BALR  BRR,0                         ***GENERATE***
IMH4     BC    0,8(0,BRR)                    ***GENERATE***
IMH5     MVI   0(CDSA),X'00'                 ***GENERATE***
HKD2     MVI   HKH4,X'2D'
         B     HKH41
HKF2     MVI   HKH4,X'2B'
         B     HKH41
IMC4     OI    IMH4+1,X'20'                  PREPARE INSTRUCION
         B     IMH51
IMD4     OI    IMH4+1,X'B0'
         B     IMH51
IME4     OI    IMH4+1,X'80'
         B     IMH51
IMG4     OI    IMH4+1,X'40'
         B     IMH51
IMH41    OI    IMH4+1,X'70'
         B     IMH51
INE2     MVI   SWREL(SBR),X'00'              SET TO ZERO SWREL
         CLI   0(OPTK),X'11'                 WHICH OPT
         BL    IME4                          BRANCH ON =
         BE    IMC4                          BRANCH ON LOWER
         CLI   0(OPTK),X'13'
         BE    IMH41                         BRANCH ON NOT EQUAL
         BL    IMG4                          BRANCH ON GREATER
         CLI   0(OPTK),X'15'
         BE    IMF4                          BRANCH ON NOT LOW
         BH    HKG2                          BRANCH ON ERROR
         B     IMD4                          PREPARE INSTRUCTION
GNB2     BAL   RETURN,SERR4(0,SBR)          ERROR ROUTINE
         DC    H'162'                        ERROR NR 162
         OI    HCOMPMOD(WAREG),X'01'         OPDFL=TRUE
GNE3     MVC   0(5,OPDK),API(SBR)            INSTRUCTION API
         BCT   OPTK,COMP(0,SBR)              CLOPT AND COMPARE
GND2     TM    0(OPDK),APIMASK          IS LO AN API               5603
         BZ    GND21                         BRANCH IF LO IS NOT AN API
GND3     LA    OPDK,5(0,OPDK)                INCREASE OPDK
         B     GNE3
GND21    BAL   RETURN,SERR2(0,SBR)           ERROR ROUTINE
         DC    H'163'                        ERROR NR 163
         B     GND3
GND22    TM    5(OPDK),APIMASK          IS BLO AN API              5603
         BO    GND3                          BRANCH IF API
         BCTR  OPTK,0                        REDUCE OPTK
         BAL   RETURN,SERR2(0,SBR)           BRANCH TO ERROR ROUTINE
         DC    H'163'                        ERROR NR. 163
         LA    OPTK,1(0,OPTK)                INCREASE OPTK
         B     GND3
GOE11    CLI   0(OPTK),X'04'                 IS OPT IN STACK INT# DIV.
         BNE   GOE111                        BRANCH IF NOT
         TM    1(OPDK),X'02'                 IS LO REAL
         BO    GOE112
         TM    6(OPDK),X'02'                 IS BLO REAL
         BO    GOE112                        BRANCH IF REAL
GOE111   TM    0(OPTK),X'10'                 IS OPT RELATIONAL
         BZ    GOE1                          BRANCH IF NOT RELATIONAL
         OI    6(OPDK),X'03'                 ADJUST OPDK ENTRY OF BLO
         B     GOE1
GOE2     SR    R14,R14
         NI    UPLACE(WAREG),X'F0'
         IC    R14,UPLACE(0,WAREG)
         SRL   R14,3
         LA    OPDK,5(0,OPDK)
         ST    OPDK,RUTR(R14,WAREG)
         SRL   R14,1
         STH   R14,CIR(WAREG)
         SRL   R14,1
         LA    R15,1
         SLL   R15,0(R14)
         STC   R15,HEF21+1
HEF21    OI    RIR+1(WAREG),X'00'
         B     GOEZ
HLD1     MVC   HLJ4+1(1),UPLACE(WAREG)       PREPARE INSTRUCTION
         MVN   HLJ4+1(1),VPLACE(WAREG)
         MVC   HLJ4+2(2),WPLACE(WAREG)
         MVI   HLJ4,X'6A'
         CLI   0(OPTK),X'01'                 WHICH OPT
         BL    HLJ41
         BE    HLF2                          BRANCH ON MINUS
         MVI   HLJ4,X'6C'
         CLI   0(OPTK),X'03'
         BL    HLJ41
         BE    HLB2                          BRANCH ON DIVISION
         TM    0(OPTK),X'10'                 IS IT A RELATIONAL OPT
         BZ    HKG22
         MVI   HLJ4,X'60'
         CLI   0(OPTK),X'16'                 IS OPT .=
         BE    HLJ41
HLA2     MVI   HLJ4,X'69'                    PREPARE INSTRUCTION
HLJ41    BAL   INFORM,GENTXTP4(0,SBR)
HLJ4     AD    0,0(0,0)
         CLI   0(OPTK),X'01'                 IS OPT MINUS
         BE    HLF3                          BRANCH IF OPT IS MINUS
         CLI   0(OPTK),X'16'
         BE    HLE21
         TM    0(OPTK),X'10'                 IS OPT RELATIONAL
         BO    IMB1                          BRANCH IF NOT
         MVI   SWREL(SBR),X'00'
         B     GOE2
GOE112   BAL   RETURN,SERR3(SBR)
         DC    H'185'
         B     GOE1
HLF3     TM    SWREL(SBR),X'FF'
          BZ   GOE2
         MVI   SWREL(SBR),X'00'              SET TO ZERO SWREL
         MVC   HLH3+1(1),UPLACE(WAREG)       PREPARE INSTRUCTION
         SR    R14,R14
         IC    R14,UPLACE(WAREG)
         SRL   R14,4
         STC   R14,WORKPL(0,WAREG)
         MVN   HLH3+1(1),WORKPL(WAREG)
         BAL   INFORM,GENTXTP2(0,SBR)
HLH3     LCDR  0,0                           ***GENERATE***
         B     GOE2
HLB2     MVI   HLJ4,X'6D'
         B     HLJ41
HLF2     MVI   HLJ4,X'6B'
         B     HLJ41
         EJECT
GOB3     TM    6(OPDK),X'02'                 IS  BLO  REAL
         BO    HTB1                          BRANCH IF REAL
         CLI   0(OPTK),X'02'                 IS OPT *
         BL    DHZB1
         BE    IPB1                          BRANCH IF *
         TM    0(OPTK),X'10'                 IS OPT RELATIONAL
         BO    DHZB1
         CLI   0(OPTK),X'04'                 IS OPT INTEGER DIV
         BE    ISB1                          BRANCH IF OPT IS INT DIV
         BH    IUB1                         BRANCH IF OPT IS POWER
HWB1     BAL   RETURN,TRINRE(0,SBR)          TONVER-ROUTINE
         MVC   HYG2+2(2),3(OPDK)
         LA    OPDK,5(0,OPDK)                INCREASE OPDK
         BAL   RETURN,TRINRE(0,SBR)
         BAL   INFORM,GENTXTP4(0,SBR)        PREPARE INSTRUCTION
HYG2     DD    0,0(CDSA,0)                  ***GENERATE***
         SH    P,ONEENTRY(0,WAREG)           REDUCE P
         B     GOEZ
DHZB1    EQU   *
         TM    5(OPDK),X'20'                 IS BLO A VALUE
         BO    IAB1                          BRANCH IF ADDRESS
         TM    5(OPDK),X'40'                 IS BLO IN A REGISTER
         BO    HZC2                          BRANCH IF BLO IS INCORE
         MVZ   UPLACE(1,WAREG),8(OPDK)       V=R(BLO)
         TM    0(OPTK),X'10'                 IS OPT RELATIONAL
         BZ    HZF1                          BRANCH IF OPT IS ARITHMET
         BAL   RETURN,ROUTINE8(0,SBR)        RELILO
HZF1     LA    RETURN,IFC3
         BAL   R3,ROUTIN15(0,SBR)
         MVN   UPLACE(1,WAREG),VPLACE(WAREG) PREPARE INSTRUCTION
         BAL   RETURN,ROUTINE8(0,SBR)        RELILO
         B     IEC3
HZC2     TM    5(OPDK),X'80'                 WAS BLO IN A REGISTER
         BO    IAB1                          BRANCH IF NOT
         SH    P,ONEENTRY(0,WAREG)           REDUCE P
IAB1     TM    0(OPDK),X'20'                 IS LO A VALUE
         BO    IAD3                          BRANCH IF ADDRESS
         TM    0(OPDK),X'40'                 IS LO IN A REGISTER
         BO    IAC2                          BRANCH IF IN CORE
         MVZ   UPLACE(1,WAREG),3(OPDK)       U=R(LO)
         CLI   0(OPTK),X'16'                 IS OPT.=
         BNE   IAE1                          BRANCH IF NOT
         BAL   RETURN,ROUTINE8(0,SBR)
         LA    OPDK,5(0,OPDK)                INCREASE OPDK
         BAL   RETURN,ROUTIN15(0,SBR)
IAE21    SH    OPDK,CON5(0,SBR)              REDUCE OPDK
         B     IFC3
IAE1     MVC   KONSUM(5,WAREG),0(OPDK)       INTERCHANGE  PLACES
         MVC   0(5,OPDK),5(OPDK)
         MVC   5(5,OPDK),KONSUM(WAREG)
         TM    0(OPTK),X'10'                 IS OPT ARITHMETIC
         BO    IAG2                          BRANCH IF RELATIONAL
         SR    R14,R14                       INTRODUCE OPDK ADD IN RUM
         LA    OPDK,5(0,OPDK)
         IC    R14,3(OPDK)
         SRL   R14,4
         SLL   R14,2
         ST    OPDK,RUTI(R14,WAREG)
         SH    OPDK,CON5(0,SBR)              DECREASE OPDK
IAJ1     MVI   SWREL(SBR),X'FF'              SWREL= ONE
IAF3     TM    0(OPDK),X'20'                 IS LO A VALUE
         LA    RETURN,IFC3
         BO    IAK1                          BRANCH IF ADDRESS
         B     ROUTINE1(0,SBR)
IAK1     B     ROUTINE3(0,SBR)
IAG2     BAL   RETURN,ROUTINE8(0,SBR)        RELILO
         B     IAJ1
IAC2     TM    0(OPDK),X'80'                 WAS LO IN A REGISTER
         BO    IAD3                          BRANCH IF NOT
         SH    P,ONEENTRY(0,WAREG)           REDUCEP
IAD3     CLI   0(OPTK),X'16'                 IS OPT.=
         BE    HGD2                          BRANCH IF OPT IS.=
         BAL   RETURN,ROUTINE7(0,SBR)        ROUTINE NR 7
         TM    5(OPDK),X'20'                 IS BLO A VALUE
         BO    IAG3                          BRANCH IF ADDRESS
         BAL   RETURN,ROUTINE5(0,SBR)        ROUTINE  NR 5
IAH3     SLL   R14,4                         U=R(BLO)
         STC   R14,UPLACE(0,WAREG)
         TM    0(OPTK),X'10'
         BZ    IAF3
         BAL   RETURN,ROUTINE8(0,SBR)
         B     IAF3
IAG3     BAL   RETURN,ROUTINE6(0,SBR)
         B     IAH3
IEC3     MVC   IED3+1(1),UPLACE(WAREG)        PREPARE INSTRUCTION
         MVI   IED3,X'1A'
         CLI   0(OPTK),X'01'                 IS OPT MINUS
         BL    IED31                         BRANCH IF  OPT PLUS
         BH    IED4                          BRANCH IF OPT RELATIONAL
         MVI   IED3,X'1B'                    PREPARE INSTRUCTION
IED31    BAL   INFORM,GENTXT2(0,SBR)
IED3     SR    0,0                           ***GENERATE***
         CLI   0(OPTK),X'10'
         BL    GOE1
         B     IMB1
IED4     MVI   IED3,X'19'
         B     IED31
IFC3     MVC   IFD3+1(1),UPLACE(WAREG)       PREPARE INSTRUCTION
         MVN   IFD3+1(1),VPLACE(WAREG)
         MVC   IFD3+2(2),WPLACE(WAREG)
         MVI   IFD3,X'5A'
         CLI   0(OPTK),X'01'                 WHICH OPT
         BL    IFD31
         BH    IFD4                          BRANCH ON RELATIONAL
         MVI   IFD3,X'5B'                    PREPARE  INSTRUCTION
IFD31    BAL   INFORM,GENTXT4(0,SBR)
IFD3     S     0,0(0,0)                      ***GENERATE***
         CLI   0(OPTK),X'01'                 WHICH OPERATOR
         BL    IFG3+2
         BH    IFD41                         BRANCH  ON  RELATIONAL
         CLI   SWREL(SBR),X'FF'              IS SWREL = ONE
         BNE   IFG3+2
         IC    R14,UPLACE(WAREG)             PREPARE INSTRUCTION
         SRL   R14,4
         STC   R14,IFG3+1
         MVZ   IFG3+1(1),UPLACE(WAREG)
         BAL   INFORM,GENTXT2(0,SBR)
IFG3     LCR   0,0                           ***GENERATE***
         MVI   SWREL(SBR),X'00'
         B     GOE1
IFD4     MVI   IFD3,X'59'
         CLI   0(OPTK),X'16'
         BNE   IFD31
         MVI   IFD3,X'50'                    PREPARE INSTRUCTION
         B     IFD31
IFD41    CLI   0(OPTK),X'16'                 IS OPT.=
         BE    HLE21                        BRANCH IF OPT IS .=
         B     IMB1                          BRANCH TO RELATIONAL ROU.
         EJECT
* INTEGER-INTEGER MULTIPLICATION
IPB1     TM    5(OPDK),X'20'                 IS BLO A VALUE
         BO    IRD1                          BRANCH IF ADDRESS
         TM    5(OPDK),X'40'                 IS BLO A IN A REGISTER
         BO    IRB1                          BRANCH IF IN CORE
         SR    R1,R1                         IS BLO IN AN  ODD  REG.
         IC    R1,8(0,OPDK)
         STC   R1,UPLACE(WAREG)
         SRL   R1,4
         SH    P,ONEENTRY(0,WAREG)           DECREASE P.
         TM    UPLACE(WAREG),X'10'
         BZ    IPD2                          BRANCH IF BLO IN EVEN GPR
         LA    R2,1                         CLEAR RII OF BLO
         SLL   R2,0(R1)
         STC   R2,IPH11+1
         XI    IPH11+1,X'FF'
IPH11    NI    RII+1(WAREG),X'00'
         BCTR  R1,0                          V=R(BLO-1)
         NI    UPLACE(WAREG),X'E0'
         SRL   R2,1                          IS NEXT EVEN GPR FREE
         STC   R2,IPH1+1
IPH1     TM    RII+1(WAREG),X'00'
         BO    IPH31
IPJ1     LA    RETURN,IQE2
         BAL   R3,ROUTIN15(0,SBR)
IQC1     BAL   RETURN,ROUTINE8(0,SBR)        RELILO
IQD11    MVZ   IQD1+1(1),UPLACE(WAREG)       PREPARE INSTRUCTION
         SR    R2,R2
         IC    R2,3(OPDK)
         SRL   R2,4
IQC12    LA    R1,1
         SLL   R1,0(R2)
         STC   R1,IQC13+1
         XI    IQC13+1,X'FF'
IQC13    NI    RII+1(WAREG),X'00'
         MVN   IQD1+1(1),VPLACE(WAREG)
         BAL   INFORM,GENTXT2(0,SBR)
IQD1     MR    0,0                           *** GENERATE ***
IQE11    MVZ   IQE1+1(1),UPLACE(WAREG)       PREPARE INSTRUCTION
         BAL   INFORM,GENTXT4(0,SBR)
IQE1     SLDA  0,32                          ***GENERATE
IQB1     SR    R1,R1                         SET NEW CII
         IC    R1,UPLACE(0,WAREG)
         SRL   R1,4
         STC   R1,CII+1(0,WAREG)
         SLL   R1,4
         STC   R1,8(OPDK)
         SRL   R1,4
         LA    R2,1                         SET TO ONE RII OF BLO
         SLL   R2,0(R1)
         STC   R2,IQC14+1
IQC14    OI    RII+1(WAREG),X'00'
         AH    P,ONEENTRY(0,WAREG)
         SLL   R1,2
         LA    OPDK,5(0,OPDK)
         ST    OPDK,RUTI(R1,WAREG)
         B     GOEZ
IQE2     MVZ   IQE21+1(1),UPLACE(WAREG)      PREPARE INSTRUCTION
         MVN   IQE21+1(1),VPLACE(WAREG)
         MVC   IQE21+2(2),WPLACE(WAREG)
         BAL   INFORM,GENTXT4(0,SBR)
IQE21    M     0,0(0,0)                      ***GENERATE***
         B     IQE11
IPH31    TM    0(OPDK),X'20'                 IS LO AN ADDRESS
         BO    IPH4                          BRANCH IF ADDRESS
         TM    0(OPDK),X'40'
         BO    IPH4
IPH3     MVZ   WORKPL(1,WAREG),3(OPDK)       IS LO IN THAT GPR
         NI    WORKPL(WAREG),X'F0'
         NI    UPLACE(WAREG),X'F0'
         CLC   UPLACE(1,WAREG),WORKPL(WAREG)
         BNE   IPH4                          BRANCH IF NOT IN THAT GPR
         SH    P,ONEENTRY(0,SBR)             INCREASE P
         B     IQD11
IPH4     LA    R1,2(0,R1)                    IS NEXT EVEN FREE
         CH    R1,CON8(0,SBR)                IS NEXT EVEN GPR8
         BE    IPH41                         BRANCH IF NEXT EVEN IS
         SLL   R2,2
IPH43    STC   R2,IPH42+1
IPH42    TM    RII+1(WAREG),X'00'
         BZ    IPD3                          BRANCH IN FREE
         TM    0(OPDK),X'20'                 IS LO A VALUE
         BO    IPH44
         TM    0(OPDK),X'40'
         BO    IPH44
         SR    R3,R3                         IS LO IN THAT GPR
         IC    R3,3(0,OPDK)
         SRL   R3,4
         CR    R3,R1
         BE    IPD3                          BRANCH IF YES
IPH44    LR    R14,R1
         ST    R2,RETADR+56(0,WAREG)
         BAL   RETURN,ROUTINE9(0,SBR)        STOPINT
         L     R2,RETADR+56(0,WAREG)
         LR    R1,R14
IPD3     LA    R1,1(0,R1)                    IS NEXT ODD FREE
         SLL   R2,1
IPD33    STC   R2,IPD31+1
IPD31    TM    RII+1(WAREG),X'00'
         BZ    IPE3
         LR    R14,R1
         BAL   RETURN,ROUTINE9(0,SBR)        STOPINT
         LR    R1,R14
         XI    IPD31+1,X'FF'                 CLEAR RII OF LAST CLEARED
         NC    RII+1(1,WAREG),IPD31+1
IPE3     SLL   R1,4                          PREPARE INSTRUCTION
         STC   R1,UPLACE(0,WAREG)
         MVC   IPE31+1(1),UPLACE(WAREG)
         NI    UPLACE(WAREG),X'E0'
         IC    R2,8(0,OPDK)
         SRL   R2,4
         STC   R2,WORKPL(0,WAREG)
         MVN   IPE31+1(1),WORKPL(WAREG)
         BAL   INFORM,GENTXT2(0,SBR)
IPE31    LR    0,0                           ***GENERATE***
         B     IPJ1
IPH41    SR    R1,R1                         CLEAR R1
         LA    R2,1
         B     IPH43
IPD2     SR    R2,R2                         IS LO IN NEXT GPR
         LA    R1,1(0,R1)
         TM    0(OPDK),X'20'
         BO    IPD21
         TM    0(OPDK),X'40'
         BO    IPD21
         IC    R2,3(0,OPDK)
         SRL   R2,4
         CR    R1,R2
         BE    IQC11                         BRANCH IF LO IS IN NEXT
IPD21    LA    R2,1
         SLL   R2,0(R1)
         B     IPD33
IRB1     TM    5(OPDK),X'80'                 WAS BLO IN A GPR
         BO    IRD1
         SH    P,ONEENTRY(0,WAREG)
IRD1     TM    CII+1(WAREG),X'01'            IS LAST OCCUPIED REG ODD
         BO    IRD11                         BRANCH IF ODD
         TM    CII+1(WAREG),X'06'            IS LAST OCCUPIED REG NR.6
         BO    IRD12                         BRANCH IF YES
         SR    R1,R1
         IC    R1,CII+1(0,WAREG)             IS NEXT EVEN REG FREE
         LA    R1,2(0,R1)
IRD14    LA    R2,1
         STC   R1,CII+1(WAREG)
         SLL   R2,0(R1)
         LR    R14,R1
         STC   R2,IRD13+1
IRD13    TM    RII+1(WAREG),X'00'
         BZ    IRF1                          BRANCH IF FREE
         ST    R2,RETADR+52(0,WAREG)
         BAL   RETURN,ROUTINE9(0,SBR)        STOPINT
         L     R2,RETADR+52(0,WAREG)
         LR    R1,R14
IRF1     SLL   R2,1                          IS NEXT ODD FREE
         OC    RII+1(1,WAREG),IRD13+1
         SLL   R14,4
         STC   R14,UPLACE(WAREG)
         STC   R2,IRF11+1
         LA    R1,1(0,R1)
         LR    R14,R1
IRF11    TM    RII+1(WAREG),X'00'
         BZ    IRG1                          BRANCH IF FREE
         XI    IRF11+1,X'FF'
         NC    RII+1(1,WAREG),IRF11+1
         BAL   RETURN,ROUTINE9(0,SBR)        STOPINT
IRG1     TM    5(OPDK),X'20'                 IS BLO A VALUE
         BO    IRA1                          BRANCH IF ADDRESS
         BAL   RETURN,ROUTINE5(0,SBR)        LOAD BLO
         B     IPJ1
IRA1     BAL   RETURN,ROUTINE6(0,SBR)
         B     IPJ1
IRD12    SR    R1,R1                         CLEAR R1-
         B     IRD14
IRD11    TM    CII+1(WAREG),X'07'            IS LAST OCCUPIED NR.7
         BO    IRD12
         SR    R1,R1
         IC    R1,CII+1(0,WAREG)
         LA    R1,1(0,R1)                    INCREASE BY ONE
         B     IRD14
IQC11    BCTR  R2,0
         STC   R2,VPLACE(WAREG)
         SH    P,ONEENTRY(0,WAREG)
         B     IQD11
         EJECT
*  INTEGER-INTEGER DIVISION
ISB1     TM    5(OPDK),X'20'                 IS BLO A VALUE
         BO    ISB4                          BRANCH IF ADDRESS
         TM    5(OPDK),X'40'                 IS BLO IN A GPR
         BO    ISC2                          BRANCH IF IN CORE
         SR    R14,R14                       CLEAR RII OF BLO
         IC    R14,8(OPDK)
         SRL   R14,4
         LA    R2,1
         SLL   R2,0(R14)
         STC   R2,ISE3+1
         XI    ISE3+1,X'FF'
ISE3     NI    RII+1(WAREG),X'00'
         SH    P,ONEENTRY(0,WAREG)
         TM    8(OPDK),X'10'                 IS BLO IN AN EVEN GPR
         BO    ISG4                          BRANCH IF IN OOO
ISH11    SLL   R2,1                          IS NEXT ODD FREE
         LA    R14,1(0,R14)
         STC   R2,ISH1+1
ISH1     TM    RII+1(WAREG),X'00'
         BO    ISH2                          BRANCH IF OCCUPIED
ISJ11    MVZ   ISJ1+1(1),8(OPDK)             PREPARE INSTRUCTION
         BAL   INFORM,GENTXT4(0,SBR)
ISJ1     SRDA  0,32                          ***GENERATE***
         LA    RETURN,ITF21
         BAL   R3,ROUTIN15(0,SBR)
         BAL   RETURN,ROUTINE8(0,SBR)        RELILO
         MVZ   ITE1+1(1),8(OPDK)             PREPARE INSTRUCTION
         MVN   ITE1+1(1),VPLACE(WAREG)
         BAL   INFORM,GENTXT2(0,SBR)
ITE1     DR    0,0                           ***GENERATE***
ITZZ     MVZ   UPLACE(1,WAREG),8(OPDK)                             B
         OI    UPLACE(WAREG),X'10'
         B     IQB1
ITF21    MVZ   ITF2+1(1),8(OPDK)            PREPARE INSTRUCTION
         MVN   ITF2+1(1),VPLACE(WAREG)
         MVC   ITF2+2(2),WPLACE(WAREG)
         BAL   INFORM,GENTXT4(0,SBR)
ITF2     D     0,0(0,0)                      ***GENERATE***
         B     ITZZ
ISH2     TM    0(OPDK),X'20'                 IS LO A VALUE
         BO    ISH3                          BRANCH IF ADDRESS
         TM    0(OPDK),X'40'                 IS LO IN A GPR
         BO    ISH3
         SR    R3,R3                         IS LO IN THAT GPR
         IC    R3,3(OPDK)
         SRL   R3,4
         STC   R3,VPLACE(0,WAREG)
         CR    R3,R14
         BNE   ISH3                          BRANCH IF LO IS NOT THERE
         MVN   ISJ2+1(1),VPLACE(WAREG)       PREPARE INSTRUCTION
         BAL   INFORM,GENTXT2(0,SBR)
ISJ2     LR    STH,0                         ***GENERATE***
         NI    3(OPDK),X'0F'                 ADJUST OPDK ENTRY
         OI    3(OPDK),X'E0'
         B     ISJ11
ISH3     BAL   RETURN,ROUTINE9(0,SBR)        STOPINT
         B     ISJ11
ISG4     LA    R14,1(0,R14)                  IS NEXT EVEN FREE
         TM    CII+1(WAREG),X'07'      IS NEXT EVEN GPR8         A27003
         BO    ISG401                  YES                       A27003
         SLL   R2,1
         STC   R2,ISG41+1
ISG41    TM    RII+1(WAREG),X'00'
         BZ    ISH4                          BRANCH IF FREE
         ST    R2,RETADR(0,WAREG)
         BAL   RETURN,ROUTINE9(0,SBR)        STOPINT
         XI    ISG41+1,X'FF'
         NC    RII+1(1,WAREG),ISG41+1
ISH4     SLL   R14,4                         PREPARE INSTRUCTION
         STC   R14,ISH41+1
         IC    R1,8(OPDK)
         SRL   R1,4
         STC   R1,WORKPL(0,WAREG)
         MVN   ISH41+1(1),WORKPL(WAREG)
         BAL   INFORM,GENTXT2(0,SBR)
ISH41    LR    0,0                           ***GENERATE***
         L     R2,RETADR(0,WAREG)
         MVZ   8(1,OPDK),ISH41+1             ADJUST OPDK ENTRY
         SRL   R14,4
         B     ISH11
ISC2     TM    5(OPDK),X'80'                 WAS BLO IN A REGISTER
         BO    ISB4                          BRANCH IF NOT
         SH    P,ONEENTRY(0,WAREG)           REDUCE P
ISB4     TM    CII+1(WAREG),X'01'            IS LAST OCCUPIED EVEN
         BO    ISD5                          BRANCH IF ODD
         TM    CII+1(WAREG),X'06'            IS LAST OCCUPIEN REG NR.6
         BO    ISD51                         BRANCH IF REG NR.6
         SR    R1,R1
         IC    R1,CII+1(0,WAREG)
         LA    R1,2(0,R1)
ISD52    LA    R2,1
         SLL   R2,0(R1)
         STC   R2,ISE4+1
         LR    R14,R1
ISE4     TM    RII+1(WAREG),X'00'
         BZ    ISF4                          BRANCH IF FREE
         BAL   RETURN,ROUTINE9(0,SBR)        STOPINT
ISF4     TM    5(OPDK),X'20'                 IS BLO A VALUE
         BO    ISF41                         BRANCH IF ADDRESS
         BAL   RETURN,ROUTINE5(0,SBR)        LOAD BLO
ISF42    SR    R2,R2
         IC    R2,ISE4+1
         B     ISH11
ISF41    BAL   RETURN,ROUTINE6(0,SBR)        LOAD BLO
         B     ISF42
ISD51    SR    R1,R1                         CLEAR R1
         B     ISD52
ISD5     TM    CII+1(WAREG),X'07'            IS LAST OCCUPIED NR.7
         BO    ISD51                         BRANCH IF YES
         LH    R1,CII(0,WAREG)
         LA    R1,1(0,R1)
         B     ISD52
ISG401   SR    R14,R14                 CLEAR R14                 A27003
         LA    R2,1                                              A27003
         STC   R2,ISG41+1                                        A27003
         B     ISG41                                             A27003
HQB1     BAL   RETURN,I1B13
         B     HEB1
HTB1     CLI   0(OPTK),X'05'                 IS OPT POWER
         BE    I1B1
HTB11    BAL   RETURN,TRINRE(0,SBR)          CONVERTION ROUTINE
         B     DHEB2
*    INTEGER-INTEGER  POWER
IUB1     TM    0(OPDK),X'C0'
         BC    12,IUB2
         TM    1(OPDK),X'30'
         BC    5,IUB2                        BRANCH IF NOT CONSTANT
         TM    SWVAL(SBR),X'FF'
         BO    IUB2
         TM    RII+1(WAREG),X'01'            IS GPR0 FREE
         BZ    IUC1                          BRANCH IF FREE
         SR    R14,R14                       R14=O
         BAL   RETURN,ROUTINE9(0,SBR)        STOPINT
IUC1     TM    RII+1(WAREG),X'02'            IS GPR1 FREE
         BZ    IUC11                         BRANCH IF FREE
         LA    R14,1
         BAL   RETURN,ROUTINE9(0,SBR)        STOPINT
         NI    RII+1(WAREG),X'FD'
IUC11    AH    P,ONEENTRY(0,WAREG)           INCREASE P
         STH   P,IUG2+2                      PREPARE INSTRUCTION
         AH    P,ONEENTRY(0,WAREG)           INCREASE P
         STH   P,WORKPL(0,WAREG)             CHECK MAX
         BAL   RETURN,MAXCH(0,SBR)
         SH    P,ONEENTRY(0,WAREG)
         LA    OPDK,5(0,OPDK)
         LA    RETURN,IUH21
         BAL   R3,ROUTIN15(0,SBR)
         SR    R14,R14                       STORE BLO
         SH    P,ONEENTRY(WAREG)
         IC    R14,3(0,OPDK)
         SRL   R14,4
         BAL   RETURN,ROUTINE9(0,SBR)        STOPINT
         BAL   RETURN,ROUTINE8(0,SBR)
         MVC   WPLACE(2,WAREG),3(OPDK)
         MVI   VPLACE(WAREG),X'AA'           V=CDSA
IUH21    MVC   IUH2+2(2),WPLACE(WAREG)       PREPARE INSTRUCTION
         MVN   IUH2+1(1),VPLACE(WAREG)
         SH    OPDK,CON5(0,SBR)
         LA    INFORM,IUG2
         BAL   LENGTH,GENTXTS(0,SBR)
         DC    H'8'
         BAL   RETURN,ROUTINE1(0,SBR)
         MVC   IUH2+6(2),WPLACE(WAREG)
         MVN   IUH2+5(1),VPLACE(WAREG)
         LA    INFORM,IUH2+4
         BAL   LENGTH,GENTXTS(0,SBR)
         DC    H'14'
         OI    RII+1(WAREG),X'01'            SET TO ONE RII OF GPR0
         MVI   CII+1(WAREG),X'00'
         STH   P,WORKPL(0,WAREG)             ADJUST OPDK ENTRY
         MVC   8(2,OPDK),WORKPL(WAREG)
         LA    OPDK,5(0,OPDK)
         ST    OPDK,RUTI(0,WAREG)            INTRODUCE OPDK ADD IN RUT
         MVC   2(1,OPDK),SPBNST+1(WAREG)     ADJUST OPDK ENTRY
         OI    1(OPDK),X'30'
         NI    0(OPDK),X'90'
         OI    0(OPDK),X'88'
         L   R14,LATAB(0,WAREG)
         NI    96(R14),X'7F'
         BCT   OPTK,COMP(0,SBR)
IUG2     LA    R1,P(CDSA,0)                  ***GENERATE***
IUH2     LA    STH,0(0,0)                    ***GENERATE***
         LA    BRR,0(0,0)                    ***GENERATE***
         STM   STH,BRR,0(R1)                 ***&ENERATEM**
         L     ENTRY,96(LAT,0)              ***GENERATE
         BALR  R14,ENTRY                    ***GENERATE***
IUB2     LA    RETURN,I1B1
         TM    0(OPDK),X'20'
         BO    I1B13
         TM    0(OPDK),X'40'
         BO    I1B13
         TM    5(OPDK),X'20'
         BO    I1B13
         TM    5(OPDK),X'40'
         BO    I1B13
         SR    R14,R14
         IC    R14,8(OPDK)
         SRL   R14,4
         LA    R15,1
         SLL   R15,0(R14)
         STC   R15,IUB3+1
         XI    IUB3+1,X'FF'
IUB3     NI    RII+1(WAREG),X'00'
         SR    R14,R14
         TM    CII+1(WAREG),X'07'
         BO    IUB13
         LH    R14,CII(WAREG)
         LA    R14,1(0,R14)
IUB13    STH   R14,CII(WAREG)
         BAL   RETURN,I1B13
*        REAL-INTEGER POWER
I1B1     BAL   R3,HOB11
         LA    RETURN,I1C11
         BAL   R3,ROUTIN15(0,SBR)
         SR    R14,R14
         IC    R14,3(0,OPDK)
         SRL   R14,4
         BAL   RETURN,ROUTINE9(0,SBR)        STOPINT
         BAL   RETURN,ROUTINE8(0,SBR)
         MVC   WPLACE(2,WAREG),3(OPDK)       PREPARE INSTRUCTION
         MVI   VPLACE(WAREG),X'AA'
I1C11    BAL   R3,HOD1
         L     R14,LATAB(0,WAREG)
         NI    100(R14),X'7F'
         BAL   INFORM,GENTXT6(0,SBR)
         L     ENTRY,100(LAT,0)             ***GENERATE***
         BALR  R14,ENTRY                    ***GENERATE***
         BCT   OPTK,COMP(0,SBR)
*        REAL-REAL POWER
HOB1     BAL   R3,HOB11
         LA    RETURN,HOC31
         BAL   R3,ROUTIN15(0,SBR)
         SR    R14,R14
         IC    R14,3(0,OPDK)
         SRL   R14,4
         STC   R14,CIR+1(WAREG)                                    5606
         BAL   RETURN,ROUTIN13(0,SBR)        STOPREAL
         BAL   RETURN,ROUTIN12(0,SBR)
         MVC   WPLACE(2,WAREG),3(OPDK)       PREPARE INSTRUCTION
         MVI   VPLACE(WAREG),X'AA'
HOC31    BAL   R3,HOD1
         L     R14,LATAB(0,WAREG)
         NI    104(R14),X'7F'
         BAL   INFORM,GENTXT6(0,SBR)
         L     ENTRY,104(LAT,0)             ***GENERATE***
         BALR  R14,ENTRY                    ***GENERATE***
         BCT   OPTK,COMP(0,SBR)
HOB11    TM    RIR+1(WAREG),X'01'            IS FPR0 FREE
         ST    R3,RETADR+52(0,WAREG)
         BZ    HOB21                         BRANCH IF FREE FPR0
         BAL   RETURN,ROUTIN14(0,SBR)        STFPR0
HOB21    TM    RIR+1(WAREG),X'02'            IS FPR2 FREE
         BZ    HOB2
         LA    R14,2
         BAL   RETURN,ROUTIN13(0,SBR)
         NI    RIR+1(WAREG),X'FD'
HOB2     TM    RII+1(WAREG),X'02'            IS GPR1 FREE
         BZ    HOB3                          BRANCH IF FREE
         LA    R14,1
         BAL   RETURN,ROUTINE9(0,SBR)        STOPINT   GPR1
         NI    RII+1(WAREG),X'FD'
HOB3     AH    P,ONEENTRY(0,WAREG)           INCREASE P
         STH   P,HOB4+2                      PREPARE INSTRUCTION
         AH    P,ONEENTRY(0,WAREG)           INCREASE P
         STH   P,WORKPL(0,WAREG)        CHECK MAX
         BAL   RETURN,MAXCH(0,SBR)
         SH    P,ONEENTRY(0,WAREG)      REDUCE P
         LA    OPDK,5(0,OPDK)
         LA    RETURN,HOC11
         BAL   R3,ROUTIN15(0,SBR)
         SH    P,ONEENTRY(0,WAREG)
         SR    R14,R14
         IC    R14,3(0,OPDK)
         SRL   R14,4
         BAL   RETURN,ROUTIN13(0,SBR)        STOPREAL
         SRL   R14,1
         LA    R15,1
         SLL   R15,0(R14)
         STC   R15,WORKPL(0,WAREG)
         XI    WORKPL(WAREG),X'FF'
         NC    RIR+1(1,WAREG),WORKPL(WAREG)
         MVC   WPLACE(2,WAREG),3(OPDK)      W=DISPL
         MVI   VPLACE(WAREG),X'AA'           V= CDSA
HOC11    MVC   HOB5+2(2),WPLACE(WAREG)       PREPARE INSTRUCTION
         MVN   HOB5+1(1),VPLACE(WAREG)
         SH    OPDK,CON5(0,SBR)
         LA    INFORM,HOB4
         BAL   LENGTH,GENTXTS(0,SBR)
         DC    H'8'
         L     R3,RETADR+52(0,WAREG)
         BR    R3
HOD1     MVC   HOB5+6(2),WPLACE(WAREG)
         ST    R3,RETADR+52(0,WAREG)
         MVN   HOB5+5(1),VPLACE(WAREG)
         LA    INFORM,HOB4+8
         BAL   LENGTH,GENTXTS(0,SBR)
         DC    H'8'
         OI    RIR+1(WAREG),X'01'            SET TO ONE RIR OF FPR0
         MVI   CIR+1(WAREG),X'00'
         STH   P,WORKPL(0,WAREG)             ADJUST OPDK ENTRY
         MVC   8(2,OPDK),WORKPL(WAREG)
         LA    OPDK,5(0,OPDK)
         ST    OPDK,RUTR(0,WAREG)            INTRODUCE OPDK ADD IN RUTR
         MVC   2(1,OPDK),SPBNST+1(WAREG)     ADJUST OPDK ENTRY
         OI    1(OPDK),X'30'
         NI    0(OPDK),X'90'
         OI    0(OPDK),X'88'
         L     R3,RETADR+52(0,WAREG)
         BR    R3
HOB4     LA    R1,P(CDSA,0)                  ***GENERATE***
HOB5     LA    STH,0(0,0)                    ***GENERATE***
         LA    BRR,0(0,0)                    ***GENERATE***
         STM   STH,BRR,0(R1)                 ***GENERATE***
I1B13    ST    RETURN,RET69
         TM    0(OPDK),X'20'
         BO    I1B14
         TM    0(OPDK),X'C0'
         BO    I1B15
I1B14    TM    5(OPDK),X'20'
         BO    I1B16
         TM    5(OPDK),X'C0'
         BO    I1B15
I1B16    STH   P,RET691
         MVC   WORKPL(2,WAREG),8(OPDK)
         NI    WORKPL(WAREG),X'0F'
         LH    P,WORKPL(WAREG)
         LA    OPDK,5(0,OPDK)
         BAL   RETURN,TRINRE(0,SBR)
         LH    P,RET691
         B     I1B17
I1B15    LA    OPDK,5(0,OPDK)
         BAL   RETURN,TRINRE(0,SBR)
I1B17    SH    OPDK,CON5(0,SBR)
         L     RETURN,RET69
         BR    RETURN
         DS    0F
RET69    DS    F
RET691   DS    H
