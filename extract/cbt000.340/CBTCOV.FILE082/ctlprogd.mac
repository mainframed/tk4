         MACRO
         CTLPROGD
         TITLE 'IECKQQ01 (CONTROL PROGRAM)--ENTRY INTERFACE ROUTINE'
* ENTRY INTERFACE SUBROUTINE
*
*
*      THIS SUBR IS ENTERED FROM THE SUPERVISOR'S SVC
* FLIH WHENEVER A QTAM SUPERVISOR CALL IS ISSUED.  THE
* SUBR PERFORMS INITIALIZATION FOR THE QTAM CONTROL
* ROUTINE.
*
*
*      ASSOCIATED WITH EACH ENTRY TO THE SUBR IS A
* SVRB CREATED BY THE SUPERVISOR. THIS SVRB IS CONVERTED TO A QTAM
* SUBTASK CONTROL BLOCK. ONE OTHERWISE UNUSED WORD IN THE SVRB IS
* ZEROED AND LATER USED AS AN ECB FOR CONTROLING THE DISPATCHING
* OF THE SUBTASK IT IS ASSOCIATED WITH.
*
*
*      THIS 'NEW' STCB IS PLACED AT THE HEAD OF THE STCB
* CHAIN OF THE QCB FOR THE LAST DISPATCHED QUEUE (THE QUEUE
* FROM WHICH A SUBTASK WAS LAST ACTIVATED BY QTAM) IF THAT
* QCB IS STILL ON THE READY QUEUE.  IF THE LAST DISPATCHED
* QUEUE IS NO LONGER ON THE READY QUEUE, THE NEW STCB IS
* ITSELF PLACED AT THE TOP OF THE READY QUEUE.  THE ENTRY
* INTERFACE SUBR THEN EXITS TO THE WAIT OR THE POST
* SUBROUTINE, DEPENDING ON WHICH SVC HAS BEEN ISSUED.
* 724000                                                         A36508
*C678000-682000,A697000,A964100-964600                           A49840
         SPACE
IGC065   DS    0X
IGC067   DS    0X
         BALR  BREG,0
         USING *,BREG
         MVI   IOSSAVE,255             SET SVC ENTRY FLAG
*
*      LOAD ADDRESSES OF THE TCB, ENTRY SVRB AND MODULE IGG019NG
*
         L     13,16                   LOAD ADDRESS OF THE CVT
         L     TCBREG,0(0,13)          LOAD ADDRESS OF TCB POINTERS
         L     TCBREG,4(TCBREG)        LOAD OLD TCB ADDRESS
         L     13,156(0,13)            ADDRESS OF THE TERMINAL TABLE
         L     13,4(0,13)              ADDRESS OF IGG019NG
         L     Y,TCBRBP ADDR OF RB AT TOP OF PUSH-DOWN LIST
         XC    XRBQ(4),XRBQ            ZERO ECB FOR WAIT
         L     QREG,QSAVE              LOAD LAST QUEUE ADDRESS
*
*        PLACE NEW STCB (ENTRY RB) IN STCB CHAIN OF LAST DISPATCHED
*        QUEUE.
*
         MVC   QSAVE+1(3),DUMMY        WAITRB ADDRESS TO QSAVE
         MVC   TPRI(4),QTRAN           NEXT STCB ADDRESS TO NEW STCB
         MVC   TFILL(4),DUMMY-1        QUEUE ADDRESS TO THE STCB
         MVC   QTRAN+1(3),TCBRBP+1     NEW STCB ADDRESS TO LAST QUEUE
*
*        SET THE PRIORITY OF THE NEW STCB
*
         MVI   TPRI,X'DC'         SET LOW PRIORITY IN STCB       A25336
         L     TCBREG,0(13)            LPS QUEUE ADDRESS
         NC    TPRI,288(TCBREG)   SET TO ZERO FOR CLOSEDOWN
         MVC   RQSAVE(5),READY                                     00PS
         B     ZEROPRI                                             00PS
RQSAVE   DC    6X'00'             ADDRESS AT TOP OF READY QUEUE    00PS
*
*      EXIT TO POST OR WAIT ROUTINES
*
ZEROPRI  L     TCBREG,XRBREG+8         LOAD PASSED REGISTER 2
         LA    TREG,0(TCBREG)          COPY REGISTER AND CLEAR HI ORDER
         L     X,XRBLNK-1         GET POINTER TO PRECEDING RB
         CLI   XRBPSW+3-TBLOCK(X),QWAIT     EXAMINE SVC CODE
         BE    WAIT      FALL THRU IF POST
         TITLE 'IECKQQ01 (CONTROL PROGRAM)--POST SUBROUTINE'
* QTAM POST SUBROUTINE
*      THE POST SUBR PLACES THE ADDR OF THE QCB NAMED BY THE CALLING
* ROUTINE INTO THE QCB ADDR FIELD OF THE SPECIFIED ELEMENT.  THE POST
* ROUTINE BRANCHES TO THE PRIORITY SEARCH SUBR TO CAUSE THE ELEMENT TO
* BE PLACED ON THE READY QUEUE IN PRIORITY ORDER.
         SPACE
*
*      ASSIGN ELEMENT PRIORITY IF REQUESTED
*
         MVI   QKEY,2                  SET QUEUE NOT WAITING
         CR    TREG,TCBREG             WAS PRIORITY PASSED
         BE    POST                    BRANCH IF NO PRIORITY PASSED
         MVC   FPRI,XRBREG+8           SET ELEMENT PRIORITY
*
*      INITIALIZE FOR PRIORITY INSERT ROUTINE
*
POST     ST    TREG,FKEY          PUT QCB'S ADDR IN ELEMENT
         LA    QREG,READY         POINT QREG TO HEAD OF READY QUEUE
         B     PRIORITY            BRANCH TO PRIORITY WITH--
*                                      QREG EQ. READY QUEUE HEAD
*                                      FREG EQ. ELEMENT ADDRESS
         TITLE 'IECKQQ01 (CONTROL PROGRAM)--WAIT SUBROUTINE'
* QTAM WAIT SUBROUTINE
*      WHEN THE WAIT SUBR IS ENTERED, THE STCB REPRESENTING RE-ENTRY
* TO THE CALLING ROUTINE (WHEN THE WAIT CONDITION IS SATISFIED) HAS
* ALREADY BEEN CHAINED INTO A QCB BY THE ENTRY INTERFACE SUBR.
* THE WAIT SUBR DETERMINES WHAT FURTHER DISPOSITION SHOULD BE MADE,
* BASED ON CURR CONDITIONS, TO SCHED THE SUBTASK FOR ACTIVATION.  FOUR
* SETS OF CONDITIONS DETERMINE THE DISPOSITION.
* 1.   IF THE SPECIFIED QCB HAS A KEY OF 2, THE WAIT SUBR MAKES NO
* FURTHER DISPOSITION BUT BRANCHES IMMEDIATELY TO THE DEFER-ENTRY SUBR.
* 2.   IF THE SPECIFIED QCB HAS AN ELEMENT AVAILABLE ON ITS ECB THE
* STCB IS LEFT LINKED INTO WHATEVER QCB THE ENTRY INTERFACE SUBR HAD
* CHAINED IT INTO.  THE WAIT SUBR THEN BRANCHES TO THE EXIT SELECT
* SUBR.  THIS CAUSES THE ADDR OF THE ELEMENT FOUND ON THE USER-
* SPECIFIED QCB'S ELEMENT CHAIN TO BE PLACED IN THE CALLING ROUTINE'S
* PARAMETER REGISTER, WHICH IS ITSELF STORED IN THE SAVE AREA OF THE
* STCB.  THE NET EFFECT IS THAT AT THE TIME THE SUBTASK IS ACTIVATED,
* IT APPEARS IN THE STCB CHAIN OF THE QATTACH QCB, OR THE STCB CHAIN
* OF THE DISPATCHED QUEUE.  THE ELEMENT CHAIN FROM WHICH IT IS DRAWING
* ELEMENTS, HOWEVER, IS THAT OF THE QCB SPECIFIED BY THE CALLING
* ROUTINE.
* 3.   IF THE SPECIFIED QCB HAS NO ELEMENTS AVAILABLE, BUT THE LAST-
* DISPATCHED QUEUE AND THE QUEUE SPECIFIED BY THE CALLING ROUTINE ARE
* THE SAME, THE STCB IS ALREADY CHAINED INTO THE CORRECT QCB AND THAT
* QCB IS ALREADY WAITING ON THE READY QUEUE.  THE WAIT SUBR BRANCHES TO
* THE DISPATCH SUBR.
* 4.   IF THE SPECIFIED QCB HAS NO ELEMENTS AVAILABLE AND IS NOT THE
* QCB FOR THE LAST-DISPATCHED QUEUE, THE STCB MUST BE LINKED INTO THE
* SPECIFIED QCB'S STCB CHAIN. THEREFORE, THE WAIT SUBR FALLS THRU TO
* THE DEFER-ENTRY SUBR.
         SPACE
         DROP  Y
         USING TBLOCK,TREG
WAIT     MVI   QATTACH,0
         TM    QKEY-QBLOCK(TREG),1     IS QWAIT QUEUE NOT WAITING
         BZ    UNAVAIL                 BR. YES UNABLE TO ASSIGN ELEMENT
*
*      IF AN ELEMENT IS AVAILABLE ASSIGN IT TO STCB WHICH ISSUED QWAIT
*
         L     FREG,QKEY-QBLOCK(0,TREG) ADDRESS OF FIRST ELEMENT IN
*                                      THE ELEMENT CHAIN OF THE QUEUE
*                                      BEING WAITED ON.
         MVC   QFAC-QBLOCK(,TREG),FLINK REMOVE FIRST ELEMENT FROM CHAIN
         CL    FREG,QKEY-QBLOCK(0,TREG) IS ELEMENT DUMMY END ELEMENT
         BNE   RETURNX                 NO- BRANCH TO DISPATCH SUBTASK
*                                      WHICH ISSUED QWAIT
*
*      EXIT TO QDISPATCH IF ENTRY INTERFACE ROUTINE PUT STCB IN THE
*      CORRECT QUEUE.
*
         CLR   TREG,QREG               IS QWAIT QUEUE EQUAL TO LAST
*                                      DISPATCHED QUEUE.
         BE    DISPATCH                BRANCH IF YES THE STCB IS IN THE
*                                      CORRECT QUEUE.
*                      FALL THRU TO DEFER-ENTRY RTN WHEN DIFFERENT.
         TITLE 'IECKQQ01 (CONTROL PROGRAM)--DEFER ENTRY ROUTINE'
* DEFER-ENTRY SUBROUTINE
*      THIS SUBR CAUSES ENTRY TO A SUBTASK TO BE DEFERRED.  WHEN A
* CONTROL SUBR ENCOUNTERS AN STCB FOR A SUBTASK THAT CANNOT BE
* ACTIVATED, A BRANCH TO THE DEFER-ENTRY SUBR IS TAKEN.  THIS SUBR
* CAUSES THE STCB TO BE REMOVED FROM THE POSITION AT WHICH IT WAS
* ENCOUNTERED AND LINKED INTO THE APPROPRIATE STCB CHAIN.
*      AFTER RETRIEVING THE POINTER TO THE STCB FROM THE LOCATION WHERE
* IT WAS ENCOUNTERED AND RESTORING THAT LOCATION TO ITS FORMER STATE,
* THE DEFER-ENTRY SUBR BRANCHES TO PRIORITY.  THIS CAUSES THE STCB TO
* BE PLACED, BY PRIORITY ORDER, INTO THE STCB CHAIN OF THE QCB
* SPECIFIED BY THE CALLING ROUTINE.
*      AN EXCEPTION ARISES IF THE KEY OF THE QCB SPECIFIED BY THE
* CALLING ROUTINE IS 2.  THIS CONDITION INDICATES THAT THE HIGHEST-
* PRIORITY SUBTASK ON THE QCB'S STCB CHAIN IS NOT WAITING FOR ELEMENTS
* AND IS READY TO RECEIVE CONTROL.  THE STCB BEING PROCESSED, HOWEVER,
* IS NOT READY. IF IT IS OF HIGHER PRIORITY THAN THE READY SUBTASK IT
* CANNOT BE PLACED AT THE HEAD OF THE STCB CHAIN WITHOUT PRE-EMPTING
* THE 'READY' STATUS THAT APPLIES TO THE CURR TOP STCB AND THAT SHOULD
* BE HONORED FIRST FOR MAX EFFICIENCY.  THEREFORE, THE DEFER-ENTRY SUBR
* ENTERS PRIORITY BY A PATH THAT ENSURES THAT THE NEW STCB IS ENQUEUED
* BY PRIORITY ORDER BELOW THE CURRENT TOP STCB.
         SPACE
UNAVAIL  L     FREG,QTRAN         POINT TO HEAD OF STCB CHAIN
         MVC   QTRAN+1(3),TLINK-TBLOCK(FREG)    REMOVE STCB FROM CHAIN
         LA    QREG,QTRAN-QBLOCK(0,TREG)   POINT TO NEXT STCB IN CHAIN
         CLI   QKEY-QBLOCK(TREG),2     IS PASSED QCB ON READY QUEUE
*                                      NOT WAITING.
         BNE   PRIORITY                BRANCH NO TO ENQUEUE NEW STCB
*                                      IN STCB CHAIN BY PRIORITY.
*
*      ENSURE NEW STCB WILL BE ENQUEUED BELOW STCB AT HEAD OF QUEUE
*
         L     TREG,QKEY          POINT TREG TO FIRST STCB IN CHAIN
SCAN     LA    QREG,TPRI          POINT QREG TO LINK FIELD OF ITEM
*
*
         TITLE 'IECKQQ01 (CONTROL PROGRAM)--PRIORITY SEARCH SUBR'
* PRIORITY SEARCH SUBROUTINE
*      THIS IS A GENERALIZED SUBR THAT DETERMINES THE POSITION WITHIN A
* CHAIN THAT AN ITEM SHOULD ASSUME IN ORDER TO BE IN CORRECT PRIORITY
* SEQUENCE.  ITEMS IN THE CHAIN ARE ARRANGED IN DESCENDING ORDER OF
* PRIORITIES FROM THE TOP OF THE CHAIN.  THE SUBR ACTS ON ALL CHAINS
* INCLUDING THE READY QUEUE.
*      THE SUBR EXAMINES EACH ITEM ON THE CHAIN UNTIL IT FINDS EITHER
* AN ITEM WITH LOWER PRIORITY THAN THAT OF THE SEARCH ARGUMENT, OR THE
* LAST ITEM ON THE CHAIN (SIGNALLED BY PRIORITY 255).  WHEN EITHER
* CONDITION IS MET, THE SUBR EXITS TO THE QUEUE INSERT SUBR.
* FOR THE PRIORITY SEARCH SUBROUTINE, FREG POINTS TO THE ITEM TO BE
* ORDERED,QREG POINTS INITIALLY TO THE HEAD OF A QUEUE AND THEREAFTER
* TO SUCCESSIVE ITEMS ON THE QUEUE, AND TREG POINTS TO THE ITEM THAT
* PRECEDES THE ITEM IN QREG.  WHEN THE ITEM IN TREG HAS A LOWER PRI-
* ORITY THAN THE SEARCH ARGUMENT IN FREG, OR IS THE LAST ITEM ON THE
* CHAIN, THE SEARCH ARGUMENT IS TO BE LINKED UPWARD TO THE ITEM IN
* QREG, AND DOWNWARD TO THE ITEM IN TREG.
         SPACE
PRIORITY L     TREG,QKEY          POINT TO ITEM ON QUEUE
         CLI   TPRI,255           PRIORITY 255 SIGNALS END OF CHAIN
         BE    LIFO   IF FOUND,LINK ITEM AHEAD OF LAST.
         CLC   TPRI,FPRI  IS PRI LOWER THAN QUEUED ITEM'S.
         BC    10,SCAN            NO -- GET NEXT ITEM ON QUEUE
*                                 YES -- ITEM IN FREG LINKS INTO QUEUE
*                                 BELOW THE ITEM IN QREG.
*
* FALL THRU TO QUEUE INSERT RTN
         TITLE 'IECKQQ01 (CONTROL PROGRAM)--QUEUE INSERT SUBROUTINE'
* QUEUE INSERT SUBROUTINE
*      THIS IS A GENERALIZED SUBR THAT LINKS ITEMS INTO A CHAIN. IT IS
* APPLIED TO ALL CHAINS INCLUDING THAT OF THE READY QUEUE.  WHEN THIS
* SUBR IS ENTERED, A REGISTER CONTAINS A POINTER TO THE LINK ADDR
* PORTION OF THE ITEM AT THE POINT IN THE CHAIN AT WHICH THE NEW ITEM
* IS TO BE INSERTED.  A SECOND REGISTER HOLDS THE ADDRESS OF THE ITEM
* TO BE INSERTED.  (THE POINT OF INSERTION IS THE HEAD OF THE CHAIN
* EXCEPT WHEN THIS SUBROUTINE IS ENTERED FROM THE PRIORITY SEARCH
* SUBR WHICH SELECTS THE INSERTION POINT ACCORDING TO THE ITEM'S
* PRIORITY.)  THE SUBR PLACES THE OLD LINK ADDR IN THE NEW ITEM,
* REPLACES THE OLD LINK ADDR WITH THE NEW ITEM'S ADDR, AND EXITS TO THE
* QDISPATCH RTN (DISPATCH).
         SPACE
LIFO     MVC   FLINK,QFAC              LINK ADDRESS OF OLD ITEM TO NEW
         IC    TREG,QFAC-1             SAVE BYTE OF OLD LINK FIELD
         ST    FREG,QFAC-1             NEW ITEM ADDRESS TO OLD
         STC   TREG,QFAC-1             RESTORE BYTE OF OLD LINK FIELD
*
* FALL THRU TO DISPATCH RTN.
         TITLE 'IECKQQ01 (CONTROL PROGRAM)--DISPATCH SUBROUTINE'
* DISPATCH SUBROUTINE
*      THIS SUBR PERFORMS THE PRIMARY INTERNAL MANAGEMENT
* FUNCTION WITHIN QTAM.  EXCEPT FOR THOSE CASES IN
* WHICH ANOTHER SUBR IS ABLE TO DETERMINE THE SUBTASK
* TO BE ACTIVATED NEXT (AS, FOR EXAMPLE, WHEN THE WAIT
* SUBROUTINE FINDS THAT ELEMENTS ARE ALREADY AVAILABLE TO A
* SUBTASK REQUESTING ELEMENTS AND THAT THE DISPATCH SUBR
* CAN BE BYPASSED), THE DISPATCH SUBR MAINTAINS
* CONTINUITY BY RECEIVING CONTROL FROM A COMPLETED SUBTASK
* AND SELECTING ANOTHER SUBTASK WHICH IS TO RECEIVE CONTROL.
*      THE DISPATCH SUBR EXAMINES THE ITEM AT THE HEAD
* OF THE READY QUEUE AND TAKES ONE OF FOUR COURSES OF
* ACTION, DEPENDING ON THE TYPE OF ITEM ENCOUNTERED.  ITEMS
* THAT CAN APPEAR ON THE READY QUEUE ARE--
*  1.  QCB'S FOR WHICH THE HIGHEST-PRIORITY
*      SUBTASK IS NOT WAITING FOR ELEMENTS (QCB KEY IS 2).
*  2.  QCB'S WAITING FOR ELEMENTS(KEY IS 3).
*  3.  ECB'S CONTAINING THE ADDR OF
*      THE QCB TO WHICH THE ELEMENT HAS BEEN POSTED (KEY IS 0).
*  4.  FULL STCBS, FOR WHICH THE KEY VALUE IS ALSO ZERO.
*      THE FIRST WORD OF A FULL STCB CONTAINS THE ADDRESS
*      OF THE QATTACH QCB.
*      THE EFFECT OF THE APPEARANCE OF EACH TYPE AT THE HEAD
* OF THE READY QUEUE IS DESCRIBED BELOW.
         SPACE
* QCB--NOTWAITING (KEY=2).
*      WHEN THE ITEM AT THE HEAD OF THE READY QUEUE IS A 'NOT WAITING'
* QCB, CONTROL IS GIVEN TO THE FIRST (HIGHEST PRIORITY)
* SUBTASK REPRESENTED IN THE QCB'S STCB CHAIN AND THE QCB'S
* KEY IS SET TO 3.
         SPACE
* QCB--WAITING (KEY 3).
*      A 'WAITING' QCB AT THE HEAD OF THE READY QUEUE IS REMOVED FROM
* THE READY QUEUE (I.E., IS REPLACED BY THE ITEM IT LINKED TO) AND
* ITS KEY IS SET TO 1.  A QCB WAITING FOR ELEMENTS CANNOT
* CONTEND FOR CONTROL; HOWEVER, IT WILL AUTOMATICALLY BE
* RETURNED TO THE READY QUEUE WHEN AN ELEMENT BECOMES AVAILABLE.
*      AN EXCEPTION ARISES WHEN A SUBTASK REQUIRES MORE THAN
* ONE ELEMENT (FOR EXAMPLE, A SERIES OF BUFFERS) TO
* ACCOMPLISH ITS FUNCTION.  WHEN WUCH A SUBTASK RECEIVES
* CONTROL, THE QCB WITH WHICH IT IS ASSOCIATED CONTINUES TO
* APPEAR AS 'WAITING' (KEY IS 3) UNTIL ALL REQUIRED
* ELEMENTS HAVE BEEN RECEIVED.  BEFORE A WAITING QCB IS
* REMOVED, IT IS DETERMINED WHETHER THE QTAM SUBTASK FROM
* WHICH CONTROL WAS LAST RETURNED WAS ASSOCIATED WITH THAT
* QCB.  IF IT WAS, THAT SUBTASK IS AGAIN GIVEN CONTROL.
* THIS CYCLE CONTINUES UNTIL THE SUBTASK FULFILLS ALL OF
* ITS REQUIREMENTS OR UNTIL THE SUBTASK EXHAUSTS THE
* QUEUE'S ELEMENT CHAIN.
         SPACE
* ELEMENT CONTROL BLOCK.
*      AN ECB (UNLESS ASSEMBLED AS AN ITEM IN THE READY QUEUE)
*  APPEARS ON THE
* READY QUEUE AS A RESULT OF AN SVC 67, AS EXPLAINED BELOW,
* AND CONTAINS THE ADDRESS OF THE QCB FOR THE QUEUE TO
* WHICH THE ELEMENT HAS BEEN POSTED.  AN ELEMENT APPEARING
* AT THE TOP OF THE READY QUEUE IS IMMEDIATELY REPLACED BY
* THE NEXT ITEM ON THE READY QUEUE.  HOWEVER, THE QCB
* POINTER IN THE ECB IS RETAINED.  THAT QCB IS THEN TREATED AS THOUGH
* IT, RATHER THAN AN ELEMENT ASSOCIATED WITHIT, HAD BEEN ENCOUNTERED;
* ITS HIGHEST PRIORITY SUBTASK IS ACTIVATED, AND ITS KEY IS SET TO 3.
*      THIS CONVENTION HAS SEVERAL SIGNIFICANT ASPECTS...
*  1.  IT IS THE MEANS BY WHICH A REMOVED 'WAITING' QCB IS
*      RETURNED TO THE READY QUEUE.
*  2.  IT ILLUSTRATES THE CASE WHERE THE ACTIVE QCB -- THAT
*      IS, THE QCB WITH WHICH THE ACTIVE SUBTASK CONTROL
*      BLOCK IS ASSOCIATED -- IS NOT NECESSARILY AT THE
*      HEAD OF THE READY QUEUE.
*  3.  IT EXPLAINS THE FACT THAT AN ECB NEED NOT BE PHYSICALLY CHAINED
*      INTO A QCB TO BECOME ASSOCIATED WITH THAT QCB.  SPECIFICALLY, IT
*      ENSURES THAT AN ELEMENT IS IMMEDIATELY ACTED UPON, EXCEPT IN
*      THE CASE WHERE THE QUEUE INVOLVED ALREADY HAS AT
*      LEAST ONE OTHER 'REAL' ELEMENT AND IS ALREADY
*      CONTENDING FOR COMPUTING TIME.
         SPACE
* FULL SUBTASK CONTROL BLOCK
*      THIS IS THE ONLY FORM OF STCB THAT APPEARS ON THE READY QUEUE.
* ITS APPEARANCE AT THE HEAD OF THE READY QUEUE HAS EXACTLY THE SAME
* EFFECT AS THE APPEARANCE THERE OF A 'NOT WAITING' (KEY IS 2) QCB
* WITH THIS STCB AT THE HEAD OF ITS STCB CHAIN, THE SUBTASK
* IS ACTIVATED AND THE KEY OF THE QCB WITH WHICH IT IS
* ASSOCIATED (QATTACH) IS SET TO 3.
*      THE MECHANISM BY WHICH THIS IS ACCOMPLISHED IS AS FOLLOWS...
*  1.  LOCATION READY CONTAINS A POINTER TO THE STCB; THIS
*      SITUATION IS THE PHYSICAL COUNTERPART OF THE STCB'S
*      BEING AT THE HEAD OF READY QUEUE.
*  2.  THE STCB ITSELF HAS THE APPEARANCE (TO THE QTAM
*      CONTROL ROUTINES) OF AN ELEMENT.  ITS QCB ADDR IS QATTACH.
*  3.  QATTACH IS A STORAGE LOCATION EQUIVALENT TO READY
*      MINUS 8 BYTES. IT ALSO APPEARS TO BE THE FIRST WORD
*      OF A 'NOT WAITING' QCB.
*  4.  SINCE THE STCB IS APPARENTLY AN ECB ASSOCIATED
*      WITH A 'NOT WAITING' QCB, THE FIRST STCB IN THAT QCB'S CHAIN
*      SHOULD BE SELECTED FOR ACTIVATION.  THE ADDR OF THE FIRST STCB
*      IS TO BE FOUND IN THE THIRD FULLWORD OF THE QCB.
*  5.  THE THIRD FULLWORD OF THE QATTACH WHICH APPEARS AS A
*      QCB IS THE LOCATION READY.  THEREFORE, THE FULL
*      SUBTASK, WHOSE ADDRESS IS AT READY, IS SELECTED FOR CONTROL.
         SPACE
* FETCH HEAD OF READY QUEUE
         SPACE 2
DISPATCH MVI   QATTACH,2          RESET QATTACH QCB TO NOT WAITING
         L     FREG,READY         POINT FREG TO ITEM AT RDY Q HEAD
         LA    QREG,FKEY          POINT QREG TO 1ST WORD OF READY ITEM
         CLC   READY+1(3),QSAVE+1      MAY THIS READY ITEM BE DISP.
         B     DISPSUBR      TO SUBROUTINE TO SEE IF ITEM CAN BE A49840
*     DISPATCHED.    IF SUBROUTINE GOES TO 'EXIT', ITEM WILL NOT A49840
*     BE DISPATCHED BECAUSE ONE OF 3 CASES EXIST AS FOLLOWS      A49840
*                                   1. ENTRY TO QDISPATCH WAS FROM AN
*                                      SVC AND THIS READY ITEM IS THE
*                                      DUMMY END ITEM.
*                                   2. ENTRY TO QDISPATCH WAS FROM AN
*                                      ASYNCHRONOUS INTERRUPT AND THIS
*                                      IS THE QUEUE LAST DISPATCHED ON
*                                      AN SVC ENTRY TO QDISPATCH.
*                                3.  MCP IS ABENDING             A49840
         CLI   QKEY,2             IS ITEM A QCB -- KEY EQ 2 OR 3
         BC    10,A   BR WHEN KEY EQUAL/HIGHER THAN 2
*                                 NO  -- CONSIDER IT AN ELEMENT
         SPACE
*
* REMOVE FOLDED QCB FROM READY QUEUE WHEN ENABLED SUBTASK IS WATING
*
         CL    QREG,QFAC-1             IS ELEMENT POST TO ITSELF
         BNE   DISABLE                 BRANCH NO
         MVC   READY+1(3),FLINK        REMOVE ELEMENT FROM READY QUEUE
         L     TREG,QTRAN              LOAD STCB ADDRESS
         CLI   TFILL,0                 IS STCB FULL STCB (SVRB)
         LA    TREG,QATTACH           QATTACH ADDRESS IN CASE OF BR.
         BE    WAIT                BRANCH TO PUT STCB ON THE     A36508
*                                      READY QUEUE.
*
* FACILITY AT HEAD -- FETCH QUEUE
*
DISABLE  EQU   *
         L     QREG,FKEY    GET ECB'S QCB ADDR
         CLI   QKEY,2     IS ECB'S QCB ALREADY ON RDY Q
         BC    10,A      BRANCH IF YES
         SPACE
*
* ITEM IS AN ELEMENT POINTING TO A QCB NOT ON THE READY QUEUE.
*
         MVC   QPRI(4),FPRI       REMOVE ELEMENT FROM TOP OF READY Q
         ST    QREG,READY         REPLACE ELEMENT WITH ITS QCB
*                                 BRANCH TO BD NOW UNCONDITIONAL
         SPACE
A        BC    12,BD              THIS INSTRUCTION IS A BRANCH ON QCB
*                                 KEY EQ 2 WHEN REACHED VIA A BRANCH
         SPACE
*
* ITEM IS A WAITING QCB OR AN ELEMENT POINTING TO A WAITING QCB
*
         MVC   READY+1(3),FLINK   REMOVE ITEM FROM HEAD OF READY QUEUE
         NI    FKEY,X'FD' IF ITEM IS A QCB, THIS SETS KEY=2 (NOT WAIT)
         BC    4,DISPATCH  BRANCH IF QCB
*                                 OTHERWISE, ITEM IS AN ELEMENT POINT-
*                                 ING TO A QCB WITH A WAITING SUBTASK
*
* FALL THRU TO EXIT SELECT RTN WITH ELEMENT REMOVED FROM HEAD OF RDY Q
         TITLE 'IECKQQ01 (CONTROL PROGRAM)--EXIT SELECT SUBROUTINE'
* EXIT SELECT SUBROUTINE
*      THIS SUBR ACTIVATES SUBTASKS REPRESENTED BY
* TRUNCATED STCB'S, OR FALLS THROUGH TO THE EXIT INTERFACE
* SUBROUTINE IF THE STCB IS NOT TRUNCATED.
*      THE FIRST BYTE OF A TRUNCATED STCB IS A BRANCH
* MODIFIER OF THE FORM (ENTRYPT-NRET), WHERE ENTRYPT IS THE
* ADDR OF THE DESIRED ENTRY POINT.  NRET IS THE LOCATION
* FROM WHICH THE BRANCH OFFSET IS APPLIED.  WHEN THE EXIT
* SELECT SUBR ENCOUNTERS A NON-ZERO RETURN CODE, IT
* COMPUTES THE BRANCH ADDRESS AND BRANCHES TO THE COMPUTED
* ENTRY POINT.
         LR    TREG,QREG               QUEUE ADDRESS TO TREG
         SPACE 2
RETURNX  ST    TREG,FKEY
BD       MVI   QKEY,3             SET QCB'S KEY TO 'WAITING'
RETURN   L     TREG,QTRAN         GET STCB ADDRESS FROM QCB
         SR    X,X                CLEAR WORK REG
         IC    X,TFILL            GET STCB,S RETURN CODE
         LTR   X,X                ZERO CODE SHOWS AUGMENTED SUBTASK
         BNZ   NRET(X)  BRANCH TO NON-AUGMENTED SUBTASK IN IGG019NG
*
* FALL THRU TO EXIT INTERFACE RTN IF ITEM A FULL STCB.
         TITLE 'IECKQQ01 (CONTROL PROGRAM)--EXIT INTERFACE SUBROUTINE'
* EXIT INTERFACE SUBROUTINE
*      THIS SUBR IS ENTERED TO PROCESS FULL STCB'S.
* BEFORE TAKING ANY OTHER ACTION, THE SUBR DETERMINES
* WHETHER THE SUBTASK IS BEING SCHEDULED FOR ACTIVATION
* BECAUSE IT WAS REPRESENTED IN THE STCB CHAIN OF A WAITING
* QCB FOR WHICH AN ELEMENT HAS BEEN ENCOUNTERED.  IF THIS
* CONDITION EXISTS, THE ELEMENT'S ADDR IS PLACED IN THE
* PARAMETER REGISTER IN THE SAVE AREA OF THE FULL STCB.
*
*
*      A BRANCH IS TAKEN TO THE O/S POST ROUTINE TO POST COMPLETION
* IN THE ECB OF THE STCB (SVRB) BEING DISPATCHED. THE SUBR THEN CAUSES
* ONE OF TWO EXITS TO BE TAKEN DEPENDING ON THE MODE OF ENTRY, (SVC
* OR ASYNCHRONOUS INTERRUPT) TO THE QDISPATCH SUBR.
*
*  1.  IF ENTRY TO QDISPATCH WAS AS THE RESULT OF AN ASYNCHRONOUS
*      INTERRUPT A RETURN IS MADE TO IOS VIA A BRANCH.
*
*  2.  IF ENTRY TO QDISPATCH WAS FROM AN SVC A WAIT IS ISSUED ON THE
*      ECB OF THE ENTRY SVRB. AFTER THE WAIT IS SATISFIED A RETURN IS
*      EFFECTED TO THE ROUTINE WHICH ISSUED THE SVC.
         SPACE 2
*
*      STORE RETURN PARAMETER IF WAITING STCB BEING DISPATCHED
*
         CL    FREG,READY              WAS ENTRY TO THIS ROUTINE THE
*                                      RESULT OF AN ELEMENT FOUND ON
*                                      THE READY QUEUE.
         BE    *+8                     BRANCH IF ENTRY DUE TO QCB OR
*                                      STCB FOUND ON READY QUEUE.
         ST    FREG,XRBREG+4           STORE RETURN PARAMETER
         ST    QREG,QSAVE              SAVE THIS QUEUE ADDRESS
*
*      POST ECB COMPLETE
*
         MVC   QTRAN+1(3),TLINK        REMOVE STCB FROM QUEUE
         LA    11,XRBQ                 LOAD ECB ADDRESS FOR POST
LNKLOOP  TM    XSTZB+1,X'80'           TEST FOR LINK FIELD = TCB
         L     TREG,XRBLNK-1           LOAD RB LINK ADDRESS
         BC    8,LNKLOOP               BRANCH NOT TCB ADDRESS
         LR    X,BREG                  SAVE BASE OF QQ01
         L     15,POSTCON              LOAD POST ENTRY POINT
         LR    BREG,TREG               LOAD TCB ADDRESS FOR POST
         BALR  14,15                   TO THE POST ROUTINT
         LR    BREG,X                  RESTORE QQ01 BASE
EXIT     CLI   IOSSAVE,255             ENTRY FROM SVC
         BNE   REENT                   BRANCH ENTRY FROM I/O INTERRUPT
*
*      WAIT ON ENTRY RB
*
         L     TREG,16                 LOAD CVT ADDRESS
         L     TREG,0(TREG)            TCB TABLE ADDRESS
         L     TREG,4(TREG)            LOAD OLD TCB ADDRESS
         L     TREG,0(TREG)            LOAD ADDRESS OF ENTRY RB
         WAIT  1,ECB=XRBQ
*
*      RETURN TO ROUTINE WHICH ISSUED THE SVC
*
         LM    0,15,XRBREG             LOAD CALLERS REGISTERS
         SVC   3
*
*      RETURN TO IOS
*
REENT    LM    14,13,IOSSAVE           RELOAD REGISTERS
         BR    14                      RETURN
POSTCON  DC    V(IEA0PT01)             ENTRY ADDRESS FOR OS POST RT.
IOSSAVE  DS    16A
DISPSUBR BE    EXIT        CASE 1 OR 2, DO NOT DISPATCH          A49840
         L     TCBREG,0(13)            LPSQ ADDRESS              A49840
         L     TCBREG,288(TCBREG)      MCP TCB ADDRESS           A49840
         TM    29(TCBREG),X'80'  MCP ABENDING?                   A49840
         BO    EXIT              YES, DO NOT DISPATCH ITEM       A49840
         B     DISPATCH+22       NO, RETURN TO DISPATCH          A49840
         MEND
