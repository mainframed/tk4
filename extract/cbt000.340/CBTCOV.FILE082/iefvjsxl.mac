*%       GOTO JSXLBSL;
* /*******************************************************************/
* /*                                                                 */
* /* STATUS --                                                       */
* /*    RELEASE 20, MODIFICATION LEVEL 00                            */
* /*    A 0-999999                                            S20029 */
* /*    C 12000,396000,584000                                  M0759 */
* /*    A 584000-585960                                        M0759 */
* /*                                                                 */
* /* FUNCTION --                                                     */
* /*    DEFINE THE JOB SCHEDULING EXIT LIST (JSXL) WHICH SPECIFIES   */
* /*    OPTIONAL EXITS TO BE GIVEN CONTROL DURING JOB SCHEDULING     */
* /*    SUBROUTINE PROCESSING                                        */
* /*                                                                 */
* /* ENTRY POINTS --                                                 */
* /*         NONE                                                    */
* /*                                                                 */
* /* INPUT --                                                        */
* /*    NONE                                                         */
* /*                                                                 */
* /* OUTPUT --                                                       */
* /*    DATA CONSTANTS (ASSEMBLER) OR DECLARATIONS (BSL) DEFINING    */
* /*    THE JSXL                                                     */
* /*                                                                 */
* /* EXTERNAL REFERENCES --                                          */
* /*         NONE                                                    */
* /*                                                                 */
* /* EXITS, NORMAL --                                                */
* /*         NONE                                                    */
* /*                                                                 */
* /* EXITS, ERROR --                                                 */
* /*         NONE                                                    */
* /*                                                                 */
* /* TABLE/WORK AREAS --                                             */
* /*         NONE                                                    */
* /*                                                                 */
* /* ATTRIBUTES --                                                   */
* /*         NOT APPLICABLE                                          */
* /*                                                                 */
* /* NOTES --                                                        */
* /*    NONE                                                         */
* /*                                                                 */
* /*******************************************************************/
* /* START OF SPECIFICATIONS ****
* 1MODULE-NAME = IEFVJSXL
* 1DESCRIPTIVE-NAME = JOB SCHEDULING EXIT LIST
* 1DESCRIPTION = VEHICLE FOR SPECIFICATION OF SPECIAL EXIT ROUTINES  -
*             TO BE INVOKED DURING THE EXECUTION OF THE MVT JOB      -
*             SCHEDULING SUBROUTINE
* 1FUNCTION = DESCRIBE THE ROUTINES TO WHICH CONTROL IS TO BE GIVEN  -
*             DURING JOB SCHEDULING SUBROUTINE PROCESSING, THE POINT -
*             AT WHICH THEY ARE TO BE GIVEN CONTROL, AND THE METHOD  -
*             OF LINKAGE TO BE USED WHEN PASSING CONTROL TO THEM.    -
*             PROVIDE A MEANS THROUGH WHICH THE EXIT ROUTINES MAY    -
*             SHARE A COMMON DATA AREA.
* 1MODULE-TYPE = TABLE
*   2PROCESSOR = ASSEMBLER AND BSL
*   2TABLE-SIZE = * BYTES
*   2FIELD = JSXLLGTH
*     3DISPLACEMENT = 0 BYTES
*     3TYPE = ARITHMETIC
*       4MODE = BINARY
*       4LENGTH = 15 BITS
*       4SCALING = 0
*       4VALUE = LENGTH OF JSXL
*   2FIELD = JSXLRCOD
*     3DISPLACEMENT = 2 BYTES
*     3TYPE = ARITHMETIC
*       4MODE = BINARY
*       4LENGTH = 8 BITS
*       4SCALING = 0
*       4VALUE = RETURN CODE FROM THE JOB SCHEDULING SUBROUTINE
*   2FIELD = JSXLRCXT
*     3DISPLACEMENT = 3 BYTES
*     3TYPE = ARITHMETIC
*       4MODE = BINARY
*       4LENGTH = 8 BITS
*       4SCALING = 0
*       4VALUE = CODE INDICATING THE SOURCE OF THE RETURN CODE IN    -
*       THE JSXLRCOD FIELD. THE VALUES THAT THIS FIELD MAY CURRENTLY -
*       ASSUME ARE JSXLJSS, JSXLSCAN, JSXLRI, AND JSXLINIT           -
*       INDICATING THE SOURCE OF THE RETURN CODE TO BE THE JOB       -
*       SCHEDULING SUBROUTINE ITSELF, IEFVSCAN, THE                  -
*       READER/INTERPRETER, OR THE INITIATOR RESPECTIVELY.
*   2FIELD = JSXLCOMM
*     3DISPLACEMENT = 4 BYTES
*     3TYPE = ADDRESS
*   2FIELD = JSXLLDEF
*     3DISPLACEMENT = 8 BYTES
*     3REPLICATION = *
*     3TYPE = TABLE
*       4TABLE-SIZE = 8 BYTES
*       4FIELD = JSXLLINK
*         5DISPLACEMENT = 0 BYTES
*         5TYPE = ARITHMETIC
*           6MODE = BINARY
*           6LENGTH = 8 BITS
*           6SCALING = 0
*           6VALUE =    X'00'     -- NO EXIT SPECIFICATION           -
*                       X'40'     -- BRANCH TO ADDRESS               -
*                       X'80'     -- LINK TO NAME                    -
*                       X'C0'     -- XCTL TO NAME
*       4FIELD = JSXLID
*         5DISPLACEMENT = 1 BYTE
*         5TYPE = BIT STRING
*           6BITS-USED = BIT 1
*             7FUNCTION = INDICATE WHETHER THIS EXIT ROUTINE IS TO   -
*                  BE INVOKED AS A POST-PROCESSING EXIT ROUTINE
*             7VALUE = IF THIS BIT IS ON, THIS EXIT ROUTINE SHOULD   -
*                  BE INVOKED AS A POST-PROCESSING EXIT ROUTINE
*           6BITS-USED = BIT 2
*             7FUNCTION = INDICATE WHETHER THIS EXIT ROUTINE IS TO   -
*                  BE INVOKED AS A PRE-INVOCATION EXIT ROUTINE
*             7VALUE = IF THIS BIT IS ON, THIS EXIT ROUTINE SHOULD   -
*                  BE INVOKED AS A PRE-INVOCATION EXIT ROUTINE
*           6BITS-USED = BIT 3
*             7FUNCTION = INDICATE WHETHER THIS EXIT ROUTINE IS TO   -
*                  BE INVOKED AS A POST-PORCESSING EXIT ROUTINE
*             7VALUE = IF THIS BIT IS ON, THIS EXIT ROUTINE SHOULD   -
*                  BE INVOKED AS A POST-INVOCATION EXIT ROUTINE
*           6BITS-USED = BIT 4
*             7FUNCTION = INDICATE WHETHER THIS EXIT ROUTINE IS TO   -
*                  BE INVOKED AS A SPECIAL ACCESS METHOD FOR         -
*                  READER/INTERPRETER INPUT
*             7VALUE = IF THIS BIT IS ON, THIS EXIT ROUTINE SHOULD   -
*                  BE INVOKED AS A SPECIAL ACCESS METHOD FOR         -
*                  READER/INTERPETER INPUT
*           6BITS-USED = BIT 5
*             7FUNCTION = INDICATE WHETHER THIS EXIT ROUTINE IS TO   -
*                  BE INVOKED AS A POST-SCAN EXIT ROUTINE FROM THE   -
*                  READER/INTERPRETER
*             7VALUE = IF THIS BIT IS ON, THIS EXIT ROUTINE SHOULD   -
*                  BE INVOKED AS A POST-SCAN EXIT ROUTINE FROM THE   -
*                  READER/INTERPRETER
*           6BITS-USED = BITS 6 TO 8
*             7FUNCTION = RESERVED
*             7VALUE = SHOULD BE ZERO TO PROVIDE COMPATIBILITY WITH  -
*                  FUTURE EXTENSIONS OF THE EXIT LIST FACILITY.
*       4FIELD = JSXLDATA
*         5DISPLACEMENT = 4 BYTES
*         5TYPE = CHARACTER STRING
*           6LENGTH+MODE = 6 CHARACTERS
*           6VALUE = IF THE SPECIFIED LINKAGE IS 'LINK' OR 'XCTL',   -
*             THEN THE 6-BYTE EBCDIC NAME OF THE ROUTINE TO BE GIVEN -
*             CONTROL SHOULD BE PLACED IN THIS FIELD, LEFT-JUSTIFIED -
*             AND PADDED WITH BLANKS IF NECESSARY. IF THE SPECIFIED  -
*             LINKAGE IS A 'BRANCH', THEN THE ADDRESS OF THE ROUTINE -
*             TO RECEIVE CONTROL SHOULD BE PLACED IN THIS FIELD, AND -
*             THE HIGH-ORDER BYTES OF THIS FIELD SHOULD BE SET TO    -
*             HEXIDECIMAL ZEROS.
*
**** END OF SPECIFICATIONS ***/
         MACRO
&NAME    IEFVJSXL &PREFIX,&COMM /*
         LCLA  &A,&B,&C,&D,&LENJSXL
         LCLB  &POST,&PRINI,&PTINI,&RDRAM,&PTRDR
         LCLC  &P,&PL,&LINKAGE,&ROUTINE,&F1,&F2,&F3,&F4,&F5,&F6,&F7,&F8
         LCLC  &G1,&G2,&G3,&G4,&G5,&G6,&G7,&G8,&COMMUN
&NAME    DS    0D                 ALIGN JSXL
&LENJSXL SETA  8*N'&SYSLIST-8     COMPUTE LENGTH OF THIS JSXL
&P       SETC  'JSX'              ASSUME STANDARD PREFIX FOR LABELS
         AIF   (T'&PREFIX EQ 'O').JSX0010  TEST FOR SUPPLIED PREFIX
&P       SETC  '&PREFIX'          USE SUPPLIED PREFIX IF PRESENT
.JSX0010 ANOP
&PL      SETC  '&P.L'             SET EXTENDED PREFIX
&PL      DS    CL&LENJSXL         JOB SCHEDULING EXIT LIST (JSXL)
         ORG   &PL
&PL.LGTH DC    AL2(&LENJSXL)      LENGTH
&PL.RCOD DC    AL1(0)             RETURN CODE
&PL.RNRM    EQU  X'00'               NORMAL COMPLETION
&PL.RAUT    EQU  X'04'               UNAUTHORIZED COMBINATION OF       *
                                     PROGRAMS REFERENCED
&PL.RCXT DC    AL1(0)             RETURN CODE EXTENSION FIELD.
&PL.JSS  EQU   0                  RETURN CODE FROM JSS MODULE
&PL.SCAN EQU   1                  RETURN CODE FROM IEFVSCAN
&PL.RI   EQU   2                  RETURN CODE FROM READER/INTERPRETER
&PL.INIT EQU   3                  RETURN CODE FROM INITIATOR
*        EQU   4-255              RESERVED
&COMMUN  SETC  '0'                ASSUME STANDARD VALUE FOR            *
                                  COMMUNICATIONS POINTER
         AIF  (T'&COMM EQ 'O').JSX0020 TEST FOR SUPPLIED COMMUNICATIONS*
                             POINTER
&COMMUN  SETC '&COMM'   USE SUPPLIED COMMUNICATIONS POINTER IF PRESENT
.JSX0020 ANOP
&PL.COMM DC   A(&COMMUN)     COMMUNICATIONS POINTER BETWEEN EXIT       *
                             ROUTINES
&PL.LDEF DS   1D             FIRST ELEMENT IN ARRAY OF EXIT DEFINITIONS
         ORG  &PL.LDEF
&PL.LINK DS   XL1            LINKAGE INFORMATION
&P.LNK   EQU  X'80'          CODE FOR LINKAGE TO NAME
&P.XCTL  EQU  X'C0'          CODE FOR XCTL TO NAME
&P.BR    EQU  X'40'          CODE FOR BRANCH TO ADDRESS
&P.NULL  EQU  X'00'          CODE FOR NO EXIT SPECIFICATION
&PL.ID   DS   XL1            EXIT IDENTIFICATION
&P.POST  EQU  X'80'          CODE FOR JOB SCHEDULING ROUTINE           *
                             POST-PROCESSING EXIT ROUTINE
&P.PRINI EQU  X'40'          CODE FOR INITIATOR PRE-INVOCATION EXIT    *
                             ROUTINE
&P.PTINI EQU  X'20'          CODE FOR INITIATOR POST-INVOCATION EXIT   *
                             ROUTINE
&P.RDRAM EQU  X'10'          CODE FOR READER/INTERPRETER SPECIAL       *
                             INPUT ACCESS METHOD
&P.PTRDR EQU  X'08'          POST SCAN EXIT BIT                   M0759
*        EQU  X'04'          RESERVED. MUST BE ZERO TO ASSURE
*                            COMPATIBILITY WITH FUTURE EXTENSIONS
*                            TO THE EXIT LIST FACILITY.
*        EQU  X'02'          RESERVED. MUST BE ZERO TO ASSURE
*                            COMPATIBILITY WITH FUTURE EXTENSIONS
*                            TO THE EXIT LIST FACILITY.
*        EQU  X'01'          RESERVED. MUST BE ZERO TO ASSURE
*                            COMPATIBILITY WITH FUTURE EXTENSIONS
*                            TO THE EXIT LIST FACILITY.
&PL.DATA DS   CL6
.**********************************************************************
.*       GENERATE AN INITIALIZED EXIT LIST IMAGE IF REQUESTED         *
.**********************************************************************
         ORG  &PL.LDEF
         AIF  (N'&SYSLIST LT 3).J30 BY-PASS INITIALIZATION IF NOT      *
                        REQUESTED
&A       SETA 3         START SCAN AT THE THIRD POSITIONAL OPERAND
&C       SETA 1         START WITH THE FIRST POSITIONAL SUBOPERAND
.J1      ANOP
&LINKAGE SETC '&P.NULL' ASSUME NO LINKAGE HAS BEEN SPECIFIED
&B       SETA 3
&D       SETA 1
&F1      SETC ''
&F2      SETC ''
&F3      SETC ''
&F4      SETC ''
&F5      SETC ''
&F6      SETC ''
&F7      SETC ''
&F8      SETC ''
&G1      SETC ''
&G2      SETC ''
&G3      SETC ''
&G4      SETC ''
&G5      SETC ''
&G6      SETC ''
&G7      SETC ''
&G8      SETC ''
         AIF  (N'&SYSLIST(&A) LT 1).J6
         AIF  ('&SYSLIST(&A,1)' NE '').J2
         AGO  .J6
.J2      AIF  ('&SYSLIST(&A,1)' NE 'CALL').J3
&LINKAGE SETC '&P.BR'
         AGO  .J6
.J3      AIF  ('&SYSLIST(&A,1)' NE 'LINK').J4
&LINKAGE SETC '&P.LNK'
         AGO  .J6
.J4      AIF  ('&SYSLIST(&A,1)' NE 'XCTL').J5
&LINKAGE SETC '&P.XCTL'
         AGO  .J6
.J5      MNOTE *,'INVALID LINKAGE FOR EXIT(&C) IN LIST'
.J6      ANOP
&P.X&C   DC   AL1(&LINKAGE)       SPECIFY EXIT LINKAGE
.J7      AIF  (N'&SYSLIST(&A) LT &B).J25
         AIF  ('&SYSLIST(&A,&B)' EQ '').J25
         AIF  ('&SYSLIST(&A,&B)' NE 'POST').J9
         AIF  (&POST EQ 0).J8
         MNOTE *,'POST-PROCESSING EXIT SPECIFIED BEFORE -- PROBABLE ERR*
               OR'
.J8      ANOP
&POST    SETB 1
&F1      SETC '+'
&G1      SETC '&P.POST'
         AGO  .J24
.J9      AIF  ('&SYSLIST(&A,&B)' NE 'PRINI').J11
         AIF  (&PRINI EQ 0).J10
         MNOTE *,'PRE-INVOCATION EXIT SPECIFIED BEFORE -- PROBABLE ERRO*
               R'
.J10     ANOP
&PRINI   SETB 1
&F2      SETC '+'
&G2      SETC '&P.PRINI'
         AGO  .J24
.J11     AIF  ('&SYSLIST(&A,&B)' NE 'PTINI').J13
         AIF  (&PTINI EQ 0).J12
         MNOTE *,'POST-INVOCATION EXIT SPECIFIED BEFORE -- PROBABLE ERR*
               OR'
.J12     ANOP
&PTINI   SETB 1
&F3      SETC '+'
&G3      SETC '&P.PTINI'
         AGO  .J24
.J13     AIF  ('&SYSLIST(&A,&B)' NE 'RDRAM').J15
         AIF  (&RDRAM EQ 0).J14
         MNOTE *,'SPECIAL ACCESS METHOD SPECIFIED BEFORE -- PROBABLE ER*
               ROR'
.J14     ANOP
&RDRAM   SETB 1
&F4      SETC '+'
&G4      SETC '&P.RDRAM'
         AGO  .J24
.J15     AIF   ('&SYSLIST(&A,&B)' NE 'PTRDR').J17                 M0759
         AIF   (&PTRDR EQ 0).J16                                  M0759
.*                                                                M0759
         MNOTE *,'POST SCAN EXIT SPECIFIED BEFORE--PROBABLE ERROR'
.J16     ANOP                                                     M0759
&PTRDR   SETB  1                                                  M0759
&F5      SETC  '+'                                                M0759
&G5      SETC  '&P.PTRDR'                                         M0759
         AGO   .J24                                               M0759
.J17     ANOP                                                     M0759
.J23     MNOTE *,'EXIT CODE(&D) INVALID FOR EXIT(&C) IN LIST'
.J24     ANOP
&B       SETA &B+1
&D       SETA &D+1
         AGO  .J7
.J25     DC   AL1(0&F1&G1&F2&G2&F3&G3&F4&G4&F5&G5&F6&G6&F7&G7&F8&G8)   *
                             SPECIFY EXIT CODE
         AIF  ('&LINKAGE' NE '&P.NULL' AND                             *
               '&LINKAGE' NE '&P.BR').J27
&ROUTINE SETC '0'
         AIF  (N'&SYSLIST(&A) LT 2).J26
         AIF  ('&SYSLIST(&A,2)' EQ '').J26
&ROUTINE SETC '&SYSLIST(&A,2)'
.J26     DC   XL2'0000'
         DC   A(&ROUTINE)    ADDRESS OF EXIT ROUTINE
         AGO  .J29
.J27     ANOP
&ROUTINE SETC ''
         AIF  (N'&SYSLIST(&A) LT 2).J28
&ROUTINE SETC '&SYSLIST(&A,2)'
.J28     DC   CL6'&ROUTINE ' NAME OF EXIT ROUTINE
.J29     ANOP
&A       SETA &A+1
&C       SETA &C+1
         AIF  (&A LE N'&SYSLIST).J1
.J30     ANOP
         MEND
**/ %    JSXLBSL: ;
* /********************************************************************
*         DEFINE THE JOB SCHEDULING EXIT LIST
* ********************************************************************/
* DECLARE
* 1       JSXL BASED(JSXLPTR) BOUNDARY(WORD),
*         /************************************************************
*               LENGTH OF JSXL
*         ************************************************************/
*         2     JSXLLGTH FIXED(15),
*         /************************************************************
*               RETURN CODE
*         ************************************************************/
*         2     JSXLRCOD POINTER(8),
*%     DECLARE
*      JSXLRNRM FIXED,
*      JSXLRAUT FIXED;
*%     /* NORMAL COMPLETION */
*      JSXLRNRM = 0;
*%     /* UNAUTHORIZED COMBINATION OF PROGRAMS REFERENCED */
*      JSXLRAUT = 4;
*         /************************************************************
*               RETURN CODE EXTENSION FIELD -- INDICATES ORIGIN OF
*               RETURN CODE
*         ************************************************************/
*         2     JSXLRCXT POINTER(8),
*         /************************************************************
*               COMMON POINTER FOR COMMUNICATION BETWEEN EXIT
*               ROUTINES
*         ************************************************************/
*         2     JSXLCOMM POINTER(32),
*         /************************************************************
*               ARRAY OF EXIT DEFINITIONS
*         ************************************************************/
*         2     JSXLLDEF(256),
*               /******************************************************
*                  DEFINITION OF LINKAGE TO BE USED -- THE FOLLOWING
*                  VALUES MAY BE USED IN THIS FIELD:
*                  JSXNULL -- NO EXIT SPECIFICATION
*                  JSXBR   -- BRANCH TO ADDRESS
*                  JSXLNK  -- LINK TO NAME
*                  JSXXCTL -- XCTL TO NAME
*               ******************************************************/
*               3  JSXLLINK POINTER(8),
*               /******************************************************
*                  EXIT IDENTIFIER
*               ******************************************************/
*               3  JSXLID BIT(8),
*                  /***************************************************
*                     POST-PROCESSING EXIT BIT
*                  ***************************************************/
*                  4  JSXPOST BIT(1),
*                  /***************************************************
*                     PRE-INVOCATION EXIT BIT
*                  ***************************************************/
*                  4  JSXPRINI BIT(1),
*                  /***************************************************
*                     POST-INVOCATION EXIT BIT
*                  ***************************************************/
*                  4  JSXPTINI BIT(1),
*                  /***************************************************
*                     SPECIAL ACCESS METHOD BIT
*                  ***************************************************/
*                  4  JSXRDRAM BIT(1),
*                  /***************************************************
*                     POST-SCAN EXIT BIT
*                  ***************************************************/
*                  4  JSXPTRDR BIT(1),
*                  /***************************************************
*                     RESERVED
*                  ***************************************************/
*                  4  * BIT(3),
*               /******************************************************
*                  LINKAGE DATA -- THE FOLLOWING VALUES MAY BE USED IN
*                  THIS FIELD:
*                  1. IF THE SPECIFIED LINKAGE IS 'LINK' OR 'XCTL',
*                     THEN THE 6-BYTE EBCDIC NAME OF THE ROUTINE TO BE
*                     GIVEN CONTROL SHOULD BE PLACED IN THIS FIELD,
*                     LEFT-JUSTIFIED AND PADDED WITH BLANKS IF
*                     NECESSARY.
*                  2. IF THE SPECIFIED LINKAGE IS A 'BRANCH', THEN THE
*                     ADDRESS OF THE ROUTINE TO RECEIVE CONTROL SHOULD
*                     BE PLACED IN THIS FIELD, AND THE HIGH-ORDER
*                     BYTES OF THIS FIELD SHOULD BE SET TO HEXIDECIMAL
*                     ZEROS.
*               ******************************************************/
*               3  JSXLDATA CHARACTER(6);
*%        DECLARE   /* JSXLLINK CODE INDICATING XCTL LINKAGE */
*         JSXXCTL FIXED;
*%        JSXXCTL = 192;
*%        DECLARE  /* JSXLLINK CODE INDICATING LINK LINKAGE */
*         JSXLNK FIXED;
*%        JSXLNK = 128;
*%        DECLARE  /* JSXLLINK CODE INDICATING CALL LINKAGE */
*         JSXBR FIXED;
*%        JSXBR = 64;
*%        DECLARE  /* JSXLLINK CODE INDICATING NO LINKAGE */
*         JSXNULL FIXED;
*%        JSXNULL = 0;
*%        DECLARE  /* JSXLRCXT CODE INDICATING JSS RETURN CODE */
*         JSXLJSS FIXED;
*%        JSXLJSS = 0;
*%        DECLARE  /* JSXLRCXT CODE INDICATING IEFVSCAN RETURN CODE */
*         JSXLSCAN FIXED;
*%        JSXLSCAN = 1;
*%        DECLARE  /* JSXLRCXT CODE INDICATING READER/INTERPRETER    */
*         JSXLRI FIXED;  /* CODE                                     */
*%        JSXLRI = 2;
*%        DECLARE  /* JSXLRCXT CODE INDICATING INITIATOR RETURN CODE */
*         JSXLINIT FIXED;
*%        JSXLINIT = 3;
