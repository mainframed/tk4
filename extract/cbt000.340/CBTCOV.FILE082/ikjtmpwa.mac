 %       GOTO TMPWABSL;
.* A 0-999999                                                    S20031
.*                                                               A47516
.* A 034580-034900                                              SA60138
.* A 034540,034950                                              SA68142
 %TMPWABSL: ;
  /*******************************************************************/
  /* TMP DYNAMIC WORK AREA -- CHANGE  LEVEL 000                      */
  /*                                                                 */
  /* THIS DYNAMIC WORK AREA IS GOTTEN FROM SUBPOOL 1 DURING THE TMP  */
  /* INITALIZATION AND IS NOT NORMALLY FREED UNTIL THE END OF THE    */
  /* TERMINAL SESSION.  DURING TMP STAE RETRY ALL OF CORE IS FREED   */
  /* AND THE WORK AREA MUST AGAIN BE INITIALIZED.  THIS WORK AREA IS */
  /* REFERENCED BY ALL OF THE TMP MODULES.                           */
  /*******************************************************************/
  DECLARE
    1 TMPWORKA BASED(WORKAPTR),
 %       TPLSLEV='2';                 /* SET TPL LEVEL TO 2          */
 %       TPLOPT1='CONTINUE';          /* INDICATE MORE TO FOLLOW TPL */
 %       INCLUDE SYSLIB(IKJTPL);
 %       DEACTIVATE TPLSLEV,TPLOPT1;
      2 TMPNECB  PTR(31),            /* ECB FOR STAI WAIT            */
      2 TMPCECB  PTR(31),            /* ECB FOR ATTACHED CP          */
      2 TMPIECB  PTR(31),            /* ECB FOR STAI POST            */
      2 TMPAECB  PTR(31),            /* ECB FOR ATTN POST            */
      2 TMPCMDWT PTR(31),            /* PTR TO CMD FROM ATTN EXIT    */
      2 TMPTIME  PTR(31),            /* ADDR OF TIME ROUTINE         */
      2 TMPSWS   CHAR(4),            /* TMP INTERNAL SWITCHES        */
        3 TMPTEST  BIT(1),           /* TEST PROGRAM IN CONTROL      */
        3 TMPCMDW  BIT(1),           /* COMMAND WAITING              */
        3 TMPNFCMD BIT(1),           /* FIRST COMMAND IS PROCESSED   */
        3 TMPACTRL BIT(1),           /* TMP ATTN EXIT IS IN CONTROL  */
        3 TMPSCTRL BIT(1),           /* TMP STAI EXIT IS IN CONTROL  */
      2 MULTLLST,                    /* MULTILEVEL MESSAGE LIST      */
        3 MSGLCHP  PTR(31),          /* CHAIN PTR TO 2ND MSG LIST    */
        3 MSGLIST,                   /* FIRST MESSAGE LIST           */
          4 NUMSEG   FIXED(31),      /* NO. OF MESSAGE SEGMENTS      */
          4 MSGSEG(3) PTR(31),       /* ARRAY OF SEGMENT PTRS        */
        3 SECLLIST,                  /* 2ND LEVEL MSG LIST           */
          4 SMSGLCHP PTR(31),        /* LAST CHAIN PTR               */
          4 SNUMSEG  FIXED(31),      /* NO. OF MESSAGE SEGMENTS      */
          4 SMSGSEG(3) PTR(31),      /* ARRAY OF SEGMENT PTRS        */
      2 AMSGLIST,                    /* ATTN MESSAGE LIST            */
        3 ANUMSEG  FIXED(31),        /* NUMBER OF MESSAGE SEGMENTS   */
        3 AMSGSEG(2) PTR(31),        /* ARRAY OF SEGMENT PTRS        */
      2 ASRPARM  CHAR(20) BDY(WORD), /* ATTN SR PARM AREA            */
      2 TMPZEROS FIXED(31),          /* ALL ZEROS WORD - DUMMY CBUF  */
      2 RCODE    PTR(31),            /* RETURN CODE SAVE AREA        */
      2 ARCODE   PTR(31),            /* ATTN RETURN CODE SAVE AREA   */
      2 SCANFLG  FIXED(31),          /* SCAN FLAGS                   */
      2 ASCANFLG FIXED(31),          /* ATTN SCAN FLAGS              */
      2 ATTCHPTR PTR(31),            /* ADDR OF ATTACH PARM LIST     */
      2 CPPLPTR  PTR(31),            /* ADDR OF CPPL                 */
      2 DYNAPPTR PTR(31),            /* ADDR OF DYNAMIC ALLOCATION
                                        PARAMETER LIST               */
      2 GTPBPTR  PTR(31),            /* ADDR OF GETLINE PARM LIST    */
      2 PGPBPTR  PTR(31),            /* ADDR OF PUTGET PARM LIST     */
      2 PTPBPTR  PTR(31),            /* ADDR OF PUTLINE PARM LIST    */
      2 READYPTR PTR(31),            /* ADDR OF TMP MODE MESSAGE     */
      2 SCANAP   PTR(31),            /* ADDR OF SCAN ANSWER AREA     */
      2 ASCANAP  PTR(31),            /* ADDR OF ATTN SCAN ANSWER     */
      2 SRPLPTR  PTR(31),            /* ADDR OF SRPL                 */
      2 ASRPLPTR PTR(31),            /* ADDR OF ATTN SRPL            */
      2 STAXPPTR PTR(31),            /* ADDR OF STAX PARM LIST       */
      2 STPBPTR  PTR(31),            /* ADDR OF STACK PARM LIST      */
      2 WARPTR   PTR(31),            /* ADDR OF TMP RETRY WORKAREA   */
      2 BLDLLST  CHAR(62) BDY(WORD), /* BLDL LIST                    */
        3 BLDLENT  FIXED(15),        /* NUMBER OF BLDL ENTRIES       */
        3 BLDLELNG FIXED(15),        /* LENGTH OF EACH ENTRY         */
        3 BLDLNAME CHAR(8),          /* BLDL NAME FIELD              */
      2 *        CHAR(2),            /* PAD OUT AREA TO FULL WORD    */
      2 *        CHAR(4),            /* PAD TO A DWORD BDY           */
      2 DYNASTOR BDY(WORD),          /* DYNAMIC STORAGE FOR   SA60138*/
        3 AUTOSTOR CHAR(264),        /* TMP STAE & STAI       SA60138*/
        3 SAVSTOR  CHAR(72),         /* SAVE AREA IF NO CORE  SA60138*/
                                     /* FOR IKJEFT04 AND      SA60138*/
                                     /* IKJEFT05              SA60138*/
      2 *        CHAR(4),            /* PAD TO A DWORD BDY    SA68142*/
      2          CHAR(20) BDY(WORD); /* RESERVED                     */

  /*******************************************************************/
  /* TMP RETRY PARM AREA --                                          */
  /* THIS WORK AREA IS GOTTEN FROM SUBPOOL 0 AND IS USED FOR         */
  /* REINITIALIZAION DURING A TMP STAE RETRY.                        */
  /*******************************************************************/
  DECLARE
    1 TMPWA2 BASED(WA2PTR),
      2 TMPWAPTR PTR(31),            /* ADDR OF TMP MAIN WORK AREA   */
      2 SAVARPTR PTR(31),            /* ADDR OF ORIGINAL SAVE AREA   */
      2 RETRYFP  PTR(31),            /* ADDR OF RETRY FLAGS          */
      2 RETRYFLG CHAR(1),            /* TMP RETRY FLAGS              */
        3 TMPRINIT BIT(1),           /* REINITIALIZATION IN PROCESS  */
        3 TMPRTRY  BIT(1),           /* RETRY IN PROCESS             */
      2 *        CHAR(3);            /* RESERVED                     */

  /*******************************************************************/
  /* COMMAND BUFFER --                                               */
  /*******************************************************************/
  DECLARE
    1 CBUF BASED(TPLCBUF),
      2 CBUFLNG  FIXED(15),          /* TOTAL LENGTH OF CBUF         */
      2 CBUFOFF  FIXED(15),          /* CURRENT DATA FIELD OFFSET    */
      2 CBUFDATA CHAR(256);          /* VAR LENGTH DATA FIELD        */

  /*******************************************************************/
  /* TMP STAI MESSAGE ROUTINE PARAMETER AREA --                      */
  /* THIS PARAMETER AREA IS GOTTEN FROM SUBPOOL 1 AND IS USED FOR    */
  /* INTERFACING WITH THE TMP STAI MESSAGE ROUTINE WHEN A CP ABENDS. */
  /*******************************************************************/
  DECLARE
    1 STRTPARM BASED(TMPIECB),
      2 STRTPTR PTR(31),             /* ADDR OF STAI MESSAGE RTN     */
      2 STRTACDE FIXED(31),          /* ABEND CODE FROM CP           */
      2 STRTTMPA PTR(31),            /* ADDR OF TMP MAIN WORK AREA   */
      2 STRTDYNA PTR(31),            /* ADDR OF STAI DYNAMIC STORAGE */
      2 STRTBASE PTR(31);            /* BASE REGISTER FOR STAI       */

