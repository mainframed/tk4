         MACRO
&NAME    DUMPMAC  &SYS=PCP
.*516000,544000                                                   M3240
         TITLE 'IGC0801C - WRITE DUMP SUBROUTINE'
***********************************************************************
* MACRO NAME:    DUMPMAC                                              *
*                                                                     *
* FUNCTION:      1. DETERMINE DEVICE TO BE WRITTEN UPON.              *
*                2. FOR DIRECT ACCESS, INSURE DATA SET EMPTY.         *
*                3. ATTEMPT WRITING OF CORE IMAGE DUMP.               *
*                4. OUTPUT STATUS MESSAGE TO CONSOLE.                 *
*                                                                     *
* APPLICABILITY: ALL VERSIONS OF OS/360 ASSEMBLED WITHIN THE FOLLOW-  *
*                ING MODULES:                                         *
*                                                                     *
*                1. IEAATM08 - PCP DAR                                *
*                2. IEADTM22 - MFT DAR                             I250
*                3. IEAQTM08 - MVT/M65MP DAR                          *
*                                                                     *
* ATTRIBUTES:    ASSUMES THOSE OF CALLING ROUTINE.                    *
*                                                                     *
* ENTRY POINT:   ASSIGNED BY CALLER AS:                               *
*                                                                     *
*                NAME    DUMPMAC  SYS=XXX                             *
*                                                                     *
*                KEYWORD PARAMETER VALUES:                            *
*                  1. MVT - FOR MVT AND M65MP SYSTEMS
*                  2. MFT - FOR MFT SYSTEMS
*                  3. PCP, BLANK OR OTHER - FOR PCP SYSTEMS           *
*
*                ENTRY IS BY BALR, BAL OR B WITH REG 14 THE RETURN    *
*                REG.                                                 *
*                                                                     *
* EXITS:         NORMAL - BRANCH ON REG 14.                           *
*                ABNORMAL - NONE                                      *
*                                                                     *
* INPUT :                                                             *
*
* SUCCESSFUL UTILIZATION OF THIS MACRO/SUBROUTINE DEPENDS UPON THE
* PROPER INITIALIZATION OF THE FOLLOWING REGISTERS -
*
*        1. REG 2 - CVT ADDRESS - USING STMNT TO CVTSECT REQ'D.
*        2. REG 9 - SVRB ADDRESS E.G. DAR'S SVRB ADDRESS
*        3. REG 12 - CURRENT TCB ADDRESS - USING STMNT TO TCBSECT REQ'D
*        4. REG 14 - RETURN ADDRESS
*
* REGISTERS DESTROYED BY THIS ROUTINE ( NOTE CALLERS REG'S ARE NOT
*        SAVED).
*
*        1. REG 4 - WORK REG
*       2. REG 7 & 8 - INTERNAL LINK REG'S.
*        4. REG 11 - LOADED WITH UCB ADDR OF DEVICE HOUSING SYS1.DUMP
*        3. REG 10 - LOADED WITH I/O CONTROL BLOCK ADDR FOR WRITING
*                   OF THE CORE IMAGE DUMP
*       4. REG 13 - USED AS A SECOND BASE REG. IF SYS1.DUMP IS ON TAPE.
*       5. REG 11 - USED AS AN INTERNAL LINK REG IF SYS1.DUMP ON TAPE
* REMAINING REGISTERS NOT ALTERED.
*
* CAUTION SHOULD BE TAKEN IN THE USE OF A BASE REG - INSURE IT IS NOT
* ONE OF THOSE REGISTERS DESTROYED BY THIS MACRO/SUBROUTINE
*                                                                     *
* OUTPUT:        STATUS MESSAGES WRITTEN TO THE CONSOLE ARE AS FOLLOWS*
*                                                                     *
*         IEA022I JOBNAME STEPNAME CORE IMAGE FAILED -1               *
*                                                    -2               *
*                                                    -3               *
*                                                                     *
*         1. IEA022I - 1: SYS1.DUMP DATA SET FULL                     *
*                                                                     *
*         2. IEA022I - 2: AN I/O ERROR OCCURRED DURING DATA SET       *
*                         INITIALIZATION (DIRECT ACCESS ONLY)         *
*                                                                     *
*         3. IEA022I - 3: AN I/O ERROR OCCURRED DURING THE ACTUAL     *
*                         WRITING OF THE CORE IMAGE DUMP.             *
*                                                                     *
*                                                                     *
*         IEA023I JOBNAME STEPNAME CORE IMAGE COMPLETE -1             *
*                                                                     *
*                                                                     *
* EXTERNAL REFERENCES:                                                *
*                                                                     *
*                1. CVT                                               *
*                2. UCB                                               *
*                3. TCB                                               *
*                4. SVRB                                              *
*                                                                     *
* SVC'S USED:                                                         *
*                1. WTO - SVC 35                                      *
*                2. EXCP - SVC 0                                      *
*                3. WAIT - SVC 1                                      *
*                                                                     *
* EXTERNAL DEPENDENCIES:                                              *
*                                                                     *
*                DURING IPL/NIP PROCESSING, NIP OBTAINS SPACE FOR AND *
*                PARTIALLY INITIALZES A SET OF CONTROL BLOCKS USED BY *
*                THIS SUBROUTINE TO WRITE THE CORE IMAGE DUMP. THESE  *
*                CONTROL BLOCKS ARE POINTED TO BY THE CVTDAR FIELD.   *
*                IF NO PROVISIONS FOR SYS1.DUMP WERE MADE DURING IPL, *
*                NIP SETS THE CVTDAR FIELD TO ZERO. A DIAGRAM OF THE  *
*                CONTROL BLOCKS FOLLOWS:                              *
*                                                                     *
 EJECT
*
*     MAP OF I/O CONTROL BLOCKS SET UP BY NIP FOR DAR                 *
*
*                         CVT                                         *
*                             ********************                    *
*                           0 *                  *                    *
*                             *                  *                    *
*                             ********************                    *
*                          72 *                  *                    *
*                             * CVTDAR - ADDR OF *                    *
*                             *   DAR'S CONTROL  **********           *
*                             *   BLOCKS         *        *           *
*                             *                  *        *           *
*                             ********************        *           *
*                             *                  *        *           *
*                             *                  *        *           *
*                             *                  *        *           *
*                             *                  *        *           *
*                             ********************        *           *
*                                                         *           *
*                                                         *           *
*                                                         *           *
*                                                         *           *
*           ***********************************************           *
*           *                                                         *
*           *                                                         *
*           *                                                         *
*           *                                                         *
*         *****                                                       *
*          ***                                                        *
*           *                                                         *
*                                                                     *
*  DUMMY   0***********************                                   *
*  DCB      *  DEB ADDRESS        *                                   *
*           **********************************************            *
*  DEB     4*                                            *            *
*           *                                            *            *
*           *                                            *            *
*           *                                            *            *
*           *                                            *            *
*           **********************************************            *
*  ECB    52*                     *                                   *
*           **********************************************            *
*  IOB    54*                                            *            *
*           *                                            *            *
*           *                                            *            *
*           *                                            *            *
*           *                                            *            *
*           **********************************************            *
 EJECT
*           **********************************************            *
*         96*   CCW 1             *   CCW 2              *            *
*           **********************************************            *
*        112*   CCW 3             *   CCW 4              *            *
*           **********************************************            *
*        128*   CCW 5             *   CCW 6              *            *
*           **********************************************            *
*        114*   CCW 7             *   CCW 8              *            *
*           **********************************************            *
*        160*   FAILING TCB ADDR  *   SPARE SPACE        *            *
*           **********************************************            *
*                                                                     *
*          TOTAL LENGTH = 168 BYTES                                   *
*                                                                     *
* MOTE:  MACRO DARMAC, EXPANDS TO PROVIDE A MAPPING DSECT OF THE ABOVE*
*        CONTROL BLOCK COMPLEX. DARMAC IS CALLED BY DUMPMAC FOR JUST  *
*        THAT PURPOSE.                                                *
 EJECT
*                                                                     *
* OPERATION:                                                          *
*                THIS SUBROUTINE IS BASICALLY AN I/O ROUTINE, CAPABLE *
*                OF WRITING A CORE IMAGE DUMP TO A PRE-ALLOCAGED      *
*                DATA SET (SYS1.DUMP) WHICH MAY RESIDE ON TAPE OR A   *
*                DIRECT ADDESS DEVICE.                                *
*                                                                     *
*                INITIALLY, THE UCB ADDRESS OF THE DEVICE UPON WHICH  *
*                SYS1.DUMP RESIDES IS OBTAINED FROM DAR'S IOB (PROVID-*
*                ED BY NIP). IT CAN THEN BE DETERMINED WEATHER THE    *
*                DATA SET IS UPON TAPE OR DIRECT ACCESS.              *
*                                                                     *
*                DIRECT ACCESS:                                       *
*                                                                     *
*                A CHANNEL PROGRAM IS SET UP TO READ THE FIRST RECORD *
*                ON THE DATA SET. IF THE DATA SET IS EMPTY, AN END OF *
*                FILE RECORD WILL BE READ CAUSING A UNIT CHECK        *
*                CONDITION. THE ABSENCE OF A UNIT CHECK MEANS THE DATA*
*                SET IS FULL AND MESSAGE IEA022I-1 IS OUTPUTTED  TO   *
*                THE CONSOLE. NO FURTHER I/O ATTEMPT IS MADE.         *
*                                                                     *
*                IF THE DATA SET IS EMPTY THE EOF RECORD NEEDS TO BE  *
*                OVERLAID WITH A FORMAT RECORD. A CHANNEL PROGRAM IS  *
*                INITIALIZED TO PERFORM A WRITE COUNT KEY DATA TO     *
*                'REFORMAT' THE FIRST RECORD. UPON COMPLETION, SHOULD *
*                AN I/O ERROR OCCUR, MESSAGE IEA022I-2 IS WRITTEN AND *
*                I/O ACTIVITY ENDS.                                   *
*                                                                     *
*                EXCP AND WAIT ARE USED TO EXECUTE THE ABOVE TWO      *
*                CHANNEL PROGRAMS.                                    *
*                                                                     *
*                THE ACTUAL WRITING OF THE CORE IMAGE DUMP IS NOW     *
*                ATTEMPTED USING TWO CHANNEL PROGRAMS AND A PCI       *
*                APPENDAGE. SIMILIARLY  A CHANNEL END APPENDAGE       *
*                AND AN ABNORMAL END APPENDAGE ARE PROVIDED TO HANDLE *
*                      1. LAST WRITE                                  *
*                      2. TIMING DELAYS                               *
*                      3. END OF  CYLINDER CONDITIONS                 *
*                                                                     *
*                EXCP AND WAIT ARE USED TO EXECUTE THE CHANNEL PGM.   *
*                                                                     *
*                UPON COMPLETION, THE ECB IS EXAMINED TO DETERMINE    *
*                IF A SUCCESS OR FAILURE MESSAGE IS TO BE ISSUED.     *
*                                                                     *
*                TAPE:                                                *
*                                                                     *
*                WRITING TO TAPE IS SIMILIAR TO THAT ALREADY DESCRIBED*
*                WITH THE EXCEPTION THAT ONLY ONE CCW IS USED AND NO  *
*                APPENDAGES ARE PROVIDED. EACH RECORD IS WRITTEN      *
*                SEQUENTIALLY, CHECKING THE ECB AFTER EACH WRITE.     *
*                DEPENDING UPON THE COMPLETION CODE IN THE ECB, A     *
*                SUCCESS OR FAILURE MESSAGE IS WRITTEN TO THE CONSOLE.*
*                                                                     *
*                TERMINATION:                                         *
*                                                                     *
*                AFTER OUTPUTTING THE FINAL STATUS MESSAGE, THE CALLER*
*                IS RETURNED TO VIA BRANCH REG 14.                    *
***********************************************************************
 EJECT
*                             REGISTER EQUATES
CVTREG   EQU   2
BASEREG  EQU   3
WORK     EQU   4
XRET2    EQU   7
XRET     EQU   8
SVRBREG  EQU   9
DARREG   EQU   10
UCBREG   EQU   11
LNKREG   EQU   11
TCBREG   EQU   12
BASE2    EQU   13
RETREG   EQU   14
XREG     EQU   15
         EJECT
*                             FLAG MASKS
RWUNL    EQU   X'0F'                   REWIND & UNLOAD OP CODE (TAPE)
SUPPL    EQU   X'20'                   SUPPRESS WRONG LENGTH MASK
MISCMSK  EQU   X'3F'                   CHAN ERROR, ETC.
PCIFLAG  EQU   X'80'                   CCW USAGE INDICATOR
WRITECOD EQU   X'05'                   WRITE DATA TO D.A. OP CODE
MASK1    EQU   X'68' .                 CCW FLAGS - C.C.,S.L.I.,P.C.I.
MASK2    EQU   X'42'                   IOB FLAG MASK
MASK3    EQU   X'70'                   CCW FLAGS
SUCCESS  EQU   X'7F'                   ECB POST CODE FOR GOOD I/O
XZERO    EQU   X'00'
DARREC   EQU   X'80'                   DAR RECURSION FLAG
UCBREADY EQU   X'40'                   UCB READY FLAG
DEVMSKT  EQU   X'80'                   TAPE DEVICE FLAG
UNITCK   EQU   X'02'                   I/O DEVICE ERROR FLAG
SRCHIDEQ EQU   X'31'                   OP CODE FOR SEARCH ID EQUAL CCW
TIC      EQU   X'08'                   OP CODE FOR TRANS. IN CHAN. CCW
NOP      EQU   X'03'                   OP CODE FOR NOP CCW
UNITPXP  EQU   X'01'                   UNIT EXCEPTION FLAG IN CSW
CON2     EQU   X'20'                   SUPPRESS WRONG LENGTH IN CCW
WCKD     EQU   X'1D'                   WRITE COUNT KEY DATA OP CODE
DATACHN  EQU   X'60'                   CCW CHAIN & SLI FLAGS
READ     EQU   X'06'                   READ DATA OP CODE
FOX1     EQU   C'1'
FOX2     EQU   C'2' .                   NO SYS1.DUMP WAS ALLOCATED
FOX3     EQU   C'3'
FOX4     EQU   C'4'
FOX5     EQU   C'5'
FOX6     EQU   C'6'
FOX7     EQU   C'7'
WAIT     EQU   1
R1       EQU   X'01'
RUNMASK  EQU   X'0F'
TAPEMASK EQU   X'F3'
WTM      EQU   X'1F'
IOFLAG   EQU   X'42'
ENDCYL   EQU   X'20'
NOPCICC  EQU   X'B7' .                  FOR LAST WRITE
MTBIT    EQU   X'80'
SYSERTNS EQU   X'0C'
ZERO     EQU   0
INDEX4   EQU   4
COUNT    EQU   8
ESANDX   EQU   96
L4       EQU   4
L5       EQU   5
L2       EQU   2
ESAFLG   EQU   104
ESAHICNT EQU   100
L3       EQU   3
PARMREG  EQU   1
L9       EQU   9
C113     EQU   113
C124     EQU   124                     CONSTANT OF 124
C128     EQU   128                     CONSTANT OF 128
C132     EQU   132                     CONSTANT OF 132
C136     EQU   136                     CONSTANT OF 136
LEN8     EQU   8
ESAADR   EQU   98
K1       EQU   1
K32      EQU   32
ESACNT   EQU   97
COUNT2   EQU   16
WTO      EQU   35
MSGLOC   EQU   88
DARPTR   EQU   72
         EJECT
*                        CONTROL BLOCK DISPLACEMENTS
UCBFL1   EQU   6
UCBTYP   EQU   16
DEVTYPE  EQU   18
         EJECT
*
*                   WRITE DUMP SUBROUTINE
*
&NAME    EQU   *
         L     DARREG,CVTDAR           ADDRESS I/O CONTROL BLOCK
*                                           COMPLEX SET UP BY NIP
         USING DARSECT,DARREG          BASE TO ADDRESS C.B. COMPLEX
         L     UCBREG,DARUCBAD .       GET UCB ADDR OF SYS1.DUMP DEVICE
         BAL   XRET2,IOBFIX .          REFRESH IOB FIELDS
* LAST 5 WORDS IN SVRB TO BE USED AS I/O APP. VECTOR TABLE
         LA    WORK,C124(SVRBREG) .    GET APP. TAB. ADDR.
         ST    WORK,RBEXSAVE .         TEMP STORAGE
         MVC   DARIOAPT(L3),RBEXSAVE+K1 TO MOVE INTO CONT. BLK.
         LA    WORK,CVTBRET            GET ADDR OF BR14 INSTR IN CVT
         ST    WORK,C124(SVRBREG) .    DUMMY END OF EXTENT APP.
         ST    WORK,C128(SVRBREG) .    DUMMY SIO APPENDAGE
         MVC   C136(LEN8,SVRBREG),C124(SVRBREG)
*                                      DUMMY CE AND ABNORMAL END APP.
         AIF   (('&SYS' EQ 'MVT') OR ('&SYS' EQ 'MFT')).DO1
         AGO   .SKIP4
.DO1     ANOP
         L     WORK,CVTBTERM .         GET ADDR OF ABTERM
         USING TERMSECT,WORK .         ADDRESS ABTERM LOCATOR FIELDS
         L     WORK,PCI1 .             GET ADDR OF PCI APPENDAGE RTN
         DROP  WORK
         AGO   .SKIP5
.SKIP4   ANOP
         LA    WORK,PCIAPP .           GET REAL PCI APP. ADDR
.SKIP5   ANOP
         ST    WORK,C132(SVRBREG) .    STORE IN APP. TAB.
*                                      INITIALIZATION COMPLETE
         ST    TCBREG,DARTCBSV .       SAVE THE TCB ADDRESS
         TM    DEVTYPE(UCBREG),DEVMSKT IS DEVICE TYPE TAPE
         BO    DOTAPE .                 IF TAPE, BRANCH
* DEVICE IS DIRECT ACCESS - INITIALIZE CONTROL BLOCKS
         EJECT
* INITIALIZE 1ST SET OF CCW'S FOR READ
         MVI   DARCCW3,READ .           SET OP CODE TO READ
         MVC   CCW3FLG(L4),CON1 .       SET FLAGS FOR READ
         MVI   DARCCW4,NOP .            SET OP CODE FOR NOP
         MVI   CCW4FLG,CON2 .           ADJUST FLAGS
         MVI   CCW4CNT,READ .          SET COUNT TO POS NO.
         BAL   XRET,DOEXCP .            GO READ DATA
         TM    CSWSTAT1,UNITPXP .       DID UNIT EXCEPTION RESULT FROM
*                                      READ. (IF DATA SET IS AVAILABLE,
*                                      THE FIRST RECORD WILL BE AN EOF
*                                      CAUSING A UNIT EXCEPTION).
         MVI   NUMBER,FOX2 .           SET MSG NUMBER
         MVI   CODENO,FOX1 .           SET MSG ID
         BZ    DUMP .                  NO, DATA SET FULL
 EJECT
* INIT CCW TO REWRITE 1ST FORMAT RECORD
* SEARCH & TIC REMAIN THE SAME FOR THIS WRITE
         MVC   DARVOID1(L5),SEARCHAD .  GET CCHHR FOR COUNT FIELD
         MVI   RECDNO,XZERO .           SEARCH RECORD = R0
         MVI   KEY,XZERO .              ZERO KEY
         MVC   DATALNGH(L2),DARRSIZE .  DATA LENGTH = TRACK SIZE
         LA    WORK,DARVOID1 .         GET WORK AREA ADDR
         ST    WORK,DARCCW3 .           CCW POINTS TO WORK AREA
         MVI   DARCCW3,WCKD .           OP CODE FOR WRITE CT,KEY,DATA
         LH    WORK,DARRSIZE .          GET RECORD SIZE
         LA    WORK,COUNT(WORK) .       ADD 8 - COUNT FIELD SIZE
         STH   WORK,CCW3CNT .           SET COUNT
         MVI   CCW3FLG,DATACHN .        SET FLAGS
* NOP CCW OK FROM LAST EXCP
         BAL   XRET,DOEXCP              WRITE COUNT,KEY,DATA
         TM    CSWSTAT1,UNITCK .        SEE IF UNIT CHECK OCCURED
         MVI   CODENO,FOX2 .           SET MSG ID
         BO    DUMP .                   GO IF UNIT CHECK
         TM    CSWSTAT2,MISCMSK .       SEE IF CHANNEL OR ANOTHER ERROR
         BM    DUMP .                  IF SO, GO PRINT MSG.
         LA    WORK,CEAPP .            GET CHAN. END APP. ADDR.
         ST    WORK,C136(SVRBREG) .    ADJUST APP. VECTOR TAB. TO
*                                      POINT TO PROPER CE APP ROUTINE
         AIF   (('&SYS' EQ 'PCP') OR ('&SYS' EQ 'MFT')).SKIP10
         ST    WORK,C140(SVRBREG) .    SET ADDR OF ABNORMAL END APP.
C140     EQU   140
.SKIP10  ANOP
         BAL   XRET,FIXAREA .           GO SET UP TO WRITE CORE
         OI    ESAFLG(SVRBREG),PCIFLAG .SET INDICATOR FOR PCI
* INITIALIZE FIRST SET OF CHAN PGMS TO  WRITE DATA
         MVI   RECDNO,R1 .              SET SEARCH ARGUMENT (R1)
         XC    DARCCW3,DARCCW3 .        SET DATA ADDR TO LOC 0
         MVI   DARCCW3,WRITECOD .       SET OP CODE FOR WRITE DATA
         MVI   CCW3FLG,MASK1 .          SET FLAGS - CC,PCI, SLI
         MVI   CCW7FLG,MASK1 .          REFRESH FLAGS
         MVC   CCW3CNT(L2),DARRSIZE .   SET COUNT
         MVC   CCW7CNT(L2),DARRSIZE .   SET COUNT IN CASE LAST PASS HAD
*                                           A SHORT RECORD
         LA    WORK,DARCCW5 .          SET TIC
         ST    WORK,DARCCW4 .               CCW
         MVI   DARCCW4,TIC .           SET OP CODE FOR TIC
         MVI   CCW4FLG,DATACHN .        SET CCW FLAGS
         AIF   ('&SYS' EQ 'PCP').SKIPER                           M3240
         TM    TCBDAR,EDAR .            Q.SURPRESS ERPS           M3240
         BO    NODERP .                 YES-BRANCH                M3240
.SKIPER  ANOP                                                     M3240
         MVI   DARERCTL,XZERO .        ALLOW USE OF SYS ERROR RTNS
NODERP   EQU   * .                                                M3240
         BAL   XRET,DOEXCP .            WRITE DATA
         MVI   DARERCTL,SYSERTNS .     PROHIBIT USE OF SYS ERROR RTNS
         MVC   SEARCHAD(L4),DARCYLST .  REFRESH START ADDR OF DATA SET
         MVC   SEEKAD(L4),DARCYLST .    REFRESH IOB SEEK ADDRESS
         MVI   DARCCW1,SRCHIDEQ .      REFRESH SEARCH CCW (NO M-T)
         CLI   DARECB,SUCCESS .         SEE IF I/O WAS GOOD
         MVI   NUMBER,FOX3 .           SET MSG CODE NO
         MVI   CODENO,FOX1 .           SET MSG ID
         BE    GOODDUMP .               DUMP WAS WRITTEN CORRECTLY
DUMPENT1 EQU   *
         MVI   NUMBER,FOX2 .           RESET MESSAGE NO
         EJECT
DUMPFAIL EQU   *
         MVI   CODENO,FOX3 .           SET MSG ID
DUMP     EQU   *
         MVC   STATUSG(COUNT),STATUSB . SET MESSAGE TEXT
GOODDUMP EQU   *
         L     TCBREG,DARTCBSV .       RESTORE TCB ADDR
DUMPENT2 EQU   *
         MVC   C88(MSGLEN1,SVRBREG),MSGCON MOVE IN MSG
C88      EQU   88
         MVC   C100(LEN17,SVRBREG),C99(SVRBREG)    BLANK OUT
*                                      JOBNAME/STEPNAME IN MESSAGE
C109     EQU   109
C100     EQU   100
C99      EQU   99
         AIF   ('&SYS' EQ 'MVT').SKTIOT                           M3355
         TM    TCBCMP,TCBIND .          Q. TCBTIOT VALID          M3355
         BO    NONAME .                 NO-BRANCH                 M3355
TCBIND   EQU   X'02' .                  INDICATIVE DUMP BIT       M3355
.SKTIOT  ANOP                                                     M3355
         L     WORK,TCBTIO             GET TIOT ADDR
         LTR   WORK,WORK .             IS THERE A TIOT FOR THIS TASK
         BZ    NONAME                  NO, BRANCH TO FIX MSG
         MVC   C100(LNAMES,SVRBREG),ZERO(WORK) PUT IN JOBNAME/STEP-
         MVC   C109(LNAMES,SVRBREG),LEN8(WORK)  NAME INTO MSG
NONAME   EQU   *
         LA    PARMREG,C88(SVRBREG) .  SET PTR TO MSG FOR WTO
         AIF   ('&SYS' EQ 'MVT').SKIPP
         TM    TCBFLGS,STEAL           HAS CORE BEEN STOLEN TO PROCESS
*                                      ABEND
STEAL    EQU   X'02'
         BCR   1,RETREG                YES, SKIP WTO
.SKIPP   ANOP
         SVC   WTO .                   WRITE MESSAGE TO CONSOLE
BR14     BR    RETREG .                RETURN
MSGCON   DC    AL2(MSGLEN)             OVERALL LENGTH OF MESSAGE
         DC    X'8000'
MSGCODE  DC    C'IEA021I '             MSG CODE NUMBER
STATUSB  DC    C'FAILED   ' FAILURE PORTION OF MSG
STATUSA  DC    C'BYPASSED'             DUMP SUBROUTINE BYPASS
         DC    C' CORE IMAGE '         MSG CONSTANT
STATUSG  DC    C'COMPLETE '            SUCCESS PART OF MSG
         DC    C'-'
CODENO   DC    C'1'
MSGEND   EQU   *
         DC    X'10008000' .           MCS - ROUTING CODE, DESCRIPTOR
*                                      CODE
MSGEND1  EQU   *
MSGLEN1  EQU   MSGEND1-MSGCON
ONE      EQU   1
C92      EQU   92
C104     EQU   104
C103     EQU   103
LEN17    EQU   17
LNAMES   EQU   8 .                     LENGTH OF JOB AND STEP NAMES
MSGLEN   EQU   MSGEND-MSGCON           MESSAGE LENGTH
NUMBER   EQU   MSGCODE+5
         EJECT
DOTAPE   DS    0H
         LA    WORK,DARCCW3 .          GET TAPE CCW ADDR
         ST    WORK,DARCCWAD .          STORE IN IOB
         MVC   DARRSIZE(L2),CCW3CNT .  INIT RECORD SIZE FIELD
         BAL   XRET,FIXAREA .           SET UP COUNTERS
         AIF   ('&SYS' EQ 'PCP').SKIPER2                          M3240
         TM    TCBDAR,EDAR .            Q.SURPRESS ERPS           M3240
         BO    NOTERP .                 YES-BRANCH                M3240
.SKIPER2 ANOP                                                     M3240
         MVI   DARERCTL,XZERO .        ALLOW USE OF SYS ERR RTNS  M3240
NOTERP   EQU   * .                                                M3240
         BAL   XRET,TAPEEXCP .          WRITE CORE
         CLI   DARECB,SUCCESS .         SEE IF I/O WAS SUCCESSFUL
         BNE   RUN .                     SET UP FAIL MSG          M3240
         CLC   ESANDX(L4,SVRBREG),ESAHICNT(SVRBREG) SEE IF ALL WRITTEN
         BE    DUMPRAN .                  DONE, GO CLEAN UP       M3240
         AIF   (('&SYS' EQ 'MVT') OR ('&SYS' EQ 'MFT')).DO2
         AGO   .SKIP6
.DO2     ANOP
         L     BASE2,CVTBTERM .        GET ADDR OF ABTERM
         USING TERMSECT,BASE2 .        ADDRESS ABTERM LOCATOR FIELDS
         L     WORK,PCI2 .             SET BRANCH REG TO UPDATE RTN
         L     BASE2,PCI1 .            SET BASE REG FOR UPDATE RTN
         DROP  BASE2
         LA    BASE2,L2(BASE2) .       BUMP PAST 1ST BALR INSTR
         BALR  LNKREG,WORK .           LINK TO UPDATE RTN
         AGO   .SKIP7
.SKIP6   ANOP
         LA    BASE2,PCIAPP2 .          SET UP SUBROUTINE BASE REG
         BAL   LNKREG,UPDATE .         USE SUB RTN TO UPDATE CTR
.SKIP7   ANOP
         B     TAPEEXCP .              DO NEXT WRITE - RET REG STILL OK
RUN      EQU   *
         MVC   CCW3CNT(L2),DARRSIZE .  REFRESH COUNT
         XC    CCW3ADR(L3),CCW3ADR .    REFRESH WRITE ADDR TO ZERO
         LA    WORK,TAPECCW .          SET IOB TO REWIND/UNLOAD CCW
         ST    WORK,DARCCWAD .          SET IOB CCW PTR
         MVI   TAPECCW,WTM .           SET OP CODE FOR WRITE TAPE MARK
         MVI   DARTMODE,WTM .          SET MODE CODE IN CONT BLOCK
         BAL   XRET,TAPEEXCP .         WRITE TAPE MARK
         MVI   TAPECCW,RUNMASK .       SET FOR REWIND/UNLOAD
         MVI   DARTMODE,RUNMASK .      SET MODE BITS FOR RUN
         BAL   XRET,TAPEEXCP .         DO REWIND/UNLOAD
         AIF   ('&SYS' EQ 'PCP').SKIPER3                          M3240
         MVI   DARERCTL,SYSERTNS .      REFRESH ERR FLAGS         M3240
.SKIPER3 ANOP                                                     M3240
         MVI   DARTMODE,TAPEMASK .     RESET MODE BITS FOR WRITE
         CLI   NUMBER,FOX3 .            Q. GOOD DUMP              M3240
         BE    GOODDUMP .               YES-WRITE SUCCESS MESSAGE M3240
         B     DUMPENT1 .               DUMP FAILED               M3240
DUMPRAN  MVI   NUMBER,FOX3 .           SET SUCCESS MSG            M3240
         MVI   CODENO,FOX1 .           SET MSG ID
         B     RUN .                    GO CLEAN UP               M3240
CON1     DC    X'70000005' .           CCW CONSTANT               M3355
         DS    0D
TAPECCW  EQU   *
         DC    X'0F' .                 REWIND/UNLOAD COMMAND
         DC    AL3(0) .                DUMMY DATA ADDR
         DC    X'2000'                 SUPPRESS INCORRECT LENGTH
         DC    H'0'
         TITLE 'IGC0801C - COMMON SUBROUTINES'
DOEXCP   EQU   *
         LA    WORK,DARCCW1 .          GET CHAN PGM ADDR
         ST    WORK,DARCCWAD .         STORE IN IOB
         MVI   DARIOBF1,IOFLAG .        HOUSEKEEP IO FLAGS
TAPEEXCP EQU   *
         LA    PARMREG,DARIOB .         GET IOB ADDR FOR EXCP
         MVI   DARECB,XZERO .           CLEAR ECB
         SVC   ZERO .                   ISSUE EXCP
         LA    PARMREG,DARECB .        GET ECB ADDR
         LA    ZERO,K1(ZERO) .         SET COUNT TO ONE
         SVC   WAIT .                  WAIT FOR I/O TO CPT.
         SSM   DISABLE .               PREVENT INTERRUPTS
         BR    XRET .                   RETURN TO CALLER
FIXAREA  EQU   *
         XC    ESANDX(L9,SVRBREG),ESANDX(SVRBREG) . CLEAR WORK AREA
         MVC   ESAADR(L2,SVRBREG),DARRSIZE . SET UP FOR SECOND WRITE
         MVC   ESAHICNT(L4,SVRBREG),CVTMZ00 . SAVE HI ADDR IN MACHINE
         AIF   ('&SYS' NE 'MVT').SKIP1
         CLI   CVTDCB,M65MP .          IS THIS MP65
         BCR   NOTEQ,XRET .            NOT MP, RETURN
         OI    ESAHICNT+L2(SVRBREG),FOXS IF THIS IS MP65, THE HI
*                                      ADDR IN THE CVT WILL BE LESS THE
*                                      SECOND PREFIX AREA. THIS OR WILL
*                                      CONVERT THE ADDR TO A THE REAL
*                                      HI MACH ADDR.
M65MP    EQU   X'14' .                 M65MP MODE MASK
FOXS     EQU   X'FF'
NOTEQ    EQU   7
.SKIP1   ANOP
         BR    XRET .                   RETURN TO CALLER
         EJECT
*                             CONSTANTS
DISABLE  EQU   CON1+1
 TITLE 'IGC0801C - CHAN. END / ABNORMAL END APPENDAGE ROUTINE'
         DROP BASEREG
CEAPP    DS    0H
CECVT    EQU   11
CESVRB   EQU   12
CEBASE   EQU   13
CEDAR    EQU   DARREG
         BALR  CEBASE,ZERO .            SET UP ADDRESSABILITY
         USING *,CEBASE .              FOR SUBROUTINE
         L     CECVT,CVTPTR .           GET CVT ADDR
         L     CEDAR,DARPTR(CECVT) .   GET CONTROL BLOCK ADDR
         L     CESVRB,DARTCBSV .       GET THE ACTIVE TCB ADDR
         L     CESVRB,ZERO(CESVRB) .    GET SVRB ADDRESS
         AIF   (('&SYS' EQ 'PCP') OR ('&SYS' EQ 'MFT')).SKIP11
         TM    DARCSW+L3,UNITCK .      HAS UNIT CHECK OCCURRED
         BZ    TSTCORE .               NO, TREAT AS CHAN. END
         TM    DARIOBS2,ENDCYL .       HAS END OF CYLINDER BEEN REACHED
         BCR   NOENDCYL,RETREG .       NOT END OF CYL - NO RESTART
NOENDCYL EQU   8
         NI    DARIOBF1,NOEXCP .       TURN OFF EXCEPTION FLAG
NOEXCP   EQU   X'FB'
         L     CECVT,DARUCBAD .        ADDRESS UCB FOR SYS1.DUMP
         MVC   UCBCCHH(L4,CECVT),DARVOID1 UPDATE UCB CCHH FOR RESTART
UCBCCHH  EQU   51
         B     IOBCCHH .               UPDATE IOB CCHH FOR RESTART.
.SKIP11  ANOP
TSTCORE  EQU   *
         CLC   ESANDX(L4,CESVRB),ESAHICNT(CESVRB) SEE IF ALL WRITTEN
         BCR   COUNT,RETREG .           YES, RETURN TO IOS
IOBCCHH  EQU   *
         ST    WORK,DARSPARE .         SAVE IOS INFO
         LA    WORK,DARCCW5 .          GET ADDR OF CHAN PGM NO 2
         TM    ESAFLG(CESVRB),PCIFLAG . SEE IF FIRST CP IS IN USE
         BZ    STORECCW .              NO, SET CCW TO POINT TO CCW1
         LA    WORK,DARCCW1 .          GET ADDR OF CHAN PGM NO 1
STORECCW EQU   *
         ST    WORK,DARCCWAD .         SET IOB TO APPROPRIATE CP
         NI    ZERO(WORK),SUCCESS .    PREVENT MULTI TRK SEARCH
         L     WORK,DARSPARE .         RESTORE IOS INFO
         TM    DARIOBS2,ENDCYL .       END OF CYLINDER
         BZ    GOON .                  SKIP IOB CCHH UPDATE
         MVC   SEEKAD(L4),DARVOID1 .    UPDATE IOB CCHH PTR FOR RESTART
*                                      SYSTEM TO DO SEEK TO NEXT CYL
GOON     EQU   *
         LR    CECVT,XRET2 .           SAVE IOS INFO
         BAL   XRET2,IOBFIX .          REFRESH IOB FIELDS
         LR    XRET2,CECVT .           RESTORE IOS INFO
         B     COUNT(RETREG) .          RETURN FOR RESTART
IOBFIX   EQU   *
         MVI   DARIOBF1,MASK2 .        RESET FLAGS
         XC    DARIOBF2(L3),DARIOBF2 . CLEAR FLAGS2 AND SENSE FLAGS
         XC    DARIOBF3(COUNT),DARIOBF3  CLEAR FLAG3 AND CSW FIELDS
         XC    ERRCT(L2),ERRCT .       ZERO ERROR COUNT FIELD
         BR    XRET2 .                 RETURN
         DROP  CEBASE
         AIF   (('&SYS' EQ 'MVT') OR ('&SYS' EQ 'MFT')).SKIP8
         TITLE 'IGC0801C - PROGRAM CONTROLLED INTERRUPT ROUTINE'
PCIAPP   EQU   *
APPBASE  EQU   13
WORK2    EQU   12
         BALR  APPBASE,ZERO .          ESTABLISH ADDRESSABITY
         USING *,APPBASE .             SET BASE REG
PCIAPP2  EQU   *
         L     DARREG,CVTPTR .         GET CVT ADDR
         L     DARREG,DARPTR(DARREG) . GET CONTROL BLOCK PTR
         L     SVRBREG,DARTCBSV .      GET THE ACTIVE TCB ADDR
         L     SVRBREG,ZERO(SVRBREG) .  GET THIS RTNS SVRB ADDR
TEST1    EQU   *
         MVC   SEEKAD(L4),DARVOID1 .    UPDATE SEEK ADDR IN IOB
         OI    DARCCW1,MTBIT .         MAKE SEARCH FOR MULTI-TRACK
         IC    WORK2,HEADNUM .          GET HEAD NUMBER
         LA    WORK2,K1(WORK2) .        ADD ONE TO GET NEXT HEAD
         STC   WORK2,HEADNUM .          RESTORE
         CLC   TRKCNT(L2),DARNOTRK .    SEE IF LAST TRK ON CYL
         BNE   SETIOB .                NOT LAST TRK
SETCYL   EQU   *
         MVI   HEADNUM,XZERO .          SET HEAD TO ZERO
         LH    WORK2,DARVOID1 .        GET CYL NO.
         LA    WORK2,K1(WORK2) .        UPDATE TO NEXT CYLINDER
         STH   WORK2,DARVOID1 .        RESTORE
SETIOB   EQU   *
         MVC   SEARCHAD(L4),DARVOID1 .  SET SEARCH ADDR (CCHH)
         TM    ESAFLG(SVRBREG),PCIFLAG .SEE IF 1ST SET OF CCW'S IN USE
         BZ    SETUP2 .                NO, BRANCH
         LA    DARREG,K32(DARREG) .     BUMP DARREG TO ACCESS 2ND SET
*                                      OF CCW'S
SETUP2   EQU   *
         XI    ESAFLG(SVRBREG),PCIFLAG .HOUSEKEEP CCW USE FLAG
 EJECT
*
* SUBROUTINE TO UPDATE WRITE COUNTER AND WRITE CCW
*
 SPACE 3
         LA    LNKREG,ESCAPE .         SET RETURN REG
UPDATE   EQU   *
         L     WORK2,ESANDX(SVRBREG) .  GET ADDR OF THIS WRITE
         AH    WORK2,CCW3CNT .          ADD RECORD SIZE
         C     WORK2,ESAHICNT(SVRBREG) .SEE IF ADDR IS VALID
         BNH   OK                      YES, OK, BRANCH
         L     WORK2,ESAHICNT(SVRBREG) .GET HI MACH ADDR
         S     WORK2,ESANDX(SVRBREG) .  SUBTRACT LAST ADDR WRITTEN
*                                      RESULT IS REMAINING BYTES TO
*                                      WRITE
         STH   WORK2,CCW3CNT .         SET COUNT FOR SHORT RECORD
         MVC   CCW3ADR(L3),ESACNT(SVRBREG) SET WRITE ADDR
         MVC   ESANDX(L4,SVRBREG),ESAHICNT(SVRBREG) COUNT'S EQUAL
         NI    CCW3FLG,NOPCICC .        NO COMMAND CHAINING OR PCI
         BR    LNKREG .                RETURN
OK       EQU   *
         MVC   CCW3ADR(L3),ESACNT(SVRBREG) SET ADDR FOR WRITE
         ST    WORK2,ESANDX(SVRBREG) . SAVE ADDR OF WRITE FOR NEXT
*                                           PASS THROUGH
         BR    LNKREG .                RETURN
ESCAPE   EQU   *
         SR    SVRBREG,SVRBREG .        CLEAR FOR IOS
         BR    RETREG .                RETURN TO IOS
.SKIP8   ANOP
         TITLE 'IGC0801C - DSECT''S, EQUATES, ETC.'
         AIF   ('&SYS' NE 'MVT').SKIP9
TERMSECT DSECT
* MAPS THE LOCATOR FIELDS IN ABTERM - MVT
         DS    D .                     ABTERM INSTRS
PCI1     DS    AL4 .                   DAR PCI APPENDAGE ADDR
PCI2     DS    AL4 .                   DAR TAPE CTR UPDATE PTR
.SKIP9   ANOP
         AIF   ('&SYS' NE 'MFT').SKIP2
TERMSECT DSECT
* MAPS THE LOCATOR FIELDS IN ABTERM - MFT
         DS    D .                     ABTERM INSTRS
         DS    AL4 .                   IEEMSIRB
         DS    AL4 .                   IEA0EQ01
         DS    AL4 .                   LEQC
         DS    AL4 .                   TRSTOPER
PCI1     DS    AL4 .                   DAR - PCI APP RTN
PCI2     DS    AL4 .                   DAR - TAPE UPDATE RTN
.SKIP2   ANOP
 DARMAC
         MEND
