         MACRO
         IEAQAM &PA,&TSO=                                         20021
         LCLB  &MULTIPR
.*2524                                                             MP1A
.*719300,719600                                                  A23919
.*452000                                                     AD  A43311
.*731500,732000,732500,733000,733500,734000,734500           AD  A58233
&MULTIPR SETB  (T'&PA EQ 'O')
         AIF   ('&TSO' NE 'YES').NOTSO1                           20021
         AIF   (&MULTIPR EQ 0).MPTSO                              21008
  TITLE  'ROUTINE NAME - PROLOG/ABTERM. MODULE NAME - IKJEAAB0'   20021
*  ROUTINE NAME - PROLOG/ABTERM. MODULE NAME - IKJEAAB0           20021
         AGO   .MULTIB                                            20021
.MPTSO   ANOP                                                     21008
  TITLE 'ROUTINE NAME - PROLOG/ABTERM. MODULE NAME - IKJEAAB1'    21008
*  ROUTINE NAME - PROLOG/ABTERM. MODULE NAME - IKJEAAB1           21008
         AGO   .MULTIB                                            21008
.NOTSO1  ANOP                                                     20021
         AIF   (&MULTIPR EQ 0).MULTIA
         TITLE 'ROUTINE NAME - PROLOG/ABTERM. MODULE NAME - IEAQAB00'
*  ROUTINE NAME - PROLOG/ABTERM. MODULE NAME - IEAQAB00
         AGO   .MULTIB
.MULTIA  ANOP
         TITLE 'ROUTINE NAME - PROLOG/ABTERM. MODULE NAME - IEAQABMP'
*  ROUTINE NAME - PROLOG/ABTERM. MODULE NAME - IEAQABMP
.MULTIB  ANOP
***********************************************************************
*
* ROUTINE NAME - IEA0PL00, PROLOGUE TO ABTERM.
*
* CHANGE LEVEL = 0.
*
* FUNCTIONS - 1. ESTABLISHES INTERFACE BETWEEN PROGRAM CHECK FIRST
*                LEVEL INTERRUPT HANDLER AND ABTERM WHENEVER THE
*                PROGRAM INTERRUPTION OCCURS IN SUPERVISORY CODE, A
*                PIE IS NOT SPECIFIED, THE PICA IS NOT IN EFFECT OR
*                IS IN PROCESS, OR THE INTERRUPTION TYPE IS NOT
*                SPECIFIED TO BE HANDLED.
*
*             2. DETERMINES THE TASK WITH WHICH THE PROGRAM INTERRUPT
*                IS ASSOCIATED, SETS UP THE ABTERM LINKAGE, AND
*                BRANCHES TO THE ABTERM ROUTINE.
*
*                A. IF A PROGRAM CHECK OCCURRED IN THE           A24739
*                   IO FIRST LEVEL INTERRUPT HANDLER OR IN       A24739
*                   SVC 0 OR SVC 15,PROLOGUE BRANCHES TO         A24739
*                   THE IOS PROGRAM CHECK HANDLER.               A24739
*
*                B. IF THE PROGRAM CHECK OCCURRED IN A TYPE 1 SVC
*                   ROUTINE. PROLOGUE LOADS PARAMETER REGISTER 0 WITH
*                   THE TCB ADDRESS OF THE TASK WHICH WAS LAST
*                   DISPATCHED, LOADS PARAMETER REGISTER 1 WITH A
*                   COMPLETION CODE OF X'0F2', AND SETS THE
*                   RETURN ADDRESS FOR ABTERM TO TYPE 1 EXIT IN THE
*                   SVC FIRST LEVEL INTERRUPT HANDLER.
*
*                C. OTHERWISE, PROLOGUE LOADS PARAMETER REGISTER 0
*                   WITH THE TCB ADDRESS OF THE TASK WHICH WAS LAST
*                   DISPATCHED, MOVES THE PROGRAM INTERRUPT OLD PSW
*                   TO THE RESUME PSW SLOT IN THE TOP RB OF THE
*                   TASK, LOADS PARAMETER REGISTER 1 WITH A
*                   COMPLETION CODE CONSISTING OF THE INTERRUPTION
*                   TYPE PLUS A CONSTANT OF X'0C', AND SETS THE
*                   RETURN ADDRESS FOR ABTERM TO THE DISPATCHER.
*
*                  NOTE - IF THE INTERRUPT WAS IMPRECISE, THE    A36479
*                  USER COMP CODE FIELD WILL CONTAIN BITS 16 TO  A36479
*                  27 OF THE PROG OLD PSW.                       A36479
*
*                D. IN ANY CASE, PROLOGUE ADDS THE DUMP OPTION
*                   FOR ABEND TO THE COMPLETION CODE IN PARAMETER
*                   REGISTER 1, SHIFTS THE PARAMETERS, AND BRANCHES
*                   TO THE NORMAL ENTRY POINT OF ABTERM, IEA0AB00.
*
* ENTRY POINT NAMES - IEA0PL00.
*
* CONTAINED IN MODULE - IEAQAB00, RESIDENT ABNORMAL TERMINATION MODULE.
*
* ATTRIBUTES - RESIDENT, SUPERVISOR STATE, READ-ONLY, REENTRANT.
*
* APPLICABILITY - OPTION 4 SYSTEMS ONLY.
*
* EXTERNAL REFERENCES - 1. IORGSW - SWITCH IN I/O FLIH, TESTED.
*
*                       2. DISMISS - RETURN POINT IN I/O FLIH.
*
*                       3. IEATYPE1 - TYPE 1 SVC SWITCH, TESTED.
*
*                       4. IEA0XE00 - TYPE 1 EXIT ROUTINE ADDRESS.
*
* SVC USAGE - NONE.
*
* INPUT - NONE.
*
* OUTPUT - NONE.
*
* ENTRY POINTS - 1. THE CURRENT PSW MUST BE
*
*                   A. DISABLED FOR ALL MASKABLE INTERRUPTS
*                      EXCEPT MACHINE CHECK.
*
*                   B. UNDER SUPERVISOR PROTECTION KEY.
*
*                   C. IN SUPERVISOR MODE.
*
*                2. THE PROGRAM INTERRUPT OLD PSW MUST NOT
*                   HAVE BEEN MODIFIED
*
*                3. WHEN THE PROGRAM CHECK HAS OCCURRED IN IOS,
*                   REGISTER 1 CONTAINS THE ADDRESS OF A 16*
*                   FROM WHICH THE TCB ADDRESS CAN BE OBTAINED.
*
* EXIT POINTS -  1. TO ABTERM IN ORDER TO SCHEDULE ABEND FOR THE
*                   TASK WITH WHICH THE PROGRAM INTERRUPTION
*                   OCCURRED.
*
*                2. THE CURRENT PSW IS
*
*                   A. DISABLED FOR ALL MASKABLE INTERRUPTS
*                      EXCEPT MACHINE CHECK.
*
*                   B. UNDER SUPERVISOR PROTECTION KEY.
*
*                   C. IN SUPERVISOR MODE.
*
*                3. REGISTER 0 CONTAINS THE TCB ADDRESS OF THE TASK
*                   TO BE SCHEDULED FOR ABNORMAL TERMINATION.
*
*                4. REGISTER 1 CONTAINS A COMPLETION CODE.
*
*                5. REGISTER 14 CONTAINS AN ADDRESS TO WHICH ABTERM
*                   WILL RETURN CONTROL.
*
* ERROR EXIT POINTS - NONE.
*
* TABLES AND CONTROL BLOCKS REFERENCED -
*
*                1. TCB - TASK CONTROL BLOCK
*
*                   A. TCBRBP - POINTER TO TOP RB ON TASK, ACCESSED.
*
*                   B. TCBGRS - GENERAL REGISTER SAVE AREA, CONTENTS
*                              OF REGISTERS 0-15 MOVED HERE FROM
*                              PROGRAM INTERRUPT SAVE AREA.
*
*                2. RB - REQUEST BLOCK
*
*                   A. RBOPSW - RESUME PSW SLOT, PROGRAM INTERRUPT
*                               OLD PSW STORED.
*
*                3. 16* IQE
*
*                   A. TCB POINTER, ACCESSED.
*
*                4. CVT - COMMUNICATION VECTOR TABLE
*
*                   A. CVT0DS - POINTER TO ENTRY POINT OF DISPATCHER.
*
*                   B. CVTTCBP - POINTER TO 'NEW' AND 'OLD' POINTERS.
*
* LIST ORIGINS, TABLES, AND CONTROL BLOCKS INCLUDED - NONE.
*
* RESTRICTIONS ON USE OF ROUTINE - NONE.
*
* NOTES -
*
*         THIS ROUTINE IS NOT CHARACTER CODE DEPENDENT.
*                                                                     *
*
         EJECT
***********************************************************************
*
* ROUTINE NAME - IEA0AB00, ABTERM.
*
* CHANGE LEVEL = 0.
*
* FUNCTION - 1. SCHEDULES A TASK FOR ABNORMAL TERMINATION BY ABEND.
*               ABTERM IS DESIGNED FOR USE BY TYPE 1 SVC ROUTINES
*               AND BY SUPERVISORY FUNCTIONS WHICH DO NOT OPERATE
*               AS PART OF THE TASK TO BE TERMINATED, E.G., THE
*               INTERRUPT HANDLERS. THESE ROUTINES EITHER DO NOT
*               OR CANNOT ISSUE AN SVC ABEND FOR A TASK DIRECTLY.
*
*            2. PROVIDES AN EDITING FUNCTION AT THE SPECIAL ENTRY
*               FROM TYPE 1 SVC ROUTINES TO OBTAIN AND LOAD INTO
*               PARAMETER REGISTER 0 THE TCB ADDRESS OF THE TASK
*               WHICH WAS LAST DISPATCHED, ADD THE DUMP OPTION TO
*               THE ABEND PARAMETERS, AND POSITION THE COMPLETION
*               CODE IN PARAMETER REGISTER 1.
*
*            3. ABTERM 'SCHEDULES' A TASK FOR ABNORMAL TERMINATION
*               BY DECREMENTING THE WAIT COUNT TO ZERO IN THE TOP
*               RB OF THAT TASK AND BY STORING THE ADDRESS OF AN
*               SVC ABEND INSTRUCTION IN THE CVT IN THE RESUME PSW
*               SLOT OF THE RB SUCH THAT NORMAL OPERATION OF THE
*               DISPATCHER WILL CAUSE THE TASK TO BE ABENDED.
*
*               IF ENTRY TO ABTERM IS FROM A TYPE 1 SVC ROUTINE OR
*               IS DUE TO A PROGRAM CHECK IN A TYPE 1 SVC ROUTINE,
*               ABTERM THEN 'SCHEDULES' ABNORMAL TERMINATION BY
*               STORING THE ADDRESS OF AN SVC ABEND INSTRUCTION IN
*               THE CVT IN THE RIGHT-HALF SVC OLD PSW SUCH THAT
*               WHEN CONTROL IS RETURNED TO THE TYPE 1 EXIT ROUTINE
*               EITHER DIRECTLY OR VIA THE TYPE 1 SVC ROUTINE, THE
*               TASK WILL BE ABENDED.
*
*            4. IN GENERAL, ABTERM SETS ABEND WAIT-STATE
*               NON-DISPATCHABILITY IN THE INCOMPLETE SUBTASKS
*               OF A TASK WHICH IS SCHEDULED FOR ABNORMAL
*               TERMINATION.
*
*            5. IF THE TASK TO BE ABTERMED IS COMPLETE, ABEND IS NOT
*               SCHEDULED. IF THE TASK WAS PREVIOUSLY ABTERMED BUT NOT
*               ABENDED, ABEND IS NOT RE-SCHEDULED. IF THE TASK IS NOT
*               THE JOB STEP TASK AND IS IN AN ABEND WAIT-STATE, ABEND
*               IS NOT SCHEDULED. IF THE TASK IS NOT THE JOB STEP TASK
*               AND IS IN THE PROCESS OF ABENDING, ABEND IS SCHEDULED,
*               BUT THE ORIGINAL ERROR CODE IS RETAINED. IF THE TASK
*               IS NOT COMPLETE, NOT ABTERMED, NOT THE JOB STEP TASK,
*               NOT IN ABEND WAIT-STATE, AND NOT ABENDING, ABEND IS
*               SCHEDULED USING THE GIVEN ERROR CODE.
*
*               IF THE TASK TO BE ABTERMED IS THE JOB STEP TASK AND IS
*               NOT ABENDING, IT IS MADE DISPATCHABLE AND ABEND IS
*               SCHEDULED USING THE GIVEN ERROR CODE. IF THE TASK IS
*               THE JOB STEP TASK AND IS ABENDING AND THE INITIATOR IS
*               NOT THE CALLER OF ABTERM, ABEND IS SCHEDULED, BUT THE
*               ORIGINAL ERROR CODE IS RETAINED.
*
*               IF THE TASK IS THE JOB STEP TASK, IS ABENDING, THE
*               INITIATOR IS THE CALLER, AND A DUMP IS REQUESTED,
*               ABEND IS NOT SCHEDULED.
*
*               IF THE TASK IS THE JOB STEP TASK, IS ABENDING, THE
*               INITIATOR IS THE CALLER, AND A DUMP IS NOT REQUESTED,
*               ABEND IS SCHEDULED.
*
* ENTRY POINT NAMES - 1. IEA0AB00 - NORMAL ENTRY TO ABTERM POINTED
*                                   TO BY CVTBTERM IN THE CVT.
*
*                     2. IEA0AB01 - SPECIAL ENTRY FOR TYPE 1 SVC'S.
*
* CONTAINED IN MODULE - IEAQAB00, RESIDENT ABNORMAL TERMINATION MODULE.
*
* ATTRIBUTES - RESIDENT, SUPERVISOR STATE, SERIALLY REUSABLE.
*
* APPLICABILITY - OPTION 4 SYSTEMS ONLY.
*
* EXTERNAL REFERENCES - 1. IEA0DS02 - ADDRESS OF TASK SWITCHING ROUTINE
*                                     IN THE DISPATCHER.
*
*                       2. IEATYPE1 - TYPE 1 SVC SWITCH, TESTED.
*
* SVC USAGE - NONE.
*
* INPUT - NONE.
*
* OUTPUT - NONE.
*
* ENTRY POINTS - 1. IEA0AB00 - NORMAL ENTRY.
*
*                   A. THE CURRENT PSW MUST BE
*
*                      (1) DISABLED FOR ALL MASKABLE INTERRUPTS
*                          EXCEPT MACHINE CHECK.
*
*                      (2) UNDER SUPERVISOR PROTECTION KEY.
*
*                      (3) IN SUPERVISOR MODE.
*
*                   B. REGISTER 0 MUST CONTAIN THE TCB ADDRESS
*                      OF THE TASK TO BE TERMINATED.
*
*                   C. REGISTER 1 MUST CONTAIN IN THE HIGH-ORDER
*                      12 BITS OF THE LOW-ORDER 24 BITS THE
*                      SYSTEM ERROR CODE.
*
*                   D. REGISTER 14 MUST CONTAIN THE RETURN ADDRESS.
*
*                   E. IF ENTRY IS VIA PROLOGUE DUE TO A PROGRAM
*                      CHECK IN A TYPE 1 SVC ROUTINE, THE SVC OLD
*                      PSW MUST NOT HAVE BEEN ALTERED.
*
*                2. IEA0AB01 - SPECIAL ENTRY FOR TYPE 1 SVC ROUTINES.
*
*                   A. THE CURRENT PSW MUST BE
*
*                      (1) DISABLED FOR ALL MASKABLE INTERRUPTS
*                          EXCEPT MACHINE CHECK.
*
*                      (2) UNDER SUPERVISOR PROTECTION KEY.
*
*                      (3) IN SUPERVISOR MODE.
*
*                   B. REGISTER 1 MUST CONTAIN THE SYSTEM ERROR
*                      CODE IN THE LOW-ORDER 12 BITS.
*
*                   C. THE SVC OLD PSW MUST NOT HAVE BEEN ALTERED.
*
* EXIT POINTS - 1. TO RETURN CONTROL TO THE CALLER OF ABTERM.
*
*               2. THE CURRENT PSW IS
*
*                  A. DISABLED FOR ALL MASKABLE INTERRUPTS
*                     EXCEPT MACHINE CHECK.
*
*                  B. UNDER SUPERVISOR PROTECTION KEY
*
*                  C. IN SUPERVISOR MODE.
*
*               3. REGISTERS 2-14 ARE UNCHANGED.
*
*               4. REGISTERS 0, 1, AND 15 ARE UNPREDICTABLE, EXCEPT
*                  IN THE CASE OF ENTRY FROM OR PROGRAM CHECK IN A
*                  TYPE 1 SVC ROUTINE IN WHICH CASES REGISTERS 0
*                  AND 1 ARE AS THEY WERE AT THE TIME OF THE SVC
*                  INTERRUPTION.
*
* ERROR EXIT POINTS - NONE.
*
* TABLES AND CONTROL BLOCKS REFERENCED -
*
*               1. TCB - TASK CONTROL BLOCK
*
*                  A. TCBRBP - POINTER TO TOP RB ON TASK.
*
*                  B. TCBJSTCB - POINTER TO JOB STEP TCB.
*
*                  C. TCBOTC - POINTER TO MOTHER TCB.
*
*                  D. TCBNTC - POINTER TO SISTER TCB.
*
*                  E. TCBLTC - POINTER TO LAST DAUGHTER TCB.
*
*                  F. TCBGRS - CONTENTS OF REGISTERS 0-15.
*
*                  G. TCBFLGS
*
*                     (1) TCBFC - COMPLETE INDICATOR, TESTED.
*
*                     (2) TCBABTRM - ABTERM INDICATOR, TESTED AND SET.
*
*                     (3) TCBFA - ABEND INDICATOR, TESTED AND RESET.
*
*                     (4) TCBABWF - ABEND WAIT-STATE, TESTED AND SET.
*
*                     (5) TCBFX - PREVENT ASYNCHRONOUS EXITS, SET.
*
*                     (6) TCBOPEN - OPEN ISSUED INDICATOR, RESET.
*
*                     (7) TCBFOINP - OPEN-IN-PROCESS INDICATOR, RESET.
*
*                     (8) ALL DISPATCHABILITY FLAGS, TESTED AND RESET.
*
*                  H. TCBCMP - COMPLETION CODE, SYSTEM ERROR CODE
*                              STORED HERE.
*
*               2. RB - REQUEST BLOCK
*
*                  A. RBABOPSW - RIGHT HALF RBOPSW SAVED.
*
*                  B. RBOPSW - ALTERED TO POINT TO SVC ABEND.
*
*                  C. RBWCSA - RB WAIT COUNT SAVED.
*
*                  D. RBWCF - WAIT COUNT DECREMENTED TO ZERO.
*
*                  E. RBSTAB - STATUS AND ATTRIBUTES, RB TYPE TESTED.
*
*               3. CVT - COMMUNICATION VECTOR TABLE
*
*                  A. CVT0DS - POINTER TO ENTRY TO DISPATCHER.
*
*                  B. CVTQABST - ADDRESS OF SVC ABEND INSTRUCTION.
*
*                  C. CVTTCBP - POINTER TO 'NEW' AND 'OLD' POINTERS.
*
* LIST ORIGINS, TABLES, AND CONTROL BLOCKS INCLUDED - NONE.
*
* RESTRICTIONS ON USE OF ROUTINE - NONE.
*
* NOTES -
*
*         THIS ROUTINE IS NOT CHARACTER CODE DEPENDENT.
*                                                                     *
         EJECT
         ENTRY IEA0PL00                 ENTRY POINT TO PROLOGUE
         ENTRY IEA0AB00                 NORMAL ENTRY TO ABTERM
         ENTRY IEA0AB01                 SPECIAL ENTRY TO ABTERM
         ENTRY DMPPCIAP .                ENTRY TO PCI FOR NIP     20048
         ENTRY DMPCEAPP .                ENTRY TO CE APP FOR NIP  20048
         ENTRY DMPAEAPP .                ENTRY TO AB APP FOR NIP  20048
         EXTRN IECXTRA .                 ENTRY TO TRACE NOP       20048
         EXTRN IORGSW                   SWITCH IN I/O FLIH
         EXTRN DISMISS                  RETURN ADDRESS IN I/O FLIH
         EXTRN IEATYPE1                 TYPE 1 SVC SWITCH
         EXTRN IEA0XE00                 RETURN ADDRESS IN SVC FLIH
         EXTRN IEA0DS02                 ADDR OF TASK SWITCHING ROUTINE
         EXTRN IECCPL00 .                                        A24739
         ENTRY SCEDWAIT                                            SWTD
         EXTRN IEACVT                  CVT ADDRESS.                SWTD
*                                                                     *
***********************************************************************
*                                                                     *
* THE FOLLOWING IS A DUMMY CONTROL SECTION TO REPRESENT THE FORMAT OF *
* THE CVT - COMMUNICATION VECTOR TABLE.                               *
*                                                                     *
***********************************************************************
*                                                                     *
CVTSECT  DSECT
         CVT
         SCBDUMP                                                  20048
         AIF   (&MULTIPR EQ 1).SKIPA
         MPCVT
.SKIPA   ANOP
*                                                                     *
SVCOPSW  EQU   32            SVC OLD PSW                           0539
PIOPSW   EQU   40            PROGRAM INTERRUPT OLD PSW             0539
***********************************************************************
*                                                                     *
* THE FOLLOWING IS A DUMMY CONTROL SECTION TO REPRESENT THE FORMAT OF *
* THE TCB - TASK CONTROL BLOCK.                                       *
*                                                                     *
***********************************************************************
*                                                                     *
TCBSECT  DSECT
TCBRBP   DS    CL4                      POINTER TO TOP RB ON RB QUEUE
TCBPIE   DS    CL4                      ADDR OF PROGRAM INTERRUPT ELM.
TCBDEB   DS    CL4                      ADDR OF LAST DEB ON DEB QUEUE
TCBTIO   DS    CL4                      ADDRESS OF TASK I/O TABLE
TCBCMP   DS    CL4                      TASK COMPLETION CODE
TCBTRN   DS    CL4                      ADDRESS OF TESTRAN CONTROL CORE
TCBMSS   DS    CL4                      ADDR OF LAST SPQE ON MSS QUEUE
TCBPKF   DS    CL1                      TASK PROTECTION KEY
TCBFLGS  DS    CL5                      TASK CONTROL FLAGS
TCBLMP   DS    CL1                      TASK LIMIT PRIORITY
TCBDSP   DS    CL1                      TASK DISPATCHING PRIORITY
TCBLLS   DS    CL4                      PTR TO TASK LOAD LIST ELEMENTS
TCBJLB   DS    CL4                      ADDRESS OF JOB LIBRARY DCB
TCBJPQ   DS    CL4                      PTR TO CONTENT DIRECTORY ENTRYS
TCBGRS   DS    CL64                     CONTENTS OF GENERAL REGISTERS
TCBFSA   DS    CL4                      ADDRESS OF FIRST PP SAVE AREA
TCBTCB   DS    CL4                      PTR TO NEXT TCB ON READY QUEUE
TCBTME   DS    CL4                      ADDRESS OF TIMER QUEUE ELEMENT
TCBJSTCB DS    CL4                      ADDRESS OF JOB STEP TCB
TCBNTC   DS    CL4                      ADDRESS OF NEXT SISTER TCB
TCBOTC   DS    CL4                      ADDRESS OF MOTHER (ORIGIN) TCB
TCBLTC   DS    CL4                      ADDRESS OF LAST DAUGHTER TCB
TCBIQE   DS    CL4                      ADDRESS OF IQE FOR ETXR
TCBECB   DS    CL4                      ADDRESS OF ECB TO BE POSTED
TCBTSFLG DS    CL1                 TIME SHARING FLAGS        AD  A43314
TCBSTPCT DS    CL1                 COUNT OF SETTASK STOPS    AD  A43314
TCBSLP   DS    CL1                 LIMIT PRIORITY OF TS TASK AD  A43314
TCBTSDB  DS    CL1                 DISP PRIORITY OF TS TASK  AD  A43314
TCBPQE   DS    CL4                      POINTER TO PQE FOR THE JOB STEP
TCBAQE   DS    CL4
TCBNSTAE DS    CL4                      ENTRY NEW STAE ROUTINE     STAB
TCBTCT   DS    CL4                                                20048
TCBUSER  DS    CL4                                                20048
TCBDAR   DS    CL1                                                20048
         DS    CL8                                                20048
TCBJSCB  DS    CL3                                                20048
*                                                                     *
***********************************************************************
*                                                                     *
* THE FOLLOWING IS A DUMMY CONTROL SECTION TO REPRESENT THE FORMAT OF *
* THE RB - REQUEST BLOCK.                                             *
*                                                                     *
***********************************************************************
*                                                                     *
RBSECT   DSECT
         DS    CL4
RBABOPSW DS    CL4                      RH RBOPSW SAVED HERE BY ABTERM
RBWCSA   DS    CL1                      WAIT COUNT SAVED HERE BY ABTERM
RBSIZE   DS    CL1                      SIZE OF RB IN DOUBLE-WORDS
RBSTAB   DS    CL2                      STATUS AND ATTRIBUTE FLAGS
         DS    CL4
RBOPSW   DS    CL8                      RESUME PSW SLOT
RBTAWCSA DS    CL4                                                M4412
RBWCF    DS    CL1                      WAIT COUNT
RBLINK   DS    CL3                      POINTER TO NEXT RB ON RB QUEUE
***********************************************************************
*                                                                     *
* THE FOLLOWING ARE REGISTER ASSIGNMENTS FOR PROLOGUE AND ABTERM.     *
*                                                                     *
***********************************************************************
*                                                                     *
PARREG0  EQU   0                        PARAMETER REGISTER 0
PARREG1  EQU   1                        PARAMETER REGISTER 1
WORK     EQU   2                        WORK REGISTER
ABENDPTR EQU   2                        POINTS TO SVC ABEND IN CVT
CVT      EQU   3                        POINTS TO BEGINNING OF CVT
NEW      EQU   4                        POINTS TO 'NEW' AND 'OLD' PTRS
OLD      EQU   4                        POINTS TO LAST DISPATCHED TCB
WORK1    EQU   4                        WORK REG FOR CONDITIONAL  M3806
*                                        FREEMAIN                 M3806
RB       EQU   5                        POINTS TO TOP RB ON TCB
RET      EQU   7                        HOLDS RETURN ADDRESS  IN SCAN
IOREG    EQU   8                        POINTS TO SWITCH IN I/O FLIH
SVCREG   EQU   8                        POINTS TO TYPE 1 SW IN SVC FLIH
INIT     EQU   8                        POINTS TO INITIATOR'S TCB
JOB      EQU   9                        POINTS TO JOB STEP TCB
GIVEN    EQU   10                       POINTS TO TCB OF ABTERMED TASK
SWITCH   EQU   11                       POINTS TO TASK SWITCH ROUTINE
TCB      EQU   11                       POINTS TO SUBJECT TCB IN SCAN
LAST     EQU   12                       USED AS WORK REGISTER IN SCAN
ABTERMR  EQU   15                       BASE REGISTER FOR ABTERM EDIT
SWRET    EQU   14                       HOLDS RETURN ADDR FROM TASK SW
RETREG   EQU   14                       HOLDS RETURN ADDR FROM ABTERM
LNKREG   EQU   15                  BASE REGISTER FOR TASK REMOVEL  MP1A
PLBASE   EQU   15                       BASE REGISTER FOR PROLOGUE
ABBASE   EQU   15                       BASE REGISTER FOR ABTERM
*                                                                     *
***********************************************************************
*                                                                     *
* THE FOLLOWING ARE BIT ASSIGNMENTS FOR PROLOGUE AND ABTERM.          *
*                                                                     *
***********************************************************************
*                                                                     *
ABOFFPON EQU   X'F0'                 PROLOG SWITCH ON
POFFABON EQU   X'0F'                 ABTERM SWITCH ON
IOON     EQU   X'F0'                    INDICATES PROGRAM CHECK IN IOS
TYPE1ON  EQU   X'F0'                    INDICATES PGM CHK IN TYPE 1 SVC
RBFTP    EQU   X'C0'                    USED TO DISTINGUISH RB TYPE
TCBFC    EQU   X'80'                    INDICATES TASK IS COMPLETE
TCBFA    EQU   X'80'                    INDICATES TASK IN TREE ABENDING
TCBABWF  EQU   X'40'                    INDICATES TASK IN ABEOT WAIT
TCBFX    EQU   X'01'                    PREVENTS ASYNCHRONOUS EXITS
TCBABTRM EQU   X'20'                    INDICATES TASK IS ABTERMED
TCBREC   EQU   X'80'                    VALID ABEND RECURSION
TCBSAVCD EQU   X'0F'                    ASIR RECURSION
TCBFOINP EQU   X'80'                    INDICATES OPEN-IN-PROCESS
SVCCODE  EQU   X'F2'                    ERROR CODE FOR TYPE 1 PGM CHK
DUMPMASK EQU   X'80'                    DUMP REQUEST INDICATOR IN C.C.
ZEROS    EQU   X'00'                    USED TO RESET DISPATCHABILITY
NOTOND   EQU   X'01'  .                 USED TO RESET DISPCHBLTY  M5408
NOTMC    EQU   X'0C'                    USED TO RESET DISPATCHABILITY
STAEREC  EQU   X'80'                   STAE RECURSION FLAG         STAB
TCTCB    EQU   116                                                 SWTD
TCBGTOFM EQU   X'10'         INDICATES A HOOK HAS BEEN ISSUED TO  21014X
                                              FREEZE GTF FOR TASK 21014
FF       EQU   X'FF'               MASK OF ALL ONES               21014
TCBRECDE EQU   TCBSECT+180         RECURSION CONFIGURATION CODE   21016
         EJECT
         AIF   ('&TSO' NE 'YES').NOTSO2                           20021
*
*    EQUATES AND DISPLACEMENTS FOR TSO                            20021
*                                                                 20021
TCBFLGS5 EQU   TCBFLGS+4                                          20021
TCBPNDSP EQU   X'01'                    SECONDARY NONDISP SET     20021
PNDSPOFF EQU   255-TCBPNDSP                                       20021
TCBNDSP2 EQU   TCBNSTAE+14              TSO NON-DISP FLAGS        20021
TIOWAIT  EQU   X'0C'         TASK NON-DISP DUE TO TERM I/O WAIT   20021
TIOOFF   EQU   255-TIOWAIT                                        20021
TCBSTPP  EQU   X'40' .                  STOPPED BY SETTASK        M5412
TCBSCNDY EQU   TCBNSTAE+13    ORIGIN OF 2ND NON-DISP FLAGS        20021
THREE    EQU   3                                                  20021
         EJECT
.NOTSO2  ANOP                                                     20021
*                                                                     *
***********************************************************************
*                                                                     *
* THE FOLLOWING IS A SINGLE CONTROL SECTION WHICH CONTAINS THE        *
* PROLOGUE AND ABTERM ROUTINES.                                       *
*                                                                     *
***********************************************************************
*                                                                     *
IEAQAB00 CSECT
*                                                                     *
         EJECT
***********************************************************************
***********************************************************************
*                                                                     *
* THE FOLLOWING CODE IS THE PROLOGUE TO ABTERM WHICH IS ENTERED FROM  *
* THE PROGRAM CHECK FIRST LEVEL INTERRUPT HANDLER.                    *
*                                                                     *
***********************************************************************
***********************************************************************
*                                                                     *
**************************************************************** A32564
*                                                              * A32564
*        THE FOLLOWING EQUATES ARE USED TO RESTORE REGS        * A32564
*                                                              * A32564
**************************************************************** A32564
REG2     EQU   2                        USED TO RESTORE REGS     A32564
REG13    EQU   13                       USED TO RESTORE REGS     A32564
REG14    EQU   14                       USED TO RESTORE REGS     A32564
*                                                              * A32564
IEA0PL00 BALR  PLBASE,0                 ESTABLISH BASE ADDRESSABILITY
         USING *,PLBASE                 ADDRESSABILITY FOR PROLOGUE
         TM    ABTERMSW,ABOFFPON        Q. PROLOGUE RECURSION     20472
         BC    0,ABRECURS               YES,BR TO CATCH SYS ERR   20472
         TM    ABTERMSW,POFFABON        Q. ABTERM RECURSION       20472
         BC    0,ABRECURS               YES, BR TO CATCH SYS ERR  20472
         OI    ABTERMSW,ABOFFPON        TURN ON PROLOGUE SWITCH   20472
         MVC   16(4),RFSHCVT           REFRESH THE CVT POINTER.    SWTD
         L     CVT,CVTPTR(0)            PICK UP POINTER TO CVT
         USING CVTSECT,CVT
         L     NEW,CVTTCBP              PICK UP POINTER TO 'NEW'
         L     OLD,4(NEW)               GET CURRENT TCB FROM 'OLD'
         L     IOREG,AIORGSW            PICK UP POINTER TO I/O SWITCH
         TM    1(IOREG),IOON            IS PROGRAM CHECK IN IOS?
         BC    7,PCIO                   YES, GO GET TCB ADDR FROM 16*
         LR    PARREG0,OLD              CURRENT TASK IS TO BE ABTERMED
         L     SVCREG,ATYPE1SW          PICK UP PTR TO TYPE 1 SWITCH
         TM    0(SVCREG),TYPE1ON        IS PROGRAM CHECK IN TYPE 1 SVC
         BC    7,PCTYPE1                YES, GO SET UP TYPE 1 ERROR
         USING TCBSECT,OLD
         L     RB,TCBRBP                NO, ACCESS TOP RB ON CURR. TCB
         USING RBSECT,RB
         CR    OLD,RB .                DID WAIT TCB PROG CHECK?   M4440
         BC    0,ABRECURS .            YES. CATCH SYSTEM PROBLEM  M4440
         BNE   NOTWAIT .               NO. CONTINUE PROCESSING    M4440
         MVC   TCBJLB(8),PIOPSW .      SAVE THE PSW IN THE WAIT   M4440
*                                       TCB+X'28' AS A DEBUGGING  M4440
*                                       AID TO SOLVE SYSTEM PROB  M4440
         B     AFARND .                SKIP OTHER PSW MOVE        M4440
NOTWAIT  EQU   *                                                  M4440
         AIF   (&MULTIPR EQ 1).SKIPB
         TM    TCBFLGS+2,TCBABTRM  Q.RECURSION THRU PROLOG         MP1A
         BO    AFARND             YES, PRESERVE RBOPSW             MP1A
.SKIPB   ANOP
         MVC   RBOPSW(8),PIOPSW         MOVE PIOPSW TO RESUME PSW IN RB
AFARND   EQU   *                                                   MP1A
         L     PARREG1,ADPKSAV   GET ADDR OF PROG CHECK SAVE AREA  0539
         MVC   TCBGRS(64),0(PARREG1)   MOVE REGS TO CURRENT TCB    0539
         LA    PARREG1,X'00F'           LOAD CONST TO 'AND' TO INT CODE
         N     PARREG1,PIOPSW           'AND' INTERRUPT CODE TO CONST
         LA    PARREG1,X'0C0'(PARREG1)  ADD CONSTANT FOR PROG. CHECK
         L     RETREG,CVT0DS            SET RETURN ADDR TO DISPATCHER
GOABTERM O     PARREG1,DUMPCODE         ADD DUMP OPTION FOR ABEND
         SLL   PARREG1,12               POSITION PARAMETERS FOR ABEND
         LA    WORK,X'FFF' .            PICK UP IMPRECISE        A36479
         SLL   WORK,4 .                  INTERRUPT CODE FROM     A36479
         N     WORK,PIOPSW .             PROG OLD PSW AND PUT IT A36479
         SRL   WORK,4 .                  IN THE USER COMP CODE   A36479
         OR    PARREG1,WORK .            FIELD (ZERO IF PRECISE) A36479
         LA    ABBASE,IEA0AB00          SET UP NORMAL ENTRY TO ABTERM
         BCR   15,ABBASE                GO TO ABTERM ROUTINE
PCTYPE1  EQU   * .                                               A24739
         CLI   SVCOPSW+3,X'00' .        Q. SVC 0                 A24739
         BE    PCIO .                   YES-BRANCH               A24739
         CLI   SVCOPSW+3,X'0F' .        Q. SVC 15                A24739
         BE    PCIO .                   YES-BRANCH               A24739
         AIF   ('&TSO' NE 'YES').SKIPIO                      AD  A52540
         CLI   SVCOPSW+3,X'5C' .        Q. SVC 92 (TCBEXCP)  AD  A52540
         BE    PCIO .                   YES-RETURN TO IOS    AD  A52540
.SKIPIO  ANOP                                                AD  A52540
         LA    PARREG1,SVCCODE .        GET SVC ABEND CODE       A24739
         L     RETREG,ATYPE1XT          SET RETURN ADDR TO TYPE 1 EXIT
         BC    15,GOABTERM              NOW GO TO ABTERM FOR THIS TASK
PCIO     EQU   * .                                               A24739
         NI    ABTERMSW,POFFABON        SET PROLOGUE SW OFF       20472
         L     ABBASE,IOSPRGCK .        GET ADDRESS OF IOS       A24739
*                                       PROGRAM CHECK HANDLER    A24739
         BR    ABBASE .                 TO IOS                   A24739
         DROP  PLBASE
         AIF   (&MULTIPR EQ 1).SKIPC
         DROP  OLD                                                 MP1A
.SKIPC   ANOP
         EJECT
***********************************************************************
***********************************************************************
*                                                                     *
* THE FOLLOWING CODE IS THE SPECIAL ENTRY TO ABTERM FROM TYPE 1 SVC'S *
*                                                                     *
***********************************************************************
***********************************************************************
*                                                                     *
***********************************************************************
*                                                                     *
* THE FOLLOWING CODE IS BRANCHED TO FROM TYPE 1 SVC ROUTINES WHICH    *
* HAVE DETECTED ERRORS RELATED TO THE CALL OF THE SVC REQUIRING THAT  *
* THE ISSUER OF THE SVC BE ABNORMALLY TERMINATED.  THIS CODE IS       *
* CONSIDERED A SPECIAL ENTRY FROM TYPE 1 SVC'S IN THAT IT PROVIDES AN *
* EDITING FUNCTION PRIOR TO THE MAINSTREAM OF ABTERM PROCESSING AND   *
* IS THUS KNOWN AS THE 'ABTERM EDIT'.                                 *
*                                                                     *
***********************************************************************
*                                                                     *
IEA0AB01 BALR  ABTERMR,0                ESTABLISH BASE ADDRESSABILITY
         USING *,ABTERMR
         LA    OLD,0(0,OLD)        CLEAR HIGH ORDER OF ADDRESS     5756
         LR    PARREG0,OLD              CURRENT TASK IS TO BE ABTERMED
         O     PARREG1,DUMPCODE         ADD DUMP OPTION FOR ABEND
         SLL   PARREG1,12               POSITION PARAMETERS FOR ABEND
         BC    15,IEA0AB00              GO TO MAINSTREAM OF ABTERM
         DROP  ABTERMR
*                                                                     *
***********************************************************************
***********************************************************************
*                                                                     *
* THE FOLLOWING CODE IS THE ABTERM ROUTINE WHICH MAY BE BRANCHED TO   *
* DIRECTLY OR ENTERED VIA PROLOGUE OR SPECIAL TYPE 1 ENTRY.           *
*                                                                     *
***********************************************************************
***********************************************************************
*                                                                     *
ABSAVADR DC    A(ABSAVE)                ADDR OF REGISTER SAVE     20472
*                                        AREA USED BY ABEND1      20472
IEA0AB00 BALR  ABBASE,0                 ESTABLISH BASE ADDRESSABILITY
         USING *,ABBASE
         B     START                   BRANCH AROUND CONSTANTS     SWTD
TRNOP    DC    A(IECXTRA) .             STOP TRACE                20048
         DC    A(DMPTASKW)         ADDR OF TASK DISP/UNDISP RTN   20048
         DC    A(SVC15)                ADDR OF SVC 15 AND 3 INSTRS FOR
*                                      DAR TO REFERENCE TO REINSTATE
*                                      THE SYSTEM ERROR TASK
         DC    A(SVC13)
         AIF   (&MULTIPR EQ 1).DMPMP1                             20048
         DC    A(MPSETUP)          ADDR OF MP SETUP RTN           20048
         AGO   .DMPMP1A .                                         RORI
.DMPMP1  ANOP                                                     20048
         DC    A(0) .              MPSETUP NOT DEFINED            RORI
.DMPMP1A ANOP  . .                                                RORI
*                                  DELETE FOR OS69275          @PD69275
START    EQU   *                                                   SWTD
         NI    ABTERMSW,POFFABON .      SET PROLOG SW OFF         20472
         BC    0,ABRECURS .             BRANCH TO CATCH SYS ERR   20472
         OI    ABTERMSW,POFFABON .      SET ABTERM SWITCH ON      20472
         STM   0,15,ABSAVE              SAVE ALL REGS              SWTD
         MVC   16(4),RFSHCVT           RESTORE CVT VALUE AT LOC 16.SWTD
         L     CVT,CVTPTR(0)            PICK UP POINTER TO CVT
         USING CVTSECT,CVT
*
* THE FOLLOWING CODE WILL CAUSE ALL FREEMAINS FROM A BRANCH       M3806
* ENTRY TO BECOME CONDITIONAL                                     M3806
*
         USING SCVTSECT,WORK .                                    M3806
         L     WORK,CVTABEND .         LOAD PTR TO SCVT           M3806
         TM    SCVTFMSA,SCVTSW1 .      Q. CONDIT FRMAIN SW ON?    M3806
         BZ    CONTINUE .              NO. NORMAL ABTERM PROCESS  M3806
         L     WORK1,SCVTFMSA .        GET ADDR OF FRMAIN S/A     M3806
         LM    WORK,RETREG,0(WORK1) .  LOAD ABEND'S WORK REGS     M3806
         NI    ABTERMSW,ABOFFPON        SET ABTERM SW OFF    AD   21472
         BR    RETREG .                RETURN TO ABEND PROCESS    M3806
CONTINUE EQU   * .                                                M3806
         NI    SCVTFMSA,255-SCVTSW2 .  TURN OFF EXIT SWITCH       M3806
         L     NEW,CVTTCBP              PICK UP POINTER TO 'NEW'  M2542
         L     OLD,4(NEW)               CURRENT TASK FROM 'OLD'   M2542
         L     GIVEN,CVTHEAD           LOAD TOP TCB ADDRESS.       SWTD
         LR    WORK,PARREG0             GET PASSED TCB ADDR        3189
         LA    WORK,0(WORK)             CLEAR HI BYTE              3189
TCBTEST  EQU   *                                                   SWTD
         CR    GIVEN,WORK               TCB MATCH                  SWTD
         BE    TCBVALID                YES, VALID TCB.             SWTD
         L     GIVEN,TCTCB(GIVEN)      LOAD ADDR OF NEXT TCB.      SWTD
         LA    GIVEN,0(GIVEN)          CLEAR HI-ORDER.             SWTD
         LTR   GIVEN,GIVEN             IS THIS END OF TCB QUEUE?   SWTD
         BNZ   TCBTEST                 NO, TEST AGAIN.             SWTD
         B     RETCALL                 INVALID TCB RET TO CALLER  M2543
TCBVALID EQU   *                                                   SWTD
         USING TCBSECT,GIVEN
         TM    TCBFLGS+4,TCBFC          IS THIS TASK COMPLETE?
         BC    1,RETCALL                YES, DON'T SCHEDULE ABEND
         AIF   ('&TSO' NE 'YES').NOTSO3                           20021
         TM    TCBNDSP2,TIOWAIT .       IS TASK IN TERMINAL WAIT  20021
         BZ    NORESET                  NO,BYPASS RESET           20021
         NI    TCBNDSP2,TIOOFF          YES,RESET I/O WAIT FLAGS  20021
         NC    TCBSCNDY(THREE),TCBSCNDY ANY SECONDARY FLAGS       20021
         BNZ   NORESET                YES,BYPASS RESET OF PRI FLG 20021
         NI    TCBFLGS5,PNDSPOFF        NO,RESET PRI DISP FLAG    20021
NORESET  EQU   *                                                  20021
.NOTSO3  ANOP                                                     20021
         TM    TCBNSTAE,STAEREC                                    STAB
         BO    ACESS1                                              STAB
         TM    TCBFLGS+2,TCBABTRM       HAS THIS TASK BEEN ABTERMED?
         BC    1,RETCALL .              YES,DONT RESCHEDULE ABEND 20472
ACESS1   EQU   *
         AIF   (&MULTIPR EQ 1).SKIPD
         OI    TCBFLGS+3,NDISP     SET SELECT TCB TEMP NON DISP    MP1A
NDISP    EQU   X'02'                                               MP1A
         LA    JOB,TESTTASK        SET RETURN ADDRESS              MP1A
TWOCPU   TM    CVTDCB,CVTDCBMP     TEST IF MULTIPROCESOR           MP1A
CVTDCBMP EQU   X'04'               M65MP INDICATOR BIT             MP1A
         BCR   CC0,JOB             NO-CONTINUE                     MP1A
CC0      EQU   8                   BC MASK CC=0 TEST               MP1A
         LR    RB,ABBASE           SAVE BASE REG                   MP1A
         L     LNKREG,CVTMPCVT     POINTER TO MPCVT                MP1A
         USING IEAMPCVT,LNKREG                                     MP1A
         L     LNKREG,CVTTKRM      TASK REMOVAL ROUTINE            MP1A
         BALR  RETREG,LNKREG                                       MP1A
         LR    ABBASE,RB           RESTORE BASE                    MP1A
         USING IEA0AB00+2,ABBASE                                   MP1A
         BR    JOB                 RETURN TO MAIN LINE             MP1A
TESTTASK NI    TCBFLGS+3,INVNDISP    RESET NON-DISP FLAG           MP1A
INVNDISP EQU   255-NDISP                                           MP1A
.SKIPD   ANOP
         L     JOB,TCBJSTCB             ACCESS JOB STEP TCB
         CR    JOB,GIVEN                IS JOB STEP TO BE ABTERMED?
         BC    8,INITCALL               YES, SEE IF INITIATOR IS CALLER
ABWAIT   TM    TCBFLGS+4,TCBABWF        IS TASK IN ABEND WAIT STATE
         BC    1,RETCALL .              YES, DONT SCHEDULE ABEND  20472
         BC    15,STORECMP              NO, GO STORE ABEND PARAMETERS
         USING TCBSECT,JOB
JSTABEND EQU   *                                                 A34277
         NI    TCBTSFLG,X'BF'      TURN OFF STATUS PENDING     @PD69733
*                                  IN CASE RETRY (OLTEP ONLY)  @PD69733
         TM    TCBFLGS,TCBFA            IS JOB STEP ABENDING
         BC    1,DUMPREQ                YES, SEE IF DUMP IS REQUESTED
         NI    TCBFLGS+3,NOTOND  .      OPEN NON-DISPATCHABILITY  M5408
         NI    TCBFLGS+4,NOTMC  .       RESET ALL BUT MUST-COMP   M5408
*
TCBNDSP1 EQU   TCBDAR+1                                      AD   M1707
*
         MVI   TCBSTPCT,X'00'           CLEAR STOP COUNT     AD  A43314
         NC    TCBNDSP1(3),RMSNDSP      RESET ALL 2NDARY ND  AD   M0623
*                                       FLGS EXCEPT RMS/SER  AD   M0623
         BC    8,STORECMP               NO RMS/SER NON-DISP  AD   M0623
         OI    TCBFLGS+4,X'01'          IND TASK PERM ND     AD   M0623
         BC    15,STORECMP              GO STORE ABEND PARAMETERS
INITCALL L     INIT,TCBOTC              ACCESS INITIATOR'S TCB
         CR    INIT,OLD                 IS INITIATOR THE CALLER?
***********************************************************************
***********************************************************************
* FUTURE CONSIDERATIONS MAY REQUIRE THAT, BEFORE THIS NEXT BRANCH IS  *
* TAKEN, SPECIAL PROCESSING BE DONE TO DETERMINE IF ABTERM HAS BEEN   *
* INVOKED BY SER AND TO TAKE APPROPRIATE ACTION RELATIVE TO WHATEVER  *
* FUNCTION SER2 MAY PERFORM.                                          *
***********************************************************************
***********************************************************************
         BC    7,ABWAIT                 NO, SEE IF JSTCB IN ABEND WAIT
         BC    15,JSTABEND              YES, SEE IF JSTCB ABENDING
***********************************************************************
***********************************************************************
* ADDITIONAL PROCESSING RELATIVE TO STAE AND SECOND-TIME-INTERVAL     *
* EXPIRATION MUST BE INCLUDED HERE WHEN THE STAE FUNCTION IS AGAIN    *
* INTODUCED INTO THE OPTION 4 SYSTEM.                                 *
***********************************************************************
***********************************************************************
DUMPREQ  LA    WORK,1                   SET UP MASK TO TEST DUMP FLAG
         SLL   WORK,31                  SHIFT MASK
         NR    WORK,PARREG1             IS DUMP REQUESTED BY CALLER?
         BC    7,RETCALL                YES, DON'T SCHEDULE ABEND
         DROP  JOB
         USING TCBSECT,GIVEN
         XC    TCBFLGS+3(2),TCBFLGS+3   NO, RESET ALL DISPATCHABILITY
         NC    TCBNDSP1(3),RMSNDSP      RESET ALL 2NDARY ND  AD   M0623
*                                       FLGS EXCEPT RMS/SER  AD   M0623
         BC    8,TCBDISP                NO RMS/SER NON-DISP  AD   M0623
         OI    TCBFLGS+4,X'01'          IND TASK PERM ND     AD   M0623
TCBDISP  EQU   *                                             AD   M0623
         SPACE 2
* THE NEXT INSTRUCTION NOT NEEDED WITH THE NEW METHOD OF         A34277
* OPENING THE DUMP DATA SET.                                     A34277
         SPACE 1
*        NI    TCBFLGS+1,255-TCBFOINP RESET OPEN-IN-PROCESS FLG  A34277
         SPACE 2
         MVI   TCBRECDE,X'00'         RESET ALL RECURSION         21016
*                                                  INDICATORS     21016
         NI    TCBCMP,255-DUMPMASK      RESET DUMP REQUEST IN C.C.
         NI    TCBFLGS,255-TCBFA        RESET ABEND INDICATOR
         L     RB,TCBRBP                ACCESS TOP RB ON THIS TASK
         BC    15,SCHDABND              NOW GO SCHEDULE ABEND
STORECMP EQU   *                                                  M3888
         TM    TCBFLGS,TCBFA            IS THIS TASK ABENDING?    M3888
         BO    PRESCHED                 YES, USE ORIG COMP CODE   M3888
         CLI   TCBRECDE,TCBSAVCD        ABEND/STAE RECURSION      21472
         BE    PRESCHED                YES, USE ORIG COMP CODE    21016
*                                                                 M4535
*                                                                 M4535
         ST    PARREG1,TCBCMP           PLACE ABEND PARAMETERS IN TCB
PRESCHED L     RB,TCBRBP                ACCESS TOP RB ON THIS TASK
         USING RBSECT,RB
TESTTYP1 L     SVCREG,ATYPE1SW          PICK UP PTR TO TYPE 1 SWITCH
         TM    0(SVCREG),TYPE1ON        IS ENTRY DUE TO TYPE 1 SVC
         BC    7,SCHDTYP1               GO PERFORM TYPE 1 SCHEDULING
         TM    TCBFLGS,TCBFA            NO, IS THIS TASK ABENDING?
         BC    1,SCHDABND               NOW GO SCHEDULE ABEND
         TM    TCBFLGS+2,TCBABTRM       Q.TASK ABTERMED ALREADY?  20472
         BO    SCHDABND                 YES,RESCHED ABEND ANYWAY  20472
         MVC   RBABOPSW(4),RBOPSW+4     SAVE RESUME PSW IN RBABOPSW
         TM    RBSTAB,RBFTP             IS THE TOP RB AN IRB?
         BC    4,*+10                   YES, DON'T DESTROY SIZE VALUE
         MVC   RBWCSA(1),RBWCF          SAVE RB WAIT COUNT IN SAVE AREA
         BC    15,SCHDABND              NOW GO SCHEDULE ABEND
***********************************************************************
*                                                                     *
* THE FOLLOWING CODE PERFORMS THE ACTUAL SCHEDULING OF ABEND IN THE   *
* CASE OF ENTRY FROM OR PROGRAM CHECK IN A TYPE 1 SVC ROUTINE BY      *
* POINTING THE SVC OLD PSW TO SVC ABEND.                              *
*                                                                     *
***********************************************************************
SCHDTYP1 EQU   *
         TM    TCBFLGS,TCBFA            Q. IS THIS TASK ABENDING  20472
         BC    1,*+10                   YES, RETAIN ORIGINAL ABOPSW
         MVC   RBABOPSW(4),SVCOPSW+4    MOVE RH SVC OPSW TO RBABOPSW
         CR    GIVEN,OLD                Q. CUR TCB TO BE ABENDED  M2542
         BNE   ABTMRET                  YES. SCHEDULE IN RBOPSW   M2542
         LA    ABENDPTR,CVTQABST        PICK UP POINTER TO SVC ABEND
         ST    ABENDPTR,SVCOPSW+4       SCHEDULE ABEND FOR THIS TASK
         MVI   RBWCF,00 .          RESET WAIT COUNT IN         @PD64906
*                                  CASE PGM CHECK IN WAIT      @PD64906
         L     PARREG1,ADSVCSAV  GET ADDR OF SVC SAVE AREA         0539
         LM    PARREG0,PARREG1,0(PARREG1)  RESTORE REGS 0 AND 1    0539
         BC    15,SETABTRM              GO INDICATE THIS TASK ABTERMED
***********************************************************************
*                                                                     *
* THE FOLLOWING CODE PERFORMS THE ACTUAL SCHEDULING OF ABEND FOR THE  *
* GIVEN TASK BY POINTING THE TOP RB TO SVC ABEND AND ZEROING THE      *
* WAIT COUNT IN THE RB.                                               *
*                                                                     *
***********************************************************************
SCHDABND CLC   ABSAVE+56,ATYPE1XT       Q. IS CALLER A TYPE ONE    SWTD
         BNE   ABTMRET                  NO,RETURN TO CALLER      A14500
*
* IF THE TASK WAS ABTERMED WHILE IN TYPE 1 CODE, THE RETURN SHOULD BE
* TO THE DISPATCHER. FOR A TYPE 1 BRANCH ENTRY, THE TYPE 1 SWITCH WAS
* NOT SET AND THE ABEND  WAS SCHEDULED IN THE RB RESUME PSW-NOT THE SVC
* OLD PSW. TYPE 1 EXIT WILL USE THE SVC OLD PSW TO DISPATCH THIS TASK
* AND WILL DESTROY ALL OF ABTERM'S EFFECTIVENESS.
*
         MVC   ABSAVE+56(4),CVT0DS      YES RETURN TO DISPATCHER   SWTD
ABTMRET  LA    ABENDPTR,CVTQABST   PICK UP POINTER TO SVC ABEND    4500
         ST    ABENDPTR,RBOPSW+4        SCHEDULE ABEND FOR THIS TASK
         NI    CVTPOST(3),X'7F' .       TURN OFF             AD   M1701
*                                       'POST ENTERED' FLAG . AD  M1701
CVTPOST  EQU   X'58'   .                                     AD   M1701
         TM    RBSTAB,X'D0'            IS THEIR A SVRB            M4412
         BNO   CONTIN1                 NO CONTINUE                M4412
         CLI   RBWCF,X'FF'             IS TRAN AREA BEING LOADED  M4412
         BNE   CONTIN1                 NO CONTINUE                M4412
         MVI   RBTAWCSA,X'00'          SET TRANS WAIT SAVE AREA   M4412
*                                      TO ZERO                    M4412
         B     CONTIN2                                            M4412
CONTIN1  NI    RBWCF,X'00'             TAKE TASK OUT OF RB WAIT-STATE
CONTIN2  L     SWITCH,ASWITCH          GO TO TASK SWITCHING ROUTINE
         BALR  SWRET,SWITCH             GO TO TASK SWITCHING ROUTINE
SETABTRM OI    TCBFLGS+2,TCBABTRM       INDICATE THIS TASK ABTERMED
         OI    TCBFLGS,TCBFX            PREVENT SCHED. ASYNCH. EXITS
***********************************************************************
*                                                                     *
* THE FOLLOWING CODE PREVENTS INCOMPLETE SUBTASKS OF THE GIVEN TASK   *
* FROM RUNNING ASYNCHRONOUSLY.                                        *
*                                                                     *
***********************************************************************
TESTDTR1 EQU   *                                                   SWTD
         L     TCB,TCBOTC              GET MOTHER POINTER.         SWTD
         LTR   TCB,TCB                 IS THIS THE MASTER.         SWTD
         BC    8,RETCALL               YES, BYPASS SCAN.           SWTD
         L     TCB,TCBLTC              ACCESS ABTERMED TASKS DAUGHTER.
         LTR   TCB,TCB                  DOES A DAUGHTER EXIST?
         BC    8,RETCALL                NO, BYPASS SCAN AND RETURN
SETSUBS  LR    TCB,GIVEN                INITIALIZE FOR FIRST SCAN
TESTDTR2 BAL   RET,SCANTREE             EXECUTE TREE SCAN ROUTINE
         BC    15,*+8                   GO PROCESS SELECTED SUBTASK
         AIF   (&MULTIPR NE 1).SKIPE
         BC    15,RETCALL               ALL SUBTASKS PROCESSED, GET OUT
.SKIPE   ANOP
         AIF   (&MULTIPR EQ 1).SKIPF
         B     TASKRMVE            REMOVE SUBTASKS FROM CPU2       MP1A
.SKIPF   ANOP
         USING TCBSECT,TCB
         TM    TCBFLGS+4,TCBFC          IS THIS SUBTASK COMPLETE?
         BC    1,TESTDTR2               YES, SELECT ANOTHER SUBTASK
         TM    TCBFLGS,TCBFA            IS SUBTASK IN ABENDING TREE?
         BC    1,TESTDTR2               YES, SELECT ANOTHER SUBTASK
         DROP  TCB
         USING TCBSECT,GIVEN
         TM    TCBFLGS+3,X'FF'          IS ABTERMED TASK DISPATCHABLE?
         BC    7,TESTSUB                NO, SEE HOW THE SUBTASK SMELLS
         TM    TCBFLGS+4,X'BF'          IS ABTERMED TASK DISPATCHABLE?
         BC    8,SETNON                 YES, GO SET SUBTASK NON-DISP
         DROP  GIVEN
         USING TCBSECT,TCB
TESTSUB  TM    TCBFLGS+3,X'FF'          IS THIS SUBTASK DISPATCHABLE?
         BC    7,SETNON                 NO, GO SET INTO ABEOT WAITSTATE
         TM    TCBFLGS+4,X'FF'          IS THIS SUBTASK DISPATCHABLE?
         BC    8,TESTDTR2               YES, DON'T SET NON-DISPATCHABLE
SETNON   OI    TCBFLGS+4,TCBABWF        SET SUBTASK INTO ABEOT WAIT
         BC    15,TESTDTR2              GO SELECT ANOTHER SUBTASK
         DROP  TCB
***********************************************************************
*                                                                     *
* THE FOLLOWING CODE RETURNS CONTROL TO THE CALLER OF ABTERM.         *
*                                                                     *
***********************************************************************
         AIF   (&MULTIPR EQ 1).SKIPG
TASKRMVE BAL   JOB,TWOCPU          REMOVE SUBTASKS FROM CPU2       MP1A
.SKIPG   ANOP
RETCALL  EQU   *                                                   SWTD
         L     SVCREG,ATYPE1SW .       LOAD TYPE 1 SW PTR          SWTD
         TM    0(SVCREG),TYPE1ON .     Q. IS SW SET                SWTD
         BNZ   RETCALL1 .              YES, CONTINUE NORMAL ABEND  SWTD
         CLC   ABSAVE+57(3),ATYPE1XT+1 Q. TYPE 1 EXIT ADDR SET     SWTD
         BNE   RETCALL2 .               NO, CONTINUE OUT          20472
         L     RETREG,CVT0DS .         SET ADDR OF DISPATCHER      SWTD
         LM    REG2,REG13,ABSAVE+8      RESTORE REGS 2 - 13      A32564
         NI    ABTERMSW,ABOFFPON        SET ABTERM SW OFF         20472
         BR    RETREG .                GO TO IT                    SWTD
RETCALL1 EQU   *                                                   SWTD
         LM    REG2,REG14,ABSAVE+8      RESTORE REGS 2 -14        20472
         NI    ABTERMSW,ABOFFPON        SET ABTERM SWITCH OFF     20472
         L     ABBASE,ADSVCSAV          GET ADDR OF SVC SAVE AREA 20472
         L     ABBASE,60(ABBASE)        GET CALLERS REG15         20472
         BCR   15,RETREG                RETURN TO TYPE 1 EXIT
RETCALL2 EQU   *
         LM    REG2,REG14,ABSAVE+8      RESTORE REGS 2 - 14      A32564
         NI    ABTERMSW,ABOFFPON        SET ABTERMSW OFF          20472
         BCR   15,RETREG               RETURN TO CALLER OF ABTERM
*
*
SCEDWAIT EQU   *                                                   SWTD
*  PREPARE TO EXIT VIA SVC 6 (LINK) WHEN ENETERED HERE BY DAR TO
*  ATTEMPT FINAL REINSTATEMENT OF THE MASTER SCHEDULER.
*
*
         LINK  EP=IEEVWDAR             RETURN TO MASTER SCHED WAIT RTN
***********************************************************************
*                                                                     *
* THE FOLLOWING CODE IS A SUBROUTINE WHICH SCANS THE FAMILY TREE OF   *
* THE GIVEN TASK AND SELECTS A SUBTASK TO BE RETURNED TO THE CALLER.  *
*                                                                     *
***********************************************************************
SCANTREE LR    LAST,TCB                 INITIALIZE FOR TREE SCAN
         USING TCBSECT,LAST
         L     TCB,TCBLTC               ACCESS DAUGHTER OF THIS TASK
         LTR   TCB,TCB                  DOES A DAUGHTER EXIST?
         AIF   (&MULTIPR NE 1).SKIPJ
         BCR   7,RET                    YES, RETURN WITH DAUGHTER
.SKIPJ   ANOP
         AIF   (&MULTIPR EQ 1).SKIPH
         BZ    TRYSIS              NI, TRY A SISTER                MP1A
         C     LAST,TCBOTC-TCBSECT(TCB)  Q.IS DAUGHTER TCB VALID   MP1A
         BCR   CC0,RET             YES, RETN WITH DAUGHTER         MP1A
.SKIPH   ANOP
TRYSIS   L     TCB,TCBNTC               NO, TRY A SISTER
         LTR   TCB,TCB                  DOES A SISTER EXIST?
         BCR   7,RET                    YES, RETURN WITH SISTER
         L     LAST,TCBOTC              NO, TRY THE MOTHER
         CR    LAST,GIVEN               IS THIS THE ABTERMED TASK?
         BC    8,4(RET)                 YES, RETURN VIA END EXIT
         BC    15,TRYSIS                NO, TRY THE SISTER
***********************************************************************
*
* ENTRANCE HERE IS ABTERM OR PROLOGUE RECURSION
*
***********************************************************************
ABRECURS EQU   *
         BALR  ABBASE,0
         USING *,ABBASE                 ESTABLISH ADDRESSABILITY  20472
         LPSW  WAIT                     RECURSION WAIT WCS        20472
***********************************************************************
*                                                                     *
* THE FOLLOWING ARE STORAGE AREAS AND CONSTANTS USED BY THE PROLOGUE  *
* AND ABTERM ROUTINES.                                                *
*                                                                     *
***********************************************************************
WAIT     DS    0D                       WCS FOR ABTERM            20472
         DC    X'0006000000000D01'      PROLOGUE RECURSION   AD  A45988
         DS    0F
RMSNDSP  DC    X'500000'      MASK USED TO CLEAR ALL BUT THE AD  A54920
*                     DAR AND RMS/SER SECONDARY NON-DSP FLGS AD  A54920
         DS    0F
ABSAVE   DS    16F                      SAVE AREA FOR REGS         SWTD
AIORGSW  DC    A(IORGSW)                ADDRESS OF SWITCH IN I/O FLIH
ADISMISS DC    A(DISMISS)               RETURN ADDRESS IN I/O FLIH
ATYPE1SW DC    A(IEATYPE1)              ADDRESS OF TYPE 1 SVC SWITCH
ATYPE1XT DC    A(IEA0XE00)              ADDRESS OF TYPE 1 EXIT ROUTINE
ASWITCH  DC    A(IEA0DS02)              ADDR OF TASK SWITCHING ROUTINE
ADPKSAV  DC    V(IEAPKSAV)   ADDR OF PROG CHECK SAVE AREA          0539
ADSVCSAV DC    V(IEASCSAV)   ADDR OF SVC SAVE AREA                 0539
DUMPCODE DC    X'00080000'              DUMP CODE FOR ABEND
RFSHCVT  DC    A(IEACVT)               ADDR OF CVT PLACED IN BY NIPSWTD
IOSPRGCK DC    A(IECCPL00) .                                     A24739
SVC15    SVC   15
         SVC   3
         SVC   1                       DUMMY WAIT INSTR - USED BY DAR
SVC13    SVC   13                      TO SET SYSTEM ERROR TASK UP
*                                      FOR REINSTATEMENT
         DC    X'00'                    RESERVED
ABTERMSW DC    X'00'                                              20472
*
*              X'F0  PROLOGUE SWITCH ON
*              X'0F'  ABTERM SWITCH ON
*              X'00'  NORMAL STATE
*              X'FF'  NOT POSSIBLE
         DROP  LAST                                               20048
         EJECT
***************************************************************** 20048
*                                                                 20048
* ROUTINE NAME - DMPCEAPP - CHANNEL END APPENDAGE FOR SVC DUMP    20048
*                                                                 20048
* CHANGE LEVEL = 0                                                20048
*                                                                 20048
* FUNCTION:   THE CHANNEL END APPENDAGE IS ENTERED UNDER ONE      20048
*             OF THREE CONDITIONS:                                20048
*                                                                 20048
*             1.  THE CYCLINDER IS FULL AND A NOP WAS EXECUTED.   20048
*                 THIS CONDITION IS NORMAL.                       20048
*                                                                 20048
*             2.  A PCI INTERRUPT WAS LOST AND A NOP WAS EXECUTED 20048
*                 GENERATING A CHANNEL END CONDITION.  THIS IS    20048
*                 IS ABNORMAL BUT RECOVERABLE.                    20048
*                                                                 20048
*             3.  THE ABNORMAL END APPENDAGE REINITIALIZED THE    20048
*                 CHANNEL PROGRAM WITH NO CHAINING OR PCI IN ORDER20048
*                 TO TRY TO RECOVER FROM AN ABNORMAL CONDITION.   20048
*                 THIS IS ABNORMAL BUT RECOVERABLE.               20048
*             (NOTE:  THE CHANNEL END APPENDAGE IS ALSO ENTERED   20048
*                 AFTER THE ABNORMAL END APPENDAGE HAS BEEN       20048
*                 ENTERED AND BEFORE ERPS HAVE RECEIVED CONTROL   20048
*                 FROM IOS.  THIS IS WHY CE APP MUST CHECK CSW    20048
*                 FOR ERROR CONDITIONS AND IF PRESENT, EXIT       20048
*                 TO IOS FOR ERP PROCESSING.)                     20048
*                                                                 20048
*            THE FOLLOWING ACTIONS ARE PREFORMED BY THE APPENDAGE 20048
*                                                                 20048
*             1.  WHEN THE CE APP IS ENTERED DUE TO THE 1ST CASE  20048
*                 ABOVE THEN THE CYCLINDER ADDRESS(CC) IS UPDATED 20048
*                 TO THE NEXT CYCLINDER, THE TRACK ADDRESS(HH) IS 20048
*                 RESET TO ZERO AND THE COUNT AND KEY FIELDS ARE  20048
*                 UPDATED, AS WELL AS THE DATA ADDRESS IN CCW5    20048
*                 (NOTE:  THE CCW CHAIN IS SHOWN IN THE 'TABLES   20048
*                 AND CONTROL BLOCKS' SECTION BELOW.)  THEN       20048
*                 THE CE APP EXITS TO IOS FOR RESTART OF THE      20048
*                 CHANNEL PROGRAM.                                20048
*                                                                 20048
*             2.  IF THE CE APP IS ENTERED DUE TO THE SECOND CASE 20048
*                 THEN THE IOB SEARCH ARGUMENT IS UPDATED TO      20048
*                 SEARCH ON THE LAST RECORD WRITTEN AND RESTART   20048
*                 THE CHANNEL PROGRAM TO REWRITE THE LAST RECORD. 20048
*        (NOTE:  IF THE PCI FROM CCW8 IS LOST, THEN THE RESTART   20048
*                 CCW CHAIN WILL RESTART SUCH THAT THE DATA       20048
*                 ADDRESS WILL BE IN CCW5.)                       20048
*                                                                 20048
*        3.  IF THE CE APP IS ENTERED DUE TO THE THIRD CASE THEN  20048
*                 THE CE APP RETURNS TO IOS.                      20048
*                                                                 20048
         EJECT
*                                                                 20048
* ENTRY POINT NAME - DMPCEAPP.                                    20048
*                                                                 20048
* SVC USAGE - NONE                                                20048
*                                                                 20048
* INPUT - THE FOLLOWING REGISTERS ARE AVAILABLE TO THE APPENDAGE  20048
*         ON ENTRY FROM IOS.                                      20048
*                                                                 20048
*     REGISTER 1 -- ADDRESS OF RQE FOR THE CHANNEL PROGRAM        20048
*                                                                 20048
*     REGISTER 2 -- ADDRESS OF IOB                                20048
*                                                                 20048
*     RESISTER 3 -- ADDRESS OF DEB                                20048
*                                                                 20048
*     REGISTER 4 -- ADDRESS OF DCB                                20048
*                                                                 20048
*     REGISTER 7 -- ADDRESS OF UCB                                20048
*                                                                 20048
*     REGISTER 14 -- RETURN REGISTER                              20048
*                                                                 20048
*     REGISTER 15 -- ADDRESS OF ENTRY POINT TO APPENDAGE          20048
*                                                                 20048
* OUTPUT - NONE                                                   20048
*                                                                 20048
* ENTRY POINTS - DMPCEAPP - NORMAL ENTRY FROM IOS                 20048
*                                                                 20048
* EXIT POINTS:                                                    20048
*                                                                 20048
*               1.  TO IOS FOR RESTARTING CCW CHAIN               20048
*                                                                 20048
*               2.  TO IOS WHEN DUMP IS COMPLETE                  20048
*                                                                 20048
*                                                                 20048
*                                                                 20048
        EJECT
* TABLE AND CONTROL BLOCKS REFERENCED -                           20048
*                                                                 20048
*        1.  IOB                                                  20048
*                                                                 20048
*        2.  DMPDSECT -- SEE DSECT FOR FORMAT                     20048
*                                                                 20048
*        3.  DEB                                                  20048
*                                                                 20048
*        4.  CCW CHAIN:                                           20048
*                                                                 20048
***************************************************************** 20048
*                                                                 20048
*        CCW NO.      COMMAND                 FLAGS     LENGTH    20048
*                                                                 20048
***************************************************************** 20048
*         1            READ HA                 SKP, CC    5       20048
*         2            SRCH ID EQ (MULTI TRK)  CC         5       20048
*         3            TIC TO 2                           1       20048
*         4            WRITE CKD               DC         12      20048
*         5            WRITE CKD               PCI, CC    1024    20048
*         6            NOP/TIC TO 2            SLI        1       20048
*         7            WRITE CKD               DC         12      20048
*         8            WRITE CKD               PCI, CC    1024    20048
*         9            NOP/TIC TO 2 OR 4       SLI        1       20048
***************************************************************** 20048
*                                                                 20048
*                                                                 20048
*  NOTE:  THESE TABLES AND CONTROL BLOCKS ARE REFERENCED BY ALL   20048
*         THREE APPENDAGES                                        20048
*                                                                 20048
                EJECT
*                                                                 20048
*                                                                 20048
* ROUTINE NAME - DMPAEAPP - ABNORMAL END APPENDAGE                20048
*                                                                 20048
* CHANGE LEVEL = 0                                                20048
*                                                                 20048
* FUNCTION      THE ABNORMAL END APPENDAGE IS ENTERED WHEN AN     20048
*               ERROR CONDITION OCCURS.  THE APPENDAGE IS ENTERED 20048
*               PRIOR TO ERP PROCESSING, AND, IF RECOVERY IS      20048
*               UNSUCCESSFUL, FOLLOWING ERP PROCESSING.  THE      20048
*               CHANNEL PROGRAM MUST BE REINITIALIZED TO ALLOW    20048
*               RETRY.                                            20048
*                                                                 20048
*               AT INITIAL ENTRY THE PERMANENT ERROR FLAG IN THE  20048
*               IOB IS CHECKED TO DETERMINE IF AN ERROR HAS BECOME20048
*               PERMANENT.  IF SO, THE APPENDAGE WILL RETURN TO   20048
*               IOS TO WRITE AN EOF RECORD.  THE SVC DUMP MAINLINE20048
*               ROUTINE WILL DETERMINE AN ERROR OCCURED BY TESTING20048
*               THE BITS IN THE CONTROL BLOCKS FOR ERROR INDICATOR20048
*                                                                 20048
*               IF IT IS NOT A PERMANENT ERROR, A TEST IS MADE TO 20048
*               DETERMINE IF CHANNEL DATA CHECK HAS OCCURED.      20048
*               THIS WOULD INDICATE A WRITE FROM INVALID STORAGE. 20048
*               IN THIS CASE, THE CHANNEL PROGRAM IS SET UP TO    20048
*               REWRITE THE FAILING RECORD.  BIT 2 OF THE STORAGE 20048
*               KEY IS SET TO 1 INDICATING INVALID DATA CONTAINED 20048
*               IN THE RECORD. CCW5'S DATA ADDRESS IS SET TO ZERO 20048
*               SO THAT THE FAILING STORAGE IS NOT ACCESSED AGAIN.20048
*               THE CHANNEL PROGRAM IS SET UP TO RESTART BY       20048
*               SETTING THE SEARCH ARGUMENT OF THE LAST RECORD    20048
*               WRITTEN.  RETURN IS TO IOS FOR RESTART.           20048
*                                                                 20048
*               FOR ERROR CONDITIONS OTHER THAN CHANNEL DATA CHECK20048
*               THE FOLLOWING STEPS ARE TAKEN:                    20048
*                                                                 20048
*               1.  SET CCW6 AND CCW9 TO NOP.                     20048
*               2.  SET SEARCH ARGUMENT TO LAST RECORD WRITTEN    20048
*               3.  TURN OFF PCI FLAGS IN CCW5 AND CCW8           20048
*               4.  RESET ANY 'NEXT ADDRESS' CALCULATIONS OF THE  20048
*                   PCI APPENDAGE.  LOGIC WILL REQUIRE CHECKS     20048
*                   TO DETERMINE IF THE ERROR OCCURED AFTER A     20048
*                   PCI AND IN WHICH HALF OF THE CHANNEL PROGRAM  20048
*                   THE ERROR OCCURED.  IF THE ERROR OCCURED      20048
*                   BEFORE THE PCI NO REINITIALIZING OF THE       20048
*                   ADDRESS IS NECESSARY.  IF THE ERROR OCCURED   20048
*                   AFTER THE PCI INTERRUPT, THEN THE ADDRESS     20048
*                   IN THE CHANNEL PROGRAM HAS TO BACKED UP       20048
*                   TO BEFORE THE PCI WAS PROCESSED.              20048
          EJECT
*               5.  IF THE ERROR OCCURS AFTER CCW6, THEN THE NEXT 20048
*                   ADDRESS COMPUTATIONS HAVE TO BE SET UP FOR    20048
*                   USE WITH CCW4 AND CCW5.                       20048
*               6.  RETURN TO IOS FOR ERP PROCESSING              20048
*                                                                 20048
*                                                                 20048
*  ENTRY POINT NAME - DMPAEAPP.                                   20048
*                                                                 20048
*  EXTERNAL REFERENCES - NONE                                     20048
*                                                                 20048
*  SVC USAGE - NONE                                               20048
*                                                                 20048
*  INPUT - SAME AS CHANNEL END APPENDAGE                          20048
*                                                                 20048
*  OUTPUT - NONE
*                                                                 20048
*  EXITS - 1.   TO IOS FOR RESTART                                20048
*                                                                 20048
*          2.   TO IOS TO WRITE EOF RECORD AFTER PERMENATE ERROR  20048
*                                                                 20048
*  TABLES AND CONTROL BLOCKS - SAME AS FOR CE APP                 20048
*                                                                 20048
*                                                                 20048
***************************************************************** 20048
      EJECT
*                                                                 20048
***************************************************************** 20048
*                                                                 20048
*                                                                 20048
* ROUTINE NAME - DMPPCIAP - PROGRAM CONTROLLED INTERRUPT APPENDAGE20048
*                                                                 20048
* CHANGE LEVEL = 0                                                20048
*                                                                 20048
* FUNCTION:     ON INITIAL ENTRY TO THE PCI APPENDAGE CCW6        20048
*               AND CCW9 ARE SET TO NOP AND THE COMMAND CHAIN BIT 20048
*               IN CCW6 IS TURNED OFF.  THE PCI APPENDAGE WILL    20048
*               UPDATE THE COUNT AND KEY FIELD LOCATED IN THE     20048
*               CONTROL BLOCK COMPLEX AND WILL ADJUST CCW DATA    20048
*               ADDRESSES TO WRITE THE NEXT BLOCK OF STORAGE.     20048
*                                                                 20048
*               IF THE PCI WAS GENERATED AT CCW5, THE PCI BIT IN  20048
*               CCW5 WILL BE TURNED OFF.  CCW6 WILL HAVE THE      20048
*               COMMAND CHAIN BIT TURNED ON IF ANOTHER BLOCK WILL 20048
*               FIT ON THE SAME TRACK.  THE HEAD NUMBER WILL BE   20048
*               INCREMENTED AND CCW6 WILL BE SET TO TIC IF THE    20048
*               LAST BLOCK ON THE LAST TRACK HAS BEEN WRITTEN.    20048
*               PCI IS TURNED ON IN CCW8.  THE NOP AND COMMAND    20048
*               CHAIN BIT OFF CONDITION WILL BE LEFT IN AFFECT    20048
*               IF THE LAST BLOCK ON THE LAST TRACK HAS BEEN      20048
*               WRITTEN.                                          20048
*                                                                 20048
*               IF THE PCI WAS GENERATED AT CCW8, THE PCI BIT IS  20048
*               TURNED OFF IN CCW8 AND CCW9 WILL BE SET TO TIC TO 20048
*               CCW4 IF ANOTHER BLOCK WILL FIT ON THE SAME TRACK. 20048
*               THE PCI BIT IN CCW5 WILL BE TURNED ON.  IF THE    20048
*               TRACK IF FULL, THE HEAD NUMBER IS INCREMENTED, AND20048
*               CCW9 WILL TIC TO CCW2.  IF THE CYLINDER IS FULL,  20048
*               THE NOP IS LEFT IN EFFECT.                        20048
*                                                                 20048
*               THE PCI APPENDAGE PERFORMS 'NEXT ADDRESS'         20048
*               DETERMINATION AFTER RESETTING THE CHANNEL PROGRAM 20048
*               DASD EXTENTS WILL BE VALIDATED TO ENSURE THAT     20048
*               ANOTHER WRITE WILL NOT VIOLATE EXTENTS.  IN AN    20048
*               MP SYSTEM, FSSEMAP IS CHECKED TO ENSURE THAT      20048
*               STORAGE TO BE DISPLAYED IS ON-LINE.  IF NOT ON-   20048
*               LINE, 256K IS BYPASSED.  ALL CALCULATED VALUES    20048
*               ARE SAVED FOR THE NEXT PCI ENTRY.                 20048
*                                                                 20048
* ENTRY POINT NAME  -  DMPPCIAP                                   20048
*                                                                 20048
*  EXTERNAL REFERENCES - NONE                                     20048
*                                                                 20048
*  SVC USAGE - NONE                                               20048
*                                                                 20048
*  INPUT - SAME AS CHANNEL END APPENDAGE                          20048
*                                                                 20048
*  OUTPUT - NONE                                                  20048
*                                                                 20048
*  EXITS - 1.   TO IOS FOR RESTART                                20048
*                                                                 20048
*  TABLES AND CONTROL BLOCKS - SAME AS FOR CE APP                 20048
*                                                                 20048
*                                                                 20048
***************************************************************** 20048
        EJECT
X00      EQU   X'00' .                                            20048
X01      EQU   X'01' .                                            20048
X02      EQU   X'02' .                                            20048
X03      EQU   3 .                                                20048
X04      EQU   X'04' .                                            20048
X05      EQU   X'05' .                                            20048
X06      EQU   X'06' .                                            20048
X07      EQU   X'07' .                                            20048
X08      EQU   X'08' .                                            20048
X0C      EQU   X'0C' .                                            20048
X13      EQU   X'13' .                                            20048
X0E      EQU   X'0E' .                                            20048
X20      EQU   X'20' .                                            20048
X28      EQU   X'28' .                                            20048
X40      EQU   X'40' .                                            20048
X80      EQU   X'80' .                                            20048
XF3      EQU   X'F3' .                                            20048
XFF      EQU   X'FF' .                                            20048
ALL      EQU   X'FF' .                                            20048
X400     EQU   X'0400' .                                          20048
CCOFF    EQU   X'00' .                                            20048
NOP      EQU   3 .                                                20048
TIC      EQU   X'08' .                                            20048
CCON     EQU   X'40' .                                            20048
COMCHAN  EQU   X'40' .                                            20048
PCION    EQU   X'08' .                                            20048
PCIOFF   EQU   X'F7' .                                            20048
R0       EQU   0 .                                                20048
R1       EQU   1 .                                                20048
R2       EQU   2 .                                                20048
R3       EQU   3 .                                                20048
R4       EQU   4 .                                                20048
R5       EQU   5 .                                                20048
R6       EQU   6 .                                                20048
R7       EQU   7 .                                                20048
R8       EQU   8 .                                                20048
R9       EQU   9 .                                                20048
R10      EQU   10 .                                               20048
R11      EQU   11 .                                               20048
R12      EQU   12 .                                               20048
R13      EQU   13 .                                               20048
R14      EQU   14 .                                               20048
R15      EQU   15 .                                               20048
REG7     EQU   7 .                                                20048
         EJECT
TCBREG   EQU   4 .                                                20048
REGA     EQU   10 .                                               20048
REGB     EQU   11 .                                               20048
REGC     EQU   12 .                                               20048
REGD     EQU   13 .                                               20048
MPBASE   EQU   11 .                                               20048
MPRETURN EQU   13 .                                               20048
RDSECT   EQU   2 .                BASE REG FOR DSECT              20048
RBASE    EQU   15 .               BASE REG FOR CE APPENDAGE       20048
WKRGA    EQU   10 .               WORK REGISTER                   20048
NDBIT    EQU   X'01' .                                            20048
TCBNDSVC EQU   X'20' .                                            M1338
EOFIND   EQU   X'40' .            END OF FILE MASK                20048
EODIND   EQU   X'80' .            END OF DATA MASK                20048
PDIND    EQU   X'08' .            PARTIAL DUMP MASK               20048
PCIIND   EQU   X'08' .            PCI INDICATOR                   20048
HDRIND   EQU   X'20' .            HEADER RECORD INDICATOR         20048
HDROFF   EQU   X'DF' .            MASK TO TURN HDR BIT OFF        20048
INVSTOFF EQU   X'5F' .            SET INVALID BIT OFF MASK        20048
CVTLOCK  EQU   X'80' .                                            20048
BUFGOT   EQU   X'80' .                                            20048
FSSEMAP  EQU   X'300' .                                           20048
SLI      EQU   X'20' .                                            20048
CSWPTR   EQU   X'40' .            CSW ADDRESS PTR
WRITE    EQU   X'1D' .
         EJECT
DMPCEAPP DS    0H .                                               20048
         USING DMPIOB,RDSECT .                                    20048
         USING *,RBASE .                                          20048
         USING DEBSECT,R3 .       DEB DSECT                       20048
         TM    DMPIOBCS+X03,XF3 . TEST FOR ERROR CONDITION        20048
         BCR   X05,RETREG .       RETURN IF ERROR CONDITIONS AD  A49311
         TM    DMPIOBCS+X04,X'7F' .TEST FOR ERROR              @PD66507
         BCR   X05,RETREG .       RETURN IF ERROR CONDITIONS AD  A49311
         TM    DMPFLAG2,X'40' .    IF 3330 NO-PCI              @PD64143
         BZ    DMPCEAP2 .          PROCESS MODE,               @PD64143
         STM   R14,R15,NOPCISR .   GO PERFORM PSEUDO           @PD64143
         LA    R15,DMPPCIAP .      PCI PROCESSING              @PD64143
         BAL   R14,DMPPCIA2-DMPPCIAP(,R15) NOW                 @PD64143
         LM    R14,R15,NOPCISR-*(R14) RELOAD REGS              @PD64143
DMPCEAP2 EQU   *                   .                           @PD64143
         TM    DMPFLAG,EODIND .   TEST FOR END OF DATA            20048
         BO    EODNORM  .         IF ON, GO WRITE EOF RCD         20048
         TM    DMPCCWF5,PCIIND  . TEST PCI BIT IN CCW5            20048
         BO    X08(RETREG) .      RETURN TO IOS
         TM    DMPCCWF8,PCIIND  . TEST PCI BIT ON IN CCW8         20048
         BO    X08(RETREG) .      RETURN TO IOS
         L     R10,DMPTICCW .     GET PTR TO NEXT CCW
         LA    R10,X00(R10) .     CLEAR HIGH BYTE
         LA    R11,DMPCCW4 .      SET UP DSECT FOR USE
         CR    R10,R11 .          TEST FOR WHICH CCW CHAIN
         BNE   DMPCEAND .         OK CONDITION
         LA    R11,DMPCCW7 .      SET UP DSECT FOR USE
DMPCEAND ST    R11,DMPTICCW .     SAVE NEXT CCW CHAIN
         MVI   DMPTICCW,TIC .     MAKE CCW  A   TIC
         USING DMPCCWX,R11
         OI    DMPCCWB+X04,PCION+COMCHAN .  TURN PCI FLAG ON
         TM    DMPFLAG2,X80 .     TEST FOR PCI IN CONTROL FIRST
         BNO   DMPCRND .          PCI DID NOT UPDATE CCHHR
         NI    DMPFLAG2,X'7F' .   TURN OFF FLAG
         L     R12,DMPCCWA .      GET PTR TO KEY AREA
         BAL   R13,DMPUPDAT .     GO BACK UP IOB SRCH ID
         MVC   DMPCCWB+X01(3),DMPADSAV+X01 .  MOVE DATA FIELD     20048
         MVI   DMPCCWC,NOP .      NOP ENDING CCW
         B     PCINOT8 .          DO NOT UPDATE CCHHR
DMPCRND  EQU   *
         AIF   (&MULTIPR EQ 1).DMPEB1                             20048
         STM   R0,R1,MPSAVE+8 .   SAVE VOLITE REGISTERS           20048
.DMPEB1  ANOP                                                     20048
         BAL   REGD,DMPINGRE  .   GO TO UPDATE ROUTINE            20048
         SR    R9,R9  .           ZERO IOS REGISTER
         AIF   (&MULTIPR EQ 1).DMPEB2                             20048
         L     R15,DMPDEBCE  .    RESTORE BASE REG                20048
         LM    R0,R1,MPSAVE+8 .   RESTORE VOLITE REGISTERS        20048
.DMPEB2  ANOP                                                     20048
         TM    DMPFLAG,X'90' .    TEST FOR END OF DUMP            20048
         BO    EODNORM  .         GO WRITE EOF RECORD             20048
         L     R11,DMPTICCW .     GET NEXT CCW CHAIN
         L     R9,X00(R11) .      PICK UP KEY AREA
         MVC   DMPCCWB+X01(3),DMPADSAV+X01 .  MOVE DATA FIELD     20048
         BAL   R13,DMPCICON  .    GO TO SUBROUTINE FOR STOR KEY
         BAL   R13,DMPCERTN .     GO TO TRK SETUP RTN
         B     EODS .             IF END,BRANCH                   20048
         B     PCINOT8 .          UPDATE CYCLINDER ADDR
         B     PCINOT8 .          UPDATE CYCLINDER ADDR
PCINOT8  BAL   R13,DMPSWTCH .     GO TO ADDR SWITCH RTN
         B     8(RETREG) .        RETURN                          20048
         DROP  R11
         DROP  RBASE
NOPCISR  DC    2A(0) .             REGISTER SAVE AREA          @PD64143
         EJECT                                                    20048
DMPAEAPP DS    0H .                                               20048
         USING *,RBASE .           SET UP APP BASE                20048
         USING DMPCCWX,R10
         TM    DMPIOBEC,X'7F' .    TEST FOR PERM IO ERROR         20048
         BC    14,TSTHDR .         IF SO,BRANCH                   20048
         LA    R10,DMPCCW4 .      LOAD ADDRESS OF CCW4            20048
         L     R11,DMPIOBF3 .     LOAD 1ST 3 BYTES OF CSW         20048
         LA    R11,X00(R11) .     CLEAR HIGH BYTE
         CLR   R11,R10 .          CHECK FOR CCW 4&5 OR 8&9        20048
         BH    GTCCW4 .           PROBLEM IS NOT A SRCH OR READ HA
         L     R10,DMPTICCW .     GET PTR TO CURRENT CHAIN
         NI    DMPCCWB+X04,PCIOFF . TURN PCI BIT OFF
         BR    R14 .              RETURN TO IOS             AD   A49311
GTCCW4   EQU   *
         LA    R10,DMPCCW7 .      LOAD ADDRESS OF CCW7            20048
         CLR   R11,R10 .          CHECK FOR CCW 4&5 OR 8&9        20048
         BH    CCW8 .             IF 8OR 9,BRANCH                 20048
         LA    R10,DMPCCW4 .      SET UP FOR DSECTS
         LA    R11,DMPCCW7 .      SET UP FOR DSECTS
         B     NOTHDR .           IF NOT BRANCH                   20048
CCW8     EQU   *
         LA    R11,DMPCCW4
NOTHDR   EQU   *
         TM    DMPFLAG2,X80 .     DID PCI UPDATE FOR CYL END
         BO    SEPARATE .         IF SO PROCESS DIFFERENTLY
         TM    DMPCCWB+X04,PCIIND .TEST IF PCI ON
         BNO   RESTART
         NI    DMPCCWB+X04,PCIOFF .TURN PCI BIT OFF
CHDATACK EQU   *
         TM    DMPIOBCS+X04,X08 . TEST FOR CHANNEL DATA CHECK
         BCR   14,R14 .           RETURN TO IOS             AD   A49311
         TM    DMPFLAG,HDRIND .   TEST FOR HEADER RECORD
         BCR   1,R14 .            RETURN TO IOS IF HDR RCD  AD   A49311
         L     R12,X00(R10) .     GET CORRECT KEY AREA
         USING DMPWRWD,R12
         OI    DMPFLGKY,X20 .     SET INVALID STORAGE BIT
         DROP   R12
         SR    R12,R12  .         ZERO WORK REG
         ST    R12,DMPCCWB  .     STORE ADDRESS FOR WRITE
         MVI   DMPCCWB,WRITE .    MAKE CCW A WRITE
         B     X08(R14) .         RETURN TO IOS
RESTART  EQU   *
         OI    DMPFLAG2,X80 .     TURN ON UPDATE BIT FOR CE APP
         ST    R10,DMPTICCW .     SAVE  NEXT CCW CHAIN PTR
         NI    X0C(R11),PCIOFF .  TURN PCI OFF IN NEXT CCW
         BAL   R13,DMPSWTCH .     SWITCH PTRS FOR RESTART
SEPARATE EQU   *
         L     R12,DMPCCWA  .     GET PTR TO KEY AREA
         BAL   R13,DMPUPDAT .     GO TO PCI CONTROL ROUT
         MVI   DMPCCWC,NOP .      INSURE THAT CE APP GETS CONTROL
         B     CHDATACK .         FINISH REST OF PROCESSING
         DROP  R10
TSTHDR   EQU   *
         L     R10,DMPTICCW .     PICK UP CURRENT CHAIN
         L     R11,X00(R10) .     PICK UP CURRENT KEY
         USING DMPWRWD,R11
         OI    DMPFLAG,X08+X80 .  SET PARTIAL DUMP FLAG AND EOD
         TM    DMPFLGKY,HDRIND .  TEST FOR HDR RECORD
         BCR   X01,R14 .          RETURN TO IOS
         OI    DMPFLAG,X08 .      SET PARTIAL DUMP FLAG ON
         DROP  R11
         DROP  RBASE
EODNORM  EQU   * .                                                20048
         BALR  R10,X00 .          ESTABLISH ADDRESSIBILITY        20048
         USING *,R10  .                                           20048
         LA    R11,DMPDCB .       GET ADDRESS OF SYS1.DUMP DCB    20048
         LA    R4,X00(R4) .       CLEAR HIGH BYTE OF DCB REG      20048
         CR    R11,R4 .           COMPARE TO DUMPING DCB          20048
         BCR   X07,R14 .          RETURN IF NOT SYS1.DUMB DCB     20048
         L     R11,DMPTICCW .     GET CURRENT CHAIN PTR
         TM    DMPFLAG,X08 .      TEST FOR COMING FROM AE APP
         BO    DMPEODAD .         COMING FROM AE APP
         L     R9,X00(R11) .      SET UP FOR NEXT ROUTINE
         MVI   DMPTICCW,TIC .     SET UP TIC COMMAND CODE
         CLI   X13(R7),X08 .      IS THE DUMPING DEVICE=2314?     20048
         BNE   EODNRMA .          NO, GO TO WRITE EOF             20048
*        THIS CODE IS NEEDED WHEN  THERE IS NOT ENOUGH ROOM LEFT  20048
*        ON A 2314 TRACK TO WRITE AN EOF RECORD (WHEN SIX RECORDS 20048
*        HAVE BEEN WRITTEN).  SHOULD SIX RECORDS BE WRITTEN THEN  20048
*        WE MUST UPDATE CCHHR TO THE NEXT TRACK OR CYLINDER WHERE 20048
*        APPROPIATE.                                              20048
         BAL   R13,DMPCERTN .     GO TO UPDATE RTN
         B     EODS
         B     EOFNRMB .          GO FINISH EOF HANDLING
         B     EOFNRMB .          GO FINISH EOF HANDLING
EOFNRMB  EQU   *
         L     R11,DMPTICCW .     PICK UP CURRENT CHAIN PTR
         L     R9,X00(R11) .      GET CURRENT KEY AREA
         B     EODNRMB .          GO FINISH EOF HANDLING
         EJECT
         USING DMPWRWD,R9
EODNRMA  IC    R11,DMPRID .       PICK UP RCD NO. IN KEY          20048
         LA    R11,X01(R11) .     INCREMENT RCD NO.               20048
         STC   R11,DMPRID .       STORE RCD NO. INTO IOB          20048
         LA    R11,X01(R11) .     INCREMENT RCD NO.               20048
         STC   R11,DMPR .         STORE RCD NO. INTO KEY          20048
         B     EODNRMB .          GO FINISH EOF HANDLING
DMPEODAD EQU   *
         L     R9,X00(R11) .      SET UP FOR NEXT ROUTINE
EODNRMB  EQU   * .                                                20048
         LA    R11,DMPAPPAD .     GET ADDR OF NOP INSTR           20048
         ST    R11,DEBAPPAD .     STORE ADDR INTO DEB             20048
         XC    DMPKEYL(X03),DMPKEYL .CLEAR FIELD FOR EOF RECORD   20048
         MVI   DMPCCW4+X04,SLI .  TURN ON SILLY BIT               20048
         OI    DMPFLAG,X80 .      SET END OF DUMP FLAG            20048
         SR    R9,R9 .            CLEAR IOS REGISTER
         B     X08(R14) .         RETURN TO IOS                   20048
EODS     OI    DMPFLAG,EOFIND+PDIND .   SET EOF & PART DMP INDIC  20048
         BR    R14 .                   RETURN TO IOS              20048
         DROP  R9
         DROP  R10
         EJECT
DMPPCIAP EQU   * .                                                20048
         USING *,R15 .                                            20048
         TM    DMPFLAG2,X'40' .    IF 3330 NO-PCI              @PD64143
         BCR   1,R14 .             WANTED THEN RETURN          @PD64143
DMPPCIA2 EQU   * .                 PSEUDO PCI ENTRY            @PD64143
*                                  FOR NON-PCI 3330            @PD64143
*                                  PROCESSING                  @PD64143
         L     R12,CSWPTR .       GET PTR TO CURRENT CCW
         LA    R12,X00(R12) .     ZERO HIGH ORDER BYTE
         L     R13,DMPAPTR1 .     GET PTR TO NOP CCW
         CR    R12,R13 .          TEST TO SEE IF NORMAL PCI
         BE    DMPNOPCI .         IF EQUAL BRANCH TO NORMAL PROCESSING
         LA    R13,X08(R13) .     SEE IF NOP WAS EXECUTED
         CR    R12,R13 .          TEST FOR NOP
         BE    DMPNOPCI .         HANDLE AS NORMAL PCI PROCESSING
         BR    R14 .              HANDLE AS NOP CONDITION
DMPNOPCI EQU   *
         AIF   (&MULTIPR EQ 1).DMPEB5                             20048
         STM   R0,R1,MPSAVE+8 .   SAVE VOLITE REGISTERS           20048
.DMPEB5  ANOP                                                     20048
         BAL   R13,DMPINGRE .     GO TO RTN TO INCREMENT ADDRSAVE 20048
         SR    R9,R9 .            CLEAR IOS REGISTER
         AIF   (&MULTIPR EQ 1).DMPEB6                             20048
         L     R15,DMPDEBPC .     RESTORE BASE REG                20048
         LM    R0,R1,MPSAVE+8 .   RESTORE VOLITE REGISTERS        20048
.DMPEB6  ANOP                                                     20048
         TM    DMPFLAG,X'90' .    TEST FOR END OF DUMP            20048
         BNO   DMPNOVR
         NI    DMPCCWF8,PCIOFF                                    20048
         NI    DMPCCWF5,PCIOFF .  TURN PCI FLAG OFF IF ON         20048
         BR    R14 .              RETURN TO IOS
DMPNOVR  EQU   *
         TM    DMPCCWF5,PCION .   IS THE PCI FLAG ON IN CCW5      20048
         LA    R9,DMPCC2 .        SET UP DSECT
         BO    DMPCIONW .         TAKE THIS BRANCH IF PCI  ON     20048
         LA    R9,DMPCC1 .        SET UP DSECT
DMPCIONW EQU   *
         BAL   R13,DMPCICON .     GO TO STORAGE KEY RTN
         LA    R10,DMPCCW7 .      GET ADDR OF CCW CHAIN TO WORK   20048
         USING DMPCCWX,R10 .                                      20048
         LA    R12,DMPCCW6 .      SET UP FOR LATER USE            20048
         TM    DMPCCWF5,PCION .   IS THE PCI FLAG ON IN CCW5      20048
         BO    DMPPCION .         TAKE THIS BRANCH IF PCI  ON     20048
         NI    DMPFLAG,HDROFF .   SET HDR RECORD INDIC OFF        20048
         LA    R10,DMPCCW4 .      IF CCW8 WAS THE PCI THEN THIS   20048
*                                 CODE IS USED TO SET UP DSECT    20048
         LA    R12,DMPCCW9 .      SAVE FOR LATER USE              20048
         NI    DMPCCWF8,PCIOFF .                                  20048
DMPPCION EQU   * .                                                20048
         NI    DMPCCWF5,PCIOFF .  TURN PCI FLAG OFF IF ON         20048
         BAL   R13,DMPCERTN .     GO TO TRK SETUP RTN
         B     X00(R14) .         RETURN TO IOS
         B     DMPPCIAB .         END OF TRACK SITUATION
         B     DMPCEND .         END OF CYCL SITUATION
         B     DMPCIFIX .         NORMAL
DMPCEND  EQU   *
         OI    DMPFLAG2,X80 .     SET ON BIT TO TELL CE THAT
*                                 PCI UPDATED CCHHR FOR EOC
         BR    R14 .              RETURN TO IOS
DMPPCIAB EQU   *
         LA    R11,DMPCCW2 .      SET UP FOR TC TO SEARCH         20048
         ST    R11,0(R12) .       SAVE CCW2 ADDR IN APPR CCW      20048
         B     DMPCIOVR .         BRANCH AROUND STORE
DMPCIFIX EQU   *
         ST    R10,X00(R12) .     SAVE PTR TO NEXT CHAIN
DMPCIOVR EQU   *
         ST    R10,DMPTICCW .     SAVE NEXT CCW CHAIN
         OI    DMPCCWB+4,PCION+COMCHAN .                          20048
         MVC   DMPCCWB+1(3),DMPADSAV+1 .                          20048
         MVI   DMPCCWC,NOP .      SET NEXT CCW TO A NOP
         MVI   X00(R12),TIC .     TIC TO NEXT
         BAL   R13,DMPSWTCH .     GO TO SWITCH NEXT AND CURRENT
         BR    R14 .                                              20048
         DROP  R3
         DROP  R10
DMPINGRE EQU   * .                                                20048
         BALR  R9,0 .             SET UP ADDRESABILITY            20048
         USING *,R9 .                                             20048
         LM    R10,R11,DMPADSAV . PICK UP CURR ADDR AND END ADDR  20048
         LA    R10,X400(R10) .    INCREMENT BY 1K                 20048
         CR    R10,R11 .          IS THIS THE END OF DUMP         20048
         ST    R10,DMPADSAV .     SAVE NEW ADDR                   20048
         BCR   4,R13 .            RETURN IF NOT END OF DUMP       20048
         AIF   (&MULTIPR EQ 1).DMPMP3                             20048
         TM    DMPSTPTR,X'84' .   TEST FOR DUMPING LOW PSA        20048
         BO    PSADUMP .          IF YES,BRANCH                   20048
         TM    DMPSTPTR,X'88' .   TEST FOR DUMPING HIGH PSA       20048
         BO    DMPAOVER .         IF YES,BRANCH                   20048
         TM    DMPSTPTR,X'40' .   TEST FOR HI-4K                  20048
         BZ    MPTEST .           IF NOT,BRANCH                   20048
         TM    DMPSTPTR,X'80'  .  BUFFER AVAIL FOR MOVE           20048
         BZ    SETEND .            NO-BRANCH                      20048
         ST    R13,MPSAVE+4 .      SAVE REG                       20048
         ST    R7,MPSAVE .         SAVE REG                       20048
         LR    R7,R2 .             SET UP CB ADDR                 20048
         LA    MPBASE,MPSETUP .                                   20048
         BAL   R13,MPSET2 .        SET UP FOR HI CORE MOVE        20048
         L     R13,MPSAVE+4 .      RESTORE REG                    20048
         L     R7,MPSAVE .         RESTORE REG                    20048
         BR    R13 .               RETURN TO CALLER               20048
SETEND   EQU   * .                                                20048
         L     R10,DMPADSAV .      GET ADDSAVE                    20048
         A     R10,FOR96 .         GET PTR TO END OF CORE         20048
         ST    R10,DMPEND .        SET END INDICATOR              20048
         OI    DMPSTPTR,X'88' .    INDICATE HI PSA TO DUMP        20048
         BR    R13 .                                              20048
PSADUMP  NI    DMPSTPTR,X'FB' .    TURN OFF LOW PSA DUMP BIT      20048
         L     R10,FOR96 .                                        20048
         ST    R10,DMPADSAV .      STORE FOR NEXT WRITE           20048
         TM    DMPFLAG,1 .         TEST FOR LIST REQ              20048
         BZ    NOTLIST .           IF NOT,BRANCH                  20048
         L     R10,DMPPLSTP .                                     20048
         MVC  DMPEND+1(3),5(R10) . MOVE LIST END ADDR TO DMPEND   20048
         BR   R13 .              RETURN                           20048
NOTLIST  MVC   DMPEND+1(3),TWO56K+1 .  MOVE I56K INTO END ADDRESS 20048
         BR    R13 .             RETURN                           20048
MPTEST   TM    DMPFLAG,1 .       TEST FOR LIST REQ                20048
         BNO   MPTEST1 .         IF NOT,BRANCH                    20048
         L     R10,DMPPLSTP .    LOAD CURRENT LIST @              20048
LISTPROC L     R11,DMPADSAV .    LOAD CURRENT DUMPING ADDR        20048
LOOPX    SRL   R11,13 .          GET INDEX FOR FSSEMAP            20048
         CLC   FSSEMAP(31,R11),FSSEMAP+X01(R11) .TEST FOR 256K ON 20048
         BNE   ONLINEX  .         BRANCH IF NOT                   20048
         CLI   FSSEMAP(R11),XFF . TEST FOR OFFLINE                20048
         BNE   ONLINEX .          BRANCH IF NOT                   20048
         SLL   R11,13 .           RESTORE TO ADDRESS              20048
         A     R11,TWO56K .       INCREMENT FOR NEXT COMPARE      20048
         C     R11,4(R10) .       DOES IT EXCEED END LIST @       20048
         BH    DMPLIST .          YES,GET NEXT LIST ENTRIES       20048
         ST    R11,DMPADSAV .     ST. ADDR INTO CURR DMP@         20048
         B     LOOPX .            GO CHECK NEXT 256K              20048
ONLINEX  SLL   R11,13 .           RESTORE ADDRESS                 20048
         C     R11,4(R10) .       CHK FOR END256K > LIST END      20048
         BH    STORE10 .          IF SO,BRANCH                    20048
         ST    R11,DMPEND .       ELSE STORE HI 256K ADDRESS      20048
         BR    R13 .              RETURN                          20048
STORE10  MVC   DMPEND+1(3),5(R10) .  MOVE END LST @ INTO DMPEND   20048
         BR    R13 .              RETURN                          20048
MPTEST1  EQU   * .                                                20048
         L     R11,DMPADSAV .     LOAD ADDRESS TO BE DUMPED       20048
         LA    R11,0(R11) .       CLEAR HI ORDER BYTE             20048
         SRL   R11,13 .           DIVIDE FOR INDEX INTO FSSEMAP   20048
CHECKLOP EQU   * .                                                20048
         CLC   FSSEMAP(31,R11),FSSEMAP+X01(R11)  TEST FOR 256K ON 20048
         BNE   FINCHK .           BRANCH IF NOT                   20048
         CLI   FSSEMAP(R11),XFF . TEST FOR OFFLINE                20048
         BNE   FINCHK .           BRANCH IF NOT                   20048
         LA    R11,X20(R11) .     INCREMENT TO NEXT 256K BOUNDARY 20048
         B     CHECKLOP .         LOOP                            20048
FINCHK   EQU   * .                                                20048
         SLL   R11,13 .           RESTORE REG                     20048
         ST    R11,DMPADSAV .     STORE ADDRESS TO BE DUMPED      20048
         A     R11,TWO56K .       INCREMENT FOR DMPEND            20048
         L     R10,16(R0) .       LOAD ADDRESS OF CVT             20048
         C     R11,164(R10) .     SEE IF END OF CORE              20048
         BL    STOREND .          IF NOT,BRANCH                   20048
         TM    DMPSTPTR,X'80' .   TEST FOR BUFFER OBTAINED        20048
         BZ    STOREND .          IF NOT,BRANCH                   20048
LST4K    EQU   * .                                                20048
         S     R11,FOR96 .        DECREMENT BY 4K                 20048
         ST    R11,DMPEND .       SET UP TO STOP AT HI-4K         20048
         OI    DMPSTPTR,X'40' .   TURN ON LAST 4K BIT             20048
         BR    R13 .              RETURN                          20048
STOREND  ST    R11,DMPEND .       STORE ENDING ADDRESS            20048
         BR    R13 .              RETURN                          20048
.DMPMP3  ANOP                                                     20048
         AIF   (&MULTIPR NE 1).DMPM13                             20048
         TM    DMPFLAG,1 .        IS THIS A LIST REQUEST?         20048
         BO    DMPLIST .          YES, CONTINUE AT LIST PROCESS   20048
.DMPM13  ANOP                                                     20048
DMPAOVER OI    DMPFLAG,X'90' .    SET EOD AND SUCCESS BITS        20048
         BR    R13 .              RETURN TO MAINLINE              20048
DMPLIST  EQU   *  .                                               20048
         L     R12,DMPPLSTP .     GET STORAGE LIST POINTER        20048
DMPLISTN EQU   * .                                                20048
         TM    4(R12),X'80' .     IS THIS END OF LIST             20048
         AIF   (&MULTIPR EQ 1).DMPMP4                             20048
         BO    TSTMPNUC .                                         20048
         AGO   .DMPMP2                                            20048
.DMPMP4  ANOP                                                     20048
         BO    DMPAOVER .         END OF DUMP EXIT                20048
.DMPMP2  ANOP                                                     20048
         LA    R12,8(R12) .       UPDATE TO NEXT ENTRIES          20048
         TM    0(R12),X'40' .      IS THIS ENTRY VALID         @PD61924
         BO    DMPLISTN .         NO, SEE IF END OF LIST          20048
         ST    R12,DMPPLSTP .     SAVE PRESENT PTR TO STOR. LIST  20048
         LM    R10,R11,0(R12) .   PICK UP NEW START/STOP ADDRESS  20048
         STM   R10,R11,DMPADSAV . STORE NEW START/STOP ADDRESSES  20048
         MVI   DMPEND,00 .         CLEAR POSSIBLE              @PD61924
*                                  'END-OF-LIST' INDICATOR     @PD61924
         SR    R9,R9 .            ZERO IOS REGISTER               20048
         AIF   (&MULTIPR EQ 1).DMPMPX                             20048
         B     LISTPROC .         CHECK 256K ONLINE               20048
         AGO   .DMPMPZ                                            20048
.DMPMPX  ANOP                                                     20048
         BR    R13 .              RETURN TO CALLER                20048
.DMPMPZ  ANOP                                                     20048
         AIF   (&MULTIPR EQ 1).DMPMPA                             20048
TSTMPNUC TM    DMPSTPTR,X01 .                                     20048
         BZ    DMPAOVER .         IF NOT BRANCH                   20048
         LA    R11,MPSETUP .      LOAD MPSETUP BASE ADDRESS       20048
         B     MPSET2 .           BRANCH TO WRITE 2ND PSA         20048
MPSETUP  EQU   * .                                                20048
         USING *,MPBASE .                                         20048
         USING DMPSECT,REG7 .                                     20048
         USING CVTSECT,R3 .                                       20048
         B     MPSET2 .                                           20048
         LA    R15,DMPSTPTR .     LOAD ADDRESS OF GM AREA         20048
         GETMAIN EC,A=(R15),SP=252,LV=4096  .                     20048
         LTR   R15,R15 .          TEST FOR SUCCESS                20048
         BCR   7,MPRETURN .       IF NOT,RETURN WITH 4            20048
         OI    DMPSTPTR,X'84' .   SET CORE GOTTEN BIT AND         20048
*                                 DUMPING LOW ORDER 4K            20048
*                                                                 20048
*                                                                 20048
* HERE TO MOVE PHYSICAL 0K TO 4K INTO BUFFER                      20048
         L     R1,DMPSTPTR .      LOAD ADDRESS OF GOTTEN CORE     20048
         IC    R15,CPUID .        PICK UP CPU ID AND              20048
         STC   R15,CPUSAVE .      SAVE FOR SECOND ENTRY           20048
OTHERCPU SR    R15,R15 .          ZERO WORK REGISTER FOR START    20048
         SR    R0,R0 .                                            20048
PREFIXED A     R0,FOR96 .         INCREMENT TO NEXT 4K BOUNDARY   20048
MOVE     MVC   0(256,R1),0(R15) . MOVE PSA INTO BUFFER            20048
         LA    R1,256(R1) .       INCREMENT FOR NEXT MOVE         20048
         LA    R15,256(R15) .     INCREMENT FOR NEXT MOVE         20048
         CR    R15,R0 .           CHECK FOR 4096 MOVED            20048
         BL    MOVE .             LOOP                            20048
DONE     ST    R1,DMPEND .        SET UP ENDING @ FOR PSA WRITE   20048
         L     R15,DMPSTPTR .     LOAD STARTING ADDRESS           20048
         LA    R15,0(R15) .       CLEAR HIGH ORDER BYTE           20048
         ST    R15,DMPADSAV .     STORE FOR WRITE INFO            20048
         SR    R15,R15 .          SET UP RETURN CODE              20048
         BR    MPRETURN .         RETURN TO CALLER                20048
MPSET2   EQU   * .                                                20048
         TM    DMPSTPTR,X'80' .   TEST FOR CORE GOTTEN            20048
         BCR   8,MPRETURN .       RETURN IF CORE NOT GOTTEN       20048
         OI    DMPSTPTR,X'88' .   TURN ON DUMPING HI CORE BIT     20048
         L     R1,DMPSTPTR .      LOAD ADDRESS OF GOTTEN          20048
* HERE TO MOVE PHYSICAL HIGH CORE - 4K INTO BUFFER                20048
         L     R15,PREFIX2 .      GET PTR TO OTHER PREFIX         20048
         CLC   CPUID(1),CPUSAVE . COMPARE TO SEE IF ON SAME CPU   20048
         BNE   OTHERCPU .         IF NOT SAME CPU PRINT LOGICAL 0 20048
         N     R15,PREFIXNI .     ROUND TO A TWO K BOUNDARY       20048
         LR    R0,R15 .                                           20048
         B     PREFIXED .         PRINT PREFIX AREA               20048
TWO56K   DC    F'262144' .        256K SIZE                       20048
TOK      DC    F'2048' .                                          20048
FOR96    DC    F'4096' .                                          20048
MPSAVE   DC    4F'0' .                                            20048
PREFIXNI DC    X'FFFFF000' .                                      20048
PREFIX2  EQU   X'2B0' .                                           20048
CPUID    EQU   X'2B8' .                                           20048
CPUSAVE  DS    X .                                                20048
.DMPMPA  ANOP                                                     20048
         DROP  R9 .                                               20048
         EJECT                                                    20048
         DS    0H .                                               20048
DMPTASKW EQU   * .                                                20048
         USING CVTSECT,R3 .                                       20048
         BALR  R8,X00 .           SET UP BASE                     20048
         USING *,R8 .                                             20048
         L     R10,CVTHEAD .      GET PTR TO TOP TCB              20048
         USING TCBSECT,R10 .                                      20048
         L     R10,TCBOTC .       GET PTR TO MASTER SCHEDULER TCB 20048
         B     TCBCOMP .          TEST FOR MS TCB=CURRENT         20048
TASKCK   TM    CVTDAR,CVTLOCK .   Q. NON DISP ENTRY               20048
         BO    SETNON1 .          YES BRANCH                      20048
         NI    TCBDAR+X02,ALL-TCBNDSVC  SET SECOND DISP           20048
         NC    TCBDAR+X01(3),TCBDAR+X01 Q. STILL NON DISP         20048
         BNZ   NOTPRIM .          YES-BRANCH                      20048
         NI    TCBFLGS+4,ALL-NDBIT . TURN OFF PRIMARY             20048
         L     R11,CVTABEND .     GET ADDR OF SEC CVT             20048
         L     R11,X28(R11) .     GET ADDR OF TASK SWITCH RTN     20048
         LR    R6,R14 .           SAVE VOLITILE REGISTER          20048
         BALR  R14,R11 .          GO TO TASK SWITCH ROUT          20048
         LR    R14,R6 .           RELOAD VOLITILE REGISTER        20048
NOTPRIM  EQU   * .                                                20048
         L     R10,TCBTCB .        GET NEXT TCB                   20048
TCBCOMP  EQU   * .                                                20048
         CR    R10,TCBREG .        CURRENT TASK                   20048
         BE    NOTPRIM .           YES SKIP                       20048
         LTR   R10,R10 .          Q. NO MORE TASKS                20048
         BZ    TSKRMV .           GO TEST FOR MP SYSTEM           20048
         B     TASKCK .                                           20048
SETNON1  EQU   * .                                                20048
         OI    TCBDAR+X02,TCBNDSVC  SET SECONDARY                 20048
         OI    TCBFLGS+4,NDBIT .  SET PRIMARY                     20048
         B     NOTPRIM .          GET ANOTHER TASK                20048
TSKRMV   TM    CVTDAR,CVTLOCK .   TEST FOR GOING OR COMING        20048
         BO    DMPSTESR .                                         20048
*   THE FOLLOWING CODE WILL RESUME THE GTF TRACING FUNCTION.      21014
         DROP  R10 .                                              21014
         USING TCBSECT,R4 .       SET DSECT FOR CURRENT TCB       21014
         TM    TCBFLGS,TCBGTOFM . IS GTF TRACE SUSPENDED          21014
         BNO   ONSUPRTR .         NO..NO NEED TO RESUME IT.       21014
         NI    TCBFLGS,FF-TCBGTOFM  RESET TRACE SUSPENDED INDICTR 21014
         HOOK  EID=IHLMSVON .     RESUME GTF TRACING FUNCTION.    21014
         BR    R13 .              RETURN                          21014
ONSUPRTR EQU   * .                                                21014
         L     R1,CVTBTERM .      GET PTR TO ABTERM               20048
         L     R1,8(R1) .         GET ADDR OF TRACE NOP           20048
         MVI   1(R1),X'00' .      TURN ON TRACE                   20048
         AIF   (&MULTIPR EQ 1).DMP109                             20048
         TM    DMPSTPTR,BUFGOT .  BUFFER OBTAINED                 20048
         BNO   DMPEXIT .          SKIP FREEMAIN                   20048
         L     R1,DMPSTPTR .      GET BUFFER ADDR.                20048
         FREEMAIN   R,LV=4096,A=(1),SP=252  .                     20048
DMPEXIT  EQU   * .                                                20048
.DMP109  ANOP                                                     20048
         BR    R13 .                                              20048
DMPSTESR EQU   * .                                                20048
** THE FOLLOW GTF CODE SUSPENDS TRACE TO ASSURE PRESERVATION OF   21014
*   THE CURRENT TRACE TABLE ENTRIES UNTIL THEY ARE DUMPED.        21014
         TM    CVTGTFST,CVTGTFS . IS GTF ACTIVE                   21014
         BNO   OFSUPRTR .         NO...DONT EXECUTE GTF CODE.     21014
         TM    CVTGTFST,CVTFORM . IS GTF TO FORMAT                21014
         BCR   14,R13 .           NO,SKIP TRACE                   21014
         TM    TCBFLGS,TCBGTOFM . IS GTF TRACE SUSPENDED          21014
         BCR   1,R13 .            YES..NO NEED TO SUSPEND TRACE   21014
         HOOK  EID=IHLMSVOF .     TURN OFF GTF TRACING FUNCTION   21014
         OI    TCBFLGS,TCBGTOFM . SET TRACE SUSPENDED INDICATOR   21014
         BR    R13 .              RETURN                          21014
OFSUPRTR EQU   * .                                                21014
         L     R15,CVTBTERM .     GET PTR TO ABTERM               20048
         L     R15,8(R15) .       GET PTR TO TRACE NOP            20048
         MVI   1(R15),X'F0' .     TURN OFF TRACE              AD  M0482
         AIF   (&MULTIPR EQ 1).DMP108                             20048
         L     R15,CVTMPCVT .     GET PTR TO MP CVT               20048
         USING IEAMPCVT,R15 .     SET UP DSECT FOR MP CVT         20048
         L     R15,CVTTKRM .      PICK UP PTR TO TASK SWIT RTN    20048
         DROP  R15 .                                              20048
         DROP  R7 .                                          AD  A56052
         LR    R6,R14 .           SAVE RETURN REGISTER TO SVC 3   20048
         BALR  R14,R15 .          GO TO MP TASK REMOVAL ROUTINE   20048
         LR    R14,R6 .           RESOTORE RETURN ADDR IN REG 14  20048
.DMP108  ANOP
         BR    R13 .              RETURN                          20048
         DROP  R3 .
         DROP  R8 .
         EJECT
DMPCERTN EQU   *
         USING DEBSECT,R3 .                                       20048
         USING DMPWRWD,R9
         USING DMPSECT,R2
         ST    R8,DMPASAV2 .      SAVE IOS REGISTER
         BALR  R8,X00 .           ESTABLISH BASE
         USING *,R8
         SR    R11,R11 .          ZERO WORK REGISTER         AD  A51118
         CLC   DMPRID(1),DMPDINFO   IS THIS END OF TRACK          20048
         BNL   DMPCERT1 .         YES, TEST FOR END OF CYCLINDER  20048
         MVC   DMPCC(X04),DMPCCID RESTORE CCHH TO KEY
         IC    R11,DMPRID .       GET NO. OF RECORD JUST WRITTEN  20048
         LA    R11,1(R11) .       INCREMENT BY ONE                20048
         STC   R11,DMPRID .       SAVE RECORD NO. IN SEARCH FIELD 20048
         LA    R11,1(R11) .       INCREMENT BY ONE                20048
         STC   R11,DMPR .         SAVE NEW RECORD NO. IN KEY FLD  20048
         L     R8,DMPASAV2 .      RESTORE IOS REGISTER
         SR    R9,R9 .            ZERO IOS REGISTER
         B     X0C(R13) .         RETURN TO MAINLINE
DMPCERT1 EQU   * .
         CLC   DMPHHID+1,DMPDINFO+1 .   CYLINDER FULL?            20048
         BNL   CYCFULL .          IF SO,BRANCH                    20048
         IC    R11,DMPHHID+1 .    SET UP TO INCREMENT HEAD        20048
         LA    R11,1(R11) .       INCREMENT BY ONE                20048
         STC   R11,DMPHH+1 .      STORE INT KEY                   20048
         STC   R11,DMPHHID+1 .    STORE INTO SEARCH ID            20048
CYCTEST1 CLC   DMPCCID(4),DEBENDCC . TEST FOR END OF EXTENT       20048
         BH    CYCENDDP .         RETURN TO MAINLAIN         AD  A54862
CYCTEST2 MVI   DMPRID,X00 .       ZERO RCD NO. IN SEARCH ID       20048
         MVI   DMPR,X01 .         SET RCD NO IN KEY               20048
         L     R8,DMPASAV2 .      RESTORE IOS REGISTER
         SR    R9,R9 .            ZERO IOS REGISTER
         B     X04(R13) .         IF END,BRANCH                   20048
CYCFULL  IC    R11,DMPCCID .      GET 1ST HALF OF CYL ADDR   AD  A51118
         SLL   R11,8 .            PREPARE TO GET REMAINDER   AD  A51118
         IC    R11,DMPCCID+1 .    COMPLETE CYL ADDR          AD  A51118
         LA    R11,X01(R11) .     INCREMENT BY 1             AD  A51118
         STH   R11,DMPCC .        UPDATE CYL ADDR FOR NXT WR AD  A51118
         MVC   DMPCCID(X02),DMPCC . UPDATE CYL ADDR IN       AD  A51118
*                                 SEARCH ARGUMENT            AD  A51118
         NI    DMPHH+1,X'00' .    SET HH TO 0                     20048
         NI    DMPHHID+1,X'00' .  SET HH TO 0                     20048
         CLC   DMPCCID(4),DEBENDCC . TEST FOR END OF EXTENT       20048
         BH    CYCENDDP .         RETURN TO MAINLAIN         AD  A60156
         LA    R13,X04(R13) .     THIS MAKES A RETURN OF 8 INSTEAD OF 4
         B     CYCTEST2 .         TEST FOR END OF EXTENT
CYCENDDP EQU   * .
         L     R8,DMPASAV2 .      RESTORE IOS REGISTER
         SR    R9,R9 .            ZERO IOS REGISTER
         BR    R13                RETURN TO MAINLINE
         DROP  R8
         EJECT                                                    20048
DMPCICON EQU   * .                                                20048
         AIF   (&MULTIPR EQ 1).DMPAW1                             20048
         ST    R8,DMPASAV2 .      SAVE IOS REGISTER
         BALR  R8,X00 .           ESTABLISH BASE
         USING *,R8 .
         L     R10,DMPADSAV .     GET ADDR TO BE DUMPED           20048
.DMPAW1  ANOP                                                     20048
         SR    R12,R12 .          ZERO WORK REGISTER              20048
         ISK   R12,R10 .          GET STOR KEY OF ADDR TO DUMP    20048
         SRL   R12,X03 .          MOVE TO  POSITION FOR STORING   20048
         AIF   (&MULTIPR EQ 1).DMPMP5                             20048
         TM    DMPSTPTR,X'0C' .   TEST FOR DUMP OF PSA'S          20048
         BZ    NOTMP .            IF NOT,BRANCH                   20048
         L     R11,DMPSTPTR .     LOAD ADDRESS OF BUFFER          20048
         LA    R11,0(R11) .       CLEAR HI ORDER BYTE             20048
         SR    R10,R11 .          GET ACTUAL CORE ADDRESS         20048
         TM    DMPSTPTR,X'04' .   TEXT FOR DUMP OF LOW PSA        20048
         BO    NOTMP .            IF YES,BRANCH                   20048
         L     R11,16(R0) .       LOAD ADRESS OF CVT              20048
         L     R11,164(R11) .     LOAD ADDRESS PF CVTMZ00         20048
         LA    R10,1(R10,R11) .   ROUND UP TO 256K BOUNDRY        20048
NOTMP    EQU   * .                                                20048
.DMPMP5  ANOP                                                     20048
         ST    R10,DMPFLGKY .     STORE ADDR INTO KEY FIELD       20048
         STC   R12,DMPFLGKY .     STORE PROTECT KEY INTO KEY      20048
         AIF   (&MULTIPR EQ 1).DMPZ13                             20048
         L     R8,DMPASAV2 .      RESTORE IOS REGISTER
.DMPZ13  ANOP                                                     20048
         BR    R13 .              RETURN
         DROP  R9
DMPSWTCH EQU   *
         L     R11,DMPAPTR1 .     GET CURRENT PTR
         L     R12,DMPAPTR2 .     GET NEXT PTR
         ST    R11,DMPAPTR2 .     MAKE CURRENT NEXT
         ST    R12,DMPAPTR1 .     MAKE NEXT CURRENT
         MVI   DMPTICCW,TIC .     TIC TO NEXT
         BR    R13 .              RETURN
*
DMPUPDAT EQU   *
         USING DMPWRWD,R12
         MVC   DMPCCID(X04),DMPCC MOVE LAST KEY TO SRCH ID
         IC    R9,DMPR .         PICK UP LAST RCD
         BCTR  R9,X00 .          DECREMENT BY ONE
         STC   R9,DMPRID .       STORE IN SEARCH ARGUMENT
         SR    R9,R9 .           ZERO IOS REGISTER
         BR    R13 .             RETURN TO MAINLAIN
         DROP  R12
         EJECT
DEBSECT  DSECT .                                                  20048
DEBTCB   DS    CL4 .              ADDRESS OF TCB                  20048
DEBLINK  DS    CL4 .              ADDR OF NEXT DEB                20048
         DS    CL4 .                                              20048
DEBFLGS  DS    CL1 .                                              20048
         DS    CL3 .                                              20048
         DS    CL4 .                                              20048
DEBPRIOR DS    CL1 .              PRIORITY                        20048
         DS    CL3 .                                              20048
DEBDCB   DS    CL4 .              ADDR OF DCB                     20048
DEBAPPAD DS    CL4 .              ADDR OF IO APPEND               20048
         DS    CL2 .                                              20048
DEBUCBAD DS    CL2 .              UCB ADDR                        20048
DEBBINUM DS    CL2 .              BIN NUMBER                      20048
DEBSTRCC DS    CL2 .              START CYL ADDR                  20048
DEBSTRHH DS    CL2 .              START TRACK ADDR                20048
DEBENDCC DS    CL2 .              END CYL ADDR                    20048
DEBENDHH DS    CL2 .              END TRACK ADDR                  20048
DEBNOTRK DS    CL2 .              NUMBER OF TRACKS ALLOCATED      20048
*
*
DMPCCWX  DSECT .                                                  20048
DMPCCWA  DS    D .                                                20048
DMPCCWB  DS    D .                                                20048
DMPCCWC  DS    D
*
*
DMPWRWD  DSECT
DMPCC    DS    2X .               CC CYLINDER
DMPHH    DS    2X .               HH HEAD
DMPR     DS    1X .               R  RECORD
DMPKEYL  DC    X'04' .            KEY LENGTH
DMPDATAL DC    X'0400' .          DATA LENGTH
DMPFLGKY DS    1X .               FLAG KEY
DMPADDKY DS    3X .               ADD KEY
         EJECT
SCVTSECT DSECT .
         SCVT
         MEND                                                     20048
