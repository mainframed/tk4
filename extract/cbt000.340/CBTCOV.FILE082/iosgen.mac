         MACRO
&NAME    IOSGEN &FUNC,&PARM,&REG,&VAR,&AUTH=CSECTNME,&LINKR=14
         GBLB  &EXECN,&EXECF            MULTIPLE EXPANSION SWITCHES
         GBLB  &EXECS                   MULTI SWITCH FOR SKUPDT   20001
         LCLC  &HEX,&SUFFIX             CHARACTER VARIABLES
         LCLC  &LBL                                               20001
.* 367090,368730                                                 M5464
.* 805200---CORRECT 'END OF LCH'  TEST,REL21                     A43241
.*                                                                M0100
&SUFFIX  SETC  '&SYSNDX'(2,4)           SET 3 CHARACTER SYSNDX VALUE
         AIF   ('&FUNC' EQ 'PTHAVL').PTH010
         AIF   ('&FUNC' EQ 'DOM').DOM010
         AIF   ('&FUNC' EQ 'SELSSM').SSM000
         AIF   ('&FUNC' EQ 'UCBCHM').NIP010
         AIF   ('&FUNC' EQ 'MAP').MAP040
         AIF   ('&FUNC' EQ 'VARY').VAR010
         AIF   ('&FUNC' EQ 'UCBFL1').FLGS010
         AIF   ('&FUNC' EQ 'DETECTOR').DTCT001
         AIF   ('&FUNC' EQ 'ENQUE').FIFONQ
         AIF   ('&FUNC' EQ 'TP').TPGEN  TEST FOR TP               20002
         AIF   ('&FUNC' EQ 'RESTORE').IECRES                      20001
         AIF   ('&FUNC' EQ 'SIMINT').SIMINT
         AIF   ('&FUNC' EQ 'SKUPDT').SKUPDT                       20001
         AIF   ('&FUNC' EQ 'GETQRQE').RQE00
         AGO   .IOSNG3                  SKIP TO MNOTE/INVALID FUNC.
.MAP040  AIF   ('&AUTH' EQ 'IEAMP650').MAP040A                    19026
         AIF   ('&AUTH' EQ 'IEEMPVCH').MAP040A                    19026
         AIF   ('&AUTH' EQ 'IEEMPVCP').MAP040A                    19026
         AIF   ('&AUTH' EQ 'IEE3603D').MAP040A                    M0404
         AIF   ('&AUTH' EQ 'IGC6203D').MAP040A                    19026
         AIF   ('&AUTH' EQ 'IGC0405I').MAP040A                    19026
         AIF   ('&AUTH' EQ 'ICFBDE00').MAP040A                   S21167
         AIF   ('&AUTH' EQ 'ICFBIE00').MAP040A                   S21167
         AGO   .IOSNG1                  UNAUTHORIZED USE MNOTE.   19026
.MAP040A SPACE 1                                                  19026
***********************************************************************
         AIF   (&VAR(1) EQ 1).MAP041
         AIF   (N'&REG LT 7).IOSNG2  IF CALLER SKIMPS ON WKREGS, MNOTE.
*        MACRO DEFINITION - PATH MAPPING FOR UNIPROCESSING
*                                                                     *
*        THIS MACRO, OWNED AND MAINTAINED BY IOS PERSONNEL, CREATES   *
*             A 1 - 4 ENTRY MAP WITH EACH 2 - BYTE ENTRY HAVING THE   *
*             FOLLOWING FORM:                                         *
*             *****************************************************   *
*             * 4 BIT      * 4 BIT      * 4 BIT      * 4 BIT      *   *
*             * ONLINE /   * CHANNEL    * CONTROL    * DEVICE     *   *
*             * OFFLINE    * ADDRESS    * UNIT       * ADDRESS    *   *
*             * INDICATOR  *            * ADDRESS    *            *   *
*             *****************************************************   *
*              WHERE 0000 = ONLINE (PATH AVAILABLE)                   *
*                    0001 = LAST ENTRY IN MAP                         *
*                    0010 = OFFLINE (PATH NOT AVAILABLE)              *
*                                                                     *
         AGO   .MAP042
.MAP041  AIF   (N'&REG LT 4).IOSNG2  IF CALLER SKIMPS ON WKREGS, MNOTE.
*        MACRO DEFINITION-PATH MAPPING FOR MULTIPROCESSING            *
*              THIS MACRO,OWNED AND MAINTAINED BY IOS PERSONNEL,      *
*                  CREATES A 2 ENTRY MAP OF THE FOLLOWING FORM;       *
*                                     (CPUA)   (CPUB)                 *
*                  ************************************               *
*                  *       *        *        *        *               *
*   PRIMARY PATHS  *  DEVICE NAME   *   00   *   01   *               *
*                  ************************************               *
*                  *       *        *        *        *               *
* SECONDARY PATHS  *  DEVICE NAME   *   01   *   00   *               *
*                  ************************************               *
*                  WHERE:  00 MEANS PATH NOT AVAILABLE                *
*                          01 MEANS PATH AVAILABLE
*              WHEN THERE ARE ONLY TWO PATHS (ONE FROM EACH CPU),     *
*              DEVICE NAME IN THE FIRST AND SECOND ENTRIES ARE        *
*              THE SAME AND PATHS FROM EACH CPU FOR THE SECOND ENTRY  *
*              ARE MARKED NOT AVAILABLE.                              *
.MAP042  ANOP
*              FOLLOWING ARE THE PARAMETERS WHICH MUST BE             *
*              SPECIFIED IN THE 'IOSGEN' CALL --                      *
*        IOSGEN  &FUNC,&PARM,(&REG(1),&REG(2),&REG(3),&REG(4)),&VAR   *
*              OR THE SAME WITH THE EXCEPTION '...,(&VAR(1),&VAR(2))' *
*              WHERE --                                               *
*                  1.&FUNC-MAP                                        *
*                  2.&PARM-NUMBER OF A REG WHICH POINTS TO 2 WORD     *
*                      AREA IN WHICH MAP IS TO BE CREATED,FOLLOWED    *
*                      BY A SIXTEEN WORD AREA IN WHICH THE REGS       *
*                      ARE TO BE SAVED.                               *
*                  3. &REG-OPERAND SUBLIST WHICH DEFINES FOUR TO SEVEN*
*                      REGISTERS WHICH MAY BE USED BY THE ROUTINE --  *
*                      UNIPROCESSING REQUIRES 7 REGISTERS, MULTI-     *
*                      PROCESSING REQUIRES FOUR REGISTERS.            *
*                      THE FIRST (&REG(1)) MUST CONTAIN THE ADDRESS   *
*                      OF THE UCB FOR WHICH PATHS ARE TO BE DETERMINED*
*                      THE LAST OF THE REQ'D REGS MUST SPECIFY THE REG*
*                      TO BE USED AS THE BASE FOR THIS ROUTINE.       *
*                      *** CAUTION -- IT IS ADVISED THAT THE CALLER   *
*                      NOT SPECIFY HIS OWN BASE REGISTER, AS A 'DROP' *
*                      IS ISSUED AT THE END OF THIS EXPANSION.        *
*                                                                     *
*                      THE OTHER REGISTERS SPECIFIED ARE ONLY NEEDED  *
*                      TO PREVENT CONFLICTS WITHIN THIS CODE.         *
*                      THEIR USE WILL BE TRANSPARENT TO THE INVOKING  *
*                      CSECT.                                         *
*                  4.&VAR - A SINGLE OPERAND, '0', FOR UNIPROCESSING, *
*                           OR AN OPERAND SUBLIST OF TWO PARAMETERS - *
*                      &VAR(1), '1', FOR MULTIPROCESSING AND ...      *
*                      &VAR(2),IF ZERO OR OMITTED, RESULTS IN NORMAL  *
*                              CODE GENERATION.                       *
*                              IF ONE = SPECIFIC REQUEST FOR EXTRA    *
*                                       CODE TO ENSURE THAT CHANNEL   *
*                                       IS STARTED FROM THE 'LCH'     *
*                                       RATHER THAN FROM 'EXCP'.      *
*                  THE RETURN REGISTER FOR THIS SUBROUTINE MAY BE     *
*                  SPECIFIED BY ADDING THE KEYWORD PARM 'LINKR=XX',   *
*                  WHERE 'XX' DENOTES THE REGISTER TO BE USED.        *
*                  DEFAULT IS 'LINKR=14'.                             *
*                                                                     *
***            THE KEYWORD PARAMETER 'AUTH=CSECTNME' MUST ALSO BE   ***
***            SPECIFIED, NOTING THE CSECT NAME INVOKING THE MACRO. ***
***********************************************************************
         SPACE 1
         AIF   (&VAR(1) EQ 0).MAP030        ('UNI-PROC')
         SPACE 1
***********************************************************************
*        REGISTER DEFINITION                                          *
***********************************************************************
         SPACE 1
IECIMPAR EQU   &PARM                    PARAMETER REGISTER
IECIMUCB EQU   &REG(1)                  UCB REGISTER
IECIMWK1 EQU   &REG(2)                  WORK REGISTER
IECIMWK2 EQU   &REG(3)                  WORK REGISTER
IECIMBAS EQU   &REG(4)                  BASE REGISTER
         SPACE 1
***********************************************************************
*        UCB DEFINITION AND FLAGS                                     *
***********************************************************************
         SPACE 1
IECIMALC EQU   1                        UCB ALLOCATION CHAN MASK
IECIMCHN EQU   4                        CHAN ADDR FIELD IN UCB
IECIMUNT EQU   5                        UNIT ADDR FIELD IN UCB
IECIMLCI EQU   10                       LOGICAL CHAN INDEX IN UCB
IECIMCHM EQU   12                       UCB CHAN MASK FIELD
IECIMMLT EQU   X'01'                    MULTIPLE PATH INDICATOR
         SPACE 1
***********************************************************************
*        PATH MAP LAYOUT AND FLAGS                                    *
***********************************************************************
         SPACE 1
IECIMNT1 EQU   0                        MAP-ENTRY1
IECIMNT2 EQU   4                        MAP ENTRY2
IECIMAVL EQU   X'01'                    PATH AVAILABLE FLAG
IECIMPRM EQU   2                        PRIMARY PATH - EITHER ENTRY
IECIMSEC EQU   3                        SECONDARY PATH - EITHER ENTRY
         SPACE 1
***********************************************************************
*        MISCELLANEOUS FLAGS AND PTRS                                 *
***********************************************************************
         SPACE 1
IECIMCVT EQU   16                       CVT PTR
IECIMLCH EQU   140                      PTR TO LOG CHAN TBL IN CVT
IECIMTCH EQU   6                        OFFSET IN TCH TAB TO TCH CODE
IECIMIND EQU   1                        PATH IND FLD IN TCH PREFX TBL
IECIMPRA EQU   X'08'                    PRIMARY PATH IND-CPUA
IECIMPRB EQU   X'02'                    PRIMARY PATH IND-CPUB
IECIMSCA EQU   X'04'                    SECONDARY PATH IND/CPUA
IECIMSCB EQU   X'01'                    SECONDARY PATH IND/CPUB
IECIMCUI EQU   X'F0'                    CONT UNIT MASK FOR TCH CU FIELD
IECIMCAA EQU   X'02'                    CPUA ACCESSABILITY BIT
IECIMCBB EQU   X'01'                    CPUB ACCESSABILITY BIT
IECIMNAV EQU   X'00'                    PATH NOT AVAIL
IECIMCHA EQU   20                       CHANMSK FIELD IN IOS
IECIMNXT EQU   124                      NEXT AVAILABLE
         EJECT
         STM   0,15,8(IECIMPAR)         SAVE REGS
         BALR  IECIMBAS,0               ESTABLISH
         USING *,IECIMBAS                        ADDRESSABILITY
         XC    IECIMNT1(8,IECIMPAR),IECIMNT1(IECIMPAR) ZERO MAP
         SPACE 1
         AIF   (T'&VAR(2) EQ 'O').MAP010 IF PARM MISSING OR IF CHANL
         AIF   (&VAR(2) EQ 0).MAP010 START CODE EXPLICTLY REFUSED, SKIP
         LTR   IECIMUCB,IECIMUCB        CHK FOR NEGATIVE CONTENTS
         BC    2,IECIM005               BR IF CONTENTS ARE POSITIVE
*
         LCR   IECIMUCB,IECIMUCB        TEST COMPLETE, RESTR CNTNTS
         IC    IECIMWK1,IECIMCHN(IECIMUCB) GET CHANNL ADDR FROM UCB
         N     IECIMWK1,IECIMZFM        ZERO FLAG BITS
         L     IECIMWK2,IECIMZCH        SET UP TO CALC CHANMSK
         SRL   IECIMWK2,0(IECIMWK1)     CALCULATE CHANMSK
         L     IECIMWK1,IECIMCVT        GET PTR TO CVT
         L     IECIMWK1,IECIMNXT(IECIMWK1) GET PTR TO NXT AVAILABLE
         LA    IECIMWK1,IECIMCHA(IECIMWK1) LOAD CHNMSK POINTER
         O     IECIMWK2,0(IECIMWK1)     SET NEW CHMSK IN REG
         ST    IECIMWK2,0(IECIMWK1)     SET NEW CHANMSK
.MAP010  ANOP
IECIM005 TM    IECIMCHM(IECIMUCB),IECIMPRA PRIM PATH FR CPUA AVAIL
         BC    1,IECIM010               NO-BYPASS SET OF AVAIL BIT
*
         OI    IECIMNT1+IECIMPRM(IECIMPAR),IECIMAVL MARK PATH AVAIL
IECIM010 TM    IECIMCHM(IECIMUCB),IECIMPRB PRIM PATH FR CPUB AVAIL
         BC    1,IECIM020               NO-TEST FOR ASYMMETRIC DEVICE
*
         OI    IECIMNT1+IECIMSEC(IECIMPAR),IECIMAVL MARK PATH AVAIL
IECIM020 TM    IECIMALC(IECIMUCB),IECIMMLT FOUR PATHS TO DEV
         BC    1,IECIM030               YES-ACCESS TCH TABL
*
         MVN   IECIMNT1(1,IECIMPAR),IECIMCHN(IECIMUCB) NO-SET CHAN ADD
         MVC   IECIMNT1+1(1,IECIMPAR),IECIMUNT(IECIMUCB) SET UNIT ADDR
         MVC   IECIMNT2(2,IECIMPAR),IECIMNT1(IECIMPAR) SET SECON ADDR
         BC    15,IECIMRST              RESTORE REGS
************************
         SPACE 1
IECIM030 L     IECIMWK1,IECIMCVT        GET CVT ADDRESS
         SR    IECIMWK2,IECIMWK2        PREPARE WORK REG
         IC    IECIMWK2,IECIMLCI(IECIMUCB) GET LCH INDEX FROM UCB
         SLL   IECIMWK2,3              MULTIPLY BY 8
         L     IECIMWK1,IECIMLCH(IECIMWK1) GET ADDR LCHTAB IN IOS
         LH    IECIMWK1,IECIMTCH(IECIMWK1,IECIMWK2) TEST CHAN ADDR
         N     IECIMWK1,IECIMMSK       MASK UNNEEDED BITS
         SH    IECIMWK1,IECIMSIX        BEGIN TCH TABLE
         TM    IECIMIND(IECIMWK1),IECIMPRA IS THIS PRIM PATH IND
         BC    8,IECIM040               NO-SET ADDRS IN REVERSE
*
         MVC   IECIMNT1(2,IECIMPAR),0(IECIMWK1) MOVE PRIM DEV ADDR
         MVC   IECIMNT2(2,IECIMPAR),2(IECIMWK1) MOVE SECN DEV ADDR
         BC    15,IECIM050              TEST CU FIELD
************************
         SPACE 1
IECIM040 MVC   IECIMNT2(2,IECIMPAR),0(IECIMWK1) MOVE SECN DEV ADDR
         MVC   IECIMNT1(2,IECIMPAR),2(IECIMWK1) MOVE PRIM DEV ADDR
IECIM050 TM    IECIMNT1+1(IECIMPAR),IECIMCUI ALT CONTROL UNITS
         BC    8,IECIM060               NO-SET CU/DEV NAME
*
         MVN   IECIMNT1+1(1,IECIMPAR),IECIMUNT(IECIMUCB) MOVE DEV NAM
         MVN   IECIMNT2+1(1,IECIMPAR),IECIMUNT(IECIMUCB) MOVE DEV NAM
         BC    15,IECIM070              TEST SECNDRY PATH CPUA
************************
         SPACE 1
IECIM060 MVC   IECIMNT1+1(1,IECIMPAR),IECIMUNT(IECIMUCB) MOV CU/DEV NA
         MVC   IECIMNT2+1(1,IECIMPAR),IECIMUNT(IECIMUCB) MV CU/DV NAM
IECIM070 TM    IECIMCHM(IECIMUCB),IECIMSCA SECN PATH CPUA AVAIL
         BC    1,IECIM080               NO-CK CPUB PATH
*
         OI    IECIMNT2+IECIMPRM(IECIMPAR),IECIMAVL MARK PATH AVAIL
IECIM080 TM    IECIMCHM(IECIMUCB),IECIMSCB SECN PATH CPUB AVAIL
         BC    1,IECIMRST               NO-RESTORE REGS
*
         OI    IECIMNT2+IECIMSEC(IECIMPAR),IECIMAVL MARK PATH AVAIL
IECIMRST LM    0,15,8(IECIMPAR)         RESTORE REGS
         BCR   15,&LINKR                RETURN
************************
         SPACE 1
         DS    0F
IECIMMSK DC    X'0000FFFF'              HALFWORD MASK
         AIF   (T'&VAR(2) EQ 'O').MAP020 IF TYPE OF PRCSSING NOT SPECFD
         AIF   (&VAR(2) EQ 0).MAP020    OR IF UNI-PRC SPECFD,SKIP CODE
IECIMZCH DC    X'80000000'              ZERO CHANNEL MASK
IECIMZFM DC    X'0000000F'              CHANNEL ADDR FIELD MASK
.MAP020  ANOP
IECIMSIX DC    H'0006'
         DROP  IECIMBAS
         SPACE 5
         AGO   .IOSGEND
.MAP030  ANOP
         SPACE 1
***********************************************************************
*        THIS IS PATH MAPPING ROUTINE FOR UNIPROCESSING               *
***********************************************************************
         SPACE 1
***********************************************************************
*        REGISTER DEFINITION                                          *
***********************************************************************
         SPACE 1
IECIMPAR EQU   &PARM                    PARAMETER REGISTER
IECIMUCB EQU   &REG(1)                  UCB REGISTER
IECIMWK1 EQU   &REG(2)                  WORK REGISTER
IECIMWK2 EQU   &REG(3)                  WORK REGISTER
IECIMWK3 EQU   &REG(4)                  WORK REGISTER
IECIMWK4 EQU   &REG(5)                  WORK REGISTER
IECIMWK5 EQU   &REG(6)                  WORK REGISTER
IECIMBAS EQU   &REG(7)                  BASE REGISTER
         SPACE 1
***********************************************************************
*        UCB DEFINITION AND FLAGS                                     *
***********************************************************************
         SPACE 1
IECIMALC EQU   1                        UCB ALLOCATION CHAN MSK
IECIMCHN EQU   4                        CHAN ADDR FIELD IN UCB
IECIMUNT EQU   5                        UNIT ADDR FIELD IN UCB
IECIMLCI EQU   10                       LOGICAL CHAN INDEX IN UCB
IECIMCHM EQU   12                       UCB CHANNEL MASK
IECIMMLT EQU   X'01'                    MULTIPLE PATH INDICATOR
         SPACE 1
***********************************************************************
*        PATH MAP LAYOUT AND FLAGS                                    *
***********************************************************************
         SPACE 1
IECIMNT1 EQU   0                        OFFSET TO BEGIN MAP ENTRY
IECIMUP  EQU   0                        UCB PTR IN PARALIST
IECIMNXT EQU   2                        INCR TO NEXT MAP ENTRY
IECIMNTY EQU   X'10'                    LAST ENTRY INDICATOR
IECIMNAV EQU   X'20'                    PATH NOT AVAIL BIT IN MAP
         SPACE 1
***********************************************************************
*        MISCELLANEOUS FLAGS AND PTRS                                 *
***********************************************************************
         SPACE 1
IECIMCVT EQU   16                       CVT PTR
IECIMLCH EQU   140                      PTR TO LOG CHAN TBL IN CVT
IECIMTCH EQU   6                        OFFSET IN TCH TAB TO TCH CODE
IECIMTWO EQU   2
IECIMCTR EQU   0                        PATH CTR IN PATH COMPOSITE
IECIMPIN EQU   X'08'                    PRIM PATH IND FOR TM INSTR
IECIMCHA EQU   0                        CHAN ADDR FROM TCH PREFIX
IECIMUCM EQU   X'F0'                    TCH TABLE CU MASK
IECIMIN8 EQU   1                        PATH INDICATOR FIELD
         EJECT
         STM   0,15,8(IECIMPAR)         SAVE REGISTERS            19026
         BALR  IECIMBAS,0
         USING *,IECIMBAS
         XC    IECIMNT1(8,IECIMPAR),IECIMNT1(IECIMPAR)  ZERO MAP
         TM    IECIMALC(IECIMUCB),IECIMMLT  MORE THAN 1 PATH TO DEV
         BC    1,IECIM01A               YES-ACCESS TCH TABLE
         SPACE 1
*        THIS CODING CREATES A ONE ENTRY MAP WHEN ONLY ONE PATH       *
*              IS AVAILABLE TO THE DEVICE. THERE IS NO WAY TO TEST    *
*              FOR PATH UNAVAILABILITY AT THIS POINT, SO THE          *
*              AVAILABILITY BIT IS NEVER SET (PATH ALWAYS CONSIDERED  *
*              AVAILABLE).                                            *
***********************************************************************
         SPACE 1
         MVN   IECIMNT1(1,IECIMPAR),IECIMCHN(IECIMUCB) NO-SET CHAN ADR
         MVC   IECIMNT1+1(1,IECIMPAR),IECIMUNT(IECIMUCB) SET UNIT ADDR
         OI    IECIMNT1(IECIMPAR),IECIMNTY  SET LAST ENTRY BIT
         BC    15,IECIMEND              RETURN
         SPACE 1
***********************************************************************
*        THIS CODING ACCESSES THE TEST CHANNEL PREFIX TABLE AND       *
*              SEARCHES FOR THE ENTRY WHICH CORRESPONDS TO THE        *
*              PRIMARY ADDRESS OF THE DEVICE. IT DECIDES,FROM THIS    *
*              TABLE,WHETHER ALTERNATE PATHS TO THIS DEVICE ARE       *
*              ALTERNATE CHANNEL PATHS OR PATHS THROUGH ALTERNATE     *
*              CONTROL UNITS.  IF ALTERNATE CHANNELS,THE CONTROL      *
*              UNIT AND DEVICE NAMES ARE MOVED FROM THE UCBUNIT       *
*              ADDRESS FIELD. IF ALTERNATE CONTROL UNITS,THE CONTROL  *
*              UNIT NAME IS TAKEN FROM THE TCH PREFIX TABLE AND       *
*              THE DEVICE NAME IS TAKEN FROM THE UCB. THEN THE        *
*              PATH INDICATOR IN THE TCH PREFIX TABLE IS COMPARED     *
*              AGAINST THE UCB CHANNEL MASK TO DETERMINE IF THE       *
*              PATH IS OFFLINE. IF SO,THE OFFLINE INDICATOR BIT       *
*              IS SET IN THE AVAILABILITY BYTE OF THE MAP. THIS       *
*              PROCESS IS REPEATED FOR ALL PATHS TO THE DEVICE.       *
*              WHEN THE LAST PATH IS PROCESSED, THE LAST ENTRY        *
*              BIT IS SET IN THE AVAILABILITY BYTE.                   *
***********************************************************************
         SPACE 1
IECIM01A L     IECIMWK1,IECIMCVT        GET CVT ADDRESS
         L     IECIMWK1,IECIMLCH(IECIMWK1)  LOAD ADDR LCH TAB IN IOS
         SR    IECIMWK2,IECIMWK2        PREPARE WORK REG
         IC    IECIMWK2,IECIMLCI(IECIMUCB)  GET LCH INDEX FROM UCB
         SLL   IECIMWK2,3               MULTIPLY BY 8
         LH    IECIMWK1,IECIMTCH(IECIMWK1,IECIMWK2)  TEST CHAN ADDR
         N     IECIMWK1,IECIMMSK        MASK OUT UNNEEDED BITS
         LA    IECIMWK2,IECIMTWO        SET UP FOR SUBTRACT
         SR    IECIMWK1,IECIMWK2        POINT TO PATH COMPOSITE
         SR    IECIMWK3,IECIMWK3        PREPARE INSERT CHAR REG
         IC    IECIMWK3,IECIMCTR(IECIMWK1)  SET PATH COUNTER
         SR    IECIMWK1,IECIMWK2        POINT TO TCHCODE TABLE ENTRY
         LR    IECIMWK5,IECIMWK3        SAVE PATH COUNTER
         AR    IECIMWK5,IECIMWK5        DOUBLE CTR FOR PARMREG CLAC
         SR    IECIMWK5,IECIMWK2        ADJUST REG DOWNWARD FOR SUBTR
         SR    IECIMWK4,IECIMWK4        PREPARE REG FOR INSERT CHAR
IECIM01B IC    IECIMWK4,IECIMIN8(IECIMWK1) SET PATH IND FOR EX INSTR
         MVN   IECIMNT1(1,IECIMPAR),IECIMCHA(IECIMWK1) MOVE CHAN ADDR
         TM    IECIMIN8(IECIMWK1),IECIMUCM VARIABLE CONTROL UNIT ADDRS
         BC    7,IECIM02B               YES-SET CU FIELD FROM TCH TAB
*
         MVC   IECIMNT1+1(1,IECIMPAR),IECIMUNT(IECIMUCB) SET UA FROM UC
         BC    15,IECIM02C              BR-TEST IF PATH OFFLINE
************************
         SPACE 1
IECIM02B N     IECIMWK4,IECIMBYT        AND CU ADDR FIELD OUT OF REG
         MVZ   IECIMNT1+1(1,IECIMPAR),IECIMIN8(IECIMWK1)  SET CU FIELD
         MVN   IECIMNT1+1(1,IECIMPAR),IECIMUNT(IECIMUCB) SET DEV NUMB
IECIM02C EX    IECIMWK4,IECIMOFT        TEST IF PATH OFFLINE
         BC    8,IECIM02D               PATH ONLINE-BRANCH
*
         OI    IECIMNT1(IECIMPAR),IECIMNAV  SET PATH NOT AVAIL BIT
IECIM02D LA    IECIMPAR,IECIMNXT(IECIMPAR)  LOOK AT NEXT ENTRY IN MAP
         SR    IECIMWK1,IECIMWK2        POINT TO NEXT TCH TAB ENTRY
         BCT   IECIMWK3,IECIM01B        FIND NEXT ADDR IF ANY
*
         SR    IECIMPAR,IECIMWK2        POINT TO LAST ENTRY IN MAP
         OI    IECIMNT1(IECIMPAR),IECIMNTY  SET LAST ENTRY BIT IN MAP
         SR    IECIMPAR,IECIMWK5        RESET MAP PTR FOR CALLER
         BC    15,IECIMEND              RETURN
************************
         SPACE 2
         DS    0F
IECIMBYT DC    X'0000000F'              HALF-BYTE MASK FOR AND INSTR
IECIMMSK DC    X'0000FFFF'              HALFWORD MASK
IECIMOFT TM    IECIMCHM(IECIMUCB),X'00' TEST IF PATH OFFLINE
IECIMEND LM    0,15,8(IECIMPAR)         RESTORE REGISTERS         19026
         BCR   15,&LINKR                RETURN TO CALLER          19026
         DROP  IECIMBAS
         SPACE 5
         AGO   .IOSGEND
.VAR010  ANOP
.*   IF M.P. USER SKIMPS ON WORKREGS, ABORT - -                       *
         AIF   (N'&REG LT 9 AND &VAR(1) EQ 1).IOSNG2
.*                                                                    *
.*  IF UNI-PROC USER SKIMPS, ALSO ABORT                               *
         AIF   (N'&REG LT 8 AND &VAR(1) EQ 0).IOSNG2
.*                                                                    *
         SPACE 1
***********************************************************************
         AIF   (&VAR(1) EQ 0).VAR011    'UNI-PROC'
         AIF   ('&AUTH' NE 'IGF24MPD').IOSNG1 UNAUTHORIZED USE MNOTE.
*        MACRO DEFINITION - VARY PATH FOR MULTIPROCESSING             *
         AGO   .VAR012
.VAR011  AIF   ('&AUTH' NE 'IGF2403D').IOSNG1 UNAUTHORIZED USE MNOTE.
*        MACRO DEFINITION - VARY PATH FOR UNIPROCESSING               *
.VAR012  ANOP
*              THIS MACRO, OWNED AND MAINTAINED BY IOS PERSONNEL,     *
*                  MAY BE USED TO VARY A PATH ONLINE OR OFFLINE       *
*                  (IF NOT THE LAST PATH TO THE DEVICE) FOR DEVICES
*                  WHICH MAY BE REACHED THROUGH MULTIPLE CHANNELS     *
*                  OR ALTERNATE SELECTOR SUBCHANNELS.                 *
*                                                                     *
         AIF   (&VAR EQ 0).VAR013A      IF ZERO, SKIP M.P. INFO
*              THE MODULE THAT CALLS THIS MACRO IS IGF24MPD           *
         AGO   .VAR013B
.VAR013A ANOP
*              THE MODULE THAT CALLS THIS MACRO IS IGF2403D           *
.VAR013B ANOP
*                                                                     *
*              THIS CODE IS GENERATED WHEN THE 'IOSGEN' CALL IS CODED *
*                  WITH THE VARIABLES SET ACCORDING TO THE FOLLOWING  *
*                  FORMAT --                                          *
*        IOSGEN &FUNC,(&PARM(1),&PARM(2),&PARM(3)),(&REG(1),&REG(2), +*
*              &REG(3), --- &REG(N)),&VAR,&AUTH=CSECTNME   WHERE --   *
*                                                                     *
*              FOLLOWING ARE THE PARAMETERS WHICH MUST BE SPECIFIED:
*                  1.&FUNC-VARY
*                  2.&PARM(1)- A REGISTER WHICH POINTS TO A 2 WORD    *
*                         PARAMETER LIST IN THE FOLLOWING FORM --     *
*                    ***********************************              *
         AIF   (&VAR(1) EQ 0).VAR015    'UNI-PROCESSING'
*                  +0*                * VARY   * MP -  *              *
*                    *  DEVICE  ADDR. * OFF/ON * CPU   *              *
*                    *                * REQ IND*  ID   *              *
         AGO   .VAR020
.VAR015  ANOP
*                  +0*                * VARY   *       *              *
*                    *  DEVICE  ADDR. * OFF/ON * NULL  *              *
*                    *                * REQ IND*       *              *
.VAR020  ANOP
*                    ***********************************              *
*                  +4* BASE ADDRESS OF DEVICE IN       *              *
*                    * EBCDIC, RIGHT ADJUSTED.         *              *
*                    *                                 *              *
*                    ***********************************              *
*                    .. 2 BYTES .......                               *
*                    ............... 4 BYTES ..........               *
*                    FOR EXAMPLE --                                   *
*                                       DEVICE ADDR. - X'0193'        *
*                                       VARY OFF/ON INDICATOR -       *
*                                         X'00' = OFFLINE             *
*                                         X'04' = ONLINE              *
         AIF   (&VAR(1) EQ 0).VAR025    'UNI-PROCESSING'
*                                       MP CPU ID = X'C1' FOR CPUA OR,*
*                                                   X'C2' FOR CPUB.   *
.VAR025  ANOP
*                                       EBCDIC DEVICE ADDRESS, FOR    *
*                                       EXAMPLE COULD BE --           *
*                                            X'F0F2F9F3'.             *
*                                    *** NOTE -- THIS FIELD IS CON-   *
*                                       SIDERED AS INPUT ONLY, AND    *
*                                       IS NOT PRESERVED ACROSS THE   *
*                                       INTERFACE.                    *
*                                                                     *
*                    &PARM(2)- A REG WHICH POINTS TO THE CVT          *
*                                                                     *
*                    &PARM(3)- A WORK REGISTER, REG 0 BEING VALID     *
*                                                                     *
         AIF   ('&FUNC' EQ 'VARY' AND &VAR(1) EQ 1).VAR030  'MULTI'
*                  3.&REG-OPERAND SUBLIST WHICH DEFINES EIGHT REGS    *
         AGO   .VAR035
.VAR030  ANOP
*                  3.&REG-OPERAND SUBLIST WHICH DEFINES NINE REGS     *
.VAR035  ANOP
*                        TO BE USED AS WORK REGISTERS
*                  4.&VAR--                                           *
*                     A.ZERO-UNIPROCESSING                            *
*                     B.ONE-MULTIPROCESSING                           *
*                                                                     *
*                  5.&AUTH=XXXXXXXX IS A KEYWORD PARAMETER SPECIFYING *
*                                   THE INVOKING CSECT NAME.          *
*                                                                     *
*              POSSIBLE CODES ( BASE 10 ) IN RETURN CODE REGISTER     *
*                   0 = SUCCESSFUL COMPLETION OF VARY REQUEST         *
         AIF   (&VAR(1) EQ 1).VAR036    'MULTI-PROCESSING'
*                   4 = T.P. DEVICE - CANNOT VARY                     *
         AGO   .VAR037
.VAR036  ANOP
*                   4 = RESERVED FOR FUTURE USE                  A46458
.VAR037  ANOP
*                   8 = THIS IS LAST PATH - CANNOT VARY               *
*                  12 = PATH DOES NOT EXIST - CANNOT VARY             *
*                  16 = INVALID BASE ADDRESS - CANNOT VARY            *
*                  20 = RESERVED DEVICE - CANNOT VARY                 *
*                  24 = ONLY ONE PATH - CANNOT VARY                   *
*                                                                     *
**********************************************************************
         SPACE 1
         SPACE 1
***********************************************************************
*        REGISTER DEFINITIONS                                         *
***********************************************************************
         SPACE 1
IECIVPAR EQU   &PARM(1)                 PARAMETER REGISTER
IECIVCVT EQU   &PARM(2)                 CVT POINTER
IECIVWK1 EQU   &PARM(3)                 NON - ADDRESSING WORK REGISTER
IECIVRTN EQU   &REG(1)                  RETURN CODE REGISTER
IECIVUCB EQU   &REG(2)                  UCB REGISTER
IECIVXIT EQU   &REG(3)                  EXIT POINTER REGISTER
IECIVWK2 EQU   &REG(4)                  WORK REGISTER
IECIVWK3 EQU   &REG(5)                  WORK REGISTER
IECIVWK4 EQU   &REG(6)                  WORK REGISTER
IECIVWK5 EQU   &REG(7)                  WORK REGISTER
IECIVWK6 EQU   IECIVRTN                 WORK REGISTER
IECIVBAS EQU   &REG(8)                  BASE REGISTER
         AIF   (&VAR(1) EQ 0).VAR026    'UNI-PROCESSING'
IECIVPFX EQU   &REG(9)                  PREFIX REGISTER
IECIVNUL EQU   0                        NULL REGISTER
.VAR026  ANOP
         SPACE 1
***********************************************************************
*        CHANNEL ERROR BLOCK DEFINITION AND FLAGS                     *
***********************************************************************
         SPACE 1
IECIVINA EQU   0                        CEB ACT/INACT FIELD
IECIVCCH EQU   1                        CEB CHANMSK FIELD
IECIVRQE EQU   2                        CEB RQE FIELD
*                                                                     *
IECIVFRE EQU   X'FE'                    CEB INACTIVE INDICATOR
IECIVNEX EQU   4                        INCR TO NEXT CEB
IECIVACI EQU   0                        CEB ACTIVE IND FIELD
IECIVACT EQU   X'01'                    ACTIVE CEB INDICATOR
         SPACE 1
***********************************************************************
*        PARAMETER LIST TO VARY PATH                                  *
***********************************************************************
         SPACE 1
IECIVCHN EQU   0                        CHANNEL FIELD
IECIVUA  EQU   1                        UNIT ADDRESS FIELD
IECIVOFL EQU   2                        OFFLINE/ONLINE INDICATOR
IECIVINC EQU   3                        OFFSET TO INPUT CPUID
IECIVEBC EQU   4                        EBCDIC NAME FIELD IN PARM LIST
IECIVSV1 EQU   4                        SAVE 1 WORKAREA OFFSET
IECIVSV2 EQU   5                        SAVE 2 WORKAREA OFFSET
IECIVSV3 EQU   6                        SAVE 3 WORKAREA OFFSET
IECIVSV4 EQU   7                        SAVE 4 WORKAREA OFFSET
IECIVWKA EQU   IECIVEBC                 ROUTINE WORK AREA
         SPACE 1
***********************************************************************
*        VARY PATH RETURN CODES                                       *
***********************************************************************
         SPACE 1
IECIVSUC EQU   0                        VARY COMPLETED SUCCESSFULLY
         AIF   (&VAR(1) EQ 1).VAR038    'MULTI-PROCESSING'
IECIVTPN EQU   4                        CANNOT VARY-TP DEVICE
.VAR038  ANOP
IECIVLPO EQU   8                        CANNOT VARY-LAST PATH
IECIVNXS EQU   12                       PATH DOES NOT EXIST-CANNOT VARY
IECIVBAI EQU   16                       INVALID BASE ADDR-CANNOT VARY
IECIVRES EQU   20                       RSRVD DEV REQ CANCELLED
IECIVO1P EQU   24                       ONLY ONE PATH
         SPACE 1
***********************************************************************
*        UCB DEFINITION AND FLAGS                                     *
***********************************************************************
         SPACE 1
IECIVFL3 EQU   0                        FLAG IN UCB PREFIX        21063
IECIVALC EQU   1                        UCB ALLOCATION CHANNEL MASK
IECIVSTA EQU   3                        UCB STATUS BYTE A DISP
IECIVUCH EQU   4                        UCB CHANNEL FIELD
IECIVFL1 EQU   6                        UCB FLAGS 1 FIELD
IECIVCHM EQU   12                       UCB CHANNEL MASK
IECIVUEB EQU   13                       UCB EBCDIC FIELD
IECIVDVT EQU   18                       UCB DEV TYPE FIELD
IECIVLTS EQU   20                       UCB LAST RQE FIELD
IECIVMLT EQU   X'01'                    MULTIPLE PATH INDICATOR
IECIVITF EQU   X'10'                    UCB INTERCEPT FLAG
IECIVDAD EQU   X'20'                    DIRECT ACCESS DEVICE CLASS FLAG
IECIVTPT EQU   X'40'                    TP DEVICE CLASS
IECIV27A EQU   X'15'                    27RN UNIT TYPE A
IECIV27B EQU   X'25'                    27RN UNIT TYPE B
IECRSRVD EQU   X'20'                    IS THIS DEVICE RSRVD
IECIVSQC EQU   40                       RESERVE COUNT OFFSET
IECIVRSV EQU   41                       STATUS -- RESERVED OFFSET
IECIVASK EQU   X'02'                    ARM SEEKING
IECIVDX  EQU   X'04'                    DATA TRANSFER
IECIVCUB EQU   X'08'                    CONTROL UNIT BUSY
IECIVSDA EQU   X'20'                    SHARED DIRECT ACCESS
         SPACE 1
***********************************************************************
*        MISCELLANEOUS FLAGS AND PTRS                                 *
***********************************************************************
IECIVONL EQU   X'04'                    ONLINE INDICATOR IN PARALIST
IECIVCEB EQU   24                       CEB PTR DISPLACE FROM NXTAVL
IECIVNXT EQU   124                      NEXT AVAILABLE
IECIVLCH EQU   140                      OFFSET TO LCH TABLE PTR IN CVT
IECIVTCH EQU   6                        OFFSET IN TCH TAB TO TCH CODE
IECIVENT EQU   0                        NO ENTRIES IN TCH PREFIX TABLE
IECIVTCP EQU   0                        CHAN ADDR IN TCH PREFIX TABLE
IECIVPIN EQU   1                        PATH IND FLD IN TCH PRFX TABLE
IECIVCUZ EQU   X'0F'                    CONT UNIT ADDR ZERO MASK
IECIVCMP EQU   1                        TCH PATH COMPOSITE MASK
IECIVIMK EQU   X'FF'                    PATH INDICATOR MASK
IECIVQUE EQU   X'01'                    QUEUE RQE FLAG (FOR IOS)
IECIVLCI EQU   10                       LOGICAL CHANNEL INDEX IN UCB
IECIVILK EQU   X'28'                    CVT PTR TO UCB TAB IN IOS
IECIVCTR EQU   X'FF'                    CEB CTR MSK
IECIVCHA EQU   20                      CHANMSK FIELD IN IOS
IECIVCUA EQU   X'F0'                    TCH CUA MASK
IECIVNX  EQU   2                        INCR TO NEXT UCB IN UCBTAB
IECIVUC0 EQU   0                        DISPLACE TO UCBADDR IN TAB
IECIVCNT EQU   X'FF'                    COUNT TEST MASK
         AIF   (&VAR(1) EQ 0).VAR027    'UNI-PROCESSING'
IECIVCPB EQU   X'08'                    WHICH CPU LAST ISSUED SIO 21063
IECIVPXL EQU   4                        MP UCB PREFIX LENGTH      21063
IECIVCPA EQU   C'A'                     CPU 'A' IDENTIFIER
IECIV2PI EQU   X'0A'                    2 PATH INDICATOR
IECIV4PI EQU   X'0F'                    4 PATH INDICATOR
IECIVPIB EQU   X'08'                    PATH INDICATOR BIT
IECIVMCT EQU   X'2A0'                   MULTIPROCESSING PSA CHAN TABLE
IECIVPX2 EQU   X'2B0'                   ADDRESS IN  PSA(A) OF PSA(B)
IECIVCID EQU   X'2B8'                   CPUID OFFSET IN PSA
IECIVRCF EQU   X'70'                    CHAN RECONFIGUATION MASK
IECIVOFF EQU   X'01'                    ONLINE/OFFLINE BIT       A46458
.VAR027  ANOP
IECIVACM EQU   X'F00'                   ALTERNATE CHANNEL MASK
IECIVACU EQU   X'0F0'                   ALTERNATE CONTROL UNIT MASK
         EJECT
         BALR  IECIVBAS,0
         USING *,IECIVBAS
         LA    IECIVXIT,IECIVEND
         L     IECIVWK2,IECIVILK(IECIVCVT) ADDR UCB TAB IN IOS
         SPACE 1
*        FIND UCB                                                     *
         SPACE 1
IECIV010 LH    IECIVUCB,0(IECIVWK2)     PTR TO UCB
         LTR   IECIVUCB,IECIVUCB        TEST UCB ADDRESS
         BC    8,IECIV011              IF ZERO, LOOK AT NEXT UCB
*
         BC    4,IECIV012               IF NEG, END OF TBL -- ERROR
*                                       POSITVE  -- VALID ADDRESS
         CLC   IECIVEBC+1(3,IECIVPAR),IECIVUEB(IECIVUCB) EBCDIC NAME EQ
         BC   8,IECIV015               CHECK FOR MULT PATHS
*
IECIV011 LA    IECIVWK2,IECIVNX(IECIVWK2) BUMP TO NEXT UCB
         BC    15,IECIV010              CHECK NEXT UCB
************************
         SPACE 1
*        ERROR-INVALID BASE ADDRESS                                   *
         SPACE 1
IECIV012 LA    IECIVRTN,IECIVBAI        SET RETRN CODE-INVAL BASE ADDR
         BCR   15,IECIVXIT              YES, RETURN INVALID REQUEST
************************
         SPACE 1
*        TEST UCBALLC FOR MULTIPLE PATHS TO THE DEVICE                *
         SPACE 1
IECIV015 XC    IECIVWKA(4,IECIVPAR),IECIVWKA(IECIVPAR) CLEAR WORK AREA
         AIF   (&VAR(1) EQ 1).VAR110    'MULTIPROC'
         TM    IECIVALC(IECIVUCB),IECIVMLT MORE THAN 1 PATH TO DEV
         BC    8,IECIV042               IF NOT, BR TO INDICATE 1 PATH
         SPACE 1
*        TEST DEVICE CLASS FIELD IN UCB FOR TP DEVICE                 *
         SPACE 1
         TM    IECIVDVT(IECIVUCB),IECIVTPT IS THIS A TP DEVICE
         BC    14,IECIV016              NO, VALID REQUEST
         CLI   IECIVDVT+1(IECIVUCB),IECIV27A  Q. IS THIS A 27RN-15
         BE    IECIV016                 YES, VALID REQUEST
         CLI   IECIVDVT+1(IECIVUCB),IECIV27B  Q. IS THIS A 27RN-25
         BNE   IECIV045                 NO, RETURN INVALID REQUEST
.VAR110  SPACE 1
*
IECIV016 TM    IECIVOFL(IECIVPAR),IECIVONL  Q. IS REQ. FOR 'V ONLINE'
         BC    1,IECIV020               A.  YES, SKIP RSVD DASD CODE.
         SPACE 1
*    SHARED DASD'S NEED SPECIAL CONSIDERATION...
*    THE VARY PATH OFFLINE FUNCTION IS CANCELLED UNDER THE CONDITION
*    THAT THIS CPU HAS ACCESS TO THE RESERVED DEVICE THROUGH THAT
*    PARTICULAR PATH SPECIFIED FOR THE VARY....
         SPACE 2
         TM    IECIVDVT(IECIVUCB),IECIVDAD  Q.  IS THIS A DASD.
         BC    8,IECIV020               A.  NO, BRANCH TO TEST PATHS.
*
         TM    IECIVDVT-1(IECIVUCB),IECIVSDA Q.  IS IT SHARED.
         BC    8,IECIV020               A.  NO, BRANCH TO TEST PATHS.
         SPACE 1
*    DEVICE IS SHARED DASD.
         SPACE 1
         MVC   IECIVSV1(2,IECIVPAR),IECIVUCH(IECIVUCB) MOVE LSTPTH21063
         NI    IECIVSV1(IECIVPAR),IECIVCUZ AND OFF FLAG BITS
         CLC   IECIVSV1(2,IECIVPAR),IECIVCHN(IECIVPAR) PATHS EQUAL21063
         BNE   IECIV020                 NO, SET UP FOR PATH SRCH  21063
         SPACE 1
         AIF   (&VAR EQ 0).VAR111       'UNI-PROCESSING'          21063
*              CHECK IF PATH TO BE VARIED OFFLINE IS IN SAME CPU  21063
*              AS THE PATH IN THE VARY REQUEST                    21063
         SPACE 1                                                  21063
         LR    IECIVWK3,IECIVUCB        COPY UCB ADDRESS          21063
         SH    IECIVWK3,IECIVNEG        BACK OFF TO MP PREFIS     21063
         TM    IECIVFL3(IECIVWK3),IECIVCPB LAST SIO FROM CPU B    21063
         BZ    IECIV018                 NO-LAST SIO WAS FROM CPU A21063
         SPACE 1                                                  21063
*              LAST SIO WAS FOR CPU B                             21063
         SPACE 1                                                  21063
         CLI   IECIVINC(IECIVPAR),IECIVCPA VARY REQUEST FOR CPU A 21063
         BE    IECIV020                 YES GO DO PATH SEARCH     21063
.VAR111  SPACE 1                                                  21063
*              CHECK RESERVE COUNT AND ARM SEEK + DATA TRANSFER   21063
         SPACE 1                                                  21063
IECIV017 TM    IECIVRSV(IECIVUCB),IECIVCNT RESERVE CNT G.T. ZERO  21063
         BNZ   IECIV049                 YES-SET RC=X'20' - EXIT   21063
         TM    IECIVFL1(IECIVUCB),IECIVASK+IECIVDX ARMSK OR DTR ON21063
         BM    IECIV049                 YES-CANNOT VARY PATH-EXIT 21063
         AIF   (&VAR EQ 0).VAR111A      'UNI-PROCESSING'          21063
         B     IECIV020                 GO DO PATH SEARCH         21063
         SPACE 1                                                  21063
*              LAST SIO WAS FOR CPU A                             21063
         SPACE 1                                                  21063
IECIV018 CLI   IECIVINC(IECIVPAR),IECIVCPA VARY REQUEST FOR CPU A 21063
         BE    IECIV017                 YES-GO CHK RESERVE CNT    21063
.VAR111A SPACE 2                                                  21063
*    THIS CODE WILL DETERMINE WHETHER DEVICE CONTAINS SPECIFIED PATH  *
         SPACE 1
IECIV020 DS    0H
         AIF   (&VAR(1) EQ 0).VAR112    'UNI-PROCESSING'
         SR    IECIVWK1,IECIVWK1        CLEAR ORING REGISTER
         TM    IECIVALC(IECIVUCB),IECIVMLT  Q.  MORE THAN TWO PATHS.
         BC    1,IECIV021               A.  YES, SKIP '2-PATH' CODE.
*
         MVC   IECIVSV1(2,IECIVPAR),IECIVUCH(IECIVUCB) COPY UCBCHA FLD.
         NI    IECIVSV1(IECIVPAR),IECIVCUZ  AND OFF FLAG BITS.
         CLC   0(2,IECIVPAR),IECIVSV1(IECIVPAR)  Q.  ADDRS. EQUAL.
         BC    7,IECIV02C               A.  NO, EXIT - CANCEL VARY.
         SPACE 1
*    ADDRESSES EQUAL - CONTINUE 'TWO-PATH' LOGIC--
         SPACE 1
         MVI   IECIVSV1(IECIVPAR),IECIV2PI  INDICATE TWO PATHS
         MVI   IECIVSV2(IECIVPAR),IECIVPIB  INITIALIZE PATH BIT
         MVI   IECIVSV3(IECIVPAR),IECIVPIB  INITIALIZE 'PATH-TO-BE' BIT
         IC    IECIVPFX,IECIVUCH(IECIVUCB)  PICK UP CHANNEL ADDRESS...
         BC    15,IECIV023              SKIP 'MORE-THAN-TWO-PATH' CODE.
************************
         SPACE 2
IECIV021 MVI   IECIVSV1(IECIVPAR),IECIV4PI   SHOW 2 PATHS FOR EACH CPU.
.VAR112  ANOP
         SPACE 1
*    DETERMINE HOW MANY, AND WHAT, PATHS EXIST FROM TCH PREFIX TABLE  *
         SPACE 1
         L     IECIVWK3,IECIVLCH(IECIVCVT) GET ADDR OF LCH TABLE
         SR    IECIVWK4,IECIVWK4        CLEAR WORKREG
         IC    IECIVWK4,IECIVLCI(IECIVUCB)   GET LCH INDEX FROM UCB...
         SLL   IECIVWK4,3               IECIVWK4 = IECIVWK4 * 8
         LH    IECIVWK3,IECIVTCH(IECIVWK3,IECIVWK4) GET TCH CODE ADDR.
         N     IECIVWK3,IECIVHMK        AND OFF UNWANTED BITS.
         BCTR  IECIVWK3,0               * BACK UP ONE HALFWORD
         BCTR  IECIVWK3,0               * TO POINT TO TCH COMPOSITE...
         LR    IECIVWK5,IECIVWK3        SAVE POINTER
         IC    IECIVWK4,0(IECIVWK3)     GET NUMBER OF PATHS.
         AR    IECIVWK4,IECIVWK4        DOUBLE TO GET OFFSET TO TOP..
         SR    IECIVWK5,IECIVWK4        GET POINTER TO TOP....
IECIV022 DS    0H
         AIF   (&VAR(1) EQ 0).VAR113    'UNI-PROCESSING'
         SPACE 1
*    SET UP SAVE INDICATORS FROM TCH SETTINGS...
         SPACE 1
         MVN   IECIVSV2(1,IECIVPAR),IECIVPIN(IECIVWK5) INIT PATH BIT
         IC    IECIVPFX,0(IECIVWK5)     GET CHANNEL ADDRESS
IECIV023 N     IECIVPFX,IECIVFOX        CLEAR FLAG BITS
         LA    IECIVPFX,IECIVMCT(IECIVPFX,IECIVPFX) 2 * CHN + CHTAB ADR
         IC    IECIVWK4,IECIVSV2(IECIVPAR)  PICK UP PATH BIT
         CLI   IECIVCID(IECIVNUL),IECIVCPA Q.  IS THIS CPUA.
         BC    8,IECIV024               A.  YES, PATH PROPERLY SET
*
         SRL   IECIVWK4,2               A.  NO, MOVE TO CPU-B SLOT.
IECIV024 TM    0(IECIVPFX),IECIVRCF     Q.  IS CHANNEL OFFLINE. (CPUA)
         BC    8,IECIV025               A.  NO,SKIP OFFLINE SETTING.
*
         OR    IECIVWK1,IECIVWK4        OR IN OFFLINE BIT
IECIV025 A     IECIVPFX,IECIVPX2(IECIVNUL) GET CHANNEL OFFSET IN PSA(B)
         IC    IECIVWK4,IECIVSV2(IECIVPAR)  PICK UP PATH BIT.
         CLI   IECIVCID(IECIVNUL),IECIVCPA Q.  IS THIS CPUA.
         BC    7,IECIV026               A.  NO, SKIP RESHUFFLE SHIFT
*
         SRL   IECIVWK4,2               SHIFT MASK TO 'B' SIDE
IECIV026 TM    0(IECIVPFX),IECIVRCF     Q.  IS CHANNEL OFFLINE  (CPUB).
         BC    8,IECIV027               A.  NO, SKIP OFFLINE SETTING.
*
         OR    IECIVWK1,IECIVWK4        OR IN OFFLINE BIT
IECIV027 TM    IECIVALC(IECIVUCB),IECIVMLT  Q.  ALTERNATE PATH.
         BC    8,IECIV02A               A.  NO, IECIVWK1 SET UP AS IS.
*
.VAR113  LH    IECIVWK2,0(IECIVWK5)     GET TCHTAB ENTRY...
         LH    IECIVWK4,0(IECIVPAR)     GET PATHS TO GO OFF.
         LA    IECIVWK6,IECIVACM        PUT X'F00' IN REGISTER
         TM    IECIVUA(IECIVWK5),IECIVACU   Q.  ALTERNATE CU.
         BC    8,IECIV028               A.  NO, SKIP ALT CU CODE.
*
         LA    IECIVWK6,IECIVACU(IECIVWK6)  CHANGE MASK TO X'FF0'.
IECIV028 XR    IECIVWK2,IECIVWK4        COMBINE PATH AND TCHTAB ENTRY
         NR    IECIVWK2,IECIVWK6        AND OFF WITH SPECIAL MASK
         BC    7,IECIV029               BRANCH IF RESULT NOT ZERO
         SPACE 2
*    EXECUTION OF FOLLOWING, IS BECAUSE SELECTED TCHTAB ENTRY PROVES
*                                       THERE IS A PATH.
         SPACE 1
         MVN   IECIVSV3(1,IECIVPAR),IECIVPIN(IECIVWK5) SAVE PATH-TO-BE.
IECIV029 LA    IECIVWK5,IECIVNX(IECIVWK5) BUMP TO NEXT ENTRY
         CR    IECIVWK5,IECIVWK3        Q.  END OF TCH TABLE.
         BC    4,IECIV022               A.  NO, REITERATE.
*
IECIV02A SR    IECIVWK4,IECIVWK4        CLEAR WORK REGISTER
         IC    IECIVWK4,IECIVSV3(IECIVPAR) PICK UP PATH TO BE VARIED
         LTR   IECIVWK4,IECIVWK4        Q.  WAS A PATH FOUND...
         BC    8,IECIV02C               A.  NO, CANCEL VARY FUNCTION
*
         AIF   (&VAR(1) EQ 0).VAR014    'UNI-PROCESSING'
         CLI   IECIVINC(IECIVPAR),IECIVCPA  Q.  WAS REQUEST FROM CPUA.
         BC    8,IECIV030               A.  YES, SKIP ADJUSTMENT.
*
         SRL   IECIVWK4,2               ADJUST TO HIT CPUB PATH.
         STC   IECIVWK4,IECIVSV3(IECIVPAR) STORE ADJUSTED PATH.
IECIV030 STC   IECIVWK1,IECIVSV4(IECIVPAR) SAVE OFFLINE CHANNEL IND.
.VAR014  TM    IECIVOFL(IECIVPAR),IECIVONL  Q.  IS REQ FOR 'V ONLINE'.
         BC    1,IECIV02B               A.  YES, SKIP OFFLINE CODE.
*
         OC    IECIVSV4(1,IECIVPAR),IECIVCHM(IECIVUCB) OR WITH UCBCHM &
         OC    IECIVSV4(1,IECIVPAR),IECIVSV3(IECIVPAR)    WITH ADJ.PATH
         NI    IECIVSV4(IECIVPAR),IECIVCUZ   AND OFF ZONE BITS...
         AIF   (&VAR(1) EQ 0).VAR015A   'UNI-PROCESSING'
         XC    IECIVSV4(1,IECIVPAR),IECIVSV1(IECIVPAR) PATH REPRESENTED
         AGO   .VAR016                  SKIP UNI-PROCESSING INSTRUCTION
.VAR015A XC    IECIVSV4(1,IECIVPAR),IECIVPIN(IECIVWK3) PATH REPRESENTED
.VAR016  BC    8,IECIV02D               YES, GO TEST FOR APR.
*
         OC    IECIVCHM(1,IECIVUCB),IECIVSV3(IECIVPAR) SET PATH OFFLINE
         BC    15,IECIV130              SET RC AND RETURN
************************
         SPACE 2
*    VARY PATH ONLINE                                                 *
         SPACE 1
IECIV02B EQU   *                                                 A46458
         AIF   (&VAR(1) EQ 0).VAR014A   'UNI-PROCESSING'         A46458
         LR    IECIVWK2,IECIVUCB        GET UCB ADDRESS          A46458
         BCTR  IECIVWK2,0               BACK UP TO M65MP PREFIX  A46458
         SR    IECIVPFX,IECIVPFX        CLEAR REG                A46458
         IC    IECIVPFX,IECIVCHN(IECIVPAR) GET CHANNEL ADDRESS   A46458
         LA    IECIVPFX,IECIVMCT(IECIVPFX,IECIVPFX) 2*CHN+CHTAB  A46458
         CLC   IECIVCID(1,IECIVNUL),IECIVINC(IECIVPAR) IS PATH   A46458
*                                       IN THIS CPU              A46458
         BE    IECIV031                 YES,MAKE OFFLINE TEST    A46458
         A     IECIVPFX,IECIVPX2(IECIVNUL) NO, GET OTHER PREFIX  A46458
IECIV031 TM    IECIVNUL(IECIVPFX),IECIVRCF IS CHANNEL OFFLINE    A46458
         BC    4+2+1,IECIV02E           YES, LEAVE UCBMPFLK SET  A46458
         NI    IECIVNUL(IECIVWK2),X'FF'-IECIVOFF TURN UCBMPFLG   A46458
*                                       OFFLINE BIT OFF (ONLINE) A46458
.VAR014A ANOP
IECIV02E XC    IECIVSV3(1,IECIVPAR),IECIVHMK+2 INVRT PTH BITS WITH 'FF'
         NC    IECIVCHM(1,IECIVUCB),IECIVSV3(IECIVPAR) BIT OFF=ONLINPTH
         L     IECIVWK2,IECIVNXT(IECIVCVT) PICK UP NXT AVLBL PTR IN IOS
         BC    15,IECIV121              ENSURE RESTART FROM 'LCH'.
************************
         SPACE 1
IECIV02C LA    IECIVRTN,IECIVNXS        SET RC, INVALID REQUEST
         BCR   15,IECIVXIT              RETURN, VARY CANCELED
************************
         SPACE 2
*    LOOK FOR ACTIVE CHANNEL ERROR BLOCK FOR THIS DEVICE...
         SPACE 1
IECIV02D L     IECIVWK2,IECIVNXT(IECIVCVT) PICK UP NXT AVL PTR IN IOS
         XR    IECIVWK5,IECIVWK5        ZERO THE CEB COUNT REG
         IC    IECIVWK5,IECIVCEB(IECIVWK2) LOAD CEB CTR
         L     IECIVWK6,IECIVCEB(IECIVWK2) LOAD CEB POINTER
         TM    IECIVACI(IECIVWK6),IECIVACT Q. ANY ACTIVE CEBS
         BC    8,IECIV041               NO SET LAST PATH RETCODE
*
IECIV035 TM    IECIVINA(IECIVWK6),IECIVFRE  Q. IS THIS CEB FREE
         BC    8,IECIV050               NO-CHECK IF RETRY IN PROCESS
*
IECIV040 LA    IECIVWK6,IECIVNEX(IECIVWK6) YES-LOOK AT NEXT CEB
         BCT   IECIVWK5,IECIV035        BRANCH, IF MORE CEB'S TO CHECK.
*
IECIV041 LA    IECIVRTN,IECIVLPO       RETURN LAST PATH
         BCR   15,IECIVXIT              RETURN INVALID REQUEST
         AIF   (&VAR(1) EQ 1).VAR016A   'MULTI-PROCESSING'
************************
*
IECIV045 LA    IECIVRTN,IECIVTPN        SET CODE - CANNOT VARY TP DEV
         BCR   15,IECIVXIT              RETURN INVALID REQUEST
.VAR016A ANOP
************************
*
IECIV042 LA    IECIVRTN,IECIVO1P        RETURN ONLY PATH CODE
         BCR   15,IECIVXIT              RETURN, VARY CANCELLED
************************
         SPACE 1
IECIV049 LA    IECIVRTN,IECIVRES        SET RC, RESERVED DEVICE
         BCR   15,IECIVXIT              RETURN, VARY CANCELLED
************************
         SPACE 2
IECIV050 CLC   IECIVLTS(2,IECIVUCB),IECIVRQE(IECIVWK6) Q.RETRY UNDERWAY
         BC    7,IECIV040               NO-LOOK AT NEXT CEB
*
         OI    IECIVINA(IECIVWK6),IECIVFRE  YES-DEACTIVATE CEB
         NC    IECIVCHM(1,IECIVUCB),IECIVCCH(IECIVWK6) CANCEL APR
         OC    IECIVCHM(1,IECIVUCB),IECIVSV3(IECIVPAR) SET PATH OFFLINE
         SPACE 1
*********      ********************************************************
*        THE FOLLOWING REQUIRED FOR INTERFACE WITH IOS                *
*              1.  SET IOS CHANMSK FIELD (AT NEXAVL+20) SO QUEUE WILL *
*                  BE SEARCHED BY IOS FOR REQUEST TO BE STARTED ON    *
*                  THIS PATH WHEN NEXT I/O INTERRUPT COMES IN         *
*********      ********************************************************
         SPACE 1
IECIV121 IC    IECIVWK5,IECIVUCH(IECIVUCB)  RESTORE CHANNEL ADDRESS.
         N     IECIVWK5,IECIVFOX        ZERO OUT FLAGS
         L     IECIVWK4,IECIVZCH        SET UP TO CALC CHANMSK
         SRL   IECIVWK4,0(IECIVWK5)     CALCULATE CHANMSK
         LA    IECIVWK3,IECIVCHA(IECIVWK2) LOAD CHMSK PTR
         O     IECIVWK4,0(IECIVWK3)     SET NEW CHMSK IN REG
         ST    IECIVWK4,0(IECIVWK3)     SET NEW CHANMSK
         SPACE 1
IECIV130 LA    IECIVRTN,IECIVSUC        SET CODE SUCCESSFUL COMP
         BCR   15,IECIVXIT              RETURN
************************
         SPACE 1
         DS    0F
IECIVFOX DC    X'0000000F'              CHAN ADDR MSK CONS
IECIVHMK DC    X'0000FFFF'              HALFWORD MASK
IECIVZCH DC    X'80000000'              ZERO CHANNEL MASK
         AIF   (&VAR EQ 0).VAR015B                                21063
IECIVNEG DC    Y(IECIVPXL)              CONSTANT UCB MP65 PRFX LEN21063
.VAR015B ANOP
IECIVEND DS    0H
         SPACE 5
         DROP  IECIVBAS
         MEXIT                          EXIT MACRO
.DOM010  AIF   (N'&REG LT 3).IOSNG2     IF INSUFFICIENT WKREGS, MNOTE.
         AIF   ('&AUTH' NE 'IEECVET7').IOSNG1    CHECK AUTH / MNOTE...
         EJECT
*     THIS ROUTINE, PROVIDED AND MAINTAINED BY IOS PERSONNEL,
*     DETERMINES WHICH PREVIOUSLY ISSUED INTERVENTION REQUIRED
*     MESSAGES CAN BE DELETED.
*
*     A POINTER TO A LIST OF UNIT ADDRESSES IS PROVIDED.  THIS
*     ROUTINE FINDS THE UCB FOR EACH UNIT ADDRESS, DETERMINES
*     WHETHER OR NOT THE INT REQ MESSAGE HAS BEEN SATISFIED VIA
*     THE READY/NOT READY FLAG, AND MARKS THE LIST ENTRY AS BEING
*     (NOT) DOM-ABLE.
         SPACE 2
*              REGISTER DEFINITION
IECIDINP EQU   &PARM                    POINTER TO LIST
IECIDLST EQU   &REG(1)                  REG USED FOR LIST SCAN
IECIDWK1 EQU   &REG(2)                  WORK REGISTER
IECIDWK2 EQU   &REG(3)                  WORK REGISTER
         SPACE 1
*              MISCELLANEOUS EQUATES
IECIDCVT EQU   16                       POINTER TO CVT
IECIDLK2 EQU   40                       CVT OFFSET TO UCB LIST
IECIDUCB EQU   0                        DISP TO UCB PTR IN SCAN TBL
IECIDIN2 EQU   2                        UCB SCAN TBL INCREMENT
IECIDIN4 EQU   4                        DOM LIST INCREMENT
IECIDSP0 EQU   0                        DISPLACEMENT OF 0
IECIDSP1 EQU   1                        DISPLACEMENT OF 1
IECIDSP2 EQU   2                        DISPLACEMENT OF 2
IECIDFL1 EQU   6                        DISP IN UCB OF FLAGS 1
IECIDUTN EQU   13                       DISP IN UCB OF UNIT NAME
IECIDTYP EQU   16                       DISP IN UCB OF UCB TYPE
IECIDTAP EQU   X'80'                    TAPE DEVICE TYPE INDICATOR
IECIDNRY EQU   X'40'                    UCB NOT READY FLAG
IECIDITF EQU   X'10'                    UCB INTERCEPT FLAG
IECIDDOM EQU   X'40'                    DOM INDICATOR
IECIDEND EQU   X'80'                    END OF LIST INDICATOR
         SPACE 2
         LR    IECIDLST,IECIDINP        PUT LIST ADR IN WORK REG
         BC    15,IECID002              FIRST TIME BRANCH
************************
         SPACE 1
IECID000 LR    IECIDWK1,IECIDLST        INIT REG FOR SCAN
         LA    IECIDWK2,IECIDIN4        INIT REG FOR DECREMENT
IECID001 SR    IECIDWK1,IECIDWK2        POINT TO PREV ENTRY
         CLC   IECIDSP1(3,IECIDLST),IECIDSP1(IECIDWK1) EQ UNIT ADR
         BC    8,IECID007               YES, GO TO HANDLE
*
         CR    IECIDWK1,IECIDINP        LAST ENTRY TESTED
         BC    2,IECID001               NO, CONTINUE TEST
*
IECID002 L     IECIDWK1,IECIDCVT        GET CVT ADDR
         L     IECIDWK1,IECIDLK2(0,IECIDWK1)  UCB SCAN TABLE
IECID003 LH    IECIDWK2,IECIDSP0(0,IECIDWK1)  GET UCB PTR
         LTR   IECIDWK2,IECIDWK2        TEST FOR VALID UCB
         BC    4+2,IECID005             YES, GO TO TEST
*
IECID004 LA    IECIDWK1,IECIDIN2(0,IECIDWK1)  UPDATE TABLE PTR
         CLI   IECIDSP1(IECIDWK1),X'FF'  TEST FOR END OF TABLE
         BC    8,IECID006               YES, NO DOM FOR THIS MSG
*
         BC    15,IECID003              CONTINUE SEARCH
************************
         SPACE 1
IECID005 N     IECIDWK2,IECIDMSK        INSURE HALF WORD PTR
         CLC   IECIDSP1(3,IECIDLST),IECIDUTN(IECIDWK2) EQ UNIT NAME
         BC    7,IECID004               NO, CONTINUE SEARCH
*
         TM    IECIDFL1(IECIDWK2),IECIDNRY  TEST IF DEVICE READY
         BC    8,IECID008               YES, GO TO INDICATE DOM
*
         CLI   IECIDTYP+2(IECIDWK2),IECIDTAP  TEST FOR TAPE DEVICE
         BC    7,IECID006               NO, INDICATE NO DOM
*
         TM    IECIDFL1(IECIDWK2),IECIDITF  TEST REWIND,UNLOAD COND
         BC    1,IECID008               YES, INDICATE DOM
*
IECID006 NI    IECIDSP0(IECIDLST),X'FF'-IECIDDOM  INDICATE NO DOM
         BC    15,IECID009              GO TO UPDATE LIST PTR
************************
         SPACE 1
IECID007 OC    IECIDSP0(1,IECIDLST),IECIDSP0(IECIDWK1) DOM EQ PREV
         OI    IECIDSP0(IECIDWK1),IECIDDOM  SET DOM FOR PREV
         BC    15,IECID009              GO TO UPDATE LIST PTR
************************
         SPACE 1
IECID008 OI    IECIDSP0(IECIDLST),IECIDDOM  INDICATE DOM
IECID009 TM    IECIDSP0(IECIDLST),IECIDEND  TEST FOR LIST END
         BC    1,IECID010               YES, LEAVE ROUTINE
*
         LA    IECIDLST,IECIDIN4(0,IECIDLST)  POINT TO NEXT ENTRY
         BC    15,IECID000              GO TO HANDLE
************************
         SPACE 1
         DS    0F
IECIDMSK DC    X'0000FFFF'              HALF WORD UCB PTR MASK
IECID010 DS    0H                       END OF ROUTINE
         SPACE 2
         MEXIT                          EXIT MACRO
.PTH010  AIF   (N'&REG LT 7).IOSNG2     IF INSUFFICIENT WKREGS, MNOTE.
         AIF   ('&AUTH' NE 'IEE1C03D').PTH011 CHECK AUTHORIZATION.
         AGO   .PTH014                  SKIP NEXT STATEMENT.
.PTH011  AIF   ('&AUTH' NE 'IEE3603D').IOSNG1  GOTO MNOTE.
.PTH014  ANOP
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*     THIS ROUTINE, PROVIDED AND MAINTAINED BY IOS PERSONNEL,         *
*     DETERMINES WHETHER OR NOT A PATH IS AVAILABLE TO A DEVICE.      *
*                                                                     *
*     THIS FUNCTION ASSUMES THAT IT WILL RUN IN AN ENVIRONMENT WHERE  *
*     ALL INTERRUPTS ARE DISABLED...                                  *
*                                                                     *
*     THIS FUNCTION IS INVOKED BY CODING TO THE FOLLOWING FORMAT --   *
*        IOSGEN PTHAVL,&PARM,(&REG(1),&REG(2),... ,&REG(7)),&VAR,   + *
*                  AUTH=CSECTNME                                      *
*                                                                     *
*     WHERE -  1. &PARM MUST SPECIFY A REGISTER WHICH POINTS TO THE   *
*                  UCB FOR THE DEVICE TO BE CHECKED FOR PATH          *
*                  AVAILIBILITY.                                      *
*              2. &REG(1) MUST SPECIFY A REGISTER WHICH POINTS TO A   *
*                  ONE WORD WORKAREA.                                 *
*              3. &REG(2) THROUGH &REG(7) MUST SPECIFY SIX REGISTERS  *
*                  THAT MAY BE USED BY THIS ROUTINE.                  *
*              4. &VAR MUST BE A '1', FOR ONLY IN MULTIPROCESSING MAY *
*                  ALL PATHS BE VARY'ED OFFLINE.                      *
*              5. THE KEYWORD PARAMETER, 'AUTH=CSECTNME' MUST SPECIFY *
*                  THE OFFICIAL NAME OF THE CSECT INVOKING THIS FUNCTN*
*                                                                     *
*                                                                     *
*     THIS ROUTINE WILL DETERMINE PATH AVAILABILITY VIA A COMPARISON  *
*     OF THE UCBCHM FIELD (REPRESENTING PATHS HAVING PREVIOUSLY       *
*     BEEN FOUND TO BE NOT OPERATIONAL) AND AN IOS TCHCODE TABLE      *
*     CONSTANT (CALLED THE PATH COMPOSITE AND REPRESENTING THE TOTAL  *
*     NUMBER OF PATHS TO THE DEVICE). IN ADDITION, CHANNEL AVAILABIL- *
*     ITY IS CHECKED IN BOTH PSA CHANNEL TABLES.                      *
*                                                                     *
*     THE OUTPUT OF THIS MACRO IS A CONDITION CODE SETTING:           *
*          C.C. = ZERO, IF A PATH IS NOT AVAILABLE                    *
*          C.C. = OTHER THAN ZERO, IF A PATH IS AVAILABLE             *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 2
*                    REGISTER DEFINITION                              *
IECIPUCB EQU   &PARM                    UCB POINTER
IECIPWK0 EQU   &REG(1)                  WORKAREA POINTER
IECIPWK1 EQU   &REG(2)                  WORK REGISTER
IECIPWK2 EQU   &REG(3)                  WORK REGISTER
IECIPWK3 EQU   &REG(4)                  WORK REGISTER
IECIPWK4 EQU   &REG(5)                  WORK REGISTER
IECIPWK5 EQU   &REG(6)                  WORK REGISTER
IECIPWK6 EQU   &REG(7)                  WORK REGISTER
         SPACE 1
*                    MISCELLANEOUS EQUATES                            *
IECIPCVT EQU   16                       POINTER TO CVT
IECIPSYS EQU   116                      DISP IN CVT OF SYSTEM TYPE
IECIPLCH EQU   140                      DISP IN CVT OF LCH TAB PTR
IECIPMP  EQU   X'14'                    MULTI-PROCESSING FLAG
IECIPLCI EQU   10                       DISP IN UCB OF LCH INDEX
IECIPCHM EQU   12                       DISP IN UCB OF UCBCHM
IECIPABL EQU   X'0A'                    MASK FOR TESTING UCBCHM
IECIPMPF EQU   X'01'                    UCB ALLOC CHN MSK MULT PATH FLG
IECIPMCT EQU   X'2A0'                   M.P. PSA CHAN TABLE
IECIPRCF EQU   X'70'                    CHANNEL RECONFIG MASK
IECIPCHA EQU   4                        OFFSET TO CHANNL ADDRESS IN UCB
IECIPCPA EQU   C'A'                     CPU-A IDENTIFIER
IECIPPTR EQU   X'2B0'         OFFSET IN EACH PSA TO THE OTHERS PTR
IECIPTCH EQU   6                        DISP IN LCH WORD OF TCH CD PTR
IECIPMAX EQU   X'0F'                    MASK FOR ALL POSSIBLE PATHS
IECIPCID EQU   X'2B8'                   OFFSET IN EA PSA TO CPU - ID
IECIP0   EQU   0                        DISP OF ZERO
IECIP1   EQU   1                        DISP OF ONE
IECIP2   EQU   2                        DISPLACEMENT OF 2
IECIP3   EQU   3                        DISPLACEMENT OF 3
IECIP8   EQU   8                        DISPLACEMENT OF 8
         SPACE 2
         AIF   (&VAR(1) EQ 0).IOSNG3    IF 'UNI-PROC' SPECIFIED, MNOTE.
         SR    IECIPWK2,IECIPWK2        CLEAR REGISTER
         ST    IECIPWK2,IECIP0(IECIPWK0) CLEAR WORKAREA           M1000
         MVN   IECIP3(IECIP1,IECIPWK0),IECIPCHM(IECIPUCB) MOVE PTH BITS
         MVI   IECIP2(IECIPWK0),IECIPMAX MOVE A HEX '0F' INTO BYTE
         LA    IECIPWK4,IECIP2(IECIP0)  INITIALIZE BCT REG WITH A 2
         LR    IECIPWK5,IECIPWK4        INITIALIZE BCT REG WITH A 2
         TM    IECIP1(IECIPUCB),IECIPMPF Q.ARE THERE MULTI-PATHS
         BC    1,IECIP005               A.YES, BRANCH TO TCHTBL CODING
*
         LA    IECIPWK4,IECIP1(IECIP0)  A.NO, INIT BCT REG WITH A 1
         LA    IECIPWK1,IECIP8          INIT WITH AN 8 FOR PRIMARY PATH
         MVI   IECIP2(IECIPWK0),IECIPABL INITIALIZE BYTE 1 TO 0A
         IC    IECIPWK6,IECIPCHA(IECIPUCB) INSERT CHANNL ADR FROM UCB
         BC    15,IECIP021              BR AROUND TCHTBL CODE
************************
IECIP005 IC    IECIPWK2,IECIPLCI(0,IECIPUCB) GET LCH INDEX
         SLL   IECIPWK2,IECIP3          MULT BY 8 FOR CORRECT INDEX
         L     IECIPWK1,IECIPCVT        GET CVT POINTER AT LOCATION 16
         A     IECIPWK2,IECIPLCH(0,IECIPWK1) POINTER TO PROPER LCH
         LH    IECIPWK2,IECIPTCH(0,IECIPWK2) POINTER TO TCH CODE
         N     IECIPWK2,IECIPMSK        INSURE HALF WORD POINTER
         SH    IECIPWK2,IECIPSIX        SUB 6 TO POINT TO TOP OF TCHTBL
IECIP006 IC    IECIPWK6,IECIP0(IECIPWK2) GET CHAN ADDR FROM TCHCODE TBL
         IC    IECIPWK1,IECIP1(IECIPWK2) GET 4 PTHBITS FROM TCHCODE TBL
         N     IECIPWK1,IECIPWRD        TURN OFF PRECEDING FLAG BITS
IECIP021 N     IECIPWK6,IECIPWRD        CLEAR PRECDNG FLGS IN CHNNL ADR
         STC   IECIPWK1,IECIP0(IECIP0,IECIPWK0) STORE PTH INDCATR BYTE
         SPACE 1
*     M.P. CHANNEL TABLE POINTER IN THE PSA PLUS 2 TIMES CHANNEL =    *
*     PTR TO PROPR ELEMNT IN THE CHNNL TBL IN THE LO-CORE PSA AREA    *
         SPACE 1
         LA    IECIPWK6,IECIPMCT(IECIPWK6,IECIPWK6) 2 * CHN + CHTBL PTR
         SR    IECIPWK3,IECIPWK3        CLEAR REG FOR PSA INDEX USE
IECIP011 TM    IECIP0(IECIPWK6),IECIPRCF Q.IS CHNNL OFFLINE(CPU-A OR B)
         BC    8,IECIP013               A.IF NO,BR.WE GOT AT LEAST 1 CH
*
IECIP012 CLI   IECIPCID(IECIPWK3),IECIPCPA Q.IS THIS CPU-A (HIORLO COR)
         BC    8,IECIP004               A. IF YES, SKIP ADJUSTMNT
*
         SRL   IECIPWK1,2               ADJUST TO HIT CPU-B PATH
IECIP004 O     IECIPWK1,IECIP0(IECIP0,IECIPWK0) TURN ON DOWN PATH BITS
         ST    IECIPWK1,IECIP0(IECIP0,IECIPWK0)  STORE INTO BYTES 1&2
IECIP013 BCT   IECIPWK5,IECIP014        DECREMNT CNTR & BR OR FALL THRO
*
         LA    IECIPWK5,IECIP2(IECIP0)  REINITIALIZE BCT REG WITH A 2
         LA    IECIPWK2,IECIP2(IECIPWK2) UPDTE TCHTBL PTR TO NXT CH PTH
         BCT   IECIPWK4,IECIP006        DECREMNT CNTR & BR OR FALL THRO
*
         CLC   IECIP2(IECIP1,IECIPWK0),IECIP3(IECIPWK0) IS BYTE1=BYTE2
         BC    15,IECIP003              BR TO EXIT
************************
IECIP014 A     IECIPWK6,IECIPPTR(IECIP0) ADD HI-CORE PSAPTR TO PREV PTR
         A     IECIPWK3,IECIPPTR(IECIP0) INSERT HI-COR PSAPTR IN REG
         IC    IECIPWK1,IECIP0(IECIPWK0) REINIT PATH INDICATOR BYTE
         BC    15,IECIP011              CONTINUE BCT LOOP
************************
         DS    0F                       BOUNDARY ALIGNMENT
IECIPWRD DC    X'0000000F'              FOR CLEARING REGS 1ST 3.5 BYTES
IECIPMSK DC    X'0000FFFF'
IECIPSIX DC    H'6'                     HALFWORD SIX
IECIP003 DS    0H                       EXIT FROM ROUTINE
         SPACE 2
         MEXIT
.SSM000  AIF   ('&AUTH' EQ 'IGFMCH10').SSM0A0                     M0402
         AIF   ('&AUTH' EQ 'IGFMCHE0').SSM0A0                     M0402
         AGO   .IOSNG1                  UNAUTHORIZED USE MNOTE.
.SSM0A0  AIF   (&VAR EQ 1).SSM001       OTHER OPTION
         AIF   (N'&REG LT 4).IOSNG2     IF INSUFFICIENT WKREGS, MNOTE.
         EJECT
*    THIS ROUTINE, PROVIDED AND MAINTAINED BY IOS PERSONNEL,
*    SELECTIVELY ENABLES ALL CHANNELS BY WHICH A GIVEN DEVICE
*    CAN BE ACCESSED.FOR 360 MACHINES CHANNELS 0-5 ARE SELECT-  SA53991
*    IVELY ENABLED BY TURNING ON BITS 0-5 OF THE PSW. CHANNELS  SA53991
*    6-N ARE COLLECTIVELY ENABLED BY TURNING ON BIT 6 OF THE    SA53991
*    PSW.FOR 370 MACHINES RUNNING IN BC MODE CHANNELS 0-5 ARE   SA53991
*    HANDLED THE SAME AS WITH 360 MACHINES. CHANNELS 6-N ARE    SA53991
*    SELECTIVELY ENABLED BY TURNING ON CORRESPONDING BITS IN    SA53991
*    CONTROL REGISTER 2. BIT 6 IN THE PSW IS TURNED ON TO       SA53991
*    INDICATE THAT I/O INTERRUPTS ON CHANNEL 6 AND HIGHER ARE   SA53991
*    UNDER CONTROL OF THE BIT SETTINGS IN CONTROL REGISTER 2.   SA53991
*    CSECT IGFMCHEO IS UNIQUE TO 370 AND IS USED TO INVOKE THE  SA53991
*    370 LOGIC. IF IN THE FUTURE OTHER CSECTS ARE AUTHORISED    SA53991
*    THE LOGIC SHOULD BE REVIEWED.                              SA53991
*
*        THIS FUNCTION IS INVOKED BY CODING ACCORDING TO THE FOLLOWING
*        FORMAT --
*        IOSGEN SELSSM,&PARM,(&REG(1),&REG(2),&REG(3),&REG(4)),&VAR, +
*              AUTH=CSECTNME            WHERE --
*       1. &PARM MUST SPECIFY A REGISTER WHICH POINTS TO THE UCB FOR
*              THE DEVICE FOR WHICH CHANNEL PATHS MUST BE ENABLED.
*       2. &REG(1) THROUGH &REG(4) MUST SPECIFY FOUR REGISTERS WHICH
*              MAY BE USED BY THIS ROUTINE.
*       3. &VAR MUST, FOR THIS VARIATION, BE '0'.
*       4. THE KEYWORD PARAMETER 'AUTH=CSECTNME' MUST SPECIFY THE NAME
*              OF THE CSECT INVOKING THIS MACRO.
*
*        THIS ROUTINE, USING BOTH THE UCB AND THE TCH PREFIX TABLE,
*    FORMATS THE SYSTEM MASK OF A PSW PROVIDED WITHIN THIS ROUTINE.
*    THE ADDRESS PORTION OF THE PSW POINTS TO THE FIRST BYTE
*    AFTER THIS ROUTINE.  A LPSW INSTRUCTION PROVIDES THE
*    SELECTIVE ENABLE AND CAUSES THE CALLER'S NEXT SEQUENTIAL
*    INSTRUCTION TO BE EXECUTED.
         SPACE 1
***********************************************************************
         AIF   ('&AUTH' EQ 'IGFMCHE0').SSM370                   SA53991
         SPACE 2
*        REGISTER DEFINITION
IECISUCB EQU   &PARM                    POINTER TO UCB
IECISWK1 EQU   &REG(1)                  WORK REGISTER
IECISWK2 EQU   &REG(2)                  WORK REGISTER
IECISWK3 EQU   &REG(3)                  WORK REGISTER
IECISWK4 EQU   &REG(4)                  WORK REGISTER
         SPACE 1
*        MISCELLANEOUS EQUATES
IECIS0   EQU   0                        ZERO MASK AND DISPLACEMENT
IECIS2   EQU   2                        DISPLACEMENT OF 2
IECIS3   EQU   3                        DISPLACEMENT OF 3
IECIS6   EQU   6                        DISPLACEMENT OF 6
IECIS8   EQU   8                        DISPLACEMENT OF 8
IECISCVT EQU   16                       ADDRESS OF CVT POINTER
IECISLCH EQU   140                      DISPL INTO CVT OF LCH TBL PTR
IECISLCI EQU   10                       DISPL INTO UCB OF LCH INX
IECISACM EQU   1                        DISPL INTO UCB OF ALLC CHN MSK
IECISCUA EQU   4                        DISPL INTO UCB OF DEV ADDR
IECISPTH EQU   X'01'                    MULTI-PATH INDIC IN UCB
IECISSM0 EQU   X'80'                    SYSTEM MASK FOR CHAN 0
         SPACE 2
         MVI   IECISMSK+1,IECIS0        INIT MASK FOR PSW SYST MASK
         LH    IECISWK1,IECISCUA(0,IECISUCB) GET DEV ADDRESS
         SR    IECISWK4,IECISWK4        INIT REG FOR 1 CHN PATH TO DEV
         LA    IECISWK3,IECIS2          INIT REG FOR 1 CHN PATH TO DEV
         TM    IECISACM(IECISUCB),IECISPTH TEST IF MORE THAN ONE PATH
         BC    8,IECIS001               NO, GO TO SET SYSTEM MASK
*
         L     IECISWK1,IECISCVT        GET PTR TO CVT
         L     IECISWK1,IECISLCH(0,IECISWK1) GET LCH TBL POINTER
         SR    IECISWK2,IECISWK2        CLEAR REGISTER
         IC    IECISWK2,IECISLCI(0,IECISUCB) GET LCH INDEX INTO TBL
         SLL   IECISWK2,IECIS3          MULT BY 8 TO FORM DISPL
         LH    IECISWK3,IECIS6(IECISWK1,IECISWK2) GET PTR TO TCH CODE
         N     IECISWK3,IECISHWD        INSURE TWO BYTE ADDRESS
         SH    IECISWK3,IECISTWO        BACK UP BY 2 - PT TO PTH SUMMRY
         IC    IECISWK2,IECIS0(0,IECISWK3) GET TOTAL NO. OF PATHS
         AR    IECISWK2,IECISWK2        DOUBLE TO GET START OF PTH TBL
         LR    IECISWK4,IECISWK3        GET BACK UP TBL PTR
         SR    IECISWK4,IECISWK2        POINT TO PATH TBL ORIGIN
IECIS000 LH    IECISWK1,IECIS0(0,IECISWK4) GET PATH TO DEVICE
IECIS001 N     IECISWK1,IECISADR        INSURE VALID PATH ADDRESS
         SRL   IECISWK1,IECIS8          ISOLATE CHANNEL
         LA    IECISWK2,IECISSM0        INIT SYST MASK FOR CHAN 0
         SRL   IECISWK2,IECIS0(IECISWK1) SHIFT BIT BY AMT = CHAN NO.
*                                       TO GET BIT IN PROPER POSITN
         CH    IECISWK2,IECISTWO        TEST FOR CHANNEL GT SIX
         BC    8+2,IECIS002             NO, BRANCH
*
         LH    IECISWK2,IECISTWO        YES, RESET TO CHAN SIX
IECIS002 STC   IECISWK2,IECISMSK        SET APPROP CHN BIT FOR SYS MASK
         OC    IECISMSK+1(1),IECISMSK   OR INTO MASK
         LA    IECISWK4,IECIS2(0,IECISWK4) UPDATE PTH TBL POINTER
         CR    IECISWK4,IECISWK3        TEST IF ALL POSS CHN PTHS PROC
         BC    7,IECIS000               NO, GO TO GET NEXT PATH
*
         MVC   IECISPSW(1),IECISMSK+1   INIT THE SYS MASK IN THE PSW
         LPSW  IECISPSW                 PERFORM THE SSM VIA LPSW
************************
         SPACE 2
*        CONSTANTS
IECISPSW DS    0D                       PSW USED TO SET SYS MASK
         DC    X'0004'                  SYSTEM MASK, KEY, AMWP,
         DC    H'0'                     INTERRUPTION CODE
         DC    A(IECISEND)              ILC, CC, PGM MSK, ADDR OF NSI
IECISHWD DC    X'0000FFFF'              HALF WORD MASK
IECISADR DC    X'00000FFF'              VALID DEV ADDR MASK
IECISMSK DC    X'0000'                  MASK USED TO FORM SYS MASK
IECISTWO DC    H'2'                     COMPARAND FOR VALID SYS MASK
IECISEND DS    0C
         MEXIT                          EXIT MACRO
.SSM370  ANOP                                                   SA53991
         SPACE 2                                                SA53991
*        REGISTER DEFINITION                                    SA53991
IECISUCB EQU   &PARM                    POINTER TO UCB          SA53991
IECISWK1 EQU   &REG(1)                  WORK REGISTER           SA53991
IECISWK2 EQU   &REG(2)                  WORK REGISTER           SA53991
IECISWK3 EQU   &REG(3)                  WORK REGISTER           SA53991
IECISWK4 EQU   &REG(4)                  WORK REGISTER           SA53991
IECCTLR2 EQU   2                        CHANL MASK CONTROL REG2 SA53991
IECCTLR3 EQU   3                        CHNL MASK CONTROL REG3  SA53991
         SPACE 1                                                SA53991
*        MISCELLANEOUS EQUATES                                  SA53991
IECIS0   EQU   0                   ZERO MASK AND DISPLACEMENT   SA53991
IECIS2   EQU   2                        DISPLACEMENT OF 2       SA53991
IECIS3   EQU   3                        DISPLACEMENT OF 3       SA53991
IECIS4   EQU   4                        DISPLACEMENT OF 4       SA53991
IECIS6   EQU   6                        DISPLACEMENT OF 6       SA53991
IECIS8   EQU   8                        DISPLACEMENT OF 8       SA53991
IECISCVT EQU   16                       ADDRESS OF CVT POINTER  SA53991
IECISLCH EQU   140                 DISP INTO CVT OF LCH TBL PTR SA53991
IECISLCI EQU   10                  DISP INTO UCB OF LCH INX     SA53991
IECISACM EQU   1                   DISP INTO UCB OF ALLC CHN MSKSA53991
IECISCUA EQU   4                   DISP INTO UCB OF DEV ADDR    SA53991
IECISPTH EQU   X'01'               MULTI-PATH INDIC IN UCB      SA53991
         SPACE 2                                                SA53991
         XC    IECISMSK+2(2),IECISMSK+2 INIT MASK FOR CTRL REG2 SA53991
         LH    IECISWK1,IECISCUA(0,IECISUCB) GET DEV ADDRESS    SA53991
         SR    IECISWK4,IECISWK4 INIT REG FOR 1 CHN PATH TO DEV SA53991
         LA    IECISWK3,IECIS2   INIT REG FOR 1 CHN PATH TO DEV SA53991
         TM    IECISACM(IECISUCB),IECISPTH TST IF MORE THN 1 PTHSA53991
         BC    8,IECIS001          NO, GO TO SET SYSTEM MASK    SA53991
*
         L     IECISWK1,IECISCVT   GET PTR TO CVT               SA53991
         L     IECISWK1,IECISLCH(0,IECISWK1) GET LCH TBL PTR    SA53991
         SR    IECISWK2,IECISWK2   CLEAR REGISTER               SA53991
         IC    IECISWK2,IECISLCI(0,IECISUCB) GET LCH INX INTO TBSA53991
         SLL   IECISWK2,IECIS3     MULT BY 8 TO FORM DISPL      SA53991
         LH    IECISWK3,IECIS6(IECISWK1,IECISWK2) PTR TO TCH CDESA53991
         N     IECISWK3,IECISHWD   ENSURE TWO BYTE ADDRESS      SA53991
         SH    IECISWK3,IECISTWO   BACK UP BY 2-PT TO PTH SUMMRYSA53991
         IC    IECISWK2,IECIS0(0,IECISWK3) GET TOTAL NO OF PATHSSA53991
         AR    IECISWK2,IECISWK2   DOUBLE TO GET START OF PTH RBSA53991
         LR    IECISWK4,IECISWK3   GET BACK UP TBL PTR          SA53991
         SR    IECISWK4,IECISWK2   POINT TO PATH TBL ORIGIN     SA53991
IECIS000 LH    IECISWK1,IECIS0(0,IECISWK4) GET PATH TO DEVICE   SA53991
IECIS001 N     IECISWK1,IECISADR   ENSURE VALID PATH ADDRESS    SA53991
         SRL   IECISWK1,IECIS8     ISOLATE CHANNEL              SA53991
         ICM   IECISWK2,IECIS3,IECISSM0 INIT SYSMASK FOR CHAN 0 SA53991
         SRL   IECISWK2,IECIS0(IECISWK1) SHFT BIT BY AMT= CHN NOSA53991
*                                        TO POSITN BIT CORRECTLYSA53991
IECIS002 STH   IECISWK2,IECISMSK SET UP APPROP CHAN BIT FOR     SA53991
*                                       I/O MASK                SA53991
         OC    IECISMSK+IECIS2(IECIS2),IECISMSK OR INTO MASK    SA53991
         LA    IECISWK4,IECIS2(0,IECISWK4) UPDTE PTH TBL PTR    SA53991
         CR    IECISWK4,IECISWK3   TEST IF ALL POSS PATHS PROCSDSA53991
         BC    7,IECIS000          NO GO TO NEXT PATH           SA53991
*        STCTL IECCTLR2,IECCTLR3,IECCNTWK    SAVE CHANNEL MASK  SA53991
         XC    IECCNTW2(8),IECCNTW2          CLEAR MASK FIELD   SA53991
         OC    IECCNTW2(IECIS2),IECISMSK+2   SET UP I/O MASK    SA53991
         LCTL  IECCTLR2,IECCTLR3,IECCNTW2    LOAD NEW CHAN MASK SA53991
         MVC   IECISPSW(1),IECCNTW2    LOW BYTE INTO PSW        SA53991
         NI    IECISPSW,X'FC'          RETAIN 0-5 CH BITS       SA53991
         OI    IECISPSW,X'02'          SET BIT 6 ON             SA53991
IECISNSA LA    IECISWK2,IECISEND       NSI                      SA53991
         ST    IECISWK2,IECISPSW+IECIS4 ST IN PSW               SA53991
         LPSW  IECISPSW                                         SA53991
************************
         SPACE 2                                                SA53991
*        CONSTANTS                                              SA53991
IECCNTWK DC    D'0'                     SAVE-I/O NEW CHAN MASK
IECCNTW2 DC    D'0'                     BUILD NEW I/O MASK
IECISPSW DS    0D
         DC    X'0004'                 SYS MASK,KEY,MODE,MWP    SA53991
         DC    H'0'                    INTERRUPTION CODE        SA53991
         DC    A(IECISEND)             ILC,CC,PGM MASK,NSI      SA53991
IECISHWD DC    X'0000FFFF'              HALF WORD MASK
IECISADR DC    X'00000FFF'              VALID DEV ADDR MASK
IECISMSK DC    F'0'           MASK USED TO FORM SYS MASK
IECISSM0 DC    XL2'8000'      SYSMASK FOR CHANNEL 0
IECISTWO DC    H'2'           COMPARAND FOR VALID SYS MASK
IECISEND DS    0C
         MEXIT
.SSM001  ANOP
         EJECT
*    THIS ROUTINE, PROVIDED AND MAINTAINED BY IOS PERSONNEL, DISABLES
*    ALL CHANNELS.
         SPACE 1
*        THIS FUNCTION IS INVOKED BY CODING TO THE FOLLOWING FORMAT --
*
*        IOSGEN SELSSM,,,&VAR,AUTH=CSECTNME       WHERE --
*              1. &VAR FOR THIS VARIATION MUST BE A '1'.
*              2. THE KEYWORD PARAMETER 'AUTH=CSECTNME' MUST SPECIFY
*                  THE OFFICIAL NAME OF THE INVOKING CSECT.
*
         SPACE 1
         AIF   ('&AUTH' EQ 'IGFMCHE0').SSM002                   SA53991
         LPSW  IECISDIS                 DISABLE VIA LPSW
         SPACE 1
IECISDIS DS    0D                       PSW USED TO DISABLE
         DC    X'0004'                  SYSTEM MASK, KEY, AMWP,
         DC    H'0'                     INTERRUPTION CODE
         DC    A(IECISNSI)              ILC, CC PGM MSK, ADDR OF NSI
IECISNSI DS    0C
         MEXIT                          EXIT MACRO
.SSM002  ANOP                                                   SA53991
         SPACE 2
IECCNTR2 EQU   2                  CONTROL REG 2 CHN MASK        SA53991
IECCNTR3 EQU   3                  CONTROL REG 3 CHN MASK        SA53991
         LA    IECISWK2,IECISNSI  ADDR OF NSI                   SA53991
         ST    IECISWK2,IECISNSI+IECIS4     STORE IN PSW        SA53991
         LPSW  IECISDIS                     LOAD DISABLE PSW    SA53991
IECISDIS DS    0D                 PSW USED TO DISABLE           SA53991
         DC    X'0004'            SYS MASK,KEY,MODE,MWP         SA53991
         DC    H'0'               INTERRUPTION CODE             SA53991
         DC    A(IECISNSI)        ADDR OF NSI                   SA53991
IECISNSI DS    0C                                               SA53991
         LCTL  IECCNTR2,IECCNTR3,IECCNTWK   RESTORE CONTR REG   SA53991
         MEXIT                                                  SA53991
.NIP010  ANOP
         AIF   ('&AUTH' EQ 'IEEMPVCH').NIP010A
         AIF   ('&AUTH' EQ 'IEEMPVCP').NIP010A
         AIF   ('&AUTH' EQ 'IEAMP650').NIP010A
         AGO   .IOSNG1                  UNAUTHORIZED USE MNOTE
.NIP010A ANOP
***********************************************************************
***      MACRO DEFINITION - UCBCHM FUNCTION OF IOSGEN               ***
***            THIS MACRO, OWNED AND MAINTAINED BY IOS PERSONNEL,   ***
***            INSERTS THE PATH MASK CREATED BY MP6500 INTO THE     ***
***            'UCBCHM' FIELD.                                      ***
***                                                                 ***
         AIF   (&EXECN EQ 1).NIP101
***            FOLLOWING ARE THE PARAMETERS WHICH MUST BE SPECIFIED ***
***                1.&FUNC-UCBCHM                                   ***
***                2.&PARM-NUMBER OF A REGISTER WHICH POINTS TO     ***
***                  THE UCB.                                       ***
***                3.&REG-SPECIFIES THE NUMBER OF A REGISTER WHICH  ***
***                  POINTS TO THE PATH MASK BYTE. IF NOT SPECIFIED ***
***                  THE VAR PARAMETER WILL BE USED TO LOCATE THE   ***
***                  UCB PATH MASK.                                 ***
***                4.&VAR-LABEL OF THE BYTE CONTAINING THE UCB PATH ***
***                  MASK                                           ***
***            THE KEYWORD PARAMETER 'AUTH=CSECTNME' MUST ALSO BE   ***
***            SPECIFIED, NOTING THE CSECT NAME INVOKING THE MACRO. ***
.NIP101  ANOP
***********************************************************************
         SPACE 1
         AIF   ('&REG' NE '').NIP110    USING REGISTER FORM...
         SPACE 1
***********************************************************************
***            REGISTER DEFINITION                                  ***
***********************************************************************
IECIU&SUFFIX EQU &PARM                  UCB POINTER REGISTER
         AIF   (&EXECN EQ 1).NIP102     NOT FIRST TIME - SKIP
&EXECN   SETB  1                        SET FIRST TIME SWITCH
***********************************************************************
***            UCB DEFINITION                                       ***
***********************************************************************
IECIWCHM EQU   12                       DISP TO PATH MSK IN UCB
.NIP102  ANOP
         SPACE 3
&NAME    MVN   IECIWCHM(1,IECIU&SUFFIX),&VAR MOVE PATH MASK INTO UCBCHM
         AGO   .IOSGEND
.NIP110  ANOP
         SPACE 1
***********************************************************************
***     THIS FUNCTION OF IOSGEN USES A REGISTER TO POINT TO PTHMSK  ***
***********************************************************************
         SPACE 1
***********************************************************************
***            REGISTER DEFINITION                                  ***
***********************************************************************
IECIW&SUFFIX EQU &REG                  PATH MASK POINTER REGISTER
IECIU&SUFFIX EQU &PARM                  UCB POINTER REGISTER
         AIF   (&EXECN EQ 1).NIP103     NOT FIRST TIME - SKIP
&EXECN   SETB  1                        SET FIRST TIME SWITCH
***********************************************************************
***            UCB DEFINITION                                       ***
***********************************************************************
IECIWCHM EQU   12                       DISP TO PATH MSK IN UCB
.NIP103  ANOP
         SPACE 3
&NAME    MVN   IECIWCHM(1,IECIU&SUFFIX),0(IECIW&SUFFIX) PUT MASK IN UCB
         MEXIT                          EXIT MACRO
.*
.*   TP ATNTAB AND ERRTAB
.*
.TPGEN   AIF   ('&AUTH' EQ 'IGG01938').TPGENOK  CHECK AUTHORITY
         AIF   ('&AUTH' EQ 'IGG02036').TPGENOK  CHECK AUTHORITY
         AGO   .IOSNG1                  UNAUTHORIZED USE - MNOTE.
.TPGENOK ANOP
***********************************************************************
*        MACRO DEFINITION - ERRTAB AND ATNTAB MODIFICATION FOR TCAM   *
*              THIS MACRO OWNED AND MAINTAINED BY IOS PERSONNEL.      *
*              GENERATES CODE TO MODIFY ATNTAB AND ERRTAB IN UCB      *
*                                                                     *
*              THIS CODE IS GENERATED WHEN THE 'IOSGEN' CALL IS CODED *
*              BY TCAM. WHERE VARIABLES ARE SET ACCORDING TO THE      *
*              FORMAT BELOW  --                                       *
*&NAME   IOSGEN &FUNC,&PARM,&REG,AUTH=CSECTNME  -- WHERE ...          *
*              &NAME = LABEL                                          *
*              &FUNC = TP                                             *
*              &PARM = UCB REGISTER ASSIGNMENT                        *
*              &REG  = ERRTAB INDEX IN HEX                            *
*                    = ATNTABT - USE TP ATNTAB IN UCB                 *
*                    = ATNTABG - USE GR ATNTAB IN UCB                 *
*              AUTH=CSECTNME... SPECIFIES THE NAME OF THE CSECT THAT  *
*                               INVOKES THIS MACRO.                   *
***********************************************************************
         SPACE 1
         AIF   ('&REG' EQ 'ATNTABT').TPATN   TEST FOR TP ATNTAB   20002
         AIF   ('&REG' EQ 'ATNTABG').GRATN   TEST FOR GR ATNTAB   20002
&NAME    MVI   8(&PARM),X'&REG'         MODIFY ERRTAB IN UCB      20002
         AGO   .IOSGEND                 GO TO END                 20002
.TPATN   ANOP                                                     20002
&NAME    MVI   11(&PARM),X'14'          MODIFY ATNTAB FOR TP      20002
         MEXIT                          EXIT MACRO
.GRATN   ANOP                                                     20002
&NAME    MVI   11(&PARM),X'10'          MODIFY ATNTAB FOR GR      20002
         MEXIT                          EXIT MACRO
.*
.*   TCB RESTORE
.*
.IECRES  AIF  ('&AUTH' NE 'IKJEAR03').IOSNG1 UNAUTHORIZED USE - MNOTE.
         AIF   ('&NAME' EQ '').NONAME   CHECK FOR LABEL           20001
&LBL     SETC  '&NAME'                                            20001
         AGO   .NAME                    BRANCH AROUND             20001
.NONAME  ANOP                                                     20001
&LBL     SETC  'IECIRS'                 SET IOS LABEL             20001
.NAME    ANOP                                                     20001
***********************************************************************
*        MACRO DEFINITION - INLINE RESTORE CODING FOR TSO             *
*              THIS MACRO OWNED AND MAINTAINED BY IOS PERSONNEL,      *
*                                                                     *
*              THIS CODE IS GENERATED WHEN THE 'IOSGEN' CALL IS CODED *
*              BY TSO. WHERE VARIABLES ARE SET ACCORDING TO THE       *
*              FORMAT BELOW --                                        *
*&NAME   IOSGEN &FUNC,AUTH=CSECTNME     ...WHERE...                   *
*              &NAME - A SYMBOL TO REFER TO FIRST STATEMENT IN CODE,  *
*                      IT WILL BE CONCATENATED WITH 01-0N TO FORM     *
*                      LABELS WITHIN THE CODE. LABEL LIMIT IS 6 CHAR. *
*                      AND WILL BE IECIRS, IF NOT SPECIFIED.          *
*              &FUNC - RESTORE                                        *
*              AUTH=CSECTNME... SPECIFIES THE NAME OF THE CSECT THAT  *
*                               INVOKES THIS MACRO.                   *
*                                                                     *
*    OPERATION GET TO FIRST TCB ENTRY IN THE QUIESCE I/O              *
*              PARAMETER LIST.                                        *
*                   PUT IOB ADDRESS IN REGISTER 1                     *
*                   PUT TCB ADDRESS (FROM ENTRY) IN REG.0             *
*                   ISSUE TCB EXCP MACRO INSTRUCTION (SVC 92)         *
*                   POST ECB IF NECESSARY                             *
*                   REPEAT FOR EACH IOB IN CHAIN                      *
*              GET TO NEXT TCB ENTRY IN THE QPL, AND REPEAT           *
*              UNTIL THE LAST TCB ENTRY IS PROCESSED.                 *
*                                                                     *
*    FUNCTION  THIS ROUTINE RESTORES A CHAIN OF PREVIOUSLY            *
*              PURGED I/O REQUESTS FOR EACH TCB SPECIFIED.            *
*              THE LIST OF TCBS AND IOB CHAINS IS PASSED              *
*              IN THE QUIESCE I/O PARAMETER LIST (QPL).               *
*                                                                     *
*    INPUT     ADDRESS OF QUIESCE I/O PARAMETER LIST                  *
*              REG 13 WILL NOT BE DESTROYED . IT MUST CONTAIN    M1187*
*            ADDR OF AREA WHERE CALLER HAS SAVED HIS REGS.       M1187*
.*            (RESTORE CODE GENERATED NOW DOES NOT STOP REFRESH.)M1187*
***********************************************************************
         SPACE 2
***********************************************************************
* QPL EQUATES                                                         *
***********************************************************************
IECIQCNT EQU   0                        COUNT FIELD IN QPL        20001
IECIQIOB EQU   0                        IOB CHAIN LOCATION ADDR   20001
IECIQFLG EQU   4                        QPL FLAG OFFSET           20001
IECIQTCB EQU   4                        TCB ADDRESS               20001
IECIQBAS EQU   4                        SIZE OF QPL BASE          20001
IECIQENT EQU   8                        QPL ENTRY SIZE            20001
IECIQCUR EQU   X'40'                    QPL CURRENT ENTRY FLAG    20001
IECIQLST EQU   X'80'                    LAST QPL ENTRY            20001
         SPACE 2
***********************************************************************
* REGISTER ASSIGNMENTS                                                *
***********************************************************************
         SPACE 1
IECIRG0  EQU   0                        PARA REG 0                20001
IECIRINP EQU   1                        PARA REG 1                20001
IECIRIOB EQU   IECIRINP                 IOB REG FOR TCB EXCP      20001
IECIRWK1 EQU   2                        WORK REG 1                20001
IECIRWK2 EQU   3                        WORK REG 2                20001
IECIRWK3 EQU   5                        WORK REG 3                20001
IECIRBAS EQU   6                        BASE REGISTER             20001
IECIXQPL EQU   7                        CURRENT ENTRY IN QPL      20001
IECIRSAV EQU   8                        SAVE REGISTER             20001
IECICDRG EQU   10                       ECB CODE REGISTER         20001
IECIECBR EQU   11                       ECB REGISTER              20001
IECIRPST EQU   12                       TCB REG FOR POST          20001
*        EQU   13 .       * DO NOT DESTROY(CALLER'S SAVE AREA) * M1187
IECIRG13 EQU   13                       CALLERS SAVE AREA ADDR   YM2215
IECIRG14 EQU   14                       RETURN REG FROM POST      20001
IECIRG15 EQU   15                       POST ADDR REG             20001
         SPACE 2
***********************************************************************
* EQUATES                                                             *
***********************************************************************
         SPACE 1
IECIECBI EQU   4                        ECB POINTER IN IOB        20001
IECIREST EQU   25                       IOB RESTART FIELD         20001
IECIPOST EQU   152                      POST ADDR OFFSET IN CVT   20001
IECICOMP EQU   X'7F'                    COMPLETION CODE IN ECB    20001
IECIECBF EQU   0                        IOB ECB FLAG OFFSET       20001
IECIOBDC EQU   20 .                     DISPL TO DCB ADDR IN IOB M4419
IECDCBDE EQU   44 .                     DISPL TO DEB ADDR IN DCB M4419
IECDEBUP EQU   16 .                     DISPL TO DEBUSRPG        M4419
IECIOBF1 EQU   0 .                      DISPL TO IOB FLAG1       M4419
IECIOBUR EQU   X'02' .                  IOBFLAG1---ON=UNRELATD IOM4419
IECDCBIF EQU   44 .                     DISPL TO DCB IFLGS       M4419
IECDCBPE EQU   X'C0' .                  DCBIFLG---ON=PERM ERROR  M4419
IECPRGCC EQU   X'48' .                  PURGE COMPLETION CODE/IOBM4419
IECCVTPT EQU   16 .                    GET CVT ADDR              M5464
IECIWAIT EQU   X'80'                    WAIT CODE                 20001
IECITXCP EQU   92                       TCB EXCP CODE             20001
         EJECT                                                    20001
&LBL     DS    0H .                                              M1187
         BALR  6,0                      SET BASE REGISTER         20001
         USING *,IECIRBAS                                         20001
         LR    IECIXQPL,IECIRINP        SAVE ADDR OF QPL          20001
         LA    IECIXQPL,IECIQBAS(IECIXQPL)   GET FIRST QPL ENTRY  20001
*  PREPARE TO BUILD NEW RESTORE IOB CHAINS FOR RELATED REQUESTS--M4419
*  IN PERM ERROR THAT SVC PURGE GOT TO BEFORE IGE0025E COULD     M4419
         LR    IECIRWK3,IECIXQPL        BEGIN OF QPL ENTRIES     M4419
&LBL.1A  L     IECIRWK2,IECIQIOB(IECIRWK3)   BEGIN OF IOB CHAIN  M4419
&LBL.1B  EQU   * .                                               M4419
         LA    IECIRWK2,0(IECIRWK2)     CLEAR HI-BYTE            M4419
         C     IECIRWK2,FFWORD          ANY CHAIN/END OF CHAIN   M4419
         BE    &LBL.1D .                GO GET NXT QPL ENTRY     M4419
         TM    IECIOBF1(IECIRWK2),IECIOBUR   UNRELATED I/O       M4419
         BO    &LBL.1C .                GET NEXT IOB             M4419
         L     IECIRG15,IECIOBDC(IECIRWK2)   DCB ADDR FROM IOB   M4419
         TM    IECDCBIF(IECIRG15),IECDCBPE   TEST FOR PERM ERROR M4419
         BNO   &LBL.1C .                GET NEXT IOB             M4419
         L     IECIRG15,IECDCBDE(IECIRG15)   DEB ADDR FROM DCB   M4419
         MVC   IECDEBUP+1(3,IECIRG15),FFWORD+1 INIT EACH DEBUSRPGM4419
&LBL.1C  L     IECIRWK2,IECIREST-1(IECIRWK2) NEXT IOB ADDR       M4419
         B     &LBL.1B .                                         M4419
&LBL.1D  TM    IECIQFLG(IECIRWK3),IECIQLST   LAST ENTRY IN QPL   M4419
         BO    &LBL.1E                  END OF PASS1             M4419
         LA    IECIRWK3,IECIQENT(IECIRWK3)   NEXT QPL ENTRY      M4419
         B     &LBL.1A                                           M4419
&LBL.1E  EQU   * .                      RELATED I/O--END PASS 1  M4419
&LBL.01  NI    IECIQFLG(IECIXQPL),255-IECIQCUR    CUR ENT FLG OFF 20001
         L     IECIRWK1,IECIQIOB(IECIXQPL)   GET FIRST IOB ADDR   20001
         SR    IECIRWK2,IECIRWK2        CLEAR WORK REGISTER       20001
&LBL.02  SRDL  IECIRWK1,1               SHIFT BIT TO NEXT REG.    20001
         LTR   IECIRWK2,IECIRWK2        TEST NEXT REG. FOR NEG.   20001
         BC    4,&LBL.05                YES-BR TO GET NEXT ENTRY  20001
         SLL   IECIRWK1,1               RESHIFT VALUE IN REG.     20001
         L     IECIRWK3,IECIREST-1(IECIRWK1) GET NEXT IOB IN CHAIN20001
         L     IECIECBR,IECIECBI(IECIRWK1)   GET ECB ADDRESS      20001
         LA    IECIECBR,0(IECIECBR) .CLEAR HI-BYTE                M0100
         TM    IECIOBF1(IECIRWK1),IECIOBUR . UNRELATED I/O       M4419
         BO    &LBL.2A .                                         M4419
         L     IECIRWK2,IECIOBDC(IECIRWK1) . GET DCB ADDR IN IOB M4419
         TM    IECDCBIF(IECIRWK2),IECDCBPE . TEST FOR PERM ERROR M4419
         BNO   &LBL.2A                                           M4419
*  POST IOB ECB AS PURGED (COMPLETION CODE X'48')                M4419
         LA    IECICDRG,IECPRGCC .      COMPL CODE               M4419
         SLL   IECICDRG,24 .            SHIFT TO HI-BYTE         M4419
         L     IECIRPST,IECIQTCB(IECIXQPL) . TCB ADDR FOR POST   M4419
         L     IECIRG15,IECCVTPT .     CVT ADDR                  M5464
         L     IECIRG15,IECIPOST(IECIRG15) . POST RTNE ENTRY     M4419
         LR    IECIRSAV,IECIRG13 .      SAVE CALLER SA REG      YM2215
         BALR  IECIRG14,IECIRG15                                 M4419
         LR    IECIRG13,IECIRSAV .      RESTORE CALLER SA REG   YM2215
*                                                                M4419
         MVC     IECIREST(3,IECIRWK1),FFWORD+1 MARK IOBRESTR END M4419
         L     IECIRWK2,IECDCBDE(IECIRWK2) . GET DEB ADDR IN DCB M4419
         L     IECIRG15,IECDEBUP(IECIRWK2) . GET CONTENTS - USPRGM4419
         LA    IECIRWK2,IECDEBUP(IECIRWK2) . FIELD TO CHAIN IOB  M4419
&LBL.2B  EQU   * .                      CONTINUE SEARCH--CHN END M4419
         LA    IECIRG15,0(IECIRG15)     CLEAR HI-BYTE            M4419
         C     IECIRG15,FFWORD          ANY CHAIN/END OF CHAIN   M4419
         BE    &LBL.2C                  GO TO CHAIN RELATED IOB  M4419
         LA    IECIRWK2,IECIREST-1(IECIRG15) .ADDR OF NXT CHN FLDM4419
         L     IECIRG15,IECIREST-1(IECIRG15) .ADDR OF NXT IOB    M4419
         B     &LBL.2B .                GO TO CONTINUE CHN SEARCHM4419
&LBL.2C  EQU   * .                      CHAIN IOB FOR 2ND RESTOREM4419
         IC    IECIRG15,0(IECIRWK2)     SAVE HI-BYTE             M4419
         ST    IECIRWK1,0(IECIRWK2) .   ADD IOB TO 'RELATED' CHN M4419
         STC   IECIRG15,0(IECIRWK2)     REST HI-BYTE             M4419
         SR    IECIRWK2,IECIRWK2 .      CLEAR WORK REG           M4419
         B     &LBL.04 .                GET NEXT IOB - ORIG CHN  M4419
&LBL.2A  EQU   * .                      RESUME NORMAL RESTORE    M4419
         L     IECIRSAV,IECIECBF(IECIECBR)   SAVE CONTECTS OF ECB 20001
         MVC   IECIQCNT(1,IECIXQPL),IECIECBF(IECIECBR)   ECB CODE 20001
         LR    IECIRIOB,IECIRWK1        GET IOB ADDR IN REG 1     20001
         L     IECIRG0,IECIQTCB(IECIXQPL) GET ADDR OF TCB         20001
         SVC   IECITXCP                 SVC TO TCB EXCP           20001
*
         CLI   IECIQCNT(IECIXQPL),IECIWAIT   WAS ECB WAITING      20001
         BC    7,&LBL.04                NO-BR TO TEST NEXT IOB    20001
*
*  IT WAS WAITING WHEN PURGED - CONTINUE TESTING
*
         TM    IECIECBF(IECIECBR),IECICOMP   ECB POSTED NOW       20001
         BC    8,&LBL.03                NO-GO PUT ECB IN WAIT     20001
*
*  IT WAS POSTED - NOW GET POST CODE
*
         IC    IECICDRG,IECIECBF(IECIECBR)   GET COMPLETION CODE  20001
         SLL   IECICDRG,24              SHIFT INTO POSITION       20001
         L     IECIRPST,IECIQTCB(IECIXQPL)   TCB ADDRESS FOR POST 20001
         ST    IECIRSAV,IECIECBF(IECIECBR)   RESTORE WAIT TO ECB  20001
         L     IECIRG15,16              GET CVT POINTER           20001
         L     IECIRG15,IECIPOST(IECIRG15)   GET POST ADDRESS     20001
         LR    IECIRSAV,IECIRG13 .      SAVE CALLER SA REG       YM2215
         BALR  IECIRG14,IECIRG15        BRANCH TO POST            20001
         LR    IECIRG13,IECIRSAV .      RESTORE CALLER SA REG    YM2215
         B     &LBL.04                  GET NEXT IOB ADDR         20001
*
&LBL.03  ST    IECIRSAV,IECIECBF(IECIECBR)   RESTORE WAIT         20001
&LBL.04  LR    IECIRWK1,IECIRWK3        GET NEXT IOB ADDR         20001
         B     &LBL.02                  GO TEST FOR END OR EXCP   20001
*
&LBL.05  TM    IECIQFLG(IECIXQPL),IECIQLST   LAST ENTRY?          20001
         BC    7,&LBL.06                YES-THEN BR TO RETURN     20001
         LA    IECIXQPL,IECIQENT(IECIXQPL)   GET NEXT ENTRY       20001
         B     &LBL.01                  BR TO PROCESS THAT ENTRY  20001
*
         DS    0F .                     SAVE WORD BOUND.         M4419
FFWORD   DC    X'00FFFFFF'              END IOB CHAIN            M4419
*                                                                M4419
&LBL.06  DS    0H .     *** EXIT POINT FOR 'RESTORE' CODE ***    M1187
         DROP  IECIRBAS                                           20001
         MEXIT                          EXIT MACRO
.FLGS010 AIF   ('&AUTH' EQ 'IGE0660A').FLGS011 CHECK FOR DDR MODULE USE
         AIF   ('&AUTH' EQ 'IGC0308E').FLGS011
         AIF   ('&AUTH' EQ 'IGFDDR00').FLGS011
         AIF   ('&AUTH' EQ 'IGFDDR10').FLGS011
         AIF   ('&AUTH' EQ 'IGC0508E').FLGS011
         AGO   .FLGS012                 CHECK FOR SCHEDULER MODULE USE
.FLGS011 ANOP
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*    MACRO DEFINITION - UCB FLAG BYTE 1 UTILITY...                    *
*        THIS MACRO, OWNED AND MAINTAINED BY IOS PERSONNEL, MAY BE    *
*        USED TO TURN A BIT ON OR OFF IN THE FLAG BYTE 1 FIELD OF     *
*        THE UCB. (FIELD IS LOCATED AT DISPLACEMENT 6 IN THE UCB)     *
*        IT CAN ALSO BE USED TO INTERROGATE THE BIT SETTINGS BY TEST- *
*        ING UNDER MASK AND RETURNING THE APPROPRIATE CONDITION CODE. *
*                                                                     *
         AIF  (&EXECF EQ 1).FLGS017     SKIP AROUND UNLES 1ST TIME THRO
*        THIS CODE IS GENERATED WHEN THE 'IOSGEN' CALL IS CODED WITH  *
*        THE VARIABLES SET ACCORDING TO THE FOLLOWING FORMAT - - -    *
*          IOSGEN &FUNC,&PARM,&REG,&VAR,&AUTH=    WHERE;              *
*          1.  &FUNC = UCBFL1                                         *
*          2.  &PARM = NUMBER OF A REGISTER POINTING TO THE UCB       *
*          3.  &REG = 'ON' OR 'OFF' DEPENDING ON DESIRED SETTING,     *
*                      OR 'TEST', IF THE SETTING OF THE BIT IS TO BE  *
*                      INTERROGATED BUT NOT CHANGED.                  *
*          4.  &VAR =  NAME OF ONE OF THE FOLLOWING BITS              *
*          5.  &AUTH = IS A KEYWORD PARAMETER SPECIFYING THE NAME     *
*                      OF THE CALLING MODULE.                         *
*                    * * * * * * * * * * * * * * * * * * * * * *      *
*                     NAME FOR MACRO CALL  *  DEFINITION              *
*                    * * * * * * * * * * * * * * * * * * * * * *      *
.* (NOT PRESNTLY SUPPORTD)   UCBBSY        * DEV BUSY BIT             *
*                            UCBNRY        * UCB NOT READY BIT        *
.* (NOT PRESNTLY SUPPORTD)   UCBPST        * POST BIT                 *
.* (NOT PRESNTLY SUPPORTD)   UCBITF        * INTERCEPT BIT            *
.* (NOT PRESNTLY SUPPORTD)   UCBCUB        * C.U. BUSY BIT            *
.* (NOT PRESNTLY SUPPORTD)   UCBDTR        * D.A. DATA XFER BIT       *
.* (NOT PRESNTLY SUPPORTD)   UCBASK        * D.A. ARM SEEKING BIT     *
*                            UCBERR        * ERP IN CONTROL BIT       *
.* (TURNING 'ON' NOT PRESNTLY SUPPORTD IN UCBERR BIT - - - - - - - )  *
*                    * * * * * * * * * * * * * * * * * * * * * *      *
*                                                                     *
.FLGS017 ANOP
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
IECIU&SUFFIX EQU &PARM                  UCB POINTER REGISTER
         AIF   (&EXECF EQ 1).FLGS17A    SKIP AFTER FIRST TIME
&EXECF   SETB  1                        SET FIRST TIME SWITCH
IECIFLG1 EQU   6                        OFFSET IN UCB FOR UCBFL1
.FLGS17A AIF   ('&VAR' NE 'UCBNRY').FLGS029 BR IF NOT RDY BIT ISNT 'IT'
&HEX     SETC  '40'                     TURN ON UCB NOT RDY BIT IN MSK
         AGO   .FLGS050                 DETERMINE IF WE ARE TURNING ON
.FLGS029 AIF   ('&VAR' NE 'UCBERR').FLGS031 BR IF ERR BIT ISNT 'IT'
&HEX     SETC  '01'                     TURN ON ERROR BIT IN MASK
         AGO   .FLGS050                 DETERMINE IF WE ARE TURNING ON
.FLGS031 AGO   .IOSNG3                  IF THIS AGO DONE, ERROR EXISTS.
.FLGS050 AIF   ('&REG' NE 'OFF').FLGS060 SKIP CODE IF 'ON' OR 'TEST'
IECIF&SUFFIX EQU X'FF'-X'&HEX'          SET PROPER MSK FOR BIT SELECTN
         SPACE 1
*              TURN OFF SELECTED BIT                                  *
         NI    IECIFLG1(IECIU&SUFFIX),IECIF&SUFFIX
         AGO   .IOSGEND                 EXIT FROM MACRO
.FLGS060 ANOP
         AIF   ('&REG' NE 'ON').FLGS065 SKIP CODE IF &REG = TEST
         AIF   ('&VAR' EQ 'UCBERR').IOSNG3  'OR' OF UCBERR NOT SUPPORTD
IECIF&SUFFIX EQU X'&HEX'                MASK FOR SELECTED BIT
         SPACE 1
*              TURN ON SELECTED BIT                                   *
         OI    IECIFLG1(IECIU&SUFFIX),IECIF&SUFFIX
         AGO   .IOSGEND                 EXIT FROM MACRO
.FLGS065 AIF   ('&REG' NE 'TEST').IOSNG3 IF THIS DONE,ERROR EXISTS.
IECIF&SUFFIX EQU X'&HEX'                MASK FOR SELECTED BIT
         SPACE 1
*              TEST DESIRED BIT USING TEST UNDER MASK INSTRCTN.       *
         TM    IECIFLG1(IECIU&SUFFIX),IECIF&SUFFIX
         AGO   .IOSGEND                 EXIT FROM MACRO
.FLGS012 AIF   ('&AUTH' EQ 'IEE3103D').FLGS013  BR IF SCHDULER IS USING
         AIF   ('&AUTH' EQ 'IEFXJIMP').FLGS013  BR IF SCHDULER IS USING
         AGO   .IOSNG1                  UNAUTHORIZED USE MNOTE
.FLGS013 ANOP
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   MACRO DEFINITION - UCB FLAG BYTE 1 BIT SETTING MANIPULATOR        *
*                                                                     *
*        THIS MACRO, OWNED AND MAINTAINED BY IOS PERSONNEL, MAY BE    *
*        USED TO TURN OFF THE UCBNRY AND UCBITF BITS IN THE FLAGBYTE1 *
*        FIELD OF THE UCB IF THE DEVICE IS A TAPE DEVICE AND IF BOTH  *
*        THE 'NOT READY' AND 'INTERCEPT' BITS ARE 'ON'                *
*                                                                     *
*        THIS CODE IS GENERATED WHEN THE 'IOSGEN' CALL IS CODED WITH  *
*        THE VARIABLES SET ACCORDING TO THE FOLLOWING FORMAT - - -    *
*          IOSGEN &FUNC,&PARM,&AUTH=          WHERE;                  *
*          1.  &FUNC = UCBFL1                                         *
*          2.  &PARM = NUMBER OF A REGISTER POINTING TO THE UCB       *
*          3.  &AUTH = IS A KEYWORD PARAMETER SPECIFYING THE NAME     *
*                      OF THE CALLING MODULE.                         *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
IECIFUCB EQU   &PARM                    UCB POINTER
IECIFLG1 EQU   6                        OFFSET IN UCB FOR UCBFL1
IECIFTYP EQU   18                       DISP IN UCB TO DEVTYP FIELD
IECIFTAP EQU   X'80'                    MASK FOR MAGNETIC TAPE IN UCB
IECIFOFF EQU   X'AF'                    MASK TO TURN OFF NRY AND ITF
IECIFSET EQU   X'50'                    MASK TO TEST NRY & ITF BITS
         TM    IECIFTYP(IECIFUCB),IECIFTAP IS THIS A MAGNETIC TAPE DEV.
         BC    8,IECIFEXT               IF NOT, BR TO MACRO END
         TM    IECIFLG1(IECIFUCB),IECIFSET Q. ARE BOTH BITS ON
         BC    12,IECIFEXT                 A. NO, BRANCH TO MACROEND
         NI    IECIFLG1(IECIFUCB),IECIFOFF A. YES, TURN BOTH BITS OFF
IECIFEXT DS    0H
         MEXIT
.DTCT001 AIF   ('&AUTH' EQ 'IEEMPVCH').DTCT002 AUTHORIZATION OK   21063
         AIF   ('&AUTH' EQ 'IEEMPVCP').DTCT002 AUTHORIZATION OK   21063
         AIF   ('&AUTH' NE 'IEEUNIT2').IOSNG1  UNAUTHORIZED USE
.DTCT002 ANOP
***********************************************************************
*                                                                     *
*    THIS FUNCTION OF THE IOSGEN MACRO, OWNED AND MAINTAINED BY IOS   *
*    PERSONNEL, MAY BE USED TO DETERMINE WHETHER OR NOT A DEVICE IS   *
*    A RESERVED SHARED DASD. IF A DEVICE IS NOT ALL 3 OF THE ABOVE,   *
*    A CONDITION CODE OF ZERO IS RETURNED. IF A DEVICE IS A RESERVED  *
*    SHARED DIRECT ACCESS DEVICE A NON-ZERO CONDITION CODE IS RETURNED*
*                                                                     *
*    IF THE FOURTH POSITIONAL PARAMETER, &VAR, IS SET TO 1, THE       *
*    DETECTOR FUNCTION WILL INSPECT THE HARDWARE RESERVE COUNT        *
*    (OFFSET X'29').                                                  *
*                                                                     *
*    THIS CODE IS GENERATED WHEN THE 'IOSGEN' CALL IS CODED WITH THE  *
*    VARIABLES SET ACCORDING TO THE FOLLOWING FORMAT - -              *
*        IOSGEN &FUNC,&PARM,,&VAR                                     *
*        WHERE  &FUNC=DETECTOR, &PARM=NO. OF A UCB POINTER REG AND    *
*               &VAR=1 IF OFFSET X'29' IN UCB TO BE INSPECTED AS      *
*                      OPPOSED TO NORMAL OFFSET X'28'                 *
*                                                                     *
***********************************************************************
IECIDUCB EQU   &PARM                    PARAMETER REG POINTING TO UCB
IECIDSHR EQU   17                       UCB DEV TYPE FIELD + 1
IECIDDVT EQU   18                       UCB DEV TYPE FIELD + 2
IECIDSQC EQU   40                       UCB RESERVE MACROS COUNT FIELD
IECIDHCT EQU   41                     HARDWARE RESERVE CNT OFFSET 21063
IECIDDAD EQU   X'20'                    D.A.DEV CL FLGS OR SHARD D.A.FL
IECIDCNT EQU   X'FF'                    COUNT TEST MASK
         TM    IECIDDVT(IECIDUCB),IECIDDAD Q. IS THIS A DASD
         BC    8,IECIDTCT               A. NO, BRANCH OUT
         TM    IECIDSHR(IECIDUCB),IECIDDAD Q. IS THIS A SHARED FILE
         BC    8,IECIDTCT               A. NO, BRANCH OUT
         AIF   (&VAR NE 1).DTCT003      'UNI-PROCESSING'          21063
         TM    IECIDHCT(IECIDUCB),IECIDCNT IS DEVICE RESERVED     21063
         AGO   .DTCT004
.DTCT003 TM    IECIDSQC(IECIDUCB),IECIDCNT ANY RESRVMACS BEEN ISSUED
.DTCT004 ANOP
IECIDTCT DS    0H
         AGO   .IOSGEND                 END OF FUNCTION
.FIFONQ  AIF  ('&AUTH' NE 'IGE0660A').IOSNG1   UNAUTHORIZED USE / MNOTE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*   THIS FUNCTION OF IOSGEN WILL ADD A GIVEN REQUEST ELEMENT TO A     *
*   LOGICAL CHANNEL QUEUE OR A DDR WAIT QUEUE. THE CALLING MODULE     *
*   MUST SUPPLY TWO REGISTERS FOR USE AS POINTERS AND A 3RD REGISTER  *
*   FOR USE AS A WORK REGISTER                                        *
*                                                                     *
*   FOLLOWING ARE THE PARAMETERS AND THE ORDER IN WHICH THEY MUST BE  *
*   SPECIFIED IN THE 'IOSGEN' CALL --                                 *
*        IOSGEN &FUNC,&PARM,&REG        WHERE---                      *
*          1. &FUNC = ENQUE                                           *
*          2. &PARM = LOGICAL CHANNEL WORD OR DDR WAIT QUEUE PTR REG  *
*          3. &REG = TWO REGISTER SUBLIST, FIRST OF WHICH IS A PTR    *
*                    TO THE NEXT RQE (REQUEST ELEMNT) TO BE ENQUEUED, *
*                    SECOND OF WHICH IS TO BE USED AS A WORK REGISTER *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                    REGISTER DEFINITION                              *
IECIELCH EQU   &PARM                    PTR TO LCH WORD OR DDR QUEUE
IECIETST EQU   &REG(1)                  PTR TO NXT RQE TO BE ADDED TO Q
IECIEWK1 EQU   &REG(2)                  G. P. WORK REGISTER
*               MISCELLANOUS EQUATES                                  *
IECIELNK EQU   0                        DISP FOR FIRST RQE ADDRESS
IECIEONE EQU   1                        DISP OF ONE BYTE
IECIELST EQU   2                        DISP FOR LAST RQE ADDRESS
IECIEXFF EQU   X'FF'                    LINK FIELD HALF-MASK
IECIEDUM EQU   X'01'                    EQUIVELANT TO X'FF' MASK
         SPACE 2
*   TEST FOR 'FF' IN 1ST RQE ADDR TO SEE IF QUEUE EMPTY               *
         TM    IECIEONE(IECIELCH),IECIEDUM . IS THE QUEUE EMPTY  A43241
         BC    1,IECIESOL               IF IT IS EMPTY, BRANCH
         SPACE 1
*        QUEUE IS NOT EMPTY, ADD ELEMENT TO EXISTING CHAIN            *
         LH    IECIEWK1,IECIELST(IECIELCH) LOAD LAST RQE ADDRESS...
         STH   IECIETST,IECIELNK(IECIEWK1) STORE ADDR INTO LINK FIELD.
         BC    15,IECIEMUL
************************
         SPACE 1
*               QUEUE IS EMPTY, ADD FIRST ELEMENT OF CHAIN            *
IECIESOL STH   IECIETST,IECIELNK(IECIELCH) PUT ADDR IN 1ST REQ SLOT
IECIEMUL STH   IECIETST,IECIELST(IECIELCH) PUT ADDR IN LAST REQ SLOT
         MVI   IECIELNK(IECIETST),IECIEXFF INDICATE ON ADDED RQE LINK
         MVI   IECIEONE(IECIETST),IECIEXFF FIELD THAT IT'S THE LAST ONE
         MEXIT
.SIMINT  ANOP
         AIF   ('&AUTH' EQ 'IEE3103D').SIMINTA    O.K. TO EXPAND
         AGO   .IOSNG1                  UNAUTHORIZED USE MNOTE
.SIMINTA ANOP
         SPACE 5
***********************************************************************
*        MACRO DEFINITION - SIMULATE INTERRUPT FOR SCHEDULER          *
*                                                                     *
*        THIS MACRO, OWNED AND MAINTAINED BY IOS PERSONNEL,           *
*              SIMULATES A DEVICE END OR CHANNEL AVAILABLE ( 0 STATUS)*
*              INTERRUPT IN ORDER TO FREE UP A DEVICE.                *
*                                                                     *
*              FOLLOWING ARE THE PARAMETERS WHICH MUST BE SPECIFIED   *
*              IN THIS 'IOSGEN' CALL --                               *
*        IOSGEN &FUNC,&PARM,&REG,&AUTH=CSECTNME         WHERE --      *
*              1. &FUNC = SIMINT                                      *
*              2. &PARM = NUMBER OF A REGISTER CONTAINING THE ADDRESS *
*                         OF THE UCB OF THE DEVICE TO BE TWICHED.     *
*              3. &REG = THE NUMBER OF A REGISTER THAT MAY BE USED    *
*                        BY THIS ROUTINE.                             *
*              4. &AUTH = A KEYWORD PARAMETER SPECIFYING THE CSECT    *
*                         NAME OF THIS PROGRAM.                       *
*                                                                     *
***********************************************************************
IECIS010 SSM   IECISDIS                 THIS ROUTINE MUST NOT BE
*                                       INTERRUPTED - I/O OLD PSW BEING
*                                       MODIFIED.
         SPACE 2
***********************************************************************
*              R E G I S T E R   D E F I N I T I O N S                *
***********************************************************************
IECISUCB EQU   &PARM                    UCB POINTER REG
IECISWK  EQU   &REG                     WORK REGISTER
IECISZBS EQU   0                        ZERO BASE REGISTER
         SPACE 2
***********************************************************************
*              U C B    D E F I N I T I O N                           *
***********************************************************************
IECISCHA EQU   4                        UCB CHANNEL ADDRESS FIELD
IECISFL1 EQU   6                        UCB ACTIVITY FLAG 1 FIELD
IECISPST EQU   X'20'                    UCB POST BIT IN UCBFL1
IECISNRY EQU   X'40'                     UCB NOT READY BIT IN UCBFL1
IECISBSY EQU   X'80'                    UCB BUSY BIT IN UCBFL1
         SPACE 2
***********************************************************************
*              M I S C .   M A S K S   A N D   E Q U A T E S          *
***********************************************************************
IECISHLF EQU   2                        HALF WORD IN SIZE
IECISDBL EQU   8                        DOUBLE WORD LENGTH
         SPACE 1
IECISBAM EQU   X'0F'                    BYTE ANDING MASK
IECISDEI EQU   X'04'                    DEVICE END CSW STATUS
IECISMCB EQU   X'04'                    MACHINE CHECK ENABLE MASK
         SPACE 1
IECISIOO EQU   56                        I/O OLD PSW LOCATION
IECISCSW EQU   64                       CSW LOCATION
IECISION EQU   120                      I/O NEW PSW LOCATION
         SPACE 5
*    BUILD SYNTHETIC I/O OLD PSW FOR RETURN FROM DUMMY INTERRUPT --   *
         SPACE 1
         MVC   IECISIOO+2(IECISHLF,IECISZBS),IECISCHA(IECISUCB) GET DEV
         NI    IECISIOO+2(IECISZBS),IECISBAM ADDRESS & ZERO 1ST HALFBYT
         LA    IECISWK,IECISXIT         PICK UP EXIT ADDRESS
         ST    IECISWK,IECISIOO+4(IECISZBS) STORE INTO I/O OLD PSW.
         MVI   IECISIOO+1(IECISZBS),IECISMCB ALLOW MACHINE CHECK INT.
         SPACE 2
*    BUILD CSW FOR DUMMY INTERRUPT --                                 *
         SPACE 1
         XC    IECISCSW(IECISDBL,IECISZBS),IECISCSW(IECISZBS) ZERO CSW
         TM    IECISFL1(IECISUCB),IECISPST Q.  IS POST FLAG ON.
         BO    IECISCAI                 A.  YES, CHANNEL AVAILABLE.
*                                       A.  NO, CONTINUE TESTING.
         TM    IECISFL1(IECISUCB),IECISBSY+IECISNRY Q.  BUSY OR NOT RDY
         BZ    IECISCAI                 A.  NO, GIVE CHANNEL AVAILABLE.
*                                       A.  YES, SET UP DEVICE END ...
         OI    IECISCSW+4(IECISZBS),IECISDEI MOVE IN DUMMY STATUS.
IECISCAI LPSW  IECISION(IECISZBS)       GO TO I/O INTERRUPT ROUTINE...
************************
         SPACE  1
IECISDIS DC    X'00'                    DISABLE SYSTEM STATUS MASK
IECISNAB DC    X'FF'                    ENABLED SYSTEM STATUS MASK
************************
IECISXIT SSM   IECISNAB                 REENABLE AND EXIT MACRO CODE
         MEXIT
.SKUPDT  SPACE 1
.*         THIS FUNCTION WAS ADDED IN SUPPORT OF PTM3046
******************************************************************20001
**       MACRO DEFINITION INLINE UPDATE OF UCB SEEK FIELD         20001
**             THIS MACRO OWNED AND MAINTAINED BY IOS PERSONNEL,  20001
******************************************************************20001
**             THIS CODE IS GENERATED WHEN THE 'IOSGEN' CALL IS   20001
*              CODED BY TSO,WHEN VARIABLES ARE SET ACCORDING TO   20001
*              THE FORMAT BELOW----------                         20001
*&NAME   IOSGEN &FUNC,&PARM,&REG,,&AUTH=CSECTNME                  20001
*               &NAME-LABEL ASSIGNED TO FIRST INSTRUCTION         20001
*               &FUNC-SKUPDT, UCB SEEK FIELD UPDATE REQUESTED     20001
*               &PARM-A REG CONTAINING POINTER TO FIELD CONTAINING20001
*                     NEW SEEK ADDRESS(MBBCCHHR)                  20001
*               &REG-A REG CONTAINING POINTER TO UCB              20001
*               &AUTH=CSECTNME,WHERE CSECTNME IS NAME OF MODULE   20001
*                    AUTHORIZED TO CALL THIS FUNCTION             20001
*    FUNCTION  THIS ROUTINE WILL UPDATE THE UCB SEEK FIELD PASSED 20001
*                    BY &REG WITH THE SEEK ADDRESS POINTED TO BY  20001
*                    &PARM                                        20001
*** NOTE NOTE NOTE NOTE                                           20001
*               MULTI CALLS FROM SAME ASSEMBLY MUST USE SAME REGS 20001
******************************************************************20001
         AIF   ('&AUTH' EQ 'IKJEAS02').SKUPDT1                    20001
         AGO   .IOSNG1                  UNAUTHORIZED USE MNOTE    20001
.SKUPDT1       ANOP                                               20001
         AIF   ('&PARM' EQ '' OR '&REG' EQ '').IOSNG3 INVALID PARM20001
         AIF   (&EXECS).SKUPDT2         DO NOT GEN EQU'S TWICE    20001
&EXECS   SETB  1                        SET MULTI ENTRY SWITCH    20001
******************************************************************20001
***            REGISTER DEFINITIONS                            ***20001
IECUCBPT EQU   &REG                     POINTER TO UCB            20001
IECNEWSK EQU   &PARM                    POINTER TO NEW SEEK ADDR  20001
***            OFFSET AND LENGTH DEFINITIONS                      20001
IECUCBSK EQU   X'30'                    OFFSET TO UCB SEEK ADDRESS20001
IECUCBSL EQU   X'8'                     LENGTH OF UCB SEEK FIELD  20001
******************************************************************20001
.SKUPDT2 ANOP                                                     20001
&NAME    MVC   IECUCBSK(IECUCBSL,IECUCBPT),0(IECNEWSK)  SET SEEK  20001
         MEXIT
.RQE00   AIF   ('&AUTH' NE 'IGG019R5').IOSNG1  UNAUTHORIZED USE/MNOTE
         AIF   (N'&REG LT 4).IOSNG2     INSUFFICIENT WORK REGS/MNOTE
***********************************************************************
*                                                                     *
*        FUNCTION DEFINITION - GET AND ENQUEUE A REQUEST ELEMENT      *
*                                                                     *
*        THE GETQRQE FUNCTION OF THE IOSGEN MACRO PERFORMS THE        *
*        FOLLOWING MAJOR OPERATIONS:                                  *
*                                                                     *
*             1. CONTROL BLOCK VALIDATION                             *
*             2. CONTROL BLOCK INITIALIZATION                         *
*             3. GET REQUEST ELEMENT (RQE)                            *
*             4. LOCATE LOGICAL CHANNEL WORD                          *
*             5. ENQUEUE REQUEST ELEMENT                              *
*                                                                     *
*        THE GETQRQE FUNCTION IS INVOKED BY CODING ACCORDING TO       *
*        THE FOLLOWING FORMAT:                                        *
*                                                                     *
* &NAME  IOSGEN &FUNC,(&PARM(1),&PARM(2),&PARM(3),&PARM(4)),        + *
*              (&REG(1),&REG(2),&REG(3),&REG(4)),&AUTH=CSECTNME       *
*              WHERE -                                                *
*                                                                     *
*             1. &NAME    - THE SYMBOL ASSIGNED TO THE FIRST          *
*                           INSTRUCTION                               *
*             2. &FUNC    - GETQRQE                                   *
*             3. &PARM(1) - A REGISTER WHICH POINTS TO THE CVT        *
*                &PARM(2) - A REGISTER WHICH POINTS TO THE TCB FOR    *
*                           THE ASYNCHRONOUS ATTENTION ROUTINE        *
*                &PARM(3) - A REGISTER WHICH POINTS TO THE IOB FOR    *
*                           THE I/O REQUEST                           *
*                &PARM(4) - A REGISTER WHICH POINTS TO THE UCB FOR    *
*                           THE DEVICE FROM WHICH THE ASYNCHRONOUS    *
*                           ATTENTION INTERRUPT OCCURRED              *
*             4. &REG     - THE REGISTER SUBLIST WHICH SPECIFIES      *
*                           FOUR WORK REGISTERS                       *
*             5. &AUTH=   - THE NAME OF THE CSECT INVOKING THE        *
*                           FUNCTION                                  *
*                                                                     *
*        THE RETURN CODE REGISTER '&REG(1)' WILL CONTAIN ONE OF THE   *
*        FOLLOWING RETURN CODES TO INDICATE THE EXIT CONDITION FROM   *
*        THIS FUNCTION:                                               *
*                                                                     *
*             0 - SUCCESSFUL COMPLETION                               *
*             4 - INVALID CONTROL BLOCK OR CONTROL BLOCK BOUNDARY     *
*             8 - INVALID CONTROL BLOCK KEYS (STORAGE/PROTECT)        *
*            12 - NO REQUEST ELEMENT (RQE) AVAILABLE                  *
*                                                                     *
*        GETQRQE FUNCTION NOTES -                                     *
*                                                                     *
*             1. EXPANDED AS IN-LINE CODE                             *
*             2. DISABLED SERIALLY REUSABLE                           *
*             3. GENERATES CODE TO HANDLE BOTH MFT AND MVT SYSTEM     *
*                CONFIGURATIONS                                       *
*                                                                     *
***********************************************************************
         SPACE 2
***********************************************************************
*        REGISTER DEFINITION                                          *
***********************************************************************
         SPACE 1
IECIGCVT EQU   &PARM(1)                 CVT POINTER
IECIGTCB EQU   &PARM(2)                 TCB REGISTER
IECIGIOB EQU   &PARM(3)                 IOB REGISTER
IECIGUCB EQU   &PARM(4)                 UCB REGISTER
IECIGWK1 EQU   &REG(1)                  WORK REGISTER
IECIGWK2 EQU   &REG(2)                  WORK REGISTER
IECIGWK3 EQU   &REG(3)                  WORK REGISTER
IECIGWK4 EQU   &REG(4)                  WORK REGISTER
IECIGDEB EQU   IECIGWK1                 DEB REGISTER
IECIGRTN EQU   IECIGWK1                 RETURN CODE REGISTER
IECIGDCB EQU   IECIGWK2                 DCB REGISTER
IECIGTST EQU   IECIGWK2                 RQE POINTER
IECIGLCH EQU   IECIGWK3                 LCH WORD POINTER
         SPACE 1
***********************************************************************
*        MISCELLANEOUS EQUATES                                        *
***********************************************************************
         SPACE 1
IECIGSC  EQU   116                      OFFSET IN CVT OF SYS CONFIG
IECIGAVL EQU   124                      OFFSET IN CVT OF NEXT RQE PTR
IECIGLCT EQU   140                      OFFSET IN CVT OF LCH TAB PTR
IECIGTSK EQU   28                       OFFSET IN TCB OF STOR KEY
IECIGTID EQU   112                      OFFSET IN TCB OF ID (MFT)
IECIGFL1 EQU   0                        OFFSET IN IOB OF FLAG BYTE 1
IECIGCOD EQU   4                        OFFSET IN IOB OF ECB COMP CODE
IECIGECB EQU   5                        OFFSET IN IOB OF ECB PTR
IECIGFL3 EQU   8                        OFFSET IN IOB OF FLAG BYTE 3
IECIGIDC EQU   21                       OFFSET IN IOB OF DCB PTR
IECIGECT EQU   30                       OFFSET IN IOB OF ERROR COUNT
IECIGUID EQU   2                        OFFSET IN UCB OF UCB IDENT
IECIGLCI EQU   10                       OFFSET IN UCB OF LCH INDEX
IECIGDPK EQU   24                       OFFSET IN DEB OF PROT KEY
IECIGDDC EQU   25                       OFFSET IN DEB OF DCB PTR
IECIGDDE EQU   45                       OFFSET IN DCB OF DEB PTR
IECIGRLK EQU   0                        OFFSET IN RQE TO LINK PTR
IECIGRUB EQU   2                        OFFSET IN RQE TO UCB PTR
IECIGRAS EQU   4                        OFFSET IN RQE TO ASSIGNED BYTE
IECIGRID EQU   4                        OFFSET IN RQE TO TCB ID (MFT)
IECIGRIB EQU   5                        OFFSET IN RQE TO IOB PTR
IECIGRDB EQU   8                        OFFSET IN RQE TO DEB PTR
IECIGRKY EQU   12                       OFFSET IN RQE OF REQ PROT KEY
IECIGRTB EQU   13                       OFFSET IN RQE TO TCB PTR
IECIGFTS EQU   0                        OFFSET IN LCH OF FIRST RQE
IECIGLTS EQU   2                        OFFSET IN LCH OF LAST RQE
IECIG0   EQU   0                        ZERO MASK
IECIG4   EQU   4                        RETURN CODE 4
IECIG8   EQU   8                        RETURN CODE 8
IECIG12  EQU   12                       RETURN CODE 12
IECIGDUM EQU   X'01'                    MASK FOR LAST RQE TEST
IECIGSCM EQU   X'10'                    MVT SYSTEM CONFIG MASK
IECIGNC  EQU   X'7F'                    NORMAL I/O COMPLETION MASK
IECIGIDV EQU   X'FF'                    UCB IDENTIFICATION
         SPACE 1
***********************************************************************
*                                                                     *
*        CONTROL BLOCK VALIDATION                                     *
*                                                                     *
*        THIS ROUTINE CHECKS THE VALIDITY OF THE VARIOUS CONTROL      *
*        BLOCK USED BY THE GETQRQE FUNCTION.  THESE BLOCKS ARE THE    *
*        IOB, UCB, DEB, DCB, AND ECB.  AN INVALID BOUNDARY, BLOCK     *
*        ID, BACKLINK POINTER, OR STORAGE/PROTECT KEY CONDITION       *
*        WILL RESULT IN THE SETTING OF THE PROPER RETURN CODE IN      *
*        THE RETURN CODE REGISTER.                                    *
*                                                                     *
***********************************************************************
         SPACE 1
&NAME    LR    IECIGWK4,IECIGIOB        IOB ADDR TO WORK REG
         N     IECIGWK4,IECIGWDM        CHECK IOB FOR WORD BOUNDARY
         BNZ   IECIG070                 BAD IOB BOUNDARY
         L     IECIGWK4,IECIGIDC-1(IECIGIOB) DCB ADDR TO WORK REG
         LR    IECIGDCB,IECIGWK4        SAVE DCB ADDR
         N     IECIGWK4,IECIGWDM        CHECK DCB FOR WORD BOUNDARY
         BNZ   IECIG070                 BAD DCB BOUNDARY
         L     IECIGWK4,IECIGDDE-1(IECIGDCB) DEB ADDR TO WORK REG
         LR    IECIGDEB,IECIGWK4        SAVE DEB ADDR
         N     IECIGWK4,IECIGWDM        CHECK DEB FOR WORD BOUNDARY
         BNZ   IECIG070                 BAD DEB BOUNDARY
         CLC   IECIGIDC(3,IECIGIOB),IECIGDDC(IECIGDEB) IS DCB VALID
         BNE   IECIG070                 NO, INVALID DCB
         MVZ   IECIGIDW(1),IECIGDPK(IECIGDEB) SEPARATE PROTECT KEY
         TM    IECIGSC(IECIGCVT),IECIGSCM IS SYS CONFIG MFT OR MVT
         BO    IECIG010                 MVT
*   MFT - INSURE THAT DEB PROTECTION KEY CORRESPONDS TO TASK'S KEY
         CLC   IECIGIDW(1),IECIGTSK(IECIGTCB) PROTECT KEYS THE SAME
         BE    IECIG020                 YES, VALID KEY
         B     IECIG075                 NO, INVALID KEY
*   MVT - CHECK CONTROL BLOCK VALIDITY (BOUNDARIES AND KEYS)
IECIG010 LR    IECIGWK3,IECIGIOB        IOB ADDR TO WORK REG
         IC    IECIGWK3,IECIGWDM        ZERO BITS 24-31
         ISK   IECIGWK3,IECIGWK3        INSERT KEY OF IOB
         EX    IECIGWK3,IECIGPCK        CHECK IOB STORAGE KEY
         BNE   IECIG075                 INVALID KEY
         LR    IECIGWK3,IECIGDCB        DCB ADDR TO WORK REG
         IC    IECIGWK3,IECIGWDM        ZERO BITS 24-31
         ISK   IECIGWK3,IECIGWK3        INSERT KEY OF DCB
         EX    IECIGWK3,IECIGPCK        CHECK DCB STORAGE KEY
         BNE   IECIG075                 INVALID KEY
         L     IECIGWK3,IECIGECB-1(IECIGIOB) ECB ADDR TO WORK REG
         N     IECIGWK3,IECIGWDM        CHECK ECB FOR WORD BOUNDARY
         BNZ   IECIG070                 BAD ECB BOUNDRY
         L     IECIGWK3,IECIGECB-1(IECIGIOB) ECB ADDR TO WORK REG
         IC    IECIGWK3,IECIGWDM        ZERO BITS 24-31
         ISK   IECIGWK3,IECIGWK3        INSERT KEY OF ECB
         EX    IECIGWK3,IECIGPCK        CHECK ECB STORAGE KEY
         BNE   IECIG075                 INVALID KEY
         LR    IECIGWK3,IECIGDEB        DEB ADDR TO WORK REG
         IC    IECIGWK3,IECIGWDM        ZERO BITS 24-31
         SR    IECIGWK4,IECIGWK4        CLEAR WORK REG
         ISK   IECIGWK4,IECIGWK3        INSERT KEY OF DEB
         LTR   IECIGWK4,IECIGWK4        IS KEY ZERO
         BNZ   IECIG075                 NO, INVALID KEY
IECIG020 TM    IECIGUID(IECIGUCB),IECIGIDV CHECK UCB ID VALUE
         BNO   IECIG070                 INVALID UCB
         SPACE 1
***********************************************************************
*                                                                     *
*        CONTROL BLOCK INITIALIZATION                                 *
*                                                                     *
***********************************************************************
         SPACE 1
         STH   IECIGWK4,IECIGECT(IECIGIOB) CLEAR ERROR COUNTER
*   CLEAR IOB FLAGS AND CSW AREA
         XC    IECIGFL3(9,IECIGIOB),IECIGFL3(IECIGIOB)
         NC    IECIGFL1(4,IECIGIOB),IECIGCFS CLEAR FLAGS AND SENSE
         MVI   IECIGCOD(IECIGIOB),IECIGNC SET NORMAL COMPLETION FLAG
         L     IECIGWK3,IECIGECB-1(IECIGIOB) ECB ADDR TO WORK REG
         ST    IECIGWK4,0(IECIGWK3)     RESET ECB
         SPACE 1
***********************************************************************
*                                                                     *
*        GET REQUEST ELEMENT                                          *
*                                                                     *
*        THIS ROUTINE OBTAINS A REQUEST ELEMENT(RQE) FROM A LIST OF   *
*        AVAILABLE ELEMENTS.  THE UCB, IOB, DEB, AND TCB(MVT)         *
*        ADDRESSES ARE PLACED IN THE RQE ALONG WITH THE TCB ID        *
*        BYTE. IF NO RQE IS AVAILABLE THE PROPER RETURN CODE WILL     *
*        BE SET IN THE RETURN CODE REGISTER.                          *
*                                                                     *
***********************************************************************
         SPACE 1
         L     IECIGWK3,IECIGAVL(IECIGCVT) GET ADDR OF FREELIST PTR
         LH    IECIGTST,0(IECIGWK3)     GET ADDR OF NEXT RQE
         LTR   IECIGTST,IECIGTST        TEST FOR DUMMY
         BM    IECIG080                 YES, LAST RQE IN USE
         TM    IECIGRLK+1(IECIGTST),IECIGDUM TEST FOR LAST RQE
         BO    IECIG080                 YES, CAN NOT USE LAST RQE
         STH   IECIGUCB,IECIGRUB(IECIGTST) STORE UCB ADDR IN RQE
         ST    IECIGIOB,IECIGRIB-1(IECIGTST) STORE IOB ADDR IN RQE
         ST    IECIGDEB,IECIGRDB(IECIGTST) STORE DEB ADDR IN RQE
         TM    IECIGSC(IECIGCVT),IECIGSCM IS SYS CONFIG MFT OR MVT
         BO    IECIG030                 MVT
*   MFT - GET THE ID FROM THE TCB REQUESTING I/O
         MVC   IECIGRID(1,IECIGTST),IECIGTID(IECIGTCB) MOVE ID TO RQE
         B     IECIG040
*   MVT - STORE TCB ADDRESS AND GET REQUESTORS PROTECT KEY
IECIG030 ST    IECIGTCB,IECIGRTB-1(IECIGTST) STORE TCB ADDR IN RQE
         MVI   IECIGRAS(IECIGTST),IECIG0 MARK AS ASSIGNED
         MVC   IECIGRKY(1,IECIGTST),IECIGTSK(IECIGTCB) REQ KEY TO RQE
IECIG040 MVC   0(2,IECIGWK3),IECIGRLK(IECIGTST) UPDATE RQE LIST
         SPACE 1
***********************************************************************
*                                                                     *
*        LOCATE LOGICAL CHANNEL WORD                                  *
*                                                                     *
***********************************************************************
         SPACE 1
         SR    IECIGWK3,IECIGWK3        CLEAR WORK REG
         IC    IECIGWK3,IECIGLCI(IECIGUCB) GET LCH INDEX FROM UCB
         SLL   IECIGWK3,3               MULTIPLY BY 8
         L     IECIGWK4,IECIGLCT(IECIGCVT) GET ADDR OF LCH TABLE
         LA    IECIGLCH,0(IECIGWK3,IECIGWK4) LOGICAL CHANNEL WORD ADDR
         SPACE 1
***********************************************************************
*                                                                     *
*        ENQUEUE                                                      *
*                                                                     *
*        THIS ROUTINE ADDS A REQUEST ELEMENT TO A LOGICAL CHANNEL     *
*        QUEUE.                                                       *
*                                                                     *
***********************************************************************
         SPACE 1
         TM    IECIGFTS+1(IECIGLCH),IECIGDUM TEST EMPTY QUEUE
         BZ    IECIG060                 NO, PUT AT END OF CHAIN
         STH   IECIGTST,IECIGFTS(IECIGLCH) PUT THE RQE FIRST IN QUEUE
IECIG050 STH   IECIGTST,IECIGLTS(IECIGLCH) PUT THE RQE LAST IN QUEUE
         MVC   IECIGRLK(2,IECIGTST),IECIGDAD POINT LAST ENTRY TO DUMMY
         B     IECIG085                 EXIT, SUCCESSFUL COMPLETION
IECIG060 LH    IECIGWK4,IECIGLTS(IECIGLCH) GET LAST REQUEST IN QUEUE
         STH   IECIGTST,IECIGRLK(IECIGWK4) LINK ENTRY ON END
         B     IECIG050
         SPACE 1
***********************************************************************
*        CONSTANTS                                                    *
***********************************************************************
         SPACE 1
         DS    0F
IECIGWDM DC    X'00000003'              FULL WORD BOUNDARY MASK
*   X'C2'(COMMAND & DATA CHAINING,UNRELATED) X'01'(QSAM) X'0000'(SENSE)
IECIGCFS DC    X'C2010000'
IECIGPCK CLI   IECIGIDW,IECIG0          PROTECT KEY TEST
IECIGIDW DC    X'00'                    PROTECT KEY WORK AREA
IECIGDAD DC    XL2'FFFF'                DUMMY ADDRESS
         SPACE 1
***********************************************************************
*                                                                     *
*        EXIT                                                         *
*                                                                     *
*        THE RETURN CODE REGISTER IS SET TO INDICATE THE EXIT         *
*        CONDITION.                                                   *
*                                                                     *
***********************************************************************
         SPACE 1
IECIG070 LA    IECIGRTN,IECIG4          RETURN CODE = 4, INVALID CTRL
         B     IECIG100                 BLK OR CTRL BLK BOUNDARY
IECIG075 LA    IECIGRTN,IECIG8          RETURN CODE = 8, INVALID CTRL
         B     IECIG100                 BLK KEY (STORAGE/PROTECT)
IECIG080 LA    IECIGRTN,IECIG12         RETURN CODE = 12, NO RQE IS
         B     IECIG100                 AVAILABLE
IECIG085 SR    IECIGRTN,IECIGRTN        RETURN CODE = 0, SUCCESSFUL
IECIG100 DS    0H                       EXIT FROM FUNCTION
         MEXIT
.**********************************************************************
.*                                                                    *
.*       ALL IOSGEN MNOTE ERROR MESSAGES ARE PLACED BELOW --         *
.*             .IOSNG1 - AUTHORIZATION VIOLATION.                     *
.*                       USED BY ALL FUNCTIONS.                       *
.*                                                                    *
.*             .IOSNG2 - INSUFFICIENT NUMBER OF REGISTERS SPECIFIED.  *
.*                       USED BY 'MAP','VARY','DOM','PTHAVL',         *
.*                       'SELSSM', AND 'GETQRQE'.                     *
.*                                                                    *
.*             .IOSNG3 - UNSUPPORTED FUNCTION SPECIFIED, OR PARAMETER *
.*                       SPECIFICATION ERROR.                         *
.*                       USED AT BEGINNING OF MACRO, AND IN 'PTHAVL', *
.*                       WHEN AN INVOCATION IS ATTEMPTED FOR          *
.*                       'UNI-PROCESSING' SYSTEM CODE.                *
.*                       ALSO FOR SPECIFICATION OF UNSUPPORTED BITS   *
.*                       IN 'UCBFL1'.                                 *
.*                                                                    *
.**********************************************************************
.*                                                                    *
.IOSNG1  MNOTE 8,'*** ''&AUTH'' MAY NOT INVOKE ''&FUNC'' FUNCTION.'
         MEXIT
.*                                                                    *
.IOSNG2  MNOTE 8,'*** INSUFFICIENT WORK REGISTERS SPECIFIED.'
         MEXIT
.*                                                                    *
.IOSNG3  MNOTE 8,'*** ERROR IN PARAMETER SET UP, OR ''&FUNC'' NOT A SUP+
               PORTED FUNCTION.'
.*                                                                    *
.IOSGEND MEND
