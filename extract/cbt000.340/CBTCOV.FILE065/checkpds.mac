         TITLE    'PDS CHECK ROUTINE, ALAN FEINSTEIN'
***********************************************************************
*                                                                     *
* PURPOSE: WHEN DEALING WITH PARTITIONED DATA SETS (PDS'ES), PROBLEMS *
*          CAN ARISE WHEN THERE ARE BAD MEMBERS.  FOR EXAMPLE, IEBCOPY*
*          WILL STOP IF IT FINDS A MEMBER WITH AN I/O ERROR.  THE USER*
*          WOULD HAVE TO EXCLUDE THIS MEMBER AND CONTINUE UNTIL THE   *
*          NEXT BAD MEMBER WAS FOUND.  CHECKPDS WAS WRITTEN TO FIND   *
*          THESE ERRORS IN PDS'ES.                                    *
*                                                                     *
*          IF THE PDS IS NOT A LOAD MODULE (A PDS IS ASSUMED TO BE A  *
*          LOAD MODULE IF ITS RECFM=U), CHECKPDS READS EACH MEMBER    *
*          SEARCHING FOR MEMBERS WITH I/O ERRORS.  IF A AN I/O ERROR  *
*          OCCURS WHILE READING A MEMBER, CHECKPDS PRINTS THE MEMBER  *
*          NAME AND THE SYNAD INFORMATION AND THEN PROCEEDS TO THE    *
*          NEXT MEMBER.  THIS WAY THE USER FINDS ALL OF THE MEMBERS IN*
*          ERROR AT ONE TIME.                                         *
*                                                                     *
*          SOME PROGRAMS DO NOT LIKE NULL MEMBERS, I.E. MEMBERS WITH  *
*          NOTHING IN THEM (SMP FOR EXAMPLE).  CHECKPDS WILL ALSO     *
*          PRINT THE NAME OF THE MEMBERS THAT ARE NULL.               *
*                                                                     *
*          IF THE USER INCLUDES A DDCARD WITH THE NAME 'PUNCH',       *
*          CHECKPDS WILL BUILD THE IEBCOPY STATEMENTS:                *
*            COPY INDD=INPUT,OUTDD=OUTPUT                             *
*            EXCLUDE MEMBER=XXXXXXXX                                  *
*          FOR EACH MEMBER THAT AN I/O ERROR WAS RECEIVED.  THE OUTPUT*
*          FROM THE 'PUNCH' DD CAN BE PASSED TO IEBCOPY IN THE NEXT   *
*          STEP TO COPY THE PDS WITHOUT THE BAD MEMBERS.  NOTE, THAT  *
*          EXCLUDE CARDS ARE NOT BUILT FOR NULL MEMBERS, AND ARE NOT  *
*          INCLUDED IN CHECKPDS'ES ERROR COUNT.                       *
*                                                                     *
*          IF THE PDS IS A LOAD MODULE (RECFM=U), THE ABOVE PROCESSING*
*          IS NOT DONE (UNLESS THE USER SPECIFIES 'PARM=NOLOAD'  I.E  *
*          //   EXEC   PGM=CHECKPDS,PARM=NOLOAD).  FOR LOAD MODULES   *
*          CHECKPDS LOOKS FOR THE FOLLOWING:                          *
*             NON-EXCUTABLE LOAD MODULES                              *
*             ALIASES WHERE THE TTR OF THE ALIAS DOES NOT POINT TO    *
*               THE SAME TTR OF THE MEMBER IT IS SUPPOSE TO BE AN     *
*               ALIAS OF (XXXXXXXX IS NOT A TRUE ALIAS)               *
*             ALIASES WHERE THE MODULE THAT IT IS SUPPOSE TO BE AN    *
*               ALIAS OF IS NOT IN THE PDS                            *
*             MEMBERS THAT WOULD CAUSE AN ERROR IF A LOAD WAS DONE OF *
*               THEM.  FOR THESE, CHECKPDS PRINTS SXXX-CC WHERE XXX-CC*
*               CAN BE FOUND IN 'MVS SYSTEM CODES'.                   *
*                                                                     *
*          CHECKPDS WILL ALSO INDICATE MEMBERS THAT WERE NOT LINK-EDIT*
*          WITH THE VS LINKAGE-EDITOR, AND ALIASES WHERE THE MODULE IS*
*          AN ALIAS OF ITSELF(THE DIRECTORY ENTRY CONTAINS THE TRUE   *
*          MEMBER NAME).  THESE TWO TYPES OF ERRORS ARE NOT INCLUDE IN*
*          CHECKPDS'ES ERROR COUNT.                                   *
*          NO CARDS ARE PUNCHED, EVEN IF THE 'PUNCH' DD IS INCLUDED.  *
*          IF CHECKPDS IS PASSED THE PARM OF 'NOLOAD', THE PDS IS     *
*          TREATED AS IF IT WERE NOT A LOAD MODULE, I.E. ALL MEMBERS  *
*          ARE JUST READ FOR I/O ERRORS.                              *
*                                                                     *
*          WHEN FINISHED, CHECKPDS WILL INDICATE THE NUMBER OF MEMBERS*
*          PROCESSED, AND THE NUMBER IN ERROR.                        *
*                                                                     *
*                                                                     *
* USER ABENDS: U777 WHILE PROCESSING THE PDS AS A LOAD-MODULE, SUB-   *
*                   ROUTINE LOADMBR COULD NOT OPEN THE PDS.           *
*              U888 CHECKPDS RECEIVE AN UN-EXPECTED ERROR WHILE       *
*                   READING THE DIRECTORY OF THE PDS.                 *
*              U999 CHECKPDS COULD NOT OPEN THE SYSPRINT DD OR THE    *
*                   DD FOR THE PDS.                                   *
*                                                                     *
*                                                                     *
*  JCL:  //STEP1  EXEC  PGM=CHECKPDS(,PARM=NOLOAD <--THIS IS OPTIONAL)*
*        //LIB    DD DSN=PDS TO BE CHECKED                            *
*        //SYSPRINT DD SYSOUT=A                                       *
*        //PUNCH    DD  DSN=DATASET WITH LRECL OF 80 <-- OPTIONAL     *
*        //SYSUDUMP JUST INCASE                                       *
*                                                                     *
*                                                                     *
*  INSTALLATION:  CHECKPDS COMES IN A PDS(CARD IMAGE FORM) WITH THE   *
*                 SOURCE FOR CHECKPDS AND LOADMBR, AND THE OBJECT DECK*
*                 FOR INITDATE.  THIS PDS ALSO CONTAINS ALL THE       *
*                 PRIVATE MACROS NEEDED FOR CHECKPDS AND LOADMBR.     *
*                 ASSEMBLE CHECKPDS AND LOADMBR USING THE PDS WITH    *
*                 THE PRIVATE MACROS AS ONE OF YOUR SYSLIBS, THEN LINK*
*                 THE OBJECT DECKS FOR CHECKPDS, LOADMBR, AND INITDATE*
*                 TOGETHER MAKING SURE CHECKPDS IS THE ENTRY POINT.   *
*                                                                     *
*                                                                     *
* USER MACROS: BEGIN, PARM                                            *
* CALLED PROGRAMS: INITDATE, LOADMBR                                  *
*                                                                     *
*                                                                     *
* WRITTEN BY ALAN FEINSTEIN, SECURITY PACIFIC NATIONAL BANK,          *
*            611 N. BRAND BLVD., GLENDALE CALIFORNIA 91203            *
*            TELEPHONE NO. (213)507-3329                              *
*         APRIL, 1982                                                 *
*                                                                     *
***********************************************************************
          EJECT
          MACRO
&N        PARM     &REG1,&REG2,&L2,&SIZE=4
.*   THIS MACRO IS USED TO EXTRACT THE PARAMETER INFO
.*     FROM REG 1.  IF THE LENGTH IS NOT 0, IT IS MOVED
.*     INTO WORK.  ALAN FEINSTEIN , 10/25/74
*   &REG1 IS THE REGISTER USED TO LOAD THE PARAMETER LIST ADDRESS
*       IT SHOULD NOT BE 1. IF IT IS, IT IS AN ERROR CONDITION.
.*  &REG2  IS A WORK REGISTER.
.*  &L2  IS A LABEL TO BRANCH TO IF THE LENGTH OF THE PARM FIELD IS 0.
.*  &SIZE IS THE MAXIMUM LENGHT THAT THE PARM FIELD CAN HAVE
*   THE LENGTH OF THE PARM FIELD IS STORED AT SYMBOL PARMLEN.
          AIF      (N'&SYSLIST  LT  3).ERROR1
          AIF      ('&REG1'  EQ  '1').ERROR2
          AIF      ('&REG1'  EQ  'R1').ERROR2
&N        LR       &REG1,1
          L        &REG1,0(&REG1)
          LH       &REG1,0(&REG1)
          LTR      &REG1,&REG1
          BZ       &L2
          LA       &REG2,&SIZE
          CR       &REG1,&REG2
          BNH      *+6
          LR       &REG1,&REG2
          ST       &REG1,PARMLEN
          BCTR     &REG1,0
          LTR      &REG1,&REG1
          BNZ      *+8
          LA       &REG1,1
          B        CON&SYSNDX
PARMLEN   DC       F'0'
PARMFLD   DS       CL&SIZE
CON&SYSNDX L       R1,0(R1)
          LA       R1,0(R1)
          MVC      PARMFLD(0),2(1)
          EX       &REG1,*-6
          MEXIT
.ERROR1   MNOTE    12,'PARM REQUIRES 3 PARAMETERS'
          MEXIT
.ERROR2   MNOTE    12,'USE OF REGISTER 1 IS PROHIBITED'
          MEND
          EJECT
          MACRO
&N        BEGIN      &NAME,&BASE=R12,&TREG=R11,&SAVE=SAVEAREA,&SAW=18
           LCLA     &L
           LCLA     &M
           LCLA     &I
          AIF       ('&SYSLIST(0)' EQ '').ERROR
&N        CSECT
&I         SETA     &SAW*4+4
           AIF      ('&NAME'  EQ  '').LABEL
&L         SETA     ((K'&NAME)/2)*2+4
&M         SETA     K'&NAME
          B         &L.(0,15)
          DC        AL1(&M)
          DC        C&NAME
           AGO      .OK
.LABEL     ANOP
&M         SETA      K'&N
&L         SETA     ((K'&N+2)/2)*2+4
          B         &L.(0,15)
          DC        AL1(&M)
          DC        C'&N'
.OK         ANOP
R0        EQU    0
R1        EQU    1
R2        EQU    2
R3        EQU    3
R4        EQU    4
R5        EQU    5
R6        EQU    6
R7        EQU    7
R8        EQU    8
R9        EQU    9
R10       EQU    10
R11       EQU    11
R12       EQU    12
R13       EQU    13
R14       EQU    14
R15       EQU    15
*  SET UP ADDRESSABILITY, SAVE AREA, AND SAVE AREA CHAINING.
          STM    R14,R12,12(R13)
          LR        &BASE,R15
          USING     &N,&BASE
          LA        &TREG,&SAVE
          ST        R13,4(&TREG)
          ST        &TREG,8(R13)
          CNOP       2,4
          LR        R13,&TREG
          B          *+&I
&SAVE     DC         &SAW.F'0'
          MEXIT
.ERROR    MNOTE     12,'LABEL IS REQUIRED WITH THIS MACRO.'
          MEND
          EJECT
CHECKPDS BEGIN 'CHECK PDS V2.0 - &SYSDATE AT &SYSTIME'
         PARM  R2,R3,OPEN,SIZE=6
*
*  OPEN DCB'S AND CHECK TO MAKE SURE THEY ARE OPEN.
*
OPEN     OPEN  (LSTDCB,OUTPUT,DIRDCB,,MEMDCB)
         TM    LSTDCB+48,X'10'
         BNO   AB999
         TM    DIRDCB+48,X'10'
         BNO   AB999
         TM    MEMDCB+48,X'10'
         BNO   AB999
*
*  CHECK FOR LOAD LIBRARY, BUT FIRST CHECK TO SEE IF USER SPECIFIED
*  NOLOAD
*
         CLC   PARMFLD(6),=C'NOLOAD'   NOLOAD SPECIFIED?
         BE    EXTRACT                 YES, PROCEED AS USUAL
         TM    MEMDCB+X'24',X'C0'      RECFM=U?
         BNO   EXTRACT                 NO
         MVI   RECFM,C'U'
*
*  GET TIOT ADDRESS FOR FUTURE REFERENCE
*
EXTRACT  EXTRACT ADDRTIOT,FIELDS=TIOT  ADDRESS OF TIOT
*
*
*THIS CODE  CHECKS  FOR  DD CARD  AND  RETURNS  UCB  ADDRESS  IF  IT
*        FINDS IT.
*
         SPACE
TIOTFIND XR    R11,R11        USED TO HOLD DD ENTRY
         L     R7,ADDRTIOT
         LA    R7,24(R7)      1ST DD ENTRY
         LA    R3,LIB         R3 PTS TO DDNAME SEARCHING FOR
NEXTDD   CLC   0(8,R3),4(R7)  COMPARE DDNAMES
         BE    FOUNDUCB       FOUND THE DD NAME
         IC    R11,0(R7)      LENGTH OF DD ENTRY
         LA    R7,0(R7,R11)   NEXT ENTRY
         CLC   0(4,R7),ZERO   END OF TIOT
         BNE   NEXTDD
         B     AB999          TIOT ENTRY NOT FOUND
FOUNDUCB LA    R8,16(R7)      ADDR OF WORD WITH UCB
         LA    R8,0(R8)       CLEAR HIGH ORDER BYTE
         L     R8,0(R8)       GET UCB ADDR
         ST    R8,UCBADDR     SAVE IT
*
*   SEE IF USER WANTS IEBCOPY EXCLUDE CARDS PUNCHED.  CHECK FOR A
*      A DDCARD WITH DDNAME OF PUNCH.  IF THIS LOAD MODULE, SKIP
*      IEBCOPY CARDS.
*
         CLI   RECFM,C'U'     DOING A LOAD MODULE?
         BE    NOPUNCH        YES, SKIP REST OF CHECK
         XR    R11,R11        USED TO HOLD DD ENTRY
         L     R7,ADDRTIOT
         LA    R7,24(R7)      1ST DD ENTRY
         LA    R3,PUNCH       R3 PTS TO DDNAME SEARCHING FOR
NEXTDD1  CLC   0(8,R3),4(R7)  COMPARE DDNAMES
         BE    OPENPUN        FOUND THE DD NAME
         IC    R11,0(R7)      LENGTH OF DD ENTRY
         LA    R7,0(R7,R11)   NEXT ENTRY
         CLC   0(4,R7),ZERO   END OF TIOT
         BNE   NEXTDD1
         B     NOPUNCH        TIOT ENTRY NOT FOUND
         SPACE 2
*  OPEN PUNCH DD
OPENPUN  OPEN (PUNDCB,OUTPUT)
         TM    PUNDCB+48,X'10'
         BNO   AB999
         MVI   PUNCHFLG,X'FF'
*  PUT OUT FIRST CARD
         PUT   PUNDCB,=CL80'   COPY INDD=INPUT,OUTDD=OUTPUT '
         SPACE 2
*
*  GET MAIN FOR BUFFER.
*
NOPUNCH  MVC   LEN+2(2),MEMDCB+X'3E'
         L     R0,LEN
         GETMAIN  R,LV=(R0)
         LR    R9,R1
*
*   FIND JFCB BY CALLING RDJFCB & MOVE LIBRARY NAME INTO TITLE.
*
         RDJFCB DIRDCB
         MVC   LIBNAME(44),RDAREA
         LA    R15,1          LOOP TO DETERMINE LENGTH OF NAME
         LA    R1,LIBNAME     R1=ADDR. OF NAME
BLANKS   CLI   0(R1),C' '     BLANK?
         BE    TOINDEX1       EQ.? YES, DONE
         LA    R1,1(R1)       NO, INCREMENT ADDR.
         LA    R15,1(R15)     NO, INCREMENT COUNT
         C     R15,=F'45'     END OF NAME?
         BE    TOINDEX1       YES, DONE
         B     BLANKS         NO, CONTINUE
TOINDEX1 MVC   INDEX1+27(44),LIBNAME
         LA    R1,INDEX1
         LA    R1,27(R15,R1)
         MVC   1(3,R1),ASTERS PUT IN ASTERISKS
         LA    R1,INDEX1
         L     R15,UCBADDR    PT. TO UCB ADDRESS
         MVC   VOLUME(6),28(R15)  MOVE IN VOL-SER
         MVC   UNIT(3),13(R15)   MOVE IN UNIT ADDRESS
         TIME
         ST    R0,UCBADDR     SAVE TIME
         ST    R1,DATE1       GET THE DATE & STORE IT
         CALL  INITDATE,(DATE1,DATE+1,DATE1),VL
         ED    TIME(9),UCBADDR
         PUT   LSTDCB,INDEX1
         MVI   BUF2,C'-'
         PUT   LSTDCB,BUF2    SPACE 3 LINES
         MVI   BUF2,C' '      CLEAR '-'
*  R7 = COUNT OF MEMBERS READ
         SR    R7,R7          ZERO OUT R7
*
*   READ DIRECTORY BLOCK.
*
RDDIR    READ  DIRDECB,SF,DIRDCB,BUF1,'S'
         CHECK DIRDECB
         LA    R3,BUF1+2      PT TO END OF DIRECTORY BLOCK
         LH    R5,BUF1
         A     R5,=A(BUF1)
         B    FIND1
*
*   CHECK FOR NULL MEMBER AND WARN USER
*
FIND     CLI   NULLFLG,X'00'  NULL MEMBER
         BNE   FIND1          NO
         MVI   BUF2,C' '      BLANK OUT BUFFER
         MVC   BUF2+1(132),BUF2
         MVC   BUF2(L'NULLMBR),NULLMBR   PUT IN WARNING MSG
         MVC   BUF2+18(8),WORK
         PUT   LSTDCB,BUF2
         MVI   BUF2,C' '      BLANK OUT BUFFER
         MVC   BUF2+1(132),BUF2
*
*  SETUP LOOP TO PARSE DIRECTORY BLOCK. CHECK IF END OF DIRECTORY.
*     IF NOT END, FIND MEMBER NAME.
*
FIND1    MVI   NULLFLG,X'00'  INITIALIZE NULL FLAG
         CR    R3,R5
         BE    RDDIR
         MVC   WORK(8),0(3)   SAVE MEMBER NAME
         SPACE 2
*
*  LAST MEMBER? I.E. NAME ='FFFFFFFF'
         CLC   WORK(8),=X'FFFFFFFFFFFFFFFF'
         BE    LAST
*
*  SEE BALR TO LOADMBR
*
         CLI   RECFM,C'U'     LOAD MODULE?
         BNE   NOTU           NO
BRLOAD   L     R15,MBRADDR    SETUP FOR BAL
         LA    R6,LSTDCB      LOAD ADDRESS OF SYSPRINT DCB
         SR    R1,R1          INDICATE NORMAL CALL TO LOADMBR
         BALR  R14,R15        GO TO LOADMBR
         LA    R7,1(R7)       UP COUNT OF # OF MEMBERS
         L     R8,#BAD        SETUP TO INCREMENT BAD COUNT
         AR    R8,R15         ADD RESULT OF LOADMBR
         ST    R8,#BAD         & SAVE
*
*  FINDING TTR AND LENGTH OF USER DATA.  ADVANCE REG. 3 TO NEXT MEMBER.
*
NOTU     A     R3,=F'8'
         MVC   TTR(3),0(3)
         MVC   I(1),3(3)
         NI    I,B'00011111'          MASK OUT UN-NEEDED PART
         SR    R4,R4
         IC    R4,I
         SLA   R4,1
         AR    R3,R4
         A     R3,=F'4'
         CLI   RECFM,C'U'     LOAD MODULE PROCESSING?
         BE    FIND1          SKIP READ
*
*  READ  MEMBER BLOCK, BUT FIRST POINT TO MEMBER.
*
         POINT MEMDCB,TTR
         LA    R7,1(R7)               ADD 1 TO COUNT OF READ MEMBERS
RDBLOCK  LR    R2,R9
         MVI   ERRFLG,X'00'   RESET ERROR FLAG
         READ  MEMDECB,SF,MEMDCB,(2),'S'
         CHECK MEMDECB
         CLI   ERRFLG,X'FF'   DID WE HAVE AN ERROR
         BE    FIND           YES, FORGET THE REST OF THIS MEMBER
         MVI   NULLFLG,X'FF'  SET FOUND SOMETHING, I.E. NOT NULL MEMBER
         B     RDBLOCK        KEEP ON READING
*
*  ALL DONE. PRINT END MESSAGE, CLOSE BUFFERS, & RETURN.
*
LAST     MVC   BUF2+1(132),BUF2   CLEAR BUFFER & PRINT LAST LINE
         CVD   R7,WORK1       MAKE TOTAL MEMBER COUNT PRINTABLE
         MVC   COUNTMSG+2(6),MASK
         ED    COUNTMSG+2(6),WORK1+5
         L     R7,#BAD        MAKE COUNT OF BAD MEMBERS PRINTABLE
         LTR   R7,R7          WERE THERE ANY ERRORS?
         BZ    PUTCOUNT       NO, JUST PRINT MSG
         CVD   R7,WORK1
         MVC   COUNTMSG+32(6),MASK
         ED    COUNTMSG+32(6),WORK1+5
PUTCOUNT PUT   LSTDCB,COUNTMSG    PRINT LAST MSG
*
*   CLOSE FILES, FREE GETMAINED AREA
*       AND RETURN
*
         CLOSE (LSTDCB,,DIRDCB,,MEMDCB)
         TM    PUNCHFLG,X'FF' WAS PUNCH DD OPENED?
         BNE   NOCLOSE        NO
         CLOSE PUNDCB
NOCLOSE  CLI   RECFM,C'U'     LOAD MODULE PROCESSING?
         BNE   NOLOADM        NO
         L     R15,MBRADDR    SETUP TO BAL TO LOADMBR
         LA    R1,1           INDICATE CLOSE PROCESSING
         BALR  R14,R15        CLOSE PDS
NOLOADM  L     R0,LEN
         FREEMAIN R,LV=(R0),A=(R9)
         L     R13,SAVEAREA+4
         LM    R14,R12,12(R13)
         LA    R15,0          SET RETURN CODE.
         BR    R14            GOOD-BYE !!
AB888    ABEND    888,DUMP
AB999    ABEND    999,DUMP
         EJECT
*
*  THIS SYSNAD EXIT WILL PROCESS MEMBERS THAT WE GET I/O ERRORS ON
*
IOERROR  SYNADAF  ACSMETH=BSAM
         ST    R14,RETURN     SAVE RETURN ADDRESS
         L     R8,#BAD        LOAD CURRENT COUNT
         LA    R8,1(R8)       ADD 1 TO COUNT OF # BAD
         ST    R8,#BAD            AND SAVE IT
         MVI   ERRFLG,X'FF'   INDICATE WE HAVE AN ERROR
         MVI   NULLFLG,X'FF'  INDICATE WE READ SOMETHING
         MVC   BUF2+44(44),84(R1)   MOVE RESULTS OF SYNADAF MACRO
         MVC   BUF2(L'IOMSG),IOMSG  MOVE IN 1ST PART OF ERROR MSG
         MVC   BUF2+22(8),WORK  PUT IN NAME OF MEMBER
         PUT   LSTDCB,BUF2    PRINT INFORMATION
         CLI   PUNCHFLG,X'FF' IS PUNCH OPEN?
         BNE   RLSE           NO
         MVC   EXCARD+19(8),WORK  PUT MEMBER NAME IN EXCLUDE CARD
         PUT   PUNDCB,EXCARD
RLSE     SYNADRLS             FREE EVERYTHING
         L     R14,RETURN     AND RETURN
         XR    R15,R15
         BR    R14
         EJECT
*
*    DCBS, CONTANTS
*
         LTORG
LSTDCB   DCB      DDNAME=SYSPRINT,RECFM=FBA,LRECL=133,MACRF=PM,DSORG=PSX
               ,BLKSIZE=798
PUNDCB   DCB      DDNAME=PUNCH,RECFM=FB,LRECL=80,MACRF=PM,DSORG=PS,BLKSX
               IZE=800
DIRDCB   DCB      DDNAME=LIB,RECFM=U,BLKSIZE=256,MACRF=R,DSORG=PS,SYNADX
               =AB888,EXLST=RDJFCB
MEMDCB   DCB      DDNAME=LIB,EODAD=FIND,MACRF=RP,SYNAD=IOERROR,DSORG=PS
LIBNAME  DC    CL44' '
ERRFLG   DC    X'00'
NULLFLG  DC    X'FF'
PUNCHFLG DC    X'00'
LEN      DC    F'0'
RDJFCB   DS    0F
         DC    X'87'
         DC    AL3(RDAREA)
RDAREA   DS    0D
         DS    CL176
BUF1     DS    CL256
         DS    0F
BUF2     DC    CL133' '
WORK     DC    CL8' '
TTR      DC    F'0'
I        DC    C' '
IOMSG    DC    C'  I/O ERROR ON MEMBER XXXXXXXX  SYNAD INFO: '
NULLMBR  DC    C'  *** WARNING *** XXXXXXXX IS A NULL(EMPTY) MEMBER.'
COUNTMSG DC    C'- XXXXXX MEMBERS WERE ACCESSED, 000000 WERE IN ERROR.'
         DC    (133-L'COUNTMSG)C' '
INDEX1   DC    CL72'1          *** OUTPUT FOR '
         DC    CL11'VOL SER OF '
VOLUME   DC    CL6' '
         DC    CL9' ON UNIT '
UNIT     DC    CL3' '
         DC    CL4' AT '
TIME     DC    XL9'4020217A20207A2020'
         DC    CL4' ON '
DATE     DC    CL8' '
         DC    CL7' '
ASTERS   DC    CL3'***'
DATE1    DC    2D'0'
TOTALCT  DC    F'0'
#BAD     DC    F'0'
WORK1    DC    D'0'
ADDRTIOT DC    F'0'
ZERO     DC    F'0'
UCBADDR  DC    F'0'
RETURN   DC    F'0'
LIB      DC    CL8'LIB'
PUNCH    DC    CL8'PUNCH'
MASK     DC    X'402020202020'
EXCARD   DC    CL80'    EXCLUDE MEMBER=XXXXXXXX   '
RECFM    DC    C' '
MBRADDR  DC    V(LOADMBR)
         END   CHECKPDS
