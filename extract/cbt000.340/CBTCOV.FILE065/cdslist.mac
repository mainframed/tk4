P8CDS    TITLE 'SMP4 QUICK CROSS REFERENCE LISTER'
         MACRO
&LABEL   LINEPRT &P1
         AIF (N'&SYSLIST EQ 0).PASTPRM
         MVC   TITLE,&P1
.PASTPRM ANOP
         BAL   14,PRINT
         MEND
         EJECT
         MACRO
&LABEL   SUBENTRY &P1,&P2
SUBE&SYSNDX DC CL7&P2
         ORG   TRTTABL+X'&P1'
         DC    AL1(SUBE&SYSNDX-SENTRIES+1)
         ORG
         MEND
         EJECT
         @     SMP4XREF                                     *HMD 02/82*
         GBLA  &LINCNT             DEFAULT LINECOUNT        *HMD 02/82*
&LINCNT  SETA  58                                           *HMD 02/82*
P8CDSLST CSECT
         B     16(,15)
         DC    AL1(11)                                      *HMD 02/82*
         DC    C'AET'
         DC    CL8'P8CDSLST'
         STM   14,12,12(13)
         LA    15,36(,15)
         ST    15,8(,13)
         ST    13,4(,15)
         BAL   13,76(,15)
         USING *,13,12
         DC    18F'0'
         DC    A(*+4024)
         L     12,*-4
         L     3,4(,13)                GET PREVIOUS S/A     *HMD 03/82*
         XC    16(4,3),16(3)           CLEAR RETCODE        *HMD 03/82*
         EJECT
*********************************************
* DONALD DURAND (203) 273-3040              *
* AETNA LIFE AND CASUALTY                   *
* RESOURCE MANAGEMENT - EB06
* 151 FARMINGTON AVE.                       *
* HARTFORD,CT   06156                       *
*********************************************
*                                                           *HMD 02/82*
* THIS VERSION OF THE CDSLIST USES EXCP     *
* PROCESSING TO READ THE DIRECTORY BLOCKS.  *
* IT HAS SUPPORT FOR 3330-11, 3350, 3380.   *
* (ALTHOUGH NOT TRIED ON A 3380). IT SHOULD *
* DO LESS I/O, SINCE IT WILL READ ALL THE   *
* BLOCKS ON A TRACK WITH ONE CCW STRING.    *
* WE ALSO READ THE SYSMOD ENTRIES BEFORE    *
* MAC AND MOD ENTRIES, AND THUS HAVE        *
* ELIMINATED THE NEED TO STORE THE MOD AND  *
* MAC ENTRIES.  THUS, THE FIRST VALUE FOR   *
* THE SIZE PARM NO LONGER IS VALID,         *
* ALTHOUGH IT STILL WILL BE ACCEPTED.       *
*********************************************
* THIS PROGRAM IS FOR MVS RELEASE 3.8  (SMP4)
*********************************************
* YOU SHOULD HAVE A REGION SIZE OF AT LEAST 1024K           *HMD 02/82*
* REQUIRED DD CARDS:                                        *HMD 02/82*
*                                                           *HMD 02/82*
*//SMPCDS DD DSN=SYS1.SMPCDS,DISP=SHR
*//SYSPRINT DD SYSOUT=A
*                                                           *HMD 02/82*
* OPTIONAL DDNAME:
*                                                           *HMD 02/82*
*//SNAPPRT DD SYSOUT=A
*                                                           *HMD 02/82*
* NOTE--THIS DDNAME IS OPENED ONLY UPON AN ERROR CONDITION IF SNAP
*       IS A ONE OF THE PARMS.
*
* ASSEMBLY OF THIS PROGRAM WILL REQUIRE OTHER MACROS
* THAN ARE NORMALLY IN SYS1.MACLIB
* THE MACROS CAN USUALLY BE FOUND IN SYS1.AMODGEN AND SYS1.APVTMACS
*
* INCLUDE IEFSD095 FROM SYS1.AOSB0 IN THE LINK-EDIT STEP
*
*
CDSPTF   EQU   X'F3'
CDSMOD   EQU   X'D1'
CDSMAC   EQU   X'C7'
UMIDENTY EQU   X'32'
LMODENTY EQU   X'01'
ALENTRY  EQU   X'02'
ALIAS    EQU   X'80'
         EJECT
* THIS ROUTINE PROCESSES ALL THE PARM OPTIONS:
*                                                           *HMD 02/82*
*      LINECT     LINE COUNT FOR CONTROLLING PAGES BREAKS
*      SIZE       OVERRIDE FOR THE 2 INCORE TABLES
*      NOHEADER   PREVENTS HEADER PAGES
*      TITLE      PUTS IN A 1-9 CHAR TITLE IN HEADER PAGES
*      SNAP       SNAPS UNKNOWN SUBENTRIES
*
* LINECT IS IN THE FORM OF 'LINECT=58' (2 DIGITS  01-99)
* NOTE - IF LINECT IS LESS THAN THE NUMBER OF LINES REQUIRED TO FIT
* THE HEADER PAGE, THE HEADER PAGES WILL BE SPLIT UP.
*
* TITLE IS IN THE FORM OF 'TITLE=SMP LIST' (1-9 CHAR)
* DEFAULT TITLE IS 'CDS LIST'.
*
* SIZE IS IN THE FORM OF 'SIZE=(999999)' (1-9 DIGITS FOR BOTH VALUES)
* OR 'SIZE=(99999,99999)'  OR 'SIZE=(,99999)'
*
* FIRST VALUE IS FOR THE MOD/MAC TABLE  (DEFAULT IS 1,000,000)
* SECOND VALUE IS FOR THE SYSMOD TABLE  (DEFAULT IS 1,000,000)
* SIZE SHOULD BE USED IF THE PROGRAM QUITS WITH THE WTO:
*
*    'MOD/MAC TABLE GETMAINED STORAGE EXCEEDED'
*    'SYSMOD TABLE GETMAINED STORAGE EXCEEDED'
*
         EJECT
         L     3,0(1)                  ADDR OF PARM
         LH    11,0(3)                 LOAD LENGTH OF PARM
         LA    3,2(3)                  POINT PAST LENGTH HALFWORD
WHATPARM LTR   11,11
         BZ    PARMDONE
         CH    11,=H'4'
         BL    BADPARM
         CLC   0(4,3),=C'SNAP'
         BE    PRMSNAP
         CH    11,=H'6'
         BL    BADPARM
         CLC   0(6,3),=C'LINECT'
         BE    PRMLNCT
         CLC   0(6,3),=C'TITLE='
         BE    PRMHDR
         CLC   0(6,3),=C'SIZE=('
         BE    PRMSIZE
         CH    11,=H'8'
         BL    BADPARM
         CLC   0(8,3),=C'NOHEADER'
         BE    PRMNOHDR
         B     BADPARM
         SPACE 2
PRMSIZE  TM    PARMFLAG,X'01'          CHECK IF ALREADY BEEN HERE
         BO    BADPARM                 YES - BAD PARM
         OI    PARMFLAG,X'01'          SET FLAG FOR SIZE PARM
         LA    2,6(3)                  POINT PAST '('
         LA    5,20                    SIZE CAN BE 19 CHAR PLUS ')'
         LR    14,11                   SAVE LENGTH OF ENTIRE PARM
         LR    15,2                    POINT REG 2 TO SIZE VALUE
         CH    14,=H'26'               MAX LENGTH OF SIZE VALUES
         BH    PRMSIZE0                OK SCAN THE FIRST 20 CHAR
         LR    5,14                    NO - SCAN FOR THE PARM LENGTH
         SH    5,=H'6'                 MINUS SIZE LITERAL (6 CHAR)
PRMSIZE0 EQU   *
         CLI   0(2),C')'               LOOK FOR END OF SIZE PARM
         BE    PRMSIZE1                YES - PROCESS THE SIZE VALUE(S)
         LA    2,1(2)                  BUMP UP TO NEXT CHAR
         BCT   5,PRMSIZE0              LOOP LOOKING FOR END OF SIZE
         B     BADPARM                 SIZE IS TOO LONG - BAD PARM
PRMSIZE1 EQU   *
         LR    4,2
         SR    4,15                    COMPUTE LENGTH OF SIZE VALUE(S)
         LR    1,4                     SAVE LENGTH OF VALUE
         LR    7,15                    POINT REG 7 TO BEG OF VALUE
         LR    6,4                     LOAD REG 6 WITH LENGTH OF VALUE
         CH    4,=H'10'                LENGTH LESS THAN 10
         BL    PRMSIZE2                THEN CHECK LESS THAN 10 BYTES
         LA    6,10                    CHECK ONLY THE FIRST 10 BYTES
PRMSIZE2 EQU   *
         CLI   0(7),C','               LOOKING FOR A ,
         BE    PRMSIZE3                FOUND IT - PROCESS FIRST PARM
         LA    7,1(7)                  POINT TO NEXT BYTE OF PARM
         BCT   6,PRMSIZE2              LOOP LOOKING FOR A ,
         CH    4,=H'10'                PARM GREATER THAN 10 BYTES AND
         BH    BADPARM                 NO , FOUND - BAD PARM
PRMSIZE3 LR    9,7                     POINT REG 9 TO BEG OF PARM
         SR    9,15                    COMPUTE LENGTH OF FIRST PARM
         LR    8,9                     SAVE LENGTH UN-ADJUSTED
         LTR   9,9                     NO FIRST PARM - ONLY A ,
         BZ    PRMSIZE4
         LA    5,PARMFLD+L'PARMFLD     FIND POSITION IN PARMFLD TO
         SR    5,9                     MOVE FIRST PARM TO
         BCTR  9,0                     ADJUST 9 FOR THE EX
         EX    9,MVCPARM               MOVE PARM INTO PARMFLD
         PACK  DBLWORD(8),PARMFLD(9)   PACK FIRST PARM
         CVB   6,DBLWORD               CONVERT FIRST PARM TO BINARY
         LTR   6,6                     DID YOU REQUEST A ZERO LENGTH
         BZ    BADPARM                 YES - BAD PARM
         ST    6,LENGTH+4              STORE LENGTH FOR GETMAIN
PRMSIZE4 SR    4,8                     SUBTRACT LENGTH OF FIRST PARM
         LTR   4,4                     ONLY 1 PARM WITH NO ,
         BZ    PRMSIZE5
         BCTR  4,0                     DECREMENT BY 1 TO ALLOW FOR ,
         LTR   4,4                     ONLY 1 PARM FOLLOWED BY ,
         BZ    PRMSIZE5
         CH    4,=H'9'                 SECOND PARM GREATER THAN 9
         BH    BADPARM
         LA    5,PARMFLD+L'PARMFLD     FIND POSITION IN PARMFLD TO -
         SR    5,4                     MOVE SECOND PARM TO
         LA    15,1(7)                 POINT REG 15 TO SECOND PARM
         MVC   PARMFLD,=9CL1'0'        RESET PARMFLD TO ALL X'F0'
         BCTR  4,0                     ADJUST REG 4 FOR THE EX
         EX    4,MVCPARM               MOVE PARM INTO PARMFIELD
         PACK  DBLWORD(8),PARMFLD(9)
         CVB   6,DBLWORD
         LTR   6,6                     DID YOU REQUEST A ZERO LENGTH
         BZ    BADPARM                 YES - BAD PARM
         ST    6,SYSMLN+4              STORE LENGTH FOR GETMAIN
PRMSIZE5 EQU   *
         LA    3,7(1,3)                POINT PAST END OF SIZE PARM
         SR    14,1                    SUBTRACT LENGTH OF SIZE VALUE
         SH    14,=H'7'                SUBTRACT LENGTH OF SIZE LITERAL
         LTR   14,14                   CHECK FOR NO MORE PARM
         BZ    PARMDONE                YES - WE ARE DONE
         CLI   0(3),C','               IS THERE A ',' AFTER SIZE PARM
         BNE   BADPARM                 NO - BAD PARM
         LA    3,1(3)                  POINT PAST THE ','
         BCTR  14,0                    DECREMENT LENGH TO ALLOW FOR ','
         LR    11,14
         B     WHATPARM
         EJECT
PRMNOHDR EQU   *
         TM    PARMFLAG,X'04'          CHECK IF ALREADY BEEN HERE
         BO    BADPARM                 YES - BAD PARM
         OI    PARMFLAG,X'04'          SET NOHEADER PARM FLAG
         XC    HEADADDR+1(3),HEADADDR+1 ZERO OUT VCON
         SH    11,=H'8'                SUBTRACT NOHEADER LITERAL LENGTH
         LTR   11,11                   ANY MORE PARM INFO
         BZ    PARMDONE                NO - WE ARE DONE
         CLI   8(3),C','               IS THERE A ',' AFTER NOHEADER
         BNE   BADPARM                 NO - BAD PARM
         LA    3,9(3)                  POINT PAST THE ','
         BCTR  11,0                    DECREMENT LENGTH FOR ','
         B     WHATPARM                CHECK NEXT PARM
         EJECT
PRMSNAP  EQU   *
         TM    PARMFLAG,X'10'          CHECK IF ALREADY BEEN HERE
         BO    BADPARM                 YES - BAD PARM
         OI    PARMFLAG,X'10'          SET SNAP PARM FLAG
         SP    SNAPCNT,SNAPCNT
         SH    11,=H'4'                SUBTRACT SNAP LITERAL LENGTH
         LTR   11,11                   ANY MORE PARM INFO
         BZ    PARMDONE                NO - WE ARE DONE
         CLI   4(3),C','               IS THERE A ',' AFTER SNAP
         BNE   BADPARM                 NO - BAD PARM
         LA    3,5(3)                  POINT PAST THE ','
         BCTR  11,0                    DECREMENT LENGTH FOR ','
         B     WHATPARM                CHECK NEXT PARM
         EJECT
PRMHDR   EQU   *
         TM    PARMFLAG,X'08'          CHECK IF ALREADY BEEN HERE
         BO    BADPARM                 YES - BAD PARM
         OI    PARMFLAG,X'08'          SET TITLE PARM FLAG
         LA    4,10                    SET MAX NUMBER OF TITLE CHAR + 1
         LA    7,6(3)                  POINT TO FIRST TITLE CHAR
         CH    11,=H'15'               CHECK IF TOTAL PARM > 15 BYTES
         BH    PRMHDR0                 YES - THEN SCAN FOR THE MAX
         LR    4,11                    PARM LESS THAN 15 BYTES SCAN -
         SH    4,=H'6'                 FOR PARM LENGTH MINUS 6 BYTES
PRMHDR0  EQU   *
         CLI   0(7),C','               LOOK FOR A ',' AFTER THE TITLE
         BE    PRMHDR1                 FOUND IT
         LA    7,1(7)                  POINT TO NEXT CHAR
         BCT   4,PRMHDR0               LOOP
         CH    11,=H'15'               SHOULD WE HAVE FOUND A ','
         BH    BADPARM                 YES - BAD PARM
PRMHDR1  EQU   *
         LA    1,6(3)                  GET ADDR OF BEG OF TITLE
         LR    15,7
         SR    15,1                    COMPUTE NUMBER OF CHAR'S
         LTR   15,15                   CHECK FOR A ZERO NUMBER OF CHAR
         BZ    BADPARM                 YES - BAD PARM
         STC   15,TITLCNT              STORE LENGTH OF TITLE
         BCTR  15,0                    ADJUST LENGTH FOR EX
         EX    15,MVCTITLE             MOVE TITLE TO FIELD
         LA    1,7(15)                 COMPUTE TITLE PARM LENGTH
         SR    11,1                    SUBTRACT TITLE PARM LENGTH
         LTR   11,11                   ANY MORE PARM INFO
         BZ    PARMDONE                NO - WE ARE DONE HERE
         LA    3,7(15,3)               POINT PAST ENTIRE TITLE PARM
         CLI   0(3),C','               IS THERE A ',' THERE
         BNE   BADPARM                 NO - BAD PARM
         LA    3,1(3)                  POINT PAST ','
         BCTR  11,0                    DECREMENT FOR ','
         B     WHATPARM                CHECK NEXT PARM
         EJECT
PRMLNCT  EQU   *
         TM    PARMFLAG,X'02'          CHECK IF ALREADY BEEN HERE
         BO    BADPARM                 YES - BAD PARM
         OI    PARMFLAG,X'02'          SET LINECT PARM FLAG
         CH    11,=H'9'                LESS THAN 9 CHAR
         BL    BADPARM                 YES - BAD PARM
         CLI   7(3),C'0'               CHECK FIRST DIGIT < 0
         BL    BADPARM                 YES - BAD PARM
         CLI   7(3),C'9'               CHECK FIRST DIGIT > 9
         BH    BADPARM                 YES - BAD PARM
         CLI   8(3),C'0'               CHECK SECOND DIGIT < 0
         BL    BADPARM                 YES - BAD PARM
         CLI   8(3),C'9'               CHECK SECOND DIGIT > 9
         BH    BADPARM                 YES - BAD PARM
         CLC   7(2,3),=C'00'           CHECK FOR '00' LINECT
         BE    BADPARM                 YES - BAD PARM
         PACK  PAGEBRK,7(2,3)          PACK LINECNT INTO PAGEBRK
         SH    11,=H'9'                SUBTRACT 9 FROM PARM LENGTH
         LTR   11,11                   TEST IF NOW ZERO
         BZ    PARMDONE                YES - DONE WITH THE PARM
         CLI   9(3),C','               IS THE NEXT CHAR A ','
         BNE   BADPARM                 NO - BAD PARM
         LA    3,10(3)                 POINT TO NEXT CHAR AFTER ','
         BCTR  11,0                    ALLOW FOR THE ','
         B     WHATPARM                CHECK ADDITIONAL PARMS
         EJECT
BADPARM  EQU   *
         WTO   'P8CDS1I INVALID PARM---SCAN TERMINATED--DEFAULT VALUE PX
               ROBABLY USED',ROUTCDE=(2,11),DESC=(4,6)      *HMD 02/82*
         EJECT
PARMDONE EQU   *
         OPEN  (PDSDCB,(INPUT),SYSPRINT,(OUTPUT),PDSFILE,(INPUT))
         SPACE 2
         GETMAIN R,LV=532              SPACE FOR 4 PRINT LINES
         BXH   15,15,NOSTOR            REQUESTED STORAGE NOT AVAILABLE
         LR    5,1
         LR    14,1                    ADDR OF THE 4 PRINT LINES
         LA    15,532                  LENGTH OF ALL 4 PRINT LINES
         SR    8,8                     CLEAR REG 8
         SR    9,9                     CLEAR REG 9
         ICM   9,B'1000',=X'40'        INSERT PADDING CHAR
         MVCL  14,8                    CLEAR PRINT LINES
         LA    9,133(5)
         SPACE 2
* SET UP THE MAIN TITLE LINE WITH VOL=SER, TIME AND DATE.
         MVC   0(19,9),=C'1   3.8  CDS LISTER'
         LA    15,PDSFILE
         USING IHADCB,15
         L     15,DCBDEBAD
         DROP  15
         USING DEBBASIC,15
         L     15,DEBSUCBA
         DROP  15
         USING UCBCMSEG,15
         MVC   25(6,9),UCBVOLI         VOLUME SER
         MVC   VOLSER,UCBVOLI          VOLUME SER
         MVC   DEVTYPE(1),UCBUNTYP     UNIT TYPE
         DROP  15
         MVC   78(6,9),=X'20204B202120' EDIT MASK FOR DATE
         MVC   90(6,9),=X'2120204B2020'
         TIME  DEC                     GET TIME AND DATE
         ST    1,DATE                  STORE DATE
         SRL   0,4
         ST    0,WORD                  STORE TIME
         ED    77(7,9),DATE+1          EDIT DATE INTO PRINT LINE
         ED    89(7,9),WORD            EDIT TIME INTO PRINT LINE
         MVC   35(8,9),=C'&SYSDATE'
         MVC   46(9,9),=C'**GTEDS**'                        *HMD 03/82*
         MVC   73(4,9),=C'DATE'
         MVC   86(4,9),=C'TIME'
         MVC   120(4,9),=C'PAGE'
         LA    9,133(9)
         USING PRLINE,9
         SPACE 2
* SET UP THE MACRO/MODULE TITLE SECONDARY TITLE LINE
         MVI   LINECC,C'0'
         MVC   LINEMOD(5),=C'MACRO'
         MVC   LINEFMID(4),=C'FMID'
         MVC   LINERMID(4),=C'RMID'
         MVC   LINERDTE(4),=C'DATE'
         MVC   LINELIB(7),=C'LIBRARY'
         MVI   LNEENTY1,C'-'
         MVC   LNEENTY1+1(23),LNEENTY1
         MVC   LNEENTY1+24(11),=C'SUB ENTRIES'
         MVI   LNEENTY1+35,C'-'
         MVC   LNEENTY1+36(22),LNEENTY1+35
         DROP  9
         LA    9,133(9)
         USING PTFLINE,9
         SPACE 2
* SET UP THE SYSMOD SECONDARY TITLE LINE
         MVI   PLCC,C'0'
         MVC   PLSYSM(6),=C'SYSMOD'
         MVC   PLDATE(4),=C'DATE'
         MVC   PLTYPE(4),=C'TYPE'
         MVC   PLAPP(11),=C'--STATUS---'
         MVC   PLFMID(4),=C'FMID'
         MVC   PLLSUP(7),=C'LASTSUP'
         MVI   PLENTRY1,C'-'
         MVC   PLENTRY1+1(32),PLENTRY1
         MVC   PLENTRY1+33(19),=C'SYSMOD SUB ENTRIES-'
         MVC   PLENTRY1+52(32),PLENTRY1+51
         DROP  9
         EJECT
HEADERS  EQU   *
* THIS ROUTINE WILL BAL TO ROUTINES TO PRINT 2 HEADER PAGES (IDENTICAL)
* WITH VOL=SER, DATE (MM DD YY) AND 'CDS LIST'.
* IT USES THE IBM ROUTINE IEFSD095.
* BYPASS HEADER PAGES IF VCON FOR IEFSD095 IS ZERO.
         SR    1,1                     CLEAR REG 1
         ICM   1,7,HEADADDR+1          INSERT ADDRESS
         BZ    HEADERS0                BYPASS HEADER PAGES IF ZERO
         LA    0,2                     CONVERT DATE TO MMDDYY
         L     1,DATE                  AND PICK UP THE DAY-OF-WEEK
         BAL   14,DATES                INDICATOR IN REG 1
         ST    1,DATE
         SRL   1,28
         STC   1,DAYWEEK               DAY OF WEEK CODE
         UNPK  UNPKDATE(7),DATE(4)
         BAL   14,SETHEAD
         SP    LINES,LINES             CLEAR LINE COUNTER
         BAL   14,SETHEAD
HEADERS0 EQU    *
         ZAP   LINES,PAGEBRK           FORCE PAGE BREAK
         EJECT
* ALLOCATE STORAGE FOR A BUFFER THAT IS 8 BYTES LARGER THAN THE
* SMPCDS BLOCKSIZE.  SINCE WHEN WE ARE READING THE SECOND (THIRD, ETC)
* BLOCK OF THE MEMBER, WE MOVE THE LEFTOVER PART OF A SUBENTRY, WHICH
* COULD BE FROM 1 TO 8 BYTES, TO THE BEGINNING OF THE BUFFER AND READ
* THE BLOCK AFTER THE LEFTOVER PART.
         LA    11,PDSFILE
         USING IHADCB,11
         LH    11,DCBBLKSI             REG 11 CONTAINS BLOCKSIZE -
         DROP  11                      ADD 8 SO IT COULD CONTAIN THE -
         LA    11,8(11)                BLOCK PLUS 8 BYTES OF MOVED DATA
         ST    11,BUFL1
         GETMAIN EC,LV=(11),A=BUFA1
         BXH   15,15,NOSTOR            REQUESTED STORAGE NOT AVAILABLE
         EJECT
* ALLOCATE STORAGE FOR THE EXCP PROCESSING
         SR    2,2
         TRT   DEVTYPE,DEVTBL
         LA    9,DEVICES(2)
         BCTR  9,0
         MVC   DEVCHAR(4),0(9)
         LH    9,DEVCHAR+2             LOAD WITH BLOCKS/TRACK
         SLL   9,9                     MULTIPLY BY 512
         ST    9,EXCPBFLN              EXCP BUFFER LENGTH
         GETMAIN EC,LV=(9),A=EXCPBFAD  GET BUFFERS FOR 2 TRACKS WORTH
         BXH   15,15,NOSTOR
         MVC   EXCPBUF1,EXCPBFAD
         L     9,EXCPBFLN
         SRL   9,1                     DIVIDE LENGTH BY 2
         A     9,EXCPBUF1              ADDR FOR 2ND SET OF BUFFERS
         ST    9,EXCPBUF2
         LH    1,DEVCHAR+2             LOAD NUMBER DIR-BLKS/TRK
         BCTR  1,0                     DECREMENT BY 1
         SLL   1,3                     MULTIPLY BY 8
         LA    1,READCCW(1)            ADDR OF LAST CCW WE WILL USE
         NI    4(1),B'10111111'        TURN OFF COMMAND CHAINING
         LA    15,PDSDCB
         USING IHADCB,15
         L     15,DCBDEBAD
         DROP  15
         SR    14,14
         IC    14,16(15)               NUMBER OF EXTENTS
         BCTR  14,0                    MAKE IT RELATIVE TO ZERO
         STH   14,EXTENTS              NUMBER OF EXTENTS
         LA    15,32(15)               POINT TO DEB DIR ACCESS DEV SEC
         ST    15,DEBDADDR             STORE ADDR
         BAL   14,EXCPINIT
         EJECT
* THIS WILL ALLOCATE STORAGE FOR ABOUT 80,000 SYSMOD ENTRIES*HMD 03/82*
* USE WITH THE  'TBSYSM   DSECT'
         GETMAIN VC,LA=SYSMLN,A=TABSYSM
         BXH   15,15,NOSTOR            REQUESTED STOAGE NOT AVAILABLE
         L     14,TABSYSM+4            LOAD 15 WITH STOAGE OBTAINED
         SRDA  14,32                   SHIFT DOUBLE INTO REG
         D     14,=A(TBSYSMLN)         STORAGE OBTAINED/TBSYSMLN =
         ST    15,MAXSYSMC             NUMBER OF ENTRIES POSSIBLE
         EJECT
LOOPPTF  EQU   *
* THIS ROUTINE BALR TO READ THE CDS DIRECTORY SEQ. USING EXCP.
         BAL   14,GETDIR               GO LOOK FOR A DIR BLOCK
         LA    3,2(2)                  ADDR OF FIRST MEMBER
         LH    6,0(2)                  BYTE COUNT OF BLOCK
         LA    7,0(6,2)                ADDR OF LAST BYTE IN BLOCK
MINIPTF  EQU   *
* CALCULATE THE AMOUNT OF USER DATA BYTES.
         BAL   14,UNPACK               UNPACK THE MEMBER NAME
         IC    6,11(3)                 INSERT USER HALFWORD COUNT
         SLL   6,27
         SRL   6,26
         CLI   0(3),CDSPTF             SYSMOD ENTRY
         BE    SYSMENT
         BH    SETMAC
         SPACE 2
NEXTPTF  EQU   *
* HERE WE DECIDE WHETHER TO POINT TO THE NEXT MEMBER IN THE
* DIRECTORY BLOCK OR READ ANOTHER BLOCK.
         LA    6,12(6)                 ADD FIXED PORTION OF DIR ENTRY
         BXLE  3,6,MINIPTF
         B     LOOPPTF                 GO READ ANOTHER BLOCK
         EJECT
SETMAC   EQU   *
         ZAP   LINES,PAGEBRK
         MVI   SRCHKEY,CDSMAC
         MVI   SEEKSRCH,X'E9'
         XC    EXTENTNO,EXTENTNO
         MVI   EXCPBLNO+1,X'FF'
         LA    1,SEEKINIT
         STCM  1,B'0111',IXBSTART
         WAIT  ECB=EXCPECB
         BAL   14,EXCPINIT
LOOPMAC  EQU   *
* THIS ROUTINE BALR TO READ THE CDS DIRECTORY SEQ. USING EXCP.
         BAL   14,GETDIR               GO LOOK FOR A DIR BLOCK
         LA    3,2(2)                  ADDR OF FIRST MEMBER
         LH    6,0(2)                  BYTE COUNT OF BLOCK
         LA    7,0(6,2)                ADDR OF LAST BYTE IN BLOCK
MINIMAC  EQU   *
* CALCULATE THE AMOUNT OF USER DATA BYTES.
         BAL   14,UNPACK               UNPACK THE MEMBER NAME
         IC    6,11(3)                 INSERT USER HALFWORD COUNT
         SLL   6,27
         SRL   6,26
         CLI   0(3),CDSMOD             MOD ENTRY
         BE    MODENT
         BH    EOD
         CLI   0(3),CDSMAC             MAC ENTRY
         BE    MODENT
         SPACE 2
NEXTMAC  EQU   *
* HERE WE DECIDE WHETHER TO POINT TO THE NEXT MEMBER IN THE
* DIRECTORY BLOCK OR READ ANOTHER BLOCK.
         LA    6,12(6)                 ADD FIXED PORTION OF DIR ENTRY
         BXLE  3,6,MINIMAC
         B     LOOPMAC                 GO READ ANOTHER BLOCK
         EJECT
EOD      EQU   *
* FREEUP THE GETMAIN'S AND CLOSE ALL FILES.
         MVC   0(38,5),=CL38'-    END OF CDS LISTER    COND CODE=00'
         SP    LINES,LINES             PREVENT A PAGE BREAK
         LINEPRT                       PRINT LINE
         FREEMAIN VC,A=TABSYSM
         L     11,EXCPBFLN
         FREEMAIN EC,LV=(11),A=EXCPBFAD
         L     11,BUFL1
         FREEMAIN EC,LV=(11),A=BUFA1
         FREEMAIN R,LV=532,A=(5)
EOJ      CLOSE (SYSPRINT,,PDSDCB,,PDSFILE)
         L     13,4(13)
         LM    14,12,12(13)
         BR    14
         TITLE 'SMP4 CDS LISTER  *** SUBROUTINES ***'
MODENT   EQU   *
         STM   6,7,MENTSV6
         NI    LINEFLAG,X'FE'          MARK THIS LINE TO BE PRINTED
         TM    LINEFLAG,X'10'
         BO    MODENT0
         CLI   0(3),CDSMAC
         BE    MODENT0
         OI    LINEFLAG,X'10'
         LA    1,266(5)                POINT REG 1 TO MOD TITLE LINE
         USING PRLINE,1
         MVC   LINEMOD(6),=C'MODULE'   FIRST MODULE ENTRY
         DROP  1
         MVI   LALIAS,C'T'             NOW ITS TALIAS - NOT MALIAS
         MVC   LMOD(L'LMOD-1),=C'  LMOD' NOW ITS LMOD - NOT GENASM
         USING PRLINE,5
         ZAP   LINES,PAGEBRK           CAUSE PAGE BREAK
MODENT0  EQU   *
         LA    4,LNEENTY1
         LH    6,=AL2(LNEENTYL)
         LA    7,LNEENTY3+LNEENTYL-1
         MVC   LINEMOD,NAME            MOVE IN MODULE OR MACRO NAME
         CLI   13(3),X'40'             BLANK RMID
         BE    MODENT1
         MVC   LINERMID,13(3)          MOVE IN RMID NUMBER
         LA    15,13(3)
         LA    1,LINERDTE
         BAL   14,BINSRCH
MODENT1  MVC   LINEFMID,21(3)          MOVE IN FMID NUMBER
         TM    11(3),ALIAS             IS THERE A MEMBER
         BO    PUTOUT
         BAL   14,READFRST             BRANCH TO ISSUE INITIAL READ
         TM    EOFFLAG,X'01'           CHECK IF THERE WAS A BLOCK
         BO    PUTOUT
         MVC   LINELIB,72(2)           MOVE DLIB TO PRINT LINE
         LA    2,71(2)                 POINT 2 TO BEG OF VAR POR - 9
NEXTVAR  EQU   *
         LA    2,9(2)                  NEXT VAR ENTRY IN BUFFER
         LA    15,9(2)                 LOOK AHEAD ADDR
         C     15,BUFEND               END OF FILLED PORTION IN BUFFER
         BNH   NEXTVAR0
         BAL   14,READNEXT
         TM    EOFFLAG,X'01'
         BO    PUTOUT
NEXTVAR0 CLI   0(2),X'FF'              END OF USEABLE DATA IN BUFFER
         BE    PUTOUT
VAR      EQU   *                       CHECK THE SUB-ENTRY
         CLI   8(2),UMIDENTY           A UMID ENTRY
         BE    PUMID
         CLI   8(2),LMODENTY           A LMOD OR GENASM ENTRY
         BE    PLMOD
         CLI   8(2),ALENTRY            A MALIAS OR TALIAS ENTRY
         BE    PALIAS
         EJECT                                              *HMD 03/82*
***********************************************************************
* IF WE GET HERE, THEN WE HAVE AN UNKNOWN SUB-ENTRY..SNAP IT          *
***********************************************************************
         BAL   14,SNAP
         B     NEXTVAR
         SPACE
PUMID    EQU   *
         MVC   0(5,4),=CL5'UMID-'
         MVC   5(7,4),0(2)             MOVE UMID
         LR    15,2
         LA    1,13(4)
         BAL   14,BINSRCH
         CLI   13(4),C' '
         BE    PUT1
         MVI   12(4),C'-'
         B     PUT1
PLMOD    EQU   *
         MVC   0(7,4),LMOD             EITHER LMOD OR GENASM KEYWORDS
         MVC   7(8,4),0(2)             MOVE LMOD OR GENASM ENTRY
         MVC   15(3,4),=3X'40'         CLEAR LENTRY DATE AREA
         B     PUT1
PALIAS   EQU   *
         MVC   0(7,4),LALIAS
         MVC   7(8,4),0(2)             MOVE MALIAS OR TALIAS
         MVC   15(3,4),=5X'40'         CLEAR LENTRY DATE AREA
PUT1     EQU   *
         NI    LINEFLAG,X'FE'          MARK THIS LINE TO BE PRINTED
         BXLE  4,6,NEXTVAR
         LA    4,LNEENTY1
         CP    LINES,PAGEBRK
         BL    PUT2
         MVC   LINEMOD,NAME            CONT LINE ON A NEW PAGE
PUT2     EQU   *
         LINEPRT MTITLE                MOD/MAC TITLE LINE
         OI    LINEFLAG,X'01'          MARK LINE AS PRINTED
         B     NEXTVAR
PUTOUT   EQU   *
         TM    LINEFLAG,X'01'
         BO    NOPUT1
         LINEPRT MTITLE                MOD/MAC TITLE LINE
NOPUT1   EQU   *
         LM    6,7,MENTSV6
         B     NEXTMAC
         DROP  5
MENTSV6  DS    2F
         EJECT
SYSMENT  EQU   *
* PRINT OUT ALL DESIRED INFORMATION FOR THIS SYSMOD.
* STORE SYSMOD# IN TABLE ALONG WITH APPLY DATE (PACKED).
         USING IOPPTFNT,3
         USING ENTRY,4
         USING PTFLINE,5
         STM   6,7,CKSV6
         LA    4,PLENTRY1
         LH    6,=AL2(PLENTL)
         LA    7,PLENTRY5+PLENTL-1
         L     9,SYSMCNT
         LA    9,1(9)
         C     9,MAXSYSMC              OVER MAX SYSMOD ENTRIES
         BH    SYSMSTOR
         ST    9,SYSMCNT
         BCTR  9,0                     MAKE COUNT RELATIVE TO ZERO
         MH    9,=AL2(TBSYSMLN)
         A     9,TABSYSM
         USING TBSYSM,9
         MVC   TBSYSME,NAME            SYSMOD
         TM    11(3),ALIAS
         BO    SYSMENT0
         BAL   14,READFRST
         TM    EOFFLAG,X'01'
         BO    SYSMENT0
         MVC   TBSYSMD,47(2)           SYSMOD APPLIED DATE
         DROP  9
SYSMENT0 EQU   *
         NI    SYSMFLAG,X'FE'          MARK THIS LINE TO BE PRINTED
         MVC   PLSYSM,NAME
         MVC   PLLSUP,IOPSBYNO
         IC    14,IOPPTYPE
         SLL   14,29
         SRL   14,27
         LA    14,TYPE(14)
         MVC   PLTYPE(4),0(14)
         TM    IOPPTFF1,IOPAPP
         BZ    SYSMENT1
         MVC   PLAPP(3),=C'APP'
SYSMENT1 EQU   *
         TM    IOPPTFF1,IOPERROR
         BZ    CHECK2
         MVC   PLERR(3),=C'ERR'
CHECK2   EQU   *
         TM    IOPPTFF1,IOPACC
         BZ    SYSMENT3
         MVC   PLACC(3),=C'ACC'
SYSMENT3 EQU   *
         TM    IOPPTFF1,IOPRES
         BZ    SYSMENT4
         MVC   PLRES(3),=C'RES'
SYSMENT4 EQU   *
         TM    IOPPTFF1,IOPREGEN
         BZ    SYSMENT5
         MVC   PLGEN(3),=C'GEN'        APPLIED VIA SYSGEN
SYSMENT5 EQU   *
         TM    11(3),ALIAS
         BO    PRSYSM
         MVC   PLFMID,73(2)            MOVE FMID TO PRINT LINE
         TM    IOPPTFF1,IOPAPP
         BZ    SETSYSM
         TM    49(2),X'0F'             APPLIED DATE PACKED
         BZ    SETSYSM
         UNPK  PLDATE,47(3,2)          UNPACK SYSMOD DATE
SETSYSM  EQU   *
         LA    2,71(2)                 POINT 2 TO BEG OF VAR PORTION
NEXTSYSM EQU   *
         LA    2,9(2)                  POINT TO NEXT VAR ENTRY IN BUF
         LA    15,9(2)                 LOOK AHEAD ADDR
         C     15,BUFEND               END OF FILLED PORTION OF BUF
         BNH   NEXTSYS0
         BAL   14,READNEXT
         TM    EOFFLAG,X'01'
         BO    PRSYSM
NEXTSYS0 CLI   0(2),X'FF'              END OF USEABLE DATA IN BUFFER
         BE    PRSYSM
VARSYSM  EQU   *
* REG 2 NEEDED TO BE RETURNED TO PREVIOUS VALUE AFTER TRT
         LR    10,2
         SR    2,2
         TRT   8(1,10),TRTTABL         CHECK CODE IN TABLE - VALID ?
         LR    0,2
         LR    2,10
         LR    10,0
         BNZ   HITSYSM
         BAL   14,SNAP
         B     NEXTSYSM
HITSYSM  EQU   *
         CLI   0(2),X'00'
         BE    NEXTSYSM
         LA    1,SENTRIES(10)
         BCTR  1,0                     THE TRT WAS SET UP AT +1 DSPL
         MVC   ENTTYPE,0(1)
SYSM     EQU   *
         LA    15,7                    MOVE 8 BYTES (EX INST)
         CLI   8(2),X'A2'
         BL    SYSM0
         CLI   8(2),X'AB'
         BH    SYSM0
         BCTR  15,0                    MOVE ONLY 7 BYTES
SYSM0    EQU   *
         EX    15,MVCENTN
         MVI   ENTDASH,C'-'
         NI    SYSMFLAG,X'FE'          MARK THIS LINE TO BE PRINTED
         BXLE  4,6,NEXTSYSM
         LA    4,PLENTRY1
         CP    LINES,PAGEBRK
         BL    SYSM1
         MVC   PLSYSM,NAME
SYSM1    EQU   *
         LINEPRT SYSTITLE              SYSMOD TITLE LINE
         OI    SYSMFLAG,X'01'          MARK THIS LINE AS PRINTED
         B     NEXTSYSM
PRSYSM   EQU   *
         TM    SYSMFLAG,X'01'          HAS THIS LINE BEEN PRINTED
         BO    NOPRSYSM
         CP    LINES,PAGEBRK
         BL    PRSYSM0
         MVC   PLSYSM,NAME
PRSYSM0  EQU   *
         LINEPRT SYSTITLE              SYSMOD TITLE LINE
NOPRSYSM EQU   *
         LM    6,7,CKSV6
         B     NEXTPTF
         DROP  5
         DROP  3
         SPACE
CKSV6    DS    2F
MVCENTN  MVC   ENTNAME(0),0(2)
         DROP  4
         EJECT
SNAP     EQU   *
* THIS ROUTINE IS USED TO SNAP ANY MEMBER
* IT SNAPS THE NAME AFTER UNPACKING
* ALONG WITH THE DIRECTORY ENTRY, AND THE MEMBER
* REG 3 MUST BE THE ADDR OF THE DIRECTORY ENTRY
* ONLY THE FIRST 25 SNAPS ARE DONE
         SPACE 2
         CP    SNAPCNT,SNAPMAX
         BNLR  14
         STM   14,1,SNAPSAV
         STM   9,10,SNAPS9
         AP    SNAPCNT,=PL1'1'
         OPEN  (SNAPDCB,(OUTPUT))
         LA    10,SNAPDCB
         USING IHADCB,10
         TM    DCBOFLGS,X'10'          GOOD OPEN ?
         BZ    NOSNAP                  NO - DO NOT SNAP
         DROP  10
         IC    1,11(3)                 INSERT USER HALFWORD COUNT
         SLL   1,27
         SRL   1,26
         LA    10,12(1,3)
         ST    3,SNAPDIRS
         ST    10,SNAPDIRE
         L     9,BUFA1
         L     10,BUFEND
         CR    9,10
         BL    SNAPMEMB
         OI    SNAPDIRE,X'80'          INDICATE DIREC. PORTION ONLY
         B     SNAPIT
SNAPMEMB EQU   *
         ST    9,SNAPMEMS
         ST    10,SNAPMEME
         OI    SNAPMEME,X'80'          INDICATE DIREC.  AND BUFFER
SNAPIT   EQU   *
         SNAP  DCB=SNAPDCB,ID=1,PDATA=REGS,LIST=SNAPLIST
         CLOSE SNAPDCB
NOSNAP   EQU   *
         LM    9,10,SNAPS9
         LM    14,1,SNAPSAV
         BR    14
         SPACE 2
SNAPSAV  DS    4F
SNAPS9   DS    2F
SNAPLIST DC    A(NAME,NAME+8)
SNAPDIRS DC    A(0)
SNAPDIRE DC    A(0)
SNAPMEMS DC    A(0)
SNAPMEME DC    A(0)
         SPACE
SNAPCNT  DC    PL2'25'                 SET TO ZERO IF PARM=SNAP
SNAPMAX  DC    PL2'25'
         EJECT
READFRST EQU   *
* THIS ROUTINE WILL ISSUE THE INITIAL READ FOR THE FIRST DATA BLOCK
         ST    14,READFS14
         XC    EOFFLAG,EOFFLAG
         L     2,BUFA1
         MVI   TTR+3,X'00'             CLEAR LAST BYTE OF TTR
         MVC   TTR(3),8(3)
         POINT PDSFILE,TTR
         BAL   14,READALL
         BAL   14,READCK
         L     14,READFS14
         BR    14
         SPACE 2
READFS14 DS    F
         EJECT
READNEXT EQU   *
* THIS ROUTINE WILL MOVE THE LAST PORTION OF THE PREVIOUS BLOCK TO THE
* BEGINNING OF THE BUFFER AND THEN ISSUE A READ FOR THE NEXT BLOCK
* AFTER THE LAST PORTION.
* REG 2 MUST CONTAIN THE ADDR OF THE START OF THE UNUSED PORTION.
         ST    14,READNS14             STORE REG 14
         ST    6,READNS6               STORE REG 6
         L     6,BUFEND
         LR    15,2                    ADDR OF LAST PORTION
         SR    6,15                    COMPUTE BYTES IN LAST PORTION
         BCTR  6,0                     SET UP FOR 'EX' INSTRUCTION
         L     2,BUFA1
         EX    6,MOVELAST
         LA    2,1(6,2)                COMPUTE ADDR WHERE NEXT BLOCK
         BAL   14,READALL              GO READ A DATA BLOCK
         BAL   14,READCK
         L     2,BUFA1
         A     6,BUFEND
         LA    6,1(6)                  TRUE END OF BUFFER INCLUDING -
         ST    6,BUFEND                THE LAST PORTION THAT WAS MOVED
         L     6,READNS6               RESTORE REG 6
         L     14,READNS14             RESTORE REG 14
         BR    14                      BRANCH BACK
         SPACE 2
READNS14 DS    F
READNS6  DS    F
MOVELAST MVC   0(0,2),0(15)            MOVE LAST PORTION TO BEG ON BUF
         EJECT
READCK   EQU   *
* THIS ROUTINE WILL CHECK THE DATA BLOCK THAT WAS READ IN.
         SPACE 2
         ST    14,READSV14
         ST    4,READSV4
         LA    4,FLDECB1
READCK0  EQU   *
         CHECK (4)
         USING DECB,4
         L     1,DECIOBPT
         DROP  4
         LA    15,PDSFILE
         USING IHADCB,15
         LH    4,DCBBLKSI
         DROP  15
         USING IOBSTDRD,1
         LH    1,IOBCSW+5              CSW RESIDUAL BYTE COUNT
         DROP  1
         SR    4,1                     REG 4 BYTES READ
         L     15,BUFA1
         AR    15,4
         ST    15,BUFEND
         L     4,READSV4
         L     14,READSV14
         BR    14
         SPACE
READEOD  EQU   *
* WE SHOULD ALWAYS COME HERE BEFORE WE ARE DONE WITH AN ENTRY
         SPACE 2
         OI    EOFFLAG,X'01'           SET FLAG TO EOF
         L     4,READSV4
         LM    14,15,READSV14
         BR    14
         SPACE
READSV14 DS    F
READSV4  DS    F
         EJECT
READALL  EQU   *
* THIS ROUTINE WILL ISSUE A READ FOR THE CURRENT ENTRY
         SPACE
         ST    14,SAVE14
READA0   EQU   *
         READ  FLDECB1,SF,PDSFILE,(2)
         L     14,SAVE14
         BR    14
         SPACE 2
SAVE14   DS    F
BUFA1    DS    F
BUFL1    DS    F
BUFEND   DS    F                       ADDR OF FIRST BYTE PAST END BUF
         SPACE
PDSFILE  DCB   DDNAME=SMPCDS,DSORG=PO,MACRF=R,NCP=10,       *HMD 03/82*X
               BUFNO=0,EODAD=READEOD                        *HMD 03/82*
         EJECT
UNPACK   EQU   *
* THIS ROUTINE UNPACKS THE 6 BYTE CDS DIR ENTRY
* INTO A 8 BYTE NAME FIELD
* THIS WAS OBTAINED FROM HMASMSUB FICHE
         STM   5,10,USAV
         LA    9,1(3)
         LA    10,2                    LOOP1 TWICE
         LA    5,NAME
LOOP1    EQU   *
         ICM   7,14,0(9)
         LA    8,4                     LOOP2 4 TIMES
LOOP2    EQU   *
         SR    6,6                     CLEAR REG 6
         SLDA  6,6                     SHIFT 6 BITS INTO REG 6
         STC   6,0(5)                  STORE INTO NAME FIELD
         LA    5,1(5)                  POINT TO NEXT BYTE IN NAME FIELD
         BCT   8,LOOP2
         LA    9,3(9)                  POINT TO SECOND WORD
         BCT   10,LOOP1
         TR    NAME,TRTABLE            TRANSLATE NAME
         LM    5,10,USAV
         BR    14
         SPACE 2
USAV     DS    6F
NAME     DS    CL8
TRTABLE  DC    CL1' '
         DC    CL1' '
         DC    6CL1' '
         DC    CL1' '
         DC    CL1'$'
         DC    6CL1' '
         DC    5CL1' '
         DC    CL1' '
         DC    CL1'#'
         DC    CL1'`'
         DC    CL1' '
         DC    CL1' '
         DC    CL1' '
         DC    CL1'?'
         DC    CL26'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
         DC    CL10'0123456789'
         EJECT
BINSRCH  EQU   *
* THIS ROUTINE WILL DO A BINARY SEARCH OF OF THE SYSMOD'S BUILT
* IN A TABLE.  IF FOUND THEN THE DATE IS UNPACKED INTO A FIELD
* (ASSUMING THERE IS A VALID PACKED DATE), IF THE SYSMOD IS NOT
* FOUND IN THE TABLE, THEN '*****' IS MOVED INTO THE DATE FIELD.
* THE DATE FIELD IS SUPPLIED IN REG 0, AND THE SYSMOD# ADDR IN REG 15.
* MOST INSTRUCTIONS THAT ARE USED IN THE LOOPS ARE SET UP AS RR.
         USING TBSYSM,15
         STM   3,10,BINSAV3            SAVE REGESTERS
         LA    3,0                     LOWER LIMIT OF TABLE
         L     4,SYSMCNT               UPPER LIMIT OF TABLE
         LR    5,4
         SRL   5,1                     FIND MIDDLE OF TABLE
         LA    7,BINCK
         LA    9,BINLOW
         LA    10,BINHIGH
         L     8,TABSYSM
BINCK    EQU   *
         LR    6,5
         MH    6,=AL2(TBSYSMLN)        MULTIPLY BY ENTRY LENGTH
         AR    6,8                     ADD BEG OF SYSM TABLE (REG 8)
         CLC   TBSYSME,0(6)            COMPARE SYSMOD#
         BLR   9                       BRANCH TO BINLOW
         BHR   10                      BRANCH TO BINHIGH
         BE    BINFND
         SPACE 2
BINHIGH  EQU   *
         CR    3,4
         BNL   BINNOT                  SYSMOD# NOT IN TABLE
         LR    6,4                     LOAD REG 15 WITH UPPER LIMIT
         SR    6,5                     COMPUTE DIFFERENCE
         SRL   6,1                     DIVIDE BY 2
         LA    3,1(5)                  NEW LOWER LIMIT = OLD BASE + 1
         LR    5,4                     COMPUTE NEW BASE =
         SR    5,6                     UPPER LIMIT-(DIFF/2)
         BR    7                       BRANCH TO BINCK
         SPACE 2
BINLOW   EQU   *
         CR    3,4
         BNL   BINNOT                  SYSMOD# NOT IN TABLE
         LR    6,5                     LOAD BASE
         SR    6,3                     SUBTRACT LOWER LIMIT
         LR    4,5                     SET NEW UPPER LIMIT AS
         BCTR  4,0                     THE OLD BASE - 1
         SRL   6,1                     DIVIDE BY 2
         LA    5,0(3,6)                NEW BASE = LOW LIMIT+(DIFF/2)
         BR    7                       BRANCH TO BINCK
         SPACE 2
BINFND   EQU   *
         MVC   0(5,1),=5CL1' '         CLEAR FIELD WITH SPACES
         TM    9(6),X'0F'              VALID DATE
         BNO   BINRET
         UNPK  0(5,1),7(3,6)           UNPACK DATE
         SPACE 2
BINRET   EQU   *
         LM    3,10,BINSAV3
         BR    14
         SPACE 2
BINNOT   EQU   *
         MVC   0(5,1),=5CL1'*'
         B     BINRET
         SPACE 2
BINSAV3  DS    8F
         SPACE 2
         DROP  15
         EJECT
PRINT    EQU   *
* ALL PRINTING FOR THE SYSPRINT DCB IS DONE IN THIS ROUTINE.
* THE VALUE OF 'LINES' CAN BE CHANGED TO CONTROL PAGE BREAKS.
* 'TITLE' IS A OFFSET TO WHICH SECONDARY TITLE LINE TO PRINT
* IT WILL BE EITHER +133 FOR THE MOD TITLE LINE AND +266 FOR SYSMOD
* TITLE LINE.
         ST    14,PRSAVE
         CP    LINES,PAGEBRK
         BL    PRI
         AP    PAGE,=P'1'
         LA    9,133(5)
         MVC   125(3,9),=X'202120'
         ED    124(4,9),PAGE
         PUT   SYSPRINT,(9)
         AH    9,TITLE                 POINT TO SECONDARY TITLE LINE
         PUT   SYSPRINT,(9)
         ZAP   LINES,=PL1'4'
         MVI   0(5),C'0'               SKIP A LINE AFTER TITLE
PRI      EQU   *
         PUT   SYSPRINT,(5)
         MVI   0(5),X'40'
         MVC   1(132,5),0(5)           CLEAR ENTIRE PRINT LINE
         AP    LINES,=PL1'1'           INCREMENT LINE COUNT
         L     14,PRSAVE
         BR    14
PRSAVE   DS    F
TITLE    DS    H
SYSTITLE DC    H'266'                  OFFSET TO SYSMOD TITLE LINE
MTITLE   DC    H'133'                  OFFSET TO MOD/MAC TITLE LINE
         EJECT
EXCPINIT EQU   *
* THIS ROUTINE IS FOR OVERLAP EXCP PROCESSING USING 2 TRACKS.
         ST    14,EXISV14              SAVE REG 14
         STM   3,5,EXISV               SAVE REG 3-5
         L     3,EXCPBUF2
         LH    4,DEVCHAR+2             BLOCKS/TRACK
         LA    5,READCCW               ADDR OF FIRST READ CCW
EXCPINI0 EQU   *
         STCM  3,B'0111',1(5)          INSERT BUFFER ADDR IN CCW
         LA    3,256(3)                INCREMENT TO NEXT BUFFER
         LA    5,8(5)                  POINT TO NEXT CCW
         BCT   4,EXCPINI0              LOOP FOR ALL CCW'S
         L     15,DEBDADDR
         MVC   IXBSEEK+3(4),6(15)      SEEK ADDRESS CCHH
         CLC   10(2,15),6(15)          MORE THAN 1 CYL
         BH    EXCPINI1                YES - OK
         CLC   12(2,15),DEVCHAR        END OF EXTENT AT END OF A CYL
         BE    EXCPINI1
         MVI   SEEKSRCH,X'69'          NO MULTI-TRK SEARCHING
EXCPINI1 XC    EXCPECB,EXCPECB         CLEAR ECB
         EXCP  IXB
         WAIT  ECB=EXCPECB
         CLI   IXBCSW+3,X'0C'          LOOK AT COMPLETION
         BE    EXCPINI2                GOOD ?
         CLI   IXBCSW+3,X'02'          INVALID SEEK
         BE    EXCPERR
         BAL   14,FINDCYL              FIND NEXT CYL TO SEARCH
         B     EXCPINI1
EXCPINI2 EQU   *
         LA    3,SEEKREAD
         STCM  3,B'0111',IXBSTART      POINT TO CCW
         MVC   IXBSEEK+3(4),HOMEADDR+1 MOVE CCHH FROM READ-HOME-ADDR
         XC    EXCPECB,EXCPECB
         EXCP  IXB
         LM    3,5,EXISV
         L     14,EXISV14
         BR    14
         EJECT
GETDIR   EQU   *
         ST    14,EXISV14              STORE REG 14
         LH    2,EXCPBLNO              LOAD EXCP BLOCK NUMBER
         LA    2,1(2)                  INCREMENT BLOCK NUMBER
         CH    2,DEVCHAR+2             IS IT GREATER THAN MAX BL/TRK
         BH    EXCPALL                 YES - GO GET ANOTHER TRACK
         STH   2,EXCPBLNO              STORE BLOCK NUMBER
         BCTR  2,0                     MAKE IT RELATIVE TO 0
         SLL   2,8                     MULTIPLY BY 256
         A     2,EXCPBUF1              BUFFER 1 ADDRESS
         L     14,EXISV14              RESTORE REG 14
         BR    14
         EJECT
EXCPALL  EQU   *
         STM   3,5,EXISV               STORE REGS
         WAIT  ECB=EXCPECB
         CLI   IXBCSW+3,X'0D'          LOOK AT COMPLETION
         BE    EXCPALL1
         CLI   IXBCSW+3,X'0C'          LOOK AT COMPLETION
         BNE   EXCPERR                 UNKNOWN ERROR - SNAP AND QUIT
EXCPALL1 L     3,EXCPBUF1
         LH    4,DEVCHAR+2
         LA    5,READCCW
EXCPALL2 EQU   *
         STCM  3,B'0111',1(5)          STORE BUF ADDR IN CCW
         LA    3,256(3)                POINT TO NEXT BUF
         LA    5,8(5)                  POINT TO NEXT CCW
         BCT   4,EXCPALL2              LOOP FOR NUMBER DIR-BL/TRK
         BAL   14,FINDTRK              FIND NEXT TRACK TO READ
         XC    EXCPECB,EXCPECB
         EXCP  IXB
         XC    EXCPBUF1,EXCPBUF2
         XC    EXCPBUF2,EXCPBUF1
         XC    EXCPBUF1,EXCPBUF2
         L     2,EXCPBUF1
         LA    3,1
         STH   3,EXCPBLNO
         LM    3,5,EXISV
         L     14,EXISV14
         BR    14
         EJECT
FINDCYL  EQU   *
         SR    3,3
         LH    15,EXTENTNO
         SLL   15,3
         A     15,DEBDADDR
         CLI   SEEKSRCH,X'E9'          MULTI-TRK SEARCHING
         BE    FINDCYL0                YES
         ICM   3,B'0011',IXBSEEK+5     GET HH FROM CCHH
         LA    3,1(3)
         CH    3,12(15)
         BH    FINDCYL1
         STCM  3,B'0011',IXBSEEK+5
         BR    14
FINDCYL0 EQU   *
         ICM   3,B'0011',IXBSEEK+3     GET CC FROM CCHH
         LA    3,1(3)                  NEXT CYLINDER
         CH    3,10(15)                END OF EXTENT CC
         BH    FINDCYL1
         STCM  3,B'0011',IXBSEEK+3     PUT CC BACK IN CCHH
         XC    IXBSEEK+5(2),IXBSEEK+5  ZERO OUT HH IN CCHH
         BR    14
FINDCYL1 LH    15,EXTENTNO
         LA    15,1(15)
         CH    15,EXTENTS
         BH    EXCPERR
         STH   15,EXTENTNO
         SLL   15,3
         A     15,DEBDADDR
         MVC   IXBSEEK+3(4),6(15)
         MVI   SEEKSRCH,X'E9'          MULTI-TRK SEARCHING
         CLC   10(2,15),6(15)
         BHR   14
         CLC   12(2,15),DEVCHAR
         BER   14
         MVI   SEEKSRCH,X'69'          NO MULTI-TRK SEARCHING
         BR    14
         EJECT
FINDTRK  EQU   *
         LH    15,EXTENTNO
         SLL   15,3                    MULTIPLY BY 8
         A     15,DEBDADDR
         SR    3,3
         ICM   3,B'0011',IXBSEEK+3     SEEK CC FROM CCHH
         CH    3,10(15)                COMPARE CC IN EXTENT
         BL    FINDTRK0
* THE CC IS ON THE LAST CC IN THIS EXTENT
         SR    3,3
         ICM   3,B'0011',IXBSEEK+5
         LA    3,1(3)                  INCREMENT HH IN CCHH
         CH    3,DEVCHAR               COMPARE HH TO TRK/CYL FOR DEV
         BH    FINDTRK1                LOOK AT THE NEXT CYL
         CH    3,12(15)                COMPARE HH IN EXTENT
         BH    FINDTRK1                LOOK AT THE NEXT CYL
         STCM  3,B'0011',IXBSEEK+5
         BR    14
FINDTRK0 EQU   *
         SR    3,3
         ICM   3,B'0011',IXBSEEK+5
         LA    3,1(3)                  INCREMENT HH IN CCHH
         CH    3,DEVCHAR               COMPARE TO TRK/CYL FOR DEV
         BH    FINDTRK1                LOOK AT THE NEXT CYL
         STCM  3,B'0011',IXBSEEK+5
         BR    14
FINDTRK1 EQU   *
         SR    3,3
         ICM   3,B'0011',IXBSEEK+3     INSERT CC FROM SEEK CCHH
         LA    3,1(3)                  INCREMENT CC BY 1
         LH    15,EXTENTNO
         SLL   15,3                    MULTIPLY BY 8
         A     15,DEBDADDR
         CH    3,10(15)                COMPARE CC IN EXTENT
         BH    FINDTRK2                LOOK AT THE NEXT EXTENT
         STCM  3,B'0011',IXBSEEK+3
         XC    IXBSEEK+5(2),IXBSEEK+5  ZERO OUT HH FROM CCHH
         BR    14
FINDTRK2 EQU   *
         LH    15,EXTENTNO
         LA    15,1(15)
         CH    15,EXTENTS
         BH    EXCPERR
         STH   15,EXTENTNO
         SLL   15,3
         A     15,DEBDADDR
         MVC   IXBSEEK+3(4),6(15)
         BR    14
         EJECT
EXCPBUF1 DS    F
EXCPBUF2 DS    F
EXCPECB  DS    F
DEVCHAR  DS    XL4
IXB      DS    0XL40
IXBFLAG1 DC    B'01000010'
IXBFLAG2 DC    B'00010000'
IXBSENS0 DC    X'00'
IXBSENS1 DC    X'00'
IXBECB   DC    X'00',AL3(EXCPECB)
IXBFLAG3 DC    X'00'
IXBCSW   DC    7XL1'00'
IXBSIOCC DC    X'00'
IXBSTART DC    AL3(SEEKINIT)
         DC    X'00'
IXBDCBPT DC    AL3(PDSDCB)
IXBRESTR DC    4XL1'00'
IXBINCAM DC    2XL1'00'
         DC    2XL1'00'
IXBSEEK  DC    8XL1'00'
         EJECT
SEEKINIT CCW   X'0B',IXBSEEK+1,B'01000000',6 SEEK
         CCW   X'1A',HOMEADDR,B'01000000',5  READ HOME ADDR
SEEKSRCH CCW   X'E9',SRCHKEY,B'01000000',8   SEARCH KEY EQ OR HIGH
         CCW   X'08',*-8,B'01000000',5       TIC
         CCW   X'1A',HOMEADDR,B'00000000',5  READ HOME ADDR
         EJECT
SEEKREAD CCW   X'0B',IXBSEEK+1,B'01000000',6 SEEK
READCCW  CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         CCW   X'06',0,B'01100000',256       READ
         EJECT
PDSDCB   DCB   DDNAME=SMPCDS,DSORG=PS,MACRF=E
         EJECT                                              *HMD 03/82*
DEVTYPE  DS    X
DEVTBL   EQU   *-X'09'                                      *HMD 03/82*
         DC    AL1(DEV3330-DEVICES+1)        09 3330 MOD 1  *HMD 03/82*
         DC    AL1(0)                        0A ????        *HMD 03/82*
         DC    AL1(DEV3350-DEVICES+1)        0B 3350 NATIVE *HMD 03/82*
         DC    AL1(0)                        0C ????        *HMD 03/82*
         DC    AL1(DEV3330-DEVICES+1)        0D 3330-11     *HMD 03/82*
         DC    AL1(DEV3380-DEVICES+1)        0E 3380        *HMD 03/82*
DEVICES  DS    0XL6
DEV3350  DC    AL2(29),AL2(36)               TRK/CYL-1  DIR-BL/TRK
DEV3330  DC    AL2(18),AL2(28)               TRK/CYL-1  DIR-BL/TRK
DEV3380  DC    AL2(14),AL2(48)               TRK/CYL-1  DIR-BL/TRK
HOMEADDR DS    XL5
EXCPBLNO DC    H'999'
EXTENTS  DS    H                             RELATIVE TO ZERO
EXTENTNO DC    H'0'
SRCHKEY  DC    AL1(CDSPTF),7XL1'00'
EXCPBFLN DS    F
EXCPBFAD DS    F
DEBDADDR DS    F
EXISV14  DS    F
EXISV    DS    3F
         EJECT
SETHEAD  EQU   *
* ONE PAGE OF HEADERS IS SET UP.
* FIRST THE VOL=SER, THEN THE DATE, AND NEXT 'CDS LIST'.
* WE WILL BAL TO HEADER TO FORMAT EACH HEADER GROUP (12 LINES).
         ST    14,SETSV14
         LA    1,24(5)
         ST    1,PARMBUF
         MVC   HEADING(6),VOLSER
         MVI   HEADCCNT+3,X'06'        CHAR COUNT
         MVI   0(5),C'1'               CARRIAGE CONTROL
         LINEPRT
         MVI   0(5),C'-'
         BAL   14,HEADER
         SR    2,2
         TRT   DAYWEEK(1),DAYTBL
         LA    1,DAYS(2)
         BCTR  1,0
         SR    14,14
         IC    14,0(1)
         ST    14,HEADCCNT
         LA    15,9
         SR    15,14
         BCTR  14,0
         EX    14,MVCHEAD
         MH    15,=H'7'
         LA    1,3(5,15)
         ST    1,PARMBUF
         MVI   0(5),C'-'
         BAL   14,HEADER
         LA    1,10(5)
         ST    1,PARMBUF
         MVC   HEADING(2),UNPKDATE+1
         MVI   HEADING+2,X'40'
         MVC   HEADING+3(2),UNPKDATE+3
         MVI   HEADING+5,X'40'
         MVC   HEADING+6(2),UNPKDATE+5
         MVI   0(5),C'-'
         MVI   HEADCCNT+3,X'08'
         BAL   14,HEADER
         MVI   0(5),C'-'
         SR    14,14                   CLEAR REG 14
         IC    14,TITLCNT              GET CHAR COUNT OF TITLE
         LA    15,9
         SR    15,14
         MH    15,=H'7'
         ST    14,HEADCCNT
         BCTR  14,0
         LA    1,TITL-1
         EX    14,MVCHEAD
         LA    1,3(5,15)
         ST    1,PARMBUF
         BAL   14,HEADER
         L     14,SETSV14
         BR    14
         SPACE 2
SETSV14  DS    F
MVCHEAD  MVC   HEADING(0),1(1)
         EJECT
HEADER   EQU   *
* SET UP THE PARMLIST AND BALR TO IEFSD095.
* IEFSD095 PRINTS OUT 1 LINE OF A HEADER GROUP EACH TIME IT IS CALLED.
* IT MUST BE CALLED 12 TIMES FOR EACH HEADER GROUP.
         ST    14,HEADSV14
         STM   2,4,HEADSV2
         LA    2,1
         LR    4,2
         LA    3,12
HEAD0    EQU   *
         L     15,HEADADDR
         LA    1,PARMLIST
         ST    4,HEADHCNT
         BALR  14,15
         LINEPRT
         BXLE  4,2,HEAD0
         L     14,HEADSV14
         LM    2,4,HEADSV2
         BR    14
         SPACE 2
HEADSV14 DS    F
HEADSV2  DS    3F
HEADADDR DC    V(IEFSD095)
PARMLIST DC    A(HEADING)
         DC    A(HEADHCNT)
PARMBUF  DC    A(0)
         DC    A(HEADCCNT)
HEADING  DS    CL8
DATE     DS    CL4
UNPKDATE DS    CL7
VOLSER   DS    CL6
TITLCNT  DC    X'08'
DAYWEEK  DS    C
TITL     DC    CL8'CDS LIST'
HEADHCNT DS    F
HEADCCNT DC    F'0'
         EJECT
EXCPERR  EQU   *
         WTO   'P8CDS2I ERROR IN EXCP PROCESSING THE SMPCDS DIRECTORY',X
               ROUTCDE=(2,11),DESC=(4,6)                    *HMD 03/82*
         OPEN  (SNAPDCB,(OUTPUT))
         LA    10,SNAPDCB
         USING IHADCB,10
         TM    DCBOFLGS,X'10'
         DROP  10
         BZ    BADRC
         SNAP  DCB=SNAPDCB,ID=2,STORAGE=(IXB,IXBSEEK+7)
         CLOSE SNAPDCB
         B     BADRC
NOSTOR   EQU   *
         WTO   'P8CDS2I NO STORAGE AVAILABLE FOR GETMAIN',  *HMD 03/82*X
               ROUTCDE=(2,11),DESC=(4,6)                    *HMD 03/82*
         B     BADRC
SYSMSTOR EQU   *
         WTO   'P8CDS3I SYSMOD TABLE GETMAIN STORAGE EXCEEDED'         X
               ROUTCDE=(2,11),DESC=(4,6)                    *HMD 03/82*
         L     15,TABSYSM+4
         L     14,SYSMLN+4
         CVD   14,DBLWORD              STORAGE REQUESTED
         MVC   WTO1+38(7),=XL7'20202020202120'              *HMD 03/82*
         ED    WTO1+37(8),DBLWORD+4                         *HMD 03/82*
         CVD   15,DBLWORD              STORAGE OBTAINED     *HMD 03/82*
         MVC   WTO1+66(7),=XL7'20202020202120'              *HMD 03/82*
         ED    WTO1+65(8),DBLWORD+4                         *HMD 03/82*
WTO1     WTO   'P8CDS9I STORAGE REQUESTED WAS 0000000 BYTES, OBTAINED WX
               AS 0000000 BYTES',ROUTCDE=(2,11),DESC=(4,6)  *HMD 03/82*
BADRC    L     1,4(13)
         MVC   16(4,1),=F'8'                                *HMD 03/82*
         B     EOJ
         EJECT
* BLOCKSIZE REMOVE FROM BELOW DCB                           *HMD 03/82*
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,RECFM=FBA,LRECL=133
         EJECT
SNAPDCB  DCB   DDNAME=SNAPPRT,DSORG=PS,MACRF=W,BLKSIZE=882,            X
               RECFM=VBA,LRECL=125
         EJECT
WORD     DS    F
TABNEXT  DS    F                       ADDR OF NEXT AVAILABLE ENTRY
PAGE     DC    PL2'0'
TTR      DS    F
DBLWORD  DS    D
EOFFLAG  DS    X
PARMFLD  DC    CL9'000000000'
MVCPARM  MVC   0(0,5),0(15)
MVCTITLE MVC   TITL(0),6(3)
LENGTH   DC    A(52000)                                     *HMD 03/82*
         DC    A(1000000)                                   *HMD 03/82*
SYSMLN   DC    A(50000)                                     *HMD 03/82*
         DC    A(1000000)                                   *HMD 03/82*
TABSYSM  DS    2F
SYSMCNT  DC    F'0'
MAXSYSMC DS    F
LINES    DC    PL2'0'
PAGEBRK  DC    PL2'&LINCNT'
LINEFLAG DC    X'00'
SYSMFLAG DS    X
PARMFLAG DC    X'00'
TYPE     DC    C'SUP ',C'USER',C'APAR',C'PTF ',C'FUNC'
LALIAS   DC    CL7'MALIAS-'            EITHER MALIAS OR TALIAS
LMOD     DC    CL7'GENASM-'            EITHER GENASM OR LMOD
         LTORG
         EJECT
TRTTABL  DC    256X'00'
         SPACE 2
* THE FOLLOWING WILL SET UP THE TRTTABL SO THAT EACH SUBENTRY CODE HAS
* A CORRESPONDING  7 BYTE ENTRY AND WHEN WE DO A TRT, WE WILL GET THE
* ADDRESS OF THE 7 BYTE ENTRY +1.
SENTRIES EQU   *                       DO NOT INSERT ANYTHING BETWEEN
         SUBENTRY 01,'    MOD'         SENTRIES AND THE FIRST SUBENTRY
         SUBENTRY 02,'   SZAP'
         SUBENTRY 03,'   XZAP'
         SUBENTRY 04,'    MAC'
         SUBENTRY 05,' MACUPD'
         SUBENTRY 06,'    SRC'
         SUBENTRY 07,' SRCUPD'
         SUBENTRY 08,'  ASSEM'
         SUBENTRY 51,'   RMOD'
         SUBENTRY 52,'  RSZAP'
         SUBENTRY 53,'  RXZAP'
         SUBENTRY 54,'   RMAC'
         SUBENTRY 55,'RMACUPD'
         SUBENTRY 56,'   RSRC'
         SUBENTRY 57,'RSRCUPD'
         SUBENTRY A1,' **A1**'
         SUBENTRY A2,'    PRE'
         SUBENTRY A3,'   NPRE'
         SUBENTRY A4,' SUPING'
         SUBENTRY A5,'    REQ'
         SUBENTRY A6,'  IFREQ'
         SUBENTRY A7,' **A7**'
         SUBENTRY A8,' DELETE'
         SUBENTRY A9,'   VERS'
         SUBENTRY AA,'  SUPBY'
         SUBENTRY AB,'   FESN'
         EJECT
DAYTBL   DC    7X'00'
         ORG   DAYTBL+X'01'
         DC    AL1(MONDAY-MONDAY+1)
         ORG   DAYTBL+X'02'
         DC    AL1(TUESDAY-MONDAY+1)
         ORG   DAYTBL+X'03'
         DC    AL1(WEDNSDAY-MONDAY+1)
         ORG   DAYTBL+X'04'
         DC    AL1(THURSDAY-MONDAY+1)
         ORG   DAYTBL+X'05'
         DC    AL1(FRIDAY-MONDAY+1)
         ORG   DAYTBL+X'06'
         DC    AL1(SATURDAY-MONDAY+1)
         ORG   DAYTBL+X'00'
         DC    AL1(SUNDAY-MONDAY+1)
         ORG
         SPACE 2
* THE LENGTH OF EACH DAY-OF-WEEK IS FOR CENTERING
DAYS     DS    0X
MONDAY   DC    AL1(LMON),C'MONDAY'
LMON     EQU   *-MONDAY-1
TUESDAY  DC    AL1(LTUE),C'TUESDAY'
LTUE     EQU   *-TUESDAY-1
WEDNSDAY DC    AL1(LWED),C'WEDNESDAY'
LWED     EQU   *-WEDNSDAY-1
THURSDAY DC    AL1(LTHU),C'THURSDAY'
LTHU     EQU   *-THURSDAY-1
FRIDAY   DC    AL1(LFRI),C'FRIDAY'
LFRI     EQU   *-FRIDAY-1
SATURDAY DC    AL1(LSAT),C'SATURDAY'
LSAT     EQU   *-SATURDAY-1
SUNDAY   DC    AL1(LSUN),C'SUNDAY'
LSUN     EQU   *-SUNDAY-1
         EJECT
DATES    DS    0H
* THIS ROUTINE WILL CONVERT THE DATE YYDDD TO THE MMDDYY.
* ALSO IT WILL PICK UP THE DAY-OF-THE-WEEK IN THE FIRST 4 BITS
* OF REG 1.  0=SUNDAY....6=SATURDAY
         STM   2,14,DATESV         SAVE REG
         LR    8,0                 SAVE INPUT OPERATION INDICATOR
         LR    9,1                 SAVE INPUT DATA
         USING NOLEAP,10           ESTABLISH TABLE ADDRESSIBILITY
         ST    9,FULLST            DO NOT USE FULLST FOR TEMP STORAGE.
         OI    FULLST+3,X'0F'      FORCE A PLUS SIGN
         C     8,FWORD3            IS INDICATOR LESS THAN 4
         BH    ERROR               NO,ERROR
         STC   8,INDCTOR
         EJECT
***********************************************************************
*                                                                     *
*                        YYDDD TO MMDDYY                              *
*                                                                     *
***********************************************************************
         SPACE 3
         UNPK  YYDDD,FULLST+1(3)
         BAL   5,GOODYEAR          BRANCH TO SEE IF YEAR IS VALID
         CLC   DDD,=C'000'         IS DDD EQUAL TO ZERO
         BE    ERROR               YES
         CLC   DDD,MAXDDD          IS DDD EQUAL OR LESS THAN 365 OR 366
         BH    ERROR               NO,IT IS HIGH,ERROR
         CLI   DDD+1,X'F9'         IS SECOND D MORE THAN 9
         BH    ERROR               YES,ERROR
         CLI   DDD+2,X'F9'         IS THIRD D MORE THAN 9
         BH    ERROR               YES,ERROR
DLOOP    CLC   TABDDD,DDD          IS INPUT(DDD) LESS,EQUAL TO TABLEDDD
         BNL   RIGHTMM             YES,MM FOUND
         LA    10,7(10)            BUMP TABLE POINTER
         CLI   TABMM,X'FF'         IS IT END OF TABLE
         BNE   DLOOP               NO,TRY NEXT ENTRY
         B     ERROR               YES,ERROR
RIGHTMM  MVC   MM,TABMM            MOVE MM INTO OUTPUT
         PACK  FULLST(2),DDDSUB
         SP    FULLST+2(2),FULLST(2)  SUB CUMULATIVE NO DAYS IN PREVIOUS
                                      MONTHS OF YEAR
         UNPK  DD,FULLST+2(2)      MOVES DD INTO OUTPUT
         PACK  FULLST,MMDDYY+1(6)
         B     DOWRTN              GO TO DAY OF WEEK ROUTINE
         EJECT
***********************************************************************
*                                                                     *
*                  CHECK FOR VALID YY AND FOR LEAP YEAR               *
*                                                                     *
***********************************************************************
         SPACE 3
GOODYEAR CLI   YY,C'9'             IS DECADE OVER 9
         BH    ERROR               YES
         CLI   YY+1,C'9'           IS YEAR OVER 9
         BH    ERROR               YES
         PACK  DIV,YY              MOVE YY INTO DIVIDEND FIELD
         DP    DIV,FOUR            TEST FOR LEAP YEAR
         CP    DIV+2(1),ZERO       IS REMAINDER EQUAL TO ZERO
         BH    REGYEAR             NO, NOT A LEAP YEAR
         LA    10,LEAPTBL          LOAD LEAP YEAR TABLE INTO R10
         BR    5                   GO BACK
REGYEAR  LA    10,LEAPTBL          LOAD NON LEAP YR TABLE INTO R10
         LA    10,91(10)
         BR    5                   GO BACK
DOWRTN   TM    INDCTOR,X'02'       IS INDCTOR 2 OR 3,(0010,0011)=DOW
         BZ    RETURN              NO,GO BACK
         PACK  DWORD,YY            PACK YY INTO DOUBLEWORD FIELD
         CVB   9,DWORD             CONVRT TO BINARY,PUT IN ODD REGISTER
         BCTR  9,0                 SUBTRACT 1 FROM ODD REGISTER(YY)
         LTR   9,9                 IS ODD REGISTER LESS THAN ZERO
         BC    10,MULT             NO,EQUAL OR GREATER,BRANCH
         LA    9,99                YES,PUT 99 IN YY,MUST BE YR 2000
MULT     M     8,=F'1461'          X ODD REG BY 365.25/100,FACTOR1461/4
         SRL   9,2                 DIVIDE(BINARY)BY 4,BY SHIFT LEFT
         PACK  DWORD,DDD           PACK DDD INTO DOUBLEWORD FIELD
         CVB   8,DWORD             CONVERT BINARY,PUT IN EVEN REGISTER
         LA    9,1(8,9)            PUT ODD REG+EVEN REG+1 INTO ODD REG
         SR    8,8                 ZERO EVEN REGISTER
         LA    1,7                 LOAD DIVISOR OF 7 INTO REG 1
         DR    8,1                 DIVIDE EVEN,ODD PAIR BY SEVEN
         SLL   8,4                 SHIFT REMAINDER INTO HIGH ORDER BYTE
         STC   8,DAYOWEEK          ALIGN REMAINDER TO BE ORED
         OC    FULLST(1),DAYOWEEK  PUT REMAINDER IN HIGH ORDER BYTE
         B     RETURN              BRANCH TO SET CONDITION CODE,AN EXIT
ERROR    SR    8,8                 ZERO REGISTER 8
         LA    9,16                PUT ERROR CONDITION CODE(16) IN R9
         DC    H'0'
RETURN   SR    9,9                 PUT GOOD CONDITION CODE(0) IN R9
         L     8,FULLST            PUT OUTPUT DATE IN REGISTER
BRANCH   EQU   *
         LR    1,8                 PUT OUTPUT DATE BACK IN R1
         LR    15,9                PUT CONDITION CODE BACK IN R15
         LM    2,14,DATESV         RESTORE REG
         BR    14                  RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*                  CONSTANTS AND MISC OTHER ITEMS                     *
*                                                                     *
***********************************************************************
         SPACE 3
DATESV   DS    13F
FWORD3   DC    F'3'
FOUR     DC    PL1'4'
ZERO     DC    PL1'0'
ENABLE   DC    X'FF'
DWORD    DS    D
FULLST   DS    F
INDCTOR  DC    XL1'FF'
MMDDYY   DS    0CL7               0MMDDYY
DOW      DS    CL1                W
MM       DS    CL2                 MM
DD       DS    CL2                   DD
YYDDD    DS    0CL5                    YYDDD
YY       DS    CL2                     YY
DDD      DS    CL3                       DDD
GREGDD   DC    PL2'0'
JULDDD   DC    PL2'0'
DAYOWEEK DS    PL1'0'
DIV      DC    PL3'0'
         LTORG
LEAPTBL  DC    C'0131000'
         DC    C'0229031'
         DC    C'0331060'
         DC    C'0430091'
         DC    C'0531121'
         DC    C'0630152'
         DC    C'0731182'
         DC    C'0831213'
         DC    C'0930244'
         DC    C'1031274'
         DC    C'1130305'
         DC    C'1231335'
         DC    X'FFFF',C'00366'
NONLEAP  EQU   *
NOLEAP   DS    0CL91
TABMM    DC    CL2'01'
TABDDMAX DC    CL2'31'
DDDSUB   DC    CL3'000'
         DC    C'0228'
TABDDD   DC    C'031'
         DC    C'0331059'
         DC    C'0430090'
         DC    C'0531120'
         DC    C'0630151'
         DC    C'0731181'
         DC    C'0831212'
         DC    C'0930243'
         DC    C'1031273'
         DC    C'1130304'
         DC    C'1231334'
         DC    X'FFFF'
         DC    C'00'
MAXDDD   DC    C'365'
         EJECT
PRLINE   DSECT
LINECC   DS    C
LINEMOD  DS    CL8
         DS    CL2
LINEFMID DS    CL7
         DS    CL2
LINERMID DS    CL7
         DS    CL2
LINERDTE DS    CL5
         DS    CL2
LINELIB  DS    CL8
         DS    CL2
LNEENTY1 DS    CL18
         DS    CL2
LNEENTYL EQU   *-LNEENTY1
LNEENTY2 DS    CL18
         DS    CL2
LNEENTY3 DS    CL18
         SPACE 2
PTFLINE  DSECT
PLCC     DS    C
PLSYSM   DS    CL7
         DS    C
PLTYPE   DS    CL4
         DS    C
PLAPP    DS    CL3
         ORG   PLAPP
PLGEN    DS    CL3
         ORG
         DS    C
PLERR    DS    CL3
         DS    C
PLACC    DS    CL3
         ORG   PLACC
PLRES    DS    CL3
         ORG
         DS    C
PLFMID   DS    CL7
         DS    C
PLDATE   DS    CL5
         DS    C
PLLSUP   DS    CL7
         DS    CL2
PLENTRY1 DS    CL16
         DS    CL1
PLENTL   EQU   *-PLENTRY1
PLENTRY2 DS    CL16
         DS    CL1
PLENTRY3 DS    CL16
         DS    CL1
PLENTRY4 DS    CL16
         DS    CL1
PLENTRY5 DS    CL16
         SPACE
ENTRY    DSECT                         MAP OUT ONE OF THE PLENTRY1-5
ENTTYPE  DS    CL7
ENTDASH  DS    C
ENTNAME  DS    CL8
         EJECT
TBSYSM   DSECT
TBSYSME  DS    CL7
TBSYSMD  DS    PL3
TBSYSMLN EQU   *-TBSYSM
         EJECT
IOPPTFNT DSECT
         ORG   IOPPTFNT+13
IOPPTYPE DS    X
IOPPUSER EQU   X'01'
IOPPAPAR EQU   X'02'
IOPPPTF  EQU   X'03'
IOPPFUNC EQU   X'04'
         ORG   IOPPTFNT+14
IOPPTFF1 DS    B
IOPAPP   EQU   X'80'
IOPRES   EQU   X'40'
IOPACC   EQU   X'20'
IOPERROR EQU   X'10'
IOPDUMMP EQU   X'04'
IOPREGEN EQU   X'01'
         ORG   IOPPTFNT+25
IOPSBYNO DS    CL7
         EJECT
         DCBD  DSORG=BS,DEVD=DA
         EJECT
         IEZDEB
         EJECT
         IHADECB
         EJECT
UCB      DSECT                                              *HMD 03/82*
         IEFUCBOB  LIST=YES                                 *HMD 03/82*
         EJECT
         IEZIOB
         END   P8CDSLST
