         TITLE 'DYNAMIC STEPLIB COMMAND PROCESSOR AND TERMINAL MONITOR X
               PROGRAM INTERFACE  -- MVS VERSION'                   3.0
         PRINT NOGEN
         IKJCPPL
         IKJECT
         IKJPPL
PPLL     EQU   *-PPL
         IKJDAPL
DAPLL    EQU   *-DAPL
         IKJDAP08
DAPB08L  EQU   *-DAPB08
         IKJDAP0C
DA0CDDN  DS    16CL8
DAPB0CL  EQU   *-DAPB0C
         IKJDAP10
DAPB10L  EQU   *-DAPB10
         IKJDAP18
DAPB18L  EQU   *-DAPB18
         IKJTCB
         CVT   DSECT=YES
         PRINT NOGEN
         IEZJSCB
         IHAPSA                                                     3.0
         IHAASCB                                                    3.0
         IHAASXB                                                    3.0
         DCBD  DSORG=PO,DEVD=DA
         EJECT
*
*
*        DEVELOPER
*
*              PETER H. HAAS
*              SENIOR SYSTEMS PROGRAMMER
*              DART INDUSTRIES, INCORPORATED
*              LOS ANGELES, CALIFORNIA
*
*              TELEPHONE (213) 877-5667
*              EXTENSION 266
*
*
*        FUNCTION
*
*              PROVIDE THE TSO TERMINAL USER WITH THE CAPABILITY
*              OF DYNAMICALLY DEFINING A STEP LIBRARY.
*
*
*        STEPLIB COMMAND
*
*              THE STEPLIB COMMAND MAY BE ISSUED WITH OR WITHOUT
*              A POSITIONAL PARAMETER WHICH SPECIFIES A DATASET
*              OR LIST OF DATASETS TO BE ALLOCATED TO THE DYNAMIC
*              STEP LIBRARY.
*
*              IF THE STEPLIB COMMAND IS ISSUED WITH A POSITIONAL
*              PARAMETER, ANY EXISTING DYNAMIC STEPLIB DATASETS ARE
*              CLOSED AND DEALLOCATED AND THE SPECIFIED DATASETS
*              ARE ALLOCATED AND OPENED.
*
*              IF THE STEPLIB COMMAND IS ISSUED WITHOUT A POSITIONAL
*              PARAMETER, ANY EXISTING DYNAMIC STEPLIB DATASETS ARE
*              CLOSED AND DEALLOCATED.  IF A STEPLIB DATASET WAS
*              SPECIFIED IN THE TSO USER LOGON PROCEDURE, THAT DATASET
*              IS REINSTATED AS A STEP LIBRARY.
*
*              DATASET NAMES NOT IN QUOTES WILL BE PREFIXED WITH
*              THE USERID AND QUALIFIED WITH THE NAME 'LOAD'.
*
*
*        INSTALLATION PROCEDURE
*
*              ASSEMBLE THIS MODULE.
*
*              LINKEDIT THIS MODULE INTO SYS1.LINKLIB WITH
*              THE TRUE NAME 'STEPLIB' AND THE ALIAS 'RITMP'.
*              SPECIFY THE 'RENT' AND 'REFR' LINKEDIT OPTIONS.
*
*              SAMPLE LINKEDIT CONTROL CARDS ARE AS FOLLOWS.
*
*              ENTRY STEPLIB
*              ALIAS RITMP
*              SETCODE AC(1)
*              NAME STEPLIB(R)
*
*              INCLUDE THE NAMES 'STEPLIB' AND 'RITMP' IN
*              THE BLDL LIST.
*
*              CHANGE THE TSO USER LOGON PROCEDURE TO SPECIFY
*              THE MODULE 'RITMP' IN THE 'PGM=' PARAMETER OF THE
*              'EXEC' JCL CARD.
*
*              THE INSTALLATION IS NOW COMPLETE.
*
*
*
         EJECT
*
*
*
*        EQUATES
*
*
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
C1       EQU   1
C8       EQU   8
D0       EQU   0
D1       EQU   1
D2       EQU   2
D3       EQU   3
D4       EQU   4
D5       EQU   5
D6       EQU   6
D8       EQU   8
D12      EQU   12
D16      EQU   16
D20      EQU   20
D22      EQU   22
D23      EQU   23
D24      EQU   24
D43      EQU   43
D240     EQU   240
X00      EQU   X'00'
X02      EQU   X'02'
X08      EQU   X'08'
X0C      EQU   X'0C'
X10      EQU   X'10'
X18      EQU   X'18'
X40      EQU   X'40'
X80      EQU   X'80'
XFF      EQU   X'FF'
BLANK    EQU   C' '
         EJECT
*
*
*
*
*        TERMINAL MONITOR PROGRAM INTERFACE ENTRY POINT
*
*
*
*
RITMP    CSECT
         ENTRY RITMP
         USING PSA,R0                                               3.0
         STM   R14,R12,D12(R13)         SAVE REGISTERS
         BALR  R12,R0                   ESTABLISH PROGRAM BASE
         USING *,R12                    PROGRAM ADDRESSABILITY
         LR    R3,R1                    COPY TMP PARAMETER ADDR.
         GETMAIN R,LV=CORENEED          OBTAIN DYNAMIC STORAGE
*
*
*        INITIALIZE DYNAMIC CORE
*
*
         ST    R13,D4(R1)               CHAIN
         ST    R1,D8(R13)                SAVE
         LR    R13,R1                     AREAS
         LR    R11,R13                  CORE ADDR.
         USING CORE,R11                 CORE ADDRESSABILITY
         XC    TMPECB(D4),TMPECB        CLEAR TMP ECB
         LA    R0,TMPECB                TMP ECB ADDR.
         ST    R0,TMPECBAD              STORE IN ECBLIST
         LA    R0,COMECB                COMMUNICATIONS ECB ADDR.
         ST    R0,COMECBAD              STORE IN ECBLIST
         OI    COMECBAD,X80             MARK END OF LIST
         MVC   PDS(PDSDCBL),PDSDCB      INITIALIZE STEPLIB DCB
         LA    R9,PDS                   STEPLIB DCB ADDR.
         USING IHADCB,R9                DCB ADDRESSABILITY
         ST    R9,IOSUP                 BUILD I/O SUPPORT PARAM LIST
         OC    IOSUP(OCEOVL),OCEOV      OR IN OPTION BYTE
         MVC   SUPVPARM(ATTACHL),ATTACH BUILD ATTACH LIST
*
*
*        LOCATE JOBSTEP TCB ADDRESS
*
*
         L     R1,CVTPTR               CVT ADDR.
         USING CVT,R1                  ADDRESSABILITY
         L     R1,CVTTCBP              DISPATCHER'S DOUBLEWORD ADDR.
         DROP  R1                      KILL ADDRESSABILITY
         L     R10,D4(R1)              CURRENT TCB ADDR.
         USING TCB,R10                 TCB ADDRESSABILITY
*
*
*        INSURE THAT TMP INTERFACE IS THE JOBSTEP TASK
*
*
         CL    R10,TCBJSTCB            Q/JOBSTEP TASK
         BNE   ABEND100                NO
*
*
*        SAVE LOGON STEPLIB DCB ADDRESS
*
*
         MVC   JLB(D4),TCBJLB          SAVE LOGON STEPLIB DCB ADDR.
*                                                                   3.0
*        ISSUE MODESET MACRO TO ENTER SUPERVISOR KEY                3.0
*                                                                   3.0
         MODESET KEY=ZERO                                           3.0
         L     R1,TCBJSCB     JSCB ADDR.                            3.0
         USING IEZJSCB,R1                                           3.0
*        NI    JSCBOPTS,XFF-JSCBAUTH   REMOVE AUTHORIZATION         3.0
         DROP  R1                                                   3.0
         LR    R1,R3          RESTORE TMP PARAMETER
*
*
*        ATTACH THE IBM TMP
*
*
         ATTACH EP=IKJEFT01,ECB=TMPECB,SF=(E,SUPVPARM) ATTACH IBM TMP
         ST    R1,TMPTCBAD              SAVE ADDR.
*
*
*        WAIT FOR POST
*
*
WAIT     XC    COMECB(D4),COMECB        CLEAR COMMUNICATIONS ECB
         WAIT  ECBLIST=TMPECBAD         WAIT FOR EVENT COMPLETION
         STATUS STOP                    STOP SUBTASKS
*
*
*        CHECK FOR LOGOFF REQUEST
*
*
         BAL   R14,LOGOFF               CHECK FOR LOGOFF
*
*
*        DETERMINE FUNCTION REQUESTED
*
*
         CLI   COMECB+D3,D4             Q/OPEN REQUESTED
         BE    OPEN                     YES
*
*
*        CLOSE FUNCTION PROCESSING
*
*
CLOSE    TM    DCBOFLGS,X10             Q/DCB OPEN
         LA    R2,D4                    FAILURE POST CODE
         BNO   RESTART                  NO
         CLOSE ,MF=(E,IOSUP)            CLOSE DCB
         SR    R2,R2                    POST CODE
         L     R8,JLB                   LOGON STEPLIB DCB ADDR.
         B     SELECT                   PROPAGATE POINTER
*
*
*        OPEN FUNCTION PROCESSING
*
*
OPEN     MVC   DCBDDNAM(D8),DDNAME      INSERT DDNAME
         OPEN  ,MF=(E,IOSUP)            OPEN DCB
         TM    DCBOFLGS,X10             OPEN SUCCESSFUL
         LA    R2,D4                    FAILURE POST CODE
         BNO   RESTART                  NO, TELL C.P.
         SR    R2,R2                    POST CODE
         LA    R8,PDS                   DYNAMIC STEPLIB DCB ADDR.
*
*
*        TCB SELECTION SUBROUTINE
*
*              IN ORDER TO DETERMINE THE FIRST AND LAST TCBS TO
*              BE MODIFIED BY THE TCB SET SUBROUTINE, VARIOUS
*              OS CONTROL BLOCKS AND TABLES ARE SEARCHED.
*
*              THE ADDRESS OF THE FIRST TCB TO BE SET IS FOUND
*              IN THE TCBTCB FIELD OF THE JOBSTEP TCB WHICH
*              MUST BE THIS TASK.
*
*              THE ADDRESS OF THE LAST TCB TO BE SET IS FOUND
*              IN THE ASXBLTCB FIELD OF THE ASXB.                   3.0
*
SELECT   DS    0H                                                   3.0
         L     R3,PSAAOLD     ASCB ADDR.                            3.0
         USING ASCB,R3                                              3.0
         L     R4,ASCBASXB    ASXB ADDR.                            3.0
         USING ASXB,R4                                              3.0
         L     R7,ASXBLTCB                                          3.0
*
*
*        TCB SET SUBROUTINE
*
*              POINTERS TO THE FIRST (JOBSTEP) AND LAST TCBS
*              AS CHAINED BY THE TCBTCB FIELDS ARE USED TO
*              PROPAGATE THE ADDRESS OF THE STEPLIB TO ALL
*              TASKS BELOW THE TMP INTERFACE.
*
*              THIS METHOD USES THE FACT THAT ALL TIME SHARING
*              TCBS WITHIN A STEP ARE CONTIGUOUS, AS ESTABLISHED
*              BY THE ATTACH SERVICE ROUTINE.
*
*
SET      DS    0H                                                   3.0
         LR    R0,R10                   COPY JOBSTEP TCB ADDR.
SETLOOP  L     R10,TCBTCB               NEXT TCB ADDR.
         ST    R8,TCBJLB                PROPAGATE DYNAMIC DCB ADDR.
         CR    R7,R10                   Q/LAST TCB IN STEP
         BNE   SETLOOP                  NO, CONTINUE
         LR    R10,R0                   RESTORE JOBSTEP TCB ADDR.
         B     RESTART                  RESTART COMMAND PROCESSOR
*
*
*        RESTART STEPLIB COMMAND PROCESSOR
*
*
RESTART  LR    R0,R2                    LOAD POST CODE
         POST  CPECB,(0)                POST COMMAND PROCESSOR
         STATUS START                   START SUBTASKS
         B     WAIT                     WAIT FOR EVENT COMPLETION
*
*
*        LOGOFF PROCESSING
*
*
LOGOFF   TM    COMECB,X40               Q/COMMUNICATIONS ECB COMPLETE
         BCR   C1,R14                   YES
*
*        DETACH THE TMP
*
         DETACH TMPTCBAD                DETACH
*                                                                   3.0
*        RETURN TO PROBLEM KEY                                      3.0
*                                                                   3.0
         MODESET KEY=NZERO                                          3.0
*
*        RETURN TO LOGON
*
         LR    R1,R13                   CORE ADDR.
         L     R13,D4(R13)              PREVIOUS SAVE AREA ADDR.
         FREEMAIN R,LV=CORENEED,A=(1)   FREE DYNAMIC CORE
         LM    R14,R12,D12(R13)         RESTORE REGISTERS
         SR    R15,R15                  SET RETURN CODE
         BR    R14                      RETURN
*
*
*        CONSTANTS
*
*
PDSDCB   DCB   DDNAME=PDS,MACRF=(E),DSORG=PO
PDSDCBL  EQU   *-PDSDCB
OCEOV    OPEN  (0,(INPUT)),MF=L         OPEN LIST
OCEOVL   EQU   *-OCEOV
ATTACH   ATTACH KEY=PROP,SM=PROB,SF=L                               3.0
ATTACHL  EQU   *-ATTACH
*
*
*        PROBLEM DETERMINATION
*
*
ABEND100 ABEND 100,DUMP                 TMP INTERFACE NOT A JOBSTEP
ABEND200 ABEND 200,DUMP                 TMP INTERFACE NOT UNDER TSO
         EJECT
*
*
*
*
*
*         STEPLIB COMMAND PROCESSOR ENTRY POINT
*
*
*
*
*
STEPLIB  CSECT
         STM   R14,R12,D12(R13)         SAVE REGISTERS
         BALR  R12,R0                   ESTABLISH PROGRAM BASE
         USING *,R12                    PROGRAM ADDRESSABILITY
         LR    R3,R1                    COPY C.P. PARAM
         USING CPPL,R3                  ADDRESSABILITY
         GETMAIN R,LV=72                OBTAIN SAVE AREA
         ST    R13,D4(R1)               CHAIN
         ST    R1,D8(R13)                SAVE
         LR    R13,R1                     AREAS
*
*
*        LOCATE JOBSTEP TCB
*
*
         L     R1,CVTPTR                CVT ADDR.
         USING CVT,R1                   ADDRESSABILITY
         L     R1,CVTTCBP               DISPATCHER'S DOUBLEWORD ADDR.
         DROP  R1                       KILL ADDRESSABILITY
         L     R10,D4(R1)               COMMAND PROCESSOR TCB ADDR.
         L     R10,TCBJSTCB             JOBSTEP TCB ADDR.
         USING TCB,R10                  TCB ADDRESSABILITY
*
*
*        VERIFY TMP INTERFACE IS IN USE
*
*
         CL    R10,TCBGRS10             Q/TMP INTERFACE IN USE
         BNE   NOAUTH                   NO, COMMAND NOT AUTHORIZED
*
*
*        LOCATE TMP INTERFACE WORK AREA
*
*
         L     R11,TCBGRS11             RESTORE WORK AREA BASE
         USING CORE,R11                 WORK AREA ADDRESSABILITY
*
*
*        PARSE USER'S COMMAND
*
*
         LA    R2,PPLAREA               PPL ADDR.
         USING PPL,R2                   PPL ADDRESSABILTIY
         MVC   PPLUPT(D4),CPPLUPT       UPT ADDR.
         MVC   PPLECT(D4),CPPLECT       ECT ADDR.
         LA    R0,ECB                   ECB ADDR.
         ST    R0,PPLECB                STORE IN PPL
         MVC   PPLPCL(D4),PCL           PCL ADDR.
         LA    R0,ANS                   ANSWER AREA ADDR.
         ST    R0,PPLANS                STORE IN PPL
         MVC   PPLCBUF(D4),CPPLCBUF     CBUF ADDR.
         XC    PPLUWA(D4),PPLUWA        CLEAR UWA
         XC    ECB(D4),ECB              CLEAR ECB
         LINK  EP=IKJPARS,MF=(E,PPL)    CALL PARSE
         LTR   R15,R15                  Q/PARSE SUCCESSFUL
         BNZ   ABORT                    NO
*
*
*        INITIALIZE DYNAMIC ALLOCATION
*
*
         LA    R2,DAPLAREA              DAPL ADDR.
         USING DAPL,R2                  ADDRESSABILITY
         MVC   DAPLUPT(D4),CPPLUPT      UPT ADDR.
         MVC   DAPLECT(D4),CPPLECT      ECT ADDR.
         LA    R0,ECB                   ECB ADDR.
         ST    R0,DAPLECB               STORE IN DAPL
         MVC   DAPLPSCB(D4),CPPLPSCB    PSCB ADDR.
         LOAD  EP=IKJDAIR               LOAD DAIR
         ST    R0,DAIR                  SAVE DAIR EP ADDR.
         LA    R3,DA08AREA              DA08 BLOCK ADDR.
         USING DAPB08,R3                BLOCK ADDRESSABILITY
         LA    R4,DA0CAREA              DA0C BLOCK ADDR.
         USING DAPB0C,R4                ADDRESSABILITY
*
*
*        RESTART TMP INTERFACE TO CLOSE DYNAMIC STEPLIB DCB
*
*
         XC    CPECB(D4),CPECB          CLEAR C.P. ECB
         POST  COMECB,D0
         WAIT  ECB=CPECB
*
*        CHECK POST CODE
*
         CLI   CPECB+D3,D0              Q/STEPLIB CLOSED
         BNE   ALLOCATE                 NO, WAS NOT OPEN
*
*
*        DEALLOCATE STEPLIB DATASET(S)
*
*
         CLI   DA0CNUMB+D1,D1           Q/DECONCATENATION REQUIRED
         BNH   FREE                     NO
*
*        DECONCATENATE DDNAMES
*
         LA    R5,DA10AREA              DA10 BLOCK ADDR.
         USING DAPB10,R5                DA10 ADDRESSABILITY
         XC    DAPB10(DAPB10L),DAPB10   CLEAR BLOCK
         MVI   DA10CD+D1,X10            CODE
         MVC   DA10DDN(D8),DA0CDDN      INSERT DDNAME
         LA    R0,DAPB10                BLOCK ADDR.
         ST    R0,DAPLDAPB              STORE IN DAPL
         BAL   R14,DAIRCALL             CALL DAIR
         BAL   R14,RETCODE              CHECK RETURN CODE
*
*        FREE DDNAMES
*
FREE     SR    R7,R7                    ZERO INDEX
         USING DAPB18,R5                DA18 BLOCK ADDRESSABILITY
FREELOOP BAL   R14,DAIRFREE             INITIALIZE DA18 BLOCK
         OI    DA18CTL,DA18PERM         DEALLOCATE PERMANENT DATASET
         LR    R1,R7                    CURRENT DDNAME INDEX
         SLL   R1,D3                    DISPLACEMENT
         LA    R1,DA0CDDN(R1)           DDNAME ADDR.
         MVC   DA18DDN(D8),D0(R1)       INSERT DDNAME
         BAL   R14,DAIRCALL             CALL DAIR
         BAL   R14,RETCODE              CHECK RETURN CODE
         LA    R7,D1(R7)                INCREMENT INDEX
         CH    R7,DA0CNUMB              Q/ALL DONE
         BNE   FREELOOP                 NO, CONTINUE
*
*
*        ALLOCATE STEPLIB DATASET(S)
*
*
ALLOCATE L     R6,ANS                   DSECT ADDR.
         USING IKJPARMD,R6              DSECT ADDRESSABILITY
         LA    R6,DATASET               DATASET PDE ADDR.
         DROP  R6                       KILL DSECT ADDRESSABILITY
         TM    D6(R6),X80               Q/DSNAME SPECIFIED
         BNO   RETURN                   NO
         LA    R10,LIBQUAL              QUALIFIER BLOCK ADDR.
         USING QUAL,R10                 ADDRESSABILITY
         XC    DAPB0C(DAPB0CL),DAPB0C   CLEAR DA0C BLOCK
         MVI   DA0CCD+D1,X0C            CODE
LIST     BAL   R14,DAIRSHR              INITIALIZE DA08 BLOCK
         OI    DA08CTL,DA08PERM         INDICATE PERMANENT DATASET
         BAL   R14,DSNAME               BUILD DSNAME
         BAL   R14,PASSWORD             MOVE PASSWORD
         BAL   R14,DAIRCALL             CALL DAIR
         BAL   R14,RETCODE              CHECK RETURN CODE
         MVC   DDNAME(D8),DA08DDN       COPY DDNAME
         TM    DA08DSO,X02              Q/DATASET A PDS
         BNO   NOTPDS                   NO, ERROR
         LH    R7,DA0CNUMB              CURRENT CONCAT. COUNT
         LR    R1,R7                    COPY COUNT
         SLL   R1,D3                    DA0CDDN OFFSET
         LA    R1,DA0CDDN(R1)           DDNAME ADDR.
         MVC   D0(D8,R1),DA08DDN        MOVE DDNAME
         LA    R7,D1(R7)                BUMP CONCAT. COUNT
         STH   R7,DA0CNUMB              UPDATE COUNT
         L     R6,D24(R6)               CHAIN ADDR.
         LA    R6,D0(R6)                CLEAR BYTE
         LTR   R6,R6                    Q/ANOTHER PDE
         BNZ   LIST                     YES
         CLI   DA0CNUMB+D1,D1           Q/CONCATENATION REQUIRED
         BNH   POST                     NO
*
*
*        CONCATENATE DATASETS
*
*
         LA    R0,DAPB0C                DA0C BLOCK ADDR.
         ST    R0,DAPLDAPB              STORE IN DAPL
         BAL   R14,DAIRCALL             CONCATENATE DATASETS
         BAL   R14,RETCODE              CHECK RETURN CODE
         MVC   DDNAME(D8),DA0CDDN       MOVE IN DDNAME
*
*
*        RESTART TERMINAL MONITOR PROGRAM INTERFACE TO OPEN DATASET
*
*
POST     XC    CPECB(D4),CPECB          RESET C.P. ECB
         POST  COMECB,D4                POST COMMUNICATIONS ECB
         WAIT  ECB=CPECB                WAIT FOR POST BY TMP
*
*
*        CHECK POST CODE
*
*
         CLI   CPECB+D3,D0              Q/OPEN SUCCESSFUL
         BNE   OPENFAIL                 NO
*
*
*         RETURN TO TMP
*
*
RETURN   DELETE EP=IKJDAIR              DELETE DAIR ROUTINE
         IKJRLSA ANS                    RELEASE PARSE CORE
         LR    R1,R13                   SAVE AREA ADDR.
         L     R13,D4(R13)              PREVIOUS SAVE AREA ADDR.
         FREEMAIN R,LV=72,A=(1)         FREE SAVE AREA
         LM    R14,R12,D12(R13)         RESTORE REGISTERS
         SR    R15,R15                  RETURN CODE
         BR    R14                      RETURN
*
*
*        CLOSED SUBROUTINES
*
*
DAIRSHR  XC    DAPB08(DAPB08L),DAPB08   INITIALIZE DA08 BLOCK
         MVI   DA08CD+D1,X08
         MVI   DA08DDN,BLANK
         MVC   DA08DDN+D1(D23),DA08DDN
         MVC   DA08MNM(D16),DA08DDN
         MVI   DA08DSP1,DA08SHR
         MVI   DA08DPS2,DA08KEEP
         MVI   DA08DPS3,DA08KEP
         MVC   DA08ALN(D8),DA08MNM
         LA    R0,DAPB08
         ST    R0,DAPLDAPB
         BR    R14
DAIRFREE LA    R5,DA18AREA              DA18 BLOCK ADDR.
         USING DAPB18,R5                ADDRESSABILITY
         XC    DAPB18(DAPB18L),DAPB18   CLEAR DA18 BLOCK
         MVI   DA18CD+D1,X18            CODE
         LA    R0,DAPB18                BLOCK ADDR.
         ST    R0,DAPLDAPB              STORE IN DAPL
         BR    R14                      RETURN
DAIRCALL XC    ECB(D4),ECB              CLEAR ECB
         LA    R1,DAPL                  DAPL ADDR.
         L     R15,DAIR                 DAIR ADDR.
         BR    R15                      GO TO DAIR
DSNAME   TM    D6(R6),X40               Q/DSNAME IN QUOTES
         BO    DSNMOVE                  YES, BYPASS QUAL. PROCESSING
         LH    R7,D4(R6)                DSNAME LENGTH
         SH    R7,QLENGTH               MINUS QUAL. LENGTH
         BNP   DSNMOVE                  TOO SHORT TO BE QUALIFIED
         A     R7,D0(R6)                QUALIFIER ADDR.
         LH    R8,QLENGTH               QUALIFIER LENGTH
         BCTR  R8,R0                    MACHINE LENGTH
         LA    R9,QNAME                 QUALIFIER ADDR.
         EX    R8,COMPARE               Q/QUALIFIER FOUND
         BNE   DSNMOVE                  NO
         LH    R8,D4(R6)                DSNAME LENGTH
         SH    R8,QLENGTH               SUBTRACT QUALIFIER LENGTH
         STH   R8,D4(R6)                UPDATE DSNAME LENGTH
DSNMOVE  MVI   NAME,BLANK               BLANK NAME
         MVC   NAME+D1(D43),NAME        PROPAGATE
         L     R7,D0(R6)                DSNAME ADDR.
         LH    R8,D4(R6)                DSNAME LENGTH
         STH   R8,LENGTH                STORE LENGTH
         BCTR  R8,R0                    MACHINE LENGTH
         LA    R9,NAME                  NAME ADDR.
         EX    R8,MOVE                  MOVE DSNAME
         LA    R0,PDSN                  DSNAME ADDR.
         ST    R0,DA08PDSN              STORE IN DA08 BLOCK
         TM    D6(R6),X40               Q/DSNAME IN QUOTES
         BCR   C1,R14                   YES, RETURN
         OI    DA08CTL,DA08UID          NO, PREFIX USERID
         LA    R7,QNAME                 QUALIFIER ADDR.
         LH    R8,QLENGTH               QUALIFIER LENGTH
         LR    R0,R8                    COPY LENGTH
         BCTR  R8,R0                    MACHINE LENGTH
         AH    R9,LENGTH                ADDR. OF QUALIFIER
         EX    R8,MOVE                  MOVE QUALIFIER
         AH    R0,LENGTH                UPDATE
         STH   R0,LENGTH                 LENGTH
         BR    R14                      RETURN
PASSWORD TM    D22(R6),X80              Q/PASSWORD SPECIFIED
         BCR   C8,R14                   NO, RETURN
         L     R7,D16(R6)               PASSWORD ADDR.
         LH    R8,D20(R6)               PASSWORD LENGTH
         BCTR  R8,R0                    MACHINE LENGTH
         LA    R9,DA08PSWD              PSWD ADDR.
         EX    R8,MOVE                  MOVE PASSWORD
         BR    R14                      RETURN
STARTMSG GETMAIN R,LV=100               GET CORE
         LR    R2,R1                    SAVE CORE ADDR.
         SR    R0,R0                    INDICATE BUFFER EMPTY
         BR    R14                      RETURN
INSERTOP AR    R8,R8                    DOUBLE PDE INDEX
         LH    R8,D0(R8,R7)             OPTION OFFSET
         LTR   R8,R8                    Q/NULL OPTION
         BCR   C8,R14                   YES, RETURN
         AR    R7,R8                    OPTION ADDR.
INSERTNM LH    R8,D0(R7)                TEXT LENGTH
         LA    R7,D2(R7)                TEXT ADDR.
INSERTTX LR    R9,R1                    COPY ADDR.
         LR    R1,R8                    COPY LENGTH
         BCTR  R8,R0                    MACHINE LENGTH
         EX    R8,MOVE                  MOVE TEXT
         AR    R0,R1                    UPDATE LENGTH
         AR    R1,R9                    UPDATE ADDR.
         BR    R14                      RETURN
INSERTCD SH    R1,H4                    COMPUTE ADDR.
         UNPK  D0(D5,R1),D0(D3,R7)      UNPACK
         TR    D0(D4,R1),TABLE-D240     TRANSLATE TO HEX
         AH    R1,H4                    RESTORE ADDR.
         BR    R14                      RETURN
INSERTRC CVD   R15,DOUBLE               CONVERT RC TO DECIMAL
         MVC   DOUBLE(D4),RCMASK        INSERT EDIT MASK
         ED    DOUBLE(D4),DOUBLE+D6     EDIT RETURN CODE
         SH    R1,H2                    COMPUTE ADDR.
         MVC   D0(D2,R1),DOUBLE+D2      INSERT RETURN CODE
         AH    R1,H2                    RESTORE ADDR.
         BR    R14                      RETURN
ISSUEMSG SR    R1,R0                    COMPUTE MESSAGE AREA ADDR.
         TPUT  (1),(0),R                ISSUE MESSAGE
         LR    R1,R2                    CORE ADDR.
         FREEMAIN R,LV=100,A=(1)        FREE CORE
         BR    R14                      RETURN
*
*        ERROR ANALYSIS ROUTINES
*
NOAUTH   BAL   R14,STARTMSG             INITIALIZE
         USING CPPL,R3                  CPPL ADDRESSABILITY
         L     R3,CPPLECT               ECT ADDR.
         USING ECT,R3                   ADDRESSABILITY
         LA    R7,ECTPCMD               COMMAND NAME ADDR.
         USING DAPB08,R3                RESTORE DAPB08 ADDRESSABILITY
         LA    R8,L'ECTPCMD             COMMAND NAME LENGTH
         BAL   R14,INSERTTX             INSERT TEXT
         LA    R7,NAUTHMSG              MESSAGE ADDR.
         LA    R8,L'NAUTHMSG            MESSAGE LENGTH
         BAL   R14,INSERTTX             INSERT TEXT
         BAL   R14,ISSUEMSG             ISSUE MESSAGE
         B     ERRETURN                 TAKE ERROR EXIT
ABORT    BAL   R14,STARTMSG             INITIALIZE
         LA    R7,ABORTMSG              MESSAGE ADDR.
         LA    R8,L'ABORTMSG            MESSAGE LENGTH
         BAL   R14,INSERTTX             INSERT TEXT
         BAL   R14,ISSUEMSG             ISSUE MESSAGE
ERRETURN LR    R1,R13                   DYNAMIC CORE ADDR.
         L     R13,D4(R13)              PREVIOUS SAVE AREA ADDR.
         FREEMAIN R,LV=72,A=(1)         FREE DYNAMIC CORE
         LM    R14,R12,D12(R13)         RESTORE REGISTERS
         LA    R15,D4                   LOAD ERROR RETURN CODE
         BR    R14                      RETURN
RETCODE  LTR   R15,R15                  Q/DAIR FAILURE
         BCR   C8,R14                   NO, RETURN TO CALLER
         BAL   R14,STARTMSG             INITIALIZE
         L     R6,DAPLDAPB              DAPB ADDR.
         USING DAPBXX,R6                DAPBXX ADDRESSABILITY
         CLC   DAXXCD(D2),H8            Q/ALLOCATION ERROR
         BNE   NOTEIGHT                 NO
         L     R7,DA08PDSN              YES, LOAD DSNAME ADDR.
         BAL   R14,INSERTNM             INSERT DSNAME
         B     EIGHT                    CONTINUE
NOTEIGHT LA    R7,STEPNAME
         LA    R8,L'STEPNAME
         BAL   R14,INSERTTX             INSERT NAME
EIGHT    CH    R15,H8                   Q/CATALOG ERROR
         BE    CATERROR                 YES
         LA    R7,ALLOCMSG              MESSAGE ADDR.
         LA    R8,L'ALLOCMSG            MESSAGE LENGTH
         BAL   R14,INSERTTX             INSERT TEXT
         LA    R7,DAXXDARC              DAIR ERROR CODE ADDR.
         BAL   R14,INSERTCD             INSERT CODE
         BAL   R14,ISSUEMSG             ISSUE MESSAGE
         B     RETURN                   RETURN
CATERROR CLC   DAXXCTRC(D2),H8          Q/DATASET IN CATALOG
         BE    NOTFOUND                 NO
         LA    R7,CATMSG                MESSAGE ADDR.
         LA    R8,L'CATMSG              MESSAGE LENGTH
         BAL   R14,INSERTTX             INSERT TEXT
         LA    R7,DAXXCTRC              ERROR CODE ADDR.
         BAL   R14,INSERTCD             INSERT CODE
         BAL   R14,ISSUEMSG             ISSUE MESSAGE
         B     RETURN                   RETURN
NOTFOUND LA    R7,NFOUNDMG              MESSAGE ADDR.
         LA    R8,L'NFOUNDMG            MESSAGE LENGTH
         BAL   R14,INSERTTX             INSERT TEXT
         BAL   R14,ISSUEMSG             ISSUE MESSAGE
         B     RETURN                   RETURN
NOTPDS   BAL   R14,STARTMSG             INITIALIZE
         L     R7,DA08PDSN              DSNAME ADDR.
         BAL   R14,INSERTNM             INSERT NAME
         LA    R7,NPDSMSG               MESSAGE ADDR.
         LA    R8,L'NPDSMSG             MESSAGE LENGTH
         BAL   R14,INSERTTX             INSERT TEXT
         BAL   R14,ISSUEMSG             ISSUE MESSAGE
         B     RETURN                   RETURN
OPENFAIL BAL   R14,STARTMSG             INITIALIZE
         L     R7,DA08PDSN              DSNAME ADDR.
         BAL   R14,INSERTNM             INSERT DSNAME
         LA    R7,OPENMSG               MESSAGE ADDR.
         LA    R8,L'OPENMSG             MESSAGE LENGTH
         BAL   R14,INSERTTX             INSERT TEXT
         BAL   R14,ISSUEMSG             ISSUE MESSAGE
         B     RETURN                   RETURN
*
*        MESSAGES
*
NAUTHMSG DC    C' COMMAND NOT AUTHORIZED'
ABORTMSG DC    C' COMMAND ABORTED'
ALLOCMSG DC    C' DATASET ALLOCATION FAILED, DAIR ERROR CODE CCCC'
CATMSG   DC    C' DATASET ALLOCATION FAILED, CATALOG ERROR CODE CCCC'
NFOUNDMG DC    C' DATASET NOT FOUND'
NPDSMSG  DC    C' DATASET IS NOT A PDS'
OPENMSG  DC    C' DATASET IS NOT USABLE'
*
*        DATASET QUALIFIER BLOCKS
*
         DS    0H
LIBQUAL  EQU   *-D20
         DC    H'5',C'.LOAD'            STEPLIB QUALIFIER BLOCK
*
*        CONSTANTS AND EXECUTED INSTRUCTIONS
*
PCL      DC    A(PARM)                  PCL ADDR.
H2       DC    H'2'
H4       DC    H'4'
H8       DC    H'8'
MOVE     MVC   D0(D0,R9),D0(R7)         EXECUTED INSTRUCTION
COMPARE  CLC   D0(D0,R9),D0(R7)         EXECUTED INSTRUCTION
RCMASK   DC    X'40202120'
TABLE    DC    C'0123456789ABCDEF'
STEPNAME DC    C'STEPLIB'
         EJECT
         PRINT NOGEN
*
*
*        STEPLIB COMMAND PARAMETER CONTROL LIST
*
*
PARM     IKJPARM
DATASET  IKJPOSIT DSNAME,LIST,                                         X
               HELP=('DATASET NAME LIST',                              X
               'A LIST OF DATASET NAMES TO BE ALLOCATED TO STEPLIB')
         IKJENDP
         PRINT GEN
         EJECT
CORE     DSECT
*
*
*        WORK AREA DEFINITION
*
*
         DS    26F
TMPTCBAD DS    F
TMPECBAD DS    F
COMECBAD DS    F
TMPECB   DS    F
COMECB   DS    F
CPECB    DS    F
JLB      DS    F
DAIR     DS    F
ECB      DS    F
ANS      DS    F
IOSUP    DS    (OCEOVL/4)F
PDSN     DS    0H
LENGTH   DS    H
NAME     DS    44C
PSWD     DS    2F
DDNAME   DS    CL8
DOUBLE   DS    D
PDS      DS    (PDSDCBL/4)F
SUPVPARM DS    (ATTACHL/4)F
PPLAREA  DS    (PPLL/4)F
DAPLAREA DS    (DAPLL/4)F
DA08AREA DS    (DAPB08L/4)F
DA0CAREA DS    (DAPB0CL/4)F
DA10AREA DS    (DAPB10L/4)F
DA18AREA DS    (DAPB18L/4)F
CORENEED EQU   *-CORE
         EJECT
QUAL     DSECT
*
*
*        DATASET QUALIFIER BLOCK
*
*
QPQTY    DS    F
QSQTY    DS    F
QDQTY    DS    F
QALN     DS    2F
QLENGTH  DS    H
QNAME    DS    9C
         EJECT
DAPBXX   DSECT
*
*
*        DAIR BLOCK
*
*
DAXXCD   DS    H
         DS    H
DAXXDARC DS    H
DAXXCTRC DS    H
         END
