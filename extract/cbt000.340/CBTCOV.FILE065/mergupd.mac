MERGUPD  TITLE '-----  MERGE UPDATES  -----'                       LDW1
*=====================================================================*
*                                                                     *
*   PROGRAM NAME:  MERGUPD                                            *
*                                                                     *
*   AUTHOR:        LEONARD D. WOREN                                   *
*                                                                     *
*   DATE:          JULY 14, 1980                                      *
*                                                                     *
*   INSTALLATION:  GIBRALTAR SAVINGS AND LOAN                         *
*                                                                     *
*   PURPOSE:       APPLY MERGED UPDATES TO SOURCE MEMBERS.            *
*                                                                     *
*   HISTORY:       THIS PROGRAM IS A MODIFIED VERSION OF THE NIH      *
*                  PROGRAM "HSPMERGE", FROM FILE 17 OF THE JESMODS    *
*                  TAPE.  DOCUMENTATION IS ON FILE 16.                *
*                                                                     *
*   UPDATES:                                                          *
*      07/14/80 LDW1 - CHANGE PROGRAM NAME                            *
*                    - ADD CAPABILITY TO DO INSERTIONS WITH ONLY      *
*                      THE FIRST SEQUENCE NUMBER SPECIFIED            *
*                    - ADD REPLACE FEATURE (PARM=R)                   *
*                                                                     *
*=====================================================================*
         EJECT
         MACRO
&NAME    LOG   &LEV,&CC,&SP,&MSG
         LCLA  &TCC,&TSP
&NAME    BAL   R1,LOG&SYSNDX
&TCC     SETA  0
&TSP     SETA  0
         AIF   ('&CC' EQ '').CCOK
&TCC     SETA  &CC
.CCOK    AIF   ('&SP' EQ '').SPOK
&TSP     SETA  &SP
.SPOK    ANOP
         DC    AL1(&LEV,&TCC,&TSP,L'MSG&SYSNDX)
MSG&SYSNDX DC    C&MSG
LOG&SYSNDX  BAL   R14,LOG
         MEND
         SPACE 2
         MACRO
         GENLEVS &LEVCT
         LCLA  &TEMP
&TEMP    SETA  &LEVCT+1
LEVELS   DC    0A(0)
.LAGN    ANOP
         DC    16X'FF',7A(0)
         AIF   (&TEMP NE &LEVCT+1).LNOLGT
         SPACE 1
LEVLEN   EQU   ((*-LEVELS+3)/4)*4
         SPACE 1
.LNOLGT  ANOP
&TEMP    SETA  &TEMP-1
         AIF   (&TEMP NE 0).LAGN
         MEND
         EJECT
         GBLA  &MAXLEVS,&TOTCHNG
&MAXLEVS SETA  50
&TOTCHNG SETA  500
         SPACE 3
LEVEL    DSECT
MODULE   DS    CL8
LEVNAME  DS    CL8
CARDPTR  DS    A
CURTTR   DS    F
BUFPTR   DS    A
CURBLOK  DS    H
BLKINCR  DS    H
CURSEQ   DS    CL8
SUPPL    DS    X                           EXTENSION OF SEQUENCE FIELD
TYPE     DS    X                           ADD OR CHNGE FLAG
         DS    2X
         EJECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 1
SOURCE   EQU   R2
START    EQU   R3
STOP     EQU   R4
WA       EQU   R5
WB       EQU   R6
WC       EQU   R7
WD       EQU   R8
WE       EQU   R9
RLL      EQU   R11
         TITLE '-----  MERGE UPDATES  -----  PASS1  -----'         LDW1
         SPACE 2
MERGUPD  CSECT ,                                                   LDW1
         SAVE  (14,12),,MERGUPD_&SYSDATE_&SYSTIME                  LDW1
         BALR  R12,0                    ADDRESSABILITY FOR CODE
         USING *,R12,R10
BASEADD  DS    0H
         L     R10,BASE2                SET UP SECOND BASE REG
         LA    R2,MERGSAVE              POINT TO OUR SAVE AREA
         ST    R13,4(,R2)               SATISFY LINKAGE CONVENTIONS
         ST    R2,8(,R13)               DITTO
         LR    R13,R2                   POINT R13 TO OUR SAVE AREA
         SPACE 1
         L     R1,0(,R1)                POINT TO PARM INFO
         LH    R2,0(,R1)                GET PARM BYTE COUNT
         LTR   R2,R2                    ZERO?
         BZ    PROCEED                  SKIP LOOP IF SO            LDW1
         LA    R1,1(R1,R2)              POINT TO LO-ORDER BYTE
CLINP    CLI   0(R1),C'D'               DEBUG OPTION
         BNE   *+8                      BR IF NOT
         MVI   DEBSW,1                  SET DEBUG SW ON
         CLI   0(R1),C'R'               REPLACE OPTION?            LDW1
         BNE   *+8                      BR IF NOT                  LDW1
         MVI   REPLSW,1                 SET REPLACE SW ON          LDW1
         CLI   0(R1),C'L'               DEFAULT LOG LEVEL CHANGE?
         BNE   *+10                     BR IF NOT
         MVC   ORIGLOG(2),1(R1)         PICK UP NEW DEFAULT
         BCTR  R1,0                     SHIFT LEFT ONE CHARACTER
         BCT   R2,CLINP                 LOOK AT ALL THE CHARACTERS
         SPACE 1
         B     PROCEED                  BEGIN PROGRAM
         SPACE 1
BASE2    DC    A(BASEADD+4096)
DEBSW    DC    AL1(0)                   DEBUG SW INITIALLY OFF
REPLSW   DC    AL1(0)                   REPLACE SW INITIALLY OFF   LDW1
         EJECT
         SPACE 15
*        DURING PASS1 REGISTERS ARE USED AS FOLLOWS:
*
*        R0    PARAMETER PASSING
*        R1        "        "
*        R2    UNUSED
*        R3       "
*        R4       "
*        R5    (WA) INDEX IN LEVELS TABLE
*        R6    (WB) POINTER TO CURRENT CARD IN INPUT BUFFER
*        R7    (WC) POINTER TO FIRST BYTE PAST BUFFER
*        R8    (WD) LOCAL WORK REG
*        R9    (WE) REMEMBERS CURRENT TTR
*        R10   SECOND BASE REG
*        R11   (RLL) LENGTH OF AN ENTRY IN LEVELS TABLE
*        R12   FIRST BASE REG
*        R13   POINTS TO OUR SAVE AREA
*        R14   ACCESS METHOD LINKAGE
*        R15   ACCESS METHOD LINKAGE
         EJECT
PROCEED  OPEN  (SYSIN,,SYSPRINT,(OUTPUT),ERRORS,(OUTPUT))
         TM    SYSIN+48,X'10'           SYSIN OK?
         BZ    BADDD                    BR IF NOT
         TM    SYSPRINT+48,X'10'        SYSPRINT?
         BZ    BADDD                    BR IF MISSING
         TM    ERRORS+48,X'10'          ERRORS DD STATEMENT?
         BO    OPENBPAM                 BR IF ALL OK
BADDD    WTO   '*** MERGUPD *** MISSING SYSIN/SYSPRINT/ERRORS DD STATEM$
               ENT(S)'                                             LDW1
ABEND    ABEND 16,DUMP
         SPACE 2
OPENBPAM OPEN  (SYSUT2,(OUTPUT),SYSUT1,(INPUT)) OPEN BPAM DATA SETS
         LH    R1,SYSIN+DCBBLKSI-IHADCB LOAD MAX BLOCKSIZE
         M     R0,=A(&MAXLEVS)          TIMES MAX NO. OF LEVELS
         ST    R1,SIZE1                 SET IN LIST
         LH    R1,SYSUT1+DCBBLKSI-IHADCB  LOAD MAX BLOCKSIZE
         SLL   R1,1                     DOUBLE FOR DOUBLE BUFFERING
         ST    R1,SIZE2                 SET IN LIST
         LH    R1,SYSUT2+DCBBLKSI-IHADCB LOAD MAX BLOCKSIZE
         ST    R1,SIZE3                 SET
         OI    SIZE3,X'80'              TERMINATE LIST
         GETMAIN LU,LA=SIZE1,A=LOCS1    GET BUFFER SPACE
         MVI   SIZE3,0                  CLEAR HI BYTE
         USING LEVEL,WA                 UNTIL FURTHER NOTICE
         LA    RLL,LEVLEN               VALID THROUGHOUT PROGRAM
         LA    WA,LEVELS-LEVLEN         INITIAL SETTING
         B     P1GO                     PROCEED
         SPACE 1
P1NREC   LA    WB,80(,WB)               BUMP TO NEXT CARD
         CR    WB,WC                    PAST END OF BLOCK?
         BL    P1BLOKOK                 BR IF NOT
P1GO     DS    0H                       ENTER HERE FIRST TIME
         L     0,SYSINBF                POINT TO BUFFER
         READ  P1DECB,SF,SYSIN,(0),'S'
         CHECK P1DECB
         NOTE  SYSIN
         LR    WE,R1                    REMEMBER CURRENT TTR
         ST    WE,DBLWK                 GET IT INTO CORE
         UNPK  WSTR(7),DBLWK(4)         MAKE IT PRETTY
         MVC   PL1LOC+12(6),WSTR        MOVE INTO MESSAGE
         TR    PL1LOC+12(6),UPTOHEX       "   "    "
         LH    WC,SYSIN+DCBBLKSI-IHADCB GET MAX COUNT
         L     R1,P1DECB+16             R1 --> IOB
         SH    WC,14(,R1)               SUBTRACT RESID COUNT FROM CSW
         L     WB,SYSINBF               -> FIRST CARD IMAGE IN BUFR
         AR    WC,WB                    -> FIRST BYTE PAST BUFFER
         SPACE 1
P1BLOKOK DS    0H
         CLI   DEBSW,1                  DEBUGGING?
         BNE   NDB1                     BR IF NOT
         LR    R0,WB                    POINT AT CURRENT CARD
         S     R0,SYSINBF               GET BUFFER OFFSET
         ST    R0,DBLWK                 STORE IT
         UNPK  WSTR(5),DBLWK+2(3)       SPREAD IT OUT
         MVC   PL1LOC+27(4),WSTR        MOVE INTO MESSAGE
         TR    PL1LOC+27(4),UPTOHEX     MAKE IT LOOK RIGHT
         LR    R0,WB                    GET BUFFER LOC AGAIN
PL1LOC   LOG   HIGH,,1,'TTR=______, OFFSET=____'
NDB1     CLC   0(3,WB),=C'./ '          CONTROL CARD?
         BNE   P1NREC                   BR IF NOT
         LA    R1,2(,WB)                SET FOR SCANNING
         LA    R0,72(,WB)
         BAL   R14,SCANVERB             GET THE VERB
         CLC   SCANOUT(8),=CL8'LEVEL'
         BE    P1LEVEL
         CLC   SCANOUT(8),=CL8'CHNGE'
         BE    P1CHNGE
         CLC   SCANOUT(8),=CL8'CHANGE'
         BE    P1CHNGE
         CLC   SCANOUT(8),=CL8'ADD'
         BE    P1ADD
         CLC   SCANOUT(8),=CL8'REPL'
         BE    P1REPL
         B     P1NREC                   IGNORE OTHERS FOR NOW
         SPACE 1
P1REPL   LR    R0,WB                    LOG THE CARD
         LOG   ERR,16,,'REPL ILLEGAL   *** ERROR'
*
P1ADD    AR    WA,RLL                   NEXT ENTRY
         C     WA,=A(LEVELS+&TOTCHNG*LEVLEN)
         BNL   P1OVER
         MVI   TYPE,1                   SET ADD TYPE
         B     P1NLEV
         SPACE 1
P1CHNGE  DS    0H
         AR    WA,RLL                   WA --> NEXT TABLE ENTRY
         C     WA,=A(LEVELS+(&TOTCHNG)*LEVLEN)  STILL WITHIN TABLE?
         BL    P1NLEV                   BR IF SO TO CONTINUE
P1OVER   LR    R0,WB                    LOG THE CARD
         SPACE 1
         LOG   ERR,16,,'&&TOTCHNG (&TOTCHNG) EXCEEDED  *** ERROR'
         B     ABEND
         SPACE 1
P1BADCH  LR    R0,WB
         LOG   ERR,16,,'MEMBER NAME MISSING   *** ERROR'
         B     ABEND
         SPACE 1
P1NLEV   DS    0H
         CR    R1,R0                    END OF CARD?
         BNL   P1BADCH                  BR IF SO
         CLC   0(5,R1),=C'NAME='        IEBUPDTE TYPE?
         BNE   *+8                      BR IF NOT
P1CHNM   LA    R1,5(,R1)                BUMP OVER NAME=
         BAL   R14,SCANFLD              GET THE NAME
P1CHFNM  CR    R1,R0                    END OF CARD?
         BNL   P1CHCK                   BR IF SO
         CLI   0(R1),C' '               END OF PARMS?
         BE    P1CHCK                   BR IF SO
         CLC   0(5,R1),=C'NAME='        IEBUPDTE?
         BE    P1CHNM                   BR IF SO
         BAL   R14,SCANNBC              SCAN TO NEXT
         B     P1CHFNM
*
P1CHCK   CLI   SCANOUT,C' '             NAME FOUND?
         BE    P1BADCH                  BR IF NOT
         ST    WE,CURTTR                SAVE STARTING TTR FOR THIS LEV
         SPACE 1
         LR    WD,WB                    COMPUTE
         S     WD,SYSINBF                 CURRENT CARD
         STH   WD,BLKINCR                   OFFSET & SAVE IT
         SPACE 1
         MVC   MODULE,SCANOUT           SAVE MODULE NAME
         MVC   LEVNAME,CURLEVEL         SAVE MODIFICATION LEVEL
         B     P1NREC                   GO BACK FOR NEXT CARD
         SPACE 1
P1LEVEL  DS    0H
         BAL   R14,SCANFLD              EXTRACT THE LEVEL-ID
         CLC   SCANOUT,=CL8' '          BLANK LEVEL?
         BE    P1BADLV                  YUP
         MVC   CURLEVEL,SCANOUT         SAVE IT IN CURLEVEL
         SPACE 1
         LA    WD,HASPSRC               SET TO SCAN PREV LEVS FOR DUP
P1LCLC   CLC   CURLEVEL,LEVNAME-LEVEL(WD)  FIND A MATCH?
         BE    P1LERR                   BR IF YES
         AR    WD,RLL                   STEP TO NEXT ENTRY
         CR    WD,WA                    ARE WE PAST THE END?
         BNH   P1LCLC                   BR IF NO TO LOOK AGAIN
         B     P1NREC                   GO GET THE NEXT CARD
         SPACE 1
P1LERR   LR    R0,WB                    POINT TO BAD CARD FOR LOGGING
         LOG   ERR,16,,'DUPLICATE LEVEL ALREADY EXISTS  *** ERROR'
         B     ABEND
         SPACE 1
         DROP  WA
*
P1BADLV  LOG   ERR,20,,'LEVEL NAME MISSING   *** ERROR'
         B     ABEND
         SPACE 1
UPTOHEX  EQU   *-C'0'                   SAVE SPACE
         DC    C'0123456789ABCDEF'      FOR TRANSLATION
         TITLE '-----  MERGE UPDATES  -----  PASS2  -----'         LDW1
         SPACE 2
***** COMMENTS ON REGISTER USAGE DURING PASS2 ***
         SPACE 15
*        R0    PARAMETER PASSING
*        R1        "        "
*        R2    (SOURCE) --> HASP SOURCE ENTRY IN LEVEL TABLS
*        R3    (START)  --> STARTING ENTRY IN LEVELS SUBSET
*        R4    (STOP) --> ENDING ENTRY IN LEVELS SUBSET BEING PROCESSED
*        R5    (WA) --> LEVELS ENTRY BEING PROCESSED
*        R6    (WB) VARIOUS USES
*        R7    (WC) VARIOUS USES
*        R8    (WD) VARIOUS USES
*        R9    (WE) VARIOUS USES
*        R10   SECOND BASE REG
*        R11   (RLL) CONTAINS LEVLEN
*        R12   FIRST BASE REG
*        R13   POINTS TO MERGSAVE
*        R14   SUBROUTINE AND ACCESS METHOD LINKAGE
*        R15   ACCESS METHOD LINKAGE
         EJECT
         SPACE 1
PASS2    DS    0H
         MVC SYSIN+DCBEODAD-IHADCB+1(3),=AL3(P2EODAD) SET PASS2 EOD ADR
SORT     DS    0H
         USING LEVEL,WA
         SPACE 1
NXTPASS  LA    WA,LEVELS                -> FIRST MODIFICATION LEVEL
         MVI   QUITSW+1,0               SET SW TO FALL THROUGH
NXTPAIR  DS    0H
         LA    WB,0(WA,RLL)             -> ENTRY FOLLOWING WA
         CLC   MODULE-LEVEL(8,WB),MAXSEQ  ALL DONE?
         BE    QUITSW                   BR IF SO
         CLC   MODULE,MODULE-LEVEL(WB)  DOES THIS PAIR NEED SWITCHING?
         BNH   NSWAP                    BR IF NOT
         SPACE 1
         XC    0(LEVLEN,WA),0(WB)       3 INSTR SWAP WITHOUT BUFFER
         XC    0(LEVLEN,WB),0(WA)                  ''
         XC    0(LEVLEN,WA),0(WB)                  ''
         MVI   QUITSW+1,X'F0'           NOTE THAT SOMEBODY MOVED
         SPACE 1
NSWAP    LR    WA,WB                    GO TO NEXT PAIR
         B     NXTPAIR
         SPACE 1
QUITSW   BC    *-*,NXTPASS              DO IT AGAIN IF ANYTHING MOVED
         EJECT
         SPACE 2
         LA    START,LEVELS             -> FIRST MODIFICATION ENTRY
         SPACE 1
P2CKEND  CLC   MODULE-LEVEL(8,START),MAXSEQ   ALL LEVS PROCESSED
         BNE   P2G0                     BR IF NO
         SPACE 1
         MVC   FINMSG+39(2),CHCODE      INSERT RESULTING CC IN MSG
         SR    R0,R0                    NO CARD TO LOG
FINMSG   LOG   HIGH,0,,'END OF MERGE, CONDITION CODE =   '
         CLOSE (SYSUT1,,SYSUT2,,SYSIN,,SYSPRINT,,ERRORS) CLOSE EVERYONE
         L     R15,HEXCODE              SET COND CODE IN R15
         L     R13,4(,R13)              BACK UP SAVE POINTER
         L     R14,12(,R13)             RELOAD OS RETURN POINT
         LM    R0,R12,20(R13)           RELOAD OTHER REGS
         BR    R14                      RETURN TO OS
         EJECT
P2G0     DS    0H
         LR    STOP,START             GET SET TO FORM SUBSET BOUNDARIES
         L     WB,SYSINBF               WB USED FOR ASSIGNING BUFFERS
         LH    R15,SYSIN+DCBBLKSI-IHADCB  LOAD CONSTANT
         LA    R14,&MAXLEVS             LEVEL COUNT
P2BUFOK  ST    WB,BUFPTR-LEVEL(STOP)    ASSIGN BUFFER TO CURRENT LEVEL
         LA    WA,0(STOP,RLL)           POINT TO NEXT LEVEL'S ENTRY
         CLC   MODULE-LEVEL(8,STOP),MODULE-LEVEL(WA)  SAME MODULE?
         BNE   P2GSTOP                  END SUBSET IF NOT
         LR    STOP,WA                  BUMP TO NEXT ENTRY
         AR    WB,R15                   SET TO NEXT
         BCT   R14,P2BUFOK              SOME MORE?
*
         MVC   LEVX+35(8),MODULE        INSERT MODULE NAME IN ERROR MSG
LEVX     LOG   ERR,20,,'&&MAXLEVS (&MAXLEVS) EXCEEDED FOR           ***$
                ERROR'
         MVC   MODULE-LEVEL(8,START),MAXSEQ  JUMP TO THE END
         B     P2CKEND
         SPACE 1
P2GSTOP  DS    0H
         LR    SOURCE,START             SET TO MOVE SOURCE ENTRY
         SR    SOURCE,RLL               PRECEDING START OF MODS
         MVC   0(LEVLEN,SOURCE),HASPSRC MOVE IT
         MVC   CURSEQ-LEVEL(8,SOURCE),MINSEQ  RESET SEQ FOR NEXT MODULE
         MVC   CURMOD(8),MODULE-LEVEL(START)  SET NEW MEMBER NAME
         L     R1,SYST1BF               POINT TO BUFFER SPACE
         ST    R1,P2DECBX+12            STORE IN DECB
         AH    R1,SYSUT1+DCBBLKSI-IHADCB  PT TO ALT BUFFER
         ST    R1,BUFPTR-LEVEL(,SOURCE) PLANT POINTER
         SPACE 1
         CLI   TYPE-LEVEL(START),0 ADD?
         BNE   P2NOSRC                  BR IF SO
         FIND  SYSUT1,CURMOD,D          POINT AT MEMBER
         LTR   R15,R15                  FOUND?
         BZ    P2MFOUND                 BR IF SO
         SR    R0,R0                    NO CARD TO LOG
         ST    R0,LOGLNES               FORCE PAGE EJECT
         MVC   MISSMOD+15(8),CURMOD     PUT NAME IN MSG
MISSMOD  LOG   ERR,20,,'MODULE XXXXXXXX NOT FOUND IN SOURCE - WILL BE A*
               DDED   *** ERROR'
         MVC   CURSEQ-LEVEL(8,SOURCE),MAXSEQ SET EOF ON SOURCE
         B     P2MODSET
         EJECT
         SPACE 1
P2MFOUND DS    0H
         MVC   BEGMOD+35(8),CURMOD      SET MEMBER NAME IN MSG
         SR    R0,R0                    NO CARD TO LOG
         ST    R0,LOGLNES               FORCE EJECT FOR THIS MESSAGE
BEGMOD   LOG   HIGH,,,'BEGINNING UPDATE OF MODULE MMMMMMMM'
         READ  P2DECBX,SF,MF=E          START READING 1ST SOURCE RECORD
         SR    R0,R0
         STH   R0,BLKINCR-LEVEL(,SOURCE) RESET TO START OF BLOCK
         STH   R0,CURBLOK-LEVEL(,SOURCE)
         B     P2MODSET
*
P2NOSRC  MVC   ADDMOD+15(8),CURMOD      PUT NAME IN MSG
         SR    R0,R0                    NO CARD TO LOG
         ST    R0,LOGLNES               FORCE EJECT FOR THIS MESSAGE
ADDMOD   LOG   HIGH,,,'MODULE XXXXXXXX ADDED TO SOURCE'
         MVC   CURSEQ-LEVEL(8,SOURCE),MAXSEQ SET EOF ON SOURCE
*
P2MODSET MVC   CURLOG,ORIGLOG           START NEW MODULE WITH DEFAULT
         LR    WA,SOURCE                PREPARE TO PRIME ALL INPUT LVLS
P2PRIME  LR    R1,WA                    SET P2READ PARAMETER REG
         BAL   R14,P2READ               PRIME NEXT LEVEL
         AR    WA,RLL                   BUMP TO NEXT LEVEL
         CR    WA,STOP                  END OF SUBSET?
         BNH   P2PRIME                  BR IF NOT FOR NEXT LEVEL
         SPACE 1
P2NCARD  DS    0H
         MVI   OVFLGS,0                 RESET OVERRIDE INDICATOR
         LR    WA,SOURCE                PREPARE TO FIND LOWEST SEQ NUMB
         LR    WB,WA                    WB IS NEXT TO BE EXAMINED
P2NLK    CR    WB,STOP                  END OF SUBSET?
         BE    P2ROC                    BR OUT IF SO
         AR    WB,RLL                   POINT TO NEXT ENTRY
*        EXTRA COLUMN IN FOLLOWING INSTR IS TO FORCE DELETES LOWER
         CLC   CURSEQ(9),CURSEQ-LEVEL(WB)  IS WA STILL LO
         BL    P2NLK                    BR IF YES
         BE    P2OVRID                  BR IF SAME SEQUENCE NUMBER
         LR    WA,WB                    POINT TO NEW 'LOW' ENTRY
         MVI   OVFLGS,0            NEW 'LOW' CARD - RESET OVERRIDE IND
         B     P2NLK                    GO TO CONTINUE CHECK
P2OVRID  DS    0H
         OI    OVFLGS,OVERRID           EQUAL - NOTE OVERRIDE OCCURRED
         L     WC,CARDPTR               WC --> CARD IMAGE
         L     WD,CARDPTR-LEVEL(,WB)    WD --> OVERRIDING CARD IMAGE
         CLC   0(63,WC),0(WD)           ARE THEY THE SAME CARD?
         BE    P2REPL                   YES - BRANCH
         OI    OVFLGS,DIFFRNT           NO - NOTE DIFFERENT CARDS
P2REPL   LR    WA,WB                    POINT TO NEW 'LOW' ENTRY
         B     P2NLK                    GO SEE IF IT'S LOWEST
         EJECT
P2ROC    DS    0H
         CLC   CURSEQ,MAXSEQ            ARE WE AT END OF DATA
         BNE   P2DOCARD
P2NMOD   SR    R1,R1                    SET TO FLUSH CURRENT MODULE
         BAL   R14,P2PUT                DO IT
         LA    START,0(STOP,RLL)        SET TO DO NEXT SUBSET
         B     P2CKEND                  BACK FOR NEXT SUBSET
P2DOCARD DS    0H
         L     WC,CARDPTR               WC --> CARD IMAGE
         TM    OVFLGS,DIFFRNT           A DIFFERENT OVERRIDE NOTED?
         BZ    P2TOV                    BR IF NOT
         MVI   P2OVL1+4,WARN            SET LOGGING LEVEL - DIFF CARDS
         B     P2OVLOG                  GO LOG OVERRIDDEN CARDS
P2TOV    TM    OVFLGS,OVERRID           ANY OVERRIDING TAKE PLACE?
         BZ    P2NOVER                  BR IF NOT
         MVI   P2OVL1+4,NOTE         SET LOGGING LVL - SAME CARD OVER'D
P2OVLOG  LR    R0,WC                    POINT TO CARD IMAGE FOR LOGGING
P2OVL1   LOG   *-*,0,3,'OVERRIDES FOLLOWING CARD(S)'
         SPACE 1
         LR    WB,SOURCE               BACK UP & PRINT OVERRIDDEN CARDS
P2LOGOV  CR    WA,WB                    ARE WE THRU?
         BE    P2NOVER                  BR IF SO
         CLC   CURSEQ(9),CURSEQ-LEVEL(WB) THIS CARD OVERRIDDEN?
         BNE   P2LOVN                   BR IF NOT
         MVI   P2OVL2+4,WARN            PRESET LEVEL ASSUMING UNEQUAL
         L     WD,CARDPTR-LEVEL(WB)     WD --> OVERRIDDEN CARD
         CLC   0(63,WC),0(WD)           SAME CARD IMAGE?
         BNE   P2OVLOG2                 BR IF NOT TO LOG
         MVI   P2OVL2+4,NOTE            RESET LOGGING LEVEL
P2OVLOG2 LR    R0,WD                    POINT R0 TO OVERRIDDEN CARD
P2OVL2   LOG   *-*,0,2,' '              LOG OVERRIDDEN CARD
         LR    R1,WB                    SET PARAMETER FOR READ ROUTINE
         BAL   R14,P2READ               SKIP OVERRIDEN CARD
P2LOVN   AR    WB,RLL                   ADVANCE TO NEXT SUBSET ENTRY
         B     P2LOGOV                  GO SEE IF WE'RE DONE
         EJECT
P2NOVER  DS    0H
         CLC   0(2,WC),=C'./'           DO WE HAVE A CONTROL CARD
         BNE   CDOUT                    BR IF NO TO WRITE IT OUT
         CLI   2(WC),C'*'               ./*  COMMENT CARD?
         BNE   P2COPY                   BR IF NOT
         LR    R0,WC                    POINT FOR LOGGING
         LOG   NOTE,,,' '               LOG THE COMMENT
         B     P2RWA                    THAT'S IT FOR THIS ONE
P2COPY   DS    0H
         MVC   CARD,0(WC)               MAKE TEMP COPY FOR FIDDLING
         LA    R1,CARD+2
         LA    R0,CARD+72
         BAL   R14,SCANVERB             SCAN FOR VERB
         SPACE 1
         CLC   SCANOUT,=CL8'LOG'        ./ LOG CARD?
         BE    P2DOLOG                  BR IF SO
         SPACE 1
         CLC   SCANOUT,=CL8'DELET'      ./ DELET CARD?
         BE    P2DELET                  BR IF SO
         SPACE
         CLC   SCANOUT,=CL8'DELETE'     ./   DELETE CARD?
         BE    P2DELET                  BR IF SO
         SPACE 1
         CLC   SCANOUT,=CL8'SKIP'       ./ SKIP CARD?
         BE    P2SKIP                   BR IF SO
         SPACE 1
         CLC   SCANOUT,=CL8'ABEND'      ./ ABEND REQUEST?
         BE    P2ABEND
         SPACE 1
         LR    R0,WC                    R0 --> CARD IMAGE FOR LOGGING
         LOG   ERR,20,0,'ILLEGAL CONTROL CARD  *** ERROR'
         B     P2RWA                    SKIP IT
         SPACE 1
P2ABEND  ABEND 30,DUMP                  USER REQUESTED ABEND
 TITLE '-----  MERGE UPDATES  -----  PASS2  --  PROCESS ./ LOG CARD'
         SPACE 1
P2DOLOG  MVC   CURLOG,ORIGLOG           ASSUME RESET TO ORIGINAL LEVEL
         BAL   R14,SCANFLD              SCAN FOR OPERAND
         CLI   SCANOUT,C' '             OMITTED?
         BE    P2LOGLOG                 BR IF SO
         CLI   SCANOUT+1,C' '           1 DIGIT?
         BNE   P2LOG2CH                 BR IF 2 CHAR OPERAND
         MVI   CURLOG,C'0'              SET INITIAL ZERO IN CURLOG
         MVC   CURLOG+1(1),SCANOUT      MOVE IN OPERAND DIGIT
         B     P2LOGLOG                 GO LOG THE LOGGING LEVEL
         SPACE 1
P2LOG2CH MVC   CURLOG,SCANOUT           MOVE IN THE USER'S OPERAND
P2LOGLOG MVC   P2LOGMS+33(2),CURLOG     SET UP THE MESSAGE
         LR    R0,WC                    POINT AT CARD FOR LOGGING
P2LOGMS  LOG   HIGH,0,0,'CURRENT LOGGING LEVEL IS   '
         B     P2RWA                    GO READ NEXT CARD
 TITLE '-----  MERGE UPDATES  -----  PASS2  --  PROCESS ./ DELET CARD'
         SPACE 2
P2DELET  DS    0H
         BAL   R14,SCANDEL              SCAN DELETE CARD
         MVC   SEQ1(16),DELSEQ1
         LR    R0,WC                    LOG THE CARD
         LOG   HIGH,0,5,'BEGINNING PROCESSING'
         CLI   SEQ1,C' '                OPERANDS OMITTED?
         BE    P2DSEQ                   BR IF SO
         CLI   SEQ2,C' '                TERMINATING SEQ NO PRESENT?
         BNE   *+10                     BR IF SO
         MVC   SEQ2,SEQ1                DUPLICATE STARTING SEQ NUMBER
         CLC   SEQ1,SEQ2                PROPER SEQUENCE?
         BH    P2DSEQ                   NOPE
         LR    WB,SOURCE                SET TO SCAN LEVELS SUBSET
P2DEL1   CLC   SEQ2,CURSEQ-LEVEL(WB)    SHOULD WB'S CARD BE DELETED?
         BNL   P2DEL2                   BR IF SO
         B     CTLOUT                TERMINATE PROCESSING FOR THIS CARD
         SPACE 1
P2DEL2   DS    0H
         L     WD,CARDPTR-LEVEL(WB)     WD --> DELETED CARD
         CLC   0(2,WD),=C'./'           CONTROL CARD?
         BNE   P2DEL3                   BR IF NOT
         CLI   2(WD),C'*'               COMMENT?
         BE    P2DEL3                   BR IF SO
         LR    R1,WD                    SET FOR SCANNING
         LA    R0,72(,WD)
         BAL   R14,SCANVERB             LOOK FOR VERB
         CLC   SCANOUT(8),=CL8'DELET'   DELETING A DELET?
         BE    P2DELDEL                 BR IF SO
         CLC   SCANOUT(8),=CL8'DELETE'
         BE    P2DELDEL
P2DEL3   LR    R0,WD                    LOG THE CARD
         LOG   WARN,0,4,'DELETED'
P2DEL4   LR    R1,WB               SET TO READ NEXT CARD FOR (WB) ENTRY
         BAL   R14,P2READ               GO DO THE READ
         B     P2DEL1                   GO CHECK NEXT CARD
         SPACE 1
P2DELDEL BAL   R14,SCANDEL              SCAN OPERANDS
         CLC   SEQ2(8),DELSEQ2          SEQUENCE OVERLAP?
         BNL   P2DEL3                   BR IF NO PROBLEM
P2DEL45  LOG   ERR,20,4,'DELET RANGE OVERLAP  *** ERROR'
         B     P2DEL4                   GO SKIP TO NEXT CARD
*
P2DSEQ   LOG   ERR,20,4,'BAD OPERANDS  *** ERROR'
         B     CTLOUT                   SKIP THE CARD
 TITLE '-----  MERGE UPDATES  -----  PASS2  --  PROCESS ./ SKIP CARD'
         SPACE 2
P2SKIP   DS    0H
         LR    R0,WC                    SET FOR LOGGING
P2SKP0   LOG   HIGH,0,7,'BEGINNING PROCESSING'
         LR    WB,SOURCE                SET TO SCAN SUBSET
         LR    WD,STOP                  PRESET RANGE END FOR MAX
         LA    R1,CARD+2
         LA    R0,CARD+72
         BAL   R14,SCANVERB             RESCAN VERB
         BAL   R14,SCANFLD              GET SEQUENCE
         MVC   SEQ1(8),SCANOUT          SAVE SEQUENCE
         BAL   R14,SCANFLD              PICK UPT THE OPERAND
         MVC   FSTART,SCANOUT           AND SAVE IT
         BAL   R14,SCANFLD              SCAN THE OPERAND
         MVC   FSTOP,SCANOUT            AND SAVE IT TOO
         CLC   CDSEQ(8),SEQ1            CK FOR SCREWY SEQUENCES
         BNH   P2SKSL                   BR IF OK
         LR    R0,WC                    POINT TO CARD AGAIN
         LOG   ERR,8,6,'INVALID ENDING SEQUENCE  *** ERROR'
P2SKSL   DS    0H
         CLC   FSTART,=CL8' '           STARTING LEVEL PRESENT?
         BE    P2SKP4                   BR IF ALL LEVELS
P2SKP1   CLC   FSTART,LEVNAME-LEVEL(WB) SET TO SCAN TO STARTING LEVEL
         BE    P2SKP2                   BR IF WE FOUND IT
         AR    WB,RLL                   NEXT LEVEL
         CR    WB,STOP                  ARE WE STILL IN RANGE?
         BNH   P2SKP1                   BR BACK IF STILL OK
         MVC   P2SKER+14(8),FSTART      INSERT LEVEL NAME IN MSG
P2SKPB   SR    R0,R0                    NO CARD IMAGE TO PRINT
P2SKER LOG ERR,12,6,'LEVEL XXXXXXXX INVALID FOR THIS MODULE  *** ERROR'
         B     P2RWA                    TERMINATE ./ SKIP PRICESSING
         SPACE 1
P2SKP2   CLC   FSTOP,=CL8'END'          DOES HE WANT ALL THE REST?
         BE    P2SKP4                   BR IF SO
         LR    WD,WB                    PRESET
         CLC   FSTOP,=CL8' '            ENDING LEVEL PRESENT
         BNE   P2SKP3                   BR IF SO
         MVC   FSTOP,FSTART             SET TO SAME & FIND THEM ALL
P2SKP3   CLC   FSTOP,LEVNAME-LEVEL(WD)  IS THIS ENDING LEVEL?
         BNE   P2SKNL                   BR IF NOT
P2SKLM   AR    WD,RLL                   CHECK FOR MORE
         CR    WD,STOP                  WENT PAST STOPPING LEVEL?
         BH    P2SKTF                   BR IF SO
         CLC   FSTOP,LEVNAME-LEVEL(WD)  ALSO MATCHES?
         BE    P2SKLM                   BR IF SO - CHECK AGAIN
P2SKTF   SR    WD,RLL                   BACK OFF - WENT 1 TOO FAR
         B     P2SKP4                   NOW GO SKIP
P2SKNL   AR    WD,RLL                   NEXT LEVEL
         CR    WD,STOP                  ARE WE STILL WITHIN SUBSET?
         BNH   P2SKP3                   BR BACK IF STILL OK
         MVC   P2SKER+14(8),FSTOP       MOVE IN THE FAULTY LEVEL NAME
         B     P2SKPB                   BACK TO LOG THE ERROR
         SPACE 1
P2SKP4   CR    WA,WB                    SKIP NEVER AFFECTS OWN LEVEL
         BE    P2SKP6
P2SKP5   CLC   SEQ1,CURSEQ-LEVEL(WB)    IS WB'S CARD WITHIN SKIP RANGE?
         BL    P2SKP6                   BR IF NOT
         L     R0,CARDPTR-LEVEL(WB)     R0 --> CARD BEING SKIPPED
P2SKP55  LOG   WARN,0,6,'SKIPPED'
         LR    R1,WB                    SET TO READ ANOTHER CARD FOR WB
         BAL   R14,P2READ               GO READ IT
         B     P2SKP5                   CHECK NEXT CARD
         SPACE 1
P2SKP6   AR    WB,RLL                   NEXT LEVEL
         CR    WB,WD                    THROUGH WITH SUBSET?
         BNH   P2SKP4                   BR IF MORE TO CHECK
         SPACE 1
CTLOUT   MVI   0(WC),C'*'               CHG CTL CARD TO COMMENT FOR ASM
         SPACE 1
CDOUT    LR    R1,WC                    PREPARE TO WRITE IT ONTO SYSUT2
         BAL   R14,P2PUT                GO WRITE IT OUT
         LR    R0,WC                    FOR LOGGING SYSUT2 OUTPUT
         SPACE 1
         MVI   LOGOUT+4,OMNIA           PRESET TO LOG ALL OUTPUT
         CR    WA,SOURCE                IS THIS CARD FROM HASP SOURCE?
         BE    LOGOUT                   BR IF YES
         MVI   LOGOUT+4,LO              SET LOGGING LEVEL A BIT HIGHER
LOGOUT   LOG   *-*,0,8,'OUTPUT ON SYSUT2'
         SPACE 1
P2RWA    LR    R1,WA                    SET TO READ NEXT (WA) CARD
         BAL   R14,P2READ               GO DO IT
         B     P2NCARD                  PROCESS NEXT CARD
 TITLE '-----  MERGE UPDATES  -----  PASS2  --  CARD READ ROUTINE' LDW1
         SPACE 2
*        CALLING SEQUENCE:
*        LA    R1,LEVEL ENTRY
*        BAL   R14,P2READ
*        (RETURN HERE WITH LEVEL ENTRY UPDATED)
         SPACE 2
P2READ   DS    0H
         STM   R2,R14,P2RSAVE           SAVE ALL REGS
         CLC   CURSEQ-LEVEL(8,R1),MAXSEQ  PLAY SAFE ON EOF
         BER   R14
         SPACE 1
         LR    WA,R1                    WA --> LEVEL ENTRY
         CR    R1,SOURCE                SOURCE READ?
         BE    RDHASP                   BR IF SO
         LH    WB,BLKINCR               GET OFFSET TO CARD WITHIN BUFF
         L     WD,BUFPTR                POINT WD TO BUFFER TO FILL
         SPACE 1
P2NOTHER LA    WB,80(,WB)               BUMP TO NEXT CARD
         CH    WB,CURBLOK               STILL WITHIN BLOCK?
         BL    P2RDOK                   BR IF SO
         POINT SYSIN,CURTTR             POINT TO NEXT BLOCK TO READ
         READ  P2DECB,SF,SYSIN,(WD),'S'
         CHECK P2DECB                   DID READ COMPLETE OK?
         NOTE  SYSIN                    FIND OUT WHERE WE ARE
         ST    R1,CURTTR                REMEMBER IT FOR NEXT TIME
         MVI   CURTTR+3,1               INDICATE FOLLOWING RECORD
         LH    WB,BLKINCR            JUST IN CASE WE'RE PRIMING THE LVL
         CLC   CURSEQ,MINSEQ            SEE IF THE LVL IS BEING PRIMED
         BE    P2RIME                   YES - DON'T RESET THE COUNT
         SR    WB,WB                    OFFSET IN BUFR IS NOW ZERO
P2RIME   LH    WC,SYSIN+DCBBLKSI-IHADCB GET MAX BLOCKSIZE
         L     R1,P2DECB+16             R1 --> IOB
         SH    WC,14(,R1)               SUBTRACT RESIDUAL COUNT
         STH   WC,CURBLOK               SAVE CURRENT BLOCK SIZE
P2RDOK   STH   WB,BLKINCR               STORE INCR WITHIN BLOCK
         LA    R1,0(WB,WD)              POINT R1 TO CARD IMAGE
         ST    R1,CARDPTR               SAVE POINTER TO CARD
         CR    WA,SOURCE                READING SOURCE?
         BE    P2SETCUR                 BR IF SO
         CLC   0(3,R1),=C'./ '          CONTROL CARD?
         BNE   P2NCHG                   BR IF NOT
         LA    R0,72(,R1)               SET FOR SCAN
         BAL   R14,SCANVERB             SCAN FOR VERB
         CLC   SCANOUT(8),=CL8'LEVEL'   LEVEL CARD?
         BE    P2SKIPCC                 BR IF SO
         CLC   SCANOUT(8),=CL8'CHNGE'
         BE    P2SKIPCC
         CLC   SCANOUT(8),=CL8'CHANGE'
         BE    P2SKIPCC
         CLC   SCANOUT(8),=CL8'ADD'
         BE    P2SKIPCC
         CLC   SCANOUT(8),=CL8'REPL'
         BNE   P2NCHG
P2SKIPCC CLC   CURSEQ(8),MINSEQ         ANOTHER MODULE?
         BNE   P2EODAD                  FORCE END OF FILE IF DIFFERENT
P2RCSEQ  MVI   CURSEQ+7,1               CLOBBER MINSEQ
         B     P2NOTHER                 IF FIRST CARD RD AGAIN
         SPACE 1
P2NCHG   L     R1,CARDPTR               RESTORE POINTER TO CARD
         SPACE 1
*        NOW WE WILL MOVE IN AS MUCH OF THE LEVEL-ID AS WILL FIT
*        IN COLUMNS 64/71 WITHOUT DISTURBING ANYTHING THAT'S THERE
*        ALREADY
         SPACE 1
         CLI   71(R1),C' '              CARD IS CONTINUED?
         BNE   P2RPDON                  BR IF SO
         LA    R0,8                     LOOP CONTROL
         LA    WD,LEVNAME+7             LO-ORDER BYTE OF LEVEL NAME
         LA    WE,69(,R1)               COLUMN 70
P2RCLI   CLI   0(WD),C' '               BLANK?
         BNE   P2RMLP                   BR IF NOT
         BCTR  WD,0                     LEFT ONE
         BCT   R0,P2RCLI                BACK FOR NEXT
         B     P2RPDON                  IMPOSSIBLE
P2RMLP   CLI   0(WE),C' '               BLANK?
         BNE   P2RPDON                  BR IF NOT
         MVC   1(1,WE),0(WD)            MOVE A CHARACTER
         BCTR  WD,0                     LEFT ONE
         BCTR  WE,0                     LEFT ONE
         BCT   R0,P2RMLP                BACK FOR NEXT
P2RPDON  DS    0H
         CLC   0(3,R1),=C'./ '          A CONTROL CARD?
         BNE   P2CKSEQ                  IF NOT SEQUENCE MUST BE GOOD
         LA    R0,72(,R1)               SET FOR SCANNING
         BAL   R14,SCANVERB             GET THE VERB
         CLC   SCANOUT(8),=CL8'DELET'   DELET CARD?
         BE    *+14                     BR IF SO
         CLC   SCANOUT(8),=CL8'DELETE'
         BNE   P2ROCTL
         BAL   R14,SCANDEL              SCAN OPERANDS
         L     R1,CARDPTR
         CLC   CDSEQ-CARD(8,R1),=CL8' ' SEQ MISSING IS OK TOO
         BE    P2DELB                   CONTINUE PROCESSING
         CLC   DELSEQ1(8),CDSEQ-CARD(R1)  IS IT WHERE IT BELONGS?
         BE    P2CKSEQ                  BR IF IT'S IN SEQUENCE
         L     R0,CARDPTR
         LOG   ERR,20,10,'SEQUENCE MISMATCH  *** ERROR'
         B     P2EODAD                  FORCE END OF LEVEL
P2DELB   MVC   CDSEQ-CARD(8,R1),DELSEQ1 SET SEQUENCE COLUMNS
         SPACE 1
P2CKSEQ  DS    0H
         CLC   0(3,R1),=C'./*'          COMMENT?
         BE    P2REXIT                  LEAVE SEQUENCE UNDISTURBED
         CLC   CDSEQ-CARD(8,R1),=CL8' ' BLANK SEQUENCE NUMBER?     LDW1
         BE    P2BLSEQ                  YES - GO PROCESS           LDW1
         CLC   CURSEQ(8),CDSEQ-CARD(R1) CHECK SEQ AGAINST CURRENT SEQ
         BL    P2SETCUR                 INCREASE IS OK
         BH    P2RSEQNG                 DECREASE IS NO GOOD
         CLI   SUPPL,0                  PREV CD ./ DELET OR ./ SKIP?
         BNE   P2RPT                    BR IF NOT
         CLC   0(3,R1),=C'./ '          CONTROL CARD?
         BNE   P2SETCUR                 BR IF NOT
         LA    R0,72(,R1)
         BAL   R14,SCANVERB             GET VERB
         CLC   SCANOUT(8),=CL8'DELET'   DELET CARD?
         BE    P2RPT                    STOMP IF DELETE
         CLC   SCANOUT(8),=CL8'DELETE'
         BNE   P2SETCUR                 DELETE FOLL BY OTHER CTL IS OK
P2RPT    L     R0,CARDPTR
         LOG   ERR,20,,'SEQUENCE REPEAT  *** ERROR'
         B     P2SETCUR
         SPACE 1
P2RSEQNG L     R0,CARDPTR
         LOG   ERR,20,,'SEQUENCE DECREASE  *** ERROR'
         B     P2EODAD                  FORCE END OF LEVEL
         SPACE 1
P2ROCTL  L     R1,CARDPTR
         CLC   CDSEQ-CARD(8,R1),=CL8' ' SEQUENCE NUMBER MISSING
         BNE   P2CKSEQ                  NO - THEN IT BETTER BE RIGHT
         B     P2REXIT
         SPACE 2
P2SETCUR L     R1,CARDPTR
         MVC   CURSEQ,CDSEQ-CARD(R1)    SET CURRENT SEQ IN LEVEL ENTRY
         MVI   SUPPL,C'0'               SET SEQ FILED EXTENSION
P2BLSEQ  CLC   0(3,R1),=C'./ '          CONTROL CARD?              LDW1
         BNE   P2REXIT                  BR IF NOT
         LA    R0,71(,R1)               SET TERMINATOR
         BAL   R14,SCANVERB             PICK OFF THE VERB
         CLC   SCANOUT(8),=CL8'SKIP'
         BE    P2RCLOB                  BR IF SKIP
         CLC   SCANOUT(8),=CL8'DELET'
         BE    P2RCLOB                  BR IF DELET
         CLC   SCANOUT(8),=CL8'DELETE'
         BNE   P2REXIT                  FALL THROUGH IF DELETE
P2RCLOB  MVI   SUPPL,0                  FORCE DELET PROCESSING FIRST
P2REXIT  DS    0H
         L     R1,CARDPTR               RESET
         LM    R2,R14,P2RSAVE           RESTORE ALL REGS
         BR    R14
         SPACE 1
P2EODAD  MVC   CURSEQ,MAXSEQ            SET MAXIMUM SEQUENCE NUMBER
         B     P2REXIT
         SPACE 1
RDHASP   DS    0H
         LH    WB,BLKINCR               GET BUFFER OFFSET
         L     WD,BUFPTR-LEVEL(,SOURCE) BUFFER ORIGIN
         LA    WB,80(,WB)               COUNT RECORD
         CH    WB,CURBLOK               TEST AGAINST END
         BL    P2RDOK                   BR IF IN BUFFER
         CHECK P2DECBX                  CHECK PREVIOUS I/O OP
         LH    WC,SYSUT1+(DCBBLKSI-IHADCB)  GET BLKSIZE
         L     R1,P2DECBX+16            POINT TO IOB
         SH    WC,14(,R1)               SUBTR RESID BYTE COUNT
         STH   WC,CURBLOK               SAVE COUNT READ
         L     R1,P2DECBX+12            BUFFER ADDR.
         ST    WD,P2DECBX+12            NEW BUFFER PTR
         LR    WD,R1                    LOAD BUFFER REGISTER
         ST    WD,BUFPTR                SAVE IT
         READ  P2DECBX,SF,SYSUT1,*-*,'S'  START NEXT I/O
         SR    WB,WB
         B     P2RDOK
 TITLE '-----  MERGE UPDATES  -----  PASS2  --  MSG LOGGING SUBROUTINE'
         SPACE 2
*        CALLING SEQUENCE:
*        R1 -->AL1(MSG LEV,COND CODE,SPACING GROUP,MSG LGTH)
*              C'MESSAGE'
*        R0 -->CARD IMAGE TO LOG  (0 IF NO CARD TO PRINT)
*        R14 --> RETURN ADDRESS
         SPACE 1
LOG      DS    0H
         STM   WA,WB,LOGSAVE
         ST    R14,LOGSR14              SAVE THE REGS WE CLOBBER
         SPACE 1
         CLC   1(1,R1),HEXCODE+3        COND CODE : CURRENT CODE
         BNH   LOGCDOK                  BR IF NO CHANGE NECESSARY
         MVC   HEXCODE+3,1(R1)          REPLACE CURRENT CODE
         L     WA,HEXCODE               PICK IT UP
         CVD   WA,DBLWK
         UNPK  CHCODE,DBLWK             CONVERT TO EBCDIC FORMAT
         OI    CHCODE+1,X'F0'           FIX UP THE LO-ORDER ZONE
         SPACE 1
LOGCDOK  MVC   TEMPCODE,1(R1)           SAVE FOR LATER CHECK
         SR    WA,WA                    CLEAR WA
         IC    WA,0(R1)                 INSERT MESSAGE LOGGING LEVEL
         CVD   WA,DBLWK                 CONVERT TO DECIMAL
         UNPK  MSGLEV,DBLWK             AND TO EBCDIC
         OI    MSGLEV+1,X'F0'           FIX UP THE ZONE
         CLC   MSGLEV,CURLOG            COMPARE TO THRESHOLD
         BL    LOGETST                  BR IF HE'S NOT INTERESTED
         SPACE 1
         MVI   PLINE,X'40'              SET TO BLANK PRINT LINE
         MVC   PLINE+1(132),PLINE       DO IT
         SPACE 1
         IC    WA,3(R1)                 PICK UP MESSAGE LENGTH
         LR    WB,WA                    THIS ONE USED FOR MOVING MSG
         LCR   WA,WA                    SO WE CAN RIGHT JUSTIFY THE MSG
         A     WA,=A(PLINE+132)         SET STARTING LOC FOR MOVE
         LTR   WB,WB                    IS THERE A MESSAGE?
         BZ    LOGNOMSG                 BR IF NO
         BCTR  WB,0                     SO MVC WILL BE HAPPY
         STC   WB,*+L'*+1               STORE THE LENGTH
         MVC   0(*-*,WA),4(R1)          MOVE THE MESSAGE
LOGNOMSG DS    0H
         LTR   WA,R0                    POINT TO CARD IMAGE
         BZ    LOGMCARD                 IS THERE ONE? BR IF NO
         MVC   PLINE+1(80),0(WA)        MOVE IN THE CARD IMAGE
LOGMCARD DS    0H
         MVC   TEMPSP,2(R1)             TEMP COPY OF SPACING GROUP
         NI    TEMPSP,254               TURN OFF LO-ORDER BIT
         CLI   SAVSPACE,0               LAST TIME HAD GROUP ZERO?
         BE    LOGDUBL                  BR IF SO
         CLI   2(R1),0                  THIS TIME HAS GROUP ZERO?
         BE    LOGDUBL                  BR IF SO
         TM    2(R1),1                  DUBL SPACE REQUEST?
         BO    LOGDUBL                  BR IF SO
         CLC   SAVSPACE,2(R1)           SAME GROUP?
         BE    LOGSINGL                 SKIP DUBL SPACE
LOGDUBL  MVI   PLINE,C'0'               SET DOUBLE SPACE CC
LOGSINGL MVC   SAVSPACE,TEMPSP          REMEMBER THIS SPACING GROUP
         L     WA,LOGLNES               PICK UP LINES REMAINING ON PAGE
         BCTR  WA,0                     DECR BY 1
         CLI   PLINE,C'0'               DOUBL SPACE?
         BNE   LOG1                     BR IF NOT
         BCTR  WA,0                     DECR BY ANOTHER 1
LOG1     LTR   WA,WA
         BNP   LOGPGHD                  BR IF HEADER NEEDED
LOGHDOK  ST    WA,LOGLNES               SAVE LINES TO GO ON PAGE
         PUT   SYSPRINT,PLINE           WRITE OUT THE LINE
LOGETST  CLI   TEMPCODE,0               IS ERROR DIAGNOSTIC?
         BE    LOGEXIT                  BR IF NOT
         MVI   PLINE,C' '               SETUP TO DOCTOR LINE FOR SUMMRY
         L     WA,ERRLNES               GET LINES REMAINING ON ERR PAGE
         BCTR  WA,0                     DECR BY 1
         LTR   WA,WA                    ZERO?
         BP    LENOHDR                  BR IF NOT
         PUT   ERRORS,PHDR2A            WRITE FIRST ERROR LINE
         PUT   ERRORS,PHDR2B            WRITE SECOND ERROR HEADER
         MVI   PLINE,C'0'               SET FOR DOUBLE SPACE
         LA    WA,52                    SET LINES ON NEXT PAGE
LENOHDR  ST    WA,ERRLNES               STORE LINES LEFT
         MVC   CARD,PLINE+1             COPY CARD FOR ERROR LOGGING
         MVI   PLINE+1,C' '             SET TO BLANK WHERE IT CAME FROM
         MVC   PLINE+2(80),PLINE+1      BLANK FIELD
         MVC   PLINE+PHCARD(80),CARD    MOVE IT BACK IN
         MVC   PLINE+PHMOD(8),CURMOD    INSERT MODULE NAME
         MVC   PLINE+PHPAGE(4),PPG      PAGE WHERE ERROR HAPPENED
         PUT ERRORS,PLINE               PUT OUT SUMMARY LINE
LOGEXIT  LM    WA,WB,LOGSAVE
         L     R14,LOGSR14              RESTORE REGS USED
         BR    R14
         SPACE 1
LOGPGHD  L     WA,LOGPGS                PREPARE PAGE SOUNT
         LA    WA,1(,WA)                UP BY 1
         ST    WA,LOGPGS                SAVE IT
         CVD   WA,DBLWK                 TO DECIMAL
         MVC   PPG(4),=X'40202020'      EDIT MASK
         ED    PPG(4),DBLWK+6           MOVE IT IN
         MVC   PMOD,CURMOD              SET MODULE NAME
         PUT   SYSPRINT,PHDR1           WRITE THE HEADER
         MVI   PLINE,C'0'               FORCE DOUBLE SPACE
         LA    WA,55                    LINES PER PAGE
         B     LOGHDOK                  BACK TO PRINT THE MESSAGE
 TITLE '-----  MERGE UPDATES  -----  PASS2  --  CARD OUTPUT SUBROUTINE'
         SPACE 2
*        CALLING SEQUENCE:
*
*        R1 --> CARD IMAGE TO OUTPUT OR 0 IF REQUEST TO FLUSH MODULE
*        R14 --> RETURN
*
P2PUT    STM   WA,WB,PUTSAVE            STORE USED REGS
         ST    R14,PUTR14
         L     WA,OBLKCNT               POINT TO SLOT IN OUTPUT BLOCK
         LR    WB,R1                    POINT WB TO CARD
         C     WA,SIZE3                 STILL WITHIN BUFFER?
         BNL   PUTWRT                   BR IF NOT
         LTR   WB,WB                    FLUSH REQUEST?
         BNZ   PUTMOVE                  BR IF NOT
         SPACE 1
PUTWRT   DS    0H
         LTR   WA,WA                    VOID MODULE?
         BNP   PUTEMTY                  BR IF SO
         STH   WA,SYSUT2+DCBBLKSI-IHADCB  IN THE DCB
         L     WA,SYST2BF               SET FOR OUTPU LOCATION
         SPACE 1
         WRITE P2WDECB,SF,SYSUT2,(WA),'S'
         CHECK P2WDECB                  CHECK FOR COMPLETION
         CLC   NOTESLOT,=F'0'           ARE WE SUPPOSED TO DO A NOTE
         BNE   PUTNONO                  BR IF NOT
         NOTE  SYSUT2                   DO THE NOTE
         ST    R1,NOTESLOT              AND REMEMBER IT
         SPACE 1
PUTNONO  DS    0H
         SR    WA,WA                    RESET COUNT
         LTR   WB,WB                    IS THERE A CARD TO WRITE?
         BZ    PUTSTOW                  NO - GO STOW (HO HO)
PUTMOVE  L     R14,SYST2BF              BUFFER LOCATION
         LA    R14,0(WA,R14)            ADD OFFSET
         MVC   0(80,R14),0(WB)          MOVE IN THE CARD
         LA    WA,80(,WA)               INCREAMENT OUPUT COUNT
         ST    WA,OBLKCNT               AND REMEMBER ADDR FOR NEXT TIME
PUTEXIT  LM    WA,WB,PUTSAVE
         L     R14,PUTR14
         BR    R14                      RETURN TO CALLER
         SPACE 1
PUTSTOW  DS    0H
         MVC   STOWMOD,CURMOD           SET MEMBER FOR STOW
         MVC   STOWTTR,NOTESLOT         SET TTR FOR STOW
         TM    REPLSW,1                 REPLACE OPTION?            LDW1
         BO    PSTOWREP                 YES - DO IT                LDW1
         STOW  SYSUT2,STOWREQ           RECORD THE MODULE'S TTR
         LTR   R15,R15                  STOW OK?
         BZ    PSTOWED                  YES - CONTINUE             LDW1
         B     STOWERR                  NO                         LDW1
         SPACE 1
PSTOWREP STOW  SYSUT2,STOWREQ,R         CHANGE THE MODULE'S TTR    LDW1
         CH    R15,=H'8'                ADDED?                     LDW1
         BE    PSTOWED                  YES                        LDW1
         LTR   R15,R15                  REPLACED?                  LDW1
         BNZ   STOWERR                  NO - ERROR                 LDW1
         MVC   PSTOWX2+8(8),CURMOD      MOVE IN MODULE NAME        LDW1
         SR    R0,R0                    NO CARD TO LOG             LDW1
PSTOWX2  LOG   HIGH,,,'XXXXXXXX REPLACED ON SYSUT2'                LDW1
         B     PSTOWOK                  CONTINUE                   LDW1
PSTOWED  MVC   PSTOWX+8(8),CURMOD       MOVE IN MODULE NAME
         SR    R0,R0                    NO CARD TO LOG
PSTOWX   LOG   HIGH,,,'XXXXXXXX ADDED TO SYSUT2'                   LDW1
PSTOWOK  MVC   NOTESLOT,=F'0'           ZERO WILL FORCE NOTE NEXT TIME
         XC    OBLKCNT,OBLKCNT          CLEAR OUTPUT COUNT
         B     PUTEXIT
         SPACE 1
STOWERR  MVC   PSTOWE+24(8),CURMOD      SET NAME OF OFFENDING MODULE
PSTOWE   LOG   ERR,16,,'STOW FAILED FOR XXXXXXXX  *** ERROR'
         B     ABEND                    END IT ALL
*
PUTEMTY  MVC   PMTERR+15(8),CURMOD      SET NAME OF EMPTY MODULE
         SR    R0,R0                    INDICATE NO CARD IMAGE
PMTERR   LOG   WARN,4,,'MODULE XXXXXXXX HAS NO CARDS'
         B     PUTEXIT                  AVOID STOWING TTR
 TITLE '-----  MERGE UPDATES  -----  PASS2  --  SCAN TO BLANK OR COMMA'
         SPACE 2
*        CALLING SEQUENCE:
*        LA    R0,LAST-BYTE-OF-CARD+1
*        LA    R1,HI-ORDER-BYTE
*        BAL   R14,SCANFLD
*        RETURN HERE WITH R1 POINTING TO BYTE WHERE SCAN STOPPED
         SPACE 3
SCANFLD  STM   R2,R4,SCANSAVE           SAVE REGISTERS USED
         MVC   SCANOUT,=CL8' '          INITIALIZE OUTPUT FILED
         LR    R2,R1                    REMEMBERS STARTING POINT
         LA    R3,8                     MAX BYTES TO SCAN
SCCLI    CR    R1,R0                    END OF CARD?
         BE    SCOVR                    BR IF SO
         CLI   0(R1),X'40'              FOUND A BLANK?
         BE    SCOVR                    BR OUT OF LOOP IF SO
         CLI   0(R1),C','               FOUND A COMMA?
         BE    SCOVR                    SAME TREATMENT
         LA    R1,1(,R1)                MUST BE A VALID CHARACTER
         BCT   R3,SCCLI                 COUNT DOWN BY 1
SCOVR    DS    0H
         LR    R3,R1                    COMPUTE THE
         SR    R3,R2                    NUMBER OF VALID CHARACTERS
         BZ    SCNOMOV                  ZERO ==> WE'RE ALL SET
         BCTR  R3,0                     360
         STC   R3,*+L'*+1               STORE THE LENGTH
         MVC   SCANOUT(0),0(R2)         MOVE WHAT WE FOUND
SCNOMOV  LM    R2,R4,SCANSAVE           RESTORE THE REGS WE USED
*
*    SCAN NON-BLANKS AND NON-COMMANDS
*
SCANNBC  CR    R1,R0                    END OF CARD?
         BNLR  R14                      BR IF SO
         CLI   0(R1),C' '               END OF FIELD?
         BER   R14                      BR IF SO
         CLI   0(R1),C','               COMMA?
         LA    R1,1(,R1)                NEXT CHARACTER
         BNE   SCANNBC                  BR IF NOT COMMA
         BR    R14
         SPACE 1
SCANRTN  DC    A(0)                     DS
SCANSAVE DC    3F'0'                    DS
SCANOUT  DC    CL8' '                   DS
         SPACE 1
*    SCAN BLANKS AND COMMAS
*
SCANCB   CR    R1,R0                    END OF CARD?
         BNLR  R14                      BR IF SO
         CLI   0(R1),C' '               BLANK?
         BE    *+10                     BR IF SO
         CLI   0(R1),C','               COMMA?
         BNER  R14                      BR IF NOT
         LA    R1,1(,R1)                NEXT CHARACTER
         B     SCANCB
         EJECT
*    SCAN FOR CONTROL CARD VERB
*
SCANVERB ST    R14,SCANRTN
         BAL   R14,SCANNBC              SKIP LABEL
         BAL   R14,SCANCB               GO TO VERB
         BAL   R14,SCANFLD              GET THE VERB
         BAL   R14,SCANCB               SKIP TO OPERANDS
         L     R14,SCANRTN
         BR    R14                      RETURN
         EJECT
*    SCAN DELETE OPERANDS
*
SCANDEL  ST    R14,SCANRTN              SAVE RETURNS
         CLC   SCANOUT,=CL8'DELETE'     IEBUPDTE?
         BE    SCANDDTE                 BR IF SO
         BAL   R14,SCANFLD              GET 1ST SEQUENCE
         MVC   DELSEQ1(8),SCANOUT       SAVE IT
         BAL   R14,SCANFLD              GET 2ND SEQUENCE
         MVC   DELSEQ2(8),SCANOUT       SAVE IT
SCANDXIT CLI   DELSEQ2,C' '             2ND SEQUENCE GIVEN?
         BNE   *+10                     BR IF SO
         MVC   DELSEQ2(8),DELSEQ1       MAKE BOTH SAME
         L     R14,SCANRTN              RETURN
         BR    R14
*
SCANDDTE MVC   DELSEQ1(8),=CL8' '       CLEAR SEQ FIELDS
         MVC   DELSEQ2(8),=CL8' '
SCANDKW  CR    R1,R0                    END OF CARD?
         BNL   SCANDXIT                 BR IF SO
         CLI   0(R1),C' '               END OF OPERANDS?
         BE    SCANDXIT                 BR IF SO
         CLC   0(5,R1),=C'SEQ1='        1ST SEQ?
         BE    SCANDS1                  BR IF SO
         CLC   0(5,R1),=C'SEQ2='        2ND SEQ?
         BE    SCANDS2                  BR IF SO
         BAL   R14,SCANNBC              SKIP THE FIELD
         B     SCANDKW                  TRY AGAIN
*
SCANDS1  LA    R1,5(,R1)                SKIP KEYWORD
         BAL   R14,SCANFLD              GET SEQ NO.
         MVC   DELSEQ1(8),SCANOUT       SAVE IT
         B     SCANDKW                  CONTINUE
*
SCANDS2  LA    R1,5(,R1)                SKIP KEYWORD
         BAL   R14,SCANFLD              GET SEQ NO.
         MVC   DELSEQ2(8),SCANOUT       SAVE IT
         B     SCANDKW                  CONTINUE
         TITLE '-----  MERGE UPDATES  -----  CONSTANTS, ETC.'      LDW1
         SPACE 2
ERR      EQU   9
HIGH     EQU   7
WARN     EQU   5
NOTE     EQU   3
LO       EQU   1
OMNIA    EQU   0
         SPACE 1
ORIGLOG  DC    C'01'                    ORIGINAL LOGGING LEVEL
CURLOG   DC    C'01'                    CURRENT LOGGING LEVEL
         SPACE 1
HEXCODE  DC    F'0'                     COMPLETION CODE
CHCODE   DC    C'00'                    EBCDIC COMPLETION CODE
TEMPCODE DC    X'00'                    SAVED FOR COMPARISON
         SPACE 1
CURLEVEL DC    CL8'        '
CURMOD   DC    CL8' '                   CURRENT MODULE
FSTART   DC    CL8' '                   DS
FSTOP    DC    CL8' '                   DS
WSTR     DC    CL7' '
         SPACE 1
SEQ1     DC    CL8' '                   DS
SEQ2     DC    CL8' '                   DS
DELSEQ1  DC    CL8' '                   DS
DELSEQ2  DC    CL8' '                   DS
         SPACE 1
DBLWK    DC    D'0'                     DS
MSGLEV   DC    CL2' '                   DS
SAVSPACE DC    X'00'                    DS
TEMPSP   DC    X'00'                    DS
LOGSAVE  DC    2F'0'                    DS
LOGSR14  DC    F'0'                     DS
LOGPGS   DC    F'0'                     PAGES ON MAIN LISTING
         SPACE 2
PHDR1    DC    CL133'1M E R G U P D   4.0   (HSPMERGE)    MODULE:  '
         ORG   PHDR1+46
PMOD     DC    CL8' '
         ORG   PHDR1+133-13
         DC    C'PAGE '
PPG      DC    CL4' '
         ORG   ,
         SPACE 2
PHDR2A   DC   CL133'1M E R G U P D   4.0   (HSPMERGE)    ERROR SUMMARY'
         SPACE 2
PHDR2B   DC    C'-'
PHMOD    EQU   *-PHDR2B
         DC    C'MODULE    '
PHPAGE   EQU   *-PHDR2B
         DC    C'PAGE  '
PHCARD   EQU   *-PHDR2B
         DC    CL82'CARD'
PHMSG    EQU   *-PHDR2B
         DC    CL50'MESSAGE'
         SPACE 1
MINSEQ   DC    X'0000000000000000'      INITIAL SEQUENCE NUMBER
MAXSEQ   DC    X'FFFFFFFFFFFFFFFF'      INDICATES EOF
         SPACE 1
CARD     DC    CL80' '                  DS
         ORG   *-8-1-8
CDLEVEL  DS    CL8
         DS    C
CDSEQ    DS    CL8
CDCK     EQU   *-CARD
         SPACE 1
OVFLGS   DS    X
OVERRID  EQU   X'80'
DIFFRNT  EQU   X'40'
         SPACE 1
MERGSAVE DC    18F'0'                   DS
         SPACE 1
P2RSAVE  DC    13F'0'                   DS
PLINE    DC    CL133' '                 DS
LOGLNES  DC    F'0'
PUTSAVE  DC    2F'0'                    DS
PUTR14   DC    F'0'                     DS
NOTESLOT DC    F'0'
ERRLNES  DC    F'0'
         SPACE 1
OBLKCNT  DC    A(0)                     INITIAL SETTING
         SPACE 1
STOWREQ  DC    0F'0'                    DS
STOWMOD  DC    CL8' '                   DS
STOWTTR  DC    CL3' '                   DS
STOWC    DC    X'00'                    CONSTANT FOR STOW MACRO
         EJECT
SIZE1    DC    A(0)                     SYSIN BUFFER SIZE(TOTAL)
SIZE2    DC    A(0)                     SYSUT1 BUFFER SIZE
SIZE3    DC    A(0)                     SYSUT2 BUFFER SIZE
         SPACE 5
LOCS1    DC    0F'0'                    DS
SYSINBF  DC    A(0)                     SYSIN BUFFER ORIGIN
SYST1BF  DC    A(0)                     ORIGINAL PDS BUFFER
SYST2BF  DC    A(0)                     NEW PDS BUFFER
         SPACE 1
         EJECT
         SPACE 1
SYSIN    DCB   DDNAME=SYSIN,RECFM=U,DSORG=PS,MACRF=(RP),EODAD=PASS2
         SPACE 6
SYSUT1   DCB   DDNAME=SYSUT1,RECFM=FB,MACRF=R,EODAD=P2EODAD,DSORG=PO
         SPACE 6
SYSUT2   DCB   DSORG=PO,DDNAME=SYSUT2,MACRF=W
         SPACE 6
ERRORS   DCB   DDNAME=ERRORS,RECFM=FBA,LRECL=133,BLKSIZE=133,MACRF=PM, X
               DSORG=PS
         SPACE 6
SYSPRINT DCB   DDNAME=SYSPRINT,RECFM=FBA,MACRF=PM,DSORG=PS
         EJECT
         DCBD  DSORG=PS
         EJECT
MERGUPD  CSECT                                                     LDW1
         SPACE 1
         LTORG
         EJECT
HASPSRC  DC    0F'0'                    DS
         DC    X'AAAAAAAAAAAAAAAA'      MODULE
         DC    C'SOURCE  '              LEVEL NAME
         DC    A(0)                     CARDPTR
         DC    F'0'                     CURTTR
         DC    A(0)                     BUFPTR (ALTERNATE)
         DC    F'0'                     CURBLOK/BLKINCR
         DC    CL8' '                   CURSEQ
         DC    F'0'                     SUPPL/TYPE/2 DUMMIES
         SPACE 1
         GENLEVS &TOTCHNG
         SPACE 1
         END
