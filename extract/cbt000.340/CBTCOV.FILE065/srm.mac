SRM      TITLE 'SUPER SRM DISPLAY COMMAND FOR TSO'
*********************************************************************
*                                                                   *
*    THIS TSO COMMAND WILL DISPLAY CERTAIN SRM VALUES               *
*                                                                   *
*     THE FORMAT OF THE DISPLAY IS:                                 *
*                                                                   *
*   SYSTEM = TYPE-ID(SERIAL #)   TIME = HH.MM.SS  CF PF             *
*   IPL DATE = MM-DD-YY  IPL TIME= HH.MM.SS                         *
*                                                                   *
*   CPU  PFR  DPR TPR IN  AS  ENQ  LCPU                             *
*      **VALUES**                                                   *
*   UIC  AFC  FPC  SQA  C/L  UFC  DFA  AVL  UFC  DFA  ASMQ          *
*      **VALUES**                                                   *
*   ACSA  TCSA  ASQA  TSQA  PDLY LCH  AVQL                          *
*      **VALUES**                                                   *
*   CSAL  CSAF  SQAL  SQAF  DQE  CWSS CPAG                          *
*      **VALUES**                                                   *
*   PLPA  MLPA  BLDL  FLPA  FBLDL                                   *
*      **VALUES**                                                   *
*   REAL  V=R  NUC  PVT  IPS NID CPUS                               *
*      **VALUES**                                                   *
*   SMF  SMFB  SMFF  SMFL  SMFH                                     *
*      **VALUES**                                                   *
*   SLOTS FREE VIOS NVIOS BAD RESV PCCW                             *
*      **VALUES**                                                   *
*                                                                   *
*   ACSA  - ALLOCATED CSA (IN USE)                                  *
*   AFC  - AVAILABLE FRAME COUNT -AVERAGE- (PVTAFC)                 *
*   AS   - TOTAL ADDRESS SPACES IN SYSTEM                           *
*   ASMQ - ASM Q LENGTH - ASM I/O'S OUTSTO'S OUTSTANDING (RCVASMQA) *
*   ASQA  - ALLOCATED SQA (IN USE)                                  *
*   AVQL - AVAILABLE FRAME QUEUE LOW COUNT (RCVAVQC)                *
*   BAD   - TOTAL SLOTS FOUND TO BE IN ERROR  (ASMERRS)             *
*   BLDL  - SIZE OF BLDL TABLE        PLANNED                       *
*   C/L  - FRAMES ALLOCATED TO CSA AND LPA  (PVTCFMCT)              *
*   CPU  - CURRENT SRM DETERMINED CPU UTILIZATION (CCVUTILP)        *
*   CPUS - NUMBER OF ONLINE CPUS                  (CCVCPUCT)        *
*   CSAL - CURRENT LARGEST FREE FRAGMENT OF CSA                     *
*   CSAF - CURRENT # OF CSA FRAGMENTS                               *
*   CWSS - CURRENT TARGET WORKING SET FOR COMMON                    *
*   CPAG - CURRENT PAGE IN RATE FOR COMMON                          *
*   DFA  - DEFERRED FRAME ALLOCATION COUNT (CUMULATIVE)-(PVTDFRS)   *
*   DQE   - SQA DQE COUNT                                           *
*           A COUNT OF 2 OR MORE INDICATES SQA HAS EXPANDED INTO CSA*
*           SEE THE TSQA VALUE FOR AN INDICATION OF NEW IEASYSXX    *
*           ENTRY ( 1 SEGMENT = 64K )                               *
*   ENQ  - USERS NSW DUE TO HOLDING AN EXCL-ENQ (CCVENQCT)          *
*          A HIGH COUNT HERE CAN INDICATE NOT ENOUGH REAL STORAGE   *
*   FBLDL - SIZE OF FIXED BLDL TABLE  PLANNED                       *
*   FLPA  - SIZE OF FIXED LPA         COMBINED FLPA AND FBLDL       *
*   FPC  - FIXED PAGE COUNT (PVTCNTFX) TOTAL FIXED PAGE FRAME COUNT *
*   IN   - IN USERS  (RMCAINUS)                                     *
*   IPS  - CURRENT IPS VALUE FROM PARMLIB                           *
*   LCH  - LOGICAL CHANNEL UTILIZATION - HIGH AVERAGE (RCVTOTDF)    *
*   LCPU - LONG TERM SRM CPU UTILIZATION  (CCVLGUTL)                *
*   LPA   - TOTAL ALLOCATED PLPA                                    *
*   MLPA  - SIZE OF MLPA              COMBINED MLPA AND BLDL        *
*   NID   - NUCLEUS ID                                              *
*   NUC   - SIZE OF NUCLEUS                                         *
*   NVIO  - SLOTS ASSIGNED TO NON-VIO  (ASMNVSC)                    *
*   PFR  - PAGING RATE - PAGING/SEC (RCVPTR)                        *
*   DPR  - PAGING RATE - DEMAND PAGING/SEC (RCVDPR)                 *
*   TPR  - PAGING RATE - TOTAL PAGING/SEC (RCVPAGRT)                *
*   PCCW - PAGING CCW COUNT               (ASMPCCWN)               *
*   PDLY - PAGING DELAY TIME IN MS        (RCVMSPP)                *
*   PVT   - PRIVATE AREA SIZE                                       *
*   REAL  - TOTAL REAL MEMORY AVAILABLE                             *
*   RESV  - TOTAL LOCAL SLOTS RESERVED BUT UNUSED (CALCULATED)      *
*   SLOTS - TOTAL LOCAL SLOTS  (ASMSLOTS)                           *
*   SMF  - CURRENT ACTIVE SMF DATASET                               *
*   SMFB - CURRENT # OF SMF BUFFERS IN USE                          *
*   SMFF - CURRENT # OF FULL SMF BUFFERS                            *
*   SMFL - LOW COUNT OF SMF BUFFERS IN USE                          *
*   SMFH - HIGH COUNTO OF SMF BUFFERS IN USE                        *
*   SQA  - FRAMES ALLOCATED TO SQA WHICH ARE FIXED (PVTSQAFX)       *
*   SQAL - CURRENT LARGEST FREE FRAGMENT OF SQA                     *
*   SQAF - CURRENT # OF SQA FRAGMENTS                               *
*   TCSA  - TOTAL ALLOCATED CSA                                     *
*   TSQA  - TOTAL ALLOCATED SQA                                     *
*   UFC  - USABLE FRAME COUNT - TOTAL REAL STORAGE FRMS (PVTPOOL)   *
*   UIC  - UNREFERENCED INTERVAL COUNT -AVERAGE- (RCVUICA)          *
*          A HIGH COUNT = TOO MUCH REAL STORAGE                     *
*   VIOS  - SLOTS ASSIGNED TO VIO   (ASMVSC)                        *
*   V=R   - V=R SIZE                                                *
*                                                                   *
*   CF    - COMMON PAGE DATA-SET HAS OVERFLOWED INTO PLPA PAGE D/S  *
*   PF    - PLPA PAGE DATA-SET HAS OVERFLOWED INTO COMMON PAGE D/S  *
*                                                                   *
*   NOTE: A WARNING MESSAGE IS ISSUED:                              *
*                   IF SMF IS NOT RECORDING                         *
*                   IF PLPA IS FULL                                 *
*                   IF COMMON PAGE D/S IS FULL                      *
*                   IF UCC-1 IS NOT ACTIVE                          *
*                                                                   *
*   THE MVS MACRO LIBRARIES USED : MACLIB AMODGEN PVTMACS           *
*                                                                   *
*   THE TEST FOR UCC-1 IS PERFORMED BY LOADING THE ADDRESS          *
*   OF THE UCC-1 SVC WHICH IS IN THE IEAFIX LIST AND                *
*   CHECKING THE OPTION BITS AT OFFSET X'07'.                       *
*                                                                   *
*                                                                   *
*   FOR TSO THE SCREEN IS ERASED BEFORE THE DISPLAY IS WRITTEN      *
*   NOTE: REMOVE IT FOR MCS OR COMMENT OUT                          *
*                                                                   *
*   WRITTEN BY  LIONEL DYCK                                         *
*               ROCKWELL INTERNATIONAL                              *
*               INFORMATION SYSTEMS CENTER                          *
*               (213) 594-2520                                      *
*                                                                   *
*********************************************************************
         EJECT
*********************************************************************
*                                                                   *
*        LOCAL MACROS FOR THIS PROGRAM ONLY                         *
*                                                                   *
*********************************************************************
         MACRO
         TIMECONV
***********************************************************************
*                                                                     *
*        TIME CONVERSION ROUTINE                                      *
*                                                                     *
*         REGISTER 7 = TIME IN BINARY 100TH SECONDS                   *
*                                                                     *
*        THIS MACRO WILL CONVERT BINARY TIME TO HH.MM.SS              *
*                                                                     *
***********************************************************************
TIMECONV DS    0H
         STM   R6,R9,@SREGS            SAVE REGISTERS USED
         MVI   @HRS+4,C':'
         SR    R6,R6                    CLEAR R6
         D     R6,=F'100'               DIVIDE OUT 100TH SEC
         SR    R6,R6
         D     R6,=F'60'                DIVIDE OUT SECONDS
         LR    R8,R6                    STORE SEC IN R8
         SR    R6,R6
         D     R6,=F'60'                DIVIDE OUT MINUTES
         CVD   R7,@DWORD                CVD
         MVC   @TWORK,@TPAT               &
         ED    @TWORK,@DWORD+5            EDIT
         MVC   @HRS,@TWORK+2              @HRS
         CLC   @HRS,=C'  00'            HOURS PRESENT ?
         BNE   *+10                     NO, BRANCH
         MVC   @HRS(5),=CL5' '          BLANK OUT HOURS
         CVD   R6,@DWORD                CVD
         MVC   @TWORK,@TPAT               &
         ED    @TWORK,@DWORD+5            EDIT
         MVC   @MIN,@TWORK+4             @MIN
         CVD   R8,@DWORD                CVD
         MVC   @TWORK,@TPAT               &
         ED    @TWORK,@DWORD+5            EDIT
         MVC   @SEC,@TWORK+4              SEC
         LM    R6,R9,@SREGS            RELOAD REGISTERS USED
         B     @TEXIT
***********************************************************************
*                                                                     *
*        WORK AREA                                                    *
*                                                                     *
***********************************************************************
@DWORD   DS    D
@TWORK   DS    CL6
@TPAT    DC    X'402020212020'
@TIME    DS    0CL10
@HRS     DS    CL4
         DC    C':'
@MIN     DS    CL2
         DC    C':'
@SEC     DS    CL2
@SREGS   DC    16F'0'
@TEXIT   EQU   *                   END OF TIME CONVERT ROUTINE
         MEND
         EJECT
         MACRO
&LABEL   @M    &FIELDA,&FIELDB
         MVC   &FIELDB,=X'40202021'   MOVE EDIT PATTERN
         LH    R8,&FIELDA             LOAD FIELD TO BE CONVERTED
         CVD   R8,DWK                 CONVERT TO DECIMAL
         ED    &FIELDB,DWK+6          AND EDIT IT INTO WTO
         OI    &FIELDB+3,X'F0'        INSURE NUMERIC
         SPACE
         MEND
         EJECT
         MACRO
&LABEL   @MD   &FIELDA,&FIELDB
         MVC   &FIELDB,=X'40202021'   MOVE EDIT PATTERN
         LH    R8,&FIELDA             LOAD FIELD TO BE CONVERTED
         SRL   R8,8                   DIVIDE BY 256
         CVD   R8,DWK                 CONVERT TO DECIMAL
         ED    &FIELDB,DWK+6          AND EDIT IT INTO WTO
         OI    &FIELDB+3,X'F0'        INSURE NUMERIC
         SPACE
         MEND
         EJECT
         MACRO
&LABEL   @M1   &FIELDA,&FIELDB
         MVC   &FIELDB-1(5),=X'2020202021'   MOVE EDIT PATTERN
         LH    R8,&FIELDA                    LOAD DATA FIELD
         CVD   R8,DWK                        CONVERT TO DECIMAL
         ED    &FIELDB-2(6),DWK+5            AND EDIT IT INTO WTO
         OI    &FIELDB+3,X'F0'               INSURE NUMERIC
         SPACE
         MEND
         EJECT
         MACRO
&LABEL   @MF   &FIELDA,&FIELDB
         MVC   &FIELDB-1(5),=X'2020202021'   MOVE EDIT PATTERN
         L     R8,&FIELDA                    LOAD DATA FIELD
         CVD   R8,DWK                        CONVERT TO DECIMAL
         ED    &FIELDB-2(6),DWK+5            AND EDIT IT INTO WTO
         OI    &FIELDB+3,X'F0'               INSURE NUMERIC
         SPACE
         MEND
         EJECT
         MACRO
&LABEL   @M2   &FIELDA,&FIELDB
         MVC   &FIELDB-1(5),=X'2020202021'   MOVE EDIT PATTERN
         ICM   R8,B'0011',&FIELDA            LOAD DATA FIELD
         CVD   R8,DWK                        CONVERT TO DECIMAL
         ED    &FIELDB-2(6),DWK+5            AND EDIT IT INTO WTO
         OI    &FIELDB+3,X'F0'               INSURE NUMERIC
         SPACE
         MEND
         EJECT
         MACRO
&LABEL   @TPUT &LEN
         XC    TSOECB,TSOECB       CLEAR ECB                *HMD 04/82*
&LABEL   PUTLINE PARM=PTPB,OUTPUT=(&LEN,TERM,SINGLE,DATA),MF=(E,IOPL)
         TM    REPORT+X'30',X'10'  DCB OPEN ?
         BZ    $&SYSNDX           NO
         PUT   REPORT,&LEN
$&SYSNDX EQU *
         SPACE
         MEND
         EJECT
         MACRO
&L       @WTO  &DATA
&L       L     R0,CONSID   LOAD CONSOLE ID
         WTO   MF=(E,&DATA)
         SPACE
         MEND
         EJECT
         MACRO
&L       KFILL  &A,&B,&C
         LCLA   &LEN
         LCLC   &R
         AIF    ('&C'(1,1) NE '(').A
&LEN     SETA   K'&C-2
&R       SETC   '&C'(2,&LEN)
&L       LR     R1,&R
         AGO    .B
.A       ANOP
&L       L      R1,&C
.B       SRL    R1,10
         CVD    R1,DWK
         MVC    FORMAT,EDITK
         ED     FORMAT+1(6),DWK+5
         AIF    ('&A'(1,1) NE '(').C
&LEN     SETA   K'&A-2
&R       SETC   '&A'(2,&LEN)
         MVC    0(&B,&R),FORMAT+8-&B
         AGO    .D
.C       MVC    &A.(&B),FORMAT+8-&B
.D       ANOP
         SPACE
         MEND
*********************************************************************
         EJECT
SRM      TSOENTER REGS=YES,BASE=11,PL=(CPPL,IO),WORK=WORKSIZE,         X
               SP=SUBPOOL                                   *HMD 08/81*
         LR    R12,R11       LOAD SECOND BASE               *HMD 08/81*
         LA    R12,4095(R12) ADD SECOND DISPLACEMENT        *HMD 08/81*
         LA    R12,1(,R12)   JUST A LITTLE MORE             *HMD 08/81*
         LDROP R11           WE'LL GET IT BACK SOON         *HMD 08/81*
         LUSE  SRM,R11,R12   RE-ADDRESS THE CSECT           *HMD 08/81*
         USING CVTMAP,R3     CVT ADDRESSABILITY
         USING PVT,R4        PVT ADDRESSABILITY
         USING RMCT,R5       RMCT ADDRESSABILITY
         USING CCT,R6        CCT ADDRESSABILITY
         SPACE 2
         EJECT
         XC    SWITCH,SWITCH             CLEAR SWITCH
         XC    PTPB(PTPBL),PTPB          CLEAR PTPB         *HMD 04/82*
         XC    GTPB(GTPBL),GTPB          CLEAR GTPB         *HMD 04/82*
         SPACE
****     CLEAR THE MESSAGE AREAS **** QUICK AND DIRTY
         MVC   PS1A,BLANKS
         MVC   PS1,BLANKS
         MVC   PS2,BLANKS
         MVC   PS3,BLANKS
         MVC   PS4,BLANKS
         MVC   PS5,BLANKS
         MVC   PS6,BLANKS
         MVC   RS1,BLANKS
         MVC   RS2,BLANKS
         MVC   RS3,BLANKS
         MVC   RS4,BLANKS
         MVC   RS5,BLANKS
         MVC   RS6,BLANKS
         MVC   FSF,BLANKS
         MVC   FS1,BLANKS
         MVC   FS2,BLANKS
         MVC   FS3,BLANKS
         MVC   FS4,BLANKS
         MVC   FS5,BLANKS
         MVC   FS6,BLANKS
         MVC   FS7,BLANKS
         MVC   CSF,BLANKS
         MVC   CS1,BLANKS
         MVC   CS2,BLANKS
         MVC   CS3,BLANKS
         MVC   CS4,BLANKS
         MVC   CS5,BLANKS
         MVC   CS6,BLANKS
         MVC   CS7,BLANKS
         MVC   CS8,BLANKS
         MVC   S1S1,BLANKS
         MVC   S1S2,BLANKS
         MVC   S1S3,BLANKS
         MVC   S1S4,BLANKS
         MVC   S1S5,BLANKS
         MVC   S1S6,BLANKS
         MVC   S2S1,BLANKS
         MVC   S2S2,BLANKS
         MVC   S2S3,BLANKS
         MVC   S2S4,BLANKS
         MVC   S3S1,BLANKS
         MVC   S3S2,BLANKS
         MVC   S3S3,BLANKS
         MVC   S3S4,BLANKS
         MVC   S3S5,BLANKS
         MVC   S3S6,BLANKS
         MVC   SMFS1,BLANKS
         MVC   SMFS2,BLANKS
         MVC   SMFS3,BLANKS
         MVC   SMFS4,BLANKS
         MVC   SMFS5,BLANKS
         MVC   IDMLF,IDMSGLF ID MSG LENGTH AND FLAG
         MVC   DTMLF,DTMSGLF DATE MSG LENGTH AND FLAG
         MVC   IDM(#IDML),IDMSGMDL  ID MSG MODEL
         MVC   DTM(#DTML),DTMSGMDL  ID MSG MODEL
         MVC   P(4),PLF           PAGE MESSAGE LENGTH/FLAG
         MVC   R(4),RLF           REAL MESSAGE LENGTH/FLAG
         MVC   F(4),FLF           FRAME MESSAGE LENGTH/FLAG
         MVC   C(4),CLF           CPU MESSAGE LENGTH/FLAG
         MVC   S1(4),S1LF         VIRTUAL STORAGE MESSAGE LEN-FLAG
         MVC   S2(4),S2LF         VIRTUAL STORAGE MESSAGE LEN-FLAG
         MVC   S3(4),S3LF         VIRTUAL STORAGE MESSAGE LEN-FLAG
         MVC   SM(4),SMFLF        SMF MESSAGE LEN MESSAGE LEN-FLAG
         EJECT
***************************************************************
*        ESTABLISH ESTAE ENVIRONMENT
***************************************************************
         MVC   ESTAELST(ESTAELEN),ESTAEOVL ** MOVE ESTAE TO GETMAIN'D
         LA    R1,ESTAELST               -> ESTAE LIST
         ESTAE MF=(E,(1))
         B     CLEAR
         SPACE
ESTAEOVL ESTAE STAEXIT,CT,MF=L
ESTAELEN EQU   *-ESTAEOVL                                   *HMD 04/82*
         EJECT
***************************************************************
*        CLEAR THE SCREEN (TSO ONLY)                          *
***************************************************************
CLEAR    DS    0F
         CALL  CLR3270             CALL THE SCREEN CLEAR    *HMD 08/81*
         TM    REPORT+X'30',X'10'  REPORT DD OPEN             *
         BZ    UCCTST              NO                         *
         PUT   REPORT,SKIP                                    *
***************************************************************
         EJECT
*        TEST FOR UCC-1
*
UCCTST   EQU   *
         LOAD  EP=IGG24900,ERRET=UCCDEAD   ADDRESS OF UCC-1 FIXED SVC
*                                                           *HMD 08/81*
         LR    R3,R0              -> TO EPA
         TM    7(R3),X'80'        TEST ACTIVE SWITCH
         BO    UCCALIVE           UCC-1 IS ACTIVE
UCCDEAD  EQU   *                   UCC-1 IS NOT IN THE SYSTEM
         @TPUT UCCDMSG
         B     UCCALIVE            IT ISN'T BUT FAKE IT
         @TPUT UCCMSG             ISSUE UCC-1 NOT ACTIVE MESSAGE
UCCALIVE EQU   *                  UCC-1 IS ACTIVE SO NO MESSAGE
         DELETE EP=IGG24900       DELETE UCC-1 FROM OUR USE *HMD 08/81*
         EJECT
         L     R3,CVTPTR     LOAD CVT POINTER
         L     R4,CVTPVTP    LOAD PVT POINTER
         L     R5,CVTOPCTP   RMCT POINTER
         L     R6,RMCTCCT    CCT POINTER
         L     R1,CVTEXT2    -> CVT EXTENSION
         MVC   RNID(1),4(R1)  MOVE NUC ID TO O/P
         MVC   RCPUS(1),CCVCPUCT+1       MOVE CPU ONLINE COUNT
         OI    RCPUS,X'F0'               MAKE DISPLAYABLE
         L     R2,RMCTMCT    -> MCT
         USING MCT,R2
         @M    MCVTWSS,S3CWSS COMMON WSS TARGET
         @M    MCVSIPR,S3CPAG COMMON PAGE IN RATE
         DROP  R2
         SPACE 2
*        TEST FOR SMF ACTIVE
*
         L     R2,CVTSMCA    POINT TO SMCA
         USING SMCABASE,R2     SYSTEM MANAGEMENT CONTROL AREA (SMF)
         @M    SMCACNBF+2,RSSMFB   SMF BUFFERS
         @M    SMCANMFL+2,RSSMFF   FULL SMF BUFFERS
         @M    SMCAMNBF,RSSMFL     MIN SMF BUFFERS
         @M    SMCAMXBF,RSSMFH     MAX SMF BUFFERS
         L     R9,SMCASVCR         ACTIVE SMF D-S
         LTR   R9,R9               IS IT ACTIVE ?
         BZ    SMFNOTA             NOT ACTIVE YET
SMFTST   TM    SMCAFLGR,SMCATERM  IS SMF RECORDING ????
         BZ    SMFOK              YES - REST EASY
         @TPUT SMF1     ************* NO IT HAS TERMINATED
         B     SMFOK
SMFNOTA  @TPUT SMFNA    ************* NOT ACTIVE YET
SMFOK    EQU      *
         LR    R9,R3           LOAD CVT ADDR
         S     R9,=F'256'      POINT TO CVT PREFIX
         USING CVTFIX,R9       ESTAB. ADDRESSABILITY
         MVC   IDSMF,SMCASID   SYSTEM SMF ID                *HMD 08/81*
         MVC   IDMDL#(4),=X'20202021'
         ED    IDMDL#-1(5),CVTMDL   EDIT MODEL NUMBER
         L     R1,SMCASVCR         -> CURRENT SMF DATA-SET
         MVC   RSMF,X'18'(R1)    MOVE SMF D-S ID
         EJECT
         STM   R1,R3,TSAVE         SAVE R1 - R3 FRO
         L     R1,SMCAIDTE         LOAD IPL DATE
         O     R1,=X'0000000F'     FOR TESTING ONLY UNDER SE1 ****
         DATEROU
         MVC   DTDATE(8),0(R1)     IPL DATE MM-DD-YY
         LM    R1,R3,TSAVE         RELOAD REGISTERS
         EJECT
*        CONVERT THE IPL TIME TO HH.MM.SS
         L     R7,SMCAITME
         TIMECONV
         MVC   DTTIME(8),@TIME+2    MOVE CORRECT TIME
         EJECT
         DROP   R9
* ACQUIRE THE CURRENT IPS VALUE
         L      R9,RMCTWMST    -> WMST
         USING  WMST,R9
         MVC    RIPS(2),WMSTID  MOVE IPS ID TO MESSAGE
         DROP   R9
*
         SR     R9,R9
         L      R9,520(R9)     POINT TO PCCA
         MVC    IDSERIAL,6(R9)
         EJECT
         @M1   PVTPOOL,FUFC  USABLE FRAME COUNT
         @M1   PVTDFRS,FDFA  DEFERED PAGE FRAME ALLOCATIONS
         @M1   PVTCNTFX,FFPC CURRENT FIXED PAGE COUNT
         @M1   PVTSQAFX,FSQA SQA ALLOCATED PAGE FRAMES
         @M1   PVTCFMCT,FCL CSA/LPA ALLOCATED FRAMES
         @M    CCVUTILP,CCPU SRM CALCULATED CPU UTIL.  CCVUTILP
         MVI   CCPU+4,C'%'
         @MD   CCVLGUTL,LCPU SRM CALCULATED LONG CPU   CCVLGUTL
         MVI   LCPU+4,C'%'
         @M1   CCVENQCT,CENQ NSW DUE TO X-ENQ   CCVENQCT
         L     R9,RMCTRCT -> RCT
         USING RCT,R9
         @M1   RCVUICA,FUIC HIGH UNREFERENCED INTERVAL COUNT
         @M1   RCVAVQC,CAVQL  AVQ LOW COUNT
         @M    RCVASMQA,CASMQ     ASMQ
         @M    RCVPTR,CPFR    PAGING RATE
         @M    RCVDPR,CDPR    PAGING RATE
         @M    RCVPAGRT,CTPR    PAGING RATE
         @M    RCVTOTDF,S1LCH   LCH UTIL
         MVI   S1LCH+4,C'%'      DENOTE A PERCENTAGE
         @M1   RCVMSPP,S1PDLY   PAGE DELAY TIME IN MS
         DROP  R9
         @M1   PVTAFC,FAFC   AVERAGE AVAILABLE FRAME COUNT (AFC)
         L     R2,RMCTRMCA
         DROP  R2
         USING RMCA,R2
         @M    RMCAINUS,CIN          IN  / READY USERS
         DROP  R2
         EJECT
         L     R2,CVTASMVT    POINT TO ASMVT
         USING ASMVT,R2
         @MF   ASMPCCWN,PPCCW       TOTAL PCCWS       ASMPCCWN
         @M2   ASMBKSLT+2,BKSLOTS   TOTAL FREE SLOTS  ASMBKSLT
         @M2   ASMSLOTS+2,PSLOTS   TOTAL LOCAL SLOTS  ASMSLOTS
         @M2   ASMVSC+2,PVIO       VIO SLOTS ASMVSC
         @M2   ASMNVSC+2,PNVIO     NON VIO SLOTS  ASMNVSC
         @M    ASMERRS+2,PBAD      BAD SLOTS  ASMERRS
         L     R1,ASMSLOTS   LOAD TOTAL SLOTS
         S     R1,ASMVSC     SUBTRACT VIO
         S     R1,ASMNVSC    SUBTRACT NONVIO
         S     R1,ASMERRS    SUBTRACT SLOTS IN ERROR
         S     R1,ASMBKSLT   SUBTRACT FREE SLOTS
         ST    R1,DWK        STORE RESERVED BUT UNUSED COUNT
         @MF   DWK,PRESV     TOTAL RESERVED BUT UNUSED
         TM    ASMFLAG1,ASMCOMMF   COMMON PAGE FULL ?
         BZ    NCOMF               NO
         MVC   COF(2),=CL2'CF'     INDICATE COMMON DATA-SET FULL
NCOMF    EQU   *
         TM    ASMFLAG1,ASMPLPAS   PLPA PAGE FULL ?
         BZ    NPLPAS              NO
         MVC   PF(2),=CL2'PF'      INDICATE PAGE DATA-SET FULL
NPLPAS   EQU   *
         DROP  R2
         SPACE 2
         TIME  DEC
         ST    0,DWK         STORE TIME
         MVC   IDTIME(8),=X'20217A20207A2020' EDIT PATTERN
         ED    IDTIME-1(9),DWK
         EJECT
*    STORAGE DATA INFORMATION
         DROP  R4
         DROP  R3
         L     R4,CVTPTR      POINT TO CVT
         USING CVTMAP,R4
         L     R1,CVTEORM     ADDR OF END OF REAL MEMORY
         A     R1,=F'01'      ROUND
         ST    R1,REALSIZE    SAVE IT FOR USE LATER
         L     R7,CVTPVTP     -> PVT
         USING PVT,R7
         LH    R3,PVTFPFN     FIRST PFTE INDEX
         SLL   R3,8           SHIFT - CHANGE TO ADDRESS
         ST    R3,NUCSIZE     ADDRESS OF FIRST FRAME PAST NUCLEUS
         DROP  R7
         L     R7,CVTGDA      POINT TO GLOBAL DATA AREA
         USING GDA,R7
         L     R3,PASIZE      PRIVATE AREA SIZE
         ST    R3,PVTSIZE     SAVE IT
*    SCAN CSA FOR ALLOCATED SPACE
         L     R2,CSAPQEP
         USING PQE,R2
         SR    R6,R6
         SR    R3,R3
         SR    R8,R3
         SR    R5,R5
         ICM   R3,15,PQEFFBQE  -> FIRST FBQE
         BZ    ENDCSA
         USING FBQE,R3
CSALOOP  A     R6,SIZE        ADD FBQE SIZE
         AH    R8,=H'01'           INCREMENT FRAGMENT COUNTER
         C     R5,SIZE             LARGEST FREE AREA ?
         BH    NOCSAL              NO
         L     R5,SIZE             YES - KEEP IT
NOCSAL   EQU   *
         L     R3,FWDPTR      -> NEXT FBQE
         CR    R2,R3          END OF CHAIN ?
         BNE   CSALOOP
ENDCSA   EQU   *
         STH   R8,CSAFRAG          SAVE CSA FRAGMENTATION COUNT
         ST    R5,CSALARG          SAVE LARGEST FREE CSA AREA
         SPACE
         L     R3,VRPQEP      -> V=R PQE
         USING PQE,R3
         L     R1,PQESIZE     LOAD SIZE OF V=R
         ST    R1,VRSIZE      SAVE IT
         L     R3,CSAPQEP     -> CSA PQE
         L     R1,PQESIZE     LOAD CSA SIZE
         ST    R1,CSASIZET    STORE TOTAL CSA SIZE
         SR    R1,R6          SUBTRACT UNALLOCATED
         ST    R1,CSASIZEA    SAVE IT
         EJECT
*    GET SQA ALLOCATED SPACE
         L     R1,SQASPQEP    -> SQA SPQE
         USING SPQESECT,R1
         L     R3,SPDQEPTR    -> SQA DQE
         DROP  R3
         USING DQESECT,R3
         SR    R9,R9               INITIALIZE LARGEST SQA AREA
         XC    SQASIZET,SQASIZET  INITIALIZE SQA SIZE TOTAL
         XC    SQADQES,SQADQES    INITIALIZE SQA DQE COUNT
         L     R2,DQEBLKAD    -> START OF SQA
         LA    R2,0(R2)       ROUND
         L     R1,CVTLPDIA     -> START OF LPA
         LA    R1,0(R1)
         SR    R2,R1
         ST    R2,LPASIZE      SAVE LPA SIZE
         SR    R8,R8          INITIALIZE R8
         SPACE
SQADQE   L     R1,DQELNTH     LOAD SIZE OF SQA
         A     R1,SQASIZET    ADD PRIOR DQE SIZE
         ST    R1,SQASIZET    AND SAVE
         LH    R1,SQADQES     LOAD SQA DQE COUNTER
         AH    R1,=H'01'      ADD ONE
         STH   R1,SQADQES     AND SAVE IT
         DROP  R5
         TM    SWITCH,SQASW              * SQA ESTAE ENTERED ?
         BO    NDQE                      * YES - BYPASS FQE SEARCH
         L     R5,DQFQEPTR    -> TO SQA'S FQE
         USING FQESECT,R5
         SR    R7,R7
SQALP    A     R7,FQELNTH     ADD LENGTH OF FREE SPACE
         C     R9,FQELNTH          LARGEST FREE
         BH    NOSQAL              NO
         L     R9,FQELNTH          YES - SAVE IT
NOSQAL   EQU   *
         AH    R8,=H'01'      ADD 1 TO COUNTER OF FRAGMENTS
         L     R5,FQEPTR      -> NEXT FQE
         LTR   R5,R5          TEST FOR LAST ENTRY
         BP    SQALP          CONTINUE LOOP
NDQE     L     R3,DQEPTR      -> NEXT DQE OR 0
         LTR   R3,R3          END OF LINE ?
         BP    SQADQE         NO - CONTINUE SCAN
         STH   R8,SQAFRAG     SAVE TOTAL SQA FRAGMENT COUNT
         ST    R7,SQAFREE     END SO SAVE TOTAL FREE SPACE
         ST    R9,SQALARG          SAVE SIZE OF LARGEST FREE FRAG
         EJECT
         L     R2,SQAFREE   SQA FREE SPACE
         L     R3,SQASIZET  LOAD SQA SIZE
         SR    R3,R2        SUB TO GET ALLOCATED
         LA    R3,1(R3)     ROUND
         ST    R3,SQASIZEA  AND SAVE IT
*     GET FIXED LPA - FIXED BLDL SIZE (COMBINED)
         L     R1,CVTNUCB           LOWEST ADDRESS NOT IN NUC
         S     R1,NUCSIZE           SUBTRACT NUC SIZE
         ST    R1,FLPASZ            SAVE IT AS FIXED LPA
*     GET MLPA - PAGEABLE BLDL SIZE  (COMBINED)
         L     R1,CVTDIRST          LOAD ADDRESS OF PLPA
         LA    R1,1(R1)             ROUND
         L     R2,CVTSHRVM          ADDRESS OF CSA
         LA    R2,1(R2)             ROUND
         SR    R1,R2                SUBTRACT CSA START
         S     R1,CSASIZET          SUBTRACE CSA SIZE FOR MLPA/BLDL
         ST    R1,MLPASIZE          AND SAVE IT
         EJECT
*    GET TOTAL ALLOCATED ADDRESS SPACES
         ZAP   ASIDCT,=P'00'     INITIALIZE COUNTER
         DROP  R5
         USING ASVT,R5
         L     R5,CVTASVT        -> ASVT
         LA    R5,ASVTFRST       -> START OF 1ST ASVT ENTRY
ASLP     LA    R5,4(R5)          -> NEXT SLOT
         CLC   0(4,R5),=X'80000000' END OF TABLE
         BE    ENDASID           END OF TABLE
         TM    0(R5),X'80'       AVAILABLE ?
         BO    ASLP              YES - CONTINUE SCAN
         AP    ASIDCT,=P'01'     ADD ONE TO COUNTER
         B     ASLP              AND CONTINUE SCAN
ENDASID  EQU   *
         MVC   CAS(4),=X'40202120' MOVE EDIT PATTERN
         ED    CAS(4),ASIDCT+2   AND EDIT THE COUNT
         EJECT
         XC    BLDLSZ,BLDLSZ        ***********
         XC    FBLDLSZ,FBLDLSZ      ***********
         @M    SQADQES,S3DQE
         @M1   SQAFRAG,S3SQAF
         @M1   CSAFRAG,S3CSAF
         KFILL S3CSAL,6,CSALARG
         KFILL S3SQAL,6,SQALARG
         KFILL S2PLPA,6,LPASIZE
         KFILL S1ACSA,6,CSASIZEA
         KFILL S1TCSA,6,CSASIZET
         KFILL S1ASQA,6,SQASIZEA
         KFILL S1TSQA,6,SQASIZET
         KFILL RPVT,6,PVTSIZE
         KFILL RVR,6,VRSIZE
         KFILL RREAL,7,REALSIZE    ****
         KFILL RNUC,6,NUCSIZE
         KFILL S2MLPA,6,MLPASIZE
         KFILL S2BLDL,6,BLDLSZ
         KFILL S2FBLDL,6,FBLDLSZ
         KFILL S2FLPA,6,FLPASZ
         EJECT
         TM    SWITCH,SQASW
         BZ    @B1
         @TPUT SQAERRM
@B1      @TPUT IDMLF
         @TPUT DTMLF
         @TPUT CHD
         @TPUT C
         @TPUT FHD
         @TPUT F
         @TPUT S1HD
         @TPUT S1
         @TPUT S3HD
         @TPUT S3
         @TPUT S2HD
         @TPUT S2
         @TPUT RHD
         @TPUT R
         @TPUT SMFD          SMF TITLE LINE
         @TPUT SM            SMF DATA LINE
         @TPUT PHD
         @TPUT P
         EJECT
*********************************************************************
*                                                                   *
*        THIS CODE IS USED FOR TSO ONLY                             *
*                                                                   *
*********************************************************************
         XC    TSOECB,TSOECB       CLEAR ECB                *HMD 08/81*
         MVI   REPLY,C' '          CLEAR REPLY AREA         *HMD 04/82*
         GETLINE PARM=GTPB,TERMGET=(EDIT,WAIT),             *HMD 08/81*X
               MF=(E,IOPL)                                  *HMD 08/81*
         LTR   R15,R15            CHECK FOR ZERO CODE       *HMD 08/81*
         BNE   FREEMAIN           ERROR, RETURN TO CALLER   *HMD 08/81*
         L     R1,GTPB+4          GET ADDRESS OF LINE       *HMD 08/81*
         LH    R10,0(R1)          GET LENGTH OF LINE        *HMD 08/81*
         CH    R10,=H'4'          ZERO LENGTH LINE?         *HMD 08/81*
         BE    GOFREE             YES, GO FREE BUFFER       *HMD 08/81*
         MVC   REPLY(1),4(R1)     RETURN CHAR               *HMD 08/81*
GOFREE   FREEMAIN R,LV=(10),A=(1),SP=1  FREE STORAGE        *HMD 08/81*
         TCLEARQ INPUT                                      *HMD 08/81*
TESTPT   OI    REPLY,X'40'         INSURE UPPER CASE
         CLI   REPLY,C'O'         OPEN REPORT ?
         BE    OPENR              YES
         CLI   REPLY,C'C'         CLOSE REPORT
         BE    CLOSER
         CLI   REPLY,C'Z'         END ?
         BE    FREEMAIN
         CLI   REPLY,C'E'         END?
         BE    FREEMAIN                                     *HMD 04/82*
         CLI   REPLY,C'M'         MENU?                     *HMD 04/82*
         BE    FREEMAIN                                     *HMD 04/82*
         CLI   REPLY,C'0'         SELECTION                 *HMD 04/82*
         BL    CLEAR                                        *HMD 04/82*
         CLI   REPLY,C'9'         SELECTION                 *HMD 04/82*
         BH    CLEAR
         EJECT
*********************************************************************
FREEMAIN TM    REPORT+X'30',X'10'        REPORT OPEN?       *HMD 04/82*
         BZ    FREE2                     NOPE, FORGET CLOSE *HMD 04/82*
         CLOSE (REPORT)
FREE2    TM    SWITCH,SQASW              * SQA ESTAE ENTERED ?
         BO    SVCE                      * YES - BYPASS STAE 0
         ESTAE 0
SVCE     EQU   *
         L     R1,4(R13)         GET PREVIOUS SAVE AREA     *HMD 04/82*
         MVC   56(1,R1),REPLY    MOVE REPLY CHAR TO R9      *HMD 04/82*
         TSOLEAVE ISN=LTORG
*********************************************************************
         SPACE
OPENR    OPEN  (REPORT,OUTPUT)
         B     CLEAR
CLOSER   CLOSE (REPORT)
         B     CLEAR
         SPACE
*********************************************************************
         EJECT
SQARTY   OI    SWITCH,SQASW              SET SQA SWITCH
         ESTAE 0
         B     NDQE
         EJECT
*********************************************************************
*        STAE EXIT ROUTINE                                          *
*                                                                   *
*********************************************************************
STAEXIT  EQU   *
         USING *,R15
         CH    R0,H12                    SDWA GOTTEN ?
         BE    STAEXIT1                  NO, FORCE RETURN
         L     R2,ASQARTY                 -> LOAD RETRY ADDRESS
         SETRP RC=4,RETADDR=(2),FRESDWA=YES,DUMP=NO
STAEXIT1 L     R0,ASQARTY                -> RETRY ADDRESS
         LA    R15,4
         BR    R14
ASQARTY  DC    A(SQARTY)                 -> RETRY ADDRESS
H12      DC    H'12'
         DROP  R15
         EJECT
         LTORG
         EJECT
*********************************************************************
SUBPOOL  EQU   0       SUBPOOL FOR TSO                              *
*UBPOOL  EQU   255     SUBPOOL FOR MCS                              *
*********************************************************************
REPLY    DC    C' '
BLANKS   DC    CL8' '     BLANKS
         SPACE 2
         DS    0F
PHD      DC    AL2(PHDE-PHD),X'0000'   PAGE DATA TITLE
         DC    CL6' SLOTS',CL2' '
         DC    CL6'  FREE',CL2' '
         DC    CL4' VIO',CL2' '
         DC    CL4'NVIO',CL2' '
         DC    CL4' BAD',CL2' '
         DC    CL4'RESV',CL2' '
         DC    CL4'PCCW'
PHDE     EQU   *
         SPACE
         DS    0F
PLF      DC    AL2(PE-P),X'0000'
         SPACE 2
         DS    0F
RHD      DC    AL2(RHDE-RHD),X'0000'
         DC    CL7'   REAL',CL1' '
         DC    CL6'   V=R',CL2' '
         DC    CL6'   NUC',CL2' '
         DC    CL6'   PVT',CL2' '
         DC    CL3'IPS',CL1' '
         DC    C'NID'
         DC    CL2' ',C'CPUS'
RHDE     EQU   *
         SPACE
         DS    0F
RLF      DC    AL2(RE-R),X'0000'
         SPACE 2
         DS    0F
FHD      DC    AL2(FHDE-FHD),X'0000'
         DC    CL2' '
         DC    CL4' UIC',CL2' '
         DC    CL4' AFC',CL2' '
         DC    CL4' FPC',CL2' '
         DC    CL4' SQA',CL2' '
         DC    CL4' C/L',CL2' '
         DC    CL4' UFC',CL2' '
         DC    CL4' DFA',CL2' '
         DC    CL4'ASMQ'
FHDE     EQU   *
         SPACE
FLF      DC    AL2(FE-F),X'0000'
         SPACE 2
         DS    0F
SMFD     DC    AL2(SMFDE-SMFD),X'0000'
         DC    CL2' '
         DC    CL4' SMF',CL2' '
         DC    CL4'SMFB',CL2' '
         DC    CL4'SMFF',CL2' '
         DC    CL4'SMFL',CL2' '
         DC    CL4'SMFH',CL2' '
SMFDE    EQU   *
         SPACE
         DS    0F
SMFLF    DC    AL2(SME-SM),X'0000'
         SPACE 2
         DS    0F
CHD      DC    AL2(CHDE-CHD),X'0000'
         DC    CL2' '
         DC    CL4' CPU',CL2' '
         DC    CL4' PFR',CL2' '
         DC    CL4' DPR',CL2' '
         DC    CL4' TPR',CL2' '
         DC    CL4'  IN',CL2' '
         DC    CL4'  AS',CL2' '
         DC    CL4' ENQ',CL2' '
         DC    CL4'LCPU'
CHDE     EQU   *
         SPACE
         DS    0F
CLF      DC    AL2(CE-C),X'0000'
         SPACE 2
         DS    0F
S1HD     DC    AL2(S1HDE-S1HD),X'0000'
         DC    CL6'  ACSA',CL2' '
         DC    CL6'  TCSA',CL2' '
         DC    CL6'  ASQA',CL2' '
         DC    CL6'  TSQA',CL3' '
         DC    CL4'PDLY',CL4' '
         DC    CL4'LCH ',CL2' '
         DC    CL4'AVQL'
S1HDE    EQU   *
         DS    0F
S1LF     DC    AL2(S1E-S1),X'0000'
         SPACE
         DS    0F
S3HD     DC    AL2(S3HDE-S3HD),X'0000'
         DC    CL6'  CSAL',CL2' '
         DC    CL4'CSAF',CL2' '
         DC    CL6'  SQAL',CL2' '
         DC    CL4'SQAF',CL2' '
         DC    CL4' DQE',CL2' '
         DC    CL4'CWSS',CL2' '
         DC    CL4'CPAG',CL2' '
S3HDE    EQU   *
         SPACE
         DS    0F
S3LF     DC    AL2(S3E-S3),X'0000'
         DS    0F
S2HD     DC    AL2(S2HDE-S2HD),X'0000'
         DC    CL6'  PLPA',CL2' '
         DC    CL6'  MLPA',CL2' '
         DC    CL6'  BLDL',CL2' '
         DC    CL6'  FLPA',CL2' '
         DC    CL6' FBLDL'
S2HDE    EQU   *
         SPACE
         DS    0F
S2LF     DC    AL2(S2E-S2),X'0000'
         SPACE 2
         DS    0F
IDMSGLF  DC    AL2(IDME-IDMLF),X'0000'    LENGTH OF ID MESSAGE
IDMSGMDL DC    C' SYSTEM = ????-????(??????)  TIME = ??.??.??  '
         DC    CL8' '
#IDML    EQU   *-IDMSGMDL    LENGTH OF MODEL
         DS    0F
DTMSGLF  DC    AL2(DTME-DTMLF),X'0000'    LENGTH OF ID MESSAGE
DTMSGMDL DC    C' IPL DATE = MM-DD-YY  IPL TIME = ??.??.??  '
#DTML    EQU   *-DTMSGMDL    LENGTH OF MODEL
         DS    0F
SMF1     DC    AL2(SMF1E-SMF1),X'0000'
         DC    C' ***  SMF IS NOT RECORDING  ***'
SMF1E    EQU   *
         SPACE 2
         DS    0F
SMFNA    DC    AL2(SMFNE-SMFNA),X'0000'
         DC    C' ***  SMF IS NOT RECORDING  ***'
SMFNE    EQU   *
         SPACE 2
         DS    0F
SQAERRM  DC    AL2(SQAERRE-SQAERRM),X'0000'
         DC    C' ***  SQA ERROR - NOTIFY SYSTEMS PROGRAMMING  *** '
SQAERRE  EQU   *
         SPACE 2
         DS    0F
UCCMSG   DC    AL2(UCCMSGE-UCCMSG),X'0000'
         DC    C' *** WARNING UCC-1 IS NOT ACTIVE ***'
UCCMSGE  EQU   *
         SPACE 2
         DS    0F
UCCDMSG  DC    AL2(UCCDMSGE-UCCDMSG),X'0000'
         DC    C' *** WARNING UCC-1 IS NOT IN THE SYSTEM *** '
UCCDMSGE EQU   *
         SPACE 2
EXIT     EQU   3                 EXIT SVC
         SPACE
EDITK    DC    X'40402020202120D2'
         EJECT
SKIP     DC    AL2(SKIPE-SKIP),AL2(0)
         DC    CL20'1'             SKIP FOR REPORT
SKIPE    EQU   *
         EJECT
REPORT   DCB   DSORG=PS,MACRF=PM,DDNAME=REPORT,LRECL=70,BLKSIZE=704,   X
               RECFM=VBA
         EJECT
TSODSECT DSECT            CONTINUE DSECT                    *HMD 08/81*
WORKS    EQU   *
SAVER12  DS    F          SAVE R12 ACROSS CLR3270           *HMD 08/81*
SWITCH   DS    F                         SWITCH
SQASW    EQU   1                         SQA SWITCH
DWK      DS    D          DOUBLE WORD WORK AREA FOR CVD
FORMAT   DS    D          FORMAT WORK AREA
ESTAELST DS    6F         ESTAE LIST WORK AREA              *HMD 04/82*
PTPB     PUTLINE MF=L                    PUTLINE PARM BLOCK *HMD 08/81*
PTPBL    EQU   *-PTPB                                       *HMD 04/82*
GTPB     GETLINE MF=L                    GETLINE PARM BLOCK *HMD 08/81*
GTPBL    EQU   *-GTPB                                       *HMD 04/82*
TSAVE    EQU   DWK                 ALLOW ROOM FOR 4 REG SAVE AREA
         SPACE 2
REALSIZE DS    F          SIZE OF REAL MEMORY
MLPASIZE DS    F          SIZE OF MLPA
BLDLSZ   DS    F          SIZE OF BLDL TABLE
FBLDLSZ  DS    F          SIZE OF FIXED BLDL
NUCSIZE  DS    F          SIZE OF NUCLEUS
FLPASZ   DS    F          SIZE OF FIXED LPA
         SPACE 2
PVTSIZE  DS    F          SIZE OF PRIVATE AREA
CSASIZEA DS    F          ALLOCATED CSA
CSASIZET DS    F          TOTAL CSA
SQASIZEA DS    F          ALLOCATED SQA
SQASIZET DS    F          TOTAL SQA
SQAFREE  DS    F          FREE SQA
CSALARG  DS    F                   LARGEST FREE CSA
SQALARG  DS    F                   LARGEST FREE SQA
VRSIZE   DS    F          V=R SIZE
LPASIZE  DS    F          PLPA SIZE
ASIDCT   DS    F          ASID COUNTER
         SPACE
SQADQES  DS    H          SQA DQE COUNT
SQAFRAG  DS    H          SQA FRAGMENT COUNT
CSAFRAG  DS    H          SQA FRAGMENT COUNT
         SPACE 2
CORE     DS    F          ADDRESS OF THIS WORK AREA FOR FREEMAIN
         EJECT
DTMLF    DS    F          DT MESSAGE LENGTH AND FLAGS
DTM      DS    CL12                FILLER FOR TITLE
DTDATE   DS    CL8                 IPL DATE
DFIL2    DS    CL13                FILLER FOR TITLE
DTTIME   DS    CL8                 IPL TIME
         DS    CL2
DTME     EQU   *          END OF SYSTEM ID MESSAGE
         EJECT
IDMLF    DS    F          ID MESSAGE LENGTH AND FLAGS
IDM      DS    CL10       ID MESSAGE START FOR MODEL
IDMDL#   DS    CL4        CPU MODEL NUMBER
         DS    CL1
IDSMF    DS    CL4        SMF SYSTEM ID
         DS    CL1        FILLER FOR (
IDSERIAL DS    CL6        CPU SERIAL NUMBER
         DS    CL10
IDTIME   DS    CL8        TIME OF MESSAGE  HH:MM:SS
         DS    CL2
COF      DS    CL2        COMMON FULL
         DS    CL1
PF       DS    CL2        PLPA FULL
IDME     EQU   *          END OF SYSTEM ID MESSAGE
         EJECT
P        DS    F          PAGEING DATA
PS1A     DS    CL2
PSLOTS   DS    CL4        TOTAL LOCAL SLOTS
PS1      DS    CL4
BKSLOTS  DS    CL4        TOTAL FREE SLOTS
PS2      DS    CL2
PVIO     DS    CL4        SLOTS ASSIGNED TO VIO
PS3      DS    CL2
PNVIO    DS    CL4        NON-VIO SLOTS
PS4      DS    CL2
PBAD     DS    CL4        BAD SLOTS
PS5      DS    CL2
PRESV    DS    CL4        SLOTS RESERVED BUT UNUSED
PS6      DS    CL2
PPCCW    DS    CL4        PCCW COUNT
PE       EQU   *
         SPACE
R        DS    F          REAL STORAGE DATA
RREAL    DS    CL6        REAL STORAGE SIZE
RS1      DS    CL2
RVR      DS    CL6        SIZE OF V=R
RS2      DS    CL2
RNUC     DS    CL6        @ SIZE OF NUC
RS3      DS    CL2
RPVT     DS    CL6        SIZE OF PRIVATE AREA
RS4      DS    CL3
RIPS     DS    CL2        CURRENT IPS MEMBER
RS5      DS    CL2
RNID     DS    CL1        CURRENT NUCLEUS
RS6      DS    CL4
RCPUS    DS    CL1        COUNT OF ONLINE CPUS
RE       EQU   *
         SPACE
S1       DS    F          VIRTUAL STORAGE DATA 1
S1ACSA   DS    CL6        ALLOCATED CSA
S1S1     DS    CL2
S1TCSA   DS    CL6        TOTAL CSA (FROM PARMLIB)
S1S2     DS    CL2
S1ASQA   DS    CL6        ALLOCATED SQA
S1S3     DS    CL2
S1TSQA   DS    CL6        TOTAL SQA (FROM PARMLIB)
S1S4     DS    CL3
S1PDLY   DS    CL5        PAGE DELAY TIME IN MS
S1S5     DS    CL2
S1LCH    DS    CL4        HIGH AVERAGE LOGICAL CHANNEL UTILIZATION
         DS    C          FOR % SIGN
S1S6     DS    CL2
CAVQL    DS    CL4        AVQ LOW COUNT
S1E      EQU   *
         SPACE
S3       DS    F          VIRTUAL STORAGE DATA 3
S3CSAL   DS    CL6        LARGEST CSA FRAGMENT FREE
S3S1     DS    CL2
S3CSAF   DS    CL4        TOTAL CSA FRAGMENTS
S3S2     DS    CL2
S3SQAL   DS    CL6        LARGEST SQA FREE AREA
S3S3     DS    CL2
S3SQAF   DS    CL4        TOTAL SQA FRAGMENTATION
S3S4     DS    CL2
S3DQE    DS    CL4        SQA DQE COUNT
S3S5     DS    CL2
S3CWSS   DS    CL4        WSS FOR COMMON
S3S6     DS    CL2
S3CPAG   DS    CL4        PAGE IN RATE FOR COMMON
S3E      EQU   *
         SPACE
S2       DS    F          VIRTUAL STORAGE DATA 2
S2PLPA   DS    CL6        SIZE OF PLPA
S2S1     DS    CL2
S2MLPA   DS    CL6        SIZE OF MLPA
S2S2     DS    CL2
S2BLDL   DS    CL6        SIZE OF BLDL
S2S3     DS    CL2
S2FLPA   DS    CL6        SIZE OF FIXED LPA
S2S4     DS    CL2
S2FBLDL  DS    CL6        SIZE OF FIXED BLDL
S2E      EQU   *
         SPACE
F        DS    F          REAL STORAGE FRAME DATA
FSF      DS    CL2
FUIC     DS    CL4        HIGHEST UNREFERENCED INTERVAL COUNT
FS1      DS    CL2
FAFC     DS    CL4        AVAILABLE FRAME COUNT
FS2      DS    CL2
FFPC     DS    CL4        FIXED FRAME COUNT
FS3      DS    CL2
FSQA     DS    CL4        FRAMES ASSIGNED TO SQA
FS4      DS    CL2
FCL      DS    CL4        FRAMES ASSIGNED TO COMMON/PLPA
FS5      DS    CL2
FUFC     DS    CL4        USABLE REAL FRAME COUNT
FS6      DS    CL2
FDFA     DS    CL4        DEFERRED FRAME ALLOCATION COUNT (CUMMULATIVE)
FS7      DS    CL2
CASMQ    DS    CL4        ASM Q LENGTH
FE       EQU   *
         SPACE
SM       DS    F          REAL STORAGE FRAME DATA
SMFS1    DS    CL4
RSMF     DS    CL1        CURRENT SMF ID
SMFS2    DS    CL3
RSSMFB   DS    CL4        CURRENT COUNT OF SMF BUFFERS
SMFS3    DS    CL2
RSSMFF   DS    CL4        COUNT OF FULL SMF BUFFERS
SMFS4    DS    CL2
RSSMFL   DS    CL4        MIN COUNT OF SMF BUFFERS
SMFS5    DS    CL2
RSSMFH   DS    CL4        MAX COUNT OF SMF BUFFERS
SME       EQU   *
         SPACE
C        DS    F          CPU DATA
CSF      DS    CL2
CCPU     DS    CL4        SRM CALCULATED CPU UTIL.
CS1      DS    CL2
CPFR     DS    CL4        PAGE FAULT RATE
CS2      DS    CL2
CDPR     DS    CL4        DEMAND PAGE RATE
CS7      DS    CL2
CTPR     DS    CL4        TOTAL PAGEING RATE
CS8      DS    CL2
CIN      DS    CL4        IN AND READY ADDRESSES
CS3      DS    CL2
CAS      DS    CL4        TOTAL ADDRESS SPACES
CS4      DS    CL2
CENQ     DS    CL4        SPACES SET NSW DUE TO X-ENQ
CS5      DS    CL2
LCPU     DS    CL4        LONG TERM CPU UTIL
CS6      DS    CL2
CE       EQU   *
         SPACE 3
******************************************************************
WORKSIZE EQU  *-WORKS          END OF WORK DSECT
******************************************************************
         EJECT
ICT      EQU   0                                            *HMD 08/81*
RMPT     EQU   0                                            *HMD 08/81*
RMEX     EQU   0                                            *HMD 08/81*
IRAEPPA  EQU   0                                            *HMD 08/81*
IRAEPPR  EQU   0                                            *HMD 08/81*
RMSB     EQU   0                                            *HMD 08/81*
EPDTSCN  EQU   0                                            *HMD 08/81*
EPATSCN  EQU   0                                            *HMD 08/81*
LSCT     EQU   0                                            *HMD 08/81*
IRAWTQE  EQU   0                                            *HMD 08/81*
IRAOUCB  EQU   0                                            *HMD 08/81*
IRAOUXB  EQU   0                                            *HMD 08/81*
IRACTMQE EQU   0                                            *HMD 08/81*
IRAOTQE  EQU   0                                            *HMD 08/81*
IRAINQE  EQU   0                                            *HMD 08/81*
IRAFLTM  EQU   0                                            *HMD 08/81*
IRASRBT  EQU   0                                            *HMD 08/81*
EPAT     EQU   0                                            *HMD 08/81*
RQSV     EQU   0                                            *HMD 08/81*
ICSP     EQU   0                                            *HMD 08/81*
RSPL     EQU   0                                            *HMD 08/81*
ENFPM    EQU   0                                            *HMD 08/81*
         MNOTE *,'***************************************************'
         MNOTE *,'SOME OF THE MACROS BELOW ARE LICENSED MATERIAL.'
         MNOTE *,'THEY ARE AVAILABLE WITH THE OPTIONAL MATERIAL FOR'
         MNOTE *,'MVS SYSTEM PRODUCT AND WILL NOT BE DISTRIBUTED'
         MNOTE *,'WITH THE MVSUG MACRO LIBRARIES -- HOWARD M. DEAN'
         MNOTE *,'***************************************************'
         CVT   DSECT=YES,PREFIX=YES,LIST=YES
         EJECT
         IHAPVT
         EJECT
         IEEXSA
         EJECT
         IRACCT ,  - LICENSED MATERIAL -- IN MVS/SP PVTMACS *HMD 09/81*
         EJECT
         IRAWMST , - LICENSED MATERIAL -- IN MVS/SP PVTMACS *HMD 09/81*
         EJECT
         IEESMCA
         EJECT
         IRARMCA , - LICENSED MATERIAL -- IN MVS/SP PVTMACS *HMD 09/81*
         EJECT
         IRARMCT , - LICENSED MATERIAL -- IN MVS/SP PVTMACS *HMD 09/81*
         EJECT
         IRARCT  , - LICENSED MATERIAL -- IN MVS/SP PVTMACS *HMD 09/81*
         EJECT
         ILRASMVT ,  LICENSED MATERIAL -- IN MVS/SP PVTMACS *HMD 09/81*
         EJECT
         IRAMCT  , - LICENSED MATERIAL -- IN MVS/SP PVTMACS *HMD 09/81*
         EJECT
         IHADQE
         EJECT
         IHAFBQE
         EJECT
         IHAGDA
         EJECT
         IHAPQE
         EJECT
         IHASPQE
         EJECT
         IHAFQE
         EJECT
         IHAASVT
         EJECT
         IHASDWA
         SPACE 3
         END
