 SMFPG1:  PROC (PARAM) OPTIONS(MAIN); /* SMF DATA COLLECTION PG1 MH*/
  /* ************************************************************** */
  /*                                                                */
  /*                                                                */
  /*                                                                */
  /*       MIKE AUTO SMF RECORD COLLECTION PROJECT : SMFPG1         */
  /*       ------------------------------------------------         */
  /*                                                                */
  /*                                                                */
  /*                                                                */
  /* ************************************************************** */
  /*                                                                */
  /*                                                                */
  /* THIS PROGRAM IS EXECUTED AS THE SECOND STEP OF A THREE STEP    */
  /* PROCEDURE LAUNCHED AUTOMATICALLY BY SMF EXIT IEFU29            */
  /* WHENEVER A DUMP DATASET BECOMES FULL OR AN I SMF COMMAND IS    */
  /* ISSUED.                                                        */
  /*                                                                */
  /* STEP 1 IS SIMPLY AN IFASMFDP RUN TO CREATE A VBS DATASET FROM  */
  /* THE ORIGINAL VSAM DATASET.
  /*                                                                */
  /* STEP 3 SIMPLY CLEARS THE VSAM DUMP DATASET IF THIS PROGRAM     */
  /* HAS EXECUTED NORMALLY.                                         */
  /*                                                                */
  /*                                                                */
  /* DYNAMIC ALLOCATION IS HANDLED BY AN ASSEMBLER INTERFACE        */
  /* CALLED DYNAM. BY USING TSO LIKE ALLOCATION STATEMENTS          */
  /* AND PASSING THEM TO DYNAM WE CAN USE DYNAMIC ALLOCATION EASILY */
  /* INSTEAD OF HAVING TO MESS AROUND WITH THAT SPAGHETTI CLUDGE    */
  /* OF PARAMETERS THAT SVC 99 NEEDS.                               */
  /*                                                                */
  /*                                                                */
  /* THIS PROGRAM COPIES THE SMF DATASET JUST DUMPED TO A TEMPORARY */
  /* DATASET OF THE TYPE DSN=&&. TO SMFDATA.TEMP.CPUB/C DEPENDING   */
  /* ON THE PARM FIELD. THE OUTPUT DATASET IS DYNAMICALLY ALLOCATED */
  /* WITH A DISP OF MOD.                                            */
  /*                                                                */
  /* THE DATASET IS THEN UNALLOCATED AND RE-ALLOCATED WITH A DISP   */
  /* OF SHR. WE THEN READ THE WHOLE DATASET PRODUCING A DATE AND    */
  /* TIME STAMP OF EACH COMPLETE DUMP IN THE DATASET AND THE TOTAL  */
  /* NUMBER OF EACH.                                                */
  /*                                                                */
  /* IF THE NUMBER OF RECORDS IN THE LAST DUMP DOES NOT MATCH       */
  /* THE NUMBER READ FROM THE TEMPORARY DATASET OR IF WE HAVE       */
  /* BAD RECORDS IN THE DATASET (THEORETICALLY IMPOSSIBLE AS WE     */
  /* HAVE USED A TEMPORARY DATASET TO CAPTURE THE ORIGINAL RECORDS  */
  /* FROM THE VSAM SMF DATASETS AND AN ERROR IN THAT PROC CAUSES    */
  /* A NON ZERO RETURN CODE ENSURING THIS PROGRAM WILL NOT GET RUN).*/
  /* A MESSAGE IS ISSUED TO THE OPERATOR WHO MUST REPLY TO IT       */
  /* AND A NON ZERO RETURN CODE IS SET. THIS WILL ENSURE THAT       */
  /* THE STEP TO CLEAR THE ORIGINAL VSAM SMF DATASET WILL NOT GET   */
  /* RUN AND THE CORRECT PEOPLE CAN BE CALLED TO FIX THE PROBLEM.   */
  /*                                                                */
  /* PL/I HANDLES VBS RECORDS WITH NO PROBLEM ON INPUT/OUTPUT/MOD.  */
  /* SHORT BLOCKS ARE HANDLED BY THE COMPILER'S I/O BUILTIN         */
  /* ROUTINES. THIS GUARANTEES A SAFER METHOD OF EXTENDING VBS      */
  /* FILES THAN BY USING IEBGENER.                                  */
  /*                                                                */
  /* SINCE ONLY THE DATA GETS PASSED TO THE PROGRAM IN COMPLETE     */
  /* RECORD FORMAT WE CAN MANIPULATE VBS DATASETS AT THE RECORD     */
  /* LEVEL. THE COMPILER WILL RE-BUILD THE RECORD BLOCK AND         */
  /* SEGMENT DESCRIPTORS.                                           */
  /*                                                                */
  /*                                                                */
  /*                                                                */
  /* ************************************************************** */
  DCL WORK                  FIXED BIN(31) INIT(0);
  DCL DYNAM                 ENTRY OPTIONS (ASSEMBLER,RETCODE);
  DCL DOODATE               ENTRY OPTIONS (ASSEMBLER,RETCODE);
  DCL SMFIN FILE RECORD SEQUENTIAL BUFFERED ENV(VBS);
  DCL SMFOUT FILE RECORD SEQUENTIAL ENV(VBS);
  DCL PARAM                 CHAR(100) VARYING;
  DCL RECIN                 CHAR(32000) VARYING;
  DCL RECOUT                CHAR(32000) VARYING;
  DCL 1  STUPID             BASED(P),
       3 LEN_PTR            FIXED BIN(15),
       3 SMFIND             CHAR(1),
       3 SMFTYPE            CHAR(1),
       3 SMFTIME            FIXED BIN(31),
       3 SMFDATE            FIXED (7),
       3 SYSID              CHAR(4);
  DCL P                     PTR;
  P = ADDR(RECIN);
  DCL  1 CHEATING,
         3 BYTE1            CHAR(1),
         3 BYTE2            CHAR(1);
  DCL BYTE3                 FIXED BIN(15) INIT('0') BASED(A);
  DCL A                     PTR;
  A = ADDR(CHEATING);
  DCL FILE_IND              CHAR(1) INIT('N');
  DCL 1 DYNPARM,
        3  PREF             CHAR(4) INIT('DSN='),
        3  DSN              CHAR(44) INIT(' ');
  /* ************************************************************** */
  /*                                                                */
  /*  WORK AREA HERE IS USED BY DOODATE ASSEMBLER LANGAUGE PROGRAM  */
  /*  TO RETURN DATES TIMES AND DAY OF THE WEEK. I USED IT HERE     */
  /*  AS I ALREADY HAVE THE ROUTINES WRITTEN AND I DON'T WANT TO    */
  /*  WRITE THEM AGAIN.                                             */
  /*                                                                */
  /* ************************************************************** */
  DCL 1 WORKAREA            UNALIGNED,
        3 U_TIME            FIXED BIN(31),
        3 U_DATE            FIXED (7),
        3 RET_TIME          CHAR(8),
        3 RET_DATE          CHAR(7),
        3 RET_DAY           CHAR(3),
        3 MC_TIME           CHAR(8) INIT(' '),
        3 MC_DATE           CHAR(7) INIT(' '),
        3 MC_DAY            CHAR(3) INIT(' ');
  DCL DUMPTOT               FIXED BIN(31) INIT('0');
  DCL THISTOT               FIXED BIN(31) INIT('0');
  DCL RECTOT                FIXED BIN(31) INIT('0');
  DCL CONS                  CHAR(120) INIT(' ');
  DCL (ADDR, SUBSTR, LENGTH, PLIRETV, STRING) BUILTIN;
  /* ************************************************************** */
  /*                                                                */
  /*  DYNAMICALLY LOAD DYNAMIC ALLOCATION AND DATE FORMATTER        */
  /*  SUBROUTINES.                                                  */
  /*                                                                */
  /* ************************************************************** */
  FETCH DYNAM;
  FETCH DOODATE;
  /* ************************************************************** */
  /*                                                                */
  /*  INITIALIZE WORK AREA REQUIRED BY THE DYNAMIC ALLOCATION       */
  /*  INTERFACE.                                                    */
  /*                                                                */
  /* ************************************************************** */
  CALL DYNAM(WORK, 'INIT ');
  X = LENGTH(PARAM);
  DSN = SUBSTR(PARAM,1,X) ×× ' MOD;';
  /* ************************************************************** */
  /*                                                                */
  /*  ALLOCATE OUR RECEIVING FILE WITH A DISP OF MOD TO COPY        */
  /*  THE TEMPORARY DATASET TO OUR REAL OUTPUT                      */
  /*                                                                */
  /* ************************************************************** */
  CALL DYNAM(WORK, 'ALLOC ', DYNPARM,
                             'DD=SMFOUT;',
                             'VBS;',
                             'BLKSIZE=4096;',
                             'LRECL=32000;');
  ON ENDFILE (SMFIN)        FILE_IND = 'Y';
  OPEN FILE(SMFIN) INPUT, FILE(SMFOUT) OUTPUT;
  READ FILE(SMFIN) INTO(RECIN);
  DO WHILE (FILE_IND = 'N');
     IF FILE_IND = 'Y'
     THEN LEAVE;
     RECOUT = RECIN;
     WRITE FILE(SMFOUT) FROM(RECOUT);
     READ FILE(SMFIN) INTO(RECIN);
  END;
  CLOSE FILE(SMFIN), FILE(SMFOUT);
  /* ************************************************************** */
  /*                                                                */
  /*  UNALLOCATE THE DATASET JUST WRITTEN TO : BUT KEEP IT. WE      */
  /*  WANT TO READ IT BACK AS INPUT.                                */
  /*                                                                */
  /* ************************************************************** */
  DSN = SUBSTR(PARAM,1,X) ×× ' KEEP;';
  CALL DYNAM(WORK, 'UNALLOC ', DYNPARM,
                             'DD=SMFOUT;');
  /* ************************************************************** */
  /*                                                                */
  /*  ALLOCATE OUR DATASET NOW WITH A DISP OF SHR. THIS WILL ALLOW  */
  /*  US TO READ IT AS INPUT BUT FROM THE START OF THE DATASET.     */
  /*                                                                */
  /*  AFTER THIS CALL WE CAN RELEASE THE STORAGE REQUIRED BY THIS   */
  /*  SUBROUTINE : ITS QUITE LARGE SO GET RID OF IT.                */
  /*                                                                */
  /* ************************************************************** */
  DSN = SUBSTR(PARAM,1,X) ×× ' SHR;';
  CALL DYNAM(WORK, 'ALLOC ', DYNPARM,
                             'DD=SMFOUT;',
                             'VBS;',
                             'BLKSIZE=4096;',
                             'LRECL=32000;');
  RELEASE DYNAM;
  FILE_IND = 'N';
  OPEN FILE(SMFOUT) INPUT;
  ON ENDFILE (SMFOUT)       FILE_IND = 'Y';
  READ FILE(SMFOUT) INTO(RECIN);   /* WE CAN USE OLD INPUT BUFFERS */
  DO WHILE (FILE_IND = 'N');       /* SO OUR BASED VARIABLES ARE OK*/
     IF FILE_IND = 'Y'
     THEN LEAVE;
     BYTE3 = 0;
     BYTE2 = SUBSTR(SMFTYPE,1,1);
     IF BYTE3 > 3
     THEN DO;
             RECTOT = RECTOT + 1;
             THISTOT = THISTOT + 1;
          END;
     IF BYTE3 = 0
     THEN DO;
             RECTOT = RECTOT + 1;
             THISTOT = THISTOT + 1;
          END;
     IF BYTE3 = 2
     THEN DO;
             U_TIME = SMFTIME;
             U_DATE = SMFDATE;
             CALL DOODATE(WORKAREA);
             CONS = 'PLI001: DUMP STARTED AT ' ×× RET_TIME ×× ' ON ' ××
                      RET_DAY ×× ' ' ×× RET_DATE ×× ' FOR SYSTEM '
                      ×× SYSID ;
             PUT SKIP EDIT (CONS)(A);
          END;
     IF BYTE3 = 3
     THEN DO;
             U_TIME = SMFTIME;
             U_DATE = SMFDATE;
             CALL DOODATE(WORKAREA);
             CONS = 'PLI002: DUMP STOPPED AT ' ×× RET_TIME ×× ' ON ' ××
                      RET_DAY ×× ' ' ×× RET_DATE ×× ' RECORD COUNT '
                    ×× THISTOT;
             PUT SKIP EDIT (CONS)(A);
             THISTOT = 0;
             DUMPTOT = DUMPTOT + 1;
          END;
     READ FILE(SMFOUT) INTO(RECIN);
  END;
  CLOSE FILE(SMFOUT);
  CONS='PLI003: TOTAL NUMBER OF RECORDS PRESENT   ' ×× RECTOT;
  PUT SKIP EDIT (CONS)(A);
  CONS='PLI004: TOTAL NUMBER OF DUMPS PRESENT     ' ×× DUMPTOT;
  PUT SKIP EDIT (CONS)(A);
  END SMFPG1;
