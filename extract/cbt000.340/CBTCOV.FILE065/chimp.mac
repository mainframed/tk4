CHMP     TITLE 'CHIMP - MAIN STORAGE MONITOR FOR TSO - 3270S - MVS SYSTX
               EM PRODUCT (MVS/SP) VERSION'
CHIMP    CSECT
***********************************************************************
* IN CASE YOU ARE INTERESTED, THE SOURCE OF THE NAME (OR RATHER THE
* JUSTIFICATION FOR THE NAME) OF THIS SILLY PROGRAM IS/WAS:
*
*  COMPUTERIZED HEURISTIC INFORMATION MONITORING PROGRAM  (WHEW!)
*
* THIS COMMAND SUPPORTS MVS SYSTEM PRODUCT RELEASES         *HMD 09/82*
*                                                           *HMD 07/81*
* THIS COMMAND WILL NOT WORK IN PRE-SE2 INSTALLATIONS.      *HMD 07/81*
*                                                           *HMD 07/81*
* THIS COMMAND HAS SEVERAL DIFFERENT MODES OF DISPLAY:
*
*     I   - THIS MODE WILL DISPLAY ONLY THOSE MEMORIES WHICH ARE EITHER
*           SWAPPED IN AND RUNNING OR SWAPPED OUT BUT READY TO RUN.
*     O   - THIS MODE WILL DISPLAY ALL ACTIVE MEMORIES IN THE SYSTEM,
*           REGARDLESS OF LOCATION.
*     N   - THIS MODE WILL DISPLAY ONLY SWAPPABLE MEMORIES
*
*   TO SWITCH BETWEEN MODES, TYPE EITHER I OR O.
*
*
*      YOU MAY ALSO ENTER OPTIONS TO RESTRICT THE OUTPUT TO ONLY
*      TSO MEMORIES (IN EITHER IN/OUT OR WAITING STATUS ACCORDING
*      TO YOUR USE OF THE I AND O OPTIONS ABOVE) OR ONLY STARTED
*      TASK/BATCH JOB MEMORIES:
*
*     T  - RESTRICTS THE OUTPUT TO ONLY TSO MEMORIES
*
*     B  - RESTRICTS THE OUTPUT TO STARTED TASK/BATCH MEMORIES
*
*     A  - RESETS THE TSO/STARTED TASK/BATCH JOB SELECTION.
*
*   TO EXIT FROM THIS COMMAND, SIMPLY TYPE Z
*
*  GLOSSARY OF TERMS FOR OUTPUT DISPLAY:
*
*    JOB       JOB NAME OF MEMORY
*    STEP      FOR BATCH JOBS WILL ALWAYS BE INIT.
*              FOR TSO JOBS AND STARTED TASKS WILL BE ACTUAL STEP NAME.
*    P         REASON CODE FOR SWAP OUT FROM OUCBPFL.
*              THE FOLLOWING ARE THE REASON CODES DISPLAYED:
*
*                W     MEMORY IS IN LONG WAIT OR TERMINAL INPUT WAIT
*                T     MEMORY IS IN TERMINAL OUTPUT WAIT
*                E     AN ENQ HOLD HAS BEEN RECEIVED FOR MEMORY
*                M     MEMORY SWAPPED BY MSO LONG WAIT DETECTION
*                S     SWAPOUT CAUSED BY REAL STORAGE SHORTAGE
*                A     SWAPOUT CAUSED BY AUX. STORAGE SHORTAGE
*                P     SIGNIFICANT CPU USER
*                F     LOGICAL FIXED FRAME SHORTAGE CAUSED SWAPOUT
*                ?     UNABLE TO DETERMINE SWAPOUT REASON.
*
*    MEMORY    CURRENT AMOUNT OF MEMORY ALLOCATED TO THIS MEMORY.
*    WSS       SRM'S VIEW OF THE WORKING SET SIZE FOR THIS MEMORY.
*    T         TYPE OF MEMORY (S=STC OR BATCH, T=TSO USER)
*    LOC       CURRENT LOCATION OF THIS MEMORY:
*                PRV SWAPPED IN PRIVILEGED USER             *HMD 07/81*
*                IN  SWAPPED IN AND ELIGIBLE TO RUN.
*                OUT SWAPPED OUT BUT READY TO RUN.
*                WT  SWAPPED OUT AND NOT READY TO RUN.
*                LS  LOGICALLY SWAPPED                      *HMD 07/81*
*                N/S SWAPPED IN AND V=R OR NON-SWAPPABLE STATUS.
*                <-> TRANSITIONING BETWEEN STATES.
*    DP        DISPATCHING PRIORITY OF MEMORY (IN HEX).
*    PG        PERFORMANCE GROUP.
*    SC        NUMBER OF TIMES THE MEMORY HAS BEEN SWAPPED IN THE
*              CURRENT TRANSACTION.
*    WMR       CURRENT SRM WORKLOAD MANAGER RECOMMENDATION VALUE.
*              (ACTUALLY THE WORKLOAD LEVEL AT WHICH THIS MEMORY IS
*               OPERATING).
*    SRV       SERVICE ACCUMULATED IN THE LAST SWAPPED IN PERIOD.
*    CPU       CPU TIME IN SECONDS USED BY THE MEMORY (SRB PLUS TASK).
***********************************************************************
         EJECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
*
         SAVE  (14,12)          SAVE THE CALLERS REGISTERS
         LR    R12,R15          ESTABLISH
         USING CHIMP,R12          ADDRESSABILITY.
         LA    R11,SAVE         SET-UP
         ST    R13,SAVE+4         SAVE
         ST    R11,8(,R13)           AREA
         LR    R13,R11                CHAINING.
FINDCVT  L     R2,CVTPTR        LOAD PTR TO CVT.            *HMD 09/82*
         USING CVT,R2           ADDRESS THE CVT             *HMD 09/82*
         L     R2,CVTASVT       TO ASVT
         USING ASVT,R2          ADDRESS THE ASVT            *HMD 09/82*
         L     R3,ASVTMAXU      MAXIMUM NUMBER OF ENTRIES
         LA    R4,ASVTFRST      FIRST ENTRY MINUS 4.
         LA    R1,BUFFER        LOAD ADDRESS OF OUTPUT BUFFER.
         DROP  R2               NO NEED FOR BASE            *HMD 09/82*
         SPACE
ASCBLOOP LA    R4,4(,R4)        BUMP BY FOUR.
         ICM   R5,B'1111',0(R4) LOAD THE PTR.
         BM    NOGOOD           BRANCH IF BAD PTR.
         USING ASCB,R5          ADDRESS THE ASCB            *HMD 09/82*
         TM    ASCBRCTF,ASCBOUT TEST FOR SWAPPED OUT.       *HMD 09/82*
INOROUT  BO    NOGOOD           BRANCH IF OUT AND NOT READY TO RUN.
         L     R6,ASCBOUCB      LOAD PTR TO OUCB FOR QUICK TSO CHK
         USING OUCB,R6          ADDRESS THE OUCB            *HMD 09/82*
         TM    OUCBYFL,OUCBLOG  CHECK FOR TSO.              *HMD 09/82*
TSOORNO  BC    0,NOGOOD         TO BE FILLED IN IF BATCH ONLY.
BATCHORN BC    0,NOGOOD         TO BE FILLED IN LATER.      *HMD 09/82*
         TM    OUCBSFL,OUCBNSW  TEST FOR NON-SWAP           *HMD 09/82*
SWAPABLE BC    0,NOGOOD         TO BE FILLED IN LATER.      *HMD 09/82*
         DROP  R6                                           *HMD 09/82*
         SPACE
         MVI   LINE+2,C' '      CLEAR OUTPUT LINE TO BLANKS.
         MVC   LINE+3(77),LINE+2 DITTO.
         MVC   JOB(8),=CL8'STARTING' TO BYPASS GARBAGE
         ICM   R6,B'1111',ASCBJBNI
         BZ    NOTJOB           BRANCH IF ZERO POINTER.
         MVC   JOB,0(R6)        OTHERWISE, MOVE IN JOBNAME.
         B     JOBOK            BYPASS FURTHER JOBNAME PROCESSING.
NOTJOB   ICM   R6,B'1111',ASCBJBNS
         BZ    JOBOK            BYPASS THIS MOVE IF POINTER IS ZERO.
         MVC   JOB,0(R6)        MOVE IN JOBNAME FOR S/M/L MEMORIES.
JOBOK    DS    0H
         SPACE
         ICM   R7,B'1111',ASCBCSCB LOAD POINTER TO THE CSCB.
         USING CHAIN,R7         ADDRESS THE CSCB            *HMD 09/82*
         BZ    STEPOK           BRANCH IF CSCB POINTER IS ZERO.
         CLI   CHVCD,X'04'      CHECK TO SEE IF BATCH JOB OR S/M/L
         BE    STORMT           JOB IS START OR MOUNT
         CLI   CHVCD,X'0C'      CHECK TO SEE IF BATCH JOB OR S/M/L
         BE    STORMT           JOB IS START OR MOUNT
         MVC   STEP(8),CHCLS    PICK UP CHCLS.
         B     STEPOK           BYPASS FURTHER CSCB PROCESSING.
STORMT   MVC   STEP(8),CHKEY    PICK UP CHKEY.
STEPOK   DS    0H
         DROP  R7                                           *HMD 09/82*
         SPACE
         SR    R6,R6            ZERO FOR ICM                *HMD 07/81*
         ICM   R6,B'0011',ASCBFMCT   LOAD ALLOC FRAME CNT.  *HMD 07/81*
         SLL   R6,2             MULTIPLY BY FOUR.
         CVD   R6,WORK          CONVERT TO DECIMAL FORMAT.
         MVC   SIZE(6),=X'2020202120D2' GET READY FOR EDIT.
         ED    SIZE-1(6),WORK+5 EDIT THE RESULT.
         SPACE
         L     R6,ASCBOUCB      PTR TO OUCB.
         USING OUCB,R6          ADDRESS THE OUCB            *HMD 09/82*
         SR    R7,R7            CLEAR FOR ICM               *HMD 07/81*
         ICM   R7,B'0011',OUCBWSS     LOAD OUCBWSS          *HMD 07/81*
         CVD   R7,WORK          CONVERT TO DECIMAL.
         MVC   @UCBWSS(6),=X'202020212040' MOVE IN THE EDIT MASK.
         ED    @UCBWSS-1(6),WORK+5 EDIT THE RESULT.
         SPACE
         TM    OUCBYFL,OUCBLOG  TEST FOR TSO MEMORY
         BZ    NOTTSO           BRANCH IF NOT TSO.
         MVI   TYPE,C'T'        MOVE IN TSO MEMORY INDICATION.
         B     TYPEOK           BYPASS REST OF TYPE PROCESSING.
NOTTSO   MVI   TYPE,C'S'        MOVE IN S/M/L INDICATION.
TYPEOK   DS    0H
         SPACE
         MVC   WHERE,=CL3'IN'   DEFAULT MEMORY POSITION IS IN.
         MVI   LINE+1,X'E8'     DEFAULT TO HI-INTENSITY PROTECTED.
         TM    OUCBSFL,OUCBNSW  TEST FOR NON-SWAP
         BZ    TRYPRV           TEST FOR PRIV USER.
         MVC   WHERE,=CL3'N/S'  MOVE IN NON-SWAP INDICATION.
         B     WHEREOK          BY-PASS REST OF POSITION PROCESSING.
TRYPRV   TM    OUCBSFL,OUCBPVL  PRIVILEGED USER?            *HMD 09/82*
         BZ    TRYWAIT          TRY WAITING USER            *HMD 07/81*
         MVC   WHERE,=CL3'PRV'  INDICATE PRIVILEGED         *HMD 07/81*
         B     WHEREOK          CONTINUE                    *HMD 07/81*
         SPACE 1                                            *HMD 07/81*
TRYWAIT  DS    0H
         TM    OUCBQFL,OUCBOFF  CHECK FOR WAIT
         BZ    TRYOUT           BRANCH IF NOT.
         MVC   WHERE,=CL3'WT'   MOVE IN WAIT POSITION INDICATION.
         MVI   LINE+1,X'60'     MOVE IN 3270 LOW-INTENSITY ATTR BYTE.
         B     WHEREOK          BY-PASS REST OF POSITION PROCESSING.
TRYOUT   TM    OUCBQFL,OUCBOUT  TRY OUT QUEUE
         BZ    TRYTRIV          IF NOT, GO TRY TRIVIAL QUEUE STATUS.
         MVC   WHERE,=CL3'OUT'  MOVE IN OUT QUEUE POSITION.
         MVI   LINE+1,X'60'     MOVE IN 3270 LOW-INTENSITY ATTR BYTE.
         B     WHEREOK          BY-PASS REST OF POSITION PROCESSING.
TRYTRIV  TM    OUCBQFL,OUCBLSW  CHECK FOR LOGICAL SWAP QUEUE
         BZ    WHEREOK          IF NOT, EXIT POSITION PROCESSING.
         MVC   WHERE,=CL3'LS'   MOVE IN LOGICAL SWAP INDICATOR
         B     WHEREOK          CONTINUE                    *HMD 07/81*
WHEREOK  DS    0H
         TM    OUCBQFL,OUCBGOO+OUCBGOI+OUCBGOB
*                               CHECK FOR TRANSITION        *HMD 09/82*
         BZ    NOTTRANS         BRANCH IF MEMORY NOT TRANSITIONING.
         MVC   WHERE(3),=CL3'<->' INDICATE TRANSITIONING.
NOTTRANS DS    0H
         SPACE
         SR    R7,R7            PREPARE FOR THE INSERT CHARACTERS.
         IC    R7,ASCBDP        LOAD ASCBDP
         SRL   R7,4             SHIFT OUT LOW ORDER NIBBLE.
         IC    R8,HEX(R7)       PICK THE EBCDIC CHARACTER.
         STC   R8,DP            STORE INTO OUTPUT FIELD.
         IC    R7,43(,R5)       LOAD THE DISPATCHING PRIORITY AGN.
         N     R7,=F'15'        TURN OFF HIGH ORDER NIBBLE.
         IC    R8,HEX(R7)       LOAD THE EBCDIC CHARACTER.
         STC   R8,DP+1          STORE INTO OUTPUT LINE.
         SPACE
         SR    R7,R7            PREPARE FOR THE IC.
         ICM   R7,B'0011',OUCBNPG   PERFORM= VALUE
         CVD   R7,WORK          CONVERT IT TO DECIMAL.
         MVC   @UCBPGN(3),=X'202120' MOVE IN THE EDIT MASK.
         ED    @UCBPGN-1(4),WORK+6 EDIT THE OUTPUT FIELD.
         SPACE
         SR    R7,R7            CLEAR FOR ICM               *HMD 07/81*
         ICM   R7,B'0011',OUCBSWC                           *HMD 07/81*
         CVD   R7,WORK          CONVERT IT TO DECIMAL.
         MVC   @UCBSWC(3),=X'202120' MOVE IN THE EDIT MASK.
         ED    @UCBSWC-1(4),WORK+6 EDIT THE OUTPUT FIELD.
         SPACE
         L     R7,OUCBWMR       LOAD OUCBWMR                *HMD 07/81*
         LTR   R7,R7            SEE IF HI-ORDER BIT IS ON
         BNM   WMROK             INDICATING WMR INVALID.
         MVC   @UCBWMR(5),=C'*N/A*' IF SO, MOVE IN NOT AVAIL INDIC.
         MVI   @UCBWMS+6,C'-'   AND BLANK OUT THE SERVICE COUNTER.
         B     NOWMS            BY-PASS THE SERVICE PROCESSING.
WMROK    DS    0H
         SRL   R7,8             DIVIDE BY 256
         CVD   R7,WORK          CONVERT IT TO DECIMAL.
         MVC   @UCBWMR(5),=X'2020202120' MOVE IN EDIT MASK.
         ED    @UCBWMR-1(6),WORK+5 EDIT THE RESULT.
WMROKA   DS    0H
         SPACE
         MVI   STATUS,C' '      OUCB SWAP REASON CODE       *HMD 07/81*
         TM    OUCBAFL,OUCBCPL  HEAVY CPU BURNER (BABY)     *HMD 07/81*
         BNO   NOTSCPU          MILD JOB HERE               *HMD 07/81*
         MVI   STATUS,C'P'      MARK AS CPU HOG             *HMD 07/81*
NOTSCPU  DS    0H                                           *HMD 07/81*
         TM    ASCBRCTF,ASCBOUT SEE IF OUT SOMEHOW          *HMD 07/81*
         BNO   PFLDONE          MUST BE IN.                 *HMD 07/81*
         TM    OUCBEFL,OUCBOWT  CHECK FOR TERMINAL OUTWAIT  *HMD 07/81*
         BNO   NOTOUTW          BR IF NOT.                  *HMD 07/81*
         MVI   STATUS,C'T'      INDICATE OUTPUT WAIT        *HMD 07/81*
         B     PFLDONE                                      *HMD 07/81*
         SPACE 1                                            *HMD 07/81*
NOTOUTW  TM    OUCBEFL,OUCBMWT  SEE IF MSO DETECTED WAIT    *HMD 07/81*
         BZ    NOTMSO           BR IF NOT.                  *HMD 07/81*
         MVI   STATUS,C'V'      MOVE IN MSO REASON CODE     *HMD 07/81*
         B     PFLDONE                                      *HMD 07/81*
NOTMSO   TM    OUCBEFL,OUCBNQF  SEE IF ENQHOLD PROCESSED    *HMD 07/81*
         BZ    NOTENQ           BR. IF NOT                  *HMD 07/81*
         MVI   STATUS,C'E'      MOVE IN ENQHOLD REASON      *HMD 07/81*
         B     PFLDONE                                      *HMD 07/81*
NOTENQ   TM    OUCBEFL,OUCBLSW+OUCBTRM TERMINAL INPUT OR LW *HMD 07/81*
         BNO   NOTLWT           BR IF NOT.                  *HMD 07/81*
         MVI   STATUS,C'W'      TERMIN OR LONG WAIT         *HMD 07/81*
         B     PFLDONE                                      *HMD 07/81*
NOTLWT   TM    OUCBYFL,OUCBFXS  SEE IF REAL STORAGE SHORT.  *HMD 07/81*
         BZ    NOTRSS           NOT REAL STOR SHORTAGE      *HMD 07/81*
         MVI   STATUS,C'S'      MOVE IN RSS INDICATOR       *HMD 07/81*
         B     PFLDONE                                      *HMD 07/81*
NOTRSS   TM    OUCBYFL,OUCBAXS  SEE IF AUX STOR SHORTAGE.   *HMD 07/81*
         BNO   NOTASS           NOT AUX STOR SHORTAGE       *HMD 07/81*
         MVI   STATUS,C'A'      MOVE IN AUX STOR INDICATOR  *HMD 07/81*
         B     PFLDONE                                      *HMD 07/81*
NOTASS   TM    OUCBRFL,OUCBLGFX SEE IF LOGICAL RSS          *HMD 07/81*
         BNO   NOTLRSS          NOT LOGICAL REAL STOR SHORT *HMD 07/81*
         MVI   STATUS,C'F'      LOGICAL REAL STOR SHORTAGE  *HMD 07/81*
         B     PFLDONE                                      *HMD 07/81*
NOTLRSS  DS    0H                                           *HMD 07/81*
UNKNOWN  MVI   STATUS,C'?'      MOVE IN DONT KNOW INDICATION.
PFLDONE  DS    0H
         SPACE
         L     R7,OUCBWMS       OUCBWMS LOAD SERVICE UNITS THIS XACTION
         CVD   R7,WORK          CONVERT TO DECIMAL.
         MVC   @UCBWMS(7),=X'20202020202120' MOVE IN THE EDIT MASK.
         ED    @UCBWMS-1(8),WORK+4 EDIT THE RESULT.
         SPACE
NOWMS    LM    R8,R9,ASCBEJST   LOAD UP EJST (CPU TIME - TASK TYPE)
         SRDL  R8,12            TO GET MICROSEC
         LM    10,R11,ASCBSRBT  LOAD UP SRB TIME.
         SRDL  R10,12           TO GET MICROSEC
         AR    R9,R11           ADD TOGETHER.
         BNO   NOOVFLO          BRANCH IF NO OVERFLOW       *HMD 07/81*
         A     R8,=F'1'         OTHERWIZE ADD 1 TO HI-ORDER *HMD 07/81*
NOOVFLO  AR    R8,R10           ADD TO HI ORDER             *HMD 07/81*
         D     R8,=F'10000'     CONVERT TO SECONDS X 10-3   *HMD 07/81*
         CVD   R9,WORK          CONVERT IT TO DECIMAL.
         MVC   CPUTIME(9),=X'4020202021204B2020' MOVE IN THE EDIT MASK.
         ED    CPUTIME(9),WORK+4 EDIT THE RESULT.
         SPACE
         MVC   0(81,R1),LINE    MOVE THE LINE TO THE 3270 BUFFER.
         LH    R7,SCRSIZE       BUMP BUFFER COUNTER.
         LA    R7,81(,R7)
         STH   R7,SCRSIZE
         LA    R1,81(,R1)       SEE IF THE BUFFER IS FULL YET.
         C     R1,ADBUF
         BE    PUTIT            IF YES, THE GO PUT THIS SCREEN.
NOGOOD   BCT   R3,ASCBLOOP      BRANCH BACK TO LOOK AT NEXT MEMORY.
         LA    R4,BUFFER        LOAD ADDRESS OF OUTPUT BUFFER.
         CR    R4,R1            ARE WE STILL AT THE BEGINNING.
         BE    FINDCVT          IF SO, GO START AT THE TOP AGAIN.
         DROP  R5
         DROP  R6
         EJECT
*
**  LOOK THRU SRM CONTROL BLOCKS TO BUILD HEADER INFO
*
BUILDHDR DS    0H
         L     R4,CVTPTR       ---> CVT...
         USING CVT,R4          ADDRESS THE CVT              *HMD 09/82*
         L     R7,CVTPVTP      ---> PVT...
         L     R4,CVTOPCTP     ---> RMCT... 1ST MODULE OF IRARMCNS
         DROP  R4                                           *HMD 09/82*
         USING RMCT,R4                                      *HMD 09/82*
         L     R5,RMCTCCT      ---> CCT
         SR    R6,R6              CLEAR FOR ICM             *HMD 07/81*
         USING CCT,R5             ADDRESS THE CCT           *HMD 09/82*
         ICM   R6,B'0011',CCVUTILP    CPU UTILITIZATION     *HMD 07/81*
         CVD   R6,WORK             CONVERT TO DECIMAL...
         OI    WORK+7,X'0F'        FIX THE SIGN
         UNPK  HDRCPU,WORK+6(2)     ...AND EDIT
         SPACE
         L     R7,RMCTDMDT     ---> DMDT..     R4--> RMCT
         USING DMDT,R7                                      *HMD 09/82*
         SR    R15,R15         CLEAR A REG
         LA    R5,3            NUMBER OF DOMAIN ENTRIES TO PROCESS
         LA    R14,HDRDMN      POINT TO FIRST DOMAIN ENTRY
         LA    R7,DMDTEND      BUMP PAST FIRST DOMAIN       *HMD 07/81*
DODMNS   DS    0H
         ICM   R15,B'0011',DMDTMPLT      TARGET MPL         *HMD 09/82*
         CVD   R15,WORK        CHANGE IT TO DECIMAL
         OI    WORK+7,X'0F'    FIX THE SIGN
         UNPK  1(2,R14),WORK+6(2) MOVE IT TO THE OUTPUT AREA
         ICM   R15,B'0011',DMDTRUA          READY USERS     *HMD 09/82*
         CVD   R15,WORK        CHANGE IT TO DECIMAL
         OI    WORK+7,X'0F'    FIX THE SIGN
         UNPK  4(2,R14),WORK+6(2) MOVE IT TO THE OUTPUT AREA
         LA    R14,6(R14)     POINT TO NEXT DOMAIN ENTRY
         LA    R7,DMDTEND      BUMP PAST THIS DOMAIN        *HMD 07/81*
         BCT   R5,DODMNS       GO PROCESS ANOTHER
         SPACE 1
         L     R4,RMCTRCT         LOAD RCT ADDRESS          *HMD 07/81*
         DROP  R4                                           *HMD 09/82*
         USING RCT,R4             ADDRESS THE RCT           *HMD 09/82*
         SR    R6,R6              CLEAR FOR ICM             *HMD 07/81*
         ICM   R6,B'0011',RCVPTR  PAGING RATE               *HMD 09/82*
         CVD   R6,WORK             CONVERT TO DECIMAL...
         OI    WORK+7,X'0F'        FIX THE SIGN
         UNPK  HDRAPR,WORK+6(2)     ...AND EDIT
         SPACE
         SR    R6,R6              CLEAR FOR ICM             *HMD 07/81*
         ICM   R6,B'0011',RCVASMQA    QUEUE LENGTH AVERAGE  *HMD 09/82*
         CVD   R6,WORK             CONVERT TO DECIMAL...
         OI    WORK+7,X'0F'        FIX THE SIGN
         UNPK  HDRASQ,WORK+6(2)     ...AND EDIT
         SPACE
         SR    R6,R6              CLEAR FOR ICM             *HMD 07/81*
         ICM   R6,B'0011',RCVUICA UIC AVERAGE               *HMD 07/81*
         CVD   R6,WORK             CONVERT TO DECIMAL...
         OI    WORK+7,X'0F'        FIX THE SIGN
         UNPK  HDRUIC,WORK+6(2)     ...AND EDIT
         SPACE
         SR    R6,R6              CLEAR FOR ICM             *HMD 07/81*
         ICM   R6,B'0011',RCVAFQA INSERT AFC  AVERAGE       *HMD 07/81*
         CVD   R6,WORK             CONVERT TO DECIMAL...
         OI    WORK+7,X'0F'        FIX THE SIGN
         UNPK  HDRAFC,WORK+6(2)     ...AND EDIT
         SPACE
         SR    R6,R6              CLEAR FOR ICM             *HMD 07/81*
         ICM   R6,B'0011',RCVTOTDF   DEFRD IO AVERAGE UTIL  *HMD 07/81*
         CVD   R6,WORK             CONVERT TO DECIMAL...
         OI    WORK+7,X'0F'        FIX THE SIGN
         UNPK  HDRDIO,WORK+6(2)     ...AND EDIT
         DROP  R4                                           *HMD 09/82*
         EJECT
PUTIT    LA    R1,CLEAR         PREPARE
         LA    0,LENGTH            FOR
         AH    0,SCRSIZE              THE
         ICM   R1,8,TPUTFLG              FULL SCREEN
         TPUT  (R1),(0),R                   TPUT
         TGET  BUFFER,1         READ THE INPUT DATA FROM USER.
         OI    BUFFER,X'40'     GET TO UPPER CASE BEFORE COMPARE.
         CLI   BUFFER,C'Z'      CHECK IF TERMINATION REQUESTED.
*                                                           *HMD 07/81*
         BE    EODAD            BYE BYE BABY...
         CLI   BUFFER,C'T'      CHECK FOR TSO ONLY.
         BNE   BATCHCHK         IF NOT, TRY FOR BATCH ONLY MODE.
         MVI   BATCHORN+1,X'80' RESET THE BRANCHES TO GET
         MVI   TSOORNO+1,X'00'     ONLY TSO MEMORIES.
         B     GOODGRIF         BY-PASS FURTHER INPUT CHECKING.
BATCHCHK CLI   BUFFER,C'B'      CHECK FOR BATCH ONLY
         BNE   SWAPCHK          BRANCH TO CHECK OTHER OPTIONS.
         MVI   TSOORNO+1,X'10'  RESET THE BRANCHES TO GET
         MVI   BATCHORN+1,X'00'    ONLY BATCH (STC) MEMORIES.
         B     GOODGRIF         BY-PASS FURTHER INPUT CHECKING.
SWAPCHK  CLI   BUFFER,C'N'      CHECK FOR SWAPPABLE ONLY
         BNE   OTHERCHK         BRANCH TO CHECK OTHER OPTIONS.
         MVI   SWAPABLE+1,X'10' ONLY SWAPABLE MEMORIES.
         B     GOODGRIF         BY-PASS FURTHER INPUT CHECKING.
OTHERCHK CLI   BUFFER,C'A'      CHECK FOR EVERYTHING
         BNE   XYZ              IF NOT, TRY FOR IN OR OUT MODES.
         MVI   TSOORNO+1,X'00'  IF EVERYTHING, NOP ALL THE
         MVI   BATCHORN+1,X'00'    SELECTION BRANCHES.
         MVI   SWAPABLE+1,X'00'
XYZ      DS    0H
         CLI   BUFFER,C'O'      CHECK FOR OUT MODE
         BNE   WHATHECK
         MVI   INOROUT+1,X'00'  NOP THE BRANCH
         MVI   MODESW,X'FF'     INDICATE CHANGE OF MODES.
         B     GOODGRIF
WHATHECK CLI   BUFFER,C'I'      CHECK FOR IN OR READY MODE
         BNE   GOODGRIF
         MVI   INOROUT+1,X'10'  TAKE THE BRANCH
         MVI   MODESW,X'FF'     INDICATE MODE SWITCH.
         SPACE
GOODGRIF DS    0H
         MVC   SCRSIZE,=H'0'    RESET SCREEN SIZE.
         LA    R1,BUFFER        PREPARE
         LA    R6,BUFFER           FOR
         ICM   R6,8,C' '              THE
         LA    R7,BUFLEN                 MOVE
         LA    R8,BUFFER                    CHARACTER
         SR    R9,R9                           LONG
         MVCL  R6,R8                              TO CLEAR BUFFER.
         CLI   MODESW,X'FF'     CHECK FOR CHANGE OF MODES.
         BNE   MODEOK           BRANCH IF SAME MODE.
         MVI   MODESW,X'00'     RESET MODE CHANGE.
         B     FINDCVT          START OVER FROM BEGINNING.
         SPACE
MODEOK   DS    0H
         LTR   R3,R3            CHECK TO SEE IF MORE MEMORIES TO PROCES
         BZ    FINDCVT          NO, TAKE IT FROM THE TOP
         BCT   R3,ASCBLOOP      WAS THERE ONLY ONE LEFT AT BUFFER FULL
         B     FINDCVT          YES, START OVER FROM THE TOP.
         SPACE
EODAD    DS    0H
BYEBY    LA    R1,CLR           PREPARE FOR THE
         LA    0,L'CLR             FULL SCREEN
         ICM   R1,8,TPUTFLG           TPUT TO
         TPUT  (R1),(0),R                CLEAR THE SCREEN.
         L     R13,SAVE+4       LOAD CALLERS SAVE AREA POINTER.
         RETURN (14,12),RC=0    AND AWAY WE GO...
         EJECT
MODESW   DC    X'00'  MODE CHANGE.
WORK     DS    D
HEX      DC    C'0123456789ABCDEF'
SAVE     DS    18F
X        DC    CL80' '
         ORG   X
LINE     DC    X'1D60'
JOB      DC    CL8' '
         DC    C' '
         DC    C' '
STEP     DC    CL8' '
         DC    C' '
STATUS   DC    C' '
         DC    C' '
SIZE     DC    CL5' '
         DC    CL2' '
@UCBWSS  DC    CL5' '
         DC    CL2' '
TYPE     DC    C' '
         DC    C' '
WHERE    DC    CL3' '
         DC    C' '
DP       DC    CL2' '
         DC    C' '
@UCBPGN  DC    CL3' '
         DC    C' '
@UCBSWC  DC    CL3' '
         DC    C' '
         DC    C' '
         DC    C' '
@UCBWMR  DC    CL5' '
         DC    C' '
@UCBWMS  DC    CL7' '
         DC    C' '
CPUTIME  DC    CL8' '
         DC    C' '
         ORG X+90
SCRSIZE  DC    H'0'
TPUTFLG  DC    X'03'
ADBUF    DC    A(Z)
*   C7= WCC FOR CLEAR  11= SET BUFFER ADDRESS 4040 = BUFADD POS 0000
*   3C= REPEAT TO ADDRESS 4040(0000) CHAR(00) 11 = SET BUFFER ADDRESS
*   4040 = POSITION 0000(R=1 C=1)  13 = INSERT CURSOR
CLR      DC    X'C71140403C40400011404013'
*   C7= WCC FOR CLEAR  11= SET BUFFER ADDRESS 4040 = BUFADD POS 0000
*   3C= REPEAT TO ADDRESS 4040(0000) CHAR(00) 11 = SET BUFFER ADDRESS
*   4040 = POSITION 0000(R=1 C=1)  1D = START FIELD 40= UNPROTECTED
*   13 = INSERT CURSOR 40 = BLANK 1D = START FIELD E8 = PROTECT HILITE
CLEAR    DC    X'C71140403C4040001140401D4013'
         DC    X'401DE8'
SYSHDR   DS    0CL77
         DC    CL4'CPU='         CPU UTILIZATION
HDRCPU   DC    CL3'XXX',C'%'
         DC    CL5' AFC='        AVERAGE AVAILABLE FRAME COUNT
HDRAFC   DC    CL4'XXXX'
         DC    CL5' PGR='        PAGE RATE                  *HMD 07/81*
HDRAPR   DC    CL4'XXXX'
         DC    CL5' ASQ='        AUX STORAGE MANAGER QUE LENGTH
HDRASQ   DC    CL4'XXXX'
         DC    CL5' UIC='        UNIREFERENCED INTERVAL COUNT
HDRUIC   DC    CL4'XXXX'
         DC    CL5' DIO='        DEFERRED IO REQUESTS
HDRDIO   DC    CL4'XXXX'
         DC    CL6' DMNS='       # OF DOMAINS IN ENTRIES
HDRDMN   DC    3CL6' MT:RU'      MULTI-PROGRAMMING LEVEL TARGET
         DC    80C'-'            # OF READY USERS
         DC    X'404040'
HEADING DC CL77'  JOB     STEP   P MEMORY   WSS  T LOC DP  PG  SC     WX
               MR     SRV     CPU'
BUFFER   DC    21CL81' '
LENGTH   EQU   BUFFER-CLEAR
Z        DS    X
BUFLEN   EQU   Z-BUFFER
         EJECT                                              *HMD 09/82*
ICT      EQU   0                                            *HMD 08/81*
RMPT     EQU   0                                            *HMD 08/81*
RMEX     EQU   0                                            *HMD 08/81*
IRAEPPA  EQU   0                                            *HMD 08/81*
IRAEPPR  EQU   0                                            *HMD 08/81*
RMSB     EQU   0                                            *HMD 08/81*
EPDTSCN  EQU   0                                            *HMD 08/81*
EPATSCN  EQU   0                                            *HMD 08/81*
LSCT     EQU   0                                            *HMD 08/81*
IRAWTQE  EQU   0                                            *HMD 08/81*
IRAOUCB  EQU   0                                            *HMD 08/81*
IRAOUXB  EQU   0                                            *HMD 08/81*
IRACTMQE EQU   0                                            *HMD 08/81*
IRAOTQE  EQU   0                                            *HMD 08/81*
IRAINQE  EQU   0                                            *HMD 08/81*
IRAFLTM  EQU   0                                            *HMD 08/81*
IRASRBT  EQU   0                                            *HMD 08/81*
EPAT     EQU   0                                            *HMD 08/81*
RQSV     EQU   0                                            *HMD 08/81*
ICSP     EQU   0                                            *HMD 08/81*
RSPL     EQU   0                                            *HMD 08/81*
ENFPM    EQU   0                                            *HMD 08/81*
RMCA     EQU   0                                            *HMD 08/81*
MCT      EQU   0                                            *HMD 08/81*
         MNOTE *,'***************************************************'
         MNOTE *,'SOME OF THE MACROS BELOW ARE LICENSED MATERIAL.'
         MNOTE *,'THEY ARE AVAILABLE WITH THE OPTIONAL MATERIAL FOR'
         MNOTE *,'MVS SYSTEM PRODUCT AND WILL NOT BE DISTRIBUTED'
         MNOTE *,'WITH THE MVSUG MACRO LIBRARIES -- HOWARD M. DEAN'
         MNOTE *,'***************************************************'
         EJECT                                              *HMD 09/82*
         IRARMCT  ,       ** LICENSED MATERIAL IN PVTMACS ***HMD 09/82*
         EJECT                                              *HMD 09/82*
         IRACCT   ,       ** LICENSED MATERIAL IN PVTMACS ***HMD 09/82*
         EJECT                                              *HMD 09/82*
         IRARCT   ,       ** LICENSED MATERIAL IN PVTMACS ***HMD 09/82*
         EJECT                                              *HMD 09/82*
         IRADMDT  ,       ** LICENSED MATERIAL IN PVTMACS ***HMD 09/82*
         EJECT                                              *HMD 09/82*
         IHAASVT ,                                          *HMD 09/82*
         EJECT                                              *HMD 09/82*
         IHAASCB ,                                          *HMD 09/82*
         EJECT                                              *HMD 09/82*
         IRAOUCB ,                                          *HMD 09/82*
         EJECT                                              *HMD 09/82*
CSCB     DSECT                                              *HMD 09/82*
         IEECHAIN ,                                         *HMD 09/82*
         EJECT                                              *HMD 09/82*
         CVT   LIST=YES,DSECT=YES                           *HMD 09/82*
         END   CHIMP
