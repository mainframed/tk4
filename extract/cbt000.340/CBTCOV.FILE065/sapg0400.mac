SAPG0400 CSECT
         REGISTER
         EJECT
         STM   14,12,12(13)                       **************
         CNOP  0,8
         LR    R12,R15                            * HOUSE -    *
         USING SAPG0400,R12                       *   KEEPING  *
         LA    R15,SAVE                           * AND ALL    *
         ST    R15,8(R13)                         *   THAT     *
         ST    R13,4(R15)                         *      STUFF *
         LR    R13,R15                            **************
         EJECT
         OPEN  (INFILE,,INDEX,OUTPUT,TABLE,OUTPUT)
         EJECT
*
GETREC   DS    0H
         GET   INFILE,INREC                       GET A RECORD
         CLC   INREC+20(8),=C'$HASP373'           DOES IT MATCH PATT
         BNE   TWOCHEK                            NO GO TO TWOCHEK
         MVC   SWITCHES,=C'11'                    MOVE SWITCHES ON
         B     TABDATA                            GO TO FINAL
         EJECT
*
TWOCHEK  DS    0H
         MVI   SWITCHES,C'0'                      GOOD SWITCH
         CLC   INREC+110(5),=C'*****'
         BNE   CHECKER                            NO GO TO CHECKER
         MVI   SWITCHES+1,C'0'                    VALID SWITCH
*
CHECKER  CLC   SWITCHES,=C'00'                    IF OFF
         BE    GETREC                             GO GET ANOTHER
*
GETAB    CLC   INREC+20(7),=C'IEF450I'            ABEND MESSAGE
         BNE   GETJCL
         MVC   CONDM,=C'ABEND'
         MVC   CONDHOLD,CONDM
         MVI   CCSW,C'1'                          SET CC SWITCH
         B     MOVER
         EJECT
*
GETJCL   DS    0H
         CLC   INREC+20(7),=C'IEF453I'          JCL MESSAGE
         BNE   GETGD
         MVC   CONDM,=C'JCLER'                  MOVE TO OUTPUT
         MVC   CONDHOLD,CONDM
         MVI   CCSW,C'1'                        SET JCL SWITCH
         B     MOVER
         EJECT
*
GETGD    DS    0H
         CLC   INREC+16(9),=C'EXECUTION'
         BNE   GETCC
         MVC   GDATE,INREC+2
         B     MOVER
*
GETCC    DS    0H
         CLI   CCSW,C'1'                        IS CC SWITCH SET
         BE    GETTIME                          YES GET THE TIME
         CLC   INREC+1(7),=C'IEF142I'           CONDITION CODE ?
         BNE   GETTIME                          NO GET THE TIME
         LA    R4,INREC+45                      LOAD START OF RECORD
         LA    R5,=F'22'                        LOAD LENGTH OF RECORD
COMPARE  CLC   0(9,R4),=C'COND CODE'            COMPARE IT
         BE    EXIT                             YES IT MATCHES
         LA    R4,1(R4)                         LOAD NEXT BYTE TO R4
         BCT   R5,COMPARE                       TAKE ONE AWAY DO AGAIN
EXIT     MVC   COND,10(R4)
         CLC   COND,CONDHOLD                      COMPARE NEW AND OLD
         BL    GETTIME                            LOW
         MVC   CONDHOLD,COND                      MOVE NEW TO OLD
         MVI   CONDHOLD+4,C' '
         B     MOVER
         EJECT
*
GETTIME  DS    0H
         CLC   INREC+1(7),=C'IEF373I'             TIME MESSAGE
         BNE   MOVER
         MVC   DATER,INREC+31
         MVC   DATE2,DATER
         CLC   DATER,DATEHOLD
         BE    MOVER
         BNE   ARCHDOW                            DOW ROUTINE
         EJECT
*
MOVER    DS    0H
         MVC   REST,INREC                         MOVE REST OF REC
         AP    COUNTER,=P'1'                      ADD 1 TO SEQ COUNTER
         UNPK  SEQCOUNT,COUNTER                   UNPACK IT
         MVZ   SEQCOUNT+5(1),=X'F0'               MAKE PRINTABLE
         PUT   INDEX,OUTREC                       WRITE THE RECORD
         B     GETREC                             GO DO IT AGAIN
         EJECT
*
TABDATA  DS    0H
         CLC   JNUMB,INREC+14                     EQUAL TO CURRENT
         BE    GETREC                             YES DO IT AGAIN
*        CLC   JNAME+2(1),=C'P'  *
*        BE    OKAY              *  THIS CODE IS CURRENTLY IN THE
*        CLC   JNAME+2(1),=C'R'  *  LOAD MODULE IF DESIRED IT CAN
*        BE    OKAY              *  BE ELIMINATED TO ACCEPT ALL
*        CLC   JNAME+2(1),=C'F'  *  CLASS P OUTPUT
*        BE    OKAY              *
*        CLC   JNAME+2(1),=C'C'  *
*        BNE   DOER              *
OKAY     MVC   JOBTAB,JNAME                       MOVE JOBNAME
         MVC   NUMBTAB,JNUMB                      MOVE JES NUMB
         MVC   CONDTAB,CONDHOLD                   MOVE CONDITION
         MVC   CONDHOLD,=C'0000 '                 RESET CONDITION
         CLI   FIRSTSW,C'0'                       FIRST TIME ??
         BE    DOER                               BRANCH AROUND
         PUT   TABLE,TABREC                       WRITE TABLE RECORD
DOER     ZAP   COUNTER,=P'0'                      ZERO SEQ COUNTER
         MVI   FIRSTSW,C'1'                       RESET FIRST TIME
         MVC   HOLD,JNUMB                         MOVE OLD TO HOLD
         MVI   CCSW,C'0'                          MOVE OFF TO CC
         MVC   JNUMB,INREC+14                     MOVE JOB NAME
         MVC   JNAME,INREC+29                     MOVE JOB NUMB
         B     MOVER                               RESET SWITCH
         EJECT
*
ARCHDOW  DS    0H
         MVC   DOW,PCON0          INITIALIZE FIELD
         MVC   WRKYEAR,PCON79     INITIALIZE FIELD
         MVC   WRKDAY,PCON1       INITIALIZE FIELD
         MVC   FDOY,PCON2         INITIALIZE FIELD
         MVC   NEXTDOW,PCON1      INITIALIZE FIELD
         MVC   YEAR,DATER
         MVC   DAY,DATER+2
         MVC   DATEHOLD,DATER
         PACK  INYEAR,YEAR        PACK THE YEAR IN STORAGE
         PACK  INDAY,DAY          PACK THE DAY IN STORAGE
*
LOOP1    DS    0H
         CP    INYEAR,WRKYEAR     COMPARE INYEAR TO WRKYEAR
         BNH   CHKDAY             IF INYEAR IS SMALLER, BRANCH AROUND
         AP    FDOY,NEXTDOW       ADD NEXTDOW TO FDOY
         ZAP   NEXTDOW,PCON1      INSURE RESET TO 1
         AP    WRKYEAR,PCON1      ADD 1 TO WORKYEAR
*
CHKDAY   DS    0H
         CP    FDOY,PCON7         COMPARE FDOY TO 7
         BNH   CHKYEAR            IF FDOY IS SMALLER, BRANCH AROUND
         ZAP   FDOY,PCON1         SET FDOY TO 1
*
CHKYEAR  DS    0H
         CP    WRKYEAR,PCON0      SEE IF EVEN CENTURY
         BE    EVENCENT           IF YES, BRANCH AROUND
         ZAP   DIVIDEND,WRKYEAR   ZAP WRKYEAR TO DIVIDEND
         DP    DIVIDEND,=PL1'4'   DIVIDE YEAR BY 4
         CP    REMAINDR,PCON0     IS REMAINDER 0?
         BNE   CHKINYR            IF NOT, BRANCH AROUND
         ZAP   NEXTDOW,PCON2      SET NEXTDOW EQUAL TO 2
         B     CHKINYR            BRANCH TO CHKINYR
*
EVENCENT DS    0H
         ZAP   NEXTDOW,PCON1      SET NEXTDOW EQUAL TO 1
*
CHKINYR  DS    0H
         CP    WRKYEAR,INYEAR     COMPARE WRKYEAR AND INYEAR
         BNE   LOOP1              IF NOT EQUAL, GO BACK
         ZAP   DOW,FDOY           SET DOW EQUAL TO FDOY
*
LOOP2    DS    0H
         AP    DOW,PCON1          ADD 1 TO DOW
         CP    DOW,PCON7          COMPARE DOW TO 7
         BNH   ADDWRK             IF NOT HIGHER, BRANCH AROUND
         ZAP   DOW,PCON1          SET DOW EQUAL TO 1
ADDWRK   DS    0H
         AP    WRKDAY,PCON1       ADD 1 TO WORKDAY
         CP    INDAY,WRKDAY       COMPARE INDAY TO WRKDAY
         BNE   LOOP2              IF NOT EQUAL, GO BACK
*
RESULT   UNPK  FLDA,DOW           CONVERT THE RESULT INTO REG 15
         OI    FLDA+15,X'F0'
         MVC   FLDB,FLDA+14
         B     MOVER
         EJECT
*
EOFRTN   DS    0H
         MVC   JOBTAB,JNAME                        MOVE JOBNAME
         MVC   NUMBTAB,JNUMB                       MOVE JES NUMB
         MVC   CONDTAB,CONDHOLD                    MOVE CONDITION
         MVC   CONDHOLD,=C'00000'                  RESET CONDITION
         PUT   TABLE,TABREC                        WRITE TABLE RECORD
         CLOSE (INFILE,,INDEX,,TABLE)              CLOSE THEM UP
         L     R13,SAVE+4
         LM    R14,R12,12(R13)
         SR    R15,R15                             ZERO OUT R15
         BR    14
         EJECT
         PRINT NOGEN
*
INFILE   DCB   DDNAME=INPUT1,MACRF=GM,EODAD=EOFRTN,DSORG=PS
INDEX    DCB   DDNAME=OUTPUT1,MACRF=PM,DSORG=PS,LRECL=160
TABLE    DCB   DDNAME=OUTPUT2,MACRF=PM,DSORG=PS,LRECL=80
         EJECT
         PRINT GEN
*
*  WORK AREAS
*
DOUBLE   DS    D
ANS      DS    F
SWITCHES DC    C'00'
CONDHOLD DS    CL5
COND     DS    CL4
COUNTER  DC    P'0001'
DATER    DS    CL5
DATEHOLD DS    CL5
CCSW     DC    C'0'
FIRSTSW  DC    C'0'
CONDM    DS    CL5
HOLD     DS    CL4
*
INREC    DS    CL133
*
OUTREC   DS    0CL160
DATERUN  DS    CL6
JNAME    DS    CL8
JNUMB    DS    CL4
SEQCOUNT DS    CL6
         DC    X'404040'
REST     DS    CL133
*
TABREC   DS    0CL80
DATETAB  DS    0CL6
BLANK    DC    C'0'
DATE2    DS    CL5
JOBTAB   DS    CL8
NUMBTAB  DS    CL4
CONDTAB  DS    CL5
FLDB     DS    CL2
GDATE    DS    CL9
         DC    XL46'40'
*
         DS    0D                 ACHIEVE DOUBLEWORD ALIGNMENT
DOW      DS    PL8                WORK FIELD
INYEAR   DS    PL8                CURRENT JULIAN YEAR
INDAY    DS    PL8                CURRENT JULIAN DAY
WRKYEAR  DS    PL8                WORK FIELD
WRKDAY   DS    PL8                WORK FIELD
FDOY     DS    PL8                WORK FIELD
NEXTDOW  DS    PL8                WORK FIELD
PL4      DS    PL4                DEFINE 4 BYTES OF PACKED STORAGE
*
PCON0    DC    PL8'00'            DEFINE PACKED CONSTANT OF 0
PCON1    DC    PL8'01'            DEFINE PACKED CONSTANT OF 1
PCON2    DC    PL8'02'            DEFINE PACKED CONSTANT OF 2
PCON7    DC    PL8'07'            DEFINE PACKED CONSTANT OF 7
PCON79   DC    PL8'79'            DEFINE PACKED CONSTANT OF 79
*
DIVIDEND DS    0PL4               DEFINE STORAGE FOR DIVISION
QUOTIENT DS    PL3'0'               SUBDEFINE FOR QUOTIENT (ANSWER)
REMAINDR DS    PL1'0'               SUBDEFINE FOR REMAINDER
*
FLDA     DS    CL16
*
CL8      DS    0CL8               DEFINE 8 BYTES OF ZONED STORAGE
         DS    CL3
YEAR     DS    CL2                  SUBDEFINE FOR YEAR (000YY)
DAY      DS    CL3                  SUBDEFINE FOR DAY  (DDD)
SAVE     DS    18F
         END   SAPG0400
