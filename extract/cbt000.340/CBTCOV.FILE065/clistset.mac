CLISTSET TITLE 'C L I S T S E T  --  SET A CLIST VARIABLE TO A VALUE'
***********************************************************************
*                                                                     *
*                        C L I S T S E T                              *
*                                                                     *
*                SET A CLIST VARIABLE TO A GIVEN VALUE                *
*                                                                     *
*     THIS SUBROUTINE CAN BE USED TO SET A SYMBOLIC VARIABLE TO       *
*     A USER-SPECIFIED VALUE WITHIN A CLIST. THE VARIABLE MUST        *
*     ALREADY BE DEFINED (THAT IS, THERE MUST ALREADY BE AN ENTRY     *
*     IN THE SYMBOLIC NAME TABLE.)                                    *
*                                                                     *
*     ON ENTRY: R1 CONTAINS THE ADDRESS OF A THREE FULLWORD           *
*               PARAMETER LIST.                                       *
*                                                                     *
*     R1  --->  ECTADDR   DS   A        ADDR OF ECT                   *
*               VALADDR   DC   A(VALUE) ADDR OF NEW VALUE             *
*               NAMADDR   DC   A(NAME)  ADDR OF SYMBOLIC NAME         *
*                                                                     *
*               VALUE     DC   H'8',CL8'ABCDEFGH'                     *
*               NAME      DC   H'7',CL7'SYSDVAL'                      *
*                                                                     *
*            ** NOTE -- THAT IF 'VALADDR' IS 0, IT WILL BE SET TO     *
*            ** ----    THE ADDRESS OF THE 'SVTAB' ENTRY FOR 'NAME'.  *
*                                                                     *
*               NOTE THAT THE VARIABLE NAME IS *NOT* PRECEEDED BY     *
*               AN AMPERSAND ('&').                                   *
*                                                                     *
*     RETURN CODES:                                                   *
*               R15 = 0    NORMAL RETURN; VALUE WAS SET               *
*               R15 = 4    NO CLIST RUNNING                           *
*               R15 = 8    VARIABLE NAME NOT FOUND                    *
*                                                                     *
***********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
CLISTSET CSECT
         SAVE  (14,12),,CLISTSET__&SYSDATE_&SYSTIME  SAVE REGISTERS
         USING CLISTSET,R15       DEFINE BASE REGISTER
         LR    R2,R13             CHAIN SAVE AREAS
         LA    R13,SETSAVE
         ST    R2,4(,R13)
         ST    R13,8(,R2)
         DROP  R15                RE-DEFINE BASE REGISTERS
         USING SETSAVE,R13
         B     SETSAVE+72         BRANCH AROUND SAVE AREA
SETSAVE  DC    18F'0'             SAVE AREA
         SPACE 2
BEGIN    ST    R1,R1SAVE          SAVE R1 FOR FUTURE USE
         L     R2,4(,R1)          R2 = ADDR OF NEW VALUE
         ST    R2,SAVALADR        SAVE IT.
         LTR   R2,R2              IS IT 0 ('FIND' REQUEST)?
         BZ    GETNAME            YES, SKIP.
         LH    R2,0(,R2)          R2 = LENGTH OF NEW VALUE
         STH   R2,VALLEN          SAVE LENGTH OF NEW VALUE
GETNAME  L     R2,8(R1)           R2 = ADDR OF VARIABLE NAME
         LH    R2,0(R2)           R2 = LENGTH OF VARIABLE NAME
         STH   R2,NAMLEN          SAVE LENGTH OF VARIABLE NAME
         L     R2,0(R1)           R2 = ADDR OF ECT
         L     R2,4(R2)           R2 = ADDR OF IOSRL WORK AREA
         L     R3,0(R2)           R3 = ADDR OF TOP STACK ELEMENT
CHKCLIST TM    0(R3),X'08'        IS THIS STACK ELEMENT A CLIST?
         BO    CLIST              YES; CONTINUE
         S     R3,=F'4'           NO;  R3 = ADDR OF NEXT STACK ELEM.
         C     R3,4(R2)           IS R3 = ADDR OF BOTTOM STACK ELEM.?
         BNL   CHKCLIST           NO;  CHECK THIS ELEMENT
         B     NOTCLIST           YES; WE ARE NOT IN A CLIST NOW
         SPACE 2
         USING EXECDATA,R5        EXECDATA
         USING SNTAB,R6           SYMBOLIC NAME TABLE HEADER
         USING SNTELEM,R7         SYMBOLIC NAME TABLE ELEMENT
         USING OSVTAB,R8          OLD SYMBOLIC VARIABLE TABLE HEADER
         USING OSVTELEM,R9        OLD SYMBOLIC VARIABLE TABLE ELEMENT
         USING NSVTAB,R10         NEW SYMBOLIC VARIABLE TABLE HEADER
         USING NSVTELEM,R11       NEW SYMBOLIC VARIABLE TABLE ELEMENT
         SPACE 2
CLIST    L     R2,0(R3)           R2 = ADDR OF LSD
         L     R5,12(R2)          R5 = ADDR OF EXECDATA
         L     R6,SNTABFST        R6 = ADDR OF FIRST SNTAB ON QUEUE
         L     R8,SVTABFST        R8 = ADDR OF FIRST (AND ONLY) SVTAB
         L     R3,8(R1)           R3 = ADDR OF SYMBOLIC NAME
FRSTNAME LA    R7,SNTELFST        R7 = ADDR OF FIRST SNTAB ELEMENT
         LA    R2,SNTAB           R2 = ADDR OF FIRST SNTAB HEADER
         A     R2,SNTABUSE        R2 = ADDR OF END OF THIS SNTAB
CHKLEN   CLC   NAMLEN(2),SNTLNG   DOES LENGTH MATCH LENGTH IN TABLE?
         BE    CHKNAME            YES; CONTINUE, THIS MIGHT BE THE ONE
NEXTNAME AH    R7,SNTLNG          R7 = R7 + LENGTH OF NAME
         LA    R7,LSNTELEM(R7)    R7 = PTR TO NEXT ELEMENT IN SNTAB
         CR    R7,R2              HAVE WE SLID OFF THE END?
         BL    CHKLEN             NO;  CHECK NEXT ELEMENT IN SNTAB
         ICM   R6,15,SNTABNXT     R6 = ADDR OF NEXT SNTAB
         BZ    NOTEXIST           R6 = 0, SO VARIABLE NOT FOUND
         B     FRSTNAME           BEGIN SCANNING THIS SNTAB
CHKNAME  LH    R4,NAMLEN          R4 = LENGTH OF SYMBOLIC NAME
         BCTR  R4,0               R4 = R4 - 1 FOR EXECUTE
CLCNAME  CLC   SNTDATA(0),2(R3)   < EXECUTED > DO NAMES MATCH?
         EX    R4,CLCNAME         DO NAMES MATCH?
         BNE   NEXTNAME           NO;  KEEP LOOKING
         L     R9,SNTVLPTR        R9 = ADDR OF MATCHING SVTAB ELEMENT
         CLC   SAVALADR,=XL4'00'  IS THIS A 'FIND' REQUEST?
         BNE   CHKVALEN           NO, GO CHECK VALUE LENGTH.
         L     R1,R1SAVE          RESTORE PARM POINTER.
         ST    R9,4(R1)           RETURN SVTAB ELEMENT ADDR.
         B     NORM               RETURN.
CHKVALEN CLC   VALLEN(2),OSVTORIG IS NEW LENGTH > OLD LENGTH?
         BNH   SETVAL             NO;  JUST GO SET THE NEW VALUE
         SPACE 2
***********************************************************************
*                                                                     *
*     THE NEW VALUE WILL NOT FIT IN THE OLD SLOT, SO ONE WAY OR       *
*     ANOTHER WE WILL HAVE TO BUILD A NEW SLOT.                       *
*     IF THE OLD VALUE WAS NOT A NULL, WE MUST ADD THE LENGTH OF      *
*     ITS ELEMENT TO THE 'FREE' COUNTER; THAT IS, THE NUMBER OF       *
*     BYTES THAT ARE ASSIGNED BUT NOT IN USE.                         *
*                                                                     *
***********************************************************************
         LA     R2,OSVELFST       R2 = ADDR OF FIRST ELEMENT (NULL)
         C      R2,SNTVLPTR       WAS OLD VALUE = NULL?
         BE     NULL              YES; NO NEED TO 'FREE' THE ELEMENT
         L      R2,OSVTBFRE       R2 = # OF FREE BYTES
         AH     R2,OSVTORIG       R2 = R2 + ORIGINAL LENGTH
         LA     R2,LOSVTAB        R2 = R2 + 4 BYTES OF HEADER
         ST     R2,OSVTBFRE       UPDATE # OF ASSIGNED-NOT-IN-USE
NULL     EQU    *
         SPACE  2
***********************************************************************
*                                                                     *
*     WILL THE NEW ELEMENT FIT INTO THE FREE SPACE AT THE END OF      *
*     THE OLD SVTAB? IF SO, JUST BUILD THE NEW ELEMENT DOWN THERE.    *
*                                                                     *
***********************************************************************
         LH     R2,VALLEN         R2 = LENGTH OF NEW VALUE
         LA     R2,LOSVTAB(R2)    R2 = R2 + LENGTH OF 4 BYTE HDR
         L      R3,OSVTBLNG       R3 = LENGTH OF OLD SVTAB
         S      R3,OSVTBUSE       R3 = LENGTH OF FREE BYTES AT END
         CR     R2,R3             WILL NEW ELEMENT FIT AT END OF SVTAB?
         BNH    USEOLDSV          YES; JUST USE THE OLD SVTAB
***********************************************************************
*                                                                     *
*     NO ROOM IN THE OLD SVTAB, SO WE MUST ALLOCATE A NEW ONE AS      *
*     FOLLOWS:                                                        *
*     1) GETMAIN SOME SPACE TWICE AS LONG AS THE OLD SVTAB.           *
*     2) CHAIN THROUGH THE SNTAB TABLE(S), AND MOVE DATA FROM THE     *
*        OLD SVTAB TO THE NEW ONE ELEMENT AT A TIME.                  *
*     3) FREE THE OLD SVTAB AND MAKE EXECDATA+8 POINT TO THE NEW      *
*        ONE WE JUST BUILT.                                           *
*     4) MAKE SURE THE NEW ELEMENT WILL FIT AND PUT IT IN.            *
*                                                                     *
***********************************************************************
GETNEWSV L      R2,OSVTBLNG       R2 = LENGTH OF OLD SVTAB
         SLL    R2,1              R2 = R2 * 2
         GETMAIN RU,LV=(R2),SP=78 GET SPACE FOR NEW SVTAB
         LR     R10,R1            R10 = ADDR OF NEW SVTAB
         XC     NSVTBNXT(4),NSVTBNXT CLEAR PTR TO 'NEXT' SVTAB
         ST     R2,NSVTBLNG       SAVE LENGTH OF NEW SVTAB
         MVC    NSVTBUSE(4),=F'20' SET LENGTH = 20
         XC     NSVTBFRE(4),NSVTBFRE CLEAR 'ASSIGNED-BUT-UNUSED' COUNT
         ST     R10,OSVTBNXT      CHAIN OLD SVTAB TO NEW SVTAB
         XC     NSVELFST(4),NSVELFST CLEAR 'NULL' VALUE
         ST     R6,SAVSNTAB       SAVE ADDR OF CHANGING SNTAB
         ST     R7,ADDSNTAB       SAVE ADDR OF CHANGING SNTAB ELEMENT
         L      R6,SNTABFST       R6 = ADDR OF FIRST SNTAB
         XR     R7,R7             R7 = 0
         LA     R7,SNTELFST       R7 = ADDR OF FIRST SNTAB ELEMENT
         LA     R11,NSVELFST+4    R11 = ADDR OF FIRST FREE SVTAB ELEM.
***********************************************************************
*                                                                     *
*     COPY OLD SVTAB TO NEW SVTAB. WE DO THIS BY SCANNING THROUGH     *
*     ALL THE SNTAB ELEMENTS ONE AT A TIME. IF THE VALUE OF THE       *
*     VARIABLE WAS 'NULL', WE JUST NEED TO UPDATE THE 'VALUE PTR'     *
*     TO POINT TO THE NEW 'NULL' FIELD IN THE NEW SVTAB. IF IT IS     *
*     NOT NULL, THEN COPY THE CORRESPONDING SVTAB ELEMENT FROM THE    *
*     OLD SVTAB TO THE NEW SVTAB.                                     *
*     WHEN THE LAST VARIABLE IN THE SNTAB HAS BEEN PROCESSED, CHECK   *
*     TO SEE IF THERE IS ANOTHER SNTAB. IF NOT, FREE THE OLD SVTAB    *
*     AND CONTINUE.                                                   *
*                                                                     *
***********************************************************************
NXTSNEL  CLC    SNTVLPTR(4),=F'0' HAVE ALL SNTAB ELEMENTS BE PROCESSED?
         BE     EOSNTAB           YES; WE HIT END OF THIS SNTAB
         C      R7,ADDSNTAB       IS THIS THE VARIABLE BEING CHANGED?
         BE     SKIP              YES; SKIP IT: WE WILL COPY IT LATER
         XR     R3,R3             R3 = 0
         LA     R3,OSVELFST       R3 = ADDR OF OLD 'NULL' VALUE
         C      R3,SNTVLPTR       IS THIS VARIABLE = NULL?
         BNE    COPYVAL           NO;  COPY IN THE OLD VALUE
NULL1    LA     R3,NSVELFST       R3 = ADDR OF 'NULL' IN NEW SVTAB
         ST     R3,SNTVLPTR       YES; UPDATE SNTAB TO POINT TO 'NULL'
         B      SKIP              SKIP THE COPY
***********************************************************************
*                                                                     *
*     COPY DATA ELEMENT FROM OLD SVTAB TO NEW SVTAB                   *
*                                                                     *
***********************************************************************
COPYVAL  ST     R5,SAVEXEC        SAVE ADDR OF EXECDATA (NEED R5)
         L      R9,SNTVLPTR       R9 = ADDR OF OLD SVTAB ELEMENT
         LR     R2,R11            R2 = ADDR OF NEW SVTAB ELEMENT
         L      R4,SNTVLPTR       R4 = ADDR OF OLD SVTAB ELEMENT
         LH     R3,OSVTORIG       R3 = LENGTH OF OLD ELEMENT - 4
         LA     R3,LOSVELEM(R3)   R3 = FULL LENGTH OF OLD ELEMENT
         LR     R5,R3             R5 = "   "   "   "   "   "   "
         MVCL   R2,R4             COPY OLD ELEMENT INTO NEW SVTAB
         L      R5,SAVEXEC        R5 = ADDR OF EXECDATA (RELOAD IT)
         LH     R3,OSVTORIG       R3 = LENGTH OF OLD ELEMENT - 4
         LA     R3,LOSVELEM(R3)   R3 = FULL LENGTH OF OLD ELEMENT
         A      R3,NSVTBUSE       R3 = TOTAL BYTES USED IN NEW SVTAB
         ST     R3,NSVTBUSE       UPDATE 'BYTES USED' IN NEW SVTAB
         LH     R3,NSVTORIG       R3 = ORIGINAL LENGTH
         SH     R3,NSVTLNG        R3 = UNUSED BYTES IN ELEMENT
         A      R3,NSVTBFRE       R3 = TOTAL 'FREE' BYTES IN NEW SVTAB
         ST     R3,NSVTBFRE       UPDATE 'FREE BYTES' IN NEW SVTAB
         ST     R11,SNTVLPTR      UPDATE SNTAB TO POINT TO NEW SVTABELM
         AH     R11,NSVTORIG      R11 = R11 + LENGTH OF STRING
         LA     R11,LNSVELEM(R11) R11 = ADDR OF NEXT FREE AREA
SKIP     AH     R7,SNTLNG         R7 = R7 + SYMBOLIC NAME LENGTH
         LA     R7,LSNTELEM(R7)   R7 = ADDR OF NEXT SNTAB ELEMENT
         B      NXTSNEL           GO TO NEXT SNTAB ELEMENT
         SPACE  1
***********************************************************************
*                                                                     *
*     ALL DONE WITH THIS SNTAB - SEE IF THERE ARE ANYMORE             *
*                                                                     *
***********************************************************************
EOSNTAB  CLC    SNTABNXT,=F'0'    ARE THERE ANYMORE SNTABS?
         BE     LASTSN            NO;  THIS WAS THE LAST ONE
         L      R6,SNTABNXT       YES; R6 = ADDR OF NEXT SNTAB HEADER
         LA     R7,SNTELFST       R7 = ADDR OF FIRST SNTAB ELEMENT
         B      NXTSNEL           GO CHECK NEXT SNTAB ELEMENT
***********************************************************************
*                                                                     *
*     ALL VARIABLES COPIED, SO FREE UP THE OLD SVTAB AND CONTINUE     *
*                                                                     *
***********************************************************************
LASTSN   ST     R10,SVTABFST      UPDATE EXECDATA TO POINT TO NEW SVTAB
         L      R9,OSVTBLNG       R9 = LENGTH OF OLD SVTAB
         FREEMAIN RU,LV=(9),SP=78,A=(8) FREE OLD SVTAB
         L      R6,SAVSNTAB       R6 = ADDR OF SNTAB OWNING NEW VAR.
         L      R7,ADDSNTAB       R7 = ADDR OF CHAINGING SNTAB ELEMENT
***********************************************************************
*                                                                     *
*     COPY THIS DATA ELEMENT ONTO THE BOTTOM OF THE EXISTING SVTAB    *
*     AND UPDATE THE 'USED' AND 'FREESPACE' COUNTERS AS NEEDED.       *
*                                                                     *
***********************************************************************
USEOLDSV L      R8,SVTABFST       R8 = ADDR OF CURRENT SVTAB
         LR     R9,R8             R9 = "    "    "    "    "
         A      R9,OSVTBUSE       R9 = ADDR OF FIRST FREE AREA IN SVTAB
         MVC    OSVTORIG(2),VALLEN MOVE VARIABLE ORIGINAL LENGTH FIELD
         MVC    OSVTLNG(2),VALLEN  MOVE VARIABLE CURRENT LENGTH FIELD
         L      R3,OSVTBUSE       R3 = LENGTH OF SVTAB 'IN-USE'
         AH     R3,OSVTORIG       R3 = R3 + LENGTH OF VARIABLE
         LA     R3,4(R3)          R3 = TOTAL BYTES 'IN-USE'
         ST     R3,OSVTBUSE       UPDATE 'IN-USE' COUNT
         ST     R9,SNTVLPTR       UPDATE OLD VALUE POINTER
***********************************************************************
*                                                                     *
*             COPY THE NEW VALUE INTO THE SLOT PROVIDED               *
*                                                                     *
***********************************************************************
SETVAL   L      R3,OSVTBFRE       R3 = NUMBER OF 'FREE' BYTES
         AH     R3,OSVTLNG        R3 = R3 + OLD LENGTH
         SH     R3,VALLEN         R3 = R3 - NEW LENGTH
         ST     R3,OSVTBFRE       UPDATE NUMBER OF 'FREE' BYTES
         MVC    OSVTLNG(2),VALLEN UPDATE NEW LENGTH FIELD
         LA     R2,OSVTDATA       R2 = ADDR OF  SVTAB DATA FIELD
         L      R1,R1SAVE         R1 = ADDR OF PARMLIST
         L      R4,4(R1)          R4 = ADDR OF NEW VALUE TO BE SET - 2
         LA     R4,2(R4)          R4 = "    "    "    "    "    "
         LH     R3,VALLEN         R3 = LENGTH OF NEW VALUE
         LR     R5,R3             R5 = LENGTH OF NEW VALUE
         MVCL   R2,R4             COPY IN NEW VALUE  (AT LAST!)
***********************************************************************
*                                                                     *
*                      ALL DONE - NORMAL RETURN                       *
*                                                                     *
***********************************************************************
NORM     LA     R15,0             R15 = RCODE = 0
         B      RET
NOTCLIST LA     R15,4             R15 = RCODE = 4  (NOT A CLIST)
         B      RET
NOTEXIST LA     R15,8             R15 = RCODE = 8  (NAME NOT DEFINED)
         B      RET
RET      L      R13,4(R13)        R13 = ADDR OF OLD SAVE AREA
         RETURN (14,12),RC=(15)   RETURN TO CALLER
         SPACE  1
         DROP   R5,R6,R7,R8,R9,R10,R11,R13
         EJECT
R1SAVE   DS    A              SAVE REGISTER 1
VALLEN   DS    H              LENGTH OF NEW VALUE
NAMLEN   DS    H              LENGTH OF NAME
SAVEXEC  DS    A              SAVE AREA FOR EXECDATA ADDR (R5)
SAVSNTAB DS    A              SAVE AREA FOR SNTAB HEADER ADDR
ADDSNTAB DS    A              SAVE AREA FOR SNTAB ELEMENT ADDR
SAVALADR DS    A              SAVE AREA FOR 'VALADDR'.
         SPACE 1
         LTORG
         SPACE 3
EXECDATA DSECT                EXECDATA MAPPING DSECT
SNTABFST DS    A              ADDR OF FIRST SNTAB
SVTABFST DS    A              ADDR OF FIRST SVTAB
         SPACE 3
SNTAB    DSECT                SYMBOLIC NAME TABLE HEADER DSECT
SNTABNXT DS    A              ADDR OF NEXT SNTAB IN CHAIN
SNTABLNG DS    A              LENGTH OF THIS SNTAB
SNTABUSE DS    A              LENGTH OF THE SNTAB IN USE
SNTELFST EQU   *              ADDR OF FIRST ELEMENT FOR THIS SNTAB
LSNTAB   EQU   *-SNTAB        LENGTH OF SNTAB HEADER
         SPACE 1
SNTELEM  DSECT                SYMBOLIC NAME TABLE ELEMENT DSECT
SNTVLPTR DS    A              ADDR OF MATCHING SVTAB ELEMENT ENTRY
SNTFLAGS DS    XL2            FLAGS DESCRIBING THIS ELEMENT
SNTLNG   DS    H              LENGTH OF THIS NAME
SNTDATA  EQU   *              ADDR OF NAME
LSNTELEM EQU   *-SNTELEM      LENGTH OF SNTAB ELEMENT
         SPACE 3
OSVTAB   DSECT                OLD SYMBOLIC VALUE TABLE HEADER DSECT
OSVTBNXT DS    A              ADDR OF NEXT SVTAB IN 'CHAIN'
OSVTBLNG DS    A              LENGTH OF THIS SVTAB IN BYTES
OSVTBUSE DS    A              BYTES ASSIGNED
OSVTBFRE DS    A              BYTES ASSIGNED BUT NOT-IN-USE ('GAS')
OSVELFST EQU   *              ADDR OF FIRST SVTAB ELEMENT
LOSVTAB  EQU   *-OSVTAB       LENGTH OF SVTAB HEADER
         SPACE 1
OSVTELEM DSECT                OLD SYMBOLIC CALUE TABLE ELEMENT DSECT
OSVTLNG  DS    H              CURRENT LENGTH OF STRING
OSVTORIG DS    H              ORIGINAL (TOTAL) LENGTH OF STRING
OSVTDATA EQU   *              ADDR OF ACTUAL DATA VALUE
LOSVELEM EQU   *-OSVTELEM     LENGTH OF SVTAB ELEMENT HEADER
         SPACE 3
NSVTAB   DSECT                NEW SYMBOLIC VALUE TABLE HEADER DSECT
NSVTBNXT DS    A              ADDR OF NEXT SVTAB IN 'CHAIN'
NSVTBLNG DS    A              LENGTH OF THIS SVTAB IN BYTES
NSVTBUSE DS    A              BYTES ASSIGNED
NSVTBFRE DS    A              BYTES ASSIGNED BUT NOT-IN-USE ('GAS')
NSVELFST EQU   *              ADDR OF FIRST SVTAB ELEMENT
LNSVTAB  EQU   *-NSVTAB       LENGTH OF SVTAB HEADER
         SPACE 1
NSVTELEM DSECT                NEW SYMBOLIC CALUE TABLE ELEMENT DSECT
NSVTLNG  DS    H              CURRENT LENGTH OF STRING
NSVTORIG DS    H              ORIGINAL (TOTAL) LENGTH OF STRING
NSVTDATA EQU   *              ADDR OF ACTUAL DATA VALUE
LNSVELEM EQU   *-NSVTELEM     LENGTH OF SVTAB ELEMENT HEADER
         END   CLISTSET
