$CAL     TITLE '$ - TSO CALL FUNCTION FOR LINKLIB MODULES'
*
*        LAST UPDATED 09 MAY 73 - BMD (*BMD*)
*                     FIX PARM OF '' AND SHARE
*                     SUBPOOL 78 FOR IKJPUTGT
*
*        LAST UPDATED 05 JUN 80 - HMD (*HMD MM/YY*)
*                     ADD ALIASES AUTH AND XEQ
*                     USE PUTLINE FOR ALL MESSAGES
*                     ADD LPDE SEARCH PRIOR TO BLDL         *HMD 06/80*
*                     TURN ON AUTHORIZATION DYNAMICALLY     *HMD 06/80*
*                     VIA USER SVC IF INVOKED COMMAND IS    *HMD 06/80*
*                     '$' OR 'AUTH'.                        *HMD 06/80*
*
*        LAST UPDATED 12 OCT 82 LBD (*LBD*)                     *LBD*
*                     ADD TIOT CHECK FOR TASKLIB@ OR TASKLIB$   *LBD*
*                       AND IF PRESENT DO BLDL AND ATTACH WITH  *LBD*
*                       TASKLIB IF MODULE FOUND - ELSE DO NORMAL*LBD*
*                       LPDE-LNKLST BLDL AND ATTACH.            *LBD*
*                                                               *LBD*
*                     ISSUE SPF SVC TO GAIN AUTHORIZATION.      *LBD*
*                                                               *LBD*
*                     ADD ENTRY @C TO ALLOW ATTACH OF           *LBD*
*                       AUTHORIZED TSO COMMANDS NOT IN IKJEFTE2 *LBD*
*                     ADD ENTRY $C TO ALLOW ATTACH OF           *LBD*
*                       ANY TSO COMMAND WITHOUT AUTHORIZATION   *LBD*
*                                                               *LBD*
*                     ADD ENTRY @P TO ALLOW ATTACH OF           *LBD*
*                       AUTHORIZED PROGRAMS NOT IN IKJEFTE8     *LBD*
*                     ADD ENTRY $P TO ALLOW ATTACH OF           *LBD*
*                       ANY PROGRAM WITHOUT AUTHORIZATION       *LBD*
*                                                               *LBD*
*                     NOTE: ANY OTHER ENTRY WILL = $P           *LBD*
*                                                               *LBD*
*                     DROPPED ALL OTHER ALIAS'S                 *LBD*
*                                                               *LBD*
*                     AUTHORIZED COMMANDS AND PROGRAMS WILL     *LBD*
*                       BE ATTACHED WITH TASKLIB@               *LBD*
*                                                               *LBD*
*                     NON-AUTH   COMMANDS AND PROGRAMS WILL     *LBD*
*                       BE ATTACHED WITH TASKLIB$               *LBD*
*                                                               *LBD*
*                     ADDED CODE TO CHECK ACF2 AUTHORIZATION    *LBD*
*                       TO EXECUTE THIS MODULE.                 *LBD*
*                      NOTE: THIS REQUIRES ACFMAC FOR ASSEM     *LBD*
*                       AND SYSLIB OF ACFMOD FOR LINK           *LBD*
*                                                               *LBD*
*                     ADDED PUNCH FOR ALIAS'S AND SETCODE.      *LBD*
*                                                               *LBD*
*        LAST UPDATED 09 MAR 83 LBD (*LBD*)                     *LBD*
*                     ADDED CHECK FOR FIRST PARAMETER OF        *LBD*
*                     T(DDNAME) OR TASKLIB(DDNAME) TO ALLOW     *LBD*
*                     USER TO SPECIFY HIS OWN DDNAME FOR A      *LBD*
*                     TASKLIB.                                  *LBD*
*                                                               *LBD*
*        SYNTAX EXAMPLES:                                       *LBD*
*                                                               *LBD*
*INVOKE TSO COMMAND PROCESSOR                                   *LBD*
*                                                               *LBD*
*              $C CMD OPERANDS                                  *LBD*
*              $C TASKLIB(DDN) CMD OPERANDS                     *LBD*
*                                                               *LBD*
*              @C CMD OPERANDS                                  *LBD*
*              @C TASKLIB(DDN) CMD OPERANDS                     *LBD*
*                                                               *LBD*
*CALL PROGRAM                                                   *LBD*
*                                                               *LBD*
*              $P PGM 'PARM'                                    *LBD*
*              $P TASKLIB(DDN) PGM 'PARM'                       *LBD*
*                                                               *LBD*
*              @P PGM 'PARM'                                    *LBD*
*              @P TASKLIB(DDN) PGM 'PARM'                       *LBD*
*                                                               *LBD*
*                                                               *LBD*
*    NOTE: TASKLIB MAY BE ABBREVIATED AS T.                     *LBD*
*                                                               *LBD*
*
         EJECT
         MACRO
&NAME    EQUATE
         LCLC  &SYMBOL
         GBLA  &SYSTEM
&NAME    EQU   &SYSLIST(&SYSTEM)    SYSTEM=&SYSTEM
         MEND
         MACRO
         AUTHON
         LA    R15,16
         LA    R1,0
         SVC   109
         MEND
         MACRO
         AUTHOFF
         LA    R15,16
         LA    R1,4
         SVC   109
         MEND
         GBLA  &SYSTEM
&SYSTEM  SETA  0                    ACF NOT IN SYSTEM
$C       TSOENTER REGS=YES,PL=(CPPL,PARSE,IO),WORK=WORKLEN
         EJECT
TSODSECT DSECT ,                        RE-ESTABLIST DSECT
DOUBLE   DC    D'0'                     FOR CONVERSIONS
ATTLIST  ATTACH DE=0,SF=L               PHONEY ATTACH LIST
ATTLISTL EQU   *-ATTLIST                LENGTH
PTPB     PUTLINE MF=L                   PHONEY PUTLINE LIST *HMD 06/80*
ATTTCB   DC    A(0)                     TCB ADDRESS
ATTECB   DC    F'0'                     ECB ADDRESS
STAECMP  DC    F'0'                     CMP FOR STAI
BLDL     DC    2H'0',CL58' '            BLDL LIST
PARM     DC    H'0',CL100' '            PARM FIELD
PARMPTR  DC    A(0)                     POINTER TO PARM
         DC    3A(0)                    FAKE REST OF CPPL
OLD      DS    F                INFORMATIONAL MESSAGE OLD   *HMD 06/80*
OLDA     DS    A                MESSAGE AREA ADDRESS        *HMD 06/80*
MSGAREA  DS    A                MESSAGE HEADER              *HMD 06/80*
MSGID    DS    CL8              MESSAGE IDENTIFICATOR       *HMD 06/80*
MSGTEXT  DS    CL72             MESSAGE TEXT                *HMD 06/80*
WORKUNPK DS    CL5              UNPACK AREA                 *HMD 06/80*
LPDESAVE DS    18F              SAVE AREA FOR REGISTERS     *HMD 06/80*
LPDESV1  DS    18F              SAVE AREA FOR LPDE ROUTINE  *HMD 06/80*
FLAG DS        X                FLAG                        *HMD 06/80*
AUTHBIT  EQU   1                AUTH ON IF 1                    *LBD*
TASKDD   EQU   2                USE TASKLIB DCB                 *LBD*
TSOCMD   EQU   4                        INVOKE TSO COMMAND      *LBD*
NOTACF2  EQU   8                        BAD ACF2 RC             *LBD*
OPERS    EQU   16                  CP HAS OPERS                 *LBD*
CBUFF    DS    0F                                               *LBD*
CLEN     DS    H                                                *LBD*
COFF     DS    H                                                *LBD*
CPARM    DS    CL250                                            *LBD*
$CPPL    DS    0F                                               *LBD*
$CPPLCBF DS    A                        -> CMD BUFFER           *LBD*
$CPPLUPT DS    A                        -> UPT                  *LBD*
$CPPLPSC DS    A                        -> PSCB                 *LBD*
$CPPLECT DS    A                        -> ECT                  *LBD*
$OPEN    OPEN  TASKLIB,MF=L                                     *LBD*
$CLOSE   CLOSE TASKLIB,MF=L                                     *LBD*
         PRINT NOGEN                                            *LBD*
TASKLIB  DCB   DSORG=PO,MACRF=R,DDNAME=TASKLIB                  *LBD*
DDNAME   EQU   TASKLIB+40,8                                     *LBD*
         PRINT GEN                                              *LBD*
WORKLEN  EQU   *-TSOWORK        LENGTH OF WORK AREA         *HMD 06/80*
$C       CSECT
         TITLE '$C - INITIALIZATION CODE'
         MVC   BLDL(4),=AL2(1,58)       NUMBER/LEN
         XC    PPLRANS(4),PPLRANS       CLEAR ANSWER FIELD
         XC    TSOECB(4),TSOECB         AND ECB
         XC    MSGAREA,MSGAREA          CLEAR MESSAGE AREA  *HMD 06/80*
         NI    FLAG,255-AUTHBIT         CLEAR AUTH FLAG         *LBD*
         MVC   MSGAREA(2),=AL2(84)      MOVE IN LENGTH      *HMD 06/80*
         MVC   OLD,=F'1'                                    *HMD 06/80*
         LA    R1,MSGAREA                                   *HMD 06/80*
         ST    R1,OLDA                                      *HMD 06/80*
         MVC   MSGID(8),=C'RTSO00I '    MOVE IN ID          *HMD 06/80*
         MVC   MSGTEXT,BLANKS           CLEAR MESSAGE TEXT  *HMD 06/80*
         MVC   STAECMP(4),TSOECB        CLEAR IT THIS WAY
         L     R6,CPPLECT               LOAD ECT ADDR
         LUSE  ECT,R6                   ADDRESS DSECT       *HMD 06/80*
         OC    ECTPCMD,BLANKS                                   *LBD*
         MVC   TASKLIB(TASKL),TASKDCB INIT TASKLIB DCB          *LBD*
         MVC   DDNAME,TASKLIB$          ASSUME NON-AUTH         *LBD*
         CLC   ECTPCMD,=CL8'@C'         AUTH TSO CMD            *LBD*
         BE    $STASKCA                 YES                     *LBD*
         CLC   ECTPCMD,=CL8'@P'         AUTH PROGRAM            *LBD*
         BE    $STASKXA                 YES                     *LBD*
         CLC   ECTPCMD,=CL8'$C'         TSO COMMAND             *LBD*
         BE    SETTSO                   YES                     *LBD*
         B     DOPARSE                  ASSUME NON-AUTH PGM     *LBD*
$STASKCA MVC   DDNAME,TASKLIB@                                  *LBD*
SETTSO   OI    FLAG,TSOCMD                                      *LBD*
         B     NOPARSE                                          *LBD*
$STASKXA MVC   DDNAME,TASKLIB@                                  *LBD*
         B     DOPARSE                                          *LBD*
         LDROP R6                                               *LBD*
DOPARSE  L     R15,CPPLCBUF             LOAD CMD BUFFER
         LR    R1,R15           -> CPPL                         *LBD*
         LR    R4,R1                                            *LBD*
         LH    R2,0(R1)         LOAD LENGTH                     *LBD*
         AR    R4,R2            -> END OF CPPL                  *LBD*
         AH    R1,2(R1)         -> NEW START OF CPPL            *LBD*
         LA    R5,4(R1)         -> START OF NEW COMMAND         *LBD*
         LH    R2,0(R1)         LOAD LENGTH                     *LBD*
         CLC   =C'T(',0(R5)        TASKLIB SPECIFIED ?          *LBD*
         BE    DOTASK                                           *LBD*
         CLC   =C'TASKLIB(',0(R5)    TASKLIB SPECIFIED ?        *LBD*
         BE    DOTASK                                           *LBD*
         CLC   =C't(',0(R5)        TASKLIB SPECIFIED ?          *LBD*
         BE    DOTASK                                           *LBD*
         CLC   =C'tasklib(',0(R5)    TASKLIB SPECIFIED ?        *LBD*
         BE    DOTASK                                           *LBD*
PARSEIT  TSOPARSE CBUF=(15),PCL==V(PCL) CALL PARSE ROUTINE
         LTR   R15,R15                  TEST RETURN CODE
         BZ    ANALYZE                  OK, CONTINUE
BADPARSE LA    R0,L'MSG01               LOAD MESSAGE SIZE
         LA    R1,MSG01                 AND MESSAGE ADDR
         B     PRELEAVX                 DONE, FORGET IT
NOPARSE  EQU   *                        BYPASS PARSE FOR TSO COMMAND*
         STM   R0,R15,LPDESAVE          SAVE REGISTERS          *LBD*
         L     R1,CPPLCBUF      -> CPPL                         *LBD*
         LR    R4,R1                                            *LBD*
         LH    R2,0(R1)         LOAD LENGTH                     *LBD*
         AR    R4,R2            -> END OF CPPL                  *LBD*
         SH    R2,2(R1)         SUB OFFSET                      *LBD*
         AH    R1,2(R1)         -> NEW START OF CPPL            *LBD*
         LA    R5,4(R1)         -> START OF NEW COMMAND         *LBD*
         SR    R6,R6            INIT COUNTER                    *LBD*
         LA    R8,BLDL+4                                        *LBD*
         LA    R9,CPARM
         MVI   CPARM,C' '                                       *LBD*
         MVC   CPARM+1(249),CPARM  CLEAR CPARM                  *LBD*
         CLC   =C'T(',0(R5)        TASKLIB SPECIFIED?           *LBD*
         BE    DOTASK              YES                          *LBD*
         CLC   =C'TASKLIB(',0(R5)  TASKLIB SPECIFIED ?          *LBD*
         BE    DOTASK              YES                          *LBD*
         CLC   =C't(',0(R5)        TASKLIB SPECIFIED?           *LBD*
         BE    DOTASK              YES                          *LBD*
         CLC   =C'tasklib(',0(R5)  TASKLIB SPECIFIED ?          *LBD*
         BE    DOTASK              YES                          *LBD*
@CLOOP   CLI   0(R5),C' '       FIND END OR FIRST BLANK         *LBD*
         BNH   @GOTBLK                                          *LBD*
         MVC   0(1,R9),0(R5)                                    *LBD*
         MVC   0(1,R8),0(R5)                                    *LBD*
         LA    R9,1(R9)                                         *LBD*
         LA    R8,1(R8)                                         *LBD*
         LA    R5,1(R5)         INCR PTR                        *LBD*
         LA    R6,1(R6)         INCR CTR                        *LBD*
         CR    R5,R4            END OF CPPL ?                   *LBD*
         BL    @CLOOP                                           *LBD*
         B     @GOTBLK                                          *LBD*
DOTASK   LR    R3,R5               SAVE -> TASKLIB              *LBD*
DOTASKF  CLI   0(R5),C'('          START OF TASKLIB             *LBD*
         BE    HAVETASK                                         *LBD*
         LA    R5,1(R5)                                         *LBD*
         CR    R5,R4            END OF CPPL ?                   *LBD*
         BL    DOTASK                                           *LBD*
         LA    R0,L'MSGT                LOAD MESSAGE SIZE
         LA    R1,MSGT                  AND MESSAGE ADDR
         B     PRELEAVX                 DONE, FORGET IT
HAVETASK LA    R5,1(R5)                                         *LBD*
         LA    R1,DDNAME                                        *LBD*
         MVC   DDNAME,BLANKS                                    *LBD*
MVCTASK  MVC   0(1,R1),0(R5)                                    *LBD*
         OI    0(R1),C' '          INSURE UPPER CASE            *LBD*
         LA    R5,1(R5)            INCR CBUF                    *LBD*
         LA    R1,1(R1)            INCR DDNAME                  *LBD*
         CLI   0(R5),C')'          END OF TASKLIB               *LBD*
         BE    ENDTASK             YES                          *LBD*
         CR    R5,R4            END OF CPPL ?                   *LBD*
         BL    MVCTASK                                          *LBD*
         LA    R0,L'MSGT                LOAD MESSAGE SIZE
         LA    R1,MSGT                  AND MESSAGE ADDR
         B     PRELEAVX                 DONE, FORGET IT
ENDTASK  LA    R5,1(R5)                                         *LBD*
         LA    R9,CPARM            RESET R9
         CLI   0(R5),C' '          BLANK ?                      *LBD*
         BE    ENDTASK             YES - KEEP LOOKING           *LBD*
         TM    FLAG,TSOCMD                                      *LBD*
         BO    @CLOOP              BEGIN LOOKING FOR MODULE NAME*LBD*
         LH    R2,2(R15)           LOAD OFFSET                  *LBD*
CLRTASK  CLI   0(R3),C' '          END OF TASKLIB               *LBD*
         BE    RESETOFF            YES                          *LBD*
         MVI   0(R3),C' '          WIPE OUT TASKLIB SPEC        *LBD*
         LA    R3,1(R3)                                         *LBD*
         LA    R2,1(R2)                                         *LBD*
         B     CLRTASK                                          *LBD*
RESETOFF STH   R2,2(R15)                                        *LBD*
         B     PARSEIT                                          *LBD*
*                                                               *LBD*
@GOTBLK  EQU   *                                                *LBD*
         OC    BLDL+4(8),BLANKS                                 *LBD*
         OC    CPARM(8),BLANKS                                  *LBD*
@GLP     LA    R5,1(R5)         INCR PTR                        *LBD*
         CR    R5,R4            END OF CPPL ?                   *LBD*
         BNL   @GOTIT                                           *LBD*
         CLI   0(R5),C' '                                       *LBD*
         BNH   @GLP                                             *LBD*
         LA    R6,1(R6)         INCR CTR                        *LBD*
         LA    R9,1(R9)                                         *LBD*
         OI    FLAG,OPERS          SET AS HAVING OPERANDS       *LBD*
@CLOOP2  EQU   *                                                *LBD*
         MVC   0(1,R9),0(R5)                                    *LBD*
         LA    R9,1(R9)                                         *LBD*
         LA    R5,1(R5)         INCR PTR                        *LBD*
         CR    R5,R4            END OF CPPL ?                   *LBD*
         BL    @CLOOP2                                          *LBD*
@GOTIT   EQU   *                                                *LBD*
         LA    R8,CBUFF                                         *LBD*
         SR    R9,R8                                            *LBD*
         STH   R9,CLEN                                          *LBD*
         STH   R6,COFF          STORE NEW LENGTH                *LBD*
         EJECT                                                  *LBD*
         AIF   (&SYSTEM EQ 0).NOT#1
*---------------------------------------------------------------*LBD*
*                                                               *LBD*
*    A     CCC   FFFFF    222                                   *LBD*
*   A A   C   C  F       2   2                                  *LBD*
*  A   A  C      F           2                                  *LBD*
*  AAAAA  C      FFFF       2                                   *LBD*
*  A   A  C      F         2                                    *LBD*
*  A   A  C   C  F        2                                     *LBD*
*  A   A   CCC   F       22222                                  *LBD*
*                                                               *LBD*
*---------------------------------------------------------------*LBD*
*        FOLLOWING TO THE NEXT BOX IS THE ACF2 CODE             *LBD*
*        USED TO SECURE THIS COMMAND                            *LBD*
*        IT MAY BE REMOVED OR MODIFIED IF YOU DO NOT HAVE       *LBD*
*        ACF2 INSTALLED.                                        *LBD*
*---------------------------------------------------------------*LBD*
         GETMAIN RU,LV=ACF2GSIZ                                 *LBD*
         LR    R2,R1                                            *LBD*
         LUSE  ACGRSRC,R2                                       *LBD*
         XC    ACGRSRC(ACGRSLEN),ACGRSRC CLR PARM AREA          *LBD*
         XC    ACF2MSGA(ACF2MSIZ),ACF2MSGA CLR MSG AREA         *LBD*
         MVI   ACGFCN,4         INDICATE GENERALIZED RES CALL   *LBD*
         MVI   ACGSFCN,ACGSINP          IND RULE INTERP         *LBD*
         MVI   ACGFLGS,ACGFADRQ         LOAD RULES IN USER ADDR *LBD*
         MVC   ACGRTYPE,ACF2RES         RESOURCE TYPE           *LBD*
         MVI   ACGRNAME,X'40'           BLANK 1ST CHAR ON NAME  *LBD*
         MVC   ACGRNAME+1(L'ACGRNAME-1),ACGRNAME                *LBD*
         L     R6,CPPLECT               LOAD ECT ADDR           *LBD*
         LUSE  ECT,R6                   ADDRESS DSECT           *LBD*
         MVC   ACGRNAME(L'ACF2RNAM),ACF2RNAM RESOURCE NAME      *LBD*
         MVC   ACGRNAME(1),ECTPCMD                              *LBD*
         LDROP R6                                               *LBD*
         LA    R0,ACF2MSGA              -> MSG AREA             *LBD*
         ST    R0,ACGMSG                STORE ADDR IN PARM BLOCK*LBD*
         ACFSVC ACGRSRC,TYPE=A,CVT=FIND,NONE=NOACF              *LBD*
         LTR   R15,R15                  CHECK RETURN CODE       *LBD*
         BZ    ACF2OK                   GOOD RETURN CODE        *LBD*
         OI    FLAG,NOTACF2             SET PROPER FLAG         *LBD*
NOACF    EQU   *                        ACF2 NOT UP -           *LBD*
*                                       LET'S DO IT ANYWAY      *LBD*
ACF2OK   FREEMAIN RU,LV=ACF2GSIZ,A=(R2)                         *LBD*
         LDROP R2                                               *LBD*
         TM    FLAG,NOTACF2             ACF2 AUTHORIZED ?       *LBD*
         BO    RELEASEA                 NO - GET OUT OF HERE    *LBD*
*---------------------------------------------------------------*LBD*
*        END OF ACF2 EXECUTABLE CODE                            *LBD*
*---------------------------------------------------------------*LBD*
         EJECT                                                  *LBD*
.NOT#1   ANOP
         LM    R0,R15,LPDESAVE                                  *LBD*
         B     FINDTIOT                                         *LBD*
         TITLE '$C - ANALYZE INPUT'
         LUSE  PDL,R11                  TELL ASSEMBLER
ANALYZE  L     R11,PPLRANS              LOAD ANSWER AREA
         L     R1,MODNAME               GET MODULE NAME ENTRY
         TM    MODNAME+6,X'80'          IS IT THERE
         BNO   BADPARSE                 NO, STOP HERE
         MVC   BLDL+4(8),=8C' '         CLEAR MODULE NAME
         LH    R15,MODNAME+4            GET LEN
         BCTR  R15,0                    -1 FOR EXECUTE
         EX    R15,MVCMOD               DO IT
         LH    R2,PDLPARM+4             GET LENGTH
         L     R3,PDLPARM               GET ADDRESS
         CH    R2,=H'100'               CHECK IT
         BNH   LENOK                    OK, SO FAR
         LA    R2,L'MSG02-1             LENGTH TO MOVE      *HMD 06/80*
         LA    R1,MSG02                 GET MESSAGE
         EX    R2,PREMVC                MOVE MESSAGE TEXT   *HMD 06/80*
         PUTLINE PARM=PTPB,OUTPUT=(OLD,TERM,SINGLE,INFOR),  *HMD 06/80*X
               MF=(E,IOPL)                                  *HMD 06/80*
         LA    R2,100                   SET AT MAXIMUM
LENOK    LTR   R2,R2                    TEST FOR NON-ZERO LEN *BMD*
         STH   R2,PARM                  SAVE IN LENGTH
         BCTR  R2,0                     SUBTRACT ONE
         BNP   *+12                     NOT THERE, NO MOVE *BMD*
         EX    R2,MVCPARM               DO THAT
         B     *+10                     AROUND XC
         XC    PARM+2(40),PARM+2        CLEAR IT FOR ACCIDENTAL PARSE
         LA    R1,PARM                  LOAD PARM FIELD
         ST    R1,PARMPTR               SAVE IT THERE
         MVI   PARMPTR,X'80'            FLAG AS LAST
         MVC   PARMPTR+4(12),CPPLUPT    JUST IN CASE CALL CP
         EJECT                                                  *LBD*
FINDTIOT STM   R0,R15,LPDESAVE  SAVE REGISTERS                  *LBD*
         L     2,CVTPTR    POINT TO CVT                         *LBD*
         LUSE  CVTMAP,R2                                        *LBD*
         L     2,CVTTCBP   POINT TO TCB WORDS                   *LBD*
         LDROP R2                                               *LBD*
         L     2,4(2)      POINT TO MY TCB                      *LBD*
         L     2,12(2)     POINT TO TIOT                        *LBD*
         LUSE TIOCNJOB,R2                                       *LBD*
         CLC   DDNAME,TIOEDDNM OUR DDNAME ?                     *LBD*
         BE    FNDDD               YES                          *LBD*
         SR    R1,R1                                            *LBD*
         LA    R2,TIOELNGH                                      *LBD*
         LDROP R2                                               *LBD*
TIOL     EQU   *                                                *LBD*
         LUSE TIOELNGH,R2                                       *LBD*
         CLC   TIOELNGH(4),=F'00'  END OF TIOT                  *LBD*
         BE    NOTASKDD            SKIP IT                      *LBD*
         CLC   DDNAME,TIOEDDNM     OUR DDNAME ?                 *LBD*
         BE    FNDDD               YES                          *LBD*
         IC    R1,TIOELNGH                                      *LBD*
         AR    R2,R1                                            *LBD*
         B     TIOL                KEEP LOOKING                 *LBD*
         LDROP R2                                               *LBD*
FNDDD    EQU   *                                                *LBD*
         OI    FLAG,TASKDD              FLAG AS FOUND           *LBD*
         LM    R0,R15,LPDESAVE  RESTORE REGS                    *LBD*
         LA    R2,TASKLIB                                       *LBD*
         LA    R1,$OPEN                                         *LBD*
         MVI   $OPEN,X'80'              SET OPTION BYTE         *LBD*
         OPEN  ((R2)),MF=(E,(R1))                               *LBD*
         LA    R1,TASKLIB               LOAD DCB ADDRESS        *LBD*
         BLDL  (1),BLDL                 DO IT                   *LBD*
         LTR   R15,R15                  GOOD RETURN ??          *LBD*
         BZ    DOATTACH                 YES                     *LBD*
NOTASKDD LM    R0,R15,LPDESAVE  RESTORE REGS                    *LBD*
         EJECT
LPDESRCH DS    0H                       IF MODULE IS IN LPA *HMD 06/80*
*                                       THEN FORGET BLDL    *HMD 06/80*
         STM   R0,R15,LPDESAVE          SAVE REGISTERS      *HMD 06/80*
         L     R3,CVTPTR                GET CVT ADDRESS
         LUSE  CVT,R3                   ADDRESS THE CVT     *HMD 06/80*
         L     R15,CVTQLPAQ             POINT TO ALPAQ      *HMD 06/80*
         L     R15,0(R15)               1ST CDE ON QUEUE    *HMD 06/80*
         LA    R15,0(R15)               CLEAR FOR ICM       *HMD 06/80*
         LTR   R15,R15                  ANYTHING THERE?     *HMD 06/80*
CDELOOP  BZ    DIRSRCH                  NO, SEARCH DIRECT   *HMD 06/80*
         CLC   BLDL+4(8),8(R15)         NAMES MATCH?        *HMD 06/80*
         BE    LPDEEXIT                 YES, RELOAD REGS    *HMD 06/80*
         ICM   R15,7,1(R15)             GET NEXT POINTER    *HMD 06/80*
         B     CDELOOP                  LOOP AGAIN          *HMD 06/80*
DIRSRCH  LM    R0,R1,BLDL+4             PICK UP THE NAME    *HMD 06/80*
         L     R15,CVTLPDSR             GET LPA SEARCH ROUTINE
         XC    LPDESV1(18*4),LPDESV1    CLEAR PHONY SAVEAREA
         LR    R2,R13                   SAVE R13 ADDRESS    *HMD 06/80*
         LA    R13,LPDESV1              POINT TO PHONY      *HMD 06/80*
         BALR  R14,R15                  SEARCH THE LPA DIRECTORY
         B     LPDEEXIT                 EUREKA, WE FOUND IT *HMD 06/80*
         B     NOTLPA                   SHUCKS, NOT THERE   *HMD 06/80*
         LDROP R3                       GET RID OF BASE     *HMD 06/80*
LPDEEXIT LR    R13,R2                   RESTORE R13         *HMD 06/80*
         LM    R0,R15,LPDESAVE          RESTORE REGS        *HMD 06/80*
         B     DOATTACH                 DO THE ATTACH       *HMD 06/80*
NOTLPA   DS    0H                       NOT IN LPA LIB      *HMD 06/80*
         LR    R13,R2                   RESTORE REG 13      *HMD 06/80*
         LM    R0,R15,LPDESAVE          RESTORE REGISTERS   *HMD 06/80*
         XR    R1,R1                    CLEAR DCB ADDRESS
         BLDL  (1),BLDL                 DO IT
         CH    R15,=H'8'                CHECK JUST IN CASE
         BNH   *+8                      OK
         LA    R15,12                   LOAD ERROR CODE
         B     *+4(R15)                 DO BRANCH
         B     DOATTACH                 RETURN CODE=0
         B     NONESUCH                 NO SUCH MODULE
         B     IOERR                    I/O ERROR IN SEARCH
         LA    R1,MSG03                 BAD RETURN CODE FROM BLDL
         LA    R0,L'MSG03               AND LEN
         B     PRELEAVX                 DIE RIGHT NOW
         TITLE '$C - ERROR AND RETURN CODE'
NONESUCH MVC   PARM(L'NOMOD),NOMOD      MOVE IN MESSAGE
         MVC   PARM+MODOFF(8),BLDL+4    MOVE IN MODULE NAME
         LA    R1,PARM                  LOAD PLACE
         LA    R0,L'NOMOD               LEN
         B     PRELEAVX                 DO IT
         SPACE 2
IOERR    LA    R1,IOERRMSG              LOAD MESSAGE
         LA    R0,L'IOERRMSG            LENGTH
         SPACE 2
PRELEAVX MVI   STAECMP+3,20             ERROR CODE
PRELEAVE MVC   MSGTEXT,BLANKS           CLEAR MSG TEXT      *HMD 06/80*
         LR    R2,R0                    SAVE LENGTH         *HMD 06/80*
PREMVC   MVC   MSGTEXT(0),0(R1)         << EXECUTED >>      *HMD 06/80*
         BCTR  R2,0                     DOWN 1 FOR MVC      *HMD 06/80*
         EX    R2,PREMVC                MOVE IN TEXT        *HMD 06/80*
         PUTLINE PARM=PTPB,OUTPUT=(OLD,TERM,SINGLE,INFOR),  *HMD 06/80*X
               MF=(E,IOPL)                                  *HMD 06/80*
RELEASEA IKJRLSA PPLRANS
         L     R2,STAECMP               TEST CMP CODE
         LTR   R2,R2                    TEST IT
         BP    *+6                      AROUND CLEAR
         XR    R2,R2                    CLEAR IT
         TSOLEAVE RETCODE=(R2)          LEAVE NOW
         TITLE '$C - SOME CONSTANTS'
MSG01    DC    C'MISSING PROGRAM NAME OR PARSE ERROR, PLEASE RE-ENTER C+
               OMMAND'
MSG02    DC    C'PARM FIELD TOO LONG, TRUNCATED AT 100 CHARACTERS'
MSG03    DC    C'** ERROR IN BLDL ** CONTACT SYSTEMS PERSONNEL'
MSG10    DC    C'** ATTACH ERROR ** CONTACT SYSTEMS PERSONNEL'
MSGT     DC    C'*** INVALID TASKLIB SPECIFICATION ***'         *LBD*
IOERRMSG DC    C'** I/O ERROR DURING BLDL ** CONTACT SYSTEMS PERSONNEL'
NOMOD    DC    C'PROGRAM 12345678 NOT FOUND, PLEASE RE-ENTER COMMAND'
ABCODE   DC    C'PROGRAM 12345678 ABENDED, SYS=000, USER=0000'
NONZERO  DC    C'PROGRAM 12345678 ENDED, COND. CODE=0000     '
*  NOTE THAT NONZERO ABOVE MUST BE SAME LENGTH AS ABCODE    *HMD 06/80*
BLANKS   DC    CL80' '                                      *HMD 06/80*
MODOFF   EQU   8
ABSYS    EQU   30
ABUSER   EQU   40
NONCODE  EQU   35
TRT      EQU   *-C'0'
         DC    C'0123456789ABCDEF'
TASKLIB$ DC    CL8'TASKLIB$'                                    *LBD*
TASKLIB@ DC    CL8'TASKLIB@'                                    *LBD*
         AIF   (&SYSTEM EQ 0).NOT#2
*---------------------------------------------------------------*LBD*
*        SOME CONSTANTS USED BY ACF2                            *LBD*
*        SHOULD BE CHANGED TO REFLECT THE PROPER RULES          *LBD*
*                                                               *LBD*
*        THE FIRST CHARACTER OF THE TSO COMMAND WILL BE         *LBD*
*        ATTACHED TO THE BEGINNING OF ACF2RNAM FOR              *LBD*
*        ACCESS VERIFICATION.                                   *LBD*
*---------------------------------------------------------------*LBD*
ACF2RES  DC    CL4'RCMD'                RESOURCE TYPE           *LBD*
ACF2RNAM DC    C' SYSUTIL'              RESOURCE NAME           *LBD*
*---------------------------------------------------------------*LBD*
*        END OF ACF2 CONSTANTS                                  *LBD*
*---------------------------------------------------------------*LBD*
.NOT#2   ANOP
         TITLE '$C - PARSE PCL'
PCL      IKJPARM DSECT=PDL
MODNAME  IKJIDENT 'PROGRAM',MAXLNTH=8,FIRST=ALPHANUM,                  +
               OTHER=ALPHANUM,PROMPT='PROGRAM NAME',                   +
               HELP='NAME OF PROGRAM TO BE CALLED'
         SPACE 2
PDLPARM  IKJPOSIT QSTRING,HELP='PARM FIELD FOR PROGRAM'
         IKJENDP
         TITLE '$C - SET UP AND ATTACH PROGRAM'
DOATTACH TM    CPPLCBUF,X'80'           CALL ON ME?
         BO    NOECTCHG                 RIGHT, DON'T CHANGE ECT
*                                       OR TURN ON AUTH     *HMD 06/80*
         L     R6,CPPLECT               LOAD ECT ADDR
         LUSE  ECT,R6                   ADDRESS DSECT       *HMD 06/80*
         CLC   ECTPCMD,=CL8'@C'         AUTH TSO CMD            *LBD*
         BE    ONAUTH                   YES                     *LBD*
         CLC   ECTPCMD,=CL8'$C'         TSO COMMAND             *LBD*
         BE    NOAUTH                   YES                     *LBD*
         CLC   ECTPCMD,=CL8'@P'         CALL AUTH PGM           *LBD*
         BE    ONAUTH                   YES                     *LBD*
         CLC   ECTPCMD,=CL8'$P'         CALL PGM                *LBD*
         BE    NOAUTH                   YES                     *LBD*
         B     NOAUTH                                           *LBD*
ONAUTH   DS    0H                       TURN ON AUTH        *HMD 06/80*
         AUTHON
* INSERT USER SVC HERE TO TURN ON AUTHORIZATION IF DESIRED
*                                                               *LBD*
*   SSS   PPPP   FFFFF    SSS   V   V   CCC                     *LBD*
*  S   S  P   P  F       S   S  V   V  C   C                    *LBD*
*  S      P   P  F       S      V   V  C                        *LBD*
*   SSS   PPPP   FFFF     SSS    V V   C                        *LBD*
*      S  P      F           S   V V   C                        *LBD*
*  S   S  P      F       S   S    V    C   C                    *LBD*
*   SSS   P      F        SSS     V     CCC                     *LBD*
*                                                               *LBD*
*        LA    R0,1             REQUEST AUTH ON                 *LBD*
*        SVC   221                      SPF SVC                 *LBD*
         OI    FLAG,AUTHBIT             TURN ON FLAG            *LBD*
NOAUTH   MVC   ECTPCMD,BLDL+4           MOVE IN MODULE NAME
NOECTCHG LA    R1,PARMPTR               LOAD PARM POINTER
         SPACE 3
         TM    FLAG,TSOCMD              TSO COMMAND ?           *LBD*
         BZ    NTSOCMD                  NO                      *LBD*
         L     R1,CPPLUPT                                       *LBD*
         ST    R1,$CPPLUPT                                      *LBD*
         L     R1,CPPLPSCB                                      *LBD*
         ST    R1,$CPPLPSC                                      *LBD*
         L     R1,CPPLECT                                       *LBD*
         LDROP R6                                               *LBD*
         LUSE  ECT,R1                                           *LBD*
         OI    ECTSWS,ECTNOPD      TURN OFF OPERANDS            *LBD*
         TM    FLAG,OPERS          ANY OPERANDS                 *LBD*
         BO    NOOPS               NO                           *LBD*
         NI    ECTSWS,255-ECTNOPD  SET OPERANDS                 *LBD*
NOOPS    DS    0H                                               *LBD*
         LDROP R1                                               *LBD*
         ST    R1,$CPPLECT                                      *LBD*
         LA    R1,CBUFF                                         *LBD*
         ST    R1,$CPPLCBF      STORE NEW POINTER               *LBD*
         LA    R1,$CPPL                                         *LBD*
NTSOCMD  XC    ATTLIST(ATTLISTL),ATTLIST  CLEAR ATTACH LIST
         XC    ATTECB(4),ATTECB         CLEAR IT
         XR    R0,R0                    CLEAR REGISTER 0        *LBD*
         TM    FLAG,TASKDD              SHOULD WE USE TASKLIB ? *LBD*
         BO    ATTACHT                  YES                     *LBD*
ATTACH   ATTACH EPLOC=BLDL+4,DCB=0,ECB=ATTECB,SZERO=NO,                +
               STAI=(STAI,(R13)),PURGE=NONE,ASYNCH=YES,                +
               MF=(E,(1)),SF=(E,ATTLIST),SHSPV=78,              *LBD*  +
               RSAPF=YES                                        *LBD*
         LTR   R15,R15                  TEST RETURN CODE
         BZ    ATTWAIT                  OK, SAVE TCB AND WAIT
         LA    R1,MSG10                 MESSAGE ADDRESS
         LA    R0,L'MSG10               AND LEN
         B     PRELEAVX                 DONE FOR
         SPACE 3
ATTACHT  ATTACH EPLOC=BLDL+4,DCB=(0),ECB=ATTECB,SZERO=NO,       *LBD*  +
               STAI=(STAI,(R13)),PURGE=NONE,ASYNCH=YES,         *LBD*  +
               TASKLIB=TASKLIB,RSAPF=YES,                       *LBD*  +
               MF=(E,(1)),SF=(E,ATTLIST),SHSPV=78               *LBD*
         LTR   R15,R15                  TEST RETURN CODE        *LBD*
         BZ    ATTWAIT                  OK, SAVE TCB AND WAIT   *LBD*
         LA    R1,MSG10                 MESSAGE ADDRESS         *LBD*
         LA    R0,L'MSG10               AND LEN                 *LBD*
         B     PRELEAVX                 DONE FOR                *LBD*
         SPACE 3
ATTWAIT  ST    R1,ATTTCB                SAVE TCB ADDRESS
         WAIT  1,ECB=ATTECB             WAIT FOR SUBTASK
         OC    STAECMP(4),STAECMP       GET CMP FROM TASK
         BZ    GETRC                    OK, GET RETURN CODE
         MVI   STAECMP,X'00'            CLEAR HIGH BYTE
         L     R1,STAECMP               GET IT
         SLL   R1,4                     NOW HAVE 0SSSUUU0
         ST    R1,ATTECB                SAVE IT
         MVC   PARM(L'ABCODE),ABCODE
         MVC   PARM+MODOFF(8),BLDL+4    MOVE IN MOD NAME
         UNPK  DOUBLE(4),ATTECB(3)      GET FOR HEX
         MVC   PARM+ABSYS(3),DOUBLE     DO THAT
         TR    PARM+ABSYS(3),TRT        GET IN PRINTABLE
         MVC   ATTECB(2),STAECMP+2      GET LOW 2 BYTES
         NI    ATTECB,X'0F'             OFF LOW SYSTEM BYTE
         LH    R15,ATTECB               LOAD CMP CODE
         CVD   R15,DOUBLE               CONVERT IT
         UNPK  PARM+ABUSER(4),DOUBLE+5(3)
         OI    PARM+ABUSER+3,C'0'       PRINTABLE
         B     DETACH                   DO DETACH
         SPACE 3
GETRC    L     R15,ATTECB               GET ECB
         LA    R15,0(,R15)              OFF POST FLAGS
         LTR   R15,R15                  TEST RETURN CODE
         ST    R15,STAECMP              SAVE IT IN RIGHT FIELD
         MVI   STAECMP,X'FF'            SET NO-FLAG
         BZ    DETACH                   NO FORMAT TO DO
         MVI   STAECMP,X'00'            OFF FLAG
         CVD   R15,DOUBLE               CONVERT IT
         MVC   PARM(L'NONZERO),NONZERO  MOVE IN CODE
         MVC   PARM+MODOFF(8),BLDL+4    MOVE IN NAME
         UNPK  WORKUNPK(5),DOUBLE+5(3)  UNPACK CODE         *HMD 06/80*
         OI    WORKUNPK+4,C'0'          FIX SIGN            *HMD 06/80*
         MVC   PARM+NONCODE(4),WORKUNPK+1  MOVE IN CODE     *HMD 06/80*
         EJECT
DETACH   DETACH ATTTCB,STAE=NO          NO CHANCE
         TM    FLAG,TASKDD              TASKLIB OPEN ?          *LBD*
         BZ    CKAUTH                   NO - CHECK AUTH         *LBD*
         LA    R2,TASKLIB                                       *LBD*
         LA    R1,$CLOSE                                        *LBD*
         MVI   $CLOSE,X'80'             SET OPTION BYTE         *LBD*
         CLOSE ((R2)),MF=(E,(R1))                               *LBD*
CKAUTH   TM    FLAG,AUTHBIT             IS AUTH FLAG ON         *LBD*
         BZ    NORMAL                   NO, LEAVE AUTH AS IS    *LBD*
AUTHOFF  DS    0H                       TURN OFF AUTH       *HMD 06/80*
         AUTHOFF
* ADD AUTHORIZATION SVC HERE TO TURN OFF AUTHORIZATION IF DESTIRED
*                                                               *LBD*
*   SSS   PPPP   FFFFF    SSS   V   V   CCC                     *LBD*
*  S   S  P   P  F       S   S  V   V  C   C                    *LBD*
*  S      P   P  F       S      V   V  C                        *LBD*
*   SSS   PPPP   FFFF     SSS    V V   C                        *LBD*
*      S  P      F           S   V V   C                        *LBD*
*  S   S  P      F       S   S    V    C   C                    *LBD*
*   SSS   P      F        SSS     V     CCC                     *LBD*
*                                                               *LBD*
*        XR    R0,R0            REQUEST AUTH OFF                *LBD*
*        SVC   221                      SPF SVC                 *LBD*
         NI    FLAG,255-AUTHBIT         INDICATE SO             *LBD*
NORMAL   LA    R1,PARM                  LOAD ADDRESS OF ROUTINE
         LA    R0,L'NONZERO             BOTH SAME LEN
         CLI   STAECMP,X'FF'            CMP ZERO?
         BE    RELEASEA                 YES, NO MESSAGE
         B     PRELEAVE                 DIE NOW
         TITLE 'PATTERN DCB FOR TASKLIB'                        *LBD*
TASKDCB  DCB   DSORG=PO,MACRF=R,DDNAME=TASKLIB                  *LBD*
TASKL    EQU   *-TASKDCB                                        *LBD*
         TITLE '$C - STAI EXIT ROUTINE'
         LDROP *
         LUSE  STAI,R15                 TELL ASSEMBLER
STAI     CH    R0,=H'12'                CODE FOR NO CORE?
         BE    STAINCOR                 NO CORE, OK
         L     R2,0(,R1)                GET ADDR OF PARM
         LUSE  TSODSECT,R2              TELL ASSEMBLER
         OC    STAECMP(4),STAECMP       SET CONDITION CODE
         BNZ   STAIDIE                  RECURSION-DIE
         MVC   STAECMP(4),4(R1)         COPY STAE ABCODE
         B     STAIDO                   GO TO RETRY ROUTINE
         SPACE 3
STAINCOR OC    STAECMP(4),STAECMP       SET CONDITION CODE
         BNZ   STAIDIE                  STAI-RECURSION DIE
         ST    R1,STAECMP               SAVE CMP AS PUT THERE
STAIDO   LA    R0,STAITRY               LOAD STAE RETRY ROUTINE
         LA    R15,4                    LOAD RETRY CODE
         SVC   3                        RETURN TO ASIR
         SPACE 1
STAIDIE  LR    R3,R1                    SAVE POINTER
         POST  ATTECB,0                 POST MY MOTHER
         XC    DOUBLE(4),DOUBLE         CLEAR IT
         WAIT  1,ECB=DOUBLE             STOP HERE
         LDROP *
STAITRY  STAE  0,CT                     CLEAR ANY STAE CB'S
         SVC   3                        RETURN UP ANOTHER LEVEL
         EJECT
         LUSE  TSODSECT,R13             RE-ESTABLIST FOR THESE ISNS
MVCMOD   MVC   BLDL+4(0),0(R1)          <<EXECUTED>>
MVCPARM  MVC   PARM+2(0),0(R3)          <<EXECUTED>>
         SPACE 2
HERMAN   LTORG
         EJECT
         IKJECT                                             *HMD 06/80*
         EJECT                                              *HMD 06/80*
         CVT  DSECT=YES,LIST=YES
         EJECT                                                  *LBD*
         DSECT                                                  *LBD*
         IEFTIOT1                                               *LBD*
         EJECT                                                  *LBD*
         AIF  (&SYSTEM EQ 0).NOT#3
*---------------------------------------------------------------*LBD*
*        THE FOLLOWING ARE THE ACF2 DSECT DEFINITIONS           *LBD*
*        WHICH CAN BE REMOVED IF ACF2 IS NOT IN THE SYSTEM      *LBD*
*---------------------------------------------------------------*LBD*
         ACCVT                                                  *LBD*
         ACGRSRC                                                *LBD*
ACF2MSGA DS    CL128                    ACF2 MESSAGE RETURN AREA*LBD*
ACF2MLEN DS    CL4                      LENGTH OF ACF2 MSG      *LBD*
ACF2MSGT DS    CL124                    TEXT OF ACF2 MSG        *LBD*
ACF2MSIZ EQU   *-ACF2MSGA               LEN OF MSG AREA         *LBD*
ACF2GSIZ EQU   *-ACGRSRC                LEN OF DSECT            *LBD*
.NOT#3   ANOP
         END
