*/********************************************************************/
*/*                                                                  */
*/*   THIS PROGRAM IS THE IEFU29 SMF EXIT WHICH GETS ACTIVATED       */
*/*   WHENEVER AN SMF DATASET GETS FULL OR AN I,SMF COMMAND IS ISSUED*/
*/*   IT THEN ISSUES AN INTERNAL START COMMAND TO COPY THE RELEVANT  */
*/*   DATASET TO A DAILY HOLDING FILE AND THEN TO CLEAR THE DATASET  */
*/*   JUST DUMPED .                                                  */
*/*                                                                  */
*/*   THE CPU-ID IS CHECKED. IF IT'S CPUC THEN PROC SMFCPUC IS       */
*/*   STARTED OTHERWISE PROC SMFCPUB IS STARTED. A PARM OF THE       */
*/*   SMF DATASET TO BE DUMPED IS PASSED TO THE STARTED TASK.        */
*/*                                                                  */
*/*   (IF YOU INSTALL THIS EXIT DO NOT ISSUE A Z EOD AFTER YOU       */
*/*    HAVE SHUT EVERYTHING DOWN AS THIS JOB ISSUES AN INTERNAL      */
*/*    START COMMAND WHICH CANNOT BE DONE AS JES2 IS NOT ACTIVE.     */
*/*    THE SMF DATASET WILL BE FLAGGED AS READY FOR DUMPING          */
*/*    SO YOU WILL HAVE DO DO IT MANUALLY).                          */
*/*                                                                  */
*/*   PROCS SMFCPUB SMFCPUC AND SMFNITE ARE IN THE CNTL DATA SET     */
*/*                                                                  */
*/*                                                                  */
*/*                                                                  */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*/*   NOTE : THIS PROGRAM MUST BE MADE RE-ENTRANT OR YOU WILL        */
*/*          HAVE PROBLEMS :                                         */
*/*                                                                  */
*/*                     A) AFTER A CLPA WHEN THE EXIT IS ACTIVATED   */
*/*                     B) AT SHUTDOWN                               */
*/*                     C) PAGEOUT  NOTE PLPA CAN BE PAGED IN BUT    */
*/*                        OUT SO YOU CODE WILL GET OVERLAYED        */
*/*                        PROBABLY CAUSING AN SMF 0C1/0C4 ABEND.    */
*/*                                                                  */
*/*          AS YOU GET ENTRY IN KEY ZERO USE SP252 FOR GETMAIN.     */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*/*       : PROGRAM ALSO CALLS AN INTERNAL SUBROUTINE TO CONVERT     */
*/*         THE DATE/TIME TO THE APPROPRIATE FORMAT                  */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*/*  PARM FROM SMF : R1 POINTS TO THE 4-BYTE ADDRESS OF THE 10 CHAR  */
*/*                  SMF DATASET BEING DUMPED. NOTE WE ONLY USE 9    */
*/*                  IN THIS INSTALLATION.                           */
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
         REGS
SUBPOOL  EQU  252    SINCE WE ARE IN KEY ZERO WHEN WE ISSUE GETMAIN  */
IEFU29   CSECT                             /* IEFU29 CSECT ENTRY     */
         SAVE  (14,12),,IEFU29_&SYSDATE   /* SAVE REGS              */
         LR    R11,R12                     /* PRESERVE CALLERS R12  */
         LR    R12,R15                     /* LOAD BASE REGISTER    */
         USING IEFU29,R12                  /* BASE                   */
         USING DATA,R13                    /* WORK AREA DSECT        */
         LR    R12,R15                     /* ENTRY POINT ADDRESS    */
         L     R3,0(R1)                    /* SAVE DATASET NAME      */
         L     R0,DATALEN                  /* LOAD SP+LENGTH         */
         GETMAIN R,LV=(0)                  /* GET WORKING STORAGE    */
         ST    R13,SAVEBK-SAVE(,R1)        /* SAVE CALLERS SAVE AREA */
         ST    R1,SAVEFW                   /* SAVE MY SAVE AREA ADDR */
         LR    R15,R1                      /* SAVE GETMAINED ADDR    */
         L     R1,SAVER1                   /* ENTRY R1 AFTER GETMAIN */
         LR    R13,R15                     /* POINT TO GETMAINED SA  */
         MVC   MGCRDATA(21),MGCRDAT        /* FOR SVC 34             */
         MVC   TXT+13(4),5(R3)             /* NAME OF DATASET FOR STC*/
         MVC   WTOAREA(WTOLEN),WTOL        /* GET BASIC WTO MESSAGE  */
         MVC   WTOAREA+39(4),5(R3)         /* DSN FOR WTO            */
         L     R4,16                       /* CVT POINTER            *
*/********************************************************************/
*/*                                                                  */
*/*     THIS SECTION PICKS UP THE CPU-ID. I USE THIS RATHER THAN     */
*/*     SMF ID AS THE CPU-ID IS NOT SUBJECT TO RANDOM CHANGE AND     */
*/*     IT ALSO MAKES THE PROGRAM NON-CPU DEPENDANT.                 */
*/*                                                                  */
*/*     I'M ONLY DEALING WITH UNIPROCESSORS HERE.                    */
*/*     WHEN YOU HAVE GOT MULTI-PROCESSORS IT GETS A WEE BIT MORE    */
*/*     TRICKY BUT THE SAME APPROCH CAN BE FOLLOWED.                 */
*/*                                                                  */
*/*     THE CVTPCCAT FIELD IN THE CVT POINTS TO THE PCCAVT AND EACH  */
*/*     4 BYTE ENTRY IN THE PCCAVT POINTS TO THE PCCA FOR            */
*/*     THAT CPU. THE SERIAL NUMBER IS AT OFFSET 4 AND HAS THE       */
*/*     FOLLOWING FORMAT IN EBCDIC :                                 */
*/*                   XXSSSSSSMM WHERE SSSSSS IS THE SERIAL NR       */
*/*                                    MMMM   IS THE MODEL NR        */
*/*                                    XX     IS SOME IBM CODE       */
*/*    (POSSIBLY INDICATING WHETHER ON VM OR NOT)                    */
*/*                                                                  */
*/*     NOTE IF YOU ARE ON XA AND USING A 308X PROCESSOR             */
*/*     YOU MUST SCAN THE PCCAVT TO GET THE IST NON ZERO ENTRY.      */
*/*     THE TABLE 1S 64 BYTES LONG AND EACH ENTRY IS 4 BYTES.        */
*/*                                                                  */
*/*                                                                  */
*/*     CPU B HAS SERIAL NR 221954 MODEL NR 3083                     */
*/*     CPU C HAS SERIAL NR 222495 MODEL NR 3083                     */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
         L     R5,764(R4)  =====>  ACTUAL ADDRESS OF PCCAVT
LUPE     L     R1,0(R5)            PCCA FROM PCCAVT
         CL    R1,=F'0'            DO WE ACTUALLY HAVE ONE
         BNE   OKAY                THIS ONE IS VALID
         LA    R5,4(R5)            NEXT ENTRY IN PCCAVT
         B     LUPE                WE MUST HAVE AT LEAST 1 CPU !!!!!!
OKAY     DS    0H
         CLC   CPUB(6),6(R1)       CPUB ?
         BNE   ITSCPUC             NOPE MUST BE CPUC
         MVI   TXT+8,C'B'                  /* START JOB TO LAUNCH    */
         B     WTO
ITSCPUC  DS    0H
         MVI   TXT+8,C'C'                  /* START JOB TO LAUNCH    */
WTO      DS    0H
         XC    TIME(4),TIME                /* WE ONLY WANT SYSDATE   */
         LA    R1,TIME                     /* PARM FOR SUBROUTINE    */
         BAL   R11,DOODATE                 /* CALL IT                */
         MVC   WTOAREA+60(8),TIME2
         MVC   WTOAREA+72(3),DAY2
         MVC   WTOAREA+76(2),DATE2+3    CHANGE MMMDDYY TO DDMMYY
         MVC   WTOAREA+78(3),DATE2
         MVC   WTOAREA+81(2),DATE2+5
         WTO  'IEFU29I: SMF EXIT IEFU29 HAS BEEN ACTIVATED'
         WTO   MF=(E,WTOAREA)
         SR    R0,R0
         LA    R1,MGCRDATA
         MGCR  (1)
EOJ      DS    0H
         LR    R1,R13             /* FREEMAIN ADDRESS              */
         L     R13,SAVEBK         /* PREVIOUS SAVE AREA
         L     R0,DATALEN         /* LOAD SP+LENGTH                */
         FREEMAIN R,LV=(0),A=(1)  /* FREE STORAGE                  */
         RETURN (14,12),RC=4      /* DONT WANT SMF DUMP MESSAGE    */
*/********************************************************************/
*/*                                                                  */
*/*  THIS SUBROUTINE RECEIVES A 44 BYTE FIELD AND RETURNS            */
*/*               A DATE AND TIME WITH OPTIONALLY THE SYSTEM TIME    */
*/*               AND DATE IF WE NEED IT.                            */
*/*               THE DAY OF THE WEEK IS ALSO RETURNED.              */
*/*                                                                  */
*/*  THIS ROUTINE CAN ONLY BE USED FOR DATES ON OR AFTER             */
*/*  JAN 1 1901.                                                     */
*/*                                                                  */
*/*       IF THE FIRST FIELD IS ZERO ONLY THE SYSTEM DATE AND TIME   */
*/*       WILL BE RETURNED TO THE USER. THE BINARY TIME AND PACKED   */
*/*       JULIAN DATE WILL ALSO BE RETURNED TO THE USER              */
*/*                                                                  */
*/*                                                                  */
*/*  PARM PASSED FROM PROG IS A 44 BYTE CHAR FIELD                   */
*/*  MAPPED AS FOLLOWS                                               */
*/*                                                                  */
*/*    DCL 1 WORKAREA,                                               */
*/*          3 TIME        FIXED BIN(31),  (9(8) COMP)               */
*/*          3 DATE        FIXED(7),       (9(7) COMP-3)             */
*/*          3 RET_TIME    CHAR(8),        (X(8))                    */
*/*          3 RET_DATE    CHAR(7),        (X(7))                    */
*/*          3 RET_DAY     CHAR(3),        (X(3))                    */
*/*          3 MC_TIME     CHAR(8),        (X(8))                    */
*/*          3 MC_DATE     CHAR(7);        (X(7))                    */
*/*          3 MC_DAY      CHAR(3),        (X(3))                    */
*/*                                                                  */
*/*   TIME      : TIME IN HUNDREDTHS OF A SECOND (BINARY 4 BYTES)    */
*/*               ZERO IF ONLY THE SYSTEM DATE AND TIME WANTED       */
*/*               (MUST BA A FULL WORD ZERO )                        */
*/*   DATE      : PACKED DATE IN FORMAT 00YYDDDF (4 BYTES)           */
*/*   RET_TIME  : RETURNS HH:MM:SS TO USER PROGRAM                   */
*/*   RET_DATE  : RETURNS MMMDDYY TO USER PROGRAM                    */
*/*   RET_DAY   : RETURNS 3 BYTE DAY OF THE WEEK                     */
*/*   MC_TIME   : RETURNS SYSTEM TIME IN FORMAT AS RET-TIME.         */
*/*               THE IST BYTE OF THIS FIELD SHOULD BE NON BLANK     */
*/*               IF THIS INFORMATION IS NOT REQUIRED                */
*/*   MC_DATE   : RETURNS MACHINE DATE MMMDDYY TO USER PROGRAM       */
*/*   RET_DAY   : RETURNS MACHINE DAY OF WEEK DDD TO USER PROGRAM.   */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
DOODATE  DS   0H                           /* CALLED BY MAINLINE     */
         LR    R3,R1                       /* PARM PASSED BY MAINLINE*/
         CLC   0(4,R3),=X'00000000'        /* SYS DATE/TIME ONLY     */
         BE    DOSYS                       /* YES GO AND DO IT       */
         L     R1,0(R3)                    /* TIME FROM USER         */
         BAL   R7,HHMMSS                   /* CONVERT                */
         MVC   8(8,R3),EDWORK              /* CHAR TIME              */
         MVC   TEMPDATE(4),4(R3)           /* PACKED DATE            */
         BAL   R7,DODATE                   /* CONVERT DATE           */
         MVC   16(7,R3),WORKDATE           /* MOVE IT                */
         BAL   R7,DODAY                    /* GET DAY OF THE WEEK    */
         MVC   23(3,R3),EDWORK             /* MOVE DAY OF WEEK       */
         CLI   26(R3),C' '                 /* IF BLANK EXIT          */
         BE    EOJ1                        /* CURRENT DATE NOT REQD  */
DOSYS    DS    0H
         TIME  BIN                         /* GET DATE AND TIME      */
         LR    R4,R0                       /* SAVE TIME              */
         ST    R0,TEMPDATE                 /* TEMP STORE             */
         MVC   0(4,R3),TEMPDATE            /* GIVE HIM BINARY TIME   */
         ST    R1,TEMPDATE                 /* GET CURRENT DATE       */
         MVC   4(4,R3),TEMPDATE            /* GIVE HIM DEC DATE      */
         BAL   R7,DODATE
         MVC   34(7,R3),WORKDATE
         BAL   R7,DODAY                    /* GET MACHINE DAY OF WEEK*/
         MVC   41(3,R3),EDWORK             /* MOVE IT               */
         LR    R1,R4                       /* GET CURRENT TIME       */
         BAL   R7,HHMMSS
         MVC   26(8,R3),EDWORK
EOJ1     DS    0H
         BR    R11                /* BACK TO CALLER                */
*/********************************************************************/
*/*                                                                  */
*/*   THIS SUBROUTINE CONVERTS 00YYDDDF INTO A "REAL"                */
*/*   HUMAN DATE MMMDDYY                                             */
*/*                                                                  */
*/********************************************************************/
DODATE   XC    DWD,DWD                  CLEAR WORK AREA
         ST    R7,SAVER7                SAVE RETURN ADDRESS
         MVC   DWD+6(2),TEMPDATE+2      GET DAY OF YEAR
         CVB   R1,DWD                   GET IT IN BINARY
         CH    R1,=H'60'                BEFORE FEB 29?
         BL    NOT$LEAP                 YES - LEAP YEAR DOESN'T MATTER
         TM    TEMPDATE+1,X'01'         ODD YEAR?
         BO    NOT$LEAP                 YES - NOT LEAP YEAR
         TM    TEMPDATE+1,X'12'         ODD DECADE & 2 OR 6 YEAR?
         BM    NOT$LEAP                 ODD DECADES MUST HAVE 2 BIT
         BCTR  R1,0                     *** FUDGE FOR LEAP YEAR ***
NOT$LEAP CH    R1,=H'365'               ANY GOOD?
         XR    R14,R14                  WANT BINARY MONTH ALSO
         LA    R15,=C'JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'
         LA    R7,=H'31,28,31,30,31,30,31,31,30,31,30,31'
MONTH$LP SH    R1,0(,R7)               IS IT THIS MONTH?
         BNP   MONTH$GO                 YES
         LA    R7,2(,R7)                -> NEXT FACTOR
         LA    R14,1(R14)               INCR MONTH COUNTER
         LA    R15,3(,R15)              -> NEXT MONTH NAME
         B     MONTH$LP                 LOOP
MONTH$GO AH    R1,0(,R7)                REPAIR THE DAY OF MONTH
         CVD   R1,DWD                   MAKE IT PACKED DECIMAL
         OI    DWD+7,X'0F'              REMOVE SIGN
         MVC   WORKDATE(3),0(R15)       MOVE IN NAME OF MONTH
         UNPK  WORKDATE+3(2),DWD+6(2)   GET DAY OF MONTH
         MVC   TEMP,=X'40202021202020'
         ED    TEMP(7),TEMPDATE
         MVC   WORKDATE+5(2),TEMP+3     GET YEAR
SKIPDATE L     R7,SAVER7
         BR    R7
***********************************************************************
*                                                                     *
*  CONVERT BINARY NUMBER TO HH:MM:SS.TH                               *
*                                                                     *
***********************************************************************
HHMMSS   MVC   EDWORK+2(7),=C':  :  .'  MOVE IN MASK
         SR    R0,R0                    CLEAR FOR DIVIDE
         D     R1-1,=F'100'             R0=TH  R1=HHMMSS
         CVD   R0,DWD                   CONVERT TO PACKED
         OI    DWD+7,X'0F'              REMOVE SIGN
         UNPK  EDWORK+9(2),DWD+6(2)     UNPACK TENTHS AND HUNDRETHS
         SPACE 1
         SR    R0,R0                    CLEAR FOR DIVIDE
         D     R1-1,=F'60'              R0=SS  R1=HHMM
         CVD   R0,DWD                   CONVERT TO PACKED
         OI    DWD+7,X'0F'              REMOVE SIGN
         UNPK  EDWORK+6(2),DWD+6(2)     UNPACK SECONDS
         SPACE 1
         SR    R0,R0                    CLEAR FOR DIVIDE
         D     R1-1,=F'60'              R0=MM  R1=HH
         CVD   R0,DWD                   CONVERT TO PACKED
         OI    DWD+7,X'0F'              REMOVE SIGN
         UNPK  EDWORK+3(2),DWD+6(2)     UNPACK MINUTES
         SPACE 1
         CVD   R1,DWD                   CONVERT TO PACKED
         OI    DWD+7,X'0F'              REMOVE SIGN
         UNPK  EDWORK+0(2),DWD+6(2)     UNPACK HOURS
         BR    R7                       RETURN TO CALLER
***********************************************************************
*                                                                     *
*  THIS SECTION GIVES US THE DAY OF THE WEEK                          *
*                                                                     *
*                                                                     *
*/********************************************************************/
*/*                                                                  */
*/*   EASY WAY OF WORKING THIS OUT IS AS FOLLOWS.                    */
*/*   JAN 1 1901 WAS A MONDAY.                                       */
*/*   SUBTRACT 1900 FROM (CURRENT YEAR - 1) = (A).                   */
*/*   SAVE TOTAL.                                                    */
*/*   DIVIDE BY 4 TO GET NUMBER OF LEAP YEARS IN INTERVAL = (B)      */
*/*   GET TOTAL NUMBER OF DAYS FROM JAN 1 1900 TO DEC 31 OF THE      */
*/*   PRECEDING YEAR. THIS IS (365 * A) + (B) = C                    */
*/*   ADD TO THIS  THE DAY NUMBER IN THE CURRENT YEAR. THE WEEKDAY   */
*/*   IS GOT BY ADDING DAY NUMBER TO C AND DIVIDING BY 7.            */
*/*   REMAINDER 0 = MONDAY , REMAINDER 1 = TUESDAY ETC.              */
*/*                                                                  */
*/*                                                                  */
*/*   (LITTLE WARNING : 2100 IS NOT A LEAP YEAR SO WE WILL BLOW UP   */
*/*   THEN. 2000 IS. BUT WHO CARES ANYWAY)                           */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
DODAY    DS    0H
         MVC   TEMP,=X'40202021202020'
         ED    TEMP(7),TEMPDATE         GET YY IN CHAR FORMAT
         XC    YEAR,YEAR
         PACK  YEAR+2(2),TEMP+3(2)   GET 0YYF
         XC    DWD,DWD                  CLEAR WORK AREA
         MVC   DWD+6(2),YEAR+2          WANT 0000000000000YYF
         CVB   R1,DWD                   NOW GOT BINARY YEAR
         CH    R1,=H'00'                YEAR 2000
         BNE   NOT2000
         AH    R1,=H'100'               ADD 100 YEARS SINCE 1900
NOT2000  SH    R1,=H'1'                 REDUCE BY 1
         LR    R0,R1                    SAVE
         MH    R0,=H'365'               NUMBER OF DAYS
         ST    R0,DAYTOT                SAVE IT
         XR    R0,R0                    CLEAR FOR DIVIDE
         D     R0,=F'4'                 GET NUMBER OF LEAP YEARS
         L     R0,DAYTOT                TOT DAYS
         AR    R1,R0                    ADD TO ANSWER
         ST    R1,DAYTOT                ACCOUNTED FOR LEAP YEARS
         XC    DWD,DWD                  CLEAR AGAIN
         MVC   DWD+6(2),TEMPDATE+2      GET DAY OF YEAR (CURRENT YEAR)
         CVB   R1,DWD                   GET IT IN BINARY
         L     R0,DAYTOT                ADD TO TOTAL ALREADY GOT
         AR    R1,R0
         XR    R0,R0                    CLEAR FOR DIVIDE BY 7
         D     R0,=F'7'                 DIVIDE
         LA    R14,WEEKDAYS             WEEKDAY TABLE
         MH    R0,=H'3'                 OFFSET IN TABLE
         AR    R14,R0                   GOT IT
         MVC   EDWORK(3),0(R14)         GOTCHER
         BR    R7
************************************************************
*                                                          *
*        CONSTANTS                                         *
*                                                          *
************************************************************
WEEKDAYS DC    CL21'MONTUEWEDTHUFRISATSUN'
CPUB     DC    C'221954'
CPUC     DC    C'222495'
MGCRDAT  EQU   *
FLG1     DC    X'00'
LEN      DC    X'15'
FLG2     DC    X'0000'
TXT0     DC    C'S SMFCPUX,Q2=MAN2'
WTOL     WTO  'CBS001I: SMFDATA FROM DATASET SYS1.MANX BEING DUMPED AT X
               HH:MM:SS ON XXX DDMMMYY',MF=L
WTOLEN   EQU   *-WTOL
DATA     DSECT
SAVE     DS   18F
         ORG  SAVE
         DS   F
SAVEBK   DS   F
SAVEFW   DS   F
         DS   F                           /* R14               */
         DS   F                           /* R15               */
SAVER0   DS   F
SAVER1   DS   F
         DS   11F
WTOAREA  DS   0F,XL(WTOLEN)               /* FOR WTO PARM LIST */
MGCRDATA DS    F
TXT      DS    CL17
YEAR     DS    F
DAYTOT   DS    F
TEMP     DS    CL7
TEMPDATE DS    CL7
SAVER7   DS    F
DWD      DS    D
WORKDATE DS    CL7
EDWORK   DS    XL11
         DS    0D
TIME     DS   F               TIME
DATE     DS   PL4             DATE
TIME1    DS   CL8
DATE1    DS   CL7
DAY1     DS   CL3
TIME2    DS   CL8
DATE2    DS   CL7
DAY2     DS   CL3
LDATA    EQU  *-DATA          LENGTH OF DATA DSECT
IEFU29   CSECT
         LTORG
         DS   0D        FORCE 2 DUBBLE WORD
DATALEN  DC   0F'0',AL1(SUBPOOL),AL3(LDATA)
 END
