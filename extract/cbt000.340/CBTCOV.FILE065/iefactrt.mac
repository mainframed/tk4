IEFACTRT TITLE '-----  SMF JOB/STEP TERMINATION EXIT ROUTINE  -----'
         SPACE 3
***********************************************************************
*                                                                     *
*        MODULE NAME = IEFACTRT                                       *
*                                                                     *
*        DESCRIPTIVE NAME =  SMF ACCOUNTING EXIT ROUTINE              *
*                                                                     *
*        FUNCTION =                                                   *
*                PUT MESSAGES VIA WTO ON JOB LOG.                     *
*                                                                     *
*        OPERATION =                                                  *
*                FOR JOB STEP TERMINATION PUT STATISTICS OF STEP.     *
*                FOR JOB TERMINATION PUT OUT JOB ENDED MESSAGE.       *
*                                                                     *
*        REGISTER CONVENTIONS = STANDARD CONVENTIONS.                 *
*                                                                     *
*        ATTRIBUTES = KEY 0, SUPERVISOR STATE, REENTRANT,             *
*                     ENABLED, NO LOCKS HELD                          *
*                                                                     *
*        ENTRY POINTS = IEFACTRT (ONLY ENTRY POINT)                   *
*                                                                     *
*        INPUT = R1 POINTS TO LIST OF FULLWORD ADDRESSES AS FOLLOWS   *
*                 1.  PTR TO COMMON EXIT PARAMETER AREA               *
*                 2.  PTR TO STEPNAME FIELD                           *
*                 3.  PTR TO PROGRAMMER NAME FIELD                    *
*                 4.  PTR TO JOB CPU TIME FIELD                       *
*                 5.  PTR TO JOB ACCOUNTING FIELDS                    *
*                 6.  PTR TO STEP CPU TIME FIELD                      *
*                 7.  PTR TO STEP ACCOUNTING FIELDS                   *
*                 8.  PTR TO CANCEL FLAG & STEP NUMBER                *
*                 9.  PTR TO CONDITION CODE FIELD                     *
*                10.  PTR TO SMF RECORD TO BE WRITTEN                 *
*                                                                     *
*        OUTPUT = WTO'S ON JOB LOG AND CONSOLE                        *
*                                                                     *
*        EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14        *
*                                                                     *
*        EXIT - ERROR = NONE                                          *
*                                                                     *
*        EXTERNAL REFERENCES =                                        *
*                                                                     *
*             ROUTINES = NONE                                         *
*                                                                     *
*             MACROS = SAVE, WTO, RETURN, GETMAIN, FREEMAIN, ESTAE,   *
*                      SETRP, IFASMFR, IEFJMR, IHASDWA                *
*                                                                     *
*        ABEND CODES = NONE                                           *
*                                                                     *
***********************************************************************
         EJECT
IEFACTRT CSECT ,
*
* CONSTANT ADDRESS EQAUTES
*
PSAAOLD  EQU    X'224',4           ADDRESS IN PSA OF CURRENT ASCB
ASCBJBNI EQU    X'AC',4            ADDRESS OF JOBNAME IN ASCB
CHSTEP   EQU    X'38',8            ADDRESS IN STEP NAME IN CSCB
CHPROCSN EQU    X'18',8            ADDRESS IN PROC STEP NAME IN CSCB
*
* CONSTANT EQUATES
*
SUBPOOL  EQU   252                      USE SUBPOOL 252 FOR GETMAIN  %%
*UBPOOL  EQU   252-128                  BUT NOT FOR TESTING %%%%
         IEZBITS
*
* REGISTER EQUATES
*
R0       EQU   00                       WORK REG
R1       EQU   01                       WORK/PARAMETER REG
R2       EQU   02                       WORK REG
R3       EQU   03                       WORK REG
R4       EQU   04                       ** UNUSED **
R5       EQU   05                       ** UNUSED **
R6       EQU   06                       ** UNUSED **
R7       EQU   07                       BASE FOR COMMON PARM AREA
R8       EQU   08                       -> TO RELOCATE SECTION OF SMF4
R9       EQU   09                       BASE FOR SMF RECORD
R10      EQU   10                       LINKAGE REGISTER
R11      EQU   11                       CALLER'S R12
R12      EQU   12                       CSECT BASE REG
R13      EQU   13                       DATA DSECT BASE REG
R14      EQU   14                       LINKAGE REGISTER
R15      EQU   15                       WORK REG
         EJECT
         SAVE  (14,12),,IEFACTRT_&SYSDATE_&SYSTIME
         LR    R11,R12                  PRESERVE CALLER'S R12
         LR    R12,R15                  LOAD BASE REGISTER
         USING IEFACTRT,R12             SET UP CSECT ADDRESSABILITY
         USING DATA,R13                 SET UP DATA DSECT ADDR.
         USING JMR,R7                   SET UP ADDRBILITY TO COMMON
         L     R7,PARMEPRM-PARMS(,R1)   COMMON AREA ADDRESS
         TM    JMRINDC,JMRFIND          IS IT TIME SHARING USER?
         BO    QUICKOUT                 YES - EXIT BEFORE GETMAIN
         L     R0,DATALEN               GET SP/LEN FOR GETMAIN
         GETMAIN R,LV=(0)               GET STORAGE FOR DATA DSECT
         ST    R13,SAVEBK-SAVE(,R1)     SAVE CALLER'S SAVE AREA ADDR
         ST    R1,SAVEFW                SAVE MY SAVE AREA ADDRESS
         LR    R15,R1                   SAVE GETMAINED STORE ADDRESS
         L     R1,SAVER1                GET CALLER'S R1 AFTER GETMAIN
         L     R2,SAVER0                GET R0 ENTRY CODE
         LR    R13,R15                  POINT TO NEW (GETMAINED) S.A.
         ST    R12,MYBASE               SAVE MY BASE REGISTER
         MVC   PARMS(LPARMS),0(R1)      SAVE INPUT PARMS
         MVI   BLANKS,C' '              INIT
         MVC   BLANKS+1(L'BLANKS-1),BLANKS   ...
*
*        SET UP RECOVERY ENVIRONMENT
*
         MVC   ESTAEW(LESTAEL),ESTAEL   MOVE IN ESTAE PARAMETER LIST
         LA    R0,RTRYRTN1              RETRY ROUTINE - NO SDWA
         ST    R0,ESTAPARM              STORE IN PARAMETER LIST
         LA    R0,RTRYRTN2              RETRY ROUTINE - WITH SDWA
         ST    R0,ESTAPARM+4            STORE IN PARAMETER LIST
         STM   R12,R13,ESTAPARM+8       STORE BASE & DATA REG IN PARM
         ESTAE RECOVERY,CT,PARAM=ESTAPARM,MF=(E,ESTAEW) SETUP RCVRY
*
*        DETERMINE REASON FOR ENTRY  STEP/JOB TERMINATION
*
         L     R9,PARMRECD              LOAD ADDRESS OF SMF RECORD
         C     R2,=F'16'                WAS ENTRY CODE FOR JOB TERM?
         BE    JOBTERM                  YES, BR TO HANDLE JOBTERM
         C     R2,=F'12'                WAS ENTRY FOR STEP TERM?
         BNE   EXIT                     NO, THEN EXIT UNKNOWN ENTRY
         EJECT
**********************************************************************
*  FORMAT STEP TERMINATION WTO                                       *
**********************************************************************
         SPACE 2
*--------------------------------------*
*  JOBNAME/STEPNAME/PROCSTEPNAME       *
*--------------------------------------*
         MVC   WTOAREA(WTO1L),WTO1      COPY WTO PATTERN
         MVC   JOBNAME,JMRJOB           MOVE JOBNAME INTO LINE
         USING SMFD04,R9                SET RECORD TYPE 4
         L     R1,PSAAOLD               GET ADDRESS OF CURRENT ASCB
         L     R1,ASCBJBNI(,R1)         GET ADDRESS OF JOBNAME FIELD
         CLI   CHPROCSN(R1),C' '        ANY GOOD?
         BNH   *+10                     NO - DON'T USE IT
         MVC   PROCSTEP,CHPROCSN(R1)    MOVE IN PROC STEP NAME
         CLI   CHSTEP(R1),C' '          ANY GOOD?
         BNH   *+10                     NO - DON'T USE IT
         MVC   STEPNAME,CHSTEP(R1)      MOVE IN STEP NAME
         SPACE 2
*--------------------------------------*
*  ABEND OR RETURN CODE                *
*--------------------------------------*
         SLR   R0,R0
         ICM   R0,3,SMF4SCC             GET COND CODE
         BAL   R14,PRETCDE              CALL RETURN CODE ROUTINE
         SPACE 2
*--------------------------------------*
*  TAPE I/O REQUEST COUNT              *
*--------------------------------------*
         LA    R1,SMF4LENN              GET DEVICE ENTRY ADDRESS
         LA    R0,X'80'                 INDICATE TAPE DEVICES
         BAL   R14,EXCPCNT              CALL EXCP COUNT ROUTINE
         LR    R1,R15                   LOAD COUNT
         BAL   R14,PCOUNT               CALL CONVERT ROUTINE
         MVC   EXCPTAPE,DWD+4           MOVE TAPE I/O COUNT TO LINE
         SPACE 2
*--------------------------------------*
*  DISK I/O REQUEST COUNT              *
*--------------------------------------*
         LA    R1,SMF4LENN              GET DEVICE ENTRY ADDRESS
         LA    R0,X'20'                 INDICATE DISK DEVICES
         BAL   R14,EXCPCNT              CALL EXCP COUNT ROUTINE
         LR    R1,R15                   LOAD COUNT
         BAL   R14,PCOUNT               CALL CONVERT ROUTINE
         MVC   EXCPDISK,DWD+4           MOVE DISK I/O COUNT TO LINE
         SPACE 2
*--------------------------------------*
*  CPU + SRB TIME ("MACHINE TIME")     *
*--------------------------------------*
         L     R1,PARMSTPC              LOAD STEP CPU TIME ADDRESS
         ICM   R1,B'0111',0(R1)         LOAD STEP CPU TIME
         ICM   R14,B'0111',SMF4SRBT     LOAD SRB TIME
         LA    R1,0(R1,R14)             GET TCB+SRB CPU TIME
*  PREVIOUS INSTRUCTION ALSO CLEARS HIGH BYTE, WHICH IS NECESSARY
         SR    R0,R0                    CLEAR REG 0 FOR CONVERT ROUTINE
         BAL   R14,PCLOCK               CONVERT FOR OUTPUT
         MVC   CPU(4),EDWORK            MOVE NNNX TO OUTPUT LINE
         SPACE 2
*--------------------------------------*
*  ELAPSED TIME                        *
*--------------------------------------*
DO$ET    ICM   R0,B'1111',SMF4SIT       LOAD STEP INIT TIME
         ICM   R1,B'1111',SMF4TME       LOAD STEP TERM TIME
         BAL   R14,PCLOCK               CONVERT IT
         MVC   CLOCK(4),EDWORK          MOVE NNNX TO OUTPUT LINE
         SPACE 2
*--------------------------------------*
*  DISPLAY THE FINISHED MESSAGE        *
*--------------------------------------*
         WTO   MF=(E,WTOAREA)           DO THE WTO
         EJECT
**********************************************************************
*  FORMAT STEP TERMINATION MESSAGE BOX                               *
**********************************************************************
         SPACE 2
*---  THE FORMAT IS AS FOLLOWS:  (SOME BLANK COLUMNS HAVE BEEN OMITTED)
         SPACE 2
***********************************************************************
*   JOBNAME /STEPNAME/PROCSTEP                RETURN CODE   1234
*                                             REGION USED   124K
*   (PAGES)    PAGEIN   PAGEOUT   RECLAIM
*   PRIVATE      NNN       NNN       NN%      CPU TIME      HH:MM:SS.TH
*   VIO          NNN       NNN       NN%      SRB TIME      HH:MM:SS.TH
*   CSA          NNN       ---       NN%      ELAPSED TIME  HH:MM:SS
*   -  -  -  -  -  -  -   EXCP COUNTS BY DEVICE ADDRESS   -  -  -  -  -
*   NNNNNNNNN ADR       NNNNNNNNN ADR       NNNNNNNNN ADR       NNNNNNN
*   NNNNNNNNN ADR       NNNNNNNNN ADR       NNNNNNNNN ADR       NNNNNNN
***********************************************************************
         SPACE 2
*--------------------------------------*
*  FIRST PUT OUT A LINE OF STARS       *
*--------------------------------------*
         MVI   MSGAREA,C'*'             START
         MVC   MSGAREA+1(L'MSGAREA-1),MSGAREA    FINISH
         BAL   R10,PUTMSG               PUT OUT THE MESSAGE
         SPACE 2
*--------------------------------------*
*  JOBNAME/STEPNAME/PROCSTEPNAME       *
*--------------------------------------*
         MVC   MSGAREA+4(8),JMRJOB      MOVE JOBNAME INTO LINE
         MVI   MSGAREA+12,C'/'          SEPARATOR
         L     R1,PSAAOLD               GET ADDRESS OF CURRENT ASCB
         L     R1,ASCBJBNI(,R1)         GET ADDRESS OF JOBNAME FIELD
         CLI   CHSTEP(R1),C' '          ANY GOOD?
         BNH   *+10                     NO - DON'T USE IT
         MVC   MSGAREA+13(8),CHSTEP(R1) MOVE IN STEP NAME
         MVI   MSGAREA+21,C'/'          SEPARATOR
         CLI   CHPROCSN(R1),C' '        ANY GOOD?
         BNH   *+10                     NO - DON'T USE IT
         MVC   MSGAREA+22(8),CHPROCSN(R1)  MOVE IN PROC STEP NAME
         SPACE 2
*--------------------------------------*
*  RETURN CODE                         *
*--------------------------------------*
         MVC   MSGAREA+48(11),=C'RETURN CODE'
         MVC   MSGAREA+65(4),RC         ASSUME NOT *FLUSH*
         CLC   =C'*FLUSH*',RCAB         IS IT?
         BNE   *+10                     NO - SKIP
         MVC   MSGAREA+65(7),=C'*FLUSH*'  YES - MOVE IT IN
         TM    SMF4STI,BIT6             DID IT ABEND?
         BNO   *+10                     NO - SKIP
         MVC   MSGAREA+71(7),=C'*ABEND*'  YES - TURN ON THE LIGHTS
         BAL   R10,PUTMSG               WRITE THIS LINE
         CLC   =C'*FLUSH*',RCAB         THIS STEP FLUSHED
         BE    STEP$END                 YES - ALL ELSE IS GARBAGE
         SPACE 2
*--------------------------------------*
*  REGION USED                         *
*--------------------------------------*
         MVC   MSGAREA+48(11),=C'REGION USED'
         LH    R1,SMF4SYST              GET LSQA + SWA SIZE USED
         AH    R1,SMF4H0ST              ADD USER SIZE USED
         BAL   R14,CORE                 CONVERT PRIVATE AREA SIZE
         MVC   MSGAREA+65(5),EDWORK+2   MOVE IN NNNNK
         CLI   MSGAREA+65,C' '          IS IT JUST NNNK?
         BNE   *+10                     NO - SKIP
         MVC   MSGAREA+65(5),MSGAREA+66 YES - SHIFT IT OVER
         CLI   MSGAREA+65,C' '          IS IT JUST NNK?
         BNE   *+10                     NO - SKIP
         MVC   MSGAREA+65(5),MSGAREA+66 YES - SHIFT IT OVER
         SPACE 1
         BAL   R10,PUTMSG               WRITE THIS LINE
         SPACE 2
*--------------------------------------*
*  PAGING COUNTS HEADER LINE           *
*--------------------------------------*
         MVC   MSGAREA+4(37),=C'(PAGES)    PAGEIN   PAGEOUT   RECLAIM'
         BAL   R10,PUTMSG               WRITE THIS LINE
         SPACE 2
*--------------------------------------*
*  PRIVATE AREA PAGING COUNTS          *
*--------------------------------------*
         MVC   MSGAREA+4(7),=C'PRIVATE'
         LA    R8,SMF4FLG               POINT TO START OF RECORD
         AH    R8,SMF4RLCT              POINT TO RELOCATE SECTION
         USING SMF4PGIN,R8
         ICM   R1,B'1111',SMF4PGIN      GET PAGE-IN COUNT
         BAL   R14,PAGES                EDIT IT
         MVC   MSGAREA+13(7),EDWORK+1   MOVE IT IN
         SPACE 1
         ICM   R1,B'1111',SMF4PGOT      GET PAGE-IN COUNT
         BAL   R14,PAGES                EDIT IT
         MVC   MSGAREA+23(7),EDWORK+1   MOVE IT IN
         SPACE 1
         ICM   R1,B'1111',SMF4RECL      GET PRIVATE AREA RECLAIM COUNT
         BAL   R14,PAGES                EDIT IT
         MVC   MSGAREA+33(7),EDWORK+1   MOVE IT IN
         SPACE 2
*--------------------------------------*
*  CPU TIME USED                       *
*--------------------------------------*
         MVC   MSGAREA+48(8),=C'CPU TIME'
         L     R15,PARMSTPC             LOAD STEP CPU TIME ADDRESS
         SR    R1,R1                    CLEAR FOR ICM
         ICM   R1,B'0111',0(R15)        LOAD STEP CPU TIME
         BAL   R14,HHMMSS               CONVERT TO HH:MM:SS.TH
         MVC   MSGAREA+65(11),EDWORK    MOVE IT IN
         SPACE 1
         BAL   R10,PUTMSG               WRITE THIS LINE
         SPACE 2
*--------------------------------------*
*  VIO PAGING COUNTS                   *
*--------------------------------------*
         MVC   MSGAREA+4(3),=C'VIO'
         ICM   R1,B'1111',SMF4VPI       GET VIO PAGE-IN COUNT
         BAL   R14,PAGES                EDIT IT
         MVC   MSGAREA+13(7),EDWORK+1   MOVE IT IN
         SPACE 1
         ICM   R1,B'1111',SMF4VPO       GET VIO PAGE-IN COUNT
         BAL   R14,PAGES                EDIT IT
         MVC   MSGAREA+23(7),EDWORK+1   MOVE IT IN
         SPACE 1
         ICM   R1,B'1111',SMF4RCLM      GET VIO RECLAIM COUNT
         BAL   R14,PAGES                EDIT IT
         MVC   MSGAREA+33(7),EDWORK+1   MOVE IT IN
         SPACE 2
*--------------------------------------*
*  SRB TIME USED                       *
*--------------------------------------*
         MVC   MSGAREA+48(8),=C'SRB TIME'
         SR    R1,R1                    CLEAR FOR ICM
         ICM   R1,B'0111',SMF4SRBT      LOAD STEP SRB TIME
         BAL   R14,HHMMSS               CONVERT TO HH:MM:SS.TH
         MVC   MSGAREA+65(11),EDWORK    MOVE IT IN
         SPACE 1
         BAL   R10,PUTMSG               WRITE THIS LINE
         SPACE 2
*--------------------------------------*
*  CSA PAGING COUNTS                   *
*--------------------------------------*
         MVC   MSGAREA+4(3),=C'CSA'
         ICM   R1,B'1111',SMF4CPGN      GET CSA PAGE-IN COUNT
         BAL   R14,PAGES                EDIT IT
         MVC   MSGAREA+13(7),EDWORK+1   MOVE IT IN
         SPACE 1
         MVC   MSGAREA+27(3),=C'---'    CSA IS NOT PAGED OUT
         SPACE 1
         ICM   R1,B'1111',SMF4CRCL      GET CSA RECLAIM COUNT
         BAL   R14,PAGES                EDIT IT
         MVC   MSGAREA+33(7),EDWORK+1   MOVE IT IN
         SPACE 2
*--------------------------------------*
*  ELAPSED TIME                        *
*--------------------------------------*
         MVC   MSGAREA+48(12),=C'ELAPSED TIME'
         ICM   R1,B'1111',SMF4TME       GET STEP TERM TIME
         ICM   R0,B'1111',SMF4SIT       GET STEP INIT TIME
         SR    R1,R0                    COMPUTE STEP ELAPSED TIME
         BNL   *+8                      IF DIFFERENCE >= 0 THEN OK
         A     R1,=A(24*60*60*100)      ELSE ADD 24 HOURS TO TIME
         BAL   R14,HHMMSS               CONVERT TO HH:MM:SS.TH
         MVC   MSGAREA+65(8),EDWORK     MOVE IN JUST HH:MM:SS
         SPACE 1
         BAL   R10,PUTMSG               WRITE THIS LINE
         SPACE 1
         BAL   R10,PUTMSG               AND A BLANK LINE
         DROP  R8                       SMF RELOCATE SECTION
         SPACE 2
*--------------------------------------*
*  I/O COUNTS BY DEVICE ADDRESS        *
*--------------------------------------*
         MVC   MSGAREA+03(16),=C'EXCP COUNT  ADDR'
         MVC   MSGAREA+23(16),=C'EXCP COUNT  ADDR'
         MVC   MSGAREA+43(16),=C'EXCP COUNT  ADDR'
         MVC   MSGAREA+63(16),=C'EXCP COUNT  ADDR'
         BAL   R10,PUTMSG               WRITE HEADER LINE
         SPACE 1
         LH    R2,SMF4LENN              GET LENGTH OF WHOLE I/O SECTION
         SH    R2,=H'2'                 MINUS LENGTH OF LENGTH HALFWORD
         BNP   IO$NONE                  SKIP IF NO I/O COUNTER CELLS
         LA    R8,SMF4DEVC              -> FIRST DEVICE ENTRY
         USING SMF4DEVC,R8
         SPACE 2
IO$LINE  LA    R0,4                     ENTRIES PER LINE
         LA    R1,MSGAREA+3             FIRST SLOT
         SPACE 1
IO$ENTRY UNPK  EDWORK(4+1),SMF4CUAD(2+1)  DEVICE ADDRESS
         MVC   12(3,R1),EDWORK+1        COPY LAST 3 HEX CHARS
         TR    12(3,R1),HEXTAB          TRANSLATE TO PRINTABLE HEX
         CLC   SMF4DEVC(4),=F'0'        ANY DEVICE CLASS/UNIT TYPE/ADR?
         BNE   *+10                     YES - SKIP
         MVC   12(3,R1),=C'JES'         INDICATE JES2
         CLC   SMF4DEVC(4),=X'00007FFF' NO CLASS/TYPE & ADR=7FFF  ?
         BNE   *+10                     NO - SKIP
         MVC   12(3,R1),=C'VIO'         YES - IT'S REALLY VIO
         L     R15,SMF4EXCP             GET EXCP COUNT
         CVD   R15,DWD                  CONVERT TO PACKED
         OI    DWD+7,X'0F'              FIX SIGN
         MVC   1(9,R1),=X'202020202020202120'
         ED    0(10,R1),DWD+3
         LA    R8,8(,R8)                -> NEXT DEVICE ENTRY
         LA    R1,20(,R1)               -> NEXT SLOT IN PRINT LINE
         SH    R2,=H'8'                 DECR REMAINING LENGTH
         BNP   IO$LAST                  SKIP IF NO MORE
         BCT   R0,IO$ENTRY              DO ANOTHER ENTRY
         BAL   R10,PUTMSG               PUT OUT THE MESSAGE
         B     IO$LINE                  DO ANOTHER LINE
         SPACE 2
         DROP  R8
         SPACE 2
IO$NONE  MVC   MSGAREA+26(28),=C'*** NO I/O FOR THIS STEP ***'
         SPACE 2
IO$LAST  BAL   R10,PUTMSG               PUT OUT THE MESSAGE
         SPACE 2
STEP$END MVI   MSGAREA,C'*'             START
         MVC   MSGAREA+1(L'MSGAREA-1),MSGAREA    FINISH
         BAL   R10,PUTMSG               PUT OUT THE MESSAGE
         SPACE 2
         B     EXIT                     BR TO EPILOGUE CODE
         EJECT
**********************************************************************
*  FORMAT JOB TERMINATION WTO                                        *
**********************************************************************
JOBTERM  MVC   WTOAREA(WTO1L),WTO1      SET UP OUTPUT LINE
         MVC   JOBNAME+8(14),=C' ENDED.  NAME='
         MVC   CPU-6-3-1(6),=C' TOTAL'
         MVC   JOBNAME,JMRJOB           MOVE IN JOB NAME
         L     R1,PARMPROG              GET ADDR OF PROGRAMMER NAME
         MVC   PGMR,0(R1)               MOVE TO WTO
         SPACE 1
         USING SMFD05,R9                ADDR. SMF TYPE 5 RECORD
         L     R2,PARMJOBC              GET ADDR OF JOB CPU TIME
         ICM   R1,B'0111',0(R2)         GET JOB CPU TIME
         ICM   R15,B'0111',SMF5SRBT     GET SRB TIME
         LA    R1,0(R1,R15)             ADD CPU+SRB, CLEAR HIGH BYTE
         SR    R0,R0                    CLEAR FOR SUBTRACT IN "PCLOCK"
         BAL   R14,PCLOCK               CONVERT TIME FOR OUTPUT
         MVC   CPU(4),EDWORK            MOVE NNNX TO OUTPUT LINE
         SPACE 1
         ICM   R0,B'1111',SMF5JIT       GET JOB INIT TIME
         ICM   R1,B'1111',SMF5TME       GET JOB TERM TIME
         BAL   R14,PCLOCK               CONVERT TIME FOR OUTPUT
         MVC   CLOCK(4),EDWORK          MOVE NNNX TO OUTPUT LINE
         MVC   CLOCK+3(1),DWD+7         MOVE S/M/H
         SPACE 2
         WTO   MF=(E,WTOAREA)           DO THE WTO
         EJECT
**********************************************************************
*  FORMAT JOB TERMINATION MESSAGE BOX                                *
**********************************************************************
         MVI   MSGAREA,C'*'             START
         MVC   MSGAREA+1(L'MSGAREA-1),MSGAREA    FINISH
         BAL   R10,PUTMSG               PUT OUT THE MESSAGE
         SPACE 2
         BAL   R10,PUTMSG               PUT OUT A BLANK LINE
         SPACE 2
         MVC   MSGAREA+09(61),=C'T. T. I.    S A N T A   M O N I C A   $
               D A T A   C E N T E R  '
         BAL   R10,PUTMSG               PUT OUT THE TITLE
         SPACE 2
         BAL   R10,PUTMSG               PUT OUT A BLANK LINE
         SPACE 2
         MVC   MSGAREA+30(19),=C'*** JOB SUMMARY ***'
         BAL   R10,PUTMSG               PUT OUT THE SUB-TITLE
         SPACE 2
         BAL   R10,PUTMSG               PUT OUT A BLANK LINE
         SPACE 2
*--------------------------------------*
*  SYSTEM ID                           *
*--------------------------------------*
         MVC   MSGAREA+4(9),=C'SYSTEM ID'
         MVC   MSGAREA+25(4),SMF5SID
         SPACE 2
*--------------------------------------*
*  INPUT TIME                          *
*--------------------------------------*
         MVC   MSGAREA+50(10),=C'INPUT TIME'
         ICM   R1,B'1111',SMF5RST       GET INPUT TIME
         BAL   R14,HHMMSS               FORMAT IT
         MVC   MSGAREA+66(8),EDWORK     MOVE IT IN
         BAL   R10,PUTMSG               PUT OUT THE MESSAGE
         SPACE 2
         BAL   R10,PUTMSG               PUT OUT A BLANK LINE
         SPACE 2
*--------------------------------------*
*  OPERATING SYSTEM AND RELEASE        *
*--------------------------------------*
         MVC   MSGAREA+4(33),=C'SYSTEM - RELEASE     OS/VS2 - XX.'
         L     R1,16                    -> CVT
         SH    R1,=H'4'                 BACK UP TO RELEASE NUMBER
         MVC   MSGAREA+34(2),0(R1)
         MVC   MSGAREA+37(2),2(R1)
         SPACE 2
*--------------------------------------*
*  START TIME                          *
*--------------------------------------*
         MVC   MSGAREA+50(10),=C'START TIME'
         ICM   R1,B'1111',SMF5JIT       LOAD JOB START TIME
         BAL   R14,HHMMSS               CONVERT TO HH:MM:SS.TH
         MVC   MSGAREA+66(8),EDWORK     MOVE IN JUST HH:MM:SS
         BAL   R10,PUTMSG               PUT OUT THE MESSAGE
         SPACE 2
         BAL   R10,PUTMSG               PUT OUT A BLANK LINE
         SPACE 2
*--------------------------------------*
*  JOB NAME                            *
*--------------------------------------*
         MVC   MSGAREA+4(8),=C'JOB NAME'
         MVC   MSGAREA+25(8),JMRJOB
         SPACE 2
*--------------------------------------*
*  STOP  TIME                          *
*--------------------------------------*
         MVC   MSGAREA+50(10),=C'STOP  TIME'
         ICM   R1,B'1111',SMF5TME       LOAD JOB END TIME
         BAL   R14,HHMMSS               CONVERT TO HH:MM:SS.TH
         MVC   MSGAREA+66(8),EDWORK     MOVE IN JUST HH:MM:SS
         BAL   R10,PUTMSG               PUT OUT THE MESSAGE
         SPACE 2
         BAL   R10,PUTMSG               PUT OUT A BLANK LINE
         SPACE 2
*--------------------------------------*
*  CUSTOMER AND CHARGE NUMBERS         *
*--------------------------------------*
*        MVC   MSGAREA+4(32),=C'CUSTOMER,CHARGE      ?????,?????'
*        CLI   SMF5ACTF,2               2 ACCOUNTING FIELDS?
*        BNE   NO$ACCT                  NO - BAIL OUT OF HERE
*        CLI   SMF5JSAF,5               FIRST ONE 5 CHARS?
*        BNE   NO$ACCT                  NO - BAIL OUT
*        MVC   MSGAREA+25(5),SMF5JSAF+1 YES - MOVE IT TO PRINT LINE
*        CLI   SMF5JSAF+6,5             SECOND ONE 5 CHARS?
*        BNE   NO$ACCT                  NO - BAIL OUT
*        MVC   MSGAREA+31(5),SMF5JSAF+7 YES - MOVE IT IN
         MVC   MSGAREA+4(32),=C'ORGANIZATION NO.     ????       '
         MVC   MSGAREA+25(4),SMF5JSAF+1 JUST MOVE THE 1ST 4 CHAR.
         SPACE 2
*--------------------------------------*
*  ELAPSED TIME                        *
*--------------------------------------*
NO$ACCT  MVC   MSGAREA+50(12),=C'ELAPSED TIME'
         ICM   R1,B'1111',SMF5TME       LOAD JOB END TIME
         ICM   R0,B'1111',SMF5JIT       LOAD JOB START TIME
         SR    R1,R0                    COMPUTE JOB ELAPSED TIME
         BNL   *+8                      IF DIFFERENCE >= 0 THEN OK
         A     R1,=A(24*60*60*100)      ELSE ADD 24 HOURS TO TIME
         BAL   R14,HHMMSS               CONVERT TO HH:MM:SS.TH
         MVC   MSGAREA+66(8),EDWORK     MOVE IN JUST HH:MM:SS
         BAL   R10,PUTMSG               PUT OUT THE MESSAGE
         SPACE 2
         BAL   R10,PUTMSG               PUT OUT A BLANK LINE
         SPACE 2
*--------------------------------------*
*  PROGRAMMER NAME                     *
*--------------------------------------*
         MVC   MSGAREA+4(10),=C'PROGRAMMER'
         MVC   MSGAREA+25(20),SMF5PRGN
         SPACE 2
*--------------------------------------*
*  DATE                                *
*--------------------------------------*
         MVC   MSGAREA+50(4),=C'DATE'
         XC    DWD,DWD                  CLEAR WORK AREA
         MVC   DWD+6(2),SMF5DTE+2       GET DAY OF YEAR
         CVB   R1,DWD                   GET IT IN BINARY
         CH    R1,=H'60'                BEFORE FEB 29?
         BL    NOT$LEAP                 YES - LEAP YEAR DOESN'T MATTER
         TM    SMF5DTE+1,X'01'          ODD YEAR?
         BO    NOT$LEAP                 YES - NOT LEAP YEAR
         TM    SMF5DTE+1,X'12'          ODD DECADE & 2 OR 6 YEAR?
         BM    NOT$LEAP                 ODD DECADES MUST HAVE 2 BIT
*                                       EVEN DECADES DON'T HAVE 2 BIT
         BCTR  R1,0                     *** FUDGE FOR LEAP YEAR ***
NOT$LEAP CH    R1,=H'365'               ANY GOOD?
         BH    SKIPDATE                 NO - BYPASS THIS SECTION
         LA    R15,=C'JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'
         LA    R14,=H'31,28,31,30,31,30,31,31,30,31,30,31'
MONTH$LP SH    R1,0(,R14)               IS IT THIS MONTH?
         BNP   MONTH$GO                 YES
         LA    R14,2(,R14)              -> NEXT FACTOR
         LA    R15,3(,R15)              -> NEXT MONTH NAME
         B     MONTH$LP                 LOOP
MONTH$GO AH    R1,0(,R14)               REPAIR THE DAY OF MONTH
         CVD   R1,DWD                   MAKE IT PACKED DECIMAL
         OI    DWD+7,X'0F'              REMOVE SIGN
         MVC   MSGAREA+66(3),0(R15)     MOVE IN NAME OF MONTH
         UNPK  MSGAREA+70(2),DWD+6(2)   GET DAY OF MONTH
         MVC   MSGAREA+72(4),=C', 19'   MOVE IN CONSTANTS
         UNPK  MSGAREA+76(2+1),SMF5DTE+1(2)  AND THE YEAR
         MVI   MSGAREA+78,C' '          GET RID OF FLIP BYTE
SKIPDATE BAL   R10,PUTMSG               PUT OUT THE MESSAGE
         SPACE 2
         BAL   R10,PUTMSG               PUT OUT A BLANK LINE
         SPACE 2
*--------------------------------------*
*  JOB CLASS                           *
*--------------------------------------*
         MVC   MSGAREA+4(9),=C'JOB CLASS'
         MVC   MSGAREA+25(1),SMF5JICL
         SPACE 2
*--------------------------------------*
*  CPU TIME                            *
*--------------------------------------*
         MVC   MSGAREA+50(8),=C'CPU TIME'
         SR    R1,R1                    CLEAR FOR IC
         ICM   R1,B'0111',SMF5JCPU      GET JOB CPU TIME
         BAL   R14,HHMMSS               CONVERT TO HH:MM:SS.TH
         MVC   MSGAREA+66(11),EDWORK    MOVE IT IN
         BAL   R10,PUTMSG               PUT OUT THE MESSAGE
         SPACE 2
         BAL   R10,PUTMSG               PUT OUT A BLANK LINE
         SPACE 2
*--------------------------------------*
*  SRB TIME                            *
*--------------------------------------*
         MVC   MSGAREA+50(8),=C'SRB TIME'
         SR    R1,R1                    CLEAR FOR IC
         ICM   R1,B'0111',SMF5SRBT      GET JOB SRB TIME
         BAL   R14,HHMMSS               CONVERT TO HH:MM:SS.TH
         MVC   MSGAREA+66(11),EDWORK    MOVE IT IN
         BAL   R10,PUTMSG               PUT OUT THE MESSAGE
         SPACE 2
         BAL   R10,PUTMSG               PUT OUT A BLANK LINE
         SPACE 2
         DROP  R9                       DROP SMF RECORD
         SPACE 2
         MVI   MSGAREA,C'*'             START
         MVC   MSGAREA+1(L'MSGAREA-1),MSGAREA    FINISH
         BAL   R10,PUTMSG               PUT OUT THE MESSAGE
         EJECT
**********************************************************************
*  RETURN TO SYSTEM                                                  *
**********************************************************************
EXIT     DS    0H                       EXIT PROLOGUE
         ESTAE 0                        CANCEL ESTAE EXIT
RTRYRTN2 DS    0H                       ESTAE RETRY ROUTINE WITH SDWA
*                                       JUST FREE STORAGE AND EXIT
         LR    R1,R13                   GET FREEMAIN ADDRESS
         L     R13,SAVEBK               GET PTR TO PREVIOUS SAVE AREA
         L     R0,DATALEN               GET SP/LEN FOR FREEMAIN
         FREEMAIN R,LV=(0),A=(1)        FREE DATA DSECT STORAGE
QUICKOUT RETURN (14,12),RC=0            RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*  EXCP COUNT ROUTINE                                                 *
*        INPUT   REG 1 HAS ADDRESS OF SMF RECORD(4/34) DEVICE FIELDS  *
*        OUTPUT  REG15 HAS COUNT OF TOTAL EXCPS                       *
*                                                                     *
***********************************************************************
EXCPCNT  SAVE  (14,12)                  ROUTINE ENTRY
         LH    R2,0(,R1)                GET LENGTH OF DEVICE ENTRIES
         SRL   R2,3                     DIVIDE BY 8(COUNT OF ENTRIES)
         LA    R3,2(,R1)                POINT TO FIRST DEVICE
         USING SMF4DEVC,R3              ADDRESS DEVICE ENTRY IN RECORD
         SLR   R15,R15                  CLEAR COUNT REG
         LTR   R2,R2                    ANY MORE DEVICE ENTRIES?
         BNP   EXEXIT                   NO - EXIT
EXCPLOOP CLM   R0,B'0001',SMF4DEVC      IS THIS THE KIND WE WANT?
         BNE   *+8                      NO - DON'T COUNT THESE.
         AL    R15,SMF4EXCP             ADD EXCP COUNT
         LA    R3,8(,R3)                INCREMENT TO NEXT ENTRY
         BCT   R2,EXCPLOOP              LOOP THRU ALL ENTRIES
         DROP  R3                       DROP DEVICE ENTRY
EXEXIT   RETURN (14,12),RC=(15)         RETURN TO CALLER
***********************************************************************
*                                                                     *
*  COUNT CONVERSION ROUTINE: CONVERTS BINARY TO CHARACTER OUTPUT      *
*        INPUT   REG 1 HAS COUNT TO BE CONVERTED                      *
*        OUTPUT  DWD COUNTAINS CHARACTER OUTPUT FIELD                 *
*                                                                     *
***********************************************************************
PCOUNT   SAVE  (14,12)                  SAVE CALLER'S REGISTERS
         CVD   R1,DWD                   CONVERT COUNT TO DECIMAL
         OI    DWD+7,X'0F'              FIX SIGN
         UNPK  EDWORK(9),DWD            CONVERT TO PRINTABLE
         MVC   DWD,EDWORK+1             MOVE 8 DIGITS TO RETURN AREA
         C     R1,=F'9999'              DOES IT FIT IN 4?
         BNH   PCNTEX                   YES - EXIT
         MVC   DWD+1(6),EDWORK          GET NUMBER OF THOUSANDS
         MVI   DWD+7,C'K'               PUT IN THOUSANDS INDICATOR
         C     R1,=F'999999'            IT IS OK?
         BNH   PCNTEX                   YES - EXIT
         MVC   DWD(8),=C'     . M'      INDICATE MILLION.......
         MVC   DWD+4(1),EDWORK+2        GET # MILLION
         MVC   DWD+6(1),EDWORK+3        GET TENTHS OF MILLION
         C     R1,=F'9999999'           LESS THAN 9.9M?
         BNH   PCNTEX                   YES - EXIT
         MVC   DWD+4(3),EDWORK          HUNDRED MILLION BETTER BE OK
PCNTEX   RETURN (14,12)                 RETURN TO CALLER
         SPACE 2
***********************************************************************
*                                                                     *
*  CONVERT REGION (SIZE AND USED)                                     *
*                                                                     *
***********************************************************************
CORE     CVD   R1,DWD                   CONVERT TO PACKED
         OI    DWD+7,X'0F'              REMOVE SIGN
         MVC   EDWORK(7),=X'402020202120D2'
         ED    EDWORK(6),DWD+5          MAKE IT PRINTABLE
         BR    R14                      RETURN TO CALLER
         SPACE 2
***********************************************************************
*                                                                     *
*  CONVERT BINARY NUMBER TO HH:MM:SS.TH                               *
*                                                                     *
***********************************************************************
HHMMSS   MVC   EDWORK+2(7),=C':  :  .'  MOVE IN MASK
         SR    R0,R0                    CLEAR FOR DIVIDE
         D     R1-1,=F'100'             R0=TH  R1=HHMMSS
         CVD   R0,DWD                   CONVERT TO PACKED
         OI    DWD+7,X'0F'              REMOVE SIGN
         UNPK  EDWORK+9(2),DWD+6(2)     UNPACK TENTHS AND HUNDRETHS
         SPACE 1
         SR    R0,R0                    CLEAR FOR DIVIDE
         D     R1-1,=F'60'              R0=SS  R1=HHMM
         CVD   R0,DWD                   CONVERT TO PACKED
         OI    DWD+7,X'0F'              REMOVE SIGN
         UNPK  EDWORK+6(2),DWD+6(2)     UNPACK SECONDS
         SPACE 1
         SR    R0,R0                    CLEAR FOR DIVIDE
         D     R1-1,=F'60'              R0=MM  R1=HH
         CVD   R0,DWD                   CONVERT TO PACKED
         OI    DWD+7,X'0F'              REMOVE SIGN
         UNPK  EDWORK+3(2),DWD+6(2)     UNPACK MINUTES
         SPACE 1
         CVD   R1,DWD                   CONVERT TO PACKED
         OI    DWD+7,X'0F'              REMOVE SIGN
         UNPK  EDWORK+0(2),DWD+6(2)     UNPACK HOURS
         BR    R14                      RETURN TO CALLER
         SPACE 2
***********************************************************************
*                                                                     *
*  CONVERT PAGE COUNT                                                 *
*                                                                     *
***********************************************************************
PAGES    CVD   R1,DWD                   CONVERT TO PACKED
         MVC   EDWORK(8),=X'4020202020202120'
         C     R1,=F'99999'             DID IT FIT?
         BNH   PAGES$OK                 YES - GO EDIT
         ED    EDWORK(7),DWD+3
         MVI   EDWORK+7,C'K'            CHANGE TO THOUSANDS
         BR    R14                      RETURN TO CALLER
         SPACE 1
PAGES$OK ED    EDWORK(8),DWD+4          MAKE IT PRINTABLE
         BR    R14                      RETURN TO CALLER
         SPACE 2
***********************************************************************
*                                                                     *
*  CLOCK CONVERSION ROUTINE: CONVERTS BINARY TO CHARACTER OUTPUT      *
*        INPUT   REG 1 HAS FIRST TIME                                 *
*                REG 0 HAS SECOND TIME
*        OUTPUT  DWD COUNTAINS CHARACTER OUTPUT FIELD                 *
*                                                                     *
***********************************************************************
PCLOCK   SAVE  (14,12)                  SAVE CALLER'S REGISTERS
         SR    R1,R0                    GET TIME DIFFERENCE
         BNL   *+8                      IF DIFFERENCE >= 0 THEN OK
         A     R1,=A(24*60*60*100)      ELSE ADD 24 HOURS TO TIME
         SPACE 1
         MVI   EDWORK+7,C'S'            ASSUME SECONDS
         C     R1,=A(1000*100)          LESS THAN 1000 SECONDS?
         BL    NOTOVER                  YES - OK
         MVI   EDWORK+7,C'M'            ASSUME MINUTES
         SR    R1-1,R1-1                CLEAR FOR DIVIDE
         D     R1-1,=F'60'              CONVERT TO MINUTES
         C     R1,=A(1000*100)          LESS THAN 1000 MINUTES?
         BL    NOTOVER                  YES - OK
         MVI   EDWORK+7,C'H'            ELSE IT'S HOURS?????
         SR    R1-1,R1-1                CLEAR FOR DIVIDE
         D     R1-1,=F'60'              CONVERT TO HOURS
         C     R1,=A(1000*100)          LESS THAN 1000 HOURS?
         BL    NOTOVER                  YES - OK
         MVC   DWD(8),=C'********'      SOMETHING WRONG HERE
         B     PCLKEX                   BR TO RETURN
         SPACE 1
NOTOVER  CVD   R1,DWD                   CONVERT TIME TO DECIMAL
         OI    DWD+7,X'0F'              FIX SIGN
         UNPK  EDWORK(7),DWD+4(4)       MAKE IT PRINTABLE
         MVC   DWD,EDWORK               RETURN THE RESULT
*---  REFORMAT RESULT TO FIT IN A 4 CHAR FIELD
         MVC   EDWORK(3),DWD+2          MOVE NNN
         MVC   EDWORK+3(1),DWD+7        MOVE S/M/H
         CLC   =C'00',EDWORK            2 LEADING ZEROES?
         BNE   PCLKEX                   NO - ALL DONE HERE
         MVC   EDWORK(1),DWD+4          YES - MOVE UNITS TO ANSWER AREA
         MVI   EDWORK+1,C'.'            PUT IN THE DECIMAL POINT
         MVC   EDWORK+2(1),DWD+5        MOVE IN TENTHS
         CLI   EDWORK,C'0'              LESS THAN 1 SECOND?
         BNE   PCLKEX                   NO - ALL DONE HERE
         MVI   EDWORK,C'.'              YES - PUT IN THE DECIMAL POINT
         MVC   EDWORK+1(2),DWD+5        MOVE TENTHS AND HUNDRETHS
         SPACE 1
PCLKEX   RETURN (14,12)                 RETURN TO CALLER
         SPACE 2
***********************************************************************
*                                                                     *
*  CONDITION CODE CONVERSION ROUTINE: CHARACTER OUTPUT INTO RC FIELD  *
*        INPUT   REG 0 HAS            STEP TERM CONDTION CODE         *
*                REG 1 HAS ADDRESS OF STEP TERM INDICATOR FIELD       *
*        OUTPUT  FIELD RC OF OUTPUT LINE CONTAINS RETURN CODE         *
*                                                                     *
***********************************************************************
PRETCDE  SAVE  (14,12)                  SAVE CALLER'S REGISTERS
         USING SMFD04,R9
         TM    SMF4STI,BIT7             WAS STEP FLUSHED?
         BNO   NOFLUSH                  NO,BRANCH PAST
         MVC   RCAB(7),=C'*FLUSH*'      MOVE IN FLUSHED MESSAGE
         B     PRETEXT                  ALL DONE HERE
NOFLUSH  TM    SMF4STI,BIT6             DID IT ABEND?
         BO    STPABEND                 YES, GO CONVERT ABEND CODE
         N     R0,=A(X'FFF')            ZERO UNUSED PORTION
         CVD   R0,RWORK                 GET ADDRESS OF COND FIELD
         OI    RWORK+7,X'0F'            FIX SIGN
         UNPK  RC(4),RWORK+5(3)         CONVERT RET CODE TO CHAR
         CLC   =C'0000',RC              IS IT ZERO?
         BNE   *+10                     NO - SKIP
         MVC   RC(4),=C'ZERO'           YES - BE FANCY
         B     PRETEXT                  BR TO RETURN
STPABEND CLM   R0,2,=X'80'              WAS IT A USER ABEND CODE?
         BL    SYSABND                  NO, PROCESS SYSTEM ABEND CODE.
         N     R0,=A(X'FFF')            TURN OFF X'80' BIT
         CVD   R0,RWORK                 CONVERT FOR OUTPUT
         OI    RWORK+7,X'0F'            FIX SIGN
         UNPK  RC(4),RWORK+5(3)         CONVERT TO CHARACTER
         MVC   RCAB,=C'AB='             MOVE IN (USER) ABEND INDICATOR
         B     PRETEXT                  BR TO RETURN
SYSABND  STH   R0,RWORK                 STORE ABEND CODE
         UNPK  RWORK+3(5),RWORK(3)      ADD ZONES TO CC FIELD
         TR    RWORK+4(3),HEXTAB        TRANSLATE TO CHARACTERS
         MVC   RC+1(3),RWORK+4          MOVE TO OUTPUT LINE
         MVC   RCAB(4),=C'AB=S'         MOVE IN SYSTEM ABEND INDICATOR
PRETEXT  RETURN (14,12)                 RETURN TO CALLER
         DROP  R9
         SPACE 2
***********************************************************************
*                                                                     *
*  ROUTINE TO WRITE 'MSGAREA' TO JOBMSG DATASET                       *
*                                                                     *
***********************************************************************
PUTMSG   LA    R1,MSGAREA               GET MESSAGE ADDR
         ST    R1,36(,R11)              TELL IEFYS WHERE IT IS
         MVC   42(2,R11),=AL2(L'MSGAREA)  AND HOW LONG IT IS
         L     R15,=V(IEFYS)            FIND ROUTINE
         LR    R12,R11                  GET CALLER'S R12
         PUSH  USING
         DROP  R12
*  WHAT A HOKEY WAY TO DO THAT.
         BALR  R14,R15                  CALL IT
         L     R12,MYBASE               RESTORE MY BASE REGISTER
         POP   USING
         MVC   MSGAREA+1(L'MSGAREA-2),BLANKS   RESET THE BUFFER
         BR    R10                      RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*  ESTAE EXIT ROUTINE                                                 *
*                                                                     *
***********************************************************************
         USING *,R15                    SET UP ADDRESSABILITY
RECOVERY LA    R4,4                     PUT 4 IN REGISTER FOR COMPARE
         CR    R0,R4                    IS SDWA PRESENT?
         BNE   HAVESDWA                 YES, BR TO PROCESS WITH SDWA
         L     R0,0(,R2)                LOAD RETRY ADDR FROM PARM LIST
         LA    R15,4                    SET RC TO RETRY ADDR IN R0
         BR    R14                      RETURN TO PROCESSOR WITH RETRY
         SPACE 2
HAVESDWA DS    0H                       ENTER HERE IF SDWA PRESENT
         ST    R14,12(,R13)             SAVE RETURN ADDRESS
         L     R2,0(,R1)                GET PARM LIST ADDR FROM SDWA
         L     R2,4(,R2)                GET RETRY ADDRESS
         SETRP RC=4,,RETADDR=(2),RETREGS=YES,FRESDWA=YES,REGS=(14)
         DROP  R15
         SPACE 3
***********************************************************************
*                                                                     *
*  ESTAE RETRY ROUTINE WHEN NO SDWA WAS PRESENT                       *
*                                                                     *
***********************************************************************
RTRYRTN1 DS    0H                       RETRY ROUTINE WITH NO SDWA
         LM    R12,R13,8(R1)            LOAD REGS FOR ESTAE PARM LIST
         B     RTRYRTN2                 AND GET OUT
         EJECT
*
HEXTAB   EQU   *-C'0'
         DC    C'0123456789ABCDEF'
*
* DEFINE ESTAE LIST FORM
*
ESTAEL   ESTAE MF=L                     CREATE MODEL ESTAE PARM LIST
LESTAEL  EQU   *-ESTAEL                 NAME ITS LENGTH
*
* DEFINE LINK  LIST FORM
*
LINKL    LINK  DE=0,SF=L                CREATE MODEL LINK PARM LIST
LLINKL   EQU   *-LINKL                  NAME ITS LENGTH
         SPACE 5
DATA     DSECT
SAVE     DS    18F                      SAVE AREA FOR REGS ON ENTRY
         ORG   SAVE
         DS    F
SAVEBK   DS    F
SAVEFW   DS    F
         DS    F                        R14
         DS    F                        R15
SAVER0   DS    F
SAVER1   DS    F
         DS    11F
*
MYBASE   DS    A
DWD      DS    D
RWORK    DS    D
*
LINKE    DS    XL(LLINKL)               LINK PARM LIST AREA
*
ESTAEW   DS    XL(LESTAEL)              ESTAE PARM LIST AREA
ESTAPARM DS    4F                       PARM LIST PASSED TO RETRY RTN
*              RETRY ROUTINE ADDRESS    NO SWDA OBTAINED
*              RETRY ROUTINE ADDRESS    SWDA OBTAINED
*              BASE REGISTER R12
*              DATA REGISTER R13
*
PARMS    DS    0F                       PARMS POINTED TO BY R1 @ ENTRY
PARMEPRM DS    F                        -> COMMON EXIT PARAMETER AREA
PARMSTEP DS    F                        -> STEPNAME FIELD
PARMPROG DS    F                        -> PROGRAMMER NAME FIELD
PARMJOBC DS    F                        -> JOB CPU TIME FIELD
PARMACCT DS    F                        -> JOB ACCOUNTING FIELDS
PARMSTPC DS    F                        -> STEP CPU TIME FIELD
PARMSACT DS    F                        -> STEP ACCOUNTING FIELDS
PARMINDC DS    F                        -> CANCEL FLAG & STEP NUMBER
PARMCOND DS    F                        -> CONDITION CODE FIELD
PARMRECD DS    F                        -> SMF RECORD TO BE WRITTEN
LPARMS   EQU   *-PARMS
*
EDWORK   DC    XL11'00'
*
WTOAREA  DS    0F,XL(100)               WTO WORK AREA
*
MSGAREA  DS    CL81                     WORK AREA FOR JOBMSG
*
BLANKS   DS    CL81
*
LDATA    EQU   *-DATA
         SPACE 3
IEFACTRT CSECT
*
*  WTO FOR STEP TERMINATION
*
WTO1     WTO   'JJJJJJJJ.        .         RC=NNNN T=NNNN D=NNNN MT=NNN$
               S ET=NNNH',MF=L,                                        $
               ROUTCDE=13               %%TEST=11  PROD=13
         SPACE 2
WTO1L    EQU   *-WTO1
JOBNAME  EQU   WTOAREA+4,8              JOB NAME
STEPNAME EQU   JOBNAME+8+1,8            STEPNAME
PROCSTEP EQU   STEPNAME+8+1,8           PROCEDURE STEP NAME
RCAB     EQU   PROCSTEP+8+1,3           'RC=' OR 'AB='
RC       EQU   RCAB+3,4                 RETURN/ABEND CODE
EXCPTAPE EQU   RC+4+3,4                 TAPE EXCP COUNT
EXCPDISK EQU   EXCPTAPE+4+3,4           DISK EXCP COUNT
CPU      EQU   EXCPDISK+4+4,4           TOTAL CPU TIME (MACHINE TIME)
CLOCK    EQU   CPU+4+4,4                TOTAL ELAPSED TIME
*
*  WTO FOR JOB TERMINATION
*
*WTO2    WTO   'JJJJJJJJ ENDED.  NAME=PPPPPPPPPPPPPPPPPPPP TOTAL MT=NNN$
               S ET=NNNH',                                             $
               MF=L,ROUTCDE=13
PGMR     EQU   JOBNAME+8+14,20          PROGRAMMER NAME
         EJECT
SMFD04   DSECT
         IFASMFR 4                      STEP TERMINATION RECORD
         EJECT
SMFD05   DSECT
         IFASMFR 5                      JOB TERMINATION RECORD
         EJECT
         IEFJMR                         JMR MAPS COMMON PARAMETER AREA
         EJECT
         IHASDWA DSECT=YES              SDWA FOR ESTAE/SETRP MACRO
         EJECT
IEFACTRT CSECT
         LTORG ,
         DS    0D
DATALEN  DC    0F'0',AL1(SUBPOOL),AL3(LDATA)
MODLEN   EQU   *-IEFACTRT
LPATCH   EQU   (MODLEN+9)/10/8+1 ADD 10% FOR PATCH AREA
         DC    AL2(LPATCH*8)
         DC    S(PATCH)
PATCH    DC    (LPATCH)D'00'
         END   IEFACTRT
