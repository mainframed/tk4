 PLIDYN:  PROC OPTIONS(MAIN);       /*TEST DYNAMIC ALLOCATION  MH*/
  /* *************************************************************** */
  /*                                                                 */
  /*     THIS PROGRAM TESTS A DYNAMIC ALLOCATION INTERFACE.          */
  /*     I WANT TO USE DYNAMIC ALLOCATION IN HIGH LEVEL LANGUAGE     */
  /*     PROGRAMS INSTEAD OF HAVING TO MUCK ABOUT WITH LOTS OF       */
  /*     HORRIBLE JCL WHEN I RUN A JOB.                              */
  /*     I ALSO DON'T WANT TO HAVE TO WRITE IN ASSEMBLER AND USE     */
  /*     THAT AWFUL SVC 99 PARAMETER LIST SO I HAVE GOT A NICE       */
  /*     LITTLE ASSEMBLER PROGRAM WHERE MOST OF THE DIRTY WORK HAS   */
  /*     BEEN DONE.                                                  */
  /*                                                                 */
  /*     I DYNAMICALLY ALLOCATE A MEMBER OF A PDS AS A SYSIN         */
  /*     DATASET AND PRINT IT OUT.                                   */
  /*                                                                 */
  /*     BASICALLY THE HIGH LEVEL LANGUAGE INTERFACE ATTEMPTS        */
  /*     TO USE TSO LIKE PARAMETERS.                                 */
  /*                                                                 */
  /*                                                                 */
  /*     MIKE HAWTHORNE     TTI CITICORP                             */
  /*                        3100 OCEAN PK BLVD                       */
  /*                        SANTA MONICA                             */
  /*                        CA 90405   (213) 450-9111 X2353          */
  /*                                                                 */
  /* *************************************************************** */
  DCL WORK                     FIXED BIN(31) INIT(0);
  DCL FILE_IND                 CHAR(1) INIT('N');
  DCL TEXTL                    CHAR(80);
  DCL SYSIN                    FILE INPUT RECORD SEQL;
  DCL PLIRETV                  BUILTIN;
  DCL DYNAM                    ENTRY OPTIONS (ASSEMBLER,RETCODE);
  ON ENDFILE(SYSIN) FILE_IND = 'Y';
  FETCH DYNAM;                 /* LOAD THE INTERFACE PROGRAM         */
  CALL DYNAM(WORK, 'INIT ');   /* INITIALIZE WORK AREA FOR DYN ALLOC */
  /* *************************************************************** */
  /*                                                                 */
  /*  ALLOC : I WANT TO ALLOCATE A DATASET                           */
  /*  DSN   : NAME OF DATASET TO ALLOCATE                            */
  /*  SHR   : DISPOSITION OF DATASET                                 */
  /*  ME    : MEMBER OF PDS I AM USING                               */
  /*  DD    : DDNAME I WANT TO USE                                   */
  /*                                                                 */
  /*  =====> FOR COMPLETE DESCRIPTION OF PARAMETERS PLEASE <=====    */
  /*  =====> REVIEW MEMBER DYNDOC AS MANY PARAMETERS ARE   <=====    */
  /*  =====> OPTIONAL AND THERE ARE MANY FUNCTIONS         <=====    */
  /*  =====> AVAILABLE SUCH AS DELETE, ALLOCATE NEW FILES  <=====    */
  /*  =====> CONCATENATE DDNAMES, REMOVE INUSE ATTRIBUTES  <=====    */
  /*  =====> ETC: ETC:                                     <=====    */
  /*                                                                 */
  /*  THE INTERFACE CAN BE USED BY COBOL (UGH!!) OR FORTRAN.         */
  /*  SIMPLY CODE YOUR CALL PARAMETERS IN THE SYNTAX REQUIRED BY     */
  /*  THE LANGUAGE (FORTRAN) OR THE DISEASE (COBOL) YOU ARE USING.   */
  /*                                                                 */
  /*                                                                 */
  /*  BY MAKING THE PARAMETER LIST VARIABLES RATHER THAN FIXED       */
  /*  CODED ENTRIES YOU CAN REALLY MAKE USE OF DYNAMIC ALLOCATION    */
  /*  BY PROVIDING VARIABLES VIA A PARM FIELD AT RUN TIME.           */
  /*  IDEALLY ALL YOU SHOULD HAVE TO DO TO GET A JOB TO RUN IS       */
  /*  SAY EXEC PGM= GIVE A STEPLIB AND HAVE NO JCL. MVT WAS WAY      */
  /*  BACK IN THE 60'S BUT I THINK IBM STILL HAS A LONG WAY TO       */
  /*  GO AS FAR AS INTERACTIVE AND REAL TIME PROCESSING IS CONCERNED.*/
  /*                                                                 */
  /* *************************************************************** */
  CALL DYNAM(WORK, 'ALLOC ', 'DSN=SMDC.OPERLIB SHR;',
       'ME=SMFOPT;','DD=SYSIN;');  /* ALLOCATE OUR DATASET           */
  IF PLIRETV = 0                  /* IF OK PRINT MEMBER OUT          */
  THEN DO;
          OPEN FILE(SYSIN);
          READ FILE(SYSIN) INTO (TEXTL);
          PUT FILE(SYSPRINT) SKIP EDIT(TEXTL)(A);
          DO WHILE (FILE_IND = 'N');
             READ FILE(SYSIN) INTO (TEXTL);
             IF FILE_IND = 'N'
             THEN DO;
                     PUT FILE(SYSPRINT) SKIP EDIT(TEXTL)(A);
                     END;
          END;
          CLOSE FILE(SYSIN);
       END;
  IF PLIRETV ^=0                 /* DYNAMIC ALLOCATION HAS FAILED    */
  THEN DO;
          DISPLAY ('PLI001: DYNAMIC ALLOCATION FAILED');
       END;
  RELEASE DYNAM;    /* LETS TIDY UP   DELETE HIM FROM STORAGE        */
  END PLIDYN;
