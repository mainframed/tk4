./ ADD LIST=ALL,NAME=SMFJCL
//S6751MHJ JOB (7730,SYST,6751),'MIKE HAWTHORNE',REGION=2048K,
//  CLASS=A,MSGCLASS=9,NOTIFY=S6751MH
//DUMPSMF1 EXEC PGM=IFASMFDP
//SYSPRINT DD SYSOUT=9
//DUMPIN DD DSN=SMFDATA.NOV1385.DAILY,DISP=SHR
//DUMPOUT DD DSN=&&CAT,UNIT=SYSDA,SPACE=(CYL,(20,7)),DISP=(,PASS),
// DCB=(LRECL=32760,RECFM=VBS,BLKSIZE=4096)
//SYSIN DD *
 INDD(DUMPIN,OPTIONS(DUMP))
 OUTDD(DUMPOUT,TYPE(4,20,34,40,70))
//SORT1    EXEC PGM=SORT,REGION=1024K
//SYSPRINT DD SYSOUT=*
//SYSUDUMP DD SYSOUT=*
//SYSOUT DD SYSOUT=*
//SORTWK01 DD UNIT=SYSDA,SPACE=(CYL,(20,10))
//SORTWK02 DD UNIT=SYSDA,SPACE=(CYL,(20,10))
//SORTWK03 DD UNIT=SYSDA,SPACE=(CYL,(20,10))
//SORTWK04 DD UNIT=SYSDA,SPACE=(CYL,(20,10))
//SORTIN DD DSN=&&CAT,DISP=SHR
//EXITDD DD DSN=SMDC.SYSTEMS.LOADLIB,DISP=SHR
//SORTOUT DD DSN=&&DOG,UNIT=SYSDA,SPACE=(CYL,(20,7)),DISP=(,PASS),
// DCB=(LRECL=32760,RECFM=VBS,BLKSIZE=4096)
//SORDATA DD UNIT=SYSDA,SPACE=(CYL,(5,1)),DISP=(,PASS),
// DCB=(LRECL=32760,BLKSIZE=4096,RECFM=VBS),DSN=&&DOG1
//HDRDATA DD UNIT=SYSDA,SPACE=(CYL,(5,1)),DISP=(,PASS),
// DCB=(LRECL=32760,BLKSIZE=4096,RECFM=VBS),DSN=&&DOG2
//SORTDIAG DD SYSOUT=*
//SYSIN DD *
 SORT FIELDS=(15,4,A,19,16,A,11,4,A,7,4,A),FORMAT=BI
 MODS  E15=(E15,6000,EXITDD,N),E35=(E35,6000,EXITDD,N)
 RECORD TYPE=V,LENGTH=(32760,,,,700)
 OPTION NOBLKSET
//COLLDATA   EXEC PGM=SMFCOLL
//STEPLIB DD DSN=SMDC.SYSTEMS.LOADLIB,DISP=SHR
//SMFOUT DD DSN=&&A,DISP=(,PASS),UNIT=DISK,SPACE=(CYL,(5,3)),
//  DCB=(LRECL=130,BLKSIZE=1300)
//SYSUDUMP DD SYSOUT=9
//SMFIN DD DSN=&&DOG,DISP=SHR
//SORT2        EXEC PGM=SORT,REGION=1024K
//SYSPRINT DD   SYSOUT=*
//SYSUDUMP DD   SYSOUT=*
//SYSOUT DD SYSOUT=*
//SORTWK01 DD   UNIT=SYSDA,SPACE=(CYL,(20,10))
//SORTWK02 DD   UNIT=SYSDA,SPACE=(CYL,(20,10))
//SORTWK03 DD   UNIT=SYSDA,SPACE=(CYL,(20,10))
//SORTWK04 DD   UNIT=SYSDA,SPACE=(CYL,(20,10))
//SORTIN   DD   DSN=&&A,DISP=SHR
//SORTOUT DD DISP=SHR,DSN=S6751MH.SMF.TEST,
//  DCB=(LRECL=130,BLKSIZE=1300)
//SORTDIAG DD SYSOUT=*
//SYSIN     DD *
   SORT FIELDS=(10,4,CH,A,14,16,BI,A)
//SYSDEVT  EXEC PGM=SMFREP,PARM=DEVT     (PARM IS SMF ID OF SYSTEM)
//STEPLIB DD DSN=S6751MH.LOADLIB,DISP=SHR
//DATABASE DD DISP=SHR,DCB=(BLKSIZE=1300),DSN=S6751MH.SMF.TEST
//REPORT DD SYSOUT=9,DCB=(BLKSIZE=1330,RECFM=FBA,LRECL=133)
//SYSUDUMP DD SYSOUT=9
//SYSTEST  EXEC PGM=SMFREP,PARM=TEST
//STEPLIB DD DSN=S6751MH.LOADLIB,DISP=SHR
//DATABASE DD DISP=SHR,DCB=(BLKSIZE=1300),DSN=S6751MH.SMF.TEST
//REPORT DD SYSOUT=9,DCB=(BLKSIZE=1330,RECFM=FBA,LRECL=133)
//SYSUDUMP DD SYSOUT=9
/*
./ ADD LIST=ALL,NAME=E15
*    RETURN CODES USED
*    RC=0   NO ACTION
*    RC=4   DELETE
*    RC=8   DO NOT RETURN
R00      EQU   0                        REGISTERS 0
R01      EQU   1                        1
R02      EQU   2                        2
R09      EQU   9                        9
R10      EQU   10                       10
DCBREG   EQU   11                       DCB REG
R12      EQU   12                       12
R13      EQU   13                       13
R15      EQU   15                       15
HDRID    EQU   X'02'                    HEADER ID
TLRID    EQU   X'03'                    TRAILER ID
STERMID  EQU   X'04'                    STEP TERM ID
JTERMID  EQU   X'05'                    JOB TERM ID
OPFORMID EQU   X'06'                    OP FORM ID
D4       EQU   4                        DISP OF 4
D8       EQU   8                        DISP OF 8
D24      EQU   24                       DISP OF 24
L8       EQU   8                        LENGTH OF 8
X10      EQU   X'10'                    TEST FOR OPEN
E15      CSECT                          EXIT 15
         USING *,R12                    DECLARE BASE
         SAVE  (14,12)                  SAVE SORTS REGS
         LR    R12,R15                  SET UP BASE
         USING RECDFORM,R10             BASE FOR REC'D FORM
         LA    DCBREG,E15DCB            SET UP DCB BASE
         USING IHADCB,DCBREG            DECLARE BASE FOR DCBD
         ST    R13,SAVDS+D4             CHAIN SORT &  E15 SAVE AREA
         LR    R02,R13
         LA    R13,SAVDS                PRIME SAVE REGISTER
         ST    R13,D8(R02)              CHAIN E15 & SORT SAVE AREA
         L     R10,0(R01)               LOAD PARAMETER FROM SORT
         TM    DCBOFLGS,X10             IS DATA SET OPEN
         BO    E15NOPEN                 YES,GO AROUND OPED PROCESSING
         OPEN  (E15DCB,(OUTPUT),E15DCBA,(OUTPUT))
E15NOPEN LTR   R10,R10                  TEST FOR END OF DATA
         BZ    E15NORTN                 YES,GO CLOSE OUT
         CLI   RECDID,HDRID             IS THIS DUMP HDR
         BE    E15XCPTA                 YES,COMPARE WITH PREVIOUS
         CLI   RECDID,TLRID             IS THIS DUMP TRAILER
         BE    E15XCPTC                 YES,PLACE ON E15DCBA
         CLI   RECDID,STERMID           IS RECD STEP TERMINATE
         BE    E15NOACT                 YES,GO MAKE NORMAL RETURN
         CLI   RECDID,JTERMID           IS RECD JOB TERMINATE
         BE    E15NOACT                 YES,GO TO NORMAL RETURN
         CLI   RECDID,OPFORMID          IS RECD O/P FORMS
         BE    E15NOACT                 YES,GO TO NORMAL RETURN
         CLI   RECDID,X'22'             TSO LOGOFF
         BE    E15NOACT                 NORMAL RETURN
         CLI   RECDID,X'14'             JOB INITIATION
         BE    E15NOACT                 NORMAL RETURN
         CLI   RECDID,X'28'             DYNAMIC ALLOCATION
         BE    E15NOACT                 NORMAL RETURN
         CLI   RECDID,X'46'             CPU ACTIVITY  (RMF)
         BNE   E15DELET                 DELETE EVERYTHING ELSE
         LR    R00,R10
         PUT   E15DCB,(0)               SAVE SYSTEM RECORDS
*                                       TEMPORARY SET
E15DELET L     R13,SAVDS+D4             ADDRESS OF SORT SAVEAREA
         RETURN (14,12),RC=4            DELETE RCD FROM TO-BE-SORTED
E15NOACT L     R13,SAVDS+D4             ADDRESS OF SORT'S SAVEAREA
         ST    R10,D24(R13)             ADDRESS OF CURRENT RECD TO SAVE
         RETURN (14,12),RC=0            RETAIN TASK RCDS FOR SORTING
E15XCPTA L     R09,HDRTIME              LOAD PREV RECDS TIMESTMP
         LTR   R09,R09                  IS IT ZERO (FIRST TIME THRU)
         BZ    E15XCPTB                 YES,BRANCH AROUND COMPARISONS
         CLC   HDRDATE,RSTPDATE         COMPARE PREVIOUS & CURRENT DATE
         BH    E15WARN                  PREVIOUS DATE HI,ISSUE WARNING
         CLC   HDRTIME,RSTPTIME         COMPARE PREVIOUS & CURRENT TIME
         BH    E15WARN                  PREVIOUS TIME HI,ISSUE WARNING
E15XCPTB MVC   HDRTIME(L8),RSTPTIME     RETAIN DATE/TIME FOR COMPARE
E15XCPTC LR    R00,R10                  @ OF RECORD TO REGISTER 0
         PUT   E15DCBA,(0)              EXECUTE I/O, SAVE HDR & TRL
         B     E15DELET                 RETURN TO SORT W/DELETE CODE
E15WARN  WTO   'SMFX001-INPUT NOT IN CHRONOLOGICAL SEQUENCE'
         B     E15XCPTB                 CONTINUE PROCESSING
E15NORTN CLOSE (E15DCB,,E15DCBA)        CLOSE BOTH TEMPORARY DATA SETS
         L     R13,SAVDS+D4
         RETURN (14,12),RC=8            RETURN & DON'T COME BACK
         DS    0D
SAVDS    DS    18F                      SAVE AREA
HDRTIME  DC    F'0'                     HEADER TIME
HDRDATE  DC    F'0'                     HEADER DATE
E15DCB   DCB   DSORG=PS,MACRF=PM,DDNAME=SORDATA
E15DCBA  DCB   DSORG=PS,MACRF=PM,DDNAME=HDRDATA
DCBFORM  DCBD  DSORG=PS
RECDFORM DSECT                          RECORD
RLNGTH   DS    F                        LENGTH
RCONT    DS    C                        CONT
RECDID   DS    C                        ID
RSTPTIME DS    CL4                      STEP TIME
RSTPDATE DS    CL4                      STEP DATE
RCPUID   DS    CL4                      CPU ID
         DS    CL32                     SPACING
RJOBNAME DS    CL8                      JOB NAME
RSTRTIME DS    CL4                      START TIME
RSTRTDAT DS    CL4                      START DATE
RSTPNUM  DS    C                        STEP NUMBER
         END
./ ADD LIST=ALL,NAME=E35
R01      EQU   1                   PARAMETER REGISTER
ONE      EQU   1
R02      EQU   2                   WORK REGISTER
III      EQU   X'03'
IV       EQU   4
V        EQU   5
VIII     EQU   8
R08      EQU   8                   SOR ADDRESS REGISTER
R10      EQU   10                  WORKING REGISTER FOR SORT RECD ADDR
R11      EQU   11                  PARAMETER LIST ADDRESS REGISTER
R12      EQU   12                  BASE REGISTER
R13      EQU   13                  SAVE AREA ADDRESS REGISTER
R15      EQU   15                  ENTRY POINT REGISTER
XXIV     EQU   24
INSERT   EQU   X'01'
JTERM    EQU   X'05'
ONCE     EQU   X'20'               1ST SOR PROCESS SWITCH
CLOSONCE EQU   X'24'               SWITCH MASKS/HDRS DONE & 1ST SOR
ONCEOVER EQU   X'DF'
INSOFF   EQU   X'FE'
CLOSED   EQU   X'02'               FINAL END OF DS ACTIVITY
CLOSEA   EQU   X'04'               HDR/TRL PROCESSING FINISHED
OPENA    EQU   X'08'               HDR/TRL HAS BEEN OPENED
PASS2    EQU   X'10'               HDR/TRL CLOSED ONCE BEFORE
E35      CSECT
*D 068000-080500                                               @YM00553
*A 026000,067500                                               @YM00553
*A 050000,059500,066000-067500                                   A35184
         USING *,R12               ESTABLISH ADDRESSABILTY
         SAVE  (14,12)             SAVE CALLER'S REGS
         LR    R12,R15             LOAD BASE ADDRESS
         ST    R13,SAVDS+IV        CHAIN SORT SAVEAREA TO E35
         LR    R02,R13             RETAIN ADDRESS OF SORT'S AREA
         LA    R13,SAVDS           ADDRESS OF E35 SAVE AREA
         ST    R13,VIII(R02)       CHAIN E35 SAVEAREA TO SORT
         LR    R11,R01             RETAIN PARAMETER LIST ADDRESS
         LA    R02,IV              CREATE NO SEQ CHECK BIT
         ST    R02,VIII(R11)       PLACE IN SORT PARM LIST
         TM    BITS,CLOSEA         IS HDR SET CLOSED
         BO    E35PROC             YES,BYPASS HDR INSERTIONS
         TM    BITS,OPENA          IS HDR SET OPEN
         BO    E35XCPTA            YES,BYPASS OPENING
         OPEN  E35DCBA             NO,OPEN FOR FIRST SCAN
         OI    BITS,OPENA          TURN ON OPEN INDICATOR
E35XCPTA GET   E35DCBA,HTBUFF      GET A HDR/TLR RECORD          A35184
         CLC   V(ONE,R01),ID       IS THIS THE RIGHT TYPE
         BNE   E35XCPTA            NO,GET NEXT RECORD
         B     E35INRTN            YES,GO TO INSERT RETURN
E35EODID CLOSE E35DCBA             CLOSE HDR/TLR SET
         TM    BITS,PASS2          HAS SET BEEN CLOSED ONCE
         BO    E35XCPTB            SET END OF PHASE BIT AND GO ON
         MVI   ID,III              NO,CHANGE ID BEING SCANNED FOR
         OPEN  E35DCBA             OPEN HDR/TLR SET SECOND TIME
         OI    BITS,PASS2          INDICATE HDR/TLR SET CLOSED ONCE
         B     E35XCPTA            GO PERFORM SCAN
E35XCPTB OI    BITS,CLOSONCE       SET SWITCHES TO INDICATE HDR SET
*                                  SET CLOSED AND FIRST TIME FOR
*                                  SOR PROCESSING
         B     E35PROC             YES,GO PROCESS REST OF SOR'S
E35PROC  L     R08,SORSAV          LOAD ADDRESS OF CURRENT SOR
         LTR   R08,R08             IS IT ZERO
         BNE   E35PRCS             NO,DATA SET IS OPEN
         OPEN  E35DCB              OPEN DATA SET CREATED AT E15 EXIT
E35PRCS  GET   E35DCB,BUFF         GET THE FIRST RECORD          A35184
         ST    R01,SORSAV          SAVE THE ADDRESS OF RECORD
E35INRTN L     R13,SAVDS+IV        ADDRESS OF SORT SAVE AREA
         ST    R01,XXIV(R13)       ADDRESS OF RECD INTO SORT SAVEAREA
         RETURN (14,12),RC=12      RETURN TO SORT W/RC=INSERT
E35EODAD CLOSE E35DCB              CLOSE SOR SET
         OI    BITS,CLOSED         TURN ON CLOSED BIT
E35ENDB  L     R13,SAVDS+IV
         RETURN (14,12),RC=8       DO NOT RETURN
SAVDS    DS    18F                 REGISTER SAVE AREA
SORSAV   DC    F'0'                SOR ADDRESS
BITS     DC    X'00'               INITIALIZE SWITCH
ID       DC    X'02'               INITIALIZE ID
E35DCB   DCB   DSORG=PS,MACRF=GM,DDNAME=SORDATA,EODAD=E35EODAD   A35184
E35DCBA  DCB   DSORG=PS,MACRF=GM,DDNAME=HDRDATA,EODAD=E35EODID   A35184
HTBUFF   DS    CL18                BUFFER FOR HDR/TLR RECORDS    A35184
BUFF     DS    CL708
         END
./ ADD LIST=ALL,NAME=SMFCOLL
         PRINT ON,NOGEN
         TITLE 'MIKES SUPER DOOPER ACCOUNTING SYSTEM----DATABASE BUILD'
SMFCOLL  CSECT
         REGS
         IEZBITS
         STM   14,12,12(13)
         BALR  R12,0
         USING *,R12
         B     OVERDCB
DCBIN    DCB   DDNAME=SMFIN,BFTEK=A,EODAD=EOJ,RECFM=VBS,MACRF=(GL),    X
               DSORG=PS,LRECL=31000,BLKSIZE=32000
DCBOUT   DCB   DDNAME=SMFOUT,DSORG=PS,MACRF=(PM),LRECL=130,RECFM=FB
* THIS PROGRAM READS THE TYPE 70 RECORDS WHICH HAVE BEEN INSERTED
* IN THE FRONT OF THE INPUT DATA SET AND BUILDS A SYSTEM CPU RECORDS
* FROM THESE.
* IT THEN READS THE TYPE 20,4,40,AND 34 RECORDS AND BUILDS UP THE
* OUTPUT DATA SET
OVERDCB  OPEN  (DCBIN,,DCBOUT,(OUTPUT))
         USING SMF4LEN,R9               SET RECORD TYPE 4
         USING TIVRLEN,R8              SET TO TYPE 34
         USING SMF70LEN,R6             FOR THE TYPE 6 RECORDS
         MVI   WORKAREA,X'00'
         MVC   WORKAREA+1(129),WORKAREA CLEAR WORK AREA TO BIN ZEROS
GETREC   GET   DCBIN
*/******************************************************************/
*/* NOTE : INPUT DATA SET SHOULD CONTAIN TYPE 70 RECORDS           */
*/*        FOLLOWED BY RECORDS IN THIS SEQUENCE FOR EACH           */
*/*        JOB/TSO USER.                                           */
*/*                                                                */
*/*        TYPE 20                                                 */
*/*        TYPE 40   (IF PRESENT) NOTE CAN BE MORE THAN 1          */
*/*                  PER JOB/JOB STEP /TSO USER                    */
*/*        TYPE 4/34                                               */
*/*                                                                */
*/*                                                                */
*/******************************************************************/
         LR    R8,R1
         LR    R9,R1
         LR    R6,R1
         LA    R4,WORKAREA
         USING OUTREC,R4
         CLI   5(R9),X'46'             /* TYPE 70 RMF RECORD    */
         BE    CPUSECT
         CLI   5(R9),X'28'             /* TYPE 40 DYN ALLOC     */
         BE    DYNAMIC
         CLI   5(R9),X'22'             /* TYPE 34 TSO           */
         BE    TSOSECT
         CLI   5(R9),X'14'             /* TYPE 20 JOB/TSU INIT  */
         BE    JOBINIT
         CLI   5(R9),X'04'             /* TYPE 04 STEP END      */
         BNE   GETREC
         MVC   RECTYPE,SMF4RTY          /* CAPTURE RECTYPE */
         MVC   SMFDATE,SMF4DTE
         MVC   SMFTIME,SMF4TME
         MVC   SYSID,SMF4SID
         MVC   JOBNAME,SMF4JBN          MOVE IN JOBNAME
         MVC   RDRDATE,SMF4RSD
         MVC   RDRTIME,SMF4RST
         MVC   BEGDATE,SMF4STID
         MVC   BEGTIME,SMF4SIT
         MVC   ABENDCC,SMF4SCC
         TM    SMF4STI,BIT7
         BNO   NOFLUSH
         MVI   FLUSHED,X'01'            SET FLUSHED INDICATOR
         B     PGM
NOFLUSH  MVI   FLUSHED,X'00'            NOT FLUSHED
PGM      MVC   PGMNAME,SMF4PGMN         MOVE PROGRAM NAME
         MVC   STEPNAME,SMF4STMN        MOVE IN STEP NAME
         CLI   STEPNAME,X'00'           AVOID S0C7 IN PRINT PROG
         BNE   GOOD
         MVC   STEPNAME,BLANKS
GOOD     XC    RGNALLOC,RGNALLOC
         LH    R1,SMF4SYST              LSQA + SWA SIZE USED
         AH    R1,SMF4H0ST              ADD USER SIZE USED
         STH   R1,RGNALLOC              SAVE IT
         XC    SRBTIME,SRBTIME
         XC    TCBTIME,TCBTIME
         MVC   SRBTIME+1(3),SMF4SRBT    SRB TIME
         LA    R1,SMF4LENN              DEVICE ENTRIES PORTION
         LH    R2,0(,R1)                GET LENGTH OF DEV ENTRIES
         SRL   R2,3                     DIVIDE BY 8 (COUNT OF ENTRIES)
         LA    R3,2(,R1)                GOT IST DEVICE
         USING SMF4DEVC,R3
LUPE     LTR   R2,R2                    ALL DEVICES DONE
         BNP   DOIT                     YES
         LA    R3,8(,R3)                NEXT ENTRY
         BCT   R2,LUPE
         DROP  R3
DOIT     MVC   TCBTIME+1(3),1(R3)      SHOULD BE THE STEP CPU TIME
*--------------------------------------*
*  TAPE I/O REQUEST COUNT              *
*--------------------------------------*
         LA    R1,SMF4LENN              GET DEVICE ENTRY ADDRESS
         LA    R0,X'80'                 INDICATE TAPE DEVICES
         BAL   R7,EXCPCNT               CALL EXCP COUNT ROUTINE
         ST    R15,TAPEIO               TAPE IO COUNT
         SPACE 2
*--------------------------------------*
*  DISK I/O REQUEST COUNT              *
*--------------------------------------*
         LA    R1,SMF4LENN              GET DEVICE ENTRY ADDRESS
         LA    R0,X'20'                 INDICATE DISK DEVICES
         BAL   R7,EXCPCNT               CALL EXCP COUNT ROUTINE
         ST    R15,DISKIO               DISK IO COUNT
*--------------------------------------*
*  VIO  I/O REQUEST COUNT              *
*--------------------------------------*
         LA    R1,SMF4LENN              GET DEVICE ENTRY ADDRESS
         BAL   R7,VIOEXCP               CALL EXCP COUNT ROUTINE
         ST    R15,VIO                  VIOCOUNT
         MVI   TSOFLAG,X'00'            NOT A TSO USER
         XC    TGETS,TGETS
         XC    TPUTS,TPUTS
         BAL   R10,PUTIT
         B     GETREC
TSOSECT  MVC   RECTYPE,TIVRCDTY        /* CAPTURE RECTYPE */
         MVC   SMFDATE,TIVRCDTE
         MVC   SMFTIME,TIVRCDTS
         MVC   SYSID,TIVCPUID
         MVC   JOBNAME,TIVUIF           MOVE IN JOBNAME
         MVC   RDRDATE,TIVONDTE
         MVC   RDRTIME,TIVONTME
         MVC   BEGDATE,TIVONDTE       FOR TSO LOGON = START DATE
         MVC   BEGTIME,TIVONTME       FOR TSO LOGON = START TIME
         MVC   TGETS,TIVINCT
         MVC   TPUTS,TIVOUTCT
         MVC   ABENDCC,TIVSTAT
         TM    TIVSTI,BIT7
         BNO   NOFLUSH1
         MVI   FLUSHED,X'01'            SET FLUSHED INDICATOR
         B     PGM1
NOFLUSH1 MVI   FLUSHED,X'00'            NOT FLUSHED
PGM1     MVC   PGMNAME,TIVPRGNM         MOVE TMP NAME USED
         MVC   STEPNAME,TIVINVNM        MOVE IN STEP NAME(TSO USER)
         CLI   STEPNAME,X'00'           AVOID S0C7 IN PRINT PROG
         BNE   GOOD1
         MVC   STEPNAME,BLANKS
GOOD1    XC    RGNALLOC,RGNALLOC
         LH    R1,TIVSYST               LSQA + SWA SIZE USED
         AH    R1,TIVMCRE               ADD USER SIZE USED
         STH   R1,RGNALLOC              SAVE IT
         XC    SRBTIME,SRBTIME
         XC    TCBTIME,TCBTIME
         MVC   SRBTIME+1(3),TIVSRBT     SRB TIME
         LA    R1,TIVVAR                DEVICE ENTRIES PORTION
         LH    R2,0(,R1)                GET LENGTH OF DEV ENTRIES
         SRL   R2,3                     DIVIDE BY 8 (COUNT OF ENTRIES)
         LA    R3,2(,R1)                GOT IST DEVICE
         USING SMF4DEVC,R3    SAME AS TYPE 4 THEREFOR LETS USE
LUPE1    LTR   R2,R2                    ALL DEVICES DONE
         BNP   DOIT1                    YES
         LA    R3,8(,R3)                NEXT ENTRY
         BCT   R2,LUPE1
         DROP  R3
DOIT1    MVC   TCBTIME+1(3),1(R3)      SHOULD BE THE STEP CPU TIME
*--------------------------------------*
*  TAPE I/O REQUEST COUNT              *
*--------------------------------------*
         LA    R1,TIVVAR                GET DEVICE ENTRY ADDRESS
         LA    R0,X'80'                 INDICATE TAPE DEVICES
         BAL   R7,EXCPCNT               CALL EXCP COUNT ROUTINE
         ST    R15,TAPEIO               TAPE IO COUNT
         SPACE 2
*--------------------------------------*
*  DISK I/O REQUEST COUNT              *
*--------------------------------------*
         LA    R1,TIVVAR                GET DEVICE ENTRY ADDRESS
         LA    R0,X'20'                 INDICATE DISK DEVICES
         BAL   R7,EXCPCNT               CALL EXCP COUNT ROUTINE
         ST    R15,DISKIO               DISK IO COUNT
*--------------------------------------*
*  VIO  I/O REQUEST COUNT              *
*--------------------------------------*
         LA    R1,TIVVAR                GET DEVICE ENTRY ADDRESS
         BAL   R7,VIOEXCP               CALL EXCP COUNT ROUTINE
         ST    R15,VIO                  VIOCOUNT
         MVI   TSOFLAG,X'01'            NOT TSO USER
         BAL   R10,PUTIT
         B     GETREC
         SPACE 2
PUTIT    PUT   DCBOUT,WORKAREA
         MVI   WORKAREA,X'00'
         MVC   WORKAREA+1(129),WORKAREA
         BR    R10
JOBINIT  EQU   *
         MVC   PGMRNAME(20),44(9)       MOVE PROGRAMMER NAME
         B     GETREC
CPUSECT  MVC   RECTYPE,SMF70RTY
         MVC   SMFDATE,SMF70DTE
         MVC   SMFTIME,SMF70TME
         MVC   SYSID,SMF70SID
         LA    R3,SMF70LEN            GET START OF RECORD
         A     R3,SMF70PRS            START OF PRODUCT SECTION
         USING SMF70MFV,R3
         MVC   BEGDATE,SMF70DAT       DATE OF INTERVAL START
         MVC   BEGTIME,SMF70IST       TIME OF INTERVAL START
         MVC   RDRDATE,SMF70DAT       SIMULATE ACTUAL JOB LOG
         MVC   RDRTIME,SMF70IST       SIMULATE ACTUAL JOB LOG
         DROP  R3
         LA    R3,SMF70LEN
         A     R3,SMF70CPS            OFFSET TO CPU DATA SECTION
         USING SMF70WAT,R3
         MVC   JOBNAME(8),=C'RMFCOLL '
         MVC   STEPNAME(8),BLANKS
         MVC   PGMNAME(8),BLANKS
         MVC   SRBTIME(8),SMF70WAT    CPU WAIT TIME BIT 51 MICROSEC
         BAL   R10,PUTIT
         B     GETREC
DYNAMIC  EQU   *         /* IGNORE DYNAMIC VIO--RARELY USED */
*--------------------------------------*
*  TAPE I/O REQUEST COUNT              *
*--------------------------------------*
         LA    R1,64(R1)                GET DEVICE ENTRY ADDRESS
         LA    R0,X'80'                 INDICATE TAPE DEVICES
         BAL   R7,EXCPCNT               CALL EXCP COUNT ROUTINE
         A     R15,DYNTAPE              CUMULATIVE WITHIN JOB
         ST    R15,DYNTAPE              TAPE IO COUNT
         SPACE 2
*--------------------------------------*
*  DISK I/O REQUEST COUNT              *
*--------------------------------------*
         LR    R1,R9                    RE-INIT WORK ADDRESS
         LA    R1,64(R1)                GET DEVICE ENTRY ADDRESS
         LA    R0,X'20'                 INDICATE DISK DEVICES
         BAL   R7,EXCPCNT               CALL EXCP COUNT ROUTINE
         A     R15,DYNDISK              CUMULATIVE WITHIN JOB
         ST    R15,DYNDISK              DISK IO COUNT
         B     GETREC
         SPACE 2
**********************************************************************
*  RETURN TO SYSTEM                                                  *
**********************************************************************
EOJ      EQU   *                        EXIT PROLOGUE
         CLOSE (DCBIN,,DCBOUT,)
         LM   14,12,12(13)              RESTORE REGS
         SR   R15,R15                   SET COND CODE = ZERO
         BR   R14
         EJECT
VIOEXCP  EQU   *                        ROUTINE ENTRY
         LH    R2,0(,R1)                GET LENGTH OF DEVICE ENTRIES
         SRL   R2,3                     DIVIDE BY 8(COUNT OF ENTRIES)
         LA    R3,2(,R1)                POINT TO FIRST DEVICE
         USING SMF4DEVC,R3              ADDRESS DEVICE ENTRY IN RECORD
         SLR   R15,R15                  CLEAR COUNT REG
         LTR   R2,R2                    ANY MORE DEVICE ENTRIES?
         BNP   OUTOFIT                  NO - EXIT
VIOLOOP  CLC   SMF4CUAD,=X'7FFF'        IS THIS THE KIND WE WANT?
         BNE   *+8                      NO - DON'T COUNT THESE.
         AL    R15,SMF4EXCP             ADD EXCP COUNT
         LA    R3,8(,R3)                INCREMENT TO NEXT ENTRY
         BCT   R2,VIOLOOP               LOOP THRU ALL ENTRIES
         DROP  R3                       DROP DEVICE ENTRY
OUTOFIT  BR    R7
***********************************************************************
*                                                                     *
*  EXCP COUNT ROUTINE                                                 *
*        INPUT   REG 1 HAS ADDRESS OF SMF RECORD(4/34) DEVICE FIELDS  *
*        OUTPUT  REG15 HAS COUNT OF TOTAL EXCPS                       *
*                                                                     *
***********************************************************************
EXCPCNT  EQU   *                        ROUTINE ENTRY
         LH    R2,0(,R1)                GET LENGTH OF DEVICE ENTRIES
         SRL   R2,3                     DIVIDE BY 8(COUNT OF ENTRIES)
         LA    R3,2(,R1)                POINT TO FIRST DEVICE
         USING SMF4DEVC,R3              ADDRESS DEVICE ENTRY IN RECORD
         SLR   R15,R15                  CLEAR COUNT REG
         LTR   R2,R2                    ANY MORE DEVICE ENTRIES?
         BNP   EXEXIT                   NO - EXIT
EXCPLOOP CLM   R0,B'0001',SMF4DEVC      IS THIS THE KIND WE WANT?
         BNE   *+8                      NO - DON'T COUNT THESE.
         AL    R15,SMF4EXCP             ADD EXCP COUNT
         LA    R3,8(,R3)                INCREMENT TO NEXT ENTRY
         BCT   R2,EXCPLOOP              LOOP THRU ALL ENTRIES
         DROP  R3                       DROP DEVICE ENTRY
EXEXIT   BR    R7                       RETURN TO CALLER
BLANKS   DC    CL8' '
WORKAREA DC    CL129' '
         DSECT
         IFASMFR 4                      STEP TERMINATION RECORD
         DSECT
         IFASMFR 34                     TSO TERMINATION RECORD
         DSECT
         ERBSMF70                       CPU ACTIVITY
OUTREC   DSECT
RECTYPE  DS    CL1
SMFDATE  DS    CL4                           /* DATE STEP ENDED */
SMFTIME  DS    CL4                           /* TIME STEP ENDED */
SYSID    DS    CL4                           /* SMF SYSTEM ID   */
RDRDATE  DS    CL4                           /* DATE JOB IN RDR */
RDRTIME  DS    CL4                           /* TIME JOB IN RDR */
JOBNAME  DS    CL8                           /* JOB NAME        */
BEGDATE  DS    CL4                           /* START DATE      */
BEGTIME  DS    CL4                           /* START TIME      */
ABENDCC  DS    CL2                           /* ABEND CODE      */
FLUSHED  DS    CL1                           /* JOB FLUSHED FLAG*/
PGMNAME  DS    CL8                           /* PROGRAM NAME    */
STEPNAME DS    CL8                           /* STEP NAME       */
SRBTIME  DS    CL4                           /* SRB TIME        */
TCBTIME  DS    CL4                           /* TCB TIME        */
TAPEIO   DS    CL4                           /* TAPE EXCP COUNT */
DISKIO   DS    CL4                           /* DISK EXCP COUNT */
VIO      DS    CL4                           /* VIO EXCP COUNT  */
DYNTAPE  DS    CL4                           /* DYNAMIC TAPE IO */
DYNDISK  DS    CL4                           /* DYNAMIC DISK IO */
TGETS    DS    CL4                           /* TSO TGETS       */
TPUTS    DS    CL4                           /* TSO TPUTS       */
RGNALLOC DS    CL2                           /* REGION USED     */
PGMRNAME DS    CL20                          /* PROGRAMMER NAME */
TSOFLAG  DS    CL1                           /* VIO PAGE OUT    */
SPARE    DS    CL24                          /* FOR EXPANSION   */
         END
./ ADD LIST=ALL,NAME=SMFREP
         TITLE 'JOB AND JOB STEP REPORTING ROUTINE-----PHASE 1 MH'
         PRINT NOGEN
         MACRO
         MOVE  &FIELD1,&FIELD2
         L     R1,&FIELD1
         BAL   R7,PCOUNT
         MVC   LINE+50(4),DWD+4
         MVC   LINE+1(L'&FIELD2),&FIELD2
         BAL   R7,PUTIT
         MEND
         MACRO
         MVE   &A,&B
         L     R1,&A
         SR    R0,R0
         BAL   R7,PCLOCK
         MVC   LINE+50(4),EDWORK
         MVC   LINE+1(L'&B),&B
         BAL   R7,PUTIT
         MEND
*/********************************************************************/
*/*                                                                  */
*/*                                                                  */
*/*  THIS PROGRAM PRODUCES A JOB STEP SUMMARY OF ALL JOBS AND        */
*/*  TSO LOGONS IN THE RELEVAND REPORTING PERIOD.                    */
*/*  ABEND INFORMATION CPU TIME SRB TIME IO INFORMATION AND OTHER    */
*/*  DATA IS REPORTED.                                               */
*/*  AT THE END OF THE PROGRAM STATISTICS ARE GIVEN ABOUT            */
*/*  MACJINE USAGE ETC.                                              */
*/*                                                                  */
*/*                                                                  */
*/*  NOTE : THIS VERSION DOES NOT USE TYPE 30 SO THE CPU RESOURCES   */
*/*         FOR THESE JOBS WILL BE LUMPED TOGETHER WITH THE          */
*/*         OPERATING SYSTEM UNLESS TYPE 4 RECORDS ARE PRODUCED      */
*/*         WITHIN THE REPORTING PERIOD.                             */
*/*                                                                  */
*/*         THE OVERHEAD AND MACHINE UTILISATION DATA IS CALCULATED  */
*/*         FROM THE TIME I GET THE FIRST TYPE 70 RECORD. ANY        */
*/*         JOB STEPS STARTING BEFORE THE FIRST RMF INTERVAL         */
*/*         ARE IGNORED FOR CALCULATING THE OVERHEAD E.G YOU MAY     */
*/*         HAVE IPLED ONCE IN 2 WEEKS BUT YOU DUMP YOUR SMF DATA    */
*/*         DAILY. YOU WILL THEN GET AN LLA SMF RECORD WITH A 2      */
*/*         WEEK OLD DATE ON IT. OBVIOUSLY IF YOU USE THIS TO        */
*/*         CALCULATE THE ELAPSED TIME YOUR CPU RATE WILL BE VERY    */
*/*         HIGH EVEN IF THE WAIT TIME IS 24 HOURS IN THE 24 HR      */
*/*         PERIOD. I DO HOWEVER REPORT ON THE ACTUAL START OF DATA  */
*/*         AND THE START OF RMF COLLECTION.                         */
*/*                                                                  */
*/*                                                                  */
*/*         THIS PROGRAM USES A DATASET CREATED BY PROGRAM SMFCOLL   */
*/*         THE CODE IN THAT PROGRAM EXPLAINS THE LAYOUT OF THE      */
*/*         DATASET AND HOW TO PRODUCE THE REPORT.                   */
*/*                                                                  */
*/********************************************************************/
SMFREP   CSECT
         REGS
         IEZBITS
         STM   R14,R12,12(R13)
         BALR  R12,0
         USING *,R12,R8
DOG      L    R8,OFFSET       2ND BASE REG
         B    OVER
OFFSET   DC   A(DOG+4096)
OVER     L     R4,=A(WORKSTOR)
         USING T1,R4
         B     OVERDCB
DCBIN    DCB   DDNAME=DATABASE,MACRF=(GL),EODAD=EOJ,                   X
               DSORG=PS,LRECL=130,RECFM=FB
DCBOUT   DCB   DDNAME=REPORT,DSORG=PS,MACRF=(PM)
OVERDCB  EQU   *
         L     R3,0(R1)             GET PARM FROM USER (SYSTEM ID)
         CLC   0(2,R3),=X'0000'
         BE    ERROR                DEFAULT SYSID IS DEVT
         MVC   CPUID(4),2(R3)       MOVE PARM
         B     GOTIT
ERROR    WTO   'SMF001-------A 4 BYTE SMF SYSTEM-ID MUST BE SPECIFIED IX
               N THE PARMFIELD -----SMF001'
         B     EXIT
GOTIT    OPEN  (DCBIN,,DCBOUT,(OUTPUT))
         TIME  DEC                /* GET CURRENT DATE FROM SYSTEM */
         ST    R1,TEMPDATE
         BAL   R7,DODATE
         MVC   TDATE(7),WORKDATE        FROM DATE CONVERT ROUTINE
GETREC   GET   DCBIN
DOOCPU   LR    R9,R1
         USING INREC,R9
         CLC   CPUID(4),SYSID   /*  1 CPU AT A TIME PLEASE   */
         BNE   GETREC
         AP    RECTOT,=P'1'
         CLI   RECTYPE,X'46'     /* CPU COUNT                 */
         BNE   GOON#0
         L     R1,SRBTIME       /* 64 BIT CLOCK FIELD FROM SRM*/
*        MH    R1,=H'104'       /* GET TO HUNDRETHS OF SEC    */
*  CONVERT TO SECS LATER :      /* DO CONVERSION AT THE END   */
         A     R1,WAIT          /* BIT 31 APPROX 1.04 SECS    */
         ST    R1,WAIT          /* BIT 51 = I MICROSEC        */
         MVC   WAITEND(8),BEGDATE  /* DATE TIME OF THIS INTERVAL */
         CLI   RMFSW,X'FF'         /* HAVE WE HAD A TYPE 70 YET  */
         BE    GETREC              /* YES                        */
         MVC   WAITBEG(8),BEGDATE  /* GET START DATE/TIME        */
         MVI   RMFSW,X'FF'         /* SET FLAG                   */
         B     GETREC              /* GET ANOTHER RECORD         */
GOON#0   CLI   RECTYPE,X'04'       TYPE 04 OKAY                */
         BE    GOON#0A
         CLI   RECTYPE,X'28'       TYPE 40
         BE    GOON#0A
         CLI   RECTYPE,X'22'       TYPE 34                    */
         BNE   GETREC
GOON#0A  EQU   *
         CLI   RMFSW,X'FF'          /* ANY TYPE 70 RECS YET          */
         BNE   GOON#1               /* SKIP THIS CRUD                */
         CLC   RMFEND(8),SMFDATE    /* GET LATEST DATE/TIME          */
         BNL   GOON#0B              /* SKIP IF A > = B               */
         MVC   RMFEND(8),SMFDATE    /* SAVE LATEST END DATE/TIME     */
GOON#0B  DS    0H
         CLC   RMFSTART(8),BEGDATE  /* GET EARLIEST DATE/TIME        */
         BNH   GOON#1               /* SKIP IF A < = B               *
         MVC   RMFSTART(8),BEGDATE  /* SAVE EARLIEST START DATE/TIME */
GOON#1   EQU   *
         CLC   SYSEND(8),SMFDATE    /* GET LATEST DATE/TIME          */
         BNL   GOON#1A              /* SKIP IF A > = B               */
         MVC   SYSEND(8),SMFDATE    /* SAVE LATEST END DATE/TIME     */
GOON#1A  DS    0H
         CLC   SYSSTART(8),BEGDATE  /* GET EARLIEST DATE/TIME        */
         BNH   GOON#1B              /* SKIP IF A < = B               *
         MVC   SYSSTART(8),BEGDATE  /* SAVE EARLIEST START DATE/TIME */
GOON#1B  DS    0H
*/********************************************************************/
*/*                                                                  */
*/*      THIS SECTION CUMULATES THE TOTAL I/O COUNT FOR              */
*/*      TAPES, DISKS,VIO,DYNAMIC ALLOCATON AND MACHINE TIME         */
*/*                                                                  */
*/********************************************************************/
         L     R1,TAPEIO
         A     R1,TOTTAPE
         ST    R1,TOTTAPE
         L     R1,DISKIO
         A     R1,TOTDISK
         ST    R1,TOTDISK
         L     R1,VIO
         A     R1,TOTVIO
         ST    R1,TOTVIO
         L     R1,DYNTAPE
         A     R1,TOTDYNT
         ST    R1,TOTDYNT
         L     R1,DYNDISK
         A     R1,TOTDYND
         ST    R1,TOTDYND
         L     R1,SRBTIME
         A     R1,TCBTIME
         A     R1,TOTMT
         ST    R1,TOTMT
         CLI   RMFSW,X'FF'
         BNE   GOON#2
         CLC   BEGDATE(8),RMFSTART
         BL    GOON#2
         L     R1,SRBTIME
         A     R1,TCBTIME
         A     R1,RMFTOT
         ST    R1,RMFTOT
GOON#2   CLI   STARTSW,X'00'
         BNE   BYP
         MVI   STARTSW,X'01'
         MVC   SYSTEM(4),SYSID
         MVC   JOBLOG(16),RDRDATE
         MVC   LJOB(8),JOBNAME     /* ONLY WANT JOB NAME ON LINE 1 */
         MVC   LPGMR(20),PGMRNAME  /* SAME FOR PROGRAMMER NAME*/
         MVC   JOBLOG(16),RDRDATE
         MVC   JSTART(8),BEGDATE   /* SAVE START TIME OF JOB  */
         B     SKIPIT
BYP      CLC   JOBLOG(16),RDRDATE  /* NEW JOB OR NOT          */
         BE    KOMPARE             /* YES SO KEEP GOING       */
         BAL   R7,JOBTERM
         MVC   LJOB(8),JOBNAME     /* ONLY WANT JOB NAME ON LINE 1 */
         MVC   LPGMR(20),PGMRNAME  /* SAME FOR PROGRAMMER NAME*/
         MVC   JOBLOG(16),RDRDATE
         MVC   JSTART(8),BEGDATE   /* SAVE START TIME OF JOB  */
SKIPIT   AP    JOBNR,=P'1'
         CLI   RECTYPE,X'22'  /*  IF NOT TSO MUST BE BATCH/STC */
         BNE   BATCHJ
         AP    TSOJOBS,=P'1'  /* ADD TSO JOB                  */
         L     R1,TERMIO
         A     R1,TOTTERM
         ST    R1,TOTTERM
         B     KOMPARE
BATCHJ   AP    BATCHJOB,=P'1' /* ADD BATCH JOB COUNT          */
KOMPARE  EQU   *
         MVC   ENDTIME(4),SMFTIME  /* GET END TIME FOR JOB    */
         MVC   ENDDATE(4),SMFDATE /* GET END DATE FOR JOB     */
*/********************************************************************/
*/*                                                                  */
*/*      THIS SECTION CUMULATES THE TOTAL I/O COUNT FOR A JOB FOR    */
*/*      TAPES, DISKS,VIO,DYNAMIC ALLOCATON AND MACHINE TIME         */
*/*                                                                  */
*/********************************************************************/
         L     R1,TAPEIO
         A     R1,JTAPE
         ST    R1,JTAPE
         L     R1,DISKIO
         A     R1,JDISK
         ST    R1,JDISK
         L     R1,VIO
         A     R1,JVIO
         ST    R1,JVIO
         L     R1,DYNTAPE
         A     R1,JDYNT
         ST    R1,JDYNT
         L     R1,DYNDISK
         A     R1,JDYND
         ST    R1,JDYND
         L     R1,SRBTIME
         A     R1,TCBTIME
         A     R1,JMT
         ST    R1,JMT
         MVC   JEND(8),SMFDATE     /* KEEP STEP TERM TIME AND DATE*/
         CLI   RECTYPE,X'22'       /* TSO USER                */
         BE    GOON#2D
         L     R1,TERMIO
         A     R1,JTERM
         ST    R1,JTERM
GOON#2B  EQU   *
*/********************************************************************/
*/*                                                                  */
*/*      THIS SECTION CUMULATES THE TOTAL I/O COUNT BY BATCH JOBS FOR*/
*/*      TAPES, DISKS,VIO,DYNAMIC ALLOCATON AND MACHINE TIME         */
*/*                                                                  */
*/********************************************************************/
         L     R1,TAPEIO
         A     R1,BATCTAPE
         ST    R1,BATCTAPE
         L     R1,DISKIO
         A     R1,BATCDISK
         ST    R1,BATCDISK
         L     R1,VIO
         A     R1,BATCVIO
         ST    R1,BATCVIO
         L     R1,DYNTAPE
         A     R1,BATCDYNT
         ST    R1,BATCDYNT
         L     R1,DYNDISK
         A     R1,BATCDYND
         ST    R1,BATCDYND
         L     R1,SRBTIME
         A     R1,TCBTIME
         A     R1,BATCMT
         ST    R1,BATCMT
         CLI   RMFSW,X'FF'
         BNE   GOON#2D
         CLC   BEGDATE(8),RMFSTART
         BL    GOON#2D
         L     R1,SRBTIME
         A     R1,TCBTIME
         A     R1,RMFBAT
         ST    R1,RMFBAT
GOON#2D  AP    STEPNR,=P'1'
         CLI   RECTYPE,X'04'       /* CHECK FOR TSO           */
         BE    GOON#3
*/********************************************************************/
*/*                                                                  */
*/*      THIS SECTION CUMULATES THE TOTAL I/O COUNT BY TSO USERS FOR */
*/*      TAPES, DISKS,VIO,DYNAMIC ALLOCATON AND MACHINE TIME         */
*/*                                                                  */
*/********************************************************************/
         L     R1,TAPEIO
         A     R1,TSOTAPE
         ST    R1,TSOTAPE
         L     R1,DISKIO
         A     R1,TSODISK
         ST    R1,TSODISK
         L     R1,VIO
         A     R1,TSOVIO
         ST    R1,TSOVIO
         L     R1,DYNTAPE
         A     R1,TSODYNT
         ST    R1,TSODYNT
         L     R1,DYNDISK
         A     R1,TSODYND
         ST    R1,TSODYND
         L     R1,SRBTIME
         A     R1,TCBTIME
         A     R1,TSOMT
         ST    R1,TSOMT
         CLI   RMFSW,X'FF'
         BNE   NOTRMF
         CLC   BEGDATE(8),RMFSTART
         BL    NOTRMF
         L     R1,SRBTIME
         A     R1,TCBTIME
         A     R1,RMFTSO
         ST    R1,RMFTSO
NOTRMF   L     R1,TSOIO
         A     R1,JTSO
         ST    R1,JTSO
         L     R1,TSOIO
         A     R1,TOTTSO
         ST    R1,TOTTSO
         MVI   LTSO,C'*'           /* INDICATE TSO JOB        */
*/********************************************************************/
*/*                                                                  */
*/*            TGET/TPUT TERMINAL I/O FOR TSO USERS                  */
*/*                                                                  */
*/********************************************************************/
         L     R1,TSOIO                 TPUTS
         BAL   R7,PCOUNT                CALL CONVERT ROUTINE
         MVC   LTERM(4),DWD+4           MOVE TERMINAL I/O   TO LINE
GOON#3   MVC   LSTEP(8),STEPNAME
         MVC   LPGRM(8),PGMNAME
         CLI   RECTYPE,X'22'
         BE    GOON#4                  IF TSO WE WANT TERM IO COUNT
*/********************************************************************/
*/*                                                                  */
*/*            TERMINAL I/O COUNT --  NON TSO JOBS  E.G CICS         */
*/*                                                                  */
*/********************************************************************/
         L     R1,TERMIO                TERMINAL I/O
         BAL   R7,PCOUNT                CALL CONVERT ROUTINE
         MVC   LTERM(4),DWD+4           MOVE TERMINAL I/O   TO LINE
         MVI   LTSO,C' '
*/********************************************************************/
*/*                                                                  */
*/*            ABEND OR RETURN CODE ANALYSIS                         */
*/*                                                                  */
*/********************************************************************/
GOON#4   SLR   R0,R0
         ICM   R0,3,ABENDCC             GET COND CODE
         BAL   R7,PRETCDE               CALL RETURN CODE ROUTINE
         SPACE 2
*/********************************************************************/
*/*                                                                  */
*/*            TAPE I/O REQUEST COUNT                                */
*/*                                                                  */
*/********************************************************************/
         L     R1,TAPEIO                TAPE IO COUNT
         BAL   R7,PCOUNT                CALL CONVERT ROUTINE
         MVC   LTAPE(4),DWD+4           MOVE TAPE I/O COUNT TO LINE
         SPACE 2
*/********************************************************************/
*/*                                                                  */
*/*            DISK I/O REQUEST COUNT                                */
*/*                                                                  */
*/********************************************************************/
         L     R1,DISKIO                GET DISK IO COUNT
         BAL   R7,PCOUNT                CALL CONVERT ROUTINE
         MVC   LDISK(4),DWD+4           MOVE DISK I/O COUNT TO LINE
         SPACE 2
*/********************************************************************/
*/*                                                                  */
*/*            VIO REQUEST COUNT                                     */
*/*                                                                  */
*/********************************************************************/
         L     R1,VIO                   GET VIO COUNT
         BAL   R7,PCOUNT                CALL CONVERT ROUTINE
         MVC   LVIO(4),DWD+4            MOVE VIO  I/O COUNT TO LINE
         SPACE 2
*/********************************************************************/
*/*                                                                  */
*/*            DYNAMIC ALLOCATION--DISK                              */
*/*                                                                  */
*/********************************************************************/
         L     R1,DYNDISK               GET DYNAMIC ALLOCATION COUNT
         BAL   R7,PCOUNT                CALL CONVERT ROUTINE
         MVC   LDYND(4),DWD+4           MOVE VIO  I/O COUNT TO LINE
         SPACE 2
*/********************************************************************/
*/*                                                                  */
*/*  DYNAMIC ALLOCATION--TAPE (YES YOU CAN VIA A BATCH JOB!!!)       */
*/*                                                                  */
*/********************************************************************/
         L     R1,DYNTAPE               GET DYNAMIC ALLOCATION COUNT
         BAL   R7,PCOUNT                CALL CONVERT ROUTINE
         MVC   LDYNT(4),DWD+4           MOVE VIO  I/O COUNT TO LINE
         SPACE 2
*/********************************************************************/
*/*                                                                  */
*/*            CPU + SRB TIME ("MACHINE TIME")                       */
*/*                                                                  */
*/********************************************************************/
         L     R1,TCBTIME               STEP TCB TIME
         A     R1,SRBTIME               ADD SRB TIME
         SR    R0,R0                    CLEAR REG 0 FOR CONVERT ROUTINE
         BAL   R7,PCLOCK                CONVERT FOR OUTPUT
         MVC   LCPU(4),EDWORK           MOVE NNNX TO OUTPUT LINE
         SPACE 2
*/********************************************************************/
*/*                                                                  */
*/*            ELAPSED TIME                                          */
*/*                                                                  */
*/********************************************************************/
DO$ET    XC    DUBBEL,DUBBEL
         MVC   DUBBEL+6(2),BEGDATE+2 START DATE OF JOB
         CVB   R0,DUBBEL             NOW HAVE BINARY DDD IN R0
         XC    DUBBEL,DUBBEL
         MVC   DUBBEL+6(2),SMFDATE+2    END OF DATA COLLECTION
         CVB   R1,DUBBEL             ENDING BINARY DDDD IN R1
         SR    R1,R0
         BNL   NOTYR1                   SKIP THIS GARBAGE
         A     R1,=F'365'               COMPENSATE FOR YEAR CHANGE
NOTYR1   MH    R1,=H'24'                GET TO HOURS
         MH    R1,=H'60'                GET TO MINS
         MH    R1,=H'60'                GET TO SECS
         MH    R1,=H'100'               GET TU HUNDREDTHS
         L     R0,SMFTIME               END TIME
         AR    R1,R0                    NR OF 24 HR PERIODS
         L     R0,BEGTIME               START TIME
         SR    R1,R0                    GET TIME DIFFERENCE
         BNL   *+8                      IF DIFFERENCE >= 0 THEN OK
         A     R1,=A(24*60*60*100)      ELSE ADD 24 HOURS TO TIME
         SR    R0,R0                    FOR SUBROUTINE
         BAL   R7,PCLOCK                CONVERT IT
         MVC   LCLOCK(4),EDWORK         MOVE NNNX TO OUTPUT LINE
         SPACE 2
*/********************************************************************/
*/*                                                                  */
*/*            REGION USED                                           */
*/*                                                                  */
*/********************************************************************/
         LH    R1,RGNALLOC              GET LSQA + SWA SIZE USED
         BAL   R7,CORE                  CONVERT PRIVATE AREA SIZE
         MVC   LREGN(5),EDWORK+2        MOVE IN NNNNK
         CLI   LREGN,C' '               IS IT JUST NNNK?
         BNE   *+10                     NO - SKIP
         MVC   LREGN(5),LREGN+1         YES - SHIFT IT OVER
         CLI   LREGN,C' '               IS IT JUST NNK?
         BNE   *+10                     NO - SKIP
         MVC   LREGN(5),LREGN+1         YES - SHIFT IT OVER
*/********************************************************************/
*/*                                                                  */
*/*            START TIME                                            */
*/*                                                                  */
*/********************************************************************/
         L     R1,BEGTIME               LOAD JOB START TIME
         BAL   R7,HHMMSS                CONVERT TO HH:MM:SS.TH
         MVC   LSTART(8),EDWORK         MOVE IN JUST HH:MM:SS
*/********************************************************************/
*/*                                                                  */
*/*            STOP  TIME                                            */
*/*                                                                  */
*/********************************************************************/
         L     R1,SMFTIME               LOAD STOP TIME
         BAL   R7,HHMMSS                CONVERT TO HH:MM:SS.TH
         MVC   LSTOP(8),EDWORK          MOVE IN JUST HH:MM:SS
*/********************************************************************/
*/*                                                                  */
*/*            DATE                                                  */
*/*                                                                  */
*/********************************************************************/
         MVC   TEMPDATE(4),BEGDATE      /* DATE JOB/STEP BEGAN  */
         BAL   R7,DODATE
         MVC   LDATE(7),WORKDATE        FROM DATE CONVERT ROUTINE
*/********************************************************************/
*/*                                                                  */
*/*            PRINT OUT DETAIL LINE                                 */
*/*                                                                  */
*/********************************************************************/
         BAL   R7,PUTIT                 CHUCK IT OUT TO PRINT
         B     GETREC                   GET ANOTHER RECORD
*/********************************************************************/
*/*                                                                  */
*/*            THIS SECTION HANDLES TOTALS FOR A MULTI-STEP JOB      */
*/*                                                                  */
*/********************************************************************/
JOBTERM  ST    R7,SAVER7       /* AVOID INFINITE LOOP      */
         CP    STEPNR,=P'2'    /* IF NOT MULTI-STEP RETURN */
         BL    EXITJT
         CLI   RECTYPE,X'22'            TSO
         BE    RECTSO
         L     R1,JTERM                 GET TERMINAL I/O
         BAL   R7,PCOUNT                CALL CONVERT ROUTINE
         MVC   LTERM(4),DWD+4           MOVE TERMINAL I/O   TO LINE
         B     DOTAPES
RECTSO   L     R1,JTSO                  GET TERMINAL I/O
         BAL   R7,PCOUNT                CALL CONVERT ROUTINE
         MVC   LTERM(4),DWD+4           MOVE TERMINAL I/O   TO LINE
         SPACE 2
DOTAPES  L     R1,JTAPE                 TAPE IO COUNT
         BAL   R7,PCOUNT                CALL CONVERT ROUTINE
         MVC   LTAPE(4),DWD+4           MOVE TAPE I/O COUNT TO LINE
         SPACE 2
         L     R1,JDISK                 GET DISK IO COUNT
         BAL   R7,PCOUNT                CALL CONVERT ROUTINE
         MVC   LDISK(4),DWD+4           MOVE DISK I/O COUNT TO LINE
         SPACE 2
         L     R1,JVIO                  GET VIO COUNT
         BAL   R7,PCOUNT                CALL CONVERT ROUTINE
         MVC   LVIO(4),DWD+4            MOVE VIO  I/O COUNT TO LINE
         SPACE 2
         L     R1,JDYND                 GET DYNAMIC ALLOCATION COUNT
         BAL   R7,PCOUNT                CALL CONVERT ROUTINE
         MVC   LDYND(4),DWD+4           MOVE VIO  I/O COUNT TO LINE
         SPACE 2
         L     R1,JDYNT                 GET DYNAMIC ALLOCATION COUNT
         BAL   R7,PCOUNT                CALL CONVERT ROUTINE
         MVC   LDYNT(4),DWD+4           MOVE VIO  I/O COUNT TO LINE
         SPACE 2
         L     R1,JMT                   STEP TCB TIME
         SR    R0,R0                    CLEAR REG 0 FOR CONVERT ROUTINE
         BAL   R7,PCLOCK                CONVERT FOR OUTPUT
         MVC   LCPU(4),EDWORK           MOVE NNNX TO OUTPUT LINE
         XC    DUBBEL,DUBBEL
         MVC   DUBBEL+6(2),JSTART+2  START DATE OF JOB
         CVB   R0,DUBBEL             NOW HAVE BINARY DDD IN R0
         XC    DUBBEL,DUBBEL
         MVC   DUBBEL+6(2),JEND+2       END OF DATA COLLECTION
         CVB   R1,DUBBEL             ENDING BINARY DDDD IN R1
         SR    R1,R0
         BNL   NOTYR                    SKIP THIS GARBAGE
         A     R1,=F'365'               COMPENSATE FOR YEAR CHANGE
NOTYR    MH    R1,=H'24'                GET TO HOURS
         MH    R1,=H'60'                GET TO MINS
         MH    R1,=H'60'                GET TO SECS
         MH    R1,=H'100'               GET TU HUNDREDTHS
         L     R0,JEND+4                END TIME
         AR    R1,R0                    NR OF 24 HR PERIODS
         L     R0,JSTART+4              START TIME
         SR    R1,R0                    GET TIME DIFFERENCE
         BNL   *+8                      IF DIFFERENCE >= 0 THEN OK
         A     R1,=A(24*60*60*100)      ELSE ADD 24 HOURS TO TIME
         SR    R0,R0                    LOAD STEP INIT TIME
         BAL   R7,PCLOCK                CONVERT IT
         MVC   LCLOCK(4),EDWORK         MOVE NNNX TO OUTPUT LINE
         BAL   R7,PUTIT
         SPACE 2
EXITJT   MVC   LINE,BLANKS              WANT A BLANK LINE REGARDLESS
         BAL   R7,PUTIT
         XC    JDISK,JDISK
         XC    JTAPE,JTAPE
         XC    JVIO,JVIO
         XC    JDYND,JDYND
         XC    JDYNT,JDYNT
         XC    JTERM,JTERM
         XC    JTSO,JTSO
         XC    JEND,JEND
         XC    JMT,JMT
         ZAP   STEPNR,=P'0'    /*  RESET STEP COUNT       */
         L     R7,SAVER7
         BR    R7
*/********************************************************************/
*/*                                                                  */
*/*   THIS SUBROUTINE CONVERTS 00YYDDDF INTO A "REAL"                */
*/*   HUMAN DATE DDMMMYY                                             */
*/*                                                                  */
*/********************************************************************/
DODATE   XC    DWD,DWD                  CLEAR WORK AREA
         ST    R7,SAVER7                SAVE RETURN ADDRESS
         MVC   DWD+6(2),TEMPDATE+2      GET DAY OF YEAR
         CVB   R1,DWD                   GET IT IN BINARY
         CH    R1,=H'60'                BEFORE FEB 29?
         BL    NOT$LEAP                 YES - LEAP YEAR DOESN'T MATTER
         TM    TEMPDATE+1,X'01'         ODD YEAR?
         BO    NOT$LEAP                 YES - NOT LEAP YEAR
         TM    TEMPDATE+1,X'12'         ODD DECADE & 2 OR 6 YEAR?
         BM    NOT$LEAP                 ODD DECADES MUST HAVE 2 BIT
         BCTR  R1,0                     *** FUDGE FOR LEAP YEAR ***
NOT$LEAP CH    R1,=H'365'               ANY GOOD?
         BH    SKIPDATE                 NO - BYPASS THIS SECTION
         LA    R15,=C'JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'
         LA    R7,=H'31,28,31,30,31,30,31,31,30,31,30,31'
MONTH$LP SH    R1,0(,R7)               IS IT THIS MONTH?
         BNP   MONTH$GO                 YES
         LA    R7,2(,R7)                -> NEXT FACTOR
         LA    R15,3(,R15)              -> NEXT MONTH NAME
         B     MONTH$LP                 LOOP
MONTH$GO AH    R1,0(,R7)                REPAIR THE DAY OF MONTH
         CVD   R1,DWD                   MAKE IT PACKED DECIMAL
         OI    DWD+7,X'0F'              REMOVE SIGN
         MVC   WORKDATE+2(3),0(R15)     MOVE IN NAME OF MONTH
         UNPK  WORKDATE(2),DWD+6(2)     GET DAY OF MONTH
         MVC   TEMP,=X'40202021202020'
         ED    TEMP(7),TEMPDATE
         MVC   WORKDATE+5(2),TEMP+3     GET YEAR
SKIPDATE L     R7,SAVER7
         BR    R7
*/********************************************************************/
*/*                                                                  */
*/*   PRINT OUT STATISTICS                                           */
*/*                                                                  */
*/********************************************************************/
EOJ      CP    RECTOT,=P'0'
         BH    YES
         WTO   'SMF001-------NO RECORDS WERE FOUND IN ANY INPUT DATASETX
                FOR SUPPLIED SYSID-------SMF001'
         B     EXIT
YES      BAL   R7,JOBTERM           /* CHECK FOR FINAL TOTAL LINE*/
         ZAP   LINENR,=P'1'
         MVI   LINE,X'F1'          /* FORCE NEW PAGE */
         MVC   LINE+1(12),T1
         BAL   R7,PUTIT
         MVC   LINE+1(L'T2),T2
         BAL   R7,PUTIT
         MVC   TEMPDATE(4),SYSSTART
         BAL   R7,DODATE
         MVC   T2A+34(7),WORKDATE
         L     R1,SYSSTART+4
         BAL   R7,HHMMSS
         MVC   T2A+45(8),EDWORK
         MVC   LINE+1(L'T2A),T2A
         BAL   R7,PUTIT
         MVC   TEMPDATE(4),SYSEND
         BAL   R7,DODATE
         MVC   T2B+34(7),WORKDATE
         L     R1,SYSEND+4
         BAL   R7,HHMMSS
         MVC   T2B+45(8),EDWORK
         MVC   LINE+1(L'T2B),T2B
         BAL   R7,PUTIT
         MVC   TEMPDATE(4),WAITBEG
         BAL   R7,DODATE
         MVC   T2C+34(7),WORKDATE
         MVC   TEMP4,=X'402120207A20207A2020'
         ED    TEMP4(10),WAITBEG+4
         MVC   T2C+45(8),TEMP4+2
         MVC   LINE+1(L'T2C),T2C
         BAL   R7,PUTIT
         MVC   TEMPDATE(4),WAITEND
         BAL   R7,DODATE
         MVC   T2D+34(7),WORKDATE
         MVC   TEMP4,=X'402120207A20207A2020'
         ED    TEMP4(10),WAITEND+4
         MVC   T2D+45(8),TEMP4+2
         MVC   LINE+1(L'T2D),T2D
         BAL   R7,PUTIT
         MVC   TEMP2,=X'402020202120'
         ED    TEMP2,JOBNR
         MVC   T32(5),TEMP2+1
         MVC   LINE+49(5),T32
         MVC   LINE+1(L'T3),T3
         BAL   R7,PUTIT
         MVC   TEMP2,=X'402020202120'
         ED    TEMP2,TSOJOBS
         MVC   T32(5),TEMP2+1
         MVC   LINE+49(5),T32
         MVC   LINE+1(L'T4),T4
         BAL   R7,PUTIT
         MVC   TEMP2,=X'402020202120'
         ED    TEMP2,BATCHJOB
         MVC   T32(5),TEMP2+1
         MVC   LINE+49(5),T32
         MVC   LINE+1(L'T5),T5
         BAL   R7,PUTIT
         MVI   LINE,X'F0'        DUBBLE SPACE
         MOVE  TOTDISK,T6
         MOVE  TOTDYND,T7
         MOVE  TOTTAPE,T8
         MOVE  TOTVIO,T9
         MOVE  TOTTERM,T10
         MVI   LINE,X'F0'        DUBBLE SPACE
         MOVE  BATCDISK,T11
         MOVE  BATCDYND,T12
         MOVE  BATCTAPE,T13
         MVI   LINE,X'F0'        DUBBLE SPACE
         MOVE  TSODISK,T14
         MOVE  TSODYND,T15
         MOVE  TOTTSO,T16
         MVI   LINE,X'F0'        DUBBLE SPACE
         MVE   TOTMT,T18
         MVE   TSOMT,T19
         MVE   BATCMT,T20
*/********************************************************************/
*/*                                                                  */
*/*   THIS SECTION GETS THE ELAPSED TIME AND WAIT TIME               */
*/*                                                                  */
*/********************************************************************/
         XC    DUBBEL,DUBBEL
         MVC   DUBBEL+6(2),SYSSTART+2 START OF DATA COLLECTION
         CVB   R0,DUBBEL             NOW HAVE BINARY DDD IN R0
         XC    DUBBEL,DUBBEL
         MVC   DUBBEL+6(2),SYSEND+2     END OF DATA COLLECTION
         CVB   R1,DUBBEL             ENDING BINARY DDDD IN R1
         SR    R1,R0
         BNL   SKIPGARB                 SKIP THIS GARBAGE
         A     R1,=F'365'               COMPENSATE FOR YEAR CHANGE
SKIPGARB DS    0H
         MH    R1,=H'24'                GET TO HOURS
         MH    R1,=H'60'                GET TO MINS
         MH    R1,=H'60'                GET TO SECS
         MH    R1,=H'100'               GET TU HUNDREDTHS
         L     R0,SYSEND+4              END TIME
         AR    R1,R0                    NR OF 24 HR PERIODS
         L     R0,SYSSTART+4            START TIME
         SR    R1,R0                    GET TIME DIFFERENCE
         BNL   *+8                      IF DIFFERENCE >= 0 THEN OK
         A     R1,=A(24*60*60*100)      ELSE ADD 24 HOURS TO TIME
         ST    R1,ELAPSED               TRUE ELAPSED TIME
         MVE   ELAPSED,T21
         MVI   LINE,X'F0'        DUBBLE SPACE
         MVC   LINE+1(L'T21A),T21A
         BAL   R7,PUTIT
         MVC   LINE+1(L'T21B),T21B
         BAL   R7,PUTIT
         CLI   RMFSW,X'FF'
         BE    DOIT
         MVI   LINE,X'F0'        DUBBLE SPACE
         MVC   LINE+1(L'T25A),T25A      NO RMF DATA
         BAL   R7,PUTIT
         B     QUIT                     LEAVE
DOIT     MVC   LINE+56(3),T27
         MVE   RMFTOT,T21C
         MVE   RMFTSO,T21D
         MVE   RMFBAT,T21E
         MVC   LINE+56(3),T26               TOT TIME MEASURED RMF
         XC    DUBBEL,DUBBEL
         MVC   DUBBEL+6(2),RMFSTART+2 START OF DATA COLLECTION
         CVB   R0,DUBBEL             NOW HAVE BINARY DDD IN R0
         XC    DUBBEL,DUBBEL
         MVC   DUBBEL+6(2),RMFEND+2     END OF DATA COLLECTION
         CVB   R1,DUBBEL             ENDING BINARY DDDD IN R1
         SR    R1,R0
         BNL   SKIPS                    SKIP THIS GARBAGE
         A     R1,=F'365'               COMPENSATE FOR YEAR CHANGE
SKIPS    MH    R1,=H'24'                GET TO HOURS
         MH    R1,=H'60'                GET TO MINS
         MH    R1,=H'60'                GET TO SECS
         MH    R1,=H'100'               GET TU HUNDREDTHS
         L     R0,RMFEND+4              END TIME
         AR    R1,R0                    NR OF 24 HR PERIODS
         L     R0,RMFSTART+4            START TIME
         SR    R1,R0                    GET TIME DIFFERENCE
         BNL   *+8                      IF DIFFERENCE >= 0 THEN OK
         A     R1,=A(24*60*60*100)      ELSE ADD 24 HOURS TO TIME
         ST    R1,ELAPSED               TRUE ELAPSED TIME
         MVE   ELAPSED,T21F
         MVC   LINE+56(3),T28
         L     R1,WAIT                EACH UNIT = 1.04 SECS (BIT 31)
         MH    R1,=H'104'             GET TO HUNDREDTHS OF A SEC
         ST    R1,WAIT
         MVE   WAIT,T22
         L     R0,WAIT                WAIT TIME
         A     R0,RMFTOT              MACHINE TIME MEASURED
         L     R1,ELAPSED             ELAPSED TIME MEASURED
         SR    R1,R0                  GET OS TIME
         ST    R1,OPSYS               OS TIME
         MVC   LINE+56(L'T29),T29
         MVE   OPSYS,T23             SHOW OPERATING SYSTEM OVERHEAD
         MVI   LINE,X'F0'        DUBBLE SPACE
         MVC   LINE+56(L'T30),T30
         MVC   LINE+1(L'T24),T24
         XR    R0,R0
         L     R1,RMFTOT             MACHINE TIME MEASURED
         A     R1,OPSYS              ADD OPERATING SYSTEM TIME
         MH    R1,=H'100'
         D     R0,ELAPSED            WE WANT XX%
         CVD   R1,DUBBEL             QUOTIENT IN R1
         MVC   TEMP3,=X'402120202020'
         ED    TEMP3(6),DUBBEL+5
         MVC   T32,=C'     '
         MVC   T32+2(2),TEMP3+4
         MVI   T32+4,C'%'
         MVC   LINE+49(5),T32
         BAL   R7,PUTIT
         MVC   LINE+56(L'T31),T31
         MVC   LINE+1(L'T25),T25
         XR    R0,R0
         L     R1,OPSYS              OS TIME
         MH    R1,=H'100'
         D     R0,ELAPSED
         CVD   R1,DUBBEL
         MVC   TEMP3,=X'402120202020'
         ED    TEMP3(6),DUBBEL+5
         MVC   T32,=C'     '
         MVC   T32+2(2),TEMP3+4
         MVI   T32+4,C'%'
         MVC   LINE+49(5),T32
         BAL   R7,PUTIT
*/********************************************************************/
*/*                                                                  */
*/*   RETURN BACK TO THE OPERATING SYSTEM                            */
*/*                                                                  */
*/********************************************************************/
QUIT     CLOSE (DCBIN,,DCBOUT,)
EXIT     SVC   3
         EJECT
*/*******************************************************************/
*/*                                                                 */
*/*  COUNT CONVERSION ROUTINE: CONVERTS BINARY TO CHARACTER OUTPUT  */
*/*      INPUT   REG 1 HAS COUNT TO BE CONVERTED                    */
*/*      OUTPUT  DWD COUNTAINS CHARACTER OUTPUT FIELD               */
*/*                                                                 */
*/*******************************************************************/
PCOUNT   EQU   *                        SAVE CALLER'S REGISTERS
         CVD   R1,DWD                   CONVERT COUNT TO DECIMAL
         OI    DWD+7,X'0F'              FIX SIGN
         UNPK  EDWORK(9),DWD            CONVERT TO PRINTABLE
         MVC   DWD,EDWORK+1             MOVE 8 DIGITS TO RETURN AREA
         C     R1,=F'9999'              DOES IT FIT IN 4?
         BNH   PCNTEX                   YES - EXIT
         MVC   DWD+1(6),EDWORK          GET NUMBER OF THOUSANDS
         MVI   DWD+7,C'K'               PUT IN THOUSANDS INDICATOR
         C     R1,=F'999999'            IT IS OK?
         BNH   PCNTEX                   YES - EXIT
         MVC   DWD(8),=C'     . M'      INDICATE MILLION.......
         MVC   DWD+4(1),EDWORK+2        GET # MILLION
         MVC   DWD+6(1),EDWORK+3        GET TENTHS OF MILLION
         C     R1,=F'9999999'           LESS THAN 9.9M?
         BNH   PCNTEX                   YES - EXIT
         MVC   DWD+4(3),EDWORK          HUNDRED MILLION BETTER BE OK
PCNTEX   BR    R7                       RETURN TO CALLER
         SPACE 2
PUTIT    EQU   *
         AP    LINENR,=P'1'
         CP    LINENR,=P'57'            CHECK FOR PAGE OVERFLOW
         BNH   GOON#6
         AP    PAGENR,=P'1'
         MVC   TEMP2,=X'402020202120'
         ED    TEMP2,PAGENR
         MVC   TPAGE(3),TEMP2+3
         LA    R3,TITLE                 TITLE PAGE
         LR    R0,R3
         PUT   DCBOUT,(0)
         LA    R3,DASHES                OUR DASH LINE
         LR    R0,R3
         PUT   DCBOUT,(0)
         LA    R3,BLANKS               BLANK LINE---THE LAZY WAY
         LR    R0,R3
         PUT   DCBOUT,(0)
         LA    R3,HEADERL               HEADER LINE
         LR    R0,R3
         PUT   DCBOUT,(0)
         LA    R3,BLANKS               BLANK LINE---THE LAZY WAY
         LR    R0,R3
         PUT   DCBOUT,(0)
         ZAP   LINENR,=P'5'            RE-SET LINE COUNT
GOON#6   DS    0H
         LA    R3,LINE                 DETAIL LINE
         LR    R0,R3
         PUT   DCBOUT,(0)
         MVI   LINE,C' '
         MVC   LINE+1(132),LINE
         BR    R7
***********************************************************************
*                                                                     *
*  CONVERT REGION (SIZE AND USED)                                     *
*                                                                     *
***********************************************************************
CORE     CVD   R1,DWD                   CONVERT TO PACKED
         OI    DWD+7,X'0F'              REMOVE SIGN
         MVC   EDWORK(7),=X'402020202120D2'
         ED    EDWORK(6),DWD+5          MAKE IT PRINTABLE
         BR    R7                       RETURN TO CALLER
         SPACE 2
***********************************************************************
*                                                                     *
*  CONVERT BINARY NUMBER TO HH:MM:SS.TH                               *
*                                                                     *
***********************************************************************
HHMMSS   MVC   EDWORK+2(7),=C':  :  .'  MOVE IN MASK
         SR    R0,R0                    CLEAR FOR DIVIDE
         D     R1-1,=F'100'             R0=TH  R1=HHMMSS
         CVD   R0,DWD                   CONVERT TO PACKED
         OI    DWD+7,X'0F'              REMOVE SIGN
         UNPK  EDWORK+9(2),DWD+6(2)     UNPACK TENTHS AND HUNDRETHS
         SPACE 1
         SR    R0,R0                    CLEAR FOR DIVIDE
         D     R1-1,=F'60'              R0=SS  R1=HHMM
         CVD   R0,DWD                   CONVERT TO PACKED
         OI    DWD+7,X'0F'              REMOVE SIGN
         UNPK  EDWORK+6(2),DWD+6(2)     UNPACK SECONDS
         SPACE 1
         SR    R0,R0                    CLEAR FOR DIVIDE
         D     R1-1,=F'60'              R0=MM  R1=HH
         CVD   R0,DWD                   CONVERT TO PACKED
         OI    DWD+7,X'0F'              REMOVE SIGN
         UNPK  EDWORK+3(2),DWD+6(2)     UNPACK MINUTES
         SPACE 1
         CVD   R1,DWD                   CONVERT TO PACKED
         OI    DWD+7,X'0F'              REMOVE SIGN
         UNPK  EDWORK+0(2),DWD+6(2)     UNPACK HOURS
         BR    R7                       RETURN TO CALLER
         SPACE 2
***********************************************************************
*                                                                     *
*  CLOCK CONVERSION ROUTINE: CONVERTS BINARY TO CHARACTER OUTPUT      *
*        INPUT   REG 1 HAS FIRST TIME                                 *
*                REG 0 HAS SECOND TIME
*        OUTPUT  DWD COUNTAINS CHARACTER OUTPUT FIELD                 *
*                                                                     *
***********************************************************************
PCLOCK   EQU   *                        SAVE CALLER'S REGISTERS
         SR    R1,R0                    GET TIME DIFFERENCE
         BNL   *+8                      IF DIFFERENCE >= 0 THEN OK
         A     R1,=A(24*60*60*100)      ELSE ADD 24 HOURS TO TIME
         SPACE 1
         MVI   EDWORK+7,C'S'            ASSUME SECONDS
         C     R1,=A(1000*100)          LESS THAN 1000 SECONDS?
         BL    NOTOVER                  YES - OK
         MVI   EDWORK+7,C'M'            ASSUME MINUTES
         SR    R1-1,R1-1                CLEAR FOR DIVIDE
         D     R1-1,=F'60'              CONVERT TO MINUTES
         C     R1,=A(1000*100)          LESS THAN 1000 MINUTES?
         BL    NOTOVER                  YES - OK
         MVI   EDWORK+7,C'H'            ELSE IT'S HOURS?????
         SR    R1-1,R1-1                CLEAR FOR DIVIDE
         D     R1-1,=F'60'              CONVERT TO HOURS
         C     R1,=A(1000*100)          LESS THAN 1000 HOURS?
         BL    NOTOVER                  YES - OK
         MVC   DWD(8),=C'********'      SOMETHING WRONG HERE
         B     PCLKEX                   BR TO RETURN
         SPACE 1
NOTOVER  CVD   R1,DWD                   CONVERT TIME TO DECIMAL
         OI    DWD+7,X'0F'              FIX SIGN
         UNPK  EDWORK(7),DWD+4(4)       MAKE IT PRINTABLE
         MVC   DWD,EDWORK               RETURN THE RESULT
*---  REFORMAT RESULT TO FIT IN A 4 CHAR FIELD
         MVC   EDWORK(3),DWD+2          MOVE NNN
         MVC   EDWORK+3(1),DWD+7        MOVE S/M/H
         CLC   =C'00',EDWORK            2 LEADING ZEROES?
         BNE   PCLKEX                   NO - ALL DONE HERE
         MVC   EDWORK(1),DWD+4          YES - MOVE UNITS TO ANSWER AREA
         MVI   EDWORK+1,C'.'            PUT IN THE DECIMAL POINT
         MVC   EDWORK+2(1),DWD+5        MOVE IN TENTHS
         CLI   EDWORK,C'0'              LESS THAN 1 SECOND?
         BNE   PCLKEX                   NO - ALL DONE HERE
         MVI   EDWORK,C'.'              YES - PUT IN THE DECIMAL POINT
         MVC   EDWORK+1(2),DWD+5        MOVE TENTHS AND HUNDRETHS
         SPACE 1
PCLKEX   BR    R7                       RETURN TO CALLER
         SPACE 2
***********************************************************************
*                                                                     *
*  CONDITION CODE CONVERSION ROUTINE: CHARACTER OUTPUT INTO RC FIELD  *
*        INPUT   REG 0 HAS            STEP TERM CONDTION CODE         *
*                REG 1 HAS ADDRESS OF STEP TERM INDICATOR FIELD       *
*        OUTPUT  FIELD RC OF OUTPUT LINE CONTAINS RETURN CODE         *
*                                                                     *
***********************************************************************
PRETCDE  EQU   *                        SAVE CALLER'S REGISTERS
         TM    FLUSHED,BIT7             WAS STEP FLUSHED?
         BNO   NOFLUSH                  NO,BRANCH PAST
         MVC   LABEND,=C'*NE* '         MOVE IN NOT EXECUTED
         B     PRETEXT                  ALL DONE HERE
NOFLUSH  CLI   ABENDFLG,X'01'           ABENDED
         BE    STPABEND                 YES CHECK IT
         N     R0,=A(X'FFF')            ZERO UNUSED PORTION
         CVD   R0,RWORK                 GET ADDRESS OF COND FIELD
         OI    RWORK+7,X'0F'            FIX SIGN
         UNPK  RC(4),RWORK+5(3)         CONVERT RET CODE TO CHAR
         MVC   LABEND(4),RC             MOVE TO OUTPUT LINE
         CLC   =C'0000',RC              IS IT ZERO?
         BNE   *+10                     NO - SKIP
         MVC   LABEND(4),=C'ZERO'       YES - BE FANCY
         B     PRETEXT                  BR TO RETURN
STPABEND CLM   R0,2,=X'80'              WAS IT A USER ABEND CODE?
         BL    SYSABND                  NO, PROCESS SYSTEM ABEND CODE.
         N     R0,=A(X'FFF')            TURN OFF X'80' BIT
         CVD   R0,RWORK                 CONVERT FOR OUTPUT
         OI    RWORK+7,X'0F'            FIX SIGN
         UNPK  RC(4),RWORK+5(3)         CONVERT TO CHARACTER
         MVI   LABEND,C'U'
         MVC   LABEND+1(4),RC           USER ABEND CODE
         B     PRETEXT                  BR TO RETURN
SYSABND  STH   R0,RWORK                 STORE ABEND CODE
         UNPK  RWORK+3(5),RWORK(3)      ADD ZONES TO CC FIELD
         TR    RWORK+4(3),HEXTAB        TRANSLATE TO CHARACTERS
         MVC   RC+1(3),RWORK+4          MOVE TO OUTPUT LINE
         MVC   LABEND+1(3),RC+1
         MVI   LABEND,C'S'              SYSTEM ABEND INDICATOR
PRETEXT  BR    R7                       RETURN TO CALLER
         SPACE 2
HEXTAB   EQU   *-C'0'
         DC    C'0123456789ABCDEF'
         SPACE 5
         LTORG
INREC    DSECT               /* DATABASE LAYOUT---BUILT BY SMFCOLL*/
RECTYPE  DS    CL1
SMFDATE  DS    CL4                           /* DATE STEP ENDED */
SMFTIME  DS    CL4                           /* TIME STEP ENDED */
SYSID    DS    CL4                           /* SMF SYSTEM ID   */
RDRDATE  DS    CL4                           /* DATE JOB IN RDR */
RDRTIME  DS    CL4                           /* TIME JOB IN RDR */
JOBNAME  DS    CL8                           /* JOB NAME        */
BEGDATE  DS    CL4                           /* START DATE      */
BEGTIME  DS    CL4                           /* START TIME      */
ABENDCC  DS    CL2                           /* ABEND CODE      */
FLUSHED  DS    CL1                           /* JOB FLUSHED FLAG*/
ABENDFLG DS    CL1                           /* JOB ABENDED     */
PGMNAME  DS    CL8                           /* PROGRAM NAME    */
STEPNAME DS    CL8                           /* STEP NAME       */
SRBTIME  DS    CL4                           /* SRB TIME        */
TCBTIME  DS    CL4                           /* TCB TIME        */
TAPEIO   DS    CL4                           /* TAPE EXCP COUNT */
DISKIO   DS    CL4                           /* DISK EXCP COUNT */
VIO      DS    CL4                           /* VIO EXCP COUNT  */
DYNTAPE  DS    CL4                           /* DYNAMIC TAPE IO */
DYNDISK  DS    CL4                           /* DYNAMIC DISK IO */
TSOIO    DS    CL4                           /* TSO TGET+TPUTS  */
TERMIO   DS    CL4                           /* OTHER TERM IO   */
RGNALLOC DS    CL2                           /* REGION USED     */
PGMRNAME DS    CL20                          /* PROGRAMMER NAME */
TSOFLAG  DS    CL1                           /* VIO PAGE OUT    */
SPARE    DS    CL24                          /* FOR EXPANSION   */
*/********************************************************************/
*/*                                                                  */
*/* THE LAYOUT OF THE NON-JOB RECORDS IS AS FOLLOWS                  */
*/*                                                                  */
*/* RECTYPE  : X'46'                                                 */
*/* SMFDATE    DATE RECORD MOVED TO SMF BUFFER                       */
*/* SMFTIME    TIME RECORD MOVED TO SMF BUFFER                       */
*/* SYSID      SMF SYSTEM ID                                         */
*/* BEGTIME    TIME OF INTERVAL START (NOTE IN 00HHMMSSF)            */
*/* BEGDATE    DATE OF INTERVAL START                                */
*/* JOBNAME    RMFCOLL                                               */
*/* STEPNAME   BLANKS                                                */
*/* SRBTIME    8 BYTE CPU WAIT TIME. NOTE BIT 51 = 1 MICROSEC.       */
*/* PGMNAME    BLANKS                                                */
*/*                                                                  */
*/* OTHER FIELDS ARE NOT USED.                                       */
*/*                                                                  */
*/********************************************************************/
WORKSTOR CSECT
T1       DC    C'STATISTICS :'
T2       DC    C'----------'
T2A      DC    C'DATA COLLECTION (JOBS) STARTED :  01JAN85 AT HH:MM:SS'
T2B      DC    C'DATA COLLECTION (JOBS) ENDED   :  01JAN85 AT HH:MM:SS'
T2C      DC    C'WAIT TIME COLLECTION STARTED   :  01JAN85 AT HH:MM:SS'
T2D      DC    C'WAIT TIME COLLECTION ENDED     :  01JAN85 AT HH:MM:SS'
T3       DC    C'TOTAL NR OF JOBS RUN'
T4       DC    C'TOTAL NR OF TSO LOGONS'
T5       DC    C'TOTAL NR OF BATCH JOBS'
T6       DC    C'TOTAL DISK I/O COUNT'
T7       DC    C'TOTAL DYNAMICALLY ALLOCATED DISK I/O'
T8       DC    C'TOTAL TAPE I/O COUNT'
T9       DC    C'TOTAL VIO COUNT'
T10      DC    C'TOTAL TERMINAL I/O COUNT (NON TSO)'
T11      DC    C'TOTAL DISK I/O COUNT (BATCH)'
T12      DC    C'TOTAL DYNAMICALLY ALLOCATED DISK I/O (BATCH)'
T13      DC    C'TOTAL TAPE I/O COUNT (BATCH)'
T14      DC    C'TOTAL DISK I/O COUNT (TSO)'
T15      DC    C'TOTAL DYNAMICALLY ALLOCATED DISK I/O (TSO)'
T16      DC    C'TOTAL TERMINAL I/O COUNT (TSO)'
T18      DC    C'TOTAL MACHINE TIME USED'
T19      DC    C'TOTAL MACHINE TIME USED (TSO)'
T20      DC    C'TOTAL MACHINE TIME USED (BATCH)'
T21      DC    C'DATA HAS BEEN COLLECTED FOR'
T21A     DC    C'RMF STATISTICS FOR THIS PERIOD'
T21B     DC    C'--- ---------- --- ---- ------'
T21C     DC    C'TOTAL MACHINE TIME USED'
T21D     DC    C'TOTAL MACHINE TIME USED (TSO)'
T21E     DC    C'TOTAL MACHINE TIME USED (BATCH)'
T21F     DC    C'ELAPSED TIME MEASURED'
T22      DC    C'WAIT TIME MEASURED'
T23      DC    C'LONG RUNNING JOBS + MVS/SP OR XA USE'
T24      DC    C'CPU UTILISATION RATE'
T25      DC    C'LONG RUNNING JOBS + OS OVERHEAD'
T25A     DC    C'NO RMFDATA WAS AVAILBLE FOR THIS RUN'
T26      DC    C'(A)'
T27      DC    C'(B)'
T28      DC    C'(C)'
T29      DC    C'(D) = (A) - ((B) + (C))'
T30      DC    C'(E) = ((B) + (D)) / (A)'
T31      DC    C'(F) = (D) / (A)'
T32      DC    CL5' '
T33      DC    CL4' '
TEMP     DC    CL7' '
TEMP2    DC    CL6' '
TEMP3    DC    CL6' '
TEMP4    DC    CL10' '
TEMPDATE DC    CL7' '
SAVE     DS    9D
SAVER7   DC    F'0'
DATA     EQU   *
DWD      DS    D
RWORK    DS    D
JDISK    DC    F'0'
JTAPE    DC    F'0'
JVIO     DC    F'0'
JDYNT    DC    F'0'
JDYND    DC    F'0'
JTERM    DC    F'0'
JTSO     DC    F'0'
JMT      DC    F'0'
JSTART   DC    D'0'                 WANT DATE AND TIME
JEND     DC    D'0'                 WANT DATE AND TIME
TOTDISK  DC    F'0'
TOTTAPE  DC    F'0'
TOTVIO   DC    F'0'
TOTDYND  DC    F'0'
TOTDYNT  DC    F'0'
TOTTERM  DC    F'0'
TOTTSO   DC    F'0'
TSODISK  DC    F'0'
TSOTAPE  DC    F'0'
TSOVIO   DC    F'0'
TSODYND  DC    F'0'
TSODYNT  DC    F'0'
BATCDISK DC    F'0'
BATCTAPE DC    F'0'
BATCVIO  DC    F'0'
BATCDYNT DC    F'0'
BATCDYND DC    F'0'
TOTMT    DC    F'0'
TSOMT    DC    F'0'
BATCMT   DC    F'0'
RMFTOT   DC    F'0'
RMFTSO   DC    F'0'
RMFBAT   DC    F'0'
ENDTIME  DC    F'0'
ENDDATE  DC    F'0'
WAITBEG  DC    D'0'
WAITEND  DC    D'0'
SYSSTART DC    X'FFFFFFFF'
         DC    X'FFFFFFFF'
SYSEND   DC    D'0'
RMFSTART DC    X'FFFFFFFF'
         DC    X'FFFFFFFF'
RMFEND   DC    D'0'
ELAPSED  DC    F'0'
OPSYS    DC    F'0'
WDATE1   DC    F'0'
WDATE2   DC    F'0'
FROG     DC    D'0'
DUBBEL   DC    D'0'
JOBLOG   DC    CL16' '
TSOJOBS  DC    PL3'0'
BATCHJOB DC    PL3'0'
PAGENR   DC    PL3'0'
RECTOT   DC    PL5'0'
WAIT     DC    F'0'
LINENR   DC    PL3'80'
STEPNR   DC    PL3'0'
JOBNR    DC    PL3'0'
WORKDATE DC    CL7' '
STARTSW  DC    X'00'
RMFSW    DC    X'00'
CPUID    DC    CL4' '
TITLE    DS    0CL133
         DC    CL1'1'                   ASA CHAR
         DC    C'REPORT - SMF001 : SYSTEM USAGE BY JOB/JOBSTEP'
         DC    C'/TSOUSER FOR SYSTEM '
SYSTEM   DC    C'XXXX'
         DC    C' AT TTI CITICORP SANTA MONICA CALIF           '
TDATE    DC    CL7' '
         DC    C' PAGE '
TPAGE    DC    CL3' '
DASHES   DS    0CL133
         DC    CL1' '                   ASA CHAR
         DC    C'------   ------   ------ ----- -- -----------'
         DC    C'-------- --- ------ '
         DC    C'----'
         DC    C' -- --- -------- ----- ------ ----            '
         DC    C'-------'
         DC    C' ---- ---'
HEADERL  DS    0CL133
         DC    C' '         ASA CHAR
         DC    C'JOBNAME  STEPNAME PROGRAM   DATE    START     END'
         DC    C'     ET   MT  ABEND  RGN  TAPE DISK VIO  DYND DYNT'
         DC    C' TERM    NAME/COMMENTS     TSO   '
BLANKS   DC    CL133' '
CPUSW    DC    X'00'
EDWORK   DC    XL11'00'
RC       DC    CL8' '                   RETURN/ABEND CODE
         EJECT
LINE     DS    0CL133
LASACHAR DC    CL1' '
LJOB     DC    CL8' '
         DC    CL1' '
LSTEP    DC    CL8' '
         DC    CL1' '
LPGRM    DC    CL8' '
         DC    CL1' '
LDATE    DC    CL7' '
         DC    CL1' '
LSTART   DC    CL8' '
         DC    CL1' '
LSTOP    DC    CL8' '
         DC    CL1' '
LCLOCK   DC    CL4' '
         DC    CL1' '
LCPU     DC    CL4' '
         DC    CL1' '
LABEND   DC    CL5' '
         DC    CL1' '
LREGN    DC    CL5' '
         DC    CL1' '
LTAPE    DC    CL4' '
         DC    CL1' '
LDISK    DC    CL4' '
         DC    CL1' '
LVIO     DC    CL4' '
         DC    CL1' '
LDYND    DC    CL4' '
         DC    CL1' '
LDYNT    DC    CL4' '
         DC    CL1' '
LTERM    DC    CL4' '
         DC    CL1' '
LPGMR    DC    CL20' '
         DC    CL1' '
LTSO     DC    CL1' '
SPAREXX  DC    CL5' '
         DC    CL15' '
         END
