***********************************************************************
*                                                                     *
* TITLE     -  IGC0023F  TSDERASE SVC FOR MVS     (SVC236)            *
*                                                                     *
* FUNCTION  -  DYNAMICALLY ERASE A SCREEN UNDER PROGRAM CONTROL       *
*                                                                     *
* INPUT     -  R3 = CVT ADDR                                          *
*           -  R6 = BASE ADDR                                         *
*           -  R7 = ASCB ADDR                                         *
*                                                                     *
* OUTPUT    -  SCREEN FOR USER POINTED TO BY R7 IS ERASED             *
*                                                                     *
*           -  R15 = 0 GOOD RETURN, SCREEN IS ERASED                  *
*           -  R15 = 1 BAD RETURN, FRR ROUTINE ENTERED WITHIN SRB,    *
*                      SCREEN PROBABLY NOT ERASED                     *
*           -  R15 = 8 TSO OR TCAM NOT UP, OR BATCH USER ISSUED SVC   *
*                                                                     *
*                                                                     *
* ATTRIBUTES - SUPERVISOR STATE, KEY ZERO. STANDARD TYPE 4 SVC        *
*              ATTRIBUTES APPLY.                                      *
*                                                                     *
* AUTHOR    -  FRANCISCO DE CORDOVA    TECHNICAL SUPPORT OFFICER      *
*                                      PLANNING & SUPPORT DIVISION    *
*                                      SECURITY PACIFIC NATIONAL BANK *
*                                                                     *
* DATE      -  MARCH 5, 1975                                          *
*                                                                     *
***********************************************************************
         EJECT
IGC0023F CSECT
         REGS
         EJECT
         USING CVT,R3
         USING IGC0023F,R6
         USING ASCB,R7
         USING SRB,R2        THIS ISNT PRELOADED
         SPACE 2
***********************************************************************
*                       GET SQA FOR SRB                               *
***********************************************************************
         SPACE
         LA    R0,SRBSIZE2     LEN OF SRB + WORKAREA
         GETMAIN RU,LV=(0),SP=245  BUY SQA FOR SRB
         LR    R2,R1         MAKE SRB ADDRESSABLE
         EJECT
***********************************************************************
***********************************************************************
*              INITIALIZE THE SRB                                     *
***********************************************************************
***********************************************************************
         SPACE
         XC    SRB(SRBSIZE2),SRB  CLEAR SRB AREA
         MVC   SRBID(4),SRBNAME    MOVE IN SRB NAME
         SPACE
***********************************************************************
*        FIND TCAM'S ASCB                                             *
***********************************************************************
         SPACE
         L     R8,CVTASVT    GET AVT PTR
         USING ASVT,R8
LOOP     L     R9,ASVTENTY   GET ASCB PTR
         LTR   R9,R9         END OF ASCB CHAIN?
         BE    NOTHERE       YES,TCAM NOT FOUND
         L     R10,ASCBJBNS-ASCBEGIN(R9) LOAD PTR TO JOBNAME FROM ASCB
         CLC   0(4,R10),TCAM ONLY 1ST 4 LETTERS OF MOD NAME CHECKED
         BE    GOTTCAM       FOUND HIM
         LA    R8,4(R8)      NO, THEN BUMP TO NXT ASCB PTR
         B     LOOP
         SPACE
NOTHERE  EQU   *             TCAM NOT UP, MUST BE BATCH USER
         LA    R10,8
         B     FREESQA
         SPACE
GOTTCAM  EQU  *
         MVC   SRBPASID,ASCBASID-ASCBEGIN(R9) INSERT TCAM'S ASID IN SRB
         ST    R9,SRBASCB    STORE ADDR OF TCAMS ASCB
         EJECT
***********************************************************************
*              PARM INITIALIZATION WITHIN SRB                         *
***********************************************************************
         SPACE
         ST    R7,ASCBADDR   INSERT MY ASCBADDR IN XMEMORY POST LIST
         LA    R8,SRBECB     GET ECB ADDR AND
         ST    R8,ECBPTR     ECB POST LIST
         MVI   ECBPTR,X'80'  MAKE THIS A XMEMORY POST LIST
         LA    R8,SRBWORK    GET ADDR OF SRB WORK AREA
         ST    R8,SRBPARM    AND STICK IN SRB PARM PTR AREA
         SPACE
***********************************************************************
*              LOAD SRB ROUTINE AND SAVE ITS ENTRY POINT              *
***********************************************************************
         SPACE
LOADSRB  L     R0,IGCENTRY   GET SRB ROUTINE ENTRY POINT
         ST    R0,SRBEP      STORE ENTRY POINT IN SRB
         SPACE
***********************************************************************
*              GET TERMINAL NAME TABLE INDEX AND AVT ADR              *
*              IN ORDER TO PASS TO SRB ROUTINE                        *
***********************************************************************
         SPACE
         L     R8,ASCBTSB    GET TSB ADDR FOR THIS USER
         LTR   R8,R8         IS THIS A BATCH USER?
         BZ    NOTHERE       YES, RETURN TO USER
         USING TSB,R8
         MVC   SRBTNDX+2(2),TSBASRCE  GET TERM INDEX OFFSET
         L     R9,CVTAQAVT   GET TCAM DISPATCHER ADDR
         LTR   R9,R9         IS TCAM UP?
         BZ    NOTHERE       NO
         L     R9,0(R9)      GET AVT ADDR
         ST    R9,SRBAVT     SAVE IN SRB WORK AREA
         EJECT
***********************************************************************
*              SCHEDULE SRB FOR IGC0123F                              *
***********************************************************************
         LA    R1,SRB
         SCHEDULE SRB=(1),SCOPE=LOCAL
         SPACE
         WAIT  ECB=SRBECB    WAIT UNTIL SRB HAS COMPLETED
         SPACE
         SR    R10,R10       ZERO TEMP STORE REG
         LH    R10,SRBECB+2  SAVE COMPLETION CODE
         SPACE
         LA    R1,BLANK      POINT TO ADR OF BUFFER
         LA    R0,1          LOAD LENGTH OF BUFFER
         TPUT  (R1),(R0),R   ISSUE DUMMY TPUT TO SCREEN
         SPACE
FREESQA  LA    R0,SRBSIZE2
         FREEMAIN RU,LV=(R0),A=(R2),SP=245   RELEASE SQA
RETURN   LR    R15,R10       PUT COMPLETION CODE IN RETURN REG
         DS    0H
         SVC   3             RETURN TO CALLER
         EJECT
***********************************************************************
*              CONSTANTS AND WORK AREA                                *
***********************************************************************
         SPACE
IGCENTRY DC    V(IGC0123F)       ADDR OF SRB ROUTINE IGC0123F
SRBNAME  DC    CL4'SRB '
TCAM     DC    CL4'TCAM'
BLANK    DC    CL1' '
         EJECT
IGC0123F CSECT
         EJECT
         LR    R10,R15       LOAD BASE
         USING IGC0123F,R10  EST. BASE ADDR
         USING SRB,R2
         SPACE 2
START    LR    R2,R0         SAVE SRB PTR
         LR    R9,R14        SAVE RETURN ADDR
         LA    R3,FRR        EST. FUNC. RECOV EXIT ADDR
         SPACE 2
***********************************************************************
*              GET KEY ZERO FOR SETFRR                                *
***********************************************************************
         SPACE
         MODESET EXTKEY=SUPR
         SPACE
         SETFRR A,FRRAD=(R3),WRKREGS=(R4,R5),PARMAD=(R6)
         ST    R10,0(R6)     STORE BASE REG IN PARM AREA
         LA    R4,RETRY
         ST    R4,4(R6)      STORE RETRY ROUTINE ADDR IN PARM AREA
         EJECT
***********************************************************************
*        GET LOCKS AND FREEZE QCB AND SCB                             *
***********************************************************************
         SPACE
LOCKLOCL SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=USE,               X
               RELATED=(QCB,SCB,'FREELOCL')
LOCKCMS  SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,REGS=USE,                 X
               RELATED=(QCB,SCB,'FREECMS')
         EJECT
***********************************************************************
*              GET TCAMS'S CONTROL BLOCKS VIA ONE OF THE              *
*                   MOST COMPLICATED LOOK UPS YET                     *
***********************************************************************
         SPACE
         L     R7,SRBAVT     GET AVT ADDR
         USING IEDQAVTD,R7
         L     R7,AVTRNMPT   GET TERM NAME TABLE ADDR
         DROP  R7
         USING IEDQTNTD,R7
         SR    R1,R1         CLEAR WORK REG
         IC    R1,TNTENLEN   GET LEN OF NAME PORTION
         LR    R14,R1        SAVE LENGTH OF NAME
         LA    R1,3(R1)      ADD IN LEN OF ADDR OF ENTRY TABLE
         L     R0,SRBTNDX    LOAD INDEX TO TERM NAME
         BCTR  R0,R0         DECREMENT INDEX BY 1
         MR    R0,R0         CALC OFFSET INTO NAME TABLE
         LA    R7,TNTOFF(R1,R7)  POINT TO NAME ENTRY
         DROP  R7
         BCTR  R14,R0        DECREMENT NAME LEN BY 1
         L     R7,0(R14,R7)  BUMP PAST NAME TO GET TERM TABLE ADDR
         USING IEDQTRM,R7
         L     R7,TRMDESTQ   GET DEST QCB ADDR
         DROP  R7
         USING IEDQQCB,R7
         L     R14,QCBDCBAD-1            GET ADDR OF DCB FOR LINE
         USING IHADCB,R14
         L     R15,DCBIOBAD  GET ADDR OF IOB ENTRY IN LCB
         LA    R0,LCBFLAG1-IEDQLCB OFFSET TO IOB FROM LCB
         SR    R15,R0
         SR    R0,R0
         IC    R0,DCBEIOBX   GET SIZE OF LCB ENTRY
         SR    R1,R1
         IC    R1,QCBRELLN   GET RELATIVE LCB NUMBER
         MR    R0,R0         CALC OFFSET OF LCB
         AR    R15,R1        ADD OFFSET TO BEGINNING OF LCB AND
*                            FINALLY ARRIVE AT LCB
         USING IEDQLCB,R15
         L     R8,LCBSCBDA-1 GET ADDR OF TCAM'S SCREEN
         USING IEDQSCB,R8    CONTROL BLOCK FOR THIS TERMINAL
***********************************************************************
*              CLEAR THE SCREEN ON THE DISPLAY STATION                *
***********************************************************************
         OI    SCBSTATE,SCBERSDS         TELL TCAM TO ERASE SCREEN
         MVI   QCBSATCT,0    INDICATE CURRENT LINE AT TOP
         SPACE
         DROP  R7,R8,R10,R14,R15  BASE NO LONGER NEEDED
         SR    R10,R10       INSERT ZERO COMPLETION CODE FOR RETURN
         SPACE
***********************************************************************
*              RELEASE LOCKS FOR SRB CLEAUP PROCESSING                *
***********************************************************************
         SPACE
RETRY    EQU   *
FREECMS  SETLOCK RELEASE,TYPE=CMS,RELATED=(QCB,SCB,'LOCKCMS')
FREELOC  SETLOCK RELEASE,TYPE=LOCAL,RELATED=(QCB,SCB,'LOCKLOC')
         EJECT
***********************************************************************
*        ISSUE CROSS MEMORY POST TO WAKE UP IGC0023F                  *
*                 USING BRANCH ENTRY                                  *
***********************************************************************
         SPACE
         L     R11,ECBPTR    GET XMEMORY ECB PTR
         L     R13,ASCBADDR  GET ASCB ADDR OF IGC0023F
         L     R15,16(R0)    GET CVT PTR
         USING CVT,R15
         L     R15,CVT0PT01  GET BR ENTRY TO POST
         LA    R12,CVTBRET   GET ERR RETRY ADDR FOR POST ROUTINE
         DROP  R15
         BALR  R14,R15       BRANCH TO POST TO WAKE UP IGC0023F
         BR    R9            EXIT FROM SRB ROUTINE
         EJECT
***********************************************************************
*              FRR EXIT ROUTINE                                       *
***********************************************************************
         SPACE
FRR      EQU   *             FUNC RECOVERY WILL START HERE
         USING SDWA,R1
         USING *,R11
         LR    R11,R15       EST. BASE ADDR
         L     R2,SDWAPARM   LOAD PARM ADDR PASSED TO FRR
         L     R7,4(R2)      GET RETRY ADR FOR SETRP
         ST    R14,8(R2)     SAVE FRR RETURN ADDR IN PARM AREA
         LA    R10,1(R0)     GENERATE BAD COMPLETION CODE
         ST    R10,SDWAGR10  STORE BAD COMP CODE IN R10 SAVEAREA
         SPACE
***********************************************************************
*              ISSUE RECOVERY PROCEDURES                              *
***********************************************************************
         SPACE
         SETRP WKAREA=(1),RC=4,RETADDR=(7),RETREGS=YES,FRESDWA=YES,    X
               DUMP=YES,DUMPOPT=SNAP
         L     R14,8(R2)     GET EXIT ADDR
         BR    R14            RETURN TO MVS
         SPACE
***********************************************************************
*                SNAP LIST                                            *
***********************************************************************
         SPACE
SNAP     SNAP  SDATA=(ALL),PDATA=(ALL),STORAGE=(IGC0123F,SNAPEND),MF=L
SNAPEND  EQU   *
         EJECT
         TLCBD
         EJECT
         IHAFRRS
         EJECT
         IHASDWA
         EJECT
         IHAPSA
         EJECT
         TSCBD
         EJECT
         TQCBD
         EJECT
         DCBD  DSORG=TX      THIS IS A TCAM DCB
         EJECT
         CVT   LIST=YES,DSECT=YES
         EJECT
ASCB     IHAASCB
         EJECT
         IKJTSB LIST=YES
         EJECT
SRB      IHASRB
         SPACE
***********************************************************************
*              SRB WORK AREA EXTENSION                                *
***********************************************************************
         SPACE
         ORG   SRBEND
SRBWORK  EQU   *
SRBECB   DS    F
SRBTNDX  DS    F             TERMINAL INDEX OFFSET
SRBAVT   DS    F             TCAM AVT ADDR
ECBPTR   DS    F             *********************************
ASCBADDR DS    F             CROSS MEMORY POST LIST
ERRADDR  DS    F             ********************************
SRBEND2  EQU   *
SRBSIZE2 EQU   SRBEND2-SRBSECT
         EJECT
         TAVTD
         EJECT
IEDQTRM  DSECT
TRMDESTQ DS    F
         TTNTD
         EJECT
         EJECT
ASVT     IHAASVT DSECT=YES
         END
