//TS$MKRDF  JOB  (xxxx,SYS),KRILANOVICH,MSGCLASS=Y
//S1   EXEC PLIXCL,
// PARM.PLI='OPT(TIME),M,STG,MAP,X(F),OF,A(F),AG,NIS,LC(66),SYNTAX',
//        REGION.PLI=1024K,
//        PARM.LKED='MAP,LIST'
//PLI.SYSIN   DD   *
  /* FORMAT THE LISTING OF THE RDO DATA SET      */

  /************************************************************/
  /*             FORMAT CICS RDO LISTING                      */
  /*             COUNTY OF SANTA BARBARA                      */
  /*  5/22/87                                MARK KRILANOVICH */
  /*  This program reads the SYSPRINT listing from the CICS   */
  /*  program DFHCSDUP.  This is a list of the RDO groups.    */
  /*  This program then condsnses and formats the list into   */
  /*  a more human-oriented form.    (805) 963-7122           */
  /*                                                          */
  /*  The parm may be one of 3 forms:                         */
  /*      PARM='/,XXXXX'  Calls DFHCSDUP for list "XXXXX".    */
  /*      PARM='/,'       Assumes DFHCSDUP has already been   */
  /*                      called, and its output is in        */
  /*                      "SYSPRINT".                         */
  /*      PARM='/'        Assumes file "SORTIN" contains the  */
  /*                      combined "SORTIN" files from        */
  /*                      previous runs of this program, that */
  /*                      had PARM='/,XXXXX', with different  */
  /*                      list names.  Then gives a combined  */
  /*                      report for all lists.               */
  /*                                                          */
  /************************************************************/

 RDOFMT: PROCEDURE(PARM) OPTIONS(MAIN) REORDER;

   DCL PARM CHARACTER(10) VARYING;      /* EXEC CARD PARM            */

   DCL DFHCSDUP   ENTRY OPTIONS(ASM, INTER);

   DCL 01 DFH_CARD STATIC,              /* SYSIN CARD FOR DHFCSDUP   */
          02 FILLER1  CHAR(11) INIT(' LIST LIST('),
          02 DFH_NAME CHAR(8),          /* LIST NAME TO REPORT ON    */
          02 FILLER2  CHAR(9) INIT(') OBJECTS'),
          02 FILLER3  CHAR(52) INIT(' ');

   DCL PRINT_LINE CHAR(121);            /* PRINT LINE INPUT BUFFER   */

   DCL 01 PAGE_EJECT,                   /* THE PAGE EJECT LINE       */
          02 IDENT     CHAR(41),        /* PAGE EJECT IDENTIFIER     */
          02 FILLER1   CHAR(42),
          02 TIME_DATE,                 /* TIME AND DATE OF RUN      */
             03 FILLER2 CHAR(5),        /* 'TIME '                   */
             03 TIME   CHAR(5),         /* 'HH:MM' OF RUN            */
             03 FILLER3 CHAR(6),        /* ' DATE '                  */
             03 DATE   CHAR(6),         /* 'YY:DDD' OF RUN           */
          02 FILLER4   CHAR(16),
       PAGE_EJECT_IDENT CHAR(41) STATIC
             INIT('1CICS/VS  SYSTEM PROGRAMMER CSD UTILITIES');

   DCL 01 AS_OF STATIC,                 /* "AS OF HH:MM ON YY.DDD"    */
          02 FILLER1   CHAR(6) INIT('as of '),
          02 TIME      CHAR(5),         /* 'HH:MM' OF RUN             */
          02 FILLER2   CHAR(4) INIT(' on '),
          02 DATE      CHAR(6);         /* 'YY:DDD' OF RUN            */

   DCL 01 CREATED,                      /* LINE WITH TIME STAMP       */
          02 CREATE_RELEASE,
             03 IDENT     CHAR(25),     /* IDENTIFIER                 */
             03 RELEASE   CHAR(5),      /* RELEASE OF CREATING CICS   */
          02 FILLER       CHAR(63),
          02 TIME_DATE    CHAR(28),     /* CREATION AND UPDATE STAMP  */
       CREATED_IDENT CHAR(25) STATIC
             INIT(' CSD CREATED BY RELEASE: ');

   DCL 01 LIST_NAME,                    /* LINE WITH LIST NAME        */
          02 FILLER1   CHAR(1),
          02 IDENT     CHAR(11),        /* IDENTIFIER                 */
          02 FILLER    CHAR(4),
          02 NAME      CHAR(8),         /* NAME OF LIST               */
          02 FILLER2   CHAR(97),
       LIST_NAME_IDENT CHAR(11) STATIC INIT('LIST NAME: ');


   DCL 01 OBJECT_LINE_LONG,
          02 OBJECT_LINE,
             03 DUPE_FLAG CHAR(1),
             03 FIELD1    CHAR(23),
             03 FIELD2    CHAR(16),
             03 FIELD3    CHAR(23),
             03 FIELD4    CHAR(23),
             03 FIELD5    CHAR(23),
             03 FIELD6    CHAR(12),
          02 FIELD7       CHAR(8),
          02 COUNTER      CHAR(6);

   DCL 01 OBJECT_FIELD    DEFINED(OBJECT_LINE.FIELD1),
          02 OBJECT_F     CHAR(22),
          02 FILLER1      CHAR(1);

   DCL 01 MAPSET_FIELD    DEFINED(OBJECT_LINE.FIELD1),
          02 MAPSET       CHAR(7),
          02 MAPSET_NAME  CHAR(9),
       MAPSET_IDENT       CHAR(7)  STATIC INIT('MAPSET('),
       MAPSET_IDENT_U     CHAR(7)  STATIC INIT('Mapset(');

   DCL 01 GROUP_FIELD     DEFINED(OBJECT_LINE.FIELD2),
          02 GROUP        CHAR(6),
          02 GROUP_NAME   CHAR(9),
       GROUP_IDENT        CHAR(6)  STATIC INIT('GROUP('),
       GROUP_IDENT_U      CHAR(6)  STATIC INIT('Group(');

   DCL DEF_TIME     CHAR(12) DEFINED(OBJECT_LINE.FIELD6);

   DCL 01 PROGRAM_FIELD   DEFINED(OBJECT_LINE.FIELD1),
          02 PROGRAM      CHAR(8),
          02 PROGRAM_NAME CHAR(9),
       PROGRAM_IDENT      CHAR(8) STATIC INIT('PROGRAM('),
       PROGRAM_IDENT_U    CHAR(8) STATIC INIT('Program(');

   DCL 01 LANG_FIELD      DEFINED(OBJECT_LINE.FIELD3),
          02 LANG         CHAR(9),
          02 LANG_NAME    CHAR(10),
       LANG_IDENT         CHAR(9)  STATIC INIT('LANGUAGE('),
       LANG_IDENT_U       CHAR(9)  STATIC INIT('Language(');

   DCL 01 RESIDENT_FIELD  DEFINED(OBJECT_LINE.FIELD5),
          02 RESIDENT     CHAR(9),
          02 RESIDENT_OPT CHAR(4),
       RESIDENT_IDENT     CHAR(9)  STATIC INIT('RESIDENT('),
       RESIDENT_IDENT_U   CHAR(9)  STATIC INIT('Resident(');

   DCL 01 TRANS_FIELD     DEFINED(OBJECT_LINE.FIELD1),
          02 TRANS        CHAR(12),
          02 TRANS_NAME   CHAR(5),
       TRANS_IDENT        CHAR(12) STATIC INIT('TRANSACTION(');
   DCL 01 TRANS_FIELD2 STATIC,
          02 TRANS_FILLER CHAR(8) INIT('TransID('),
          02 TRANS_NAME   CHAR(5);

   DCL 01 PROGRAM_FIELD2  DEFINED(OBJECT_LINE.FIELD3),
          02 PROGRAM2     CHAR(8),
          02 PROGRAM_NAME CHAR(9);

   DCL 01 TWASIZE_FIELD   DEFINED(OBJECT_LINE.FIELD4),
          02 TWASIZE      CHAR(8),
          02 TWASIZE_VALUE CHAR(6),
       TWASIZE_IDENT CHAR(8) STATIC INIT('TWASIZE('),
       TWASIZE_IDENT_U CHAR(8) STATIC INIT('TWAsize(');

   DCL 01 LIST_FIELD      DEFINED(OBJECT_LINE_LONG.FIELD7),
          02 FILLER1      CHAR(4),
          02 FILLER2      CHAR(4);

   DCL 01 COUNTER_FIELD   DEFINED(OBJECT_LINE_LONG.COUNTER),
          02 FILLER1      CHAR(3), /* MUST SUM ...                    */
          02 FILLER2      CHAR(3); /*  ... TO LENGTH(COUNTER)         */

   DCL 01 NULL STATIC,
          02 FILLER1      CHAR(1) INIT(' '),
          02 FILLER2      CHAR(2) INIT(' ');


   DCL PREV_GROUP    CHAR(8)  STATIC INIT(' ');
   DCL OBJECT_TYPE   CHAR(8)  STATIC;

   DCL 01 SEPARATOR  STATIC,
          02 FILLER1 CHAR(5) INIT((5)'-'),
          02 FILLER2 CHAR(7) INIT(' Group '),
          02 SEP_GROUP CHAR(8),
          02 FILLER3 CHAR(10) INIT(' follows, '),
          02 STAMP   CHAR(21),
          02 FILLER4 CHAR(1)  INIT(' '),
          02 FILLER5 CHAR(27) INIT((27)'-');

   DCL COLUMN_HEAD   CHAR(90) STATIC INIT(' ');
   DCL COLUMN_ULINE  CHAR(90) STATIC INIT(' ');

  DCL COL_A BIN FIXED(31) STATIC INIT(1),
      COL_B BIN FIXED(31) STATIC INIT(11),
      COL_C BIN FIXED(31) STATIC INIT(30),
      COL_D BIN FIXED(31) STATIC INIT(51),
      COL_E BIN FIXED(31) STATIC INIT(67),
      COL_F BIN FIXED(31) STATIC INIT(82);

   DCL RDOIN   RECORD INPUT,
       RDOOUT  STREAM OUTPUT PRINT
               ENVIRONMENT (VB RECSIZE(91) BLKSIZE(6006)),
       SYSIN   RECORD OUTPUT
               ENVIRONMENT (F  RECSIZE(80) BLKSIZE(80)),
       SYSPRINT STREAM OUTPUT PRINT,
       SORTIN  RECORD OUTPUT
               ENVIRONMENT (FB RECSIZE(135) BLKSIZE(6075)),
       SORTOUT RECORD INPUT
               ENVIRONMENT (FB RECSIZE(135) BLKSIZE(6075));
   DCL EOF_RDOIN   BIT(1) STATIC INIT('0'B);
   DCL EOF_SORTOUT BIT(1) STATIC INIT('0'B);
   DCL SORT_RETURN BIN FIXED(31);
   DCL (ADDR, INDEX, SUBSTR, STRING, LENGTH, PLISRTA) BUILTIN;

 %PAGE;
                                   /*---------------------------------+
                                   ×                                  ×
                                   ×  FORMAT THE LISTING OF RDO DATA  ×
                                   ×                                  ×
                                   +---------------------------------*/


  OPEN FILE(SYSPRINT) OUTPUT TITLE('PRINT');

  IF LENGTH(PARM) > 0
   THEN                            /* DOING 1 LIST, RATHER THAN COMBIN*/
    DO;
     IF LENGTH(PARM) > 1
      THEN                         /* LIST NAME IS SUPPLIED:  READ IT */
       DO;
        DFH_NAME = SUBSTR(PARM, 2); /* SET THE LIST NAME TO REPORT ON */
        OPEN  FILE(SYSIN) OUTPUT, FILE(SORTIN) OUTPUT;
        WRITE FILE(SYSIN) FROM(DFH_CARD); /* WRITE THE LIST COMMAND   */
        CLOSE FILE(SYSIN),        FILE(SORTIN);

        FETCH   DFHCSDUP;
        CALL    DFHCSDUP;          /* COPY RDO FROM VSAM TO SEQUENTIAL*/
        RELEASE DFHCSDUP;
       END;

     OPEN FILE(RDOIN)  INPUT TITLE('SYSPRINT');
     ON ENDFILE(RDOIN) EOF_RDOIN = '1'B;

     CALL READ_PRELIMS;            /* GO READ THE PRELIMINARY LINES   */
     CALL READ_INDEX;              /* GO READ THE INDEX LINES         */
     CALL READ_RDOIN;              /* GO READ THE RDOIN FILE          */
    END;

  OPEN FILE(RDOOUT) OUTPUT LINESIZE(90) PAGESIZE(66);
  SUBSTR(COLUMN_HEAD, COL_A+1) = 'Group';
  SUBSTR(COLUMN_HEAD, COL_B+5) = 'Object';
  SUBSTR(COLUMN_HEAD, COL_C+3) = 'Attribute 1';
  SUBSTR(COLUMN_HEAD, COL_D+1) = 'Attribute 2';
  SUBSTR(COLUMN_HEAD, COL_E+1) = 'Time Stamp';
  IF LENGTH(PARM) = 0
   THEN
    SUBSTR(COLUMN_HEAD, COL_F+2) = 'List';

  SUBSTR(COLUMN_ULINE, COL_A) = '--------';
  SUBSTR(COLUMN_ULINE, COL_B) = '----------------';
  SUBSTR(COLUMN_ULINE, COL_C) = '------------------';
  SUBSTR(COLUMN_ULINE, COL_D) = '-------------';
  SUBSTR(COLUMN_ULINE, COL_E) = '------------';
  IF LENGTH(PARM) = 0
   THEN
    SUBSTR(COLUMN_ULINE, COL_F) = '--------';

  PUT FILE(RDOOUT) EDIT(COLUMN_HEAD)  (LINE(1), A);
  PUT FILE(RDOOUT) EDIT(COLUMN_ULINE) (SKIP, A);

  CALL SORT_RDOIN;                 /* GO SORT THE RDOIN FILE          */
  CALL REPORT_RDO;                 /* GO REPORT ON THE RDO INFORMATION*/


  PUT FILE(RDOOUT) SKIP;
  PUT FILE(RDOOUT) EDIT('* indicates duplicate definition of object')
                       (SKIP, COL(COL_B-1), A);
  PUT FILE(RDOOUT) SKIP;
  PUT FILE(RDOOUT) EDIT('--End.') (SKIP, A);

  CLOSE FILE(RDOIN),
        FILE(RDOOUT),
        FILE(SYSPRINT);
 %PAGE;
                                   /*---------------------------------+
                                   ×                                  ×
                                   ×  READ THE PRELIMINARY LINES      ×
                                   ×                                  ×
                                   +---------------------------------*/


  READ_PRELIMS: PROC;


  DO UNTIL(EOF_RDOIN × PAGE_EJECT.IDENT = PAGE_EJECT_IDENT);
   READ FILE(RDOIN) INTO(PAGE_EJECT);
  END;
  IF EOF_RDOIN THEN CALL PREMATURE_EOF;

  AS_OF.TIME = PAGE_EJECT.TIME;
  AS_OF.DATE = PAGE_EJECT.DATE;
  SUBSTR(AS_OF.DATE, 3, 1) = '.';
  SEPARATOR.STAMP= STRING(AS_OF);

  DO UNTIL(EOF_RDOIN × LIST_NAME.IDENT = LIST_NAME_IDENT);
   READ FILE(RDOIN) INTO(LIST_NAME);
  END;
  IF EOF_RDOIN THEN CALL PREMATURE_EOF;

  PUT FILE(RDOOUT) EDIT('FMTRDO    ', LIST_NAME.NAME,
      ' RDO resource information, ', STRING(AS_OF)) (SKIP, A, A, A, A);

  END READ_PRELIMS;
 %PAGE;
                                   /*---------------------------------+
                                   ×                                  ×
                                   ×  READ THE INDEX LINES            ×
                                   ×                                  ×
                                   +---------------------------------*/


  READ_INDEX: PROC;

  READ FILE(RDOIN) INTO(PRINT_LINE);    /* FLUSH AN UNDER-LINE        */
  PUT FILE(RDOOUT) SKIP;

  DO WHILE(1=1);
   READ FILE(RDOIN) INTO(PRINT_LINE);
   IF EOF_RDOIN THEN CALL PREMATURE_EOF;
   IF SUBSTR(PRINT_LINE, 2, 5) = '*****'
    THEN LEAVE;
   IF SUBSTR(PRINT_LINE, 1, LENGTH(PAGE_EJECT_IDENT)) ^=
             PAGE_EJECT_IDENT
    THEN PUT FILE(RDOOUT) EDIT(SUBSTR(PRINT_LINE, 2)) (SKIP, A(80));
  END;

  END READ_INDEX;
 %PAGE;
                                   /*---------------------------------+
                                   ×                                  ×
                                   ×  READ RDO SYSPRINT FROM DFHCSDUP ×
                                   ×                                  ×
                                   +---------------------------------*/



  READ_RDOIN:  PROC;

  DCL I      BIN FIXED(31);

  OPEN FILE(SORTIN) OUTPUT;

  DO I = 1 BY 1;                   /* DO UNTIL END OF FILE            */
   READ FILE(RDOIN) INTO(OBJECT_LINE);
   IF EOF_RDOIN THEN LEAVE;
   IF MAPSET  = MAPSET_IDENT
    × PROGRAM = PROGRAM_IDENT
    × TRANS   = TRANS_IDENT
    THEN
     DO;
      STRING(LIST_FIELD) = LIST_NAME.NAME;
      PUT STRING(OBJECT_LINE_LONG.COUNTER) EDIT(I)
                (F(LENGTH(OBJECT_LINE_LONG.COUNTER)));
      WRITE FILE(SORTIN) FROM(OBJECT_LINE_LONG);
     END;
  END;

  CLOSE FILE(SORTIN);

  END READ_RDOIN;
 %PAGE;
                                   /*---------------------------------+
                                   ×                                  ×
                                   ×  SORT SELECTED RDO SYSPRINT      ×
                                   ×                                  ×
                                   +---------------------------------*/



  SORT_RDOIN:  PROC;

  DCL PREV_OBJECT CHAR(23) VARYING;

  CALL PLISRTA(' SORT FIELDS=('
               ×× SORT_BY(OBJECT_FIELD)  ×× ',CH,A,'
               ×× SORT_BY(COUNTER_FIELD) ×× ',CH,D,'
               ×× SORT_BY(LIST_FIELD)    ×× ',CH,A) ',
                  ' RECORD TYPE=F ', 100000, SORT_RETURN);
  IF SORT_RETURN > 0
   THEN CALL BAD_SORT(1);

  OPEN FILE(SORTOUT) INPUT, FILE(SORTIN) OUTPUT;
  EOF_SORTOUT = '0'B;
  ON ENDFILE(SORTOUT) EOF_SORTOUT = '1'B;
  PREV_OBJECT = ' ';

  DO WHILE(1=1);
   READ FILE(SORTOUT) INTO(OBJECT_LINE_LONG);
   IF EOF_SORTOUT THEN LEAVE;
   IF STRING(OBJECT_FIELD) = PREV_OBJECT
    THEN DUPE_FLAG = '*';
    ELSE DUPE_FLAG = ' ';
   WRITE FILE(SORTIN) FROM(OBJECT_LINE_LONG);
   PREV_OBJECT = STRING(OBJECT_FIELD);
  END;

  CLOSE FILE(SORTOUT), FILE(SORTIN);
  IF LENGTH(PARM) > 0
   THEN
    CALL PLISRTA(' SORT FIELDS=('
                 ×× SORT_BY(GROUP_FIELD)  ×× ',CH,A,'
                 ×× SORT_BY(OBJECT_FIELD) ×× ',CH,A,'
                 ×× SORT_BY(LIST_FIELD)   ×× ',CH,A) ',
                    ' RECORD TYPE=F', 100000, SORT_RETURN);
   ELSE
    CALL PLISRTA(' SORT FIELDS=('
                 ×× SORT_BY(OBJECT_FIELD) ×× ',CH,A,'
                 ×× SORT_BY(LIST_FIELD)   ×× ',CH,A) ',
                    ' RECORD TYPE=F', 100000, SORT_RETURN);
  IF SORT_RETURN > 0
   THEN CALL BAD_SORT(2);

  END SORT_RDOIN;
 %PAGE;
                                   /*---------------------------------+
                                   ×                                  ×
                                   ×  COMPUTE SORT PARAMETERS         ×
                                   ×                                  ×
                                   +---------------------------------*/



  SORT_BY:  PROC(FIELD) RETURNS(CHAR(6));

  DCL  01 FIELD,
          02 FIELD_A  CHAR(*),
          02 FIELD_B  CHAR(*);
  DCL PTR1    PTR;
  DCL PTR2    PTR;
  DCL I1      BIN FIXED(31) BASED(ADDR(PTR1));
  DCL I2      BIN FIXED(31) BASED(ADDR(PTR2));
  DCL COLUMN  CHAR(3);
  DCL LENG    CHAR(2);

  PTR1 = ADDR(FIELD);
  PTR2 = ADDR(OBJECT_LINE);
  PUT STRING(COLUMN) EDIT(I1 - I2 + 1)           (P'999');
  PUT STRING(LENG)   EDIT(LENGTH(STRING(FIELD))) (P'99');
  RETURN(COLUMN ×× ',' ×× LENG);

  END SORT_BY;
 %PAGE;
                                   /*---------------------------------+
                                   ×                                  ×
                                   ×  REPORT ON THE RDO INFORMATION   ×
                                   ×                                  ×
                                   +---------------------------------*/



  REPORT_RDO:  PROC;

  OPEN FILE(SORTOUT) INPUT;
  EOF_SORTOUT = '0'B;;
  ON ENDFILE(SORTOUT) EOF_SORTOUT = '1'B;

  DO WHILE (1=1);
   READ FILE(SORTOUT) INTO(OBJECT_LINE_LONG);
   IF EOF_SORTOUT THEN LEAVE;
   CALL PROC_LINE;
  END;

  CLOSE FILE(SORTOUT);
  END REPORT_RDO;
 %PAGE;
                                   /*---------------------------------+
                                   ×                                  ×
                                   ×  PROCESS THE DATA LINE           ×
                                   ×                                  ×
                                   +---------------------------------*/



  PROC_LINE:  PROC;

  GROUP = GROUP_IDENT_U;

  IF MAPSET = MAPSET_IDENT
   THEN
    DO;
     MAPSET = MAPSET_IDENT_U;
     CALL PRINT(GROUP_FIELD, MAPSET_FIELD, NULL, NULL, DEF_TIME);
    END;
   ELSE
    IF PROGRAM = PROGRAM_IDENT
     THEN
      DO;
       PROGRAM = PROGRAM_IDENT_U;
       LANG = LANG_IDENT_U;
       RESIDENT = RESIDENT_IDENT_U;
       CALL PRINT(GROUP_FIELD, PROGRAM_FIELD, LANG_FIELD,
                     RESIDENT_FIELD, DEF_TIME);
      END;
     ELSE
      IF TRANS = TRANS_IDENT
       THEN
        DO;
         PROGRAM2 = PROGRAM_IDENT_U;
         TRANS_FIELD2.TRANS_NAME = TRANS_FIELD.TRANS_NAME;
         TWASIZE = TWASIZE_IDENT_U;
         CALL PRINT(GROUP_FIELD, TRANS_FIELD2, PROGRAM_FIELD2,
                       TWASIZE_FIELD, DEF_TIME);
        END;
       ELSE;

  END PROC_LINE;
 %PAGE;
                                   /*---------------------------------+
                                   ×                                  ×
                                   ×  PRINT A LINE                    ×
                                   ×                                  ×
                                   +---------------------------------*/


  PRINT:  PROC(A, B, C, D, E);

  DCL  01 A,
          02 FIRST   CHAR(*),
          02 SECOND  CHAR(*);
  DCL (B, C, D) LIKE A;
  DCL E   CHAR(*);
  DCL PREV_OBJ_TYPE CHAR(8)  STATIC INIT(' ');

  SUBSTR(GROUP_NAME, INDEX(GROUP_NAME, ')'), 1) = ' ';
  IF GROUP_NAME ^= PREV_GROUP & PREV_GROUP ^= ' '
   & LENGTH(PARM) > 0
   THEN
    DO;
     SEPARATOR.SEP_GROUP = GROUP_NAME;
     PUT FILE(RDOOUT) EDIT(' ', STRING(SEPARATOR)) (SKIP, A, SKIP, A);
    END;

  OBJECT_TYPE = B.FIRST;
  IF OBJECT_TYPE ^= PREV_OBJ_TYPE
   & (GROUP_NAME = PREV_GROUP × LENGTH(PARM) = 0)
   THEN
    PUT FILE(RDOOUT) SKIP;
  PREV_GROUP = GROUP_NAME;
  PREV_OBJ_TYPE = OBJECT_TYPE;

  PUT FILE(RDOOUT) EDIT(GROUP_NAME) (SKIP, COL(COL_A), A)
                       (DUPE_FLAG)  (COL(COL_B-1), A)
                       (B)          (COL(COL_B), A, A)
                       (C)          (COL(COL_C), A, A)
                       (D)          (COL(COL_D), A, A)
                       (E)          (COL(COL_E), A);
  IF LENGTH(PARM) = 0
   THEN PUT FILE(RDOOUT) EDIT(STRING(LIST_FIELD)) (COL(COL_F), A);

  END PRINT;
 %PAGE;
                                   /*---------------------------------+
                                   ×                                  ×
                                   ×  REPORT PREMATURE EOF ON RDOIN   ×
                                   ×                                  ×
                                   +---------------------------------*/


  PREMATURE_EOF:  PROC;

  PUT FILE(SYSPRINT) EDIT('Premature EOF on RDO list in.') (SKIP, A);
  STOP;

  END PREMATURE_EOF;
 %PAGE;
                                   /*---------------------------------+
                                   ×                                  ×
                                   ×  REPORT SORT FAILURE             ×
                                   ×                                  ×
                                   +---------------------------------*/


  BAD_SORT:  PROC(WHICH);

  DCL WHICH   BIN FIXED(31);

  PUT FILE(SYSPRINT) EDIT('Sort number', which, ' failed, return =',
                          SORT_RETURN) (SKIP(2), A, F(2), A, F(5), A);
  STOP;

  END BAD_SORT;

  END RDOFMT;
/*
//LKED.SYSLMOD  DD  DSN=KRILANO.LINKLIB(RDOFMT),DISP=SHR,SPACE=
