VSAM$R   CSECT                         DEFINE CSECT
***********************************************************************
*
*    ROUTINE NAME ---------> VSAM$R
*
*    ENTRY POINTS ---------> -NONE-
*
*    EXTERNAL REFERENCES --> -NONE-
*
*    PARMS:  ACBADDR  - A FULLWORD IN WHICH VSAM$O STORED THE ACB ADDR
*            RPLADDR  - A FULLWORD IN WHICH VSAM$O STORED THE RPL ADDR
*            ACTION   - A ONE BYTE CHARACTER INDICATING THE TYPE OF
*                       REQUEST:
*                                G = GET
*                                P = PUT (NEW RECORD)
*                                U = UPDATE (EXISTING RECORD)
*                                E = ERASE
*            AREA     - THE BUFFER INTO WHICH THE RECORD WILL BE PLACED
*            AREALEN  - A FULLWORD CONTAINING THE LENGTH OF AREA
*            RECLEN   - A FULLWORD CONTAINING THE LENGTH OF THE RECORD
*            ARG      - THE KEY OF THE RECORD
*            FLAG     - A FULLWORD INTEGER INDICATING EXCEPTIONAL
*                       CONDITIONS:
*                       0 - ALL FUNCTIONS PERFORMED SUCCESSFULLY
*                       1 - ERROR PERFORMING MODCB FOR THE RPL
*                       2 - UNRECOGNIZED OPTION SPECIFIED
*                       3 - UNKNOWN ACTION SPECIFIED
*                       4 - ERROR PERFORMING REQUESTED ACTION
*                       5 - THE ACB ADDRESS PASSED IS INVALID
*                       6 - THE RPL ADDRESS PASSED IS INVALID
*                       7 - RECLEN IS NEGATIVE OR MORE THAN LRECL
*                       8 - ERROR PERFORMING SHOWCB
*                       9 - AREALEN IS NOT BELIEVABLE
*            REG15    - A FULLWORD INTEGER CONTAINING THE RETURN CODE
*                       FROM THE OFFENDING MACRO CALL.
*            REG0     - A FULLWORD INTEGER CONTAINING THE ERROR CODE
*                       FROM THE OFFENDING MACRO CALL.
*            FDBK     - A FULLWORD INTEGER CONTAINING THE FDBK FIELD
*                       FROM THE REQUEST MACRO.
*            12TH-NTH PARMS - CHARACTER STRINGS CONTAINING PROCESSING
*                             OPTIONS:  ALLOWED OPTIONS ARE:
*                             ADR,DIR,LRD,BWD,NSP,KGE,DMY (IGNORED)
*
*    DATE LAST MODIFIED ---> 03/05/81
*
*    ROUTINE DESCRIPTION:
*
*         THIS ROUTINE MODIFIES THE RPL ASSOCIATED WITH THE DATASET
*    AND THEN PERFORMS THE GET, PUT, ERASE, OR UPDATE.
*
***********************************************************************
*
*     REGISTER EQUATES AND USAGE
*
R0       EQU   0
R1       EQU   1
R2       EQU   2                       WORK
R3       EQU   3                       WORK
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9                       ADDR OF THE RPL
R10      EQU   10                      ADDR OF THE ACB
R11      EQU   11                      ADDR OF PARMLIST
R12      EQU   12                      BASE REG
R13      EQU   13                      WORKAREA BASE REG AND SAVE AREA
R14      EQU   14                      RETURN ADDR
R15      EQU   15                      RETURN CODE
*
*     HOUSEKEEPING
*
         B     12(R15)                 BRANCH AROUND CONSTANT
         DC    X'07'
         DC    CL7'VSAM$R '
         STM   R14,R12,12(R13)         SAVE REGISTERS
         LR    R12,R15                 SET REG 12 TO ENTRY ADDR
         USING VSAM$R,R12              EXTABLISH ADDRESSABILITY
         LR    R11,R1                  SAVE R1
         LR    R2,R13                  SAVE ADDR OF CALLING SAVE AREA
         GETMAIN RU,LV=WORKSIZE        GET SOME CORE
         LR    R13,R1                  SAVE ADDR OF CORE OBTAINED
         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY
         ST    R2,SAVEAREA+4           STORE ADDR OF CALLING SAVE AREA
         ST    R13,8(R2)               STORE ADDR OF MY SAVE AREA
         MVC   ACBADDR(PARMLEN),0(R11) SAVE PARAMETER ADDRESSES
*
*     INITIALIZE THE RETURN CODES
*
         L     R2,FLAG                 LOAD ADDR OF FLAG    PARM
         XC    0(4,R2),0(R2)           ZERO FLAG
         L     R2,REG15                LOAD ADDR OF REG15   PARM
         XC    0(4,R2),0(R2)           ZERO REG15
         L     R2,REG0                 LOAD ADDR OF REG0    PARM
         XC    0(4,R2),0(R2)           ZERO REG0
         L     R2,FDBK                 LOAD ADDR OF FDBK    PARM
         XC    0(4,R2),0(R2)           ZERO FDBK
*
*     LOAD AND CHECK THE ACB ADDRESS
*
         L     R10,ACBADDR             LOAD POINTER TO ACB ADDR
         L     R10,0(R10)              LOAD ACB ADDR
         N     R10,=X'7FFFFFFF'        TURN OFF HIGH ORDER BIT OF ADDR
         L     R2,16(0)                LOAD ADDR OF CVT
         C     R10,128(R2)             COMPARE ADDR TO MIN USER ADDR
         BL    BADACBAD                BRANCH IF LESS THAN MIN
         C     R10,416(R2)             COMPARE ADDR TO MAX USER ADDR
         BH    BADACBAD                BRANCH IF MORE THAN MAX
         CLI   0(R10),X'A0'            IS IT REALLY AN ACB?
         BE    OKACBAD
BADACBAD L     R2,FLAG                 LOAD ADDR OF FLAG    PARM
         MVC   0(4,R2),=F'5'           RETURN FLAG
         B     RETURN                  AND QUIT
OKACBAD  EQU   *
*
*     LOAD AND CHECK THE RPL ADDRESS
*
         L     R9,RPLADDR              LOAD POINTER TO RPL ADDR
         L     R9,0(R9)                LOAD RPL ADDR
         N     R9,=X'7FFFFFFF'         TURN OFF HIGH ORDER BIT OF ADDR
         L     R2,16(0)                LOAD ADDR OF CVT
         C     R9,128(R2)              COMPARE ADDR TO MIN USER ADDR
         BL    BADRPLAD                BRANCH IF LESS THAN MIN
         C     R9,416(R2)              COMPARE ADDR TO MAX USER ADDR
         BH    BADRPLAD                BRANCH IF MORE THAN MAX
         CLI   0(R9),X'00'             IS IT REALLY AN RPL?
         BE    OKRPLAD
BADRPLAD L     R2,FLAG                 LOAD ADDR OF FLAG    PARM
         MVC   0(4,R2),=F'6'           RETURN FLAG
         B     RETURN                  AND QUIT
OKRPLAD  EQU   *
*
*     IF PUT OR UPDATE, TEST THE RECORD LENGTH
*
         L     R2,ACTION               LOAD ADDR OF ACTION
         CLI   0(R2),C'P'              IS IT A PUT?
         BE    CHECKLEN
         CLI   0(R2),C'U'              IS IT AN UPDATE?
         BNE   OKRLEN
CHECKLEN L     R4,RECLEN               LOAD ADDR OF RECLEN
         L     R4,0(R4)                LOAD RECLEN
         LTR   R4,R4                   CHECK THE LENGTH
         BM    BADRLEN                 IF NEGATIVE, MUST BE BAD
         LA    R2,SHOWAREA             LOAD ADDR OF SHOWAREA
         SHOWCB ACB=(R10),AREA=(R2),LENGTH=4,FIELDS=(LRECL)
         LTR   R15,R15                 TEST THE RETURN CODE
         BNZ   BADSHOW
         C     R4,SHOWAREA             COMPARE LENGTHS
         BNH   OKRLEN
BADRLEN  L     R2,FLAG                 LOAD ADDR OF FLAG    PARM
         MVC   0(4,R2),=F'7'           RETURN FLAG
         B     RETURN                  AND QUIT
OKRLEN   EQU   *
*
*     IF A GET, TEST AREALEN
*
         L     R2,ACTION               LOAD ADDR OF ACTION
         CLI   0(R2),C'G'              IS IT A GET?
         BNE   OKAREALN
         L     R4,AREALEN              LOAD ADDR OF AREALEN
         L     R4,0(R4)                LOAD AREALEN
         LTR   R4,R4                   CHECK THE LENGTH
         BM    BADALEN                 IF NEGATIVE, MUST BE BAD
         C     R4,=F'32767'            CHECK THE LENGTH
         BNH   OKAREALN                IF<32K, OK
BADALEN  L     R2,FLAG                 LOAD ADDR OF FLAG    PARM
         MVC   0(4,R2),=F'9'           RETURN FLAG
         B     RETURN                  AND QUIT
OKAREALN EQU   *
*
*     MAKE THE REQUIRED MODS TO THE RPL
*
         L     R2,AREA                 LOAD ADDR OF AREA
         L     R3,AREALEN              LOAD ADDR OF AREALEN
         L     R3,0(R3)                LOAD AREALEN
         L     R4,RECLEN               LOAD ADDR OF RECLEN
         L     R4,0(R4)                LOAD RECLEN
         L     R5,ARG                  LOAD ADDR OF ARG
         MODCB RPL=(R9),                                               X
               AREA=(R2),                                              X
               AREALEN=(R3),                                           X
               RECLEN=(R4),                                            X
               ARG=(R5),                                               X
               OPTCD=(KEY,SEQ,ARD,FWD,SYN,NUP,KEQ,FKS,MVE)
         LTR   R15,R15                 TEST RETURN CODE
         BNZ   BADMOD
*
*     NOW MAKE ANY OPTIONAL MODS REQUESTED TO THE RPL
*
         LA    R3,PARMLEN-4(R11)       POINT TO ADDR OF LAST REAL PARM
OPTLOOP  TM    0(R3),X'80'             TEST HIGH ORDER BIT
         BO    ENDOPT                  IF ON, THAT WAS THE LAST OPTION
         LA    R3,4(R3)                POINT TO NEXT PARM
         L     R4,0(R3)                LOAD THE ADDR OF THE PARM
         CLC   0(3,R4),=C'DMY'         "DMY" OPTION SPECIFIED?
         BE    OPTLOOP                 IF SO, NO NEED TO MODIFY
         CLC   0(3,R4),=C'ADR'         "ADR" OPTION SPECIFIED?
         BNE   NOTADR
         MODCB RPL=(R9),OPTCD=(ADR)
         B     CHECKOPT
NOTADR   EQU   *
         CLC   0(3,R4),=C'DIR'         "DIR" OPTION SPECIFIED?
         BNE   NOTDIR
         MODCB RPL=(R9),OPTCD=(DIR)
         B     CHECKOPT
NOTDIR   EQU   *
         CLC   0(3,R4),=C'LRD'         "LRD" OPTION SPECIFIED?
         BNE   NOTLRD
         MODCB RPL=(R9),OPTCD=(LRD)
         B     CHECKOPT
NOTLRD   EQU   *
         CLC   0(3,R4),=C'BWD'         "BWD" OPTION SPECIFIED?
         BNE   NOTBWD
         MODCB RPL=(R9),OPTCD=(BWD)
         B     CHECKOPT
NOTBWD   EQU   *
         CLC   0(3,R4),=C'NSP'         "NSP" OPTION SPECIFIED?
         BNE   NOTNSP
         MODCB RPL=(R9),OPTCD=(NSP)
         B     CHECKOPT
NOTNSP   EQU   *
         CLC   0(3,R4),=C'KGE'         "KGE" OPTION SPECIFIED?
         BNE   NOTKGE
         MODCB RPL=(R9),OPTCD=(KGE)
         B     CHECKOPT
NOTKGE   EQU   *
         L     R2,FLAG                 LOAD ADDR OF FLAG    PARM
         MVC   0(4,R2),=F'2'           RETURN FLAG
         B     RETURN                  AND QUIT
CHECKOPT LTR   R15,R15                 TEST RETURN CODE
         BNZ   BADMOD
         B     OPTLOOP                 GO GET NEXT OPTION
ENDOPT   EQU   *
*
*     PERFORM THE REQUEST - GET
*
         L     R2,ACTION               LOAD ADDR OF ACTION
         CLI   0(R2),C'G'              IS IT A GET
         BNE   NOTGET
         GET   RPL=(R9)                READ A RECORD
         LTR   R15,R15
         BNZ   COMPLETE
         LA    R2,SHOWAREA             LOAD ADDR OF SHOWAREA
         SHOWCB RPL=(R9),AREA=(R2),LENGTH=4,FIELDS=(RECLEN)
         LTR   R15,R15                 TEST THE RETURN CODE
         BNZ   BADSHOW
         L     R4,RECLEN               LOAD ADDR OF RECLEN
         MVC   0(4,R4),SHOWAREA        RETURN RECLEN
         B     COMPLETE
*
*     PERFORM THE REQUEST - PUT
*
NOTGET   CLI   0(R2),C'P'              IS IT A PUT
         BNE   NOTPUT
         PUT   RPL=(R9)                WRITE A RECORD
         B     COMPLETE
*
*     PERFORM THE REQUEST - ERASE
*
NOTPUT   CLI   0(R2),C'E'              IS IT AN ERASE
         BNE   NOTERASE
         LA    R2,DUMMY                LOAD ADDR OF DUMMY RETURN AREA
         MODCB RPL=(R9),AREA=(R2),OPTCD=(UPD,LOC)
*              MAKE MODS NECESSARY FOR UPDATE AND LOCATE
         LTR   R15,R15
         BNZ   BADMOD
         GET   RPL=(R9)                READ THE RECORD
         LTR   R15,R15                 TEST R15
         BNZ   COMPLETE
         L     R2,AREA                 LOAD ADDR OF AREA
         MODCB RPL=(R9),AREA=(R2),OPTCD=(MVE) CHANGE RPL BACK TO NORMAL
         LTR   R15,R15
         BNZ   BADMOD
         ERASE RPL=(R9)                DELETE THE RECORD
         B     COMPLETE
*
*     PERFORM THE REQUEST - UPDATE
*
NOTERASE CLI   0(R2),C'U'              IS IT AN UPDATE
         BNE   NOTUPDAT
         LA    R2,DUMMY                LOAD ADDR OF DUMMY RETURN AREA
         MODCB RPL=(R9),AREA=(R2),OPTCD=(UPD,LOC)
*              MAKE MODS NECESSARY FOR UPDATE AND LOCATE
         LTR   R15,R15
         BNZ   BADMOD
         GET   RPL=(R9)                READ THE RECORD
         LTR   R15,R15                 TEST R15
         BNZ   COMPLETE
         L     R2,AREA                 LOAD ADDR OF AREA
         L     R4,RECLEN               LOAD ADDR OF RECLEN
         L     R4,0(R4)                LOAD RECLEN
         MODCB RPL=(R9),AREA=(R2),RECLEN=(R4),OPTCD=(MVE)
*              CHANGE RPL BACK TO NORMAL AND STUFF IN RECLEN
         LTR   R15,R15
         BNZ   BADMOD
         PUT   RPL=(R9)                WRITE THE RECORD
         B     COMPLETE
NOTUPDAT L     R2,FLAG                 LOAD ADDR OF FLAG    PARM
         MVC   0(4,R2),=F'3'           RETURN FLAG
         B     RETURN                  AND QUIT
COMPLETE EQU   *
         LTR   R15,R15                 TEST THE RETURN CODE
         BZ    RETURN                  IT'S OK
         L     R2,REG15                LOAD ADDR OF REG15   PARM
         ST    R15,0(R2)               RETURN REG15
         LA    R2,SHOWAREA             LOAD ADDR OF SHOWAREA
         SHOWCB RPL=(R9),AREA=(R2),LENGTH=4,FIELDS=(FDBK)
         LTR   R15,R15                 TEST THE RETURN CODE
         BNZ   BADSHOW
         L     R2,FDBK                 LOAD ADDR OF FDBK    PARM
         MVC   0(4,R2),SHOWAREA        RETURN FDBK
         L     R2,FLAG                 LOAD ADDR OF FLAG    PARM
         MVC   0(4,R2),=F'4'           RETURN FLAG
         B     RETURN                  AND QUIT
*
*     AN ERROR OCCURRED PERFORMING A MODCB
*
BADMOD   L     R2,REG15                LOAD ADDR OF REG15   PARM
         ST    R15,0(R2)               RETURN REG15
         L     R2,REG0                 LOAD ADDR OF REG0    PARM
         ST    R0,0(R2)                RETURN REG0
         L     R2,FLAG                 LOAD ADDR OF FLAG    PARM
         MVC   0(4,R2),=F'1'           RETURN FLAG
         B     RETURN                  AND QUIT
*
*     AN ERROR OCCURRED PERFORMING A SHOWCB
*
BADSHOW  L     R2,REG15                LOAD ADDR OF REG15   PARM
         ST    R15,0(R2)               RETURN REG15
         L     R2,REG0                 LOAD ADDR OF REG0    PARM
         ST    R0,0(R2)                RETURN REG0
         L     R2,FLAG                 LOAD ADDR OF FLAG    PARM
         MVC   0(4,R2),=F'8'           RETURN FLAG
         B     RETURN                  AND QUIT
*
*     TERMINATE
*
RETURN   EQU   *
         SLR   R15,R15                 ZERO R15
         LR    R1,R13                  SAVE PTR TO GETMAINED SAVE AREA
         LR    R2,R15                  SAVE RETURN CODE
         L     R13,SAVEAREA+4          LOAD ADDR OF CALLING SAVE AREA
         FREEMAIN R,LV=WORKSIZE,A=(R1) FREE THE CORE WE GOT
         LR    R15,R2                  PUT RETURN CODE IN R15
         L     R14,12(R13)             RESTORE R14
         LM    R0,R12,20(R13)          RESTORE R0 THROUGH R12
         BR    R14                     RETURN
*
*     CONSTANTS
*
         LTORG
*
*     DSECTS
*
WORKAREA DSECT
SAVEAREA DS    18F
         DS    0F
PARMSTRT EQU   *
ACBADDR  DS    F                       ADDR OF THIS PARM
RPLADDR  DS    F                       ETC
ACTION   DS    F                       ETC
AREA     DS    F                       ETC
AREALEN  DS    F                       ETC
RECLEN   DS    F                       ETC
ARG      DS    F                       ETC
FLAG     DS    F
REG15    DS    F
REG0     DS    F
FDBK     DS    F
PARMLEN  EQU   *-PARMSTRT
SHOWAREA DS    F                       A RETURN AREA FOR SHOWCB
DUMMY    DS    F                       A DUMMY RETURN AREA FOR GET
WORKSIZE EQU   *-WORKAREA
         END   VSAM$R
