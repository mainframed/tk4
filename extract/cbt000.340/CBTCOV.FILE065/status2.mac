STAT2  TITLE 'OBTAIN JOB, STC, TSU, JOE STATUS FROM JES2'   *HMD 01/83*
***********************************************************************
*                                                                     *
*                                                                     *
*                              STATJES2                               *
*                                                                     *
*                                                                     *
* ABSTRACT: RETURN JES2 JOB QUEUE AND JOB OUTPUT ELEMENTS FOR         *
*           INPUT JOB NAMES. KEEP A RECORD OF JQE'S AND JOE'S      ×  *
*           BY ROUTE CODE FOR LATER QUEUE POSITION INQUIRY.        ×  *
*                                                                     *
*                                                                     *
* FUNCTION: STATJES2 RECEIVES A JOB NAME LIST, A WORK AREA, AND A     *
*           RETURN AREA AS INPUT. STATJES2 ASSUMES IT'S RUNNING    ×  *
*           UNDER A JES2 ADDRESS SPACE.  STATJES2 SEARCHES THE     ×  *
*           JES2'S JOB QUEUES AND OUTPUT TABLE FOR JOB QUEUE          *
*           ELEMENTS (JQES) AND JOB OUTPUT ELEMENTS (JOES) THAT       *
*           MATCH THE INPUT JOB NAMES.  THOSE JQES AND JOES THAT      *
*           MATCH THE INPUT JOB NAMES ARE RETURNED TO THE CALLER      *
*           IN THE RETURN AREA.                                       *
*                                                                     *
*           STATJES2 VERIFIES THAT IT IS RUNNING UNDER JES2 OR AN  ×  *
*           ALTERNATE JES BY LOCATING THE HASP COMMUNICATION       ×  *
*           TABLE (HCT). IF STATJES2 IS UNABLE TO LOCATE THE HCT,  ×  *
*           STATJES2 RETURNS CONTROL TO HER CALLER WITH A RETURN   ×  *
*           CODE OF 4. STATJES2 CHECKS ALL OF JES2'S JOB QUEUES       *
*           FOR JQES THAT HAVE JOB NAMES WHICH MATCH 1 OF THE         *
*           INPUT JOB NAMES. THOSE JQES THAT MATCH ARE RETURNED.      *
*           IF NO JQES MATCH, STATJES2 RETURNS CONTROL TO HER         *
*           CALLER. AFTER ALL JOB QUEUES HAVE BEEN SEARCHED,          *
*           STATJES2 SEARCHES THE JOB OUTPUT TABLE FOR JOES WHOSE     *
*           ASSOCIATED JQES HAVE JOB NAMES THAT MATCH 1 OF THE        *
*           INPUT JOB NAMES. MATCHING JOES ARE RETURNED. IF AT        *
*           ANY TIME, STATJES2 FILLS THE RETURN AREA, STATJES2        *
*           RETURNS CONTROL TO HER CALLER WITH A RETURN CODE OF 8. ×  *
*                                                                     *
*           STATJES2 SEARCHES FOR THE JES2 HCT BY TRYING TO FIND   ×  *
*           A TCB WHOSE 1ST RB IS EXECUTING A LOAD MODULE WHOSE    ×  *
*           1ST 4 BYTES ARE C'$VERSION'.  IF STATJES2 IS UNABLE    ×  *
*           TO LOCATE SUCH A TCB, CONTROL IS RETURNED TO THE       ×  *
*           CALLER WITH A RETURN CODE OF 4.                        ×  *
*                                                                     *
*           MOST ALL OF THE FOLLOWING CODE COMES FROM JES2'S COMMAND  *
*           HANDLING ROUTINE - HASPCOMM.                              *
*                                                                     *
*           TO LET STATUS (OUR TRUE CALLER) DISPLAY A QUEUED JOB'S    *
*           POSITION ON ITS QUEUE, STATJES2 PROCESSES AS FOLLOWS:     *
*                                                                     *
*           THERE IS A SEPARATE JOB QUEUE FOR EACH ALLOWABLE JOB      *
*           CLASS. EACH TIME STATJES2 BEGINS SCANNING A NEW JOB       *
*           QUEUE, SHE ZEROES OUT A QUEUE COUNT. THIS COUNT IS INCRE- *
*           MENTED EACH TIME A NON-ACTIVE JQE (CORRESPONDING TO A     *
*           NON-EXECUTING JOB) IS FOUND ON THE QUEUE. WHEN A MATCHING *
*           JQE IS RETURNED, THIS COUNT IS RETURNED WITH THE JQE. THE *
*           COUNT AT THAT TIME IS THE JQE'S POSITION ON THE QUEUE.    *
*           WHEN THE END OF A JOB QUEUE IS REACHED, THE QUEUE COUNT   *
*           AT THAT TIME IS RETURNED IN ALL RETURNING JQES FOR THAT   *
*           QUEUE. THE COUNT AT THAT TIME IS THE TOTAL NUMBER OF JQES *
*           IN THE QUEUE.                                             *
*                                                                     *
*           SIMILAR, THOUGH SLIGHTLY MORE COMPLICATED, PROCESSING IS  *
*           DONE FOR THE JOB OUTPUT TABLE. THERE IS A SEPARATE JOB    *
*           OUTPUT QUEUE FOR EACH ALLOWABLE OUTPUT CLASS. SINCE OUT-  *
*           PUT CAN BE ROUTED TO NUMEROUS LOCATIONS, A JOB'S OUTPUT   *
*           QUEUE POSITION REALLY DEPENDS ON ITS OUTPUT ROUTE AS WELL *
*           AS ITS CLASS.                                             *
*                                                                     *
*           FOR THIS REASON, STATJES2 RE-INITIALIZES A ROUTE COUNT    *
*           TABLE EACH TIME IT BEGINS PROCESSING A DIFFERENT OUTPUT   *
*           CLASS QUEUE. THIS TABLE CONTAINS THE DIFFERENT ROUTES     *
*           AND THE NUMBER OF HITS TO THESE ROUTES. THIS TABLE IS     *
*           USED SIMILARLY TO THE QUEUE COUNT ABOVE TO GIVE A JOB'S   *
*           OUTPUT QUEUE POSITION AND QUEUE TOTAL.                    *
*                                                                     *
*                                                                     *
* RELEASE                                                             *
* INFO      TO SUPPORT NJE RELEASE 3.0 CHANGE THE SET SYMBOL          *
*           &NJE BELOW TO 1. FOR NORMAL JES2 SUPPORT CHANGE THE       *
*           SET SYMBOL TO ZERO (0).                                   *
*                                                                     *
*           OUTPUT DISPLAYS FOR NJE ARE SIMILAR TO JES2 DISPLAYS.     *
*           SUCH NJE THINGS AS NODE INFO AND THE XMIT QUEUE WILL      *
*           NOT BE SHOWN.                                             *
*                                                                     *
*           TO SUPPORT MVS/SP 1.3 JES2 CHANGE THE SET SYMBOL &SP3  ×  *
*           TO 1. SINCE MVS/SP SUPPORT INCLUDES NJE, THE NJE SET   ×  *
*           SYMBOL IS SET TO 1 AUTOMATICALLY VIA CONDITIONAL       ×  *
*           ASSEMBLY.                                              ×  *
*                                                                     *
*           MVS/SP 1.3 SUPPORT COURTESY OF:                        ×  *
*                                                                  ×  *
*                 HOWARD M. DEAN                                   ×  *
*                 GTE DATA SERVICES                                ×  *
*                 4750 LINCOLN BLVD.                               ×  *
*                 MARINA DEL REY, CA 90291                         ×  *
*                 (213) 821-0511 X330                              ×  *
*                                                                  ×  *
*           CHANGES TO THE DOCUMENTATION FOR THIS RELEASE ARE      ×  *
*           NOTED VIA A BAR TO THE RIGHT OF EACH CHANGED LINE      ×  *
*           THIS DOCUMENTATION BLOCK.                              ×  *
*                                                                  ×  *
* MODS      FOR SUGGESTIONS AND INFORMATION CONTACT:                  *
*                                                                     *
*           HOWARD M. DEAN                                            *
*           GTE DATA SERVICES                                         *
*           4750 LINCOLN BLVD.                                        *
*           MARINA DEL REY, CALIF 90291                               *
*           PHONE - (213) - 821-0511                                  *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*                                                                     *
* INPUT: R1 -> A(JOB NAME LIST)                                       *
*              A(WORK AREA)                                           *
*              A(RETURN AREA)                                         *
*                                                                     *
*                                                                     *
* OUTPUT: RETURN AREA <- MATCHED JQES AND JOES                        *
*                                                                     *
*                                                                     *
* RETURN CODES: R15 = 0 => NO ERRORS, SEE RETURN AREA + 4 FOR         *
*                          H'# OF RETURNED JQES' FOLLOWED BY A        *
*                          H'# OF RETURNED JOES'                      *
*                     4 => UNABLE TO LOCATE JES2'S HCT                *
*                     8 => FILLED RETURN AREA                         *
*                                                                     *
*                                                                     *
* MACROS USED: SAVE                                                   *
*              RETURN                                                 *
*              $HCT                                                   *
*              $JQE                                                   *
*              $JOE                                                   *
*              $JOT                                                   *
*              IHAPSA                                                 *
*              IHAASCB                                                *
*              IHAASXB                                                *
*              IKJTCB                                                 *
*                                                                     *
*                                                                     *
* ATTRIBUTES: REENTRANT, RESIDENT                                     *
*                                                                     *
*                                                                     *
* DEPENDENCY: SINCE STATJES2 IS EXECUTED UNDER AN SRB, IT CANNOT      *
*             EXECUTE ANY SVC'S.                                      *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
         GBLB  &SP3,&NJE      MVS/SP 1.3/NJE INDICATORS     *HMD 01/83*
         GBLC  &VERSION       JES2 VERSION                  *HMD 01/83*
&SP3     SETB  1              MVS/SP 1.3 INDICATOR          *HMD 01/83*
&NJE     SETB  0              SET NJE INDICATOR             *HMD 10/80*
&VERSION SETC  'JES2 4.1'     FOR HCT                       *HMD 01/83*
         AIF   (NOT &SP3).JES1A                             *HMD 01/83*
&NJE     SETB  1              IF SP3 SET THEN NJE SET       *HMD 01/83*
.JES1A   ANOP                                               *HMD 01/83*
STATJES2 CSECT                GET JOB INFO FROM JES2
         SAVE  (14,12),,STATJES2_COPYRIGHT_(C)_1983_HOWARD_M_DEAN
         LR    RBASE,R15      A(STATJES2)
         USING STATJES2,RBASE ADDRESSABILITY
         USING PARMS,R1       INPUT PARAMETER ADDRESSABILITY
         B     BEGIN          BRANCH AROUND MODULE ID       *HMD 01/83*
*                                                           *HMD 01/83*
ID       DC    CL32' ASSEMBLED ON &SYSDATE AT &SYSTIME'     *HMD 01/83*
         DC    CL32' RELEASE 4-&NJE-&SP3'                   *HMD 01/83*
*                                                           *HMD 01/83*
BEGIN    LM    RWORK,RET,WORKAD A(WORK AREA),A(RETURN AREA)
         USING WORKAREA,RWORK ADDRESSABILITY
         DROP  R1             UNNECESSARY
         BAL   RLINK,FINDHCT  HASP COMMUNICATION TABLE AVAILABLE?
         B     GOTHCT         YES => SEARCH THE HASP QUEUES
         LA    R15,4          NO => LET OUR CALLER KNOW
         B     RETURN         RETURN TO OUR CALLER
GOTHCT   BAL   RLINK,SETUPJQE INITIALIZE OUR VARIABLES
ANOTHER  BAL   RLINK,GETAJQE  LOOKED AT ALL JOB Q ELEMENTS?
         B     CHECKJOB       NO => LOOK AT THE CURRENT 1
         B     GOTJQES        YES => CHECK OUT ACTIVE DEVICES
CHECKJOB BAL   RLINK,JQECHECK CURRENT JQE MATCH AN INPUT JOBNAME?
         B     MATCHED        YES => RETURN THE JQE TO OUR CALLER
         B     ANOTHER        NO => GET ANOTHER JQE
MATCHED  BAL   RLINK,JQEMATCH RETURN THE MATCHED JQE
         B     ANOTHER        GET ANOTHER JQE
         BAL   RLINK,SETUPJOE RETURN THE JQE MATCH COUNT
         B     FILLRET        TELL OUR CALLER WE FILLED THE RET AREA
GOTJQES  BAL   RLINK,SETUPJOE SET UP JOE VARIABLES
         LH    R1,4(RET)      # OF MATCHED JQES
         LTR   R1,R1          ANY MATCHES?
         BZ    DONE           NO => TELL OUR CALLER
GETJOES  BAL   RLINK,GETAJOE  CHECKED ALL ACTIVE DEVICES?
         B     CHECKIT        NO => CHECK THE CURRENT 1
         B     DONE           YES => RETURN TO OUR CALLER
CHECKIT  BAL   RLINK,JOECHECK CURRENT JOE MATCH AN INPUT JOBNAME?
         B     MATCHES        YES => RETURN THE JOE TO OUR CALLER
         B     GETJOES        NO => GET ANOTHER JOE
MATCHES  BAL   RLINK,JOEMATCH RETURN THE MATCHED JOE
         B     GETJOES        GET ANOTHER JOE
         BAL   RLINK,SETDOWN  RETURN THE JOE MATCH COUNT
FILLRET  LA    R15,8          INDICATE A FILLED RETURN AREA
         B     RETURN         RETURN TO OUR CALLER
DONE     BAL   RLINK,SETDOWN  RETURN ALL INFO TO OUR CALLER
RETURN   RETURN (14,12),RC=(15) RETURN TO OUR CALLER
         EJECT
         USING PSA,R0         PSA ADDRESSABILITY
FINDHCT  L     R1,PSAAOLD     A(JES2 ASCB)
         USING ASCB,R1        ADDRESSABILITY
         L     R1,ASCBASXB    A(ASXB)
         USING ASXB,R1        ADDRESSABILITY
         L     R15,ASXBFTCB   A(JES2'S 1ST TCB)
         USING TCB,R15        ADDRESSABILITY
         L     R15,TCBJSTCB   A(JES2'S JOB STEP TCB)
         N     R15,ZEROFFF    PURIFY THE REGISTER           *HMD 01/83*
LOOKHCT  L     R1,TCBRBP      A(RB)
         USING RBBASIC,R1     ADDRESSABILITY
FINDRB   L     R14,RBLINK     A(NEXT RB OR TCB)
         N     R14,ZEROFFF    PURIFY THE REGISTER           *HMD 01/83*
         CR    R14,R15        FOUND THE TCB'S 1ST PRB?
         BE    GOTRB          YES => GET THE HCT
         LR    R1,R14         A(NEXT RB)
         B     FINDRB         SEARCH ON FOR THE 1ST PRB
GOTRB    L     R1,RBCDE       A(CDE)
         USING CDENTRY,R1     ADDRESSABILITY
         L     RHCT,CDENTPT   A(HCT)
         USING HCTDSECT,RHCT  ADDRESSABILITY
         CLC   JES2,$VERSION  FOUND THE JES2 HCT?
         BER   RLINK          YES => TELL OUR CALLER
         L     R15,TCBLTC     A(THIS TCB'S DAUGHTER)
         N     R15,ZEROFFF    PURIFY THE REGISTER           *HMD 01/83*
         LTR   R15,R15        TCB HAVE A DAUGHTER?
         BNZ   LOOKHCT        YES => SEE IF ITS THE 1 WE WANT
         B     4(RLINK)       LET OUR CALLER KNOW IT'S NOT AROUND
         DROP  R0,R1,R15      UNNECESSARY
         SPACE 5
         AIF   (&NJE).RELA                                  *HMD 08/80*
JES2     DC    CL4'JES2'      JES2 HCT INDICATOR
         AGO   .RELB                                        *HMD 01/83*
.RELA    ANOP                                               *HMD 08/80*
         AIF   (&SP3).SPA                                   *HMD 01/83*
JES2     DC    CL4'REL '      NJE RELEASE INDICATOR         *HMD 08/80*
         AGO   .RELB          BRANCH AROUND SP3 CODE        *HMD 01/83*
.SPA     ANOP                                               *HMD 01/83*
JES2     DC    CL4'SP R'      MVS/SP 1.3 RELEASE INDICATOR  *HMD 01/83*
.RELB    ANOP                                               *HMD 08/80*
         EJECT
SETUPJQE LR    R1,RET         A(RETURN AREA)
         A     R1,0(R1)       A(END OF RETURN AREA)
         ST    R1,RETEND      SAVE IT FOR LATER CHECKING
         LA    RRJQE,8(RET)   A(SPOT FOR THE 1ST RETURNED JQE)
         SR    R#JQES,R#JQES  NO JQES MATCHED AS YET
         AIF   (&SP3).L001                                  *HMD 01/83*
         LA    R#JQS,($JQTYPES+1)*2 SO GETAJQE              *HMD 01/83*
         LA    RJQE,ZERO-(JQECHAIN-JQE) WILL START          *HMD 01/83*
         AGO   .L002                                        *HMD 01/83*
.L001    ANOP                                               *HMD 01/83*
         LA    R#JQS,($JQTYPES+1)*$JQHEADL SO GETAJQE       *HMD 01/83*
         LA    RJQE,ZERO-(JQENEXT-JQE)     WILL START       *HMD 01/83*
.L002    ANOP                                               *HMD 01/83*
         LR    RJQE1,RRJQE    OFF RIGHT
         BR    RLINK          RETURN TO OUR CALLER
         SPACE 5
SETUPJOE STH   R#JQES,4(RET)  PASS THE # OF JQE MATCHES BACK
         SR    R#JOES,R#JOES  NO JOES MATCHED AS YET
         LR    RJOE1,RRJOE    DITTO
         LA    RJOE,ZERO-(JOENEXT-JOEDSECT) SO GETAJOE WILL
         LH    RCOFF,MINUS2   START OFF RIGHT
         BR    RLINK          RETURN TO OUR CALLER
         SPACE 2
         AIF   (&SP3).L030                                  *HMD 01/83*
MINUS2   DC    H'-2'          RCOFF INITIAL VALUE
         AGO   .L031                                        *HMD 01/83*
.L030    ANOP                                               *HMD 01/83*
MINUS2   DC    AL2(KZERO-JOTHEADL)  RCOFF INITIAL VALUE     *HMD 01/83*
.L031    ANOP                                               *HMD 01/83*
         SPACE 5
SETDOWN  STH   R#JOES,6(RET)  RETURN THE COUNT OF MATCHED JOES
         SR    R15,R15        RETURN CODE
         BR    RLINK          RETURN TO OUR CALLER
         EJECT
         USING JQE,RJQE       JQE ADDRESSABILITY
         AIF   (&SP3).L005                                  *HMD 01/83*
GETAJQE  LH    RJQE,JQECHAIN  H'OFFSET TO JQE / 4'
         N     RJQE,XFFFF     MAKE SURE ITS POSITIVE
         AGO   .L006                                        *HMD 01/83*
.L005    ANOP                                               *HMD 01/83*
GETAJQE  L     RJQE,JQENEXT   OFFSET TO NEXT JQE            *HMD 01/83*
         N     RJQE,ZEROFFF   INSURE OFFSET POSITIVE        *HMD 01/83*
.L006    ANOP                                               *HMD 01/83*
         BZ    ENDOFJQ        NO JQES ON CHAIN => NEXT JQ
         AIF   (&SP3).L007                                  *HMD 01/83*
         SLL   RJQE,2         ALIGN OFFSET
.L007    ANOP                                               *HMD 01/83*
         AL    RJQE,$JOBQPTR  A(JQE)
         TM    JQEFLAGS,QUEBUSY JQE OF AN EXECUTING JOB?
         BNZR  RLINK          YES => DON'T INCREMENT THE Q COUNT
         LH    R1,JQECOUNT    INCREMENT
         LA    R1,1(R1)       THE JQE
         STH   R1,JQECOUNT    COUNT
         BR    RLINK          RETURN TO OUR CALLER
ENDOFJQ  CLR   RJQE1,RRJQE    ANY MATCHED JQES?
         BNL   GETNXTJQ       NO => GET THE NEXT JOB Q
         MVC   JQETOTAL-JQE(L'JQETOTAL,RJQE1),JQECOUNT PUT IN TOTAL
         LA    RJQE1,JQELNGTH(RJQE1) A(NEXT RETURNED JQE)
         B     ENDOFJQ        TOTAL ALL MATCHED JQES
         AIF   (&SP3).L057                                  *HMD 01/83*
GETNXTJQ BCTR  R#JQS,R0       CHECKED ALL
         BCT   R#JQS,NEXTJQ   JOB QUEUES?
         B     4(RLINK)       YES => TELL OUR CALLER
         AGO   .L059                                        *HMD 01/83*
.L057    ANOP                                               *HMD 01/83*
GETNXTJQ SH    R#JQS,=AL2($JQHEADL)                         *HMD 01/83*
         BNP   4(RLINK)       ALL JOB QUEUES CHECKED?       *HMD 01/83*
.L059    ANOP                                               *HMD 01/83*
         AIF   (&SP3).L010                                  *HMD 01/83*
NEXTJQ   LA    RJQE,$JQHEADS-2-QUECHAIN(R#JQS) A(NEXT JQ HEAD)
         AGO   .L011                                        *HMD 01/83*
.L010    ANOP                                               *HMD 01/83*
NEXTJQ   LA    RJQE,$JQHEADS-$JQHEADL-QUENEXT(R#JQS)        *HMD 01/83*
*                             A(NEXT JOB QUEUE HEAD)        *HMD 01/83*
.L011    ANOP                                               *HMD 01/83*
         XC    JQECOUNT,JQECOUNT NO JQES AS YET
         LR    RJQE1,RRJQE    A(1ST RETURN JQE IN THIS Q)
         B     GETAJQE        GET A JQE FROM THE JOB Q
         DROP  RJQE           UNNECESSARY
         EJECT
         USING JOEDSECT,RJOE    JOE ADDRESSABILITY
         AIF   (&SP3).L012                                  *HMD 01/83*
GETAJOE  LH    RJOE,JOENEXT     NEXT JOE OFFSET / 4
         N     RJOE,XFFFF       END OF JOE'S FOR THIS CLASS?
         AGO   .L013                                        *HMD 01/83*
.L012    ANOP                                               *HMD 01/83*
GETAJOE  L     RJOE,JOENEXT     OFFSET TO NEXT JOE          *HMD 01/83*
         N     RJOE,ZEROFFF     PURIFY HIGH BYTE            *HMD 01/83*
.L013    ANOP                                               *HMD 01/83*
         BZ    NXTCLASS       YES => CHECK THE NEXT CLASS
         AIF   (&SP3).L014                                  *HMD 01/83*
         SLL   RJOE,2           NEXT JOE OFFSET
.L014    ANOP                                               *HMD 01/83*
         AL    RJOE,$JOTABLE    A(NEXT JOE)
         AIF   (&SP3).L015                                  *HMD 01/83*
         LH    RJQE,JOEJQE     ASSOCIATED JQE OFFSET / 4
         N     RJQE,XFFFF      ENSURE POSITIVE OFFSET       *HMD 01/83*
         SLL   RJQE,2          ASSOCIATED JQE OFFSET
         AGO   .L016                                        *HMD 01/83*
.L015    ANOP                                               *HMD 01/83*
         L     RJQE,JOEJQE     ASSOCIATE JQE OFFSET         *HMD 01/83*
         N     RJQE,ZEROFFF    PURIFY HIGH BYTE             *HMD 01/83*
.L016    ANOP                                               *HMD 01/83*
         AL    RJQE,$JOBQPTR   A(ASSOCIATED JQE)
         TM    JOEFLAG,$JOEBUSY ACTIVE JOE?
         BNZR  RLINK          YES => DON'T INCREMENT THE Q COUNT
         LA    R15,MAX#DEST   MAX # OF COUNTABLE DESTINATIONS
         LA    R1,DESTCNTS    A(DESTINATION COUNTERS)
         MVC   JOEROUTH,JOEROUT      MOVE THE ROUTE CODE    *HMD 01/83*
         AIF   (NOT &NJE).L020                              *HMD 01/83*
         AIF   (&SP3).L080                                  *HMD 01/83*
CHKDESTA CLI   JOEROUT,KZERO  Q. LOCAL DEVICE?              *HMD 01/83*
         BNE   CHKDESTB       A. NO, CHECK REMOTE           *HMD 01/83*
CHKDESTC MVI   JOEROUTH,C'L'  INDICATE LOCAL DEVICE         *HMD 01/83*
         B     CHKDEST        END THIS MESS                 *HMD 01/83*
CHKDESTB CLC   JOEROUT(1),$OWNNODE                          *HMD 01/83*
*                                Q. IS THIS OUR NODE?       *HMD 01/83*
         BNE   CHKDEST           A. NO, ANOTHER REMOTE      *HMD 01/83*
         CLI   JOEROUT+1,KZERO   Q. REMOTE ZERO?            *HMD 01/83*
         BE    CHKDESTC          A. YES, INDICATE LOCAL     *HMD 01/83*
         MVI   JOEROUTH,C'R'     INDICATE REMOTE DEVICE     *HMD 01/83*
         AGO   .L020             BRANCH AROUND MVS/SP CODE  *HMD 01/83*
.L080    ANOP                                               *HMD 01/83*
CHKDESTA CLC   JOERNODE,ZERO     Q. LOCAL DEVICE?           *HMD 01/83*
         BNE   CHKDESTB          A. NO, CHECK REMOTE        *HMD 01/83*
CHKDESTC MVI   JOEROUTH,C'L'     INDICATE LOCAL DEVICE      *HMD 01/83*
         MVI   JOEROUTH+1,KZERO  CLEAR NEXT BYTE            *HMD 01/83*
         B     CHKDEST           END THIS MESS              *HMD 01/83*
CHKDESTB CLC   JOERNODE,$OWNNODE Q. IS THIS OUR NODE?       *HMD 01/83*
         BNE   CHKDEST           A. NO, ANOTHER REMOTE      *HMD 01/83*
         CLC   JOEREMOT,ZERO     Q. REMOTE ZERO?            *HMD 01/83*
         BE    CHKDESTC          A. YES, INDICATE LOCAL     *HMD 01/83*
         MVI   JOEROUTH,C'R'     INDICATE REMOTE DEVICE     *HMD 01/83*
         MVI   JOEROUTH+1,KZERO  CLEAR NEXT BYTE            *HMD 01/83*
.L020    ANOP                                               *HMD 01/83*
CHKDEST  CLI   0(R1),X'FF'    END OF DESTINATION COUNTERS?
         BE    FIRSTDST       YES => THIS IS THE 1ST TO THIS DEST
         CLC   0(L'JOEROUT,R1),JOEROUTH      MATCH?         *HMD 01/83*
         BE    GOTDEST        YES => INCREMENT ITS COUNT
         LA    R1,DESTSIZE(,R1)
*                             A(NEXT DESTINATION COUNT)
         BCT   R15,CHKDEST    CHECKED ALL COUNTED DESTINATIONS?
         BR    RLINK          YES => CAN'T HANDLE THIS 1
FIRSTDST MVC   0(L'JOEROUT,R1),JOEROUTH                     *HMD 01/83*
         MVC   DESTSIZE-2(2,R1),=H'1'                       *HMD 01/83*
*                             1ST HIT ON THAT DESTINATION   *HMD 12/80*
         BR    RLINK          RETURN TO OUR CALLER          *HMD 12/80*
GOTDEST  LH    R15,DESTSIZE-2(,R1)                          *HMD 12/80*
*                             GET DESTINATION COUNTER       *HMD 01/83*
         N     R15,XFFFF      MAKE SURE ITS POSITIVE        *HMD 12/80*
         AH    R15,=H'1'      INCREMENT THEM                *HMD 12/80*
         STH   R15,DESTSIZE-2(,R1)                          *HMD 12/80*
*                             RESET THE COUNT               *HMD 01/83*
         BR    RLINK          LET OUR CALLER SEE THIS JOE'S JQE
         SPACE 2                                            *HMD 01/83*
NXTCLASS CLR   RJOE1,RRJOE    ANY RETURNED JOES?
         BNL   GETNXTCL       NO => GET THE NEXT CLASS
         ST    RLINK,JOEHOLD  SAVE OUR RETURN ADDRESS
SETOTAL  MVC   JOEROUTH(L'JOEROUT),JOEROUT-JOEDSECT(RJOE1)  *HMD 01/83*
         LA    R1,JOEROUTH    A(DESTINATION)                *HMD 01/83*
         AIF   (NOT &NJE).L023                              *HMD 01/83*
         AIF   (&SP3).L081                                  *HMD 01/83*
SETOTALA CLI   JOEROUT-JOEDSECT(RJOE1),KZERO                *HMD 01/83*
*                             Q. LOCAL DEVICE?              *HMD 01/83*
         BNE   SETOTALB       A. NO, CHECK REMOTE           *HMD 01/83*
SETOTALC MVI   JOEROUTH,C'L'  INDICATE LOCAL                *HMD 01/83*
         B     CALLFIND       END THIS MESS                 *HMD 01/83*
SETOTALB CLC   JOEROUT-JOEDSECT(1,RJOE1),$OWNNODE           *HMD 01/83*
*                                Q. IS THIS OUR NODE?       *HMD 01/83*
         BNE   CALLFIND          A. NO, ANOTHER REMOTE      *HMD 01/83*
         CLI   JOEROUT+1-JOEDSECT(RJOE1),KZERO              *HMD 01/83*
*                                Q. REMOTE ZERO?            *HMD 01/83*
         BE    SETOTALC          A. YES, MUST BE LOCAL      *HMD 01/83*
         MVI   JOEROUTH,C'R'     INDICATE REMOTE DEVICE     *HMD 01/83*
         AGO   .L023             BRANCH AROUND MVS/SP CODE  *HMD 01/83*
.L081    ANOP                                               *HMD 01/83*
SETOTALA CLC   JOERNODE-JOEDSECT(L'JOERNODE,RJOE1),ZERO     *HMD 01/83*
*                                Q. LOCAL DEVICE?           *HMD 01/83*
         BNE   SETOTALB          A. NO, CHECK REMOTE        *HMD 01/83*
SETOTALC MVI   JOEROUTH,C'L'     INDICATE LOCAL             *HMD 01/83*
         MVI   JOEROUTH+1,KZERO  CLEAR NEXT BYTE            *HMD 01/83*
         B     CALLFIND          END THIS MESS              *HMD 01/83*
SETOTALB CLC   JOERNODE-JOEDSECT(L'$OWNNODE,RJOE1),$OWNNODE *HMD 01/83*
*                                Q. IS THIS OUR NODE?       *HMD 01/83*
         BNE   CALLFIND          A. NO, ANOTHER REMOTE      *HMD 01/83*
         CLC   JOEREMOT-JOEDSECT(L'JOEREMOT,RJOE1),ZERO     *HMD 01/83*
*                                Q. REMOTE ZERO?            *HMD 01/83*
         BE    SETOTALC          A. YES, MUST BE LOCAL      *HMD 01/83*
         MVI   JOEROUTH,C'R'     INDICATE REMOTE DEVICE     *HMD 01/83*
         MVI   JOEROUTH+1,KZERO  CLEAR NEXT BYTE            *HMD 01/83*
.L023    ANOP                                               *HMD 01/83*
CALLFIND BAL   RLINK,FINDEST  FIND THE DESTINATION COUNT
         STH   R1,JOETOTAL-JOEDSECT(RJOE1) RETURN THE DEST TOTAL
         LA    RJOE1,JOESIZE(RJOE1) A(NEXT RETURNED JOE)
         CLR   RJOE1,RRJOE    TOTALED ALL RETURNED JOES?
         BL    SETOTAL        NO => KEEP IT UP
         L     RLINK,JOEHOLD  RESTORE THE RETURN ADDRESS
         AIF   (&SP3).L033                                  *HMD 01/83*
GETNXTCL LA    RCOFF,2(RCOFF) NEXT CLASS OFFSET
         CH    RCOFF,ENDCLASS CHECKED ALL CLASS OFFSETS?
         AGO   .L034                                        *HMD 01/83*
.L033    ANOP                                               *HMD 01/83*
GETNXTCL LA    RCOFF,JOTHEADL(RCOFF)  NEXT CLASS OFFSET     *HMD 01/83*
         CH    RCOFF,ENDCLASS         CHECKED ALL CLASSES?  *HMD 01/83*
.L034    ANOP                                               *HMD 01/83*
         BH    4(RLINK)       YES => TELL OUR CALLER
         L     R1,$JOTABLE    A(JOT)
         USING JOTDSECT,R1    ADDRESSABILITY
         LA    RJOE,JOTRDYWQ-(JOENEXT-JOEDSECT)(RCOFF) INITIALIZE
         DROP  R1             UNNECESSARY
*                                                           *HMD 01/83*
         LA    R14,DESTCNTS              SINK FIELD         *HMD 01/83*
         LA    R15,DESTEND-DESTCNTS      LENGTH OF FIELD    *HMD 01/83*
         SLR   R0,R0                     SOURCE FIELD       *HMD 01/83*
         LA    R1,255                    PAD BYTE           *HMD 01/83*
         SLL   R1,24                     SHIFT TO BYTE ZERO *HMD 01/83*
         MVCL  R14,R0                    M O V E L O N G    *HMD 01/83*
*                                                           *HMD 01/83*
         LR    RJOE1,RRJOE    NO JOES RETURNED AS YET
         B     GETAJOE        GET THE 1ST JOE IN THE CLASS
         DROP  RJOE           UNNECESSARY
         SPACE 5
         AIF   (&SP3).L050                                  *HMD 01/83*
ENDCLASS DC    AL2(L'JOTRDYWQ-2) # OF CLASS OFFSETS * 2
         AGO   .L051                                        *HMD 01/83*
.L050    ANOP                                               *HMD 01/83*
ENDCLASS DC    AL2(L'JOTRDYWQ-JOTHEADL) * OF CLASS OFFSETS  *HMD 01/83*
.L051    ANOP                                               *HMD 01/83*
         DS    0F
ZEROFFF  DC    F'16777215'    CLEAR HI BYTE                 *HMD 01/83*
XFFFF    DC    X'0000FFFF'    POSITIVE OFFSET INSURER
         AIF   (NOT &SP3).L054                              *HMD 01/83*
FULLZERO DC    F'0'           QUEUE OFFSET INSURER          *HMD 01/83*
ZERO     EQU   FULLZERO,4     CONSTANT OF ZERO
         AGO   .L055                                        *HMD 01/83*
.L054    ANOP                                               *HMD 01/83*
ZERO     EQU   XFFFF,2        HALFWORD CONSTANT OF ZERO     *HMD 01/83*
.L055    ANOP                                               *HMD 01/83*
         EJECT
JQECHECK L     R1,24(R13)     A(INPUT PARAMETERS)
         USING PARMS,R1       ADDRESSABILITY
         L     R14,JOBNAMES   A(INPUT JOB NAMES)
         DROP  R1             UNNECESSARY
         L     R1,0(R14)    LENGTH OF THE JOB PARM DATA
         SH    R1,FOUR        (# OF JOBS) * 10
         SR    R0,R0          FOR THE DIVIDE
         D     R0,TEN         # OF JOBS
         LA    R15,4(R14)   A(1ST JOB NAME ENTRY)
CHKJOBNM LH    R14,0(R15)     H'JOB NAME LENGTH'
         BCTR  R14,R0         FOR THE COMPARE
         EX    R14,CMPJOBS    JOB NAME MATCH?
         BER   RLINK          YES => LET OUR CALLER SEE IT
         LA    R15,10(R15)    A(NEXT JOB NAME ENTRY)
         BCT   R1,CHKJOBNM    CHECKED ALL JOB NAMES?
         B     4(RLINK)       YES => TELL OUR CALLER NO MATCH
         SPACE 5
CMPJOBS  CLC   QUEJNAME(0,RJQE),2(R15) TO BE EXECUTED
FOUR     DC    H'4'           HELPS GET # OF INPUT JOB NAMES
TEN      DC    F'10'          LENGTH OF AN INPUT JOB NAME ENTRY
         EJECT
JOECHECK LH    R1,4(RET)      # OF MATCHED JQES
         LA    R15,8(RET)     A(1ST RETURNED JQE)
CHKJOEMT CLC   QUEJOBNO(L'JQEJOBNO,R15),QUEJOBNO(RJQE) MATCH?
         BE    JOEMAT         YES => RETURN IT
         LA    R15,JQELNGTH(R15) A(NEXT RETURNED JQE)
         BCT   R1,CHKJOEMT    CHECKED ALL RETURNED JQES?
         B     4(RLINK)       YES => TELL CALLER NO MATCH
JOEMAT   SLR   R15,RET        OFFSET TO RETURNED JQE
         AIF   (&SP3).L070                                  *HMD 01/83*
         STH   R15,JOEJQEOF   PASS IT TO JOEMATCH
         AGO   .L071                                        *HMD 01/83*
.L070    ANOP                                               *HMD 01/83*
         ST    R15,JOEJQEOF   PASS IT TO JOEMATCH           *HMD 01/83*
.L071    ANOP                                               *HMD 01/83*
         BR    RLINK          RETURN TO OUR CALLER
         EJECT
         USING JQE,RJQE       JQE ADDRESSABILITY
JQEMATCH MVC   0(JQELNGTH,RRJQE),JQE RETURN THIS MATCHED JQE
         MVC   JQEPOSTN-JQE(L'JQEPOSTN,RRJQE),JQECOUNT RET THE POS
         LA    R#JQES,1(R#JQES) INCREMENT THE JQE MATCHED COUNT
         LA    RRJQE,JQELNGTH(RRJQE) A(SPOT FOR NEXT RETURN JQE)
         B     CHECKRET       SEE IF WE'VE FILLED THE RET AREA
         DROP  RJQE           UNNECESSARY
         EJECT
         USING JOEDSECT,RJOE  JOE ADDRESSABILITY
JOEMATCH ST    RLINK,JOEMHOLD SAVE THE RETURN ADDRESS
         MVC   0(JOESIZE,RRJOE),JOEDSECT RETURN THE JOE
         AIF   (&SP3).L075                                  *HMD 01/83*
         MVC   JOEJQE-JOEDSECT(L'JOEJQE,RRJOE),JOEJQEOF RET THE JQE
         AGO   .L076                                        *HMD 01/83*
.L075    ANOP                                               *HMD 01/83*
         MVC   JOEJQEB-JOEDSECT(L'JOEJQEB,RRJOE),JOEJQEOF+1 *HMD 01/83*
*                             RET THE JQE OFFSET            *HMD 01/83*
.L076    ANOP                                               *HMD 01/83*
         MVC   JOEROUTH(L'JOEROUT),JOEROUT   MOVE ROUTING   *HMD 01/83*
         LA    R1,JOEROUTH    A(JOE DESTINATION)            *HMD 12/80*
         AIF   (NOT &NJE).L040                              *HMD 01/83*
         AIF   (&SP3).L082                                  *HMD 01/83*
CHKROUTA CLI   JOEROUT,KZERO  Q. LOCAL DEVICE?              *HMD 01/83*
         BNE   CHKROUTB       A. NO, CHECK REMOTE           *HMD 01/83*
CHKROUTC MVI   JOEROUTH,C'L'  INDICATE LOCAL DEVICE         *HMD 01/83*
         B     CALLFDST       END THIS MESS                 *HMD 01/83*
CHKROUTB CLC   JOEROUT(1),$OWNNODE                          *HMD 01/83*
*                                Q. IS THIS OUR NODE?       *HMD 01/83*
         BNE   CALLFDST          A. NO, ANOTHER REMOTE      *HMD 01/83*
         CLI   JOEROUT+1,KZERO   Q. REMOTE ZERO?            *HMD 01/83*
         BE    CHKROUTC          A. YES, MUST BE LOCAL      *HMD 01/83*
         MVI   JOEROUTH,C'R'     INDICATE REMOTE DEVICE     *HMD 01/83*
         AGO   .L040                                        *HMD 01/83*
.L082    ANOP                                               *HMD 01/83*
CHKROUTA CLC   JOERNODE,ZERO    Q. LOCAL DEVICE?            *HMD 01/83*
         BNE   CHKROUTB         A. NO, CHECK REMOTE         *HMD 01/83*
CHKROUTC MVI   JOEROUTH,C'L'    INDICATE LOCAL DEVICE       *HMD 01/83*
         MVI   JOEROUTH+1,KZERO CLEAR NEXT BYTE             *HMD 01/83*
         B     CALLFDST         END THIS MESS               *HMD 01/83*
CHKROUTB CLC   JOERNODE,$OWNNODE Q. IS THIS OUR NODE?       *HMD 01/83*
         BNE   CALLFDST          A. NO, ANOTHER REMOTE      *HMD 01/83*
         CLC   JOEREMOT,ZERO     Q. REMOTE ZERO?            *HMD 01/83*
         BE    CHKROUTC          A. YES, INDICATE LOCAL     *HMD 01/83*
         MVI   JOEROUTH,C'R'     INDICATE REMOTE            *HMD 01/83*
         MVI   JOEROUTH+1,KZERO  CLEAR NEXT BYTE            *HMD 01/83*
.L040    ANOP                                               *HMD 01/83*
CALLFDST BAL   RLINK,FINDEST  FIND THE DESTINATION COUNT
         STH   R1,JOEPOSTN-JOEDSECT(RRJOE) RET THE JOE POSITION
         L     RLINK,JOEMHOLD RESTORE THE RETURN ADDRESS
         LA    R#JOES,1(R#JOES) INCREMENT THE JOE COUNT
         LA    RRJOE,JOESIZE(RRJOE) A(SPOT FOR NEXT RET JOE)
CHECKRET LA    R1,JOESIZE(RRJOE) A(END OF NEXT RET JOE)
         C     R1,RETEND      FILLED THE RETURN AREA?
         BLR   RLINK          NO => RETURN TO OUR CALLER
         B     4(RLINK)       YES => LET OUR CALLER KNOW
         DROP  RJOE           UNNECESSARY
         EJECT
FINDEST  LA    R15,MAX#DEST   MAX # OF COUNTABLE DESTINATIONS
         LA    R14,DESTCNTS   A(1ST COUNTED DESTINATION)
DESTCHK  CLI   0(R14),X'FF'   END OF COUNTED DESTINATIONS?
         BE    NODEST         YES => NO DESTINATION COUNT
         CLC   0(DESTSIZE-2,R14),0(R1)                      *HMD 01/83*
*                             DESTINATION MATCH?            *HMD 01/83*
         BE    DESTFND        YES => FOUND THE CALLER'S DESTINATION
         LA    R14,DESTSIZE(,R14)                           *HMD 01/83*
*                             A(NEXT DESTINATION)           *HMD 01/83*
         BCT   R15,DESTCHK    CHECKED ALL DESTINATIONS?
NODEST   SR    R1,R1          INDICATE DESTINATION
         BR    RLINK          NOT FOUND
DESTFND  LH    R1,DESTSIZE-2(,R14)                          *HMD 12/80*
         N     R1,XFFFF       MAKE SURE ITS POSITIVE        *HMD 12/80*
         BR    RLINK          RETURN TO OUR CALLER          *HMD 12/80*
IRVING   LTORG ,                                            *HMD 01/81*
         EJECT
R0       EQU   0                                            *HMD 01/83*
R1       EQU   1                                            *HMD 01/83*
R2       EQU   2                                            *HMD 01/83*
R3       EQU   3                                            *HMD 01/83*
R4       EQU   4                                            *HMD 01/83*
R5       EQU   5                                            *HMD 01/83*
R6       EQU   6                                            *HMD 01/83*
R7       EQU   7                                            *HMD 01/83*
R8       EQU   8                                            *HMD 01/83*
R9       EQU   9                                            *HMD 01/83*
R10      EQU   10                                           *HMD 01/83*
R11      EQU   11                                           *HMD 01/83*
R12      EQU   12                                           *HMD 01/83*
R13      EQU   13                                           *HMD 01/83*
R14      EQU   14                                           *HMD 01/83*
R15      EQU   15                                           *HMD 01/83*
         SPACE 2                                            *HMD 01/83*
KZERO    EQU   0              CONSTANT OF ZERO              *HMD 01/83*
RLINK    EQU   R2             INTERNAL LINK REGISTER
RBASE    EQU   R3             A(STATJES2)
RHCT     EQU   R4             A(HASP COMMUNICATION TABLE)
RJQE     EQU   R5             A(JOB QUEUE ELEMENT)
RWORK    EQU   R6             A(WORK AREA)
RET      EQU   R7             A(RETURN AREA)
RJOE     EQU   R8             A(JOB OUTPUT ELEMENT)
R#JQES   EQU   R9             # OF JOB QUEUE ELEMENTS MATCHED
R#JOES   EQU   R9             # OF JOB OUTPUT ELEMENTS MATCHED
RRJQE    EQU   R10            A(RETURNED JOB QUEUE ELEMENT)
RRJOE    EQU   R10            A(RETURNED JOB OUTPUT ELEMENT)
R#JQS    EQU   R11            JOB QUEUE COUNT
RCOFF    EQU   R11            CLASS OFFSET COUNT
RJQE1    EQU   R12            A(1ST RETURNED JOB Q ELEMENT / Q)
RJOE1    EQU   R12            A(1ST RETURNED JOE / CLASS)
         EJECT
BUFSTART EQU   0                                            *HMD 01/83*
BUFDSECT EQU   0                                            *HMD 01/83*
FF       EQU   255                                          *HMD 01/83*
BASE1    EQU   0
SAVE     EQU   0                                            *HMD 01/83*
JCT      EQU   0                                            *HMD 01/83*
$CMBDEF  EQU   0                                            *HMD 01/83*
$SMFDEF  EQU   0                                            *HMD 01/83*
$TGDEF   EQU   0                                            *HMD 01/83*
$JQEDEF  EQU   0                                            *HMD 01/83*
$MAXDA   EQU   0                                            *HMD 01/83*
$MAXNODE EQU   99                                           *HMD 01/83*
$MAXJBNO EQU   99                                           *HMD 01/83*
$RPS     EQU   X'80'
$MSGID   EQU   X'20'
$DUPVOLT EQU   X'04'
$PRIOOPT EQU   X'02'
$PRTBOPT EQU   X'80'
$PRTRANS EQU   X'08'
$QSONDA  EQU   X'80'
         AIF   (NOT &NJE).JES2A                             *HMD 01/83*
         $PCE                 PCE REQUIRED FOR NJE (NJE)    *HMD 08/80*
         AIF   (NOT &SP3).JES2A                             *HMD 01/83*
         $JCT                 JOB CONTROL TABLE             *HMD 01/83*
         $CAT                 CLASS ATTRIBUTE TABLE         *HMD 01/83*
.JES2A   ANOP                                               *HMD 08/80*
         $JQE
         $HCT
JQEPOSTN EQU   JQETRAK,2      JQE POSITION
JQETOTAL EQU   JQETRAK+2,2    QUEUE TOTAL
         $JOE
         AIF   (&SP3).L084                                  *HMD 01/83*
JOEPOSTN EQU   JOECKPT,2      JOE POSITION
JOETOTAL EQU   JOECHAR,2      QUEUE TOTAL
         AGO   .L085                                        *HMD 01/83*
.L084    ANOP                                               *HMD 01/83*
JOEPOSTN EQU   JOEIOTTR,2     JOE POSITION                  *HMD 01/83*
JOETOTAL EQU   JOEIOTTR+2,2   QUEUE TOTAL                   *HMD 01/83*
.L085    ANOP                                               *HMD 01/83*
         $JOT
         TITLE 'OBTAIN JOB, STC, TSU STATUS FROM JES2'      *HMD 10/80*
         IHAPSA
         EJECT                                              *HMD 12/79*
         IHAASCB
         EJECT                                              *HMD 12/79*
         IHAASXB
         EJECT                                              *HMD 12/79*
         IKJTCB  LIST=YES
         EJECT                                              *HMD 12/79*
         IHARB                OS/VS2 REQUEST BLOCK          *HMD 01/83*
         EJECT                                              *HMD 12/79*
         IHACDE               CONTENTS DIRECTORY ENTRY      *HMD 01/83*
         EJECT
PARMS    DSECT                INPUT PARAMETERS
JOBNAMES DS    A              A(INPUT JOB NAMES)
WORKAD   DS    A              A(WORK AREA)
RETAREA  DS    A              A(RETURN AREA)
         EJECT
WORKAREA DSECT                WORK AREA
         AIF   (&SP3).LARGE                                 *HMD 01/83*
DESTCNTS DS    XL512          DESTINATION COUNT TABLE       *HMD 12/80*
DESTEND  EQU   *              END OF DEST COUNT TABLE       *HMD 01/83*
DESTSIZE EQU   4              SIZE OF TABLE                 *HMD 01/83*
MAX#DEST EQU   (DESTEND-DESTCNTS)/DESTSIZE                  *HMD 01/18*
*                             # OF COUNTABLE DESTINATIONS   *HMD 01/83*
         AGO   .AROUND                                      *HMD 01/83*
.LARGE   ANOP                                               *HMD 01/83*
DESTCNTS DS    XL1024         DESTINATION COUNT TABLE       *HMD 01/83*
DESTEND  EQU   *              END OF DEST COUNT TABLE       *HMD 01/83*
DESTSIZE EQU   6              SIZE OF TABLE                 *HMD 01/83*
MAX#DEST EQU   (DESTEND-DESTCNTS)/DESTSIZE                  *HMD 01/18*
*                             # OF COUNTABLE DESTINATIONS   *HMD 01/83*
.AROUND  ANOP                                               *HMD 01/83*
RETEND   DS    A              A(END OF RETURN AREA)
JOEHOLD  DS    A              RETURN ADDRESS HOLD FOR GETAJOE
         AIF   (&SP3).L091                                  *HMD 01/83*
JOEJQEOF DS    H              JQE OFFSET FOR JOE
         AGO   .L092                                        *HMD 01/83*
.L091    ANOP                                               *HMD 01/83*
JOEJQEOF DS    F              JQE OFFSET FOR JOE            *HMD 01/83*
.L092    ANOP                                               *HMD 01/83*
JQECOUNT DS    H              COUNT OF JQES                 *HMD 01/81*
JOEMHOLD DS    A              RETURN ADDRESS HOLD FOR JOEMATCH
JOEROUTH DS    F              HOLD AREA FOR JOE ROUTE CODE  *HMD 01/83*
         END
