         ISEQ  73,80
AWEF     TITLE 'INTERNAL SORT'
***********************************************************************
*                                                                     *
*        ROUTINE NAME - INTERNAL SORT                                 *
*                DATE - 05/10/69                                      *
*                                                                     *
***********************************************************************
         SPACE 4
***********************************************************************
*                                                                     *
* THIS ROUTINE INCORPORATES CONCEPTS CONTAINED IN THE FOLLOWING       *
* REFERENCES:                                                         *
* 1. SINGLETON, RICHARD C.  ALGORITHM 347, SORT.  COMM. ACM 12        *
*      (MAR. 1969), 185.                                              *
* 2. SCOWEN, R. S.  ALGORITHM 271, QUICKERSORT.  COMM. ACM 8          *
*      (NOV. 1965), 669.                                              *
*                                                                     *
* THE ROUTINE SORTS THE ELEMENTS OF AN ARRAY "A" INTO ASCENDING ORDER.*
* IT RECURSIVELY SPLITS THE ARRAY INTO SUCCESSIVELY SMALLER SEGMENTS. *
* THE ORDERING OF ELEMENTS WITHIN A SEGMENT IS, IN GENERAL, RANDOM,   *
* BUT THE SEGMENTS ARE ORDERED SUCH THAT ALL ELEMENTS IN ANY ONE      *
* SEGMENT ARE LARGER THAN ALL ELEMENTS IN ANY PRECEDING SEGMENT, AND  *
* SMALLER THAN ALL ELEMENTS IN ANY SUCCEEDING SEGMENT.  THE ARRAY IS  *
* COMPLETELY SORTED WHEN THE SIZE OF ALL SEGMENTS IS REDUCED TO ONE   *
* ELEMENT.  ALTERNATIVELY, THE ARRAY IS COMPLETELY SORTED IF ALL      *
* SEGMENTS CONTAIN ONLY SORTED ELEMENTS.  ONE OF TWO DISTINCT         *
* ALGORITHMS MAY BE EMPLOYED TO SORT A SEGMENT, DEPENDING ON THE      *
* VALUE OF "MIN".                                                     *
*                                                                     *
* IF THE NUMBER OF ELEMENTS EXCEEDS THE VALUE SPECIFIED FOR "MIN",    *
* THEN THE SEGMENT IS SPLIT INTO TWO SMALLER SEGMENTS OF APPROXIMATELY*
* EQUAL SIZE SEPARATED BY A THIRD SEGMENT CONTAINING A SINGLE ELEMENT.*
*                                                                     *
* IF THE NUMBER OF ELEMENTS IS LESS THAN OR EQUAL TO "MIN", THEN THE  *
* SEGMENT IS SORTED BY THE "BUBBLE" TECHNIQUE.                        *
*                                                                     *
* THE ROUTINE APPEARS IN PL/I SOURCE CODE AS COMMENTS INTERSPERSED    *
* WITH THE ASSEMBLY LANGUAGE IMPLEMENTATION.                          *
* THE IMPLEMENTATION DIFFERS FROM THE SOURCE CODE IN THE FOLLOWING    *
* WAYS:                                                               *
* THE SUBSCRIPTS FOR "A" ARE REPLACED BY POINTERS TO THE ARRAY        *
* ELEMENTS.  FOR EXAMPLE, REGISTER "I" POINTS TO "A(I)".              *
* ELEMENTS ARE OF LENGTH "LN" INSTEAD OF LENGTH 1.                    *
* ELEMENTS OF "A" ARE COMPARED AND EXCHANGED BY SUBROUTINES.          *
* NORMAL OS/360 LINKAGE CONVENTIONS ARE FOLLOWED EXCEPT THAT REGISTERS*
* 1 AND 2 POINT TO ELEMENTS TO BE COMPARED OR EXCHANGED.  THE         *
* COMPARISON ROUTINE MUST RETURN A CONDITION CODE INDICATING THE      *
* RESULT OF COMPARING THESE TWO ELEMENTS.  THE EXCHANGE ROUTINE MUST  *
* EXCHANGE THESE TWO ELEMENTS.  THE COMPARISON ROUTINE MAY NOT ALTER  *
* ANY REGISTERS EXCEPT REGISTER 0. THE EXCHANGE ROUTINE MUST NOT ALTER*
* ANY REGISTERS EXCEPT 15, 0, 1, AND 2.  NO SAVE AREA IS PROVIDED.    *
* REGISTER 13 MUST POINT TO AN EXTENDED SAVE AREA AS DESCRIBED IN THE *
* DSECT "DSA".                                                        *
* NOTE THAT PL/I LINKAGE CONVENTIONS REQUIRE THAT REGISTER 12 MUST    *
* NEVER BE ALTERED, EVEN TEMPORARILY.                                 *
* LOCAL REGISTER OPTIMIZATION IS USED TO RETAIN POINTERS IN THE       *
* LINKAGE REGISTERS WHERE POSSIBLE.                                   *
*                                                                     *
* USAGE:  CALL SORTAQ (A,NO,LN,COMPARE,EXCHANGE)                      *
* SEE DSECT "ARGLIST" FOR DESCRIPTIVE COMMENTS.                       *
*                                                                     *
* THIS MODULE IS REENTRANT.                                           *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*              MACRO STATEMENTS                                       *
*                                                                     *
         MACRO
&NAME    COMP  &A,&B               COMPARE TWO ELEMENTS
         LCLC  &N
&N       SETC  '&NAME'
         AIF   ('&A' EQ 'R1' OR T'&A EQ 'O').B
&N       LR    R1,&A
&N       SETC  ''
.B       AIF   ('&B' EQ 'R2' OR T'&B EQ 'O').BALR
&N       LR    R2,&B
&N       SETC  ''
.BALR    ANOP
&N       BALR  R14,R15
         MEND
         SPACE 2
         MACRO
&NAME    EXCH  &A,&B               EXCHANGE TWO ELEMENTS
         LCLC  &N
&N       SETC  '&NAME'
         AIF   ('&A' EQ 'R1' OR T'&A EQ 'O').B
&N       LR    R1,&A
&N       SETC  ''
.B       AIF   ('&B' EQ 'R2' OR T'&B EQ 'O').BALR
&N       LR    R2,&B
&N       SETC  ''
.BALR    ANOP
&N       LR    R15,EXCHANGE
         BALR  R14,R15
         LR    R15,COMPARE
         MEND
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*              ENTRY POINTS                                           *
*                                                                     *
SORTAQ   CSECT
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*              EQUATE STATEMENTS                                      *
*                                                                     *
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
BASE     EQU   R11                 BASE REGISTER
COMPARE  EQU   R10                 POINTER TO COMPARE SUBROUTINE
EXCHANGE EQU   R9                  POINTER TO EXCHANGE SUBROUTINE
I        EQU   R3                  POINTER TO A(I)
J        EQU   R4                  POINTER TO A(J)
K        EQU   R5                  POINTER TO A(K)
LN       EQU   R6                  LENGTH OF AN ELEMENT OF A
M        EQU   R7                  POINTER TO A(M)
N        EQU   R8                  POINTER TO A(N)
MIN      EQU   10                  MAXIMUM NUMBER FOR BUBBLE SORT
***********************************************************************
         EJECT
         USING DSA,R13
         SAVE  (14,12),T,*
         LR    BASE,R15
         USING SORTAQ,BASE
         EJECT
*----------------------     SORTQ: PROCEDURE (A,NO);
*----------------------            DECLARE A(NO);
*----------------------            DECLARE (LT(24), UT(24)) FIXED BIN;
         USING ARGLIST,R1
*----------------------            I = 1;
         L     I,AA                /* I = ADDR(A) */
*----------------------            J = NO;
         L     R15,ANO             /* OBTAIN "NO" */
         L     R15,0(R15)
         BCTR  R15,0               /* NO-1 */
         L     LN,ALN              /* LN = LENGTH OF AN ELEMENT */
         L     LN,0(LN)
         MR    R14,LN              /* (NO-1)*LN */
         LA    J,0(R15,I)          /* J = (NO-1)*LN+ADDR(A) */
*----------------------            L = 0;
         SR    R0,R0
         ST    R0,L
         L     COMPARE,ACOMPARE
         L     EXCHANGE,AEXCHANG
         LR    R15,COMPARE         /* INITIALIZE COMPARE LINKAGE */
         DROP  R1
         EJECT
***********************************************************************
* DETERMINE WHETHER THIS SEGMENT SHOULD BE SPLIT OR BUBBLED.          *
***********************************************************************
*----------------------     BEGIN: IF J-I+1 ^> MIN THEN GO TO BUBBLE;
BEGIN    LA    R1,MIN-1
         MR    R0,LN
         AR    R1,I
         SR    R1,J
         BNM   BUBBLE
***********************************************************************
* SPLIT THIS SEGMENT.  LET "I" AND "J" BE THE LOWER AND UPPER         *
* SUBSCRIPTS FOR THE SEGMENT.  CHOOSE "K" EQUAL TO (I+J)/2.  THEN THE *
* THREE NEW SEGMENTS CONSIST OF (A(I),A(I+1),...,A(K-1)), (A(K)), AND *
* (A(K+1),A(K+2),...,A(J)).  THEN A(II) <= A(K) <= A(JJ) FOR ALL II,  *
* JJ, SUCH THAT I <= II < K < JJ <= J.  THE BEST POSSIBLE VALUE FOR K *
* WOULD BE ONE WHICH SPLIT THE SEGMENT INTO TWO PIECES OF EQUAL SIZE. *
***********************************************************************
*----------------------            K = (I+J)/2;
         LR    R1,J
         SR    R1,I
         SRA   R1,1
         SR    R0,R0
         DR    R0,LN
         MR    R0,LN
         LA    K,0(R1,I)
***********************************************************************
* NOW SORT A(I), A(K), AND A(J).  THIS IMPROVES THE PROBABILITY THAT  *
* A(K) APPROXIMATES THE MEDIAN OF THE SEGMENT, AND WILL THUS SPLIT    *
* THE SEGMENT EQUALLY.                                                *
***********************************************************************
*----------------------            IF A(I) > A(J) THEN DO;
         COMP  I,J
         BNH   BEGINA
*----------------------               T=A(I); A(I)=A(J); A(J)=T; END;
         EXCH
*----------------------            IF A(I) > A(K) THEN DO;
BEGINA   COMP  I,K
         BNH   BEGINB
*----------------------               T=A(I); A(I)=A(K); A(K)=T; END;
         EXCH
*----------------------            IF A(J) < A(K) THEN DO;
BEGINB   COMP  J,K
         BNL   BEGINC
*----------------------               T=A(K); A(K)=A(J); A(J)=T; END;
         EXCH
*----------------------            M = I; N = J;
BEGINC   LR    M,I
         LR    N,J
         EJECT
***********************************************************************
* SEARCH FOR AN ELEMENT WHICH REQUIRES EXCHANGING, THAT IS, ONE WHICH *
* IS LARGER THAN A(K).                                                *
***********************************************************************
SRCHMB   LR    R2,K
*----------------------     SRCHM: M = M+1;
SRCHMA   LR    R1,M
SRCHM    AR    R1,LN
*----------------------            IF A(M) < A(K) THEN GO TO SRCHM;
         COMP
         BL    SRCHM
         LR    M,R1
*----------------------            IF A(M) > A(K) THEN GO TO FINDN;
         BH    FINDNA
*----------------------            IF M > N THEN GO TO PUSHDOWN;
         CR    M,N
         BH    PUSHDOWN
***********************************************************************
* THIS SECTION IS EXECUTED ONLY IF THE PRECEDING SECTION ENCOUNTERED  *
* AN ELEMENT EQUAL TO A(K).  WE NOW SEARCH BACKWARDS FOR AN ELEMENT   *
* TO EXCHANGE (SMALLER THAN A(K)).  THIS IS DONE TO ASSURE AN EVEN    *
* DISTRIBUTION OF ELEMENTS WITH VALUE A(K) IN BOTH SEGMENTS.  THE     *
* SEARCH WILL AGAIN BE ALTERNATED IF ANOTHER SUCH ELEMENT IS FOUND.   *
***********************************************************************
*----------------------     SRCHN: N = N-1;
SRCHNA   LR    R1,N
SRCHN    SR    R1,LN
*----------------------            IF A(N) > A(K) THEN GO TO SRCHN;
         COMP
         BH    SRCHN
         LR    N,R1
*----------------------            IF A(N) < A(K) THEN GO TO FINDM;
         BL    FINDMA
*----------------------            IF N ^< M THEN GO TO SRCHM;
         CR    N,M
         BNL   SRCHMA
*----------------------            GO TO PUSHDOWN;
         B     PUSHDOWN
***********************************************************************
* AN ELEMENT SMALLER THAN A(K) HAS BEEN FOUND.  NOW SEARCH FOR ONE    *
* LARGER THAN A(K).                                                   *
***********************************************************************
*----------------------     FINDM: M = M+1;
FINDMA   LR    R1,M
FINDM    AR    R1,LN
*----------------------            IF A(M) < A(K) THEN GO TO FINDM;
         COMP
         BL    FINDM
         LR    M,R1
*----------------------            IF A(M) > A(K) THEN GO TO EXCHMN;
         BH    EXCHMN
*----------------------            IF M ^> N THEN GO TO FINDM;
         CR    M,N
         BNH   FINDM
*----------------------            GO TO PUSHDOWN;
         B     PUSHDOWN
***********************************************************************
* AN ELEMENT LARGER THAN A(K) HAS BEEN FOUND.  NOW SEARCH FOR ONE     *
* SMALLER THAN A(K).                                                  *
***********************************************************************
*----------------------     FINDN: N = N-1;
FINDNA   LR    R1,N
FINDN    SR    R1,LN
*----------------------            IF A(N) > A(K) THEN GO TO FINDN;
         COMP
         BH    FINDN
         LR    N,R1
*----------------------            IF A(N) < A(K) THEN GO TO EXCHMN;
         BL    EXCHMN
*----------------------            IF N ^< M THEN GO TO FINDN;
         CR    N,M
         BNL   FINDN
*----------------------            GO TO PUSHDOWN;
         B     PUSHDOWN
***********************************************************************
* BOTH ELEMENTS HAVE BEEN FOUND.  NOW EXCHANGE THEM UNLESS THE ENTIRE *
* SEGMENT HAS BEEN PROCESSED.  THE SEARCH FOR ELEMENTS IS ACTUALLY    *
* TERMINATED BY ENCOUNTERING THE ALREADY SORTED ELEMENTS.  THUS THE   *
* POINTERS "M" AND "N" ARE POINTING TO ADJACENT BUT ALREADY SORTED    *
* ELEMENTS, OR AT MOST ARE SEPARATED BY THE ELEMENT POINTED TO BY "K".*
***********************************************************************
*----------------------    EXCHMN: IF M > N THEN GO TO PUSHDOWN;
EXCHMN   CR    M,N
         BH    PUSHDOWN
*----------------------            T=A(M); A(M)=A(N); A(N)=T;
         EXCH  M,N
*----------------------            GO TO SRCHM;
         B     SRCHMB
         EJECT
***********************************************************************
* THE SEGMENT HAS BEEN ENTIRELY PROCESSED.  NOW PLACE A(K) BETWEEN THE*
* TWO NEW SEGMENTS IF IT IS NOT ALREADY THERE.                        *
***********************************************************************
*----------------------  PUSHDOWN: IF M < K THEN DO;
PUSHDOWN CR    M,K
         BNL   PUSHDWNA
*----------------------               T=A(M); A(M)=A(K); A(K)=T;
         EXCH  M,
*----------------------               M = M+1; END;
         AR    M,LN
*----------------------                     ELSE
         B     PUSHDWNC
*----------------------            IF N > K THEN DO;
PUSHDWNA CR    N,K
         BNH   PUSHDWNC
*----------------------               T=A(N); A(N)=A(K); A(K)=T;
         EXCH  N,
*----------------------               N = N-1; END;
         SR    N,LN
***********************************************************************
* SAVE THE UPPER AND LOWER SUBSCRIPTS OF THE LARGER NEW SEGMENT IN    *
* THE ARRAYS "LT" AND "UT".  THEN GO PROCESS THE SMALLER SEGMENT.     *
***********************************************************************
*----------------------            IF N-I > J-M THEN DO;
PUSHDWNC LR    R1,N
         SR    R1,I
         SR    R1,J
         AR    R1,M
         BNP   PUSHDWND
*----------------------               LT(L) = I; UT(L) = N; I = M;
         L     R1,L
         ST    I,LT(R1)
         ST    N,UT(R1)
         LR    I,M
*----------------------                 L = L+1; GO TO BEGIN; END;
         LA    R1,4(R1)
         ST    R1,L
         B     BEGIN
*----------------------                         ELSE DO;
*----------------------               LT(L) = M; UT(L) = J; J = N;
PUSHDWND L     R1,L
         ST    M,LT(R1)
         ST    J,UT(R1)
         LR    J,N
*----------------------                 L = L+1; GO TO BEGIN; END;
         LA    R1,4(R1)
         ST    R1,L
         B     BEGIN
         EJECT
***********************************************************************
* AT THIS POINT A SMALL SEGMENT IS PROCESSED BY BUBBLING.  SUCCESSIVE *
* PAIRS OF ELEMENTS ARE COMPARED, AND EXCHANGED IF NECESSARY.  WHEN AN*
* EXCHANGE OCCURS, THE SMALLER ELEMENT IS THEN COMPARED WITH THE      *
* PRECEDING ELEMENT AND A FURTHER EXCHANGE IS MADE IF REQUIRED.  THE  *
* ELEMENT IS THUS "BUBBLED" UP UNTIL NO FURTHER EXCHANGES OCCUR OR    *
* UNTIL IT REACHES THE TOP OF ITS SEGMENT.  WHEN THE BOTTOM ELEMENT   *
* HAS BEEN PROCESSED, THE SEGMENT IS SORTED.                          *
***********************************************************************
*----------------------    BUBBLE: K = I;
BUBBLE   LR    K,I
*----------------------      SINK: IF K ^< J THEN GO TO POPUP;
SINK     CR    K,J
         BNL   POPUP
*----------------------            M = K;
         LR    R1,K
*----------------------            K = K+1;
         AR    K,LN
*----------------------            N = K;
         LR    R2,K
*----------------------    COMPMN: IF A(M) ^> A(N) THEN GO TO SINK;
COMPMN   COMP
         BNH   SINK
*----------------------            T=A(M); A(M)=A(N); A(N)=T;
         EXCH
*----------------------            M = M-1; N = N-1;
         SR    R1,LN
         SR    R2,LN
*----------------------            IF N ^= I THEN GO TO COMPMN;
         CR    R2,I
         BNE   COMPMN
*----------------------            GO TO SINK;
         B     SINK
         EJECT
***********************************************************************
* A SMALL SEGMENT HAS JUST BEEN SORTED BY BUBBLING, OR IS OF LENGTH   *
* ZERO OR ONE.  NOW CHOOSE A LARGE SEGMENT FROM "LT" AND "UT".  IF NO *
* SEGMENTS REMAIN, THE ARRAY HAS BEEN SORTED.                         *
***********************************************************************
*----------------------     POPUP: L = L-1;
POPUP    L     R1,L
         LA    R0,4
         SR    R1,R0
         ST    R1,L
*----------------------            IF L ^< 0 THEN DO;
         BM    POPUPA
*----------------------               I = LT(L); J = UT(L);
         L     I,LT(R1)
         L     J,UT(R1)
*----------------------               GO TO BEGIN; END;
         B     BEGIN
*----------------------            END SORTQ;
POPUPA   EQU   *
         EJECT
         RETURN (14,12),T,RC=0
         DROP  BASE
         DROP  R13
         EJECT
ARGLIST  DSECT ,                   ARGUMENT LIST DESCRIPTION
AA       DS    A                   A(ARRAY TO BE SORTED)
ANO      DS    A                   A(NUMBER OF ELEMENTS)
ALN      DS    A                   A(LENGTH OF EACH ELEMENT)
ACOMPARE DS    A                   A(COMPARE SUBPROGRAM)
AEXCHANG DS    A                   A(EXCHANGE SUBPROGRAM)
DSA      DSECT ,                   DYNAMIC STORAGE AREA
SAVE     DS    27F                 STANDARD PL/I SAVE AREA (MINIMUM)
L        DS    F                   SUBSCRIPT FOR LT AND UT ARRAYS
LT       DS    24F                 LOWER TEMPORARY
UT       DS    24F                 UPPER TEMPORARY
         END
/*
