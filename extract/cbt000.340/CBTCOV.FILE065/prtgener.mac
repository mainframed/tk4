PRTGENER TITLE 'SUBROUTINE WHICH COPIES SEQUENTIAL DATA SETS'
***********************************************************************
*
*      THIS PROGRAM COPIES A SEQUENTIAL DATA SET FROM SYSUT1 TO SYSUT2.
* ANY X'C0' IS CHANGED TO C'>'.
* ANY X'D0' IS CHANGED TO C'<'.
* IF THE OUTPUT DATASET HAS NO DCB ATTRIBUTES,
* THE DCB ATTRIBUTES OF THE INPUT DATA SET ARE USED.
* BOTH THE INPUT AND OUTPUT DATA SETS MUST BE CLOSED WHEN "PRTGENER" IS
* CALLED.
*
*      THE "PRTGENER" SUBROUTINE IS REENTRANT AND REUSEABLE.
*
***********************************************************************
PRTGENER ENTER PARMREG=2,          SAVE REGISTERS AND INITIALIZE       X
               GETMAIN=(WORKSIZE,0)
*
*     REGISTER EQUATES AND USAGE
*
R0       EQU   0
R1       EQU   1
R2       EQU   2                       WORK
R3       EQU   3                       BASE REG
R4       EQU   4                       DCB BASE REG
R5       EQU   5
R6       EQU   6
R7       EQU   7                       ADDR TO READ INTO
R8       EQU   8                       ADDR TO WRITE FROM
R9       EQU   9                       INPUT LRECL
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13                      WORK AREA AND SAVE AREA ADDR
R14      EQU   14                      RETURN ADDR
R15      EQU   15                      RETURN CODE
         USING IHADCB,R4           ADDRESS DCB DSECT
         USING WORKAREA,R13        ADDRESS WORK AREA DSECT
         MVC   INPUT,CINPUT        MOVE INPUT DCB TO WORK AREA
         MVC   OUTPUT,COUTPUT      MOVE OUTPUT DCB TO WORK AREA
         MVC   OPENLST,COPENLST    MOVE OPEN PARAMETER LIST TO WORK
*
*     OPEN THE INPUT DCB
*
         LA    R4,INPUT            POINT TO INPUT DCB
         OPEN  ((R4)),             OPEN THE INPUT DCB                  X
               MF=(E,OPENLST)
         MVC   SAVRECFM,DCBRECFM   SAVE THE INPUT RECFM
         MVC   SAVLRECL,DCBLRECL   SAVE THE INPUT LRECL
         MVC   SAVBLKSI,DCBBLKSI   SAVE THE INPUT BLOCKSIZE
*
*     PREPARE THE OUTPUT DCB
*
         LA    R4,OUTPUT           POINT TO OUTPUT DCB
         LA    R2,EXLST            POINT TO DCB EXIT LIST
         STCM  R2,7,DCBEXLSA       STORE EXIT LIST ADDRESS IN DCB
         LA    R2,OPENEXIT         POINT TO OPEN EXIT
         ST    R2,EXLST            STORE ADDRESS IN EXIT LIST
         MVI   EXLST,X'85'         FLAG THE EXIT LIST FOR DCB OPEN EXIT
*
*     OPEN THE OUTPUT DCB
*
         OPEN  ((R4),OUTPUT),      OPEN THE OUTPUT DCB                 X
               MF=(E,OPENLST)
*
*     INITIALIZE THE RDW
*
         XC    RDW,RDW                 ZERO THE RDW
*
*     CAN'T HANDLE RECFM=U
*
         TM    SAVRECFM,B'11000000'    TEST INPUT RECFM FOR U
         BO    ITSU                    BRANCH IF U
         TM    DCBRECFM,B'11000000'    TEST OUTPUT RECFM FOR U
         BNO   NOTU
ITSU     WTO   'PRTGENER ROUTINE ABNORMALLY TERMINATED, RECFM=U NOT ALLX
               OWED',ROUTCDE=11
         B     EODAD
NOTU     DS    0H
*
*     EXAMINE INPUT LRECL AND RECFM
*
         SLR   R9,R9                   ZERO R9
         ICM   R9,3,SAVLRECL           LOAD AND CHECK INPUT LRECL
         BNZ   TESTIN                  IF NON ZERO, GO CHECK IT
         ICM   R9,3,SAVBLKSI           LOAD AND CHECK INPUT BLOCKSIZE
         BZ    BADIN                   IF ZERO, DIE
TESTIN   CH    R9,=H'256'              MAKE SURE IT ISN'T TOO LONG
         BL    OKIN
BADIN    WTO    'PRTGENER ROUTINE ABNORMALLY TERMINATED,  INPUT LRECL IX
               S INVALID',ROUTCDE=11
         B     EODAD
OKIN     TM    SAVRECFM,B'10000000'    TEST INPUT RECFM FOR F
         BNO   NOTINF                  BRANCH IF NOT
         LA    R7,RECORD               POINT TO START OF DATA
         AH    R9,=H'4'                ADD 4 TO INPUT LRECL
         STH   R9,RDW          PUT IT IN THE RDW (IN CASE OUTPUT IS V)
         B     CHECKOUT
NOTINF   TM    SAVRECFM,B'01000000'    TEST INPUT RECFM FOR V
         BNO   NOTINV                  BRANCH IF NOT
         LA    R7,RDW                  POINT TO RDW
         B     CHECKOUT
NOTINV   WTO   'PRTGENER ROUTINE ABNORMALLY TERMINATED,  INPUT RECFM NOX
               T F OR V',ROUTCDE=11
         B     EODAD
CHECKOUT DS    0H
*
*     EXAMINE OUTPUT LRECL AND RECFM
*
         SLR   R2,R2                   ZERO R2
         ICM   R2,3,DCBLRECL           LOAD AND CHECK OUTPUT LRECL
         BNZ   TESTOUT                 IF NON ZERO, GO CHECK IT
         ICM   R2,3,DCBBLKSI           LOAD AND CHECK OUTPUT BLOCKSIZE
         BZ    BADOUT                  IF ZERO, DIE
TESTOUT  CH    R2,=H'256'              MAKE SURE IT ISN'T TOO LONG
         BL    OKOUT
BADOUT   WTO    'PRTGENER ROUTINE ABNORMALLY TERMINATED, OUTPUT LRECL IX
               S INVALID',ROUTCDE=11
         B     EODAD
OKOUT    TM    DCBRECFM,B'10000000'    TEST OUTPUT RECFM FOR F
         BNO   NOTOUTF                 BRANCH IF NOT
         LA    R8,RECORD               POINT TO START OF DATA
         B     READY
NOTOUTF  TM    DCBRECFM,B'01000000'    TEST OUTPUT RECFM FOR V
         BNO   NOTOUTV                 BRANCH IF NOT
         LA    R8,RDW                  POINT TO RDW
         B     READY
NOTOUTV  WTO   'PRTGENER ROUTINE ABNORMALLY TERMINATED, OUTPUT RECFM NOX
               T F OR V',ROUTCDE=11
         B     EODAD
READY    DS    0H
*
*     INITIALIZE THE TRANSLATE TABLE
*
         LA    R2,255                  VALUE OF LAST BYTE
STUFF    STC   R2,TRTABLE(R2)          STUFF IT IN
         BCT   R2,STUFF                PREVIOUS BYTE
         STC   R2,TRTABLE(R2)          STUFF IN THE FIRST BYTE
         MVI   TRTABLE+X'C0',C'>'      CHANGE X'C0 TO C'>'
         MVI   TRTABLE+X'D0',C'<'      CHANGE X'D0 TO C'<'
*
*     DO THE COPY
*
         LA    R4,INPUT                POINT TO INPUT DCB
         LA    R5,OUTPUT               POINT TO OUTPUT DCB
LOOP     DS    0H
         MVI   RECORD,C' '             PLANT A LEADING BLANK
         MVC   RECORD+1(255),RECORD    PROPAGATE IT
         GET   (R4),(R7)               READ A RECORD FROM INPUT
         TR    RECORD,TRTABLE          TRANSLATE ALL 256 BYTES
PUT      PUT   (R5),(R8)               WRITE THE OUTPUT RECORD
         B     LOOP                    GO COPY ANOTHER RECORD
*
*     CLEANUP
*
EODAD    DS    0H
         LA    R4,INPUT            POINT TO INPUT DCB
         LA    R5,OUTPUT           POINT TO OUTPUT DCB
         CLOSE ((R4)),             CLOSE THE INPUT DCB                 X
               MF=(E,OPENLST)
         CLOSE ((R5)),             CLOSE THE OUTPUT DCB                X
               MF=(E,OPENLST)
         FREEPOOL (R5)             FREE THE OUTPUT DCB BUFFER POOL
         FREEPOOL (R4)             FREE THE INPUT DCB BUFFER POOL
         LEAVE RETCODE=0,          RETURN TO CALLER                    X
               GETMAIN=(WORKSIZE,0)
*
*     CONSTANTS
*
ZERO     DC    H'0'
COPENLST OPEN  ZERO,MF=L           INITIAL OPEN PARAMETER LIST
OPENLN   EQU   *-COPENLST          LENGTH OF OPEN PARAMETER LIST
CINPUT   DCB   DDNAME=SYSUT1,      INITIAL INPUT DCB                   X
               MACRF=GM,EODAD=EODAD,DSORG=PS
INPUTLN  EQU   *-CINPUT            LENGTH OF INPUT DCB
COUTPUT  DCB   DDNAME=SYSUT2,      INITIAL OUTPUT DCB                  X
               MACRF=PM,DSORG=PS
OUTPUTLN EQU   *-COUTPUT           LENGTH OF OUTPUT DCB
*
*     DCB OPEN EXIT
*
OPENEXIT LR    R8,R15                  SAVE ENTRY ADDR
         USING OPENEXIT,R8             ESTABLISH ADDRESSABILITY
         LR    R4,R1                   SAVE DCB ADDR
         ICM   R6,7,DCBEXLSA           LOAD EXIT LIST ADDRESS FROM DCB
         USING EXLST,R6                ESTABLISH ADDRESSABILITY
*
*     COPY DCB INFO FROM INPUT IF NECESSARY
*
         CLC   DCBRECFM,EXITZERO   IF THE OUTPUT RECFM WAS SPECIFIED
         BNE   RECFMOK                THEN GO CHECK THE LRECL
         MVC   DCBRECFM,SAVRECFM      ELSE MOVE INPUT RECFM TO OUTPUT
RECFMOK  DS    0H
         CLC   DCBLRECL,EXITZERO   IF THE OUTPUT LRECL WAS SPECIFIED
         BNE   LRECLOK                THEN GO CHECK THE BLKSIZE
         MVC   DCBLRECL,SAVLRECL      ELSE MOVE INPUT LRECL TO OUTPUT
LRECLOK  DS    0H
         CLC   DCBBLKSI,EXITZERO   IF THE OUTPUT BLKSIZE WAS SPECIFIED
         BNE   BLKSIZOK               THEN GO OPEN THE OUTPUT DCB
         MVC   DCBBLKSI,SAVBLKSI      ELSE MOVE INPUT BLKSIZE TO OUTPUT
BLKSIZOK DS    0H
         BR    R14                     AND RETURN
EXITZERO DC    H'0'
         PRINT NOGEN
         DCBD  DSORG=PS            MAP OF DCB
         PRINT GEN
WORKAREA DSECT ,                   MAP OF GETMAINED WORK AREA
         DS    18A                 REGISTER SAVE AREA
INPUT    DS    CL(INPUTLN)
OUTPUT   DS    CL(OUTPUTLN)
*************NOTE: THE NEXT 4 QUANTITIES MUST BE CONTIGUOUS************
EXLST    DS    A
SAVRECFM DS    XL1                 COPY OF INPUT DCB RECFM
SAVLRECL DS    XL2                 COPY OF INPUT DCB LRECL
SAVBLKSI DS    XL2                 COPY OF INPUT DCB BLKSIZE
***********************************************************************
OPENLST  DS    CL(OPENLN)
TRTABLE  DS    XL256
         DS    0F
RDW      DS    XL4
RECORD   DS    CL256
WORKSIZE EQU   *-WORKAREA          LENGTH OF WORK AREA
         END
