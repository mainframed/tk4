IDMF     TITLE 'IDMMAIN - INTERACTIVE DATA MANAGEMENT FACILITIES'
         @     IDMMAIN
***********************************************************************
*/*                                                                  */
*/*      ========================================================    */
*/*       I D M F  -  INTERACTIVE DATA MANAGEMENT FACILITY           */
*/*      ========================================================    */
*/*                                                                  */
*/********************************************************************/
         EJECT
*                            ******************************************
*                            *  MODIFICATION HISTORY & DOCUMENTATION  *
*                            ******************************************
         SPACE
* 11/83  -  HUGHES RSG/IPC
*   ADDED NEW IDMF PRIMARY COMMAND 'COPY', WHICH COPIES THE ENTIRE
*   CONTENTS OF THE CURRENTLY ACTIVE DIRECTORY TO THE '@' SECONDARY
*   DIRECTORY (IF NOT ALREADY IN USE).  THE USER CAN THEN SPLIT THE
*   SCREEN AND ACTIVATE THE '@' SECONDARY DIRECTORY TO ACCESS ANY OTHER
*   DATASET FROM THE ORIGINAL ACTIVE DIRECTORY. THIS PRIMARY COMMAND
*   HAS NO OPERANDS.
            SPACE
* 12/83  -  HUGHES RSG/IPC
*   ADDED A NEW IDMF PRIMARY COMMAND CALLED 'Ö' WHICH ALLOWS THE USER
*   TO CREATE AND/OR ACTIVATE SUPPLEMENTAL DIRECTORIES, WHICH REMOVES
*   THE IDMF RESTRICTION OF HAVING A MAXIMUM OF 11 DIRECTORIES.  'Ö'
*   HAS ONE REQUIRED OPERAND; A VALID MEMBER NAME THAT CURRENTLY
*   EXISTS IN YOUR 'ISPTLIB' PDS OR IF A DIRECTORY IS BEING CREATED,
*   A NAME THAT CONFORMS TO NAMING STANDARDS FOR PDS MEMBERS.  THE CENT
*   SIGN SYMBOL USED FOR THIS COMMAND WAS CHOSEN FOR TYPING CONVENIENCE
*   ONLY, BUT CAN BE CHANGED TO SOMETHING ELSE BY MODIFYING THE PRIMARY
*   COMMAND TABLE.
            EJECT ,                                                   *
***********************************************************************
*                                                                     *
* ABSTRACT: SPF DATASET SERVICE TABLE MANAGER                         *
*                                                                     *
* FUNCTION: IDMMAIN IS A PROGRAM, THAT CONTROLS AND EXECUTES ALL      *
*           FUNCTIONS AND SERVICES FROM DATASET SERVICE TABLE         *
*           REQUESTED BY TSO/SPF USER.                                *
*                                                                     *
*           IDMMAIN BUILDS A TABLE IN CORE AND DISPLAY IT TO END USER.*
*           USER MAY: 1-EXECUTE ANY TSO COMMAND FROM THIS SCREEN,     *
*                       WHICH IS VALID UNDER SPF;                     *
*                     2-MANIPULATE ROWS OF A TABLE (ADD, REMOVE, ETC) *
*                     3-WORK WITH DATASETS (EDIT, BROWSE, PRINT, ETC),*
*                       WHOSE NAMES REPRESENRED BY ROWS OR ENTERED    *
*                       ON PRIMARY COMMAND INPUT LINE.                *
*                                                                     *
*           ALONG WITH A DATASET NAME LIST, CREATED BY SINGLE REQUEST,*
*           USER ABLE TO RETRIEVE DATASET NAMES FROM CATALOG OR VTOC  *
*           AND DO MASS UPDATE OF TABLE.                              *
*                                                                     *
*           USER TABLES SAVED FROM SESSION TO SESSION AS MEMBERS      *
*           OF PDS (DD-NAMES - ISPTLIB AND ISPTABL).                  *
*           EVERY TIME WE SAVE TABLE, PROGRAM TRIES TO REPLACE IN     *
*           PLACE.                                                    *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*                                                                     *
* INPUT: R1 -> NONE                                                   *
*                                                                     *
*                                                                     *
* EXTERNAL REFERENCE: LOCINDEX                                        *
*                                                                     *
* PROGRAM WRITTEN USING STRUCTURED ASSEMBLER MACROS                   *
* MACROS USED: SET OF STRUCTURED MACROS                               *
*              SAVE                                                   *
*              ABEND                                                  *
*              RETURN                                                 *
*              GETMAIN                                                *
*              CALL                                                   *
*              FREEMAIN                                               *
*              IKJUPT                                                 *
*              IKJPSCB                                                *
*                                                                     *
*                                                                     *
* ATTRIBUTES: REENTRANT,REFRESHABLE,REUSABLE                          *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE
***********************************************************************
*                                                                     *
*  REGISTERS:   15 - ENTRY ADDRESS & RETURN CODE                      *
*               14 - RETURN ADDRESS                                   *
*               13 - SAVE AREA ADDRESS AND BASE FOR DSECT             *
*               12 - CSECT BASE                                       *
*               11 - CSECT SECOND BASE                                *
*               10 - CSECT THIRD  BASE                                *
*                9 - CSECT FOURTH BASE                                *
*                8 -                                                  *
*                7 -                                                  *
*                6 - WORK REG                                         *
*                5 - WORK REG                                         *
*                4 - WORK REG + PSCB BASE + UPT BASE                  *
*                3 - WORK REG                                         *
*                2 - WORK REG                                         *
*                1 - LIST PARAM ADDRESS                               *
*                0 -                                                  *
***********************************************************************
         EJECT
***********************************************************************
*               IDMMAIN CODE                                          *
***********************************************************************
         SPACE
*                            ******************************************
*                            *     DSECTS  AREAS.                     *
*                            ******************************************
         SPACE
         IKJPSCB             PROTECTED STEP CONTROL BLOCK
         EJECT
         IKJUPT              USER PROFILE TABLE
         EJECT
*                            ******************************************
*                            *   IDMMAIN CSECT INITIALIZATION.        *
*                            ******************************************
         SPACE 2
         INIT# IDMMAIN,BASEREG=(12,11,10,9),CODE=RENT,                 X
               EXEC=MAINLINE,REL=01.03.00,                             X
               EXLIST=YES
         EJECT
         CPYRIGHT IDMF,1982
         EJECT
*                            ******************************************
*                            *  CONTROL TABLES AND FIELDS.            *
*                            ******************************************
         SPACE 2
         COPY  IDMCVT
         EJECT
*---------------------------------------------------------------------*
*        TABLE OF SPF PRIMARY COMMANDS                                *
*---------------------------------------------------------------------*
         DS    0F                 TABLE STARTS HERE - ON WORD BOUNDARY
PCMDTABL DC    CL8'A',A(PCADD)
         DC    CL8'ADD',A(PCADD)
         DC    CL8'X',A(PCSPFX)
         DC    CL8'R',A(PCRESHOW)
         DC    CL8'RESHOW',A(PCRESHOW)
         DC    CL8'RES',A(PCRESET)                          *HMD 09/82*
         DC    CL8'RESET',A(PCRESET)                        *HMD 09/82*
         DC    CL8'S',A(PCEDIT)
         DC    CL8'E',A(PCEDIT)
         DC    CL8'EDIT',A(PCEDIT)
         DC    CL8'B',A(PCBROWSE)
         DC    CL8'BROWSE',A(PCBROWSE)
         DC    CL8'G',A(PCGADD)
         DC    CL8'GV',A(PCGADD)
         DC    CL8'GADD',A(PCGADD)
         DC    CL8'L',A(PCLOCATE)
         DC    CL8'LOC',A(PCLOCATE)
         DC    CL8'LOCATE',A(PCLOCATE)
         DC    CL8'REM',A(PCREMOVE)
         DC    CL8'REMOVE',A(PCREMOVE)
         DC    CL8'CAN',A(PCCANCEL)
         DC    CL8'CANCEL',A(PCCANCEL)
         DC    CL8'SYN',A(PCSYN)
         DC    CL8'USER',A(PCUSER)
         DC    CL8'V',A(PCVADD)
         DC    CL8'VADD',A(PCVADD)
         DC    CL8'SW',A(PCSWITCH)
         DC    CL8'SWITCH',A(PCSWITCH)
         DC    CL8'SAVE',A(PCSAVE)
         DC    CL8'TSO',A(PCTSO)
         DC    CL8'T',A(PCTSO)
         DC    CL8'PFK',A(PCPFK)
         DC    CL8'COPY',A(PCCOPY)                          *IPC 11/83*
         DC    CL8'1',A(PCMENU)
         DC    CL8'2',A(PCMENU)
         DC    CL8'3',A(PCMENU)
         DC    CL8'4',A(PCMENU)
         DC    CL8'5',A(PCMENU)
         DC    CL8'6',A(PCMENU)
         DC    CL8'7',A(PCMENU)
         DC    CL8'8',A(PCMENU)
         DC    CL8'9',A(PCMENU)
         DC    CL8'@',A(PCMENU)                             *IPC 11/83*
         DC    CL8'Ö',A(PCSUPPL)                            *IPC 12/83*
         DC    X'FFFF'                        END OF TABLE
         EJECT
*---------------------------------------------------------------------*
*        TABLE OF SPF LINE    COMMANDS                                *
*---------------------------------------------------------------------*
         DS    0F                 TABLE STARTS HERE - ON WORD BOUNDARY
LCMDTABL DC    CL4'U',A(LCUSER)               INVOKE USER COMMAND
         DC    CL4'Q',A(LCUTIL)               SPF 3.X UTILITIES
         DC    CL4'R',A(LCREMOVE)             REMOVE A ROW
         DC    CL4'S',A(LCEDIT)               EDIT
         DC    CL4'E',A(LCEDIT)               EDIT
         DC    CL4'B',A(LCBROWSE)             BROWSE
         DC    CL4'P',A(LCPRINT)              PRINT DATASET
         DC    CL4'I',A(LCDSAT)               DISPLAY DSN INFO+ATTRIB
         DC    CL4'D',A(LCDELET)              DELETE + UNCATALOG
         DC    CL4'X',A(LCNOMBR)          NO MEMBER - ERASE MBR NAME
         DC    CL4'N',A(LCNOVOL)          NO VOLSER - ERASE VOLSER
         DC    CL4'V',A(LCLOCVOL)             ADD VOLSER FROM CATLG
         DC    CL4'M',A(LCMOVE)               MOVE ROW
         DC    CL4'C',A(LCCOPY)               COPY MODEL ROW
         DC    CL4'L',A(LCLOCATE)             LOCATE A ROW
         DC    X'FFFF'                        END OF TABLE
         EJECT
*                            ******************************************
*                            *    WORK FIELDS.                        *
*                            ******************************************
         SPACE
         DATA#
GFLAG    DS    CL1                SWITCH FOR 'G' AND 'GV' COMMANDS
SWCALL   DS    XL1                SWITCH TO INDICATE TYPE OF CALL
         SPACE
*------- PARAMETER LIST FOR IDMMAIN INTERNAL CALLS -------------------
ADDRIDM1 DS    A                  POINTER TO FLAG
ADDRIDM2 DS    A                  POINTER TO TABLE NAME
ADDRIDM3 DS    A                  POINTER TO MENU NAME
*---------------------------------------------------------------------
         SPACE
         COPY  IDMWORK
         SPACE
         ENDDATA#
         EJECT
*                            ******************************************
*                            * MAINLINE- MAIN ROUTINE OF THE IDMMAIN  *
*                            ******************************************
         SPACE 2
         ENTRE# MAINLINE
         SPACE
***      DC     X'0022'
*---------------------------------------------------------------------*
*        GET IN. PARM, LOAD ISPLINK, INITIALIZE GETMAINED AREA FIELDS *
*---------------------------------------------------------------------*
         MVI   SWCALL,ZERO        ASSUME EXTERNAL CALL - SET SWITCH
         L     R3,0(R1)           LOAD ADDR OF FIRST PARM
         IF 2(R3),EQ,X'FF',CLI    IF FLAG SAYS THAT ITS INTERNAL CALL
            MVI   SWCALL,ONE         INDICATE INTERNAL CALL
            LA    R4,4(R3)           R4=ADDRESS OF PASSED TABLE NAME
            MVI   SYSTAB,BLANK       CLEAR TABLE NAME
            MVC   SYSTAB+1(L'SYSTAB-1),SYSTAB
            MVC   SYSTAB,0(R4)       GET TABLE NAME FROM PARM
            LA    R4,(4+L'SYSTAB)(R3)  R4=ADDRESS OF PASSED MENU NAME
            LA    R3,8               LOAD MENU NAME LENGTH IN REG3
         ELSE                     ELSE (EXTERNAL CALL)
            LA    R4,2(R3)           R4=PARAM ADDRESS
            LH    R3,0(R3)           R3=LENGTH OF PARAM
            IFOR R3,EQ,0,LTR         IF PARAM DOES NOT EXIST
            IF R3,GT,=H'8',CH        OR PARAM LONGER THAN 8 BYTES
               IEXIT# RC=12             ERROR - EXIT
            ENDIF                    ENDIF
         ENDIF                    ENDIF
         BCTR  R3,R0              -1 FOR EX
         MVI   SPFMENU,BLANK      BLANK OUT TARGET FIELD FOR MENU NAME
         MVC   SPFMENU+1(L'SPFMENU-1),SPFMENU
         MVI   SPFXBUFF,BLANK     BLANK OUT SPFX BUFFER
         MVC   SPFXBUFF+1(L'SPFXBUFF-1),SPFXBUFF
         LA    R5,SPFXBUFF        R5=ADDRESS OF SPFX BUFFER
         MVC   0(L'SPFXPRF1,R5),SPFXPRF1   MOVE 1 PREFIX TO BUFFER
         LA    R5,(L'SPFXPRF1)(R5)   POINT R5 AFTER PREFIX IN BUFF
         MVC   0(0,R5),0(R4)      MOVE PANEL NAME TO THE BUFFER
         EX    R3,*-6
         MVC   SPFMENU(0),0(R4)   MOVE PANEL NAME TO TARGET FIELD
         EX    R3,*-6
         LA    R5,1(R3,R5)        POINT R5 AFTER PANEL NAME IN BUFF
         MVC   0(L'SPFXPRF2,R5),SPFXPRF2   MOVE 2 PREFIX TO BUFFER
         LA    R5,(L'SPFXPRF2)(R5)   POINT R5 TO OPTION FIELD IN BUF
         ST    R5,SPFXOPTI        SAVE OPTION ADDRESS
         LA    R5,SPFXOPTL(R5)    POINT R5 AFTER OPTION FIELD IN BUF
         MVI   0(R5),RPARENT      CLOSE BUFFER WITH RIGHT PARENT
         SPACE
*---------------------------------
         LOAD  EP=ISPLINK         LOAD SPF LINK ROUTINE
         ST    R0,ISPLADDR        SAVE EP ADDRESS
         LOAD  EP=IDMLOCIX        LOAD LOCATE INDEX ROUTINE
         ST    R0,IDMLADDR        SAVE EP ADDRESS
         LOAD  EP=IDMPRINT        LOAD DATASET PRINT UTILITY
         ST    R0,IDMPADDR        SAVE EP ADDRESS
         LOAD  EP=IDMDSAT         LOAD DATASET DSAT  UTILITY
         ST    R0,IDMDADDR        SAVE EP ADDRESS
         LOAD  EP=IDMDELET        LOAD DATASET DELET UTILITY
         ST    R0,IDMDELAD        SAVE EP ADDRESS
*---------------------------------
         SPACE
         MVI   MSGID,BLANK
         MVC   MSGID+1(L'MSGID-1),MSGID       INITIALIZE TABLE MSG ID
         MVI   OPT,BLANK
         MVC   OPT+1(L'OPT-1),OPT             BLANK OUT PRIME INPUT
         MVI   LASTOPT,BLANK
         MVC   LASTOPT+1(L'LASTOPT-1),LASTOPT ERASE TSO CMD SAVE BUFF
         MVI   ACTION,ZERO         SET FIRST TIME THRU - ZERO OUT
         MVI   MBR,BLANK
         MVC   MBR+1(L'MBR-1),MBR             BLANK OUT MEMBER NAME
         MVI   FSTR,BLANK
         SPACE
         MVI   ERASE,YES                      SET ERASE OPT - YES
         MVI   SCROLL,YES                     SET SCROLL OPT - YES
         SPACE
         MVC   BUFFTSO,PREFTSO                INIT TSO CMD BUFFER
         MVI   BUFFSUFF,RPARENT               INIT TSO CMD BUFFER
         EJECT
*---------------------------------------------------------------------*
*        COPY LIST FORM OF MACROS FROM STATIC TO DYNAMIC AREA         *
*---------------------------------------------------------------------*
         MVC   LCALL01,CALL01                 INIT LIST FORM CALL01
         MVC   LCALL02,CALL02                 INIT LIST FORM CALL02
         MVC   LCALL03,CALL03                 INIT LIST FORM CALL03
         MVC   LCALL04,CALL04                 INIT LIST FORM CALL04
         MVC   LCALL05,CALL05                 INIT LIST FORM CALL05
         MVC   LCALL06,CALL06                 INIT LIST FORM CALL06
         MVC   LCALL07,CALL07                 INIT LIST FORM CALL07
         MVC   LCALL08,CALL08                 INIT LIST FORM CALL08
         MVC   LCALL09,CALL09                 INIT LIST FORM CALL09
         MVC   LCALL10,CALL10                 INIT LIST FORM CALL10
         MVC   LCALL11,CALL11                 INIT LIST FORM CALL11
         MVC   LCALL12,CALL12                 INIT LIST FORM CALL12
         MVC   LCALL13,CALL13                 INIT LIST FORM CALL13
         MVC   LCALL14,CALL14                 INIT LIST FORM CALL14
         MVC   LCALL15,CALL15                 INIT LIST FORM CALL15
         MVC   LCALL16,CALL16                 INIT LIST FORM CALL16
         MVC   LCALL17,CALL17                 INIT LIST FORM CALL17
         MVC   LCALL18,CALL18                 INIT LIST FORM CALL18
         MVC   LCALL19,CALL19                 INIT LIST FORM CALL19
         MVC   LCALL20,CALL20                 INIT LIST FORM CALL20
         MVC   LCALL21,CALL21                 INIT LIST FORM CALL21
         MVC   LCALL22,CALL22                 INIT LIST FORM CALL22
         MVC   LCALL23,CALL23                 INIT LIST FORM CALL23
         MVC   LCALL24,CALL24                 INIT LIST FORM CALL24
         MVC   LCALL25,CALL25                 INIT LIST FORM CALL25
         MVC   LCALL26,CALL26                 INIT LIST FORM CALL26
         MVC   LCALL27,CALL27                 INIT LIST FORM CALL27
         MVC   LCALL28,CALL28                 INIT LIST FORM CALL28
         MVC   LCALL29,CALL29                 INIT LIST FORM CALL29
         MVC   LCALL30,CALL30                 INIT LIST FORM CALL30
         MVC   LCALL31,CALL31                 INIT LIST FORM CALL31
         MVC   LCALL32,CALL32                 INIT LIST FORM CALL32
         MVC   LCALL33,CALL33                 INIT LIST FORM CALL33
         MVC   LCALL34,CALL34                 INIT LIST FORM CALL34
         MVC   LCALL35,CALL35                 INIT LIST FORM CALL35
         MVC   LCALL36,CALL36                 INIT LIST FORM CALL36
         MVC   LCALL37,CALL37                 INIT LIST FORM CALL37
         MVC   LCALL38,CALL38                 INIT LIST FORM CALL38
         MVC   LCALLIX,CALLIX                 INIT LIST FORM CALLIX
         MVC   LEXTRACT,EXTRACT               INIT LIST FORM EXTRACT
         MVC   LOCLIST,LOCLST   INIT LIST FORM OF CAMLIST FOR LOCATE
         MVC   UNCLIST,UNCLST   INIT LIST FORM OF CAMLIST FOR UNCATL
         MVC   SCRLIST,SCRLST   INIT LIST FORM OF CAMLIST FOR SCRATCH
         MVC   OB1LIST,OB1LST   INIT LIST FORM OF CAMLIST FOR OBTAIN1
         MVC   OB3LIST,OB3LST   INIT LIST FORM OF CAMLIST FOR OBTAIN3
         MVC   PODCBL,PODCB     INIT DYNAMIC PDS DCB
         EJECT
*---------------------------------------------------------------------*
*        DEFINE AND INITIALIZE SPF VARS AND ENVIRONMET, GET LOGON ID  *
*---------------------------------------------------------------------*
         L     RF,ISPLADDR                    GET ISPLINK ADDRESS
         CALL  (15),(CONTROL,ERRORS,RETURN),VL  SET UP ERROR CONTROL
         SPACE
         CALL# DEFINE                         DEFINE POOL OF SPF VAR
         SPACE
         LA    R3,ADDRPSCB                    R3=ADDR OF PSCB POINTER
         EXTRACT (R3),MF=(E,LEXTRACT)         GET PSCB ADDR IN ADDRPSCB
         SPACE
         L     RF,ISPLADDR
         CALL  (15),(VGET,ZUSERN,SHARED),VL   GET LOGON ID FROM SHARED
         SPACE
         L     RF,ISPLADDR
         CALL  (15),(VGET,PROFILEN,PROFILE),VL GET VARIABLES FROM PROF
         EJECT
*---------------------------------------------------------------------*
*        BUILD SPF DATASET TABLE IN CORE                              *
*---------------------------------------------------------------------*
         IF SWCALL,EQ,ZERO,CLI                IF ITS EXTERNAL CALL
            CALL# XTOPEN                         OPEN MAIN TABLE OR 0
            IF RF,NE,0,LTR                       IF OPEN FAILED
               IEXIT# RC=8                          EXIT
            ENDIF                                ENDIF
         ELSE                                 ELSE
            CALL# ITOPEN                         OPEN PASSED TABLE
            IF RF,NE,0,LTR                       IF OPEN FAILED
               IEXIT# RC=99                         EXIT WITH RC=99
            ENDIF                                ENDIF
         ENDIF                                ENDIF
         SPACE
         L     RF,ISPLADDR                GET ISPLINK ADDRESS
         LA    R2,SYSTAB                  GET TABLE NAME
         CALL  (15),(,(R2),,,),VL,MF=(E,LCALL04) CHECK NUMBER OF ROWS
         MVI   DSNAME,BLANK
         MVC   DSNAME+1(L'DSNAME-1),DSNAME   CLEAR DSNAME
         MVC   DSNAME(L'DUMMYREC),DUMMYREC   SET UP DUMMY RECORD
         MVI   VOL,BLANK
         MVC   VOL+1(L'VOL-1),VOL            CLEAR VOLUME NAME
         L     R4,ROWS                       (R4)=NUMBER OF ROWS
         IF R4,GE,=F'2',C                    IF MORE THAN 2 RECORDS
            L     RF,ISPLADDR                   GET ISPLINK ADDRESS
            LA    R2,SYSTAB                     GET TABLE NAME
            CALL  (15),(,(R2)),VL,MF=(E,LCALL05) DELETE DUMMY RECORD
            L     RF,ISPLADDR                    GET ISPLINK ADDRESS
            LA    R2,SYSTAB                      GET SYSTAB ADDR
            CALL  (15),(,(R2)),VL,MF=(E,LCALL23) GOTO TOP OF TABLE
         ELSE                                ELSE
            IF R4,EQ,0,LTR                      IF NO ROWS IN TABLE
               L     RF,ISPLADDR                   GET ISPLINK ADDR
               LA    R2,SYSTAB                     GET TABLE NAME
               CALL  (15),(,(R2)),VL,MF=(E,LCALL06) ADD DUMMY RECORD
            ENDIF                               ENDIF
         ENDIF                               ENDIF
         EJECT
*---------------------------------------------------------------------*
*        MAIN LOOP TO PROCESS USER REQUESTS FROM PANEL                *
*---------------------------------------------------------------------*
         DO BELOW                        DO MAIN LOOP BELOW
            IF OPT,NE,BLANK256,CLC         IF PRIMARY CMD WAS ENTERED
               TRT   OPT,TABLER               FIND FIRST NONBLANK
               IF ZERO                        IT MUST BE THERE
                  ABEND 111,DUMP
               ENDIF
               LR    R4,R1                    GET ADDR OF INPUT
               IF 0(R4),EQ,TSOPFX,CLI         IF INPUT IS TSO CMD
                  MVC   LASTOPT,OPT              SAVE TSO COMMAND
                  CALL# TSOCMD                   CALL TSO EXECUTOR
                  MVI   OPT,BLANK
                  MVC   OPT+1(L'OPT-1),OPT       CLEAR PRIMARY INPUT
               ELSE                           ELSE
                  MVI   ERASE,NO                 SET NOERASE OF OPT
                  TRT   0(L'PCMDTABL+1,R4),TABLE GET END OF CMD NAME
                  IF ZERO                        IF CMD IS TOO LONG
                    MVC   MSGID,MSGID3             SET ERROR MSG
                  ELSE                           ELSE
                    LR    R6,R1                    GET CMD END ADDR
                    LR    R5,R1                    GET CMD END ADDR
                    SR    R5,R4                    GET CMD NAME LENGTH
                    BCTR  R5,R0                    -1 FOR EX
                    MVI   DWORD,BLANK              BLANK OUT DWORD
                    MVC   DWORD+1(L'DWORD-1),DWORD
                    MVC   DWORD(0),0(R4)           PLACE FOR CMD NAME
                    EX    R5,*-6                   MOVE CMD NAME
                    SPACE
                    LA    R2,PCMDTABL              GET ADDR OF CMD TABL
                    DOWHILE DWORD,NE,0(R2),CLC,*AND*,0(R2),NE,X'FF',CLI
                       LA    R2,(L'PCMDTABL+4)(R2)   SEARCH THRU TABLE
                    ENDDO
                    IFOR =A(0),EQ,(L'PCMDTABL)(R2),CLC  IF DUMMY CMD OR
                    IF 0(R2),EQ,X'FF',CLI          IF CMD NOT FOUND
                       MVC   MSGID,MSGID3             SET ERROR MSG
                    ELSE                           ELSE
                       L     RF,(L'PCMDTABL)(R2)      GET ADDR OF PGM
                       CALL# (15)                     EXEC PRIME CMD
                    ENDIF                          ENDIF
                  ENDIF                          ENDIF
               ENDIF                          ENDIF
            ELSE                           ELSE
               IF ACTION,NE,ZERO,CLI          IF NOT FIRST TIME THRU
                  LA    R2,LCMDTABL              GET ADDR OF LCMD TABL
                  DOWHILE ACTION,NE,0(R2),CLC,*AND*,0(R2),NE,X'FF',CLI
                     LA    R2,(L'LCMDTABL+4)(R2)   SEARCH THRU TABLE
                  ENDDO
                  IFOR =A(0),EQ,(L'LCMDTABL)(R2),CLC  IF DUMMY CMD OR
                  IF 0(R2),EQ,X'FF',CLI          IF CMD NOT FOUND
                     CALL# LCPROMPT                 CALL PROMPT PANEL
                  ELSE                           ELSE
                     L     RF,(L'LCMDTABL)(R2)      GET ADDR OF PGM
                     CALL# (15)                     EXEC LINE CMD
                  ENDIF                          ENDIF
               ENDIF                          ENDIF
            ENDIF                          ENDIF
            SPACE
            IF ERASE,EQ,YES,CLI            IF WE WANT TO ERASE OPT
               MVI   OPT,BLANK                ERASE OPT
               MVC   OPT+1(L'OPT-1),OPT       BLANK OUT PRIME INPUT
            ENDIF                          ENDIF
            IF SCROLL,EQ,NO,CLI            IF WE RETAIN SCREEN
               L     RF,ISPLADDR                    GET ISPLINK ADDRESS
               LA    R2,SYSTAB                      GET SYSTAB ADDR
               CALL  (15),(,(R2)),VL,MF=(E,LCALL23) GOTO TOP OF TABLE
               L     RF,ISPLADDR                    GET ISPLINK ADDR
               LA    R2,SYSTAB                      GET SYSTAB ADDR
               MVC   TBNUMBER,ZTDTOP                SET LAST SCREEN TOP
               LA    R3,TBNUMBER                    GET SKIP NUMBER ADD
               CALL  (15),(,(R2),(R3)),VL,MF=(E,LCALL24) RESET SCREEN
            ENDIF                          ENDIF
            IF ACTION,EQ,ZERO,CLI          IF FIRST TIME THRU
               MVI   FSTR,BLANK            CLEAR FILE STRUCTURE
               MVI   ACTION,BLANK             INITIALIZE LINE COMMAND
               MVI   MSGID,BLANK              REMOVE ANY MESSAGE
               MVC   MSGID+1(L'MSGID-1),MSGID
            ENDIF                          ENDIF
            SPACE
            L     RF,ISPLADDR                         GET ISPLINK ADDR
            LA    R2,SYSTAB                           GET TABLE NAME
            LA    R3,MSGID                            GET MSGID ADDR
            CALL  (15),(,(R2),,(R3)),VL,MF=(E,LCALL07) DISPLAY TABLE
            STH   RF,STATE                            SAVE REG (15)
            MVI   MSGID,BLANK
            MVC   MSGID+1(L'MSGID-1),MSGID            CLEAR MSG ID
            OC    OPT,BLANK256                        INPUT TO UP.CASE
            OC    MBR,BLANK256                        INPUT TO UP.CASE
            OI    FSTR,BLANK                          INPUT TO UP.CASE
            OI    ACTION,BLANK                        INPUT TO UPPER
            MVI   OPT+L'OPT-1,BLANK                   ERASE LAST BYTE
            MVI   ERASE,YES                           SET ERASE=YES
            MVI   SCROLL,NO                           SET SCROLL=NO
         UNTIL STATE,GE,=H'8',CLC        UNTIL USER END REQUEST
         SPACE
         CALL# CLEANUP                   PERFORM TERMINATION CLEANUP
         SPACE
         CALL# DELETE                    DELETE SPF VARS BEFORE END
         SPACE
         EXIT# RC=0                      EXIT
         EJECT
*                            ******************************************
*                            * DEFINE SPF VARIABLES IN FUNCTIOM POOL  *
*                            ******************************************
         SPACE 2
         ENTRE# DEFINE
         SPACE
         L     RF,ISPLADDR
         LA    R2,ROWS                             GET ROWS ADDR
         CALL  (15),(,,(R2),,),VL,MF=(E,LCALL08)   DEFINE ROWS
         SPACE
         L     RF,ISPLADDR
         LA    R2,ZUSER                            GET ZUSER ADDR
         CALL  (15),(,,(R2),,),VL,MF=(E,LCALL09)   DEFINE ZUSER
         SPACE
         L     RF,ISPLADDR
         LA    R2,OPT                              GET OPT ADDR
         CALL  (15),(,,(R2),,),VL,MF=(E,LCALL10)   DEFINE OPT
         SPACE
         L     RF,ISPLADDR
         LA    R2,DSNAME                           GET DSNAME ADDR
         CALL  (15),(,,(R2),,),VL,MF=(E,LCALL11)   DEFINE DSNAME
         SPACE
         L     RF,ISPLADDR
         LA    R2,VOL                              GET VOLUME ADDR
         CALL  (15),(,,(R2),,),VL,MF=(E,LCALL12)   DEFINE VOLUME
         SPACE
         L     RF,ISPLADDR
         LA    R2,ACTION                           GET ACTION ADDR
         CALL  (15),(,,(R2),,),VL,MF=(E,LCALL13)   DEFINE ACTION
         SPACE
         L     RF,ISPLADDR
         LA    R2,LASTACT                          GET LASTACT ADDR
         CALL  (15),(,,(R2),,),VL,MF=(E,LCALL14)   DEFINE LASTACT
         SPACE
         L     RF,ISPLADDR
         LA    R2,LCC                              GET COND CODE ADDR
         CALL  (15),(,,(R2),,),VL,MF=(E,LCALL15)   DEFINE LAST C. CODE
         SPACE
         L     RF,ISPLADDR
         LA    R2,MBR                              GET COND CODE ADDR
         CALL  (15),(,,(R2),,),VL,MF=(E,LCALL18)   DEFINE MBR
         SPACE
         L     RF,ISPLADDR
         LA    R2,MSGPARM                          GET MSGPARM ADDR
         CALL  (15),(,,(R2),,),VL,MF=(E,LCALL20)   DEFINE MSGPARM
         SPACE
         L     RF,ISPLADDR
         LA    R2,ZERRMSG                          GET ZERRMSG ADDR
         CALL  (15),(,,(R2),,),VL,MF=(E,LCALL21)   DEFINE ZERRMSG
         SPACE
         L     RF,ISPLADDR
         LA    R2,ZTDTOP                           GET ZTDTOP ADDR
         CALL  (15),(,,(R2),,),VL,MF=(E,LCALL26)   DEFINE ZTDTOP
         SPACE
         L     RF,ISPLADDR
         LA    R2,CRPS                             GET CRPS ADDR
         CALL  (15),(,,(R2),,),VL,MF=(E,LCALL29)   DEFINE CRPS
         SPACE
         L     RF,ISPLADDR
         LA    R2,BUFFCMD                          GET BUFFCMD ADDR
         CALL  (15),(,,(R2),,),VL,MF=(E,LCALL32)   DEFINE BUFFCMD
         SPACE
         L     RF,ISPLADDR
         LA    R2,SYSTAB                           GET SYSTAB ADDR
         CALL  (15),(,,(R2),,),VL,MF=(E,LCALL34)   DEFINE SYSTAB
         SPACE
         L     RF,ISPLADDR
         LA    R2,FSTR                             GET FSTR ADDR
         CALL  (15),(,,(R2),,),VL,MF=(E,LCALL35)   DEFINE FSTR
         SPACE
         L     RF,ISPLADDR
         LA    R2,PNSL                             GET PNSL ADDR
         CALL  (15),(,,(R2),,),VL,MF=(E,LCALL36)   DEFINE PNSL
         SPACE
         L     RF,ISPLADDR
         LA    R2,PVOL                             GET PVOL ADDR
         CALL  (15),(,,(R2),,),VL,MF=(E,LCALL37)   DEFINE PVOL
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * DELETE SPF VARIABLES                   *
*                            ******************************************
         SPACE 2
         ENTRE# DELETE
*
*        DELETE ALL LOADED MODULES
*---------------------------------
         DELETE EP=ISPLINK        DELETE SPF LINK ROUTINE
         DELETE EP=IDMLOCIX       DELETE LOCATE INDEX ROUTINE
         DELETE EP=IDMPRINT       DELETE DATASET PRINT UTILITY
         DELETE EP=IDMDSAT        DELETE DATASET DSAT UTILITY
         DELETE EP=IDMDELET       DELETE DATASET DELET UTILITY
*---------------------------------
         L     RF,ISPLADDR                  GET ISPLINK ADDRESS
         CALL  (15),(VRESET),VL             DELETE SPF VARIABLES
         SPACE
         EXIT# RC=(15)
         EJECT
*                            ******************************************
*                            * TSOCMD - TSO COMMAND PROCESSOR ROUTINE *
*                            ******************************************
         SPACE 2
         ENTRE# TSOCMD
         SPACE
         MVI   BUFFCMD,BLANK                CLEAR TSO BUFFER
         MVC   BUFFCMD+1(L'BUFFCMD-1),BUFFCMD
         LA    R4,1(R4)                     GET INPUT COMMAND ADDRESS
         LA    R3,OPT+L'OPT                 GET END OF INPUT BUFFER
         SR    R3,R4                        GET LENGTH OF INPUT CMD
         IF    R3,NE,0,LTR                  IF IT IS NOT ZERO
               BCTR  R3,R0                     -1 FOR EX
         ENDIF                              ENDIF
         MVC   BUFFCMD(0),0(R4)
         EX    R3,*-6                       MOVE INPUT CMD TO TSO BUFF
         LA    R5,(BUFFEND-BUFFTSO)         GET LENGTH OF TSO BUFFER
         ST    R5,BUFFLEN                   STORE LENGTH INTO WORD
         L     RF,ISPLADDR                        GET ISPLINK ADDRESS
         CALL  (15),(CONTROL,DISPLAY,REFRESH),VL  PRESERVE SPF SCREEN
         L     RF,ISPLADDR                        GET ISPLINK ADDRESS
         LA    R2,BUFFLEN                         GET BUFFLEN ADDR
         LA    R5,BUFFTSO                         GET BUFFTSO ADDR
         CALL  (15),(,(R2),(R5)),VL,MF=(E,LCALL16) EXEC TSO COMMAND
         IF RF,EQ,0,LTR                           IF RC=0
            MVC   MSGID,MSGID1                       SET MSG OK
         ELSE                                     ELSE
            MVI   MSGPARM,BLANK                      INIT LCC
            MVC   MSGPARM+1(L'MSGPARM-1),MSGPARM
            CVD   RF,DWORD                           CONV RC TO DEC
            UNPK  MSGPARM(4),DWORD                   UNPACK TO MSGPAR
            OI    MSGPARM+3,EDSIGN                   MAKE IT PRINTABLE
            MVC   MSGID,MSGID2                       SET ERROR MSG
         ENDIF                                    ENDIF
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            *   CLEANUP SUBROUTINE - AT TERMINATION  *
*                            ******************************************
         SPACE 2
         ENTRE# CLEANUP
         L     RF,ISPLADDR                        GET ISPLINK ADDRESS
         LA    R2,SYSTAB                          GET SYSTAB ADDR
         CALL  (15),(,(R2),,,),VL,MF=(E,LCALL17)  CLOSE TABLE
         SPACE
         L     RF,ISPLADDR
         CALL  (15),(VPUT,PROFILEN,PROFILE),VL PUT VARIABLES INTO PROF
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * SAVE TABLE WITHOUT CLOSE - PRIME CMD   *
*                            ******************************************
         SPACE 2
         ENTRE# PCSAVE
         L     RF,ISPLADDR                        GET ISPLINK ADDRESS
         LA    R2,SYSTAB                          GET SYSTAB ADDR
         CALL  (15),(,(R2),,,),VL,MF=(E,LCALL28)  SAVE TABLE
         IF RF,EQ,0,LTR                           IF TABLE SAVED
            MVI   MSGPARM,BLANK
            MVC   MSGPARM+1(L'MSGPARM-1),MSGPARM     ERASE MSG PARM
            MVC   MSGPARM(L'SYSTAB),SYSTAB           TABLE NAME TO MSG
            MVC   MSGID,MSGID17                      SET MSG OK
            MVI   ERASE,YES                          ERASE PRIME INPUT
         ELSE                                     ELSE
            MVC   MSGID,ZERRMSG                      SET ERROR MSG
         ENDIF                                    ENDIF
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            *  ADD DSNAME TO TABLE - SUBROUTINE      *
*                            ******************************************
         SPACE 2
         ENTRE# PCADD
*---------------------------------------------------------------------*
*        SET ROW POINTER FOR ADDING OF NEW ROW                        *
*---------------------------------------------------------------------*
         IF ACTION,EQ,BEFORE,CLI              IF ADD BEFORE CURRENT ROW
            L     RF,ISPLADDR                    GET ISPLINK ADDRESS
            LA    R2,SYSTAB                      GET SYSTAB ADDR
            MVC   TBNUMBER,MINUS1                SET SKIP -1 ROW
            LA    R3,TBNUMBER                    GET SKIP NUMBER ADDR
            CALL  (15),(,(R2),(R3)),VL,MF=(E,LCALL24) SKIP -1 ROW
         ELSE                                 ELSE
            IF ACTION,NE,AFTER,CLI               IF NOT AFTER CURR. ROW
               L     RF,ISPLADDR                    GET ISPLINK ADDRESS
               LA    R2,SYSTAB                      GET SYSTAB ADDR
               CALL  (15),(,(R2)),VL,MF=(E,LCALL23) GOTO TOP OF TABLE
            ENDIF                                ENDIF
         ENDIF                                ENDIF
         SPACE
*---------------------------------------------------------------------*
*        EXTRACT DSNAME FROM PRIMARY INPUT FIELD - ITS FIRST OPERAND  *
*---------------------------------------------------------------------*
         LA     R4,OPT+L'OPT       R4=ADDR OF END OF INPUT RECORD
         SR     R4,R6              R4=LENGTH OF INPUT AFTER CMD NAME
         IF R4,EQ,0,LTR            IF OPERAND NOT ENTERED
            MVC   MSGID,MSGID4        SET ERROR MSG
            IEXIT# RC=4               RETURN
         ENDIF                     ENDIF
         BCTR   R4,R0              -1 FOR EX
         TRT    0(0,R6),TABLER     SEARCH FOR NONBLANK-FIRST OPERAND
         EX     R4,*-6
         IF ZERO                   IF OPERAND NOT ENTERED
            MVC   MSGID,MSGID4        SET ERROR MSG
            IEXIT# RC=4               RETURN
         ENDIF                     ENDIF
         LR    R6,R1               R6=ADDRESS OF FIRST OPERAND
*---------------------------------------------------------------------*
*        IF ITS DIRECTORY TITLE - JUST SIMPLY ADD TITLE ROW           *
*---------------------------------------------------------------------*
         SPACE
         IF 0(R6),GE,X'F1',CLI,*AND*,0(R6),LE,X'F9',CLI
*           BUILD DIRECTORY TITLE IN A ROW
            MVI   DSNAME,BLANK
            MVC   DSNAME+1(L'DSNAME-1),DSNAME
            MVC   DSNAME,0(R6)                                     ,
            MVI   VOL,BLANK           BLANK OUT VOLSER BEFORE USE
            MVC   VOL+1(L'VOL-1),VOL
            MVI   MBR,BLANK
            MVC   MBR+1(L'MBR-1),MBR              ERASE MEMBER NAME
            MVI   FSTR,BLANK
            MVI   ACTION,BLANK                    ERASE ACTION
            MVI   LASTACT,BLANK
            MVC   LASTACT+1(L'LASTACT-1),LASTACT  ERASE LAST ACTION
            MVC   LASTACT(L'LACTADD),LACTADD      SET UP LAST ACTION
            L     RF,ISPLADDR                     GET ISPLINK ADDRESS
            LA    R2,SYSTAB                       GET SYSTAB ADDR
            CALL  (15),(,(R2)),VL,MF=(E,LCALL06)  ADD TITLE TO A TABLE
            MVI   MSGPARM,BLANK
            MVC   MSGPARM+1(L'MSGPARM-1),MSGPARM  ERASE MSG PARM
            MVC   MSGPARM(L'DSNAME),DSNAME        MOVE DSN TO MSG
            IF RF,EQ,0,LTR                        IF RC=0
               MVC   MSGID,MSGID49                   SET MSG OK
               MVI   ERASE,YES                       SET ERASE=YES
            ELSE                                  ELSE
               IF RF,EQ,=H'8',CH
                  MVC   MSGID,MSGID9                    SET ERR MSG
               ELSE
                  MVC   MSGID,ZERRMSG                   SET SPF MSG
                  MVI   ERASE,YES                       SET ERASE=YES
               ENDIF
            ENDIF
            SPACE
            IEXIT# RC=0
         ENDIF
*---------------------------------------------------------------------*
*        IF ITS NOT DIRECTORY TITLE, CONTINUE AS DSNAME               *
*---------------------------------------------------------------------*
         LA     R4,OPT+L'OPT       R4=ADDR OF END OF INPUT RECORD
         SR     R4,R6              R4=LENGTH OF THE REST OF INPUT
         LA     R3,L'DSNAME+1      R3=MAX LENGTH OF FIRST OPER + BLANK
         IF R4,GT,R3,CR
            LR    R4,R3            R4=MIN VALUE OF R4 AND R3
         ENDIF
         IF R4,EQ,0,LTR            LENGTH MUST NOT BE ZERO
            MVC   MSGID,MSGID4
            IEXIT# RC=4
         ENDIF
         BCTR   R4,R0              -1 FOR EX
         TRT   0(0,R6),TABLE
         EX     R4,*-6             SEARCH FOR FIRST BLANK AFTER OPER
         IF ZERO                   IF END OF OPERAND NOT FOUND
            MVC   MSGID,MSGID4        SET ERROR MSG
            IEXIT# RC=4               RETURN
         ENDIF                     ENDIF
         LR    R5,R1               R5=END OF FIRST PARM
         SR    R5,R6               R5=LENGTH OF DSNAME - FIRST PARM
         STH   R5,DSNLEN           SAVE DSNAME LENGTH
         BCTR  R5,R0               -1 FOR EX
         MVI   DSNAME,BLANK        BLANK OUT DSNAME BEFORE USE
         MVC   DSNAME+1(L'DSNAME-1),DSNAME
         MVC   DSNAME(0),0(R6)
         EX    R5,*-6              MOVE 1 PARM TO DSNAME
         SPACE
*---------------------------------------------------------------------*
*        DSNAME NOW EXTRACTED FROM INPUT, LETS GET VOLSER FROM 2 OPER *
*---------------------------------------------------------------------*
         MVI   VOL,BLANK           BLANK OUT VOLSER BEFORE USE
         MVC   VOL+1(L'VOL-1),VOL
         LA    R5,1(R5)            R5=LENGTH OF 1 OPERAND
         AR    R6,R5               R6=POINTS AFTER FIRST OPERAND
         LA    R4,OPT+L'OPT        R4=ADDR OF END OF INPUT RECORD
         SR    R4,R6               R4=LENGTH OF INPUT AFTER 1 OPERAND
         BCTR   R4,R0              -1 FOR EX
         TRT    0(0,R6),TABLER     SEARCH FOR NONBLANK-SECOND OPERAND
         EX     R4,*-6
         IF NOTZERO               IF OPERAND FOUND
            LR    R6,R1               R6=ADDRESS OF SECOND OPERAND
            LA    R4,OPT+L'OPT        R4=ADDR OF END OF INPUT RECORD
            SR    R4,R6               R4=LENGTH OF THE REST OF INPUT
            LA    R3,L'VOL+1          R3=MAX LENGTH OF 2 OPER + BLANK
            IF R4,GT,R3,CR
               LR    R4,R3            R4=MIN VALUE OF R4 AND R3
            ENDIF
            BCTR   R4,R0              -1 FOR EX
            TRT   0(0,R6),TABLE
            EX     R4,*-6             SEARCH FOR BLANK AFTER OPER
            LR    R5,R1               R5=END OF SECOND PARM
            SR    R5,R6               R5=LENGTH OF VOLSER-SECOND PARM
            BCTR  R5,R0               -1 FOR EX
            MVC   VOL(0),0(R6)
            EX    R5,*-6              MOVE 2 PARM TO VOLSER
         ENDIF                     ENDIF
         SPACE
*---------------------------------------------------------------------*
*        ANALIZE DSNAME AND BUILD DSN PRESENTATION FOR TABLE          *
*---------------------------------------------------------------------*
         LA    R6,DSNAME                        R6=DSNAME ADDR
         LH    R5,DSNLEN                        R5=DSNAME LENGTH
         IF 0(R6),EQ,QUOTE,CLI                  IF ITS FULL DSNAME
            AR    R6,R5                           R6=DSN END ADDR
            BCTR  R6,R0                           R6=DSN LAST BYTE ADD
            IF 0(R6),EQ,QUOTE,CLI                 IF LAST BYTE=QUOTE
               MVI   0(R6),BLANK                     BLANK IT OUT
            ENDIF                                 ENDIF
            MVC   DSNAME(L'DSNAME-1),DSNAME+1     GET RID OF LEAD QUOTE
         ELSE                                   ELSE (IF NOT FULL DSN)
            L     R4,ADDRPSCB                     R4=PSCB ADDR
            USING PSCB,R4                         R4 - PSCB BASE REG
            L     R4,PSCBUPT                      R4=UPT ADDR
            USING UPT,R4                          R4 - UPT BASE REG
            SR    R3,R3                           CLEAR REG 3
            IC    R3,UPTPREFL                     R3=PREFIX LENGTH
            IF R3,NE,0,LTR                IF PREFIX EXISTS
               MVI   MSGPARM,BLANK           MAKE MSGPARM WORK FIELD
               MVC   MSGPARM+1(L'MSGPARM-1),MSGPARM ERASE MSG PARM
               MVC   MSGPARM(L'DSNAME),DSNAME       SAVE DSN IN MSG
               BCTR  R3,R0                   -1 FOR EX
               MVC   DSNAME(0),UPTPREFX
               EX    R3,*-6                  MOVE PREF TO DSNAME
               LA    R3,1(R3)                R3=LENGTH OF PREF
               AR    R6,R3                   R6=END OF PREFIX
               MVI   0(R6),POINT             MOVE POINT AFTER PREF
               LA    R6,1(R6)                R6=ADDR AFTER POINT
               BCTR  R5,R0                   R5=DSN LENGTH-1 FOR EX
               MVC   0(0,R6),MSGPARM
               EX    R5,*-6                  MOVE DSN AFTER PREF
            ENDIF                         ENDIF
            DROP  R4
         ENDIF
         SPACE
*---------------------------------------------------------------------*
*        INITIALIZE REST OF FIELDS IN NEW ROW AND ADD IT TO THE TABLE *
*---------------------------------------------------------------------*
         MVI   MBR,BLANK
         MVC   MBR+1(L'MBR-1),MBR                 ERASE MEMBER NAME
         MVI   FSTR,BLANK
         MVI   ACTION,BLANK                       ERASE ACTION
         MVI   LASTACT,BLANK
         MVC   LASTACT+1(L'LASTACT-1),LASTACT     ERASE LAST ACTION
         MVC   LASTACT(L'LACTADD),LACTADD         SET UP LAST ACTION
         L     RF,ISPLADDR                        GET ISPLINK ADDRESS
         LA    R2,SYSTAB                          GET SYSTAB ADDR
         CALL  (15),(,(R2)),VL,MF=(E,LCALL06)     ADD DATASET TO TABLE
         MVI   MSGPARM,BLANK
         MVC   MSGPARM+1(L'MSGPARM-1),MSGPARM     ERASE MSG PARM
         MVC   MSGPARM(L'DSNAME),DSNAME           MOVE DSN TO MSG
         IF RF,EQ,0,LTR                           IF RC=0
            MVC   MSGID,MSGID8                       SET MSG OK
            MVI   ERASE,YES                          SET ERASE=YES
         ELSE                                     ELSE
            IF RF,EQ,=H'8',CH
               MVC   MSGID,MSGID9                       SET ERR MSG
            ELSE
               MVC   MSGID,ZERRMSG                      SET SPF MSG
               MVI   ERASE,YES                          SET ERASE=YES
            ENDIF
         ENDIF
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * RESHOW LAST TSO COMMAND - ROUTINE      *
*                            ******************************************
         SPACE 2
         ENTRE# PCRESHOW
         SPACE
         MVC   OPT,LASTOPT          RESTORE LAST TSO COMMAND
         MVI   ERASE,NO             SET ERASE=NO
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * RESET SCREEN DISPLAY - ROUTINE         *
*                            ******************************************
         ENTRE# PCRESET                                     *HMD 09/82*
         SPACE
         L RF,ISPLADDR                REFRESH SCREEN        *HMD 09/82*
         CALL (15),(CONTROL,DISPLAY,REFRESH),VL             *HMD 09/82*
         MVI ERASE,YES                ERASE OPT FIELD       *HMD 09/82*
         MVI ACTION,ZERO              SET ACTION FIELD      *HMD 09/82*
         MVI SCROLL,NO                DO NOT SCROLL         *HMD 09/82*
         EXIT# RC=0                                         *HMD 09/82*
         EJECT                                              *HMD 09/82*
*                            ******************************************
*                            * EDIT DATA SET ROUTINE                  *
*                            ******************************************
         SPACE 2
         ENTRE# PCEDIT
*---------------------------------------------------------------------*
*        EXTRACT DSNAME FROM PRIMARY INPUT FIELD - ITS FIRST OPERAND  *
*---------------------------------------------------------------------*
         LA     R4,OPT+L'OPT       R4=ADDR OF END OF INPUT RECORD
         SR     R4,R6              R4=LENGTH OF INPUT AFTER CMD NAME
         IF R4,EQ,0,LTR            IF OPERAND NOT ENTERED
            MVC   MSGID,MSGID4        SET ERROR MSG
            IEXIT# RC=4               RETURN
         ENDIF                     ENDIF
         BCTR   R4,R0              -1 FOR EX
         TRT    0(0,R6),TABLER     SEARCH FOR NONBLANK-FIRST OPERAND
         EX     R4,*-6
         IF ZERO                   IF OPERAND NOT ENTERED
            MVC   MSGID,MSGID4        SET ERROR MSG
            IEXIT# RC=4               RETURN
         ENDIF                     ENDIF
         LR    R6,R1               R6=ADDRESS OF FIRST OPERAND
         SPACE
         LA     R4,OPT+L'OPT       R4=ADDR OF END OF INPUT RECORD
         SR     R4,R6              R4=LENGTH OF THE REST OF INPUT
         LA     R3,L'DSNAME+1      R3=MAX LENGTH OF FIRST OPER + BLANK
         IF R4,GT,R3,CR
            LR    R4,R3            R4=MIN VALUE OF R4 AND R3
         ENDIF
         IF R4,EQ,0,LTR            LENGTH MUST NOT BE ZERO
            MVC   MSGID,MSGID4
            IEXIT# RC=4
         ENDIF
         BCTR   R4,R0              -1 FOR EX
         TRT   0(0,R6),TABLE
         EX     R4,*-6             SEARCH FOR FIRST BLANK AFTER OPER
         IF ZERO                   IF END OF OPERAND NOT FOUND
            MVC   MSGID,MSGID4        SET ERROR MSG
            IEXIT# RC=4               RETURN
         ENDIF                     ENDIF
         LR    R5,R1               R5=END OF FIRST PARM
         SR    R5,R6               R5=LENGTH OF DSNAME - FIRST PARM
         BCTR  R5,R0               -1 FOR EX
         MVI   DSNAME,BLANK        BLANK OUT DSNAME BEFORE USE
         MVC   DSNAME+1(L'DSNAME-1),DSNAME
         MVC   DSNAME(0),0(R6)
         EX    R5,*-6              MOVE 1 PARM TO DSNAME
*---------------------------------------------------------------------*
*        DSNAME NOW EXTRACTED FROM INPUT, LETS GET VOLSER FROM 2 OPER *
*---------------------------------------------------------------------*
         MVI   VOL,BLANK           BLANK OUT VOLSER BEFORE USE
         MVC   VOL+1(L'VOL-1),VOL
         LA    R5,1(R5)            R5=LENGTH OF 1 OPERAND
         AR    R6,R5               R6=POINTS AFTER FIRST OPERAND
         LA    R4,OPT+L'OPT        R4=ADDR OF END OF INPUT RECORD
         SR    R4,R6               R4=LENGTH OF INPUT AFTER 1 OPERAND
         BCTR   R4,R0              -1 FOR EX
         TRT    0(0,R6),TABLER     SEARCH FOR NONBLANK-SECOND OPERAND
         EX     R4,*-6
         IF NOTZERO               IF OPERAND FOUND
            LR    R6,R1               R6=ADDRESS OF SECOND OPERAND
            LA    R4,OPT+L'OPT        R4=ADDR OF END OF INPUT RECORD
            SR    R4,R6               R4=LENGTH OF THE REST OF INPUT
            LA    R3,L'VOL+1          R3=MAX LENGTH OF 2 OPER + BLANK
            IF R4,GT,R3,CR
               LR    R4,R3            R4=MIN VALUE OF R4 AND R3
            ENDIF
            BCTR   R4,R0              -1 FOR EX
            TRT   0(0,R6),TABLE
            EX     R4,*-6             SEARCH FOR BLANK AFTER OPER
            LR    R5,R1               R5=END OF SECOND PARM
            SR    R5,R6               R5=LENGTH OF VOLSER-SECOND PARM
            BCTR  R5,R0               -1 FOR EX
            MVC   VOL(0),0(R6)
            EX    R5,*-6              MOVE 2 PARM TO VOLSER
         ENDIF                     ENDIF
         SPACE
*---------------------------------------------------------------------*
*        NOW WE READY TO EDIT DATASET - GO !                          *
*---------------------------------------------------------------------*
         L     RF,ISPLADDR                        GET ISPLINK ADDRESS
         LA    R2,DSNAME                          GET DSNAME ADDR
         LA    R3,VOL                             GET VOLUME ADDR
         CALL  (15),(,(R2),(R3)),VL,MF=(E,LCALL19) EDIT DATASET
         MVI   MSGPARM,BLANK
         MVC   MSGPARM+1(L'MSGPARM-1),MSGPARM     ERASE MSG PARM
         MVC   MSGPARM(L'DSNAME),DSNAME           MOVE DSN TO MSG
         IF RF,EQ,0,LTR                           IF RC=0
            MVC   MSGID,MSGID5                       SET MSG OK
         ELSE                                     ELSE
            IF RF,EQ,=H'4',CH
               MVC   MSGID,MSGID6                       SET MSG OK
            ELSE
               MVC   MSGID,ZERRMSG                      SET SPF MSG
            ENDIF
         ENDIF
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * BROWSE DATA SET - ROUTINE              *
*                            ******************************************
         SPACE 2
         ENTRE# PCBROWSE
*---------------------------------------------------------------------*
*        EXTRACT DSNAME FROM PRIMARY INPUT FIELD - ITS FIRST OPERAND  *
*---------------------------------------------------------------------*
         LA     R4,OPT+L'OPT       R4=ADDR OF END OF INPUT RECORD
         SR     R4,R6              R4=LENGTH OF INPUT AFTER CMD NAME
         IF R4,EQ,0,LTR            IF OPERAND NOT ENTERED
            MVC   MSGID,MSGID4        SET ERROR MSG
            IEXIT# RC=4               RETURN
         ENDIF                     ENDIF
         BCTR   R4,R0              -1 FOR EX
         TRT    0(0,R6),TABLER     SEARCH FOR NONBLANK-FIRST OPERAND
         EX     R4,*-6
         IF ZERO                   IF OPERAND NOT ENTERED
            MVC   MSGID,MSGID4        SET ERROR MSG
            IEXIT# RC=4               RETURN
         ENDIF                     ENDIF
         LR    R6,R1               R6=ADDRESS OF FIRST OPERAND
         SPACE
         LA     R4,OPT+L'OPT       R4=ADDR OF END OF INPUT RECORD
         SR     R4,R6              R4=LENGTH OF THE REST OF INPUT
         LA     R3,L'DSNAME+1      R3=MAX LENGTH OF FIRST OPER + BLANK
         IF R4,GT,R3,CR
            LR    R4,R3            R4=MIN VALUE OF R4 AND R3
         ENDIF
         IF R4,EQ,0,LTR            LENGTH MUST NOT BE ZERO
            MVC   MSGID,MSGID4
            IEXIT# RC=4
         ENDIF
         BCTR   R4,R0              -1 FOR EX
         TRT   0(0,R6),TABLE
         EX     R4,*-6             SEARCH FOR FIRST BLANK AFTER OPER
         IF ZERO                   IF END OF OPERAND NOT FOUND
            MVC   MSGID,MSGID4        SET ERROR MSG
            IEXIT# RC=4               RETURN
         ENDIF                     ENDIF
         LR    R5,R1               R5=END OF FIRST PARM
         SR    R5,R6               R5=LENGTH OF DSNAME - FIRST PARM
         BCTR  R5,R0               -1 FOR EX
         MVI   DSNAME,BLANK        BLANK OUT DSNAME BEFORE USE
         MVC   DSNAME+1(L'DSNAME-1),DSNAME
         MVC   DSNAME(0),0(R6)
         EX    R5,*-6              MOVE 1 PARM TO DSNAME
*---------------------------------------------------------------------*
*        DSNAME NOW EXTRACTED FROM INPUT, LETS GET VOLSER FROM 2 OPER *
*---------------------------------------------------------------------*
         MVI   VOL,BLANK           BLANK OUT VOLSER BEFORE USE
         MVC   VOL+1(L'VOL-1),VOL
         LA    R5,1(R5)            R5=LENGTH OF 1 OPERAND
         AR    R6,R5               R6=POINTS AFTER FIRST OPERAND
         LA    R4,OPT+L'OPT        R4=ADDR OF END OF INPUT RECORD
         SR    R4,R6               R4=LENGTH OF INPUT AFTER 1 OPERAND
         BCTR   R4,R0              -1 FOR EX
         TRT    0(0,R6),TABLER     SEARCH FOR NONBLANK-SECOND OPERAND
         EX     R4,*-6
         IF NOTZERO               IF OPERAND FOUND
            LR    R6,R1               R6=ADDRESS OF SECOND OPERAND
            LA    R4,OPT+L'OPT        R4=ADDR OF END OF INPUT RECORD
            SR    R4,R6               R4=LENGTH OF THE REST OF INPUT
            LA    R3,L'VOL+1          R3=MAX LENGTH OF 2 OPER + BLANK
            IF R4,GT,R3,CR
               LR    R4,R3            R4=MIN VALUE OF R4 AND R3
            ENDIF
            BCTR   R4,R0              -1 FOR EX
            TRT   0(0,R6),TABLE
            EX     R4,*-6             SEARCH FOR BLANK AFTER OPER
            LR    R5,R1               R5=END OF SECOND PARM
            SR    R5,R6               R5=LENGTH OF VOLSER-SECOND PARM
            BCTR  R5,R0               -1 FOR EX
            MVC   VOL(0),0(R6)
            EX    R5,*-6              MOVE 2 PARM TO VOLSER
         ENDIF                     ENDIF
         SPACE
*---------------------------------------------------------------------*
*        NOW WE BROWSE DATASET                                        *
*---------------------------------------------------------------------*
         L     RF,ISPLADDR                        GET ISPLINK ADDRESS
         LA    R2,DSNAME                          GET DSNAME ADDR
         LA    R3,VOL                             GET VOLUME ADDR
         CALL  (15),(,(R2),(R3)),VL,MF=(E,LCALL22) BROWSE DATASET
         MVI   MSGPARM,BLANK
         MVC   MSGPARM+1(L'MSGPARM-1),MSGPARM     ERASE MSG PARM
         MVC   MSGPARM(L'DSNAME),DSNAME           MOVE DSN TO MSG
         IF RF,EQ,0,LTR                           IF RC=0
            MVC   MSGID,MSGID7                       SET MSG OK
         ELSE                                     ELSE
            MVC   MSGID,ZERRMSG                      SET SPF MSG
         ENDIF                                    ENDIF
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * GLOBAL ADD DSN FROM CATALOG TO TABLE   *
*                            ******************************************
         SPACE 2
         ENTRE# PCGADD
*---------------------------------------------------------------------*
*        SET ROW POINTER FOR ADDING SET OF NEW ROWS                   *
*---------------------------------------------------------------------*
         IF ACTION,EQ,BEFORE,CLI              IF ADD BEFORE CURRENT ROW
            L     RF,ISPLADDR                    GET ISPLINK ADDRESS
            LA    R2,SYSTAB                      GET SYSTAB ADDR
            MVC   TBNUMBER,MINUS1                SET SKIP -1 ROW
            LA    R3,TBNUMBER                    GET SKIP NUMBER ADDR
            CALL  (15),(,(R2),(R3)),VL,MF=(E,LCALL24) SKIP -1 ROW
         ELSE                                 ELSE
            IF ACTION,NE,AFTER,CLI               IF NOT AFTER CURR. ROW
               L     RF,ISPLADDR                    GET ISPLINK ADDRESS
               LA    R2,SYSTAB                      GET SYSTAB ADDR
               CALL  (15),(,(R2)),VL,MF=(E,LCALL23) GOTO TOP OF TABLE
            ENDIF                                ENDIF
         ENDIF                                ENDIF
         SPACE
*---------------------------------------------------------------------*
*        EXTRACT INDEX FROM INPUT FIELD - ITS FIRST OPERAND           *
*---------------------------------------------------------------------*
         MVI    DSINDEX,BLANK
         MVC    DSINDEX+1(L'DSINDEX-1),DSINDEX  ERASE DSINDEX
         BCTR   R6,R0              POINT R6 TO LAST BYTE OF CMD NAME
         MVI   GFLAG,BLANK         ASSUME ITS 'G' COMMAND
         IF 0(R6),EQ,C'V',CLI      IF ITS 'GV' COMMAND
            MVI   GFLAG,C'V'          SET UP SWITCH
         ENDIF                     ENDIF
         LA     R6,1(R6)           POINT R6 TO BLANK AFTER CMD NAME
         SPACE
         LA     R4,OPT+L'OPT       R4=ADDR OF END OF INPUT RECORD
         SR     R4,R6              R4=LENGTH OF INPUT AFTER CMD NAME
         BCTR   R4,R0              -1 FOR EX
         TRT    0(0,R6),TABLER     SEARCH FOR NONBLANK-FIRST OPERAND
         EX     R4,*-6
         IF NOTZERO                IF OPERAND ENTERED
            LR    R6,R1               R6=ADDRESS OF FIRST OPERAND
            SPACE
            LA     R4,OPT+L'OPT       R4=ADDR OF END OF INPUT RECORD
            SR     R4,R6              R4=LENGTH OF THE REST OF INPUT
            LA     R3,L'DSINDEX+1     R3=MAX LENGTH OF FIRST OPER+BLANK
            IF R4,GT,R3,CR
               LR    R4,R3            R4=MIN VALUE OF R4 AND R3
            ENDIF
            BCTR   R4,R0              -1 FOR EX
            TRT   0(0,R6),TABLE
            EX     R4,*-6             SEARCH FOR FIRST BLANK AFTER OPER
            IF ZERO                   IF OPERAND TOO LONG
               MVC   MSGID,MSGID14       SET ERR MSG
               IEXIT# RC=4               RETURN
            ENDIF                     ENDIF
            LR    R5,R1               R5=END OF FIRST PARM
            SR    R5,R6               R5=LENGTH OF FIRST PARM-INDEX
            BCTR  R5,R0               -1 FOR EX
            MVC   DSINDEX(0),0(R6)
            EX    R5,*-6              MOVE 1 PARM TO TARGET DSINDEX
         ELSE
            L     R4,ADDRPSCB                     R4=PSCB ADDR
            USING PSCB,R4                         R4 - PSCB BASE REG
            L     R4,PSCBUPT                      R4=UPT ADDR
            USING UPT,R4                          R4 - UPT BASE REG
            SR    R3,R3                           CLEAR REG 3
            IC    R3,UPTPREFL                     R3=PREFIX LENGTH
            IF R3,NE,0,LTR                IF PREFIX EXISTS
               BCTR  R3,R0                   -1 FOR EX
               MVC   DSINDEX(0),UPTPREFX
               EX    R3,*-6                  MOVE PREF TO DSINDEX
            ELSE                          ELSE (NO PREFIX AND NO PARM)
               MVC   MSGID,MSGID4            SET ERR MSG
               IEXIT# RC=4                   RETURN
            ENDIF                         ENDIF
         ENDIF                     ENDIF
         SPACE
*---------------------------------------------------------------------*
*        INDEX IS BUILT. PERFORM INITIALIZATION FOR CATALOG SEARCH    *
*---------------------------------------------------------------------*
*        GET CRP (CURRENT ROW POINTER)
*        INITIALIZE PARMLIST FOR IDMLOCIX + GETMAIN CORE
*        SET SWITCHES FOR LOOP
*
         L     RF,ISPLADDR                GET ISPLINK ADDRESS
         LA    R2,SYSTAB                  GET TABLE NAME
         CALL  (15),(,(R2),,,,,,),VL,MF=(E,LCALL30)    GET CRP IN CRPS
         L     R4,CRPS                    LOAD CRP INTO R4
         SPACE
         LA    R1,4095
         LA    R0,1(R1)                 SET SIZE=4K FOR GETMAIN
         GETMAIN R,LV=(0)               GET CORE FOR CATALOG SEARCH
         ST    R1,LCALLIX+12            WORK AREA ADDR IN 4 WORD
         LA    R1,DSINDEX               R1=DSINDEX ADDRESS
         ST    R1,LCALLIX               STORE R1 TO 1 WORD OF PARMLIST
         LA    R1,DSNAME                R1=DSNAME ADDRESS
         ST    R1,LCALLIX+4             SRORE R1 TO 2 WORD OF PARMLIST
         LA    R1,VOL                   R1=VOLSER ADDRESS
         ST    R1,LCALLIX+8             STORE R1 TO 3 WORD OF PARMLIST
         SPACE
         MVI   MBR,BLANK
         MVC   MBR+1(L'MBR-1),MBR                 ERASE MEMBER NAME
         MVI   FSTR,BLANK
         MVI   ACTION,BLANK                       ERASE ACTION
         MVI   LASTACT,BLANK
         MVC   LASTACT+1(L'LASTACT-1),LASTACT     ERASE LAST ACTION
         MVC   LASTACT(L'LACTADD),LACTADD         SET UP LAST ACTION
         MVI   CATEND,NO                          SET SWITCH FOR LOOP
         MVI   CATERR,NO                          SET SWITCH FOR LOOP
         SPACE
*---------------------------------------------------------------------*
*        SEARCH CATALOG, GET ALL DSNAMES AND VOLUMES AND              *
*        ADD THEM TO THE TABLE.                                       *
*---------------------------------------------------------------------*
         DO BELOW                         DO CATALOG SEARCH AND ADD
            SR    R0,R0                      ASSUME WE NEED VOLSER
            IF GFLAG,EQ,BLANK,CLI            IF WE NEED DSNAMES ONLY
               LA    R0,4                       SET REG0
            ENDIF                            ENDIF
            L     RF,IDMLADDR                GET IDMLOCIX ADDR
            CALL  (15),(,,,),VL,MF=(E,LCALLIX)    GET CATL ENTRY
            IFOR RF,EQ,0,LTR                 IF DISK DATASET FOUND
            IFOR RF,EQ,=H'8',CH              OR TAPE DATASET FOUND
            IF RF,EQ,=H'12',CH               OR MULTIVOL DATASET
               L     RF,ISPLADDR                GET ISPLINK ADDRESS
               LA    R2,SYSTAB                  GET SYSTAB ADDR
               CALL  (15),(,(R2)),VL,MF=(E,LCALL06)   ADD ROW TO TABLE
               IF RF,NE,0,LTR                   IF ERROR DURING ADD
                  L     RF,ISPLADDR              GET ISPLINK ADDRESS
                  LA    R2,SYSTAB                GET SYSTAB ADDR
                  ST    R4,TBNUMBER              SET RESTORE CRP
                  LA    R3,TBNUMBER              GET SKIP NUMBER ADDR
                  CALL  (15),(,(R2),(R3)),VL,MF=(E,LCALL24) RESTORE CRP
                  MVI   MBR,BLANK
                  MVC   MBR+1(L'MBR-1),MBR         ERASE MEMBER NAME
                  MVI   FSTR,BLANK
                  MVI   ACTION,BLANK               ERASE ACTION
                  MVI   LASTACT,BLANK
                  MVC   LASTACT+1(L'LASTACT-1),LASTACT ERASE LAST ACT
                  MVC   LASTACT(L'LACTADD),LACTADD     SET UP LAST ACT
                  MVI   VOL,BLANK
                  MVC   VOL+1(L'VOL-1),VOL         ERASE VOLUME NAME
               ELSE                             ELSE
                  LA    R4,1(R4)                   LOAD CRP TO R4
               ENDIF                            ENDIF
            ELSE                             ELSE
               IF RF,EQ,=H'16',CH               IF END OF SEARCH
                  MVI   CATEND,YES                 SET END SWITCH
               ELSE                             ELSE (ERROR)
                  MVI   CATERR,YES                 SET ERROR SWITCH
               ENDIF                            ENDIF
            ENDIF                            ENDIF
         UNTILOR CATERR,EQ,YES,CLI        UNTIL ERROR IN CATLG SEARCH
         UNTIL CATEND,EQ,YES,CLI          OR UNTIL NO MORE ENTRIES
         SPACE
         LA    R1,4095
         LA    R0,1(R1)                     GET WORK AREA SIZE
         L     R1,LCALLIX+12                GET WORK AREA ADDRESS
         FREEMAIN R,LV=(0),A=(1)            FREE SEARCH WORK AREA
         SPACE
         MVI   MSGPARM,BLANK
         MVC   MSGPARM+1(L'MSGPARM-1),MSGPARM     ERASE MSG PARM
         MVC   MSGPARM(L'DSINDEX),DSINDEX         MOVE DSINDEX TO MSG
         IF CATERR,EQ,YES,CLI               IF ERROR TERMINATION
            MVI   ERASE,NO                     DO NOT ERASE INPUT
            MVC   MSGID,MSGID18                SET ERROR MSG
         ELSE                               ELSE
            MVI   ERASE,YES                    ERASE PTIMARY INPUT
            MVC   MSGID,MSGID19                SET MSG OK
         ENDIF                              ENDIF
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * LOCATE DATASET IN TABLE                *
*                            ******************************************
         SPACE 2
         ENTRE# PCLOCATE
*---------------------------------------------------------------------*
*        SET ROW POINTER FOR LOCATE OF A ROW                          *
*---------------------------------------------------------------------*
         IF ACTION,NE,AFTER,CLI               IF NOT AFTER CURR. ROW
            L     RF,ISPLADDR                    GET ISPLINK ADDRESS
            LA    R2,SYSTAB                      GET SYSTAB ADDR
            CALL  (15),(,(R2)),VL,MF=(E,LCALL23) GOTO TOP OF TABLE
         ENDIF                                ENDIF
*---------------------------------------------------------------------*
*        EXTRACT GENERIC DSNAME FROM PRIMARY INPUT - ITS OPERAND      *
*---------------------------------------------------------------------*
         LA     R4,OPT+L'OPT       R4=ADDR OF END OF INPUT RECORD
         SR     R4,R6              R4=LENGTH OF INPUT AFTER CMD NAME
         IF R4,EQ,0,LTR            IF OPERAND NOT ENTERED
            MVC   MSGID,MSGID4        SET ERROR MSG
            IEXIT# RC=4               RETURN
         ENDIF                     ENDIF
         BCTR   R4,R0              -1 FOR EX
         TRT    0(0,R6),TABLER     SEARCH FOR NONBLANK-FIRST OPERAND
         EX     R4,*-6
         IF ZERO                   IF OPERAND NOT ENTERED
            MVC   MSGID,MSGID4        SET ERROR MSG
            IEXIT# RC=4               RETURN
         ENDIF                     ENDIF
         LR    R6,R1               R6=ADDRESS OF FIRST OPERAND
         SPACE
         LA     R4,OPT+L'OPT       R4=ADDR OF END OF INPUT RECORD
         SR     R4,R6              R4=LENGTH OF THE REST OF INPUT
         LA     R3,L'DSNAME+1      R3=MAX LENGTH OF FIRST OPER + BLANK
         IF R4,GT,R3,CR
            LR    R4,R3            R4=MIN VALUE OF R4 AND R3
         ENDIF
         IF R4,EQ,0,LTR            LENGTH MUST NOT BE ZERO
            MVC   MSGID,MSGID4
            IEXIT# RC=4
         ENDIF
         BCTR   R4,R0              -1 FOR EX
         TRT   0(0,R6),TABLE
         EX     R4,*-6             SEARCH FOR FIRST BLANK AFTER OPER
         IF ZERO                   IF END OF OPERAND NOT FOUND
            MVC   MSGID,MSGID4        SET ERROR MSG
            IEXIT# RC=4               RETURN
         ENDIF                     ENDIF
         LR    R5,R1               R5=END OF FIRST PARM
         SR    R5,R6               R5=LENGTH OF DSNAME - FIRST PARM
         BCTR  R5,R0               -1 FOR EX
         MVI   DSNAME,BLANK        BLANK OUT DSNAME
         MVC   DSNAME+1(L'DSNAME-1),DSNAME
         MVC   DSNAME(0),0(R6)
         EX    R5,*-6              MOVE 1 PARM TO DSNAME
*---------------------------------------------------------------------*
*        EFFECTIVE AT SPF LEVEL 8203.                                 *
*        ACCORDING TO IBM'S CHANGE IN ISPF LOGIC - ONLY ONE (LAST)    *
*        APPENDED ASTERISK INDICATES GENERIC SEARCH.                  *
*        A REST OF ASTERISKS ARE PART OF GENERIC KEY.                 *
*        ALSO, IF USER IS AT 8203 LEVEL OR HIGHER PTF UZ58278 MUST BE *
*        APPLIED TO FIX TBSARG/TBSCAN FUNCTIONS.                      *
*---------------------------------------------------------------------*
         LA    R5,1(R5)            R5 = PARM LENGTH
         LA    R4,L'DSNAME         R4 = DSNAME LENGTH
         IF R5,LT,R4,CR            IF PARM SHORTER THAN DSNAME
            LA    R3,DSNAME           R3 = DSNAME ADDRESS
            LA    R3,0(R5,R3)         R3 POINTS TO FIRST BLANK IN DSNAM
            MVI   0(R3),STAR          APPEND DSNAME BY ASTERISK
         ENDIF
*---------------------------------------------------------------------*
*        NOW INITIALIZE REST OF FIELDS AND LOCATE A ROW               *
*---------------------------------------------------------------------*
         L     RF,ISPLADDR                        GET ISPLINK ADDRESS
         LA    R2,SYSTAB                          GET SYSTAB ADDR
         CALL  (15),(,(R2),),VL,MF=(E,LCALL25)    LOCATE A DATASET
         MVI   MSGPARM,BLANK
         MVC   MSGPARM+1(L'MSGPARM-1),MSGPARM     ERASE MSG PARM
         MVC   MSGPARM(L'DSNAME),DSNAME           MOVE DSN TO MSG
         IF RF,EQ,0,LTR                           IF RC=0
            MVC   MSGID,MSGID15                      SET MSG OK
            MVI   ERASE,YES
            MVI   SCROLL,YES                          SET NEW SCREEN
         ELSE                                     ELSE
            IF RF,EQ,=H'8',CH                        IF RC=8
               MVC   MSGID,MSGID16                      ROW NOT FOUND
            ELSE                                     ELSE
               MVC   MSGID,ZERRMSG                      SET SPF MSG
            ENDIF                                    ENDIF
         ENDIF                                    ENDIF
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * REMOVE DATASETS FROM TABLE - GLOBAL    *
*                            ******************************************
         SPACE 2
         ENTRE# PCREMOVE
*---------------------------------------------------------------------*
*        SET ROW POINTER FOR REMOVING OF ROWS                         *
*---------------------------------------------------------------------*
         IF ACTION,EQ,BEFORE,CLI              IF REM BEFORE CURRENT ROW
            L     RF,ISPLADDR                    GET ISPLINK ADDRESS
            LA    R2,SYSTAB                      GET SYSTAB ADDR
            MVC   TBNUMBER,MINUS1                SET SKIP -1 ROW
            LA    R3,TBNUMBER                    GET SKIP NUMBER ADDR
            CALL  (15),(,(R2),(R3)),VL,MF=(E,LCALL24) SKIP -1 ROW
            IF RF,NE,0,LTR                       IF NO PLACE TO GO
               MVI   ERASE,NO                       SET NOERASE SWITCH
               MVC   MSGID,MSGID12                  MSG-NOT REMOVED
               IEXIT# RC=4                          RETURN
            ENDIF                                ENDIF
         ELSE                                 ELSE
            IF ACTION,EQ,AFTER,CLI               IF REM AFTER CURR. ROW
               L     RF,ISPLADDR                    GET ISPLINK ADDRESS
               LA    R2,SYSTAB                      GET SYSTAB ADDR
               MVC   TBNUMBER,PLUS1                 SET SKIP +1 ROW
               LA    R3,TBNUMBER                    GET SKIP NUMBER ADD
               CALL  (15),(,(R2),(R3)),VL,MF=(E,LCALL24) SKIP +1 ROW
               IF RF,NE,0,LTR                IF NO PLACE TO GO
                  MVI   ERASE,NO                SET NOERASE SWITCH
                  MVC   MSGID,MSGID12           MSG-NOT REMOVED
                  IEXIT# RC=4                   RETURN
               ENDIF                         ENDIF
            ELSE                                 ELSE
               MVI   ERASE,NO                       SET NOERASE SWITCH
               MVC   MSGID,MSGID10                  MSG-REMOVE PENDING
               IEXIT# RC=4                          RETURN
            ENDIF                                ENDIF
         ENDIF                                ENDIF
         SPACE
*---------------------------------------------------------------------*
*        EXTRACT NUMBER OF LINES FROM INPUT FIELD - ITS FIRST OPERAND *
*---------------------------------------------------------------------*
         LA     R4,OPT+L'OPT       R4=ADDR OF END OF INPUT RECORD
         SR     R4,R6              R4=LENGTH OF INPUT AFTER CMD NAME
         BCTR   R4,R0              -1 FOR EX
         TRT    0(0,R6),TABLER     SEARCH FOR NONBLANK-FIRST OPERAND
         EX     R4,*-6
         IF NOTZERO                IF OPERAND ENTERED
            LR    R6,R1               R6=ADDRESS OF FIRST OPERAND
            SPACE
            LA     R4,OPT+L'OPT       R4=ADDR OF END OF INPUT RECORD
            SR     R4,R6              R4=LENGTH OF THE REST OF INPUT
            LA     R3,L'INNUMB+1      R3=MAX LENGTH OF FIRST OPER+BLANK
            IF R4,GT,R3,CR
               LR    R4,R3            R4=MIN VALUE OF R4 AND R3
            ENDIF
            BCTR   R4,R0              -1 FOR EX
            TRT   0(0,R6),TABLE
            EX     R4,*-6             SEARCH FOR FIRST BLANK AFTER OPER
            IF ZERO                   IF OPERAND TOO LONG
               MVC   MSGID,MSGID14       SET ERR MSG
               IEXIT# RC=4               RETURN
            ENDIF                     ENDIF
            LR    R5,R1               R5=END OF FIRST PARM
            SR    R5,R6               R5=LENGTH OF FIRST PARM-NUMBER
            LA    R3,INNUMB+L'INNUMB  R3=END OF INNUMB FIELD
            SR    R3,R5               R3=START OF DATA IN INNUMB
            BCTR  R5,R0               -1 FOR EX
            MVI   INNUMB,ZEROC        ZERO OUT INNUMB BEFORE USE
            MVC   INNUMB+1(L'INNUMB-1),INNUMB
            MVC   0(0,R3),0(R6)       MOVE NUMBER TO TARGET FIELD
            EX    R5,*-6              MOVE 1 PARM TO TARGET INNUMB
            TRT   INNUMB,TABLEN       SEARCH FOR NONUMBER
            IF    NOTZERO             IF FOUND NONUMBER
               MVI   ERASE,NO            SET NOERASE SWITCH
               MVC   MSGID,MSGID11       MSG-INVALID OPER
               IEXIT# RC=4               RETURN
            ENDIF
            PACK  DWORD,INNUMB
            CVB   R3,DWORD
            SPACE
         ELSE
            L     R3,MAXNUMB
         ENDIF                     ENDIF
         SPACE
         DO BELOW                          DO BELOW (R3-ROW COUNTER)
            L     RF,ISPLADDR                   GET ISPLINK ADDRESS
            LA    R2,SYSTAB                     GET TABLE NAME
            CALL  (15),(,(R2)),VL,MF=(E,LCALL05) DELETE ONE RECORD
            IF TBNUMBER,EQ,MINUS1,CLC           IF WE GO UP
               MVC   TBNUMBER,MINUS0               SET NEW VALUE
            ENDIF                               ENDIF
            L     RF,ISPLADDR                   GET ISPLINK ADDR
            LA    R2,SYSTAB                     GET SYSTAB ADDR
            LA    R4,TBNUMBER                   GET SKIP NUMBER ADD
            CALL  (15),(,(R2),(R4)),VL,MF=(E,LCALL24) GET NEXT ROW
         UNTILOR RF,NE,0,LTR               UNTIL NO PLACE TO GO
         UNTIL R3,EQ,0,BCT                 UNTIL ROW COUNTER = 0
         SPACE
         MVI   ERASE,YES
         MVC   MSGID,MSGID13
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * CANCEL ALL CHANGES FROM TABLE          *
*                            ******************************************
         SPACE 2
         ENTRE# PCCANCEL
         L     RF,ISPLADDR                    GET ISPLINK ADDRESS
         LA    R2,SYSTAB                      GET SYSTAB ADDR
         CALL  (15),(,(R2)),VL,MF=(E,LCALL27) CANCEL TABLE IN CORE
         MVI   SCROLL,YES                     DO NOT WORK WITH SCREEN
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * EXIT TO TSO INTERFACE MODE             *
*                            ******************************************
         SPACE 2
         ENTRE# PCTSO
         LA    R5,L'TEXITBUF                GET LENGTH OF BUFFER
         ST    R5,BUFFLEN                   STORE LENGTH INTO WORD
         L     RF,ISPLADDR                        GET ISPLINK ADDRESS
         LA    R2,BUFFLEN                         GET BUFFLEN ADDR
         LA    R5,TEXITBUF                        GET BUFFER  ADDR
         CALL  (15),(,(R2),(R5)),VL,MF=(E,LCALL16) EXIT TO TSO MODE
         MVI   ERASE,YES
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * EXIT TO PFK DISPLAY/UPDATE MODE        *
*                            ******************************************
         SPACE 2
         ENTRE# PCPFK
         LA    R5,L'PFKXBUF                 GET LENGTH OF BUFFER
         ST    R5,BUFFLEN                   STORE LENGTH INTO WORD
         L     RF,ISPLADDR                        GET ISPLINK ADDRESS
         LA    R2,BUFFLEN                         GET BUFFLEN ADDR
         LA    R5,PFKXBUF                         GET BUFFER  ADDR
         CALL  (15),(,(R2),(R5)),VL,MF=(E,LCALL16) EXIT TO PFK MODE
         MVI   ERASE,YES
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * SYNCHRONIZE SECOND TABLE WITH CURRENT  *
*                            ******************************************
         SPACE 2
         ENTRE# PCSYN
         SPACE
         MVC   DWORD,SYSTAB                  MOVE TABLE NAME
         LA    R3,L'DWORD-1                  LENGTH         *HMD 09/82*
         LA    R1,DWORD+L'DWORD-1            JUST IN CASE   *HMD 09/82*
         TRT   DWORD(0),TABLE                TRANSLATE TABLE NAME
         EX    R3,*-6                        EXECUTE IT     *HMD 09/82*
         IF  NOTZERO                                        *HMD 09/82*
            LR   R2,R1                       SAVE REGISTER  *HMD 09/82*
            BCTR R2,0                                       *HMD 09/82*
            IF 0(R2),EQ,C'0',CLI                            *HMD 09/82*
               MVI 0(R2),BLANK                              *HMD 09/82*
            ELSE                                            *HMD 09/82*
               MVI 0(R1),ZEROC                              *HMD 09/82*
            ENDIF                                           *HMD 09/82*
         ELSE                                               *HMD 09/82*
            IF 0(R1),EQ,C'0',CLI                            *HMD 09/82*
               MVI 0(R1),BLANK                              *HMD 09/82*
            ELSE                                            *HMD 09/82*
               MVI   MSGPARM,BLANK                          *HMD 09/82*
               MVC   MSGPARM+1(L'MSGPARM-1),MSGPARM         *HMD 09/82*
               LA    RF,20                                  *HMD 09/82*
               CVD   RF,DWORD                               *HMD 09/82*
               UNPK  MSGPARM(4),DWORD                       *HMD 09/82*
               OI    MSGPARM+3,EDSIGN                       *HMD 09/82*
               MVC   MSGID,MSGID2                           *HMD 09/82*
               MVI   ERASE,NO                               *HMD 09/82*
               IEXIT# RC=20                                 *HMD 09/82*
            ENDIF                                           *HMD 09/82*
         ENDIF
         L     RF,ISPLADDR                   GET ISPLINK ADDRESS
         LA    R2,SYSTAB                     GET TABLE NAME
         LA    R3,DWORD                                     *HMD 09/82*
         CALL  (15),(,(R2),,(R3)),VL,MF=(E,LCALL28)
         IF RF,NE,0,LTR                           IF RC NE 0
            MVC   MSGID,ZERRMSG                      SET ERR MSG
         ENDIF                                    ENDIF
         MVI  ERASE,YES                      CLEAR OPT FIELD
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * COPY CURRENT TABLE TO " @ " TABLE      *
*                            ******************************************
         SPACE 2                                            *IPC 11/83*
         ENTRE# PCCOPY                                      *IPC 11/83*
         SPACE 1                                            *IPC 11/83*
         MVI   DWORD,BLANK                                  *IPC 11/83*
         MVC   DWORD+1(L'DWORD-1),DWORD                     *IPC 11/83*
         MVC   DWORD(L'ZUSER),ZUSER          MOVE USERID    *IPC 11/83*
         TRT   DWORD(L'ZUSER),TABLE          GET 1ST BLANK  *IPC 11/83*
         IF    ZERO                                         *IPC 11/83*
            MVI   DWORD+L'ZUSER,C'@'         USE '@' TABLE  *IPC 11/83*
         ELSE                                               *IPC 11/83*
            MVI   0(R1),C'@'                                *IPC 11/83*
         ENDIF                                              *IPC 11/83*
         L     RF,ISPLADDR              GET ISPLINK ADDRESS *IPC 11/83*
         LA    R2,SYSTAB                GET TABLE NAME      *IPC 11/83*
         LA    R3,DWORD                                     *IPC 11/83*
         CALL  (15),(,(R2),,(R3)),VL,MF=(E,LCALL28)         *IPC 11/83*
         IF RF,NE,0,LTR                 IF RC NE 0          *IPC 11/83*
            MVC   MSGID,ZERRMSG         SET ERR MSG         *IPC 11/83*
         ENDIF                          ENDIF               *IPC 11/83*
         MVI  ERASE,YES                 CLEAR OPT FIELD     *IPC 11/83*
         EXIT# RC=0                                         *IPC 11/83*
         EJECT                                              *IPC 11/83*
*                            ******************************************
*                            * ADD USER TABLE TO MINE                 *
*                            ******************************************
         SPACE 2
         ENTRE# PCUSER
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * EXIT TO SPF PANEL FROM IDMF            *
*                            ******************************************
         SPACE 2
         ENTRE# PCSPFX
*---------------------------------------------------------------------*
*        EXTRACT SPF OPTION FROM INPUT FIELD - ITS FIRST OPERAND      *
*---------------------------------------------------------------------*
***      ASSUME 'X' HAS NO OPTIONS
***
         L     R3,SPFXOPTI         R3=ADDR OF OPTION FIELD IN BUFF
         MVI   0(R3),BLANK         MOVE BLANKS TO OPTION
         MVC   1(SPFXOPTL-1,R3),0(R3)
***
         LA     R4,OPT+L'OPT       R4=ADDR OF END OF INPUT RECORD
         SR     R4,R6              R4=LENGTH OF INPUT AFTER CMD NAME
         BCTR   R4,R0              -1 FOR EX
         TRT    0(0,R6),TABLER     SEARCH FOR NONBLANK-FIRST OPERAND
         EX     R4,*-6
         IF NOTZERO                IF OPERAND ENTERED
            LR    R6,R1               R6=ADDRESS OF FIRST OPERAND
            SPACE
            LA     R4,OPT+L'OPT       R4=ADDR OF END OF INPUT RECORD
            SR     R4,R6              R4=LENGTH OF THE REST OF INPUT
            LA     R3,SPFXOPTL        R3=MAX LENGTH OF FIRST OPER+BLANK
            IF R4,GT,R3,CR
               LR    R4,R3            R4=MIN VALUE OF R4 AND R3
            ENDIF
            BCTR   R4,R0              -1 FOR EX
            TRT   0(0,R6),TABLE
            EX     R4,*-6             SEARCH FOR FIRST BLANK AFTER OPER
            IF ZERO                   IF OPERAND TOO LONG
               MVC   MSGID,MSGID14       SET ERR MSG
               IEXIT# RC=4               RETURN
            ENDIF                     ENDIF
            LR    R5,R1               R5=END OF FIRST PARM
            SR    R5,R6               R5=LENGTH OF FIRST PARM-NUMBER
            BCTR  R5,R0               -1 FOR EX
            L     R3,SPFXOPTI         R3=ADDR OF OPTION FIELD IN BUFF
            MVC   0(0,R3),0(R6)       MOVE OPTION TO TARGET FIELD
            EX    R5,*-6              MOVE 1 PARM TO TARGET FIELD
         ENDIF                     ENDIF
         LA    R5,L'SPFXBUFF                GET LENGTH OF BUFFER
         ST    R5,BUFFLEN                   STORE LENGTH INTO WORD
         L     RF,ISPLADDR                        GET ISPLINK ADDRESS
         LA    R2,BUFFLEN                         GET BUFFLEN ADDR
         LA    R5,SPFXBUFF                        GET BUFFER  ADDR
         CALL  (15),(,(R2),(R5)),VL,MF=(E,LCALL16) EXIT TO SPF
         IF RF,GT,=H'4',CH
            MVI   MSGPARM,BLANK
            MVC   MSGPARM+1(L'MSGPARM-1),MSGPARM
            L     R5,SPFXOPTI
            MVC   MSGPARM(SPFXOPTL),0(R5)
            MVC   MSGID,MSGID24
         ENDIF
         MVI   ERASE,YES
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * ADD DSNAMES FROM VOLUME TO TABLE       *
*                            ******************************************
         SPACE 2
         ENTRE# PCVADD
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * SWITCH BETWEEN TITLES/DSNAMES MODES    *
*                            ******************************************
         SPACE 2
         ENTRE# PCSWITCH
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * REMOVE ROW - LINE COMMAND              *
*                            ******************************************
         SPACE 2
         ENTRE# LCREMOVE
         L     RF,ISPLADDR                   GET ISPLINK ADDRESS
         LA    R2,SYSTAB                     GET TABLE NAME
         CALL  (15),(,(R2)),VL,MF=(E,LCALL05) REMOVE ROW
         MVI   MSGPARM,BLANK
         MVC   MSGPARM+1(L'MSGPARM-1),MSGPARM     ERASE MSG PARM
         MVC   MSGPARM(L'DSNAME),DSNAME           MOVE DSN TO MSG
         IF RF,EQ,0,LTR                           IF RC=0
            MVC   MSGID,MSGID21                      SET MSG OK
         ELSE                                     ELSE
            MVC   MSGID,ZERRMSG                      SET ERR MSG
         ENDIF                                    ENDIF
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * EDIT DATASET - LINE COMMAND            *
*                            ******************************************
         SPACE 2
         ENTRE# LCEDIT
*---------------------------------------------------------------------*
*        IF ROW REPRESENTS A DIRECTORY, ACTIVATE IT                   *
*---------------------------------------------------------------------*
         IF DSNAME,GE,X'F1',CLI,*AND*,DSNAME,LE,X'F9',CLI
***         BUILD DIRECTORY NAME
            MVI   DWORD,BLANK
            MVC   DWORD+1(L'DWORD-1),DWORD
            MVC   DWORD(L'ZUSER),ZUSER
            TRT   DWORD(L'ZUSER),TABLE    GET FIRST BLANK
            IF ZERO
               MVC   DWORD+L'ZUSER(1),DSNAME
            ELSE
               MVC   0(1,R1),DSNAME
            ENDIF
***         BUILD MESSAGE
            MVI   MSGPARM,BLANK                 ERASE MSG PARM
            MVC   MSGPARM+1(L'MSGPARM-1),MSGPARM
            MVC   MSGPARM(L'DWORD),DWORD        MOVE DIREC. NAME TO MSG
            SPACE
***         BUILD BUFFER FOR PARAMETER TO INVOKE IDMMAIN
            MVI   IDMBUFF,BLANK
            MVC   IDMBUFF+1(L'IDMBUFF-1),IDMBUFF
            LA    R3,IDMBUFF
            MVC   0(L'IDMPREF,R3),IDMPREF                          ,
            LA    R3,L'IDMPREF(R3)
            MVC   0(L'PARMIDM1,R3),PARMIDM1
            LA    R3,L'PARMIDM1(R3)
            MVC   0(L'DWORD,R3),DWORD
            LA    R3,L'DWORD(R3)
            MVC   0(L'SPFMENU,R3),SPFMENU
            LA    R3,L'SPFMENU(R3)
            MVI   0(R3),RPARENT
            L     RF,ISPLADDR                     GET ISPLINK ADDRESS
            LA    R2,IDMBUFL                      GET BUFF. LEN. ADDR
            LA    R5,IDMBUFF                      GET BUFFER  ADDR
            CALL  (15),(,(R2),(R5)),VL,MF=(E,LCALL16)  INVOKE IDMMAIN
            MVI   ERASE,YES
            SPACE
            IF RF,EQ,=H'99',CH                       IF RC=99
               MVC   MSGID,MSGID51                      SET MSG-IN USE
            ELSE                                     ELSE
               MVC   MSGID,MSGID50                      SET MSG OK
            ENDIF
*---------------------------------------------------------------------*
*           PROBLEM: RETURN KEY DOES NOT FUNCTION PROPERLY FROM       *
*           SECOND LEVEL TABLE DISPLAY.                               *
*           FOLLOWING FEW LINES ARE THE CIRCUMVENTION OF THE PROBLEM. *
*---------------------------------------------------------------------*
            L     RF,ISPLADDR                     GET ISPLINK ADDRESS
            LA    R2,DUMBUFL                      GET BUFF. LEN. ADDR
            LA    R5,DUMBUFF                      GET BUFFER  ADDR
            CALL  (15),(,(R2),(R5)),VL,MF=(E,LCALL16)  INVOKE DUMMY
            IEXIT# RC=0
         ENDIF                         ENDIF
*---------------------------------------------------------------------*
*        BUILD FULLY QUALIFIED DSNAME, USING DSNAME FROM TABLE        *
*---------------------------------------------------------------------*
         MVI   MSGPARM,BLANK           CLEAR WORK FIELD FOR DSNAME
         MVC   MSGPARM+1(L'MSGPARM-1),MSGPARM
         MVI   MSGPARM,QUOTE           FIRST BYTE IS QUOTE - FULL NAME
         L     R3,DSNAMEL              R3=LENGTH OF INPUT FROM TABLE
         BCTR  R3,R0                   -1 FOR EX
         MVC   MSGPARM+1(0),DSNAME
         EX    R3,*-6                  GET DSNAME FROM TABLE
         TRT   MSGPARM,TABLE           SEARCH FOR BLANK AFTER DSNAME
         LR    R6,R1                   R6=BLANK ADDRESS
         SPACE
         IF MBR,NE,BLANK256,CLC        IF MEMBER SPECIFIED
            MVI   0(R6),LPARENT           SET UP LEFT PARENT
            MVC   1(L'MBR,R6),MBR         GET MEMBER NAME FROM TABLE
            TRT   1(L'MBR+1,R6),TABLE     FIND FIRST BLANK AFTER DSN
            LR    R6,R1                   R6=BLANK ADDRESS
            MVI   0(R6),RPARENT           SET UP RIGHT PAREN
            LA    R6,1(R6)                R6=FIRST BLANK ADDRESS
         ENDIF                         ENDIF
         SPACE
         MVI   0(R6),QUOTE             CLOSE DSNAME BY QUOTE
         SPACE
*---------------------------------------------------------------------*
*        NOW WE EDIT DATASET                                          *
*---------------------------------------------------------------------*
         MVI   LASTACT,BLANK                      CLEAR LAST ACTION
         MVC   LASTACT+1(L'LASTACT-1),LASTACT
         MVI   USERSW,NO                ASSUME FILE HAS NO STRUCTURE,
         IF FSTR,NE,BLANK,CLI           IF FILE MAY HAVE A STRUCTURE
            L     R2,=V(IDMXS)             GET ADDR OF EDIT EXIT TABL
            DOWHILE FSTR,NE,0(R2),CLC,*AND*,0(R2),NE,X'FF',CLI
               LA    R2,(IDMXLEN)(R2)      SEARCH THRU TABLE
            ENDDO
            IF 0(R2),NE,X'FF',CLI          IF FILE STRUCTURE FOUND
*--         -- MAKE VARS AND PUT IN PROFILE AND SHARED FOR USER --
               MVI   USERSW,YES               SET SWITCH - TAKE EXIT
               MVI   PNSL,BLANK
               MVC   PNSL+1(L'PNSL-1),PNSL
               MVI   PVOL,BLANK
               MVC   PVOL+1(L'PVOL-1),PVOL
               MVC   PNSL,MSGPARM
               MVC   PVOL,VOL
               L     RF,ISPLADDR
               CALL  (15),(VPUT,TUSERN,SHARED),VL  PUT ROW INTO SHARED
               L     RF,ISPLADDR
               CALL  (15),(VPUT,TPANN,PROFILE),VL  PUT ROW INTO PROFLE
               LA    R5,(IDMXLEN-2)               GET BUFF LENGTH
               ST    R5,BUFFLEN                   STORE IT INTO WORD
               LA    R5,2(R2)                     GET BUFFER  ADDR
               L     RF,ISPLADDR                  GET ISPLINK ADDRESS
               LA    R2,BUFFLEN                   GET BUFF. LEN. ADDR
               CALL  (15),(,(R2),(R5)),VL,MF=(E,LCALL16) INVOKE USER
               MVC   MSGID,MSGID55                   SET MSG OK
               MVC   LASTACT(L'LACTSXIT),LACTSXIT    SET LAST ACTION
            ENDIF
         ENDIF
         IF USERSW,EQ,NO,CLI
            L     RF,ISPLADDR                     GET ISPLINK ADDRESS
            LA    R2,MSGPARM                      GET DSNAME ADDR
            LA    R3,VOL                          GET VOLUME ADDR
            CALL  (15),(,(R2),(R3)),VL,MF=(E,LCALL19) EDIT DATASET
            IF RF,EQ,0,LTR                        IF RC=0
               MVC   MSGID,MSGID5                    SET MSG OK
               MVC   LASTACT(L'LACTEDS),LACTEDS      SET LAST ACTION
            ELSE                                  ELSE
               IF RF,EQ,=H'4',CH
                  MVC   MSGID,MSGID6                    SET MSG OK
                  MVC   LASTACT(L'LACTED),LACTED        SET LAST ACT
               ELSE
                  MVC   MSGID,ZERRMSG                   SET ERR MSG
                  MVC   LASTACT(L'LACTEDF),LACTEDF      SET LAST ACT
               ENDIF
            ENDIF
         ENDIF
         SPACE
*        NOW WE UPDATE ROW IN TABLE TO REFLECT LAST ACTION
*
         MVI   ACTION,BLANK                       CLEAR LINE COMMAND
         L     RF,ISPLADDR                        GET ISPLINK ADDRESS
         LA    R2,SYSTAB                          GET SYSTAB ADDR
         CALL  (15),(,(R2)),VL,MF=(E,LCALL31)     UPDATE ROW IN TABLE
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * BROWSE DATASET - LINE COMMAND          *
*                            ******************************************
         SPACE 2
         ENTRE# LCBROWSE
*---------------------------------------------------------------------*
*        BUILD FULLY QUALIFIED DSNAME, USING DSNAME FROM TABLE        *
*---------------------------------------------------------------------*
         MVI   MSGPARM,BLANK           CLEAR WORK FIELD FOR DSNAME
         MVC   MSGPARM+1(L'MSGPARM-1),MSGPARM
         MVI   MSGPARM,QUOTE           FIRST BYTE IS QUOTE - FULL NAME
         L     R3,DSNAMEL              R3=LENGTH OF INPUT FROM TABLE
         BCTR  R3,R0                   -1 FOR EX
         MVC   MSGPARM+1(0),DSNAME
         EX    R3,*-6                  GET DSNAME FROM TABLE
         TRT   MSGPARM,TABLE           SEARCH FOR BLANK AFTER DSNAME
         LR    R6,R1                   R6=BLANK ADDRESS
         SPACE
         IF MBR,NE,BLANK256,CLC        IF MEMBER SPECIFIED
            MVI   0(R6),LPARENT           SET UP LEFT PARENT
            MVC   1(L'MBR,R6),MBR         GET MEMBER NAME FROM TABLE
            TRT   1(L'MBR+1,R6),TABLE     FIND FIRST BLANK AFTER DSN
            LR    R6,R1                   R6=BLANK ADDRESS
            MVI   0(R6),RPARENT           SET UP RIGHT PARENT
            LA    R6,1(R6)                R6=FIRST BLANK ADDRESS
         ENDIF                         ENDIF
         SPACE
         MVI   0(R6),QUOTE             CLOSE DSNAME BY QUOTE
         SPACE
*---------------------------------------------------------------------*
*        NOW WE BROWSE DATASET                                        *
*---------------------------------------------------------------------*
         MVI   LASTACT,BLANK                      CLEAR LAST ACTION
         MVC   LASTACT+1(L'LASTACT-1),LASTACT
         MVI   USERSW,NO                ASSUME FILE HAS NO STRUCTURE,
         IF FSTR,NE,BLANK,CLI           IF FILE MAY HAVE A STRUCTURE
            L     R2,=V(IDMXB)             GET ADDR OF BROWS EXIT TABL
            DOWHILE FSTR,NE,0(R2),CLC,*AND*,0(R2),NE,X'FF',CLI
               LA    R2,(IDMXLEN)(R2)      SEARCH THRU TABLE
            ENDDO
            IF 0(R2),NE,X'FF',CLI          IF FILE STRUCTURE FOUND
*--         -- MAKE VARS AND PUT IN PROFILE AND SHARED FOR USER --
               MVI   USERSW,YES               SET SWITCH - TAKE EXIT
               MVI   PNSL,BLANK
               MVC   PNSL+1(L'PNSL-1),PNSL
               MVI   PVOL,BLANK
               MVC   PVOL+1(L'PVOL-1),PVOL
               MVC   PNSL,MSGPARM
               MVC   PVOL,VOL
               L     RF,ISPLADDR
               CALL  (15),(VPUT,TUSERN,SHARED),VL  PUT ROW INTO SHARED
               L     RF,ISPLADDR
               CALL  (15),(VPUT,TPANN,PROFILE),VL  PUT ROW INTO PROFLE
               LA    R5,(IDMXLEN-2)               GET BUFF LENGTH
               ST    R5,BUFFLEN                   STORE IT INTO WORD
               LA    R5,2(R2)                     GET BUFFER  ADDR
               L     RF,ISPLADDR                  GET ISPLINK ADDRESS
               LA    R2,BUFFLEN                   GET BUFF. LEN. ADDR
               CALL  (15),(,(R2),(R5)),VL,MF=(E,LCALL16) INVOKE USER
               MVC   MSGID,MSGID57                   SET MSG OK
               MVC   LASTACT(L'LACTBXIT),LACTBXIT    SET LAST ACTION
            ENDIF
         ENDIF
         IF USERSW,EQ,NO,CLI
            L     RF,ISPLADDR                     GET ISPLINK ADDRESS
            LA    R2,MSGPARM                      GET DSNAME ADDR
            LA    R3,VOL                          GET VOLUME ADDR
            CALL  (15),(,(R2),(R3)),VL,MF=(E,LCALL22) BROWSE DATASET
            IF RF,EQ,0,LTR                        IF RC=0
               MVC   MSGID,MSGID7                    SET MSG OK
               MVC   LASTACT(L'LACTBRO),LACTBRO      SET LAST ACTION
            ELSE                                  ELSE
               MVC   MSGID,ZERRMSG                   SET ERR MSG
               MVC   LASTACT(L'LACTBROF),LACTBROF    SET LAST ACT
            ENDIF
         ENDIF
         SPACE
*        NOW WE UPDATE ROW IN TABLE TO REFLECT LAST ACTION
*
         MVI   ACTION,BLANK                       CLEAR LINE COMMAND
         L     RF,ISPLADDR                        GET ISPLINK ADDRESS
         LA    R2,SYSTAB                          GET SYSTAB ADDR
         CALL  (15),(,(R2)),VL,MF=(E,LCALL31)     UPDATE ROW IN TABLE
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * PRINT DATASET/MEMBER - LINE COMMAND    *
*                            ******************************************
         SPACE 2
         ENTRE# LCPRINT
         LA    R1,IDMWORK         R1=ADDRESS OF IDMMAIN WORKAREA
         LA    R2,IDMCVT          R1=ADDRESS OF IDMMAIN CVT
         L     RF,IDMPADDR        RF=ENTRY POINT ADDRESS OF PRINT UTIL
         BALR  RE,RF
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * DELETE/UNCAT DATASET/MBR - LINE COMMAND*
*                            ******************************************
         SPACE 2
         ENTRE# LCDELET
         LA    R1,IDMWORK         R1=ADDRESS OF IDMMAIN WORKAREA
         LA    R2,IDMCVT          R1=ADDRESS OF IDMMAIN CVT
         L     RF,IDMDELAD        RF=ENTRY POINT ADDRESS OF DELET UTIL
         BALR  RE,RF
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * DISPLAY DATASET INFO - LINE COMMAND    *
*                            ******************************************
         SPACE 2
         ENTRE# LCDSAT
         LA    R1,IDMWORK         R1=ADDRESS OF IDMMAIN WORKAREA
         LA    R2,IDMCVT          R1=ADDRESS OF IDMMAIN CVT
         L     RF,IDMDADDR        RF=ENTRY POINT ADDRESS OF DSAT UTIL
         BALR  RE,RF
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * ERASE MEMBER NAME IN A ROW-LINE COMMAND*
*                            ******************************************
         SPACE 2
         ENTRE# LCNOMBR
         MVI   MSGPARM,BLANK                 ERASE MSG PARM           *
         MVC   MSGPARM+1(L'MSGPARM-1),MSGPARM                         *
         MVC   MSGPARM(L'DSNAME),DSNAME      MOVE DSNAME TO MESSAGE   *
         SPACE
         IF MBR,EQ,BLANK256,CLC              IF A ROW HAS NO MEMBER
            MVC   MSGID,MSGID26                 SET MSG-NO MBR
            IEXIT# RC=0                         RETURN
         ENDIF                               ENDIF
         MVC   MSGID,MSGID27                 SET MSG OK
         MVC   LASTACT(L'LACTNOM),LACTNOM    SET LAST ACTION
         MVI   MBR,BLANK                     ERASE MEMBER NAME
         MVC   MBR+1(L'MBR-1),MBR                                     *
*        NOW WE UPDATE ROW IN TABLE TO REFLECT LAST ACTION
*
         MVI   ACTION,BLANK                  CLEAR LINE COMMAND
         L     RF,ISPLADDR                   GET ISPLINK ADDRESS
         LA    R2,SYSTAB                     GET SYSTAB ADDR
         CALL  (15),(,(R2)),VL,MF=(E,LCALL31)    UPDATE ROW IN TABLE
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * ERASE VOLUME NAME IN A ROW-LINE COMMAND*
*                            ******************************************
         SPACE 2
         ENTRE# LCNOVOL
         MVI   MSGPARM,BLANK                 ERASE MSG PARM           *
         MVC   MSGPARM+1(L'MSGPARM-1),MSGPARM                         *
         MVC   MSGPARM(L'DSNAME),DSNAME      MOVE DSNAME TO MESSAGE   *
         SPACE
         IF VOL,EQ,BLANK256,CLC              IF A ROW HAS NO VOLSER
            MVC   MSGID,MSGID28                 SET MSG-NO VOL
            IEXIT# RC=0                         RETURN
         ENDIF                               ENDIF
         MVC   DWORD(L'VOL),VOL              SAVE VOLSER
         MVI   VOL,BLANK
         MVC   VOL+1(L'VOL-1),VOL                 ERASE VOLUME NAME
         MVI   ACTION,BLANK                       ERASE ACTION
         MVI   LASTACT,BLANK
         MVC   LASTACT+1(L'LASTACT-1),LASTACT     ERASE LAST ACTION
         MVC   LASTACT(L'LACTNOV),LACTNOV         SET UP LAST ACTION
         L     RF,ISPLADDR                        GET ISPLINK ADDRESS
         LA    R2,SYSTAB                          GET SYSTAB ADDR
         CALL  (15),(,(R2)),VL,MF=(E,LCALL06)     ADD DATASET TO TABLE
         IF RF,NE,0,LTR                           IF ERROR OCCURED
            IF RF,EQ,=H'8',CH                        IF DUPLICATE ROW
               MVC   MSGID,MSGID9                       SET ERR MSG
            ELSE                                     ELSE
               MVC   MSGID,ZERRMSG                      SET SPF MSG
            ENDIF                                    ENDIF
            IEXIT# RC=8                              RETURN
         ENDIF                                    ENDIF
         MVC   MSGID,MSGID29                 SET MSG - VOLSER REMOVED
         MVC   VOL,DWORD                     RESTORE VOL TO REMOVE ROW
         L     RF,ISPLADDR                   GET ISPLINK ADDRESS
         LA    R2,SYSTAB                     GET TABLE NAME
         CALL  (15),(,(R2)),VL,MF=(E,LCALL05) REMOVE OLD ROW
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * ADD VOLUME NAME TO A ROW-LINE COMMAND  *
*                            ******************************************
         SPACE 2
         ENTRE# LCLOCVOL
         MVI   MSGPARM,BLANK                 ERASE MSG PARM           *
         MVC   MSGPARM+1(L'MSGPARM-1),MSGPARM                         *
         MVC   MSGPARM(L'DSNAME),DSNAME      MOVE DSNAME TO MESSAGE   *
         SPACE
         IF VOL,NE,BLANK256,CLC              IF A ROW HAS VOLSER
            MVC   MSGID,MSGID31                 SET MSG-IT HAS VOL
            IEXIT# RC=0                         RETURN
         ENDIF                               ENDIF
***
*        LOCATE DSNAME IN CATALOG AND GET HIS VOLSER                 ,
***
         LA    R4,DSNAME                     R4=ADDRESS OF DSNAME
         ST    R4,LOCLIST+4                  POINT LOCATE TO DSNAME
         LA    R4,LOCAREA                    R4=ADDRESS OF WORKAREA
         ST    R4,LOCLIST+12                 POINT LOCATE TO WORKAREA
         LOCATE LOCLIST                      LOCATE DSNAME IN CATLG
         IF RF,NE,0,LTR                      IF COULD NOT LOCATE
            MVC   MSGID,MSGID33                 SET MSG-NOT IN CATLG
            IEXIT# RC=0                         RETURN
         ENDIF                               ENDIF
         LA    R4,LOCAREA+2+4                R4 POINTS TO VOLSER
         MVC   VOL,0(R4)                     GET VOLSER
         SPACE
         MVI   ACTION,BLANK                       ERASE ACTION
         MVI   LASTACT,BLANK
         MVC   LASTACT+1(L'LASTACT-1),LASTACT     ERASE LAST ACTION
         MVC   LASTACT(L'LACTVOL),LACTVOL         SET UP LAST ACTION
         L     RF,ISPLADDR                        GET ISPLINK ADDRESS
         LA    R2,SYSTAB                          GET SYSTAB ADDR
         CALL  (15),(,(R2)),VL,MF=(E,LCALL06)     ADD DATASET TO TABLE
         IF RF,NE,0,LTR                           IF ERROR OCCURED
            IF RF,EQ,=H'8',CH                        IF DUPLICATE ROW
               MVC   MSGID,MSGID9                       SET ERR MSG
            ELSE                                     ELSE
               MVC   MSGID,ZERRMSG                      SET SPF MSG
            ENDIF                                    ENDIF
            IEXIT# RC=8                              RETURN
         ENDIF                                    ENDIF
         MVC   MSGID,MSGID32                 SET MSG - VOLSER REMOVED
         MVI   VOL,BLANK                     RESTORE VOL TO BLANK
         MVC   VOL+1(L'VOL-1),VOL            RESTORE VOL TO BLANK
         L     RF,ISPLADDR                   GET ISPLINK ADDRESS
         LA    R2,SYSTAB                     GET TABLE NAME
         CALL  (15),(,(R2)),VL,MF=(E,LCALL05) REMOVE OLD ROW
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * MOVE A ROW - LINE COMMAND              *
*                            ******************************************
         SPACE 2
         ENTRE# LCMOVE
***
*        FIRST OF ALL I BUILD PRIMARY COMMAND 'ADD', USING DATA
*        RETRIEVED FROM ROW
***
*---------------------------------------------------------------------*
*        PROCESSING IS DIFFERENT FOR DIRECTORY AND DATASET            *
*---------------------------------------------------------------------*
         SPACE
         IF DSNAME,GE,X'F1',CLI,*AND*,DSNAME,LE,X'F9',CLI
            LA    R4,OPT                   R4=ADDR OF PRIMARY INPUT
            MVC   0(L'PRFDADD,R4),PRFDADD
            LA    R4,(L'PRFDADD)(R4)
            MVC   0(L'DSNAME,R4),DSNAME
         ELSE
            LA    R4,OPT                   R4=ADDR OF PRIMARY INPUT
            MVC   0(L'PRFXADD,R4),PRFXADD
            LA    R4,(L'PRFXADD)(R4)
            MVC   0(L'DSNAME,R4),DSNAME
            TRT   0(L'DSNAME,R4),TABLE
            IF NOTZERO
               LR    R4,R1
            ELSE
               LA    R4,(L'DSNAME)(R4)
            ENDIF
            MVI   0(R4),QUOTE
            LA    R4,2(R4)
            MVC   0(L'VOL,R4),VOL
         ENDIF
***
*        AFTER 'ADD' COMMAND BUILT, I REMOVE THE ROW
***
         L     RF,ISPLADDR                   GET ISPLINK ADDRESS
         LA    R2,SYSTAB                     GET TABLE NAME
         CALL  (15),(,(R2)),VL,MF=(E,LCALL05) REMOVE OLD ROW
         SPACE
         MVI   ERASE,NO
         MVC   MSGID,MSGID30          SET UP MSG -MOVE PENDING
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * COPY A MODEL ROW - LINE COMMAND        *
*                            ******************************************
         SPACE 2
         ENTRE# LCCOPY
***
*        FIRST OF ALL I BUILD PRIMARY PSEUDOCOMMAND, USING DATA
*        RETRIEVED FROM ROW
***
         LA    R4,OPT                   R4=ADDR OF PRIMARY INPUT
         MVI   0(R4),TSOPFX             MOVE DOT-TSO CMD PREFIX
         LA    R4,1(R4)                 POINT R4 AFTER DOT
         LA    R4,9(R4)                 LEAVE PLACE FOR TSO COMMAND
         MVI   0(R4),QUOTE              MOVE QUOTA FOR DSNAME
         LA    R4,1(R4)                 POINT R4 AFTER QUOTA
         MVC   0(L'DSNAME,R4),DSNAME    MOVE DSNAME TO PRIM. FIELD
         TRT   0(L'DSNAME,R4),TABLE     FIND END OF DSNAME
         IF NOTZERO
            LR    R4,R1                 POINT R4 AFTER DSNAME
         ELSE
            LA    R4,(L'DSNAME)(R4)     POINT R4 AFTER DSNAME
         ENDIF
         MVI   0(R4),QUOTE              CLOSE DSNAME BY QUOTA
         SPACE
         MVI   ERASE,NO               SET SWITCH-DO NOT ERASE PRIMAR
         MVC   MSGID,MSGID34          SET UP MSG -MODEL COPIED
         MVI   MSGPARM,BLANK
         MVC   MSGPARM+1(L'MSGPARM-1),MSGPARM
         MVC   MSGPARM(L'DSNAME),DSNAME    SET DSNAME FOR MSG
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * LOCATE A ROW - LINE COMMAND            *
*                            ******************************************
         SPACE 2
         ENTRE# LCLOCATE
         MVI   SCROLL,YES             SET SWITCH-MOVE SCREEN UP
         MVC   MSGID,MSGID15          SET UP MSG - ROW LOCATED
         MVI   MSGPARM,BLANK
         MVC   MSGPARM+1(L'MSGPARM-1),MSGPARM
         MVC   MSGPARM(L'DSNAME),DSNAME    SET DSNAME FOR MSG
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * PROMPT A USER - INVALID LINE COMMAND   *
*                            ******************************************
         SPACE 2
         ENTRE# LCPROMPT
         L     RF,ISPLADDR            GET ISPLINK ADDRESS
         LA    R2,PANLPROM            GET POINTER TO PROMPT PANEL
         CALL  (15),(,(R2)),VL,MF=(E,LCALL33)  DISPLAY PROMPT PANEL
         IF RF,EQ,0,LTR               IF USER ENTERED REQUEST
            LA    R2,LCMDTABL              GET ADDR OF LINE CMD TABL
            DOWHILE ACTION,NE,0(R2),CLC,*AND*,0(R2),NE,X'FF',CLI
               LA    R2,(L'LCMDTABL+4)(R2)   SEARCH THRU TABLE
            ENDDO
            IFOR =A(0),EQ,(L'LCMDTABL)(R2),CLC  IF DUMMY CMD OR
            IF 0(R2),EQ,X'FF',CLI          IF CMD NOT FOUND
               MVI   MSGPARM,BLANK
               MVC   MSGPARM+1(L'MSGPARM-1),MSGPARM
               MVC   MSGPARM(L'ACTION),ACTION
               MVC   MSGID,MSGID20            SET ERROR MSG
            ELSE                           ELSE
               L     RF,(L'LCMDTABL)(R2)      GET ADDR OF PGM
               CALL# (15)                     EXEC LINE CMD
            ENDIF                          ENDIF
         ELSE
            MVI   MSGPARM,BLANK
            MVC   MSGPARM+1(L'MSGPARM-1),MSGPARM
            MVC   MSGPARM(L'ACTION),ACTION
            MVC   MSGID,MSGID20            SET ERROR MSG
         ENDIF
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * LCUSER - PERFORM USER LINE COMMAND     *
*                            ******************************************
         SPACE 2
         ENTRE# LCUSER
         L     RF,ISPLADDR
         CALL  (15),(VPUT,TUSERN,SHARED),VL   PUT ROW VARS INTO SHARED
         LA    R5,L'LUSRBUFF                GET LENGTH OF BUFFER
         ST    R5,BUFFLEN                   STORE LENGTH INTO WORD
         L     RF,ISPLADDR                        GET ISPLINK ADDRESS
         LA    R2,BUFFLEN                         GET BUFFLEN ADDR
         LA    R5,LUSRBUFF                        GET BUFFER  ADDR
         CALL  (15),(,(R2),(R5)),VL,MF=(E,LCALL16) SELECT USER CMD MENU
         IF RF,GT,=H'4',CH
            MVC   MSGID,MSGID53
         ELSE
            MVC   MSGID,MSGID54
         ENDIF
         MVI   MSGPARM,BLANK
         MVC   MSGPARM+1(L'MSGPARM-1),MSGPARM
         MVC   MSGPARM(L'DSNAME),DSNAME                            ,
         L     RF,ISPLADDR
         CALL  (15),(VGET,TUSERN,SHARED),VL   GET ROW VARS FROM SHARED
         MVI   ACTION,BLANK                  CLEAR LINE COMMAND
         L     RF,ISPLADDR                   GET ISPLINK ADDRESS
         LA    R2,SYSTAB                     GET SYSTAB ADDR
         CALL  (15),(,(R2)),VL,MF=(E,LCALL31)    UPDATE ROW IN TABLE
         MVI   ERASE,YES
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * LCUTIL - PERFORM SPF UTIL 3.X FUNCTIONS*
*                            ******************************************
         SPACE 2
         ENTRE# LCUTIL
         L     RF,ISPLADDR
         CALL  (15),(VPUT,TUSERN,SHARED),VL   PUT ROW VARS INTO SHARED
         LA    R5,L'LUTLBUFF                GET LENGTH OF BUFFER
         ST    R5,BUFFLEN                   STORE LENGTH INTO WORD
         L     RF,ISPLADDR                        GET ISPLINK ADDRESS
         LA    R2,BUFFLEN                         GET BUFFLEN ADDR
         LA    R5,LUTLBUFF                        GET BUFFER  ADDR
         CALL  (15),(,(R2),(R5)),VL,MF=(E,LCALL16) SELECT USER CMD
         IF RF,GT,=H'4',CH
            MVC   MSGID,MSGID53
         ELSE
            MVC   MSGID,MSGID54
         ENDIF
         MVI   MSGPARM,BLANK
         MVC   MSGPARM+1(L'MSGPARM-1),MSGPARM
         MVC   MSGPARM(L'DSNAME),DSNAME                            ,
         L     RF,ISPLADDR
         CALL  (15),(VGET,TUSERN,SHARED),VL   GET ROW VARS FROM SHARED
         MVI   ACTION,BLANK                  CLEAR LINE COMMAND
         L     RF,ISPLADDR                   GET ISPLINK ADDRESS
         LA    R2,SYSTAB                     GET SYSTAB ADDR
         CALL  (15),(,(R2)),VL,MF=(E,LCALL31)    UPDATE ROW IN TABLE
         MVI   ERASE,YES
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * OPEN/CREATE TABLE FOR EXTERNAL CALL    *
*                            ******************************************
         SPACE 2
         ENTRE# XTOPEN
         MVI   SYSTAB,BLANK                   CLEAR TABLE NAME
         MVC   SYSTAB+1(L'SYSTAB-1),SYSTAB
         MVC   SYSTAB(L'ZUSER),ZUSER          TABLE NAME = LOGON ID
         L     RF,ISPLADDR
         LA    R2,SYSTAB
         CALL  (15),(,(R2),),VL,MF=(E,LCALL01) OPEN TABLE
         IF RF,EQ,=H'16',CH                   IF DATASET IS NOT HERE
            IEXIT# RC=8                          EXIT
         ENDIF                                ENDIF
         SPACE
         IF RF,EQ,=H'12',CH                  IF ENQ CONFLICT
            L     RF,ISPLADDR
            LA    R2,SYSTAB
            CALL  (15),(,(R2)),VL,MF=(E,LCALL02) CHECK IF TABLE EXIST
            IF RF,NE,0,LTR                      IF TABLE DOESN"T EXIST
               TRT   SYSTAB(L'ZUSER),TABLE        GET FIRST SPACE ADDR
               IF ZERO
                  MVI   SYSTAB+L'ZUSER,C'0'       GET NEW TABLE NAME
               ELSE
                  MVI   0(R1),C'0'                GET NEW TABLE NAME
               ENDIF
               L     RF,ISPLADDR
               LA    R2,SYSTAB
               CALL  (15),(,(R2),),VL,MF=(E,LCALL01) OPEN ALT TABLE
               IF RF,NE,0,LTR                       IF CAN"T OPEN
                  L     RF,ISPLADDR                    GET ISPLINK ADD
                  LA    R2,SYSTAB                      GET TABLE NAME
                  CALL  (15),(,(R2),,,,),VL,MF=(E,LCALL03) CREATE TAB
                  L     RF,ISPLADDR
                  LA    R2,SYSTAB                     GET TABLE NAME
                  CALL  (15),(,(R2)),VL,MF=(E,LCALL02) IS TABLE CREATED
                  IF RF,NE,0,LTR                      IF NOT
                     IEXIT# RC=8                         EXIT
                  ENDIF                               ENDIF
               ENDIF
            ENDIF
         ELSE                       ELSE
            IF RF,NE,0,LTR             IF TABLE DOES NOT EXIST
               L     RF,ISPLADDR          GET ISPLINK ADDR
               LA    R2,SYSTAB            GET TABLE NAME
               CALL  (15),(,(R2),,,,),VL,MF=(E,LCALL03) CREATE NEW TAB
               IF RF,NE,0,LTR             IF CAN"T CREATE TABLE
                  IEXIT# RC=8                EXIT
               ENDIF                      ENDIF
            ENDIF                      ENDIF
         ENDIF                      ENDIF
         SPACE
         EXIT# RC=0          IF I AM AT THIS POINT - EVERYTHING IS OK
         EJECT
*                            ******************************************
*                            * OPEN/CREATE TABLE FOR INTERNAL CALL    *
*                            ******************************************
         SPACE 2
         ENTRE# ITOPEN
         L     RF,ISPLADDR
         LA    R2,SYSTAB
         CALL  (15),(,(R2),),VL,MF=(E,LCALL01) OPEN TABLE
         IF RF,EQ,=H'16',CH                   IF DATASET IS NOT HERE
            IEXIT# RC=8                          EXIT
         ENDIF                                ENDIF
         SPACE
         IF RF,EQ,=H'12',CH                  IF ENQ CONFLICT
            L     RF,ISPLADDR
            LA    R2,SYSTAB
            CALL  (15),(,(R2)),VL,MF=(E,LCALL02) CHECK IF TABLE EXIST
            IF RF,NE,0,LTR                      IF TABLE DOESN"T EXIST
               IEXIT# RC=8                         EXIT
            ENDIF                               ENDIF
         ELSE                       ELSE
            IF RF,NE,0,LTR             IF TABLE DOES NOT EXIST
               L     RF,ISPLADDR          GET ISPLINK ADDR
               LA    R2,SYSTAB            GET TABLE NAME
               CALL  (15),(,(R2),,,,),VL,MF=(E,LCALL03) CREATE NEW TAB
               IF RF,NE,0,LTR             IF CAN"T CREATE TABLE
                  IEXIT# RC=8                EXIT
               ENDIF                      ENDIF
            ENDIF                      ENDIF
         ENDIF                      ENDIF
         SPACE
         EXIT# RC=0          IF I AM AT THIS POINT - EVERYTHING IS OK
         EJECT
*                            ******************************************
*                            * PCMENU - SELECT & ACTIVATE DIRECTORY   *
*                            ******************************************
         SPACE 2
         ENTRE# PCMENU
***      BUILD DIRECTORY NAME
         BCTR  R6,R0                   POINT R6 TO DIRECTORY # IN INPUT
         MVI   DWORD,BLANK
         MVC   DWORD+1(L'DWORD-1),DWORD
         MVC   DWORD(L'ZUSER),ZUSER
         TRT   DWORD(L'ZUSER),TABLE    GET FIRST BLANK
         IF ZERO
            MVC   DWORD+L'ZUSER(1),0(R6)
         ELSE
            MVC   0(1,R1),0(R6)
         ENDIF
***      BUILD MESSAGE
         MVI   MSGPARM,BLANK                 ERASE MSG PARM
         MVC   MSGPARM+1(L'MSGPARM-1),MSGPARM
         MVC   MSGPARM(L'DWORD),DWORD        MOVE DIREC. NAME TO MSG
         SPACE                                                     ,
***      BUILD BUFFER FOR PARAMETER TO INVOKE IDMMAIN              ,
         MVI   IDMBUFF,BLANK
         MVC   IDMBUFF+1(L'IDMBUFF-1),IDMBUFF
         LA    R3,IDMBUFF                                          ,
         MVC   0(L'IDMPREF,R3),IDMPREF                          ,
         LA    R3,L'IDMPREF(R3)
         MVC   0(L'PARMIDM1,R3),PARMIDM1
         LA    R3,L'PARMIDM1(R3)
         MVC   0(L'DWORD,R3),DWORD
         LA    R3,L'DWORD(R3)
         MVC   0(L'SPFMENU,R3),SPFMENU
         LA    R3,L'SPFMENU(R3)
         MVI   0(R3),RPARENT
         L     RF,ISPLADDR                     GET ISPLINK ADDRESS
         LA    R2,IDMBUFL                      GET BUFF. LEN. ADDR
         LA    R5,IDMBUFF                      GET BUFFER  ADDR
         CALL  (15),(,(R2),(R5)),VL,MF=(E,LCALL16)  INVOKE IDMMAIN
         MVI   ERASE,YES
         SPACE
         IF RF,EQ,=H'99',CH                       IF RC=99
            MVC   MSGID,MSGID51                      SET MSG-IN USE
         ELSE                                     ELSE
            MVC   MSGID,MSGID50                      SET MSG OK
         ENDIF
*---------------------------------------------------------------------*
*        PROBLEM: RETURN KEY DOES NOT FUNCTION PROPERLY FROM          *
*        SECOND LEVEL TABLE DISPLAY.                                  *
*        FOLLOWING FEW LINES ARE THE CIRCUMVENTION OF THE PROBLEM.    *
*        PTF UZ55246 DOES NOT FIX PROBLEM.                            *
*---------------------------------------------------------------------*
         L     RF,ISPLADDR                     GET ISPLINK ADDRESS
         LA    R2,DUMBUFL                      GET BUFF. LEN. ADDR
         LA    R5,DUMBUFF                      GET BUFFER  ADDR
         CALL  (15),(,(R2),(R5)),VL,MF=(E,LCALL16)  INVOKE DUMMY
         SPACE
         EXIT# RC=0
         EJECT
*                            ******************************************
*                            * PCSUPPL - SELECT AND ACTIVATE A        *
*                            *           SUPPLEMENTAL DIRECTORY       *
*                            ******************************************
         SPACE
*************************************************           *IPC 12/83*
* START OF IPC MODIFICATION TO IDMMAIN          *           *IPC 12/83*
*************************************************           *IPC 12/83*
         SPACE 2
         ENTRE# PCSUPPL
         LA     R4,OPT+L'OPT       R4=ADDR OF END OF INPUT RECORD
         SR     R4,R6              R4=LENGTH OF INPUT AFTER CMD NAME
         IF R4,EQ,0,LTR            IF OPERAND NOT ENTERED
            MVC   MSGID,MSGID4        SET ERROR MSG
            IEXIT# RC=4               RETURN
         ENDIF                     ENDIF
         BCTR   R4,R0              -1 FOR EX
         TRT    0(0,R6),TABLER     SEARCH FOR NONBLANK-FIRST OPERAND
         EX     R4,*-6
         IF ZERO                   IF OPERAND NOT ENTERED
            MVC   MSGID,MSGID4        SET ERROR MSG
            IEXIT# RC=4               RETURN
         ENDIF                     ENDIF
         LR    R6,R1               R6=ADDRESS OF FIRST OPERAND
         SPACE
         LA     R4,OPT+L'OPT       R4=ADDR OF END OF INPUT RECORD
         SR     R4,R6              R4=LENGTH OF THE REST OF INPUT
         LA     R3,9               R3=MAX LENGTH OF FIRST OPER + BLANK
         IF R4,GT,R3,CR
            LR    R4,R3            R4=MIN VALUE OF R4 AND R3
         ENDIF
         IF R4,EQ,0,LTR            LENGTH MUST NOT BE ZERO
            MVC   MSGID,MSGID4
            IEXIT# RC=4
         ENDIF
         BCTR   R4,R0              -1 FOR EX
         TRT   0(0,R6),TABLE
         EX     R4,*-6             SEARCH FOR FIRST BLANK AFTER OPER
         IF ZERO                   IF END OF OPERAND NOT FOUND
            MVC   MSGID,MSGID4        SET ERROR MSG
            IEXIT# RC=4               RETURN
         ENDIF                     ENDIF
         LR    R5,R1               R5=END OF FIRST PARM
         SR    R5,R6               R5=LENGTH OF DIRECTORY NAME
         BCTR  R5,R0               -1 FOR EX
         SPACE
***      BUILD DIRECTORY NAME      POINT R6 TO EXTENDED DIRECTORY NAME
         MVI   DWORD,BLANK         BLANK OUT DWORD
         MVC   DWORD+1(L'DWORD-1),DWORD
         MVC   DWORD(0),0(R6)
         EX    R5,*-6              MOVE 1 PARM TO DWORD
         SPACE                                                     ,
***      BUILD MESSAGE
         MVI   MSGPARM,BLANK                 ERASE MSG PARM
         MVC   MSGPARM+1(L'MSGPARM-1),MSGPARM
         MVC   MSGPARM(L'DWORD),DWORD        MOVE DIREC. NAME TO MSG
         SPACE                                                     ,
***      BUILD BUFFER FOR PARAMETER TO INVOKE IDMMAIN              ,
         MVI   IDMBUFF,BLANK
         MVC   IDMBUFF+1(L'IDMBUFF-1),IDMBUFF
         LA    R3,IDMBUFF                                          ,
         MVC   0(L'IDMPREF,R3),IDMPREF                          ,
         LA    R3,L'IDMPREF(R3)
         MVC   0(L'PARMIDM1,R3),PARMIDM1
         LA    R3,L'PARMIDM1(R3)
         MVC   0(L'DWORD,R3),DWORD
         LA    R3,L'DWORD(R3)
         MVC   0(L'SPFMENU,R3),SPFMENU
         LA    R3,L'SPFMENU(R3)
         MVI   0(R3),RPARENT
         L     RF,ISPLADDR                     GET ISPLINK ADDRESS
         LA    R2,IDMBUFL                      GET BUFF. LEN. ADDR
         LA    R5,IDMBUFF                      GET BUFFER  ADDR
         CALL  (15),(,(R2),(R5)),VL,MF=(E,LCALL16)  INVOKE IDMMAIN
         MVI   ERASE,YES
         SPACE
         IF RF,EQ,=H'99',CH                       IF RC=99
            MVC   MSGID,MSGID51                      SET MSG-IN USE
         ELSE                                     ELSE
            MVC   MSGID,MSGID50                      SET MSG OK
         ENDIF
*---------------------------------------------------------------------*
*        PROBLEM: RETURN KEY DOES NOT FUNCTION PROPERLY FROM          *
*        SECOND LEVEL TABLE DISPLAY.                                  *
*        FOLLOWING FEW LINES ARE THE CIRCUMVENTION OF THE PROBLEM.    *
*        PTF UZ55246 DOES NOT FIX PROBLEM.                            *
*---------------------------------------------------------------------*
         L     RF,ISPLADDR                     GET ISPLINK ADDRESS
         LA    R2,DUMBUFL                      GET BUFF. LEN. ADDR
         LA    R5,DUMBUFF                      GET BUFFER  ADDR
         CALL  (15),(,(R2),(R5)),VL,MF=(E,LCALL16)  INVOKE DUMMY
         SPACE
         EXIT# RC=0
         SPACE 2
*************************************************           *IPC 12/83*
* END OF IPC MODIFICATION TO IDMMAIN            *           *IPC 12/83*
*************************************************           *IPC 12/83*
         EJECT
*                            ******************************************
*                            *     LITERALS                           *
*                            ******************************************
         SPACE
         LTORG
         SPACE 3
         END#  IDMMAIN
