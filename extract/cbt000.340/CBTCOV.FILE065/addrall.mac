         TITLE    'ADDRALL ROUTINE FOR PTSSRCH'
**********************************************************************
*                                                                    *
*  PURPOSE:  THIS ROUTINE IS CALLED BY PTSSRCH WHEN THE USER HAS     *
*            INDICATED NO INPUT.  ADDRALL READS THE SYSTEM ENTRY AND *
*            FINDS ALL THE FMIDS THAT THIS PTS IS RECEIVING SYSMODS  *
*            FOR, AND STORES THESE SYSMODS IN PTSSRCH'S TABLE.       *
*                                                                    *
*  INPUT:    PTSSRCH PASSES ADDRALL A PARM LIST POINTING TO THE AREAS*
*            OF INTEREST TO ADDRALL.                                 *
*                                                                    *
*  OUTPUT:   THERE IS NO PRINTED OUTPUT FROM ADDRALL.  ADDRALL WILL  *
*            FILL PTSSRCH'S TABLE WITH ALL THE FMIDS IN THE SYSTEM   *
*            ENTRY, AND UPDATE THE COUNT OF # OF FMIDS(#FMIDS).      *
*                                                                    *
*  USER ABENDS:  ADDRALL ALL WAS WRITTEN WITH THE FOLLOWING ASSUMP-  *
*                TIONS:                                              *
*                1. THE SYSTEM ENTRY IS THE 1ST ENTRY IN THE PTS.    *
*                2. THE SREL Z038 MUST BE THE 1ST ENTRY ON THE CARD. *
*                   THIS SHOULD BE EQUIVALENT TO HAVING Z038 THE 1ST *
*                   SREL IN THE SYSTEM ENTRY.                        *
*                IF ADDRALL FINDS NO FMIDS IN THE SYSTEM ENTRY, IT   *
*                RETURNS TO PTSSRCH WITH A RETURN CODE OF 4.         *
*                IF ADDRALL CAN NOT FIND THE Z038 INDICATOR, IT      *
*                RETURNS TO PTSSRCH WITH A RETURN CODE OF 8.         *
*                PTSSRCH WILL ADD 600 TO THESE NUMBERS AND ABEND.    *
*                                                                    *
*  USER MACROS:  BEGIN                                               *
*                                                                    *
*  WRITTEN BY ALAN FEINSTEIN, SECURITY PACIFIC NATIONAL BANK,        *
*             611 N. BRAND BLVD., GLENDALE CALIFORNIA 91203.         *
*             TELEPHONE NO. (213)-507-3329                           *
*             APRIL ,1981                                            *
*                                                                    *
*                                                                    *
**********************************************************************
         EJECT
          MACRO
&N        BEGIN      &NAME,&BASE=R12,&TREG=R11,&SAVE=SAVEAREA,&SAW=18
           LCLA     &L
           LCLA     &M
           LCLA     &I
          AIF       ('&SYSLIST(0)' EQ '').ERROR
&N        CSECT
&I         SETA     &SAW*4+4
           AIF      ('&NAME'  EQ  '').LABEL
&L         SETA     ((K'&NAME)/2)*2+4
&M         SETA     K'&NAME
          B         &L.(0,15)
          DC        AL1(&M)
          DC        C&NAME
           AGO      .OK
.LABEL     ANOP
&M         SETA      K'&N
&L         SETA     ((K'&N+2)/2)*2+4
          B         &L.(0,15)
          DC        AL1(&M)
          DC        C'&N'
.OK         ANOP
R0        EQU    0
R1        EQU    1
R2        EQU    2
R3        EQU    3
R4        EQU    4
R5        EQU    5
R6        EQU    6
R7        EQU    7
R8        EQU    8
R9        EQU    9
R10       EQU    10
R11       EQU    11
R12       EQU    12
R13       EQU    13
R14       EQU    14
R15       EQU    15
*  SET UP ADDRESSABILITY, SAVE AREA, AND SAVE AREA CHAINING.
          STM    R14,R12,12(R13)
          LR        &BASE,R15
          USING     &N,&BASE
          LA        &TREG,&SAVE
          ST        R13,4(&TREG)
          ST        &TREG,8(R13)
          CNOP       2,4
          LR        R13,&TREG
          B          *+&I
&SAVE     DC         &SAW.F'0'
          MEXIT
.ERROR    MNOTE     12,'LABEL IS REQUIRED WITH THIS MACRO.'
          MEND
          EJECT
*
*  DO STANDARD HOUSE KEEPING
*
ADDRALL  BEGIN 'ADDRALL VERSION 1.0 - &SYSDATE AT &SYSTIME'
         L     R11,SAVEAREA+4  PT TO PTSSRCH'S SAVEAREA
         XC    16(4,R11),16(R11) 0 OUT R15 THERE FOR R.C
         ST    R1,PARMADDR     SAVE PARM PTER
         L     R2,0(R1)        PICKUP DCBADDR
         ST    R2,DCBADDR        & SAVE IT
         LA    R1,4(R1)        PT TO LEN
         L     R2,0(R1)        PICKUP LEN
         ST    R2,LEN             & SAVE IT
         LA    R1,8(R1)        PT TO TABADDR
         L     R2,0(R1)        PICKUP TABADDR
         ST    R2,TABADDR         & SAVE IT
         L     R4,DCBADDR      PUT DCB ADDRESS IN R4
         SR    R8,R8           R8 IS OFFSET INTO CARD
         SR    R10,R10         R10 IS NUMBER OF FMIDS
         MVC   SAVEOD(3),33(R4) SAVE EOD THAT PTSSRCH USES
         MVC   33(3,R4),EOD+1  AND PUT IN ADDRALL'S EOD ADDRESS
READLOOP LR    R2,R9           PUT ADDRESS OF OUTPUT AREA IN R2
         READ  MEMDECB,SF,(R4),(R2),'S'
         CHECK MEMDECB
*
*  FIND LENGTH OF BLOCK READ & SETUP DE-BLOCKING.
*
         LH    R7,LEN+2
         L     R6,MEMDECB+16
         SH    R7,14(R6)             REG. 7 CONTAINS LENGTH READ.
         SPACE 3
*
*  CHECK FOR FMID.  THIS LOOP IS THE HEART OF THE SEARCH ROUTINE.
*    READ EACH CARD IMAGE SEARCHING FOR AN FMID THAT IS TO HAVE
*    ITS SYSMODS EXCLUDE.
*
         SPACE
         L     R6,=F'80'     SETUP FOR BXLE. INCREMENT BY 80
         AR    R7,R2         R7 PTS TO LAST BYTE
         SR    R7,R6         R7 NOW PTS TO LAST CARD
PARSLINE LR    R1,R2         SET R1 EQ ADDRESS OF CURRENT RECORD
         CLI   HIT,X'FF'     SEE IF WE HAVE FOUND RELEASE ID
         BE    CONTINUE       YES
*  SEE IF VERSION ID IS FIRST THING ON CARD
         CLC   0(4,R1),=C'Z038' RELAVENT INFORMATION?
         BNE   TO0              NO, GET NEXT CARD
         MVI   HIT,X'FF'     INDICATE WE FIND START
*  EACH ELEMENT IS 9 BYTES LONG WITH THE 9TH BYTE INDICATING THE
*    TYPE OF ENTRY
CONTINUE LA    R1,0(R8,R2)   POINT TO NEXT RECORD
         CLI   0(R1),X'FF'   IS THIS LAST FMID INDICATOR?
         BE    SETRC         YES, WE HAVE COME TO LOGICAL END
         CLI   SPLIT,X'FF'   WAS THIS RECORD SPLIT ACROSS CARDS?
         BNE   NOSPLIT1      NO, JUST TREAT AS REGULAR
         S     R1,=F'1'      YES, SUBTRACT 1 TO PT TO LAST BYTE
         CLI   0(R1),X'01'   CHECK FOR FMID RECORD
         BE    SPLIT1        YES, HANDLE IT
         A     R1,=F'1'      NO, ADD 1 TO PT TO NEXT 9 BYTE ELEMENT
         MVI   SPLIT,X'00'   CLEAR SPLIT INDICATE
         B     PARSLINE      CONTINUE CHECKING REST OF CARD
NOSPLIT1 CLI   8(R1),X'01'   CHECK 9TH BYTE TO SEE IF IT IS FOR FMID
         BNE   OK            NO, GO ADVANCE BY 9 FOR NEXT ELEMENT
         B     STOREWRK      YES, STORE IT IN TABLE
SPLIT1   MVC   HOLD+80(80),0(R2)  ELEMENT SPLITS CARD. SAVE THIS CARD
         A     R1,=F'1'      SO WE CAN CHECK IT.  ADD 1 TO PT TO NEXT
         LA    R14,9         9 BYTE ELEMENT
         LR    R5,R8         SAVE R8
*  FIND OUT WHERE THE 9 BYTE ELEMENT STARTED ON THE PREVIOUS
*    CARD.  R8=OFFSET OF THIS ELEMENT ON CARD. 9-R8 = LENGTH OF
*    THIS ELEMENT ON THE PREVIOUS CARD, 80-(9-R8) = THE OFFSET OF THE
*    ELEMENT ON PREVIOUS CARD
         SR    R14,R8
         LA    R8,80
         SR    R8,R14
         LA    R14,HOLD
         LA    R1,0(R8,R14)   PT TO BEGINNING OF ELEMENT IN HOLD AREA
         LR    R8,R5          RESTORE R8
         S     R8,=F'9'       WE WILL ADD THIS BACK LATER
STOREWRK LH    R10,#FMIDS     PICKUP # FOUND
         L     R5,TABADDR     PT TO START OF TABLE
         SLL   R10,3          MULTIPLY # BY 8
         AR    R5,R10         PT TO NEXT EMPTY SPOT
         MVC   1(7,R5),0(R1)  MOVE IN THIS FMID
         SRL   R10,3          DIVIDE BY 8
         A     R10,=F'1'      ADD 1
         STH   R10,#FMIDS     SAVE
         STC   R10,0(R5)      SAVE THIS NUMBER
         L     R5,PARMADDR    STORE #FMIDS IN PTSSRCH'S AREA
         MVC   10(2,R5),#FMIDS  BECAUSE WE MAY HIT E.O.F FIRST
OK       MVI   SPLIT,X'00'    READY TO ADVANCE TO NEXT ELEMENT ON CARD
         LA    R8,9(R8)       CLEAR SPLIT FLAG, ADD 9 TO OFFSET
         C     R8,=F'71'      ARE WE LT OR EQ TO 71?
         BNH   PARSLINE       YES, GO ON
         C     R8,=F'80'      NO, ELEMENT MAY BE SPLIT OVER 2 CARDS
         BNE   CONTSPLT       IF LAST OFFSET WAS 71, ELEMENT ENDED
         SR    R8,R8           EXACTLY ON END OF CARD, SO 0 R8 & GO ON
         B     TO0
CONTSPLT MVC   HOLD(80),0(R2) ELEMENT SPLITS CARDS. MOVE 1ST PART INTO
         MVI   SPLIT,X'FF'     HOLD AREA, INDICATE A SPLIT.
*  FIND OUT HOW MUCH OF THE 9 BYTE ELEMENT IS CONTINUED ON THE NEXT
*    CARD.  R8=OFFSET OF THIS ELEMENT ON CARD. 80-R8 = LENGTH OF
*    THIS ELEMENT ON THIS CARD, 9-(80-R8) = THE LENGTH OF THE
*    ELEMENT ON THE NEXT CARD
         LA    R1,80
         SR    R1,R8
         LA    R8,9
         SR    R8,R1
TO0      BXLE  R2,R6,PARSLINE  CONTINE WITH LOOP, GET NEXT RECORD
         B     READLOOP        GET NEXT BLOCK
         SPACE
*
*  FOUND LOGICAL END OF FMIDS, SETUP RETURN CODE
*
SETRC    MVC   33(3,R4),SAVEOD      RESTORE PTSSRCH'S EOD ADDRESS
         CLI   HIT,X'FF'            DID WE FIND Z038
         BE    NOTRC8               YES
         L     R11,SAVEAREA+4       NOPE, SET R.C=8
         MVC   16(4,R11),=F'8'
         B     EXIT
NOTRC8   LH    R5,#FMIDS            DID WE FIND ANY?
         LTR   R5,R5
         BNZ   EXIT                 YES
         L     R11,SAVEAREA+4       NOPE, SET R.C=4
         MVC   16(4,R11),=F'4'
EXIT     L     R13,SAVEAREA+4       RESTORE REGISTERS AND
         LM    R14,R12,12(R13)        RETURN
         BR    R14                  GOOD-BYE !!
         SPACE 3
         LTORG
SPLIT    DC    X'00'
LEN      DC    F'0'
DCBADDR  DC    F'0'
TABADDR  DC    F'0'
#FMIDS   DC    H'0'
PARMADDR DC    F'0'
EOD      DC    A(SETRC)
SAVEOD   DC    F'0'
HOLD     DC    CL160' '
HIT      DC    X'00'
         END   ADDRALL
