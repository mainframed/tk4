*          DATA SET DMOD       AT LEVEL 001 AS OF 04/22/76
*          DATA SET LBDMOD     AT LEVEL 001 AS OF 08/08/73
*          MODIFIED 06/79 BY TOYOTA TO ADD LAST REFERENCED DATE
         MACRO
         EQUATE
** GENERAL PURPOSE REGISTERS
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
** FLOATING POINT REGISTERS
FR0      EQU   0
FR2      EQU   2
FR4      EQU   4
FR6      EQU   6
         MEND
         MACRO
&SUBR    ENTER &REGS,&BASES,&SAVE
         GBLC  &LV,&SP,&SAVED(2)
         LCLA  &K,&N
         LCLC  &AREA,&B(16),&SUBNAME,&S
&SAVED(1) SETC '&REGS(1)'
&SAVED(2) SETC '&REGS(2)'
&SUBNAME SETC  '&SUBR'
         AIF   ('&SUBNAME' NE '').P1
&SUBNAME SETC  'MAIN'
.P1      ANOP
&SUBNAME CSECT
         AIF   ('&REGS' EQ '').PA
         SAVE  &REGS,T,*
.PA      AIF   ('&BASES(1)' EQ '15' OR '&BASES' EQ '').PC
         AIF   ('&BASES(1)' EQ '13' AND '&SAVE' NE '').PC
         LR    &BASES(1),15
.PC      CNOP  0,4
&S       SETC  '&SUBNAME'
         AIF   (N'&SAVE EQ 2).P4
         AIF   ('&SAVE' EQ '').P3
&AREA    SETC  '&SAVE'
         AIF   ('&SAVE' NE '*').P2
&AREA    SETC  'SAVEAREA'
.P2      AIF   ('&SAVE' NE '+').PB
&AREA    SETC  'SAVE'.'&SYSNDX'
.PB      AIF   ('&BASES(1)' NE '13').P4
&S       SETC  '*'
         USING &SUBNAME,15
         AIF   ('&REGS' EQ '').PD
         ST    14,&AREA+4
         LA    14,&AREA
         ST    14,8(13)
         L     14,&AREA+4
         ST    13,&AREA+4
.PD      BAL   13,*+76
         DROP  15
         AGO   .P4
.P3      AIF   ('&BASES(1)' NE '13').P4
         MNOTE 8,'*** THE CONTENTS OF REG. 13 ARE LOST. NO SAVE AREA WAX
               S ESTABLISHED.'
.P4      AIF   ('&BASES(1)' NE '14' OR '&SAVE' EQ '').P5
         MNOTE 8,'*** MACRO RESTRICTION - REG. 14 MUST NOT BE USED AS TX
               HE FIRST BASE REGISTER IF A SAVE AREA IS USED.'
.P5      AIF   ('&BASES' EQ '').P9
&N       SETA  N'&BASES
.P6      ANOP
&K       SETA  &K+1
&B(&K)   SETC  ','.'&BASES(&K)'
         AIF   (N'&SAVE EQ 1).PE
         AIF   ('&BASES(&K)' NE '13').P7
         MNOTE 8,'*** REG. 13 MAY NOT BE USED AS A BASE REGISTER FOR REX
               ENTRANT CODE.'
         AGO   .P7
.PE      AIF   ('&BASES(&K+1)' NE '13' OR '&SAVE' EQ '').P7
         MNOTE 8,'*** WHEN USING A SAVE AREA, REG. 13 MAY NOT BE USED AX
               S A SECONDARY BASE REGISTER.'
.P7      AIF   ('&BASES(&K+1)' NE '').P6
         USING &S&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)&B(9)&B(10)&B(X
               11)&B(12)&B(13)&B(14)&B(15)&B(16)
&K       SETA  1
         AIF   ('&BASES(1)' NE '13' OR '&SAVE' EQ '').P8
&AREA    DC    18F'0'
.P8      AIF   (&K GE &N).P10
         LA    &BASES(&K+1),X'FFF'(&BASES(&K))
         LA    &BASES(&K+1),1(&BASES(&K+1))
&K       SETA  &K+1
         AGO   .P8
.P9      USING &SUBNAME,15
.P10     AIF   (N'&SAVE EQ 2).P13
         AIF   ('&SAVE' EQ '' OR '&BASES(1)' EQ '13').P12
         AIF   ('&REGS' EQ '').P11
         ST    14,&AREA+4
         LA    14,&AREA
         ST    14,8(13)
         L     14,&AREA+4
         ST    13,&AREA+4
.P11     BAL   13,*+76
&AREA    DC    18F'0'
.P12     MEXIT
.P13     ANOP
&LV      SETC  '&SAVE(2)'
&SP      SETC  '0'
         AIF   ('&SAVE(1)' EQ '').P14
&SP      SETC  '&SAVE(1)'
.P14     GETMAIN R,LV=&LV,SP=&SP
         ST    13,4(1)
         ST    1,8(13)
         LR    2,13
         LR    13,1
         LM    0,2,20(2)
         MEND
         MACRO
&NAME    LEAVE &EQ
         GBLC  &LV,&SP,&SAVED(2)
&NAME    LR    2,13                    SAVE CURRENT WORK/SAVE AREA
         L     13,4(13)             PICK UP LAST SAVE AREA
         STM   15,1,16(13)        STORE RETURN REGS
         AIF   ('&LV' EQ '').L1
         FREEMAIN R,LV=&LV,SP=&SP,A=(2) FREE SAVE AREA
.L1      AIF   ('&SAVED(2)' EQ '').L2
         RETURN (&SAVED(1),&SAVED(2)),T  RETURN TO CALLER
         AGO   .L3
.L2      RETURN &SAVED(1),T *          RETURN TO CALLER
.L3      AIF   ('&EQ' NE 'EQ').L4
         EQUATE
.L4      MEND
         MACRO
&LABEL   HEXOUT &NAME1,&NAME2,&PATTERN
         LCLA  &H,&K1,&K2,&C1,&C2,&A,&D,&LPC
         LCLC  &X(16),&B(13),&NAME3
         AIF   ('&NAME1' EQ '').SKIP1
&NAME1   DC    C'000000000000000011111111111111112222222222222222'
         DC    C'333333333333333344444444444444445555555555555555'
         DC    C'666666666666666677777777777777778888888888888888'
         DC    C'9999999999999999AAAAAAAAAAAAAAAABBBBBBBBBBBBBBBB'
         DC    C'CCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEE'
         DC    C'FFFFFFFFFFFFFFFF'
.SKIP1   AIF   ('&NAME2' EQ '').SKIP2
&NAME2   DC    C'0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF'
         DC    C'0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF'
         DC    C'0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF'
         DC    C'0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF'
         DC    C'0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF'
         DC    C'0123456789ABCDEF'
.SKIP2   AIF   (N'&PATTERN EQ 0).END
&X(1)    SETC  '0'
&X(2)    SETC  '1'
&X(3)    SETC  '2'
&X(4)    SETC  '3'
&X(5)    SETC  '4'
&X(6)    SETC  '5'
&X(7)    SETC  '6'
&X(8)    SETC  '7'
&X(9)    SETC  '8'
&X(10)   SETC  '9'
&X(11)   SETC  'A'
&X(12)   SETC  'B'
&X(13)   SETC  'C'
&X(14)   SETC  'D'
&X(15)   SETC  'E'
&X(16)   SETC  'F'
&LPC     SETA  1
.LOOP    AIF   ('&PATTERN(&LPC)' EQ '').END
&NAME3   SETC  '&PATTERN(&LPC)'
         AIF   ('&PATTERN(&LPC+1)'(1,1) EQ '+' OR '&PATTERN(&LPC+1)'(1,X
               1) EQ '-').ERR
&H       SETA  &PATTERN(&LPC+1)
         AIF   (&H GT 128).ERR
         AIF   (&H LT 1).ERR
&K1      SETA  1
&K2      SETA  0
&D       SETA  0
&C1      SETA  &H/16
&C2      SETA  &C1*16
&C2      SETA  &H-&C2
&C1      SETA  &C1+1
.LOOP1   ANOP
&A       SETA  0
.LOOP2   ANOP
&A       SETA  &A+1
&B(&A)   SETC  ''
         AIF   (&A LT 13).LOOP2
&A       SETA  0
.LOOP3   ANOP
&A       SETA  &A+1
&D       SETA  &D+1
&K2      SETA  &K2+1
&C2      SETA  &C2+1
         AIF   (&K2 LT 17).P1
&K1      SETA  &K1+1
&K2      SETA  1
.P1      AIF   (&C2 LT 17).P2
&C1      SETA  &C1+1
&C2      SETA  1
.P2      ANOP
&B(&A)   SETC  '&X(&K1)&X(&K2)&X(&C1)&X(&C2)'
         AIF   (&D EQ &H).EXIT
         AIF   (&A LT 13).LOOP3
&NAME3   DC    X'&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)&B(9)&B(10)&B(X
               11)&B(12)&B(13)'
&NAME3   SETC  ''
         AGO   .LOOP1
.EXIT    ANOP
&NAME3   DC    X'&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)&B(9)&B(10)&B(X
               11)&B(12)&B(13)'
&LPC     SETA  &LPC+2
         AGO   .LOOP
.ERR     MNOTE 8,'ILLEGAL LENGTH ATTRIBUTE SPECIFIED IN HEXOUT MACRO.'
.END     MEND
         MACRO
         IECSDSL1 &PARA
         LCLA  &CTR
&CTR     SETA  1
.LOOP    AIF   (&CTR GT N'&PARA).ENDOFIT
         AIF   ('&PARA(&CTR)' EQ '1').FIRSTON
         AIF   ('&PARA(&CTR)' EQ '2').SECNDON
         AIF   ('&PARA(&CTR)' EQ '3').THIRDON
         AIF   ('&PARA(&CTR)' EQ '4').FORTHON
         AIF   ('&PARA(&CTR)' EQ '5').FIFTHON
         AGO   .ERROR
.FIRSTON ANOP
IECSDSL1 EQU   *                        FORMAT 1 DSCB
DS1DSNAM DS    11F                      DATA SET NAME
DS1FMTID DS    CL1                      FORMAT IDENTIFIER
DS1DSSN  DS    CL6                      DATA SET SERIAL NUMBER
DS1VOLSQ DS    CL2                      VOLUME SEQUENCE NUMBER
DS1CREDT DS    CL3                      CREATION DATE
DS1EXPDT DS    CL3                      EXPIRATION DATE
DS1NOEPV DS    CL1                      NUMBER OF EXTENTS ON VOLUME
DS1NOBDB DS    CL1                      NUMBER OF BYTES USED IN LAST
*                                          DIRECTORY BLOCK
         DS    CL1                      SPARE BYTE
DS1SYSCD DS    CL13                     SYSTEM CODE
DS1LREFD DS    CL3                      LAST REFERENCED DATE
         DS    CL4                      FUTURE USE
DS1DSORG DS    CL2                      DATA SET ORGANIZATION
DS1RECFM DS    CL1                      RECORD FORMAT
DS1OPTCD DS    CL1                      OPTION CODE
DS1BLKL  DS    CL2                      BLOCK LENGTH
DS1LRECL DS    CL2                      RECORD LENGTH
DS1KEYL  DS    CL1                      KEY LENGTH
DS1RKP   DS    CL2                      RELATIVE KEY POSITION
DS1DSIND DS    CL1                      DATA SET INDICATORS
DS1SCALO DS    CL4                      SECONDARY ALLOCATION
DS1LSTAR DS    CL3                      LAST USED TRACK AND RECORD ON
*                                          TRACK
DS1TRBAL DS    CL2                      AMOUNT OF SPACE REMAINING ON
*                                          LAST TRACK USED
         DS    CL2                      SPARE BYTES
DS1EXT1  DS    CL10                     FIRST EXTENT DESCRIPTION
*        FIRST BYTE                     EXTENT TYPE INDICATOR
*        SECOND BYTE                   EXTENT SEQUENCE NUMBER
*        THIRD - SIXTH BYTES            LOWER LIMIT
*        SEVENTH - TENTH BYTES         UPPER LIMIT
DS1EXT2  DS    CL10                     SECOND EXTENT DESCRIPTION
DS1EXT3  DS    CL10                     THIRD EXTENT DESCRIPTION
DS1PTRDS DS    CL5                      POINTER TO NEXT DSCB RECORD
&CTR     SETA  &CTR+1
         AGO   .LOOP
.SECNDON ANOP
IECSDSL2 EQU   *                        FORMAT 2 DSCB
         DS    CL1                      UNUSED (IN KEY)
DS22MIND DS    CL7                      ADDRESS OF 2ND LEVEL MASTER IND
DS2L2MEN DS    CL5                      LAST 2ND LEVEL MASTER IND ENTRY
DS23MIND DS    CL7                      ADDRESS OF 3RD LEVEL MASTER
*                                          INDEX
DS2L3MIN DS    CL5                      LAST 3RD LEVEL MASTER INDEX
*                                          ENTRY
         DS    CL19                     SPARE
* THE FOLLOWING FIELDS ARE CONTAINED IN THE DATA PORTION OF THE FORMAT
* 2DSCB:
DS2FMTID DS    CL1                     FORMAT ID
DS2NOLEV DS    CL1                      NUMBER OF INDEX LEVELS
DS2DVIND DS    CL1                      HIGH LEVEL INDEX DEVELOPMENT
*                                          INDICATOR
DS21RCYL DS    CL3                      FIRST DATA RECORD IN CYLINDER
DS2LTCYL DS    CL2                      LAST  DATA TRACK  IN CYLINDER
DS2CYLOV DS    CL1                      NUMBER OF TRACKS FOR CYLINDER
*                                          OVERFLOW
DS2HIRIN DS    CL1                      HIGHEST "R" ON HIGH-LEVEL INDEX
*                                          TRACK
DS2HIRPR DS    CL1                     HIGHEST @R@ ON HIGH-LEVEL INDEX
DS2HIROV DS    CL1                      HIGHEST "R" ON OVERFLOW TRACK
DS2RSHTR DS    CL1                      "R" OF LAST DATA RECORD ON
*                                          SHARED TRACK
         DS    CL2                      RESERVED FOR FUTURE USE
DS2TAGDT DS    CL2                      TAG DELETION COUNT
DS2RORG3 DS    CL3                      NON-FIRST OVERFLOW REFERENCE
*                                          COUNT (RORG3)
DS2NOBYT DS    CL2                      NUMBER OF BYTES FOR HIGHEST-
*                                          LEVEL INDEX
DS2NOTRK DS    CL1                      NUMBER OF TRACKS FOR HIGHEST-
*                                          LEVEL INDEX
DS2PRCTR DS    CL4                      PRIME RECORD COUNT
DS2STIND DS    CL1                      STATUS INDICATORS
*        BIT   DESCRIPTION
*        0     LAST BLOCK FULL
*        1     LAST TRACK FULL
*        2-7   MUST REMAIN OFF
*
DS2CYLAD DS    CL7                      ADDRESS OF CYLINDER INDEX
DS2ADLIN DS    CL7                      ADDRESS OF LOWEST LEVEL MASTER
*                                          INDEX
DS2ADHIN DS    CL7                      ADDRESS OF HIGHEST LEVEL MASTER
*                                          INDEX
DS2LPRAD DS    CL8                      LAST PRIME DATA RECORD ADDRESS
DS2LTRAD DS    CL5                      LAST TRACK INDEX ENTRY ADDRESS
DS2LCYAD DS    CL5                      LAST CYLINDER INDEX ENTRY
*                                          ADDRESS
DS2LMSAD DS    CL5                      LAST MASTER INDEX ENTRY ADDRESS
DS2LOVAD DS    CL8                      LAST INDEPENDENT OVERFLOW
*                                          RECORD ADDRESS
DS2BYOVL DS    CL2                      BYTES REMAINING ON OVERFLOW
*                                          TRACK
DS2RORG2 DS    CL2                      NUMBER OF INDEPENDENT OVERFLOW
*                                          TRACKS
DS2OVRCT DS    CL2                      OVERFLOW RECORD COUNT
DS2RORG1 DS    CL2                      CYLINDER OVERFLOW AREA COUNT
         DS    CL3                      SPARE
DS2PTRDS DS    CL5                      POINTER TO FORMAT 3 DSCB
&CTR     SETA  &CTR+1
         AGO   .LOOP
.THIRDON ANOP
IECSDSL3 EQU   *                        FORMAT 3 DSCB
         DS    CL4                      UNUSED (IN KEY)
DS3EXTNT DS    CL40                     EXTENT (IN KEY)
DS3FMTID DS    CL1                      FORMAT IDENTIFIER
DS3ADEXT DS    CL90                     ADDITIONAL EXTENT
DS3PTRDS DS    CL5                      POINTER TO NEXT DSCB
&CTR     SETA  &CTR+1
         AGO   .LOOP
.FORTHON ANOP
IECSDSF4 EQU   *                        FORMAT 4 DSCB
DS4IDFMT DS    CL1                      FORMAT ID
DS4HPCHR DS    CL5                      HIGHEST PRIME CCHHR
DS4DSREC DS    CL2                      AVAILABLE DSCB RECORDS
DS4HCCHH DS    CL4                      HIGHEST CCHH OF ALTERNATE TRKS
DS4NOATK DS    CL2                      NUMBER OF ALTERNATE TRACKS
DS4VTOCI DS    CL1                      VTOC INDICATORS
*        BIT             DESCRIPTION
*        O               IF ON INDICATES THAT EITHER NO FORMAT 5 DSCB'S
*                        EXIST, OR THAT THEY DO NOT REFLECT THE TRUE
*                        STATUS OF THE VOLUME
*        1-7             SPARE
DS4NOEXT DS    CL1                      NUMBER OF EXTENTS
         DS    CL2                      RESERVED FOR FUTURE USE
DS4DEVCT DS    0CL14                   DEVICE CONSTANTS
DS4DEVSZ DS    CL4                      DEVICE SIZE
DS4DEVTK DS    CL2                      DEVICE TRACK LENGTH
DS4DEVOV DS    0CL3                    DEVICE RECORD OVERHEAD
DS4DEVI  DS    CL1                     FOR KEYED RECORD NOT LAST ONE
DS4DEVL  DS    CL1                     FOR KEYED RECORD LAST ONE
DS4DEVK  DS    CL1                      CONSTANT TO BE SUBTRACTED IF
*                                          RECORD IS UNKEYED
DS4DEVFG DS    CL1                      FLAG BYTE
*        BIT                  DESCRIPTION
*        7                    A TOLERANCE FACTOR MUST BE APPLIED TO ALL
*                             BUT THE LAST RECORD ON THE TRACK
*        6                    CC AND HH MUST BE USED AS 1 BYTE VALUES
*                                AS IN THE CASE OF THE 2321
DS4DEVTL DS    CL2                     DEVICE TOLERANCE
DS4DEVDT DS    CL1                      NUMBER OF DSCB'S PER TRACK
DS4DEVDB DS    CL1                      NUMBER OF DIRECTORY BLOCKS PER
*                                          TRACK
         DS    CL29                     SPARE
DS4VTOCE DS    CL10                     VTOC EXTENT
         DS    CL25                     SPARE
&CTR     SETA  &CTR+1
         AGO   .LOOP
.FIFTHON ANOP
IECSDSF5 EQU   *                        FORMAT 5 DSCB
DS5KEYID DS    CL4                      KEY IDENTIFICATION
DS5AVEXT DS    CL5                      AVAILABLE EXTENT
DS5EXTAV DS    CL35                     AVAILABLE EXTENTS, IN KEY
DS5FMTID DS    CL1                      FORMAT IDENTIFIER
DS5MAVET DS    CL90                    AVAILABLE EXTENTS
DS5PTRDS DS    CL5                      POINTER TO NEXT FORMAT 5 DSCB
&CTR     SETA  &CTR+1
         AGO   .LOOP
.ERROR   MNOTE 7,'***INCORRECT FORMAT NUMBER'
.ENDOFIT MEND
         MACRO
         IKJPPL#
.* RELEASE 20 SUPPORT CODE -- 20035
PPL      EQU       *
*
*   SYS3.MACLIB
*
***********************************************************************
*    THE PARSE PARAMETER LIST (PPL) IS A LIST OF ADDRESSES PASSED     *
*    FROM THE INVOKER TO PARSE VIA REGISTER 1                         *
***********************************************************************
         SPACE
PPLUPT   DS    A        PTR TO UPT
PPLECT   DS    A        PTR TO ECT
PPLECB   DS    A        PTR TO CP'S ECB
PPLPCL   DS    A        PTR TO PCL
PPLANS   DS    A        PTR TO ANS PLACE
PPLCBUF  DS    A        PTR TO CMD BUFFER
PPLUWA   DS    A        PTR TO USER WORK AREA (FOR VALIDITY CK RTNS)
**/
         MEND
DMOD     ENTER (14,12),12,(,LENGTH)
         LR    R11,R1   LOAD A(CPPL)
         USING CPPL,R11
         USING SP0,R13
         EJECT                                                   P.H.H.
*              USER SPECIFIES AS THE FIRST POSITIONAL            P.H.H.
*              PARAMETER OF THE COMMAND A THREE CHARACTER        P.H.H.
*              CODE WHICH GOVERNS ACCESS TO THE COMMAND.         P.H.H.
*                                                                P.H.H.
*              THE FIRST DIGIT IS NUMBER BETWEEN ZERO AND        P.H.H.
*              NINE WHICH WHEN ADDED TO THE HOUR OF THE          P.H.H.
*              DAY MUST EQUAL THE LAST TWO DIGITS.               P.H.H.
         SPACE 3                                                 P.H.H.
         L     R1,CPPLCBUF              COMMAND BUFFER ADDR.     P.H.H.
         LA    R2,4                     OFFSET TO COMMAND        P.H.H.
         AH    R2,2(R1)                 OFFSET TO POSIT. PARAM   P.H.H.
         AR    R2,R1                    ADDRESS OF POSIT. PARAM  P.H.H.
         CLI   3(R2),C' '               Q/PARAM END BY SPACE     P.H.H.
         BNE   BADUSER                  NO                       P.H.H.
         CLI   0(R2),C'0'               Q/FIRST CHARACTER NUM.   P.H.H.
         BL    BADUSER                  NO                       P.H.H.
         CLI   0(R2),C'9'                                        P.H.H.
         BH    BADUSER                                           P.H.H.
         CLI   1(R2),C'0'               Q/SECOND CHARACTER NUM.  P.H.H.
         BL    BADUSER                                           P.H.H.
         CLI   1(R2),C'9'                                        P.H.H.
         BH    BADUSER                                           P.H.H.
         CLI   2(R2),C'0'               Q/THIRD CHARACTER NUM.   P.H.H.
         BL    BADUSER                  NO                       P.H.H.
         CLI   2(R2),C'9'                                        P.H.H.
         BH    BADUSER                                           P.H.H.
         PACK  DIGIT(1),0(1,R2)         PACK FIRST NUMBER        P.H.H.
         PACK  HOUR(2),1(2,R2)          PACK HOUR PLUS FST. NUM. P.H.H.
         SP    HOUR,DIGIT               COMPUTE HOUR             P.H.H.
         BM    BADUSER                  ERROR                    P.H.H.
         TIME  DEC                      GET TIME                 P.H.H.
         SRL   R0,20                    POSITION HOUR            P.H.H.
         STH   R0,HOD                   STORE HOUR-OF-DAY        P.H.H.
         OI    HOD+1,X'0F'              SET SIGN                 P.H.H.
         CP    HOD,HOUR                 CHECK AUTHORIZATION      P.H.H.
         BNE   BADUSER                  ERROR, USER UNAUTHORIZED P.H.H.
         L     R1,CPPLCBUF              COMMAND BUFFER ADDR.     P.H.H.
         LA    R2,4                     LENGTH OF POSIT. PARAM.  P.H.H.
         AH    R2,2(R1)                 ADD OFFSET OF COMMAND    P.H.H.
         STH   R2,2(R1)                 BYPASS PARSE OF POSIT.   P.H.H.
         EJECT                                                   P.H.H.
*
*  FILL IN PPL
*
         MVC   PPLUPT,CPPLUPT   MOVE A(UPT)
         MVC   PPLECT,CPPLECT   MOVE A(ECT)
         XC    ECB,ECB   INITIALIZE THE  ECB
         LA    R1,ECB
         ST    R1,PPLECB   STORE A(ECB)
         XR    R1,R1
         ST    R1,PPLUWA   INDICATE NO USER WORK AREA
         L     R1,PCLADDR
         ST    R1,PPLPCL   STORE A(PCL)
         LA    R1,ANSWER
         ST    R1,PPLANS   STORE A(PDL)
         MVC   PPLCBUF,CPPLCBUF   MOVE A(COMMAND BUFFER)
         LA    R1,SERIAL
         ST    R1,ADDR
         LA    R1,IECSDSL1
         ST    R1,ADDR+4
         LA    R1,PPL   LOAD A(PARAMETER LIST)
         LINK  EP=IKJPARS   LINK TO PARSE ROUTINE
         L     R10,ANSWER
         USING IKJPARMD,R10
         MVI   FLAGS,X'00'   INITIALIZE FLAGS
*
*  FLAGS - X'80' - UPDATE VTOC
*
         LA    R6,LINE   ADDRESS OF OUTPUT LINE
*
**  FIND FULL DATA SET NAME
         LA    R5,DSNAME
*
NEXTDSN  MVI   SERIAL,C' '   BLANK OUT VOLUME AND DSN FIELDS
         MVC   SERIAL+1(49),SERIAL
         L     R1,0(R5)   LOAD A(DSNAME FIELD)
         LH    R2,4(R5)   LOAD L'DSNAME
         BCTR  R2,R0   DECRIMENT LENGTH
         TM    6(R5),X'40'   TEST FOR QUOTES
         BO    MOVENAME   DSNAME IN QUOTES
*
*  FIND USERID AND COMBINE IT WITH SUPPLIED DSNAME
*
         L     R3,CPPLPSCB   LOAD A(PSCB)
         MVC   DS1DSNAM(7),0(R3)   MOVE USERID
         XR    R4,R4
         IC    R4,7(R3)   LOAD L'(NON-BLANK PORTION)
         LA    R4,DS1DSNAM(R4)
         MVI   0(R4),C'.'   INSERT QUALIFYING PERIOD
         EX    R2,TSODSN    MOVE DSNAME
         B     FNDVOL
MOVENAME EX    R2,OSDSN   MOVE DSNAME
*
**  FIND VOLUME SERIAL NUMBER
*
FNDVOL   TM    VOLNUM+6,X'80'   TEST FOR PRESENCE OF PARAMETER
         BZ    CHKCAT
         LH    R1,VOLNUM+4   LOAD L'(VOLUME SERIAL)
         L     R2,VOLNUM   LOAD A(VOLUME SERIAL)
         BCTR  R1,R0   DECRIMENT
         EX    R1,VOLMOVE   MOVE VOLUME SERIAL NO.
         B     RDDSCB
*
*  SEARCH CATOLOG FOR VOLUME SERIAL NUMBER
*
CHKCAT   LA    R1,ADDR   LOAD A(PARM LIST)
         L     R15,=V(FNDVOL)
         BALR  R14,R15   FIND VOLUME SERIAL NUMBER
         STC   R15,RC   STORE RETURN CODE
         LTR   R15,R15   CHECK RETURN CODE
         BNZ   CATERR   ERROR OR NOT FOUND
*
**  READ THE DSCB
*
RDDSCB   LA    R1,ADDR   LOAD A(PARM LIST)
         L     R15,=V(RDFMT1)
         BALR  R14,R15
*
**  CHECK RETURN CODE
*
         STC   R15,RC
         B     *+4(R15)   BRANCH TO CORRECT BRANCH
         B     RDOK   READ WAS SUCCESSFUL
         B     NOTMNT   VOLUME NOT MOUNTED
         B     DSNOTFND   DATA SET NOT FOUND
         B     RDERR   ERROR WHILE READING VTOC
*
**  CHANGE DSCB
*
*  CHECK BLKSIZE
*
RDOK     TM    BLKLEN+6,X'80'   CHECK IF SPECIFIED
         BZ    CHKLRECL   NOT SPECIFIED
         L     R2,BLKLEN   LOAD A(BLKLEN)
         LH    R1,BLKLEN+4   LOAD L'BLKLEN)
         BCTR  R1,R0   DECRIMENT
         EX    R1,PACK
         CVB   R1,WORK
         C     R1,=F'32760'   VERIFY LENGTH
         BH    BLKERR   TOO LARGE
         STH   R1,DS1BLKL   STORE BLKSIZE
         OI    FLAGS,X'80'   UPDATE VTOC
*
*  CHECK LRECL
*
CHKLRECL TM    RECLEN+6,X'80'   CHECK IF SPECIFIED
         BZ    CHKRECFM   NOT SPECIFIED
         L     R2,RECLEN   LOAD A(LRECL)
         LH    R1,RECLEN+4   LOAD L'LRECL
         BCTR  R1,R0   DECRIMENT
         EX    R1,PACK
         CVB   R1,WORK
         C     R1,=F'32760'   VERIFY LENGTH
         BH    LENERR
         STH   R1,DS1LRECL   STORE NEW LRECL
         OI    FLAGS,X'80'   UPDATE VTOC
*
*  CHECK RECFM
*
CHKRECFM TM    FMTYPE+6,X'80'   CHECK IF SPECIFIED
         BZ    CHKKEYL   NOT SPECIFIED
         L     R2,FMTYPE   LOAD A(RECFM)
         LH    R1,FMTYPE+4   LOAD L'RECFM
         NI    DS1RECFM,X'20'   INITIALIZE FIELD - LEAVE 'T' PARM ALONE
CHKREC1  CLI   0(R2),C'F'   FIND RECORD TYPE
         BE    RECF
         CLI   0(R2),C'V'
         BE    RECV
         CLI   0(R2),C'U'
         BE    RECU
         CLI   0(R2),C'B'   TEST FOR BLOCKING
         BE    RECB
         CLI   0(R2),C'S'   TEST FOR STANDARD BLOCKS OR SPANNING
         BE    RECS
         CLI   0(R2),C'A'   TEST FOR CARRAGE CONTROL
         BE    RECA
         CLI   0(R2),C'M'
         BE    RECM
         B     RECFMERR   ILLEGAL RECFM CODE
RECF     TM    DS1RECFM,X'C0'   VERIFY NOT PREVIOUSLY SET
         BNZ   RECFMERR   CODE ALREADY EXISTS
         OI    DS1RECFM,X'80'   SET CODE
         B     RECDECRI
RECV     TM    DS1RECFM,X'C0'   VERIFY NOT PREVIOUSLY SET
         BNZ   RECFM   CODE ALREADY EXISTS
         OI    DS1RECFM,X'40'   SET CODE
         B     RECDECRI
RECU     TM    DS1RECFM,X'DF'   VERIFY ONLY 'T' SET
         BNZ   RECFMERR   CODE ALREADY EXISTS
         OI    DS1RECFM,X'C0'   SET CODE
         B     RECDECRI
RECB     TM    DS1RECFM,X'C0'   VERIFY NOT 'U'
         BO    RECFMERR   ILLEGAL CODE
         TM    DS1RECFM,X'10'   VERIFY NOT PREVIOUSLY SET
         BO    RECFMERR
         OI    DS1RECFM,X'10'   SET CODE
         B     RECDECRI
RECS     TM    DS1RECFM,X'C0'   VERIFY NOT 'U'
         BO    RECFMERR   ILLEGAL CODE
         TM    DS1RECFM,X'08'   VERIFY NOT PREVIOUSLY SET
         BO    RECFMERR
         OI    DS1RECFM,X'08'   SET CODE
         B     RECDECRI
RECA     TM    DS1RECFM,X'C0'   VERIFY NOT 'U'
         BO    RECFMERR   ILLEGAL CODE
         TM    DS1RECFM,X'06'   VERIFY NOT PREVIOUSLY SET
         BNZ   RECFMERR   CODE ALREADY EXISTS
         OI    DS1RECFM,X'04'   SET CODE
         B     RECDECRI
RECM     TM    DS1RECFM,X'C0'   VERIFY NOT 'U'
         BO    RECFMERR   ILLEGAL CODE
         TM    DS1RECFM,X'06'   VERIFY NOT PREVIOUSLY SET
         BNZ   RECFMERR   CODE ALREADY EXISTS
         OI    DS1RECFM,X'02'   SET CODE
RECDECRI LA    R2,1(R2)   INCREMENT POINTER
         BCT   R1,CHKREC1   LOOP
         TM    DS1RECFM,X'C0'   FINAL VERIFICATION
         BZ    RECFMERR   RECORD TYPE NOT SET
         OI    FLAGS,X'80'   UPDATE VTOC
*
*  CHECK KEYLEN
*
CHKKEYL  TM    KEYNUM+6,X'80'   CHECK IF SPECIFIED
         BZ    CHKDSORG   NOT SPECIFIED
         L     R2,KEYNUM   LOAD A(KEYLEN)
         LH    R1,KEYNUM+4   LOAD L'KEYLEN
         BCTR  R1,R0   DECRIMENT
         EX    R1,PACK
         CVB   R1,WORK
         CH    R1,=H'255'   CHECK FOR MAXIMUM LENGTH
         BH    KEYERR
         STC   R1,DS1KEYL
         OI    FLAGS,X'80'   UPDATE VTOC
*
*  CHECK DSORG
*
CHKDSORG TM    ORGTYPE+6,X'80'   CHECK IF SPECIFIED
         BZ    CHKPSWRD   NOT SPECIFIED
         L     R2,ORGTYPE   LOAD A(DSORG)
         CLC   0(2,R2),=C'IS'   CHECK TYPES
         BE    DSOIS
         CLC   0(2,R2),=C'PS'
         BE    DSOPS
         CLC   0(2,R2),=C'DA'
         BE    DSODA
         CLC   0(2,R2),=C'PO'
         BE    DSOPO
         B     DSOERR
DSOIS    MVI   DS1DSORG,X'80'
         B     CHKUNMOV
DSOPS    MVI   DS1DSORG,X'40'
         B     CHKUNMOV
DSODA    MVI   DS1DSORG,X'20'
         B     CHKUNMOV
DSOPO    MVI   DS1DSORG,X'02'
CHKUNMOV LH    R1,ORGTYPE+4   LOAD L'DSORG
         OI    FLAGS,X'80'   UPDATE VTOC
         CH    R1,=H'3'
         BNE   CHKPSWRD
         CLI   2(R2),C'U'   TEST FOR UNMOVEABLE
         BNE   DSOERR
         OI    DS1DSORG,X'01'   SET CODE
*
*  CHECK PASSWORD PROTECTION CHARACTER
*
CHKPSWRD TM    PASWRD+6,X'80'   CHECK IF SPECIFIED
         BZ    CHKCDATE   NOT SPECIFIED
         OI    FLAGS,X'80'   UPDATE VTOC
         L     R2,PASWRD   LOAD A(PASSWORD PROTECT SYMBOL)
         CLI   0(R2),C'P'   CHECK FOR ADDING PROTECTION BIT
         BE    PROTECT
         CLI   0(R2),C'U'   CHECK FOR REMOVING PROTECTION BIT
         BE    UNPROTEC
         B     PSWDERR
PROTECT  OI    DS1DSIND,X'10'   SET PROTECTION BIT
         B     CHKCDATE
UNPROTEC NI    DS1DSIND,X'EF'   REMOVE PROTECTION BIT
*
*  CHECK CREATION DATE
*
CHKCDATE TM    CRDATE+6,X'80'   CHECK IF SPECIFIED
         BZ    CHKEDATE   NOT SPECIFIED
         OI    FLAGS,X'80'   UPDATE VTOC
         L     R2,CRDATE   LOAD A(CDATE)
         LH    R1,CRDATE+4   LOAD L'CDATE
         BAL   R3,DATE   CONVERT DATE
         LTR   R15,R15   CHECK RETURN
         BNZ   CDATERR
         MVC   DS1CREDT(3),WORK1   STORE CREATION DATE
*
*  CHECK EXPIRATION DATE
*
CHKEDATE TM    EXDATE+6,X'80'   CHECK IF SPECIFIED
         BZ    CHKRDATE
         OI    FLAGS,X'80'   UPDATE VTOC
         L     R2,EXDATE   LOAD A(EDATE)
         LH    R1,EXDATE+4   LOAD L'EDATE
         BAL   R3,DATE   CONVERT DATE
         LTR   R15,R15   CHECK RETURN
         BNZ   EDATERR
         MVC   DS1EXPDT(3),WORK1   STORE EXPIRATION DATE
         B     CHKRDATE
*
*  CHECK LAST REFERNECED DATE
*
CHKRDATE TM    LRDATE+6,X'80'   CHECK IF SPECIFIED
         BZ    CHKADDR
         OI    FLAGS,X'80'   UPDATE VTOC
         L     R2,LRDATE   LOAD A(EDATE)
         LH    R1,LRDATE+4   LOAD L'EDATE
         BAL   R3,DATE   CONVERT DATE
         LTR   R15,R15   CHECK RETURN
         BNZ   RDATERR
         MVC   DS1LREFD(3),WORK1   STORE EXPIRATION DATE
         B     CHKADDR
*
*  DATE CONVERSION ROUTINE
*
DATE     CH    R1,=H'5'   CHECK LENGTH OF INPUT
         BE    DATE1   NORMAL DATE
         CH    R1,=H'1'   CHECK FOR STAR
         BNE   DATERR
         CLI   0(R2),C'*'
         BNE   DATERR
         TIME  TU  ASKING FOR YESTERDAY'S DATE - FIRST GET TODAY'S DATE
         ST    R1,WORK   DATE (00YYDDDF) RETURNED IN R1
         SP    WORK(4),ONE(1)   CHANGE TO YESTERDAY'S DATE
         OI    WORK+3,X'0F'   CORRECT SIGN
         UNPK  WORK1(5),WORK+1(3)   PUT IN SAME FORMAT AS NORMAL INPUT
         LA    R2,WORK1
DATE1    LA    R1,1   LOAD DECRIMENTED L'YEAR
         EX    R1,PACK   CONVERT YEAR TO BINARY
         CVB   R0,WORK
         LA    R1,2   LOAD DECRIMENTED L'DAY
         LA    R2,2(R2)   INCREMENT POINTER
         EX    R1,PACK   CONVERT DAY TO BINARY
         CVB   R1,WORK
         SLL   R1,16   COMBINE YEAR AND DAY
         SRDL  R0,8
         ST    R1,WORK1
         XR    R15,R15   INDICATE NORMAL COMPLETION
         BR    R3   RETURN
DATERR   LA    R15,1   INDICATE ERROR
         BR    R3
*
*  CHECK ADDRESS REQUEST
*
CHKADDR  TM    ADDRESS+1,X'01'   CHECK FOR PRESENCE OF ADDRESS PARM
         BZ    WRTDSCB   NOT PRESENT
         MVC   LINE(29),ADDRHDR
         MVC   TRWORK(5),DADDR+3
         MVC   TRWORK+5(5),TRWORK
         TR    TRWORK(5),PAT1
         TR    TRWORK+5(5),PAT2
         MVC   LINE+7(10),PAT3
         TR    LINE+7(10),TRWORK
         MVC   LINE+20(6),SERIAL
         MVC   LINE+29(44),DS1DSNAM
         TPUT  (R6),73
*
**  DSCB MODIFICATIONS COMPLETE - RETURN DSCB TO VTOC
*
WRTDSCB  LA    R1,ADDR   LOAD A(PARM LIST)
         TM    FLAGS,X'80'   TEST TO UPDATE VTOC
         BZ    WRTOK
         L     R15,=V(WRTFMT1)
         BALR  R14,R15   REWRITE DSCB
*
**  CHECK RETURN CODES
*
         STC   R15,RC   STORE RETURN CODE
         B     *+4(R15)   BRANCH TO CORRECT BRANCH
         B     WRTOK   WRITE WAS SUCCESSFUL
         B     NOTMNT   VOLUME NOT MOUNTED
         B     DSNOTFND   DATA SET NOT FOUND ON SPECIFIED VOLUME
         B     RDERR   ERROR WHILE TRYING TO READ VTOC
         B     DSNOTFND   BAD CCTTR ADDRESS
         B     WRTERR   ERROR ENCOUNTERED WHILE RETURNING DSCB TO VTOC
*
**  SUCCESSFUL COMPLETION OF REQUEST - RETURN NORMALLY
*
WRTOK    MVI   RC,0   INSERT RETURN CODE
CHKPDE   CLI   24(R5),X'FF'   CHECK FOR END OF CHAIN
         BE    RETURN
         NI    FLAGS,X'7F'   RESET UPDATE BIT
         L     R5,24(R5)   A(PDE FOR NEXT DSNAME)
         B     NEXTDSN
*                                                                P.H.H.
**       USER NOT AUTHORIZED, ABEND HIM                          P.H.H.
*                                                                P.H.H.
BADUSER  LM    R0,R15,0(R0)                                      P.H.H.
         B     0(R0)                    LET USER 0C1             P.H.H.
*
**  ERRORS
*
NOTMNT   MVC   LINE(6),SERIAL
         MVC   LINE+6(L'NMNTMSG),NMNTMSG
         MVC   LINE+6+L'NMNTMSG(44),DS1DSNAM
         TPUT  (R6),L'NMNTMSG+50
         B     CHKPDE
         SPACE 3
DSNOTFND MVC   LINE(6),SERIAL
         MVC   LINE+6(L'NFNDMSG),NFNDMSG
         MVC   LINE+6+L'NFNDMSG(44),DS1DSNAM
         TPUT  (R6),L'NFNDMSG+50
         B     CHKPDE
         SPACE 3
RDERR    MVC   LINE(6),SERIAL
         MVC   LINE+6(L'RDMSG),RDMSG
         MVC   LINE+6+L'RDMSG(44),DS1DSNAM
         TPUT  (R6),L'RDMSG+50
         B     CHKPDE
         SPACE 3
WRTERR   MVC   LINE(6),SERIAL
         MVC   LINE+6(L'WRTMSG),WRTMSG
         MVC   LINE+6+L'WRTMSG(44),DS1DSNAM
         TPUT  (R6),L'WRTMSG+50
         B     CHKPDE
         SPACE 3
CATERR   MVC   LINE(L'CATMSG),CATMSG
         MVC   LINE+L'CATMSG(44),DS1DSNAM
         TPUT  (R6),L'CATMSG+44
         B     CHKPDE
         SPACE 3
*
**  UNRECOVERABLE ERRORS - MUST TERMINATE
*
BLKERR   TPUT  BLKMSG,L'BLKMSG
         MVI   RC,2
         B     RETURN
LENERR   TPUT  LENMSG,L'LENMSG
         MVI   RC,2
         B     RETURN
RECFMERR TPUT  RFMSG,L'RFMSG
         MVI   RC,2
         B     RETURN
KEYERR   TPUT  KEYMSG,L'KEYMSG
         MVI   RC,2
         B     RETURN
DSOERR   TPUT  DOMSG,L'DOMSG
         MVI   RC,2
         B     RETURN
PSWDERR  TPUT  PSWDMSG,L'PSWDMSG
         MVI   RC,2
         B     RETURN
CDATERR  TPUT  CDTEMSG,L'CDTEMSG
         MVI   RC,2
         B     RETURN
EDATERR  TPUT  EDTEMSG,L'EDTEMSG
         MVI   RC,2
         B     RETURN
RDATERR  TPUT  RDTEMSG,L'RDTEMSG
         MVI   RC,2
         B     RETURN
         B     RETURN
*
**  RETURN
*
RETURN   XR    R15,R15
         IC    R15,RC   INSERT RETURN CODE
         LEAVE EQ
*
**  OBJECTS OF EX INSTRUCTIONS
*
PCLADDR  DC    A(PCL)
TSODSN   MVC   1(0,R4),0(R1)   MOVE TSO-TYPE DSNAME
OSDSN    MVC   DS1DSNAM(0),0(R1)    MOVE FULL DSNAME
VOLMOVE  MVC   SERIAL(0),0(R2)   MOVE VOLUME SERIAL NUMBER
PACK     PACK  WORK(8),0(0,R2)   UNIVERSAL PACK INSTRUCTION
*
**  ERROR MESSAGES
*
NMNTMSG  DC    CL17' - NOT MOUNTED - '
NFNDMSG  DC    CL26' - VOLUME SEARCH FAILED - '
RDMSG    DC    CL21' - VTOC READ ERROR - '
WRTMSG   DC    CL23' - VTOC UPDATE ERROR - '
CATMSG   DC    CL17'NOT CATALOGUED - '
BLKMSG   DC    CL13'BLKSIZE ERROR'
LENMSG   DC    CL11'LRECL ERROR'
RFMSG    DC    CL11'RECFM ERROR'
KEYMSG   DC    CL12'KEYLEN ERROR'
DOMSG    DC    CL11'DSORG ERROR'
PSWDMSG  DC    CL22'PASSWORD OPERAND ERROR'
CDTEMSG  DC    CL19'CREATION DATE ERROR'
EDTEMSG  DC    CL21'EXPIRATION DATE ERROR'
RDTEMSG  DC    CL26'LAST REFERENCED DATE ERROR'
ADDRHDR  DC    CL29'ADDR -            -        - '
ONE      DC    PL1'1'
         HEXOUT PAT1,PAT2,(PAT3,5)
         EJECT
*
**  PARAMETER CONTROL LIST
*
         SPACE 2
PCL      IKJPARM
         SPACE 2
         SPACE 2
DSNAME   IKJPOSIT   DSNAME,LIST,PROMPT='DATA SET NAME'
         SPACE 2
BLKSIZE  IKJKEYWD
         SPACE 2
         IKJNAME    'BLKSIZE',SUBFLD=BLOCK
         SPACE 2
LRECL    IKJKEYWD
         SPACE 2
         IKJNAME    'LRECL',SUBFLD=RECORD
         SPACE 2
RECFM    IKJKEYWD
         SPACE 2
         IKJNAME    'RECFM',SUBFLD=FMT
         SPACE 2
KEYLEN   IKJKEYWD
         SPACE 2
         IKJNAME    'KEYLEN',SUBFLD=KEY
         SPACE 2
DSORG    IKJKEYWD
         SPACE 2
         IKJNAME    'DSORG',SUBFLD=ORG
         SPACE 2
CDATE    IKJKEYWD
         SPACE 2
         IKJNAME    'CDATE',SUBFLD=CDTE
         SPACE 2
EDATE    IKJKEYWD
         SPACE 2
         IKJNAME    'EDATE',SUBFLD=EDTE
         SPACE 2
RDATE    IKJKEYWD
         SPACE 2
         IKJNAME    'RDATE',SUBFLD=RDTE
         SPACE 2
PASSWORD IKJKEYWD
         SPACE 2
         IKJNAME    'PASSWORD',SUBFLD=PSWD
         SPACE 2
VOLUME   IKJKEYWD
         SPACE 2
         IKJNAME    'VOLUME',SUBFLD=VOL
         SPACE 2
ADDRESS  IKJKEYWD
         SPACE 2
         IKJNAME   'ADDRESS'
         EJECT
*
*  SUBFIELDS
*
         SPACE 2
BLOCK    IKJSUBF
         SPACE 2
BLKLEN   IKJIDENT   'NUMBER',MAXLNTH=5,FIRST=NUMERIC,OTHER=NUMERIC,PROMX
               PT='BLOCK SIZE'
         SPACE 2
RECORD   IKJSUBF
         SPACE 2
RECLEN   IKJIDENT   'NUMBER',MAXLNTH=5,FIRST=NUMERIC,OTHER=NUMERIC,PROMX
               PT='LOGICAL RECORD LENGTH'
         SPACE 2
FMT      IKJSUBF
         SPACE 2
FMTYPE   IKJIDENT   'SYMBOLS',MAXLNTH=4,PROMPT='RECFM',HELP='(F,V OR U)X
                (B) (S) (A OR M) ONLY'
         SPACE 2
KEY      IKJSUBF
         SPACE 2
KEYNUM   IKJIDENT   'NUMBER',MAXLNTH=3,FIRST=NUMERIC,OTHER=NUMERIC,PROMX
               PT='KEY LENGTH'
         SPACE 2
ORG      IKJSUBF
         SPACE 2
ORGTYPE  IKJIDENT   'SYMBOLS',MAXLNTH=3,PROMPT='DSORG',HELP='IS,ISU,PO,X
               POU,PS,PSU,DA OR DAU ONLY'
         SPACE 2
CDTE     IKJSUBF
         SPACE 2
CRDATE   IKJIDENT   'NUMBER',ASTERISK,MAXLNTH=5,FIRST=NUMERIC,OTHER=NUMX
               ERIC,PROMPT='CREATION DATE',HELP=('5 DIGIT JULIAN DATE OX
               R *','* FOR YESTERDAY''S DATE')
         SPACE 2
EDTE     IKJSUBF
         SPACE 2
EXDATE   IKJIDENT   'NUMBER',ASTERISK,MAXLNTH=5,FIRST=NUMERIC,OTHER=NUMX
               ERIC,PROMPT='EXPERATION DATE',HELP=('5 DIGIT JULIAN DATEX
                OR *','* FOR YESTERDAY''S DATE')
         SPACE 2
RDTE     IKJSUBF
         SPACE 2
LRDATE   IKJIDENT   'NUMBER',ASTERISK,MAXLNTH=5,FIRST=NUMERIC,OTHER=NUMX
               ERIC,PROMPT='LAST REF DATE',HELP=('5 DIGIT JULIAN DATE OX
                 R *','* FOR YESTERDAY''S DATE')
         SPACE 2
PSWD     IKJSUBF
         SPACE 2
PASWRD   IKJIDENT   'SYMBOLS',MAXLNTH=1,PROMPT='PASSWORD SET CHARACTER'X
               ,HELP='''P'' TO SET PASSWORD BIT OR ''U'' TO REMOVE PASSX
               WORD BIT'
         SPACE 2
VOL      IKJSUBF
         SPACE 2
VOLNUM   IKJIDENT   'IDENTIFIER',MAXLNTH=6,FIRST=ALPHANUM,OTHER=ALPHANUX
               M,PROMPT='VOLUME SERIAL NUMBER'
         IKJENDP
         IKJPSCB
         EJECT
*
*  COMMAND PROCESSOR PARAMETER LIST
*
         IKJCPPL
*                                         *
*** THE FOLLOWING DSECTS MAP SUB POOL 0 ***
*                                         *
SP0      DSECT
SAVEAREA DS    18F
ECB      DS    F
ANSWER   DS    F
ADDR     DS    2A
HOD      DS    H
DIGIT    DS    X
HOUR     DS    XL2
RC       DS    C   RETURN CODE
FLAGS    DS    C
LINE     DS    130C
TRWORK   DS    10C
         CNOP  2,4
SERIAL   DS    CL6   VOLUME SERIAL NUMBER
*
*  MAP FORMAT 1 DSCB
*
         IECSDSL1 1
DADDR    DS    CL8   DIRECT ACCESS ADDRESS
WORK     DS    D
WORK1    DS    D
*
*  PARSE PARAMETER LIST
*
         IKJPPL#
LENGTH   EQU   *-SP0   LENGTH OF SUB POOL 0
         END
