         TITLE 'C A T A L O G -   TSO CATALOG MAINTENANCE PROCESSOR'
         SPACE 2
         MACRO
&NAME    MSG   &TEXT
         LCLA  &A
&A       SETA  K'&TEXT-2+4
&NAME    DC    H'&A',H'0',C&TEXT
         MEND
         EJECT
         MACRO
&NAME    CLEAR &FIELD
         LCLC  &L
&L       SETC  'L'''
&NAME    MVI   &FIELD,X'40'
         MVC   &FIELD+1(&L&FIELD-1),&FIELD
         MEND
         EJECT
         MACRO
&NAME    SP3CHECK  &DUMMY
.*
.*  THIS MACRO WILL SET THE CONDITION CODE TO EQUAL IF THE
.*  OPERATING SYSTEM IS MVS/SP 1.3.0 OR HIGHER; OTHERWISE THE
.*  CODE WILL BE NOT EQUAL. REGISTER 15 IS DESTROYED.
.*
.*  HOWARD M. DEAN  05/26/83
.*
&NAME    L     15,16         OBTAIN MVS CVT POINTER
         L     15,1076(,15)  OBTAIN UCB LOOKUP SERVICE ROUTINE
         CLC   =C'IOSVSUCB',5(15)
*                            EQUAL IF MVS/SP 1.3.0 OR HIGHER
         MEND
         EJECT                                              *HMD 06/83*
         MACRO
&NAME    ENTER
&NAME    DS    0H
         STM   14,12,12(13) .      SAVE CALLING REGISTERS
         L     WORKR,4(R1) .       RESTORE WORK AREA ADDR
         LM    DATAR,BASE,BASES .  RESTORE BASE REGISTER
         L     R8,0(R1) .          LOAD PDS ADDRESS
         ST    OSAVE,VSAVE+4 .     CHAIN OLD SAVE AREA ADDR
         LR    R15,OSAVE .         SAVE OLD SAVE AREA ADDR
         LA    OSAVE,VSAVE .       LOAD NEW SAVE AREA ADDR
         ST    OSAVE,8(R15) .      CHAIN NEW SAVE AREA ADDR
         MEND
         EJECT
         MACRO
&NAME    EXIT
&NAME    DS    0H
         L     OSAVE,VSAVE+4
         RETURN (14,12),T,RC=(15)
         MEND
         TITLE 'C A T A L O G -   TSO CATALOG MAINTENANCE PROCESSOR'
R0       EQU   0                   REGISTER 0
R1       EQU   1                   REGISTER 1
R2       EQU   2                   REGISTER 2
R3       EQU   3                   REGISTER 3
R4       EQU   4                   REGISTER 4
R5       EQU   5                   REGISTER 5
R6       EQU   6                   REGISTER 6
R7       EQU   7                   REGISTER 7
R8       EQU   8                   REGISTER 8
LINK     EQU   9                   INTERNAL LINKAGE REGISTER
WORKR    EQU   10                  WORK AREA ADDRESS REGISTER
DATAR    EQU   11                  DATA AREA ADDRESS REGISTER
BASE     EQU   12                  BASE ADDRESS REGISTER
OSAVE    EQU   13                  O/S SAVE AREA ADDRESS
R14      EQU   14                  REGISTER 14
R15      EQU   15                  REGISTER 15
         SPACE 1
FCLIST   EQU   128                 BIT TO INDICATE CLIST
FCMD     EQU   64                  BIT TO INDICATE COMMAND
FNULL    EQU   32                  BIT TO INDICATE NULL LINE
FATTN    EQU   16                  BIT TO INDICATE ATTENTION
FCBUF    EQU   8                   BIT TO INDICATE CBUF INPUT
FEXIT    EQU   4                   BIT TO INDICATE EXIT REQUESTED
         SPACE 1
FINDEX   EQU   128                 BIT TO INDICATE INDEX
FCVOL    EQU   64                  BIT TO INDICATE CVOL
FSEQ     EQU   32                  BIT TO INDICATE SEQ NO
FUNIT    EQU   16                  BIT TO INDICATE UNIT
FALIAS   EQU   8                   BIT TO INDICATE ALIAS
FGEN     EQU   4                   BIT TO INDICATE GENERATION DS
FDSNX    EQU   2                   BIT TO INDICATE FIRST DSN RECV
         SPACE 1
LPAREN   EQU   C'('                LEFT PAREN
RPAREN   EQU   C')'                RIGHT PAREN
PERIOD   EQU   C'.'                PERIOD
BLANK    EQU   C' '                SPACE
FF       EQU   X'FF'               HIGH VALUE
         EJECT
***********************************************************************
*                                                                     *
* TITLE -      CATALOG     TSO CATALOG MAINTENANCE PROCESSOR          *
*                                                                     *
*                                                                     *
* RELEASE -    1.1         CATALOG RELEASE                            *
*                                                                     *
* AUTHOR -     MICHAEL LEE EMIGH                                      *
*              UNITED AIR LINES - EXOKF COMPUTER CENTER               *
*              1200 W. ALGONQUIN ROAD                                 *
*              ELK GROVE VILLAGE, ILLINOIS                            *
*              PHONE: 312-952-4371
*                                                                     *
*                                                                     *
* FUNCTION -   THE CATALOG COMMAND ALLOWS THE TSO USER TO REFERENCE   *
*              AND MAINTAIN THE OS CATALOG                            *
*              THE CATALOG COMMAND PROVIDES OPTIONS TO CATALOG OR     *
*              UNCATALOG A DATA SET, BUILD OR DELETE AN INDEX OR AN   *
*              ALIAS, BUILD A GENERATION DATA GROUP, CONNECT OR       *
*              RELEASE TWO VOLUMES, DISPLAY CATALOGED DATA SET VOLUME *
*              SERIAL NUMBERS, AND SCRATCH AND RENAME DATA SETS       *
*              RESIDING ONLINE DIRECT ACCESS DEVICES.                 *
*                                                                     *
* INPUT -      STANDARD LINKAGE CONVENTIONS                           *
*              REGISTER 1 - ADDRESS OF COMMAND PROCESSOR PARAMETER    *
*                           LIST
*                                                                     *
*                                                                     *
* OUTPUT -     RETURN TO TERMINAL MONITOR PROGRAM                     *
*              REGISTER 15 CONTAINS RETURN CODE AS FOLLOWS            *
*                 0 - NO ERRORS ENCOUNTERED                           *
*                >0 - LAST RETURN CODE FROM A FUNCTION                *
*                                                                     *
*                                                                     *
* ATTRIBUTES - REENTERANT, REUSABLE, REFRESHABLE                      *
*                                                                     *
* NOTES -      THIS ROUTINE INTERFACES TO THE OPERATION SYSTEM        *
*              BY THE USE OF CAMLST MACROS.                           *
*              UNDER SOME VERSIONS OF MVS, THESE MACROS ARE NOT       *
*              SUPPORTED.                                             *
*              ALSO, UNDER MVS, THERE IS NO (OR LIMITED) SUPPORT      *
*              OF ALIAS/INDEX BUILDING IN THE VSAM MASTER CATALOG.    *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
CATALOG  CSECT                     TSO CATALOG MAINTENANCE PROCESSOR
         SAVE  (14,12),T,*         SAVE CALLING REGISTERS
         LR    BASE,R15            LOAD BASE ADDRESS REGISTER
         USING CATALOG,BASE        GIVE BASE ADDRESS TO ASSEMBLER
         LR    R2,OSAVE            SAVE O/S SAVE AREA ADDR
         LR    R5,R1               SAVE CPPL ADDRESS
         L     DATAR,DATACONS      LOAD DATA AREA ADDRESS   *HMD 06/83*
         USING DATAREA,DATAR       GIVE DATA AREA ADDR TO ASSEMBLER
         L     R4,WASIZE           LOAD WORK AREA SIZE
         GETMAIN R,LV=(R4)         GET MAIN STORAGE FOR WORK AREA
         LR    WORKR,R1            LOAD WORK AREA ADDR REG
         USING WORKAREA,WORKR      GIVE WORK AREA ADDR TO ASSEMBLER
         LR    R0,R1               LOAD WORK AREA ADDRESS FOR CLEAR
         LR    R1,R4               LOAD WORK AREA LENGTH
         SR    R3,R3               CLEAR PAD CHARACTER AND ZERO LENGTH
         MVCL  R0,R2               CLEAR WORK AREA TO ZERO
         STM   DATAR,BASE,BASES    SAVE BASE REGISTERS
         ST    R2,SAVE+4           CHAIN OLD SAVE AREA
         LA    OSAVE,SAVE          LOAD NEW SAVE AREA ADDR
         ST    OSAVE,8(R2)         CHAIN NEW SAVE AREA
         LR    R3,R5               COPY CPPL ADDRESS TO R3
         SPACE 2                                            *HMD 06/83*
         L     R0,=A(VCBYTES)      LENGTH TO GET FOR VCBS   *HMD 06/83*
         GETMAIN R,LV=(0)          GET STORAGE FOR VCBS     *HMD 06/83*
         ST    R1,VCBPTR           SAVE POINTER             *HMD 06/83*
         L     R0,=A(VCBYTES)      REGET LENGTH             *HMD 06/83*
         AR    R1,R0               POINT TO END OF AREA     *HMD 06/83*
         ST    R1,VCBEND           SAVE END ADDRESS         *HMD 06/83*
         SPACE 2                                            *HMD 06/83*
         EJECT
         USING CPPL,R3             GIVE CPPL ADDR TO ASSEMBLER
         MVC   AUPT,CPPLUPT        SAVE UPT ADDR
         MVC   AECT,CPPLECT        SAVE ECT ADDR
         MVC   APSCB,CPPLPSCB      SAVE PSCB ADDR
         LA    R1,IOPLPARM         LOAD IOPL ADDRESS
         USING IOPL,R1             *
         MVC   IOPLECT,CPPLECT     MOVE ECT ADDR TO IOPL
         MVC   IOPLUPT,CPPLUPT     MOVE UPT ADDR TO IOPL
         LA    R0,ATTNECB          LOAD ATTENTION ECB ADDR
         ST    R0,IOPLECB          STORE IN IOPL
         LOAD  EPLOC=IKJPUTL       LOAD PUTLINE SERVICE ROUTINE
         ST    R0,APUTL            SAVE IKJPUTL EP ADDR
         LOAD EPLOC=IKJPTGT        LOAD PUTGET SERVICE ROUTINE
         ST    R0,APTGT            SAVE IKJPTGT EP ADDR
         LOAD  EPLOC=IKJSCAN       LOAD COMMAND SCAN ROUTINE
         ST    R0,ASCAN            SAVE IKJSCAN EP ADDR
         LOAD  EPLOC=DEVNAMET LOAD DEVICE NAME TABLE
         ST    R0,ADEVNT           SAVE DEVNAMET EP ADDR
         MVC   MSGENTER,MSGENT     MOVE IN ENTER MSG
         L     R4,AECT             LOAD ECT ADDRESS
         USING ECT,R4              SET ECT DSECT
         MVC   MSGENTER+5(8),ECTPCMD MOVE COMMAND NAME TO MSG
         TM    ECTSWS,128          TEST IF INPUT IN CMD BUFFER
         BO    CMD                 IF NOT THEN GO GET COMMAND
         MVC   ACBUF,CPPLCBUF       SAVE COMMAND BUFFER ADDR
         OI    FLAGS,FCMD+FCBUF    INDICATE COMMAND PRESENT
         B     CMD                 GO GET A NEW COMMAND
DATACONS DC    A(DATAREA)          ADDRESSIBLITY            *HMD 06/83*
         DROP  R3
         DROP  R4
         EJECT
OPTIONS  DS    0H                  DISPLAY OPTIONS FOR USER
         LA    R2,OPTNTBL          LOAD OPTION TABLE ADDRESS
         SPACE 2
OPTIONS0 DS    0H                  ADVANCE TO NEXT OPTION
         MVC   MSGTEXT1,0(R2)      MOVE TEXT TO TEMP BUFFER
         LA    R1,MSGTEXT1         LOAD TEMP BUFFER ADDR
         BAL   LINK,PUTLINE        BAL TO PUTLINE ROUTINE
         B     CMD                 RETURN HERE IF ATTENTION
         MVC   0(2,OSAVE),0(R2)    MOVE AND ALIGN OPT LENGTH
         LH    R1,0(OSAVE)         LOAD OPT LENGTH
         LA    R1,1(R1)            ROUND TO NEXT HALFWORD
         SRL   R1,1                MULTIPLE
         SLL   R1,1                TIMES 2
         AR    R2,R1               NEXT OPTION
         CLI   0(R2),FF            END OF LIST
         BNE   OPTIONS0            NO, REPEAT
         EJECT
CMD      DS    0H                  GET NEXT COMMAND
         MVI   ATTNECB,0           CLEAR ATTENTION ECB
         NI    FLAGS,FF-FATTN      DISALLOW ATTENTIONS
         TM    FLAGS,FEXIT         TEST IF EXIT REQUESTED
         BO    RETURN              IF YES THEN EXIT
         STAX  ,                   NULLIFY ATTN EXITS
         XC    CAMLIST(20),CAMLIST CLEAR CAM LIST AREA
         XC    VCB(256),VCB        CLEAR VOLUME CONTROL BLOCK
         SPACE 2                                            *HMD 06/83*
         TM    FLAGS,FCMD          COMMAND BUFFER AVAILABLE
         BO    CMD0                YES, GO ANALYZE
         LA    R1,MSGENTER         LOAD ENTER MSG ADDR
         BAL   LINK,PUTGET         BAL TO PUTGET ROUTINE
         B     FLUSH               ATTENTION ENTERED
         SPACE 2
CMD0     DS    0H                  SET UP FOR SUBCOMMAND SCAN
         NI    FLAGS,FF-FCMD       CLEAR COMMAND FLAG
         MVI   FLAGS+1,0           CLEAR STATUS FLAGS
         TM    FLAGS,FCBUF         TEST IF CMD FROM INPUT BUFFER
         BZ    *+8                 IF NOT SKIP NEXT INSTRUCTION
         OI    FLAGS,FEXIT+FCMD    SET EXIT FLAG
         LA    R1,PARMLIST         LOAD PARM LIST ADDR
         USING CSPL,R1             SET CSPL DSECT
         MVC   CSPLUPT,AUPT        MOVE UPT ADDR TO CSPL
         MVC   CSPLECT,AECT        MOVE ECT ADDR TO CSPL
         LA    R0,ATTNECB          LOAD ATTENTION ECB ADDR
         ST    R0,CSPLECB          MOVE ATTN ECB ADDR TO CSPL
         MVI   ATTNECB,0           CLEAR ATTENTION ECB
         LA    R0,SCANAREA         LOAD SCAN ANSWER AREA ADDR
         ST    R0,CSPLOA           MOVE ADDR TO CSPL
         XC    SCANAREA,SCANAREA   CLEAR SCAN AREA
         LA    R0,R14SAVE          LOAD R14 SAVE AREA ADDR
         ST    R0,CSPLFLG          STORE IN CSPL
         XC    R14SAVE,R14SAVE     CLEAR R14 SAVE AREA
         MVC   CSPLCBUF,ACBUF      MOVE CMD BUF ADDR TO CSPL
         L     R15,ACBUF           LOAD COMMAND BUFFER ADDRESS
         LH    R14,2(R15)          LOAD OFFSET
         LA    R2,4(R14,R15)       POINT TO OFFSET
         LH    R3,0(R15)           LOAD LINE LENGTH
         SR    R3,R14              ADJUST FOR OFFSET
         SH    R3,=H'4'            MINUS 4 FOR PREFIX
         L     R15,ASCAN           LOAD CMD SCAN ADDR
         BALR  R14,R15             BAL TO INVOKE CMD SCAN
         LA    R1,SCANAREA         LOAD ANSWER AREA ADDR
         USING CSOA,R1             SET CSOA DSECT
         TM    CSOAFLG,CSOANOC     EMPTY BUFFER
         BO    CMD                 YES, STILL NEED CMD
         TM    CSOAFLG,CSOAVWP+CSOAVNP VALID COMMAND
         BNZ   CMD1                YES, GO CHECK
         LA    R1,MSGINVLD         INVALID CMD MSG
         B     CMD4                GO GET NEW CMD
         EJECT
CMD1     DS    0H                  CHECK A COMMAND
         L     R2,CSOACNM          LOAD COMMAND NAME ADDR
         LH    R3,CSOALNM          LOAD NAME LENGTH
         BCTR  R3,0                MINUS 1 FOR EXEC
         DROP  R1
         LA    R1,CMDLIST          LOAD CMD TABEL ADDR
         SR    R15,R15             SET UP FOR CMD SCAN
         SR    R14,R14             DITTO
         SPACE 2
CMD2     DS    0H                  SCAN FOR THE COMMAND
         IC    R15,8(R1)           LOAD CMD LENGTH
         CR    R15,R3              CHECK CMD LENGTH
         BNH   CMD3                *
         CLC   0(0,R1),0(R2)       COMPARE COMMANDS
         EX    R3,*-6              CHECK COMMAND NAME
         BE    CMD5                MATCH, MUST BE COMMAND
         SPACE 2
CMD3     DS    0H                  ADVANCE TO NEXT COMMAND
         LA    R1,16(R1)           NEXT ENTRY IN TABLE
         CLI   0(R1),FF            END OF TABLE
         BNE   CMD2                NO, CONTINUE
         LTR   R14,R14             COMMAND SELECTED?
         BNZ   CMD6                YES, GO CHECK
         LA    R1,MSGINVLD         CMD INVALID MSG
         SPACE 2
CMD4     DS    0H                  ERROR IN COMMAND
         MVC   MSGTEXT1,0(R1)      MOVE MAIN MSG TEXT
         LH    R15,MSGTEXT1        LOAD MSG LENGTH
         LA    R14,MSGTEXT1(R15)   POINT TO END OF MSG
         MVC   0(0,R14),0(R2)      MOVE INVALID CMD TO MSG
         EX    R3,*-6              EXECUTE FOR PROPER LENGTH
         LA    R15,1(R3,R15)       COMPUTE NEW MSG LENGTH
         STH   R15,MSGTEXT1        STORE IN MSG
         LA    R1,MSGTEXT1         LOAD NEW MSG ADDRESS
         SR    R0,R0               INDICATE NO SECOND LEVEL MSG
         BAL   LINK,ERRORMSG       WRITE ERROR MSG TO TERMNL
         NOP   0                   IGNORE ATTENTIONS
         TM    FLAGS,FCLIST        FROM CLIST?
         BO    FLUSH               YES, THEN PERMANENT ERROR
         B     CMD                 GO PRINT OPTIONS
         SPACE 2
CMD5     DS    0H                  GOT A VALID COMMAND
         LTR   R14,R14             PREVIOUS CMD SELECTED
         LR    R14,R1              SAVE CMD ADDR
         BZ    CMD3                NO, FIRST SELECTED
         LA    R1,MSGAMBIG         LOAD AMBIG. MSG ADDR
         B     CMD4                YES, THEN ERROR
         EJECT
CMD6     DS    0H                  VALID COMMAND
         MVC   APCL,12(R14)        SAVE PCL ADDRESS
         L     R1,8(R14)           GET COMMAND PROCESSOR ADDR
         ST    R1,ACMD             SAVE IT
         TM    APCL,X'40'          IGNORE OPTIONS?
         BO    CMD7                YES
         BAL   LINK,PARSE          GET THE COMMAND OPERANDS
         B     CMD                 ATTENTION ENTERED
         SPACE 2
CMD7     DS    0H                  CALL COMMAND
         XC    PARMLIST(20),PARMLIST CLEAR PARM LIST AREA
         STAX  ATTNX,USADDR=(WORKR),REPLACE=YES,IBUF=0,OBUF=0,         X
               MF=(E,PARMLIST)
         OI    FLAGS,FATTN         ALLOW ATTENTIONS
         L     R15,ACMD            LOAD COMMAND ADDRESS
         BR    R15                 LINK TO COMMAND PROCESSOR
         EJECT
ATTNX    DS    0H                  ATTENTION EXIT
         SAVE  (14,12)             SAVE CALLING REGS
         L     WORKR,8(R1)         LOAD WORK AREA ADDRESS
         LM    DATAR,BASE,BASES    LOAD BASE REGISTERS
         LA    R15,ASAVE           LOAD ATTENTION SAVE AREA ADDR
         ST    OSAVE,ASAVE+4       CHAIN OLD SAVE AREA
         ST    R15,8(OSAVE)        CHAIN NEW SAVE AREA
         LR    OSAVE,R15           LOAD NEW SAVE AREA ADDR
         TCLEARQ OUTPUT            CLEAR OUTPUT BUFFERS
         TM    FLAGS,FATTN         ATTENTIONS ALLOWED?
         BZ    ATTNX0              NO, EXIT
         TM    FLAGS,FEXIT         TEST IF EXIT FLAG ON
         BO    ATTNX0              IF YES THEN EXIT
         LA    R1,MSGENTER         LOAD OPT ENTER MSG ADDR
         BAL   LINK,PUTGET         GET USERS COMMAND RESPONSE
         NOP   0                   IGNORE ANOTHER ATTENTION
         TM    FLAGS,FNULL         NULL LINE ENTERED
         BO    ATTNX0              YES, JUST LEASE
         OI    FLAGS,FCMD          INDICATE COMMAND AVAILABLE
         POST  ATTNECB             POST ATTENTION ECB
         SPACE 2
ATTNX0   DS    0H                  ATTENTION EXIT
         SR    R15,R15             RETURN TO ZERO
         L     OSAVE,ASAVE+4
         RETURN (14,12),RC=(15)    RETURN TO O/S
         EJECT
VOL      DS    0H                  VOL COMMAND PROCESSOR
         OI    CAMLIST,68          INSERT CAMLIST LOCATE BITS
         LA    R0,VCB              LOAD VCB ADDRESS
         ST    R0,CAMLIST+12       STORE VCB ADDRESS IN CAMLIST
         LOCATE CAMLIST            ISSUE LOCATE MACRO
         ST    R15,RETCODE         SAVE RETURN CODE
         LTR   R15,R15             SUCCESSFUL?
         BZ    VOL2                YES
         LA    R14,8               RETURN CODE 8
         CR    R14,R15             DATA SET NOT CATLG?
         BE    VOL1                YES
         L     R1,LOCMSGL(R15)     LOAD LOCATE MSG ADDR
         BAL   LINK,PUTLINE        LINK TO PUTLINE ROUTINE
         NOP   0                   *
         B     CMD                 GO GET NEXT CMD
         SPACE 2
VOL1     DS    0H                  DATA SET IS NOT CATALOGED
         LH    R2,LDSNX            LOAD DSNAME LENGTH
         LA    R2,4(R2)            INCREMENT BY PREFIX LENGTH
         MVC   MSGTEXT1+4,DSNAMEX  MOVE DSNAME TO MSG AREA
         LA    R3,MSGTEXT1(R2)     POINT PAST DSNAME
         MVC   0(L'MSGNCAT,R3),MSGNCAT MOVE NOT CATLG MSG IN
         LA    R2,L'MSGNCAT(R2)    CORRECT LENGTH
         SLL   R2,16               SHIFT TO HIGH BYTES
         ST    R2,MSGTEXT1         STORE LENGTH IN MSG
         LA    R1,MSGTEXT1         LOAD MSG ADDRESS
         BAL   LINK,PUTLINE        LINK TO PUTLINE ROUTINE
         NOP   0                   *
         B     CMD                 GO GET NEXT CMD
         SPACE 2
VOL2     DS    0H                  *
         OI    FLAGS,FATTN         ALLOW ATTENTIONS
         TM    FLAGS+1,FGEN        TEST IF GENERATION DATA SET
         BZ    VOL3                NO, SKIP THIS PARA.
         LA    R2,48               ADD LINE PREFIX LENGTH
         SLL   R2,16               SHIFT TO HIGH BYTES
         ST    R2,MSGTEXT1         STORE IN MSG AREA
         MVC   MSGTEXT1+4(L'DSNAMEX),DSNAMEX MOVE DSN TO MSG AREA
         LA    R1,MSGTEXT1         LOAD MSG ADDRESS
         BAL   LINK,PUTLINE        LINK TO PUTLINE ROUTINE
         B     CMD                 ATTENTION ENTERED
         EJECT
VOL3     DS    0H                  PRINT OUT VOLUME SERIAL NMBRS
         LA    R1,MSGHVOL          LOAD VOLUME PRT HEADER
         BAL   LINK,PUTLINE        LINK TO PUTLINE ROUTINE
         B     CMD                 ATTENTION ENTERED
         CLEAR MSGTEXT1            CLEAR MSG AREA
         LA    R0,12               LOAD MSG LENGTH + PREFIX
         SLL   R0,16               SHIFT TO HIGH BYTES
         ST    R0,MSGTEXT1         STORE LENGTH IN MSG AREA
         LH    R2,VCBNVOLS         LOAD NUMBER OF VOLUMES
         LR    R3,R2               SAVE NUMBER OF VOLS      *HMD 07/81*
         CH    R3,=H'20'           LOAD VCB MAXIMUM         *HMD 07/81*
         BNH   *+8                 IF NOT HIGH THEN OK      *HMD 07/81*
         LA    R3,20               RESET VOL COUNT          *HMD 07/81*
         USING VCBFLD,R4           SET VCB FIELD DSECT      *HMD 07/81*
         LA    R4,VCBENT           LOAD FIRST ENTRY ADDR    *HMD 07/81*
         SPACE 2
VOL4     DS    0H                  VOLUME PRINT LOOP
         SR    R2,R3               DECREMENT VOL COUNT      *HMD 07/81*
VOL4A    MVC   MSGTEXT1+6(6),VCBVOL MOVE VOLSER TO MSG AREA *HMD 07/81*
         LA    R1,MSGTEXT1         LOAD MSG AREA ADDR
         BAL   LINK,PUTLINE        LINK TO PUTLINE ROUTINE
         B     CMD                 ATTENTION ENTERED
         LA    R4,12(R4)           ADVANCE TO NEXT FIELD
         BCT   R3,VOL4A            IF MORE THEN REPEAT
         LTR   R2,R2               ARE THERE MORE ENTRIES   *HMD 07/81*
         BZ    CMD                 GO GET NEXT CMD
VOL5     DS    0H                                           *HMD 07/81*
         OC    VCBTTR,VCBTTR       IS TTR FIELD ZERO?       *HMD 07/81*
         BZ    CMD                 YES, END OF VOLUME LIST  *HMD 07/81*
         OC    VCBCVOL,VCBCVOL     IS CVOL ENTRY ZERO?      *HMD 07/81*
         BZ    CMD                 ERROR IN CATLG STRUCTURE *HMD 07/81*
         XC    CAMLIST(20),CAMLIST CLEAR CAMLIST            *HMD 07/81*
         MVC   TTRX,VCBTTR         MOVE TTR TO SAFE PLACE   *HMD 07/81*
         MVC   XCVOL,VCBCVOL       MOVE CVOL VOLSER ALSO    *HMD 07/81*
         OI    CAMLIST,194         INDICATE BLOCK FORM      *HMD 07/81*
         LA    R0,TTRX             SAVE ADDRESS OF TTR      *HMD 07/81*
         ST    R0,CAMLIST+4        IN CAMLST                *HMD 07/81*
         LA    R0,XCVOL            SAVE ADDRESS OF CVOL VOLSER
         ST    R0,CAMLIST+8        IN CAMLIST               *HMD 07/81*
         LA    R0,VCB              SAVE ADDRESS OF AREA     *HMD 07/81*
         ST    R0,CAMLIST+12       IN CAMLST                *HMD 07/81*
         LOCATE CAMLIST            ISSUE LOCATE SVC         *HMD 07/81*
         LTR   R15,R15             WAS LOCATE SUCCESSFUL    *HMD 07/81*
         BZ    VOL6                YES CONTINUE             *HMD 07/81*
         LA    R1,MSGMCAT          LOCATE FAILED            *HMD 07/81*
         LA    R0,MSGLCAT          TELL THE USER SO         *HMD 07/81*
         BAL   LINK,ERRORMSG       PUT OUT ERROR MESSAGE    *HMD 07/81*
         NOP   0                   IGNORE ATTN INTERRUPTION *HMD 07/81*
         B     CMD                 GET NEXT COMMAND         *HMD 07/81*
VOL6     LH    R3,VCBNVOLS         LOAD NUMBER OF VOLS      *HMD 07/81*
         CH    R3,=H'20'           MORE THAN 20?            *HMD 07/81*
         BNH   *+8                 NO, DO ALL OF 'EM        *HMD 07/81*
         LA    R3,20               ONLY DO 20 AT A TIME     *HMD 07/81*
         LA    R4,VCBENT           POINT TO CURRENT ENTRY   *HMD 07/81*
         B     VOL4                CONTINUE LISTING         *HMD 07/81*
         EJECT
CATLG    DS    0H                  CATLG COMMAND PROCESSOR
         OI    CAMLIST,68          INSERT CAMLIST LOCATE BITS
         LA    R0,XVCB             LOAD EXTRA VCB ADDRESS
         ST    R0,CAMLIST+12       STORE VCB ADDRESS IN CAMLIST
         LOCATE CAMLIST            ISSUE LOCATE MACRO
         ST    R15,RETCODE         SAVE RETURN CODE
         LTR   R15,R15             IS DATA SET ALREADY CATALOGED?
         BZ    CATLG5              YES, THEN ERROR
         L     R3,VCBPTR           LOAD POINTER TO VCB      *HMD 06/83*
         LA    R4,2(,R3)           LOAD VCB ENTRIES ADDR    *HMD 06/83*
         LH    R3,0(R3)            LOAD NUMBER OF ENTRIES   *HMD 06/83*
         USING VCBFLD,R4           SET VCB FIELD DSECT
         TM    FLAGS+1,FUNIT       TEST IF UNIT ENTERED
         BO    CATLG0              YES
         MVC   UNIT,=XL4'32108003' MOVE IN DEFAULT UNIT
*  3400-6 DEFAULT UNIT - 06/29/83                           *HMD 06/83*
         CLI   VCBVOL,C'0'         NUMERIC
         BNL   CATLG0              YES, THEN TAPE DEFAULT
         MVC   UNIT,=XL4'3050200B' ELSE RESET TO DISK DEFAULT
*  3350 DEFAULT - 06/29/83                                  *HMD 06/83*
         SPACE 2
CATLG0   DS    0H                  WRITE MSG TO TERMINAL
         TM    FLAGS+1,FSEQ        TEST IF SEQUENCE NUMBER ENTERED
         BO    CATLG1              YES
         MVC   SEQNO,=H'1'         MOVE IN DEFAULT SEQUENCE NO
         SPACE 2
CATLG1   DS    0H                  *
         MVC   VCBSEQ,SEQNO        MOVE IN SEQUENCE NO
         MVC   VCBUNIT,UNIT        MOVE IN UNIT TYPE
         TM    FLAGS+1,FUNIT       TEST IF UNIT ENTERED
         BO    CATLG3              YES
         LA    R1,MSGUTAPE         LOAD TAPE DEFAULT MESSAGE
         TM    VCBUNIT+2,X'20'     TEST IF DIRECT ACCESS DEVICE
         BNO   CATLG2              IF NOT THEN ASSUME TAPE
         BAL   LINK,UCBCK          CHECK IF VOL SER IS ONLINE
         B     CATLG1A             RETURNS HERE IF NOT FOUND
         B     CATLG3              RETURNS HERE IF FOUND
CATLG1A  LA    R1,MSGUDA           LOAD DASD DEFAULT MESSAGE
*                                                           *HMD 06/83*
         SPACE 2
CATLG2   DS    0H                  *
         CLEAR MSGTEXT1            CLEAR TEXT AREA          *HMD 06/83*
         MVC   MSGTEXT1,0(R1)      SET UP DEFAULT MESSAGE
         LA    R1,MSGTEXT1         POINT TO MESSAGE
         LH    R15,MSGTEXT1        LOAD MSG TEXT LENGTH
         LA    R14,0(R1,R15)       POINT TO END OF MESSAGE
         MVC   0(6,R14),VCBVOL     MOVE VOL/SER TO MESSAGE TEXT
         LA    R15,6(,R15)         ADD IN VOL/SER LENGTH
         STH   R15,MSGTEXT1        SAVE MSG TEXT LENGTH
         BAL   LINK,PUTLINE        LINK AND PRINT LINE
         B     CMD                 RETURNS HERE IF ATTENTION
         EJECT
CATLG3   DS    0H                  *
         TM    VCBUNIT+2,X'20'     TEST IF DIRECT ACCESS DEVICE
         BNO   CATLG4              IF NOT THEN ASSUME TAPE
         XC    VCBSEQ,VCBSEQ       SET SEQUENCE UMBER TO ZERO
         SPACE 2
CATLG4   DS    0H                  *
         LA    R4,12(R4)           ADVANCE TO NEXT ENTRY
         BCT   R3,CATLG1           IF MORE ENTRIES REPEAT
         OI    CAMLIST,100         INSERT CATALOG CAMLIST BITS
         MVI   CAMLIST+1,64        INSERT FUNCTION BITS
         L     R0,VCBPTR           LOAD VCB ADDRESS         *HMD 06/83*
         ST    R0,CAMLIST+12       STORE VCB ADDRESS IN CAMLIST
         CATALOG CAMLIST           ISSUE CATALOG MACRO
         ST    R15,RETCODE         SAVE RETURN CODE
         L     R1,CATMSGL(R15)     LOAD MSG ADDRESS
         BAL   LINK,PUTLINE        LINK TO PUTLINE ROUTINE
         NOP   0                   IGNORE ATTENTIONS
         B     CMD                 GO GET NEXT COMMAND
         SPACE 2
CATLG5   DS    0H                  DATA SET IS ALREADY CATALOGED
         LH    R2,LDSNX            LOAD DSNAME LENGTH
         LA    R2,4(R2)            ADD MSG PREFIX LENGTH
         MVC   MSGTEXT1+4,DSNAMEX  MOVE DSNAME TO MSG AREA
         LA    R3,MSGTEXT1(R2)     POINT PAST DSNAME
         MVC   0(L'MSGACAT,R3),MSGACAT MOVE ALREADY CATLG MSG
         LA    R2,L'MSGACAT(R2)    ADJUST MSG LENGTH
         SLL   R2,16               SHIFT TO HIGH ORDER BYTES
         ST    R2,MSGTEXT1         STORE IN MSG AREA
         LA    R1,MSGTEXT1         LOAD MSG ADDRESS
         BAL   LINK,PUTLINE        LINK TO PUTLINE ROUTINE
         NOP   0                   IGNORE ATTENTIONS
         B     CMD                 GO GET NEXT COMMAND
         EJECT
DLTA     DS    0H                  DLTA COMMAND PROCESSOR
         MVI   CAMLIST+1,1         INSERT FUNCTION BYTES
         B     INDEX               GO BUILD CAMLIST
         SPACE 2
BLDA     DS    0H                  BLDA COMMAND PROCESSOR
         MVI   CAMLIST+1,16        INSERT FUNCTION BYTE
         OI    CAMLIST,64          INSERT BLDA CAMLIST BITS
         B     INDEX               GO BUILD INDEX CAMLIST
         SPACE 2
RELEASE  DS    0H                  RELEASE COMMAND PROCESSOR
         MVI   CAMLIST+2,128       INSERT RELEASE CAMLIST BITS
         B     INDEX               GO BUILD INDEX CAMLIST
         SPACE 2
DLTX     DS    0H                  DLTX COMMAND PROCESSOR
         MVI   CAMLIST+1,4         INSERT DLTX CAMLIST BITS
         B     INDEX               GO BUILD CAMLIST
         SPACE 2
BLDX     DS    0H                  BLDX COMMAND PROCESSOR
         MVI   CAMLIST+1,64        INSERT BLDX CAMLIST BITS
         SPACE 2
INDEX    DS    0H                  INDEX PROCESSOR ROUTINE
         OI    CAMLIST,4           INSERT INDEX PROCESSOR BITS
         INDEX CAMLIST             EXEC INDEX MACRO
         ST    R15,RETCODE         SAVE RETURN CODE
         L     R1,CATMSGL(R15)     LOAD MSG ADDR
         BAL   LINK,PUTLINE        LINK TO PUTLINE ROUTINE
         NOP   0                   *
         B     CMD                 GO GET NEXT CMD
         EJECT
CONNECT  DS    0H                  CONNECT COMMAND PROCESSOR
         L     R4,VCBPTR           POINTER TO VOLUME CB     *HMD 06/83*
         LA    R4,2(,R4)           LOAD VCB ENTRY ADDRESS   *HMD 06/83*
         USING VCBFLD,R4           SET VCB DSECT
         ST    R4,CAMLIST+12       STORE VOL ADDR IN CAM LIST
         MVC   VCBUNIT,UNIT        MOVE UNIT TYPE TO VCB
         TM    FLAGS+1,FUNIT       TEST IF UNIT ENTERED
         BO    CONNECT0            IF YES THEN SKIP SEARCH
         BAL   LINK,UCBCK          LINK TO UCB CHECK ROUTINE
         B     CONNECT1            RETURNS HERE IF ERROR
         SPACE 2
CONNECT0 DS    0H                  SETUP CAMLIST
         MVI   CAMLIST+1,8         INSERT FUNCTION BITS
         OI    CAMLIST,64          INSERT CONNECT CAMLIST BITS
         B     INDEX               GO BUILD INDEX CAMLIST
         SPACE 2
CONNECT1 DS    0H                  CONNECT VOL SER ERROR
         LA    R1,MSGNCON          LOAD ERROR MSG ADDRESS
         MVC   MSGTEXT2,MSGNMT     MOVE MSG TO MSG AREA
         MVC   MSGTEXT2+12(6),VCBVOL MOVE IN VOL SER
         LA    R0,MSGTEXT2         LOAD MSG ADDRESS
         BAL   LINK,ERRORMSG       LINK TO ERROR MSG ROUTINE
         NOP   0                   IGNORE ATTENTIONS
         B     CMD                 GO GET NEXT COMMAND
         SPACE 2
BLDG     DS    0H                  BLDG COMMAND PROCESSOR
         L     R7,ANSADDR          LOAD PDL ADDRESS
         USING PDLBLDG,R7          SET PDL DSECT
         NC    PCLBLDG3(2),PCLBLDG3 TEST IF EMPTY KEYWORD ENTERED
         BZ    BLDG0               IF NOT SKIP NEXT INSTRUCTION
         OI    CAMLIST+2,8         INDICATE EMPTY REQUIRED
         SPACE 2
BLDG0    DS    0H                  *
         NC    PCLBLDG4(2),PCLBLDG4 TEST IF DELETE KEYWORD ENTERED
         BZ    BLDG1               IF NOT SKIP NEXT INSTRUCTION
         OI    CAMLIST+2,64        INDICATE DELETE REQUIRED
         SPACE 2
BLDG1    DS    0H                  SET UP CAM LIST
         MVI   CAMLIST+1,32        INDICATE BLDG CAMLIST
         MVC   CAMLIST+3(1),SEQNO+1 MOVE IN NUMBER OF ENTRIES
         B     INDEX               GO ISSUE INDEX MACRO
         DROP  R7
         EJECT
UNCATLG  DS    0H                  UNCATLG COMMAND PROCESSOR
         OI    CAMLIST,68          INSERT CAMLIST LOCATE BITS
         LA    R0,VCB              LOAD VCB ADDRESS
         ST    R0,CAMLIST+12       STORE VCB ADDRESS IN CAMLIST
         LOCATE CAMLIST            ISSUE LOCATE MACRO
         ST    R15,RETCODE         SAVE RETURN CODE
         LTR   R15,R15             IS DATA SET CATALOGED
         BNZ   UNCATLG0            NO, THEN ERROR
         NI    CAMLIST,128         RESET CAMLIST BITS
         OI    CAMLIST,12          INSERT UNCATLG CAMLIST BITS
         MVI   CAMLIST+1,4         INSERT FUNCTION BYTE
         CATALOG CAMLIST           ISSUE CATALOG MACRO
         ST    R15,RETCODE         SAVE RETURN CODE
         L     R1,CATMSGL(R15)     LOAD CATALOG MSG ADDR
         BAL   LINK,PUTLINE        LINK TO PUTLINE ROUTINE
         NOP   0                   IGNORE ATTENTIONS
         B     CMD                 GO GET NEXT COMMAND
         SPACE 2
UNCATLG0 DS    0H                  DATA SET IS NOT CATALOGED
         LH    R2,LDSNX            LOAD DSNAME LENGTH
         LA    R2,4(R2)            ADJ LENGTH FOR LINE PREFIX
         MVC   MSGTEXT1+4,DSNAMEX  MOVE DSNAME TO MSG AREA
         LA    R3,MSGTEXT1(R2)     POINT PAST DSNAME
         MVC   0(L'MSGNCAT,R3),MSGNCAT MOVE NOT CATLG MSG
         LA    R2,L'MSGNCAT(R2)    ADJ MSG LINE LENGTH
         SLL   R2,16               SHIFT TO HIGH BYTES
         ST    R2,MSGTEXT1         STORE IN MSG AREA
         LA    R1,MSGTEXT1         LOAD MSG ADDRESS
         BAL   LINK,PUTLINE        LINK TO PUTLINE ROUTINE
         NOP   0                   IGNORE ATTENTIONS
         B     CMD                 GO GET NEXT COMMAND
         EJECT
SCRATCH  DS    0H                  SCRATCH COMMAND PROCESSOR
         L     R4,VCBPTR           GET VCB POINTER          *HMD 06/83*
         LH    R3,0(R4)            LOAD NUMBER OF VOLUMES   *HMD 06/83*
         LA    R4,2(,R4)           LOAD ADDR OF FIRST ENTRY *HMD 06/83*
         USING VCBFLD,R4           SET VCB FIELD DSECT
         SPACE 2
SCRATCH0 DS    0H                  *
         BAL   LINK,UCBCK          LINK TO UCB CHECK ROUTINE
         B     SCRATCH4            IF ERROR THEN RETURN HERE
         LA    R4,12(R4)           ADVANCE TO NEXT VCB ENTRY
         BCT   R3,SCRATCH0         IF MORE ENTRIES REPEAT
         MVI   CAMLIST,65          INSERT SCRATCH CAMLIST BITS
         MVI   CAMLIST+2,64        INSERT FUNCTION BITS
         L     R0,VCBPTR           LOAD VCB LIST ADDR       *HMD 06/83*
         ST    R0,CAMLIST+12       STORE IN VCB
         SR    R0,R0               INDICATE NO UCB FOR MOUNT
         SCRATCH CAMLIST           ISSUE SCRATCH MACRO
         ST    R15,RETCODE         SAVE RETURN CODE
         L     R1,SCRMSGR(R15)     LOAD MSG ADDRESS
         SR    R0,R0               ASSUME NO SECOND LEVEL MESSAGE
         LTR   R15,R15             TEST SCRATCH RETURN CODE
         BZ    SCRATCH3            IF ZERO THEN NO SECOND LEVEL MSG
         L     R4,VCBPTR           LOAD LIST ADDRESS        *HMD 06/83*
         LH    R3,0(,R4)           LOAD LIST COUNT          *HMD 06/83*
         LA    R4,2(,R4)           POINT TO ENTRY           *HMD 06/83*
         USING VCBFLD,R4           SET VCB DSECT
         SPACE 2
SCRATCH2 DS    0H                  *
         LH    R15,VCBSEQ          LOAD SCRATCH COND. CODE
         SLL   R15,2               SHIFT TO MULT. BY 4
         L     R0,SCRMSGL(R15)     LOAD MESSAGE ADDRESS
         LTR   R15,R15             TEST CONDITION CODE
         BNZ   SCRATCH3            IF NOT ZERO THEN R0 HAS SECOND MSG
         LA    R4,12(R4)           ADVANCE TO NEXT LIST ENTRY
         BCT   R3,SCRATCH2         IF MORE ENTRIES THEN REPEAT LOOP
         SPACE 2
SCRATCH3 DS    0H                  *
         BAL   LINK,ERRORMSG       LINK TO ERROR MESSAGE ROUTINE
         NOP   0                   IGNORE ATTENTIONS
         B     CMD                 GO GET NEXT COMMAND
         SPACE 2
SCRATCH4 DS    0H                  VOLUME NOT MOUNTED
         LA    R1,MSGNSCR          LOAD NOT SCRATCHED MSG ADDR
         MVC   MSGTEXT2,MSGNMT     MOVE NOT MOUNTED MSG
         MVC   MSGTEXT2+12(6),VCBVOL MOVE VOLUME INTO MSG
         LA    R0,MSGTEXT2         LOAD SECOND LEVEL MSG ADDR
         BAL   LINK,ERRORMSG       LINK TO ERROR MSG ROUTINE
         NOP   0                   IGNORE ATTENTIONS
         B     CMD                 GO GET NEXT COMMAND
         EJECT
RENAME   DS    0H                  RENAME COMMAND PROCESSOR
         L     R4,VCBPTR           POINT TO VCB             *HMD 06/83*
         LH    R3,0(,R4)           LOAD NUMBER OF VOLUMES   *HMD 06/83*
         LA    R4,2(,R4)           LOAD ADDR OF FIRST ENTRY *HMD 06/83*
         USING VCBFLD,R4           SET VCB FIELD DSECT
         SPACE 2
RENAME0  DS    0H                  *
         BAL   LINK,UCBCK          LINK TO UCB CHECK ROUTINE
         B     RENAME3             IF ERROR THEN RETURN HERE
         LA    R4,12(R4)           ADVANCE TO NEXT VCB ENTRY
         BCT   R3,RENAME0          IF MORE ENTRIES THEN REPEAT
         MVI   CAMLIST,193         INSERT RENAME CAMLIST BITS
         MVI   CAMLIST+2,32        INSERT FUNCTION BITS
         L     R0,VCBPTR           LOAD VCB LIST ADDRESS    *HMD 06/83*
         ST    R0,CAMLIST+12       STORE VCB ADDR IN CAMLIST
         SR    R0,R0               INDICATE NO UCB FOR MOUNT
         RENAME CAMLIST            ISSUE RENAME MACRO
         ST    R15,RETCODE         SAVE RETURN CODE
         L     R1,RENMSGR(R15)     LOAD MSG ADDRESS
         SR    R0,R0               ASSUME NO SECOND LEVEL MSG
         LTR   R15,R15             TEST RENAME RETURN CODE
         BZ    RENAME2             IF ZERO THEN ALL OK
         L     R4,VCBPTR           LOAD VOLUME LIST ADDRESS *HMD 06/83*
         LH    R3,0(,R4)           LOAD VOLUME LIST COUNT   *HMD 06/83*
         LA    R4,2(,R4)           POINT TO FIRST ENTRY     *HMD 06/83*
         USING VCBFLD,R4           SET VCB FIELD DSECT
         SPACE 2
RENAME1  DS    0H                  *
         LH    R15,VCBSEQ          LOAD RENAME CONDITION CODE
         SLL   R15,2               SHIFT TO MULTIPLY BY 4
         L     R0,RENMSGL(R15)     LOAD MESSAGE ADDRESS
         LTR   R15,R15             TEST RENAME CONDITION CODE
         BNZ   RENAME2             IF NOT ZERO THEN R0 HAS 2ND MSG
         LA    R4,12(R4)           ADVANCE TO NEXT LIST ENTRY
         BCT   R3,RENAME1          IF MORE ENTRIES THEN REPEAT LOOP
         SPACE 2
RENAME2  DS    0H                  *
         BAL   LINK,ERRORMSG       LINK TO ERROR MESSAGE ROUTINE
         NOP   0                   IGNORE ATTENTIONS
         B     CMD                 GO GET NEXT COMMAND
         SPACE 2
RENAME3  DS    0H                  VOLUME NOT MOUNTED
         LA    R1,MSGNREN          LOAD NOT RENAMED MSG ADDR
         MVC   MSGTEXT2,MSGNMT     MOVE NOT MOUNTED MESSAGE
         MVC   MSGTEXT2+12(6),VCBVOL MOVE VOLUME INTO MSG
         LA    R0,MSGTEXT2         LOAD SECOND LEVEL MSG ADDRESS
         BAL   LINK,ERRORMSG       LINK TO ERROR MSG ROUTINE
         NOP   0                   IGNORE ATTENTIONS
         B     CMD                 GO GET NEXT COMMAND
         EJECT
HELP     DS    0H                  HELP COMMAND PROCESSOR
         LA    R1,PARMLIST         LOAD PARM LIST ADDRESS
         USING CPPL,R1             SET CPPL DSECT
         MVC   CPPLCBUF,ACBUF      MOVE IN CMD BUFFER ADDRESS
         MVC   CPPLUPT,AUPT        MOVE IN UPT ADDRESS
         MVC   CPPLPSCB,APSCB      MOVE IN PSCB ADDRESS
         MVC   CPPLECT,AECT        MOVE IN ECT ADDRESS
         XC    HLPECB,HLPECB       CLEAR HELP ECB
         MVC   HLPCPL(LHLPCPL),MHLPCPL MOVE CPL FOR ATTACH
         ATTACH ECB=HLPECB,SHSPV=78,MF=(E,(1)),SF=(E,HLPCPL)
         ST    R1,HLPTCB           SAVE HELP TCB ADDRESS
         WAIT  ECB=HLPECB          WAIT FOR HELP TO COMPLETE
         XC    ATTNECB,ATTNECB     CLEAR COM ECB
         LA    R2,DAIRPB           LOAD DAIR PB ADDRESS
         USING DAPB2C,R2           SET DAIR PB DSECT
         MVC   DA2CCD(LDAP2C),MDAP2C MOVE IN DAIR PB CONSTANTS
         LA    R0,HLPTCB           LOAD HELP TCB ADDRESS
         ST    R0,DA2CTCB          STORE IN DAIR PB
         LA    R1,PARMLIST         LOAD PARM LIST ADDRESS
         USING DAPL,R1             SET DAPL DSECT
         ST    R2,DAPLDAPB         STORE DAIR PB ADDR IN DAPL
         MVC   DAPLUPT,AUPT        MOVE IN UPT ADDRESS
         MVC   DAPLECT,AECT        MOVE IN ECT ADDRESS
         MVC   DAPLPSCB,APSCB      MOVE IN PSCB ADDRESS
         LA    R0,ATTNECB          LOAD ECB ADDRESS
         ST    R0,DAPLECB          STORE ECB ADDRESS IN DAPL
         CALLTSSR EP=IKJDAIR       LINK TO DAIR ROUTINE
         DETACH HLPTCB             DETACH HELP
         B     CMD                 GO GET NEXT COMMAND
         EJECT
UCBCK    DS    0H                  UCB VOL SER CHECK ROUTINE
         USING VCBFLD,R4           SET VCB FIELD DSECT
         USING UCB,R6              SET UCB DSECT
         XC    WORK,WORK           CLEAR WORK AREA          *HMD 06/83*
         MVI   DEVCLASS,X'20'      ONLY DASD DEVICES        *HMD 06/83*
         SPACE 2                                            *HMD 06/83*
         SP3CHECK  ,  R15=LOOKUP   SP 1.3.0 OR HIGHER       *HMD 06/83*
         SPACE 2                                            *HMD 06/83*
         BNE   UCBOLD              USE OLD UCB LOOKUP       *HMD 06/83*
UCBCALL  L     R15,CVTPTR          LOAD CVT ADDRESS         *HMD 06/83*
         L     R15,X'434'(,R15)    LOAD UCB LOOKUP ROUTINE  *HMD 06/83*
         CALL  (15),(WORK,DEVCLASS,ADDRUCB),VL,MF=(E,CALLR) *HMD 06/83*
         LTR   R15,R15             TEST RETURN CODE         *HMD 06/83*
         BNZ   0(0,LINK)           NON-ZERO MEANS LIST END  *HMD 06/83*
         L     R6,ADDRUCB          GET UCB ADDRESS          *HMD 06/83*
         CLC   VCBVOL,UCBVOL       COMPARE VOLSERS          *HMD 06/83*
         BNE   UCBCALL             GET ANOTHER UCB          *HMD 06/83*
         MVC   VCBUNIT,UCBTYPE     MOVE UCB TYPE            *HMD 06/83*
         NI    VCBUNIT+1,255-X'20' TURN OFF SHARE BITS      *HMD 06/83*
         B     4(0,LINK)           RETURN TO CALLER         *HMD 06/83*
         SPACE 2                                            *HMD 06/83*
UCBOLD   L     R5,CVTPTR           LOAD CVT ADDRESS         *HMD 08/80*
         L     R5,CVTILK2-CVT(R5)  LOAD UCB LOOKUP LIST ADDRESS
*                                                           *HMD 08/80*
         SPACE 2
UCBCK0   DS    0H                  *
         LH    R6,0(R5)            LOAD UCB ADDRESS
         N     R6,=X'0000FFFF'     TEST FOR VALID ADDRESS
         BZ    UCBCK1              ZERO IF NO ENTRY
         C     R6,=X'0000FFFF'     TEST FOR LAST ENTRY
         BE    0(0,LINK)           IF END OF LIST RETURN OFFSET 0
         TM    UCBDEVC,X'20'       TEST FOR DIRECT ACCESS DEVICE
         BNO   UCBCK1              SKIP UCB IF NOT DA
         CLC   VCBVOL,UCBVOL       COMPARE VOL SERS
         BNE   UCBCK1              IF NOT EQUAL THEN SKIP
         MVC   VCBUNIT,UCBTYPE     MOVE UCB TYPE TO VCB ENTRY
         NI    VCBUNIT+1,255-X'20' TURN OFF SHARE BITS      *HMD 06/83*
         B     4(0,LINK)           RETURN AT OFFSET 4
         SPACE 2
UCBCK1   DS    0H                  ADVANCE TO NEXT LIST ENTRY
         LA    R5,2(R5)            INCREMENT LIST ADDRESS
         B     UCBCK0              GO REPEAT LOOP
         EJECT
VERDSNX  ENTER                     DSNAME/INDEX VERIFICATION ROUTINE
         TM    FLAGS+1,FDSNX       TEST IF DSNAME FLAG SET
         BO    VERDSNX0            IF SET THEN ALREADY HAVE 1 DSNAME
         CLEAR DSNAMEX             CLEAR DSN/INDEX FIELD
         L     R15,0(R8)           LOAD FIELD ADDRESS
         LH    R14,4(R8)           LOAD FIELD LENGTH
         STH   R14,LDSNX           SAVE DSN LENGTH
         BCTR  R14,0               COMPUTE EXEC LENGTH
         MVC   DSNAMEX(0),0(R15)   MOVE DSNAME/INDEX
         EX    R14,*-6             MOVE TRUE LENGTH
         LA    R3,DSNAMEX          LOAD DSNAME FIELD ADDRESS
         ST    R3,CAMLIST+4        STORE ADDRESS IN CAM LIST
         OI    FLAGS+1,FDSNX       SET DSNAME FLAG
         B     VERDSNX1            GO CHECK DSNAME
         SPACE 2
VERDSNX0 DS    0H                  MOVE DSNAME 2
         CLEAR DSNAME2             CLEAR DSNAME 2
         L     R15,0(R8)           LOAD FIELD ADDRESS
         LH    R14,4(R8)           LOAD FIELD LENGTH
         BCTR  R14,0               COMPUTE EXEC LENGTH
         MVC   DSNAME2(0),0(R15)   MOVE DSNAME 2
         EX    R14,*-6             EXEC FOR PROPER LENGTH
         LA    R3,DSNAME2          LOAD DSNAME 2 ADDRESS
         ST    R3,CAMLIST+8        STORE ADDRESS IN CAM LIST
         SPACE 2
VERDSNX1 DS    0H                 *
         SR    R15,R15             SET RC TO ZERO
         XC    XVCB(256),XVCB      CLEAR TRT TABLE
         MVI   XVCB+BLANK,4        SET SPACE STOP
         MVI   XVCB+LPAREN,8       SET LEFT PAREN STOP
         MVI   XVCB+PERIOD,12      SET PERIOD STOP
         SR    R2,R2               CLEAR REGISTER 2
         SPACE 2
VERDSNX2 DS    0H                  *
         TRT   0(9,R3),XVCB        SCAN FOR A DELIMITER
         BZ    VERDSNX5            IF NO DELIMITER THEN ERROR
         LR    R4,R2               SAVE STOP VALUE
         LR    R5,R1               LOAD STOP ADDRESS
         SR    R5,R3               COMPUTE FIELD LENGTH
         BCTR  R5,0                COMPUTE EXEC LENGTH
         TRT   0(0,R3),ANTBL       SCAN FOR VALID CHARACTERS
         EX    R5,*-6              EXEC FOR PROPER LENGTH
         BNZ   VERDSNX5            IF STOP THEN ERROR
         LA    R3,1(R1)            POINT PAST DELIMITER
         B     *(R4)               BRANCH TO APPROPRIATE ROUTINE
         B     VERDSNX6            IF SPACE THEN DONE
         B     VERDSNX3            IF PAREN THEN GENERATION
         CLI   0(R3),C'Z'          TEST IF GREATER THAN Z
         BH    VERDSNX5            IF HIGH THEN ERROR
         CLI   0(R3),C'-'          MINUS ILLEGAL AS FIRST CHARACTER
         BE    VERDSNX5            IF EQUAL THEN ERROR
         B     VERDSNX2            GO TEST NEXT 8
         SPACE 2
VERDSNX3 DS    0H                  *
         TM    APCL,X'20'          TEST IF GENERATION OK
         BO    VERDSNX5            IF ONE THEN ERROR
         XC    XVCB(256),XVCB      CLEAR TRT TABLE
         MVI   XVCB+RPAREN,1       INSERT STOP AT PAREN
         TRT   0(5,R3),XVCB        SCAN FOR RIGHT PAREN
         BZ    VERDSNX5            IF NOT FOUND THEN ERROR
         CLI   1(R1),BLANK         NEXT CHARACTER MUST BE BLANK
         BNE   VERDSNX5            IF NOT BLANK, THEN ERROR
         CLI   0(R3),C'-'          NEXT CHARACTER MINUS SIGN?
         BNE   VERDSNX4            NO, THEN MUST BE NUMERIC
         LA    R3,1(R3)            POINT PAST MINUS SIGN
         SPACE 2
VERDSNX4 DS    0H                  *
         LR    R5,R1               LOAD RIGHT PAREN ADDRESS
         SR    R5,R3               COMPUTE FIELD LENGTH
         BNP   VERDSNX5            FIELD LENGTH MUST BE GT ZERO
         BCTR  R5,0                COMPUTE EXECUTE LENGTH
         TRT   0(0,R3),NTBL        TEST FIELD FOR VALID NUMERICS
         EX    R5,*-6              EXECUTE FOR PROPER LENGTH
         BNZ   VERDSNX5            IF NOT NUMERIC, THEN ERROR
         OI    FLAGS+1,FGEN        SET GENERATION FLAG
         B     VERDSNX6            GO EXIT NORMALLY
         SPACE 2
VERDSNX5 DS    0H                  ERROR IN DSNAME SYNTAX
         LA    R15,4               SET RETURN CODE TO 4
         NC    CAMLIST+8(4),CAMLIST+8 FIRST OR SECOND TIME THRU
         BNZ   VERDSNX6            NO, SECOND TIME EXIT
         NI    FLAGS+1,FF-FDSNX    RESET DSNAME FLAGS
         SPACE 2
VERDSNX6 EXIT                      EXIT ROUTINE
         EJECT
VERINDX  ENTER                     INDEX VERIFICATION ROUTINE
         LH    R3,4(R8)            LOAD INDEX LENGTH
         L     R1,0(R8)            LOAD INDEX ADDRESS
         BCTR  R3,0                COMPUTE EXECUTE LENGTH
         TM    FLAGS+1,FINDEX      IF INDEX ALREADY PRESENT
         BO    VERALIAS            YES, TREAT AS ALIAS
         CLEAR HINDEX              CLEAR INDEX  FIELD
         MVC   HINDEX(0),0(R1)     MOVE INDEX
         EX    R3,*-6              MOVE FOR PROPER LENGTH
         LA    R0,HINDEX           LOAD INDEX ADDRESS
         ST    R0,CAMLIST+4        STORE IN CAMLIST
         OI    FLAGS+1,FINDEX      INDICATE INDEX PRESENT
         B     VERINDX0            GO EXIT
         SPACE 2
VERALIAS DS    0H                  PROCESS AS ALIAS
         CLEAR AINDEX              CLEAR ALIAS INDEX FIELD
         MVC   AINDEX(0),0(R1)     MOVE ALIAS
         EX    R3,*-6              EXEC FOR PROPER LENGTH
         LA    R0,AINDEX           LOAD ALIAS ADDRESS
         ST    R0,CAMLIST+12       STORE IN CAMLIST
         SPACE 2
VERINDX0 DS    0H                  EXIT
         SR    R15,R15             SET RETURN CODE TO ZERO
         EXIT                      RETURN
         EJECT
VERCVOL  ENTER                     CONTROL VOLUME VERIFICATION ROUTINE
         OI    FLAGS+1,FCVOL       SET FLAG TO INDICATE CVOL PRESENT
         OI    CAMLIST,128         INDICATE CVOL PRESENT IN CAMLIST
         CLEAR CVOL                CLEAR CONTROL VOLUME FIELD
         LH    R15,4(R8)           LOAD CVOL LENGTH
         L     R1,0(R8)            LOAD CVOL ADDRESS
         BCTR  R15,0               COMPUTE EXEC LENGTH
         MVC   CVOL(0),0(R1)       MOVE TO WORK AREA
         EX    R15,*-6             EXEC FOR PROPER LENGTH
         LA    R0,CVOL             LOAD CVOL ADDRESS
         ST    R0,CAMLIST+8        STORE CVOL ADDR IN CAMLIST
         SR    R15,R15             SET RC TO ZERO
         EXIT                      RETURN TO PARSE
         EJECT
VERVOL   ENTER                     VOLUME VERIFICATION ROUTINE
         USING VCBFLD,R4           SET VCB FIELD DSECT
         L     R4,VCBPTR           LOAD POINTER ADDRESS     *HMD 06/83*
         LH    R3,VCBNVOLS         LOAD NUMBER OF VOLUMES
         MH    R3,=H'12'           TIMES FIELD LENGTH
         LA    R4,2(R4,R3)         POINT TO NEXT AVAIL FLD
         C     R4,VCBEND           POINTING PAST END OF VCB *HMD 06/83*
         BL    VERVOLA             NO, CONTINUE             *HMD 06/83*
         LA    R1,MSGMANY          TOO MANY VOLSERS         *HMD 06/83*
         BAL   LINK,ERRORMSG       PUT OUT THE MESSAGE      *HMD 06/83*
         NOP   0                   IGNORE ATTENTIONS        *HMD 06/83*
         LA    R15,12              RETURN TO CALLER         *HMD 06/83*
         B     VERVOLX             EXIT THIS ROUTINE        *HMD 06/83*
VERVOLA  DS    0H                                           *HMD 06/83*
         CLEAR VCBVOL              CLEAR VOLUME FIELD
         LH    R5,4(R8)            LOAD VOL SER LENGTH
         L     R1,0(R8)            LOAD VOL SER ADDRESS
         BCTR  R5,0                COMPUTE EXEC LENGTH
         MVC   VCBVOL(0),0(R1)     MOVE TOVCB
         EX    R5,*-6              EXEC FOR PROPER LENGTH
         LH    R3,VCBNVOLS         LOAD NUMBER OF VOLUME FIELDS
         LA    R3,1(R3)            INCREMENT VOL COUNT
         L     R4,VCBPTR           POINT TO GOTTEN AREA     *HMD 06/83*
         STH   R3,VCBNVOLS         STORE IN VCB
         STH   R3,0(R4)            SAVE COUNT               *HMD 06/83*
         SR    R15,R15             SET RETURN CODE TO ZERO
VERVOLX  EXIT                      RETURN
         EJECT
VERSEQ   ENTER                     SEQUENCE NUMBER VERIFICATION ROUTINE
         LH    R3,4(R8)            LOAD SEQUENCE NUMBER LENGTH
         L     R1,0(R8)            LOAD SEQUENCE NUMBER LENGTH
         BCTR  R3,0                COMPUTE EXECUTE LENGTH
         PACK  DOUBLE,0(0,R1)      PACK SEQ NO INTO DOUBLE WORD
         EX    R3,*-6              EXEC FOR PROPER LENGHT
         CVB   R2,DOUBLE           CONVERT SEQ NO TO BINARY
         STH   R2,SEQNO            SAVE IT FOR LATER
         OI    FLAGS+1,FSEQ        INDICATE SEQ NO PRESENT
         SR    R15,R15             SET RETURN CODE TO ZERO
         EXIT                      RETURN
         EJECT
VERUNIT  ENTER                     UNIT VERIFICATION ROUTINE
         CLEAR DOUBLE              CLEAR DOUBLE WORD
         LH    R3,4(R8)            LOAD UNIT NAME LENGTH
         L     R1,0(R8)            LOAD UNIT NAME ADDRESS
         BCTR  R3,0                COMPUTE EXEC LENGTH
         MVC   DOUBLE(0),0(R1)     MOVE UNIT NAME
         EX    R3,*-6              EXEC FOR PROPER LENGTH
         L     R3,ADEVNT           LOAD DEVICE NAME TABLE ADDR
         L     R2,0(R3)            LOAD NUMBER OF TABLE ENTRIES
         LA    R3,4(R3)            POINT TO FIRST ENTRY
         USING DEVDSECT,R3         SET DEVICE NAME TBL DSECT
         SPACE 2
VERUNIT0 DS    0H                  SEARCH LOOP
         CLC   DEVNAME,DOUBLE      COMPARE TO A TBL ENTRY
         BE    VERUNIT1            IF EQUAL THEN THIS UNIT
         LA    R3,12(R3)           ADVANCE TO NEXT ENTRY
         BCT   R2,VERUNIT0         IF MORE ENTRIES THEN REPEAT
         LA    R15,4               SET RETURN CODE TO 4
         B     VERUNIT2            GO EXIT - INVALID UNIT
         SPACE 2
VERUNIT1 DS    0H                  UNIT NAME FOUND
         MVC   UNIT,DEVTYPE        MOVE UNIT TYPE
         OI    FLAGS+1,FUNIT       SET UNIT FLAGS
         SR    R15,R15             SET RETURN CODE TO ZERO
         SPACE 2
VERUNIT2 EXIT                      EXIT ROUTINE
         EJECT
PARSE    DS    0H                  PARSE INTERFACE SUBROUTINE
         IKJRLSA ANSADDR           RELEASE PDL STORAGE
         XC    ANSADDR,ANSADDR     CLEAR PDL ADDRESS AREA
         LA    R1,PARSELST         AREA FOR PARSE PARMS
         USING PPL,R1              SET PPL DSECT
         MVC   PPLUPT,AUPT         MOVE UPT ADDR TO PPL
         MVC   PPLECT,AECT         MOVE ECT ADDR TO PPL
         MVC   PPLCBUF,ACBUF       MOVE CMD BUFFER ADDR TO PPL
         ST    WORKR,PPLUWA        MOVE WORK AREA ADDR FOR EXITS
         LA    R0,ATTNECB          LOAD ATTENTION ECB ADDR
         ST    R0,PPLECB           STORE IN PPL
         MVI   ATTNECB,0           CLEAR ECB
         LA    R0,ANSADDR         LOAD PDL ANSWER AREA ADDR
         ST    R0,PPLANS           STORE ADDR IN PPL
         MVC   PPLPCL,APCL         MOVE PCL ADDR TO PPL
         CALLTSSR EP=IKJPARS       INVOKE PARSE
         CH    R15,=H'20'          VALIDITY CHECK ERROR?
         BE    0(LINK)             IF YES THEN RETURN
         CH    R15,=H'8'           ATTENTION ENTERED
         BE    0(LINK)             IF ATTN THEN RETURN
         LTR   R15,R15             CHECK FOR OTHER ERROR
         BZ    4(LINK)             IF NO ERROR THEN OK
         MVC   MSGTEXT2,MSGPARSE   MOVE PARSE ERROR MSG
         CVD   R15,DOUBLE          CONVERT RC TO DECIMAL
         OI    DOUBLE+7,X'0F'      CHANGE SIGN
         UNPK  MSGTEXT2+22(2),DOUBLE UNPACK RETURN CODE
         LA    R0,MSGTEXT2         PUT OUT 'COMMAND ERROR' MSG
         LA    R1,MSGCMDER         *
         BAL   LINK,ERRORMSG       *
         NOP   0                   IGNORE ATTENTIONS
         EJECT
FLUSH    DS    0H                  *
         LA    R1,IOPLPARM         AREA FOR STACK PARM LIST
         USING IOPL,R1             SET IOPL DSECT
         MVI   ATTNECB,0           CLEAR ATTENTION ECB
         XC    IOPLEND(16),IOPLEND CLEAR PARAMETER AREA
         STACK PARM=IOPLEND,DELETE=ALL,MF=(E,(1))
         TCLEARQ INPUT
         EJECT
RETURN   DS    0H                  RETURN  TO TMP
         TM    FLAGS,FCBUF+FEXIT   TEST EXIT TYPE
         BNZ   RETURN1             IF SINGLE CMD THEN SKIP CODE
         ICM   R1,15,ACBUF         LOAD COMMAND BUFFER ADDRESS
         BZ    RETURN1             IF NOT THEN SKIP CODE
         LH    R0,0(R1)            LOAD COMMAND BUFFER LENGTH
         ICM   R0,8,=AL1(1)        CMD BUFFER IS IN SUBPOOL 1
         FREEMAIN R,LV=(0),A=(1)   FREE COMMAND BUFFER STORAGE
         SPACE 2
RETURN1  DS    0H                  *
         IKJRLSA ANSADDR           FREE PARSE STORAGE
         DELETE EPLOC=IKJPUTL      DELETE PUTLINE ROUTINE
         DELETE EPLOC=IKJSCAN      DELETE COMMAND SCAN ROUTINE
         DELETE EPLOC=DEVNAMET     DELETE DEVICE NAME TABLE
         L     R0,=A(VCBYTES)      LOAD BYTES TO FREE       *HMD 06/83*
         L     R1,VCBPTR           LOAD STORAGE POINTER     *HMD 06/83*
         FREEMAIN R,LV=(0),A=(1)   FREE STORAGE             *HMD 06/83*
         L     R0,WASIZE           LOAD WORK AREA SIZE
         LR    R1,WORKR            LOAD WORK AREA ADDRESS
         L     R2,RETCODE          LOAD RETURN CODE
         L     OSAVE,SAVE+4        LOAD OLD SAVE AREA ADDR
         FREEMAIN R,LV=(0),A=(1)   FREE WORK AREA STORAGE
         LR    R15,R2              LOAD RETURN CODE
         RETURN (14,12),RC=(15)    RETURN TO TMP
         EJECT
ERRORMSG DS    0H                  DISPLAY AN ERROR MSG
         LTR   R0,R0               SECOND LEVEL MSG?
         BZ    ERRORM1             NO
         MVC   MSGTEXT1,0(R1)      INSURE MSG IN WORK AREA
         LA    R1,MSGTEXT1         LOAD MSG ADDRESS
         LH    R14,0(R1)           LENGTH OF FIRST LEVEL MSG
         LA    R15,0(R14,R1)       END OF MSG ADDRESS
         LA    R14,1(R14)          JUMP MSG LENGTH
         STH   R14,0(R1)           *
         MVI   0(R15),C'+'         INDICATE SECOND LEVEL MSG EXISTS
         SR    R14,R14             CLEAR CHAIN FIELD
         LA    R15,1               ONE SEGMENT IN SECOND MSG
         STM   R14,R0,PUTOLD2      CREATE SECOND LEVEL
         LA    R0,PUTOLD2          LOAD OUTPUT LINE DESC ADDR
         SPACE 2
ERRORM1  DS    0H                  *
         LR    R14,R0              NEXT 'OLD' ADDR OR ZERO
         LA    R15,1               ONE SEGMENT
         LR    R0,R1               LOAD MSG ADDR
         STM   R14,R0,PUTOLD1      FIRST LEVEL OLD
         LA    R1,IOPLPARM         LOAD PARM LIST ADDR
         USING IOPL,R1             SET IOPL DSECT
         MVI   ATTNECB,0           CLEAR ATTENTION ECB
         L     R15,APUTL           LOAD PUTLINE ROUTINE ADDR
         XC    IOPLEND(16),IOPLEND CLEAR PARM LIST
         PUTLINE PARM=IOPLEND,ENTRY=(15),MF=(E,(1)),                   X
               OUTPUT=(PUTOLD1,TERM,MULTLVL,INFOR)
         CH    R15,=H'4'           ATTENTION ENTERED
         BE    0(LINK)             YES, THEN RETURN
         LTR   R15,R15             ERROR?
         BZ    4(LINK)             IF NOT THEN RETURN
         B     FLUSH               ELSE ERROR EXIT
         EJECT
PUTLINE  DS    0H                  PUTLINE PROCESSING
         TM    ATTNECB,X'40'       ATTENTION OCCUR?
         BCR   1,LINK              YES, RETURN IMMEDIATELY
         LR    R14,R1              SAVE DATA LINE POINTER
         LA    R1,IOPLPARM         LOAD I/0 PARM LIST ADDR
         USING IOPL,R1             SET IOPL DSECT
         L     R15,APUTL           LOAD PUTLINE ROUTINE ADDR
         XC    IOPLEND(16),IOPLEND CLEAR PUTLINE PARM BLOCK
         LR    R0,R14              LOAD DATA LINE ADDR
         PUTLINE PARM=IOPLEND,ENTRY=(15),MF=(E,(1)),                   X
               OUTPUT=((0),TERM,SINGLE,DATA),                          X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK)
         CH    R15,=H'4'           ATTENTION OCCUR?
         BE    0(LINK)             YES
         LTR   R15,R15             CHECK COMPLETION CODE
         BNZ   FLUSH               PUTLINE ERROR
         B     4(LINK)             RETURN TO OFFSET
         EJECT
PUTGET   DS    0H                  PUTGET PROCESSING
         TM    ATTNECB,X'40'       ATTENTION OCCUR?
         BCR   1,LINK              YES, RETURN IMMED.
         NI    FLAGS,FF-FNULL      RESET NULL FLAGS
         LA    R0,1                ONLY ONE SEGMENT
         STM   R0,R1,PUTOLD1       *
         ICM   R1,15,ACBUF         LOAD COMMAND BUFFER ADDRESS
         BZ    PUTGET0             IF NOT THEN SKIP CODE
         LH    R0,0(R1)            LOAD BUFFER LENGTH
         ICM   R0,8,=AL1(1)        CMD BUFFER IS IN SUBPOOL 1
         FREEMAIN R,LV=(0),A=(1)   FREE CMD BUFFER STORAGE
         XC    ACBUF,ACBUF         CLEAR CMD BUFFER ADDRESS
         SPACE 2
PUTGET0  DS    0H                  PROCEED WITH PUTGET
         BALR  R2,R0               ADDRESSIBILITY           *HMD 06/83*
         USING *,R2                AVOID ADDRESS ERROR      *HMD 06/83*
         LA    R1,IOPLPARM         LOAD IOPL ADDRESS
         USING IOPL,R1             *
         L     R15,APTGT           LOAD PUTGET ROUTINE ADDR
         XC    IOPLEND(16),IOPLEND CLEAR PUTGET PARM BLOCK
         PUTGET PARM=IOPLEND,MF=(E,(1)),ENTRY=(15),                    X
               OUTPUT=(PUTOLD1,SINGLE,MODE),TERMGET=(EDIT,WAIT),       X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK)
         CH    R15,=H'8'           *
         BH    FLUSH               *
         TM    ATTNECB,X'40'       ATTENTION OCCUR?
         BO    0(LINK)             YES
         CH    R15,=H'4'           LINE FROM CLIST?
         BNE   *+8                 NO, THEN SKIP NEXT INSTR
         OI    FLAGS,FCLIST        INDICATE INPUT FROM CLIST
         LA    R1,IOPLPARM         LOAD IOPL ADDRESS
         LA    R1,IOPLEND          *
         USING PGPB,R1             SET PUTGET PARM BLOCK DSECT
         L     R1,PGPBIBUF         LOAD INPUT BUFFER ADDR
         LA    R0,4                *
         CH    R0,0(R1)            IS THIS A NULL LINE
         ST    R1,ACBUF            SAVE INPUT BUFFER ADDR
         BL    4(LINK)             NO
         OI    FLAGS,FNULL         INDICATE NULL LINE
         B     4(LINK)             RETURN
         DROP  R2                  NO NEED FOR BASE         *HMD 06/83*
         EJECT
         SPACE 1
DATAREA  DS    0F                  DATA AREA
         SPACE 3
PCLDSN   IKJPARM DSECT=PDLDSN
PCLDSN1  IKJIDENT 'DATA SET NAME',FIRST=ALPHA,OTHER=ANY,               X
               PROMPT='DATA SET NAME',                                 X
               HELP=('NAME OF DATA SET TO BE PROCESSED'),              X
               VALIDCK=VERDSNX,MAXLNTH=44
DSNCVOL  IKJKEYWD
         IKJNAME 'CVOL',SUBFLD=$CVOL1
$CVOL1   IKJSUBF
PCLDSN2  IKJIDENT 'CVOL NAME',FIRST=ALPHANUM,OTHER=ALPHANUM,           X
               PROMPT='CVOL VOLUME SERIAL NUMBER',                     X
               HELP=('VOLUME SERIAL NUMBER OF CONTROL VOLUME'),        X
               VALIDCK=VERCVOL,MAXLNTH=6
         IKJENDP
         EJECT
PCLINDX  IKJPARM DSECT=PDLINDX
PCLINDX1 IKJIDENT 'INDEX NAME',FIRST=ALPHA,OTHER=ANY,                  X
               PROMPT='INDEX NAME',                                    X
               HELP=('NAME OF INDEX TO BE PROCESSED'),                 X
               VALIDCK=VERDSNX,MAXLNTH=44
INXCVOL  IKJKEYWD
         IKJNAME 'CVOL',SUBFLD=$CVOL2
$CVOL2   IKJSUBF
PCLINDX2 IKJIDENT 'CVOL NAME',FIRST=ALPHANUM,OTHER=ALPHANUM,           X
               PROMPT='CVOL VOLUME SERIAL NUMBER',                     X
               HELP=('VOLUME SERIAL NUMBER OF CONTROL VOLUME'),        X
               VALIDCK=VERCVOL,MAXLNTH=6
         IKJENDP
         EJECT
PCLSCR   IKJPARM DSECT=PDLSCR
PCLSCR1  IKJIDENT 'DATA SET NAME',FIRST=ALPHA,OTHER=ANY,               X
               PROMPT='DATA SET NAME',                                 X
               HELP=('NAME OF DATA SET TO BE SCRATCHED'),              X
               VALIDCK=VERDSNX,MAXLNTH=44
PCLSCR2  IKJIDENT 'VOLUME SERIAL NUMBER LIST',LIST,FIRST=ALPHANUM,     X
               OTHER=ALPHANUM,MAXLNTH=6,VALIDCK=VERVOL,                X
               PROMPT='VOLUME SERIAL NUMBER LIST',                     X
               HELP=('VOL SERS OF DATA SET TO BE SCRATCHED')
         IKJENDP
         EJECT
PCLCATLG IKJPARM DSECT=PDLCATLG
PCLCAT1  IKJIDENT 'DATA SET NAME',FIRST=ALPHA,OTHER=ANY,               X
               PROMPT='DATA SET NAME',                                 X
               HELP=('NAME OF DATA SET TO BE CATALOGED'),              X
               VALIDCK=VERDSNX,MAXLNTH=44
PCLCAT2  IKJIDENT 'VOLUME SERIAL NUMBER LIST',LIST,FIRST=ALPHANUM,     X
               OTHER=ALPHANUM,MAXLNTH=6,VALIDCK=VERVOL,                X
               PROMPT='VOLUME SERIAL NUMBER LIST',                     X
               HELP=('VOL SERS OF DATA SET TO BE CATALOGED')
PCLCAT3  IKJKEYWD
         IKJNAME 'CVOL',SUBFLD=$CVOL3
PCLCAT4  IKJKEYWD
         IKJNAME 'SEQ',SUBFLD=$SEQ1
PCLCAT5  IKJKEYWD
         IKJNAME 'UNIT',SUBFLD=$UNIT1
$CVOL3   IKJSUBF
PCLCAT6  IKJIDENT 'CVOL NAME',FIRST=ALPHANUM,OTHER=ALPHANUM,           X
               PROMPT='CVOL VOLUME SERIAL NUMBER',                     X
               HELP=('VOLUME SERIAL NUMBER OF CONTROL VOLUME'),        X
               VALIDCK=VERCVOL,MAXLNTH=6
$SEQ1    IKJSUBF
PCLCAT7  IKJIDENT 'SEQUENCE NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,       X
               PROMPT='SEQUENCE NUMBER',MAXLNTH=3,VALIDCK=VERSEQ,      X
               HELP=('DATA SET SEQUENCE NUMBER')
$UNIT1   IKJSUBF
PCLCAT8  IKJIDENT 'UNIT NAME',FIRST=ANY,OTHER=ANY,                     X
               PROMPT='UNIT NAME',MAXLNTH=8,VALIDCK=VERUNIT,           X
               HELP=('UNIT NAME OF DATA SET TO BE CATALOGED')
         IKJENDP
         SPACE 3
PCLCON   IKJPARM DSECT=PDLCON
PCLCON1  IKJIDENT 'INDEX NAME',FIRST=ALPHA,OTHER=ALPHANUM,             X
               VALIDCK=VERINDX,MAXLNTH=8,PROMPT='INDEX NAME',          X
               HELP=('NAME OF INDEX TO BE CONNECTED')
PCLCON2  IKJIDENT 'VOLUME SERIAL NUMBER',FIRST=ALPHANUM,LIST,          X
               OTHER=ALPHANUM,VALIDCK=VERVOL,MAXLNTH=6,                X
               PROMPT='VOLUME SERIAL NUMBER',                          X
               HELP=('VOLUME SERIAL NUMBER OF VOLUME TO BE CONNECTED')
CONVOL   IKJKEYWD
         IKJNAME 'CVOL',SUBFLD=$CVOL4
PCLCON3  IKJKEYWD
         IKJNAME 'UNIT',SUBFLD=$UNIT2
$CVOL4   IKJSUBF
PCLCON4  IKJIDENT 'CVOL NAME',FIRST=ALPHANUM,OTHER=ALPHANUM,           X
               VALIDCK=VERCVOL,MAXLNTH=6,                              X
               PROMPT='CVOL VOLUME SERIAL NUMBER ',                    X
               HELP=('VOLUME SERIAL NUMBER OF CONTROL VOLUME')
$UNIT2   IKJSUBF
PCLCON5  IKJIDENT 'UNIT NAME',FIRST=ANY,OTHER=ANY,                     X
               PROMPT='UNIT NAME',MAXLNTH=8,VALIDCK=VERUNIT,           X
               HELP=('UNIT NAME OF VOLUME TO BE CONNECTED')
         IKJENDP
         EJECT
PCLRDA   IKJPARM DSECT=PDSRDA
PCLRDA1  IKJIDENT 'INDEX NAME',FIRST=ALPHA,OTHER=ALPHANUM,             X
               VALIDCK=VERINDX,MAXLNTH=8,PROMPT='INDEX NAME',          X
               HELP=('NAME OF INDEX TO BE PROCESSED')
RDACVOL  IKJKEYWD
         IKJNAME 'CVOL',SUBFLD=$CVOL5
$CVOL5   IKJSUBF
PCLRDA2  IKJIDENT 'CVOL NAME',FIRST=ALPHANUM,OTHER=ALPHANUM,           X
               VALIDCK=VERCVOL,MAXLNTH=6,                              X
               PROMPT='CVOL VOLUME SERIAL NUMBER',                     X
               HELP=('VOLUME SERIAL NUMBER OF CONTROL VOLUME')
         IKJENDP
         EJECT
PCLBLDA  IKJPARM DSECT=PDLBLDA
PCLBLDA1 IKJIDENT 'INDEX NAME',FIRST=ALPHA,OTHER=ALPHANUM,             X
               VALIDCK=VERINDX,MAXLNTH=8,PROMPT='INDEX NAME',          X
               HELP=('NAME OF INDEX TO BE ASSIGNED ALIAS')
PCLBLDA2 IKJIDENT 'ALIAS INDEX NAME',FIRST=ALPHA,OTHER=ALPHANUM,       X
               VALIDCK=VERINDX,MAXLNTH=8,PROMPT='ALIAS INDEX NAME',    X
               HELP=('NAME OF ALIAS TO BE ASSIGNED TO THE INDEX')
BLDACVOL IKJKEYWD
         IKJNAME 'CVOL',SUBFLD=$CVOL6
$CVOL6   IKJSUBF
PCLBLDA3 IKJIDENT 'CVOL NAME',FIRST=ALPHANUM,OTHER=ALPHANUM,           X
               VALIDCK=VERCVOL,MAXLNTH=6,                              X
               PROMPT='CVOL VOLUME SERIAL NUMBER',                     X
               HELP=('VOLUME SERIAL NUMBER OF CONTROL VOLUME')
         IKJENDP
         EJECT
PCLBLDG  IKJPARM DSECT=PDLBLDG
PCLBLDG1 IKJIDENT 'GENERATION INDEX NAME',FIRST=ALPHA,OTHER=ANY,       X
               PROMPT='GENERATION INDEX NAME',MAXLNTH=44,              X
               HELP=('NAME OF THE GENERATION DATA GROUP INDEX'),       X
               VALIDCK=VERDSNX
PCLBLDG2 IKJIDENT 'NUMBER OF ENTRIES',FIRST=NUMERIC,OTHER=NUMERIC,     X
               PROMPT='NUMBER OF ENTRIES',MAXLNTH=3,VALIDCK=VERSEQ,    X
               HELP=('NUMBER OF ENTRIES TO BE CONTAINED IN THE INDEX')
BLDGCVOL IKJKEYWD
         IKJNAME 'CVOL',SUBFLD=$CVOL7
PCLBLDG3 IKJKEYWD
         IKJNAME 'EMPTY'
PCLBLDG4 IKJKEYWD
         IKJNAME 'DELETE'
$CVOL7   IKJSUBF
PCLBLDG5 IKJIDENT 'CVOL NAME',FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6, X
               PROMPT='CVOL VOLUME SERIAL NUMBER',VALIDCK=VERCVOL,     X
               HELP=('VOLUME SERIAL NUMBER OF CONTROL VOLUME')
         IKJENDP
         EJECT
PCLREN   IKJPARM DSECT=PDLREN
PCLREN1  IKJIDENT 'OLD DATASET NAME',FIRST=ALPHA,OTHER=ANY,            X
               PROMPT='OLD DATA SET NAME ',MAXLNTH=44,                 X
               HELP=('NAME OF DATA SET TO BE RENAMED'),                X
               VALIDCK=VERDSNX
PCLREN2  IKJIDENT 'NEW DATASET NAME',FIRST=ALPHA,OTHER=ANY,            X
               PROMPT='NEW DATA SET NAME',MAXLNTH=44,                  X
               HELP=('NEW NAME OF DATA SET '),VALIDCK=VERDSNX
PCLREN3  IKJIDENT 'VOLUME SERIAL NUMBER LIST',LIST,FIRST=ALPHANUM,     X
               OTHER=ALPHANUM,MAXLNTH=6,VALIDCK=VERVOL,                X
               PROMPT='VOLUME SERIAL NUMBER LIST',                     X
               HELP=('VOL SERS OF DATA SET TO BE RENAMED')
         IKJENDP
         EJECT
IKJPUTL  DC    CL8'IKJPUTL'        PUTLINE SERVICE ROUTINE
IKJPTGT  DC    CL8'IKJPTGT'        PUTGET SERVICE ROUTINE
IKJSCAN  DC    CL8'IKJSCAN'        COMMAND SCAN SERVICE ROUTINE
IKJHELP  DC    CL8'HELP'           HELP SERVICE ROUTINE
DEVNAMET DC    CL8'DEVNAMET'       DEVICE NAME TABLE
         SPACE 2
OPTNTBL  DS    0H                  OPTION LIST TABLE
         MSG   'THE FOLLOWING OPTIONS ARE AVAILABLE:'
         MSG   ' BLDA     - CREATE AN ALIAS HIGH LEVEL INDEX'
         MSG   ' BLDG     - CREATE A GENERATION INDEX'
         MSG   ' BLDX     - CREATE AN INDEX STRUCTURE'
         MSG   ' CATLG    - CATALOG A DATA SET'
         MSG   ' CONNECT  - CONNECT A HIGH LEVEL VOLUME INDEX'
         MSG   ' DLTA     - DELETE AN ALIAS INDEX'
         MSG   ' DLTX     - DELETE AN INDEX STRUCTURE'
         MSG   ' END      - EXIT THIS PROGRAM'
         MSG   ' HELP     - OBTAIN HELP FOR SUBCOMMAND SYNTAX'
         MSG   ' OPTIONS  - DISPLAY OPTIONS AVAILABLE'
         MSG   ' RELEASE  - RELEASE A CONNECTED CONTROL VOLUME'
         MSG   ' RENAME   - RENAME A DIRECT ACCESS DATA SET'
         MSG   ' SCRATCH  - SCRATCH A DISK DATA SET'
         MSG   ' UNCATLG  - UNCATLG A DATA SET'
         MSG   ' VOL      - DISPLAY DATA SET VOLUME SERIAL NUMBERS'
         DC    X'FFFF'
         EJECT
CMDLIST  DS    0F                  COMMAND LIST
         DC    CL8'VOL     ',AL1(3),AL3(VOL),X'00',AL3(PCLDSN)
         DC    CL8'UNCATLG ',AL1(7),AL3(UNCATLG),X'00',AL3(PCLDSN)
         DC    CL8'CATLG   ',AL1(5),AL3(CATLG),X'00',AL3(PCLCATLG)
         DC    CL8'SCRATCH ',AL1(7),AL3(SCRATCH),X'20',AL3(PCLSCR)
         DC    CL8'DLTX    ',AL1(4),AL3(DLTX),X'20',AL3(PCLINDX)
         DC    CL8'BLDX    ',AL1(4),AL3(BLDX),X'20',AL3(PCLINDX)
         DC    CL8'DLTA    ',AL1(4),AL3(DLTA),X'00',AL3(PCLRDA)
         DC    CL8'BLDG    ',AL1(4),AL3(BLDG),X'30',AL3(PCLBLDG)
         DC    CL8'RELEASE ',AL1(7),AL3(RELEASE),X'00',AL3(PCLRDA)
         DC    CL8'HELP    ',AL1(4),AL3(HELP),X'40',AL3(0)
         DC    CL8'RENAME  ',AL1(6),AL3(RENAME),X'00',AL3(PCLREN)
         DC    CL8'BLDA    ',AL1(4),AL3(BLDA),X'00',AL3(PCLBLDA)
         DC    CL8'CONNECT ',AL1(7),AL3(CONNECT),X'00',AL3(PCLCON)
         DC    CL8'OPTIONS ',AL1(7),AL3(OPTIONS),X'40',AL3(0)
         DC    CL8'END     ',AL1(3),AL3(RETURN),X'40',AL3(0)
         DC    X'FFFF'
         EJECT
SCRMSGR  DS    0F                  SCRATCH RETURN CODE MSGS
         DC    A(MSGBDONE)         SCRATCH RC=0
         DC    A(MSG04R)           SCRATCH RC=4
         DC    A(MSG08R)           SCRATCH RC=8
         DC    A(MSG12R)           SCRATCH RC=12
         SPACE 2
SCRMSGL  DS    0F                  SCRATCH MESSAGES
         DC    A(MSGBDONE)         CONDITION CODE 0
         DC    A(MSG04S)           CONDITION CODE 4
         DC    A(MSG08S)           CONDITION CODE 8
         DC    A(MSG12S)           CONDITION CODE 12
         DC    A(MSG16S)           CONDITION CODE 16
         DC    A(MSG20S)           CONDITION CODE 20
         DC    A(MSG24S)           CONDITION CODE 24
         DC    A(MSG28S)           CONDITION CODE 28        *HMD 08/80*
         DC    A(MSG32S)           CONDITION CODE 32        *HMD 08/80*
         DC    A(MSG36S)           CONDITION CODE 36        *HMD 08/80*
         SPACE 2
CATMSGL  DS    0F                  CATALOG MESSAGES
         DC    A(MSGDONE)          CATALOG RC=0
         DC    A(MSG04C)           CATALOG RC=4
         DC    A(MSG08C)           CATALOG RC=8
         DC    A(MSG12C)           CATALOG RC=12
         DC    A(MSG16C)           CATALOG RC=16
         DC    A(MSG20C)           CATALOG RC=20
         DC    A(MSG24C)           CATALOG RC=24
         DC    A(MSG28C)           CATALOG RC=28
         SPACE 2
LOCMSGL  DS    0F                  LOCATE MESSAGES
         DC    A(MSGDONE)          LOCATE RC=0
         DC    A(MSG04L)           LOCATE RC=4
         DC    A(MSG08L)           LOCATE RC=8
         DC    A(MSG12L)           LOCATE RC=12
         DC    A(MSG16L)           LOCATE RC=16
         DC    A(MSG20L)           LOCATE RC=20
         DC    A(MSG24L)           LOCATE RC=24
         DC    A(MSG28L)           LOCATE RC=28
         DC    A(MSG32L)           LOCATE RC=32
         SPACE 2
RENMSGR  DS    0F                  RENAME MESSAGES
         DC    A(MSGBDONE)         RENAME RC=0
         DC    A(MSG04RE)          RENAME RC=4
         DC    A(MSG08RE)          RENAME RC=8
         DC    A(MSG12R)           RENAME RC=12
         SPACE 2
RENMSGL  DS    0F                  RENAME MESSAGES
         DC    A(MSGBDONE)         CONDITION CODE 0
         DC    A(MSG04S)           CONDITION CODE 4
         DC    A(MSG08S)           CONDITION CODE 8
         DC    A(MSG12RE)          CONDITION CODE 12
         DC    A(MSG16S)           CONDITION CODE 16
         DC    A(MSG20S)           CONDITION CODE 20
         DC    A(MSG24S)           CONDITION CODE 24
         DC    A(MSG28S)           CONDITION CODE 28        *HMD 08/80*
         DC    A(MSG32S)           CONDITION CODE 32        *HMD 08/80*
         EJECT
WASIZE   DC    A(LENWORK)          LENGTH OF WORK AREA
         SPACE 3
ANTBL    DS    0CL256
         DC    91X'01'
         DC    X'00'               $
         DC    4X'01'
         DC    X'00'               HYPHEN
         DC    26X'01'
         DC    2X'00'              #@
         DC    68X'01'
         DC    9X'00'              ABCDEFGHI
         DC    7X'01'
         DC    9X'00'              JKLMNOPQR
         DC    8X'01'
         DC    8X'00'              STUVWXYZ
         DC    6X'01'
         DC    10X'00'             0123456789
         DC    6X'01'
         SPACE 3
NTBL     DS    0CL256
         DC    240X'01'
         DC    10X'00'             0123456789
         DC    6X'01'
         EJECT
MHLPCPL  ATTACH EPLOC=IKJHELP,SF=L
         SPACE 2
LHLPCPL  EQU   *-MHLPCPL           LENGTH OF ATTACH LIST
         SPACE 2
MDAP2C   DS    0F                  DAIR PB 2C MAP
         DC    X'002C',H'1',F'0'
         DC    CL8'SYSHELP'
         SPACE 2
LDAP2C   EQU   *-MDAP2C            LENGTH OF DAIR PB
         EJECT
MSGDONE  MSG   'DONE'
MSGBDONE MSG   ' DONE'
MSG04R   MSG   ' NO DATA SETS SCRATCHED'
MSG08R   MSG   ' UNUSUAL CONDITION ENCOUNTERED DURING SCRATCH'
MSG12R   MSG   ' INVALID VOLUME LIST'
MSG04S   MSG   ' DATA SET NOT FOUND ON VOLUME'
MSG08S   MSG   ' PASSWORD NOT SUPPLIED'
MSG12S   MSG   ' DATA SET RETENTION PERIOD HAS NOT EXPIRED'
MSG16S   MSG   ' PERMANENT I/O ERROR'
MSG20S   MSG   ' VOLUME NOT MOUNTED'
MSG24S   MSG   ' OPERATOR UNABLE TO MOUNT VOLUME'
MSG28S   MSG   ' DATA SET IS IN USE BY ANOTHER JOB OR USER' *HMD 08/80*
MSG32S   MSG   ' SECURITY VIOLATION - RACF PROTECTED'       *HMD 08/80*
MSG36S   MSG   ' RACF DEFINITION CANNOT BE DELETED'         *HMD 08/80*
MSG04C   MSG   'REQUIRED CONTROL VOLUME NOT MOUNTED'
MSG08C   MSG   'EXISTING CATALOG STRUCTURE IS INCONSISTENT'
MSG12C   MSG   'INDEX HAS DATA SETS CATALOGED UNDER IT'
MSG16C   MSG   'REQUIRED INDEX STRUCTURE DOES NOT EXIST'
MSG20C   MSG   'SPACE NOT AVAILABLE ON SPECIFIED CONTROL VOLUME'
MSG24C   MSG   'IMPROPERLY NAME GENERATION DATA SET'
MSG28C   MSG   'PERMANENT I/O ERROR'
MSG04L   MSG   'CONTROL VOLUME NOT MOUNTED OR SYSCTLG NOT FOUND'
MSG08L   MSG   'NAME OF QUALIFIED NAME NOT FOUND'
MSG12L   MSG   'INDEX, ALIAS, OR CONTROL POINTER FOUND WHEN LIST DONE'
MSG16L   MSG   'DATA SET RESIDES AT LEVEL OF INDEX NOT SPECIFIED'
MSG20L   MSG   'SYNTAX ERROR IN DSNAME'
MSG24L   MSG   'PERMANENT I/O ERROR WHEN PROCESSING CATALOG'
MSG28L   MSG   'RELATIVE TRACK ADDRESS OUT OF SYSCTLG EXTENT'
MSG32L   MSG   'INVALID WORK AREA POINTER'
MSG04RE  MSG   ' NO DATA SETS RENAMED'
MSG08RE  MSG   ' UNUSUAL CONDITION ENCOUNTERED DURING RENAME'
MSG12RE  MSG   ' NEW DATA SET NAME ALREADY EXISTS ON VOLUME'
MSGENT   MSG   ' 12345678'
MSGAMBIG MSG   ' AMBIGUOUS SUBCOMMAND: '
MSGINVLD MSG   ' INVALID SUBCOMMAND: '
MSGCMDER MSG   ' COMMAND SYSTEM ERROR'
MSGHVOL  MSG   '--VOLUMES--'
MSGNSCR  MSG   ' DATA SET NOT SCRATCHED'
MSGNREN  MSG   ' DATA SET NOT RENAMED'
MSGNMT   MSG   ' VOLUME XXXXXX NOT MOUNTED'
MSGNCON  MSG   ' INDEX NOT CONNECTED TO VOLUME'
MSGPARSE MSG   ' PARSE ERROR CODE XX '
MSGMANY  MSG   ' TOO MANY VOLUME SERIALS TO PARSE'          *HMD 06/83*
MSGUTAPE MSG   ' UNIT = 3400-6 (6250 BPI) ASSUMED FOR VOLUME '
*                                                           *HMD 06/83*
MSGUDA   MSG   ' UNIT = 3350 ASSUMED FOR VOLUME '           *HMD 06/83*
MSGMCAT  MSG   ' ONLY FIRST TWENTY VOLUME SERIAL NUMBERS LISTED'
MSGLCAT  MSG   ' LOCATE BY TTR FOR NEXT VOLUME CONTROL BLOCK FAILED'
MSGNCAT  DC    C' IS NOT A CATALOGED DATA SET'
MSGACAT  DC    C' IS ALREADY A CATALOGED DATA SET'
         EJECT
         LTORG
         EJECT
WORKAREA DSECT                     WORK AREA
SAVE     DS    18A                 O/S SAVE AREA
VSAVE    DS    18A                 VALIDATION SAVE AREA
ASAVE    DS    18A                 ATTENTION EXIT SAVE AREA
R14SAVE  DS    A                   *
ANSADDR  DS    A                   PDS ANSWER AREA
ACMD     DS    A                   CMD TABLE ADDRESS
ATTNECB  DS    F                   ATTENTION ECB
AUPT     DS    A                   UPT ADDRESS
AECT     DS    A                   ECT ADDRESS
APSCB    DS    A                   PSCB ADDRESS
ACBUF    DS    A                   CMD BUFFER ADDRESS
APCL     DS    A                   PCL ADDRESS FOR PARSE
APUTL    DS    A                   IKJPUTL EP ADDRESS
APTGT    DS    A                   IKJPTGT EP ADDRESS
ASCAN    DS    A                   IKJSCAN EP ADDRESS
ADEVNT   DS    A                   DEVNAMET EP ADDRESS
RETCODE  DS    F                   RETURN CODE
HLPECB   DS    F                   HELP EVENT CONTROL BLOCK
HLPTCB   DS    A                   HELP TCB ADDRESS
PUTOLD1  DS    3F                  *
PUTOLD2  DS    3F                  *
SCANAREA DS    XL8                 CMD SCAN AREA
BASES    DS    3A                  BASE REGISTER SAVE AREA
CALLR    CALL  ,(,,,),MF=L         CALL LIST FARM           *HMD 06/83*
WORK     DS    XL100               UCB LOOKUP WORK AREA     *HMD 06/83*
DEVCLASS DS    X                   DEVICE CLASS X'20'=DASD  *HMD 06/83*
ADDRUCB  DS    A                   UCB ADDRESS              *HMD 06/83*
PARMLIST DS    10A                 *
CAMLIST  DS    5A                  CAM LIST AREA
IOPLPARM DS    10A                 IOPL PARM LIST
PARSELST DS    10A                 PARSE PARM LIST
HINDEX   DS    CL8                 INDEX 8 BYTES
AINDEX   DS    CL8                 ALTERNATE INDEX 8 BYTES
LDSNX    DS    H                   LENGTH OF DSNAME/INDEX
DSNAMEX  DS    CL45                DSN OR INDEX FIELD
DSNAME2  DS    CL45                RENAME DSN FIELD
CVOL     DS    CL6                 CNTL VOLUME NAME
XCVOL    DS    CL6                 VCB CVOL POINTER         *HMD 07/81*
DOUBLE   DS    D                   DOUBLE WORD
MSGTEXT1 DS    XL84                *
MSGTEXT2 DS    XL84                *
MSGENTER DS    XL13                PROMPT MSG
FLAGS    DS    XL2                 STATUS FLAGS
SEQNO    DS    H                   DATA SET SEQUENCE NUMBER
UNIT     DS    XL4                 UNIT TYPE
TTRX     DS    CL3                 SAVE TTR OF NEXT VCB     *HMD 07/81*
DAIRPB   DS    0D                  DAIR PARAMETER BLOCK
HLPCPL   DS    0D                  HELP ATTACH LIST
XVCB     DS    0D                  EXTRA VCB
         DS    CL265
         DS    0D                  ALIGN ON FULL WORD BOUNDARY
VCBPTR   DS    F                   POINTER TO GOTTEN VCB    *HMD 06/83*
VCBEND   DS    F                   END OF VCB BLOCK         *HMD 06/83*
VCBLNTH  DS    F                   LENGTH OF GOTTEN VCB     *HMD 06/83*
VCBYTES  EQU   (500*12)+2          ROOM FOR 500 VOLUMES     *HMD 06/83*
VCB      DS    0CL265              VOLUME CONTROL BLOCK
VCBNVOLS DS    H                   NUMBER OF VOL ENTRIES
VCBENT   DS    0CL240
         DS    CL240
         DS    CL10                FILLER                   *HMD 08/80*
VCBTTR   DS    CL3                 TTR OF NEXT VCB          *HMD 07/81*
         DS    CL4                 FILLER                   *HMD 07/81*
VCBCVOL  DS    CL6                 CVOL POINTER             *HMD 07/81*
LENWORK  EQU   *-WORKAREA          LENGTH OF WORK AREA
         EJECT
         IKJPPL
         SPACE 3
         IKJIOPL
IOPLEND  DS    0F
         SPACE 3
         IKJDAPL
         EJECT
         IKJPSCB
         EJECT
         IKJECT
         SPACE 3
         IKJCPPL
         EJECT
         IKJCSPL
         SPACE 3
         IKJCSOA
         EJECT
         IKJPGPB
         EJECT
         IKJDAP2C
         EJECT
DEVDSECT DSECT                     DEVICE TABLE DSECT
DEVNAME  DS    CL8                 DEVICE GENERIC NAME
DEVTYPE  DS    XL4                 DEVICE TYPE
         EJECT
VCBFLD   DSECT                     VOLUME CONTROL BLOCK FIELD
VCBUNIT  DS    XL4                 VCB UNIT TYPE
VCBVOL   DS    CL6                 VCB VOLUME SERIAL NUMBER
VCBSEQ   DS    H                   VCB
         EJECT
UCB      DSECT                     UCB DSECT
         DS    XL13                *
UCBNAME  DS    CL3                 UNIT NAME IN EBCDIC
UCBTYPE  DS    0XL4                UNIT TYPE
         DS    XL2                 *
UCBDEVC  DS    XL1                 UNIT DEVICE CLASS
UCBDEVT  DS    XL1                 UNIT DEVICE TYPE
         DS    XL8                 *
UCBVOL   DS    CL6                 VOLUME SERIAL NUMBER
         EJECT                                              *HMD 08/80*
         CVT   DSECT=YES,LIST=YES                           *HMD 08/80*
         END
