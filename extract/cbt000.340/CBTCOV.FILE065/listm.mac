         SPACE 2
         MACRO
&NAME    MSG   &TEXT
         LCLA  &A
&A       SETA  K'&TEXT-2+4
&NAME    DC    H'&A',H'0',C&TEXT
         MEND
         SPACE 3
         MACRO
&NAME    CLEAR &FIELD
         LCLC  &L
&L       SETC  'L'''
&NAME    MVI   &FIELD,X'40'
         MVC   &FIELD+1(&L&FIELD-1),&FIELD
         MEND
         SPACE 3
         MACRO
&NAME    MOVE  &FIELD,&REGA,&REGL
&NAME    BCTR  &REGL,0             MINUS 1 FOR EXEC
         MVC   &FIELD.(0),0(&REGA) MOVE 1 BYTE OF FIELD
         EX    &REGL,*-6           EXEC FOR PROPER LENGTH
         MEND
         TITLE 'TSO PARTITIONED DATA SET DIRECTORY PROCESSOR '
***********************************************************************
*                                                                     *
* TITLE -      LISTM       TSO PARTITIONED DATASET DIRECTORY LISTER   *
*                                                                     *
*                                                                     *
* RELEASE -    1.1         LISTM RELEASE                              *
*                                                                     *
* AUTHOR -     MICHAEL LEE EMIGH                                      *
*              UNITED AIR LINES - EXOKF COMPUTER CENTER               *
*              1200 W. ALGONQUIN ROAD                                 *
*              ELK GROVE VILLAGE, ILLINOIS                            *
*              PHONE: 312-952-4371
*                                                                     *
*                                                                     *
* FUNCTION -   THE LISTM COMMAND ALLOWS THE TSO USER TO DISPLAY       *
*              PARTITIONED DATASET DIRECTORY INFORMATION AT THE TSO   *
*              TERMINAL.                                              *
*              THE FUNCTIONS PROVIDED ARE:                            *
*                  1) LIST THE MEMBERS OF A PDS.                      *
*                  2) LIST THE TTR INFORMATION IN THE PDS DIRECTORY.  *
*                  3) LIST THE USER DATA INFORMATION IN THE PDS       *
*                     DIRECTORY.                                      *
*                  4) DISPLAY THE NUMBER OF DIRECTORY MEMBERS,        *
*                     THE NUMBER OF DIRECTORY BLOCKS USED, AND        *
*                     THE NUMBER OF DIRECTORY BLOCKS ALLOCATED.       *
*                                                                     *
* INPUT -      STANDARD LINKAGE CONVENTIONS                           *
*              REGISTER 1 - ADDRESS OF COMMAND PROCESSOR PARAMETER    *
*                           LIST
*                                                                     *
*                                                                     *
* OUTPUT -     RETURN TO TERMINAL MONITOR PROGRAM                     *
*              REGISTER 15 CONTAINS RETURN CODE AS FOLLOWS            *
*                 0 - NO ERRORS ENCOUNTERED                           *
*                >0 - ERROR                                           *
*                                                                     *
*                                                                     *
* ATTRIBUTES - REENTERANT, REUSABLE, REFRESHABLE                      *
*                                                                     *
* NOTES -      THIS ROUTINE READS AN ENTIRE TRACK OF DIRECTORY BLOCKS *
*              PER EXCP.                                              *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
R0       EQU   0                   REGISTER 0
R1       EQU   1                   REGISTER 1
R2       EQU   2                   REGISTER 2
R3       EQU   3                   REGISTER 3
R4       EQU   4                   REGISTER 4
R5       EQU   5                   REGISTER 5
RDBCT    EQU   6                   DIRECTORY BLOCK LOOP COUNTER
RBLK     EQU   7                   DIRECTORY BLOCK ADDRESS REGISTER
RPDSE    EQU   8                   DIRECTORY MEMBER ADDRESS REGISTER
RDIT     EQU   8                   DEVICE INTERFACE TABLE ADDR REG
RCPPL    EQU   8                   CPPL ADDR RESGISTER
RPDL     EQU   9                   PDL ADDR REGISTER
RLINK    EQU   10                  INTERNAL LINKAGE REGISTER
DATAR    EQU   11                  DATA AREA ADDRESS REGISTER
BASE     EQU   12                  BASE ADDRESS REGISTER
WORKR    EQU   13                  WORK AREA ADDRESS REGISTER
R14      EQU   14                  REGISTER 14
R15      EQU   15                  REGISTER 15
         SPACE 3
FQUOTE   EQU   128                 BIT TO INDICATE DSN IN QUOTES
FDATE    EQU   64                  BIT TO INDICATE DATE REQ
FDBUF    EQU   32                  BIT TO INDICATE DIRECTORY BUFFER
FALLOC   EQU   16                  BIT TO INDICATE ALLOCATION
FLIST    EQU   8                   BIT TO INDICATE LIST
FTTR     EQU   4                   BIT TO INDICATE TTR
FCRT     EQU   2                   BIT TO INDICATE CRT
FCOUNT   EQU   1                   BIT TO INDICATE COUNT
         SPACE 3
FF       EQU   X'FF'               HIGH VALUEUP
BLANK    EQU   C' '                SPACE
COMMA    EQU   C','                COMMA
ASTER    EQU   C'*'                ASTERIC
         SPACE 3
ACVT     EQU   16                  CVT ADDRESS
CVTPCNVT EQU   28                  CVT REL CONVERT ROUTINE ADDR
CVTPRLTV EQU   32                  CVT ABS CONVERT ROUTINE ADDR
OPENBIT  EQU   16                  BIT TO INDICATE DCB OPEN
         EJECT
LISTM    CSECT                     TSO PDS MEMBER LISTER ROUTINE
         SAVE  (14,12),T,*         SAVE CALLING REGISTERS
         LR    BASE,R15            LOAD BASE ADDRESS REGISTER
         USING LISTM,BASE          GIVE BASE ADDRESS TO ASSEMBLER
         LR    R2,WORKR            SAVE O/S SAVE AREA ADDR
         LR    RCPPL,R1            SAVE CPPL ADDRESS
         USING CPPL,RCPPL          SET CPPL DSECT
         LA    DATAR,DATAREA       LOAD DATA AREA ADDRESS
         USING DATAREA,DATAR       GIVE DATA AREA ADDR TO ASSEMBLER
         L     R4,WASIZE           LOAD WORK AREA SIZE
         GETMAIN R,LV=(R4)         GET MAIN STORAGE FOR WORK AREA
         LR    WORKR,R1            LOAD WORK AREA ADDR REG
         USING WORKAREA,WORKR      GIVE WORK AREA ADDR TO ASSEMBLER
         ST    WORKR,8(R2)         CHAIN NEW SAVE AREA
         LR    R1,R4               LENGTH OF WORK AREA
         LR    R0,WORKR            ADDRESS OF WORK AREA
         SLR   R15,R15             LOAD PAD BYTE FOR CLEAR
         MVCL  R0,R14              CLEAR WORK AREA
         ST    R2,SAVE+4           CHAIN OLD SAVE AREA
         LOAD  EPLOC=IKJPUTL       LOAD PUTLINE SERVICE ROUTINE
         ST    R0,APUTL            SAVE IKJPUTL EP ADDR
         LA    R1,PUTLPARM         LOAD PUTLINE PARM FIELD ADDR
         USING IOPL,R1             SET IOPL DSECT
         MVC   IOPLECT,CPPLECT     MOVE ECT ADDR TO IOPL
         MVC   IOPLUPT,CPPLUPT     MOVE UPT ADDR TO IOPL
         LA    R0,ATTNECB          LOAD ATTN ECB ADDR
         ST    R0,IOPLECB          STORE ECB ADDR IN IOPL
         EJECT
         LA    R1,PARMLIST         AREA FOR PARSE PARMS
         USING PPL,R1              SET PPL DSECT
         MVC   PPLUPT,CPPLUPT      MOVE UPT ADDR TO PPL
         MVC   PPLECT,CPPLECT      MOVE ECT ADDR TO PPL
         MVC   PPLCBUF,CPPLCBUF    MOVE CMD BUFFER ADDR TO PPL
         ST    WORKR,PPLUWA        MOVE WORK AREA ADDR FOR EXITS
         LA    R0,ATTNECB          LOAD ATTENTION ECB ADDR
         ST    R0,PPLECB           STORE IN PPL
         LA    R0,APDL            LOAD PDL ANSWER AREA ADDR
         ST    R0,PPLANS           STORE ADDR IN PPL
         MVC   PPLPCL,APCL         MOVE PCL ADDR TO PPL
         LINK  EPLOC=IKJPARS       INVOKE PARSE
         LTR   R15,R15             TEST PARSE RETURN CODE
         BZ    LISTM2              IF ZERO THEN OK
         CH    R15,=H'8'           ATTENTION ENTERED?
         BE    RETURN              YES, THEN RETURN
         MVC   MSGTEXT2,MSGPARSE   MOVE PARSE MESSAGE TO MSG LINE
         CVD   R15,DOUBLE          CONVERT RETURN CODE TO DECIMAL
         OI    DOUBLE+7,X'F0'      NEUTRALIZE SIGN
         UNPK  MSGTEXT2+21(2),DOUBLE UNPACK RETURN CODE TO MSG
         LA    R0,MSGTEXT2         LOAD MSG ADDRESS
         LA    R1,MSGCMDER         LOAD COMMAND SYSTEM ERROR MSG ADDR
         B     ERROR               GO PRINT ERROR MSG
         EJECT
LISTM2   DS    0H                  CHECK ********************
         L     RPDL,APDL           LOAD PDL ADDRESS
         USING PDL,RPDL            SET PDL DSECT
         TM    PDLLIST+1,1         TEST IF LIST SPECIFIED
         BZ    LISTM3              IF NOT SKIP FOLLOWING PROC
         OI    FLAGS,FLIST         INDICATE LIST SPECIFIED
         MVI   ESIZE+1,12          ENTRY SIZE
         SPACE 2
LISTM3   DS    0H                  CHECK COUNT KEYWORD
         TM    PDLCT+1,1           TEST IF COUNT SPECIFIED
         BZ    LISTM4              IF NOT SPECIFIED THEN SKIP
         OI    FLAGS,FCOUNT        INDICATE COUNT SPECIFIED
         SPACE 2
LISTM4   DS    0H                  *
         TM    FLAGS,FLIST+FCOUNT  TEST IF LIST OR COUNT SPECIFIED
         BZ    RETURN              IF NEITHER SPECIFIED THEN ERROR
         CLEAR DSN                 CLEAR DSNAME FIELD
         L     R3,PDLDSN           LOAD DSNAME ADDRESS
         LH    R4,PDLDSN+4         LOAD DSNAME FIELD LENGTH
         STH   R4,LDSN             SAVE DSNAME FIELD LENGTH
         MOVE  DSN,R3,R4           MOVE DSNAME
         TM    PDLDSN+6,64         TEST IF DSN IN QUOTES
         BZ    ALLOC               IF NOT GO ALLOCATE
         OI    FLAGS,FQUOTE        ELSE INDICATE DSN IN QUOTES
         EJECT
ALLOC    DS    0H                  ALLOC DSNAME
         LA    R1,DAIRPARM         LOAD DAPL LIST ADDRESS
         USING DAPL,R1             SET DAPL DSECT
         LA    R2,DAPPB            LOAD DAIR PB ADDRESS
         USING DAPB08,R2           SET DAP08 DSECT
         MVC   DAPPB(LDAP08),MDAP08 MOVE IN DAIR 08 PB
         MVC   DAPLUPT,CPPLUPT     MOVE UPT ADDR TO DAPL
         MVC   DAPLECT,CPPLECT     MOVE ECT ADDR TO DAPL
         MVC   DAPLPSCB,CPPLPSCB   MOVE PSCB ADDR TO DAPL
         LA    R0,ATTNECB          LOAD ATTN ECB ADDR
         ST    R0,DAPLECB          STORE ECB ADDR IN DAPL
         ST    R2,DAPLDAPB         STORE DAPB ADDR IN DAPL
         LA    R0,PDSN             LOAD DSNAME ADDRESS
         ST    R0,DA08PDSN         STORE DSN ADDR IN DAPB
         TM    FLAGS,FQUOTE        TEST FOR DSN IN QUOTES
         BO    ALLOC0              IF QUOTES THEN SKIP
         OI    DA08CTL,DA08UID     INDICATE USERID PREFIX
         SPACE 2
ALLOC0   DS    0H                  *
         TM    PDLDSN+22,128       TEST IF PASSWORD PRESENT
         BZ    ALLOC1              IF NOT THEN SKIP PSWD PROC
         L     R3,PDLDSN+16        LOAD PASSWORD ADDRESS
         LH    R4,PDLDSN+20        LOAD PASSWORD LENGTH
         MOVE  DA08PSWD,R3,R4      MOVE PASSWORD
         SPACE 2
ALLOC1   DS    0H                  *
         NC    PDLVOL(2),PDLVOL    TEST IF VOLUME ENTERED
         BZ    ALLOC2              IF NOT THEN SKIP VOL PROC
         L     R3,PDLVFLD1         LOAD VOLUME ADDRESS
         LH    R4,PDLVFLD1+4       LOAD VOLUME LENGTH
         MOVE  DA08SER,R3,R4       MOVE VOLUME SERIAL NUMBER
         SPACE 2
ALLOC2   DS    0H                  CHECK FOR UNIT
         NC    PDLUNIT(2),PDLUNIT  UNIT FIELD PRESENT?
         BZ    ALLOC3              NO, THEN SKIP CODE
         L     R3,PDLNFLD1         LOAD UNIT FIELD ADDRESS
         LH    R4,PDLNFLD1+4       LOAD UNIT FIELD LENGTH
         MOVE  DA08UNIT,R3,R4      MOVE UNIT FIELD
         EJECT
ALLOC3   DS    0H                  *
         LINK  EPLOC=IKJDAIR       LINK TO DAIR ROUTINE
         LTR   R15,R15             DAIR COMPLETE NORMALLY?
         BZ    ALLOC4              YES, THEN CONTINUE
         TM    FLAGS,FQUOTE        BEEN HERE BEFORE OR DSN IN QUOTES?
         BNZ   DAIRBAD             YES, THEN GO TO DAIR FAIL ROUTINE
         ST    R15,SAVE            SAVE RETURN CODE
         OI    FLAGS,FQUOTE        INDICATE PASSED THRU
         LA    R1,PARMLIST         LOAD PARM LIST ADDRESS
         USING DFPL,R1             SET DFPL DSECT
         MVC   DFPLUPT,CPPLUPT     MOVE UPT ADDRESS
         MVC   DFPLECT,CPPLECT     MOVE ECT ADDRESS
         LA    R0,ATTNECB          LOAD ATTENTION ECB ADDRESS
         ST    R0,DFPLECB          STORE IN DFPL
         LA    R2,DEFPB            LOAD PB ADDRESS
         ST    R2,DFPLDFPB         STORE IN DFPL
         USING DFPB,R2             SET DEFAULT PB DSECT
         LA    R0,PDSN             LOAD DSNAME ADDRESS
         ST    R0,DFPBDSN          STORE IN DFPB
         MVC   DFPBPSCB,CPPLPSCB   MOVE PSCB ADDRESS
         MVI   DFPBCODE,X'04'      SET FUNCTION CODE
         MVI   DFPBCNTL,DFPBUID    INDICATE TO PREFIX USERID
         LINK  ,SF=(E,DEFLINK)     LINK TO DEFAULT ROUTINE
         LTR   R15,R15             TEST FOR SUCCESSFUL COMPLETION
         BZ    ALLOC               GO RETRY DAIR
         L     R15,SAVE            RELOAD RETURN CODE
         B     DAIRBAD             GO TO DAIR FAIL ROUTINE
         EJECT
ALLOC4   DS    0H                  DAIR SUCCESSFUL
         USING DAPB08,R2           RESET DAPB08 ADDRESSIBILITY
         OI    FLAGS,FALLOC        INDICATE FILE ALLOCATED
         MVC   DCB,PDSDCB          MOVE IN PATTERN DCB
         LA    R0,DCB              LOAD DCB ADDRESS
         ST    R0,ADCB             STORE DCB ADDR IN OPEN/CLOSE LIST
         ST    R0,IOBDCBPT         STORE DCB ADDR IN IOB
         LA    R0,ECB              LOAD ECB ADDRESS
         ST    R0,IOBECBPT         STORE ECB ADDRESS IN IOB
         MVI   IOB,X'42'           INDICATE IOB UNRELATED
         MVI   ADCB,128            SET END OF LIST INDICATOR
         MVC   DCBDDNAM,DA08DDN    MOVE DDNAME TO DCB
         MVC   HKEY,HVALUE         SET HIGH KEY TO HIGH VALUE
         TM    PDLDSN+14,128       MEMBER NAME PRESENT
         BZ    ALLOC5              NO, THEN SKIP CODE
         L     R3,PDLDSN+8         LOAD MEMBER NAME ADDRESS
         LH    R4,PDLDSN+12        LOAD MEMBER NAME LENGTH
         BCTR  R4,0                LENGTH MINUS 1 FOR EXECUTE
         MVC   LKEY(0),0(R3)       MOVE 1 BYTE
         EX    R4,*-6              EXECUTE FOR PROPER LENGTH
         MVC   HKEY(0),0(R3)       MOVE 1 BYTE
         EX    R4,*-6              EXECUTE FOR PROPER LENGTH
         SPACE 2
ALLOC5   DS    0H                  TEST FOR PO
         TM    DA08DSO,X'02'       TEST FOR PO ORGANIZATION
         BO    SETUP               IF PO GO SETUP
         SR    R0,R0               INDICATE NO SECOND LVL MSG
         LA    R1,MSGORG           LOAD ERROR MSG ADDR
         B     ERROR               GO WRITE ERROR MSG
         EJECT
SETUP    DS    0H                  EXECUTE MAIN PROCEDURE
         OPEN  ,MF=(E,ADCB)        OPEN DCB
         TM    DCBOFLGS,16         TEST FOR SUCCESSFUL OPEN
         BZ    OPENERR             IF NOT OPEN THEN ERROR
         LA    R0,CTCP             LOAD COUNT CHANNEL PGM ADDR
         ST    R0,IOBSTART         STORE CP ADDR IN IOB
         LA    R0,CCHHR2+3         LOAD CCHHR2 ADDR
         ST    R0,CCW2             STORE IN CHAN PGM
         LA    R0,CCW2             LOAD CCW2 ADDR
         ST    R0,CCW4             STORE IN CP FOR TIC
         LA    R0,CCHHR3+3         LOAD CCHHR3 ADDR
         ST    R0,CCW5             STORE IN CCW5
         LA    R0,CCW5             LOAD CCW5 ADDR
         ST    R0,CCW7             STORE IN CCW7
         OC    CTCP,ACHPGM         OR IN CMD AND LENGTH FIELDS
         LA    R0,256              LOAD TTR OF FIRST D. B.
         L     R1,DCBDEBAD         LOAD DEB ADDR FROM DCB
         LA    R2,IOBSEEK          LOAD IOB SEEK ADDRESS
         LR    R3,WORKR            SAVE WORK AREA ADDRESS
         STM   R4,WORKR,SAVE+20    SAVE CRITICAL REGISTERS
         L     R15,ACVT            LOAD CVT ADDRESS
         L     R15,CVTPCNVT(R15)   LOAD CONVERT ROUTINE ADDR
         BALR  R14,R15             LINK TO CONVERT ROUTINE
         LR    WORKR,R3            RELOAD WORK AREA REGISTER
         LM    R4,WORKR,SAVE+20    RELOAD CRITICAL REGISTERS
         MVC   DCBFDAD,IOBSEEK     MOVE SEEK ADDR TO DCB
         MVC   CCHHR1,IOBSEEK      MOVE SEEK ADDR TO CCHHR1
         MVC   CCHHR2,IOBSEEK      MOVE SEEK ADDR TO CCHHR2
         MVC   CCHHR3,IOBSEEK      MOVE SEEK ADDR TO CCHHR3
         EXCP  IOB                 START COUNT CHANNEL PGM
         TM    FLAGS,FLIST         TEST IF LIST SPECIFIED
         BZ    SETUP4              IF NOT THEN SKIP CODE
         NC    PDLLFLD1+6(2),PDLLFLD1+6 TEST FOR START MEMBER
         BZ    SETUP0              IF NOT THEN SKIP CODE
         XC    LKEY,LKEY           CLEAR LOW KEY
         L     R3,PDLLFLD1         LOAD MEMBER ADDR
         LH    R4,PDLLFLD1+4       LOAD MEMBER LENGTH
         MOVE  LKEY,R3,R4          MOVE MEMBER
         NC    PDLLFLD2+6(2),PDLLFLD2+6 TEST FOR END MEMBER
         BZ    SETUP0              IF NOT THEN SKIP CODE
         MVC   HKEY,HVALUE         SET HIGH KEY TO HIGH VALUE
         L     R3,PDLLFLD2         LOAD MEMBER ADDRESS
         LH    R4,PDLLFLD2+4       LOAD MEMBER LENGTH
         MOVE  HKEY,R3,R4          MOVE MEMBER
         EJECT
SETUP0   DS    0H                  *
         NC    PDLUSER(2),PDLUSER  TEST IF USER KEY SPEC.
         BZ    SETUP3              IF NOT PRESENT THEN SKIP CODE
         CLC   =H'2',PDLUSER       DATE SPECIFIED?
         BE    SETUP2              YES, THEN GO PROCESS DATE
         MVC   NUSER,=H'62'        MOVE IN DEFAULT
         NC    PDLUFLD1+6(2),PDLUFLD1+6 TEST IF BYTES PRESENT
         BZ    SETUP1              IF NOT PRESENT THEN SKIP CODE
         L     R3,PDLUFLD1         LOAD ADDR OF BYTES
         LH    R4,PDLUFLD1+4       LOAD FIELD LENGTH
         BCTR  R4,0                MINUS 1 FOR SETUP
         PACK  DOUBLE,0(0,R3)      PACK ONE BYTE
         EX    R4,*-6              EXECUTE FOR PROPER LENGTH
         CVB   R4,DOUBLE           CONVERT TO BINARY
         CH    R4,NUSER            MAKE SURE NOT TOO LONG
         BH    SETUP1              IF HIGH THEN USE DEFAULT
         STH   R4,NUSER            ELSE SAVE USER COUNT
         SPACE 2
SETUP1   DS    0H                  COMPUTE ENTRY SIZE
         LH    R1,NUSER            LOAD NUMBER OF USER BYTES
         SLL   R1,1                MULTIPLY BY 2
         AH    R1,ESIZE            ADD ENTRY SIZE
         LA    R1,15(R1)           INCREMENT FOR SPACES
         STH   R1,ESIZE            SAVE NEW ENTRY SIZE
         B     SETUP3              CONTINUE
         SPACE 2
SETUP2   DS    0H                  CHECK DATE PARAMETER
         LA    R1,7                LOAD DATE LENGTH
         AH    R1,ESIZE            ADD CURRENT ENTRY SIZE
         STH   R1,ESIZE            SAVE TOTAL ENTRY SIZE
         SPACE 2
SETUP3   DS    0H                  *
         NC    PDLTTR(2),PDLTTR    TEST IF TTR SPECIFIED
         BZ    SETUP4              IF NOT THEN SKIP CODE
         OI    FLAGS,FTTR          INDICATE TTR SPECIFIED
         LH    R1,ESIZE            LOAD ENTRY SIZE
         LA    R1,12(R1)           INCREMENT FOR TTR LENGTH
         STH   R1,ESIZE            SAVE NEW ENTRY SIZE
         SPACE 2
SETUP4   DS    0H                  *
         L     RDIT,DCBDVTBL       LOAD DEVICE TABLE ADDR
         USING DIT,RDIT            SET DIT DSECT
         LA    R2,264              LOAD D. B. AND KEY LENGTH
         TM    DITTFI,1            TEST FOR DEVICE TOLERANCE FACTOR
         BZ    SETUP5              IF NOT THEN SKIP TOLERANCE COMPUTE
         MH    R2,DITTF            MULTIPLY BY TOLERANCE FACTOR
         SRL   R2,9                SHIFT RESULT 9 BITS TO RIGHT
         EJECT
SETUP5   DS    0H                  *
         SR    R4,R4               CLEAR SCRATCH REGISTER
         SR    R5,R5               CLEAR SCRATCH REGISTER
         IC    R4,DITBO            INSERT NORMAL BLOCK OVERHEAD
         IC    R5,DITBOLB          INSERT LAST BLOCK OVERHEAD
         TM    DITTFI,8            TWO BYTES OF BLOCK OVERHEAD
         BZ    SETUP6              IF NOT THEN SKIP CODE
         LH    R4,DITBO            RELOAD BLOCK OVERHEAD
         LR    R5,R4               LAST BLOCK IS THE SAME
         SPACE 2
SETUP6   DS    0H                  CALCULATE EFFECTIVE BLOCK LENGTH
         AR    R4,R2               COMPUTE NORMAL EFF. BLOCK LENGTH
         AR    R5,R2               COMPUTE LAST EFF. BLOCK LENGTH
         SR    R2,R2               CLEAR SCRATCH REGISTER
         LH    R3,DITMTL           LOAD MAXIMUM TRACK LENGTH
         SR    R3,R5               MINUS EFF. LAST BLOCK LENGTH
         DR    R2,R4               DIVIDE REMAINDER BY EFF. BLK LENGTH
         LA    R3,1(R3)            ADD 1 FOR LAST BLOCK
         STH   R3,NDBT             STORE # D. B. PER TRACK
         STH   R3,NDBR             STORE # D. B. PER READ
         LA    R2,3(R3)            LOAD NUMBER OF CCWS REQUIRED
         SLL   R2,3                MULTIPLY BY CCW LENGTH
         SLL   R3,8                MULTIPLY BY D. B. LENGTH
         LA    R0,0(R2,R3)         COMPUTE BUFFER LENGTH
         STH   R0,DCBBUFL          SAVE BUFFER LENGTH IN DCB
         GETMAIN R,LV=(0)          GETMAIN FOR BUFFER
         ST    R1,DCBBUFCB         SAVE BUFFER ADDRESS IN DCB
         OI    FLAGS,FDBUF         INDICATE BUFFER OBTAINED
         LA    R2,0(R1,R2)         COMPUTE ADDR OF FIRST D. B.
         ST    R2,ADBLK            SAVE FIRST D. B. ADDR
         LH    R4,NDBT             LOAD DIRECTORY BLK COUNT
         MVC   0(8,R1),READHA      MOVE READ HA CCW TO CP AREA
         LA    R1,8(R1)            POINT TO NEXT CCW
         EJECT
SETUP7   DS    0H                  CCW CONSTRUCTION LOOP
         XC    0(8,R1),0(R1)       CLEAR CCW TO ZERO
         ST    R2,0(R1)            STORE D. B. ADDR IN CCW
         OC    0(8,R1),RDATA       OR IN REST OF CCW
         LA    R1,8(R1)            POINT TO NEXT CCW
         LA    R2,256(R2)          POINT TO NEXT D. B. BUFFER
         BCT   R4,SETUP7           IF MORE D. B. THEN REPEAT
         XC    0(8,R1),0(R1)       CLEAR CCW
         LA    R0,DCBFDAD+3        LOAD CCHHR ADDRESS IN DCBFDAD
         ST    R0,0(R1)            STORE CCHHR ADDR IN NEXT CCW
         OC    0(8,R1),RDCT        OR IN REST OF READ COUNT CCW
         GTSIZE
         LTR   R0,R0               TEST IF TERMINAL IS CRT
         BZ    SETUP8              IF NOT CRT THEN SKIP
         BCTR  R1,0                ELSE MINUS 1 FOR ATTR BYTE
         SPACE 2
SETUP8   DS    0H                  *
         CLEAR MSGTEXT1            CLEAR MSG LINE 1
         CH    R1,ESIZE            COMPARE TO ENTRY SIZE
         BNL   SETUP9              IF NOT LOW THEN SKIP CODE
         LH    R1,ESIZE            LOAD LINE SIZE
         SPACE 2
SETUP9   DS    0H                  *
         LA    R1,4(R1)            ADD MSG PREFIX LENGTH
         STH   R1,LSIZE            SAVE COMPUTED LINE SIZE
         XC    MSGTEXT1(4),MSGTEXT1 CLEAR MSG PREFIX
         MVC   MSGTEXT1(2),=H'8'   SET UP TO WRITE ONE BLANK LINE
         WAIT  ECB=ECB             WAIT FOR COUNT CP TO COMPLETE
         CLI   ECB,X'7F'           TEST FOR NORMAL COMPLETION
         BE    IOERR1              IF NORMAL THEN ERROR
         TM    IOBCSW+3,X'01'      SHOULD BE UNIT EXCEPTION
         BZ    IOERR1              IF NOT THEN ERROR
         NI    IOBFLAG1,X'FB'      RESET IOB ERROR FLAGS
         NI    DCBIFLGS,X'3F'      RESET DCB ERROR FLAGS
         BAL   RLINK,PUTLINE       WRITE A BLANK LINE
         L     R2,DCBBUFCB         LOAD BUFFER ADDRESS
         ST    R2,IOBSTART         STORE IN IOB
         EJECT
EXEC     DS    0H                  CHECK BEFORE READ A TRACK
         CLC   DCBFDAD+3(4),CCHHR2+3 TEST FOR LAST TRK
         BNE   EXEC0               IF NOT LAST TRACK SKIP CODE
         L     R2,DCBBUFCB         RELOAD BUFFER ADDRESS
         SR    R3,R3               CLEAR A SCRATCH REGISTER
         IC    R3,CCHHR2+7         INSERT NUMBER OF LAST D. B.
         STH   R3,NDBR             STORE COUNT FOR LATER USE
         SLL   R3,3                MULTIPLY BY LENGTH OF CCW
         LA    R1,0(R2,R3)         POINT LAST CCW
         MVI   4(R1),X'20'         RESET CCW COMMAND CHAIN FLAG
         SPACE 2
EXEC0    DS    0H                  ISSUE CHANNEL PROGRAM TO READ TRACK
         MVC   IOBSEEK(8),DCBFDAD  RESET IOB SEEK ADDRESS
         XC    ECB,ECB             CLEAR ECB
         EXCP  IOB                 START CHANNEL PGM
         LH    RDBCT,NDBR          LOAD NUMBER OF DIRECTORY READ
         L     RBLK,ADBLK          LOAD ADDRESS OF FIRST BLOCK
         WAIT  ECB=ECB             WAIT FOR CHANNEL PGM GO COMPLETE
         CLI   ECB,X'7F'           TEST FOR NORMAL COMPLETION
         BE    EXEC1               IF NORMAL THEN OK
         SR    R0,R0               INDICATE NO SECOND LVL MSG
         LA    R1,MSGDCPE          LOAD DIRECTORY CP ERR MSG
         B     ERROR               GO PRINT ERROR MSG
         USING DIRENTRY,RPDSE      SET DIRECTORY DSECT
         EJECT
EXEC1    DS    0H                  *
         LH    R2,0(RBLK)          LOAD D. B. LENGTH
         LA    R2,0(R2,RBLK)       POINT TO EOB
         ST    R2,EOBAD            SAVE EOB ADDRESS
         LA    RPDSE,2(RBLK)       POINT TO FIRST ENTRY
         SPACE 2
EXEC2    DS    0H                  PDS D. B. DEBLOCK LOOP
         CLC   NAME,HVALUE         LAST DIRECTORY ENTRY
         BE    COUNT               IF YES, THEN DONE
         LA    R1,1                LOAD MEMBER COUNT INCREMENT
         AH    R1,CTR              ADD PREVIOUS COUNT
         STH   R1,CTR              SAVE NEW COUNT
         TM    FLAGS,FLIST         TEST IF LIST SPECIFIED
         BZ    EXEC11              IF NOT SKIP CODE
         CLC   NAME,LKEY           MEMBER LESS THEN START MEMBER
         BL    EXEC11              IF LOW THEN SKIP IT
         CLC   NAME,HKEY           MEMBER GREATER THAN END MEMBER
         BH    EXEC10              IF HIGH THEN SKIP IT
         LH    R5,MSGTEXT1         LOAD NUMBER OF BYTES USED
         LR    R1,R5               LOAD OFFSET
         LA    R5,MSGTEXT1(R5)     POINT TO NEXT AREA
         AH    R1,ESIZE            ADD ENTRY SIZE
         CH    R1,LSIZE            COMPARE TO LINE LENGTH
         BNH   EXEC3               IF LOW THEN GO BUILD LINE
         BAL   RLINK,PUTLINE       GO PRINT LINE
         LH    R1,ESIZE            LOAD ENTRY SIZE
         LA    R1,4(R1)            ADD PREFIX LENGTH
         LA    R5,MSGTEXT1+4       POINT TO NEXT AREA
         SPACE 2
EXEC3    DS    0H                  *
         STH   R1,MSGTEXT1         STORE NEW LINE LENGTH
         USING LINE,R5             SET LINE DSECT
         MVC   LNAME,NAME          MOVE MEMBER NAME TO LINE
         TM    INDIC,128           TEST IF ALIAS
         BZ    EXEC4               IF NOT THEN SKIP CODE
         MVC   LALIAS,=C'-A'       MOVE IN ALIAS INDICATOR
         SPACE 2
EXEC4    DS    0H                  *
         LA    R5,LLTTR            POINT TO NEXT FIELD
         TM    FLAGS,FTTR          TTR SPECIFIED?
         BZ    EXEC5               IF NOT THEN SKIP CODE
         UNPK  UNPKA,TTR(5)        UNPK TTR AND IND
         TR    UNPKA,TRTBL-240     TRANSLATE
         MVC   LTTR,UNPKA          MOVE TTR TO LINE
         MVC   LCIND,UNPKA+6       MOVE IND TO LINE
         LA    R5,LLUSER           POINT TO NEXT FIELD
         EJECT
EXEC5    DS    0H                  PRINT USER DATA, IF ANY
         CLC   =H'2',PDLUSER       DATE REQUESTED?
         BE    EXEC9               YES, THEN GO PROCESS DATE
         CLC   =H'1',PDLUSER       USER DATA FIELD REQUESTED?
         BNE   EXEC11              NO, THEN SKIP CODE
         LA    R1,31               LOAD MASK
         IC    R2,INDIC            LOAD INDICATOR FIELD
         NR    R1,R2               STRIP OFF TTR AND FLAGS
         BZ    EXEC8               IF ZERO THEN NO USER DATA
         SLL   R1,1                CONVERT TO BYTES
         LA    R2,USERD            LOAD USER DATA FIELD ADDR
         CH    R1,NUSER            COMPARE NUMBER OF BYTES TO MAX
         BNH   EXEC6               IF NOT HIGH THEN USE NUMBER
         LH    R1,NUSER            LOAD MAXIMUM
         SPACE 2
EXEC6    DS    0H                  *
         UNPK  UNPKA,0(5,R2)       UNPACK 4 BYTES OF USER DATA
         TR    UNPKA,TRTBL-240     TRANSLATE
         CH    R1,=H'4'            MORE THAN 4 BYTES LEFT?
         BL    EXEC7               IF NOT THEN SKIP CODE
         MVC   LUSER,UNPKA         MORE USER DATA TO PRINT LINE
         LA    R5,LLNEXT           POINT TO NEXT FIELD
         LA    R2,4(R2)            POINT TO NEXT 4 USER DATA BYTES
         SH    R1,=H'4'            DECREMENT BYTES REMAINING
         BZ    EXEC8               IF NO MORE BYTES THEN DONE
         B     EXEC6               ELSE GO DO IT AGAIN
         SPACE 2
EXEC7    DS    0H                  *
         SLL   R1,1                MULTIPLY BY 2 FOR PRINT POSITIONS
         BCTR  R1,0                MINUS 1 FOR EXECUTE
         MVC   LUSER(0),UNPKA      MOVE 1 BYTE
         EX    R1,*-6              EXECUTE FOR PROPER LENGTH
         LA    R5,2(R1,R5)         POINT PAST LAST BYTE WRITTEN
         SPACE 2
EXEC8    DS    0H                  *
         LA    R1,MSGTEXT1         LOAD LINE START ADDR
         SR    R5,R1               COMPUTE REAL LINE SIZE
         STH   R5,MSGTEXT1         STORE IN MSG PREFIX
         BAL   RLINK,PUTLINE       LINK AND PRINT LINE
         B     EXEC11              GO ADVANCE TO NEXT BLOCK
         EJECT
EXEC9    DS    0H                  PROCESS DATE FIELD
         LA    R1,31               LOAD AND MASK
         IC    R2,INDIC            INSERT INDICATOR FIELD
         NR    R1,R2               COMPUTE # USER DATA FIELD HW
         BZ    EXEC11              IF ZERO THEN SKIP CODE
         SLL   R1,1                CONVERT TO # BYTES
         SH    R1,=H'4'            SUBTRACT DATE FIELD LENGTH
         BNP   EXEC11              IF NOT POSITIVE, THEN ERROR
         LA    R2,USERD(R1)        POINT TO DATE FIELD
         CLI   0(R2),X'FF'         DATE FIELD INDICATOR?
         BNE   EXEC11              IF NOT THEN ERROR
         UNPK  UNPKA,1(4,R2)       UNPACK DATE
         TR    UNPKA,TRTBL-240     TRANSLATE TO NUMERICS
         MVC   LUSER(5),UNPKA+3    MOVE TO PRINT LINE
         B     EXEC11              GO ADVANCE TO NEXT ENTRY
         SPACE 2
EXEC10   DS    0H                  CHECK FOR AT END
         TM    FLAGS,FCOUNT        COUNT REQUESTED?
         BZ    COUNT               IF NOT THEN DONE
         SPACE 2
EXEC11   DS    0H                  ADVANCE TO NEXT ENTRY
         LA    R2,31               LOAD AND MASK
         IC    R3,INDIC            INSERT INDICATOR FIELD
         NR    R2,R3               COMPUTE # USER DATA HW
         SLL   R2,1                CONVERT TO BYTES
         LA    RPDSE,12(R2,RPDSE)  POINT TO NEXT ENTRY
         C     RPDSE,EOBAD         END OF BLOCK?
         BL    EXEC2               IF LOW THEN NOT EOB
         LA    RBLK,256(RBLK)      POINT TO NEXT BLOCK
         BCT   RDBCT,EXEC1         IF MORE D. B. THEN REPEAT
         B     EXEC                GO READ NEXT TRACK
         EJECT
COUNT    DS    0H                  *
         TM    FLAGS,FLIST         LIST SPECIFIED?
         BZ    COUNT0              IF NOT THEN SKIP CODE
         BAL   RLINK,PUTLINE       WRITE LAST LINE
         MVI   MSGTEXT1+1,5        SET LINE LENGTH TO 5
         BAL   RLINK,PUTLINE       WRITE BLANK LINE
         SPACE 2
COUNT0   DS    0H                  *
         TM    FLAGS,FCOUNT        TEST IF COUNT REQUESTED
         BZ    RETURN              IF NOT THEN RETURN
         MVC   MSGTEXT1,MSGNMEM    MOVE MEMBER COUNT MSG
         LH    R3,MSGTEXT1         LOAD MSG LENGTH
         LA    R2,MSGTEXT1(R3)     POINT TO END OF MSG
         MVC   0(8,R2),EDMASK      MOVE IN EDIT MASK
         LH    R1,CTR              LOAD MEMBER COUNT
         CVD   R1,DOUBLE           CONVERT TO DECIMAL
         ED    0(8,R2),DOUBLE+4    EDIT MEMBER COUNT
         LA    R3,8(R3)            COMPUTE NEW LINE LENGTH
         STH   R3,MSGTEXT1         STORE IN LINE PREFIX
         BAL   RLINK,PUTLINE       LINK AND PRINT LINE
         LA    R2,CCHHR1           LOAD DIRECTORY START TTR
         BAL   R14,CONVERT         CONVERT TTR TO ABSOLUTE
         ST    R0,DCT1             SAVE COUNT
         LA    R2,CCHHR2           LOAD LAST USED D.B. CCHHR
         BAL   R14,CONVERT         CONVERT ABSOLUTE TO RELATIVE
         ST    R0,DCT2             SAVE COUNT
         LA    R2,CCHHR3           LOAD LAST D.B. CCHHR
         BAL   R14,CONVERT         CONVERT ABSOLUTE TO RELATIVE
         S     R0,DCT1             COMPUTE NO. OF D.B. ALLOC - 1
         L     R1,DCT2             LOAD LAST D.B. USED COUNT
         S     R1,DCT1             COMPUTE NO. OF D.B. USED
         LA    R1,1(R1)            ADD 1 FOR LAST BLOCK
         CVD   R0,DCT1             CONVERT TO DECIMAL ALLOC
         CVD   R1,DCT2             CONVERT TO DECIMAL USED
         MVC   MSGTEXT1,MSGNUSED   MOVE IN D.B. USED MESSAGE
         LH    R3,MSGTEXT1         LOAD MSG LENGTH
         LA    R2,MSGTEXT1(R3)     POINT TO END OF MSG
         MVC   0(8,R2),EDMASK      MOVE IN EDIT MASK
         ED    0(8,R2),DCT2+4      EDIT USED COUNT
         LA    R3,8(R3)            COMPUTE NEW MSG LENGTH
         STH   R3,MSGTEXT1         STORE LENGTH IN LINE
         BAL   RLINK,PUTLINE       LINK AND PRINT USED LINE
         MVC   MSGTEXT1,MSGNALL    MOVE IN D.B. ALLOCATED MSG
         LH    R3,MSGTEXT1         LOAD MSG LENGTH
         LA    R2,MSGTEXT1(R3)     POINT TO END OF MSG
         MVC   0(8,R2),EDMASK      MOVE IN EDIT MASK
         ED    0(8,R2),DCT1+4      EDIT IN ALLOC COUNT
         LA    R3,8(R3)            COMPUTE NEW MSG LENGTH
         STH   R3,MSGTEXT1         STORE NEW LENGTH IN LINE
         BAL   RLINK,PUTLINE       LINK AND PRINT ALLOC MSG
         B     RETURN              GO RETURN TO TMP
         EJECT
DAIRBAD  DS    0H                  BAD DAIR
         XC    PARMLIST(40),PARMLIST CLEAR PARM LIST
         LA    R1,PARMLIST         LOAD PARM LIST ADDRESS
         USING DFPARMS,R1          SET DAIR FAIL DSECT
         LA    R0,DAIRPARM         LOAD PARAMETER BLOCK ADDRESS
         ST    R0,DFDAPLP          STORE IN DAIR FAIL PB
         ST    R15,PARMLIST+32     SAVE RETURN CODE
         LA    R15,PARMLIST+32     LOAD RC ADDRESS
         ST    R15,DFRCP           STORE RC IN DAIR FAIL PB
         LA    R0,=H'1'            LOAD CALL TYPE *************
         ST    R0,DFIDP            STORE TYPE IN DAIR FAIL PB
         MVC   DFCPPLP,ACPPL       MOVE CPPL ADDRESS TO DAIR FAIL PB
         LA    R0,PARMLIST+36      LOAD ENTRY POINT ADDRESS ADDRESS
         ST    R0,DFJEFF02         STORE EP ADDRESS IN LIST
         LINK  ,SF=(E,DFLINK)      LINK TO DAIR FAIL ANALYSIS ROUTINE
         B     RETURN              GO RETURN TO TMP
         SPACE 2
IOERR1   DS    0H                  COUNT CHANNEL PGM ERROR
         SR    R0,R0               INDICATE NO SECOND LVL MSG
         LA    R1,MSGCCPE          LOAD ERROR MSG ADDR
         B     ERROR               GO WRITE ERROR MSG
         SPACE 2
OPENERR  DS    0H                  DCB OPEN ERROR
         SR    R0,R0               INDICATE NO SECOND LVL MSG
         LA    R1,MSGDCBN          LOAD DCB OPEN ERROR MSG ADDR
         B     ERROR               GO PRINT ERROR MSG
         EJECT
ERROR    DS    0H                  DISPLAY AN ERROR MSG
         LTR   R0,R0               SECOND LEVEL MSG?
         BZ    ERRORM1             NO
         MVC   MSGTEXT1,0(R1)      INSURE MSG IN WORK AREA
         LA    R1,MSGTEXT1         LOAD MSG ADDRESS
         LH    R14,0(R1)           LENGTH OF FIRST LEVEL MSG
         LA    R15,0(R14,R1)       END OF MSG ADDRESS
         LA    R14,1(R14)          JUMP MSG LENGTH
         STH   R14,0(R1)           *
         MVI   0(R15),C'+'         INDICATE SECOND LEVEL MSG EXISTS
         SR    R14,R14             CLEAR CHAIN FIELD
         LA    R15,1               ONE SEGMENT IN SECOND MSG
         STM   R14,R0,PUTOLD2      CREATE SECOND LEVEL
         LA    R0,PUTOLD2          LOAD OUTPUT LINE DESC ADDR
         SPACE 2
ERRORM1  DS    0H                  *
         LR    R14,R0              NEXT 'OLD' ADDR OR ZERO
         LA    R15,1               ONE SEGMENT
         LR    R0,R1               LOAD MSG ADDR
         STM   R14,R0,PUTOLD1      FIRST LEVEL OLD
         LA    R1,PUTLPARM         LOAD PARM LIST ADDR
         USING IOPL,R1             SET IOPL DSECT
         MVI   ATTNECB,0           CLEAR ATTENTION ECB
         L     R15,APUTL           LOAD PUTLINE ROUTINE ADDR
         XC    IOPLEND(16),IOPLEND CLEAR PARM LIST
         PUTLINE PARM=IOPLEND,ENTRY=(15),MF=(E,(1)),                   X
               OUTPUT=(PUTOLD1,TERM,MULTLVL,INFOR)
         EJECT
RETURN   DS    0H                  *
         DELETE EPLOC=IKJPUTL      DELETE PUTLINE ROUTINE
         IKJRLSA APDL              FREE PDL
         SPACE 2
RETURN0  DS    0H                  *
         TM    FLAGS,FDBUF         TEST IF DIRECTORY BUFFER ALLOC
         BZ    RETURN1             IF NOT THEN SKIP FREE
         L     R1,DCBBUFCB         LOAD BUFFER ADDRESS
         LH    R0,DCBBUFL          LOAD BUFFER LENGTH
         FREEMAIN R,LV=(0),A=(1)   FREE DIRECTORY BUFFER
         SPACE 2
RETURN1  DS    0H                  *
         TM    DCBOFLGS,16         TEST IF DCB OPEN
         BZ    RETURN2             IF NOT THEN SKIP CLOSE
         CLOSE ,MF=(E,ADCB)        CLOSE DCB
         EJECT
RETURN2  DS    0H                  *
         TM    FLAGS,FALLOC        TEST IF FILE ALLOCATED
         BZ    RETURN3             IF NOT THEN SKIP FREE
         LA    R1,DAIRPARM         LOAD DAPL ADDRESS
         USING DAPL,R1             SET DAPL DSECT
         LA    R2,DAPPB            LOAD DAIR PB ADDRESS
         USING DAPB18,R2           SET DAIR PB18 DSECT
         MVC   DAPPB(LDAP18),MDAP18 MOVE IN DAIR 18 PB
         TM    FLAGS,FQUOTE        TEST IF DSN IN QUOTES
         BO    *+8                 IF QUOTES THEN SKIP
         OI    DA18CTL,DA18UID     INDICATE USERID PREFIX
         LA    R0,PDSN             LOAD DSNAME ADDRESS
         ST    R0,DA18PDSN         STORE DSN ADDR IN DAPB
         LINK  EPLOC=IKJDAIR       LINK TO DAIR ROUTINE
         SPACE 2
RETURN3  DS    0H                  *
         L     R0,WASIZE           LOAD WORK AREA SIZE
         LR    R1,WORKR            LOAD WORK AREA ADDRESS
         L     WORKR,SAVE+4        LOAD OLD SAVE AREA ADDR
         FREEMAIN R,LV=(0),A=(1)   FREE WORK AREA STORAGE
         RETURN (14,12),RC=0       RETURN TO TMP
         EJECT
PUTLINE  DS    0H                  PUTLINE PROCESSING
         TM    ATTNECB,X'40'       ATTENTION OCCUR?
         BO    RETURN              YES, RETURN IMMEDIATELY
         LA    R1,PUTLPARM         LOAD PUTLINE PARM LIST ADDR
         USING IOPL,R1             SET IOPL DSECT
         L     R15,APUTL           LOAD PUTLINE ROUTINE ADDR
         XC    IOPLEND(16),IOPLEND CLEAR PUTLINE PARM BLOCK
         LA    R0,MSGTEXT1         LOAD DATA LINE ADDR
         PUTLINE PARM=IOPLEND,ENTRY=(15),MF=(E,(1)),                   X
               OUTPUT=((0),TERM,SINGLE,DATA),                          X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK)
         TM    ATTNECB,X'40'       ATTENTION OCCUR?
         BO    RETURN              YES, THEN RETURN IMMED.
         LTR   R15,R15             TEST FOR SUCCESSFUL COMPLETION
         BNZ   RETURN              IF NOT SUCCESSFUL THEN RETURN
         CLEAR MSGTEXT1            CLEAR PRINT LINE
         XC    MSGTEXT1(4),MSGTEXT1 CLEAR PREFIX
         MVI   MSGTEXT1+1,4        RESET LINE LENGTH
         BR    RLINK               RETURN
         EJECT
CONVERT  DS    0H                  CONVERT RELATIVE TO ABSOLUTE
         LR    R3,WORKR            SAVE WORK AREA ADDR
         STM   R4,R14,SAVE+12      SAVE CRITICAL REGISTER
         L     R1,DCBDEBAD         LOAD DEB ADDRESS
         L     R15,ACVT            LOAD CVT ADDRESS
         L     R15,CVTPRLTV(R15)   LOAD CONVERT ROUTINE ADDRESS
         BALR  R14,R15             LINK TO CONVERT ROUTINE
         LR    WORKR,R3            RELOAD WORK AREA ADDRESS
         LM    R4,R14,SAVE+12      RELOAD CRITICAL REGISTERS
         SRDL  R0,16               SEPARATE TT AND R
         SRL   R1,24               SHIFT R TO LOW-ORDER BYTE
         MH    R0,NDBT             MULTIPLY TT BY # D. B. PER TRACK
         AR    R0,R1               ADD IN RECORDS ON TRACK
         BR    R14                 RETURN
         EJECT
         PRINT NOGEN
         SPACE 1
DATAREA  DS    0F                  DATA AREA
         SPACE 3
PCL      IKJPARM DSECT=PDL
PDLDSN   IKJPOSIT DSNAME,PROMPT='DATA SET NAME'
PDLVOL   IKJKEYWD
         IKJNAME 'VOLUME',SUBFLD=PDLVFLD
PDLUNIT  IKJKEYWD
         IKJNAME 'UNIT',SUBFLD=PDLNFLD
PDLLIST  IKJKEYWD DEFAULT='LIST'
         IKJNAME 'LIST',SUBFLD=PDLLFLD
         IKJNAME 'NOLIST'
PDLTTR   IKJKEYWD
         IKJNAME 'TTR'
PDLUSER  IKJKEYWD
         IKJNAME 'USER',SUBFLD=PDLUFLD
         IKJNAME 'DATE'
PDLCT    IKJKEYWD DEFAULT='NOCOUNT'
         IKJNAME 'COUNT'
         IKJNAME 'NOCOUNT'
PDLVFLD  IKJSUBF
PDLVFLD1 IKJIDENT 'VOLUME SERIAL NUMBER',FIRST=ALPHANUM,OTHER=ALPHANUM,X
               MAXLNTH=6,HELP=('DATA SET VOLUME SERIAL NUMBER'),       X
               PROMPT='VOLUME SERIAL NUMBER'
PDLNFLD  IKJSUBF
PDLNFLD1 IKJIDENT 'UNIT NAME',FIRST=ALPHANUM,OTHER=ANY,MAXLNTH=8,      X
               HELP=('UNIT NAME ON WHICH DATASET RESIDES'),            X
               PROMPT='UNIT NAME'
PDLLFLD  IKJSUBF
PDLLFLD1 IKJIDENT 'START MEMBER',FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=8
PDLLFLD2 IKJIDENT 'END MEMBER',FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=8
PDLUFLD  IKJSUBF
PDLUFLD1 IKJIDENT 'NUMBER OF BYTES',FIRST=NUMERIC,OTHER=NUMERIC,       X
               HELP=('NUMBER OF BYTES OF USER DATA TO BE DISPLAYED'),  X
               MAXLNTH=2
         IKJENDP
         SPACE 2
PDSDCB   DCB   DDNAME=X,MACRF=(E),EODAD=0
         EJECT
IKJPUTL  DC    CL8'IKJPUTL'        PUTLINE SERVICE ROUTINE
IKJPARS  DC    CL8'IKJPARS'        PARSE SERVICE ROUTINE
IKJDAIR  DC    CL8'IKJDAIR'        DAIR SERVICE ROUTINE
HVALUE   DC    8X'FF'              HIGH VALUE
EDMASK   DC    X'4020202020202120' EDIT MASK
TRTBL    DC    CL16'0123456789ABCDEF' TRANSLATE TABLE
APCL     DC    A(PCL)              PCL ADDRESS
WASIZE   DC    A(LENWORK)          LENGTH OF WORK AREA
ACHPGM   DS    0D                  DIRECTORY COUNT CHANNEL PGM
READHA   CCW   X'1A',0,X'70',5     READ HOME ADDRESS
         CCW   X'92',0,X'60',5     READ COUNT
         CCW   X'A9',HVALUE,X'60',8 SEARCH KEY EQUAL
         CCW   X'08',0,X'60',1     TRANSFER IN CHANNEL
         CCW   X'92',0,X'60',5     READ COUNT
         CCW   X'86',0,X'70',1     READ DATA
         CCW   X'08',0,X'20',1     TRANSFER IN CHANNEL
RDATA    CCW   X'06',0,X'60',256   READ DATA
RDCT     CCW   X'92',0,X'20',5     READ COUNT
         SPACE 2
MDAP08   DS    0F                  DAIR PB 08 MAP
         DC    H'8',H'0',F'0',A(0)
         DC    3CL8' '
         DC    4F'0'
         DC    2CL8' '
         DC    XL4'08080800',F'0'
         DC    CL8' '
         SPACE 1
LDAP08   EQU   *-MDAP08            LENGTH OF DAIR PB 08
         SPACE 1
MDAP18   DS    0F                  DAIR PB 18 MAP
         DC    H'24',H'0',F'0',A(0)
         DC    2CL8' ',CL2' '
         DC    X'0800',CL8' '
         SPACE 1
LDAP18   EQU   *-MDAP18            LENGTH OF DAIR PB 18
         SPACE 2
DEFLINK  LINK  EP=IKJEHDEF,SF=L
         SPACE 2
DFLINK   LINK  EP=IKJEFF18,SF=L
         EJECT
MSGORG   MSG   ' DATA SET ORGANIZATION IS NOT PARTITIONED'
MSGCCPE  MSG   ' COUNT CHANNEL PROGRAM ERROR'
MSGDCPE  MSG   ' DIRECTORY CHANNEL PROGRAM ERROR'
MSGMCPE  MSG   ' MEMBER SCAN CHANNEL PROGRAM ERROR'
MSGDCBN  MSG   ' DCB OPEN ERROR'
MSGNMEM  MSG   'NUMBER OF MEMBERS '
MSGNUSED MSG   'DIRECTORY BLOCKS USED '
MSGNALL  MSG   'DIRECTORY BLOCKS ALLOCATED '
MSGDERR  MSG   ' DATASET NOT ALLOCATED - DAIR ERROR'
MSGCMDER MSG   ' COMMAND SYSTEM ERROR '
MSGTRYL  MSG   ' DATASET IN USE - TRY LATER'
MSGNMT   MSG   ' VOLUME NOT MOUNTED'
MSGPARSE MSG   ' PARSE ERROR CODE XX'
         PRINT GEN
         SPACE 3
         LTORG
         EJECT
WORKAREA DSECT                     WORK AREA
SAVE     DS    18A                 O/S SAVE AREA
ACPPL    DS    A                   CPPL SAVE AREA
APDL     DS    A                   PDL ANSWER AREA
ATTNECB  DS    F                   ATTENTION ECB
ECB      DS    F                   EVENT CONTROL BLOCK
EOBAD    DS    A                   EOB ADDR FOR DIRECTORY BLOCK
DAPPB    DS    CL84                DAIR PARAMETER BLOCK
ADCB     DS    A                   DCB ADDR FOR OPEN/CLOSE
APUTL    DS    A                   IKJPUTL EP ADDRESS
ADBLK    DS    A                   ADDRESS OF FIRST D. B.
LKEY     DS    CL8                 START MEMBER KEY
HKEY     DS    CL8                 END MEMBER KEY
PUTOLD1  DS    3F                  *
PUTOLD2  DS    3F                  *
PARMLIST DS    10A                 *
PUTLPARM DS    10A                 PUTL PARM LIST
DAIRPARM DS    10A                 DAIR PARM LIST
DEFPB    DS    10A                 DEFAULT ROUTINE PB
NDBT     DS    H                   NUMBER OF D. B. PER TRACK
NDBR     DS    H                   NUMBER OF D. B. PER READ
LSIZE    DS    H                   LINE SIZE
NUSER    DS    H                   NUMBER OF USER BYTES TO BE SHOWN
ESIZE    DS    H                   LINE ENTRY SIZE
CTR      DS    H                   MEMBER COUNTER
         SPACE 1
PDSN     DS    0H                  *
LDSN     DS    H                   LENGTH OF DSNAME
DSN      DS    CL44                DSNAME
         SPACE 2
DOUBLE   DS    D                   DOUBLE WORD
MSGTEXT1 DS    XL160               *
MSGTEXT2 DS    XL124               *
FLAGS    DS    XL2                 STATUS FLAGS
UNPKA    DS    CL9                 UNPACK AREA
         EJECT
CCHHR1   DS    D                   COUNT FLD FOR FIRST D. B.
CCHHR2   DS    D                   COUNT FLD FOR LAST USED D. B.
CCHHR3   DS    D                   COUNT FLD FOR LAST D. B.
         SPACE 2
         DS    0F                  ALIGN ON FULL WORD BOUNDARY
DCB      DS    0CL52               DCB
DCBRELAD DS    F                   TTRN - RELATIVE BLOCK ADDRESS
DCBKEYCN DS    BL1                 KEYED BLOCK CONSTANT
DCBFDAD  DS    0XL8                FULL DIRECT-ACCESS ADDRESS
         DS    XL7                 *
DCBDVTBL DS    A                   DEVICE TABLE ENTRY ADDRESS
DCBKEYLE DS    BL1                 KEY LENGTH
DCBDEVT  DS    BL1                 DEVICE TYPE
DCBTRBAL DS    H                   TRACK BALANCE
DCBBUFNO DS    0BL1                NUMBER OF BUFFERS
DCBBUFCB DS    A                   ADDRESS OF BUFFER POOL CNTL BLOCK
DCBBUFL  DS    H                   BUFFER LENGTH
DCBDSORG DS    BL2                 DATA SET ORGANIZATION
DCBIOBAD DS    A                   IOB ADDRESS
DCBHIARC DS    0BL1                BUFFER HIERARCHY
DCBBFTEK DS    0BL1                BUFFER TECHNIQUE
DCBBFALN DS    0BL1                BUFFER ALIGNMENT
DCBEODAD DS    A                   EOD ROUTINE ADDRESS
DCBRECFM DS    0BL1                RECFM
DCBEXLST DS    A                   EXIT LIST ADDRESS
*                                  DCB BEFORE OPEN
DCBDDNAM DS    CL8                 DDNAME
         DS    BL1                 *
DCBIFLG  DS    BL1                 I/O ERROR FLAGS
DCBMACR  DS    BL2                 I/O MACRO INSTR AND OPTIONS
*                                  DCB AFTER OPEN
         ORG   DCB+40              *
DCBTIOT  DS    BL2                 TIOT OFFSET
DCBMACRF DS    BL2                 I/O MACRO INSTR AND OPTIONS
DCBIFLGS DS    0BL1                I/O ERROR FLAGS
DCBDEBAD DS    A                   DEB ADDRESS
DCBOFLGS DS    BL1                 OPEN FLAGS
         DS    AL3                 *
         EJECT
IOB      DS    0D                  INPUT / OUTPUT BLOCK
IOBFLAG1 DS    BL1                 I/O FLAGS
IOBFLAG2 DS    BL1                 I/O FLAGS
IOBSENSE DS    BL2                 I/O SENSE BYTES
IOBECBCC DS    0BL1                ECB COMPLETION CODE
IOBECBPT DS    A                   ECB ADDRESS
IOBFLAG3 DS    BL1                 I/O FLAGS
IOBCSW   DS    XL7                 SEVEN LOW BYTES OF CSW
IOBSIOCC DS    0BL1                START I/O CONDITION CODE
IOBSTART DS    A                   ADDR OF CHANNEL PGM
IOBDCBPT DS    A                   DCB ADDRESS
         DS    D                   *
IOBSEEK  DS    D                   IOB SEEK ADDRESS
         SPACE 1
CTCP     DS    0CL56               D. B. COUNT CHANNEL PGM
CCW1     DS    D                   READ HOME ADDRESS
CCW2     DS    D                   READ COUNT
CCW3     DS    D                   SEARCH KEY EQUAL
CCW4     DS    D                   TRANSFER IN CHANNEL
CCW5     DS    D                   READ COUNT
CCW6     DS    D                   READ DATA - SLI
CCW7     DS    D                   TRANSFER IN CHANNEL
         SPACE 1
DCT1     DS    D                   DIRECTORY COUNT 1
DCT2     DS    D                   DIRECTORY COUNT 2
DCT3     DS    D                   DIRECTORY COUNT 3
         SPACE 1
LENWORK  EQU   *-WORKAREA          LENGTH OF WORK AREA
         EJECT
         IKJPPL
         SPACE 3
         IKJIOPL
IOPLEND  DS    0F
         SPACE 3
         IKJDAPL
         EJECT
         IKJPSCB
         EJECT
         IKJECT
         EJECT
         IKJCPPL
         SPACE 3
         IKJDFPL
         SPACE 3
         IKJDFPB
         EJECT
         IKJEFFDF DFDSECT=YES
         EJECT
         IKJDAP08
         EJECT
         IKJDAP18
         EJECT
DEVDSECT DSECT                     DEVICE TABLE DSECT
DEVNAME  DS    CL8                 DEVICE GENERIC NAME
DEVTYPE  DS    XL4                 DEVICE TYPE
         SPACE 3
DIT      DSECT                     DEVICE INTERFACE TABLE
DITNCYL  DS    H                   NUMBER OF CYLINDERS / DISK
DITNTRK  DS    H                   NUMBER OF TRACKS / CYLINDER
DITMTL   DS    H                   MAXIMUM TRACK LENGTH
DITBO    DS    BL1                 BLOCK OVERHEAD
DITBOLB  DS    BL1                 BLOCK OVERHEAD - LAST BLOCK
DITKEYCN DS    BL1                 KEYED BLOCK CONSTANT
DITTFI   DS    BL1                 TOLERANCE FACTOR INDICATOR
DITTF    DS    H                   TOLERANCE FACTOR
         SPACE 3
DIRENTRY DSECT                     PDS DIRECTORY ENTRY
NAME     DS    CL8                 MEMBER NAME
TTR      DS    XL3                 TTR OF FIRST BLOCK
INDIC    DS    XL1                 MEMBER STATUS / LENGTH INDICATORS
USERD    DS    0XL1                USER DATA FIELD
         SPACE 3
LINE     DSECT                     LINE DSECT
LNAME    DS    CL8                 MEMBER NAME
LALIAS   DS    CL2                 ALIAS INDICATOR
         DS    CL1                 *
LLTTR    DS    0C                  *
         SPACE 1
         ORG   LNAME               RESET ORGIN
LTTR     DS    CL6                 TTR
         DS    CL1                 *
LCIND    DS    CL2                 INDICATORS
         DS    CL1                 *
LLUSER   DS    0C                  *
         SPACE 1
         ORG   LNAME              RESET ORIGIN
LUSER    DS    CL8                 USER DATA
         DS    CL1                 *
LLNEXT   DS    0C                  NEXT FIELD
         EJECT
         END
