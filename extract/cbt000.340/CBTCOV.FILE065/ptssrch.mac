         TITLE    'PTS SEARCH ROUTINE(VERSION 2.0), BUILD EXCLUDE LIST'
**********************************************************************
*                                                                    *
*  PURPOSE:  THIS PROGRAM WILL BUILT AN EXCLUDE LIST CONSISTING OF   *
*            SYSMODS TO BE EXCLUDED FOR A GIVEN FMID.  THE OUTPUT OF *
*            THIS PROGRAM CAN BE PASSED TO IBM'S PUTCNTL PROGRAM     *
*            THROUGH THE DLLEXCL DD.  THIS PROGRAM CAN ALSO BE USED  *
*            TO FIND ALL THE MAINTENANCE FOR A FMID, THEN AN APPLY   *
*            SELECT CAN BE USED.  THIS PICKS UP SOME MAINTENANCE NOT *
*            CAUGHT BY AN APPLY GROUP.                               *
*                                                                    *
*  INPUT:    THE INPUT CONSISTS OF A SYSIN DATASET CONTAINING FMIDS  *
*            FOR WHICH SYSMODS ARE TO BE EXCLUDED.  IF NO INPUT IS   *
*            GIVEN, THEN ALL THE INPUT CONSISTS OF ALL THE FMIDS THAT*
*            THE PTS SYSTEM ENTRY CONTAINS.                          *
*                                                                    *
*  OUTPUT:   THE OUTPUT WILL CONSIST OF A SYSPRINT DATASET CONTAINING*
*            THE EXCLUDED SYSMODS LISTED FOR EACH FMID.              *
*            IF THE USER POINTS TO A CARD IMAGE DATASETS, THE SORTED *
*            (BY SYSMOD ID) EXCLUDE LIST WILL BE PRODUCED.           *
*                                                                    *
*  USER ABENDS:  MOST USER ABENDS ARE FOR DATASETS THAT DO NOT OPEN  *
*                PROPERLY.  THE ABENDS ARE AS FOLLOWS:               *
*            U099   INITDATE COULD NOT CONVERT DATE PROPERLY         *
*            U100   SYSPRINT DATASET DID NOT OPEN PROPERLY           *
*            U200   PTS DATASET DID NOT OPEN PROPERLY(DIRECTORY PART)*
*            U300   PTS DATASET DID NOT OPEN PROPERLY(MEMBER PART)   *
*            U400   SORTIN DATASET DID NOT OPEN PROPERLY(WORK FILE)  *
*            U500   SYSIN DATASET DID NOT OPEN PROPERLY              *
*            U600   MORE THAN 255 FMIDS WERE SPECIFIED               *
*            U60X   AN ERROR WAS DETECTEBY ADDRALL ROUTINE.          *
*                   SEE ADDRALL ROUTINE FOR MEANING OF R.C 'X'       *
*            U700   INVALID BRANCH INTO WRITE TO WORK FILE CODE      *
*            U800   ERROR FROM 1ST CALL TO SORT (BY TYPE & ALPHA)    *
*            U900   ERROR FROM 2ND CALL TO SORT (BY SYSMOD ID)       *
*            U1000  SORTOUT DATASET DID NOT OPEN PROPERLY            *
*                                                                    *
*  JCL:                                                              *
*      //  JOB CARD                                                  *
*      //STEP1  EXEC  PGM=PTSSRCH,PARM=XX   PARM IS OPTIONAL. XX IS  *
*      //*                                  OUTPUT PAGE SIZE. DEFAULT*
*      //*                                  IS 58. THIS MUST BE A 2  *
*      //*                                  DIGIT NUMBER.            *
*      //SYSPRINT DD SYSOUT=A   PRINTED OUTPUT                       *
*      //SYSOUT   DD SYSOUT=A   OUTPUT FROM SYNC-SORT                *
*      //*     NOTE THAT THIS PROGRAM IS SETUP TO USE SYNC-SORT, BUT *
*      //*     ANY SORT WILL PROBABLY WORK                           *
*      //SORTIN   DD SPACE=(TRK,10),UNIT=SYSDA   TEMPRORAY WORK FILE *
*      //SORTOUT  DD SPACE=(TRK,10),UNIT=SYSDA   TEMPRORAY WORK FILE *
*      //CARDS    DD DSN=CARD IMAGE DATASET; SMP EXCLUDE LIST INPUT  *
*      //SORTWK01 DD SPACE=(CYL,10),UNIT=SYSDA SORT WORK AREA        *
*      //SORTWK02 DD SPACE=(CYL,10),UNIT=SYSDA SORT WORK AREA        *
*      //PTS      DD DSN=YOUR.SYS1.SMPPTS,DISP=SHR                   *
*      //SYSUDUMP DD SYSOUT=A  JUST IN CASE YOU NEED IT              *
*      //SYSIN    DD *     INPUT TO PTSSRCH, SEE ALSO "INPUT:" ABOVE *
*      COL 1                                                         *
*      ×                                                             *
*      * COMMENT  <-- * IN COL.1 MEANS THIS IS A COMMENT             *
*      FMID      <--FMID FOR WHICH SYSMODS ARE TO BE EXCLUDED. MAX OF*
*                   255.                                             *
*                                                                    *
*                                                                    *
*                                                                    *
*  INSTALLATION: PTSSRCH COMES IN A PDS(CARD IMAGE FORM) WITH THE    *
*                SOURCE FOR PTSSRCH AND ADDRALL , AND THE OBJECT DECK*
*                FOR INITDATE.  THIS PDS ALSO CONTAINS ALL THE       *
*                PRIVATE MACROS NEEDED FOR PTSSRCH AND ADDRALL .     *
*                ASSEMBLE PTSSRCH AND ADDRALL USING THE PDS WITH     *
*                THE PRIVATE MACROS AS ONE OF YOUR SYSLIBS, THEN LINK*
*                THE OBJECT DECKS FOR PTSSRCH, ADDRALL, AND INITDATE *
*                TOGETHER MAKING SURE PTSSRCH IS THE ENTRY POINT.    *
*                                                                    *
*                                                                    *
*  USER MACROS:  BEGIN, PARM                                         *
*  CALLED PROGRAMS: INITDATE,ADDRALL                                 *
*                                                                    *
*  WRITTEN BY ALAN FEINSTEIN, SECURITY PACIFIC NATIONAL BANK,        *
*             611 N. BRAND BLVD., GLENDALE CALIFORNIA 91203.         *
*             TELEPHONE NO. (213)-507-3329                           *
*             SEPT. ,1980                                            *
*                                                                    *
*  UPDATED BY ALAN FEINSTEIN, APRIL 1982 TO FIX AN 0C4 ABEND IF NO   *
*             SYSMODS ARE FOUND FOR A SPECIFIED FMID.                *
*                                                                    *
**********************************************************************
         EJECT
          MACRO
&N        BEGIN      &NAME,&BASE=R12,&TREG=R11,&SAVE=SAVEAREA,&SAW=18
           LCLA     &L
           LCLA     &M
           LCLA     &I
          AIF       ('&SYSLIST(0)' EQ '').ERROR
&N        CSECT
&I         SETA     &SAW*4+4
           AIF      ('&NAME'  EQ  '').LABEL
&L         SETA     ((K'&NAME)/2)*2+4
&M         SETA     K'&NAME
          B         &L.(0,15)
          DC        AL1(&M)
          DC        C&NAME
           AGO      .OK
.LABEL     ANOP
&M         SETA      K'&N
&L         SETA     ((K'&N+2)/2)*2+4
          B         &L.(0,15)
          DC        AL1(&M)
          DC        C'&N'
.OK         ANOP
R0        EQU    0
R1        EQU    1
R2        EQU    2
R3        EQU    3
R4        EQU    4
R5        EQU    5
R6        EQU    6
R7        EQU    7
R8        EQU    8
R9        EQU    9
R10       EQU    10
R11       EQU    11
R12       EQU    12
R13       EQU    13
R14       EQU    14
R15       EQU    15
*  SET UP ADDRESSABILITY, SAVE AREA, AND SAVE AREA CHAINING.
          STM    R14,R12,12(R13)
          LR        &BASE,R15
          USING     &N,&BASE
          LA        &TREG,&SAVE
          ST        R13,4(&TREG)
          ST        &TREG,8(R13)
          CNOP       2,4
          LR        R13,&TREG
          B          *+&I
&SAVE     DC         &SAW.F'0'
          MEXIT
.ERROR    MNOTE     12,'LABEL IS REQUIRED WITH THIS MACRO.'
          MEND
          EJECT
          MACRO
&N        PARM     &REG1,&REG2,&L2,&SIZE=4
.*   THIS MACRO IS USED TO EXTRACT THE PARAMETER INFO
.*     FROM REG 1.  IF THE LENGTH IS NOT 0, IT IS MOVED
.*     INTO WORK.  ALAN FEINSTEIN , 10/25/74
*   &REG1 IS THE REGISTER USED TO LOAD THE PARAMETER LIST ADDRESS
*       IT SHOULD NOT BE 1. IF IT IS, IT IS AN ERROR CONDITION.
.*  &REG2  IS A WORK REGISTER.
.*  &L2  IS A LABEL TO BRANCH TO IF THE LENGTH OF THE PARM FIELD IS 0.
.*  &SIZE IS THE MAXIMUM LENGHT THAT THE PARM FIELD CAN HAVE
*   THE LENGTH OF THE PARM FIELD IS STORED AT SYMBOL PARMLEN.
          AIF      (N'&SYSLIST  LT  3).ERROR1
          AIF      ('&REG1'  EQ  '1').ERROR2
          AIF      ('&REG1'  EQ  'R1').ERROR2
&N        LR       &REG1,1
          L        &REG1,0(&REG1)
          LH       &REG1,0(&REG1)
          LTR      &REG1,&REG1
          BZ       &L2
          LA       &REG2,&SIZE
          CR       &REG1,&REG2
          BNH      *+6
          LR       &REG1,&REG2
          ST       &REG1,PARMLEN
          BCTR     &REG1,0
          LTR      &REG1,&REG1
          BNZ      *+8
          LA       &REG1,1
          B        CON&SYSNDX
PARMLEN   DC       F'0'
PARMFLD   DS       CL&SIZE
CON&SYSNDX L       R1,0(R1)
          LA       R1,0(R1)
          MVC      PARMFLD(0),2(1)
          EX       &REG1,*-6
          MEXIT
.ERROR1   MNOTE    12,'PARM REQUIRES 3 PARAMETERS'
          MEXIT
.ERROR2   MNOTE    12,'USE OF REGISTER 1 IS PROHIBITED'
          MEND
          EJECT
*
*  DO STANDARD HOUSE KEEPING AND HANDLE THE PARM INPUT IF THERE IS ANY
*
PTSSRCH  BEGIN 'PTSSRCH VERSION 2.0, &SYSDATE AT &SYSTIME',SAW=166
         PARM  R9,R8,OPEN,SIZE=2
         PACK  WORK1+4(4),PARMFLD(2)
         CVB   R5,WORK1
         ST    R5,PGESIZE
*
*  OPEN DCB'S AND CHECK TO MAKE SURE THEY ARE OPEN.  ABEND IF NOT OPEN
*
OPEN     OPEN  (LSTDCB,OUTPUT,DIRDCB,,MEMDCB,,WORKFILE,OUTPUT,INPUT)
         LA    R10,100
         TM    LSTDCB+48,X'10'
         BNO   ABEND
         LA    R10,200
         TM    DIRDCB+48,X'10'
         BNO   ABEND
         LA    R10,300
         TM    MEMDCB+48,X'10'
         BNO   ABEND
         LA    R10,400
         TM    WORKFILE+48,X'10'
         BNO   ABEND
         LA    R10,500
         TM    INPUT+48,X'10'
         BNO   ABEND
         SPACE
*
*  OBTAIN MEMORY TO HOLD TABLE OF FMIDS
*
         SR    R0,R0          CLEAR R0
         LA    R0,2040        2040 IS # OF BYTES NEEDED FOR 255 FMIDS
         GETMAIN R,LV=(R0)    GET MEMORY
         ST    R1,TABADDR     SAVE ADDRESS
*
*  READ INPUT FILE
*
READ     GET   INPUT,CARD
         CLI   CARD,C'*'      IS IT A COMMENT CARD?
         BE    READ           YES, IGNORE IT
         LH    R10,#FMIDS     LOAD THE # OF USED TABLE SLOTS
         CH    R10,MAXFMIDS   HAVE WE REACHED LIMIT?
         BL    NOTFULL        NO
         LA    R10,600        MORE THAN 255 FMIDS!!!
         B     ABEND            THEN ABEND USER
NOTFULL  A     R10,=F'1'      ADD 1 TO COUNT
         STH   R10,#FMIDS     STORE COUNT
         L     R9,TABADDR     LOAD ADDRESS OF TABLE
         S     R10,=F'1'      FIGURE OUT DISPLACEMENT INTO TABLE
         SLL   R10,3            FOR THIS FMID
         AR    R9,R10
         MVC   1(7,R9),CARD   STORE FMID
         SRL   R10,3          DIVIDE BY 8
         LA    R10,1(R10)     ADD THE 1 BACK
         STC   R10,0(R9)      PUT IN THIS UNIQUE #
         B     READ           CONTINUE
         SPACE
*
*  SEE IF USER SPECIFIED ANY FMIDS TO EXCLUDE SYSMODS FOR
*
START    CLC   #FMIDS(2),ZERO    NO. = 0 ?
         BNE   START2            OK, GO ON
         MVI   BUF1,C' '         BLANK OUT BUF1
         MVC   BUF1+1(132),BUF1
         MVC   BUF1(38),=C' NO INPUT TO PTSSRCH. DOING ALL FMIDS.'
         PUT   LSTDCB,BUF1
         MVI   MAXFMIDS,X'88'    INDICATE WE ARE DOING ALL FMIDS
*
*  GET TIOT ADDRESS FOR FUTURE REFERENCE
*
START2   EXTRACT ADDRTIOT,FIELDS=TIOT  ADDRESS OF TIOT
*
         SPACE
*
*THIS CODE  CHECKS  FOR  DD CARD  AND  RETURNS  UCB  ADDRESS  IF  IT
*        FINDS IT.
*
         SPACE
TIOTFIND XR    R11,R11        USED TO HOLD DD ENTRY
         L     R7,ADDRTIOT
         LA    R7,24(R7)      1ST DD ENTRY
         LA    R3,LIB      R3 PTS TO DDNAME SEARCHING FOR
NEXTDD   CLC   0(8,R3),4(R7)  COMPARE DDNAMES
         BE    FOUNDUCB       FOUND THE DD NAME
         IC    R11,0(R7)      LENGTH OF DD ENTRY
         LA    R7,0(R7,R11)   NEXT ENTRY
         CLC   0(4,R7),ZERO   END OF TIOT
         BNE   NEXTDD         NO
         B     EXIT           TIOT ENTRY NOT FOUND
FOUNDUCB LA    R8,16(R7)      ADDR OF WORD WITH UCB
         LA    R8,0(R8)       CLEAR HIGH ORDER BYTE
         L     R8,0(R8)       GET UCB ADDR
         ST    R8,UCBADDR     SAVE IT
         SPACE 2
*
*  GET MEMORY FOR BUFFER EQUAL TO BLKSIZE OF SMPPTS
*
         MVC   LEN+2(2),MEMDCB+X'3E'
         L     R0,LEN
         GETMAIN  R,LV=(R0)
         LR    R9,R1          SAVE MEMORY ADDRESS IN R9
*
*   FIND JFCB BY CALLING RDJFCB & MOVE PTS NAME INTO TITLE.
*
         RDJFCB DIRDCB
         MVC   PTSNAME(44),BUF1
         LA    R15,1           LOOP TO DETERMINE LENGTH OF NAME
         LA    R1,PTSNAME     R1=ADDR. OF NAME
BLANKS   CLI   0(R1),C' '     BLANK?
         BE    TOINDEX1       EQ.? YES, DONE
         LA    R1,1(R1)       NO, INCREMENT ADDR.
         LA    R15,1(R15)       NO, INCREMENT COUNT
         C     R15,=F'45'      END OF NAME?
         BE    TOINDEX1       YES, DONE
         B     BLANKS         NO, CONTINUE
TOINDEX1 MVC   INDEX1+26(44),PTSNAME
         LA    R1,INDEX1
         LA    R1,26(R15,R1)
         MVC   1(3,R1),ASTERS  PUT IN ASTERISKS
         LA    R1,INDEX1
         L     R15,UCBADDR     PT. TO UCB ADDRESS
         MVC   VOLUME(6),28(R15)  MOVE IN VOL-SER
         MVC   UNIT(3),13(R15)   MOVE IN UNIT ADDRESS
         TIME
         ST    R0,UCBADDR     SAVE TIME
         ST    R1,DATE1       GET THE DATE & STORE IT
         CALL  INITDATE,(DATE1,DATE+1,DATE1),VL
         ED    TIME(9),UCBADDR
         BAL   R11,HEADER       PRINT TITLE
         SPACE 2
*
*   READ DIRECTORY BLOCK.
*
RDDIR    READ  DIRDECB,SF,DIRDCB,BUF1,'S'
         CHECK DIRDECB
         LA    R3,BUF1+2       R3=ADDRESS OF DIRECTORY BLOCK+2
         LH    R5,BUF1
         A     R5,=A(BUF1)     R5=END OF DIRECTORY BLOCK
*
*  SETUP LOOP TO PARSE DIRECTORY BLOCK. CHECK IF END OF DIRECTORY.
*     IF NOT END, FIND MEMBER NAME.
*
FIND     CLI   MAXFMIDS,X'FF'  DID WE COME FROM ADDRALL?
         BNE   *+8             NOPE
         MVI   MAXFMIDS,X'00'  CLEAR FLAG
         CR    R3,R5           END OF DIRECTORY BLOCK?
         BE    RDDIR           YES, GET ANOTHER
         MVC   WORK(14),0(3)   MOVE 1ST 14 CHARACTERS INTO WORK
*  LAST MEMBER? I.E. NAME ='FFFFFFFF'
         CLC   WORK(8),=X'FFFFFFFFFFFFFFFF'
         BE    LAST            YES, DONE WITH PTS
*
*  FINDING TTR AND LENGTH OF USER DATA.  ADVANCE REG. 3 TO NEXT MEMBER.
*
PARSDIR  A     R3,=F'8'        R3 PTS TO NAME, ADD 8 TO PT PAST IT
         MVC   TTR(3),0(3)     GET TTR
         MVC   I(1),3(3)       PICKUP LENGTH OF USER DATA
         NI    I,B'00011111'          MASK OUT UN-NEEDED PART
         SR    R4,R4
         IC    R4,I
         SLA   R4,1            MULTIPLY BY 2
         AR    R3,R4
         A     R3,=F'4'        ADD 4 FOR TTR &USER DATA
         CLI   MAXFMIDS,X'88'  FLAG=TO CALL ADDRALL?
         BNE   CHKTYP          NO
         POINT MEMDCB,TTR      PT TO SYSTEM ENTRY FOR ADDRALL
         MVI   MAXFMIDS,X'FF'  INDICATE WE CAME FROM ADDRALL
         LA    R1,PARMLIST     PT TO PARMLIST
         L     R15,=V(ADDRALL) LOAD ADDRESS OF ADDRALL
         BALR  R14,R15            AND GO TO IT
         MVI   MAXFMIDS,X'00'  CLEAR FLAG, WE GO ON FROM HERE AS NORMAL
         LTR   R15,R15         ADDRALL INDICATE ALL O.K?
         BZ    CHKTYP          YEAP
         LA    R10,600(R15)    ADDRALL HAD A PROBLEM
         B     ABEND
         SPACE 3
*
*  CHECK FOR VALID ENTRY
* IF THE 1ST BYTE OF THE NAME IS A X'01', THIS IS THE SYSTEM ENTRY
* IF THE 1ST BYTE OF THE NAME IS GREATER THAN X'05', THEN THIS IS
*   THE CARD IMAGE OF THE SYSMOD AND WE ARE DONE.
*
CHKTYP   CLI   WORK,X'01'
         BE    FIND
         CLI   WORK,X'05'
         BH    LAST
*
* THE 14TH BYTE OF THE DIRECTORY HAS THE FOLLOWING MEANING:
*    X'01' - THIS IS A USERMOD
*    X'02' - THIS IS AN APAR
*    X'04' - THIS IS A FUNCTION
*
* CHECK FOR USERMOD, APAR, FUNCTION, AND SKIP THEM
         CLI   WORK+13,X'01'
         BE    FIND
         CLI   WORK+13,X'02'
         BE    FIND
         CLI   WORK+13,X'04'
         BE    FIND
         SPACE
*
*  READ  MEMBER BLOCK, BUT FIRST POINT TO MEMBER.
*
SR8      SR    R8,R8         R8 PTS TO OFFSET INTO CARD
         POINT MEMDCB,TTR
RDBLOCK  LR    R2,R9         R2 WILL CONTAIN THE ADDRESS OF RECORD
         READ  MEMDECB,SF,MEMDCB,(2),'S'
         CHECK MEMDECB
*
*  FIND LENGTH OF BLOCK READ & SETUP DE-BLOCKING.
*
         LH    R7,LEN+2
         L     R6,MEMDECB+16
         SH    R7,14(R6)             REG. 7 CONTAINS LENGTH READ.
         SPACE 3
*
*  CHECK FOR FMID.  THIS LOOP IS THE HEART OF THE SEARCH ROUTINE.
*    READ EACH CARD IMAGE SEARCHING FOR AN FMID THAT IS TO HAVE
*  ITS SYSMODS EXCLUDE.
*
         SPACE
         L     R6,=F'80'     SETUP FOR BXLE. INCREMENT BY 80
         AR    R7,R2         R7 PTS TO LAST BYTE
         SR    R7,R6         R7 NOW PTS TO LAST CARD
PARSLINE LR    R1,R2         SET R1 EQ ADDRESS OF CURRENT RECORD
         CLC   0(4,R1),ZERO  DUMMY LINE?
         BE    TO0                            YES, GET NEXT CARD
*  EACH ELEMENT IS 9 BYTES LONG WITH THE 9TH BYTE INDICATING THE
*    TYPE OF ENTRY
         LA    R1,0(R8,R2)   POINT TO NEXT RECORD
         CLI   SPLIT,X'FF'   WAS THIS RECORD SPLIT ACROSS CARDS?
         BNE   NOSPLIT1      NO, JUST TREAT AS REGULAR
         S     R1,=F'1'      YES, SUBTRACT 1 TO PT TO LAST BYTE
         CLI   0(R1),X'A7'   CHECK FOR FMID RECORD
         BE    SPLIT1        YES, HANDLE IT
         A     R1,=F'1'      NO, ADD 1 TO PT TO NEXT 9 BYTE ELEMENT
         MVI   SPLIT,X'00'   CLEAR SPLIT INDICATE
         B     PARSLINE      CONTINUE CHECKING REST OF CARD
NOSPLIT1 CLI   8(R1),X'A7'   CHECK 9TH BYTE TO SEE IF IT IS FOR FMID
         BNE   OK            NO, GO ADVANCE BY 9 FOR NEXT ELEMENT
         B     NOSPLIT       YES, CHECK IT, ITS ALL ON ONE CARD
SPLIT1   MVC   HOLD+80(80),0(R2)  ELEMENT SPLITS CARD. SAVE THIS CARD
         A     R1,=F'1'      SO WE CAN CHECK IT.  ADD 1 TO PT TO NEXT
         LA    R14,9         9 BYTE ELEMENT
*  FIND OUT WHERE THE 9 BYTE ELEMENT STARTED ON THE PREVIOUS
*    CARD.  R8=OFFSET OF THIS ELEMENT ON CARD. 9-R8 = LENGTH OF
*    THIS ELEMENT ON THE PREVIOUS CARD, 80-(9-R8) = THE OFFSET OF THE
*    ELEMENT ON PREVIOUS CARD
         SR    R14,R8
         LA    R8,80
         SR    R8,R14
         LA    R14,HOLD
         LA    R14,0(R8,R14)  PT TO BEGINNING OF ELEMENT IN HOLD AREA
         LH    R10,#FMIDS     LOAD # FMIDS WE ARE CHECKING FOR
         L     R4,TABADDR     PT. TO TABLE
SPLTLP   CLC   1(7,R4),0(R14) IS THIS ONE OF THE FMIDS?
         BE    WRITEWRK       YES, WRITE IT TO WORK FILE
         LA    R4,8(R4)       NO, BUMP UP TO NEXT FMID
         BCT   R10,SPLTLP     GO AGAIN
         B     FIND           NOT ONE OF OUR FMIDS, NEXT MEMBER
NOSPLIT  LH    R10,#FMIDS     LOAD # FMIDS WE ARE CHECKING FOR
         L     R4,TABADDR     PT. TO TABLE
NOSPLTLP CLC   1(7,R4),0(R1)  IS THIS ONE OF THE FMIDS?
         BE    WRITEWRK       YES, WRITE IT TO WORK FILE
         LA    R4,8(R4)       NO, BUMP UP TO NEXT FMID
         BCT   R10,NOSPLTLP   GO AGAIN
         B     FIND           NOT ONE OF OUR FMIDS, NEXT MEMBER
OK       MVI   SPLIT,X'00'    READY TO ADVANCE TO NEXT ELEMENT ON CARD
         LA    R8,9(R8)       CLEAR SPLIT FLAG, ADD 9 TO OFFSET
         C     R8,=F'71'      ARE WE LT OR EQ TO 71?
         BNH   PARSLINE       YES, GO ON
         C     R8,=F'80'      NO, ELEMENT MAY BE SPLIT OVER 2 CARDS
         BNE   CONTSPLT       IF LAST OFFSET WAS 71, ELEMENT ENDED
         SR    R8,R8           EXACTLY ON END OF CARD, SO 0 R8 & GO ON
         B     TO0
CONTSPLT MVC   HOLD(80),0(R2) ELEMENT SPLITS CARDS. MOVE 1ST PART INTO
         MVI   SPLIT,X'FF'     HOLD AREA, INDICATE A SPLIT.
*  FIND OUT HOW MUCH OF THE 9 BYTE ELEMENT IS CONTINUED ON THE NEXT
*    CARD.  R8=OFFSET OF THIS ELEMENT ON CARD. 80-R8 = LENGTH OF
*    THIS ELEMENT ON THIS CARD, 9-(80-R8) = THE LENGTH OF THE
*    ELEMENT ON THE NEXT CARD
         LA    R1,80
         SR    R1,R8
         LA    R8,9
         SR    R8,R1
TO0      BXLE  R2,R6,PARSLINE  CONTINE WITH LOOP, GET NEXT RECORD
         B     RDBLOCK        GO READ ANOTHER BLOCK OF DATA
         SPACE 3
*
*   WRITE TO THE TEMPRORAY WORK DATASET
*
         SPACE
WRITEWRK MVC   WORK2(1),0(R4)    MOVE IN UNIQUE ID FOR THIS SYSMOD
         MVC   WORK2+1(7),WORK+1 MOVE SYSMOD ID
PUTWRK   PUT   WORKFILE,WORK2    WRITE TO TEMP. WORK FILE
         B     FIND
         TITLE 'PTS SEARCH ROUTINE, OUTPUT SECTION'
*
*  CLOSE WORKFILE, AND SETUP TO SORT BY TYPE CODE
*   (1ST BYTE OF RECORDS ON WORKFILE)
*
LAST     CLOSE (WORKFILE)
         MVC   SORTAREA+14(L'SORTSTRT),SORTSTRT  MOVE IN SORT BY TYPE
         MVI   SORTAREA+22,C','    AND IN ALPHABETIC ORDER
         MVC   SORTAREA+23(L'SORTBYCH),SORTBYCH
         MVI   SORTAREA+31,C')'
         LA    R1,PARMPTR         DO SORT BY TYPE CODE & ALPHA
LSORT1   LINK  EP=SORT
         LTR   R15,R15            TEST SORT RETURN CODE
         BZ    SORTOK1
         LA    R10,800            NOT 0, ABEND
         B     ABEND
*
*  PUT OUTPUT TO SYSPRINT DATASET
*
SORTOK1  OPEN  (OUTFILE)          OPEN SORTED FILE
         LA    R10,1000
         TM    OUTFILE+48,X'10'   MAKE SURE IT IS OPEN & ABEND IF NOT
         BNO   ABEND
*
*   THIS LOOP READS SORTED FILE.  IT IS LOOKING FOR ALL THE SYSMODS
*     BELONGING TO EACH FMID (X'01', X'02', X'03', ETC.) AND PRINTS
*     EACH TYPE SEPARATELY.
*
         L     R10,TABADDR        NOW PT R10 TO TABLE OF FMIDS
         LA    R5,2               2 LINES PRINTED SO FAR
         MVI   DOTYPE,X'CC'       RESET THIS FLAG
         GET   OUTFILE,CARD       GET FIRST CARD
         MVI   DOTYPE,X'00'       RESET THIS FLAG
TYPE51   LA    R3,TITLE           MODIFY A TITLE FOR SYSMODS FOR FMIDS
         MVC   FMID,1(R10)        MOVE IN FMID TO TITLE
         LA    R15,3(R5)          WILL TITLE LINE PUT US OVER PAGE
         C     R15,PGESIZE        PAST MAX?
         BNH   OKPRT5             NO
         BAL   R11,HEADER         PRINT HEADER
OKPRT5   PUT   LSTDCB,(R3)        PRINT IT
         LA    R5,3(R5)           ADD 3 TO LINE COUNT
         LA    R3,BUF1            R3 PTS TO OUTPUT BUFFER
STRTLOP3 CLC   CARD(1),0(R10)     LAST RECORD=NEXT RECORD TYPE?
         BNE   OKPRT3             NO, BUMP UP NEXT RECORD TYPE
         MVI   BUF1,C' '          BLANK OUT BUFFER
         MVC   BUF1+1(132),BUF1
         LA    R3,9(R3)           PT TO WHERE 1ST RECORD GOES
         MVC   0(7,R3),CARD+1     PUT 1ST RECORD OF NEXT TYPE IN LINE
         LA    R4,8               ONLY 8 MORE ON THIS LINE
         B     PRNTLOOP           DON'T BLANK OUT BUFFER
STRTLOP2 MVI   BUF1,C' '          BLANK OUT BUFFER
         MVC   BUF1+1(132),BUF1
PRNTLOOP GET   OUTFILE,CARD       READ THE SORTED FILE
         CLC   CARD(1),0(R10)     IS THIS THE SAME TYPE?
         BNE   PRNTLINE           NO, PRINT THIS LINE & GO ON
         LA    R3,9(R3)           EACH ENTRY ON LINE IS 9 BYTES LONG
         MVC   0(7,R3),CARD+1     MOVE IN SYSMOD ID
         BCT   R4,PRNTLOOP        NEXT ENTRY
         C     R5,PGESIZE         PAST MAX?
         BNH   OKPRT1             NO
         BAL   R11,HEADER         PRINT HEADER ON TOP OF NEW PAGE
         MVI   BUF1,C'-'          MAKE SURE NEXT LINE IS SPACED RIGHT
         LA    R5,2(R5)           UP COUNT BY 2
OKPRT1   PUT   LSTDCB,BUF1        PRINT THE LINE
         LA    R5,1(R5)           UP LINE COUNT BY  1
         LA    R4,9               NEXT LINE WILL HAVE 9 ENTRIES
         LA    R3,BUF1            PT TO BEGINNING OF BUFFER
         B     STRTLOP2           CONTINUE WITH THIS TYPE
PRNTLINE C     R3,=A(BUF1)        IS THERE ANYTHING TO PRINT?
         BE    OKPRT3             NO, SKIP PRINTING NOTHING
         C     R5,PGESIZE         PAST MAX?
         BNH   OKPRT2             NO
         BAL   R11,HEADER         PRINT HEADER ON TOP OF NEW PAGE
         MVI   BUF1,C'-'          MAKE SURE NEXT LINE IS SPACED RIGHT
         LA    R5,2(R5)           UP COUNT BY 2
OKPRT2   PUT   LSTDCB,BUF1        PRINT THE LINE
         LA    R5,1(R5)           UP LINE COUNT BY 1
OKPRT3   LA    R10,1(R10)         PT TO NEXT TYPE ID
         LA    R10,7(R10)         YES, INCREMENT TO NEXT TABLE ENTRY
         B     TYPE51             HANDLE NEXT TABLE ENTRY
*
*   COME HERE ON EOF FOR SORTOUT
*
ENDFILE  CLI   DOTYPE,X'CC'       ARE WE HERE BECAUSE OF LAST READ
         BE    EXIT               YES
         C     R3,=A(BUF1)        IS THERE ANYTHING TO PRINT?
         BE    GOTIT              NO, SKIP PRINTING NOTHING
         C     R5,PGESIZE         PAST MAX?
         BNH   OKPRT4             NO
         BAL   R11,HEADER         PRINT HEADER ON TOP OF NEW PAGE
OKPRT4   PUT   LSTDCB,BUF1        PRINT THE LINE
         LA    R5,1(R5)           UP LINE COUNT BY 1
         LH    R4,#FMIDS          HAVE WE PRINTED INFO FOR ALL FMIDS?
         SR    R6,R6              PICKUP TYPEID FROM LAST CARD
         IC    R6,CARD
CHKDONE  CR    R6,R4              DO THE #S AGREE
         BE    GOTIT              YES, DONE
         LA    R10,8(R10)         PT TO NEXT TABLE ENTRY
         LA    R3,TITLE           PT TO PROPER TITLE
         MVC   FMID,1(R10)        MOVE IN THIS FMID
         C     R5,PGESIZE         PAST MAX?
         BNH   OKPRT6             NO
         BAL   R11,HEADER         PRINT HEADER ON TOP OF NEW PAGE
OKPRT6   PUT   LSTDCB,(R3)        WE OBVIOUSLY FOUND NOTHING FOR
*                                   THIS FMID. JUST PRINT TITLE
         LA    R5,1(R5)           UP LINE COUNT BY 1
         A     R6,=F'1'           UP COUNT
         B     CHKDONE            SEE IF WE ARE DONE YET
*
*   SETUP TO SORT BY SYSMOD ID, BUT FIRST MAKE SURE THE USER WANTS
*     TO BY CHECKING OPEN FOR CARDS DD
*
GOTIT    OPEN  (CARDS,OUTPUT)
         TM    CARDS+48,X'10'     DID IT OPEN
         BO    CARDSOK            YES
         MVC   TITLE+2(131),TITLE+1  TELL USER SKIPPING THIS
         MVC   TITLE+3(45),=C'CARDS DD IS MISSING, NO CARDS WILL BE CREX
               ATED.'
         C     R5,PGESIZE         PAST MAX?
         BNH   OKPRT7             NO
         BAL   R11,HEADER         PRINT HEADER ON TOP OF NEW PAGE
OKPRT7   PUT   LSTDCB,TITLE
         B     EXIT
CARDSOK  MVC   SORTAREA+14(L'SORTBYCH),SORTBYCH  MOVE IN NEW SORT REC
         MVI   SORTAREA+22,C')'
         MVI   SORTAREA+23,C' '
         MVC   SORTAREA+24(8),SORTAREA+23
         CLOSE (OUTFILE)          CLOSE SORTED FILE,
         LA    R1,PARMPTR           AND GO TO SORT
         LINK  EP=SORT
         LTR   R15,R15            TEST SORT RETURN CODE
         BZ    SORTOK2
         LA    R10,900            NOT 0, ABEND
         B     ABEND
*
*  PUT OUTPUT INTO CARD FORM FOR SMP EXCLUDE LIST
*
SORTOK2  OPEN  (OUTFILE)            OPEN SORTED FILE
         MVI   DOTYPE,X'CC'         SET FLAG SHOWING LAST READ
READMORE GET   OUTFILE,CARD
         MVC   CARD(7),CARD+1       MOVE SYSMOD ID TO COLUMN 1
         MVI   CARD+7,C' '          BLANK OUT RIGHT SIDE OF CARD
         MVC   CARD+8(72),CARD+7
         PUT   CARDS,CARD
         B     READMORE             GET NEXT RECORD
         EJECT
*
*  THIS SECTION CLEANS UP AND RETURNS
*
EXIT     CLOSE (DIRDCB,,MEMDCB,,INPUT,,CARDS,,OUTFILE,,LSTDCB)
         LA    R0,2040              SIZE OF GETMAINED AREA
         L     R8,TABADDR           LOAD ADDRESS OF TABLE
         FREEMAIN R,LV=(R0),A=(R8)   AND FREE IT
         L     R0,LEN               FREE BUFFER AREA
         FREEMAIN R,LV=(R0),A=(R9)
         L     R13,SAVEAREA+4       RESTORE REGISTERS AND
         LM    R14,R12,12(R13)        RETURN
         LA    R15,0                SET RETURN CODE.
         BR    R14                  GOOD-BYE !!
         SPACE 3
*
*  THIS SECTION PRINTS HEADER ON TOP OF EACH PAGE
*
HEADER   L     R8,TOTALCT           PICKUP TOTAL PAGE COUNT
         A     R8,=F'1'             ADD 1
         ST    R8,TOTALCT            AND SAVE
         MVC   PAGE+127(6),MASK     MAKE PRINTABLE & PRINT
         CVD   R8,WORK1
         ED    PAGE+127(6),WORK1+5
         PUT   LSTDCB,INDEX1
         PUT   LSTDCB,PAGE
         LA    R5,2                 LINE COUNT IS NOW 2
         BR    R11                  RETURN TO CALLER
         SPACE 3
ABEND    ABEND    (R10),DUMP
         TITLE 'CONSTANTS, DCBS, ETC., ETC., ETC.'
         LTORG
         PRINT ON,NOGEN
LSTDCB   DCB      DDNAME=SYSPRINT,RECFM=FBA,LRECL=133,MACRF=PM,DSORG=PSX
               ,BLKSIZE=798
WORKFILE DCB      DDNAME=SORTIN,RECFM=FB,LRECL=80,MACRF=PM,DSORG=PS,BLKX
               SIZE=3200
CARDS    DCB      DDNAME=CARDS,LRECL=80,MACRF=PM,DSORG=PS
OUTFILE  DCB      DDNAME=SORTOUT,RECFM=FB,LRECL=80,MACRF=GM,DSORG=PS,BLX
               KSIZE=3200,EODAD=ENDFILE
DIRDCB   DCB      DDNAME=PTS,RECFM=U,BLKSIZE=256,MACRF=R,DSORG=PS,EXLSTX
               =RDJFCB
MEMDCB   DCB      DDNAME=PTS,EODAD=FIND,MACRF=RP,DSORG=PS
INPUT    DCB      DDNAME=SYSIN,EODAD=START,MACRF=GM,DSORG=PS
SPLIT    DC    X'00'
DOTYPE   DC    X'00'
UCBADDR  DC    F'0'
ASTERS   DC    CL3'*** '
HEADER1  DS    0F
PTS      DC    C'PTS    = '
PTSNAME  DC    CL98' '
PAGE     DC    CL122' ',C'PAGE ',CL6'     0'
RDJFCB   DS    0F
         DC    X'87'
         DC    AL3(BUF1)
         DS    0D
TTR      DC    F'0'
I        DC    C' '
INDEX1   DC    CL72'1         *** PTS NAME IS   '
         DC    CL11'VOL SER OF '
VOLUME   DC    CL6' '
         DC    CL9' ON UNIT '
UNIT     DC    CL3' '
         DC    CL4' AT '
TIME     DC    XL9'4020217A20207A2020'
         DC    CL4' ON '
DATE     DC    CL8' '
         DC    CL7' '
TOTALCT  DC    F'0'
LINECT   DC    F'0'
PGESIZE  DC    F'58'
WORK1    DC    D'0'
ADDRTIOT DC    F'0'
PARMLIST DC    A(MEMDCB)
LEN      DC    F'0'
MAXFMIDS DC    H'255'
#FMIDS   DC    H'0'
TABADDR  DC    F'0'
         DC    A(CARD)
LIB      DC    CL8'PTS'
MASK     DC    X'402020202020'
         DS    0F
PARMPTR  DC    X'80'
         DC    AL3(PARMLST)
         DC    H'0'
PARMLST  DC    AL2(PARMEND-PARMLST1)
PARMLST1 DC    A(SORTAREA)
         DC    A(SORTEND)
         DC    A(RECSTRT)
         DC    A(RECEND)
ZERO     DC    A(0)             NO E15 EXIT
         DC    A(0)             NO E35 EXIT
PARMEND  EQU   *
SORTAREA DC    C' SORT FIELDS=(X,X,XX,X,Y,Y,YY,Y)'
SORTEND  EQU   *
RECSTRT  DC    C' RECORD LENGTH=80,TYPE=F '
RECEND   EQU   *
SORTBYCH DC    C'2,7,CH,A'
SORTSTRT DC    C'1,1,BI,A'
TITLE    DS    0CL133
         DC    C'-  THE FOLLOWING SYSMODS WERE EXCLUDED FOR FMID '
FMID     DC    CL7' '
COLON    DC    C':'
HERE     EQU   *-TITLE
FILLER   DC    (133-HERE)C' '
HOLD     EQU   SAVEAREA+72
CARD     EQU   SAVEAREA+232
WORK2    EQU   SAVEAREA+312
BUF1     EQU   SAVEAREA+392
DATE1    EQU   SAVEAREA+648
WORK     EQU   DATE1
         END   PTSSRCH
