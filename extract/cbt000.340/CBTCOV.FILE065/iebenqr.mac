         MACRO
&NAME    SAVREGS
         EJECT
&NAME    START 0
         SPLEVEL SET=1
         AIF (&SYSNDX GT 1).GOROUND
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
RBASE    EQU   11
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
RSAVE    EQU   13
RRETURN  EQU   14
RTRAN    EQU   15
** SAVE REGISTERS ** SAVE INTERNAL TO MACRO
.GOROUND ANOP
         B     14(0,R15)
         DC    AL1(8)
         DC    CL8'&NAME'         &NAME USED FOR DEBUG
** &NAME * USED TO PROVIDE EASY DEBUG
         STM   R14,R12,12(R13)
         BALR  RBASE,0            SET UP
         USING *,RBASE            BASE REGISTER
         CNOP  0,4
BEGINIT  BAL   R2,*+76                                          **RRC**
         DS    18F                SAVE AREA
         ST    R13,4(R2)          FWD POINTER
         ST    R2,8(R13)          BKWD POINTER
         LR    R13,R2
         MEND
         MACRO
&NAME    RETRN &RC=0
** RETRN ** RESTORE REGISTERS, SET RETURN INDICATION,
**  SET RC=XX, RETURN VIA RRETURN
&NAME    L     RSAVE,4(RSAVE)     ADDRESS OF SAVE AREA
         LM    RRETURN,R12,12(RSAVE)  RESTORE REGISTERS
         MVI   12(RSAVE),X'FF'    SET RETURN INDICATION
         LA    RTRAN,&RC
         BR    RRETURN            RETURN
         MEND
         EJECT
NQDQ     TITLE 'IEBENQR - UTILITY PROGRAM ENQ/DEQ FRONT END'
***********************************************************************
*                                                                     *
*        NAME      IEBENQR                                            *
*                                                                     *
*        FUNCTION  TO PROVIDE DATA SET INTEGRITY BY ACTING AS A       *
*                  COMMON FRONT-END FOR UTILITY PROGRAMS SPECIFIED    *
*                  IN THE WHERE-TO-GO TABLE (WTGTBL).                 *
*                                                                     *
*                                                                     *
***********************************************************************
************** M O D I F I C A T I O N    L O G ***********************
*                                                                     *
* MODIFIED BY - RONALD CRUZ   ATLANTIC RICHFIELD COMPANY              *
*                                                                     *
*                                                                     *
* MODIFIED TO BYPASS ENQ/DEQ FRONT END IF UTILITY IS DYNAMICALLY      *
* INVOKED BY SMP THIS WILL ELIMINATE NEEDLESS ENQUEUES.               *
*                                                                     *
* MODIFIED LENGTH OF RNAME TO 44 BYTES TO CONFORM TO LINKAGE EDITOR   *
* ENQUEUE, WHICH ENQUEUES ON A LENGTH OF 44 BYTES.                    *
*                                                                     *
* MODIFIED TO INSERT 'FF' FOR LAST ENTRY IN ENQLIST, PORTION OF THIS  *
* CODE WAS IN PLACE BUT WAS NOT FUNCTIONING PROPERLY.                 *
*                                                                     *
* ADDED A ESTAE EXIT ROUTINE TO DEQUEUE DATA SETS IF UTILITY PROGRAM  *
* ABNORMALLY TERMINATES (IE. IF UTILITY PROGRAM IS INVOKED IN         *
* FOREGROUND DATA SETS WILL NOT BE DEQUEUED UNLESS USER ISSUES A      *
* FREE OR ENDS SESSION.)                                              *
*                                                                     *
*                                                                     *
* MODIFIED BY - RONALD CRUZ   CADAM INC  06/04/86                     *
*                                                                     *
* CODE WAS MODIFIED AND ADDED TO OPEN SYSIN DD FILE AND SCAN IEBCOPY  *
* CONTROL STATEMENTS AND BUILD ENQUEUE LIST FROM DDNAMES SPECIFIED    *
* BY THE "OUTDD" CONTROL KEYWORD. IF SYSIN DD IS DUMMY AN ENQUEUE IS  *
* PERFORMED ON THE SYSUT2 DD ONLY, SINCE THIS IMPLIES A COMPLETE PDS  *
* COPY USING SYSUT1 AS INPUT AND SYSUT2 AS OUTPUT.                    *
* UNFORTUNATELY IF IEBCOPY IS INVOKED IN FOREGROUND AND SYSIN IS      *
* ALLOCATED AS "TERM=TS" NO ENQUEUE FRONT-END CHECKING IS PERFORMED.  *
* CODE WAS ADDED TO SUPPORT IEBUPDTE, ENQUEUE IS PERFORMED ON SYSUT1  *
* AND/OR SYSUT2 IF PRESENT.                                           *
*                                                                     *
***********************************************************************
         EJECT
IEBENQR  SAVREGS
         ST    R1,R1SAVE                STORE PARAMETER REGISTOR.
         USING ENQPARM,R9
         LA    R9,ENQLIST
         ST    R9,ESTAEPAR+8            SAVE REGISTERS          **RRC**
         ST    RBASE,ESTAEPAR           FOR ESTAE EXIT          **RRC**
*  ESTABLIST ESTAE ENVIRONMENT FOR UTILITY MODULE EXECUTION
         ESTAE STAERTN,PARAM=ESTAEPAR,TERM=YES                  **RRC**
         L     R2,548                   PSAAOLD A(CURRENT ASCB)      V4
         L     R2,60(,R2)               ASCBTSB A(TIME SHARE BLOCK)  V4
         ST    R2,TSBADDR               SAVE A(TIME SHARE BLOCK)     V4
         L     R2,16                    GET CVT POINTER
         L     R2,0(,R2)                A(TCB WORDS)
         L     R2,4(,R2)                A(CURRENT TCB)
         ST    R2,TCBADDR               SAVE IT.
         L     R3,180(R2)               A(JSCB)                      V2
         L     R3,320(R3)               A(QDB)                       V2
         L     R3,12(R3)                A(FIRST DSAB)                V2
         ST    R3,DSABADDR              SAVE A(FIRST DSAB)           V2
         L     R3,12(,R2)               A(CURRENT TIOT)
         LA    R3,24(,R3)               INCREMENT PAST HEADING
         ST    R3,TCBTIOT               SAVE A(FIRST DD ENTRY)
         L     R3,0(,R2)                A(RB)
         L     R3,12(,R3)               A(CDE)
         SPACE 2
***********************************************************************
*        LOOK FOR MATCH BETWEEN WTGTBL AND CDE.                       *
***********************************************************************
         LA    R2,WTGTBL                GET LIST OF VALID PGMS AND
         LA    R1,TBLEND                NUMBER OF ENTRIES IN TABLE.
FINDMOD  CLC   8(8,R3),0(R2)            ?/MOD TO BE BRANCH TO        V1
         BE    MODFND                   YES, BRANCH.
         LA    R2,16(,R2)               NO, INCR TO NEXT             V1
         BCT   R1,FINDMOD               DO AGAIN IF ANY LEFT
         MVI   ABCODE,BADWTG            SAY INVALID WTG TABLE.
         B     ABEND                    GO ABEND
MODFND   MVC   WHOMTOGO,12(R2)          SAVE MOD ADDR TO BRANCH TO   V1
         LR    R10,R3                   LOAD A(CDE)             **RRC**
FINDPGM  EQU   *                                                **RRC**
         CLC   8(8,R10),=CL8'HMASMP'    ARE WE EXECUTING SMP    **RRC**
         BE    NONQDQ                   YES BYPASS ENQ FRONT END**RRC**
         CLC   8(8,R10),=CL8'GIMSMP'    ARE WE EXECUTING SMP/E  **RRC**
         BE    NONQDQ                   YES BYPASS ENQ FRONT END**RRC**
         ICM   R10,15,0(R10)            BUMP TO NEXT CDE ENTRY  **RRC**
         BZ    LETRGO                   NO MORE ENTRIES CONT.   **RRC**
         B     FINDPGM                  LOOP TILL COMPLETE      **RRC**
NONQDQ   EQU   *                                                **RRC**
         MVI   CURQNUM,X'0'             INDICATE NO ENQ OR DEQ  **RRC**
         B     LINK                     LINK TO UTILITY PGM     **RRC**
LETRGO   EQU   *                                                **RRC**
         L     R15,8(,R2)               GET P/P CODE ADDRESS.
         BALR  R12,R15                  GO PERFORM FRONT-END PP.
         TM    ABCODE,255               DO WE CONTINUE?
         BM    ABEND                    NO, BRANCH.
         SR    R1,R1                    CLEAR FOR INSERT.
         IC    R1,CURQNUM               GET NUMBER OF ENQ ENTRIES.
         LTR   R1,R1                    ARE THERE ANY?
         BZ    LINK                     NO, BRANCH.
         LA    R9,ENQLIST               OBTAIN PARM LIST ADDRESS.
         BCTR  R1,0                     COMPUTE DISPLACEMENT TO LAST
         MH    R1,=H'16'                PARM IN LIST.
         AH    R1,=H'16'                BUMP PAST LAST ENTRY    **RRC**
         AR    R1,R9                      X
         MVI   0(R1),X'FF'         TURN ON LAST PARM INDICATOR. **RRC**
         CLI   CURQNUM,X'01'            MULTIPLE RESERVE?
         BH    MULTENQ
ENQ      RESERVE MF=(E,ENQLIST)         UNCONDITIONAL ENQ
LINK     DS    0H
         L     R1,R1SAVE                RELOAD PARAMETER REGISTOR.
         ICM   R15,15,WHOMTOGO          LOAD ADDRESS TO BRANCH TO    V1
         BZ    PREABEND                 ABEND IF INVALID ADDRESS     V1
         BALR  R14,R15                  GIVE CONTROL TO REAL MODULE  V1
         ST    R15,R15SAVE              SAVE RETURN CODE
         LA    R12,RET                  SET RETURN REGISTER
         CLI   CURQNUM,X'01'            MULT DEQ NEEDED?
         BH    MULTDEQ
         BAL   R12,DEQUEUE              GO RELEASE RESOURCES.
RET      EQU   *
         L     R15,R15SAVE              RESTORE RETURN CODE
         L     R13,4(,R13)
         RETURN (14,12),RC=(15)
*
NODSN    EQU   *                       ZERO LENGTH DSNAME FOUND, SET
         MVI   ABCODE,BADDSN           77 ABEND CODE
         B     ABEND
PREABEND MVI   ABCODE,BADWTG            INDICATE BAD WTG ADDRESS     V1
ABEND    SR    R1,R1
         ICM   R1,9,DUMP                TURN ON DUMP AND ABEND CODE.
         SVC   13                       INTO R1.
         SPACE 2
***********************************************************************
*        FINDDD -  SEARCHES THE TIOT FOR A DDNAME POINTED TO BY R5.   *
*                  IF THE DDNAME IS FOUND, R7 POINTS TO ITS ENTRY     *
*                  INTO THE TIOT.  IF NOT FOUND, AN APPROPRIATE       *
*                  ABEND CODE IS SET IN FIELD 'ABCODE'.               *
***********************************************************************
         SPACE 1
FINDDD   DS    0H
         L     R7,TCBTIOT               FIRST DD ENTRY.
         SR    R8,R8                    CLEAR REG FOR INSERT OF
AGAIN    IC    R8,0(R7)                 LENGTH FIELD.
         CLC   4(8,R7),0(R5)            DDNAMES MATCH?
         BE    0(,R10)                  YES, BRANCH.
         LA    R7,0(R8,R7)              INCR TO NEXT DD
         CLC   0(4,R7),=4X'0'           LAST ONE
         BNE   AGAIN                    NO, CONTINUE
         MVI   ABCODE,NOSUT2            SAY SYSUT2 DDCARD NOT FOUND.
         BR    R10                      RETURN
         EJECT
***********************************************************************
*        DOENQ                                                        *
*                                                                     *
***********************************************************************
*                                                                     *
DOENQ    DS    0H
         L     R6,16(,R7)               GET UCB ADDRESS
         LA    R6,0(,R6)                CLEAR UPPER BITS
         LTR   R6,R6                    IS IT DUMMY?
         BZ    0(,R10)                  YES, FORGET ENQ FOR THIS DD
         TM    18(R6),DASD              CHECK FOR DA.
         BNO   0(,R10)                  BRANCH IF NOT DA.
         CLI   CURQNUM,QNUMAX
         BNL   0(,R10)
         MVC   INDCB+40(8),4(R7)        MOVE DDNAME TO DCB
         USING INFMJFCB,R6
         LA    R6,JFCB
         RDJFCB INDCB
         CLC   JFCBDSNM(8),=CL8'SYSCTLG.' IS IT A CVOL POINTER       V4
         BE    0(,R10)                    BRANCH IF YES              V4
         TM    JFCBIND2,JFCTEMP           TEMPORARY DATA SET?
         BO    0(,R10)                    YES, DON'T ENQ.
         TM    JFCBIND2,JFCNEW            DISP=NEW SPECIFIED?
         BO    0(,R10)                    YES, DON'T ENQ.
         LA    R2,0                       CHARACTER COUNTER          V3
         LA    R4,JFCBDSNM             START OF DSNAME FIELD         V3
TEST     CLI   0(R4),X'40'             LOOK FOR FIRST BLANK          V3
         BE    DONE                    CONTINUE                      V3
         LA    R2,1(R2)                COUNT NONBLANKS               V3
         LA    R4,1(R4)                BUMP TO NEXT DSN CHARACTER    V3
         B     TEST                    GO TEST IT.                   V3
DONE     LTR   R2,R2                   CHECK FOR ZERO LENGTH DSN     V3
         BZ    NODSN                   IF SO, ITS AN ERROR.          V3
         LR    R0,R2                   SAVE TRUE LENGTH              V3
         BCTR  R2,0                    REDUCE BY 1 FOR CLI AND MVC   V3
         STC   R2,CMPDSN+1             PUT LEN INTO COMPARE          V3
         STC   R2,MVDSN+1              PUT LEN INTO MOVE             V3
         LR    R2,R0                   RESTORE FOR REST OF ROUTINE   V3
         LA    R9,ENQLIST               ORIGIN OF ENQ PARMS.
         LA    R4,RNAMES                ORIGIN OF RNAMES.
         LA    R3,UCBLIST               ORIGIN OF UCBLIST.
         SR    R1,R1                    CLEAR FOR INSERT.
         IC    R1,CURQNUM               CURRENT NUMBER OF ENQS.
         LTR   R1,R1                    ANY ENQS YET.
         BZ    ADDENQ                   NO, BYPASS VERIFICATION.
DUPENQ   SR    R0,R0                    CLEAR REGISTER FOR INSERT    V4
CMPDSN   CLC   JFCBDSNM(44),0(R4)       USED THIS RNAME BEFORE?      V3
         BE    0(,R10)                  YES, BYPASS ENQ.
         IC    R0,LEN                   INSERT CURRENT RNAME LENGTH  V4
         AR    R4,R0                    POINT TO NEXT RNAME          V4
         LA    R3,LUCB(,R3)             POINT TO NEXT UCBLIST MEMBER V4
         LA    R9,16(,R9)               INCREMENT TO NEXT ENQ
         BCT   R1,DUPENQ                IF ANY LEFT, DO AGAIN.
         IC    R1,CURQNUM               CURRENT ENQ COUNT.
ADDENQ   LA    R1,1(,R1)                ADD ONE TO IT.
         STC   R1,CURQNUM               AND SAVE IT.
MVDSN    MVC   0(44,R4),JFCBDSNM        MOVE DSNAME TO RNAME AREA    V3
         DROP  R6
         LA    R2,44          SET LENGTH SAME AS LINKAGE ED.    **RRC**
         STC   R2,LEN                   SET RNAME LENGTH IN ENQ.
         ST    R4,RNAME                 SAVE ADDRESS IN PARAMETER.
         MVC   QNAME,=A(SYSDSN)         SAVE ADDRESS OF QNAME.
         ST    R3,UCBAD                 UCB POINTER ADDR IN PARM LIST.
         MVC   0(4,R3),UCBADDR          MOVE UCB ADDRESS TO UCBLIST.
         MVI   LASTIND,X'C0'            TURN OFF LAST IND. BITS.
         OI    OPT1,X'48'               SET OPTIONS TO RESERVE.
         BR    R10
         EJECT
***********************************************************************
*                                                                     *
*     MULTIPLE RESERVES REQUIRED                                      *
*                                                                     *
***********************************************************************
MULTENQ  EQU   *
         LA    R9,ENQLIST               GET ADDRESS OF ENQLIST
         MVI   MENQL,X'C0'              SET LAST INDICATOR
MORE     MVC   MENQL+1(15),1(R9)        MOVE ENTRIES FROM ENQLIST
         MVI   MENQL+2,X'0B'            RESERVE WITH RET=USE
         RESERVE MF=(E,MENQL)
         LTR   R15,R15                  DID WE GET RESOURCE
         BZ    ADD16                    YES, TEST FOR MORE
         LA    R8,ENQLIST               NO, FIND NUMBER OF DEQ'S
         CR    R8,R9                    REQUIRED
         BE    STIME                   NO DEQ'S REQUIRED
         S     R9,=F'16'                GET LAST ENTRY DEQ'D
         LR    R8,R9
         MVI   0(R8),X'C0'              SET LAST INDICTOR
         BAL   R12,MULTDEQ              GO DEQ THE RESERVED RESOURCES
         MVI   0(R8),X'40'              TURN OFF LAST INDICATOR
STIME    EQU   *
         STIMER WAIT,BINTVL=HALF        WAIT HALF SEC BEFORE NEXT TRY
         B     MULTENQ
ADD16    LA    R9,16(,R9)               ADD 16 TO LIST POINTER
         CLI   0(R9),X'FF'              TEST FOR END OF LIST    **RRC**
         BE    LINK                     YES, GO LINK TO PROGRAM **RRC**
         B     MORE
         DC    F'0'
MENQL    DC    4F'0'                    PARM LIST
HALF     DC    F'50'                    HALF SECOND TIME INTERVAL
         EJECT
***********************************************************************
*        DEQUEUE   THE FOLLOWING CODE WILL DEQUEUE ALL THE RESOURCES  *
*                  THAT WERE ENQED UPON BY THIS TASK.  THE RET=HAVE   *
*                  OPTION IS USED SO THAT ONLY THOSE RESOURCES        *
*                  THAT WERE ACTUALLY ASSIGNED WILL BE DEQUEUED.      *
***********************************************************************
*                                                                     *
DEQUEUE  DS    0H
         CLI   CURQNUM,ZIP              ANY ENQS NEED TO BE DEQED?
         BE    0(,R12)                  NO, RETURN.
         LA    R9,ENQLIST               GET PARM LIST ADDRESS.
SETOPT   MVI   OPT1,X'09'            SET DEQ OPTIONS W/RET=HAVE **RRC**
         CLI   LASTIND,X'C0'            LAST RESOURCE?
         LA    R9,16(,R9)               INCREMENT TO NEXT ENTRY
         BNE   SETOPT                   NO, BRANCH.
         DEQ   MF=(E,ENQLIST)           YES, DEQ ALL RESOURCES.
         BR    R12                      RETURN
MULTDEQ  EQU   *
         CLI   CURQNUM,ZIP              ANY ENQ ENTRIES         **RRC**
         BE    0(,R12)                  NO, RETURN              **RRC**
         LA    R9,ENQLIST
         MVI   MENQL,X'C0'              SET END LIST INDICATOR
MORED    MVC   MENQL+1(15),1(R9)        MOVE IN REMAINDER OF LIST
         MVI   MENQL+2,X'09'            SET DEQ OPTIONS W/RET=HAVE
         DEQ   MF=(E,MENQL)
         LA    R9,16(,R9)               UPDATE POINTER TO LIST ENTRIES
         CLI   LASTIND,X'FF'            IS LAST INDICATOR SET?  **RRC**
         BNE   MORED                    NO GO DEQ THE REST      **RRC**
         BR    R12                      OTHERWISE GET OUT OF THIS LOOP
         EJECT
***********************************************************************
*     IEWL AND SUPERZAP PROCESSING                                    *
***********************************************************************
*                                                                     *
LKED     LA    R5,SLMD                  POINT TO SYSLMOD DD
         B     GENER1
ZAP      LA    R5,SLIB                  POINT TO SYSLIB DD
         B     GENER1
         SPACE 2
***********************************************************************
*        UPDATE - INTERCEPT FOR IEBUPDTE                              *
***********************************************************************
UPDATE   DS    0H
         LA    R5,SUT1                 LOAD ADDRESS OF SYSUT1
         BAL   R10,FINDDD              GO SCAN FOR SYSUT1 DD
         CLI   ABCODE,X'16'            SYSUT1 DD FOUND ?.
         BE    CHK4UT2                 NO
         MVI   ABCODE,X'00'            CLEAR ABEND CODE
         L     R5,16(,R7)              GET UCB ADDRESS
         LA    R5,0(,R5)               CLEAR HIGH ORDER BIT
         ST    R5,UCBADDR              SAVE UCB ADDRESS
         BAL   R10,DOENQ               GO ENQUEUE ON SYSUT1
CHK4UT2  DS    0H
         MVI   ABCODE,X'00'            CLEAR ABEND CODE
         LA    R5,SUT2                 LOAD ADDRESS OF SYSUT2
         BAL   R10,FINDDD              GO SCAN FOR SYSUT2 DD
         CLI   ABCODE,X'16'            SYSUT2 DD FOUND ?.
         BE    UT2NFND                 NO, CONTINUE.
         L     R5,16(,R7)              GET UCB ADDRESS
         LA    R5,0(,R5)               CLEAR HIGH ORDER BIT.
         ST    R5,UCBADDR              SAVE UCB ADDRESS.
         BAL   R10,DOENQ               GO ENQUEUE ON SYSUT2
         BR    R12                     CONTINUE PROCESSING
UT2NFND  DS    0H
         MVI   ABCODE,X'00'            CLEAR ABEND CODE
         BR    R12                     CONTINUE PROCESSING
         SPACE 2
***********************************************************************
*        GENER - INTERCEPT FOR IEBGENER                               *
***********************************************************************
*                                                                     *
GENER    DS    0H
         LA    R5,SUT2                  DD CARD TO FIND.
GENER1   BAL   R10,FINDDD               GO FIND IT.
         TM    ABCODE,255               WAS IT FOUND?
         BM    0(,R12)                  NO, ABEND.
         L     R5,16(,R7)               GET ADDR OF UCB
         LA    R5,0(,R5)                CLEAR UPPER BITS
         ST    R5,UCBADDR               STORE IT
         BAL   R10,DOENQ                YES, GO ENQ
         BR    R12                      RETURN
         SPACE 2
***********************************************************************
*        MOVE      PREPROCESSING FOR IEHMOVE.                         *
***********************************************************************
MOVEX    DS    0H
         MVC   DDLIST,=A(MOVEDD)        ADDR OF COMPERAND LIST.
         MVI   NUMDD,NMVEDD             LENGTH OF COMPERAND LIST.
         B     COPY0A
         SPACE 2
***********************************************************************
*    IEHPROGM PROCESSING                                              *
***********************************************************************
*                                                                     *
PROGM    DS    0H
         MVC   DDLIST,=A(COPYDD)        ADDR OF DD LIST
         MVI   NUMDD,NPRGMDD            LIST ENTRIES
         B     COPY0A
         SPACE 2
***********************************************************************
*        COPY - PERFORM PREPROCESSING FUNCTIONS FOR IEBCOPY           *
*                                                                     *
*        CHECK FOR DUMMY SYSIN, IF FOUND ENQUEUE ON SYSUT2            *
***********************************************************************
COPY     DS    0H
         L     R5,TCBADDR           CURRENT TCB ADDRESS
         L     R5,180(,R5)          JSCB ADDRESS
         L     R5,320(,R5)          QDB ADDRESS
         L     R5,12(,R5)           FIRST DSAB ADDRESS
SAVEDSAB DS    0H
         LR    R6,R5                SAVE DSAB ADDRESS
         L     R5,20(,R5)           SIOT ADDRESS
SIOTSCAN DS    0H
         CLC   20(8,R5),=CL8'SYSIN' DDNAME = SYSIN
         BE    CHK4TSO              CHECK FOR TSO USER
         LR    R5,R6                LOAD SAVED DSAB ADDRESS
         L     R5,4(,R5)            NEXT DSAB ADDRESS
         LTR   R5,R5                END OF DSAB CHAIN
         BNZ   SAVEDSAB             NO, GO SAVE AND LOOP
         BR    R12                  NO SYSIN, LET IEBCOPY HANDLE IT
CHK4TSO  DS    0H
         CLC   TSBADDR,=F'0'        IS THIS A TSO USER
         BE    CHK4DMY              NO, GO CHECK FURTHER
         TM    63(R5),X'40'         SYSIN DD TERM=TS
         BO    0(,R12)              YES, RETURN
CHK4DMY  DS    0H
         TM    72(R5),X'80'         SYSIN DD DUMMY
         BO    CHK4UTDD             YES, CHECK FOR SYSUT2
         B     COPY001              NO, GO PROCESS SYSIN FILE
CHK4UTDD DS    0H
         MVI   ABCODE,X'00'
         LA    R5,SUT2              R5 = ADDRESS OF SYSUT2
         BAL   R10,FINDDD           GO LOOK FOR IT
         CLI   ABCODE,NOSUT2        WAS SYSUT2 FOUND
         BNE   UT2FND               YES
         WTO   'IEBNQ99 SYSIN DD IS DUMMY, AND SYSUT2 DD MISSING',ROUTC+
               DE=11
         MVI   ABCODE,99            INDICATE ABEND CODE OF 99
         B     ABEND                GO BARF
UT2FND   DS    0H
         MVI   ABCODE,X'00'       CLEAR RC FIELD
         L     R5,16(,R7)         UCB ADDRESS
         LA    R5,0(,R5)          CLEAR UPPER BITS
         ST    R5,UCBADDR         SAVE UCB ADDRESS
         BAL   R10,DOENQ          ADD TO ENQLIST
         BR    R12                RETURN
COPY001  DS    0H
         OPEN  (SYSIN,INPUT)      OPEN INPUT FILE
         SPACE 1
GETSYS   DS    0H
         LA    R7,72              MAX. SEARCH LIMIT FOR CONTROL CARD
         GET   SYSIN,RECAREA
         LA    R10,RECAREA        LOAD ADDRESS OF INPUT AREA INTO REG
         SPACE 1
LOOPA    DS    0H
         CLC   0(6,R10),=CL6'OUTDD=' OUTPUT DD
         BE    LOOPB                 YES
         CLC   0(2,R10),=CL2'O='     OUTPUT DD
         BE    LOOPD                 YES
         LA    R10,1(,R10)            INCREMENT
         BCT   R7,LOOPA              LOOP
         B     GETSYS                GET NEXT CONTROL CARD
LOOPB    DS    0H
         LA    R10,6(,R10)           INCREMENT PAST KEY WORD
         B     LOOPE
LOOPD    DS    0H
         LA    R10,2(,R10)           INCREMENT PAST KEY WORD
         SPACE 2
LOOPE    DS    0H
         LA    R7,9                 MAXIMUM LENGTH OF DDNAME + 1 CHAR.
         LA    R6,DD2ENQ            ADDRESS OF DD TO ENQ UPON
         MVC   DD2ENQ(8),=CL8' '    CLEAR FIELD
LOOPF    DS    0H
         CLI   0(R10),C' '          END OF DDNAME
         BE    COPY0A               YES
         CLI   0(R10),C','          END OF DDNAME
         BE    COPY0A               YES
         MVC   0(1,R6),0(R10)       MOVE CHARACTER
         LA    R10,1(,R10)          INCREMENT
         LA    R6,1(,R6)            INCREMENT
         BCT   R7,LOOPF
ENDCLOSE DS    0H
         CLOSE (SYSIN)
         FREEPOOL SYSIN
         BR    R12                      GO ISSUE ENQUEUE
COPY0A   DS    0H
         SR    R6,R6
         L     R7,TCBTIOT               ADDRESS OF FIRST DD ENTRY
         LA    R5,DD2ENQ                DDNAME TO ENQUEUE UPON
COPY0A1  DS    0H
         CLC   4(8,R7),0(R5)            LOOK FOR TIOT MATCH
         BE    COPY0A2                  YES, GO CHECK FOR TSO USER
         IC    R6,0(R7)                 GET LENGTH OF NEXT TIOT ENTRY
         LA    R7,0(R6,R7)              INCREMENT TO NEXT ENTRY
         CLC   0(4,R7),=4X'0'           END OF TIOT
         BE    GETSYS                   YES, NO MATCH FOUND
         B     COPY0A1                  LOOP
COPY0A2  DS    0H
         CLC   TSBADDR,=F'0'            IS THIS A TSO USER
         BE    COPY0A5                  NO, PREPARE FOR ENQUEUE
         L     R5,DSABADDR              ADDRESS OF FIRST DSAB
COPY0A3  DS    0H
         CLM   R7,7,17(R5)              TIOT ADDRESS MATCH
         BE    COPY0A4                  YES, KEEP CHECKING
         ICM   R5,15,4(R5)              INSERT ADDRESS(NEXT DSAB)
         BZ    COPY0A5                  END OF DSAB CHAIN, GO DO ENQ
         B     COPY0A3                  LOOP
COPY0A4  DS    0H
*        TM    34(R5),X'80'             DD DYNAMICALLY ALLOCATED
*        BNO   GETSYS                   NO, BYPASS ENQ
         TM    34(R5),X'40'             DD PERMANENTLY ALLOCATED
         BO    GETSYS                   YES, BYPASS ENQ
COPY0A5  DS    0H
         L     R5,16(,R7)               UCB ADDRESS
         LA    R5,0(,R5)                CLEAR UPPER BITS
         ST    R5,UCBADDR               SAVE UCB ADDRESS
         BAL   R10,DOENQ                ADD DDNAME TO ENQ LIST
         B     GETSYS                   GO GET NEXT DD CARD
**********************************************************************
*        ESTAE - EXIT ROUTINE TO DEQUEUE DATA SETS                   *
**********************************************************************
STAERTN  DS    0H                                               **RRC**
         USING STAERTN,R15              ADDRESSABILITY          **RRC**
         C     R0,SDWATEST              IS SDWA PRESENT         **RRC**
         BNE   STAERTNA                 YES                     **RRC**
         SR    R15,R15                  NO, CONTINUE ABEND      **RRC**
         BR    14                       GO BARF                 **RRC**
STAERTNA DS    0H                                               **RRC**
         STM   14,12,ESTAESAV           SAVE CALLERS REGS       **RRC**
         L     R2,0(R1)                 RESTORE PARM AREA       **RRC**
         L     RBASE,0(R2)              RESTORE BASE REGISTER   **RRC**
         L     R9,8(R2)                 RESTORE DSECT ADDRESS   **RRC**
         DROP  15                                               **RRC**
         USING BEGINIT,RBASE          RESUME PGM ADDRESSABILITY **RRC**
         LA    R12,STAERTNC             LOAD RETURN POINT       **RRC**
         CLI   CURQNUM,X'01'            MULTI DEQ REQUIRED      **RRC**
         BH    MULTDEQ                  YES                     **RRC**
         BAL   R12,DEQUEUE              GO DEQUE ONLY ONE       **RRC**
STAERTNC DS    0H                                               **RRC**
         LM    14,12,ESTAESAV           RESTORE CALLERS REGS    **RRC**
         SR    15,15                    INDICATE NO RETRY       **RRC**
         BR    14                       GO BARF                 **RRC**
ESTAESAV DS    18F                      REGISTER SAVE ARES      **RRC**
SDWATEST DC    F'12'                    SDWA TEST SWITCH        **RRC**
         EJECT                                                  **RRC**
***********************************************************************
*         CONSTANTS, EQUATES, AND STORAGE AREAS                       *
***********************************************************************
LUCB     EQU   4                        LENGTH OF UCB ENTRY
LQNAME   EQU   8                        LENGTH OF QNAME
LRNAME   EQU   44                       MAX LENGTH OF RNAME          V3
ENQLEN   EQU   LQNAME+LRNAME            MAX LENGTH OF ENQ ENTRY
QNUMAX   EQU   10                       MAXIUM NUMBER OF ENQS.
RETHAVE  EQU   X'01'
RETCHNG  EQU   X'02'
RETUSE   EQU   X'03'
RETTEST  EQU   X'07'
SYS      EQU   X'40'
MSYS     EQU   X'48'                    SYSTEMS
RESERVE  EQU   X'08'                    RESERVE EXCLUSIVE
SHR      EQU   X'80'
LASTENQ  EQU   255
NOTAVAIL EQU   255                      RESOURCE NOT AVAILBLE FLAG
ZIP      EQU   0
DASD     EQU   X'20'                    INDICATES DIRECT ACCESS
***********************************************************************
*   ABEND CODES                                                       *
***********************************************************************
BADWTG   EQU   1                        WTGTBL DOES NOT MATCH THE ALIAS
NOSUT2   EQU   22                       NO 'SYSUT2' DDCARD
OPCANC   EQU   100                      OPERATOR CANCELLED JOB
BADDSN   EQU   77                       ZERO LENGTH DSNAME FOUND
*
SAVEDDN  DS    F
SAVEADDR DS    F
UCBADDR  DC    F'0'
TSBADDR  DC    F'0'
DSABADDR DC    F'0'
TCBTIOT  DS    F                        TIOT & 24 (FIRST DD ENTRY)
DDLIST   DC    F'0'
WHOMTOGO DC    F'0'                     WHICH UTILITY TO BRANCH TO   V1
R1SAVE   DS    F
R15SAVE  DS    F
CURQNUM  DC    X'0'                     NUMBER OF CURRENT ENQS.
DUMP     DC    X'80'                    FLAG TO FORCE DUMP.
ABCODE   DC    X'00'                    FIELD CONTAINS ABEND CODE.
WAITFLG  DC    X'0'                     X'FF' - WAIT REQUESTED BY OPER.
NUMDD    DC    X'0'                     NUMBER OF DDCARDS IN LIST.
ESTAEPAR DC    4F'0'                    ESTAE PARAM SAVE AREA  **RRC**
         EJECT
***********************************************************************
*        STORAGE AREA FOR RDJFCB FUNCTION                             *
***********************************************************************
         SPACE 3
INDCB    DCB   DDNAME=DUMMY,EXLST=EXLST,DSORG=PS,MACRF=R
         EJECT
EXLST    DC    XL1'87',AL3(JFCB)
JFCB     DS    XL176                    JFCB AREA
         EJECT
***********************************************************************
*        QNAME AND RNAME FOR ENQ MACRO                                *
***********************************************************************
SYSDSN   DC    CL8'SYSIEWLP'            QNAME='SYSIEWLP'             V3
RNAMES   DC    (QNUMAX)CL(LRNAME)' '    RNAME=DSN FROM JFCB
UCBLIST  DC    (QNUMAX*LUCB)F'0'        UCB ADDRESS LIST
         EJECT
***********************************************************************
*        DDNAMES THAT REQUIRE SPECIAL HANDLING                        *
***********************************************************************
*
SLMD     DC    CL8'SYSLMOD'
SLIB     DC    CL8'SYSLIB'
SOUT     DC    CL8'SYSOUT'
SUT1     DC    CL8'SYSUT1'
SUT2     DC    CL8'SYSUT2'
MOVEDD   DC    CL8'SYSUT1'
COPYDD   DC    CL8'JOBLIB'
         DC    CL8'STEPLIB'
         DC    CL8'JOBCAT'
         DC    CL8'STEPCAT'
         DC    CL8'SYSPRINT'
         DC    CL8'SYSIN'
         DC    CL8'SYSUDUMP'
         DC    CL8'SYSMDUMP'
         DC    CL8'SYSABEND'
DD2ENQ   DC    CL8' '
RECAREA  DC    CL80' '
NPRGMDD  EQU   (*-COPYDD)/8
         DC    CL8' '         ELIMINATE RESERVES FOR CONCATENATIONS
NMVEDD   EQU   (*-MOVEDD)/8
         DC    CL8'SYSUT3'
         DC    CL8'SYSUT4'
NCPYDD   EQU   (*-COPYDD)/8
*
***********************************************************************
*        WTGTBL - WHERE TO GO TABLE
***********************************************************************
*
WTGTBL   DS    0F
         DC    CL8'AMASPZAP',A(ZAP),V(AMASPZAP)                      V1
         DC    CL8'IMASPZAP',A(ZAP),V(AMASPZAP)                      V1
         DC    CL8'IEBCOPYA',A(COPY),V(IEBDSCPY)                     V1
         DC    CL8'IEHMOVE',A(MOVEX),V(IEHMVESD)                     V1
         DC    CL8'IEHPROGM',A(PROGM),V(IEHPROG1)                    V1
         DC    CL8'IEBGENER',A(GENER),V(IEBGENER)                    V1
         DC    CL8'IEBUPDTE',A(UPDATE),V(IEBUPDTE)                   V1
TBLEND   EQU   (*-WTGTBL)/16                                         V1
TCBADDR  DC    F'0'                     CURRENT TCB ADDRESS
         DC    F'0'
ENQLIST  DC    (QNUMAX*4)F'0'
SYSIN    DCB   DSORG=PS,MACRF=(GM),DDNAME=SYSIN,                       X
               EODAD=ENDCLOSE
         LTORG
         EJECT
ENQPARM  DSECT
LASTIND  DS    X                        X'FF' IMPLIES LAST ENQ PARM
LEN      DS    X                        LENGTH OF RNAME
OPT1     DS    X                        OPTION FLAG
RC       DS    X                        RETURN CODE
QNAME    DS    F                        ADDRESS OF QNAME
RNAME    DS    F                        ADDRESS OF R
UCBAD    DS    F                        ADDRESS OF UCB
         EJECT
         PRINT NOGEN
         IEFJFCBN LIST=YES
         END   IEBENQR
