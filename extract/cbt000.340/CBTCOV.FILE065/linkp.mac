LINKP    TITLE 'SUBROUTINE WHICH DYNAMICALLY LINKS TO ANOTHER ROUTINE'
*
*      THIS PROGRAM USES THE LOAD SVC TO LOAD AND CALL A SUBROUTINE
* SPECIFIED BY THE USER. UPON RETURN FROM THE CALLED ROUTINE, THE
* VALUE IN REGISTER 15 IS SAVED. THE CALLING SEQUENCE FOR "LINK" IS
* AS FOLLOWS:
*              1. NAME OF SUBROUTINE TO BE LINKED (8-BYTE CHARACTER)
*              2. RETURN CODE, I.E., REGISTER 15 CONTENTS RETURNED
*                      FROM LINKED SUBROUTINE (4-BYTE BINARY)
*              3. FIRST ARGUMENT FOR LINKED SUBROUTINE
*              4. SECOND ARGUMENT FOR LINKED SUBROUTINE
*                          .
*                          .
*                          .
*            N+2. NTH ARGUMENT FOR LINKED SUBROUTINE
*
*     THE FOLLOWING FORTRAN EXAMPLE USES "LINKP" TO CALL THE SUBROUTINE
* "AMIINT":
*               REAL*8 PGM
*               DATA PGM /8HAMIINT  /
*               INTEGER RETCOD
*               CALL LINKP (PGM,RETCOD,JFLAG)
*               IF (RETCOD .NE. 0) GOTO 700
*                        .
*                        .
*                        .
*               END
*
*      THE "LINKP" SUBROUTINE IS REENTRANT AND REUSEABLE.
*
LINKP    ENTER PARMREG=2,          SAVE REGISTERS AND INITIALIZE       X
               GETMAIN=(72,0)
         REGISTER                  REGISTER EQUATES
         L     R4,0(,R2)           POINT TO ENTRY POINT NAME
         LOAD  EPLOC=(R4)          LOAD THE DESIRED PROGRAM
         LR    R15,R0              POINT TO ENTRY POINT OF MODULE
         LA    R1,8(,R2)           POINT TO PASSED PARAMETER LIST
         CALL  (15),MF=(E,(1))     CALL THE MODULE
         L     R5,4(,R2)           LOAD ADDRESS OF RETURN CODE
         ST    R15,0(,R5)          SAVE THE RETURN CODE
         LEAVE RETCODE=(15),       RETURN TO CALLER                    X
               GETMAIN=(72,0)
         END
