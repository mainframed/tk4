         TITLE 'PGM TO COMPRESS/COPY A DISK VOLUME-MVS (VSAM)'
         MACRO
&NAME    ENTER &REG,&CODE,&ID,&BASE=,&CORE=,&RENT=NO
         LCLC  &ENTCORE
         LCLA  &A,&B,&C,&I,&J
         LCLC  &E,&F,&G,&H
         AIF   ('&REG' EQ '').E1
         AIF   ('&ID' EQ '').NULLID
         AIF   ('&ID' EQ '*').SPECID
&A       SETA  ((K'&ID+2)/2)*2+4
&NAME    B     &A.(0,15)                         BRANCH AROUND ID
&A       SETA  K'&ID
         DC    AL1(&A)                           LENGTH OF IDENTIFIER
.CONTB   AIF   (&A GT 32).SPLITUP
.CONTAA  AIF   (&A GT 8).BRAKDWN
&E       SETC  '&ID'(&B+1,&A)
         DC    CL&A'&E'                          IDENTIFIER
         AGO   .CONTA
.BRAKDWN ANOP
&E       SETC  '&ID'(&B+1,8)
         DC    CL8'&E'                           IDENTIFIER
&B       SETA  &B+8
&A       SETA  &A-8
         AGO   .CONTAA
.SPLITUP ANOP
&E       SETC  '&ID'(&B+1,8)
&F       SETC  '&ID'(&B+9,8)
&G       SETC  '&ID'(&B+17,8)
&H       SETC  '&ID'(&B+25,8)
         DC    CL32'&E.&F.&G.&H'                      IDENTIFIER
&B       SETA  &B+32
&A       SETA  &A-32
         AGO   .CONTB
.NULLID  ANOP
&NAME    DS    0H
         AGO   .CONTA
.SPECID  AIF   ('&NAME' EQ '').CSECTN
&E       SETC  '&NAME'
&A       SETA  1
.CONTQ   AIF   ('&E'(1,&A) EQ '&E').LEAVE
&A       SETA  &A+1
         AGO   .CONTQ
.LEAVE   ANOP
&B       SETA  ((&A+2)/2)*2+4
&NAME    B     &B.(0,15)                         BRANCH AROUND ID
         DC    AL1(&A)
         DC    CL&A'&E'                          IDENTIFIER
         AGO   .CONTA
.CSECTN  AIF   ('&SYSECT' EQ '').E4
&E       SETC  '&SYSECT'
&A       SETA  1
         AGO   .CONTQ
.E4      IHBERMAC 78,360                    CSECT NAME NULL
.CONTA   AIF   (T'&REG(1) NE 'N').E3
         AIF   ('&CODE' EQ 'T').CONTC
         AIF   ('&CODE' NE '').E2
&A       SETA  &REG(1)*4+20
         AIF   (&A LE 75).CONTD
&A       SETA  &A-64
.CONTD   AIF   (N'&REG NE 2).CONTE
         STM   &REG(1),&REG(2),&A.(13)           SAVE REGISTERS
         AGO   .TREP
.CONTE   AIF   (N'&REG NE 1).E3
         ST    &REG(1),&A.(13,0)                 SAVE REGISTER
         AGO   .TREP
.CONTC   AIF   (&REG(1) GE 14 OR &REG(1) LE 2).CONTF
         STM   14,15,12(13)                      SAVE REGISTERS
&A       SETA  &REG(1)*4+20
         AIF   (N'&REG NE 2).CONTG
         STM   &REG(1),&REG(2),&A.(13)           SAVE REGISTERS
         AGO   .TREP
.CONTG   AIF   (N'&REG NE 1).E3
         ST    &REG(1),&A.(13,0)                 SAVE REGISTER
         AGO   .TREP
.CONTF   AIF   (N'&REG NE 2).CONTH
         STM   14,&REG(2),12(13)                 SAVE REGISTERS
         AGO   .TREP
.CONTH   AIF   (N'&REG NE 1).E3
         STM   14,&REG(1),12(13)                 SAVE REGISTERS
         AGO   .TREP
.E1      IHBERMAC 18,360                    REG PARAM MISSING
         MEXIT
.E2      IHBERMAC 37,360,&CODE              INVALID CODE SPECIFIED
         MEXIT
.E3      IHBERMAC 36,360,&REG               INVALID REGS. SPECIFIED
         MEXIT
.TREP    AIF   ('&BASE' NE '').BASE
&I       SETA  11
         AGO   .SETBAS
.BASE    ANOP
&I       SETA  &BASE(1)
.SETBAS  LR    R&I,R15                 LOAD BASE REGISTER.
         AIF   ('&NAME' EQ '').GIVC
&E       SETC  '&NAME'
         AGO   .SETUSE
.GIVC    AIF   ('&SYSECT' EQ '').E4
&E       SETC  '&SYSECT'
.SETUSE  USING &E,R&I
         AIF   (N'&BASE NE 2).DONUSE
&J       SETA  &BASE(2)
         LA    R&J,4095(R&I)           SET UP SECOND BASE REGISTER.
         LA    R&J,1(R&J)
         USING &E+4096,R&J             SET UP ADDRESSING.
.DONUSE  ANOP
         LR    R14,R1        .SAVE THE PARM FIELD ADDRESS.
         AIF   ('&RENT' EQ 'NO').NOTRENT
         AIF   ('&RENT' EQ 'YES').RENT
         MNOTE 8,'RENT MUST EQUAL ''YES'' OR ''NO''.'
         AGO   .NOTRENT
.RENT    ANOP
         MNOTE *,'REENTRANT REGISTER SAVE AREA.'
         AIF   ('&CORE' NE '').ASKCOR
&ENTCORE SETC  '72'
         AGO   .GETMAIN
.ASKCOR  ANOP
&ENTCORE SETC  '&CORE'
.GETMAIN ANOP
*        GETMAIN R,LV=CORE             GET THE CORE.
         GETMAIN R,LV=&ENTCORE
         AGO   .SAVECON
.*       NON-REENTRANT CODE.
.NOTRENT ANOP
         AIF   ('&CORE' EQ '').CONTBT
         MNOTE 8,'RENT=NO AND SPECIFYING CORE ARE MUTUALLY EXCLUSIVE.'
.CONTBT  ANOP
         LA    R1,ENTR&SYSNDX          .GET SAVE AREA ADDRESS.
         B     CONT&SYSNDX             BR AROUND SAVE AREA.
ENTR&SYSNDX DC 18F'0'        .REGISTER SAVE AREA.
CONT&SYSNDX EQU  *
.SAVECON ANOP
         ST    R1,8(R13) STORE MY SAVEAREA ADDRESS IN THE CALLING
*              PROGRAM'S SAVEAREA (WORD 3).
         ST    R13,4(R1) STORE THE CALLING PROGRAM'S SAVEAREA
*              ADDRESS IN MY SAVEAREA (WORD 2).
         LR    R13,R1                  SET R13 TO POINT TO MY SAVEAREA.
         LR    R1,R14 RESTORE THE PARM FIELD ADDRESS.
         REGS
         AIF   (N'&BASE EQ 2).NOEJECT
         EJECT
.NOEJECT ANOP
         MEND
         MACRO
&NAME    EXIT  &REG,&PARA,&RC=0,&CORE=,&RENT=NO
         LCLA  &A
         LCLC  &B
         AIF   ('&NAME' EQ '').GO
&NAME    DS    0H
.GO      ANOP
         LR    R1,R13
         L     R13,4(R13) POINT R13 TO THE CALLING PROGRAMS
*                         SAVE AREA
         AIF   ('&RENT' EQ 'NO').NOTRENT
         AIF   ('&RENT' EQ 'YES').RENT
         MNOTE 8,'RENT MUST EQUAL ''YES'' OR ''NO''.'
.NOTRENT ANOP
         AIF   ('&CORE' EQ '').CONTBT
         MNOTE 8,'RENT=NO AND SPECIFYING CORE ARE MUTUALLY EXCLUSIVE.'
         AGO   .CONTBT
.RENT    ANOP
         MNOTE *,'REENTRANT SAVE AREA.'
         AIF   ('&CORE' NE '').ASKCORE
&B       SETC  '72'
         AGO   .FREEMN
.ASKCORE ANOP
&B       SETC  '&CORE'
.FREEMN  ANOP
*        FREEMAIN R,LV=CORE,A=(1) FREE THE CORE USED BY MY SAVEAREA
         FREEMAIN R,LV=&B,A=(1)
.CONTBT  ANOP
         AIF   ('&REG' EQ '').CONTA
         AIF   ('&RC' EQ '(15)').SPECRT
.COMBACK ANOP
&A       SETA  &REG(1)*4+20
         AIF   (&A LE 75).CONTB
&A       SETA  &A-64
.CONTB   AIF   (N'&REG NE 2).CONTC
         LM    &REG(1),&REG(2),&A.(13)           RESTORE THE REGISTERS
         AGO   .CONTA
.SPECRT  AIF   ('&REG(1)' NE '14' AND '&REG(1)' NE '15').COMBACK
         AIF   ('&REG(1)' EQ '14' AND N'&REG  EQ 1).COMBACK
         AIF   ('&REG(1)' EQ '15' AND N'&REG EQ 1).CONTA
         AIF   ('&REG(1)' EQ '14').SKIP
         AIF   ('&REG(2)' EQ '0').ZTWO
.LM      LM    0,&REG(2),20(13)                  RESTORE THE REGISTERS
         AGO   .CONTA
.ZTWO    L     0,20(13,0)                        RESTORE REGISTER ZERO
         AGO   .CONTA
.SKIP    L     14,12(13,0)                       RESTORE REGISTER 14
         AIF   ('&REG(2)' EQ '15').CONTA
         AIF   ('&REG(2)' EQ '0').ZTWO
         AGO   .LM
.CONTC   AIF   (N'&REG NE 1).ERROR1
         L     &REG(1),&A.(13,0)                 RESTORE REGISTER
.CONTA   AIF   ('&PARA' EQ '').CONTD
         AIF   ('&PARA' NE 'T').ERROR2
         MVI   12(13),X'FF'                      SET RETURN INDICATION
.CONTD   AIF   ('&RC' EQ 'O').CONTE
         AIF   ('&RC'(1,1) EQ '(').ISAREG
         LA    15,&RC.(0,0)                      LOAD RETURN CODE
         AGO   .CONTE
.ISAREG  AIF   ('&RC(1)' EQ '15').CONTE
         IHBERMAC 61,,&RC
         MEXIT
.CONTE   BR    14                                RETURN
         AGO   .END
.ERROR1  IHBERMAC 36,,&REG
         MEXIT
.ERROR2  IHBERMAC 37,,&PARA
.END     MEND
         MACRO
         REGS
         GBLA  &REGCNT
         LCLA  &NUM
&REGCNT  SETA  &REGCNT+1
         AIF   (&REGCNT GT 1).NOEXP
         SPACE 1             SKIP 1 LINES
*******************************************************
*                                                     *
*          EQUATE THE REGISTERS                       *
*                                                     *
*******************************************************
         SPACE 1             SKIP 1 LINE
&NUM     SETA  0
*        GENERAL REGISTERS
.LOOP    ANOP
R&NUM    EQU   &NUM
&NUM     SETA  &NUM+1
         AIF   (&NUM LT 16).LOOP
*        FLOATING POINT REGISTERS
&NUM     SETA  0
.LOOP2   ANOP
FP&NUM   EQU   &NUM
&NUM     SETA  &NUM+2
         AIF   (&NUM LT 8).LOOP2
         SPACE 3             SKIP 3 LINES
         MEXIT
.NOEXP   ANOP
         SPACE 1
*        REGISTERS ARE ALREADY EQUATED.
         SPACE 1
         MEND
         EJECT
VSAM     CSECT
         ENTER (14,12),BASE=11,RENT=NO
         WTO   MF=(E,MSG2)        WRITE STARTING MESSAGE.
         RDJFCB (SYSUT1,,SYSUT2)  GET JFCBS.
         LTR   R15,R15            TEST RETURN CODE.
         BZ    JFCBOK             BR IF OK.
         WTO   MF=(E,MSG3)        WRITE ERROR MESSAGE.
         B     X                  EXIT.
JFCBOK   DS    0H
         OI    JFCB1+52,X'08'     DON'T REWRITE JFCB.
         OI    JFCB2+52,X'08'     DON'T REWRITE JFCB.
         MVC   JFCB1(44),DSNAME   SET UP DSNAME.
         MVC   JFCB2(44),DSNAME   SET UP DSNAME.
         OPEN  (SYSUT1,(INPUT),SYSUT2,(UPDAT)),TYPE=J OPEN.
         TM    SYSUT1+48,X'10'    TEST OPEN.
         BO    OPEN1              BR IF OPEN OK.
         WTO   MF=(E,MSG4)        WRITE ERROR MESSAGE.
         B     X
OPEN1    DS    0H
         TM    SYSUT2+48,X'10'    TEST OPEN.
         BO    OPEN2              BR IF OPEN OK.
         WTO   MF=(E,MSG5)        WRITE ERROR MESSAGE.
         B     X                  EXIT.
OPEN2    DS    0H
         L     R1,SYSUT2+44       GET DEB ADDRESS.
         L     R2,32(0,R1)        GET UCB ADDRESS.
         L     R5,SYSUT1+44       ADDRESS OF DEB.
         MVC   CCHHR(4),X'26'(R5) GET STARTING CCHH.
         MVI   R,X'01'            SET FOR RECORD 1.
         LA    R0,READCCW         GET READ CCW.
         ST    R0,IOB1CCW         SET UP READ OF SYSUT1.
         LA    R1,IOB1            GET IOB FOR SYSUT1.
         BAL   R14,IODISK         READ 1ST RECORD.
         LTR   R15,R15            TEST RETURN CODE.
         BNZ   X                  EXIT.
         XC    VSAMCNT,VSAMCNT    CLEAR VSAM COUNTER.
         MVC   TRKCYL(2),DSCB+64  GET TRACKS/CYLINDER.
         XR    R15,R15            CLEAR FOR IC INSTRUCTION.
         IC    R15,DSCB+74        GET # DSCB'S/TRK.
         STH   R15,DSCBTRK        SAVE FOR LATER.
         LH    R3,X'2A'(0,R5)     GET END OF EXTENT CC.
         LH    R4,TRKCYL          GET NUMBER TRACKS/CYLINDER.
         MR    R2,R4
         AH    R3,X'2C'(0,R5)     ADD ENDING TRACK.
         LH    R7,X'26'(0,R5)     GET START OF EXTENT CC.
         MR    R6,R4
         AH    R7,X'28'(0,R5)     ADD START OF EXTENT TRACK.
         SR    R3,R7              GET TOTAL TRACKS - 1.
         A     R3,KBF1            GET TOTAL TRACKS.
         MR    R14,R3             COMPUTE TOTAL NUMBER OF DSCB'S.
         STH   R15,TOTDSCB        SAVE FOR LATER.
         L     R3,MAXVSAM         GET TOTAL NUMBER OF ENTRIES.
         LA    R1,SVSAMLN         GET LENGTH OF EACH ENTRY.
         MR    R2,R1
         ST    R3,VSAMLISL        SAVE LENGTH.
         GETMAIN R,LV=(3)         GET CORE FOR VSAM DSN LIST.
         ST    R1,VSAMLIST        SAVE ADDRESS OF LIST.
         MVC   DSCBCNT,TOTDSCB    SET DSCB LOOP COUNTER.
         LH    R15,DSCBTRK        GET NUM DSCB PER TRACK.
         STC   R15,R              SET UP HIGH RECORD NUMBER.
FIRSTLP  DS    0H
         LA    R1,IOB1            GET SYSUT1 IOB.
         BAL   R14,IODISK         READ DSCB.
         LTR   R15,R15            TEST RETURN CODE.
         BNZ   X                  EXIT.
         BAL   R14,VSAMCK         CHECK FOR VSAM.
         LTR   R15,R15            TEST RETURN CODE.
         BNZ   X                  EXIT.
         BAL   R14,CNR            COMPUTE THE NEXT RECORD.
         LTR   R15,R15            TEST RETURN CODE.
         BZ    FIRSTLP            BR IF HAVE MORE DATA.
         OC    VSAMCNT,VSAMCNT    TEST FOR NO VSAM DSN.
         BNZ   HAVEVS             BR IF HAVE VSAM.
         WTO   MF=(E,MSG6)        WRITE MESSAGE.
         B     RETURN             BR TO EXIT.
HAVEVS   DS    0H
         L     R5,SYSUT2+44       ADDRESS OF DEB.
         MVC   CCHHR(4),X'26'(R5) GET STARTING CCHH.
         MVI   R,X'01'            SET UP FOR RECORD 1.
         LA    R0,READCCW         GET READ CCW.
         ST    R0,IOB2CCW         SET UP FOR READ.
         LA    R1,IOB2            GET IOB ADDRESS OF SYSUT2.
         BAL   R14,IODISK         READ 1ST  RECORD.
         LTR   R15,R15            TEST RETURN CODE.
         BNZ   X                  EXIT.
         MVC   TRKCYL(2),DSCB+64  GET TRACKS/CYLINDER.
         XR    R15,R15            CLEAR FOR IC INSTRUCTION.
         IC    R15,DSCB+74        GET # DSCB'S/TRACK.
         STH   R15,DSCBTRK        SAVE FOR LATER.
         LH    R3,X'2A'(0,R5)     GET END OF EXTENT CC.
         LH    R4,TRKCYL          GET NUMBER OF TRKS/CYLINDER.
         MR    R2,R4
         AH    R3,X'2C'(0,R5)     ADD END OF EXTENT END TRK.
         LH    R7,X'26'(0,R5)     GET START OF EXTENT CC.
         MR    R6,R4
         AH    R7,X'28'(0,R5)     ADD START OF EXTENT TRACK.
         SR    R3,R7              GET TOTAL TRACKS - 1.
         A     R3,KBF1            GET TOTAL TRACK.
         MR    R14,R3
         STH   R15,TOTDSCB        SAVE FOR LATER.
         LA    R1,TVSAMLN         GET LENGTH OF EACH ENTRY.
         MR    R14,R1             COMPUTE GETMAIN LENGTH.
         ST    R15,TDSCBLN        SAVE LENGTH.
         GETMAIN R,LV=(15)        GET CORE FOR LIST.
         ST    R1,TDSCBLST        SAVE ADDRESS OF LIST.
         MVC   DSCBCNT,TOTDSCB    SET DSCB COUNTER.
         LH    R15,DSCBTRK        GET NUM DSCB PER TRACK.
         STC   R15,R              SET R TO HIGHEST RECORD.
         LR    R9,R1              SET TARGET LIST.
         USING TVSAM,R9           SET UP ADDRESSING.
SECREAD  DS    0H
         LA    R1,IOB2            GET IOB.
         BAL   R14,IODISK         READ DSCB.
         LTR   R15,R15            TEST RETURN CODE.
         BNZ   X                  EXIT.
         MVC   TVSAMDSN,DSCB      GET DATA SET NAME.
         MVC   TVSAMTP,DSCB+44    GET DSCB TYPE.
*                                                                     *
*        TEST FOR VSAM DSN.                                           *
*                                                                     *
         MVC   TVSAMCCH,CCHHR     SAVE CCHHR OF DSCB.
         MVC   TVSAMPT,DSCB+135   GET POINTER.
         LA    R9,TVSAMLN(0,R9)   POINT TO NEXT ENTRY.
         BAL   R14,CNR            COMPUTE NEXT RECORD.
         LTR   R15,R15            TEST RETURN CODE.
         BZ    SECREAD            BR IF MORE DATA.
         DROP  R9
         L     R8,VSAMLIST        SET UP VSAM LIST.
         L     R7,VSAMCNT         GET NUMBER OF VSAM DSN.
SWITCHLP DS    0H
         BAL   R12,SWITCH         SWITCH DSCB.
         LTR   R15,R15            TEST RETURN CODE.
         BNZ   X                  EXIT.
         LA    R8,SVSAMLN(0,R8)   POINT TO NEXT SOURCE ENTRY.
         BCT   R7,SWITCHLP        BR IF MORE DATA.
RETURN   DS    0H
         L     R2,VSAMLISL        GET LENGTH OF VSAM SOURCE LIST.
         LTR   R2,R2              TEST LENGTH.
         BZ    NOFREE1            BR IF NO CORE.
         L     R1,VSAMLIST        GET ADDRESS.
         FREEMAIN R,LV=(2),A=(1)
NOFREE1  DS    0H
         L     R2,TDSCBLN         GET DSCB TABLE LENGTH.
         LTR   R2,R2              TEST LENGTH.
         BZ    NOFREE2            BR IF NO CORE.
         L    R1,TDSCBLST         GET ADDRESS OF CORE.
         FREEMAIN R,LV=(2),A=(1)
NOFREE2  DS    0H
         TM    SYSUT1+48,X'10'    TEST OPEN.
         BNO   NOTOPEN1           BR IF NOT OPEN.
         CLOSE (SYSUT1)           CLOSE THE FILE.
NOTOPEN1 DS    0H
         TM    SYSUT2+48,X'10'    TEST OPEN.
         BNO   NOTOPEN2           BR IF NOT OPEN.
         CLOSE (SYSUT2)           CLOSE THE FILE.
NOTOPEN2 DS    0H
         LA    R1,MSG7            GET ENDING ADDRESS.
         CLI   RUN,X'00'          TEST RUN FLAG.
         BE    ALLOK              BR IF ALL VSAM REPOSITIONED.
         LA    R1,MSGH            GET ALTERNATE ENDING ADDRESS.
ALLOK    DS    0H
         WTO   MF=(E,(R1))        WRITE ENDING MESSAGE.
         EXIT (14,12),T,RENT=NO
X        DS    0H
         WTO   MF=(E,MSG8)        WRITE BAD MESSAGE.
         DC    XL2'0000'          ABEND.
         EJECT
*                                                                     *
*        COMPUTE NEXT RECORD.                                         *
*                                                                     *
*        R0,R1 SCRATCH.                                               *
*        R14   RETURN ADDRESS.                                        *
*        R15   RETURN CODE. 0=OK, 4=EOF.                              *
*                                                                     *
CNR      DS    0H
         XR    R1,R1              CLEAR FOR IC INSTRUCTION.
         IC    R1,R               GET RECORD NUMBER.
         BCT   R1,RECOK           BR IF ON THIS TRACK.
         LH    R1,DSCBTRK         GET NUMBER OF DSCB/TRK.
         LH    R0,HH              GET HEAD NUMBER.
         A     R0,KBF1            ADD 1 TO HEAD.
         STH   R0,HH              SAVE HEAD NUMBER.
         CH    R0,TRKCYL          GONE OVER CYLINDER.
         BL    RECOK              BR IF ON THIS CYLINDER.
         XC    HH,HH              SET HEAD TO ZERO.
         LH    R0,CC              GET CYLINDER NUMBER.
         A     R0,KBF1            ADD 1.
         STH   R0,CC              SAVE CYLINDER NUMBER.
RECOK    DS    0H
         STC   R1,R               SAVE RECORD NUMBER.
         LH    R1,DSCBCNT         GET DSCB COUNTER.
         XR    R15,R15            CLEAR RETURN CODE.
         BCT   R1,MORE            BR IF MORE DATA.
         LA    R15,4              SET END OF DATA RETURN CODE.
MORE     DS    0H
         STH   R1,DSCBCNT         SAVE DSCB COUNTER.
         BR    R14                RETURN TO THE CALLER.
         EJECT
*                                                                     *
*        SWITCH FMT-1.                                                *
*                                                                     *
SWITCH   DS    0H
         XC    PNTA,PNTA          CLEAR POINTER A.
         XC    RPA,RPA            CLEAR REPLACEMENT A.
         LH    R1,TOTDSCB          GET NUM DSCB'S.
         L     R15,TDSCBLST       GET TARGET DSCB TOTAL.
SWLP1    DS    0H
         USING SVSAM,R8           SET UP ADDRESSING.
         USING TVSAM,R15          SET UP ADDRESSING.
         CLC   SVSAMCCH,TVSAMCCH  EQUAL CCHHR. AS S VSAM.
         BE    HAVEVCC            YES.
         LA    R15,TVSAMLN(0,R15) POINT TO NEXT ENTRY.
         BCT   R1,SWLP1           BR IF MORE ENTRIES.
         MVC   MSGA+14(44),SVSAMDSN    GET DSN.
         MVI   RUN,X'FF'          SET ERROR FLAG.
         LA    R1,MSGA            SET UP MSG ADDR.
         B     XS                 EXIT OK.
HAVEVCC  DS    0H
         ST    R15,VSAMA          SAVE ADDR.
         LH    R1,TOTDSCB         GET TOTAL NUMBER OF DSCBS.
         L     R15,TDSCBLST      GET LIST TARGET DSCBS.
SWLP2    DS    0H
         CLC   TVSAMDSN,SVSAMDSN  DSN'S EQUAL.
         BE    SAMEDSN            BR IF SO.
         LA    R15,TVSAMLN(0,R15) POINT TO NEXT ENTRY.
         BCT   R1,SWLP2           BR IF MORE ENTRIES IN THE LIST.
         MVC   MSGB+14(44),SVSAMDSN MOVE IN DSN.
         MVI   RUN,X'FF'          SET ERROR FLAG.
         LA    R1,MSGB            GET ADDRESS OF MSG.
         B     XS                 ERROR OK.
SAMEDSN  DS    0H
         ST    R15,RPA            SAVE ADDRESS.
         CLC   SVSAMCCH,TVSAMCCH  TEST CCHHR.
         BNE   NOTSAME            BR IF NOT THE SAME.
         MVC   MSGC+14(44),SVSAMDSN   MOVE IN DSN.
         LA    R1,MSGC            SET WTO.
         B     XS                 EXIT.
NOTSAME  DS    0H
NOTVX    DS    0H
         CLI   TVSAMTP,X'F1'      TEST TYPE.
         BE    TYPE1              BR IF TYPE 1.
         CLI   TVSAMTP,X'00'      TEST FOR TYPE 0.
         BE    TYPE1              BR IF TYPE 0.
         LA    R14,TVSAMCCH        SAVE ADDRESS OF T CCHHR.
         LH    R1,TOTDSCB         GET TOTAL DSCB.
         L     R15,TDSCBLST       GET START OF LIST.
SWLP3    DS    0H
         CLC   0(5,R14),TVSAMPT   TEST POINT = CCHHR.
         BE    THISONE            BR IF THIS ONE.
         LA    R15,TVSAMLN(0,R15) POINT TO NEXT ENRY.
         BCT   R1,SWLP3           BR IF MORE DATA IN LIST.
         MVC   MSGD+14(44),SVSAMDSN MOVE IN DSN.
         MVI   RUN,X'FF'          SET ERROR FLAG.
         WTO   MF=(E,MSGD)
         WTO   MF=(E,MSGE)        WRITE ERROR MESSAGE.
         B     BADSW              ERROR.
THISONE  DS    0H
         ST    R15,PNTA           SAVE ADDRESS.
TYPE1    DS    0H
         LA    R14,READCCW        GET READ CCW.
         ST    R14,IOB2CCW        STORE IN IOB.
         MVC   CCHHR(5),SVSAMCCH  SET UP TO READ REPLACED DSCB.
         LA    R1,IOB2            GET IOB ADDRESS.
         BAL   R14,IODISK         READ.
         LTR   R15,R15            TEST RETURN CODE.
         BNZ   BADSW              BR IF ERROR.
         MVC   DSCBB,DSCB         SAVE DSCB.
         L     R15,RPA            GET CURRENT VSAM LOCATION.
         MVC   CCHHR(5),TVSAMCCH  SET UP CCHHR.
         LA    R1,IOB2            GET IOB ADDRESS.
         BAL   R14,IODISK         READ.
         LTR   R15,R15            TEST RETURN CODE.
         BNZ   BADSW              ERROR.
         MVC   DSCBA,DSCB         SAVE DSCB.
         L     R15,PNTA           GET POINTER ADDRESS.
         LTR   R15,R15            TEST FOR ADDRESS.
         BZ    NOPOINT            BR IF NO POINTER.
         MVC   CCHHR(5),TVSAMCCH  GET CCHHR OF DSCB.
         LA    R1,IOB2            GET IOB ADDRESS.
         BAL   R14,IODISK         READ DSCB.
         LTR   R15,R15            TEST RETURN CODE.
         BNZ   BADSW              BR IF ERROR.
         L     R15,RPA            GET REPLACE DSCB ADDR.
         MVC   DSCB+135(5),TVSAMCCH SET POINTER CCHHR.
         LA    R1,WRITECCW        GET ADDR OF WRITE CCW.
         ST    R1,IOB2CCW         SET IOB.
         LA    R1,IOB2            GET IOB ADDRESS.
         BAL   R14,IODISK         WRITE DSCB.
         LTR   R15,R15            TEST RETURN CODE.
         BNZ   BADSW              ERROR.
NOPOINT  DS    0H
         LA    R1,WRITECCW         GET READ CCW.
         ST    R1,IOB2CCW         SET IOB.
         MVC   DSCB,DSCBB         GET REPLACED DSCB.
         L     R15,RPA            GET RPA ADDRESS.
         MVC   CCHHR(5),TVSAMCCH  SET CCHHR.
         LA    R1,IOB2            GET IOB ADDRESS.
         BAL   R14,IODISK         WRITE DSCB.
         LTR   R15,R15            TEST RETURN CODE.
         BNZ   BADSW              ERROR.
         MVC   DSCB,DSCBA         GET VSAM DSCB.
         MVC   CCHHR(5),SVSAMCCH  GET VSAM CCHHR.
         LA    R1,IOB2            GET IOB ADDRESS.
         BAL   R14,IODISK         WRITE DSCB.
         LTR   R15,R15            TEST RETURN CODE.
         BNZ   BADSW              BR IF ERROR.
         MVC   MSGF+14(44),SVSAMDSN MOVE IN DSN.
         LA    R1,MSGF
         L     R15,RPA                  GET REPLACE ADDRESS.
         L     R14,VSAMA
         MVC   XXXX(45),0(R15)
         MVC   XXXX+45(5),50(R15)
         MVC   0(045,R15),0(R14)  SAVE
         MVC   50(5,R15),50(R14)
         MVC   0(045,R14),XXXX    SAVE
         MVC   50(5,R14),XXXX+45
XS       DS    0H
         WTO   MF=(E,(R1))
         XR    R15,R15            CLEAR RETURN CODE.
         B     RETS
BADSW    DS    0H
         LA    R15,4              SET ERROR CODE.
RETS     DS    0H
         BR    R12                RETURN TO THE CALLER
         DROP R8
         DROP R15
         EJECT
*                                                                     *
*        VSAMCK SECTION.                                              *
*                                                                     *
*        R14   RETURN ADDRESS                                         *
*        R15   RETURN CODE 0=OK,4=NO MORE ROOM.                       *
*                                                                     *
VSAMCK   DS    0H
         TM    DSCB+83,X'08'      TEST FOR VSAM.
         BZ    VSAMCKOK           BR IF NOT VSAM.
THISVSAM DS    0H
         L     R1,VSAMCNT         GET VSAM COUNTER.
         LR    R0,R1              SAVE COUNT.
         A     R0,KBF1            ADD 1 TO COUNT.
         ST    R0,VSAMCNT         SAVE.
         C     R0,MAXVSAM         TEST AGAINST MAXIMUM.
         BNH   ENOUGH             BR IF ENOUGH ROOM.
         WTO   MF=(E,MSG9)        WRITE ERROR MESSAGE.
         LA    R15,4              SET ERROR RETURN CODE.
         B     XVSAM              EXIT VSAM.
ENOUGH   DS    0H
         LA    R15,SVSAMLN        GET LENGTH OF 1 ENTRY.
         MR    R0,R15             COMPUTE ENTRY OFFSET.
         L     R15,VSAMLIST       GET STARTING ADDRESS.
         LA    R15,0(R1,R15)      COMPUTE ADDR OF ENTRY.
         USING SVSAM,R15          SET UP ADDRESSING.
         MVC   SVSAMDSN,DSCB      GET DSN.
         MVC   SVSAMCCH,CCHHR     SAVE CCHHR.
         DROP  R15
VSAMCKOK DS    0H
         XR    R15,R15            SET ZERO RETURN CODE.
XVSAM    DS    0H
         BR    R14                RETURN TO CALLER.
         EJECT
*                                                                     *
*        IODISK                                                       *
*        R1    CONTAINS THE IOB ADDRESS.                              *
*        R14   RETURN ADDRESS.                                        *
*        R15   RETURN CODE, 0= I/O OK, 4= ERROR.                      *
IODISK   DS    0H
         ST    R14,SAVER14        SAVE RETURN ADDRESS.
         MVC   35(5,R1),CCHHR     SET CCHHR.
         XC    ECB,ECB            CLEAR ECB FOR I/O.
*        EXCP  (R1)               SIMULATE EXCP.
         SVC   0                  ISSUE I/O.
         WAIT  1,ECB=ECB          WAIT FOR COMPLETION.
         XR    R15,R15            CLEAR RETURN CODE.
         CLI   ECB,X'7F'          TEST I/O.
         BE    IODISKR            BR IF OK.
         WTO   MF=(E,MSG1)        I/O ERROR MESSAGE.
         LA    R15,4              SET ERROR RETURN CODE.
IODISKR  DS    0H
         L     R14,SAVER14        GET RETURN ADDRESS.
         BR    R14                RETURN TO CALLER.
         TITLE 'H A L F    W O R D    D A T A    A R E A S.'
*                                                                     *
*        MESSAGES.                                                    *
*                                                                     *
MSG1     WTO   'COPYDISK  I/O ERROR IN VSAM CHECK.',MF=L,              X
               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSG2     WTO   'COPYDISK  VSAM CHECK STARTING.',MF=L,                  X
               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSG3     WTO   'COPYDISK  ERROR IN READING JFCB''S.',MF=L,             X
               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSG4     WTO   'COPYDISK  ERROR IN OPEN FOR SYSUT1.',MF=L,             X
               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSG5     WTO   'COPYDISK  ERROR IN OPEN FOR SYSUT2.',MF=L,             X
               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSG6     WTO   'COPYDISK  NO VSAM DATA SETS FOUND ON SYSUT1',          X
               MF=L,ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSG7     WTO   'COPYDISK  VSAM CHECK FININSHED NORMALLY.',MF=L,        X
               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSG8     WTO   'COPYDISK  VSAM CHECK ENDED ABNORMALLY.',MF=L,          X
               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSG9     WTO   'COPYDISK  VSAM CHECK HAS MORE THAN 100 VSAM DATA SETS',X
               MF=L,ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSGA     WTO   'COPYDISK  12345678901234567890123456789012345678901234 X
               NOT REPOSITIONED, VTOC WAS MOVED.',MF=L,                X
               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSGB     WTO   'COPYDISK  12345678901234567890123456789012345678901234 X
               NOT REPOSITIONED, NOT FOUND ON TARGET PACK.',MF=L,      X
               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSGC     WTO   'COPYDISK  12345678901234567890123456789012345678901234 X
               WAS ALREADY IN THE CORRECT POSITION IN THE VTOC.',MF=L, X
               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSGD     WTO   'COPYDISK  12345678901234567890123456789012345678901234 X
               NOT REPOSITIONED, ERROR IN VTOC.',MF=L,                 X
               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSGE     WTO   'COPYDISK  ERROR ON TARGET PACK AT CCHHR FOR VSAM DSN.' X
               MF=L,ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSGF     WTO   'COPYDISK  12345678901234567890123456789012345678901234 X
               SUCESSFULLY REPOSITIONED.',MF=L,                        X
               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
MSGH     WTO   'COPYDISK  NOT ALL VSAM DATA WERE REPOSITIONED, CHECK THX
               E LISTING.',MF=L,                                       X
               ROUTCDE=(1,2,3,4,5,6,7,8,9,10,11)
TOTDSCB  DC    H'0'               TOTAL NUMBER OF DSCB'S IN VTOC.
DSCBTRK  DC    H'0'               NUMBER OF DSCB'S PER TRACK.
DSCBCNT  DC    H'0'               DSCB LOOP COUNTER.
TRKCYL   DC    H'0'               NUMBER OF TRACKS PER CYLINDER.
SECTOR   DC    H'0'               ONLY FIRST BYTE USED.
         TITLE 'F U L L     W O R D     D A T A     A R E A S.'
CCHHR    DS    0F
CC       DC    XL2'0000'          CYLINDER ADDRESS.
HH       DC    XL2'0000'          HEAD ADDRESS.
R        DC    XL1'00'            RECORD NUMBER.
RUN      DC    XL1'00'            ^=0 NOT ALL REPOSTIONED.
ECB      DC    F'0'               EVENT CONTROL BLOCK.
SAVER14  DC    F'0'               SAVE AREA FOR REGISTER 14.
KBF1     DC    F'1'               CONSTANT 1.
         DS    0F
LIST1    DC    XL1'87',AL3(JFCB1)
LIST2    DC    XL1'87',AL3(JFCB2)
*                                                                     *
DSCB     DC    XL140'00'          I/O DSCB.
*                                                                     *
DSCBA    DC    XL140'00'          HOLDS VSAM DSCB.
*                                                                     *
DSCBB    DC    XL140'00'          HOLDS REPLACED DSCB.
*                                                                     *
JFCB1    DC    44F'0'             JFCB FOR SYSUT1.
JFCB2    DC    44F'0'             JFCB FOR SYSUT2.
VSAMCNT  DC    F'0'               VSAM DSN COUNTER.
MAXVSAM  DC    F'100'             MAX VSAM DSN, USED FOR GETMAIN.
VSAMLIST DC    AL4(0)             ADDRESS OF VSAM DSN LIST.
VSAMLISL DC    F'0'               LENGTH OF VSAM DSN LIST.
TDSCBLST DC    AL4(0)             ADDRESS OF DSCB LIST.
TDSCBLN  DC    F'0'               LENGTH OF DSCB LIST.
DSNAME   DC    44XL1'04'          VTOC DSNAME.
PNTA     DC    AL4(0)             POINTER ADDRESS.
RPA      DC    AL4(0)             REPLACED ADDRESS.
VSAMA    DC    AL4(0)             VSAM ADDR.
         EJECT
SYSUT1   DCB   DDNAME=SYSUT1,IOBAD=IOB1,MACRF=(E),EXLST=LIST1
         EJECT
SYSUT2   DCB   DDNAME=SYSUT2,IOBAD=IOB2,MACRF=(E),EXLST=LIST2
         TITLE 'D O U B L E     W O R D     D A T A     A R E A S.'
*                                                                     *
*        READ CCW'S.                                                  *
*                                                                     *
READCCW  CCW   X'31',CC,X'40',X'0005' SEARCH FOR ID EQUAL.
         CCW   X'08',READCCW,X'00',X'0000' TIC TO SEARCH.
         CCW   X'0E',DSCB,X'00',X'008C'  READ KEY AND DATA.
*                                                                     *
*        WRITE CCW'S.                   *
*                                                                     *
WRITECCW CCW   X'31',CC,X'40',X'0005' SEARCH FOR ID EQUAL.
         CCW   X'08',WRITECCW,X'00',X'0000' TIC TO SEARCH.
         CCW   X'0D',DSCB,X'00',X'008C' WRITE DSCB.
*                                                                     *
*        IOB FOR SYSUT1.                                              *
*                                                                     *
IOB1     DC    5D'0'
         ORG   IOB1
         DC    XL2'4200'
         ORG   IOB1+5
         DC    AL3(ECB)
         ORG   IOB1+16
IOB1CCW  DC    AL4(0)             STARTING CCW.
         ORG   IOB1+21
         DC    AL3(SYSUT1)
         ORG
*                                                                     *
*        SYSUT2 IOB.                                                  *
*                                                                     *
IOB2     DC    5D'0'
         ORG   IOB2
         DC    XL2'4200'
         ORG   IOB2+5
         DC    AL3(ECB)           ECB POINTER.
         ORG   IOB2+16
IOB2CCW  DC    AL4(0)             STARTING CCW.
         ORG   IOB2+21
         DC    AL3(SYSUT2)
         ORG
XXXX     DC    CL55' '
         TITLE 'D S E C T S.'
SVSAM    DSECT
SVSAMDSN DS    CL44               SOURCE VSAME DSN.
SVSAMCCH DS    XL5                CCHHR OF SOURCE FMT-1 DSCB.
SVSAMLN  EQU   *-SVSAM            LENGTH OF 1 ENTRY.
         SPACE 5
TVSAM    DSECT
TVSAMDSN DS    CL44               TARGET DATA SET NAME.
TVSAMTP  DS    CL1                TYPE OF DSCB.
TVSAMCCH DS    XL5                CCHHR OF TARGET FMT-1 DSCB.
TVSAMPT  DS    XL5                CCHHR OF TARGET FMT-1 POINTER.
TVSAMLN  EQU   *-TVSAM            LENGTH OF 1 ENTRY.
         END   VSAM
