VSAM     TITLE  'VSAMCAT - VSAM CATALOG CLUSTER PUNCH'      *HMD 04/81*
         MACRO
         BEGIN &NAME=' ',&BASE=YES,&SAVE=NO,&R1=14,&R2=12,             *
               &BASEREG=,&USING=YES,&TIME=,&CHAIN=NO,&SAVLEN=72
         LCLC  &WORK
         AIF   ('&NAME' NE ' ').INNAME
         MNOTE 12,'*** PARM NAME=???????? OMITTED ***'
         MEXIT
.INNAME  ANOP
         AIF   ('&TIME' EQ 'ONLY').NAME
DATESTMP CSECT
         DC    CL8'&NAME'
&WORK    SETC  '&SYSTIME'(1,2).'&SYSTIME'(4,2)
         DC    CL4'&WORK'              TIME OF ASSEMBLY
&WORK    SETC  '&SYSDATE'(1,2).'&SYSDATE'(4,2).'&SYSDATE'(7,2)
         DC    CL6'&WORK'              DATE OF ASSEMBLY
&NAME    CSECT
         ENTRY &NAME
         AIF   ('&SAVE' EQ 'NO').NOSAVE
         SAVE  (&R1,&R2)
.NOSAVE  ANOP
         AIF   ('&BASE' EQ 'USING').USING
         AIF ('&BASE' EQ 'NO').NOBASE
         BALR  BASEREG,0
.USING   ANOP
$NTRY    DS    0H
         USING *,BASEREG
.NOBASE  ANOP
         AIF   ('&CHAIN' EQ 'NO').NOCHAIN
         GETMAIN R,LV=&SAVLEN
         LR    15,1
         LR    11,13
         ST    13,4(15)            STANDARD
         ST    15,8(13)               REGISTER
         LR    13,15                        CONVENTIONS
         LM    0,1,20(11)                LINKAGE
.NOCHAIN ANOP
         AIF   ('&BASEREG' EQ '').NAME
BASEREG  EQU   &BASEREG                BASE REGISTER EQUATE
.NAME    ANOP
.END     MEND
         TITLE  'VSAMCAT - VSAM CATALOG CLUSTER PUNCH'      *HMD 04/81*
VSAMCAT  CSECT                                              *HMD 04/81*
***********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
BASEREG  EQU   R12
         EJECT
***********************************************************************
UCATSETS DSECT
         DS    X             NO OF SETS-OF-FIELDS
         DS    X                       RESERVED
USETDISP DS    XL2                     DISPLACEMENT FROM THE BEGINNING
*                                      OF ALL SETS
USETYPE  DS    X                       BIT1 = DELETED
*                                      BITS 2-7 = TYPE CODE
USETSEQ  DS    X                       SET TYPE SEQUENCE NUMBER
***********************************************************************
         EJECT
***********************************************************************
VOLIDSET DSECT
         DS    XL2
         DS    XL3
VOLDTYP  DS    X                       DEVICE TYPE CODE (A,B OR D)
VOLSER   DS    CL6                     VOLUME SERIAL NUMBER
         DS    XL22
VOLTRKCA DS    XL2                     NO OF TRACKS PER CONTROL INTERVL
         DS    XL3
VOLLKEY  DS    XL2                     LOW KEY LENGTH
VOLHKEY  DS    XL2                     HIGH KEY LENGTH
         EJECT
ASSOCSET DSECT                         ASSOCIATIVE SET OF FIELDS
         DS    XL2
ASSOCTYP DS    X                       TYPE OF FIELD D, I, OR G
ASSOCNAM DS    XL3                     CONTROL INTERVAL NUMBER
         EJECT
DSBDSECT DSECT                         ACCESS METHOD DATA STAT BLOCK
         DS    XL6
AMDRKP   DS    H                       RELATIVE KEY POSITION
AMDKEYLN DS    H                       KEY LENGTH
AMDPCTCA DS    X                       CONTROL AREA FREE SPACE
AMDPCTCI DS    X                       CONTROL INTERVAL FREE BYTES
AMDCIPCA DS    XL2                     NO OF CI PER CA
         DS    XL6
AMDCINV  DS    XL4                     CONTROL INTERVAL SIZE
AMDLRECL DS    XL4                     MAXIMUM RECORD SIZE
         DS    XL30
AMDNEXT  DS    XL2                     NO OF EXTENTS IN THE DATA SET
AMDNLR   DS    XL4                     USER SUPPLIED DATA RECORDS
         EJECT
IEFJFCBN DSECT
         IEFJFCBN LIST=YES
         EJECT
         BEGIN NAME=VSAMCAT,SAVE=YES,CHAIN=YES
         L     R4,0(R1)                LOAD PARM ADDRESS
         LH    R5,0(R4)                LOAD PARM LENGTH
         N     R5,=F'65535'            CLEAR HI ORDER
         BZ    AROUND                  NO PARM SPECIFIED
         CH    R5,=H'8'                LENGTH GT 8?         *HMD 04/81*
         BH    AROUND                  YES, IGNORE          *HMD 04/81*
         NI    PASSWORD,0              CLEAR LENGTH         *HMD 04/81*
         MVI   PASSWORD+1,C' '         CLEAR                *HMD 04/81*
         MVC   PASSWORD+2(7),PASSWORD      PASSWORD FIELD   *HMD 04/81*
         STC   R5,PASSWORD             SAVE LENGTH          *HMD 04/81*
         BCTR  R5,0                    GET READY FOR EX     *HMD 04/81*
A        MVC   PASSWORD+1(0),2(R4)     MOVE IN PASSWORD     *HMD 04/81*
         EX    R5,A                    DO IT                *HMD 04/81*
AROUND   LR    R10,R12                 LOAD SECOND BASE REGISTER
         AH    R10,=H'4096'            INCREMENT BASE REG BY 1K
         USING $NTRY+4096,R10          DECLARE SECOND BASE REGISTER
         LR    R9,R10                  LOAD THIRD BASE REGISTER
         AH    R9,=H'4096'             INCREMENT BASE REG BY 1K
         USING $NTRY+8192,R9           DECLARE THIRD BASE REGISTER
         BAL   R14,PRTDSCB             PRINT VOLUME TABLE OF CONTENTS
         L     R13,4(R13)              RESTORE SYSTEM SAVE AREA ADDR
         RETURN (14,12),T,RC=0         RETURN TO SYSTEM
         LTORG
         EJECT
***********************************************************************
* MODIFY JFCB TO READ THE VTOC DATA SET AND PRINT ALL FORMAT 1 DSCB'S *
***********************************************************************
PRTDSCBE DC    F'0'                    SAVE AREA FOR RETURN POINTER
PRTDSCB  DS    0H
         ST    R14,PRTDSCBE            SAVE RETURN POINTER
         OPEN  (JCLPUNCH,(OUTPUT),SYSPUNCH,(OUTPUT))
        RDJFCB (VTOC,(INPUT))          READ JOB FILE CONTROL BLOCK
         LTR   R15,R15                 READ SUCCESSFUL
         BZ    OPENVTOC                YES, BRANCH
         LA    R1,*                    GET ADDR FOR ABEND
         ABEND (R1),DUMP
OPENVTOC DS    0H
         LA    R1,VTOCJFCB             LOAD JOB FILE CONTROL BLOCK PTR
         USING JFCBDSNM,R1             DECLARE BASE FOR JFCB
         MVC   JCLVOLID,JFCBVOLS       SAVE VOL SER
         L     R15,=A(GETVSAM)         LOAD VSAM ROUTINE ADDRESS
         BALR  R14,R15                 PROCESS VSAM DATA SETS
         CLOSE JCLPUNCH
         CLOSE SYSPUNCH                CLOSE CARD PUNCH DATA SET
         L     R14,PRTDSCBE            LOAD RETURN POINTER
         BR    R14                     RETURN
***********************************************************************
         EJECT
GETSPACE DS    0H
         CLI   0(R1),C' '              IS BYTE BLANK ?
         BZR   R14                     YES, BRANCH
         LA    R1,1(R1)                LOAD NEXT BYTE ADDRESS
         B     GETSPACE                GO CHECK BYTE
         EJECT
***********************************************************************
SYSPUNCH DCB   DDNAME=CATSTAT,RECFM=FB,MACRF=(PM),DSORG=PS
         EJECT                                              *HMD 04/81*
PUNCHBUF DC    CL133' '                SYSPUNCH DATA SET BUFFER
         ORG   PUNCHBUF
PCHDSN   DS    CL44                    DATA SET NAME
         DS    C
PCHVOLID DS    CL6                     VOLUME SERIAL NUMBER
         DS    C
PCHTRK   DS    CL5                     TOTAL ALLOCATION OF DATA SET
         DS    C
PCHLOWCC DS    CL3                     LOW CYLINDER ADDRESS
PCHLOWTT DS    CL2                     LOW TRACK
         DS    C
PCHRELAD DS    CL5                     BEGINNING RELATIVE TRACK ADDRESS
         DS    C
PCHUSED  DS    CL5                     TOTAL TRACKS USED
         DS    C
PCHEXTNO DS    CL3                     NUMBER OF EXTENTS
         DS    C
PCHBLKSZ DS    CL5                     BLOCK SIZE
         DS    C
PCHLRECL DS    CL5                     RECORD LENGTH
         DS    C
PCHDSORG DS    CL2
         DS    C
PCHRECF1 DS    C                       RECORD FORMAT CODES
PCHRECF2 DS    C                       RECORD FORMAT CODES
PCHRECF3 DS    C                       RECORD FORMAT CODES
         DS    C
PCHDIR   DS    CL4                     NO OF DIRECTORY BLOCKS
         DS    C
PCHDIRUS DS    CL4                     NO OF DIRECTORY BLOCKS USED
         DS    C
PCHCREDT DS    0CL5                    CREATION DATE (YYDDD)
PCHCREYY DS    CL2                     CREATION YEAR
PCHCREDD DS    CL3                     CREATION DAY
         DS    C
PCHEXPDT DS    0CL5                    EXPIRATION DATE (YYDDD)
PCHEXPYY DS    CL2                     EXPIRATION YEAR
PCHEXPDD DS    CL3                     EXPIRATION DAY
         ORG
PCHDEVTP DS    XL24                    DEVICE TYPE INFORMATION
***********************************************************************
         SPACE 2
***********************************************************************
         DS    0H
DSCBEXT  DS    0XL10                   EXTENT WORK AREA
DSCBTYPE DS    X
DSCBM    DS    X                       EXTENT NUMBER
DSCBLCC  DS    XL2                     LOW CYLINDER ADDRESS
DSCBLHH  DS    XL2                     LOW TRACK ADDRESS
DSCBHCC  DS    XL2                     HIGH CYLINDER ADDRESS
DSCBHHH  DS    XL2                     HIGH TRACK ADDRESS
WORK1    DC    D'0'                    PACK UNPACK WORK ARES
TRKCYL   DC    H'0'                    NO OF TRACKS PER CYLINERS
***********************************************************************
***********************************************************************
         EJECT                                              *HMD 04/81*
JCLPUNCH DCB   DDNAME=DEFINE,DSORG=PS,LRECL=80,MACRF=(PM)
         EJECT                                              *HMD 04/81*
JCLBUF   DC    CL80' '                 RECORD BUFFER
         ORG   JCLBUF
JCLBUF00 DS    CL2                     JCL INDICATOR (//)
JCLBUF02 DS    CL8
         DS    C
JCLBUF12   DS  CL4
JCLBUF16 DS    CL20
         ORG   JCLBUF
         DS    CL2
JCLDDN   DS    CL8                     DATA DEFINITION NAME
         DS    CL11
JCLUNIT  DS    CL3                     UNIT PREFIX
         DS    CL10
JCLVOL   DS    CL3                     VOLUME PREFIX
         DS    CL9
JCLDSN   DS    CL3                     DATA SET NAME PREFIX
         DS    CL10
JCLDISP  DS    CL3                     DISP PREFIX
         ORG   JCLBUF+72
JCLSKEY1 DS    C
JCLSKEY2 DS    CL5
         ORG
***********************************************************************
         EJECT
***********************************************************************
JCLOUT14 DC    F'0'                    REGISTER SAVE AREA
JCLOUT   DS    0H
         ST    R14,JCLOUT14            SAVE REGISTER
         PUT   JCLPUNCH,JCLBUF         PUNCH JCL RECORD
JCLWRITN DS    0H
         MVI   JCLBUF,C' '             CLEAR BUFFER
         MVC   JCLBUF+1(71),JCLBUF     TO SPACES
         L     R14,JCLOUT14            LOAD REGISTER
         BR    R14                     RETURN
JCLVOLID DC    CL6' '                  VOL SER NUMBER
***********************************************************************
         EJECT
***********************************************************************
* VOLUME TABLE OF CONTENTS DCB AND WORK AREAS                         $
***********************************************************************
VTOC     DCB   DDNAME=VTOC,DSORG=PS,EXLST=VTOCXLST,RECFM=F,MACRF=R,    *
               BLKSIZE=096,KEYLEN=44
VTOCXLST DC    X'87',AL3(VTOCJFCB)
VTOCJFCB DC    XL176'0'                JOB FILE CONTROL BLOCK
VTOCBUF  DC    XL140'0'                VOLUME TABLE OF CONTENTS BUFFER
SAVDSN   DC    CL44' '                 DATA SET NAME
         EJECT                                              *HMD 04/81*
UCATDCB  DCB   DDNAME=USERCAT,DSORG=PS,EXLST=VTOCXLST,RECFM=F,MACRF=R
         EJECT
***********************************************************************
* PROCESS VSAM USER CATALOG TO SEE IF THIS IS THE RIGHT VOL SER       *
***********************************************************************
GETVSAM  DS    0H
         STM   R14,R1,VSAMRSA          SAVE REGISTERS
OPENMAST DS    0H
         RDJFCB (UCATDCB,(INPUT))
         LTR   R15,R15                 GOOD READ
         BZ    GOTUCAT                 ..YES
         LA    R1,*
         ABEND (R1),DUMP
GOTUCAT  DS    0H
         LA    R15,VTOCJFCB            LOAD VTOCJFCB ADDRESS
         USING JFCBDSNM,R15
         MVC   UCATDSN,JFCBDSNM        DATASET NAME
         BAL   R14,GETUSER             PROCESS USER CATALOG
         LM    R14,R1,VSAMRSA          LOAD REGISTERS
         BR    R14                     RETURN
         EJECT
VSAMRSA  DC    4F'0'                   REGISTER SAVE AREA
MASTBUF  DS    CL512                   MASTER CATLG RECORD BUFFER
         ORG   MASTBUF
         DS    X                       ZEROS
ENTIDNO  DS    XL3                     CONTROL INTERVAL NO. OF THIS
*                                      RECORD
RELIND   DS    X                       RELEASE INDICATOR
*                                      1=NONENHANCED VSAM, 1=ENHANCED
CRAVOL   DS    CL6                     CRA VOLUME SERIAL
CRAIDNO  DS    XL3                     CRA CONTROL INTERVAL NO.
CRADEVT  DS    XL4                     CRA DEVICE TYPE
CRACRETS DS    XL4                     CRA CREATION TIME STAMP
CRADITS  DS    XL4                     DATA/INDEX IDENTIFIER TIME STAMP
         DS    XL18                    ZEROS
ENTYPE   DS    C                       RECORD TYPE - 'U'
         DS    XL2                     RECORD LENGTH
         DS    X                       NO. OF VARIABLE-LENGTH FIELDS
*                                      THAT PRECEDE THE POINTER TO AN
*                                      EXTENSION RECORD. ALWAYS ZERP
         DS    X                       LENGHT OF THE FIXED-LENGHT FIELD
*                                      IN THIS RECORD
ENTNAME  DS    CL44                    USER CATALOG DS NAME
         DS    XL5                     HORIZIONAL EXTENSION RECORD PTR
NOFUSETS DS    X                       NO OF SET-OF-FILED POINTERS THAT
*                                      FOLLOW
CCREDT   EQU   MASTBUF+101,3           CLUSTER CREATION DATE
CEXPDT   EQU   MASTBUF+104,3           CLUSTER EXPIRATION DATE
         ORG
         EJECT
***********************************************************************
* SAVE THE USER CATALOG DATA SET NAME                                 *
* IF THIS IS THE USER CATALOG FOR THE VOLUME THAT WE ARE PROCESSING   *
***********************************************************************
         SPACE 1
GETUCAT  DS    0F
         STM   R14,R1,UCATRSA          SAVE REGISTERS
         CLI   ENTYPE,C'U'             IS RECORD A USER CATALOG ?
         BNER  R14                     NO, RETURN
         SR    R3,R3                   INITALIZE REGISTER
         IC    R3,NOFUSETS             LOAD NO OF USER SET POINTERS
         MH    R3,=H'5'                MULTIPLY USER SETS BY PTR LL
         A     R3,=A(NOFUSETS+L'NOFUSETS)  ADD BEG OF POINTER STES
         ST    R3,USETBEG              SAVE FIRST SET ADDRESS
         LA    R1,NOFUSETS             LOAD FIRST POINTER ADDRESS
         ST    R1,USETPTR              SAVE FIRST POINTER ADDRESS
CKUSETS  DS    0H
         L     R1,USETPTR              LOAD NEXT SET POINTER ADDRESS
         USING UCATSETS,R1             DECLARE BASE FOR SET POINTER
         TM    USETYPE,X'40'           SET DELETED ?
         BO    UCATNEXT                YES, BRANCH
         NI    USETYPE,X'3F'           TURN OFF BITS 0 AND 1
         CLI   USETYPE,X'03'           VOLUME ID SET ?
         BNE   UCATNEXT                NO, BRANCH
         LH    R1,USETDISP             LOAD SET DISPLACEMENT
         A     R1,USETBEG              ADD TO BEGINNING OF SETS
         USING VOLIDSET,R1             DECLARE BASE FOR VOL ID SET
         CLC   VOLSER,JCLVOLID         IS VOL SER SAME ?
         BNE   UCATNEXT                NO, BRANCH
         MVC   UCATDSN,ENTNAME         SAVE USER CATALOG DS NAME
         B     UCATEND                 GO RETURN FROM THIS ROUTINE
UCATNEXT DS    0F
         SR    R1,R1                   INITALIZE REGISTER
         IC    R1,NOFUSETS             LOAD NO OF USER SETS REMAINING
         SH    R1,=H'1'                DECREMENT BY 1
         BZ    UCATEND                 BRANCH IF NO MORE SETS
         STC   R1,NOFUSETS             SAVW NO OF SETS REMAINING
         L     R1,USETPTR              LOAD CURRENT SET POINTER PTR
         LA    R1,5(R1)                INCREMENT BY POINTER LENGHT
         ST    R1,USETPTR              SAVE USER SET POINTER PTR
         B     CKUSETS                 PROCESS NEXT SET POINTER
UCATEND  DS    0F
         LM    R14,R1,UCATRSA          LOAD REGISTERS
         BR    R14                     RETURN
UCATRSA  DC    4F'0'                   REGISTER SAVE AREA
USETBEG  DC    F'0'                    POINTER TO FIRST SET PAST PTRS
UCATDSN  DC    CL44' '                 USER CATALOG DATA SET NAME
USETPTR  DC    F'0'                    CURRENT SET POINTER POINTER
         EJECT
***********************************************************************
* PROCESS VSAM USER CATALOG AND GENERATE IDCAM'S CONTROL CARDS
***********************************************************************
VSDISP   DC    CL13' '                 DISP FOR VSAM ON TAPE
         SPACE 2
GETUSER  DS    0H
         STM   R14,R1,USERSA           SAVE REGISTERS
OPENUSER DS    0H
         OPEN  (USERCAT,(INPUT))       OPEN USER VSAM CATALOG
         VERIFY RPL=VRFYRPL            ISSUE VSAM VERIFY
         POINT RPL=USERRPL             POINT TO BEGIN OF DATASET
         LTR   R15,R15                 SUCCESSFUL POINT
         BZ    POINTOK
         ABEND 2,DUMP
POINTOK  DS    0H
READUSER DS    0H
         GET   RPL=USERRPL             READ VSAM USER CATALOG
         LTR   R15,R15                 SUCCESSFUL GET
         BZ    USEROK
         ABEND 3,DUMP
USEROK DS    0H
         CLI   ENTYPE,C'C'             IS RECORD DEFINING A CLUSTER ?
         BNE   READUSER                NO, BRANCH
         CLC   ENTNAME,UCATDSN         IS CLUSTER DEFINING ITSELF ?
         BE    READUSER                YES, BRANCH
         B     DELETE                  SKIP EXPORT/LISTCAT
         EJECT
***********************************************************************
* CREATE CONTROL CATDS TO DELETE THE REQUESTED CLUSTER*               *
***********************************************************************
DELETE   DS    0H
         MVC   JCLBUF02,=C'DELETE -'   MOVE TO BUFFER
         BAL   R14,JCLOUT              WRITE CONTROL CARD
         MVI   JCLBUF02,C'('           MOVE LEFT PREN TO BUFFER
         LA    R1,JCLBUF02             POINT TO BUFFER FOR SCAN
         BAL   R14,GETSPACE            FIND NEXT BLANK
         MVC   0(L'ENTNAME,R1),ENTNAME MOVE CLUSTER ANME TO BUFFER
         BAL   R14,GETSPACE            FIND END OF NAME
         MVC   0(3,R1),=C') -'         MOVE TO END OF CLUSTER NAME
         BAL   R14,JCLOUT              WRITE CONTROL CARD
         MVC   JCLBUF02(4),=C'CAT('    MOVE TO JCL BUFFER
         LA    R1,JCLBUF02             POINT TO BUFFER FOR SCAN
         BAL   R14,GETSPACE            FIND NEXT BLANK
         MVC   0(L'UCATDSN,R1),UCATDSN MOVE CATALOG DSN TO BUFFER
         BAL   R14,GETSPACE            FIND NEXT BLANK
         MVC   0(3,R1),=C') -'         MOVE TO END OF CATALOG DSN
         CLI   PASSWORD,0              NO PASSWORD?         *HMD 04/81*
         BE    PUNCHDEL                YES, BYPASS MOVE     *HMD 04/81*
         MVI   0(R1),C'/'              INSERT PASSWORD      *HMD 04/81*
         MVC   1(8,R1),PASSWORD+1                           *HMD 04/81*
         MVC   9(3,R1),=C') -'         INSERT CONTINUATION  *HMD 04/81*
PUNCHDEL BAL   R14,JCLOUT              WRITE CONTROL CARD
         MVC   JCLBUF02(7),=C'CLUSTER' MAKE DELETE FOR CLUSTER
         BAL   R14,JCLOUT              WRITE CONTROL CARD
         BAL   R14,VGETDI+L'VGETDI     PJNCH CLUSTER DEFINITION JCL
         B     READUSER                NOOP TO IMPORT
         EJECT
***********************************************************************
* END OF FILE PROCESSING FOR VSAM USER CATALOG                        *
***********************************************************************
CLOSUSER DS    0H
         RETURN (14,12),RC=4          CLUSTER NOT IN CATALOG - ERROR
ENDUSER  DS    0H
         CLOSE USERCAT                 CLOSE USER CATALOG
         LM    R14,R1,USERSA           LOAD REGISTERS
         BR    R14                     RETURN
         SPACE 2
USERSA   DC    4F'0'                   REGISTER SAVE AREA
         EJECT                                              *HMD 04/81*
USERCAT  ACB   AM=VSAM,MACRF=(KEY,SEQ,IN,NCI,CNV,DIR,SKP),             *
               DDNAME=USERCAT,EXLST=USERXLST,PASSWD=PASSWORD
         EJECT                                              *HMD 04/81*
USERXLST EXLST AM=VSAM,EODAD=ENDUSER
         EJECT                                              *HMD 04/81*
USERRPL  RPL   ACB=USERCAT,AM=VSAM,AREA=USERBUF,AREALEN=512,           *
               KEYLEN=4,ARG=VDATACI,OPTCD=(KEY,KGE,SEQ,GEN)
USERBUF  EQU   MASTBUF                 POINT USER CATALOG BUFFER TO
         EJECT                                              *HMD 04/81*
VRFYRPL  RPL   ACB=USERCAT,AM=VSAM,AREA=USERBUF,AREALEN=512,           *
               KEYLEN=4,ARG=VDATACI,OPTCD=(CNV)
         EJECT
VDATACI  DC    X'0'                    DATA RECORD ADDRESS
VDATAAD  DC    XL3'0'                  DATA CONTROL INTERVAL ADDRESS
VINDXCI  DC    X'0'                    INDEX RECORD ADDRESS
VINDXAD  DC    XL3'0'                  INDEX CONTROL INTERVAL ADDRESS
CNOFSETS DS    X                       NO OF SETS OF POINTERS
         DS    0F
PASSWORD DC    XL1'00',CL8' '          CATALOG PASSWORD
CSETPTR  DS    F                       START OF FIRST SET POINTER
CFLFLL   EQU   MASTBUF+48,1            LENGTH OF FIXED LENGTH FIELDS
CSETBEG  DC    F'0'                    START OF SET OF FIELDS
         EJECT                                              *HMD 04/81*
VGETDI   DC    F'0'                    GET DATA AND INDEX POINTERS
         ST    R14,VGETDI              STORE RETURN POINTER
         MVC   VDATAAD,=XL3'0'         CLEAR DATA RECORD POINTER
         MVC   VINDXAD,=XL3'0'         CLEAR INDEX RECORD POINTER
         MVC   JCLBUF12(16),=C'DEFINE CLUSTER -'  MOVE TO JCL BUFFER
         BAL   R14,JCLOUT              PUNCH JCL
         LA    R1,JCLBUF16             POINT TO JCL BUFFER FOR SCAN
         MVC   0(6,R1),=C'(NAME('      MOVE TO JCL BUFFER
         BAL   R14,GETSPACE            FIND NEXT BLANK
         MVC   0(L'ENTNAME,R1),ENTNAME MOVE CLUSTER NAME TO JCL BUFFER
         BAL   R14,GETSPACE            FIND NEXT BLANK
         MVC   0(3,R1),=C') -'         MOVE TO JCL BUFFER
         BAL   R14,JCLOUT              PUNCH JCL
         MVC   JCLBUF16(12),=C'NONINDEXED -'  MOVE TO JCL BUVFER
         MVC   PCHDSORG,=C'ES'         MOVE ENTRY SEQUENCE CODE TO BUFF
         SR    R2,R2                   CLEAR REGISTER
         IC    R2,CFLFLL               LOAD FIXED LENGTH FIELDS LENGTH
         A     R2,=A(MASTBUF)          BUMP BY BUFFER ADDRESS
         LA    R2,5(R2)                POINT PAST EXTENSION RECORD PTR
         MVC   CNOFSETS,0(R2)          SAVE NO OF POINTER SETS
         ST    R2,CSETPTR              STORE FIRST SET POINTER
         LA    R2,L'CNOFSETS(R2)       POINT TO FIRST SET POINTER
         SR    R1,R1                   CLEAR REGISTER
         IC    R1,CNOFSETS             INSERT NO OF FIELD POINTERS
         MH    R1,=H'5'                MULTIPLY BY LENGTH OF FIELD
         AR    R1,R2                   COMPUTE FIRST SET
         ST    R1,CSETBEG              STORE START OF FIELDS
         L     R1,CSETPTR              LOAD NO OF SETS BASE
         USING UCATSETS,R1             DECLARE BASE
VDICK    DS    0H
         CLI   CNOFSETS,X'0'           ANY MORE SETS OF FIELDS ?
         BE    VDIEND                  NO
         TM    USETYPE,X'40'           ENTRY DELETED ?
         BO    VDINEXT                 YES
         NI    USETYPE,X'3F'           STRIP OFF UNWANTED BITS
         CLI   USETYPE,X'2'            ASSOCIATED TYPE FIELD ?
         BNE   VDINEXT                 NO
         LH    R2,USETDISP             LOAD OFFSET FROM START OF FIELDS
         A     R2,CSETBEG              BUMP BY START OF SET OF FIELDS
         USING ASSOCSET,R2             DECLARE BASE
         CLI   ASSOCTYP,C'D'           DATA TYPE ?
         BE    VDIDATA                 YES
         CLI   ASSOCTYP,C'I'           INDEX TYPE ?
         BE    VDIINDX                 YES
VDINEXT  DS    0H
         LA    R1,5(R1)                POINT TO NEXT FIELD
         SR    R2,R2                   CLEAR REGISTER
         IC    R2,CNOFSETS             LOAD NO OF SETS
         BCTR  R2,0                    DECREMENT
         STC   R2,CNOFSETS             STORE NO OF SETS
         B     VDICK                   CHECK NEXT FIELD
VDIDATA  MVC   VDATAAD,ASSOCNAM        SAVE RECORD CONTROL INTERVAL NO
         B     VDINEXT                 PROCESS NEXT FIELD
VDIINDX  DS    0H
         MVC   VINDXAD,ASSOCNAM        SAVE CONTROL INTERVAL NO
         MVC   JCLBUF16(12),=CL12'INDEXED -'  MOVE TO JCL BUFFER
         MVC   PCHDSORG,=C'KS'         MOVE KEY SEQ CODE TO BUFFER
         B     VDINEXT
VDIEND   DS    0H
         BAL   R14,JCLOUT              PUNCH JCL
         EJECT                                              *HMD 04/81*
*
* DEFINE CLUSTER
*
         MODCB RPL=USERRPL,ARG=VDATACI,KEYLEN=4,OPTCD=(GEN,DIR),       X
               AREA=DIBUF
         MVC   DIBUF(4),VDATACI        SET UP RECORD POINTER
         BAL   R14,VSDATIDX+L'VSDATIDX PUNCH REST OF PARAMETERS
         MODCB RPL=USERRPL,ARG=VINDXCI POINT TO INDEX KEY
         MVC   DIBUF(4),VINDXCI        SET UP RECORD POINTER
         BAL   R14,VSDATIDX+L'VSDATIDX   PUNCH REST OF PARAMETERS
         LA    R1,JCLBUF16             LOAD JCL BUFFER POINTER FOR SCAN
         MVC   0(4,R1),=C'CAT('        MOVE TO JCL BUFFER
         BAL   R14,GETSPACE            FIND NEXT BLANK
         MVC   0(L'UCATDSN,R1),UCATDSN MOVE CAT NAME TO JCL BUFFER
         BAL   R14,GETSPACE            FIND NEXT BLANK
         MVI   0(R1),C')'              MOVE TO JCL BUFFER
         CLI   PASSWORD,0              PASSWORD SUPPLIED?   *HMD 04/81*
         BE    NOPASS                                       *HMD 04/81*
         MVI   0(R1),C'/'              INDICATE PASSWORD    *HMD 04/81*
         MVC   1(8,R1),PASSWORD+1      MOVE PASSWORD        *HMD 04/81*
         MVI   9(R1),C')'              CLOSE STATEMENT      *HMD 04/81*
NOPASS   BAL   R14,JCLOUT              PUNCH JCL
         MODCB RPL=USERRPL,ARG=USERBUF,OPTCD=(NSP) POINT TO CLUSTER REC
         GET   RPL=USERRPL             POINT TO CLUSTER RECORD
         MODCB RPL=USERRPL,OPTCD=SEQ,AREA=USERBUF CHANGE TO SEQ PROCESS
         L     R14,VGETDI              LOAD RETURN POINTER
         BR    R14                     RETURN
         EJECT                                              *HMD 04/81*
DIBUF    DS    128F                    DATA/INDEX RECORD BUFFER
         ORG   DIBUF
         DS    XL44
DIENTYPE DS    C                       RECORD TYPE(D=DATA,2=INDEX)
         DS    XL3
DIFLFLL  DS    X                       FIXED LENGTH FIELDS LENTTH
DIENTNAM DS    CL44                    ENTRY NAME
         DS    XL14
DIATTR1  DS    X                       DATA SET ATTRIBUTES
DIATTR2  DS    X                       SHARE OPTIONS
         DS    X                       OPEN INDICATOR
DIBUFSIZ DS    XL4                     BUFFER SPACE
DIPSPAC  DS    XL3                     PRIMARY SPACE
DISSPAC  DS    XL3                     SECONDARY SPZCE
DISPACOP DS    X                       SPAC OPTIONX
         DS    XL8
DILRECL  DS    XL4                     DATA RECORD LENGTH
         ORG
DINOFSET DS    X                       NO OF SETS OF FIELD POINTERS
         EJECT                                              *HMD 04/81*
VSDATIDX DC    F'0'                    RETURN POINTER
         ST    R14,VSDATIDX            STORE RETURN POINTER
         CLC   =F'0',DIBUF             IS THERE A VALID ENTRY ?
         BER   R14                     NO
         GET   RPL=USERRPL             READ INDEX RECORD
         LTR   R15,R15                 GET SUCCESSFUL ?
         BZ    GETOK                   NO
         ABEND 20,DUMP
GETOK    DS    0H
         SR    R2,R2                   CLEAR REGISTER
         IC    R2,DIFLFLL              LOAD FIXED LENGTH FIELD LENGTH
         A     R2,=A(DIBUF)            INCREMENT BY BUFFER ADDRESS
         LA    R2,5(R2)                POINT PAST HORIZ EXT RECORD
         ST    R2,DISETPTR             STORE NO OF FIELDS POINTER
         MVC   DINOFSET,0(R2)          SAVE NO OF FIELD POINTERS
         LA    R2,L'DIFLFLL(R2)        POINT TO FIRST POINTER
         SR    R1,R1                   CLEAR REGISTER
         IC    R1,DINOFSET             INSERT NO OF SET OF FIELDS
         MH    R1,=H'5'                MULTIPLY BY FIELD LENGTH
         AR    R1,R2                   COMPUTE START OF FIRST FIELD
         ST    R1,DISETBEG             STORE START OF 1ST FIELD
DICKSETS DS    0H
         L     R1,DISETPTR             LOAD CURRENT FIELD POINTER
         USING UCATSETS,R1             DECLARE BASE REGISTER
         CLI   DINOFSET,X'0'           ALL SET OF FIELDS PROCESSED ?
         BE    DIEND                   YES
         TM    USETYPE,X'40'           SET DELETED ?
         BO    DINEXT                  YES
         NI    USETYPE,X'3F'           CLEAR UNWANTED BITS (0-1)
         L     R3,DISETBEG             LOAD START OF FIRST SET
         AH    R3,USETDISP             BUMP BY OFFSET
         CLI   USETYPE,X'1'            ACCESS METHOD DATA SET STAT BLK?
         LA    R2,DIDSBAD              LOAD POINTER TO POINTER
         BE    DISTORAD                YES
         CLI   USETYPE,X'3'            VOLUME SET ?
         LA    R2,DIVOLAD              LOAD POINTER TO VOL POINTER
         BE    DISTORAD                YES
         B     DINEXT                  SKIP THIS SET
DISTORAD DS    0H
         ST    R3,0(R2)                SAVE POINTER
DINEXT   DS    0H
         L     R1,DISETPTR             LOAD FIELD SET POINTER
         LA    R1,5(R1)                POINT TO NEXT ENTRY
         ST    R1,DISETPTR             STORE POINTER
         SR    R2,R2                   CLEAR REGISTER
         IC    R2,DINOFSET             INSERT NO OF SET LEFT
         BCTR  R2,0                    DECREMENT BY 1
         STC   R2,DINOFSET             STORE NEW VALUE
         B     DICKSETS                PROCESS NEXT FIELD
DIDSBAD  DS    F                       AMDSB POINTER
DIDSB    DS    F
         ST    R14,DIDSB               STORE RETURN POINTER
         L     R3,DIDSBAD              LOAD SET POINTER
         LA    R8,2(R3)                POINT TO AMDSB
         USING DSBDSECT,R8             DECLARE BASE REGISTER
* SPACE ALLOCATION
*
         CLI   DIENTYPE,C'I'           INDEX RECORD ?
         BE    DIKEYS                  YES
         LA    R1,JCLBUF16             POINT TO JCL BUFFER FOR SCAN
         MVC   0(4,R1),=C'REC('        MOVE TO JCL BUFFER
         BAL   R14,GETSPACE            FIND NEXT BLANK
         SR    R4,R4                   CLEAR REGISTER
         L     R2,AMDNLR               LOAD NO OF RECORDS
         CVD   R2,DIWORK               CONVERT TO PACKED DECIMAL
         UNPK  DITRK,DIWORK            CONVERT TO ZONED
         OI    DITRK+L'DITRK-1,X'F0'   MAKE POSITIVE
         MVC   0(L'DITRK,R1),DITRK     MOVE TO JCL BUFFER
         BAL   R14,GETSPACE            FIND NEXT BLANK
         CLC   DISSPAC,=XL(L'DISSPAC)'0'  ANY SECONDARY ALLOCATION ?
         BE    DINOSEC                 NO
         LA    R1,1(R1)                LEAVE 1 SPACE
         SR    R4,R4                   CLEAR REGISTER
         L     R5,AMDNLR               LOAD NO OF RECORDS USED
         D     R4,=F'10'               COMPUTE 10 PERCENT
         CVD   R5,DIWORK               CONVERT TO PACKED DECIMAL
         UNPK  DITRK,DIWORK            CONVERT TO ZONED
         OI    DITRK+L'DITRK-1,X'F0'   MAKE POSITIVE
         MVC   0(L'DITRK,R1),DITRK     MOVE TO JCL BUFFER
         BAL   R14,GETSPACE            FIND NEXT BLANK
DINOSEC  DS    0H
         MVC   0(3,R1),=C') -'         MOVE TO JCL BUFFER
         BAL   R14,JCLOUT              PUNCH JCL
*
* CREATE DATA SET ATTRIBUTES - (SPEED, UNIQUE, AND ERASE)
*
         ICM   R2,15,DIBUFSIZ          INSERT BUFFER SPACE
         CVD   R2,DIWORK               CONVERT TO DECIMAL
         OI    DIWORK+L'DIWORK-1,X'F'  MAKE POSITIVE
         MVC   JCLBUF16(12),=C'BUFFERSPACE('  MOVE TO BUFFER
         LA    R1,JCLBUF16             LOAD SCAN POINTER
         BAL   R14,GETSPACE            FIND NEXT BLANK
         UNPK  0(5,R1),DIWORK          CONVERT TO ZONED
         BAL   R14,GETSPACE            FIND NEXT BLANK
         MVC   0(4,R1),=C')  -'        MOVE TO JCL BUFFER
         BAL   R14,JCLOUT              WRITE BUFFER SPACE RECORD
         TM    DIATTR1,X'80'           SPEED ?
         BNO   DIUNIQUE                NO
         MVC   JCLBUF16(7),=C'SPEED -' MOVE TO RECORD BUFFER
         BAL   R14,JCLOUT              WRITE RECORD
DIUNIQUE DS    0H
         TM    DIATTR1,X'40'           UNIQUE DATA SET ?
         BNO   DIREUSE                 NO
         MVC   JCLBUF16(8),=C'UNIQUE -' MOVE TO RECORD BUFFER
         BAL   R14,JCLOUT              WRITE RECORD
DIREUSE  DS    0H
         TM    DIATTR1,X'20'           REUSEABLE DATA SET ?
         BNO   DIERASE                  NO
         MVC   JCLBUF16(7),=C'REUSE -' MOVE TO RECORD BUFFER
         BAL   R14,JCLOUT              WRITE RECORD
DIERASE  DS    0H
         TM    DIATTR1,X'10'           ERASE WHEN DELETING ?
         BNO   DIENDC                  NO
         MVC   JCLBUF16(7),=C'ERASE -' MOVE TO BUFFER
         BAL   R14,JCLOUT              WRITE ERASE RECORD
DIENDC   DS    0H
         MVC   JCLBUF16(3),=C') -'
         BAL   R14,JCLOUT              WRITE ERASE RECORD
*
* KEYS
*
DIKEYS   DS    0H
         CLI   DIENTYPE,C'I'           INDEX RECORD ?
         BE    DICISIZE                YES
         MVC   JCLBUF12(6),=C'DATA -'  MOVE TO JCL BUFFER
         BAL   R14,JCLOUT              PUNCH JCL
         BAL   R14,DINAME+L'DINAME     PUNCH NAME PARAMETER
         LA    R1,JCLBUF16             POINT TO JCL BUFFER
         MVC   0(5,R1),=C'KEYS('       MOVE TO JCL BUFFER
         SR    R2,R2                   CLEAR REGISTER
         LH    R2,AMDKEYLN             LOAD KEY LENGTH
         LTR   R2,R2                   IS THERE A KEY LENGTH ?
         BZ    DICISIZE                NO
         CVD   R2,DIWORK               CONVERT TO PACKED DECIMAL
         UNPK  DIKEYLN,DIWORK          CONVERT TO ZONED
         OI    DIKEYLN+L'DIKEYLN-1,X'F0'  MAKE POSITIVE
         BAL   R14,GETSPACE            FINK NEXT BLANK
         MVC   0(L'DIKEYLN,R1),DIKEYLN MOVE KEY LENGTH TO JCL BUFFER
         BAL   R14,GETSPACE            FIND NEXT BLANK
         LA    R1,1(R1)                SKIP SPACE
         LH    R2,AMDRKP               LOAD RELATIVE KEY POSITION
         CVD   R2,DIWORK               CONVERT TO PACKED DECIMAL
         UNPK  DIRKP,DIWORK            CONVERT TO ZONED
         OI    DIRKP+L'DIRKP-1,X'F0'   MAKE POSITIVE
         MVC   0(L'DIRKP,R1),DIRKP     MOVE KEY POSITION TO JCL BUFFER
         BAL   R14,GETSPACE            FINK NEXT BLANK
         MVC   0(3,R1),=C') -'         MOVE TO JCL BUFFER
         BAL   R14,JCLOUT              PUNCH JCL
*
* CONTROL INTERVAL SIZE
*
DICISIZE DS    0H
         CLI   DIENTYPE,C'D'           DATA RECORD ?
         BE    DICISZ                  YES
         MVC   JCLBUF12(7),=C'INDEX -' MOVE TO JCL BUFFER
         BAL   R14,JCLOUT              PUNCH INDEX PARAMETER
         BAL   R14,DINAME+L'DINAME     PUNCH NAME PARAMETER
DICISZ   DS    0H
         LA    R1,JCLBUF16             POINT SCAN REG TO JCL BUFFER
         MVC   0(5,R1),=C'CISZ('       MOVE TO JCL BUFFER
         BAL   R14,GETSPACE            FIND NEXT BLANK
         L     R2,AMDCINV              LOAD CONTROL INTERVAL SIZE
         CVD   R2,DIWORK                CONVERT TO PACKED DECIMAL
         UNPK  DICINV,DIWORK           CONVERT TO ZONED
         OI    DICINV+L'DICINV-1,X'F0' MAKE POSITIVE
         MVC   0(L'DICINV,R1),DICINV   MOVE CI SIZE TO JCL BUFFER
         BAL   R14,GETSPACE            FIND NEXT BLANK
         MVC   0(3,R1),=C') -'         MOVE TO JCL BUFFER
         BAL   R14,JCLOUT              PUNCH JCL
*
* FREESPACE
*
         CLI   DIENTYPE,C'I'           INDEX RECORD ?
         BE    DISHARE                 YES
         LA    R1,JCLBUF16             POINT TO JCL BUFFER FOR SCAN
         MVC   JCLBUF16(10),=C'FREESPACE('  MOVE TO JCL BUFFER
         BAL   R14,GETSPACE            POINT TO NEXT BLANK
         SR    R2,R2                   CLEAR REGISTER
         IC    R2,AMDPCTCI             INSERT CONTROL INTERVAL PERCENT
         CVD   R2,DIWORK               CONVERT TO PACKED DECIMAL
         UNPK  DIPCT,DIWORK            CONVERT TO ZONED
         OI    DIPCT+L'DIPCT-1,X'F0'   MAKE POSITIVE
         MVC   0(L'DIPCT,R1),DIPCT     MOVE TO JCL BUFFER
         BAL   R14,GETSPACE            FIND NEXT BLANK
         LA    R1,1(R1)                SKIP ONE BLANK
         IC    R2,AMDPCTCA             INSERT CONTROL AREA PERCENT
         CVD   R2,DIWORK               CONVERT TO PACKED DECIMAL
         UNPK  DIPCT,DIWORK            CONVERT TO ZONED
         OI    DIPCT+L'DIPCT-1,X'F0'   MAKE POSITIVE
         MVC   0(L'DIPCT,R1),DIPCT     MOVE TO JCL BUFFER
         BAL   R14,GETSPACE            FIND NEXT BLANK
         MVC   0(3,R1),=C') -'         MOVE TO JCL BUFFER
         BAL   R14,JCLOUT              PUNCH JCL
*
* SHARE OPTIONS
*
DISHARE  DS    0H
         LA    R1,JCLBUF16             POINT TO JCL BUFFER FOR SCAN
         MVC   JCLBUF16(4),=C'SHR('    MOVE TO JCL BUFFER
         BAL   R14,GETSPACE            FIND NEXT BLANK
         SR    R2,R2                   CLEAR REGISTER
         IC    R2,DIATTR2              INSERT SHARE OPTIONS
         SRL   R2,6                    SHIFT PART OPTIONS RIGHT JUST
         LA    R2,1(R2)                CONVERT TO 1-4
         CVD   R2,DIWORK               CONVERT TO PACKED DECIMAL
         UNPK  0(1,R1),DIWORK          CINVERT TO ZONED
         OI    0(R1),X'F0'             MAKE POSITIVE
         BAL   R14,GETSPACE            FIND NEXT BLANK
         LA    R1,1(R1)                SKIP ONE SPACE
         IC    R2,DIATTR2              INSERT SHARE OPTIONS
         SRL   R2,4                    SHIFT SYSTEM OPTIONS RIGHT JUST
         N     R2,=F'3'                TURN OFF UNWANTED BITS
         LA    R2,1(R2)                CONVERT TO PROPER CODE
         CVD   R2,DIWORK               CONVERT TO PACKED DECIMAL
         UNPK  0(1,R1),DIWORK          CONVERT TO ZONED
         OI    0(R1),X'F0'             MAKE POSITIVE
         BAL   R14,GETSPACE            FIND NEXT BLANK
         MVC   0(4,R1),=C')) -'        MOVE TO JCL BUFFER
         BAL   R14,JCLOUT
         L     R14,DIDSB               LOAD RETURN POINTER
         BR    R14                     RETURN
*
* RECORD SIZE
*
DIRECSZ  DS    F                       RETURN POINTER
         ST    R14,DIRECSZ             STORE RETURN POINTER
         LA    R1,JCLBUF16             POINT TO JCL BUFFER FOR SCAN
         MVC   0(6,R1),=C'RECSZ('      MOVE TO JCL BUFFER
         BAL   R14,GETSPACE            FIND NEXT BLANK
         ICM   R2,15,DILRECL           LOAD RECORD SIZE
         CVD   R2,DIWORK               CONVERT TO PACKED DECIMAL
         UNPK  DIRECSIZ,DIWORK         CINVERT TO ZONED
         OI    DIRECSIZ+L'DIRECSIZ-1,X'F0'  MAKE POSITIVE
         MVC   0(L'DIRECSIZ,R1),DIRECSIZ  MOVE TO JCL BUFFER
         BAL   R14,GETSPACE            FIND NEXT BLANK
         LA    R1,1(R1)                SKIP ONE SPACE
         L     R2,AMDLRECL             LOAD MAX RECORD SIZE
         CVD   R2,DIWORK               CONVERT TO PACKED DECIMAL
         UNPK  DIRECSIZ,DIWORK         CONVERT TO ZONED
         OI    DIRECSIZ+L'DIRECSIZ-1,X'F0'  MAKE POSITIVE
         MVC   0(L'DIRECSIZ,R1),DIRECSIZ  MOVE TO JCL BUFFER
         UNPK  PCHLRECL,DIWORK         CONVERT TO PACKED DECIMAL
         OI    PCHLRECL+L'PCHLRECL-1,X'F0'  MAKE POSITIVE
         BAL   R14,GETSPACE            FIND NEXT BLANK
         MVC   0(3,R1),=C') -'         MOVE TO JCL BUFFER
         BAL   R14,JCLOUT              PUNCH JCL
         L     R14,DIRECSZ             LOAD RETURN POINTER
         BR    R14                     RETURN
DIVOLAD  DS    F                       POINTER TO VOL SET OF FIELDS
DEVTYPTB DS    0H                      DEVICE TYPE TABLE TRK PER CYL
         DC    H'12'                   3340
         DC    H'30'                   3350
         DC    H'0'                    DUMMY
         DC    H'19'                   3330-1
DIVOL    DS    F
         ST    R14,DIVOL               STORE RETURN POINTER
         L     R7,DIVOLAD              LOAD VOLUME SET BASE REGISTER
         L     R8,DIDSBAD              LOAD AMDSB POINTER
         LA    R8,2(R8)                POINT PAST CONTROL INFO
         CLI   DIENTYPE,C'I'           INDEX RECORD ?
         BER   R14                     YES
         USING VOLIDSET,R7             DECLARE BASE FOR VOLUME SET
         SR    R1,R1                   CLEAR REGISTER
         IC    R1,VOLDTYP              LOAD DEVICE TYPE CODE
         SH    R1,=H'10'               MAKE LOWEST POINT TO START OF TB
         AR    R1,R1                   GET HALF WORD OFFSET
         A     R1,=A(DEVTYPTB)         POINT R1 TO DEVICE CODE TABLE
         LH    R1,0(R1)                LOAD TRACKS PER CYLINDER
         TM    DISPACOP,X'C0'          ALLOCATED IN TRACKS ?
         BNO   DIVOLTRK                YES
         SR    R5,R5
         ICM   R5,7,DIPSPAC            LOAD PRIMARY SPACE ALLOCATION
         MR    R4,R1                   MULTIPLY BY TRACKS PER CYLINDER
         STCM  R5,7,DIPSPAC            STORE PRIMARY SPACE IN TRACKS
         SR    R5,R5                   CLEAR REGISTER
         ICM   R5,7,DISSPAC            INSERT SECONDARY SPACE ALLOCATN
         MR    R4,R1                   MULTIPLY BY TRACKS PER CYLINDER
         STCM  R5,7,DISSPAC            STORE SECONDARY ALLOC IN TRACKS
DIVOLTRK DS    0H
         LH    R5,AMDNEXT              LOAD NO OF EXTENTS
         CVD   R5,WORK1                CONVERT TO PACKED DECIMAL
         UNPK  PCHEXTNO,WORK1          CONVERT TO ZONED
         OI    PCHEXTNO+L'PCHEXTNO-1,X'F0'  MAKE POSITIVE
         BCTR  R5,0                    DECREMENT FOR PRIMARY
         SR    R1,R1                   CLEAR REGISTER
         ICM   R1,7,DISSPAC            INSE-T SECONDARY SPACE ALLOC
         MR    R4,R1                   NO EXTENTS X SECONDARY ALLOC
         ICM   R1,7,DIPSPAC            INSERT PRIMARY ALLOC
         AR    R5,R1                   PRIMARY ALLOC + SECONDARY ALLOC
* TOTAL ALLOCATION IS NOW IN R5
         CVD   R5,WORK1                CONVERT TO PACKED DECIMAL
         UNPK  PCHTRK,WORK1            CONVERT TO ZONED
         OI    PCHTRK+L'PCHTRK-1,X'F0' MAKE POSITIVE
         SR    R4,R4                   CLEAR REGISTER
         LH    R1,VOLTRKCA             LOAD NO OF TRACKS PER CA
         DR    R4,R1                   TRACKS ALLOC/TRACKS PER CA
* R5 = NO OF CONTROL AREAS
         MH    R5,AMDCIPCA             CI X CI IN CA
* R5 = NO OF CONTROL INTERVALS
         SR    R2,R2                   CLEAR REGISTER
         L     R3,AMDCINV              LOAD CONTROL INTERVAL SIZE
         CVD   R3,WORK1                CONVERT TO PACKED DECIMAL
         UNPK  PCHBLKSZ,WORK1          CONVERT TO ZONED
         OI    PCHBLKSZ+L'PCHBLKSZ-1,X'F0'  MAKE POSITIVE
         ICM   R1,15,DILRECL           LOAD AVERAGE RECORD LENGTH
         DR    R2,R1                   RECORD LENGTH / CI SIZE
* R3 = RECORDS PER CONTROL INTERVAL
         SR    R4,R4                   CLEAR REGISTER
         MR    R4,R3                   NO CI X RECORDS PER CI
* R5 = NO OF RECORDS TO ALLOCATE
         ST    R5,AMDNLR               STORE NO OF RECORDS TO ALLOCATE
         LA    R1,JCLBUF16             POINT TO JCL BUFFER FOR SCAN
         MVC   JCLBUF16(4),=C'VOL('    MOVE TO JCL BUFFER
         BAL   R14,GETSPACE            FIND NEXT BLANK
         MVC   0(L'VOLSER,R1),VOLSER   MOVE VOL SER TO JCL BUFFER
         BAL   R14,GETSPACE            FIND NEXT BLANK
         MVC   0(3,R1),=C') -'         MOVE TO JCL BUFFER
         BAL   R14,JCLOUT              PUNCH JCL
         BAL   R14,DIRECSZ+L'DIRECSZ   PUNCH RECORD SIZE PARAMETER
         MVC   PCHDSN,ENTNAME          MOVE CLUSTER NAME TO SYSPUNCH
         MVC   PCHVOLID,VOLSER         MOVE VOLSER TO SYSPUNCH
         UNPK PCHCREDT,CCREDT          CONVERT CREATION DATE TO ZONED
         OI    PCHCREDT+L'PCHCREDT-1,X'F0'  MAKE POSITIVE
         UNPK  PCHEXPDT,CEXPDT         CONVERT EXPIRATION DATE TO ZONED
         OI    PCHEXPDT+L'PCHEXPDT-1,X'F0'  MAKE POSITIVE
         BAL   R14,VSMVCEXT+L'VSMVCEXT MOVE & PRINT EXTENT INFO
         L     R14,DIVOL               LOAD RETURN POINTER
         BR    R14                     RETURN
DIEND    DS    0H
         BAL   R14,DIVOL+L'DIVOL       PUNCH REC PARAMETER
         BAL   R14,DIDSB+L'DIDSB       PUNCH DATA PARAMETERS
         L     R14,VSDATIDX            LOAD RETURN POINTER
         BR    R14                     RETURN
DINAME   DS    F
         ST    R14,DINAME              STORE RETURN POINTER
         LA    R1,JCLBUF16             LOAD POINTER FOR JCL BUFFER SCAN
         MVC   JCLBUF16(6),=C'(NAME('  MOVE TO JCL BUFFER
         BAL   R14,GETSPACE            FIND NEXT BLANK
         CLC   =C'VSAMDSET',DIENTNAM+9 SYSTEM ASSIGNED DATA SET NAME
         BE    DIVNAME                 YES
         CLC   =C'VSAMDSET',DIENTNAM   SYSTEM ASSIGNED DATA SET NAME
         BE    DIVNAME                 YES
         B     DIUNAME                 NO, USER ASSIGNED NAME
DIVNAME  DS    0H
         MVC   0(L'DIENTNAM,R1),ENTNAME   MOVE NAME TO JCL BUFFER
         BAL   R14,GETSPACE            FIND NEXT BLANK
         MVI   0(R1),C'.'              MOVE PERIOD TO JCL BUFFER
         MVC   1(L'DIENTYPE,R1),DIENTYPE  MOVE D OR I TO JCL BUFFER
         B     DIGOTNAM
DIUNAME  DS    0H
         MVC   0(L'DIENTNAM,R1),DIENTNAM  MOVE REAL NAME TO JCL BUFFER
         B     DIGOTNAM
DIGOTNAM DS    0H
         BAL   R14,GETSPACE            FIND NEXT BLANK
         MVC   0(3,R1),=C') -'         MOVE TO JCL BUFFER
         BAL   R14,JCLOUT              PUNCH NAME PARAMETER
         L     R14,DINAME              LOAD RETURN POINTER
         BR    R14                     RETURN
         EJECT                                              *HMD 04/81*
*
* IF THERE IS ONE MOVE THE NEW CATALOG NAME TO THE PUNCH BUFFER
DISETPTR DC    F'0'                    CURRENT SET OF FIELDS POINTER
DISETBEG DC    F'0'                    START OF FIRST SET POINTER
DICINV   DS    CL5                     CONTROL INTERVAL SIZE
DIKEYLN  DS    CL4                     KEY LENGTH
DIRKP    DS    CL4                     RELATIVE KEY POSITION
DITRK    DS    CL7                     ALLOCATION
DIWORK   DS    D                       PACK/UNPACK WORK AREA
DIPCT    DS    H                       PERCENT FREESPACE WORK AREA
DIRECSIZ DS    CL7                     RECORD SIZE
         EJECT                                              *HMD 04/81*
MVCPCHDT DS    0H
         SR    R1,R1                   CLEAR REGISTER
         IC    R1,WORKCRDT             INSERT CREATION YEAR
         CVD   R1,WORK1                CONVERT TO PACKED DECIMAL
         UNPK  PCHCREYY,WORK1          CONVERT TO ZONED
         OI    PCHCREYY+L'PCHCREYY-1,X'F0'  MAKE POSITIVE
         ICM   R1,3,WORKCRDT+1         LOAD CREATION DAY
         CVD   R1,WORK1                CONVERT TO PACKED DECIMAL
         UNPK  PCHCREDD,WORK1          CONVERT TO ZONED
         OI    PCHCREDD+L'PCHCREDD-1,X'F0'  MAKE POSITIVE
         SR    R1,R1                   CLEAR REGISTER
         IC    R1,WORKEXDT             INSERT EXPIRATION YEAR
         CVD   R1,WORK1                CONVERT TO PACKED DECIMAL
         UNPK  PCHEXPYY,WORK1          CONVERT TO ZONED
         OI    PCHEXPYY+L'PCHEXPYY-1,X'F0'  MAKE POSITIVE
         ICM   R1,3,WORKEXDT+1         INSERT EXPIRATION DAY
         CVD   R1,WORK1                CONVERT TO PACKED DECIMAL
         UNPK  PCHEXPDD,WORK1          CONVERT TO ZONED
         OI    PCHEXPDD+L'PCHEXPDD-1,X'F0'  MAKE POSITIVE
         BR    R14                     RETURN
WORKCRDT DS    XL3                     CREATION DATE
WORKEXDT DS    XL3                     CREATION DATE
         EJECT                                              *HMD 04/81*
*
* MOVE EXTENT INFO TO SYSPUNCH BUFFER AND PRINT RECORD
*
VSMVCEXT DS    F
         ST    R14,VSMVCEXT            SAVE RETURN POINTER
         LA    R1,VOLLKEY              POINT TO LOW KEY LENGTH
         SR    R2,R2                   CLEAR REGISTER
         ICM   R2,3,VOLLKEY            INSERT LOW KEY LENGTH
         LA    R1,2(R1)                POINT TO LOW KEY DATA FIELD
         AR    R1,R2                   POINT TO HIGH KEY LENGTH
         ICM   R2,3,VOLHKEY            LOAD HIGH KEY LENGTH
         LA    R1,2(R1)                POINT TO HIGH KEY DATA
         AR    R1,R2                   POINT TO EXTENT LENGTH FIELD
         MVC   VSEXTLL,0(R1)           SAVE EXTENT LENGTH
         LA    R1,2(R1)                POINT TO FIRST EXTENT
         ST    R1,VSEXTPT              SAVE EXTENT POINTER
         MVI   PCHRECF1,C'F'           MOVE FORMAT CODE F TO PUNCH
         CLC   AMDLRECL,DILRECL        RECORD FORMAT FIXED ?
         BE    VSEXTEND                YES
         MVI   PCHRECF1,C'V'           MOVE V TO PUNCH FORMAT CODE
VSEXTEND DS    0H
         L     R14,VSMVCEXT            LOAD RETURN POINTER
         CLC   VSEXTLL,=H'0'           END OF EXTENTS ?
         BER   R14                     YES, RETURN
         L     R1,VSEXTPT              LOAD EXTENT POINTER
         LH    R2,0(R1)                LOAD EXTENT NO
         CVD   R2,WORK1                CONVERT TO PACKED DECIMAL
         UNPK  PCHEXTNO,WORK1          CONVERT TO ZONED
         OI    PCHEXTNO+L'PCHEXTNO-1,X'F0'   MAKE POSITIVE
         MVC   DSCBEXT,0(R1)           MOVE EXTENT TO WORK AREA
         MVI   DSCBTYPE,X'0'           MAKE VALID FOR CONVERSION
         LA    R1,20(R1)               POINT TO NEXT EXTENT
         ST    R1,VSEXTPT              SAVE POINTER
         LH    R1,VSEXTLL              LOAD EXTENT BYTES REMAINING
         SH    R1,=H'20'               FIND REMAINING BYTES IN EXTENT
         STH   R1,VSEXTLL              SAVE THAT LENGTH
         PUT   SYSPUNCH,PUNCHBUF       WRITE RECORD
         B     VSEXTEND                PROCESS NEXT EXTEND
VSEXTPT  DS    F                       CURRENT EXTENT ENTRY POINTER
VSEXTLL  DS    H                       LENGTH OF EXTEND
***********************************************************************
         LTORG
         END  VSAMCAT
