RMFD   TITLE 'RMFDASD - RMF POSTPROCESSOR DASD ANALYSIS/REPORTER'   KHP
***********************************************************************
*                                                                     *
*        RMFDASD                                                      *
*                                                                     *
*   THIS PROGRAM PRODUCES UP TO FIVE DAYS' WORTH OF DASD RMF          *
*   DATA IN A CONSOLIDATED REPORT.  IT WAS MODIFIED FROM THE          *
*   'RMFR0003' PROGRAM WRITTEN BY CARRIER CORPORATION AND             *
*   DISTRIBUTED ON THE CBT MODS TAPE.  KAISER MODIFICATIONS           *
*   ARE:                                                              *
*                                                                     *
*   BFTEK=A ON INPUT DCB TO ALLOW READING RECFM=VBS DATASETS.         *
*                                                                     *
*   ALLOW BLOCKED SYSPRINT FOR RESPOOLING.                            *
*                                                                     *
*   'NWKND' PARM - IGNORE RMF DASD RECORDS FOR WEEKEND DAYS.          *
*                                                                     *
*   'SYS(NNNN)' PARM - SELECT ONLY RMF DASD RECORDS FOR SPECIFIED     *
*   SMF SYSID RATHER THAN MERGING ALL SYSTEMS' DASD RECORDS.          *
*                                                                     *
*   KAISER MODIFICATIONS ARE MARKED WITH 'KHP' IN COLUMNS 68-70.      *
*                                                                     *
*   D. THEWLIS, MAY 14, 1979.                                         *
*                                                                     *
***********************************************************************
         EJECT
*********************************************************************
*                                                                   *
*                         D I S C L A I M E R                       *
*                                                                   *
*   THIS COMPUTER PROGRAMMING MATERIAL  HAS  BEEN  DEVELOPED  BY,   *
*   OR   HAS  BEEN  MODIFIED  OR  EXTENDED  FROM  OTHER SIMILARLY   *
*   PROVIDED MATERIAL BY,   THE NORTHERN CALIFORNIA REGIONAL DATA   *
*   CENTER OF THE KAISER FOUNDATION HEALTH PLAN.   PLEASE ADDRESS   *
*   ANY INQUIRIES TO:                                               *
*                                                                   *
*         KAISER FOUNDATION HEALTH PLAN                             *
*         NORTHERN CALIFORNIA REGIONAL DATA CENTER                  *
*         945 CAMELIA STREET                                        *
*         BERKELEY, CALIFORNIA 94710                                *
*         (415) 645-6350                                            *
*                                                                   *
*         ATTN:  DAVE THEWLIS                                       *
*         (OR:   SYSTEMS PROGRAMMING)                               *
*                                                                   *
*   THIS MATERIAL  HAS  BEEN  USED  SUCCESSFULLY  BY  THE  KAISER   *
*   FOUNDATION HEALTH PLAN, AND TO THE BEST OF OUR KNOWLEDGE THIS   *
*   MATERIAL AND ANY SYSTEM(S)  OF  WHICH IT IS A PART ARE OPERA-   *
*   TIONAL AS OF THE SERVICE LEVEL OR DATE STATED IN  THE BODY OF   *
*   THIS MATERIAL   (IF SO STATED).     HOWEVER,  NO  WARRANTY IS   *
*   MADE OR IMPLIED AS  TO  THE  ACCURACY OF THIS MATERIAL OR ANY   *
*   RELATED MATERIAL OR SYSTEMS, AND NO RESPONSIBILITY IS ASSUMED   *
*   FOR ANY EFFECT OR MODIFICATION DIRECTLY OR INDIRECTLY  CAUSED   *
*   BY THE USE OF THIS MATERIAL.  IT IS THE RESPONSIBILITY OF ANY   *
*   USER OF THIS  MATERIAL TO  EVALUATE  IT'S  USEFULNESS  TO THE   *
*   USER'S ENVIRONMENT.                                             *
*                                                                   *
*   THE KAISER FOUNDATION HEALTH PLAN DOES NOT GUARANTEE  TO KEEP   *
*   THIS OR ANY RELATED MATERIAL CURRENT,   NOR DOES IT GUARANTEE   *
*   TO  PROVIDE  ANY  CORRECTIONS  OR EXTENSIONS DESCRIBED BY ANY   *
*   USERS OF THIS MATERIAL, OR ANY CORRECTIONS OR EXTENSIONS MADE   *
*   IN THE FUTURE BY THE KAISER FOUNDATION HEALTH PLAN ITSELF.      *
*                                                                   *
*********************************************************************
         EJECT
         SPACE 2
*        THIS PROGRAM WILL READ SMF RECORDS THAT CONTAIN RMF RECORDED
*        RECORDS AND SELECT THE RMF RECORDS FOR ANALYSIS.  THIS INPUT
*        SHOULD BE IN THE SEQUENCE AS RECORDED BY RMF EITHER IN THE
*        SYS1.MANX/Y DATA SETS OR ON TAPE.
*
*
*        REPORTS:   A REPORT IS PRINTED SHOWING THE:
*                       DEVICE ACTIVITY RATE PER SECOND,
*                       DEVICE BUSY PERCENT,
*                       QUEUE LENGTH
*                    FOR EACH UNIT SPECIFIED AND AN AVERAGE FOR THE
*                    FIRST 5 DAYS ENCOUNTERED ON THE INPUT DATA SET
*                    UNLESS A DATE PARM IS USED.
*                    THE VOLUME SERIAL NUMBER IS PRINTED FOR THE
*                    UNIT SPECIFIED IF THERE HAS BEEN NO CHANGE IN
*                    VOLSER.  IF THERE WAS A CHANGE IN VOLSER, "***"
*                    IS SHOWN INSTEAD OF A VOLSER.
*
*                    IF THE UNITS ARE SPECIFIED IN PAIRS, THERE IS A
*                    TOTAL SECTION PRINTED DEPICTING THE ACTIVITY
*                    OF THE LOGICAL PAIR.  THE UNITS OF THE PAIR ARE
*                    SHOWN IN THE VOLSER FIELD AND "TOT" WILL APPEAR
*                    IN THE UNIT FIELD.
*
*
          EJECT
*
*        DD'S  :  DDNAME        CONTENTS
*                 ------        --------
*                 INPUT         RMF TYPE 74 RECORDS
*
*                 PRINT         PRINTED REPORT
*
*                 SHIFTS        ENDING TIMES FOR PERIOD BREAKDOWNS
*
*                                   SPECIFY ENDING TIMES IN MILITARY
*                                   TIME - ONE PER RECORD STARTING
*                                   IN POSITION 1 .  EG. 1300
*
*                 UNITS         SINGLE AND PAIRED UNITS TO REPORT
*
*                                   SPECIFY SINGLE UNITS STARTING IN
*                                   POSITION 1 - ONE PER RECORD
*                                   EG. 142
*
*                                   SPECIFY PAIRED UNITS STARTING IN
*                                   POSITION 1 - ONE PAIR PER RECORD -
*                                   ENCLOSED IN PARENTHESIS - SEPARATED
*                                   BY A COMMA.  EG.  (143,163)
*
*
*        PARMS:        TIME - LIMIT THE TIMES SELECTED
*                           EG. TIME(AAAA,BBBB)
*                      DATE - LIMIT THE DATES SELECTED
*                           EG. DATE(YYDDD,YYDDD)  START/END IN JULIAN
*                      SYS  - SELECT RECORDS FOR SPECIFIED SYSID    KHP
*                           EG. SYS(A158) SELECTS FOR SYSTEM A158   KHP
*                               INSTEAD OF MERGING ALL SYSTEMS      KHP
*                      NWKND -IGNORE RECORDS FOR WEEKEND DAYS       KHP
*                                                                   KHP
*                           IF MORE THAN ONE PARM IS SPECIFIED, THEYKHP
*                           MUST BE SEPARATED BY COMMAS.            KHP
*                           EG.:                                    KHP
*                           TIME(0730,1200),DATE(78201,78206),NWKND KHP
*
*        USER ABEND:   ABEND 0001 - INVALID PARM VALUE
*
*
*        LIMITATIONS:  EACH UNIT NUMBER SHOULD BE SPECIFIED ONLY ONCE.
*                      THERE IS A LIMIT OF 200 UNIT NUMBERS.
*                      SHIFT ENDING TIMES ARE LIMITED TO 12 ENTRIES.
*                      A DEFAULT OF 2400 IS ENTERED AS THE LAST SHIFT
*                      ENDING TIME.
*
*
*        EXAMPLE OF JCL:
*
*         //RMFDASD JOB (A,B), .....
*         //S1      EXEC PGM=RMFDASD,
*         //           PARM='TIME(0400,1900),DATE(78201,78206)'
*         //INPUT   DD DSN=SYS1.DUMPMANX,DISP=OLD,
*         //          DCB=(RECFM=VBS,LRECL=32000,BLKSIZE=32000,BFTEK=A)
*         //PRINT   DD SYSOUT=A
*         //SHIFTS  DD *
*         0730
*         1430
*         /*
*         //UNITS   DD *
*         (140,160)
*         (141,161)
*         200
*         201
*         /*
         EJECT
RMFDASD  START 0
         SPACE 2
R0       EQU   0    *
R1       EQU   1    *
R2       EQU   2    *
R3       EQU   3    * BASE REGISTER
R4       EQU   4    *
R5       EQU   5    *
R6       EQU   6    *
R7       EQU   7    *
R8       EQU   8    *
R9       EQU   9    *
R10      EQU   10   *
R11      EQU   11   * ADDITIONAL BASE TO RECORD SECTIONS
R12      EQU   12   * PRIMARY BASE TO RECORD
R13      EQU   13   * SAVE AREA POINTER
R14      EQU   14   * LINK * WORK
R15      EQU   15   * RETURN * WORK
         SPACE 3
         STM   R14,R12,12(R13)
         LR    R3,R15
         USING RMFDASD,R3
         LA    R12,SAVEA
         ST    R12,8(R13)
         ST    R13,4(R12)
         LR    R13,R12
         SPACE 3
         L     R1,0(R1)      LOAD ADDRESS OF PARM
         CLC   0(2,R1),=H'0' CHECK FOR A PARM
         BZ    NOPARM
         LA    R1,2(R1)      SKIP OVER LENGTH OF PARM
PARM1    CLC   0(5,R1),=C'TIME('     CHECK FOR TIME PARM
         BE    PARM2
         CLC   0(5,R1),=C'DATE('     CHECK FOR DATE PARM
         BE    PARM3
         CLC   0(5,R1),=C'NWKND'     CHECK FOR NO WEEKEND           KHP
         BE    PARM4                                                KHP
         CLC   0(4,R1),=C'SYS('    CHECK FOR SYSTEM ID              KHP
         BE    PARM5                                                KHP
         ABEND 0001
         SPACE 1
PARM2    PACK  STRTTIME(3),5(4,R1)   PACK STARTING TIME
         PACK  STOPTIME(3),10(4,R1)  PACK ENDING TIME
         NI    STRTTIME+2,X'F0'      FIX TIME
         NI    STOPTIME+2,X'F0'      FIX TIME
         CLI   15(R1),C','           CHECK FOR ADDITIONAL PARM
         BNE   NOPARM
         LA    R1,16(R1)             POINT TO NEXT PARM
         B     PARM1
         SPACE 1
PARM3    PACK  STRTDATE(4),5(5,R1)   PACK STARTING DATE
         PACK  STOPDATE(4),11(5,R1)  PACK ENDING DATE
         CLI   17(R1),C','           CHECK FOR ADDITIONAL PARM
         BNE   NOPARM
         LA    R1,18(R1)             POINT TO NEXT PARM
         B     PARM1
         SPACE 1
PARM4    OI    KHPSWX,NWKNDSWX           INDICATE NO WEEKENDS       KHP
         CLI   5(R1),C','                                           KHP
         BNE   NOPARM                                               KHP
         LA    R1,6(R1)                                             KHP
         B     PARM1                                                KHP
         SPACE 1                                                    KHP
PARM5    MVC   KHPSID(4),4(R1)          SAVE SYSTEM ID              KHP
         OI    KHPSWX,SYSIDSWX          INDICATE ONE SYSTEM ONLY    KHP
         CLI   9(R1),C','                                           KHP
         BNE   NOPARM                                               KHP
         LA    R1,10(R1)                                            KHP
         B     PARM1                                                KHP
         SPACE 1                                                    KHP
NOPARM   EQU   *
         L     R15,=A(INITIAL)
         BALR  R14,R15               GO INITIALIZE
         SPACE 1
         OPEN  INPUT
         EJECT
*        READ SMF RECORDS AND SELECT THE RMF RECORDS FOR ANALYSIS
         SPACE 1
GETREC   GET   INPUT
         LA    R12,4(R1)        SKIP OVER RDW
         ST    R12,RECADDR      SAVE ADDRESS OF RECORD START
         USING SMF74A,R12       ESTABLISH ADDRESSABILITY TO RECORD
         CLI   SMF74RTY,X'4A'   CHECK FOR LOWER THAN TYPE 74
         BL    GETREC
         CLI   SMF74RTY,X'4A'   CHECK FOR HIGHER THAN TYPE 74
         BH    GETREC
         SPACE 1
         TM    KHPSWX,SYSIDSWX       SELECTING ONLY ONE SYSTEM?     KHP
         BNO   KHPSEL0           NO, CHECK WEEKENDS                 KHP
         CLC   SMF74SID(4),KHPSID  YES, IS THIS TARGET SYSTEM?      KHP
         BNE   GETREC          NO, DISCARD THE RECORD               KHP
         SPACE 1                                                    KHP
KHPSEL0  EQU   *                                                    KHP
         LA    R11,14(R12)      POINT TO COMMON CONTROL SECTION
         USING SMF74B,R11       ESTABLISH ADDRESSABILITY TO COMM CTRL
         SPACE 1
         TM    KHPSWX,NWKNDSWX  DISCARDING WEEKENDS?                KHP
         BNO   KHPSELOK        NO, CONTINUE WITH CHECKS             KHP
         CLC   SMF74DAT,KHPDATE  CURRENT DATE ALREADY COMPUTED?     KHP
         BE    KHPSELXX         YES, CHECK DISCARD                  KHP
         NI    KHPSWX,255-KHPDSCRD NEW DATE - DISCARD SWITCH OFF    KHP
         MVC   KHPDATE(4),SMF74DAT     GET THE DATE FOR NEXT CMPR   KHP
         SPACE 1                                                    KHP
         SR    R0,R0          CALCULATE IF WEEKEND                  KHP
         SR    R1,R1                                                KHP
         IC    R1,KHPDATE+1    GET YEAR                             KHP
         SLL   R1,4          AND CONVERT                            KHP
         STM   R0,R1,DW      TO BINARY                              KHP
         OI    DW+7,X'0F'                                           KHP
         CVB   R1,DW                                                KHP
         ST    R1,FW          SAVE BINARY YEAR FOR LATER            KHP
         M     R0,=F'365'      YEAR*365 + (YEAR-1)/4 + DATE         KHP
         LR    R0,R1         HOLD YEAR*365                          KHP
         L     R1,FW                                                KHP
         BCTR  R1,0                                                 KHP
         SRL   R1,2                                                 KHP
         AR    R0,R1        YEAR*365 + YEAR-1/4                     KHP
         XC    DW,DW                                                KHP
         MVC   DW+6(2),KHPDATE+2                                    KHP
         CVB   R1,DW        DATE IN BINARY                          KHP
         AR    R1,R0         R1 = YEAR*365+YEAR-1/4+DATE            KHP
         SR    R0,R0       NOW DIVIDE DATE BY 7                     KHP
         D     R0,=F'7'     AND REMAINDER IS WEEKDAY, 0=SUNDAY, ETC.KHP
         CH    R0,=H'0'    IF REMAINDER IS 0 OR 6, IT IS WEEKEND    KHP
         BE    KHPSETXX    AND SO IT IS                             KHP
         CH    R0,=H'6'                                             KHP
         BNE   KHPSELOK    IT IS NOT, CONTINUE                      KHP
KHPSETXX OI    KHPSWX,KHPDSCRD   ***WEEKEND***DISCARD***            KHP
         SPACE 1                                                    KHP
KHPSELXX TM    KHPSWX,KHPDSCRD   IS IT A WEEKEND?                   KHP
         BO    GETREC         YES, SCRUB IT                         KHP
         SPACE 1                                                    KHP
KHPSELOK EQU   *                                                    KHP
         SPACE 1                                                    KHP
         CP    STRTDATE,=P'0'   CHECK FOR DATE PARM
         BE    GETSEL0          BRANCH IF NONE SPECIFIED
         SPACE 1
         CP    SMF74DAT,STRTDATE SEE IF BEFORE SPECIFIED START
         BL    GETREC
         CP    SMF74DAT,STOPDATE SEE IF AFTER SPECIFIED STOP
         BH    GETREC
         SPACE 1
GETSEL0  CP    STRTTIME,=P'0'   CHECK FOR TIME PARM
         BE    GETSEL1          BRANCH IF NONE SPECIFIED
         SPACE 1
         CP    SMF74IST,STRTTIME  SEE IF BEFORE SPECIFIED START
         BL    GETREC
         CP    SMF74IST,STOPTIME  SEE IF AFTER SPECIFIED STOP
         BH    GETREC
         SPACE 1
GETSEL1  CLC   SMF74IST,RECIST  CHECK FOR NEW RECORD GROUP
         BE    SELECT
         MVC   RECIST,SMF74IST  SAVE INTERVAL START TIME
         L     R14,#SHIFTS      GET # OF TIME PERIODS
         LA    R15,SHIFTTAB     POINT TO TIME PERIOD TABLE
         SPACE 1
GETSEL2  CP    0(4,R15),SMF74IST  SEE IF IN THIS PERIOD
         BNL   GETSEL3
         LA    R15,4(R15)       POINT TO NEXT TIME PERIOD
         BCT   R14,GETSEL2
         SPACE 1
GETSEL3  S     R14,#SHIFTS      CALCULATE TIME PERIOD THIS REC
         LPR   R14,R14          BELONGS IN
         ST    R14,SHIFT#       SAVE TIME PERIOD #
         SPACE 1
         LA    R15,DAYMATRX     POINT TO DAY MATRIX
         LA    R14,5            GET # ENTRIES OF DAY MATRIX
         SPACE 1
GETSEL4  CP    0(4,R15),=P'0'   SEE IF EMPTY DAY
         BE    GETSEL5          GO INSERT THIS DAY HERE
         CP    0(4,R15),SMF74DAT  SEE IF DATE MATCHES
         BE    GETSEL6          ... YES, GO USE THIS RECORD
         LA    R15,4(R15)       POINT TO NEXT DATE SLOT
         BCT   R14,GETSEL4      GO LOOK FOR DATE SLOT TO USE
         SPACE 1
         B     GETREC           MORE DAYS THAN ALLOWED
         SPACE 2
GETSEL5  MVC   0(4,R15),SMF74DAT  SAVE THIS DAY IN THIS SLOT
         SPACE 1
GETSEL6  S     R14,=F'5'        CALCULATE RELATIVE DAY FOR THIS REC
         LPR   R14,R14
         ST    R14,DAY#         SAVE RELATIVE DAY FOR MATRIX USE
         DROP  R11
         SPACE 1
SELECT   SRL   R1,32            CLEAR REGISTER 0
         IC    R1,SMF74RTY      INSERT CHARACTER - RECORD TYPE
         LA    R12,14(R12)      POINT TO COMMON CONTROL SECTION
         DROP  R12
         USING SMF74B,R12
         SH    R1,=H'70'        BASE RECORD TYPE RELATIVE TO 70
         SLL   R1,2             AND MAKE IT INCREMENTS OF FOUR
         L     R1,BRTAB(R1)     LOAD ADDRESS OF RECORD TYPE PROCESSER
         BR    R1               GO PROCESS SELECTED RECORD
         SPACE 2
BRTAB    DC    A(GETREC),A(GETREC),A(GETREC),A(GETREC),A(TYP74)
         EJECT
*        DECODE DEVICE ACTIVITY RECORD
         SPACE 1
TYP74    EQU   *
         USING SMF74B,R12
         CLC   SMF74SUB,=X'0020'  CHECK FOR DASD DEVICES
         BNE   GETREC             DO ONLY DASD
         MVC   RECRDSAM,SMF74SAM  SAVE NUMBER OF SAMPLES
         LA    R1,SMF74INT        LOAD INTERVAL TIME
         BAL   R14,CNVMSBIN       GO CONVERT TO BINARY SECONDS
         ST    R1,REC74INT        SAVE INTERVAL TIME
         SPACE 1
         AH    R12,SMF74SIZ      POINT TO NEXT SECTION OF RECORD
         DROP  R12
         USING SMF74C,R12
         LR    R11,R12
         AH    R11,SMF74SDC      POINT TO FIRST DEVICE SECTION
         USING SMF74D,R11
         LH    R10,SMF74DEV      LOAD NUMBER OF DEVICES
         SPACE 1
TYP74A   UNPK  FW+1(3),SMF74ADD  UNPK IN UNIT NAME
         NC    FW+1(3),=X'0F0F0F' MAKE RIGHT FOR XLATE
         TR    FW+1(3),HEXTOEBC  TRANSLATE TO EBCDIC
         MVI   FW,X'00'          MAKE FLAG FOR FIND
         L     R1,FW             LOAD FLAG AND UCB
         L     R15,=A(FINDUNIT)  GET ADDRESS OF FINDUNIT MODULE
         BALR  R14,R15           GO FIND UNIT
         LTR   R1,R1             SEE IF UNIT FOUND
         BP    TYP74C            GO PROCESS THIS UNIT
         SPACE 1
*                                UNIT NOT FOUND - DONT PROCESS IT
         SPACE 1
TYP74B   AH    R11,SMF74SDD      POINT TO NEXT DEVICE SECTION
         BCT   R10,TYP74A        GO AND DO NEXT DEVICE
         B     GETREC
         SPACE 3
         USING MATRIXH,R1
TYP74C   CLC   MVOLSER,=CL6' '   SEE IF VOLSER IS IN UNIT MATRIX
         BNE   TYP74D
         MVC   MVOLSER,SMF74SER  STORE VOLSER IN UNIT MATRIX
         B     TYP74E
         SPACE 1
TYP74D   CLC   MVOLSER,SMF74SER  SEE IF VOLSER IS SAME AS BEFORE
         BE    TYP74E
         MVC   MVOLSER,=C'******'  NOTE CHANGE IN VOLSER
         DROP  R1
         EJECT
TYP74E   LA    R1,12(R1)         POINT TO MATRIXI SECTION
         L     R15,SHIFT#        GET RELATIVE SHIFT #
         MH    R15,=H'100'       X BY SHIFT SIZE
         AR    R1,R15            ADD TO BASE
         L     R15,DAY#          GET RELATIVE DAY #
         MH    R15,=H'20'        X BY DAY SIZE
         AR    R1,R15            ADD TO BASE
         USING MATRIXI,R1
         SPACE 1
         L     R15,MCOUNT        LOAD ACTIVITY COUNT
         A     R15,SMF74CNT      ADD RECORD ACTIVITY
         ST    R15,MCOUNT        STORE ACTIVITY COUNT
         SPACE 1
         L     R15,MTIME         LOAD INTERVAL TIME
         A     R15,REC74INT      ADD RECORD INTERVAL
         ST    R15,MTIME         STORE TIME
         SPACE 1
         L     R15,MENQ          LOAD ENQ COUNT
         A     R15,SMF74QUE      ADD RECORD ENQ
         ST    R15,MENQ          STORE ENQ COUNT
         SPACE 1
         L     R15,MSAMP         LOAD # SAMPLES
         A     R15,RECRDSAM      ADD RECORD SAMPLES
         ST    R15,MSAMP         STORE # SAMPLES
         SPACE 1
         L     R15,MBSY          LOAD BUSY COUNT
         A     R15,SMF74ACT      ADD RECORD BUSY COUNT
         ST    R15,MBSY          STORE BUSY COUNT
         SPACE 1
         DROP  R1
         B     TYP74B            GO PROCESS REST OF RECORD
         SPACE 2
         DROP  R11
         DROP  R12
         EJECT
CNVMSBIN EQU   *                CONVERT INTERVAL TIME TO BINARY
         XC    DW,DW
         MVO   DW,1(1,R1)       GET # SECONDS OF INTERVAL
         OI    DW+7,X'0F'
         CVB   R15,DW
         MVO   DW,0(1,R1)       GET # MINUTES OF INTERVAL
         OI    DW+7,X'0F'
         CVB   R1,DW
         MH    R1,=H'60'        MAKE # MINUTES INTO SECONDS
         AR    R1,R15           ADD UP
         BR    R14              RETURN
         SPACE 3
ENDIN    CLOSE (INPUT,)
         SPACE 2
         OPEN  (PRT,(OUTPUT))
         EJECT
*        FIND THE UNITS THAT ARE PAIRED AND ADD UP THE NUMBERS OF
*        THE PAIR INTO THE TOTAL GROUP IN THE MATRIX.
         SPACE 2
         L     R14,=A(NXTAREA)        CLEAR NEXTAREA
         SR    R15,R15                FOR SEQUENTIAL MATRIX ACCESS
         ST    R15,0(R14)
         SPACE 1
ADDUP    SR    R1,R1                  SET REQUEST FOR NEXT MATRIX
         L     R15,=A(FINDUNIT)       GET ADDRESS OF FIND UNIT
         BALR  R14,R15                GO GET NEXT UNIT MATRIX
         LTR   R1,R1                  SEE IF AT END OF MATRIX
         BM    PRNT001
         USING MATRIXH,R1
         CLC   MUNIT,=C'TOT'          SEE IF TOTAL MATRIX ENTRY
         BE    ADDUP5
         CLI   MFLAG,X'00'            SKIP ADDUP FOR SINGLE ENTRY
         BE    ADDUP
         CLI   MFLAG,X'01'            SEE IF FIRST OF PAIR
         BNE   ADDUP1
         MVC   4(3,R2),MUNIT          MOVE UNIT TO TOTAL VOLSER
         B     ADDUP2
         SPACE 1
ADDUP1   CLI   MFLAG,X'02'            SEE IF SECOND OF PAIR
         BNE   ADDUP2
         MVC   7(3,R2),MUNIT          MOVE UNIT TO TOTAL VOLSER
         SPACE 1
         DROP  R1
         SPACE 1
ADDUP2   L     R12,#SHIFTS            FIND # SHIFTS PER ENTRY
         LA    R12,1(R12)             MAKE RELATIVE TO 1
         LA    R1,12(R1)              POINT TO MATRIXI SECTION
         LA    R2,12(R2)              POINT TO MATRIXI TOTAL
         SPACE 1
ADDUP3   LA    R14,25                 LOAD NUMBER OF ENTRIES/SHIFT
         SPACE 1
ADDUP4   L     R15,0(R2)              LOAD TOTAL ENTRY
         A     R15,0(R1)              ADD IN DETAIL ENTRY
         ST    R15,0(R2)              SAVE TOTAL ENTRY
         LA    R1,4(R1)               POINT TO NEXT DETAIL ENTRY
         LA    R2,4(R2)               POINT TO NEXT TOTAL ENTRY
         BCT   R14,ADDUP4
         BCT   R12,ADDUP3
         B     ADDUP
         SPACE 1
ADDUP5   L     R12,#SHIFTS            FIND # SHIFTS PER ENTRY
         LA    R12,1(R12)             MAKE RELATIVE TO 1
         LA    R1,12(R1)              POINT TO MATRIXI SECTION
         USING MATRIXI,R1
         SPACE 1
ADDUP6   LA    R14,5                  LOAD NUMBER OF SECTIONS/SHIFT
         SPACE 1
ADDUP7   L     R15,MTIME              GET TIME OF TOTAL
         SRL   R15,1                  DIVIDE BY 2
         ST    R15,MTIME              SAVE IT
         L     R15,MSAMP              GET THE NUMBER OF SAMPLES
         SRL   R15,1                  DIVIDE BY 2
         ST    R15,MSAMP              SAVE IT
         LA    R1,20(R1)              POINT TO NEXT SECTION
         BCT   R14,ADDUP7
         BCT   R12,ADDUP6
         B     ADDUP
         SPACE 1
         DROP  R1
         EJECT
PRNT001  L     R14,=A(NXTAREA)        RESET NEXT AREA FOR
         SR    R15,R15                FOR SEQUENTIAL ACCESS OF
         ST    R15,0(R14)             MATRIX
         B     PRNT011                GO PRINT HEADINGS
         SPACE 1
PRNT002  SR    R1,R1                  SET FOR SEQUENTIAL ACCESS
         L     R15,=A(FINDUNIT)       GET ADDRESS OF FIND UNIT
         BALR  R14,R15                GO GET NEXT MATRIX ENTRY
         LTR   R1,R1                  SEE IF AT END OF MATRIX
         BM    ENDPRNT
         ST    R1,PRTR1SV             SAVE POINTER TO MATRIX
         SR    R2,R2
         ST    R2,SHIFT#              SET SHIFT TO 0
         LA    R2,12(R1)              POINT TO MATRIXI SECTION
         SPACE 1
PRNT003  LA    R15,AVGMTRX            ADDRESS AVERAGE MATRIX
         SR    R0,R0
         LA    R14,5                  NUMBER OF ENTRIES TO CLEAR
         SPACE 1
PRNT004  ST    R0,0(R15)              CLEAR MATRIX ENTRY
         LA    R15,4(R15)             POINT TO NEXT ENTRY
         BCT   R14,PRNT004
         SPACE 1
         USING MATRIXI,R2
         LA    R14,5                  SET FOR # TIMES IN LOOP
         SPACE 1
PRNT005  L     R15,AVGMTRX            LOAD VALUE
         A     R15,MCOUNT             ADD TO AVERAGE VALUE
         ST    R15,AVGMTRX            STORE VALUE
         L     R15,AVGMTRX+4          LOAD VALUE
         A     R15,MTIME              ADD TO AVERAGE VALUE
         ST    R15,AVGMTRX+4          STORE VALUE
         L     R15,AVGMTRX+8          LOAD VALUE
         A     R15,MENQ               ADD TO AVERAGE VALUE
         ST    R15,AVGMTRX+8          STORE VALUE
         L     R15,AVGMTRX+12         LOAD VALUE
         A     R15,MSAMP              ADD TO AVERAGE VALUE
         ST    R15,AVGMTRX+12         STORE VALUE
         L     R15,AVGMTRX+16         LOAD VALUE
         A     R15,MBSY               ADD TO AVERAGE VALUE
         ST    R15,AVGMTRX+16         STORE VALUE
         DROP  R2
         LA    R2,20(R2)              POINT TO NEXT ENTRY
         BCT   R14,PRNT005
         SPACE 1
         L     R2,SHIFT#              GET CURRENT SHIFT NUMBER
         SLL   R2,2                   MAKE A DISPLACEMENT
         LA    R15,SHIFTTAB           GET ADDRESS OF SHIFT TABLE
         AR    R15,R2                 ADD IN DISPLACEMENT
         MVC   PRTLN+7(8),=X'4021202020202020'
         ED    PRTLN+7(8),0(R15)      EDIT IN ENDING TIME
         MVC   PRTLN+13(2),=C'  '     BLANK OUT LAST 00
         L     R1,PRTR1SV             POINT TO UNIT MATRIX
         USING MATRIXH,R1
         CLI   SHIFT#+3,X'00'         SEE IF FIRST ENTRY
         BNE   PRNT006
         MVC   PRTLN+2(3),MUNIT       MOVE IN UNIT NAME
         MVC   UVOLSER,MVOLSER        SAVE VOLSER FROM HEADER
         MVC   UFLAG,MFLAG            SAVE FLAG FROM HEADER
         LA    R1,12(R1)              POINT TO MATRIXI SECTION
         B     PRNT008
         SPACE 1
PRNT006  CLI   SHIFT#+3,X'01'         SEE IF SECOND ENTRY
         BNE   PRNT008
         CLI   UFLAG,X'03'            SEE IF TOTAL FOR PAIR
         BE    PRNT007
         MVC   PRTLN+1(6),UVOLSER     MOVE IN VOLSER
         B     PRNT008
         SPACE 1
PRNT007  MVC   PRTLN+1(3),UVOLSER     MOVE UNITS INTO VOLSER FIELD
         MVI   PRTLN+4,C'/'           FOR TOTAL GROUP OF A PAIRED
         MVC   PRTLN+5(3),UVOLSER+3   REQUEST
         DROP  R1
         EJECT
PRNT008  LA    R0,5                   SET FOR NUMBER OF DETAILS
         LA    R2,PRTLN+17            POINT TO FIRST PRINT POSIT
         SPACE 1
PRNT009  BAL   R14,EDIT               GO EDIT ENTRY
         LA    R1,20(R1)              POINT TO NEXT ENTRY
         LA    R2,19(R2)              POINT TO NEXT PRINT POSIT
         BCT   R0,PRNT009
         SPACE 1
         ST    R1,PRTR1SV             SAVE MATRIX POINTER
         LA    R1,AVGMTRX             POINT TO AVERAGE MATRIX
         BAL   R14,EDIT               GO EDIT AVERAGES
         MVI   PRTLN,X'09'
         PUT   PRT,PRTLN
         MVI   PRTLN+1,C' '
         MVC   PRTLN+2(131),PRTLN+1
         CLC   #SHIFTS,SHIFT#         SEE IF DONE WITH THIS UNIT
         BNH   PRNT010                GO PROCESS NEW UNIT
         L     R15,SHIFT#             GET PRESENT SHIFT #
         LA    R15,1(R15)             SET FOR NEW SHIFT
         ST    R15,SHIFT#             SAVE IT
         L     R2,PRTR1SV             SET R2 FOR AVERAGE ADD OF SHIFT
         B     PRNT003                GO PROCESS NEW SHIFT
         SPACE 1
PRNT010  MVI   HDL,X'09'
         PUT   PRT,HDL
         L     R15,LINECNT            GET LINE COUNTER
         S     R15,#SHIFTS            SUB ALL LINES FOR SHIFTS
         BCTR  R15,0                  AND ONE BLANK
         BCTR  R15,0
         ST    R15,LINECNT            SAVE LINES TO GO
         BCTR  R15,0
         S     R15,#SHIFTS            SEE IF ROOM FOR ANOTHER SET
         BNM   PRNT002
         SPACE 1
PRNT011  BAL   R14,PRNTHD             GO PRINT HEADINGS
         LA    R15,55                 SET LINECOUNT FOR 55
         ST    R15,LINECNT
         B     PRNT002                GO PROCESS NEW SET
         EJECT
ENDPRNT  CLOSE PRT
         SPACE 1
         L     R15,=A(GETMAINA)       GET ADDRESS OF GETMAIN MATRIX
         SPACE 1
ENDPRNT1 CLC   0(4,R15),=F'0'         SEE IF ANYTHING TO FREE
         BE    ENDPRNT2
         ST    R15,FW                 SAVE POINTER TO MATRIX
         L     R1,=A(GETMAINS)        GET POINTER TO SIZE AND SUBPOOL
         L     R0,0(R1)               GET SIZE IN R0
         L     R1,0(R15)              GET ADDRESS TO FREE IN R1
         FREEMAIN R,LV=(0),A=(1)
         L     R15,FW                 RESTORE MATRIX POINTER
         LA    R15,4(R15)             INCR TO NEXT SLOT
         B     ENDPRNT1
         SPACE 1
ENDPRNT2 L     R13,4(R13)
         RETURN (14,12),RC=0
         EJECT
EDIT     ST    R14,EDR14SV
         USING MATRIXI,R1
         SPACE 1
         L     R15,MCOUNT             CALCULATE
         SR    R14,R14                DEVICE
         M     R14,=F'10'             ACTIVITY
         CLC   MTIME,=F'0'            SEE IF ZERO
         BE    EDIT1
         D     R14,MTIME              RATE
         CVD   R15,DW
         MVC   EDAR(5),=X'4020214B20'
         ED    EDAR(5),DW+6
         MVC   0(4,R2),EDAR+1
         SPACE 1
EDIT1    L     R15,MBSY               CALCULATE
         SR    R14,R14                DEVICE
         M     R14,=F'1000'           BUSY
         CLC   MSAMP,=F'0'            SEE IF ZERO
         BE    EDIT2
         D     R14,MSAMP              PERCENT
         CVD   R15,DW
         MVC   EDAR(5),=X'4020214B20'
         ED    EDAR(5),DW+6
         MVC   6(4,R2),EDAR+1
         SPACE 1
         L     R15,MENQ               CALCULATE
         SR    R14,R14                DEVICE
         M     R14,=F'1000'           QUEUE
         D     R14,MSAMP              LENGTH
         SR    R14,R14
         LA    R15,5(R15)
         D     R14,=F'10'
         CVD   R15,DW
         MVC   EDAR(5),=X'40214B2020'
         ED    EDAR(5),DW+6
         MVC   11(4,R2),EDAR+1
         SPACE 1
EDIT2    L     R14,EDR14SV
         BR    R14
         SPACE 1
         DROP  R1
         EJECT
PRNTHD   ST    R14,EDR14SV
         MVI   HDL,C' '
         MVC   HDL+1(132),HDL
         MVI   HDL,X'8B'
         PUT   PRT,HDL
         MVI   HDL,X'09'
         LA    R15,HDL+20
         LA    R1,DAYMATRX              POINT TO DAY MATRIX
         LA    R14,5                    SET NUMBER OF DAYS
         SPACE 1
PRNTHD1  MVC   0(7,R15),=X'4020204B202020'
         ED    0(7,R15),1(R1)           EDIT DATE
         LA    R15,19(R15)              INCR PRINT POSITION
         LA    R1,4(R1)                 POINT TO NEXT DATE
         BCT   R14,PRNTHD1
         SPACE 1
         MVC   0(7,R15),=C'AVERAGE'
         PUT   PRT,HDL
         MVI   HDL+1,C' '
         MVC   HDL+2(131),HDL+1
         MVC   HDL+2(10),=C'UNIT   END'
         PUT   PRT,HDL
         MVI   HDL,X'11'
         MVC   HDL+1(12),=C'VOLSER  TIME'
         LA    R15,HDL+18
         LA    R14,6
         SPACE 1
PRNTHD2  MVC   0(14,R15),=C'ACT  BUSY   QL'
         LA    R15,19(R15)
         BCT   R14,PRNTHD2
         SPACE 1
         PUT   PRT,HDL
         SPACE 1
         MVI   HDL+1,C' '
         MVC   HDL+2(131),HDL+1
         SPACE 1
         L     R14,EDR14SV
         BR    R14
         EJECT
WORKAREA EQU   *
RECIST   DS    CL4
DW       DS    D
SAVEA    DS    18F
REC74INT DS    F
FW       DS    F
RECRDSAM DS    F
RECADDR  DS    F
KHPDATE  DC    PL4'00'
KHPSID   DC    CL4' '
KHPSWX   DC    X'00'
NWKNDSWX EQU   X'80'    NO WEEKEND RECORDS
KHPDSCRD EQU   X'40'    DISCARD THIS DAY'S WEEKEND RECORDS
SYSIDSWX EQU   X'20'    ONLY ACCEPT THIS SYSTEM'S RECORDS
STRTTIME DC    PL4'0'
STOPTIME DC    PL4'0'
STRTDATE DC    PL4'0'
STOPDATE DC    PL4'0'
#SHIFTS  DC    F'0'
SHIFTTAB DC    13PL4'0'
SHIFT#   DC    F'0'
DAY#     DC    F'0'
DAYMATRX DC    5PL4'0'
AVGMTRX  DC    5F'0'
PRTR1SV  DS    F
LINECNT  DC    F'0'
EDR14SV  DS    F
EDAR     DS    CL8
UVOLSER  DS    CL6
UFLAG    DS    CL1
HDL      DC    CL133' '
PRTLN    DC    CL133' '
HEXTOEBC DC    C'0123456789ABCDEF'
         SPACE 2
         LTORG
         SPACE 2
         PRINT ON,NOGEN
INPUT    DCB   DDNAME=INPUT,MACRF=(GL),EODAD=ENDIN,DSORG=PS,           X
               BFTEK=A                                              KHP
         SPACE 2
PRT      DCB   DDNAME=PRINT,MACRF=(PM),DSORG=PS,RECFM=FBM           KHP
*              BLKSIZE=133                                          KHP
         SPACE 2
         EJECT
         PRINT ON,GEN
         SPACE 1
INITIAL  CSECT
         STM   R14,R12,12(R13)
         LR    R3,R15
         USING INITIAL,R3
         LA    R12,SAVEAB
         ST    R12,8(R13)
         ST    R13,4(R12)
         LR    R13,R12
         SPACE 1
         OPEN  SHIFTS
         LA    R10,12            SET FOR UP TO 12 TIME PERIODS
         SPACE 1
GETSHIFT GET   SHIFTS            READ TIME PERIOD DEFINITION
         L     R9,=A(SHIFTTAB)   GET ADDRESS OF SHIFT TABLE
         PACK  48(3,R9),0(4,R1)  PACK TIME
         NI    50(R9),X'F0'      FIX TIME
         L     R11,48(R9)        LOAD TIME
         LA    R12,12            GET NUMBER OF TIME SLOTS
         SPACE 1
GETSHIF1 CP    0(4,R9),=PL4'0'   FIND TIME SLOT TO USE
         BE    GETSHIF4          GO INSERT TIME INTO SLOT
         C     R11,0(R9)         SEE IF TIME LOWER THAN SLOT IN USE
         BNH   GETSHIF2          GO SET FOR SLOT MOVE
         LA    R9,4(R9)          INCREMENT TO NEXT SLOT
         BCT   R12,GETSHIF1      GO SEE IF RIGHT SLOT NOW
         SPACE 1
GETSHIF2 C     R9,=A(SHIFTTAB+44) SEE IF AT LAST SLOT
         BNL   GETSHIF4          GO INSERT HERE
         L     R12,=A(SHIFTTAB+44) SET FOR LAST SLOT
         SPACE 1
GETSHIF3 L     R8,0(R12)         PICK UP LAST SLOT
         ST    R8,4(R12)         MOVE SLOTS DOWN ONE POSITION
         C     R9,R12            HAVE WE MADE ROOM FOR NEW NUMBER
         BE    GETSHIF4          GO INSERT NUMBER HERE
         S     R12,=F'4'         BACK UP ONE SLOT
         B     GETSHIF3
         SPACE 1
GETSHIF4 ST    R11,0(R9)         INSERT NUMBER INTO SLOT IN TABLE
         BCT   R10,GETSHIFT      GO READ ANOTHER TIME PERIOD
         SPACE 2
ENDSHIFT CLOSE SHIFTS
         S     R10,=F'12'        FIND NUMBER OF SLOTS IN USE
         LPR   R10,R10
         L     R11,=A(#SHIFTS)   GET ADDRESS OF NUMBER OF SLOTS
         ST    R10,0(R11)        STORE NUMBER OF SLOTS
         SLL   R10,2
         L     R9,=A(SHIFTTAB)   GET ADDRESS OF SHIFT TABLE
         LA    R9,0(R10,R9)      GET ADDRESS OF LAST USED SLOT
         PACK  0(3,R9),=C'2400'  SET DEFAULT FOR END OF DAY
         NI    2(R9),X'F0'
         EJECT
         OPEN  UNITS
         SPACE 1
GETUNIT  GET   UNITS
         CLI   0(R1),C'('        CHECK FOR PAIR DELIMITER
         BNE   GETUNIT2          GO SET FOR SINGLE UNIT
         LA    R1,1(R1)          INCR OVER DELIMITER
         ST    R1,UNITSAVE       SAVE ADDR OF UNIT POINTER
         MVC   ALLOUNIT+1(3),0(R1)  MOVE UNIT NAME
         LA    R0,1              NOTE FIRST UNIT OF SET
         L     R1,ALLOUNIT       LOAD UNIT # AND ALLOCATE FLAG
         L     R15,=A(FINDUNIT)  GET ADDRESS OF FIND CSECT
         BALR  R14,R15           GO ALLOCATE SPACE 1
         L     R1,UNITSAVE       RESTORE UNIT POINTER
         MVC   ALLOUNIT+1(3),4(R1)  MOVE IN PAIRED UNIT NAME
         L     R1,ALLOUNIT       LOAD UNIT # AND ALLOCATE FLAG
         LA    R0,2              NOTE SECOND UNIT OF SET
         L     R15,=A(FINDUNIT)  GET ADDRESS OF FIND CSECT
         BALR  R14,R15           GO ALLOCATE SPACE 1
         MVC   ALLOUNIT+1(3),=C'TOT'  MOVE IN TOTAL NAME FOR UNIT
         LA    R0,3              NOTE TOTAL UNIT OF SET
         SPACE 1
GETUNIT1 L     R1,ALLOUNIT       LOAD UNIT # AND ALLOCATE FLAG
         L     R15,=A(FINDUNIT)  GET ADDRESS OF FIND CSECT
         BALR  R14,R15           GO ALLOCATE SPACE 1
         B     GETUNIT
         SPACE 1
GETUNIT2 MVC   ALLOUNIT+1(3),0(R1)  MOVE IN UNIT NAME
         SR    R0,R0             NOTE SINGLE UNIT SET
         B     GETUNIT1
         SPACE 1
ENDUNIT  CLOSE UNITS
         SPACE 1
         L     R13,4(R13)
         RETURN (14,12),RC=0
         SPACE 2
SAVEAB   DS    18F
ALLOUNIT DC    X'80000000'
UNITSAVE DC    F'0'
         SPACE 1
         LTORG
         SPACE 3
         PRINT ON,NOGEN
         SPACE 2
SHIFTS   DCB   DDNAME=SHIFTS,MACRF=(GL),EODAD=ENDSHIFT,DSORG=PS
         SPACE 1
UNITS    DCB   DDNAME=UNITS,MACRF=(GL),EODAD=ENDUNIT,DSORG=PS
         SPACE 1
         DROP  R3
         EJECT
         PRINT ON,GEN
         SPACE 2
FINDUNIT CSECT
         STM   R14,R12,12(R13)
         LR    R3,R15
         USING FINDUNIT,R3
         LA    R12,SAVEAC
         ST    R12,8(R13)
         ST    R13,4(R12)
         LR    R13,R12
         SPACE 1
         LR    R10,R0           SAVE ALLOCATION TYPE
         LR    R11,R1           SAVE UNIT ALLOCATION INFO
         LTR   R11,R11          TEST FOR TYPE OF REQUEST
         BZ    FINDNXT          FIND NEXT UNIT REQUEST
         BM    FINDALLO         ALLOCATE NEW UNIT REQUEST
         BP    FINDUNI          FIND UNIT REQUEST
         SPACE 2
FINDALLO L     R12,=A(#SHIFTS)  GET # SHIFTS TO ALLOCATE
         L     R12,0(R12)
         LA    R12,1(R12)       ADD IN FOR DEFAULT #
         MH    R12,=H'100'      MULT BY SIZE OF SHIFT INFO
         LA    R12,12(R12)      ADD IN HEADER SIZE
         C     R12,FREESPAC     SEE IF ENOUGH LEFT TO ALLOCATE
         BL    FINDALL3         GO TO ALLOCATE
         SPACE 1
* GET A 16K AREA TO ALLOCATE FROM
         SPACE 1
         L     R0,GETMAINS      LOAD SP=0 AND 16K FOR GETMAIN
         ST    R0,FREESPAC      RESET FREESPACE TO 16K
         GETMAIN R,LV=(0)
         SPACE 1
         LA    R2,GETMAINA      GET ADDRESS OF GOTTEN AREA TABLE
FINDALL1 L     R15,0(R2)        LOAD GOTTEN AREA ADDRESS
         LTR   R15,R15          SEE IF SLOT IN GOTTEN TABLE FREE
         BZ    FINDALL2         GO INSERT ADDRESS OF AREA
         LA    R2,4(R2)         POINT TO NEXT SLOT IN GOTTEN TABLE
         B     FINDALL1
         SPACE 1
FINDALL2 ST    R1,0(R2)         INSERT GOTTEN AREA ADDR IN TABLE
         B     FINDALL6         GO USE NEW AREA TO ALLOCATE FROM
         SPACE 1
FINDALL3 LA    R2,GETMAINA      GET ADDRESS OF GOTTEN AREA TABLE
FINDALL4 CLC   4(4,R2),=F'0'    SEE IF LAST ADDRESS USED
         BE    FINDALL5         GO USE THIS ADDRESS
         LA    R2,4(R2)         INCR TO NEXT SLOT
         B     FINDALL4
         SPACE 1
FINDALL5 L     R1,0(R2)         LOAD ADDRESS OF GOTTEN AREA
         A     R1,GETMAINS      ADD LENGTH OF GOTTEN AREA
         S     R1,FREESPAC      SUBTRACT OUT FREE AREA
         SPACE 1
         USING MATRIXH,R1
         SPACE 1
FINDALL6 ST    R10,FINDFWK      SAVE ALLOCATION FLAG
         MVC   MFLAG,FINDFWK+3  MOVE IN ALLOCATION FLAG
         ST    R11,FINDFWK      SAVE ALLOCATION UNIT
         MVC   MUNIT,FINDFWK+1  MOVE IN UNIT
         MVC   MVOLSER,=CL6' '  BLANK OUT VOLSER
         L     R15,UNITSALL     GET # OF UNITS ALLOCATED
         LA    R14,1(R15)       ADD 1 TO UNITS ALLOCATED
         ST    R14,UNITSALL     SAVE # OF UNITS ALLOCATED
         SLL   R15,3            X BY 8 - SIZE OF UNITPTR TAB
         LA    R14,UNITPTR      GET ADDRESS OF UNIT PTR TABLE
         AR    R14,R15          ADD IN DISPLACEMENT
         MVC   0(4,R14),0(R1)   MOVE IN UNIT AND FLAG
         ST    R1,4(R14)        SAVE ADDRESS OF POINTER TO MATRIX
         L     R15,FREESPAC     LOAD FREE SPACE IN GOTTEN AREA
         SR    R15,R12          SUBTRACT AMOUNT ALLOCATED
         ST    R15,FREESPAC     SAVE AMOUNT LEFT FREE
         DROP  R1
         LA    R1,12(R1)        POINT TO MATRIXI SECTION
         L     R12,=A(#SHIFTS)  GET POINTER TO # SHIFTS
         L     R12,0(R12)       LOAD # SHIFTS
         SR    R15,R15          ZERO REGISTER
FINDALL7 LA    R14,25           LOAD NUMBER OF ENTRIES PER SET
FINDALL8 ST    R15,0(R1)        ZERO OUT ENTRY
         LA    R1,4(R1)         POINT TO NEXT ENTRY
         BCT   R14,FINDALL8     GO ZERO OUT FOR # ENTRIES PER SET
         BCT   R12,FINDALL7     GO ZERO OUT FOR # SHIFTS PER DAY
         B     FINDRTRN         GO RETURN TO CALLER
         SPACE 3
FINDUNI  ST    R1,FINDFWK       SAVE CALLERS UNIT PASSED
         LA    R15,UNITPTR      GET ADDRESS OF UNIT MATRIX
         SPACE 1
FINDUNI1 CLC   FINDFWK+1(3),0(R15)  LOOK FOR UNIT IN MATRIX
         BE    FINDUNI2
         CLI   0(R15),X'00'     LOOK FOR END OF MATRIX
         BE    FINDUNI3
         LA    R15,8(R15)       INCR TO NEXT SLOT IN MATRIX
         B     FINDUNI1
         SPACE 1
FINDUNI2 L     R1,4(R15)        LOAD POINTER TO MAIN MATRIX
         L     R0,0(R15)        LOAD UNIT AND FLAG
         SR    R2,R2
         B     FINDRTRN         GO RETURN TO CALLER
         SPACE 1
FINDUNI3 LA    R1,1             PASS -1 VALUE AS NOT FOUND
         LNR   R1,R1
         SR    R0,R0
         SR    R2,R2
         B     FINDRTRN
         SPACE 3
FINDNXT  L     R14,NXTAREA      GET NEXT POINTER
         LA    R15,1(R14)       INCR NEXT POINTER
         ST    R15,NXTAREA      SAVE FOR NEXT TIME
         SLL   R14,3            X BY 8 FOR DISPLACEMENT
         LA    R15,UNITPTR      GET ADDRESS OF UNIT MATRIX
         AR    R15,R14          ADD DISPLACEMENT TO BASE MATRIX
         L     R0,0(R15)        LOAD UNIT NAME AND FLAG
         LTR   R0,R0            CHECK FOR END OF MATRIX
         BZ    FINDUNI3         GO SET END OF MATRIX FLAG
         L     R1,4(R15)        LOAD MATRIX POINTER
         SR    R2,R2
         CLI   3(R15),X'00'     SEE IF SINGLE ENTRY
         BE    FINDRTRN         RETURN NOW
         CLI   3(R15),X'01'     SEE IF FIRST ENTRY OF SET
         BNE   FINDNXT1
         LA    R15,16(R15)      INCR TO TOTAL ENTRY
         B     FINDNXT2
         SPACE 1
FINDNXT1 CLI   3(R15),X'02'     SEE IF SECOND ENTRY OF SET
         BNE   FINDRTRN
         LA    R15,8(R15)       INCR TO TOTAL ENTRY
         SPACE 1
FINDNXT2 L     R2,4(R15)        LOAD ADDRESS OF TOTAL MATRIX
         B     FINDRTRN
         SPACE 1
FINDRTRN L     R13,4(R13)
         LM    R14,R15,12(R13)
         LM    R3,R12,32(R13)
         BR    R14
         SPACE 2
SAVEAC   DS    18F
GETMAINA DC    33F'0'
NXTAREA  DC    F'0'
FREESPAC DC    F'0'
GETMAINS DC    F'16384'
FINDFWK  DC    F'0'
UNITSALL DC    F'0'
UNITPTR  DC    600F'0'
         SPACE 1
         LTORG
         EJECT
MATRIXH  DSECT
         SPACE 1
MUNIT    DS    CL3
MFLAG    DS    CL1
MVOLSER  DS    CL6
MFIL     DS    CL2
         SPACE 2
MATRIXI  DSECT
         SPACE 1
MCOUNT   DS    F
MTIME    DS    F
MENQ     DS    F
MSAMP    DS    F
MBSY     DS    F
         EJECT
*        REFER TO RMF MANUAL FOR CONTENTS OF THE FOLLOWING DSECTS
         SPACE 2
SMF74A   DSECT        DEVICE ACTIVITY RECORD
         SPACE 1
SMF74FLG DS    XL1
SMF74RTY DS    XL1
SMF74TME DS    XL4
SMF74DTE DS    PL4
SMF74SID DS    CL4
         SPACE 2
SMF74B   DSECT
         SPACE 1
SMF74SIZ DS    XL2
SMF74IST DS    PL4
SMF74DAT DS    PL4
SMF74INT DS    PL4
SMF74RV0 DS    XL2
SMF74SUB DS    XL2
SMF74SAM DS    XL4
SMF74MFV DS    CL2
SMF74RV1 DS    XL2
SMF74RLS DS    CL4
SMF74CYC DS    PL4
         SPACE 2
SMF74C   DSECT
         SPACE 1
SMF74SDC DS    XL2
SMF74DEV DS    XL2
SMF74SDD DS    XL2
SMF74RV2 DS    XL2
         SPACE 2
SMF74D   DSECT
         SPACE 1
SMF74ADD DS    PL2
SMF74RV3 DS    XL1
SMF74CNF DS    XL1
SMF74TYP DS    XL4
SMF74SER DS    CL6
SMF74RV4 DS    XL2
SMF74CNT DS    XL4
SMF74ACT DS    XL4
SMF74QUE DS    XL4
         SPACE 2
         END
