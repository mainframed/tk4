         PRINT NOGEN
CATDK    TITLE 'IDACATDK - DECOMPRESS KEY UTILITY'
         EJECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12                  1ST BASE REG
R13      EQU   13                  WORK AREA
R14      EQU   14
R15      EQU   15
PUT      EQU   1
POINT    EQU   3
ENDREQ   EQU   4
ERASE    EQU   5
VER      EQU   6
GETIX    EQU   11
KEY      EQU   X'80'
CNV      EQU   X'20'
UPD      EQU   X'02'
DIR      EQU   X'40'
SEQ      EQU   X'20'
KGE      EQU   X'04'
GEN      EQU   X'02'
NSP      EQU   X'01'
         EJECT
CATDK    CSECT
         USING *,R15
         B     PROLOG
         DC    C'CATDK 80/10/15 '
SAVE     DS    19F                R13 SAVE AREA
PROLOG   STM   R14,R12,12(R13)    SAVE INPUT REGS
         LA    R11,SAVE           GET MY SAVE AREA ADDRESS
         ST    R13,4(R11)         STORE BACKWARDS POINTER
         ST    R11,8(R13)         STORE FORWARD POINTER
         LR    R13,R11
         LA    R12,4095(R13)      SET BASE REG
         LA    R12,1(R12)
         LA    R11,4095(R12)      SET 2ND BASE REG
         LA    R11,1(R11)
         USING SAVE,R13,R12,R11
         DROP  R15
         MVI   STATUS,X'00'       CLEAR THE STATUS FLAGS
         ST    R1,WORK1           SAVE PARM POINTER
         L     R4,16(0,0)         GET CVT ADDDRESS
         TM    116(R4),X'10'      IS THIS MVS?
         BO    ESTAE
         MVI   ESTAE+4,X'00'      SET NEW OPTION BYTE
*
***** ESTABLISH AN ESTAE ROUTINE TO REMOVE ENQUE IF A DISASTER OCCURS
*
*        ESTAE ABTERM,CT,,XCTL=NO,,,TERM=YES
         CNOP  0,4           THE ESTAE MACRO WAS HAND EXPANDED
ESTAE    BAL   R1,*+20       SO THIS CODE CAN WORK ON MVS AS WELL AS
         DC    AL1(22)       VS1.
         DC    AL3(ABTERM)
         DC    2A(0)
         DC    AL1(64)
         DC    AL3(0)
         SR    R0,R0
         LA    R1,0(R1)
         SVC   60
*
****  ATTEMPT TO OPEN THE SYSIN DATA SET IF THERE IS ONE.
*
         L     R5,0(0,R4)         GET TCB WORD
         L     R5,0(0,R5)         GET TCB ADDRESS
         L     R6,180(R5)         GET JSCB ADDRESS
         L     R5,12(0,R5)        GET TIOT ADDRESS
         LA    R5,24(,R5)         POINT TO FIRST TIOT ENTRY
         SR    R8,R8
TIOTLOOP ICM   R8,1,0(R5)         GET TIOT ENTRY LENGTH
         BZ    NOSYSIN            END FOR TIOT ENTRIES, NO SYSIN
         CLC   4(8,R5),=C'SYSIN   '
         BE    SYSINOPN           SYSIN DDCARD FOUND
         AR    R5,R8              POINT TO NEXT TIOT ENTRY
         B     TIOTLOOP
SYSINOPN OPEN  (SYSIN,INPUT)
NOSYSIN  OPEN  (SYSPRINT,OUTPUT)
         TM    SYSPRINT+48,X'10'  SYSPRINT OPEN OK?
         BZ    ERROR1             NO, MUST HAVE IT
*
**** OPEN THE CATALOG AND VERIFY IT
*
CATOPN   ICM   R7,15,204(R6)      GET PCCB ADDRESS
         BNZ   PCCBFIND           IF NONE, GET FROM FIRST CAXWA
         L     R7,256(R4)         GET AMCBS FROM CVT
         L     R7,20(R7)          GET CAXWA FROM AMCBS
         TM    8(R7),X'04'        IS THIS THE MASTER CATALOG'S CAXWA?
         BO    *+12               YES, CONTINUE
         L     R7,4(R7)           GET THE CAXWA
         B     *-12
         LA    R7,24(R7)          POINT R7 28 BYTES INFRONT OF NAME
         B     PCCBOK
PCCBFIND CLI   ESTAE+4,X'00'      IS THIS VS1?
         BNE   PCCBOK
         L     R7,4(R7)           GET ACB FROM PCCB
         L     R7,64(R7)          GET CAXWA
         LA    R7,24(R7)          POINT IN FRONT OF NAME
PCCBOK   MVC   MINOR(44),28(R7)   GET CATALOG NAME FOR ENQ
         L     R6,256(R4)         NOW MUST FIND CAXWA
         L     R6,20(R6)
CAXWALOP CLC   MINOR(44),52(R6)   IS THIS THE CAXWA?
         BE    CAXWA
         ICM   R6,15,4(R6)        POINT TO NEXT CAXWA
         BNZ   CAXWALOP           NONE AND HAVE NOT FOUND CAXWA
         LA    R1,MSG25           ERROR MESSAGE
         BAL   R14,WRITE
         B     THEEND
CAXWA    MVC   UCBADR(4),28(R6)   GET UCB ADDRESS
         ICM   R1,15,WORK1
         BZ    CATOPN1
         L     R1,0(R1)           ADDRESS OF EXEC PARM FIELD
         LH    R14,0(R1)          GET THE PARM LENGTH
         LTR   R14,R14            IS THERE ONE?
         BZ    CATOPN1            NO, GO OPEN THE CATALOG
         STC   R14,PASSWORD       STORE THE LENGTH
         BCTR  R14,0
         EX    R14,MOVE2
         LA    R5,PASSWORD
         ST    R5,CATACB+32      STORE PASSWORD ADDRESS
CATOPN1  OPEN  (CATACB,INPUT)
         LTR   R15,R15           OPEN OK?
         BZ    VERIFY            YES, GO VERIFY IT
         CLI   CATACB+49,X'74'
         BE    VERIFY
         IC    R0,CATACB+49      GET OPEN ERROR CODE
         BAL   R14,CONVERT
         MVC   MSG3+30(2),UNPACK+6
         LA    R1,MSG3           NEED TO WTO THE ERROR MESSAGE
         LA    R14,EXIT          THIS IS AN ERROR MESSAGE
         B     WRITE
MOVE2    MVC   PASSWORD+1(0),2(R1)  MOVE PARM PASSWORD TO ACB
VERIFY   LA    R0,VER            SET R0 TO VERIFY CODE
         LA    R1,LOWRPL         USE THE HI RPL
         BAL   R14,REQUEST       GO DO THE VSAM VERIFY
         LTR   R15,R15           WORK OK?
         BNZ   EXIT              NO, GET OUT
         SPACE 3
**********************************************************************
* ROUTER DETERMINES THE FUNCTION (COMMAND) AND GIVES CONTROL TO THE  *
* CORRECT SUBROUTINE                                                 *
**********************************************************************
ROUTER   MVI   STATUS,X'00'      CLEAR THE FLAGS
         MVI   LOWRPL+40,DIR+GEN
         MVI   LOWRPL+41,CNV+UPD
         MVI   HIRPL+40,DIR+GEN
         MVI   HIRPL+41,KEY
*        TIME  DEC,ZONE=LT,ERRET=ROUTER1
         LA    R1,66
         SVC   11
         BAL   R14,CONVERT
         MVC   MSG1+34(2),UNPACK
         MVI   MSG1+36,C'.'
         MVC   MSG1+37(2),UNPACK+2
         MVI   MSG1+39,C'.'
         MVC   MSG1+40(2),UNPACK+4
         LR    R0,R1
         SRL   R0,4
         BAL   R14,CONVERT
         MVC   MSG1+27(2),UNPACK+3
         MVI   MSG1+29,C'.'
         MVC   MSG1+30(3),UNPACK+5
ROUTER1  LA    R1,MSG1           POINT TO THE COMMAND MSG
         BAL   R14,GETINPUT
         CLC   0(3,R1),=C'CAT'   WANT CATALOG WORK?
         BE    ROUTER3
         CLC   0(3,R1),=C'CRA'   WANT CRA WORK?
         BNE   ROUTER4
         TM    CRAACB+48,X'10'   IS THERE A CRA ACB OPENED?
         BO    ROUTER2
         MVI   CRAACB+50,X'04'
         OPEN  (CRAACB,OUTPUT)   OPEN CRA
         LTR   R15,R15
         BZ    ROUTER2
         LA    R1,MSG45
         BAL   R15,WRITE
         B     ROUTER
ROUTER2  LA    R9,CRAACB
         ST    R9,LOWRPL+24      CHANGE RPL TO CRA
         OI    FLAG2,CRAOK
         LR    R8,R1
         LA    R1,MSG46
         BAL   R14,WRITE
         L     R1,R8
         B     ROUTER4
ROUTER3  LA    R9,CATACB
         ST    R9,LOWRPL+24      CHANGE RPL TO CATALOG
         NI    FLAG2,X'FF'-CRAOK
         LR    R8,R1
         LA    R1,MSG47
         BAL   R14,WRITE
         LR    R1,R8
ROUTER4  CLC   0(3,R1),=C'DIS'  DISPLAY ON CONSOLE
         BE    PRINT
         CLC   0(3,R1),=C'PRI'
         BE    PRINT             PRINT COMMAND PRINT'S CIS
         CLC   0(3,R1),=C'END'
         BE    EXIT              END COMMAND DOES EXIT PROCESSING
         CLC   0(3,R1),=C'MAP'
         BE    MAP               WANTS ANALIZE OF CATALOG
         B     ROUTER            COMMAND INVALID, TRY AGAIN
         SPACE 3
**********************************************************************
* GETINPUT WILL GET DATA FROM SYSIN OR OPERATOR.  REG1 AT ENTRY      *
* HAS THE MESSAGE TO BE ISSUED.  IF INPUT IS NOT SYSIN, PROMPT WILL  *
* BE CALLED TO GET THE INPUT FROM THE OPERATOR.  REG1 AT ENTRY HAS   *
* ADDRESS OF PROMPT MESSAGE.  REG1 AT EXIT POINTS TO INPUT.          *
**********************************************************************
GETINPUT ST    R14,RETURN        SAVE RETURN ADDRESS
         LR    R15,R1
         ICM   R3,15,WORK2       GET CURRENT INPUT LOCATION
         BNZ   SCAN1             GOT IT OK, START SCANING FOR BLANK
GETNEXT  LR    R1,R15
         TM    SYSIN+48,X'10'    IS THERE A SYSIN DATA SET?
         BO    GETNEXT1          YES, DO A SAM GET TO READ THE CARD.
         BAL   R14,PROMPT        NO, GO GET THE INPUT FROM THE OPERATOR
         MVC   COMMAND(80),REPLY
         B     GOTNEXT
GETNEXT1 XC    COMMAND,COMMAND   CLEAR INPUT AREA
         GET   SYSIN,COMMAND     READ A CARD INTO REPLY
GOTNEXT  LA    R1,COMMOUT+2      SET R1 FOR A WRITE CALL
         BAL   R14,WRITE
         LA    R3,COMMAND        SET THE SCAN POINTER
         TM    0(R3),X'BF'       IS THE FIRST BYTE IN NON BLANK?
         BZ    SCAN2             YES, NEED TO SCAN FOR DATA
         LR    R1,R3             HAVE ALREADY FOUND DATA
         ST    R1,WORK2
         L     R14,RETURN
         BR    R14
SCAN1    LA    R4,COMMAND+70     LOOK FOR THE A BLANK IN THE INPUT
         SR    R4,R3             DETERMINE THE AMOUNT OF BYTES TO DO
         EX    R4,TRT2           TRANS AND TEST INPUT TO BLANK
         BC    10,GETNEXT        IF HIT END OF LINE, READ NEXT CARD
         LR    R3,R1
SCAN2    LA    R4,COMMAND+70     LOOK FOR A NON-BLANK IN THE INPUT
         SR    R4,R3             FIND START TRT POINT
         EX    R4,TRT1           TRT FOR NON-ZERO
         ST    R1,WORK2          SAVE THE CURRENT SCAN POINTER
         BC    10,GETNEXT        NO DATA FOUND, READ NEXT CARD
         L     R14,RETURN        GOT DATA OK, RETURN
         BR    R14
TRT1     TRT   0(0,R3),XLATE     USED TO LOCATE NON-BLANKS
TRT2     TRT   0(0,R3),TRTABLE2  USED TO LOCATE BLANKS
         SPACE 3
***********************************************************************
* REQUEST IS CALLED WITH REG0 HAVEING THE REQUEST CODE AND REG1 HAS   *
* THE RPL ADDRESS.  THE RPL OPTIONS AND KEY VALUES ARE SET BY THE     *
* CALLER OF THIS ROUTINE.  IF AN ERROR OCCURS, CONTROL IS RETURNED    *
* TO THE CALLER WITH REG15 NON-ZERO.                                  *
***********************************************************************
REQUEST  STM   R1,R14,SNAPSAVE   SAVE RETURN ADDRESS
         L     R15,CATACB+8      GET ADDRESS OF IDA019R1
         BALR  R14,R15           GO TO VSAM
         LM    R1,R14,SNAPSAVE
         LTR   R15,R15           ANY ERRORS?
         BZR   R14               NO, RETURN
         CLC   13(3,R1),=X'080004' EOF IS OK
         BER   R14               RETURN WITH OK ERROR
         TM    STATUS,NRFOK      IS A NO RECORD FOUND AN OK ERROR?
         BZ    REQERR            NO, CONTINUE
         CLC   13(3,R1),=X'080010'
         BER   R14               RETURN TO CALLER
         CLC   13(3,R1),=X'080020'
         BER   R14
REQERR   LR    R2,R1             SAVE RPL ADDRESS
         ICM   R0,7,13(R2)       GET ERROR CODE FROM RPL
         BAL   R14,CONVERT
         MVI   OUTLINE,X'40'
         MVC   OUTLINE+1(124),OUTLINE
         MVC   OUTLINE+2(33),MSG6
         MVC   OUTLINE+24(6),UNPACK+2
         CLI   23(R13),X'00'     WAS REQUEST A GET?
         BNE   REQERR2
         MVC   OUTLINE+36(3),=C'GET'
         LA    R6,OUTLINE+40
         B     REQERR1
REQERR2  CLI   23(R13),X'01'     WAS REQUEST A PUT?
         BNE   REQERR3
         MVC   OUTLINE+36(3),=C'PUT'
         LA    R6,OUTLINE+40
         B     REQERR1
REQERR3  CLI   23(R13),X'03'     WAS REQUEST A POINT?
         BNE   REQERR4
         MVC   OUTLINE+36(5),=C'POINT'
         LA    R6,OUTLINE+42
         B     REQERR1
REQERR4  CLI   23(R13),X'04'     WAS REQUEST AN ENDREQ?
         BNE   REQERR5
         MVC   OUTLINE+36(6),=C'ENDREQ'
         LA    R6,OUTLINE+43
         B     REQERR1
REQERR5  CLI   23(R13),X'05'     WAS REQUEST AN ERASE?
         BNE   REQERR6
         MVC   OUTLINE+36(5),=C'ERASE'
         LA    R6,OUTLINE+42
         B     REQERR1
REQERR6  CLI   23(R13),X'06'     WAS REQUEST A VERIFY?
         BNE   REQERR7
         MVC   OUTLINE+36(6),=C'VERIFY'
         LA    R6,OUTLINE+43
         B     REQERR1
REQERR7  SR    R0,R0
         IC    R0,23(R13)
         BAL   R14,CONVERT
         MVC   OUTLINE+36(2),UNPACK+6
         MVC   OUTLINE+39(3),=C'TYP'
         LA    R6,OUTLINE+41
REQERR1  MVC   0(7,R6),=C'REQUEST'
         CLC   13(3,R1),=X'080010'   IS THIS A NRF?
         BNE   REQERR8
         MVC   OUTLINE+24(17),=C'NO RECORD FOUND. '
         LA    R6,OUTLINE+32
REQERR8  LA    R1,OUTLINE        PROMPT MAYBE CALLED
         TM    41(R2),KEY        KEYED REQUEST?
         BO    ERRCHK1
         MVC   9(4,R6),=C'RBA='
         L     R4,36(R2)         GET RBA ADDRESS
         L     R0,0(R4)
         BAL   R14,CONVERT
         MVC   13(8,R6),UNPACK
         LA    R4,OUTLINE-20
         SR    R6,R4
         STH   R6,OUTLINE
         B     ERRCHK3
ERRCHK1  MVC   9(4,R6),=C'KEY='
         SR    R9,R9
         LH    R9,16(R2)        GET KEY LENGTH
         L     R7,36(R2)        GET KEY ADDRESS
         EX    R9,MOVE10
         CLI   0(R7),X'00'      WAS KEY FOR A LOW CI?
         BNE   ERRCHK2
         L     R0,0(0,R7)       MUST CONVERT KEY TO PRINTABLE DATA
         BAL   R14,CONVERT
         MVC   13(8,R6),UNPACK
         LA    R9,8
ERRCHK2  AR    R6,R9
         LA    R9,OUTLINE-19
         SR    R6,R9
         STH   R6,OUTLINE
ERRCHK3  LA    R1,OUTLINE
         BAL   R14,WRITE
         TM    SYSIN+48,X'10'   NEED TO ASK ABOUT ABENDING?
         BO    ERRCHK9          NO, JUMP OVER PROMPTS
ERRCHK4  LA    R1,MSG24
         NI    STATUS,X'FF'-WRT
         BAL   R14,PROMPT
         OI    STATUS,WRT
         CLI   0(R1),C'A'      WANT ABEND?
         BE    ABEND
         CLI   0(R1),C'S'      WANT TO STOP?
         BE    EXIT
         CLI   0(R1),C'C'      WANT TO CONTINUE?
         BNE   ERRCHK4
ERRCHK9  LA    R15,8
         LM    R1,R14,SNAPSAVE
         BR    R14              RETURN TO CALLER WITH ERROR
ABEND    ABEND 888,DUMP
MOVE10   MVC   13(0,R6),0(R7)
         SPACE 3
***********************************************************************
* GETCI IS CALLED TO READ IN THE CI AS GIVEN IN THE 2ND OPERAND OF A  *
* COMMAND.  THIS MAY BE DSN=, CI=, OR RBA=.  DSN AND CI ARE READ IN   *
* WITH KEY ACCESS, RBA IS READ IN WITH RBA ACCESS.  THE GET IS A GET  *
* UPD REQUEST.                                                        *
***********************************************************************
GETCI    STM   R0,R14,ASSOC+72
         SR    R15,R15
         XC    PACKIN,PACKIN
         LR    R0,R15
         LR    R7,R1
         LA    R8,3(R1)          POINT TO DATA FOR CI=
         CLI   0(R7),C'C'
         BE    GETC
         CLI   3(R7),C'='        VALID INPUT?
         BNE   GETCIBAD
         LA    R8,1(R8)          POINT TO DATA FOR RBA OR DSN
GETC     TRT   0(45,R8),TRTABLE2 FIND END OF DATA
         CR    R1,R8             ANY DATA FOUND?
         BE    GETCIBAD          NO, BAD INPUT
         SR    R1,R8             R1 HAS INPUT LENGTH
         CLI   0(R7),C'D'        DSN GET?
         BE    GETDSN
GETRBA   BCTR  R1,R0
         EX    R1,MOVE4          MOVE DATA TO PACK FIELD
         BAL   R14,PACK
         LH    R6,INLENGTH       GET PACK LENGTH
         L     R5,PACKIN
         SRL   R5,0(R6)          RIGHT JUSTIFY
         ST    R5,LOWREC
         CLI   0(R7),C'C'
         BNE   GETRBA2
         TM    FLAG2,CRAOK       CRA REQUEST?
         BZ    GETRBA1
         L     R9,LOWREC         YES, CONVERT TO RBA REQUEST.
         MH    R9,=X'0200'
         ST    R9,LOWREC
         B     GETRBA2
GETRBA1  NI    LOWRPL+41,X'FF'-CNV CI= IS A KEYED REQUEST
         OI    LOWRPL+41,KEY
GETRBA2  LA    R1,LOWRPL
         BAL   R14,REQUEST
         OI    LOWRPL+41,CNV       RBA= IS AN CNV REQUEST
         NI    LOWRPL+41,X'FF'-KEY
         B     GETCIOUT
GETDSN   STH   R1,HIRPL+16       SET THE KEY LENGTH
         MVC   HIKEY,0(R8)
         LA    R1,HIRPL
         SR    R0,R0
         BAL   R14,REQUEST
         B     GETCIOUT
GETCIBAD BCTR  R15,R0
GETCIOUT LM    R0,R14,ASSOC+72
         BR    R14
MOVE4    MVC   PACKIN(0),0(R8)
         SPACE 3
***********************************************************************
* WRITE  ON ENTRY REG1 POINTS TO A MESSAGE.  THE MESSAGE IS MOVED TO  *
* 'MESSAGES' AND THE MSG LENGTH SAVED INCASE A WTO IS NEEDED.  IT     *
* IS WRITTEN (PUT) AND IF EITHER THE ENTRY PROMPT WAS USED OR IF THE  *
* SYSIN DATA SET IS NOT OPENED, A WTO OR WTOR IS ISSUED.              *
***********************************************************************
WRITE    OI    STATUS,WRT
PROMPT   STM   R1,R14,WORKSAVE
         XC    MESSAGE,MESSAGE   CLEAR THE MESSAGE AREA
         LH    R10,0(R1)         GET THE MESSAGE LENGTH
         LA    R9,4(R10)
         STH   R9,WTORLNG        STORE UPDATED MESSAGE LENGTH
         LA    R9,MESSAGE
         AR    R9,R10            R9 HAS ADDRESS OF END OF MSG
         BCTR  R10,R0
         EX    R10,MOVE1         MOVE MESSAGE TO PUTPUT AREA
WRITE1   PUT   SYSPRINT,MESSAGE
         TM    SYSIN+48,X'10'    SYSIN OK?
         BO    WRITEXIT          YES, NO PROMPT.  EXIT
         TM    STATUS,NOWTO      REQUEST NO WTO
         BO    WRITEXIT
         XC    REPLY,REPLY       CLEAR INPUT AREA
         XC    ECB,ECB           CLEAR ECB
         MVI   WTOR,X'50'        SET REPLY LENGTH TO 80
         MVC   0(4,R9),ROTCDE    MOVE IN THE ROUTE CODE INFO
         LA    R1,WTOR
         TM    STATUS,WRT        IS THIS JUST A WRITE?
         BZ    PROMPT2
         LA    R1,WTORLNG        JUST A WTO
PROMPT2  SVC   35                ISSUE THE MESSAGE
         TM    STATUS,WRT
         BO    WRITEXIT          WRITE MODE RETURNS TO WRT
         WAIT  ECB=ECB           WAIT FOR A RESPONSE
         LA    R1,REPLY          SET INPUT POINTER
WRITEXIT NI    STATUS,X'FF'-WRT
         MVI   OUTLINE,X'40'
         MVC   OUTLINE+1(124),OUTLINE
         LM    R2,R14,WORKSAVE+4
         BR    R14
MOVE1    MVC   MESSAGE(0),2(R1)   MOVES MESSAGE TO OUTPUT AREA
         SPACE 3
**********************************************************************
* PACK TAKES THE DATA IN 'PACKIN' AND CONVERTS THE 8 BYTES OF        *
* EBCDIC TO 4 BYTES OF HEX.  FOR INSTANCE, X'C6C5F1F2F3F4F5F6' IN    *
* PACKIN WOULD BECOME X'FE12345600000000' IN PACKIN.                 *
**********************************************************************
         SPACE
PACK     STM   R0,R14,SAVE+8
         LA    R7,PACKIN           START ADDRESS
         SR    R8,R8
         LA    R6,10               LOOP COUNT
PACKERL  TM    0(R7),X'FF'         IS THIS BYTE BLANK?
         BZ    PACKERE+8           YES, END OF PACK
         TM    0(R7),X'30'         IS BYTE NUMERIC?
         BO    PACKERN
         NI    0(R7),X'0F'         STRIP OFF ALPA ZONE
         TR    0(1,R7),TABLE2
         B     PACKERE-4
PACKERN  NI    0(R7),X'0F'         JUST STRIP ZONE OFF FOR NUMERIC
         LA    R8,4(R8)            COUNT OF HALF BYTES PROCESSED
PACKERE  LA    R7,1(R7)            NEXT BYTE
         BCT   R6,PACKERL
         MVI   PACKIN+11,X'FF'
         PACK  PACKIN(11),PACKIN(11)
         MVC   PACKIN(8),PACKIN+2
         LM    R0,R1,PACKIN
         LA    R9,32
         SR    R9,R8
         STH   R9,INLENGTH         THE AMOUNT OF BYTES TO WRD JUSTIFY
         XC    PACKIN,PACKIN
         SLDL  R0,24(R0)           SHIFT OUT THE UNUSED BYTES
         STM   R0,R1,PACKIN
         LM    R0,R14,SAVE+8
         BR    R14
TABLE2   DC    X'000A0B0C0D0E0F'
         EJECT
***********************************************************************
* CONVERT TAKES THE VALUE IN REG0 AND PUTS IT INTO UNPACK AS EIDIC    *
* DATA.                                                               *
***********************************************************************
CVD      CVD   R0,UNPACK
         L     R0,UNPACK+4
         SRL   R0,4
CONVERT  ST    R0,UNPACK
         MVI   UNPACK+5,X'FF'
         UNPK  UNPACK(9),UNPACK(5)
         TR    UNPACK(8),TABLE-240
         BR    R14
         SPACE 3
**********************************************************************
* SNAP TAKES DATA POINTED TO BY REG1 FOR A LENGTH AS STATED IN REG 0 *
* AND ISSUES THE SNAP SVC.                                           *
**********************************************************************
SNAP     STM   R0,R14,SNAPSAVE   SAVE INPUT REGS
         L     R0,LOWRPL+64      GET THE RBA VALUE
         TM    STATUS,DISCMD     IS THIS A 'DISPLAY' COMMAND SNAP?
         BO    *+8
         OI    STATUS,NOWTO      NO, DON'T PUT OUTPUT TO OPERATOR
         BAL   R14,CONVERT
         MVC   SNAPLINE+34(6),UNPACK+2
         MVC   OUTLINE+2(53),SNAPLINE
         MVC   OUTLINE+74(6),=C' DATA '
         L     R9,LOWRPL+4       GET OLD PLH POINTER
         L     R8,52(R9)         GET DATA BUFC ADDRESS
         CLI   LOWRPL+2,GETIX    WAS IT AN INDEX RESUEST?
         BNE   SNAPB1
         MVC   OUTLINE+75(31),=C'INDEX LEVEL = XX FREE CI''S = XX'
         SR    R8,R8
         IC    R8,LOWREC+16      GET INDEX LEVEL
         LR    R0,R8
         BAL   R14,CONVERT
         MVC   OUTLINE+89(2),UNPACK+6
         IC    R8,LOWREC+19      GET FREE SPACE POINTER
         SH    R8,=H'24'         LESS INDEX HEADER
         LR    R0,R8
         BAL   R14,CONVERT
         MVC   OUTLINE+104(2),UNPACK+6  EDIT COUNT OF FREE CI'S
         L     R8,188(R9)        GET INDEX BUFC ADDRESS
SNAPB1   L     R8,16(R8)         GET CPA ADDRESS
         ICM   R0,15,55(R8)      GET CCHH
         BAL   R14,CONVERT
         MVC   OUTLINE+46(6),=C'CCHHR='
         MVC   OUTLINE+52(8),UNPACK
         SR    R0,R0
         IC    R0,59(R8)         GET THE 'R' VALUE
         BAL   R14,CONVERT
         MVC   OUTLINE+60(2),UNPACK+6
         MVI   OUTLINE+1,X'7A'   HEADER LINE LENGTH
         SR    R0,R0
         C     R0,LOWREC+508
         BNE   SNAP1
         C     R0,LOWREC
         BNE   SNAP1
         MVC   OUTLINE+65(6),=C' SEOF '
         B     SNAP4
SNAP1    CLI   LOWREC+44,C'F'    IS THIS A FREE RECORD?
         BNE   SNAP3             NO, PRINT IT AS NORMAL
         ICM   R0,7,LOWREC+45
         BAL   R14,CONVERT
         MVC   OUTLINE+65(24),=C' FREE RECORD, POINTER = '
         MVC   OUTLINE+89(6),UNPACK+2
SNAP2    L     R0,LOWREC
         BAL   R14,CONVERT
         MVC   OUTLINE+9(8),UNPACK
         LA    R1,OUTLINE
         BAL   R14,WRITE
         B     SNAP5             GO PUT OUT A SPACE LINE
SNAP3    CLC   LOWREC(80),LOWREC+1 IS THIS CI EMPTY????
         BNE   SNAP4
         MVC   OUTLINE+72(21),=C' EMPTY RECORD. CIDF = '
         L     R0,LOWREC+508     GET FULL CIDF VALUE
         BAL   R14,CONVERT
         MVC   OUTLINE+93(8),UNPACK
         B     SNAP2
SNAP4    LA    R1,SNAPLGN
         BAL   R14,WRITE
         LA    R1,SNAPLGN
         BAL   R14,WRITE
         MVC   OUTLINE+4(L'MSGK1),MSGK1
         LA    R1,SNAPLGN
         BAL   R14,WRITE
         MVC   OUTLINE+4(L'MSGK2),MSGK2
         LA    R1,SNAPLGN
         BAL   R14,WRITE
         LA    R1,SNAPLGN
         BAL   R14,WRITE
         L     R9,SNAPSAVE+4     R9 POINTS TO CURRENT INPUT DATA
         BAL   R14,DCMPRSKY
SNAP5    TM    STATUS,DISCMD    DISPLAY?
         BO    SNAPEND
         PUT   SYSPRINT,OUTLINE
SNAPEND  NI    STATUS,X'FF'-NOWTO
         LM    R0,R14,SNAPSAVE
         BR    R14               RETURN TO CALLER
         EJECT
**********************************************************************
* PRINT WILL PRINT THE CATALOG INDEX OR A CI OF DATA                 *
**********************************************************************
PRINT    MVC    MSG23+35(7),=C'PRINT. '
         NI     LOWRPL+41,X'FF'-UPD   TURN OFF UPD FOR THE GET
         XC     ASSOC(4),ASSOC   CLEAR THE ASSOC AREA
         XC     LOWREC+505(7),LOWREC+505
         CLI    0(R1),C'P'       IS THIS A PRINT COMMAND?
         BE     *+14
         MVC    MSG23+35(7),=C'DISPLAY'
         OI     STATUS,DISCMD    DISPLAY GOES TO OPERATOR
         LA     R1,MSG23         CI NUMBER OR NAME TO BE PRINTED
         BAL    R14,GETINPUT
         CLI    0(R1),C'E'       END REQUESTED?
         BE     ROUTER
         CLI    0(R1),C'I'       REQUEST CATALOG INDEX PRINT?
         BNE    PRINT0           NO, CHECK ALL REQUEST
         TM     FLAG2,CRAOK      IS THIS A CRA PROCESSING?
         BO     ADD1             YES, HAVE ERROR
         B      PRINTIX
PRINT0   CLI    0(R1),C'A'       ALL REQUEST?
         BNE    PRINT1           NO, GO DO DATA PRINT
         OI     STATUS,PRTALL
         TM     STATUS,DISCMD    DISPLAY COMMAND?
         BZ     PRINTIX          NO, GO DO THE PRINT
         LA     R1,MSG19         CAN DO DISPLAY ALL
         BAL    R14,WRITE
         B      ROUTER
PRINT1   CLI    4(R1),C'*'       SPECIAL PRINT?
         BNE    PRINT1A
         OI     STATUS,PRTBOTH
         MVC    4(44,R1),5(R1)   GET RID OF THE '*'
PRINT1A  BAL    R14,GETCI
         LTR    R15,R15          GET THE CI OK?
         BNZ    ROUTER
         CLI    0(R1),C'D'       ID THIS A DSN GET?
         BNE    PRINT3
         TM     FLAG2,CRAOK
         BO     ADD2
         TM     STATUS,DISCMD    IS THIS A DISPLAY?
         BZ     PRINT2A          NO, DON'T DO SHORT PRINT
         MVI    OUTLINE+1,X'2F'
         MVC    OUTLINE+2(44),HIKEY
         ICM    R0,7,HIKEY+44
         BAL    R14,CONVERT
         TRT    OUTLINE+2(45),TRTABLE2
         MVC    1(6,R1),UNPACK+2
         LA     R1,OUTLINE
         BAL    R14,WRITE
         NI     STATUS,X'FF'-NOWTO
         TM     STATUS,PRTBOTH
         BZ     ROUTER
PRINT2A  OI     STATUS,NOWTO
         ICM    R9,7,HIKEY+44    SAVE THE RECORDS RBA
         MVC    LOWREC(4),HIRPL+64
PRINT2   MVI    LOWREC+3,X'00'   MAKE SURE THE RBA IS ON A CI BOUNDRY
         NI     LOWREC+2,X'FE'
         SR     R0,R0
         LA     R1,LOWRPL
         BAL    R14,REQUEST
         LTR    R15,R15
         BNZ    ROUTER
PRINT3   LA     R0,X'200'
         LA     R1,LOWREC
         BAL    R14,SNAP
         TM     STATUS,PRTALL    IS THIS AN ALL DEAL?
         BO     PRINTALL         YES
         TM     STATUS,PRTBOTH   NEED TO PRINT MORE?
         BZ     ROUTER
         CLI    LOWREC,X'00'     HAVE WE GOTTEN A LOW CI YET?
         BE     PRINT4           YES, TRY ASSOC NEXT
         MH     R9,=X'0200'
         ST     R9,LOWREC
         B      PRINT2
PRINT4   ICM    R15,7,ASSOC      HAVE WE GOT THE ASSOC YET?
         BNZ    *+8              NO, GO FIND THE ASSOC GOP'S
         BAL    R14,FINDGOPS
         CLI    ASSOC,X'FF'      END OF GOP'S?
         BE     PRINT6
         SR     R9,R9
         LH     R9,ASSOC         GET THE NEXT ASSOC
         MVC    ASSOC(178),ASSOC+2
PRINT5   MH     R9,=X'0200'
         ST     R9,LOWREC
         B      PRINT2
PRINT6   XC     ASSOC,ASSOC
         ICM    R9,15,EXTENTON   IS THERE AN EXTENTION POINTER?
         BNZ    PRINT5           YES, DO IT NEXT
         B      ROUTER
PRINTALL C      R10,DHIURBA      END OF DATA?
         BE     ROUTER
         CLC    LOWRPL+64(4),=X'00000600'  IS THIS CI3?
         BNE    PRTALL1
         MVC    WORK3(8),LOWREC+61  GET LK HIU RBA AND LK HIALLOC
PRTALL1  ICM    R8,15,WORK3      DO WE HAVE THE RBA?
         BZ     PRTALL2          NO, MUST NOT HAVE READ IN CI 3 YET
         C      R8,WORK3+4       IS HI KEY AND HI ALL THE SAME?
         BE     PRTALL2          YES, NO SKIPPING TO BE DONE.
         C      R8,LOWRPL+64     AND ARE WE AT THE LK HIUSED RBA?
         BNE    PRTALL2
         L      R10,WORK3+4      YES, JUMP OVER TO HIGH KEY RANGE
PRTALL2  ST     R10,LOWREC
         LA     R10,512(R10)     FOR NEXT DATA RECORD
         B      PRINT2
         SPACE  1
         OI     STATUS,PRTALL
PRINTIX  SR     R10,R10
         MVC    DHIURBA,=X'FFFFFFFF'
         TM     FLAG2,CRAOK
         BO     PRINTALL
         L      R10,CATACB+4     GET AMBL POINTER
         L      R9,56(R10)       THEN THE AMB
         L      R9,20(R9)        THEN THE AMDSB
         MVC    SSRBA(4),32(R9)  SAVE THE RBA OF THE FIRST SS
         L      R10,52(R10)      GET THE DATA AMB
         L      R10,20(R10)      THEN THE AMDSB
         L      R10,36(R10)      THEN THE ARDB
PRINTIX2 TM     1(R10),X'08'     FIND THE EOD ARDB
         BO     *+12
         L      R10,4(R10)       NEXT ARDB
         B      PRINTIX2
         MVC    DHIURBA(4),12(R10) SAVE DATA HIURBA
         SR     R10,R10          R10 WILL HAVE CURRENT RBA VALUE
PRINTIX3 ST     R10,LOWREC
         LA     R1,LOWRPL
         LA     R0,GETIX         DO THE GET INDEX REQUEST
         BAL    R14,REQUEST      GO READ IN THE INDEX
         LA     R1,LOWREC        POINT TO THE RECORD
         LA     R0,512
         BAL    R14,SNAP         PRINT THIS RECORD
         CLI    LOWREC+16,X'01'  IS THIS A SS?
         BNE    PRINTIX4         NO, NOT NEAR DONE YET
         ICM    R10,15,LOWREC+8  YES, GET NEXT SS RBA
         BNZ    PRINTIX3         GO PRINT IT
         TM     STATUS,PRTALL    IS THIS AN ALL PRINT?
         BZ     ROUTER           NO, MUST BE FINISHED
         SR     R10,R10
         B      PRINTALL         GO PRINT THE DATA FOR ALL
PRINTIX4 LA     R10,512(R10)     HIGN LEVEL INDEX, ADD 200 TO RBA
         CLC    LOWREC(4),LOWREC+1
         BNE    PRINTIX3
         L      R10,SSRBA        END OF HIGH LEVEL, DO SS
         B      PRINTIX3
         SPACE 3
         EJECT
**********************************************************************
* MAP PRINTS THE STATUS OF EACH CI.                                  *
**********************************************************************
MAP      TM    FLAG2,CRAOK       WANT MAP OF CRA?
         BNZ   ADD1
         LA    R1,SNAPLGN        FIRST, PRINT HEADER LINE
         MVI   OUTLINE,C'*'
         MVC   OUTLINE+1(79),OUTLINE
         BAL   R14,WRITE
         BAL   R10,MAP11
         MVI   LOWREC+2,X'04'    SET KEY TO GET 'C' RECORD
         BAL   R10,MAP12
         MVC   OUTLINE+10(44),LOWREC+49
         XC    UNPACK,UNPACK
         LA    R1,66
         SVC   11
         LR    R0,R1             GET THE DATE
         BAL   R14,CONVERT
         MVC   OUTLINE+60(6),=C'DATE ='
         MVC   OUTLINE+67(2),UNPACK+2
         MVI   OUTLINE+69,C'.'
         MVC   OUTLINE+70(3),UNPACK+4
         MVI   OUTLINE,C'*'
         MVI   OUTLINE+79,C'*'
         LA    R1,SNAPLGN
         BAL   R14,WRITE
         BAL   R10,MAP11
         MVI   LOWREC+2,X'06'    SET KEY TO GET 'L' RECORD
         BAL   R10,MAP12         READ IN THE CCR RECORD
         MVC   OUTLINE+4(L'MSG27),MSG27
         MVC   OUTLINE+56(10),=C'MOD DATE ='
         L     R0,LOWREC+492
         BAL   R14,CONVERT
         MVC   OUTLINE+67(2),UNPACK+3
         MVI   OUTLINE+69,C'.'
         MVC   OUTLINE+70(3),UNPACK+5
         MVI   OUTLINE,C'*'
         MVI   OUTLINE+79,C'*'
         LA    R1,SNAPLGN
         BAL   R14,WRITE
         MVC   OUTLINE+8(L'MSG28),MSG28
         ICM   R0,7,LOWREC+45
         BAL   R10,MAP10         PRINT THE HI ALLOC RBA
         MVC   OUTLINE+8(L'MSG29),MSG29
         ICM   R0,7,LOWREC+48
         BAL   R10,MAP10         PRINT THE HI USED RBA
         MVC   OUTLINE+8(L'MSG30),MSG30
         ICM   R0,7,LOWREC+51
         BAL   R10,MAP10         PRINT THE FREE CI COUNT
MAP1     MVI   HIKEY,X'40'
         MVI   HIRPL+40,DIR+KGE+GEN
         LA    R0,POINT
         LA    R1,HIRPL
         BAL   R14,REQUEST
         LTR   R15,R15
         BNZ   ROUTER
         MVI   HIRPL+40,DIR+GEN
         L     R8,HIRPL+4        GET PLH ADDRESS
         L     R8,188(R8)        GET INDEX BUFFC ADDRESS
         MVC   SSRBA(4),8(R8)    SAVE RBA OF HI LEVEL SS
         L     R8,CATACB+4       NOW GET HI DATA RBA
         L     R8,52(R8)         GET D-AMB
         L     R8,20(R8)         GET AMDSB
         MVC   WORK1(2),12(R8)
         L     R8,36(R8)         GET ARDB
         TM    1(R8),X'08'       IS THIS THE EOD ARDB?
         BO    *+12
         L     R8,4(R8)
         B     *-16
         MVC   DHIURBA(4),16(R8) SAVE HI ALLOCATED RBA
         MVC   KEYSAVE,HIRPL+64  SAVE RBA OF FIRST HI DATA RECORD
         L     R8,CATACB+4       GET AMBL
         L     R8,56(R8)         GET I-AMB
         L     R8,20(R8)         GET AMDSB
         MVC   LOWREC(4),32(R8)  SET 1ST SS RBA
         SR    R9,R9             LOW CA COUNT
         SR    R8,R8             LOW CI UNUSED COUNT
         SR    R7,R7             HI CA COUNT
         SR    R6,R6             HI CI UNUSED COUNT
         MVI   LOWRPL+40,DIR
MAP2     SR    R5,R5
         LA    R0,GETIX
         LA    R1,LOWRPL
         BAL   R14,REQUEST       READ IN A INDEX RECORD
         LTR   R15,R15
         BNZ   MAP5
         LH    R5,LOWREC+18      GET THE FREE CI COUNT
         SH    R5,=X'0018'
         TM    FLAG1,HILEVEL     ARE WE DOING HIGH LEVEL SS YET?
         BO    MAP3
* LOOKING AT LOW LEVEL SS
         AR    R8,R5
         LA    R9,1(R9)
         B     MAP4
MAP3     AR    R6,R5
         LA    R7,1(R7)
MAP4     CLC   LOWREC+8(4),SSRBA
         BNE   *+8
         OI    FLAG1,HILEVEL
         ICM   R5,15,LOWREC+8
         ST    R5,LOWREC
         BNZ   MAP2              GO READ IN THE NEXT INDEX RECORD
* NOW HAVE READ IN ALL THE INDEX RECORDS
         MVC   OUTLINE+8(L'MSG34),MSG34
         LR    R0,R8
         BAL   R10,MAP10
         MVC   OUTLINE+8(L'MSG32),MSG32
         LR    R0,R9
         BAL   R10,MAP10
         MVI   LOWREC+2,X'0C'    SET KEY TO GET 'E' RECORD
         BAL   R10,MAP12         READ IN THE CCR RECORD
         BAL   R10,MAP13         CAL ALLOCATION UNITS
         MVC   OUTLINE+8(L'MSG32A),MSG32A
         LR    R0,R9
         BAL   R10,MAP10
         MVC   OUTLINE+4(L'MSG40),MSG40
         BAL   R10,MAP11
         MVC   OUTLINE+8(L'MSG33),MSG33
         LR    R0,R7
         BAL   R10,MAP10
         MVI   LOWREC+2,X'10'    SET KEY TO GET 'E' RECORD
         BAL   R10,MAP12         READ IN THE CCR RECORD
         BAL   R10,MAP13         CALC ALLOCATION UNITS
         MVC   OUTLINE+8(L'MSG33A),MSG33A
         LR    R0,R9
         BAL   R10,MAP10
         MVC   OUTLINE+8(L'MSG34),MSG34
         LR    R0,R6
         BAL   R10,MAP10
         MVC   LOWREC(4),KEYSAVE RESTORE 1ST HI CI RBA
MAP5     NI    FLAG1,X'FF'-HILEVEL
         SR    R3,R3             WORK REG
         SR    R4,R4             CI COUNT
         SR    R5,R5             FREE SPACE COUNT
         SR    R7,R7             COUNT USED BUT EMPTY CI'S
         SR    R8,R8             USED SPACE COUNT
         SR    R9,R9
MAP6     LH    R9,WORK1          GET COUNT OF CI'S PER CA
         ICM   R2,15,SSRBA       GET POINTER TO SS SET
         BZ    MAP9
         ST    R2,LOWREC
         LA    R0,GETIX
         LA    R1,LOWRPL
         BAL   R14,REQUEST
         LTR   R15,R15
         BNZ   MAP9
         MVC   LOWREC(4),LOWREC+4  GET DATA RBA
         MVC   SSRBA(4),LOWREC+8   GET NEXT SS
MAP7     SR    R0,R0             DATA GET REQUEST
         LA    R1,LOWRPL
         BAL   R14,REQUEST       GET THE DATA CI
         LTR   R15,R15
         BNZ   MAP9
         LA    R7,1(R7)          POSSIABLE COUNT OF NOT USED CI'S
         ICM   R3,3,LOWREC+508   ANY USED SPACE IN THE CI?
         BZ    MAP8
         AR    R8,R3
         AH    R5,LOWREC+510
         BCTR  R7,R0             REDUCE COUNT OF NOT USED CI'S
MAP8     LA    R4,1(R4)          COUNT OF CI'S
         L     R2,LOWRPL+64
         LA    R2,512(R2)
         ST    R2,LOWREC
         BCT   R9,MAP7           DO FOR COUNT OF CI IN A CA
         B     MAP6              END OF CA, TRY NEXT CA
MAP9     LR    R0,R4
         MVC   OUTLINE+8(L'MSG37),MSG37
         BAL   R10,MAP10
         LR    R0,R8             NOW DO USED SPACE
         MVC   OUTLINE+8(L'MSG36),MSG36
         BAL   R10,MAP10
         LR    R0,R5             NOW DO FREE SPACE
         MVC   OUTLINE+8(L'MSG35),MSG35
         BAL   R10,MAP10
         MVC   OUTLINE+8(L'MSG38),MSG38
         SR    R7,R6
         LR    R0,R7
         BAL   R10,MAP10
         NI    STATUS,X'FF'-NRFOK
         MVI   OUTLINE,C'*'
         MVC   OUTLINE+1(79),OUTLINE
         BAL   R10,MAP11
         B     ROUTER            ASSUMED END
MAP10    LR    R1,R0             SAVE THE INPUT REG
         BAL   R14,CVD
         MVC   OUTLINE+40(6),UNPACK+2
         LR    R0,R1
         BAL   R14,CONVERT
         MVI   OUTLINE+38,C'='
         MVI   OUTLINE+48,C'('
         MVC   OUTLINE+49(6),UNPACK+2
         MVI   OUTLINE+55,C')'
MAP11    MVI   OUTLINE,C'*'
         MVI   OUTLINE+79,C'*'
         LA    R1,SNAPLGN
         BAL   R14,WRITE
         BR    R10               RETURN TO CALLER
MAP12    XC    LOWREC+3(255),LOWREC+3
         LA    R1,LOWRPL
         SR    R0,R0
         BAL   R14,REQUEST       READ IN THE CCR RECORD
         LTR   R15,R15
         BNZ   ROUTER
         BR    R10               RETURN TO CALLER
MAP13    CLI   LOWREC+58,X'03'  TEST FOR TYPE (GROUP) CODE = 3
         BE    *+6
         DC    H'0'
         SR    R8,R8
         SR    R9,R9
         ICM   R9,X'03',LOWREC+117 LOAD NUMBER OF TRACKS ALLOCATED
         LH    R1,LOWREC+94     LOAD NUMBER OF TRKS/AU
         DR    R8,R1 RESULT IS TOTAL A.U.
         BR    R10               RETURN TO CALLER
**********************************************************************
* FINDGOPS USING THE RECORD IN LOWREC, WILL FIND ALL THE GOPS (SOFS) *
* FOR THE RECORD AND PLACE THEM IN ASSOC.  A X'FF' MARKS THE END.    *
**********************************************************************
FINDGOPS STM   R0,R14,SNAPSAVE
         LA    R14,FIND1
         LA    R9,ASSOC
         MVC   KEYSAVE,LOWREC    SAVE INPUT RECORD KEY
         XC    ASSOC,ASSOC       CLEAR THE ASSOC DATA
         CLI   LOWREC+44,C'F'    IS THIS A FREE RECORD?
         BE    FINDOUT
         CLI   LOWREC+44,C'E'    IS THIS A EXTENTION RECORD?
         BE    FINDOUT
         CLI   LOWREC+44,C'W'    IS THIS A VOLUME EXTENTION RECORD?
         BE    FINDOUT
FGOPS1   SR    R8,R8             COMMON ROUTINE USED BY PUNCH ALSO
         IC    R8,LOWREC+48      GET OFFSET TO VARIABLE DATA
         LA    R8,LOWREC(R8)     POINT TO EXTENTION POINTER
         CLI   LOWREC+44,C'B'    IS THIS A BASE GDG?
         BNE   FGOPS2            NO, R8 POINTS TO FIRST GOP
         LA    R7,2              YES, GET PAST THE DIFF STRING
         AH    R7,0(R8)          R8 POINTS TO DIFF LENGTH
         AR    R8,R7             R8 NOW POINTS TO GOP
FGOPS2   MVC   EXTENTON+2(2),1(R8)
         LA    R8,5(R8)          POINT TO FIRST GOP
         SR    R7,R7
         ICM   R7,1,0(R8)        R7 HAS COUNT OF GOPS
         BZ    FINDOUT           NO GOPS, GET OUT
         LR    R5,R7
         LA    R8,1(R8)          R8 POINTS TO GOPS
         MVI   GOPSIZE+1,X'05'   SET GOP SIZE TO 5 BYTES EACH
         CLI   LOWREC+44,C'V'    IS THIS A VOLUME RECORD?
         BE    GOPS6             YES, GOP ARE 6 BYTES
         CLI   LOWREC+44,C'W'    IS THIS A VOLUME REC EXTENTION
         BNE   *+8
GOPS6    MVI   GOPSIZE+1,X'06'   6 BYTE GOP'S
         MH    R5,GOPSIZE
         AR    R5,R8             R5 NOW POINTS TO END OF GOPS
         BR    R14               MAY WANT TO RETURN TO PUNCH
FIND1    TM    3(R8),X'40'       HAVE THIS SET BEEN DELETED?
         BO    FIND1B+4          YES, TRY NEXT
         TM    3(R8),X'80'       IS THIS AN EXTENTION POINTER?
         BZ    FIND1A            NO, TRY NEXT
         MVC   0(2,R9),1(R8)     SAVE THE 2 BYTE POINTER
         B     FIND1B
FIND1A   MVN   PASSWORD(1),3(R8) GET THE NUMERIC VALUE
         CLI   PASSWORD,X'02'    IS THIS A ASSOC GOP?
         BNE   FIND1B+4
         ICM   R4,7,0(R8)        GET DISP TO GOP VALUE
         LA    R4,4(R4,R5)       POINT TO ASSOC CI POINTER
         MVC   0(2,R9),0(R4)     SAVE POINTER
FIND1B   LA    R9,2(R9)          POINT TO NEXT ASSOC SLOT
         AH    R8,GOPSIZE        POINT TO NEXT GOPS
         BCT   R7,FIND1          DO WHILE THERE ARE GOPS TO DO
         B     FINDOUT           FOUND COMPLETE LIST.
FINDOUT  MVI   0(R9),X'FF'       MARK END OF LIST
         LM    R0,R14,SNAPSAVE
         BR    R14
         TITLE 'IDA019RC - VSAM S C I B   R O U T I N E            '
DCMPRSKY EQU   *
         STM   R0,R15,DKSAVE           SAVE ALL REGS
         TM    0(R9),X'FF'             IS RECORD INITIALIZED?
         BZ    PRTMSGK3                NO, GO BACK
         LA    R5,DKWORK               LOAD WORK AREA ADDRESS
         L     R10,CATACB+4            LOAD AMD POINTER
         L     R10,AMBDSB(,R10)
         LH    R10,AMDKEYLN(,R10)
         STH   R10,IXSKLEN(,R5)
         SR    R3,R3                    CLEAR REGISTER
         SR    R2,R2                    CLEAR REGISTER
         IC    R2,IXHFLPLN(R9)          PICK UP F+L+POINTER LENGTH
         STC   R2,IXSEKON(R5)           SAVE IN WORK AREA
         OI    IXSBFLG(R5),X80          SET FLAG SHOWING SECTION SEARCH
         ICM   R3,X03,IXHLL(R9)         GET RECORD LENGTH FROM HEADER
         AR    R3,R9                    ADD TO BEGINNING ADD. OF BUFFER
         SR    R3,R2                    BACK UP OVER F,L, POINTER
         ST    R3,IXSLEP(R5)            SAVE LOW KEY ADDRESS
         SR    R3,R3                    CLEAR REG
         ICM   R3,X03,IXHSEO(R9)        GET OFFSET TO 1ST SECTION
         AR    R3,R9                    ADD BEGINNING ADD TO FORM TRUE
         SR    R15,R15                   ADDRESS
COMFN1   SR    R4,R4                    CLEAR REGISTERS
COMFN2   SR    R6,R6                     ...
         SR    R7,R7                     ...
COMFN3   ST    R3,IXSHEP(R5)            SAVE STARTING POINT
         IC    R4,IBFLPF(R3)            PICK UP F FIELD
         TM    IBFLPL(R3),XFF           IS THE L FIELD ZERO
         BZ    SCIB9                    YES, DISCONTINUE THIS SEARCH
         IC    R7,IBFLPL(R3)            GET LENGTH OF KEY
         SR    R3,R7                    MOVE POINTER TO BEGINNING OF
SCIB9    TM    IXSBFLG(R5),X80          IS THIS A SECTION SEARCH
         BO    SCIB10                   YES
         SR    R15,R15                  CLEAR REG  INDICATING SUCCESS
         TM    IXSNOSR(R5),XFF          IS HIT ENTRY A SPN RCD
         BNZ   SCIB12                   YES, GO ADJUST HIT POS.
         BAL   R14,PRTKEY              GO PRINT THE KEY
SCIB3    TM    IXSBFLG(R5),X80          F HIGHER, IS THIS SECT. SEARCH
         BZ    SCIB5                    NO, INNER SECT, SEARCH
SCIB4    OI    IXSBFLG(R5),X80          TURN ON SECT. SEARCH
*
*   THE FOLLOWING CODE IS REQUIRED TO TEST FOR END OF BUFFER, THAT IS,
*   NO MORE SECTIONS FOLLOW TO BE SEARCHED.  IF NOT END OF SECTION
*   POINTERS MUST BE UPDATED TO NEXT SECTION.  ALSO THE LOW KEY ADD.
*   OF THE NEXT SECTION MUST BE SAVED.  THE NO OF CHARACTERS WHICH HAVE
*   COMPARED EQUAL (HITS) IS ALSO SAVED FOR LATER USE IN SEARCHING
*   WITHIN THE SECTION.
*
         ICM   R4,X03,IXHLEO(R9) GET DISP. OF HIGH SECT.
         AR    R4,R9                    MAKE THAT A POINTER
         CR    R4,R3                    HAVE WE MOVED BEYOND END
         BNL   SCIB7                    YES, END OF THIS BUFFER
         L     R3,IXSHEP(R5)            POINT BACK TO OLD BASE
         LR    R7,R3                    GET SAME ADDRESS IN RW5
         IC    R6,IBFLPL(R3)            GET L FROM INDEX
         SR    R7,R6                    MOVE BACK TO KEY AREA
         SH    R7,HLF2                  MOVE TO POINTER
         ICM   R6,X03,DZ(R7)            PICK UP DISP. TO NEXT SECTION
         SR    R7,R2                    MOVE ADDRESS PAST POINT, L,F
         ST    R7,IXSLEP(R5)            SAVE LOW ENTRY OF SECT IN WORK
         SR    R3,R6                    UPDATE TO NEXT SECTION
         B     COMFN1                   BACK TO CONTINUE SEARCH
*
*   THE FOLLOWING CODE UPDATES POINTERS TO CONTINUE SEARCH
*   WITHIN A SECTION.  WE CANNOT EXIT WITHOUT LOCATING AN ENTRY
*   SINCE A SECTION SEARCH CAUSED US TO DO THE INNER SECTION SEARCH
*
SCIB5    L     R3,IXSHEP(R5)            START WITH ORIGINAL POINTER
         C     R3,IXSSEP(R5)            COMPARE TO SECTION POINTER
         BNH   SCIB4                     EQ OR LOW, BRANCH
         SR    R7,R7                    CLEAR REGISTER
         STC   R7,IXSNOSR(R5)           RESET SPN RCD CI COUNT
         LA    R7,C1                    INITIALIZE SPN RCD CNT
         IC    R6,IBFLPL(R3)            GET L VALUE
         SR    R3,R6                    BACK OVER KEY
SCIB6    SR    R3,R2                    BACK OVER POINTER,L,F
         B     COMFN2
*
*  BLOCK KEYS HAVE BEEN PRINTED
*
SCIB7    SR    R15,R15                  SET CODE
         LM    R0,R15,DKSAVE
         BR    R14                     RETURN
*
*   THE FOLLOWING CODE IS ENTERED WHEN A SECTION SEARCH HAS BEEN
*   TERMINATED BY A SATISFIED SEARCH.  AT THIS POINT IT IS NECESSARY
*   TO INITIALIZE FOR AN INNER SECTION SEARCH
*
SCIB10   EQU   *
         L     R6,IXSHEP(R5)            GET AND STORE
         ST    R6,IXSSEP(R5)             ADDRESS OF SECTION ENTRY
*                                        IN WORK AREA
         L     R3,IXSLEP(R5)            PICK UP ADDRESS OF 1ST. ENTRY
*                                       IN THIS SECTION
         XI    IXSBFLG(R5),X80          TURN OFF SECTION SEARCH
         LA    R7,C1                    RESET COUNT TO ONE
         B     COMFN2
*
*   THE FOLLOWING CODE IS ENTERED WHENEVER THE SEARCH WAS
*   SATISFIED BY A SPANNED RECORD ENTRY.  THE POINTER TO THE
*   HIT ENTRY IS ADJUSTED TO POINT TO THE RIGHTMOST CI OF
*   THE SPANNED RECORD ENTRY.
*
SCIB12   IC    R6,IXSNOSR(R5)           GET NO. OF SEG TO RIGHT
         IC    R7,IXSEKON(R5)           GET LENGTH OF F,L,PTR
         MR    R6,R6                    MULTIPLY
         L     R6,IXSHEP(R5)            GET HIT ENTRY
         AR    R6,R7                    MOVE ADDRESS TO RIGHT
         ST    R6,IXSHEP(R5)            END OF SPANNED ENTRY
*   SPANNED CODE NOT CHECKED OUT
         DC    H'0'
*
HLF2     DC    H'2'                     HALFWORD = 2
DZ       EQU   0                        DEFINE ZERO DISPLACEMENT
C1       EQU   1                        CONSTANT = 1
X03      EQU   X'03'                    MASK 03
X80      EQU   X'80'                    MASK 80
XFF      EQU   X'FF'                    MINUS 1
IDAIXSPL EQU   0
IXSKLEN  EQU   IDAIXSPL+14
IXSNOSR  EQU   IDAIXSPL+16
IXSBFLG  EQU   IDAIXSPL+17
IXSEKON  EQU   IDAIXSPL+18
IXSHEP   EQU   IDAIXSPL+20
IXSSEP   EQU   IDAIXSPL+24
IXSLEP   EQU   IDAIXSPL+28
IDAIXH   EQU   0
IXHLL    EQU   IDAIXH
IXHFLPLN EQU   IDAIXH+2
IXHLEO   EQU   IDAIXH+20
IXHSEO   EQU   IDAIXH+22
IDAIBFLP EQU   0
IBFLPF   EQU   IDAIBFLP
IBFLPL   EQU   IDAIBFLP+1
IDAAMDSB EQU   0
AMDKEYLN EQU   IDAAMDSB+8
IDAAMB   EQU   0
AMBDSB   EQU   IDAAMB+20
AMBEOVR  EQU   IDAAMB+24
DKSAVE   DC    18F'0'             DECOMPRESS ROUTINE SAVE AREA
DKWORK   DC    32X'00'
         SPACE 3
***********************************************************************
*        PRINT DECOMPRESSED KEY ROUTINE                               *
***********************************************************************
PRTKEY   EQU   *
         STM   R0,R14,PRTKEYSV
         LTR   R0,R4              CONVERT FRONT COMPRESSION COUNT
         BZ    SETKEY1
         CLI   KEY1,X'40'        IS KEY IN LOW KEY RANGE OF CATALOG?
         BLR   R14                YES, BRANCH
         B     CONVF
SETKEY1  MVC   KEY1,0(R3)         SAVE FIRST BYTE OF KEY
CONVF    BAL   R14,CONVERT
         MVC   OUTLINE+6(2),UNPACK+6
         LR    R0,R7              CONVERT KEY LENGTH COUNT
         BAL   R14,CONVERT
         MVC   OUTLINE+14(2),UNPACK+6
         SR    R14,R14
         IC    R14,LOWREC+2      LOAD F-L-P LENTGH
         BCTR  R14,0             SUB F LENGTH
         BCTR  R14,0             SUB L LENGTH
         SR    R1,R1
         LA    R8,2(R3,R7)              POINT AT VERTICAL POINTER
         B     *+8
VPLOOP   SLA   R1,8
         IC    R1,0(R8)
         LA    R8,1(R8)
         BCT   R14,VPLOOP
         LA    R8,OUTLINE+33(R4) GET DISPLACMENT IN OUTLINE
         CLI   LOWREC+16,X'01'    IS THIS A SEQUENCE SET?
         BE    PRTSEQVP
         MH    R1,=X'0200'        CALC RBA ADDRESS
         LR    R0,R1
         BAL   R14,CONVERT
         MVC   OUTLINE+24(6),UNPACK+2 EDIT V POINTER
         B     CHKEYL
PRTSEQVP LR    R0,R1
         BAL   R14,CONVERT
         MVC   OUTLINE+26(2),UNPACK+6 EDIT V PTR FOR SEQ SET
CHKEYL   LTR   R7,R7
         BZ    SETOUTL
         BCTR  R7,0
         EX    R7,MVCKEY           EDIT KEY
         EX    R7,XKEY             TRANSLATE KEY
         LA    R7,1(,R7)           RESET COUNT BACK
SETOUTL  LA    R1,SNAPLGN
         BAL   R14,WRITE           PUT OUT LINE
         LTR   R7,R7               KEY LENGTH ZERO?
         BZ    PKLD14              YES, BRANCH
         BCTR  R7,0
         EX    R7,MVCKEY           EDIT KEY
         EX    R7,TRTKEY           KEY HAVE UNPRINTABLE CHAR?
         BZ    PKRSET7             NO, BRANCH
         EX    R7,MVCKEY           YES, RE-EDIT KEY
         EX    R7,TR1KEY           TRANSLATE KEY
         LA    R1,SNAPLGN
         BAL   R14,WRITE
         EX    R7,MVCKEY           EDIT KEY
         EX    R7,TR2KEY           2ND TRANSLATE OF KEY
         LA    R1,SNAPLGN
         BAL   R14,WRITE
PKRSET7  LA    R7,1(,R7)         RESET COUNT BACK
PKLD14   LM    R0,R14,PRTKEYSV
         MVI   OUTLINE,X'40'
         MVC   OUTLINE+1(124),OUTLINE
         BR    R14
PRTMSGK3 EQU   *
         MVC   OUTLINE+4(L'MSGK3),MSGK3
         LA    R1,SNAPLGN
         BAL   R14,WRITE
         LA    R1,SNAPLGN
         BAL   R14,WRITE
         LM    R0,R15,DKSAVE
         BR    R14
MVCKEY   MVC   0(*-*,R8),0(R3)
XKEY     TR    0(*-*,R8),XLATE
TR1KEY   TR    0(*-*,R8),TR1TBLE
TR2KEY   TR    0(*-*,R8),TR2TBLE
TRTKEY   TRT   0(*-*,R8),TRTTBLE
PRTKEYSV DC    18F'0'
         TITLE 'IDACATDK - DECOMPRESS KEY UTILITY'
***********************************************************************
*        CRA ROUTINES                                                 *
***********************************************************************
ADD1     LA    R1,MSG48
         BAL   R14,WRITE
         B     ROUTER
ADD2     LA    R1,LOWRPL
         LA    R0,ENDREQ
         BAL   R14,REQUEST
         LA    R1,MSG4
         BAL   R14,GETINPUT      GET NAME AND CI NUMBER TO BE ADDED
         XC    HIKEY,HIKEY
         CLI   3(R1),C'='
         BNE   *+8
         LA    R1,4(R1)
         LA    R5,X'40'
         CLC   0(3,R1),=C'(V)'   IS THIS A VOL SERIAL ADD?
         BNE   ADD0
         SR    R5,R5
         LA    R1,3(R1)
ADD0     LR    R7,R1             SAVE INPUT POINTER ACROSS TRT
         TRT   0(45,R7),TRTABLE2 FIND END OF NAME
         SR    R1,R7             R1 NOW HAS NAME LENGTH
         SR    R4,R4             SET UP FOR MVCL
         SLL   R5,24
         LA    R3,44             NUMBER OF X'40' NEEDED
         LA    R2,HIKEY
         MVCL  R2,R4
         BCTR  R1,R0             SET LENGTH FOR MVC
         EX    R1,MOVE7
         AR    R1,R7             POINT TO CI NUMBER TO BE ADDED
         CLI   4(R1),C'='        DID HE ENTER CI=?
         BNE   *+8
         LA    R1,3(R1)          YES, JUMP OVER IT
         LA    R7,2(R1)
         TRT   0(7,R7),TRTABLE2  FIND END OF CI NUMBER
         BE    ADDBAD
         CR    R7,R1             WERE ANY BYTES XLATED?
         BE    ADDBAD
         SR    R1,R7             R1 NOW HAS THE CI NUMBER LENGTH
         BCTR  R1,R0
         EX    R1,MOVE9
         BAL   R14,PACK
         L     R2,PACKIN
         LH    R3,INLENGTH
         SRL   R2,0(R3)
         STCM  R2,7,HIKEY+44     SET THE CI NUMBER
         MVI   HIRPL+17,X'2C'    SET KEY LENGTH
         LA    R0,PUT            PUT KEY REQUEST
         LA    R1,HIRPL
         BAL   R14,REQUEST
         MVI   HIRPL+17,X'04'    RESTORE THE KEY LENGTH
         LTR   R15,R15
         BNZ   ADDBAD
         MVI   TRACK,C'+'
         STCM  R2,7,TRACK+1
         MVC   TRACK+4(12),HIKEY
         BAL   R14,CCRCHKPT
         B     ROUTER
ADDBAD   LA    R1,MSG13
         BAL   R14,WRITE
         B     ROUTER
MOVE7    MVC   HIKEY(0),0(R7)
MOVE9    MVC   PACKIN(0),0(R7)
         SPACE 3
**********************************************************************
* CCRCHPT WILL WRITE OUT THE UPDATED CCR RECORD AND RE-GET IT FOR UPD*
**********************************************************************
CCRCHKPT ST     R14,RETURN1
         MVI    LOWRPL+41,CNV+UPD
         MVC    LOWRBA(4),=X'00000600'
         LA     R10,LOWRBA
         ST     R10,LOWRPL+36
         LA     R1,LOWRPL
         SR     R0,R0             GET CODE
         BAL    R14,REQUEST
         LTR    R15,R15           GET OK?
         BNZ    EXITERR
         TM     FLAG1,CCREXIT     NEED A SPECIAL EXIT?
         BZ     *+14
         L      R15,RETURN1
         BALR   R14,R15           USER WILL RETURN HERE
         ST     R14,RETURN1       NEW EXIT POINT
         MVC    LOWREC+160(256),LOWREC+176
         MVC    LOWREC+416(16),TRACK
         XC     TRACK(16),TRACK
         LA     R1,66
         SVC    11
         MVC    LOWREC+480(12),LOWREC+484
         SRL    R1,4
         ST     R1,LOWREC+492
         LA     R1,LOWRPL
         LA     R0,PUT
         BAL    R14,REQUEST
         MVC    LOWRPL+36(4),LOWRPL+32
         LTR    R15,R15           CCR WRITE OK?
         BZ     CCROUT
EXITERR  LA     R1,MSG12
         BAL    R14,WRITE
CCROUT   NI     FLAG1,X'FF'-CCREXIT
         L      R14,RETURN1
         BR     R14
         EJECT
         EJECT
***********************************************************************
* THE ENQUE IS ISSUED ANYTIME THE CATALOG IS BEING ALTERED.           *
***********************************************************************
ENQUE    ST    R14,RETURN
         TM    FLAG2,ENQUED       ALREADY ENQUE D?
         BER   R14                YES, JUST RETURN
         CLI   MINOR+20,X'40'
         BE    ENDQ1
         MVI   ENDQ1+5,X'2C'
ENDQ1    RESERVE  (MAJOR,MINOR,E,20,SYSTEMS),RET=USE,UCB=UCBADR
         OI    FLAG2,ENQUED       REMEMBER THE STATUS
         L     R14,RETURN
         LTR   R15,R15            GET IT OK?
         BZR   R14                YES, RETURN TO CALLER
DEQUE    ST    R14,RETURN
         TM    FLAG2,ENQUED       DO WE NEED A DEQUE?
         BZR   R14
         CLI   MINOR+20,X'40'
         BE    DEQ1
         MVI   DEQ1+5,X'2C'
DEQ1     DEQ   (MAJOR,MINOR,20,SYSTEMS),UCB=UCBADR
         NI    FLAG2,X'FF'-ENQUED
         L     R14,RETURN
         BR    R14
MAJOR    DC    C'SYSIGGV2'
MINOR    DS    CL44
UCBADR   DS    F
         SPACE 3
***********************************************************************
* EXIT CLOSES THE CATALOG ACB AND RETURNS                             *
***********************************************************************
EXIT     CLOSE  (CATACB,,SYSPRINT)
         TM     SYSIN+48,X'10'    IS SYSIN OPEN?
         BZ     THEEND
         CLOSE  (SYSIN)
         BAL    R14,DEQUE
*        ESTAE  0                 CANCEL THE ESTAE ROUTINE
         LA     R0,132            CANCEL OPTION FOR THE STAE
         SVC    60
THEEND   L      R13,4(R13)        POINT TO OLD SAVE AREA
         LM     R14,R12,12(R13)   RE-LOAD REGS
         SR     R15,R15
         BR     R14               RETURN
         SPACE  3
ERROR1   WTO    'CATFIX: ERROR OPENING SYSPRINT FILE. TERMINATE.'
         B      THEEND
***********************************************************************
* THE ESTAE ROUTINE CLEANS UP THE OUTSTANDING ENQUE .                 *
***********************************************************************
         DROP   R12
         USING  ABTERM,R15
ABTERM   LR     R13,R15           RESTORE THE BASE REG
         L      R11,R13BASE
         SR     R13,R11
         LA     R12,4095(R13)
         LA     R12,1(R12)
         LA     R11,4095(R12)
         LA     R11,1(R11)
         DROP   R15
         USING  SAVE,R13,R12,R11
         B      DEQUE
         SPACE  3
R13BASE  DC     A(ABTERM-SAVE)
         EJECT
***********************************************************************
*     MESSAGE AREA                                                    *
***********************************************************************
MSG1     DC    Y(L'MSG1X)
MSG1X    DC    C'CATFIX01: ENTER COMMAND. YY.DDD HH.MM.SS'
MSG3     DC    Y(L'MSG3X)
MSG3X    DC    C'CATFIX03: CATALOG ACB ERROR XX AFTER CATALOG OPEN.'
MSG4     DC    Y(L'MSG4X)
MSG4X    DC    C'CATFIX04: ENTER DSN AND POINTER TO BE ADDED.'
MSG6     DC    C'CATFIX06: RPL ERROR = XXXXXX ON A '
MSG12    DC    Y(L'MSG12X)
MSG12X   DC    C'CATFIX12: ERROR CHECKPOINTING THE CCR RECORD. '
SNAPLINE DC    C'*****  ********  RBA OF RECORD IS XXXXXX ************'
MSG13    DC    Y(L'MSG13X)
MSG13X   DC    C'CATFIX13: POINTER INCORRECT OR RPL ERROR. ADD FAILED.'
MSG19    DC    Y(L'MSG19X)
MSG19X   DC    C'CATFIX19: ''DISPLAY ALL'' NOT VALID.'
MSG23    DC    Y(L'MSG23X)
MSG23X   DC    C'CATFIX23: ENTER OBJECT VALUE FOR DISPLAY'
MSG24    DC    Y(L'MSG24X)
MSG24X   DC    C'CATFIX24: ENTER ABEND, STOP OR CONTINUE.'
MSG25    DC    Y(L'MSG25X)
MSG25X   DC    C'CATFIX25: CAXWA NOT FOUND FOR DD CARD. '
MSG27    DC    C'LOW KEY RANGE ANALYSIS'
MSG28    DC    C'HIGH ALLOCATED CI (CCRHACI)'
MSG29    DC    C'HIGH USED CI'
MSG30    DC    C'COUNT OF FCHAIN CI''S'
MSG32    DC    C'COUNT OF LOW KEY CA''S USED'
MSG32A   DC    C'COUNT OF LOW KEY CA''S ALLOC'
MSG33    DC    C'COUNT OF HIGH KEY CA''S USED'
MSG33A   DC    C'COUNT OF HIGH KEY CA''S ALLOC'
MSG34    DC    C'COUNT OF NEVER USED CI''S'
MSG35    DC    C'TOTAL FREE SPACE IN HI RANGE'
MSG36    DC    C'TOTAL USED SPACE IN HI RANGE'
MSG37    DC    C'COUNT OF HI KEY CI''S'
MSG38    DC    C'COUNT OF USED BUT EMPTY CI''S'
MSG40    DC    C'HI KEY RANGE ANALYSIS'
MSG45    DC    Y(L'MSG45X)
MSG45X   DC    C'CATFIX45; ACB ERROR -- OPENING CRA. COMMAND REJECTED'
MSG46    DC    Y(L'MSG46X)
MSG46X   DC    C'CATFIX46;  NOW PROCESSING CRA.'
MSG47    DC    Y(L'MSG47X)
MSG47X   DC    C'CATFIX47; NOW PROCESSING CATALOG, NOT CRA.'
MSG48    DC    Y(L'MSG48X)
MSG48X   DC    C'CATFIX48; COMMAND INVALID FOR CRA. COMMAND REJECTED.'
MSGK1    DC    C' FRONT    KEY     VERTICAL          KEY      1        X
                        2'
MSGK2    DC    C'COMPRS  LENGTH     POINTER   0123456789ABCDEF012345678X
               9ABCDEF0123456789AB'
MSGK3    DC    C' THIS CONTROL INTERVAL HAS NOT BEEN INITIALIZED'
         EJECT
*********************************************************************
*
*     WORK AREAS
*
*********************************************************************
WORKSAVE DS    14F
SNAPSAVE DS    15F
LOWRBA   DC    F'0'
WORK1    DC    F'0'
WORK2    DC    F'0'
WORK3    DC    2F'0'
EXTENTON DC    F'0'
KEYSAVE  DC    F'0'
RETURN   DC    F'0'
DHIURBA  DC    F'0'
SSRBA    DC    F'0'
RETURN1  DC    F'0'
TRACK    DC    4F'0'
         DS    0D
UNPACK   DC    XL12'0'
PACKIN   DC    XL12'0'
GOPSIZE  DC    H'0'
INLENGTH DC    XL2'0'
STATUS   DC    XL1'0'
KEY1     DC    C' '
PRTALL   EQU   128           NRF IS OK ERROR CODE
REP      EQU   64            ON WHEN DOING THE REP FUNCTION
NRFOK    EQU   32
NOWTO    EQU   16
KEYSEQ   EQU   8
WRT      EQU   4
DISCMD   EQU   2
PRTBOTH  EQU   1
FLAG1    DC    X'00'
DTYPE    EQU   128
PVOLFLG  EQU   64
PFSN     EQU   32
HILEVEL  EQU   16
CCREXIT  EQU   1              USED FAST IN REQUEST
FLAG2    DC    X'00'
CRAOK    EQU   2
ENQUED   EQU   1
         DS    0F
HIKEY    DC    CL48'0'
PASSWORD DC    XL9'0'
         DC    XL1'0'      PASSWORD ALSO USED FOR ZAP DATA
COMMOUT  DC    X'00000050'
COMMAND  DS    CL80
ECB      DC    F'0'
REPLYOUT DC    X'00000050'
REPLY    DS    CL80           WTOR INPUT AREA
ROTCDE   DC    X'00004020'    WTOR ROUTE CODES
WTOR     DC    A(REPLY)       WTOR PARM LIST
         DC    A(ECB)
WTORLNG  DS    H              HALF WORD OF MESSAGE LENGTH
         DC    X'8000'        WTOR FLAGS
MESSAGE  DS    CL132
SNAPLGN  DC    X'007C'     LENGTH OF SNAP OUTPUT FOR SYSPRINT
OUTLINE  DS    CL125          PRINT OUTPUT AREA
         DS    0D
         DC    C'LOWR'
LOWREC   DS    CL512
         SPACE 3
CRAACB   ACB   DDNAME=VSAMCRA,AM=VSAM,STRNO=2,MACRF=(CNV,DIR,ADR,IN)
CATACB   ACB   AM=VSAM,DDNAME=VSAMCAT,STRNO=2,                         -
               MACRF=(ADR,CNV,KEY,IN,SEQ,DIR)
HIRPL    RPL   ACB=CATACB,AREA=HIKEY,AREALEN=47,ARG=HIKEY,KEYLEN=44,   -
               RECLEN=47,OPTCD=(KEY,DIR,GEN)
LOWRPL   RPL   ACB=CATACB,AREA=LOWREC,AREALEN=512,ARG=LOWREC,KEYLEN=4, -
               RECLEN=512,OPTCD=(CNV,DIR,GEN)
SYSIN    DCB   DDNAME=SYSIN,RECFM=FB,LRECL=80,MACRF=GM,DSORG=PS,       -
               EODAD=EXIT
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=123,RECFM=F,    -
               BLKSIZE=123
TABLE    DC    C'0123456789ABCDEF'
XLATE    DC    C'................'                    00
         DC    C'................'                    10
         DC    C'................'                    20
         DC    C'................'                    30
         DC    XL1'00'                                40
         DC    C'............(+.'
         DC    X'50'                                  50
         DC    C'.........!$*);.'
         DC    C'-/.........,%..?'                    60
         DC    C'..........:#@''=.'                   70
         DC    C'................'                    80
         DC    C'................'                    90
         DC    C'................'                    A0
         DC    C'................'                    B0
         DC    C'.ABCDEFGHI......'                    C0
         DC    C'.JKLMNOPQR......'                    D0
         DC    C'..STUVWXYZ......'                    E0
         DC    C'0123456789......'                    F0
*                 0 1 2 3 4 5 6 7 8 9 A B C D E F
TRTTBLE  DC    X'01010101010101010101010101010101'    00
         DC    X'01010101010101010101010101010101'    10
         DC    X'01010101010101010101010101010101'    20
         DC    X'01010101010101010101010101010101'    30
         DC    X'00010101010101010101010001000001'    40
         DC    X'00010101010101010101000000000001'    50
         DC    X'00000101010101010101010000010100'    60
         DC    X'01010101010101010101000000000001'    70
         DC    X'01010101010101010101010101010101'    80
         DC    X'01010101010101010101010101010101'    90
         DC    X'01010101010101010101010101010101'    A0
         DC    X'01010101010101010101010101010101'    B0
         DC    X'01000000000000000000010101010101'    C0
         DC    X'01000000000000000000010101010101'    D0
         DC    X'01010000000000000000010101010101'    E0
         DC    X'00000000000000000000010101010101'    F0
TR1TBLE  DC    16C'0'
         DC    16C'1'
         DC    16C'2'
         DC    16C'3'
         DC    16C'4'
         DC    16C'5'
         DC    16C'6'
         DC    16C'7'
         DC    16C'8'
         DC    16C'9'
         DC    16C'A'
         DC    16C'B'
         DC    16C'C'
         DC    16C'D'
         DC    16C'E'
         DC    16C'F'
TR2TBLE  DC    16C'0123456789ABCDEF'
         LTORG
ASSOC    DS    45F            90 3 BYTE ASSOCCION POINTERS
TRTABLE2 DC    X'FF'               USED FOR TRT TO FIND BLANKS
         DC    XL63'00'
         DC    X'FF'               AND USED TO FIND X'40'
         DC    XL215'00'
         END
