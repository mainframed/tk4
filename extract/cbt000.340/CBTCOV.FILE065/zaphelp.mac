         DC    CL40'    HELP FOR ZAP COMMAND - CONTENTS     '      U004
         DC    CL40'                                        '      U004
         DC    CL40'?1      - THIS SCREEN                   '      U005
         DC    CL40'?2, ?3  - GENERAL INFO                  '      U005
         DC    CL40'?4 - ?6 - INPUT/OUTPUT COMMANDS         '      T002
         DC    CL40'?7      - SESSION CONTROL COMMANDS      '      T002
         DC    CL40'?8      - DUMP COMMANDS                 '      T002
         DC    CL40'?9      - BYTE COMMANDS                 '      T002
         DC    CL40'?10     - STRING COMMANDS               '      T002
         DC    CL40'?11, ?12- MISCELLANEOUS COMMANDS        '      T002
         DC    CL40'?13     - EXPLANATION OF SYMBOLS        '      T002
         DC    CL40'?14     - SAMPLE ZAP SESSION            '      T002
         DC    CL40'                                        '      U005

         # 2                                                       U004

         DC    CL40'              GENERAL INFO              '      U005
         DC    CL40'                                        '      U005
         DC    CL40'--OPERANDS ARE ENTERED IMMEDIATELY AFTER'      U005
         DC    CL40'THE COMMAND, WITH NO INTERVENING BLANKS.'      U005
         DC    CL40'--THE BLOCK IS READ INTO A WORK BUFFER, '      U005
         DC    CL40'WHERE YOU MODIFY IT.  WHEN YOU ENTER THE'      U005
         DC    CL40'"ZAP" COMMAND, THE BLOCK IS WRITTEN BACK'      U005
         DC    CL40'TO THE DATASET FROM THE BUFFER.  IF ANY '      U005
         DC    CL40'OTHER JOB OR USER HAS UPDATED THAT BLOCK'      U005
         DC    CL40'IN BETWEEN WHEN YOU FIRST DISPLAYED IT  '      U005
         DC    CL40'AND WHEN YOU "ZAPPED" IT, THE OTHER     '      U005
         DC    CL40'CHANGES WILL BE LOST.                   '      U005
         DC    CL40'                                        '      U005

         # 3                                                       U005

         DC    CL40'        GENERAL INFO (CONTINUED)        '      U005
         DC    CL40'                                        '      U005
         DC    CL40'--IF YOU MAKE CHANGES TO A BLOCK, TO GO '      U005
         DC    CL40'TO ANOTHER BLOCK YOU MUST EITHER "ZAP"  '      U005
         DC    CL40'THE BLOCK (RE-WRITE IT TO THE DATASET), '      U005
         DC    CL40'OR ENTER THE COMMAND TWICE IN A ROW     '      U012
         DC    CL40'WHICH WILL CAUSE YOU TO LEAVE THE       '      U012
         DC    CL40'CURRENT MODIFIED BLOCK.                 '      U012
         DC    CL40'                                        '      U012
         DC    CL40'                                        '      U012
         DC    CL40'                                        '      U005
         DC    CL40'                                        '      U005
         DC    CL40'                                        '      U005
                                                                   U004
         # 4                                                       U004
                                                                   U004
         DC    CL40'         INPUT/OUTPUT COMMANDS          '      U004
         DC    CL40'                                        '      U004
         DC    CL40'P<EXP> - POINT TO REC WHOSE TTR IS <EXP>'
         DC    CL40'P      - POINT TO BEGINNING OF DATA SET '
         DC    CL40'T<EXP> - POINT TO TRACK <EXP>, RECORD 1 '
         DC    CL40'T      - POINT TO NEXT TRACK, RECORD 1  '
         DC    CL40'R<EXP> - SHOW BLK <EXP> REL. TO CURRENT '      U002
         DC    CL40'R      - POINT TO NEXT PHYSICAL RECORD  '      U002
         DC    CL40'B      - POINT TO PREVIOUS RECORD       '      U002
         DC    CL40'B<EXP> - BACK <EXP> RECORDS             '      T002
         DC    CL40'LAST   - POINT TO LAST RECORD (DS1LSTAR)'      U002
         DC    CL40'LASTDS1- POINT TO LAST FMT1 IN VTOC     '      U004
         DC    CL40'ABS<EXP> - POINT TO REC WITH CCHHR = EXP'      U003

         # 5                                                       U004

         DC    CL40'       MORE INPUT/OUTPUT COMMANDS       '      U004
         DC    CL40'                                        '      U004
         DC    CL40'%<EXP> - POINT TO TTR @ LOC <EXP> IN BLK'      T002
         DC    CL40'M<NAME>- FOR PDS, POINT TO MEMBER <NAME>'      U002
         DC    CL40'M      - POINT TO START OF CURRENT MEMBR'      U012
         DC    CL40'NAME<N>- AFTER ''M'', SHOW ENTRY POINT <N>'    U002
         DC    CL40'NAME   - SELECT ENTRY POINT NAMED MEMBER'      U004
         DC    CL40'E<N>   - SAME AS NAME<N>                '      U002
         DC    CL40'E      - SAME AS NAME                   '      U002
         DC    CL40'FINDEOF- SCAN FORWARD LOOKING FOR AN EOF'      U019
         DC    CL40'ZAP    - REPLACE BLOCK FROM CURRENT BUFF'
         DC    CL40'                                        '      T002
         DC    CL40'                                        '      T002

         # 6                                                       T002

         DC    CL40'       MORE INPUT/OUTPUT COMMANDS       '      T002
         DC    CL40'                                        '      T002
         DC    CL40'KEY<N> - FIND KEY <N> IN DATASET        '      T002
         DC    CL40'KEYP<N>- FIND KEY <N> IN DATASET FROM   '      T002
         DC    CL40'         BEGINNING                      '      T002
         AIF   (NOT &VSAM).NVSAM47                                 T002
         DC    CL40'RBASEQ - VSAM KSDS IN RBA SEQ           '      T002
         DC    CL40'KEYSEQ - VSAM KSDS IN KEY SEQ           '      T002
         DC    CL40'                                        '      T002
         DC    CL40'                                        '      T002
         DC    CL40'                                        '      T002
         DC    CL40'                                        '      T002
         DC    CL40'                                        '      T002
         DC    CL40'                                        '      T002
         AIF   (&VSAM).VSAM08                                      T002
         DC    CL40'                                        '      T002
         DC    CL40'                                        '      T002
         ANOP  ,                                                   T002

         # 7                                                       T002

         DC    CL40'        SESSION CONTROL COMMANDS        '      U004
         DC    CL40'                                        '      U004
         DC    CL40'LOG      - START LOGGING THIS SESSION   '
         DC    CL40'CRT      - SET WIDTH 4,4 AND VERBOSE    '
         DC    CL40'TERSE    - DO NOT DO AUTO WHERE         '
         DC    CL40'VERBOSE  - ALWAYS GIVE WHERE INFO       '
         DC    CL40'W<D>,<U> - SET WINDOW DOWN/UP SIZE(S)   '
         DC    CL40'WFULL    - SET SIZE TO URSA SCREEN SIZE '
         DC    CL40'LINE40, LINE80 - SET LINE LENGTH 40 × 80'      U007
         DC    CL40'NOTE<COMNT>-WRITE <COMNT> INTO LOG FILE '      U004
         DC    CL40'EJECT    - EJECT A PAGE IN THE LOG FILE '      U004
         DC    2CL40'                                        '     U007
                                                                   U004
         # 8                                                       T002
                                                                   U004
         DC    CL40'             DUMP COMMANDS              '      U004
         DC    CL40'                                        '      U004
         DC    CL40'DUMP       - DUMP ALL RECORDS IN THE    '
         DC    CL40'             DATA SET IN ABDUMP FORMAT  '
         DC    CL40'DUMPT<EXP> - DUMP TO TTR <EXP> FROM     '
         DC    CL40'             CURRENT RECORD             '
         DC    CL40'DUMPT      - DUMP CURRENT RECORD ONLY   '
         DC    CL40'DUMPF<EXP> - DUMP FOR <EXP> RECORDS FROM'
         DC    CL40'             CURRENT RECORD             '
         DC    CL40'DUMPF      - DUMP CURRENT RECORD        '
         DC    CL40'DUMPE      - DUMP CURRENT RECORD TO EOF '      U004
         DC    CL40'                                        '
         DC    CL40'EOF, I/O ERROR, AND END-OF-DS HALT DUMP '
                                                                   U004
         # 9                                                       T002
                                                                   U004
         DC    CL40'             BYTE COMMANDS              '      U004
         DC    CL40'                                        '      U004
         DC    CL40'D<EXP> - DISPLAY BYTE AT OFFSET <EXP>   '
         DC    CL40'<EXP>  - SAME AS D<EXP>                 '
         DC    CL40'D      - PAGE TO NEXT SCREEN (D+#SCREEN)'      U004
         DC    CL40'U      - PAGE TO PREV SCREEN (D-#SCREEN)'      U004
         DC    CL40'>      - GO FORWARD IN TRACE TABLE      '
         DC    CL40'<      - GO BACKWARD IN TRACE TABLE     '
         DC    CL40'EBCDIC - EBCDIC TRANSLATION (DEFAULT)   '
         DC    CL40'ASCII  - ASCII-8 TRANSLATION            '
         DC    CL40'ZCODE  - ZCODE TRANSLATION              '
         DC    CL40'=<LAB> - DEFINE <LAB> TO CURR LOCATION  '
         DC    CL40'NODEF  - CLEAR ALL DEFINED LABELS FROM ='
                                                                   U004
         # 10                                                      T002
                                                                   U004
         DC    CL40'             STRING COMMANDS            '      U004
         DC    CL40'                                        '      U004
         DC    CL40'S<STR>   - STORE <STR> AT CURRENT LOC   '
         DC    CL40'X<STR>   - EXCLUSIVE OR AT CURRENT LOC  '
         DC    CL40'O<STR>   - OR AT CURRENT LOC            '
         DC    CL40'N<STR>   - AND AT CURRENT LOC           '
         DC    CL40'SET<STR> - SET ENTIRE RECORD TO <STR>   '
         DC    CL40'           S,X,O,N,SET MAY BE ENTERED   '
         DC    CL40'           ALONE TO USE PREVIOUS <STR>  '
         DC    CL40'L<STR>   - LOOK FOR <STR> FROM NEXT BYTE'
         DC    CL40'L        - CONTINUE LOOKING FOR <STR>   '
         DC    CL40'F<STR>   - LIKE L<STR>, CONT''S PAST EOFS'     U004
         DC    CL40'F        - LIKE L, CONTINUES PAST EOFS  '      U004
                                                                   U004
         # 11                                                      T002
                                                                   U004
         DC    CL40'         MISCELLANEOUS COMMANDS         '      U004
         DC    CL40'                                        '      U004
         DC    CL40'END    - EXIT ZAP                       '
         DC    CL40'#<EXP> - FIND HEX/DECIMAL VALUE OF <EXP>'
         DC    CL40'FLOAT<F>-FIND FLOATING PT VALUE OF <F>  '
         DC    CL40'IDEF   - DISPLAY DEFINE LABEL TABLE     '
         DC    CL40'ITRACE - DISPLAY TRACE TABLE            '
         AIF   (&MVS).MVS12                                        U004
         DC    CL40'NN<EXP>- FOR JOBQ, FIND <EXP>TH RECORD  '
         DC    CL40'?N     - VIEW NTH HELP DISPLAY (1-13)   '      U004
         DC    CL40'WHERE  - GIVE CURRENT LOCATION ETC.     '
         DC    CL40'ASM<OP> - GIVE OBJECT CODE FOR MNEMONIC '
         DC    CL40'DISASM<EXP> - DISASSEMBLE INSTR AT <EXP>'      U004
         AIF   (NOT &MVS).NMVS01                                   T001
         DC    CL40'                                        '      U004
         DC    CL40'                                        '      T001

         # 12                                                      T002

         DC    CL40'      MORE MISCELLANEOUS COMMANDS       '      U004
         DC    CL40'                                        '      U004
         DC    CL40'WHATMEM- FIND DIR ENTRY CLOSEST TO REC *'      U012
         DC    CL40'WM       - SAME AS WHATMEM              '      U012
         DC    CL40'TSO<CMD> - EXECUTE TSO <CMD> AS AT READY'      U020
         DC    CL40'V<EXP>   - ADD CONTENTS OF 2 BYTES AT   '      U014
         DC    CL40'           <EXP> TO CURR VALUE OF LOC   '      U014
         DC    CL40'BASE<EXP>- ADD <EXP> TO BUFFER OFFSET   '      U004
         DC    CL40'           WHEN COMPUTING ADDR          '      U004
         DC    CL40'DISP<TYPE>-SET RECORD DISPLAY START POS '      U004
         DC    CL40'           <TYPE> IS COUNT × KEY × DATA '      U004
         DC    CL40'                                        '      U014
         DC    CL40'                                        '      U014
                                                                   U004
         # 13                                                      T002
                                                                   U004
         DC    CL40'<EXP> IS COMPOSED OF OPERATORS (+,-,*,/)'      U004
         DC    CL40'      DEFINE SYMBOLS (''='' COMMAND) AND'
         DC    CL40'HEX OR DECIMAL CONSTANTS. THE FOLLOWING '
         DC    CL40'SYMBOLS ARE PREDEFINED: $=CURRENT OFFSET'      U019
         DC    CL40'L=LOGICAL RECORD LENGTH, K=KEY LENGTH   '
         DC    CL40'BL=MAXIMUM BLOCK SIZE.                  '
         DC    CL40'<STR> MAY BE EITHER UP TO 16 CHARACTERS '
         DC    CL40'      ENCLOSED IN ANY DELIMITER, OR UP  '
         DC    CL40'      TO 16 HEX DIGITS, OR A DECIMAL VAL'
         DC    CL40'      ENDING WITH ''.'' (LENGTH 4 BYTES)  '
         DC    CL40'<LAB> MAY ANY 1 TO 8 CHARACTERS         '
         DC    CL40'<F>   IS ANY FLOATING POINT CONSTANT IN '
         DC    CL40'      INTERNAL FORM (IE: FORTRAN A FORM)'

         # 14                                                      T002

         DC    CL40'           SAMPLE ZAP SESSION           '      U005
         DC    CL40'                                        '      U005
         DC    CL40'ZAP LOAD   READY LEVEL COMMAND ENTERED  '      U005
         DC    CL40'MTEST      SELECT MEMBER "TEST"         '      U005
         DC    CL40'EFIRST     SELECT ENTRY POINT "FIRST"   '      U005
         DC    CL40'4C         GO TO OFFSET 4C IN RECORD    '      U005
         DC    CL40'S00        STORE 1 BYTE HEX             '      U005
         DC    CL40'+4         ADVANCE PTR 4 BYTES IN BLOCK '      U005
         DC    CL40'NFF0F      TURN OFF 1 NIBBLE            '      U005
         DC    CL40'ZAP        REWRITE THAT BLOCK           '      U005
         DC    CL40'R+3        GO TO 3RD BLOCK FROM HERE    '      U005
         DC    CL40'L/HELLO/   FIND SOME TEXT               '      U005
         DC    CL40'END        ALL DONE                     '      U005
