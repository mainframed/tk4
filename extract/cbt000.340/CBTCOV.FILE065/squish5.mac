         TITLE 'PGM TO COMPRESS/COPY A DISK VOLUME-MVS (PUTDS)'
         MACRO
&LABEL   CRASH
&LABEL   BAL   14,CRASH        GO TO CRASH ROUTINE
         MEND
         SPACE
         MACRO
&LABEL   WRTVTOC &LOC,&ADR,&IND
&LABEL   MVI   OUTER,0        CLEAR ERROR BYTE
         WRITE VTCOUTDB,DI,,&LOC+44,,&LOC,MF=E
         CHECK VTCOUTDB       WAIT TILL FINISHED
         AIF   (T'&IND NE 'O').OUT
         CLI   OUTER,0        SEE IF GOOD WRITE
         BE    *+8             GOODIE
         BAL   14,CRASH        GO CRASH
.OUT     ANOP
         AIF   (T'&ADR EQ 'O').OUT2
         L     14,VTCOUTDB+16  GET IOB ADDRESS
         IHBINNRA &ADR         GET PARM IN REG 1
         MVC   0(5,1),CCHHR(14) MOVE CCHHR OF ADDRESS
.OUT2    ANOP
         L     14,BLOCKAD      GET BLOCK #
         LA    14,1(14)        INCR
         ST    14,BLOCKAD      SAVE
         MEND
         SPACE
         MACRO
&LABEL   TTRABS &DCB,&ABSAD    CONVERT FROM TTR TO ABSOLUTE ADDRESS
&LABEL   L     1,&DCB+44       GET DEB ADDRESS
         LA    2,&ABSAD        GET ADDRESS OF ABSOULTE ADDRESS
         L     14,16           GET CVT ADDRESS
         L     15,X'1C'(14)    GET CONVERT ROUTINE ADDRESS
         LA    3,RGSAV         POINT TO SAVE AREA
         STM   9,13,0(3)       SAVE THEM
         BALR  14,15           GO TO IT
         LM    9,13,0(3)       RESTORE REGS.
         MEND
         SPACE 2
         MACRO
&LABEL   ABSTTR &DCB,&ABSAD    CONVERT FROM ABSOLUTE ADDRESS TO TTR
&LABEL   L     1,&DCB+44       GET DEB ADDRESS
         LA    2,&ABSAD        GET ADDRESS OF ABSOLUTE ADDRESS
         L     14,16           GET CVT ADDRESS
         L     15,X'20'(14)    GET CONVERT ROUTINE ADDRESS
         LA    3,RGSAV         GET ADDRESS OF SAVEA AREA
         STM   9,13,0(3)       SAVE REGS
         BALR  14,15           GO TO ROUTINE
         LM    9,13,0(3)       RESTORE REGS.
         MEND
         SPACE
         MACRO
&LABEL   READVTOC &LOC
&LABEL   POINT DISKIN,FULL     POINT AT RECORD
         MVI   OUTER,0        CLEAR ERROR
         READ  VTOCINDB,SF,,&LOC,MF=E
         CHECK VTOCINDB        WAIT TO STOP
         CLI   OUTER,0        MAKE SURE NO ERROR
         BE    *+8            IF NOT, GOODIE
         BAL   14,CRASH       OTHERWISE, GO CRASH
         MEND
         EJECT
PUTDS    CSECT                                                WMT 04/76
*        BAL   R11,PUTDS                                      WMT 04/76
         USING PUTDS,RF           SET UP TEMP ADDR.           WMT 04/76
         ST    RC,X5              SAVE OLD BASE ADDR.         WMT 04/76
         ST    RB,XXX000          SAVE RETURN ADDR.           WMT 06/76
         DROP RF                  DROP TEMP BASE.             WMT 04/76
         LR    RC,RF              SET UP START ADDRESS.       WMT 04/76
         USING PUTDS,RC           SET UP ADDRESSING.          WMT 04/76
         USING SAVE,RD            SET UP COMMON ADDR.         WMT 04/76
*                                                             WMT 12/75
*        EQUATE REGISTERS.                                    WMT 12/75
*                                                             WMT 12/75
R0       EQU   0                                              WMT 12/75
R1       EQU   1                                              WMT 12/75
R2       EQU   2                                              WMT 12/75
R3       EQU   3                                              WMT 12/75
R4       EQU   4                                              WMT 12/75
R5       EQU   5                                              WMT 12/75
R6       EQU   6                                              WMT 12/75
R7       EQU   7                                              WMT 12/75
R8       EQU   8                                              WMT 12/75
R9       EQU   9                                              WMT 12/75
RA       EQU   10                                             WMT 12/75
RB       EQU   11                                             WMT 12/75
RC       EQU   12                                             WMT 12/75
RD       EQU   13                                             WMT 12/75
RE       EQU   14                                             WMT 12/75
RF       EQU   15                                             WMT 12/75
         ST    RB,R11          SAVE REGISTER 11.
PUTVTOCS LA    2,FMT1
         TM    3(4),X'80'      IS IT IS
         BZ    PTNOIS1         IF NOT, THEN FORGET IT
         LA    2,FMT2          GET FMT2 ADDRESS I N 2
PTNOIS1  EQU   *
         XC    135(5,2),135(2) WIPE OUT FMT 3 POINTER
         CLI   FMT1+59,3       ARE THERE MORE THAN 3 EXTENTS
         BNH   PTNOFMT3        IF <= 3 - NO FORMAT 3
         LA    5,FMT3+4        POINT TO FIRST
         LA    6,OUTEXTS+3*8   POINT TO THIRD EXTENT
         LA    7,4             FOUR EXTENTS
PT3MV1   MVC   2(8,5),0(6)     MOVE AN EXTENT
         CLC   0(8,6),ZEROES   SEE IF EXTENT IS ZERO
         BNE   GOON1           IF NOT, THEN GOOD
         XC    0(2,5),0(5)     WIPE OUT FIRST TWO BYTES
GOON1    EQU   *
         LA    5,10(5)         INCR 10
         LA    6,8(6)          INCR 6
         BCT   7,PT3MV1        KEEP IT UP
         LA    5,FMT3+45
         LA    7,9             9 EXTENTS DOWN HERE
PT3MV2   MVC   2(8,5),0(6)     MOVE AN EXTENT
         CLC   0(8,6),ZEROES   SEE IF EXTENT IS ZERO
         BNE   GOON2           IF NOT, THEN GOOD
         XC    0(2,5),0(5)     WIPR OUT FIRST TWO BYTES
GOON2    EQU   *
         LA    5,10(5)         INCR 5
         LA    6,8(6)          INCR 6
         BCT   7,PT3MV2
         WRTVTOC FMT3,135(2)   WRITE FORMAT3 AND MOVE ADDRESS
PTNOFMT3 TM    3(4),X'80'      SEE IF IS
         BZ    PTNOIS2         IF NOT, THEN FORGET IT
         WRTVTOC FMT2,FMT1+135 MOVE AND WRITE FORMAT 2
PTNOIS2  EQU   *
         LA    6,OUTEXT        POINT TO OUT EXTENT
         LA    5,FMT1+105      IN DSCB TOO
         LA    7,3             ONLY THREE EXTENTS IN FMT1
         MVI   HFLG,0                   FIRST CLEAR *SDS*
         CLI   0(5),X'40'               IS EXT 1 FOR SUL *SDS*
         BNE   PT3MV3                   NO OK               *SDS*
         MVI   HFLG,255                 YES, SET FLAG   *SDS*
PT3MV3   MVC   2(8,5),0(6)     MOVE THE EXTENT
         CLC   0(8,6),ZEROES   SEE IF EXTENT IS ZERO
         BNE   GOON3           IF NOT, THEN GOOD
         XC    0(2,5),0(5)     WIPE OUT FIRST TWO BYTES
GOON3    EQU   *
         LA    6,8(6)          INCR 6
         LA    5,10(5)         INCR 5
         BCT   7,PT3MV3            KEEP MOVING
* SUL NUM OF EXTENTS DOES NOT COUNT THE LABEL EXTENT.   ** WMT **
         TM    FMT1+105,X'40'      TEST FOR SUL        ** WMT **
         BZ    NORMAL              R IF NOT SUL ** WMT **
* SUB 1 FROM NUMBER OF EXTENTS. ** WMT **
         XR    1,1                 CLEAR R1 FO IC  ** WMT **
         IC    1,FMT1+59           GET # OF EXTENTS  ** WMT **
         BCTR  1,0                 SUBTRACT 1  ** WMT **
         STC   1,FMT1+59           SAVE NEW NUM OF EXTENTS ** WMT **
NORMAL   DS    0H
         WRTVTOC FMT1          WRITE OUT THE FORMAT 1
*  TEST FOR SUL   ** WMT **
         TM    FMT1+105,X'40'      TEST FOR SUL  ** WMT **
         BZ    NORM1               BR IF NOT SUL  ** WMT **
         XR    1,1                 CLEAR R1 FOR IC  ** WMT **
         IC    1,FMT1+59           GET EXTENT COUNT ** WMT **
         LA    1,1(0,1)            BUMP BY 1 ** WMT **
         STC   1,FMT1+59           SAVE EXTENT CNT ** WMT **
NORM1    DS    0H
         CLI   FMT1+59,0       ARE THERE NO EXTENTS
         BE    TELLDS          IF SO, JUST SAY WE COPIED IT
         EJECT
*        THIS CODE WILL COPY THE DATASET TRACK BY TRACK
         MVI   FKEOF,0        CLEAR FAKE END OF FILE SWITCH
         LA    5,INEXT         GET INPUT EXTENT ADDRESSS IN 5
         LA    6,OUTEXT        GET OUT EXTENT ADDRESS IN 6
         MVC   INDKAD,INEXT    MOVE FIRST EXTENT
         MVC   OTDKAD,OUTEXT   MOVE OUTPUT EXTENT
         MVC   FRSTSW,ZEROES   CLEAR SWITCHES
MVTRK    EQU   *
         STM   5,6,SVR5R6      SAVE REGS 5 & 6
         LA    7,RDCNTCCW      GET ADDRESS OF READ COUNT CCWS
         ST    7,INCCWAD       STORE IN IOB
         MVC   INCCHH,INDKAD   MOVE FIRST TRACK ADDRESS TO IOB
         CLC   INCCHH,ZEROES  SEE IF TRACK ZERO
         BNE   FRSTREAD       IF NOT, LET THE READ GO
         CLI   FKEOF,255      ONE FAKE EOF ALREADY?
         BE    IOABEND        IF SO, KILL US
         MVI   FKEOF,255      TURN ON FAKE EOF
         L     2,DACCWADI     GET ADDRESS OF READ R0
         MVI   16(2),3        PUT IN NO-OP AT 3RD CCW
         MVI   20(2),X'20'    TURN ON SLI BIT IN NO-OP CCW
         MVC   14(2,2),=H'8'  MOVE IN LENGTH FOR EOF RECORD
         MVI   23(2),1        MAKE LENGTH AT LEAST 1 IN NO-OP CCW
         L     3,DATADI       ADDRESS OF DATA
         XC    0(24,3),0(3)   WIPE OUT DATA AREA
         MVI   12(3),1         PUT IN RECORD 1
         B     NOALT          GO LOOK AT LAST WRITE
FRSTREAD EQU   *
         MVI   INECB,0         CLEAR ECB
         MVI   INIOB,X'42'     SET CC & UNREL BITS
         EXCP  INIOB           READ COUNTS ON THIS TRACK
         WAIT  ECB=INECB       WAIT FOR I/O TO COMPLETE
         CLI   INECB,X'41'     SEE IF ERROR DETECTED
         BNE   IOABEND         IF NOT, THEN SOMETHING WRONG
         CLI   INIOB+3,X'08'   SEE IF NO RECORD FOUND
         BNE   IOABEND         IF NOT, THEN KILL
         L     7,INCSW         GET LAST CCWADDRESS+8
         LA    7,0(7)          CLEAR HIGH BYTE
         L     8,RDCNTAD       GET COUNT AREA ADDRESS
         LA    8,0(8)          CLEAR I/O OP CODE
         SR    7,8             SUBTRACT STARTING ADDRESS
         BNP   IOABEND         IF NOT POSITIVE KILL
         SRL   7,3             DIVIDE BY 8
         LR    11,7            SAVE REG 7
         L     3,DATADI        GET INPUT DATA ADDRESS IN O
         L     2,DACCWADI      GET ADDRESS OF INPUT CCWS
         L     8,RDCNTAD       GET ADDRESS OF FIRST CCWS
         LA    8,1600(8)       POINT TO COUNT AREAS
         LA    9,8             DATA LENGTH OF RECORD 0
         ST    3,0(2)          STORE ADDRESS
         MVI   0(2),X'06'      PUT IN READ DATA
         SR    15,15                   CLEAR 15 FOR RECORD # COMPARE
         B     ADDLNGTH        GO TO MAIN ROUTINE
INSETUP  EQU   *
         LA    15,1(15)                INCR. 15 FOR RECORD # COMPARE
         EX    15,RECOMP               MAKE SURE RECORD NUMBER THE SAME
         BNE   CNTDN                   IF NOT THE SAME THEN QUIT
         ST    3,0(2)          STORE DATA ADDRESS INTO CCW
         MVI   0(2),X'1E'      PUT IN READ CKD
         LA    9,8             START COUNT WITH 8 BYTES CCHHRKDD
         SR    1,1             CLEAR 1 FOR IC
         IC    1,5(8)          GET KEYLENGTH IN 1
         LH    10,6(8)         GET DATA LENGTH
         LA    8,8(8)          POINT 8 AT NEXT COUNT AREA
         AR    1,10            GET KEY+DATA IN
         LTR   10,10           SEE IF DATA LENGTH NON-ZERO
         BNZ   LNGTHOK         IF NOT EOF GOODIE
         SR    1,1             CLEAR 1
         MVI   0(2),X'12'      CHANGE TO READ COUNT
         CLI   HFLG,255                 IS THIS SUL  *SDS*
         BNE   LNGTHOK                  NO       *SDS*
         LA    3,4(3)                   ALLOW FOR KEY IN SUL  *SDS*
LNGTHOK  AR    9,1             GET TOTAL LENGTH IN 9
ADDLNGTH EQU   *
         ST    9,4(2)          STORE LENGTH IN CCW
         MVI   4(2),X'40'      TURN ON CC BIT
         AR    3,9             GET 3 UP TO NEXT DATA AREA
         LA    2,8(2)          POINT 2 AT NEXT CCW
         BCT   7,INSETUP       KEEP GENERATING
CNTDN    EQU   *
         XC    0(8,2),0(2)     CLEAR NEXT CCW
         MVI   0(2),X'03'      SET UP NO-OP
         ST    9,4(2)          MAKE LENGTH NON-ZERO
         MVI   4(2),X'20'      TURN ON SLI BIT
TRYRAGN  EQU   *
         L     2,DATADI        GET ADDRESS OF INPUT
         MVI   INECB,0         CLEAR ECB
         MVI   INIOB,X'42'     TURN ON CC&UNRELATED BIT
         LA    15,RDDACCW      GET DATA READ CCW ADDRESS
         ST    15,INCCWAD      STORE INTO INPUT IOB
         EXCP  INIOB           READ THE WHOLE TRACK
         WAIT  ECB=INECB       WAIT FOR IT
         CLI   INECB,X'7F'     LOOK GOOD?
         BE    NOALT           IF GOOD, THEN ALL IS WELL
         CLI   INECB,X'41'     COMPLETE WITH ERRORS
         BNE   IOABEND         IF NOT, THEN KILL
         CLC   INCSW+4(2),=X'0C40'     SEE IF INCOR. LNGTH WITHOUT UC
         BNE   IOABEND         IF NOT, THEN BLOW OFF
         MVI   OVSW,255        TURN ON OVERFLOW SWITCH
NOALT    EQU   *
         CLI   FRSTSW,0        SEE IF WE'VE WRITTEN YET
         BE    ARND1           IF NOT, THEN DON'T WAIT ON LAST
OWAIT    EQU   *
         TM    OUTECB,X'40'    HAS LAST WRITE FINISHED
         BO    NOWAIT          IF SO, THEN GO AROUND WAIT
         WAIT  ECB=OUTECB      WAIT FOR WRITE TO FINISH
NOWAIT   EQU   *
         CLI   OUTECB,X'7F'    WAS LAST WRITE GOOD
         BNE   IOABEND         IF NOT, THEN KILL THYSELF
         L     7,DATADO        GET STARTING ADDRESS OF OUTPUT R0 DATA
         L     6,DACCWADO      GET ADDRESS OF WRITE CCWS
         CLC   INR0DATA,0(7)   SEE IF EQUAL TO INPUT
         BE    OTR0GOOD        IF SO, WE'RE HAPPY
         MVC   0(8,7),INR0DATA         MOVE ALL OF R0 DATA
         CLI   R0FLAG,255              SEE IF FIRST PART IS DASD ADDR
         BNE   STWRTR0                 IF NOT, THEN START WRITE
         MVC   0(4,7),OUTCCHH          MOVE IN OUTPUT DASD ADDR
STWRTR0  EQU   *
         MVI   0(6),X'05'      CHANGE TO WRITE DATA
         MVI   4(6),X'00'      TURN OFF COMMAND CHAIN
         MVI   OUTIOB,X'42'    SET CC & UNRELATED
         CALL  R0WRT
         EXCP  OUTIOB          WRITE R0 DATA
         WAIT  ECB=OUTECB      WAIT FOR IT TO STOP
         CLI   OUTECB,X'7F'    SEE IF GOOD
         BNE   IOABEND         IF NOT, WIPE OUT
OTR0GOOD EQU   *
         CLI   LSTSW,0         SEE IF THAY WAS
         BNE   DSCOMPLT        IF SO, WE'RE FINISHED
         CLC   OTDKAD,ZEROES   IS OUTPUT ADDRESS ZERO
         BE    DSCOMPLT        IF SO, NO MORE OF THIS DATA SET
ARND1    EQU   *
         L     7,DATADO        GET ADDRESS OF TRACK OUTPUT DATA
         L     6,DACCWADO      GET ADDRESS OF WRITE CCWS
         L     2,DACCWADI      GET ADDRESS OF READ CCWS
         LA    1,UHL1-4                 FOR SUL KEY IF NEEDED *SDS*
         B     GSOCCW          GO PAST SOME CODE THE FIRST TIME
GENOCCW  EQU   *
         L     3,0(2)          GET CCHH AREA OF COUNT IN INPUT DATA
         MVC   0(4,3),OTDKAD   PUT IN NEW DASD ADDRESS
GSOCCW   EQU   *
         ST    7,0(6)          SAVE DATA ADDRESS IN OUPUT CCW
         CLI   HFLG,255                 IS SUL EXTENT *SDS*
         BNE   NOSUL                              *SDS*
         CLI   0(2),X'12'               WAS IT A EOF *SDS*
         BNE   BUMPSUL                  NO NEED TO SET KEY  *SDS*
         L     11,0(2)                  INPUT DATA AREA *SDS*
         MVC   8(4,11),0(1)             SET KEY     *SDS*
         LA    11,12                    FOR COUNT AND KEY  *SDS*
         STH   11,6(2)                  NEW LENGTH   *SDS*
         LA    1,UHL8                   UPDATE    *SDS*
BUMPSUL  LA    1,4(1)                   NEXT KEY   *SDS*
NOSUL    MVI   0(6),X'1D'      PUT IN WRTIE CKD CCW  *SDS*
         LH    9,6(2)          GET LENGTH FROM READ CCW
         ST    9,4(6)          STORE IN WRTIE CCW
         MVI   4(6),X'40'      TURN ON CC BIT
         AR    7,9             7 NOW POINTS AT NEXT DATA AREA
         LA    6,8(6)          POINT 6 AT NEXT OUTPUT CCW
         LA    2,8(2)          POINT 2 AT NEXT INPUT CCW
         CLI   0(2),X'03'      IS THIS A NO-OP CCW
         BNE   GENOCCW         IF NOT, KEEP GENERATING
         CLI   OVSW,255        SEE IF WE HAVE AN OVERFLOW SEGMENT
         BNE   NOOV            IF NOT, THEN FORGET IT
         L     1,=F'-8'        SET UP 1
         AR    1,6             POINT 1 TO LAST WRITE CCW
         MVI   0(1),X'01'      CHANGE TO SPECIAL WRITE CKD
         MVI   OVSW,0          CLEAR THE SWITCH
NOOV     EQU   *
         MVC   0(8,6),0(2)     MOVE THE NO-OP CCW
         L     3,DACCWADO      GET ADDRESS OF FIRST OUTPUT CCW
         MVI   0(3),X'06'      CHANGE TO READ OUTPUT TRACK R0
         L     6,DATADO        GET START OF OUTPUT DATA
         L     2,DATADI        GET START OF INPUT ADDRESS IN 2
         SR    7,6             GET LENGTH OF TRACK DATA IN R7
         LR    3,7             GET LENGTH IN 3 ALSO
         MVCL  6,2             MOVE A TRACKS WORTH OF DATA
         MVC   OUTCCHH,OTDKAD  MOVE NEXT TRACK ADDRESS TO IOB
         MVI   OUTECB,0        CLEAR ECB
         MVI   OUTIOB,X'42'    SET CC & UNRELATED
         CALL  TRKWRT
         EXCP  OUTIOB          WRITE THE WHOLE TRACK
         L     15,DATADI       GET ADDRESS OF INPUT DATA
         MVC   INR0DATA,0(15)  MOVE INPUT R0 DATA
         MVI   R0FLAG,0                CLEAR R0 FLAG
         CLC   INCCHH,INR0DATA         SEE IF TRACK ADDR IN R0
         BNE   NTTRKAD                 IF NOT, THEN FORGET IT
         MVI   R0FLAG,255              TURN ON THE FLAG
NTTRKAD  DS    0H
         MVI   FRSTSW,X'FF'    RESET FIRST WRITE SWITCH
         LH    9,TRKUSD        GET TRACKS USED
         BCT   9,NXTRK         REDUCE BY 1
         MVI   LSTSW,X'FF'     SET LAST WRITE SWITCH
         B     OWAIT           GO WAIT FOR LAST WRITE TO STOP
NXTRK    EQU   *
         STH   9,TRKUSD        SAVE REMAINING TRACKS
         LM    5,6,SVR5R6      RESTORE REGS 5 & 6
         LH    9,INDKAD+2      GET INPUT TRACK ADDR
         LA    9,1(9)          INCR BY 1
         CH    9,TRKPCYL       CHECK WITH HIGHEST TRACK
         BL    INTRKGD         IF LOW, GOOS
         LH    9,INDKAD        GET CYL #
         LA    9,1(9)          INCR
         STH   9,INDKAD        STORE BACK
         SR    9,9             CLEAR TRK #
INTRKGD  STH   9,INDKAD+2      SAVE TRACK #
         CLC   INDKAD,4(5)     CHECK EXTENT
         BNH   INEXTOK         IF NOT HIGH THIS EXTENT STILL GOOD
         MVI   HFLG,0                   CLEAR FOR OTHER EXTENTS *SDS*
         LA    5,8(5)          POINT AT NEXT EXTENT
         MVC   INDKAD,0(5)     MOVE FIRST TRACK ADDR OF THIS EXTENT
INEXTOK  EQU   *
         LH    9,OTDKAD+2      GET OUTPUT TRACK #
         LA    9,1(9)          INCR
         CH    9,TRKPCYL       CHECK WITH HIGHEST TRACK
         BL    OTTRKGD         IF LOW, GOOD
         LH    9,OTDKAD        GET CYLINDER #
         LA    9,1(9)          INCR
         STH   9,OTDKAD        STORE CYL# BACK
         SR    9,9             CLEAR 9
OTTRKGD  EQU   *
         STH   9,OTDKAD+2      SAVE TRK
         CLC   OTDKAD,4(6)     CHECK WITH EXTENT END
         BNH   MVTRK           IF NOT HIGH, ALL IS WELL
         LA    6,8(6)          POINT TO NEXT EXTENT
         MVC   OTDKAD,0(6)     MOVE NEW EXTENT START
         B     MVTRK
         B     MVTRK           GO MOVE NEXT TRK
RECOMP   CLI   4(8),0                  MAKE RECORD # COMPARE
DSCOMPLT EQU   *               FINISHED COPYING DATA SET
TELLDS   EQU   *
         MVC   DSNAME,FMT1     MOVE DATA SET NAME
         LA    1,DSNAME-1      GET ADDRESS
*        CALL WRTLINE AS IF IT WERE BAL IN THIS ROUTINE.      WMT 04/76
CALLWRT  DS    0H                                             WMT 04/76
         L     RF,=V(WRTLINE)     GET START ADDR.             WMT 04/76
         BALR RB,RF               CALL WRTLINE.               WMT 04/76
         L     RB,R11             RESTORE R11.                WMT 04/76
         L     RB,XXX000          RESTORE RETURN ADDR.        WMT 06/76
         L     RC,X5              RESTORE OLD BASE.           WMT 04/76
         BR    RB                 RETURN TO THE CALLER.       WMT 04/76
IOABEND  DS    0H                                             WMT 04/76
         MVC   BADCPY,FMT1              MOVE DATA SET NAME *SDS*
         LA    1,BADCPY-1               FOR MSG WRITE ROUT *SDS*
         B     CALLWRT            CALL PRINT ROUTINE.         WMT 04/76
X5       DC    F'0'               RC SAVE AREA.               WMT 04/76
XXX000   DC    F'0'               RETURN ADDRESS.             WMT 06/76
         LTORG
         EJECT
SAVE     DSECT                                                WMT 04/76
         DC    9D'0'                                          WMT 04/76
IOER     EQU   *              I/O ERROR ROUTINE
         USING *,15           15 IS BASE FOR A WHILE
         MVI   OUTER,255      INDICATE ERROR
         BR    14             AND RETURN
         DROP  15                                             WMT 12/75
CRASH    DS    0H                                             WMT 12/75
EX       EX    0,EX               BLOW WITH C03.              WMT 12/75
VTOC     DC    CL8'SYSVTOC'    MAJOR QUEUE NAME
HEADER   DC    CL121'1DISK SQUISHER'
         ORG   *-8
         DC    C'PAGE '
PAGE#UP  DS    CL3
         ORG
         DC    CL121' '
         ORG   *-120
DSNAME   DS    CL44
         DC    C'  COPIED SUCCESSFULLY'
         ORG
         DC    CL121' '                 *SDS*
         ORG   *-120                    *SDS*
BADCPY   DS    CL44                     *SDS*
         DC    C'  COPY FAILED  I/O ERROR ************'   *SDS*
         ORG
PAGE#    DC    PL3'0'
LINE#    DC    P'60'
ENDMES   DC    CL121'0DISK SQUISHER COMPLETE'
OLDVOL   DS    CL6                      *SDS*
TAGVOL   DS    CL6                      *SDS*
REPL     DS    CL6                      *SDS*
ENQL     ENQ   (VTOC,OLDVOL,E,6,SYSTEMS,VTOC,TAGVOL,E,6,SYSTEMS),      +
               MF=L                     *SDS*
WTOR     WTOR  'COPYVOL VERIFY ENTER TARGET VOL FOR XXXXXX',REPL,6,    +
               INECB,MF=L               *SDS*
BDOPMES  DC    CL121' OPERATOR DENIED YOUR REQUEST TO SQUISH VOLUME.'
R5R6     DS    2F
ALLTRKS  DC    F'16650'           TOTAL TRACKS ON A PACK.     GJG8/76
MRGSW    DC    X'00'              NOT A MERGE INITIALLY.      WMT 12/75
SAV14    DS    F                  R14 SAVE AREA.              WMT 12/75
RG6TO15  DS    10F                TEMP SAVE AREA.             WMT 12/75
CTLG     DC    CL44'SYSCTLG'   NAME OF CATALOG DATA SET
BIGGIE   DC    H'10000'
OTVTCEND DS    H               LAST TRACK NUMBER IN OUTPUT VTOC
OUTER    DS    X              IOERROR BYTE
R0FLAG   DS    X
         DS    0D
ABSHD    DC    AL3(0)
ABSAD    DS    XL5
LSTFM1   DS    F
THIRD    DC    AL3(3),AL1(0)
ZEROES   DC    XL8'0'
OVSW     DC    X'0'            OVERFLOW SWITCH
FKEOF    DS    X
#TRKS    DS    H
FULL     DS    F
STAD     DS    F
ENDAD    DS    F
R11      DS    F
INDKAD   DS    F
OTDKAD   DS    F
DSLSTAD  DS    A
RGSAVE   DS    18F
PFMT5AD  DC    A(PFMT5)
FPFMT5AD DS    A
PFMT5    DC    (60*3)F'0'                                      DART4/78
HFLG     DS    X                        *SDS*
UHL1     DC    C'UHL1UHL2UHL3UHL4UHL5UHL6UHL7'        *SDS*
UHL8     DC    C'UHL8UTL0UTL1UTL2UTL3UTL4UTL5UTL6UTL7UTL8' *SDS*
VSAMSW   DC    X'0'                                               *BAR*
VSAMSAVE DS    XL22                                               *BAR*
INDISK   DCB   MACRF=E,DDNAME=SYSUT1,EXLST=INJFCBAD,                   +
               IOBAD=INIOB
OUTDISK  DCB   MACRF=E,DDNAME=SYSUT2,EXLST=OTJFCBAD,                   +
               IOBAD=OUTIOB
BLOCKAD  DC    F'0'
REC#     EQU   BLOCKAD+2
CCHHR    EQU   X'23'           OFFSET OF CCHHR IN IOB
FMT1     DS    140C
FMT2     DS    140C
FMT3     DS    140C
FMT5     DS    140C
VTOCOUT  DS    140C
FMT4     EQU   VTOCOUT
VTOCIN   DS    140C
DACYLS   DC    H'0,200,25,80,246,980,48,96,200,404,0,555,0,808' GJG8/76
#EXTS    DS    H
TCYL     DS    H
TRKALC   DS    H
TRKUSD   DS    H
INEXTS   DC    16D'0'
OUTEXTS  DC    16D'0'
OUTEXT   EQU   OUTEXTS
INEXT    EQU   INEXTS
DISKIN   DCB   DSORG=PS,MACRF=RP,DDNAME=SYSUT1,RECFM=F,KEYLEN=44,      +
               LRECL=96,BLKSIZE=96,EXLST=INJFCBAD
INJFCBAD DS    0F
         DC    X'87'
         DC    AL3(INJFCB)
INJFCB   DS    44F
         READ  VTOCINCB,SF,DISKIN,MF=L
DISKOUT  DCB   DSORG=DA,MACRF=(RIC,WIC),DDNAME=SYSUT2,OPTCD=R,         +
               RECFM=F,KEYLEN=44,BLKSIZE=96,EXLST=OTJFCBAD,SYNAD=IOER
OTJFCBAD DS    0F
         DC    X'87'
         DC    AL3(OUTJFCB)
OUTJFCB  DS    44F
         READ  VTCOUTDB,DI,DISKOUT,,'S',,BLOCKAD+1,MF=L
         EJECT
INIOB    DS    0D
         DC    X'42'           CC AND UNRELATED
         DS    XL3
         DC    A(INECB)
INCSW    DC    2A(0)
INCCWAD  DS    A
         DC    A(INDISK)
         DC    2A(0)
         DC    XL3'0'
INCCHH   DC    XL4'0'
         DC    X'0'
         DC    C'SQUV'
         DC    A(VTOCIN)
INCYLS   DS    H
INECB    DC    F'0'
OUTIOB   DS    0D
         DC    X'42'
         DS    XL3
         DC    A(OUTECB)
OUTCSW   DC    2A(0)
         DC    A(OUTCCW)       ADDRESS OF OUTPUT CCW
         DC    A(OUTDISK)
         DC    2A(0)
         DC    XL3'0'
OUTCCHH  DC    XL4'0'
         DC    X'0'
         DC    C'SQUV'
         DC    A(FMT4)
OUTCYLS  DS    H
OUTECB   DC    F'0'
NOREC    EQU   X'20'
OUTCCW   CCW   X'31',OUTCCHH,X'40',5   SEARCH FOR RECORD 0
         CCW   X'08',OUTCCW,0,0        KEEP LOOKING
DACCWADO CCW   X'08',0,0,0     THIS TIC WILL BE MODIFIED BY PROG
RDDACCW  CCW   X'31',INCCHH,X'40',5    LOOK FOR RECORD 0
         CCW   X'08',RDDACCW,0,0       TIC *-8
DACCWADI CCW   X'08',0,0,0     TIC TO GOTMAIN CCW
RDCNTCCW CCW   X'31',INCCHH,X'40',5    SEARCH FOR RECORD 0
         CCW   X'08',RDCNTCCW,0,0
RDCNTAD  CCW   X'80',0,0,0     WILL BE FILLED IN BY INIT ROUTINE
DATADI   DS    F               ADDRESS OF INPUT DATA
DATADO   DS    F               ADDRESS OF OUTPUT DATA
FRSTSW   DS    CL2
LSTSW    EQU   FRSTSW+1
SVR5R6   DS    2F              OTHER SAVE AREA FOR REGS 5 & 6
INR0DATA DS    CL8
         EJECT
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,RECFM=FBA,LRECL=121,  +
               BLKSIZE=968
         LTORG
FREESPAC DC    16650X'00'         EVERYTHING UNALLOCATED FIRSTGJG8/76
         DC    X'FF'           TO INSURE THE END
VTOCINDB EQU   VTOCINCB
RGSAV    EQU   RGSAVE
#FREXTS  EQU   #EXTS
TRKPCYL  EQU   VTOCIN+64
#CYL     EQU   VTOCIN+62
         END   PUTDS                                          WMT 04/76
