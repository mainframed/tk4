LISTCX   TITLE 'LISTCX - LIST CATALOG AND VTOC BY INDEX LEVELS'
         MACRO
&NAME    ENTER &BASE,&HDR,&LENGTH,&IBFINT,&REG
         LCLA  &L,&M
         LCLC  &NAM
.*********************************************************************.
.*                                                                   *.
.*  THE 'ENTER' MACRO IS USED TO PRODUCE A RE-ENTRANT ENTRY ROUTINE. *.
.*                                                                   *.
.*  THE ENTER MACRO IS USED IN PLACE OF A 'SAVE' MACRO TO SAVE THE   *.
.*  GENERAL PURPOSE REGISTERS AND TO ESTABLISH ADDRESSABILITY BY     *.
.*  MEANS OF A USING.  IT ALSO ESTABLISHES THE FORWARD AND BACKWARD  *.
.*  SAVEAREA CHAINS.  THE SAVEAREA FOR THE PROGRAM CONTAINING THE    *.
.*  ENTER MACRO IS ACQUIRED DYNAMICALLY BY MEANS OF A 'GETMAIN'      *.
.*  MACRO.  IN ADDITION, IF THIS PROGRAM USES ANY FORTRAN IV SUB-    *.
.*  ROUTINES (EITHER PROGRAMMER CODED OR LIBRARY ROUTINES) 'ENTER'   *.
.*  MAY BE USED TO ESTABLISH A LINKAGE TO THE FORTRAN INTERRUPT      *.
.*  HANDLER (IBFINT) TO INITIALIZE IT.                               *.
.*                                                                   *.
.*  THE LABEL OF THIS MACRO IS USED TO DEFINE AN ENTRY POINT TO THE  *.
.*  PROGRAM.                                                         *.
.*                                                                   *.
.*  THE FIRST OPERAND SPECIFIES THE BASE REGISTER TO BE USED IN THE  *.
.*  PROGRAM.  A USING IS ISSUED FOR THIS REGISTER AND IT IS LOADED   *.
.*  WITH THE ENTRY POINT ADDRESS.  IF THIS OPERAND IS OMITTED, OR IS *.
.*  INVALID, REGISTER 12 IS ASSUMED.  REGISTERS 0,1,13 OR 14 MAY NOT *.
.*  BE USED AS THE BASE REGISTER.                                    *.
.*                                                                   *.
.*  THE SECOND OPERAND IS USED AS AN ENTRY POINT IDENTIFIER FOR THE  *.
.*  PROGRAM IN THE SAME MANNER THAT 'SAVE' GENERATES ITS IDENTIFIER. *.
.*  IF AN ASTERISK IS USED (*) THE LABEL IS USED AS THE IDENTIFIER.  *.
.*  IF THIS OPERAND IS OMMITTED, NO ID IS GENERATED.  TT MUST NOT    *.
.*  CONTAIN ANY BLANKS AND SHOULD NOT BE ENCLOSED IN APOSTROPHES.    *.
.*  IF DELIMITERS ARE REQUIRED FOR EASY READING, USE PERIODS OR THE  *.
.*  BREAK CHARACTER (_),  E.G., ENTRY_POINT_TO_MAIN_PROG .  IF       *.
.*  APOSTROPHES (') OR AMPERSANDS (&) ARE USED, USE TWO ADJACENT     *.
.*  CHARACTERS RATHER THAN ONE TO REPRESENT THE REQUIRED CHARACTER.  *.
.*                                                                   *.
.*  THE THIRD OPERAND IS THE NUMBER OF ADDITIONAL BYTES TO BE        *.
.*  ACQUIRED BY THE GETMAIN THAT ACQUIRES THE SAVEAREA.  THESE BYTES *.
.*  ARE LOCATED IMMEDIATELY BEHIND THE SAVEAREA AND ARE PADDED TO A  *.
.*  DOUBLE WORD LENGTH AND ARE DOUBLE-WORD ALIGNED.  THE AREA WILL   *.
.*  BE ACQUIRED FROM SUBPOOL 0.                                      *.
.*                                                                   *.
.*  THE FOURTH OPERAND, IF PRESENT, CAUSES A LINKAGE TO 'IBFINT', THE*.
.*  FORTRAN INTERUPT HANDLER INITIALIZER.  IF THERE IS ANY POSSI-    *.
.*  BILITY OF THE LOWER LEVEL FORTRAN PROGRAM CAUSING AN ERROR       *.
.*  INTERRUPT OR A TERMINAL RETURN TO THE SUPERVISOR, THIS FORTRAN   *.
.*  INITIALIZER MUST BE USED.  WHEN USED, REG13 MUST POINT TO A SAVE *.
.*  AREA WHOSE REG14 FIELD CONTAINS THE RETURN POINT TO THE          *.
.*  SUPERVISOR.  THIS OPERAND SHOULD BE 'IBFINT' BUT ANYTHING WILL   *.
.*  BE ACCEPTED.                                                     *.
.*                                                                   *.
.*   THE FIFTH OPERAND, IF PRESENT, MUST BE NOREG TO DENOTE THE      *.
.*   EXCLUSION OF REGISTER ASSIGNMENTS.                              *.
.*                                                                   *.
.*  EXAMPLES:  MAIN  ENTER  12,MY_MAIN_PROG,100,IBFINT               *.
.*             SUB1  ENTER  11,*,50                                  *.
.*                                                                   *.
.*  WARNING:  REGISTER 15 IS 'USED' AND 'DROPPED' DURING THE EXPAN-  *.
.*  SION OF THE ENTER MACRO.  IT WILL BE IN EFFECT AT THE END OF THE *.
.*  EXPANSION IF IT HAS BEEN SPECIFIED AS THE BASE REGISTER OPERAND. *.
.*                                                                   *.
.*********************************************************************.
         AIF   ('&REG' NE 'NOREG').REGAS
         SPACE    1
*        ***   NO REGISTER ASSIGNMENTS SPECIFIED   ***
         AGO   .NO1
.REGAS   ANOP
         SPACE     3
*          ***  REGISTER ASSIGNMENTS   ****
         SPACE   1
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
.NO1     ANOP
         SPACE 3
*                            ENTRY ROUTINE
         SPACE 1
         AIF   (K'&NAME GE 1).OKLBL
         SPACE 1
         MNOTE 4,'*** NO LABEL PROVIDED. ENTRY NAME WILL BE GENERATED.'
         SPACE 1
&NAM     SETC  'IHB&SYSNDX.A'      GENERATE ENTRY NAME
&M       SETA  8
         AGO   .USING
.OKLBL   ANOP
&NAM     SETC  '&NAME'
.USING   USING &NAM.,15
         ENTRY &NAM
&NAM     B     IHB&SYSNDX             BRANCH OVER IDENTIFIER
&L       SETA  K'&HDR
         AIF   (&L LE 0).NOHDR     IF NO HEADER PROVIDED
.OKHDR   AIF   ('&HDR' EQ '*').STARLAB
         DC    AL1(&L)              LENGTH OF ID
         DC    C'&HDR.'
         AGO   .DROP
.STARLAB ANOP
         AIF   (&M NE 0).P3
&L       SETA  K'&NAME
         AGO   .P1
.P3      ANOP
&L       SETA  &M
         AGO   .P1
.NOHDR   DC    AL2(0)              IDENTIFIER LENGTH IS 0
         AGO   .DROP
.P1      DC    AL1(&L.),C'&NAM.'     ID LENGTH AND ID
.DROP    DROP  15                  WARNING:  REG15 IS DROPPED HERE
         AIF   (K'&BASE EQ 1 OR K'&BASE EQ 2).OKNUMBR
         AIF   (K'&BASE EQ 0).NOBASE  IF BASE REG OMITTED
.PUT     SPACE 1
         MNOTE 4,'*** INVALID BASE REGISTER SPECIFIED, REG 12 ASSUMED.'
.SPACE   SPACE 1
&L       SETA  12
         AGO   .STM
.NOBASE  SPACE 1
*        NO BASE REGISTER SPECIFIED.  REGISTER 12 WILL BE USED.
         AGO   .SPACE
.OKNUMBR ANOP
&L       SETA  &BASE
         AIF   (&L LT 2 OR &L GT 15 OR &L EQ 13 OR &L EQ 14).PUT
.STM     ANOP
IHB&SYSNDX STM 14,12,12(13)        STORE ALL REGS IN CALLER'S SAVEAREA
         USING &NAM.,&L                DEFINE BASE REGISTER
         AIF   (&L EQ 15).SKIP
         LR    &L,15               LOAD ENTRY ADDRESS INTO BASE REG
.SKIP    ANOP
&L       SETA  72                  SAVEAREA LENGTH SETUP
         AIF   (T'&LENGTH EQ 'O').SKIP1  IF ADDITIONAL LENGTH OMITTED
         AIF   (T'&LENGTH EQ 'N').SKIP2     IF TYPE IS SELF-DEFINING
         MNOTE 4,'*** LENGTH OF ADDITIONAL AREA IS INVALID. IGNORED.'
         AGO   .SKIP1
.SKIP2   ANOP
&L       SETA  72+&LENGTH          COMPUTE TOTAL GETMAIN LENGTH
.SKIP1   L     0,=A(&L.)            GETMAIN LENGTH GOES IN REG0
         GETMAIN R,LV=(0)
         XC    0(72,1),0(1)        CLEAR SAVEAREA TO ZERO
         ST    13,4(0,1)           SET SAVEAREA BACK CHAIN
         ST    1,8(0,13)           SET SAVEAREA FORWARD CHAIN
         AIF   ('&IBFINT' EQ '').NOIBFNT         NO LINKAGE DESIRED
         AIF   ('&IBFINT' EQ 'IBFINT').OKIBFNT   PROPER OPERAND PRESENT
         SPACE 1
         MNOTE 4,'*** INVALID FOURTH OPERAND. ''IBFINT'' ASSUMED.'
         SPACE 1
.OKIBFNT AIF   (&L GT 1).P2        WAS 0 OR 1 SPECIFIED AS THE BASE REG
         LM    0,1,20(1)           RESTORE BASE REG FOR NEXT INSTRUCT.
.P2      L     15,=V(IBCOM#)       INITIALIZE FORTRAN INTERRUPT HANDLER
         BAL   14,64(0,15)         ENTRY POINT IS AT IBCOM# + 64
         LM    14,15,12(13)        RESTORE 14-15 AS BEFORE IBFINT CALL
.NOIBFNT LR    13,1                PUT LOCAL SAVEAREA ADDRESS IN REG13
         L     1,4(0,13)           RESTORE REGS 0 & 1 FROM THE PLACE
         LM    0,1,20(1)             WHERE SAVED IN CALLER'S SAVE AREA
         SPACE 1
         MEND
         EJECT
         MACRO
&NAME    LEAVE &SAVE,&CODE,&LENGTH,&T,&NR
.*********************************************************************.
.*                                                                   *.
.*  THE 'LEAVE' MACRO IS DESIGNED TO PRODUCE AN EXIT ROUTINE THAT IS *.
.*  USED IN COMBINATION WITH THE 'ENTER' MACRO.  IT PRODUCES A       *.
.*  COMPANION RE-ENTRANT ROUTINE FOR 'ENTER'.                        *.
.*                                                                   *.
.*  ALL OPERANDS ARE OPTIONAL AND MAY BE OMITED AS DESIRED.  ANY     *.
.*  OPERAND TO THE LEFT OF ONE THAT IS USED MUST BE PRESENT OR MUST  *.
.*  BE INDICATED AS A NULL PARAMETER BY THE USE OF A COMMA.          *.
.*                                                                   *.
.*  A LABEL MAY BE WRITTEN FOR THE MACRO.  IT WILL ESTABLISH A POINT *.
.*  THAT THE USER MAY BRANCH TO TO ENTER THE 'LEAVE' MACRO.          *.
.*                                                                   *.
.*  THE FIRST OPERAND EXPRESSES THOSE REGISTERS WHICH THE SUBROUTINE *.
.*  WANTS TO RETURN TO THE CALLING PROGRAM UNCHANGED FROM THEIR      *.
.*  CURRENT VALUES. THIS OPERAND IS EXPRESSED AS A SINGLE NUMBER OR, *.
.*  AS A PAIR OF NUMBERS ENCLOSED WITHIN PARENTHESES AND SEPARATED BY*.
.*  A COMMA.  THE NUMBER OR NUMBERS MUST BE IN THE RANGE 0 - 12. THE *.
.*  FIRST REGISTER MAY BE HIGHER NUMBERED THAN THE SECOND REGISTER.  *.
.*                                                                   *.
.*  THE SECOND OPERAND IS USED AS A RETURN CODE IN REG15.  THE USER  *.
.*  CODES AN EXPLICIT NUMBER (0 - 4095) OR USES THE SPECIAL REGISTER *.
.*  NOTATION '(N)' , WHERE N IS A GPREG THAT ALREADY CONTAINS THE    *.
.*  VALUE TO BE USED AS THE RETURN CODE.  THE RETURN CODE WILL BE    *.
.*  IN REG15 WHEN THE RETURN IS COMPLETED.  IF THIS OPERAND IS       *.
.*  OMITTED, REGISTER 15 WILL BE RESTORED TO ITS VALUE ON ENTRY.     *.
.*                                                                   *.
.*  THE THIRD OPERAND IS THE NUMBER OF ADDITONAL BYTES BEYOND THE 72 *.
.*  BYTE SAVEAREA THAT WERE ACQUIRED BY THE 'ENTER' MACRO.  THESE    *.
.*  BYTES WILL BE RELEASED ALONG WITH THE SAVEAREA UNLESS THE 'NR'   *.
.*  OPERAND IS CODED.  THE AREA FREED IS IN SUBPOOL 0.               *.
.*                                                                   *.
.*  THE FOURTH OPERAND IS THE LETTER 'T'.  IT PERFORMS THE SAME      *.
.*  FUNCTION AS THE OS 'RETURN' MACRO'S 'T' PARAMETER, I.E., IT      *.
.*  FLAGS THE REGISTER 14 FIELD IN THE HIGHER SAVEAREA TO INDICATE   *.
.*  THAT A RETURN HAS OCCURRED.                                      *.
.*                                                                   *.
.*  THE FIFTH OPERAND INDICATES THAT THE LEAVE MACRO IS NOT TO       *.
.*  RELEASE THE SAVEAREA POINTED TO BY REG13.  THIS PERMITS THE      *.
.*  MACRO TO BE USED IN NON-REENTRANT PROGRAMS.  IT SHOULD BE THE    *.
.*  LETTERS 'NR'.                                                    *.
.*                                                                   *.
.*  EAMPLES:  LEAVE (0,1),8,100,T,NR     LEAVE 1,(15),,,NR           *.
.*                                                                   *.
.*  WARNING: REG14 AND REG13 MAY NOT BE SAVED THROUGH THE EXECUTION  *.
.*           OF THE LEAVE MACRO. NEITHER REGS 13 OR 14 MAY BE USED   *.
.*           TO PROVIDE A SOURCE FOR THE RETURN CODE.                *.
.*                                                                   *.
.*********************************************************************.
         LCLA  &WORK1,&WORK2,&OFFSET
         SPACE 3
*                            EXIT ROUTINE
         SPACE 1
&NAME    L     14,4(0,13)          PICKUP PTR TO HIGHER SAVE AREA
.CKCODE  AIF   (T'&CODE EQ 'O').CKSAVE      WAS A RETURN CODE OMITTED?
         AIF   ('&CODE'(1,1) EQ '(').INREG  YES.  IS IT IN A GPREG?
         AIF   (&CODE LT 0 OR &CODE GT 4095).BADCODE  IS IT IN RANGE?
         LA    15,&CODE                PUT RETURN CODE IN REG15
.STORE15 ST    15,16(0,14)         STORE RETURN CODE IN REG 15 SAVESPOT
.CKSAVE  AIF   (T'&SAVE EQ 'O').CHECKNR     WAS &SAVE OMITTED?
&WORK1   SETA  &SAVE(1)            NO, CHECK VALIDITY OF 1ST SAVE OPND
         AIF   (&WORK1 LT 0 OR &WORK1 GT 12).BADSAVE  IF OUTSIDE RANGE
         AIF   (N'&SAVE EQ 1).ONESAVE  ONLY ONE REG TO SAVE?
         AIF   (N'&SAVE NE 2).TOOMANY  NO. IS A RANGE SPECIFIED?
.IGNORE  ANOP
&WORK2   SETA  &SAVE(2)            PICKUP SECOND SAVE REG NUMBER
         AIF   (&WORK2 LT 1 OR &WORK2 GT 12).BADSAVE     CHECK VALIDITY
         AIF   (&WORK1 EQ &WORK2).SAMSAVE   SAME REG AS BOTH OPNDS?
&OFFSET  SETA  &WORK1*4+20         GET OVER WORDS 1 - 5 OF SAVE AREA
         AIF   (&WORK1 GT &WORK2).STORE2    SAVE REG1 GREATER THAN REG2
         STM   &WORK1,&WORK2,&OFFSET.(14)         SAVE THE REGISTERS
.CHECKNR AIF   (T'&NR EQ 'O').COMMON        RETAIN CURRENT SAVEAREA?
         AIF   ('&NR' EQ 'NR').RESET        SKIP OVER FREEMAIN CODE
         AIF   ('&NR' NE 'NR').BADNR
.COMMON  LR    1,13                SETUP TO FREE LOCAL SAVE AREA
&WORK1   SETA  72                  STANDARD SAVEAREA SIZE TO FREE
         AIF   (T'&LENGTH EQ 'O').P1       IF NO LENGTH, SKIP RECOMPUTE
         AIF   (T'&LENGTH EQ 'N' OR T'&LENGTH EQ 'U').OKLENTH   IS THE
.*             LENGTH ATTRIBUTE SELF-DEFINING OR EQU'ED TO SOME SYMBOL?
         MNOTE 4,'*** LENGTH OPERAND (3RD) INVALID. IT IS NOT SELF-'
         MNOTE '    DEFINING OR IS NOT EQU ED TO A VALID SYMBOL.'
         AGO   .P1
.OKLENTH ANOP
&WORK1   SETA  72+&LENGTH          COMPUTE FREEMAIN SIZE
.P1      L     0,=A(&WORK1.)            LENGTH OF AREA TO BE FREED
         FREEMAIN R,LV=(0),A=(1)
.RESET   LR    13,14               RESET SAVEAREA POINTER
         LM    14,12,12(13)        RESTORE GPREGS
         AIF   (T'&T EQ 'O').RETURN         RETURN INDICATION DESIRED?
         AIF   ('&T' NE 'T').BADT             CORRECT CODE (T)?
.RETFLAG MVI   12(13),X'FF'        INDICATE RETURN TO CALLING PROGRAM
.RETURN  BR    14                  RETURN TO CALLING PROGRAM
         SPACE 1
         MEXIT
.BADSAVE SPACE 1
         MNOTE 4,'*** REGS TO BE SAVED NOT IN RANGE 0-12. IGNORED.'
         SPACE 1
         AGO   .CHECKNR
.SAMSAVE SPACE 1
         MNOTE 4,'*** REGS SPECIFIED FOR SAVING ARE AN INVALID RANGE.'
         MNOTE '      TREATED AS SAVE ONE REGISTER ONLY.'
         SPACE 1
.ONESAVE ANOP
&OFFSET  SETA  &WORK1*4+20         COMPUTE OFFSET INTO SAVEAREA
         ST    &WORK1,&OFFSET.(0,14)          SAVE SPECIFIED REGISTER
         AGO   .CHECKNR
.TOOMANY SPACE 1
      MNOTE 4,'*** TOO MANY REGS TO SAVE. 1ST && 2ND TAKEN AS A RANGE.'
         SPACE 1
         AGO   .IGNORE
.INREG   AIF   (&CODE(1) GT 15 OR &CODE(1) LT 0 ).BADCODE
         AIF   (&CODE(1) EQ 15).STORE15     CODE IS ALREADY IN REG15
         ST    &CODE(1).,16(0,14)         STORE RETCD IN REG15 SAVESPOT
         AGO   .CKSAVE
.BADNR   SPACE 1
       MNOTE *,'*** IMPROPER 5TH OPND, ''NR'' (NON-REENTRANT) ASSUMED.'
         SPACE 1
         AGO   .RESET
.BADT    SPACE 1
         MNOTE *,'*** IMPROPER 4TH OPND, ''T'' (FLAG RETURN) ASSUMED.'
         SPACE 1
         AGO   .RETFLAG
.STORE2  STM   &WORK1,12,&OFFSET.(14)         SPLIT REGS TO BE SAVED
         STM   0,&WORK2,20(14)            INTO TWO GROUPS
         AGO   .CHECKNR
.BADCODE SPACE 1
         MNOTE 4,'*** RETURN CODE NOT 0-4095 OR NOT IN VALID GPREG.'
         MNOTE '      ZERO WILL BE USED INSTEAD.'
         SPACE 1
.NOCODE  SR    15,15               ZERO REGISTER 15.
         AGO   .STORE15
         MEND
         EJECT
         MACRO
&NAME    SPLOC &PAR1,&PAR2,&PAR3,&PAR4,&MF=
         LCLA  &A1,&A2
         LCLB  &B(6)
         LCLC  &C
&A1      SETA  1792                                         *HMD 02/80*
&A2      SETA  4352
         AIF   (T'&NAME EQ 'O').GB1
&C       SETC  '&NAME'
.GB1     ANOP
&B(1)    SETB  (T'&MF EQ 'O')
         AIF   (N'&MF GT 2).E1
&B(2)    SETB  (T'&PAR1 NE 'O' AND '&PAR1' EQ 'NAME')
&B(3)    SETB  (T'&PAR2 NE 'O')
&B(4)    SETB  (T'&PAR3 NE 'O')
&B(5)    SETB  (T'&PAR4 NE 'O')
&B(6)    SETB  (N'&MF EQ 1)
         AIF   (NOT &B(2)).E2
         AIF   (&B(1)).SFORM
         AIF   ('&MF(1)' EQ 'L').LFORM
         AIF   ('&MF(1)' NE 'E').E1
         AIF   (T'&MF(2) EQ 'O').E7
         AIF   ('&MF(2)'(1,1) EQ '(').EB1
&C       LA    1,&MF(2)
&C       SETC  '        '
         AGO   .EB2
.EB1     AIF   ('&MF(2)'(1,3) NE '(1)').E5
.EB2     AIF   (NOT &B(3)).EB3
         AIF   ('&PAR2'(1,1) EQ '(').EREG1
&C       LA    15,&PAR2
&C       SETC  '        '
         ST    15,4(1)
         AGO   .EB3
.EREG1   ST    &PAR2(1),4(1)
.EB3     AIF   (NOT &B(4)).EB4
         AIF   ('&PAR3'(1,1) EQ '(').EREG2
&C       LA    15,&PAR3
&C       SETC  '        '
         ST    15,8(1)
         AGO   .EB4
.EREG2   ST    &PAR3(1),8(1)
.EB4     AIF   (NOT &B(5)).EB5
         AIF   ('&PAR4'(1,1) EQ '(').EREG3
&C       LA    15,&PAR4
&C       SETC  '        '
         ST    15,12(1)
         AGO   .EB5
.EREG3   ST    &PAR4(1),12(1)
.EB5     ANOP
&C       SVC   26
         MEXIT
.SFORM   AIF   (NOT &B(3)).E3
         AIF   (NOT &B(5)).E4
         CNOP  0,4
&C       BAL   1,*+28
         DC    H'&A1.,&A2.'
         DC    5A(0)
         AIF   ('&PAR2'(1,1) EQ '(').SREG1
         LA    15,&PAR2
         ST    15,4(1)
         AGO   .SB1
.SREG1   ST    &PAR2(1),4(1)
.SB1     AIF   (NOT &B(4)).SB2
         AIF   ('&PAR3'(1,1) EQ '(').SREG2
         LA    15,&PAR3
         ST    15,8(1)
         AGO   .SB2
.SREG2   ST    &PAR3(1),8(1)
.SB2     AIF   ('&PAR4'(1,1) EQ '(').SREG3
         LA    15,&PAR4
         ST    15,12(1)
         AGO   .SB3
.SREG3   ST    &PAR4(1),12(1)
.SB3     SVC   26
         MEXIT
.LFORM   AIF   (&B(6)).LB1
         AIF   ('&MF'(2,1) EQ '(').E5
         AGO   .E6
.LB1     CNOP  0,4
&C       DC    H'&A1.,&A2.'
         AIF   (&B(3)).LB2
         DC    A(0)
         AGO   .LB3
.LB2     DC    A(&PAR2.)
.LB3     AIF   (&B(4)).LB4
         DC    A(0)
         AGO   .LB5
.LB4     DC    A(&PAR3.)
.LB5     AIF   (&B(5)).LB6
         DC    3A(0)
         MEXIT
.LB6     DC    A(&PAR4.,0,0)
         MEXIT
.E1      WBCERMAC 4,4
         MEXIT
.E2      WBCERMAC 1
         MEXIT
.E3      WBCERMAC 2
         MEXIT
.E4      WBCERMAC 3
         MEXIT
.E5      WBCERMAC 4,2
         MEXIT
.E6      WBCERMAC 4,3
         MEXIT
.E7      WBCERMAC 4,1
         MEND
         EJECT
***********************************************************************
**        L I S T C X -  PROGRAM TO LIST CATALOG AND VTOC            **
**                    BY INDEX LEVELS                                **
***********************************************************************
LISTCX   CSECT
STARTLST ENTERE 12,*,LGOTMAIN
         USING GOTMAIN,R13    ESTABLISH DSECT ADDRESSIBILITY
         LR    R11,R1         SAVE CPPL ADDR
         USING CPPL,R11       ESTABLISH CPPL ADDRESSIBILITY
         LA    R10,PPLAREA    LOAD PPL ADDR
         USING PPL,R10        ESTABLISH PPL ADDRESSIBILITY
         MVC   PPLUPT,CPPLUPT MOVE UPT ADDR TO PPL
         MVC   PPLECT,CPPLECT MOVE ECT ADDR TO PPL
         LA    R1,ECB         LOAD ECB ADDR
         ST    R1,PPLECB      AND STORE IT IN PPL
         MVC   PPLPCL,APCL    MOVE PCL ADDR TO PPL
         LA    R1,SAVEADDR    LOAD PDL ADDR ADDR
         ST    R1,PPLANS      AND STORE IT IN PPL
         MVC   PPLCBUF,CPPLCBUF MOVE CBUF TO PPL
         CALLTSSR EP=IKJPARS,MF=(E,PPL)
         LTR   R15,R15        IS RC = 0
         BNZ   ABEND          IF NOT PARSE FAILED
         DROP  R10            RELEASE PPL ADDRESSIBILITY
         LA    R10,IOPLAREA   LOAD IOPL ADDR
         USING IOPL,R10       ESTABLISH IOPL ADDRESSIBILITY
         MVC   IOPLUPT,CPPLUPT MOVE UPT ADDR TO IOPL
         MVC   IOPLECT,CPPLECT MOVE ECT ADDR TO IOPL
         ST    R1,IOPLECB     AND STORE IT IN IOPL
         LA    R1,PUTLINED    LOAD PTPB ADDR
         ST    R1,IOPLIOPB    AND STORE IT IN IOPL
         DROP  R10            RELEASE IOPL ADDRESSIBILITY
         MVC   SLOCLSTD,SLOCLST INITIALIZE SUPERLOCATE LIST
         MVC   LOCLSTD,LOCLST INITIALIZE LOCATE LIST
         MVC   OBTLSTD1,OBTLST1 INITIALIZE FMT1 OBTAIN LIST
         MVC   OBTLSTD2,OBTLST2 INITIALIZE FMT3 OBTAIN LIST
         MVC   PUTLINED,PUTLINE INITIALIZE PTPB
         LA    R1,49          LOAD MSG2D LENGTH
         STH   R1,MSG2D       AND STORE IT IN MSG2D
         LA    R1,83          LOAD MSG4D LENGTH
         STH   R1,MSG4D       AND STORE IT IN MSG4D
         LA    R1,44          LOAD MAX DSN LENGTH
         STH   R1,DSNL        AND STORE IT
         MVI   MSG2SPC,C' '   CLEAR MSG2D
         MVC   MSG2DSN(44),MSG2SPC CLEAR IT ALL
         MVI   MSG4SPC,C' '   INITIALIZE MSG4D
         MVC   MSG5D(83),MSG5 INITIALIZE MSG5D
         LA    R1,36          LOAD EMSG4D LENGTH
         STH   R1,EMSG4D      AND STORE IT IN EMSG4D
         MVC   EMSG5D(41),EMSG5 INITIALIZE MSG5D
         MVC   EDITWRDD,EDITWRD INITIALIZE EDITWRDD
         LA    R1,OLD         LOAD OLD ADDR
         ST    R1,PUTLINED+4  AND STORE IT IN PTPB
         LA    R1,1           LOAD NO OF SEGMENTS
         ST    R1,OLD         AND STORE IT IN OLD
         MVI   INDEX,C' '     CLEAR INDEX
         MVC   INDEX+1(L'INDEX-1),INDEX CLEAR IT ALL
         L     R9,SAVEADDR    LOAD PDL ADDR
         USING IKJPARMD,R9    ESTABLISH PDL ADDRESSIBILITY
         TM    LVLNAME+6,X'80' IS INDEX LEVEL SPECIFIED
         BO    LVLRTNE        IF SO SET UP INDEX FROM LEVEL
         L     R2,CPPLUPT     LOAD UPT ADDR
         LA    R2,16(R2)      LOAD UPT USERID ADDR
         L     R3,CPPLPSCB    LOAD PSCB ADDR
         DROP  R11            RELEASE CPPL ADDRESSIBILITY
         MVC   MSG1TEXT(10),USERID
         IC    R1,7(R3)       INSERT USERID LENGTH
         BCTR  R1,0           DECREMENT FOR EXECUTE
         LA    R4,MSG1USID
         EX    R1,MOVE
         LA    R4,1(R1,R4)
         MVC   0(11,R4),PREFIX
         LA    R4,11(R4)
         LR    R3,R2
         IC    R1,7(R3)       INSERT PREFIX LENGTH
         BCTR  R1,0           DECREMENT FOR EXECUTE
         EX    R1,MOVE
         LA    R4,1(R1,R4)
         LA    R2,MSG1D
         SR    R4,R2
         STH   R4,MSG1D
         ST    R2,OLDMSG      STORE MSG1D ADDR IN OLD
         LR    R2,R1          SAVE EXECUTE LENGTH FOR INDEX MOVE
         BAL   R14,PUTLRTNE   AND PUTL IT
         LR    R1,R2          RESTORE EXECUTE LENGTH FOR INDEX MOVE
LVLBACK  LA    R4,INDEX+1
         LA    R2,2(R1)       INCREMENT INDEX LENGTH (FOR PERIOD)
         STC   R2,INDEX       AND STORE IT IN INDEX AREA
         EX    R1,MOVE        MOVE INDEX
         LA    R4,1(R1,R4)    INCREMENT INDEX ADDR
         MVI   0(R4),C'.'     MOVE IN PERIOD
         CLI   NODSNAME+1,X'00' IS NODS KEYWORD PRESENT
         BE    TESTDIR        IF NOT BYPASS INDICATION
         XI    SW,X'80'       OTHERWISE INDICATE NODS
TESTDIR  CLI   DIRBLKS+1,X'00' IS DIRBLKS PARAMETER PRESENT
         BE    NODIR          IF NOT BYPASS DIRECTORIES CALCULATION
         OI    SW,X'02'       INDICATE DIRBLKS CALCULATION TO BE DONE
NODIR    IKJRLSA (9)
         L     R2,F64K        LOAD GETMAIN LENGTH           *HMD 01/80*
         GETMAIN RU,LV=(2)
         LTR   R15,R15        CHECK GETMAIN RC              *HMD 02/80*
         BNZ   GETMERR        NO STORAGE FOR GETMAIN        *HMD 02/80*
         STCM  R2,3,0(R1)     STORE LENGTH OF AREA IN AREA
         LR    R2,R1          LOAD AREA ADDR
         MVC   2(2,R2),=X'0004'
* SET SECOND HALFWORD OF AREA TO TOTAL LENGTH USED          *HMD 02/80*
         LA    R1,SLOCLSTD    GET PARM LIST ADDRESS         *HMD 02/80*
         XC    16(12,R1),16(R1)   CLEAR WORK AREA           *HMD 02/80*
         SPLOC NAME,INDEX,,(2),MF=(E,SLOCLSTD)
         LTR   R15,R15        IS RC = 0
         BZ    INDOK          YES, IS OK                    *HMD 02/80*
         CH    R15,=H'44'     DID WE RUN OUT OF SPACE?      *HMD 02/80*
         BE    INDOK          YES, JUST LIST WHAT'S THERE   *HMD 02/80*
         B     SLOCERR1       IF NOT ISSUE ERROR MSG AND TERMINATE
INDOK    SR    R1,R1          CLEAR FOR ICM                 *HMD 02/80*
         ICM   R1,3,2(R2)     LOAD RETURNED DATA LENGTH
         LTR   R1,R1          IS IT = 0
         BZ    SLOCERR2       IF SO ISSUE ERROR MSG AND TERMINATE
         LA    R1,MSG4SER     LOAD VOLUME ADDR
         ST    R1,OBTLSTD1+8  AND STORE IT IN FMT1 OBTAIN LIST
         ST    R1,OBTLSTD2+8  AND FMT3
         LA    R1,LOCAREA     LOAD LOCATE WORKAREA ADDR
         ST    R1,LOCLSTD+12  AND STORE IT IN LOCATE LIST
         LA    R1,DSCB1       LOAD FMT1 OBTAIN WORKAREA ADDR
         ST    R1,OBTLSTD1+12 AND STORE IT IN FMT1 OBTAIN LIST
         LA    R1,DSCB3       LOAD FMT3 OBTAIN WORKAREA ADDR
         ST    R1,OBTLSTD2+12 AND STORE IT IN FMT3 OBTAIN LIST
         LH    R4,2(R2)       LOAD DSN AREA LENGTH
         LA    R3,0(R4,R2)    LOAD DSN AREA END ADDR
         SH    R2,H40         DECREMENT AREA ADDR BY 40 FOR LOOP
NEXTDSN  LA    R2,45(R2)      INCREMENT DSN AREA ADDR
         CR    R2,R3          IS IT THE END
         BNL   ENDITALL       IF SO ISSUE TOTAL MSG AND TERMINATE
         BCTR  R2,0           SEE IF CLUSTER                *HMD 10/80*
         CLI   0(R2),C'C'     IS THIS A CLUSTER ENTRY?      *HMD 10/80*
         BE    EXCLUDE        YES, FORGET IT                *HMD 10/80*
         CLI   0(R2),C'G'     IS THIS A ALTERNATE INDEX?    *HMD 10/80*
         BE    EXCLUDE        YES, UNABLE TO LIST           *HMD 10/80*
         CLI   0(R2),C'R'     IS THIS A PATH ENTRY??        *HMD 10/80*
         BE    EXCLUDE        YES, OBTAIN IS USELESS        *HMD 10/80*
         LA    R2,ONE(R2)     BUMP POINTER                  *HMD 10/80*
         MVC   MSG4ALOC(79),MSG4SPC CLEAR MSG4D
         MVC   MSG2DSN,0(R2)  MOVE CURRENT DSN TO OUTPUT AREA
         LA    R1,MSG2D       LOAD DSN MSG ADDR
         ST    R1,OLDMSG      AND STORE IT IN OLD
         BAL   R14,PUTLRTNE   PUTL IT
         ST    R2,LOCLSTD+4   STORE DSN ADDR IN LOCATE LIST
         ST    R2,OBTLSTD1+4  AND IN FMT1 OBTAIN LIST
         LOCATE LOCLSTD
         LTR   R15,R15        IS RC = 0
         BNZ   LOCERR         IF NOT ISSUE APPROPRIATE ERROR MSG
         LH    R5,LOCAREA     LOAD NO OF VOLUMES
         LA    R4,LOCAREA+2   LOAD DEVICE TYPE ADDR
         CH    R5,H12         IS NO OF VOLUMES GT 12
         BNH   VOLLOOP        IF NOT BYPASS SETTING IT ANY FURTHER
         LA    R5,12          OTHERWISE SET NO OF VOLUMES TO 12
         B     VOLLOOP        BRANCH AROUND EXCLUDE CODE    *HMD 10/80*
EXCLUDE  LA    R2,ONE(R2)     BUMP POINTER TO DSN LIST      *HMD 10/80*
         B     NEXTDSN        GET NEXT DATA SET NAME        *HMD 10/80*
VOLLOOP  MVC   MSG4SER,4(R4)  MOVE VOL SER TO MSG4D
         CLI   2(R4),X'20'    IS IT A DASD DEVICE
         BNE   NOTDASD        IF NOT INDICATE DSN NOT ON DASD
         LA    R1,DEVTABLE-11 LOAD DEVICE TABLE ADDR
NEXTDEV  LA    R1,11(R1)      INCREMENT DEVICE TABLE PTR
         CLC   0(2,R1),X00L5  IS IT THE END OF THE TABLE
         BE    UNKNOWN        IF SO INDICATE UNKNOWN DEVICE TYPE
         CLC   0(2,R1),2(R4)  COMPARE DEVICE CODE
         BNE   NEXTDEV        IF NOT TRY NEXT ENTRY
         MVC   MSG4DEV,4(R1)  MOVE DEVICE NAME TO MSG4D
         MVC   TRKPRCYL,2(R1) ALSO TRKS PER CYL
UNKNOWNX OBTAIN OBTLSTD1      READ FMT 1 DSCB
         LTR   R15,R15        IS RC = 0
         BNZ   OBTERR         IF NOT ISSUE ERROR MSG AND PROCEED
         LA    R6,DSCB1       LOAD FMT1 DSCB ADDR
         USING DS1FMTID,R6
         TM    SW,X'04'       HAS MSG3 BEEN PUTLED
         BNZ   NOMSG3         IF SO BYPASS PUTLING IT AGAIN FOR DSN
         OI    SW,X'04'       INDICATE MSG3 HAS BEEN PUTLED
         LA    R1,MSG3        LOAD MSG3 ADDR
         ST    R1,OLDMSG      STORE IT IN OLD
         BAL   R14,PUTLRTNE   AND PUTL IT
NOMSG3   SR    R9,R9          CLEAR WORK REGS
         LR    R10,R9         CLEAR THEM ALL
         SR    R1,R1          CLEAR THIS ONE TOO
         IC    R1,DS1NOEPV    LOAD NO OF EXTENTS
         BAL   R14,CONVERT    UNPACK AND UNSIGN IT
         MVC   MSG4XTNT,WORK1+6 MOVE NO OF EXTENTS TO MSG4D
         LR    R9,R1          RELOAD NO OF EXTENTS
         LTR   R9,R9          IS NO OF EXTENTS = 0
         BZ    DSORGVST       IF SO BYPASS SPACE CALCULATIONS
         LA    R8,3           LOAD NO OF EXTENTS TO BE PROCESSED
         LA    R11,DS1EXT1    LOAD 1ST EXTENT ADDR
         BAL   R14,ACCUMTRK   CALCULATE SPACE ALLOCATED TO 1ST THREE
         CLC   DS1PTRDS,X00L5 IS THERE A FMT3 DSCB
         BE    CALCUSED       IF NOT BYPASS FMT3 DSCB READ
         LA    R1,DS1PTRDS    LOAD CCHHR OF FMT3 DSCB
         ST    R1,OBTLSTD2+4  AND STORE IT IN OBTAIN LIST
         OBTAIN OBTLSTD2      READ FMT 3 DSCB
         LTR   R15,R15        IS RC = 0
         BNZ   OBTERR         IF NOT ISSUE ERROR MSG AND PROCEED
         LA    R7,DSCB3       LOAD FMT3 DSCB ADDR
         USING IECSDSL3,R7
         LA    R8,4           LOAD NO OF EXTENTS TO BE PROCESSED
         LA    R11,DS3EXTNT   LOAD 4TH EXTENT ADDR
         BAL   R14,ACCUMTRK   CALCULATE SPACE ALLOCATED TO NEXT FOUR
         LA    R8,9           LOAD NO OF EXTENTS TO BE PROCESSED
         LA    R11,DS3ADEXT   8TH EXTENT ADDR
         BAL   R14,ACCUMTRK   CALCULATE SPACE ALLOCATED TO NEXT NINE
CALCUSED ST    R10,TRKS       STORE TRKS ALLOCATED TO THIS DSN
         L     R8,TRKSALOC    LOAD ACCUMULATED TRKS ALLOCATED
         AR    R8,R10         INCREMENT ACCUMULATED TRKS ALLOCATED
         ST    R8,TRKSALOC    AND STORE IT
         TM    SW,X'80'       IS NODS OPTION PRESENT
         BO    BYPASS1        IF SO BYPASS THIS STUFF
         L     R1,TRKS        LOAD TRKS ALLOCATED TO THIS DSN ADDR
         BAL   R14,CONVERT    UNPACK AND UNSIGN IT
         MVC   MSG4ALOC,WORK1+4 AND MOVE IT TO MSG4D
BYPASS1  TM    DS1DSORG,X'A0' IS DSORG = IS OR DA
         BNZ   ISORDA         IF SO ASSUME ALL SPACE USED
         CLC   DS1LSTAR,X00L5 IS ANY SPACE USED
         BE    DSORGVST       IF NOT BYPASS SPACE USED CALCULATIONS
         LH    R1,DS1LSTAR    OTHERWISE LOAD LAST TRK USED ADDR
         LA    R1,1(R1)       INCREMENT IT BY 1
ISORDA   ST    R1,TRKS        STORE TRKS USED BY THIS DSN
         L     R8,TRKSUSED    LOAD ACCUMULATED TRKS USED
         AR    R8,R1          INCREMENT ACCUMULATED TRKS USED
         ST    R8,TRKSUSED    AND STORE IT
         TM    SW,X'80'       IS NODS OPTION PRESENT
         BO    BYPASS2        IF SO BYPASS THIS STUFF TOO
         BAL   R14,CONVERT    UNPACK AND UNSIGN TRKS USED BY THIS DSN
         MVC   MSG4USED,WORK1+4 MOVE IT TO MSG4D
DSORGVST DS    0H             THIS WORKS FINE AFTER P.U.T 8005
CREDT    SR    R1,R1          CLEAR WORK REG
         ICM   R1,7,DS1CREDT  LOAD CREATION DATE
STORCRDT ST    R1,WORK1       AND STORE IT
         LH    R1,WORK1+2     LOAD DAY OF YEAR
         TM    WORK1+1,X'03'  IS YEAR A MULTIPLE OF 4
         BZ    DATEMODA       IF NOT BYPASS LEAP YEAR ADJUSTMENT
         CH    R1,H60         IS DATE AFTER MARCH 1ST
         BL    DATEMODA       IF NOT BYPASS ADJUSTMENT
         LA    R1,1(R1)       OTHERWISE ADJUST DAY UP BY 1
DATEMODA SR    R8,R8          INITIALIZE MONTH COUNTER
DATECVT1 SH    R1,DATEMNTH(R8) SUBTRACT NO OF DAYS IN MONTH
         LTR   R1,R1          IS DAY OF YEAR STILL POSITIVE
         BNP   DATECVT2       IF NOT CONTINUE
         LA    R8,2(R8)       OTHERWISE INCREMENT MONTH PTR
F0       B     DATECVT1       AND TRY IT AGAIN
         SPACE 3
LVLRTNE  LH    R1,LVLNAME+4
         BCTR  R1,0           DECREMENT FOR EXECUTE
         L     R3,LVLNAME
         B     LVLBACK
         DROP  R9
         SPACE 3
DATECVT2 AH    R1,DATEMNTH(R8) ADD NO OF DAYS IN LAST MONTH BACK IN
         SRA   R8,1           DIVIDE MONTH PTR BY 2
         LA    R8,1(R8)       INCRMENT MONTH PTR BY 1
         CVD   R8,WORK2       BASE 10 THE MONTH
         OI    WORK2+7,X'0F'  UNSIGN IT
         UNPK  WORK2(3),WORK2+6(2) UNPACK IT
         MVC   MSG4MO,WORK2+1 AND MOVE IT TO MSG4D
         MVI   MSG4SL1,C'/'   MOVE IN SLASH
         CVD   R1,WORK2       BASE 10 THE DAY OF MONTH
         OI    WORK2+7,X'0F'  UNSIGN IT
         UNPK  WORK2(3),WORK2+6(2) UNPACK IT
         MVC   MSG4DA,WORK2+1 AND MOVE IT TO MSG4D
         MVI   MSG4SL2,C'/'   MOVE IN SLASH
         SR    R9,R9          CLEAR WORK REG
         IC    R9,WORK1+1     INSERT YEAR
         CVD   R9,WORK2       BASE 10 IT
         OI    WORK2+7,X'0F'  UNSIGN IT
         UNPK  WORK2(3),WORK2+6(2) UNPACK IT
         MVC   MSG4YR,WORK2+1 AND MOVE IT TO MSG4D
         TM    DS1DSORG+1,X'08' IS DSORG = VS
         BNO   DSORGIS        IF NOT TRY DSORG = IS
VSDATEX  MVC   MSG4DSRG,VS    OTHERWISE SET DSORG = VS
         B     BLKSIZE        AND CONTINUE ON
         SPACE 3
HIGHDATE MVC   MSG4MO(L'FFDATE),FFDATE MOVE HIGHDATE TO MSG4D
         B     VSDATEX        AND CONTINUE ON
         SPACE 3
DSORGIS  TM    DS1DSORG,X'80' IS DSORG = IS
         BNO   DSORGPS        IF NOT TRY DSORG = PS
         MVC   MSG4DSRG,IS    OTHERWISE SET DSORG = IS
         B     DSORGU         AND CONTINUE
         SPACE 3
DSORGPS  TM    DS1DSORG,X'40' IS DSORG = PS
         BNO   DSORGDA        IF NOT TRY DSORG = DA
         MVC   MSG4DSRG,PS    OTHERWISE SET DSORG = PS
         B     DSORGU         AND CONTINUE
         SPACE 3
DSORGDA  TM    DS1DSORG,X'20' IS DSORG = DA
         BNO   DSORGPO        IF NOT TRY DSORG = PO
         MVC   MSG4DSRG,DA    OTHERWISE SET DSORG = DA
         B     DSORGU         AND CONTINUE
         SPACE 3
DSORGPO  TM    DS1DSORG,X'02' IS DSORG = PO
         BNO   INVLD          IF NOT SET DSORG = * (I.E. UNKNOWN)
         MVC   MSG4DSRG,PO    OTHERWISE SET DSORG = PO
         TM    SW,X'02'       IS DIRBLKS CALCULATION TO BE DONE
         BNO   DSORGU         IF NOT BYPASS IT
         MVC   INDEX,MSG2DSN  MOVE DSN FOR PDSRTNE
         CALL  PDSRTNE,(DSNL,MSG4DIRA,MSG4DIRU),VL,MF=(E,CALLD)
         B     DSORGU         AND CONTINUE
         SPACE 3
INVLD    MVI   MSG4DSRG,C'*'  SET DSORG = * (I.E. UNKNOWN)
         B     RECFM          AND CONTINUE
         SPACE 3
DSORGU   TM    DS1DSORG,X'01' IS DS UNMOVABLE
         BNO   RECFM          IF NOT CONTINUE
         MVI   MSG4DSOU,C'U'  OTHERWISE SET DS UNMOVABLE
RECFM    LA    R8,MSG4RCFM    LOAD MSG4D RECFM PTR
         TM    DS1RECFM,X'C0' IS RECFM F,U, OR V
         BNZ   RECFMUVF       IF NOT CONTINUE
         MVI   MSG4RCFM,C'*'  SET RECFM = * (I.E. UNKNOWN)
         B     BLKSIZE        AND CONTINUE
         SPACE 3
RECFMUVF TM    DS1RECFM,X'40' IS RECFM = U OR V
         BNZ   RECFMUV        IF SO CONTINUE
         MVI   0(R8),C'F'     OTHERWISE SET RECFM = F
         B     RECFMT         AND CONTINUE
         SPACE 3
RECFMUV  TM    DS1RECFM,X'80' IS RECFM = U
         BZ    RECFMV         IF NOT TRY RECFM = V
         MVI   0(R8),C'U'     OTHERWISE SET RECFM = U
         B     RECFMT         AND CONTINUE
         SPACE 3
RECFMV   MVI   0(R8),C'V'     SET RECFM = V
RECFMT   LA    R8,1(R8)       INCREMENT MSG RECFM PTR
         TM    DS1RECFM,X'20' IS RECFM = T
         BZ    RECFMB         IF NOT TRY RECFM = B
         MVI   0(R8),C'T'     OTHERWISE SET RECFM = T
         LA    R8,1(R8)       INCREMENT MSG RECFM PTR
RECFMB   TM    DS1RECFM,X'10' IS RECFM = B
         BZ    RECFMS         IF NOT TRY RECFM = S
         MVI   0(R8),C'B'     OTHERWISE SET RECFM = B
         LA    R8,1(R8)       INCREMENT MSG RECFM PTR
RECFMS   TM    DS1RECFM,X'08' IS RECFM = S
         BZ    RECFMA         IF NOT TRY RECFM = A
         MVI   0(R8),C'S'     OTHERWISE SET RECFM = S
         LA    R8,1(R8)       INCREMENT MSG RECFM PTR
RECFMA   TM    DS1RECFM,X'04' IS RECFM = A
         BZ    RECFMM         IF NOT TRY RECFM = M
         MVI   0(R8),C'A'     OTHERWISE SET RECFM = A
         LA    R8,1(R8)       INCREMENT MSG RECFM PTR
RECFMM   TM    DS1RECFM,X'02' IS RECFM = M
         BZ    BLKSIZE        IF NOT CONTINUE ON
         MVI   0(R8),C'M'     OTHERWISE SET RECFM = M
BLKSIZE  LH    R1,DS1BLKL     LOAD BLKSIZE
         BAL   R14,CONVERT    CONVERT IT
         MVC   MSG4BLOK,WORK1+3 AND MOVE IT TO MSG4D
         LH    R1,DS1LRECL    LOAD LRECL
         BAL   R14,CONVERT    CONVERT IT
         MVC   MSG4LRCL,WORK1+3 AND MOVE IT TO MSG4D
         CLC   MSG4BLOK,BLANK4Z IS BLKSIZE = 0
         BNE   LRECLCHK       IF NOT BYPASS INDICATION OF SUCH
         MVC   MSG4BLOK+2(L'AST),AST OTHERWISE MOVE IN ASTERISK
LRECLCHK CLC   MSG4LRCL,BLANK4Z IS LRECL = 0
         BNE   PUTLIT         IF NOT PUTL IT
         MVC   MSG4LRCL+2(L'AST),AST OTHERWISE MOVE IN ASTERISK
PUTLIT   LA    R1,MSG4D       LOAD MSG4D ADDR
CONT     ST    R1,OLDMSG      STORE IT IN OLD
         BAL   R14,PUTLRTNE   AND PUTL IT
BYPASS2  LA    R4,12(R4)      INCREMENT ENTRY PTR
         BCT   R5,VOLLOOP     DECREMENT NO OF VOLUMES
         NI    SW,X'FB'       RESET PUTL INDICATOR
         B     NEXTDSN        AND TRY NEXT DSN
         SPACE 3
CONVERT  CVD   R1,WORK2       BASE 10 IT
         MVC   WORK1,EDITWRDD MOVE IN EDIT WORD
         ED    WORK1,WORK2+4  EDIT IT
         BR    R14            AND BRANCH BACK TO WHENCE YOU CAME
         SPACE 3
SLOCERR1 LA    R1,EMSG1       LOAD EMSG1 ADDR
         CLM   R15,1,X08L1    IS RC = 8
         BE    SLOCCONT       IF SO ISSUE EMSG1
         LA    R1,EMSG2       OTHERWISE LOAD EMSG2 ADDR
SLOCCONT ST    R1,OLDMSG      STORE IT IN OLD
         BAL   R14,PUTLRTNE   PUTL IT
         B     ENDTWO         AND TERMINATE
         SPACE 3
SLOCERR2 LA    R1,EMSG3       LOAD NO DSNS MSG ADDR
         B     SLOCCONT       AND CONTINUE
         SPACE 3
LOCERR   SLA   R15,3          MULTIPLY RC BY 8 FOR TABLE DISPLACEMENT
         LA    R15,LOCMSGS-32(R15) LOAD ERROR INDICATOR ADDR
         MVC   EMSG4MSG,0(R15) MOVE IT TO MSG
         LA    R1,EMSG4D      LOAD ERROR MSG ADDR
         ST    R1,OLDMSG      STORE IT IN OLD
         BAL   R14,PUTLRTNE
         B     NEXTDSN        AND CONTINUE
         SPACE 3
NOTDASD  MVC   EMSG5SER,MSG4SER MOVE VOL SER TO ERROR MSG
         LA    R1,EMSG5D      LOAD ERROR MSG ADDR
         B     CONT           AND CONTINUE
         SPACE 3
UNKNOWN  MVC   SAVEADDR,OBTLSTD1+4 SAVE DSN ADDR
         LA    R15,FMT4DSN    LOAD FMT4 DSN ADDR FOR OBTAIN
         ST    R15,OBTLSTD1+4 AND STORE IT IN OBTAIN LIST
         OBTAIN OBTLSTD1
         MVC   TRKPRCYL,DSCB1+20 MOVE TRKS PER CYL
         MVC   MSG4DEV,UNKNOWND MOVE UNKNOWN DEVICE TYPE TO MSG4D
         MVC   OBTLSTD1+4(4),SAVEADDR RESTORE DSN ADDR
         B     UNKNOWNX       AND CONTINUE ON
         SPACE 3
OBTERR   SLA   R15,3          MULTIPLY RC BY 8 FOR TABLE DISPLACEMENT
         LA    R15,OBTMSGS-32(R15) LOAD ERROR INDICATOR ADDR
         MVC   EMSG4MSG,0(R15) MOVE IT TO MSG
         LA    R1,OBTMSGS     LOAD OBTAIN MSGS ADDR
         CR    R1,R15         IS IT THE FIRST OBTAIN ERROR MSG
         BNE   NEXTCHK        IF NOT TRY NEXT ERROR CHECK
         MVC   EMSG4MSG+7(L'MSG4SER),MSG4SER OTHERWISE MOVE IN VOL SER
         B     EMSG4OLD       AND PUTL IT
         SPACE 3
NEXTCHK  LA    R1,32(R1)      INCREMENT OBTAIN ERROR MSGS PTR
         CR    R1,R15         IS IT THE SECOND OBTAIN ERROR MSG
         BNE   EMSG4OLD       IF NOT PUTL IT
         MVC   EMSG4MSG+18(L'MSG4SER),MSG4SER
EMSG4OLD LA    R1,EMSG4D      LOAD ERROR MSG ADDR
         B     CONT           AND PUTL IT
         SPACE 3
PUTLRTNE TM    SW,X'80'       IS NODS OPTION PRESENT
         BO    PUTLEXIT       IF SO DON'T PRINT EXCEPT TOTALS INFO
         ST    R14,R14SAVE    STORE LINKAGE REG
         CALLTSSR EP=IKJPUTL,MF=(E,IOPLAREA)
         L     R14,R14SAVE    RESTORE LINKAGE REG
PUTLEXIT BR    R14            BRANCH BACK TO WHENCE YOU CAME
         SPACE 1                                            *HMD 02/80*
GETMERR  LA    R1,EMSG6       GETMAIN ERROR MESSAGE         *HMD 02/80*
         ST    R1,OLDMSG      SAVE IN O.L.D                 *HMD 02/80*
         NI    SW,X'00'       TURN OFF ALL OPTIONS          *HMD 02/80*
         BAL   R14,PUTLRTNE   PUT IT TO TERMINAL            *HMD 02/80*
         ABEND 78,DUMP        DUMP CURRENT TASK             *HMD 02/80*
         SPACE 3
ENDITALL L     R1,TRKSALOC    LOAD TOTAL TRKS ALLOCATED
         BAL   R14,CONVERT    CONVERT IT
         MVC   MSG5ALOC,WORK1+3 AND MOVE IT TO MSG5D
         L     R1,TRKSUSED    LOAD TOTAL TRKS USED
         BAL   R14,CONVERT    CONVERT IT
         MVC   MSG5USED,WORK1+3 AND MOVE IT TO MSG5D
         SR    R1,R1          CLEAR WORK REG
         C     R1,TRKSALOC    IS TOTAL ALLOCATED = 0
         BE    ZEROALOC       IF SO BYPASS NORMAL PERCENT CALCULATION
         SR    R8,R8          CLEAR WORK REG FOR DIVIDE
         L     R9,TRKSUSED    LOAD TOTAL TRKS USED
         MH    R9,H10000      MULTIPLY IT BY 10,000
         D     R8,TRKSALOC    DIVIDE USED BY ALLOCATED
         LR    R1,R9          LOAD QUOTIENT FOR CONVERT
         MVC   EDITWRDD+5(2),=X'214B' SET UP EDIT WORD FOR PER CENT
         BAL   R14,CONVERT    CONVERT IT
         MVC   MSG5PRCT,WORK1+3 AND MOVE IT TO MSG5D
ZEROBACK LA    R1,MSG5D       LOAD MSG5D ADDR
         ST    R1,OLDMSG      STORE IT IN OLD
         NI    SW,X'00'       TURN OFF ALL OPTIONS
         BAL   R14,PUTLRTNE   AND PUTLIT
ENDTWO   L     R2,SLOCLSTD+12 LOAD GOTTEN AREA ADDR
         SR    R3,R3          CLEAR FOR ICM                 *HMD 02/80*
         ICM   R3,3,0(R2)     LOAD ITS LENGTH
         FREEMAIN RU,LV=(3),A=(2)
         LEAVEE ,0,LGOTMAIN
         EJECT
ACCUMTRK CLI   0(R11),X'00'   IS THIS EXTENT IN USE
         BE    CALCUSED       IF NOT CALCULATE TRKS
         SR    R0,R0          CLEAR WORK REG
         LR    R1,R0          CLEAR WORK REG
         LH    R0,6(R11)      LOAD ENDING CYL NO
         LH    R1,2(R11)      LOAD STARTING CYL NO
         SR    R0,R1          SUBTRACT STARTING FROM ENDING
         MH    R0,TRKPRCYL    MULTIPLY BY TRKS PER CYL
         LH    R1,8(R11)      LOAD ENDING TRK
         AR    R0,R1          ADD TO TRK COUNT
         LH    R1,4(R11)      LOAD STARTING TRK
         SR    R0,R1          SUBTRACT FROM TRK COUNT
         AR    R10,R0         ACCUMULATE TOTAL
         LA    R10,R1(R10)    ADD 1 TRK
         LA    R11,10(R11)    INCREMENT EXTENT PTR
         BCT   R8,ACCUMTRK    DECREMENT EXTENT COUNT
         BR    R14
         SPACE 3
ABEND    ABEND (15),DUMP
         SPACE 3
ZEROALOC MVC   MSG5PRCT,ZEROPRCT MOVE ZERO PER CENT TO MSG5D
         B     ZEROBACK       AND CONTINUE
         EJECT
LVLVALID ENTER 9,*,,,NOREG
         SR    R15,R15        CLEAR RC REG
         L     R2,0(R1)       LOAD PDE ADDR
         LH    R3,4(R2)       LOAD LEVEL LENGTH
         LA    R4,35          LOAD MAX LENGTH
         CR    R3,R4          IS LEVEL LENGTH GT 35
         BH    BADLEVEL       IS SO IT'S INVALID
         TM    6(R2),X'40'    IS LEVEL IN QUOTES
         BO    BADLEVEL       IF SO IT'S INVALID
         TM    14(R2),X'80'   IS MEMBER NAME SPECIFIED
         BO    BADLEVEL       IF SO IT'S INVALID
         TM    22(R2),X'80'   IS PASSWORD SPECIFIED
         BNO   RETURN         IF NOT IT'S OK
BADLEVEL LA    R15,4          OTHERWISE SET BAD RC FOR PARSE
RETURN   LEAVE ,(15)
         DROP  R9             RELEASE VALIDITY CHECK ROUTINE BASE
         EJECT
MOVE     MVC   0(*-*,R4),0(R3)
ONE      EQU   1              CONSTANT OF ONE               *HMD 10/80*
         SPACE 3
SLOCLST  SPLOC NAME,,,,MF=L
SLOCLSTL EQU   *-SLOCLST
         SPACE 3
PUTLINE  PUTLINE OUTPUT=(0),MF=L
PUTLINEL EQU   *-PUTLINE
         SPACE 3
LOCLST   DC    X'44000000',3A(0)
LOCLSTL  EQU   *-LOCLST
         SPACE 3
OBTLST1  DC    X'C1000000',3A(0)
OBTLSTL1 EQU   *-OBTLST1
         SPACE 3
OBTLST2  DC    X'C0800000',3A(0)
OBTLSTL2 EQU   *-OBTLST2
         SPACE 3
MSG3     DC    H'83,0',CL79' ALLOC-----USED-----XTNTS-DEVICE----SERIAL-*
               -DSORG-RECFM-BLKSIZE-LRECL---CREDT'
         SPACE 3
MSG5     DC    H'83,0',C' TOTAL TRACKS ALLOCATED =      ,TOTAL TRACKS U*
               SED =      ,PERCENT USED =        '
         SPACE 3
EMSG1    DC    H'31,0',C' NAME IS NOT AN INDEX LEVEL'
         SPACE 3
EMSG2    DC    H'33,0',C' UNABLE TO LIST DESIRED INDEX'
         SPACE 3
EMSG3    DC    H'22,0',C' NO DSNS CATALOGED'
         SPACE 3
EMSG5    DC    H'41,0',C'        IS NOT A DIRECT ACCESS VOLUME'
         SPACE 3                                            *HMD 02/80*
EMSG6    DC    H'47,0',C' GETMAIN FAILED FOR CATALOG MNGMT WORK AREA'
*                                                           *HMD 02/80*
         SPACE 3
APCL     DC    A(PARSELST)
EDITWRD  DC    X'4020202020202120' EDIT PATTERN
FMT4DSN  DC    44X'04'
         SPACE 3
DATEMNTH DC    H'31'              JAN
         DC    H'29'              FEB
         DC    H'31'              MAR
         DC    H'30'              APR
         DC    H'31'              MAY
         DC    H'30'              JUN
         DC    H'31'              JUL
         DC    H'31'              AUG
         DC    H'30'              SEP
         DC    H'31'              OCT
         DC    H'30'              NOV
         DC    H'31'              DEC
         SPACE 3
LOCMSGS  DC    CL32'USER CATALOG NOT MOUNTED'
         DC    CL32'DSN NOT FOUND IN CATALOG'
         DC    CL32'INVALID RETURN CODE FROM LOCATE'
         DC    CL32'INVALID RETURN CODE FROM LOCATE'
         DC    CL32'SYNTAX ERROR'
         DC    CL32'PERMANENT I/O ERROR'
         DC    CL32'LOCATE BY TTR NOT SUPPORTED'
         SPACE 3
OBTMSGS  DC    CL32'VOLUME        NOT MOUNTED'
         DC    CL32'DSN NOT ON VOLUME       '
         DC    CL32'PERMANENT I/O ERROR'
         DC    CL32'INVALID WORK AREA POINTER'
         DC    CL32'CCHH OUTSIDE VTOC'
         SPACE 3
DEVTABLE DC    X'200E000F',CL7'3380'                   ***SRH*JAN 84
         DC    X'200B001E',CL7'3350'
         DC    X'20090013',CL7'3330'
         DC    X'200D0013',CL7'3330-11'
         DC    X'20080014',CL7'2314'
         DC    X'200200C8',CL7'2301'
         DC    X'2003000A',CL7'2303'
         DC    X'2001000A',CL7'2311'
         DC    X'2004002E',CL7'2302'
         DC    X'20050514',CL7'2321'
         DC    X'20060008',CL7'2305-1'
         DC    X'20070008',CL7'2305-2'
X00L5    DC    XL5'0'         END OF DEVICE TABLE
UNKNOWND DC    CL7'UNKNOWN'
         EJECT
X08L1    DC    X'08'
XFFL1    DC    X'FF'
H12      DC    H'12'
H40      DC    H'40'
H60      DC    H'60'
H10000   DC    H'10000'
F64K     DC    F'65535'                                     *HMD 01/80*
FFDATE   DC    C'FF/FF/FF'
USERID   DC    C' USERID = '
PREFIX   DC    C', PREFIX = '
IS       DC    C'IS'
PS       DC    C'PS'
DA       DC    C'DA'
PO       DC    C'PO'
VS       DC    C'VS'
BLANK4Z  DC    C'    0'
AST      DC    C'*  '
ZEROPRCT DC    C' 0.0'
         SPACE 2
         LTORG
         EJECT
PARSELST IKJPARM
         SPACE 3
LEVEL    IKJKEYWD
         SPACE 3
         IKJNAME 'LEVEL',SUBFLD=LVLSUB
         SPACE 3
DIRBLKS  IKJKEYWD
         SPACE 3
         IKJNAME 'DIRECTORIES'
         SPACE 3
NODSNAME IKJKEYWD
         SPACE 3
         IKJNAME 'NODSNAMES'
         SPACE 3
LVLSUB   IKJSUBF
         SPACE 3
LVLNAME  IKJPOSIT DSNAME,VALIDCK=LVLVALID
         SPACE 3
         IKJENDP
         EJECT
GOTMAIN  DSECT
         SPACE 3
         DS    18F
CALLD    DS    4F                                           *HMD 08/79*
         SPACE 3
SLOCLSTD DS    CL(SLOCLSTL+16)
         SPACE 3
PUTLINED DS    CL(PUTLINEL)
         SPACE 3
LOCLSTD  DS    CL(LOCLSTL)
         SPACE 3
OBTLSTD1 DS    CL(OBTLSTL1)
         SPACE 3
OBTLSTD2 DS    CL(OBTLSTL2)
         SPACE 3
IOPLAREA DS    4F
         SPACE 3
PPLAREA  DS    7F
         SPACE 3
MSG1D    DS    2H
MSG1TEXT DS    CL10
MSG1USID DS    CL25
         SPACE 3
MSG2D    DS    2H
MSG2SPC  DS    C
MSG2DSN  DS    CL44
         SPACE 3
MSG4D    DS    2H
MSG4SPC  DS    C
MSG4ALOC DS    CL4
         DS    C
MSG4DIRA DS    CL4
         DS    C
MSG4USED DS    CL4
         DS    C
MSG4DIRU DS    CL4
         DS    CL2
MSG4XTNT DS    CL2
         DS    CL2
MSG4DEV  DS    CL7
         DS    CL3
MSG4SER  DS    CL6
         DS    CL3
MSG4DSRG DS    CL2
MSG4DSOU DS    C
         DS    CL3
MSG4RCFM DS    CL3
         DS    CL3
MSG4BLOK DS    CL5
         DS    CL2
MSG4LRCL DS    CL5
         DS    CL2
MSG4MO   DS    CL2
MSG4SL1  DS    C
MSG4DA   DS    CL2
MSG4SL2  DS    C
MSG4YR   DS    CL2
         SPACE 3
MSG5D    DS    2H,CL26
MSG5ALOC DS    CL5
         DS    CL21
MSG5USED DS    CL5
         DS    CL16
MSG5PRCT DS    CL5
         DS    C
         SPACE 3
EMSG4D   DS    2H
EMSG4MSG DS    CL32
         SPACE 3
EMSG5D   DS    2H,C
EMSG5SER DS    CL6
         DS    CL30
         SPACE 3
ECB      DS    F
SAVEADDR DS    A
TRKPRCYL DS    H              TRKS PER CYLINDER
R14SAVE  DS    F
EDITWRDD DS    XL8
WORK1    DS    D
WORK2    DS    D
TRKS     DS    F
TRKSALOC DS    F
TRKSUSED DS    F
SW       DS    X
         SPACE 3
DSNL     DS    H
INDEX    DS    CL44
         SPACE 3
OLD      DS    F
OLDMSG   DS    F
         SPACE 3
         CNOP  0,4
DUMAREA  DS    CL49
         SPACE 3
         CNOP  0,8
LOCAREA  DS    265C
         SPACE 3
DSCB1    DS    140C
         SPACE 3
DSCB3    DS    140C
         SPACE 3
LGOTMAIN EQU   *-GOTMAIN
         EJECT
         CVT  LIST=YES,DSECT=YES
         EJECT
DSCBD    DSECT
         IECSDSL1 (1,3)
         EJECT
         IKJCPPL
         EJECT
         IKJIOPL
         EJECT
         IKJPPL
         EJECT
         DROP  R12
         EJECT
PDSRTNE  CSECT
STRTPDS  ENTER 12,*,1024,,NOREG   GET 1K STORAGE            *HMD 07/79*
         LM    R2,R4,0(R1)    LOAD PARM REGS
         USING STORAGE,R13    ADDRESS STORAGE AREA          *HMD 07/79*
         MVC   DABLK1(TEXTLEN),TEXTSTAR  MOVE TO STORAGE    *HMD 07/79*
         MVC   SYSDIR(DCBLEN),SYSDIRX    MOVE TO AREA       *HMD 07/79*
         LA    R8,EXITLIST    LOAD EXIT LIST ADDR           *HMD 07/79*
         ST    R8,SYSDIR+36   SAVE IN DCB                   *HMD 07/79*
         OI    SYSDIR+36,X'80'    INDICATE END OF LIST      *HMD 07/79*
         LA    R8,JFCB        GET JFCB IN STORAGE           *HMD 07/79*
         ST    R8,EXITLIST    SAVE IN EXIT LIST             *HMD 07/79*
         MVI   EXITLIST,X'87' INDICATE END OF LIST + JFCB   *HMD 07/79*
         LA    R8,DARBLK1     FORMAT DYNALLOC LIST          *HMD 07/79*
         ST    R8,DABLK1      SAVE IN PARM LIST             *HMD 07/79*
         MVI   DABLK1,X'80'   INDICATE END OF LIST          *HMD 07/79*
         LA    R8,TXTLIST1    POINT TO TEXT LIST            *HMD 07/79*
         ST    R8,DARBLK1+8   SAVE IN LIST                  *HMD 07/79*
         LA    R8,TXTU11      TEXT POINTERS                 *HMD 07/79*
         ST    R8,TXTLIST1                                  *HMD 07/79*
         LA    R8,TXTU12           M O V E                  *HMD 07/79*
         ST    R8,TXTLIST1+4                                *HMD 07/79*
         LA    R8,TXTU13              T O                   *HMD 07/79*
         ST    R8,TXTLIST1+8                                *HMD 07/79*
         LA    R8,TXTU14                                    *HMD 07/79*
         ST    R8,TXTLIST1+12      P A R A M E T E R        *HMD 07/79*
         LA    R8,TXTU15                                    *HMD 07/79*
         ST    R8,TXTLIST1+16           L I S T             *HMD 07/79*
         LA    R8,TXTU16                                    *HMD 07/79*
         ST    R8,TXTLIST1+20                               *HMD 07/79*
         MVI   TXTLIST1+20,X'80'   END OF LIST              *HMD 07/79*
         LA    R8,SYSDIR           POINT TO DCB             *HMD 07/79*
         ST    R8,OPENLIST         SAVE IN PARM LIST        *HMD 07/79*
         MVI   OPENLIST,X'80'      INDICATE END OF LIST     *HMD 07/79*
         MVC   TXTU11DS,0(R2) MOVE DSNAME AND LENGTH FOR DYNALLOC
         LA    R1,8           LOAD DDNAME LENGTH
         STH   R1,TXTU15L     AND STORE IT FOR DYNALLOC
         MVC   TXTU15DD,BLANKS CLEAR DDNAME
         LA    R1,DABLK1      LOAD DYNALLOC BLOCK PTR ADDR
         DYNALLOC
         LTR   R15,R15        IS RC = 0
         BNZ   SETNA          IF NOT INDICATE NOT AVAILABLE
         MVC   SYSDIR+40(8),TXTU15DD MOVE DDNAME TO DCB
         MVI   SW1,C'0'       SET READ/USED SW             *HMD 06/79*
         SR    R5,R5          CLEAR READ/USED REG
         RDJFCB (SYSDIR),MF=(E,OPENLIST)
         OI    JFCBTSDM,X'0A' TURN ON THE JFCB DON'T MERGE BITS
         NI    JFCBIND1,X'FE' TURN OFF THE JFCB MEMBER BIT IF ON
         OPEN  (SYSDIR),MF=(E,OPENLIST),TYPE=J
         SR    R7,R7          CLEAR USER HALFWORD REGISTER
READDIR  READ  REALDECB,SF,SYSDIR,DIRAREA,MF=E
         CHECK REALDECB
         LA    R5,1(R5)       INCREMENT USED DIR BLK NO
         CLI   SW1,C'1'       ARE USED BLOCKS FINISHED      *HMD 06/79*
         BE    READDIR        IF SO READ ONLY
         LH    R9,DIRAREA     GET DIRECTORY BYTE COUNT
         LA    R9,DIRAREA(R9) COMPUTE END ADDR OF CUR DIR BLK
         LA    R8,DIRAREA+2   UP PTR TO FIRST DIR ENTRY
CHECKEND CLC   0(8,R8),XFFL8  IS THIS THE END OF THE DIRECTORY ENTRIES
         BE    ENDOFENT       IF SO CALC DIR BLKS USED
         NI    11(R8),X'1F'   TURN OFF UNWANTED BITS
         IC    R7,11(R8)      INSERT NO OF USER HALFWORDS
         SLL   R7,1           DOUBLE IT
         LA    R8,12(R7,R8)   INCREMENT DIR AREA PTR
         CR    R8,R9          HAVE WE FINISHED OFF THIS BLOCK
         BE    READDIR        IF YES READ ANOTHER ONE
         B     CHECKEND       OTHERWISE PROCESS NEXT DIR ENTRY
         SPACE 3
SETNA    MVC   0(3,R3),NA     SET DIRA UNAVAILABLE
         MVC   0(3,R4),NA     SET DIRU UNAVAILABLE
         B     ENDITAL1
         SPACE 3
ABEND1   ABEND (15)
         SPACE 3
ENDOFENT CVD   R5,DBLWORD     BASE 10 USED DIR BLKS
         OI    DBLWORD+7,X'0F' UNSIGN USED DIR BLKS
         UNPK  DBLWORD(5),DBLWORD+5(3) UNPACK USED DIR BLKS
         MVC   0(4,R4),DBLWORD+1 MOVE USED DIR BLKS
         MVI   SW1,C'1'       SET READ/USED SW              *HMD 06/79*
         B     READDIR        AND CONTINUE READING
         SPACE 3
EODAD    CLOSE (SYSDIR),MF=(E,OPENLIST)
         CVD   R5,DBLWORD     BASE 10 READ DIR BLKS
         OI    DBLWORD+7,X'0F' UNSIGN READ DIR BLKS
         UNPK  DBLWORD(5),DBLWORD+5(3) UNPACK READ DIR BLKS
         MVC   0(4,R3),DBLWORD+1 MOVE READ DIR BLKS
ENDITAL1 LEAVE ,0,1024                                      *HMD 07/79*
         EJECT
         CNOP  0,4
TEXTSTAR EQU   *                                            *HMD 07/79*
         DC    X'80',AL3(0)                                 *HMD 07/79*
         SPACE 3                                            *HMD 07/79*
         DC    X'14014000',2H'0',A(0),2F'0'                 *HMD 07/79*
         SPACE 3                                            *HMD 07/79*
         DS    A                                            *HMD 07/79*
         DS    A                                            *HMD 07/79*
         DS    A                                            *HMD 07/79*
         DS    A                                            *HMD 07/79*
         DS    A                                            *HMD 07/79*
         DS    X'80',AL3(0)                                 *HMD 07/79*
         DC    H'2,1'                                       *HMD 07/79*
         DS    CL46                                         *HMD 07/79*
         DC    H'4,1,1',X'08'                               *HMD 07/79*
         DC    H'5,1,1',X'08'                               *HMD 07/79*
         DC    H'6,1,1',X'08'                               *HMD 07/79*
         DC    H'85,1'                                      *HMD 07/79*
         DS    H                                            *HMD 07/79*
         DS    CL8                                          *HMD 07/79*
         DC    H'28,0'                                      *HMD 07/79*
TEXTEND  EQU   *                                            *HMD 07/79*
TEXTLEN  EQU   TEXTEND-TEXTSTAR                             *HMD 07/79*
         SPACE 3
BLANKS   DC    CL8' '
NA       DC    C'N/A'
XFFL8    DC    8X'FF'
         EJECT
SYSDIRX  DCB   BLKSIZE=256,DSORG=PS,EODAD=EODAD,EXLST=0,               *
               LRECL=256,MACRF=R,RECFM=F,DDNAME=X           *HMD 07/79*
DCBLEN   EQU   *-SYSDIRX                                    *HMD 07/79*
         EJECT
STORAGE  DSECT
SAVE     DS    18F                    SAVE AREA             *HMD 07/79*
SYSDIR   DCB   BLKSIZE=256,DSORG=PS,EODAD=EODAD,EXLST=EXITLIST,        *
               LRECL=256,MACRF=R,RECFM=F,DDNAME=X           *HMD 07/79*
READX    READ  REALDECB,SF,0,0,MF=L   REENTRANT READ MACRO  *HMD 07/79*
EXITLIST DC    X'87',AL3(0)           REENTRANT JFCB LIST   *HMD 07/79*
         SPACE 3
         CNOP  2,4
JFCB     DS    CL176
JFCBTSDM EQU   JFCB+52
JFCBIND1 EQU   JFCB+86
         SPACE 3
DIRAREA  DS    CL256                                        *HMD 07/79*
         CNOP  0,4
DABLK1   DS    A                                            *HMD 07/79*
         SPACE 3                                            *HMD 07/79*
DARBLK1  DC    X'14014000',2H'0',A(0),2F'0'                 *HMD 07/79*
         SPACE 3                                            *HMD 07/79*
TXTLIST1 DC    A(0)                                         *HMD 07/79*
         DC    A(0)                                         *HMD 07/79*
         DC    A(0)                                         *HMD 07/79*
         DC    A(0)                                         *HMD 07/79*
         DC    A(0)                                         *HMD 07/79*
         DC    X'80',AL3(0)                                 *HMD 07/79*
         SPACE 3                                            *HMD 07/79*
TXTU11   DC    H'2,1'                                       *HMD 07/79*
TXTU11DS DS    CL46                                         *HMD 07/79*
TXTU12   DC    H'4,1,1',X'08'                               *HMD 07/79*
TXTU13   DC    H'5,1,1',X'08'                               *HMD 07/79*
TXTU14   DC    H'6,1,1',X'08'                               *HMD 07/79*
TXTU15   DC    H'85,1'                                      *HMD 07/79*
TXTU15L  DS    H                                            *HMD 07/79*
TXTU15DD DS    CL8                                          *HMD 07/79*
TXTU16   DC    H'28,0'                                      *HMD 07/79*
         SPACE 3
SW1      DS    C
DBLWORD  DS    D
OPENLIST DS    F
STORLEN  EQU   ((*-STORAGE)+7/8)*8    LENGTH OF STORAGE    *HMD 07/79*
PDSRTNE  CSECT                        RESUME CSECT         *HMD 07/79*
         SPACE 2
         LTORG
         EJECT
         IEFZB4D0
         EJECT
         IEFZB4D2
         SPACE 3
         END
