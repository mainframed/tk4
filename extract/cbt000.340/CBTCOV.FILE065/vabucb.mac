//ASM EXEC ASMFC,PARM='LOAD,NODECK'
//SYSGO  DD  DISP=(,PASS),DSN=&&OBJSET,SPACE=(TRK,(5,5)),UNIT=SYSDA
//ASM.SYSIN  DD  *
         TITLE 'VABDUMP  MODIFIED FOR VS2 REL 2.0'
*  RECEIVED FROM LOCHKEED BURBANK COURTESY OF MR. JOHN KINN
IEAVAD03   START
R0       EQU       0
R1       EQU       1
R2       EQU       2
R3       EQU       3
R4       EQU       4
R5       EQU       5
R6       EQU       6
R7       EQU       7
R8       EQU       8
R9       EQU       9
R10      EQU       10
R11      EQU       11
R12      EQU       12
R13      EQU       13
R14      EQU       14
R15      EQU       15
TCBTIOT   EQU      12
TCBDEB   EQU       8
DEBDCB   EQU       24
DEBDEB   EQU       4
DCBDEB   EQU       44
DCBTIOT  EQU      40
DCBIOBL  EQU       56
PCIOB    EQU       28
IOBAD   EQU       68
PCI      EQU       32
OPTCD    EQU       52
DCBAD    EQU       28
DSORG    EQU       26
MACRF    EQU       42
MYWORK2  EQU   72
MYWORK3  EQU   76
*
         SAVE  (14,12),T,*
         LR    R12,R15
         USING IEAVAD03,R12
         LR    R3,R1
         GETMAIN R,LV=80,SP=253    GET CORE FOR SAVE AREA
*
         ST    R1,8(R13)
         ST    R13,4(R1)
         LR    R13,R1
*
         L     R15,OLD03      GET ADD OF OLD IEAVAD03
         LR    R1,R3
         BALR  R14,R15        GO DO IT
         LTR   R15,R15        DID IT GO OK?
         BNZ   EXIT4          EXIT IF NOT
*
         LR    R1,R3
         USING ABDAREA,R1
         MVC   ABDCC(31),DSLBL     DO HEADING
         BAL   R5,ABDOUT
         L     R2,ABDTCB      GET ADD OF TCB
*
* INITIALIZE DEB AND SET UP ROUTINE
*
         L     R9,TCBDEB(R2)      GET DEB POINTER
TESTEND  LA    R9,0(R9)           CLEAR HI BYTE
         L     R2,ABDTCB      GET ADD OF TCB
         LTR   R9,R9              TEST FOR ADDR OF DEB
         BZ    EXIT
         LA    R0,BADADDR    RECOVERY POINT IF 0C4
         ST    R0,ABDUPRXT
         TM    DEBDCB+3(R9),X'03' IS IT VALID ADDRESS
         BC    7,BADADDR          ERROR MSG IF SO
         L     R10,DEBDCB(R9)     GET POINTER TO DCB
         LA    R10,0(R10)         CLEAR HIGH BYTE
         LA    R0,BADCORE    BRANCH POINT IF 0C4
         ST    R0,ABDUPRXT
*
*
*
         TM    DCBDEB+3(R10),X'03' IS IT VALID ADDRESS
         BC    7,BADCORE          ERROR MSG IF SO
         L     R11,DCBDEB(R10)     GET DEB ADDR FROM DCB
         LA    R11,0(R11)           CLEAR HIGH BYTE
         CR    R9,R11              COMPARE DEB ADDRESS
         BNE   BADCORE            BRANCH IF NOT TO PRINT CORE MSG
         TM    DCBTIOT+1(R10),X'03' IS IT VALID ADDRESS
         BC    7,BADCORE          ERROR MSG IF SO
         L     R11,DCBTIOT(R10)    TIOT DISPLACEMENT
         L     R6,TCBTIOT(R2)     GET TIOT ADDR
         SRL   R11,16              ADJ OFFSET
         LA    R11,0(R6,R11)        POINTER TO TIOT ENTRY
         ST    R11,MYWORK2(R13)        SAVE TIOT ENTRY POINTER
         SR    R10,R10            CLEAR REG 10
         IC    R10,0(R11)          LENGTH OF DD ENTRY IN TIOT
         SH    R10,SIXTEEN        LENGTH OF ENTRY -16 AND DIVIDED
         SRL   R10,2              BY 4 = NUMBER OF UCB'S
         CLC   SYSAB(8),4(R11)     IS IT SYSABEND DD CARD
         BE    NEXTDEB            IF YES, BR TO GET NEXT DEB ADDR
         CLC   SYSU(8),4(R11)      IS IT SYSUDUMP DD CARD
         BE    NEXTDEB            IF YES, BR TO GET NEXT DEB ADDR
*
* R6=TIOT,R9=DEB,R10=#OFUCB'S,R11=IOTENTRY,R12=BASE,RD=ABDAREA,R2=TCB
*
         MVI   ABDCC,C'-'         DOUBLE SPACE CC
         OC    ABDLINE(8),BLANKS
         NC    ABDLINE(8),4(R11)
         CLC   ABDLINE(8),BLANKS  Q/WAS DDNAME EBCDIC ALPHANUM
         MVC   ABDLINE(8),4(R11)   ASSUME YES-MOVE DDNAME FROM TIOT
         BE    DEBPRT             DEFINITELY YES
         MVC   ABDLINE(11),UNK    IT WASNT SO MARK IT UNKNOWN.
DEBPRT   EQU   *
*
* DEB PRINT ROUTINE
*
         MVC   ABDLINE+13(3),DEB  PUT DEB HDR INTO BUFFER
         LR    R4,R9
         LA    R11,4
         SR    R4,R11              BACKUP TO DEB - 4
         IC    R11,0(R4)           GET DEB LENGTH IN DBL WORDS
         SRL   R11,2               CALC NO. OF 32 BYTE CHUNKS (LINES)
         LTR   R6,R11              Q/SIZE AT LEAST 32 BYTES
         BNZ   SIZEOK             YES
         LA    R6,1               SET TO ONE LINE
SIZEOK   EQU   *
         LR    R4,R9              SET DEB TO +0
         BAL   R3,FORMIT          LINK TO CONVRT RTN AND PRNT RTN.
*
* DCB PRINT ROUTINE.
* LENGTH OF DCB MUST BE FOUND IN ORDER TO PRINT THE DCB FOR ALL
* ACCESS METHODS.
*
         MVI   ABDCC,C'-'          SPACE
         MVC   ABDLINE+13(3),DCB  SET UP DCB HEADER
         L     R11,DEBDCB(R9)      GET DCB ADDRESS FOR PRINT
         LA    R4,0(R11)           DCB ADDR TO DATA REG
         CLI   0(R11),X'A0'        SEE IF ACB
         BNE   *+14                NO
         MVC   ABDLINE+13(3),ACB   ACB - MOVE IN ACB DESCRIPTION
         B     DCB3                PRINT AS 3-LINE DCB
         TM    DSORG(R11),X'80'    IS IT AN ISAM DCB
         BZ    *+12               NO TEST NEXT BIT
         LA    R6,8(R0)           SET LINE COUNT TO 8 FOR ISAM
         B     DCBOUT             GO TO PRINT DC
         TM    DSORG(R11),X'20'    IS IT A BDAM DCB
         BZ    *+12               NO TEST NEXT BIT
         LA    R6,4(R0)           SET LINE COUNT TO 4 FOR BDAM
         B     DCBOUT             GO TO PRINT DCB
         TM    DSORG(R11),X'08'    IS IT A GAM DCB
         BZ    *+12               NO TEST NEXT BIT
         LA    R6,2(R0)           SET LINE COUNT TO 2 FOR GAM
         B     DCBOUT             GO TO PRINT DC
DCB3     LA    R6,3(R0)           OTHER ACCESS METHODS = 3
DCBOUT   BAL   R3,FORMIT          LINK TO CONVRT AND PRNT RTN
*
* IOB PRINT ROUTINE
* IOB'S WILL BE PRINTED ONLY IF THEY ARE BSAM, BPAM, OR QSAM
* R11=DCB ADDR14SS, R7=IO ADDRESS, R8=WORK REGISTER
*
IOBPRINT LA    R11,0(R11)           CLEAR HI BYTE FOR COMPARE
         CLI   0(R11),X'A0'        SEE IF ACB
         BE    NEXTCB              ACB - SKIP IOB PRINT
         TM    DSORG(R11),X'42'    TEST DSORG FOR SAM OR PAM
         BZ    NEXTCB             BRANCH IF NOT SAM OR PAM
         LA    R0,NOIOB      BRANCH POINT IF 0C4
         ST    R0,ABDUPRXT
         TM    MACRF(R11),X'80'    TEST MACRF FOR EXCP
         BO    NEXTCB             BRANCH IF EXCP BEING USED
         TM    OPTCD(R11),PCI      TEST FOR PCI
         BZ    NOTPCI             BRANCH IF NOT CHAIN SCHEDULING
         TM    PCIOB+3(R11),X'03'  TEST FOR AN IOB
         BC    7,NOIOB            BRANCH IF NO IOB
         L     R7,PCIOB(R11)       GET IOB FOR CHAIN SCHEDULING
         LA    R4,0(R7)           SAVE ADDRESS FOR PRINT RTN.
         LA    R7,8(R7)           ADJUST PREFIX TO MINUS 8
         SR    R8,R8              INDICATE THAT ICBS TO BE PROCESSED
         B     IOBCHK             GO TO VALIDITY CHK IOB ADDRESS
NOTPCI   TM    IOBAD+3(R11),X'03'  TEST FOR AN IOB
         BC    7,NOIOB            BRANCH IF NO IOB
FIRSTICB L     R7,IOBAD(R11)       GET IOB FOR SIMPLE SCHEDULING OR IOB
         LA    R7,0(R7)           CLEAR HI BYTE
         LTR   R7,R7  IS IT ZERO
         BZ    NOIOB   BRANCH IF IT IS
         LR    R8,R7              SAVE FIRST IOB TO BE PRINTED.
NEXTIOB  LR    R4,R7              SAVE ADDRESS FOR PRINT RTN.
         TM    OPTCD(R11),PCI      TEST FOR PCI.
         BZ    IOBCHK             BRANCH IF NOT CHAIN SCHEDULING
         MVI   ABDCC,C'-'          SPACE A LINE
         MVC   ABDLINE+13(3),ICB  SET UP ICB HEADER
         B     IOBOUT             SKIP CHKING AND PRINT THE ICB
IOBCHK   L     R14,DCBAD(R7)       GET DCB ADDR FROM IOB
         LA    R14,0(R14)         CLEAR HI BYTE
         CR    R14,R11             IS IOB FOR THIS DCB
         BNE   NOIOB              BRANCH NO TO ERROR MSG
         MVI   ABDCC,C'-'          SPACE A LINE
         MVC   ABDLINE+13(3),IOB  SET UP IOB HEADER
IOBOUT   EQU   *
         SR    R6,R6
         IC    R6,DCBIOBL(R11)       IOB LENGTH IN DOUBLEWORDS
         LA    R6,3(,R6)             ADD 3 TO ROUND UP ON DIVIDE
         SRL   R6,2                 DIVIDE BY 4 GIVING LEN IN DUMP LINE
         BAL   R3,FORMIT          LINK TO THE CONVRT AND PRNT RTN.
         TM    3(R7),X'03'        IS NEXT IOB ADDRESS VALID
         BC    7,NOIOB            BRANCH IF NOT
         L     R7,0(R7)           GET NEXT IOB ADDRESS
         LA    R7,0(R7)           CLEAR HI BYTE
         CR    R7,R8              IS THIS IOB SAME AS FIRST
         BE    NEXTCB             IF YES GO TO UCB PRINT
         LTR   R8,R8              CHK IF CHAIN SCHED. IOB JUST PRINTED
         BNZ   NEXTIOB            NO, GO BACK TO PRINT NEXT IOB
         B     FIRSTICB           YES, SET UP TO PRINT ICBS
*
* UCB PRINT ROUTINE
*
NEXTCB   L     R11,MYWORK2(R13)    RESTORE TIOT ENTRY ADDRESS
         LA    R0,NEXTDEB    BRANCH POINT IF 0C4
         ST    R0,ABDUPRXT
         LA    R11,16(R11)          SHIFT R11 TO UCB ENTRY
AGAIN    L     R4,0(R11)           POINT TO UCB FOR PRINT RTN
         LA    R4,0(R4)           CLEAR HIGH BYTE
         LTR   R4,R4
         BZ    NEXTDEB       DUMMY OR JES - NO UCB
         MVI   ABDCC,C'-'    TRIPLE SPACE
         MVC   ABDLINE+13(3),UCB  SET UP HEADER LINE
         TM    2(R4),X'FF'        IS THIS A UCB
         BO    UCBOK              BRANCH IF OK
         CLC   18(2,R4),DEV2321   IS IT A 2321
         BNE   UCBBAD             BRANCH TO PRINT ERROR MSG
UCBOK    LA    R6,2(R0)           SET LINE COUNT TO 2
         MVC   ABDLINE+9(3),13(R4)     UCB NAME TO PRINT
         BAL   R3,FORMIT          LINK TO CONVRT AND PRNT RTN
         LA    R11,4(R11)           POINT TO THE NEXT ENTRY IN TIOT
         BCT   R10,AGAIN          BRANCH BACK ON = OF UCB'S
NEXTDEB  TM    DEBDEB+3(R9),X'03' IS IT VALID ADDRESS
         BC    7,BADADDR          ERROR MSG IF SO
         L     R9,DEBDEB(R9)      GET NEXT DEB ADDRESS
         B     TESTEND            SEE IF WE'RE THROUGH
NOIOB    MVC   ABDLINE+26(L'IOBERR),IOBERR MOVE IOB ERR MSG
         MVI   ABDCC,C'0'         SET UP CARR CONTROL
         BAL   R5,ABDOUT          PRINT IOB ERROR MSG
         B     NEXTCB             RETURN TO PROSSES NEXT
UCBBAD   MVC   ABDLINE+26(L'IOBERR),IOBERR SET UP IOB ERR MSG
         MVC   ABDLINE+34(L'UCB),UCB CHANGE IT TO UCB
         B     SETCC              GO TO SET CARR CONTROL
BADCORE   MVC   ABDLINE+26(L'BADMESG),BADMESG MOVE DCB MSG TO PRINT LIN
         MVC   ABDLINE(11),UNK
SETCC    MVI   ABDCC,C'0'         SET CARR CONTROL
         BAL   R5,ABDOUT          PRINT IT
         B     NEXTDEB            TRY TO PROCCESS NEXT DEB
BADADDR  MVC   ABDCC(L'BADMESS),BADMESS SET UP TO PRINT TERM MSG
         BAL   R5,ABDOUT          PRINT ERROR MSG
*
EXIT     XR    R5,R5          CLEAR FOR RETURN CODE
         XC    ABDUPRXT,ABDUPRXT       REMOVE PAGE FAULT RECOVERY
         LR    R1,R13
         L     R13,4(R13)
         FREEMAIN R,LV=80,A=(R1),SP=253
         LR    R15,R5
         RETURN (14,12),T,RC=(15)
*
EXIT4    LA    R5,4 SET RETURN CODE
         B     EXIT+2
*
         EJECT
*
* FORMIT ROUTINE ******************************************************
*        THE FORMIT ROUTINE TRANSLATES THE ADDRESS PASSED IN REG 4
*        INTO CHARACTERS AND PLACES IT INTO LINE POSITION 18 JUST
*        AFTER THE CONTROL BLOCK NAME.  THIS ROUTINE THEN INTERFACES
*        WITH THE FORMAT ROUTINE VIA A BAL R5.  THIS LINKAGE IS INVOKED
*        AS MANY TIMES AS THERE ARE LINES TO BE PRINTED. THE NUMBER OF
*        LINES MUST BE PASSED TO THE FORMIT ROUTINE IN R6. LINKAGE
*        TO FORMIT IS VIA A BAL R3.
*
FORMIT   ST    R4,ABDWORK        PUT ADDR INTO UNPACK AREA
         UNPK  ABDWORK(9),ABDWORK(5) PACK AND
         TR    ABDWORK(8),TBL-240 TRANSLATE IT
         MVC   ABDLINE+18(6),ABDWORK+2 MOVE ONLY 6 DIGITS TO PRINT
         ST    R3,MYWORK3(R13)     STORE REG ACROSS BAL
         LTR   R6,R6          IS NUMBER OF LINES 0?
         BZ    FORM20         BRANCH IF SO
         LA    R5,20          GET CONSTANT OF 20
         CR    R6,R5          IS NUMBER OF LINES TOO LARGE?
         BNH   NXTLINE        BRANCH IF OK
FORM20   LA    R6,20          SET NUMBER TO 20
NXTLINE  EQU   *
*
*
         BAL   R5,FORMAT          FORMAT AND PRINT THE CNTRL BLK
         BCT   R6,NXTLINE         BRANCH ON NUMBER OF LINES IN R6
FORMEND  L     R3,MYWORK3(R13)
         BR    R3                 RETURN TO CALLING ROUTINE
*
* FORMAT ROUTINE ******************************************************
*        THE FORMAT ROUTINE TRANSLATES GIVEN AREAS OF STORAGE INTO
*        CHARACTERS, INCREMENTALLY PLACES THEM INTO THE OUTPUT
*        LINE FOR PRINTING, AND BRANCHES TO THE OUTPUT ROUTINE.
*        ENTRY IS BY A BAL R5, AND RETURN IS BY A BRANCH R5 IN THE
*        OUTPUT ROUTINE.  THE STANDARD LINE LAYOUT OF STORAGE PRINT
*        ROUTINE IS USED.  THE ONLY INPUT NEEDED IS A POINTER IN R4
*        TO THE DATA IN CORE TO BE PRINTED AND A RETURN POINTER IN R5.
*
FORMAT   LA    R14,LAYOUT         ADDRESS OF LAYOUT OF LINE.
FORMATA  LA    R3,ABDLINE         GET ADDR OF OUTPUT BUFFER
         CLI   0(R14),X'FF'        IS THIS A DELIMITER
         BC    8,ABDOUT           YES, PRINT THE LINE
         SR    R0,R0
         IC    R0,0(R14)          GET LENGTH OF INCREMENT.
         AR    R3,R0              BUMP BUFFER ADDR BY LINE OFFST
         MVC   ABDWORK(4),0(R4)   MOVE FIELD TO WORKAREA
         UNPK  ABDWORK(9),ABDWORK(5)
         TR    ABDWORK(8),TBL-240
         MVC   0(8,R3),ABDWORK    MOVE UNPACKED FIELD TO BUFFER
         LA    R14,1(R14)         POINT TO NEXT CONTROL BYTE.
         LA    R4,4(R4)           POINT TO NEXT RAW DATA.
         B     FORMATA            SEE IF FINISHED YET.
*
ABDOUT   L     R15,OUTVCON    GET ADDR OF OUTPUT ROUTINE
         MVC   ABDLOG(2),=H'125'   SET RDW TO 125
         BALR  R14,R15        GO DO IT
         MVI   ABDCC,C' '     MAKE DEFAULT SINGLE SPACE
         MVC   ABDCC+1(120),ABDCC  CLEAR LINE
         BR    R5
         EJECT
OUTVCON  DC    V(IEAVAD11)    OUTPUT ROUTINE
OLD03    DC    V(IEAVADX3)    OLD ROUTINE 03
SYSU     DC    CL8'SYSUDUMP'
SYSAB    DC    CL8'SYSABEND'
SIXTEEN  DC    H'16'
DEV2321  DC    X'2005'            MASK FOR 2321
BLANKS   DC    CL8' '
UNK      DC    CL11'UNKNOWN DD*'
DEB      DC    C'DEB'
DCB      DC    C'DCB'
ACB      DC    C'ACB'
ICB      DC    C'ICB'
IOB      DC    C'IOB'
UCB      DC    C'UCB'
DSLBL    DC    C'-DATA MANAGEMENT CONTROL BLOCKS'
IOBERR   DC    C'INVALID IOB ADDRESS'
BADMESS  DC      C'-FORMATING ERR'
BADMESG  DC    C'DCB  WAS OVERLAID'
TBL      DC    C'0123456789ABCDEF'
LAYOUT   DC    X'1A232C35414A535CFF'
         DS    0H
ABDAREA  DSECT
*              THIS DESCRIBES THE ABDUMP WORK AREA.  SEE VS2 SUPERVISOR
*                             PLM FOR DETAILED DESCRIPTION
*
ABDTCB   DS    F              ADDR OF TCB FOR DUMPING TASK
         DS    9F
ABDLOG   DS    H             RDW FOR RECORD TO BE PRINTED
         DS    H
ABDCC    DS    1C             CARRIAGE CONTROL CHARACTER
ABDLINE  DS    CL120
         DS    CL3
         DS    15F
ABDUPRXT DS    A             RECOVERY ADDRESS IF PAGE FAULT
         DS    3F
ABDWORK  DS    CL48          WORK AREA
         END
//A EXEC LKED,PARM='XREF,LIST,LET,NCAL,RENT'
//SYSLIN  DD  DISP=OLD,DSN=&&OBJSET
//      DD DDNAME=SYSIN
//SYSLMOD  DD  DISP=OLD,DSN=SYS1.LPALIB,SPACE=
//* AOSC5 POINTS TO SYS1.AOSC5 ON DLIB01
//AOSC5    DD  DISP=SHR,DSN=SYS1.AOSC5
//SYSIN  DD  *
 CHANGE IEAVAD03(IEAVADX3)
 INCLUDE AOSC5(IEAVAD03)
 ORDER IEAVAD00(P),IEAVADX3(P)
 ORDER IEAVAD03
 ORDER IEAVAD01(P),IEAVAD0B
 ORDER IEAVAD02(P),IEAVAD05
 ORDER IEAVAD06(P),IEAVAD07,IEAVAD08
 ORDER IEAVAD11(P),IEAVAD31,IEAVAD51,IEAVAD71,IEAVAD0A
 ORDER IEAVAD0C(P),IEAVAD0D
 INCLUDE AOSC5(IEAVAD01,IEAVAD02,IEAVAD03)
 INCLUDE AOSC5(IEAVAD05,IEAVAD06,IEAVAD07,IEAVAD08)
 INCLUDE AOSC5(IEAVAD0A,IEAVAD0B,IEAVAD0C)
 INCLUDE AOSC5(IEAVAD0D,IEAVAD00,IEAVAD11,IEAVAD31)
 INCLUDE AOSC5(IEAVAD51,IEAVAD71)
 ENTRY IEAVAD00
 NAME IGC0005A(R)
/*
