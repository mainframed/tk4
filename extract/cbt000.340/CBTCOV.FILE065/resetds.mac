         MACRO
&LABEL   #SLC
.*---------------------------------------------------------------------
.*
.*       STANDARD LINKAGE MACRO
.*
.*---------------------------------------------------------------------
         LCLA  &AA,&BB,&CC
&AA      SETA  1
&LABEL   CSECT
         SAVE  (14,12),,'&LABEL &SYSPARM &SYSDATE &SYSTIME '
         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER
         LR    &SYSLIST(1),R15    SET BASE
         LA    R1,SAVEAREA
         B     START
SAVEAREA DC    18F'0'
START    EQU   *
         ST    R13,4(R1)           SAVE BACK CHAIN
         ST    R1,8(R13)           SET FORWARD CHAIN
         L     R1,24(R13)          RESTORE REG 1
         LA    R13,SAVEAREA        SET SAVEAREA POINTER
.LOOP    ANOP
&AA      SETA  &AA+1
&CC      SETA  &CC+4096
         AIF   (&AA GT N'&SYSLIST).DONE
&BB      SETA  &AA-1
         USING &LABEL+&CC,&SYSLIST(&AA) INFORM ASSEMBLER
         LA    &SYSLIST(&AA),2048(&SYSLIST(&BB))  LOAD NEXT BASE REG
         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG
         AGO   .LOOP
.DONE    ANOP
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         MEND
*----------------------------------------------------------------------
*----------------------------------------------------------------------
*
*        FREEWARE: THIS PROGRAM IS DISTRIBUTED ON AN AS-IS BASIS
*                  WITHOUT WARRANTY, EITHER EXPRESSED OR IMPLIED, BY:
*
*                  THE NATIONAL SYSTEMS PROGRAMMERS ASSOCIATION (NASPA)
*                  P.O. BOX 21525
*                  GREENFIELD, WI 53221
*
*
*        PROGRAM WRITTEN BY:
*
*                  ORIGINAL AUTHOR UNKNOWN
*
*----------------------------------------------------------------------
*
*     THIS PROGRAM HAS MET A BASIC SET OF PROGRAMMING AND
*     DOCUMENTATION STANDARDS, BUT HAS NOT BEEN PROGRAM TESTED IN ANY
*     FORMAL FASHION BY NASPA. THE USER IS EXPECTED TO MAKE THE FINAL
*     EVALUATION OF THE USE OF THIS PROGRAM IN THEIR ENVIRONMENT.
*
*     NASPA MAKES NO WARRANTY, EXPRESSED OR IMPLIED, OF THE FITNESS
*     FOR A PARTICULAR PURPOSE AS RELATES TO THE DOCUMENTATION,
*     FUNCTION, RESULTS, OR PERFORMANCE OF THIS PROGRAM.
*
*     IMPLEMENTATION AND USE OF THIS PROGRAM CONSTITUTES A RELEASE
*     FROM LIABILITY OF NASPA FOR ANY PROBLEMS ARISING FROM THE USE OF
*     THIS PROGRAM AT THE USER'S INSTALLATION.
*
*     THIS PROGRAM IS MADE AVAILABLE BY NASPA WITHOUT CHARGE.
*     RECIPIENTS ARE FREE TO MAKE THIS PROGRAM AVAILABLE TO OTHERS IN
*     LIKE MANNER, PROVIDED THIS DISCLAIMER IS KEPT INTACT.  IT MAY
*     NOT BE SOLD, TRADED, OR EXCHANGED FOR CASH, SERVICES, OR AS AN
*     INCENTIVE FOR SERVICES AND/OR OTHER PURCHASES, NOR MAY IT BE
*     INTEGRATED INTO ANY PROGRAM FOR SUCH USE.
*
*----------------------------------------------------------------------
*----------------------------------------------------------------------
***********************************************************************
*                                                                     *
*        THIS BATCH UTILITY WILL RESET (EMPTY) PARTITIONED OR         *
*        SEQUENTIAL DATASETS IN PREPARATION FOR A RELOAD.             *
*        THE RESULTANT DATASET WILL APPEAR AS THOUGH IT HAD BEEN      *
*        SCRATCHED AND RE-ALLOCATED, HOWEVER, THE OVERHEAD OF         *
*        SCRATCH/ALLOCATE AND UNCATALOG/CATALOG IS AVOIDED.           *
*        ADDITIONALLY, THE DATASET RESET WILL RESIDE IN THE           *
*        ORIGINAL LOCATION ON THE VOLUME (NOT THE CASE WITH           *
*        DELETE & RE-ALLOCATED).  THIS ALLOWS FOR PERMANENT           *
*        PLACEMENT OF DATASETS EVEN THOUGH THEY MAY BE RELOADED.      *
*                                                                     *
*        FOR EACH DATASET TO BE RESET, A 'RESET...' DD CARD MUST      *
*        BE PLACED IN THE JOB STEP (THE ABOVE PERIODS CAN BE ANY      *
*        CHARACTERS SINCE ONLY THE FIRST FIVE ARE CHECKED)            *
*        AS FOLLOWS:                                                  *
*                                                                     *
*        //JOBNAME  JOB  (ACCT),PGMRNAME,CLASS=A                      *
*        //RESET    EXEC PGM=RESETDS                                  *
*        //RESET1   DD   DISP=OLD,DSN=PDS.DATASET1                    *
*        //RESETSEQ DD   DISP=OLD,DSN=SEQ.DATASET                     *
*        //RESET02  DD   DISP=OLD,DSN=PDS.DATASET2                    *
*        //RESET003 DD   DISP=OLD,DSN=PDS.DATASET3                    *
*                                                                     *
*        PARM INFORMATION IS NOT REQUIRED                             *
*                                                                     *
*        ATTRIBUTES: NON-REENT NON-AUTH                               *
*                                                                     *
*        NOTE: THIS ROUTINE USES THE 'TRKCALC' MACRO WHICH            *
*        IS ONLY AVAILABLE WITH DFS SUPPORT.                          *
*                                                                     *
***********************************************************************
         EJECT
RESETDS  #SLC  R12
         L     R1,16               GET CVT POINTER
         L     R1,0(R1)            OLD/NEW POINTER
         L     R1,4(R1)            OUR TCB POINTER
         L     R10,12(R1)          OUR TIOT POINTER
         A     R10,=F'24'          BUMP TO FIRST DD ENTRY
NEXTENT  DS    0H
         CLI   0(R10),X'00'        END OF TIOT?
         BE    EXIT                YES, ALL DONE
         CLC   4(5,R10),=CL5'RESET' IS THIS A TARGET DATASET?
         BE    PROCESS             YES, PROCESS IT
NEXTDD   DS    0H
         SR    R0,R0               CLEAR FOR IC
         IC    R0,0(R10)           GET ENTRY SIZE
         AR    R10,R0              BUMP TO NEXT ENTRY
         B     NEXTENT             PROCESS NEXT ENTRY
         EJECT
*
*        A RESET... DD HAS BEEN FOUND, IF SEQUENTIAL, RESET IT
*        THROUGH AN OPEN/CLOSE SEQUENCE
*
PROCESS  DS    0H
         MVC   DCBSEQ+DCBDDNAM-IHADCB(8),4(R10) MOVE DDNAME TO DCB
         RDJFCB DCBSEQ             GET THE JFCB
         MVC   VOLSER,JFCBVOLS     MOVE THE VOLSER FOR OBTAIN
         OBTAIN CAMLST             READ IN THE FORMAT1 DSCB
         LTR   R15,R15             DID IT WORK?
         BNZ   ERR1                NO, EXIT AS ERROR
         CLI   DS1DSORG,DS1DSGPS   IS THIS A SEQUENTIAL DATASET?
         BNE   CHECKPDS            NO, CHECK PDS THEN
         OPEN  (DCBSEQ,(OUTPUT))   OPEN THE FILE TO RESET IT
         CLOSE DCBSEQ              AND CLOSE IT
         B     NEXTDD              PROCESS NEXT ENTRY
         EJECT
*
*        IF THE ENTRY IS A PDS:
*        1)  READ THE FIRST PDS DIRECTORY BLOCK (USING BSAM)
*        2)  RE-WRITE SAME AS AN EMPTY BLOCK (USING EXCP)
*        3)  READ (SKIP) THE REMAINING DIRECTORY BLOCKS
*            (THIS ALLOWS US TO DETERMINE THE LAST RECORD
*            OF THE DIRECTORY)
*        4)  CALCULATE THE TRACK BALANCE (USING TRKCALC MACRO)
*        5)  UPDATE THE EXCP DCB WITH TO REFLECT NEXT AVAILABLE
*            TRACK AND TRACK BALANCE
*        6)  CLOSE THE TWO DCBS (THE EXCP DCB CLOSE CAUSES THE
*            DSCB LSTAR FIELD(S) TO BE UPDATED)
*
CHECKPDS DS    0H
         CLI   DS1DSORG,DS1DSGPO IS THIS A PARTITIONED DATASET?
         BNE   ERR3                NO, INVALID REQUEST
         MVC   DCBBSAM+DCBDDNAM-IHADCB(8),4(R10) MOVE DDN TO BSAM DCB
         MVC   DCBEXCP+DCBDDNAM-IHADCB(8),4(R10) MOVE DDN TO EXCP DCB
         OPEN  (DCBBSAM,(INPUT),DCBEXCP,(OUTPUT))
         TM    DCBEXCP+DCBOFLGS-IHADCB,DCBOFOPN DID IT OPEN?
         BZ    ERR4                NO, OPEN FAILED
         TM    DCBBSAM+DCBOFLGS-IHADCB,DCBOFOPN DID IT OPEN?
         BZ    ERR4                NO, OPEN FAILED
         READ  DECB1,SF,DCBBSAM,BUFFER,'S' READ THE FIRST DIR BLOCK
         CHECK DECB1               WAIT FOR COMPLETION
         MVC   MBBCCHHR(8),DCBBSAM+DCBFDAD-IHADCB COPY DISK ADDRESS
         XC    ECB,ECB             CLEAR ECB
         EXCP  IOB                 UPDATE THE FIRST DIRECTORY BLOCK
         WAIT  ECB=ECB             WAIT FOR COMPLETION
         CLI   ECB,X'7F'           VALID COMPLETION?
         BNE   ERR5                NO, INFORM USER
LOOP     READ  DECB2,SF,DCBBSAM,BUFFER,'S' READ (SKIP) THE REMAINING
         CHECK DECB2               WAIT FOR COMPLETION
         B     LOOP                LOOP UNTIL END OF FILE
         EJECT
*
*        CALCULATE THE SPACE REMAINING ON THE CURRENT (LAST) TRACK
*        TO PROVIDE A BASE FOR THE NEXT TRKCALC FUNCTION.
*
EODAD    DS    0H                  O.K! NOW HAVE DISK ADDR OF LAST REC
         SR    R2,R2               CLEAR FOR IC
         IC    R2,DCBBSAM+DCBFDAD+7-IHADCB GET REC # OF FILE MARK
         BCTR  R2,R0               DECREMENT FOR FILE MARK
         SR    R3,R3               CLEAR FOR ICM
         ICM   R3,7,17(R10)        TIOT ENTRY UCB POINTER
         TRKCALC FUNCTN=TRKBAL,UCB=(R3),REGSAVE=YES,MF=(E,TRKCALC),    *
               R=(R2),K=8,DD=256   CALCULATE CURRENT TRACK BALANCE
         LA    R2,1(R2)            INCRMENT FOR FILE MARK
*
*        CALCULATE THE SPACE REMAINING ON THE CURRENT (LAST) TRACK
*        FOLLOWING THE FILE MARK.
*
         TRKCALC FUNCTN=TRKBAL,UCB=(R3),REGSAVE=YES,MF=(E,TRKCALC),    *
               BALANCE=STARBAL,                                        *
               R=(R2),K=0,DD=0     CALCULATE BALANCE AFTER EOF
         STCM  R0,3,DCBEXCP+DCBTRBAL-IHADCB AND UPDATE THE EXCP DCB
         MVC   DCBEXCP+DCBFDAD-IHADCB(8),DCBBSAM+DCBFDAD-IHADCB
         CLOSE (DCBBSAM,,DCBEXCP)  CLOSE THE FILES (UPDATE DSCLSTAR)
         B     NEXTDD              PROCESS NEXT ENTRY
EXIT     DS    0H
         L     R15,RC              GET FINAL RETURN CODE
         L     R13,4(R13)         GET BACK CHAIN POINTER
         ST    R15,16(R13)        SAVE REGISTER 15 (RETCODE)
         LM    R14,R12,12(R13)    RESTORE CALLERS REGS
         BR    R14                RETURN TO CALLER
         EJECT
*
*        ERROR PROCESSING ROUTINE
*
ERR1     MVC   WTO1+17(32),=CL32'OBTAIN FAILED FOR'
         B     ERR0                 TO COMMON CODE
ERR2     MVC   WTO1+17(32),=CL32'OPEN FAILED FOR SEQ DCB'
         B     ERR0                 TO COMMON CODE
ERR3     MVC   WTO1+17(32),=CL32'INVALID DSORG'
         B     ERR0                 TO COMMON CODE
ERR4     MVC   WTO1+17(32),=CL32'OPEN FAILED FOR PDS DCB'
         B     ERR0                 TO COMMON CODE
ERR5     MVC   WTO1+17(32),=CL32'EXCP FAILED'
         B     ERR0                 TO COMMON CODE
ERR0     MVC   WTO2+17(44),JFCB     MOVE DSNAME TO MESSAGE
WTO1     WTO  'RESETDS:                                    ',          *
               ROUTCDE=11
WTO2     WTO  'RESETDS:                                              ',*
               ROUTCDE=11
         MVI   RC+3,12              SET RETURN CODE
         B     NEXTDD               PROCESS NEXT DD IF POSSIBLE
         EJECT
*                                                                     *
*        CONSTANTS:  MOST ARE ORDER DEPENDENT SO BE CAREFUL           *
*                                                                     *
*        THE FOLLOWING ARE ORDER DEPENDENT
         DS    0D                  DOUBLE WORD ALIGN
DSCB     DS    265C                DSCB WORK AREA
         PRINT OFF
         ORG   DSCB-44             (ONLY 96 BYTES READ BY OBTAIN)
         IECSDSL1 (1)              DSCB MAPPING MACRO
         PRINT ON
         ORG
VOLSER   DC    CL6' '              VOLSER FOR OBTAIN
KEY      DC    8X'FF'              KEY FIELD
DATA     DC    X'000E'             BYTES USED IN DIRECTORY BLOCK
         DC    8X'FF',246X'00'     ENDING FENCE AND DATA
CCW1     CCW   X'31',CCHHR,X'40',5 SEARCH-ID
CCW2     CCW   X'08',CCW1,0,0      TIC
CCW3     CCW   X'0D',KEY,0,264     WRITE KEY & DATA
IOB      DC    0D'0'               *****
         DC    X'42'               *
         DC    XL4'0'              *
         DC    AL3(ECB)            * EXCP'S
         DC    2A(0) CSW           *  IOB
         DC    A(CCW1)             *
         DC    A(DCBEXCP)          *
         DC    2A(0)               *
MBBCCHHR DC    XL3'000000'         *
CCHHR    DC    XL5'00000000'       *****
*        END OF ORDER DEPENDENCE
*
         DS    0D                  DOUBLEWORD ALIGNMENT
CAMLST   CAMLST SEARCH,JFCB,VOLSER,DSCB  TO READ THE FORMAT 1 DSCB
BUFFER   DC    CL256' '            BSAM READ BUFFER
RC       DC    A(0)                FINAL RETURN CODE
ECB      DC    F'0'                EXCP ECB
OPENLIST DC    X'87',AL3(JFCB)     JFCB ADDR FOR SEQ DCB
JFCB     DC    XL176'00'           JFCB AREA
         ORG   JFCB
         PRINT OFF
         IEFJFCBN                  DSECT FOR JFCB
         PRINT ON
         ORG
DCBSEQ   DCB   DDNAME=DUMMY,DSORG=PS,MACRF=W,EXLST=OPENLIST
DCBBSAM  DCB   DDNAME=JUNK,DSORG=PS,MACRF=R,EODAD=EODAD,               *
               LRECL=256,BLKSIZE=256,RECFM=F
DCBEXCP  DCB   DDNAME=JUNK,DSORG=PS,MACRF=E,KEYLEN=8,DEVD=DA
         LTORG
TRKCALC  TRKCALC MF=L              TRKCALC PARAMETER LIST
         ORG   TRKCALC             PROVIDE LABELS FOR TRKCALC
         PRINT OFF
         TRKCALC MF=D              TRKCALC DSECT
         ORG
         DCBD  DSORG=PS,DEVD=DA
         END
