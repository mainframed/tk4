VSAM$O   CSECT                         DEFINE CSECT
***********************************************************************
*
*    ROUTINE NAME ---------> VSAM$O
*
*    ENTRY POINTS ---------> -NONE-
*
*    EXTERNAL REFERENCES --> -NONE-
*
*    PARMS:  ACBADDR  - A FULLWORD IN WHICH VSAM$O STORES THE ADDRESS
*                       OF THE AREA IT OBTAINS FOR THE ACB
*            RPLADDR  - A FULLWORD IN WHICH VSAM$O STORES THE ADDRESS
*                       OF THE AREA IT OBTAINS FOR THE RPL
*            DDNAME   - 8 CHAR DDNAME
*            FLAG     - A FULLWORD INTEGER INDICATING EXCEPTIONAL
*                       CONDITIONS:
*                       0 - ALL FUNCTIONS PERFORMED SUCCESSFULLY
*                       1 - ERROR IN THE GENCB FOR THE ACB
*                       2 - ERROR PERFORMING MODCB FOR THE ACB
*                       3 - UNRECOGNIZED OPTION SPECIFIED
*                       4 - OPEN ERROR
*                       5 - ERROR IN THE GENCB FOR THE RPL
*                       6 - INVALID VALUE FOR BUFND
*                       7 - INVALID VALUE FOR BUFNI
*            REG15    - A FULLWORD INTEGER CONTAINING THE RETURN CODE
*                       FROM THE OFFENDING MACRO CALL.
*            REG0     - A FULLWORD INTEGER CONTAINING THE ERROR CODE
*                       FROM THE OFFENDING MACRO CALL.
*            ERROR    - A FULLWORD INTEGER CONTAINING THE ERROR FIELD
*                       FROM OPEN.
*            8TH-NTH PARMS - CHARACTER STRINGS CONTAINING PROCESSING
*                            OPTIONS.  ALLOWED OPTIONS ARE:
*                            ADR,DSN,DFR,DIR,ICI,IN,OUT,SIS,AIX,RST,
*                            BUFNDNN WHERE NN IS NUMBER OF BUFFERS,
*                            BUFNINN WHERE NN IS NUMBER OF BUFFERS,
*                            DMY (IGNORED)
*
*    DATE LAST MODIFIED ---> 03/05/81
*
*    ROUTINE DESCRIPTION:
*
*         THIS ROUTINE CREATES AN ACB AND AN RPL AND THEN OPENS THE
*    DATASET ASSOCIATED WITH THE ACB.
*
***********************************************************************
*
*     REGISTER EQUATES AND USAGE
*
R0       EQU   0
R1       EQU   1
R2       EQU   2                       WORK
R3       EQU   3                       WORK
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10                      ADDR OF THE ACB
R11      EQU   11                      ADDR OF PARMLIST
R12      EQU   12                      BASE REG
R13      EQU   13                      WORKAREA BASE REG AND SAVE AREA
R14      EQU   14                      RETURN ADDR
R15      EQU   15                      RETURN CODE
*
*     HOUSEKEEPING
*
         B     12(R15)                 BRANCH AROUND CONSTANT
         DC    X'07'
         DC    CL7'VSAM$O '
         STM   R14,R12,12(R13)         SAVE REGISTERS
         LR    R12,R15                 SET REG 12 TO ENTRY ADDR
         USING VSAM$O,R12              EXTABLISH ADDRESSABILITY
         LR    R11,R1                  SAVE R1
         LR    R2,R13                  SAVE ADDR OF CALLING SAVE AREA
         GETMAIN RU,LV=WORKSIZE        GET SOME CORE
         LR    R13,R1                  SAVE ADDR OF CORE OBTAINED
         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY
         ST    R2,SAVEAREA+4           STORE ADDR OF CALLING SAVE AREA
         ST    R13,8(R2)               STORE ADDR OF MY SAVE AREA
         MVC   ACBADDR(PARMLEN),0(R11) SAVE PARAMETER ADDRESSES
*
*     INITIALIZE THE RETURN CODES
*
         L     R2,FLAG                 LOAD ADDR OF FLAG    PARM
         XC    0(4,R2),0(R2)           ZERO FLAG
         L     R2,REG15                LOAD ADDR OF REG15   PARM
         XC    0(4,R2),0(R2)           ZERO REG15
         L     R2,REG0                 LOAD ADDR OF REG0    PARM
         XC    0(4,R2),0(R2)           ZERO REG0
         L     R2,ERROR                LOAD ADDR OF ERROR   PARM
         XC    0(4,R2),0(R2)           ZERO ERROR
*
*     GET SOME CORE FOR THE ACB AND RPL
*
         GETMAIN RU,LV=76              GET SOME CORE FOR THE ACB
         LR    R10,R1                  SAVE ADDR OF CORE OBTAINED
         L     R2,ACBADDR              LOAD ADDR OF ACBADDR PARM
         ST    R10,0(R2)               RETURN ACBADDR
         GETMAIN RU,LV=76              GET SOME CORE FOR THE RPL
         LR    R9,R1                   SAVE ADDR OF CORE OBTAINED
         L     R2,RPLADDR              LOAD ADDR OF RPLADDR PARM
         ST    R9,0(R2)                RETURN RPLADDR
*
*     CREATE THE ACB
*
         L     R2,DDNAME               LOAD ADDR OF DDNAME  PARM
         GENCB BLK=ACB,                                                X
               AM=VSAM,                                                X
               WAREA=(R10),                                            X
               LENGTH=76,                                              X
               DDNAME=(*,0(R2))
         LTR   R15,R15                 TEST THE RETURN CODE
         BZ    OKGENACB                IT'S OK
         L     R2,REG15                LOAD ADDR OF REG15   PARM
         ST    R15,0(R2)               RETURN REG15
         L     R2,REG0                 LOAD ADDR OF REG0    PARM
         ST    R0,0(R2)                RETURN REG0
         L     R2,FLAG                 LOAD ADDR OF FLAG    PARM
         MVC   0(4,R2),=F'1'           RETURN FLAG
         B     RETURN                  AND QUIT
OKGENACB EQU   *
*
*     NOW MAKE ANY MODS REQUESTED
*
         LA    R3,PARMLEN-4(R11)       POINT TO ADDR OF LAST REAL PARM
OPTLOOP  TM    0(R3),X'80'             TEST HIGH ORDER BIT
         BO    ENDOPT                  IF ON, THAT WAS THE LAST OPTION
         LA    R3,4(R3)                POINT TO NEXT PARM
         L     R4,0(R3)                LOAD THE ADDR OF THE PARM
         CLC   0(2,R4),=C'IN'          "IN" OPTION SPECIFIED?
         BE    OPTLOOP                 IF SO, NO NEED TO MODIFY
         CLC   0(3,R4),=C'DMY'         "DMY" OPTION SPECIFIED?
         BE    OPTLOOP                 IF SO, NO NEED TO MODIFY
         CLC   0(3,R4),=C'ADR'         "ADR" OPTION SPECIFIED?
         BNE   NOTADR
         MODCB ACB=(R10),MACRF=(ADR)
         B     CHECKOPT
NOTADR   EQU   *
         CLC   0(3,R4),=C'DSN'         "DSN" OPTION SPECIFIED?
         BNE   NOTDSN
         MODCB ACB=(R10),MACRF=(DSN)
         B     CHECKOPT
NOTDSN   EQU   *
         CLC   0(3,R4),=C'DFR'         "DFR" OPTION SPECIFIED?
         BNE   NOTDFR
         MODCB ACB=(R10),MACRF=(DFR)
         B     CHECKOPT
NOTDFR   EQU   *
         CLC   0(3,R4),=C'DIR'         "DIR" OPTION SPECIFIED?
         BNE   NOTDIR
         MODCB ACB=(R10),MACRF=(DIR)
         B     CHECKOPT
NOTDIR   EQU   *
         CLC   0(3,R4),=C'ICI'         "ICI" OPTION SPECIFIED?
         BNE   NOTICI
         MODCB ACB=(R10),MACRF=(ICI)
         B     CHECKOPT
NOTICI   EQU   *
         CLC   0(3,R4),=C'OUT'         "OUT" OPTION SPECIFIED?
         BNE   NOTOUT
         MODCB ACB=(R10),MACRF=(OUT)
         B     CHECKOPT
NOTOUT   EQU   *
         CLC   0(3,R4),=C'SIS'         "SIS" OPTION SPECIFIED?
         BNE   NOTSIS
         MODCB ACB=(R10),MACRF=(SIS)
         B     CHECKOPT
NOTSIS   EQU   *
         CLC   0(3,R4),=C'AIX'         "AIX" OPTION SPECIFIED?
         BNE   NOTAIX
         MODCB ACB=(R10),MACRF=(AIX)
         B     CHECKOPT
NOTAIX   EQU   *
         CLC   0(3,R4),=C'RST'         "RST" OPTION SPECIFIED?
         BNE   NOTRST
         MODCB ACB=(R10),MACRF=(RST)
         B     CHECKOPT
NOTRST   EQU   *
         CLC   0(5,R4),=C'BUFND'       "BUFND" OPTION SPECIFIED?
         BNE   NOTBUFND
         LA    R5,5(R4)                POINT TO FIRST CHAR
         LA    R6,2                    # OF CHARS
         BAL   R1,CHRTOBIN
         LTR   R7,R7                   CHECK RESULT
         BP    OKBUFND                 IT'S OK
         L     R2,FLAG                 LOAD ADDR OF FLAG    PARM
         MVC   0(4,R2),=F'6'           RETURN FLAG
         B     RETURN                  AND QUIT
OKBUFND  MODCB ACB=(R10),BUFND=(R7)
         B     CHECKOPT
NOTBUFND EQU   *
         CLC   0(5,R4),=C'BUFNI'       "BUFNI" OPTION SPECIFIED?
         BNE   NOTBUFNI
         LA    R5,5(R4)                POINT TO FIRST CHAR
         LA    R6,2                    # OF CHARS
         BAL   R1,CHRTOBIN
         LTR   R7,R7                   CHECK RESULT
         BP    OKBUFNI                 IT'S OK
         L     R2,FLAG                 LOAD ADDR OF FLAG    PARM
         MVC   0(4,R2),=F'7'           RETURN FLAG
         B     RETURN                  AND QUIT
OKBUFNI  MODCB ACB=(R10),BUFNI=(R7)
         B     CHECKOPT
NOTBUFNI EQU   *
         L     R2,FLAG                 LOAD ADDR OF FLAG    PARM
         MVC   0(4,R2),=F'3'           RETURN FLAG
         B     RETURN                  AND QUIT
CHECKOPT LTR   R15,R15                 TEST RETURN CODE
         BZ    OPTLOOP
         L     R2,REG15                LOAD ADDR OF REG15   PARM
         ST    R15,0(R2)               RETURN REG15
         L     R2,REG0                 LOAD ADDR OF REG0    PARM
         ST    R0,0(R2)                RETURN REG0
         L     R2,FLAG                 LOAD ADDR OF FLAG    PARM
         MVC   0(4,R2),=F'2'           RETURN FLAG
         B     RETURN                  AND QUIT
ENDOPT   EQU   *
*
*     CREATE THE RPL
*
         GENCB BLK=RPL,                                                X
               AM=VSAM,                                                X
               WAREA=(R9),                                             X
               LENGTH=76,                                              X
               ACB=(R10)
         LTR   R15,R15                 TEST THE RETURN CODE
         BZ    OKGENRPL                IT'S OK
         L     R2,REG15                LOAD ADDR OF REG15   PARM
         ST    R15,0(R2)               RETURN REG15
         L     R2,REG0                 LOAD ADDR OF REG0    PARM
         ST    R0,0(R2)                RETURN REG0
         L     R2,FLAG                 LOAD ADDR OF FLAG    PARM
         MVC   0(4,R2),=F'5'           RETURN FLAG
         B     RETURN                  AND QUIT
OKGENRPL EQU   *
*
*     TIME FOR OPEN
*
         OPEN  ((R10))
         LTR   R15,R15                 TEST THE RETURN CODE
         BZ    OKOPEN                  IT'S OK
         L     R2,REG15                LOAD ADDR OF REG15   PARM
         ST    R15,0(R2)               RETURN REG15
         LA    R2,SHOWAREA             LOAD ADDR OF SHOWAREA
         SHOWCB ACB=(R10),AREA=(R2),LENGTH=4,FIELDS=(ERROR)
         L     R2,ERROR                LOAD ADDR OF ERROR   PARM
         MVC   0(4,R2),SHOWAREA        RETURN ERROR
         L     R2,FLAG                 LOAD ADDR OF FLAG    PARM
         MVC   0(4,R2),=F'4'           RETURN FLAG
         B     RETURN                  AND QUIT
OKOPEN   EQU   *
*
*     TERMINATE
*
RETURN   EQU   *
         SLR   R15,R15                 ZERO R15
         LR    R1,R13                  SAVE PTR TO GETMAINED SAVE AREA
         LR    R2,R15                  SAVE RETURN CODE
         L     R13,SAVEAREA+4          LOAD ADDR OF CALLING SAVE AREA
         FREEMAIN R,LV=WORKSIZE,A=(R1) FREE THE CORE WE GOT
         LR    R15,R2                  PUT RETURN CODE IN R15
         L     R14,12(R13)             RESTORE R14
         LM    R0,R12,20(R13)          RESTORE R0 THROUGH R12
         BR    R14                     RETURN
*
*     ROUTINE TO CONVERT NUMERIC CHARS TO BINARY
*
*     REG USE:
*     R1  - RETURN ADDR
*     R5  - PTR TO FIRST CHAR
*     R6  - # OF CHARS TO PROCESS
*     R7  - BINARY RESULT - NEG IF INVALID CHARS
*     R8  - WORK
CHRTOBIN XR    R7,R7                   ZERO RESULT
         XR    R8,R8                   ZERO WORK
DIGTLOOP CLI   0(R5),C'0'              CHECK FOR DIGIT
         BL    NOTDIGIT                CAN'T BE GOOD
         CLI   0(R5),C'9'              CHECK FOR DIGIT
         BH    NOTDIGIT                CAN'T BE GOOD
         IC    R8,0(R5)                LOAD DIGIT
         N     R8,=X'0000000F'         JUST WANT THE LAST NIBBLE
         MH    R7,=H'10'               SHIFT WHAT WAS THERE OVER
         AR    R7,R8                   ADD DIGIT
         LA    R5,1(R5)                POINT TO NEXT TO CHAR
         BCT   R6,DIGTLOOP
         BR    R1                      RETURN
NOTDIGIT L     R7,=F'-1'               SET FLAG
         BR    R1                      RETURN
*
*     CONSTANTS
*
         LTORG
*
*     DSECTS
*
WORKAREA DSECT
SAVEAREA DS    18F
         DS    0F
PARMSTRT EQU   *
ACBADDR  DS    F                       ADDR OF THIS PARM
RPLADDR  DS    F                       ETC
DDNAME   DS    F                       ETC
FLAG     DS    F
REG15    DS    F
REG0     DS    F
ERROR    DS    F
PARMLEN  EQU   *-PARMSTRT
SHOWAREA DS    F
WORKSIZE EQU   *-WORKAREA
         END   VSAM$O
