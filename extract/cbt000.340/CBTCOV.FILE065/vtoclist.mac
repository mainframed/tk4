VTOCLIST TITLE 'DIRECT-ACCESS VOLUME DIRECTORY LISTER'
         MACRO
&TAG     XPRINNRA  &WA,&IHBPARM
.* INNER MACRO USED IN CALLS TO 'XPRNTSUB'
&TAG     L     15,VPRNTSUB             LOAD ENTRY POINT             JRB
         AIF   ('&WA' NE '').WOK
         L     0,=A(XPRDCB01)      LOAD STANDARD WORK AREA ADDRESS  JRB
         AGO   .BAL
.WOK     AIF   ('&WA' EQ '(0)').BAL
         AIF   ('&WA'(1,1) EQ '(').REG
         L     0,=A(&WA)               LOAD WORK AREA ADDRESS       JRB
         AGO   .BAL
.REG     LR    0,&WA(1)                LOAD WORK AREA ADDRESS
.BAL     BAL   14,&IHBPARM.(15)        CALL PRINT SUBROUTINE
         MEND
         MACRO
&SYMBOL  XPRCLOSE  &WA
.* MACRO TO EXECUTE A CLOSE CALL TO 'XPRNTSUB'.
&SYMBOL  XPRINNRA  &WA,68                                           JRB
         MEND
         MACRO
&SYMBOL  XPRDCB  &DDNAME=SYSPRINT,&BLKSIZE=0
         LCLC  &TAG,&OLDSECT                                        JRB
.* MACRO TO GENERATE A WORK AREA FOR A PRINTER DATA SET, CONTAINING
.* A SAVE AREA, THE DCB, OPEN AND CLOSE PARAMETER LISTS, AND VARIOUS
.* CELLS AND SWITCHES.
&TAG     SETC  '&SYMBOL'
         AIF   (T'&SYMBOL NE 'O').TOK  TEST IF NAME SUPPLIED
&TAG     SETC  'XPRA01'                SUPPLY STANDARD PRA NAME
.TOK     ANOP
&OLDSECT SETC  '&SYSECT'           SAVE CURRENT CSECT NAME          JRB
&TAG     CSECT ,                   PUT WORK AREAS IN OWN CSECT      JRB
         DS    18F                     STANDARD SAVE AREA
         SPACE
*        DCB   DDNAME=&DDNAME,DSORG=PS,RECFM=VBM,LRECL=137,           X
*              BLKSIZE=&BLKSIZE,MACRF=PL,BFTEK=S,BUFNO=2
IHB&SYSNDX DCB DDNAME=&DDNAME,DSORG=PS,RECFM=VBM,LRECL=137,            X
               BLKSIZE=&BLKSIZE,MACRF=PL,BFTEK=S,BUFNO=2
         SPACE
* PARAMETER LISTS FOR OPEN AND CLOSE:
         SPACE
         OPEN  (IHB&SYSNDX,(OUTPUT,LEAVE)),MF=L  PARM LIST FOR OPEN
         SPACE
         CLOSE (IHB&SYSNDX,LEAVE),MF=L PARM LIST FOR CLOSE
         SPACE
* WORK CELLS AND VARIABLE STORAGE:
         SPACE
         DS    1D                      WORK CELL
         DS    3F                      WORK CELLS
         DS    1A                      PAGE HEADING PARM LIST ADDRESS
         DS    1F                      MAXIMUM NUMBER OF OUTPUT LINES
         DS    1H                      PAGE WIDTH
         DS    1H                      PAGE LENGTH
         DS    1H                      PAGE NUMBER
         DS    1H                      PAGE BALANCE
         DS    1X                      SWITCHES
         DS    CL24                    DATE & TIME FOR PAGE HEADING
&OLDSECT CSECT ,                   RESUME OLD CSECT                 JRB
         MEND
         MACRO
&SYMBOL  XPREJECT  &WA,&COND=
.* MACRO TO EXECUTE AN EJECT CALL TO 'XPRNTSUB'.
         LCLC  &TAG,&SYM,&OPT,&R
         LCLA  &K
&SYM     SETC  '&SYMBOL'
&TAG     SETC  'IHB&SYSNDX'
         CNOP  2,4
.TST1    AIF   ('&COND' NE '').TST2
&OPT     SETC  'F000'
         AGO   .SIMPLE
.TST2    AIF   ('&COND' NE 'ATHOF').TSTC
&OPT     SETC  'F100'
.SIMPLE  ANOP
&SYM     BAL   1,&TAG.L                LOAD PARM ADDRESS
         DC    XL2'&OPT'               OPTION BITS
         AGO   .VCON
.TSTC    AIF   ('&COND(1)' NE 'EQ').NE
&OPT     SETC  '80'
.NE      AIF   ('&COND(1)' NE 'NE').LT
&OPT     SETC  '70'
.LT      AIF   ('&COND(1)' NE 'LT').GT
&OPT     SETC  '40'
.GT      AIF   ('&COND(1)' NE 'GT').LE
&OPT     SETC  '20'
.LE      AIF   ('&COND(1)' NE 'LE').GE
&OPT     SETC  'C0'
.GE      AIF   ('&COND(1)' NE 'GE').NOT
&OPT     SETC  'A0'
.NOT     AIF   ('&OPT' NE '').COK
         MNOTE 4,'COND OPERAND &COND(1) ILLEGAL'
.COK     AIF   ('&COND(2)' NE '').C2OK
         MNOTE 4,'COND TEST QUANTITY MISSING'
         AGO   .NOTREG
.C2OK    AIF   ('&COND(2)'(1,1) NE '(').NOTREG
&K       SETA  K'&COND(2)-2
&R       SETC  '&COND(2)'(2,&K)
&SYM     STC   &R,&TAG.A               STORE INTO PARM LIST
&SYM     SETC  ''
.NOTREG  ANOP
&SYM     BAL   1,&TAG.L                LOAD PARM ADDRESS
         DC    XL1'&OPT'               CONDITION MASK
         AIF   ('&COND(2)' EQ '').NOTREG2
         AIF   ('&COND(2)'(1,1) NE '(').NOTREG2
&TAG.A   DC    AL1(0)                  TEST QUANTITY
         AGO   .VCON
.NOTREG2 DC    AL1(&COND(2))           TEST QUANTITY
.VCON    ANOP
&TAG.L   XPRINNRA  &WA,92
         MEND
         MACRO
&SYMBOL  XPRHEAD  &WA,&LIST=
.* MACRO TO PRESENT A LIST OF PRINT LINE DESCRIPTORS FOR PAGE HEADINGS
.* TO 'XPRNTSUB'.
&SYMBOL  XPRLIST  &WA,LIST=&LIST,IHBPARM=80
         MEND
         MACRO
&SYMBOL  XPRLDEF  &TEXT=,&LENGTH=132,&OFFSET=0,&SPA=1,&SPB=0
.* MACRO TO DEFINE PRINT LINE DESCRIPTOR BLOCKS ("PLD" BLOCKS) FOR
.* THE PRINTING SUBROUTINE "XPRNTSUB".
         LCLA  &N
         LCLC  &B3,&B6,&B7
         ACTR  25                      JUST IN CASE
&B3      SETC  '0'
&B6      SETC  '0'
&B7      SETC  '0'
.* PROCESS OPTIONS IN SPA OPERAND:
.TSTA1   AIF   ('&SPA(2)' EQ '').TSTB1
         AIF   ('&SPA(2)' NE 'NOEJ').TSTA2
&B3      SETC  '1'
         AGO   .TSTB1
.TSTA2   MNOTE 4,'OPERAND &SPA(2) AFTER KEYWORD SPA IS ILLEGAL'
.* PROCESS OPTIONS IN SPB OPERAND:
.TSTB1   ANOP
&N       SETA  2
.TSTB5   AIF   ('&SPB(&N)' NE 'NOEJ').TSTB2
&B7      SETC  '1'
         AGO   .TSTB4
.TSTB2   AIF   ('&SPB(&N)' NE 'ATHOF').TSTB3
&B6      SETC  '1'
         AGO   .TSTB4
.TSTB3   AIF   ('&SPB(&N)' EQ '').TSTB4
         MNOTE 4,'OPERAND &SPB(&N) AFTER KEYWORD SPB IS ILLEGAL'
.TSTB4   ANOP
&N       SETA  &N+1
         AIF   (&N LE 3).TSTB5
.IFTEXT  AIF   ('&TEXT' NE '').TOK
         MNOTE 4,'TEXT ADDRESS MISSING'
.TOK     ANOP
&SYMBOL  DS    0F                      ALIGN ON FULL-WORD BOUNDARY
         DC    BL1'000&B3.00&B6&B7'    OPTION BITS
         DC    AL3(&TEXT)              TEXT ADDRESS
         DC    AL1(&LENGTH)            TEXT LENGTH
         DC    AL1(&OFFSET)            MARGIN OFFSET
.TESTB   AIF   ('&SPB(1)' EQ 'EJECT').BSKIP
         AIF   ('&SPB(1)' EQ 'SKIP').BSKIP
         DC    AL1(&SPB(1))            PRE-SPACING
         AGO   .TESTA
.BSKIP   ANOP
         DC    AL1(255)                EJECT BEFORE PRINTING
.TESTA   AIF   ('&SPA(1)' EQ 'EJECT').ASKIP
         AIF   ('&SPA(1)' EQ 'SKIP').ASKIP
         DC    AL1(&SPA(1))                 POST-SPACING
         MEXIT
.ASKIP   ANOP
         DC    AL1(255)                EJECT AFTER PRINTING
         MEND
         MACRO
&SYMBOL  XPRLIST  &WA,&LIST=,&IHBPARM=32
.* MACRO TO DELIVER A LIST OF PRINT LINE DESCRIPTORS TO 'XPRNTSUB'.
         LCLA  &N,&K,&D
         LCLC  &TAG,&SYM,&R
         ACTR  100
&SYM     SETC  '&SYMBOL'
&TAG     SETC  'IHB&SYSNDX'
         AIF   ('&LIST' NE '').LOK
         MNOTE 8,'LIST OPERAND MUST BE SUPPLIED'
         MEXIT
.LOK     CNOP  0,4
         AIF   ('&LIST' NE '(1)').STLOOP
&SYMBOL  B     &TAG.L                  BRANCH AROUND ADDRESS
         AGO   .VCON
.STLOOP  ANOP
&N       SETA  &N+1
         AIF   (&N GT N'&LIST).STDONE
         AIF   ('&LIST(&N)'(1,1) NE '(').STLOOP
&K       SETA  K'&LIST(&N)-2
&R       SETC  '&LIST(&N)'(2,&K)
&D       SETA  4*(&N-1)
&SYM     ST    &R,&TAG.A+&D            STORE INTO PARM LIST
&SYM     SETC  ''
         AIF   (&N NE N'&LIST).STLOOP
         OI    &TAG.A+&D,X'80'         SET END-OF-LIST BIT
.STDONE  ANOP
&SYM     BAL   1,&TAG.L                LOAD PARM LIST ADDRESS
&SYM     SETC  '&TAG.A'
&N       SETA  0
.LOOP    ANOP
&N       SETA  &N+1
         AIF   (&N GT N'&LIST).VCON
         AIF   ('&LIST(&N)'(1,1) NE '(').NOTREG
&SYM     DC    A(0)
&SYM     SETC  ''
         AGO   .LOOP
.NOTREG  AIF   (&N EQ N'&LIST).LAST
&SYM     DC    A(&LIST(&N))
&SYM     SETC  ''
         AGO   .LOOP
.LAST    ANOP
&SYM     DC    X'80'                   END-OF-LIST BIT
         DC    AL3(&LIST(&N))
.VCON    ANOP
&TAG.L   XPRINNRA  &WA,&IHBPARM
         MEND
         MACRO
&SYMBOL  XPRMOD  &WA,&MAXLINE=0,&PAGENO=0,&PAGEWID=0,&PAGELEN=0,       X
               &TIME=0,&DATE=0
.* MACRO TO EXECUTE A MODIFY CALL TO 'XPRINTSUB'.
&SYMBOL  XPROPEN  &WA,MAXLINE=&MAXLINE,PAGENO=&PAGENO,PAGEWID=&PAGEWID,X
               PAGELEN=&PAGELEN,TIME=&TIME,DATE=&DATE,IHBPARM=104
         MEND
         MACRO
&SYMBOL  XPRNTLIN  &WA,&TEXT=00,&LENGTH=132,&OFFSET=0,&SPB=0,&SPA=1
         LCLA  &N
         LCLC  &B3,&B6,&B7,&T,&R
         ACTR  25
&T       SETC  'IHB&SYSNDX'
&B3      SETC  '0'
&B6      SETC  '0'
&B7      SETC  '0'
.* PROCESS OPTIONS IN SPA OPERAND:
.TSTA1   AIF   ('&SPA(2)' EQ '').TSTB1
         AIF   ('&SPA(2)' NE 'NOEJ').TSTA2
&B3      SETC  '1'
         AGO   .TSTB1
.TSTA2   MNOTE 4,'OPERAND &SPA(2) AFTER KEYWORD SPA IS ILLEGAL'
.* PROCESS OPTIONS IN SPB OPERAND:
.TSTB1   ANOP
&N       SETA  2
.TSTB5   AIF   ('&SPB(&N)' NE 'NOEJ').TSTB2
&B7      SETC  '1'
         AGO   .TSTB4
.TSTB2   AIF   ('&SPB(&N)' NE 'ATHOF').TSTB3
&B6      SETC  '1'
         AGO   .TSTB4
.TSTB3   AIF   ('&SPB(&N)' EQ '').TSTB4
         MNOTE 4,'OPERAND &SPB(&N) AFTER KEYWORD SPB IS ILLEGAL'
.TSTB4   ANOP
&N       SETA  &N+1
         AIF   (&N LE 3).TSTB5
.* GENERATE STORE INSTRUCTIONS IF REGISTER NOTATION IS USED:
         CNOP  0,4
         AIF   ('&SYMBOL' EQ '').IFR1
&SYMBOL  DS    0H
.IFR1    AIF   ('&TEXT' NE '00').TXTOK
         MNOTE 4,'TEXT ADDRESS MUST BE SUPPLIED'
.TXTOK   AIF   ('&TEXT'(1,1) NE '(').IFR2
         ST    &TEXT(1),&T.A           STORE TEXT ADDRESS
         MVI   &T.A,B'000&B3.00&B6&B7' INSERT OPTION BITS
.IFR2    AIF   ('&LENGTH'(1,1) NE '(').IFR3
         STC   &LENGTH(1),&T.A+4       STORE TEXT LENGTH
.IFR3    AIF   ('&OFFSET'(1,1) NE '(').IFR4
         STC   &OFFSET(1),&T.A+5       STORE MARGIN OFFSET
.IFR4    AIF   ('&SPB(1)'(1,1) NE '(').IFR5
&N       SETA  K'&SPB(1)-2
&R       SETC  '&SPB(1)'(2,&N)
         STC   &R,&T.A+6               STORE PRE-SPACING
.IFR5    AIF   ('&SPA(1)'(1,1) NE '(').LOAD1
&N       SETA  K'&SPA(1)-2
&R       SETC  '&SPA(1)'(2,&N)
         STC   &R,&T.A+7               STORE POST-SPACING
.* LOAD REG 1 AND GENERATE PLD LIST ADDRESS:
.LOAD1   BAL   1,&T.L                  LOAD PARM ADDRESS
         DC    X'80'                   MARK END OF ADDRESS LIST
         DC    AL3(&T.A)               ADDRESS OF PLD
.* GENREATE PLD PARAMETERS TO DESCRIBE THE PRINT LINE:
.IFR11   AIF   ('&TEXT'(1,1) NE '(').NOTR11
&T.A     DC    A(0)                    TEXT ADDRESS & OPTION BITS
         AGO   .IFRC
.NOTR11  ANOP
&T.A     DC    B'000&B3.00&B6&B7'      OPTION BITS
         DC    AL3(&TEXT)              TEXT ADDRESS
.IFRC    AIF   ('&LENGTH'(1,1) NE '(').NOTRC
         DC    AL1(0)                  TEXT LENGTH
         AGO   .IFR13
.NOTRC   DC    AL1(&LENGTH)            TEXT LENGTH
.IFR13   AIF   ('&OFFSET'(1,1) NE '(').NOTR13
         DC    AL1(0)                  MARGIN OFFSET
         AGO   .IFR14
.NOTR13  DC    AL1(&OFFSET)            MARGIN OFFSET
.IFR14   AIF   ('&SPB(1)'(1,1) NE '(').NOTR14
         DC    AL1(0)                  PRE-SPACING
         AGO   .IFRF
.NOTR14  AIF   ('&SPB(1)' EQ 'EJECT').BSKIP
         AIF   ('&SPB(1)' EQ 'SKIP').BSKIP
         DC    AL1(&SPB(1))            PRE-SPACING
         AGO   .IFRF
.BSKIP   DC    AL1(255)                SKIP BEFOR PRINTING
.IFRF    AIF   ('&SPA(1)'(1,1) NE '(').NOTRF
         DC    AL1(0)                  POST-SPACING
         AGO   .VCON
.NOTRF   AIF   ('&SPA(1)' EQ 'EJECT').ASKIP
         AIF   ('&SPA(1)' EQ 'SKIP').ASKIP
         DC    AL1(&SPA(1))            POST-SPACING
         AGO   .VCON
.ASKIP   DC    AL1(255)                SKIP AFTER PRINTING
.VCON    ANOP
&T.L    XPRINNRA  &WA,32
         MEND
         MACRO
&SYMBOL  XPROPEN  &WA,&MAXLINE=0,&PAGENO=0,&PAGEWID=0,&PAGELEN=0,      X
               &TIME=0,&DATE=0,&DDNAME=SYSPRINT,&IHBPARM=56
.* MACRO TO EXECUTE AN 'OPEN' OR 'MODIFY' CALL TO 'XPRNTSUB'.
         LCLC  &TAG
&TAG     SETC  'IHB&SYSNDX'
         AIF   ('&SYMBOL' EQ '').T1
&SYMBOL  DS    0H
.T1      AIF   ('&MAXLINE'(1,1) NE '(').T2
         ST    &MAXLINE(1),&TAG.A      STORE IN PARM LIST
.T2      AIF   ('&PAGENO'(1,1) NE '(').T3
         STH   &PAGENO(1),&TAG.A+4     STORE IN PARM LIST
.T3      AIF   ('&PAGEWID'(1,1) NE '(').T4
         STC   &PAGEWID(1),&TAG.A+6    STORE IN PARM LIST
.T4      AIF   ('&PAGELEN'(1,1) NE '(').T5
         STC   &PAGELEN(1),&TAG.A+7    STORE IN PARM LIST
.T5      AIF   ('&TIME'(1,1) NE '(').T6
         ST    &TIME(1),&TAG.A+8       STORE IN PARM LIST
.T6      AIF   ('&DATE'(1,1) NE '(').T7
         ST    &DATE(1),&TAG.A+12      STORE IN PARM LIST
.T7      AIF   ('&DDNAME'(1,1) NE '(').CNOP
         MVC   &TAG.A+16(8),0(&DDNAME(1))  STORE IN PARM LIST
.CNOP    CNOP  0,4
         BAL   1,&TAG.L        LOAD PARM LIST ADDRESS
.P1      AIF   ('&MAXLINE'(1,1) EQ '(').PR1
&TAG.A   DC    A(&MAXLINE)             PRINT OUTPUT LIMIT
         AGO   .P2
.PR1     ANOP
&TAG.A   DC    A(0)                    PRINT OUTPUT LIMIT
.P2      AIF   ('&PAGENO'(1,1) EQ '(').PR2
         DC    AL2(&PAGENO)            PAGE NUMBER
         AGO   .P3
.PR2     DC    AL2(0)                  PAGE NUMBER
.P3      AIF   ('&PAGEWID'(1,1) EQ '(').PR3
         DC    AL1(&PAGEWID)           PAGE WIDTH
         AGO   .P4
.PR3     DC    AL1(0)                  PAGE WIDTH
.P4      AIF   ('&PAGELEN'(1,1) EQ '(').PR4
         DC    AL1(&PAGELEN)           PAGE LENGTH
         AGO   .P5
.PR4     DC    AL1(0)                  PAGE LENGTH
.P5      AIF   ('&TIME'(1,1) EQ '(').PR5
         DC    A(&TIME)                ADDRESS OF TIME
         AGO   .P6
.PR5     DC    A(0)                    ADDRESS OF TIME
.P6      AIF   ('&DATE'(1,1) EQ '(').PR6
         DC    A(&DATE)                ADDRESS OF DATE
         AGO   .P7
.PR6     DC    A(0)                    ADDRESS OF DATE
.P7      AIF   ('&IHBPARM' NE '56').VCON
         AIF   ('&DDNAME'(1,1) EQ '(').PR7
         DC    CL8'&DDNAME'            DDNAME FOR DATA SET
         AGO   .VCON
.PR7     DC    CL8' '                  DDNAME FOR DATA SET
.VCON    ANOP
&TAG.L   XPRINNRA  &WA,&IHBPARM
         MEND
         MACRO
&SYMBOL  XPRSPACE  &WA,&LINES=1,&COND=
.* MACRO TO EXECUTE A SPACE CALL TO 'XPRNTSUB'.
         LCLA  &N,&B6,&B7
         LCLC  &TAG,&SYM
&SYM     SETC  '&SYMBOL'
&TAG     SETC  'IHB&SYSNDX'
.LOOP    ANOP
&N       SETA  &N+1
         AIF   (&N GT N'&COND).LDONE
.TST1    AIF   ('&COND(&N)' NE 'NOEJ').TST2
&B6      SETA  1
         AGO   .LOOP
.TST2    AIF   ('&COND(&N)' NE 'ATHOF').TST3
&B7      SETA  1
         AGO   .LOOP
.TST3    MNOTE 4,'OPERAND &COND(&N) AFTER KEYWORD COND IS ILLEGAL'
         AGO   .LOOP
.LDONE   CNOP  2,4
         AIF   ('&LINES'(1,1) NE '(').NOTREG1
&SYM     STC   &LINES(1),&TAG.A+1      STORE INTO PARM LIST
&SYM     SETC  ''
.NOTREG1 ANOP
&SYM     BAL   1,&TAG.L                LOAD PARM LIST ADDRESS
&TAG.A   DC    B'000000&B6&B7'         OPTION BITS
         AIF   ('&LINES'(1,1) NE '(').NOTREG2
         DC    X'00'                   SPACING AMOUNT
         AGO   .VCON
.NOTREG2 DC    AL1(&LINES)             SPACING AMOUNT
.VCON    ANOP
&TAG.L   XPRINNRA  &WA,44
         MEND
*                                                                   JRB
         EJECT
* FUNCTION/OPERATION:  READS AND EDITS THE VOLUME TABLE OF CONTENTS
*        (VTOC) FROM ONE OR MORE DIRECT ACCESS VOLUMES AND PRINTS
*        INFORMATION ABOUT THE DATA SETS ON IT AND A TRACK USAGE MAP.
*        OPTIONALLY, IT LISTS THE DIRECTORY OF EACH PARTITIONED DATA
*        SET ON THE VOLUME.
*                                                                   JRB
* ENTRY POINTS:  ENTER AT 'GENESIS' WITH A BALR 14,15 AND REGISTER 13
*        SET TO A STANDARD SAVE AREA.  REGISTER 1 POINTS TO A FULL WORD
*        WHICH POINTS TO A PARAMETER FIELD.
*                                                                   JRB
* INPUT:  THE PARAMETER FIELD REFERENCED BY R1 BEGINS WITH A HALF-WORD
*        CONTAINING THE BINARY LENGTH OF THE BYTE STRING WHICH FOLLOWS
*        IT.  THE STRING CONSISTS OF A SERIES OF PARAMETER WORDS
*        SEPARATED BY COMMAS.  LEGAL WORDS ARE:
*              DUMP    CAUSES THE DSCB'S TO BE LISTED IN HEX FOLLOWING
*                      THEIR FORMATTED LISTINGS.
*              PDS     CAUSES THE DIRECTORY ENTRIES OF EACH PDS ON THE
*                      VOLUME TO BE LISTED (INCLUDING USER DATA IN HEX)
*              MAP     CAUSES THE TRACK USAGE MAP TO BE PRINTED.
*              VOLS    FOR COMPATIBILITY WITH OLDER VERSIONS        JRB
*              NODS    STOPS PRINTING OF DSCB DUMP AND FORMATTED LINEJB
*              NOHDNG  BYPASS PRINTING OF DEVICE DESCRIPTION HEADINGJRB
*              DS      PRINTS ONLY THE DATA SET NAMED IN THE JFCB   JRB
*              DSORG   INDICATES WHAT TYPE OF DATA SET TO PRINT, EG JRB
*                      DSORG=(IS,DA,PS,PO) ONLY ONE IS ALLOWED      JRB
*              NOM     ONLY PRINTS DIRECTORY STATISTICS OF PDS'S    JRB
*              MEO     ONLY PRINTS TRACK MAP ERRORS                 JRB
*                                                                   JRB
* OUTPUT:  A PRINTED LISTING DESCRIBING THE DATA SETS AND TRACK USAGE
*        FOR EACH VOLUME.
*                                                                   JRB
* DATA SETS:  PRINTED OUTPUT IS DELIVERED TO A DATA SET DESCRIBED ON A
*        DD CARD WITH DDNAME 'SYSPRINT'.  EACH VOLUME TO BE LISTED MUST
*        HAVE A DD CARD WITH THE DDNAME "VOL.....", WHERE ONLY THE
*        FIRST THREE CHARACTERS ARE TESTED.  THE DD CARDS ARE
*        REQUIRED TO SPECIFY ONLY THE VOLUME SERIAL, UNIT, AND
*        A DISPOSITION OF 'OLD'.
*                                                                   JRB
* EXTERNAL ROUTINES:  CALLS 'XDATEDIT' TO FORMAT DATES.
*        CALLS 'XVTCREAD' TO READ VTOC FROM DIRECT-ACCESS DEVICES.
*        CALLS 'XPRNTSUB' TO DO PRINTING AND PAGINATION.
*                                                                   JRB
* EXITS-NORMAL:  RETURNS VIA REG 14 WITH RETURN CODE 0.
*                                                                   JRB
* EXITS-ERROR:  RETURNS VIA REG 14 WITH RETURN CODES AS FOLLOWS:
*        4 - MISSING DD CARD;
*        8 - BAD FORMAT IN A DSCB;
*        12 - PERMANENT I/O ERROR IN A VTOC OR PDS DIRECTORY;
*        20 - UNABLE TO OPEN 'SYSPRINT' DATA SET.
*                                                                   JRB
* TABLES/WORK AREAS:  USES SYSTEM MACROS 'IEFJFCBN' AND 'IECSDSL1' TO
*        DEFINE A JOB FILE CONTROL BLOCK AND VARIOUS DATA SET CONTROL
*        BLOCK FORMATS.  USES MACRO 'IEFTIOT1' TO DEFINE TASK IO TABLE.
*                                                                   JRB
* ATTRIBUTES:  SERIALLY REUSABLE.
*                                                                   JRB
* MACHINE REQUIREMENTS:  USES A PRINTER WITH 132-CHARACTER PRINT LINE
*        AND A 60-CHARACTER PRINT TRAIN (PN OR QN ARRANGEMENT).  USES
*        ONLY THE STANDARD INSTRUCTION SET, EXCEPT FOR A FEW 'EDIT'
*        INSTRUCTIONS.  CORE REQUIREMENT VARIES WITH THE SIZE OF THE
*        VTOC BEING LISTED.  A 160-BLOCK VTOC REQUIRES ABOUT 30K.
*                                                                   JRB
* NOTES:  THE INPUT PARAMETER LIST STRUCTURE IS THAT USED TO PASS
*        INFORMATION FROM THE 'PARM' FIELD OF AN 'EXEC' CARD.
*                                                                   JRB
*        HAS BEEN TESTED WITH 2301, 2311, 2314, AND 2321.  NO TROUBLE
*        ANTICIPATED WITH 2303.  DON'T KNOW ABOUT 2302.
*                                                                   JRB
*        CURRENTLY IGNORES FORMAT 2 DSCB'S FOR ISAM AND
*        FORMAT 6 DSCB'S FOR SPLIT-CYLINDER ALLOCATION.
*                                                                   JRB
*        *****  USC MODIFICATIONS BY H. MARIN  --  AUG. 27,1972  ****HM
*                                                                    HM
*        VTOCLIST WILL NOW HANDLE 3330 AND 2305-2 VOLUMES.           HM
*        THESE MODIFICATIONS HAVE BEEN TESTED AND OPERATE CORRECTLY. HM
*       3330 MOD 11 SUPPORT UNDER BOTH MVT AND MVS ALSO ADDED. 4/75 HM
*       THE  MOD 11 SUPPORT UNDER MVT IS BASED ON SIZE OF VOLUME...
*        SUPPORT FOR 3350 AND 3340 ADDED BY JOHN BRUCE (BECKMAN)    JRB
*              SEPTEMBER 1977                                       JRB
*                                                                   JRB
*                                                                    HM
*        ALL MACROS REQUIRED ARE PROVIDED EXCEPT FOR THE THREE IBM   HM
*        MACROS:                                                     HM
*               IEFJFCBN                                             HM
*               IECSDSL1                                             HM
*                                                                    HM
*        THESE MACROS ARE RELEASE DEPENDENT AND ARE PROVIDED IN FILE HM
*        SYS1.PVTMACS OF THE DLIB VOLUMES FOR GENERATING A SYSTEM.   HM
*        THEREFORE, TO ASSEMBLE THIS PROGRAM, IN PARTICULAR CSECT    HM
*        VTOCLIST, ONE MUST CONCATENATE BOTH MACLIB AND PVTMACS UNDERHM
*        THE SYSLIB DDNAME OF THE ASSEMBLY STEP.                     HM
* ----   MVS NOTE:  THESE MACROS ARE FOUND IN SYS1.AMODGEN FOR MVS.  HM
*                                                                    HM
* -------- 3330-11 SUPPORT ADDED OCTOBER,1974 BY HECTOR MARIN (UCB)  HM
* -------- 3350    SUPPORT ADDED SEPTEMBER,1977 BY JOHN BRUCE (BECKMAN)
*        VSAM VTOC DSCB4 DATA FORMAT ROUTINE AND 3RD BASE REGISTER  JRB
*        ADDED BY JOHN BRUCE (BECKMAN) SEPTERMBER 1978              JRB
* -------- 3380  SUPPORT ADDED NOVEMBER,1982 BY ILSOO KIM (SANTA FE) IK
*          -------                                                   IK
*********************************************************************IK
         EJECT
VTOCLIST CSECT
         SPACE 2
* PARAMETERS AND ASSIGNS:
         SPACE
GETSIZE  EQU   4096            BLOCK SIZE FOR GETMAIN REQUESTS      JRB
PGLENGTH EQU   58              LINES PER PAGE        *BECKMAN*      JRB
TOPMARGN EQU   3               LINES TO SKIP BEFORE PAGE HEADING
ALIASMSK EQU   X'80'           PDS DIRECTORY ENTRY IS AN ALIAS
         SPACE
DADEVICE EQU   X'20'           CLASS FOR DIRECT ACCESS DEVICES
DEV2311  EQU   X'01'           UNIT TYPE FOR 2311 DISK PACK
DEV2301  EQU   X'02'           UNIT TYPE FOR 2301 DRUM
DEV2303  EQU   X'03'           UNIT TYPE FOR 2303 DRUM
DEV2302  EQU   X'04'           UNIT TYPE FOR 2302 DISK FILE
DEV2321  EQU   X'05'           UNIT TYPE FOR 2321 DATA CELL
DEV23051 EQU   X'06'           UNIT TYPE FOR 2305-1 DRUM
DEV23052 EQU   X'07'           UNIT TYPE FOR 2305-2 DRUM
DEV2314  EQU   X'08'           UNIT TYPE FOR 2314 DISK PACK
DEV3330  EQU   X'09'           UNIT TYPE FOR 3330 DISK PACK
DEV3340  EQU   X'0A'           UNIT TYPE FOR 3340-35MB DISK PACK    JRB
DEV3350  EQU   X'0B'           UNIT TYPE FOR 3350 DISK PACK         JRB
DEV33301 EQU   X'0D'           UNIT TYPE FOR 3330 MOD 11-DISK PACK  HM
DEV3380  EQU   X'0E'           UNIT TYPE FOR 3380 DISK PACK         IK
         SPACE
*        BIT MEANINGS FOR MODESW  --  OPTIONS SWITCH
DUMPMASK EQU   X'01'           OPTION TO DUMP DSCB'S IN HEX
PDSLMASK EQU   X'02'           OPTION TO LIST PDS DIRECTORIES
NODSMASK EQU   X'04'      OPTION TO PREVENT DATA SET LIST
MAPMASK  EQU   X'08'           OPTION TO LIST TRACK USAGE
NOHDMASK EQU   X'10'      OPTION TO PREVENT HEADING
DS1MASK  EQU   X'20'   OPTION TO LIST ONE DATA SET ONLY
MEOMASK  EQU   X'40'    OPTION TO LIST ONLY MAP ERRORS IF MAPPING
NOMMASK  EQU   X'80'          PDS DIRECTORY STATS ONLY
         SPACE
*        BIT MEANINGS FOR MODESW1 --  OPTIONS SWITCH NUMBER 2
DSORGMSK EQU   X'80'   SWITCH FOR DSORG
VSORGMSK EQU   X'40'   SWITCH FOR VSAM DSORG                        JRB
         SPACE
ISDSORG  EQU   X'80'           INDEXED SEQUENTIAL ORGANIZATION
PSDSORG  EQU   X'40'           PHYSICAL SEQUENTIAL ORGANIZATION
DADSORG  EQU   X'20'           DIRECT-ACCESS ORGANIZATION
PODSORG  EQU   X'02'           PARTITIONED ORGANIZATION
UDSORG   EQU   X'01'           DATA SET IS UNMOVABLE                JRB
VSDSORG  EQU   X'08'           VIRTUAL STORAGE ACCESS METHOD        JRB
         SPACE
PRSP0    EQU   X'00'           PSEUDO CONTROL CHARACTERS FOR PRINTER
PRSP1    EQU   X'01'
PRSP2    EQU   X'02'
PRSP3    EQU   X'03'
         SPACE
OPENBIT  EQU   X'10'           DCB IS OPEN (IN 'DCBOFLGS')
         TITLE 'ENTRANCE AND PROLOGUE'
* ENTER HERE TO PERFORM STANDARD SAVE OPERATIONS AND ESTABLISH (3) BASE
* REGISTERS WITH A CONTINUOUS RANGE OF 12K BYTES.                   JRB
         SPACE
         SETREG RC,RB,R6,PARM=(R2) PLAY THE BASE AND SAVE AREA GAME JRB
         SR    R1,R1                   GENERATE ZERO PROGRAM MASK
         SPM   R1                      MASK OVERFLOW INTERRUPTS
         SPACE 3
* CALL PRINTING SUBROUTINE TO OPEN THE SYSPRINT DATA SET.  SET INITIAL
* PAGE DIMENSIONS AND HEADING, AND SKIP TO HEAD OF FORM.
         XPROPEN  PWA,PAGELEN=PGLENGTH,DDNAME=SYSPRINT
         LTR   RF,RF                   TEST FOR SUCCESSFUL OPEN
         BNZ   PROPBAD                 ERROR IF UNABLE TO PRINT
         XPRHEAD  PWA,LIST=INITHEAD
         XPRNTLIN  PWA,TEXT=REVMSG,LENGTH=L'REVMSG,SPB=SKIP,           X
               SPA=3,OFFSET=9
* LOCATE THE TIOT                                                   JRB
         SPACE
         EXTRACT  TIOTLOC,FIELDS=TIOT  OBTAIN TIOT ADDRESS FROM TCB
         SPACE
         L     R1,TIOTLOC
         LA    R1,24(R1)           POINT TO FIRST DD ENTRY          JRB
         ST    R1,TIOTLOC              SAVE TIOT ENTRY ADDRESS
         TITLE 'INPUT PARAMETER PROCESSING'
* RETRIEVE AND PRINT THE PARAMETER FIELD.  SCAN IT FOR WORDS AND SET
* LISTING MODE SWITCHES ACCORDINGLY.
         SPACE 2
         L     R2,0(R2)                ADDRESS OF PARM FIELD
         LH    R3,0(R2)                LENGTH OF PARM FIELD
         LA    R2,2(R2)                SET R2 TO FIRST BYTE
         SPACE
* PRINT FIELD, OR COMPLAIN IF IT IS TOO LONG.
         SPACE
         MVC   PL+10(21),=C'EXEC PARAMETER FIELD:'
         CH    R3,=H'99'               TEST FIELD LENGTH
         BL    PLNGOK
         MVC   PL+30(29),=C'  IS TOO LONG AND WAS IGNORED'
         SR    R3,R3                   SET LENGTH TO 0
         B     PARMPR
         SPACE
PLNGOK   LTR   R1,R3                   FIX UP LENGTH FOR MOVE
         BZ    PARMPR                  SKIP MOVE IF LENGTH ZERO
         BCTR  R1,0                    SUBTRACT 1 FOR MVC
         STC   R1,PARMOVE+1
PARMOVE  MVC   PL+33(0),0(R2)          MOVE PARM FIELD TO PRINT LINE
PARMPR   MVI   PL,PRSP3                PRINT AND SPACE 3
         BAL   RE,PRINTSUB
         SPACE
* LOOP TO GET PARAMETER WORDS AND SET SWITCHES.
         SPACE
PARMLOOP BAL   RE,SCAN                 GET A WORD
         CLI   SCANWORD,C' '           BLANK WORD MEANS END OF STRING
         BE    PARMDONE
         SPACE
PDUMP    CLC   SCANWORD(5),=C'DUMP '
         BNE   PPDS
         OI    MODESW,DUMPMASK
         B     PARMLOOP
         SPACE
PPDS     CLC   SCANWORD(4),=C'PDS '
         BNE   PMAP
         OI    MODESW,PDSLMASK
         NI    MODESW,255-NOMMASK  OVERRIDE NOM IF PDS SPECIFIED LATER
         B     PARMLOOP
         SPACE
PMAP     CLC   SCANWORD(4),=C'MAP '
         BNE   PDIR
         OI    MODESW,MAPMASK
         B     PARMLOOP
         SPACE
PDIR     CLC   SCANWORD(4),=C'NOM '
         BNE   PNODS
         OI    MODESW,PDSLMASK+NOMMASK
         B     PARMLOOP
         SPACE
PNODS    CLC   SCANWORD(5),=C'NODS '
         BNE   PNOHDNG
         OI    MODESW,NODSMASK
         B     PARMLOOP
         SPACE
PNOHDNG  CLC   SCANWORD(7),=C'NOHDNG '
         BNE   P1DSONLY
         OI    MODESW,NOHDMASK
         B     PARMLOOP
         SPACE 2
P1DSONLY CLC   SCANWORD(3),=C'DS '
         BNE   PMEONLY
         OI    MODESW,DS1MASK+NOHDMASK+PDSLMASK+NOMMASK
         B     PARMLOOP
         SPACE 2
PMEONLY  CLC   SCANWORD(4),=C'MEO ' IS REQUEST TO LIST ONLY MAP ERRORS?
         BNE   PVOLS               NO GO CHECK FOR VOLS             JRB
         OI    MODESW,MEOMASK+MAPMASK
         B     PARMLOOP
         SPACE 2
PVOLS    CLC   SCANWORD(4),=C'VOLS'    FOR COMPATIBILITY WITH OLDER
         BE    PARMLOOP                   VERSIONS
         SPACE
PDSORGF  CLC   SCANWORD(5),=C'DSORG='  CHECK FOR KEYWORD
         BNE   BADPARM
         OI    MODESW1,DSORGMSK   INDICATE FILTER IN EFFECT
         L     R1,DSORGTBA   GET DSORG ENTRIES TABLE
         LA    RE,DSORGEND     GET NUMBER OF ENTRIES
LOOPDPRM CLC   SCANWORD+6(2),0(R1)
         BNE   *+14   NOT A MATCH YET
         OC    DSORGSW,2(R1)   INDICATE THIS IS WANTED
         TM    2(R1),VSDSORG       IS IT A VSAM DATA SET?           JRB
         BZ    PARMLOOP            NO THEN JUST CONTINUE            JRB
         OI    MODESW1,VSORGMSK   INDICATE VSAM FOR FILTER          JRB
         B     PARMLOOP   GO GET NEXT GUY
         LA    R1,3(,R1)   BUMP TO NEXT ENTRY
         BCT   RE,LOOPDPRM     GET NEXT
*   OTHERS MAY BE ADDED
         NI    MODESW1,255-DSORGMSK  NEVER MIND-- PARM ERROR
         SPACE 4
* PRINT ERROR MESSAGE FOR UNRECOGNIZED PARAMETERS.
         SPACE
BADPARM  MVC   PL+10(50),=C'"        " IS AN ILLEGAL PARAMETER AND WAS X
               IGNORED'
         MVC   PL+11(8),SCANWORD
         MVI   PL,PRSP3
         BAL   RE,PRINTSUB
         B     PARMLOOP
         SPACE
* ALL PARAMETERS HAVE BEEN PROCESSED.  LOAD TIOT POINTER TO PROCESS
* FIRST VOLUME.
         SPACE 3
         SPACE
PARMDONE DS    0H
         L     R2,TIOTLOC              LOAD TIOT ADDRESS
         B     VOLJOIN
         TITLE 'BEGIN A NEW VOLUME'
* SEARCH TIOT FOR "VOL....." DDNAME.
         SPACE
NEWVOL   DS    0H
         L     R2,TIOTLOC              LOAD TIOT ADDRESS
         SR    R1,R1
         IC    R1,0(R2)                GET LENGTH OF CURRENT ENTRY
         AR    R2,R1                   ADVANCE TO NEXT ENTRY
         ST    R2,TIOTLOC              SAVE UPDATED TIOT ADDRESS
VOLJOIN  CLI   0(R2),0                 TEST IF ZERO-LENGTH ENTRY
         BE    EXODUS                  END OF VOLUMES IF SO
         CLC   =C'VOL',4(R2)           TEST IF "VOL....." DDNAME
         BNE   NEWVOL                  SKIP ENTRY IF NOT
         MVC   DDNAME(8),4(R2)         SAVE DDNAME
         SPACE
* RESET PAGE NUMBER AND SKIP TO A FRESH PAGE.
         SPACE
         XPRMOD  PWA,PAGENO=1          RESET PAGE NUMBER TO 1
         SPACE
         XPREJECT  PWA                 SKIP TO A FRESH PAGE
         SPACE
         XPRHEAD  PWA,LIST=F1HD3       SET PAGE HEADING LINE
         SPACE
* RESET VARIOUS POINTERS AND COUNTERS FOR A NEW VOLUME.
         SPACE
         LA    R1,LASTFMT1             RESET FORMAT 1 CHAIN POINTER
         ST    R1,FMT1ADDR
         SPACE
         LA    R1,MBBASE               RESET TRACK MAP CHAIN POINTER
         ST    R1,MBBASE
         SPACE
         SR    R0,R0                   GENERATE USEFUL ZERO
         STH   R0,FREECYLS             ZERO FREE CYLINDER COUNT
         STH   R0,FREETRKS               AND FREE TRACK COUNT
         STH   R0,F5EXTNTS               AND FREE EXTENTS COUNT
         STH   R0,DSCOUNT                AND DATA SET COUNT
         STH   R0,TRKA             INITIALIZE TRACKS ALLOCATED      JRB
         STH   R0,TRKU             INITIALIZE TRACKS USED           JRB
         SPACE
* INSERT DDNAME IN DCB FOR PDS DIRECTORY READING.
         SPACE
         USING IHADCB,RA
         L     RA,PDSDCBA               FIX DCB FOR PDS LISTING
         MVC   DCBDDNAM(8),DDNAME
         DROP  RA
         SPACE
* GET DEVICE TYPE AND VERIFY THAT IT IS DIRECT ACCESS.
         SPACE
         DEVTYPE  DDNAME,DEVCHAR       GET DEVICE CHARACTERISTICS
         SPACE
         LTR   RF,RF                   TEST RF IF DDNAME FOUND
         BNZ   NODDCARD                ERROR,DDNAME NOT FOUND
         CLI   DEVCHAR+2,DADEVICE      TEST FOR DIRECT-ACCESS DEVICE
         BNE   NOTDACC                 ERROR, NOT DIRECT ACCESS DEVICE
         SPACE
* LOOK UP DEVICE NUMBER IN TABLE AND SET UP TRACK ADDRESS CONVERSION
* PARAMETERS.
         SPACE
         MVC   DEVNAMOB(1),UNITTYPE    PUT UNIT TYPE AT END OF TABLE
         LA    R2,DEVNAMES             ADDRESS TABLE BEGINNING
DEVNAMLP CLC   DEVNAMOB(1),0(R2)       TEST FOR MATCH ON DEVICE TYPE
         BE    DEVNAMF                 BRANCH WHEN FOUND
         LA    R2,DEVNAMSZ(R2)         STEP THROUGH TABLE
         B     DEVNAMLP
         SPACE
DEVNAMF  CLC   1(7,R2),UNKNOWN         TEST IF DEVICE KNOWN TO US
         BE    UNKNDEV                 BRANCH IF NOT
         ST    R2,DEVNAMAD             SAVE ADDRESS OF TABLE ENTRY
         MVC   FC1(12),16(R2)          MOVE IN CONVERSION FACTORS
         SPACE
* READ JFCB AND EXTRACT VOLUME SERIAL NUMBER.
         SPACE
         RDJFCB  (PDSDCB)              READ JOB FILE CONTROL BLOCK
         SPACE
         L     R1,JFCBADR              SET UP JFCB BASE REG
         USING JFDUMMY,R1
         MVC   VOLUME(6),JFCBVOLS      SAVE VOLUME SERIAL NUMBER
         L     RE,DSN1PTR
         MVC   0(44,RE),JFCBDSNM     SAVE DS NAME
         DROP  R1
         SPACE
         MVC   F1HSER1(6),VOLUME       PUT VOLUME SERIAL IN HEADING
         MVC   F1HSER2(6),VOLUME
         SPACE
* CALL VTOC READING ROUTINE TO OPEN VTOC.
         SPACE
         LA    R0,1                    CALL MODE 1 FOR OPEN
         LA    R1,DDNAME               ADDRESS OF DDNAME
         L     RF,VTOCREAD             ADDRESS OF SUBROUTINE
         BALR  RE,RF                   CALL XVTCREAD
         B     *+4(RF)                 BRANCH ON RETURN CODE
         B     VOPENED                 0, SUCCESS
         B     CANTOPEN                4, UNABLE TO OPEN
         B     NOTDACC                 8, NOT DIRECT ACCESS
VOPENED  DS    0H
         SPACE
* MAKE UP A TRACK MAP ENTRY FOR THE VOLUME LABEL ON TRACK 0.
         SPACE
         MVC   FB+4(20),TRK0MAP        INSERT DUMMY ENTRY
         LA    R2,FB
         BAL   RE,FILEMAP              GO INSERT IN MAP
         EJECT
* READ VTOC INTO CORE
         SPACE
* READ THE FIRST DSCB, WHICH SHOULD BE TYPE 4, DESCRIBING THE VOLUME
* AND VTOC CHARACTERISTICS.
         SPACE
         USING DS4,R9
READFMT4 LA    R4,DS4SIZE              SIZE OF CORE BLOCK
         BAL   RE,GETBLOCK             GET CORE AREA
         ST    R3,FMT4ADDR             SAVE ADDRESS
         LR    R9,R3                   SET BASE REG FOR FORMAT 4
         BAL   RE,READSEQ              READ FIRST BLOCK
         BAL   RE,DISASTER             END OF DATA RETURN
         CLI   DS4IDFMT,X'F4'          CHECK TYPE
         BNE   FRSTNOT4                ERROR, FIRST BLOCK NOT TYPE 4
         SPACE
         SPACE 4                                                     HM
*********************************************************************HM
* *** 3330-11 SUPPORT REQUIRES WE HAVE READ THE VTOC BEFORE KNOWING  HM
* ***         IF WE HAVE A MOD 1 OR A MOD 11.                       *HM
*********************************************************************HM
         SPACE 3                                                     HM
         L     R2,DEVNAMAD             VERIFY DEVICE TYPE FROM UCB   HM
         CLI   0(R2),DEV3330         WAS IT A 3330   (MOD 1...)      HM
         BNE   NOTMOD11              IF NOT 3330 DO NOT CHECK MORE  JRB
         CLC   DS4DEVSZ(2),=H'815'   IS NO. OF CYLS EQUAL TO 815     HM
         BNE   NOTMOD11                                              HM
         LA    R2,DEVNAMSZ(,R2)       INCREMENT TO SECOND 3330 DEFINIHM
         ST    R2,DEVNAMAD            AND STORE UPDATED VALUE        HM
         MVC   FC1(12),16(R2)       ALSO UPDATE DEVICE FACTORS       HM
NOTMOD11 DS    0H                                                    HM
         SPACE 1                                                     HM
*********** END OF THIS SET OF 3330-11 MODS...    *******************HM
         SPACE 5                                                     HM
* PUT VTOC EXTENT INTO THE TRACK MAP.
         SPACE
         MVC   FB+FBCCHH1(8),DS4VTOCE+2
         LA    R2,DS4VTOCE
         BAL   RE,F13CNVT      GET EXTENT SIZE IN R0
         STH   R0,FB+FBNTRKS
         STH   R0,VTOCSIZE             SAVE N TRACKS IN VTOC
         MVC   FB+FBTTREL1(4),RELTT1   PUT TTREL IN TRACK MAP ENTRY
         MVC   FB+FBEXT(1),DS4VTOCE+1  EXTENT NUMBER
         MVC   FB+FBNAME(4),=A(VTOCNAME)  INSERT ADDR OF NAME FOR VTOC
         LA    R2,FB
         BAL   RE,FILEMAP              PUT ENTRY IN TRACK MAP
         DROP  R9
         TITLE 'BUILD FORMAT 5 CHAIN IN MEMORY'
* READ FORMAT 5 DSCB'S INTO CORE, CHAINING THEM TOGETHER.  THE FIRST
* ONE FOLLOWS THE FORMAT 4 BLOCK; THE OTHERS ARE EACH ADDRESSED FROM
* THE PRECEDING ONE.
         SPACE
         USING DS5,RA
         LA    R4,DS5SIZE              SIZE OF BLOCK REQUIRED
         BAL   RE,GETBLOCK
         ST    R3,FMT5ADDR             SAVE ADDR OF FIRST FMT 5 BLOCK
         LR    RA,R3                   SET FORMAT 5 BASE REG
         BAL   RE,READSEQ              READ FIRST FMT 5 BLOCK
         BAL   RE,DISASTER             END FILE NOT EXPECTED HERE
         B     DS5JOIN
         SPACE
DS5LOOP  LA    R4,DS5SIZE
         BAL   RE,GETBLOCK
         ST    R3,DS5CHAIN             CHAIN FROM CURRENT TO NEW
         LA    R2,DS5PTRDS             ADDR OF DISK ADDRESS
         LR    RA,R3                   UPDATE BASE REG TO NEW BLOCK
         BAL   RE,READDIR              READ NEW BLOCK
DS5JOIN  CLI   DS5FMTID,X'F5'          MUST BE FORMAT 5, OR ELSE.....
         BNE   BADFMT5                 ERROR, NOT FORMAT 5 BLOCK
         SPACE
         BAL   RE,F5SPANAL             GO ANALYZE FREE SPACE EXTENTS
         SPACE
         CLC   DS5PTRDS(5),=5X'00'     IS THERE ANOTHER BLOCK TO FOLLOW
         BNE   DS5LOOP                 BRANCH IF YES
         SR    R0,R0                   IF NOT, SET CHAIN OF LAST
         ST    R0,DS5CHAIN               BLOCK TO ZERO
         DROP  RA
         SPACE 3
* READ ALL THE FORMAT 1 DSCB'S AND CHAIN THEM IN COLLATING SEQUENCE BY
* DATA SET NAME.  IF THERE ARE FORMAT 3 DSCB'S, THEY ARE READ AND
* CHAINED TO THE FORMAT 1 BLOCK.
         SPACE
         USING DS1,R9
F1RDLOOP LA    R4,DS1SIZE              LOAD SIZE OF BLOCK REQUIRED
         BAL   RE,GETBLOCK
         LR    R9,R3                   LOAD BASE REG
F1RDNEXT BAL   RE,READSEQ              READ NEXT SEQUENTIAL BLOCK
         B     VTRDDONE                EXIT AT END OF FILE
         CLI   DS1FMTID,X'F1'          TEST FOR FORMAT 1
         BNE   F1RDNEXT                IGNORE IF NOT FORMAT 1
         SPACE
         LH    R1,DSCOUNT              COUNT DATA SETS
         LA    R1,1(R1)
         STH   R1,DSCOUNT
         SPACE
         L     R2,FMT1ADDR             LOAD BEGINNING OF CHAIN
         L     R3,=A(FMT1ADDR-FM1NXTF1)    LOAD CHAIN HISTORY REG
F1SORT   CLC   DS1DSNAM(44),FM1DSNAM(R2)    SORT INTO SEQUENCE
         BL    F1THREAD                BRANCH WHEN PLACE IS FOUND
         LR    R3,R2                   UPDATE HISTORY REG
         L     R2,FM1NXTF1(R2)         FOLLOW CHAIN TO NEXT
         B     F1SORT
         SPACE
F1THREAD ST    R2,DS1NXTF1             CHAIN TO FOLLOWING BLOCK
         ST    R9,FM1NXTF1(R3)         CHAIN FROM PRECEDING BLOCK
         SR    R0,R0                   ZERO CHAIN TO POSSIBLE FORMAT 3
         ST    R0,DS1CHAIN               BLOCK
         CLC   DS1PTRDS,=5X'00'        TEST FOR FORMAT 3 ADDRESS
         SPACE
         BE    F1RDLOOP                BRANCH IF NO
         LA    R4,DS3SIZE              LENGTH OF BLOCK FOR FORMAT 3
         BAL   RE,GETBLOCK
         LR    RA,R3                   BASE REG FOR FMT 3
         USING  DS3,RA
         LA    R2,DS1PTRDS             ADDRESS OF DISK ADDRESS
F3RD     BAL   RE,READDIR              READ BLOCK
         CLI   DS3FMTID,X'F3'          TEST FOR FORMAT 3
         BE    F3GOT                   BRANCH IF FOUND
         CLC   DS3PTRDS,=5X'00'        IF NOT 3, TRY FOR ANOTHER
         BE    F1RDLOOP                BRANCH IF NO MORE
         LA    R2,DS3PTRDS             ADDRESS OF DISK ADDRESS
         B     F3RD                    TRY AGAIN
F3GOT    ST    RA,DS1CHAIN             CHAIN FROM FMT 1 BLOCK
         B     F1RDLOOP                GO GET NEXT FORMAT 1 BLOCK
         DROP  R9,RA
         SPACE 3
* VTOC IS COMPLETELY READ.  CLOSE READING SUBROUTINE.
         SPACE
VTRDDONE LA    R0,2                    CALL MODE 2 FOR CLOSE
         L     RF,VTOCREAD             ADDRESS OF XVTCREAD
         BALR  RE,RF                   BRANCH TO ROUTINE
         TITLE 'PRINT DEVICE DESCRIPTION'
* EDIT FIRST LINE FROM FORMAT 4 DSCB, DESCRIBING DEVICE PARAMETERS.
         SPACE
         SPACE 2
         USING DS4,R9
         L     R9,FMT4ADDR
         TM    MODESW,NOHDMASK   SKIP HEADINGS
         BO    DS5OK
         SPACE
         MVC   V1+1(19),=C'DEVICE DESCRIPTION:'
         SPACE
         MVC   V1TYPE(5),=C'TYPE='
         L     R2,DEVNAMAD             LOAD ADDRESS OF TABLE FOR DEVICE
         MVC   V1TYPE+5(15),1(R2)      INSERT DEVICE NAME IN PRINT LINE
         SPACE
         MVC   V1NOCYL(7),=C'NOCYLS='  NUMBER OF LOGICAL CYLINDERS
         LA    R2,DS4DEVSZ
         BAL   RE,BINALF2
         MVC   V1NOCYL+7(5),BTAALFJ
         SPACE
         MVC   V1TRCYL(9),=C'TRKS/CYL='
         LA    R2,DS4DEVSZ+2           TRACKS PER CYLINDER
         BAL   RE,BINALF2
         MVC   V1TRCYL+9(4),BTAALFJ
         SPACE
         MVC   V1DEVTK(8),=C'TRKSIZE=' LENGTH OF TRACK
         LA    R2,DS4DEVTK
         BAL   RE,BINALF2
         MVC   V1DEVTK+8(5),BTAALFJ
         SPACE
         MVC   V1DEVDT(9),=C'DSCB/TRK='  DSCB'S PER TRACK
         LA    R2,DS4DEVDT
         BAL   RE,BINALF1
         MVC   V1DEVDT+9(3),BTAALFJ
         SPACE
         MVC   V1DEVDB(8),=C'PDS/TRK=' PDS DIRECTORY BLOCKS PER TRACK
         LA    R2,DS4DEVDB
         BAL   RE,BINALF1
         MVC   V1DEVDB+8(3),BTAALFJ
         SPACE
         MVI   V1,PRSP2                PRINT AND SPACE 2
         BAL   RE,PRINTSUB
         SPACE 3
* EDIT THE SECOND LINE FROM THE FORMAT 4 DSCB, DESCRIBING THE VTOC
* DATA SET.
         SPACE
         MVC   V2+1(17),=C'VTOC DESCRIPTION:'
         SPACE
         MVC   V2DSCBCT(10),=C'NUM DSCBS='  NUMBER OF DSCBS
         SR    R0,R0
         IC    R0,DS4DEVDT             INSERT DSCB'S PER TRACK
         MH    R0,VTOCSIZE             TIMES NUMBER OF VTOC TRACKS
         BAL   RE,BINALFR
         MVC   V2DSCBCT+10(5),BTAALFJ
         SPACE
         MVC   V2DSCBAV(12),=C'AVAIL DSCBS='  NUM UNUSED DSCB'S
         LA    R2,DS4DSREC
         BAL   RE,BINALF2
         MVC   V2DSCBAV+12(5),BTAALFJ
         SPACE
         MVC   V2VTEXT(12),=C'VTOC EXTENT='  VTOC TRACK ADDRESSES
         MVI   V2VTEXT+16,C'.'
         MVI   V2VTEXT+21,C'-'
         MVI   V2VTEXT+26,C'.'
         UNPK  HEXWORK(15),DS4VTOCE+2(8)
         TR    HEXWORK(15),HEXEDTAB
         MVC   V2VTEXT+12(4),HEXWORK
         MVC   V2VTEXT+17(4),HEXWORK+4
         UNPK  HEXWORK(15),DS4VTOCE+6(8)
         TR    HEXWORK(15),HEXEDTAB
         MVC   V2VTEXT+22(4),HEXWORK
         MVC   V2VTEXT+27(4),HEXWORK+4
         SPACE
         MVC   V2NUMALT(7),=C'NUMALT=' NUMBER OF ALTERNATE TRACKS
         LA    R2,DS4NOATK
         BAL   RE,BINALF2
         MVC   V2NUMALT+7(5),BTAALFJ
         SPACE
         MVC   V2NXTALT(13),=C'NEXTALT=    .'  ADDRESS OF NEXT ALT TRK
         UNPK  HEXWORK(15),DS4HCCHH(8)
         TR    HEXWORK(15),HEXEDTAB
         MVC   V2NXTALT+8(4),HEXWORK
         MVC   V2NXTALT+13(4),HEXWORK+4
         SPACE
         MVI   V2,PRSP2                PRINT AND SPACE 2
         BAL   RE,PRINTSUB
         SPACE 3
* PRINT A LINE SUMMARIZING THE AVAILABLE SPACE DESCRIBED IN FORMAT
* 5 DSCB'S.
         SPACE
         MVC   V3+1(16),=C'AVAILABLE SPACE:'
         SPACE
         LH    R0,FREETRKS             TOTAL NUMBER OF FREE TRACKS
         BAL   RE,BINALFR
         MVC   V3FRTRKS(5),BTAALF+7
         MVC   V3FRTRKS+6(9),=C'TRACKS IN'
         SPACE
         LH    R0,F5EXTNTS             NUMBER OF FREE EXTENTS
         BAL   RE,BINALFR
         MVC   V3FREXTS(4),BTAALF+8
         MVC   V3FREXTS+5(18),=C'EXTENTS, INCLUDING'
         SPACE
         LH    R0,FREECYLS             NUMBER OF FREE FULL CYLINDERS
         BAL   RE,BINALFR
         MVC   V3FRCYLS(4),BTAALF+8
         MVC   V3FRCYLS+5(15),=C'FULL CYLINDERS.'
         SPACE
* DISPLAY VTOC INDICATORS IN HEX... (DIRF, DOS, ETC.)
         SPACE 2
         LA    R3,DS4VTOCI     LOCATION TO BE TRANS'ED
         LA    R4,V3FRCYLS+5+15+3+16     LOCATION FOR HEX VALUE
         LA    R5,4     NUMBER OF BYTES TO EDIT
         BAL   RE,DUMPEDIT     GO EDIT FIELD
         MVC   V3FRCYLS+5+15+3(16),=C'VTOC INDICATORS='
         MVC   V3FRCYLS+5+15+3+16+2(6),=8C' '  CLEAR GARBAGE AT END
         SPACE 2                                                    JRB
* THE FOLLOWING ROUTINE PUTS THE FORMAT1 HIGH WATER MARK,           JRB
* THAT IS FOUND IN THE FMT4 RECORD, IN THE HEADING                  JRB
         SPACE 2                                                    JRB
         MVC   V3FRCYLS+48(8),=C'HI-FMT1=' PREPARE HEADING          JRB
         LA    R3,DS4HPCHR         POINT TO HEX HIGH WATER MARK     JRB
         LA    R4,V3FRCYLS+56      TARGET ADDRESS IN PRINT LINE     JRB
         UNPK  0(5,R4),0(3,R3)     UNPACK THE HEX DATA (CYLINDER #) JRB
         TR    0(4,R4),HEXEDTAB    MAKE IT PRINTABLE (DOES THAT     JRB
*                                     MEAN IT IS CENSORED?????)     JRB
         MVI   4(R4),C'.'          PUT IN DELIMITER                 JRB
         LA    R4,5(R4)            BUMP ADDRESS OF OUTPUT           JRB
         LA    R3,2(R3)            BUMP ADDRESS OF INPUT            JRB
         UNPK  0(5,R4),0(3,R3)     UNPACK THE HEX DATA (TRACK #)    JRB
         TR    0(4,R4),HEXEDTAB    UNCENSOR IT                      JRB
         MVI   4(R4),C'.'          PUT IN DELIMITER                 JRB
         LA    R4,5(R4)            BUMP ADDRESS OF OUTPUT           JRB
         LA    R3,2(R3)            BUMP ADDRESS OF INPUT            JRB
         UNPK  0(3,R4),0(2,R3)     UNPACK THE HEX DATA (RECORD #)   JRB
         TR    0(2,R4),HEXEDTAB    UNCENSOR IT                      JRB
         MVI   2(R4),C' '          CLEAR UNWANTED STUFF             JRB
         SPACE 3
         MVI   V3,PRSP2                PRINT AND SPACE 2
         BAL   RE,PRINTSUB
         SPACE 3
* IF DOS CONTAMINATION FLAG IS ON, WARN USER, AND FORCE TRACK MAP LIST.
         SPACE
         TM    DS4VTOCI,X'80'          TEST IF DOS BIT IS ON
         BZ    DS5OK                   BRANCH IF NOT
         OI    MODESW,MAPMASK          FORCE TRACK MAP LISTING
         XPRNTLIN  PWA,TEXT=DS5WARN,LENGTH=L'DS5WARN,SPA=2
DS5OK    DS    0H
         SPACE 2                                                    JRB
***** THE FOLLOWING FORMATS IN HEX THE VSAM VOLUME INFORMATION      JRB
         SPACE 2                                                    JRB
         MVC   PL+1(17),=C'VSAM INFORMATION:'                       JRB
         MVC   PL+20(10),=C'TIMESTAMP='  MOVE CONSTANT              JRB
         LA    RA,PL+30            POINT TO NEXT PLACE ON LINE      JRB
         UNPK  0(9,RA),DS4AMTIM(5) UNPACK FIRST PART OF TIME STAMP  JRB
         UNPK  8(9,RA),DS4AMTIM+4(5)   UNPACK SECOND PART OF TIME   JRB
         MVI   16(RA),C' '         CLEAR GARBAGE                    JRB
         TR    0(16,RA),HEXEDTAB   UNCENSOR IT                      JRB
         MVC   18(10,RA),=C'INDICATOR='  MOVE CONSTANT              JRB
         LA    RA,28(RA)           BUMP                             JRB
         LA    R3,DS4VSIND         GET FROM ADDR FOR ROUTINE        JRB
         LR    R4,RA               GET TOO ADDR FOR ROUTINE         JRB
         LA    R5,1                GET NUMBER OF BYTES              JRB
         BAL   RE,DUMPEDIT         DO IT IN HEX                     JRB
         MVC   4(8,RA),=C'CRA TTR='  MOVE CONSTANT                  JRB
         LA    RA,12(RA)           BUMP                             JRB
         LA    R3,DS4VSCRA         GET FROM ADDR FOR ROUTINE        JRB
         LR    R4,RA               GET TOO ADDR FOR ROUTINE         JRB
         LA    R5,2                GET NUMBER OF BYTES              JRB
         BAL   RE,DUMPEDIT         DO IT IN HEX                     JRB
         MVC   6(32,RA),=C'VOLUME/CATALOG MATCH TIME STAMP='        JRB
         LA    RA,38(RA)           BUMP                             JRB
         UNPK  0(9,RA),DS4R2TIM(5) UNPACK FIRST PART OF TIME STAMP  JRB
         UNPK  8(9,RA),DS4R2TIM+4(5)   UNPACK SECOND PART OF TIME   JRB
         MVI   16(RA),C' '         CLEAR GARBAGE                    JRB
         TR    0(16,RA),HEXEDTAB   UNCENSOR IT                      JRB
         BAL   RE,PRINTSUB         GO PRINT THE LINE                JRB
         SPACE 2                                                    JRB
*** END OF VSAM INFORMATION FORMATTING                              JRB
         SPACE 3
* IF THE DUMP SWITCH IS ON, EDIT THE FORMAT 4 AND 5 BLOCKS IN HEX.
         SPACE
         TM    MODESW,DUMPMASK
         BZ    F5DONE
         SPACE
         LR    R2,R9                   ADDRESS OF FORMAT 4 BLOCK
         LA    R3,DS4FDAD                AND ITS DISK ADDRESS
         BAL   RE,DUMPDSCB
         SPACE
         USING DS5,RA
         L     RA,FMT5ADDR             ADDRESS OF FIRST BLOCK
DUMP5LUP LTR   RA,RA                   TEST FOR END OF CHAIN
         BZ    DUMP5DON
         LR    R2,RA                   ADDRESS OF DSCB
         LA    R3,DS5FDAD                AND ITS DISK ADDRESS
         BAL   RE,DUMPDSCB             GO TO PRINT IN HEX
         L     RA,DS5CHAIN             FOLLOW CHAIN TO NEXT BLOCK
         B     DUMP5LUP
         SPACE
DUMP5DON XPRSPACE  PWA,LINES=2         SPACE UP TWO LINES
         SPACE
F5DONE   DS    0H
         DROP  R9,RA
         TITLE 'FORMAT 1 EDITING'
* NOW ALL FORMAT 1 DSCB'S ARE IN CORE WITH THEIR OPTIONAL FORMAT 3
* BLOCKS ATTACHED.  EDIT ONE LINE FOR EACH, THEN DUMP THE BLOCKS IN
* HEX IF THE DUMP SWITCH IS ON.
         SPACE 2
         USING DS1,R9
         USING DS3,RA
F1EDIT   L     R9,=A(FMT1ADDR-FM1NXTF1)    LOAD CHAIN BEGINNING
*
*   TEST FOR NO DS LISTING AND SKIP HEADING IF SO.
         TM    MODESW,NODSMASK   NO DATA SETS ONLY
         BO    F1EDLOOP     SKIP HEADING...
         SPACE 2
*
         SPACE
* PRINT SUB-HEADING LINES ON PAGE FOLLOWING FORMAT 4 AND 5 INFO, AND
* SET UP PRINTING ROUTINE TO PRINT SUB-HEAD ON SUBSEQUENT PAGES.
         SPACE
         XPRLIST  PWA,LIST=(F1SA,F1SB) PRINT SUB-HEADING LINES
         SPACE
         XPRHEAD  PWA,LIST=(F1HD2,F1SA,F1SB)  SET UP FULL HEADING
         SPACE 3
* BEGIN EACH NEW DATA SET HERE:
         SPACE
F1EDLOOP L     R9,DS1NXTF1             FOLLOW CHAIN TO NEXT BLOCK
         CLC   DS1DSNAM(44),LASTFMT1   CHECK FOR CHAIN TERMINATOR
         BE    ENDF1                   BRANCH AT END
         L     RA,DS1CHAIN             LOAD FORMAT 3 ADDRESS
         SPACE
         BAL   RE,F1SPANAL             ANALYZE SPACE OCCUPIED
         SPACE 3
********************************************************
*  TEST FOR NO DATA SET PRINTING.                      *
********************************************************
         SPACE
         TM    MODESW,NODSMASK    NO DATA SET LISTING...
         BO    F1PDSDON    NO DATA SETS OR PDS'S LISTED
         TM    MODESW,DS1MASK   RESTRICT TO ONE DATA SET?
         BZ    PALLDS    NO, REGULAR
         L     RE,DSN1PTR
         CLC   DS1DSNAM,0(RE)     TEST AGAINST DSN ON JCL
         BNE   F1PDSDON   NOT CHOSEN D.S.  SKIP
         SPACE 3
         SPACE
* TEST PAGE BALANCE TO BE SURE ALL OUTPUT FOR A DATA SET WILL APPEAR
* ON THE SAME PAGE.
         SPACE
PALLDS   LA    R2,1                    AT LEAST 1 LINE ALWAYS NEEDED
         TM    MODESW,DUMPMASK         TEST FOR DUMP
         BZ    F1TEST                  BRANCH IF ONLY 1 LINE
         AH    R2,=H'4'                ADD 4 FOR FORMAT 1 BLOCK DUMP
         LTR   RA,RA                   TEST FOR PRESENCE OF FORMAT 3
         BZ    F1TEST
         AH    R2,=H'4'                ADD 4 FOR FORMAT 3 BLOCK
F1TEST   BAL   RE,PAGECHEK
         SPACE 3
* PRINT ONE LINE OF INFORMATION FROM A FORMAT 1 DSCB.
         SPACE
         MVC   F1DSNAM(44),DS1DSNAM    DATA SET NAME
         SPACE
*        MVC   F1DSSN(6),DS1DSSN       VOLUME SERIAL
********* REPLACE VOLSER BY THE LAST REFERENCE DATE ********
*
         LA    R2,DS1REFD              ADDRESS OF REFERENCE DATE
         LA    R3,F1REFD
         BAL   RE,VTREFDT
         SPACE
         LA    R2,DS1VOLSQ             ADDRESS OF VOLUME SEQUENCE
         BAL   RE,BINALF2
         MVC   F1VOLSQ(4),BTAALFZ+8
         SPACE
         LA    R2,DS1CREDT             ADDRESS OF CREATION DATE
         LA    R3,F1CREDT
         BAL   RE,VTDATED
         SPACE
         LA    R2,DS1EXPDT             ADDRESS OF EXPIRATION DATE
         LA    R3,F1EXPDT
         BAL   RE,VTDATED
         SPACE
         LA    R2,F1DSORG              ADDR OF DATA SET ORG FIELD
         TM    MODESW1,DSORGMSK
         BZ    NODSORG   BYPASS TEST FOR SPECIFIC DSORG
         MVC   TSTDSORG,DS1DSORG   PREPARE THE FILTER
         NC    TSTDSORG,DSORGSW   FILTER SET
         BNZ   NODSORG  SOME KIND OF HIT
         TM    MODESW1,VSORGMSK    IS MODE VSAM?                    JRB
         BZ    CLRPLJRB            NO THEN JUST CLEAR LINE          JRB
         TM    DS1DSORG+1,VSDSORG  IS IT A VSAM DATA SET?           JRB
         BO    NODSORG             YES CONTINUE                     JRB
CLRPLJRB EQU   *                                                    JRB
         MVI   PL+1,C' '   CLEAR LINE OF WHAT'S THERE
         MVC   PL+2(131),PL+1   AND CONTINUE
         B     F1PDSDON   GO GET NEXT
         SPACE 5
TM2BEX   TM    DS1DSORG,0   TM TO BE 'EXECUTED BELOW'
         SPACE 2
NODSORG  DS    0H
         L     R1,DSORGTBA   POINT AT DSORG TABLE
         LA    RE,DSORGEND     HOW MANY ENTRIES
LOOPDSOG IC    RF,2(R1)    GET CODED DSORG
         EX    RF,TM2BEX    EXECUTE TM FOR DSORG
         BZ    LOOPDSO1       NOT THIS ENTRY                        JRB
         MVC   0(2,R2),0(R1)     MOVE EBCDIC TYPE
         B     NOTU  FOUND A MATCH, GET OUT
LOOPDSO1 LA    R1,3(,R1)  BUMP TO NEXT ENTRY
         BCT   RE,LOOPDSOG     GO FOR MORE
         TM    DS1DSORG+1,VSDSORG  IS IT A VSAM DATA SET?           JRB
         BZ    NOTU2               NO THEN KEEP GOING               JRB
         MVC   0(2,R2),=C'VSAM INFORMATION' RE-CYCLE A LITERAL      JRB
NOTU     DS    0H
         TM    DS1DSORG,UDSORG     IS THE DATA SET UNMOVABLE?       JRB
         BZ    NOTU2                                                JRB
         MVI   2(R2),C'U'          INDICATE UNMOVABLE               JRB
NOTU2    EQU   *                                                    JRB
         SPACE
         UNPK  HEXWORK(15),DS1OPTCD(8) OPTION CODE, IN HEX
         TR    HEXWORK(15),HEXEDTAB
         MVC   F1OPTCD(2),HEXWORK
         SPACE
         LA    R2,F1RECFM              ADDR OF RECORD FORMAT FIELD
         TM    DS1RECFM,X'C0'
         BZ    RECFMUP                 ZEROS NOT DEFINED
         MVI   0(R2),C'U'
         BO    RECFMUP                 11 IS FORMAT 'U'
         TM    DS1RECFM,X'80'          WE NOW KNOW IT'S MIXED
         MVI   0(R2),C'F'              10 IS FORMAT 'F'
         BO    RECFMUP
         MVI   0(R2),C'V'              01 IS FORMAT 'V'
RECFMUP  LA    R2,1(R2)
         TM    DS1RECFM,X'20'          TEST TRACK OVERFLOW
         BZ    RECFMB
         MVI   0(R2),C'T'
         LA    R2,1(R2)
RECFMB   TM    DS1RECFM,X'10'          TEST FOR BLOCKED
         BZ    RECFMS
         MVI   0(R2),C'B'
         LA    R2,1(R2)
RECFMS   TM    DS1RECFM,X'08'          TEST FOR STANDARD BLOCKS
         BZ    RECFMAM
         MVI   0(R2),C'S'
         LA    R2,1(R2)
RECFMAM  TM    DS1RECFM,X'06'          TEST CONTROL CHAR TYPE
         BC    11,RECFME               BRANCH IF NOT MIXED
         TM    DS1RECFM,X'04'
         MVI   0(R2),C'A'
         BO    RECFME
         MVI   0(R2),C'M'
RECFME   DS    0H
         LA    R2,DS1BLKL              BLOCK SIZE
         BAL   RE,BINALF2
         MVC   F1BLKL(5),BTAALF+7
         LA    R2,DS1LRECL             LOGICAL RECORD LENGTH
         BAL   RE,BINALF2
         MVC   F1LRECL(5),BTAALF+7
         LA    R2,DS1KEYL              KEY LENGTH
         BAL   RE,BINALF1
         MVC   F1KEYL(3),BTAALF+9
         L     R0,F1TRCNT              ALLOCATION SIZE IN TRACKS
         BAL   RE,BINALFR
         MVC   F1TRALOC(5),BTAALF+7
         LH    RE,TRKA             GET TOTAL ALLOC THIS FAR         JRB
         A     RE,F1TRCNT          ADD NUMBER FOR THIS DS           JRB
         STH   RE,TRKA             SAVE UPDATED TOTAL               JRB
         CLC   DS1LSTAR(3),=XL3'00'
         BE    NONEUSED
         NC    F1TRCNT(4),F1TRCNT      SEE IF ANY TRACKS ASSIGNED
         BZ    NONEUSED                NO; THEN NONE CAN BE USED
         LH    R0,DS1LSTAR             TRACKS ACTUALLY USED
         AH    R0,=H'1'
         LH    RE,TRKU             GET TOTAL TRACKS USED            JRB
         AR    RE,R0               ADD NUMBER USED THIS DS          JRB
         STH   RE,TRKU             SAVE TOTAL TRACKS USED           JRB
         BAL   RE,BINALFR
         MVC   F1TRUSE(5),BTAALF+7
NONEUSED DS    0H
         SPACE
         LA    R2,DS1NOEPV             NUMBER OF EXTENTS
         BAL   RE,BINALF1
         MVC   F1NOEPV(2),BTAALF+10
         SPACE
         LA    R2,DS1SCALO+1           SECONDARY QUANTITY SIZE
         BAL   RE,BINALF3
         MVC   F1SCALO(5),BTAALF+7
         SPACE
         TM    DS1SCALO,X'C0'          TYPE OF SPACE ALLOCATION
         BC    14,NOTCYL               BR IF NOT ONES
         MVI   F1ALCTYP,C'C'           CYLINDER
         B     SCALDONE
NOTCYL   BC    7,NOTABSTR              BR IF NOT ZEROS
         MVI   F1ALCTYP,C'A'           ABSOLUTE TRACK
         B     SCALDONE
NOTABSTR TM    DS1SCALO,X'80'          NOW KNOW IT IS MIXED
         BO    TRKALO
         MVI   F1ALCTYP,C'B'           BLOCK
         B     SCALDONE
TRKALO   MVI   F1ALCTYP,C'T'           TRACK
SCALDONE DS    0H
*  FINAL CHECK FOR CATALOG DATA SETS...
         CLC   =C'SYSCTLG ',DS1DSNAM  IS IT A SYSTEM CATLOG
         BNE   NOTCOOLC   NOT A COOL CAT...
         L     RF,=A(CATLGCK)    ADDRESS OF CATLOG READER
         BALR  RE,RF      GO CHECK IT OUT
         C     RF,RETCODE          IS RETURN FROM CAT GREATER?      JRB
         BNH   NOTCOOLC            NO JUST RETURN                   JRB
         ST    RF,RETCODE          UPDATE THE RETURN CODE           JRB
NOTCOOLC DS    0H   ALL DONE...
         SPACE
* EACH DATA SET LINE IS SINGLE-SPACED, UNLESS FOLLOWED BY A DUMP OR
* PDS MEMBER LISTING.
         SPACE
         MVI   F1A,PRSP1
         TM    MODESW,DUMPMASK         TEST IF DUMP FOLLOWS
         BO    F1PRINT2                YES, DOUBLE SPACE
         TM    MODESW,NOMMASK+PDSLMASK  TEST IF MEMBER LISTING ON
         BNM   F1PRINT1  BRANCH IF ONLY PDS DIRECTORY
         TM    DS1DSORG,PODSORG        TEST IF THIS DS PARTITIONED
         BZ    F1PRINT1                NO, SINGLE SPACE
F1PRINT2 MVI   F1A,PRSP2               DOUBLE SPACE
F1PRINT1 BAL   RE,PRINTSUB             PRINT THE LINE
         SPACE
* IF DUMP SWITCH IS SET, EDIT THE DSCB'S IN HEX.
         SPACE
         TM    MODESW,DUMPMASK
         BZ    F1DMPDON                BRANCH IF NO DUMP
         SPACE
         LA    R2,DS1                  DUMP FORMAT 1 DSCB
         LA    R3,DS1FDAD
         BAL   RE,DUMPDSCB
         SPACE
         LTR   RA,RA                   TEST FOR FORMAT 3 BLOCK
         BZ    F1DMPDON
         LA    R2,DS3
         LA    R3,DS3FDAD
         BAL   RE,DUMPDSCB
         SPACE
F1DMPDON DS    0H
         SPACE
* IF THE PDS SWITCH IS SET AND THIS IS A PDS, EDIT ITS DIRECTORY.
         SPACE
         TM    MODESW,PDSLMASK         TEST IF LISTING CALLED FOR
         BZ    F1PDSDON
         TM    DS1DSORG,PODSORG        TEST IF PARTITIONED
         BZ    F1PDSDON
         LA    R2,DS1DSNAM
         BAL   RE,PDSLIST              CALL LISTING SUBROUTINE
F1PDSDON DS    0H
         B     F1EDLOOP
         SPACE 3
* END DATA SET LISTING.  PRINT A LINE GIVING THE NUMBER OF DATA SETS.
         SPACE
ENDF1    DS    0H
         TM    MODESW,NOHDMASK   NO HEADING, THEREFORE NO TRAILER
         BO    MAPEDIT
         MVC   PL+49(14),=C'***** END VTOC'
         LH    R0,DSCOUNT
         BAL   RE,BINALFR
         MVC   PL+64(4),BTAALF+8
         MVC   PL+69(15),=C'DATA SETS *****'
         MVC   PL+100(5),=C'TOTAL' INDICATE TOTAL TRACKS            JRB
         LH    R0,TRKA             GET NUMBER OF TRACKS             JRB
         BAL   RE,BINALFR          CONVERT TO EBCDIC                JRB
         MVC   PL+108(5),BTAALF+7  MOVE TO PRINT LINE               JRB
         LH    R0,TRKU             GET NUMBER TRACKS USED           JRB
         BAL   RE,BINALFR          CONVERT TO EBCDIC                JRB
         MVC   PL+114(5),BTAALF+7  MOVE TO PRINT LINE               JRB
         XPRNTLIN  PWA,TEXT=PL+1,LENGTH=132,SPB=1,SPA=0
         SPACE
         MVI   PL+1,C' '               BLANK PRINT LINE
         MVC   PL+2(131),PL+1
         SPACE 3
         DROP  R9,RA
         TITLE 'TRACK MAP PRINT ROUTINE'
* START A FRESH PAGE AND PRINT THE TRACK MAP FROM CORE, ONE LINE
* PER ENTRY.
         SPACE 2
         USING MB,R9
MAPEDIT  TM    MODESW,MAPMASK          TEST IF MAP WANTED
         BZ    ENDVOL                  BRANCH IF NOT
         SPACE
         XPREJECT  PWA                 SKIP TO FRESH PAGE
         SPACE
         MVC   TMHSER1(6),VOLUME       PUT VOLUME SERIAL IN HEADING
         MVC   TMHSER2(6),VOLUME
         XPRHEAD  PWA,LIST=(TMHEAD,TMSA,TMSB)  SET UP HEADING LINES
         SPACE
         L     R9,MBBASE               BEGINNING OF ENTRY CHAIN
         L     R4,=F'-1'               CLEAR HIGHEST TTREL FOUND
         SR    R5,R5                   CLEAR TRACK COUNTER
         SPACE
MAPELOOP CLC   MBCCHH1(4),MBTERM       TEST FOR END OF CHAIN
         BE    ENDMAPED
         SPACE
* CHECK EACH EXTENT FOR POSSIBLE ERRORS.  BEGIN BY SEEING THAT THE
* HIGHER RELATIVE TRACK NUMBER DOES NOT EXCEED THE NUMBER OF TRACKS IN
* THE VOLUME, AND THAT THE LOWER TTREL DOES NOT EXCEED THE HIGHER ONE.
         SPACE
TESTEX   CLC   MBTTREL2(2),FMAXTT      TEST 2ND FOR MAX
         BNL   EXINVAL                 EXTENT INVALID IF HIGH
         CLC   MBTTREL1(2),MBTTREL2    TEST IF LOWER NOT > HIGHER
         BH    EXINVAL                 INVALID IF SO
         SPACE
* TEST THAT LOWER TTREL IS ONE GREATER THAN THE PREVIOUS HIGHEST TTREL.
         SPACE
         LH    R0,MBTTREL1             GET CURRENT LOWER TTREL
         SR    R0,R4                   SUBTRACT HIGHEST TTREL TO DATE
         S     R0,=F'1'
         BZ    EXOK                    OK IF EQUAL
         BP    TMISSING                POSITIVE MEANS MISSING TRACKS
         SPACE
* A NEGATIVE DIFFERENCE INDICATES AN OVERLAP WITH A PREVIOUS EXTENT.
* FLAG THE CURRENT EXTENT, AND SET THE HIGH WATER MARK FROM IT ONLY IF
* LARGER THAN THE CURRENT VALUE.
         SPACE
         MVC   TMERROR-7(7),=C'OVERLAP'
         CH    R4,MBTTREL2             TEST AGAINST PREVIOUS MARK
         BNL   BYPWK3                  BRANCH IF SMALLER
         SPACE
* UPDATE THE HIGH-WATER MARK AND ACCUMULATE THE NUMBER OF TRACKS WHICH
* HAVE BEEN ACCOUNTED FOR.
         SPACE
EXOK     LH    R4,MBTTREL2             UPDATE HIGHEST TRACK YET
BYPWK3   LH    R0,MBNTRKS              LOAD N TRACKS IN EXTENT
         AR    R5,R0                   ACCUMULATE
         BAL   RE,BINALFR              CONVERT N TO ALPHA FOR PRINTING
         MVC   TMEXTSIZ(5),BTAALF+7    PUT IN PRINT LINE
         B     EDITCCHH                CONTINUE WITH EDITING
         SPACE
* FLAG INVALID EXTENTS AND BYPASS HIGHEST TRACK AND COUNT UPDATING.
         SPACE
EXINVAL  MVC   TMERROR-14(14),=C'INVALID EXTENT'
         B     EDITCCHH
         SPACE
* WHEN TRACKS ARE MISSING, INDICATE HOW MANY BEFORE PRINTING THE
* NEXT EXTENT NORMALLY.
         SPACE
TMISSING BAL   RE,BINALFR              EDIT N MISSING TRACKS TO ALF
         MVC   TMERROR-14(14),=C'TRACKS MISSING'
         MVC   TMERROR-20(5),BTAALF+7  INSERT N MISSING IN PRINT LINE
         MVI   TM1,PRSP1
         BAL   RE,PRINTSUB             PRINT ERROR MESSAGE
         B     EXOK
         SPACE 3
EDITCCHH DS    0H  EDIT TRK ADDRESS IF NECESSARY
         TM    MODESW,MEOMASK+DS1MASK   IS IT NECESSARY
         BZ    GOAHEAD   YES IT IS...
         TM    MODESW,DS1MASK
         BZ    COTEM   CHECK ONLY TRACK ERRORS
         L     R1,MBNAME   POINT AT DATA SET NAME
         L     RE,DSN1PTR     POINT AT CHOSEN DATA SET
         CLC   0(44,R1),0(RE)    IS IT A DATA SET MATCH?
         BE    GOAHEAD   YES, GO AHEAD AND PRINT IT...
COTEM    CLI   TMERROR,C' '   IS IT AN ERROR TRACK
         BE    NEXTTME   IF BLANK, NOT AN ERROR-DO NOT PRINT
         SPACE 1
* INSERT LOWER AND UPPER ADDRESSES IN CCHH FORM, AND ADD DATA SET NAME.
         SPACE
GOAHEAD  UNPK  HEXWORK(15),MBCCHH1(8)  FIRST TRACK ADDRESS
         TR    HEXWORK(15),HEXEDTAB
         MVC   TMCCHH1(4),HEXWORK
         MVI   TMCCHH1+4,C'.'
         MVC   TMCCHH1+5(4),HEXWORK+4
         SPACE
         UNPK  HEXWORK(15),MBCCHH2(8)  ADDR OF LAST TRACK
         TR    HEXWORK(15),HEXEDTAB
         MVC   TMCCHH2(4),HEXWORK
         MVI   TMCCHH2+4,C'.'
         MVC   TMCCHH2+5(4),HEXWORK+4
         SPACE
         TM    MBEXT,X'FF'             TEST IF NO EXTENT NUMBER
         BO    TMBLEXT
         SR    R0,R0
         IC    R0,MBEXT
         AH    R0,=H'1'
         BAL   RE,BINALFR
         MVC   TMEXTNO(2),BTAALF+10
TMBLEXT  DS    0H
         SPACE
         L     R1,MBNAME               ADDRESS OF DSNAME
         MVC   TMDSNAM(44),0(R1)
         SPACE
         MVI   TM1,PRSP1               PRINT AND SPACE 1
         BAL   RE,PRINTSUB
NEXTTME  L     R9,MBCHAIN              FOLLOW CHAIN TO NEXT BLOCK
         B     MAPELOOP
         SPACE 2
* END OF MAP.  CHECK THAT THE LAST ENTRY BROUGHT US TO THE LAST
* PRIMARY TRACK.
         SPACE
ENDMAPED LH    R0,FMAXTT               LOAD LAST TRK +1
         SR    R0,R4                   TEST AGAINST HIGHEST FOUND
         S     R0,=F'1'
         BNP   ENDMAPPR                BRANCH IF ALL FOUND
         SPACE
* SOME TRACKS ARE MISSING, SO PRINT A WARNING.
         SPACE
         BAL   RE,BINALFR              EDIT NUMBER MISSING
         MVC   TMERROR-14(14),=C'TRACKS MISSING'
         MVC   TMERROR-20(5),BTAALF+7
         MVI   TM1,PRSP1
         BAL   RE,PRINTSUB             PRINT ERROR MESSAGE
         SPACE
ENDMAPPR DS    0H
         LR    R0,R5                   LOAD TRACK COUNT
         BAL   RE,BINALFR              EDIT TO ALPHA
         MVC   TMEXTSIZ(5),BTAALF+7
         MVC   TMEXTSIZ+7(20),=C'TRACKS ACCOUNTED FOR'
         SPACE
         XPRNTLIN  PWA,TEXT=PL+1,LENGTH=132,SPB=1,SPA=2
         SPACE
         MVI   PL+1,C' '
         MVC   PL+2(131),PL+1
         SPACE
         MVC   PL+52(28),=C'***** END OF TRACK MAP *****'
         MVI   PL,PRSP0
         BAL   RE,PRINTSUB
         SPACE
         DROP  R9
         SPACE 6
* END OF VOLUME LISTINGS
         SPACE
ENDVOL   DS    0H
         BAL   RE,GBRESET              RELEASE DSCB CORE
         SPACE
         B     NEWVOL
         TITLE 'ERROR MESSAGE PRINT ROUTINE'
* ERRORS WHILE TRYING TO OPEN THE VTOC:
         SPACE
NODDCARD MVC   PL+41(19),=C'CANNOT FIND DD CARD'
         B     PRERR1
         SPACE
NOTDACC  MVC   PL+41(27),=C'DEVICE IS NOT DIRECT ACCESS'
         B     PRERR1
         SPACE
UNKNDEV  MVC   PL+41(19),=C'UNKNOWN DEVICE TYPE'
         B     PRERR1
         SPACE
CANTOPEN MVC   PL+41(27),=C'ATTEMPT TO OPEN VTOC FAILED'
         B     PRERR1
         SPACE
PRERR1   MVC   PL+10(28),=C'ERROR CONCERNING "VOLUME01":'
         MVC   PL+28(8),DDNAME
         MVI   PL,PRSP3
         BAL   RE,PRINTSUB
         LA    R0,4                    SET RETURN CODE OF 4
         C     R0,RETCODE
         BL    *+8
         ST    R0,RETCODE
         B     NEWVOL
         SPACE 3
* ERRORS IN DSCB FORMAT:
         SPACE
FRSTNOT4 MVC   PL+41(21),=C'FIRST DSCB NOT TYPE 4'
         LA    R2,R9                   ADDRESS OF BAD BLOCK
         B     PRERR2
         SPACE
BADFMT5  MVC   PL+41(33),=C'BAD DSCB, SHOULD HAVE BEEN TYPE 5'
         LA    R2,RA                   ADDRESS OF BAD BLOCK
         B     PRERR2
         SPACE
* PRINT ERROR MESSAGE AND DUMP BAD BLOCK.
         SPACE
PRERR2   MVC   PL+10(28),=C'ERROR CONCERNING "VOLUME01":'
         MVC   PL+28(8),DDNAME
         MVI   PL,PRSP3
         BAL   RE,PRINTSUB
         SPACE
         LA    R3,140(R2)              ADDR OF FULL DISK ADDRESS
         BAL   RE,DUMPDSCB             DUMP BAD BLOCK IN HEX
         SPACE
* CLOSE THIS VTOC, SET RETURN CODE, AND GO ON TO NEXT VOLUME.
         SPACE
         LA    R0,2                    CALL MODE 2 FOR CLOSE
         L     RF,VTOCREAD             ADDRESS OF ROUTINE
         BALR  RE,RF                   BRANCH TO XVTCREAD
         SPACE
         LA    R0,8                    SET RETURN CODE OF 8
         C     R0,RETCODE
         BL    *+8
         ST    R0,RETCODE
         B     NEWVOL                  CONTINUE WITH NEXT VOLUME
         TITLE 'PARTITIONED DATA SET DIRECTORY PRINT ROUTINE'
* ENTER THIS ROUTINE WITH THE NAME OF A PARTITIONED DATA SET AT (R2).
* THE DDNAME REFERRING TO THE PROPER VOLUME IS ALREADY SET UP IN THE
* DCB.  LIST THE MEMBER ENTRYS FROM THE DIRECTORY, AND PRINT THE
* NUMBER OF MEMBERS, THE NUMBER OF BLOCKS, AND THE NUMBER OF BLOCKS
* ACTUALLY USED.
         SPACE 2
PDSLIST  ST    RE,PDSEXIT              SAVE RETURN ADDRESS
         STM   R2,R5,PDSSAVE             AND WORK REGISTERS
         SPACE
* THE JFCB FOR THIS VOLUME IS ALREADY IN CORE, HAVING BEEN READ WHEN
* THE VTOC WAS OPENED.
         SPACE
         L     R1,JFCBADR              SET UP JFCB BASE REG
         USING JFDUMMY,R1
         MVC   JFCBDSNM(44),0(R2)      INSERT DATA SET NAME
         DROP  R1
         SPACE
         LM    R2,R3,=CL8'NOUSAGE '    PREVENT SETTING DATA SET USAGE
         OPEN  (PDSDCB,(INPUT)),TYPE=J
         SPACE
         SR    R0,R0                   RESET VARIOUS COUNTERS
         STH   R0,PDSBAL
         STH   R0,PDSDIRCT             DIRECTORY BLOCK COUNT
         STH   R0,PDSDIRUS             BLOCKS USED
         STH   R0,PDSMEMCT             MEMBER COUNT
         STH   R0,PDSALCT              ALIAS COUNT
         SPACE
* GET A MEMBER FROM THE DIRECTORY, SETTING REGISTER 'R8' TO IT.
         SPACE
GETPDS   LH    R0,PDSBAL               LOAD BALANCE IN CURRENT BLOCK
         LTR   R0,R0                   TEST FOR ZERO
         BP    PDSBALOK                BR IF BLOCK NOT EMPTY
         SPACE
         READ  PDSECB,SF,PDSDCB,PDSBUF    READ A DIRECTORY BLOCK
         SPACE
         CHECK PDSECB
         SPACE
         L     R2,=A(PDSBUF)
         USING PDSBUF,R2
         LH    R1,PDSDIRCT             COUNT DIRECTORY BLOCKS
         LA    R1,1(R1)
         STH   R1,PDSDIRCT
         LH    R0,PDSLRECL             SET BLOCK BALANCE FROM LOGICAL
         SH    R0,=H'2'                  BLOCK LENGTH FIELD
         STH   R0,PDSBAL
         LA    R1,PDSDATA              SET PDSCLC TO BEGINNING OF BLOCK
         ST    R1,PDSCLC
         B     GETPDS                  TEST BALANCE....
         DROP  R2
         SPACE 2
         USING DIRBLOCK,R8
PDSBALOK L     R8,PDSCLC               LOAD ADDRESS OF DIRECTORY ENTRY
         IC    R2,DIRC                 GET USER DATA LENGTH
         N     R2,=F'31'
         SLL   R2,1
         LR    R1,R8                   UPDATE BLOCK CLC
         AR    R1,R2
         LA    R1,12(R1)
         ST    R1,PDSCLC
         LH    R1,PDSBAL               DECREMENT BLOCK BALANCE
         SR    R1,R2
         SH    R1,=H'12'
         STH   R1,PDSBAL
         SPACE
         CLC   DIRNAME(8),=8X'FF'      TEST FOR LAST NAME
         BNE   EDITMEMB
         MVC   PDSDIRUS(2),PDSDIRCT    SAVE COUNT OF BLOCKS USED
         B     GETPDS                  READ ALL BLOCKS TO GET COUNT
         SPACE
* EDIT A LINE FOR THE MEMBER.  IF THE USER DATA WAS MORE THAN 44 BYTES,
* A SECOND LINE IS REQUIRED.
         SPACE
EDITMEMB MVC   PDSMEMB(8),DIRNAME      MEMBER OR ALIAS NAME TO PRINTLIN
         TM    DIRC,ALIASMSK           TEST IF ALIAS
         BZ    NOTALIAS                BRANCH IF NOT ALIAS
         SPACE
         LH    R1,PDSALCT              COUNT ALIASES
         LA    R1,1(R1)
         STH   R1,PDSALCT
         MVI   PDSALIAS,C'A'           MARK ALIAS IN PRINT LINE
         B     PDSTTRED
         SPACE
NOTALIAS LH    R1,PDSMEMCT             COUNT MEMBER NAMES
         LA    R1,1(R1)
         STH   R1,PDSMEMCT
         SPACE
PDSTTRED DS    0H
         TM    MODESW,NOMMASK   SKIP MEMBER LISTING?
         BO    GETPDS     YEP
         SPACE
         UNPK  HEXWORK(15),DIRTTR(8)   EDIT RELATIVE TRACK ADDRESS
         TR    HEXWORK(15),HEXEDTAB
         MVC   PDSTTR(4),HEXWORK
         MVI   PDSTTR+4,C'.'
         MVC   PDSTTR+5(2),HEXWORK+4
         SPACE
         IC    R0,DIRC                 EDIT NUMBER OF TTR'S
         SRL   R0,5
         N     R0,=F'3'
         STC   R0,PDSNTT
         OI    PDSNTT,X'F0'
         SPACE
         LR    R5,R2                   LENGTH OF USER DATA
         CH    R2,=H'44'               TEST IF MORE THAN ONE LINE
         BNH   PDS1LINE                BR IF ONE LINE
         SPACE
         LA    R2,2                    ENSURE BOTH LINES ON SAME PAGE
         BAL   RE,PAGECHEK
         LR    R2,R5                   RESTORE R2
         LA    R5,44                   LENGTH FOR FIRST LINE
         SPACE
PDS1LINE LA    R3,DIRUDATA             ADDRESS OF USER DATA
         LA    R4,PDSHEX               PRINT LINE OUTPUT AREA
         BAL   RE,DUMPEDIT             EDIT DATA INTO HEX
         MVI   PDS1,PRSP1              PRINT AND SPACE 1
         BAL   RE,PRINTSUB
         SPACE
         CH    R2,=H'44'               TEST IF SECOND LINE REQUIRED
         BNH   GETPDS                  BR IF NOT
         LR    R5,R2                   COMPUTE REMAINING DATA LENGTH
         SH    R5,=H'44'
         LA    R3,DIRUDATA+44
         LA    R4,PDSHEX
         BAL   RE,DUMPEDIT
         MVI   PDS1,PRSP1
         BAL   RE,PRINTSUB
         SPACE
         B     GETPDS
         DROP  R8
         SPACE 3
* WHEN THE END OF THE DIRECTORY IS REACHED, CLOSE THE DATA SET AND
* PRINT A SUMMARY LINE WITH THE ACCUMULATED TOTALS.
         SPACE
PDSEODAD DS    0H
         SPACE
         MVI   PDSMEMB,C' '   CLEAR MEMBER NAME OF LST MEMBER
         MVC   PDSMEMB+1(7),PDSMEMB   AVOID RESIDUAL MEMBER NAME
         SPACE
         LH    R0,PDSMEMCT             COUNT OF MEMBERS
         BAL   RE,BINALFR
         MVC   PDSSUMMC(4),BTAALF+8
         LH    R0,PDSALCT              COUNT OF ALIASES
         BAL   RE,BINALFR
         MVC   PDSSUMAC(4),BTAALF+8
         LH    R0,PDSDIRUS             DIRECTORY BLOCK USED
         BAL   RE,BINALFR
         MVC   PDSSUMUC(4),BTAALF+8
         LH    R0,PDSDIRCT             NUMBER OF BLOCKS ALLOCATED
         BAL   RE,BINALFR
         MVC   PDSSUMDC(4),BTAALF+8
         SPACE
         XPRNTLIN  PWA,TEXT=PDSSUM,LENGTH=PDSSUMSZ,OFFSET=16,SPA=1
         SPACE
PDSCLOSE CLOSE (PDSDCB)
         SPACE
         SPACE
         LM    R2,R5,PDSSAVE
         L     RE,PDSEXIT
         BR    RE
         SPACE 3
* PDS SUMMARY LINE:
         SPACE
PDSSUM   DC    C'DIRECTORY CONTAINS '
PDSSUMMC DC    C'0000 MEMBERS AND '
PDSSUMAC DC    C'0000 ALIASES, AND USES '
PDSSUMUC DC    C'0000 OF THE '
PDSSUMDC DC    C'0000 DIRECTORY BLOCKS ALLOCATED'
PDSSUMSZ EQU   *-PDSSUM
         SPACE 2
PDSEXIT  DC    F'0'
PDSSAVE  DC    4F'0'
PDSCLC   DC    A(0)
PDSBAL   DC    H'0'
PDSDIRCT DC    H'0'
PDSDIRUS DC    H'0'
PDSMEMCT DC    H'0'
PDSALCT  DC    H'0'
         SPACE 3
* SYNAD ROUTINE FOR PDS DIRECTORY.  GET ERROR MESSAGE AND LOAD INTO
* PRINT LINE.  BRANCH TO CLOSE DCB.
         SPACE
PDSSYNAD SYNADAF  ACSMETH=BSAM         GET ERROR MESSAGE FROM OS
         SPACE
         MVC   PL+1(30),=C'*******PDS DIRECTORY I/O ERROR'
         MVC   PL+31(79),49(R1)        ADD TEXT FROM SYNADAF
         SPACE
         SYNADRLS                      FREE OS MESSAGE BUFFER
         SPACE
         MVI   PL,PRSP3                SET TO SPACE 3
         BAL   RE,PRINTSUB             PRINT ERROR MESSAGE
         L     RE,PDSDCBA     LOAD ADDRESS OF PDSDCB
         NI    DCBIFLGS-IHADCB(RE),X'3F'    RESET DCB ERROR FLAG
         MVI   RETCODE+3,12            SET RETURN CODE OF 12
         B     PDSCLOSE                CLOSE DCB
         TITLE 'VOLUME TABLE OF CONTENTS (VTOC) READ ROUTINE'
* ROUTINE 'READSEQ' READS THE NEXT DSCB IN SEQUENCE INTO THE
* 140-BYTE AREA ADDRESSED BY 'R3'.    IT CALLS ROUTINE 'XVTCREAD' TO DO
* THE DIRTY WORK.  NORMAL RETURN IS TO THE ADDRESS IN
* RE+4.    IF END-OF-DATA IS ENCOUNTERED, RETURN IS TO RE.
* THE FULL DISK ADDRESS (MBBCCHHR) IS SAVED IN THE 8 BYTES FOLLOWING
* THE BUFFER.
         SPACE 2
READSEQ  ST    RE,RDSEQXT              SAVE RETURN ADDRESS
         SPACE
         SR    R0,R0                   CALL MODE 0 FOR READ
         L     RF,VTOCREAD             ADDRESS OF XVTCREAD ROUTINE
         BALR  RE,RF                   BRANCH TO ROUTINE
         CH    RF,=H'4'                TEST FOR END OF FILE
         BE    RDEODAD                 BRANCH IF SO
         MVC   0(140,R3),8(R1)         MOVE KEY AND DATA
         XC    140(3,R3),0(R3)         ZERO 'MBB' PART OF ADDRESS
         MVC   143(5,R3),0(R1)         INSERT 'CCHHR' PART OF ADDRESS
         SPACE
         L     RE,RDSEQXT
         LA    RE,4(RE)                INCREMENT FOR NORMAL RETURN
         BR    RE
         SPACE 2
RDEODAD  L     RE,RDSEQXT              RETURN AT END OF DATA
         BR    RE
         SPACE 3
RDSEQXT  DC    F'0'
         SPACE 3
* ROUTINE 'READDIR' IS USED TO READ THE DSCB SPECIFIED BY THE 5-BYTE
* 'CCHHR' FIELD POINTED TO BY R2 INTO THE 140-BYTE BUFFER AT R3.
* THE FULL DISK ADDRESS 'MBBCCHHR' IS INSERTED IN THE 8 BYTES FOLLOW-
* ING THE 140-BYTE BLOCK.
         SPACE 2
READDIR  ST    RE,RDDIRXT              SAVE EXIT ADDRESS
         MVC   OBCCHHR(5),0(R2)        GET ADDRESS FROM CALLER
         SPACE
         OBTAIN  OBCAMLST              READ SPECIFIED BLOCK
         SPACE
         LTR   RF,RF                   TEST RETURN CODE
         BZ    *+8                     BRANCH IF ZERO
         BAL   RE,DISASTER             NO ERROR CONDITIONS TOLERATED
         L     R1,=A(OBWORK)           ADDRESS WORK AREA
         MVC   0(140,R3),0(R1)         MOVE DSCB TO USER'S AREA
         XC    140(3,R3),0(R3)         ZERO 'MBB' PART OF ADDRESS
         MVC   143(5,R3),0(R2)         INSERT CCHHR FROM ORIGINAL CALL
         L     RE,RDDIRXT
         BR    RE                      RETURN TO CALLER
         SPACE 3
OBCAMLST CAMLST  SEEK,OBCCHHR,VOLUME,OBWORK
         SPACE
OBCCHHR  DC    5X'00'
RDDIRXT  DC    F'0'
         TITLE 'COMPUTE DATA SET ALLOCATION SIZE'
* ENTER HERE TO COMPUTE THE NUMBER OF TRACKS ASSIGNED TO A DATA SET AND
* PUT THE RESULT IN 'F1TRCNT'.  THE FORMAT 1 DSCB IS ASSUMED
* TO BE IN AREA 'DS1', AND, IF THE NUMBER OF EXTENTS EXCEEDS 3,
* THE FORMAT 3 DSCB IS ASSUMED TO BE IN AREA 'DS3'.
* EACH EXTENT IS FILED IN THE TRACK MAP.
         SPACE
         USING DS1,R9
         USING DS3,RA
         SPACE
F1SPANAL ST    RE,F1SPAXT              SAVE RETURN ADDRESS
         SR    R5,R5
         ST    R5,F1TRCNT              ZERO SIZE RESULT FIELD
         IC    R5,DS1NOEPV             INSERT NUMBER OF EXTENTS
         LTR   R5,R5                   TEST FOR ZERO EXTENTS
         BCR   8,RE                    EXIT IF ZERO
         SR    R3,R3                   ZERO EXTENT INDEX
         SR    R4,R4                   TRACK COUNT ACCUMULATOR
         SPACE
EXTLOOP  EX    0,EXTLIST(R3)           LOAD AN EXTENT ADDRESS IN R2
         BAL   RE,F13CNVT              GET NUM TRKS IN EXTENT
         AR    R4,R0                   ADD TO TOTAL
         SPACE
         MVC   FB+FBCCHH1(8),2(R2)     MAKE UP TRACK MAP ENTRY
         STH   R0,FB+FBNTRKS           SIZE OF EXTENT
         MVC   FB+FBEXT(1),1(R2)       EXTENT NUMBER (-1)
         MVC   FB+FBTTREL1(4),RELTT1   INSERT REL TRACK LIMITS
         LA    R0,DS1DSNAM             ADDRESS OF DATA SET NAME
         ST    R0,FB+FBNAME
         LA    R2,FB
         BAL   RE,FILEMAP              FILE IN TRACK MAP
         SPACE
         LA    R3,4(R3)                INDEX TO NEXT EXTENT
         BCT   R5,EXTLOOP              LOOP THROUGH ALL EXTENTS
         SPACE
         ST    R4,F1TRCNT              STORE RESULT
         L     RE,F1SPAXT              LOAD RETURN ADDRESS
         BR    RE
         SPACE 3
F1SPAXT  DC    F'0'
F1TRCNT  DC    F'0'
         SPACE
* EXECUTED INSTRUCTIONS TO LOAD EXTENT ADDRESSES:
         SPACE
EXTLIST  LA    R2,DS1EXT1
         LA    R2,DS1EXT2
         LA    R2,DS1EXT3
         LA    R2,DS3EXTNT
         LA    R2,DS3EXTNT+10
         LA    R2,DS3EXTNT+20
         LA    R2,DS3EXTNT+30
         LA    R2,DS3ADEXT
         LA    R2,DS3ADEXT+10
         LA    R2,DS3ADEXT+20
         LA    R2,DS3ADEXT+30
         LA    R2,DS3ADEXT+40
         LA    R2,DS3ADEXT+50
         LA    R2,DS3ADEXT+60
         LA    R2,DS3ADEXT+70
         LA    R2,DS3ADEXT+80
         SPACE
         DROP  R9,RA
         TITLE 'FORMAT 1 AND 3 DSCB EXTENT CONVERT ROUTINE'
* ENTER WITH THE ADDRESS OF A TEN-BYTE EXTENT DISCRIPTION IN R2.
* RETURN WITH RELATIVE TRACK NUMBERS OF FIRST AND LAST TRACKS IN
* 'TTREL1' AND 'TTREL2', AND NUMBER OF TRACKS IN R0.
         SPACE 2
F13CNVT  CLI   0(R2),X'00'             TEST IF THIS IS AN ACTIVE EXTENT
         BCR   8,RE                    EXIT IF ZERO
         LA    R2,2(R2)                ADDR OF STARTING CCHH
         BAL   RF,CCHHCNVT             GET REL TRACK
         STH   R0,RELTT1
         LA    R2,4(R2)                ADDR OF ENDING CCHH
         BAL   RF,CCHHCNVT             CONVERT TO TTREL
         STH   R0,RELTT2
         LH    R1,RELTT1
         SR    R0,R1                   COMPUTE NUMBER OF TRACKS
         AH    R0,=H'1'
         S     R2,=F'6'                RESTORE R2 TO CALLER'S VALUE
         BR    RE                      RETURN TO CALLER
         SPACE
* CONVERT ADDRESS FROM 'CCHH' TO RELATIVE TRACK NUMBER.
         SPACE
CCHHCNVT SR    R0,R0                   RESULT WILL BE IN R0
         IC    R0,0(R2)                BYTE C1
         MH    R0,FC1
         SR    R1,R1
         IC    R1,1(R2)
         MH    R1,FC2
         AR    R0,R1
         SR    R1,R1
         IC    R1,2(R2)
         MH    R1,FH1
         AR    R0,R1
         SR    R1,R1
         IC    R1,3(R2)
         MH    R1,FH2
         AR    R0,R1
         BR    RF
         SPACE 2
*THESE MUST BE TOGETHER IN THE ORDER SHOWN:
         SPACE
RELTT1   DC    H'0'
RELTT2   DC    H'0'
         TITLE 'FORMAT 5 DSCB SPACE ANALYSIS'
* ROUTINE TO ANALYZE THE FREE SPACE EXTENTS DESCRIBED IN A FORMAT 5
* DSCB.  ENTER WITH 'RA' SET TO A DSCB.    COMPUTE THE NUMBER OF FREE
* TRACKS, FREE CYLINDERS, AND EXTENTS.  FILE AN ENTRY IN THE TRACK MAP
* FOR EACH EXTENT.
         SPACE 2
         USING DS5,RA
F5SPANAL ST    RE,F5SPAXIT             SAVE RETURN ADDRESS
         SPACE
         LA    R2,DS5AVEXT             ADDR OF 1ST GROUP OF 8 EXTENTS
         LA    R3,8                    COUNTER
F5SPLUP1 BAL   RE,F5EXANAL             ANALYZE INDIVIDUAL EXTENT
         LA    R2,5(R2)                INDEX TO NEXT ONE
         BCT   R3,F5SPLUP1
         SPACE
         LA    R2,DS5MAVET             ADDR OF 2ND GROUP OF 18 EXTENTS
         LA    R3,18
F5SPLUP2 BAL   RE,F5EXANAL
         LA    R2,5(R2)
         BCT   R3,F5SPLUP2
         SPACE
         L     RE,F5SPAXIT
         BR    RE
         DROP  RA
         SPACE 3
* ANALYZE AN INDIVIDUAL FREE SPACE EXTENT.  IF ALL FIVE BYTES ARE
* ZERO, NO EXTENT IS DESCRIBED.
         SPACE
F5EXANAL ST    RE,F5EXAXT              SAVE RETURN ADDRESS
         STM   R2,R5,F5EXASAV            AND OTHER REGISTERS
         CLC   0(5,R2),=XL5'00'        TEST FOR ACTIVE EXTENT
         BCR   8,RE                    EXIT IF ZEROS
         SPACE
         LH    R1,F5EXTNTS             COUNT FREE EXTENTS
         LA    R1,1(R1)
         STH   R1,F5EXTNTS
         SPACE
         MVC   FWORK(4),0(R2)          LOAD REGISTERS:
         LH    R3,FWORK                  R3=RELATIVE ADDR OF 1ST TR
         LH    R4,FWORK+2                R4=NUMBER OF FULL CYLS
         SR    R5,R5                     R5=NUMBER OF ODD TRACKS
         IC    R5,4(R2)
         STH   R3,RELTT1               SAVE TT REL OF FIRST TRACK
         SPACE
         LH    R0,FREECYLS             COUNT FREE CYLINDERS
         AR    R0,R4
         STH   R0,FREECYLS
         SPACE
         LR    R0,R4           COMPUTE EXTENT SIZE (MAY NOT WORK FOR
         MH    R0,FCYL                   2321 DATA CELL)
         AR    R0,R5
         STH   R0,FB+FBNTRKS
         LR    R1,R0                   LOAD SIZE OF THIS EXTENT
         AH    R1,FREETRKS             COUNT TOTAL FREE TRACKS
         STH   R1,FREETRKS
         AR    R0,R3                   MAKE TTREL OF LAST TRACK
         BCTR  R0,0                    DECREMENT BY 1
         STH   R0,RELTT2
         SPACE
         LH    R1,RELTT1               CONVERT TTREL TO CCHH FOR MAP
         BAL   RE,TTCNVT
         MVC   FB+FBCCHH1(4),CCHH
         LH    R1,RELTT2
         BAL   RE,TTCNVT
         MVC   FB+FBCCHH2(4),CCHH
         SPACE
         MVC   FB+FBTTREL1(4),RELTT1   PUT TTREL INTO TRACK MAP
         MVI   FB+FBEXT,X'FF'          NO EXTENT NUMBER
         LA    R0,=CL44'   AVAILABLE ******************** AVAILABLE'
         ST    R0,FB+FBNAME
         LA    R2,FB
         BAL   RE,FILEMAP              FILE DATA IN TRACK MAP
         SPACE
         LM    R2,R5,F5EXASAV          RESTORE REGISTERS
         L     RE,F5EXAXT
         BR    RE
         SPACE 3
F5SPAXIT DC    F'0'
F5EXAXT  DC    F'0'
F5EXASAV DC    4F'0'
         TITLE 'CONVERT TTREL TO CCHH'
* CONVERT RELATIVE TRACK ADDRESS TO ABSOLUTE CCHH FORM.  TTREL IS
* SUPPLIED IN R1, RESULT IN 'CCHH'.
         SPACE 2
TTCNVT   SR    R0,R0                   R0-R1 USED FOR DIVIDE
         ST    R0,CCHH                 ZERO OUTPUT FIELD
         LH    RF,FC1
         LTR   RF,RF                   WATCH FOR DIVIDE BY ZERO
         BZ    ZFC1
         DR    R0,RF
         STC   R1,CCHH
         LR    R1,R0
         SR    R0,R0
ZFC1     LH    RF,FC2
         LTR   RF,RF
         BZ    ZFC2
         DR    R0,RF
         STC   R1,CCHH+1
         LR    R1,R0
         SR    R0,R0
ZFC2     LH    RF,FH1
         LTR   RF,RF
         BZ    ZFH1
         DR    R0,RF
         STC   R1,CCHH+2
         STC   R0,CCHH+3
         BR    RE
ZFH1     STC   R1,CCHH+3
         BR    RE
         SPACE 2
CCHH     DC    F'0'
         TITLE 'FILE ITEM IN TRACK MAP'
* SUBROUTINE USED BY 'F1SPANAL' AND 'F5SPANAL' TO INSERT A SIX-WORD
* EXTENT DESCRIPTOR BLOCK INTO THE TRACK MAP.  ENTER WITH THE ADDRESS
* OF THE NEW BLOCK IN 'R2'.    THE ROUTINE GETS CORE, MOVES THE BLOCK,
* AND CHAINS IT IN SEQUENCE WITH OTHER MAP BLOCKS BY ASCENDING ORDER OF
* LOWER CCHH.
         SPACE 2
FILEMAP  ST    RE,FMEXIT               SAVE EXIT AND WORK REGISTERS
         STM   R3,R5,FMSAVE
         SPACE
         LA    R4,MBSIZE               GET A CORE BLOCK
         BAL   RE,GETBLOCK             RETURNS ADDRESS IN R3
         USING MB,R3
         MVC   MB(MBSIZE),0(R2)        MOVE NEW BLOCK
         L     R2,MBBASE               GET CHAIN BEGINNING
         LA    R4,MBBASE               CHAIN HISTORY REG
FMSORT   CLC   MBCCHH1(4),FBCCHH1(R2)  SHOULD IT BE INSERTED HERE?  JRB
         BL    FMTHREAD                YES GO DO IT                 JRB
         LR    R4,R2                   PICK UP NEXT CHAIN POINTER   JRB
         L     R2,FBCHAIN(R2)          FOLLOW CHAIN TO NEXT ITEM
         B     FMSORT                  GO LOOK AGAIN                JRB
FMTHREAD ST    R2,MBCHAIN              THREAD FROM NEW TO NEXT
         ST    R3,FBCHAIN(R4)          THREAD FROM PRECEDING TO NEW
         SPACE
         LM    R3,R5,FMSAVE            RESTORE REGISTERS
         L     RE,FMEXIT
         BR    RE
         DROP  R3
         SPACE 2
FMSAVE   DC    3F'0'
FMEXIT   DC    F'0'
MBBASE   DC    A(*)                    CHAIN BASE ADDRESS
MBTERM   DC    4X'FF'                  CHAIN END, MUST FOLLOW 'MBBASE'
         SPACE
FB       DS    0F                      WORK BLOCK USED BY F1SPANAL
         DS    24X                       AND F5SPANAL TO ASSEMBLE BLKS
         TITLE 'BINARY TO ALPHA ROUTINE'
* ROUTINE TO CONVERT A BINARY NUMBER TO DECIMAL AND EDIT INTO THREE
* ALPHA FORMATS.  ENTER WITH REGISTER 'R2' SET TO THE FIRST BYTE OF
* THE BINARY FIELD AND THE NUMBER OF BYTES (UP TO FOUR) IN REGISTER
* 'R3'.    THE ALPHA OUTPUT IS IN THREE 12-BYTE FIELDS:
*        'BTAALF' IS RIGHT-ALIGNED WITH LEADING ZEROS BLANKED;
*        'BTAALFZ' IS RIGHT-ALIGNED WITH LEADING ZEROS;
*        'BTAALFJ' IS LEFT-ALIGNED WITH TRAILING BLANKS ADDED.
* RETURN TO CALLER IS VIA REGISTER 'RE'.    REGISTER 'R0' IS USED AND
* IS NOT RESTORED.
         SPACE
* THE ALTERNATE ENTRANCE 'BINALFR' MAY BE USED WHEN THE ARGUMENT IS
* ALREADY IN REGISTER 'R0'.
         SPACE 2
BINALF1  LA    R3,1                    ENTRANCE FOR 1-BYTE ARG
         B     BTA
BINALF2  LA    R3,2                    ENTRANCE FOR 2-BYTE ARG
         B     BTA
BINALF3  LA    R3,3                    ENTRANCE FOR 3-BYTE ARG
         SPACE
BTA      SR    R0,R0                   CLEAR ACCUMULATOR
BTALUP1  SLL   R0,8                    MOVE OVER FOR NEXT BYTE
         IC    R0,0(R2)                GET NEXT BYTE OF ARGUMENT
         LA    R2,1(R2)                INCREMENT ADDR OF ARGUMENT
         BCT   R3,BTALUP1              LOOP TO EXTRACT ALL BYTES
         SPACE
BINALFR  LPR   R0,R0                   TAKE ABSOLUTE VALUE
         CVD   R0,BTADWD               CONVERT ARG TO PACKED DECIMAL
         UNPK  BTAALFZ(12),BTADWD(8)   UNPACK VERSION WITH ZEROS
         OI    BTAALFZ+11,X'F0'        COVER UP SIGN
         SPACE
         MVC   BTAALF(12),BTAPTRN      INSERT EDIT CONTROL CHAR
         ED    BTAALF(12),BTADWD+2     EDIT ZERO-SUPPRESSED VERSION
         SPACE
         MVC   BTAALFJ(11),BTAALF+1    NOTE: BTAALFJ+11 PERMANENT BLANK
BTALUP2  CLI   BTAALFJ,C' '            CHECK FOR LEADING BLANK
         BCR   7,RE                    EXIT IF NOT BLANK, IE, DIGIT
         MVC   BTAALFJ(11),BTAALFJ+1   SHIFT ONE LEFT
         B     BTALUP2                 CONTINUE
         SPACE 3
BTADWD   DC    D'0'
BTAPTRN  DC    XL12'402020202020202020202120'     EDIT CONTROL CHARS
BTAALF   DC    CL12' '
BTAALFJ  DC    CL12' '
BTAALFZ  DC    CL12' '
         TITLE 'VTOC DATE EDITING'
* SUBROUTINE TO CONVERT FROM THE BINARY FORM 'YDD' IN A DSCB INTO THE
* CIVILIZED ALPHA FORM 'MM/DD/YY'.  ENTER WITH ADDRESS OF 3-BYTE
* BINARY ARGUMENT IN R2 AND ADDRESS OF 8-BYTE ALPHA RECEIVER IN   R3.
         SPACE 2
VTDATED  ST    RE,VTDXIT
         SR    R0,R0
         IC    R0,0(R2)                BINARY YEAR
         MH    R0,=H'1000'             TIMES 1000
         MVC   DECDATE(2),1(R2)        ALIGN DAY ON HALF-WORD
         AH    R0,DECDATE              ADD BINARY DAY
         CVD   R0,DECDATE              CONVERT TO PACKED DECIMAL
         SPACE
         LA    R1,DECDATAD             LOAD ADDR OF ARGUMENT ADDRESS
         L     RF,VDATEDIT             LOAD SUBROUTINE ADDRESS
         BALR  RE,RF                   CALL XDATEDIT ROUTINE
         SPACE
         MVC   0(8,R3),DECDATE         DELIVER RESULT
         L     RE,VTDXIT
         BR    RE
         SPACE 3
VTDXIT   DC    F'0'
         SPACE 3
VTREFDT  EQU   *                                                    IK
         SR    R0,R0                                                IK
         IC    R0,0(R2)                BINARY YEAR                  IK
         MH    R0,=H'1000'             TIMES 1000                   IK
         MVC   DECDATE(2),1(R2)        BINARY DAY                   IK
         AH    R0,DECDATE              ADD BINARY DAY               IK
         CVD   R0,DECDATE              CONVERT TO PACKED DECIMAL    IK
         UNPK  DECDATE(5),DECDATE+5(3) CONVERT TO ALPHA             IK
         OI    DECDATE+4,X'F0'         COVER UP SIGN                IK
         MVC   0(5,R3),DECDATE         DELIVER THE RESULT           IK
         BR    RE                      RETURN                       IK
         SPACE 2
         TITLE 'DSCB HEX DUMP ROUTINE'
* THIS SUBROUTINE EDITS A DSCB IN HEX IN THREE LINES.  ENTER WITH THE
* ADDRESS OF THE DSCB IN R2 AND THE ADDRESS OF ITS DISK ADDRESS
* (MBBCCHHR) IN R3.    CHECKS TO BE SURE ALL THREE LINES WILL BE ON
* THE SAME PAGE.
         SPACE 2
DUMPDSCB ST    RE,DUMPEXIT             SAVE RETURN
         LR    R4,R2                   TEMP SAVE R2
         LA    R2,3                    TO TEST PAGE BALANCE
         BAL   RE,PAGECHEK
         LR    R2,R4
         SPACE
         MVC   PL+8(17),=C'BLK 1234.5678.90:'
         UNPK  HEXWORK(15),3(8,R3)     EDIT DISK ADDRESS OF BLOCK
         TR    HEXWORK(15),HEXEDTAB
         MVC   PL+12(4),HEXWORK
         MVC   PL+17(4),HEXWORK+4
         MVC   PL+22(2),HEXWORK+8
         LA    R3,0(R2)
         LA    R4,PL+35
         LA    R5,44
         BAL   RE,DUMPEDIT             EDIT HEX CHARS OF KEY
         MVI   PL,PRSP1                PRINT AND SPACE 1
         BAL   RE,PRINTSUB
         SPACE
         MVC   PL+8(13),=C'FORMAT N DSCB'
         MVC   PL+15(1),44(R2)         DSCB TYPE NUMBER
         OI    PL+15,X'F0'             FOR TYPE 0, IF EVER USED
         LA    R3,44(R2)
         LA    R4,PL+26
         LA    R5,48
         BAL   RE,DUMPEDIT
         MVI   PL,PRSP1
         BAL   RE,PRINTSUB
         SPACE
         LA    R3,92(R2)
         LA    R4,PL+26
         LA    R5,48
         BAL   RE,DUMPEDIT
         MVI   PL,PRSP2                SPACE 2 ON LAST LINE
         BAL   RE,PRINTSUB
         SPACE
         L     RE,DUMPEXIT
         BR    RE
         SPACE
DUMPEXIT DC    F'0'
         SPACE 4
* HEX DUMP EDIT SUBROUTINE
         SPACE
* ROUTINE TO EDIT INTO HEX IN 4-BYTE GROUPS.  'R3' IS THE SOURCE
* ADDRESS, 'R4' IS THE RECEIVER ADDRESS, AND 'R5' CONTAINS THE
* NUMBER OF BYTES TO EDIT.
         SPACE 2
DUMPEDIT LTR   R5,R5                   TEST FOR ZERO BYTES
         BCR   13,RE                   EXIT IF ZERO
         B     DUMPJOIN
         SPACE
DUMPLOOP BCT   R1,DUMPMOVE             TEST FOR 4TH BYTE
         MVI   0(R4),C' '              INSERT BLANK EVERY 4 BYTES
         LA    R4,1(R4)                INCREMENT RECEIVER ADDRESS
DUMPJOIN LA    R1,4                    BEGIN NEW 4-BYTE GROUP
         SPACE
DUMPMOVE UNPK  HEXWORK(3),0(2,R3)      EDIT ONE BYTE INTO ALPHA
         TR    HEXWORK(2),HEXEDTAB
         MVC   0(2,R4),HEXWORK
         LA    R3,1(R3)                INCREMENT SOURCE ADDR
         LA    R4,2(R4)                INCREMENT RECEIVER ADDR
         BCT   R5,DUMPLOOP             COUNT NUMBER OF BYTES EDITED
         BR    RE
         TITLE 'FIELD SCAN SUBROUTINE'
* SUBROUTINE TO READ A WORD FROM A CHARACTER STRING.  ENTER WITH 'R2'
* SET TO THE BEGINNING OF THE STRING AND 'R3' CONTAINING THE LENGTH
* OF THE STRING.  RETURNS WITH THE WORD IN 8 BYTES AT 'SCANWORD' AND
* UPDATES 'R2' AND 'R3' TO GET NEXT WORD IN NEXT CALL.
         SPACE 2
SCAN     DS    0H
         MVC   SCANWORD(8),=8C' '      BLANK OUTPUT FIELD
         LA    R4,SCANWORD
         SPACE
SCLOOP   LTR   R3,R3                   TEST FOR END OF INPUT STRING
         BCR   13,RE                   EXIT WHEN REACHED
         CLI   0(R2),C' '              BLANKS ARE IGNORED
         BE    SCANEXT
         CLI   0(R2),C','              TEST FOR COMMA (WORD SEPARATOR)
         BE    SCANDONE
         SPACE
         C     R4,=A(SCANWORD+8)       TEST FOR MAX OUTPUT LENGTH
         BNL   SCANEXT                 SKIP DELIVERY IF OVER 8
         MVC   0(1,R4),0(R2)           DELIVER CHAR TO OUTPUT WORD
         LA    R4,1(R4)                INCR OUTPUT INDEX
SCANEXT  LA    R2,1(R2)                INCR TO NEXT INPUT CHAR, AND
         BCTR  R3,0                      DECREMENT COUNT
         B     SCLOOP
         SPACE
SCANDONE LA    R2,1(R2)                INCR PAST SEPARATOR AND EXIT
         BCTR  R3,0
         BR    RE
         SPACE 2
SCANWORD DC    CL8' '
         TITLE 'CORE BLOCK ALLOCATOR'
* THIS ROUTINE IS ENTERED WITH THE SIZE OF A DESIRED BLOCK OF CORE IN
* 'R4'.    IT RETURNS WITH THE ADDRESS OF AN AVAILABLE AREA IN 'R3'.
* THE BLOCK WILL BE ALIGNED ON A FULL-WORD BOUNDARY.
         SPACE
* THESE SMALL BLOCKS ARE ALLOCATED FROM LARGE BLOCKS OBTAINED FROM THE
* SUPERVISOR VIA 'GETMAIN' CALLS.  THE FIRST WORD OF EACH LARGE BLOCK
* POINTS TO THE NEXT ONE, EXCEPT FOR THE LAST, WHICH CONTAINS A ZERO
* WORD.  THIS CHAIN IS USED BY THE 'GBRESET' ROUTINE TO RELEASE THE
* CORE.
         SPACE 2
GETBLOCK A     R4,=F'3'                ROUND SIZE TO NEXT WORD
         N     R4,ROUND4               'ROUND4 IS X'FFFFFFFC'
GBJOIN   L     R0,GBBAL                LOAD CURRENT BALANCE
         SR    R0,R4                   SUBTRACT SIZE DESIRED
         BM    NEWBLOCK                BRANCH IF NOT ENOUGH
         ST    R0,GBBAL                SAVE NEW BALANCE
         L     R3,GBCLC                LOAD ADDRESS OF BLOCK
         LR    R0,R3
         AR    R0,R4                   UPDATE ADDRESS OF AVAILABLE AREA
         ST    R0,GBCLC
         BR    RE
         SPACE
* GET A NEW BLOCK AND CHAIN.
         SPACE
NEWBLOCK GETMAIN  EC,LV=GETSIZE,A=GBNEWBL,SP=10 GET SOME STORAGE    JRB
         LTR   RF,RF                   DID WE GET IT?
         BNZ   GMFAIL                  NO, BRANCH
         L     R1,GBNEWBL              LOAD ADDRESS OF GOTTEN CORE
         L     R3,GBBASE               BASE OF CURRENT BLOCK
         ST    R1,0(R3)                CHAIN TO NEW BLOCK
         ST    R1,GBBASE               UPDATE BASE CELL
         SR    R0,R0
         ST    R0,0(R1)                ZERO CHAIN IN NEW BLOCK
         LA    R1,4(R1)                SET TO FIRST AVAILABLE BYTE
         ST    R1,GBCLC
         MVC   GBBAL(4),NEWBAL         RESET BALANCE COUNTER
         B     GBJOIN
         SPACE 3
* RESET ROUTINE TO RELEASE ALL CORE AND RESET POINTERS.
         SPACE
GBRESET  EQU   *                   SOME HERE TO FREE STORAGE        JRB
         FREEMAIN  R,SP=10         FREE ALL OF THE SUBPOOL          JRB
         SR    R0,R0
         ST    R0,GBBAL                SET ZERO BALANCE
         ST    R0,GBFIRST              SET ZERO INITIAL BLOCK ADDRESS
         LA    R0,GBFIRST
         ST    R0,GBBASE               POINT BASE BACK TO INITIAL CELL
         BR    RE
* RAN OUT OF CORE.  PRINT MESSAGE AND GO DIRECTLY TO END VOLUME ROUTINE
GMFAIL   XPRNTLIN  PWA,TEXT=GMFMSG,LENGTH=L'GMFMSG,SPB=1,SPA=1
         B     ENDVOL
GBNEWBL  DC    F'0'
GBBAL    DC    F'0'
GBCLC    DC    A(0)
GBBASE   DC    A(GBFIRST)
GBFIRST  DC    A(0)
NEWBAL   DC    A(GETSIZE-4)
         TITLE 'PRINTING ROUTINE'
* ROUTINE TO INTERFACE WITH THE PRINTING ROUTINE.  CALL WITH TEXT IN
* 133-BYTE LINE 'PL'.  FIRST BYTE CONTAINS DESIRED SPACING AFTER
* PRINTING.  'PL' IS BLANKED AFTER PRINTING.
         SPACE
PRINTSUB ST    RE,PRSEXIT              SAVE RETURN ADDRESS
         IC    R0,PL                   PICK UP SPACING AMOUNT
         SPACE
         XPRNTLIN  PWA,TEXT=PL+1,LENGTH=132,SPA=((R0))
         SPACE
         MVI   PL+1,C' '               BLANK PRINT LINE
         MVC   PL+2(131),PL+1
         L     RE,PRSEXIT              LOAD RETURN ADDRESS
         BR    RE                      RETURN TO CALLER
         SPACE
* PAGE BALANCE TEST ROUTINE.  SKIP TO HEAD-OF-FORM IF REMAINING LINES
* ON PAGE ARE LESS THAN THE NUMBER IN 'R2'.
         SPACE
PAGECHEK ST    RE,PRSEXIT              SAVE RETURN ADDRESS
         XPREJECT  PWA,COND=(LT,(R2))
         L     RE,PRSEXIT              RESTORE EXIT ADDRESS
         BR    RE                      RETURN TO CALLER
         SPACE
PRSEXIT  DS    F
         SPACE 4
*****************
* PAGE HEADINGS *
*****************
         SPACE
INITHEAD XPRLDEF  TEXT=IHTXT,LENGTH=L'IHTXT,SPB=(TOPMARGN,ATHOF),SPA=3
         SPACE
IHTXT    DC    C'VTOCLIST -- DIRECT-ACCESS VOLUME DIRECTORY LISTER'
         SPACE 3
F1HD2    XPRLDEF  TEXT=F1HTXT,LENGTH=LF1HTXT,SPB=(TOPMARGN,ATHOF),SPA=2
         SPACE
F1HD3    XPRLDEF  TEXT=F1HTXT,LENGTH=LF1HTXT,SPB=(TOPMARGN,ATHOF),SPA=3
         SPACE
F1HTXT   DC    CL20' '
F1HSER1  EQU   F1HTXT
         DC    C'TABLE OF CONTENTS FOR VOLUME SERIAL='
F1HSER2  DC    CL6' '
LF1HTXT  EQU   *-F1HTXT
         SPACE 3
F1SA     XPRLDEF  TEXT=F1SUBA,LENGTH=LF1SUBA,SPA=1,OFFSET=19
         SPACE
F1SUBA   DS    0C
         DC    C'DSNAME'
         DC    19C' '
         DC    C' REFDT  SEQ    CREDT    EXPDT    '
         DC    C'DSO RECFM BLKSZ LRECL KEY OP  '
         DC    C'TRKAL TRKUS EX SECQU T   '
LF1SUBA  EQU   *-F1SUBA
         SPACE 3
F1SB     XPRLDEF  TEXT=F1SUBB,LENGTH=LF1SUBB,SPA=2
         SPACE
F1SUBB   DS    0C
         DC    44C'-'
         DC    C' ------ ----  -------- --------  '
         DC    C'--- ----- ----- ----- --- --  '
         DC    C'----- ----- -- ----- -   '
******************************************************************
* NOTE:  UNDERLINE CHARACTERS CHANGED TO DASHES FOR PRINTABILITY.*
******************************************************************
LF1SUBB  EQU   *-F1SUBB
         SPACE
* PAGE SUB-HEADING LINES FOR TRACK MAP EDITING
         SPACE
TMHEAD   XPRLDEF  TEXT=TMHTXT,LENGTH=LTMHTXT,SPB=(TOPMARGN,ATHOF),SPA=2
         SPACE
         SPACE
TMHTXT   DC    CL20' '
TMHSER1  EQU   TMHTXT
         DC    C'TRACK ALLOCATION MAP FOR VOLUME SERIAL='
TMHSER2  DC    CL6' '
LTMHTXT  EQU   *-TMHTXT
         SPACE 3
TMSA     XPRLDEF  TEXT=TMSUBA,LENGTH=LTMSUBA,OFFSET=27,SPA=1
         SPACE
TMSUBA   DS    0C
         DC    C'FIRST TRK   LAST TRK  #TRKS  EXT  DSNAME OR USAGE'
LTMSUBA  EQU   *-TMSUBA
         SPACE 3
TMSB     XPRLDEF  TEXT=TMSUBB,LENGTH=LTMSUBB,OFFSET=27,SPA=2
         SPACE
TMSUBB   DS    0C
         DC    C'---------  ---------  -----  ---  '
         DC    44C'-'
***** ABOVE UNDERLINES ALSO CHANGED TO DASHES -- HM  **********
LTMSUBB  EQU   *-TMSUBB
         TITLE 'PRINT ROUTINE CONSTANTS'
* PRINT LINE FIELD DEFINITIONS
         SPACE 2
PL       DC    CL133' '
         SPACE 3
* PRINT LINES FOR VOLUME DESCRIPTION:
         SPACE
V1       EQU   PL
V1TYPE   EQU   V1+22
V1NOCYL  EQU   V1+45
V1TRCYL  EQU   V1+57
V1DEVTK  EQU   V1+73
V1DEVDT  EQU   V1+88
V1DEVDB  EQU   V1+102
         SPACE
V2       EQU   PL
V2DSCBCT EQU   V2+20
V2DSCBAV EQU   V2+37
V2VTEXT  EQU   V2+55
V2NUMALT EQU   V2+88
V2NXTALT EQU   V2+102
         SPACE
V3       EQU   PL
V3FRTRKS EQU   PL+18
V3FREXTS EQU   PL+34
V3FRCYLS EQU   PL+58
         SPACE
* PRINT LINES FOR FORMAT 1 DSCB DESCRIPTION:
         SPACE
F1A      EQU   PL
F1DSNAM  EQU   F1A+1
F1REFD   EQU   F1A+46
F1VOLSQ  EQU   F1A+53
F1CREDT  EQU   F1A+59
F1EXPDT  EQU   F1A+68
F1DSORG  EQU   F1A+78
F1RECFM  EQU   F1A+82
F1BLKL   EQU   F1A+88
F1LRECL  EQU   F1A+94
F1KEYL   EQU   F1A+100
F1OPTCD  EQU   F1A+104
F1TRALOC EQU   F1A+108
F1TRUSE  EQU   F1A+114
F1NOEPV  EQU   F1A+120
F1SCALO  EQU   F1A+123
F1ALCTYP EQU   F1A+129
         SPACE
* PRINT LINES FOR TRACK MAP EDITING:
         SPACE
TM1      EQU   PL
TMERROR  EQU   TM1+26
TMCCHH1  EQU   TM1+28
TMCCHH2  EQU   TM1+39
TMEXTSIZ EQU   TM1+50
TMEXTNO  EQU   TM1+57
TMDSNAM  EQU   TM1+62
         SPACE
* PRINT LINES FOR PDS DIRECTORY LISTING:
         SPACE
PDS1     EQU   PL
PDSMEMB  EQU   PDS1+12
PDSALIAS EQU   PDS1+21
PDSTTR   EQU   PDS1+23
PDSNTT   EQU   PDS1+32
PDSHEX   EQU   PDS1+35
* UNABLE TO OPEN SYSPRINT - TYPE ERROR MESSAGE AND EXIT.
PROPBAD  WTO   'VTOCLIST - UNABLE TO OPEN SYSPRINT',ROUTCDE=11      JRB
         MVI   RETCODE+3,20            SET RETURN CODE TO 20
         B     EXODUS                  EXIT
PWA      XPRDCB DDNAME=SYSPRINT
         TITLE 'EXODUS - TIME TO MAKE LIKE A HOCKEY PLAYER'
* EXODUS
         SPACE
* WHEN ALL VOLUMES ARE COMPLETED, COME HERE TO CLOSE THE PRINTER,
* TIDY UP LOOSE ENDS, AND RETURN.
         SPACE 2
EXODUS   DS    0H
         SPACE
         XPRCLOSE  PWA
         L     RF,RETCODE              INSERT RETURN CODE IN REG 15
         EOJ   RC=(15)             RETURN TO SENDER                 JRB
         TITLE 'DISASTER'
* COME HERE TO ABEND FOR CONDITIONS WHICH WERE NOT SUPPOSED TO HAPPEN,
* OR ERRORS FOR WHICH NO SPECIAL ROUTINE ARE WRITTEN.
DISASTER ABEND 100,DUMP
         TITLE 'LITERAL POOL'                                       JRB
*   COME ON IN THE WATER'S FINE, HOWEVER NOT AS MUCH FUN AS THE     JRB
*   SECRETARIAL POOL!!!!!!!                                         JRB
         LTORG ,                   LITERALS FRONT AND CENTER        JRB
* PDS DIRECTORY DATA CONTROL BLOCK
PDSDCBA  DC    A(PDSDCB)   RELOCATE THIS DCB....
DSN1PTR  DC    A(DSNJFCB)   POINTER TO DSN FROM JCL
DSORGTBA DC    A(DSORGTAB)   ADDRESSABILITY TRICK....
* DCB EXIT LIST:
JFCBADR  DS    0F
         DC    X'87'
         DC    AL3(JFCB)
DECDATE  DC    D'0'
DECTIME  DC    F'0'
DEVCHAR  DC    2F'0'
UNITTYPE EQU   DEVCHAR+3
FMT1ADDR DC    F'0'
FMT4ADDR DC    F'0'
FMT5ADDR DC    F'0'
FWORK    DC    F'0'
RETCODE  DC    F'0'
ROUND4   DC    X'FFFFFFFC'
TIOTLOC  DC    A(0)
DECDATAD DC    A(DECDATE)
VTOCREAD DC    V(XVTCREAD)         ADDRESS OF REMOTE VTOC READ RTN  JRB
VDATEDIT DC    V(XDATEDIT)         ADDRESS OF REMOTE DATE EDIT RTN  JRB
VPRNTSUB DC    V(XPRNTSUB)         ADDRESS OF REMOTE PRINT RTN      JRB
DSCOUNT  DC    H'0'
FREECYLS DC    H'0'
FREETRKS DC    H'0'
F5EXTNTS DC    H'0'
TRKA     DC    H'0'                SAVE AREA FOR TRACKS ALLOCATED   JRB
TRKU     DC    H'0'                SAVE AREA FOR TRACKS USED        JRB
HWORK    DC    H'0'
VTOCSIZE DC    H'0'
DDNAME   DC    CL8'VOLUME00'
VOLUME   DS    CL6
HEXWORK  DC    CL16' '
LASTFMT1 DC    44X'FF'
MODESW   DC    X'00'          ORIGINAL SWITCH FOR OPTIONS
MODESW1  DC    X'00'          SECOND SET OF SWITCHES
DSORGSW  DC    X'00'            SWITCH FOR TESTING DSORG
TSTDSORG DC    X'00'   FILTER FOR DSORG
         DC    CL16'0123456789ABCDEF'
HEXEDTAB EQU   *-256
* DUMMY TRACK MAP ENTRY FOR VOLUME LABEL ON TRACK 0:
TRK0MAP  DC    2F'0'
         DC    H'1'
         DC    XL2'FF00'
         DC    A(TRK0NAME)
         DC    F'0'
         TITLE 'DEVICE TYPE TABLE'
* TABLE OF DEVICE SIZE CONSTANTS, FILLED IN FROM DEVICE NAME TABLE WHEN
* DEVICE TYPE IS DETERMINED.  THE FOUR CONSTANTS FC1, FC2, FH1, AND FH2
* ARE SCALING FACTORS TO BE APPLIED TO A FULL DIRECT-ACCESS ADDRESS OF
* THE FORM 'CCHH'.  EACH CONSTANT IS THE NUMBER OF TRACKS REPRESENTED
* BY ONE UNIT OF THE CORRESPONDING ADDRESS BYTE.  'FMAXTT' IS THE
* MAXIMUM RELATIVE TRACK ADDRESS FOR THE DEVICE, AND 'FCYL' IS THE
* NUMBER OF TRACKS PER CYLINDER, AS APPLIED TO THE CYLINDER COUNT IN A
* FORMAT 5 EXTENT ENTRY.  'DEVNAMAD' IS THE ADDRESS OF THE DEVICE NAME
* IN THE DEVICE NAME TABLE.
DEVNAMAD DC    A(0)
FC1      DC    H'0'                NUMBER TRACKS/CYL*256            JRB
FC2      DC    H'0'                NUMBER TRACKS/CYL                JRB
FH1      DC    H'0'                0                                JRB
FH2      DC    H'0'                1                                JRB
FCYL     DC    H'0'                NUMBER TRACKS/CYL                JRB
FMAXTT   DC    H'0'                NUMBER TRACKS/CYL*NUMBER CYL     JRB
* DEVICE NAME TABLE, TO PROVIDE SPECIFIC INFORMATION FOR EACH DEVICE.
* THE ORDER OF THE HALF-WORD CONSTANTS MUST CORRESPOND TO "FC1..."
* ABOVE.
         PRINT DATA                REQUEST ALL DATA BE PRINTED      JRB
DEVNAMES DS    0H
D3330    DC    AL1(DEV3330)
         DC    CL15'3330 DISK PACK'
         DC    Y((19*256),19,0,1,19,7676)   3330 DEFINITION        HM
DEVNAMSZ EQU   *-DEVNAMES
*******  SPECIAL 3330-11 DEFINITION-MUST BE CONTIGOUS TO 3330-1 ***  HM
D333011  DC    AL1(DEV33301)       DEVTYPR                         HM
         DC    CL15'3330-11 DISK'    HEADER ID DEVICE NAME           HM
         DC    Y((19*256),19,0,1,19,15352)  3330-11 DEFINITION       HM
D3380    DC    AL1(DEV3380)        DEVICE TYPE FOR 3380              IK
         DC    CL15'3380 DISK FILE'                                  IK
         DC    Y((15*256),15,0,1,15,(15*885)) DEVICE CHARACTERISTIC  IK
D3350    DC    AL1(DEV3350)        DEVICE TYPE FOR 3350             JRB
         DC    CL15'3350 DISK FILE'                                 JRB
         DC    Y((30*256),30,0,1,30,(30*555)) DEVICE CHARACTERISTIC JRB
D33401   DC    AL1(DEV3340)        35MB 3340                        JRB
         DC    CL15'3340-35MB DISK'                                 JRB
         DC    Y((12*256),12,0,1,12,(12*348)) DEVICE CHARACTERISTIC JRB
D2301    DC    AL1(DEV2301)
         DC    CL15'2301 DRUM'
         DC    H'0,0,0,1,8,200'
D2302    DC    AL1(DEV2302)
         DC    CL15'2302 DISK FILE'
         DC    H'0,46,0,1,46,11500'
D2303    DC    AL1(DEV2303)
         DC    CL15'2303 DRUM'
         DC    H'0,10,0,1,10,800'
D23051   DC    AL1(DEV23051)                                       HM
         DC    CL15'2305-1 DRUM'                                   HM
         DC    H'0,8,0,1,8,384'                                    HM
D23052   DC    AL1(DEV23052)
         DC    CL15'2305-2 DRUM'                                   HM
         DC    H'0,8,0,1,8,768'
D2311    DC    AL1(DEV2311)
         DC    CL15'2311 DISK PACK'
         DC    H'0,10,0,1,10,2000'
D2314    DC    AL1(DEV2314)
         DC    CL15'2314 DISK PACK'
         DC    H'0,20,0,1,20,4000'
D2321    DC    AL1(DEV2321)
         DC    CL15'2321 DATA CELL'
         DC    H'1000,100,20,1,20,19600'
DEVNAMOB DC    X'00'                   OBJECT FOR LOOKUP
UNKNOWN  DC    C'UNKNOWN'
         PRINT NODATA              STOP DATA FROM PRINTING          JRB
         TITLE 'WORK AREAS NOT COVERED BY BASE REGISTERS'
         ORG   VTOCLIST+8192           KEEP US HONEST ABOUT BASE REG
* BUFFER FOR JOB FILE CONTROL BLOCK:
         DS    0D
JFCB     DS    CL176
* PDS DIRECTORY BLOCK BUFFER:
PDSBUF   DS    1D              KEY
PDSLRECL DS    1H              LOGICAL RECORD LENGTH
PDSDATA  DS    CL254           DATA
* WORK AREA FOR 'OBTAIN' MACRO:
         ORG   PDSBUF                  OVERLAPS PDS DIRECTORY BUFFER
OBWORK   DS    0D                      'OBTAIN' WORK AREA
         DS    350C
*************************************************************
*   PDSDCB RELOCATED HERE TO ALLOW FOR MORE SPACE WITHIN    *
*   THE FIRST @ BASE REGISTER AREA....                      *
*************************************************************
         SPACE
PDSDCB   DCB   DSORG=PS,                                               X
               MACRF=R,                                                X
               DDNAME=VOLUME01,                                        X
               DEVD=DA,                                                X
               RECFM=F,                                                X
               KEYLEN=8,                                               X
               BLKSIZE=256,                                            X
               EODAD=PDSEODAD,                                         X
               SYNAD=PDSSYNAD,                                         X
               EXLST=JFCBADR
         SPACE 2
* MISCELLANEOUS.
         SPACE
DSNJFCB  DS    CL44
TRK0NAME DC    CL44'VOLUME LABEL (VOL1)'
VTOCNAME DC    CL44'VOLUME TABLE OF CONTENTS **VTOC**VTOC**VTOC*'
REVMSG   DC    C'VERSION 3.3, 9 SEPTEMBER 1978 NOW SUPPORTS VSAM DSORG C
                (SANTA FE INTERNATIONAL)'                           IK
DS5WARN  DC    C'*******WARNING--DOS FLAG IS ON; FORMAT 5 DSCB''S MAY NX
               OT REFLECT TRUE STATUS OF AVAILABLE TRACKS'
GMFMSG   DC    C'*******INSUFFICIENT CORE TO HOLD ENTIRE VTOC; GOING ONX
                TO NEXT VOLUME'
         SPACE 3
DSORGTAB DS    0H
         DC    C'IS',AL1(ISDSORG)
         DC    C'DA',AL1(DADSORG)
         DC    C'PS',AL1(PSDSORG)
         DC    C'PO',AL1(PODSORG)
         DC    C'VS',AL1(VSDSORG)  VSAM IN 2ND BYTE OF DSORG        JRB
         DC    C'U ',AL1(X'01')
DSORGEND EQU   ((*-DSORGTAB)/3)
         TITLE 'CATALOGUE READ ROUTINE FOR CATALOGUE STATISTICS'
CATLGCK  SETREG R8,ID=NO,BASE=CATLGCK  GET BASE AND OTHER GOODIES   JRB
READVICE MVC   TTR,=X'000001'               *ADDR OF FIRST BLOCK
         LOCATE INDEXBLK   READ 1ST BLOCK OF CATALOG
         LTR   RF,RF               WAS THE READ GOOD?               JRB
         BZ    CATLGCK2            YES CONTINUE                     JRB
         CVD   RF,BLKSUSED         GET RETURN CODE IN DECIMAL       JRB
         UNPK  BLKSUSED(5),BLKSUSED+6(3) UNPACK RC (FUNNY UNPK)     JRB
         LA    R1,F1DSORG-1        POINT TO PRINT LINE SPACE        JRB
         MVC   0(17,R1),=C'READ ERROR RC=XXX' PUT MSG IN LINE       JRB
         MVC   14(3,R1),BLKSUSED   PUT RC IN MESSAGE                JRB
         B     CATLGCK3            JUST RETURN W/ERROR              JRB
CATLGCK2 LA    R7,BLKAREA+2           *POINT TO V.I.C.E.
         USING DS4,R9
         L     R9,FMT4ADDR     POINT AT VOLUME DESCRIPTION
         SR    R3,R3   CLEAR WORK REG
         IC    R3,DS4DEVDB   GET NUMBER OF DIRECTORY BLOCKS/TRACK
         LH    R5,16(R7)             TT (FROM TTR) OF 1ST AVAIL BLOCK
         MR    R4,R3     TOTAL NUMBER OF BLOCKS IN R5 (R4+1)
*   R4 IS CLEARED TO ZERO BY ABOVE -- PLEASE MAKE A NOTE...
         IC    R4,18(R7)               *R OF 1ST AVAILABLE BLK
         AR    R5,R4                        *TOTAL NO OF BLKS USED+1
         BCTR  R5,0                          *DECREMENT BY ONE
         CVD   R5,BLKSUSED
         OI    BLKSUSED+7,X'0F'             *CHANGE SIGN
         UNPK  F1DSORG+9(4),BLKSUSED    *MOVE BLKS USED TO PRINT
         MVC   F1DSORG-1(10),=C'BLKS USED='
         MVC   F1DSORG+13(2),=8C' ' BLANK OUT MIDDLE GROUND
* STATUS: R5=BLKS USED, R4=R NO.,R3=DS4DEVDB
         LH    R2,12(R7)               *LAST TT OF CATALOG
*  NOTE THAT R4 IS ZEROES EXCEPT FOR LAST BYTE
         IC    R4,14(R7)               *LAST R
         MR    R2,R2       R3 WILL HAVE TOT NO. OF BLOCKS
*  NOTE: MR OPERATES ON R1+1 AND R2, GIVING PRODUCT IN R1+R2 COMBINED
         AR    R4,R3        *TOTAL NO OF BLOCKS IN CATLG
         SR    R4,R5                        *BLKS LEFT
         CVD   R4,BLKSUSED
         OI    BLKSUSED+7,X'0F'             *CHANGE SIGN
         MVC   F1OPTCD-10(10),=C'BLKS AVAL='
         UNPK  F1OPTCD(4),BLKSUSED   *MOVE BLKS LEFT TO PRINT
CATLGCK3 EOJ   RC=(15)             RETURN TO SENDER W/RC            JRB
BLKSUSED DC    D'0'
INDEXBLK CAMLST BLOCK,TTR,VOLUME,BLKAREA
         DS    0H
TTR      DS    CL3
BLKAREA  DS    0D
         DS    265C
         LTORG ,                   GET LITERALS FOR THIS RTN        JRB
ENDPGM   DS    C              INDICATE WHERE IT ALL ENDS...         JRB
 TITLE 'DIRECT-ACCESS DIRECTORY LISTER                  DUMMY SECTIONS'
* DUMMY SECTION TO DEFINE TRACK MAP ENTRY
         SPACE 2
*              *************************
*              *                       *
*            0 * ADDRESS OF NEXT ENTRY *
*              *                       *
*              *************************
*              *                       *
*            4 *        CC HH 1        *
*              *                       *
*              *************************
*              *                       *
*            8 *        CC HH 2        *
*              *                       *
*              *************************
*              *           *     *     *
*           12 * NUMB TRKS * EXT * NU  *
*              *           *     *     *
*              *************************
*              *                       *
*           16 *   ADDRESS OF DSNAME   *
*              *                       *
*              *************************
*              *           *           *
*           20 *  TTREL 1  *  TTREL 2  *
*              *           *           *
*              *************************
         SPACE 2
MB       DSECT
MBCHAIN  DS    F
MBCCHH1  DS    F
MBCCHH2  DS    F
MBNTRKS  DS    H
MBEXT    DS    CL1
         DS    CL1
MBNAME   DS    F
MBTTREL1 DS    H
MBTTREL2 DS    H
         SPACE
MBSIZE   EQU   *-MB
         SPACE
FBCHAIN  EQU   MBCHAIN-MB
FBCCHH1  EQU   MBCCHH1-MB
FBCCHH2  EQU   MBCCHH2-MB
FBNTRKS  EQU   MBNTRKS-MB
FBEXT    EQU   MBEXT-MB
FBNAME   EQU   MBNAME-MB
FBTTREL1 EQU   MBTTREL1-MB
FBTTREL2 EQU   MBTTREL2-MB
         EJECT
* DUMMY SECTION TO DEFINE PDS DIRECTORY ITEM
         SPACE 2
*              *************************
*              *                       *
*            0 *                       *
*              *      MEMBER NAME      *
*            4 *                       *
*              *                       *
*              *************************
*              *                 *     *
*            8 *       TT R      *  C  *
*              *                 *     *
*              *************************
*              *                       *
*           12 *       USER DATA       *
*            . *                       *
*            . *      0-62 BYTES       *
*            . *                       *
*            . *           *************
*            . *           *
*           72 *           *
*              *           *
*              *************
         SPACE 2
DIRBLOCK DSECT
         SPACE
DIRNAME  DS    CL8
DIRTTR   DS    CL3
DIRC     DS    CL1
DIRUDATA DS    CL62
         TITLE 'DSCB DSECTS'
* FORMAT 1 DSCB:
         SPACE
DS1      DSECT
         IECSDSL1  1
DS1FDAD  DS    CL8
DS1CHAIN DS    F
DS1NXTF1 DS    F
         SPACE
DS1SIZE  EQU   *-DS1
         SPACE
FM1NXTF1 EQU   DS1NXTF1-DS1
FM1DSNAM EQU   DS1DSNAM-DS1
         EJECT
* FORMAT 2 DSCB:
         SPACE
DS2      DSECT
         IECSDSL1  2
DS2FDAD  DS    CL8
         SPACE
DS2SIZE  EQU   *-DS2
         EJECT
* FORMAT 3 DSCB:
         SPACE
DS3      DSECT
         IECSDSL1  3
DS3FDAD  DS    CL8
DS3CHAIN DS    F
         SPACE
DS3SIZE  EQU   *-DS3
         EJECT
* FORMAT 4 DSCB:
         SPACE
DS4      DSECT
DS4DSNAM DS    11F
         IECSDSL1  4
DS4FDAD  DS    CL8
*DS4AMTIM EQU   DS4DEVDB+1,8,C'X'  VSAM TIME STAMP                  JRB
*DS4VSIND EQU   DS4AMTIM+8,1,C'X'  VSAM INDICATORS                  JRB
*DS4VSCRA EQU   DS4VSIND+1,2,C'X'  TTR FOR CATALOG RECOVERY AREA    JRB
*DS4R2TIM EQU   DS4VSCRA+2,8,C'X'  VOLUME/CATALOG MATCH TIME STAMP  JRB
         SPACE
DS4SIZE  EQU   *-DS4
         EJECT
* FORMAT 5 DSCB:
         SPACE
DS5      DSECT
         IECSDSL1  5
DS5FDAD  DS    CL8
DS5CHAIN DS    F
         SPACE
DS5SIZE  EQU   *-DS5
         TITLE 'MORE DSECTS'
         DCBD  DSORG=PS,DEVD=DA
         EJECT
* JOB FILE CONTROL BLOCK DUMMY SECTION
         SPACE 2
JFDUMMY  DSECT
         IEFJFCBN
         END   VTOCLIST
