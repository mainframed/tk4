         TITLE 'SYSSORT - GENERAL ASCENDING CORE SORT'
SYSSORT  START 0
*
*              R E G I S T E R   E Q U A T E S
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
*        R E G I S T E R   U S A G E
*
*        R0 - NOT USED
*        R1 - SPAN BETWEEN COMPARES AND SWAPS
*        R2 - FIRST SWAP ADDRESS
*        R3 - SECOND SWAP ADDRESS
*        R4 - FIRST COMPARE ADDRESS
*        R5 - SECOND COMPARE ADDRESS
*        R6 - LENGTH TO BE SWAPPED FOR EXECUTE OF XORS
*        R7 - FIRST ADDRESS OF TABLE
*        R8 - LENGTH OF A TABLE ENTRY
*        R9 - ADDRESS OF LAST BYTE IN TABLE
*        R10 - KEY OFFSET
*        R11 - KEY LENGTH
*        R12 - UNUSED
*        R13 - SAVE AREA POINTER
*        R14 - UNUSED
*        R15 - BASE REGISTER
         EJECT
         USING *,R15
         STM   R14,R12,12(R13)          SAVE CALLER REGS
         SPACE
         LM    R7,R11,0(R1)             LOAD ARGUMENT LIST
         L     R8,0(R8)                 LOAD LENGTH OF TABLE ENTRY
         LR    R6,R8                    LOAD R6 FOR XOR LENGTH
         BCTR  R6,0                     DROP BY 1
         LR    R3,R8                    LOAD FOR MULTIPLY
         M     R2,0(R9)                 GET LAST ENTRY REL TO ZERO
         BCTR  R3,0                     DROP TO GET LAST ADDRESS
         LA    R9,0(R3,R7)              GET LAST ENTRY END OF TAB
         L     R10,0(R10)               LOAD KEY OFFSET
         BCTR  R10,0                    DECREASE BY 1
         L     R11,0(R11)               LOAD KEY LENGTH
         BCTR  R11,0                    DROP BY 1
         LR    R1,R8                    LOAD LENGTH INTO R1
         SPACE
POWER    EQU   *
         CR    R1,R3                    TOO BIG?
         BH    BINCHOP                  YES - START SORT
         AR    R1,R1                    DOUBLE
         B     POWER
         SPACE
BINCHOP  EQU   *
         SRA   R1,1                     DIVIDE BY 2
         CR    R1,R8                    LESS THAT 1 LENGTH?
         BL    RETURN                   YES - GET OUT
         LR    R2,R7                    LOAD START
         SR    R2,R8                    DECREASE FOR FIRST TIME
         LA    R3,0(R1,R2)              GET DISPLACED ADDRESS
         SPACE
BUMPUP   EQU   *
         BXH   R3,R8,BINCHOP            BRANCH IF PAST END
         AR    R2,R8                    ADD DISPLACEMENT
         SPACE
COMPARE  EQU   *
         LA    R4,0(R2,R10)             GET DISPLACED ADDR FOR CMPR
         LA    R5,0(R3,R10)
         EX    R11,XCOMPARE             DO THE COMPARE
         BNH   BUMPUP                   IF IN SEQ, DO ANOTHER
         EX    R6,XCLSVOR1              SWAP
         EX    R6,XCLSVOR2                   PLACES
         EX    R6,XCLSVOR1                          USING XORS
         SR    R2,R1                    DROP BACK A SPAN
         SR    R3,R1
         CR    R2,R7                    DROPPED TOO FAR?
         BNL   COMPARE                  NO - SEE IF XOR AGAIN
         AR    R2,R1                    GO BACK UP
         AR    R3,R1
         B     BUMPUP
         SPACE
RETURN   EQU   *
         LM    R14,R12,12(R13)          LOAD CALLER REGS
         XR    R15,R15                  CLEAR RETURN CODE
         BR    R14                      GOOD-BYE
         SPACE
         DS    0F
XCOMPARE CLC   0(*-*,R4),0(R5)          COMPARE INSTR FOR EX
XCLSVOR1 XC    0(*-*,R2),0(R3)          INSTR FOR XOR #1 AND #3
XCLSVOR2 XC    0(*-*,R3),0(R2)          INSTR FOR XOR #2
         END
