FULSCR   CSECT                         DEFINE CSECT
***********************************************************************
*
*    THIS ROUTINE PERFORMS FULL SCREEN 3270 I/O.
*
*    PARMS: MODE     - A 1 BYTE MODE INDICATOR:
*                      'I' - INITIALIZE, CLEAR SCREEN, GET TERM SIZE
*                      'P' - OUTPUT SCREEN, LEAVE INPUT INHIBITED
*                      'X' - OUTPUT SCREEN, READ SCREEN
*                      ANYTHING ELSE - CLEAR SCREEN, TERMINATE
*           SCREEN   - AREA REPRESENTING THE SCREEN.  FOR EXAMPLE AREA
*                      WOULD BE 2560 BYTES TO REPRESENT AN 80X32
*                      SCREEN.  EACH BYTE IN SCREEN IS EITHER AN
*                      ATTRIBUTE BYTE OR A DISPLAYABLE CHARACTER.
*                      AN ATTRIBUTE BYTE DEFINES THE START OF A FIELD
*                      AND DETERMINES THE PROPERTIES OF THE FIELD.  THE
*                      FIELD BEGINS WITH THE BYTE IMMEDIATELY FOLLOWING
*                      THE ATTRIBUTE BYTE AND CONTINUES UNTIL ANOTHER
*                      ATTRIBUTE BYTE IS ENCOUNTERED.  ATTRIBUTE BYTES
*                      ARE DIFFERENTIATED FROM DISPLAY CHARACTERS BY
*                      THE FIRST TWO BITS OF THE BYTE WHICH ARE ZERO.
*                      THE COMPLETE DEFINITION OF THE BITS IN AN
*                      ATTRIBUTE BYTE IS:
*                      00.. ....  ATTRIBUTE BYTE, ANYTHING ELSE IS
*                                 CONSIDERED A DISPLAYABLE CHARACTER
*                      ..0. ....  UNPROTECTED FIELD
*                      ..1. ....  PROTECTED FIELD
*                      ...0 0...  NO SPECIAL HIGHLIGHTING
*                      ...0 1...  BLINKING FIELD
*                      ...1 0...  REVERSE VIDEO
*                      ...1 1...  UNDERSCORE
*                      .... .000  NON-DISPLAY FIELD
*                      .... .001  BLUE
*                      .... .010  RED (INTENSIFIED IF 3278)
*                      .... .011  PINK
*                      .... .100  GREEN
*                      .... .101  TURQUOISE
*                      .... .110  YELLOW
*                      .... .111  WHITE (INTENSIFIED IF 3278)
*                      THE FIRST BYTE OF SCREEN MUST BE AN ATTRIBUTE
*                      BYTE.
*           LINES    - HALFWORD INTEGER SCREEN SIZE IN BYTES
*                      (SET BY MODE I, USED BY OTHER MODES)
*           ROW      - HALFWORD INTEGER
*           COLUMN   - HALFWORD INTEGER
*                      ROW & COLUMN ARE USED TO POSITION THE CURSOR.
*                      IF ROW IS ZERO, THE CURSOR IS POSITIONED TO THE
*                      FIRST UNPROTECTED FIELD.
*           ALARM    - A 1 BYTE FLAG, IF 'A' THE ALARM WILL BE SOUNDED
*           UPPER    - A 1 BYTE FLAG, IF 'U' LOWER CASE WILL BE
*                      TRANSLATED TO UPPER CASE ON INPUT
*           KEY      - A HALFWORD INTEGER INDICATING THE KEY PRESSED.
*                      0 = ENTER, 1-24 = CORRESPONDING PF KEY,
*                      99 = ANYTHING ELSE.
*
*    INPUT DDNAMES:
*       *NONE*
*
*    OUTPUT DDNAMES:
*       *NONE*
*
*    EXTERNAL REFERENCES:
*       *NONE*
*
*    DATE WRITTEN:       06/12/81
*    DATE LAST MODIFIED: 10/20/81
*
***********************************************************************
*
*     REGISTER EQUATES AND USAGE
*
R0       EQU   0
R1       EQU   1                       PTR TO LINK TO INTERNAL ROUTINES
R2       EQU   2                       WORK
R3       EQU   3                       WORK
R4       EQU   4                       WORK
R5       EQU   5                       WORK
R6       EQU   6                       WORK
R7       EQU   7                       WORK
R8       EQU   8                       WORK
R9       EQU   9                       PTR TO COPYSCRN
R10      EQU   10                      PTR TO IOAREA
R11      EQU   11                      PTR TO SCREEN PARM
R12      EQU   12                      BASE REG
R13      EQU   13                      SAVE AREA ADDR
R14      EQU   14                      RETURN ADDR
R15      EQU   15                      RETURN CODE
*
*     HOUSEKEEPING
*
         SAVE  (14,12),,*              SAVE REGISTERS
         LR    R12,R15                 SET REG 12 TO ENTRY ADDR
         USING FULSCR,R12              DEFINE BASE REG AND ADDR
         ST    R13,SAVEAREA+4          STORE SAVE AREA ADDR
         LR    R2,R13                  ALSO STASH IT TEMPORARILY
         LA    R13,SAVEAREA            LOAD ADDR OF MY SAVE AREA
         ST    R13,8(R2)               STORE IT IN CALLING SAVE AREA
         MVC   PARMSTRT(PARMLEN),0(R1) SAVE PARAMETER ADDRESSES
*
*     BEGIN WORK
*
         LA    R9,COPYSCRN
         USING COPYSCRN,R9
         LR    R10,R9
         A     R10,=F'4096'
         USING IOAREA,R10
         L     R11,SCREEN              LOAD ADDR OF SCREEN   PARM
         L     R2,UPPER                LOAD ADDR OF UPPER    PARM
         MVC   TRANFLAG,0(R2)          SAVE THE FLAG
         L     R2,MODE                 LOAD ADDR OF MODE     PARM
*
*     MODE = INITIALIZE
*
         CLI   0(R2),C'I'              INITIALIZE?
         BNE   NOTMODEI
         GTSIZE ,                      GET THE TERMINAL SIZE
         L     R2,LINES                LOAD ADDR OF LINES    PARM
         STH   R0,0(R2)                RETURN VALUE TO CALLING PROGRAM
         LTR   R0,R0                   CHECK IT
         BZ    RETURN                  IF ZERO, NO NEED TO CONTINUE
         STFSMODE ON,INITIAL=YES       TELL VTAM WE'RE FULL SCREEN
         LR    R2,R9                   POINT TO COPYSCRN
         L     R3,=F'4096'             LOAD LENGTH OF COPYSCRN AREA
         LA    R4,*                    R4 JUST NEEDS ANY VALID  ADDRESS
         SLR   R5,R5                   R5=A HEX ZERO AND ZERO LENGTH
         MVCL  R2,R4                   ZERO OUT R3 BYTES STARTING AT R2
         GTTERM PRMSZE=PRIMSIZE,ATTRIB=TERMATRB  GET TERMINAL INFO
         TPUT  CLEAR,LCLEAR,FULLSCR    CLEAR THE SCREEN
         B     RETURN
NOTMODEI EQU   *
*
*     MODE = OUTPUT
*
         CLI   0(R2),C'P'              OUTPUT?
         BNE   NOTMODEP
         BAL   R14,PUTTERM             GO OUTPUT THE TERMINAL
         B     RETURN
NOTMODEP EQU   *
*
*     MODE = OUTPUT AND READ
*
         CLI   0(R2),C'X'              OUTPUT AND READ?
         BNE   NOTMODEX
REPEAT   BAL   R14,PUTTERM             GO OUTPUT THE TERMINAL
         BAL   R14,GETTERM             GO READ THE TERMINAL
         CLI   SHORT,ON                WAS IT A SHORT READ?
         BE    REPEAT                  YES, START OVER
         B     RETURN
NOTMODEX EQU   *
*
*     MODE = TERMINATE
*
         STLINENO LINE=1               CLEAR THE SCREEN
         STFSMODE OFF                  TELL VTAM WE'RE THROUGH
         B     RETURN
*
*     ROUTINE TO OUTPUT SCREEN
*
*     LOCAL REGISTER USE:
*
*     R4  - PTR TO CURRENT BYTE IN SCREEN
*     R5  - BYTES LEFT IN SCREEN
*     R6  - PTR TO CURRENT BYTE IN COPYSCRN
*     R7  - BYTES LEFT IN COPYSCRN
*     R8  - PTR TO NEXT BYTE TO USE IN IOAREA
PUTTERM  EQU   *
         LR    R8,R10                  POINT TO FIRST BYTE IN IOAREA
         TM    0(R11),ATTRIB           IS FIRST BYTE ATTRIB?
         BZ    OKFIRST                 YES, WE'RE OK
BADFIRST MVI   0(R11),B'00100111'      PROT, DEFAULT, WHITE
OKFIRST  EQU   *
         MVI   0(R8),X'F1'             JUST AN ORDINARY WRITE
         LA    R8,1(R8)                POINT TO NEXT AVAIL BYTE
         MVI   0(R8),X'C3'             SET NORMAL WCC
         L     R2,MODE                 LOAD ADDR OF MODE     PARM
         CLI   0(R2),C'P'              JUST OUTPUT SCREEN?
         BNE   AROUND1
         NI    0(R8),X'FD'             TURN OFF BIT IN WCC
AROUND1  EQU   *
         L     R2,ALARM                LOAD ADDR OF ALARM    PARM
         CLI   0(R2),C'A'              FLAG SET?
         BNE   AROUND2
         OI    0(R8),X'04'             TURN ON ALARM BIT IN WCC
AROUND2  EQU   *
         LA    R8,1(R8)                POINT TO NEXT AVAIL BYTE
*
*     PREPARE TO SEARCH FOR CHANGED BYTES
*
         LR    R4,R11                  POINT TO SCREEN
         L     R5,LINES                LOAD ADDR OF LINES    PARM
         LH    R5,0(R5)                LOAD # OF LINES
         MH    R5,=H'80'               COMPUTE # OF BYTES
         LR    R6,R9                   POINT TO COPYSCRN
         LR    R7,R5                   LENGTH IS SAME
*
*     FIND THE NEXT UNEQUAL BYTE
*
SEARCH   CLCL  R4,R6
         BE    COMPARED
*
*     COMPUTE AND SAVE THE CORRESPONDING BUFFER ADDRESS
*
         LR    R2,R4                   COPY ADDR OF BAD BYTE
         SR    R2,R11                  COMPUTE OFFSET INTO SCREEN
         BAL   R1,COMPADDR             GO FIGURE OUT THE FUNNY ADDR
         MVI   0(R8),SBA               STUFF IN SBA
         LA    R8,1(R8)                POINT TO NEXT BYTE IN IOAREA
         STH   R2,0(R8)                STUFF IN ADDRESS
         LA    R8,2(R8)                POINT TO NEXT BYTE IN IOAREA
*
*     CHECK FOR ATTRIBUTE BYTE
*
         TM    0(R4),ATTRIB            IS IT ATTRIBUTE BYTE?
         BNZ   NOTATTR1                BRANCH IF NOT
*
*     IT IS AN ATTRIBUTE - CONVERT IT
*
         XR    R2,R2                   CLEAR R2
         IC    R2,0(R4)                LOAD ATTRIBUTE BYTE
         N     R2,=X'00000007'         JUST WANT LOW 3 BITS - COLOR
         BNZ   CANSEE                  IF NOT ZERO, IT'S A REAL COLOR
         MVI   ATRIBYTE,B'01001100'    MAKE IT A NONDISPLAY INPUT FIELD
         B     HAVEATTR                WE'RE THROUGH
CANSEE   MVI   ATRIBYTE,B'11000100'    UNPROTECTED, NORMAL INTENSITY
         TM    0(R4),B'00100000'       PROTECTED FIELD?
         BZ    NOTPROT                 NO
         OI    ATRIBYTE,B'00100000'    TURN ON PROTECTED BIT
NOTPROT  CH    R2,=H'2'                WAS IT RED?
         BE    BRIGHT                  YES, MAKE IT INTENSIFIED
         CH    R2,=H'7'                WAS IT WHITE?
         BE    BRIGHT                  YES, MAKE IT INTENSIFIED
         B     HAVEATTR                WE'RE THROUGH
BRIGHT   XI    ATRIBYTE,B'00000100'    TURN OFF THIS BIT
         OI    ATRIBYTE,B'00001000'    AND TURN THIS ONE ON
HAVEATTR EQU   *
         TM    TERMATRB+3,X'01'        EXTENDED DATA STREAM SUPPORTED?
         BO    EXSTREAM                YES, BUILD 8 BYTE STREAM
         MVI   0(R8),SF                PLANT A START FIELD
         MVC   1(1,R8),ATRIBYTE        MOVE IN THE FIELD ATTR BYTE
         LA    R8,2(R8)                POINT TO NEXT BYTE IN IOAREA
         MVC   0(1,R6),0(R4)           UPDATE COPYSCRN
         B     CHECK1                  GO CHECK THE NEXT BYTE
EXSTREAM EQU   *
         MVI   0(R8),SFE               PLANT A START FIELD EXTENDED
         MVI   1(R8),3                 THREE TYPE/VALUE PAIRS
         MVI   2(R8),FIELDATR          FIELD ATTRIBUTE
         MVC   3(1,R8),ATRIBYTE        MOVE IN THE FIELD ATTR BYTE
         MVI   4(R8),EXTENDED          EXTENDED HIGHLIGHTING
         XR    R2,R2                   CLEAR R2
         IC    R2,0(R4)                GET ATTRIBUTE BYTE
         SRL   R2,3                    LOP OFF COLOR BITS
         N     R2,=X'00000003'         JUST WANT LOW 2 BITS
         BZ    DEFAULT1                IF ZERO, LEAVE IT ALONE
         O     R2,=X'000000F0'         THIS NIBBLE MUST BE ON
DEFAULT1 STC   R2,5(R8)                SAVE THE RESULT
         CLI   5(R8),X'F3'             WAS IT UNDERSCORE?
         BNE   NOTUS
         MVI   5(R8),X'F4'             SHOULD REALLY BE A X'F4'
NOTUS    MVI   6(R8),COLOR             COLOR
         XR    R2,R2                   CLEAR R2
         IC    R2,0(R4)                GET COLOR
         N     R2,=X'00000007'         JUST WANT LOW 3 BITS
         BZ    LEAVE                   IF ZERO, LEAVE IT ALONE
         O     R2,=X'000000F0'         THIS NIBBLE MUST BE ON
LEAVE    STC   R2,7(R8)                SAVE THE RESULT
BUILT    LA    R8,8(R8)                POINT TO NEXT BYTE IN IOAREA
         MVC   0(1,R6),0(R4)           UPDATE COPYSCRN
         B     CHECK1                  GO CHECK THE NEXT BYTE
NOTATTR1 EQU   *
*
*     IT ISNT AN ATTRIBUTE - JUST OUTPUT IT
*
         MVC   0(1,R8),0(R4)           STUFF IT IN IOAREA
         LA    R8,1(R8)                POINT TO NEXT BYTE IN IOAREA
         MVC   0(1,R6),0(R4)           UPDATE COPYSCRN
*
*     NOW CHECK THE NEXT BYTE
*
CHECK1   EQU   *
         LA    R4,1(R4)                POINT TO NEXT BYTE IN SCREEN
         BCT   R5,CONTINUE             DECREMENT BYTE COUNT
*                                      AND CONTINUE IF NOT ZERO
         B     COMPARED                WE'RE THROUGH
CONTINUE LA    R6,1(R6)                POINT TO NEXT BYTE IN COPYSCRN
         BCTR  R7,0                    DECREMENT BYTE COUNT
         TM    0(R4),ATTRIB            IS IT ATTRIBUTE BYTE?
         BNZ   NOTATTR2                BRANCH IF NOT
         B     SEARCH                  IT IS AN ATTRIBUTE, END OF FIELD
NOTATTR2 EQU   *
         CLC   0(1,R4),0(R6)           ARE BYTES EQUAL?
         BE    SEARCH                  IF SO, GO FIND THE NEXT MISMATCH
         MVC   0(1,R8),0(R4)           OUTPUT THE BYTE
         LA    R8,1(R8)                POINT TO NEXT BYTE IN IOAREA
         MVC   0(1,R6),0(R4)           UPDATE COPYSCRN
         B     CHECK1                  GO CHECK NEXT BYTE
*
*     NOW PUT THE CURSOR IN ITS PLACE
*
COMPARED EQU   *
         SLR   R2,R2                   ZERO R2
         L     R2,COLUMN               LOAD ADDR OF COLUMN   PARM
         LH    R2,0(R2)                LOAD VALUE OF COLUMN  PARM
         LTR   R2,R2                   TEST IT
         BNP   FIELD#1                 IF IT'S <=0, JUST USE 1ST FIELD
         CH    R2,=H'80'               MORE THAN 80?
         BH    FIELD#1                 IF SO, JUST USE 1ST FIELD
         BCTR  R2,0                    MINUS 1
         L     R3,ROW                  LOAD ADDR OF ROW      PARM
         LH    R3,0(R3)                LOAD VALUE OF ROW     PARM
         LTR   R3,R3                   TEST IT
         BNP   FIELD#1                 IF IT'S <=0, JUST USE 1ST FIELD
         CH    R3,=H'48'               MORE THAN 48?
         BH    FIELD#1                 IF SO, JUST USE 1ST FIELD
         BCTR  R3,0                    MINUS 1
         MH    R3,=H'80'               TIMES 80
         AR    R2,R3                   NOW WE HAVE OFFSET
         BAL   R1,COMPADDR             GO FIGURE OUT THE FUNNY ADDR
         MVI   0(R8),SBA               STUFF IN SBA
         LA    R8,1(R8)                POINT TO NEXT BYTE IN IOAREA
         STH   R2,0(R8)                STUFF IN ADDRESS
         LA    R8,2(R8)                POINT TO NEXT BYTE IN IOAREA
         MVI   0(R8),IC                STUFF IN IC
         LA    R8,1(R8)                POINT TO NEXT BYTE IN IOAREA
         B     PUTSCREN                GO OUTPUT THE SCREEN
FIELD#1  MVC   0(5,R8),=X'1140400513'  SBA,PT,IC
         LA    R8,5(R8)                POINT TO NEXT BYTE IN IOAREA
*
*     NOW OUTPUT THE SCREEN
*
PUTSCREN EQU   *
         SR    R8,R10                  COMPUTE # OF BYTES IN IOAREA
         TPUT  (R10),(R8),NOEDIT
         BR    R14                     AND RETURN
*
*     ROUTINE TO READ SCREEN
*
*     LOCAL REGISTER USE:
*
*     R4  - PTR TO CURRENT BYTE IN SCREEN
*     R5  - PTR TO CURRENT BYTE IN IOAREA
*     R6  - PTR TO CURRENT BYTE IN COPYSCRN
*     R7  - PTR TO LAST BYTE IN SCREEN
GETTERM  EQU   *
         TGET  IOAREA,4096,ASIS,WAIT   READ THE TERMINAL
         CLI   IOAREA,X'6E'            WAS IT A SHORT READ?
         BNE   USEINPUT                NOPE
         LR    R2,R9                   POINT TO COPYSCRN
         L     R3,=F'4096'             LOAD LENGTH OF COPYSCRN AREA
         LA    R4,*                    R4 JUST NEEDS ANY VALID  ADDRESS
         SLR   R5,R5                   R5=A HEX ZERO AND ZERO LENGTH
         MVCL  R2,R4                   ZERO OUT R3 BYTES STARTING AT R2
         MVI   SHORT,ON                THEN SET FLAG
         BR    R14                     AND RETURN
USEINPUT EQU   *
         MVI   SHORT,OFF               SET FLAG INDICATING NORMAL READ
         LR    R5,R10                  POINT TO IOAREA
         BCTR  R1,0                    R1 IS OFFSET TO LAST BYTE
         AR    R1,R10                  COMPUTE ADDR OF LAST BYTE READ
         ST    R1,LASTREAD             AND SAVE IT
         L     R7,LINES                LOAD ADDR OF LINES    PARM
         LH    R7,0(R7)                LOAD # OF LINES
         MH    R7,=H'80'               COMPUTE # OF BYTES
         BCTR  R7,0                    OFFSET TO LAST BYTE
         AR    R7,11                   ADDR OF LAST BYTE IN SCREEN
*
*     CHECK THE AID
*
         LA    R2,AIDTABLE
AIDLOOP  CLC   0(1,R2),0(R5)           CHECK THE BYTE AGAINST THE TABLE
         BE    FOUNDAID
         LA    R2,2(R2)                POINT TO NEXT ENTRY IN TABLE
         CLI   0(R2),X'FF'             IS THE END OF THE TABLE
         BNE   AIDLOOP                 IF NOT, KEEP LOOKING
         MVC   0(1,R5),1(R2)           PUT VALUE IN TABLE
FOUNDAID SLR   R3,R3                   ZERO R3
         IC    R3,1(R2)                LOAD VALUE FROM TABLE
         L     R2,KEY                  LOAD ADDR OF KEY      PARM
         STH   R3,0(R2)                RETURN VALUE TO CALLING PROGRAM
         LA    R5,1(R5)                POINT TO NEXT BYTE IN IOAREA
*
*     GET THE ROW AND COLUMN OF THE CURSOR
*
         LH    R2,0(R5)                LOAD THE CURSOR ADDRESS
         BAL   R1,COMPOFFS             CALL ROUTINE TO COMPUTE OFFSET
         LR    R3,R2                   OFFSET INTO R3
         SLR   R2,R2                   ZERO R2
         D     R2,=F'80'               DIVIDE BY 80
         LA    R2,1(R2)                COLUMN IS IN R2
         LA    R3,1(R3)                ROW IS IN R3
         L     R8,COLUMN               LOAD ADDR OF COLUMN   PARM
         STH   R2,0(R8)                RETURN COLUMN
         L     R8,ROW                  LOAD ADDR OF ROW      PARM
         STH   R3,0(R8)                RETURN ROW
         LA    R5,2(R5)                POINT TO NEXT BYTE IN IOAREA
         C     R5,LASTREAD             ARE WE BEYOND LAST BYTE?
         BH    DONEGET
*
*     NOW PROCESS EACH MODIFIED FIELD
*
GETLOOP  LA    R5,1(R5)                SKIP OVER SBA
         LH    R2,0(R5)                LOAD BUFFER ADDR
         BAL   R1,COMPOFFS             GO COMPUTE OFFSET
         LA    R4,0(R2,R11)            COMPUTE ADDR IN SCREEN
         LA    R6,0(R2,R9)             COMPUTE ADDR IN COPYSCRN
         LA    R5,2(R5)                POINT TO NEXT BYTE IN IOAREA
NEXTBYTE C     R5,LASTREAD             BEYOND LAST BYTE IN IOAREA?
         BH    ENDFIELD                YEP
         CLI   0(R5),SBA               START OF ANOTHER FIELD?
         BE    ENDFIELD                YES
         MVC   0(1,R4),0(R5)           STUFF IN THE BYTE
         MVC   0(1,R6),0(R5)           STUFF IN THE BYTE
         CLI   TRANFLAG,C'U'           TRANSLATE TO UPPER?
         BNE   ASIS                    NO
         TR    0(1,R4),TRTABL2         TRANSLATE TO UPPER CASE
ASIS     LA    R4,1(R4)                POINT TO NEXT BYTE IN SCREEN
         LA    R5,1(R5)                POINT TO NEXT BYTE IN IOAREA
         LA    R6,1(R6)                POINT TO NEXT BYTE IN COPYSCRN
         B     NEXTBYTE                GO GET ANOTHER BYTE
ENDFIELD EQU   *
         CR    R4,R7                   BEYOND LAST BYTE IN SCREEN?
         BH    LABEL1
         TM    0(R4),ATTRIB            IS IT ATTRIBUTE BYTE?
         BNZ   NOTATTR3                BRANCH IF NOT
LABEL1   C     R5,LASTREAD             BEYOND LAST BYTE IN IOAREA?
         BH    DONEGET                 YEP, WE'RE ALL THROUGH
         B     GETLOOP                 GO GET ANOTHER FIELD
NOTATTR3 EQU   *
         MVI   0(R4),C' '              PLANT A BLANK IN SCREEN
         MVI   0(R6),X'00'             PLANT A NULL IN COPYSCRN
         LA    R4,1(R4)                POINT TO NEXT BYTE IN SCREEN
         LA    R6,1(R6)                POINT TO NEXT BYTE IN COPYSCRN
         B     ENDFIELD
DONEGET  EQU   *
         BR    R14                     AND RETURN
*
*     ROUTINE TO COMPUTE 2 BYTE BUFFER ADDRESS FROM OFFSET IN R2
*     AND RETURN RESULT IN R2
*
COMPADDR EQU   *
         STC   R2,BUFFADDR+1           SAVE THE LOW 8 BITS
         NI    BUFFADDR+1,X'3F'        TURN OFF ALL BUT LAST 6 BITS
         SRL   R2,6                    SHIFT OFF THE LOW 6 BITS
         STC   R2,BUFFADDR             SAVE THE HIGH 6 BITS
         TR    BUFFADDR(2),TRTABL3     CONVERT TO 3270 FUNNY CODES
         LH    R2,BUFFADDR             LOAD THE COMPOSIT
         BR    R1                      AND RETURN
BUFFADDR DS    H
TRTABL3  DC    X'40'
         DC    X'C1C2C3C4C5C6C7C8C9'
         DC    X'4A4B4C4D4E4F'
         DC    X'50'
         DC    X'D1D2D3D4D5D6D7D8D9'
         DC    X'5A5B5C5D5E5F'
         DC    X'60'
         DC    X'E1E2E3E4E5E6E7E8E9'
         DC    X'6A6B6C6D6E6F'
         DC    X'70'
         DC    X'F1F2F3F4F5F6F7F8F9'
         DC    X'7A7B7C7D7E7F'
*
*     ROUTINE TO COMPUTE OFFSET INTO SCREEN BUFFER FROM BUFFER ADDRESS
*     IN R2.  RESULT IS IN R2
*
COMPOFFS EQU   *
         STH   R2,HALFSAVE             STORE THE BUFFER ADDR
         N     R2,=X'00003F00'         TURN OFF ALL BUT HIGH 6 BITS
         SRL   R2,2                    AND PUT THEM INTO PLACE
         NC    HALFSAVE,=X'003F'       TURN OFF ALL BUT LOW 6 BITS
         AH    R2,HALFSAVE             AND ADD THEM TOGETHER
         BR    R1                      AND RETURN
HALFSAVE DS    H
*
*     TERMINATE
*
RETURN   L     R13,SAVEAREA+4          LOAD ADDR OF CALLING SAVE AREA
         L     R14,12(R13)             RESTORE R14
         LM    R0,R12,20(R13)          RESTORE R0 THROUGH R12
         BR    R14                     RETURN
*
*     CONSTANTS AND STORAGE RESERVATIONS
*
SAVEAREA DS    18F
PARMSTRT EQU   *
MODE     DS    F                       ADDR OF THIS PARM
SCREEN   DS    F                       ETC
LINES    DS    F                       ETC
ROW      DS    F                       ETC
COLUMN   DS    F                       ETC
ALARM    DS    F                       ETC
UPPER    DS    F                       ETC (THESE MUST BE CONTIGUOUS)
KEY      DS    F
PARMLEN  EQU   *-PARMSTRT
ATRIBYTE DS    CL1
PRIMSIZE DS    H
TERMATRB DS    F
LASTREAD DS    F
TRANFLAG DS    XL1
SHORT    DS    XL1
ON       EQU   X'FF'
OFF      EQU   X'00'
ATTRIB   EQU   X'C0'
SBA      EQU   X'11'
SF       EQU   X'1D'
SFE      EQU   X'29'
FIELDATR EQU   X'C0'
EXTENDED EQU   X'41'
COLOR    EQU   X'42'
PT       EQU   X'05'
IC       EQU   X'13'
TRTABL1  DC    X'00E8E4C8C44C'
TRTABL2  DC    X'000102030405060708090A0B0C0D0E0F'
         DC    X'101112131415161718191A1B1C1D1E1F'
         DC    X'202122232425262728292A2B2C2D2E2F'
         DC    X'303132333435363738393A3B3C3D3E3F'
         DC    X'404142434445464748494A4B4C4D4E4F'
         DC    X'505152535455565758595A5B5C5D5E5F'
         DC    X'606162636465666768696A6B6C6D6E6F'
         DC    X'707172737475767778797A7B7C7D7E7F'
         DC    X'80C1C2C3C4C5C6C7C8C98A8B8C8D8E8F'
         DC    X'90D1D2D3D4D5D6D7D8D99A9B9C9D9E9F'
         DC    X'A0A1E2E3E4E5E6E7E8E9AAABACADAEAF'
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'
CLEAR    DC    X'C1'                   WCC
         DC    X'114040'               SBA   (ROW 01, COL 01)
         DC    X'3C404000'             RA    REPEAT TO ADDRESS
LCLEAR   EQU   *-CLEAR
*
*     TABLE OF AID VALUES, ONE BYTE AID AND ONE BYTE RESULT
*
AIDTABLE DC    X'7D00'                 ENTER
         DC    X'F101'                 PF1
         DC    X'F202'                 PF2
         DC    X'F303'                 PF3
         DC    X'F404'                 PF4
         DC    X'F505'                 PF5
         DC    X'F606'                 PF6
         DC    X'F707'                 PF7
         DC    X'F808'                 PF8
         DC    X'F909'                 PF9
         DC    X'7A0A'                 PF10
         DC    X'7B0B'                 PF11
         DC    X'7C0C'                 PF12
         DC    X'C10D'                 PF13
         DC    X'C20E'                 PF14
         DC    X'C30F'                 PF15
         DC    X'C410'                 PF16
         DC    X'C511'                 PF17
         DC    X'C612'                 PF18
         DC    X'C713'                 PF19
         DC    X'C814'                 PF20
         DC    X'C915'                 PF21
         DC    X'4A16'                 PF22
         DC    X'4B17'                 PF23
         DC    X'4C18'                 PF24
         DC    X'FF00'                 END OF TABLE - DO NOT REMOVE!!
         LTORG
COPYSCRN DS    CL4096
IOAREA   DS    CL4096
*
*     DSECTS
*
         END   FULSCR
