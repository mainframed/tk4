 /*      LOAD MODULE USAGE REPORT                                    */

 MODUSE: PROCEDURE OPTIONS(MAIN) REORDER;
         ON ERROR CALL PLIDUMP('TFSAHB');
1/* DECLARATIONS                                                     */
         DCL ATITLE(8) CHAR(25) STATIC
            INIT('TYPE 1 AND 2 SVC''S',
                 'COMPOSITE LIST',
                 'BLDL LIST CANDIDATES',
                 'RAM LIST CANDIDATES',
                 'RERP LIST CANDIDATES',
                 'RSVC LIST CANDIDATES',
                 'TSO LINK PACK CANDIDATES',
                 'PROBLEM PROGRAMS');
         DCL ATTACH BIT(8) ALIGNED STATIC INIT('00101010'B);
         DCL ATYPE(8) CHAR(1) STATIC
            INIT('N','','B','R','E','S','T','P');
         DCL BASIC POINTER;
         DCL COUNT FIXED BINARY(31,30);
         DCL DATA POINTER;
         DCL DATE BUILTIN;
         DCL DATESTART FIXED DECIMAL(5) INIT(0);
         DCL DATESTOP FIXED DECIMAL(5) INIT(0);
         DCL DC CHAR(2);
         DCL DE BIT(1) ALIGNED INIT(''B);
         DCL DEC PICTURE'999';
         DCL DISABLE_COUNT FIXED BINARY(31) INIT(0);
         DCL DISABLE_EVENTS FIXED BINARY(31) INIT(0);
         DCL ERPNAME CHAR(8);
         DCL EXCEEDED CONDITION INTERNAL;
         DCL EXCHANGE LIKE TABLE;
         DCL FILE CHAR(8);
         DCL FULL_COUNT FIXED BINARY(31) INIT(0);
         DCL FULL_EVENTS FIXED BINARY(31) INIT(0);
         DCL HH FIXED BINARY(31);
         DCL I FIXED BINARY;
         DCL IALIAS FIXED BINARY(31) STATIC INIT(210);
         DCL ICOUNT FIXED BINARY(31) STATIC INIT(5);
         DCL IERR FIXED BINARY(31) INIT(0);
         DCL IMAJOR FIXED BINARY(31) STATIC INIT(17);
         DCL INAME FIXED BINARY(31) STATIC INIT(9);
         DCL ISTORAGE FIXED BINARY(31) STATIC INIT(1);
         DCL J FIXED BINARY;
         DCL LALIAS FIXED BINARY(31) STATIC INIT(1);
         DCL LCOUNT FIXED BINARY(31) STATIC INIT(4);
         DCL LINK BIT(8) ALIGNED STATIC INIT('00000110'B);
         DCL LMAJOR FIXED BINARY(31) STATIC INIT(8);
         DCL LNAME FIXED BINARY(31) STATIC INIT(8);
         DCL LOAD BIT(8) ALIGNED STATIC INIT('00001000'B);
         DCL 1 LOSTDATA BASED(P) ALIGNED,
               2 AID BIT(8),
               2 FID BIT(8),
               2 RESERVED CHAR(4),
               2 TIME BIT(32),
               2 EVENTS BIT(32),
               2 BYTES BIT(32);
         DCL LSTORAGE FIXED BINARY(31) STATIC INIT(4);
         DCL LTABLE FIXED BINARY(31) STATIC INIT(28);
         DCL M POINTER;
         DCL MATCH BIT(1) ALIGNED;
         DCL MAJOR FIXED BINARY;
         DCL 1 MEMBER BASED(M) ALIGNED,
               2 NAME CHAR(8),
               2 TTR_P BIT(24),
               2 INDICATORS UNALIGNED,
                  3 ALIAS BIT(1),
                  3 NOTELISTS BIT(2),
                  3 USERDATA BIT(5),
               2 TTR_T BIT(24),
               2 ZEROES BIT(8),
               2 TTR_NS BIT(24),
               2 NL BIT(8),
               2 ATTR UNALIGNED,
                  3 RENT BIT(1),
                  3 REUS BIT(1),
                  3 OVLY BIT(1),
                  3 TEST BIT(1),
                  3 OL BIT(1),
                  3 SCTR BIT(1),
                  3 EXEC BIT(1),
                  3 ONE_TEXT BIT(1),
                  3 NODC BIT(1),
                  3 ORG_ZERO BIT(1),
                  3 ENTRY_ZERO BIT(1),
                  3 NORLD BIT(1),
                  3 NE BIT(1),
                  3 SYM BIT(1),
                  3 F_EDITOR BIT(1),
                  3 REFR BIT(1),
               2 STORAGE BIT(24),
               2 FTBL BIT(16),
               2 EP BIT(24),
               2 FTBO BIT(24),
               2 EP_MAJOR BIT(24),
               2 MAJOR CHAR(8);
         DCL MINOR FIXED BINARY;
         DCL MM FIXED BINARY(31);
         DCL MP FIXED BINARY INIT(0);
         DCL MULTI BIT(1) ALIGNED;
         DCL N FIXED BINARY;
         DCL NAME CHAR(8);
         DCL NBLK FIXED BINARY(31) INIT(0);
         DCL NO FIXED BINARY INIT(0);
         DCL NREC FIXED BINARY(31) INIT(0);
         DCL NSVC FIXED BINARY(31) INIT(0);
         DCL NTABLE FIXED BINARY(31);
         DCL NULL BUILTIN;
         DCL NUMBER FIXED BINARY(31);
         DCL NUSE FIXED BINARY(31) INIT(0);
         DCL OPEN BIT(1) ALIGNED;
         DCL P POINTER;
         DCL 1 PDS BASED(P),
               2 BYTES FIXED BINARY(15),
               2 ENTRIES(254) CHAR(1);
         DCL 1 RECORD BASED(P) ALIGNED,
               2 AID BIT(8),
               2 FID BIT(8),
               2 DATA(266) CHAR(1);
         DCL RENT CHAR(4);
         DCL REPORT_DATE CHAR(6);
         DCL REPORT_TIME CHAR(6);
         DCL REUS CHAR(4);
         DCL SORTQ ENTRY;
         DCL SS FIXED BINARY(31);
         DCL START_DATE PICTURE'99/99/99';
         DCL START_TIME PICTURE'99.99.99';
         DCL STOP_DATE PICTURE'99/99/99';
         DCL STOP_TIME PICTURE'99.99.99';
         DCL STORAGE FIXED BINARY(31);
         DCL 1 SVC BASED(BASIC) ALIGNED,
               2 EID BIT(16),
               2 JOBNAME CHAR(8),
               2 TCB BIT(32),
               2 PSW,
                  3 SYSTEM BIT(24),
                  3 CODE BIT(8),
                  3 PP BIT(32),
               2 RBNAME CHAR(8),
               2 R15 BIT(32),
               2 R0 BIT(32),
               2 R1 BIT(32);
         DCL 1 SVC_ATTACH BASED(DATA),
               2 DE BIT(1),
               2 PARM BIT(223),
               2 NAME CHAR(8);
         DCL 1 SVC_LINK BASED(DATA),
               2 DE BIT(1),
               2 PARM BIT(63),
               2 NAME CHAR(8);
         DCL 1 SVC_LOAD BASED(DATA),
               2 NAME CHAR(8);
         DCL 1 SVC_XCTL BASED(DATA),
               2 DE BIT(1),
               2 PARM BIT(63),
               2 NAME CHAR(8);
         DCL SYSLIB FILE RECORD INPUT INTERNAL
               ENV(F RECSIZE(256) BLKSIZE(256) TOTAL);
         DCL 1 TABLE(1500),
               2 STORAGE FIXED BINARY(31),
               2 COUNT FIXED BINARY(31),
               2 NAME CHAR(8),
               2 MAJOR CHAR(8),
               2 FILE CHAR(1),
               2 TYPE CHAR(1),
               2 DE BIT(1),
               2 ALIAS BIT(1),
               2 RENT BIT(1),
               2 REUS BIT(1),
               2 NODC BIT(1),
               2 PAD BIT(11);
         DCL TALIAS CHAR(2) STATIC INIT('BI');
         DCL TCOUNT CHAR(2) STATIC INIT('FI');
         DCL TIME BUILTIN;
         DCL TIMEDATE CHAR(6);
         DCL 1 TIMESTAMP BASED(P) ALIGNED,
               2 AID BIT(8),
               2 FID BIT(8),
          /*   2 RESERVED CHAR(4),      MVT */
               2 TIMEZONE BIT(32),   /* VS2 */
          /*   2 TIME BIT(32),          MVT */
               2 TODLH BIT(32),      /* VS2 */
               2 TODRH BIT(32),      /* VS2 */
          /*   2 DATE FIXED DECIMAL(7), MVT */
               2 OPTIONS UNALIGNED,
                  3 SYSM BIT(1),
                  3 SYSP BIT(1),
                  3 SYS BIT(1),
                  3 USR BIT(1),
                  3 TRC BIT(1),
                  3 DSP BIT(1),
                  3 SSM BIT(1),      /* MVT */
                  3 PCI BIT(1),
                  3 SVC BIT(1),
                  3 SVCP BIT(1),
                  3 SIO BIT(1),
                  3 SIOP BIT(1),
                  3 PI BIT(1),
                  3 PIP BIT(1),
                  3 IO BIT(1),
                  3 IOP BIT(1),
                  3 EXT BIT(1),
          /*      3 RESERVED BIT(6),    MVT */
                  3 GTFSYYNC BIT(1), /* VS2 */
                  3 GTFAOS1 BIT(1),  /* VS2 */
                  3 GTFAOS2 BIT(1),  /* VS2 */
                  3 RESERVED BIT(3),  /* VS2 */
                  3 IO_SIO BIT(1),
                  3 MFT BIT(1),     /* RESERVED IN VS2 */
                  3 MFT_ATTACH BIT(1),     /* RESERVED IN VS2 */
                  3 MVT BIT(1),     /* RESERVED IN VS2 */
                  3 MP BIT(1),
                  3 MC BIT(1),
                  3 NOTIMER BIT(1),     /* RESERVED IN VS2 */
                  3 TOD BIT(1),
                  3 USERTIME BIT(1);
         DCL TIMESTART BIT(25) ALIGNED INIT(''B);
         DCL TIMESTOP BIT(25) ALIGNED INIT(''B);
         DCL TITLE CHAR(25);
         DCL TMAJOR CHAR(2) STATIC INIT('CH');
         DCL TNAME CHAR(2) STATIC INIT('CH');
         DCL TOTAL FIXED BINARY(31,30);
         DCL TRACE FILE RECORD INPUT INTERNAL ENV(VB TOTAL);
         DCL TRACE_TIME PICTURE'99.99.99';
         DCL TSTORAGE CHAR(2) STATIC INIT('FI');
         DCL TYPE CHAR(1) INIT('');
         DCL USERTIME FIXED BINARY INIT(0);
         DCL WAIT BIT(8) ALIGNED STATIC INIT('00000001'B);
         DCL XCTL BIT(8) ALIGNED STATIC INIT('00000111'B);
         DCL ZCHAR CHAR(3) DEFINED ZPIC;
         DCL ZPIC PICTURE'99T';



         DCL TYME BIT(32) INIT('00000000000000001000000000000000'B);
         DCL DAYT FIXED DECIMAL(7) INIT(74350);
1/* INITIALIZATION                                                   */
         OPEN FILE(SYSPRINT) PAGESIZE(41);
         ON CONDITION(EXCEEDED) BEGIN;
            PUT EDIT('TABLE SIZE EXCEEDED')  (PAGE,A);
            STOP;
            END;
         REPORT_TIME = SUBSTR(TIME,1,6);
         TIMEDATE = DATE;
         REPORT_DATE = SUBSTR(TIMEDATE,3) ×× SUBSTR(TIMEDATE,1,2);
1/* PROCESS TRACE FILE                                               */
         ON ENDFILE(TRACE) BEGIN;
            OPEN = ''B;
            CLOSE FILE(TRACE);
            END;
         OPEN = '1'B;
         OPEN FILE(TRACE);
         DO WHILE(OPEN);
            READ FILE(TRACE) SET(P);
            IF OPEN THEN DO;
            NREC = NREC+1;
            IF RECORD.AID = '00000000'B & RECORD.FID = '00000100'B
            THEN DO;
               NBLK = NBLK+1;
               IF TIMESTART = ''B
               THEN DO;
                  IF TIMESTAMP.USERTIME
                  THEN USERTIME = 12;   /* WAS 8 FOR MVT */
                  IF TIMESTAMP.MP
                  THEN MP = 4;
                  TIMESTART = TYME;
                  DATESTART = DAYT;
                  END;
               ELSE DO;
                  TIMESTOP = TYME;
                  DATESTOP = DAYT;
                  END;
               END;
            IF RECORD.AID = '00000000'B & RECORD.FID = '00000101'B
            THEN DO;
               FULL_COUNT = FULL_COUNT+1;
               FULL_EVENTS = FULL_EVENTS+1;
               END;
            IF RECORD.AID = '00000000'B & RECORD.FID = '00000110'B
            THEN DO;
               DISABLE_COUNT = DISABLE_COUNT+1;
               DISABLE_EVENTS = DISABLE_EVENTS+1;
               END;
            IF RECORD.AID = '11111111'B
            THEN BASIC = ADDR(RECORD.DATA(1+USERTIME));
            IF RECORD.AID = '11111111'B & RECORD.FID = '00000001'B
        /*  THEN IF SVC.EID = '0011111111111111'B     MVT */
            THEN IF SVC.EID = '0000000100000000'B  /* VS2 */
            THEN DO;
               NSVC = NSVC+1;
               DATA = ADDR(RECORD.DATA(43+USERTIME+MP));
               IF SVC.CODE = LINK
               THEN DO;
                  DE = SVC_LINK.DE;
                  NAME = SVC_LINK.NAME;
                  TYPE = 'P';
                  END;
               IF SVC.CODE = XCTL
               THEN DO;
                  DE = SVC_XCTL.DE;
                  NAME = SVC_XCTL.NAME;
                  IF SUBSTR(SVC.RBNAME,1,4) = 'SVC-'
                  THEN TYPE = 'S';
                  ELSE TYPE = 'P';
                  END;
               IF SVC.CODE = LOAD
               THEN DO;
                  DE = SUBSTR(SVC.R15,1,1);
                  NAME = SVC_LOAD.NAME;
                  TYPE = 'P';
                  END;
               IF SVC.CODE = ATTACH
               THEN DO;
                  DE = SVC_ATTACH.DE;
                  NAME = SVC_ATTACH.NAME;
                  IF NAME = '' × NAME = LOW(8)
                  THEN NAME = (8)'?';
                  TYPE = 'P';
                  END;
               IF SVC.CODE ^= LINK &
                  SVC.CODE ^= XCTL &
                  SVC.CODE ^= LOAD &
                  SVC.CODE ^= ATTACH
               THEN DO;
                  DE = '1'B;
                  ZPIC = DECIMAL(SVC.CODE,3);
                  NAME = 'IGC00' ×× ZPIC;
                  TYPE = 'N';
                  END;
               ERPNAME = HIGH(8);
               IF SUBSTR(SVC.RBNAME,1,3) = 'IGE' & SVC.CODE ^= WAIT
               THEN ERPNAME = SVC.RBNAME;
               DO NAME = NAME,ERPNAME WHILE(ERPNAME ^= HIGH(8));
                  MATCH = ''B;
                  DO I = 1 TO NO WHILE(^ MATCH);
                     MATCH = TABLE.NAME(I) = NAME;
                     END;
                  I = I-1;
                  IF MATCH
                  THEN DO;
                     DO N = I-1 TO 1 BY -1
                        WHILE(TABLE.COUNT(I) = TABLE.COUNT(N));
                        END;
                     N = N+1;
                     TABLE.COUNT(I) = TABLE.COUNT(I) + 1;
                     TABLE.DE(I) = TABLE.DE(I) & DE;
                     IF N ^= I
                     THEN DO;
                        EXCHANGE = TABLE(N);
                        TABLE(N) = TABLE(I);
                        TABLE(I) = EXCHANGE;
                        END;
                     END;
                  ELSE DO;
                     NO = NO + 1;
                     IF NO > 1500
                     THEN SIGNAL CONDITION(EXCEEDED);
                     TABLE.STORAGE(NO) = 0;
                     TABLE.COUNT(NO) = 1;
                     TABLE.NAME(NO),TABLE.MAJOR(NO) = NAME;
                     TABLE.FILE(NO) = '';
                     TABLE.TYPE(NO) = TYPE;
                     TABLE.DE(NO) = DE;
                     TABLE.ALIAS(NO) = ''B;
                     TABLE.RENT(NO) = ''B;
                     TABLE.REUS(NO) = ''B;
                     TABLE.NODC(NO) = '1'B;
                     END;
                  TYPE = 'E';
                  DE = ''B;
                  END;
               END;
            END; END;
         NUSE = NO;
1/* PROCESS SYSTEM LIBRARIES                                         */
         NTABLE = NO;
         CALL SORTQ(ADDR(TABLE),NTABLE,LTABLE,IERR,
                     IMAJOR,LMAJOR,TMAJOR,'A');
         IF IERR ^= 0 THEN SIGNAL ERROR;
         ON UNDEFINEDFILE(SYSLIB) OPEN = ''B;
         ON ENDFILE(SYSLIB) BEGIN;
            OPEN = ''B;
            CLOSE FILE(SYSLIB);
            END;
         DO FILE = 'SVCLIB','LINKLIB','CMDLIB';
            OPEN = '1'B;
            OPEN FILE(SYSLIB) TITLE(FILE);
            P = NULL;
            DO WHILE(OPEN);
            READ FILE(SYSLIB) SET(P);
               J = 1;
               DO WHILE(OPEN & J < PDS.BYTES - 2);
                  M = ADDR(ENTRIES(J));
                  MINOR,MAJOR = 0;
                  I = 1;
                  N = NTABLE;
                  DO WHILE(I <= N & MINOR = 0);
                     IF TABLE.NAME((I+N)/2) = MEMBER.NAME
                     THEN MINOR = (I+N)/2;
                     IF TABLE.NAME((I+N)/2) < MEMBER.NAME
                     THEN I = (I+N)/2+1;
                     ELSE N = (I+N)/2-1;
                     END;
                  IF MEMBER.ALIAS & (MEMBER.RENT × MEMBER.REUS)
                  THEN DO;
                     I = 1;
                     N = NTABLE;
                     DO WHILE(I <= N & MAJOR = 0);
                        IF TABLE.NAME((I+N)/2) = MEMBER.MAJOR
                        THEN MAJOR = (I+N)/2;
                        IF TABLE.NAME((I+N)/2) < MEMBER.MAJOR
                        THEN I = (I+N)/2+1;
                        ELSE N = (I+N)/2-1;
                        END;
                     DO I = NTABLE+1 TO NO WHILE(MAJOR = 0);
                        IF TABLE.NAME(I) = MEMBER.MAJOR
                        THEN MAJOR = I;
                        END;
                     END;
                  IF MINOR ^= 0 × MAJOR ^= 0
                  THEN DO;
                     IF MINOR = 0
                     THEN DO;
                        MINOR,NO = NO + 1;
                        IF NO > 1500
                        THEN SIGNAL CONDITION(EXCEEDED);
                        TABLE(MINOR) = TABLE(MAJOR);
                        TABLE.COUNT(MINOR) = 0;
                        TABLE.NAME(MINOR) = MEMBER.NAME;
                        TABLE.DE(MINOR) = ''B;
                        TABLE.ALIAS(MINOR) = MEMBER.ALIAS;
                        END;
                     IF TABLE.FILE(MINOR) = ''
                     THEN DO;
                        TABLE.STORAGE(MINOR) = MEMBER.STORAGE;
                        TABLE.FILE(MINOR) = SUBSTR(FILE,1,1);
                        IF FILE = 'SVCLIB'
                        THEN DO;
                           IF TABLE.TYPE(MINOR) = 'N'
                           THEN TABLE.TYPE(MINOR) = 'S';
                           IF TABLE.TYPE(MINOR) = 'P'
                           THEN TABLE.TYPE(MINOR) = 'R';
                           END;
                        IF FILE = 'LINKLIB'
                        THEN DO;
                           IF SUBSTR(TABLE.MAJOR(MINOR),1,3) = 'IKJ'
                           THEN TABLE.TYPE(MINOR) = 'T';
                           ELSE TABLE.TYPE(MINOR) = 'R';
                           END;
                        IF FILE = 'CMDLIB'
                        THEN TABLE.TYPE(MINOR) = 'T';
                        TABLE.ALIAS(MINOR) = MEMBER.ALIAS;
                        TABLE.RENT(MINOR) = MEMBER.RENT;
                        TABLE.REUS(MINOR) = MEMBER.REUS;
                        TABLE.NODC(MINOR) = MEMBER.NODC;
                        IF MEMBER.ALIAS
                        THEN IF (MEMBER.RENT × MEMBER.REUS)
                             THEN TABLE.MAJOR(MINOR) = MEMBER.MAJOR;
                             ELSE TABLE.MAJOR(MINOR) = (8)'?';
                        END;
                     IF MAJOR = 0 & MEMBER.ALIAS &
                        (MEMBER.RENT × MEMBER.REUS)
                     THEN DO;
                        MAJOR,NO = NO + 1;
                        IF NO > 1500
                        THEN SIGNAL CONDITION(EXCEEDED);
                        TABLE(MAJOR) = TABLE(MINOR);
                        TABLE.COUNT(MAJOR) = 0;
                        TABLE.NAME(MAJOR) = MEMBER.MAJOR;
                        TABLE.DE(MAJOR) = ''B;
                        TABLE.ALIAS(MAJOR) = ''B;
                        END;
                     END;
                  J = J+12+MEMBER.USERDATA*2;
                  END;
               END;
            END;
1/* PREPARE TABLE FOR OUTPUT                                         */
         NTABLE = NO;
         CALL SORTQ(ADDR(TABLE),NTABLE,LTABLE,IERR,
                     IMAJOR,LMAJOR,TMAJOR,'A',
                     IALIAS,LALIAS,TALIAS,'A');
         IF IERR ^= 0 THEN SIGNAL ERROR;
         DO I = 1 TO NO;
            IF TABLE.TYPE(I) = 'N'
            THEN DO;
               ZCHAR = SUBSTR(TABLE.NAME(I),6,3);
               DEC = ZPIC;
               TABLE.MAJOR(I),TABLE.NAME(I) = 'IGC' ×× DEC;
               END;
            IF ^ TABLE.ALIAS(I)
            THEN DO;
               DO N = I + 1 TO NO
               WHILE(TABLE.ALIAS(N) & (TABLE.RENT(N) × TABLE.REUS(N)));
                  TABLE.COUNT(I) = TABLE.COUNT(I) + TABLE.COUNT(N);
                  END;
               DO N = I + 1 TO NO
               WHILE(TABLE.ALIAS(N) & (TABLE.RENT(N) × TABLE.REUS(N)));
                  TABLE.COUNT(N) = TABLE.COUNT(I);
                  END;
               END;
            END;
         CALL SORTQ(ADDR(TABLE),NTABLE,LTABLE,IERR,
                     ICOUNT,LCOUNT,TCOUNT,'D',
                     ISTORAGE,LSTORAGE,TSTORAGE,'A',
                     IMAJOR,LMAJOR,TMAJOR,'A',
                     IALIAS,LALIAS,TALIAS,'A',
                     INAME,LNAME,TNAME,'A');
         IF IERR ^= 0 THEN SIGNAL ERROR;
         DO I = 1 TO NO;
            IF TABLE.ALIAS(I)
            THEN TABLE.STORAGE(I),TABLE.COUNT(I) = 0;
            END;
1/* PRINT REPORT                                                     */
         START_DATE = CALENDAR(DATESTART);
         STOP_DATE = CALENDAR(DATESTOP);
         SS = TIMESTART/300;
         HH = SS/3600;
         MM = MOD(SS/60,60);
         SS = MOD(SS,60);
         START_TIME = HH*10000+MM*100+SS;
         SS = TIMESTOP/300;
         HH = SS/3600;
         MM = MOD(SS/60,60);
         SS = MOD(SS,60);
         STOP_TIME = HH*10000+MM*100+SS;
         SS = (TIMESTOP-TIMESTART)/300;
         IF SS < 0
         THEN SS = SS+86400;
         HH = SS/3600;
         MM = MOD(SS/60,60);
         SS = MOD(SS,60);
         TRACE_TIME = HH*10000+MM*100+SS;
         PUT EDIT('LOAD MODULE USAGE REPORT')(A(24))
                 ('REPORT DATE')             (SKIP(2),A(24))
                 (REPORT_DATE)               (X(6),P'99/99/99')
                 ('REPORT TIME')             (SKIP(2),A(24))
                 (REPORT_TIME)               (X(6),P'99.99.99')
                 ('TRACE START DATE')        (SKIP(2),A(24))
                 (START_DATE)                (X(6),A(8))
                 ('TRACE START TIME')        (SKIP(2),A(24))
                 (START_TIME)                (X(6),A(8))
                 ('TRACE STOP DATE')         (SKIP(2),A(24))
                 (STOP_DATE)                 (X(6),A(8))
                 ('TRACE STOP TIME')         (SKIP(2),A(24))
                 (STOP_TIME)                 (X(6),A(8))
                 ('TRACE ELAPSED TIME')      (SKIP(2),A(24))
                 (TRACE_TIME)                (X(6),A(8))
                 ('TRACE BLOCKS')            (SKIP(2),A(24))
                 (NBLK)                      (P'BZ,ZZZ,ZZZ,ZZ9')
                 ('TRACE RECORDS')           (SKIP(2),A(24))
                 (NREC)                      (P'BZ,ZZZ,ZZZ,ZZ9')
                 ('TRACE BUFFERS FULL')      (SKIP(2),A(24))
                 (FULL_COUNT)                (P'BZ,ZZZ,ZZZ,ZZ9')
                 ('TRACE EVENTS LOST')       (SKIP(2),A(24))
                 (FULL_EVENTS)               (P'BZ,ZZZ,ZZZ,ZZ9')
                 ('TRACE DISABLED')          (SKIP(2),A(24))
                 (DISABLE_COUNT)             (P'BZ,ZZZ,ZZZ,ZZ9')
                 ('TRACE  EVENTS LOST')      (SKIP(2),A(24))
                 (DISABLE_EVENTS)            (P'BZ,ZZZ,ZZZ,ZZ9')
                 ('TRACE SVC RECORDS')       (SKIP(2),A(24))
                 (NSVC)                      (P'BZ,ZZZ,ZZZ,ZZ9')
                 ('ENTRY POINTS USED')       (SKIP(2),A(24))
                 (NUSE)                      (P'BZ,ZZZ,ZZZ,ZZ9')
                 ('MODULES AND ALIASES')     (SKIP(2),A(24))
                 (NO)                        (P'BZ,ZZZ,ZZZ,ZZ9');
         ON ENDPAGE(SYSPRINT) BEGIN;
            IF MULTI
            THEN DO;
               MULTI = ''B;
               PUT SKIP EDIT
                  ('NOTE ''_'' DENOTES A 12-0 MULTIPUNCH') (A);
               END;
            PUT PAGE EDIT
               ('LOAD MODULE USAGE')         (A(17))
               (TITLE)                       (X(25),A(25))
               (' CUMULATIVE')               (SKIP(2),X(69),A(11))
               (' CUMULATIVE')               (A(11))
               (' RANK')                     (SKIP,X(5),A(5))
               (' LOCATION')                 (A(9))
               (' ALIAS')                    (A(9))
               (' MODULE')                   (A(9))
               (' # USES')                   (X(7),A(7))
               (' % USES')                   (A(7))
               (' SIZE')                     (X(6),A(5))
               (' % USES')                   (X(4),A(7))
               (' SIZE')                     (X(6),A(5))
               (' RENT REUS DC')             (A(13));
            PUT SKIP(2);
            END;
         ZPIC = 0;
         MULTI = ''B;
         DO J = 1 TO 8;
            TYPE = ATYPE(J);
            TITLE = ATITLE(J);
            SIGNAL ENDPAGE(SYSPRINT);
            NUMBER,COUNT,TOTAL,STORAGE = 0;
            DO I = 1 TO NO;
               IF TYPE = TABLE.TYPE(I) ×
                  TYPE = '' & TABLE.TYPE(I) ^= 'N' ×
                  TYPE = 'B' & ^ TABLE.DE(I) & TABLE.FILE(I) ^= ''
               THEN NUMBER = NUMBER+TABLE.COUNT(I);
               END;
            PUT EDIT(NUMBER)                 (X(37),P'BZ,ZZZ,ZZZ,ZZ9');
            PUT SKIP;
            DO I = 1 TO NO;
               IF TYPE = TABLE.TYPE(I) ×
                  TYPE = '' & TABLE.TYPE(I) ^= 'N' ×
                  TYPE = 'B' & ^ TABLE.DE(I) & TABLE.FILE(I) ^= ''
               THEN DO;
                  NAME = TABLE.MAJOR(I);
                  IF SUBSTR(NAME,8) = SUBSTR(ZCHAR,3)
                  THEN DO;
                     MULTI = '1'B;
                     SUBSTR(NAME,8) = '_';
                     END;
                  COUNT = DIVIDE(TABLE.COUNT(I),NUMBER,31,30);
                  TOTAL = TOTAL+COUNT;
                  STORAGE = STORAGE+TABLE.STORAGE(I);
                  RENT,REUS,DC = '';
                  IF TABLE.RENT(I)
                  THEN RENT = 'RENT';
                  IF TABLE.REUS(I)
                  THEN REUS = 'REUS';
                  IF ^ TABLE.NODC(I)
                  THEN DC = 'DC';
                  FILE = '';
                  IF TABLE.FILE(I) = 'S'
                  THEN FILE = 'SVCLIB';
                  IF TABLE.FILE(I) = 'L'
                  THEN FILE = 'LINKLIB';
                  IF TABLE.FILE(I) = 'C'
                  THEN FILE = 'CMDLIB';
                  IF ^ TABLE.ALIAS(I)
                  THEN PUT SKIP EDIT
                     (I)                     (X(5),P'BZZZ9')
                     (FILE)                  (X(1),A(8))
                     (NAME)                  (X(10),A(8))
                     (TABLE.COUNT(I))        (P'BZ,ZZZ,ZZZ,ZZ9')
                     (COUNT)                 (P'BZZZV.99F(-2)')
                     (TABLE.STORAGE(I))      (P'BZZ,ZZZ,ZZZ')
                     (TOTAL)                 (P'BBBBBZZZV.99F(-2)')
                     (STORAGE)               (P'BZZ,ZZZ,ZZZ')
                     (RENT,REUS,DC)          (X(1),A(5),A(5),A(2));
                  ELSE PUT SKIP EDIT
                     (I)                     (X(5),P'BZZZ9')
                     (FILE)                  (X(1),A(8))
                     (TABLE.NAME(I))         (X(1),A(8))
                     (NAME)                  (X(1),A(8));
                  END;
               END;
            END;
1/* CALENDAR CONVERSION FROM YY.DDD TO MM/DD/YY                      */
 CALENDAR: PROCEDURE(YYDDD) RETURNS(FIXED DECIMAL(6));
         DCL DD FIXED DECIMAL(2);
         DCL DDD FIXED DECIMAL(3);
         DCL LEAP FIXED DECIMAL(1);
         DCL MM FIXED DECIMAL(2);
         DCL YY FIXED DECIMAL(2);
         DCL YYDDD FIXED DECIMAL(5);
         YY = YYDDD/1000;
         DDD = MOD(YYDDD,1000);
         IF MOD(YY,4) = 0
         THEN LEAP = 1;
         ELSE LEAP = 0;
         IF DDD > 59+LEAP
         THEN DD = DDD+2-LEAP;
         ELSE DD = DDD;
         MM = ((DD+91)*100)/3055-2;
         DD = MOD((DD+91)*100,3055)/100+1;
         RETURN(MM*10000+DD*100+YY);
         END;
         END;
