*          DATA SET PDS        AT LEVEL 004 AS OF 12/27/79
*          DATA SET PDS        AT LEVEL 003 AS OF 12/21/79
*          DATA SET PDS        AT LEVEL 002 AS OF 12/21/79
PDS5     TITLE 'T S O   P D S   C O M M A N D   P R O C E S S O R'
***********************************************************************
*                                                                     *
*                                                                     *
* TITLE -      P D S   -   TSO PDS PROCESSOR                          *
*                                                                     *
* FUNCTION -   PROVIDE THE TSO USER WITH THE CAPABILITY               *
*              TO MANIPULATE A PARITIONED DATA SET                    *
*              DIRECTORY AND SELECTED MEMBERS.                        *
*                                                                     *
*                                                                     *
* OPERATION -  OPERATES AS A STANDARD COMMAND PROCESSOR UNDER         *
*              TSO. ALLOCATES THE DATA SET(S) REQUESTED BY THE        *
*              USER. PROVIDES DISPLAY, RENAME, SCRATCH, AND           *
*              ALIAS FUNCTIONS FOR THE DIRECTORY ENTRIES.             *
*              PRODUCES LOAD MODULE MAPS AND HISTORY SUMMARIES.       *
*              DISPLAYS THE CONTENTS OF MEMBERS OF THE DATA SET.      *
*                                                                     *
*                                                                     *
* INPUT -      STANDARD COMMAND PROCESSOR PARAMETER LIST              *
*              POINTED TO BY REGISTER 1                               *
*                                                                     *
*                                                                     *
* OUTPUT -     NOT APPLICABLE.                                        *
*                                                                     *
*                                                                     *
* ATTRIBUTES - REENTRANT, REUSEABLE, REFRESHABLE.                     *
*                                                                     *
* LAST MODIFIED BY LES HAMILTON 12/21/79 TO ADD Q SUPPORT             *
* LAST MODIFIED BY LES HAMILTON 12/21/79 TO CHANGE TSO200I NAME       *
* LAST MODIFIED BY R VIERREGGER 06/30/81 TO CHANGE ACFGACVT MACRO     *
*                                                                     *
***********************************************************************
         EJECT
         MACRO
&NAME    SCREEN &TYPE
         AIF   ('&TYPE' EQ 'POSITION').POS
         AIF   ('&TYPE' EQ 'CLEAR').CLEAR
         MNOTE 8,'*** &TYPE IS NOT A VALID CONTROL TYPE'
         MEXIT
.POS     ANOP
&NAME    LA    1,1
         AGO   .SVC
.CLEAR   ANOP
&NAME    SR    R1,R1
.SVC     LA    0,2
         SLL   0,24
         SVC   94
         MEND
         SPACE 3
         MACRO
&NAME    CLEAR &FIELD
         LCLC  &L
&L       SETC  'L'''
&NAME    MVI   &FIELD,C' '
         MVC   &FIELD+1(&L&FIELD-1),&FIELD
         MEND
         SPACE 3
         MACRO
&NAME    MSG   &TEXT
         LCLA  &A
&A       SETA  K'&TEXT-2+4
&NAME    DC    0H'0',AL2(&A,0),C&TEXT
         MEND
         EJECT
         MACRO
&NAME    ENTER &TYPE,&PDL=
         GBLC  &MAIN
         AIF   ('&TYPE' NE '').A1
&MAIN    SETC  '&NAME'
&NAME    CSECT
         SAVE  (14,12),,*
         LR    BASEREG1,R15
         LA    BASEREG2,4095(,BASEREG1)
         LA    BASEREG2,1(,BASEREG2)
         LA    BASEREG3,4095(,BASEREG2)
         LA    BASEREG3,1(,BASEREG3)
         USING &NAME,BASEREG1,BASEREG2,BASEREG3
         SPACE 2
         MEXIT
.A1      AIF   ('&TYPE' NE 'VALCHECK').A2
&NAME    CSECT
         SAVE  (14,12),,*
         LR    VLDBASE,R15 .            ESTABLISH BASE REGISTER
         USING &NAME,VLDBASE
         L     WORKREG,4(,R1) .         WORK AREA ADDRESS
         LM    BASEREG1,BASEREG3,BASES .RELOAD MAIN BASE REGISTERS
         L     RPDL,0(,R1) .            PDE ADDRESS
         LA    R15,VALSAVE              VALIDITY CHECK SAVE AREA
         AGO   .SETSAVE
.A2      ANOP
         AIF   ('&TYPE' NE 'ATTNEXIT').A3
&NAME    SAVE  (14,12)
         L     WORKREG,8(,R1)
         LM    BASEREG1,BASEREG3,BASES
         LA    R15,ATTNSAVE
         AGO   .SETSAVE
.A3      ANOP
         AIF   ('&TYPE' NE 'COMMAND').A4
&NAME    CSECT
         SAVE  (14,12),,*
         LR    CMDBASE,R15 .            ESTABLISH BASE REGISTER
         USING &NAME,CMDBASE
         AIF   ('&PDL' EQ '').NOPDL
         USING &PDL,RPDL .          ESTABLISH BASE FOR PDL
.NOPDL   ANOP
         LA    R15,CMDSAVE
         AGO   .SETSAVE
.A4      ANOP
         MNOTE 8,'INVALID TYPE ''&TYPE'''
         MEXIT
.SETSAVE ANOP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15
         MEND
         EJECT
         MACRO
&NAME    EXIT  &TYPE,&LV=
         GBLC  &MAIN
         AIF   ('&NAME' EQ '').NONAME
&NAME    DS    0H
.NONAME  ANOP
         AIF   ('&LV' EQ '').A1
         LR    R2,R13         ADDR OF THIS SAVE AREA
.A1      L     R13,4(,R13)
         AIF   ('&LV' EQ '').A2 NOT DYNAMIC CORE
         FREEMAIN R,LV=&LV,A=(R2)
.A2      SPACE
         RETURN (14,12),T,RC=(15)
&MAIN    CSECT
         MEND
         SPACE 3
         MACRO $PUTGET -  OUTPUT A DATA LINE AND GET RESPONSE
&NAME   $PUTGET  &LINE,&ATTN=
         AIF   ('&NAME' EQ '').NONAME
&NAME    DS    0H
.NONAME  ANOP
         AIF   ('&LINE' EQ '(1)' OR '&LINE' EQ '(R1)').CALL
         AIF   ('&LINE'(1,1) EQ '(').R
         LA    R1,&LINE .            ADDRESS OF DATA LINE
         AGO   .CALL
.R       ANOP
         LR    R1,&LINE(1) .                ADDRESS OF DATA LINE
.CALL    ANOP
         BAL   R14,$PUTGET .            INVOKE PUTGET INTERFACE
         AIF   ('&ATTN' EQ '').NOATTN
         B     &ATTN .               EXIT IF ATTENTION OCCURRED
         AGO   .END
.NOATTN  NOP   0 .                      IGNORE ATTENTIONS
.END     MEND
         EJECT
         MACRO $PUTLINE -  OUTPUT A DATA LINE
&NAME   $PUTLINE &LINE,&ATTN=
         AIF   ('&NAME' EQ '').NONAME
&NAME    DS    0H
.NONAME  ANOP
         AIF   ('&LINE' EQ '(1)' OR '&LINE' EQ '(R1)').CALL
         AIF   ('&LINE'(1,1) EQ '(').R
         LA    R1,&LINE .            ADDRESS OF DATA LINE
         AGO   .CALL
.R       ANOP
         LR    R1,&LINE(1) .                ADDRESS OF DATA LINE
.CALL    ANOP
         BAL   R14,$PUTLINE .           INVOKE PUTLINE INTERFACE
         AIF   ('&ATTN' EQ '').NOATTN
         B     &ATTN .               EXIT IF ATTENTION OCCURRED
         AGO   .END
.NOATTN  NOP   0 .                      IGNORE ATTENTIONS
.END     MEND
         SPACE 2
         MACRO MESSAGE - OUTPUT AN ERROR/STATUS MESSAGE
&NAME    MESSAGE &MSG1,&MSG2
         AIF   ('&MSG1' NE '').MSG1OK
         MNOTE 12,'PRIMARY MESSAGE ADDRESS NOT SPECIFIED'
         AGO   .END
.MSG1OK  ANOP
         AIF   ('&NAME' EQ '').NONAME
&NAME    DS    0H
.NONAME  ANOP
         AIF   ('&MSG1' EQ '(1)' OR '&MSG1' EQ '(R1)').MSG2
         AIF   ('&MSG1'(1,1) EQ '(').RMSG1
         LA    R1,&MSG1 .               ADDRESS OF PRIMARY MESSAGE
         AGO   .MSG2
.RMSG1   ANOP
         LR    R1,&MSG1(1) .            ADDRESS OF PRIMARY MESSAGE
.MSG2    ANOP
         AIF   ('&MSG2' EQ '').NOMSG2 NO SECONDARY MESSAGE
         AIF   ('&MSG2' EQ '(0)' OR '&MSG2' EQ '(R0)').CALL
         AIF   ('&MSG2'(1,1) EQ '(').RMSG2
         LA    R0,&MSG2 .               ADDRESS OF SECONDARY MESSAGE
         AGO   .CALL
.RMSG2   ANOP
         LR    R0,&MSG2(1) .            ADDRESS OF SECONDARY MESSAGE
.CALL    ANOP
         BAL   R14,MESSAGE .            SEND MESSAGES
         AGO   .END
.NOMSG2  ANOP
         BAL   R14,MESSAGE0 .           SEND PRIMARY MESSAGE
.END     MEND
         EJECT
         GBLB  &SPNB,&PDSDAIR,&MVT,&ACF2
&SPNB    SETB  1                        SET SPECIAL SPNB PROCESSING
&MVT     SETB  0                        SET FOR MVT TSO, NOT MVS
&PDSDAIR SETB  0                        SET PDS NOT TO HANDLE DAIR ERR
         SPACE 5
PDS      ENTER
         SPACE 3
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
RPDL     EQU   7
WORKREG  EQU   8
BASEREG1 EQU   9
BASEREG2 EQU   10
BASEREG3 EQU   11
VLDBASE  EQU   12
CMDBASE  EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         LR    R2,R1          SAVE ADDR OF CPPL
         SPACE
         L     R3,CORESIZE               LRH 1.0
         GETMAIN R,LV=(R3)               LRH 1.0
         SPACE 2
         LR    WORKREG,R1    ADDR OF WORK AREA
         USING WORKAREA,WORKREG
         EJECT
*
*        CLEAR WORK AREA
*
         SPACE 2
         LA    R15,0(,R3)     LENGTH OF AREA
         LA    R14,0(,R1)     ADDRS OF AREA
         BALR  R4,R0          GASH ADRS FOR MVCL
         SR    R5,R5          ZERO PAD AND ZERO LENGTH FOR OP2
         MVCL  R14,R4         ZERO OUT THE WORK AREA
         SPACE 2
         STM   BASEREG1,BASEREG3,BASES SAVE BASE REGISTERS
         SPACE 3
*
*        INITIALIZE WORK AREA
*                                       >
         AIF   (&MVT).NOAUTH
         TESTAUTH FCTN=1                TEST FOR AUTH
         LTR   R15,R15                  AM I?
         BNZ   *+8                      NO
         OI    FLAG2,FAUTHR             YES!
.NOAUTH  ANOP
         SPACE 2
         MVC   BLDLLIST,BLDLPARM
         SPACE
*  GET TERMINAL LINE SIZE
         GTSIZE
         STH   R1,LINESIZE
         SPACE 3
         LA    R0,IOECB                 ECB ADDRESS
         ST    R0,IOBECB                SET INTO IOB
         LA    R0,INDCB                 DCB ADDRESSS
         ST    R0,IOBDCB                SET INTO DCB
         LA    R0,CCWS                  CCW CHAIN ADDRESS
         ST    R0,IOBCCW                SET INTO IOB
         MVI   IOBFLAG,X'42'            SET IOB FLAGS
         EJECT
*
*        ESTABLISH STAE EXIT
*
         SPACE 3
         MVC   STAEPARM(LSTAE),STAE MOVE PATTERN STAE TO WORK AREA
         STAE  STAEEXIT,CT,PARAM=WORKAREA,MF=(E,STAEPARM) ISSUE STAE
         SPACE
         LA    R15,MAINSAVE
         ST    R15,8(,R13)
         ST    R13,4(,R15)
         LR    R13,R15
         ST    R13,ADDRSAVE             ADDRESS OF FIRST SAVE AREA
         EJECT
*
*        LOAD TSO SERVICE ROUTINES
*
         SPACE 3
         USING CPPL,R2                  BASE FOR COMMAND PARM LIST
         MVC   ADDRUPT,CPPLUPT          ADDR OF USER PROFILE TABLE
         MVC   ADDRPSCB,CPPLPSCB        ADDR OF P S C B
         MVC   ADDRECT,CPPLECT          ADDR OF ENVIROMENT TABLE
         MVC   ADDRCBUF,CPPLCBUF        ADDR OF FIRST CMD BUFFER
         DROP  R2
         AGO   .LRH1
****
****     MODS BELOW NO LONGER NEEDED AS THE QUEUE COMMAND WILL
****     SET UP THE COMMAND BUFFER
**** START OF MODS BY LRH TO ALLOW  Q  TO INVOKE PDS WITH
****           WITH NO CBUF
         NC    ADDRCBUF,ADDRCBUF        TEST FOR ZERO
         BNZ   NOTQCALL                 JUMP IF NOT FROM Q
         L     R0,CORESIZ2              GET SECOND CORESIZE
         GETMAIN R,LV=(0)               GET A FAKE CBUF
         ST    R1,ADDRCBUF              UPDATE CBUF
         MVC   0(8,R1),FAKEBUF          MOVE THE FAKE CBUFFER
NOTQCALL DS    0H
.LRH1    ANOP  ,
         L     R2,ADDRECT               LOAD ADDRESS OF ECT
         USING ECT,R2
         MVC   MODECMD,ECTPCMD          MOVE THE PRIMARY COMMAND
         DROP  R2                       TELL ASSEMBLER
         MVI   MODEMSG+4,C' '           SET A BLANK
         LA    R2,MODECMD+7             POINT TO LAST CHARACTER
         LA    R0,1                     SET THE INCR
         LNR   R0,R0                    SET IT NEGATIVE
         LA    R1,MODECMD               SET THE END
         CLI   0(R2),C' '               TEST FOR BLANK
         BNE   *+8                      NO, CALC THE LENGTH
         BXH   R2,R0,*-8                GO TO TRY PREVIOUS
         SR    R2,R1                    CALC THE OFFSET
         LA    R2,6(R2)                 CALC THE LENGTH
         STH   R2,MODEMSG               STORE THE LENGTH
         SPACE 3
         LA    R1,PARSELST
         USING PPL,R1
         MVC   PPLUPT,ADDRUPT           SET ADDRESSES OF
         MVC   PPLECT,ADDRECT           CONTROL BLOCKS IN
         ST    WORKREG,PPLUWA           PARSE PARAMETER LIST
         LA    R0,ATTNECB
         ST    R0,PPLECB
         SPACE 2
         LOAD  EPLOC=IKJPUTL            PUTLINE SERVICE ROUTINE
         ST    R0,ADDRPUTL
         SPACE 2
         LOAD  EPLOC=IKJGETL            GETLINE SERVICE ROUTINE
         ST    R0,ADDRGETL
         SPACE 2
         LOAD  EPLOC=IKJPTGT            PUTGET SERVICE ROUTINE
         ST    R0,ADDRPTGT
         SPACE 2
         LOAD  EPLOC=IKJSCAN            COMMAND SCAN SERVICE ROUTINE
         ST    R0,ADDRSCAN
         EJECT
*
*
*        SET UP TO INVOKE PARSE TO GET DATA SET NAME
*
*
         SPACE
         L     R1,MAINPCL               ADDRESS OF PCL FOR DATASET NAME
         BAL   R14,GOPARSE              GET THE DATA SET NAME
         B     EXIT12                   ERROR EXIT
         SPACE 2
         XC    STAXLIST(20),STAXLIST
         STAX  ATTNEXIT,USADDR=(WORKREG),REPLACE=YES,                  X
               IBUF=(MSGTEXT2,0),OBUF=(MODECMD,8),                     X
               MF=(E,STAXLIST)
         SPACE
         XC    ADDRCBUF,ADDRCBUF        ZERO BUFFER ADDRESS
         SPACE 2
RESTART  DS    0H
         BAL   R14,ALLOCATE             ALLOCATE THE DATA SET
         B     EXIT12                   IF ALLOCATION UNSUCCESSFUL
         SPACE 2
         NI    FLAGS,255-FRESTART
         MVC   INDCB(LEXCPDCB),EXCPDCB  MOVE PATTERN DCBS TO
         MVC   STOWDCB(LSAMDCB),SAMDCB  WORK AREA
         MVC   DCBDDNAM-IHADCB+INDCB,DDNAME
         MVC   DCBDDNAM-IHADCB+STOWDCB,DDNAME
         SPACE
         LA    R1,EXLSTX
         ST    R1,0(,R13)
         MVC   DCBEXLST+1-IHADCB+INDCB(3),1(R13)
         LA    R1,JFCB
         ST    R1,EXLSTX
         MVI   EXLSTX,X'87'
         MVI   OPENLIST,X'80'
         RDJFCB (INDCB,INPUT),MF=(E,OPENLIST)
         XC    OPENLIST(8),OPENLIST
         MVI   OPENLIST+4,X'80'
         OPEN  (INDCB,INPUT,STOWDCB,INPUT),MF=(E,OPENLIST)
         MVI   OPENLIST,X'80'
         CLOSE (STOWDCB),MF=(E,OPENLIST)
         SPACE
         TM    INDCB+48,X'10' DID DCB OPEN?
         BO    NEWCMD                   CONTINUE IF YES
         SPACE 2
         MESSAGE MSGNOPEN               NO, ISSUE MESSAGE AND EXIT
         B     EXIT12                   STAGE DOOR RIGHT
         EJECT
*
*
*        DISPLAY PROGRAM OPTIONS FOR USER
*
*
         SPACE 2
LISTOPTS DS    0H
         SCREEN CLEAR
         SPACE
PUTOPTNS DS    0H
         LA    R2,OPTNTBL
         SPACE
NEXTOPTN DS    0H
        $PUTLINE (R2)                   DISPLAY OPTION LINE
         SPACE
         MVC   0(2,R13),0(R2)
         LA    R0,1
         LH    R1,0(,R13)               ADJUST TO NEXT OPTION
         AR    R1,R0
         OR    R1,R0
         XR    R1,R0
         AR    R2,R1
         CLI   0(R2),X'FF'              LAST ONE?
         BNE   NEXTOPTN                 NO
         SPACE 2
NEWCMD   DS    0H
         MVI   ATTNECB,0
         NI    FLAGS,255-FMEMBER1-FMEMBER2-FATTR
         NI    FLAGS+1,255-FATTN
         XC    ATTRYES,ATTRYES
         XC    ATTRNO,ATTRNO
         SPACE 2
         TM    FLAGS,FCMD               COMMAND BUFFER AVAILABLE?
         BO    HAVECMD                  YES
         SPACE 2
         SR    R1,R1                    ZERO THE MESSAGE ADDRESS
         TM    FLAGS+2,FMODE            TEST FOR MODE MESSAGE
         BO    *+8                      ALREADY HAD ONE, DON'T
         LA    R1,MODEMSG               LOAD ADDRESS OF MODE MSG
         OI    FLAGS+2,FMODE            SET MESSAGE SENT
         SPACE 2
        $PUTGET (R1),ATTN=NEWCMD
         EJECT
*
*
*        SET UP FOR SUBCOMMAND SCAN
*
*
         SPACE 2
HAVECMD  DS    0H
         NI    FLAGS,255-FCMD
         SPACE 2
         LA    R1,PARMLIST
         USING CSPL,R1
         SPACE
         MVC   CSPLUPT,ADDRUPT
         MVC   CSPLECT,ADDRECT
         LA    R0,ATTNECB
         ST    R0,CSPLECB
         MVI   ATTNECB,0
         LA    R0,SCANANSR
         ST    R0,CSPLOA
         XC    SCANANSR,SCANANSR
         LA    R0,R14SAVE
         ST    R0,CSPLFLG
         XC    R14SAVE,R14SAVE
         SPACE
         MVC   CSPLCBUF,ADDRCBUF
         SPACE
         L     R15,ADDRSCAN
         BALR  R14,R15                  INVOKE COMMAND SCAN
         SPACE
         LA    R1,SCANANSR              ADDR OF ANSWER AREA
         USING CSOA,R1
         SPACE
         TM    CSOAFLG,CSOANOC          EMPTY BUFFER?
         BO    NEWCMD                   YES, STILL NEED COMMAND
         SPACE
         TM    CSOAFLG,CSOAVWP+CSOAVNP  VALID COMMAND?
         BNZ   CHECKCMD                 YES
         SPACE
         MESSAGE MSGINVLD               INVALID COMMAND
         B     NEWCMD
         EJECT
CHECKCMD DS    0H
         OI    FLAGS,FOPTIONS
         TM    CSOAFLG,CSOAVWP          OPERAND PRESENT?
         BO    *+8                      YES
         XI    FLAGS,FOPTIONS           NO
         SPACE 2
         L     R2,CSOACNM               ADDR OF COMMAND NAME
         LH    R3,CSOALNM               LENGTH OF NAME
         BCTR  R3,0
         SPACE
         TM    CSOAFLG,CSOAEXEC         IMPLICIT EXEC
         BZ    *+12                     NO, DON'T PROCESS IT
         LA    R14,CALLPARM             POINT TO CALL POINTER
         B     CMDVALID                 PROCESS IMPLICIT EXEC
         DROP  R1
         SPACE 2
         LA    R1,CMDTABLE
         SR    R15,R15                  SET UP FOR COMMAND SCAN
         SR    R14,R14
         SPACE 2
CMDSCAN  IC    R15,8(,R1)               GET CMD LENGTH
         CR    R15,R3                   CHECK CMD LENGTH
         BNH   NEXTCMD
         SPACE
         CLC   0(0,R1),0(R2)
         EX    R3,*-6                   CHECK COMMAND NAME
         BE    THISCMD                  MATCH, MUST BE COMMAND
         SPACE
NEXTCMD  DS    0H
         LA    R1,16(,R1)               NEXT ENTRY IN TABLE
         CLI   0(R1),X'FF'              END OF TABLE?
         BNE   CMDSCAN                  NO, CONTINUE
         SPACE
         LTR   R14,R14                  COMMAND SELECTED?
         BNZ   CMDVALID                 YES
         SPACE
         LA    R14,CALLPARM             POINT TO THE PARM
         B     CMDVALID                 GO TO PROCESS IT
         SPACE
         LA    R1,MSGUNKN               NOT A VALID COMMAND
         SPACE
CMDERROR DS    0H
         MESSAGE (R1)
         B     PUTOPTNS
         EJECT
THISCMD  DS    0H
         LTR   R14,R14                  PREVIOUS CMD SELECTED?
         LR    R14,R1
         BZ    NEXTCMD                  NO, FIRST SELECT
         LA    R1,MSGAMBIG
         B     CMDERROR                 YES, ERROR
         SPACE
CMDVALID DS    0H
         MVC   ADDRPCL,12(R14)          SAVE PCL ADDR
         L     R1,8(,R14)               GET COMMAND PROCESSOR ADDRESS
         ST    R1,ADDRCMD               SAVE IT
         SPACE 2
         TM    ADDRPCL,X'40'            IGNORE OPTIONS?
         BO    CALLCMD                  YES
         SPACE
         TM    ADDRPCL,X'80'            OPERANDS REQUIRED?
         BZ    CMDPARSE                 YES
         TM    FLAGS,FOPTIONS           NO, WERE ANY SPECIFIED?
         BZ    CALLCMD
         SPACE 2
CMDPARSE DS    0H
         OI    FLAGS+1,FATTN            ALLOW ATTENTIONS
         L     R1,ADDRPCL
         BAL   R14,GOPARSE              GET THE COMMAND OPERANDS
         B     CMDCLEAR                 IF PARSE NOT SUCCESSFUL
         B     CALLCMD                  IF PARSE SUCCESSFUL
         SPACE 2
CMDCLEAR DS    0H
         LA    R1,PARMLIST              AREA FOR STACK PARM LIST
         USING IOPL,R1
         SPACE
         MVC   IOPLUPT,ADDRUPT
         MVC   IOPLECT,ADDRECT
         LA    R0,ATTNECB
         MVI   ATTNECB,0
         ST    R0,IOPLECB
         SPACE 2
         STACK PARM=PARMLIST+16,DELETE=ALL,MF=(E,(1))
         SPACE 3
         TCLEARQ INPUT                  CLEAR INPUT BUFFERS
         SPACE 3
         B     NEWCMD
         EJECT
CALLCMD  DS    0H
         L     R15,ADDRCMD
         L     RPDL,ADDRPDL             ADDRESS OF PARSE DESC LIST
         BALR  R14,R15                  LINK TO COMMAND PROCESSOR
         LR    R2,R15                   SAVE THE RETURN CODE
         SPACE
         BAL   R14,FREEPDL              CLEAN UP AFTER COMMAND
         SPACE 3
         LR    R15,R2                   RESTORE THE RETURN CODE
         L     R2,ADDRECT               LOAD ADDRESS OF ECT
         LTR   R15,R15                  TEST FOR <0
         BM    CALLCMD1                 YES, IT'S ALREADY STORED
         USING ECT,R2
         ST    R15,ECTRCDF              STORE THE RETURN CODE
         MVI   ECTRCDF,0                SET EQUAL TO RETURN CODE
CALLCMD1 DS    0H
         TM    ECTSWS,ECTLOGF           TEST FOR LOGOFF
         BO    END                      YES, END IT
         DROP  R2
         B     NEWCMD
         EJECT
*
*
*        TERMINAL ATTENTION EXIT ROUTINE
*
*
         SPACE 3
ATTNEXIT ENTER ATTNEXIT
         TM    FLAGS+1,FATTN  ALLOW ATTENTIONS?
         BZ    EXITATTN       NO
         SPACE 2
         L     R2,0(,R1)      GET ADDRESS OF TAIE
         USING TAIE,R2
         SR    R0,R0
         IC    R0,TAIETGET    GET THE TGET RETURN CODE
         CH    R0,EXITH12     TEST IF ANY DATA
         BNE   EXITATTN       NO, JUST IGNORE IT
         SPACE
         SR    R1,R1          ZERO THE MESSAGE POINTER
        $PUTGET (R1),ATTN=EXITATTN
         OI    FLAGS,FCMD     SET THAT I HAVE A COMMAND
         SPACE
         STATUS STOP          STOP THE SUBTASKS
         SPACE
         POST  ATTNECB
         SPACE
EXITATTN DS    0H
         OI    FLAGS+2,FMODE  SET MODE MESSAGE ISSUED
         SR    R15,R15
         EXIT
         DROP  R2
EXITH12  DC    H'12'          RETURN CODE FOR EXCESS DATA
         EJECT
*
*
*        LIST SUBCOMMAND
*
*
         SPACE 3
LIST     ENTER COMMAND,PDL=PDLLIST      ESTABLISH SUBCOMMAND
         TM    FLAGS,FLOADMOD           THIS A LOAD MODULE LIBRARY?
         LA    R1,MSGNLIST              MSG IF YES
         BO    LISTERR                  YES, ERROR
         SPACE 2
         MVC   DIRNAME,MEMBER1          LOCATE MEMBER TO BE LISTED
         BLDL  INDCB,BLDLLIST
         B     *+4(R15)
         SPACE 2
         B     LIST1                    00 - SUCCESSFUL
         B     LISTNONE                 04 - MEMBER NOT FOUND
         B     LISTDERR                 08 - I/O ERROR IN DIRECTORY
         SPACE 2
LIST1    DS    0H
         OI    FLAGS+1,FATTN            INDICATE ATTENTIONS ACCEPTED
         NI    FLAGS+2,255-FMODE        INDICATE MODE MESSAGE NEEDED
         SPACE
         LH    R0,LISTH8                LOAD THE DEFAULT
         STH   R0,LISTCOLL              STORE THE LENGTH
         SPACE
         SR    R0,R0                    SET DEFAULT VARIABLE START
         TM    DCBRECFM-IHADCB+INDCB,X'40' TEST FOR VARIABLE
         BO    *+12                     YES
         LH    R0,LRECL                 LOAD THE LRECL
         SH    R0,LISTCOLL              SUBTRACT 8
         STH   R0,LISTCOL               STORE THE LENGTH
         SPACE
         TM    PCLL4+6,X'80'            TEST FOR THERE
         BZ    LIST1A                   NO, DON'T CONVERT
         L     R1,PCLL4                 POINT TO THE ENTRY
         LH    R2,PCLL4+4               LOAD THE LENGTH
         BCTR  R2,0                     SUB 1
         PACK  DOUBLE,0(0,R1)           PACK THE DECIMAL
         EX    R2,*-6                   ALL OF IT
         CVB   R0,DOUBLE                CONVERT IT
         LTR   R0,R0                    WAS IT ZERO
         BZ    LIST1A                   NO
         BCTR  R0,0                     SUBTRACT ONE
         STH   R0,LISTCOL               STORE THE COLUMN NUMBER
LIST1A   DS    0H
         TM    PCLL5+6,X'80'            TEST FOR THERE
         BZ    LIST1B                   NO, DON'T CONVERT
         L     R1,PCLL5                 POINT TO THE ENTRY
         LH    R2,PCLL5+4               LOAD THE LENGTH
         BCTR  R2,0                     SUB 1
         PACK  DOUBLE,0(0,R1)           PACK THE DECIMAL
         EX    R2,*-6                   ALL OF IT
         CVB   R0,DOUBLE                CONVERT IT
         LTR   R0,R0                    TEST FOR ANY
         BZ    LIST1B                   NO, DON'T STORE
         STH   R0,LISTCOLL              STORE THE COLUMN NUMBER
LIST1B   DS    0H
         EJECT
*
*
*        INITIALIZE CHANNEL PROGRAM TO READ SELECTED MEMBER
*
*
*        CCW CHAIN USED IS -      SEARCH ID    -----+
*                                 TIC           ----+
*                                 READ COUNT
*                                 READ DATA
*
         SPACE 2
         XC    CCWS(LCCWS),CCWS         CLEAR CCW AREA
         SPACE 2
         LA    R0,IOBSEEK               ADDRESS OF IOB SEEK
         LA    R1,CCWS                  FIRST CCW - SEARCH CCW
         L     R2,BUFFADDR              ADDRESS OF BUFFER
         ST    R0,CCWS                  SEEK ADDRESS IN CCW1
         ST    R1,CCWS+8                TIC ADDRESS IN CCW2
         ST    R0,CCWS+16               READ COUNT ADDR IN CCW3
         ST    R2,CCWS+24               BUFFER ADDR IN CCW4
         LH    R3,BUFFSIZE              LENGTH OF BUFFER
         STH   R3,CCWS+30               SET IN CCW4
         SPACE 2
         OC    CCWS(LLISTCCW),LISTCCWS  COPY PATTERN CCW CHAIN
         SPACE 2
*
*        CONVERT TTR OF START OF MEMBER TO CCHHR FORMAT
*
         SPACE 2
         STM   14,12,12(13)             SAVE REGISTERS FOR RETURN
         LA    R2,IOBSEEK-3             RETURN CCHHR IN IOBSEEK
         L     R1,INDCB+(DCBDEBAD-IHADCB) DEB ADDRESS
         MVI   DIRTTR+3,0               CLEAR TTR CONCATENTION FIELD
         L     R0,DIRTTR                GET TTR0 OF MEMBER
         LA    R15,X'100'               GET TTR0 OF PREVIOUS RECORD
         SLR   R0,R15
         L     R15,CVT
         L     R15,CVTPCNVT(,R15)       ADDRESS OF TTR-CCHHR CONVERT
         LR    R3,R13                   SAVE ADDRESS OF SAVE AREA
         BALR  R14,R15
         LR    R13,R3                   RESTORE SAVE AREA ADDRESS
         LM    14,12,12(13)             RESTORE REGISTERS
         EJECT
LIST2    DS    0H
         MVI   IOECB,0
         EXCP  IOB                      READ NEXT RECORD
         WAIT  ECB=IOECB
         MVI   DCBIFLGS-IHADCB+INDCB,0  CLEAR I/O STATUS FLAGS
         SPACE 2
         SR    R15,R15                  SET GOOD RETURN CODE
         TM    IOBCSW+3,X'01'           END-OF-FILE?
         BO    LISTEND                  YES
         SPACE 2
         CLI   IOECB,X'42'              OUT OF EXTENT?
         BNE   LIST3                    NO, CHECK STATUS
         BAL   R14,NEWEXTNT             YES, ADJUST FOR NEW EXTENT
         MVI   IOBSEEK+4,0              CORRECT TO RECORD 0
         B     LIST2                    THEN RE-READ RECORD
         SPACE
LIST3    DS    0H
         CLI   IOECB,X'7F'              SUCCESSFUL?
         LA    R1,MSGLISTI              ERROR MESSAGE FOR I/O ERROR
         BNE   LISTERR                  NO, I/O ERROR
         SPACE 2
LIST5    DS    0H
         LH    R3,BUFFSIZE              MAXIMUM RECORD LENGTH
         SH    R3,IOBCSW+5              SUBTRACT RESIDUAL COUNT
         L     R4,BUFFADDR              START OF BUFFER
         AR    R3,R4                    ADDRESS OF END OF BUFFER
         SPACE 2
         TM    DCBRECFM-IHADCB+INDCB,X'40' IS FILE VARIABLE FORMAT?
         LA    R5,LISTFIX               FIXED LENGTH RECORD PROCESSOR
         BZ    LIST6                    NO, FIXED FORMAT
         SPACE 2
         MVC   0(2,R13),0(R4)           GET BLOCK LENGTH
         LH    R3,0(,R13)
         AR    R3,R4                    END OF VARIABLE-LENGTH BLOCK
         LA    R4,4(,R4)                START OF RECORD ENTRIES
         LA    R5,LISTVAR               VARIABLE LEN RECORD PROCESSOR
         SPACE 3
LIST6    DS    0H
         BCTR  R3,0                     SET END OF BUFFER ADDRESS
         BR    R5                       PROCESS FIRST RECORD
         EJECT
LISTVAR  DS    0H
         MVC   0(2,R13),0(R4)           GET LENGTH OF VARIABLE RECORD
         LA    R4,4(,R4)                SKIP OVER HEADER
         LH    R2,0(,R13)               GET LOGICAL RECORD LENGTH
         LA    R0,4
         SR    R2,R0                    SUBTRACT HEADER LENGTH
         BP    LISTFIX1                 CONTINUE IF RECORD EXISTS
         SPACE
         SR    R2,R2
         B     LIST7
         SPACE 2
LISTFIX  DS    0H
         LH    R2,LRECL                 GET RECORD LENGTH IF NOT
LISTFIX1 DS    0H
         TM    DCBRECFM-IHADCB+INDCB,X'06' SPECIAL CONTROL CHARACTERS?
         BZ    LIST8                    NO
         LA    R4,1(,R4)                YES, SKIP CARRIAGE CONTROL
         BCT   R2,LIST8
         SPACE 2
LIST7    DS    0H
         BXLE  R4,R2,0(R5)              SKIP TO NEXT RECORD
         B     LIST2                    IF END OF BLOCK
         SPACE 3
LIST8    DS    0H
         LH    R1,PCLL2                 LOAD THE KEYWORD VALUE
         SLL   R1,2                     MULT BY 4
         LA    R15,MSGTEXT1+4           POINT TO BEGIN
         B     *+4(R1)                  GO TO CORRECT ROUTINE
         SPACE
         B     LIST8A                   +0 NUM (DEFAULT)
         B     LIST8C                   +1 NONUM
         B     LIST8A                   +2 NUM
         B     LIST8B                   +3 SNUM
         SPACE
LIST8A   LH    R1,LISTCOL               GET BEGIN OFFSET
         LA    R1,0(R1,R4)              GET THE ADDRESS
         LH    R14,LISTCOLL             GET THE LENGTH
         BCTR  R14,0                    SUBTRACT ONE
         MVC   0(0,R15),0(R1)           MOVE THE SEQUENCE NUMBER
         EX    R14,*-6                  MOVE IT
         LA    R1,1(R14,R15)            POINT TO THE END
         MVI   0(R1),C' '               SET A BLANK
         CLI   0(R15),C'0'              IS THE FIRST DIGIT 0
         BNE   *+18                     NO, DON'T SUPPRESS ANY MORE
         MVC   0(0,R15),1(R15)          MOVE THE DATA
         EX    R14,*-6
         BCT   R14,*-26                 GO TO TRY NEXT
         LA    R15,2(R14,R15)           POINT TO THE NEW ONE
LIST8B   LH    R1,LISTCOL               GET THE COLUMN NUMBER
         LTR   R1,R1                    TEST FOR 0
         BNZ   LIST8D                   NO, THIS IS GOOD LENGTH
         AH    R4,LISTCOLL              POINT TO THE DATA
         SH    R2,LISTCOLL              AND THE GOOD LENGTH
LIST8C   DS    0H
         LR    R1,R2                    LENGTH OF DATA AREA
LIST8D   DS    0H
         BCTR  R1,0                     DECREMENT RECORD LEN FOR MOVE
         MVC   0(0,R15),0(R4)
         EX    R1,*-6                   MOVE RECORD TO LINE BUFFER
         LA    R1,1(R15,R1)             LINE LENGTH PLUS HEADER FIELD
         LA    R0,MSGTEXT1              LINE BEGIN ADDRESS
         SR    R1,R0
         SLL   R1,16
         ST    R1,MSGTEXT1              CREATE OUTPUT LINE HEADER
         LA    R1,MSGTEXT1
LISTIT   DS    0H
        $PUTLINE MSGTEXT1,ATTN=LISTEND  OUTPUT THE NEXT LINE
         SPACE 1
         B     LIST7                    GET NEXT RECORD
LISTH8   DC    H'8'
         EJECT
LISTERR  DS    0H                       ERROR DURING PROCESSING
         MESSAGE (R1)                   ISSUE ONLY PRIMARY MESSAGE
         LA    R15,12                   SET RETURN CODE
         B     LISTEND                  EXIT
         SPACE 2
LISTNONE DS    0H
         MESSAGE MSGNONE                ERROR - MEMBER DOES NOT EXIST
         LA    R15,4                    SET RETURN CODE
         B     LISTEND
         SPACE 2
LISTDERR DS    0H
         MESSAGE MSGIOERR               I/O ERROR IN DIRECTORY
         LA    R15,8                    SET RETURN CODE
         SPACE 3
LISTEND  DS    0H
         EXIT  COMMAND                  EXIT FROM SUBCOMMAND
         EJECT
*
*
*              USAGE STATISTICS SUBCOMMAND
*
*
         SPACE 3
USAGE    ENTER COMMAND     *** NO PDL IS USED FOR THIS SUBCOMMAND ***
         SPACE 2
         OI    FLAGS+1,F1STREAD         INDICATE FIRST ENTRY
         OI    FLAGS+2,FDIRSCAN         ALSO DIRECTORY SCAN REQUEST
         NI    FLAGS+2,255-FMODE        INDICATE MODE MESSAGE NEEDED
         SPACE 2
         BAL   R14,READDIR              SCAN THROUGH THE DIRECTORY
         B     USE1                     IF END OF DIRECTORY
         B     USE2                     IF I/O ERROR
         B     USE3                     IF PREMATURE EXIT
         SPACE 2
USE1     DS    0H
         LA    R2,MSGUSEB               MSG - TOTAL BLOCKS ALLOCATED
         LH    R1,TOTBLOCK              GET COUNTER
         BAL   R4,USEFMT                FORMAT MESSAGE
         SPACE
         LA    R2,MSGUSED               MSG - TOTAL BLOCKS USED
         LH    R1,TOTUSED               GET COUNTER
         BAL   R4,USEFMT
         SPACE
         LA    R2,MSGUSER               MSG - TOTAL MEMBERS
         LH    R1,TOTMEMR               GET COUNTER
         AH    R1,TOTMEMA
         BAL   R4,USEFMT
         SPACE
         LA    R2,MSGUSEA               MSG - TOTAL ALIASES
         LH    R1,TOTMEMA
         LTR   R1,R1                    ANY ALIASES?
         BZ    USETOTAL                 NO
         BAL   R4,USEFMT
         SPACE 2
USETOTAL DS    0H
         L     R1,DCBDEBAD-IHADCB+INDCB GET DEB ADDRESS
         SR    R14,R14
         SR    R15,R15
         SPACE 2
*
*        CALCULATE TOTAL SIZE OF DATA SET AND UNUSED SPACE
*
         SPACE 2
         IC    R14,DEBXTNT#(,R1)        GET NUMBER OF EXTENTS IN D.S
         STH   R14,DSNEXTNT             SAVE VALUE
         LA    R15,DEBAMLNG             GET SIZE OF EACH EXTENT
         SR    R0,R0
USEXTNT  DS    0H
         AH    R0,DEBEXTNT+14(,R1)      ADD NUMBER OF TRACKS IN EXTENT
         AR    R1,R15                   TO TOTAL AND JUMP TO NEW EXTENT
         BCT   R14,USEXTNT              IF MORE EXTENTS
         SPACE
         STH   R0,DSNTOTAL              SAVE TOTAL D.S. SIZE IN TRACKS
         SPACE 2
         L     R1,CVT                   GET CVT ADDRESS
         L     R1,0(,R1)
         L     R1,4(,R1)
         L     R1,12(,R1)               ADDRESS OF TIOT
         AH    R1,DCBTIOT-IHADCB+INDCB  ADDRESS OF TIOT ENTRY
         L     R1,16(,R1)               ADDRESS OF UCB
         MVC   VOLUME,UCBVOLI(R1)       EXTRACT VOLUME SERIAL
         SPACE 2
         L     R14,OBTAIN               GET OBTAIN FLAGS
         LA    R15,DSNAME               ADDRESS OF FULL DATA SET NAME
         LA    R0,VOLUME                ADDRESS OF VOLUME SERIAL
         LA    R1,DSCB                  ADDRESS OF DSCB/WORKAREA
         STM   R14,R1,CAMLST            SAVE FOR OBTAIN
         SPACE
         SR    R0,R0
         OBTAIN CAMLST                  GET DSCB
         LTR   R15,R15
         BNZ   USENDSCB
         SPACE 2
         LH    R1,DS1LSTAR+DSCB-44      GET TT OF LAST TRACK
         LA    R1,1(,R1)                JUMP FOR COMPUTATION
         LH    R0,DSNTOTAL              COMPUTE AMOUNT OF FREE SPACE
         SR    R0,R1
         STH   R0,DSNEMPTY
         SPACE 3
         LH    R1,DSNTOTAL              TOTAL SPACE USED
         LA    R2,MSGUSESI              MSG FOR TOTAL SPACE
         BAL   R4,USEFMT
         SPACE
         LH    R1,DSNEMPTY              TOTAL FREE SPACE
         LA    R2,MSGUSEMP
         BAL   R4,USEFMT
         SPACE
         LH    R1,DSNEXTNT              TOTAL EXTENTS
         LA    R2,MSGUSEXT
         BAL   R4,USEFMT
         SR    R15,R15                  SET RETURN CODE
         B     USEEXIT
         SPACE 2
USENDSCB DS    0H
         MESSAGE MSGNDSCB
         LA    R15,8                    SET RETURN CODE
         B     USEEXIT
         SPACE 3
USEFMT   DS    0H
         CVD   R1,DOUBLE                CONVERT COUNTER TO DECIMAL
         LA    R14,10
         SR    R15,R15
USEFMT1  DS    0H
         SR    R0,R0
         DR    R0,R14                   COMPUTE NUMBER OF SIGIF. DIGITS
         LTR   R1,R1                    RESIDUAL FACTOR ZERO?
         LA    R15,1(,R15)
         BNZ   USEFMT1                  NO, KEEP GOING
         BCTR  R15,0                    YES, REDUCE FOR EXECUTE
         LR    R1,R15
         SLL   R1,4                     SHIFT FOR EXECUTED UNPACK
         OI    DOUBLE+7,X'0F'           CORRECT SIGN FOR EXECUTE
         SPACE
         UNPK  MSGTEXT1+4(0),DOUBLE
         EX    R1,*-6
         LA    R1,MSGTEXT1+5(R15)
         SPACE
         LH    R15,0(,R2)
         LA    R0,5
         SR    R15,R0
         MVC   0(,R1),4(R2)
         EX    R15,*-6
         LA    R15,1(R1,R15)
         LA    R0,MSGTEXT1
         SR    R15,R0
         SLL   R15,16
         ST    R15,MSGTEXT1
         SPACE 2
        $PUTLINE MSGTEXT1
         SPACE
         BR    R4                       RETURN
         SPACE 3
USE2     DS    0H
USE3     DS    0H
         LA    R15,12                   SET RETURN CODE
         MESSAGE MSGUSERR
         SPACE 3
USEEXIT  EXIT  COMMAND
         EJECT
*
*
*        RENAME SUBCOMMAND
*
*
         SPACE 3
RENAME   ENTER COMMAND,PDL=PDLRENAM     ESTABLISH SUBCOMMAND
         SPACE
         BAL   R14,OPENSTOW             OPEN STOW DCB
         BZ    RENEXIT                  EXIT IF DATA SET NOT OPENED
         SPACE 1
         STOW  STOWDCB,MEMBERS,C        ISSUE STOW W/ CHANGE OPTION
         SPACE
         B     *+4(R15)                 PROCESS RETURN CODE
         B     RENAME1                   0- SUCESSFUL
         B     RENDUP                    4- MEMBER EXISTS WITH NEW NAME
         B     RENAMENO                  8- CURRENT NAME DOES NOT EXIST
         B     RENAMEUN                 12- INVALID RETURN FROM RENAME
         B     RENAMERR                 16- IO ERROR IN DIRECTORY
         EJECT
RENAME1  DS    0H
         MESSAGE MSGRENAM               SEND MESSAGE - MEMBER RENAMED
         SR    R15,R15                  SET RETURN CODE
         B     RENEXIT
         SPACE 3
RENAMENO DS    0H
         MESSAGE MSGNONE                ERROR - MEMBER DOES NOT EXIST
         LA    R15,4                    SET RETURN CODE
         B     RENEXIT
         SPACE 2
RENDUP   DS    0H
         MESSAGE MSGEXIST               ERROR - DUPLICATE MEMBER
         LA    R15,12                   SET RETURN CODE
         B     RENEXIT
         SPACE 2
RENAMEUN DS    0H
         MESSAGE MSGSTOWC               ERROR RETURN FROM RENAME
         LA    R15,16                   SET RETURN CODE
         B     RENEXIT
         SPACE 2
RENAMERR DS    0H
         MESSAGE MSGIOERR               I/O ERROR IN DIRECTORY
         LA    R15,8                    SET RETURN CODE
         SPACE 3
RENEXIT  DS    0H
         EXIT  COMMAND
         EJECT
*
*
*        ALIAS SUBCOMMAND
*
*
         SPACE
ALIAS    ENTER COMMAND,PDL=PDLALIAS     ESTABLISH SUBCOMMAND
         SPACE 2
         MVC   DIRNAME,MEMBER1          ORIGINAL MEMBER NAME
         SPACE
         BLDL  INDCB,BLDLLIST           LOCATE DIRECTORY ENTRY
         MVC   DIRFLAG(DIREND-DIRFLAG),DIRFLAG+2 BLDL ADDS THINGS
         SPACE
         B     *+4(R15)                 PROCESS RETURN CODE
         B     ALIAS1                   00-SUCCESSFUL
         B     ALIASNON                 04-MEMBER NOT FOUND
         B     ALIASDIR                 08-I/O ERROR
         SPACE 3
ALIAS1   DS    0H
         TM    DIRFLAG,X'80'            IS EXISTING MODULE AN ALIAS?
         BZ    ALIAS2                   NO
         SPACE
         MESSAGE MSGNREAL               YES, ERROR
         LA    R15,12                   PROCESSING ERROR
         B     ALIASEND
         EJECT
ALIAS2   DS    0H
         MVC   DIRNAME,MEMBER2          SET ALIAS NAME
         OI    DIRFLAG,X'80'            SET ALIAS FLAG
         SPACE
         IC    R15,DIRFLAG              INSERT THE LENGTH
         N     R15,ALIASF31             TURN OFF BITS
         IC    R1,ALIASFLG(R15)         LOAD DEFAULT
         STC   R1,FLAGS+3               STORE THE FLAGS
         SPACE
         XC    SAVALI,SAVALI            ZERO THE DATA
         XC    SAVSSI,SAVSSI            ZERO THE DATA
         XC    SAVAC,SAVAC              ZERO THE DATA
         LA    R1,DIRSCTRL              POINT TO COMMON AREA
         TM    FLAGS+3,FLAGSCTR         IS IT SCTR
         BZ    *+8                      NO
         LA    R1,DIRSCTR(,R1)          BUMP PAST SCTR SECTION
         SPACE
         TM    FLAGS+3,FLAGALI          TEST FOR ALIAS SECTION
         BZ    *+14
         MVC   SAVALI,0(R1)             SAVE THE DATA
         LA    R1,DIRALIL(R1)           BUMP PAST IT
         SPACE
         TM    FLAGS+3,FLAGSSI          TEST FOR SSI
         BZ    *+22
         LA    R1,1(,R1)                SET FOR ROUND
         N     R1,ALIASFM2              ROUND IT TO HALFWORD
         MVC   SAVSSI,0(R1)             COPY THE DATA
         LA    R1,DIRSSIL(,R1)          BUMP IT
         SPACE
         TM    FLAGS+3,FLAGAC           TEST FOR AC
         BZ    *+14
         MVC   SAVAC,0(R1)              BUMP IT
         LA    R1,DIRACL(,R1)           BUMP THE POINTER
         SPACE
         MVC   DIREP(DIRALIL),SAVALI    MOVE THE DATA
         MVC   DIRSSI(DIRSSIL),SAVSSI   MOVE THE DATA
         MVC   DIRAC(DIRACL),SAVAC      MOVE THE DATA
         SPACE
         TM    FLAGS,FLOADMOD           IS THIS A LOAD MODULE?
         BZ    ALIAS4                   NO
         SPACE
         TM    DIRORIGN,X'80'           TEST FOR VS
         BO    *+12                     YES, DO IT ANYWAY
         SPACE
         TM    DIRATTR,ATTRRENT+ATTRREUS MODULE RE-ENTERANT/REUSABLE?
         BZ    ALIAS3                   NO
         SPACE
         MVC   DIRREAL,MEMBER1          REAL MODULE NAME
         MVC   DIREP,DIRENTRY           REAL MODULE ENTRY ADDRESS
         MVC   SAVALI,DIREP             COPY THE DATA
         OI    FLAGS+3,FLAGALI          SET ALIAS ENTRY
         SPACE
ALIAS3   DS    0H
         LA    R1,DIRSCTRL              POINT TO COMMON AREA
         TM    FLAGS+3,FLAGSCTR         IS IT SCTR
         BZ    *+8                      NO
         LA    R1,DIRSCTR(,R1)          BUMP PAST SCTR SECTION
         SPACE
         TM    FLAGS+3,FLAGALI          TEST FOR ALIAS SECTION
         BZ    *+14
         MVC   0(DIRALIL,R1),SAVALI     SAVE THE DATA
         LA    R1,DIRALIL(R1)           BUMP PAST IT
         SPACE
         TM    FLAGS+3,FLAGSSI          TEST FOR SSI
         BZ    *+26
         MVI   0(R1),0                  ZERO THE PAD BYTE FOR ROUND
         LA    R1,1(,R1)                SET FOR ROUND
         N     R1,ALIASFM2              ROUND IT
         MVC   0(DIRSSIL,R1),SAVSSI     COPY THE DATA
         LA    R1,DIRSSIL(,R1)          BUMP IT
         SPACE
         TM    FLAGS+3,FLAGAC           TEST FOR AC
         BZ    *+14
         MVC   0(DIRACL,R1),SAVAC       BUMP IT
         LA    R1,DIRACL(,R1)           BUMP THE POINTER
         SPACE
         MVI   0(R1),0                  ZERO TRAILING BYTE
         LA    R0,DIRFLAG               POINT TO THE LENGTH CALC
         SR    R1,R0                    CALC THE LENGTH
         SRL   R1,1                     GET NUMBER OF HALF WORDS
         NI    DIRFLAG,X'E0'            TURN OFF THE LENGTH
         OI    DIRFLAG,0                SET THE LENGTH
         EX    R1,*-4                   WHEN EXECUTED
         SPACE
         BAL   R14,READCESD             LOCATE POSSIBLE EXTERNAL NAME
         B     ALIAS4                   NOT FOUND, MUST BE PSUEDO ENTRY
         SPACE
         LTR   R1,R1                    ENTRY ADDRESS ZERO?
         BZ    ALIAS3A                  ES
         NI    DIRATTR+1,255-ATTREP0    NO, INSURE ATTR FLAG OFF
ALIAS3A  DS    0H
         ST    R1,0(,R13)               MOVE ENTRY ADDRESS FOR
         MVC   DIRENTRY,1(R13)          ALIAS TO DIRECTORY ENTRY
         SPACE 2
         TM    DIRATTR,ATTRSCTR         TEST FOR SCTR
         BZ    ALIAS4                   NO, DON'T CHANGE THE EP
         STH   R0,DOUBLE                ST THE ESD ENTRY FOR THE EP
         MVC   DIRESDEN,DOUBLE          ST THE ESD ENTRY FOR THE EP
         SPACE
ALIAS4   DS    0H
         SPACE
         BAL   R14,OPENSTOW             OPEN OUTPUT DCB
         LA    R15,12                   SET RETURN CODE
         BZ    ALIASEND                 EXIT IF DCB NOT OPENED
         SPACE
         STOW  STOWDCB,DIRNAME,A        ISSUE STOW TO ADD ALIAS ENTRY
         SPACE
         B     *+4(R15)                 PROCESS RETURN CODE
         SPACE 2
         B     ALIAS5                   00-SUCCESSFUL
         B     ALIASDUP                 04-MEMBER ALREADY EXISTS
         B     ALIASERR                 08-INVALID RETURN FROM STOW
         B     ALIASFUL                 12-DIRECTORY IS FULL
         B     ALIASDIR                 16-I/O ERROR IN DIRECTORY
         EJECT
ALIAS5   DS    0H
         MESSAGE MSGALIAS               INDICATE ALIAS ASSIGNED
         SPACE
         SR    R15,R15                  SET RETURN CODE
         TM    FLAGS,FLOADMOD           MUST WE GIVE ENTRY POINT?
         BZ    ALIASEND                 NO
         SPACE
         MVC   MSGTEXT1,MSGENTRY        BUILD MESSAGE FOR ENTRY POINT
         LH    R15,MSGTEXT1             LENGTH OF MSG
         LA    R14,MSGTEXT1(R15)
         LA    R15,6(,R15)
         STH   R15,MSGTEXT1
         SPACE
         MVC   DOUBLE(3),DIRENTRY
         MVI   DOUBLE+3,X'04'
         UNPK  0(7,R14),DOUBLE(4)
         TR    0(6,R14),TRTABLE
         SPACE
         MESSAGE MSGTEXT1               INDICATE ENTRY POINT FOR ALIAS
         SR    R15,R15                  SET RETURN CODE
         B     ALIASEND
         SPACE 3
ALIASFUL DS    0H
         MESSAGE MSGFULL                INDICATE DIRECTORY FULL
         LA    R15,12                   SET RETURN CODE
         B     ALIASEND
         SPACE 2
ALIASDUP DS    0H
         MESSAGE MSGEXIST               INDICATE MEMBER EXISTS
         LA    R15,12                   SET RETURN CODE
         B     ALIASEND
         SPACE 2
ALIASDIR DS    0H
         MESSAGE MSGIOERR               I/O ERROR IN DIRECTORY
         LA    R15,8                    SET RETURN CODE
         B     ALIASEND
         SPACE 2
ALIASNON DS    0H
         MESSAGE MSGNONE                MEMBER DOES NOT EXIST
         LA    R15,4                    SET RETURN CODE
         B     ALIASEND
         SPACE 2
ALIASERR DS    0H
         MESSAGE MSGSTOW8               UNUSUAL RETURN CODE FROM STOW
         LA    R15,16                   SET RETURN CODE
         B     ALIASEND
         SPACE
ALIASFLG EQU   *-11                ATTRIBUTE FLAGS FOR NON-ALIAS
         DC    B'00000000'         NOAC NOVS NOSSI NOSCTR NOALI
         DC    B'11000000'           AC   VS NOSSI NOSCTR NOALI
         DC    B'00100000'         NOAC NOVS   SSI NOSCTR NOALI
         DC    B'11100000'           AC   VS   SSI NOSCTR NOALI
         DC    B'00010000'         NOAC NOVS NOSSI   SCTR NOALI
         DC    B'11010000'           AC   VS NOSSI   SCTR NOALI
         DC    B'00110000'         NOAC NOVS   SSI   SCTR NOALI
         DC    B'11110000'           AC   VS   SSI   SCTR NOALI
         SPACE
ALIASF31 DC    F'31'
ALIASFM2 DC    F'-2'
         SPACE 2
ALIASEND DS    0H
         EXIT  COMMAND
         EJECT
*
*
*        SCRATCH SUBCOMMAND
*
*
         SPACE 2
SCRATCH  ENTER COMMAND,PDL=PDLDELET     ESTABLISH SUBCOMMAND
         SPACE
         BAL   R14,OPENSTOW             OPEN STOW DCB
         LA    R15,12                   SET RETURN CODE
         BZ    SCRATCHE                 EXIT IF DCB OPEN FAILED
         LA    R6,PCLS1                 POINT TO MEMBER PCL
SCRATCH0 DS    0H
         SPACE
         NI    FLAGS,255-FMEMBER2       SECOND MEMBER DOESNT EXISTS
         OI    FLAGS,FMEMBER1           SET FIRST MEMBER EXISTS
         L     R2,0(,R6)                LOAD ADDRESS OF MEMBER NAME
         LH    R3,4(,R6)                LOAD THE LENGTH
         BCTR  R3,0                     GET THE EX LENGTH
         STH   R3,LMEMBER1              STORE THE LENGTH
         MVI   MEMBER1,C' '             SET FIRST BLANK
         MVC   MEMBER1+1(7),MEMBER1     SET THE REST
         MVC   MEMBER2,MEMBER1          SET THE REST
         MVC   MEMBER1(0),0(R2)         MOVE THE NAME
         EX    R3,*-6                   ALL OF IT
         SPACE
         TM    14(R6),X'80'             IS IT PRESENT
         BZ    *+32                     NO, IGNORE
         SPACE
         OI    FLAGS,FMEMBER2           SET SECOND MEMBER EXISTS
         L     R2,8(,R6)                LOAD ADDRESS OF MEMBER NAME
         LH    R3,12(,R6)               LOAD THE LENGTH
         BCTR  R3,0                     GET THE EX LENGTH
         STH   R3,LMEMBER2              STORE THE LENGTH
         MVC   MEMBER2(0),0(R2)         MOVE THE NAME
         EX    R3,*-6                   ALL OF IT
         SPACE
         TM    FLAGS,FMEMBER2           DOES A RANGE EXIST
         BO    SCRATCH2                 YES
         SPACE
         SPACE
         STOW  STOWDCB,MEMBER1,D        ISSUE STOW W/ DELETE OPTION
         SPACE 2
         B     *+4(R15)                 PROCESS RETURN CODE
         SPACE 2
         B     SCRATCH1                 00-SUCESSFUL
         B     SCRERROR                 04-SHOULD NOT OCCUR
         B     SCRNONE                  08-MEMBER DOES NOT EXIST
         B     SCRBAD                   12-SHOULD NOT OCCUR
         B     SCRDIRER                 16-I/O ERROR IN DIRECTORY
         EJECT
SCRATCH1 DS    0H
         L     R3,SCRCHAIN              POINT TO THE CHAIN
         LTR   R1,R3                    TEST FOR ANY
         BZ    SCRATC1A                 NO, CONTINUE
         L     R3,0(,R1)                POINT TO NEXT
         ST    R3,SCRCHAIN              STORE THE POINTER
         FREEMAIN R,A=(1),LV=4096,SP=0  FREE THE CORE
         B     SCRATCH1                 GO TO DO NEXT
         SPACE
SCRATC1A DS    0H
         L     R6,16(,R6)               LOAD POINTER TO NEXT
         LA    R6,0(,R6)                ZERO TOP BYTE
         LTR   R6,R6                    TEST FOR ANY
         BNZ   SCRATCH0                 YES, SOME MORE
         TM    FLAGS+2,FERROR           TEST IF ERROR OCCURED
         LA    R15,8                    SET RETURN CODE
         BO    SCRATCHE                 YES, END IT
         MESSAGE MSGGONE                INDICATE MEMBER SCRATCHED
         SR    R15,R15                  SET RETURN CODE
         B     SCRATCHE
         SPACE 2
SCRATCH2 DS    0H
         BAL   R14,SCRCORE              GO TO GET STORAGE
         SPACE
         LH    R14,LMEMBER1             LENGTH OF STARTING NAME
         LH    R15,LMEMBER2             LENGTH OF ENDING NAME
         CR    R14,R15                  DETERMINE MINIMUM NAME LENGTH
         BNH   *+6
         LR    R14,R15
         SPACE
         CLC   MEMBER1(0),MEMBER2
         EX    R14,*-6                  INSURE RANGE IS VALID
         BNH   SCRATCH3                 YES, FIRST NAME NOT HIGHER
         SPACE
         MESSAGE MSGRANGE               INDICATE INVALID RANGE
         B     SCRATCH1
         SPACE 2
SCRATCH3 DS    0H
         OI    FLAGS+1,F1STREAD+FATTN
         NI    FLAGS+1,255-FEXIST-FLINESET-FRANGE
         NI    FLAGS+2,255-FMODE        INDICATE MODE MESSAGE NEEDED
         SPACE 2
         SCREEN CLEAR
         EJECT
SCRATCH4 DS    0H
         BAL   R14,READDIR              GET NEXT DIRECTORY ENTRY
         B     SCRATCH8                 LAST DIRECTORY BLOCK PROCESSED
         B     SCRATCH8                 LAST MEMBER IN DIRECTORY
         SPACE 2
         OI    FLAGS+1,FEXIST           MEMBER EXISTS FLAG
         TM    FLAGS,FMEMBER1           START ENTRY SPECIFIED?
         BZ    SCRATCH5                 NO
         SPACE
         LH    R15,LMEMBER1             LENGTH-1 OF MEMBER NAME
         CLC   MEMBER1(0),DIRNAME
         EX    R15,*-6
         BH    SCRATCH4                 NOT WANTED, GET NEXT
         XI    FLAGS,FMEMBER1
         SPACE 2
SCRATCH5 DS    0H
         TM    FLAGS,FMEMBER2           LAST ENTRY SPECIFIED?
         BZ    SCRATCH6                 NO
         SPACE
         LH    R15,LMEMBER2
         CLC   MEMBER2(0),DIRNAME       THIS PAST END?
         EX    R15,*-6
         BL    SCRATCH8                 YES, END OF SCRATCH
         SPACE
SCRATCH6 DS    0H
         MVC   0(8,R2),DIRNAME
         BXLE  R2,R4,SCRATCH7
         BAL   R14,SCRCORE              GO TO GET STORAGE
         SPACE
SCRATCH7 DS    0H
         L     R1,SCRCHAIN
         ST    R2,4(,R1)                STORE THE CURRENT POINTER
         OI    FLAGS+1,FLINESET+FRANGE
         B     SCRATCH4
         EJECT
SCRATCH8 DS    0H
         LA    R3,SCRATCH1              EXIT ADDRESS
         SPACE 2
         TM    FLAGS+1,FRANGE           MEMBER IN RANGE?
         BO    SCRATCH9                 YES
         TM    FLAGS+1,FEXIST           NO, BUT ANY IN DIRECTORY?
         LA    R1,MSGEMPTY
         BZ    *+8                      NO
         LA    R1,MSGNODSP              YES, THEN NONE IN RANGE
         SPACE
         MESSAGE (R1)
         SPACE 2
         OI    FLAGS+2,FERROR           SET ERROR
         B     SCRATCH1
SCRATCH9 DS    0H
         L     R3,SCRCHAIN              POINT TO THE AREA
SCRATC9Z DS    0H
         LA    R4,8                     SET THE INCR
         LNR   R4,R4                    MAKE IT GO BACKWARDS
         L     R2,4(,R3)                POINT TO THE LAST
         LA    R5,7(,R3)                POINT TO END OF LIST
         B     SCRATC9B                 GO TO DO FIRST
         SPACE
SCRATC9A MVC   DIRNAME,0(R2)            MOVE IN THE NAME
         SPACE
         STOW  STOWDCB,DIRNAME,D        DELETE THE MEMBER
         SPACE
         B     *+4(R15)                 TEST THE RETURN CODE
         SPACE
         B     SCRATC9B                 00-SUCCESSFUL
         B     SCRERROR                 04-SHOULD NOT OCCUR
         B     SCRNONE                  08-MEMBER DOES NOT EXIST
         B     SCRBAD                   12-SHOULD NOT OCCUR
         B     SCRDIRER                 16-I/O ERROR IN DIRECTORY
         SPACE
SCRATC9B BXH   R2,R4,SCRATC9A           GO TO DO NEXT
         L     R3,0(,R3)                POINT TO THE NEXT BLOCK
         LTR   R3,R3                    TEST FOR ZERO
         BNZ   SCRATC9Z                 GO TO END IT
         B     SCRATCH1                 GO TO NEXT
SCRCORE  DS    0H
         ST    R14,DOUBLE+4             SAVE THE RETURN ADDRESS
         GETMAIN EC,LV=4096,A=DOUBLE,SP=0,MF=(E,PARMLIST)
         LTR   R15,R15                  GOOD GETMAIN
         BNZ   SCRNOSTO                 NO
         L     R3,DOUBLE                POINT TO WORK AREA
         L     R0,SCRCHAIN              POINT TO PREVIOUS
         ST    R0,0(,R3)                POINT TO THE PREVIOUS
         LA    R0,8(,R3)                POINT TO FIRST MEMBER
         ST    R0,4(,R3)                STORE IT
         ST    R3,SCRCHAIN              STORE THE CHAIN ADDRESS
         L     R2,4(,R3)                POINT TO THE FIRST
         LA    R5,4095(,R3)             POINT TO THE END
         LA    R4,8                     AND THE LENGTH
         L     R14,DOUBLE+4             LOAD THE RETURN ADDRESS
         BR    R14                      RETURN
         SPACE
SCRDIRER DS    0H
         LA    R1,MSGIOERR              I/O ERROR IN DIRECTORY
         B     SCRATCHC
         SPACE 2
SCRNOSTO DS    0H
         LA    R1,MSGSTOR               NO MAIN STORAGE FOR SCRATCH
         B     SCRATCHC
         SPACE 2
SCRNONE  DS    0H
         LA    R1,MSGNONE               MEMBER DOES NOT EXIST
         B     SCRATCHC
         SPACE 2
SCRERROR DS    0H
         LA    R1,MSGSTOW4              ERROR RETURN FROM STOW
         B     SCRATCHC
SCRBAD   DS    0H
         LA    R1,MSGSTOWC              ERROR RETURN FROM STOW
         SPACE 3
SCRATCHC MVI   MSGTEXT2+4,C' '
         MVC   MSGTEXT2+5(0),0(R2)      MOVE IN MEMBER NAME
         EX    R3,*-6                   ALL OF IT
         LA    R2,MSGTEXT2+6(R3)        POINT TO INSERT AREA
         MVC   0(13,R2),MSGERR
         LA    R0,20(R3)                GET THE LENGTH
         SLL   R0,16                    ZERO TOP BYTE
         ST    R0,MSGTEXT2              STORE THE LENGTH
         LA    R0,MSGTEXT2              POINT TO THE MESSAGE
         MESSAGE (R1),(R0)              WRITE OUT THE MESSAGE
         OI    FLAGS+2,FERROR           SET ERROR COND
         B     SCRATCH1
SCRATCHE NI    FLAGS+2,255-FERROR       TURN OFF COND
         EXIT  COMMAND
         EJECT
*
*
*        DISPLAY SUBCOMMAND
*
*
         SPACE 2
DISPLAY  ENTER COMMAND,PDL=PDLDSPLY     ESTABLISH SUBCOMMAND
         NI    FLAGS+3,255-FDIRECT      TURN OFF DIRECTORY
         XC    MEMBER1,MEMBER1
         TM    FLAGS,FOPTIONS           TEST FOR OPTIONS
         BZ    DISPLAY0                 NO, IGNORE
         LA    R3,PDLD1                 POINT TO THE NAME
         SPACE
DISPM1   DS    0H
         TM    6(R3),X'80'              TEST FOR PRESENT
         BZ    DISPM2
         OI    FLAGS,FMEMBER1           SET MEMBER NAME EXISTS
         L     R1,0(,R3)                POINT TO THE NAME
         LH    R2,4(,R3)                LOAD THE LENGTH
         BCTR  R2,0                     SUBTRACT ONE
         STH   R2,LMEMBER1              SAVE IT
         MVI   MEMBER1,C' '             MOVE FIRST BLANK
         MVC   MEMBER1+1(7),MEMBER1     PROPAGATE IT
         MVC   MEMBER1(0),0(R1)         MOVE THE DATA
         EX    R2,*-6                   ALL OF IT
         SPACE
DISPM2   DS    0H
         LA    R3,PDLD1+8               POINT TO THE NAME
         SPACE
         TM    6(R3),X'80'              TEST FOR PRESENT
         BZ    DISPM3
         OI    FLAGS,FMEMBER2           SET MEMBER NAME EXISTS
         L     R1,0(,R3)                POINT TO THE NAME
         LH    R2,4(,R3)                LOAD THE LENGTH
         BCTR  R2,0                     SUBTRACT ONE
         STH   R2,LMEMBER2              SAVE IT
         MVI   MEMBER2,C' '             MOVE FIRST BLANK
         MVC   MEMBER2+1(7),MEMBER2     PROPAGATE IT
         MVC   MEMBER2(0),0(R1)         MOVE THE DATA
         EX    R2,*-6                   ALL OF IT
DISPM3   DS    0H
         SPACE
         LH    R1,PDLD2                 LOAD THE KEYWORD
         SLL   R1,2                     GET THE OFFSET
         EX    0,*+4(R1)                DO IT
         B     *+12                     SKIP THE OTHER
         OI    FLAGS+3,FDIRECT          SET DIRECTORY ON
         NI    FLAGS+3,255-FDIRECT      TURN OFF DIRECTORY
         SPACE
         TM    FLAGS,FMEMBER1+FMEMBER2  DISPLAY RANGE SPECIFIED?
         BNO   DISPLAY0                 NO
         LH    R14,LMEMBER1             LENGTH OF STARTING NAME
         LH    R15,LMEMBER2             LENGTH OF ENDING NAME
         CR    R14,R15                  DETERMINE MINIMUM NAME LENGTH
         BNH   DSPCHECK
         LR    R14,R15
DSPCHECK DS    0H
         SPACE
         CLC   MEMBER1(0),MEMBER2
         EX    R14,*-6                  INSURE RANGE IS VALID
         BNH   DISPLAY0                 YES, FIRST NAME NOT HIGHER
         SPACE
         MESSAGE MSGRANGE               INDICATE INVALID RANGE
         LA    R15,12                   SET RETURN CODE
         B     DISPLAYE
         SPACE 2
DISPLAY0 DS    0H
         OI    FLAGS+1,F1STREAD+FATTN
         NI    FLAGS+1,255-FEXIST-FLINESET-FRANGE
         NI    FLAGS+2,255-FMODE        INDICATE MODE MESSAGE NEEDED
         SPACE 2
         SCREEN CLEAR
         EJECT
DISPLAY1 DS    0H
         BALR  R3,0                     RETURN ADDRESS
         LH    R4,LINESIZE              GET TERMINAL LINE SIZE
         LA    R0,11
         SR    R4,R0
         LA    R4,MSGTEXT1+3(R4)        END OF LINE ADDRESS
         LA    R5,MSGTEXT1+4            START OF LINE
         SPACE
         CLEAR MSGTEXT1
         SPACE 2
DISPLAY2 DS    0H
         BAL   R14,READDIR              GET NEXT DIRECTORY ENTRY
         B     DISPLAY6                 LAST DIRECTORY BLOCK PROCESSED
         B     DISPLAY6                 LAST MEMBER IN DIRECTORY
         SPACE 2
         OI    FLAGS+1,FEXIST           MEMBER EXISTS FLAG
         TM    FLAGS,FMEMBER1           START ENTRY SPECIFIED?
         BZ    DISPLAY3                 NO
         SPACE
         LH    R15,LMEMBER1             LENGTH-1 OF MEMBER NAME
         CLC   MEMBER1(0),MEMNAME
         EX    R15,*-6
         BH    DISPLAY2                 NOT WANTED, GET NEXT
         XI    FLAGS,FMEMBER1
         SPACE 2
DISPLAY3 DS    0H
         TM    FLAGS,FMEMBER2           LAST ENTRY SPECIFIED?
         BZ    DISPLAY4                 NO
         SPACE
         LH    R15,LMEMBER2
         CLC   MEMBER2(0),MEMNAME       THIS PAST END?
         EX    R15,*-6
         BL    DISPLAY6                 YES, END OF DISPLAY
         SPACE
DISPLAY4 DS    0H
         OI    FLAGS+1,FLINESET+FRANGE
         TM    FLAGS+3,FDIRECT          TEST FOR DISPLAYING ENTRY
         BO    DISPLAY8                 YES
         MVC   0(8,R5),DIRNAME
         TM    DIRFLAG,X'80'            ALIAS?
         BZ    DISPLAY7                 NO
         MVC   8(L'IDALIAS,R5),IDALIAS
DISPLAY7 DS    0H
         LA    R5,10+L'IDALIAS(R5)
         CR    R5,R4                    LINE FULL?
         BL    DISPLAY2                 NO, CONTINUE
         EJECT
DISPLAY5 DS    0H
         LA    R1,MSGTEXT1
         SR    R5,R1
         SLL   R5,16
         ST    R5,MSGTEXT1
        $PUTLINE MSGTEXT1,ATTN=DISPLAYE
         SPACE
         NI    FLAGS+1,255-FLINESET
         BR    R3                       RETURN
         SPACE
DISPLAY8 DS    0H
         MVC   MSGTEXT1+4(8),DIRNAME    MOVE THE NAME
         IC    R14,DIRNAME+11           LOAD THE LENGTH
         N     R14,DISPF31              TURN OFF UNWANTED BITS
         SLL   R14,1                    CALC THE LENGTH
         LA    R14,4(,R14)              ADD FOR THE TTR
         LA    R15,DIRNAME+8            POINT TO IT
         LA    R5,MSGTEXT1+12           POINT TO OUTPUT AREA
         SPACE
DISPLAY9 DS    0H
         LTR   R14,R14                  TEST FOR NONE
         BZ    DISPLAY5                 GO TO PRINT IT
         LR    R4,R14                   COPY THE LENGTH
         CH    R4,*+10                  TEST FOR MAX
         BNH   *+8                      NO, DON'T RESET
         LA    R4,4                     SET THE LENGTH
         LR    R1,R4                    COPY THE LENGTH
         MH    R1,DISPX21               CALC THE AMOUNTS
         MVI   0(R5),C' '               SET A BLANK
         UNPK  1(0,R5),0(0,R15)         UNPK THE DATA
         EX    R1,*-6                   ALL OF IT
         LA    R1,0(R4,R4)              GET THE LENGTH
         B     *+10                     SKIP THE TR
         TR    1(0,R5),TRTABLE          TRANSLATE THE DATA
         EX    R1,*-6                   ALL OF IT
         LA    R15,0(R15,R4)            SKIP THE FROM DATA
         LA    R1,0(R4,R4)              DOUBLE THE LENGTH
         LA    R5,1(R1,R5)              SKIP THE OUTPUT AREA
         SR    R14,R4                   CALC THE REMAINING AMOUNT
         B     DISPLAY9                 DO THE NEXT
         SPACE
DISPX21  DC    Y(X'21')
DISPF31  DC    A(31)
         SPACE 3
DISPLAY6 DS    0H
         LA    R3,DISPLAYE              EXIT ADDRESS
         TM    FLAGS+1,FLINESET         BUFFER IN PROGRESS?
         BO    DISPLAY5                 YES, OUTPUT IT
         SPACE 2
         TM    FLAGS+1,FRANGE           MEMBER IN RANGE?
         BO    DISPLAYE                 YES
         TM    FLAGS+1,FEXIST           NO, BUT ANY IN DIRECTORY?
         LA    R1,MSGEMPTY
         BZ    *+8                      NO
         LA    R1,MSGNODSP              YES, THEN NONE IN RANGE
         SPACE
         MESSAGE (R1)
         SPACE 2
DISPLAYE DS    0H
         EXIT  COMMAND
         EJECT
*
*
*        ATTRIBUTE SUBCOMMAND
*
*
         SPACE 2
ATTR     ENTER COMMAND,PDL=PDLATTR      ESTABLISH SUBCOMMAND
         MVC   DIRNAME,MEMBER1          MEMBER NAME FOR BLDL
         SPACE
         BLDL  INDCB,BLDLLIST           GET DIRECTORY ENTRY
         MVC   DIRFLAG(DIREND-DIRFLAG),DIRFLAG+2 BLDL ADDS THINGS
         SPACE
         B     *+4(R15)                 PROCESS RETURN CODE
         SPACE 2
         B     ATTR1                    00-SUCESSFUL
         B     ATTRNONE                 04-MEMBER NOT FOUND
         B     ATTRIO                   08-I/O ERROR
         SPACE 3
ATTR1    DS    0H
         TM    FLAGS,FLOADMOD           LOAD MODULE LIBRARY?
         BZ    ATTR2                    NO
         SPACE
         IC    R15,DIRFLAG              INSERT THE LENGTH
         N     R15,ATTRF31              TURN OFF BITS
         IC    R1,ATTRFLGS(R15)         LOAD DEFAULT
         TM    DIRFLAG,X'80'            ALIAS
         BZ    ATTR1A                   NO
         TM    DIRORIGN,X'80'           VS
         BO    *+12                     YES
         TM    DIRATTR,ATTRRENT+ATTRREUS
         BZ    ATTR1A                   NO
         IC    R1,ATTRALI(R15)          POINT TO ALIAS AREA
ATTR1A   DS    0H
         STC   R1,FLAGS+3               STORE THE FLAGS
         SPACE
         XC    SAVALI,SAVALI            ZERO THE DATA
         XC    SAVSSI,SAVSSI            ZERO THE DATA
         XC    SAVAC,SAVAC              ZERO THE DATA
         LA    R1,DIRSCTRL              POINT TO COMMON AREA
         TM    FLAGS+3,FLAGSCTR         IS IT SCTR
         BZ    *+8                      NO
         LA    R1,DIRSCTR(,R1)          BUMP PAST SCTR SECTION
         SPACE
         TM    FLAGS+3,FLAGALI          TEST FOR ALIAS SECTION
         BZ    *+14
         MVC   SAVALI,0(R1)             SAVE THE DATA
         LA    R1,DIRALIL(R1)           BUMP PAST IT
         SPACE
         TM    FLAGS+3,FLAGSSI          TEST FOR SSI
         BZ    *+22
         LA    R1,1(,R1)                SET FOR ROUND
         N     R1,ATTRFM2               ROUND IT
         MVC   SAVSSI,0(R1)             COPY THE DATA
         LA    R1,DIRSSIL(,R1)          BUMP IT
         SPACE
         TM    FLAGS+3,FLAGAC           TEST FOR AC
         BZ    *+14
         MVC   SAVAC,0(R1)              BUMP IT
         LA    R1,DIRACL(,R1)           BUMP THE POINTER
         SPACE
         MVC   DIREP(DIRALIL),SAVALI    MOVE THE DATA
         MVC   DIRSSI(DIRSSIL),SAVSSI   MOVE THE DATA
         MVC   DIRAC(DIRACL),SAVAC      MOVE THE DATA
         SPACE
         LH    R1,PCLATREN              LOAD THE REN ATTR
         SLL   R1,2                     MOVE IT
         EX    0,*+4(R1)                EX THE RIGHT ONE
         B     *+12                     SKIP THE SETS
         OI    ATTRYES,ATTRRENT         SET RE-ENTRANT
         OI    ATTRNO,ATTRRENT          SET NOT RE-ENTRANT
         SPACE
         LH    R1,PCLATREU              LOAD THE REN ATTR
         SLL   R1,2                     MOVE IT
         EX    0,*+4(R1)                EX THE RIGHT ONE
         B     *+12                     SKIP THE SETS
         OI    ATTRYES,ATTRREUS         SET RE-USABLE
         OI    ATTRNO,ATTRREUS          SET NOT RE-USABLE
         SPACE
         LH    R1,PCLATREF              LOAD THE REN ATTR
         SLL   R1,2                     MOVE IT
         EX    0,*+4(R1)                EX THE RIGHT ONE
         B     *+12                     SKIP THE SETS
         OI    ATTRYES+1,ATTRREFR       SET REFRESHABLE
         OI    ATTRNO+1,ATTRREFR        SET NOT REFRESHABLE
         SPACE
         LH    R1,PCLATEXC              LOAD THE REN ATTR
         SLL   R1,2                     MOVE IT
         EX    0,*+4(R1)                EX THE RIGHT ONE
         B     *+12                     SKIP THE SETS
         OI    ATTRYES,ATTREXEC         SET EXECUTABLE
         OI    ATTRNO,ATTREXEC          SET NOT EXECUTABLE
         SPACE
         LH    R1,PCLATLOD              LOAD THE REN ATTR
         SLL   R1,2                     MOVE IT
         EX    0,*+4(R1)                EX THE RIGHT ONE
         B     *+12                     SKIP THE SETS
         OI    ATTRYES,ATTRLOAD         SET LOAD ONLY
         OI    ATTRNO,ATTRLOAD          SET NOT LOAD ONLY
         SPACE
         OC    ATTRYES,ATTRYES          TEST FOR ANY
         BZ    *+8                      NO
         OI    FLAGS,FATTR              SET ATTRS CHANGED
         SPACE
         OC    ATTRNO,ATTRNO            TEST FOR ANY
         BZ    *+8                      NO
         OI    FLAGS,FATTR              SET ATTRS CHANGED
         SPACE
ATTRTSSI DS    0H
         SPACE
         LH    R1,PCLATSSI
         SLL   R1,2                     CALC THE OFFSET
         B     *+4(R1)                  DO THE RIGHT ONE
         B     ATTRTPAG                 NO
         B     *+16                     GO AROUND THE NO FUNCTION
         NI    FLAGS+3,255-FLAGSSI      TURN OFF THE FLAG
         NI    DIRORIGN,255-X'10'       TURN OFF THE SSI FLAG
         B     ATTRTPAG-4               GO TO NEXT
         SPACE
         L     R1,$SSIV                 LOAD ADDRESS OF THE SSI
         LH    R2,$SSIV+4               LOAD THE LENGTH
         BCTR  R2,0
         B     *+10                     SKIP THE TR
         TR    0(0,R1),TRTABLE          TRANSLATE TO HEX
         EX    R2,*-6                   DO IT
         LH    R2,$SSIV+4               LOAD THE LENGTH
         PACK  DOUBLE(5),0(0,R1)        PACK IT
         EX    R2,*-6                   ALL OF IT
         MVC   SAVSSI,DOUBLE            MOVE THE SSI
         SPACE
         TM    FLAGS+3,FLAGVS           TEST FOR VS
         BZ    *+8                      NO
         OI    DIRORIGN,X'10'           SET SSI PRESENT
         OI    FLAGS+3,FLAGSSI          SET SSI PRESENT
         OI    FLAGS,FATTR              SET ATTRS CHANGED
ATTRTPAG DS    0H
         TM    FLAGS+3,FLAGVS           TEST FOR VS
         BZ    ATTRTAC                  NO, TRY THE AC
         LH    R1,PCLATPAG
         SLL   R1,2                     TEST FOR PAGE BNDRY
         B     *+4(R1)                  DO THE RIGHT ONE
         B     ATTRTAC                  NO
         B     *+12                     GO AROUND THE NO FUNCTION
         NI    DIRORIGN,255-X'20'       TURN OFF THE FLAG
         B     ATTRTAC-4                NO
         OI    DIRORIGN,X'20'           TURN ON PAGE BNDRY
         OI    FLAGS,FATTR              SET ATTRS CHANGED
         SPACE
ATTRTAC  DS    0H
         SPACE
         TM    FLAGS+3,FLAGVS           TEST FOR VS
         BZ    ATTRTEND                 NO
         LH    R1,PCLATAC
         SLL   R1,2                     TEST FOR AUTH CODE
         B     *+4(R1)                  DO THE RIGHT ONE
         B     ATTRTEND                 NO
         B     *+10                     GO AROUND THE NO FUNCTION
         SR    R0,R0                    ZERO THE AUTH CODE
         B     ATTRTAC1                 NO
         L     R1,$ACV                  LOAD ADDRESS OF THE SSI
         LH    R2,$ACV+4                LOAD THE LENGTH
         BCTR  R2,0
         PACK  DOUBLE,0(0,R1)           PACK IT
         EX    R2,*-6                   ALL OF IT
         CVB   R0,DOUBLE                GET THE BINARY CODE
         SPACE
ATTRTAC1 DS    0H
         SPACE
         STC   R0,SAVAC+1               SET THE AC
         MVI   SAVAC,1                  SET THE LENGTH
         SPACE
         OI    FLAGS,FATTR              SET ATTRS CHANGED
         OI    FLAGS+3,FLAGAC           SET AC PRESENT
ATTRTEND DS    0H
         SPACE
         TM    FLAGS,FATTR              CHANGE LOAD MODULE ATTRIBUTES?
         BZ    ATTR3                    NO
         SPACE
         XC    ATTRNO,FF
         OC    DIRATTR,ATTRYES
         NC    DIRATTR,ATTRNO
         EJECT
*
*        THE FOLLOWING CODE TAKES CARE OF THE RESTRICTION
*        IN CONTENTS SUPERVISION THAT REQUIRES THE 'REUS'
*        OPTION IN ADDITION TO THE 'RENT' OPTION IF A LOAD
*        MODULE IS TO BE ACCEPTED AS REENTERANT.
*
         SPACE 2
         TM    DIRATTR,ATTRRENT         WAS RE-ENTERANT SPECIFIED?
         BZ    *+8                      NO
         OI    DIRATTR,ATTRREUS         YES, ALSO FORCE REUSABLE
         SPACE
         TM    DIRORIGN,X'80'           TEST FOR VS
         BO    ATTRFIN0                 NO
         SPACE
         TM    DIRATTR,ATTRREUS         WAS RE-USABLE SPECIFIED?
         BO    ATTRFIN0                 YES
         NI    FLAGS+3,255-FLAGALI      SET NO ALIAS SECTION PRESENT
         B     ATTRSTOW                 STOW THE NAME
         SPACE
ATTRFIN0 DS    0H
         TM    DIRFLAG,X'80'            TEST FOR ALIAS
         BZ    ATTRSTOW                 NO
         TM    FLAGS+3,FLAGALI          TEST FOR ALREADY PRESENT
         BO    ATTRSTOW                 YES
         OI    FLAGS+3,FLAGALI          YES, SET ALIAS SECTION
         MVC   SAVETTR,DIRTTR           TTR OF REAL MODULE
         MVC   SAVDIR,DIRNAME           SAVE THE REST
         OI    FLAGS+1,F1STREAD
         XC    MEMBER1,MEMBER1          ZERO FOR SEARCH KGE
         SPACE 2
ATTRFIN1 DS    0H
         BAL   R14,READDIR              GET NEXT DIRECTORY MEMBER
         B     ATTRFINE                 END OF DIRECTORY
         B     ATTRFINE                 LAST MEMBER PROCESSED
         SPACE 2
         CLC   SAVETTR,DIRTTR           WANTED MODULE?
         BNE   ATTRFIN1                 NO
         SPACE
         TM    DIRFLAG,X'80'            YES, THIS THE MAIN ONE
         BO    ATTRFIN1                 NO
         MVC   SAVALI(3),DIRENTRY       MOVE IN THE EP
         MVC   SAVALI+3(8),DIRNAME      AND THE TRUNAME
         SPACE
ATTRFINE DS    0H
         MVC   DIRNAME(L'SAVDIR),SAVDIR SAVE THE REST
         SPACE 2
ATTRSTOW DS    0H
         SPACE
         BAL   R14,OPENSTOW             OPEN STOW DCB
         LA    R15,12                   SET RETURN CODE
         BZ    ATTREXIT                 IF DCB DID NOT OPEN
         SPACE
         LA    R1,STOWDCB               POINT TO DCB
         USING IHADCB,R1
         MVC   DCBRELAD,DIRTTR
         MVI   DCBRELAD+3,0
         MVC   DCBFDAD,STOWFDAD
         DROP  R1
         SPACE
         LA    R1,DIRSCTRL              POINT TO COMMON AREA
         TM    FLAGS+3,FLAGSCTR         IS IT SCTR
         BZ    *+8                      NO
         LA    R1,DIRSCTR(,R1)          BUMP PAST SCTR SECTION
         SPACE
         TM    FLAGS+3,FLAGALI          TEST FOR ALIAS SECTION
         BZ    *+14
         MVC   0(DIRALIL,R1),SAVALI     SAVE THE DATA
         LA    R1,DIRALIL(R1)           BUMP PAST IT
         SPACE
         TM    FLAGS+3,FLAGSSI          TEST FOR SSI
         BZ    *+26
         MVI   0(R1),0                  ZERO THE BYTE, IN CASE OF ROUND
         LA    R1,1(,R1)                SET FOR ROUND
         N     R1,ATTRFM2               ROUND IT
         MVC   0(DIRSSIL,R1),SAVSSI     COPY THE DATA
         LA    R1,DIRSSIL(,R1)          BUMP IT
         SPACE
         TM    FLAGS+3,FLAGAC           TEST FOR AC
         BZ    *+14
         MVC   0(DIRACL,R1),SAVAC       BUMP IT
         LA    R1,DIRACL(,R1)           BUMP THE POINTER
         SPACE
         MVI   0(R1),0                  ZERO THE TRAILING BYTE
         LA    R0,DIRFLAG               POINT TO THE LENGTH CALC
         SR    R1,R0                    CALC THE LENGTH
         SRL   R1,1                     GET NUMBER OF HALF WORDS
         NI    DIRFLAG,X'E0'            TURN OFF THE LENGTH
         OI    DIRFLAG,0                SET THE LENGTH
         EX    R1,*-4                   WHEN EXECUTED
         SPACE
         STOW  STOWDCB,DIRNAME,R
         LA    R1,STOWDCB               POINT TO DCB
         USING IHADCB,R1
         XC    DCBFDAD,DCBFDAD
         DROP  R1
         SPACE 2
         B     *+4(R15)                 PROCESS RETURN CODE
         SPACE
         B     ATTR3                    00-SUCESSFUL
         B     ATTRERR                  04-SHOULD NOT OCCUR
         B     ATTRERR                  08-SHOULD NOT OCCUR
         B     ATTRFULL                 12-DIRECTORY FULL
         B     ATTRIO                   16-I/O ERROR
         EJECT
ATTR3    DS    0H
         MESSAGE MSGATTRS               ATTRIBUTES TITLE LINE
         SPACE 2
         CLEAR MSGTEXT1
         SPACE 2
         LA    R1,MSGTEXT1+3
         SR    R0,R0                    NO ATTRIBUTES FLAG
         SPACE
         LA    R14,TBLATTR              ATTRIBUTES TABLE
         LH    R2,DIRATTR               GET MODULE ATTRIBUTES
         SPACE 2
ATTRLIST DS    0H
         SPACE
         LH    R15,0(R14)               GET ATTRIBUTE FLAGS
         SPACE
         TM    2(R14),X'80'             POSITIVE OR NEGATIVE ATTRIBUTE?
         LA    R3,X'80'                 MASK FOR POS (FOR BZ INST)
         BZ    *+8
         LA    R3,X'70'                 MASK FOR NEG (FOR BNZ) INST
         SPACE
         NR    R15,R2                   CHECK FOR ATTRIBUTE PRESENT
         BC    0,ATTRNEXT
         EX    R3,*-4
         SPACE
         BALR  R0,0                     INDICATE ATTRIBUTE EXISTS
         LA    R3,X'7F'
         MVI   0(R1),C','               DELIMITER AFTER LAST ATTR
         IC    R15,2(R14)               LENGTH-1 OF ATTRIBUTE
         NR    R15,R3
         MVC   2(0,R1),3(R14)
         EX    R15,*-6
         LA    R1,3(R15,R1)             JUMP POINTER
ATTRNEXT LA    R14,12(R14)
         CLI   0(R14),X'FF'             END OF TABLE?
         BNE   ATTRLIST
         TM    FLAGS+3,FLAGVS           TEST FOR VS MODULE
         BZ    ATTRSSI                  NO
         SPACE
         IC    R2,DIRORIGN              INSERT THE VS ATTRS
         LA    R14,TBLVATTR
ATTRLISV DS    0H
         LH    R15,0(R14)               GET ATTRIBUTE FLAGS
         SPACE
         TM    2(R14),X'80'             POSITIVE OR NEGATIVE ATTRIBUTE?
         LA    R3,X'80'                 MASK FOR POS (FOR BZ INST)
         BZ    *+8
         LA    R3,X'70'                 MASK FOR NEG (FOR BNZ) INST
         SPACE
         NR    R15,R2                   CHECK FOR ATTRIBUTE PRESENT
         BC    0,ATTRNXTV
         EX    R3,*-4
         SPACE
         BALR  R0,0                     INDICATE ATTRIBUTE EXISTS
         LA    R3,X'7F'
         MVI   0(R1),C','               DELIMITER AFTER LAST ATTR
         IC    R15,2(R14)               LENGTH-1 OF ATTRIBUTE
         NR    R15,R3
         MVC   2(0,R1),3(R14)
         EX    R15,*-6
         LA    R1,3(R15,R1)             JUMP POINTER
ATTRNXTV LA    R14,12(R14)
         CLI   0(R14),X'FF'             END OF TABLE?
         BNE   ATTRLISV
         SPACE
         TM    FLAGS+3,FLAGAC           TEST FOR AC
         BZ    ATTRSSI                  NO, DO SSI
         SPACE
         SR    R3,R3
         IC    R3,SAVAC                 INSERT THE LENGTH
         LTR   R3,R3                    TEST FOR ANY
         BZ    ATTRSSI                  NO, DO SSI
         BCTR  R3,0                     SUB ONE FOR EX
         OC    SAVAC+1(0),SAVAC+1       TEST FOR NON-ZERO
         EX    R3,*-6                   TEST FOR IT ALL
         BZ    ATTRSSI                  TEST FOR SSI
         BALR  R0,0                     INDICATE ATTRIBUTE EXISTS
         SPACE
         MVI   0(R1),C','               MOVE IN COMMA
         MVC   2(4,R1),ATTRAUTH         SET AUTHORIZED
         LA    R1,6(,R1)
         SPACE
ATTRSSI  DS    0H
         SPACE
         TM    FLAGS+3,FLAGSSI          TEST FOR AC
         BZ    ATTREND                  NO, DO SSI
         SPACE
         BALR  R0,0                     INDICATE ATTRIBUTE EXISTS
         MVI   0(R1),C','               SET COMMA
         MVC   2(4,R1),ATTRSSIC
         UNPK  6(9,R1),SAVSSI(5)        PACK THE DATA
         TR    6(8,R1),TRTABLE          TRANSLATE TO PRINTABLE
         MVI   14(R1),C')'              SET END PAREN
         SPACE
         LA    R1,15(,R1)               POINT TO END
         SPACE
ATTREND  DS    0H
         SPACE
         LTR   R0,R0                    TEST FOR ANY ATTRS
         LA    R1,NONEMSG
         BZ    NOATTRS                  NO
         SPACE
         LA    R1,L'MSGTEXT1
         SLL   R1,16
         ST    R1,MSGTEXT1
         LA    R1,MSGTEXT1
         SPACE
NOATTRS  DS    0H
         MESSAGE (R1)
         SPACE 2
ATTR2    DS    0H
         OI    FLAGS+1,FATTN
         NI    FLAGS+2,255-FREALMOD
         NI    FLAGS+1,255-FLINESET
         TM    DIRFLAG,X'80'            TRUE MODULE OR ALIAS?
         BO    ATTR4                    ALIAS
         OI    FLAGS+2,FREALMOD         TRUE NAME
         SPACE
ATTR4    DS    0H
         MVC   SAVETTR,DIRTTR           TTR OF REAL MODULE
         MVC   MSGTEXT1,MSGNOMOD
         OI    FLAGS+1,F1STREAD
         XC    MEMBER1,MEMBER1          ZERO FOR SEARCH KGE
         SPACE 2
ATTR5    DS    0H
         BAL   R14,READDIR              GET NEXT DIRECTORY MEMBER
         B     ATTRLAST                 END OF DIRECTORY
         B     ATTRLAST                 LAST MEMBER PROCESSED
         SPACE 2
         CLC   SAVETTR,DIRTTR           WANTED MODULE?
         BNE   ATTR5                    NO
         SPACE
         TM    FLAGS+2,FREALMOD         LOOK FOR ALL ALIASES?
         BZ    ATTR6                    NO
         TM    DIRFLAG,X'80'            YES, THIS ONE OF THEM?
         BZ    ATTR5                    NO
         EJECT
         TM    FLAGS+1,FLINESET         LINE IN PROGRESS?
         BO    ATTR5A                   YES
        $PUTLINE MSGOTHER,ATTN=ATTREXIT
         SPACE 2
         CLEAR MSGTEXT1
         LA    R5,MSGTEXT1+3
         OI    FLAGS+1,FLINESET
         SPACE 2
ATTR5A   DS    0H
         LA    R2,DIRNAME+7
ATTR5B   DS    0H
         CLI   0(R2),C' '
         BNE   ATTR5C
         BCT   R2,ATTR5B
ATTR5C   DS    0H
         LA    R0,DIRNAME
         SR    R2,R0
         BNM   ATTR5D
         SR    R2,R2
ATTR5D   DS    0H
         LA    R15,0(R5,R2)
         LA    R1,MSGTEXT1
         SR    R15,R0
         CH    R15,LINESIZE             CURRENT LINE FULL?
         BNH   ATTR5E                   NO
         SLL   R15,16
         ST    R15,MSGTEXT1
        $PUTLINE (R1),ATTN=ATTREXIT
         SPACE 2
         CLEAR MSGTEXT1
         LA    R5,MSGTEXT1+3
         SPACE 2
ATTR5E   DS    0H
         MVI   0(R5),C','
         MVC   2(,R5),DIRNAME
         EX    R2,*-6
         LA    R5,3(R2,R5)
         B     ATTR5
         EJECT
ATTR6    DS    0H
         TM    DIRFLAG,X'80'            THIS THE ALIAS ENTRY?
         BO    ATTR5                    YES, CONTINUE ON
         MVC   MSGTEXT1,MSGREAL
         LH    R1,MSGTEXT1
         LA    R0,8(R1)
         STH   R0,MSGTEXT1
         LA    R1,MSGTEXT1(R1)
         MVC   0(8,R1),DIRNAME
         SPACE
         LA    R1,MSGTEXT1
ATTR7    DS    0H
         MESSAGE (R1)
         SR    R15,R15                  SET RETURN CODE
         B     ATTREXIT
         SPACE 3
ATTRLAST DS    0H
         TM    FLAGS+2,FREALMOD ALIAS OR TRUE MODULE?
         LA    R1,NONEMSG               ERROR MSG - TRUE NAME NOT FOUND
         BZ    ATTR7
         SPACE
         SR    R15,R15                  SET RETURN CODE
         TM    FLAGS+1,FLINESET         LINE IN PROGRESS?
         BZ    ATTREXIT                 NO, EXIT
         LA    R1,MSGTEXT1
         SR    R5,R1
         SLL   R5,16
         ST    R5,MSGTEXT1
         B     ATTR7
         EJECT
ATTRNONE DS    0H
         MESSAGE MSGNONE
         LA    R15,4                    SET RETURN CODE
         B     ATTREXIT
         SPACE 2
ATTRIO   DS    0H
         MESSAGE MSGIOERR
         LA    R15,8                    SET RETURN CODE
         B     ATTREXIT
         SPACE 2
ATTRFULL DS    0H
         MESSAGE MSGFULL
         LA    R15,12                   SET RETURN CODE
         B     ATTREXIT
         SPACE 2
ATTRERR  DS    0H
         MESSAGE MSGSTOWC
         SPACE 2
         LA    R15,16                   SET RETURN CODE
         B     ATTREXIT
         SPACE
ATTRFLGS EQU   *-11                ATTRIBUTE FLAGS FOR NON-ALIAS
         DC    B'00000000'         NOAC NOVS NOSSI NOSCTR NOALI
         DC    B'11000000'           AC   VS NOSSI NOSCTR NOALI
         DC    B'00100000'         NOAC NOVS   SSI NOSCTR NOALI
         DC    B'11100000'           AC   VS   SSI NOSCTR NOALI
         DC    B'00010000'         NOAC NOVS NOSSI   SCTR NOALI
         DC    B'11010000'           AC   VS NOSSI   SCTR NOALI
         DC    B'00110000'         NOAC NOVS   SSI   SCTR NOALI
         DC    B'11110000'           AC   VS   SSI   SCTR NOALI
         SPACE 3
ATTRALI  EQU   *-16                ATTRIBUTE FLAGS FOR ALIAS
         DC    B'00000001'         NOAC NOVS NOSSI NOSCTR   ALI
         DC    B'11000001'           AC   VS NOSSI NOSCTR   ALI
         DC    B'00100001'         NOAC NOVS   SSI NOSCTR   ALI
         DC    B'11100001'           AC   VS   SSI NOSCTR   ALI
         DC    B'00010001'         NOAC NOVS NOSSI   SCTR   ALI
         DC    B'11010001'           AC   VS NOSSI   SCTR   ALI
         DC    B'00110001'         NOAC NOVS   SSI   SCTR   ALI
         DC    B'11110001'           AC   VS   SSI   SCTR   ALI
ATTRF31  DC    F'31'
ATTRFM2  DC    F'-2'
ATTREXIT DS    0H
         EXIT  COMMAND
         EJECT
*
*
*        MAP SUBCOMMAND
*
*
         SPACE 2
MAP      ENTER COMMAND,PDL=PDLMAP       ESTABLISH SUBCOMMAND
         TM    FLAGS,FLOADMOD           PROCESSING LOAD LIBRARY?
         BO    MAP1                     YES
         SPACE
         LA    R1,MSGNLOAD              NOT LOAD LIBRARY
         LA    R15,16                   SET RETURN CODE
         SPACE
MAP0     DS    0H
         MESSAGE (R1)
         B     MAPEND
         SPACE 2
MAP1     DS    0H
         OI    FLAGS+1,FATTN            ALLOW INTERRUPTIONS
         NI    FLAGS+2,255-FMODE        INDICATE MODE MESSAGE NEEDED
         MVC   DIRNAME,MEMBER1          MEMBER NAME TO BLDL LIST
         BLDL  INDCB,BLDLLIST           LOCATE DIRECTORY ENTRY
         MVC   DIRFLAG(DIREND-DIRFLAG),DIRFLAG+2 BLDL ADDS THINGS
         SPACE
         B     *+4(R15)                 PROCESS RETURN CODE
         SPACE
         B     MAP2                     00-SUCESSFUL
         B     MAPNONE                  04-MEMBER NOT FOUND
         B     MAPIO                    08-I/O ERROR
         SPACE 2
MAP2     DS    0H
         OI    FLAGS+1,FALLESD          INDICATE LIST REQUEST
         OI    FLAGS+2,FSORTESD         INDICATE ESD SORTED
         SPACE 2
         BAL   R14,READCESD             FORMAT THE CESD DATA
         B     MAPNOESD
         SPACE 2
         SCREEN CLEAR
         SPACE 2
         L     R4,ESDPTR                ESD TABLE CHAIN POINTER
         LTR   R4,R4                    END OF CHAIN?
         BZ    MAPLAST                  YES
         SR    R5,R5                    CLEAR SEGTAB/ENTAB SWITCH
         USING ESDENTRY,R4              BASE FOR TABLE
         SPACE 2
MAPESD   DS    0H
         LR    R0,R4                    COPY THE ADDRESS
         S     R0,ESDPTR                SUBTRACT THE BEGIN ADDRESS
         C     R0,ESDMAXL               TEST FOR END
         BNL   MAPLAST                  YES
         CLEAR MSGTEXT1
         SPACE
         CLI   ESDTYPE,CODESD           THIS EXTERNAL DEFINITION?
         BE    MAPSD                    YES
         SPACE
         CLI   ESDTYPE,CODELR           THIS EXTERNAL REFERENCE?
         BE    MAPLR                    YES
         SPACE
         CLI   ESDTYPE,CODEPC           THIS PRIVATE CODE?
         BE    MAPPC                    YES
         SPACE
         CLI   ESDTYPE,CODESEG          THIS PRIVATE CODE?
         BNE   MSGNEXT                  YES
         SPACE
*        MUST BE SEGTAB OR ENTAB ENTRY
         SPACE
         LTR   R5,R5                    SEGTAB PROCESSED?
         MVC   MSGTEXT1+4(8),$SEGTAB
         BZ    MAPSEGTB
         MVC   MSGTEXT1+4(8),$ENTAB
MAPSEGTB DS    0H
         BALR  R5,0                     SEGTAB PROCESSED CODE
         B     MAPSD1
         SPACE 2
MAPPC    DS    0H
MAPSD    DS    0H
         MVC   MSGTEXT1+4(8),ESDNAME
         SPACE
MAPSD1   DS    0H
         TM    DIRATTR,ATTROVLY         OVERLAY PROGRAM?
         BZ    MAPNOVLY                 NO
         SPACE
         SR    R0,R0
         IC    R0,ESDSEG#
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  MSGTEXT1+30(2),DOUBLE+6(2)
MAPNOVLY DS    0H
         SPACE 3
         MVC   DOUBLE(3),ESDADDR
         MVI   DOUBLE+3,X'04'
         UNPK  MSGTEXT1+14(7),DOUBLE(4)
         TR    MSGTEXT1+14(6),TRTABLE
         MVC   DOUBLE(3),ESDLEN
         UNPK  MSGTEXT1+22(7),DOUBLE(4)
         TR    MSGTEXT1+22(6),TRTABLE
         LA    R1,32
         B     MAPPRINT
         SPACE 3
MAPLR    DS    0H
         MVC   MSGTEXT1+30(8),ESDNAME
         MVC   DOUBLE(3),ESDADDR
         MVI   DOUBLE+3,X'04'
         UNPK  MSGTEXT1+40(7),DOUBLE(4)
         TR    MSGTEXT1+40(6),TRTABLE
         LA    R1,46
         SPACE
MAPPRINT DS    0H
         SLL   R1,16
         ST    R1,MSGTEXT1
         SPACE
MSGPRINT DS    0H
        $PUTLINE MSGTEXT1,ATTN=MAPEND
         SPACE 3
MSGNEXT  LA    R4,ESDNXT                POINT TO NEXT ENTRY
         B     MAPESD
         SPACE 2
MAPLAST  DS    0H
         SPACE 3
         CLEAR MSGTEXT1
         LA    R0,6
         SLL   R0,16
         ST    R0,MSGTEXT1
        $PUTLINE MSGTEXT1,ATTN=MAPEND
         SPACE 3
MAPNOESD DS    0H
         MVC   MSGTEXT1,MSGENTRY
         LH    R15,MSGTEXT1
         LA    R14,MSGTEXT1(R15)
         LA    R15,6(,R15)
         STH   R15,MSGTEXT1
         SPACE
         MVC   DOUBLE(3),DIRENTRY
         MVI   DOUBLE+3,X'04'
         UNPK  0(7,R14),DOUBLE(4)
         TR    0(6,R14),TRTABLE
         SPACE 2
         NI    FLAGS+1,255-FATTN
         SPACE
         MESSAGE MSGTEXT1
         SPACE 3
         MVC   MSGTEXT1,MSGLEN
         LH    R15,MSGTEXT1
         LA    R14,MSGTEXT1(R15)
         LA    R15,6(R15)
         STH   R15,MSGTEXT1
         SPACE
         MVC   DOUBLE(3),DIRCORE
         UNPK  0(7,R14),DOUBLE(4)
         TR    0(6,R14),TRTABLE
         SPACE
         TM    DIRFLAG,X'80'            IS MODULE AN ALIAS?
         BZ    MAPREAL                  NO, NO ALIAS INFORMATION
         SPACE
         MESSAGE MSGTEXT1
         SPACE
         MVC   SAVETTR,DIRTTR           TTR OF REAL MODULE
         MVC   MSGTEXT1,MSGNOMOD
         OI    FLAGS+1,F1STREAD
         XC    MEMBER1,MEMBER1          ZERO FOR SEARCH KGE
         SPACE 2
MAPALIAS DS    0H
         BAL   R14,READDIR              GET NEXT DIRECTORY MEMBER
         B     MAPREAL                  END OF DIRECTORY
         B     MAPREAL                  LAST MEMBER PROCESSED
         SPACE 2
         TM    DIRFLAG,X'80'            THIS MODULE AN ALIAS?
         BO    MAPALIAS                 YES, IGNORE
         SPACE
         CLC   SAVETTR,DIRTTR           CORRECT MODULE?
         BNE   MAPALIAS                 NO
         SPACE
         MVC   MSGTEXT1,MSGREAL
         LH    R1,MSGTEXT1
         LA    R0,8(,R1)
         STH   R0,MSGTEXT1
         LA    R1,MSGTEXT1(R1)
         MVC   0(8,R1),DIRNAME
         SPACE
MAPREAL  DS    0H
         MESSAGE MSGTEXT1
         SR    R15,R15                  SET RETURN CODE
         B     MAPEND
         DROP  R4
         SPACE 3
MAPNONE  DS    0H
         MESSAGE MSGNONE
         LA    R15,4                    SET RETURN CODE
         B     MAPEND
         SPACE 2
MAPIO    DS    0H
         MESSAGE MSGIOERR
         LA    R15,8                    SET RETURN CODE
         SPACE 3
MAPEND   DS    0H
         BAL   R14,FREEESD
         EXIT  COMMAND
         EJECT
*
*
*        FIND SUBCOMMAND
*
*
         SPACE 2
         SPACE 2
FIND     ENTER COMMAND,PDL=PDLFIND      ESTABLISH SUBCOMMAND
         MVC   DIRNAME,MEMBER1          MEMBER NAME TO BLDL LIST
         BLDL  INDCB,BLDLLIST           LOCATE DIRECTORY ENTRY
         SPACE
         B     *+4(R15)                 PROCESS RETURN CODE
         SPACE
         B     FIND2                    00-SUCESSFUL
         B     FINDNONE                 04-MEMBER NOT FOUND
         B     FINDIO                   08-I/O ERROR
         SPACE 2
FIND2    DS    0H
         SR    R15,R15
         B     FINDEND
         SPACE 3
FINDNONE DS    0H
         LA    R15,4
         B     FINDEND
         SPACE 2
FINDIO   DS    0H
         MESSAGE MSGIOERR
         LA    R15,8
         SPACE 3
FINDEND  DS    0H
         EXIT  COMMAND
         EJECT
*
*
*        HISTORY SUBCOMMAND
*
*
         SPACE 2
HISTORY  ENTER COMMAND,PDL=PDLHIST      ESTABLISH SUBCOMMAND
         TM    FLAGS,FLOADMOD           PROCESSING LOAD LIBRARY?
         BO    HISTORY1                 YES
         SPACE
         LA    R1,MSGNLOAD              NOT LOAD LIBRARY
         B     HISTORY0
         SPACE
NOHIST   DS    0H
         LA    R1,MSGNHIST
         SPACE
HISTORY0 DS    0H
         MESSAGE (R1)
         LA    R15,16                   SET RETURN CODE
         B     EXITHIST
         SPACE 2
HISTORY1 DS    0H
         OI    FLAGS+1,FATTN            ALLOW INTERRUPTIONS
         NI    FLAGS+2,255-FMODE        INDICATE MODE MESSAGE NEEDED
         MVC   DIRNAME,MEMBER1          MEMBER NAME TO BLDL LIST
         BLDL  INDCB,BLDLLIST           FIND THE MEMBER
         MVC   DIRFLAG(DIREND-DIRFLAG),DIRFLAG+2 BLDL ADDS THINGS
         SPACE
         B     *+4(R15)                 PROCESS RETURN CODE
         SPACE
         B     HISTORY2                 00-SUCESSFUL
         B     HISTNONE                 04-MEMBER NOT FOUND
         B     HISTIOE                  08-I/O ERROR
         SPACE 2
HISTORY2 DS    0H
         OI    FLAGS+1,FALLESD          INDICATE BUILD ESD LIST
         SPACE 2
         LH    R1,PCLH2                 LOAD THE INDICATOR
         SLL   R1,2                     MULT BY 4
         EX    0,*+8(R1)                EX RIGHT INST
         B     *+16                     SKIP THE INSTS
         OI    FLAG2,X'04'              +0  DEFAULT
         OI    FLAG2,X'04'              +4  PROCESSOR
         NI    FLAG2,255-X'04'          +8  NOPROCESSOR
         SPACE
         LH    R1,PCLH3                 LOAD THE INDICATOR
         SLL   R1,2                     MULT BY 4
         EX    0,*+8(R1)                EX RIGHT INST
         B     *+16                     SKIP THE INSTS
         OI    FLAG2,X'08'              +0  DEFAULT
         OI    FLAG2,X'08'              +4  USER
         NI    FLAG2,255-X'08'          +8  NOUSER
         SPACE
         LH    R1,PCLH4                 LOAD THE INDICATOR
         SLL   R1,2                     MULT BY 4
         EX    0,*+8(R1)                EX RIGHT INST
         B     *+16                     SKIP THE INSTS
         OI    FLAG2,X'01'              +0  DEFAULT
         OI    FLAG2,X'04'              +4  ZAP
         NI    FLAG2,255-X'01'          +8  NOZAP
         SPACE
         BAL   R14,READCESD             FORMAT THE CESD DATA
         NOP   0                        NO ESD ENTRIES EXIST, CONTINUE
         SPACE 2
         BAL   R14,READIDR              FORMAT THE HISTORY DATA
         B     NOHIST                   HISTORY NOT AVAILABLE
         SPACE 3
         SCREEN CLEAR
         SPACE 2
         MVC   MSGTEXT1,MSGHIST1        TITLE MESSAGE
         LH    R1,MSGTEXT1
         LA    R0,L'MEMBER1(,R1)        ADJUST TOTAL MSG LENGTH
         STH   R0,MSGTEXT1
         LA    R1,MSGTEXT1(R1)
         SPACE
         MVC   0(L'MEMBER1,R1),MEMBER1
         SPACE
        $PUTLINE MSGTEXT1,ATTN=EXITHIST
         SPACE 3
         MVC   MSGTEXT1,MSGHISTD        LAST LINKEDIT DATE MSG
         LH    R1,MSGTEXT1
         LA    R0,L'DATEMASK(R1)
         STH   R0,MSGTEXT1
         LA    R1,MSGTEXT1(R1)
         SPACE 2
         MVC   0(L'DATEMASK,R1),DATEMASK
         ED    0(L'DATEMASK,R1),LKEDDATE
         SPACE
        $PUTLINE MSGTEXT1,ATTN=EXITHIST
         SPACE 2
         L     R1,ESDPTR      ANY ESD ENTRIES?
         LTR   R1,R1
         BZ    EXITHIST                 NO, PROCESSING COMPLETED
         EJECT
*
*        FORMAT IMASPZAP IDR DATA ENTRIES
*
         SPACE 2
         L     R2,ESDPTR                START OF ESD CHAIN
         LTR   R2,R2                    END OF CHAIN?
         BZ    HISTZAP0                 YES
         USING ESDENTRY,R2
         OI    FLAGS+1,F1IDR
         SPACE
HISTZAP  DS    0H
         SPACE
         LA    R3,IDRPTR                SCAN IDR CHAIN
         USING IDRENTRY,R3
         SPACE
HISTZAP1 DS    0H
         L     R3,IDRLINK
         LTR   R3,R3                    END OF CHAIN?
         BZ    HISTZAP0                 YES, NEXT ESD ENTRY
         SPACE
         CLI   IDRTYPE,IDRZAP           IMASPZAP ENTRY?
         BNE   HISTZAP1                 NO
         LH    R2,IDRESDID              LOAD THE ESDID OF THE CSECT
         BCTR  R2,0                     SUB ONE FOR THE MULTIPLY
         SLL   R2,4                     CALC THE OFFSET
         A     R2,ESDPTR                POINT TO THE CSECT
         SPACE
         TM    FLAGS+1,F1IDR            FIRST IDR RECORD?
         BZ    HISTZAP2                 NO
         XI    FLAGS+1,F1IDR
        $PUTLINE MSGHISTZ,ATTN=EXITHIST IMASPZAP TITLE LINE
         SPACE
HISTZAP2 DS    0H
         CLEAR MSGTEXT1
         SPACE
         MVC   MSGTEXT1+4(L'ESDNAME),ESDNAME
         MVC   MSGTEXT1+8+L'ESDNAME(L'DATEMASK),DATEMASK
         ED    MSGTEXT1+8+L'ESDNAME(L'DATEMASK),IDRDATE
         MVC   MSGTEXT1+12+L'ESDNAME+L'DATEMASK(L'IDRZDATA),IDRZDATA
         SPACE
         LA    R0,L'ESDNAME+L'DATEMASK+L'IDRZDATA+12
         SLL   R0,16
         ST    R0,MSGTEXT1
        $PUTLINE MSGTEXT1,ATTN=EXITHIST PRINT IMASPZAP DATA LINE
         SPACE
         B     HISTZAP1                 NEXT IDR DATA RECORD
         EJECT
HISTZAP0 DS    0H
         SPACE 3
*
*        FORMAT THE USER-SUPPLIED IDR DATA RECORDS
*
         SPACE 2
         L     R2,ESDPTR                ADDRESS OF ESD CHAIN
         LTR   R2,R2                    END OF CHAIN?
         BZ    HISTUSR0                 YES
         OI    FLAGS+1,F1IDR
         SPACE
HISTUSER DS    0H
         SPACE
         LA    R3,IDRPTR
         SPACE
HISTUSR1 DS    0H
         L     R3,IDRLINK               NEXT IDR RECORD
         LTR   R3,R3                    END OF CHAIN?
         BZ    HISTUSR0                 YES, NEXT ESD ENTRY
         SPACE
         CLI   IDRTYPE,IDRUSER          USER IDR DATA RECORD?
         BNE   HISTUSR1                 NO
         LH    R2,IDRESDID              LOAD THE ESDID OF THE CSECT
         BCTR  R2,0                     SUB ONE FOR THE MULTIPLY
         SLL   R2,4                     CALC THE OFFSET
         A     R2,ESDPTR                POINT TO THE CSECT
         SPACE 2
         TM    FLAGS+1,F1IDR            TITLE LINE REQUIRED?
         BZ    HISTUSR2                 NO
         XI    FLAGS+1,F1IDR
         SPACE
        $PUTLINE MSGHISTU,ATTN=EXITHIST USER-SUPPLIED IDR TITLE
         SPACE 2
HISTUSR2 DS    0H
         CLEAR MSGTEXT1
         SPACE 2
         MVC   MSGTEXT1+4(L'ESDNAME),ESDNAME
         MVC   MSGTEXT1+8+L'ESDNAME(L'DATEMASK),DATEMASK
         ED    MSGTEXT1+8+L'ESDNAME(L'DATEMASK),IDRDATE
         SR    R1,R1
         IC    R1,IDRLDATA
         MVC   MSGTEXT1+12+L'ESDNAME+L'DATEMASK(0),IDRDATA
         EX    R1,*-6
         LA    R1,13+L'ESDNAME+L'DATEMASK(R1)
         SLL   R1,16
         ST    R1,MSGTEXT1
         SPACE 2
        $PUTLINE MSGTEXT1,ATTN=EXITHIST
         SPACE
         B     HISTUSR1
         EJECT
HISTUSR0 DS    0H
         SPACE 3
*
*        FORMAT THE PROCESSOR-SUPPLIED IDR DATA RECORDS
*
         SPACE 2
         L     R2,ESDPTR                ADDRESS OF ESD CHAIN
         LTR   R2,R2                    END OF CHAIN?
         BZ    HISTPRC0                 YES
         OI    FLAGS+1,F1IDR
         SPACE
HISTPROC DS    0H
         SPACE
         LA    R3,IDRPTR
         SPACE
HISTPRC1 DS    0H
         L     R3,IDRLINK               NEXT IDR RECORD
         LTR   R3,R3                    END OF CHAIN?
         BZ    HISTPRC0                 YES, NEXT ESD ENTRY
         SPACE
         CLI   IDRTYPE,IDRPROC          PROCESSOR IDR DATA RECORD?
         BNE   HISTPRC1                 NO
         LH    R2,IDRESDID              LOAD THE ESDID OF THE CSECT
         BCTR  R2,0                     SUB ONE FOR THE MULTIPLY
         SLL   R2,4                     CALC THE OFFSET
         A     R2,ESDPTR                POINT TO THE CSECT
         SPACE 2
         TM    FLAGS+1,F1IDR            TITLE LINE REQUIRED?
         BZ    HISTPRC2                 NO
         XI    FLAGS+1,F1IDR
         SPACE
        $PUTLINE MSGHISTP,ATTN=EXITHIST USER-SUPPLIED IDR TITLE
         SPACE 2
HISTPRC2 DS    0H
         CLEAR MSGTEXT1
         SPACE 2
         MVC   MSGTEXT1+4(L'ESDNAME),ESDNAME
         MVC   MSGTEXT1+8+L'ESDNAME(L'DATEMASK),DATEMASK
         ED    MSGTEXT1+8+L'ESDNAME(L'DATEMASK),IDRDATE
         SR    R1,R1
         IC    R1,IDRLDATA
         MVC   MSGTEXT1+12+L'ESDNAME+L'DATEMASK(0),IDRDATA
         EX    R1,*-6
         LA    R1,13+L'ESDNAME+L'DATEMASK(R1)
         SLL   R1,16
         ST    R1,MSGTEXT1
         SPACE 2
        $PUTLINE MSGTEXT1,ATTN=EXITHIST
         SPACE
         B     HISTPRC1
         EJECT
HISTNONE DS    0H
         MESSAGE MSGNONE                MEMBER DOES NOT EXIST
         LA    R15,4                    SET RETURN CODE
         B     EXITHIST
         SPACE 3
HISTIOE  DS    0H
         MESSAGE MSGIOERR               I/O ERROR IN DIRECTORY
         LA    R15,8                    SET RETURN CODE
         SPACE 2
HISTPRC0 DS    0H
EXITHIST DS    0H
         LR    R2,R15                   SAVE RETURN CODE
         BAL   R14,FREEESD
         BAL   R14,FREEIDR
         SPACE 2
         NI    FLAGS+1,255-F1IDR
         SPACE 2
         LR    R15,R2                   RESTORE RETURN CODE
         EXIT  COMMAND
         SPACE 3
         DROP  R2,R3
         EJECT
         AIF   (&MVT).NOPACK
*
*
*        PACK SUBCOMMAND
*
*
         SPACE 2
PACK     ENTER COMMAND,PDL=PDLPACK      ESTABLISH SUBCOMMAND
         SPACE 2
         OI    FLAGS+1,FATTN            ALLOW INTERRUPTIONS
         LH    R1,PCLPACKK              LOAD THE KEYWORD NUMBER
         SLL   R1,2                     CALC THE OFFSET
         SPACE
         B     *+4(R1)
         B     PACK1                    00-DEFAULT
         B     PACK2                    01-MODULE SORT
         B     PACK1                    02-ADDRESS SORT
         SPACE 2
PACK1    NI    FLAGS+2,255-FPACKM       TURN OFF THE FLAG
         B     PACK3
PACK2    OI    FLAGS+2,FPACKM           INDICATE MODULE SORT
         SPACE 2
PACK3    DS    0H
         NI    FLAGS+2,255-FMODE        INDICATE MODE MESSAGE NEEDED
         L     R2,16                    LOADCVT ADDRESS
         CLI   CVTDCB(R2),X'13'         TEST FOR MVS
         BNE   PACKNS                   NO, NOT SUPPORTED
         SCREEN CLEAR
         SPACE 2
         L     R0,PACKLPCE
         ST    R0,PACKLENG              SAVE IT
         GETMAIN EC,LV=(0),A=PACKADDR,MF=(E,PARMLIST),SP=0 GET IT
         LTR   R15,R15                  DID I
         BNZ   PACKSTOR                 NO, ERROR
         SPACE 2
         L     R3,PACKADDR              LOAD THE ADDRESS
         USING LPCE,R3                  SET-UP THE USING
         L     R1,CVTLPDIA(R2)          GET THE ADDRESS
         USING LPDE,R1                  SET-UP THE USING
         SPACE
PACK4    CLC   LPDENAME,PACKLAST        TEST FOR END
         BE    PACK5                    YES
         MVC   LPCE(LENLPCE),LPDENAME   COPY THE GOOD INFO
         LA    R1,LPDENXT               GET ADDRESS OF NEXT
         LA    R3,LPCENXT               DITTO
         B     PACK4                    DO NEXT
         SPACE
PACK5    ST    R3,PACKMAX               SAVE THE END ADDRESS
         DROP  R1
         L     R3,PACKADDR              LOAD START ADDRESS
PACK6A   LR    R4,R3                    COPY THE ADDRESS
PACK6    LA    R4,LPCENXT-LPCE(R4)      LOAD ADDRESS OF NEXT
         C     R4,PACKMAX               IS IT THE END
         BNL   PACK8                    FOR THIS SCAN
         TM    FLAGS+2,FPACKM           IS IT MODULE SORT
         BO    PACK7                    YES, DO IT
         SPACE
         CLC   LPCENTP,LPCENTP-LPCE(R4) IS IT IN ORDER
         BL    PACK6                    YES, TRY NEXT
         BH    PACKSWAP                 NO, SWAP ENTRYS
         SPACE
         TM    LPCEATTR,LPCEMIN         IS IT MINOR
         BZ    PACK6                    NO, TRY NEXT
         SPACE
PACK7    CLC   LPCENAME,LPCENAME-LPCE(R4) IS IT IN ORDER
         BL    PACK6                    YES, TRY NEXT
         BH    PACKSWAP                 NO, SWAP ENTRYS
         SPACE
PACKSWAP XC    LPCE(LENLPCE),0(R4)      START THE SWAP
         XC    0(LENLPCE,R4),LPCE       DO SOME MORE OF THE SWAP
         XC    LPCE(LENLPCE),0(R4)      END THE SWAP
         B     PACK6                    GO TO TRY NEXT
         SPACE
PACK8    LA    R3,LPCENXT               POINT TO THE NEXT
         C     R3,PACKMAX               TEST FOR END
         BL    PACK6A                   NO, DO NEXT
PACK9    L     R3,PACKADDR
PACK9A   C     R3,PACKMAX
         BNL   PACK10
         SPACE 3
         CLEAR MSGTEXT1                 CLEAR IT TO BLANKS
         MVC   MSGTEXT1+4(8),LPCENAME
         MVC   DOUBLE(3),LPCENTP+1
         MVI   DOUBLE+3,X'04'
         UNPK  MSGTEXT1+14(7),DOUBLE(4)
         TR    MSGTEXT1+14(6),TRTABLE
         TM    LPCEATTR,LPCEMIN         TEST FOR MINOR
         BO    PACK9C                   YES, DO IT
         MVC   DOUBLE(3),LPCEXTAD+1     MOVE IN THE ADDRESS
         MVI   DOUBLE+3,X'04'
         UNPK  MSGTEXT1+22(7),DOUBLE(4)
         TR    MSGTEXT1+22(6),TRTABLE
         MVC   DOUBLE(3),LPCEXTLN+1     MOVE IN THE ADDRESS
         MVI   DOUBLE+3,X'04'
         UNPK  MSGTEXT1+30(7),DOUBLE(4)
         TR    MSGTEXT1+30(6),TRTABLE
         LA    R1,40
         B     PACKPRNT
PACK9C   DS    0H
         MVC   MSGTEXT1+40(8),LPCEMJNM
         LA    R1,52
         SPACE
PACKPRNT DS    0H
         SLL   R1,16
         ST    R1,MSGTEXT1
         SPACE
        $PUTLINE MSGTEXT1,ATTN=PACKEND
         SPACE 3
PACKNXT  LA    R3,LPCENXT               POINT TO NEXT ENTRY
         B     PACK9A
         SPACE
PACKLPCE DC    A(64*1024)
PACKLAST DC    X'FFFFFFFFFFFFFFFF'
         SPACE
PACKNS   DS    0H
         MESSAGE MSGNOTS
         LA    R15,16                   SET RETURN CODE
         B     PACKEND
         SPACE 2
PACKSTOR DS    0H
         MESSAGE MSGSTOR
         LA    R15,16                   SET RETURN CODE
         SPACE
PACK10   DS    0H
         SPACE
PACKEND  DS    0H
         LR    R2,R15                   SAVE RETURN CODE
         L     R1,PACKADDR              GET ADDRESS OF MODULES
         LTR   R1,R1                    DID I
         BZ    PACKEXIT                 NO, ERROR
         L     R0,PACKLENG              SAVE IT
         FREEMAIN R,LV=(0),A=(1)        GET IT
         XC    PACKADDR,PACKADDR        ZERO THE ADDRESS
         LR    R2,R15                   SAVE RETURN CODE
PACKEXIT DS    0H
         EXIT  COMMAND
         EJECT
.NOPACK  ANOP
CALL     ENTER COMMAND,PDL=PDLCALL      ESTABLISH SUBCOMMAND
         SPACE 2
         NI    FLAGS+2,255-FMODE        SET TO ISSUE MODE MESSAGE
         OI    FLAGS+1,FATTN            SET TO ISSUE MODE MESSAGE
         SPACE
         LA    R1,SCANANSR              POINT TO THE CSOA
         AIF   (&MVT).CALMV1
         USING CSOA,R1
         TM    CSOAFLG,CSOAEXEC         TEST FOR IMPLICIT EXEC
         BO    CALL5                    YES, TRY EXEC
.CALMV1  ANOP
         L     R2,CSOACNM               POINT TO THE NAME
         LH    R3,CSOALNM               LOAD THE LENGTH
         DROP  R1
         BCTR  R3,0                     SUB 1
         MVI   DIRNAME,C' '             SET FIRST BLANK
         MVC   DIRNAME+1(7),DIRNAME      AND THE REST
         XC    DIRNAME+8(DIREND-DIRNAME-8),DIRNAME+8 ZERO IT
         MVC   DIRNAME(0),0(R2)         SET THE NAME
         EX    R3,*-6                   ALL OF IT
         AIF   (&ACF2).CALACF1
         EJECT
*        THIS CODE WAS LIFTED FROM ACF$X WITH PERMISSION FROM   ACF 20
*                                                               ACF 20
*                                                               ACF 20
*          --> ACF2 IS A LICENSED PROGRAM PRODUCT   FEB, 1978   ACF 20
*              OF SCHRAGER KLEMENS AND KRUEGER, INC.            ACF 20
*                                                               ACF 20
*                                                               ACF 20
         SPACE 1                                                ACF 20
         USING ACCVT,R6                ADDRESS ACF2 CVT          ACF 20
         USING ACUCB,R5                ADDRRES ACF2 UCB          ACF 20
         USING PSA,R0                  ADDRESS LOW/FIXED STORAGE ACF 20
         ACFGACVT R6,NONE=CALL0D      *GET THE ACF CVT ADDR   RV ACF 20
         ACFGUCB R5,NONE=CALL0D        GET THE ACF UCB ADDR      ACF 20
         ICM   R0,7,ACULRECP+1         GET THE ACF LID RECORD    ACF 20
         BZ    CALL0D                  NONE ?                    ACF 20
         LA    R1,SCANANSR              POINT TO THE CSOA
         USING CSOA,R1
         LA    R2,CALL0C               COMMAND LIST. GET 1ST     ACF 20
         LA    R4,CALL5                COMMAND ENTRY FOUND ADDRESACF 20
         ICM   R15,15,ACUTCLEN         GET COMMAND LIST LENGTH   ACF 21
         BZ    CALL0D                  NONE ?                    ACF 21
         ICM   R1,15,ACUTCADD          GET COMMAND LIST ADDRESS  ACF 21
         BZ    CALL0D                  NONE ... LINK ASIS        ACF 21
         DROP  R0,R5                   DROP REGISTERS            ACF 20
         SR    R14,R14                 CLEAR FOR *IC*            ACF 20
         SPACE 1                                                 ACF 20
CALL0    TM    0(R1),X'FF'             END OF LIST ?             ACF 20
         BOR   R4                      END-OF-LIST               ACF 20
         IC    R14,0(R1)               GET LIST ENTRY LENGTH     ACF 20
         CLC   DIRNAME(0),1(R1)        *EX* CLC                  ACF 20
         EX    R3,*-6                  IS THIS ELEMENT SAME ?    ACF 20
         BE    CALL0B                  YES ... DO SOMETHING      ACF 20
         SPACE 1                                                 ACF 20
CALL0A   LA    R14,2(R14)              BUMP PAST LENGTH          ACF 20
         BXLE  R1,R14,CALL0            GET NEXT ENTRY ADDRESS    ACF 20
         BR    R4                      ALL DONE ...              ACF 20
         SPACE 1                                                 ACF 20
CALL0B   CR    R14,R3                  IS THIS THE ENTRY ?       ACF 20
         BE    CALL0D                  YES ... DO IT             ACF 20
         BL    CALL0A                  NO ... TRY NEXT           ACF 20
         LA    R4,CALL5                LOAD NEW RETURN ADDRESS   ACF 20
         BHR   R2                      MAYBE ITS AN ALIAS        ACF 20
         SPACE 1                                                 ACF 20
CALL0C   LA    R2,CALL0A               LOAD NEW RETURN           ACF 20
         LR    R5,R14                  SAVE CURRENT OPERAND LENGTACF 20
         LR    R0,R1                   SAVE CURRENT ADDRESS      ACF 20
         BAL   R4,CALL0A               AND TRY NEXT ALIAS ??     ACF 20
         MVI   DIRNAME,C' '             SET FIRST BLANK          ACF 20
         MVC   DIRNAME+1(7),DIRNAME      AND THE REST            ACF 20
         LR    R1,R0                   RE-GET LENGTH AND BUFFER  ACF 20
         MVC   DIRNAME(0),1(R1)        *EX* MVC INTO CMD BUFFER  ACF 20
         EX    R5,*-6                  AND MOVE FULL CMDNAME     ACF 20
         SPACE 2                                                 ACF 20
.CALACF1 ANOP
CALL0D   CLC   DIRNAME,=CL8'TIME'      IS COMMAND TIME ?         ACF 20
         BNE   CALL0E                  NOT SUPPORTED UNLESS IN REACF 20
         MVC   DIRNAME,=CL8'IKJEFT25'  CHANGE THE COMMAND NAME   ACF 20
         DROP  R6                      DROP REGISTER             ACF 20
CALL0E   TM    FLAGS,FLOADMOD           IS IT A LOAD MODULE LIBRARY
         BZ    CALL0H                   NO, DON'T SEARCH IT
         LA    R4,INDCB                 DO A BLDL ON THE DCB
         SPACE
CALL0F   DS    0H
         SPACE
         BLDL  (R4),BLDLLIST            IS THERE ONE
         SPACE
         B     *+4(R15)                 TEST RETURN CODE
         B     CALL1                    +0 GOOD BLDL
         B     CALL0G                   +4 MEMBER NOT FOUND
         B     CALLBAD                  +8 I/O ERROR (HOPE NOT)
         SPACE
CALL0G   DS    0H
         LTR   R4,R4                    TEST FOR DCB
         BZ    CALL5                    NO, TRY IMPLICIT EXEC
CALL0H   DS    0H
         SR    R4,R4                    ZERO FOR LINKLIB
         AIF   (&MVT).CALMV2
         STM   0,12,20(13)              SAVE THE REGISTERS
         L     R3,CVT                   POINT TO CVT
         L     R15,CVTLPDSR(,R3)        POINT TO LPA SEARCH ROUTINE
         LM    R0,R1,DIRNAME            LOAD THE MODULE NAME
         BALR  R14,R15                  GO TO FIND IT
         LA    R15,0                    FOUND, TEST IT NOW
         LM    0,12,20(13)              RESTORE THE REGISTERS
         LTR   R15,R15                  TEST FOR GOOD
         BZ    CALL1                    YES, TRY AGAIN
.CALMV2  ANOP
         B     CALL0F                   NO,
         SPACE
CALL1    LA    R2,CALLPGML              POINT TO LIST OF PGMS
CALL1A   TM    8(R2),B'01000000'        IS IT A FUNNY ONE
         BO    CALL1C                   YES, DO THE SPECIAL TEST
         CLC   DIRNAME,0(R2)            TEST FOR THIS GUY
         BNE   CALL1E                   NO, TRY NEXT
CALL1B   DS    0H
         TM    8(R2),B'00001000'        IS IT NON-EXECUTABLE
         BO    CALLBAD                  YES, BAD
         TM    8(R2),B'10000000'        IS IT PGM
         BO    CALL3                    YES, IT'S A PGM, BY GOLLY
         B     CALL2                    NO, IT'S A CP
CALL1C   CLC   DIRNAME(3),0(R2)         TEST FOR CLASS OF PROGRAMS
         BE    CALL1B                   YES, DO FURTHER TESTS
CALL1E   LA    R2,12(,R2)               POINT TO THE NEXT
         CLI   0(R2),X'FF'              END OF LIST
         BNE   CALL1A                   NO, TRY IT
         SPACE 2
CALL2    LA    R1,PARMLIST              POINT TO THE PARM AREA
         USING CPPL,R1
         MVC   CPPLUPT,ADDRUPT          MOVE IT
         MVC   CPPLPSCB,ADDRPSCB        MOVE IT
         MVC   CPPLECT,ADDRECT          MOVE IT
         MVC   CPPLCBUF,ADDRCBUF        MOVE IT
         DROP  R1
         L     R3,ADDRECT               POINT TO ECT
         USING ECT,R3
         TM    8(R2),B'00100000'        FUNNY CP
         BO    CALL2A                   NO, IT'S OK
         MVC   ECTPCMD,DIRNAME          MOVE IN THE NEW NAME
         B     CALL2B
CALL2A   DS    0H
         MVC   ECTSCMD,DIRNAME          MOVE SUBCOMMAND NAME
         SPACE
CALL2B   DS    0H
         LA    R1,SCANANSR              POINT TO THE CSOA
         USING CSOA,R1
         NI    ECTSWS,255-ECTNOPD       TURN OFF OPERAND FLAG
         TM    CSOAFLG,CSOAVWP          DOES IT HAVE PARMS
         BO    *+8                      NO, IT'S OK
         OI    ECTSWS,ECTNOPD           SET NO OPERANDS
         DROP  R1,R3
CALL2D   DS    0H
         TM    FLAGS,FLOADMOD           IS IT A LOAD MODULE LIBRARY
         BZ    *+16                     NO, DON'T ALLOW IT AS TASKLIB
         TM    8(R2),B'00010000'        FUNNY ONE (NEEDS TASKLIB)
         BZ    *+8                      NO, IT'S OK
         LA    R4,INDCB                 POINT TO DCB
         SPACE
         MVI   ATTECB,0                 ZERO THE ECB
         SPACE
         LA    R14,CALL2DB              POINT TO RETURN ADDRESS
         AIF   (&MVT).CALMV3
         TM    FLAG2,FAUTHR             TEST FOR AUTHORIZED
         BZ    CALL2DA                  NO, IGNORE
         MODESET KEY=ZERO               SET AUTHORIZED
         L     R1,16                    POINT TO CVT
         L     R1,0(,R1)                POINT TO TCB WORDS
         L     R1,4(,R1)                POINT TO TCB
         L     R1,180(,R1)              POINT TO JSCB
         NI    236(R1),X'FE'            RE-SET AUTHORIZED
         LTR   R4,R4                    TEST FOR DCB
         BZ    CALL2DA                  NO, DON'T TEST
         L     R1,44(,R4)               POINT TO DEB
         TM    14(R1),X'02'             TEST FOR AUTH LIBRARY
         BO    CALL2DA                  NO
         LA    R15,CALL2DA              POINT TO RETURN ADDRESS
         SVC   12                       DO A SYNCH
         B     CALL2DB                  CONTINUE
.CALMV3  ANOP
CALL2DA  DS    0H
         XC    ATTLIST(60),ATTLIST      ZERO THE LIST
         SPACE
         LR    R3,R14                   COPY THE RETURN ADDRESS
         AIF   (&MVT).CALMV4
         OC    DIRNAME+8(3),DIRNAME+8   TEST FOR ZERO
         BNZ   CALL2DC                  YES, DO ATTACH WITH EP
         SPACE
         ATTACH EPLOC=DIRNAME,ECB=ATTECB,SZERO=NO,SF=(E,ATTLIST),      *
               ESTAI=(CALLSTAI,(WORKREG)),PURGE=NONE,ASYNCH=YES,       *
               DCB=(R4),TASKLIB=(R4),RSAPF=YES,                        *
               MF=(E,PARMLIST),SHSPV=78 ATTACH THE CP
         ST    R1,ATTTCB                SAVE ADDRESS OF THE TCB
         LR    R14,R3                   COPY THE RETURN ADDRESS
         BR    R14                      RETURN
         SPACE
CALL2DC  DS    0H
         ATTACH DE=DIRNAME,ECB=ATTECB,SZERO=NO,SF=(E,ATTLIST),         *
               ESTAI=(CALLSTAI,(WORKREG)),PURGE=NONE,ASYNCH=YES,       *
               DCB=(R4),TASKLIB=(R4),RSAPF=YES,                        *
               MF=(E,PARMLIST),SHSPV=78 ATTACH THE CP
         ST    R1,ATTTCB                SAVE ADDRESS OF THE TCB
         LR    R14,R3                   COPY THE RETURN ADDRESS
         BR    R14                      RETURN
         AGO   .CALMV5
.CALMV4  ANOP
         ATTACH DE=DIRNAME,ECB=ATTECB,SZERO=NO,SF=(E,ATTLIST),         *
               STAI=(CALLSTAI,(WORKREG)),PURGE=NONE,ASYNCH=YES,        *
               DCB=(R4),TASKLIB=(R4),                                  *
               MF=(E,PARMLIST),SHSPV=78 ATTACH THE CP
         ST    R1,ATTTCB                SAVE ADDRESS OF THE TCB
         LR    R14,R3                   COPY THE RETURN ADDRESS
         BR    R14                      RETURN
.CALMV5  ANOP
CALL2DB  DS    0H
         SPACE
         LA    R0,ATTNECB               POINT TO THE ATTN ECB
         ST    R0,ECBLIST               SAVE THE ADDRESS
         LA    R0,ATTECB                POINT TO THE ATT ECB
         ST    R0,ECBLIST+4             SAVE THE ADDRESS
         MVI   ECBLIST+4,X'80'          SET END OF LIST
         SPACE
         WAIT  ECBLIST=ECBLIST          WAIT FOR IT
         SPACE
         L     R3,ADDRECT               POINT TO ECT
         SPACE
         AIF   (&MVT).CALMV6
         TM    FLAG2,FAUTHR             TEST FOR AUTHORIZED
         BZ    CALL2DD                  NO, IGNORE
         L     R1,16                    POINT TO CVT
         L     R1,0(,R1)                POINT TO TCB WORDS
         L     R1,4(,R1)                POINT TO TCB
         L     R1,180(,R1)              POINT TO JSCB
         OI    236(R1),X'01'            SET AUTHORIZED AGAIN
         MODESET KEY=NZERO
.CALMV6  ANOP
CALL2DD  DS    0H
         SPACE
         USING ECT,R3
         TM    ATTECB,X'40'             IS THE TASK ENDED
         BZ    CALL2E                   NO, JUST DELETE LIST AND DETACH
         L     R1,ATTTCB                POINT TO THE TCB
         L     R0,16(R1)                LOAD THE COMPLETION CODE
         ST    R0,ECTRCDF               STORE THE RETURN CODE
         MVI   ECTRCDF,0                SET NORMAL RETURN CODE
         TM    29(R1),X'80'             TEST FOR TASK ABENDED
         BO    CALL2C                   YES, ISSUE ABEND MESSAGE
         LTR   R0,R0                    WAS IT ZERO
         BZ    CALL4                    YES, JUST END
         TM    8(R2),B'10000000'        WAS IT A PROGRAM?
         BZ    CALL4                    NO, A CP, NO MESSAGE
         MVI   MSGTEXT1+4,C' '          SET THE FIRST BLANK
         MVC   MSGTEXT1+5(8),DIRNAME    SET THE PGM NAME
         LA    R1,MSGTEXT1+12           POINT TO END OF NAME
         CLI   0(R1),C' '               TEST FOR BLANK
         BNE   *+8
         BCT   R1,*-8                   TRY THE NEXT
         MVC   1(L'MSGCAL1,R1),MSGCAL1  SET THE MESSAGE TEXT
         N     R0,CALLXFFF              TURN OFF TOP BITS
         CVD   R0,DOUBLE                CONVERT TO USABLE
         UNPK  L'MSGCAL1+1(4,R1),DOUBLE+5(3) MAKE IT PRINTABLE
         OI    L'MSGCAL1+4(R1),C'0'     TURN ON THE LAST CHAR
         LA    R0,L'MSGCAL1+5(R1)       POINT TO THE END
         LA    R1,MSGTEXT1              POINT TO START
         SR    R0,R1                    CALC THE LENGTH
         SLL   R0,16                    SHIFT IT FOR STORE
         ST    R0,MSGTEXT1              STORE THE LENGTH
         MESSAGE MSGTEXT1               WRITE THE MESSAGE
         B     CALL4                    GO TO END IT
CALL2C   DS    0H
         MVI   ECTRCDF,X'80'            SET CP ABENDED
         MVI   MSGTEXT1+4,C' '          SET THE FIRST BLANK
         MVC   MSGTEXT1+5(8),DIRNAME    SET THE PGM NAME
         LA    R1,MSGTEXT1+12           POINT TO END OF NAME
         CLI   0(R1),C' '               TEST FOR BLANK
         BNE   *+8
         BCT   R1,*-8                   TRY THE NEXT
         MVC   1(L'MSGCAL2,R1),MSGCAL2  SET THE MESSAGE TEXT
         ST    R0,DOUBLE                CONVERT TO USABLE
         UNPK  L'MSGCAL2+1(7,R1),DOUBLE+1(4) MAKE IT PRINTABLE
         TR    L'MSGCAL2+1(6,R1),TRTABLE TRANSLATE THE HEX CHARS
         LA    R0,L'MSGCAL2+7(R1)       POINT TO THE END
         LA    R1,MSGTEXT1              POINT TO START
         SR    R0,R1                    CALC THE LENGTH
         SLL   R0,16                    SHIFT IT FOR STORE
         ST    R0,MSGTEXT1              STORE THE LENGTH
         MESSAGE MSGTEXT1               WRITE THE MESSAGE
CALL2E   DS    0H
         OI    ECTSWS,ECTATRM           SET ENDED BY ATTN
         LA    R1,PARMLIST              AREA FOR STACK PARM LIST
         USING IOPL,R1
         SPACE
         MVC   IOPLUPT,ADDRUPT
         MVC   IOPLECT,ADDRECT
         LA    R0,ATTNECB
         MVI   ATTNECB,0
         ST    R0,IOPLECB
         SPACE 2
         STACK PARM=PARMLIST+16,DELETE=ALL,MF=(E,(1))
         SPACE 3
         DROP  R1
         B     CALL4                    GO TO END IT
         DROP  R3
*        MORE  HERE
CALL3    XC    ATTDDNL(72),ATTDDNL      ZERO THE DDNAMES
         LA    R0,ATTDDNL+2             POINT TO END
         SPACE
         TM    8(R2),B'00000100'        DDNAME1
         BZ    *+14                     NO IGNORE IT
         MVC   ATTDDN1(8),DDNAME        COPY THE NAME
         LA    R0,ATTDDN1+8             POINT TO END
         SPACE
         TM    8(R2),B'00000010'        DDNAME2
         BZ    *+14                     NO IGNORE IT
         MVC   ATTDDN2(8),DDNAME        COPY THE NAME
         LA    R0,ATTDDN2+8             POINT TO END
         SPACE
         TM    8(R2),B'00000001'        DDNAME3
         BZ    *+14                     NO IGNORE IT
         MVC   ATTDDN3(8),DDNAME        COPY THE NAME
         LA    R0,ATTDDN3+8             POINT TO END
         SPACE
         LA    R1,ATTDDNL+2             LOAD BEGIN ADDRESS
         SR    R0,R1                    CALC THE LENGTH
         STH   R0,ATTDDNL               STORE IT
         L     R1,ADDRPCL               POINT TO THE PARSE LIST
         BAL   R14,GOPARSE              GO TO PARSE IT
         B     CALLBAD                  BAD PARSE, END IT
         SPACE
*        RETURN HERE AFTER GOOD PARSE
         L     RPDL,ADDRPDL             POINT TO THE ANSWER
         LH    R15,PDLCAPRM+4           LOAD THE LENGTH
         STH   R15,ATTPARML             STORE THE LENGTH
         LTR   R15,R15                  WAS THERE ANY
         BZ    CALL3A                   NO, DON'T TRY TO MOVE
         SPACE
         BCTR  R15,0                    SUB 1
         L     R3,PDLCAPRM              LOAD THE ADDRESS
         MVC   ATTPARML+2(0),0(R3)      MOVE THE PARM
         EX    R15,*-6                  ALL OF IT
         SPACE
CALL3A   DS    0H
         LA    R0,ATTPARML              POINT TO THE PARM
         ST    R0,PARMLIST              STORE IT
         LA    R0,ATTDDNL               POINT TO THE DDNAME
         ST    R0,PARMLIST+4            STORE IT
         MVI   PARMLIST+4,X'80'         SET END OF LIST
         B     CALL2D                   GO TO ATTACH
*        MORE  HERE
CALL4    DS    0H
         DETACH ATTTCB,STAE=YES         DETACH THE TASK
         STATUS START                   LET IT FINISH
         MVI   ATTNECB,0                MARK AS NOT COMPLETE
         SPACE
         L     R3,ADDRECT               POINT TO ECT
         USING ECT,R3
         MVC   ECTPCMD,MODECMD          MOVE IN THE OLD NAME
         MVI   ECTSCMD,C' '             SET FIRST BLANK
         MVC   ECTSCMD+1(7),ECTSCMD     BLANK SUBCOMMAND NAME
         SPACE
         LA    R1,DAIRBLK               POINT TO DAIR BLOCK
         USING DAPB2C,R1
         XC    DAPB2C(16),DAPB2C        ZERO THE AREA
         MVI   DA2CCD+1,X'2C'           SET THE CODE
         MVI   DA2CFLG+1,X'02'          SET ALL LOWER TASKS NOT IN USE
         MVI   DA2CDDN,C' '             SET FIRST BLANK
         MVC   DA2CDDN+1(7),DA2CDDN     AND THE REST
         SPACE
         BAL   R14,CALLDAIR             GO TO DO IT
         SPACE
         DROP  R1
         B     CALLEXIT                 END IT
         SPACE
CALL5    DS    0H
         MVC   DIRNAME,CALLEXEC         MOVE IN THE MODULE NAME
         BLDL  0,BLDLLIST               TEST FOR THERE
         SPACE
         B     *+4(R15)                 TEST FOR GOOD
         B     CALL5A                   +0 GOOD BLDL
         B     CALLBAD                  +4 MEMBER NOT FOUND
         B     CALLBAD                  +8 DIRECTORY I/O ERROR
         SPACE
CALL5A   DS    0H
         SR    R4,R4                    ZERO THE DCB POINTER
         L     R1,ADDRCBUF              POINT TO COMMAND BUFFER
         XC    2(2,R1),2(R1)            ZERO THE OFFSET
         LA    R2,CALLEXEC              POINT TO EXEC ENTRY
         B     CALL2                    GO TO EXEC IMPLICIT EXEC
         SPACE
CALLSTAI DS    0H
         PUSH  USING
         AIF   (&MVT).CALMV7
         STM   14,12,12(R13)
         LR    12,15                    COPY THE ENTRY ADDRESS
         USING CALLSTAI,12
         SETRP RC=16,REGS=(14,12)       SET THE RETURN PARAMETERS
         AGO   .CALMV8
.CALMV7  ANOP
         LA    15,16                    SET THE RETURN CODE
         BR    R14                      RETURN
.CALMV8  ANOP
         POP   USING
         SPACE
CALLRTRY DS    0H
         L     R15,0(,R1)               LOAD ADDRESS OF RETURN CODE
         L     R15,0(,R15)              LOAD THE RETURN CODE
         SVC   3                        EXIT THIS MESS
         SPACE
CALLXFFF DC    A(X'FFF')
         SPACE
*        THE FOLLOWING TABLE DEFINES PROGRAMS THAT ARE SPECIAL TO
*        THE CALL FUNTION.  THE FORMAT OF THE TABLE IS AS FOLLOWS:
         SPACE
*        DC    CL8'PROGRAM',B'XXXXXXXX',AL3(0)
         SPACE
*        WHERE 'PROGRAM' IS THE NAME, XXXXXXXX IS EIGHT BITS OF ATTRS
*        AND 0 IS A RESERVED FIELD, FOR PADDING
         SPACE
*        THE ATTRIBUTE FIELD IS AS FOLLOWS:
*        BIT
         SPACE
*        1XXXXXXX --- THIS DEFINES A PROGRAM (AS OPPOSED TO CP)
*        X1XXXXXX --- THIS ENTRY DEFINES A THREE CHARACTER PREFIX
*        XX1XXXXX --- THIS CP NEEDS IT'S NAME AS SECONDARY COMMAND
*        XXX1XXXX --- THIS PROGRAM SHOULD BE ATTACHED WITH TASKLIB
*        XXXX1XXX --- THIS PROGRAM IS NON-EXECUTABLE
*        XXXXX1XX --- THIS PROGRAM NEEDS DDNAME1 DEFINED (SYSLIB)
*        XXXXXX1X --- THIS PROGRAM NEEDS DDNAME2 DEFINED (SYSUT1)
*        XXXXXXX1 --- THIS PROGRAM NEEDS DDNAME3 DEFINED (SYSUT2)
*
         SPACE
CALLEXEC DS    0D
         DC    CL8'EXEC    ',B'00100000',AL3(0) IMPLICIT EXEC
         SPACE
CALLPGML DS    0F
         DC    CL8'IMASPZAP',B'10000100',AL3(0)
         DC    CL8'AMASPZAP',B'10000100',AL3(0)
         DC    CL8'AMBLIST ',B'10000100',AL3(0)
         DC    CL8'HMBLIST ',B'10000100',AL3(0)
         DC    CL8'IMBLIST ',B'10000100',AL3(0)
         DC    CL8'IEBCOPY ',B'10000011',AL3(0)
         DC    CL8'IEBUPDTE',B'10000011',AL3(0)
         DC    CL8'IEBPTPCH',B'10000010',AL3(0)
         DC    CL8'IEHPROGM',B'10000000',AL3(0)
         DC    CL8'IEHPROGA',B'10000000',AL3(0)
         DC    CL8'IEHLIST ',B'10000000',AL3(0)
         DC    CL8'IDCAMS  ',B'10000000',AL3(0)
         DC    CL8'IEHMOVE ',B'10000000',AL3(0)
         DC    CL8'IKJEFT01',B'10000000',AL3(0)
         DC    CL8'$       ',B'00110000',AL3(0)
         DC    CL8'ALLOC   ',B'00100000',AL3(0)
         DC    CL8'ALLOCATE',B'00100000',AL3(0)
         DC    CL8'EX      ',B'00100000',AL3(0)
         DC    CL8'EXEC    ',B'00100000',AL3(0)
         DC    CL8'FREE    ',B'00100000',AL3(0)
         DC    CL8'HELP    ',B'00100000',AL3(0)
         DC    CL8'H       ',B'00100000',AL3(0)
         DC    CL8'SE      ',B'00100000',AL3(0)
         DC    CL8'SEND    ',B'00100000',AL3(0)
         DC    CL8'IKJEFT25',B'00100000',AL3(0)
         DC    CL8'LOGON   ',B'00100000',AL3(0)
         DC    CL8'LOGOFF  ',B'00100000',AL3(0)
         DC    CL8'TEST    ',B'00101000',AL3(0)
         DC    CL8'WHEN    ',B'00101000',AL3(0)
         DC    CL8'AHL     ',B'01001000',AL3(0)
         DC    CL8'HHL     ',B'01001000',AL3(0)
         DC    CL8'IHL     ',B'01001000',AL3(0)
         DC    CL8'IDC     ',B'01001000',AL3(0)
         DC    CL8'IEB     ',B'01001000',AL3(0)
         DC    CL8'IEF     ',B'01001000',AL3(0)
         DC    CL8'IEH     ',B'01001000',AL3(0)
         DC    CL8'IEK     ',B'01001000',AL3(0)
         DC    CL8'IEM     ',B'01001000',AL3(0)
         DC    CL8'IEQ     ',B'01001000',AL3(0)
         DC    CL8'IEY     ',B'01001000',AL3(0)
         DC    CL8'IEU     ',B'01001000',AL3(0)
         DC    CL8'IEW     ',B'01001000',AL3(0)
         DC    CL8'IFG     ',B'01001000',AL3(0)
         DC    CL8'IFC     ',B'01001000',AL3(0)
         DC    CL8'IFD     ',B'01001000',AL3(0)
         DC    CL8'IGF     ',B'01001000',AL3(0)
         DC    CL8'IGG     ',B'01001000',AL3(0)
         DC    CL8'IHL     ',B'01001000',AL3(0)
         DC    CL8'IHE     ',B'01001000',AL3(0)
         DC    CL8'IKF     ',B'01001000',AL3(0)
         DC    CL8'IKJ     ',B'01001000',AL3(0)
         DC    CL8'IQA     ',B'01001000',AL3(0)
         DC    CL8'IRB     ',B'01001000',AL3(0)
         DC    X'FF',XL7'00',B'00000000',AL3(0) END OF TABLE
         LTORG
         SPACE
CALLBAD  DS    0H
         MVC   MSGTEXT1+4(L'MSGSUB),MSGSUB MOVE IN 'SUBCOMMAND'
         MVC   MSGTEXT1+L'MSGSUB+4(8),DIRNAME MOVE IN THE NAME
         LA    R1,MSGTEXT1+L'MSGSUB+11  POINT TO LAST CHARACTER
         CLI   0(R1),C' '               TEST FOR BLANK
         BNE   *+8                      NO, IT'S GOOD
         BCT   R1,*-8                   NO, TRY NEXT
         MVC   1(L'MSGNF,R1),MSGNF      MOVE IN THE NOT FOUND MSG
         LA    R1,L'MSGNF+1(R1)         POINT TO END
         LA    R0,MSGTEXT1              POINT TO START
         SR    R1,R0                    CALC THE LENGTH
         SLL   R1,16                    GET INTO HIGH HALF
         ST    R1,MSGTEXT1              STORE THE LENGTH
         MESSAGE MSGTEXT1               ISSUE 'UNKNOWN COMMAND'
         SPACE
         LA    R1,PARMLIST              AREA FOR STACK PARM LIST
         USING IOPL,R1
         SPACE
         MVC   IOPLUPT,ADDRUPT
         MVC   IOPLECT,ADDRECT
         LA    R0,ATTNECB
         MVI   ATTNECB,0
         ST    R0,IOPLECB
         SPACE 2
         STACK PARM=PARMLIST+16,DELETE=ALL,MF=(E,(1))
         SPACE 3
         DROP  R1
         SPACE
CALLEXIT DS    0H
         SR    R15,R15                  SET RETURN CODE
         BCTR  R15,0                    SET RETURN CODE ALREADY SET
         EXIT  COMMAND
         EJECT
*
*
*        IDR SCAN SUBROUTINE
*
*
         SPACE 3
READIDR  DS    0H
         SAVE  (14,12)                  SAVE REGISTERS
         SPACE 2
         SPACE
         MVC   0(3,R13),DIRTTR
         MVI   3(R13),0
         L     R0,0(,R13)               GET STARTING TTR OF MODULE
         LA    R2,MBBCCHHR
         L     R1,INDCB+(DCBDEBAD-IHADCB)
         SPACE 3
         LR    R3,R13
         L     R15,CVT
         L     R15,CVTPCNVT(,R15)       TTR CONVERT
         BALR  R14,R15
         LR    R13,R3
         LM    14,12,12(13)
         SPACE 2
*
*        BUILD CHANNEL PGM TO READ IDR RECORDS
*
         SPACE 2
         LA    R0,IOBSEEK               ADDRESS OF SEEK FIELD
         LA    R1,CCWS
         LA    R2,IDRBUFF
         LA    R3,IOBSEEK
         XC    CCWS(LCCWS),CCWS
         ST    R0,CCWS
         ST    R1,CCWS+8
         ST    R2,CCWS+16
         ST    R3,CCWS+24
         OC    CCWS(LIDRCCWS),IDRCCWS
         SPACE 2
         MVI   IOBFLAG,X'42'
         MVI   IDRSTYP,X'00'
         SPACE
         XC    IDRBBUF,IDRBBUF          ZERO THE ADDRESS
         L     R0,IDRSTAG
         GETMAIN EC,LV=(0),A=IDRBBUF,MF=(E,PARMLIST) GET CORE
         LTR   R15,R15                  TEST FOR SOME
         BNZ   IDREXCP                  NO, IGNORE
         MVC   IDRBUF,IDRBBUF           MOVE THE ADDRESS
         SPACE
         LA    R2,IDRPTR
         USING IDRENTRY,R2
         NI    FLAGS+1,255-FIDR-F1IDR
         EJECT
IDREXCP  DS    0H
         MVI   IOECB,0
         EXCP  IOB                      START I/O
         SPACE
         WAIT  ECB=IOECB
         MVI   DCBIFLGS-IHADCB+INDCB,0
         SPACE
         CLI   IOECB,X'42'              EXTENT VIOLATION?
         BNE   IDREXCP1                 NO
         BAL   R14,NEWEXTNT             YES, ADJUST FOR NEW EXTENT
IDREXCP1 DS    0H
         SPACE
         CLI   IOECB,X'7F'              SUCCESSFUL?
         BNE   LASTIDR                  NO, MUST BE LAST IDR DATA
         SPACE
         CLI   IDRBUFF,X'40'            TEST SYM RECORD?
         BE    IDREXCP                  YES, SKIP RECORD
         SPACE
         CLI   IDRBUFF,X'20'            CESD RECORD?
         BE    IDREXCP                  NO
         SPACE
         CLI   IDRBUFF,X'80'            IDR RECORD?
         BNE   LASTIDR                  NO
         SPACE
         LA    R3,IDRBUFF+3             START OF IDR DATA
         SR    R5,R5
         IC    R5,IDRBUFF+1             BYTE COUNT THIS RECORD
         LA    R5,IDRBUFF(R5)           END OF BUFFER ADDRESS
         SPACE 2
         TM    IDRBUFF+2,X'80'          LAST RECORD OF LOAD MODULE?
         BZ    *+8                      NO
         OI    FLAGS+1,F1IDR            YES, SET STOP FLAG
         SPACE
         NI    IDRBUFF+2,X'0F'          CLEAR MISC FLAGS
         CLI   IDRBUFF+2,IDRZAP         IMASPZAP IDR RECORD?
         BE    ZAPIDR                   YES
         CLI   IDRBUFF+2,IDRLKED        LINKAGE EDITOR IDR RECORD?
         BE    LKEDIDR                  YES
         CLC   IDRSTYP,IDRBUFF+2        TEST IF SAME TYPE
         BNE   IDREXCP3                 NO, PROCESS THE DATA
IDREXCP2 L     R4,IDRBUF                LOAD THE STAGING BUFFER
         OC    IDRBBUF,IDRBBUF          TEST FOR ANY
         BZ    NEXTIDR                  NO, DON'T DO IT
         SR    R5,R5                    ZERO FOR IC
         IC    R5,IDRBUFF+1             INSERT THE LENGTH
         BCTR  R5,0                     SUBTRACT ONE
         BCTR  R5,0                     SUBTRACT ONE
         BCTR  R5,0                     SUBTRACT ONE
         MVC   0(0,R4),IDRBUFF+3        MOVE IN THE DATA
         EX    R5,*-6                   ALL OF IT
         LA    R4,1(R4,R5)              CALC THE NEW END
         ST    R4,IDRBUF                STORE IT
         MVC   IDRSTYP,IDRBUFF+2        MOVE IN THE TYPE
         TM    FLAGS+1,F1IDR            TEST IF END
         BZ    IDREXCP                  NO, GET NEXT
IDREXCP3 L     R3,IDRBBUF               LOAD THE BEGIN ADDRESS
         L     R5,IDRBUF                LOAD THE END ADDRESS
         ST    R3,IDRBUF                STORE THE NEW START
         TM    IDRSTYP,IDRZAP+IDRLKED   TEST FOR ANY
         BNZ   IDREXCP2                 NO, GO DO THIS
         BCTR  R5,0                     SUBTRACT ONE FOR BXLE
         CLI   IDRSTYP,IDRPROC          PROCCESSOR-SUPPLIED IDR RECORD?
         BE    PROCIDR                  NO, NEXT RECORD
         CLI   IDRSTYP,IDRUSER          USER-SUPPLIED IDR RECORD?
         BNE   NEXTIDR                  NO, NEXT RECORD
         EJECT
*        PROCESS USER-SUPPLIED DATA RECORDS
         SPACE
USERIDR  DS    0H
         TM    FLAG2,X'08'              TEST FOR USER
         BZ    NEXTIDR
USERIDR1 BAL   R14,GETIDR               GET A NEW IDR RECORD
         ST    R1,IDRLINK
         LR    R2,R1                    ADDRESS OF NEW RECORD
         SPACE
         MVI   IDRTYPE,IDRUSER
         MVC   IDRESDID,0(R3)           MOVE ESDID TO IDR AREA
         LA    R1,2(,R3)                YYDDD IDR RECORD CREATED
         BAL   R14,SETIDRDT
         SR    R15,R15
         IC    R15,5(,R3)               LENGTH OF USER DATA AREA
         LA    R4,6(,R15)               LENGTH OF THIS RECORD ENTRY
         MVI   IDRTYPE,IDRUSER          INDICATE USER-SUPPLIED ENTRY
         BCTR  R15,0
         STC   R15,IDRLDATA
         SPACE
         MVC   IDRDATA(0),6(R3)         MOVE USER DATA TO RECORD
         EX    R15,*-6
         SPACE 2
         BXLE  R3,R4,USERIDR1
         B     NEXTIDR
         EJECT
*        PROCESS PROCESSOR-SUPPLIED DATA RECORDS
         SPACE
PROCIDR  DS    0H
         TM    FLAG2,X'04'              TEST FOR PROC
         BZ    NEXTIDR
         LR    R6,R3                    COPY BEGIN ADDRESS
PROCIDR0 TM    0(R6),X'80'              TEST FOR LAST ONE
         LA    R6,2(R6)                 POINT TO NEXT ANYWAY
         BO    PROCIDR1                 LAST, GO TO PROCESS IT
         B     PROCIDR0                 GO TO TEST NEXT
PROCIDR1 DS    0H
         BAL   R14,GETIDR               GET A NEW IDR RECORD
         ST    R1,IDRLINK
         LR    R2,R1                    ADDRESS OF NEW RECORD
         SPACE
         MVI   IDRTYPE,IDRPROC
         MVC   IDRESDID,0(R3)           MOVE ESDID TO IDR AREA
         NI    IDRESDID,X'7F'           TURN OFF TOP BIT OF ESDID
         LA    R1,13(,R6)               YYDDD IDR RECORD CREATED
         BAL   R14,SETIDRDT
         LA    R4,16                    LENGTH OF THIS RECORD ENTRY
         SPACE
         MVI   IDRLDATA,10
         MVC   IDRDATA(10),1(R6)        MOVE USER DATA TO RECORD
         SPACE
         CLI   0(R6),0                  TEST FOR ONLY ONE
         BE    PROCIDR3                 ONLY ONE
         SPACE
         BAL   R14,GETIDR               GET A NEW IDR RECORD
         ST    R1,IDRLINK
         LR    R2,R1                    ADDRESS OF NEW RECORD
         SPACE
         MVI   IDRTYPE,IDRPROC
         MVC   IDRESDID,0(R3)           MOVE ESDID TO IDR AREA
         NI    IDRESDID,X'7F'           TURN OFF TOP BIT OF ESDID
         LA    R1,28(,R6)               YYDDD IDR RECORD CREATED
         BAL   R14,SETIDRDT
         LA    R4,31                    LENGTH OF THIS RECORD ENTRY
         SPACE
         MVI   IDRLDATA,10
         MVC   IDRDATA(10),16(R6)       MOVE USER DATA TO RECORD
         SPACE 2
PROCIDR3 DS    0H
         SPACE
         TM    0(R3),X'80'              TEST FOR LAST ONE
         LA    R3,2(R3)                 POINT TO NEXT ANYWAY
         BZ    PROCIDR1                 LAST, GO TO PROCESS IT
         SPACE
         BXLE  R3,R4,PROCIDR
         B     NEXTIDR
         EJECT
*        PROCESS IMASPZAP IDR RECORDS
         SPACE
ZAPIDR   DS    0H
         TM    FLAG2,X'01'              TEST FOR ZAP
         BZ    NEXTIDR
         SR    R6,R6
         NI    0(R3),X'3F'
         IC    R6,0(R3)                 GET COUNT OF IMASPZAP ENTRIES
         LA    R3,1(R3)
         LA    R6,1(R6)                 JUMP COUNT FOR LOOP
         B     ZAPIDR1
         SPACE 2
ZAPIDR2  DS    0H
         BAL   R14,GETIDR
         ST    R1,IDRLINK
         LR    R2,R1
         SPACE
         MVC   IDRESDID,0(R3)           MOVE ESDID TO IDR RECORD
         SPACE
         LA    R1,2(,R3)                ADDRESS OF DATE OF RECORD
         BAL   R14,SETIDRDT
         SPACE
         MVC   IDRDATA,5(R3)            MOVE DATA TO IDR RECORD
         MVI   IDRLDATA,8               SET LENGTH FOR COMPATIBILITY
         MVI   IDRTYPE,IDRZAP           INDICATE IMASPZAP ENTRY
         SPACE
         LA    R3,13(,R3)               JUMP DATA ADDRESS
         SPACE
ZAPIDR1  DS    0H
         BCT   R6,ZAPIDR2               IF ANOTHER ENTRY THIS RECORD
         B     NEXTIDR                  READ NEXT IDR RECORD
         EJECT
*        LINKAGE EDITOR IDR RECORD PROCESSOR
         SPACE
LKEDIDR  DS    0H
         OI    FLAGS+1,FIDR
         LA    R1,12(,R3)               ADDRESS OF DATE
         LA    R15,LKEDDATE
         BAL   R14,SETLKDTE
         SPACE 2
NEXTIDR  DS    0H
         TM    FLAGS+1,F1IDR            LAST IDR RECORD?
         BO    LASTIDR                  NO
         MVC   IDRSTYP,IDRBUFF+2
         TM    IDRSTYP,IDRPROC+IDRUSER  TEST FOR PROCESSOR
         BZ    IDREXCP                  NO
         L     R3,IDRBBUF               LOAD BEGIN ADDRESS
         ST    R3,IDRBUF                STORE THE ADDRESS
         B     IDREXCP2
IDRSTAG  DC    A(8*1024)                8K STAGING AREA
         EJECT
LASTIDR  DS    0H
         SPACE
         L     R0,IDRSTAG
         L     R1,IDRBBUF
         FREEMAIN R,LV=(0),A=(1)        FREE CORE
         XC    IDRBBUF,IDRBBUF          ZERO THE ADDRESS
         XC    IDRBUF,IDRBUF            ZERO THE ADDRESS
         SPACE
         LA    R2,IDRPTR
         SPACE
SORTIDR  DS    0H
         L     R2,IDRLINK
         LTR   R2,R2
         BZ    SORTIDR1
         SPACE
         L     R1,IDRLINK
         SPACE
SORTIDR2 DS    0H
         LTR   R1,R1
         BZ    SORTIDR
         SPACE
         LH    R3,IDRESDID
         LH    R4,IDRESDID-IDRENTRY(R1)
         BCTR  R3,0                     SUB ONE FOR REL #
         SLL   R3,4                     CALC THE OFFSET
         A     R3,ESDPTR                GET THE POINTER
         BCTR  R4,0                     SUB ONE FOR REL #
         SLL   R4,4                     CALC THE OFFSET
         A     R4,ESDPTR                GET THE POINTER
         CLC   ESDNAME-ESDENTRY(8,R3),ESDNAME-ESDENTRY(R4)
         BL    SORTIDR3
         BH    SWAPIDR
         SPACE
         CLC   IDRDATE,IDRDATE-IDRENTRY(R1)
         BNL   SORTIDR3
         SPACE
SWAPIDR  XC    IDRSTART(LENIDR1),IDRSTART-IDRENTRY(R1)
         XC    IDRSTART-IDRENTRY(LENIDR1,R1),IDRSTART
         XC    IDRSTART(LENIDR1),IDRSTART-IDRENTRY(R1)
SORTIDR3 DS    0H
         L     R1,IDRLINK-IDRENTRY(R1)
         B     SORTIDR2
SORTIDR1 DS    0H
         LM    14,12,12(13)
         TM    FLAGS+1,FIDR             ANY IDR RECORDS?
         BCR   8,R14                    NO
         B     4(,R14)                  YES
         EJECT
SETIDRDT DS    0H
         LA    R15,IDRDATE
         SPACE
SETLKDTE DS    0H
         ST    R14,R14SAVE
         MVC   DAYTABLE,DAYMONTH
STOPHERE DS    0H
         MVO   DOUBLE,0(,R1)
         OI    DOUBLE+7,X'0F'
         LR    R14,R1
         CVB   R1,DOUBLE                GET YEAR IN BINARY
         SR    R0,R0
         D     R0,FOUR
         LTR   R0,R0                    THIS A LEAP YEAR?
         BNZ   *+8                      NO
         MVI   DAYTABLE+1,29            YES, FEB HAS 29 DAYS
         SPACE
         MVC   2(1,R15),0(R14)          YEAR RECORD CREATED
         MVC   DOUBLE+6(2),1(R14)
         CVB   R1,DOUBLE                GET RELATIVE DAYS IN BINARY
         SPACE
         LA    R14,DAYTABLE
         SR    R0,R0
DAYLOOP  DS    0H
         IC    R0,0(,R14)               DAYS THIS MONTH
         SR    R1,R0                    WITHIN THIS MONTH?
         BNP   DAYNOW
         LA    R14,1(R14)
         B     DAYLOOP
DAYNOW   DS    0H
         AR    R1,R0                    GET DAY OF THE MONTH
         LA    R0,10
         MR    R0,R0
         CVD   R1,DOUBLE
         MVC   1(1,R15),DOUBLE+6
         LA    R1,DAYTABLE-1
         SR    R14,R1
         LA    R1,10
         MR    R0,R14
         CVD   R1,DOUBLE
         MVC   0(1,R15),DOUBLE+6
         SPACE
         L     R14,R14SAVE
         BR    R14
         EJECT
*
*
*        CESD SCAN SUBROUTINE
*
*
         SPACE 3
READCESD DS    0H
         ST    R14,R14LINK
         SPACE
         TM    DIRATTR+1,ATTRNE         DOES MODULE HAVE ESD ENTRIES?
         MVC   MSGTEXT1,MSGNOESD
         BCR   1,R14                    NO, EXIT W/ ERROR
         STM   14,12,12(13)             SAVE REGISTERS
         SPACE 2
         MVC   0(3,R13),DIRTTR
         MVI   3(R13),0
         L     R0,0(,R13)               GET STARTING TTR OF MODULE
         LA    R2,MBBCCHHR
         L     R1,INDCB+(DCBDEBAD-IHADCB)
         SPACE 3
         LR    R3,R13
         L     R15,CVT
         L     R15,CVTPCNVT(,R15)       TTR CONVERT
         BALR  R14,R15
         LR    R13,R3
         LM    14,12,12(13)
         SPACE 2
*
*        BUILD CHANNEL PGM TO READ CESD RECORDS
*
         SPACE 2
         LA    R0,IOBSEEK               ADDRESS OF SEEK FIELD
         LA    R1,CCWS
         LA    R2,ESDBUFF
         LA    R3,IOBSEEK
         XC    CCWS(LCCWS),CCWS
         ST    R0,CCWS
         ST    R1,CCWS+8
         ST    R2,CCWS+16
         ST    R3,CCWS+24
         OC    CCWS(LESDCCWS),ESDCCWS
         SPACE 2
         MVI   IOBFLAG,X'42'
         SPACE
         TM    FLAGS+1,FALLESD          TEST IF ALL NEEDED
         BZ    ESDEXCP                  NO, DON'T GET CORE FOR IT
         SPACE
         BAL   R14,GETESD               GET CORE FOR THE CESD
         B     ESDLAST                  NO CORE, BAD!
         EJECT
ESDEXCP  DS    0H
         MVI   IOECB,0
         EXCP  IOB                      START I/O
         SPACE
         WAIT  ECB=IOECB
         MVI   DCBIFLGS-IHADCB+INDCB,0
         SPACE
         CLI   IOECB,X'42'              EXTENT VIOLATION?
         BNE   ESDEXCP1                 NO
         BAL   R14,NEWEXTNT             YES, ADJUST FOR NEW EXTENT
ESDEXCP1 DS    0H
         SPACE
         CLI   IOECB,X'7F'              SUCESSFUL?
         BNE   ESDLAST                  NO, MUST BE LAST ESD DATA
         SPACE
         CLI   ESDBUFF,X'40'            TEST SYM RECORD?
         BE    ESDEXCP                  YES, SKIP RECORD
         SPACE
         CLI   ESDBUFF,X'20'            CESD RECORD?
         BNE   ESDLAST                  NO
         SPACE
         LH    R6,ESDBUFF+4             RELATIVE # OF 1ST ESD ID
         LA    R3,ESDBUFF+8             START OF ESD DATA
         LH    R5,ESDBUFF+6             LENGTH OF DATA IN BUFFER
         AR    R5,R3
         LA    R4,16                    LENGTH OF ONE ENTRY
         SR    R5,R4
         SPACE 2
ESDSCAN  DS    0H
         USING ESDNAME,R3
         IC    R0,ESDTYPE
         LA    R1,CODESEG               CHECK FOR SEGTAB/ENTAB
         NI    ESDTYPE,X'0F'
         NR    R0,R1
         TM    FLAGS+1,FALLESD          SEARCH REQUEST?
         BZ    ESDMATCH                 YES, SCAN ESD ENTRIES
         CR    R0,R1                    THIS SEGTAB/ENTAB ENTRY?
         BE    ESDUSE1                  YES
         SPACE
         CLI   ESDTYPE,CODESD           SD ENTRY?
         BE    ESDUSE                   YES
         SPACE
         CLI   ESDTYPE,CODELR           LR ENTRY?
         BE    ESDUSE
         SPACE
         CLI   ESDTYPE,CODEPC           PRIVATE ENTRY?
         BE    ESDUSEPC                 YES
         SPACE 2
NEXTESD  DS    0H
         LA    R6,1(,R6)
         BXLE  R3,R4,ESDSCAN
         SPACE
         TM    FLAGS+1,FALLESD          TEST FOR ALL
         BZ    ESDEXCP                  NO, DON'T TRY TO MOVE
         SPACE
         LH    R6,ESDBUFF+4             RELATIVE # OF 1ST ESD ID
         LH    R5,ESDBUFF+6             LENGTH OF DATA IN BUFFER
         LA    R3,ESDBUFF+8             START OF ESD DATA
         BCTR  R6,0                     SUB ONE FROM THE #
         BCTR  R5,0                     SUB ONE FROM THE LENGTH
         SLL   R6,4                     CALC THE OFFSET
         SPACE
         LA    R1,1(R5,R6)              CALC THE NEW OFFSET
         ST    R1,ESDMAXL               STORE THE NEW MAX
         A     R6,ESDPTR                CALC THE ADDRESS
         MVC   0(0,R6),0(R3)            MOVE THE DATA
         EX    R5,*-6                   MOVE THE DATA
         SPACE 2
         B     ESDEXCP                  GET NEXT ESD RECORD
         SPACE 3
ESDUSEPC DS    0H
         MVC   ESDNAME,$PRIVATE         IDENTIFY PRIVATE ENTRY
         B     ESDUSE
         SPACE
ESDUSE1  DS    0H
         STC   R0,ESDTYPE                RESTORE SEGTAB/ENTAB TYPE
ESDUSE   DS    0H
         B     NEXTESD
         SPACE
         DROP  R3
         SPACE
ESDLAST  DS    0H
         OC    ESDPTR,ESDPTR
         MVC   MSGTEXT1,MSGNOESD
         L     R14,R14LINK
         BZ    ESDEXIT                  EXIT - NO ESD DATA AVAILABLE
         SPACE 2
         TM    FLAGS+2,FSORTESD         TEST FOR SORTED ESD
         BZ    ESDOUT                   NO
         TM    DIRATTR,ATTRSCTR         TEST FOR SCTR
         BZ    ESDSORT
         SPACE
         STM   14,12,12(13)             SAVE REGISTERS
         SPACE 2
         MVC   0(3,R13),DIRNOTE
         MVI   3(R13),0
         L     R0,0(,R13)               GET STARTING TTR OF MODULE
         LA    R2,MBBCCHHR
         L     R1,INDCB+(DCBDEBAD-IHADCB)
         SPACE 3
         LR    R3,R13
         L     R15,CVT
         L     R15,CVTPCNVT(,R15)       TTR CONVERT
         BALR  R14,R15
         LR    R13,R3
         LM    14,12,12(13)
         LA    R0,IOBSEEK               ADDRESS OF SEEK FIELD
         LA    R1,CCWS
         SR    R2,R2
         LA    R3,IOBSEEK
         XC    CCWS(LCCWS),CCWS
         ST    R0,CCWS
         ST    R1,CCWS+8
         ST    R3,CCWS+24
         OC    CCWS(LESDCCWS),SCTRCCWS
         SPACE 2
         MVI   IOBFLAG,X'42'
         MVC   DOUBLE(2),DIRTRANL       COPY LENGTH OF TRANLIST
         LH    R3,DOUBLE                LOAD LENGTH OF TRANLIST
         MVC   DOUBLE(2),DIRSCTRL       COPY LENGTH OF SCTR LIST
         LH    R2,DOUBLE                LOAD LENGTH OF SCTR LIST
         LA    R0,4(R2,R2)              DOUBLE THE LENGTH
         AR    R0,R2                    MAKE IT TRIPLE
         AR    R0,R2                    MAKE IT QUAD
         AR    R0,R3                    ADD IN THE REST
         ST    R0,SCTRLENG              SAVE THE LENGTH
         GETMAIN EC,LV=(0),A=SCTRPTR,MF=(E,PARMLIST),SP=0
         LR    R5,R3                    COPY THE LENGTH
         AR    R5,R2                    ADD IN THE OTHER
         LR    R0,R5                    COPY THE OFFSET
         A     R0,SCTRPTR               ADD THE BASE ADDRESS
         O     R0,CCWS+16               OR IN THE COMMAND CODE
         ST    R0,CCWS+16               STORE IT BACK
         SR    R4,R4                    ZERO FOR DIVIDE
         LA    R6,1020                  LOAD MAX NUMBER OF BYTES
         DR    R4,R6                    CALC THE NUMBER OF BLOCKS
         LTR   R5,R5                    TEST FOR ANY FULL ONES
         BNZ   SCTRNXT                  YES, PROCESS THEM
SCTRNXT1 LA    R5,1                     LOAD NUMBER OF 1
         LR    R6,R4                    LOAD RECORD LENGTH
         SR    R4,R4                    ZERO THE REMAINDER
SCTRNXT  DS    0H
         LA    R0,4(R6)                 CALC THE LENGTH
         STH   R0,CCWS+22               STORE THE LENGTH
         L     R1,CCWS+16               LOAD THE COM CODE
         SLR   R1,R6                    CALC THE ADDRESS
         ST    R1,CCWS+16               STORE THE ADDRESS
         EXCP  IOB                      START I/O
         SPACE
         WAIT  ECB=IOECB
         MVI   DCBIFLGS-IHADCB+INDCB,0
         SPACE
         CLI   IOECB,X'42'              EXTENT VIOLATION?
         BNE   SCTRNXT2                 NO
         BAL   R14,NEWEXTNT             YES, ADJUST FOR NEW EXTENT
SCTRNXT2 DS    0H
         SPACE
         CLI   IOECB,X'7F'              SUCESSFUL?
         BNE   SCTRLAST                 NO, MUST BE LAST ESD DATA
         SPACE
         BCT   R5,SCTRNXT               TEST FOR MORE SCTR
         LTR   R4,R4                    TEST FOR ONE LAST
         BNZ   SCTRNXT1                 YES, GO DO IT
         L     R5,SCTRPTR               LOAD THE ADDRESS
         LA    R5,4(R5,R3)              ADD THE OFFSET
         ST    R5,SCTRSCTT              STORE ADDRESS OF THE SCT TABLE
         LR    R6,R5                    COPY THE ADDRESS
         AR    R5,R2                    ADD THE OFFSET
         ST    R5,SCTRLENT              STORE ADDRESS OF THE REL TABLE
         AR    R5,R2                    ADD THE OFFSET
         ST    R5,SCTRADRT              STORE ADDRESS OF THE ADR TABLE
         AR    R5,R2                    ADD THE OFFSET
         ST    R5,SCTRRELT              STORE ADDRESS OF THE REL TABLE
         L     R5,SCTRLENT              LOAD ADDRESS OF THE SCT TABLE
         LR    R4,R2                    COPY THE SCTR LENGTH
         SRL   R4,2                     GET NUMBER OF ADDRESSES
         BCTR  R4,0                     GET NUMBER OF ADDRESSES
         SR    R1,R1                    ZERO THE OFFSET
SCTRNXT3 LA    R1,4(R1)                 POINT TO NEXT ENTRY
         L     R0,4(R6,R1)              LOAD THE ADDRESS
         S     R0,0(R6,R1)              CALC THE LENGTH
         ST    R0,0(R5,R1)              STORE INTO THE LENGTH TABLE
         BCT   R4,SCTRNXT3              GO TO TRY NEXT
         MVC   DOUBLE+1(3),DIRCORE      MOVE IN SIZE OF MODULE
         MVI   DOUBLE,0                 ZERO TOP BYTE
         L     R0,DOUBLE                LOAD LENGTH
         LA    R15,7                    LOAD ROUND FACTOR
         AR    R0,R15                   ADD ROUNDING
         OR    R0,R15                   OR IT
         XR    R0,R15                   TURN OFF BOTTOM BITS
         S     R0,0(R6,R1)
         ST    R0,0(R5,R1)              STORE THE LENGTH
         L     R5,SCTRADRT              LOAD ADR OF THE LEN TABLE
         LR    R4,R2                    COPY THE LENGTH
         SRL   R4,2                     CALC THE NUMBER
         BCTR  R4,0                     SUBTRACT ONE FOR SKIPPED ENTRY
         SR    R1,R1                    LOAD INITIAL OFFSET
         SR    R0,R0                    ZERO THE ADDRESS REG
         BCTR  R0,0                     MAKE IT NEGATIVE
SCTRNXT4 LA    R1,4(R1)                 POINT TO NEXT ENTRY
         ST    R0,0(R5,R1)              STORE THE ADDRESS
         BCT   R4,SCTRNXT4              GO TO TRY NEXT
         L     R5,SCTRPTR               LOAD ADR OF THE TRAN TABLE
         SR    R0,R0                    ZERO THE ADDRESS REG
         LH    R6,6(R5)                 LOAD THE PTR
         SLL   R6,2                     CALC THE OFFSET
         L     R15,SCTRADRT             LOAD ADDRESS OF THE ADR TABLE
         ST    R0,0(R6,R15)             STORE THE ADDRESS
         LA    R5,4(R5)                 LOAD ADR OF THE TRAN TABLE
         LR    R4,R3                    COPY THE LENGTH
         SRL   R4,1                     CALC THE NUMBER
         BCTR  R4,0                     SUBTRACT ONE
         BCTR  R4,0                     SUBTRACT ONE FOR SKIPPED ENTRY
         LA    R1,2                     LOAD INITIAL OFFSET
SCTRNXT5 LA    R1,2(R1)                 POINT TO NEXT ENTRY
         LH    R6,0(R1,R5)              LOAD THE PTR
         SLL   R6,2                     CALC THE OFFSET
         L     R15,SCTRADRT             LOAD ADDRESS OF THE ADR TABLE
         LA    R15,0(R15,R6)            CALC THE ADDRESS
         TM    0(R15),X'80'             TEST FOR INITIALIZED
         BZ    SCTRNXT6                 YES, IGNORE
         ST    R0,0(R15)                STORE THE ADDRESS
         L     R15,SCTRLENT             LOAD ADDRESS OF THE LEN TABLE
         A     R0,0(R6,R15)             ADD THE LENGTH
SCTRNXT6 BCT   R4,SCTRNXT5              GO TO TRY NEXT
         L     R15,SCTRADRT             LOAD ADDRESS OF THE ADR TABLE
         L     R6,SCTRPTR               POINT TO NEXT ENTRY
         LH    R6,6(R6)                 LOAD THE PTR
         SLL   R6,2                     CALC THE OFFSET
         ST    R0,0(R6,R15)             STORE THE ADDRESS
         L     R6,SCTRADRT              LOAD ADR OF THE ADR TABLE
         L     R5,SCTRRELT              LOAD ADR OF THE REL TABLE
         L     R15,SCTRSCTT             LOAD ADR OF THE SCT TABLE
         LR    R4,R2                    COPY THE LENGTH
         SRL   R4,2                     CALC THE NUMBER
         BCTR  R4,0                     SUBTRACT ONE FOR SKIPPED ENTRY
         SR    R1,R1                    LOAD INITIAL OFFSET
SCTRNXT7 LA    R1,4(R1)                 POINT TO NEXT ENTRY
         L     R0,0(R6,R1)              LOAD THE ADDRESS
         S     R0,0(R15,R1)             CALC THE REL FACTOR
         ST    R0,0(R5,R1)              STORE THE REL FACTOR
         BCT   R4,SCTRNXT7              GO TO TRY NEXT
         L     R5,ESDPTR                POINT TO THE ESD
         L     R4,ESDMAXL               GET THE LENGTH
         SRL   R4,4                     GET THE NUMBER
         LA    R1,1                     SET FIRST ESDID
         L     R6,SCTRPTR               POINT TO TRAN TABLE
         LA    R6,4(R6)                 POINT TO REAL ONE
SCTRNXT8 LR    R15,R1                   COPY THE ESDID
         AR    R15,R15                  DOUBLE IT
         LH    R15,0(R6,R15)            GET THE NUMBER
         LTR   R15,R15                  IS THERE ONE
         BZ    SCTRNXT9                 NO
         SLL   R15,2                    QUAD IT
         A     R15,SCTRRELT             GET THE ADDRESS OF IT
         USING ESDNAME,R5               SET-UP USING
         L     R0,ESDADDR-1             LOAD THE ADDRESS
         AL    R0,0(R15)                ADD THE RELO FACTOR
         ST    R0,ESDADDR-1
SCTRNXT9 LA    R1,1(,R1)                BUMP THE ESDID
         LA    R5,ESDNXT                AND THE ESDENTRY
         BCT   R4,SCTRNXT8              TRY THE NEXT
*
         DROP R5
*                                       ALL DONE WITH RELOCATION
SCTRLAST DS    0H
         L     R1,SCTRPTR               LOAD THE ADDRESS
         LTR   R1,R1                    TEST FOR ANY
         BZ    ESDSORT                  NO
         L     R0,SCTRLENG              LOAD THE LENGTH
         FREEMAIN R,LV=(0),A=(1)        FREE THE AREA
         SPACE
ESDSORT  DS    0H
         L     R2,ESDPTR
         LTR   R2,R2                    TEST FOR ANY
         BZ    ESDOUT                   NO, END
         L     R0,ESDMAXL               LOAD THE LENGTH
         A     R0,ESDPTR                CALC THE END
*
         USING ESDNAME,R2
*
ESDSORT0 CLI   ESDTYPE,CODENULL         TEST FOR EMPTY ENTRY
         BE    ESDSORT2                 YES, TRY NEXT
         LA    R1,ESDNXT                POINT TO NEXT ENTRY
ESDSORT1 CR    R1,R0                    TEST FOR TOO LARGE
         BNL   ESDSORT2                 LAST ESD ENTRY
         SPACE
         CLI   ESDTYPE-ESDENTRY(R1),CODENULL TEST FOR NULL ENTRY
         BE    ESDSORT3
         SPACE
         CLC   ESDSEG#,ESDSEG#-ESDENTRY(R1) CHECK ENTRY SEGMENT #S
         BL    ESDSORT3
         BH    ESDSWAP
         SPACE
         CLC   ESDADDR,ESDADDR-ESDENTRY(R1)
         BL    ESDSORT3
         BH    ESDSWAP
         SPACE
         CLC   ESDTYPE,ESDTYPE-ESDENTRY(R1)
         BL    ESDSORT3
         BH    ESDSWAP
         SPACE
         CLC   ESDNAME,ESDNAME-ESDENTRY(R1)
         BNH   ESDSORT3
         SPACE
ESDSWAP  DS    0H
         XC    ESDNAME(LENESD2),ESDNAME-ESDENTRY(R1)
         XC    ESDNAME-ESDENTRY(LENESD2,R1),ESDNAME
         XC    ESDNAME(LENESD2),ESDNAME-ESDENTRY(R1)
         SPACE
ESDSORT3 DS    0H
         LA    R1,ESDNXT-ESDENTRY(,R1)
         B     ESDSORT1
         SPACE 3
ESDSORT2 DS    0H
         LA    R2,ESDNXT                POINT TO NEXT ENTRY
         CR    R2,R0                    TEST FOR END
         BL    ESDSORT0                 NO, DO NEXT
ESDOUT   DS    0H
         L     R1,ESDPTR                LOAD THE ADDRESS
         LTR   R1,R1                    TEST FOR ANY
         BZ    ESDOUT1                  NO, IGNORE
         A     R1,ESDMAXL               POINT TO THE UNUSED PART
         L     R0,ESDLENG               LOAD THE LENGTH
         MVC   ESDLENG,ESDMAXL          MOVE THE NEW LENGTH
         S     R0,ESDLENG               CALC THE AMOUNT
         BNP   ESDOUT1                  ZERO OR MINUS, IGNORE
         FREEMAIN R,LV=(0),A=(1)        FREE THE CORE
ESDOUT1  OC    ESDLENG,ESDLENG          TEST FOR ANY
         BNZ   ESDOUT2                  YES, DON'T ZERO
         XC    ESDPTR,ESDPTR            ZERO THE POINTER
ESDOUT2  L     R14,R14LINK
         LA    R14,4(,R14)              ADJUST EXIT ADDRESS
         NI    FLAGS+1,255-FALLESD
         NI    FLAGS+2,255-FSORTESD
         SPACE 2
ESDEXIT  DS    0H
         LM    15,12,16(13)             RESTORE REGISTERS
         BR    R14                      EXIT
         DROP  R2
         SPACE 3
ESDMATCH DS    0H
         USING ESDNAME,R3
         CLI   ESDTYPE,CODESD           VALID EXTERNAL SYMBOL?
         BE    ESDCHECK                 YES
         CLI   ESDTYPE,CODELR           ANOTHER VALID ENTRY
         BNE   NEXTESD                  NO VALID, CONTINUE
         SPACE
ESDCHECK DS    0H
         CLC   ESDNAME,DIRNAME          REQUESTED NAME?
         BNE   NEXTESD                  NO
         SPACE
         CLI   ESDSEG#,1                IS SYMBOL IN ROOT SEGMENT?
         BNE   NEXTESD                  NO, CONTINUE
         SPACE
         L     R1,ESDADDR-1             GET SYMBOL OFFSET
         LA    R1,0(,R1)
         ST    R1,24(,13)               RETURN OFFSET IN REG 1
         ST    R6,20(,13)               RETURN ESDID IN REG 0
         B     ESDOUT
         EJECT
*
*
*        ESD TABLE SUBROUTINES
*
*
         SPACE 2
GETESD   DS    0H
         ST    R14,R14SAVE              SAVE RETURN ADDRESS
         L     R0,ESDSTOR               GET THE AMOUNT I NEED
         ST    R0,ESDLENG               STORE THE LENGTH
         GETMAIN EC,LV=(0),A=ESDPTR,MF=(E,PARMLIST),SP=0
         L     R14,R14SAVE              LOAD RETURN ADDRESS
         LTR   R15,R15                  TEST FOR GOOD GETMAIN
         BZ    4(,R14)                  YES, RETURN
         BR    R14                      BAD RETURN
ESDSTOR  DC    A(24*1024)
         SPACE 5
FREEESD  DS    0H
         ST    R14,R14SAVE
         L     R1,ESDPTR
         SPACE
         LTR   R1,R1
         BZ    FREEESD2
         L     R0,ESDLENG
         SPACE
         FREEMAIN R,LV=(0),A=(1)
         SPACE 2
FREEESD2 DS    0H
         XC    ESDPTR,ESDPTR
         L     R14,R14SAVE
         BR    R14
         EJECT
*
*
*        IDR TABLE SUBROUTINES
*
*
         SPACE 2
GETIDR   DS    0H
         OI    FLAGS+1,FIDR             IDR DATA USED
         GETMAIN R,LV=LENIDR
         XC    0(LENIDR,R1),0(R1)
         BR    R14
         SPACE 5
FREEIDR  DS    0H
         ST    R14,R14SAVE
         SPACE
         L     R14,IDRPTR
         SPACE
FREEIDR1 DS    0H
         LTR   R1,R14
         BZ    FREEIDR2
         L     R14,IDRLINK-IDRENTRY(,R14)
         SPACE
         FREEMAIN R,LV=LENIDR,A=(1)
         B     FREEIDR1
         SPACE 2
FREEIDR2 DS    0H
         XC    IDRPTR,IDRPTR
         L     R14,R14SAVE
         BR    R14
         EJECT
*
*        CHANGE SUBCOMMAND SPECIAL ENTRY
*
         SPACE 2
CHANGE   DS    0H
         OI    FLAGS,FRESTART           INDICATE RESTART
         NI    FLAGS+2,255-FMODE        INDICATE MODE MESSAGE NEEDED
         SPACE 2
*
*        END SUBCOMMAND SPECIAL ENTRY
*
         SPACE 2
END      DS    0H
         L     R1,BUFFADDR              BUFFER ADDRESS
         LTR   R1,R1                    BUFFER PRESENT?
         BZ    FREENONE                 NO
         XC    BUFFADDR,BUFFADDR        CLEAR BUFFER ADDRESS
         LH    R0,DCBBLKSI-IHADCB+INDCB
         FREEMAIN R,LV=(0),A=(1)
         SPACE
FREENONE DS    0H
         MVI   PARMLIST,0
         MVI   PARMLIST+4,X'80'
         CLOSE (INDCB,,STOWDCB),MF=(E,PARMLIST)
         SPACE 2
         MVC   DDNAME1,DCBDDNAM-IHADCB+INDCB DDNAME TO DE-ALLOCATE
         BAL   R14,DEALLOC              FREE THE DATA SET
         SPACE
         TM    FLAGS,FRESTART           RESTART REQUEST?
         BO    RESTART                  YES
         SPACE 2
         B     EXIT0
         EJECT
*
*
*        INPUT BUFFER RELEASE SUBROUTINE
*
*
         SPACE 2
FREEBUFF DS    0H
         TM    FLAGS,FCMD               BUFFER IN USE?
         BCR   1,R14                    YES, LEAVE IT
         STM   R14,R1,12(R13)
         L     R1,ADDRCBUF
         LTR   R1,R1
         BZ    NOBUFF                   NONE EXISTS
         SPACE
         LH    R0,0(,R1)
         LA    R15,1          SUBPOOL IS 1
         SLL   R15,24
         OR    R0,R15
         SPACE
         FREEMAIN R,LV=(0),A=(1)
         SPACE
NOBUFF   DS    0H
         LM    R14,R1,12(R13)
         XC    ADDRCBUF,ADDRCBUF
         BR    R14
         SPACE 3
*
*
*        DATA SET END-OF-EXTENT PSUEDO APPENDAGE
*
*
         SPACE 2
NEWEXTNT DS    0H
         SR    R0,R0
         SR    R15,R15
         L     R1,DCBDEBAD-IHADCB+INDCB
         IC    R15,MBBCCHHR             CURRENT EXTENT #
         IC    R0,DEBXTNT#(R1)          # EXTENTS IN DATA SET
         LA    R15,1(,R15)              ONE MORE DONE
         CR    R15,R0                   CHECK FOR END OF DATA SET
         BCR   2,R14                    YES, EXIT
         STC   R15,MBBCCHHR             NO, SAVE NEW EXTENT COUNT
         MVI   IOBSEEK+4,X'01'
         SLL   R15,4                    COMPUTE EXTENT OFFSET
         AR    R1,R15                   IN DEB
         MVC   IOBSEEK(4),DEBEXTNT+6(R1)
         MVI   IOECB,X'7F'
         BR    R14
         EJECT
*
*
*        DIRECTORY READ SUBROUTINE
*
*
         SPACE 2
READDIR  DS    0H
         ST    R14,R14SAVE
         SPACE
         TM    FLAGS+1,F1STREAD         IS THIS FIRST TIME?
         BZ    DEBLOCK                  NO
         SPACE
         NI    FLAGS+2,255-FDIREND      END OF DIRECTORY TO COME
         SR    R0,R0                    CLEAR DIRECTORY TOTALS
         STH   R0,TOTUSED
         STH   R0,TOTBLOCK
         STH   R0,TOTMEMR               TOTAL REAL MEMBERS
         STH   R0,TOTMEMA               TOTAL ALIASES
         SPACE
*
*        INITIALIZE DIRECTORY READ SUBROUTINE
*
         SPACE
         LA    R0,X'100'                TTR OF FIRST BLOCK
         L     R1,DCBDEBAD-IHADCB+INDCB
         STM   14,12,12(R13)            SAVE REGISTERS
         LA    R2,MBBCCHHR
         SPACE
         L     R15,CVT
         L     R15,CVTPCNVT(,R15)       TTR TO CCHHR CONVERT ROUTINE
         LR    R3,R13
         BALR  R14,R15                  CONVERT TTR
         LR    R13,R3
         LM    14,12,12(R13)            RESTORE REGISTERS
         SPACE 2
         MVI   IOBFLAG,X'42'
         XC    CCWS(LCCWS),CCWS
         TM    FLAGS+2,FDIRSCAN         DIRSCAN?
         BO    READDIR0                 YES, START OUT THAT WAY
         SPACE
         LA    R14,IOBSEEK
         ST    R14,CCWS
         LA    R14,CCWS
         ST    R14,CCWS+8
         LA    R14,MEMBER1
         ST    R14,CCWS+16
         LA    R14,CCWS+16
         ST    R14,CCWS+24
         LA    R14,DIRBLOCK
         ST    R14,CCWS+32
         LA    R14,IOBSEEK
         ST    R14,CCWS+40
         SPACE
         OC    CCWS(LDIR1CCW),DIR1CCW   MERGE IN REAL CCWS
         B     READDIR1                 GO TO COMMON
READDIR0 LA    R14,IOBSEEK              CREATE CHANNEL PGM TO READ
         LA    R15,CCWS                 DIRECTORY BLOCKS
         LA    R0,IOBSEEK
         LA    R1,DIRBLOCK
         SPACE
         ST    R14,CCWS                 ADDR FOR SEARCH CCW
         ST    R15,CCWS+8               ADDR FOR TIC CCW
         ST    R1,CCWS+16               ADDR FOR READ DATA
         ST    R0,CCWS+24               ADDR FOR READ COUNT CCW
         SPACE
         OC    CCWS(LDIRCCWS),DIRCCWS   MERGE IN REAL CCWS
         SPACE 3
READDIR1 DS    0H
         MVI   IOECB,0
         EXCP  IOB
         SPACE
         WAIT  ECB=IOECB
         MVI   DCBIFLGS-IHADCB+INDCB,0 CLEAR STATUS FLAGS
         SPACE
         CLI   IOECB,X'42'              EXTENT VIOLATION?
         BNE   *+8                      NO
         BAL   R14,NEWEXTNT             YES, ADJUST FOR NEW EXTENT
         SPACE
         CLI   IOECB,X'7F'              SUCESSFUL COMPLETION?
         BE    READDIR2                 YES, DELOCK DIRECTORY
         SR    R15,R15
         TM    IOBCSW+3,X'01'           END OF FILE?
         BO    READDIR4                 YES, EXIT AT END OF DIRECTORY
         SPACE
         B     READDIR5                 EXIT AS IF LAST MEMBER
         SPACE 3
READDIR2 DS    0H
         TM    FLAGS+1,F1STREAD         TEST FOR FIRST READ
         BZ    READDIRB                 NO, DON'T RESET
         XC    CCWS(LCCWS),CCWS
         LA    R14,IOBSEEK              CREATE CHANNEL PGM TO READ
         LA    R15,CCWS                 DIRECTORY BLOCKS
         LA    R0,IOBSEEK
         LA    R1,DIRBLOCK
         SPACE
         ST    R14,CCWS                 ADDR FOR SEARCH CCW
         ST    R15,CCWS+8               ADDR FOR TIC CCW
         ST    R1,CCWS+16               ADDR FOR READ DATA
         ST    R0,CCWS+24               ADDR FOR READ COUNT CCW
         OC    CCWS(LDIRCCWS),DIRCCWS   MERGE IN REAL CCWS
         XI    FLAGS+1,F1STREAD
         SPACE
READDIRB LH    R14,TOTBLOCK             JUMP TOTAL DIRECTORY
         LA    R14,1(,R14)              BLOCK COUNTER
         STH   R14,TOTBLOCK
         SPACE
         TM    FLAGS+2,FDIRSCAN+FDIREND END OF DIRECTORY?
         BO    READDIR1
         SPACE
         LA    R15,DIRBLOCK
         LA    R0,2
         LH    R1,DIRBLOCK
         LA    R1,DIRBLOCK-1(R1)
         STM   R15,R1,DIRPTRS
         SPACE
         LH    R14,TOTUSED
         LA    R14,1(,R14)
         STH   R14,TOTUSED              COUNT USED BLOCK
         SPACE 2
DEBLOCK  DS    0H
         LM    R15,R1,DIRPTRS
         BXH   R15,R0,READDIR1
         STM   R15,R1,DIRPTRS
         SPACE
         CLC   FF(8),0(R15)             LAST MEMBER?
         BE    READDIR3                 YES
         SPACE
         LA    R14,X'1F'
         IC    R0,11(,R15)
         NR    R14,R0
         LA    R14,11(R14,R14)
         LA    R0,1(,R14)
         STM   R15,R1,DIRPTRS           SAVE RESTART POINTERS
         SPACE
         MVC   DIRNAME(0),0(R15)        COPY ENTRY TO WORK AREA
         EX    R14,*-6                  ALL OF IT
         SPACE 2
         TM    11(R15),X'80'            ENTRY AN ALIAS?
         LA    R14,TOTMEMR              ASSUME NOT
         BZ    *+8                      NO, REAL MEMBER
         LA    R14,TOTMEMA              YES, ALIAS MEMBER
         SPACE
         LH    R15,0(,R14)
         LA    R15,1(,R15)
         STH   R15,0(,R14)
         SPACE 2
         TM    FLAGS+2,FDIRSCAN         SCAN TOTAL DIRECTORY?
         BO    DEBLOCK                  YES, CONTINUE THIS BLOCK
         SPACE 2
         LA    R15,8                    EXIT OFFSET
         B     READDIR4
         SPACE 2
READDIR3 DS    0H
         OI    FLAGS+2,FDIREND          END OF DIRECTORY
         TM    FLAGS+2,FDIRSCAN         STATISTICS SCAN?
         BO    READDIR1                 YES, CONTINUE IT
         SPACE
READDIR5 DS    0H
         LA    R15,4                    LAST MEMBER EXIT OFFSET
         SPACE 2
READDIR4 DS    0H
         L     R14,R14SAVE
         NI    FLAGS+2,255-FDIRSCAN-FDIREND
         B     0(R14,R15)
         EJECT
*
*
*        PARSE INTERFACE SUBROUTINE
*
*
         SPACE 3
GOPARSE  DS    0H
         ST    R1,ADDRPCL
         ST    R14,R14PARSE
         BAL   R14,FREEPDL
         SPACE 3
*
*        BUILD PARSE PARAMETER LIST AND INVOKE
*        IKJPARS TO ANALYZE COMMAND OPERANDS
*
         SPACE 3
         LA    R1,PARSELST              AREA FOR PARSE PARAMETERS
         USING PPL,R1                   BASE FOR PARSE PARAMETER LIST
         SPACE 2
         MVC   PPLUPT,ADDRUPT           PASS UPT ADDRESS
         MVC   PPLECT,ADDRECT           AND ECT ADDRESS
         MVC   PPLCBUF,ADDRCBUF         AND COMMAND BUFFER ADDR
         SPACE
         ST    WORKREG,PPLUWA           ALSO PASS WORK AREA ADDRESS
*                                       FOR VALIDITY CHECK EXITS
         SPACE
         LA    R0,ATTNECB               ECB FOR ATTN INTERRUPTS
         MVI   ATTNECB,0                CLEAR ECB
         ST    R0,PPLECB                PASSE TO PARSE
         SPACE
         LA    R0,ADDRPDL               PASS ADDR OF WORD WHERE PARSE
         ST    R0,PPLANS                RETURNS PDL ADDRESS
         SPACE
         MVC   PPLPCL,ADDRPCL           ADDRESS OF PARSE CONTROL LIST
         SPACE 3
         LINK  EPLOC=IKJPARS            INVOKE PARSE
         DROP  R1
         SPACE 2
         LA    R14,MAXPARSE             RETURN CODE LIMIT
         CR    R15,R14                  CHECK RETURN CODE WITHIN LIMITS
         BNL   PARSEBAD                 NO, ERROR
         SPACE
         B     *+4(R15)                 PROCESS RETURN CODE
         SPACE
PARSERET B     PARSEOK                  00- SUCESSFUL
         B     PARSE1                   04- PARSE UNABLE TO PROMPT
         B     PARSE1                   08- USER ENTERED ATTENTION
         B     PARSEBAD                 12- INVALID PARAMETERS
         B     PARSEBAD                 16- PARSE INTERNAL FAILURE
         B     EXIT8                    20 - VALIDITY CHECK ERROR
MAXPARSE EQU   *-PARSERET               MAXIMUM PARSE RETURN CODES
         SPACE 2
         SPACE 2
PARSEBAD DS    0H
         MVC   MSGTEXT2+4(L'MSGPARSE),MSGPARSE
         LA    R1,MSGTEXT2+4+L'MSGPARSE
         SPACE
         CVD   R15,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  0(2,R1),DOUBLE
         SPACE
         LA    R0,MSGTEXT2-2
         SR    R1,R0
         SLL   R1,16
         ST    R1,MSGTEXT2
         SPACE 2
         LA    R0,MSGTEXT2    PUT OUT 'COMMAND ERROR' MSG
         MESSAGE MSGCMDER,(R0)
         B     EXIT12
         SPACE 2
PARSE1   DS    0H
         SR    R15,R15        RETURN AT OFFSET 0
         B     PARSEOUT
         SPACE 2
PARSEOK  DS    0H
         LA    R15,4
         SPACE
PARSEOUT DS    0H
         L     R14,R14PARSE
         B     0(R15,R14)               EXIT FROM PARSE
         EJECT
PUTERROR DS    0H
GETERROR DS    0H
EXIT12   DS    0H
         LA    R15,12                   ERROR CODE 12
         B     RETURN
         SPACE
EXIT8    DS    0H
         LA    R15,8                    ERROR CODE 8
         B     RETURN
         SPACE
EXIT4    DS    0H
         LA    R15,4
         B     RETURN
         SPACE
EXIT0    DS    0H
         SR    R15,R15
         SPACE 3
RETURN   DS    0H
         LTR   R2,R15                   NORMAL EXIT?
         BZ    RETURN1                  YES
         SPACE 2
         LA    R1,PARMLIST              AREA FOR STACK PARM LIST
         USING IOPL,R1
         SPACE
         MVC   IOPLUPT,ADDRUPT
         MVC   IOPLECT,ADDRECT
         LA    R0,ATTNECB
         MVI   ATTNECB,0
         ST    R0,IOPLECB
         SPACE 2
         STACK PARM=PARMLIST+16,DELETE=ALL,MF=(E,(1))
         SPACE 3
         TCLEARQ INPUT                  CLEAR INPUT BUFFERS
         SPACE 3
RETURN1  DS    0H
         BAL   R14,FREEPDL              FREE THE PARSE STROAGE
         SPACE
         DELETE EPLOC=IKJPUTL
         SPACE
         DELETE EPLOC=IKJGETL
         SPACE
         DELETE EPLOC=IKJSCAN
         SPACE 3
         STAE  0,OV                     CANCEL STAE EXIT
         SPACE 3
         L     R13,ADDRSAVE             RESTORE FIRST SAVE AREA ADDR
         LR    R15,R2                   RESTORE RETURN CODE
         SPACE
         L     R0,CORESIZE
         SPACE
         EXIT  LV=(0)
         EJECT
*
*        STAE EXIT
*
         SPACE 3
STAEEXIT DS    0H
         USING *,R15                    TEMPORARY BASE
         SPACE
         CH    R0,STAECODE              IS WORK AREA PROVIDED?
         BE    STAE1                    NO
         SPACE
         L     WORKREG,0(R1)            YES, GET OUR WORK AREA ADDR
         B     STAE2
         SPACE 2
STAE1    DS    0H
         LR    WORKREG,R2               OUR WORK AREA ADDR
         SPACE 2
STAE2    DS    0H
         STM   0,15,STAEREGS
         SPACE 2
         LM    BASEREG1,BASEREG2,BASES
         DROP  R15
         SPACE
         LA    R13,STAESAVE
         SPACE 2
STAE4    LM    0,15,STAEREGS
         SR    R15,R15                  NO RETRY EXIT
         BR    R14
         SPACE
STAECODE DC    H'20'
         EJECT
*
*
*        STOW DCB OPEN SUBROUTINE
*
*
         SPACE 3
OPENSTOW DS    0H
         TM    STOWDCB+48,X'10'         DCB OPEN?
         BO    4(,R14)                  YES, EXIT
         MVI   OPENLIST,X'80'
         ST    R14,0(,R13)              SAVE RETURN ADDRESS
         AIF   (NOT &SPNB).SPNB1
         TM    FLAGS+1,FQUOTE           DSNAME QUOTED?
         BZ    HECANDO                  NO, HIS OWN DATA SET
         DSCHK DSNAME,TYPE=OUTPUT       CAN HE DO THIS?
         LA    R14,8                    BAD CODE?
         CR    R15,R14                  IS IT?
         BNH   HECANDO                  NO, OPEN THE DCB
         LA    R1,DSNAME
         LINK  EP=TSO200I               ERROR MESSAGE    LRH 1.0
         CR    R0,R0                    SET EQUAL CONDITION CODE
         L     R14,0(,R13)
         BR    R14                      EXIT - DCB NOT OPEN
HECANDO  DS    0H
         SPACE 2
.SPNB1   ANOP
         OPEN  (STOWDCB,OUTPUT),MF=(E,OPENLIST)
         LA    R1,STOWDCB               POINT TO DCB
         USING IHADCB,R1
         MVC   STOWFDAD(8),DCBFDAD      MOVE OUT THE FDAD
         XC    DCBFDAD(8),DCBFDAD       ZERO IT
         L     R14,0(,R13)
         TM    DCBOFLGS,X'10'           DID DCB OPEN?
         BO    4(,R14)                  YES, RETURN
         DROP  R1
         SPACE 2
         MESSAGE MSGNOPEN
         SPACE 2
         L     R14,0(,R13)
         BR    R14
         EJECT
*
*
*        MEMBER NAME VALIDITY CHECK SUBROUTINE
*
*
         SPACE 3
VERMEMBR ENTER VALCHECK
         TM    6(RPDL),X'80'            WAS MEMBER NAME SPECIFIED?
         BZ    SKIPTHIS                 NO
         SPACE 2
         L     R15,0(,RPDL)             ADDR OF MEMBER NAME
         LH    R14,4(,RPDL)             LENGTH OF NAME
         BCTR  R14,0                    EXECUTE LENGTH
         SPACE 2
         OI    FLAGS,FMEMBER2
         TM    FLAGS,FMEMBER1           FIRST MEMBER PROCESSED?
         LA    R1,MEMBER2
         LA    R2,LMEMBER2
         BO    MEM2ND                   YES
         XI    FLAGS,FMEMBER1+FMEMBER2
         LA    R1,MEMBER1
         LA    R2,LMEMBER1
MEM2ND   DS    0H
         SPACE
         MVI   0(R1),C' '
         MVC   1(7,R1),0(R1)
         SPACE
         MVC   0(0,R1),0(R15)
         EX    R14,*-6
         STH   R14,0(R2)
         SPACE 2
SKIPTHIS DS    0H
         SR    R15,R15
         EXIT
         EJECT
*
*
*        SSI ATTRIBUTE VALIDITY CHECK SUBROUTINE
*
*
         SPACE 2
VERHEX   ENTER VALCHECK
         L     R15,0(,RPDL)
         LH    R14,4(,RPDL)
         SPACE 2
VERHEX1  DS    0H
         TM    0(R15),C'0'              TEST FOR NUMERIC
         BO    VERHEX2
         SPACE
         CLI   0(R15),C'A'              TEST FOR A-F
         BL    VERHEX0                  NO, ERROR
         CLI   0(R15),C'F'              TEST FOR A-F
         BH    VERHEX0                  NO, ERROR
         SPACE
VERHEX2  DS    0H
         SPACE
         LA    R15,1(,R15)              POINT TO NEXT CHARACTER
         BCT   R14,VERHEX1              DECREMENT LENGTH AND TEST NEXT
         SR    R15,R15
         B     EXITHEX
         SPACE
VERHEX0  DS    0H
         LA    R15,4
         SPACE
EXITHEX  DS    0H
         EXIT
         EJECT
*
*
*        ATTRIBUTE VALIDITY CHECK EXIT
*
*
         SPACE 3
*              THE FOLLOWING CODE HAS BEEN BYPASSED DUE TO THE FACT
*              THAT IT ANLYZED THE ATTRIBUTES FOR ATTR AND SET BITS
*              ACCORDINGLY. THIS CODE HAS BEEN ADDED TO THE ATTR
*              SUBCOMMAND PROCESSOR.
         AGO   .$00000
VERATTR  ENTER VALCHECK
VERATTR4 DS    0H
         L     R15,0(,RPDL)
         LH    R14,4(,RPDL)
         SPACE 2
         LA    R3,ATTRNO
         LA    R1,ATTRYES
         SPACE
         LA    R2,L'NO
         CR    R14,R2                   CAN 'NO' OPTION BE PREFIXED?
         BL    VERATTR1                 NO
         SPACE
         CLC   NO,0(R15)                'NO' OPTION PREFIXED?
         BNE   VERATTR1                 NO
         SPACE
         AR    R15,R2                   ADJUST ATTRIBUTE ADDRESS
         SR    R14,R2                   DECREMENT LENGTH
         BZ    VERATTR0                 LENGTH ERROR
         LA    R1,ATTRNO
         LA    R3,ATTRYES
         SPACE 2
VERATTR1 DS    0H
         BCTR  R14,0                    DECREMENT LENGTH FOR EXECUTE
         LA    R0,LATTR                 MAXIMUM ATTRIBUTE LENGTH
         CR    R14,R0
         BNL   VERATTR0                 INVALID LENGTH
         SPACE 2
         SR    R0,R0                    NO FIRST ATTRIBUTE
         SPACE
         LA    R2,ATTRTBL               TABLE OF CHANGEABLE ATTRIBUTES
         SPACE
LOOPATTR DS    0H
         CLC   0(0,R15),0(R2)
         EX    R14,*-6
         BE    VERATTR2
VERATTR5 DS    0H
         LA    R2,LATTRTBL(R2)
         CLI   0(R2),X'FF'
         BNE   LOOPATTR
         LTR   R2,R0                    PREVIOUS MATCH?
         BNZ   VERATTR3                 YES
         B     VERATTR0                 INVALID ATTRIBUTE
         SPACE
VERATTR2 DS    0H
         LTR   R0,R0                    FIRST MATCH
         BNZ   VERATTRX                 NO
         SPACE
         LR    R0,R2                    SAVE ADDRESS
         B     VERATTR5                 CONTINUE SCAN
         SPACE 2
VERATTR3 DS    0H
         TM    LATTR(R2),X'80'          REVERSE MATCH?
         BZ    VERATTR6                 NO
         LR    R1,R3                    ALTERNATE BIT MASK
VERATTR6 DS    0H
         OC    0(L'ATTRYES,R1),LATTR+1(R2) SET ATTRIBUTE STATUS FLAGS
         SPACE 2
         OI    FLAGS,FATTR              INDICATE CHANGE ATTRIBUTES
         SPACE
         SR    R15,R15
         B     EXITATTR
         SPACE 3
VERATTRX DS    0H
         MVC   MSGTEXT1,MSGDUPAT
         B     BADATTR
         SPACE
VERATTR0 DS    0H
         MVC   MSGTEXT1,MSGBADAT
BADATTR  DS    0H
         LH    R1,MSGTEXT1
         LA    R0,1(R1,R14)
         STH   R0,MSGTEXT1
         LA    R1,MSGTEXT1(R1)
         MVC   0(0,R1),0(R15)
         EX    R14,*-6
         SPACE 2
         MESSAGE MSGTEXT1
         SPACE 2
         LA    R15,8
EXITATTR DS    0H
         EXIT
.$00000  ANOP
         EJECT
*
*
*        INPUT DATA SET VALIDITY CHECK EXIT
*
*
         SPACE 3
VERDSN   ENTER VALCHECK
         CLEAR DSNAME
         SPACE 2
         CLEAR PASSWORD
         SPACE 2
         CLEAR VOLUME
         SPACE 2
         L     R15,0(,RPDL)             ADDR OF DSNAME
         LH    R14,4(,RPDL)             LENGTH OF DSNAME
         STH   R14,DSNLEN
         BCTR  R14,0
         MVC   DSNAME(0),0(R15)
         EX    R14,*-6                  MOVE DSNAME TO AREA
         SPACE 2
         TM    22(RPDL),X'80'           PASSWORD SUPPLIED?
         BZ    NOPASS                   NO
         SPACE
         L     R15,16(,RPDL)
         LH    R14,20(,RPDL)
         BCTR  R14,0
         MVC   PASSWORD(0),0(R15)
         EX    R14,*-6                  MOVE PASSWORD TO AREA
NOPASS   DS    0H
         SPACE 3
         OI    FLAGS+1,FQUOTE           ASSUME DSNAME QUOTED
         TM    6(RPDL),X'40'            IS DSNAME IN QUOTES?
         BO    NOUSERID                 YES
         XI    FLAGS+1,FQUOTE           NO, MUST QUALIFY NAME
NOUSERID DS    0H
         SPACE 3
         SR    R15,R15
         SPACE
         EXIT
         EJECT
*
*        VOLUME SERIAL VALIDITY CHECK
*
         SPACE 2
VERVOL   ENTER VALCHECK
         LH    R15,4(,RPDL)
         L     R1,0(,RPDL)
         BCTR  R15,0
         SPACE
         MVC   VOLUME(0),0(R1)
         EX    R15,*-6
         SPACE 2
         SR    R15,R15
         EXIT
         EJECT
*
*        FREE DATA SET NO LONGER REQUIRED
*
         SPACE 2
DEALLOC  DS    0H
         ST    R14,R14LINK
         TM    FLAGS+2,FPERMDS          DATA SET PERMANENTLY ALLOCATED?
         BO    DEALLOC1                 YES, SKIP EXPLICIT DEALLOCATION
         SPACE
         LA    R1,DAIRBLK
         XC    DAIRBLK(LDAIRBLK),DAIRBLK
         USING DAPB18,R1
         MVC   DA18DDN,DDNAME           DE-ALLOCATE THE DATA SET
         LA    R0,X'18'
         STH   R0,DA18CD
         SPACE
         BAL   R14,CALLDAIR
         SPACE 2
DEALLOC1 DS    0H
         NI    FLAGS+2,255-FPERMDS      CLEAR DATA SET STATUS
         L     R14,R14LINK
         BR    R14
         EJECT
*
*        PARSE CLEANUP ROUTINE
*
         SPACE 3
FREEPDL  DS    0H
         SPACE
         ST    R14,R14SAVE
         SPACE
         L     R1,ADDRPDL               ADDR OF PDL
         LA    R1,0(R1)
         LTR   R1,R1                    DOES ONE EXIST?
         BCR   8,R14                    NO, EXIT
         SPACE
         IKJRLSA ADDRPDL                RELEASE THE STORAGE
         SPACE
         L     R14,R14SAVE
         XC    ADDRPDL,ADDRPDL
         BR    R14
         EJECT
*
*        DATA SET ALLOCATION SUBROUTINE
*
         SPACE 2
ALLOCATE DS    0H
         ST    R14,R14ALLOC             SAVE LINKAGE REGISTER
         NI    FLAGS+2,255-FPERMDS      CLEAR DATA SET STATUS
         SPACE 2
RETRY    DS    0H
         LA    R1,DAIRBLK
         XC    DAIRBLK(LDAIRBLK),DAIRBLK
         USING DAPB08,R1
         SPACE
         MVC   DA08PSWD,PASSWORD
         SPACE
         TM    FLAGS+1,FQUOTE           QUALIFY DATA SET NAME?
         BO    NQUALIFY                 NO
         OI    DA08CTL,DA08UID
NQUALIFY DS    0H
         SPACE 2
         LA    R0,X'08'                 DATA SET ALLOCATION CODE
         STH   R0,DA08CD
         SPACE
         LA    R0,DSNLEN                ADDR OF DSNAME FIELD
         ST    R0,DA08PDSN
         SPACE
         CLEAR DA08DDN
         SPACE
         CLEAR DA08UNIT                 NO UNIT REQUESTED
         SPACE
         MVC   DA08SER,VOLUME           VOLUME SPECIFIED
         SPACE
         CLEAR DA08MNM                  NO MEMBER NAME
         SPACE
         MVI   DA08DSP1,DA08SHR         DISP=(SHR,KEEP,KEEP)
         MVI   DA08DPS2,DA08KEEP
         MVI   DA08DPS3,DA08KEP
         SPACE
         BAL   R14,CALLDAIR
         LA    R1,DAIRBLK
         LTR   R15,R15                  SUCCESSFUL?
         BNZ   DAIRFAIL                 NO, ERROR
         SPACE 2
         MVC   DDNAME,DA08DDN           SAVE DDNAME
         SPACE
         TM    DA08DSO,X'02'            IS DATA SET DSORG=PO?
         BO    STATALOC                 YES, DETERMINE DATA SET STATUS
         SPACE 3
         MVC   DDNAME1,DDNAME           DDNAME TO DE-ALLOCATE
         BAL   R14,DEALLOC              FREE THE DATA SET
         SPACE 2
         MESSAGE MSGNLIB
         SPACE 2
RECOVERY DS    0H
ASKAGAIN DS    0H
        $PUTGET MSGRETRY,ATTN=NOTALLOC
         SPACE 2
         TM    FLAGS,FNULL              USER WANT ANOTHER DATA SET?
         BO    ASKAGAIN                 NULL REPLY, ASK AGAIN
         SPACE
         L     R1,MAINPCL               YES, INVOKE PARSE
         BAL   R14,GOPARSE
         B     NOTALLOC                 EXIT - PARSE FAILURE
         B     RETRY                    SUCCESSFUL - RETRY ALLOCATION
         SPACE 2
STATALOC DS    0H
         XC    DAIRBLK(LDAIRBLK),DAIRBLK
         USING DAPB00,R1                BASE FOR DSE STATUS REQUEST
         MVC   DA00DDN,DDNAME           DDNAME FOR STATUS REQUEST
         BAL   R14,CALLDAIR             GET DATA SET STATUS
         LTR   R15,R15                  SUCESSFUL?
         LA    R1,DAIRBLK               RESTORE ADDR OF PARM AREA
         LA    R15,4                    RETURN OFFSET
         BNZ   EXITALOC                 NO, JUST RETURN
         TM    DA00FLG,DA00PERM         DATA SET PERM ALLOCATED?
         BZ    EXITALOC                 NO, EXIT
         OI    FLAGS+2,FPERMDS          YES, INDICATE PERMANENT DATASET
         B     EXITALOC
         SPACE 2
NOTALLOC DS    0H
         SR    R15,R15                  ERROR EXIT - NOT ALLOCATED
         SPACE 3
EXITALOC DS    0H
         L     R14,R14ALLOC
         B     0(R14,R15)               EXIT FROM ALLOCATION
         EJECT
*
*        DYNAMIC ALLOCATION INVOCATION SUBROUTINE
*
         SPACE 3
CALLDAIR DS    0H
         ST    R14,R14SAVE              SAVE LINKAGE REGISTER
         SPACE 2
         LA    R1,PARMLIST              BUILD DYNAMIC ALLOC PARM LIST
         USING DAPL,R1
         SPACE
         MVC   DAPLUPT,ADDRUPT
         MVC   DAPLECT,ADDRECT
         MVC   DAPLPSCB,ADDRPSCB
         SPACE
         LA    R0,ATTNECB
         MVI   ATTNECB,0
         ST    R0,DAPLECB
         SPACE
         LA    R0,DAIRBLK
         ST    R0,DAPLDAPB
         SPACE 2
         LINK  EPLOC=IKJDAIR
         SPACE 2
         L     R14,R14SAVE              RESTORE LINKAGE REGISTER
         BR    R14                      EXIT
         EJECT
DAIRFAIL DS    0H
         NI    FLAGS+1,255-FNORETRY
         SPACE 2
         AIF   (&PDSDAIR).PDSDA1
         ST    R15,DOUBLE               SAVE THE RETURN CODE
         LA    R0,PARMLIST              LOAD ADDRESS OF DAPL
         ST    R0,PARMLIST+20           STORE ADDRESS OF DAIR ERROR
         LA    R0,DOUBLE                POINT TO RETURN CODE
         ST    R0,PARMLIST+24           STORE THE ADDRESS
         LA    R0,ADDREFF               POINT TO MODULE ADDRESS
         ST    R0,PARMLIST+28           STORE THE ADDRESS
         LA    R0,DOUBLE+4              POINT TO RETURN CODE
         ST    R0,PARMLIST+32           STORE THE ADDRESS
         MVI   DOUBLE+4,0
         MVI   DOUBLE+5,1               SET DAIR ERROR
         LA    R1,PARMLIST+20           POINT TO ERROR LIST
         LINK  EP=IKJEFF18              GO TO WRITE OUT THE MESSAGE
         B     ALLOCERR                 GO TO PROCESS IT
         AGO   .PDSND1                  BYPASS THIS STUFF
.PDSDA1  ANOP
         LA    R14,MAXDAIR
         CR    R15,R14                  CHECK DAIR RETURN CODE
         BH    DAIRBAD                  VERY BAD ERROR
         SPACE 3
         B     *(R15)                   DAIR ERROR PROCESSING
         B     DAIRBAD                  RC=04 INVALID DAIR PARAMETERS
         B     DAIRCAM                  RC=08 ERROR IN CATALOG MGMT
         B     DAIRDYN                  RC=12 ERROR IN DYNAMIC ALLOC
         B     DAIRFULL                 RC=16 NO SPACE IN TIOT
MAXDAIR  EQU   16
         SPACE 3
DAIRFULL LA    R1,MSGFULL               ERROR MSG
         LA    R0,MSGFULL1              SECOND LEVEL MSG
         B     ALLOCBAD
         EJECT
*
*        PROCESS ERRORS FROM CATALOG MANAGEMENT
*
         SPACE 2
DAIRCAM  DS    0H
         USING DAPB08,R1
         SPACE
         LH    R15,DA08CTRC             GET CAM RETURN CODE
         LA    R14,MAXCAMCD             MAX CAM ERROR CODE
         CR    R15,R14
         BH    DAIRCAMX                 IF DISASTER ERROR CODE
         SPACE
         B     *(R15)                   PROCESS ERROR CODE
         B     CAMERR4                  04 - VOLUME NOT MOUNTED
         B     CAMERR8                  08 - INVALID CATALOG STRUCTURE
         B     CAMERR12                 12 -     ''          ''
         B     CAMERR16                 16
         B     CAMERR20                 20
MAXCAMCD EQU   20
         SPACE 3
CAMERR4  LA    R1,MSGVOL                LAST PART OF 1ST LEVEL MSG
CAMERROR SR    R0,R0                    NO SECOND LEVEL MSG
         B     ALLOCERR                 PUT OUT ERROR MSG
         SPACE 2
CAMERR8  DS    0H
         LA    R1,MSGNOCAT              MSG 'DATA SET NOT CATALOGED'
         B     CAMERROR
CAMERR16 DS    0H
CAMERR12 LA    R1,MSGINDEX              INCONSISTENT CTLG STRUCTURE
         LA    R0,MSGDSFMT
         B     ALLOCERR
         SPACE 2
CAMERR20 DS    0H
         LA    R1,MSGSYNTX              INVALID DSNAME SYNTAX'
         LA    R0,MSGDSN
         B     ALLOCERR
         SPACE 3
DAIRCAMX DS    0H
         LH    R1,MSGCATER              LEN OF ERROR MSG
         SPACE
         MVC   MSGTEXT2(0),MSGCATER
         EX    R1,*-6
         SPACE
         LA    R1,MSGTEXT2(R1)
         CVD   R15,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  0(2,R1),DOUBLE
         LA    R1,2(R1)
         LA    R0,MSGTEXT2
         SR    R1,R0
         SLL   R1,16
         ST    R1,MSGTEXT2
         SPACE 2
         SR    R1,R1
         B     ALLOCBAD
         EJECT
*
*        PROCESS ERRORS FROM DYNAMIC ALLOCATION
*
         SPACE 3
DAIRDYN  DS    0H
         USING DAPB08,R1
         LH    R15,DA08DARC   RETURN CODE FROM DYNAMIC ALLOCATION
         SPACE
         LA    R14,DYNMSGS    START OF MSG LOOKUP TABLE
         LA    R1,DYNMSGE     LAST MSG IN TABLE
         SPACE 2
DAIRDYN1 CH    R15,0(R14)     THIS ERROR CODE?
         BE    DAIRDYN2       YES
         SPACE
         TM    2(R14),X'80'   IS SECOND LEVEL MSG THERE?
         LA    R0,6           LENGTH FOR SINGLE MSG
         BZ    DAIRDYN3       NO
         LA    R0,10          LENGTH FOR 2 MSG LEVELS
         SPACE 2
DAIRDYN3 BXLE  R14,R0,DAIRDYN1
         SPACE 2
DAIRBAD  DS    0H
         LH    R14,MSGDYNER
         MVC   MSGTEXT2(0),MSGDYNER
         EX    R14,*-6        CREATE MSG - DYNAMIC ALLOCATION FAILURE
         SR    R1,R1          DEFAULT TO FIRST LEVEL MSG
         STH   R15,DOUBLE
         LA    R14,MSGTEXT2(R14)
         UNPK  0(5,R14),DOUBLE(3)
         TR    0(4,R14),TRTABLE
         LA    R0,MSGTEXT2-4
         SR    R14,R0
         SLL   R14,16
         ST    R14,MSGTEXT2
         LA    R0,MSGTEXT2
         B     ALLOCBAD
         SPACE 3
DAIRDYN2 MVC   DOUBLE(8),2(R14) MOVE ADDR OF ERROR MSGS
         L     R1,DOUBLE      ADDR OF FIRST LEVEL MSG
         SR    R0,R0          DEFAULT - NO LEVEL 2 MSG
         LTR   R1,R1          ANY SECOND LEVEL?
         LA    R1,0(R1)       FIRST LEVEL MSG ADDR
         BNM   DAIRDYN4       ONLY LEVEL 1
         L     R0,DOUBLE+4    SECOND LEVEL MSG
DAIRDYN4 DS    0H
         B     ALLOCERR
         SPACE 3
DYNMSGS  DS    0H
         DC    X'6708',X'00',AL3(MSG6708)
         DC    X'0210',X'80',AL3(MSG210),AL4(MSG210X)
         DC    X'0214',X'80',AL3(MSG214),AL4(MSG214X)
         DC    X'0218',X'80',AL3(MSG218),AL4(MSG218X)
         DC    X'021C',X'80',AL3(MSG21C),AL4(MSG21CX)
         DC    X'0334',X'00',AL3(MSG334)
DYNMSGE  DS    0H
         DC    X'041C',X'80',AL3(0),AL4(MSG41CX)
.PDSND1  ANOP
         EJECT
*
*
*        ALLOCATION ERROR MESSAGE SUBROUTINE
*
*
         SPACE 3
ALLOCBAD DS    0H
         OI    FLAGS+1,FNORETRY INDICATE NO ALLOCATION RETRY
         SPACE
ALLOCERR DS    0H
         AIF   (NOT &PDSDAIR).PDSND2
         MVC   MSGTEXT1+4(L'MSG1),MSG1   MOVE 'DATA SET ' MSG TO BUFFER
         LH    R14,DSNLEN     LENGTH OF DSNAME
         LA    R15,MSGTEXT1+L'MSG1+4
         SPACE
         MVC   MSGTEXT1+L'MSG1+4(0),DSNAME
         EX    R14,*-6        MOVE DSNAME TO BUFFER
         LA    R15,MSGTEXT1+L'MSG1+4(R14)
         SPACE 2
         MVC   0(L'MSG3,R15),MSG3   MOVE 'NOT ALLOCATED,' MSG TO BUFFER
         LA    R15,L'MSG3(R15)
         SPACE 2
         LTR   R1,R1          DEFAULT FIRST LEVEL MSG?
         BNZ   ALOCERR4       NO
         SPACE
         LA    R1,MSG4        YES
         SPACE
ALOCERR4 LH    R14,0(R1)      GET MSG LEN + 4
         SPACE
         MVC   0(0,R15),4(R1)
         EX    R14,*-6
         AR    R15,R14
         LA    R14,MSGTEXT1+4
         SR    R15,R14
         SLL   R15,16
         ST    R15,MSGTEXT1   STORE MESSAGE LENGTH
         SPACE
         MESSAGE MSGTEXT1,(R0)
.PDSND2  ANOP
         SPACE 2
         TM    FLAGS+1,FNORETRY BYPASS ALLOCATION RECOVERY?
         BO    NOTALLOC       YES
         B     RECOVERY       NO, THEN ATTEMPT RETRY
         EJECT
MESSAGE0 DS    0H
         SR    R0,R0
         SPACE 2
MESSAGE  DS    0H
         ST    R14,R14SAVE    SAVE LINKAGE REGISTER
         SPACE
         LTR   R0,R0          SECOND LEVEL MSG?
         BZ    ERRORM1        NO
         SPACE
         MVC   MSGTEXT1,0(R1) INSURE MSG IN WORK AREA
         LA    R1,MSGTEXT1
         SPACE
         LH    R14,0(R1)      LENGTH OF FIRST LEVEL MSG
         LA    R15,0(R14,R1)  ADDR OF END OF MSG
         LA    R14,1(R14)     JUMP MSG LENGTH
         STH   R14,0(R1)
         MVI   0(R15),C'+'    INDICATE SECOND LEVEL MSG EXISTS
         SPACE 2
         SR    R14,R14        CLEAR CHAIN FIELD
         LA    R15,1          ONE SEGMENT IN 2ND MSG
         STM   R14,R0,PUTOLD2 CREATE SECOND-LEVEL
*                             OUTPUT LINE DESCRIPTOR ('OLD')
         LA    R0,PUTOLD2
         SPACE 3
ERRORM1  LR    R14,R0         NEXT 'OLD' ADDR OR ZERO
         LA    R15,1          ONE SEGMENT
         LR    R0,R1          MSG ADDR
         STM   R14,R0,PUTOLD1 FIRST LEVEL 'OLD'
         SPACE
         LA    R1,PARMLIST
         USING IOPL,R1
         SPACE
         MVC   IOPLECT,ADDRECT
         MVC   IOPLUPT,ADDRUPT
         SPACE
         LA    R0,ATTNECB
         ST    R0,IOPLECB
         MVI   ATTNECB,0
         SPACE 3
         L     R15,ADDRPUTL
         XC    PARMLIST+16(4),PARMLIST+16
         PUTLINE PARM=PARMLIST+16,ENTRY=(15),MF=(E,(1)),               X
               OUTPUT=(PUTOLD1,TERM,MULTLVL,INFOR)
         SPACE 3
         L     R14,R14SAVE
         BR    R14
         EJECT
*
*
*        PUTLINE PROCESSING
*
*
         SPACE 3
$PUTLINE DS    0H
         TM    ATTNECB,X'40'  ATTN OCCUR?
         BCR   1,R14          YES, IMMED RETURN
         ST    R14,R14PUTL
         BAL   R14,FREEBUFF
         SPACE
         LR    R14,R1         SAVE DATA LINE POINTER
         SPACE
         LA    R1,PUTLPARM
         USING IOPL,R1
         MVC   IOPLECT,ADDRECT
         MVC   IOPLUPT,ADDRUPT
         SPACE
         LA    R0,ATTNECB
         ST    R0,IOPLECB
         SPACE
         L     R15,ADDRPUTL
         XC    IOPLEND(16),IOPLEND
         LR    R0,R14         ADDR OF DATA LINE
         SPACE
         PUTLINE PARM=IOPLEND,ENTRY=(15),MF=(E,(1)),                   X
               OUTPUT=((0),TERM,SINGLE,DATA),                          X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK)
         SPACE
         LA    R14,4
         CR    R15,R14        CHECK COMPLETION
         BH    PUTERROR       PUTLINE ERROR
         LR    R15,R14
         BL    PUTLINE1
         SPACE
         TM    ATTNECB,X'40'  ATTN OCCUR?
         BZ    PUTLINE1       YES
         SPACE
PUTLINE2 DS    0H
         SR    R15,R15
         SPACE
PUTLINE1 DS    0H
         L     R14,R14PUTL
         B     0(R14,R15)
         EJECT
*
*
*        PUTGET PROCESSING
*
*
         SPACE 3
$PUTGET  DS    0H
         TM    ATTNECB,X'40'  ATTN OCCUR?
         BCR   1,R14          YES, IMMED RETURN
         ST    R14,R14PTGT
         BAL   R14,FREEBUFF
         NI    FLAGS,255-FNULL
         SPACE
         LA    R0,1           ONLY ONE SEGMENT
         STM   R0,R1,PUTOLD1
         SPACE
         LA    R1,PTGTPARM
         USING IOPL,R1
         MVC   IOPLECT,ADDRECT
         MVC   IOPLUPT,ADDRUPT
         SPACE
         LA    R0,ATTNECB
         ST    R0,IOPLECB
         SPACE
$PUTGET1 DS    0H
         L     R15,ADDRPTGT
         XC    IOPLEND(16),IOPLEND
         SPACE 2
         L     R0,PUTOLD1+4             LOAD ADDRESS OF MESSAGE
         LTR   R0,R0                    TEST FOR ANY
         BZ    *+8                      NONE, DON'T BOTHER
         LA    R0,PUTOLD1               LOAD ADDRESS OF THE OLD
         SPACE 2
         PUTGET PARM=IOPLEND,MF=(E,(1)),ENTRY=(15),                    X
               OUTPUT=((0),SINGLE,MODE),                               X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     X
               TERMGET=(EDIT,WAIT)
         SPACE
         TM    FLAGS+3,FSECOND SECOND LEVEL MESSAGES DELETED
         BZ    *+16
         L     R14,ADDRECT    POINT TO ECT
         USING ECT,R14
         MVI   ECTMSGF,0      TURN OFF FLAGS
         NI    FLAGS+3,255-FSECOND TURN OFF FLAG
         DROP  R14
         LA    R14,12
         CR    R15,R14
         BH    GETERROR       PUTGET ERROR
         BE    PUTGET2        SECOND LEVEL MESSAGES EXIST
         SR    R15,R15
         TM    ATTNECB,X'40'  ATTN OCCUR?
         BO    PUTGET1        YES
         SPACE
         LA    R1,PTGTPARM
         LA    R1,IOPLEND
         USING PGPB,R1
         L     R1,PGPBIBUF
         LA    R0,4
         CH    R0,0(R1)       IS THIS A NULL LINE
         ST    R1,ADDRCBUF
         BL    NOTNULL        NO
         OI    FLAGS,FNULL    INDICATE NULL LINE
NOTNULL  DS    0H
         LA    R15,4
         SPACE
PUTGET1  DS    0H
         L     R14,R14PTGT
         B     0(R14,R15)
PUTGET2  DS    0H
         L     R15,ADDRECT    POINT TO ECT
         USING ECT,R15
         MVI   ECTMSGF,X'80'  TELL TO FORGET SECOND LEVEL
         OI    FLAGS+3,FSECOND INDICATE SO
         B     $PUTGET1
         DROP  R15
         EJECT
*
*        DCB OPEN EXIT
*
*
         SPACE 2
OPENEXIT DS    0H
         USING IHADCB,R1
         NI    FLAGS,255-FLOADMOD
         TM    DCBRECFM,X'C0' IS DATA SET IN LOAD MODULE FORMAT?
         BNO   OPEN1          NO, NOT RECFM=U
         OI    FLAGS,FLOADMOD INDICATE LOAD MODULE
OPEN1    DS    0H
         OC    BUFFADDR,BUFFADDR BUFFER PRESENT?
         BCR   7,R14          YES
         SPACE
         LH    R2,DCBBLKSI    GET SIZE OF BUFFER
         MVC   LRECL,DCBLRECL
         LR    R3,R14
         GETMAIN EC,LV=(R2),SP=0,A=BUFFADDR,MF=(E,PARMLIST)
         LR    R14,R3
         LTR   R15,R15        SUCESSFUL?
         BZ    OPEN2          YES
         XC    BUFFADDR,BUFFADDR
OPEN2    DS    0H
         STH   R2,BUFFSIZE
         BR    R14
         DROP  R1
         EJECT
*
*
*        P A R S E   C O N T R O L   L I S T
*
*
         SPACE 3
         PRINT NOGEN
PCLMAIN  IKJPARM DSECT=MAINPDL
INPUTDSN IKJPOSIT DSNAME,VALIDCK=VERDSN,                               $
               PROMPT='NAME OF DATA SET',                              $
               HELP=('NAME OF THE PARTITIONED DATA SET TO BE PROCESSED'$
               )
OPTVOL   IKJKEYWD
         IKJNAME 'VOLUME',SUBFLD=$VOLUME
$VOLUME  IKJSUBF
VOLNAME  IKJIDENT 'VOLUME NAME',MAXLNTH=6,FIRST=ALPHANUM,              X
               OTHER=ALPHANUM,VALIDCK=VERVOL,                          X
               PROMPT='VOLUME NAME',                                   X
               HELP=('VOLUME WHERE DATA SET RESIDES')
         IKJENDP
         SPACE
PCLDSPLY IKJPARM DSECT=PDLDSPLY
PDLD1    IKJIDENT 'MEMBER NAME',RANGE,MAXLNTH=8,                       $
               FIRST=ALPHA,OTHER=ALPHANUM
PDLD2    IKJKEYWD
         IKJNAME 'DIRECTORY'
         IKJNAME 'NODIRECTORY'
         IKJENDP
         SPACE
PCLALIAS IKJPARM DSECT=PDLALIAS
PCLAL1   IKJIDENT 'MEMBER NAME',FIRST=ALPHA,OTHER=ALPHANUM,            $
               PROMPT='CURRENT MEMBER NAME',                           $
               HELP=('NAME OF THE MEMBER TO BE ASSIGNED AN ALIAS'),    $
               VALIDCK=VERMEMBR,                                       $
               MAXLNTH=8
PCLAL2   IKJIDENT 'MEMBER NAME',FIRST=ALPHA,OTHER=ALPHANUM,            $
               PROMPT='ALIAS NAME',                                    $
               HELP=('NAME TO BE ASSIGNED AS AN ALIAS'),               $
               VALIDCK=VERMEMBR,                                       $
               MAXLNTH=8
         IKJENDP
         SPACE
PCLDELET IKJPARM DSECT=PDLDELET
PCLS1    IKJIDENT 'MEMBER NAME',LIST,RANGE,FIRST=ALPHA,OTHER=ALPHANUM, $
               PROMPT='MEMBER TO BE DELETED',                          $
               HELP=('NAME OF THE MEMBER TO BE SCRATCHED'),            $
               MAXLNTH=8
         IKJENDP
         SPACE
PCLLIST  IKJPARM DSECT=PDLLIST
PCLL1    IKJIDENT 'MEMBER NAME',FIRST=ALPHA,OTHER=ALPHANUM,            $
               PROMPT='MEMBER TO BE LISTED',                           $
               HELP=('NAME OF THE MEMBER TO BE DISPLAYED'),            $
               VALIDCK=VERMEMBR,                                       $
               MAXLNTH=8
PCLL2    IKJKEYWD
         IKJNAME 'NONUM'
         IKJNAME 'NUM',SUBFLD=PCLL3
         IKJNAME 'SNUM',SUBFLD=PCLL3
PCLL3    IKJSUBF
PCLL4    IKJIDENT 'BEGIN COLUMN',FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=3,$
               HELP=('BEGIN COLUMN FOR THE SEQUENCE NUMBER',           $
               'A ONE TO THREE DIGIT NUMBER')
PCLL5    IKJIDENT 'LENGTH',FIRST=NUMERIC,MAXLNTH=1,                    $
               HELP=('LENGTH OF THE SEQUENCE NUMBER',                  $
               'A ONE DIGIT NUMBER')
         IKJENDP
         SPACE
PCLRENAM IKJPARM DSECT=PDLRENAM
PCLREN1  IKJIDENT 'MEMBER NAME',FIRST=ALPHA,OTHER=ALPHANUM,            $
               PROMPT='CURRENT MEMBER NAME',                           $
               HELP=('NAME OF THE MEMBER TO BE RENAMED'),              $
               VALIDCK=VERMEMBR,                                       $
               MAXLNTH=8
PCLREN2  IKJIDENT 'MEMBER NAME',FIRST=ALPHA,OTHER=ALPHANUM,            $
               PROMPT='NEW MEMBER NAME',                               $
               HELP=('NEW NAME OF THE MEMBER'),                        $
               VALIDCK=VERMEMBR,                                       $
               MAXLNTH=8
         IKJENDP
         SPACE
PCLMAP   IKJPARM DSECT=PDLMAP
PCLM1    IKJIDENT 'MEMBER NAME',FIRST=ALPHA,OTHER=ALPHANUM,            $
               PROMPT='MEMBER TO BE MAPED',                            $
               HELP=('NAME OF THE MEMBER FOR WHICH A LOAD MODULE MAP IS$
                TO BE PRODUCED'),                                      $
               VALIDCK=VERMEMBR,                                       $
               MAXLNTH=8
         IKJENDP
         SPACE
PCLFIND  IKJPARM DSECT=PDLFIND
PCLF1    IKJIDENT 'MEMBER NAME',FIRST=ALPHA,OTHER=ALPHANUM,            $
               PROMPT='MEMBER TO BE FOUND',                            $
               HELP=('NAME OF THE MEMBER TO BE FOUND'),                $
               VALIDCK=VERMEMBR,                                       $
               MAXLNTH=8
         IKJENDP
         SPACE
PCLATTR  IKJPARM DSECT=PDLATTR
PCLATM   IKJIDENT 'MEMBER NAME',FIRST=ALPHA,OTHER=ALPHANUM,            $
               PROMPT='MEMBER NAME',                                   $
               HELP=('NAME OF THE MEMBER FOR WHICH THE ATTRIBUTES ARE T$
               TO BE LISTED'),                                         $
               VALIDCK=VERMEMBR,                                       $
               MAXLNTH=8
PCLATREN IKJKEYWD
         IKJNAME 'RENT'
         IKJNAME 'NORENT'
PCLATREU IKJKEYWD
         IKJNAME 'REUS'
         IKJNAME 'NOREUS'
PCLATREF IKJKEYWD
         IKJNAME 'REFR'
         IKJNAME 'NOREFR'
PCLATEXC IKJKEYWD
         IKJNAME 'EXEC'
         IKJNAME 'NOEXEC'
PCLATLOD IKJKEYWD
         IKJNAME 'LOAD'
         IKJNAME 'NOLOAD'
PCLATPAG IKJKEYWD
         IKJNAME 'PAGE'
         IKJNAME 'NOPAGE'
PCLATSSI IKJKEYWD
         IKJNAME 'SSI',SUBFLD=$SSI
         IKJNAME 'NOSSI'
PCLATAC  IKJKEYWD
         IKJNAME 'AC',SUBFLD=$AC
         IKJNAME 'NOAC'
$SSI     IKJSUBF
$SSIV    IKJIDENT 'SSI VALUE',MAXLNTH=8,FIRST=ALPHANUM,                *
               OTHER=ALPHANUM,VALIDCK=VERHEX,                          *
               PROMPT='SSI VALUE',                                     *
               HELP=('SSI VALUE FOR SPECIFIED MEMBER')
$AC      IKJSUBF
$ACV     IKJIDENT 'AUTHORIZATION VALUE',MAXLNTH=3,FIRST=NUMERIC,       *
               OTHER=NUMERIC,                                          *
               PROMPT='AUTHORIZATION CODE',                            *
               HELP=('AUTHORIZATION CODE FOR SPECIFIED MEMBER')
         IKJENDP
*        THE FOLLOWING MACROS WERE MOVED TO ALLOW FULL PARSE SUPPORT
*        OF THE ATTRIBUTES.
*        THE VALIDITY CHECK EXIT HAS BEEN MATAINED IN CASE OF NEED.
         AGO   .$00001        NO SUPPORT FOR RELEASE 20 OR MVS
PCLATL   IKJIDENT 'NEW ATTRIBUTES',LIST,FIRST=ALPHA,OTHER=ALPHA,       $
               VALIDCK=VERATTR,MAXLNTH=8,                              $
               HELP=('THE NEW ATTRIBUTES TO BE ASSIGNED TO THIS LOAD MO$
               DULE','NULLIFY ATTRIBUTES BY PREFIXING ''NO'' TO THE ATT$
               RIBUTE NAME')
.$00001  ANOP
         SPACE
PCLHIST  IKJPARM DSECT=PDLHIST
PCLH1    IKJIDENT 'MEMBER NAME',FIRST=ALPHA,OTHER=ALPHANUM,            $
               PROMPT='MEMBER NAME',                                   $
               HELP=('NAME OF THE LOAD MODULE FOR WHICH THE HISTORY IS $
               TO BE LISTED'),                                         $
               VALIDCK=VERMEMBR,                                       $
               MAXLNTH=8
PCLH2    IKJKEYWD
         IKJNAME 'PROCESSOR'
         IKJNAME 'NOPROCESSOR'
PCLH3    IKJKEYWD
         IKJNAME 'USER'
         IKJNAME 'NOUSER'
PCLH4    IKJKEYWD
         IKJNAME 'ZAP'
         IKJNAME 'NOZAP'
         IKJENDP
         SPACE
PCLPACK  IKJPARM DSECT=PDLPACK
PCLPACKK IKJKEYWD
         IKJNAME 'MODULE'
         IKJNAME 'ADDRESS'
         IKJENDP
         SPACE
PCLCALL  IKJPARM DSECT=PDLCALL
PDLCAPRM IKJPOSIT QSTRING,                                             *
               HELP=('PARM TO BE PASSED TO THE CALLED PROGRAM',        *
               '0 TO 100 CHARACTERS OF  PARM INFORMATION')
         IKJENDP
         PRINT GEN
         EJECT
*
*
*        CONSTANTS
*
*
         SPACE 2
CVT      EQU   16
CVTPCNVT EQU   28
CVTDCB   EQU   116
CVTVVMDA EQU   552
CVTLPDIA EQU   360
CVTLPDSR EQU   352
         SPACE
DEBXTNT# EQU   16             OFFSET IN DEB FOR # OF EXTENTS
DEBEXTNT EQU   32             OFFSET IN DEB FOR D.A. EXTENT ENTRY
DEBAMLNG EQU   16             SIZE OF DIRECT ACCESS EXTENT IN DEB
         SPACE 2
UCBVOLI  EQU   28             OFFSET IN UCB FOR VOLUME SERIAL
         SPACE 2
DS1LSTAR EQU   98             OFFSET IN DSCB FOR LAST TTR USED
         SPACE 2
         PRINT NOGEN
         DS    0F
CORESIZE DC    AL1(1),AL3(LENWORK)
         AGO   .LRH2
CORESIZ2 DC    AL1(1),AL3(8)                              LRH 1.0
FAKEBUF  DC    AL2(18),AL2(4),CL4'PDS ''TRW.CMDLIST'' '   LRH 1.0
.LRH2    ANOP  ,
MAINPCL  DC    A(PCLMAIN)     PARSE LIST FOR DATA SET NAME
         SPACE 3
IKJDAIR  DC    CL8'IKJDAIR'   DYNAMIC ALLOCATION INTERFACE ROUTINE
IKJPUTL  DC    CL8'IKJPUTL'   PUTLINE SERVICE ROUTINE
IKJGETL  DC    CL8'IKJGETL'   GETLINE SERVICE ROUTINE
IKJPTGT  DC    CL8'IKJPTGT'   PUTGET SERVICE ROUTINE
IKJSCAN  DC    CL8'IKJSCAN'   COMMAND SCAN SERVICE ROUTINE
IKJPARS  DC    CL8'IKJPARS'   PARSE SERVICE ROUTINE
         SPACE 2
STAE     STAE  0,CT,MF=L      PATTERN STAE EXIT
LSTAE    EQU   *-STAE
         SPACE 2
EXCPDCB  DCB   DSORG=PO,DEVD=DA,DDNAME=X,MACRF=E
LEXCPDCB EQU   *-EXCPDCB
SAMDCB   DCB   DSORG=PO,DEVD=DA,DDNAME=X,MACRF=(R,W),EXLST=EXLST
LSAMDCB  EQU   *-SAMDCB
EXLST    DC    X'85',AL3(OPENEXIT)
         SPACE 3
OBTAIN   CAMLST SEARCH,0,0,0
         ORG   OBTAIN+4
         SPACE 3
BLDLPARM DC    AL2(1,74)
DATEMASK DC    X'402120612020612020'
         SPACE 2
NO       DC    C'NO'
IDALIAS  DC    C'-A'
FF       DC    8X'FF'
TRTABLE  EQU   *-C'A'
         DC    X'FAFBFCFDFEFF'
         ORG   TRTABLE+C'0'
         DC    C'0123456789ABCDEF'
         SPACE 2
FOUR     DC    F'4'
         SPACE
DAYMONTH DC    AL1(31,28,31,30,31,30,31,31,30,31,30,31)
         EJECT
*
*        NOTE - THE SAME SET OF LOGICAL CCWS CAN BE USED
*        TO READ A PDS DIRECTORY, OR THE CESD ENTRIES, OR
*        IDR RECORDS WITHIN A LOAD MODULE.
*
         SPACE
IDRCCWS  DS    0D
ESDCCWS  DS    0D
SCTRCCWS DS    0D
DIRCCWS  DS    0D
         CCW   X'31',0,X'60',5
         CCW   X'08',0,X'60',1
         CCW   X'86',0,X'60',256
         CCW   X'92',0,X'20',5
LDIRCCWS EQU   *-DIRCCWS
LESDCCWS EQU   *-ESDCCWS
LIDRCCWS EQU   *-IDRCCWS
DIR1CCW  DS    0D
         CCW   X'31',0,X'40',5
         CCW   X'08',0,X'00',0
         CCW   X'E9',0,X'40',8
         CCW   X'08',0,X'00',0
         CCW   X'06',0,X'60',256
         CCW   X'92',0,X'20',5
LDIR1CCW EQU   *-DIR1CCW
         SPACE 2
LISTCCWS DS    0D
         CCW   X'31',0,X'60',5
         CCW   X'08',0,X'60',1
         CCW   X'92',0,X'60',5
         CCW   X'86',0,X'20',0
LLISTCCW EQU   *-LISTCCWS
         SPACE 3
TBLATTR  DS    0H
         DC    BL2'1000000000000000',AL1(3),CL9'RENT'
         DC    BL2'0100000000000000',AL1(3),CL9'REUS'
         DC    BL2'0000000000000001',AL1(3),CL9'REFR'
         DC    BL2'0010000000000000',AL1(6),CL9'OVERLAY'
         DC    BL2'0001000000000000',AL1(3),CL9'TEST'
         DC    BL2'0000100000000000',AL1(8),CL9'LOAD ONLY'
         DC    BL2'0000010000000000',AL1(3),CL9'SCTR'
         DC    BL2'0000000000001000',AL1(7),CL9'NOT EDIT'
         DC    BL2'0000001000000000',AL1(128+7),CL9'NOT EXEC'
         DC    BL2'0000000010000000',AL1(128+1),CL9'DC'
         DC    X'FF'
TBLVATTR DS    0H
         DC    BL2'0000000010000000',AL1(6),CL9'VS LKED'
         DC    BL2'0000000000100000',AL1(8),CL9'PAGE BNDY'
         DC    X'FF'
         SPACE 2
ATTRAUTH DC    C'AUTH'
ATTRSSIC DC    C'SSI('
ATTRRENT EQU   X'80'
ATTRREUS EQU   X'40'
ATTROVLY EQU   X'20'
ATTRNE   EQU   X'08'          NOT-EDITABLE ATTRIBUTE
ATTRSCTR EQU   X'04'          NOT-EDITABLE ATTRIBUTE
ATTREP0  EQU   X'20'          ASSIGNED ENTRY PT AT OFFSET 0
ATTRREFR EQU   X'01'
ATTRLOAD EQU   X'08'
ATTREXEC EQU   X'02'
ATTRTBL  DS    0X
         DC    CL8'RENT',X'00',AL1(ATTRRENT,0)
LATTRTBL EQU   *-ATTRTBL
LATTR    EQU   8
         DC    CL8'REUS',X'00',AL1(ATTRREUS,0)
         DC    CL8'REFR',X'00',AL1(0,ATTRREFR)
         DC    CL8'EXEC',X'00',AL1(ATTREXEC,0)
         DC    CL8'LOAD',X'00',AL1(ATTRLOAD,0)
         DC    X'FF'
$SEGTAB  DC    CL8'$SEGTAB'
$ENTAB   DC    CL8'$ENTAB'
$PRIVATE DC    CL8'$PRIVATE'
         EJECT
OPTNTBL  DS    0H
         MSG   'THE FOLLOWING OPTIONS ARE AVAILABLE:'
         MSG   'ALIAS   -   ASSIGN AN ALIAS TO A MEMBER'
         MSG   'ATTR    -   LIST LOAD MODULE ATTRIBUTES'
         MSG   'CHANGE  -   SELECT A NEW DATA SET'
         MSG   'DISPLAY -   DISPLAY DIRECTORY'
         MSG   'FIND    -   DETERMINE IF MEMBER EXISTS'
         MSG   'HISTORY -   LIST HISTORY OF LOAD MODULE'
         MSG   'LIST    -   LIST CONTENTS OF A MEMBER'
         MSG   'MAP     -   MAP STRUCTURE OF LOAD MODULE'
         MSG   'OPTIONS -   DISPLAY THIS MENU'
         AIF   (&MVT).NOPACK1
         MSG   'PACK    -   DISPLAY THE LINKPACK MAP'
.NOPACK1 ANOP
         MSG   'RENAME  -   RENAME A MEMBER'
         MSG   'SCRATCH -   SCRATCH A MEMBER'
         MSG   'USAGE   -   LIST DIRECTORY STATISTICS'
         DC    X'FFFF'
         SPACE 3
CALLPARM DS    0F
         DC    CL8'CALL    ',AL1(4),AL3(CALL),X'40',AL3(PCLCALL)
         SPACE 3
CMDTABLE DS    0F
         DC    CL8'ALIAS   ',AL1(5),AL3(ALIAS),X'00',AL3(PCLALIAS)
         DC    CL8'ATTR    ',AL1(4),AL3(ATTR),X'00',AL3(PCLATTR)
         DC    CL8'CHANGE  ',AL1(6),AL3(CHANGE),X'00',AL3(PCLMAIN)
         DC    CL8'DISPLAY ',AL1(7),AL3(DISPLAY),X'80',AL3(PCLDSPLY)
         DC    CL8'END     ',AL1(3),AL3(END),X'40',AL3(0)
         DC    CL8'FIND    ',AL1(4),AL3(FIND),X'00',AL3(PCLFIND)
         DC    CL8'HISTORY ',AL1(7),AL3(HISTORY),X'00',AL3(PCLHIST)
         DC    CL8'LIST    ',AL1(4),AL3(LIST),X'00',AL3(PCLLIST)
         DC    CL8'MAP     ',AL1(3),AL3(MAP),X'00',AL3(PCLMAP)
         DC    CL8'OPTIONS ',AL1(7),AL3(LISTOPTS),X'40',AL3(0)
         AIF   (&MVT).NOPACK2
         DC    CL8'PACK    ',AL1(4),AL3(PACK),X'00',AL3(PCLPACK)
.NOPACK2 ANOP
         DC    CL8'REN     ',AL1(3),AL3(RENAME),X'00',AL3(PCLRENAM)
         DC    CL8'SCRATCH ',AL1(7),AL3(SCRATCH),X'00',AL3(PCLDELET)
         DC    CL8'USAGE   ',AL1(5),AL3(USAGE),X'40',AL3(0)
         DC    X'FF'
         EJECT
*
*        PROGRAM MESSAGES
*
         SPACE 2
         PRINT NOGEN
         SPACE
MSGUSEB  MSG   ' DIRECTORY BLOCKS ALLOCATED '
MSGUSED  MSG   ' DIRECTORY BLOCKS IN USE '
MSGUSER  MSG   ' MEMBERS EXIST'
MSGUSEA  MSG   ' OF THEM ARE ALIASES'
MSGUSESI MSG   ' TRACKS ALLOCATED '
MSGUSEMP MSG   ' TRACKS UNUSED '
MSGUSEXT MSG   ' EXTENTS USED '
MSGUSERR MSG   ' DIRECTORY ERROR'
MSGNDSCB MSG   ' OBTAIN ERROR'
MSGSTOWC MSG   ' STOW ERROR, CODE = 12'
MSGSTOW8 MSG   ' STOW ERROR, CODE = 8'
MSGSTOW4 MSG   ' STOW ERROR, CODE = 4'
MSGNLIST MSG   ' UNABLE TO LIST LOAD MODULES'
MSGLISTI MSG   ' I/O ERROR READING MEMBER'
MSGNLIB  MSG   ' DATA SET NOT PARTITIONED'
MSGNLOAD MSG   ' DATA SET NOT LOAD LIBRARY'
MSGNOPEN MSG   ' UNABLE TO PROCESS DATA SET'
MSGBADAT MSG   ' INVALID ATTRIBUTE, '
MSGDUPAT MSG   ' CONFLICTING ATTRIBUTE IGNORED - '
MSGIOERR MSG   ' DIRECTORY I/O ERROR'
MSGEMPTY MSG   ' NO MEMBERS EXIST'
MSGRANGE MSG   ' INVALID RANGE'
MSGNODSP MSG   ' NO MEMBERS WITHIN RANGE'
MSGEXIST MSG   ' MEMBER CURRENTLY EXISTS'
MSGNONE  MSG   ' MEMBER NOT FOUND'
MSGGONE  MSG   ' SCRATCHED'
MSGRENAM MSG   ' RENAMED'
MSGATTRS MSG   'ATTRIBUTES FOR THIS MODULE ARE:'
MSGNREAL MSG   ' MODULE IS AN ALIAS, ALIAS NOT ASSIGNED'
MSGREAL  MSG   ' MODULE IS ALIAS FOR '
MSGOTHER MSG   'ALIASES FOR THIS MODULE ARE:'
MSGNOMOD MSG   ' MODULE IS ALIAS BUT REAL MODULE DOES NOT EXIST'
NONEMSG  MSG   ' NONE'
MSGNOESD MSG   ' MODULE HAS NO EXTERNAL SYMBOLS'
MSGAMBIG MSG   ' AMBIGUOUS OPTION'
MSGALIAS MSG   ' ALIAS ASSIGNED'
MSGENTRY MSG   ' ENTRY POINT AT '
MSGLEN   MSG   ' MODULE LENGTH  '
MSGHIST1 MSG   'HISTORY SUMMARY FOR MODULE '
MSGHISTD MSG   'LAST LINK-EDITED ON'
MSGHISTZ MSG   'IMASPZAP UPDATE HISTORY BY CSECT -'
MSGHISTU MSG   'USER-SUPPLIED UPDATE HISTORY BY CSECT -'
MSGHISTP MSG   'PROCESSOR SUPPLIED HISTORY BY CSECT -'
MSGNHIST MSG   ' NO HISTORY AVAILABLE'
MSGUNKN  MSG   ' INVALID OPTION'
MSGENTER MSG   ' ENTER OPTION'
MSGRETRY MSG   ' RE-ENTER DATA SET NAME'
MSGINVLD EQU   MSGUNKN
MSGNOTS  MSG   ' LINKPACK MAP SUPPORTED ONLY UNDER MVS'
MSGSTOR  MSG   ' INSUFFICIENT STORAGE TO PROCESS COMMAND'
MSGCMDER MSG   ' COMMAND SYSTEM ERROR'
MSG4     MSG   'SYSTEM ERROR'
MSG1     DC    C' DATA SET '
MSG3     DC    C' NOT ALLOCATED, '
MSGERR   DC    C' WAS IN ERROR'
MSGCAL1  DC    C' ENDED WITH CONDITION CODE='
MSGCAL2  DC    C' ABENDED WITH ERROR CODE '
MSGPARSE DC    C' PARSE ERROR CODE '
MSGSUB   DC    C' SUBCOMMAND '
MSGNF    DC    C' NOT SUPPORTED'
MSGFULL  MSG   'TOO MANY DATA SETS'
         AIF   (NOT &PDSDAIR).PDSND3
MSGDYNER MSG   ' DYNAMIC ALLOCATION ERROR CODE '
MSGVOL   MSG   ' REQUIRED VOLUME NOT MOUNTED'
MSGNOCAT MSG   ' DATA SET NOT CATALOGED'
MSGINDEX MSG   ' INCONSISTENT CATALOG STRUCTURE'
MSGCATER MSG   ' CATALOG ERROR CODE '
MSGSYNTX MSG   ' INVALID SYNTAX IN DATA SET NAME'
MSGDSFMT MSG   ' DATA SET NAME ALREADY EXISTS AT A LOWER LEVEL'
MSGDSN   MSG   ' AN INDEX OF THE DATA SET NAME EXCEEDS 8 CHARACTERS'
MSGFULL1 MSG   ' FREE DATA SETS NO LONGER REQUIRED'
MSG20C   MSG   'DATA SET IN USE'
MSG20CX  MSG   ' DATA SET IN USE BY ANOTHER USER OR A BACKGROUND JOB'
MSG210   EQU   MSG20C
MSG210X  EQU   MSG20CX
MSG214   MSG   'VOLUME NOT AVAILABLE'
MSG214X  MSG   ' VOLUME CAN NOT BE MOUNTED'
MSG218   EQU   MSG214
MSG218X  EQU   MSG214X
MSG21C   EQU   MSG214
MSG21CX  MSG   ' USER ATTRIBUTES INCORRECT'
MSG334   MSG   'NAME EXCEEDS 44 CHARACTERS'
MSG41CX  MSG   ' DATA SET ON MORE THAN ONE VOLUME'
MSG6708  MSG   'DATA SET NOT ON VOLUME'
.PDSND3  ANOP
         SPACE 3
PATCH    DC    10F'0'
         EJECT
*
*        DYNAMIC WORK AREA
*
         SPACE 3
WORKAREA DSECT
MAINSAVE DS    18A
CMDSAVE  DS    18A
VALSAVE  DS    18A
ATTNSAVE DS    18A
PARSELST DS    7A                       AREA FOR PARSE PARM LIST
ADDRSAVE DS    A                        ADDR OF FIRST SAVE AREA
         SPACE
STAEREGS DS    16A
STAESAVE DS    18A
R14SAVE  DS    A
R14PARSE DS    A
R14ATTN  DS    A
R14ALLOC DS    A
R14LINK  DS    A
R14PUTL  DS    A
R14GETL  DS    A
R14PTGT  DS    A
         SPACE
BASES    DS    3A             PROGRAM BASE ADDRESSES
         SPACE
ADDRUPT  DS    A
ADDRECT  DS    A
ADDRPSCB DS    A
ADDRCBUF DS    A
         SPACE
ADDRPCL  DS    A              ADDR OF PCL FOR PARSE
ADDRPUTL DS    A              ADDR OF IKJPUTL
ADDRGETL DS    A              ADDR OF IKJGETL
ADDRPTGT DS    A              ADDR OF IKJPTGT
ADDRSCAN DS    A              ADDR OF IKJSCAN
ADDREFF  DS    A              ADDR OF IKJEFF18
         SPACE
ADDRPDL  DS    A
ADDRCMD  DS    A
OPENLIST DS    2A
         SPACE 2
ATTNECB  DS    F
         SPACE
ESDPTR   DS    A              ADDRESS OF ESD DATA CHAIN
ESDLENG  DS    A              LENGTH OF ACQUIRED ESD CORE
ESDMAXL  DS    A              MAXIMUM USED LENGTH OF ESD CORE
         SPACE
IDRPTR   DS    A              ADDRESS OF IDR DATA CHAIN
IDRBBUF  DS    A              ADDRESS OF IDR STAGING BUFFER
IDRBUF   DS    A              NEXT AVAILABLE IDR STAGING BUFFER ADDR
IDRSTYP  DS    X              IDR TYPE OF PREV (OR LAST) RECORD
         SPACE
SCRCHAIN DS    A              ADDRESS OF SCRATCH CHAIN
         SPACE
SCTRPTR  DS    A              ADDRESS OF SCTR DATA
SCTRLENG DS    A              LENGTH OF ACQUIRED SCTR CORE
SCTRSCTT DS    A              ADDRESS OF SCTR TABLE
SCTRLENT DS    A              ADDRESS OF SCTR LENGTH TABLE
SCTRADRT DS    A              ADDRESS OF SCTR ADDRESS TABLE
SCTRRELT DS    A              ADDRESS OF SCTR RELOCATION TABLE
         SPACE
PACKADDR DS    A              ADDRESS OF LINKPACK COPY AREA
PACKLENG DS    A              LENGTH OF LINKPACK COPY AREA
PACKMAX  DS    A              ADDRESS OF END OF LINKPACK COPY AREA
         SPACE
STAXLIST DS    5A
PARMLIST DS    10A
GETLPARM DS    10A
PUTLPARM DS    10A
PTGTPARM DS    10A
SCANANSR DS    XL8
BUFFADDR DS    A
BUFFSIZE DS    H
LRECL    DS    H
LISTCOL  DS    H
LISTCOLL DS    H
ATTRYES  DS    XL2
ATTRNO   DS    XL2
         SPACE 2
LINESIZE DS    H
LMEMBER1 DS    H
LMEMBER2 DS    H
         SPACE 2
TOTBLOCK DS    H
TOTUSED  DS    H
TOTMEMR  DS    H
TOTMEMA  DS    H
DSNTOTAL DS    H
DSNEMPTY DS    H
DSNEXTNT DS    H
         SPACE
MEMBERS  DS    0X
MEMBER1  DS    CL8            FIRST MEMBER NAME
MEMBER2  DS    CL8            SECOND MEMBER NAME
         SPACE
SAVETTR  DS    XL3,X
LKEDDATE DS    XL3
         SPACE 2
VOLUME   DS    CL8
         SPACE
DOUBLE   DS    D
         SPACE
STAEPARM STAE  0,CT,MF=L
         SPACE
FLAGS    DS    XL4            GENERAL STATUS FLAGS
*        FLAGS AT BYTE 0
FOPTIONS EQU   X'80'          OPTIONS PRESENT WITH COMMAND
FCMD     EQU   X'40'          SUBCOMMAND BUFFER AVAILABLE
FNULL    EQU   X'20'          NULL LINE ENTERED
FMEMBER1 EQU   X'10'          FIRST MEMBER FLAG
FMEMBER2 EQU   X'08'          SECOND MEMBER FLAG
FLOADMOD EQU   X'04'          DATA SET IN LOAD MODULE FORMAT
FRESTART EQU   X'02'          RESTART W/ NEW DATA SET
FATTR    EQU   X'01'          CHANGE ATTRIBUTES REQUEST
*        FLAGS AT BYTE 1
F1STREAD EQU   X'80'          INITIAL ENTRY TO READ SUBROUTINE
FLINESET EQU   X'40'          OUTPUT LINE IN PROGRESS
FEXIST   EQU   X'20'          MEMBERS EXIST IN DATA SET
FRANGE   EQU   X'10'          MEMBERS EXIST IN DISPLAY RANGE
FIDR     EQU   X'40'          IDR RECORDS EXIST
F1IDR    EQU   X'20'          IDR TITLE PROCESSED
FALLESD  EQU   X'08'          REQUEST ALL ESD ENTRIES
FNORETRY EQU   X'04'          NO ALLOCATION RETRY ALLOWED
FQUOTE   EQU   X'02'          DATA SET NAME IS QUOTED
FATTN    EQU   X'01'          INTERRUPTIONS ALLOWED
*        FLAGS AT BYTE 2
FREALMOD EQU   X'80'          TRUE MODULE NAME SPECIFIED
FPERMDS  EQU   X'40'          DATA SET IS PERMANENTLY ALLOCATED
FDIRSCAN EQU   X'20'          SCAN DIRECTORY STATUS
FDIREND  EQU   X'10'          LAST USED BLOCK ENCOUNTERED
FMODE    EQU   X'08'          MODE MESSAGE ISSUED
FSORTESD EQU   X'04'          SORT ESD BY ADDRESS
FPACKM   EQU   X'02'          SORT PACKLIST BY MODULE NAME
FERROR   EQU   X'01'          ERROR STATUS IN SCRATCH PROCESSOR
*        FLAGS AT BYTE 3
FLAGAC   EQU   X'80'          AUTH CODE ON MODULE
FLAGVS   EQU   X'40'          VS LINKEDITOR PROCESSED MODULE
FLAGSSI  EQU   X'20'          SSI FOR MODULE
FLAGSCTR EQU   X'10'          MODULE IN SCTR FORMAT
FDIRECT  EQU   X'08'          DISPLAY ALL OF DIRECTORY ENTRY (DISPLAY)
FSECOND  EQU   X'04'          SECOND LEVEL MESSAGE CHAIN DELETED
*        EQU   X'02'
FLAGALI  EQU   X'01'          MODULE IS RENT, OR REUS ALIAS
         SPACE 2
FLAG2    DS    XL4            GENERAL STATUS FLAGS
*        FLAG2 AT BYTE 0
FAUTHR   EQU   X'80'          OPTIONS PRESENT WITH COMMAND
         SPACE 2
DDNAME   DS    CL8
DDNAME1  DS    CL8
PASSWORD DS    CL8
*        THIS IS THE AREA USED FOR ATTACHING COMMANDS
         CNOP  6,8
ATTDDNL  DS    H
         DS    3D             THE AREA  FOR CONTAINING DDNAMES
ATTDDN1  DS    4D             THE AREA  FOR DDNAME1 (SYSLIB)
ATTDDN2  DS    D              THE AREA  FOR DDNAME2 (SYSUT1)
ATTDDN3  DS    D              THE AREA  FOR DDNAME3 (SYSUT2)
         SPACE
         CNOP  2,4
ATTPARML DS    H,CL100        THE AREA  FOR CONTAINING PARM INFO
         SPACE
ATTECB   DS    F
ATTTCB   DS    F
         SPACE
ATTLIST  ATTACH SF=L
         SPACE
ECBLIST  DS    2F
         SPACE
DSNLEN   DS    H
DSNAME   DS    CL44
         ORG   DSNAME
JFCB     DS    XL176                    AREA FOR JFCB
         ORG
         SPACE 2
         DS    0D
DSCB     DS    XL148                    AREA FOR OBTAIN WORKAREA/DSCB
         ORG   DSCB
DAIRBLK  DS    25D            SPACE FOR DAIR PARAMETER LIST
LDAIRBLK EQU   *-DAIRBLK
         ORG
         SPACE 2
CAMLST   CAMLST SEARCH,0,0,0
         SPACE
         DS    0F
MODEMSG  DS    2Y
         DS    C
MODECMD  DS    CL8
         SPACE
         DS    0F
MSGTEXT1 DS    XL124
MSGTEXT2 DS    XL124
         SPACE
         ORG   MSGTEXT1
DAYTABLE DS    XL12
         ORG
         SPACE 2
PUTOLD1  DS    3F
PUTOLD2  DS    3F
         SPACE 2
STOWFDAD DS    D
INDCB    DCB   DSORG=PO,MACRF=(R,W),DDNAME=X
STOWDCB  DCB   DSORG=PO,MACRF=(R,W),DDNAME=X
EXLSTX   DS    A
         SPACE 2
SAVDIR   DS    XL33           SAVE AREA FOR THE DIRECTORY ENTRY
SAVALI   DS    XL11           SAVE AREA FOR THE ALIAS ENTRY
SAVSSI   DS    XL4            SAVE AREA FOR THE SSI ENTRY
SAVAC    DS    XL2            SAVE AREA FOR THE AC ENTRY
         DS    0F
BLDLLIST DS    XL4
MEMNAME  DS    0CL8
DIRNAME  DS    CL8
DIRTTR   DS    XL3
DIRFLAG  DS    X
DIRUSER  DS    XL62
         ORG   DIRUSER
*        THE FOLLOWING FIELDS APPLY TO LOAD MODULES
DIRSTART DS    XL4            TTR OF FIRST TEXT BLOCK
DIRNOTE  DS    XL3            TTR OF NOTE LIST
DIRNOTE# DS    X
DIRATTR  DS    XL2
DIRCORE  DS    XL3            SIZE OF LOAD MODULE
DIRTEXTL DS    XL2            LENGTH OF 1ST TEXT RECORD
DIRENTRY DS    XL3            ENTRY POINT ADDRESS
DIRORIGN DS    XL3
*        THE PREVIOUS DS'S ARE FOR THE STANDARD DIR ENTRY
DIRSCTRL DS    XL2            LENGTH OF SCTR LIST
DIRTRANL DS    XL2            LENGTH OF TRAN LIST
DIRESDFI DS    XL2            ESDID OF FIRST TEXT BLOCK
DIRESDEN DS    XL2            ESDID OF ENTRY POINT
DIRSCTR  EQU   *-DIRSCTRL     LENGTH OF THE SCTR ENTRY
*        THE PREVIOUS DS'S ARE FOR THE SCTR ATTRIBUTE
DIREP    DS    XL3            ENTRY POINT (REAL MEMBER)
DIRREAL  DS    CL8            REAL NAME OF MEMBER
DIRALIL  EQU   *-DIREP        LENGTH OF THE ALIAS ENTRY
*        THE PREVIOUS DS'S ARE FOR THE ALIAS ATTRIBUTE
DIRSSI   DS    XL4            SSI OF MODULE
DIRSSIL  EQU   *-DIRSSI       LENGTH OF THE SSI ENTRY
*        THE PREVIOUS DS'S ARE FOR THE SSI ATTRIBUTE
DIRAC    DS    XL2            AUTHORIZATION CODE OF MODULE
DIRACL   EQU   *-DIRAC        LENGTH OF THE AC ENTRY
*        THE PREVIOUS DS'S ARE FOR THE AC ATTRIBUTE
*
*        THE ABOVE VALUES ARE NECESSARILY RELOCATED BECAUSE
*        THE DIRECTORY BLOCK IS MADE UP OF OVERLAYS
DIREND   EQU   *
         ORG
         SPACE 2
         DS    0D
         SPACE 2
CCWS     DS    7D
LCCWS    EQU   *-CCWS
         SPACE
IOECB    DS    F
IOB      DS    0F
IOBFLAG  DS    X'42000000'
IOBECB   DS    A(IOECB)
         DS    X
IOBCSW   DS    XL7
IOBCCW   DS    A(CCWS)
IOBDCB   DS    A(INDCB)
         DS    2F
MBBCCHHR DS    XL3
IOBSEEK  DS    XL5
         DS    4F
LIOB     EQU   *-IOB
         SPACE 2
DIRPTRS  DS    3F
*        NOTE - THE SAME BUFFER CAN BE USED TO
*        CONTAIN A PDS DIRECTORY BLOCK OR AN IDR OR
*        CESD RECORD FROM A LOAD MODULE
IDRBUFF  DS    0XL256
ESDBUFF  DS    0XL256
DIRBLOCK DS    XL256
         SPACE 5
LENWORK  EQU   *-WORKAREA
         PRINT GEN
         EJECT
*
*
*        LPDE TABLE FORMAT
*
*
         SPACE 2
LPDE     DSECT
LPDECHN  DS    A              ADDRESS OF NEXT LPDE IN CHAIN
LPDERBP  DS    A              RESERVED
LPDENAME DS    CL8            EITHER MODULE NAME OR ALIAS NAME
LPDENTP  DS    A              ENTRY POINT ADDRESS
LPDEXLP  DS    A              RESERVED
LPDEUSE  DS    H              COUNT FIELD - COUT EQUALS ONE
LPDERES1 DS    H              RESERVED FOR FUTURE USE
LPDEATTR DS    X              ATTRIBUTES FLAGS
LPDENIP  EQU   X'80'          MODULE LOADED BY NIP
LPDEREN  EQU   X'20'          MODULE IS REENTERABLE
LPDESER  EQU   X'10'          MODULE IS SERIALLY REUSABLE
LPDEMIN  EQU   X'04'          THIS IS MINOR LPDE
LPDENLR  EQU   X'01'          NOT LOADABLE ONLY
LPDEATT2 DS    X              SECOND ATTRIBUTE FLAG
LPDEXLE  EQU   X'20'          EXTENT LIST BUILT - MAIN STORAGE STORAGE
LPDERLC  EQU   X'10'          LPDE CONTAINS A RELOCATED ALIAS ENTRY
LPDESYSL EQU   X'02'          AUTHORIZED LIBRARY MODULE
LPDEAUTH EQU   X'01'          PROGRAM AUTHORIZATION FLAG
LPDEATT3 DS    XL2            RESERVED
LPDEMJNM DS    CL8            MAJOR LPDE ENTRY POINT NAME IF LPDEMIN=1
         ORG   LPDEMJNM
LPDEXTLN DS    A              LENGTH OF MAIN STORAGE BLOCK FOR MODULE
LPDEXTAD DS    A              ADDRESS OF MAIN STORAGE BLOCK FOR MODULE
LPDENXT  EQU   *              ADDRESS OF MAIN STORAGE BLOCK FOR MODULE
         EJECT
*
*
*        LPCE TABLE FORMAT
*
*
         SPACE 2
LPCE     DSECT
LPCENAME DS    CL8            EITHER MODULE NAME OR ALIAS NAME
LPCENTP  DS    A              ENTRY POINT ADDRESS
LPCEXLP  DS    A              RESERVED
LPCEUSE  DS    H              COUNT FIELD - COUNT EQUALS ONE
LPCERES1 DS    H              RESERVED FOR FUTURE USE
LPCEATTR DS    X              ATTRIBUTES FLAGS
LPCENIP  EQU   X'80'          MODULE LOADED BY NIP
LPCEREN  EQU   X'20'          MODULE IS REENTERABLE
LPCESER  EQU   X'10'          MODULE IS SERIALLY REUSABLE
LPCEMIN  EQU   X'04'          THIS IS MINOR LPCE
LPCENLR  EQU   X'01'          NOT LOADABLE ONLY
LPCEATT2 DS    X              SECOND ATTRIBUTE FLAG
LPCEXLE  EQU   X'20'          EXTENT LIST BUILT - MAIN STORAGE STORAGE
LPCERLC  EQU   X'10'          LPCE CONTAINS A RELOCATED ALIAS ENTRY
LPCESYSL EQU   X'02'          AUTHORIZED LIBRARY MODULE
LPCEAUTH EQU   X'01'          PROGRAM AUTHORIZATION FLAG
LPCEATT3 DS    XL2            RESERVED
LPCEMJNM DS    CL8            MAJOR LPCE ENTRY POINT NAME IF LPCEMIN=1
         ORG   LPCEMJNM
LPCEXTLN DS    A              LENGTH OF MAIN STORAGE BLOCK FOR MODULE
LPCEXTAD DS    A              ADDRESS OF MAIN STORAGE BLOCK FOR MODULE
LPCENXT  EQU   *              ADDRESS OF NEXT LPCE
LENLPCE  EQU   *-LPCE         LENGTH OF LPCE
         EJECT
*
*
*        ESD TABLE FORMAT
*
*
         SPACE 2
ESDENTRY DSECT
ESDNAME  DS    CL8            NAME OF EXTERNAL SYMBOL
ESDTYPE  DS    X              ESD TYPE
CODESD   EQU   X'00'          ENTERNAL DEFINATION
CODELR   EQU   X'03'          EXTERNAL REFERENCE
CODENULL EQU   X'07'          NULL ENTRY
CODESEG  EQU   X'14'          OVERLAY SEGMENT TABLE
CODEPC   EQU   X'04'          PRIVATE CODE DEFINITION
CODEENTB EQU   CODESEG        OVERLAY ENTRY TABLE
ESDADDR  DS    XL3            RELATIVE OFFSET
ESDSEG#  DS    X              SEGMENT NUMBER
ESDLEN   DS    XL3            LENGTH OF SD ENTRY
LENESD1  EQU   *-ESDNAME      LENGTH OF ESD DATA
ESDNXT   EQU   *              RELATIVE ESD ID #
LENESD2  EQU   *-ESDNAME      LENGTH OF ESD DATA
LENESD   EQU   *-ESDENTRY     LENGTH OF ENTRY
         EJECT
*
*
*        IDR TABLE FORMAT
*
*
         SPACE 2
IDRENTRY DSECT
IDRLINK  DS    A
IDRSTART EQU   *
IDRESDID DS    XL2
IDRTYPE  DS    X
IDRZAP   EQU   X'01'
IDRLKED  EQU   X'02'
IDRPROC  EQU   X'04'
IDRUSER  EQU   X'08'
IDRDATE  DS    XL3
IDRLDATA DS    X
IDRZDATA DS    0CL8
IDRDATA  DS    CL40
LENIDR1  EQU   *-IDRSTART
LENIDR   EQU   *-IDRENTRY
         EJECT
         IKJPPL
         EJECT
         IKJTAIE
         EJECT
         IKJIOPL
IOPLEND  DS    0F
         EJECT
         IKJPSCB
         EJECT
         IKJECT
         EJECT
         IKJTPL
         EJECT
         IKJCPPL
         EJECT
         IKJCSPL
         EJECT
         IKJCSOA
         EJECT
         IKJPGPB
         EJECT
         IKJGTPB
         EJECT
         IKJDAPL
         EJECT
         IKJDAP00
         EJECT
         IKJDAP04
         EJECT
         IKJDAP08
         EJECT
         IKJDAP0C
DA0CDDN  DS    XL8 START OF DDNAME LIST
         EJECT
         IKJDAP10
         EJECT
         IKJDAP14
         EJECT
         IKJDAP18
         EJECT
         IKJDAP1C
         EJECT
         IKJDAP24
         EJECT
         IKJDAP28
         EJECT
         IKJDAP2C
         EJECT
         IKJDAP30
         EJECT
         PRINT NOGEN
         IHASDWA            FOR THE ESTAI ROUTINE
         PRINT GEN
         EJECT
         PRINT NOGEN
         DCBD  DSORG=PO
         PRINT GEN
         EJECT                                                   ACF 20
         ACUCB                         , ACF USER CONTROL BLK    ACF 20
         EJECT
         ACCVT                         , ACF CVT
         EJECT
         LIDREC                        , ACF LOGON ID RECORD
         EJECT
         IHAPSA                        , PSA- LOW, FIXED STORAGE
         EJECT
         IHAASCB                       , ASCB
         EJECT
         ACFASVT                       , ACF ADDRESS VECTOR TABLE
         END
