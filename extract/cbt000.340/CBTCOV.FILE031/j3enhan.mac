.chapter 'Extensions to IBM Code'
.pp
This chapter describes the extensions made to the standard IBM code,
such as new commands, parameters, DSP's, subprograms, exits, etc.
.pa
.section 'Date Conversion Routine'
.pp
This modification converts binary time to decimal (hh.mm.ss) or
julian date to gregorian date and places the result in a caller
provided ares.
.point begin
Processing Description
.point 2
Every year divisible by 4 is considered a leap year.
.point
Time and Date are assume to be 4 bytes
.point
Time is of the form hhmmssth binary on entry
.point
Date is of the form 00yydddF packed on entry
.point 1
Register Usage
.point 2
R0 - Addr of receiving field on entry.
.point
R1 - Time or Date to be converted on entry
.point 3
If time then hi-order bit must be on.
.point 1
Return format
.point 2
If bit 1 is on convert the date to mm/dd/yy
.point
If bit 1 is off then convert the time to hh.mm.ss
.point end
Examples:
.fignum convdate
.figbegin
.boxon
    Time --   LA   R1,TIME
              ICM  R1,8,=AL1(80)
              LA   R0,OUTFIELD
              ACALL ENTER=CONVDATE

    Date --   LA   R1,DATE
              LA   R0,OUTFIELD
              ACALL ENTER=CONVDATE
.boxoff
.figure convdate 'CONVDATE Example'
.figend
.fo on
.pa
.section 'DC Extensions'
.subsection 'WHERE Option'
.pp
This option will display the module name in which an address resides.
.pp
The syntax is:
.in +15
*S DC,C=xxxxxx,WHERE
.br
or
.br
*S DC,C=xxxxxx,BASE=yyyy,WHERE
.in -15
.sp 2
The response is:
.sp 2
.in +5
RAT0003 MODULE=module name BASE=base addr DISPLACEMENT=offset
.pa
.pp
.subsection 'Display Format Options'
This option allows storage to be displayed in Hexidecimal, EBCDIC or
both.  Hex is the default and is no different than the standard DC
display.
EBCDIC will display storage in EBCIDC only.  BOTH will display storage
in both EBCDIC and Hex.
.sp 2
.pp
The syntax is:
.sp 2
.in +15
*S DC,C=xxxxxx,BASE=yyyy,M=option
.in -15
.sp
.fo off
Where option = H for Hex (default)
               E for EBCIDC
               B for Both Hex and EBCDIC
.fo on
.pa
.Section 'Rockwell File Build'
.Subsection 'RFOPEN'
.pp
RFOPEN is the JES3 macro instruction to open, read and sort an OS
dataset and place it into an instorage table within the JES3 address
space.
.Fignum RFOPEN
.Figbegin
.Boxon
 RFOPEN DDNAME= R1
                address ,

        SIZE=   R0
                nnn ,

        LENGTH= R2
                nnn ,

        DISP=   R3
                nnn ,

        BUSY=   address ,

        NORMAL= address
.Boxoff
.Figure RFOPEN 'RFOPEN macro '
.Figend
.Fo off

.us  Parameter    Subparameter    Explanation
 DDNAME=      (R1)            Specifies the address of the 8 byte
              address         field containing the DDNAME of the
                              data set desired.

 SIZE=        (R0)            Specifies the length of each record
              nnnn            in the data set.

 LENGTH=      (R2) (note 1)   Specifies the length of the record
              nnnn            sort key (if the file is to be sorted).

 DISP=        (R3) (note 1)   Specifies the displacement into
              nnnn            the record of the sort key
                              (if the file is to be sorted).

 BUSY=        address         Specifies the address to which the
                              routine returns if the incore table
                              is not available.

 NORMAL=      address
.Sp 2
.Fo on
Normal return: Upon return register 1 contains the address of(#RFB)
               the file control block.
.Sp
Restrictions:  The contents of R0, R1, R14 and R15 are always
               destroyed. The contents of R2 and R3 will also be
               destroyed if the file is to be sorted.
.Sp
Example:       In the following example the file is to be sorted.
.Fignum rfopene
.Figbegin
.Boxon
           RFOPEN DDN=ABC,DISP=1,LENGTH=8,SIZE=24
               (DISP=1 points to the first character of the file.)

               In the following example the file is not to be sorted.
           .....
           RFOPEN DDN=ABC,SIZE=24
           .....
 ABC       DC     CL8'ABC'
.Boxoff
.Figure rfopene 'RFOPEN Examples'
.Figend
.Sp
Note1:         If the file is to be sorted (used for binary search),
               LENGTH and DISP parameters must be specified.
.Sp
Note2:         If the file already exits in the JES3 address space
               the only effect of an RFOPEN is to add one to the use
               count and return a #RFB pointer in register 1.
.Sp
Note3:         Datasets must have record format F, FB or FBS.
.Fo on
.pa
.Subsection 'RFSCAN'
.Pp
The RFSCAN macro instruction is used for a binary or serial
scan of a JES3 incore table.
.Fignum RFSCAN
.Figbegin
.Boxon
 RFSCAN RFB=    R1  ,

        Data=   R3
                address ,

        LENGTH= R2
                nnn ,

        DISP=   R0
                nnn ,

        Eod=    address ,

        NORMAL= address ,
.Boxoff
.Figure RFSCAN 'RFSCAN macro'
.Figend
.Sp
.us Parameter    Subparameter    Explanation
.br
RFB=         (R1) (note 1)   Specifies the address of the #RFB
             address         (file control block) to scan.
.Sp
data=        (R3)            Specifies the address of the data
             address         field name to scan on.
.Sp
LENGTH=      (R2)            Specifies the length of the data
             nnnn            field to scan on.
.Sp
DISP=        (R0)            Specifies the displacement into
             nnnn            the record of the data field.
.Sp
eod=         address         Specifies the address to which the
                             routine returns when the data field
                             requested is not found.
.Sp
NORMAL=      address
.Sp 2
Normal return: Upon return register 1 contines the address of the
               record containing the data field.

Restrictions:  The contents of R0, R1, R2, R3, R14 and R15 are
               always destroted.

Example:       In the following example the file is to be scan for
               RM146.
.fignum rfscanx
.figbegin
.boxon
 RFSCAN RFB=(R1),DISP=1,LENGTH=5,DATA=ABC,EOD=NOENTRY
     (DISP=1 points to the first character of the file.)
           .
           .
 NOENTRY   DS     0H
           .

 ABC       DC     CL5'RM146'
.boxoff
.figure rfscanx 'RFSCAN Example'
.figend
.sp

Note1:         The RFB pointer was returned in R1 from the RFOPEN
               macro instruction.
.fo on
.Page
.Subsection 'RFCLOSE'
RFCLOSE  close the JES3 incore table
.Sp
the RFCLOSE macro instruction is used to close the request of
a JES3 incore table search.
This instruction will also reduce the use count of the
table by 1.
.fignum rfclose
.figbegin
.boxon
RFCLOSE RFB= rx
        normal = address
.Sp
        RFB = (R1)      specifies the address of the #RFB
              address   (file control block) to close.
.Sp
        NORMAL=address  normal return for close
.boxoff
.figure rfclose 'RFCLOSE Macro'
.figend
restriction: the contents of R1, R14 and R15 are destroyed
.fignum rfclosex
.figbegin
.boxon
example:   close a file whose address is in register 1.
.Sp
           label RFCLOSE RFB=(R1)
.boxoff
.figure rfclosex 'RFCLOSE Example'
.figend
.fo on
.pa
.Section 'JES3 PRDMP Enhancements'
.pp
The JES3 exit routine is modified to produce output immediately when
a JES3 user control statement is encountered, rather than when a TCB is
processed.
.pp
The operands available on the JES3 control statement are expanded to
include the OPTION keyword as defined for the DC DSP.
The use of OPTION can substantially reduce the amount of output
from AMDPRDMP in a large system, and significantly improves the
usability under IPCS.
.pp
The format of the control statement for use with AMDPRDMP is:
.fignum jes3prdm
.figbegin
.boxon
JES3 × JES3 keyword,keyword,...  where keyword may be:
OFF × DEBUG × OPTION=xxx × OPTION=(xxx,xxx,...)
xxx may be: controlblock  ×  controlblock=ENTRY
.boxoff
.figure jes3prdm 'JES3 PRDMP Control Statement'
.figend
.sp
OFF causes an immediate exit (for compatibility).
.sp
DEBUG enables the program check snap code.
.fo on
.pp
If no keyword is given, the default is OPTION=DEF, a subset of the
control blocks.  See the documentation for the DC DSP for the other
permissible values for OPTION.
.pp
An attention exit is added to allow the user to abort output under IPCS.
.pa
.Section 'LOCATE Enhancements'
.pp
If the LOCATE subtask is busy on the JES3 Global processor, and the job
can run on another main,  then the job will go across the CTC to do the
LOCATE on that local processor.
.sp
This is a modification to module IATLVIN.
.pa
.Section 'Initialization Deck Tailoring'
.pp
The INITDECK is tailored to the correct processing mode by a
IATUX15 based upon the value passed in the parm field.
.pp
If the first character is F then all TRACK cards are changed to FORMAT
control cards.
.pp
The next parameter of the parm determines which control cards are
selected for processing by JES3 based upon the special character
in column 1 of the control card as follows:
.fignum initdeck
.figbegin
.boxon
?  -  Ignore unless there is no PARM
*  -  Comment
/  -  VM
;  -  SEC
:  -  TEST
%  -  PROD
.boxoff
.figure initdeck 'INITDECK Tailoring Control'
.figend
.fo on
.pa
.Section 'OUTPUT Limitations'
.pp
SYSOUT for both lines and cards are limited by counting the number of
bytes being written and by records for CRT output in IATDMEB.
.fignum outlim
.figbegin
.boxon
25,000,000 bytes of SYSOUT
5,000 blocks of CRT output
.boxoff
.figure outlim 'SYSOUT Limitations'
.figend
.fo on
.pa
.Section 'Write-to-Programmer'
.Point begin
Function.
.Br
This DSP enables the computer operator to issue messages to the JESMSG
data set of any job in the system.  The messages are also recorded in a
special data set (hereafter called the 'bucket') for operations use as
an audit trail of activity and/or problems.  In the event that the
JESMSG data set could not be accessed, the operator's message is flagged
with a minus sign (-) in the bucket as well as being printed on the
calling console as an error.  The operator may issue a write to
programmer to the DSP itself for comments purposes; in this case, the
message is marked with an asterisk (*) in the bucket.  If a message
cannot be written to the bucket, it will be printed on the calling
console as an error.  As an added function the operator can send MVS
commands to all connected mains
.Point
Operation.
.Point 2
After WTP is called, it AWAITs for a START, RESTART, or CANCEL command.
.Point
The START command initiates the search for the job's resqueue entry to
issue the JESMSG macro.  A record is then ABLOCKed into the multi-record
file of the bucket.
.Point
If the START command is for a SEND then the command is INTERCOM'd to all
connected mains.
.Point
A RESTART command causes WTP to print out on the calling console the
current list of messages queued in the bucket.  The messages are
retained for writing on the printer at a later time.
.Point
A CANCEL command triggers the spinoff of the bucket to the printer as
data set JES3.WTP.OUTPUT.
.Point 1
Command Formats:
.Point 2
*X WTP
.Point 3
invoke the DSP.  Any parameters on the call command are ignored.
.Point 2
*S WTP,J=nnnn,'text'
.Point 3
START the DSP.  Commas or blanks may be used as delimeters.  'J=' is a
keyword parameter denoting job number.  The job number need not have
leading zeros.  The 'text' (which is not enclosed in quotes) is the
message for the job.
.Point 2
*S WTP,S='MVS command'
.Point 3
Brodcast the MVS command to all connect mains.
.Point 2
*R WTP
.Point 3
RESTART the DSP.  This will cause the bucket data set to be printed on
the calling console without deleting the data set.  This command will
probably be used at shift change to ascertain current status of the
system.  After the bucket is written, WTP awaits the next command.
.Point 2
*C WTP
.Point 3
CANCEL the DSP.  The bucket data set will be spun off as
JES3.WTP.OUTPUT.
.pa
.Section 'Modify X Extension'
.Point begin
DELETE=F Option
.point
Function.
.Br
This option will clear the load count in the IATYJDE (JDEALDS) causing
a fresh module to be loaded.
.point
Syntax:
.br
*F X,M=module-name,DELETE/DEL=F
.point
Warning: Options DELETE=Y/N already exist.  Do not mistakenly enter
these options.
