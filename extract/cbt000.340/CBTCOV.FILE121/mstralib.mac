./ ADD  NAME=$ALLOC
         MACRO
&NAME    $ALLOC   &DSECT=NO,&CSECT=YES,&CONTDS=NO
*----------------------------------------------------------------------
*
*        BINARY ZEROS IN ANY FIELD WILL CAUSE THAT FIELD TO BE
*        IGNORED FOR THE ALLOCATION/DE-ALLOCATION
*
*        VALID PARAMETER FORMATS ARE SHOWN BELOW
*
*----------------------------------------------------------------------
         AIF   ('&DSECT' EQ 'YES').CHKCONT
&NAME    DS    0D
*    WORK AREA AND ERROR RETURN CODES
DYNWRK   DC    D'0'             DOUBLE WORD WORK AREA
DYNLEN   DC    AL1(DYNLL)       LENGTH OF THIS SECTION
DYNR15   DC    CL4' '           R15 FROM SVC99
DYNERR   DC    CL4' '           ERROR CODE
DYNINFO  DC    CL4' '           INFO CODE
*    DYNAMIC ALLOCATION PARAMETERS
DYNTYPE  DC    CL1' '    A=ALLOCATE D=DEALLOCATE C=CONCATENATE
DYNDDNM  DC    XL8'00'   CHAR - DDNAME
DYNDSN   DC    XL44'00'  CHAR - DSNAME
DYNMBR   DC    XL8'00'   CHAR - MEMBER
*
DYNDISP1 DC    XL1'00'   HEX  - DATA SET STATUS
DYNOLD   EQU   X'01'     OLD
DYNMOD   EQU   X'02'     MOD
DYNNEW   EQU   X'04'     NEW
DYNSHR   EQU   X'08'     SHR
*
DYNDISP2 DC    XL1'00'   HEX  - NORMAL DISPOSITION
DYNDISP3 DC    XL1'00'   HEX  - CONDITIONAL DISPOSTION
DYNUNCAT EQU   X'01'     UNCATLG
DYNCAT   EQU   X'02'     CATLG
DYNDEL   EQU   X'04'     DELETE
DYNKEEP  EQU   X'08'     KEEP
*
DYNBTC   DC    XL3'00'   CHAR - 'BLK'   'TRK'   'CYL'   ALLOCATION
*
DYNPRIM  DC    XL3'00'   HEX  - PRIMARY ALLOCATION IN ABOVE UNITS
DYNSEC   DC    XL3'00'   HEX  - SECONDARY ALLOCATION IN ABOVE UNITS
DYNDIR   DC    XL3'00'   HEX  - DIRECTORY BLOCKS
*
DYNRLSE  DC    XL1'00'   ANY  - RELEASE OPTION SELECTED IF NON-ZERO
DYNROUND DC    XL1'00'   ANY  - ROUND OPTION SELECTED IF NON-ZERO
*
DYNVOLSR DC    XL6'00'   CHAR - VOLSER
DYNUNIT  DC    XL8'00'   CHAR - UNIT NAME
*
DYNSYSOU DC    XL1'00'   CHAR - SYSOUT CLASS
DYNSPGNM DC    XL8'00'   CHAR - SYSOUT WRITER NAME
*
DYNFREE  DC    XL1'00'   ANY  - FREE=CLOSE SELECTED IF NON-ZERO
*
DYNTERM  DC    XL1'00'   ANY  - TSO TERMINAL ALLOCATION
*
DYNBLKSZ DC    XL2'00'   HEX  - BLKSIZE
DYNLRECL DC    XL2'00'   HEX  - LRECL
*
DYNRECFM DC    XL1'00'   HEX  - RECFM
DYNM     EQU   X'02'     M    - MACHINE CHARACTER
DYNA     EQU   X'04'     A    - ASA CHARACTER
DYNS     EQU   X'08'     S    - STANDARD OR SPANNED
DYNB     EQU   X'10'     B    - BLOCKED
DYNT     EQU   X'20'     D    - VARIABLE ASCII   T - TRACK OVERFLOW
DYNV     EQU   X'40'     V    - VARIABLE
DYNF     EQU   X'80'     F    - FIXED
DYNFB    EQU   X'90'     FB   - FIXED BLOCKED
DYNFBA   EQU   X'94'     FBA  - FIXED BLOCKED ASA
DYNVB    EQU   X'50'     VB   - VARIABLE BLOCKED
DYNVBA   EQU   X'54'     VBA  - VARIABLE BLOCKED
DYNVBS   EQU   X'58'     VBS  - VARIABLE BLOCKED SPANNED
DYNU     EQU   X'C0'     U    - UNDEFINED RECORDS
*
DYNDUMMY DC    XL1'00'   ANY  - DD DUMMY
DYNUNALC DC    XL1'00'   ANY  - DE-ALLOC EVEN IF PERM ATTRIBUTE IS ON
*
DYNDEST  DC    XL8'00'   CHAR - SYSOUT DESTINATION ID - R0 - R255
DYNFORM  DC    XL4'00'   CHAR - SYSOUT FORM ID
DYNCOPYS DC    XL1'00'   HEX  - NUMBER OF COPIES  01 - FF
DYNFCB   DC    XL4'00'   CHAR - FCB IMAGE NAME
*
DYNRTDD  DC    XL8'00'   ANY  - NON-ZERO IN BYTE 1 INDICATES DDNAME TO
*                               BE RETURNED, IT WILL BE RETURNED HERE
DYNEND   EQU   *
DYNEPA   DC    F'0'
DYNLL    EQU   DYNEND-DYNWRK    LENGTH OF THIS SECTION
         AGO   .DONE
.CHKCONT AIF   ('&CONTDS' EQ 'YES').DS
         DSECT
.DS      ANOP
&NAME    DS    0D
*    WORK AREA AND ERROR RETURN CODES
DYNWRK   DS    D                DOUBLE WORD WORK AREA
DYNLEN   DS    AL1              LENGTH OF THIS SECTION
DYNR15   DS    CL4              R15 FROM SVC99
DYNERR   DS    CL4              ERROR CODE
DYNINFO  DS    CL4              INFO CODE
*    DYNAMIC ALLOCATION PARAMETERS
DYNTYPE  DS    CL1       A=ALLOCATE D=DEALLOCATE
DYNDDNM  DS    XL8       CHAR - DDNAME
DYNDSN   DS    XL44      CHAR - DSNAME
DYNMBR   DS    XL8       CHAR - MEMBER
*
DYNDISP1 DS    XL1       HEX  - DATA SET STATUS
DYNOLD   EQU   X'01'     OLD
DYNMOD   EQU   X'02'     MOD
DYNNEW   EQU   X'04'     NEW
DYNSHR   EQU   X'08'     SHR
*
DYNDISP2 DS    XL1       HEX  - NORMAL DISPOSITION
DYNDISP3 DS    XL1       HEX  - CONDITIONAL DISPOSTION
DYNUNCAT EQU   X'01'     UNCATLG
DYNCAT   EQU   X'02'     CATLG
DYNDEL   EQU   X'04'     DELETE
DYNKEEP  EQU   X'08'     KEEP
*
DYNBTC   DS    XL3       CHAR - 'BLK'   'TRK'   'CYL'   ALLOCATION
*
DYNPRIM  DS    XL3       HEX  - PRIMARY ALLOCATION IN ABOVE UNITS
DYNSEC   DS    XL3       HEX  - SECONDARY ALLOCATION IN ABOVE UNITS
DYNDIR   DS    XL3       HEX  - DIRECTORY BLOCKS
*
DYNRLSE  DS    XL1       ANY  - RELEASE OPTION SELECTED IF NON-ZERO
DYNROUND DS    XL1       ANY  - ROUND OPTION SELECTED IF NON-ZERO
*
DYNVOLSR DS    XL6       CHAR - VOLSER
DYNUNIT  DS    XL8       CHAR - UNIT NAME
*
DYNSYSOU DS    XL1       CHAR - SYSOUT CLASS
DYNSPGNM DS    XL8       CHAR - SYSOUT WRITER NAME
*
DYNFREE  DS    XL1       ANY  - FREE=CLOSE SELECTED OF NON-ZERO
*
DYNTERM  DS    XL1       ANY  - TSO TERMINAL ALLOCATION
*
DYNBLKSZ DS    XL2       HEX  - BLKSIZE
DYNLRECL DS    XL2       HEX  - LRECL
*
DYNRECFM DS    XL1       HEX  - RECFM
DYNM     EQU   X'02'     M    - MACHINE CHARACTER
DYNA     EQU   X'04'     A    - ASA CHARACTER
DYNS     EQU   X'08'     S    - STANDARD OR SPANNED
DYNB     EQU   X'10'     B    - BLOCKED
DYNT     EQU   X'20'     D    - VARIABLE ASCII   T - TRACK OVERFLOW
DYNV     EQU   X'40'     V    - VARIABLE
DYNF     EQU   X'80'     F    - FIXED
DYNFB    EQU   X'90'     FB   - FIXED BLOCKED
DYNFBA   EQU   X'94'     FBA  - FIXED BLOCKED ASA
DYNVB    EQU   X'50'     VB   - VARIABLE BLOCKED
DYNVBA   EQU   X'54'     VBA  - VARIABLE BLOCKED
DYNVBS   EQU   X'58'     VBS  - VARIABLE BLOCKED SPANNED
DYNU     EQU   X'C0'     U    - UNDEFINED RECORDS
*
DYNDUMMY DS    XL1       ANY  - DD DUMMY
DYNUNALC DS    XL1       ANY  - DE-ALLOC EVEN IF PERM ATTRIBUTE IS ON
*
DYNDEST  DS    XL8       CHAR - SYSOUT DESTINATION ID - R0 - R255
DYNFORM  DS    XL4       CHAR - SYSOUT FORM ID
DYNCOPYS DS    XL1       HEX  - NUMBER OF COPIES  01 - FF
DYNFCB   DS    XL4       CHAR - FCB IMAGE NAME
*
DYNRTDD  DS    XL8       ANY  - NON-ZERO IN BYTE 1 INDICATES DDNAME TO
*                               BE RETURNED, IT WILL BE RETURNED HERE
DYNEND   EQU   *
DYNEPA   DS    F
DYNLL    EQU   DYNEND-DYNWRK    LENGTH OF THIS SECTION
         AIF   ('&CSECT' EQ 'NO').DONE
&SYSECT  CSECT
.DONE    ANOP
         MEND
./ ADD  NAME=$DASDLOG
         MACRO
&NAME    $DASDLOG &DSECT=NO,&CSECT=YES,&CONTDS=NO
*----------------------------------------------------------------------
*
*        RECORD LAYOUT FOR DASD SPACE REQUEST LOG
*
*----------------------------------------------------------------------
         AIF   ('&DSECT' EQ 'YES').CHKCONT
&NAME    EQU   *
*
*        GENERAL DATA OR DELETE REQUEST RECORD
*
DLSRCKEY DS    0CL47
DLREQTYP DC    C' '               REQUEST TYPE(A-ADD, C-CHG, OR D-DELT)
DLSEQNO  DC    CL2' '             SEQUENCE NUMBER
DLDSN    DC    CL44' '            DATA SET NAME
DLREQDTE DC    CL6' '             REQUEST DATE
DLCMPDTE DC    CL6' '             COMPLETE DATE
DLDSTYPE DC    CL4' '             REQUEST DATA SET TYPE
DLREQER  DC    CL30' '            REQUESTER
DLNXTSEQ DC    PL2'0'             NEXT SEQUENCE NUMBER
DLDELGH  EQU   *-&NAME            LENGTH OF DELETE RECORD
*              *                              *              *
*              * SPACE ALLOCATION INFORMATION *              *
*              *                              *              *
DLALLTYP DC    CL4' '             ALLOCATE TYPE(BLKS, TRKS, OR CYLS)
DLALLPRI DC    PL4'0'             PRIMARY ALLOCATION
DLALLSEC DC    PL4'0'             SECONDARY ALLOCATION
*
*        DATA RELATE TO NON-VSAM ADD REQUEST
*
*              *                              *              *
*              *        USER INPUT DATA       *              *
*              *                              *              *
DLRECNO  DC    PL4'0'             NUMBER OF RECORDS
DLRECLGH DC    PL3'0'             RECORD LENGTH
DLDIRBLK DC    PL2'0'             DIRECTORY BLOCK(PDS ONLY)
DLBLKSZ  DC    PL3'0'             BLKSIZE
DLNVLGH  EQU   *-&NAME            LENGTH OF NON-VSAM ADD RECORD
         ORG   DLRECLGH
*
*        DATA RELATE TO VSAM ADD REQUEST
*
*              *                              *              *
*              *        USER INPUT DATA       *              *
*              *                              *              *
DLAVGLGH DC    PL3'0'             AVERAGE LRECL
DLMAXLGH DC    PL3'0'             MAXIMUM LRECL
DLSHROPT DC    CL3' '             SHR OPTION
DLBKGDG# DC    PL2'0'             BACKUP GDG NUMBER
DLDACISZ DC    PL3'0'             DATA PORTION CI SIZE
DLCLTYPE DC    CL4' '             CLUSTER TYPE(KSDS, ESDS, OR RBA)
*              *                              *              *
*              *       KSDS REQUIRED DATA     *              *
*              *                              *              *
DLRKP    DC    PL3'0'             RELATIVE KEY POSITION
DLKEYLGH DC    PL3'0'             KEY LENGTH
DLPCI    DC    PL2'0'             CI PERCENT FREE SPACE
DLPCA    DC    PL2'0'             CA PERCENT FREE SPACE
DLIXCISZ DC    PL3'0'             INDEX PORTION CI SIZE
*              *                              *              *
*              *       MODEL CLUSTER NAME     *              *
*              *                              *              *
DLMODLNM DC    CL44' '            MODEL CLUSTER NAME(OPTIONAL)
DLVLGH   EQU   *-&NAME            LENGTH OF VSAM ADD RECORD
         ORG   DLALLTYP
*
*        DATA RELATE TO CHANGE(EXPAND) REQUEST
*
DLREQCH1 DC    CL79' '            CHANGE(EXPAND) REQUEST DATA 1
DLREQCH2 DC    CL79' '            CHANGE(EXPAND) REQUEST DATA 2
DLREQCH3 DC    CL79' '            CHANGE(EXPAND) REQUEST DATA 3
DLREQCH4 DC    CL79' '            CHANGE(EXPAND) REQUEST DATA 4
DLCHGLGH EQU   *-&NAME            LENGTH OF CHANGE RECORD
         AGO   .DONE
.CHKCONT AIF   ('&CONTDS' EQ 'YES').DS
         DSECT
.DS      ANOP
&NAME    EQU   *
         AIF   ('&CSECT' EQ 'NO').DONE
*
*        GENERAL DATA OR DELETE REQUEST RECORD
*
DLSRCKEY DS    0CL47
DLREQTYP DS    C                  REQUEST TYPE(A-ADD, C-CHG, OR D-DELT)
DLSEQNO  DS    CL2                SEQUENCE NUMBER
DLDSN    DS    CL44               DATA SET NAME
DLREQDTE DS    CL6                REQUEST DATE
DLCMPDTE DS    CL6                COMPLETE DATE
DLDSTYPE DS    CL4                REQUEST DATA SET TYPE
DLREQER  DS    CL30               REQUESTER
DLNXTSEQ DS    PL2                NEXT SEQUENCE NUMBER
DLDELGH  EQU   *-&NAME            LENGTH OF DELETE RECORD
*              *                              *              *
*              * SPACE ALLOCATION INFORMATION *              *
*              *                              *              *
DLALLTYP DS    CL4                ALLOCATE TYPE(BLKS, TRKS, OR CYLS)
DLALLPRI DS    PL4                PRIMARY ALLOCATION
DLALLSEC DS    PL4                SECONDARY ALLOCATION
*
*        DATA RELATE TO NON-VSAM ADD REQUEST
*
*              *                              *              *
*              *        USER INPUT DATA       *              *
*              *                              *              *
DLRECNO  DS    PL4                NUMBER OF RECORDS
DLRECLGH DS    PL3                RECORD LENGTH
DLDIRBLK DS    PL2                DIRECTORY BLOCK(PDS ONLY)
DLBLKSZ  DS    PL3                BLKSIZE
DLNVLGH  EQU   *-&NAME            LENGTH OF NON-VSAM ADD RECORD
         ORG   DLRECLGH
*
*        DATA RELATE TO VSAM ADD REQUEST
*
*              *                              *              *
*              *        USER INPUT DATA       *              *
*              *                              *              *
DLAVGLGH DS    PL3                AVERAGE LRECL
DLMAXLGH DS    PL3                MAXIMUM LRECL
DLSHROPT DS    CL3                SHR OPTION
DLBKGDG# DS    PL2                BACKUP GDG NUMBER
DLDACISZ DS    PL3                DATA PORTION CI SIZE
DLCLTYPE DS    CL4                CLUSTER TYPE(KSDS, ESDS, OR RBA)
*              *                              *              *
*              *       KSDS REQUIRED DATA     *              *
*              *                              *              *
DLRKP    DS    PL3                RELATIVE KEY POSITION
DLKEYLGH DS    PL3                KEY LENGTH
DLPCI    DS    PL2                CI PERCENT FREE SPACE
DLPCA    DS    PL2                CA PERCENT FREE SPACE
DLIXCISZ DS    PL3                INDEX PORTION CI SIZE
*              *                              *              *
*              *       MODEL CLUSTER NAME     *              *
*              *                              *              *
DLMODLNM DS    CL44               MODEL CLUSTER NAME(OPTIONAL)
DLVLGH   EQU   *-&NAME            LENGTH OF VSAM ADD RECORD
         ORG   DLALLTYP
*
*        DATA RELATE TO CHANGE(EXPAND) REQUEST
*
DLREQCH1 DS    CL79               CHANGE(EXPAND) REQUEST DATA 1
DLREQCH2 DS    CL79               CHANGE(EXPAND) REQUEST DATA 2
DLREQCH3 DS    CL79               CHANGE(EXPAND) REQUEST DATA 3
DLREQCH4 DS    CL79               CHANGE(EXPAND) REQUEST DATA 4
DLCHGLGH EQU   *-&NAME            LENGTH OF CHANGE RECORD
         AIF   ('&CSECT' EQ 'NO').DONE
&SYSECT  CSECT
.DONE    ANOP
         MEND
./ ADD  NAME=$EPILOG
         MACRO
&LABEL   $EPILOG &RC
         GBLC  &PROGM
&LABEL   LR    R1,R13              GET SAVEAREA ADDRESS
         L     R13,4(R13)          GET BACK CHAIN POINTER
         AIF   ('&PROGM' NE 'GETMAIN').NOFREE
         L     R0,16(R13)          GET SAVEAREA LENGTH
         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)
         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA
         AGO   .LM
.NOFREE  ANOP
         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)
.LM      ANOP
         LM    R14,R12,12(R13)     RESTORE CALLERS REGS
         AIF   (T'&RC EQ 'O').SPEC
         LA    R15,&RC             SET RETURN CODE
.SPEC    ANOP
         BR    R14                 RETURN TO CALLER
         MEND
./ ADD  NAME=$ISPCMDS
         MACRO
&NAME    $ISPCMDS &TABLES=NO,&FILES=NO
*----------------------------------------------------------------------
*
*----------------------------------------------------------------------
&NAME    DS    0D
SPFA     EQU   *
*        DISPLAY SERVICES
DISPLAY  DC    CL8'DISPLAY'
TBDISPL  DC    CL8'TBDISPL'
         AIF   ('&TABLES' EQ 'NO').NT
*        TABLE SERVICES - GENERAL
TBCREATE DC    CL8'TBCREATE'
TBOPEN   DC    CL8'TBOPEN'
TBQUERY  DC    CL8'TBQUERY'
TBSAVE   DC    CL8'TBSAVE'
TBCLOSE  DC    CL8'TBCLOSE'
TBEND    DC    CL8'TBEND'
TBERASE  DC    CL8'TBERASE'
*        TABLE SERVICES - ROW OPERATIONS
TBADD    DC    CL8'TBADD'
TBDELETE DC    CL8'TBDELETE'
TBGET    DC    CL8'TBGET'
TBPUT    DC    CL8'TBPUT'
TBMOD    DC    CL8'TBMOD'
TBEXIST  DC    CL8'TBEXIST'
TBSCAN   DC    CL8'TBSCAN'
TBSARG   DC    CL8'TBSARG'
TBTOP    DC    CL8'TBTOP'
TBBOTTOM DC    CL8'TBBOTTOM'
TBSKIP   DC    CL8'TBSKIP'
TBVCLEAR DC    CL8'TBVCLEAR'
.NT      ANOP
         AIF   ('&FILES' EQ 'NO').NF
*        FILE TAILORING SERVICES
FTOPEN   DC    CL8'FTOPEN'
FTINCL   DC    CL8'FTINCL'
FTCLOSE  DC    CL8'FTCLOSE'
FTERASE  DC    CL8'FTERASE'
.NF      ANOP
*        VARIABLE SERVICES
VGET     DC    CL8'VGET'
VPUT     DC    CL8'VPUT'
VDEFINE  DC    CL8'VDEFINE'
VDELETE  DC    CL8'VDELETE'
VCOPY    DC    CL8'VCOPY'
VREPLACE DC    CL8'VREPLACE'
VRESET   DC    CL8'VRESET'
*        OTHER SERVICES
SELECT   DC    CL8'SELECT'
CONTROL  DC    CL8'CONTROL'
BROWSE   DC    CL8'BROWSE'
EDIT     DC    CL8'EDIT'
LOG      DC    CL8'LOG'
*        FUNCTIONS/MODES
CANCEL   DC    CL8'CANCEL'
DISABLE  DC    CL8'DISABLE'
ENABLE   DC    CL8'ENABLE'
END      DC    CL8'END'
ENTER    DC    CL8'ENTER'
ERRORS   DC    CL8'ERRORS'
LINE     DC    CL8'LINE'
LOCATE   DC    CL8'LOCATE'
MOVE     DC    CL8'MOVE'
NEWCOPY  DC    CL8'NEWCOPY'
NOFT     DC    CL8'NOFT'
NONDISPL DC    CL8'NONDISPL'
NOWRITE  DC    CL8'NOWRITE'
PROFILE  DC    CL8'PROFILE'
REFRESH  DC    CL8'REFRESH'
REPLCOPY DC    CL8'REPLCOPY'
RETURN   DC    CL8'RETURN'
SHARED   DC    CL8'SHARED'
SPLIT    DC    CL8'SPLIT'
SM       DC    CL8'SM'
TEMP     DC    CL8'TEMP'
WRITE    DC    CL8'WRITE'
*        FORMATS
CHAR     DC    CL8'CHAR'
FIXED    DC    CL8'FIXED'
BIT      DC    CL8'BIT'
HEX      DC    CL8'HEX'
*
*        PRE-DEFINED FIELDS FOR CALLS TO ISPLINK
*
PANEL    DC    CL8' '
PROC     DC    CL8' '
MSG      DC    CL8' '
CURSOR   DC    CL8' '
OPT      DC    CL8' '
SPFRC    DC    CL4' '
*
*
SPFB     EQU   *
SPFLEN   EQU   (SPFB-SPFA)
         MEND
./ ADD  NAME=$ISPVALL
         MACRO
&NAME    $ISPVALL &FIELD=NULL,&TYPE=C,&NAMELST=NULL,&PERFORM=(NULL),   X
               &VGET=NULL,&VPUT=NULL,&PRINT=NOGEN
.** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*       DATE WRITTEN: APR,   1981        AUTHOR: ALAN RICHARDS       *
.** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*       THE PURPOSE OF THIS MACRO IS TO ALLOW THE GENERATION OF      *
.*       A TABLE OF CALL LISTS WHICH CAN BE USED FOR INVOKING         *
.*       ISPF VDEFINE,VGET,VPUT CALLS.                                *
.*                                                                    *
.*       &ALLSYM = 1-4 CHAR PREFIX OF FIELDS GENERATED IN THIS MACRO. *
.*                                                                    *
.*       &FIELD= FIELD NAME WITHIN PROGRAM WHICH IS TARGET OF VDEFINE *
.*               LENGTH OF THIS FIELD IS USED FOR SOURCE LENGTH       *
.*       &TYPE = IS DATA TYPE OF TARGET FIELD                         *
.*                                                                    *
.*       &VGET = IS THE SOURCE POOL FOR THE VGET FUNCTION             *
.*               IF BLANK THEN NO CALL LOGIC WILL BE GENERATED        *
.*                                                                    *
.*       &VPUT = IS THE SOURCE POOL FOR THE VPUT FUNCTION             *
.*               IF BLANK THEN NO CALL LOGIC WILL BE GENERATED        *
.*                                                                    *
.*       &NAMELST = IS THE PANEL FIELD NAMES WHICH ARE MAPPED INTO    *
.*                  TARGET FIELD                                      *
.*                  FORMAT OF NAMELST IS                              *
.*                  NAMELST=X                                         *
.*                  NAMELST=(X) OR =(X,Y,Z)                           *
.*                  NAMELST='X' OR ='X Y Z' OR ='X,Y,Z'               *
.*                  IF NOT SPECIFIED DEFAULT TO FIELD NAME            *
.*       &PERFORM = REGISTER WHICH WILL BE USED TO PERFORM THE        *
.*               TABLE HANDLING ROUTINE. IF SPECIFIED SPECIAL         *
.*               LOGIC WILL BE GENERATED TO PROCESS TABLE. THE        *
.*               LABEL TO REFERENCE IN THE PERFORM WILL BE THE        *
.*               NAME ON THE MACRO CARD CONCATENATED WITH 'CALL'      *
.** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         GBLC  &ALLSTRT,&ALLSYM
         GBLC  &GVGET,&GVPUT
         GBLA  &SEQNO
         LCLC  &NEXT,&PREV,&T,&F,&LF,&N,&PREVNO,&NEXTNO
         LCLC  &LABL,&SAVE,&LOOP,&DONE,&EXIT,&FRST,&CURR,&NLAB
         LCLA  &COUNT,&LEN,&Y
         LCLC  &FUNCOFF
         PUSH  PRINT
         PRINT &PRINT
.CKSTART ANOP
         AIF   ('&ALLSTRT' NE 'START').NOSTART
&ALLSYM  SETC  'VALL'
&GVGET   SETC  'NULL'
&GVPUT   SETC  'NULL'
         AIF   ('&NAME' EQ '').SETSEQ1
&ALLSYM  SETC  '&NAME'
.SETSEQ1 ANOP
&SEQNO   SETA  0
         AGO   .CKFUNC
.NOSTART ANOP
         AIF   ('&NAME' EQ '').CKFUNC
         AIF   ('&NAME' EQ '&ALLSYM').CKFUNC
&SEQNO   SETA  0
&ALLSYM  SETC  '&NAME'
&GVGET   SETC  'NULL'
&GVPUT   SETC  'NULL'
.CKFUNC  ANOP
         AIF   ('&VGET' EQ 'NULL').CKPUT1
&GVGET   SETC  '&VGET'
.CKPUT1  ANOP
         AIF   ('&VGET' EQ 'NULL').CKTYPE
&GVPUT   SETC  '&VPUT'
.CKTYPE  ANOP
         AIF   ('&TYPE' EQ 'C').SETCHAR
         AIF   ('&TYPE' EQ 'F').SETFIX
         AIF   ('&TYPE' EQ 'B').SETBIT
         AIF   ('&TYPE' EQ 'H').SETHEX
         MNOTE 8,'INVALID TYPE SPECFIED = &TYPE ONLY VALID TYPES ARE'
         MNOTE 8,'C FOR CHAR,X FOR HEX,B FOR BIT,F FOR FIXED'
         AGO   .MEND
.SETCHAR ANOP
&T       SETC  'CHAR'
         AGO   .CKFIELD
.SETFIX  ANOP
&T       SETC  'FIXED'
         AGO   .CKFIELD
.SETBIT  ANOP
&T       SETC  'BIT'
         AGO   .CKFIELD
.SETHEX  ANOP
&T       SETC  'HEX'
         AGO   .CKFIELD
.CKFIELD ANOP
         AIF   ('&FIELD' NE 'NULL').SETFLD
         MNOTE 8,'NO FIELD SPECIFIED NONE ASSUMED'
         AGO   .MEND
.SETFLD  ANOP
&F       SETC  '&FIELD'
         AGO   .CKNAME
.CKNAME  ANOP
         AIF   ('&NAMELST' NE 'NULL').CKSEQNO
         AIF   ('&FIELD' NE 'NULL').CKSEQNO
         MNOTE 8,'NO NAMELIST OR FIELD SPECIFIED NONE ASSUMED'
         AGO   .MEND
.CKSEQNO ANOP
&PREVNO  SETC  '&SEQNO'
&PREV    SETC  '&ALLSYM'.'&PREVNO'
         AIF   (&SEQNO NE 0).UPSEQNO
         AIF   ('&PERFORM' EQ 'NULL').INITPRM
&LABL    SETC  '&ALLSYM'(1,4).'VDEF'
&SAVE    SETC  '&ALLSYM'.'SAV'  LINKAGE SAVE AREA
&LOOP    SETC  '&ALLSYM'.'LOP'  LOOP
&DONE    SETC  '&ALLSYM'.'EOT'  END OF TABLE
&EXIT    SETC  '&ALLSYM'.'RET'  RETURN
&CURR    SETC  '&ALLSYM'.'CUR'  CURRENT TABLE POSITION
&FRST    SETC  '&ALLSYM'.'0'    FIRST TABLE ENTRY
&FUNCOFF SETC  '&ALLSYM'.'OFF'  FUNCTION OFFSET
&LABL    DS    0H
         ST    &PERFORM,&SAVE
         MVC   &FUNCOFF,=F'4'   OFFSET OF VDEFINE LIST
         LA    1,&FRST          POINT TO START OF TABLE
         B     &LOOP
         AIF   ('&GVGET' EQ 'NULL').CKIFPUT
&LABL    SETC  '&ALLSYM'(1,4).'VGET'
&LABL    DS    0H
         ST    &PERFORM,&SAVE
         MVC   &FUNCOFF,=F'28'  OFFSET OF VGET LIST
         LA    1,&FRST          POINT TO START OF TABLE
         B     &LOOP
.CKIFPUT ANOP
         AIF   ('&GVPUT' EQ 'NULL').GENLOOP
&LABL    SETC  '&ALLSYM'(1,4).'VPUT'
&LABL    DS    0H
         ST    &PERFORM,&SAVE
         MVC   &FUNCOFF,=F'40'  OFFSET OF VPUT LIST
         LA    1,&FRST          POINT TO START OF TABLE
         B     &LOOP
.GENLOOP ANOP
&LOOP    DS    0H
         CLC   0(4,1),=F'0'     IF NEXT ENTRY POINTS TO ZERO
         BE    &DONE            THEN LAST ENTRY IN TABLE
         ST    1,&CURR          SAVE CURRENT ENTRY
         A     1,&FUNCOFF       POINT TO SELECTED FUNCTION LIST
         CALL  ISPLINK          TO SPF
         LTR   15,15
         BNZ   &EXIT
         L     1,&CURR          PICK UP CURRENT ENTRY
         L     1,0(1)           POINT TO NEXT TABLE ENTRY
         B     &LOOP
&DONE    DS    0H
         SLR   15,15
&EXIT    DS    0H
         L     &PERFORM,&SAVE
         BR    &PERFORM
&SAVE    DC    F'0'             SAVE AREA FOR LINKAGE REGISTER
&CURR    DC    F'0'             SAVE ADDRESS OF CURRENT TABLE ENTRY
&FUNCOFF DC    F'0'             OFFSET OF FUNCTION LIST
.INITPRM ANOP
&PREV    DC    F'0'
.UPSEQNO ANOP
&SEQNO   SETA  &SEQNO+1
&NLAB    SETC  'N'.'&ALLSYM'.'&SEQNO'
&NEXTNO  SETC  '&SEQNO'
&NEXT    SETC  '&ALLSYM'.'&NEXTNO'
.SETVALL ANOP
         ORG  *-4
         DC   A(&NEXT)
         DC   A(VDEFINE,&NLAB)
         DC   A(&F,&T)
&LF      SETC 'L'''.'&F'
         DC   X'80',AL3(*+3)
         DC   A(&LF)
         AIF   ('&GVGET' EQ 'NULL').CKPUT
         DC   A(VGET,&NLAB)
         DC   X'80',AL3(&GVGET)
.CKPUT   ANOP
         AIF   ('&GVPUT' EQ 'NULL').CKIFNAM
         DC   A(VPUT,&NLAB)
         DC   X'80',AL3(&GVPUT)
.CKIFNAM ANOP
         AIF   ('&NAMELST' NE 'NULL').CKIFSUB
&N       SETC  '&FIELD'
&NLAB    DC   C'(&N)'
         AGO   .SETNEXT
.CKIFSUB ANOP
         AIF   ('&NAMELST'(1,1) NE '(').CKIFQTE
&N       SETC  '('
&COUNT   SETA  N'&NAMELST
&Y       SETA  0
.LOOPN   ANOP
&Y       SETA  &Y+1
&N       SETC  '&N'.'&NAMELST(&Y)'
         AIF   (&Y GE &COUNT).ENDNAM
&N       SETC  '&N'.','
         AGO   .LOOPN
         AIF   (K'&N  LE 48).LOOPN
&NLAB    DC   C'&N'
&N       SETC  ''
         AGO   .LOOPN
.ENDNAM  ANOP
&NLAB    DC   C'&N)'
         AGO   .SETNEXT
.CKIFQTE ANOP
         AIF   ('&NAMELST'(1,1) NE '''').SETNAME
&LEN     SETA  K'&NAMELST
&LEN     SETA  &LEN-2
&N       SETC  '&NAMELST'(2,&LEN)
&NLAB    DC   C'(&N)'
         AGO   .SETNEXT
.SETNAME ANOP
&N       SETC  '&NAMELST'
&NLAB    DC   C'(&N)'
         AGO   .SETNEXT
.SETNEXT ANOP
&NEXT    DC   F'0'
.MEND    ANOP
         POP  PRINT
         MEND
./ ADD  NAME=$ISPVDEF
         MACRO
&NAME    $ISPVDEF &FIELD=NULL,&TYPE=C,&NAMELST=NULL,&PERFORM=(NULL),   X
               &PRINT=NOGEN
.** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*       DATE WRITTEN: APR,   1981        AUTHOR: ALAN RICHARDS       *
.** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*       THE PURPOSE OF THIS MACRO IS TO ALLOW THE GENERATION OF      *
.*       A TABLE OF CALL LISTS WHICH CAN BE USED FOR INVOKING         *
.*       ISPF CALL FUNCTIONS.                                         *
.*                                                                    *
.*       &DEFSYM = 1-4 CHAR PREFIX OF FIELDS GENERATED IN THIS MACRO. *
.*                                                                    *
.*       &FIELD= FIELD NAME WITHIN PROGRAM WHICH IS TARGET OF VDEFINE *
.*               LENGTH OF THIS FIELD IS USED FOR SOURCE LENGTH       *
.*       &TYPE = IS DATA TYPE OF TARGET FIELD                         *
.*                                                                    *
.*       &NAMELST = IS THE PANEL FIELD NAMES WHICH ARE MAPPED INTO    *
.*                  TARGET FIELD                                      *
.*                  FORMAT OF NAMELST IS                              *
.*                  NAMELST=X                                         *
.*                  NAMELST=(X) OR =(X,Y,Z)                           *
.*                  NAMELST='X' OR ='X Y Z' OR ='X,Y,Z'               *
.*                  IF NOT SPECIFIED DEFAULT TO FIELD NAME            *
.*       &PERFORM = REGISTER WHICH WILL BE USED TO PERFORM THE        *
.*               TABLE HANDLING ROUTINE. IF SPECIFIED SPECIAL         *
.*               LOGIC WILL BE GENERATED TO PROCESS TABLE. THE        *
.*               LABEL TO REFERENCE IN THE PERFORM WILL BE THE        *
.*               NAME ON THE MACRO CARD CONCATENATED WITH 'CALL'      *
.** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         GBLC  &DEFSTRT,&DEFSYM
         GBLA  &SEQNO
         LCLC  &NEXT,&PREV,&T,&F,&LF,&N,&PREVNO,&NEXTNO
         LCLC  &LABL,&SAVE,&LOOP,&DONE,&EXIT,&FRST,&FUNC,&CURR
         LCLA  &COUNT,&LEN,&Y
         PUSH  PRINT
         PRINT &PRINT
.CKSTART ANOP
         AIF   ('&DEFSTRT' NE 'START').NOSTART
&DEFSYM  SETC  'VDEF'
         AIF   ('&NAME' EQ '').SETSEQ1
&DEFSYM  SETC  'D'.'&NAME'
.SETSEQ1 ANOP
&SEQNO   SETA  0
         AGO   .CKTYPE
.NOSTART ANOP
         AIF   ('&NAME' EQ '').CKTYPE
         AIF   ('&NAME' EQ '&DEFSYM').CKTYPE
&SEQNO   SETA  0
&DEFSYM  SETC  'D'.'&NAME'
.CKTYPE  ANOP
         AIF   ('&TYPE' EQ 'C').SETCHAR
         AIF   ('&TYPE' EQ 'F').SETFIX
         AIF   ('&TYPE' EQ 'B').SETBIT
         AIF   ('&TYPE' EQ 'H').SETHEX
         MNOTE 8,'INVALID TYPE SPECFIED = &TYPE ONLY VALID TYPES ARE'
         MNOTE 8,'C FOR CHAR,X FOR HEX,B FOR BIT,F FOR FIXED'
         AGO   .MEND
.SETCHAR ANOP
&T       SETC  'CHAR'
         AGO   .CKFIELD
.SETFIX  ANOP
&T       SETC  'FIXED'
         AGO   .CKFIELD
.SETBIT  ANOP
&T       SETC  'BIT'
         AGO   .CKFIELD
.SETHEX  ANOP
&T       SETC  'HEX'
         AGO   .CKFIELD
.CKFIELD ANOP
         AIF   ('&FIELD' NE 'NULL').SETFLD
         MNOTE 8,'NO FIELD SPECIFIED NONE ASSUMED'
         AGO   .MEND
.SETFLD  ANOP
&F       SETC  '&FIELD'
         AGO   .CKNAME
.CKNAME  ANOP
         AIF   ('&NAMELST' NE 'NULL').CKSEQNO
         AIF   ('&FIELD' NE 'NULL').CKSEQNO
         MNOTE 8,'NO NAMELIST OR FIELD SPECIFIED NONE ASSUMED'
         AGO   .MEND
.CKSEQNO ANOP
&PREVNO  SETC  '&SEQNO'
&PREV    SETC  '&DEFSYM'.'&PREVNO'
         AIF   (&SEQNO NE 0).UPSEQNO
         AIF   ('&PERFORM' EQ 'NULL').INITPRM
&LABL    SETC  '&DEFSYM'(2,4).'VDEF'
&SAVE    SETC  '&DEFSYM'.'SAV'  LINKAGE SAVE AREA
&LOOP    SETC  '&DEFSYM'.'LOP'  LOOP
&DONE    SETC  '&DEFSYM'.'EOT'  END OF TABLE
&EXIT    SETC  '&DEFSYM'.'RET'  RETURN
&CURR    SETC  '&DEFSYM'.'CUR'  CURRENT TABLE POSITION
&FRST    SETC  '&DEFSYM'.'0'    FIRST TABLE ENTRY
&LABL    DS    0H
         ST    &PERFORM,&SAVE
         LA    1,&FRST          POINT TO START OF TABLE
&LOOP    DS    0H
         CLC   0(4,1),=F'0'     IF NEXT ENTRY POINTS TO ZERO
         BE    &DONE            THEN LAST ENTRY IN TABLE
         ST    1,&CURR          SAVE CURRENT ENTRY
         LA    1,4(1)           POINT TO VDEFPARMS
         CALL  ISPLINK          TO SPF
         LTR   15,15
         BNZ   &EXIT
         L     1,&CURR          PICK UP CURRENT ENTRY
         L     1,0(1)           POINT TO NEXT TABLE ENTRY
         B     &LOOP
&DONE    DS    0H
         SLR   15,15
&EXIT    DS    0H
         L     &PERFORM,&SAVE
         BR    &PERFORM
&SAVE    DC    F'0'             SAVE AREA FOR LINKAGE REGISTER
&CURR    DC    F'0'             SAVE ADDRESS OF CURRENT TABLE ENTRY
.INITPRM ANOP
&PREV    DC    F'0'
.UPSEQNO ANOP
&SEQNO   SETA  &SEQNO+1
&NEXTNO  SETC  '&SEQNO'
&NEXT    SETC  '&DEFSYM'.'&NEXTNO'
.SETVDEF ANOP
         ORG  *-4
         DC   A(&NEXT)
         DC   A(VDEFINE,*+20)
         DC   A(&F,&T)
&LF      SETC 'L'''.'&F'
         DC   X'80',AL3(*+3)
         DC   A(&LF)
.CKIFNAM ANOP
         AIF   ('&NAMELST' NE 'NULL').CKIFSUB
&N       SETC  '&FIELD'
         DC   C'(&N)'
         AGO   .SETNEXT
.CKIFSUB ANOP
         AIF   ('&NAMELST'(1,1) NE '(').CKIFQTE
&N       SETC  '('
&COUNT   SETA  N'&NAMELST
&Y       SETA  0
.LOOPN   ANOP
&Y       SETA  &Y+1
&N       SETC  '&N'.'&NAMELST(&Y)'
         AIF   (&Y GE &COUNT).ENDNAM
&N       SETC  '&N'.','
         AGO   .LOOPN
         AIF   (K'&N  LE 48).LOOPN
         DC   C'&N'
&N       SETC  ''
         AGO   .LOOPN
.ENDNAM  ANOP
         DC   C'&N)'
         AGO   .SETNEXT
.CKIFQTE ANOP
         AIF   ('&NAMELST'(1,1) NE '''').SETNAME
&LEN     SETA  K'&NAMELST
&LEN     SETA  &LEN-2
&N       SETC  '&NAMELST'(2,&LEN)
         DC   C'(&N)'
         AGO   .SETNEXT
.SETNAME ANOP
&N       SETC  '&NAMELST'
         DC   C'(&N)'
         AGO   .SETNEXT
.SETNEXT ANOP
&NEXT    DC   F'0'
.MEND    ANOP
         POP  PRINT
         MEND
./ ADD  NAME=$ISPVGET
         MACRO
&NAME    $ISPVGET &SOURCE=PROFILE,&NAMELST=NULL,&PERFORM=(NULL),       X
               &PRINT=NOGEN
.** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*       DATE WRITTEN: APR,   1981        AUTHOR: ALAN RICHARDS       *
.** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*       THE PURPOSE OF THIS MACRO IS TO ALLOW THE GENERATION OF      *
.*       A TABLE OF VGET CALL LISTS WHICH CAN BE USED WHEN REQUESTING *
.*       ISPF CALL FUNCTIONS.                                         *
.*                                                                    *
.*       &GETSYM = 1-4 CHAR PREFIX OF FIELDS GENERATED IN THIS MACRO. *
.*                                                                    *
.*       &SOURCE= NAME OF SOURCE OF DATA (SHARED,PROFILE)             *
.*                                                                    *
.*       &NAMELST = IS THE PANEL FIELD NAMES WHICH ARE MAPPED INTO    *
.*                  TARGET FIELD                                      *
.*                  FORMAT OF NAMELST IS                              *
.*                  NAMELST=X                                         *
.*                  NAMELST=(X) OR =(X,Y,Z)                           *
.*                  NAMELST='X' OR ='X Y Z' OR ='X,Y,Z'               *
.*                  IF NOT SPECIFIED DEFAULT TO FIELD NAME            *
.*       &PERFORM = REGISTER WHICH WILL BE USED TO PERFORM THE        *
.*               TABLE HANDLING ROUTINE. IF SPECIFIED SPECIAL         *
.*               LOGIC WILL BE GENERATED TO PROCESS TABLE. THE        *
.*               LABEL TO REFERENCE IN THE PERFORM WILL BE THE        *
.*               NAME ON THE MACRO CARD CONCATENATED WITH 'CALL'      *
.** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         GBLC  &GETSTRT,&GETSYM
         GBLA  &SEQNO
         LCLC  &NEXT,&PREV,&T,&F,&LF,&N,&PREVNO,&NEXTNO
         LCLC  &LABL,&SAVE,&LOOP,&DONE,&EXIT,&FRST,&CURR
         LCLA  &COUNT,&LEN,&Y
         PUSH  PRINT
         PRINT &PRINT
.CKSTART ANOP
         AIF   ('&GETSTRT' NE 'START').NOSTART
&GETSYM  SETC  'VGET'
         AIF   ('&NAME' EQ '').SETSEQ1
&GETSYM  SETC  'G'.'&NAME'
.SETSEQ1 ANOP
&SEQNO   SETA  0
         AGO   .CKSOURC
.NOSTART ANOP
         AIF   ('&NAME' EQ '').CKSOURC
         AIF   ('&NAME' EQ '&GETSYM').CKSOURC
&SEQNO   SETA  0
&GETSYM  SETC  'G'.'&NAME'
.CKSOURC ANOP
         AIF   ('&SOURCE' EQ 'SHARED').CKNAME
         AIF   ('&SOURCE' EQ 'PROFILE').CKNAME
         MNOTE 8,'INVALID SOURCE OPERAND = &SOURCE'
         MNOTE 0,'ONLY VALID OPTIONS ARE SHARED OR PROFILE'
         AGO   .MEND
.CKNAME  ANOP
         AIF   ('&NAMELST' NE 'NULL').CKSEQNO
         MNOTE 8,'NO NAMELIST OR FIELD SPECIFIED NONE ASSUMED'
         AGO   .MEND
.CKSEQNO ANOP
&PREVNO  SETC  '&SEQNO'
&PREV    SETC  '&GETSYM'.'&PREVNO'
         AIF   (&SEQNO NE 0).UPSEQNO
         AIF   ('&PERFORM' EQ 'NULL').INITPRM
&LABL    SETC  '&GETSYM'(2,4).'VGET'
&SAVE    SETC  '&GETSYM'.'SAV'  LINKAGE SAVE AREA
&LOOP    SETC  '&GETSYM'.'LOP'  LOOP
&DONE    SETC  '&GETSYM'.'EOT'  END OF TABLE
&EXIT    SETC  '&GETSYM'.'RET'  RETURN
&CURR    SETC  '&GETSYM'.'CUR'  CURRENT TABLE POSITION
&FRST    SETC  '&GETSYM'.'0'    FIRST TABLE ENTRY
&LABL    DS    0H
         ST    &PERFORM,&SAVE
         LA    1,&FRST          POINT TO START OF TABLE
&LOOP    DS    0H
         CLC   0(4,1),=F'0'     IF NEXT ENTRY POINTS TO ZERO
         BE    &DONE            THEN LAST ENTRY IN TABLE
         ST    1,&CURR          SAVE CURRENT ENTRY
         LA    1,4(1)           POINT TO VGETPARMS
         CALL  ISPLINK          TO SPF
         LTR   15,15
         BNZ   &EXIT
         L     1,&CURR          PICK UP CURRENT ENTRY
         L     1,0(1)           POINT TO NEXT TABLE ENTRY
         B     &LOOP
&DONE    DS    0H
         SLR   15,15
&EXIT    DS    0H
         L     &PERFORM,&SAVE
         BR    &PERFORM
&SAVE    DC    F'0'             SAVE AREA FOR LINKAGE REGISTER
&CURR    DC    F'0'             SAVE ADDRESS OF CURRENT TABLE ENTRY
.INITPRM ANOP
&PREV    DC    F'0'
.UPSEQNO ANOP
&SEQNO   SETA  &SEQNO+1
&NEXTNO  SETC  '&SEQNO'
&NEXT    SETC  '&GETSYM'.'&NEXTNO'
.SETVGET ANOP
         ORG  *-4
         DC   A(&NEXT)
         DC   A(VGET,*+8)
         DC   X'80',AL3(&SOURCE)
.CKIFSUB ANOP
         AIF   ('&NAMELST'(1,1) NE '(').CKIFQTE
&N       SETC  '('
&COUNT   SETA  N'&NAMELST
&Y       SETA  0
.LOOPN   ANOP
&Y       SETA  &Y+1
&N       SETC  '&N'.'&NAMELST(&Y)'
         AIF   (&Y GE &COUNT).ENDNAM
&N       SETC  '&N'.','
         AGO   .LOOPN
         AIF   (K'&N  LE 48).LOOPN
         DC   C'&N'
&N       SETC  ''
         AGO   .LOOPN
.ENDNAM  ANOP
         DC   C'&N)'
         AGO   .SETNEXT
.CKIFQTE ANOP
         AIF   ('&NAMELST'(1,1) NE '''').SETNAME
&LEN     SETA  K'&NAMELST
&LEN     SETA  &LEN-2
&N       SETC  '&NAMELST'(2,&LEN)
         DC   C'(&N)'
         AGO   .SETNEXT
.SETNAME ANOP
&N       SETC  '&NAMELST'
         DC   C'(&N)'
         AGO   .SETNEXT
.SETNEXT ANOP
&NEXT    DC   F'0'
.MEND    ANOP
         POP  PRINT
         MEND
./ ADD  NAME=$ISPVPUT
         MACRO
&NAME    $ISPVPUT &SOURCE=PROFILE,&NAMELST=NULL,&PERFORM=(NULL),       X
               &PRINT=NOGEN
.** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*       DATE WRITTEN: APR,   1981        AUTHOR: ALAN RICHARDS       *
.** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*       THE PURPOSE OF THIS MACRO IS TO ALLOW THE GENERATION OF      *
.*       A TABLE OF VPUT CALL LISTS WHICH CAN BE USED WHEN REQUESTING *
.*       ISPF CALL FUNCTIONS.                                         *
.*                                                                    *
.*       &GETSYM = 1-4 CHAR PREFIX OF FIELDS GENERATED IN THIS MACRO. *
.*                                                                    *
.*       &SOURCE= NAME OF SOURCE OF DATA (SHARED,PROFILE)             *
.*                                                                    *
.*       &NAMELST = IS THE PANEL FIELD NAMES WHICH ARE MAPPED INTO    *
.*                  TARGET FIELD                                      *
.*                  FORMAT OF NAMELST IS                              *
.*                  NAMELST=X                                         *
.*                  NAMELST=(X) OR =(X,Y,Z)                           *
.*                  NAMELST='X' OR ='X Y Z' OR ='X,Y,Z'               *
.*                  IF NOT SPECIFIED DEFAULT TO FIELD NAME            *
.*       &PERFORM = REGISTER WHICH WILL BE USED TO PERFORM THE        *
.*               TABLE HANDLING ROUTINE. IF SPECIFIED SPECIAL         *
.*               LOGIC WILL BE GENERATED TO PROCESS TABLE. THE        *
.*               LABEL TO REFERENCE IN THE PERFORM WILL BE THE        *
.*               NAME ON THE MACRO CARD CONCATENATED WITH 'CALL'      *
.** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         GBLC  &PUTSTRT,&PUTSYM
         GBLA  &SEQNO
         LCLC  &NEXT,&PREV,&T,&F,&LF,&N,&PREVNO,&NEXTNO
         LCLC  &LABL,&SAVE,&LOOP,&DONE,&EXIT,&FRST,&CURR
         LCLA  &COUNT,&LEN,&Y
         PUSH  PRINT
         PRINT &PRINT
.CKSTART ANOP
         AIF   ('&PUTSTRT' NE 'START').NOSTART
&PUTSYM  SETC  'VPUT'
         AIF   ('&NAME' EQ '').SETSEQ1
&PUTSYM  SETC  'P'.'&NAME'
.SETSEQ1 ANOP
&SEQNO   SETA  0
         AGO   .CKSOURC
.NOSTART ANOP
         AIF   ('&NAME' EQ '').CKSOURC
         AIF   ('&NAME' EQ '&PUTSYM').CKSOURC
&SEQNO   SETA  0
&PUTSYM  SETC  'P'.'&NAME'
.CKSOURC ANOP
         AIF   ('&SOURCE' EQ 'SHARED').CKNAME
         AIF   ('&SOURCE' EQ 'PROFILE').CKNAME
         MNOTE 8,'INVALID SOURCE OPERAND = &SOURCE'
         MNOTE 0,'ONLY VALID OPTIONS ARE SHARED OR PROFILE'
         AGO   .MEND
.CKNAME  ANOP
         AIF   ('&NAMELST' NE 'NULL').CKSEQNO
         MNOTE 8,'NO NAMELIST OR FIELD SPECIFIED NONE ASSUMED'
         AGO   .MEND
.CKSEQNO ANOP
&PREVNO  SETC  '&SEQNO'
&PREV    SETC  '&PUTSYM'.'&PREVNO'
         AIF   (&SEQNO NE 0).UPSEQNO
         AIF   ('&PERFORM' EQ 'NULL').INITPRM
&LABL    SETC  '&PUTSYM'(2,4).'VPUT'
&SAVE    SETC  '&PUTSYM'.'SAV'  LINKAGE SAVE AREA
&LOOP    SETC  '&PUTSYM'.'LOP'  LOOP
&DONE    SETC  '&PUTSYM'.'EOT'  END OF TABLE
&EXIT    SETC  '&PUTSYM'.'RET'  RETURN
&CURR    SETC  '&PUTSYM'.'CUR'  CURRENT TABLE POSITION
&FRST    SETC  '&PUTSYM'.'0'    FIRST TABLE ENTRY
&LABL    DS    0H
         ST    &PERFORM,&SAVE
         LA    1,&FRST          POINT TO START OF TABLE
&LOOP    DS    0H
         CLC   0(4,1),=F'0'     IF NEXT ENTRY POINTS TO ZERO
         BE    &DONE            THEN LAST ENTRY IN TABLE
         ST    1,&CURR          SAVE CURRENT ENTRY
         LA    1,4(1)           POINT TO VPUTPARMS
         CALL  ISPLINK          TO SPF
         LTR   15,15
         BNZ   &EXIT
         L     1,&CURR          PICK UP CURRENT ENTRY
         L     1,0(1)           POINT TO NEXT TABLE ENTRY
         B     &LOOP
&DONE    DS    0H
         SLR   15,15
&EXIT    DS    0H
         L     &PERFORM,&SAVE
         BR    &PERFORM
&SAVE    DC    F'0'             SAVE AREA FOR LINKAGE REGISTER
&CURR    DC    F'0'             SAVE ADDRESS OF CURRENT TABLE ENTRY
.INITPRM ANOP
&PREV    DC    F'0'
.UPSEQNO ANOP
&SEQNO   SETA  &SEQNO+1
&NEXTNO  SETC  '&SEQNO'
&NEXT    SETC  '&PUTSYM'.'&NEXTNO'
.SETVPUT ANOP
         ORG  *-4
         DC   A(&NEXT)
         DC   A(VPUT,*+8)
         DC   X'80',AL3(&SOURCE)
.CKIFSUB ANOP
         AIF   ('&NAMELST'(1,1) NE '(').CKIFQTE
&N       SETC  '('
&COUNT   SETA  N'&NAMELST
&Y       SETA  0
.LOOPN   ANOP
&Y       SETA  &Y+1
&N       SETC  '&N'.'&NAMELST(&Y)'
         AIF   (&Y GE &COUNT).ENDNAM
&N       SETC  '&N'.','
         AGO   .LOOPN
         AIF   (K'&N  LE 48).LOOPN
         DC   C'&N'
&N       SETC  ''
         AGO   .LOOPN
.ENDNAM  ANOP
         DC   C'&N)'
         AGO   .SETNEXT
.CKIFQTE ANOP
         AIF   ('&NAMELST'(1,1) NE '''').SETNAME
&LEN     SETA  K'&NAMELST
&LEN     SETA  &LEN-2
&N       SETC  '&NAMELST'(2,&LEN)
         DC   C'(&N)'
         AGO   .SETNEXT
.SETNAME ANOP
&N       SETC  '&NAMELST'
         DC   C'(&N)'
         AGO   .SETNEXT
.SETNEXT ANOP
&NEXT    DC   F'0'
.MEND    ANOP
         POP  PRINT
         MEND
./ ADD  NAME=$PROLOG
         MACRO
&LABEL   $PROLOG &LV=0,&GM=Y
.**********************************************************************
.*
.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY
.*       MULTIPLE BASE REGISTERS.  ALSO, VIA THE 'LV=' KEYWORD
.*       PROVIDE ADDITIONAL USER STORAGE (APPENDED TO THE
.*       SAVE AREA) ADDRESSABLE FROM REG 13.  IF NO OPERANDS
.*       ARE CODED, REG 12 IS ASSUMED THE BASE. EXAMPLE:
.*              SECTNAME $PROLOG          = STANDARD REG 12 BASE
.*              SECTNAME $PROLOG 5        = STANDARD, REG 5 BASE
.*              SECTNAME $PROLOG 10,LV=20 = ADD 20 BYTES TO SAVE AREA
.*                                             REG 10 IS BASE
.*              SECTNAME $PROLOG R10,R11  = REGS 10 AND 11 ARE BASES
.*
.**********************************************************************
         LCLA  &AA,&AB,&AC
         GBLB  &PRORG
         GBLC  &PROGM
&AC      SETA  4096
&LABEL   CSECT
         B     32(R15)             BRANCH AROUND
         DC    AL1(26)
         DC    CL8'&LABEL'         CSECT NAME
         DC    C'-'
         DC    CL8'&SYSDATE'       COMPILE DATE
         DC    C'-'
         DC    CL8'&SYSTIME'       COMPILE TIME
         CNOP  0,4                 ALIGNMENT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R12,R15             LOAD BASE REG
         USING &LABEL,R12          INFORM ASSEMBLER
         AIF   (&LV GT 4023).MERR
         AIF   ('&GM' EQ 'N').NOGM
&PROGM   SETC  'GETMAIN'
         LA    R0,&LV+72           LOAD REG 0 WITH LENGTH VARIABLE
         GETMAIN R,LV=(0)          GET CORE FOR SAVEAREA AND USER
         AIF   (&LV+72 LE 256).XC2
         AIF   (&LV+72 LE 512).XC1
         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE
         LR    R2,R1               SAVE POINTER IN EVEN REG
         LA    R4,1(R1)            SET RECEIVING POINTER
         LR    R5,R0               SET RECEIVING LENGTH
         BCTR  R5,R0               DECREMENT LENGTH
         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE
         LA    R3,1                SET SENDING LENGTH
         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'
         AGO   .STORE
.XC1     ANOP
         XC    256(&LV-184,R1),256(R1)  CLEAR SAVE AREA
         XC    0(256,R1),0(R1)          CLEAR SAVE AREA
         AGO   .STORE
.XC2     ANOP
         XC    0(&LV+72,R1),0(R1)       CLEAR SAVE AREA
         AGO   .STORE
.NOGM    ANOP
         CNOP  0,4
         LA    R1,SAVE&SYSNDX
         B     *+76
SAVE&SYSNDX DC 18F'0'
.STORE   ANOP
         ST    R13,4(R1)           SAVE BACK CHAIN
         ST    R1,8(R13)           SET FORWARD CHAIN
         LR    R11,R1              SAVE NEW SAVEAREA ADDRESS
         L     R15,16(R13)         RESTORE REG 15
         ST    R0,16(R13)          SAVE SAVEAREA LENGTH
         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN
         LR    R13,R11             SET SAVEAREA POINTER
         AIF   (N'&SYSLIST EQ 0).MEND
         AIF   ('&SYSLIST(1)' EQ 'R12').SKIPIT
         AIF   ('&SYSLIST(1)' EQ '12').SKIPIT
         LA    &SYSLIST(1),&LABEL  LOAD REQUESTED BASE REG
         DROP  R12                 DROP ASSUMED BASE REG
         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER
.SKIPIT  ANOP
&AA      SETA  2
.LOOP    ANOP
         AIF   (&AA GT N'&SYSLIST).MEXIT
&AB      SETA  &AA-1
         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB))  LOAD NEXT BASE REG
         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG
         USING &LABEL+&AC,&SYSLIST(&AA) INFORM ASSEMBLER
&AC      SETA  &AC+4096
&AA      SETA  &AA+1
         AGO   .LOOP
.MEXIT   ANOP
         AIF   (&PRORG).MEX2
         SPACE
         $REGS
         SPACE
.MEX2    ANOP
&AA      SETA  &LV+72
         MNOTE *,'TOTAL STORAGE AREA RECEIVED = &AA'
         MEXIT
.MEND    ANOP
         MNOTE *,'NO REGISTER SPECIFIED - R12 ASSUMED'
         AGO   .MEXIT
.MERR    ANOP
         MNOTE 12,'LV > 4023 - REQUEST IGNORED'
         AGO   .MEXIT
         MEND
./ ADD  NAME=$REGS
         MACRO
         $REGS
         GBLB  &PRORG
         AIF   (&PRORG).MEX2
&PRORG   SETB  1
 SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
 SPACE
REG0     EQU   0
REG1     EQU   1
REG2     EQU   2
REG3     EQU   3
REG4     EQU   4
REG5     EQU   5
REG6     EQU   6
REG7     EQU   7
REG8     EQU   8
REG9     EQU   9
REG10    EQU   10
REG11    EQU   11
REG12    EQU   12
REG13    EQU   13
REG14    EQU   14
REG15    EQU   15
 SPACE
.MEX2    ANOP
       MEND
./ ADD  NAME=$VTQREC
         MACRO
&NAME    $VTQREC  &DSECT=NO,&CSECT=YES,&CONTDS=NO
*----------------------------------------------------------------------
*
*        FILE LAYOUT FOR THE VTAM/328X PRINT PROGRAM
*
*----------------------------------------------------------------------
         AIF   ('&DSECT' EQ 'YES').CHKCONT
&NAME    DS    0D
QMAXFCRS DC    XL1'00'    NUMBER OF FILE CONTROL RECORDS - MAX = 11
QFCR1    DC    XL11'00'   00 - NO USED  FF - RECORDS TO BE PROCESSED
QBITMAP  DC    XL88'00'   0 - AVAILABLE RECORD   1 - USED RECORD
         DC    XL28'00'   RESERVED
         ORG   QMAXFCRS
*
* USED RECORD
*
Q1       EQU   *
QDSN     DS    CL44       DATA SET NAME TO BE PRINTED
QMBR     DS    CL8        MEMBER NAME IF A PDS
QJOBNM   DS    CL8        USERID/JOBNAME OF REQUESTER
QPRINTER DS    CL8        LOGICAL PRINTER NAME
*
QPLINES  DS    XL2        PRINT LINES/PAGE - NO CARRIAGE CONTROL
*                             OR TOTAL LINES/PAGE (ANS CRG. CNTL)
QSLINES  DS    XL2        SKIP LINES/PAGE - NO CARRIAGE CONTROL
QCC      DS    CL1        CARRIAGE CONTROL - A=ANS  BLANK=NONE
*
QREQDATE DS    CL5        DATE OF REQUEST - YYDDD
QREQTIME DS    CL4        TIME OF REQUEST - HHMM
*
QATMDATE DS    CL5        DATE OF ATTEMPT TO PROCESS, ERROR OCCURRED
QATMTIME DS    CL4        TIME OF ATTEMPT TO PROCESS
QSTATUS  DS    CL8        ERROR CODE
*
QIRECS   DS    XL4        NUMBER OF INPUT RECORDS PROCESSED
QMAX     DS    XL4        MAX INPUT RECORDS ALLOWED
         DS    XL21
Q2       EQU   *
QLL      EQU   Q2-Q1
         AGO   .DONE
.CHKCONT AIF   ('&CONTDS' EQ 'YES').DS
         DSECT
.DS      ANOP
&NAME    DS    0D
*----------------------------------------------------------------------
*
* FILE CONTROL RECORD
*
*----------------------------------------------------------------------
QMAXFCRS DS    XL1        NUMBER OF FILE CONTROL RECORDS - MAX = 11
QFCR1    DS    XL11       0 - NO USED   1 - RECORDS TO BE PROCESSED
QBITMAP  DS    XL88       0 - AVAILABLE RECORD   1 - USED RECORD
         DS    XL28       RESERVED
         ORG   QMAXFCRS
*----------------------------------------------------------------------
*
* USED RECORD
*
*----------------------------------------------------------------------
Q1       EQU   *
QDSN     DS    CL44       DATA SET NAME TO BE PRINTED
QMBR     DS    CL8        MEMBER NAME IF A PDS
QJOBNM   DS    CL8        USERID/JOBNAME OF REQUESTER
QPRINTER DS    CL8        LOGICAL PRINTER NAME
*
QPLINES  DS    XL2        PRINT LINES/PAGE - NO CARRIAGE CONTROL
*                             OR TOTAL LINES/PAGE (ANS CRG. CNTL)
QSLINES  DS    XL2        SKIP LINES/PAGE - NO CARRIAGE CONTROL
QCC      DS    CL1        CARRIAGE CONTROL - A=ANS  BLANK=NONE
*
QREQDATE DS    CL5        DATE OF REQUEST - YYDDD
QREQTIME DS    CL4        TIME OF REQUEST - HHMM
*
QATMDATE DS    CL5        DATE OF ATTEMPT TO PROCESS, ERROR OCCURRED
QATMTIME DS    CL4        TIME OF ATTEMPT TO PROCESS
QSTATUS  DS    CL8        ERROR CODE
*
QIRECS   DS    XL4        NUMBER OF INPUT RECORDS PROCESSED
QMAX     DS    XL4        MAX INPUT RECORDS ALLOWED
         DS    XL21
Q2       EQU   *
         AIF   ('&CSECT' EQ 'NO').DONE
QLL      EQU   Q2-Q1
&SYSECT  CSECT
.DONE    ANOP
         MEND
./ ADD  NAME=ALLOCRTN
         PRINT OFF,NOGEN
         MACRO
         PROLOG
*----------------------------------------------------------------------
*
*        DYNAMIC ALLOCATION/DE-ALLOCATION SUB-ROUTINE
*
*        THIS PROGRAM IS 'RENT' AND MAY BE PLACED IN 'MLPA'
*
*        R1 MUST POINT TO THE ADDR OF THE AREA CREATED BY MACRO
*        '$ALLOC'.
*
*        FOR CONCATENATION, THE INPUT PARMS MUST BE A LIST OF DDNAMES
*        STARTING AT 'DYNDDNM' FOLLOWED BY A X'FF'.
*
*
*
*        R0  - WORK
*        R1  - WORK
*        R2  - LENGTH OF DATA PASSED IN THE PARMS
*        R3  - USED FOR CONCATENATE FUNCTION ONLY - DDNAME LIST
*        R4  - RETURN DDNAME - SAVE ADDR
*        R5  - NUMBER OF TEXT UNITS FOR CONCATENATE
*        R6  - NUMBER OF DDNAMES FOR CONCATENATE
*        R7  - BASE FOR PARMS PASSED TO THIS PROGRAM
*        R8  - TEXT UNIT BASE
*        R9  - TEXT UNIT POINTERS BASE
*        R10 - DYNAMIC REQUEST BLOCK BASE
*        R11 - DYNAMIC REQUEST BLOCK POINTER BASE
*        R12 - PROGRAM BASE
*        R13 - SAVE AREA
*        R14 - WORK
*        R15 - WORK
*
*----------------------------------------------------------------------
         MEND
         PRINT ON
ALLOCRTN $PROLOG LV=1024
         EJECT
*----------------------------------------------------------------------
*
*        INITIALIZATION
*
*----------------------------------------------------------------------
ENTRY010 DS    0H
         L     R7,0(R1)
         USING DYNPARMS,R7
         XR    R2,R2              CLEAR
         IC    R2,DYNLEN          LENGTH OF PARMS
         S     R2,=F'22'          SUBTRACT LENGTH OF WORKAREA AND
*                                 DYNTYPE
         BNP   ENTRY800           NOT ENOUGH DATA PASSED TO US
         LA    R11,72(R13)        ADDR OF WORKAREA
         LR    R0,R11             ADDR OF WORKAREA
         LA    R1,1024-72         LENGTH OF WORKAREA
         LA    R14,*              DUMMY ADDR
         LA    R15,0              LENGTH AND PAD CHARACTER
         MVCL  R0,R14             CLEAR WORKAREA
         USING S99RBP,R11         REQ BLK POINTER DSECT
         LA    R10,S99RBP+4       ADDRESSABILITY OF RB DSECT
         USING S99RB,R10          RB DSECT
         ST    R10,S99RBPTR       MAKE RBPTR POINT TO RB
         OI    S99RBPTR,S99RBPND  TURN ON HOB IN RBPTR
         XC    S99RB(RBLEN),S99RB  CLEAR RB
         MVI   S99RBLN,RBLEN      PUT LEN IN ITS LENGTH FIELD
         LA    R9,S99RB+RBLEN     POINT BEYOND RB (1ST TEXT PTR)
         USING S99TUPL,R9         ADDRESSABILITY OF TEXT UNIT POINTERS
         ST    R9,S99TXTPP        INIT TEXT PTR IN RB
         LA    R8,S99TUPL+128     POINT BEYOND LAST TXT PTR (1ST TXT
         USING S99TUNIT,R8        ADDRESSABILITY OF TEXT UNITS
EXIT010  EQU   *
         B     ENTRY020
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        DETERMINE FUNCTION
*
*----------------------------------------------------------------------
ENTRY020 DS    0H
         MVI   S99VERB,S99VRBCC   SET VERB CODE TO CONCATENATE
         CLI   DYNTYPE,C'C'       CONCATENATE ?
         BE    ENTRY700           YES - OK
         MVI   S99VERB,S99VRBAL   SET VERB CODE TO ALLOCATE
         CLI   DYNTYPE,C'A'       ALLOCATION ?
         BE    EXIT020            YES - OK
         MVI   S99VERB,S99VRBUN   SET VERB CODE TO DE-ALLOCATE
         CLI   DYNTYPE,C'D'       DE-ALLOCATION ?
         BE    EXIT020            YES - OK
         LA    R15,4              SET RETURN CODE
EXIT020  EQU   *
         B     ENTRY100           END OF JOB
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        DDNAME
*
*----------------------------------------------------------------------
ENTRY100 DS    0H
         CLC   DYNDDNM,ZEROS      DD NAME REQUESTED ?
         BE    EXIT100            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALDDNAM        KEY FOR DDNAME
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'8'     MOVE 8 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(8),DYNDDNM DDNAME
         LA    R8,14(R8)          BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT100  EQU   *
         S     R2,=F'8'           SUBTRACT LENGTH OF DDNAME
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY110
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        DSNAME
*
*----------------------------------------------------------------------
ENTRY110 DS    0H
         CLC   DYNDSN,ZEROS       DATA SET NAME REQUESTED ?
         BE    EXIT110            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALDSNAM        KEY FOR DSNAME
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'44'    MOVE 44 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(44),DYNDSN DSNAME
         LA    R8,50(R8)          BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT110  EQU   *
         S     R2,=F'44'          SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY120
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        MEMBER NAME
*
*----------------------------------------------------------------------
ENTRY120 DS    0H
         CLC   DYNMBR,ZEROS       MEMBER NAME REQUESTED ?
         BE    EXIT120            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALMEMBR        KEY FOR MEMBER NAME
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'8'     MOVE 8 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(8),DYNMBR MEMBER NAME
         LA    R8,14(R8)          BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT120  EQU   *
         S     R2,=F'8'           SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY130
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        DATA SET STATUS
*
*----------------------------------------------------------------------
ENTRY130 DS    0H
         CLI   DYNDISP1,X'00'     ANY SPECIFIED ?
         BE    EXIT130            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALSTATS        KEY FOR DSN STATUS
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'1'     MOVE 1 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(1),DYNDISP1  MOVE DISPOSITON INDICATOR
         LA    R8,7(R8)           BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT130  EQU   *
         S     R2,=F'1'           SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY140
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        NORMAL DISPOSTION
*
*----------------------------------------------------------------------
ENTRY140 DS    0H
         CLI   DYNDISP2,X'00'     ANY SPECIFIED ?
         BE    EXIT140            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALNDISP        KEY FOR DSN NORMAL DISP
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'1'     MOVE 1 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(1),DYNDISP2  NORMAL DISPOSITION
         LA    R8,7(R8)           BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT140  EQU   *
         S     R2,=F'1'           SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY150
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        CONDITIONAL DISPOSITION
*
*----------------------------------------------------------------------
ENTRY150 DS    0H
         CLI   DYNDISP3,X'00'     ANY SPECIFIED ?
         BE    EXIT150            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALCDISP        KEY FOR DSN CONDITIONAL DISP
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'1'     MOVE 1 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(1),DYNDISP3  MOVE DISPOSITION INDICATOR
         LA    R8,7(R8)           BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT150  EQU   *
         S     R2,=F'1'           SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY160
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        ALLOCATION IN TRACKS
*
*----------------------------------------------------------------------
ENTRY160 DS    0H
         CLC   DYNBTC,=C'TRK'     TRACKS SPECIFIED ?
         BNE   EXIT160            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALTRK          KEY FOR TRACK ALLOCATION
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'0'     MOVE 0 TO TXT UNIT NUMBR FLD
         LA    R8,4(R8)           BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT160  EQU   *
         B     ENTRY170
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        ALLOCATION IN CYLINDERS
*
*----------------------------------------------------------------------
ENTRY170 DS    0H
         CLC   DYNBTC,=C'CYL'     CYLINDERS SPECIFIED ?
         BNE   EXIT170            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALCYL          KEY FOR CYLINDER ALLOCATION
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'0'     MOVE 0 TO TXT UNIT NUMBR FLD
         LA    R8,4(R8)           BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT170  EQU   *
         B     ENTRY180
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        ALLOCATION IN BLOCKS
*
*----------------------------------------------------------------------
ENTRY180 DS    0H
         CLC   DYNBTC,=C'BLK'     BLOCKS SPECIFIED ?
         BNE   EXIT180            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALBLKLN        KEY FOR BLOCK ALLOCATION
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'3'     MOVE 3 TO TXT UNIT LNGTH FLD
         MVI   S99TUPAR,X'00'
         MVC   S99TUPAR+1(2),DYNBLKSZ  MOVE BLOCK SIZE
         LA    R8,9(R8)           BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT180  EQU   *
         S     R2,=F'3'           SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY190
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        PRIMARY ALLOCATION
*
*----------------------------------------------------------------------
ENTRY190 DS    0H
         CLC   DYNPRIM,ZEROS      ANY SPECIFIED ?
         BE    EXIT190            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALPRIME        KEY FOR PRIME ALLOCATION
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'3'     MOVE 3 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(3),DYNPRIM  PRIMARY
         LA    R8,9(R8)           BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT190  EQU   *
         S     R2,=F'3'           SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY200
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        SECONDARY ALLOCATION
*
*----------------------------------------------------------------------
ENTRY200 DS    0H
         CLC   DYNSEC,ZEROS       ANY SPECIFIED ?
         BE    EXIT200            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALSECND        KEY FOR SECONDARY ALLOCATION
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'3'     MOVE 3 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(3),DYNSEC SECONDARY
         LA    R8,9(R8)           BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT200  EQU   *
         S     R2,=F'3'           SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY210
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        DIRECTORY BLOCKS
*
*----------------------------------------------------------------------
ENTRY210 DS    0H
         CLC   DYNDIR,ZEROS       ANY SPECIFIED ?
         BE    EXIT210            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALDIR          KEY FOR DIRECTORY ALLOCATION
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'3'     MOVE 3 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(3),DYNDIR DIRECTORY BLOCKS
         LA    R8,9(R8)           BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT210  EQU   *
         S     R2,=F'3'           SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY220
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        RLSE PARAMETER
*
*----------------------------------------------------------------------
ENTRY220 DS    0H
         CLI   DYNRLSE,X'00'      ANY SPECIFIED ?
         BE    EXIT220            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALRLSE         KEY FOR RLSE OPTION
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'0'     MOVE 0 TO TXT UNIT NUMBR FLD
         LA    R8,4(R8)           BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT220  EQU   *
         S     R2,=F'1'           SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY230
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        ROUND PARAMETER
*
*----------------------------------------------------------------------
ENTRY230 DS    0H
         CLI   DYNROUND,X'00'     ANY SPECIFIED ?
         BE    EXIT230            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALROUND        KEY FOR ROUND ALLOCATION
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'0'     MOVE 0 TO TXT UNIT NUMBR FLD
         LA    R8,4(R8)           BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT230  EQU   *
         S     R2,=F'1'           SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY240
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        VOLSER
*
*----------------------------------------------------------------------
ENTRY240 DS    0H
         CLC   DYNVOLSR,ZEROS     ANY SPECIFIED ?
         BE    EXIT240            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT PARAMETER
         LA    R1,DALVLSER        KEY FOR VOL SER ALLOCATION
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'6'     MOVE 6 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(6),DYNVOLSR  VOLSER
         LA    R8,12(R8)          BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT240  EQU   *
         S     R2,=F'6'           SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY250
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        UNIT
*
*----------------------------------------------------------------------
ENTRY250 DS    0H
         CLC   DYNUNIT,ZEROS      ANY SPECIFIED ?
         BE    EXIT250            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALUNIT         KEY FOR UNIT ALLOCATION
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'8'     MOVE 8 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(8),DYNUNIT UNIT NAME
         LA    R8,14(R8)          BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT250  EQU   *
         S     R2,=F'8'           SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY260
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        SYSOUT CLASS
*
*----------------------------------------------------------------------
ENTRY260 DS    0H
         CLI   DYNSYSOU,X'00'     ANY SPECIFIED ?
         BE    EXIT260            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALSYSOU        KEY FOR SYSOUT CLASS
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         CLI   DYNSYSOU,C'*'      DEFAULT TO MSGCLASS ?
         BNE   AAA260             NO - OK
         MVC   S99TUNUM,=H'0'     MOVE 0 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'0'     MOVE 0 TO TXT UNIT LNGTH FLD
         LA    R8,6(R8)           BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
         B     EXIT260
AAA260   EQU   *
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'1'     MOVE 1 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(8),DYNSYSOU  SYSOUT CLASS
         LA    R8,9(R8)           BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT260  EQU   *
         S     R2,=F'1'           SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY270
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        SYSOUT PROGRAM NAME
*
*----------------------------------------------------------------------
ENTRY270 DS    0H
         CLC   DYNSPGNM,ZEROS     ANY SPECIFIED ?
         BE    EXIT270            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALSPGNM        KEY FOR SYSOUT PROGRAM NAME
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'8'     MOVE 8 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(8),DYNSPGNM  SYSOUT WRITER NAME
         LA    R8,14(R8)          BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT270  EQU   *
         S     R2,=F'8'           SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY280
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        FREE=CLOSE
*
*----------------------------------------------------------------------
ENTRY280 DS    0H
         CLI   DYNFREE,X'00'      ANY SPECIFIED ?
         BE    EXIT280            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALCLOSE        KEY FOR FREE=CLOSE
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'0'     MOVE 0 TO TXT UNIT NUMBR FLD
         LA    R8,4(R8)           BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT280  EQU   *
         S     R2,=F'1'           SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY290
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        TERMINAL
*
*----------------------------------------------------------------------
ENTRY290 DS    0H
         CLI   DYNTERM,X'00'      ANY SPECIFIED ?
         BE    EXIT290            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALTERM         KEY FOR TERMINAL
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'0'     MOVE 0 TO TXT UNIT NUMBR FLD
         LA    R8,4(R8)           BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT290  EQU   *
         S     R2,=F'1'           SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY300
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        BLOCK SIZE
*
*----------------------------------------------------------------------
ENTRY300 DS    0H
         CLC   DYNBLKSZ,ZEROS     ANY SPECIFIED ?
         BE    EXIT300            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALBLKSZ        KEY FOR BLKSIZE
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'2'     MOVE 2 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(2),DYNBLKSZ  BLKSIZE
         LA    R8,8(R8)           BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT300  EQU   *
         S     R2,=F'2'           SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY310
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        LRECL
*
*----------------------------------------------------------------------
ENTRY310 DS    0H
         CLC   DYNLRECL,ZEROS     ANY SPECIFIED ?
         BE    EXIT310            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALLRECL        KEY FOR LRECL
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'2'     MOVE 2 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(2),DYNLRECL  LRECL
         LA    R8,8(R8)           BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT310  EQU   *
         S     R2,=F'2'           SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY320
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        RECORD FORMAT
*
*----------------------------------------------------------------------
ENTRY320 DS    0H
         CLI   DYNRECFM,X'00'     ANY SPECIFIED ?
         BE    EXIT320            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALRECFM        KEY FOR RECFM
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'1'     MOVE 1 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(1),DYNRECFM RECORD FORMAT
         LA    R8,7(R8)           BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT320  EQU   *
         S     R2,=F'1'           SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY330
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        DD DUMMY
*
*----------------------------------------------------------------------
ENTRY330 DS    0H
         CLI   DYNDUMMY,X'00'     ANY SPECIFIED ?
         BE    EXIT330            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALDUMMY        KEY FOR DUMMY
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'0'     MOVE 0 TO TXT UNIT NUMBR FLD
         LA    R8,4(R8)           BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT330  EQU   *
         S     R2,=F'1'           SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY340
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        DYNUNALC - DE-ALLOCATE EVEN IF 'PERM' ATTRIBUTE IS ON
*
*----------------------------------------------------------------------
ENTRY340 DS    0H
         CLI   DYNUNALC,X'00'     ANY SPECIFIED ?
         BE    EXIT340            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DUNUNALC        KEY FOR UNALC
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'0'     MOVE 0 TO TXT UNIT NUMBR FLD
         LA    R8,4(R8)           BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT340  EQU   *
         S     R2,=F'1'           SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY350
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        DYNDEST - REMOTE DEST ID
*
*----------------------------------------------------------------------
ENTRY350 DS    0H
         CLI   DYNDEST,X'00'      ANY SPECIFIED ?
         BE    EXIT350            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALSUSER        KEY FOR DESTINATION
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 0 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'8'     MOVE 8 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(8),DYNDEST DESTINATION ID
         LA    R8,14(R8)          BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT350  EQU   *
         S     R2,=F'8'           SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY360
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        DYNFORM - SYSOUT FORM NUMBER
*
*----------------------------------------------------------------------
ENTRY360 DS    0H
         CLI   DYNFORM,X'00'      ANY SPECIFIED ?
         BE    EXIT360            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALSFMNO        KEY FOR FORM
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'4'     MOVE 4 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(4),DYNFORM DESTINATION ID
         LA    R8,10(R8)          BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT360  EQU   *
         S     R2,=F'4'           SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY370
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        DYNCOPYS - SYSOUT NUMBER OF COPIES
*
*----------------------------------------------------------------------
ENTRY370 DS    0H
         CLI   DYNCOPYS,X'00'     ANY SPECIFIED ?
         BE    EXIT370            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALCOPYS        KEY FOR COPIES
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'1'     MOVE 1 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(1),DYNCOPYS DESTINATION ID
         LA    R8,7(R8)           BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT370  EQU   *
         S     R2,=F'1'           SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY380
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        DYNFCB   - FCB IMAGE NAME
*
*----------------------------------------------------------------------
ENTRY380 DS    0H
         CLI   DYNFCB,X'00'       ANY SPECIFIED ?
         BE    EXIT380            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALFCBIM        KEY FOR FCB
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'4'     MOVE 4 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(4),DYNFCB FCB NAME
         LA    R8,10(R8)          BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT380  EQU   *
         S     R2,=F'4'           SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY390
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        DYNRTDD  - RETURN THE DDNAME ALLOCATED
*
*----------------------------------------------------------------------
ENTRY390 DS    0H
         CLI   DYNRTDD,X'00'      ANY SPECIFIED ?
         BE    EXIT390            NO - SKIP
         STCM  R8,15,S99TUPTR     TEXT UNIT POINTER
         LA    R1,DALRTDDN        KEY FOR RETURN DDNAME
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'8'     MOVE 8 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(8),=8C' '  INITIALIZE TO BLANKS
         LA    R4,S99TUPAR        SAVE THIS ADDR FOR LATER
         LA    R8,14(R8)          BUMP TO NEXT TEXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
EXIT390  EQU   *
         S     R2,=F'8'           SUBTRACT LENGTH OF THIS FIELD
         BNP   ENTRY800           DONE IF ZERO OR LESS
         B     ENTRY800
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        CONCATENATE DATA SETS
*
*----------------------------------------------------------------------
ENTRY700 DS    0H
         LA    R3,DYNDDNM         BUMP TO FIRST DDNAME IN LIST
         STCM  R8,15,S99TUPTR     TEXT POINTER UNIT
         LA    R1,DCCDDNAM        KEY FOR DDNAME
         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD
         XR    R6,R6              CLEAR COUNTER
         LA    R5,S99TUNUM        ADDR OF TEXT UNIT NUMBER FIELD
LOOP700A EQU   *
         CLI   0(R3),X'FF'        END OF DDNAMES ?
         BE    AAA700
         LA    R6,1(R6)           COUNT DDNAMES
         MVC   S99TULNG,=H'8'     MOVE 8 TO TEXT UNIT LENGTH
         MVC   S99TUPAR(8),0(R3)  MOVE DDNAME
         LA    R3,8(R3)           BUMP DDNAME LIST
         LA    R8,10(R8)          BUMP TEXT FIELDS
         B     LOOP700A
AAA700   EQU   *
         STCM  R6,3,0(R5)         STORE NUMBER OF DDNAMES
         LA    R9,4(R9)           BUMP BECAUSE OF DECR IN 800 BELOW
EXIT700  EQU   *
         B     ENTRY800
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        SVC 99
*
*----------------------------------------------------------------------
ENTRY800 DS    0H
         S     R9,=F'4'           BACKUP 4 BYTES
         OI    S99TUPTR,S99TUPLN  TURN ON HOB TO INIDICATE LAST PTR
         LR    R1,R11             ADDR OF REQUEST BLOCK
         DYNALLOC
         LTR   R15,R15            RETURN CODE ZERO ?
         BNZ   ERROR1             NO - DECODE ERROR
         CLI   DYNRTDD,X'00'      RETURN DD NAME REQUESTED ?
         BE    AAA800             NO - OK
         MVC   DYNRTDD,0(R4)      YES - MOVE IT TO THE CALLERS AREA
         MVC   DYNDDNM,0(R4)      YES - MOVE IT TO THE CALLERS AREA
AAA800   EQU   *
         MVC   DYNR15,=4C'0'      YES - SET ALL INDICATORS TO ZERO
         MVC   DYNERR,=4C'0'
         MVC   DYNINFO,=4C'0'
EXIT800  EQU   *
         B     EOJ
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        EOJ AND CLEAN-UP
*
*----------------------------------------------------------------------
EOJ      DS    0H
         $EPILOG
         EJECT
*----------------------------------------------------------------------
*
*        ERROR ROUTINES
*
*----------------------------------------------------------------------
ERROR1   DS    0H
         CVD   R15,DYNWRK
         UNPK  DYNR15,DYNWRK+6(2)
         OI    DYNR15+3,X'F0'
*
         UNPK  DYNWRK(5),S99ERROR(3)  1 MORE THAN FIELD SIZE
         TR    DYNWRK(4),TRTBL-240  TRANSLATE
         MVC   DYNERR,DYNWRK       MOVE TO ERROR SLOT
*
         UNPK  DYNWRK(5),S99INFO(3)
         TR    DYNWRK(4),TRTBL-240  TRANSLATE
         MVC   DYNINFO,DYNWRK
         B     EOJ
         EJECT
*----------------------------------------------------------------------
*
*        CONSTANTS
*
*----------------------------------------------------------------------
TRTBL    DC    C'0123456789ABCDEF'
ZEROS    DC    44X'00'
*----------------------------------------------------------------------
*
*        DSECTS
*
*----------------------------------------------------------------------
DYNPARMS $ALLOC   DSECT=YES,CSECT=NO
         EJECT
         IEFZB4D0
         EJECT
         IEFZB4D2
RBLEN    EQU   (S99RBEND-S99RB)
         END
./ ADD  NAME=CMNBA00
*----------------------------------------------------------------------
*
*        BOB BECKER MAR ,1981
*
*        SPF BACKGROUND COMPRESS DIALOG MANAGER
*
*----------------------------------------------------------------------
         EJECT
CMNBA00  $PROLOG R12,R11,GM=N
         EJECT
*----------------------------------------------------------------------
*        DEFINE VARIABLES
*----------------------------------------------------------------------
ENTRY010 DS    0H
         SPFVDEF 48,(CMNBAJC1,CMNBAJC2,CMNBAJC3)
         SPFVDEF 8,(CMNBAPRJ,CMNBALIB,CMNBATYP,CMNBAOUT,ZPREFIX,ZUSER, +
               CMNB@JNU)
         SPFVDEF 44,(ZTEMPF,CMNBAOTH,SAVEOLIB)
         SPFVDEF 1,(DYNTYPE),DC=NO
         SPFVDEF 8,(DYNDDNM),DC=NO
         SPFVDEF 44,(DYNDSN),DC=NO
         SPFVDEF 4,(DYNERR),DC=NO
EXIT010  EQU   *
         EJECT
*----------------------------------------------------------------------
*        GET PROFILE/SHARED VARIABLES
*----------------------------------------------------------------------
ENTRY020 DS    0H
         SPFVGET (ZTEMPF,ZPREFIX,ZUSER),SHARED
         SPFVGET (CMNBAPRJ,CMNBALIB,CMNBATYP,CMNBAOUT,CMNBAJC1,        +
               CMNBAJC2,CMNBAJC3),PROFILE
EXIT020  EQU   *
         EJECT
*----------------------------------------------------------------------
*        DISPLAY FIRST PANEL
*----------------------------------------------------------------------
ENTRY030 DS    0H
         SPFDSPLY CMNBA00,,CMNBATYP,,ENTRY810
EXIT030  EQU   *
         EJECT
*----------------------------------------------------------------------
*        CHECK FOR OUTPUT CLASS
*----------------------------------------------------------------------
ENTRY040 DS    0H
         CLI   CMNBAOUT,C' '      CLASS SPECIFIED ?
         BNE   EXIT040            YES - OK
         SPFDSPLY CMNBA00,CMN003,CMNBAOUT,ENTRY040,ENTRY810
EXIT040  EQU   *
         EJECT
*----------------------------------------------------------------------
*        OTHER LIBRARY NAME
*----------------------------------------------------------------------
ENTRY050 DS    0H
         CLI   CMNBAOTH,C' '      ANY SPECIFIED ?
         BE    EXIT050            NO - OK
         CLI   CMNBAOTH,C'^'      SKIP THIS ONE ?
         BE    EXIT050            YES - OK
         SPFDSN CMNBAOTH,SAVEOLIB
         BZ    EXIT050            VALID NAME
         SPFDSPLY CMNBA00,CMN002,CMNBAOTH,ENTRY040,ENTRY810
EXIT050  EQU   *
         EJECT
*----------------------------------------------------------------------
*        FILE TAILOR
*----------------------------------------------------------------------
ENTRY060 DS    0H
         SPFTAILR CMNBA00
EXIT060  EQU   *
         EJECT
*----------------------------------------------------------------------
*        SUBMIT THE JOB
*----------------------------------------------------------------------
ENTRY070 DS    0H
         SPFSUB ZTEMPF,,CMNB@JNU
EXIT070  EQU   *
         EJECT
*----------------------------------------------------------------------
*        UPDATE THE JOB CARD
*----------------------------------------------------------------------
ENTRY700 DS    0H
         SPFJOBNM CMNBAJC1
EXIT700  EQU   *
         EJECT
*----------------------------------------------------------------------
*        DISPLAY MESSAGE
*----------------------------------------------------------------------
ENTRY800 DS    0H
         MVC   CMNBAOTH,BLANKS    CLEAR
         SPFDSPLY CMNBA00,CMN005,CMNBATYP,ENTRY050,ENTRY810
         EJECT
*----------------------------------------------------------------------
*        PUT PROFILE VARIABLES AND EXIT
*----------------------------------------------------------------------
ENTRY810 DS    0H
         SPFVPUT (CMNBAPRJ,CMNBALIB,CMNBATYP,CMNBAOUT,CMNBAJC1,        +
               CMNBAJC2,CMNBAJC3),PROFILE
EXIT810  EQU   *
         EJECT
*----------------------------------------------------------------------
*        END OF JOB
*----------------------------------------------------------------------
EOJ      DS    0H
         ICM   R15,15,DYNEPA       IS IT LOADED ?
         BZ    EOJ1                NO - SKIP DELETE
         DELETE  EP=ALLOCRTN
EOJ1     EQU   *
         LA    R15,0
         $EPILOG
         EJECT
*----------------------------------------------------------------------
*        STORAGE AREAS
*----------------------------------------------------------------------
BLANKS   DC    CL101' '
*----------------------------------------------------------------------
         EJECT
SPFMACS  SPFCMDS   FILES=YES
         EJECT
DYNPARMS $ALLOC
         END
./ ADD  NAME=CMNBC00
*----------------------------------------------------------------------
*
*        BOB BECKER MAR ,1981
*
*        SPF BACKGROUND COMPILER DIALOG MANAGER
*
*----------------------------------------------------------------------
         EJECT
CMNBC00 $PROLOG R12,R11,R10,GM=N
         EJECT
*----------------------------------------------------------------------
*        DEFINE VARIABLES
*----------------------------------------------------------------------
ENTRY010 DS    0H
         SPFVDEF 48,(CMNBCJC1,CMNBCJC2,CMNBCJC3)
         SPFVDEF 16,(CMNBCFOP)
         SPFVDEF 8,(CMNCCPRJ,CMNCCLIB,CMNCCTYP,CMNCCMBR,CMNCCCMP,      +
               CMNBCOUT,CMNCCLK2,CMNBCPGM,ZPREFIX,ZUSER,CMNB@JNU,      +
               PLSPARM)
         SPFVDEF 44,(CMNCCMA1,CMNCCMA2,CMNCCMA3,CMNCCMA4,CMNCCMA5,     +
               CMNCCMA6,CMNBCAFO,CMNBCAHO,CMNBCCBO,CMNBCFGO,           +
               CMNBCFHO,CMNBCPFO,CMNBCPOO,CMNBCCOP,CMNCCLOP)
         SPFVDEF 44,(CMNCCLK1,CMNCCSU1,CMNCCSU2,CMNCCSU3,CMNCCSU4,     +
               CMNCCSU5,CMNCCSU6,CMNCCMOD,CMNCCOTH,SRCDSN,ZTEMPF)
         SPFVDEF 44,(SAVEMAC1,SAVEMAC2,SAVEMAC3,SAVEMAC4,SAVEMAC5,     +
               SAVEMAC6)
         SPFVDEF 44,(SAVELK1,SAVESUB1,SAVESUB2,SAVESUB3,SAVESUB4,      +
               SAVESUB5,SAVESUB6,SAVEMOD)
         SPFVDEF 1,(CMNBCLNK,CMNBCPLS)
*
         SPFVDEF 1,(DYNTYPE),DC=NO
         SPFVDEF 8,(DYNDDNM),DC=NO
         SPFVDEF 44,(DYNDSN),DC=NO
         SPFVDEF 4,(DYNERR),DC=NO
EXIT010  EQU   *
         EJECT
*----------------------------------------------------------------------
*        GET PROFILE/SHARED VARIABLES
*----------------------------------------------------------------------
ENTRY020 DS    0H
         SPFVGET (ZTEMPF,ZPREFIX,ZUSER),SHARED
         SPFVGET (CMNBCJC1,CMNBCJC2,CMNBCJC3,CMNCCPRJ,CMNCCLIB,        +
               CMNCCTYP,CMNCCCMP,CMNCCLK2,CMNCCLK1,CMNCCMA1,CMNCCMA2,  +
               CMNCCMA3,CMNCCMA4,CMNCCMA5,CMNCCMA6),PROFILE
         SPFVGET (CMNCCSU1,CMNCCSU2,CMNCCSU3,CMNCCSU4,CMNCCSU5,        +
               CMNCCSU6,CMNCCOTH,CMNCCMOD,CMNBCOUT,CMNBCFOP,CMNBCAHO,  +
               CMNBCCBO,CMNBCFGO,CMNBCFHO,CMNBCPFO,CMNBCPOO,CMNCCLOP), +
               PROFILE
EXIT020  EQU   *
         EJECT
*----------------------------------------------------------------------
*        DISPLAY FIRST PANEL
*----------------------------------------------------------------------
ENTRY030 DS    0H
         SPFDSPLY CMNBC00,,CMNCCMBR,,ENTRY810
EXIT030  EQU   *
         EJECT
*----------------------------------------------------------------------
*  VERIFY/BUILD DATA SET NAME FOR SOURCE
*----------------------------------------------------------------------
ENTRY040 DS    0H
         CLI   CMNCCOTH,C'^'      IGNORE OTHER DSN ?
         BE    AAA040             YES - OK
         CLI   CMNCCOTH,C' '      ANY SPECIFIED ?
         BNE   EXIT040            YES - SKIP PRJ LIB TYPE
AAA040   EQU   *
         SPFPLT CMNCCPRJ,CMNCCLIB,CMNCCTYP,SRCDSN
EXIT040  EQU   *
         EJECT
*----------------------------------------------------------------------
*        CHECK FOR MEMBER NAME
*----------------------------------------------------------------------
ENTRY050 DS    0H
         CLI   CMNCCOTH,C'^'      IGNORE OTHER DSN ?
         BE    EXIT050            YES - OK
         CLI   CMNCCOTH,C' '      OTHER SPECIFIED ?
         BNE   EXIT050            YES - OK
         CLI   CMNCCMBR,C' '      MEMBER SPECIFIED ?
         BNE   EXIT050            YES - OK
         SPFDSPLY ,CMN003,CMNCCMBR,ENTRY040,ENTRY810
EXIT050  EQU   *
         EJECT
*----------------------------------------------------------------------
*        CHECK FOR OTHER DSN
*----------------------------------------------------------------------
ENTRY060 DS    0H
         CLI   CMNCCOTH,C' '      ANY SPECIFIED ?
         BE    EXIT060            NO - OK
         CLI   CMNCCOTH,C'^'      IGNORE IT ?
         BE    EXIT060            YES - OK
         SPFDSN CMNCCOTH,SRCDSN,CMNCCMBR
EXIT060  EQU   *
         EJECT
*----------------------------------------------------------------------
*        CHECK FOR OUTPUT CLASS
*----------------------------------------------------------------------
ENTRY070 DS    0H
         CLI   CMNBCOUT,C' '      CLASS SPECIFIED ?
         BNE   EXIT070            YES - OK
         SPFDSPLY ,CMN003,CMNBCOUT,ENTRY040,ENTRY810
EXIT070  EQU   *
         EJECT
*----------------------------------------------------------------------
*        DETERMINE LANGUAGE
*----------------------------------------------------------------------
ENTRY080 DS    0H
         CLC   CMNCCCMP,=CL8'ASMH'
         BNE   AAA080
         MVC   CMNBCPGM,ASMH
         MVC   PLSPARM,PLSASMH
         MVC   CMNBCFOP,CMNCAHX   MOVE FIXED OPTIONS
         MVC   CMNBCCOP,CMNBCAHO  MOVE USERS OPTIONS
         CLI   CMNBCPGM,C'?'      PGM SUPPORTED ?
         BE    GGG080             NO - INFORM USER
         B     EXIT080
AAA080   EQU   *
         CLC   CMNCCCMP,=CL8'COBOL'
         BNE   BBB080
         MVC   CMNBCPGM,COBOL
         MVC   PLSPARM,PLSCOBL
         MVC   CMNBCFOP,CMNCCBX   MOVE FIXED OPTIONS
         MVC   CMNBCCOP,CMNBCCBO  MOVE USERS OPTIONS
         CLI   CMNBCPGM,C'?'      PGM SUPPORTED ?
         BE    GGG080             NO - INFORM USER
         B     EXIT080
BBB080   EQU   *
         CLC   CMNCCCMP,=CL8'FORTG'
         BNE   CCC080
         MVC   CMNBCPGM,FORTG
         MVC   PLSPARM,PLSFORTG
         MVC   CMNBCFOP,CMNCFGX   MOVE FIXED OPTIONS
         MVC   CMNBCCOP,CMNBCFGO  MOVE USERS OPTIONS
         CLI   CMNBCPGM,C'?'      PGM SUPPORTED ?
         BE    GGG080             NO - INFORM USER
         B     EXIT080
CCC080   EQU   *
         CLC   CMNCCCMP,=CL8'FORTH'
         BNE   DDD080
         MVC   CMNBCPGM,FORTH
         MVC   PLSPARM,PLSFORTH
         MVC   CMNBCFOP,CMNCFHX   MOVE FIXED OPTIONS
         MVC   CMNBCCOP,CMNBCFHO  MOVE USERS OPTIONS
         CLI   CMNBCPGM,C'?'      PGM SUPPORTED ?
         BE    GGG080             NO - INFORM USER
         B     EXIT080
DDD080   EQU   *
         CLC   CMNCCCMP,=CL8'ASMF'
         BNE   EEE080
         MVC   CMNBCPGM,ASMF
         MVC   PLSPARM,PLSASMF
         MVC   CMNBCFOP,CMNCAFX   MOVE FIXED OPTIONS
         MVC   CMNBCCOP,CMNBCAFO  MOVE USERS OPTIONS
         CLI   CMNBCPGM,C'?'      PGM SUPPORTED ?
         BE    GGG080             NO - INFORM USER
         B     EXIT080
EEE080   EQU   *
         CLC   CMNCCCMP,=CL8'PL1O'
         BNE   FFF080
         MVC   CMNBCPGM,PL1O
         MVC   PLSPARM,PLSPL1O
         MVC   CMNBCFOP,CMNCPOX   MOVE FIXED OPTIONS
         MVC   CMNBCCOP,CMNBCPOO  MOVE USERS OPTIONS
         CLI   CMNBCPGM,C'?'      PGM SUPPORTED ?
         BE    GGG080             NO - INFORM USER
         B     EXIT080
FFF080   EQU   *
         CLC   CMNCCCMP,=CL8'PL1F'
         BNE   HHH080
         MVC   CMNBCPGM,PL1F
         MVC   PLSPARM,PLSPL1F
         MVC   CMNBCFOP,CMNCPFX   MOVE FIXED OPTIONS
         MVC   CMNBCCOP,CMNBCPFO  MOVE USERS OPTIONS
         CLI   CMNBCPGM,C'?'      PGM SUPPORTED ?
         BE    GGG080             NO - INFORM USER
         B     EXIT080
GGG080   EQU   *
         SPFDSPLY ,CMN009,CMNCCCMP,ENTRY040,ENTRY700
HHH080   EQU   *
         SPFDSPLY ,CMN008,CMNCCCMP,ENTRY040,ENTRY700
EXIT080  EQU   *
         B     ENTRY090
ASMF     DC    CL8'IFOX00'
PLSASMF  DC    CL8'ASMFCL'
CMNCAFX  DC    CL16'DECK,NOLOAD'
ASMH     DC    CL8'IEV90'
PLSASMH  DC    CL8'ASMFCL'
CMNCAHX  DC    CL16'DECK,NOLOAD'
COBOL    DC    CL8'IKFCBL00'
PLSCOBL  DC    CL8'COBUCL'
CMNCCBX  DC    CL16'DECK,NOLOAD'
FORTG    DC    CL8'IGIFORT'
PLSFORTG DC    CL8'FORTGCL'
CMNCFGX  DC    CL16'DECK,NOLOAD'
FORTH    DC    CL8'IFEAAB'
PLSFORTH DC    CL8'FORTHCL'
CMNCFHX  DC    CL16'DECK,NOLOAD'
PL1O     DC    CL8'*PL1O*'
PLSPL1O  DC    CL8'PL1OCL'
CMNCPOX  DC    CL16'DECK,NOLOAD'
PL1F     DC    CL8'*PL1F*'
PLSPL1F  DC    CL8'PL1LFCL'
CMNCPFX  DC    CL16'DECK,NOLOAD'
         EJECT
*----------------------------------------------------------------------
*        DISPLAY LINK-EDIT MENU
*----------------------------------------------------------------------
ENTRY090 DS    0H
         MVI   CMNBCPLS,C' '      RESET
         MVI   CMNBCLNK,C' '      RESET
         SPFDSPLY CMNBC10,,CMNCCLOP,,ENTRY120
         MVI   CMNBCLNK,C'1'      YES - SET FLAG
EXIT090  EQU   *
         EJECT
*----------------------------------------------------------------------
*        SHOULD WE USE PLSCALL ?
*----------------------------------------------------------------------
ENTRY100 DS    0H
         LA    R1,PLSLIBS         ADDR OF LIBS SUPPORTED BY PLS
LOOP100A EQU   *
         CLC   0(24,R1),CMNCCMOD  IS SYSLMOD A PLS LIB ?
         BE    AAA100             YES - USE PLSCALL
         LA    R1,24(R1)          BUMP
         CLI   0(R1),X'FF'        END OF TABLE ?
         BE    EXIT100            YES - OK
         B     LOOP100A           NO - CHK REST OF TABLE
AAA100   EQU   *
         MVC   CMNBCPGM,=CL8'PLSCALL' USE THE PLSCALL BPGM
         MVI   CMNBCPLS,C'1'      SET FLAG
EXIT100  EQU   *
         B     ENTRY110
PLSLIBS  EQU *
         DC    CL24'''AB.LINKLIB'''
         DC    CL24'''AB.PRODCTIN'''
         DC    CL24'''AB.LOADMODS'''
         DC    CL24'''AB.TELEPROC'''
         DC    CL24'''IMSVS.PGMLIB'''
         DC    CL24'''AA.TPS.PGMLIB'''
         DC    CL24'''AB.TPDRIVER'''
         DC    X'FFFF'
         EJECT
*----------------------------------------------------------------------
*        CHECK FOR LINK MEMBER=
*----------------------------------------------------------------------
ENTRY110 DS    0H
         MVC   SAVELK2,CMNCCLK2   SAVE
         CLI   CMNCCLK2,C' '      USE SAME AS INPUT ?
         BNE   EXIT110            NO - OK
         MVC   CMNCCLK2,CMNCCMBR  MOVE MEMBER
EXIT110  EQU   *
         EJECT
*----------------------------------------------------------------------
*        MACLIBS/SUBLIBS
*----------------------------------------------------------------------
ENTRY120 DS    0H
         CLI   CMNCCMA1,C' '      ANY SPECIFIED ?
         BE    AAA120             NO - OK
         CLI   CMNCCMA1,C'^'      SKIP THIS ONE ?
         BE    AAA120             NO - OK
         SPFDSN CMNCCMA1,SAVEMAC1
AAA120   EQU   *
         CLI   CMNCCMA2,C' '      ANY SPECIFIED ?
         BE    BBB120             NO - OK
         CLI   CMNCCMA2,C'^'      SKIP THIS ONE ?
         BE    BBB120             NO - OK
         SPFDSN CMNCCMA2,SAVEMAC2
BBB120   EQU   *
         CLI   CMNCCMA3,C' '      ANY SPECIFIED ?
         BE    CCC120             NO - OK
         CLI   CMNCCMA3,C'^'      SKIP THIS ONE ?
         BE    CCC120             NO - OK
         SPFDSN CMNCCMA3,SAVEMAC3
CCC120   EQU   *
         CLI   CMNCCMA4,C' '      ANY SPECIFIED ?
         BE    DDD120             NO - OK
         CLI   CMNCCMA4,C'^'      SKIP THIS ONE ?
         BE    DDD120             NO - OK
         SPFDSN CMNCCMA4,SAVEMAC4
DDD120   EQU   *
         CLI   CMNCCMA5,C' '      ANY SPECIFIED ?
         BE    EEE120             NO - OK
         CLI   CMNCCMA5,C'^'      SKIP THIS ONE ?
         BE    EEE120             NO - OK
         SPFDSN CMNCCMA5,SAVEMAC5
EEE120   EQU   *
         CLI   CMNCCMA6,C' '      ANY SPECIFIED ?
         BE    FFF120             NO - OK
         CLI   CMNCCMA6,C'^'      SKIP THIS ONE ?
         BE    FFF120             NO - OK
         SPFDSN CMNCCMA6,SAVEMAC6
FFF120   EQU   *
         CLI   CMNBCLNK,C' '      SKIP LINK ?
         BE    EXIT120            YES - OK
         CLI   CMNCCSU1,C' '      ANY SPECIFIED ?
         BE    GGG120             NO - OK
         CLI   CMNCCSU1,C'^'      SKIP THIS ONE ?
         BE    GGG120             NO - OK
         SPFDSN CMNCCSU1,SAVESUB1
GGG120   EQU   *
         CLI   CMNCCSU2,C' '      ANY SPECIFIED ?
         BE    HHH120             NO - OK
         CLI   CMNCCSU2,C'^'      SKIP THIS ONE ?
         BE    HHH120             NO - OK
         SPFDSN CMNCCSU2,SAVESUB2
HHH120   EQU   *
         CLI   CMNCCSU3,C' '      ANY SPECIFIED ?
         BE    III120             NO - OK
         CLI   CMNCCSU3,C'^'      SKIP THIS ONE ?
         BE    III120             NO - OK
         SPFDSN CMNCCSU3,SAVESUB3
III120   EQU   *
         CLI   CMNCCSU4,C' '      ANY SPECIFIED ?
         BE    JJJ120             NO - OK
         CLI   CMNCCSU4,C'^'      SKIP THIS ONE ?
         BE    JJJ120             NO - OK
         SPFDSN CMNCCSU4,SAVESUB4
JJJ120   EQU   *
         CLI   CMNCCSU5,C' '      ANY SPECIFIED ?
         BE    KKK120             NO - OK
         CLI   CMNCCSU5,C'^'      SKIP THIS ONE ?
         BE    KKK120             NO - OK
         SPFDSN CMNCCSU5,SAVESUB5
KKK120   EQU   *
         CLI   CMNCCSU6,C' '      ANY SPECIFIED ?
         BE    LLL120             NO - OK
         CLI   CMNCCSU6,C'^'      SKIP THIS ONE ?
         BE    LLL120             NO - OK
         SPFDSN CMNCCSU6,SAVESUB6
LLL120   EQU   *
         CLI   CMNCCLK1,C' '      ANY SPECIFIED ?
         BE    MMM120             NO - OK
         CLI   CMNCCLK1,C'^'      SKIP THIS ONE ?
         BE    MMM120             NO - OK
         SPFDSN CMNCCLK1,SAVELK1
MMM120   EQU   *
         CLI   CMNCCMOD,C' '      ANY SPECIFIED ?
         BE    EXIT120            NO - OK
         CLI   CMNCCMOD,C'^'      SKIP THIS ONE ?
         BE    EXIT120            NO - OK
         SPFDSN CMNCCMOD,SAVEMOD
EXIT120  EQU   *
         EJECT
*----------------------------------------------------------------------
*        FILE TAILOR
*----------------------------------------------------------------------
ENTRY130 DS    0H
         SPFTAILR CMNBC00
EXIT130  EQU   *
         EJECT
*----------------------------------------------------------------------
*        RESTORE ORIGINAL NAMES
*----------------------------------------------------------------------
ENTRY140 DS    0H
         MVC   CMNCCLK2,SAVELK2
EXIT140  EQU   *
         EJECT
*----------------------------------------------------------------------
*        SUBMIT THE JOB
*----------------------------------------------------------------------
ENTRY150 DS    0H
         SPFSUB ZTEMPF,,CMNB@JNU
EXIT150  EQU   *
         EJECT
*----------------------------------------------------------------------
*        UPDATE THE JOB CARD
*----------------------------------------------------------------------
ENTRY700 DS    0H
         SPFJOBNM CMNBCJC1
EXIT700  EQU   *
         EJECT
*----------------------------------------------------------------------
*        DISPLAY MESSAGE
*----------------------------------------------------------------------
ENTRY800 DS    0H
         SPFDSPLY CMNBC00,CMN005,CMNCCMBR,ENTRY040,ENTRY810
         EJECT
*----------------------------------------------------------------------
*        PUT PROFILE VARIABLES AND EXIT
*----------------------------------------------------------------------
ENTRY810 DS    0H
         SPFVPUT (CMNBCJC1,CMNBCJC2,CMNBCJC3,CMNCCPRJ,CMNCCLIB,        +
               CMNCCTYP,CMNCCCMP,CMNCCLK2,CMNCCLK1,CMNCCMA1,CMNCCMA2,  +
               CMNCCMA3,CMNCCMA4,CMNCCMA5,CMNCCMA6),PROFILE
         SPFVPUT (CMNCCSU1,CMNCCSU2,CMNCCSU3,CMNCCSU4,CMNCCSU5,        +
               CMNCCSU6,CMNCCOTH,CMNCCMOD,CMNBCOUT,CMNBCFOP,CMNBCAHO,  +
               CMNBCCBO,CMNBCFGO,CMNBCFHO,CMNBCPFO,CMNBCPOO,CMNCCLOP), +
               PROFILE
EXIT810  EQU   *
         EJECT
*----------------------------------------------------------------------
*        END OF JOB
*----------------------------------------------------------------------
EOJ      DS    0H
         ICM   R15,15,DYNEPA         LOADED ?
         BZ    EOJ1                  NO - SKIP DELETE
         DELETE  EP=ALLOCRTN
EOJ1     EQU   *
         LA    R15,0
         $EPILOG
         EJECT
*----------------------------------------------------------------------
*        STORAGE AREAS
*----------------------------------------------------------------------
BLANKS   DC    CL101' '
SAVELK2  DC    CL8' '
*----------------------------------------------------------------------
         EJECT
SPFMACS  SPFCMDS FILES=YES
         EJECT
DYNPARMS $ALLOC
         END
./ ADD  NAME=CMNCCS0
*----------------------------------------------------------------------
*
*        BOB BECKER MAR ,1981
*
*        SPF PLS SUB-ROUTINE - RETRIEVE SOURCE FROM A PLS LIBRARY
*
* R2  - LIBDSN
* R3  - MBR
* R4  - TARGET     (NOT REQUIRED FOR DELETE FUNCTION)
* R5  - READ/WRITE/DELETE
*
*----------------------------------------------------------------------
         EJECT
CMNCCS0  $PROLOG R12,GM=N
         EJECT
*----------------------------------------------------------------------
*
*
*
*----------------------------------------------------------------------
ENTRY001 DS    0H
         MVI   FLAG,X'00'      RESET
         TM    0(R1),X'80'     IS THE TARGET A PDS ?
         BZ    AAA001          NO - OK
         OI    FLAG,PDS        YES - SET FLAG
AAA001   EQU   *
         LM    R2,R5,0(R1)     PARMS  LIB MBR TARGET READ/WRITE
         MVC   DYNEPA,=F'0'    CLEAR
         MVC   RC,=F'0'        CLEAR
         MVC   PLSRC,=F'0'     CLEAR
         MVI   PLSPRINT+8,X'00'  RESET
         MVI   PLSINPUT+8,X'00'  RESET
         MVI   PLSWORK+8,X'00'  RESET
         MVI   PLSFILE+8,X'00'  RESET
EXIT001  EQU   *
         B     ENTRY010
FLAG     DC    X'00'
PDS      EQU   X'01'
         EJECT
*----------------------------------------------------------------------
*        PLSPRINT
*----------------------------------------------------------------------
ENTRY010 DS    0H
*TST010  QTPUT 'ENTRY010'
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       LENGTH OF AREA
         MVI   DYNTYPE,C'A'
         MVC   DYNDDNM,PLSPRINT   DDNAME
*        MVI   DYNTERM,X'FF'      INDICATE TERMINAL (TESTING)
         MVI   DYNDUMMY,X'FF'     DD DUMMY
         BAL   R14,ENTRY900       ALLOCATE IT
         CLC   DYNR15,=4C'0'      ANY ERRORS ?
         BE    EXIT010            NO - OK
         MVC   RC,=F'4'
         B     EOJ
EXIT010  EQU   *
         MVI   PLSPRINT+8,X'FF'   INDICATE ALLOCATED
         B     ENTRY020
*----------------------------------------------------------------------
*        PLSFILE
*----------------------------------------------------------------------
ENTRY020 DS    0H
*TST020  QTPUT 'ENTRY020'
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       LENGTH OF AREA
         MVI   DYNTYPE,C'A'
         MVC   DYNDDNM,PLSFILE    DDNAME
         MVC   DYNDSN,0(R2)       DSNAME
         MVI   DYNDISP1,DYNSHR    DISP=SHR
         BAL   R14,ENTRY900       ALLOCATE IT
         CLC   DYNR15,=4C'0'      ANY ERRORS ?
         BE    EXIT020            NO - OK
         MVC   RC,=F'4'
         B     EOJ
EXIT020  EQU   *
         MVI   PLSFILE+8,X'FF'    INDICATE ALLOCATED
         B     ENTRY030
         LTORG
*----------------------------------------------------------------------
*        PLSWORK
*----------------------------------------------------------------------
ENTRY030 DS    0H
*TST030  QTPUT 'ENTRY030'
         LTR   R4,R4              ZERO PARM ?
         BZ    DDD030             YES - USE DD DUMMY
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       LENGTH OF AREA
         MVI   DYNTYPE,C'A'
         MVC   DYNDDNM,PLSWORK    DDNAME
         MVC   DYNDSN,0(R4)       DSNAME
         MVI   DYNDISP1,DYNSHR    DISP=SHR
         TM    FLAG,PDS           IS TARGET A PDS ?
         BZ    AAA030             NO - SKIP MBR
         MVC   DYNMBR,0(R3)       YES - MOVE MEMBER NAME
AAA030   EQU   *
         BAL   R14,ENTRY900       ALLOCATE IT
         CLC   DYNR15,=4C'0'      ANY ERRORS ?
         BE    ZZZ030             NO - OK
         CLC   DYNERR,=4C'1708'   NOT CATALOGED ?
         BE    BBB030             YES - CREATE ONE
         MVC   RC,=F'4'
         B     EOJ
BBB030   EQU   *
*TST030A QTPUT 'BBB030'
         MVI   DYNDISP1,DYNNEW    DISP=NEW,
         MVI   DYNDISP2,DYNCAT    CATLG,
         MVI   DYNDISP3,DYNDEL    DELETE
         MVC   DYNBLKSZ,=H'6160'  BLKSIZE
         MVC   DYNLRECL,=H'80'    LRECL
         MVC   DYNBTC,=C'TRK'     SPACE=(TRK,
         MVC   DYNPRIM,=AL3(10)   10,
         MVC   DYNSEC,=AL3(20)    20,
         MVI   DYNRECFM,DYNFB     RECFM=FB
         TM    FLAG,PDS           IS TARGET A PDS ?
         BZ    CCC030             NO - SKIP DIR BLKS
         MVC   DYNDIR,=AL3(28)    YES - 28 DIR BLKS
CCC030   EQU   *
         BAL   R14,ENTRY900       ALLOCATE IT
         CLC   DYNR15,=4C'0'      ANY ERRORS ?
         BE    ZZZ030             NO - OK
         MVC   RC,=F'4'
         B     EOJ
DDD030   EQU   *
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       LENGTH OF AREA
         MVI   DYNTYPE,C'A'
         MVC   DYNDDNM,PLSWORK    DDNAME
         MVI   DYNDUMMY,X'FF'     DUMMY
         BAL   R14,ENTRY900       ALLOCATE IT
         CLC   DYNR15,=4C'0'      ANY ERRORS ?
         BE    ZZZ030             NO - OK
         MVC   RC,=F'4'
         B     EOJ
ZZZ030   EQU   *
         MVI   PLSWORK+8,X'FF'    INDICATE ALLOCATED
EXIT030  EQU   *
*----------------------------------------------------------------------
*        PLSINPUT
*----------------------------------------------------------------------
ENTRY040 DS    0H
*TST040  QTPUT 'ENTRY040'
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       LENGTH OF AREA
         MVI   DYNTYPE,C'A'
         MVC   DYNDDNM,PLSINPUT   DDNAME
         MVI   DYNDISP1,DYNNEW    DISP=NEW,
         MVI   DYNDISP2,DYNDEL    DELETE,
         MVI   DYNDISP3,DYNDEL    DELETE
         MVC   DYNBLKSZ,=H'6160'  BLKSIZE
         MVC   DYNLRECL,=H'80'    LRECL
         MVC   DYNBTC,=C'TRK'     SPACE=(TRK,
         MVC   DYNPRIM,=AL3(10)   10,
         MVC   DYNSEC,=AL3(20)    20)
         MVI   DYNRECFM,DYNFB     RECFM=FB
         BAL   R14,ENTRY900       ALLOCATE IT
         CLC   DYNR15,=4C'0'      ANY ERRORS ?
         BE    EXIT040            NO - OK
         MVC   RC,=F'4'
         B     EOJ
EXIT040  EQU   *
         MVI   PLSINPUT+8,X'FF'   INDICATE ALLOCATED
*----------------------------------------------------------------------
*        SETUP FOR READING A MEMBER
*----------------------------------------------------------------------
ENTRY050 DS    0H
*TST050  QTPUT 'ENTRY050'
         MVC   PLSREC(80),BLANKS  CLEAR
         MVC   PLSMBR,0(R3)       MOVE MEMBER NAME
         CLC   0(4,R5),=C'READ'   READ A MEMBER ?
         BNE   ENTRY060           NO - GO TO WRITE ROUTINE
         MVC   PLSREC,PLSREAD     MOVE READ FUNCTION
         OPEN  (PLSIN,(OUTPUT))   OPEN FILE
         PUT   PLSIN,PLSREC       WRITE PLS CONTROL RECORD
         CLOSE PLSIN              CLOSE FILE
         FREEPOOL PLSIN           FREE THE BUFFERS
EXIT050  EQU   *
         B     ENTRY200
*----------------------------------------------------------------------
*        SETUP TO WRITE A MEMBER
*----------------------------------------------------------------------
ENTRY060 DS    0H
*TST060  QTPUT 'ENTRY060'
         MVC   PLSREC,PLSDEL      MOVE DELETE FUNCTION
         CLC   0(5,R5),=C'WRITE'  WRITE A MEMBER ?
         BNE   ENTRY070           NO - GO TO DELETE ROUTINE
         OPEN  (PLSW,,PLSIN,(OUTPUT))      OPEN FILE
         PUT   PLSIN,PLSREC       WRITE PLS CONTROL RECORD
         MVC   PLSREC,PLSWRITE    MOVE ADD RECORD
         LA    R1,PLSMBR          MEMBER NAME IN RECORD
LOOP060A EQU   *
         CLI   0(R1),C' '         FIND END OF MBR
         BE    AAA060             FOUND IT
         LA    R1,1(R1)           BUMP
         B     LOOP060A
AAA060   EQU   *
         MVC   0(16,R1),=CL16',DATA,NOSEQ'
         PUT   PLSIN,PLSREC       WRITE PLS CONTROL RECORD
LOOP060B EQU   *
         GET   PLSW
         LR    R2,R1
         PUT   PLSIN,0(R2)
         B     LOOP060B
BBB060   EQU   *                  EODAD FOR PLSW
         CLOSE (PLSW,,PLSIN)      CLOSE FILE
         FREEPOOL PLSW            FREE THE BUFFERS
         FREEPOOL PLSIN           FREE THE BUFFERS
EXIT060  EQU   *
         B     ENTRY200
*----------------------------------------------------------------------
*        SETUP TO DELETE A MEMBER
*----------------------------------------------------------------------
ENTRY070 DS    0H
*TST070  QTPUT 'ENTRY070'
         MVC   PLSREC,PLSDEL      MOVE DELETE FUNCTION
         CLC   0(6,R5),=C'DELETE' DELETE A MEMBER ?
         BE    AAA070             YES - OK
         MVC   PLSRC,=F'16'       NO - SET RETURN CODE
         B     EOJ                EXIT
AAA070   EQU   *
         OPEN  (PLSIN,(OUTPUT))   OPEN FILE
         PUT   PLSIN,PLSREC       WRITE PLS CONTROL RECORD
         CLOSE (PLSIN)            CLOSE FILE
         FREEPOOL PLSIN           FREE THE BUFFERS
EXIT070  EQU   *
         B     ENTRY200
*----------------------------------------------------------------------
*        INVOKE PLS
*----------------------------------------------------------------------
ENTRY200 DS    0H
*TST200  QTPUT 'ENTRY200'
         LINK  EP=ABPLS1          LINK TO LIBRARY MANAGER
         ST    R15,PLSRC          SAVE RETURN CODE
EXIT200  EQU   *
         B     EOJ
*----------------------------------------------------------------------
PLSW     DCB   DDNAME=PLSWORK,DSORG=PS,MACRF=GL,EODAD=BBB060
PLSIN    DCB   DDNAME=PLSINPUT,DSORG=PS,MACRF=PM
PLSREC   DC    CL9' '
PLSMBR   DC    CL8' '
         DC    CL64' '
PLSREAD  DC    CL9') WRITE  '
PLSDEL   DC    CL9'( DELETE '
PLSWRITE DC    CL9') ADD    '
         EJECT
*----------------------------------------------------------------------
*        END OF JOB
*----------------------------------------------------------------------
EOJ      DS    0H
         BAL   R14,ENTRY920       DE-ALLOCATE EVERYTHING
         ICM   R15,15,DYNEPA      DYN ALLOC SUB-ROUTINE
         BZ    EOJ1
         DELETE  EP=ALLOCRTN
EOJ1     EQU   *
         CLC   PLSRC,=F'0'          ANY PLS ERRORS ?
         BE    EOJ2                 NO - OK
         L     R15,PLSRC            YES - GET RETURN CODE
         B     EOJ3
EOJ2     EQU   *
         L     R15,RC               PICK UP RC
EOJ3     EQU   *
         $EPILOG
         LTORG
RC       DC    F'0'
PLSRC    DC    F'0'
         EJECT
*----------------------------------------------------------------------
*        DYNAMIC ALLOCATION
*----------------------------------------------------------------------
ENTRY900 DS    0H
         ST    R14,ST900
         ICM   R15,15,DYNEPA      DYN ALLOC SUB-ROUTINE
         BNZ   AAA900
         LOAD  EP=ALLOCRTN
         ST    R0,DYNEPA
         LR    R15,R0
AAA900   EQU   *
         LA    R1,=A(DYNPARMS)
         BALR  R14,R15
EXIT900  EQU   *
         L     R14,ST900
         BR    R14
         LTORG
ST900    DC    F'-1'
         EJECT
*----------------------------------------------------------------------
*        FREE ALL ALLOCATED DDNAMES
*----------------------------------------------------------------------
ENTRY920 DS    0H
         ST    R14,ST920
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL
         MVI   DYNTYPE,C'D'       INDICATE DE-ALLOCATE
         LA    R2,DDNAMES         ADDR OF ALL DDNAMES
LOOP920A EQU   *
         CLI   8(R2),X'FF'        IS IT ALLOCATED ?
         BNE   AAA920             NO - SKIP IT
         MVC   DYNDDNM,0(R2)      YES - MOVE DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT
         MVI   8(R2),X'00'        RESET FLAG
AAA920   EQU   *
         LA    R2,9(R2)           BUMP
         CLI   0(R2),X'FF'        END OF NAMES ?
         BNE   LOOP920A           NO - CONTINUE
EXIT920  EQU   *
         L     R14,ST920
         BR    R14
         LTORG
ST920    DC    F'-1'
         EJECT
*----------------------------------------------------------------------
DDNAMES  EQU   *
PLSFILE  DC    CL8'PLSFILE',X'00'
PLSWORK  DC    CL8'PLSWORK',X'00'
PLSINPUT DC    CL8'PLSINPUT',X'00'
PLSPRINT DC    CL8'PLSPRINT',X'00'
         DC    X'FFFF'            END INDICATOR
BLANKS   DC    100C' '
DYNPARMS $ALLOC
         EJECT
         END
./ ADD  NAME=CMNEB00
         PRINT NOGEN
***********************************************************************
*
*        THIS BATCH LIKE MODULE WILL DIRECTLY INVOKE SPF BROWSE
*        FROM SELECTION MENSU WITHIN AN EXTENSIONS MENU.  THE
*        FOLLOWING SYNTAX IS REQUIRED WITHIN THE ')PROC' SECTION
*        OF THE DRIVING MENU.
*
*          OPT,'PGM(CMNEB00) PARM(''''''&QUALIFIED.DSNAME'''''')'
*                             OR
*          OPT,'PGM(CMNEB00) PARM(&UNQUALIFIED.DSNAME)'
*
*        NOTE THAT SPF DOES NOT SUPPORT SEVICES (INCLUDING BROWSE)
*        FROM A SUBTASK.  FOR THIS REASON, DO NO TRY TO INVOKE THIS
*        ROUTINE FROM ANOTHER.
*
***********************************************************************
         EJECT
CMNEB00  $PROLOG LV=180            ENTRY LINKAGE
         USING @,R13               SET UP ADDRESSABILITY
         L     R1,0(R1)            ADDRESS OF ENTRY PARM
         LH    R2,0(R1)            SIZE OF DSNAME
         BCTR  R2,0                DECREMENT FOR EXECUTE
         BM    EXIT                NO DSNAME SPECIFIED, EXIT
         CH    R2,=H'56'           CHECK MAX DSNAME SIZE
         BH    EXIT                TOO LARGE, EXIT
         MVC   @BROWSE,=CL8'BROWSE' MOVE SERVICE NAME
         MVC   @DSNAME,=CL56' '    CLEAR DSNAME AREA
         LA    R15,@DSNAME         ADDRESS OF TO-FIELD
         EX    R2,MOVEDSN          MOVE DSNAME TO PARM AREA
*        CALL  ISPLINK,(@BROWSE,@DSNAME),VL CALL SPF BROWSE
         LA    R15,@BROWSE         ADDRESS OF SERVICE REQUEST
         ST    R15,@LKPARM1        UPDATE DYNAMIC STORAGE
         LA    R15,@DSNAME         ADDRESS OF DSNAME
         ST    R15,@LKPARM2        UPDATE DYNAMIC STORAGE
         OI    @LKPARM2,128        SET THE VL BIT
         LA    R1,@LKPARM1         ADDRESS OF PARM
         L     R15,=V(ISPLINK)     ADDRESS OF SERVICE ROUTINE
         BALR  R14,R15             EFFECT BROWSE
EXIT     $EPILOG
MOVEDSN  MVC   0(0,R15),2(R1)      MOVE DSNAME TO PARM AREA
         LTORG
*----------------------------------------------------------------------
@        DSECT
@SAVE    DS    18F            REG SAVE AREA
@WORK    EQU   *              COMMAND AREA
*
@LKPARM1 DS    CL4            ADDRESS OF BROWSE
@LKPARM2 DS    CL4            ADDRESS OF DSNAME
@BROWSE  DS    CL8            SERVICE REQUEST TYPE
@DSNAME  DS    CL56           DSNAME AREA
*
@SIZE    EQU   *-@WORK        SIZE OF WORKAREA
         END
./ ADD  NAME=CMNEUK0
*----------------------------------------------------------------------
*
*        BOB BECKER MAR ,1981
*
*        SPF 328X PRINTER DIALOG MANAGER
*
*----------------------------------------------------------------------
         EJECT
CMNEUK0 $PROLOG R12,R11,GM=N
         EJECT
*----------------------------------------------------------------------
*        DEFINE VARIABLES
*----------------------------------------------------------------------
ENTRY010 DS    0H
         SPFVDEF 8,(CMNEUKPR,CMNEUKLB,CMNEUKTY,CMNEUKMB,CMNEUKID,      +
               ZPREFIX,ZTIME,ZDATE,ZUSER)
         SPFVDEF 3,(CMNEUKPL,CMNEUKSL,CMNEUKCC,CMNEUKLP)
         SPFVDEF 4,(CMNEUKMX)
         SPFVDEF 44,(CMNEUKOD,CMNEUKQQ)
         SPFVDEF 8,(DYNDDNM),DC=NO
         SPFVDEF 44,(DYNDSN),DC=NO
         SPFVDEF 4,(DYNR15,DYNERR,DYNINFO),DC=NO
         SPFVDEF 1,(DYNTYPE),DC=NO
EXIT010  EQU   *
         EJECT
*----------------------------------------------------------------------
*        GET PROFILE/SHARED VARIABLES
*----------------------------------------------------------------------
ENTRY020 DS    0H
         SPFVGET (CMNEUKPR,CMNEUKLB,CMNEUKTY,CMNEUKID,CMNEUKOD),PROFILE
         SPFVGET (ZPREFIX,ZUSER,ZTIME,ZDATE,CMNEUKQQ,CMNEUKMX,         +
               CMNEUKLP,CMNEUKPL,CMNUEKSL,CMNEUKCC),SHARED
EXIT020  EQU   *
         EJECT
*----------------------------------------------------------------------
*        DISPLAY FIRST PANEL
*----------------------------------------------------------------------
ENTRY030 DS    0H
         SPFDSPLY CMNEUK0,,CMNEUKMB,,ENTRY810
EXIT030  EQU   *
         EJECT
*----------------------------------------------------------------------
*        VERIFY/BUILD DATA SET NAME
*----------------------------------------------------------------------
ENTRY040 DS    0H
         CLI   CMNEUKOD,C'^'      IGNORE OTHER DSN ?
         BE    AAA040             YES - OK
         CLI   CMNEUKOD,C' '      ANY SPECIFIED ?
         BNE   EXIT040            YES - SKIP CMNEUKPR LIB TYPE
AAA040   EQU   *
         SPFPLT CMNEUKPR,CMNEUKLB,CMNEUKTY,PRINTDSN
         MVC   MEMBER,CMNEUKMB    MOVE MBR
EXIT040  EQU   *
         EJECT
*----------------------------------------------------------------------
*        CHECK FOR OTHER DSN
*----------------------------------------------------------------------
ENTRY050 DS    0H
         CLI   CMNEUKOD,C' '      ANY SPECIFIED ?
         BE    EXIT050            NO - OK
         CLI   CMNEUKOD,C'^'      IGNORE IT ?
         BE    EXIT050            YES - OK
         SPFDSN CMNEUKOD,PRINTDSN,MEMBER
EXIT050  EQU   *
         EJECT
*----------------------------------------------------------------------
*        ALLOCATE THE Q DATA SET
*----------------------------------------------------------------------
ENTRY060 DS    0H
         CLI   QUEUEDD+8,X'FF'    IS IT ALREADY ALLOCATED ?
         BE    EXIT060
BBB060   EQU   *
         XC    DYNPARMS(DYNLL),DYNPARMS CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         MVI   DYNTYPE,C'A'
         MVI   DYNRTDD,X'FF'      RETURN DDNAME
         MVC   DYNDSN,CMNEUKQQ    Q FILE DSN
         MVI   DYNDISP1,DYNSHR    DISP=SHR
         BAL   R14,ENTRY900
         MVC   QUEUEDD,DYNRTDD    SAVE DDNAME
         MVC   VSAMACB+40(8),DYNRTDD   MOVE DDNAME TO ACB
         MVI   QUEUEDD+8,X'FF'    INDICATE ALLOCATED
EXIT060  EQU   *
         EJECT
*----------------------------------------------------------------------
*        UPDATE THE FILE CONTROL RECORD
*----------------------------------------------------------------------
ENTRY070 DS    0H
         ENQ   (QNAME,RNAME,E,,SYSTEM)
         OPEN  (VSAMACB,(UPDAT))
         MVC   REC#,=F'1'
AAA070   EQU   *
         GET   RPL=RPL1
         MVC   FCRMAP,QFCR1      MAP OF USED FCRS
         LA    R9,88
         XR    R8,R8
         IC    R8,QMAXFCRS
LOOP070A EQU   *
         LA    R2,QBITMAP
         LR    R4,R8
         CLI   0(R2),X'FF'        ANY FREE RECORDS HERE ?
         BNE   BBB070             YES - OK
         LA    R2,1(R2)           NO - BUMP
         LA    R4,8(R4)           BUMP BY 8 RECORDS
         BCT   R9,LOOP070A
         XR    R1,R1
         IC    R1,QMAXFCRS
         C     R1,REC#            ANY MORE LEFT TO CHECK ?
         BE    ERROR9             NO - QFILE IS FULL
         L     R1,REC#
         LA    R1,1(R1)
         B     AAA070
BBB070   EQU   *
         L     R1,REC#            THIS FCRS NUMBER
         S     R1,=F'1'           SUB 1
         MH    R1,=H'704'         TIMES 704 RECORDS/FCR
         LA    R4,0(R1,R4)        RECORD NUMBER
         LA    R4,1(R4)            ADD 1 TO RECORD NUMBER
         MVI   BITS,X'80'
         TM    0(R2),X'80'         THIS RECORD ?
         BZ    CCC070              YES - READ IT
         LA    R4,1(R4)            ADD 1 TO RECORD NUMBER
         MVI   BITS,X'40'
         TM    0(R2),X'40'         THIS RECORD ?
         BZ    CCC070              YES - READ IT
         LA    R4,1(R4)            ADD 1 TO RECORD NUMBER
         MVI   BITS,X'20'
         TM    0(R2),X'20'         THIS RECORD ?
         BZ    CCC070              YES - READ IT
         LA    R4,1(R4)            ADD 1 TO RECORD NUMBER
         MVI   BITS,X'10'
         TM    0(R2),X'10'         THIS RECORD ?
         BZ    CCC070              YES - READ IT
         LA    R4,1(R4)            ADD 1 TO RECORD NUMBER
         MVI   BITS,X'08'
         TM    0(R2),X'08'         THIS RECORD ?
         BZ    CCC070              YES - READ IT
         LA    R4,1(R4)            ADD 1 TO RECORD NUMBER
         MVI   BITS,X'04'
         TM    0(R2),X'04'         THIS RECORD ?
         BZ    CCC070              YES - READ IT
         LA    R4,1(R4)            ADD 1 TO RECORD NUMBER
         MVI   BITS,X'02'
         TM    0(R2),X'02'         THIS RECORD ?
         BZ    CCC070              YES - READ IT
         LA    R4,1(R4)            ADD 1 TO RECORD NUMBER
         MVI   BITS,X'01'
CCC070   EQU   *
         OC    0(1,R2),BITS
         CLC   REC#,=F'1'          FCR = 1 ?
         BNE   DDD070              NO - OK
         MVI   QFCR1,X'FF'         YES - TURN ON USED INDICATOR
         PUT   RPL=RPL1            RE-WRITE IT
         B     EXIT070
DDD070   EQU   *
         PUT   RPL=RPL1            RE-WRITE FCR (THIS IS NOT FCR1)
         XR    R3,R3               CLEAR
         IC    R3,REC#             PICK UP THIS FCRS NUMBER
         LA    R2,FCRMAP-1         USED FCR MAP
         LA    R2,0(R3,R2)         BUMP TO THIS FCR
         CLI   0(R2),X'FF'         IS IT MARKED USED ?
         BE    EXIT070             YES - OK
         MVC   REC#,=F'1'          NO - THIS IS 1ST REC FOR THIS FCR
         GET   RPL=RPL1            GET FCR 1
         LA    R2,QFCR1-1          ADDR OF FCR MAP-1
         LA    R2,0(R2,R3)         BUMP TO NEW FCR
         MVI   0(R2),X'FF'         TURN ON FLAG
         PUT   RPL=RPL1
EXIT070  EQU   *
         EJECT
*----------------------------------------------------------------------
*        UPDATE THE DATA RECORD
*----------------------------------------------------------------------
ENTRY080 DS    0H
         ST    R4,REC#
         GET   RPL=RPL1
         XC    RECORD(QLL),RECORD   CLEAR TO ZEROS
         BAL   R14,ENTRY910
         MVC   QDSN,PRINTDSN
         MVC   QMBR,MEMBER
         MVC   QJOBNM,ZUSER          USER-ID
         MVC   QREQDATE,TODYYDDD     DATE
         MVC   QREQTIME,TODTIME      TIME
         MVC   QPRINTER,CMNEUKID     PRINTER ID
         MVC   QCC,CMNEUKCC          CARRIAGE CONTROL
         PACK  DBWRD,CMNEUKMX        PACK IT
         CVB   R1,DBWRD
         STCM  R1,15,QMAX
*
         LA    R4,CMNEUKPL           PRINT LINES/PAGE
         CLI   CMNEUKCC,C'A'         ANS CONTROL CHARACTERS ?
         BNE   AAA080                NO - OK
         LA    R4,CMNEUKLP           PRINT LINES/PAGE
AAA080   EQU   *
         LA    R2,3                  MAX FIELD LENGTH
         LR    R3,R4                 SAVE START OF FIELD
LOOP080A EQU   *
         CLI   0(R4),C' '            FIND END OF DATA
         BE    BBB080                FOUND IT
         LA    R4,1(R4)              BUMP
         BCT   R2,LOOP080A           CHECK AGAIN
BBB080   EQU   *
         SR    R4,R3                 LENGTH OF FIELD
         BCTR  R4,R0                 MINUS 1 FOR EX
         EX    R4,PACK1              PACK IT
         CVB   R15,DBWRD             CONVERT
         STH   R15,QPLINES           SAVE FOR LATER
*
         CLC   CMNEUKSL,BLANKS
         BNE   CCC080
         MVC   CMNEUKSL,=3C'0'
CCC080   EQU   *
         LA    R4,CMNEUKSL           SKIP LINES/PAGE
         LA    R2,3                  MAX FIELD LENGTH
         LR    R3,R4                 SAVE START OF FIELD
LOOP080C EQU   *
         CLI   0(R4),C' '            FIND END OF DATA
         BE    DDD080                FOUND IT
         LA    R4,1(R4)              BUMP
         BCT   R2,LOOP080C           CHECK AGAIN
DDD080   EQU   *
         SR    R4,R3                 LENGTH OF FIELD
         BCTR  R4,R0                 MINUS 1 FOR EX
         EX    R4,PACK1              PACK IT
         CVB   R15,DBWRD             CONVERT
         STH   R15,QSLINES           SAVE FOR LATER
*
         PUT   RPL=RPL1
         CLOSE VSAMACB
         DEQ   (QNAME,RNAME,,SYSTEM)
EXIT080  EQU   *
         B     ENTRY800
PACK1    PACK  DBWRD,0(0,R3)
         EJECT
*----------------------------------------------------------------------
*        INDICATE PROCESSING COMPLETE
*----------------------------------------------------------------------
ENTRY800 DS    0H
         BAL   R14,ENTRY920       FREE ALL ALLOCATED DATA SETS
         MVC   CMNEUKOD,BLANKS    CLEAR
         SPFDSPLY ,CMN001,CMNEUKTY,ENTRY040
EXIT800  EQU   *
         EJECT
*----------------------------------------------------------------------
*        PUT PROFILE VARIABLES AND EXIT
*----------------------------------------------------------------------
ENTRY810 DS    0H
         SPFVGET (CMNEUKPR,CMNEUKLB,CMNEUKTY,CMNEUKID,CMNEUKOD),PROFILE
         BAL   R14,ENTRY920       FREE ALL ALLOCATED DATA SETS
EXIT810  EQU   *
         EJECT
*----------------------------------------------------------------------
*        END OF JOB
*----------------------------------------------------------------------
EOJ      DS    0H
         ICM   R15,15,DYNEPA
         BZ    EOJ1
         DELETE  EP=ALLOCRTN
EOJ1     EQU   *
         LA    R15,0
         $EPILOG
         EJECT
*----------------------------------------------------------------------
*        DYNAMIC ALLOCATION
*----------------------------------------------------------------------
ENTRY900 DS    0H
         ST    R14,ST900
         SPFDYN DYNPARMS,ERROR1
EXIT900  EQU   *
         L     R14,ST900
         BR    R14
ST900    DC    F'-1'
         EJECT
*----------------------------------------------------------------------
*        @STCK TOD                 GET CURRENT TIME OF DAY/DATE
*----------------------------------------------------------------------
ENTRY910 DS    0H
         ST    R14,ST910
         @STCK TOD
EXIT910  EQU   *
         L     R14,ST910
         BR    R14
ST910    DC    F'-1'
TOD      @STCKD
         EJECT
*----------------------------------------------------------------------
*        FREE ALL ALLOCATED DDNAMES
*----------------------------------------------------------------------
ENTRY920 DS    0H
         ST    R14,ST920
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL
         MVI   DYNTYPE,C'D'       INDICATE DE-ALLOCATE
         LA    R2,DDNAMES         ADDR OF ALL DDNAMES
LOOP920A EQU   *
         CLI   8(R2),X'FF'        IS IT ALLOCATED ?
         BNE   AAA920             NO - SKIP IT
         MVC   DYNDDNM,0(R2)      YES - MOVE DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT
         MVI   8(R2),X'00'        RESET FLAG
AAA920   EQU   *
         LA    R2,9(R2)           BUMP
         CLI   0(R2),X'FF'        END OF NAMES ?
         BNE   LOOP920A           NO - CONTINUE
EXIT920  EQU   *
         L     R14,ST920
         BR    R14
ST920    DC    F'-1'
         EJECT
*----------------------------------------------------------------------
*        DYNAMIC ALLOCATION ERROR
*----------------------------------------------------------------------
ERROR1   DS    0H
         LTR   R15,R15            CONTINUE ?
         BNZ   ENTRY810           NO - UPDATE PROFILE AND END
         B     ENTRY040           YES - START AT THE TOP
*----------------------------------------------------------------------
ERROR9   DS    0H
         ABEND 1,DUMP
         EJECT
*----------------------------------------------------------------------
*        STORAGE AREAS
*----------------------------------------------------------------------
DBWRD    DC    D'0'
PRINTDSN DC    CL44' '
MEMBER   DC    CL8' '
BLANKS   DC    CL101' '
*----------------------------------------------------------------------
DDNAMES  EQU   *
QUEUEDD  DC    CL8' ',X'00'
         DC    X'FFFF'            END INDICATOR
*----------------------------------------------------------------------
SPFMACS  SPFCMDS
         EJECT
DYNPARMS $ALLOC
*----------------------------------------------------------------------
FCRMAP   DC    XL11'00'
BITS     DC    X'00'
REC#     DC    F'0'
QNAME    DC    CL8'VTPRINT'
RNAME    DC    CL44'QFILE'
         EJECT
*----------------------------------------------------------------------
VSAMACB  ACB   DDNAME=QUEUE,MACRF=(KEY,DIR,IN,OUT)
*----------------------------------------------------------------------
RPL1     RPL   ACB=VSAMACB,AREA=RECORD,AREALEN=128,ARG=REC#,           +
               OPTCD=(KEY,DIR,UPD)
*----------------------------------------------------------------------
RECORD   $VTQREC
*----------------------------------------------------------------------
         END
./ ADD  NAME=CMNEVN0
         TITLE 'ESTIMATE NON-VSAM SPACE'
*---------------------------------------------------------------------*
*                                                                     *
*        PROGRAM ID: CMNEVN0                                          *
*        PROGRAM TYPE: ONLINE                                         *
*        PROGRAM OBJECTIVE: ESTIMATE REQUIRED NON-VSAM SPACE BASE     *
*                           ON GIVEN LRECL, NO. OF RECORDS, ETC.      *
*        PROGRAMMER: K. TAM                                           *
*        DATE WRITTEN: MAY 10, 1981                                   *
*                                                                     *
*        PROGRAM NOTES:                                               *
*        1. THIS PROGRAM INVOKES PANEL CMNEVN0                        *
*                                                                     *
*---------------------------------------------------------------------*
         EJECT
CMNEVN0  $PROLOG R12,R11
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        SET CONTROLS - LET SPF HANDLE ANY ERRORS                     *
*                                                                     *
*---------------------------------------------------------------------*
ENTRY010 DS    0H
         CALL  ISPLINK,(CONTROL,ERRORS,CANCEL),VL
EXIT010  EQU   *
         B     ENTRY020
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        DEFINE VARIABLES                                             *
*                                                                     *
*---------------------------------------------------------------------*
ENTRY020 DS    0H
         MVC   LENGTH,=F'1'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(9),=CL9'(DYNTYPE)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,DYNTYPE,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'4'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(8),=CL8'(SPFRC)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,SPFRC,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'4'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(23),=CL23'(DYNR15 DYNERR DYNINFO)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,DYNR15,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'7'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(33),=C'(CMNEVRL CMNEVNR CMNEVKL CMNEVDV)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,CMNEVRL,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'8'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(9),=C'(DYNDDNM)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,DYNDDNM,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'44'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(8),=C'(ZTEMPF)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,ZTEMPF,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'44'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(8),=CL8'(DYNDSN)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,DYNDSN,CHAR,LENGTH),VL
*
EXIT020  EQU   *
         B     ENTRY040
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        DISPLAY FIRST PANEL                                          *
*                                                                     *
*---------------------------------------------------------------------*
ENTRY040 DS    0H
         MVC   PANEL,=CL8'CMNEVN0'
         MVC   CURSOR,=CL8'CMNEVRL'  POSITION CURSOR
         CALL  ISPLINK,(DISPLAY,PANEL,,CURSOR),VL
         LTR   R15,R15            CONTINUE PROCESSING ?
         BNZ   EOJ                NO - EOJ
EXIT040  EQU   *
         B     ENTRY060
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        VERIFY INPUT DATA                                            *
*                                                                     *
*---------------------------------------------------------------------*
ENTRY060 DS    0H
         MVC   CURSOR,=CL8'CMNEVNR'  POSITION CURSOR FOR ERROR
         CLC   CMNEVNR,BLANKS     ANY INPUT ?
         BE    ERROR3             NO - ERROR
         MVC   REC#WA,BLANKS      CLEAR
         LA    R15,CMNEVNR+6      POINT TO INPUT(LAST BYTE)
         LA    R1,REC#WA+6        POINT TO OUTPUT(LAST BYTE)
         LA    R0,7
         BAL   R14,ENTRY940       LEFT SHIFT
         PACK  REC#,REC#WA        CONVERT TO PACK NUMBER
         CP    REC#,=P'0'         NO RECORDS?
         BNH   ERROR3             INVALID ENTRY
*
         MVC   CURSOR,=CL8'CMNEVKL'  POSITION CURSOR FOR ERROR
         CLC   CMNEVKL,BLANKS     ANY INPUT ?
         BNE   AAA060             YES - USE INPUT KEY LENGTH
         MVI   CMNEVKL,C'0'       DEFAULT TO WITHOUT KEYS
AAA060   EQU   *
         MVC   KLWA,BLANKS        CLEAR
         LA    R15,CMNEVKL+4      POINT TO INPUT(LAST BYTE)
         LA    R1,KLWA+4          POINT TO OUTPUT(LAST BYTE)
         LA    R0,5
         BAL   R14,ENTRY940       LEFT SHIFT
         PACK  KL,KLWA            CONVERT TO PACK NUMBER
*
         MVC   CURSOR,=CL8'CMNEVDV'   POSITION CURSOR FOR ERROR
         CLC   CMNEVDV,BLANKS     ANY INPUT ?
         BNE   BBB060             YES - USE IT
         MVC   CMNEVDV(4),=CL4'3350'   DEFAULT TO 3350
BBB060   EQU   *
         LA    R14,DEVTBL         POINT TO DEVICE TABLE
         USING DEVTYPE,R14
CCC060   EQU   *
         CLI   0(R14),X'FF'       END OF TABLE ?
         BE    ERROR3             YES - INVALID DEVICE TYPE
         CLC   CMNEVDV(4),DEVTYPE  MATCH DEVICE TYPE ?
         BE    DDD060             YES
         LA    R14,DEVLGH(R14)    POINT TO NEXT ONE
         B     CCC060
DDD060   EQU   *
         ZAP   TRKPCYL,DEVTPC     SAVE TRK PER CYL
         ZAP   BYTPTRK,DEVBPT     SAVE BYTE PER TRK
         ZAP   CONSTANT,DEVCONST  SAVE CONSTANT
         ZAP   OPTBLKSZ,DEVOPBLK  SAVE OPT. BLKSIZE
         ZAP   C,=P'0'            INITIALIZE
         CP    KL,=P'0'           ANY KEY LENGTH ?
         BNH   EEE060
         ZAP   C,DEVC             SAVE C
*
EEE060   EQU   *
         MVC   CURSOR,=CL8'CMNEVRL'  POSITION CURSOR FOR ERROR
         CLC   CMNEVRL,BLANKS     ANY INPUT ?
         BE    ERROR3             NO - ERROR
         MVC   RLWA,BLANKS        CLEAR
         LA    R15,CMNEVRL+4      POINT TO INPUT(LAST BYTE)
         LA    R1,RLWA+4          POINT TO OUTPUT(LAST BYTE)
         LA    R0,5
         BAL   R14,ENTRY940       LEFT SHIFT
         PACK  RL,RLWA            CONVERT TO PACK NUMBER
         CP    RL,=P'0'           0 LRECL ?
         BNH   ERROR3             YES - INVALID
         CP    RL,OPTBLKSZ        LRECL > BLKSIZE ?
         BH    ERROR3             YES - ERROR
EXIT060  EQU   *
         B     ENTRY070
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        GET SHARE VARIABLES AND EDIT DSN TO USERID.SPFTEMP?.@F80     *
*        IF IT IS FRST TIME THROUGH                                   *
*                                                                     *
*---------------------------------------------------------------------*
ENTRY070 DS    0H
         CLI   OUTLIST+8,X'FF'    OUTPUT DSN ALREADY ESTABLISHED ?
         BE    EXIT070            YES - SKIP TO AVOID REDUNDANT WORK
*
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(8),=CL8'(ZTEMPF)'
         CALL  ISPLINK,(VGET,NAMELIST,SHARED),VL
*
         MVC   TEMPOUT(18),ZTEMPF MOVE DSN
         LA    R1,TEMPOUT
LOOP070A EQU   *
         CLI   0(R1),C'.'         FIND FIRST DOT
         BE    AAA070
         LA    R1,1(R1)
         B     LOOP070A
AAA070   EQU   *
         LA    R1,1(R1)           BUMP
LOOP070B EQU   *
         CLI   0(R1),C'.'         FIND SECOND DOT
         BE    BBB070
         LA    R1,1(R1)
         B     LOOP070B
BBB070   EQU   *
         LA    R1,1(R1)          BUMP PAST DOT
         MVC   0(8,R1),=CL8'@F80' MOVE LAST QUALIFIER
EXIT070  EQU   *
         B     ENTRY080
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        ALLOCATE OUTPUT DATA SET - USERID.SPFTEMP?.@F80              *
*                                                                     *
*---------------------------------------------------------------------*
ENTRY080 DS    0H
         CLI   OUTLIST+8,X'FF'    IS IT ALREADY ALLOCATED ?
         BE    EXIT080            YES - SKIP ALLOCATION
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         MVI   DYNTYPE,C'A'
         MVI   DYNRTDD,X'FF'
         MVC   DYNDSN,TEMPOUT     DATA SET NAME
         MVI   DYNDISP1,DYNSHR    DISP=SHR
         BAL   R14,ENTRY900       TRY TO ALLOCATE THE DATA SET
         CLC   DYNR15,=4C'0'      ANY ERRORS ?
         BE    AAA080             NO - OK
         CLC   DYNERR,=C'1708'    DATA SET NOT CATALOGED CONDITION ?
         BNE   ENTRY800           NO - SERIOUS PROBLEM
         MVI   DYNDISP1,DYNNEW    CREATE A DATA SET WITH
         MVI   DYNDISP2,DYNCAT       DISP=(NEW,CATLG,DELETE)
         MVI   DYNDISP3,DYNDEL
         MVC   DYNBTC,=C'BLK'        SPACE=(6160(3,3),RLSE)
         MVC   DYNPRIM,=AL3(3)
         MVC   DYNSEC,=AL3(3)
         MVI   DYNRLSE,X'FF'
         MVC   DYNBLKSZ,=H'6160'      DCB=(BLKSIZE=6160,
         MVC   DYNLRECL,=H'80'             LRECL=80,
         MVI   DYNRECFM,DYNFB              RECFM=FB)
         BAL   R14,ENTRY900       ALLOCATION
         CLC   DYNR15,=4C'0'      CREATED OK ?
         BNE   ENTRY800           NO - FORGET IT
AAA080   EQU   *
         MVC   OUTLIST,DYNRTDD    SAVE DDNAME
         MVC   OUTPUT+40(8),DYNRTDD  MOVE DDNAME TO DCB
         MVI   OUTLIST+8,X'FF'    INDICATE ALLOCATED
EXIT080  EQU   *
         B     ENTRY090
         EJECT
*----------------------------------------------------------------------
*
*        PROCESS INPUT PARAMETERS
*
*----------------------------------------------------------------------
ENTRY090 DS    0H
*
*    NO. OF RECORDS PER BLOCK = OPT. BLKSIZE / RECORD LENGTH
*
         ZAP   WA1,OPTBLKSZ
         DP    WA1,RL
         ZAP   RECPBLK,WA1(7)
*
*    BLKSIZE = RECORDS PER BLOCK * LRECL
*
         ZAP   WA1,RECPBLK
         MP    WA1,RL
         ZAP   DL,WA1
*
*     TAPE BLKSIZE = (32760 / RECORD LENGTH) * RECORD LENGTH
*
         ZAP   WA1,=P'32760'
         DP    WA1,RL
         ZAP   WA2,WA1(7)
         ZAP   WA1,WA2
         MP    WA1,RL
         ZAP   TAPESIZE,WA1
*
*     REQUIRE NO. OF BLKS = (NO. OF REC + REC PER BLK -1) / REC PER BLK
*
         ZAP   WA1,REC#
         AP    WA1,RECPBLK
         SP    WA1,=P'1'
         DP    WA1,RECPBLK
         ZAP   REQBLKS,WA1(7)
*
*     BLOCKS PER TRACK = BYTES PER TRK / (CONST + C + KL + DL)
*
         ZAP   WA2,CONSTANT
         AP    WA2,C
         AP    WA2,KL
         AP    WA2,DL
         ZAP   WA1,BYTPTRK
         DP    WA1,WA2
         ZAP   BLKPTRK,WA1(5)
*
*     REQUIRE TRACKS = REQUIRE BLOCKS / BLOCK PER TRACK
*
         ZAP   WA1,REQBLKS
         DP    WA1,BLKPTRK
         CP    WA1+8(2),=P'0'
         BZ    AAA090
         AP    WA1(8),=P'1'
AAA090   EQU   *
         ZAP   REQTRKS,WA1(8)
*
*     REQUIRE CYLINDERS = REQUIRE TRACKS / TRACKS PER CYLINDER
*
         ZAP   WA2,WA1(8)
         ZAP   WA1,WA2
         DP    WA1,TRKPCYL
         CP    WA1+8(2),=P'0'
         BNH   BBB090
         AP    WA1(8),=P'1'
BBB090   EQU   *
         ZAP   REQCYLS,WA1(8)
*
         OPEN  (OUTPUT,(OUTPUT))
*
         MVC   PRTLN1+32(4),CMNEVRL
         MVC   PRTLN2+32(7),CMNEVNR
         MVC   PRTLN3+32(4),CMNEVKL
         MVC   PRTLN7+32(6),CMNEVDV
         LA    R1,RECPBLK         OUTPUT
         LA    R15,6                    RECORDS
         BAL   R14,ENTRY960                    PER
         MVC   PRTLN4+32(6),EDITOUT               BLOCK
         LA    R1,DL              OUTPUT
         LA    R15,6                    DISK
         BAL   R14,ENTRY960                 BLOCK
         MVC   PRTLN5+32(6),EDITOUT              SIZE
         LA    R1,TAPESIZE        OUTPUT
         LA    R15,6                    TAPE
         BAL   R14,ENTRY960                 BLOCK
         MVC   PRTLN6+32(6),EDITOUT              SIZE
         LA    R1,REQBLKS         OUTPUT
         LA    R15,8                    DISK
         BAL   R14,ENTRY960                 REQ
         MVC   PRTLN8+32(8),EDITOUT            BLOCKS
         LA    R1,REQTRKS         OUTPUT
         LA    R15,8                    DISK REQ
         BAL   R14,ENTRY960                     TRACKS
         MVC   PRTLN9+32(8),EDITOUT
         LA    R1,REQCYLS         OUTPUT
         LA    R15,8                    DISK
         BAL   R14,ENTRY960                 REQ
         MVC   PRTLN10+32(8),EDITOUT           CYLINDERS
*
         LA    R2,PRTLN1
         LA    R3,PRTLN#
LOOP090  EQU   *
         PUT   OUTPUT,(2)
         LA    R2,80(R2)
         BCT   R3,LOOP090
         CLOSE (OUTPUT)
EXIT090  EQU   *
         B     ENTRY700
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        BROWSE RESULT OF NONVSAM SPACE CALCULATION                   *
*                                                                     *
*---------------------------------------------------------------------*
ENTRY700 DS    0H
         MVC   NAMELIST,BLANKS
         MVI   NAMELIST,C''''
         MVC   NAMELIST+1(43),TEMPOUT
         LA    R14,NAMELIST+43
         LA    R15,44
AAA700   EQU   *
         CLI   0(R14),C' '
         BNE   BBB700
         BCTR  R14,R0
         BCT   R15,AAA700
BBB700   EQU   *
         LA    R14,1(R14)
         MVI   0(R14),C''''
         CALL  ISPLINK,(BROWSE,NAMELIST),VL
EXIT700  EQU   *
         B     ENTRY800
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        INDICATE PROCESSING COMPLETE                                 *
*                                                                     *
*---------------------------------------------------------------------*
ENTRY800 DS    0H
         CVD   R15,DBWRD         CONVERT RC
         MVC   SPFRC,=X'40202120'
         ED    SPFRC,DBWRD+6     DISPLAY RC
         MVC   CURSOR,=CL8'CMNEVRL' POSITION CURSOR FOR DISPLAY
         MVC   MSG,=CL8'CMN001'   PROCESSING COMPLETE MESSAGE
         MVC   PANEL,=CL8'CMNEVN0'
         CALL  ISPLINK,(DISPLAY,PANEL,MSG,CURSOR),VL
         LTR   R15,R15            CONTINUE ?
         BZ    ENTRY060           YES - DO IT AGAIN
         BAL   R14,ENTRY920       FREE ALL ALLOCATED DATA SET
EXIT800  EQU   *                  NO - END
         B     EOJ
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        INDICATE ERROR DETECTED, AND PROCESSING TERMINATED           *
*                                                                     *
*---------------------------------------------------------------------*
ERROR3   DS    0H
         MVC   MSG,=CL8'CMN018'   ERROR MESSAGE
         CALL  ISPLINK,(DISPLAY,,MSG,CURSOR),VL
         LTR   R15,R15            CONTINUE ?
         BZ    ENTRY060           YES - DO IT AGAIN
EXITERR  EQU   *
         B     EOJ
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        END OF JOB                                                   *
*                                                                     *
*---------------------------------------------------------------------*
EOJ      DS    0H
         ICM   R15,15,DYNEPA      DYN ALLOC SUB-ROUTINE
         BZ    EXITEOJ
         DELETE EP=ALLOCRTN
EXITEOJ  EQU   *
         LA    R15,0
         $EPILOG
         EJECT
*----------------------------------------------------------------------
*
*        DYNAMIC ALLOCATION
*
*----------------------------------------------------------------------
ENTRY900 DS    0H
         ST    R14,ST900
         ICM   R15,15,DYNEPA      DYN ALLOC SUB-ROUTINE
         BNZ   AAA900
         LOAD  EP=ALLOCRTN
         ST    R0,DYNEPA
         LR    R15,R0
AAA900   EQU   *
         LA    R1,=A(DYNPARMS)
         BALR  R14,R15
NOP900   NOP   EXIT900            ACTIVATED BY ERROR1 FOR 0410 ERROR
         CLC   DYNR15,=4C'0'      ANY ERRORS ?
         BNE   ERROR1             YES - DECODE THE ERROR
EXIT900  EQU   *
         L     R14,ST900
         BR    R14
ST900    DC    F'-1'
DYNEPA   DC    F'0'
         EJECT
*----------------------------------------------------------------------
*
*        DYNAMIC ALLOCATION ERROR
*
*----------------------------------------------------------------------
ERROR1   DS    0H
         CLC   DYNERR,=C'0410'    DDNAME UNAVAILABLE ?
         BNE   AAAER1             NO - OK
         MVC   SAVE14,ST900       SAVE 900 RETURN POINT
         MVI   NOP900+1,X'F0'     SET TO BRANCH
         MVC   SAVEDYN(DYNLL),DYNPARMS  SAVE ORIGINAL PARMS
         MVC   SAVEDDN,DYNDDNM    SAVE DDNAME
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       LENGTH
         MVI   DYNTYPE,C'D'       ATTEMPT TO DE-ALLOCATE
         MVC   DYNDDNM,SAVEDDN    DDNAME
         MVI   DYNUNALC,X'FF'     DE-ALLOC EVEN IF 'PERM' BIT IS ON
         BAL   R14,ENTRY900
         MVC   DYNPARMS(DYNLL),SAVEDYN  RESTORE ORIGINAL PARMS
         MVI   DYNTYPE,C'A'       YES - TRY ALLOCATING AGAIN
         BAL   R14,ENTRY900
         MVC   ST900,SAVE14       RESTORE SAVE AREA
         MVI   NOP900+1,X'00'     SET TO NOP
         CLC   DYNR15,=4C'0'      ALLOCATE OK ?
         BNE   AAAER1             NO - DISPLAY ERROR MESSAGE
         L     R14,SAVE14         RETURN ADDR
         BR    R14
AAAER1   EQU   *
         MVC   MSG,=CL8'DYN001'
         CLC   DYNERR,=C'0320'    INVALID DSNAME ?
         BE    BBBER1             DISPLAY MESSAGE
         MVC   MSG,=CL8'DYN002'
         CLC   DYNERR,=C'0210'    DATA SET IN USE ?
         BE    BBBER1             DISPLAY MESSAGE
         MVC   MSG,=CL8'DYN005'
         CLC   DYNERR,=C'0440'    DSN NOT FOUND ?
         BE    BBBER1             DISPLAY MESSAGE
         L     R14,ST900          GO BACK TO THE ROUTINE THAT
         BR    R14                REQUESTED THE ALLOC
BBBER1   EQU   *
         CALL  ISPLINK,(DISPLAY,,MSG,CURSOR),VL
         LTR   R15,R15            CONTINUE ?
         BNZ   ENTRY800           NO - EOJ
ENDERR1  EQU   *
         BAL   R14,ENTRY920       FREE ALL ALLOCATED DATA SETS
         B     ENTRY060           YES - DO IT AGAIN
SAVE14   DC    F'0'
SAVEDDN  DC    CL8' '
SAVEDYN  DC    XL150'00'
         EJECT
*----------------------------------------------------------------------
*
*        FREE ALL ALLOCATED DDNAMES
*
*----------------------------------------------------------------------
ENTRY920 DS    0H
         ST    R14,ST920
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL
         MVI   DYNTYPE,C'D'       INDICATE DE-ALLOCATE
         LA    R2,DDNAMES         ADDR OF ALL DDNAMES
LOOP920A EQU   *
         CLI   8(R2),X'FF'        IS IT ALLOCATED ?
         BNE   AAA920             NO - SKIP IT
         MVC   DYNDDNM,0(R2)      YES - MOVE DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT
         MVI   8(R2),X'00'        RESET FLAG
AAA920   EQU   *
         LA    R2,9(R2)           BUMP
         CLI   0(R2),X'FF'        END OF NAMES ?
         BNE   LOOP920A           NO - CONTINUE
EXIT920  EQU   *
         L     R14,ST920
         BR    R14
ST920    DC    F'-1'
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        LEFT SHIFT AND VERIFY INPUT IS NUMERIC                       *
*                                                                     *
*---------------------------------------------------------------------*
ENTRY940 DS    0H
         ST    R14,ST940          SAVE RETURN ADDR
LOOP940  EQU   *
         CLI   0(R15),C' '        NON-BLANK CHAR FOUND ?
         BE    AAA940             NO - KEEP LOOKING
         TM    0(R15),X'F0'       NUMERIC ?
         BNO   ERROR3             NO - ERROR
         MVC   0(1,R1),0(R15)     MOVE IN NUMERIC
         BCTR  R1,R0              BUMP FORWARD
AAA940   EQU   *
         BCTR  R15,R0
         BCT   R0,LOOP940
EXIT940  EQU   *
         L     R14,ST940          LOAD RETURN ADDR
         BR    R14
ST940    DC    F'-1'
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        LEFT JUSTIFY OUTPUT FIELD                                    *
*                                                                     *
*---------------------------------------------------------------------*
ENTRY960 DS    0H
         ST    R14,ST960          SAVE RETURN ADDR
         LR    R0,R15             SAVE OUTPUT FIELD LENGTH
         BCTR  R15,R0
         MVC   EDITOUT(8),=X'4020202020202120'
         CH    R15,=H'6'
         BH    AAA960
         OI    EDITOUT+4,X'01'
AAA960   EQU   *
         EX    R15,ED             EDIT OUTPUT DATA
         LA    R1,EDITOUT         POINT TO OUTPUT
         LR    R14,R1             POINT TO LAST BYTE OF OUTPUT
         AR    R14,R15
LOOP960  EQU   *
         CLI   0(R1),C' '         LEFT
         BNE   BBB960                 SHIFT
         EX    R15,LEFTSHFT                OUTPUT
         MVI   0(R14),C' '                       WITH
         BCT   R0,LOOP960                            BLANK
BBB960   EQU   *                                          FILL
         L     R14,ST960
         BR    R14
ED       ED    EDITOUT(0),0(R1)
LEFTSHFT MVC   0(0,R1),1(R1)
ST960    DC    F'-1'
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        DCB INFORMATION                                              *
*                                                                     *
*---------------------------------------------------------------------*
OUTPUT   DCB   DSORG=PS,MACRF=PM
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        DEFINED SCREEN VARIALBES                                     *
*                                                                     *
*---------------------------------------------------------------------*
CMNEVRL  DC    CL7' '             RECORD SIZE
CMNEVNR  DC    CL7' '             NUMBER OF RECORDS
CMNEVKL  DC    CL7' '             KEY LENGTH
CMNEVDV  DC    CL7' '             DEVICE TYPE
         DC    4X'FF'             LEAVE THIS HERE !!!!!
*---------------------------------------------------------------------*
*                                                                     *
*        DDNAME LIST                                                  *
*                                                                     *
*---------------------------------------------------------------------*
DDNAMES  EQU   *
OUTLIST  DC    XL8'00',X'00'
         DC    X'FF'
*---------------------------------------------------------------------*
*                                                                     *
*        STORAGE AREAS                                                *
*                                                                     *
*---------------------------------------------------------------------*
         LTORG
LENGTH   DC    F'0'               LENGTH OF EACH VARIABLE
DBWRD    DC    D'0'
EDITOUT  DC    CL8' '
WA1      DC    PL10'0'
WA2      DC    PL5'0'
RLWA     DC    CL5' '
KLWA     DC    CL5' '
REC#WA   DC    CL7' '
REC#     DC    PL4'0'             NO. OF RECORDS
RL       DC    PL3'0'             RECORD LENGTH(LRECL)
OPTBLKSZ DC    PL3'0'
CONSTANT DC    PL2'0'             CONSTANT
C        DC    PL2'0'             C VALUE
DL       DC    PL3'0'             BLKSIZE
KL       DC    PL3'0'             KEY LENGTH
TRKPCYL  DC    PL2'0'
BLKPTRK  DC    PL2'0'             NO. OF BLOCKS PER TRACK
BYTPTRK  DC    PL3'0'             BYTES PER TRACK
RECPBLK  DC    PL3'0'             RECORDS PER BLOCK
TAPESIZE DC    PL3'0'             TAPE BLKSIZE
REQBLKS  DC    PL4'0'             REQUIRE NO. OF BLOCKS
REQTRKS  DC    PL4'0'             REQUIRE NO. OF TRACKS
REQCYLS  DC    PL4'0'             REQUIRE NO. OF CYLINDERS
ZTEMPF   DC    CL44' '            XXXXXXXX.SPFTEMPF?.CNTL
TEMPOUT  DC    CL44' '            OUTPUT DSN
NAMELIST DC    CL50' '
BLANKS   DC    CL50' '
*---------------------------------------------------------------------*
*        DEVICE TYPE INFORMATION TABLE                                *
*---------------------------------------------------------------------*
DEVTBL   EQU   *
         DC   CL6'3350  ',PL2'30',PL3'19254',PL2'185',PL2'82',PL3'6233'
         DC   CL6'3340  ',PL2'12',PL3'08368',PL2'167',PL2'75',PL3'6233'
         DC   CL6'3330  ',PL2'19',PL3'13165',PL2'135',PL2'56',PL3'6233'
         DC    X'FFFF'
         EJECT
SPFMACS  $ISPCMDS
         EJECT
DYNPARMS $ALLOC
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        DEFINE PRINT LINES                                           *
*                                                                     *
*---------------------------------------------------------------------*
PRTLN1   DC    CL80'   RECORD LENGTH................'
PRTLN2   DC    CL80'   NO. OF RECORDS...............'
PRTLN3   DC    CL80'   KEY LENGTH...................'
PRTLN4   DC    CL80'   RECORDS PER BLOCK............'
PRTLN5   DC    CL80'   DISK BLKSIZE.................'
PRTLN6   DC    CL80'   TAPE BLKSIZE.................'
PRTLN7   DC    CL80'   DEVICE TYPE..................'
PRTLN8   DC    CL40'   DISK BLOCKS REQUIRED.........'
         DC    CL40'<--RECOMMEND TO USE FOR ALLOCATION'
         DC    CL80'        OR'
PRTLN9   DC    CL80'   DISK TRACKS REQUIRED.........'
         DC    CL80'        OR'
PRTLN10  DC    CL80'   DISK CYLINDERS REQUIRED......'
PRTLN#   EQU   ((*-PRTLN1)/80)
         EJECT
         DSECT
DEVTYPE  DS    CL6                DEVICE
DEVTPC   DS    PL2                TRKS/CYL
DEVBPT   DS    PL3                BYTES/TRK
DEVCONST DS    PL2
DEVC     DS    PL2                C VALUE(OVERHEAD PER RECORD)
DEVOPBLK DS    PL3                OPT. BLKSIZE
DEVLGH   EQU   *-DEVTYPE
         END
./ ADD  NAME=CMNEVV0
         TITLE 'ESTIMATE VSAM SPACE'
*---------------------------------------------------------------------*
*                                                                     *
*        PROGRAM ID: CMNEVV0                                          *
*        PROGRAM TYPE: ONLINE                                         *
*        PROGRAM OBJECTIVE: ESTIMATE REQUIRED VSAM SPACE BASE ON      *
*                           GIVEN VSAM ACCESS METHOD, LRECL, # OF     *
*                           RECORDS, CI SIZE, ETC.                    *
*        PROGRAMMER: M. ANDERSON                                      *
*                    K. TAM                                           *
*        DATE WRITTEN:                                                *
*                                                                     *
*        PROGRAM NOTES:                                               *
*        1. THIS PROGRAM INVOKES PANEL CMNEVV0                        *
*                                                                     *
*---------------------------------------------------------------------*
         EJECT
CMNEVV0  $PROLOG R12,R11
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        SET CONTROLS - LET SPF HANDLE ANY ERRORS                     *
*                                                                     *
*---------------------------------------------------------------------*
ENTRY010 DS    0H
         CALL  ISPLINK,(CONTROL,ERRORS,CANCEL),VL
EXIT010  EQU   *
         B     ENTRY020
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        DEFINE VARIABLES                                             *
*                                                                     *
*---------------------------------------------------------------------*
ENTRY020 DS    0H
         MVC   LENGTH,=F'1'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(9),=CL9'(DYNTYPE)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,DYNTYPE,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'4'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(8),=CL8'(SPFRC)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,SPFRC,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'4'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(23),=CL23'(DYNR15 DYNERR DYNINFO)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,DYNR15,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'8'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(9),=C'(DYNDDNM)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,DYNDDNM,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'8'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(80),=CL80'(CMNEVAM CMNEVRS CMNEVNR CMNEVCIS CMNX
               EVPCI CMNEVPCA CMNEVDEV)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,CMNEVAM,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'3'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(10),=C'(CMNEVPTR)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,CMNEVPTR,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'44'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(8),=C'(ZTEMPF)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,ZTEMPF,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'44'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(8),=CL8'(DYNDSN)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,DYNDSN,CHAR,LENGTH),VL
*
EXIT020  EQU   *
         B     ENTRY040
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        DISPLAY FIRST PANEL                                          *
*                                                                     *
*---------------------------------------------------------------------*
ENTRY040 DS    0H
         MVC   PANEL,=CL8'CMNEVV0'
         MVC   CURSOR,=CL8'CMNEVAM'  POSITION CURSOR
         CALL  ISPLINK,(DISPLAY,PANEL,,CURSOR),VL
         LTR   R15,R15            CONTINUE PROCESSING ?
         BNZ   EOJ                NO - EOJ
EXIT040  EQU   *
         B     ENTRY060
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        VERIFY INPUT DATA                                            *
*                                                                     *
*---------------------------------------------------------------------*
ENTRY060 DS    0H
         MVC   CURSOR,=CL8'CMNEVAM'  POSITION CURSOR FOR ERROR
         CLC   CMNEVAM,BLANKS     ANY INPUT ?
         BE    ERROR3             NO - ERROR
         MVC   SAVEAM,CMNEVAM     SAVE INPUT
*
AAA060   EQU   *
         MVC   CURSOR,=CL8'CMNEVRS'  POSITION CURSOR FOR ERROR
         CLC   CMNEVRS,BLANKS     ANY INPUT ?
         BE    ERROR3             NO - ERROR
         MVC   SAVERS,CMNEVRS     SAVE INPUT
         MVC   WA1,BLANKS         CLEAR WORK AREA
         LA    R15,SAVERS+4       POINT TO INPUT(LAST BYTE)
         LA    R1,WA1+4           POINT TO OUTPUT(LAST BYTE)
         LA    R0,5
         BAL   R14,ENTRY940       RIGHT SHIFT
         PACK  LRECL,WA1(5)       CONVERT TO PACK NUMBER
         CP    LRECL,=P'0'        0 LRECL ?
         BNH   ERROR3             INVALID ENTRY
*
         MVC   CURSOR,=CL8'CMNEVNR'  POSITION CURSOR FOR ERROR
         CLC   CMNEVNR,BLANKS     ANY INPUT ?
         BE    ERROR3             NO - ERROR
         MVC   SAVENR,CMNEVNR     SAVE INPUT
         MVC   WA1,BLANKS         CLEAR WORK AREA
         LA    R15,SAVENR+6       POINT TO INPUT(LAST BYTE)
         LA    R1,WA1+6           POINT TO OUTPUT(LAST BYTE)
         LA    R0,7
         BAL   R14,ENTRY940       RIGHT SHIFT
         PACK  REC#,WA1(7)        CONVERT TO PACK NUMBER
         CP    REC#,=P'0'         NO RECORDS?
         BNH   ERROR3             INVALID ENTRY
*
         MVC   CURSOR,=CL8'CMNEVCIS' POSITION CURSOR FOR ERROR
         CLC   CMNEVCIS,BLANKS    ANY INPUT ?
         BE    ERROR3             NO - ERROR
         MVC   SAVECIS,CMNEVCIS   SAVE INPUT
         MVC   WA1,BLANKS         CLEAR WORK AREA
         LA    R15,CMNEVCIS+3     POINT TO INPUT(LAST BYTE)
         LA    R1,WA1+3           POINT TO OUTPUT(LAST BYTE)
         LA    R0,4
         BAL   R14,ENTRY940       RIGHT SHIFT
         PACK  CISZ,WA1(4)        CONVERT TO PACK NUMBER
         CP    CISZ,=P'0'         0 CI SIZE ?
         BNH   ERROR3             INVALID ENTRY
*
         MVC   CURSOR,=CL8'CMNEVPCI'  SET CURSOR FOR ERROR
         MVC   SAVEPCI,=CL2'0'    DEFAULT TO NO CI PERCENT FREE SPACE
         CLC   CMNEVPCI,BLANKS    ANY INPUT ?
         BE    BBB060             YES - OK
         MVC   SAVEPCI,CMNEVPCI   SAVE INPUT
BBB060   EQU   *
         MVC   WA1,BLANKS         CLEAR WORK AREA
         LA    R15,SAVEPCI+1      POINT TO INPUT(LAST BYTE)
         LA    R1,WA1+1           POINT TO OUTPUT(LAST BYTE)
         LA    R0,2
         BAL   R14,ENTRY940       RIGHT SHIFT
         PACK  PCI,WA1(2)         CONVERT TO PACK NUMBER
         CP    PCI,=P'0'          LESS THAN 0 %CI ?
         BL    ERROR3             YES - INVALID ENTRY
         BE    BBB060A            ZERO PERCENT - OK
         CLC   SAVEAM,=C'ESDS  '  ESDS DOES NOT ALLOW > 0% CI FREE SPC
         BE    ERROR3
BBB060A  EQU   *
*
         MVC   CURSOR,=CL8'CMNEVPCA'  SET CURSOR FOR ERROR
         MVC   SAVEPCA,=CL2'0'    DEFAULT TO NO CA PERCENT FREE SPACE
         CLC   CMNEVPCA,BLANKS    ANY INPUT ?
         BE    CCC060             YES - OK
         MVC   SAVEPCA,CMNEVPCA   SAVE INPUT
CCC060   EQU   *
         MVC   WA1,BLANKS         CLEAR WORK AREA
         LA    R15,SAVEPCA+1      POINT TO INPUT(LAST BYTE)
         LA    R1,WA1+1           POINT TO OUTPUT(LAST BYTE)
         LA    R0,2
         BAL   R14,ENTRY940       RIGHT SHIFT
         PACK  PCA,WA1(2)         CONVERT TO PACK NUMBER
         CP    PCA,=P'0'          LESS THAN 0 %CA ?
         BL    ERROR3             YES - INVALID ENTRY
         BE    CCC060A            ZERO PERCENT - OK
         CLC   SAVEAM,=C'ESDS  '  ESDS DOES NOT ALLOW > 0% CA FREE SPC
         BE    ERROR3
CCC060A  EQU   *
*
         MVC   CURSOR,=CL8'CMNEVDEV'  POSITION CURSOR FOR ERROR
         MVC   SAVEDEV,=CL6'3350'  DEFAULT TO 3350
         CLC   CMNEVDEV,BLANKS    ANY INPUT ?
         BE    DDD060             NO - USE DEFAULT
         MVC   SAVEDEV,CMNEVDEV   SAVE INPUT
DDD060   EQU   *
         LA    R14,DEVTBL         POINT TO DEVICE INFO TABLE
         USING DEVTYPE,R14
EEE060   EQU   *
         CLI   0(R14),X'FF'       END OF TABLE ?
         BE    ERROR3             YES - INVALID DEVICE TYPE
         CLC   SAVEDEV,DEVTYPE    MATCH DEVICE TYPE ?
         BE    FFF060             YES
         LA    R14,DEVLGH(R14)    POINT TO NEXT ONE
         B     EEE060
FFF060   EQU   *
         ZAP   TRKPCYL,DEVTPC     SAVE TRK PER CYL
*
GGG060   EQU   *
         MVC   CURSOR,=CL8'CMNEVPTR'  POSITION CURSOR FOR ERROR
         CLC   CMNEVPTR,BLANKS    ANY INPUT ?
         BE    ERROR3             NO - ERROR
         MVC   SAVEPTR,CMNEVPTR   SAVE INPUT
         MVC   WA1,BLANKS         CLEAR WORK AREA
         LA    R15,SAVEPTR+2      POINT TO INPUT(LAST BYTE)
         LA    R1,WA1+2           POINT TO OUTPUT(LAST BYTE)
         LA    R0,3
         BAL   R14,ENTRY940       RIGHT SHIFT
         PACK  IMSPTRS,WA1(3)     CONVERT TO PACK NUMBER
*
EXIT060  EQU   *
         B     ENTRY070
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        GET SHARE VARIABLES AND EDIT DSN TO USERID.SPFTEMP?.@F80     *
*                                                                     *
*---------------------------------------------------------------------*
ENTRY070 DS    0H
         CLI   OUTLIST+8,X'FF'    OUTPUT DSN ALREADY ESTABLISHED ?
         BE    EXIT070            YES - SKIP TO AVOID REDUNDANT WORK
*
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(8),=CL8'(ZTEMPF)'
         CALL  ISPLINK,(VGET,NAMELIST,SHARED),VL
*
         MVC   TEMPOUT(18),ZTEMPF MOVE DSN
         LA    R1,TEMPOUT
LOOP070A EQU   *
         CLI   0(R1),C'.'         FIND FIRST DOT
         BE    AAA070
         LA    R1,1(R1)
         B     LOOP070A
AAA070   EQU   *
         LA    R1,1(R1)           BUMP
LOOP070B EQU   *
         CLI   0(R1),C'.'         FIND SECOND DOT
         BE    BBB070
         LA    R1,1(R1)
         B     LOOP070B
BBB070   EQU   *
         LA    R1,1(R1)          BUMP PAST DOT
         MVC   0(8,R1),=CL8'@F80' MOVE LAST QUALIFIER
EXIT070  EQU   *
         B     ENTRY080
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        ALLOCATE OUTPUT DATA SET - USERID.SPFTEMP?.@F80              *
*                                                                     *
*---------------------------------------------------------------------*
ENTRY080 DS    0H
         CLI   OUTLIST+8,X'FF'    IS IT ALREADY ALLOCATED ?
         BE    EXIT080            YES - SKIP ALLOCATION
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         MVI   DYNTYPE,C'A'
         MVI   DYNRTDD,X'FF'
         MVC   DYNDSN,TEMPOUT     DATA SET NAME
         MVI   DYNDISP1,DYNSHR    DISP=SHR
         BAL   R14,ENTRY900       TRY TO ALLOCATE THE DATA SET
         CLC   DYNR15,=4C'0'      ANY ERRORS ?
         BE    AAA080             NO - OK
         CLC   DYNERR,=C'1708'    DATA SET NOT CATALOGED CONDITION ?
         BNE   ENTRY800           NO - SERIOUS PROBLEM
         MVI   DYNDISP1,DYNNEW    CREATE A DATA SET WITH
         MVI   DYNDISP2,DYNCAT       DISP=(NEW,CATLG,DELETE)
         MVI   DYNDISP3,DYNDEL
         MVC   DYNBTC,=C'BLK'        SPACE=(6160,(3,3),RLSE)
         MVC   DYNPRIM,=AL3(3)
         MVC   DYNSEC,=AL3(3)
         MVI   DYNRLSE,X'FF'
         MVC   DYNBLKSZ,=H'6160'      DCB=(BLKSIZE=6160,
         MVC   DYNLRECL,=H'80'             LRECL=80,
         MVI   DYNRECFM,DYNFB              RECFM=FB)
         BAL   R14,ENTRY900       ALLOCATION
         CLC   DYNR15,=4C'0'      CREATED OK ?
         BNE   ENTRY800           NO - FORGET IT
AAA080   EQU   *
         MVC   OUTLIST,DYNRTDD    SAVE DDNAME
         MVC   OUTPUT+40(8),DYNRTDD  MOVE DDNAME TO DCB
         MVI   OUTLIST+8,X'FF'    INDICATE ALLOCATED
EXIT080  EQU   *
         B     ENTRY090
         EJECT
*----------------------------------------------------------------------
*
*        PROCESS INPUT PARAMETERS
*
*----------------------------------------------------------------------
ENTRY090 DS    0H
*    IF ACCESS METHOD IS IMS, ADD 2 BYTES TO LRECL
         CLC   SAVEAM,=C'KSDS  '  KSDS ?
         BE    CCC090             YES - OK
         CLC   SAVEAM,=C'ESDS  '  ESDS ?
         BE    DDD090             YES - OK
         AP    LRECL,=P'2'        LRECL + SEGMENT CODE + DELETE BYTE
*    IF ACCESS METHOD IS HDAM, ADD 4 BYTES FOR ROOT ANCHOR POINT
         CLC   SAVEAM,=C'HDAM  '  HDAM ?
         BNE   A88090             YES - OK
         AP    LRECL,=P'4'        LRECL + RAP
         B     AAA090
A88090   EQU   *
*    IF ACCESS METHOD IS PRIMARY OR SECONDARY INDEX, ADD 4 BYTE PTR
         CLC   SAVEAM,=C'PINDEX'  PINDEX ?
         BE    A99090             YES - OK
         CLC   SAVEAM,=C'2INDEX'  2INDEX ?
         BNE   AAA090             YES - OK
A99090   AP    LRECL,=P'4'        LRECL + RAP
         B     CCC090
AAA090   EQU   *
*    IF ACCESS METHOD IS HIDAM, HDAM OR HISAM, CALC POINTER LENGTH.
         CLC   SAVEAM,=C'HIDAM '  HIDAM ?
         BE    BBB090             YES - OK
         CLC   SAVEAM,=C'HDAM  '  HDAM ?
         BE    BBB090             YES - OK
         CLC   SAVEAM,=C'HISAM '  HISAM ?
         BNE   CCC090             YES - OK
BBB090   EQU   *
         ZAP   PTRLEN,=P'4'       SET POINTER LENGTH TO 4
         MP    PTRLEN,IMSPTRS     PTRLEN = PTRLEN * IMSPTRS
         AP    LRECL,PTRLEN       LRECL + POINTER LENGTH
CCC090   EQU   *
*    IF ACCESS METHOD IS ESDS, HIDAM, HDAM
*                        ALL TRACKS PER CYLINDER ARE USED
*    IF ACCESS METHOD IS KSDS, PINDEX, 2INDEX, HISAM, SHISAM
*                        (ASSUME IMBED), ONE LESS TRK/CYL ARE USED
*
         CLC   SAVEAM,=C'HDAM  '  HDAM ?
         BE    DDD090             YES - OK
         CLC   SAVEAM,=C'HIDAM '  HIDAM ?
         BE    DDD090             YES - OK
         SP    TRKPCYL,=P'1'      ONE TRACK LESS
*
DDD090   EQU   *
*
*    LARGEST LRECL + 7 < CI SIZE
*
         MVC   CURSOR,=CL8'CMNEVRS'  POSITION CURSOR FOR ERROR
         ZAP   WA2,LRECL       LRECL
         AP    WA2,=P'7'       LRECL + CNTL INFO
         CP    WA2,CISZ        < CI SIZE ?
         BH    ERROR3          NO - ERROR
*
*    AVAILABLE CI FOR DATA = (CI SIZE - CNTL INFO)*(100% - %CI)
*                          = (CI SIZE - 7)*(100% - %CI)
*
         ZAP   WA2,CISZ           CI SIZE - 7
         SP    WA2,=P'7'
         ZAP   WA1,WA2            SAVE IT
         MP    WA2,PCI            X %CI
         SRP   WA2,62,0
         SP    WA1,WA2            CI - CI*%CI
         ZAP   AVAILCI,WA1        SAVE AVAIL CI
*
*    RECORDS PER CI = AVAILABLE CI / RECORD SIZE
*
         ZAP   WA1,AVAILCI
         DP    WA1,LRECL
         ZAP   RECPCI,WA1(7)      SAVE RECORDS PER CI
*
*    REQUIRE NUMBER OF CI = NUMBER OF RECORDS / RECORDS PER CI
*
         ZAP   WA1,REC#           NUMBER OF RECORDS
         DP    WA1,RECPCI         / REC PER CI
         CP    WA1+6(4),=P'0'     ANY REMAINDER ?
         BNH   EEE090             NO - GOOD
         AP    WA1(6),=P'1'       MOVE TO NEXT WHOLE NUMBER
EEE090   EQU   *
         ZAP   #CI,WA1(6)         REQ # OF CI FOR GIVEN # OF REC
*
*    CI PER TRK = 8192 / CI SIZE * 2
*
         ZAP   WA1,=P'8192'       CI PER TRK
         DP    WA1,CISZ
         MP    WA1(7),=P'2'
         ZAP   CIPTRK,WA1(7)      CI PER TRK
*
*    RECORDS PER TRK = RECORDS PER CI * CI PER TRK      CA = CYL
*
         ZAP   WA1,RECPCI
         MP    WA1,CIPTRK
         ZAP   RECPTRK,WA1        REC PER TRK
*                                                       NOTE:
*    CI PER CYL = CI PER TRK * TRKS PER CYL                CA = CYL
*    AVAIL CI PER CA = CI PER CA * (100% - %CA)
*
         ZAP   WA1,CIPTRK
         MP    WA1,TRKPCYL
         ZAP   CIPCYL,WA1         CI PER CYL
         ZAP   WA2,=P'100'
         SP    WA2,PCA            WA2 = 100 - %CA-FREE-SPACE
         MP    WA1,WA2            WA1 = WA1 * WA2
         SRP   WA1,62,0           WA1 = WA1 / 100
         ZAP   AVAILCA,WA1        AVAIL CI PER CYL
*
*    RECORDS PER CYL = RECORDS PER CI * CI PER CYL
*
         ZAP   WA1,RECPCI         WA1 = RECORDS PER CI
         MP    WA1,CIPCYL         WA1 = WA1 * CI PER CYL
         ZAP   RECPCYL,WA1        RECORDS PER CYL
*
*    REQ SPACE = REQ TOTAL CI / AVAIL CA
*
         ZAP   WA1,#CI            WA1 = #CI
         DP    WA1,AVAILCA        WA1 = WA1 / AVAIL CA
         CP    WA1(8),=P'0'       LESS THAN 1 CYLINDER ?
         BH    GGG090             NO - OK
         ZAP   WA2,WA1+8(2)       CONVERT TO TRACK NUMBER
         ZAP   WA1,WA2
         DP    WA1,CIPTRK
         CP    WA1+8(2),=P'0'     ANY REMAINDER ?
         BNH   FFF090             NO - OK
         AP    WA1(8),=P'1'       INCR. TO NEXT INTERGER
FFF090   EQU   *
         ZAP   REQSP,WA1(8)
         MVC   AUNIT,=C'TRKS'
         B     III090
GGG090   EQU   *
         CP    WA1+8(2),=P'0'     ANY REMAINDER ?
         BNH   HHH090             NO - OK
         AP    WA1(8),=P'1'       BUMP TO NEXT HIGH INTEGER
HHH090   EQU   *
         ZAP   REQSP,WA1(8)
         MVC   AUNIT,=C'CYLS'
III090   EQU   *
         OPEN  (OUTPUT,(OUTPUT))
         MVC   PRTLN1+30(6),SAVEAM
         LA    R1,LRECL
         LA    R15,6
         BAL   R14,ENTRY960
         MVC   PRTLN2+30(5),EDITOUT
         MVC   PRTLN3+30(7),SAVENR
         MVC   PRTLN4+30(4),SAVECIS
         MVC   PRTLN5+30(2),SAVEPCI
         MVC   PRTLN6+30(2),SAVEPCA
         MVC   PRTLN7+30(6),SAVEDEV
         LA    R1,AVAILCI
         LA    R15,6
         BAL   R14,ENTRY960
         MVC   PRTLN8+30(4),EDITOUT
         LA    R1,RECPCI
         LA    R15,8
         BAL   R14,ENTRY960
         MVC   PRTLN9+30(8),EDITOUT
         LA    R1,CIPTRK
         LA    R15,4
         BAL   R14,ENTRY960
         MVC   PRTLN10+30(4),EDITOUT
         LA    R1,RECPTRK
         LA    R15,8
         BAL   R14,ENTRY960
         MVC   PRTLN11+30(8),EDITOUT
         LA    R1,#CI
         LA    R15,8
         BAL   R14,ENTRY960
         MVC   PRTLN12+30(8),EDITOUT
         LA    R1,CIPCYL
         LA    R15,6
         BAL   R14,ENTRY960
         MVC   PRTLN13+30(6),EDITOUT
         LA    R1,RECPCYL
         LA    R15,8
         BAL   R14,ENTRY960
         MVC   PRTLN14+30(7),EDITOUT
         LA    R1,AVAILCA
         LA    R15,4
         BAL   R14,ENTRY960
         MVC   PRTLN15+30(4),EDITOUT
         LA    R1,REQSP
         LA    R15,6
         BAL   R14,ENTRY960
         MVC   PRTLN16+30(6),EDITOUT
         MVC   PRTLN16+36(4),AUNIT
         LA    R2,PRTLN1
         LA    R3,PRTLN#
LOOP090  EQU   *
         PUT   OUTPUT,(2)
         LA    R2,80(R2)
         BCT   R3,LOOP090
         CLOSE (OUTPUT)
EXIT090  EQU   *
         B     ENTRY700
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        BROWSE RESULT OF VSAM SPACE CALCULATION                      *
*                                                                     *
*---------------------------------------------------------------------*
ENTRY700 DS    0H
         MVC   NAMELIST,BLANKS
         MVI   NAMELIST,C''''
         MVC   NAMELIST+1(43),TEMPOUT
         LA    R14,NAMELIST+43
         LA    R15,44
AAA700   EQU   *
         CLI   0(R14),C' '
         BNE   BBB700
         BCTR  R14,R0
         BCT   R15,AAA700
BBB700   EQU   *
         LA    R14,1(R14)
         MVI   0(R14),C''''
         CALL  ISPLINK,(BROWSE,NAMELIST),VL
EXIT700  EQU   *
         B     ENTRY800
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        INDICATE PROCESSING COMPLETE                                 *
*                                                                     *
*---------------------------------------------------------------------*
ENTRY800 DS    0H
         CVD   R15,DBWRD         CONVERT RC
         MVC   SPFRC,=X'40202120'
         ED    SPFRC,DBWRD+6     DISPLAY RC
         MVC   CURSOR,=CL8'CMNEVAM' POSITION CURSOR FOR DISPLAY
         MVC   MSG,=CL8'CMN001'   PROCESSING COMPLETE MESSAGE
         MVC   PANEL,=CL8'CMNEVV0'
         CALL  ISPLINK,(DISPLAY,PANEL,MSG,CURSOR),VL
         LTR   R15,R15            CONTINUE ?
         BZ    ENTRY060           YES - DO IT AGAIN
         BAL   R14,ENTRY920       FREE ALL ALLOCATED DATA SET
EXIT800  EQU   *                  NO - END
         B     EOJ
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        INDICATE ERROR DETECTED, AND PROCESSING TERMINATED           *
*                                                                     *
*---------------------------------------------------------------------*
ERROR3   DS    0H
         MVC   MSG,=CL8'CMN018'   ERROR MESSAGE
         CALL  ISPLINK,(DISPLAY,,MSG,CURSOR),VL
         LTR   R15,R15            CONTINUE ?
         BZ    ENTRY060           YES - DO IT AGAIN
EXITERR  EQU   *
         B     EOJ
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        END OF JOB                                                   *
*                                                                     *
*---------------------------------------------------------------------*
EOJ      DS    0H
         ICM   R15,15,DYNEPA      DYN ALLOC SUB-ROUTINE
         BZ    EXITEOJ
         DELETE EP=ALLOCRTN
EXITEOJ  EQU   *
         LA    R15,0
         $EPILOG
         EJECT
*----------------------------------------------------------------------
*
*        DYNAMIC ALLOCATION
*
*----------------------------------------------------------------------
ENTRY900 DS    0H
         ST    R14,ST900
         ICM   R15,15,DYNEPA      DYN ALLOC SUB-ROUTINE
         BNZ   AAA900
         LOAD  EP=ALLOCRTN
         ST    R0,DYNEPA
         LR    R15,R0
AAA900   EQU   *
         LA    R1,=A(DYNPARMS)
         BALR  R14,R15
NOP900   NOP   EXIT900            ACTIVATED BY ERROR1 FOR 0410 ERROR
         CLC   DYNR15,=4C'0'      ANY ERRORS ?
         BNE   ERROR1             YES - DECODE THE ERROR
EXIT900  EQU   *
         L     R14,ST900
         BR    R14
ST900    DC    F'-1'
DYNEPA   DC    F'0'
         EJECT
*----------------------------------------------------------------------
*
*        DYNAMIC ALLOCATION ERROR
*
*----------------------------------------------------------------------
ERROR1   DS    0H
         CLC   DYNERR,=C'0410'    DDNAME UNAVAILABLE ?
         BNE   AAAER1             NO - OK
         MVC   SAVE14,ST900       SAVE 900 RETURN POINT
         MVI   NOP900+1,X'F0'     SET TO BRANCH
         MVC   SAVEDYN(DYNLL),DYNPARMS  SAVE ORIGINAL PARMS
         MVC   SAVEDDN,DYNDDNM    SAVE DDNAME
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       LENGTH
         MVI   DYNTYPE,C'D'       ATTEMPT TO DE-ALLOCATE
         MVC   DYNDDNM,SAVEDDN    DDNAME
         MVI   DYNUNALC,X'FF'     DE-ALLOC EVEN IF 'PERM' BIT IS ON
         BAL   R14,ENTRY900
         MVC   DYNPARMS(DYNLL),SAVEDYN  RESTORE ORIGINAL PARMS
         MVI   DYNTYPE,C'A'       YES - TRY ALLOCATING AGAIN
         BAL   R14,ENTRY900
         MVC   ST900,SAVE14       RESTORE SAVE AREA
         MVI   NOP900+1,X'00'     SET TO NOP
         CLC   DYNR15,=4C'0'      ALLOCATE OK ?
         BNE   AAAER1             NO - DISPLAY ERROR MESSAGE
         L     R14,SAVE14         RETURN ADDR
         BR    R14
AAAER1   EQU   *
         MVC   MSG,=CL8'DYN001'
         CLC   DYNERR,=C'0320'    INVALID DSNAME ?
         BE    BBBER1             DISPLAY MESSAGE
         MVC   MSG,=CL8'DYN002'
         CLC   DYNERR,=C'0210'    DATA SET IN USE ?
         BE    BBBER1             DISPLAY MESSAGE
         MVC   MSG,=CL8'DYN005'
         CLC   DYNERR,=C'0440'    DSN NOT FOUND ?
         BE    BBBER1             DISPLAY MESSAGE
         L     R14,ST900          GO BACK TO THE ROUTINE THAT
         BR    R14                REQUESTED THE ALLOC
BBBER1   EQU   *
         CALL  ISPLINK,(DISPLAY,,MSG,CURSOR),VL
         LTR   R15,R15            CONTINUE ?
         BNZ   ENTRY800           NO - EOJ
ENDERR1  EQU   *
         BAL   R14,ENTRY920       FREE ALL ALLOCATED DATA SETS
         B     ENTRY060           YES - DO IT AGAIN
SAVE14   DC    F'0'
SAVEDDN  DC    CL8' '
SAVEDYN  DC    XL150'00'
         EJECT
*----------------------------------------------------------------------
*
*        FREE ALL ALLOCATED DDNAMES
*
*----------------------------------------------------------------------
ENTRY920 DS    0H
         ST    R14,ST920
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL
         MVI   DYNTYPE,C'D'       INDICATE DE-ALLOCATE
         LA    R2,DDNAMES         ADDR OF ALL DDNAMES
LOOP920A EQU   *
         CLI   8(R2),X'FF'        IS IT ALLOCATED ?
         BNE   AAA920             NO - SKIP IT
         MVC   DYNDDNM,0(R2)      YES - MOVE DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT
         MVI   8(R2),X'00'        RESET FLAG
AAA920   EQU   *
         LA    R2,9(R2)           BUMP
         CLI   0(R2),X'FF'        END OF NAMES ?
         BNE   LOOP920A           NO - CONTINUE
EXIT920  EQU   *
         L     R14,ST920
         BR    R14
ST920    DC    F'-1'
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        RIGHT SHIFT AND VERIFY IF INPUT IS NUMERIC                   *
*                                                                     *
*---------------------------------------------------------------------*
ENTRY940 DS    0H
         ST    R14,ST940          SAVE RETURN ADDR
LOOP940  EQU   *
         CLI   0(R15),C' '        NON-BLANK CHAR FOUND ?
         BE    AAA940             NO - KEEP LOOKING
         TM    0(R15),X'F0'       NUMERIC ?
         BNO   ERROR3             NO - ERROR
         MVC   0(1,R1),0(R15)     MOVE IN NUMERIC
         BCTR  R1,R0              BUMP FORWARD
AAA940   EQU   *
         BCTR  R15,R0
         BCT   R0,LOOP940
EXIT940  EQU   *
         L     R14,ST940          LOAD RETURN ADDR
         BR    R14
ST940    DC    F'-1'
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        LEFT JUSTIFY OUTPUT FIELD                                    *
*                                                                     *
*---------------------------------------------------------------------*
ENTRY960 DS    0H
         ST    R14,ST960          SAVE RETURN ADDR
         LR    R0,R15             SAVE OUTPUT FIELD LENGTH
         BCTR  R15,R0
         MVC   EDITOUT(8),=X'4020202020202120'
*        CH    R15,=H'8'
*        BE    AAA960
*        OI    EDITOUT+4,X'01'
*        CH    R15,=H'6'
*        BE    AAA960
*        OI    EDITOUT+2,X'01'
AAA960   EQU   *
         EX    R15,ED             EDIT OUTPUT DATA
         LA    R1,EDITOUT         POINT TO OUTPUT
         LR    R14,R1             POINT TO LAST BYTE OF OUTPUT
         AR    R14,R15
LOOP960  EQU   *
         CLI   0(R1),C' '         LEFT
         BNE   BBB960                 SHIFT
         EX    R15,LEFTSHFT                OUTPUT
         MVI   0(R14),C' '                       WITH
         BCT   R0,LOOP960                            BLANK
BBB960   EQU   *                                          FILL
         L     R14,ST960
         BR    R14
ED       ED    EDITOUT(0),0(R1)
LEFTSHFT MVC   0(0,R1),1(R1)
ST960    DC    F'-1'
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        DCB INFORMATION                                              *
*                                                                     *
*---------------------------------------------------------------------*
OUTPUT   DCB   DSORG=PS,MACRF=PM
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        DEFINED SCREEN VARIALBES                                     *
*                                                                     *
*---------------------------------------------------------------------*
CMNEVAM  DC    CL8' '             ACCESS METHOD
CMNEVRS  DC    CL8' '             RECORD SIZE
CMNEVNR  DC    CL8' '             NUMBER OF RECORDS
CMNEVCIS DC    CL8' '             CONTROL INTERVAL SIZE
CMNEVPCI DC    CL8' '             CI PERCENT FREE SPACE
CMNEVPCA DC    CL8' '             CA PERCENT FREE SPACE
CMNEVDEV DC    CL8' '             DEVICE TYPE
CMNEVPTR DC    CL3' '             NUMBER OF POINTERS (IMS)
         DC    4X'FF'             LEAVE THIS HERE !!!!!
*---------------------------------------------------------------------*
*                                                                     *
*        DDNAME LIST                                                  *
*                                                                     *
*---------------------------------------------------------------------*
DDNAMES  EQU   *
OUTLIST  DC    XL8'00',X'00'
         DC    X'FF'
*---------------------------------------------------------------------*
*                                                                     *
*        STORAGE AREAS                                                *
*                                                                     *
*---------------------------------------------------------------------*
         LTORG
LENGTH   DC    F'0'               LENGTH OF EACH VARIABLE
DBWRD    DC    D'0'
WA1      DC    PL10'0'
WA2      DC    PL5'0'
SAVEAM   DC    CL6' '             SAVE INPUT ACCESS METHOD
SAVERS   DC    CL5' '             SAVE INPUT RECORD SIZE
SAVENR   DC    CL7' '             SAVE INPUT NUMBER OF RECORDS
SAVECIS  DC    CL4' '             SAVE INPUT CONTROL INTERVAL SIZE
SAVEPCI  DC    CL2' '             SAVE INPUT CI PERCENT FREE SPACE
SAVEPCA  DC    CL2' '             SAVE INPUT CA PERCENT FREE SPACE
SAVEDEV  DC    CL6' '             SAVE INPUT DEVICE TYPE
SAVEPTR  DC    CL3' '             SAVE INPUT NUMBER OF IMS POINTERS
AUNIT    DC    CL4' '
EDITOUT  DC    CL8' '             EDIT WORK AREA
LRECL    DC    PL3'0'             LRECL
REC#     DC    PL4'0'             NO OF RECORDS
CISZ     DC    PL3'0'             CI SIZE
PCI      DC    PL2'0'             CI PERCENT FREE SPACE
PCA      DC    PL2'0'             CA PERCENT FREE SPACE
RECPCI   DC    PL4'0'             RECORDS PER CI
RECPTRK  DC    PL4'0'             RECORDS PER TRACK
RECPCYL  DC    PL4'0'             RECORDS PER CYLINDER
#CI      DC    PL4'0'             # OF REQUIRED CI FOR GIVE # OF REC
CIPTRK   DC    PL2'0'             CI PER TRACK
CIPCYL   DC    PL3'0'             CI PER CYLINDER
TRKPCYL  DC    PL2'0'             TRACKS PER CYLINDER(CA)
AVAILCA  DC    PL2'0'             AVAIL CA AFTER DEDUCE % CA
AVAILCI  DC    PL3'0'             AVAIL CI AFTER DEDUCE % CI
REQSP    DC    PL3'0'             ESTIMATE REQUIRED SPACE
IMSPTRS  DC    PL2'0'             NUMBER OF IMS POINTERS
PTRLEN   DC    PL3'4'             IMS POINTER LENGTH
ZTEMPF   DC    CL44' '            XXXXXXXX.SPFTEMPF?.CNTL
TEMPOUT  DC    CL44' '            OUTPUT DSN
NAMELIST DC    CL80' '
BLANKS   DC    CL80' '
*---------------------------------------------------------------------*
*        DEVICE TYPE INFORMATION TABLE                                *
*---------------------------------------------------------------------*
DEVTBL   EQU   *
         DC    CL6'3380  ',PL2'15',PL3'47476'
         DC    CL6'3350  ',PL2'30',PL3'19069'
         DC    CL6'3340  ',PL2'12',PL3'08368'
         DC    CL6'3330-1',PL2'19',PL3'13030'
         DC    X'FFFF'
         EJECT
SPFMACS  $ISPCMDS
         EJECT
DYNPARMS $ALLOC
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        DEFINE PRINT LINES                                           *
*                                                                     *
*---------------------------------------------------------------------*
PRTLN1   DC    CL80'   ACCESS METHOD...............'
PRTLN2   DC    CL80'   RECORD LENGTH...............'
PRTLN3   DC    CL80'   NO. OF RECORDS..............'
PRTLN4   DC    CL80'   CI SIZE.....................'
PRTLN5   DC    CL80'   CI PERCENT FREE SPACE.......'
PRTLN6   DC    CL80'   CA PERCENT FREE SPACE.......'
PRTLN7   DC    CL80'   DEVICE TYPE.................'
PRTLN8   DC    CL80'   AVAIL CI FOR DATA...........'
PRTLN9   DC    CL80'   RECORDS PER CI..............'
PRTLN10  DC    CL80'   CI PER TRK..................'
PRTLN11  DC    CL80'   RECORDS PER TRK.............'
PRTLN12  DC    CL80'   REQUIRE NUMBER OF CI........'
PRTLN13  DC    CL80'   CI PER CYL..................'
PRTLN14  DC    CL80'   RECORDS PER CYL.............'
PRTLN15  DC    CL80'   AVAIL CI PER CYL FOR DATA...'
PRTLN16  DC    CL80'   REQUIRE DISK SPACE..........'
PRTLN#   EQU   ((*-PRTLN1)/80)
         EJECT
         DSECT
DEVTYPE  DS    CL6                DEVICE TYPE
DEVTPC   DS    PL2                TRACKS PER CYLINDER
DEVBPT   DS    PL3                BYTES PER TRACK
DEVLGH   EQU   *-DEVTYPE
         END
./ ADD  NAME=CMNEXP0
*----------------------------------------------------------------------
*
*        BOB BECKER FEB ,1981
*
*        SPF LIBRARY MANAGER EDIT DIALOG MANAGER
*
*----------------------------------------------------------------------
         EJECT
CMNEXP0  $PROLOG R12,R11,GM=N
         EJECT
*----------------------------------------------------------------------
*        DEFINE VARIABLES
*----------------------------------------------------------------------
ENTRY010 DS    0H
         SPFVDEF 8,(CMNEXPPR,CMNEXPLB,CMNEXPTY,CMNEXPMB,ZUSER,ZPREFIX)
         SPFVDEF 44,(CMNEXPOT,ZTEMPF,DYNDSN)
EXIT010  EQU   *
         EJECT
*----------------------------------------------------------------------
*        GET PROFILE/SHARED VARIABLES
*----------------------------------------------------------------------
ENTRY020 DS    0H
         SPFVGET (CMNEXPPR,CMNEXPLB,CMNEXPTY,CMNEXPOT),PROFILE
         SPFVGET (ZPREFIX,ZUSER,ZTEMPF),SHARED
EXIT020  EQU   *
         EJECT
*----------------------------------------------------------------------
*        BUILD DATA SET NAME - USERID.SPFTEMPX.@F80
*----------------------------------------------------------------------
ENTRY030 DS    0H
         SPFTEMP ,TEMPSRC,@F80
EXIT030  EQU   *
         EJECT
*----------------------------------------------------------------------
*        DISPLAY FIRST PANEL
*----------------------------------------------------------------------
ENTRY040 DS    0H
         SPFDSPLY CMNEXP0,,CMNEXPMB,ENTRY050,ENTRY810
         EJECT
*----------------------------------------------------------------------
*        VERIFY/BUILD DATA SET NAME
*----------------------------------------------------------------------
ENTRY050 DS    0H
         CLI   CMNEXPOT,C'^'      IGNORE OTHER DSN ?
         BE    AAA050             YES - OK
         CLI   CMNEXPOT,C' '      ANY SPECIFIED ?
         BNE   EXIT050            YES - SKIP PRJ LIB TYPE
AAA050   EQU   *
         SPFPLT CMNEXPPR,CMNEXPLB,CMNEXPTY,LIBDSN
         MVC   MEMBER,CMNEXPMB    MOVE MEMBER NAME
         MVC   CMNEXPMB,BLANKS    CLEAR
EXIT050  EQU   *
         EJECT
*----------------------------------------------------------------------
*        CHECK FOR OTHER DSN
*----------------------------------------------------------------------
ENTRY060 DS    0H
         NI    FLAG,X'FF'-(SEQ+BDAM)  RESET
         CLI   CMNEXPOT,C' '      ANY SPECIFIED ?
         BE    EXIT060            NO - OK
         CLI   CMNEXPOT,C'^'      IGNORE IT ?
         BE    EXIT060            YES - OK
         SPFDSN CMNEXPOT,LIBDSN,MEMBER
         LTR   R15,R15            DSN VALID ?
         BZ    AAA060             YES - OK
         SPFDSPLY ,CMN002,CMNEXPOT,ENTRY050,ENTRY810
AAA060   EQU   *
         CLI   MEMBER,C' '        MBR SPECIFIED ?
         BNE   BBB060             YES - OK
         SPFDSPLY ,CMN016,CMNEXPOT,ENTRY050,ENTRY810
BBB060   EQU   *
         OI    FLAG,OTHDS         SET FLAG
EXIT060  EQU   *
         B     ENTRY070
FLAG     DC    X'00'
OTHDS    EQU   X'01'
LIBDS    EQU   X'02'
BDAM     EQU   X'04'
SEQ      EQU   X'08'
PDS      EQU   X'10'
         EJECT
*----------------------------------------------------------------------
*        DETERMINE DSORG OF INPUT DATA SET
*----------------------------------------------------------------------
ENTRY070 DS    0H
         SPFDSCB LIBDSN,AREA
         LTR   R15,R15            CATALOGED ?
         BZ    BBB070             YES - OK
         MVC   DYNDSN,LIBDSN      MOVE DATA SET NAME FOR MESSAGE
         C     R15,=F'4'          NOT CATALOGED ?
         BNE   AAA070             MUST BE CATALOGED BU NOT FOUND
         SPFDSPLY ,DYN006,,ENTRY050,ENTRY810
AAA070   EQU   *
         SPFDSPLY ,DYN005,,ENTRY050,ENTRY810
BBB070   EQU   *
         TM    DS1DSORG,DCBDSGPO  PDS ?
         BO    CCC070             YES - OK
         TM    DS1DSORG,DCBDSGPS  SEQ ?
         BO    DDD070
         TM    DS1DSORG,DCBDSGDA  BDAM ?
         BO    EEE070
CCC070   EQU   *
         MVC   DYNDSN,LIBDSN      MOVE DATA SET NAME FOR MESSAGE
         SPFDSPLY ,CMN012,,ENTRY050,ENTRY810
DDD070   EQU   *
         OI    FLAG,SEQ
         CLC   DS1LRECL,=H'80'    LRECL=80 ?
         BE    CCC070             YES - INVALID DATA SET
         B     EXIT070
EEE070   EQU   *
         OI    FLAG,BDAM
EXIT070  EQU   *
         EJECT
*----------------------------------------------------------------------
*        INVOKE LIBRARY MANAGER TO RETREIVE SOURCE DATA
*----------------------------------------------------------------------
ENTRY080 DS    0H
         SPFPLS LIBDSN,MEMBER,TEMPSRC,READ,SEQ
         LTR   R15,R15            ANY ERRORS ?
         BZ    EXIT080            NO - CONTINUE
         C     R15,=F'8'          MEMBER NOT FOUND ?
         BE    CCC080             YES - DISPLAY MESSAGE
         SPFDSPLY ,CMN000,,ENTRY050,ENTRY810
CCC080   EQU   *
         SPFDSPLY ,CMN004,,ENTRY050,ENTRY810
EXIT080  EQU   *
         B     ENTRY090
PLSEPA   DC    F'0'
BDAMEPA  DC    F'0'
MEMBER   DC    CL8' '
MGRPARMS DS    0F
         DC    A(0)
         EJECT
*----------------------------------------------------------------------
*        INVOKE EDIT
*----------------------------------------------------------------------
ENTRY090 DS    0H
         SPFEDIT TEMPSRC
         LTR   R15,R15
         BZ    EXIT090            DATA SAVED
         C     R15,=F'4'          CANCEL ?
         BE    CCC090             YES
         SPFDSPLY ,CMN000,,ENTRY050,ENTRY810
CCC090   EQU   *
         SPFDSPLY CMNEXP0,CMN013,CMNEXPMB,ENTRY050,ENTRY810
EXIT090  EQU   *
         EJECT
*----------------------------------------------------------------------
*        INVOKE LIBRARY MANAGER TO WRITE THE DATA
*----------------------------------------------------------------------
ENTRY100 DS    0H
         SPFPLS LIBDSN,MEMBER,TEMPSRC,WRITE,SEQ
         LTR   R15,R15            ANY ERRORS ?
         BZ    EXIT100            NO - CONTINUE
         MVC   MSG,=CL8'CMN014'   I GIVE UP
         SPFDSPLY CMNEXP0,CMN014,CMNEXPPR,ENTRY050,ENTRY810
EXIT100  EQU   *
         EJECT
*----------------------------------------------------------------------
*        INDICATE PROCESSING COMPLETE
*----------------------------------------------------------------------
ENTRY800 DS    0H
         MVC   CMNEXPMB,BLANKS   CLEAR
         SPFDSPLY CMNEXP0,CMN015,CMNEXPMB,ENTRY050,ENTRY810
         EJECT
*----------------------------------------------------------------------
*        PUT PROFILE VARIABLES AND EXIT
*----------------------------------------------------------------------
ENTRY810 DS    0H
         SPFVPUT (CMNEXPPR,CMNEXPLB,CMNEXPTY,CMNEXPOT),PROFILE
EXIT810  EQU   *
         EJECT
*----------------------------------------------------------------------
*        END OF JOB
*----------------------------------------------------------------------
EOJ      DS    0H
         ICM   R15,15,PLSEPA      SEQ LIBRARY MANAGER ROUTINE
         BZ    EOJ2
         DELETE  EP=CMNCCS0
EOJ2     EQU   *
         ICM   R15,15,BDAMEPA     BDAM LIBRARY MANAGER ROUTINE
         BZ    EOJ3
         DELETE  EP=CMNCCB0
EOJ3     EQU   *
         LA    R15,0
         $EPILOG
         EJECT
*----------------------------------------------------------------------
*        STORAGE AREAS
*----------------------------------------------------------------------
TEMPSRC  DC    CL44' '
LIBDSN   DC    CL44' '
BLANKS   DC    CL101' '
         EJECT
SPFMACS  SPFCMDS
         EJECT
         DCBD DSORG=PS
         END
./ ADD  NAME=CMNFA00
*----------------------------------------------------------------------
*
*        BOB BECKER MAR ,1981
*
*        SPF FOREGROUND COMPRESS DIALOG MANAGER
*
*
* MVS SYSTEM PROGRAMMERS - ANY DATA SET IS ALLOCATED DISP=SHR
*            - IF USER-ID = FIRST QUALIFIER, THEN RLSE
*
* ALL OTHERS - IF USER-ID = FIRST QUALIFIER, THEN DISP=SHR AND RLSE
*              IF USER-ID ^= FIRST QUALIFIER, THEN DISP=OLD AND NO RLSE
*
*----------------------------------------------------------------------
         EJECT
CMNFA00 $PROLOG R12,GM=N
         EJECT
*----------------------------------------------------------------------
*        DEFINE VARIABLES
*----------------------------------------------------------------------
ENTRY010 DS    0H
         SPFVDEF 8,(CMNFAPRJ,CMNFALIB,CMNFATYP,ZPREFIX,ZUSER,ZLOGON)
         SPFVDEF 46,(CMNFAOTH)
         SPFVDEF 8,(DYNDDNM),DC=NO
         SPFVDEF 44,(DYNDSN),DC=NO
         SPFVDEF 4,(DYNR15,DYNERR,DYNINFO,SPFRC),DC=NO
         SPFVDEF 1,(DYNTYPE),DC=NO
EXIT010  EQU   *
         EJECT
*----------------------------------------------------------------------
*        GET PROFILE/SHARED VARIABLES
*----------------------------------------------------------------------
ENTRY020 DS    0H
         SPFVGET (CMNFAPRJ,CMNFALIB,CMNFATYP),PROFILE
         SPFVGET (ZPREFIX,ZUSER,ZLOGON),SHARED
EXIT020  EQU   *
         EJECT
*----------------------------------------------------------------------
*        DISPLAY FIRST PANEL
*----------------------------------------------------------------------
ENTRY030 DS    0H
         SPFDSPLY CMNFA00,,CMNFATYP,ENTRY040,ENTRY810
         EJECT
*----------------------------------------------------------------------
*  VERIFY/BUILD DATA SET NAMES FOR COMPRESS
*----------------------------------------------------------------------
ENTRY040 DS    0H
         MVC   CURSOR,=CL8'CMNFATYP' POSITION CURSOR AT TYPE FIELD
         MVC   CMPRDSN,BLANKS     CLEAR FIELD
         CLI   CMNFAOTH,C' '      OTHER DSN SPECIFIED ?
         BNE   CCC040             YES - USE IT
         SPFPLT CMNFAPRJ,CMNFALIB,CMNFATYP,CMPRDSN
         B     EXIT040            DONE
CCC040   EQU   *
         SPFDSN CMNFAOTH,CMPRDSN
         LTR   R15,R15            VALID DSN ?
         BZ    EXIT040            YES - OK
         SPFDSPLY ,CMN002,CMNFAOTH,ENTRY040,ENTRY810
EXIT040  EQU   *
         EJECT
*----------------------------------------------------------------------
*        DETERMINE USER - CHECK RESTRICTIONS
*----------------------------------------------------------------------
ENTRY050 DS    0H
         LA    R5,DYNOLD          DISP=OLD
         LA    R6,0               NO RELEASE
         LA    R2,ZUSER           START OF FIELD
         LA    R3,8               MAX LENGTH
LOOP050A EQU   *
         CLI   0(R2),C' '         FIND END
         BE    AAA050             FOUND IT
         LA    R2,1(R2)           BUMP
         BCT   R3,LOOP050A        TRY AGAIN
AAA050   EQU   *
         LA    R2,7               MAX LENGTH-1
         SR    R2,R3              LENGTH OF ID-1
         EX    R2,CLC1            COMPARE DSN TO ID
         BNE   CCC050             NO - SKIP RELEASE OPTION
BBB050   EQU   *
         LA    R6,255              RELEASE
CCC050   EQU   *
         CLC   ZLOGON(4),=C'@MVS'  MVS USER ?
         BE    DDD050              YES
         CLC   ZLOGON(4),=C'@IMS'  IMS USER ?
         BE    DDD050              YES
         CLC   ZLOGON(4),=C'@TPS'  TPS USER ?
         BE    DDD050              YES OK
         B     EXIT050
DDD050   EQU   *
         LA    R5,DYNSHR           SET DISP=SHR
EXIT050  EQU   *
         B     ENTRY060
CLC1     CLC   CMPRDSN(0),ZUSER   COMPARE DSN TO USER
         EJECT
*----------------------------------------------------------------------
*        ALLOCATE THE DATA SET TO BE COMPRESSED
*----------------------------------------------------------------------
ENTRY060 DS    0H
         CLI   SPFCOMP+8,X'FF'    IS IT ALREADY ALLOCATED ?
         BNE   BBB060             NO - ALLOCATE IT
         CLC   CMPRDSN,SAVEDSN    SAME DSN ?
         BE    EXIT060            YES - ALREADY ALLOCATED
AAA060   EQU   *
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         MVI   DYNTYPE,C'D'       INDICATE DE-ALLOCATE
         MVC   DYNDDNM,SPFCOMP    MOVE DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT
BBB060   EQU   *
         MVC   SAVEDSN,CMPRDSN    SAVE FOR NEXT TIME
         XC    DYNPARMS(DYNLL),DYNPARMS CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         MVI   DYNTYPE,C'A'
         MVC   DYNDDNM,SPFCOMP    DDNAME FOR COMPRESS
         MVC   DYNDSN,CMPRDSN     SOURCE LIBARY NAME
         STC   R5,DYNDISP1        DISP=SHR
         STC   R6,DYNRLSE         RLSE - 0=NO  FF=YES
EEE060   EQU   *
         BAL   R14,ENTRY900
         MVI   SPFCOMP+8,X'FF'    INDICATE ALLOCATED
EXIT060  EQU   *
         EJECT
*----------------------------------------------------------------------
*        ALLOCATE THE CONTROL CARD DATA SET
*----------------------------------------------------------------------
ENTRY070 DS    0H
         CLI   SYSIN+8,X'FF'      IS IT ALREADY ALLOCATED ?
         BE    EXIT070            YES - ALREADY ALLOCATED
         XC    DYNPARMS(DYNLL),DYNPARMS CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         MVI   DYNTYPE,C'A'
         MVC   DYNDDNM,SYSIN      DDNAME FOR SYSIN
         MVC   DYNDSN,=CL44'ISP.MSTR.ISPSLIB' INPUT CARDS DSN
         MVC   DYNMBR,=CL8'CMNFA10'  MEMBER NAME
         MVI   DYNDISP1,DYNSHR    DISP=SHR
         BAL   R14,ENTRY900
         MVI   SYSIN+8,X'FF'      INDICATE ALLOCATED
EXIT070  EQU   *
         EJECT
*----------------------------------------------------------------------
*        ALLOCATE SYSPRINT
*----------------------------------------------------------------------
ENTRY080 DS    0H
         XC    DYNPARMS(DYNLL),DYNPARMS CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         CLI   SYSPRINT+8,X'FF'   IS IT ALREADY ALLOCATED ?
         BE    EXIT080            YES - OK
         MVI   DYNTYPE,C'A'       INDICATE ALLOCATE
         MVC   DYNDDNM,SYSPRINT   DDNAME FOR SYSPRINT
         MVI   DYNTERM,X'FF'      TERMINAL
         BAL   R14,ENTRY900       ALLOCATE IT
         MVI   SYSPRINT+8,X'FF'   INDICATE ALLOCATED
EXIT080  EQU   *
         EJECT
*----------------------------------------------------------------------
*        INVOKE IEBCOPY VIA SPFCOPY WHICH WILL GAIN AUTHORIZATION
*----------------------------------------------------------------------
ENTRY090 DS    0H
         MVC   ATTECB,=F'0'
         ATTACH EP=SPFCOPY,ECB=ATTECB,PARAM=(OPTIONS,DDNMS),VL=1
         ST    R1,TCBLOC
         WAIT  ECB=ATTECB
         DETACH TCBLOC
         L     R15,ATTECB
         LA    R15,0(R15)
         ST    R15,CMPRC
EXIT090  EQU   *
         B     ENTRY800
*----------
TCBLOC   DC    F'0'               ATTACHED TASK TCB LOCATION
ATTECB   DC    F'0'               ATTACHED TASK ECB
         CNOP  2,4
OPTIONS  DC    H'0'               LENGTH
*----------
DDNMS    DC    AL2(DD2-DD1)
DD1      DC    4XL8'00'
         DC    CL8'ZCMPIN'
         DC    CL8'ZCMPRINT'
DD2      EQU   *
         EJECT
*----------------------------------------------------------------------
*        INDICATE PROCESSING COMPLETE
*----------------------------------------------------------------------
ENTRY800 DS    0H
         L     R1,CMPRC      PICK UP RETURN CODE
         CVD   R1,DBWRD      CONVERT
         MVC   WORK16,EDIT16
         ED    WORK16,DBWRD
         MVC   SPFRC,WORK16+12
         MVC   CMNFAOTH,BLANKS    CLEAR
         SPFDSPLY CMNFA00,CMN001,CMNFATYP,ENTRY040,ENTRY810
DBWRD    DC    D'0'
WORK16   DC    CL16' '
EDIT16   DC    X'40102010201020102010201020102120'
         EJECT
*----------------------------------------------------------------------
*        PUT PROFILE VARIABLES AND EXIT
*----------------------------------------------------------------------
ENTRY810 DS    0H
         SPFVPUT (CMNFAPRJ,CMNFALIB,CMNFATYP),PROFILE
         BAL   R14,ENTRY920       FREE ALL ALLOCATED DATA SETS
EXIT810  EQU   *
         B     EOJ
         EJECT
*----------------------------------------------------------------------
*        END OF JOB
*----------------------------------------------------------------------
EOJ      DS    0H
         ICM   R15,15,DYNEPA      DYN ALLOC SUB-ROUTINE
         BZ    EOJ1
         DELETE  EP=ALLOCRTN
EOJ1     EQU   *
         LA    R15,0
         $EPILOG
         EJECT
*----------------------------------------------------------------------
*        DYNAMIC ALLOCATION
*----------------------------------------------------------------------
ENTRY900 DS    0H
         ST    R14,ST900
         SPFDYNAM DYNPARMS,ERROR1
EXIT900  EQU   *
         L     R14,ST900
         BR    R14
ST900    DC    F'-1'
         EJECT
*----------------------------------------------------------------------
*        FREE ALL ALLOCATED DDNAMES
*----------------------------------------------------------------------
ENTRY920 DS    0H
         ST    R14,ST920
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL
         MVI   DYNTYPE,C'D'       INDICATE DE-ALLOCATE
         LA    R2,DDNAMES         ADDR OF ALL DDNAMES
LOOP920A EQU   *
         CLI   8(R2),X'FF'        IS IT ALLOCATED ?
         BNE   AAA920             NO - SKIP IT
         MVC   DYNDDNM,0(R2)      YES - MOVE DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT
         MVI   8(R2),X'00'        RESET FLAG
AAA920   EQU   *
         LA    R2,9(R2)           BUMP
         CLI   0(R2),X'FF'        END OF NAMES ?
         BNE   LOOP920A           NO - CONTINUE
EXIT920  EQU   *
         L     R14,ST920
         BR    R14
ST920    DC    F'-1'
         EJECT
*----------------------------------------------------------------------
*        DYNAMIC ALLOCATION ERROR
*----------------------------------------------------------------------
ERROR1   DS    0H
         LTR   R15,R15
         BZ    ENTRY040
         B     ENTRY810
         EJECT
*----------------------------------------------------------------------
*        STORAGE AREAS
*----------------------------------------------------------------------
CMPRC    DC    F'0'                COMPRESS RETURN CODE
CMPRDSN  DC    CL44' '             NAME OF DATA SET TO BE COMPRESSED
SAVEDSN  DC    CL44' '             NAME OF DATA SET TO BE COMPRESSED
BLANKS   DC    CL101' '
*----------------------------------------------------------------------
DDNAMES  EQU   *
SYSIN    DC    CL8'ZCMPIN',X'00'
SYSPRINT DC    CL8'ZCMPRINT',X'00'
SPFCOMP  DC    CL8'SPFCOMP',X'00'
         DC    X'FFFF'            END INDICATOR
*----------------------------------------------------------------------
         EJECT
SPFMACS  SPFCMDS
         EJECT
DYNPARMS $ALLOC
         END
./ ADD  NAME=CMNFS00
         PRINT NOGEN
MVSGPSVC EQU  255             USER DEFINED MVSGPSVC NUMBER.
**********************************************************************
*
*        THIS IS THE TSO/SPF COMMAND PROCESSOR WHICH SUPPORTS BROWSE
*        OF DATA WRITTEN TO THE DISKWTR SYSOUT DATASET.  IT'S
*        FUNCTION IS TO LOCATE THE SYSOUT FOR A NAMED JOB, PLACE IT
*        INTO A DATASET AND INVOKE THE SPF USER BROWSE INTERFACE.
*
*        THIS ROUTINE IS DEPENDENT UPON THE USE OF THE 'SOUTSEP'
*        JES-2 SEPARATOR (SUPPLIED) WHICH CREATES A 'JOURNAL' DATASET
*        FOR USE IN LOCATING THE NAMED JOB.
*
*        THE USER MUST PROVIDE A MENU IN THE
*        SPF MASTER DATASETS FOR OPTION 'E' PROCESSING.
**       THESE MUST ULTIMATELY PASS TO THIS ROUTINE THE FOLLOWING
**       PARM (TSO COMMAND PROCESSOR SYNTAX):
**
**       JJJJJJJJ ##### DATE TIME OPTION DEST CLASS DSN-QUALIFIER
**
**          WHERE: JJJJJJJJ  IS THE JOB-NAME TO BE LOCATED VIA THE
**                           SOUTSEP JOURNAL.   IF SPECIFIED AS '#'
**                           THEN ONLY JOB-NUMBER WILL BE USED FOR
**                           THE SEARCH AGAINST THE 'ACTIVE' DATASET.
**
**                 #####     IS THE JOB-NUMBER TO BE LOCATED VIA THE
**                           SOUTSEP JOURNAL.   IF SPECIFIED AS '#'
**                           THEN ONLY JOB-NAME WILL BE USED FOR THE
**                           SEARCH AGAINST THE 'ACTIVE' DATASET.
**
*                            NOTE: EITHER JOB-NAME 'OR' JOB-NUMBER MAY
*                                  BE USED TO LOCATE A GIVEN JOB IN THE
*                                  ACTIVE DATASET AND 'BOTH' MAY BE
*                                  SPECIFIED TO FURTHER QUALIFY THE
*                                  SEARCH.  IF THE ARCHIVE DATASET(S)
*                                  ARE TO BE SEARCHED, 'BOTH' MUST BE
*                                  SPECIFIED.
*
*                  DATE      IS THE DATE THE OUTPUT WAS WRITTEN TO THE
*                            'ACTIVE' DATASET BY THE EXTERNAL WRITER
*                            (RUN DATE) IN THE FORM 'MM/DD/YY' OR
*                            MM/DD.  IT MAY BE USED TO FURTHUR QUALIFY
*                            THE SEARCH REQUEST.  IF SPECIFIED AS
*                            A '#', DATE IS IGNORED.
*
*                  TIME      IS THE TIME THE OUTPUT WAS WRITTEN TO THE
*                            'ACTIVE' DATASET BY THE EXTERNAL WRITER
*                            (RUN TIME) IN THE FORM 'HH:MM:SS' OR
*                            HH:MM.  IT MAY BE USED TO FURTHUR QUALIFY
*                            THE SEARCH REQUEST.  IF SPECIFIED AS
*                            A '#', TIME IS IGNORED.
*
*                  OPTION    IS THE PROCESSING OPTION
*                            ('L' = LIST JOURNAL BY JOBNAME)
*                            ('B' = BROWSE SYSOUT ONLY     )
*                            ('P' = BROWSE AND PRINT SYSOUT)
*
*                  DEST      IS THE OVERRIDING DESTINATION
*                            IF OPTION 'P' WAS SPECIFIED.
*                            (OR '#' FOR DEFAULT DEST)
*
*                  CLASS     IS THE OVERRIDING SYSOUT CLASS
*                            IF OPTION 'P' WAS SPECIFIED.
*                            (OR '#' FOR DEFAULT CLASS A)
*
*                  DSN-QUALIFIER    SPECIFIES THE DATASET NAME
*                            QUALIFIER TO BE USED AS A PREFIX FOR THE
*                            JOURNAL DATASETS LISTED BELOW.
*                            THE USE OF THIS PARAMETER ALLOWS THE USE
*                            OF MULTIPLE DATASETS (FOR MULTIPLE
*                            SYSOUT CLASSES AND TESTING).
*
*     THE FOLLOWING DESCRIBES THE REQUIRED DATASETS FOR THIS ROUTINE:
*
*        1) DSNAME.QUALIFIER.ACTIVE
*                THIS IS THE JOURNAL DATASET FOR THE 'ACTIVE' DISKWTR
*                SYSOUT FILE.  IT SHOULD CONTAIN JOURNAL RECORDS FOR
*                MOST RECENTLY WRITTEN SYSOUT.
*
*        2) DSNAME.QUALIFIER.DAILY.GNNNNV00
*                THIS IS THE BASE NAME FOR THE 'DAILY' GDG SET OF
*                JOURNALS (CREATED BY SAVEWTR).  EACH TIME THE SAVEWTR
*                PROC IS STARTED, A NEW GDG IS CREATED TO DESCRIBE
*                THE SYSOUT THAT IS COPIED.
*
*        3) DSNAME.QUALIFIER.ARCHIVE.GNNNNV00
*                THIS IS THE BASE NAME FOR THE 'ARCHIVE' GDG SET OF
*                JOURNALS (USER MAINTAINED VIA SOUTWTR).  IF THE USER
*                DESIRES, ONCE OR TWICE A WEEK (OR MONTH ETC.) THE
*                DAILY GENERATIONS MAY BE COPIED TO AN ARCHIVAL GDG
*                SET OF DATASETS FOR LONGER ARCHIVAL.
*
*        NOTE: THE DESCRIBED DATASETS MUST HAVE THE SUFFIXES DESCRIBED
*              ABOVE ('ACTIVE', 'DAILY.GDG' AND 'ARCHIVE.GDG') IN
*              ORDER TO ALLOW DYNAMIC ALLOCATION OF SAME.
*
*        NOTE: THE MVSGPSVC IS USED TO DYNAMICALLY GAIN AUTHORIZATION
*              FOR TAPE MOUNT REQUESTS.  THIS IS ONLY REQUIRED IF THE
*              USE DOES NOT HAVE MOUNT AUTHORITY IN THE UADS.  IF MOUNT
*              AUTHORITY IS ACTIVE IN THE UADS (OR YOU WISH TO LIMIT
*              RETRIEVAL TO THE DISK RESIDENT DATASETS, SET THE
*              MVSGPSVC NUMBER TO '000' TO BYPASS.
*
*        ATTRIBUTES: REENTRANT
*
*      RETURN CODES:
*             0 - NORMAL RETURN
*                 ALL ERROR CONDITIONS ARE DISPLAYED VIA MESSAGES
*
*        REGISTER USAGE:
*
*            R0 = WORK REG
*            R1 = WORK REG
*            R2 = WORK REG
*            R3 = WORK REG
*            R4 = WORK REG
*            R5 = WORK REG
*            R6 = WORK REG
*            R7 = WORK REG
*            R8 = WORK REG
*            R9 = WORK REG
*           R10 = RETURN CODE REGISTER
*           R11 = GOTTEN STORAGE
*           R12 = BASE REG
*           R13 = SAVE AREA
*           R14 = WORK REG
*           R15 = WORK REG
*
**********************************************************************
         PRINT ON
         EJECT
**********************************************************************
*
*        SET UP WORK AREAS (MAINTAIN RE-ENTRANT ATTRIBUTE)
*
**********************************************************************
CMNFS00  $PROLOG
         SR    R10,R10            PRIME RETURN CODE REGISTER
         GETMAIN R,LV=GOTEND-GOTTEN GET STORAGE FOR WORKAREA
         LR    R11,R1             COPY TO USING REGISTER
         LR    R0,R1              ADDRESS OF 'TO' FIELD
         LA    R14,GOTTEN         ADDRESS OF 'FROM' FIELD
         LA    R1,GOTEND-GOTTEN   SIZE ONE FOR MVCL
         LR    R15,R1             SIZE TWO FOR MVCL
         MVCL  R0,R14             MOVE DATA TO GOTTEN STORAGE
         USING GOTTEN,R11         INFORM THE ASSEMBLER OF USING
         L     R15,16             GET ADDRESS OF CVT
         L     R15,0(R15)         GET ADDRESS OF OLD/NEW TCB POINTER
         L     R15,4(R15)         GET ADDRESS OF TCB
         L     R15,180(R15)       GET ADDRESS OF JSCB
         L     R15,264(R15)       GET ADDRESS OF PSCB
         USING PSCB,R15           PROVIDE ADDRESSABILITY
         CLI   PSCBGPNM,C' '      CHECK FOR ANY UNIT NAME
         BE    NOUNIT             NONE, DEFAULT TO SYSALLDA
         MVC   UNITN(8),PSCBGPNM  MOVE USER'S DEFAULT UNITNAME
         DROP  R15                DROP USING REG
         L     R15,52(R15)        GET ADDRESS OF UPT
         LA    R15,8              SET LOOP CONTROL
         SR    R1,R1              CLEAR COUNT REG
         LA    R14,UNITN          SET SCAN POINTER
UNITLOOP CLI   0(R14),C' '        CHECK FOR END OF UNIT NAME
         BE    UNITEND            END OF STRING, CONTINUE
         LA    R1,1(R1)           BUMP COUNT
         LA    R14,1(R14)         BUMP CHARACTER POINTER
         BCT   R15,UNITLOOP       CHECK NEXT CHARACTER
UNITEND  STC   R1,UNITNSZ+1       UPDATE SIZE OF UNIT NAME
NOUNIT   CALL  ISPLINK,(VGET,ZVARS),VL MAKE ZTEMPF AVAILABLE
         LTR   R15,R15            ZERO RETURN CODE?
         BNE   EXIT1              NO, EXIT
         LA    R15,ZTEMPF         POINT TO VARIABLE NAME
         ST    R15,VCOPYVAR       SAVE POINTER IN PARM LIST
         LA    R15,44             SET SIZE FOR VCOPY
         ST    R15,LENGTHZT       STORE IN PASSED VARIABLE
         LA    R15,LENGTHZT       POINT TO LENGTH VALUE
         ST    R15,VCOPYLEN       SAVE POINTER TO SIZE IN PARM LIST
         LA    R15,AUTDSN         ADDRESS OF RELOCATED DATA
         ST    R15,VCOPYLOC       UPDATE LOCATION OF RECEIVING FIELD
         LA    R1,VCOPYLIT        SET R1 FOR CALL
         CALL  ISPLINK            INTERFACE TO VCOPY
         LTR   R15,R15            CHECK RETURN CODE
         BNZ   EXIT2              GET OUT IF NOT ZERO
         LA    R15,AUTDSN         SET FOR COMPARE
         LA    R1,35              MAX VALUE FOR LOOP
CHECKZT  CLC   0(8,R15),=C'.SPFTEMP' IS THIS IT?
         BE    SPFTEMP            YES, GO TO UPDATE LENGTH
         LA    R15,1(R15)         BUMP TO NEXT CHAR
         BCT   R1,CHECKZT         NO, TRY AGAIN.
         B     EXIT3              ERROR, GET OUT.
SPFTEMP  LA    R15,10(R15)        POINT TO NEXT AVAILABLE CHAR
         MVC   0(8,R15),=C'CMNFS00' MOVE IN SUFFIX
         LA    R15,7(R15)         UP BY 7
         LA    R1,AUTDSN          LOAD ADDRESS OF DSN
         SR    R15,R1             SUBTRACT TO GET LENGTH
         STH   R15,AUTDSNL        STORE LENGTH OF DSN
         STH   R15,FUTDSNL        STORE LENGTH OF DSN
ERRDEF   XR    R1,R1              CLEAR R1 FOR ERROR DEFINITIONS
         LH    R1,AUTDSNL         LOAD DSN LENGTH
         ST    R1,VDEFLEN1        STORE LENGTH FOR DEFINE
         LA    R1,VDEFLEN1        POINT TO LENGTH FOR VDEFINE
         ICM   R1,8,X'80'         INDICATE END OF LIST
         ST    R1,CALLDEF5        STORE LENGTH FOR DEFINE
         LA    R1,CHAR            POINT TO 'CHAR'
         ST    R1,CALLDEF4        STORE IN PARM4 FOR VDEFINE
         LA    R1,AUTDSN          POINT TO DATASET NAME
         ST    R1,CALLDEF3        STORE IN PARM3 FOR VDEFINE
         LA    R1,CMNFS50         POINT TO 'CMNFS50'
         ST    R1,CALLDEF2        STORE IN PARM2 FOR VDEFINE
         LA    R1,VDEFINE         POINT TO 'VDEFINE'
         ST    R1,CALLDEF1        STORE IN PARM1 FOR VDEFINE
         LA    R1,CALLDEF1        POINT TO PARM LIST FOR VDEFINE
         CALL  ISPLINK            VDEFINE DSN (CMNFS50)
         LTR   R15,R15            OK?
         BNZ   EXIT15             NO, GET OUT.
         LA    R1,8               LOAD ERROR CODE LENGTH
         ST    R1,VDEFLEN2        STORE LENGTH FOR DEFINE
         LA    R1,VDEFLEN2        POINT TO LENGTH FOR VDEFINE
         ICM   R1,8,X'80'         INDICATE END OF LIST
         ST    R1,CALLDEF5        STORE LENGTH FOR DEFINE
         LA    R1,HEX             POINT TO 'HEX'
         ST    R1,CALLDEF4        STORE IN PARM4 FOR VDEFINE
         LA    R1,WAUTE1          POINT TO SAVED DYN ALLOC CODES
         ST    R1,CALLDEF3        STORE IN PARM3 FOR VDEFINE
         LA    R1,CMNFS51         POINT TO 'CMNFS51'
         ST    R1,CALLDEF2        STORE IN PARM2 FOR VDEFINE
         LA    R1,VDEFINE         POINT TO 'VDEFINE'
         ST    R1,CALLDEF1        STORE IN PARM1 FOR VDEFINE
         LA    R1,CALLDEF1        POINT TO PARM LIST FOR VDEFINE
         CALL  ISPLINK            VDEFINE AUT ERROR CODE (CMNFS51)
         EJECT
***********************************************************************
*
*        GET VARIABLES FROM PROFILE AND DISPLAY PANEL.
*
***********************************************************************
         CALL  ISPLINK,(VGET,PROFVARS,PROFILE),VL
         LA    R1,BLANK           LOAD ADDRESS OF NO CURSOR
         ICM   R1,8,X'80'         INDICATE END OF LIST
         ST    R1,CALLDIS4        STORE IN 4TH CALL PARAMETER
         LA    R1,BLANK           LOAD ADDRESS OF NO MESSAGE
         ST    R1,CALLDIS3        STORE IN 3TH CALL PARAMETER
         LA    R1,CMNFS00L        LOAD ADDRESS OF 'CMNFS00'
         ST    R1,CALLDIS2        STORE IN 2ND CALL PARAMETER
         LA    R1,DISPLAY         LOAD ADDRESS OF 'DISPLAY'
         ST    R1,CALLDIS1        STORE IN FIRST CALL PARAMETER
DISPLAYP LA    R1,CALLDIS1        LOAD ADDRESS OF DISPLAY PARMS
         CALL  ISPLINK            DISPLAY PANEL CMNFS00
         LA    R1,BLANK           LOAD ADDRESS OF NO CURSOR (DEFAULT)
         ICM   R1,8,X'80'         INDICATE END OF LIST
         ST    R1,CALLDIS4        STORE IN 4TH CALL PARAMETER
         LA    R1,BLANK           LOAD ADDRESS OF NO MESSAGE (DEFAULT)
         ST    R1,CALLDIS3        STORE IN 3TH CALL PARAMETER
         LA    R1,CMNFS00L        LOAD ADDRESS OF CMNFS00 (DEFAULT)
         ST    R1,CALLDIS2        STORE IN 2ND CALL PARAMETER
         LTR   R10,R15            ZERO RETURN CODE?
         BZ    STARTP1            YES, CONTINUE
         SR    R10,R10            CLEAR COMPLETION CODE
         B     ENDING             EXIT
         EJECT
***********************************************************************
*
*        PROCESS FIRST PARAMETER FROM PARSE (JOB-NAME)
*
***********************************************************************
STARTP1  LA    R15,CMNCSV1        POINT TO VARIABLE NAME
         ST    R15,VCOPYVAR       SAVE POINTER IN PARM LIST
         LA    R15,8              SET SIZE FOR VCOPY
         ST    R15,LENGTH1        STORE IN PASSED VARIABLE
         LA    R15,LENGTH1        POINT TO LENGTH VALUE
         ST    R15,VCOPYLEN       SAVE POINTER TO SIZE IN PARM LIST
         LA    R15,JOBNAME        ADDRESS OF RELOCATED DATA
         ST    R15,SUBP1          UPDATE PARM POINTER
         ST    R15,VCOPYLOC       UPDATE LOCATION OF RECEIVING FIELD
         LA    R1,VCOPYLIT        SET R1 FOR CALL
         CALL  ISPLINK            INTERFACE TO VCOPY
         LTR   R15,R15            ZERO RETURN CODE?
         BNZ   EXIT5              IF NOT, GET OUT
         LA    R15,JOBNAME        POINT TO JOBNAME
         L     R1,LENGTH1         GET SIZE OF OPERAND
         LTR   R1,R1              WAS LENGTH ZERO?
         BZ    ENDP1              YES, SKIP TO CHECK JOB-NUMB
         CLI   0(R15),C'*'        IS THIS LONE ASTERISK?
         BE    EXIT19             YES, INFORM THAT IT'S ILLEGAL
ENDP1    EQU   *
         SPACE 3
***********************************************************************
*
*        PROCESS SECOND PARAMETER FROM PARSE (JOB-NUMBER)
*
***********************************************************************
         LA    R15,CMNCSV2        POINT TO VARIABLE NAME
         ST    R15,VCOPYVAR       SAVE POINTER IN PARM LIST
         LA    R15,8              SET SIZE FOR VCOPY
         ST    R15,LENGTH2        STORE IN PASSED VARIABLE
         LA    R15,LENGTH2        POINT TO LENGTH VALUE
         ST    R15,VCOPYLEN       SAVE POINTER TO SIZE IN PARM LIST
         LA    R15,JOBNUM         ADDRESS OF RELOCATED DATA
         ST    R15,SUBP2          UPDATE PARM POINTER
         ST    R15,VCOPYLOC       UPDATE LOCATION OF RECEIVING FIELD
         LA    R1,VCOPYLIT        SET R1 FOR CALL
         CALL  ISPLINK            INTERFACE TO VCOPY
         LTR   R15,R15            ZERO RETURN CODE?
         BNZ   EXIT6              IF NOT, GET OUT
ENDP2    EQU   *
         EJECT
***********************************************************************
*
*        PROCESS THIRD PARAMETER FROM PARSE (DATE)
*
***********************************************************************
         LA    R15,CMNCSV3        POINT TO VARIABLE NAME
         ST    R15,VCOPYVAR       SAVE POINTER IN PARM LIST
         LA    R15,8              SET SIZE FOR VCOPY
         ST    R15,LENGTH3        STORE IN PASSED VARIABLE
         LA    R15,LENGTH3        POINT TO LENGTH VALUE
         ST    R15,VCOPYLEN       SAVE POINTER TO SIZE IN PARM LIST
         LA    R15,DATE           ADDRESS OF RELOCATED DATA
         ST    R15,SUBP3          UPDATE PARM POINTER
         ST    R15,VCOPYLOC       UPDATE LOCATION OF RECEIVING FIELD
         LA    R1,VCOPYLIT        SET R1 FOR CALL
         CALL  ISPLINK            INTERFACE TO VCOPY
         LTR   R15,R15            ZERO RETURN CODE?
         BNZ   EXIT7              IF NOT, GET OUT
         LA    R15,DATE           POINT TO JOBNUM
         L     R1,LENGTH3         GET SIZE OF OPERAND
         LTR   R1,R1              WAS LENGTH ZERO?
         BNP   ENDP3              YES, GET OUT
         CH    R1,=H'5'           SHORT FORM?
         BE    ENDP3              YES, DATE OK
         CH    R1,=H'8'           LONG FORM?
         BE    ENDP3              YES, OK
         B     EXIT13A            INFORM USER
ENDP3    EQU   *
         SPACE 3
***********************************************************************
*
*        PROCESS FOURTH PARAMETER FROM PARSE (TIME)
*
***********************************************************************
         LA    R15,CMNCSV4        POINT TO VARIABLE NAME
         ST    R15,VCOPYVAR       SAVE POINTER IN PARM LIST
         LA    R15,8              SET SIZE FOR VCOPY
         ST    R15,LENGTH4        STORE IN PASSED VARIABLE
         LA    R15,LENGTH4        POINT TO LENGTH VALUE
         ST    R15,VCOPYLEN       SAVE POINTER TO SIZE IN PARM LIST
         LA    R15,TIME           ADDRESS OF RELOCATED DATA
         ST    R15,SUBP4          UPDATE PARM POINTER
         ST    R15,VCOPYLOC       UPDATE LOCATION OF RECEIVING FIELD
         LA    R1,VCOPYLIT        SET R1 FOR CALL
         CALL  ISPLINK            INTERFACE TO VCOPY
         LTR   R15,R15            ZERO RETURN CODE?
         BNZ   EXIT8              IF NOT, GET OUT
         LA    R15,TIME           POINT TO TIME
         L     R1,LENGTH4         GET SIZE OF OPERAND
         LTR   R1,R1              WAS LENGTH ZERO?
         BNP   ENDP4              YES, GET OUT
         CH    R1,=H'5'           SHORT FORM?
         BE    ENDP4              YES, DATE OK
         CH    R1,=H'8'           LONG FORM?
         BE    ENDP4              YES, OK
         B     EXIT13B            INFORM USER OF ERROR.
ENDP4    EQU   *
         SPACE 3
***********************************************************************
*
*        PROCESS FIFTH PARAMETER FROM PARSE (OPTION LIST/BROWSE/PRINT)
*
***********************************************************************
         LA    R15,CMNCSV5        POINT TO VARIABLE NAME
         ST    R15,VCOPYVAR       SAVE POINTER IN PARM LIST
         LA    R15,2              SET SIZE FOR VCOPY
         ST    R15,LENGTH5        STORE IN PASSED VARIABLE
         LA    R15,LENGTH5        POINT TO LENGTH VALUE
         ST    R15,VCOPYLEN       SAVE POINTER TO SIZE IN PARM LIST
         LA    R15,OPTION         ADDRESS OF RELOCATED DATA
         ST    R15,VCOPYLOC       UPDATE LOCATION OF RECEIVING FIELD
         LA    R1,VCOPYLIT        SET R1 FOR CALL
         CALL  ISPLINK            INTERFACE TO VCOPY
         LTR   R15,R15            ZERO RETURN CODE?
         BNZ   EXIT9              IF NOT, GET OUT
         LA    R15,OPTION         GET POINTER TO OPERAND
         L     R1,LENGTH5         GET SIZE OF OPERAND
         CH    R1,=H'2'           CHECK LENGTH
         BH    P5ERROR            INVALID OPTION, ERROR
         MVI   OPT,BRS            SET BROWSE OPTION
         MVI   FLAG,TSO           SET TSO OPTION
         CLI   0(R15),C'B'        DOES USER WANT BROWSE ONLY?
         BE    ENDP5              YES, CONTINUE
P5P      CLI   0(R15),C'P'        DOES USER WANT BROWSE/PRINT?
         BNE   P5L                YES, CONTINUE
         OI    OPT,PRT            SET PRINT OPTION
         B     ENDP5              DONE WITH P5
P5L      NI    OPT,255-BRS-PRT    RESET BROWSE/PRINT FLAG
         OI    OPT,LIST           SET LIST OPTION
         OI    FLAG,LST           SET LIST FLAG
         CLI   0(R15),C'L'        DOES USER WANT LIST ONLY?
         BNE   P5ERROR            NO, INVALID REQUEST
         CLI   1(R15),C'A'        DOES USER WANT ARCHIVE LIST?
         BNE   ENDP5              NO, LIST ONLY ACTIVE JOURNAL
         OI    FLAG,LSTA          SET ARCHIVE LIST OPTION
         B     ENDP5              DONE WITH P5
P5ERROR  B     EXIT13C            INFORM USER
ENDP5    EQU   *
         LA    R15,FLAG           ADDRESS OF RELOCATED DATA
         ST    R15,SUBP7          UPDATE PARM POINTER
***********************************************************************
*
*        PROCESS SIXTH PARAMETER FROM PARSE (PRINT DEST-ID)
*
***********************************************************************
         LA    R15,CMNCSV6        POINT TO VARIABLE NAME
         ST    R15,VCOPYVAR       SAVE POINTER IN PARM LIST
         LA    R15,8              SET SIZE FOR VCOPY
         ST    R15,LENGTH6        STORE IN PASSED VARIABLE
         LA    R15,LENGTH6        POINT TO LENGTH VALUE
         ST    R15,VCOPYLEN       SAVE POINTER TO SIZE IN PARM LIST
         LA    R15,DEST           ADDRESS OF RELOCATED DATA
         ST    R15,VCOPYLOC       UPDATE LOCATION OF RECEIVING FIELD
         LA    R1,VCOPYLIT        SET R1 FOR CALL
         CALL  ISPLINK            INTERFACE TO VCOPY
         LTR   R15,R15            ZERO RETURN CODE?
         BNZ   EXIT10             IF NOT, GET OUT
         LA    R15,DEST           GET POINTER TO OPERAND
         L     R1,LENGTH6         GET SIZE OF OPERAND
         LTR   R1,R1              WAS LENGTH ZERO?
         BZ    ENDP6              YES, GET OUT
         STCM  R1,3,PRTXLL        SET SIZE OF DATA
         BCTR  R1,R0              DECREMENT FOR EXECUTE
MOVEP6   LA    R14,PRTXLD         ADDRESS OF MOVE TO FIELD
         EX    R1,MOVE            MOVE DESTINATION TO PRTXLD
         MVI   @PRTX4,X'00'       CHAIN DEST UNIT FOR ALLOCATE
ENDP6    EQU   *
***********************************************************************
*
*        PROCESS SEVENTH PARAMETER FROM PARSE (PRINT SYSOUT CLASS)
*
***********************************************************************
         LA    R15,CMNCSV7        POINT TO VARIABLE NAME
         ST    R15,VCOPYVAR       SAVE POINTER IN PARM LIST
         LA    R15,1              SET SIZE FOR VCOPY
         ST    R15,LENGTH7        STORE IN PASSED VARIABLE
         LA    R15,LENGTH7        POINT TO LENGTH VALUE
         ST    R15,VCOPYLEN       SAVE POINTER TO SIZE IN PARM LIST
         LA    R15,PRTCLASS       ADDRESS OF RELOCATED DATA
         ST    R15,VCOPYLOC       UPDATE LOCATION OF RECEIVING FIELD
         LA    R1,VCOPYLIT        SET R1 FOR CALL
         CALL  ISPLINK            INTERFACE TO VCOPY
         LTR   R15,R15            ZERO RETURN CODE?
         BNZ   EXIT11             IF NOT, GET OUT
         CLI   PRTCLASS,C' '      DID WE MOVE IN BLANK?
         BNE   ENDP7              NO, ALL DONE
         MVI   PRTCLASS,C'A'      MOVE IN DEFAULT SYSOUT CLASS
ENDP7    EQU   *
         EJECT
***********************************************************************
*
*        PROCESS LAST PARAMETER FROM PARSE (DSN-QUALIFIER) AND
*        DYNAMICALLY ALLOCATE THE OUTPUT FILE FOR BROWSE
*
***********************************************************************
ALLOCUT  CLI   ALLOCFG,X'01'      HAVE WE ALREADY ALLOCATED IT?
         BE    ALLOCOK            YES, SKIP THIS CODE.
         MVI   AUTX2+6,X'04'      INDICATE NEW FOR INTIAL DISP
         MVI   DISP,X'02'         INDICATE CATLG FOR SECONDARY DISP
         XC    WAUTE1,WAUTE1      CLEAR ERROR INDICATORS.
         XC    WAUTE2,WAUTE2      CLEAR ERROR INDICATORS.
ALCAGAIN LA    R15,CMNCSV8        POINT TO VARIABLE NAME
         ST    R15,VCOPYVAR       SAVE POINTER IN PARM LIST
         LA    R15,44             SET SIZE FOR VCOPY
         ST    R15,LENGTH8        STORE IN PASSED VARIABLE
         LA    R15,LENGTH8        POINT TO LENGTH VALUE
         ST    R15,VCOPYLEN       SAVE POINTER TO SIZE IN PARM LIST
         LA    R15,QUALIFY        ADDRESS OF RELOCATED DATA
         ST    R15,SUBP6          UPDATE PARM FOR SUB
         ST    R15,VCOPYLOC       UPDATE LOCATION OF RECEIVING FIELD
         LA    R1,VCOPYLIT        SET R1 FOR CALL
         CALL  ISPLINK            INTERFACE TO VCOPY
         LTR   R15,R15            ZERO RETURN CODE?
         BNZ   EXIT12             IF NOT, GET OUT
         LA    R15,QUALIFY        ADDRESS OF RELOCATED DATA
         L     R1,LENGTH8         GET SIZE OF OPERAND
         BCTR  R1,R0              DECREMENT FOR EXECUTE
         LA    R14,QUALIFY        ADDRESS OF MOVE TO FIELD
         LA    R0,AUTB            ADDRESS OF RELOCATED DATA
         ST    R0,AUTP            INTO ADCON
         OI    AUTP,X'80'         SET HIGH ORDER
         LA    R0,AUTC            ADDRESS OF RELOCATED DATA
         ST    R0,@AUTC           INTO ADCON
         LA    R0,AUTX1           ADDRESS OF RELOCATED DATA
         ST    R0,AUTC            INTO ADCON
         LA    R0,AUTX2           ADDRESS OF RELOCATED DATA
         ST    R0,@AUTX2          INTO ADCON
         LA    R0,AUTX3           ADDRESS OF RELOCATED DATA
         ST    R0,@AUTX3          INTO ADCON
         LA    R0,AUTX4           ADDRESS OF RELOCATED DATA
         ST    R0,@AUTX4          INTO ADCON
         LA    R0,AUTX5           ADDRESS OF RELOCATED DATA
         ST    R0,@AUTX5          INTO ADCON
         LA    R0,AUTX6           ADDRESS OF RELOCATED DATA
         ST    R0,@AUTX6          INTO ADCON
         LA    R0,AUTX7           ADDRESS OF RELOCATED DATA
         ST    R0,@AUTX7          INTO ADCON
         LA    R0,AUTX8           ADDRESS OF RELOCATED DATA
         ST    R0,@AUTX8          INTO ADCON
         LA    R0,AUTX9           ADDRESS OF RELOCATED DATA
         ST    R0,@AUTX9          INTO ADCON
         OI    @AUTX9,X'80'       SET HIGH ORDER
         LA    R1,AUTP            SET PARM POINTER FOR DA
         ST    R1,ACTIVE          SAVE FOR ERROR MESSAGE
         SVC   99                 ISSUE ALLOCATE SVC
         ST    R15,RETCODE        SAVE RETCODE FOR ERR MSG
         ST    R15,WAUTE1         SAVE RETCODE FOR ERR MSG
         LTR   R15,R15            RETCODE = ZERO?
         BZ    ALLOCOK            YES, CONTINUE
         CLC   WAUTE2(2),=X'0448' IS THIS THE SECOND TIME AROUND?
         BE    EXIT20             INFORM USER TO DEALLOCATE
         MVC   WAUTE2,AUTE        SAVE AUTE ERROR CODE
         CLC   AUTE(2),=X'4704'   IS IT DUPLICATE NAME ON VOLUME?
         BE    ALLOCSHR           YES, RETRY WITH SHR
         CLC   AUTE(2),=X'5708'   IS IT ALREADY CATALOGED?
         BE    ALLOCSHR           YES, RETRY WITH SHR
         CLC   AUTE(2),=X'0448'   IS IT ALREADY ALLOCATED?
         BNE   EXIT14             NO, SOUTUT DYNAMIC ALLOCATION FAILED
ALLOCSHR MVI   AUTX2+6,X'01'      INDICATE OLD FOR INTIAL DISP
         MVI   DISP,X'08'         INDICATE KEEP FOR SECONDARY DISP
         B     ALCAGAIN           RETRY UTILITY DYNAMIC ALLOCATION
         EJECT
***********************************************************************
*
*        PROCESS THE LIST/BROWSE REQUEST VIA CALL TO SOUTSUB
*
***********************************************************************
ALLOCOK  OI    ALLOCFG,X'01'      INDICATE UTILITY FILE ALLOCATED
         MVC   SOUTDCB+40(8),AUTDDN MOVE DDNAME TO DCB
         MVC   FUTDSN,AUTDSN      MOVE DDNAME TO DEALLOCATION UNIT
         LA    R15,SOUTDCB+40     ADDRESS OF RELOCATED DATA
         ST    R15,SUBP5          UPDATE PARM POINTER
         LOAD  EP=SOUTSUB         LOAD THE SOUT SUBROUTINE
         LR    R2,R0              SAVE ENTRY POINT
         LA    R1,MVSGPSVC        GET USER SVC NUMBER
         LTR   R1,R1              ANY SVC ALLOWED?
         BZ    SKIPSVC1           NO, SKIP USER SVC
         LA    R15,3              SET MVSGPSVC ENTRY CODE
         LA    R1,=C'AUTH'        GET MVSGPSVC PASSWORD
         SVC   MVSGPSVC           GET AUTHORIZED
         OI    FLAG,AUTH          INDICATE AUTHORIZED REQUEST
SKIPSVC1 LA    R1,SUBPARM         ADDRESS OF SOUTSUB PARM
         LR    R15,R2             ADDRESS OF SOUTSUB ROUTINE
         BALR  R14,R15            TO SUBROUTINE
         LR    R2,R15             SAVE SOUTSUB RETURN CODE
         LA    R1,MVSGPSVC        GET USER SVC NUMBER
         LTR   R1,R1              ANY SVC ALLOWED?
         BZ    SKIPSVC2           NO, SKIP USER SVC
         LA    R15,4              INDICATE NON-AUTH REQ
         LA    R1,0               INDICATE NON-AUTH REQ
         SVC   MVSGPSVC           GET UNAUTHORIZED
SKIPSVC2 DELETE EP=SOUTSUB        DELETE SUBROUTINE
         ST    R2,SUBRCODE        SAVE RETURN CODE FORM SOUTSUB
         LTR   R15,R2             SOUTSUB RETCODE OK?
         BNZ   EXIT16             RETURN WILL CHECK TO DISPLAY MESSAGE
*                                 FOR NONZERO SOUTSUB RETURN CODE
         SPACE 3
***********************************************************************
*
*        CALL ISPBRO TO ALLOW SCROLLING OF THE DATASET
*
***********************************************************************
STARTBRO LA    R1,JFCBDSN         ADDRESS OF THE DSNAME
         ST    R1,EXLST           INTO THE OPEN EXIT LIST
         MVI   EXLST,X'87'        SPECIFY RDJFCB EXIT
         LA    R1,EXLST           ADDRESS OF THE EXIT LIST
         STCM  R1,7,SOUTDCB+37    INTO THE DCB
         LA    R1,SOUTDCB         DCB ADDRESS
         ST    R1,WORK            INTO WORKAREA
         MVI   WORK,X'80'         SET END OF LIST BIT
         LA    R1,WORK            DCB INDIRECT ADDRESS
         SVC   64                 RDJFCB TO GET DSN FOR ISPBRO
         MVC   ISPDSN(44),JFCBDSN MOVE GOTTEN DSN TO ISPDSN
         MVI   ISPDSN+44,C' '     MOVE IN ONE BLANK
         LA    R1,ISPDSN          R1 ==> ISPDSN
DSNCOMP  CLI   0(R1),C' '         HAVE WE HIT A BLANK?
         BE    ENDQUOTE           YES, GO TO FILL END OF DSN
         LA    R1,1(R1)           INCREMENT R1
         B     DSNCOMP            BRANCH FOR NEXT CHAR
ENDQUOTE MVC   0(1,R1),ISPQUOTE   MOVE IN QUOTES FOR BROWSE
         LA    R1,ISPQUOTE        LOAD ADDRESS OF DSN
         ST    R1,ISPBRLST+4      STORE IN BROWSE PARAMETER LIST
         MVI   ISPBRLST+4,X'80'   INDICATE END OF LIST
         LA    R1,ISPBRLST        LOAD ADDRESS OF PARAMETER LIST
         CALL  ISPLINK            INTERFACE TO BROWSE
         ST    R15,RETCODE        SAVE RETCODE FOR ERR MSG
         LTR   R15,R15            CHECK RETURN CODE
         BNZ   EXIT17             ERROR, ISPBRO FAILED
         EJECT
***********************************************************************
*
*        CHECK IF 'PRINT' OPTION WAS SPECIFIED AND IF SO,
*        ASK THE USER IF 'PRINT' IS STILL REQUESTED.
*        IF STILL REQUESTED, WRITE THE FILE TO SYSOUT CLASS(A)
*
***********************************************************************
CHKPRINT LA    R2,BLANK           DEFAULT TO NO MESSAGE
         TM    OPT,PRT            PRINT REQUEST?
         BO    ASK                YES, ASK USER
         TM    FLAG,ARCH          JOB FOUND IN ARCH
         BZ    EXIT               NO, DON'T ASK
         LA    R2,CMNFS123        ADDRESS OF ARCHIVE MESSAGE
ASK      LA    R1,BLANK           LOAD ADDRESS OF NO CURSOR
         ICM   R1,8,X'80'         INDICATE END OF LIST
         ST    R1,CALLDIS4        STORE IN 4TH CALL PARAMETER
         ST    R2,CALLDIS3        STORE IN 3TH CALL PARAMETER
         LA    R1,CMNFS01         LOAD ADDRESS OF 'CMNFS01'
         ST    R1,CALLDIS2        STORE IN 2ND CALL PARAMETER
         LA    R1,DISPLAY         LOAD ADDRESS OF 'DISPLAY'
         ST    R1,CALLDIS1        STORE IN FIRST CALL PARAMETER
         LA    R1,CALLDIS1        LOAD ADDRESS OF DISPLAY PARMS
         CALL  ISPLINK            DISPLAY PANEL CMNFS01
         LA    R1,CMNFS00L        LOAD ADDRESS OF CMNFS00 (DEFAULT)
         ST    R1,CALLDIS2        STORE IN 2ND CALL PARAMETER
         LTR   R10,R15            ZERO RETURN CODE?
         BZ    ASK2               YES, CONTINUE
         CL    R10,=F'8'          IS IT RETURN OR END?
         BNE   EXIT21             GET OUT WITH COMPLETION CODE
         SR    R10,R10            CLEAR COMPLETION CODE
         B     ENDING             EXIT
ASK2     LA    R15,CMNFSVA        POINT TO VARIABLE NAME
         ST    R15,VCOPYVAR       SAVE POINTER IN PARM LIST
         LA    R15,4              SET SIZE FOR VCOPY
         ST    R15,LENGTHYN       STORE IN PASSED VARIABLE
         LA    R15,LENGTHYN       POINT TO LENGTH VALUE
         ST    R15,VCOPYLEN       SAVE POINTER TO SIZE IN PARM LIST
         LA    R15,ANSWER         ADDRESS OF RELOCATED DATA
         ST    R15,VCOPYLOC       UPDATE LOCATION OF RECEIVING FIELD
         LA    R1,VCOPYLIT        SET R1 FOR CALL
         CALL  ISPLINK            INTERFACE TO VCOPY
         LTR   R15,R15            CHECK RETURN CODE
         BNZ   EXIT22             GET OUT IF NOT ZERO
         CLI   ANSWER,C'N'        WAS REPLY 'NO'?
         BE    EXIT               YES, FREE AND EXIT
PRTFILE  LA    R0,PRTB            ADDRESS OF RELOCATED DATA
         ST    R0,PRTP            INTO ADCON
         OI    PRTP,X'80'         SET HIGH ORDER
         LA    R0,PRTC            ADDRESS OF RELOCATED DATA
         ST    R0,@PRTC           INTO ADCON
         LA    R0,PRTX1           ADDRESS OF RELOCATED DATA
         ST    R0,PRTC            INTO ADCON
         LA    R0,PRTX2           ADDRESS OF RELOCATED DATA
         ST    R0,@PRTX2          INTO ADCON
         LA    R0,PRTX3           ADDRESS OF RELOCATED DATA
         ST    R0,@PRTX3          INTO ADCON
         LA    R0,PRTX4           ADDRESS OF RELOCATED DATA
         STCM  R0,7,@PRTX4+1      INTO ADCON (PRESERVE END FLAG IF ANY)
         LA    R0,PRTXL           ADDRESS OF RELOCATED DATA
         ST    R0,@PRTXL          INTO ADCON
         OI    @PRTXL,X'80'       SET HIGH ORDER
         LA    R1,PRTP            ADDRESS OF SYSOUT DYNALLOC PARM
         ST    R1,ACTIVE          SAVE FOR ERROR MESSAGE
         SVC   99                 DYNAMICALLY ALLOCATE SYSOUT FILE
         ST    R15,RETCODE        SAVE RETCODE FOR ERR MSG
         LTR   R15,R15            RETCODE = ZERO?
         BNZ   EXIT25             NO, PRINT FILE ALLOCATION FAILED
         MVC   PRINTDCB+40(8),PRTDDN MOVE DDNAME TO DCB
         OPEN  (PRINTDCB,(OUTPUT),SOUTDCB,(INPUT)),MF=(E,OPEN)
SOUTPRT  GET   SOUTDCB            GET INPUT RECORD
         LR    R0,R1              COPY DATA ADDRESS
         PUT   PRINTDCB           PUT RECORD
         B     SOUTPRT            GET NEXT RECORD
SOUTEOD  CLOSE (PRINTDCB,,SOUTDCB),MF=(E,CLOSE)
         B     EXIT24             SET PRINTED MESSAGE
         EJECT
***********************************************************************
*
*        CALL DYNAMIC ALLOCATION TO FREE THE CMNFS00 DATASET
*
***********************************************************************
EXIT     LA    R1,BLANK           INDICATE NO MESSAGE
         ICM   R1,8,X'80'         INDICATE END OF PARAMETER LIST
         ST    R1,CALLDIS3        STORE IN THIRD CALL PARM.
         LA    R1,CMNFS00L        LOAD ADDRESS OF 4.S PANEL
         ST    R1,CALLDIS2        STORE IN SECOND CALL PARM.
         LA    R1,DISPLAY         LOAD ADDRESS OF VDISPLAY.
         ST    R1,CALLDIS1        STORE IN FIRST CALL PARM.
         B     DISPLAYP           LET'S DO IT AGAIN.
ENDING   CLI   ALLOCFG,X'01'      CHECK TO SEE IF ALLOCATED
         BNE   SKIPDEAL           IF NOT, SKIP DEALLOCATION
         NI    ALLOCFG,X'FE'      MARK IT GONE, JUST FOR THE RECORD
         LA    R0,FUTB            ADDRESS OF RELOCATED DATA
         ST    R0,FUTP            INTO ADCON
         OI    FUTP,X'80'         SET HIGH ORDER
         LA    R0,FUTC            ADDRESS OF RELOCATED DATA
         ST    R0,@FUTC           INTO ADCON
         LA    R0,FUTX1           ADDRESS OF RELOCATED DATA
         ST    R0,FUTC            INTO ADCON
         LA    R0,FUTX2           ADDRESS OF RELOCATED DATA
         ST    R0,@FUTX2          INTO ADCON
         OI    @FUTX2,X'80'       SET HIGH ORDER
         LA    R1,FUTP            SET PARM POINTER FOR FREE
         ST    R1,ACTIVE          SAVE FOR ERROR MESSAGE
         SVC   99                 FREE THE FILE
         ST    R15,RETCODE        SAVE RETCODE FOR ERR MSG
         LTR   R15,R15            RETCODE = ZERO?
         BNZ   EXIT18             NO, UTILITY FILE DEALLOCATION FAILED
SKIPDEAL LTR   R10,R10            TEST FOR NON-ZERO RETURN CODE
         BNZ   SKIPPROF           DON'T BOTHER WITH PROFILE IF NONZERO
         CALL  ISPLINK,(VPUT,PROFVARS,PROFILE),VL
SKIPPROF FREEMAIN R,LV=GOTEND-GOTTEN,A=(11) FREE WORKAREA STORAGE
         LR    R15,R10            RESTORE RETURN CODE
         $EPILOG RETCODE          RETURN WITH HIGHEST RETURN CODE
         EJECT
***********************************************************************
*
*        WRITE ANY REQUIRED ERROR MESSAGES TO THE USER.
*        IF A DYNALLOC ERROR, DISPLAY THE RETCODE AND INFO FIELDS.
*
***********************************************************************
EXIT25   LA    R1,CMNFS125        SYSOUT FILE NOT ALLOCATED MESSAGE
         ST    R15,WAUTE1         SAVE RETCODE FOR ERR MSG
         MVC   WAUTE2,PRTE        SAVE PRTE ERROR CODE
         B     MSGEXIT            REDISPLAY PANEL WITH MESSAGE
EXIT24   LA    R1,CMNFS124        DATA PRINTED MESSAGE
         B     MSGEXIT            REDISPLAY PANEL WITH MESSAGE
*EXIT23  LA    R1,CMNFS123        THIS EXIT IS NOT USED BUT ARCHIVE MSG
*        B     MSGEXIT            IS CMNFS123
EXIT22   LA    R1,CMNFS122        CMNFSVA - PRINT ANSWER - NOT COPIED
         B     MSGEXIT            REDISPLAY PANEL WITH MESSAGE
EXIT21   LA    R1,CMNFS121        BAD RETURN CODE FROM DISPLAY CMNFS01
         B     MSGEXIT            REDISPLAY PANEL WITH MESSAGE
EXIT20   LA    R1,CMNFS120        DATASET ALREADY ALLOC. BUT NOT CATLG
         B     MSGEXIT            REDISPLAY PANEL WITH MESSAGE
EXIT19   LA    R1,CMNFS119        TRIED LONE ASTERISK FOR JOBNAME
         B     MSGEXIT            REDISPLAY PANEL WITH MESSAGE
EXIT18   LA    R1,CMNFS118        UTILITY DEALLOCATION FAILED
         B     MSGEXIT            REDISPLAY PANEL WITH MESSAGE
EXIT17   LA    R1,CMNFS117        BROWSE FAILED
         B     MSGEXIT            REDISPLAY PANEL WITH MESSAGE
EXIT16   L     R10,SUBRCODE       SOUTSUB FAILED
         SLL   R10,1              MAKE IT MULTIPLE OF 8 INSTEAD OF 4
         LA    R1,CMNFS500        LOAD START OF SOUTSUB MESSSAGES
         AR    R1,R10             GET ADDRESS OF MESSAGE
         B     MSGEXIT            REDISPLAY PANEL WITH MESSAGE
EXIT15   LA    R1,CMNFS115        VDEFINE FOR CMNFS50 FAILED
         B     MSGEXIT            REDISPLAY PANEL WITH MESSAGE
EXIT14   LA    R1,CMNFS114        DYNAMIC ALLOC FAILED FOR UTILITY
         B     MSGEXIT            REDISPLAY PANEL WITH MESSAGE
EXIT13A  LA    R1,CMNCSV3         POINT TO DATE WITH CURSOR
         ICM   R1,8,X'80'         INDICATE END OF LIST
         ST    R1,CALLDIS4        STORE INTO CALLING PARM
         LA    R1,BLANK           POINT TO NO PANEL
         ST    R1,CALLDIS2        STORE INTO CALLING PARM
         LA    R1,CMNFS113        INVALID FORMAT FOR DATE
         B     MSGEXIT            REDISPLAY PANEL WITH MESSAGE
EXIT13B  LA    R1,CMNCSV4         POINT TO TIME WITH CURSOR
         ICM   R1,8,X'80'         INDICATE END OF LIST
         ST    R1,CALLDIS4        STORE INTO CALLING PARM
         LA    R1,BLANK           POINT TO NO PANEL
         ST    R1,CALLDIS2        STORE INTO CALLING PARM
         LA    R1,CMNFS113        INVALID FORMAT FOR TIME
         B     MSGEXIT            REDISPLAY PANEL WITH MESSAGE
EXIT13C  LA    R1,CMNCSV5         POINT TO OPTION WITH CURSOR
         ICM   R1,8,X'80'         INDICATE END OF LIST
         ST    R1,CALLDIS4        STORE INTO CALLING PARM
         LA    R1,BLANK           POINT TO NO PANEL
         ST    R1,CALLDIS2        STORE INTO CALLING PARM
         LA    R1,CMNFS113        INVALID FORMAT FOR OPTION
         B     MSGEXIT            REDISPLAY PANEL WITH MESSAGE
EXIT12   LA    R1,CMNFS112        CMNCSV8 - QUALIFIER - NOT COPIED
         B     MSGEXIT            REDISPLAY PANEL WITH MESSAGE
EXIT11   LA    R1,CMNFS111        CMNCSV7 - CLASS - NOT COPIED
         B     MSGEXIT            REDISPLAY PANEL WITH MESSAGE
EXIT10   LA    R1,CMNFS110        CMNCSV6 - DEST - NOT COPIED
         B     MSGEXIT            REDISPLAY PANEL WITH MESSAGE
EXIT9    LA    R1,CMNFS109        CMNCSV5 - OPTION - NOT COPIED
         B     MSGEXIT            REDISPLAY PANEL WITH MESSAGE
EXIT8    LA    R1,CMNFS108        CMNCSV4 - TIME - NOT COPIED
         B     MSGEXIT            REDISPLAY PANEL WITH MESSAGE
EXIT7    LA    R1,CMNFS107        CMNCSV3 - DATE - NOT COPIED
         B     MSGEXIT            REDISPLAY PANEL WITH MESSAGE
EXIT6    LA    R1,CMNFS106        CMNCSV2 - JOB NUMBER - NOT COPIED
         B     MSGEXIT            REDISPLAY PANEL WITH MESSAGE
EXIT5    LA    R1,CMNFS105        CMNCSV1 -JOB NAME -NOT COPIED
         B     MSGEXIT            REDISPLAY PANEL WITH MESSAGE
EXIT4    LA    R1,CMNFS104        BAD RETURN CODE FROM DISPLAY CMNFS00
         B     MSGEXIT            REDISPLAY PANEL WITH MESSAGE
EXIT3    LA    R1,CMNFS103        ZTEMPF NOT IN EXPECTED FORMAT
         B     MSGEXIT            REDISPLAY PANEL WITH MESSAGE
EXIT2    LA    R1,CMNFS102        VCOPY FOR ZTEMPF FAILED
         B     MSGEXIT            REDISPLAY PANEL WITH MESSAGE
EXIT1    LA    R1,CMNFS101        VGET FOR ZVARS FAILED
         B     MSGEXIT            REDISPLAY PANEL WITH MESSAGE
MSGEXIT  ST    R1,CALLDIS3        STORE INTO CALLING PARM
         SR    R10,R10            RESET RETURN CODE REGISTER
         XC    RETCODE,RETCODE    RESET SAVED RETURN CODE
         B     DISPLAYP           REDIPLAY PANEL WITH MESSAGE
         EJECT
***********************************************************************
*
*        THE FOLLOWING CONSTANTS ARE NOT MODIFIED BY THIS ROUTINE
*
***********************************************************************
         DS    0F
BLANK    DC    CL8' '
BROWSE   DC    CL8'BROWSE'
CHAR     DC    CL8'CHAR'
CMNFS500 DC    CL8'CMNFS500'
CMNFS501 DC    CL8'CMNFS501'
CMNFS502 DC    CL8'CMNFS502'
CMNFS503 DC    CL8'CMNFS503'
CMNFS504 DC    CL8'CMNFS504'
CMNFS505 DC    CL8'CMNFS505'
CMNFS506 DC    CL8'CMNFS506'
CMNFS507 DC    CL8'CMNFS507'
CMNFS508 DC    CL8'CMNFS508'
CMNFS509 DC    CL8'CMNFS509'
CMNFS510 DC    CL8'CMNFS510'
CMNFS50  DC    CL16'(CMNFS50)'
CMNFS51  DC    CL16'(CMNFS51)'
HEX      DC    CL8'HEX'
VCOPY    DC    CL8'VCOPY'
VDEFINE  DC    CL8'VDEFINE'
VGET     DC    CL8'VGET'
VPUT     DC    CL8'VPUT'
MOVELIT  DC    CL8'MOVE'
PROFILE  DC    CL8'PROFILE'
PROFVARS DC    CL28'(CMNCSV1 CMNCSV6 CMNCSV7)'
DISPLAY  DC    CL8'DISPLAY'
CMNFS00L DC    CL8'CMNFS00'
CMNFS01  DC    CL8'CMNFS01'
CMNCSV1  DC    CL8'CMNCSV1'
CMNCSV2  DC    CL8'CMNCSV2'
CMNCSV3  DC    CL8'CMNCSV3'
CMNCSV4  DC    CL8'CMNCSV4'
CMNCSV5  DC    CL8'CMNCSV5'
CMNCSV6  DC    CL8'CMNCSV6'
CMNCSV7  DC    CL8'CMNCSV7'
CMNCSV8  DC    CL8'CMNCSV8'
CMNFSVA  DC    CL8'CMNFSVA'
CMNFSVB  DC    CL8'CMNFSVB'
ZTEMPF   DC    CL8'ZTEMPF'
ZVARS    DC    CL16'(ZTEMPF)'
MOVE     MVC   0(0,R14),0(R15)    EXECUTED MOVE
CMNFS100 DC    CL8' '
CMNFS101 DC    CL8'CMNFS101'
CMNFS102 DC    CL8'CMNFS102'
CMNFS103 DC    CL8'CMNFS103'
CMNFS104 DC    CL8'CMNFS104'
CMNFS105 DC    CL8'CMNFS105'
CMNFS106 DC    CL8'CMNFS106'
CMNFS107 DC    CL8'CMNFS107'
CMNFS108 DC    CL8'CMNFS108'
CMNFS109 DC    CL8'CMNFS109'
CMNFS110 DC    CL8'CMNFS110'
CMNFS111 DC    CL8'CMNFS111'
CMNFS112 DC    CL8'CMNFS112'
CMNFS113 DC    CL8'CMNFS113'
CMNFS114 DC    CL8'CMNFS114'
CMNFS115 DC    CL8'CMNFS115'
CMNFS116 DC    CL8'CMNFS116'
CMNFS117 DC    CL8'CMNFS117'
CMNFS118 DC    CL8'CMNFS118'
CMNFS119 DC    CL8'CMNFS119'
CMNFS120 DC    CL8'CMNFS120'
CMNFS121 DC    CL8'CMNFS121'
CMNFS122 DC    CL8'CMNFS122'
CMNFS123 DC    CL8'CMNFS123'
CMNFS124 DC    CL8'CMNFS124'
CMNFS125 DC    CL8'CMNFS125'
         LTORG
         EJECT
***********************************************************************
*
*        THE FOLLOWING CONSTANTS ARE MODIFIED BY THIS ROUTINE AND
*        ARE PLACED HERE SO THEY MAY BE MOVED TO GOTTEN STORAGE
*
***********************************************************************
         EJECT
GOTTEN   DS    0D                 START OF GOTTEN STORAGE
OPEN     OPEN  (PRINTDCB,(OUTPUT),SOUTDCB,(INPUT)),MF=L
CLOSE    CLOSE (PRINTDCB,,SOUTDCB),MF=L
ERRDA    DC    CL40'RC=XXXXXXXX'
SUFFIXAD DC    F'0'               ADDRESS OF DSN SUFFIX
SOUTXP   DC    F'0'               ADDRESS OF DSN 'B' IN 'SOUTB'
WORK     DC    F'0'               WORK AREA
RETCODE  DC    F'0'               RETCODE AREA
WAUTE1   DC    F'0'               RETCODE AREA REG15 FROM DYN ALLOC
WAUTE2   DC    F'0'               RETCODE AREA INFO FROM DYN ALLOC
SUBRCODE DC    F'0'               RETCODE AREA FROM SOUTSUB
ACTIVE   DC    F'0'               ADDRESS OF ACTIVE DYNALLOC
SOUTDCB  DCB   DDNAME=XXXXXXX,DSORG=PS,MACRF=(PM,GL),EODAD=SOUTEOD,    X
               LRECL=133,RECFM=FBM,BLKSIZE=6118 BROWSE WORK FILE
PRINTDCB DCB   DDNAME=XXXXXXX,DSORG=PS,MACRF=PM,RECFM=FM,              X
               LRECL=133,BLKSIZE=133
*
*        PARM='TLD,TITLE,DSNAME'
EXLST    DC    X'87',AL3(JFCBDSN)  RDJFCB OPEN EXIT (SOUTDCB)
JFCBDSN  DC    CL176' '
         DS    0F
ISPQUOTE DC    CL1''''            START OF QUOTES FOR BROWSE
ISPDSN   DC    CL47' '            ACTUAL DSN FOR BROWSE
ISPBRLST DC    A(BROWSE)          ADDRESS OF BROWSE LITERAL
         DS    CL4                ADDRESS OF ISPQUOTE
CALLDIS1 DC    A(0)               1ST PARM FOR DISPLAY
CALLDIS2 DC    A(0)               2ND PARM FOR DISPLAY
CALLDIS3 DC    A(0)               3RD PARM FOR DISPLAY
CALLDIS4 DC    A(0)               4TH PARM FOR DISPLAY
CALLDEF1 DC    A(0)               1ST PARM FOR DEFINE
CALLDEF2 DC    A(0)               2ND PARM FOR DEFINE
CALLDEF3 DC    A(0)               3RD PARM FOR DEFINE
CALLDEF4 DC    A(0)               4TH PARM FOR DEFINE
CALLDEF5 DC    A(0)               5TH PARM FOR DEFINE
*
*
*        PARM='A(JOBNAME,JOBNUM,DATE,TIME,DDNAME,DSNQUALIFIER,FLAGS)'
SUBPARM  DS    0F
SUBP1    DC    A(0)               ADDR OF JOBNAME
SUBP2    DC    A(0)               ADDR OF JOB NUMBER
SUBP3    DC    A(0)               ADDR OF DATE
SUBP4    DC    A(0)               ADDR OF TIME
SUBP5    DC    A(0)               ADDR OF DDNAME
SUBP6    DC    A(0)               ADDR OF DSN QUALIFIER
SUBP7    DC    A(0)               ADDR OF FLAGS
JOBNAME  DC    CL8' '              JOBNAME FOR SEARCH
JOBNUM   DC    CL8' '              JOBNUM FOR SEARCH
DATE     DC    CL8' '              DATE FOR SEARCH
TIME     DC    CL8' '              TIME FOR SEARCH
QUALIFY  DC    CL44' '             SOUT SYSTEM DSN QUALIFIER
ANSWER   DC    CL4' '             ANSWER FROM PRINT QUESTION
VCOPYLIT DC    A(VCOPY)           ADDRESS OF VCOPY LITERAL
VCOPYVAR DC    A(0)               ADDRESS OF VARIABLE NAME FOR VCOPY
VCOPYLEN DC    A(0)               ADDRESS OF LENGTH FOR VCOPY
VCOPYLOC DC    A(0)               ADDRESS OF RECEIVING FIELD FOR VCOPY
VCOPYMOV DC    X'80',AL3(MOVELIT) ADDRESS OF MOVE LITERAL FOR VCOPY
LENGTHYN DS    1F                 LENGTH OF VARIABLE CMNFSVA
LENGTHZT DS    1F                 LENGTH OF VARIABLE ZTEMPF
LENGTH1  DS    1F                 LENGTH OF VARIABLE CMNCSV1
LENGTH2  DS    1F                 LENGTH OF VARIABLE CMNCSV2
LENGTH3  DS    1F                 LENGTH OF VARIABLE CMNCSV3
LENGTH4  DS    1F                 LENGTH OF VARIABLE CMNCSV4
LENGTH5  DS    1F                 LENGTH OF VARIABLE CMNCSV5
LENGTH6  DS    1F                 LENGTH OF VARIABLE CMNCSV6
LENGTH7  DS    1F                 LENGTH OF VARIABLE CMNCSV7
LENGTH8  DS    1F                 LENGTH OF VARIABLE CMNCSV8
VDEFLEN1 DS    1F                 LENGTH FOR VDEFINE1
VDEFLEN2 DS    1F                 LENGTH FOR VDEFINE2
ALLOCFG  DC    X'00'              UTILITY FILE ALLOCATED FLAG
FLAG     DC    X'01'               OPTION FLAGS
TSO      EQU   X'01'               ENVIRONEMENT (ISSUE TPUTS)
LST      EQU   X'02'               LIST  REQUESTED
ARCH     EQU   X'04'               JOB FOUND IN ARCHIVE
AUTH     EQU   X'08'               CALLER IS AUTHORIZED
LSTA     EQU   X'10'               LIST FOR ARCHIVE ALSO
OPT      DC    X'00'               PROCESS OPTIONS
DEST     DC    CL8' '              KEYED DESTINATION
OPTION   DC    CL2' '              KEYED OPTION
BRS      EQU   X'01'               BROWSE REQUESTED
LIST     EQU   X'02'               LIST  REQUESTED
PRT      EQU   X'04'               PRINT REQUESTED
*
*                                                                     *
*        DYNAMIC ALLOCATION LIST FOR THE OUTPUT FILE                  *
*                                                                     *
         DS    F                  MUST BE FULLWORD ALIGNED
AUTP     DC    X'80',AL3(AUTB)    ADDRESS OF DYNALLOC BLOCK
AUTB     DC    AL1(20),AL1(1),X'2000' ALLOCATION REQUEST
AUTE     DC    F'0'               ERROR/INFO CODES (RETURNED)
@AUTC    DC    A(AUTC)            START OF TEXT UNIT POINTER CHAIN
         DC    A(0)               RESERVED
AUTF     DC    X'00000000'        FLAGS
AUTC     DC    A(AUTX1)           ADDRESS OF TEXT UNIT 1
@AUTX2   DC    A(AUTX2)           ADDRESS OF TEXT UNIT 2
@AUTX3   DC    A(AUTX3)           ADDRESS OF TEXT UNIT 3
@AUTX4   DC    A(AUTX4)           ADDRESS OF TEXT UNIT 4
@AUTX5   DC    A(AUTX5)           ADDRESS OF TEXT UNIT 5
@AUTX6   DC    A(AUTX6)           ADDRESS OF TEXT UNIT 6
@AUTX7   DC    A(AUTX7)           ADDRESS OF TEXT UNIT 7
@AUTX8   DC    A(AUTX8)           ADDRESS OF TEXT UNIT 8
@AUTX9   DC    X'80',AL3(AUTX9)   ADDRESS OF TEXT UNIT 9
AUTX1    DC    X'0055',AL2(1),AL2(8)            DDNAME RETURN UNIT
AUTDDN   DC    CL8' '                           DDNAME RETURNED
AUTX2    DC    X'0004',AL2(1),AL2(1),X'04'      STATUS UNIT (NEW)
AUTX3    DC    X'0005',AL2(1),AL2(1)            DISPOSITION UNIT
DISP     DC    X'02'                            DISP=CATLG(02)
AUTX4    DC    X'0008',AL2(0)                   SPACE IN CYLINDERS
AUTX5    DC    X'000A',AL2(1),AL2(3),AL3(1)     PRIMARY QUANTITY
AUTX6    DC    X'000B',AL2(1),AL2(3),AL3(02)    SECNDRY QUANTITY
AUTX7    DC    X'0000',AL2(0)                   NORELEASE
AUTX8    DC    X'0015',AL2(1)                   UNIT NAME UNIT
UNITNSZ  DC    AL2(8)                           UNIT NAME SIZE
UNITN    DC    C'SYSALLDA'                      UNIT NAME
AUTX9    DC    X'0002',AL2(1)                   DSNAME UNIT
AUTDSNL  DC    AL2(0)                           DSNAME LENGTH
AUTDSN   DC    CL44' '                          DSNAME
         SPACE 3
***********************************************************************
*                                                                     *
*        DYNAMIC DEALLOCATION LIST FOR THE OUTPUT FILE                *
*                                                                     *
***********************************************************************
         DS    F                  MUST BE FULLWORD ALIGNED
FUTP     DC    X'80',AL3(FUTB)    ADDRESS OF DYNALLOC BLOCK
FUTB     DC    AL1(20),AL1(2),X'0000' DEALLOCATION REQUEST
         DC    F'0'               ERROR/INFO CODES (RETURNED)
@FUTC    DC    A(FUTC)            START OF TEXT UNIT POINTER CHAIN
         DC    A(0)               RESERVED
FUTF     DC    X'00000000'        FLAGS
FUTC     DC    A(FUTX1)           ADDRESS OF TEXT UNIT 1
@FUTX2   DC    X'80',AL3(FUTX2)   ADDRESS OF TEXT UNIT 2
FUTX1    DC    X'0002',AL2(1)                   DSNAME UNIT
FUTDSNL  DC    AL2(0)                           DSNAME LENGTH
FUTDSN   DC    CL44' '                          DSNAME TO FREE
FUTX2    DC    X'0005',AL2(1),AL2(1)            DISPOSITION UNIT
FDISP    DC    X'04'                            DISP=DELETE(04)
         SPACE 3
***********************************************************************
*                                                                     *
*        DYNAMIC ALLOCATION LIST FOR THE SYSOUT PRINT FILE            *
*                                                                     *
***********************************************************************
         DS    F                  MUST BE FULLWORD ALIGNED
PRTP     DC    X'80',AL3(PRTB)    ADDRESS OF DYNALLOC BLOCK
PRTB     DC    AL1(20),AL1(1),X'0000' ALLOCATION REQUEST
PRTE     DC    F'0'               ERROR/INFO CODES (RETURNED)
@PRTC    DC    A(PRTC)            START OF TEXT UNIT POINTER CHAIN
         DC    A(0)               RESERVED
PRTF     DC    X'00000000'        FLAGS
PRTC     DC    A(PRTX1)           ADDRESS OF TEXT UNIT 1
@PRTX2   DC    A(PRTX2)           ADDRESS OF TEXT UNIT 2
@PRTX3   DC    A(PRTX3)           ADDRESS OF TEXT UNIT 3
@PRTX4   DC    X'80',AL3(PRTX4)   ADDRESS OF TEXT UNIT 4
@PRTXL   DC    X'80',AL3(PRTXL)   ADDRESS OF TEXT UNIT LAST
PRTX1    DC    X'0055',AL2(1),AL2(8)            DDNAME RETURN UNIT
PRTDDN   DC    CL8' '                           DDNAME RETURNED
PRTX2    DC    X'0018',AL2(1),AL2(1)            SYSOUT CLASS UNIT
PRTCLASS DC    C'A'                             SYSOUT CLASS
PRTX3    DC    X'001C',AL2(0)                   FREE=CLOSE
PRTX4    DC    X'0052',AL2(0)                   PERM ALLOC
PRTXL    DC    X'0058',AL2(1)                   SYSOUT DEST UNIT
PRTXLL   DC    AL2(5)                           SYSOUT DEST UNIT LEN
PRTXLD   DC    CL8'LOCAL'                       SYSOUT DEST UNIT DATA
GOTEND   EQU   *                  END OF GOTTEN STORAGE
         IKJPSCB
         IKJUPT
         END
./ ADD  NAME=ISPCOPY
MVSGPSVC EQU   255
***********************************************************************
*                                                                     *
*        THIS ROUTINE WILL ALLOW USE OF IEBCOPY UNDER SPF BY          *
*        GAINING AUTHORIZATION AND LINKING TO IEBCOPY.  THE           *
*        CALL TO THE GENERAL-PURPOSE SVC TO GAIN AUTHORIZATION        *
*        IS ONLY ALLOWED IF THIS ROUTINE IS IN THE PLPA (REAL         *
*        OR MODIFIED).                                                *
*                                                                     *
*        OPERATION:                                                   *
*                                                                     *
*        PROCESS PSEUDO-CODE:                                         *
*          INITIALIZE                                                 *
*          DEFER ATTENTION INTERRUPTS                                 *
*          IF (STAX OK)                                               *
*            THEN DO;                                                 *
*              ESTABLISH ESTAE ENVIRONMENT                            *
*              IF (ESTAE OK)                                          *
*                THEN DO;                                             *
*                  GET AUTHORIZATION                                  *
*                  LINK TO IEBCOPY                                    *
*                  REMOVE AUTHORIZATION                               *
*                  CANCEL ESTAE ENVIRONMENT                           *
*                  ALLOW ATTENTION INTERRUPTS                         *
*                ELSE;                                                *
*                  ALLOW ATTENTION INTERRUPTS                         *
*            ELSE;                                                    *
*          CLEANUP & RETURN                                           *
*                                                                     *
*        REGISTER USAGE:                                              *
*          R2  - PASS PARAMETER LIST TO IEBCOPY                       *
*          R3  - BASE ADDRESSING                                      *
*          R12 - STORE PROCESS ERROR CODES                            *
*          R13 - GETMAIN SAVE AREA DSECT BASE                         *
*                                                                     *
***********************************************************************
         TITLE '- INVOKES IEBCOPY UNDER SPF FOR COMPRESS'
ISPCOPY  CSECT
         SAVE  (14,12),,*          SAVE REGISTERS
         BALR  R3,R0               INITIALIZE R3 FOR BASE REGISTER USE
         USING *,R3                INFORM ASSEMBLER USE R3 FOR BASE
         USING GMAREA,R13          INFORM ASSEMBLER USE R13 FOR DSECT
         LR    R2,R1               SET R2=A(PASSED IEBCOPY PARM LIST)
         LA    R0,GMAREALN         SET R0=GETMAIN AREA LENGTH
         GETMAIN R,LV=(0)          GET VIRTUAL FOR GMAREA
         ST    R13,4(R1)           STORE ADDR OF PREV SAVE IN NEW SAVE
         ST    R1,8(R13)           STORE ADDR OF NEW SAVE IN PREV SAVE
         LR    R13,R1              SET R13=A(NEW SAVE AREA)
         STAX  DEFER=YES           DEFER ATTENTION INTERRUPTS
         LA    R12,40              SET R12=POSSIBLE STAX ERROR CODE
         LTR   R15,R15             TEST R15 FOR STAX ERROR
         BNZ   CLNUPRTN            IF BAD STAX, GOTO CLEANUP & RETURN
         ESTAE ESTAEX              ESTABLISH ESTAE ENVIRONMENT
         LA    R12,44              SET 12=POSSIBLE ESTAE ERROR CODE
         LTR   R15,R15             TEST R15 FOR ESTAE ERROR
         BNZ   STAXOFF             IF BAD ESTAE, GOTO CANCEL STAX
         LA    R1,CC@@AUTH         SET R1=A(C'AUTH')
         LA    R15,AUTHSET         SET R15=AUTHSET FOR AUTHORIZATION
         SVC   MVSGPSVC            CALL AUTHSVC FOR AUTHORIZATION
         LR    R1,R2               SET R1=A(CALLER'S IEBCOPY PARM LIST)
         LINK  EP=IEBCOPY          LINK IEBCOPY FOR COMPRESS
         LR    R12,R15             SET R12=IEBCOPY RETURN CODE
         LA    R15,AUTHRSET        SET R15=AUTHRSET TO REMOVE AUTH
         SVC   MVSGPSVC            CALL AUTHSVC FOR AUTH REMOVAL
         ESTAE 0                   CANCEL ESTAE INVIRONMENT
STAXOFF  STAX  DEFER=NO            ALLOW ATTENTION INTERRUPTS
CLNUPRTN LA    R0,GMAREALN         SET R0=GETMAIN AREA LENGTH
         LR    R1,R13              SET R1=A(GETMAIN AREA)
         L     R13,SAVE+4          SET R13=A(PREV SAVE AREA)
         FREEMAIN R,LV=(0),A=(1)   RELEASE VIRTUAL FOR GMAREA
         LR    R15,R12             SET R15=ERROR/RETURN CODE
         RETURN (14,12),,RC=(15)   RETURN TO CALLER W/ RC IN R15
         EJECT
* ESTAE EXIT ROUTINE...
ESTAEX   DS    0H                  ALIGNMENT
         LR    R4,R15              INITIALIZE R4 FOR BASE ADDRESS USE
         USING ESTAEX,R4           INFORM ASSEMBLER USE R4 FOR BASE
         LA    R15,AUTHRSET        SET R15=AUTHRSET TO REMOVE AUTH
         SVC   MVSGPSVC            CALL AUTHSVC FOR AUTH REMOVAL
         SR    R15,R15             CLEAR R15 FOR ABEND CONTINUATION
         BR    R14                 RETURN TO CONTROL PROGRAM
         EJECT
* CONSTANTS, TABLES, AND WORKAREA...
         SPACE 1
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 1
AUTHSET  EQU   3
AUTHRSET EQU   4
         SPACE 1
* CONSTANTS...
CC@@AUTH DC    CL4'AUTH'           CONSTANT CHARACTER 'AUTH'
         EJECT
* DSECTS...
GMAREA   DSECT                     GETMAIN AREA
SAVE     DS    18F                 ' SAVE AREA
GMAREALN EQU   ((((*-GMAREA)-1)/8)+1)*8 GETMAIN LENGTH
         END
./ ADD  NAME=SPF
***********************************************************************
*
*        THIS TSO COMMAND PROCESSOR WILL DYNAMICALLY INVOKE THE
*        SYSTEM PRODUCTIVITY FACILITY PROGRAM PRODUCT (SPF) VIA
*        AN 'ISPF' COMMAND REQUESTING A SPECIFIC PRIMARY OPTION
*        MENU (COMN@PRI).
*
*        IF THE KEYWORD 'LOGOFF' IS SPECIFIED EITHER BY COMMAND OR
*        BY LOGON PROCEDURE THE USER WILL BE AUTOMATICALLY LOGGED
*        OFF OF TSO AT THE TERMINATION OF SPF.
*
*        OPTIONAL PARAMETERS TEST, TESTX, TRACE AND TRACEX IF
*        USED ARE PASSED IN ADDITION TO THE PANEL NAME.
*
***********************************************************************
         EJECT
SPF      $PROLOG LV=512       ENTRY LINKAGE
         LR    R11,R1         SAVE CPPL ADDRESS
         USING CPPL,R11       CPPL ADDRESSABILITY
         USING @,R13          INFORM ASSEMBLER
         XC    @WORK(@SIZE),@WORK CLEAR DYNAMIC STORAGE
         MVC   @PPLUPT,CPPLUPT  MOVE USER PROFILE TABLE
         MVC   @CPPLUPT,CPPLUPT UPDATE CPPL
         MVC   @PPLECT,CPPLECT  MOVE ENVIRONMENT CONTROL TAB
         MVC   @CPPLECT,CPPLECT UPDATE CPPL
         MVC   @CPPLPSC,CPPLPSCB UPDATE CPPL
         LA    R1,@ECB        ADDRESS OF ECB
         ST    R1,@PPLECB     PROVIDE DUMB ECB
         L     R1,IKJADCON    ADDRESS OF IKJPARM CSECT
         ST    R1,@PPLPCL     AS PARSE CONTROL LIST
         LA    R1,@ANSWER     PARSE ANSWER AREA
         ST    R1,@PPLANS     ADDRESS FOR PARSE RETURN
         MVC   @PPLCBUF,CPPLCBUF  MOVE COMMAND BUF POINTER
         DROP  R11            DROP ADDRESSABILITY
         MVC   @CMD(44),CMD   MOVE MODEL COMMAND TO WORK AREA
         LA    R1,@PPLUPT     ADDRESS OF PARSE PARM LIST
         LINK  EP=IKJPARS     CALL TSO COMMAND PARSE
         L     R11,@ANSWER    GET POINTER TO PARSE ANSWER
         USING IKJPARMD,R11   GAIN ADDRESSABILITY TO ANSWER
*        CHECK FOR 'TEST' OR 'TESTX' OPTION
         SR    R15,R15        CLEAR FOR ICM
         ICM   R15,3,TESTOPT  WAS OPTION REQUESTED?
         BZ    NOTEST         NO, SKIP OPTION
         CH    R15,=H'1'      WAS TEST REQUESTED?
         BZ    TESTX          NO, MUST BE TESTX
         MVC   @TEST(4),=CL5'TESTX' PASS IT ON
         B     NOTEST         SKIP NEXT OPTION
TESTX    MVC   @TEST(5),=CL5'TESTX' PASS IT ON
NOTEST   EQU   *
*        CHECK FOR 'TRACE' OR 'TRACEX' OPTION
         SR    R15,R15        CLEAR FOR ICM
         ICM   R15,3,TRACEOPT WAS OPTION REQUESTED?
         BZ    NOTRACE        NO, SKIP OPTION
         CH    R15,=H'1'      WAS TRACE REQUESTED?
         BZ    TRACEX         NO, MUST BE TRACEX
         MVC   @TRACE(5),=CL6'TRACEX' PASS IT ON
         B     NOTRACE        SKIP NEXT OPTION
TRACEX   MVC   @TRACE(6),=CL6'TRACEX' PASS IT ON
NOTRACE  EQU   *
*        CHECK FOR 'LOGOFF' REQUEST
         SR    R15,R15        CLEAR FOR ICM
         ICM   R15,3,LOGOPT   WAS OPTION REQUESTED?
         BZ    NOLOG          NO, SKIP OPTION
         LA    R1,LOGOFF      ADDRESS OF COMMAND
         ST    R1,@CPPL       INTO CPPL FOR ISPF
         LA    R1,@CPPL       ADDRESS OF COMMAND
         LINK  EP=LOGOFF      EFFECT LOGOFF
NOLOG    EQU   *
RLSA     IKJRLSA @ANSWER      FREE PARSE STORAGE
         DROP  R11            DROP ADDRESSABILITY
*  PRE-LOAD RENT/REUS MODULES
         L     R1,16          CVT ADDRESS
         L     R1,0(R1)       OLD/NEW POINTER
         L     R1,4(R1)       OUR TCB ADDRESS
         L     R1,12(R1)      OUR TIOT ADDRESS
         LA    R1,24(R1)      BUMP PAST HEADER
         SR    R15,R15        CLEAR FOR ICM
NEXTENT  ICM   R15,3,0(R1)    IS THIS A VALID ENTRY?
         BZ    NOPRE          NO, NO PRELOAD FUNCTION
         CLC   4(8,R1),=CL8'PRELOAD' IS THIS OUR DD ENTRY?
         BE    SETPRE         YES, CONTINUE WITH PRELOAD
         AR    R1,R15         ADD SIZE OF ENTRY
         B     NEXTENT        CHECK NEXT ENTRY
SETPRE   LA    R10,@DCB       POINT TO DCB DSECT
         USING IHADCB,R10
         MVC   IHADCB(96),PRELOAD MOVE DCB TO WORKAREA
         OPEN  ((10))
         TM    DCBOFLGS,DCBOFOPN IS IT OPEN ?
         BZ    NOPRE
         L     R4,16          CVT ADDR
         L     R4,8(R4)       CVTLINK - SYS1.LINKLIB DCB (LINKLIST)
PREAAA   EQU   *
         GET   (10)
         CLI   0(R1),C'*'     COMMENT ?
         BE    PREAAA         YES - SKIP IT
         LR    R2,R1          ADDR OF RECORD
         LA    R3,@MBR        ADDR OF MEMBER NAME FOR LOAD
         MVC   @MBR,=8C' '    CLEAR
PREBBB   EQU   *
         CLI   0(R2),C' '     END OF MODULE NAME ?
         BE    PRECCC         YES - LOAD IT
         CLI   0(R2),C','     END OF MODULE NAME ?
         BE    PRECCC         YES - LOAD IT
         MVC   0(1,R3),0(R2)  MOVE MEMBER NAME, 1 BYTE AT A TIME
         LA    R2,1(R2)       BUMP
         LA    R3,1(R3)       BUMP
         B     PREBBB         MOVE NAME
PRECCC   EQU   *
         LA    R3,@MBR
         LOAD  EPLOC=(3),DCB=(4)
         MVC   @MBR,=8C' '    CLEAR
         CLC   0(2,R2),=C', ' ANY MORE ON THIS RECORD ?
         BE    PREAAA         NO - GET NEXT RECORD
         CLI   0(R2),C' '     LAST MEMBER ON LAST CARD ?
         BE    PREEND         YES - DONE
         LA    R2,1(R2)       BUMP PAST COMMA
         B     PREBBB         LOAD NEXT MEMBER
PREEND   EQU   *              EODAD FOR PRELOAD DCB
         CLOSE ((10))
         FREEPOOL (10)
NOPRE    EQU   *
         LA    R1,@CMD        ADDRESS OF COMMAND
         ST    R1,@CPPL       INTO CPPL FOR ISPF
         LA    R1,@CPPL       ADDRESS OF CPPL
         LINK  EP=ISPF        CALL SPF
*
EXIT     $EPILOG
         EJECT
***********************************************************************
*
*        CONSTANTS
*
***********************************************************************
PRELOAD  DCB   DDNAME=PRELOAD,DSORG=PS,MACRF=GL,EODAD=PREEND
LOGOFF   DC    AL2(16),AL2(6),CL16'LOGOFF  '
CMD      DC    AL2(40),AL2(4),CL50'ISPF PANEL(CMN@PRI) ' L(44)
IKJADCON DC    V(SPFPCL)      ADDRESS OF PARSE PDL/PCL
SPFPCL   IKJPARM
LOGOPT   IKJKEYWD
         IKJNAME 'LOGOFF'
TESTOPT  IKJKEYWD
         IKJNAME 'TEST'
         IKJNAME 'TESTX'
TRACEOPT IKJKEYWD
         IKJNAME 'TRACE'
         IKJNAME 'TRACEX'
         IKJENDP
         LTORG
         EJECT
***********************************************************************
*
*        WORK AREA DSECT AND TSO DSECTS
*
***********************************************************************
@        DSECT
@SAVE    DS    18F            REG SAVE AREA
@WORK    EQU   *              COMMAND AREA
@CPPL    DS    F              COMMAND ADDRESS
@CPPLUPT DS    F              UPT ADDRESS
@CPPLPSC DS    F              PSCB ADDRESS
@CPPLECT DS    F              ECT ADDRESS
@CMD     DS    CL50           COMMAND BUFFER
@TEST    EQU   @CMD+26        TEST OPTION
@TRACE   EQU   @CMD+33        TRACE OPTION
@PAD     DS    CL8            COMMAND PADDING
@ECB     DS    F              PARSE/ATTACH ECB
@ANSWER  DS    F              PARSE ANSWER AREA
@PPLUPT  DS    F              PARSE PARM LIST UPT
@PPLECT  DS    F              PARSE PARM LIST ECT
@PPLECB  DS    F              PARSE PARM LIST ECB
@PPLPCL  DS    F              PARSE PARM LIST PCL
@PPLANS  DS    F              PARSE PARM LIST ANSWER ->
@PPLCBUF DS    F              PARSE PARM LIST COMMAND ->
@MBR     DS    CL8            MEMBER NAME FOR LOAD
@SIZE    EQU   *-@WORK        SIZE OF WORKAREA
@DCB     EQU   *
         DCBD  DSORG=PS       DCB DSECT
         IKJCPPL
         END
./ ADD  NAME=SPF@MACS
1
 EACH SPF DIALOG MANAGER CONTAINS A BASIC SET OF CODE THAT IS COMMON
 TO ALL DIALOG MANAGERS. THESE FUNCTIONS HAVE BEEN CREATED IN A SERIES
 OF MACROS. THE FUNCTIONS ARE -

 $ALLOC     PRE-DEFINED FIELDS FOR DYNAMIC ALLOCATION
 $ISPCMDS   DEFINE VARIOUS CONSTANTS USED BY THE SPF INTERFACE ROUTINE
 SPFBRWSE   BUILD DSNAME WITH QUOTES AND INVOKE BROWSE
 SPFDSCB    OBTAIN THE FORMAT 1 DSCB FOR A DATA SET
 SPFDSN     TAKE A DSN FROM THE SCREEN AND EITHER REMOVE THE QUOTES
            OR ADD THE USER-PREFIX AND ISOLATE AN OPTIONAL MEMBER
            NAME.
 SPFDSPLY   DISPLAY A PANEL
 SPFDYNAM   DYNAMIC ALLOCATION/DE-ALLOCATION
 SPFEDIT    BUILD DSNAME WITH QUOTES AND INVOKE EDIT
 SPFJOBNM   UPDATE THE LAST CHARACTER OF THE JOBNAME ON A JOBCARD
 SPFPLS     READ/WRITE A PLS LIBRARY
 SPFPLT     COMBINE PROJECT, LIBRARY AND TYPE INTO A DSN WITH THE DOTS
 SPFSUB     SUBMIT A BATCH JOB
 SPFTEMP    BUILD A DATA SET NAME FROM ZTEMPF CHANGING THE LAST NAME
 SPFVDEF    DEFINE VARIABLES TO SPF
 SPFVGET    GET VARIABLES FROM THE SHARED OR PROFILE POOL
 SPFVPUT    PUT VARIABLES TO THE SHARED OR PROFILE POOL

 AFTER CONVERTING SERVERAL OF THE DIALOG MANAGERS TO THE NEW MACROS,
 THE NUMBER OF LINES OF CODE WAS REDUCED BY 30% TO 60%. THE TIME
 REQUIRED TO CODE A NEW DIALOG MANAGER IS SIGNIFICANTLY REDUCED BY
 USING THESE MACROS.

 THIS DOCUMENT ASSUMES THE READER IS FAMILIAR WITH WRITING SPF DIALOG
 MANAGERS, IT IS NOT INTENDED TO INSTRUCT THE READER ON HOW TO CODE
 SPF DIALOG MANAGER PROGRAMS.



 -----------------------------------------------------------------------

                              $ALLOC

 -----------------------------------------------------------------------
 THIS MACRO GENERATES THE PARAMETER LIST PASSED TO THE DYNAMIC
 ALLOCATION SUB-ROUTINE. THERE ARE NO OPERANDS ASSOCIATED WITH THIS
 MACRO. ONLY 1 OCCURRENCE OF THIS MACRO IS ALLOWED IN A PROGRAM.  THE
 LABEL ON THIS MACRO SHOULD BE 'DYNPARMS' SINCE IT IS REFERENCED BY
 OTHER SPF MACROS WITH THIS NAME.

   SYNTAX -

   DYNPARMS  $ALLOC

 -----------------------------------------------------------------------

                              SPFBRWSE

 -----------------------------------------------------------------------

 ADD QUOTES TO THE DSN IF REQUIRED AND INVOKE BROWSE.

   SYNTAX -

    SPFBRWSE DSNAME,MBR

    MEMBER NAME IS OPTIONAL

1
 -----------------------------------------------------------------------

                              SPFDSPLY

 -----------------------------------------------------------------------

 DISPLAY A PANEL OR MESSAGE.

    SPFDSPLY PANEL,MSG,CURSOR,NAME1,NAME2

    OPERANDS ARE ALL POSITIONAL AND OPTIONAL

    1 - MEMBER NAME OF THE PANEL TO BE DISPLAYED
    2 - MESSAGE NUMBER TO BE DISPLAYED
    3 - CURSOR FIELD NAME
    4 - LABEL TO GET CONTROL IF USER HITS ENTER (R15=0)
    5 - LABEL TO GET CONTROL IF USER HITS END (R15^=0)

    IN THE ABSENCE OF EITHER PARM 4 OR 5, OR BOTH, THE NEXT INSTRUCTION
    AFTER THE MACRO WILL BE EXECUTED.

    EXAMPLES -

 -----------------------------------------------------------------------

    DISPLAY A PANEL, MESSAGE, POSTION THE CURSOR AND PROVIDE LABELS
    FOR BRANCHING BASED ON THE VALUE OF R15

    SPFDSPLY CMNBB00,DYN000,CMNBBPR,EXIT050,ENTRY800

 -----------------------------------------------------------------------

    DISPLAY A PANEL AND POSTION THE CURSOR

    SPFDSPLY CMNBB00,,CMNBBPR

 -----------------------------------------------------------------------

    DISPLAY A MESSAGE OVER THE CURRENT PANEL AND BRANCH TO ENTRY800 IF
    THE USER HITS THE END KEY

    SPFDSPLY ,DYN000,,ENTRY800
1
 -----------------------------------------------------------------------

                              SPFDSCB

 -----------------------------------------------------------------------

 GENERATES CODE TO OBTAIN THE FORMAT 1 DSCB FOR A DATA SET.  THE CODE
 GENERATED WILL BE A 'LOCATE' FOLLOWED BY AN 'OBTAIN'.

 IF BOTH 'LOCATE' AND 'OBTAIN' ARE SUCCESSFUL, R15 WILL = 0. IF THE
 LOCATE FAILS (DATA SET NOT CATALOGED), R15 WILL = 4. IF THE 'LOCATE'
 IS SUCCESSFUL BUT THE 'OBTAIN' FAILS (DATA SET NOT FOUND ON VOLUME),
 R15 WILL = 8.

    OPERANDS ARE ALL POSITIONAL -
    1 - INPUT DATA SET FIELD NAME
    2 - NAME TO BE ASSIGNED TO THE TARGET AREA FOR THE DSCB, THE
        AREA WILL BE GENERATED BY THE MACRO, ALONG WITH THE 'IECSDSL1'
        MACRO TO ALLOW REFERENCING THE DATA BY FIELD NAME.

 SYNTAX -

    SPFDSCB DSNAME,FORMAT1


 -----------------------------------------------------------------------

                              SPFDSN

 -----------------------------------------------------------------------

 GENERATES CODE TO BUILD A VALID DATA SET NAME FROM AN INPUT FIELD,
 QUOTES ARE REMOVED, OR USER PREFIX IS ADDED. MEMBER NAME IS SEPARATED.
 UNBALANCED QUOTES WILL CAUSE R15 TO BE SET TO 4, OTHERWISE IT WILL BE
 SET TO ZERO. AN 'LTR   R15,R15'  WILL BE GENERATED AS THE LAST
 INSTRUCTION.

    OPERANDS ARE ALL POSITIONAL -
    1 - INPUT DATA SET FIELD NAME
    2 - TARGET DATA SET FIELD NAME
    3 - TARGET MEMBER FIELD NAME

 EXAMPLES -

    SPFDSN CMNBBDSN,DSNAME,MEMBER

    IF THE INPUT DSN DOES NOT CONTAIN A MEMBER NAME IN QUOTES, THE
    TARGET MEMBER FIELD WILL BE SET TO BLANKS.

    SPFDSN CMNBBDSN,DSNAME

    THE ABSENCE OF A TARGET MEMBER NAME WILL PRODUCE CODE ONLY TO
    EXTRACT A DSN, THE CODE TO FIND A MEMBER NAME IN PARENS WILL NOT
    BE GENERATED. IN THIS CASE, THE DSN EXTRACTED WILL STILL CONTAIN
    A MEMBER NAME IN PARENS IF A MEMBER NAME WAS IN THE INPUT DSN.
1
 -----------------------------------------------------------------------

                              SPFDYN

 -----------------------------------------------------------------------

 GENERATES CODE TO LINK TO THE DYNAMIC ALLOCATION SUBROUTINE.

   OPERANDS ARE ALL POSITIONAL -
   1 - DYANAMIC ALLOCATION PARAMETER LIST NAME (GENERATED BY $ALLOC)
   2 - NAME OF ROUTINE TO GET CONTROL IN EVENT OF ALLOC FAILURE, THE
       SPFDYN MACRO HAS ALREADY DISPLAYED THE ERROR MESSAGE.

   SPFDYN DYNPARMS,ERROR2

 -----------------------------------------------------------------------

                              SPFEDIT

 -----------------------------------------------------------------------

 ADD QUOTES TO THE DSN IF REQUIRED AND INVOKE EDIT.

   SYNTAX -

    SPFEDIT DSNAME,MBR

    MEMBER NAME IS OPTIONAL


 -----------------------------------------------------------------------

                              $ISPCMDS

 -----------------------------------------------------------------------

 DEFINES VARIOUS NAMES AND FIELDS USED BY THE DIALOG MANAGER FUNCTIONS

 SYNTAX -

 (LABEL)    $ISPCMDS

 -----------------------------------------------------------------------

                              SPFJOBNM

 -----------------------------------------------------------------------

 BUMPS THE JOBNAME SUFFIX IF THE USER-ID MATCHES THE JOBNAME.

   1 OPERAND, NAME OF THE JOB CARD FIELD

 SYNTAX -

   SPFJOBNM  CMNBBJC1
1
 -----------------------------------------------------------------------

                              SPFPLS

 -----------------------------------------------------------------------

 GENERATES CODE TO INVOKE THE PLS I/O SUB-ROUTINE (CMNCCS0) TO PERFORM
 PLS COMMANDS.

   OPERANDS ARE ALL POSITIONAL -
   1 - PLS DATA SET NAME FIELD
   2 - MEMBER NAME FIELD
   3 - TARGET PDS NAME FIELD
   4 - READ   -  ) WRITE               (RETREIVE A MEMBER FROM PLS)
       WRITE  -  ) DELETE  ) ADD       (ADD OR OVERLAY AN EXISTING MBR)
       DELETE -  ) DELETE              (DELETE A MEMBER FROM PLS)

 SYNTAX -

   SPFPLS PLSDSN,MBR,PDSDSN,READ
   SPFPLS PLSDSN,MBR,PDSDSN,WRITE
   SPFPLS PLSDSN,MBR,,DELETE

 -----------------------------------------------------------------------

                              SPFPLT

 -----------------------------------------------------------------------

 GENERATES CODE TO BUILD A DATA SET NAME FROM THE PROJECT, LIBRARY,
 AND TYPE FIELDS.

   OPERANDS ARE ALL POSITIONAL -
   1 - PROJECT FIELD NAME
   2 - LIBRARY FIELD NAME
   3 - TYPE FIELD NAME
   4 - TARGET FIELD NAME

 SYNTAX -

   SPFPLT CMNBBPRJ,CMNBBLIB,CMNBBTYP,DSNAME
1
 -----------------------------------------------------------------------

                              SPFTEMP

 -----------------------------------------------------------------------

 GENERATES CODE TO BUILD A DATA SET NAME FROM THE ZTEMPF DSN BY CHANGING
 THE LAST QUALIFIER.

   OPERANDS ARE ALL POSITIONAL -
   1 - INPUT DSN FIELD - DEFAULT IS 'ZTEMPF'
   2 - TARGET FIELD FOR NEW DSN
   3 - NEW LAST QUALIFIER

 SYNTAX -

   SPFTEMP ,TMPDSN,@F80

 -----------------------------------------------------------------------

                              SPFSUB

 -----------------------------------------------------------------------

 GENERATES CODE TO SUBMIT A JOB TO THE INTERNAL READER

   OPERANDS ARE ALL POSITIONAL -
   1 - DATA SET FIELD NAME
   2 - MEMBER FIELD NAME (OPTIONAL)
   3 - 4 BYTE AREA TO RETURN THE JES JOB NUMBER

 SYNTAX -

   SPFSUB DSNAME,MEMBER,CMNBBJNU
   SPFSUB DSNAME,,CMNBBJNU

 -----------------------------------------------------------------------

                              SPFVDEF

 -----------------------------------------------------------------------

 GENERATES CODE TO DEFINE VARIABLES TO SPF. IT WILL ALSO GENERATE
 'DC' (DEFINE CONSTANT) INSTRUCTIONS FOR ALL THE VARIABLES REQUESTED.
 IT WILL OPTIONALLY 'NOT' GENERATE THE 'DC'S IF 'DC=NO' IS CODED.
 ALL FIELDS MUST BE OF THE SAME LENGTH FOR EACH SPFVDEF, THE FIRST OPERA
 DENOTES THE FIELD LENGTH.

 OPERANDS -

   1 - FIELD LENGTH
   2 - FIELD NAMES

 SYNTAX -

   SPFVDEF 44,(CMNBBDSN,DSNAME,SAVEDSN)
   SPFVDEF 8,(CMNBBPRJ,CMNBBLIB,CMNBBTYP,ZPREFIX,ZUSER)
   SPFVDEF 1,(DYNTYPE),DC=NO

 THE NUMBER OF CHARACTERS CONTAINED IN OPERANDS MUST NOT EXCEED 255.
 THIS IS A RESTRICTION OF THE ASSEMBLER.
1
 -----------------------------------------------------------------------

                              SPFVGET/SPFVPUT

 -----------------------------------------------------------------------

 SYNTAX -

 GENERATES CODE TO GET/PUT VARIABLES FROM/TO EITHER THE SHARED OR
 PROFILE POOL.

   SPFVGET (CMNBBDSN,DSNAME,SAVEDSN,CMNBBPRJ,CMNBBLIB,CMNBBTYP),PROFILE
   SPFVGET (ZPREFIX,ZUSER),SHARED

   SPFVPUT (CMNBBDSN,DSNAME,SAVEDSN,CMNBBPRJ,CMNBBLIB,CMNBBTYP),PROFILE

 THE NUMBER OF CHARACTERS CONTAINED IN OPERANDS MUST NOT EXCEED 255.
 THIS IS A RESTRICTION OF THE ASSEMBLER.

1
  PROGRAM EXAMPLE -

 *----------------------------------------------------------------------
 *
 *        BOB BECKER MAR ,1981
 *
 *        SPF BACKGROUND COMPRESS DIALOG MANAGER
 *
 *----------------------------------------------------------------------
          EJECT
 CMNBA00  $PROLOG R12,R11
          EJECT
 *----------------------------------------------------------------------
 *        DEFINE VARIABLES
 *----------------------------------------------------------------------
 ENTRY020 DS    0H
          SPFVDEF 48,(CMNBAJC1,CMNBAJC2,CMNBAJC3)
          SPFVDEF 8,(CMNBAPRJ,CMNBALIB,CMNBATYP,CMNBAOUT,ZPREFIX,ZUSER,
                CMNB@JNU)
          SPFVDEF 44,(ZTEMPF,CMNBAOTH,SAVEOLIB)
          SPFVDEF 1,(DYNTYPE),DC=NO
          SPFVDEF 8,(DYNDDNM),DC=NO
          SPFVDEF 44,(DYNDSN),DC=NO
          SPFVDEF 4,(DYNERR),DC=NO
 EXIT020  EQU   *
          EJECT
 *----------------------------------------------------------------------
 *        GET PROFILE/SHARED VARIABLES
 *----------------------------------------------------------------------
 ENTRY030 DS    0H
          SPFVGET (ZPREFIX,ZUSER),SHARED
          SPFVGET (CMNBAPRJ,CMNBALIB,CMNBATYP,CMNBAOUT,CMNBAJC1,CMNBAJC2
                CMNBAJC3),PROFILE
 EXIT030  EQU   *
          EJECT
 *----------------------------------------------------------------------
 *        DISPLAY FIRST PANEL
 *----------------------------------------------------------------------
 ENTRY040 DS    0H
          SPFDSPLY CMNBA00,,CMNBATYP,,ENTRY810
 EXIT040  EQU   *
          EJECT
 *----------------------------------------------------------------------
 *        INTIALIZE FILE TAILORING
 *----------------------------------------------------------------------
 ENTRY050 DS    0H
          CALL  ISPLINK,(FTOPEN,TEMP),VL
 EXIT050  EQU   *
          EJECT
 *----------------------------------------------------------------------
 *        CHECK FOR OUTPUT CLASS
 *----------------------------------------------------------------------
 ENTRY070 DS    0H
          CLI   CMNBAOUT,C' '      CLASS SPECIFIED ?
          BNE   EXIT070            YES - OK
          SPFDSPLY ,CMN003,CMNBAOUT,ENTRY070,ENTRY810
 EXIT070  EQU   *
          EJECT
 *----------------------------------------------------------------------
 *        OTHER LIBRARY NAME
 *----------------------------------------------------------------------
 ENTRY080 DS    0H
          CLI   CMNBAOTH,C' '      ANY SPECIFIED ?
          BE    EXIT080            NO - OK
          CLI   CMNBAOTH,C'^'      SKIP THIS ONE ?
          BE    EXIT080            YES - OK
          SPFDSN CMNBAOTH,SAVEOLIB
          BZ    EXIT080            VALID NAME
          SPFDSPLY CMNBA00,CMN002,CMNBAOTH,ENTRY070,ENTRY810
 EXIT080  EQU   *
          EJECT
 *----------------------------------------------------------------------
 *        FILE TAILOR
 *----------------------------------------------------------------------
 ENTRY100 DS    0H
          MVC   PROC,=CL8'CMNBA00'
          CALL  ISPLINK,(FTINCL,PROC),VL
          SPFVGET (ZTEMPF),SHARED
 EXIT100  EQU   *
          EJECT
 *----------------------------------------------------------------------
 *        CLOSE THE FILE
 *----------------------------------------------------------------------
 ENTRY110 DS    0H
          CALL  ISPLINK,(FTCLOSE),VL
 EXIT110  EQU   *
          EJECT
 *----------------------------------------------------------------------
 *        SUBMIT THE JOB
 *----------------------------------------------------------------------
 ENTRY120 DS    0H
          SPFSUB ZTEMPF,,CMNB@JNU
 EXIT120  EQU   *
          EJECT
 *----------------------------------------------------------------------
 *        UPDATE THE JOB CARD
 *----------------------------------------------------------------------
 ENTRY700 DS    0H
          SPFJOBNM CMNBAJC1
 EXIT700  EQU   *
          EJECT
 *----------------------------------------------------------------------
 *        DISPLAY JOB SUBMITTED MESSAGE
 *----------------------------------------------------------------------
 ENTRY800 DS    0H
          MVC   CMNBAOTH,BLANKS    CLEAR
          SPFDSPLY CMNBA00,CMN005,CMNBATYP,,ENTRY810
 EXIT800  EQU   *
          B     ENTRY050
          EJECT
 *----------------------------------------------------------------------
 *        PUT PROFILE VARIABLES AND EXIT
 *----------------------------------------------------------------------
 ENTRY810 DS    0H
          SPFVPUT (CMNBAPRJ,CMNBALIB,CMNBATYP,CMNBAOUT,CMNBAJC1,CMNBAJC2
                CMNBAJC3),PROFILE
 EXIT810  EQU   *
          B     EOJ
          EJECT
 *----------------------------------------------------------------------
 *        END OF JOB
 *----------------------------------------------------------------------
 EOJ      DS    0H
          DELETE  EP=ALLOCRTN
          LA    R15,0
          $EPILOG
          EJECT
 *----------------------------------------------------------------------
 *        STORAGE AREAS
 *----------------------------------------------------------------------
 BLANKS   DC    CL100' '
 *----------------------------------------------------------------------
          EJECT
 SPFMACS  $ISPCMDS  FILES=YES
          EJECT
 DYNPARMS $ALLOC
          END
./ ADD  NAME=SPFBLDL
         MACRO
&NAME    SPFBLDL &IDS,&MBR
         LCLA  &X
&X       SETA  &SYSNDX
.*---------------------------------------------------------------------
.*       THIS CODE WILL VERIFY A MEMBER EXISTS IN A PDS
.*       R15 = 0  -  PDS AND MBR EXISTS
.*       R15 = 4  -  PDS NOT FOUND IN CATALOG
.*       R15 = 8  -  PDS EXISTS, MBR DOES NOT EXIST
.*---------------------------------------------------------------------
         XC    DATA&X,DATA&X      CLEAR TO ZEROS
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         MVI   DYNTYPE,C'A'       INDICATE ALLOCATE
         MVI   DYNRTDD,X'FF'      RETURN DDNAME
         MVI   DYNFREE,X'FF'      FREE=CLOSE
         MVC   DYNDSN,&IDS        DSNAME
         MVI   DYNDISP1,DYNSHR    DISP=SHR
         SPFDYNAM DYNPARMS        ALLOCATE IT
         CLC   DYNR15,=4C'0'      ALLOCATE OK ?
         BE    AAA&X              YES - OK
         LA    R15,4              SET RETURN CODE
         B     ZZZ&X              EXIT
AAA&X    EQU   *
         MVC   DCB&X+40(8),DYNRTDD   MOVE DDNAME TO DCB
         MVC   MBR&X,&MBR         MOVE MBR NAME TO BLDL LIST
         OPEN  DCB&X              OPEN THE PDS
         BLDL  DCB&X,LIST&X
         ST    R15,RC&X           SAVE RETURN CODE
         CLOSE DCB&X
         L     R15,RC&X           PICK UP BLDL RETURN CODE
         LTR   R15,R15            OK ?
         BZ    ZZZ&X              YES - EXIT
         LA    R15,8              NO - SET RETURN CODE
         B     ZZZ&X
LIST&X   DS    0F
         DC    H'1'
         DC    H'58'
MBR&X    DC    CL8' '
DATA&X   DC    XL50'00'
DCB&X    DCB   DDNAME=X,DSORG=PO,MACRF=R
RC&X     DC    F'0'
ZZZ&X    DS    0H
         MEND
./ ADD  NAME=SPFBRWSE
         MACRO
&NAME    SPFBRWSE &IDS,&MBR
         LCLA  &X,&LIDS
&X       SETA  &SYSNDX
&LIDS    SETA  L'&IDS
         MVI   BRO&X,C' '
         MVC   BRO&X+1(55),BRO&X
         CLI   &IDS,X'7D'             NAME IN QUOTES ?
         BE    CCC&X                  YES - USE IT AS IS
         MVI   BRO&X,X'7D'            NO - ADD A QUOTE
         MVC   BRO&X+1(&LIDS),&IDS    MOVE DSN
         LA    R1,BRO&X               START OF FIELD
         LA    R15,55                 MAX LENGTH
LPA&X    EQU   *
         CLI   0(R1),C' '             FIND END
         BE    AAA&X                  FOUND IT
         LA    R1,1(R1)               BUMP
         BCT   R15,LPA&X
AAA&X    EQU   *
         AIF   ('&MBR' EQ '').AAA
         MVI   0(R1),C'('             ADD A PAREN
         LA    R1,1(R1)               BUMP
         MVC   0(8,R1),&MBR           MOVE MBR NAME
LPB&X    EQU   *
         CLI   0(R1),C' '             FIND END OF MBR NAME
         BE    BBB&X                  FOUND IT
         LA    R1,1(R1)               BUMP
         BCT   R15,LPB&X
BBB&X    EQU   *
         MVI   0(R1),C')'             ADD A PAREN
         LA    R1,1(R1)               BUMP
.AAA     ANOP
         MVI   0(R1),X'7D'            ADD ENDING QUOTE
         B     DDD&X
CCC&X    EQU   *
         MVC   BRO&X.(&LIDS),&IDS     MOVE DSN AS IS
DDD&X    EQU   *
         CALL  ISPLINK,(BROWSE,BRO&X),VL
         B     EEE&X
BRO&X    DC    CL56' '
EEE&X    DS    0H
         MEND
./ ADD  NAME=SPFCMDS
         MACRO
&NAME    SPFCMDS &TABLES=NO,&FILES=NO
*----------------------------------------------------------------------
*
*----------------------------------------------------------------------
&NAME    DS    0D
SPFA     EQU   *
*        DISPLAY SERVICES
DISPLAY  DC    CL8'DISPLAY'
TBDISPL  DC    CL8'TBDISPL'
         AIF   ('&TABLES' EQ 'NO').NT
*        TABLE SERVICES - GENERAL
TBCREATE DC    CL8'TBCREATE'
TBOPEN   DC    CL8'TBOPEN'
TBQUERY  DC    CL8'TBQUERY'
TBSAVE   DC    CL8'TBSAVE'
TBCLOSE  DC    CL8'TBCLOSE'
TBEND    DC    CL8'TBEND'
TBERASE  DC    CL8'TBERASE'
*        TABLE SERVICES - ROW OPERATIONS
TBADD    DC    CL8'TBADD'
TBDELETE DC    CL8'TBDELETE'
TBGET    DC    CL8'TBGET'
TBPUT    DC    CL8'TBPUT'
TBMOD    DC    CL8'TBMOD'
TBEXIST  DC    CL8'TBEXIST'
TBSCAN   DC    CL8'TBSCAN'
TBSARG   DC    CL8'TBSARG'
TBTOP    DC    CL8'TBTOP'
TBBOTTOM DC    CL8'TBBOTTOM'
TBSKIP   DC    CL8'TBSKIP'
TBVCLEAR DC    CL8'TBVCLEAR'
.NT      ANOP
         AIF   ('&FILES' EQ 'NO').NF
*        FILE TAILORING SERVICES
FTOPEN   DC    CL8'FTOPEN'
FTINCL   DC    CL8'FTINCL'
FTCLOSE  DC    CL8'FTCLOSE'
FTERASE  DC    CL8'FTERASE'
.NF      ANOP
*        VARIABLE SERVICES
VGET     DC    CL8'VGET'
VPUT     DC    CL8'VPUT'
VDEFINE  DC    CL8'VDEFINE'
VDELETE  DC    CL8'VDELETE'
VCOPY    DC    CL8'VCOPY'
VREPLACE DC    CL8'VREPLACE'
VRESET   DC    CL8'VRESET'
*        OTHER SERVICES
SELECT   DC    CL8'SELECT'
CONTROL  DC    CL8'CONTROL'
BROWSE   DC    CL8'BROWSE'
EDIT     DC    CL8'EDIT'
LOG      DC    CL8'LOG'
*        FUNCTIONS/MODES
CANCEL   DC    CL8'CANCEL'
DISABLE  DC    CL8'DISABLE'
ENABLE   DC    CL8'ENABLE'
END      DC    CL8'END'
ENTER    DC    CL8'ENTER'
ERRORS   DC    CL8'ERRORS'
LINE     DC    CL8'LINE'
LOCATE   DC    CL8'LOCATE'
MOVE     DC    CL8'MOVE'
NEWCOPY  DC    CL8'NEWCOPY'
NOFT     DC    CL8'NOFT'
NONDISPL DC    CL8'NONDISPL'
NOWRITE  DC    CL8'NOWRITE'
PROFILE  DC    CL8'PROFILE'
REFRESH  DC    CL8'REFRESH'
REPLCOPY DC    CL8'REPLCOPY'
RETURN   DC    CL8'RETURN'
SHARED   DC    CL8'SHARED'
SPLIT    DC    CL8'SPLIT'
SM       DC    CL8'SM'
TEMP     DC    CL8'TEMP'
WRITE    DC    CL8'WRITE'
*        FORMATS
CHAR     DC    CL8'CHAR'
FIXED    DC    CL8'FIXED'
BIT      DC    CL8'BIT'
HEX      DC    CL8'HEX'
*
*        PRE-DEFINED FIELDS FOR CALLS TO ISPLINK
*
PANEL    DC    CL8' '
PROC     DC    CL8' '
MSG      DC    CL8' '
CURSOR   DC    CL8' '
OPT      DC    CL8' '
SPFRC    DC    CL4' '
*
*
SPFB     EQU   *
SPFLEN   EQU   (SPFB-SPFA)
         MEND
./ ADD  NAME=SPFDSCB
         MACRO
&NAME    SPFDSCB &IDS,&AREA
         LCLA  &X
&X       SETA  &SYSNDX
         LOCATE LOC&X             YES - LOCATE CATALOG ENTRY
         LTR   R15,R15            CATALOGED ?
         BZ    AAA&X              YES - OK
         LA    R15,4              NO - SET RC=4
         B     BBB&X
AAA&X    EQU   *
         MVC   VOL&X,&AREA+6      PICK UP VOL&X FROM LOCATE
         OBTAIN OBT&X             GET THE FORMAT 1 DSCB
         LTR   R15,R15            DATA SET FOUND ?
         BZ    BBB&X              YES - OK
         LA    R15,8              NO - SET RC=8
         B     BBB&X
*----------------------------------------------------------------------
LOC&X    CAMLST  NAME,&IDS,,&AREA
OBT&X    CAMLST  SEARCH,&IDS,VOL&X,&AREA
*----------------------------------------------------------------------
VOL&X    DC   CL6' '
&AREA    DS   0D
         ORG  &AREA-44           LINE UP IECSDSL1 MACRO WITH THE AREA
         IECSDSL1 (1)
         ORG  IECSDSL1+44
         DC   265C' '            DC FOR AREA
BBB&X    DS   0H
         MEND
./ ADD  NAME=SPFDSN
         MACRO
&NAME    SPFDSN  &IDS,&ODS,&MBR
         LCLA  &X,&LODS,&LODS1M,&LMBR1
&X       SETA  &SYSNDX
&LODS    SETA  L'&ODS
&LODS1M  SETA  L'&ODS-1
&LIDS    SETA  L'&IDS
&LIDS1M  SETA  L'&IDS-1
         AIF   ('&MBR' EQ '').AAA
&LMBR1   SETA  L'&MBR-1
.AAA     ANOP
         LA    R15,0              INITIALIZE RETURN CODE
         MVI   &ODS,C' '          CLEAR THE
         MVC   &ODS+1(&LODS1M),&ODS  TARGET FIELD
         CLI   &IDS,X'7D'         NAME IN QUOTES ?
         BNE   BBB&X              NO - ADD USER ID
         AIF   ('&LIDS1M' GT '&LODS').BBB
         MVC   &ODS.(&LIDS1M),&IDS+1 YES - SKIP QUOTE
         AGO   .CCC
.BBB     ANOP
         MVC   &ODS,&IDS+1        YES - SKIP QUOTE
.CCC     ANOP
         LA    R1,&ODS            START OF NAME
         LA    R14,&LODS1M        SEARCH LIMIT
LPA&X    EQU *
         CLI   0(R1),X'7D'        FIND ENDING QUOTE
         BE    AAA&X              FOUND IT
         LA    R1,1(R1)           BUMP
         BCT   R14,LPA&X          CHECK NEXT BYTE
         LA    R15,4              NO ENDING QUOTE, EXIT WITH RC=4
         B     GGG&X
AAA&X    EQU *
         MVI   0(R1),C' '         REMOVE QUOTE
         B     DDD&X              CHECK FOR MBR NAME
BBB&X    EQU *
         MVC   &ODS.(8),ZPREFIX   MOVE USER PREFIX
         LA    R1,&ODS            START OF DSN
LPB&X    EQU *
         CLI   0(R1),C' '         FIND END OF PREFIX
         BE    CCC&X              FOUND IT
         LA    R1,1(R1)           BUMP
         B     LPB&X              CHECK NEXT BYTE
CCC&X    EQU *
         MVI   0(R1),C'.'         ADD A DOT
         MVC   1(34,R1),&IDS      MOVE REST OF NAME
DDD&X    EQU *
         AIF   ('&MBR' EQ '').END
         LA    R1,&ODS            START OF DSN
         LA    R14,&LODS          LIMIT OF SEARCH
LPC&X    EQU *
         CLI   0(R1),C'('         FIND MEMBER NAME
         BE    EEE&X              FOUND IT
         LA    R1,1(R1)           BUMP
         BCT   R14,LPC&X          CHECK NEXT BYTE
         MVI   &MBR,C' '          NO MEMBER -
         MVC   &MBR+1(&LMBR1),&MBR   SET TARGET FIELD TO BLANKS
         B     GGG&X
EEE&X    EQU *
         LA    R14,&MBR           START OF TARGET FIELD
         MVI   &MBR,C' '          CLEAR THE
         MVC   &MBR+1(&LMBR1),&MBR  TARGET FIELD TO BLANKS
LPD&X    EQU *
         MVI   0(R1),C' '         CLEAR
         LA    R1,1(R1)           BUMP
         CLI   0(R1),C')'         END OF MEMBER ?
         BE    FFF&X              YES - OK
         MVC   0(1,R14),0(R1)     MOVE MBR NAME, 1 AT A TIME
         LA    R14,1(R14)         BUMP MBR NAME
         B     LPD&X
FFF&X    EQU *
         MVI   0(R1),C' '         CLEAR
.END     ANOP
GGG&X    EQU *
         LTR   R15,R15
         MEND
./ ADD  NAME=SPFDSPLY
         MACRO
&NAME    SPFDSPLY &PAN,&MSG,&CUR,&ZERO,&NZERO
         LCLC  &P,&M,&C
         AIF   ('&CUR' EQ '').NOCUR
         MVC   CURSOR,=CL8'&CUR'
&C       SETC  'CURSOR'
         AIF   ('&PAN' EQ '').AAA
         MVC   PANEL,=CL8'&PAN'
&P       SETC  'PANEL'
.AAA     ANOP
         AIF   ('&MSG' EQ '').BBB
         MVC   MSG,=CL8'&MSG'
&M       SETC  'MSG'
.BBB     ANOP
         CALL  ISPLINK,(DISPLAY,&P,&M,&C),VL
         AGO   .XXX
.NOCUR   ANOP
         AIF   ('&MSG' EQ '').NOMSG
         MVC   MSG,=CL8'&MSG'
&M       SETC  'MSG'
         AIF   ('&PAN' EQ '').CCC
         MVC   PANEL,=CL8'&PAN'
&P       SETC  'PANEL'
.CCC     ANOP
         CALL  ISPLINK,(DISPLAY,&P,&M),VL
         AGO   .XXX
.NOMSG   ANOP
         AIF   ('&PAN' EQ '').NOPAN
         MVC   PANEL,=CL8'&PAN'
&P       SETC  'PANEL'
         CALL  ISPLINK,(DISPLAY,&P),VL
         AGO   .XXX
.NOPAN   ANOP
         MNOTE 8,'*** PANEL, MESSAGE, OR CURSOR NOT SPECIFIED'
         AGO   .ZZZ
.XXX     ANOP
         LTR   R15,R15
         AIF   ('&NZERO' EQ '').YYY
         BNZ   &NZERO
.YYY     ANOP
         AIF   ('&ZERO' EQ '').ZZZ
         BZ    &ZERO
.ZZZ     ANOP
         MEND
./ ADD  NAME=SPFDYNAM
         MACRO
&NAME    SPFDYNAM &DYN,&ERR
         LCLA  &X
&X       SETA  &SYSNDX
*----------------------------------------------------------------------
*
*        DYNAMIC ALLOCATION
*
*        IF THE DYNAMIC ALLOCATION IS COMPLETED SUCCESSFULLY, THE
*        NEXT INSTRUCTION AFTER THIS MACRO WILL BE EXECUTED.
*        IF DYNAMIC ALLOCATION IS NOT SUCCESSFUL, THIS CODE WILL
*        DISPLAY AN ERROR MESSAGE ON THE SCREEN. UPON RETURN FROM THE
*        DISPLAY, THIS ROUTINE WILL BRANCH TO ADDRESS SPECIFIED IN THE
*        SECOND OPERAND OF THIS MACRO.
*
*----------------------------------------------------------------------
AAA&X    EQU *
         ICM   R15,15,DYNEPA      DYN ALLOC SUB-ROUTINE
         BNZ   BBB&X              ALREADY LOADED
         LOAD  EP=ALLOCRTN
         ST    R0,DYNEPA          SAVE EPA
         LR    R15,R0             COPY EPA TO R15
BBB&X    EQU *
         LA    R1,=A(&DYN)        PARM LIST
         BALR  R14,R15            BRANCH TO ALLOCATION ROUTINE
NP1&X    NOP   CCC&X              ACTIVATED FOR 0410 ERROR
NP2&X    NOP   DDD&X              ACTIVATED FOR 0410 ERROR
         CLC   DYNR15,=4C'0'      ANY ERRORS ?
         BE    YYY&X              NO - OK
*
         CLC   DYNERR,=C'0410'    DDNAME UNAVAILABLE ?
         BNE   EEE&X              NO - DECODE OTHER COMMON ERRORS
         MVI   NP1&X+1,X'F0'      SET TO BRANCH
         MVC   SDY&X.(DYNLL),&DYN SAVE ORIGINAL PARMS
         MVC   SDD&X,DYNDDNM      SAVE DDNAME
         XC    &DYN.(DYNLL),&DYN  CLEAR
         MVI   DYNLEN,DYNLL       LENGTH
         MVI   DYNTYPE,C'D'       ATTEMPT TO DE-ALLOCATE
         MVC   DYNDDNM,SDD&X      DDNAME
         MVI   DYNUNALC,X'FF'     DE-ALLOC EVEN IF 'PERM' BIT IS ON
         B     AAA&X              DE-ALLOCATE
CCC&X    EQU   *
         MVI   NP1&X+1,X'00'      SET TO NOP
         MVI   NP2&X+1,X'F0'      SET TO BRANCH
         MVC   &DYN.(DYNLL),SDY&X RESTORE ORIGINAL PARMS
         B     AAA&X              TRY ALLOCATING AGAIN
DDD&X    EQU   *
         MVI   NP2&X+1,X'00'      SET TO NOP
         CLC   DYNR15,=4C'0'      ALLOCATE OK ?
         BE    YYY&X              YES - OK
EEE&X    EQU   *
         AIF   ('&ERR' EQ '').BBB
         MVC   MSG,=CL8'DYN002'
         CLC   DYNERR,=C'0210'    DATA SET IN USE ?
         BE    FFF&X              DISPLAY MESSAGE
         MVC   MSG,=CL8'DYN003'
         CLC   DYNERR,=C'031C'    INVALID MEMBER NAME ?
         BE    FFF&X              DISPLAY MESSAGE
         MVC   MSG,=CL8'DYN001'
         CLC   DYNERR,=C'0320'    INVALID DSNAME ?
         BE    FFF&X              DISPLAY MESSAGE
         MVC   MSG,=CL8'DYN004'
         CLC   DYNERR,=C'0330'    MBR SPECIFIED, DSN NOT A PDS
         BE    FFF&X              DISPLAY MESSAGE
         MVC   MSG,=CL8'DYN005'
         CLC   DYNERR,=C'0440'    DSN NOT FOUND ?
         BE    FFF&X              DISPLAY MESSAGE
         MVC   MSG,=CL8'DYN000'   DISPLAY ERROR CODES
FFF&X    EQU   *
         CALL  ISPLINK,(DISPLAY,,MSG),VL
         B     &ERR
.BBB     ANOP
YYY&X    EQU   *
         B     ZZZ&X
SDY&X    DC    XL200'00'
SDD&X    DC    CL8' '
ZZZ&X    DS    0H
*----------------------------------------------------------------------
         MEND
./ ADD  NAME=SPFEDIT
         MACRO
&NAME    SPFEDIT &IDS,&MBR
         LCLA  &X,&LIDS
&X       SETA  &SYSNDX
&LIDS    SETA  L'&IDS
         MVI   EDT&X,C' '
         MVC   EDT&X+1(55),EDT&X
         CLI   &IDS,X'7D'             NAME IN QUOTES ?
         BE    CCC&X                  YES - USE IT AS IS
         MVI   EDT&X,X'7D'            NO - ADD A QUOTE
         MVC   EDT&X+1(&LIDS),&IDS    MOVE DSN
         LA    R1,EDT&X               START OF FIELD
         LA    R15,55                 MAX LENGTH
LPA&X    EQU   *
         CLI   0(R1),C' '             FIND END
         BE    AAA&X                  FOUND IT
         LA    R1,1(R1)               BUMP
         BCT   R15,LPA&X
AAA&X    EQU   *
         AIF   ('&MBR' EQ '').AAA
         MVI   0(R1),C'('             ADD A PAREN
         LA    R1,1(R1)               BUMP
         MVC   0(8,R1),&MBR           MOVE MBR NAME
LPB&X    EQU   *
         CLI   0(R1),C' '             FIND END OF MBR NAME
         BE    BBB&X                  FOUND IT
         LA    R1,1(R1)               BUMP
         BCT   R15,LPB&X
BBB&X    EQU   *
         MVI   0(R1),C')'             ADD A PAREN
         LA    R1,1(R1)               BUMP
.AAA     ANOP
         MVI   0(R1),X'7D'            ADD ENDING QUOTE
         B     DDD&X
CCC&X    EQU   *
         MVC   EDT&X.(&LIDS),&IDS     MOVE DSN AS IS
DDD&X    EQU   *
         CALL  ISPLINK,(EDIT,EDT&X),VL
         B     EEE&X
EDT&X    DC    CL56' '
EEE&X    DS    0H
         MEND
./ ADD  NAME=SPFJOBNM
         MACRO
&NAME    SPFJOBNM &CRD
         LCLA  &X
&X       SETA  &SYSNDX
*----------------------------------------------------------------------
*        UPDATE THE JOB CARD
*----------------------------------------------------------------------
         LA    R1,ZUSER           ADDR OF USER-ID
         LA    R14,7              MAX LENGTH
LPA&X    EQU   *
         CLI   0(R1),C' '         END ?
         BE    AAA&X              YES - OK
         LA    R1,1(R1)           BUMP
         BCT   R14,LPA&X
AAA&X    EQU   *
         LA    R15,6              MAX-1
         SR    R15,R14            LENGTH OF ID
         EX    R15,CLCI&X         JOBNAME = TO USER-ID
         BNE   FFF&X              NO - OK
         LA    R1,&CRD+2          JOBCARD
         LA    R1,1(R1,R15)       BUMP TO LAST CHARACTER
         CLI   0(R1),C'9'         IS IT 9 ?
         BNE   BBB&X              NO - OK
         MVI   0(R1),C'0'         YES - SET TO ZERO
         B     FFF&X
BBB&X    EQU   *
         CLI   0(R1),C'I'         IS IT I ?
         BNE   CCC&X              NO - OK
         MVI   0(R1),C'J'         YES - SET TO J
         B     FFF&X
CCC&X    EQU   *
         CLI   0(R1),C'R'         IS IT R ?
         BNE   DDD&X              NO - OK
         MVI   0(R1),C'S'         YES - SET TO S
         B     FFF&X
DDD&X    EQU   *
         CLI   0(R1),C'Z'         IS IT Z ?
         BNE   EEE&X              NO - OK
         MVI   0(R1),C'A'         YES - SET TO A
         B     FFF&X
EEE&X    EQU   *
         XR    R14,R14
         IC    R14,0(R1)          PICK UP CHARACTER
         LA    R14,1(R14)         ADD 1
         STC   R14,0(R1)          REPLACE IT
         B     FFF&X
CLCI&X   CLC   &CRD+2(0),ZUSER
FFF&X    EQU   *
         MEND
./ ADD  NAME=SPFPLS
         MACRO
&NAME    SPFPLS &PLS,&MBR,&PDS,&IO,&SEQ
         LCLA  &X
&X       SETA  &SYSNDX
         MVC   IO&X,=CL8'&IO'     PLS CONTROL
         ICM   R15,15,PLSEPA      PICK UP EPA OF SEQ LIB MNGR
         BNZ   AAA&X              ALREADY LOADED
         LOAD  EP=CMNCCS0         LOAD LIBRARY MGR FOR SEQ FILE
         ST    R0,PLSEPA          SAVE EPA
         LR    R15,R0
AAA&X    EQU   *
         LA    R1,PARM&X          ADDR OF PARMS
         BALR  R14,R15            LINK TO PLS
         B     ZZZ&X
IO&X     DC    CL8' '
PARM&X   DS    0F
         AIF   ('&SEQ' EQ 'SEQ').AAA
         DC    X'80'
         AGO   .BBB
.AAA     ANOP
         DC    X'00'
.BBB     ANOP
         AIF   ('&PDS' EQ '').CCC
         DC    AL3(&PLS)           LIBRARY MANAGER DSN
         DC    A(&MBR)             MEMBER
         DC    A(&PDS)             TARGET DATA SET
         DC    A(IO&X)             READ/WRITE
         AGO   .DDD
.CCC     ANOP
         DC    AL3(&PLS)           LIBRARY MANAGER DSN
         DC    A(&MBR)             MEMBER
         DC    A(0)                ZERO PARM
         DC    A(IO&X)             READ/WRITE
.DDD     ANOP
ZZZ&X    DS    0H
         MEND
./ ADD  NAME=SPFPLT
         MACRO
&NAME    SPFPLT  &PRJ,&LIB,&TYP,&ODS
         LCLA  &LODS1M,&X
&LODS1M  SETA  L'&ODS-1
&X       SETA  &SYSNDX
*----------------------------------------------------------------------
*
*        PROJECT LIBRARY TYPE
*
*----------------------------------------------------------------------
         MVI   &ODS,C' '          CLEAR FIELD
         MVC   &ODS+1(&LODS1M),&ODS   CLEAR FIELD
         LA    R1,&ODS            START OF DSNAME
         MVC   0(8,R1),&PRJ       MOVE FIRST QUALIFIER
LPA&X    EQU   *
         CLI   0(R1),C' '         END OF DATA ?
         BE    AAA&X              YES - OK
         LA    R1,1(R1)           NO - FIND END
         B     LPA&X
AAA&X    EQU   *
         MVI   0(R1),C'.'         ADD DOT
         LA    R1,1(R1)           BUMP
         MVC   0(8,R1),&LIB       MOVE LIB
LPB&X    EQU   *
         CLI   0(R1),C' '         END OF DATA ?
         BE    BBB&X              YES - OK
         LA    R1,1(R1)           NO - FIND END
         B     LPB&X
BBB&X    EQU   *
         MVI   0(R1),C'.'         ADD DOT
         LA    R1,1(R1)           BUMP
         MVC   0(8,R1),&TYP       MOVE TYPE TO DSN
         MEND
./ ADD  NAME=SPFSTAI
         MACRO
&NAME    SPFSTAI &RC=16
&NAME    DS    0H
         LA    15,&RC      SET RETURN CODE
         BR    14          RETURN TO STAI HANDLER
         MEND
./ ADD  NAME=SPFSUB
         MACRO
&NAME    SPFSUB  &DSN,&MBR,&JNU
         LCLA  &X
&X       SETA  &SYSNDX
*----------------------------------------------------------------------
*        ALLOCATE THE INPUT DATA SET
*----------------------------------------------------------------------
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         MVI   DYNTYPE,C'A'       ALLOCATE
         MVI   DYNRTDD,X'FF'      RETURN DDNAME
         MVI   DYNDISP1,DYNSHR    DISP=SHR
         MVC   DYNDSN,&DSN        DSNAME
         AIF   ('&MBR' EQ '').AAA
         MVC   DYNMBR,&MBR        MOVE MEMBER NAME
.AAA     ANOP
         BAL   R14,FFF&X
         MVC   INDD&X,DYNRTDD     SAVE DDNAME
*----------------------------------------------------------------------
*        ALLOCATE THE INTRDR FOR OUTPUT
*----------------------------------------------------------------------
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL
         MVI   DYNTYPE,C'A'       ALLOCATE
         MVI   DYNRTDD,X'FF'      RETURN DDNAME
         MVI   DYNSYSOU,C'A'      CLASS=A
         MVC   DYNSPGNM,=CL8'INTRDR'  INTERNAL READER
         MVI   DYNRECFM,DYNF      RECFM=F
         MVC   DYNBLKSZ,=H'80'    BLKSIZE=80
         BAL   R14,FFF&X          ALLOCATE IT
         MVC   OTDD&X,DYNRTDD     SAVE DDNAME
*----------------------------------------------------------------------
*        SUBMIT THE JOB
*----------------------------------------------------------------------
         MVC   IDCB&X+40(8),INDD&X   MOVE DDNAME TO DCB
         MVC   OACB&X+40(8),OTDD&X   MOVE DDNAME TO ACB
         OPEN  (IDCB&X,,OACB&X)
LPA&X    EQU      *
         GET   IDCB&X,JCL&X       GET INPUT RECORD
         PUT   RPL=RPL&X          PUT TO INTRDR
         B     LPA&X              GET NEXT RECORD
AAA&X    EQU   *                  EODAD FOR IDCB&X
         ENDREQ  RPL=RPL&X
         MVC   &JNU,RPL&X+60      SAVE JOBNUMBER
         CLOSE (IDCB&X,,OACB&X)
         FREEPOOL  IDCB&X
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         MVI   DYNTYPE,C'D'       DE-ALLOCATE
         MVC   DYNDDNM,INDD&X     DDNAME - INPUT
         BAL   R14,FFF&X          FREE INPUT FILE
         MVC   DYNDDNM,OTDD&X     DDNAME - INTRDR
         BAL   R14,FFF&X          FREE INTRDR
         LA    R15,0              SET RC=0
         B     ZZZ&X              EXIT
FFF&X    DS    0H                 ALLOCATE/DE-ALLOCATE ROUTINE
         ST    R14,STR&X          SAVE R14
         SPFDYNAM DYNPARMS
         CLC   DYNERR,=4C'0'      ANY ERRORS ?
         BNE   GGG&X              YES - SET RC=4
         L     R14,STR&X          RESTORE R14
         BR    R14                RETURN TO CALLING ROUTINE
GGG&X    EQU   *
         LA    R15,4              SET RC=4
         B     ZZZ&X              EXIT
IDCB&X   DCB   DDNAME=X,DSORG=PS,MACRF=GM,EODAD=AAA&X
OACB&X   ACB   DDNAME=X,MACRF=(ADR,SEQ,OUT)
RPL&X    RPL   ACB=OACB&X,RECLEN=80,OPTCD=(ADR,SEQ,SYN,NUP),           X
               AREA=JCL&X,AREALEN=80
JCL&X    DC    CL80' '
INDD&X   DC    CL8' '
OTDD&X   DC    CL8' '
STR&X    DC    F'0'
ZZZ&X    DS    0H
         LTR   R15,R15
         MEND
./ ADD  NAME=SPFTAILR
         MACRO
&NAME    SPFTAILR &PROC
         LCLA  &X
&X       SETA  &SYSNDX
         MVC   PROC,=CL8'&PROC'
         CALL  ISPLINK,(FTOPEN,TEMP),VL
         CALL  ISPLINK,(FTINCL,PROC),VL
         CALL  ISPLINK,(FTCLOSE),VL
         MEND
./ ADD  NAME=SPFTEMP
         MACRO
&NAME    SPFTEMP &IDS,&ODS,&QUAL
         LCLA  &LODS,&LODS1M,&X
         LCLC  &INDS
&LODS    SETA  L'&ODS
&LODS1M  SETA  L'&ODS-1
&X       SETA  &SYSNDX
&INDS    SETC  '&IDS'
         AIF   ('&IDS' NE '').AAA
&INDS    SETC  'ZTEMPF'
.AAA     ANOP
         MVI   &ODS,C' '          CLEAR THE
         MVC   &ODS+1(&LODS1M),&ODS  TARGET FIELD
         MVC   &ODS,&INDS         MOVE DSN TO TARGET
         LA    R1,&ODS
LPA&X    EQU   *
         CLI   0(R1),C'.'         FIND FIRST DOT
         BE    AAA&X              FOUND IT
         LA    R1,1(R1)           BUMP
         B     LPA&X
AAA&X    EQU   *
         LA    R1,1(R1)           BUMP
LPB&X    EQU   *
         CLI   0(R1),C'.'         FIND SECOND DOT
         BE    BBB&X              FOUND IT
         LA    R1,1(R1)           BUMP
         B     LPB&X
BBB&X    EQU   *
         LA    R1,1(R1)           BUMP PAST DOT
         MVC   0(8,R1),=CL8'&QUAL'  MOVE LAST QUALIFIER
         MEND
./ ADD  NAME=SPFVDEF
         MACRO
&NAME    SPFVDEF &LEN,&FLDS,&TYPE=CHAR,&DC=YES
         GBLC  &FIRST
         LCLC  &AA
         LCLA  &X,&A,&B,&ATTRN
&X       SETA  &SYSNDX
         AIF   ('&FIRST' EQ 'NO').AAA
&FIRST   SETC  'NO'
         CNOP  0,4
         B     *+8
ISPLEN   DC    A(0)       LENGTH FIELD
.AAA     ANOP
&ATTRN   SETA  N'&FLDS
         MVC   ISPLEN,=A(&LEN)
         CALL  ISPLINK,(VDEFINE,FLDS&X,&FLDS(&B+1),&TYPE,ISPLEN),VL
         B     SYS&X
         AIF   (&ATTRN GT 1).BBB
FLDS&X   DC    CL10'(&FLDS(&B+1))'
         AGO   .FFF
.BBB     ANOP
FLDS&X   DC    CL10'(&FLDS(&B+1)'
         AGO   .DDD
&B       SETA  0-1
         AGO   .END
.CCC     AIF   ('&FLDS(&B+1)' EQ '').DDD
&AA      SETC  '&FLDS(&B+1)'
         DC    CL9'&FLDS(&B+1)'
.DDD     AIF   (&B+2 EQ &ATTRN).EEE
&B       SETA  &B+1
         AGO   .CCC
.EEE     ANOP
         DC    CL9'&FLDS(&B+2))'
*-------------------------------------------------------------------
.FFF     ANOP
         AIF   ('&DC' EQ 'NO').END
&B       SETA  0
&FLDS(&B+1)  DC  CL&LEN' '
         AIF   (&ATTRN GT 1).III
         AGO   .END
.HHH     AIF   ('&FLDS(&B+1)' EQ '').III
&AA      SETC  '&FLDS(&B+1)'
&FLDS(&B+1)  DC  CL&LEN' '
.III     AIF   (&B+2 EQ &ATTRN).JJJ
&B       SETA  &B+1
         AGO   .HHH
.JJJ     ANOP
&FLDS(&B+2)  DC  CL&LEN' '
.END     ANOP
SYS&X    DS    0H
         MEND
./ ADD  NAME=SPFVGET
         MACRO
&NAME    SPFVGET &FLDS,&TYPE
         LCLC  &AA
         LCLA  &X,&A,&B,&ATTRN
&X       SETA  &SYSNDX
&ATTRN   SETA  N'&FLDS
         CALL  ISPLINK,(VGET,FLDS&X,&TYPE),VL
         B     SYS&X
         AIF   (&ATTRN GT 1).BBB
FLDS&X   DC    CL10'(&FLDS(&B+1))'
         AGO   .END
.BBB     ANOP
FLDS&X   DC    CL10'(&FLDS(&B+1)'
         AGO   .DDD
&B       SETA  0-1
         AGO   .END
.CCC     AIF   ('&FLDS(&B+1)' EQ '').DDD
&AA      SETC  '&FLDS(&B+1)'
         DC    CL9'&FLDS(&B+1)'
.DDD     AIF   (&B+2 EQ &ATTRN).EEE
&B       SETA  &B+1
         AGO   .CCC
.EEE     ANOP
         DC    CL9'&FLDS(&B+2))'
.END     ANOP
SYS&X    DS    0H
         MEND
./ ADD  NAME=SPFVPUT
         MACRO
&NAME    SPFVPUT &FLDS,&TYPE
         LCLC  &AA
         LCLA  &X,&A,&B,&ATTRN
&X       SETA  &SYSNDX
&ATTRN   SETA  N'&FLDS
         CALL  ISPLINK,(VPUT,FLDS&X,&TYPE),VL
         B     SYS&X
         AIF   (&ATTRN GT 1).BBB
FLDS&X   DC    CL10'(&FLDS(&B+1))'
         AGO   .END
.BBB     ANOP
FLDS&X   DC    CL10'(&FLDS(&B+1)'
         AGO   .DDD
&B       SETA  0-1
         AGO   .END
.CCC     AIF   ('&FLDS(&B+1)' EQ '').DDD
&AA      SETC  '&FLDS(&B+1)'
         DC    CL9'&FLDS(&B+1)'
.DDD     AIF   (&B+2 EQ &ATTRN).EEE
&B       SETA  &B+1
         AGO   .CCC
.EEE     ANOP
         DC    CL9'&FLDS(&B+2))'
.END     ANOP
SYS&X    DS    0H
         MEND
./ ADD  NAME=SQDCCB0
         PRINT NOGEN
*----------------------------------------------------------------------
*
*        TOM BEUTHIN  DEC, 1981
*
*        SPF PAN SUB-ROUTINE - RETRIEVE SOURCE FROM A PAN LIBRARY
*
* R2  - LIBDSN
* R3  - MBR
* R4  - TARGET
*
*----------------------------------------------------------------------
         SPACE 1
CMNCCB0  $PROLOG R12
         SPACE 1
ENTRY001 DS    0H
         LM    R2,R4,0(R1)     PARMS  LIB MBR TARGET
         MVC   DYNEPA,=F'0'    CLEAR
         MVC   RC,=F'0'        CLEAR
         MVC   PANRC,=F'0'     CLEAR
         MVI   PANWORK+8,X'00'  RESET
         MVI   PANFILE+8,X'00'  RESET
EXIT001  EQU   *
         EJECT
*----------------------------------------------------------------------
*
*        PANFILE
*
*----------------------------------------------------------------------
ENTRY020 DS    0H
*TST020  QTPUT 'ENTRY020'
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       LENGTH OF AREA
         MVI   DYNTYPE,C'A'
         MVC   DYNDDNM,PANFILE    DDNAME
         MVC   DYNDSN,0(R2)       DSNAME
         MVI   DYNDISP1,DYNSHR    DISP=SHR
         BAL   R14,ENTRY900       ALLOCATE IT
         CLC   DYNR15,=4C'0'      ANY ERRORS ?
         BE    EXIT020            NO - OK
         MVC   RC,=F'4'
         B     EOJ
EXIT020  EQU   *
         MVI   PANFILE+8,X'FF'    INDICATE ALLOCATED
         B     ENTRY030
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        PANWORK
*
*----------------------------------------------------------------------
ENTRY030 DS    0H
*TST030  QTPUT 'ENTRY030'
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       LENGTH OF AREA
         MVI   DYNTYPE,C'A'
         MVC   DYNDDNM,PANWORK    DDNAME
         MVC   DYNDSN,0(R4)       DSNAME
         MVI   DYNDISP1,DYNSHR    DISP=SHR
         BAL   R14,ENTRY900       ALLOCATE IT
         CLC   DYNR15,=4C'0'      ANY ERRORS ?
         BE    EXIT030            NO - OK
         CLC   DYNERR,=4C'1708'   NOT CATALOGED ?
         BE    BBB030             YES - CREATE ONE
         MVC   RC,=F'4'
         B     EOJ
BBB030   EQU   *
*TST030A QTPUT 'BBB030'
         MVI   DYNDISP1,DYNNEW    DISP=NEW,
         MVI   DYNDISP2,DYNCAT    CATLG,
         MVI   DYNDISP3,DYNDEL    DELETE
         MVC   DYNBLKSZ,=H'6160'  BLKSIZE
         MVC   DYNLRECL,=H'80'    LRECL
         MVC   DYNBTC,=C'TRK'     SPACE=(TRK,
         MVC   DYNPRIM,=AL3(10)   10,
         MVC   DYNSEC,=AL3(20)    20,
         MVI   DYNRECFM,DYNFB     RECFM=FB
         BAL   R14,ENTRY900       ALLOCATE IT
         CLC   DYNR15,=4C'0'      ANY ERRORS ?
         BE    EXIT030            NO - OK
         MVC   RC,=F'4'
         B     EOJ
EXIT030  EQU   *
         MVI   PANWORK+8,X'FF'    INDICATE ALLOCATED
         B     ENTRY200
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        INVOKE PAM
*
*----------------------------------------------------------------------
ENTRY200 DS    0H
*TST200  QTPUT 'ENTRY200'
         MVC   PAMNAME(10),0(R3)
         LOAD  EP=PAM              LOAD THE PANVALET ACCESS METHOD
         ST    R0,POPEN            SAVE ADDRESS OF POPEN(PAM) +0
         LR    R15,R0              ALSO IN BAL REG
         A     R0,=F'8'            BUMP TO NEXT EP PSRCH      +8
         A     R0,=F'8'            BUMP TO NEXT EP
         ST    R0,PREAD            SAVE ADDRESS OF PREAD      +16
         A     R0,=F'8'            BUMP TO NEXT EP
         ST    R0,PCLOSE           SAVE ADDRESS OF PCLOSE     +24
         LA    R1,POPENP           ADDR OF PAM OPEN LIST
         BALR  R14,R15             GO TO PAM TO OPEN FILE
         LA    R10,16              SET RETCODE
         OC    PAMRC,PAMRC         CHECK RETURN CODE
         BNZ   EXIT                OPEN FAILED
         SR    R10,R10             CLEAR RETCURN CODE
         MVC   PAMBUF(2),=C'  '    CLEAR END OF FILE INDICATOR
PAMREAD  MVC   PAMOPT,NOENTRY      RESET PAMOPT FIELD
         LA    R1,PREADP           ADDR OF PAM READ LIST
         L     R15,PREAD           EP OF PREAD
         BALR  R14,R15             GO TO PAM TO READ RECORD
         OC    PAMRC,PAMRC         CHECK RETURN CODE
         BNZ   SETRC               NOT FOUND, SET RETCODE
         CLC   PAMBUF(2),=C'$*'    END OF MEMBER?
         BE    CLOSE               YES, CONTINUE
         LA    R1,PAMBUF           POINT TO BUFFER
         BAL   R14,PUT             WRITE IT OUT
         B     PAMREAD             GET NEXT RECORD IF ANY
SETRC    LA    R10,4               SET RETURN CODE
CLOSE    LA    R1,PCLOSEP          ADDR OF PAM CLOSE LIST
         L     R15,PCLOSE          EP OF PCLOSE
         BALR  R14,R15             GO TO PAM TO READ RECORD
         DELETE EP=PAM             RELEASE THE PAM MODULE
         CLOSE PUTDCB              CLOSE OUTPUT FILE
EXIT     ST    R10,PANRC           SET RETCODE
         B     EOJ
         EJECT
POPEN    DC    A(0)                ADDR OF POPEN ROUTINE
PREAD    DC    A(0)                ADDR OF PREAD ROUTINE
PCLOSE   DC    A(0)                ADDR OF PCLOSE ROUTINE
POPENP   DC    A(PAMRC),A(PAMFILE),AL1(128),AL3(PAMOPT) PAM OPEN LIST
PREADP   DC    A(PAMRC),A(PAMBUF),A(PAMNAME),A(PAMOPT)
         DC    AL1(128),AL3(PAMOPT) PAM READ LIST
PCLOSEP  DC    AL1(128),AL3(PAMRC) PAM CLOSE LIST
PAMRC    DC    F'0'                PAM RETURN CODE
PAMFILE  DC    CL8'PANDD1'         PAN LIBRARY DD NAME
PAMNAME  DC    CL22' '             ACTIVE MEMBER NAME FIELD
PAMOPT   DC    CL52'NO-ENTRY'      PAM OPTION FIELD
NOENTRY  DC    CL52'NO-ENTRY'      PAM OPTION FIELD MODEL
PAMBUF   DC    CL80' '             PAM I/O BUFFER
         LTORG
PUT      SYSPUT DDNAME=SYSPUNCH,BLKSIZE=6160
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        END OF JOB
*
*----------------------------------------------------------------------
EOJ      DS    0H
         BAL   R14,ENTRY920       DE-ALLOCATE EVERYTHING
         ICM   R15,15,DYNEPA      DYN ALLOC SUB-ROUTINE
         BZ    EOJ1
         DELETE  EP=ALLOCRTN
EOJ1     EQU   *
         CLC   PANRC,=F'0'          ANY PAN ERRORS ?
         BE    EOJ2                 NO - OK
         L     R15,PANRC            YES - GET RETURN CODE
         B     EOJ3
EOJ2     EQU   *
         L     R15,RC               PICK UP RC
EOJ3     EQU   *
         $EPILOG
         LTORG
RC       DC    F'0'
PANRC    DC    F'0'
         EJECT
*----------------------------------------------------------------------
*
*        DYNAMIC ALLOCATION
*
*----------------------------------------------------------------------
ENTRY900 DS    0H
         ST    R14,ST900
         ICM   R15,15,DYNEPA      DYN ALLOC SUB-ROUTINE
         BNZ   AAA900
         LOAD  EP=ALLOCRTN
         ST    R0,DYNEPA
         LR    R15,R0
AAA900   EQU   *
         LA    R1,=A(DYNPARMS)
         BALR  R14,R15
EXIT900  EQU   *
         L     R14,ST900
         BR    R14
         LTORG
ST900    DC    F'-1'
DYNEPA   DC    F'0'
         EJECT
*----------------------------------------------------------------------
*
*        FREE ALL ALLOCATED DDNAMES
*
*----------------------------------------------------------------------
ENTRY920 DS    0H
         ST    R14,ST920
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL
         MVI   DYNTYPE,C'D'       INDICATE DE-ALLOCATE
         LA    R2,DDNAMES         ADDR OF ALL DDNAMES
LOOP920A EQU   *
         CLI   8(R2),X'FF'        IS IT ALLOCATED ?
         BNE   AAA920             NO - SKIP IT
         MVC   DYNDDNM,0(R2)      YES - MOVE DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT
         MVI   8(R2),X'00'        RESET FLAG
AAA920   EQU   *
         LA    R2,9(R2)           BUMP
         CLI   0(R2),X'FF'        END OF NAMES ?
         BNE   LOOP920A           NO - CONTINUE
EXIT920  EQU   *
         L     R14,ST920
         BR    R14
         LTORG
ST920    DC    F'-1'
         SPACE 1
DDNAMES  EQU   *
PANFILE  DC    CL8'PANDD1',X'00'
PANWORK  DC    CL8'SYSPUNCH',X'00'
         DC    X'FFFF'            END INDICATOR
BLANKS   DC    100C' '
DYNPARMS $ALLOC
         END
./ ADD  NAME=SQDEUVP
*----------------------------------------------------------------------
*
*        BOB BECKER MAR ,1981
*        ADDED SKIP JAN ,1982 TLB
*
*        SPF VSAM - PRINT CLUSTER DIALOG MANAGER
*
*
*----------------------------------------------------------------------
         EJECT
PDAEUVP  $PROLOG R12,R11
         EJECT
*----------------------------------------------------------------------
*
*        SET CONTROLS - LET SPF HANDLE ANY ERRORS
*
*----------------------------------------------------------------------
ENTRY010 DS    0H
         CALL  ISPLINK,(CONTROL,ERRORS,CANCEL),VL
EXIT010  EQU   *
         B     ENTRY020
         EJECT
*----------------------------------------------------------------------
*
*        DEFINE VARIABLES
*
*----------------------------------------------------------------------
ENTRY020 DS    0H
         MVC   LENGTH,=F'8'
         CALL  ISPLINK,(VDEFINE,NAME8,PDAEUVP2,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'44'
         CALL  ISPLINK,(VDEFINE,NAME44,PDAEUVP1,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'44'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(9),=CL9'(ZTEMPF)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,ZTEMPF,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'8'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(9),=CL9'(ZPREFIX)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,ZPREFIX,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'8'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(9),=C'(DYNDDNM)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,DYNDDNM,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'44'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(8),=C'(DYNDSN)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,DYNDSN,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'4'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(23),=C'(DYNR15 DYNERR DYNINFO)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,DYNR15,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'1'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(9),=C'(DYNTYPE)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,DYNTYPE,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'4'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(7),=C'(SPFRC)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,SPFRC,CHAR,LENGTH),VL
EXIT020  EQU   *
         B     ENTRY030
         EJECT
*----------------------------------------------------------------------
*
*        GET PROFILE/SHARED VARIABLES
*
*----------------------------------------------------------------------
ENTRY030 DS    0H
         MVC   NAMELIST,BLANKS
         MVC   NAMELIST(20),=CL20'(ZTEMPF ZPREFIX)'
         CALL  ISPLINK,(VGET,NAMELIST,SHARED),VL
*
         CALL  ISPLINK,(VGET,NAME44,PROFILE),VL
*
         CALL  ISPLINK,(VGET,NAME8,PROFILE),VL
EXIT030  EQU   *
         B     ENTRY050
         EJECT
*----------------------------------------------------------------------
*
*        DISPLAY FIRST PANEL
*
*----------------------------------------------------------------------
ENTRY050 DS    0H
         MVC   PANEL,=CL8'PDAEUVP'
         MVC   CURSOR,=CL8'PDAEUVP1'  POSITION CURSOR AT TYPE FIELD
         CALL  ISPLINK,(DISPLAY,PANEL,,CURSOR),VL
         LTR   R15,R15            CONTINUE PROCESSING ?
         BNZ   ENTRY810           NO - UPDATE PROFILE AND END
EXIT050  EQU   *
         B     ENTRY060
         EJECT
*----------------------------------------------------------------------
*
*        ALLOCATE WORK DATA SET - IDCAMS SYSIN
*
*----------------------------------------------------------------------
ENTRY060 DS    0H
         LA    R3,OUTDATA         CONTROL RECORD TABLE
         CLI   SYSIN+8,X'FF'      IS IT ALREADY ALLOCATED ?
         BE    EXIT060            YES - OK
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         MVI   DYNTYPE,C'A'
         MVC   DYNDDNM,SYSIN      DDNAME
         MVC   DYNDSN,ZTEMPF      DSNAME
         LA    R1,DYNDSN
LOOP060A EQU   *
         CLC   0(5,R1),=C'.CNTL'  FIND LAST QUALIFIER
         BE    AAA060             FOUND IT
         LA    R1,1(R1)           BUMP
         B     LOOP060A
AAA060   EQU   *
         MVC   0(5,R1),=C'.@F80'  CHANGE LAST QUALIFIER
         MVI   DYNDISP1,DYNSHR    DISP=SHR
         BAL   R14,ENTRY900
         CLC   DYNR15,=4C'0'      ANY ERRORS ?
         BE    EXIT060            NO - OK
         CLC   DYNERR,=C'1708'    DATA SET NOT FOUND ?
         BNE   ERROR2             NO - SERIOUS ERROR
         MVI   DYNDISP1,DYNNEW    YES - CREATE A LIST DATA SET
         MVI   DYNDISP2,DYNCAT    CATALOG
         MVI   DYNDISP3,DYNCAT    CATALOG
         MVC   DYNBTC,=C'TRK'     ALLOCATE IN TRACKS
         MVC   DYNPRIM,=AL3(10)   10 PRIMARY
         MVC   DYNSEC,=AL3(10)    10 SECONDARY
         MVC   DYNBLKSZ,=H'6160'  BLOCKSIZE
         MVC   DYNLRECL,=H'80'
         MVI   DYNRECFM,DYNFB
         MVI   DYNRLSE,X'FF'      RLSE
         BAL   R14,ENTRY900       ALLOCATE IT
         CLC   DYNR15,=4C'0'      CREATED OK ?
         BNE   ERROR2             NO - FORGET IT !!!
EXIT060  EQU   *
         B     ENTRY100
         EJECT
*----------------------------------------------------------------------
*
*        INDATASET
*
*----------------------------------------------------------------------
ENTRY100 DS    0H
         MVC   OUTREC(8),=CL8' PRINT -'
         BAL   R14,ENTRY910
         CLI   PDAEUVP1,C' '      IDS SPECIFIED ?
         BE    EXIT100            NO - OK
         LA    R2,OUTREC+3        OUTPUT RECORD
         MVC   0(4,R2),=CL4'IDS(' MOVE KEYWORD
         LA    R2,4(R2)           BUMP
         CLI   PDAEUVP1,X'7D'     NAME IN QUOTES ?
         BNE   AAA100             NO - ADD PREFIX
         MVC   0(43,R2),PDAEUVP1+1 MOVE NAME - SKIP QUOTE
         B     LOOP100B
AAA100   EQU   *
         MVC   0(8,R2),ZPREFIX    MOVE PREFIX
LOOP100A EQU   *
         CLI   0(R2),C' '         FIND END OF PREFIX
         BE    BBB100             FOUND IT
         LA    R2,1(R2)           BUMP
         B     LOOP100A
BBB100   EQU   *
         MVI   0(R2),C'.'         ADD A DOT
         MVC   1(36,R2),PDAEUVP1  MOVE REST OF NAME
LOOP100B EQU   *
         CLI   0(R2),C' '         FIND END
         BE    CCC100             FOUND IT
         CLI   0(R2),X'7D'        FIND END
         BE    CCC100             FOUND IT
         LA    R2,1(R2)           BUMP
         B     LOOP100B
CCC100   EQU   *
         MVC   0(3,R2),=C') -'    DELIMITERS
         BAL   R14,ENTRY910       WRITE RECORD
EXIT100  EQU   *
         B     ENTRY110
         EJECT
*----------------------------------------------------------------------
*
*        INFILE
*
*----------------------------------------------------------------------
ENTRY110 DS    0H
         CLI   PDAEUVP2,C' '      ANY SPECIFIED ?
         BE    EXIT110            NO - OK
         LA    R2,OUTREC+3        OUTPUT RECORD
         MVC   0(6,R2),=CL6'IFILE('
         LA    R2,6(R2)           BUMP
         MVC   0(8,R2),PDAEUVP2   DDNAME
LOOP110A EQU   *
         CLI   0(R2),C' '         FIND END
         BE    AAA110             FOUND IT
         LA    R2,1(R2)           BUMP
         B     LOOP110A
AAA110   EQU   *
         MVC   0(3,R2),=C') -'    DELIMITERS
         BAL   R14,ENTRY910       WRITE RECORD
EXIT110  EQU   *
         B     ENTRY120
         EJECT
*----------------------------------------------------------------------
*
*        CHAR/DUMP/HEX
*
*----------------------------------------------------------------------
ENTRY120 DS    0H
         CLI   PDAEUVP3,C' '      ANY SPECIFIED ?
         BE    EXIT120            NO - OK
         LA    R2,OUTREC+3        OUTPUT RECORD
         MVC   0(8,R2),PDAEUVP3   CHAR/DUMP/HEX
         MVI   6(R2),C'-'
         BAL   R14,ENTRY910       WRITE RECORD
EXIT120  EQU   *
         B     ENTRY130
         EJECT
*----------------------------------------------------------------------
*
*        FROMKEY
*
*----------------------------------------------------------------------
ENTRY130 DS    0H
         CLI   PDAEUVP4,C' '      FROMKEY ?
         BE    EXIT130            NO - SKIP IT
         LA    R2,OUTREC+3        OUTPUT RECORD
         MVC   0(8,R2),=CL8'FROMKEY('
         LA    R2,8(R2)           BUMP
         MVC   0(8,R2),PDAEUVP4   MOVE KEY
LOOP130A EQU   *
         CLI   0(R2),C' '         FIND END
         BE    AAA130             FOUND IT
         LA    R2,1(R2)           BUMP
         B     LOOP130A
AAA130   EQU   *
         MVC   0(3,R2),=C') -'    ADD DELIMITERS
         BAL   R14,ENTRY910       WRITE RECORD
EXIT130  EQU   *
         B     ENTRY140
         EJECT
*----------------------------------------------------------------------
*
*        TOKEY
*
*----------------------------------------------------------------------
ENTRY140 DS    0H
         CLI   PDAEUVP5,C' '      TO KEY  ?
         BE    EXIT140            NO - SKIP IT
         LA    R2,OUTREC+3        OUTPUT RECORD
         MVC   0(6,R2),=CL6'TOKEY('
         LA    R2,6(R2)           BUMP
         MVC   0(44,R2),PDAEUVP5  TO KEY
LOOP140A EQU   *
         CLI   0(R2),C' '         FIND END
         BE    AAA140             FOUND IT
         LA    R2,1(R2)           BUMP
         B     LOOP140A
AAA140   EQU   *
         MVC   0(3,R2),=C') -'    ADD DELIMITERS
         BAL   R14,ENTRY910       WRITE RECORD
EXIT140  EQU   *
         B     ENTRY150
         EJECT
*----------------------------------------------------------------------
*
*        FROMADDRESS
*
*----------------------------------------------------------------------
ENTRY150 DS    0H
         CLI   PDAEUVP6,C' '      FROMADR ?
         BE    EXIT150            NO - SKIP IT
         LA    R2,OUTREC+3        OUTPUT RECORD
         MVC   0(12,R2),=CL12'FROMADDRESS('
         LA    R2,12(R2)           BUMP
         MVC   0(8,R2),PDAEUVP6   MOVE ADDR
LOOP150A EQU   *
         CLI   0(R2),C' '         FIND END
         BE    AAA150             FOUND IT
         LA    R2,1(R2)           BUMP
         B     LOOP150A
AAA150   EQU   *
         MVC   0(3,R2),=C') -'    ADD DELIMITERS
         BAL   R14,ENTRY910       WRITE RECORD
EXIT150  EQU   *
         B     ENTRY160
         EJECT
*----------------------------------------------------------------------
*
*        TOADDRESS
*
*----------------------------------------------------------------------
ENTRY160 DS    0H
         CLI   PDAEUVP7,C' '      TO ADR  ?
         BE    EXIT160            NO - SKIP IT
         LA    R2,OUTREC+3        OUTPUT RECORD
         MVC   0(10,R2),=CL10'TOADDRESS('
         LA    R2,10(R2)           BUMP
         MVC   0(8,R2),PDAEUVP6   TO KEY
LOOP160A EQU   *
         CLI   0(R2),C' '         FIND END
         BE    AAA160             FOUND IT
         LA    R2,1(R2)           BUMP
         B     LOOP160A
AAA160   EQU   *
         MVC   0(3,R2),=C') -'    ADD DELIMITERS
         BAL   R14,ENTRY910       WRITE RECORD
EXIT160  EQU   *
         B     ENTRY170
         EJECT
*----------------------------------------------------------------------
*
*        FROMNUMBER
*
*----------------------------------------------------------------------
ENTRY170 DS    0H
         CLI   PDAEUVP8,C' '      FROMNUM ?
         BE    EXIT170            NO - SKIP IT
         LA    R2,OUTREC+3        OUTPUT RECORD
         MVC   0(11,R2),=CL11'FROMNUMBER('
         LA    R2,11(R2)           BUMP
         MVC   0(8,R2),PDAEUVP8   MOVE NUMBER
LOOP170A EQU   *
         CLI   0(R2),C' '         FIND END
         BE    AAA170             FOUND IT
         LA    R2,1(R2)           BUMP
         B     LOOP170A
AAA170   EQU   *
         MVC   0(3,R2),=C') -'    ADD DELIMITERS
         BAL   R14,ENTRY910       WRITE RECORD
EXIT170  EQU   *
         B     ENTRY180
         EJECT
*----------------------------------------------------------------------
*
*        TONUMBER
*
*----------------------------------------------------------------------
ENTRY180 DS    0H
         CLI   PDAEUVP9,C' '      TO ADR  ?
         BE    EXIT180            NO - SKIP IT
         LA    R2,OUTREC+3        OUTPUT RECORD
         MVC   0(9,R2),=CL9'TONUMBER('
         LA    R2,9(R2)           BUMP
         MVC   0(8,R2),PDAEUVP9   TO NUM
LOOP180A EQU   *
         CLI   0(R2),C' '         FIND END
         BE    AAA180             FOUND IT
         LA    R2,1(R2)           BUMP
         B     LOOP180A
AAA180   EQU   *
         MVC   0(3,R2),=C') -'    ADD DELIMITERS
         BAL   R14,ENTRY910       WRITE RECORD
EXIT180  EQU   *
         B     ENTRY190
         EJECT
*----------------------------------------------------------------------
*
*        SKIP
*
*----------------------------------------------------------------------
ENTRY190 DS    0H
         CLI   PDAEUVPA,C' '      TO ADR  ?
         BE    EXIT190            NO - SKIP IT
         LA    R2,OUTREC+3        OUTPUT RECORD
         MVC   0(5,R2),=CL5'SKIP('
         LA    R2,5(R2)           BUMP
         MVC   0(8,R2),PDAEUVPA   SKIP
LOOP190A EQU   *
         CLI   0(R2),C' '         FIND END
         BE    AAA190             FOUND IT
         LA    R2,1(R2)           BUMP
         B     LOOP190A
AAA190   EQU   *
         MVC   0(3,R2),=C') -'    ADD DELIMITERS
         BAL   R14,ENTRY910       WRITE RECORD
EXIT190  EQU   *
         B     ENTRY200
         EJECT
*----------------------------------------------------------------------
*
*        COUNT
*
*----------------------------------------------------------------------
ENTRY200 DS    0H
         CLI   PDAEUVPB,C' '      COUNT ?
         BE    EXIT200            NO - OK
         LA    R2,OUTREC+3        OUTPUT RECORD
         MVC   0(6,R2),=CL6'COUNT('
         LA    R2,6(R2)           BUMP
         MVC   0(8,R2),PDAEUVPB   COUNT
LOOP200A EQU   *
         CLI   0(R2),C' '         FIND END
         BE    AAA200             FOUND IT
         LA    R2,1(R2)           BUMP
         B     LOOP200A
AAA200   EQU   *
         MVC   0(3,R2),=C')  '    ADD DELIMITERS
         BAL   R14,ENTRY910       WRITE RECORD
EXIT200  EQU   *
         B     ENTRY500
         EJECT
*----------------------------------------------------------------------
*
*        WRITE CONTROL RECORDS
*
*----------------------------------------------------------------------
ENTRY500 DS    0H
         OPEN  (SYSINDCB,(OUTPUT))
         LA    R2,OUTDATA       FIRST OUTPUT RECORD
LOOP500A EQU   *
         CLI   0(R2),X'00'      END OF RECORDS ?
         BE    CCC500           YES - DONE
         CLI   80(R2),X'00'     IS THERE ANOTHER RECORD ?
         BNE   BBB500           YES - OK
         LR    R1,R2            NO - THIS IS THE LAST ONE
LOOP500B EQU   *
         CLI   0(R1),C'-'       FIND THE DASH
         BE    AAA500           FOUND IT
         LA    R1,1(R1)         BUMP
         B     LOOP500B
AAA500   EQU   *
         MVI   0(R1),C' '       BLANK IT OUT
BBB500   EQU   *
         PUT   SYSINDCB,0(R2)   WRITE RECORD
         LA    R2,80(R2)        BUMP TO NEXT RECORD
         B     LOOP500A         PROCESS IT
CCC500   EQU   *
         CLOSE SYSINDCB
         FREEPOOL  SYSINDCB
EXIT500  EQU   *
         B     ENTRY510
OUTREC   DC    CL80' '
         EJECT
*----------------------------------------------------------------------
*
*        ALLOCATE SYSPRINT
*
*----------------------------------------------------------------------
ENTRY510 DS    0H
         CLI   SYSPRINT+8,X'FF'   IS IT ALREADY ALLOCATED ?
         BE    EXIT510            YES - OK
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         MVI   DYNTYPE,C'A'
         MVC   DYNDDNM,SYSPRINT   DDNAME
         MVC   DYNDSN,ZTEMPF      DSNAME
         LA    R1,DYNDSN
LOOP510A EQU   *
         CLC   0(5,R1),=C'.CNTL'  FIND LAST QUALIFIER
         BE    AAA510             FOUND IT
         LA    R1,1(R1)           BUMP
         B     LOOP510A
AAA510   EQU   *
         MVC   0(6,R1),=C'.@V137' CHANGE LAST QUALIFIER
         MVI   DYNDISP1,DYNSHR    DISP=SHR
         BAL   R14,ENTRY900
         CLC   DYNR15,=4C'0'      ANY ERRORS ?
         BE    BBB510             NO - OK
         CLC   DYNERR,=C'1708'    DATA SET NOT FOUND ?
         BNE   ERROR2             NO - SERIOUS ERROR
         MVI   DYNDISP1,DYNNEW    YES - CREATE A LIST DATA SET
         MVI   DYNDISP2,DYNCAT    CATALOG
         MVI   DYNDISP3,DYNCAT    CATALOG
         MVC   DYNBTC,=C'TRK'     ALLOCATE IN TRACKS
         MVC   DYNPRIM,=AL3(10)   10 PRIMARY
         MVC   DYNSEC,=AL3(10)    10 SECONDARY
         MVC   DYNBLKSZ,=H'6233'  BLOCKSIZE
         MVC   DYNLRECL,=H'137'
         MVI   DYNRECFM,DYNVBA
         MVI   DYNRLSE,X'FF'      RLSE
         BAL   R14,ENTRY900       ALLOCATE IT
         CLC   DYNR15,=4C'0'      CREATED OK ?
         BNE   ERROR2             NO - FORGET IT !!!
BBB510   EQU   *
         MVI   BRWSDSN,X'7D'      ADD A QUOTE
         MVC   BRWSDSN+1(43),DYNDSN MOVE DSN
         LA    R1,BRWSDSN         START OF NAME
LOOP510B EQU   *
         CLI   0(R1),C' '         FIND END
         BE    CCC510             FOUND IT
         LA    R1,1(R1)           BUMP
         B     LOOP510B
CCC510   EQU   *
         MVI   0(R1),X'7D'        ADD QUOTE
         MVI   SYSPRINT+8,X'FF'   INDICATE ALLOCATED
EXIT510  EQU   *
         B     ENTRY520
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        INVOKE IDCAMS
*
*----------------------------------------------------------------------
ENTRY520 DS    0H
         LINK  EP=IDCAMS,PARAM=H0,VL=1
         ST    R15,CMPRC
EXIT520  EQU   *
         B     ENTRY530
         LTORG
*----------
         CNOP  2,4
H0       DC    H'0'               LENGTH
*----------
         EJECT
*----------------------------------------------------------------------
*
*        INVOKE BROWSE
*
*----------------------------------------------------------------------
ENTRY530 DS    0H
         CALL  ISPLINK,(BROWSE,BRWSDSN),VL
EXIT530  EQU   *
         B     ENTRY800
         EJECT
*----------------------------------------------------------------------
*
*        INDICATE PROCESSING COMPLETE
*
*----------------------------------------------------------------------
ENTRY800 DS    0H
         L     R1,CMPRC           PICK UP RETURN CODE
         CVD   R1,DBWRD           CONVERT
         MVC   WORK16,EDIT16
         ED    WORK16,DBWRD
         MVC   SPFRC,WORK16+12
         MVC   MSG,=CL8'CMN001'
         MVC   CURSOR,=CL8'PDAEUVP1'  POSITION CURSOR HERE
         CALL  ISPLINK,(DISPLAY,PANEL,MSG,CURSOR),VL
         LTR   R15,R15            CONTINUE ?
         BZ    ENTRY060           YES - DO IT AGAIN
EXIT800  EQU   *                  NO - END
         B     ENTRY810
         LTORG
DBWRD    DC    D'0'
WORK16   DC    CL16' '
EDIT16   DC    X'40202020202020202020202020202120'
         EJECT
*----------------------------------------------------------------------
*
*        PUT PROFILE VARIABLES AND EXIT
*
*----------------------------------------------------------------------
ENTRY810 DS    0H
         CALL  ISPLINK,(VPUT,NAME44,PROFILE),VL
         CALL  ISPLINK,(VPUT,NAME8,PROFILE),VL
*
         BAL   R14,ENTRY920       FREE ALL ALLOCATED DATA SETS
EXIT810  EQU   *
         B     EOJ
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        END OF JOB
*
*----------------------------------------------------------------------
EOJ      DS    0H
         ICM   R15,15,DYNEPA      DYN ALLOC SUB-ROUTINE
         BZ    EOJ1
         DELETE  EP=ALLOCRTN
EOJ1     EQU   *
         LA    R15,0
         $EPILOG
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        DYNAMIC ALLOCATION
*
*----------------------------------------------------------------------
ENTRY900 DS    0H
         ST    R14,ST900
         ICM   R15,15,DYNEPA      DYN ALLOC SUB-ROUTINE
         BNZ   AAA900
         LOAD  EP=ALLOCRTN
         ST    R0,DYNEPA
         LR    R15,R0
AAA900   EQU   *
         LA    R1,=A(DYNPARMS)
         BALR  R14,R15
         CLC   DYNR15,=4C'0'      ANY ERRORS ?
         BNE   ERROR1             YES - DECODE THE ERROR
EXIT900  EQU   *
         L     R14,ST900
         BR    R14
         LTORG
ST900    DC    F'-1'
DYNEPA   DC    F'0'
         EJECT
*----------------------------------------------------------------------
*
*        PUT ROUTINE
*
*----------------------------------------------------------------------
ENTRY910 DS    0H
         ST    R14,ST910
         MVC   0(80,R3),OUTREC        PUT RECORD IN TABLE
         LA    R3,80(R3)              BUMP
         MVC   0(80,R3),=80X'00'      ZERO THIS ONE
         MVC   OUTREC,BLANKS          CLEAR WORKAREA
EXIT910  EQU   *
         L     R14,ST910
         BR    R14
         LTORG
ST910    DC    F'-1'
         EJECT
*----------------------------------------------------------------------
*
*        FREE ALL ALLOCATED DDNAMES
*
*----------------------------------------------------------------------
ENTRY920 DS    0H
         ST    R14,ST920
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL
         MVI   DYNTYPE,C'D'       INDICATE DE-ALLOCATE
         LA    R2,DDNAMES         ADDR OF ALL DDNAMES
LOOP920A EQU   *
         CLI   8(R2),X'FF'        IS IT ALLOCATED ?
         BNE   AAA920             NO - SKIP IT
         MVC   DYNDDNM,0(R2)      YES - MOVE DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT
         MVI   8(R2),X'00'        RESET FLAG
AAA920   EQU   *
         LA    R2,9(R2)           BUMP
         CLI   0(R2),X'FF'        END OF NAMES ?
         BNE   LOOP920A           NO - CONTINUE
EXIT920  EQU   *
         L     R14,ST920
         BR    R14
         LTORG
ST920    DC    F'-1'
         EJECT
*----------------------------------------------------------------------
*
*        DYNAMIC ALLOCATION ERROR
*
*----------------------------------------------------------------------
ERROR1   DS    0H
         CLC   DYNERR,=C'0410'
         BNE   AAAER1
         MVC   SAVEDDNM,DYNDDNM
         MVC   SAVEDYN(DYNLL),DYNPARMS
         XC    DYNPARMS(DYNLL),DYNPARMS
         MVI   DYNLEN,DYNLL
         MVI   DYNTYPE,C'D'
         MVC   DYNDDNM,SAVEDDNM
         MVI   DYNUNALC,X'FF'
         MVC   SAVE14,ST900
         BAL   R14,ENTRY900
         MVC   DYNPARMS(DYNLL),SAVEDYN
         L     R14,SAVE14
         B     ENTRY900
AAAER1   EQU   *
         MVC   MSG,=CL8'DYN002'
         CLC   DYNERR,=C'020C'    DATA SET IN USE ?
         BE    ZZZER1             DISPLAY MESSAGE
         CLC   DYNERR,=C'0210'    DATA SET IN USE ?
         BE    ZZZER1             DISPLAY MESSAGE
         MVC   MSG,=CL8'DYN003'
         CLC   DYNERR,=C'031C'    INVALID MEMBER NAME ?
         BE    ZZZER1             DISPLAY MESSAGE
         MVC   MSG,=CL8'DYN001'
         CLC   DYNERR,=C'0320'    INVALID DSNAME ?
         BE    ZZZER1             DISPLAY MESSAGE
         MVC   MSG,=CL8'DYN004'
         CLC   DYNERR,=C'0330'    MBR SPECIFIED, DSN NOT A PDS
         BE    ZZZER1             DISPLAY MESSAGE
         MVC   MSG,=CL8'DYN005'
         CLC   DYNERR,=C'0440'    DSN NOT FOUND ?
         BE    ZZZER1             DISPLAY MESSAGE
         L     R14,ST900          GO BACK TO THE ROUTINE THAT
         BR    R14                REQUESTED THE ALLOC
ZZZER1   EQU   *
         CALL  ISPLINK,(DISPLAY,,MSG,CURSOR),VL
         BAL   R14,ENTRY920       FREE ALL ALLOCATED DATA SETS
         LTR   R15,R15            CONTINUE ?
         BNZ   ENTRY810           NO - UPDATE PROFILE AND EXIT
ENDERR1  EQU   *
         B     ENTRY060           YES - DO IT AGAIN
SAVEDYN  DC    256X'00'
SAVEDDNM DC    CL8' '
SAVE14   DC    F'-1'
*----------------------------------------------------------------------
ERROR2   DS    0H
         MVC   MSG,=CL8'DYN000'
         CALL  ISPLINK,(DISPLAY,,MSG,CURSOR),VL
         LTR   R15,R15            CONTINUE ?
         BNZ   ENTRY810           NO - UPDATE PROFILE AND END
         B     ENTRY060           YES - START AT THE TOP
         LTORG
         EJECT
*----------------------------------------------------------------------
*
*        STORAGE AREAS
*
*----------------------------------------------------------------------
CMPRC    DC    F'0'
BRWSDSN  DC    CL44' '            BROWSE NAME
BLANKS   DC    CL100' '
*----------------------------------------------------------------------
LENGTH   DC    F'0'               LENGTH OF EACH VARIABLE
NAMELIST DC    CL100' '
NAME8    DC    C'(PDAEUVP2 PDAEUVP3 PDAEUVP6 PDAEUVP7 PDAEUVP8'
         DC    C' PDAEUVP9 PDAEUVPA PDAEUVPB)'
NAME44   DC    C'(PDAEUVP1 PDAEUVP4 PDAEUVP5)'
*----------------------------------------------------------------------
DDNAMES  EQU   *
SYSIN    DC    CL8'SYSIN',X'00'
SYSPRINT DC    CL8'SYSPRINT',X'00'
         DC    X'FFFF'            END INDICATOR
*----------------------------------------------------------------------
*
*        DEFINED VARIABLES
*
*----------------------------------------------------------------------
PDAEUVP2 DC    CL8' '             INFILE
PDAEUVP3 DC    CL8' '             CHAR/HEX/DUMP
PDAEUVP6 DC    CL8' '             FROMADDR
PDAEUVP7 DC    CL8' '             TOADDR
PDAEUVP8 DC    CL8' '             FROMNUM
PDAEUVP9 DC    CL8' '             TONUM
PDAEUVPA DC    CL8' '             SKIP
PDAEUVPB DC    CL8' '             COUNT
ZPREFIX  DC    CL8' '
*----------------------------------------------------------------------
PDAEUVP1 DC    CL44' '            CLUSTER NAME
PDAEUVP4 DC    CL44' '            FROMKEY
PDAEUVP5 DC    CL44' '            TOKEY
ZTEMPF   DC    CL44' '            TEMP NAME
*----------------------------------------------------------------------
SYSINDCB DCB   DDNAME=SYSIN,DSORG=PS,MACRF=PM
*----------------------------------------------------------------------
         EJECT
SPFMACS  $ISPCMDS
         EJECT
DYNPARMS $ALLOC
         EJECT
OUTDATA  DC    11XL80'00'
*----------------------------------------------------------------------
         END
./ ADD  NAME=SQDFC00
         PRINT NOGEN
*----------------------------------------------------------------------
*
*        BOB BECKER FEB ,1981
*        MODIFIED FOR PANVALET 10 CHAR MEMBER NAME JAN ,1982 TLB
*        MODIFIED FOR LINK EDIT MEMBER NAME        JAN, 1982 TLB
*
*        SPF FOREGROUND COMPILER DIALOG MANAGER
*
*
*----------------------------------------------------------------------
         EJECT
CMNFC00  $PROLOG R12,R11,R10,R9
         EJECT
*----------------------------------------------------------------------
*
*        SET CONTROLS - LET SPF HANDLE ANY ERRORS
*
*----------------------------------------------------------------------
ENTRY010 DS    0H
         CALL  ISPLINK,(CONTROL,ERRORS,CANCEL),VL
EXIT010  EQU   *
         B     ENTRY020
         EJECT
*----------------------------------------------------------------------
*
*        DEFINE VARIABLES
*
*----------------------------------------------------------------------
ENTRY020 DS    0H
         MVC   LENGTH,=F'8'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(99),=CL99'(CMNCCPRJ CMNCCLIB CMNCCTYP CMNCCCMP +
               CMNFCLID CMNFCLKD CMNCCLK2 ZPREFIX ZUSER)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,CMNCCPRJ,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'10'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(10),=CL10'(CMNCCMBR)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,CMNCCMBR,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'44'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(99),=CL99'(CMNCCLOP CMNFCAFO CMNFCAHO CMNFCCBO +
               CMNFCFGO CMNFCFHO CMNFCPFO CMNFCPOO)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,CMNCCLOP,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'44'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(99),=CL99'(CMNCCLK1 CMNCCMA1 CMNCCMA2 CMNCCMA3 +
               CMNCCMA4 CMNCCMA5 CMNCCMA6)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,CMNCCLK1,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'44'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(99),=CL99'(CMNFCMOD CMNCCOTH CMNCCSU1 CMNCCSU2 +
               CMNCCSU3 CMNCCSU4 CMNCCSU5 CMNCCSU6)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,CMNFCMOD,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'44'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(9),=C'(LOADDSN)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,LOADDSN,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'8'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(9),=C'(DYNDDNM)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,DYNDDNM,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'44'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(8),=C'(DYNDSN)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,DYNDSN,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'4'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(23),=C'(DYNR15 DYNERR DYNINFO)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,DYNR15,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'1'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(9),=C'(DYNTYPE)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,DYNTYPE,CHAR,LENGTH),VL
*
         MVC   LENGTH,=F'4'
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(7),=C'(SPFRC)'
         CALL  ISPLINK,(VDEFINE,NAMELIST,SPFRC,CHAR,LENGTH),VL
EXIT020  EQU   *
         B     ENTRY030
         EJECT
*----------------------------------------------------------------------
*
*        GET PROFILE/SHARED VARIABLES
*
*----------------------------------------------------------------------
ENTRY030 DS    0H
         MVC   NAMELIST,BLANKS
         MVC   NAMELIST(99),=CL99'(CMNCCLOP CMNFCAFO CMNFCAHO CMNFCCBO +
               CMNFCFGO CMNFCFHO CMNFCPFO CMNFCPOO)'
         CALL  ISPLINK,(VGET,NAMELIST,PROFILE),VL
*
         MVC   NAMELIST,BLANKS
         MVC   NAMELIST(99),=CL99'(CMNCCPRJ CMNCCLIB CMNCCTYP CMNCCCMP +
               CMNFCMOD CMNCCOTH)'
         CALL  ISPLINK,(VGET,NAMELIST,PROFILE),VL
*
         MVC   NAMELIST,BLANKS
         MVC   NAMELIST(99),=CL99'(CMNCCLK1 CMNCCMA1 CMNCCMA2 CMNCCMA3 +
               CMNCCMA4 CMNCCMA5 CMNCCMA6)'
         CALL  ISPLINK,(VGET,NAMELIST,PROFILE),VL
*
         MVC   NAMELIST,BLANKS
         MVC   NAMELIST(99),=CL99'(CMNCCSU1 CMNCCSU2 CMNCCSU3 CMNCCSU4 +
               CMNCCSU5 CMNCCSU6 CMNFCLID CMNFCLKD CMNCCLK2)'
         CALL  ISPLINK,(VGET,NAMELIST,PROFILE),VL
*
         MVC   NAMELIST,BLANKS    CLEAR
         MVC   NAMELIST(20),=CL20'(ZPREFIX ZUSER)'
         CALL  ISPLINK,(VGET,NAMELIST,SHARED),VL
EXIT030  EQU   *
         B     ENTRY050
         EJECT
*----------------------------------------------------------------------
*
*        DISPLAY FIRST PANEL
*
*----------------------------------------------------------------------
ENTRY050 DS    0H
         MVC   PANEL,=CL8'CMNFC00'
         MVC   CURSOR,=CL8'CMNCCMBR' POSITION CURSOR
         CALL  ISPLINK,(DISPLAY,PANEL,,CURSOR),VL
         LTR   R15,R15            CONTINUE PROCESSING ?
         BNZ   ENTRY810           NO - UPDATE PROFILE AND END
EXIT050  EQU   *
         B     ENTRY060
         EJECT
*----------------------------------------------------------------------
*
*  VERIFY/BUILD DATA SET NAMES FOR SOURCE, OBJECT, LOAD
*
*----------------------------------------------------------------------
ENTRY060 DS    0H
         CLI   CMNCCOTH,C'^'      IGNORE OTHER DSN ?
         BE    AAA060             YES - OK
         CLI   CMNCCOTH,C' '      ANY SPECIFIED ?
         BNE   EXIT060            YES - SKIP CMNCCPRJ LIB TYPE
AAA060   EQU   *
         MVC   CURSOR,=CL8'CMNCCPRJ' POSITION CURSOR FOR ERROR
         MVC   SRCDSN,BLANKS      CLEAR FIELD
         LA    R1,SRCDSN          START OF DSNAME
         MVC   0(8,R1),CMNCCPRJ   MOVE FIRST QUALIFIER
LOOP060A EQU   *
         CLI   0(R1),C' '         END OF DATA ?
         BE    BBB060             YES - OK
         LA    R1,1(R1)           NO - FIND END
         B     LOOP060A
BBB060   EQU   *
         MVI   0(R1),C'.'         ADD DOT
         LA    R1,1(R1)           BUMP
         MVC   0(8,R1),CMNCCLIB   MOVE LIB
LOOP060B EQU   *
         CLI   0(R1),C' '         END OF DATA ?
         BE    CCC060             YES - OK
         LA    R1,1(R1)           NO - FIND END
         B     LOOP060B
CCC060   EQU   *
         MVI   0(R1),C'.'         ADD DOT
         LA    R1,1(R1)           BUMP
         MVC   0(8,R1),CMNCCTYP   MOVE TYPE TO SRCDSN
EXIT060  EQU   *
         B     ENTRY065
         EJECT
*----------------------------------------------------------------------
*
*        CHECK FOR OTHER DSN
*
*----------------------------------------------------------------------
ENTRY065 DS    0H
         NI    FLAG,X'FF'-(OTHDS+LIBDS+SEQ+PDS+BDAM)  RESET
         CLI   CMNCCOTH,C' '      ANY SPECIFIED ?
         BE    EXIT065            NO - OK
         CLI   CMNCCOTH,C'^'      IGNORE IT ?
         BE    EXIT065            YES - OK
         MVC   CURSOR,=CL8'CMNCCOTH' POSITION CURSOR FOR ERROR
         MVC   SRCDSN,BLANKS      CLEAR
         CLI   CMNCCOTH,X'7D'     NAME IN QUOTES ?
         BNE   BBB065             NO - ADD USER ID
         MVC   SRCDSN(43),CMNCCOTH+1 SKIP QUOTE
         LA    R1,SRCDSN          START OF NAME
         LA    R2,43              SEARCH LIMIT
LOOP065A EQU   *
         CLI   0(R1),X'7D'        FIND ENDING QUOTE
         BE    AAA065             FOUND IT
         LA    R1,1(R1)           BUMP
         BCT   R2,LOOP065A
         MVC   MSG,=CL8'CMN002'
         CALL  ISPLINK,(DISPLAY,,MSG,CURSOR),VL
         LTR   R15,R15            CONTINUE PROCESSING ?
         BNZ   ENTRY810           NO - UPDATE PROFILE AND END
         B     ENTRY060           START OVER
AAA065   EQU   *
         MVI   0(R1),C' '         REMOVE QUOTE
         B     DDD065
BBB065   EQU   *
         MVC   SRCDSN(8),ZPREFIX  MOVE USER PREFIX
         LA    R1,SRCDSN          START
LOOP065B EQU   *
         CLI   0(R1),C' '         FIND END OF PREFIX
         BE    CCC065             FOUND IT
         LA    R1,1(R1)           BUMP
         B     LOOP065B
CCC065   EQU   *
         MVI   0(R1),C'.'         ADD A DOT
         MVC   1(34,R1),CMNCCOTH  MOVE REST OF NAME
DDD065   EQU   *
         OI    FLAG,OTHDS         SET FLAG
EXIT065  EQU   *
         B     ENTRY066
FLAG     DC    X'00'
OTHDS    EQU   X'01'
LIBDS    EQU   X'02'
BDAM     EQU   X'04'
SEQ      EQU   X'08'
PDS      EQU   X'10'
         EJECT
*----------------------------------------------------------------------
*
*        DETERMINE DSORG OF INPUT DATA SET
*
*----------------------------------------------------------------------
ENTRY066 DS    0H
         LOCATE LOCLIST           YES - LOCATE CATALOG ENTRY
         LTR   R15,R15            CATALOGED ?
         BZ    AAA066             YES - OK
         MVC   MSG,=CL8'DYN006'   DATA SET NOT CATALOGED MESSAGE
         MVC   DYNDSN,SRCDSN      MOVE DATA SET NAME FOR MESSAGE
         CALL  ISPLINK,(DISPLAY,,MSG,CURSOR),VL
         LTR   R15,R15            CONTINUE ?
         BZ    ENTRY060           YES - TRY AGAIN
         B     ENTRY810           NO - UPDATE PROFILE AND EXIT
AAA066   EQU   *
         MVC   VOLSER,AREA+6      PICK UP VOLSER FROM LOCATE
         OBTAIN OBTLIST           GET THE FORMAT 1 DSCB
         LTR   R15,R15            DATA SET FOUND ?
         BZ    BBB066             YES - OK
         MVC   MSG,=CL8'DYN005'   DATA SET NOT FOUND MESSAGE
         MVC   DYNDSN,SRCDSN      MOVE DATA SET NAME FOR MESSAGE
         CALL  ISPLINK,(DISPLAY,,MSG,CURSOR),VL
         LTR   R15,R15            CONTINUE ?
         BZ    ENTRY060           YES - TRY AGAIN
         B     ENTRY810           NO - UPDATE PROFILE AND EXIT
BBB066   EQU   *
         TM    DS1DSORG,DCBDSGPO  PDS ?
         BO    CCC066             YES - OK
         TM    DS1DSORG,DCBDSGPS  SEQ ?
         BO    DDD066
         TM    DS1DSORG,DCBDSGDA  BDAM ?
         BO    ZZZ066
*        ERROR
CCC066   EQU   *
         OI    FLAG,PDS           INDICATE PDS
         B     EEE066
DDD066   EQU   *
         OI    FLAG,SEQ
EEE066   EQU   *
         MVC   OBJDSN,SRCDSN      MOVE NAME TO OBJECT LIBRARY
         MVC   LOADDSN,SRCDSN     MOVE NAME TO LOAD LIBRARY
         LA    R1,OBJDSN          DATA SET NAME
         LA    R2,OBJDSN          DATA SET NAME
LOOP066A EQU   *
         CLI   0(R1),C' '         END OF NAME ?
         BE    GGG066
         CLI   0(R1),C'.'         FIND A DOT
         BNE   FFF066             NOT HERE
         LR    R2,R1              SAVE ADDR OF DOT
NOP066A  NOP   FFF066             SAVE FIRST DOT IN R3
         LR    R3,R1
         MVI   NOP066A+1,X'F0'    SET TO BRANCH
FFF066   EQU   *
         LA    R1,1(R1)           BUMP
         B     LOOP066A
GGG066   EQU   *
         MVI   NOP066A+1,X'00'    SET TO NOP FOR NEXT TIME
         LA    R2,1(R2)           BUMP PAST DOT
         MVC   0(8,R2),=CL8'OBJ'  ADD LAST QUALIFIER
         LA    R1,LOADDSN         DATA SET NAME
         LA    R2,LOADDSN         DATA SET NAME
LOOP066B EQU   *
         CLI   0(R1),C' '         END OF NAME ?
         BE    III066
         CLI   0(R1),C'.'         FIND A DOT
         BNE   HHH066             NOT HERE
         LR    R2,R1              SAVE ADDR OF DOT
HHH066   EQU   *
         LA    R1,1(R1)           BUMP
         B     LOOP066B
III066   EQU   *
         LA    R2,1(R2)           BUMP PAST DOT
         MVC   0(8,R2),=CL8'LOAD' ADD LAST QUALIFIER
         CLC   CMNCCMBR,BLANKS    IS THERE A MBR NAME ?
         BNE   EXIT066            YES - OK
         MVC   CMNCCMBR(8),1(R3)  MOVE SECOND QUALIFIER TO MBR
         LA    R1,CMNCCMBR
         LA    R2,8               LENGTH
LOOP066C EQU   *
         CLI   0(R1),C'.'         FIND A DOT
         BE    JJJ066             FOUND IT
         CLI   0(R1),C' '         END OF NAME ?
         BE    EXIT066            OK
         LA    R1,1(R1)           BUMP
         BCT   R2,LOOP066C        CHECK AGAIN
         B     EXIT066
JJJ066   EQU   *
         MVI   0(R1),C' '         CLEAR IT
         LA    R1,1(R1)
         BCT   R2,JJJ066          CLEAR REST OF MBR NAME
         B     EXIT066            DONE
ZZZ066   EQU   *
         OI    FLAG,BDAM
EXIT066  EQU   *
         B     ENTRY067
*----------------------------------------------------------------------
LOCLIST  CAMLST  NAME,SRCDSN,,AREA
OBTLIST  CAMLST  SEARCH,SRCDSN,VOLSER,AREA
*----------------------------------------------------------------------
VOLSER   DC   CL6' '
AREA     DS   0D
         ORG  AREA-44            LINE UP IECSDSL1 MACRO WITH THE AREA
         IECSDSL1 (1)
         ORG  IECSDSL1+44
         DC   265C' '            DC FOR AREA
         EJECT
*----------------------------------------------------------------------
*
*        BUILD WORK FILES FOR SOURCE AND OBJECT IF INPUT DATA SET IS
*        A LIBRARY MANAGER DATA SET
*
*----------------------------------------------------------------------
ENTRY067 DS    0H
         TM    FLAG,PDS           PDS ?
         BO    EXIT067            YES - OK
         CLC   DS1LRECL,=H'80'    LRECL=80 ?
         BE    EXIT067            YES - NORMAL SEQUENTIAL FILE
         OI    FLAG,LIBDS         INDICATE LIBRARY MANAGER DATA SET
         MVC   LIBDSN,SRCDSN      SAVE LIB DSNAME
         MVC   SRCDSN,BLANKS      CLEAR
         MVC   SRCDSN(8),ZUSER    USER ID
         LA    R1,SRCDSN          START OF FIELD
LOOP067A EQU   *
         CLI   0(R1),C' '         FIND END
         BE    AAA067             FOUND IT
         LA    R1,1(R1)           BUMP
         B     LOOP067A
AAA067   EQU   *
         MVI   0(R1),C'.'         ADD A DOT
         LA    R1,1(R1)           BUMP
         MVC   0(11,R1),=C'SPFTEMP.OBJ'
         MVC   OBJDSN,SRCDSN      MOVE TO OBJECT NAME
         MVC   0(11,R1),=C'SPFTEMP.SRC'
         MVC   SAVESRCX,SRCDSN    SAVE NAME FOR LATER
         MVC   SAVEOBJX,OBJDSN    SAVE NAME FOR LATER
EXIT067  EQU   *
         B     ENTRY069
         EJECT
*----------------------------------------------------------------------
*
*        INVOKE LIBRARY MANAGER TO RETREIVE SOURCE DATA
*
*----------------------------------------------------------------------
ENTRY069 DS    0H
         TM    FLAG,LIBDS         LIBRARY MANAGER DATA SET ?
         BZ    EXIT069            NO - OK
         TM    FLAG,SEQ           SEQUENTIAL ?
         BZ    AAA069             NO - OK
         ICM   R15,15,SEQEPA      PICK UP EPA OF SEQ LIB MNGR
         BNZ   BBB069             ALREADY LOADED
         LOAD  EP=CMNCCS0         LOAD LIBRARY MGR FOR SEQ FILE
         ST    R0,SEQEPA          SAVE EPA
         LR    R15,R0
         B     BBB069
AAA069   EQU   *
         ICM   R15,15,BDAMEPA     PICK UP EPA OF BDAM LIB MNGR
         BNZ   BBB069             ALREADY LOADED
         LOAD  EP=CMNCCB0         LOAD LIBRARY MGR FOR SEQ FILE
         ST    R0,BDAMEPA         SAVE EPA
         LR    R15,R0
BBB069   EQU   *
         LA    R1,MGRPARMS        ADDR OF PARMS
         BALR  R14,R15            RETRIEVE SOURCE FROM LIB MNGR
         LTR   R15,R15            ANY ERRORS ?
         BZ    EXIT069            NO - CONTINUE
         MVC   CURSOR,=CL8'CMNCCOTH' POSITION CURSOR FOR ERROR
         C     R15,=F'8'          MEMBER NOT FOUND ?
         BE    CCC069             YES - DISPLAY MESSAGE
         MVC   MSG,=CL8'CMN000'   I GIVE UP
         B     DDD069
CCC069   EQU   *
         MVC   MSG,=CL8'CMN004'   MEMBER NOT FOUND MESSAGE
DDD069   EQU   *
         CALL  ISPLINK,(DISPLAY,,MSG,CURSOR)
         LTR   R15,R15            CONTINUE ?
         BZ    ENTRY060           I GAVE UP BUT HE DIDN'T
         B     ENTRY810           HE GAVE UP TOO
EXIT069  EQU   *
         B     ENTRY070
SEQEPA   DC    F'0'
BDAMEPA  DC    F'0'
READ     DC    CL8'READ'
MGRPARMS DS    0F
         DC    A(LIBDSN)           LIBRARY MANAGER DSN
         DC    A(CMNCCMBR)         MEMBER
         DC    A(SRCDSN)           TARGET DATA SET
         DC    A(READ)             READ FUNCTION
         EJECT
*----------------------------------------------------------------------
*
*        ALLOCATE THE SOURCE DATA SET
*
*----------------------------------------------------------------------
ENTRY070 DS    0H
         CLI   SYSIN+8,X'FF'      IS IT ALREADY ALLOCATED ?
         BNE   BBB070             NO - ALLOCATE IT
         CLC   SRCDSN,SAVEDSN     SAME DSN ?
         BNE   AAA070             NO - FREE IT
         CLC   CMNCCMBR,SAVEMBR   SAME MBR ?
         BNE   AAA070             NO - FREE IT
         B     EXIT070            YES - SKIP ALLOCATION
AAA070   EQU   *
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         MVI   DYNTYPE,C'D'       INDICATE DE-ALLOCATE
         MVC   DYNDDNM,SYSIN      MOVE DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT
BBB070   EQU   *
         MVC   SAVEDSN,SRCDSN     SAVE FOR NEXT TIME
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         MVI   DYNTYPE,C'A'
         MVC   DYNDDNM,SYSIN      SYSIN DDNAME FOR COMPILER
         MVC   DYNDSN,SRCDSN      SOURCE LIBARY NAME
         TM    FLAG,PDS           IS IT A PDS ?
         BZ    XXX070             NO - SKIP MEMBER NAME
         MVC   DYNMBR,CMNCCMBR    MEMBER NAME
XXX070   EQU   *
         MVI   DYNDISP1,DYNSHR    DISP=SHR
         BAL   R14,ENTRY900
         CLC   DYNR15,=4C'0'      ANY ERRORS ?
         BE    EXIT070            NO - OK
         MVC   MSG,=CL8'DYN006'   DATA SET NOT CATALOGED MESSAGE
         CLC   DYNERR,=C'1708'    DATA SET NOT FOUND ?
         BE    CCC070             YES - INFORM USER
         MVC   CURSOR,=CL8'CMNCCMBR' POSITION CURSOR FOR ERROR
         MVC   MSG,=CL8'DYN007'   MEMBER NOT SPECIFIED MESSAGE
         CLC   DYNERR,=C'035C'    MEMBER NOT SPECIFIED ?
         BE    CCC070             YES - INFORM USER
         B     ERROR2             DISPLAY RETURN CODES
CCC070   EQU   *
         CALL  ISPLINK,(DISPLAY,,MSG,CURSOR),VL
         LTR   R15,R15            CONTINUE ?
         BZ    ENTRY060           YES - TRY AGAIN
         B     ENTRY810           NO - UPDATE PROFILE AND EXIT
EXIT070  EQU   *
         MVI   SYSIN+8,X'FF'      INDICATE ALLOCATED
         B     ENTRY080
         EJECT
*----------------------------------------------------------------------
*
*        VERIFY THAT THE SOURCE MEMBER EXISTS
*
*----------------------------------------------------------------------
ENTRY080 DS    0H
         TM    FLAG,PDS           IS IT A PDS ?
         BZ    EXIT080            NO - SKIP TEST
         MVC   CURSOR,=CL8'CMNCCMBR' POSITION CURSOR FOR ERROR
         LA    R2,SRCDSN          SOURCE DATA SET NAME
         LA    R3,CMNCCMBR        SOURCE MEMBER
         BAL   R14,ENTRY930       VERIFY MEMBER EXISTS
         CLC   BLDL15,=F'0'       MEMBER FOUND ?
         BE    EXIT080            YES - OK
         MVC   MSG,=CL8'CMN004'   NO - INFORM USER
         CALL  ISPLINK,(DISPLAY,,MSG,CURSOR),VL
         LTR   R15,R15            CONTINUE ?
         BNE   ENTRY810           NO - UPDATE PROFILE AND EXIT
         B     ENTRY060           YES - TRY AGAIN
EXIT080  EQU   *
         B     ENTRY090
         EJECT
*----------------------------------------------------------------------
*
*        ALLOCATE THE MACRO/COPY LIBRARIES
*
*----------------------------------------------------------------------
ENTRY090 DS    0H
         MVC   CURSOR,=CL8'CMNCCMA1' POSITION CURSOR FOR ERROR
         CLI   CMNCCCMP,C'F'      IS THIS FORTRAN ?
         BE    EXIT090            YES - SYSLIB NOT REQUIRED
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         CLI   SYSLIB+8,X'FF'     IS IT ALREADY ALLOCATED ?
         BNE   EEE090             NO - ALLOCATE IT
         CLC   CMNCCMA1,SAVEMAC1  SAME DSN ?
         BNE   AAA090             NO - FREE IT
         CLC   CMNCCMA2,SAVEMAC2  SAME DSN ?
         BNE   AAA090             NO - FREE IT
         CLC   CMNCCMA3,SAVEMAC3  SAME DSN ?
         BNE   AAA090             NO - FREE IT
         CLC   CMNCCMA4,SAVEMAC4  SAME DSN ?
         BNE   AAA090             NO - FREE IT
         CLC   CMNCCMA5,SAVEMAC5  SAME DSN ?
         BNE   AAA090             NO - FREE IT
         CLC   CMNCCMA6,SAVEMAC6  SAME DSN ?
         BNE   AAA090             NO - FREE IT
         B     EXIT090            YES - SKIP ALLOCATION
AAA090   EQU   *
         MVI   DYNTYPE,C'D'       INDICATE DE-ALLOCATE
         MVC   DYNDDNM,SYSLIB     MOVE DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT
         MVI   SYSLIB+8,X'00'     INDICATE NOT ALLOCATED
*
         CLI   LIB5+8,X'FF'       IS THIS ONE ALLOCATED ?
         BNE   BBB090
         MVC   DYNDDNM,LIB5       MOVE DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT
         MVI   LIB5+8,X'00'       INDICATE NOT ALLOCATED
BBB090   EQU   *
         CLI   LIB4+8,X'FF'       IS THIS ONE ALLOCATED ?
         BNE   CCC090
         MVC   DYNDDNM,LIB4       MOVE DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT
         MVI   LIB4+8,X'00'       INDICATE NOT ALLOCATED
CCC090   EQU   *
         CLI   LIB3+8,X'FF'       IS THIS ONE ALLOCATED ?
         BNE   DDD090
         MVC   DYNDDNM,LIB3       MOVE DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT
         MVI   LIB3+8,X'00'       INDICATE NOT ALLOCATED
DDD090   EQU   *
         CLI   LIB2+8,X'FF'       IS THIS ONE ALLOCATED ?
         BNE   EEE090
         MVC   DYNDDNM,LIB2       MOVE DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT
         MVI   LIB2+8,X'00'       INDICATE NOT ALLOCATED
EEE090   EQU   *
         MVC   SAVEMAC1,CMNCCMA1  SAVE IT
         MVC   SAVEMAC2,CMNCCMA2  SAVE IT
         MVC   SAVEMAC3,CMNCCMA3  SAVE IT
         MVC   SAVEMAC4,CMNCCMA4  SAVE IT
         MVC   SAVEMAC5,CMNCCMA5  SAVE IT
         MVC   SAVEMAC6,CMNCCMA6  SAVE IT
         LA    R3,CMNCCMA1        FIRST MACLIB
         LA    R4,SYSLIB          ADDR OF DDNAMES FOR CONCAT
         LA    R5,DDCONCAT        ADDR OF DDNAMES FOR CONCAT
         LA    R6,SYSLIB          ADDR OF CURSOR
         MVC   CURSOR,=CL8'CMNCCMA1' POSITION CURSOR FOR ERROR
LOOP090A EQU   *
         CLI   0(R3),X'FF'        END OF MAC LIBS ?
         BE    KKK090             YES - CONCATENATE WHAT WE HAVE
         CLI   0(R3),C' '         MACRO LIBRARY REQUESTED ?
         BE    JJJ090             NO - TRY THE NEXT ONE
         CLI   0(R3),C'^'         SKIP THIS ONE ?
         BE    JJJ090             YES - OK
         CLI   0(R3),X'7D'        IN QUOTES ?
         BNE   GGG090             NO - ADD PREFIX
         MVC   DYNDSN,BLANKS      CLEAR
         MVC   DYNDSN(43),1(R3)   SKIP QUOTE
         LA    R1,DYNDSN          DSNAME
         LA    R2,43              MAX SEARCH
LOOP090B EQU   *
         CLI   0(R1),X'7D'        FIND ENDING QUOTE
         BE    FFF090             FOUND IT
         LA    R1,1(R1)           BUMP
         BCT   R2,LOOP090B
*   ENDING QUOTE NOT FOUND - INVALID DATA SET NAME
         MVC   MSG,=CL8'CMN002'
         CALL  ISPLINK,(DISPLAY,,MSG,CURSOR),VL
         LTR   R15,R15            CONTINUE PROCESSING ?
         BNZ   ENTRY810           NO - UPDATE PROFILE AND END
         B     ENTRY060           START OVER
FFF090   EQU   *
         MVI   0(R1),C' '         REMOVE QUOTE
         B     III090
GGG090   EQU   *
         MVC   DYNDSN,BLANKS      CLEAR
         MVC   DYNDSN(8),ZPREFIX
         LA    R1,DYNDSN
LOOP090C EQU   *
         CLI   0(R1),C' '         FIND END OF PREFIX
         BE    HHH090             FOUND IT
         LA    R1,1(R1)           BUMP
         B     LOOP090C
HHH090   EQU   *
         MVI   0(R1),C'.'         ADD A DOT
         MVC   1(36,R1),0(R3)     MOVE REST OF NAME
III090   EQU   *
         MVC   DYNDDNM,0(R4)
         MVC   0(8,R5),0(R4)
         MVI   DYNTYPE,C'A'
         MVI   DYNDISP1,DYNSHR
         BAL   R14,ENTRY900
         CLC   DYNR15,=4C'0'      OK ?
         BNE   ERROR2             NO -SERIOUS ERROR
         MVI   8(R4),X'FF'        INDICATE ALLOCATED
         LA    R5,8(R5)           BUMP DDNAME LIST
         LA    R4,9(R4)           BUMP TO NEXT DDNAME
JJJ090   EQU   *
         LA    R6,9(R6)           BUMP TO NEXT CURSOR POSITION
         LA    R3,44(R3)          BUMP TO NEXT MACLIB
         MVC   CURSOR,0(R6)       POSITION CURSOR FOR ERROR
         B     LOOP090A           ALLOCATE ALL REQUESTED MACLIBS
KKK090   EQU   *
         LA    R1,DDCONCAT+16     DD NAMES FOR CONCAT
         CR    R5,R1              DID WE HAVE MORE THAN 1 ?
         BL    EXIT090            NO - SKIP CONCAT
         MVI   0(R5),X'FF'        INDICATE END OF DDNAME LIST
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         MVI   DYNTYPE,C'C'       INDICATE CONCATENATION
         MVC   DYNDDNM(80),DDCONCAT  MOVE DDNAME LIST
         BAL   R14,ENTRY900       CONCATENATE MACLIBS
         CLC   DYNR15,=4C'0'      OK ?
         BNE   ERROR2             NO -SERIOUS ERROR
EXIT090  EQU   *
         B     ENTRY100
         EJECT
*----------------------------------------------------------------------
*
*        ALLOCATE SYSPRINT
*
*----------------------------------------------------------------------
ENTRY100 DS    0H
         MVC   CURSOR,=CL8'CMNFCLID' POSITION CURSOR FOR ERROR
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         CLI   SYSPRINT+8,X'FF'   IS IT ALREADY ALLOCATED ?
         BNE   BBB100             NO - ALLOCATE IT
         CLC   SAVELID,CMNFCLID   SAME DSN ?
         BNE   AAA100
         CLI   CMNFCLID,C' '      USE A DEFAULT ?
         BNE   EXIT100            NO - ALREADY ALLOCATED
         CLC   SAVEMBR,CMNCCMBR   SAME MEMBER ? (DEFAULT LISTID)
         BE    EXIT100            YES - ALREADY ALLOCATED
AAA100   EQU   *                  NO - FREE IT
         MVI   DYNTYPE,C'D'       INDICATE DE-ALLOCATE
         MVC   DYNDDNM,SYSPRINT   MOVE DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT
BBB100   EQU   *
         CLI   CMNFCLID,C'^'      IGNORE IT ?
         BE    EXIT100            YES - OK
CCC100   EQU   *
         MVC   SAVELID,CMNFCLID   SAVE IT
         CLC   CMNFCLID,BLANKS    USE DEFAULT OF SOURCE MBR NAME ?
         BNE   DDD100             NO - OK
         MVC   CMNFCLID,CMNCCMBR
DDD100   EQU   *
         MVI   DYNTYPE,C'A'       INDICATE ALLOCATE
         MVI   DYNDISP1,DYNSHR
         MVC   DYNDDNM,SYSPRINT   DDNAME FOR SYSPRINT
         MVC   DYNDSN,BLANKS      CLEAR
         MVC   DYNDSN(8),ZPREFIX  MOVE PREFIX
         LA    R1,DYNDSN          ADDR OF DSN
LOOP100A EQU   *
         CLI   0(R1),C' '         FIND END
         BE    EEE100
         LA    R1,1(R1)           BUMP
         B     LOOP100A
EEE100   EQU   *
         MVI   0(R1),C'.'         ADD DOT
         LA    R1,1(R1)           BUMP
         MVC   0(8,R1),CMNFCLID   MOVE LIST ID
LOOP100B EQU   *
         CLI   0(R1),C' '         FIND END
         BE    FFF100
         LA    R1,1(R1)           BUMP
         B     LOOP100B
FFF100   EQU   *
         MVI   0(R1),C'.'
         MVC   1(4,R1),=C'LIST'   ADD TYPE
         BAL   R14,ENTRY900       ALLOCATE IT
         CLC   DYNR15,=4C'0'      OK ?
         BE    ZZZ100             YES
         CLC   DYNERR,=C'1708'    DATA SET NOT CATALOGED CONDTION ?
         BNE   ERROR2             NO - SERIOUS ERROR
         MVI   DYNDISP1,DYNNEW    YES - CREATE A LIST DATA SET
         MVI   DYNDISP2,DYNCAT    CATALOG
         MVI   DYNDISP3,DYNCAT    CATALOG
         MVC   DYNBTC,=C'TRK'     ALLOCATE IN TRACKS
         MVC   DYNPRIM,=AL3(10)   10 PRIMARY
         MVC   DYNSEC,=AL3(10)    10 SECONDARY
         MVI   DYNRECFM,DYNFBA
         CLC   CMNCCCMP,=CL8'ASMH'  IS THIS ASSEMBLER 'H' ?
         BE    ASMH100             YES - OK
         CLC   CMNCCCMP,=CL8'ASMF'  IS THIS ASSEMBLER 'F' ?
         BE    ASMF100             YES - OK
         CLC   CMNCCCMP,=CL8'COBOL' IS THIS COBOL ?
         BE    COBOL100            YES - OK
         CLC   CMNCCCMP,=CL8'FORTG' IS THIS FORTG ?
         BE    FORTG100            YES - OK
         CLC   CMNCCCMP,=CL8'FORTH' IS THIS FORTH ?
         BE    FORTH100            YES - OK
         CLC   CMNCCCMP,=CL8'PL1F'  IS THIS PL1 F ?
         BE    PL1F100             YES - OK
         CLC   CMNCCCMP,=CL8'PL1O'  IS THIS PL1 F ?
         BE    PL1O100             YES - OK
FORTG100 EQU   *
         MVC   DYNBLKSZ,=H'6120'  BLOCKSIZE
         MVC   DYNLRECL,=H'120'
         B     YYY100
ASMH100  EQU   *
ASMF100  EQU   *
COBOL100 EQU   *
FORTH100 EQU   *
PL1F100  EQU   *
PL1O100  EQU   *
         MVC   DYNBLKSZ,=H'6171'  BLOCKSIZE
         MVC   DYNLRECL,=H'121'
YYY100   EQU   *
         BAL   R14,ENTRY900       ALLOCATE IT
         CLC   DYNR15,=4C'0'      CREATED OK ?
         BNE   ERROR2             NO - FORGET IT !!!
ZZZ100   EQU   *
         MVC   CMNFCLID,SAVELID   RESTORE IF IT WAS BLANKS
         MVI   SYSPRINT+8,X'FF'   INDICATE ALLOCATED
EXIT100  EQU   *
         B     ENTRY105
         EJECT
*----------------------------------------------------------------------
*
*        SYSTERM - ALWAYS DE-ALLOCATE/ALLOCATE BECAUSE OF DIFFERENT
*                  ATTRIBUTES USED BY DIFFERENT COMPILERS.
*                  ALSO, LEAVE IT ALLOCATED WHEN FINISHED.
*
*----------------------------------------------------------------------
ENTRY105 DS    0H
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         MVI   DYNTYPE,C'D'       INDICATE DE-ALLOCATE
         MVI   DYNUNALC,X'FF'     PERM ATTR
         MVC   DYNDDNM,=CL8'SYSTERM'  DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT
         MVI   DYNTYPE,C'A'       INDICATE ALLOCATE
         MVI   DYNTERM,X'FF'      INDICATE TERMINAL
         MVI   DYNUNALC,X'00'     PERM ATTR
         BAL   R14,ENTRY900       ALLOCATE IT
         CLC   DYNR15,=4C'0'      OK ?
         BNE   ERROR2             NO - SERIOUS ERROR
EXIT105  EQU   *
         B     ENTRY110
         EJECT
*----------------------------------------------------------------------
*
*        ALLOCATE THE OBJECT DATA SET
*
*----------------------------------------------------------------------
ENTRY110 DS    0H
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         CLI   SYSPUNCH+8,X'FF'   IS IT ALREADY ALLOCATED ?
         BNE   BBB110             NO - ALLOCATE IT
         CLC   SAVEOBJ,OBJDSN     SAME DSN ?
         BNE   AAA110             NO - DE-ALLOCATE
         CLC   SAVEMBR,CMNCCMBR   SAME MBR ?
         BE    EXIT110            YES - SKIP ALLOCATION
AAA110   EQU   *                  NO - FREE IT
         MVI   DYNTYPE,C'D'       INDICATE DE-ALLOCATE
         MVC   DYNDDNM,SYSPUNCH   MOVE DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT
         MVI   SYSPUNCH+8,X'00'   RESET FLAG
         MVI   DYNTYPE,C'D'       INDICATE DE-ALLOCATE
         MVC   DYNDDNM,SYSLIN     MOVE DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT
         MVI   SYSLIN+8,X'00'     RESET FLAG
BBB110   EQU   *
         MVC   SAVEOBJ,OBJDSN     SAVE IT
         MVC   SAVEMBR,CMNCCMBR   SAVE IT
         MVI   DYNTYPE,C'A'
         MVI   DYNDISP1,DYNSHR
         MVC   DYNDDNM,SYSPUNCH   DDNAME FOR SYSPUNCH
         MVC   DYNDSN,OBJDSN      MOVE OBJECT DSN
         TM    FLAG,PDS           IS IT A PDS ?
         BZ    XXX110             NO - SKIP MBR
         MVC   DYNMBR,CMNCCMBR    MOVE MEMBER NAME
XXX110   EQU   *
         BAL   R14,ENTRY900       ALLOCATE IT
         CLC   DYNR15,=4C'0'      OK ?
         BE    CCC110             YES
         CLC   DYNERR,=C'1708'    DATA SET NOT CATALOGED CONDTION ?
         BNE   ERROR2             NO - SERIOUS ERROR
         MVI   DYNDISP1,DYNNEW    YES - CREATE AN OBJ DATA SET
         MVI   DYNDISP2,DYNCAT    CATALOG
         MVI   DYNDISP3,DYNCAT    CATALOG
         MVC   DYNBTC,=C'TRK'     ALLOCATE IN TRACKS
         MVC   DYNPRIM,=AL3(10)   10 PRIMARY
         MVC   DYNSEC,=AL3(10)    10 SECONDARY
         MVC   DYNBLKSZ,=H'3200'  BLOCKSIZE
         MVC   DYNLRECL,=H'80'    LRECL
         MVI   DYNRECFM,DYNFB     RECFM=FB
         TM    FLAG,PDS           IS IT A PDS ?
         BZ    YYY110             NO - SKIP MBR
         MVC   DYNDIR,=AL3(10)    10 DIRECTORY BLOCKS
         MVC   DYNMBR,CMNCCMBR    MOVE MEMBER NAME
YYY110   EQU   *
         BAL   R14,ENTRY900       ALLOCATE IT
         CLC   DYNR15,=4C'0'      CREATED OK ?
         BNE   ERROR2             NO - I GIVE UP
         TM    FLAG,PDS           IS IT A PDS ?
         BZ    CCC110             NO - SKIP RE-ALLOCATE
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       LENGTH
         MVC   DYNDDNM,SYSPUNCH   DDNAME
         MVI   DYNTYPE,C'D'       YES - NOW FREE THE NEW ONE
         BAL   R14,ENTRY900
         B     ENTRY110           RE-ALLOCATE SHR TO AVOID B14 ABEND
CCC110   EQU   *
         MVI   DYNTYPE,C'A'
         MVI   DYNDISP1,DYNSHR    DISP=SHR
         MVC   DYNDDNM,SYSLIN     DDNAME FOR OBJECT (USED FOR LINK)
         MVC   DYNDSN,OBJDSN      MOVE OBJECT DSN
         TM    FLAG,PDS           IS IT A PDS ?
         BZ    ZZZ110             NO - SKIP MBR
         MVC   DYNMBR,CMNCCMBR    MOVE MEMBER NAME
ZZZ110   EQU   *
         BAL   R14,ENTRY900       ALLOCATE IT
         CLC   DYNR15,=4C'0'      OK ?
         BNE   ERROR2             NO - SERIOUS ERROR
EXIT110  EQU   *
         MVI   SYSPUNCH+8,X'FF'   INDICATE ALLOCATED
         MVI   SYSLIN+8,X'FF'     INDICATE ALLOCATED
         B     ENTRY120
         EJECT
*----------------------------------------------------------------------
*
*        DETERMINE COMPILER
*
*----------------------------------------------------------------------
ENTRY120 DS    0H
         MVC   CURSOR,=CL8'CMNCCCMP' POSITION CURSOR FOR ERROR
         CLC   CMNCCCMP,=CL8'ASMH'
         BNE   AAA120
         MVC   COMPILER,ASMH
         CLI   COMPILER,C'?'      COMPILER SUPPORTED ?
         BE    GGG120             NO - INFORM USER
         B     ENTRY200
AAA120   EQU   *
         CLC   CMNCCCMP,=CL8'COBOL'
         BNE   BBB120
         MVC   COMPILER,COBOL
         CLI   COMPILER,C'?'      COMPILER SUPPORTED ?
         BE    GGG120             NO - INFORM USER
         B     ENTRY300
BBB120   EQU   *
         CLC   CMNCCCMP,=CL8'FORTG'
         BNE   CCC120
         MVC   COMPILER,FORTG
         CLI   COMPILER,C'?'      COMPILER SUPPORTED ?
         BE    GGG120             NO - INFORM USER
         B     ENTRY400
CCC120   EQU   *
         CLC   CMNCCCMP,=CL8'FORTH'
         BNE   DDD120
         MVC   COMPILER,FORTH
         CLI   COMPILER,C'?'      COMPILER SUPPORTED ?
         BE    GGG120             NO - INFORM USER
         B     ENTRY400
DDD120   EQU   *
         CLC   CMNCCCMP,=CL8'ASMF'
         BNE   EEE120
         MVC   COMPILER,ASMF
         CLI   COMPILER,C'?'      COMPILER SUPPORTED ?
         BE    GGG120             NO - INFORM USER
         B     ENTRY200
EEE120   EQU   *
         CLC   CMNCCCMP,=CL8'PL1O'
         BNE   FFF120
         MVC   COMPILER,PL1O
         CLI   COMPILER,C'?'      COMPILER SUPPORTED ?
         BE    GGG120             NO - INFORM USER
         B     ENTRY500
FFF120   EQU   *
         CLC   CMNCCCMP,=CL8'PL1F'
         BNE   HHH120
         MVC   COMPILER,PL1F
         CLI   COMPILER,C'?'      COMPILER SUPPORTED ?
         BE    GGG120             NO - INFORM USER
         B     ENTRY500
GGG120   EQU   *
         MVC   MSG,=CL8'CMN009'
         CALL  ISPLINK,(DISPLAY,,MSG,CURSOR),VL
         B     EXIT120
HHH120   EQU   *
         MVC   MSG,=CL8'CMN008'
         CALL  ISPLINK,(DISPLAY,,MSG,CURSOR),VL
EXIT120  EQU   *
         LTR   R15,R15            CONTINUE ?
         BNZ   ENTRY810           NO - UPDATE PROFILE AND END
         B     ENTRY060
ASMF     DC    CL8'IFOX00'
ASMH     DC    CL8'IEV90'
COBOL    DC    CL8'IKFCBL00'
FORTG    DC    CL8'IGIFORT'
FORTH    DC    CL8'IFEAAB'
PL1O     DC    CL8'?'
PL1F     DC    CL8'IEMAA'
         EJECT
*----------------------------------------------------------------------
*
*        ASSEMBLER - ALLOCATE SYSUT DATA SETS
*
*----------------------------------------------------------------------
ENTRY200 DS    0H
         LA    R1,SYSUT1          DDNAME FOR SYSUT1
         BAL   R14,ENTRY910       ALLOCATE IT
         CLC   CMNCCCMP,=CL8'ASMH' ASSEMBLER 'H' ?
         BE    EXIT200            YES - ONLY NEED SYSUT1
         LA    R1,SYSUT2          DDNAME FOR SYSUT2
         BAL   R14,ENTRY910       ALLOCATE IT
         LA    R1,SYSUT3          DDNAME FOR SYSUT3
         BAL   R14,ENTRY910       ALLOCATE IT
EXIT200  EQU   *
         B     ENTRY210
         EJECT
*----------------------------------------------------------------------
*
*        ASSEMBLER
*
*----------------------------------------------------------------------
ENTRY210 DS    0H
         MVC   ASMXOPTX,CMNFCAHO  MOVE OPTIONS
         CLC   CMNCCCMP,=CL8'ASMH' IS IT 'H' ?
         BE    AAA210             YES - OK
         MVC   ASMXOPTX,CMNFCAFO  MOVE OPTIONS
AAA210   EQU   *
         LA    R1,ASMXOPT         START OF OPTIONS
LOOP210A EQU   *
         CLI   0(R1),C' '         END OF OPTIONS ?
         BE    BBB210             YES - OK
         LA    R1,1(R1)           NO - BUMP
         B     LOOP210A
BBB210   EQU   *
         LA    R14,ASMXOPT        BEGIN
         SR    R1,R14             LENGTH
         STH   R1,ASMXCP          STORE IN LIST
         LOAD  EPLOC=COMPILER
         LR    R15,R0             COMPILER EPA
         LA    R1,ASMHPRMS        COMPILER PARMS
         CLC   CMNCCCMP,=CL8'ASMH' IS IT 'H' ?
         BE    CCC210             YES - OK
         LA    R1,ASMFPRMS        COMPILER PARMS
CCC210   EQU   *
         BALR  R14,R15
         ST    R15,CMPRC          SAVE RETURN CODE
         DELETE  EPLOC=COMPILER
EXIT210  EQU   *
         B     ENTRY700
ASMHPRMS DS    0F
         DC    A(ASMXCP)          ADDR OF COMPILER OPTIONS
         DC    XL1'80'
         DC    AL3(ASMHDDS)       ADDR OF ALTERNATE DDNAMES FOR H
*----------
ASMFPRMS DS    0F
         DC    A(ASMXCP)          ADDR OF COMPILER OPTIONS
         DC    XL1'80'
         DC    AL3(ASMFDDS)       ADDR OF ALTERNATE DDNAMES FOR F
*----------
         CNOP  2,4
ASMXCP   DC    H'0'               LENGTH
ASMXOPT  DC    C'DECK,NOLOAD,'    FIXED OPTIONS
ASMXOPTX DC    CL44' '            USER OPTIONS
*----------
ASMHDDS  DC    AL2(ASMH2-ASMH1)
ASMH1    DC    3XL8'00'
         DC    CL8'ZYSLIB'
         DC    CL8'ZYSIN'
         DC    CL8'ZYSPRINT'
         DC    CL8'ZYSPUNCH'
         DC    CL8'ZYSUT1'
ASMH2    EQU   *
*----------
ASMFDDS  DC    AL2(ASMF2-ASMF1)
ASMF1    DC    3XL8'00'
         DC    CL8'ZYSLIB'
         DC    CL8'ZYSIN'
         DC    CL8'ZYSPRINT'
         DC    CL8'ZYSPUNCH'
         DC    CL8'ZYSUT1'
         DC    CL8'ZYSUT2'
         DC    CL8'ZYSUT3'
ASMF2    EQU   *
         EJECT
*----------------------------------------------------------------------
*
*        COBOL - ALLOCATE SYSUT DATA SETS
*
*----------------------------------------------------------------------
ENTRY300 DS    0H
         LA    R1,SYSUT1          DDNAME FOR SYSUT1
         BAL   R14,ENTRY910       ALLOCATE IT
         LA    R1,SYSUT2          DDNAME FOR SYSUT2
         BAL   R14,ENTRY910       ALLOCATE IT
         LA    R1,SYSUT3          DDNAME FOR SYSUT3
         BAL   R14,ENTRY910       ALLOCATE IT
         LA    R1,SYSUT4          DDNAME FOR SYSUT4
         BAL   R14,ENTRY910       ALLOCATE IT
         LA    R1,SYSUT6          DDNAME FOR SYSUT6
         BAL   R14,ENTRY910       ALLOCATE IT
EXIT300  EQU   *
         B     ENTRY310
         EJECT
*----------------------------------------------------------------------
*
*        COBOL
*
*----------------------------------------------------------------------
ENTRY310 DS    0H
*DBG310  QTPUT 'ENTRY310'
         MVC   COBLOPTX,CMNFCCBO  MOVE OPTIONS
         LA    R1,COBLOPT         START OF OPTIONS
LOOP310A EQU   *
         CLI   0(R1),C' '         END OF OPTIONS ?
         BE    AAA310             YES - OK
         LA    R1,1(R1)           NO - BUMP
         B     LOOP310A
AAA310   EQU   *
         LA    R14,COBLOPT        BEGIN
         SR    R1,R14             LENGTH
         STH   R1,COBLCP          STORE IN LIST
         LOAD  EPLOC=COMPILER
         LR    R15,R0             COMPILER EPA
         LA    R1,COBLPRMS        COMPILER PARMS
         BALR  R14,R15
         ST    R15,CMPRC          SAVE RETURN CODE
         DELETE  EPLOC=COMPILER
EXIT310  EQU   *
         B     ENTRY700
COBLPRMS DS    0F
         DC    A(COBLCP)          ADDR OF COMPILER OPTIONS
         DC    XL1'80'
         DC    AL3(COBLDDS)       ADDR OF ALTERNATE DDNAMES FOR COB
*----------
         CNOP  2,4
COBLCP   DC    H'0'               LENGTH
COBLOPT  DC    C'NOLOAD,DECK,'    FIXED OPTIONS
COBLOPTX DC    CL44' '            USER OPTIONS
*----------
COBLDDS  DC    AL2(COBL2-COBL1)
COBL1    DC    3XL8'00'
         DC    CL8'ZYSLIB'
         DC    CL8'ZYSIN'
         DC    CL8'ZYSPRINT'
         DC    CL8'ZYSPUNCH'
         DC    CL8'ZYSUT1'
         DC    CL8'ZYSUT2'
         DC    CL8'ZYSUT3'
         DC    CL8'ZYSUT4'
         DC    CL8'ZYSUT6'
COBL2    EQU   *
*----------
         EJECT
*----------------------------------------------------------------------
*
*        FORTRAN - ALLOCATE SYSUT DATA SETS
*
*----------------------------------------------------------------------
ENTRY400 DS    0H
         CLC   CMNCCCMP,=CL8'FORTG' FORTRAN G ?
         BE    EXIT400            YES - SYSUT NOT REQUIRED
         LA    R1,SYSUT1          DDNAME FOR SYSUT1
         BAL   R14,ENTRY910       ALLOCATE IT
         LA    R1,SYSUT2          DDNAME FOR SYSUT2
         BAL   R14,ENTRY910       ALLOCATE IT
EXIT400  EQU   *
         B     ENTRY410
         EJECT
*----------------------------------------------------------------------
*
*        FORTRAN
*
*----------------------------------------------------------------------
ENTRY410 DS    0H
         MVC   FORTOPTX,CMNFCFHO  MOVE OPTIONS
         CLC   CMNCCCMP,=CL8'FORTH' IS IT 'H' ?
         BE    AAA410             YES - OK
         MVC   FORTOPTX,CMNFCFGO  MOVE OPTIONS
AAA410   EQU   *
         LA    R1,FORTOPT         START OF OPTIONS
LOOP410A EQU   *
         CLI   0(R1),C' '         END OF OPTIONS ?
         BE    BBB410             YES - OK
         LA    R1,1(R1)           NO - BUMP
         B     LOOP410A
BBB410   EQU   *
         LA    R14,FORTOPT        BEGIN
         SR    R1,R14             LENGTH
         STH   R1,FORTCP          STORE IN LIST
         LOAD  EPLOC=COMPILER
         LR    R15,R0             COMPILER EPA
         LA    R1,FORTPRMS        COMPILER PARMS
         BALR  R14,R15
         ST    R15,CMPRC          SAVE RETURN CODE
         DELETE  EPLOC=COMPILER
EXIT410  EQU   *
         B     ENTRY700
FORTPRMS DS    0F
         DC    A(FORTCP)          ADDR OF COMPILER OPTIONS
         DC    XL1'80'
         DC    AL3(FORTDDS)       ADDR OF ALTERNATE DDNAMES FOR H
*----------
         CNOP  2,4
FORTCP   DC    H'0'               LENGTH
FORTOPT  DC    C'DECK,NOLOAD,'    FIXED OPTIONS
FORTOPTX DC    CL44' '            USER OPTIONS
*----------
         CNOP  2,4
FORTDDS  DC    AL2(FORT2-FORT1)
FORT1    DC    4XL8'00'
         DC    CL8'ZYSIN'
         DC    CL8'ZYSPRINT'
         DC    CL8'ZYSPUNCH'
         DC    CL8'ZYSUT1'
         DC    CL8'ZYSUT2'
         DC    CL8'SYSTERM'
FORT2    EQU   *
*----------
         EJECT
*----------------------------------------------------------------------
*
*        PL1     - ALLOCATE SYSUT DATA SETS
* PL1 DOES NOT WORK - THE ALTERNATE DD NAMES BELOW ARE NOT AT THE
*                     RIGHT DISPLACEMENTS
*
*----------------------------------------------------------------------
ENTRY500 DS    0H
         LA    R1,SYSUT1          DDNAME FOR SYSUT1
         BAL   R14,ENTRY910       ALLOCATE IT
         LA    R1,SYSUT3          DDNAME FOR SYSUT3
         BAL   R14,ENTRY910       ALLOCATE IT
EXIT500  EQU   *
         B     ENTRY510
         EJECT
*----------------------------------------------------------------------
*
*        PL1
*
*----------------------------------------------------------------------
ENTRY510 DS    0H
         MVC   PL1OPTX,CMNFCPOO   MOVE OPTIONS
         CLC   CMNCCCMP,=CL8'PL1O' IS IT 'O' ?
         BE    AAA510             YES - OK
         MVC   PL1OPTX,CMNFCPFO   MOVE OPTIONS
AAA510   EQU   *
         LA    R1,PL1OPT          START OF OPTIONS
LOOP510A EQU   *
         CLI   0(R1),C' '         END OF OPTIONS ?
         BE    BBB510             YES - OK
         LA    R1,1(R1)           NO - BUMP
         B     LOOP510A
BBB510   EQU   *
         LA    R14,PL1OPT         BEGIN
         SR    R1,R14             LENGTH
         STH   R1,PL1CP           STORE IN LIST
         LOAD  EPLOC=COMPILER
         LR    R15,R0             COMPILER EPA
         LA    R1,PL1PRMS         COMPILER PARMS
         BALR  R14,R15
         ST    R15,CMPRC          SAVE RETURN CODE
         DELETE  EPLOC=COMPILER
EXIT510  EQU   *
         B     ENTRY700
PL1PRMS  DS    0F
         DC    A(PL1CP)           ADDR OF COMPILER OPTIONS
         DC    XL1'80'
         DC    AL3(PL1DDS)        ADDR OF ALTERNATE DDNAMES
*----------
         CNOP  2,4
PL1CP    DC    H'0'               LENGTH
PL1OPT   DC    C'DECK,NOLOAD,'    FIXED OPTIONS
PL1OPTX  DC    CL44' '            USER OPTIONS
*----------
PL1DDS   DC    AL2(PL2-PL1)
PL1      DC    4XL8'00'
         DC    CL8'ZYSIN'
         DC    CL8'ZYSPRINT'
         DC    CL8'ZYSPUNCH'
         DC    CL8'ZYSUT1'
         DC    XL8'00'
         DC    CL8'ZYSUT3'
PL2      EQU   *
*----------
         EJECT
*----------------------------------------------------------------------
*
*        LINK-EDIT -
*
*----------------------------------------------------------------------
ENTRY700 DS    0H
*DBG700  QTPUT 'ENTRY700'
         MVC   CURSOR,=CL8'CMNCCMBR' POSITION CURSOR FOR DISPLAY
         L     R1,CMPRC           PICK UP RETURN CODE
         CVD   R1,DBWRD
         MVC   WORK16,EDIT16
         ED    WORK16,DBWRD
         MVC   SPFRC,WORK16+12
         CLC   CMPRC,=F'4'        COMPILE RETURN CODE LESS THAN 4 ?
         BH    ENTRY800           NO - SKIP THE LINK-EDIT
         MVC   CURSOR,=CL8'CMNCCLOP' POSITION CURSOR FOR LINK PANEL
         MVC   PANEL,=CL8'CMNFC10' LINK-EDIT PANEL NAME
         MVC   MSG,=CL8'CMN007'   COMPILE COMPLETE
         CALL  ISPLINK,(DISPLAY,PANEL,MSG,CURSOR),VL
         LTR   R15,R15            CONTINUE ?
         BNZ   ENTRY810           NO - UPDATE PROFILE AND EXIT
EXIT700  EQU   *
         B     ENTRY705
DBWRD    DC    D'0'
EDIT16   DC    X'40202020202020202020202020202120'
WORK16   DC    CL16' '
         EJECT
*----------------------------------------------------------------------
*
*  VERIFY/BUILD DATA SET NAME FOR LINK-EDIT CONTROL INPUT
*
*----------------------------------------------------------------------
ENTRY705 DS    0H
         MVC   CURSOR,=CL8'CMNCCLK1' POSITION CURSOR FOR ERROR
         CLI   CMNCCLK1,C' '      LINK CONTROL CARDS REQUESTED ?
         BE    EXIT705            NO - OK
         CLI   CMNCCLK1,C'^'      SKIP IT ?
         BE    EXIT705            YES - OK
         CLI   CMNCCLK1,C'*'      TERMINAL INPUT ?
         BE    EXIT705            YES - OK
         MVC   LNKDSN,BLANKS      CLEAR
         CLI   CMNCCLK1,X'7D'     DSN IN QUOTES ?
         BNE   BBB705             NO - ADD PREFIX
         MVC   LNKDSN(43),CMNCCLK1+1 SKIP QUOTE
         LA    R1,LNKDSN          DSNAME
         LA    R2,43              MAX SEARCH
LOOP705A EQU   *
         CLI   0(R1),X'7D'        FIND ENDING QUOTE
         BE    AAA705             FOUND IT
         LA    R1,1(R1)           BUMP
         BCT   R2,LOOP705A
*   ENDING QUOTE NOT FOUND - INVALID DATA SET NAME
         MVC   MSG,=CL8'CMN002'
         CALL  ISPLINK,(DISPLAY,,MSG,CURSOR),VL
         LTR   R15,R15            CONTINUE PROCESSING ?
         BNZ   ENTRY810           NO - UPDATE PROFILE AND END
         B     ENTRY705           START OVER
AAA705   EQU   *
         MVI   0(R1),C' '         REMOVE QUOTE
         B     EXIT705
BBB705   EQU   *
         MVC   LNKDSN(8),ZPREFIX
         LA    R1,LNKDSN
LOOP705B EQU   *
         CLI   0(R1),C' '         FIND END OF PREFIX
         BE    CCC705             FOUND IT
         LA    R1,1(R1)           BUMP
         B     LOOP705B
CCC705   EQU   *
         MVI   0(R1),C'.'         ADD A DOT
         MVC   1(36,R1),CMNCCLK1  MOVE REST OF NAME
EXIT705  EQU   *
         B     ENTRY710
         EJECT
*----------------------------------------------------------------------
*
*        VERIFY THAT THE LINK CONTROL MEMBER EXISTS
*
*----------------------------------------------------------------------
ENTRY710 DS    0H
         MVC   CURSOR,=CL8'CMNCCLK2' POSITION CURSOR FOR ERROR
         CLI   CMNCCLK1,C' '      LINK CONTROL CARDS REQUESTED ?
         BE    EXIT710            NO - OK
         CLI   CMNCCLK1,C'^'      LINK CONTROL CARDS REQUESTED ?
         BE    EXIT710            NO - OK
         CLI   CMNCCLK1,C'*'      TERMINAL INPUT ?
         BE    EXIT710            YES - OK
         LA    R2,LNKDSN          LINK CNTL DATA SET NAME
         LA    R3,CMNCCLK2        LINK CNTL MEMBER
         CLI   CMNCCLK2,C' '      USE SAME NAME AS SOURCE MEMBER ?
         BNE   AAA710             NO - OK
         LA    R3,CMNCCMBR        YES - USE IT
AAA710   EQU   *
         BAL   R14,ENTRY930       VERIFY MEMBER EXISTS
         CLC   DYNR15,=4C'0'      DATA SET ALLOCATED OK ?
         BE    BBB710             YES - CONTINUE
         CLC   DYNERR,=C'1708'    DATA SET NOT CATALOGED ?
         BNE   ERROR3             NO - SERIOUS ERROR
         MVC   CURSOR,=CL8'CMNCCLK1' POSITION CURSOR FOR ERROR
         MVC   MSG,=CL8'DYN006'   YES - DATA SET NOT CATALOGED MESSAGE
         B     CCC710
BBB710   EQU   *
         CLC   BLDL15,=F'0'       MEMBER FOUND ?
         BE    EXIT710            YES - OK
         MVC   MSG,=CL8'CMN004'   NO - INFORM USER
CCC710   EQU   *
         CALL  ISPLINK,(DISPLAY,,MSG,CURSOR),VL
         LTR   R15,R15            CONTINUE ?
         BNE   ENTRY810           NO - UPDATE PROFILE AND EXIT
         B     ENTRY705           YES - TRY AGAIN
EXIT710  EQU   *
         B     ENTRY715
         EJECT
*----------------------------------------------------------------------
*
*        LINK-EDIT - ALLOCATE THE CONTROL CARD DATA SET IF SPECIFIED
*
*----------------------------------------------------------------------
ENTRY715 DS    0H
         MVC   CURSOR,=CL8'CMNCCLK1' POSITION CURSOR FOR ERROR
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         CLI   CMNCCLK1,C' '      LINK CONTROL CARDS REQUESTED ?
         BE    EXIT715            NO - OK
         CLI   CMNCCLK1,C'^'      LINK CONTROL CARDS REQUESTED ?
         BE    EXIT715            NO - OK
AAA715   EQU   *
         CLI   SYSLIN2+8,X'FF'    IS IT ALREADY ALLOCATED ?
         BNE   CCC715             NO - ALLOCATE IT
         CLC   SAVELK1,LNKDSN     SAME DATA SET ?
         BNE   BBB715             NO - DE-ALLOCATE
         CLI   CMNCCLK2,C' '      USE SAME AS SOURCE ?
         BE    BBB715             YES - DE-ALLOCATE/ALLOCATE
         CLC   SAVELK2,CMNCCLK2   SAME MEMBER ?
         BE    EXIT715            YES - SKIP ALLOCATION
BBB715   EQU   *                  NO - DE-ALLOCATE
         MVI   DYNTYPE,C'D'       INDICATE DE-ALLOCATE
         MVC   DYNDDNM,SYSLIN     MOVE DDNAME - 1ST SYSLIN  (OBJECT)
         BAL   R14,ENTRY900       DE-ALLOCATE - (DECONCATENATE)
         MVI   SYSLIN+8,X'00'     RESET FLAG
         MVC   DYNDDNM,SYSLIN2    MOVE DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE
         MVI   SYSLIN2+8,X'00'    RESET FLAG
         MVI   DYNTYPE,C'A'       ALLOCATE
         MVC   DYNDDNM,SYSLIN     FIRST SYSLIN (OBJECT DATA SET)
         MVC   DYNDSN,OBJDSN      DSNAME
         TM    FLAG,PDS           IS IT A PDS ?
         BZ    XXX715             NO - SKIP MEMBER NAME
         MVC   DYNMBR,CMNCCMBR    MBR
XXX715   EQU   *
         MVI   DYNDISP1,DYNSHR    DISP=SHR
         BAL   R14,ENTRY900       ALLOCATE IT AGAIN
         CLC   DYNR15,=4C'0'      OK ?
         BNE   ERROR3             NO - SHOULD HAVE WORKED
         MVI   SYSLIN+8,X'FF'     INDICATE ALLOCATED
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       LENGTH
CCC715   EQU   *
         MVI   DYNTYPE,C'A'       ALLOCATE
         CLI   CMNCCLK1,C'*'      TERMINAL INPUT FOR LINK-EDIT ?
         BNE   DDD715             NO - OK
         MVI   DYNTERM,X'FF'      INDICATE TERMINAL
         MVC   DYNDDNM,SYSLIN2    DDNAME
         BAL   R14,ENTRY900       ALLCOATE IT
         CLC   DYNR15,=4C'0'      ANY ERRORS ?
         BNE   ERROR3             YES - DISPLAY
         B     ZZZ715
DDD715   EQU   *
         MVC   DYNDSN,LNKDSN      MOVE DSN
         MVC   DYNDDNM,SYSLIN2    DDNAME
         MVC   DYNMBR,CMNCCLK2    MEMBER NAME
         CLI   CMNCCLK2,C' '      USE SAME NAME AS SOURCE MBR ?
         BNE   EEE715             NO - OK
         MVC   DYNMBR,CMNCCMBR    YES - USE IT
EEE715   EQU   *
         MVI   DYNDISP1,DYNSHR    DISP=SHR
         BAL   R14,ENTRY900
         CLC   DYNR15,=4C'0'      OK ?
         BNE   ERROR3             NO -SERIOUS ERROR
ZZZ715   EQU   *
         MVI   SYSLIN2+8,X'FF'    INDICATE ALLOCATED
         MVC   SAVELK1,LNKDSN     SAVE
         MVC   SAVELK2,CMNCCLK2   SAVE
EXIT715  EQU   *
         B     ENTRY720
         EJECT
*----------------------------------------------------------------------
*
*        CONCATENATE LINK CONTROL CARD AND OBJECT
*
*----------------------------------------------------------------------
ENTRY720 DS    0H
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         CLI   SYSLIN2+8,X'FF'    IS SYSLIN2 ALLOCATED ?
         BNE   EXIT720            NO - DONE
         MVI   DYNTYPE,C'C'       CONCATENATE INDICATOR
         MVC   DYNDDNM(8),SYSLIN  1ST DDNAME
         MVC   DYNDDNM+8(8),SYSLIN2  2ND DDNAME
         MVI   DYNDDNM+16,X'FF'   END OF LIST
         BAL   R14,ENTRY900       CONCATENATE
EXIT720  EQU   *
         B     ENTRY725
         EJECT
*----------------------------------------------------------------------
*
*        LINK-EDIT - ALLOCATE SYSUT1
*
*----------------------------------------------------------------------
ENTRY725 DS    0H
         LA    R1,SYSUT1          DDNAME
         BAL   R14,ENTRY910       ALLOCATE A SYSUT1
EXIT725  EQU   *
         B     ENTRY730
         EJECT
*----------------------------------------------------------------------
*
*        LINK-EDIT - SYSPRINT
*
*----------------------------------------------------------------------
ENTRY730 DS    0H
         MVC   CURSOR,=CL8'CMNFCLKD' POSITION CURSOR FOR ERROR
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         CLI   LKDPRINT+8,X'FF'   IS IT ALREADY ALLOCATED ?
         BNE   BBB730             NO - ALLOCATE IT
         CLC   SAVELKD,CMNFCLKD   SAME DSN ?
         BE    EXIT730            YES - SKIP ALLOCATION
AAA730   EQU   *                  NO - FREE IT
         MVI   DYNTYPE,C'D'       INDICATE DE-ALLOCATE
         MVC   DYNDDNM,LKDPRINT   MOVE DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT
BBB730   EQU   *
         CLI   CMNFCLKD,C'*'      TERMINAL ?
         BNE   CCC730             NO - OK
         MVC   SAVELKD,CMNFCLKD   SAVE IT
         MVI   DYNTYPE,C'A'       ALLOCATE
         MVC   DYNDDNM,LKDPRINT   DDNAME
         MVI   DYNTERM,X'FF'      TERMINAL
         BAL   R14,ENTRY900
         CLC   DYNR15,=4C'0'      ANY ERRORS ?
         BE    ZZZ730             NO
         B     ERROR3
CCC730   EQU   *
         MVC   SAVELKD,CMNFCLKD   SAVE IT
         CLI   CMNFCLKD,C' '      DEFAULT TO SAME AS INPUT MBR ?
         BNE   DDD730             NO - OK
         MVC   CMNFCLKD,CMNCCMBR  YES - MOVE MEMBER NAME
DDD730   EQU   *
         MVI   DYNTYPE,C'A'       INDICATE ALLOCATE
         MVI   DYNDISP1,DYNSHR
         MVC   DYNDDNM,LKDPRINT   DDNAME FOR SYSPRINT
         MVC   DYNDSN,BLANKS      CLEAR
         MVC   DYNDSN(8),ZPREFIX  MOVE PREFIX
         LA    R1,DYNDSN          ADDR OF DSN
LOOP730A EQU   *
         CLI   0(R1),C' '         FIND END
         BE    EEE730
         LA    R1,1(R1)           BUMP
         B     LOOP730A
EEE730   EQU   *
         MVI   0(R1),C'.'         ADD DOT
         LA    R1,1(R1)           BUMP
         MVC   0(8,R1),CMNFCLKD   MOVE LIST ID
LOOP730B EQU   *
         CLI   0(R1),C' '         FIND END
         BE    FFF730
         LA    R1,1(R1)           BUMP
         B     LOOP730B
FFF730   EQU   *
         MVI   0(R1),C'.'
         MVC   1(8,R1),=C'LINKLIST'  ADD TYPE
         BAL   R14,ENTRY900       ALLOCATE IT
         CLC   DYNR15,=4C'0'      OK ?
         BE    ZZZ730             YES
         CLC   DYNERR,=C'1708'    DATA SET NOT CATALOGED CONDTION ?
         BNE   ERROR3             NO - SERIOUS ERROR
         MVI   DYNDISP1,DYNNEW    YES - CREATE A LIST DATA SET
         MVI   DYNDISP2,DYNCAT    CATALOG
         MVI   DYNDISP3,DYNCAT    CATALOG
         MVC   DYNBTC,=C'TRK'     ALLOCATE IN TRACKS
         MVC   DYNPRIM,=AL3(10)   10 PRIMARY
         MVC   DYNSEC,=AL3(10)    10 SECONDARY
         MVC   DYNBLKSZ,=H'121'   BLOCKSIZE
         MVC   DYNLRECL,=H'121'
         MVI   DYNRECFM,DYNF
         BAL   R14,ENTRY900       ALLOCATE IT
         CLC   DYNR15,=4C'0'      CREATED OK ?
         BNE   ERROR3             NO - FORGET IT !!!
ZZZ730   EQU   *
         MVC   CMNFCLKD,SAVELKD   RESTORE IF IT WAS BLANK
         MVI   LKDPRINT+8,X'FF'   INDICATE ALLOCATED
EXIT730  EQU   *
         B     ENTRY735
         EJECT
*----------------------------------------------------------------------
*
*  VERIFY/BUILD DATA SET NAME FOR OPTIONAL SYSLMOD
*
*----------------------------------------------------------------------
ENTRY735 DS    0H
         MVC   CURSOR,=CL8'CMNFCMOD' POSITION CURSOR FOR ERROR
         CLI   CMNFCMOD,C' '      SYSLMOD REQUESTED ?
         BE    EXIT735            NO - OK
         CLI   CMNFCMOD,C'^'      SKIP IT ?
         BE    EXIT735            YES - OK
         MVC   LOADDSN,BLANKS     CLEAR
         CLI   CMNFCMOD,X'7D'     DSN IN QUOTES ?
         BNE   BBB735             NO - ADD PREFIX
         MVC   LOADDSN(43),CMNFCMOD+1 SKIP QUOTE
         LA    R1,LOADDSN         DSNAME
         LA    R2,43              MAX SEARCH
LOOP735A EQU   *
         CLI   0(R1),X'7D'        FIND ENDING QUOTE
         BE    AAA735             FOUND IT
         LA    R1,1(R1)           BUMP
         BCT   R2,LOOP735A
*   ENDING QUOTE NOT FOUND - INVALID DATA SET NAME
         MVC   MSG,=CL8'CMN002'
         CALL  ISPLINK,(DISPLAY,,MSG,CURSOR),VL
         LTR   R15,R15            CONTINUE PROCESSING ?
         BNZ   ENTRY810           NO - UPDATE PROFILE AND END
         B     ENTRY705           START OVER
AAA735   EQU   *
         MVI   0(R1),C' '         REMOVE QUOTE
         B     DDD735
BBB735   EQU   *
         MVC   LOADDSN(8),ZPREFIX
         LA    R1,LOADDSN
LOOP735B EQU   *
         CLI   0(R1),C' '         FIND END OF PREFIX
         BE    CCC735             FOUND IT
         LA    R1,1(R1)           BUMP
         B     LOOP735B
CCC735   EQU   *
         MVI   0(R1),C'.'         ADD A DOT
         MVC   1(36,R1),CMNFCMOD  MOVE REST OF NAME
DDD735   EQU   *
         LA    R1,LOADDSN         START OF DSN
         LA    R2,44              LIMIT
LOOP735C EQU   *
         CLI   0(R1),C'('         FIND MEMBER NAME
         BE    EEE735             FOUND IT
         LA    R1,1(R1)           BUMP
         BCT   R2,LOOP735C
         B     EXIT735
EEE735   EQU   *
         LA    R2,CMNCCMBR
         MVC   CMNCCMBR,BLANKS    CLEAR
LOOP735D EQU   *
         MVI   0(R1),C' '         CLEAR
         LA    R1,1(R1)           BUMP
         CLI   0(R1),C')'         END OF MEMBER ?
         BE    FFF735             YES - OK
         MVC   0(1,R2),0(R1)      MOVE MBR NAME, 1 AT A TIME
         LA    R2,1(R2)           BUMP MBR NAME
         B     LOOP735D
FFF735   EQU   *
         MVI   0(R1),C' '         CLEAR
EXIT735  EQU   *
         B     ENTRY740
         EJECT
*----------------------------------------------------------------------
*
*        ALLOCATE SYSLMOD
*
*----------------------------------------------------------------------
ENTRY740 DS    0H
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         CLI   SYSLMOD+8,X'FF'    ALREADY ALLOCATED ?
         BNE   BBB740             NO - ALLOCATE
         CLC   SAVEMODL,LOADDSN   SAME DATA SET ?
         BNE   AAA740             NO - DEALLOCATE
         CLC   SAVEMODM,CMNCCMBR  SAME MEMBER ?
         BE    EXIT740            YES - ALREADY ALLOCATED
AAA740   EQU   *                  NO - DE-ALLOCATE
         MVI   DYNTYPE,C'D'       INDICATE DE-ALLOCATE
         MVC   DYNDDNM,SYSLMOD    MOVE DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE
         MVI   SYSLMOD+8,X'00'    RESET FLAG
BBB740   EQU   *
         MVI   DYNTYPE,C'A'
         MVC   DYNDDNM,SYSLMOD    DDNAME
         MVC   DYNDSN,LOADDSN     DSNAME
         MVC   DYNMBR,CMNCCMBR    MEMBER
         MVI   DYNDISP1,DYNSHR    DISP=SHR
CCC740   EQU   *
         BAL   R14,ENTRY900       ALLOCATE
         CLC   DYNR15,=4C'0'      OK ?
         BE    DDD740             YES -
         CLC   DYNERR,=C'1708'    DATA SET NOT CATALOGED CONDTION ?
         BNE   ERROR3             NO - SERIOUS ERROR
         MVI   DYNDISP1,DYNNEW    YES - CREATE A LOAD DATA SET
         MVI   DYNDISP2,DYNCAT    CATALOG
         MVI   DYNDISP3,DYNCAT    CATALOG
         MVC   DYNBTC,=C'TRK'     ALLOCATE IN TRACKS
         MVC   DYNPRIM,=AL3(10)   10 PRIMARY
         MVC   DYNSEC,=AL3(10)    10 SECONDARY
         MVC   DYNBLKSZ,=H'19069' BLOCKSIZE
         MVC   DYNLRECL,=H'00'    LRECL
         MVI   DYNRECFM,DYNU      RECFM=U
         MVC   DYNDIR,=AL3(10)    10 DIRECTORY BLOCKS
         MVC   DYNMBR,CMNCCMBR    MOVE MEMBER NAME
         BAL   R14,ENTRY900       ALLOCATE IT
         CLC   DYNR15,=4C'0'      CREATED OK ?
         BNE   ERROR3             NO - I GIVE UP
DDD740   EQU   *
         MVI   SYSLMOD+8,X'FF'    INDICATE ALLOCATED
         MVC   SAVEMODL,LOADDSN   SAVE
         MVC   SAVEMODM,CMNCCMBR  SAVE
EXIT740  EQU   *
         B     ENTRY745
         EJECT
*----------------------------------------------------------------------
*
*        ALLOCATE THE SUB-ROUTINE LIBRARIES
*
*----------------------------------------------------------------------
ENTRY745 DS    0H
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         CLI   SUBLIB+8,X'FF'     IS IT ALREADY ALLOCATED ?
         BNE   EEE745             NO - ALLOCATE IT
         CLC   CMNCCSU1,SAVESUB1  SAME DSN ?
         BNE   AAA745             NO - FREE IT
         CLC   CMNCCSU2,SAVESUB2  SAME DSN ?
         BNE   AAA745             NO - FREE IT
         CLC   CMNCCSU3,SAVESUB3  SAME DSN ?
         BNE   AAA745             NO - FREE IT
         CLC   CMNCCSU4,SAVESUB4  SAME DSN ?
         BNE   AAA745             NO - FREE IT
         CLC   CMNCCSU5,SAVESUB5  SAME DSN ?
         BNE   AAA745             NO - FREE IT
         CLC   CMNCCSU6,SAVESUB6  SAME DSN ?
         BNE   AAA745             NO - FREE IT
         B     EXIT745            YES - SKIP ALLOCATION
AAA745   EQU   *
         MVI   DYNTYPE,C'D'       INDICATE DE-ALLOCATE
         MVC   DYNDDNM,SUBLIB     MOVE DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT
         MVI   SUBLIB+8,X'00'     INDICATE NOT ALLOCATED
*
         CLI   LKD5+8,X'FF'       IS THIS ONE ALLOCATED ?
         BNE   BBB745
         MVC   DYNDDNM,LKD5       MOVE DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT
         MVI   LKD5+8,X'00'       INDICATE NOT ALLOCATED
BBB745   EQU   *
         CLI   LKD4+8,X'FF'       IS THIS ONE ALLOCATED ?
         BNE   CCC745
         MVC   DYNDDNM,LKD4       MOVE DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT
         MVI   LKD4+8,X'00'       INDICATE NOT ALLOCATED
CCC745   EQU   *
         CLI   LKD3+8,X'FF'       IS THIS ONE ALLOCATED ?
         BNE   DDD745
         MVC   DYNDDNM,LKD3       MOVE DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT
         MVI   LKD3+8,X'00'       INDICATE NOT ALLOCATED
DDD745   EQU   *
         CLI   LKD2+8,X'FF'       IS THIS ONE ALLOCATED ?
         BNE   EEE745
         MVC   DYNDDNM,LKD2       MOVE DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT
         MVI   LKD2+8,X'00'       INDICATE NOT ALLOCATED
EEE745   EQU   *
         MVC   SAVESUB1,CMNCCSU1  SAVE IT
         MVC   SAVESUB2,CMNCCSU2  SAVE IT
         MVC   SAVESUB3,CMNCCSU3  SAVE IT
         MVC   SAVESUB4,CMNCCSU4  SAVE IT
         MVC   SAVESUB5,CMNCCSU5  SAVE IT
         MVC   SAVESUB6,CMNCCSU6  SAVE IT
         LA    R3,CMNCCSU1        ADDR OF 1ST SUBROUTINE LIB
         LA    R4,SUBLIB          ADDR OF DDNAMES FOR CONCAT
         LA    R5,DDCONCAT        ADDR OF DDNAMES FOR CONCAT
         LA    R6,SUBLIB          ADDR OF CURSOR POSITION
         MVI   DYNTYPE,C'A'       INDICATE ALLOCATE
         MVI   DYNDISP1,DYNSHR    INDICATE SHR
         MVC   CURSOR,=CL8'CMNCCSU1' POSITION CURSOR FOR ERROR
LOOP745A EQU   *
         CLI   0(R3),X'FF'        END OF LIBS ?
         BE    KKK745             YES - CONCATENATE WHAT WE HAVE
         CLI   0(R3),C' '         SUBRT LIBRARY REQUESTED ?
         BE    JJJ745             NO - TRY THE NEXT ONE
         CLI   0(R3),C'^'         SKIP THIS ONE ?
         BE    JJJ745             YES - OK
         CLI   0(R3),X'7D'        IN QUOTES ?
         BNE   GGG745             NO - ADD PREFIX
         MVC   DYNDSN,BLANKS      CLEAR
         MVC   DYNDSN(43),1(R3)   SKIP QUOTE
         LA    R1,DYNDSN          DSNAME
         LA    R2,43              MAX SEARCH
LOOP745B EQU   *
         CLI   0(R1),X'7D'        FIND ENDING QUOTE
         BE    FFF745             FOUND IT
         LA    R1,1(R1)           BUMP
         BCT   R2,LOOP745B
*   ENDING QUOTE NOT FOUND - INVALID DATA SET NAME
         MVC   MSG,=CL8'CMN002'
         CALL  ISPLINK,(DISPLAY,,MSG,CURSOR),VL
         LTR   R15,R15            CONTINUE PROCESSING ?
         BNZ   ENTRY810           NO - UPDATE PROFILE AND END
         B     ENTRY705           START OVER
FFF745   EQU   *
         MVI   0(R1),C' '         REMOVE QUOTE
         B     III745
GGG745   EQU   *
         MVC   DYNDSN,BLANKS      CLEAR
         MVC   DYNDSN(8),ZPREFIX
         LA    R1,DYNDSN
LOOP745C EQU   *
         CLI   0(R1),C' '         FIND END OF PREFIX
         BE    HHH745             FOUND IT
         LA    R1,1(R1)           BUMP
         B     LOOP745C
HHH745   EQU   *
         MVI   0(R1),C'.'         ADD A DOT
         MVC   1(36,R1),0(R3)     MOVE REST OF NAME
III745   EQU   *
         MVC   DYNDDNM,0(R4)
         MVC   0(8,R5),0(R4)
         BAL   R14,ENTRY900
         CLC   DYNR15,=4C'0'      OK ?
         BNE   ERROR3             NO -SERIOUS ERROR
         MVI   8(R4),X'FF'        INDICATE ALLOCATED
         LA    R5,8(R5)           BUMP DDNAME LIST
         LA    R4,9(R4)           BUMP TO NEXT DDNAME
JJJ745   EQU   *
         LA    R6,9(R6)           BUMP FOR CURSOR
         MVC   CURSOR,0(R6)       POSITION CURSOR FOR ERROR
         LA    R3,44(R3)          BUMP TO NEXT MACLIB
         B     LOOP745A           ALLOCATE ALL REQUESTED SUBROUTINE LIB
KKK745   EQU   *
         MVI   0(R5),X'FF'        INDICATE END OF DDNAME LIST
         LA    R1,DDCONCAT+16     ADDR OF CONCAT LIST
         CR    R5,R1              DID WE ALLOCATE MORE THAN 1 ?
         BL    EXIT745            NO - SKIP CONCATENATE
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         MVI   DYNTYPE,C'C'       INDICATE CONCATENATION
         MVC   DYNDDNM(80),DDCONCAT  MOVE DDNAME LIST
         BAL   R14,ENTRY900       CONCATENATE MACLIBS
         CLC   DYNR15,=4C'0'      OK ?
         BNE   ERROR3             NO -SERIOUS ERROR
EXIT745  EQU   *
         B     ENTRY750
         EJECT
*----------------------------------------------------------------------
*
*        LINK-EDIT - INVOKE IEWL
*
*----------------------------------------------------------------------
ENTRY750 DS    0H
         MVC   LINKOPTX,CMNCCLOP  MOVE OPTIONS
         LA    R1,LINKOPT         START OF OPTIONS
LOOP750A EQU   *
         CLI   0(R1),C' '         END OF OPTIONS ?
         BE    AAA750             YES - OK
         LA    R1,1(R1)           NO - BUMP
         B     LOOP750A
AAA750   EQU   *
         LA    R14,LINKOPT        BEGIN
         SR    R1,R14             LENGTH
         STH   R1,LINKCP          STORE IN LIST
         LOAD  EP=IEWL
         LR    R15,R0             COMPILER EPA
         LA    R1,LINKPRMS        COMPILER PARMS
         BALR  R14,R15
         ST    R15,LNKRC          SAVE LINK RETURN CODE
         DELETE  EP=IEWL
         L     R1,LNKRC           PICK UP RETURN CODE
         CVD   R1,DBWRD
         MVC   WORK16,EDIT16
         ED    WORK16,DBWRD
         MVC   SPFRC,WORK16+12
EXIT750  EQU   *
         B     ENTRY800
LINKPRMS DS    0F
         DC    A(LINKCP)          ADDR OF COMPILER OPTIONS
         DC    XL1'80'
         DC    AL3(LINKDDS)       ADDR OF ALTERNATE DDNAMES FOR COB
*----------
         CNOP  2,4
LINKCP   DC    H'0'               LENGTH
LINKOPT  DC    C'LIST,'           FIXED OPTIONS
LINKOPTX DC    CL44' '            USER OPTIONS
*----------
LINKDDS  DC    AL2(LINK2-LINK1)
LINK1    DC    CL8'ZYSLIN'
         DC    XL8'00'
         DC    CL8'SYSLMOD'
         DC    CL8'SYSLIB'
         DC    XL8'00'
         DC    CL8'LKDPRINT'
         DC    XL8'00'
         DC    CL8'ZYSUT1'
LINK2    EQU   *
         EJECT
*----------------------------------------------------------------------
*
*        INDICATE PROCESSING COMPLETE
*
*----------------------------------------------------------------------
ENTRY800 DS    0H
         MVC   CURSOR,=CL8'CMNCCMBR' POSITION CURSOR FOR DISPLAY
         MVC   MSG,=CL8'CMN001'   PROCESSING COMPLETE MESSAGE
         MVC   PANEL,=CL8'CMNFC00' COMPILE PANEL
         CLC   CMPRC,=F'4'        COMPILE OK ?
         BNH   AAA800             YES - OK
         MVC   MSG,=CL8'CMN010'   NO - INFORM USER
         B     ZZZ800
AAA800   EQU   *
         CLC   LNKRC,=F'0'        LINK EQ 0 ?
         BE    YYY800             YES - OK
         MVC   MSG,=CL8'CMN011'   NO - INFORM USER
         MVC   CURSOR,=CL8'CMNCCLOP'
         MVC   PANEL,=CL8'CMNFC10'  LINK PANEL
         CALL  ISPLINK,(DISPLAY,PANEL,MSG,CURSOR),VL
         LTR   R15,R15            CONTINUE ?
         BZ    ENTRY705           YES - DO IT AGAIN
         B     ENTRY050           NO - DISPLAY COMPILE PANEL
YYY800   EQU   *
         MVC   CMNCCMBR,BLANKS   CLEAR
ZZZ800   EQU   *
         CALL  ISPLINK,(DISPLAY,PANEL,MSG,CURSOR),VL
         LTR   R15,R15            CONTINUE ?
         BZ    ENTRY060           YES - DO IT AGAIN
EXIT800  EQU   *                  NO - END
         B     ENTRY810
         EJECT
*----------------------------------------------------------------------
*
*        PUT PROFILE VARIABLES AND EXIT
*
*----------------------------------------------------------------------
ENTRY810 DS    0H
         MVC   NAMELIST,BLANKS
         MVC   NAMELIST(99),=CL99'(CMNCCLOP CMNFCAFO CMNFCAHO CMNFCCBO +
               CMNFCFGO CMNFCFHO CMNFCPFO CMNFCPOO)'
         CALL  ISPLINK,(VPUT,NAMELIST,PROFILE),VL
*
         MVC   NAMELIST,BLANKS
         MVC   NAMELIST(99),=CL99'(CMNCCPRJ CMNCCLIB CMNCCTYP CMNCCCMP +
               CMNCCOTH CMNFCMOD)'
         CALL  ISPLINK,(VPUT,NAMELIST,PROFILE),VL
*
         MVC   NAMELIST,BLANKS
         MVC   NAMELIST(99),=CL99'(CMNCCLK1 CMNCCMA1 CMNCCMA2 CMNCCMA3 +
               CMNCCMA4 CMNCCMA5 CMNCCMA6)'
         CALL  ISPLINK,(VPUT,NAMELIST,PROFILE),VL
*
         MVC   NAMELIST,BLANKS
         MVC   NAMELIST(99),=CL99'(CMNCCSU1 CMNCCSU2 CMNCCSU3 CMNCCSU4 +
               CMNCCSU5 CMNCCSU6 CMNFCLID CMNFCLKD)'
         CALL  ISPLINK,(VPUT,NAMELIST,PROFILE),VL
*
         CLI   CMNCCLK2,C'*'      SPLAT ?
         BE    AAA810             YES - OK
         MVC   CMNCCLK2,BLANKS    NO - SET TO BLANKS
AAA810   EQU   *
         MVC   NAMELIST,BLANKS
         MVC   NAMELIST(15),=CL15'(CMNCCLK2)'
         CALL  ISPLINK,(VPUT,NAMELIST,PROFILE),VL
         BAL   R14,ENTRY920       FREE ALL ALLOCATED DATA SETS
         BAL   R14,ENTRY940       DELETE TEMP OBJ AND SRC DATA SETS
EXIT810  EQU   *
         B     EOJ
         EJECT
*----------------------------------------------------------------------
*
*        END OF JOB
*
*----------------------------------------------------------------------
EOJ      DS    0H
         ICM   R15,15,DYNEPA      DYN ALLOC SUB-ROUTINE
         BZ    EOJ1
         DELETE  EP=ALLOCRTN
EOJ1     EQU   *
         ICM   R15,15,SEQEPA      SEQ LIBRARY MANAGER ROUTINE
         BZ    EOJ2
         DELETE  EP=CMNCCS0
EOJ2     EQU   *
         ICM   R15,15,BDAMEPA     BDAM LIBRARY MANAGER ROUTINE
         BZ    EOJ3
         DELETE  EP=CMNCCB0
EOJ3     EQU   *
         LA    R15,0
         $EPILOG
         EJECT
*----------------------------------------------------------------------
*
*        DYNAMIC ALLOCATION
*
*----------------------------------------------------------------------
ENTRY900 DS    0H
         ST    R14,ST900
         ICM   R15,15,DYNEPA      DYN ALLOC SUB-ROUTINE
         BNZ   AAA900
         LOAD  EP=ALLOCRTN
         ST    R0,DYNEPA
         LR    R15,R0
AAA900   EQU   *
         LA    R1,=A(DYNPARMS)
         BALR  R14,R15
NOP900   NOP   EXIT900            ACTIVATED BY ERROR1 FOR 0410 ERROR
         CLC   DYNR15,=4C'0'      ANY ERRORS ?
         BNE   ERROR1             YES - DECODE THE ERROR
EXIT900  EQU   *
         L     R14,ST900
         BR    R14
ST900    DC    F'-1'
DYNEPA   DC    F'0'
         EJECT
*----------------------------------------------------------------------
*
*        BUILD DYNAMIC ALLOCATION BLOCK FOR A SYSUT DATA SET
*        R1 ---> DDNAME
*
*----------------------------------------------------------------------
ENTRY910 DS    0H
         ST    R14,ST910
         CLI   8(R1),X'FF'        IS IT ALREADY ALLOCATED ?
         BE    EXIT910            YES - OK
         MVI   8(R1),X'FF'        INDICATE ALLOCATED
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL
         MVI   DYNTYPE,C'A'
         MVC   DYNDDNM,0(R1)      MOVE DDNAME
         MVC   DYNUNIT(8),=CL8'VIO'
         MVI   DYNDISP1,DYNNEW    DISP=(NEW,
         MVI   DYNDISP2,DYNDEL    DELETE,
         MVI   DYNDISP3,DYNDEL    DELETE)
         MVC   DYNBTC,=C'CYL'     SPACE=(CYL,(
         MVC   DYNPRIM,=AL3(1)    1,
         MVC   DYNSEC,=AL3(1)     1))
         BAL   R14,ENTRY900       ALLOCATE IT
EXIT910  EQU   *
         L     R14,ST910
         BR    R14
ST910    DC    F'-1'
         EJECT
*----------------------------------------------------------------------
*
*        FREE ALL ALLOCATED DDNAMES
*
*----------------------------------------------------------------------
ENTRY920 DS    0H
         ST    R14,ST920
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL
         MVI   DYNTYPE,C'D'       INDICATE DE-ALLOCATE
         LA    R2,DDNAMES         ADDR OF ALL DDNAMES
LOOP920A EQU   *
         CLI   8(R2),X'FF'        IS IT ALLOCATED ?
         BNE   AAA920             NO - SKIP IT
         MVC   DYNDDNM,0(R2)      YES - MOVE DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT
         MVI   8(R2),X'00'        RESET FLAG
AAA920   EQU   *
         LA    R2,9(R2)           BUMP
         CLI   0(R2),X'FF'        END OF NAMES ?
         BNE   LOOP920A           NO - CONTINUE
EXIT920  EQU   *
         L     R14,ST920
         BR    R14
ST920    DC    F'-1'
         EJECT
*----------------------------------------------------------------------
*
*        VERIFY THAT A MEMBER EXISTS
*        R2 ---> PDS NAME
*        R3 ---> MBR NAME
*
*----------------------------------------------------------------------
ENTRY930 DS    0H
         ST    R14,ST930
         XC    BLDLDATA,BLDLDATA  CLEAR TO ZEROS
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         MVI   DYNTYPE,C'A'       INDICATE ALLOCATE
         MVC   DYNDDNM,=CL8'SRCPDS'  DDNAME
         MVC   DYNDSN,0(R2)       DSNAME
         MVI   DYNDISP1,DYNSHR    DISP=SHR
         BAL   R14,ENTRY900       ALLOCATE IT
         CLC   DYNR15,=4C'0'      ALLOCATE OK ?
         BNE   EXIT930            NO - EXIT
         MVC   BLDLMBR,0(R3)      MOVE MBR NAME TO BLDL LIST
         OPEN  SRCPDS             OPEN THE PDS
         BLDL  SRCPDS,BLDLLIST
         ST    R15,BLDL15         SAVE RETURN CODE
         CLOSE SRCPDS
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       MOVE LENGTH
         MVI   DYNTYPE,C'D'       INDICATE DE-ALLOC
         MVC   DYNDDNM,=CL8'SRCPDS'  DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT
EXIT930  EQU   *
         L     R14,ST930
         BR    R14
ST930    DC    F'-1'
BLDLLIST DS    0F
         DC    H'1'
         DC    H'58'
BLDLMBR  DC    CL8' '
BLDLDATA DC    XL50'00'
SRCPDS   DCB   DDNAME=SRCPDS,DSORG=PO,MACRF=R
BLDL15   DC    F'0'
         EJECT
*----------------------------------------------------------------------
*
*        DELETE TEMPORARY SOURCE AND OBJECT DATA SETS USED FOR
*        LIBRARY MANAGER REQUEST
*
*----------------------------------------------------------------------
ENTRY940 DS    0H
         ST    R14,ST940
         CLC   SAVESRCX,BLANKS    DID WE CREATE ONE ?
         BE    AAA940             NO - OK
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL
         MVI   DYNTYPE,C'A'       INDICATE ALLOCATE
         MVC   DYNDDNM,=CL8'DELETE' DDNAME
         MVC   DYNDSN,SAVESRCX    ALLOCATE THE SOURCE DSN
         MVI   DYNDISP1,DYNOLD    DISP=OLD,
         MVI   DYNDISP2,DYNDEL    DELETE
         MVI   DYNDISP3,DYNDEL    DELETE
         BAL   R14,ENTRY900       ALLOCATE IT
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL
         MVI   DYNTYPE,C'D'       INDICATE DE-ALLOCATE
         MVC   DYNDDNM,=CL8'DELETE' DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT (DELETE IT)
         MVC   SAVESRCX,BLANKS    YES - CLEAR
AAA940   EQU   *
         CLC   SAVEOBJX,BLANKS    DID WE CREATE ONE ?
         BE    EXIT940            NO - OK
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL
         MVI   DYNTYPE,C'A'       INDICATE ALLOCATE
         MVC   DYNDDNM,=CL8'DELETE' DDNAME
         MVC   DYNDSN,SAVEOBJX    ALLOCATE THE OBJECT DSN
         MVI   DYNDISP1,DYNOLD    DISP=OLD,
         MVI   DYNDISP2,DYNDEL    DELETE
         MVI   DYNDISP3,DYNDEL    DELETE
         BAL   R14,ENTRY900       DE-ALLOCATE IT
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL
         MVI   DYNTYPE,C'D'       INDICATE DE-ALLOCATE
         MVC   DYNDDNM,=CL8'DELETE' DDNAME
         BAL   R14,ENTRY900       DE-ALLOCATE IT (DELETE IT)
         MVC   SAVEOBJX,BLANKS    YES - CLEAR
EXIT940  EQU   *
         L     R14,ST940
         BR    R14
ST940    DC    F'-1'
         EJECT
*----------------------------------------------------------------------
*
*        DYNAMIC ALLOCATION ERROR
*
*----------------------------------------------------------------------
ERROR1   DS    0H
         CLC   DYNERR,=C'0410'    DDNAME UNAVAILABLE ?
         BNE   AAAER1             NO - OK
         MVC   SAVE14,ST900       SAVE 900 RETURN POINT
         MVI   NOP900+1,X'F0'     SET TO BRANCH
         MVC   SAVEDYN(DYNLL),DYNPARMS  SAVE ORIGINAL PARMS
         MVC   SAVEDDN,DYNDDNM    SAVE DDNAME
         XC    DYNPARMS(DYNLL),DYNPARMS  CLEAR
         MVI   DYNLEN,DYNLL       LENGTH
         MVI   DYNTYPE,C'D'       ATTEMPT TO DE-ALLOCATE
         MVC   DYNDDNM,SAVEDDN    DDNAME
         MVI   DYNUNALC,X'FF'     DE-ALLOC EVEN IF 'PERM' BIT IS ON
         BAL   R14,ENTRY900
         MVC   DYNPARMS(DYNLL),SAVEDYN  RESTORE ORIGINAL PARMS
         MVI   DYNTYPE,C'A'       YES - TRY ALLOCATING AGAIN
         BAL   R14,ENTRY900
         MVC   ST900,SAVE14       RESTORE ORIGINAL RETURN POINT
         MVI   NOP900+1,X'00'     SET TO NOP
         CLC   DYNR15,=4C'0'      ALLOCATE OK ?
         BNE   AAAER1             NO - DISPLAY ERROR MESSAGE
         L     R14,SAVE14         RETURN ADDR
         BR    R14
AAAER1   EQU   *
         MVC   MSG,=CL8'DYN002'
         CLC   DYNERR,=C'0210'    DATA SET IN USE ?
         BE    BBBER1             DISPLAY MESSAGE
         MVC   MSG,=CL8'DYN003'
         CLC   DYNERR,=C'031C'    INVALID MEMBER NAME ?
         BE    BBBER1             DISPLAY MESSAGE
         MVC   MSG,=CL8'DYN001'
         CLC   DYNERR,=C'0320'    INVALID DSNAME ?
         BE    BBBER1             DISPLAY MESSAGE
         MVC   MSG,=CL8'DYN004'
         CLC   DYNERR,=C'0330'    MBR SPECIFIED, DSN NOT A PDS
         BE    BBBER1             DISPLAY MESSAGE
         MVC   MSG,=CL8'DYN005'
         CLC   DYNERR,=C'0440'    DSN NOT FOUND ?
         BE    BBBER1             DISPLAY MESSAGE
         L     R14,ST900          GO BACK TO THE ROUTINE THAT
         BR    R14                REQUESTED THE ALLOC
BBBER1   EQU   *
         CALL  ISPLINK,(DISPLAY,,MSG,CURSOR),VL
         LTR   R15,R15            CONTINUE ?
         BNZ   ENTRY810           NO - UPDATE PROFILE AND EXIT
ENDERR1  EQU   *
         BAL   R14,ENTRY920       FREE ALL ALLOCATED DATA SETS
         B     ENTRY060           YES - DO IT AGAIN
SAVE14   DC    F'0'
SAVEDDN  DC    CL8' '
SAVEDYN  DC    XL150'00'
*----------------------------------------------------------------------
ERROR2   DS    0H
         MVC   MSG,=CL8'DYN000'
         CALL  ISPLINK,(DISPLAY,,MSG,CURSOR),VL
         LTR   R15,R15            CONTINUE ?
         BNZ   ENTRY810           NO - UPDATE PROFILE AND END
         B     ENTRY060           YES - START AT THE TOP
         EJECT
*----------------------------------------------------------------------
ERROR3   DS    0H
         MVC   MSG,=CL8'DYN000'
         CALL  ISPLINK,(DISPLAY,,MSG,CURSOR),VL
         LTR   R15,R15            CONTINUE ?
         BNZ   ENTRY810           NO - UPDATE PROFILE AND END
         B     ENTRY705           YES - START AT THE TOP
         EJECT
*----------------------------------------------------------------------
*
*        STORAGE AREAS
*
*----------------------------------------------------------------------
CMPRC    DC    F'0'               COMPILER RETURN CODE
LNKRC    DC    F'0'               LINK EDIT RETURN CODE
SAVEODS  DC    CL44' '
SAVEOTH  DC    CL44' '
SAVESRCX DC    CL44' '
SAVEOBJX DC    CL44' '
SAVEMAC1 DC    CL44' '
SAVEMAC2 DC    CL44' '
SAVEMAC3 DC    CL44' '
SAVEMAC4 DC    CL44' '
SAVEMAC5 DC    CL44' '
SAVEMAC6 DC    CL44' '
SAVESUB1 DC    CL44' '
SAVESUB2 DC    CL44' '
SAVESUB3 DC    CL44' '
SAVESUB4 DC    CL44' '
SAVESUB5 DC    CL44' '
SAVESUB6 DC    CL44' '
SAVELID  DC    CL8' '
SAVELKD  DC    CL8' '
SAVEDSN  DC    CL44' '
SAVEOBJ  DC    CL44' '
SAVELOAD DC    CL44' '
SAVECMOD DC    CL44' '
SAVESYSO DC    CL44' '
SAVEMODL DC    CL44' '
SAVELK1  DC    CL44' '
SAVEMBR  DC    CL10' '
SAVESYSM DC    CL8' '
SAVEMODM DC    CL8' '
SAVELK2  DC    CL8' '
SRCDSN   DC    CL44' '
LIBDSN   DC    CL44' '
OBJDSN   DC    CL44' '
LOADDSN  DC    CL44' '
LNKDSN   DC    CL44' '
COMPILER DC    CL8' '
BLANKS   DC    CL110' '
*----------------------------------------------------------------------
LENGTH   DC    F'0'               LENGTH OF EACH VARIABLE
NAMELIST DC    CL110' '
*----------------------------------------------------------------------
DDNAMES  EQU   *
SYSIN    DC    CL8'ZYSIN',X'00'
SYSPRINT DC    CL8'ZYSPRINT',X'00'
LKDPRINT DC    CL8'LKDPRINT',X'00'
SYSPUNCH DC    CL8'ZYSPUNCH',X'00'
SYSUT1   DC    CL8'ZYSUT1',X'00'
SYSUT2   DC    CL8'ZYSUT2',X'00'
SYSUT3   DC    CL8'ZYSUT3',X'00'
SYSUT4   DC    CL8'ZYSUT4',X'00'
SYSUT6   DC    CL8'ZYSUT6',X'00'
SYSLIN   DC    CL8'ZYSLIN',X'00'
SYSLMOD  DC    CL8'SYSLMOD',X'00'
SYSLIN2  DC    CL8'ZYSLIN2',X'00'
SYSLIB   DC    CL8'ZYSLIB',X'00' COMPILER SYSLIB
LIB2     DC    CL8'MAC2',X'00'
LIB3     DC    CL8'MAC3',X'00'
LIB4     DC    CL8'MAC4',X'00'
LIB5     DC    CL8'MAC5',X'00'
LIB6     DC    CL8'MAC6',X'00'
SUBLIB   DC    CL8'SYSLIB',X'00'  LINK-EDIT SYSLIB
LKD2     DC    CL8'SUB2',X'00'
LKD3     DC    CL8'SUB3',X'00'
LKD4     DC    CL8'SUB4',X'00'
LKD5     DC    CL8'SUB5',X'00'
LKD6     DC    CL8'SUB6',X'00'
         DC    X'FFFF'            END INDICATOR
*----------------------------------------------------------------------
*
*        DEFINED VARIABLES
*
*----------------------------------------------------------------------
CMNCCPRJ DC    CL8' '             PROJECT
CMNCCLIB DC    CL8' '             LIBRARY
CMNCCTYP DC    CL8' '             TYPE
CMNCCCMP DC    CL8' '             COMPILER
CMNFCLID DC    CL8' '             LIST ID
CMNFCLKD DC    CL8' '             LINK OUTPUT TO TERMINAL
CMNCCLK2 DC    CL8' '             LINK CONTROL CARD MEMBER
ZPREFIX  DC    CL8' '
ZUSER    DC    CL8' '
CMNCCMBR DC    CL10' '            MEMBER
*----------------------------------------------------------------------
CMNCCLOP DC    CL44' '            COMPILER OPTIONS
CMNFCAFO DC    CL44' '            COMPILER OPTIONS
CMNFCAHO DC    CL44' '            COMPILER OPTIONS
CMNFCCBO DC    CL44' '            COMPILER OPTIONS
CMNFCFGO DC    CL44' '            COMPILER OPTIONS
CMNFCFHO DC    CL44' '            COMPILER OPTIONS
CMNFCPFO DC    CL44' '            COMPILER OPTIONS
CMNFCPOO DC    CL44' '            COMPILER OPTIONS
CMNCCLK1 DC    CL44' '            LINK-EDIT CONTROL CARD DATA SET
CMNCCMA1 DC    CL44' '            MACRO/COPY LIBRARIES
CMNCCMA2 DC    CL44' '            MACRO/COPY LIBRARIES
CMNCCMA3 DC    CL44' '            MACRO/COPY LIBRARIES
CMNCCMA4 DC    CL44' '            MACRO/COPY LIBRARIES
CMNCCMA5 DC    CL44' '            MACRO/COPY LIBRARIES
CMNCCMA6 DC    CL44' '            MACRO/COPY LIBRARIES
         DC    4X'FF'             LEAVE THIS HERE !!!!!
CMNFCMOD DC    CL44' '            SYSLMOD
CMNCCOTH DC    CL44' '            OTHER DATA SET
CMNCCSU1 DC    CL44' '            SUB-ROUTINE LIBRARIES
CMNCCSU2 DC    CL44' '            SUB-ROUTINE LIBRARIES
CMNCCSU3 DC    CL44' '            SUB-ROUTINE LIBRARIES
CMNCCSU4 DC    CL44' '            SUB-ROUTINE LIBRARIES
CMNCCSU5 DC    CL44' '            SUB-ROUTINE LIBRARIES
CMNCCSU6 DC    CL44' '            SUB-ROUTINE LIBRARIES
         DC    4X'FF'             LEAVE THIS HERE !!!!!
*----------------------------------------------------------------------
DDCONCAT DC    CL80' '
*----------------------------------------------------------------------
         EJECT
SPFMACS  $ISPCMDS
         EJECT
DYNPARMS $ALLOC
         EJECT
         DCBD DSORG=PS
         EJECT
         END
