*          DATA SET P50185     AT LEVEL 005 AS OF 05/01/81
*          DATA SET P50185     AT LEVEL 004 AS OF 03/27/81
*          DATA SET P50185     AT LEVEL 003 AS OF 11/18/80
*          DATA SET P50185     AT LEVEL 002 AS OF 02/01/80
         TITLE 'P50185 ENSTREAM MACRO S       '
         MACRO
         ESTAD &C1=,&DB=,&TO=,&AB=,&MO=,&MI=,&UA=
*              ESTABLISH ADDRESSABILITY
         AIF   (T'&C1 EQ 'O').C1X
         USING C1COMMON,C1REG
         L     C1REG,C1DSR
.C1X     ANOP
         AIF   (T'&DB EQ 'O').DBX
         USING DBDMBDS,DBREG
         L     DBREG,DBDSR
.DBX     ANOP
         AIF   (T'&MO EQ 'O').MOX
         USING MODMBDS,MOREG
         L     MOREG,MODSR
.MOX     ANOP
         AIF   (T'&TO EQ 'O').TOX
         USING C1COMMON,C1REG
         L     C1REG,C1DSR
         USING TOTERMSG,TOREG
         LA    TOREG,C1CNSMSG
.TOX     ANOP
         AIF   (T'&AB EQ 'O').ABX
         USING C1COMMON,C1REG
         L     C1REG,C1DSR
         USING ABENDMSG,ABREG
         LA    ABREG,C1CNSMSG
.ABX     ANOP
         AIF   (T'&MI EQ 'O').MIX
         USING MIDMBDS,MIREG
         L     MIREG,MIDSR
.MIX     ANOP
         AIF   (T'&UA EQ 'O').UAX
         USING USRDSECT,UAREG
         L     UAREG,PSCRUSER(R14)
         L     UAREG,0(UAREG)
.UAX     ANOP
         MEND
         SPACE 3
         MACRO
         MODMB
         SPACE 3
*              DSECT FOR MSG OUT AREA
MODMBDS  DSECT
MODMBA   EQU   *
MOLEN    DS    H
MODATA   EQU   *
MOWCC    DS    C
         MEND
         SPACE 3
         MACRO
         EPMAC &EP
*                                                       ***************
*            ******************************************** ENTRY POINT *
*             ***                                       ***************
&EP      EQU   *
         MEND
         MACRO
         PEXIT
         PERFEXIT
*              *                                       ****************
*             ***                                      * PERFORM EXIT *
*            **********************************************************
         SPACE 3
         MEND
         EJECT
         TITLE 'P50185 - RACFTERM'
         PAGE  RACFTERM
RACFTERM EQU   *
         PERFORM EP=V(CHKNETWK)
         ESTAD C1=Y
         MVI   C1OPERIN+1,X'99'          DEFAULT - RACF TERM
         CLC   C1NETWRK(3),=C'PRD'       PRODUCTION SYSTEM ?
         BE    CHKLUNME                  YES CHECK IF TERM PROTECTED
         CLC   C1TRANID(4),=C'RACF'      WAS RACF REQUESTED ?
         BE    RACFTMEX                  YES - DEFAULT
         CLC   C1TRANID(4),=C'NRAC'      WAS NON-RACF REQUESTED ?
         BE    NORACF                    YES
         B     RACFTMEX                  NO - DEFAULT RACF
NORACF   EQU   *
         MVI   C1OPERIN+1,X'40'
RACFTMEX EQU   *
         PERFEXIT
CHKLUNME EQU   *
         CLI   C1TERMTY,X'0F'            TWX TERMINAL ?
         BNE   NOTTWX                    NO
         PERFEXIT                        YES - DEFAULT RACF
NOTTWX   EQU   *
         MVC   C1TMID(3),C1TERMID+1      GET LOGICAL UNIT NAME
         PERFORM EP=V(GETLUNME)
         FILL  DSR=29,PRGADDR=RACTERML
         YIELD EP=*
         ESTAD C1=Y
         L     R4,DSR29
         USING RACTERML,R4
         MVC   LUNAME(8),C1LUNME
         SR    R8,R8
         LA    R9,C1LUNME
LGTHLOOP EQU   *
         CLI   0(R9),X'40'
         BE    GOTLGTH
         LA    R8,1(R8)
         C     R8,=F'8'
         BE    GOTLGTH
         LA    R9,1(R9)
         B     LGTHLOOP
GOTLGTH  EQU   *
         STC   R8,LUENTRY
         CLC   LUENTRY(1),=X'00'
         BNE   LGTHOK
         TSKABEND 9090
LGTHOK   EQU   *
         STM   R0,R15,RACTERMS
         PUSH  USING
         DROP  R15
         BALR  R12,0
         USING *,R12
         ICHEINTY MF=(E,RACLULOC),ENTRY=LUENTRY,CLASS=LUCLASS,         X
               OPTIONS=(FLDEF,ACTION),ACTIONS=TERMA1,WKAREA=TERMWRK
         C     R15,=F'0'                IS TERMINAL RACF PROTECTED ?
         BE    LURACFX                  YES - TAKE DEFAULT
         MVI   C1OPERIN+1,X'40'
LURACFX  EQU   *
         DROP  R12
         POP   USING
         LM    R0,R15,RACTERMS
         RELEASER DSR=29
         YIELD EP=*
         PERFEXIT
         PAGEND
         PAGE  RACTERML
RACTERML DS    0F
RACTERMS DS    16F
RACLULOC ICHEINTY LOCATE,TYPE='GEN',MF=L,ENTRY=LUENTRY,CLASS=LUCLASS,  X
               ACTIONS=TERMA1,WKAREA=TERMWRK
TERMA1   ICHEACTN MF=L,FIELD=UACC
LUENTRY  DC    X'00'
LUNAME   DS    CL8
LUCLASS  DC    CL8'TERMINAL'
TERMWRK  DC    F'100'
         DS    CL100
         PAGEND
         TITLE 'P50185 - RCFDELE'
         PAGE RCFDELE
         EPMAC RCFDELE
*********************************************************************
*        THIS ROUTINE DELETES AN ENTRY(TRANSACTION) FROM THE        *
*        RACF DATASET                                               *
*                                                                   *
*********************************************************************
         STM   R0,R15,RACFDESV     STORE E/1 REGS
         PUSH  USING               SET UP NEW BASE
         DROP R15
         BALR  R12,0               SET UP R12 AS NEW BASE
         USING *,R12
         L     R3,DSR27            GET ADDRESSABILITY TO DSR27
         USING DELDSECT,R3
         MVC   DELENT1,DELTRAN
         ICHEINTY MF=(E,DELTY1),ENTRY=DELENT,CLASS=DELCLASS,           X
               OPTIONS=(ACTION,FLDEF)
         CH    R15,=H'36'
         BNE   RDEL0100
         AR    R15,R0
RDEL0100 STH   R15,DELRC
         LM    R0,R15,RACFDESV     RESTORE E/1 REGS
         POP   USING
         PERFEXIT                  RETURN
DELENT   DC    X'04'               LENGTH OF ENTRY
DELENT1  DS    CL4                 ENTRY
DELCLASS DC    CL8'TIMS'           CLASS
DELTY1   ICHEINTY DELETE,TYPE='GEN',ENTRY=DELENT,CLASS=DELCLASS,MF=L
RACFDESV DS    16F
         PAGEND
         TITLE 'P50185 - RACFAUTH'
         PAGE RACFAUTH
         EPMAC RACFAUTH
*********************************************************************
*                                                                   *
*        THIS ROUTINE RETURNS THE INSTALATION DATA AND THE ACCESS   *
*        LIST FOR A RESOURCE IN DSR28. DSR29 IS USED FOR A WORK     *
*        AREA. IT CAN RETURN UP TO 90 USERS PER INVOCATION. IF      *
*        ENTERED WITH FIELD LOCWK1 NOT EQUAL TO BINARY ZEROS, IT    *
*        ASSUMES THAT THE FIELD CONTAINS THE TRANSACTION ID LAST    *
*        PROCESSED. THE ROUTINE WILL BEGIN PROCESSING THE NEXT ID.  *
*                                                                   *
*********************************************************************
         FILL  DSR=29,PRGADDR=RACFLOC1
         YIELD EP=*                GET WORK DSR
         L     R4,DSR29            GET ADDRESSABILITY
         L     R6,DSR28            GET ADDRESSABILITY TO COMMON DSR
         USING RACFLOC1,R4
         USING LOCDSECT,R6
         STM   R0,R15,RACFLCSV     STORE E/1 REGS
         PUSH  USING
         DROP  R15
         BALR  R12,0               ESTABLISH R12 AS NEW BASE REG
         USING *,R12
         MVC   LOCENTD,LOCTRAN     MOVE IN TRANSACTION NAME
         ICHEINTY MF=(E,LOCTY1),OPTIONS=(FLDEF,ACTION),                X
               ACTIONS=(LOCA3,LOCA1),ENTRY=LOCENT,CLASS=LOCCLS,        X
               WKAREA=LOCWK
*                                  GET NUMBER ON ACCESS LIST AND
*                                  INSTALLATION DATA
         LTR   R15,R15             CHECK RETURN CODE
         BZ    LOC0030             IF NOT ZERO, GET OUT
         CH    R15,=H'36'          CHECK FOR BAD PARAMETER LIST
         BNE   LOC0999             IF NOT, GET OUT
         AR    R15,R0              OTHERWISE COMPUTE NEW RETURN CODE
         B     LOC0999             AND LEAVE
LOC0030  ICHEACTN MF=(E,LOCA1),RUN=NO  CHANGE ACTION 1
         USING WKARDSEC,R3
         LA    R3,LOCWK            ESTABLISH ADDRESSABILITY TO WORK
         LH    R2,WKDATA+2         GET NUMBER IN ACCESS LIST
         XR    R5,R5               CLEAR R5
         IC    R5,WKDATA+5         GET LENGTH OF INSTALLATION DATA
         MVI   LOCDESC,C' '        BLANK DESCRIPTION
         MVC   LOCDESC+1(29),LOCDESC
         C     R5,=F'0'            CHECK FOR ZERO LENGTH
         BE    LOC0050
         CH    R5,=H'30'           CHECK FOR LENGTH > 30
         BL    LOC0040
         LA    R5,30               IF NOT MAKE LENGTH 30
LOC0040  BCTR  R5,0                REDUCE LENGTH BY 1 FOR MOVE
         EX    R5,LOCMOV           MOVE INTO DSR28
LOC0050  LTR   R2,R2               CHECK FOR NONE IN ACCESS LIST
         BNZ   LOC0055             IF NOT ZERO, CONTINUE
         ST    R2,LOCNORT          STORE NO RETURNED AND REMAINING
         B     LOC0999             GET OUT
LOC0055  LR    R7,R2
         SLA   R7,3                MULTIPLY BY 8
         AR    R7,R2               R7 = NUMBER ON ACCESS LIST * 9
         LA    R7,34(R7)           ADD 30 BYTES FOR WORK AREA
         GETMAIN RU,LV=(R7)        GET STORAGE
         LTR   R15,R15             CHECK RETURN
         BZ    LOC0100             IF GOOD,CONTINUE
         TSKABEND 9091
LOC0100  LR    R3,R1               COPY ADDR OF STORAGE OBTAINED
         ST    R7,0(R3)
         ICHEINTY MF=(E,LOCTY1),OPTIONS=(ACTION,),                     X
               WKAREA=(R3),                                            X
               ACTIONS=(LOCA2)
         LTR   R15,R15             CHECK RETURN
         BZ    LOC0200             IF GOOD, CONTINUE
         TSKABEND 9092
LOC0200  EQU   *
         USING LOCREPT,R8
         LA    R8,WKDATA+2         GET ADDRESSABILITY TO ACCESS LIST
         CLC   LOCWK1,=F'0'        CHECK FOR REPEAT REQUEST
         BE    LOC0260             IF NOT, CONTINUE
LOC0210  EQU   *
         CLC   LOCUSR(4),LOCWK1    FIND POINT WHERE WE LEFT OFF
         BE    LOC0250             FOUND IT
         BCTR  R2,0                REDUCE COUNT
         LA    R8,9(R8)            BUMP TO NEXT ENTRY
         B     LOC0210
LOC0250  EQU   *
         LA    R8,9(R8)            POINT TO NEXT ENTRY
         BCTR  R2,0                REDUCE COUNT
LOC0260  LA    R9,1                SET UP COUNTER
         LA    R10,LOCARRY         LOAD LOCATION TO STORE INTO
LOC0262  MVC   0(4,R10),LOCUSR     MOVE IN USER ID
         MVI   4(R10),C'R'         SET DEFAULT TO READ ACCESS
         TM    LOCAUTH,X'01'       CHECK AUTHORITY
         BZ    LOC0270             IF OTHER THAN NONE, ----
         MVI   4(R10),C'N'         SET AUTHORIZATION FLAG TO NONE
LOC0270  CH    R9,=H'90'           CHECK FOR END
         BL    LOC0280             IF NOT, CONTINUE
         MVC   LOCWK1,LOCUSR       UPDATE RETURN TRANSACTION FIELD
         STH   R9,LOCNORT          STORE NUMBER RETURNED
         BCTR  R2,0                REDUCE NUMBER REMAINING
         STH   R2,LOCNORE          STORE NUMBER REMAINING
         B     LOC0300
LOC0280  LA    R9,1(R9)            INCREMENT COUNT
         LA    R8,9(R8)            INCREMENT LIST
         LA    R10,5(R10)          BUMP RETURN DATA
         BCT   R2,LOC0262
         BCTR  R9,0                REDUCE COUNT
         STH   R2,LOCNORE          STORE NUMBER REMAINING
         STH   R9,LOCNORT          STORE NUMBER RETURNED
LOC0300  FREEMAIN RU,LV=(R7),A=(R3)
         LTR   R15,R15
         BZ    LOC0999
         TSKABEND 9093
LOC0999  STH   R15,LOCRC           STORE RETURN CODE
         POP   USING
         LM    R0,R15,RACFLCSV     RESTORE E/1 REGS
         RELEASER DSR=29
         YIELD EP=*
         PERFEXIT
         PAGEND
         EJECT
         TITLE 'P50185 - RACFLOC1'
         PAGE RACFLOC1
RACFLOC1 DS    0F
RACFLCSV DS    16F
LOCTY1   ICHEINTY LOCATE,TYPE='GEN',MF=L,ACTIONS=(LOCA2,LOCA1),        X
               ENTRY=LOCENT,CLASS=LOCCLS,WKAREA=LOCWK
LOCA1    ICHEACTN MF=L,FIELD=INSTDATA
LOCA2    ICHEACTN MF=L,FIELD=ACL1
LOCA3    ICHEACTN MF=L,FIELD=ACLCNT
LOCMOV   MVC   20(0,6),X'23'(R3)
LOCENT   DC    X'04'
LOCENTD  DS    CL4' '
LOCCLS   DC    CL8'TIMS'
LOCWK    DC    F'100'
         DS    CL100
         PAGEND
         EJECT
         TITLE 'P50185 - RACFALT'
         PAGE RACFALT
         EPMAC RACFALT
*********************************************************************
*                                                                   *
*        THIS ROUTINE MODIFIES AND DELETES USERS FROM THE ACCESS    *
*        LIST OF A TRANSACTION.                                     *
*                                                                   *
*********************************************************************
         FILL  DSR=29,PRGADDR=RACFALT1
         YIELD EP=*                GET WORKING STORAGE DSR
         L     R11,DSR29           GET ADDRESABILITY
         USING RACFALT1,R11
         STM   R0,R15,RCFALTSV     STORE E/1 REGS
         PUSH  USING               ESTABLISH NEW BASE
         DROP  R15
         BALR  R12,0               SET UP R12 AS NEW BASE
         USING *,R12
         USING ALTDSECT,R3
         L     R3,DSR27            GET ADDRESSABILITY TO DSR27
         MVC   ALTACL(4),ALTUSR    MOVE IN USER TO OPERATE ON
         MVC   ALTENTD,ALTTRAN     MOVE IN TRANSACTION
         MVC   ALTACS,ALTAUTH      MOVE IN AUTHORIZATION
         CLI   ALTDESC,C'M'        DOES DESCRIPTION HAVE TO BE MODIFIED
         BNE   ALT0100             IF NOT, SET RUN=NO
         MVI   ALTDESC,X'1E'       SET LENGTH IN DESCRIPTION
         ICHEACTN MF=(E,ALTA2),FLDATA=(,ALTDESC),RUN=YES
         ICHEACTN MF=(E,ALTA1),RUN=NO
         B     ALT0600
ALT0100  EQU   *
         ICHEACTN MF=(E,ALTA2),RUN=NO
         ICHEACTN MF=(E,ALTA1),RUN=YES
ALT0200  EQU   *                   SET UP FOR LOCATE
         ICHETEST MF=(E,ALTEQ),FLDATA=(,ALTACL),COND=EQ
         ICHEACTN MF=(E,ALTA3),TESTS=(ALTEQ)
         ICHEINTY MF=(E,ALTATY2),OPTIONS=(FLDEF),ENTRY=ALTENT,         X
               CLASS=ALTCLS,WKAREA=ALTWK,ACTIONS=(ALTA3)
         LTR   R15,R15             CHECK RETURN FROM LOCATE
         BZ    ALT0250             IF NOT ZERO, PROGRAM CHECK
         TSKABEND 9094
ALT0250  LA    R10,ALTWK           GET ADDR OF WORK AREA
         USING WKARDSEC,R10        GET ADDRESSIBILITY
         L     R9,WKDLEN           LOAD LENGTH OF DATA RETURNED
         LH    R4,ALTRQ            LOAD REQUEST CODE
         CH    R4,=H'1'            IS THIS AN ADD??
         BE    ALT0400             YES --
         CH    R9,=H'2'            CHECK IF USER WAS ON ACCESS LIST
         BNE   ALT0300             YES --
         LA    R15,12              NO, SET RETURN CODE TO 12 AND GET
*                                  OUT. FOR CHANGE OR DELETE THE USER
*                                  MUST BE ON THE ACCESS LIST
         B     ALT0650
ALT0300  CH    R4,=H'2'            CHECK FOR CHANGE
         BE    ALT0350             YES --
*                                  NO, SET UP FOR DELETE
         ICHETEST MF=(E,ALTDELT),FLDATA=(,ALTACL)
         ICHEACTN MF=(E,ALTA4),TESTS=(ALTDELT)
         B     ALT0600
ALT0350  EQU   *                   SET UP FOR CHANGE
         ICHETEST MF=(E,ALTEQ),FLDATA=(,ALTACL),COND=EQ
         ICHEACTN MF=(E,ALTA1),FLDATA=(,ALTACL),TESTS=(ALTEQ)
         B     ALT0600
ALT0400  EQU   *                   SET UP FOR AN ADD
         ICHETEST MF=(E,ALTEQ),FLDATA=(,ALTACL),COND=NE
         ICHEACTN MF=(E,ALTA1),FLDATA=(,ALTACL),TESTS=(ALTEQ)
ALT0600  EQU   *
         LR    R8,R1               COPY IN ADDR OF CURRENT ACTION
         ICHEINTY MF=(E,ALTATY1),OPTIONS=(FLDEF,ACTION),               X
               ACTIONS=((R8),ALTA2),                                   X
               ENTRY=ALTENT,CLASS=ALTCLS
ALT0650  CH    R15,=H'36'
         BNE   ALT0700
         AR    R15,R0
ALT0700  STH   R15,ALTRC           STORE RETURN CODE
         LM    R0,R15,RCFALTSV     RESTORE E1REGS
         POP   USING
         RELEASER DSR=29
         YIELD EP=*
         PERFEXIT                  RETURN
         SPACE 5
         PAGEND
         TITLE 'P50185 - RACFALT1'
         PAGE RACFALT1
RACFALT1 EQU   *
ALTATY1  ICHEINTY ALTER,TYPE='GEN',MF=L,                               X
               ACTIONS=(ALTA1,ALTA2),ENTRY=ALTENT
ALTA1    ICHEACTN MF=L,FIELD=ACL,FLDATA=(11,ALTACL),TESTS=(ALTEQ)
ALTA2    ICHEACTN MF=L,FIELD=INSTDATA,FLDATA=(,ALTENT)
ALTEQ    ICHETEST MF=L,FIELD=USERID,FLDATA=(8,ALTACL)
ALTATY2  ICHEINTY LOCATE,TYPE='GEN',MF=L,                              X
               ACTIONS=(ALTA3),ENTRY=ALTENT
ALTA3    ICHEACTN MF=L,FIELD=ACL,TESTS=(ALTEQ)
ALTA4    ICHEACTN MF=L,FIELD=USERID,FLDATA='DEL',TESTS=(ALTDELT)
ALTDELT  ICHETEST MF=L,FIELD=USERID,FLDATA=(8,ALTACL)
ALTENT   DC    X'04'
ALTENTD  DC    CL4' '
ALTACL   DC    CL8' '
ALTACS   DS    CL1
         DC    X'0000'
ALTCLS   DC    CL8'TIMS'
ALTWK    DC    F'64'
         DS    CL64
RCFALTSV DS    16F
         PAGEND
         TITLE 'P50185 - RACFADD'
         PAGE RACFADD
         EPMAC RACFADD
*********************************************************************
*                                                                   *
*        THIS ROUTINE ADDS A NEW PROFILE TO THE RACF DATASET.       *
*        EACH TRANSACTION ADDED WILL A HAVE A UNIVERSAL ACCESS OF   *
*        NONE WITH USER XXXX HAVING ACCESS OF READ. ON ENTRY DSR27  *
*        WILL CONTAIN THE TRANSACTION TO BE ADDED.                  *
*                                                                   *
*********************************************************************
         STM   R0,R15,RFADDSAV     STORE E/1 REGS
         L     R2,DSR27            GET ADDRESSABILITY TO DSR
         PUSH  USING               ESTABLISH R12 AS NEW BASE
         BALR  R12,0
         USING *,R12
         LA    R3,6(R2)            GET ADDR OF DESCRIPTION
         MVI   0(R3),X'1E'         MOVE IN LENGTH OF 30
         MVC   ADDENTD,2(R2)       GET TRANSACTION NAME
         TIME  DEC                 GET CURRENT JULIAN DATE
         ST    R1,ADDDATE          COPY DATE
         ICHEACTN MF=(E,ADDA6),FLDATA=(,ADDDATE)
         ICHEACTN MF=(E,ADDA4),FLDATA=(,(R3))
         ICHEACTN MF=(E,ADDA1),FLDATA=(,ADDUACC)
         ICHEACTN MF=(E,ADDA2),FLDATA=(11,ADDACL)
         ICHEACTN MF=(E,ADDA3),FLDATA=(,ADDOWN)
         ICHEACTN MF=(E,ADDA5),FLDATA=(,ADDAUD)
         ICHEINTY MF=(E,ATY1),OPTIONS=(FLDEF,ACTION),                  X
               ACTIONS=(ADDA1,ADDA2,ADDA3,ADDA4,ADDA5,ADDA6),          X
               ENTRY=ADDENT,CLASS=ADDCLS
         STH   R15,0(R2)           STORE RETURN CODE
         LM    R0,R15,RFADDSAV     RESTORE REGISTERS
         POP   USING               RESTORE BASE
         PERFEXIT                  RETURN TO CALLER
         SPACE 5
RFADDSAV DS    16F                 E/1 REGISTER SAVE AREA
ADDDATE  DS    F                   CREATION DATE
ADDCLS   DC    CL8'TIMS'           RESOURCE CLASS
ADDOWN   DC    CL8'TS01'           DEFAULT RESOURCE OWNER
ADDUACC  DC    X'01'               DEFAULT UACC
ADDAUD   DC    X'20'               DEFAULT AUDIT ATTRIBUTES
ADDENT   DC    X'04'
ADDENTD  DC    CL4' '              ENTRY TO BE DEFINED
ADDACL   DC    CL8'XXXX'           DUMMY USER
         DC    X'100000'
ATY1     ICHEINTY ADD,TYPE='GEN',MF=L,                                 X
               ACTIONS=(ADDA1,ADDA2,ADDA3,ADDA4,ADDA5,ADDA6)
ADDA1    ICHEACTN MF=L,FIELD=UACC,FLDATA=(,ADDUACC)
ADDA2    ICHEACTN MF=L,FIELD=ACL,FLDATA=(11,ADDACL)
ADDA3    ICHEACTN MF=L,FIELD=OWNER,FLDATA=(,ADDOWN)
ADDA4    ICHEACTN MF=L,FIELD=INSTDATA,FLDATA=(,ADDENT)
ADDA5    ICHEACTN MF=L,FIELD=AUDIT,FLDATA=(,ADDAUD)
ADDA6    ICHEACTN MF=L,FIELD=DEFDATE,FLDATA=(,ADDENT)
         PAGEND
         EJECT
         TITLE 'P50185 - MENUFILL'
         PAGE MENUFILL
         EPMAC MENUFILL
*********************************************************************
*                                                                   *
* THIS ROUTINE PROCESSES THE TABLE WHICH IS BUILT AT RACLIST TIME.  *
* IT REQUIRES THAT DSR 25 BE LOADED WITH THE FOLLOWING VALUES       *
*   2 BYTES, WHICH WILL CONTAIN A RETURN CODE                       *
*       0 - ALL ENTRIES HAVE BEEN PROCESSED                         *
*       4 - ENTRIES REMAIN                                          *
*       8 - RACF ERROR HAS OCCURED. THE SECOND HALFWORD WILL CONTAIN*
*           THE RACF ERROR CODE                                     *
* ON EACH ENTRY THIS FIELD SHOULD HAVE A REQUEST CODE.              *
*       0 - RETURN ONLY TRANSACTIONS WHICH ARE AUTHORIZED FOR A USER*
*       4 - RETURN ALL TRANSACTIONS WITH EXPLANATION OF WHY USER WAS*
*           DENIED ACCESS                                           *
*   2 BYTES WHICH WILL CONTAIN THE NUMBER OF TRANSACTIONS RETURNED  *
*   4 BYTES CONTAINING THE USER ID TO PROCESS                       *
*   4 BYTES CONTAINING THE GROUP OF THE USER. THIS MUST BE INITIALI-*
*     ZED TO BLANKS ON INITIAL ENTRY                                *
*   8 BYTES WORK AREA WHICH MUST BE INITIALIZED TO ZEROES           *
* THE REMAINDER OF DSR25 WILL BE FILLED WITH UP TO 14 34 BYTE       *
* ENTRIES, WHERE EACH ENTRY CONTAINS THE 4 BYTE TRANSACTION ID AND  *
* A 30 BYTE DESCRIPTION                                             *
*                                                                   *
* IN ADDITION THIS ROUTINE ALSO USES DSR30                          *
*                                                                   *
* REGISTER USEAGE                                                   *
*   R4  - PTR TO DSR25                                              *
*   R5  - END OF TREE TABLE                                         *
*   R6  - PTR TO ENTRY IN TREE TABLE                                *
*   R7  - NO OF ENTRIES IN DSR25                                    *
*   R8  - PTR TO NEXT AVAILABLE SLOT IN DSR 25                      *
*   R9  - PTR TO RESOURCE PROFILE                                   *
*   R10 - WORK REGISTER                                             *
*   R11 - WORK REGISTER                                             *
*   R12 - TREE NODE PTR                                             *
*                                                                   *
*********************************************************************
         SPACE 5
         USING RACRNE,R12
         USING RACRPE,R9
         L     R4,DSR25            GET ADDRESSIBILITY TO DSR25
         USING MENUDSCT,R4         SET UP ADDRESSIBILITY TO MENU DSECT
         LH    R3,MENURC           LOAD REQUEST CODE
         L     R5,MENUTOP          CHECK FOR FIRST ENTRY
         LTR   R5,R5
         BNZ   MENUF020            IF NOT ZERO THEN CONTINUE
         SPACE 3
MENUF010 EQU   *
         L     R5,PSCRUSER(14)     GET ADDRESSIBILITY TO RACF WORK AREA
         L     R5,24(R5)
         L     R5,0(R5)            GET ADDR OF TABLE FROM FIRST WORD IN
*                                  USER AREA
         ST    R5,MENUTOP          STORE IN DSR25
         LA    R5,4(R5)            POINT TO FIRST TRUE ENTRY
         ST    R5,MENUNXT          STORE NEXT
         SPACE 3
MENUF020 L     R5,MENUTOP          GET TOP OF TABLE
         L     R6,MENUNXT          GET NEXT CELL TO PROCESS
         XR    R7,R7               CLEAR COUNT
         LA    R8,20(R4)           ADDR OF FIRST AVAILABLE DATA AREA
         L     R9,0(R5)            LOAD LENGTH OF TABLE
         AR    R5,R9               COMPUTE END OF TABLE
         S     R5,=F'4'            ADJUST TO BEGINING OF LAST ENTRY
         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE
         SPACE 3
MENUF025 MVI   FLGS,X'00'          CLEAR FLAGS
         L     R12,0(R6)           LOAD ADDR OF TREE NODE ELEMENT
         LTR   R12,R12             CHECK FOR NO TREE NODE
         BZ    MENUF065            IF NO, GO TO NEXT CELL IN TABLE
         L     R9,4(R12)           LOAD ADDR OF PROFILE
         LH    R10,RPEACCOF        LOAD OFFSET TO ACCESS LIST
         AR    R10,R9              COMPUTE ADDR OF LIST
         LH    R11,RPEACCNO        LOAD NO IN ACCESS LIST
         LTR   R11,R11
         BZ    MENUF035            CHECK FOR NO ONE THERE
         USING RPEACCLE,R10
         SPACE 3
         MVI   MENUAC,X'00'        SET MENU ACCESS FLAG
MENUF030 CLC   MENUID,RPEAUSR      IS USER ON ACCESS LIST
         BNE   MENUF031            NO, CHECK FOR GROUP
         OI    FLGS,X'80'          SET ID FOUND FLAG
         MVC   MENUAC,RPEACS       MOVE IN ACCES AUTHORITY
         B     MENUF040            CHECK LEVEL OF AUTHORITY
MENUF031 CLC   MENUGRP,RPEAUSR     IS GROUP ON ACCESS LIST
         BNE   MENUF033            NO, CONTINUE TO LOOP
         CLI   MENUAC,X'00'        WAS THE USER ON ACCESS LIST?
         BNE   MENUF033            YES, THEN USER'S ACCESS GETS PRTY
         OI    FLGS,X'40'          SET GROUP FOUND FLAG
         MVC   MENUAC,RPEACS       OTHERWISE SET GROUP ACCES IN FLAG
MENUF033 LA    R10,9(R10)          BUMP TO NEXT USER ON ACCESS LIST
         BCT   R11,MENUF030
         CLI   MENUAC,X'00'        WAS USER OR GROUP ON ACCESS LIST
         BNE   MENUF040            YES CHECK ACCESS
MENUF035 OI    FLGS,X'20'          SET UACC FLAG
         TM    RPEUACC,X'F0'       IF NOT ON ACCESS LIST, CHECK UACC
         BZ    MENUF060            IF UACC LESS THAN READ, NO AUTH
         B     MENUF050
         SPACE 5
MENUF040 TM    MENUAC,X'F0'        CHECK FOR AT LEAST READ ACCESS
         BZ    MENUF060            IF NOT, NO ACCESS IS ALLOWED
         SPACE 1
MENUF050 MVC   0(4,R8),RNEKEY      MOVE IN KEY
         LH    R11,RPEINSOF        LOAD OFFSET TO INSTALLATION DATA
         AR    R11,R9              COMPUTE ADDR OF INSTALLATION DATA
         MVI   4(R8),C' '          BLANK OUT ENTRY IN DSR25
         MVC   5(29,R8),4(R8)
         XR    R9,R9               CLEAR R9
         IC    R9,0(R11)           SET UP LENGTH
         C     R9,=F'0'            CHECK FOR ZERO
         BZ    MENUF055            IF ZERO, BYPASS
         S     R9,=F'1'            COMPUTE LENGTH FOR MOVE
         C     R9,=F'29'           MAXIMUM LENGTH IS 30
         BL    MENUF054            IF LESS, CONTINUE
         LA    R9,29               IF NOT, RESET LENGTH
MENUF054 EX    R9,MOVEDESC         MOVE IN DESCRIPTION
MENUF055 MVC   MENURC,=H'4'        SET UP RETURN CODE
         LA    R8,34(R8)           BUMP TO NEXT ENTRY IN DSR25
         LA    R7,1(R7)            INCR COUNTER
         STH   R7,MENUNO           STORE IN NO PROCESSED
         C     R7,=F'14'           IS DSR25 FULL?
         BE    MENUF070            YES, RETURN
         B     MENUF065            IF NOT, CONTINUE
         SPACE 3
MENUF060 C     R3,=F'0'            CHECK FOR REQUEST TYPE
         BE    MENUF065
         MVC   0(4,R8),RNEKEY      MOVE IN TRAN KEY
         MVI   4(R8),C' '          BLANK OUT ENTRY
         MVC   5(29,R8),4(R8)
         TM    FLGS,X'80'          CHECK FOR ID FLAG
         BZ    MENUF061
         MVC   4(2,R8),=C'R1'      SET RETURN TO REASON 1
         B     MENUF055            CONTINUE
MENUF061 TM    FLGS,X'40'          CHECK FOR GROUP FLAG
         BZ    MENUF062
         MVC   4(2,R8),=C'R2'      SET RETURN TO REASON 2
         B     MENUF055            CONTINUE
MENUF062 EQU   *                   UACC FLAG
         MVC   4(2,R8),=C'R3'      SET RETURN TO REASON 3
         B     MENUF055            CONTINUE
MENUF065 LA    R6,4(R6)            BUMP TO NEXT TABLE ENTRY
         ST    R6,MENUNXT
         CR    R6,R5               CHECK FOR END OF TABLE
         BNH   MENUF025            IF NOT, CONTINUE
         MVC   MENURC,=H'0'        SET RETURN CODE
         B     MENUFEXT            RETURN
         SPACE 3
MENUF070 LA    R6,4(R6)            BUMP TO NEXT TABLE ENTRY
         ST    R6,MENUNXT
         CR    R6,R5               CHECK FOR END OF TABLE
         BNH   MENUFEXT            IF NOT RETURN
         MVC   MENURC,=H'0'        SET RETURN CODE
         SPACE 5
MENUFEXT PERFEXIT
         SPACE 5
MOVEDESC MVC   4(0,R8),1(R11)
MENUAC   DC    C' '
FLGS     DC    X'00'
         PAGEND
         DROP 4
         DROP R9
         DROP R10
         DROP R12
         EJECT
         TITLE 'P50185 - RUON,SIGNOFF'
         PAGE RUON,SIGNOFF
         EPMAC RUON
*
*  THIS ROUTINE DOES AN ENQUE ON USER ID TO PREVENT A USER FROM
*  LOGGING ON MORE THAN ONE TERMINAL AT A TIME. IT WILL PASS BACK A
*  RETURN CODE OF 0 IF THE USER IS TO BE ALLOWED ON AND 8 IF THE
*  USER IS ALREADY LOGGED ON
*
         STM   R0,R15,ENQE1SA      STORE E/1 REGS
         BALR  R11,0               SET UP NEW BASE
         USING *,R11
         L     R4,PSCRUSER(R14)    LOAD ADDR OF USER AREA
         L     R5,36(R4)           LOAD ADDR OF USER ENQ TABLE
         LA    R8,ENQMAJ           LOAD ADDR OF ENQ NAME
         LA    R6,ENQMIN           LOAD ADDR OF RESOURCE NAME
         ESTAD C1=Y
         PACK  C1DWD,C1TERMID+1(3) CONVERT TERMID TO BINARY
         OI    C1DWD+7,X'0F'
         CVB   R4,C1DWD
         SLL   R4,2                MULTIPLY ID BY 4
         AR    R4,R5               COMPUTE ADDR OF TERM IN ENQ TABLE
         LA    R13,ENQSA           LOAD ADDR OF SAVE AREA
         CLC   0(4,R4),=C'    '    IS SOMEONE ALREADY ENQUED ON THIS
*                                  TERMINAL
         BE    ENQUEUE             NO, ENQU ON NEW USER
         MVC   ENQMIN(4),0(R4)     YES, MOVE IN USER WHO LAST HAD TERM
         DEQ   ((R8),(R6),4,SYSTEM) DEQ HIM
         MVC   0(4,R4),=C'    '    CLEAR TABLE ENTRY
ENQUEUE  MVC   ENQMIN(4),C1OPERID  MOVE IN CURRENT USER ID
         ENQ   ((R8),(R6),E,4,SYSTEM),RET=USE
         ST    R15,C1TALLY
         LTR   R15,R15
         BNZ   ENQU01              CHECK RETURN
         MVC   0(4,R4),C1OPERID    IF GOOD, PUT USER ID IN ENQ TABLE
ENQU01   LM    R0,R15,ENQE1SA
         PERFEXIT
         DROP  11
         EJECT
         EPMAC SIGNOFF
*
*  THIS ROUTINE DOES A DEQ  ON A USER WHEN HE SIGNS OFF E/1
*
         STM   R0,R15,ENQE1SA      STORE E/1 REGS
         BALR  R11,0               SET UP NEW BASE
         USING *,R11
         L     R4,PSCRUSER(R14)    LOAD ADDR OF USER AREA
         L     R5,36(R4)           LOAD ADDR OF USER ENQ TABLE
         LA    R8,ENQMAJ           LOAD ADDR OF ENQ NAME
         LA    R6,ENQMIN           LOAD ADDR OF RESOURCE NAME
         ESTAD C1=Y
         PACK  C1DWD,C1TERMID+1(3) CONVERT TERMID TO BINARY
         OI    C1DWD+7,X'0F'
         CVB   R4,C1DWD
         SLL   R4,2                MULTIPLY ID BY 4
         AR    R4,R5               COMPUTE ADDR OF TERM IN ENQ TABLE
         LA    R13,ENQSA           LOAD ADDR OF SAVE AREA
         XR    R15,R15
         CLC   0(4,R4),=C'    '    CHECK FOR NO ONE ON
         BE    DEQBYPS             IF YES, BYPASS
         MVC   ENQMIN(4),0(R4)     MOVE IN USER WHO LAST HAD TERM
         DEQ   ((R8),(R6),4,SYSTEM) DEQ HIM
DEQBYPS  ST    R15,C1TALLY
         MVC   0(4,R4),=C'    '    REMOVE ENTRY FROM ENQ TABLE
         LM    R0,R15,ENQE1SA
         PERFEXIT
         DROP  11
ENQE1SA  DS    16F                 E/1 SAVE AREA
ENQSA    DS    9D
ENQMAJ   DC    C'SYSIKJUA'
ENQMIN   DC    C'        '
         PAGEND
         TITLE 'P50185 - RACLIST'
         PAGE RACLIST                                 7/79     *** RACF
         EPMAC RACLIST
*
*  THIS ROUTINE LOADS IN STORAGE RACF PROFILES USING THE RACLIST
*  FACILITY. A MODEL ACEE IS CREATED IN THE USER AREA FROM THE ACEE
*  IN THE ASXB
*
         L     R4,544              LOAD PTR TO ASCB
         L     R4,108(R4)          LOAD PTR TO ASXB
         L     R4,200(R4)          R4 NOW PTS TO ACEE
         L     UAREG,PSCRUSER(14)
         L     R9,24(UAREG)        LOAD ADD OF RACF USER AREA
         MVC   4(100,R9),0(R4)     MOVE IN MODEL ACEE
         LA    R3,4(R9)            R5 NOW POINTS TO ACEE
         STM   R0,R3,E1SAV
         STM   R13,R15,E1SAV+16
         DROP  15                  ESTABLISH NEW BASE
         BALR  R12,0
         USING *,R12
         LA    R6,=C'TIMS    '     LOAD ADDR OF CLASS
         XR    R7,R7               CLEAR R7
         RACLIST CLASS=(R6),                                           X
               ACEE=(R3),SUBPOOL=((R7),(R7)),ENVIR=CREATE
         LTR   R15,R15             CHECK FOR VALID RETURN
         BZ    RACLST01
         C     R15,=F'16'
         BE    RACLST02
*                                  IF RACF IS ACTIVE AND RETURN CODE
*                                  IS NON ZERO---ABEND
         TSKABEND 9095
RACLST01 EQU   *
         USING ACEE,R3
         L     R3,ACEECLCP         GET ADDR OF IN STG PROFILE ANCHOR
         DROP  R3
         USING RACRTE,R3
         L     R3,RTETREE          GET ADDR OF TOP NODE OF TREE
         USING RACRNE,R4
         XR    R5,R5
         LR    R4,R3               BEGIN CHASING LEFT DAUGHTER CHAIN
LEFTLOOP LTR   R4,R4               CHECK FOR END OF CHAIN
         BZ    GETSTG              YES, GET STORAGE FOR TABLE
         LA    R5,1(R5)            INCREMENT LEVEL COUNT
         L     R4,RNELEFT          GET ADDR OF NEXT LEFT
         B     LEFTLOOP
GETSTG   LA    R6,1                LOAD 1 IN R6
         SLL   R6,2(R5)            COMPUTE 2**N
         GETMAIN RU,LV=(R6)        GET STORAGE FOR TABLE
         ST    R1,0(R9)            STORE ADDR OF TABLE IN USER AREA
         MVI   0(R9),C' '          BLANK HIGH ORDER BYTE
         ST    R6,0(R1)            STORE LENGTH OF TABLE IN FIRST CELL
         LR    R9,R1               STORE BASE ADDR OF TABLE
         S     R5,=F'1'            SUBTRACT 1 FROM COUNT
         LA    R6,1                SET R6 AT 1
         SLL   R6,0(R5)            COMPUTE 2**(N-1) -INIT VALUE FOR I
         SLL   R6,2                MULTIPLY BY 4 TO GET ADDR OF MID
         ST    R3,0(R6,R9)         SET UP COUNT REGISTER
         LA    R11,1               SET UP M
         B     RSRCH020
RSRCH010 SLL   R11,1               MULTIPLY BY 2
RSRCH020 LR    R10,R11             SET UP COUNT REG
         LR    R7,R6               SET UP J
         SRL   R7,1                DIVIDE I/2 GIVING J
         LR    R8,R6               SET UP K
RSRCH030 L     R4,0(R8,R9)         LOAD ADDR OF T(K)
         C     R4,=F'0'            CHECK FOR ZEROES
         BNE   RSRCH035
         LA    R4,ZEROES
RSRCH035 LR    R5,R8
         SR    R5,R7               COMPUTE T(K-J)
         AR    R5,R9
         MVC   0(4,R5),RNELEFT     MOVE IN LEFT DAUGHTER
         LR    R5,R8
         AR    R5,R7               COMPUTE T(K+J)
         AR    R5,R9
         MVC   0(4,R5),RNERIGHT    MOVE IN RIGHT DAUGHTER
RSRCH040 LR    R5,R6
         SLL   R5,1                MULTIPLY I BY 2
         AR    R8,R5               COMPUTE K = K + 2I
         BCT   R10,RSRCH030
         SRL   R6,1                DIVIDE I BY 2
         C     R6,=F'4'            CHECK FOR 1
         BNE   RSRCH010
RACLST03 LM    R0,R3,E1SAV
         LM    R13,R15,E1SAV+16
         PERFEXIT
RACLST02 MVI   0(UAREG),C'I'       MOVE INACTIVE FLAG TO USER AREA
         B     RACLST03
E1SAV    DS    7F
ZEROES   DC    F'0'
         DC    F'0'
         DC    F'0'
         PAGEND
         EJECT
         TITLE 'P50185 - FRACHECK'
         PAGE FRACHECK
         EPMAC FRACHECK
*
*  THIS ROUTINE PERFORMS FAST PATH RESOURCE ACCESS CHECKING FOR
*  E/1 TRANSACTIONS. THIS ROUTINE MUST BE ENTERED WITH DSR6 POINTING TO
*  THE USER'S TYPE 4 PASSWORD RECORD
*
         L     UAREG,PSCRUSER(14)
         L     UAREG,24(UAREG)
         CLI   0(UAREG),C' '       CHECK FOR SUCCESSFUL RACLIST
         BE    FRAC001
         PERFORM EP=RACLIST
*        PERFORM EP=QSNAP
         L     UAREG,PSCRUSER(14)
         L     UAREG,24(UAREG)     GET ADDRESSABILITY TO RACF USER AREA
         CLI   0(UAREG),C'I'       IF RACF IS INACTIVE LET USER ACCESS
*                                  TRANSACTION
         BE    FRAC002
FRAC001  EQU   *
         USING ACEE,R10
         LA    R10,4(UAREG)        LOAD R10 WITH ADDR OF ACEE
         L     R11,DSR6
         STM   R0,R3,E1SAV01       STORE E/1 REGS
         STM   R13,R15,E1SAV01+16
         DROP  15
         BALR  R9,0                ESTABLISH NEW BASE
         USING *,R9
         MVC   ACEEGRPN,X'2C'(R11) SET UP ACEE FOR FRACHECK
         MVC   ACEEUSRI(4),7(R11)
         MVC   ACEEFLG2,X'18'(R11)
         XR    R8,R8
         IC    R8,=X'02'           CHECK FOR READ AUTHORITY
         LA    R5,FRACWK
         LA    R6,FRACCLS
         L     R7,C1DSR            ESTABLISH ADDRESSIBILITY
         USING C1COMMON,R7
         MVC   FRACTRAN(4),C1TRANID
         LA    R7,FRACTRAN
         FRACHECK ENTITY=(R7),CLASS=(R6),ACEE=(R10),                   X
               ATTR=(R8),WKAREA=(R5)
         LM    R0,R3,E1SAV01       RESTORE E/1 REGS
         ESTAD C1=Y
         ST    R15,C1TALLY
         LM    R13,R15,E1SAV01+16
         CLI   C1TALLY+3,X'0C'    CHECK FOR RACF NOT ACTIVE
         BNE   FRAC002
         S     R10,=F'4'          IF NOT ACTIVE MOVE IN INACTIVE FLAG
         MVI   C1TALLY+3,X'00'
         MVI   0(R10),C'I'
FRAC002  EQU   *
*        PERFORM EP=QSNAP
         PERFEXIT
E1SAV01  DS    7F
FRACWK   DS    16F
FRACCLS  DC    CL8'TIMS'
FRACTRAN DC    CL8'    '
         PAGEND
         EJECT
         TITLE 'P50185 - RACLISTD'
         PAGE  RACLISTD
         EPMAC RACLISTD
*
* THIS ROUTINE DELETES THE IN STORAGE PROFILES
*
         L     UAREG,PSCRUSER(14)
         L     UAREG,24(UAREG)     GET ADDR OF RACF WORK AREA
         L     R8,0(UAREG)         LOAD ADDR OF RACLIST TABLE
         L     R9,0(R8)            LOAD LENGTH OF RACLIST TABLE
         LA    R5,4(UAREG)         LOAD OF ACEE
         MVI   0(UAREG),C'*'       RESET RACLIST FLAG
         LA    R6,=C'TIMS    '     LOAD ADDR OF CLASS TO BE DELETED
         XR    R7,R7               CLEAR R7
         STM   R0,R3,E1SAV2        STORE E1 REGS
         STM   R13,R15,E1SAV2+16
         DROP  15
         BALR  R10,0               SET UP NEW BASE
         USING *,R10
         RACLIST CLASS=(R6),ACEE=(R5),SUBPOOL=((R7),(R7)),ENVIR=DELETE
         ESTAD C1=Y
         ST    R15,C1TALLY         STORE RETURN CODE
         FREEMAIN RU,LV=(R9),A=(R8) FREE RACLIST TABLE
         LM    R0,R3,E1SAV2        RESTORE E/1 REGS
         LM    R13,R15,E1SAV2+16
         CLI   C1TALLY+3,X'10'     CHECK FOR RACF NOT ACTIVE
         BNE   RACLSD01            IF ACTIVE, AND BAD RETURN CODE,
*                                  RETURN TO USER
         MVI   C1TALLY+3,X'00'     SET RETURN TO 00
RACLSD01 EQU   *
         PERFEXIT
E1SAV2   DS    7F
         PAGEND                                           7/79 *** RACF
         EJECT
         TITLE 'P50185 -  RACINIT'
          PAGE RACINIT                                         *** RACF
          EPMAC RACINIT
***********************************************************************
*
*  RACINIT PROVIDES A RACF INTERFACE FOR E/1 PROGRAMS TO ALLOW RACF
*  PASSWORD CHECKING. IF ENTERED WITH A RETURN CODE OF 1, NO PASSWORD
*  CHECKING IS PERFORMED AND GROUP NAME IS RETURNED IN THE PASSWORD
*  FIELD.
*
***********************************************************************
          PERFORM EP=V(CHKNETWK)
          USING C1COMMON,R12
          L     R12,C1DSR
*                                                         7/79 *** RACF
          L     R6,DSR6
*                                                         7/79 *** RACF
          L     R10,DSR30          ESTABLISH ADDRESSABILITY TO RACF
*                                  DSR
          USING RACFDS,R10
          STM   R0,R3,200(R6)      SAVE E/1 REGS
          STM   R13,R15,216(R6)
          DROP  15
          BALR  R11,0              ESTABLISH NEW BASE
          USING *,R11
          LA    R13,X'1B8'(0,R10)  LAST 72 BYTES OF DSR30 ARE OS SAVE
*                                  AREA
          LA    R3,RACFACEE
          MVC   RACFID,RACFUID     MOVE USER ID FROM DSR
          LA    R7,RACFIDL
          ST    R7,RACFMAC+12      STORE USER IN PARM LIST
          MVC   RACFOP,RACFPS      MOVE OLD PASSWORD
          LA    R8,RACFOPL
          ST    R8,RACFMAC+16      STORE PASSWORD
          CLI   RACFNPS,C' '       CHECK FOR NEW PASSWORD
          BE    RACF001
          MVC   RACFNP,RACFNPS
          LA    R9,RACFNPL
          ST    R9,RACFMAC+32      STORE NEW PASSWORD
RACF001   EQU   *
          LH    R15,RACFRC         CHECK RETURN CODE
          C    R15,=F'1'           IF 1, BYPASS PASSWORD CHECKING
          BE   RACF010
          L     R4,PSCRUSER(R14)   LOAD ADDR OF USERAREA
          L     R4,4(R4)           GET ADDR OF L. U. TABLE
          PACK  C1DWD,C1TERMID+1(3) CONVERT TERM ID TO BINARY
          OI    C1DWD+7,X'0F'
          CVB   R5,C1DWD
          SLA   R5,3               MULTIPLY BY 8
          AR    R4,R5
*                                                         7/79 *** RACF
          LA    R5,8               SET UP LENGTH FOR GETMAIN
          GETMAIN RU,LV=(R5),SP=241
          LR    R5,R1              STORE ADDR OF 8 BYTES IN NONE TASK
*                                  RELATED SUBPOOL FOR LU NAME
          MVC   0(8,R5),0(R4)      MOVE IN LU NAME
          ST    R5,RACFMAC+48      STORE ADDR OF LU IN RACINIT LIST
*                                                         7/79 *** RACF
          XI    RACFMAC+11,X'80'   SET FLAGS FOR CREATE
          BAL   R2,RACFMAC
*                                                         7/79 *** RACF
          LTR   R15,R15            CHECK RETURN FROM RACINIT
          BNZ   RACF002
          L     R2,0(R3)           LOAD ACEE INTO R2
          USING ACEE,R2
          CLC   X'1E8'(3,R12),=C'PRD' CHECK FOR PRODUCTION SYSTEM
          BE    RACF005            IF IT IS, USE THE TRUE GROUP
          MVC   X'2C'(4,R6),=C'XXXX' OTHERWISE USE DUMMY GROUP
          B    RACF006
RACF005   XR    R9,R9              CLEAR R9
          IC    R9,ACEEGRPL        PUT GROUP LENGTH INTO R9
          EX    R9,MOVEC           MOVE GROUP INTO TYPE 4 REC
RACF006   MVC   X'18'(1,R6),ACEEFLG2 MOVE USER AUTHORIZATIONS TO TYPE 4
RACF002   EQU   *
          SRA   R15,2              DIVIDE BY 4
*                                                         7/79 *** RACF
          STH   R15,RACFRC         STORE RETURN CODE IN DMB
          XC    RACFMAC+12(40),RACFMAC+12 CLEAR ADDR IN PARM LIST FOR
*                                  DELETE
          XI    RACFMAC+11,X'80'   RESET FLAGS FOR DELETE
          BAL   R2,RACFMAC
          LA    R4,8               LOAD LENGTH OF AREA TO FREE
          FREEMAIN RU,LV=(R4),A=(R5),SP=241 FREE STORAGE
RACF004   LM    R0,R3,200(R6)      RESTORE E/1 REGS AND RETURN
          LM    R13,R15,216(R6)
          PERFEXIT
RACF010   EQU  *
          XI   RACFMAC+11,X'88'    SET OPTION BITS FOR CREATE
          BAL  R2,RACFMAC
          STH  R15,RACFRC          STORE RETURN
          LTR  R15,R15             CHECK FOR GOOD RETURN
          BNZ  RACF012             IF NO GOOD,DELETE AND RETURN
          CLC   X'1E8'(3,R12),=C'PRD' CHECK FOR PRODUCTION SYSTEM
          BE    RACF011            IF IT IS, USE THE TRUE GROUP
          MVC   RACFPS(4),=C'XXXX' OTHERWISE USE DUMMY GROUP
          B    RACF012
RACF011   L    R2,0(R3)            LOAD ADDR OF ACEE
          MVC  RACFPS(4),ACEEGRPN  MOVE IN GROUP NAME
RACF012   XI   RACFMAC+11,X'88'    RESET OPTION BITS FOR DELETE
          XC   RACFMAC+12(40),RACFMAC+12 CLEAR ADDRESSES
          BAL  R2,RACFMAC          DELETE
          B    RACF004
RACFMAC   DS   0F
          RACINIT ENVIR=DELETE,ACEE=(R3),SUBPOOL=0
          BR   R2
MOVEC     MVC  X'2C'(0,R6),ACEEGRPN
RACFACEE  DS   F
RACFOPL   DC   FL1'8'
RACFOP    DS   CL8
RACFNPL   DC   FL1'8'
RACFNP    DS   CL8
RACFIDL   DC   FL1'4'
RACFID    DS   CL4
          PAGEND                                               *** RACF
         TITLE 'C1COMMON PAGE'
         C1DSR
         SPACE
*              USER REDEFINITION EXTENSION
         ORG   C1XAREA
C1REGWR2 DS    F                       USED BY TAKECKPT RTN
         ORG   C1XAREA
C1HALFWD DS    H                       USED BY GETSCB0 RTN
C1DELAY  DS    F                       DELAY INTERVAL
         ORG C1XAREA
C1RECONN DS    CL1                     USED BY TERMCONN
         ORG C1XAREA
C1PRTACT DS    CL1                     USED BY PRTACTVE
         ORG C1XAREA
C1NETWRK DS    CL3                     USED BY CHKNETWK
         ORG C1XAREA
         DS    CL20
C1TALLY  DS    CL4                     FOR DEBUGGING PURPOSES ONLY
         ORG C1XAREA
C1TMID   DS    CL3
C1LUNME  DS    CL8
         SRCEND
         TITLE 'P50185  DSECTS  AND ASSORTED JUNK'
*              REGISTER ASSIGNMENTS
C1REG    EQU   7
DBREG    EQU   8
TOREG    EQU   12
MOREG    EQU   12
ABREG    EQU   12
         SPACE
MODSR    EQU   DSR3
MODSRN   EQU   3
C1DSR    EQU   DSR4
C1DSRN   EQU   4
CSDSR    EQU   DSR5
CSDSRN   EQU   5
DBDSR    EQU   DSR6
DBDSRN   EQU   6
         SPACE
WR1      EQU   4
WR2      EQU   WR1+1
WR3      EQU   6
WR6      EQU   6                                            ****** VTAM
WR9      EQU   9                                            ****** VTAM
WR8      EQU   8                                            ****** VTAM
PRTDSR   EQU   DSR7
PRTDSRN  EQU   7
         SPACE 3
UAREG    EQU   12
PSCRUSER EQU   X'50'         DISP INTO PSCR OF V(USER)
LUTABLE  EQU   1724          DISP OF L.U. TABLE INTO PSCR     **** VTAM
    SPACE 3
RACFDS    DSECT
RACFRC    DS   H
RACFUID   DS   CL4
RACFPS    DS   CL8
RACFNPS   DS   CL8
MENUDSCT DSECT
MENURC   DS    H
MENUNO   DS    H
MENUID   DS    CL4
MENUGRP  DS    CL4
MENUNXT  DS    F
MENUTOP  DS    F
ALTDSECT DSECT
ALTRC    DS    H
ALTRQ    DS    H
ALTUSR   DS    CL4
ALTAUTH  DS    CL1
ALTTRAN  DS    CL4
ALTDESC  DS    CL31
LOCDSECT DSECT
LOCRC    DS    H
LOCNORT  DS    H                   NUMBER RETURNED
LOCNORE  DS    H                   NUMBER REMAINING
LOCFILL  DS    H                   FILLER
LOCWK1   DS    F
LOCWK2   DS    F
LOCTRAN  DS    CL4
LOCDESC  DS    CL30
LOCARRY  DS    CL5
LOCREPT  DSECT
LOCUSR   DS    CL8
LOCAUTH  DS    CL1
DELDSECT DSECT
DELRC    DS    H
DELTRAN  DS    CL4
WKARDSEC DSECT
WKALEN   DS    F
         DS    CL20
WKDLEN   DS    F
WKDATA   DS    0C
         IHAACEE
         COPY ICHPISP
         END
