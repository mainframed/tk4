*          DATA SET P50267     AT LEVEL 001 AS OF 02/27/81
P50267   $PROLOG 11,12
         SPACE 5
         EJECT
***********************************************************************
*                                                                     *
*  PROGRAM: P50267                                                    *
*                                                                     *
*  PURPOSE:                                                           *
*  THIS PROGRAM FINDS CONFLICTS BETWEEN THE RACF DATASET AND THE      *
*  FORMAT 1 DSCBS. THE TYPES OF CONFLICTS WHICH MAY EXIST ARE:        *
*     1) DSCB FLAGGED AS RACF PROTECTED BUT NO RACF PROFILE.          *
*     2) RACF PROFILE BUT NO DSCB                                     *
*     3) RACF PROFILE BUT DSCB NOT FLAGGED AS RACF PROTECTED          *
*  THE PROGRAM IGNORES ALL RACF PROFILES WHICH ARE FOR VSAM DATASETS. *
*                                                                     *
*  USE:                                                               *
*    //     EXEC PGM=P50267                                           *
*    //SYSPRINT  DD  SYSOUT=A                                         *
*    //SYSIN     DD  *                                                *
*    //CONFLICT  DD  DSN=SEQU.DATA.SET,.....                          *
*   WHERE - SYSPRINT IS A MESSAGE DATASET                             *
*         - CONFLICT IS ANY SEQUENTIAL DATA SET. THIS WILL CONTAIN    *
*           A RECORD FOR EACH CONFLICT. THE FORMAT OF THE RECORD WILL *
*           BE                                                        *
*             POS       FIELD                                         *
*             1-2       BINARY HALFWORD REQUEST NUMBER.               *
*             3-46      DATASET IN CONFLICT                           *
*             47-53     VOLUME SERIAL NUMBER IN CONFLICT              *
*             54-54     BINARY REASON CODE(1,2,3-SEE ABOVE)           *
*         -SYSIN CONTAINS CARD IMAGES WITH THE VARIOUS REQUESTS.      *
*          EACH REQUEST IS TRIGGERED BY THE LIST KEYWORD. FOLLOWING   *
*          THE LIST KEY WORD MAY OPTIONALLY BE THE VOLUME OR LEVEL    *
*          KEYWORDS. THE PARAMETERS SPECIFIED MUST BE ENCLOSED IN     *
*          IN PARENTHESES AND SEPARATED BY COMMAS. EACH REQUEST MUST *
*          BE TERMINATED BY A PERIOD. A COMMAND MAY EXTEND ACCROSS    *
*          MULTIPLE CARDS BUT MAY NOT CONTAIN MORE THAN 256 CHARACTERS*
*          (EXCLUDING BLANKS).                                        *
*                                                                     *
*          FOR EXAMPLE A DECK OF CONTROL CARDS MAY LOOK AS FOLLOWS:   *
*                                                                     *
*          LIST VOLUME(TSO001,PVT030) LEVEL(TS14).                    *
*          LIST VOLUME(TSO004,MVSRES).                                *
*          LIST LEVEL(TS14,                                           *
*                     TS02,                                           *
*                     TS01).                                          *
*                                                                     *
*        RESTRICTIONS-THIS PROGRAM MUST BE ABLE TO ISSUE SVC 231      *
*           TO GAIN AUTHORIZTION. IT ALSO MAKE USE OF SVC 99 TO       *
*           ALLOCATE ALL MOUNTED VOLUMES ON THE SYSTEM.               *
*                                                                     *
***********************************************************************
         EJECT
         LA    R1,=C'AUTH'         MAKE PROGRAM AUTHORIZED
         SVC   231
         OPEN  (CONFLICT,(OUTPUT)) OPEN DATASET FOR CONFLICTS
         CALL  UCBSRCH,(UCBANCH)   GO GET ALL MOUNTED VOLUMES
MAIN000  L     R15,=A(CARDED)      GO GET
         BALR  R6,R15                  FIRST REQUEST
         CH    R15,=H'8'           IS IT THE LAST??
         BE    MAIN999             YES, THEN STOP
         L     R4,=A(REQNO)        GET ADDRESS OF REQUEST NUMBER
         MVC   CONREQ,0(R4)        MOVE TO CONFLICT RECORD
         MVC   CURVOL,=A(VOLTAB)   NO, GET ADDRESS OF VOLUME TABLE
         L     R4,=A(VOLCT)        GET VOLUME COUNT ADDR
         LH    R4,0(R4)            GET VOLUME COUNT
         STH   R4,REMVOLS          STORE IN REMAINING VOLUMES
         L     R2,UCBANCH          GET UCB ANCHOR
         L     R3,=A(VOLSW)        GET ADDR OF REQUEST SWITCH
         TM    0(R3),ALLVOLS       IS THIS REQUEST FOR ALL VOLUMES?
         BO    MAIN010             YES, THEN CONTINUE
         CLC   REMVOLS,=H'0'       NO, ARE ALL SELECTED VOLS PROCSSED?
         BE    MAIN500             YES, PROCEED WITH ANALYSIS OF RACF
         L     R5,CURVOL           NO, GET CURRENT VOLUME ANCHOR
MAIN005  CLC   4(6,R2),0(R5)       IS THIS VOLUME, ONE THAT WAS
*                                  SELECTED? ?
         BE    MAIN015             YES--
         L     R2,0(R2)            NO, ADVANCE TO NEXT IN CHAIN
         LTR   R2,R2               ANY MORE? ?
         BNZ   MAIN005             YES, LOOP UNITL DONE OR FOUND ONE
         MVC   NOTMNT+2(6),0(R5)   MOVE CURRENT SEARCH VOLUME IN MSG
         MVI   BLANKLN,C' '        BLANK OUT
         MVC   BLANKLN+1(132),BLANKLN
         MVC   BLANKLN(L'NOTMNT),NOTMNT      LINE
         L     R10,=A(ERRPRNT)     GET ADDR OF ERROR DCB
         PUT   (R10),BLANKLN       WRITE IT OUT
         B     MAIN045             GO ADVANCE AND CURRENT AND REDUCE
*                                  COUNT
MAIN010  LA    R5,4(R2)            POINT TO CURRENT VOLUME
         ST    R2,CURVOL           STORE ADDRESS OF CHAIN ELEMENT
MAIN015  EQU   *                   AT THIS POINT R5 PTS TO THE SELECTED
*                                  VOLUME
         LA    R3,DDNDSCB          GET ADDR OF DCB
         USING IHADCB,R3
         MVC   DCBDDNAM,=CL8' '    CLEAR DDNAME
         MVC   DCBDDNAM(6),0(R5)   MOVE IN DDNAME
         LA    R3,DSCB             GET ADDR OF DSCB WORK AREA
         USING DSCBDSCT,R3         SET UP ADDRESSIBILITY
         RDJFCB DDNDSCB
         LTR   R15,R15             CHECK RETURN
         BZ    MAIN016             GOOD, CONTINUE
         ABEND 4,DUMP              OTHERWISE GET OUT
MAIN016  MVI   JFCB,4              SET VTOC DSN
         MVC   JFCB+1(43),JFCB
         ENQ   (SYSVTOC,JFCB+118,S,6,SYSTEM) SEIZE THE VTOC
         OPEN  (DDNDSCB,(INPUT)),TYPE=J
MAIN020  READ LISTDECB,SF,DDNDSCB,DSCB
         CHECK LISTDECB
         CLI   DS1FMTID,C'1'       IS THIS A TYPE 1 RECORD ? ?
         BNE   MAIN020             NO, CONTINUE TO READ UNTIL TYPE 1
         TM    DS1DSIND,DS1IND40   IS IT RACF PROTECTED
         BNO   MAIN020             NO GET ANOTHER
         L     R4,=A(DSNSW)        GET ADDR OF DSN SWITCH
         TM    0(R4),ALLDSNS       DO WE WANT EVERYTHING
         BO    MAIN030             YES, THEN CONTINUE
         L     R4,=A(LVLTAB)       GET ADDR OF LEVEL TABLE
         L     R6,=A(LVLCT)        GET ADDR OF LEVEL COUNT
         LH    R6,0(R6)            GET COUNT
         LA    R7,DSCB             BEGINING OF LOOP
         LA    R9,8(R7)            END OF LOOP
         LA    R8,1                INCREMENT
MAIN025  CLI   0(R7),C'.'          END OF QUALIFIER?
         BE    MAIN026             YES--
         BXLE  R7,R8,MAIN025       NO-- LOOP
         B     MAIN020             -NO QUALIFIER, GO GET ANOTHER
MAIN026  LA    R8,DSCB             GET BEGININING OF DSNAME
         SR    R7,R8               GET LENGTH OF QUALIFIER
         BCTR  R7,0                REDUCE FOR EXECUTE
MAIN027  EX    R7,DSNEX            IS IT A LEVEL WE ARE INTERESTED IN?
         BE    MAIN030             YES--
         LA    R4,8(R4)            NO ADVANCE TO NEXT LEVEL IN TABLE
         BCT   R6,MAIN027          LOOP THROUGH THE TABLE
         B     MAIN020             NOT FOUND IN TABLE
         DROP  R3
MAIN030  LA    R15,DSNLEN+1        GET BEGINNING ADDR
         LA    R1,1                INCREMENT
         LA    R14,44              FINAL VALUE
MAIN031  CLI   0(R15),C' '         IS IT A BLANK
         BE    MAIN032             YES, THEN R1 CONTAINS LENGTH
         LA    R1,1(R1)            INCREMENT THROUGH DSNAME
         LA    R15,1(R15)          ADVANCE TO NEXT BYTE
         BCT   R14,MAIN031         AND LOOP
MAIN032  BCTR  R1,0                REDUCE TO LENGTH OF 44
         STC   R1,DSNLEN           STORE ACTUAL LENGTH
         ICHEINTY LOCATE,TYPE='DS',ENTRY=DSNLEN,VOLUME=(R5),           X
               WKAREA=LOCWORK,ACTIONS=ACT1
         CH    R15,=H'0'           OK? ?
         BE    MAIN020             YES, GET ANOTHER
         CH    R15,=H'12'          NOT FOUND? ?
         BE    MAIN035             YES, THEN WE HAVE A CONFLICT
         CH    R15,=H'60'          NOT FOUND ON SPECIFIED VOLUME?
         BE    MAIN035             YES, THEN WE HAVE A CONFLICT
         ABEND 3,DUMP              OTHERWISE ABEND
MAIN035  MVC   CONDSN,DSCB         MOVE IN FOR CONFLICT RECORD
         MVC   CONVOL,0(R5)
         MVI   CONRET,1
         PUT   CONFLICT,CONREC     WRITE IT OUT
         B     MAIN020             GO GET ANOTHER VTOC RECORD
MAIN040  CLOSE (DDNDSCB)
         DEQ   (SYSVTOC,JFCB+118,6,SYSTEM)
MAIN045  EQU   *
         L     R3,=A(VOLSW)
         TM    0(R3),ALLVOLS       ARE WE INTERESTED IN ALL VOLUMES
         BO    MAIN050             YES--
         L     R2,UCBANCH          NO, GET FIRST VOLUME PTR
         L     R5,CURVOL           GET CURRENT VOLUME PTR
         LA    R5,6(R5)            ADDVANCE TO NEXT VOLUME
         ST    R5,CURVOL           STORE IN CURRENT VOLUME
         LH    R4,REMVOLS          GET REMAINING VOLUMES
         BCTR  R4,0                REDUCE BY ONE
         STH   R4,REMVOLS
         LTR   R4,R4               ANY MORE?
         BNZ   MAIN005             YES- CONTINUE
         B     MAIN500             NO, PROCESS RACF DATASET
MAIN050  L     R2,CURVOL           GET ADDR OF CURRENT CHAIN ELEMENT
         L     R2,0(R2)            CHAIN TO NEXT VOLUME
         LTR   R2,R2               ANY MORE? ?
         BNZ   MAIN010             YES- CONTINUE
         B     MAIN500             NO, PROCESS RACF DATASET
         EJECT
MAIN500  ICHEINTY NEXTC,TYPE='DS',ENTRY=NXTDSN,                        X
               ACTIONS=(ACT4,ACT2,ACT3,ACT5),WKAREA=LOCWORK
         CH    R15,=H'12'          DONE? ?
         BE    MAIN000             YES, SEE IF MORE REQUESTS
         CH    R15,=H'0'           OK?
         BE    MAIN510             YES, CONTINUE
         ABEND 5,DUMP              NO, BOMB IT
MAIN510  EQU   *                   BEGIN CHECING TO BAPASS TAPES.
*             -----------------------NOTE--------------------
*             --- ANY VOLUME WITH ALL NUMERICS WILL BE    ---
*             --- CONSIDERED TO BE A TAPE                 ---
*             -----------------------NOTE---------------------
         TM    LOCWORK+48,X'80'    IS IT A PROFILE FOR A VSAM DATASET
         BO    MAIN500             YES, THEN BYPASS
         CLI   LOCWORK+32,X'20'    IS IT A DISK?
         BE    MAIN520             YES--
         CLI   LOCWORK+32,X'80'    IS IT A TAPE?
         BE    MAIN500             YES, THEN BYPASS
         CLC   LOCWORK+40(6),=C'MODEL ' IS IT A GDG MODEL?
         BE    MAIN500             YES, THEN BYPASS
         TRT   LOCWORK+40(6),NUMTAB IS VOLSER NUMERIC?
         BC    8,MAIN500           YES, THEN BYPASS
MAIN520  XR    R5,R5               CLEAR COUNT REG
         L     R3,=A(VOLSW)        GET ADDR OF VOL SWITCH
         LA    R6,LOCWORK+40       GET BEGINING OF VOLUME LIST
         MVC   CURVOL,=A(VOLTAB)   GET ADDR OF VOLUME TABLE
         LH    R4,LOCWORK+36       LOAD VOLUME COUNT
MAIN530  L     R5,=A(VOLCT)        GET VOLUME COUNT FOR TABLE
         LH    R5,0(R5)
         L     R7,CURVOL           GET CURVOL PTR
MAIN540  CLC   0(6,R6),0(R7)       IS THIS A VOLUME WE WANT
         BE    MAIN550             YES--
         TM    0(R3),ALLVOLS       DO WE WANT ALL VOLUMES?
         BO    MAIN550             YES--
         LA    R7,6(R7)            ADVANCE TO NEXT VOLUME
         BCT   R5,MAIN540          LOOP THROUGH TABLE
MAIN545  LA    R6,6(R6)            ADVANCE TO NEXT IN WORK AREA
         BCT   R4,MAIN530          LOOP UNTIL ALL PROCESSED
         B     MAIN500             GO GET ANOTHER
MAIN550  L     R1,=A(DSNSW)        GET DSN SWITCH
         TM    0(R1),ALLDSNS       DO WE WANT ALL LEVELS?
         BO    MAIN590             YES--
         LA    R9,NXTDSN+9         END OF LOOP
         LA    R8,1                INCREMENT OF LOOP
         LA    R15,NXTDSN+1        BEGINNING OF LOOP
MAIN560  CLI   0(R15),C'.'         CHECK FOR FIRST LEVEL
         BE    MAIN570             YES--
         BXLE  R15,R8,MAIN560      LOOP UNTIL FIND FIRST LEVEL
         B     MAIN545             NO QUALIFIER ON DSN
MAIN570  LA    R8,NXTDSN+1
         SR    R15,R8              COMPUTE LENGT
         BCTR  R15,0               REDUCE FOR COMPARE
         L     R8,=A(LVLTAB)       BEGINNING OF TABLE
         L     R9,=A(LVLCT)        COUNT
         LH    R9,0(R9)
MAIN580  EX    R15,LVLCLC          IS IT IN TABLE
         BE    MAIN590             YES--
         LA    R8,8(R8)            NO, ADVANCE TO NEXT LEVEL
         BCT   R9,MAIN580          AND LOOP
         B     MAIN545             NOT IN TABLE, THEN GET NEXT
MAIN590  EQU   *                   FOUND LEVEL/VOLUME IN TABLE
         MVC   CONVOL,LOCWORK+40
         XR    R15,R15             CLEAR R15
         IC    R15,NXTDSN          GET LENGTH OF DSNAME
         MVC   DSCB(44),=CL44' '   CLEAR DSNAME
         BCTR  R15,0               REDUCE FOR MOVE
         EX    R15,CAMMOV          MOVE IN NAME
         OBTAIN CAMLIST            GET DSCB
         LTR   R15,R15             GOOD?
         BZ    MAIN620             YES--
         CH    R15,=H'8'           DSCB NOT FOUND?
         BNE   MAIN600             NO--
         MVI   CONRET,2            SET REASON CODE TO 2
         B     MAIN630             GO WRITE OUT ERROR
MAIN600  CH    R15,=H'4'           IS IT MOUNTED
         BE    MAIN610             NO, LOG MESSAGE
         ABEND 6,DUMP              OTHWISE, ZONK IT
MAIN610  MVI   BLANKLN,C' '        BLANK OUT
         MVC   BLANKLN+1(132),BLANKLN
         MVC   NOTMNT2+2(6),LOCWORK+40 MOVE IN VOLUME
         MVC   NOTMNT2+9(44),DSCB  MOVE IN DSNAME
         MVC   BLANKLN(NOTMNT2L),NOTMNT2  MOVE IN MESSAGE
         L     R10,=A(ERRPRNT)     GET ADDR OF DCB
         PUT   (R10),BLANKLN       WRITE IT OUT
         B     MAIN640
MAIN620  LA    R15,DSCB
         USING DSCBDSCT+44,R15
         TM    DS1DSIND,DS1IND40   IS IT RACF PROTECTED?
         BO    MAIN640             YES- OK
         MVI   CONRET,3            NO, THEN CONFLICT
MAIN630  XR    R15,R15             CLEAR R15
         IC    R15,NXTDSN          GET LENGTH
         BCTR  R15,0               REDUCE FOR MOVE
         MVC   CONDSN,=CL44' '     BLANK OUT FIELD
         EX    R15,CONMOV          MOVE IT
         MVC   CONVOL,LOCWORK+40
         PUT   CONFLICT,CONREC     WRITE OUT CONFLICT
         DROP  R15
MAIN640  CH    R4,=H'0'            ANY MORE VOLS FOR THIS DSN?
         BE    MAIN500             NO, GO GET NEXT REQUEST
         LA    R6,6(R6)            ADDVANCE TO NEXT LEVEL
         BCT   R4,MAIN530
         B     MAIN500
         SPACE 5
MAIN999  EQU   *
         L     R4,=A(ERRPRNT)
         CLOSE ((R4),,CONFLICT)
         $EPILOG
         TITLE '****P50267 CONSTANT SECTION'
CONREC   EQU   *
CONREQ   DS    H
CONDSN   DS    CL44
CONVOL   DS    CL6
CONRET   DS    X
UCBANCH  DS    F
CURVOL   DS    F
REMVOLS  DS    H
BLANKLN  DS    CL133
NOTMNT   DC    C'- XXXXXX NOT MOUNTED - BYPASSED'
NOTMNT2  DC    C'- XXXXXX 1234567890123456789012345678901234567890'
         DC    C'1234 NOT MOUNTED'
NOTMNT2L EQU   *-NOTMNT2
         DS    0F
JFCBXLST DC    AL1(128+7),AL3(JFCB)
JFCB     DC    XL176'00'
SYSVTOC  DC    CL8'SYSVTOC'
*   THE NEXT TWO FIELDS MUST BE KEPT TOGETHER
DSNLEN   DC    AL1(44)
DSCB     DS    CL140
LOCWORK  DC    F'100',XL100'00'
ACT1     ICHEACTN MF=L,FIELD=CREADATE
ACT2     ICHEACTN MF=L,FIELD=VOLCNT
ACT3     ICHEACTN MF=L,FIELD=VOLSER
ACT4     ICHEACTN MF=L,FIELD=DEVTYP
ACT5     ICHEACTN MF=L,FIELD=DSTYPE
NXTDSN   DC    AL1(44),44X'00'
NUMTAB   DC    240X'FF',10X'00',6X'FF'
         DS    0F
LVLCLC   EQU   *
DSNEX    CLC   0(0,R8),0(R4)
CAMMOV   MVC   DSCB(0),NXTDSN+1
CONMOV   MVC   CONDSN(0),NXTDSN+1
CAMLIST  CAMLST SEARCH,DSCB,CONVOL,DSCB
         PRINT NOGEN
CONFLICT DCB   DDNAME=CONFLICT,DSORG=PS,RECFM=FB,LRECL=53,             X
               BLKSIZE=4770,MACRF=(PM)
DDNDSCB  DCB   MACRF=R,BLKSIZE=96,DEVD=DA,DSORG=PS,EODAD=MAIN040,      X
               EXLST=JFCBXLST,KEYLEN=44,LRECL=96,RECFM=F,DDNAME=X
         PRINT GEN
         LTORG
         DROP  R11,R12
         TITLE '******CARDED SUBROUTINE'
CARDED   CSECT
         SPACE 5
***********************************************************************
*
*  THIS ROUTINE CHECKS ALL CONTROL CARDS. EACH REQUEST IS TRIGGERED
*  BY THE LIST KEYWORD. FOLLOWING THE LIST KEY WORD MAY OPTIONALLY BE
*  THE VOLUME OR LEVEL KEYWORDS. THE PARAMETERS SPECIFIED MUST BE
*  ENCLOSED IN PARENTHESES AND SEPARATED BY COMMAS. EACH REQUEST MUST
*  BE TERMINATED BY A PERIOD. A COMMAND MAY EXTEND ACCROSS MULTIPLE
*  CARDS BUT MUST NOT CONTAIN MORE THAN 256 CHARACTERS (EXCLUDING
*  BLANKS.
*
*   FOR EXAMPLE A DECK OF CONTROL CARDS MAY LOOK AS FOLLOWS:
*
*  LIST VOLUME(TSO001,PVT030) LEVEL(TS14).
*  LIST VOLUME(TSO004,MVSRES).
*  LIST LEVEL(TS14,
*             TS02,
*             TS01).
*
***********************************************************************
         USING CARDED,R11
         USING CARDED+4096,R12
         STM   R14,R12,12(R13)     STORE REGS
         LR    R11,R15             SET BASE
         LA    R12,2048(R11)
         LA    R12,2048(R12)
         ST    R13,CREGSTR+4       CHAIN BACK
         LA    R15,CREGSTR         GET NEW SAVE AREA
         ST    R15,8(R13)          CHAIN FORWARD
         LR    R13,R15             SET NEW SAVE
         LA    R7,CARDIN           GET ADDR OF INPUT DCB
         USING IHADCB,R7           SET UP ADDRESSIBILITY
         TM    DCBOFLGS,DCBOFOPN   HAS IT BEEN OPENED ALREAD??
         BO    CARD0100            YES-- BYPASS OPEN
         OPEN (CARDIN,(INPUT),ERRPRNT,(OUTPUT))
         MVI   EOFSW,X'00'         INITIALIZE EOF SW
         GETMAIN R,LV=4096         GET SOME STORAGE
         LR    R3,R1               COPY ADDR OF SPACE
         ST    R3,CARDWK           STORE BEGINNING
CARD0100 L     R3,CARDWK           GET BEGINNING OF WORK AREA
CARD0110 GET   CARDIN              GET A CARD
         LR    R4,R1               COPY ADDR OF CARD
         BAL   R6,CARDPRNT         GO PRINT OUT CARD
         LA    R8,79(R4)           END OF CARD
         TRT   0(80,R4),NONBLANK   LOOK FOR FIRST NON BLANK
         BC    8,CARD0110          ALL BLANK CARD - GO GET ANOTHER
         LR    R4,R1               COPY ADDR OF FIRST NON-BLANK
CARD0120 MVC   0(1,R3),0(R4)       MOVE IT IN
         CLI   0(R3),C'.'          END OF STATEMENT??
         BE    CARD0150            YES--
         LA    R3,1(R3)            SET TO NEXT AVAILABLE BYTE
CARD0130 LA    R4,1(R4)            MOVE TO NEXT BYTE IN CARD.
         CR    R4,R8               END OF CARD??
         BH    CARD0110            YES-- GO GET ANOTHER
         CLI   0(R4),C' '          IS IT A BLANK??
         BE    CARD0130            BUMP POINTER IN CARD
         B     CARD0120            NOT A BLANK - GO ADD IT IN WORK AREA
         SPACE 5
CARD0150 EQU   *                   BEGIN TO ANALYZE CARDS
         ST    R3,CMDEND           STORE END OF COMMAND
         L     R4,CARDWK           GET ADDR OF BEGINNING
         SR    R3,R4               COMPUTE LENGTH
         CH    R3,=H'256'          > 256
         BL    CARD0155            NO, CONTINUE
         B     CARDE009            YES, GET OUT
CARD0155 MVI   CMDSW,X'01'         INDICATE AT LEAST ONE COMPLETE CMD
         CLC   0(4,R4),=C'LIST'    CHECK COMMAND
         BNE   CARDE001            BAD KEYWORD--
         LH    R1,REQNO            GET REQUEST NUMBER COUNT
         LA    R1,1(R1)            ADD ONE
         STH   R1,REQNO            AND STORE IT
         LA    R4,4(R4)            BUMP PAST LIST
         MVI   VOLSW,ALLVOLS       SET DEFAULT TO ALL VOLS
         MVI   DSNSW,ALLDSNS       SET DEFAULT TO ALL LEVELS
         CLI   0(R4),C'.'          END OF COMMAND
         BE    CARD9000            YES-- GET OUT
         L     R5,CARDWK           GET ADDR OF WORK AREA
         LA    R5,4089(R5)         GET END OF WORK AREA
CARD0160 CLC   0(7,R4),=C'VOLUME(' CHECK FOR VOLUME KEYWORD
         BNE   CARD0170            NO- GO CHECK FOR LEVEL
         MVI   VOLSW,SELVOLS       INDICATE SELECTED VOLUMES
         ST    R4,VOLPARM          STORE LOCATION OF VOLUME PARM
         B     CARD0180
CARD0170 CLC   0(6,R4),=C'LEVEL('  CHECK FOR LEVEL KEYWORD
         BNE   CARD0180            NO- CONTINUE TO SEARCH
         MVI   DSNSW,SELDSNS       INDICATE SELECTED LEVELS
         ST    R4,LVLPARM          STORE LOCATION OF LEVEL PARM
CARD0180 LA    R4,1(R4)            BUMP POINTER
         CLI   0(R4),C'.'          END OF COMMAND??
         BE    CARD0190            YES--
         CR    R5,R4               NO CHECK FOR END OF WORK AREA
         BH    CARD0160
CARD0190 ICM   R4,15,VOLPARM       IS THERE A VOLUME PARM??
         BZ    CARD0200            NO--GO CHECK FOR LVEL PARM
         LA    R8,VOLTAB           GET BEGINNING OF VOLUME TABLE
         LA    R4,7(R4)            PT TO FIRST BYTE
CARD0195 BAL   R6,CARDPRS          PARSE PARMETERS FROM COMMAND
         CH    R15,=H'5'           CHECK LENGTH OF PARM
         BH    CARDE002            MUST BE < 6
         EX    R15,MOVVOL          MOVE VOLUME INTO TABLE
         LA    R8,6(R8)            BUMP POINTER TO TABLE
         LH    R9,VOLCT            GET VOLUME COUNT
         LA    R9,1(R9)            INCREMENT IT
         STH   R9,VOLCT            STORE IT
         CH    R9,=H'50'           CHECK FOR MORE THAN MAX
         BH    CARDE003            YES--THEN ERROR
         LA    R4,1(R4,R15)        BUMP TO BEYOND PARM
         CLI   0(R4),C')'          ARE WE AT END?
         BE    CARD0200            NO--
         LA    R4,1(R4)            BUMP TO BEYOND DELIMITER
         B     CARD0195            SEE IF ANY MORE
CARD0200 ICM   R4,15,LVLPARM       IS THERE A LEVEL PARM
         BZ    CARD9000            NO- GET OUT
         LA    R8,LVLTAB           GET ADDR OF LEVEL TABLE
         LA    R4,6(R4)            BUMP PAST LEVEL KEYWORD
CARD0210 BAL   R6,CARDPRS          PARSE PARMS FROM COMMAND
         CH    R15,=H'7'           CHECK LENGTH OF PARM
         BH    CARDE004            MUST BE < 8
         EX    R15,MOVLVL          MOVE INTO TABLE
         LA    R8,8(R8)            ADVANCE POINTER IN TABLE
         LH    R9,LVLCT            GET LEVEL COUNT
         LA    R9,1(R9)            INCREMENT
         STH   R9,LVLCT            STORE IT
         CH    R9,=H'50'           CHECK FOR MORE THAN MAX
         BH    CARDE005            YES--THEN ERROR
         LA    R4,1(R4,R15)        INCREMENT PAST PARM
         CLI   0(R4),C')'          ARE WE AT END
         BE    CARD9000            YES--
         LA    R4,1(R4)            NO, BUMP PAST DELIMETER
         B     CARD0210            SEE IF ANY MORE
         SPACE 5
CARD9000 EQU   *
         XR    R15,R15             CLEAR R15
         CLI   EOFSW,X'00'         AT END OF FILE??
         BE    CARD9010            NO, RETURN
         LA    R15,8               YES, THEN SET RETURN CODE
CARD9010 L     R13,CREGSTR+4       GET BACK CHAIN
         L     R14,12(R13)         RESTORE
         LM    R0,R12,20(R13)             REGS
         BR    R6
         SPACE 5
CARD2000 CLI   CMDSW,X'01'         WAS AT LEAST ONE GOOD CMD PROCESSED
         BNE   CARDE006            NO--ERROR
         MVI   EOFSW,X'01'         SET END OF FILE SWITCH
         CLOSE (CARDIN)            CLOSE CARDFILE
         L     R3,CARDWK           GET ADDR OF WORK AREA
         FREEMAIN R,LV=4096,A=(R3)
         B     CARD9000
         SPACE 3
CARDE001 L     R3,CE001
         B     CARDABND
CARDE002 L     R3,CE002
         B     CARDABND
CARDE003 L     R3,CE003
         B     CARDABND
CARDE004 L     R3,CE004
         B     CARDABND
CARDE005 L     R3,CE005
         B     CARDABND
CARDE006 L     R3,CE006
         B     CARDABND
CARDE007 L     R3,CE007
         B     CARDABND
CARDE008 L     R3,CE008
         B     CARDABND
CARDE009 L     R3,CE009
         B     CARDABND
CARDABND PUT ERRPRNT,(R3)
         CLOSE (ERRPRNT)
         ABEND 1,DUMP
         EJECT
CARDPRS  EQU   *
         L     R14,CMDEND          GET END OF COMMAND
         SR    R14,R4              GET REMAINING SIZE TO SEARCH
         BCTR  R14,0               REDUCE FOR EXECUTE
         EX    R14,RPTRT           IS THERE A RIGHT PAREN
         BC    8,CARDE007          NO--THEN ERROR
         EX    R14,DELIM           NO, SEARCH FOR NEXT COMMA OR RIGHT
*                                  PAREN
         BC    8,CARDE008          NOT FOUND IS AN ERROR
         LR    R15,R1              COPY ADDR OF FOUND DELIMETER
         SR    R15,R4              COMPUTE LENGTH OF PARM
         BCTR  R15,0               REDUCE BY ONE FOR COMPARE OR TRT
         BR    R6                  RETURN
         SPACE 5
CARDPRNT CLI   FSTSW,X'00'         IS THIS THE FIRST TIME?
         BNE   CRDPNT10            NO--THEN BYPASS TIME
         MVI   FSTSW,X'01'         SET FIRST SWITCH
         TIME  BIN                 GET CURRENT DAY
         ST    R1,UNPKWK           STORE IT
         UNPK  H1DAT,UNPKWK+1(3)   UNPACK DATE
         OI    H1DAT+4,X'F0'       FIX UP SIGN
CRDPNT10 LH    R1,LNCT             GET CURRENT LINE COUNT
         CH    R1,=H'50'           GREATER THAN 50
         BL    CRDPNT20            YES, BYPASS FIRST HEADING
         PUT   ERRPRNT,HDG1
         MVC   LNCT,=H'0'          ZERO LINE COUNT
         LH    R1,PAGE             GET PAGE NUMBER
         LA    R1,1(R1)            INCREMENT IT
         STH   R1,PAGE             STORE IT FOR NEXT TIME
         CVD   R1,UNPKWK           CONVERT PAGE TO DECIMAL
         UNPK  H2PGNO,UNPKWK+6(2)  CONVERT TO PRINTABLE
         OI    H2PGNO+1,X'F0'      FIX UP SIGN
         PUT   ERRPRNT,HDG2
         PUT   ERRPRNT,HDG3
CRDPNT20 LH    R1,LNCT             GET LINE COUNT
         LA    R1,1(R1)            INCREMENT IT
         STH   R1,LNCT             STORE
         MVC   HDGCRD,0(R4)        MOVE IN CARD
         PUT   ERRPRNT,HDGX
         BR    R6                  RETURN
         TITLE '****CONSTANT SECTION -- CARDED****'
LNCT     DC    H'100'
CMDSW    DC    X'00'
DELIM    TRT   0(0,R4),RPCOMMA
RPCOMMA  DC    93X'00',X'FF',13X'00',X'FF',148X'00'
EOFSW    DS    C
VOLTAB   DC    50CL6' '
LVLTAB   DC    50CL8' '
PAGE     DC    H'0'
UNPKWK   DS    D
RPTRT    TRT   0(0,R4),RPAREN
MOVVOL   MVC   0(0,R8),0(R4)
MOVLVL   MVC   0(0,R8),0(R4)
FSTSW    DC    X'00'
RPAREN   DC    93X'00',X'FF',162X'00'
CMDEND   DS    F
CARDWK   DS    F
LVLPARM  DS    F
VOLPARM  DS    F
VOLCT    DC    H'0'
LVLCT    DC    H'0'
REQNO    DC    H'0'
NONBLANK DC    64X'FF',X'00',191X'FF'
HDGX     DC    CL2' '
HDGCRD   DS    CL80
         DC    CL51' '
CREGSTR  DS    18F
VOLSW    DS    C
ALLVOLS  EQU   X'01'
SELVOLS  EQU   X'04'
DSNSW    DS    C
ALLDSNS  EQU   X'01'
SELDSNS  EQU   X'04'
HDG1     DC    C'1'
H1DAT    DC    CL5' '
         DC    CL34' '
         DC    CL93'RACF DATA SET COMPARISON'
HDG2     DC    C' '
         DC    C'PAGE  '
H2PGNO   DC    CL2' '
         DC    CL31' '
         DC    CL93'CONTROL CARD LISTING'
HDG3     DC    CL133' '
CE001    DC    A(XE001)
CE002    DC    A(XE002)
CE003    DC    A(XE003)
CE004    DC    A(XE004)
CE005    DC    A(XE005)
CE006    DC    A(XE006)
CE007    DC    A(XE007)
CE008    DC    A(XE008)
CE009    DC    A(XE009)
XE001    DC    CL133' **INVALID KEYWORD - LIST EXPECTED      '
XE002    DC    CL133' **INVALID VOLUME PARAMETER - LENGTH > 6'
XE003    DC    CL133' **NUMBER OF VOLUMES EXCEEDS MAX - 50   '
XE004    DC    CL133' **INVALID LEVEL PARAMETER - LENGTH > 8 '
XE005    DC    CL133' **NUMBER OF LEVELS EXCEEDS MAX - 50    '
XE006    DC    CL133' **INVALID COMMAND - UNABLE TO LOCATE PERIOD'
XE007    DC    CL133' **UNBALANCED PARENTHESES               '
XE008    DC    CL133' **ILLEGAL PARMETERS OR SEPARATORS      '
XE009    DC    CL133' **COMMAND GREATER THAN 256 CHARACTERS  '
         LTORG
         PRINT NOGEN
CARDIN   DCB   DDNAME=SYSIN,DSORG=PS,MACRF=(GL),EODAD=CARD2000
ERRPRNT  DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),LRECL=133,          X
               BLKSIZE=1330,RECFM=FBA
         PRINT GEN
         DROP  R11
         DROP  R12
         TITLE '****UCBSRCH SUBROUTINE'
UCBSRCH  CSECT
         SPACE 5
**********************************************************************
*                                                                    *
*  THIS SUBROUTINE ALLOCATES ALL MOUNTED DISKS AND CREATES A LIST OF *
*  OF THEIR VOLUME SERIAL NUMBERS. THE CALL IS AS FOLLOWS:           *
*                                                                    *
*         CALL UCBSRCH,(ANCHOR)                                      *
*                                                                    *
*    WHERE ANCHOR IS A FULLWORD WHICH POINTS TO THE BEGINNING OF THE *
*              VOLUME CHAIN. EACH CHAIN ENTRY IS 10 BYTES LOGN WHERE *
*              THE FIRST FOUR BYTES CONTAIN A POINTER TO THE NEXT    *
*              CHAIN ELEMENT. THE REMAINING 6 BYTES CONTAINS THE     *
*              VOLUME SERIAL NUMBER.                                 *
*                                                                    *
**********************************************************************
         USING UCBSRCH,R12
         STM   R14,R12,12(R13)     STORE REGS
         LR    R12,R15             ESTABLISH BASE
         LA    R15,UCBSAV
         ST    R15,8(R13)          CHAIN FORWARD
         ST    R13,UCBSAV+4        CHAIN BACK
         LR    R13,R15             SET NEW SAVE
         LR    R2,R1               STORE ADDR OF PARM
         L     R7,0(R2)            GET ANCHOR
         L     R3,16               PICK UP CVT ADDR
         L     R3,40(R3)           PTR TO UCB LKUP TBL
         BCTR  R3,0                REDUCE
         BCTR  R3,0                        BY  2
UCB020   LA    R3,2(R3)            BUMP TO NEXT UCB PTR
         LH    R4,0(R3)            GET UCB ADDRESS
         LTR   R4,R4               = ZERO ???
         BZ    UCB020              YES, SKIP IT
         CH    R4,HEXFF            END OF TABLE ???
         BE    UCB900              YES, GET OUT
         CLI   2(R4),X'FF'         IS IT A UCB ???
         BNE   UCB020              NO, SKIP IT
         TM    18(R4),X'20'        IS IT DASD ???
         BZ    UCB020              NO, SKIP IT
         TM    3(R4),X'80'         ONLINE ???
         BZ    UCB020              NO, SKIP IT
         MVC   UNITLN(2),=H'4'     SET UP FOR
         MVC   UNITNM(4),=C'3350'       DYNAMIC ALLOCATE
         TM    19(R4),X'0A'        IS IT A 3350
         BO    UCB025              YES, CONTINUE
         MVC   UNITLN(2),=H'6'     NO, THEN MUST BE A 3330 MODEL 2
         MVC   UNITNM(6),=C'3330-1'
UCB025   LA    R1,URBPTR           GET ADDR OF REQUEST BLOCK PTR
         MVC   VOLSER,28(R4)
         MVC   TXTDD1,28(R4)
         DYNALLOC
         CH    R15,=H'4'           IS IT A DUPLICATE?
         BE    UCB020              YES, THEN CONTINUE
         LTR   R15,R15             WAS IT SUCCUSSFUL
         BZ    UCB030              YES, CONTINUE
         ABEND 99,DUMP             NO, DUMP
UCB030   GETMAIN R,LV=10           GET STORAGE FOR CHAIN
         XC    0(10,R1),0(R1)      CLEAR STORAGE
         MVC   4(6,R1),28(R4)      MOVE IN VOLUME SERIAL NUMBER
         LTR   R7,R7               ARE WE AT THE BEGINNING
         BZ    UCB040              YES--
         ST    R1,0(R7)            NO, UPDATE PREVIOUS POINTER
         LR    R7,R1               SET UP FOR NEXT
         B     UCB020              CONTINUE TO LOOP
UCB040   ST    R1,0(R2)            STORE FIRST IN LIST
         LR    R7,R1               SET UP FOR NEXT TIME
         B     UCB020              CONTINUE TO LOOP
UCB900   L     R13,UCBSAV+4        GET BACK CHAIN
         LM    R14,R12,12(R13)     RESTORE OTHER REGS
         BR    R14                 RETURN
         TITLE '****UCBSRCH CONSTANT SECTION'
HEXFF    DC    X'FFFF'
         DS    0F
URBPTR   DC    X'80'
         DC    AL3(URB)
URB      DC    AL1(20)
         DC    AL1(01)             DSNAME ALLOCATION
         DC    H'0'
         DC    F'0'
         DC    A(TXTPTRS)          ADDRESS OF TEXT POINTER LIST
         DC    2F'0'
TXTPTRS  DC    A(TXTUNIT1)
         DC    A(TXTUNIT2)
         DC    A(TXTUNIT3)
*        DC    A(TXTUNIT4)
         DC    AL1(128)
         DC    AL3(TXTUNIT5)
TXTUNIT1 DC    H'1'                DDNAME UNIT
         DC    H'1'
         DC    H'6'
TXTDD1   DC    CL6' '
TXTUNIT2 DC    H'4'                DISP UNIT
         DC    H'1'
         DC    H'1'
         DC    X'01'
TXTUNIT3 DC    H'16'               VOLSER UNIT
         DC    H'1'
         DC    H'6'
VOLSER   DC    CL6' '
TXTUNIT4 DC    H'2'                DSNAME UNIT
         DC    H'1'
         DC    H'44'
         DC    44X'04'             DSNAME OF VTOC
TXTUNIT5 DC    X'0015'             UNIT UNIT
         DC    H'1'
UNITLN   DC    H'4'
UNITNM   DC    CL8'3350'
UCBSAV   DS    9D
         LTORG
         PRINT NOGEN
         DROP  R12
         IHADCB DSORG=PS
DSCBDSCT DSECT
         IECSDSL1 (1)
         END
