*          DATA SET P01569     AT LEVEL 035 AS OF 11/01/78
         TITLE 'P01569 - COMMON ROUTINES'
P01569   START
*
*        THIS PROGRAM IS A COLLECTION OF ROUTINES TO PROVIDE
*              GENERAL BPAM ACCESS CAPABILITY. THE INDIVIDUAL
*              FUNCTIONS WILL BE DESCRIBED WITH EACH FUNCTION.
*
*        USAGE - GENERAL
*              CALL P01569 (COMMAREA,ARGS)
*                   WHERE
*                        COMMAREA - 12 BYTE COMMUNICATIONS AREA
*                             DEFINED AS FOLLOWS:
*                             BYTES 1 - 2, FUNCTION TO BE PERFORMED
*                                            (SEE BELOW)
*                             BYTES 3 - 4, FUNCTION RETURN CODE
*                                            (DEFINED BY FUNCTION)
*                             BYTES 5 - 12, FILE NAME (DD NAME)
*                                            UP TO 16 FILES MAY BE
*                                            PROCESSED AT ONE TIME
*
*                        ARGS - 0 OR MORE ARGUMENTS AS REQUIRED
*                                  BY THE FUNCTION
*
*                   FUNCTION       ROUTINE        MEANING
*                     BYTE
*
*                      'OI'        FOPENI         OPEN A FILE - INPUT
*                      'C '        FCLOSE         CLOSE A FILE
*                      'ND'        NEXTDIR        READ NEXT DIRECTORY
*                                                      ENTRY
*                      'FD'        FINDDIR        FIND A SPECIFIC
*                                                      DIRECTORY ENTRY
*                      'RR'        READREC        READ NEXT RECORD OF
*                                                      CURRENT MEMBER
*
*
         EJECT
*
*        IN THE EVENT OF SEVERE USER LOGIC ERRORS, USER ABENDS
*              WILL BE ISSUED. THE POSSIBLE ABENDS ARE LISTED BELOW.
*
*        ABEND   ROUTINE      MEANING
*
*         100    -------      INVALID FUNCTION
*         101    NEXTDIR      FILE NOT OPEN
*         102    FINDDIR      FILE NOT OPEN
*         103    FOPENI       FILE ALREADY OPEN
*         104    FOPENI       DD CARD NOT FOUND
*         105    FOPENI       TOO MANY FILE OPEN
*         106    READREC      FILE NOT OPEN
*
         EJECT
         STREG
         EJECT
*
*        ESTABLISH STANDARD LINKAGE
*
         SAVE  (14,12),,*
         BALR  R2,R0               R2 - BASE REGISTER
         USING *,R2
         LA    R3,SAVEAREA         CHAIN SAVE AREAS
         ST    R13,4(R3)
         ST    R3,8(R13)
         LR    R13,R3
         ST    R1,SAVE1            SAVE REGISTER 1
         B     TSTFUNC
         DS    0F
SAVEAREA DC    18F'0'
SAVE1    DC    F'0'
         EJECT
*
*        EXAMINE FUNCTION BYTES AND CALL PROCESSING ROUTINE
*              IF FUNCTION NOT VALID, ABEND WITH USER CODE 100.
*
TSTFUNC  L     R3,SAVE1            GET FIRST ARGUMENT
         L     R4,0(R3)
         LA    R5,FUNCTBL
NEXTFUNC CLC   0(2,R5),=XL2'FFFF'
         BE    BADFUNC
         CLC   0(2,R5),0(R4)       CHECK THE FUNCTION
         BE    GOTFUNC
         LA    R5,8(R5)            NEXT ONE ?
         B     NEXTFUNC
         SPACE 3
BADFUNC  L     R15,=A(DUMPRTN)
         L     R1,=F'100'
         B     INTCALL
         SPACE 2
GOTFUNC  L     R15,4(R5)           ROUTINE START ADDRESS
         LA    R14,GOBACK
         L     R1,SAVE1
         B     INTCALL             CALL ROUTINE
         EJECT
*
*        FUNCTION TABLE - DOUBLE WORD ENTRIES
*              BYTES 1 - 2    FUNCTION CODE
*              BYTES 3 - 4    BLANKS
*              BYTES 5 - 8    ADDRESS OF ROUTINE
*
         DS    0D
FUNCTBL  EQU   *
         DC    CL4'OI',A(FOPENI)
         DC    CL4'C ',A(FCLOSE)
         DC    CL4'ND',A(NEXTDIR)
         DC    CL4'FD',A(FINDDIR)
         DC    CL4'RR',A(READREC)
         DC    F'-1',F'-1'              LAST ENTRY
         LTORG
         EJECT
*
*        RETURN TO CALLER
*              STORE LOW ORDER TWO BYTES OF R15 AS RETURN CODE
*
GOBACK   L     R3,SAVE1            FIND COMMAREA
         L     R4,0(R3)
         STH   R15,2(R4)           SET RETURN CODE
         L     R13,SAVEAREA+4
         RETURN (14,12),,RC=0
         SPACE 3
         DROP  R2
         EJECT
*
*        INTERNAL CALL ROUTINE
*              FOLLOWING CONVENTIONS ARE USED
*                   (1) SAVE AREA MUST BE FIRST 72 BYTES OF
*                        CALLED ROUTINE
*                   (2) THE RETURN ADDRESS WILL BE STORED
*                        IN A FULL WORD IMMEDIATELY FOLLOWING
*                        THE SAVE AREA
*                   (3) REGISTER USAGE
*                        R0, R1, R13, R14, R15 - STANDARD LINKAGE
*                        R12 - BASE REGISTER FOR CALLED ROUTINE
*
ENTOFFST EQU   76
         DS    0F
INTCALL  STM   R14,R12,12(R13)     CHAIN SAVE AREAS
         ST    R13,4(R15)
         ST    R15,8(R13)
         LR    R13,R15
         LR    R12,R15             ROUTINE BASE REGISTER
         BALR  R15,R0              SET RETURN ADDRESS
         USING *,R15
         LA    R14,INTRETN
         ST    R14,ENTOFFST-4(R12)
         LA    R15,ENTOFFST(R12)   BUMP ENTRY PAST SAVE AREAS
         BR    R15                 BRANCH TO ROUTINE
INTRETN  L     R13,4(R12)          RETURN
         L     R14,12(R13)         DO NOT RESTORE R15
         LM    R0,R12,20(R13)
         BR    R14
         SPACE 3
         DROP R15
         TITLE 'P01569 - ROUTINE FINDFCB'
*
*        ROUTINE FINDFCB - LOCATES A FILE CONTROL BLOCK
*              ARGUMENTS - STD LINKAGE
*                   (1) 8 BYTE FILE NAME - INPUT
*                   (2) ADDRESS OF FILE CONTROL BLOCK - OUTPUT
*                             ZERO IF NOT FOUND
*
         DS    0F
FINDFCB  EQU   *
         USING *,R12
         DC    18F'0'              SAVE AREA
FCBRADDR DC    F'0'                RETURN ADDRESS
         SPACE 3
*              START OF ROUTINE
         L     R4,0(R1)            ARG1 ADDR
         L     R5,4(R1)            ARG2 ADDR
         SR    R6,R6
         CLC   0(8,R4),FCBEND      CHECK IF VALID FILE NAME
         BE    FCBRETN
         LA    R7,FCBTBL-FCBLEN
SCANFCB  LA    R7,FCBLEN(R7)
         CLC   0(8,R7),FCBEND      END OF TABLE ?
         BE    FCBRETN
         CLC   0(8,R7),0(R4)       ENTRY FOUND ?
         BNE   SCANFCB
         LR    R6,R7               R6 - FCB ADDRESS
FCBRETN  ST    R6,0(R5)
         L     R14,FCBRADDR
         BR    R14                 RETURN
         EJECT
*
*        FILE CONTROL BLOCKS FOR UP TO 16 FILES (16 BYTES EACH)
*              BYTES 1 - 8,FILE NAME
*              BYTES 9 - 12, ADDR OF FILE CONTROL AREA
*              BYTES 13 - 16, UNUSED
*
         DS    0F
FCBTBL   DC    256XL1'00'
FCBEND   DC    16XL1'FF'           END OF AREA
FCBLEN   EQU   16
         SPACE 3
         DROP  R12
         TITLE 'P01569 - ROUTINE FOPENI'
*
*        ROUTINE FOPENI - OPENS A FILE FOR INPUT
*              ARGUMENTS - STD LINKAGE
*                   (1) COMMUNICATIONS AREA
*
*              RETURN CODES - NONE, ALWAYS BLANK
*
         DS    0F
FOPENI   EQU   *
         USING *,R12
         DC    18F'0'              SAVE AREA
FORADDR  DC    F'0'                RETURN ADDRESS
         SPACE 3
*              START OF ROUTINE
         L     R4,0(R1)            R4 - ADDRESS OF COMM AREA
         ST    R4,FOCOMMAD
         MVC   FOCODE+2(2),=CL2' '
         MVC   FODDNM(8),4(R4)     PICK UP DD NAME
         LA    R1,FOARG1
         L     R15,=A(FINDFCB)
         L     R3,=A(INTCALL)
         BALR  R14,R3
         L     R3,FOFCBADR         FCB ADDR MUST BE ZERO
         LTR   R3,R3
         BZ    FOCHKDD
         L     R1,=F'103'          FILE ALREADY OPEN
         B     FODUMP
         SPACE 3
*              CHECK FOR DD CARD, USE READ JFCB
FOCHKDD  CALL  P01616,(FOMODNM,FOFUNC,FODDNM,FOJFCB,FORCODE)
         L     R3,FORCODE
         LTR   R3,R3
         BZ    FOFADD
         L     R1,=F'104'          NO DD CARD
         B     FODUMP
         SPACE 3
*              GET A FILE CONTROL BLOCK FOR NEW FILE
FOFADD   MVI   FODDNM,X'00'        FIND AN OPEN BLOCK
         MVC   FODDNM+1(7),FODDNM
         LA    R1,FOARG1
         L     R15,=A(FINDFCB)
         L     R3,=A(INTCALL)
         BALR  R14,R3
         L     R3,FOFCBADR
         LTR   R3,R3
         BNZ   FOGCORE
         L     R1,=F'105'          TOO MANY FILES OPEN
         B     FODUMP
         SPACE 3
*              GET CORE FOR FILE CONTROL AREA
FOGCORE  L     R4,FOCOMMAD         GET DD NAME
         MVC   0(8,R3),4(R4)
         LA    R0,GET1LEN          R0 - LENGTH OF AREA
         GETMAIN R,LV=(0)
         L     R3,FOFCBADR         GET FCB ADDRESS
         ST    R1,8(R3)            SAVE FILE AREA ADDRESS
         SPACE 3
*              MOVE IN SKELETON DCB FOR OPEN
         LR    R3,R1
         USING FILECTL,R3
         LA    R4,FOPDSDCB         INPUT AREA
         ST    R4,FOARG2
         LA    R4,PDSDCB           OUTPUT AREA
         ST    R4,FOARG2+4
         LA    R4,FODCBLEN         LENGTH OF MOVE
         ST    R4,FOLEN
         L     R15,=A(MVEDATA)
         L     R4,=A(INTCALL)
         LA    R1,FOARG2
         BALR  R14,R4
         SPACE 3
*              OPEN THE DCB
         LA    R4,PDSDCB
         USING IHADCB,R4
         L     R5,FOCOMMAD
         MVC   DCBDDNAM(8),4(R5)   GET DD NAME
         OPEN  ((R4),(INPUT))
         SPACE 3
*              GET BUFFER AREA
FOGBUFR  LH    R0,DCBBLKSI
         ST    R0,PHYBLKSZ
         GETMAIN R,LV=(0)
         ST    R1,PHYBUFST
         SPACE 3
*              GET LOGICAL RECORD LENGTH
         LH    R6,DCBLRECL
         ST    R6,PHYLRECL
         SPACE 3
*              SET FILE OPEN SWITCH AND RETURN
FORETN   MVI   TTROPNSW,C'1'
         MVI   MEMOPNSW,C'1'
         L     R15,FOCODE
         L     R14,FORADDR
         BR    R14
         SPACE 3
*              SEVERE ERROR, ISSUE ABEND
FODUMP   L     R15,=A(DUMPRTN)
         L     R3,=A(INTCALL)
         BALR  R14,R3
         EJECT
*
*        FILE OPEN WORK AREAS
*
         DS    0F
FOARG1   DC    A(FODDNM)           FIND FCB ARGUMENTS
         DC    A(FOFCBADR)
FOARG2   DC    A(0)
         DC    A(0)
         DC    A(FOLEN)
FOLEN    DC    F'0'
FOCODE   DC    F'0'
FODDNM   DC    CL8' '
FOFCBADR DC    F'0'
FORCODE  DC    F'0'
FOJFCB   DC    44F'0'
FOCOMMAD DC    F'0'
FOMODNM  DC    CL8'P01110'
FOFUNC   DC    CL1'S'
         LTORG
         SPACE 3
         DROP  R3
         DROP  R4
         DROP  R12
         EJECT
*
*        SKELETON DCB FOR FILE OPEN
*
         DS    0D
FODCBSTR EQU   *
FOPDSDCB DCB   DSORG=PO,MACRF=R,RECFM=U,EODAD=ENDMEMB
FODCBEND EQU   *
FODCBLEN EQU   FODCBEND-FODCBSTR
         TITLE 'P01569 - ROUTINE FCLOSE'
*
*        ROUTINE FCLOSE - CLOSE A FILE
*              ARGUMENTS - STANDARD LINKAGE
*                   (1) COMMUNICATIONS AREA
*
*              RETURN CODES - NONE, ALWAYS BLANK
*
         DS    0F
FCLOSE   EQU   *
         USING *,R12
         DC    18F'0'
FCRADDR  DC    F'0'                RETURN ADDRESS
         SPACE 3
*              START OF ROUTINE
         L     R4,0(R1)            R4 - ADDRESS OF COMM AREA
         MVC   FCDDNM(8),4(R4)     GET DD NAME
         LA    R1,FCARG1           FIND FILE CTL BLOCK
         L     R15,=A(FINDFCB)
         L     R3,=A(INTCALL)
         BALR  R14,R3
         L     R3,FCFCBADR         THERE MUST BE A FILE CTL BLOCK
         LTR   R3,R3
         BZ    FCRETN
         SPACE 3
*              CLOSE THE FILE
         L     R5,8(R3)            R5 - ADDR OF FILE CTL AREA
         USING FILECTL,R5
         LA    R6,PDSDCB           R6 - ADDRESS OF THE DCB
         CLOSE ((R6))
         SPACE 3
*              FREE THE BUFFER AREA
         L     R1,PHYBUFST         R1 - ADDR OF BUFFER AREA
         L     R0,PHYBLKSZ         R0 - LENGTH OF BUFFER AREA
         FREEMAIN R,LV=(R0),A=(R1)
         SPACE 3
*              FREE THE FILE CTL AREA
         LR    R1,R5               R1 - ADDRESS OF CTL AREA
         LA    R0,GET1LEN          R0 - LENGTH OF CTL AREA
         FREEMAIN R,LV=(R0),A=(R1)
         SPACE 3
*              CLEAR THE FILE CONTROL BLOCK
         L     R3,FCFCBADR
         MVI   0(R3),X'00'
         MVC   1(FCBLEN-1,R3),0(R3)
         SPACE 3
*              RETURN TO CALLER
FCRETN   L     R15,FCRETCD
         L     R14,FCRADDR
         BR    R14
         EJECT
*
*        FILE CLOSE WORK AREAS
*
         DS    0F
FCARG1   DC    A(FCDDNM)
         DC    A(FCFCBADR)
FCFCBADR DC    F'0'
FCRETCD  DC    H'0',CL2' '
FCDDNM   DC    CL8' '
         LTORG
         SPACE 3
         DROP  R5
         DROP  R12
         TITLE 'P01569 - ROUTINE READREC'
*
*        ROUTINE READREC - READ THE NEXT RECORD FOR A MEMBER
*              ARGUMENTS - STD LINKAGE
*                   (1) COMMUNICATIONS AREA - INPUT
*                   (2) MEMBER NAME - INPUT
*                        8 BYTES, LEFT JUSTIFIED, BLANK FILLED
*                   (3) RECORD - OUTPUT
*
*              RETURN CODES - SEE BELOW
*                        '  ' - NEXT RECORD FOUND
*                        'NM' - MEMBER NOT FOUND
*                        'EM' - END OF MEMBER DATA
*                             IN THE LAST TWO CASES, RECORD
*                                  AREA WILL BE SET TO BINARY
*                                  ZEROES
*
         DS    0F
READREC  EQU   *
         USING *,R12
         DC    18F'0'
RRRADDR  DC    F'0'
         SPACE 3
*              START OF ROUTINE
         ST    R1,RRSAVE1
         MVC   RRRCODE+2(2),=CL2' '
         L     R3,0(R1)            R3 - ADDR OF COMM AREA
         MVC   RRDDNM(8),4(R3)     PICK UP DD NAME
         L     R3,4(R1)
         MVC   RRMEMB(8),0(R3)     PICK UP THE MEMBER NAME
         SPACE 3
*              FIND THE FILE CTL BLOCK
         LA    R1,RRARG1
         L     R15,=A(FINDFCB)
         L     R3,=A(INTCALL)
         BALR  R14,R3
         L     R2,RRFCBADR
         LTR   R2,R2
         BNZ   RRCFIRST
         L     R1,=F'106'
         B     RRDUMP
         SPACE 3
*              FIRST CALL FOR THIS ROUTINE SINCE THE OPEN ?
RRCFIRST L     R2,8(R2)            R2 - ADDRESS OF THE FILE CTL AREA
         USING FILECTL,R2
         CLI   MEMOPNSW,C'1'
         BNE   RRTSTMEM
         MVC   MEMNAME(8),=8XL1'00'
         MVI   MEMOPNSW,C'0'
         B     RRNEWMEM
         SPACE 3
*              SAME MEMBER AS BEFORE ?
RRTSTMEM CLC RRMEMB(8),MEMNAME
         BE    RRNXTREC
         SPACE 3
*              RESET FOR A NEW MEMBER
RRNEWMEM LA    R1,RRARG2           FIND THE DIRECTORY ENTRY
         L     R15,=A(FINDDIR)
         L     R3,=A(INTCALL)
         BALR  R14,R3
         CH    R15,=CL2' '         DID WE FIND IT ?
         BE    RRGOTMEM
         MVC   RRRCODE+2(2),=CL2'NM'
         B     RRCLRREC
         SPACE 3
*              SET TO START OF MEMBER
RRGOTMEM MVC   MEMNAME(8),RRMEMB   RESET MEMBER NAME
         SR    R3,R3
         ST    R3,PHYBUFCR
         ST    R3,MEMTTRNX
         MVC   MEMTTRNX(2),FDIRTT+2
         MVC   MEMTTRNX+2(1),FDIRR+3
         B     RRGETBLK
         SPACE 3
*              GET THE NEXT LOGICAL RECORD
RRNXTREC L     R3,PHYBUFCR         GET CURRENT RECORD ADDRESS
         C     R3,=F'-1'           END OF MEMBER ?
         BE    RRENDMEM
         L     R4,PHYLRECL
         AR    R3,R4               INCREMENT TO NEXT RECORD
         C     R3,PHYBUFEN         STILL IN BUFFER ?
         BL    RRNXTOK
         SPACE 3
*              READ THE NEXT PHYSICAL BLOCK
RRGETBLK L     R15,=A(READBLK)
         L     R3,=A(INTCALL)
         BALR  R14,R3
         L     R3,PHYBUFCR         GET NEXT RECORD ADDRESS
         C     R3,=F'-1'           END OF MEMBER ?
         BE    RRENDMEM
         SPACE 3
*              GET NEXT LOGICAL RECORD
RRNXTOK  ST    R3,PHYBUFCR         SAVE RECORD ADDRESS
         ST    R3,RRARG3
         L     R3,RRSAVE1
         L     R3,8(R3)            R3 - ADDR OF USER RECORD
         ST    R3,RRARG3+4         SAVE THIS ADDRESS
         L     R3,PHYLRECL         GET THE RECORD LENGTH
         ST    R3,RRLEN
         LA    R1,RRARG3           MOVE THE DATA
         L     R15,=A(MVEDATA)
         L     R3,=A(INTCALL)
         BALR  R14,R3
         B     RRRETN
         SPACE 3
*              END OF MEMBER
RRENDMEM MVC   RRRCODE+2(2),=CL2'EM'
         MVC   MEMNAME(8),=CL8' '
         SPACE 3
*              CLEAR USER RECORD AREA
RRCLRREC L     R4,RRSAVE1
         L     R4,8(R4)            R4 - ADDR OF USER RECORD
         MVI   0(R4),X'00'
         ST    R4,RRARG3           INPUT FOR MOVE
         LA    R4,1(R4)
         ST    R4,RRARG3+4         OUTPUT FOR MOVE
         L     R4,PHYLRECL
         S     R4,=F'1'            LENGTH OF MOVE
         ST    R4,RRLEN
         LA    R1,RRARG3
         L     R15,=A(MVEDATA)
         L     R3,=A(INTCALL)
         BALR  R14,R3
         SPACE 3
*              RETURN
RRRETN   L     R15,RRRCODE
         L     R14,RRRADDR
         BR    R14
         SPACE 3
*              SEVERE ERROR, ABEND
RRDUMP   L     R15,=A(DUMPRTN)
         L     R3,=A(INTCALL)
         BALR  R14,R3
         EJECT
*
*        READREC WORK AREAS
*
         DS    0F
RRARG1   DC    A(RRDDNM)
         DC    A(RRFCBADR)
RRARG2   DC    A(RRCOMM)
         DC    A(RRMEMB)
         DC    A(RRDIR)
RRARG3   DC    A(0)
         DC    A(0)
         DC    A(RRLEN)
RRLEN    DC    F'0'
RRSAVE1  DC    F'0'
RRFCBADR DC    F'0'
RRRCODE  DC    H'0',CL2' '
*              COMMAREA FOR FINDDIR CALL
RRCOMM   DC    CL2'FD'             *****
         DC    H'0'                *****
RRDDNM   DC    CL8' '              *****
*
RRMEMB   DC    CL8' '
RRDIR    DC    CL90' '
         LTORG
         SPACE 3
         DROP  R2
         DROP  R12
         TITLE 'P01569 - ROUTINE READBLK'
*
*        ROUTINE READBLK - READ THE NEXT PHYSICAL BLOCK
*                             FOR A MEMBER
*              ARGUMENTS - NONE, THE FILE CTL AREA WILL
*                                  BE USED
*
*              R2 - MUST POINT AT THE FILE CONTROL AREA
*
         DS    0F
READBLK  EQU   *
         USING *,R12
         DC    18F'0'
RBRADDR  DC    F'0'
         SPACE 3
*              INITIALIZE
         USING FILECTL,R2
         L     R3,PHYBUFCR         CHECK FOR PREVIOUS END OF MEMBER
         C     R3,=F'-1'
         BE    RBENDMEM
         SPACE 3
*              READ THE NEXT PHYSICAL BLOCK
         L     R3,MEMTTRNX         R3 - TTR OF NEXT BLOCK
         C     R3,=F'-1'           END OF MEMBER ?
         BE    RBENDMEM
         LA    R3,MEMTTRNX         R3 - ADDRESS OF NEXT BLOCK TTR
         POINT PDSDCB,(R3)
         L     R3,PHYBUFST         R3 - ADDRESS OF THE BUFFER
         LA    R4,PDSDCB           R4 - DCB ADDRESS
         READ  DECB2,SF,(R4),(R3),'S'   READ A BLOCK
         CHECK DECB2
         NOTE  PDSDCB              GET NEXT BLOCK TTR
         ST    R1,MEMTTRNX
         MVI   MEMTTRNX+3,X'01'
         SPACE 3
*              COMPUTE LENGTH OF BLOCK READ
         L     R3,PHYBLKSZ         R3 - FILE BLOCK SIZE
         L     R4,DECB2+16         R4 - IOB ADDRESS
         LH    R4,14(R4)           R4 - RESIDUAL COUNT
         SR    R3,R4               R3 - NUMBER OF BYTES READ
         SPACE 3
*              COMPUTE BLOCK END ADDRESS
         L     R4,PHYBUFST         R4 - BUFFER START ADDRESS
         ST    R4,PHYBUFCR         SET CURRENT RECORD ADDRESS
         AR    R4,R3               R4 - BUFFER END ADDRESS
         ST    R4,PHYBUFEN
         B     RBRETN
         SPACE 3
*              END OF MEMBER ROUTINE
         DS    0F
RBENDMEM EQU   *
ENDMEMB  EQU   *
         L     R3,=F'-1'
         ST    R3,PHYBUFCR         RESET CURRENT BUFFER ADDRESS
         ST    R3,MEMTTRNX         RESET NEXT RECORD TTR
         B     RBRETN
         SPACE 3
*              RETURN
RBRETN   LA    R15,0
         L     R14,RBRADDR
         BR    R14
         SPACE 3
         DROP  R2
         DROP  R12
         TITLE 'P01569 - ROUTINE NEXTDIR'
*
*        ROUTINE NEXTDIR - RETURNS THE NEXT DIRECTORY BLOCK
*                   TO THE CALLER
*              ARGUMENTS - STD LINKAGE
*                   (1) COMMUNICATIONS AREA - INPUT
*                   (2) DIRECTORY AREA - OUTPUT
*                        FORMAT
*                             MEMBER NAME         8 BYTES CHARACTER
*                             RELATIVE TRACK      4 BYTES BINARY
*                             RELATIVE RECORD     4 BYTES BINARY
*                             USER DATA AREA      4 BYTES BINARY
*                                  LENGTH
*                             USER DATA AREA      62 BYTES CHARACTER
*                             ALIAS SWITCH        1 BYTE CHARACTER
*                                                      'A' MEMBER NAME
*                                                           IS AN ALIAS
*                                                      ' ' MEMBER NAME
*                                                           IS NOT
*
*              RETURN CODES - NONE, ALWAYS BLANK
*
*              AT END OF DIRECTORY, LAST MEMBER NAME
*                   WILL BE SET TO HIGH VALUES (BINARY ONES).
*                   ALL OTHER VALUES WILL BE BINARY ZEROES.
*
         DS    0F
NEXTDIR  EQU   *
         USING *,R12
         DC    18F'0'
NDRADDR  DC    F'0'                RETURN ADDRESS
         SPACE 3
*              START OF ROUTINE
         ST    R1,NDSAVE1
         L     R4,0(R1)            PICK UP ADDRESS OF COMM AREA
         MVC   NDDDNM(8),4(R4)     PICK UP DD NAME
         SPACE 3
*              FIND THE FILE CTL BLOCK
         LA    R1,NDARG1
         L     R15,=A(FINDFCB)
         L     R3,=A(INTCALL)
         BALR  R14,R3
         L     R2,NDFCBADR
         LTR   R2,R2
         BNZ   NDCFIRST
         L     R1,=F'101'
         B     NDDUMP
         SPACE 3
*              FIRST CALL FOR THIS FILE SINCE OPEN ?
NDCFIRST L     R2,8(R2)            R2 - ADDRESS OF FILE CTL AREA
         USING FILECTL,R2
         CLI   TTROPNSW,C'1'
         BNE   NDGNEXT
         LA    R3,1                SET TTR OF NEXT DIR = 1
         ST    R3,DIRTTRNX
         L     R3,=F'-1'           NEXT DIR ENTRY ADDR = HIGH VALUES
         ST    R3,DIRENTAD
         MVI   TTROPNSW,C'0'
         SPACE 3
*              GET NEXT DIRECTORY ENTRY
NDGNEXT  L     R15,=A(GETNDIR)
         L     R3,=A(INTCALL)
         BALR  R14,R3
         SPACE 3
*              MOVE NEXT DIRECTORY ENTRY
         L     R1,NDSAVE1
         L     R3,4(R1)            R3 - ADDR OF SECOND ARGUMENT
         MVC   0(FDIRLEN,R3),FDIRSTR    MOVE FORMATTED AREA
         SPACE 3
*              RETURN TO CALLER
NDRETN   L     R15,NDRCODE
         L     R14,NDRADDR
         BR    R14
         SPACE 3
*              SEVERE ERROR, ABEND
NDDUMP   L     R15,=A(DUMPRTN)
         L     R3,=A(INTCALL)
         BALR  R14,R3
         EJECT
*
*        NEXTDIR WORK AREAS
*
         DS    0F
NDARG1   DC    A(NDDDNM)
         DC    A(NDFCBADR)
NDFCBADR DC    F'0'
NDSAVE1  DC    F'0'
NDRCODE  DC    H'0',CL2' '
NDDDNM   DC    CL8' '
         LTORG
         SPACE 3
         DROP  R2
         DROP  R12
         TITLE 'P01569 - ROUTINE FINDDIR'
*
*        ROUTINE FINDDIR - ROUTINE WILL FIND A DIRECTORY ENTRY
*                   FOR A SPECIFIED MEMBER
*              ARGUMENTS
*                   (1) COMMUNICATIONS AREA - INPUT
*                   (2) MEMBER NAME - INPUT
*                        8 BYTES, LEFT JUSTIFIED, BLANK FILLED
*                   (3) DIRECTORY AREA - OUTPUT
*                        *** SEE ROUTINE NEXTDIR FOR FORMAT ***
*
*              RETURN CODES - SEE BELOW
*                        '  ' - DIRECTORY FOUND
*                        'NF' - DIRECTORY ENTRY NOT FOUND
*                                  IN THIS CASE DIRECTORY AREA
*                                  WILL BE SET TO BINARY ZEROES
*
         DS    0F
FINDDIR  EQU   *
         USING *,R12
         DC    18F'0'
FDRADDR  DC    F'0'
         SPACE 3
*              START OF ROUTINE
         ST    R1,FDSAVE1
         L     R3,0(R1)            R3 - ADDR OF COMM AREA
         MVC   FDDDNM(8),4(R3)     GET THE DD NAME
         L     R3,4(R1)
         MVC   FDMEMB(8),0(R3)     GET THE MEMBER NAME
         MVC   FDRCODE+2(2),=CL2' '
         SPACE 3
*              FIND THE FILE CTL BLOCK
         LA    R1,FDARG1
         L     R15,=A(FINDFCB)
         L     R3,=A(INTCALL)
         BALR  R14,R3
         L     R2,FDFCBADR
         LTR   R2,R2
         BNZ   FDCFIRST
         L     R1,=F'102'
         B     FDDUMP
         SPACE 3
*              FIRST CALL FOR THIS FILE SINCE OPEN ?
FDCFIRST L     R2,8(R2)            R2 - ADDR OF FILE CTL AREA
         USING FILECTL,R2
         CLI   TTROPNSW,C'0'
         BNE   FDRESET
         SPACE 3
*              ARE WE STARTING PAST THE DESIRED MEMBER ?
         CLC   FDIRMEM(8),FDMEMB
         BNH   FDTSTNXT
         SPACE 3
*              RESET TO DIRECTORY START
FDRESET  LA    R4,1
         ST    R4,DIRTTRNX
         L     R4,=F'-1'
         ST    R4,DIRENTAD
         MVI   TTROPNSW,C'0'
         B     FDGNEXT
         SPACE 3
*              HAVE WE FOUND THE DESIRED MEMBER ?
FDTSTNXT CLC   FDIRMEM(8),FDHIGH   END OF DIRECTORY ?
         BE    FDNOFIND
         CLC   FDIRMEM(8),FDMEMB
         BE    FDFOUND
         BH    FDNOFIND
         SPACE 3
*              GET THE NEXT DIRECTORY ENTRY
FDGNEXT  L     R15,=A(GETNDIR)
         L     R4,=A(INTCALL)
         BALR  R14,R4
         B     FDTSTNXT
         SPACE 3
*              MEMBER NOT FOUND
*                   CLEAR USRE DIRECTORY AREA
FDNOFIND L     R3,FDSAVE1
         L     R3,8(R3)            R3 - ADDR OF THIRD ARGUMENT
         MVI   0(R3),X'00'
         MVC   1(FDIRLEN-1,R3),0(R3)
         MVC   FDRCODE+2(2),=CL2'NF'
         B     FDRETN
         SPACE 3
*              RETURN FORMATTED DIRECTORY AREA TO CALLER
FDFOUND  L     R3,FDSAVE1
         L     R3,8(R3)            R3 - ADDR OF THIRD ARGUMENT
         MVC   0(FDIRLEN,R3),FDIRSTR    MOVE FORMATTED AREA
         SPACE 3
*              RETURN TO CALLER
FDRETN   L     R15,FDRCODE
         L     R14,FDRADDR
         BR    R14
         SPACE 3
*              SEVERE ERROR, ABEND
FDDUMP   L     R15,=A(DUMPRTN)
         L     R3,=A(INTCALL)
         BALR  R14,R3
         EJECT
*
*        FINDDIR WORK AREAS
*
         DS    0F
FDSAVE1  DC    F'0'
FDARG1   DC    A(FDDDNM)
         DC    A(FDFCBADR)
FDDDNM   DC    CL8' '
FDMEMB   DC    CL8' '
FDFCBADR DC    F'0'
FDRCODE  DC    H'0',CL2' '
FDHIGH   DC    8XL1'FF'
         LTORG
         SPACE 3
         DROP  R2
         DROP  R12
         TITLE 'P01569 - ROUTINE GETNDIR'
*
*        ROUTINE GETNDIR - GET NEXT DIRECTORY ENTRY
*
*              DIRECTORY WILL BE FORMATTED TO DIRECTORY AREA
*
*              R2 MUST POINT AT FILE CTL AREA
*
         DS    0F
GETNDIR  EQU   *
         USING *,R12
         DC    18F'0'
GDRADDR  DC    F'0'                RETURN ADDRESS
         SPACE 3
*              DETERMINE IF NEXT DIR ENT IN CURRENT BLOCK
         USING FILECTL,R2
         L     R3,DIRENTAD
         C     R3,=F'-1'
         BNE   GDGNEXT
         SPACE 3
*              READ NEXT DIRECTORY BLOCK
         L     R3,DIRTTRNX
         LA    R4,DIRBLKCR
         POINT PDSDCB,DIRTTRNX
         LA    R6,PDSDCB           R6 - DCB ADDRESS
         READ PDSECB1,SF,(R6),(R4),256
         CHECK PDSECB1
         NOTE  PDSDCB              GET NEXT TTR
         ST    R3,DIRTTRCR
         ST    R1,DIRTTRNX
         MVI   DIRTTRNX+3,X'01'
         LH    R3,DIRBLKCR         R3 - LENGTH OF BLOCK
         AR    R3,R4               R3 - ADDR OF DIR BLOCK DATA END
         ST    R3,DIRBLKEN
         LA    R4,2(R4)            R4 - ADDR OF DIR BLOCK DATA START
         ST    R4,DIRENTAD
         SPACE 3
*              FORMAT NEXT DIRECTORY BLOCK
GDGNEXT  L     R3,DIRENTAD
         MVI   FDIRSTR,X'00'       CLEAR FORMATTED DIRECTORY AREA
         MVC   FDIRSTR+1(FDIRLEN-1),FDIRSTR
         MVC   FDIRMEM(8),0(R3)    GET MEMBER NAME
         CLC   FDIRMEM(8),GDHIGH   LAST MEMBER ?
         BE    GDRETN
         MVC   FDIRTT+2(2),8(R3)   RELATIVE TRACK
         MVC   FDIRR+3(1),10(R3)   RELATIVE RECORD
         MVC   GDWKBYTE(1),11(R3)
         MVI   FDIRASW,C' '
         TM    GDWKBYTE,X'80'
         BNO   GDGUSER
         MVI   FDIRASW,C'A'
         SPACE 3
*              SET UP USER AREA
GDGUSER  NI    GDWKBYTE,X'1F'
         SR    R4,R4
         IC    R4,GDWKBYTE
         SLL   R4,1                R4 - LENGTH OF USER AREA
         ST    R4,FDIRULEN
         LTR   R4,R4
         BZ    GDFNEXT
         S     R4,=F'1'            MOVE USER AREA
         STC   R4,GDUMOVE+1
GDUMOVE  MVC   FDIRUSER(62),12(R3)
         SPACE 3
*              COMPUTE NEXT DIRECTORY ENTRY ADDRESS
GDFNEXT  L     R4,FDIRULEN
         LA    R4,12(R4)
         AR    R4,R3
         C     R4,DIRBLKEN         END OF DIRECTORY BLOCK ?
         BL    GDSETNXT
         L     R4,=F'-1'
GDSETNXT ST    R4,DIRENTAD
         SPACE 3
*              RETURN TO CALLER
GDRETN   L     R15,GDRETCD
         L     R14,GDRADDR
         BR    R14
         EJECT
*
*        GETNDIR WORK AREAS
*
         DS    0F
GDRETCD  DC    H'0',CL2' '
GDHIGH   DC    8XL1'FF'
GDWKBYTE DS    CL1
         LTORG
         SPACE 3
         DROP  R2
         DROP  R12
         TITLE 'P01569 - ROUTINE MVEDATA'
*
*        ROUTINE MVEDATA - ROUTINE TO MOVE DATA, ANY LENGTH
*              ARGUMENTS - STD LINKAGE, ALL INPUT
*                   (1) INPUT AREA
*                   (2) OUTPUT AREA
*                   (3) LENGTH OF MOVE
*
         DS    0F
MVEDATA  EQU   *
         USING *,R12
         DC    18F'0'
MDRADDR  DC    F'0'
         SPACE 3
*              INITIALIZE
         L     R3,0(R1)            R3 - ADDRESS OF INPUT
         L     R4,4(R1)            R4 - ADDRESS OF OUTPUT
         L     R5,8(R1)
         L     R5,0(R5)            R5 - LENGTH OF MOVE
         LA    R6,1                R6 = 1
         SR    R7,R7               R7 = 0
         LA    R8,256              R8 = 256
         SPACE 3
*              MOVE UP TO 256 BYTES
MDMVE256 CR    R5,R7
         BNH   MDRETN
         LR    R10,R5              R10 = LENGTH REMAINING
         CR    R10,R8              GREATER THAN 256 ?
         BNH   MDSETUP
         LR    R10,R8              SET MOVE LENGTH TO 256
MDSETUP  SR    R10,R6              R10 = R10 - 1
         STC   R10,MDMVEDAT+1      SET MOVE LENGTH
MDMVEDAT MVC   0(0,R4),0(R3)
         SPACE 3
*              SET UP NEXT MOVE
         AR    R3,R8               R3 = R3 + 256
         AR    R4,R8               R4 = R4 + 256
         SR    R5,R8               R5 = R5 - 256
         B     MDMVE256
         SPACE 3
*              MOVE COMPLETE, RETURN
MDRETN   LR    R15,R7              R15 = 0
         L     R14,MDRADDR
         BR    R14
         SPACE 3
         DROP  R12
         TITLE 'P01569 - ROUTINE DUMPRTN'
*
*        ROUTINE DUMPRTN - ABEND AND DUMP ROUTINE
*
*              ARGUMENTS - USER ABEND CODE IN R1
*
         DS    0F
DUMPRTN  EQU   *
         USING *,R12
         DC    18F'0'
DMPRADDR DC    F'0'
         SPACE 3
*              START OF ROUTINE
         ABEND (R1),DUMP
         SPACE 3
         DROP  R12
         TITLE 'P01569 - FILE CONTROL AREA (DSECT)'
FILECTL  DSECT
*
*        FILE CONTROL DATA
*
         SPACE 3
*              PHYSICAL ATTRIBUTES
         DS    0F
FILECTLS EQU   *
PHYBLKSZ DS    F                   FILE BLOCKSIZE
PHYLRECL DS    F                   FILE LOGICAL RECORD LENGTH
PHYBUFST DS    F                   ADDRESS OF FILE BUFFER START
PHYBUFEN DS    F                   ADDRESS OF FILE BUFFER END
PHYBUFCR DS    F                   ADDRESS OF CURRENT RECORD IN BUFFER
         SPACE 3
*              DIRECTORY BLOCK DATA
         DS    0F
DIRTTRNX DS    F                   TTR OF NEXT DIRECTORY BLOCK
DIRTTRCR DS    F                   TTR OF CURRENT DIRECTORY BLOCK
DIRBLKEN DS    F                   ADDR OF END OF DIRECTORY BLOCK DATA
DIRBLKCR DS    CL256               CURRENT DIRECTORY BLOCK
DIRENTAD DS    F                   ADDRESS OF NEXT ENTRY (HIGH VALUES
*                                       IF LAST ENTRY IN BLOCK)
         SPACE 3
*              FORMATTED DIRECTORY AREA
         DS    0F
FDIRSTR  EQU   *
FDIRMEM  DS    CL8                 MEMBER NAME
FDIRTT   DS    F                   RELATIVE TRACK
FDIRR    DS    F                   RELATIVE RECORD
FDIRULEN DS    F                   LENGTH OF USER AREA
FDIRUSER DS    CL62                USER AREA
FDIRASW  DS    CL1                 ALIAS SWITCH
*                                       'A' - IF ALIAS
*                                       ' ' - IF NOT
FDIREND  EQU   *
FDIRLEN  EQU   FDIREND-FDIRSTR
         SPACE 3
*              MEMBER PROCESSING AREA
         DS    0F
MEMTTRNX DS    F                   TTR OF NEXT MEMBER PHYSICAL RECORD
MEMNAME  DS    CL8                 CURRENT MEMBER NAME
         SPACE 3
*              FILE OPEN SWITCH, INDICATES FILE OPEN ONLY
*                   NO I/O HAS TAKEN PLACE
TTROPNSW DS    CL1
MEMOPNSW DS    CL1
         EJECT
*
*        DCB FOR THE PDS
*
         DS    0D
PDSDCB   DS    CL160
         EJECT
*
*        COMPUTE LENGTH OF THIS AREA
*
FILECTLE EQU   *
FCTLLEN  EQU   FILECTLE-FILECTLS
GET1LEN  EQU   FCTLLEN
         TITLE 'P01569 - PDS DCB DSECT'
*
*        DUMMY DCB FOR PDS DATA SETS
*
         DCBD  DSORG=PO,DEVD=DA
         END   P01569
