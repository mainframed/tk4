*          DATA SET P50248     AT LEVEL 004 AS OF 06/02/81
*          DATA SET P50248     AT LEVEL 003 AS OF 02/10/81
*          DATA SET P50248     AT LEVEL 002 AS OF 02/10/81
*          DATA SET P50248     AT LEVEL 001 AS OF 02/09/81
*          DATA SET P50248     AT LEVEL 001 AS OF 11/10/80
P50248   CSECT
 TITLE '***** SUBMIT JOBS USING MBRDR MODIFY     &SYSDATE &SYSTIME **'
         PRIME
         REGISTER
         LR    R2,R1
         USING PARMS,R2
 TITLE '***** DETERMINE IF LIBRARY IS CORRECT    &SYSDATE &SYSTIME **'
         GETMAIN R,LV=WORKARLN     GET SOME WORKING STORAGE
         LR    R10,R1              COPY ADDR
         LR    R14,R1              TARGET OF MOVE
         LA    R15,CONLEN          GET LENGTH OF CONSTANT DATA
         LA    R4,WORKAR           SOURCE OF MOVE
         LA    R5,CONLEN
         MVCL  R14,R4              MOVE INTO DYNAMIC AREA
         USING WORKAR,R10
         BAL   R14,RDJFCB          GET DSNAME FOR CARDLIB
         LTR   R15,R15             CHECK RETURN
         BZ    RDOK                OKAY - CONTINUE
         L     R9,=F'36'           CARDLIB DD BAD
         B     ERROR               PRINT ERROR MESSAGE
RDOK     LR    R15,R0              COPY ADDR OF DSNAME
         ST    R15,INDADDR         STORE ADDR OF INDEX
         LA    R14,44              SET MAX LENGTH
LIBLOOP  CLI   0(R15),C'.'         CHECK FOR END OF FIRST QUALIFIER
         BE    LIBCHK              YES CHECK LIBRARY
         LA    R15,1(R15)          BUMP COUNTER
         BCT   R14,LIBLOOP         LOOP
         L     R9,=F'40'           BAD DSN ON CARDLIB DD
         B     ERROR
LIBCHK   CLC   1(7,R15),=C'F01640 ' CHECK FOR CORRECT LIBRARY
         BE    OK1640
         RACHECK ENTITY=F01640,ATTR=READ,CLASS='JOBS'
         B     RACHRET(R15)
RACHRET  B     NLIB           *RACHECK USED            *
         B     NLIB           *    ONLY TO GENERATE    *
         B     NLIB           *      SMF AUDIT TRAIL   *
         B     NLIB           *         OF USE         *
NLIB     L     R9,=F'44'           NON-F01640 DATASET
         B     ERROR               PRINT ERROR
OK1640   SR    R15,R0              COMPUTE INDEX LENGTH
         ST    R15,INDLEN          STORE IT
 TITLE '***** DETERMINE IF MBRDR IS ACTIVE       &SYSDATE &SYSTIME **'
*
*
*
*        ATTEMPT TO FIND MBRDR ADDRESS SPACE
*
CONTNORM EQU   *
         L     R5,16                 ADDRESS OF OS/VS CVT
         USING CVT,R5
         L     R5,CVTASVT            P-ASVT
         DROP  R5
         USING ASVT,R5
         L     R4,ASVTMAXU           MAX ADDRSPCS
         LA    R5,ASVTFRST           POINTER-4 TO TABLE
         DROP  R5
         SR    R7,R7
NXTASCB  LA    R5,4(R5)              NEXT ASCB
         LA    R7,1(R7)              INCREMENT ASCB COUNT
         TM    0(R5),X'80'           ASCB IN USE ? ? ? ? ? ?
         BNO   ACTASCB               FOUND ACTIVE ASCB
         CLR   R7,R4                 END OF ASCBS? ? ? ? ?
         BL    NXTASCB
*
*        RETURN WITHOUT MODIFY TO MBRDR
         L     R9,=F'28'             MBRDR NOT ACTIVE
         B     ERROR                 IF SO GET OUT
         SPACE 3
ACTASCB  EQU   *
         L     R9,0(R5)              ASID ADDRESS
         USING ASCB,R9
         LA    R6,ASCBJBNS           POINTER TO JOBNAME
         DROP  R9
         CLC   0(4,R6),=XL4'00'      HEX ZEROES? ? ? ? ? ? ?
         BE    NXTASCB               NO - KEEP LOOKING
         L     R6,0(R6)              JOBNAME POINTER
         CLC   0(5,R6),=C'MBRDR'     MBRDR ? ? ? ?
         BNE   NXTASCB               YES
         ST    R9,ASCBADDR           SAVE ASCB ADDRESS
 TITLE '***** PLACE MEMBER NAME TO SUBMIT IN F   &SYSDATE &SYSTIME **'
         SR    R5,R5
         LA    R6,8
         L     R7,FMEMBER
JOBL     EQU   *
         CLI   0(R7),C' '          BLANK
         BE    LASTCOL
         LA    R5,1(R5)            COUNT CHARACTERS
         LA    R7,1(R7)
         BCT   R6,JOBL
LASTCOL  EQU   *
         L     R7,FMEMBER          MEMBER ADDRESS
         BCTR  R5,0
         EX    R5,MVCJOB
         LA    R6,CIBJOB(R5)
         MVC   1(1,R6),=C')'
         LA    R7,18(R5)
         STH   R7,CIBLWTO
         STH   R7,CIBL
 TITLE '***** DETERMINE IF WE NEED USER/GROUP INF &SYSDATE &SYSTIME **'
         L     R5,16                 ADDRESS OF OS/VS CVT
         USING CVT,R5
         L     R5,CVTTCBP          TCB POINTERS
         L     R5,12(R5)           OUR ASCB
         DROP  R5
         USING ASCB,R5
         L     R5,ASCBASXB         ADDRESS OF ASXB
         DROP  R5
         USING ASXB,R5
         L     R5,ASXBSENV         ADDRESS OF ACEE
         DROP  R5
         USING ACEE,R5
         CLI   ACEEUSRI,C'*'       USERID = *
         BE    INDCHK
         LH    R7,CIBL             LENGTH OF CURRENT CIB
         LA    R9,CIBCOM(R7)       END OF COMMAND
         SH    R9,=H'4'            FOR CIBL+CIBR
         SR    R8,R8
         IC    R8,ACEEUSRL         USER LENGTH
         AR    R7,R8               LENGTH OF USER
         LA    R7,15(R7)           ,USER(),GROUP()
         BCTR  R8,0
         MVC   0(6,R9),=C',USER('
         LA    R9,6(R9)
         EX    R8,MVCUSER
         LA    R8,1(R8)            RESTORE R7 TO ORIGINAL COUNT
         AR    R9,R8               F MBRDR,JOB(X),USER(XXXX
         MVC   0(8,R9),=C'),GROUP('
         LA    R9,8(R9)            F MBRDR,JOB(X),USER(XXXX),GROUP(
         SR    R8,R8               CLEAR R8
         IC    R8,ACEEGRPL         GET GROUP LENGTH
         BCTR  R8,0                REDUCE FOR EXECUTE
         EX    R8,MVCGRP           MOVE IT OUT OF ACEE
         LA    R9,1(R8,R9)         BUMP POINTER
         MVI   0(R9),C')'    F MBRDR,JOB(X),USER(X),GROUP(X)
         LA    R7,1(R8,R7)          NEW LENGTH
         STH   R7,CIBL             RETURN TO CIB
         STH   R7,CIBLWTO
         B     INDCHK              DETERMINE IF WE HAVE AN INDEX
MVCUSER  MVC   0(0,R9),ACEEUSRI
MVCGRP   MVC   0(0,R9),ACEEGRPN
 TITLE '***** DETERMINE IF WE HAVE AN INDEX      &SYSDATE &SYSTIME **'
INDCHK   L     R8,INDADDR          GET ADDR OF INDEX
         CLC   0(4,R8),=C'MB98'    IS IT MB98
         BE    ECBINSRT            YES, NO NEED FOR INDEX
         LH    R7,CIBL             GET LEN OF CIB
         LA    R9,CIBCOM(R7)       END OF COMMAND
         SH    R9,=H'4'            SUB 4 FOR CIBL+CIBR
         MVC   0(7,R9),=C',INDEX(' MOVE IN INDEX
         LA    R9,7(R9)            BUMP POINTER
         L     R6,INDLEN           GET LEN OF INDEX
         LA    R7,8(R7,R6)         COMPUTE NEW CIBL
         BCTR  R6,0                REDUCE FOR EXECUTE
         EX    R6,MOVIND           MVC  0(0,R9),0(R8)
         LA    R9,1(R6,R9)         BUMP POINTER
         MVI   0(R9),C')'          FINISH ENTRY
         STH   R7,CIBL             STORE LENGTH
         STH   R7,CIBLWTO          LENTH FOR WTO
 TITLE '***** FILL IN ECB FOR CROSS ADDRESS POST &SYSDATE &SYSTIME **'
ECBINSRT LH    R7,CIBL             GET LENGTH OF CURRENT CIB
         LA    R9,CIBCOM(R7)       GET END OF COMMAND
         SH    R9,=H'4'            FOR CIBL+CIBR
         LA    R8,ECB              GET ADDR OF ECB
         ST    R8,HEXFLD           STORE IT IN WORKAREA
         L     R8,548              GET ADDR OF ASCB
         ST    R8,HEXFLD+4         STUFF IT FOR TRANSLATE
         UNPK  HEXFLD+3(15),HEXFLD+1(8) GET READY FOR
         MVC   HEXFLD+1(2),=X'F0F0'
         NC    HEXFLD+1(16),=X'0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F'
         TR    HEXFLD+1(16),TRANTAB TRANSLATE TO HEX CHARS
         MVC   0(7,R9),=C',HEX(X'''
         LA    R9,7(R9)            ADD 7 TO LENGTH
         MVC   0(16,R9),HEXFLD+1   MOVE IN ADDR OF ECB & ASCB
         MVC   16(2,R9),=C''')'    MOVE IN CLOSING PAREN
         MVC   MBRDRQ3,HEXFLD+9    STORE ASCB ADDR IN CHAR FORM
         LA    R9,18(R9)           BUMP IT
         LA    R7,25(R7)           INCREASE CURRENT LENGTH
         STH   R7,CIBL             UPDATE NEW CIB LENGTH
 TITLE '***** ISSUE SVC 34 FOR MODIFIES          &SYSDATE &SYSTIME **'
ISSUE34  EQU   *
         ENQ   (,MBRDRQ3,,,),MF=(E,ENQLST2)
         L     R15,=A(POSTCOMP)    ADDR OF EXIT ROUTINE
         STIMER REAL,(R15),BINTVL=WAITINT
         XC    ECB,ECB
         LA    R1,AUTH
         SVC   231                 AUTHORIZE
         MODESET KEY=ZERO,MODE=SUP
         SR    R0,R0
         LA    R1,CIB
         SVC   34
         MODESET KEY=NZERO,MODE=PROB
         SR    R1,R1
         SVC   231
         WAIT  1,ECB=ECB           WAIT FOR RESPONSE FROM MBRDR
         TTIMER CANCEL,TU          CANCEL TIMER EXIT
         L     R9,ECB              GET ECB
         LA    R9,0(R9)            PURIFY
ERROR    L     R8,MSGADDRL(R9)     GET ADDR OF APPROPRIATE MESSAGE
         MVC   WTOL1+4(60),0(R8)    MOVE IN WTO
         WTO   MF=(E,WTOL1)         WRITE IT
         L     R8,FCTL
         LTR   R9,R9
         BZ    GOODMOD             OK, CONTINUE
         C     R9,=F'44'           IS IT A NON-F01640 DATASET
         BE    NON1640             YES - SET SPECIAL RETURN
         MVC   0(2,R8),=C'NG'      NO, BOMB IT
         B     TERME
NON1640  MVC   0(2,R8),=C'NP'      SET RETURN FOR NON-F01640 DATASET
         B     TERME
GOODMOD  MVC   0(2,R8),=C'OK'      MARK MODIFY COMPLETE
         MVI   WTOL+15,C' '
         MVC   WTOL+16(WTOLEN-1),WTOL+15
         LH    R5,CIBLWTO          LENGTH OF MESSAGE FOR WTO
         SH    R5,=H'5'            VB  INFO
         EX    R5,MVCWTO
         WTO   MF=(E,WTOL)
TERME    EQU   *
         DEQ (,MBRDRQ3,,),MF=(E,DEQLST1)
         FREEMAIN R,LV=WORKARLN,A=(R10)
         TERME
 TITLE '***** RDJFCB SUBROUTINE                  &SYSDATE &SYSTIME **'
RDJFCB   EQU   *
***********************************************************************
*                                                                     *
*  THIS SUBROUTINE RETURNS WITH R0 -> DSNAME ASSOCIATED WITH DDNAME   *
*  CARDLIB AND A 0 IN R15 IF SUCCESSFUL. IF UNSUCCESSFUL, R15 CONTAINS*
*  A 4 OR 8.                                                          *
*                                                                     *
***********************************************************************
         STM   R0,R15,REGSAVE      SAVE REGS
         LA    R2,JFCB1
         ST    R2,LISTA
         MVI   LISTA,X'87'         SET UP EXIT LIST
         L     R2,16               GET ADDR OF CVT
         L     R2,0(R2)            GET ADDR OF TCB WORDS
         L     R2,4(R2)            GET ADDR OF TCB
         LA    R15,8               SET DEFAULT RETURN CODE
         USING TCB,R2              SETUP ADDRESSABILITY TO TCB
         L     TIOTPTR,TCBTIO      FIND TIOT
         L     DEBPTR,TCBDEB       GET ADDR OF FIRST DEB
RDJFCB10 LA    DEBPTR,0(DEBPTR)    CLEAR HIGH ORDER BYTE
         LTR   DEBPTR,DEBPTR       END OF CHAIN
         USING DEBBASIC,DEBPTR     SETUP ADDRESSABILITY TO DEB
         BZ    RDJFCB40            GET OUT AT END.
         L     R5,DEBDCBAD         GET ADDR OF DCB
         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE
         LTR   R5,R5               CHECK FOR ZERO
         BZ    RDJFCB20            YES, BYPASS
         LH    R6,X'28'(R5)        GET OFFSET TO TIOT ENTRY
         LR    R7,TIOTPTR          COPY ADDR OF TIOT
         AR    R7,R6               COMPUTE ADDR OF ENTRY IN TIOT
         CLC   4(8,R7),=C'CARDLIB ' IS DDNAME = CARDLIB??
         BE    RDJFCB30            YES,-- FOUND IT
RDJFCB20 L     DEBPTR,DEBDEBAD     GET NEXT DEB
         B     RDJFCB10            LOOP UNTIL DONE
RDJFCB30 EQU   *
         USING IHADCB,R5           SETUP ADDRESSABILITY TO DCB
         LA    R7,LISTA            GET ADDR OF EXIT LIST
         STCM  R7,7,DCBEXLSA       STUFF IN DCB
         RDJFCB ((R5)),MF=(E,RDJFCBL) READ JFCB
         LTR   R15,R15             WAS IT GOOD??
         BNZ   RDJFCB40            NO--
         LA    R0,JFCB1            YES, RETURN ADDR OF JFCB IN R0
RDJFCB40 LM    R1,R15,REGSAVE+4    RESTORE REGS
         BR    R14
 TITLE '***** CONSTANTS AND WORKAREAS            &SYSDATE &SYSTIME **'
         LTORG
MSGADDRL DC    A(MSG0)             MESSAGE ADDRESS TABLE
         DC    A(MSG4)
         DC    A(MSG8)
         DC    A(MSG12)
         DC    A(MSG16)
         DC    A(MSG20)
         DC    A(MSG24)
         DC    A(MSG28)
         DC    A(MSG32)
         DC    A(MSG36)
         DC    A(MSG40)
         DC    A(MSG44)
         DC    A(MSG48)
         DC    A(MSG52)
MSG0     DC    CL60'MBRDR001 -- JOB SUBMITTED BY MBRDR'
MSG4     DC    CL60'MBRDR002 -- JOBNAME NOT FOUND BY MBRDR'
MSG8     DC    CL60'MBRDR003 -- FIRST CARD NOT VALID JOB CARD'
MSG12    DC    CL60'MBRDR004 -- NOT PERMITTED TO SUBMIT JOB TO MBRDR'
MSG16    DC    CL60'MBRDR005 -- FAILURE TO INSERT PASSWORD'
MSG20    DC    CL60'MBRDR006 -- MBRDR HAS ABENDED, JOB NOT SUBMITTED TOX
                MBRDR'
MSG24    DC    CL60'MBRDR007 -- LIBRARY BLOCKSIZE NOT MULTIPLE OF 80'
MSG28    DC    CL60'MBRDR008 -- NO RESPONSE FROM MBRDR'
MSG32    DC    CL60'MBRDR009 -- DYNAMIC ALLOCATION FAILURE FOR DATASET'
MSG36    DC    CL60'MBRDR010 -- CARDLIB DD INCORRECTLY SPECIFIED'
MSG40    DC    CL60'MBRDR011 -- BAD DSNAME ON CARDLIB DD STATEMENT'
MSG44    DC    CL60'MBRDR012 -- NON-F01640 DSN SPECIFIED ON CARDLIB'
MSG48    DC    CL60'MBRDR032 -- ONLY ONE JOB PER PDS MEMBER ALLOWED'
MSG52    DC    CL60'MBRDR038 -- PASSWORD= SPECIFIED AND JOB NOT DEFINEDX
                TO RACF'
CIB      DS    0F
WORKAR   EQU   *
CIBL     DS    H                   LENGTH
CIBR     DC    H'0'                RESERVED
CIBCOM   DC    C'F MBRDR,JOB('
CIBJOB   DC    CL80' '             REST OF COMMAND
MVCJOB   MVC   CIBJOB(0),0(R7)
MVCWTO   MVC   WTOL+15(0),CIBCOM
MOVIND   MVC   0(0,R9),0(R8)
F01640   DC    CL8'F01640'         ENTITY FOR RACHECK
WTOL     WTO   'MBRDR013 - F MBRDR,JOB(XXXXXXXX),INDEX(XXXX),USER(XXXX)X
               ,GROUP(XXXX)    ',ROUTCDE=11,MF=L
WTOLEN   EQU   *-WTOL-19           LENGTH OF MESSAGE PORTION
AUTH     DC    CL4'AUTH'
TRANTAB  DC    C'0123456789ABCDEF' TRANSLATION TABLE
ECB      DC    F'0'                CROSS ADDRESS SPACE ECB
WAITINT  DC    F'3000'             30 SECOND WAIT FOR RESPONSE
ENQLST1  ENQ   (MBRDRQ1,MBRDRQ2,E,,SYSTEM),RET=TEST,MF=L
ENQLST2  ENQ   (MBRDRQ1,MBRDRQ3,E,,SYSTEM),RET=HAVE,MF=L
MBRDRQ1  DC    CL8'MBRDR'
MBRDRQ2  DC    CL8'MASTER'
MBRDRQ3  DC    CL8' '
DEQLST1  DEQ   (MBRDRQ1,MBRDRQ3,,SYSTEM),RET=HAVE,MF=L
RDJFCBL  RDJFCB (INDADDR),MF=L
WTOL1    WTO   '0123456789012345678901234567890123456789012345678901234X
               56789 ',MF=L
CONLEN   EQU   *-CIB               LENGTH OF CONSTANT DATA
CIBLWTO  DS    H
INDADDR  DS    F                   INDEX ADDR
INDLEN   DS    F                   INDEX LENGTH
ASCBADDR DS    F
HEXFLD   DS    CL18                WORK FIELD
LISTA    DS    0F
         DC    X'87'
         DC    AL3(JFCB1)
JFCB1    DS    0F,176C
REGSAVE  DS    16F
WORKARLN EQU   *-WORKAR
 TITLE '***** STIMER EXIT ROUTINE                &SYSDATE &SYSTIME **'
POSTCOMP EQU   *
         SAVE  (14,12)             SAVE REGS
         LR    R12,R15             SET UP BASE REG
         USING POSTCOMP,12
         L     R2,16               GET ADDR OF CVT
         L     R2,0(R2)            TCB WORDS
         L     R2,4(R2)            ADDR OF TCB
         USING TCB,R2
         L     R2,TCBRBP           GET CURRENT RB(IRB)
         DROP  R2
         USING RBBASIC,R2          ADDRESSIBILITY TO RB
         L     R2,RBGRS10          GET ADDR OF WORK AREA FOR MAIN
         DROP  R10
         USING WORKAR,R2           SET ADDRESSIBILITY
TIMERLP  ENQ   MF=(E,ENQLST1)
         LTR   R15,R15
         BZ    POSTIT
         CLI   3(R15),X'04'
         BE    TIMESET
         ABEND 2,DUMP
TIMESET  LA    R5,ECB              GET ADDR OF ECB
         TM    0(R5),X'40'         IS IT POSTED YET
         BO    POSTRET             YES - DONT RESET THE TIMER
         STIMER WAIT,BINTVL=WAITRET
         B     TIMERLP
POSTIT   LA    R2,ECB              GET ECB
         DROP  R2
         POST  (R2),28             POST IT COMPLETE
POSTRET  RETURN (14,12)
WAITRET  DC    F'1500'
         EJECT
         PRINT NOGEN
TIOTDSCT DSECT
         IEFTIOT1
         IKJTCB
         IEZDEB
         IHADCB DSORG=PO
         IHARB
         PRINT GEN
TIOTPTR  EQU   R3
DEBPTR   EQU   R4
 TITLE '***** DSECTS FOR SUBROUTINE              &SYSDATE &SYSTIME **'
PARMS    DSECT
FCTL     DS    F                   INDICATOR IF SUBMIT WORKED
FMEMBER  DS    F                   MEMBER TO SUBMIT
 TITLE '***** CVT DSECT                          &SYSDATE &SYSTIME **'
         CVT   DSECT=YES
 TITLE '***** ASCB DSECT                         &SYSDATE &SYSTIME **'
         IHAASCB
 TITLE '***** ASXB DSECT                         &SYSDATE &SYSTIME **'
         IHAASXB
 TITLE '***** ACEE DSECT                         &SYSDATE &SYSTIME **'
         IHAACEE
 TITLE '***** ASVT DSECT                         &SYSDATE &SYSTIME **'
         IHAASVT
         END
