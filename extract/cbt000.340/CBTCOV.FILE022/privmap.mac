PMAP     TITLE 'PRIVMAP - VSM LOCAL CONTROL BLOCK MAP EXIT'
NEWMAP   CSECT
*******************************************************************
*
*        THIS MODULE IS INTENDED TO BE USED AS AN EXIT TO AMDPRDMP,
*        AND WILL OPERATE AS AN ASCB EXIT AND A TCB EXIT. TWO ENTRIES
*        MUST BE ADDED TO AMDPRECT TO UTILIZE THIS EXIT. THE FIRST
*        ENTRY SHOULD BE FOR ENTRY PRIVMAP1 AND SHOULD HAVE THE
*        ASCB EXIT FLAG TURNED ON. THE SECOND ENTRY SHOULD BE FOR
*        ENTRY PRIVMAP2 AND SHOULD HAVE THE TCB EXIT FLAG TURNED ON.
*        THIS ROUTINE USES STANDARD PRINTDUMP LINKAGE TO FORMAT AND
*        PRINT CONTROL BLOCKS, PRINT MESSAGES, AND TO ACCESS DUMPED
*        DATA.  IT IS INTENDED TO BE USED TO AID THE PSR IN
*        DETERMINING A PROBLEM, WHEN A USER PRIVATE AREA IS DEPLETED.
*        THE PROGRAM DOES NOT USE A GETMAINED AREA FOR ITS' WORKAREA,
*        SO IT IS NOT RE-ENTRANT, BUT THIS SHOULD NOT PRESENT A
*        PROBLEM, IF IT IS NOT PLACED IN LPA. THE EXIT CHANGES SOME
*        DATA IN THE WORKAREA, AFTER MOVING THE DATA FROM PRINTDUMPS'
*        BUFFER, FOR EASE OF FORMATTING. WORKAREA LABELS MAY HAVE TO
*        BE CHANGED, IF THE FOLLOWING VSM CONTROL BLOCKS ARE CHANGED:
*               CVT, ASVT, ASCB, LDA, PQE, FBQE, SPQE, DQE, FQE,
*               OR TCB MSS BLOCKS.
*
*        TO LINK THIS MODULE INTO A LIBRARY USE THE FOLLOWING
*        LINKAGE EDITOR CONTROL STATEMENTS:
*               ENTRY PRIVMAP2
*               ALIAS PRIVMAP1
*               ALIAS PRIVMAP2
*               NAME PRIVMAP(R)
*
*    INSTALLATION:
*      PRIVMAP RUNS AS BOTH AN ASCB EXIT AND A TCB EXIT OF
*      AMDPRDMP.  FOR INFORMATION ON THESE TYPES OF EXITS
*      SEE THE SERVICE AIDS MANUAL GC28-0674 APPENDIX C
*      UNDER THE TOPIC 'THE EXIT CONTROL TABLE (ECT)'.
*
*      THE S/ZAP REP'S REQUIRED ARE:
*            REP XXXX D7D9,C9E5,D4C1,D7F1,4000,0000,
*                     4040,4040,4040,4040
*            REP YYYY D7D9,C9E5,D4C1,D7F2,8000,0000,
*                     4040,4040,4040,4040
*
*      THIS WILL MAKE AN ENTRY FOR THE ASCB EXIT NAME
*      PRIVMAP1 AND ANOTHER ENTRY FOR THE TCB EXIT NAME
*      PRIVMAP2.
*
*
*
*        THIS ROUTINE IS NOT FORMALLY SUPPORTED IN ANY WAY, BUT
*        I WOULD BE HAPPY TO ATTEMPT ANY CORRECTIONS, ON AN 'AS
*        AVAILABLE' BASIS.
*
*        FRANK H. CONNERY, JR., REGION 9, T.A.G.
*        (312) 245-7850   (IBM TIE LINE 8-261-7850)
*        REGION 9, TECHNICAL SUPPORT GROUP  (F.E.)
*        1 IBM PLAZA  (INTERNAL ZIP  38-528)
*        CHICAGO, ILLINOIS   60611
*
*******************************************************************
         EJECT
*******************************************************************
*        ENTRY TO FORMAT LSQA BLOCKS
*******************************************************************
         ENTRY PRIVMAP1
         USING *,15                       SETUP TEMP ADDRESSABILITY
PRIVMAP1 SAVE (14,12),,PRIVMAP            SAVE REGISTERS
         LA    7,PMAPSAV                  POINT TO MY SAVE AREA
         ST    13,PMAPSAV+4               ESTABLISH...
         ST    7,8(,13)                   SAVE AREA LINKAGE
         ST    13,SAVPTR                  SAVE SAVE AREA POINTER
         LR    13,7                       POINT AT MY SAVE AREA
         LA    12,PRIVBASE                ESTABLISH BASE REGISTER
         USING PRIVBASE,12                SETUP ADDRESSABILITY
         DROP  15                         DROP TEMP ADDRESSABILITY
         B     PRIVLSQA                   PROCESS LSQA QUEUES
         SPACE
         DROP  12
         SPACE 3
*******************************************************************
*        ENTRY TO FORMAT TCB BLOCKS
*******************************************************************
         ENTRY PRIVMAP2
         USING *,15                       SETUP TEMP ADDRESSABILITY
PRIVMAP2 SAVE (14,12)                     SAVE REGISTERS
         LA    7,PMAPSAV                  POINT TO MY SAVE AREA
         ST    13,PMAPSAV+4               ESTABLISH...
         ST    7,8(,13)                   SAVE AREA LINKAGE
         ST    13,SAVPTR                  SAVE SAVE AREA POINTER
         LR    13,7                       POINT AT MY SAVE AREA
         LA    12,PRIVBASE                ESTABLISH BASE REGISTER
         USING PRIVBASE,12                SETUP ADDRESSABILITY
         DROP  15                         DROP TEMP ADDRESSABILITY
         B     PRIVTCB                    PROCESS TCB QUEUES
         SPACE 3
PRIVBASE EQU   *                          VALUE FOR BASE REG
         USING ABDPL,1                    ESTABLISH PARMLIST DSECT
         EJECT
*******************************************************************
*        FORMAT LSQA BLOCKS ROUTINE
*******************************************************************
         SPACE 3
PRIVLSQA BAL   11,BLNKPRNT                SPACE OUTPUT
         L     7,ADPLBUF                  LOCATE PRINT BUFFER
         MVC   0(L'PRILMSG,7),PRILMSG     MOVE PRIVATE MSG
         BAL   11,MSGSET                  LINK TO PRINT IT
         BAL   11,BLNKPRNT                SPACE OUTPUT
         SR    8,8                        CLEAR REGISTER FOR INSERT
         ICM   8,7,ADPLCVT+1              GET ADDRESS OF DUMPED CVT
         BNZ   CVTOK                      BRANCH IF GIVEN
         LA    8,76(,0)                   ELSE SET FOR CVT POINTER
         BAL   11,GETBLOK                 AND GO GET POINTER
         L     8,0(,8)                    GET ADDRESS OF DUMPED CVT
         LTR   15,15                      RETREIEVE OK ?
         BZ    CVTOK                      YES, GO GET ASVT
CVTBAD   MVC   CBNAME,CVTCB               MOVE 'CVT' INTO MSG
         B     CBMSGEND                   BR TO PRINT, THEN QUIT
         SPACE 2
* CVT POINTER PASSED BY AMDPRDMP IS GOOD.... NOW GET ASVT...
         SPACE 2
CVTOK    LA    8,X'22C'(,8)               PICK UP ASVT POINTER IN CVT
         BAL   11,GETBLOK                 GO GET POINTER
         LTR   15,15                      RETRIEVE OK ?
         BNZ   CVTAUNAV                   NO, BRANCH
         L     8,0(,8)                    ELSE PICK UP POINTER
         LH    9,ADPLASID                 GET CURRENT ASID
         LTR   9,9                        IS ASID OK?
         BZ    ASIDUNAV                   NO, BRANCH
         SLL   9,2                        MULTIPLY BY FOUR FOR INDEX
         LA    8,X'20C'(9,8)              PICK UP ASCB POINTER IN ASVT
         BAL   11,GETBLOK                 REQUEST ASVT ASCB POINTER
         LTR   15,15                      RETRIEVE OK ?
         BZ    ASVTOK                     YES, BRANCH
ASVTUNAV MVC   CBNAME,ASVTCB              MOVE 'ASVTENTY' INTO MSG
         B     CBMSGEND                   BR TO PRINT, THEN QUIT
ASIDUNAV MVC   CBNAME,ASIDCB              MOVE 'ASID' INTO MSG
         B     CBMSGEND                   BR TO PRINT, THEN QUIT
CVTAUNAV MVC   CBNAME,CVTASVT             MOVE 'CVTASVT' INTO MSG
         B     CBMSGEND                   BR TO PRINT, THEN QUIT
         SPACE 2
* ASVT POINTER IS GOOD.... NOW GET ASCB...
         SPACE 2
ASVTOK   TM    0(8),X'80'                 ASCB ADDRESS INVALID?
         BO    ASCBUNAV                   YES, SAY SO AND TERMINATE
         L     8,0(,8)                    PICK UP ASCB POINTER IN ASVT
         ST    8,ASCBPTR                  SET POINTER
         LA    8,X'30'(,8)                GET ASCB LDA POINTER
         BAL   11,GETBLOK                 GO GET POINTER
         LTR   15,15                      RETRIEVE OK ?
         BZ    ASCBOK                     YES, BRANCH
ASLDUNAV MVC   CBNAME,ASLDCB              ELSE MOVE 'ASCBLDA' INTO MSG
         B     CBMSGEND                   BR TO PRINT, THEN QUIT
ASCBUNAV MVC   CBNAME,ASCBCB              ELSE MOVE 'ASCB' INTO MSG
         B     CBMSGEND                   BR TO PRINT, THEN QUIT
         SPACE 2
* ASCB POINTER IS GOOD.... NOW GET LDA...
         SPACE 2
ASCBOK   L     8,0(,8)                    PICK UP LDA POINTER IN ASCB
         ST    8,LDAPTR                   SET POINTER
         LR    7,8                        SAVE LDA POINTER
         BAL   11,GETBLOK                 GO GET LDA (PART 1)
         LTR   15,15                      RETRIEVE OK ?
         BNZ   LDAUNAV                    NO, BRANCH
         MVC   MYLDA(MYLDAL1),4(8)        MOVE LDA (PART 1) TO WORKAREA
         LA    8,X'5B8'(,7)               POINT AT SECOND PART OF LDA
         BAL   11,GETBLOK                 GO GET LDA (PART 2)
         LTR   15,15                      RETRIEVE OK ?
         BZ    LDAOK                      YES, BRANCH
LDAUNAV  MVC   CBNAME,LDACB               ELSE MOVE 'LDA' INTO MSG
         B     CBMSGEND                   BR TO PRINT, THEN QUIT
         SPACE 2
* LDA IS OK.... COPY IT AND FORMAT IT.
         SPACE 2
LDAOK    MVC   MYLDA+16(MYLDAL2),0(8)     MOVE LDA (PART 2) TO WORKAREA
         MVI   PATTERN,LPAT               SET PATTERN FOR LDA
         BAL   11,FPROUT                  GO F/P
         SPACE 2
* GET THE LSQA PQE...
         SPACE 2
PQEPROC  BAL   11,BLNKPRNT                SPACE OUTPUT
         L     6,MAXPQE                   GET PQE LOOP COUNT AND...
         ST    6,PQECT                    SAVE IT
PQELOOP  SR    8,8                        CLEAR ACCESS REGISTER
         ICM   8,7,PQEPTR+1               GET PQE, IF ANY
         BZ    SPQEPROC                   IF NONE GO PROCESS SPQE'S
         BAL   11,GETBLOK                 GO GET PQE
         LTR   15,15                      RETRIEVE OK ?
         BZ    PQECNT                     YES, BR TO CHECK COUNT
         MVC   CBNAME,PQECB               ELSE MOVE 'PQE' TO MSG
         BAL   11,CBMSG                   AND PRINT IT
         B     SPQEPROC                   THEN GO PROCESS SPQE'S
PQECNT   L     6,PQECT                    GET CURRENT PQE COUNT
         BCT   6,LPQEOK                   BR, IF MAX NOT REACHED
         MVC   CBLNAME,PQECB              ELSE MOVE NAME TO LP MSG
         BAL   11,LOOPMSG                 AND LINK TO PRINT IT
         B     SPQEPROC                   THEN GO PROCESS SPQE'S
         SPACE 2
* LSQA PQE POINTER IS OK.... NOW SETUP TO FORMAT IT.
         SPACE 2
LPQEOK   ST    6,PQECT                    SAVE LOOP COUNT
         MVC   MYPQE(MYPQEL),0(8)         MOVE PQE TO WORKAREA
         MVI   PATTERN,PPAT               PICK UP PATTERN FOR PQE
         SPACE 2
* GET THE LSQA FBQES.....
         SPACE 2
FBQEPROC L     6,MAXFBQE                  GET FBQE LOOP COUNT AND...
         ST    6,FBQECT                   SAVE IT
FBQELOOP SR    8,8                        CLEAR ACCESS REGISTER
         ICM   8,7,FBQEPTR+1              GET FBQE, IF ANY
         BZ    NPQECK                     BRANCH IF NONE
         CLC   PQEPTR+1(3),FBQEPTR+1      DOES IT POINT TO PQE?
         BZ    NPQECK                     YES, GET OUT
         BAL   11,GETBLOK                 ELSE GO GET FBQE
         LTR   15,15                      RETRIEVE OK ?
         BZ    FBQECNT                    YES, BR TO CHECK COUNT
         MVC   CBNAME,FBQECB              ELSE MOVE 'FBQE' TO MSG
         BAL   11,CBMSG                   AND PRINT MSG
         B     NPQECK                     THEN GO PROCESS NEXT PQE
FBQECNT  L     6,FBQECT                   GET CURRENT FBQE COUNT
         BCT   6,FBQEOK                   BR, IF MAX NOT REACHED
         MVC   CBLNAME,FBQECB             ELSE MOVE NAME TO LP MSG
         BAL   11,LOOPMSG                 AND LINK TO PRINT IT
         B     NPQECK                     THEN GO PROCESS SPQE'S
         SPACE 2
* FBQE IS OK.... NOW FORMAT IT.
         SPACE 2
FBQEOK   ST    6,FBQECT                   SAVE FBQE COUNT
         MVC   MYFBQE(MYFBQEL),0(8)       MOVE FBQE TO WORKA
         OI    PATTERN,FBPAT              INCLUDE FBQE IN PATTERN
         BAL   11,FPROUT                  GO F/P
         MVC   FBQEPTR+1(3),MYFBQE+1      SET UP NEXT FBQE
         MVI   PATTERN,X'00'              INITIALIZE PATTERN
         B     FBQELOOP                   AND GO PROCESS NEXT FBQE
         SPACE 2
* NOW SETUP TO PROCESS NEXT PQE (IF ANY)
         SPACE 2
NPQECK   BAL   11,FPROUT                  GO F/P
         MVC   PQEPTR+1(3),NPQE+1         SETUP POINTER TO NEXT PQE
         B     PQELOOP                    AND GO PROCESS NEXT PQE
         SPACE 2
* NOW GET AND FORMAT THE SPQES FOR LSQA
         SPACE 2
SPQEPROC DS    0H
         BAL   11,BLNKPRNT                SPACE OUTPUT
         MVC   MAXSPQE(CNTL),LSQACNT      CHANGE MAX CTS FOR LSQA
         MVC   SPQEPTR,LSQAPTR            SET FIRST LSQA SPQE
         MVI   SPQEPTR,X'00'              ENSURE FIRST BYTE ZERO
         BAL   7,VSMROUTN                 LINK TO FORMAT BLOCKS
         B     EXIT                       ALL DONE, RETURN TO PRTDMP
         EJECT
*******************************************************************
*        FORMAT TCB BLOCKS ROUTINE
*******************************************************************
         SPACE 3
PRIVTCB  BAL   11,BLNKPRNT                SPACE OUTPUT
         L     7,ADPLBUF                  LOCATE PRINT BUFFER
         MVC   0(L'PRITMSG,7),PRITMSG     MOVE PRIVATE MSG
         BAL   11,MSGSET                  LINK TO PRINT IT
         BAL   11,BLNKPRNT                SPACE OUTPUT
         L     7,ADPLTCB                  GET TCB POINTER
         LA    8,24(,7)                   SET TCBMSS POINTER
         BAL   11,GETBLOK                 RETRIEVE POINTER
         LTR   15,15                      RETRIEVE OK?
         BZ    MSGOOD                     YES, CONTINUE
         MVC   CBNAME,TCBMSSB             ELSE MOVE 'TCBMSSB'
         B     CBMSGEND                   GO PRINT IT AND EXIT
         SPACE 2
* TCBMSS OK... FORMAT MSS BLOCKS...
         SPACE 2
MSGOOD   MVC   MAXSPQE(CNTL),LCLCNT       INITIALIZE LOOP COUNT LIMITS
         MVC   SPQEPTR(4),0(8)            SET TCBMSS SPQE
         MVI   SPQEPTR,X'00'              ENSURE HI BYTE ZERO
         BAL   11,BLNKPRNT                SPACE OUTPUT
         L     7,ADPLBUF                  LOCATE PRINT BUFFER
         MVC   0(L'MSSMSG,7),MSSMSG       MOVE MSS MSG
         BAL   11,MSGSET                  LINK TO PRINT IT
         BAL   11,BLNKPRNT                SPACE OUTPUT
         BAL   7,VSMROUTN                 LINK TO FORMAT VSM BLOCKS
         BAL   11,BLNKPRNT                SPACE OUTPUT
         L     7,ADPLBUF                  LOCATE PRINT BUFFER
         MVC   0(L'UKYSPMSG,7),UKYSPMSG   MOVE UKYSPACE MSG
         BAL   11,MSGSET                  LINK TO PRINT IT
         BAL   11,BLNKPRNT                SPACE OUTPUT
         L     7,0(,1)                    GET TCB POINTER
         LA    8,268(,7)                  GET USER KEY SPACE POINTER
         BAL   11,GETBLOK                 RETREIVE POINTER FROM DUMP
         LTR   15,15                      RETRIEVE OK?
         BZ    UKGOOD                     YES, CONTINUE
         MVC   CBNAME,TCBUKYSP            ELSE MOVE 'TCBUKYSP'
         B     CBMSGEND                   GO PRINT IT AND EXIT
         SPACE 2
* TCBUKYSP OK... FORMAT UKYSP BLOCKS...
         SPACE 2
UKGOOD   MVC   SPQEPTR(4),0(8)            SET UKYSP SPQE
         MVI   SPQEPTR,X'00'              ENSURE HI BYTE ZERO
         BAL   7,VSMROUTN                 LINK TO FORMAT VSM BLOCKS
         BAL   11,BLNKPRNT                SPACE OUTPUT
         L     7,ADPLBUF                  LOCATE PRINT BUFFER
         MVC   0(L'SWAMSG,7),SWAMSG       MOVE SWA MSG
         BAL   11,MSGSET                  LINK TO PRINT IT
         BAL   11,BLNKPRNT                SPACE OUTPUT
         L     7,0(,1)                    GET TCB POINTER
         LA    8,248(,7)                  GET SWA SPQE POINTER
         BAL   11,GETBLOK                 GET SPQE POINTER FROM DUMP
         LTR   15,15                      RETRIEVE OK?
         BZ    SWGOOD                     YES, CONTINUE
         MVC   CBNAME,TCBSWA              ELSE MOVE 'TCBSWA'
         B     CBMSGEND                   GO PRINT IT AND EXIT
         SPACE 2
* TCBSWA OK... FORMAT SWA BLOCKS...
         SPACE 2
SWGOOD   MVC   SPQEPTR(4),0(8)            SET SWA SPQE
         MVI   SPQEPTR,X'00'              ENSURE HI BYTE ZERO
         BAL   7,VSMROUTN                 LINK TO FORMAT VSM BLOCKS
         B     EXIT                       ALL DONE, RETURN TO PRTDMP
         EJECT
********************************************************************
*        COMMON EXIT CODE
********************************************************************
         SPACE 3
CBMSGEND L     7,ADPLBUF                  LOCATE BUFFER
         MVC   0(CBUNAVL,7),CBUNAV        MOVE TERMINATION MSG
         BAL   11,MSGSET                  LINK TO PRINT IT
         SPACE 2
EXIT     BAL   11,BLNKPRNT                SPACE OUTPUT
         L     7,ADPLBUF                  LOCATE PRINT BUFFER
         MVC   0(L'COMPMSG,7),COMPMSG     MOVE COMPLETION MSG
         BAL   11,MSGSET                  LINK TO PRINT IT
         BAL   11,BLNKPRNT                SPACE OUTPUT
         L     13,SAVPTR                  PICK UP PRIOR SAVE AREA
         RETURN (14,12),,RC=0             AND EXIT
         EJECT
********************************************************************
*
*        SUBROUTINE TO FORMAT VSM CONTROL BLOCKS.  THIS ROUTINE WILL
*        FORMAT SPQE'S, DQE'S, AND FQE'S. A PATTERN IS SET UP,
*        DEPENDING ON THE BLOCKS ACTUALLY FOUND, AND THE FORMAT/PRINT
*        ROUTINE (FPROUT) IS CALLED. FPROUT WILL FORMAT THE MOVED
*        VSM BLOCKS, DEPENDING ON THE PATTERN. THE PATTERN IS A
*        BYTE, '000SDF00', TO ALLOW INDEXING TO PRTDMP PATTERN.
*        (S=SPQE, D=DQE, AND F=FQE) THIS ALLOWS A COMMON FORMAT/PRINT
*        ROUTINE TO PRINT THE BLOCKS, REGARDLESS OF WHICH, IF ANY,
*        ARE PRESENT (IF NO BLOCKS WERE GOTTEN, INDEX WILL BE ZERO,
*        AND FPROUT WILL RETURN TO CALLER).
*
******************************************************************
         SPACE 2
VSMROUTN LM    8,10,MAXSPQE               PICK UP MAX COUNTS
         STM   8,10,SPQECT                AND INITIALIZE LOOP COUNTS
* SPQE FORMATTING
SPQELP   SR    8,8                        CLEAR REG FOR INSERT
         ICM   8,7,SPQEPTR+1              GET SPQE POINTER
         BCR   8,7                        RETURN IF NONE
         MVC   DQECT(8),MAXDQE            SET NEW MAX CTS, DQE & FQE
         MVI   PATTERN,SDFPAT             SET PATTERN TO ALL
         BAL   11,GETBLOK                 GO GET SPQE
         LTR   15,15                      RETRIEVE OK ?
         BZ    TESTSCNT                   YES, GO TEST COUNT
         MVC   CBNAME,SPQECB              ELSE MOVE 'SPQE' TO MSG
         BAL   11,CBMSG                   LINK TO PRINT IT
         BR    7                          AND RETURN
TESTSCNT L     6,SPQECT                   PICK UP REMAINING COUNT
         BCT   6,SCNTOK                   BR IF NOT EXCEEDED
         MVC   CBLNAME,SPQECB             ELSE MOVE 'SPQE' TO LP MSG
         BAL   11,LOOPMSG                 LINK TO PRINT IT
         BR    7                          AND RETURN
SCNTOK   ST    6,SPQECT                   STORE DECREMENTED COUNT
         MVC   SPQE(SPQEL),0(8)           MOVE SPQE TO WORKAREA
         TM    FLGSPQE,X'80'              SHARED ?
         BZ    DQEONE                     NO, GO TO DQE PROCESS
         MVI   PATTERN,SPAT               SET TO F/P SPQE ONLY
         BAL   11,FPROUT                  LINK TO PRINT IT
         MVC   SPQEPTR+1(3),DQEPTR+1      SET UP NEXT SPQE
         B     SPQELP                     GO TO SPQE PROCESS
* DQE FORMATTING
DQELP    MVC   FQECT,MAXFQE               NEW DQE, RESET FQE COUNT
         MVI   PATTERN,DFPAT              SAME SPQE, SO D & F ONLY
DQEONE   SR    8,8                        CLEAR FOR INSERT
         ICM   8,7,DQEPTR+1               GET DQE ADDRESS
         BNZ   DQEXIST                    BR IF ONE EXISTS
DQEBAD   NI    PATTERN,SPAT               TURN OFF ALL BUT SPQE
         BAL   11,FPROUT                  AND LINK TO F/PRINT
         MVC   SPQEPTR+1(3),NSPQE+1       SET UP NEXT SPQE
         B     SPQELP                     AND GO PROCESS IT
DQEXIST  BAL   11,GETBLOK                 GO GET DQE
         LTR   15,15                      RETRIEVE OK ?
         BZ    TESTDCNT                   YES, BR TO CHECK COUNT
         MVC   CBNAME,DQECB               ELSE MOVE 'DQE' TO MSG
         BAL   11,CBMSG                   & LINK TO PRINT IT
         B     DQEBAD                     BR OUTPUT & GET NEXT SPQE
TESTDCNT L     6,DQECT                    PICK UP COUNT OF DQE'S
         BCT   6,DCNTOK                   BR IF COUNT NOT EXCEEDED
         MVC   CBLNAME,DQECB              ELSE PUT 'DQE' LOOP MSG
         BAL   11,LOOPMSG                 & LINK TO PRINT IT
         B     DQEBAD                     BR TO F/P & GET NXT SPQE
DCNTOK   ST    6,DQECT                    STORE DECREMENTED COUNT
         MVC   DQE(DQEL),0(8)             MOVE DQE TO WORKAREA
         B     FQEONE                     GO TO PROCESS FQE
* FQE FORMATTING
FQELP    MVI   PATTERN,FPAT               F/P FQE ONLY FOR ADDNL FQE
FQEONE   SR    8,8                        CLEAR REG FOR INSERT
         ICM   8,7,FQEPTR+1               FQE ?
         BNZ   FQEXIST                    YES, BRANCH
FQEBAD   NI    PATTERN,SDPAT              TURN OFF FQE IN PATTERN
         BAL   11,FPROUT                  LINK TO F/P ANY OTHERS
         MVC   DQEPTR+1(3),NDQE+1         SET NEXT DQE, IF ANY
         B     DQELP                      AND BRANCH TO PROCESS
FQEXIST  BAL   11,GETBLOK                 GO GET FQE
         LTR   15,15                      RETRIEVE OK ?
         BZ    TESTFCNT                   YES, BR TO CHECK COUNT
         MVC   CBNAME,FQECB               ELSE PUT 'FQE' IN MSG
         BAL   11,CBMSG                   AND LINK TO PRINT IT
         B     FQEBAD                     BR F/P & GET NXT DQE
TESTFCNT L     6,FQECT                    PICK UP FQE COUNT
         BCT   6,FCNTOK                   BR IF NOT EXCEEDED
         MVC   CBLNAME,FQECB              ELSE MOVE 'FQE' TO LOOP MSG
         BAL   11,LOOPMSG                 LINK TO PRINT IT,
         B     FQEBAD                     BR TO F/P & GET NXT DQE
FCNTOK   ST    6,FQECT                    STORE DECREMENTED COUNT
         CLI   SUBPOOL,X'FF'              SUBPOOL 255 (SHORT FQE)?
         BE    FQESHORT                   YES, PROCESS SHORT FQE
         B     FQELONG                    PROCESS LONG FQE
FQESHORT MVC   FQE(SFQEL),0(8)            MOVE FQE TO WORK AREA
         L     8,FQEPTR                   GET FQE ADDRESS
         LA    8,8(,8)                    ADD 8 TO GET TOP OF AREA
         STCM  8,7,HIADDR+1               SET TOP OF FREE AREA
         B     FQEVALID                   PRINT BLOCKS
FQELONG  MVC   FQE(LFQEL),0(8)            MOVE FQE TO WORKAREA
FQEVALID BAL   11,FPROUT                  LINK TO FORMAT/PRINT
         MVC   FQEPTR+1(3),NFQE           SET NXT FQE, IF ANY
         B     FQELP                      AND GO PROCESS
         EJECT
******************************************************************
*
*        FORMAT/PRINT ROUTINE. SETS UP CORRECT PATTERN FOR AMDPRDMP
*        FORMAT ROUTINE, THEN CALLS THE FORMAT ROUTINE, AND, ON
*        RETURN, CALLS THE PRINT ROUTINE OF AMDPRDMP.  THE MAIN
*        INPUT IS THE PATTERN MASK, WHICH HAS BEEN SET BY THE VSM
*        ROUTINE.  IF YOU WISH TO CHANGE THE PRINTED OUTPUT IN
*        ANY WAY, YOU MAY MODIFY THE PRINT PATTERNS.  NOTE THAT
*        THERE ARE ACTUALLY ELEVEN PATTERNS, AS FOLLOWS:
*
*        SDFPATN--PATTERN USED TO OUTPUT SPQE, DQE, & FQE
*        DFPATN---USED ON SUBSEQUENT DQE'S (SPQE PRINTED ON FIRST)
*        FPATN----USED FOR SUBSEQUENT FQE'S
*        SDPATN---USED WHEN NO FQE'S ON FIRST DQE
*        SPATN----USED WHEN NO DQE'S ON SPQE, OR SHARED SPQE
*        DPATN----USED ON SUBSEQUENT DQE WITH NO FQE'S
*        PPATN----USED FOR PQE'S
*        FBPATN---USED FOR FBQE'S
*        PFBPATN--USED FOR PQE'S AND FBQE
*        GPATN----USED FOR GDA (NOT USED IN THIS PROGRAM)
*        LPATN----USED FOR LDA
*
*        TEST IS MADE FOR ZERO PATTERN, AND FPROUT WILL RETURN, IF
*        SO. (NO VSM CONTROL BLOCKS TO BE FORMATTED.)
*
******************************************************************
         SPACE  2
FPROUT   SR    5,5                        CLEAR INDEX REG
         ICM   5,1,PATTERN                GET AND CHECK PATTERN MASK
         BCR   8,11                       RETURN IF ZERO
         LA    6,PATTAB                   POINT TO TABLE OF ADCON'S
         L     0,0(5,6)                   USE INDEX TO GET ENTRY
FRMTPRNT L     15,ADPLFRMT                GET EP PRTDMP FORMAT
         BALR   14,15                     LINK TO IT, R0 = PATTERN
BLNKPRNT L     15,ADPLPRNT                GET PRINT ROUTINE E.P.
         BALR  14,15                      LINK TO IT
         BR    11                         RETURN TO CALLER
         EJECT
******************************************************************
*
*        SUBROUTINE TO GET A DUMPED PAGE.  USES REGISTERS 0,8,9,
*        14, AND 15.  INPUT IN REG 8 IS THE ADDRESS OF BLOCK TO BE
*        GOTTEN.  THIS ROUTINE SETS UP FOR PAGE ACCESS, AND, ON
*        RETURN, SETS REG 8 TO CORE LOCATION OF RETRIEVED CONTROL
*        BLOCK.  RETURN CODE IS PASSED IN REG 15 TO CALLER.
*        RC = 0, IF BLOCK SUCCESSFULLY RETRIEVED.
*
******************************************************************
         SPACE  2
GETBLOK  SRDL  8,12(0)                    SET PAGE ADDRESS
         SLL   8,12(0)                     IN REGISTER 8
         SRL   9,20(0)                     DISPLACEMENT IN REG 9
         LR    0,8                        SET 0 FOR ACCESS
         L     15,ADPLMEMA                GET ACCESS ROUTINE E.P.
         BALR  14,15                      AND GO GET THE PAGE
         LR    8,0                        TRANSFER CORE LOCATION
         AR    8,9                        ADD DISPLACEMENT BACK
         BR    11                         AND RETURN, REG 8 SET
         SPACE  2
*        MESSAGE ROUTINES
         SPACE  2
LOOPMSG  L     6,ADPLBUF                  GET PRINT BUFFER
         MVC   0(CBLPMSL,6),CBLOOPMS      MOVE 'POSSIBLE LOOP' MSG
         B     MSGSET                     BR TO OUTPUT MSG
CBMSG    L     6,ADPLBUF                  GET PRINT BUFFER
         MVC   0(CBUAL,6),CBUNAV          MOVE 'UNAVAILABLE' MSG
MSGSET   L     15,ADPLPRNT                GET PRINT ROUTINE E.P.
         BALR  14,15                      LINK TO IT
         BR    11                         AND THEN RETURN
         EJECT
***********************************************************************
*        DATA AREAS                                                   *
***********************************************************************
         SPACE 2
VSMDATA  DS    0F
ASCBPTR  DC    F'0'
         SPACE
* POINTER TO AND COPY OF LDA
LDAPTR   DC    F'0'
MYLDA    EQU   *                          MOVED LDA FIELDS (PARTIAL)
PASCBSV  DC    F'0'                         LDA +4
PQEPTR   DC    F'0'                         LDA +8
LDATCB   DC    F'0'                         LDA +C
LDARQSTA DC    F'0'                         LDA +10
MYLDAL1  EQU   *-MYLDA
LSQAPTR  DC    F'0'                         LDA +5B8
VVREGSZ  DC    F'0'                         LDA +5BC
CURRGNTP DC    F'0'                         LDA +5C0
LDASRPQE DC    F'0'                         LDA +5C4
LDARSVPT DC    F'0'                         LDA +5C8
LDALIMIT DC    F'0'                         LDA +5CC
LCLCELL  DC    F'0'                         LDA +5D0
LCLCELCT DC    F'0'                         LDA +5C4
MYLDAL2  EQU   *-MYLDA-MYLDAL1
         SPACE
* COPY OF PQE
MYPQE    EQU   *                          MOVED PQE
FBQEPTR  DC    F'0'
         DS    F
NPQE     DC    F'0'
         DS    5F
MYPQEL   EQU   *-MYPQE
         SPACE
* COPY OF FBQE
MYFBQE   DS    4F'0'                      MOVED FBQE
MYFBQEL  EQU   *-MYFBQE
         SPACE
* POINTER TO AND COPY OF SPQE
SPQEPTR  DC    F'0'
SPQE     EQU   *                          MOVED SPQE (1ST THREE WORDS)
NSPQE    DC    F'0'
DQEPTR   DC    F'0'
FLGSPQE  DC    XL1'00'
RSVDSPQE DC    XL1'00'
SUBPOOL  DC    XL1'00'
KEY      DC    XL1'00'
SPQEL    EQU   *-SPQE
         SPACE
* COPY OF DQE
DQE      EQU   *                          MOVED DQE
FQEPTR   DC    F'0'
NDQE     DC    F'0'
HIARCH   DC    XL1'00'
BLKADDR  DC    XL3'00'
BLKLNGTH DC    F'0'
DQEL     EQU   *-DQE
         SPACE
* COPY OF FQE
FQE      EQU   *                          MOVED FQE
FLGFQE   DC    XL1'00'
NFQE     DC    XL3'00'
FREEBYTE DC    F'0'
SFQEL    EQU   *-FQE
HIADDR   DC    F'0'
LFQEL    EQU   *-FQE
         SPACE  3
*        FOLLOWING IS PATTERN MASK, SET BY CALLERS OF FPROUT.
         SPACE
PATTERN  DC    XL1'1C'                    INITIALIZED TO SDF
         EJECT
***********************************************************************
*        WORKAREA                                                     *
***********************************************************************
         SPACE 2
PVTWORK  DS    0F                         ALLIGN TO WORD
PMAPSAV  DS    18F
SAVPTR   DS    1F
         SPACE
LSQACNT  DC    F'5'                       LSQA  MAX SPQE COUNT
         DC    F'500'                           MAX DQE COUNT
         DC    F'900'                           MAX FQE COUNT
         SPACE
LCLCNT   DC    F'100'                     LOCAL MAX SPQE COUNT
         DC    F'500'                           MAX DQE COUNT
         DC    F'900'                           MAX FQE COUNT
         SPACE
MAXSPQE  DC    F'100'                     MAX SPQE COUNT
MAXDQE   DC    F'500'                     MAX DQE COUNT
MAXFQE   DC    F'900'                     MAX FQE COUNT
MAXPQE   DC    F'2'                       MAX PQE COUNT
MAXFBQE  DC    F'50'                      MAX FBQE COUNT
CNTL     EQU   *-MAXSPQE
         SPACE
SPQECT   DS    1F                         OPERATIONAL SPQE COUNT
DQECT    DS    1F                         OPERATIONAL DQE COUNT
FQECT    DS    1F                         OPERATIONAL FQE COUNT
PQECT    DS    1F                         OPERATIONAL PQE COUNT
FBQECT   DS    1F                         OPERATIONAL FBQE COUNT
         EJECT
***********************************************************************
*        MESSAGES                                                     *
***********************************************************************
         SPACE  2
PRILMSG  DC    C'*** PRIVATE LSQA VSM BLOCKS ***'
PRITMSG  DC    C'*** PRIVATE TCB VSM BLOCKS ***'
MSSMSG   DC    C'*** MSS VSM BLOCKS  ***'
SWAMSG   DC    C'*** SWA VSM BLOCKS  ***'
UKYSPMSG DC    C'*** UKYSP VSM BLOCKS ***'
PRIVMSG  DC    C'*** PRIVATE VSM BLOCKS ***'
COMPMSG  DC    C'*** PRIVATE MAP COMPLETE ***'
         SPACE 3
CBUNAV   DC    C'UNABLE TO ACCESS '
CBNAME   DC    CL8'BLOCK'
CBUAL    EQU   *-CBUNAV
         DC    C' PRIVMAP TERMINATING   '
CBUNAVL  EQU   *-CBUNAV
         SPACE
CBLOOPMS DC    C'POSSIBLE LOOP IN '
CBLNAME  DC    CL8'BLOCK'
CBLPMSL  EQU   *-CBLOOPMS
         SPACE 3
* LABELS TO REPLACE BLOCK IN ABOVE MESSAGES
         SPACE
CVTCB    DC    CL8'CVT'
GDACB    DC    CL8'GDA'
PQECB    DC    CL8'PQE'
FBQECB   DC    CL8'FBQE'
SPQECB   DC    CL8'SPQE'
DQECB    DC    CL8'DQE'
FQECB    DC    CL8'FQE'
TCBMSSB  DC    CL8'TCBMSSB'
TCBUKYSP DC    CL8'TCBUKYSP'
TCBSWA   DC    CL8'TCBSWA'
ASVTCB   DC    CL8'ASVTENTY'
CVTASVT  DC    CL8'CVTASVT'
ASIDCB   DC    CL8'ASID'
ASCBCB   DC    CL8'ASCB'
ASLDCB   DC    CL8'ASCBLDA'
LDACB    DC    CL8'LDA'
         EJECT
***********************************************************************
*        PATTERN TABLE                                                *
***********************************************************************
         SPACE 2
*        PATTERN MASK EQUATES USED BY CALLERS TO FPROUT
         SPACE
SDFPAT   EQU   X'1C'                      SPQE, DQE, AND FQE
DFPAT    EQU   X'0C'                      DQE AND FQE
FPAT     EQU   X'04'                      FQE ONLY
SDPAT    EQU   X'18'                      SPQE AND DQE
DPAT     EQU   X'08'                      DQE ONLY
SPAT     EQU   X'10'                      SPQE ONLY
PPAT     EQU   X'28'                      PQE ONLY
FBPAT    EQU   X'24'                      FBQE ONLY
PFBPAT   EQU   X'2C'                      PQE AND FBQE
GPAT     EQU   X'20'                      GDA
LPAT     EQU   X'30'                      LDA
FULLPAT  EQU   X'1C'                      = SDFPAT, AT THIS TIME
         SPACE
*        NOTE THAT X'14' PATTERN NOT PRESENT.  AN SPQE AND FQE
*        WITHOUT A DQE WOULD NOT OCCUR.
         SPACE  2
         DS    0F
         SPACE
*        ADCONS TO DIFFERENT FORMAT PATTERNS
         SPACE
PATTAB   DC    AL4(SDFPATN)         0     SHOULD NEVER BE USED
         DC    AL4(FPATN)           4     FQE PATTERN POINTER
         DC    AL4(DPATN)           8     DQE PATTERN POINTER
         DC    AL4(DFPATN)          C     DQE/FQE PATTERN POINTER
         DC    AL4(SPATN)          10     SPQE PATTERN POINTER
         DC    AL4(SDFPATN)        14     SHOULD NEVER BE USED
         DC    AL4(SDPATN)         18     SPQE/DQE PATTERN POINTER
         DC    AL4(SDFPATN)        1C     SPQE/DQE/FQE PATTERN POINTER
         DC    AL4(GPATN)          20     GDA PATTERN POINTER
*                                         (NOT USED BY THIS PROGRAM)
         DC    AL4(FBPATN)         24     FBQE PATTERN POINTER
         DC    AL4(PPATN)          28     PQE PATTERN POINTER
         DC    AL4(PFBPATN)        2C     PQE/FBQE PATTERN POINTER
         DC    AL4(LPATN)          30     LDA PATTERN POINTER
         EJECT
*        THESE ARE THE ACTUAL PATTERNS USED TO FORMAT THE VSM DATA.
*        THE DATA TO BE FORMATTED WILL BE IN FIELDS IN 'VSMDATA'.
*        VSMDATA LABELS MAY HAVE TO BE CHANGED, AND/OR THE AREA
*        RECODED, IF THE CONTROL BLOCKS CHANGE.  DSECT LAYOUT WAS
*        NOT USED, AS USING STATEMENTS WOULD HAVE 'TIED UP' THE
*        REGISTERS.  EACH COMPLETE PATTERN ENDS WITH A FULL WORD OF
*        ZEROES, AND ALTERNATE LABELS ARE USED TO FORMAT PARTIAL
*        LINES.  (EXAMPLE: DFPATN)
*
*
         SPACE  2
SDFPATN  DS    0F
         DC    X'1F320006'                SPQE XXXXXX (0/6)
         DC    AL4(SPQELBL)
         DC    AL4(SPQEPTR+1)
         DC    X'1D300E14'                FLAG XX (14/20)
         DC    AL4(FLGSPQE)
         DC    X'1D10181C'                SP XX (24/28)
         DC    AL4(SUBPOOL)
         DC    X'15202025'                KEY XX (32/37)
DFPATN   DC    X'1F22292E'                DQE XXXXXX (41/46)
         DC    AL4(DQELBL)
         DC    AL4(DQEPTR+1)
         DC    X'1D22363B'                BLK XXXXXX (54/59)
         DC    AL4(BLKADDR)
         DC    X'1D224348'                LNG XXXXXX (67/72)
         DC    AL4(BLKLNGTH+1)
FPATN    DC    X'1F225055'                FQE XXXXXX (80/85)
         DC    AL4(FQELBL)
         DC    AL4(FQEPTR+1)
         DC    X'1D525D65'                HI/ADR XXXXXX (93/101)
         DC    AL4(HIADDR+1)
         DC    X'1D126D71'                LN XXXXXX (109/113)
         DC    AL4(FREEBYTE+1)
         DC    F'0'
SDPATN   DC    X'1F320006'                SPQE XXXXXX (0/6)
         DC    AL4(SPQELBL)
         DC    AL4(SPQEPTR+1)
         DC    X'1D300E14'                FLAG XX (14/20)
         DC    AL4(FLGSPQE)
         DC    X'1D10181C'                SP XX (24/28)
         DC    AL4(SUBPOOL)
         DC    X'15202025'                KEY XX (32/37)
DPATN    DC    X'1F22292E'                DQE XXXXXX (41/46)
         DC    AL4(DQELBL)
         DC    AL4(DQEPTR+1)
         DC    X'1D22363B'                BLK XXXXXX (54/59)
         DC    AL4(BLKADDR)
         DC    X'1D224348'                LNG XXXXXX (67/72)
         DC    AL4(BLKLNGTH+1)
         DC    F'0'
SPATN    DC    X'1F320006'                SPQE XXXXXX (0/6)
         DC    AL4(SPQELBL)
         DC    AL4(SPQEPTR+1)
         DC    X'1D300E14'                FLAG XX (14/20)
         DC    AL4(FLGSPQE)
         DC    X'1D10181C'                SP XX (24/28)
         DC    AL4(SUBPOOL)
         DC    X'15202025'                KEY XX (32/37)
         DC    F'0'
PPATN    DS    0F
         DC    X'1F220005'                PQE  XXXXXX (0/5)
         DC    AL4(PQELBL)
         DC    AL4(PQEPTR+1)
         DC    X'1D420D14'                CSTRT  XXXXXX (13/20)
         DC    AL4(MYPQE+25)
         DC    X'1D421C23'                CSIZE  XXXXXX (28/35)
         DC    AL4(MYPQE+21)
         DC    F'0'
PFBPATN  DS    0F
         DC    X'1F220005'                PQE  XXXXXX (0/5)
         DC    AL4(PQELBL)
         DC    AL4(PQEPTR+1)
         DC    X'1D420D14'                CSTRT  XXXXXX (13/20)
         DC    AL4(MYPQE+25)
         DC    X'1D421C23'                CSIZE  XXXXXX (28/35)
         DC    AL4(MYPQE+21)
FBPATN   DC    X'1F322B31'                FBQE  XXXXXX (43/49)
         DC    AL4(FBQELBL)
         DC    AL4(FBQEPTR+1)
         DC    X'1D32393F'                AREA  XXXXXX (57/63)
         DC    AL4(MYFBQE+13)
         DC    X'1D22474C'                SZE XXXXXX (71/76)
         DC    AL4(MYFBQE+9)
         DC    F'0'
GPATN    DS    0F
*        AGO   .GDA
         AGO   .NOGDA
.GDA     ANOP
         DC    X'1F220005'                GDA  XXXXXX (0/5)
         DC    AL4(GDALBL)
         DC    AL4(GDAPTR+1)
         DC    X'1D300C12'                FLAG  XX (12/18)
         DC    AL4(MYGDA)
         DC    X'1D62161F'                CSA PQE  XXXXXX (22/31)
         DC    AL4(MYGDA+9)
         DC    X'1D42272E'                PSTRT  XXXXXX (39/46)
         DC    AL4(MYGDA+17)
         DC    X'1D32363C'                PSZE  XXXXXX (54/60)
         DC    AL4(MYGDA+21)
         DC    X'1D72444E'                SQA SPQE XXXXXX (68/78)
         DC    AL4(MYGDA+25)
         DC    X'1D725660'                FREE SQA  XXXXXX (86/96)
         DC    AL4(MYGDA+29)
         DC    X'1D726872'                CSA SPQE  XXXXXX (104/114)
         DC    AL4(MYGDA+53)
.NOGDA   ANOP
         DC    F'0'
LPATN    DS    0F
         DC    X'1F220004'                LDA  XXXXXX (0/4)
         DC    AL4(LDALBL)
         DC    AL4(LDAPTR+1)
         DC    X'1D320C11'                ASCB XXXXXX (12/17)
         DC    AL4(PASCBSV+1)
         DC    X'1D22191D'                PQE XXXXXX (25/29)
         DC    AL4(PQEPTR+1)
         DC    X'1D222529'                TCB XXXXXX (37/41)
         DC    AL4(LDATCB+1)
         DC    X'1D433137'                RQSTA XXXXXXXX (49/55)
         DC    AL4(LDARQSTA)
         DC    X'1D324146'                LSQA XXXXXX (65/70)
         DC    AL4(LSQAPTR+1)
         DC    X'1D624E56'                VVREGSZ XXXXXX (78/86)
         DC    AL4(VVREGSZ+1)
         DC    X'1D425E64'                RGNTP XXXXXX (94/100)
         DC    AL4(CURRGNTP+1)
         DC    X'1D426C72'                LIMIT XXXXXX (108/114)
         DC    AL4(LDALIMIT+1)
         DC    F'0'
         SPACE  2
*        FOLLOWING ARE LABELS FOR AMDPRDMP FORMAT ROUTINE.
         SPACE
GDALBL   DC    C'GDAFLAGCSA PQEPSTRTPSZESQA SPQEFREE SQACSA SPQE'
LDALBL   DC    C'LDAASCBPQETCBRQSTALSQAVVREGSZRGNTPLIMIT'
PQELBL   DC    C'PQECSTRTCSIZE'
FBQELBL  DC    C'FBQEAREASZE'
SPQELBL  DC    C'SPQEFLAGSPKEY'
DQELBL   DC    C'DQEBLKLNG'
FQELBL   DC    C'FQEHI/ADRLN'
         EJECT
*        DSECTS FOR LABEL REFERENCES FOR ADPL
         SPACE
         IHAABDPL
         SPACE 3
         END
