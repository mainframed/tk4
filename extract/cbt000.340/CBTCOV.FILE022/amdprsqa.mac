AMDPRSQA TITLE 'AMDAHL AMDPRDMP SQA MAP USER PROGRAM.'
         MACRO
         REGISTER
         LCLA  &N
.LOOP    ANOP
R&N      EQU   &N
&N       SETA  &N+1
         AIF   (&N LE 15).LOOP
         MEND
         SPACE 1
         MACRO
&L       PRINTBUF &TEXT
         LCLC  &L2
&L2      SETC  '&L'
         AIF   ('&TEXT' EQ '').NOMOVE
&L2      L     R15,ADPLBUF         GET BUFFER ADDRESS.
         MVC   0(121,R15),BLANKS   BLANK OUT PREVIOUS JUNK.
         MVC   0(L'&TEXT,R15),&TEXT MOVE ITEM TO BUF'R.
&L2      SETC  ''
.NOMOVE  ANOP
&L2      LA    R1,ABDPL            ADDRESS PARAMETER LIST.
         L     R15,ADPLPRNT        EXTRACT PRINT ROUTINE ADDR.
         BALR  R14,R15             BRANCH TO PRINT SUBROUTINE.
         MEND
         SPACE 1
         MACRO
&LABEL   LOAD  &RESULT,&INPUT,&BADRC=
&LABEL   LA    R0,&INPUT           ADDRESS INPUT AREA.
         LA    R1,ABDPL            ADDRESS PARAMETER LIST.
         L     R15,ADPLMEMA        LOAD MEMORY ROUTINE ADDRESS.
         BALR  R14,R15             BRANCH TO MEMORY SUBROUTINE.
         LTR   R15,R15             TEST RETURN CODE.
         BNZ   &BADRC              NON-ZERO; BRANCH TO EXIT.
         LR    R1,R0               LOAD RESULT POINTER INTO R1.
         ICM   &RESULT,B'1111',0(R1) LOAD AND TEST ACQUIRED STORAGE.
         MEND
         SPACE 1
         MACRO
&L       FORMAT &PATTERN,&BADRC=
&L       LA    R0,&PATTERN         ADDRESS FORMAT PATTERN.
         LA    R1,ABDPL            ADDRESS PARAMETER LIST.
         L     R15,ADPLFRMT        EXTRACT FORMAT ROUTINE ADDR.
         BALR  R14,R15             BRANCH TO FORMAT SUBROUTINE.
         AIF   ('&BADRC' EQ '').NORC
         LTR   R15,R15             TEST RETURN CODE.
         BNZ   &BADRC              NON-ZERO, TAKE ABNORMAL EXIT.
.NORC    ANOP
         MEND
         SPACE 1
         MACRO
&L       PACKIT &FIELD,&BUFPOS=
&L       LA    R1,&FIELD           ADDRESS OUTPUT WORD.
         LA    R15,&BUFPOS         LOAD BUFFER POSITION OF INPUT.
         BAL   R14,PACKIT          BRANCH TO CONVERSION ROUTINE.
         MEND
         SPACE 1
         MACRO
&L       UNPACKIT &REG,&BUFPOS=
&L       ST    &REG,$WORK          SAVE VALUE IN WORK AREA.
         LA    R1,&BUFPOS          GET BUFFER OFFSET.
         BAL   R14,UNPACKIT        BRANCH TO CONVERSION ROUTINE.
         MEND
         EJECT
***********************************************************************
*                                                                     *
*                         AMDPRSQA                                    *
*                                                                     *
*     THIS PROGRAM IS DESIGNED TO EXECUTE AS A USER EXIT TO THE       *
*     MVS AMDPRDMP SERVICE AID OR IPCS VERB EXIT.  ITS FUNCTION       *
*     IS TO FORMAT VARIOUS SQA-RELATED CONTROL BLOCKS BASED ON        *
*     USER-SUPPLIED PARAMETERS.                                       *
*                                                                     *
*     THE PROGRAM IS EXECUTED WHENEVER THE AMDPRDMP VERB "MAPSQA"     *
*     IS ENCOUNTERED IN THE AMDPRDMP SYSIN FILE.  IN ORDER TO         *
*     RECOGNIZE THE "MAPSQA" COMMAND, A USER ENTRY MUST BE MADE IN    *
*     THE AMDPRECT USER EXIT MODULE.  APPENDIX "C" OF THE "OS/VS2     *
*     S.P.L.:  SERVICE AIDS" MANUAL DESCRIBES HOW TO PERFORM THIS     *
*     FUNCTION.                                                       *
*                                                                     *
*     THE PROGRAM MAY ALSO BE EXECUTED AS AN IPCS VERB EXIT BY        *
*     SPECIFYING THE LOAD MODULE NAME "AMDPRSQA" AS THE OPERAND       *
*     OF THE "VERBEXIT" SUBCOMMAND.                                   *
*                                                                     *
*     THE USER MAY SPECIFY THE CERTAIN OPTIONS ON THE "MAPCSA" VERB   *
*     STATEMENT.  THE MEANINGS ARE AS FOLLOWS:                        *
*          SPQE - FORMAT ALL SPQES POINTED TO BY GDA SPQE POINTER.    *
*          DQE  - FORMAT ALL DQES UNDER SPQES (SPQE OPTION ASSUMED).  *
*          FQE  - FORMAT ALL FQES UNDER THE DQES (THE DQE AND SPQE    *
*                 OPTIONS ARE ASSUMED).                               *
*               - (NULL OPERAND) FORMAT ALL OF THE ABOVE              *
*                                                                     *
*     THIS PROGRAM FOLLOWS ALL CONVENTIONS SPECIFIED IN THE ABOVE     *
*     MENTIONED MANUAL.  IT IS REENTRANT AND MAY BE PLACED IN LPA     *
*     TO IMPROVE PERFORMANCE (IF YOU'RE HAVING A WHOLE LOT OF SQA     *
*     PROBLEMS).  ELSE, IT MAY BE PLACED IN LINKLIB OR A USER'S       *
*     STEP LIBRARY.                                                   *
*                                                                     *
***********************************************************************
         EJECT
         REGISTER
         EJECT
***********************************************************************
*                                                                     *
*        PERFORM BASIC HOUSEKEEPING.  ACQUIRE USER-DEPENDENT AREA.    *
*                                                                     *
***********************************************************************
         SPACE 1
AMDPRSQA CSECT ,                   ESTABLISH PROGRAM ENTRY POINT.
         SAVE  (14,12),,AMDPRSQA_V03M00_&SYSDATE_&SYSTIME_COPYRIGHT_198*
               5_AMDAHL_CORP._SE_TOOLS_SETT010_AMDIPCSE
         LR    R12,R15             LOAD PROGRAM BASE.
         USING AMDPRSQA,R12        MAKE CODE ADDRESSABLE.
         LR    R10,R1              PRESERVE PARAMETER REGISTER.
         USING ABDPL,R10           MAKE PARAMETER DSECT ADDRESSABLE.
         LA    R0,$LENGTH          GET LENGTH OF REENTRANT DSECT.
         ICM   R0,B'1000',ADPLSBPL INSERT PRDMP SUPPLIED SUBPOOL.
         GETMAIN R,LV=(0)          GETMAIN REENTRANT AREA.
         LR    R2,R1               LOAD ADDRESS IN EVEN REGISTER.
         LA    R3,$LENGTH          GET LENGTH TO ZERO.
         XR    R5,R5               SET FILL CHARACTER.
         MVCL  R2,R4               ZERO THE REENTRANT AREA.
         LR    R11,R1              LOAD REENTRANT BASE REGISTER.
         USING $DSECT,R11          MAKE AREA ADDRESSABLE.
         ST    R13,$SAVE+4         FORWARD CHAIN SAVE AREAS.
         LR    R2,R13              HOLD OLD SAVE ADDRESS.
         LA    R13,$SAVE           ADDRESS NEW SAVE AREA.
         ST    R13,8(,R2)          BACK CHAIN SAVE AREAS.
         EJECT
***********************************************************************
*                                                                     *
*        IF DUMP IS FROM AN XA-MODE ENVIRONMENT, TELL THE USER OF     *
*        THE GLORIES OF IBM'S VSMDATA EXIT AND RETURN.                *
*                                                                     *
***********************************************************************
         SPACE 1
         ICM   R2,B'1111',ADPLCVT  GET CVT ADDRESS.
         BZ    BADCVT              NONE TO BE FOUND, BARF-OUT.
         LOAD  R3,CVTDCB(,R2),BADRC=BADCVT TEST LOGREC DCB ADDRESS.
         BNM   MODE370             HIGH BIT OFF, 370-MODE.
         SPACE 1
         PRINTBUF XAMSG1           TELL USER WHERE HE'S COMING FROM.
         PRINTBUF XAMSG2           TELL HIM THE AMDPRDMP OPTION.
         PRINTBUF XAMSG3           TELL HIM THE IPCS OPTION.
         XR    R2,R2               ZERO THE RETURN CODE REGISTER.
         B     NOENDMSG            RETURN WITH NO FURTHER ADIEU.
         EJECT
***********************************************************************
*                                                                     *
*        FORMAT THE GLOBAL DATA AREA AND EXTRACT A FEW ADDRESSES.     *
*                                                                     *
***********************************************************************
         SPACE 1
MODE370  DS    0H
         PRINTBUF TITLE            OUTPUT THE TITLE LINE.
         PRINTBUF ,                AND A BLANK LINE.
         SPACE 1
         BAL   R14,SCANOPS         SCAN THE USER VERB OPERANDS.
         SPACE 1
         L     R2,ADPLCVT          GET CVT ADDRESS.
         LOAD  R1,CVTGDA(,R2),BADRC=BADCVT GET GDA ADDRESS.
         BZ    BADGDA              ZERO GDA POINTER, CAN'T CONTINUE.
         ST    R1,$@GDA            SAVE GDA ADDRESS.
         SPACE 1
         MVC   $FORMAT1,PATTERN1   MOVE FORMAT PATTERN TO REENT AREA.
         LA    R2,$@GDA            ADDRESS GDA POINTER.
         ST    R2,$DATA1           SAVE IN FORMAT LIST.
         LA    R3,GDATEXT0         ADDRESS GDA HEADER LABEL.
         ST    R3,$TEXT1           SAVE IN FORMAT LIST.
         ST    R1,$DATA2           SAVE GDA DUMP ADDR. IN FMT. LIST.
         LA    R3,GDATEXT1         ADDRESS GDA LABELS.
         ST    R3,$TEXT2           SAVE IN FORMAT LIST.
         FORMAT $FORMAT1,BADRC=BADGDA FORMAT THE LINE.
         PRINTBUF ,                PRINT THE BUFFER.
         SPACE 1
         L     R2,$@GDA            GET ORIGINAL GDA ADDRESS.
         LA    R2,16(,R2)          INCREMENT BY 4 WORDS.
         ST    R2,$DATA2           SAVE IN FORMAT LIST.
         LA    R3,GDATEXT2         GET 2ND LINE OF LABELS.
         ST    R3,$TEXT2           SAVE IN FORMAT LIST.
         FORMAT $FORMAT2,BADRC=BADGDA FORMAT THE LINE.
         PACKIT $@SPQE,BUFPOS=69   EXTRACT 1ST SPQE ADDR.
         PRINTBUF ,                AND PRINT THE BUFFER.
         SPACE 1
         L     R2,$@GDA            GET ORIGINAL GDA ADDRESS.
         LA    R2,32(,R2)          INCREMENT BY 8 WORDS.
         ST    R2,$DATA2           SAVE IN FORMAT LIST.
         LA    R3,GDATEXT3         GET 3RD LINE OF LABELS.
         ST    R3,$TEXT2           SAVE IN FORMAT LIST.
         FORMAT $FORMAT2,BADRC=BADGDA FORMAT THE LINE.
         PRINTBUF ,                AND PRINT THE BUFFER.
         SPACE 1
         L     R2,$@GDA            GET ORIGINAL GDA ADDRESS.
         LA    R2,48(,R2)          INCREMENT BY 12 WORDS.
         ST    R2,$DATA2           SAVE IN FORMAT LIST.
         LA    R3,GDATEXT4         GET 4TH LINE OF LABELS.
         ST    R3,$TEXT2           SAVE IN FORMAT LIST.
         FORMAT $FORMAT2,BADRC=BADGDA FORMAT THE LINE.
         PRINTBUF ,                AND WRITE THE BUFFER.
         EJECT
***********************************************************************
*                                                                     *
*        IF SPQE FORMATTING REQUESTED, THEN DO IT.  ELSE WE'RE DONE.  *
*                                                                     *
***********************************************************************
         SPACE 1
TRYSPQE  DS    0H
         TM    $OPFLAGS,$SPQE      SPQES REQUESTED?
         BNO   RETURN              NO, WE'RE THROUGH.
SPQELOOP DS    0H
         PRINTBUF ,                SEPARATE WITH A BLANK LINE.
         ICM   R1,B'1111',$@SPQE   GET NEXT SPQE ADDRESS.
         BZ    RETURN              NONE TO BE HAD, WE'RE DONE.
         LA    R2,$@SPQE           ADDRESS SAVED SPQE ADDRESS.
         ST    R2,$DATA1           SAVE IN FORMAT LIST.
         LA    R3,SPQETXT0         ADDRESS SPQE HEADER.
         ST    R3,$TEXT1           SAVE IN FORMAT LIST.
         ST    R1,$DATA2           SAVE SPQE ADDRESS IN FORMAT LIST.
         LA    R3,SPQETXT1         ADDRESS SPQE LABELS.
         ST    R3,$TEXT2           SAVE IN FORMAT LIST.
         FORMAT $FORMAT1,BADRC=BADSPQE FORMAT THE LINE.
         L     R4,ADPLBUF          GET BUFFER ADDRESS.
         MVC   100(L'SPQEMSG,R4),SPQEMSG MOVE IN SPECIAL TEXT.
         PACKIT $@SP,BUFPOS=73     EXTRACT SUBPOOL.
         SLR   R1,R1               ZONK.
         IC    R1,$@SP             INSERT SUBPOOL NUMBER.
         CVD   R1,$DOUBLE          CONVERT IT TO DECIMAL.
         UNPK  104(3,R4),$DOUBLE   UNPACK IT TO PRINT BUFFER.
         OI    106(R4),X'F0'       CORRECT SUBPOOL SIGN.
         MVC   113(1,R4),75(R4)    MOVE IN KEY.
         PACKIT $@SPQE,BUFPOS=29   EXTRACT NEXT SPQE ADDRESS.
         PACKIT $@DQE,BUFPOS=49    EXTRACT 1ST DQE ADDRESS.
         PACKIT $SPQEFLG,BUFPOS=69 EXTRACT SPQE FLAG WORD.
         PRINTBUF ,                AND WRITE THE BUFFER.
         BAL   R7,TRYDQE           SEE IF DQE FORMATTING REQUESTED.
         TM    $SPQEFLG,LASTSPQE   LAST ONE ON CHAIN?
         BNO   SPQELOOP            NO, CONTINUE WITH LOOP
         B     RETURN              YES, WE'RE DONE WITH EXIT.
         EJECT
***********************************************************************
*                                                                     *
*     IF DQE PROCESSING REQUESTED, DO IT.  ELSE, RETURN TO SPQE'S.    *
*                                                                     *
***********************************************************************
         SPACE 1
TRYDQE   DS    0H
         TM    $OPFLAGS,$DQE       DQE PROCESSING REQUESTED?
         BNOR  R7                  NO, RETURN TO SPQE LOOP.
         XR    R8,R8               ZERO DQE COUNTER.
         XR    R9,R9               ZERO DQE SPACE COUNTER.
DQELOOP  DS    0H
         ICM   R1,B'1111',$@DQE    GET ADDRESS OF NEXT DQE.
         BZ    ENDDQES             ZERO, NO MORE TO BE HAD.
         LA    R2,$@DQE            ADDRESS DQE DUMP ADDRESS.
         ST    R2,$DATA1           SAVE IN FORMAT LIST.
         LA    R3,DQETEXT0         ADDRESS DQE HEADER TEXT.
         ST    R3,$TEXT1           SAVE IN FORMAT LIST.
         ST    R1,$DATA2           SAVE DQE ADDRESS IN FORMAT LIST.
         LA    R3,DQETEXT1         ADDRESS DQE LABEL TEXTS.
         ST    R3,$TEXT2           SAVE IN FORMAT LIST.
         FORMAT $FORMAT1,BADRC=BADDQE FORMAT THE LINE.
         PACKIT $@FQE,BUFPOS=29    EXTRACT FIRST FQE ADDRESS.
         PACKIT $@DQE,BUFPOS=49    EXTRACT NEXT DQE ADDRESS.
         PACKIT $WORK,BUFPOS=89    EXTRACT DQE ELEMENT SIZE.
         PRINTBUF ,                PRINT THE BUFFER.
         LA    R8,1(,R8)           INCREMENT DQE COUNTER.
         A     R9,$WORK            ADD SPACE TO DQE SPACE COUNTER.
         BAL   R6,TRYFQE           SEE IF WE'RE TO FORMAT FQE'S
         B     DQELOOP             RUN THE DQE CHAIN.
         SPACE 1
ENDDQES  DS    0H
         L     R4,ADPLBUF          ADDRESS OUTPUT BUFFER.
         MVC   20(L'DQEMSG1,R4),DQEMSG1 SETUP SUMMARY TEXT 1.
         MVC   60(L'DQEMSG2,R4),DQEMSG2 SETUP SUMMARY TEXT 2.
         UNPACKIT R8,BUFPOS=49     MOVE DQE COUNTER TO BUFFER.
         UNPACKIT R9,BUFPOS=89     MOVE DQE SIZE TO BUFFER.
         PRINTBUF ,                PRINT THE BUFFER.
         BR    R7                  RETURN TO SPQE PROCESSING.
         EJECT
***********************************************************************
*                                                                     *
*     IF FQE PROCESSING REQUESTED, DO IT.  ELSE, RETURN TO DQE'S.     *
*                                                                     *
***********************************************************************
         SPACE 1
TRYFQE   DS    0H
         TM    $OPFLAGS,$FQE       FQE PROCESSING REQUESTED?
         BNOR  R6                  NO, RETURN TO DQE LOOP.
FQELOOP  DS    0H
         L     R1,$@FQE            GET ADDRESS OF NEXT FQE.
         N     R1,=X'00FFFFFF'     TURN OFF FLAG BITS.
         LTR   R1,R1               SEE IF IT'S ZERO.
         BZR   R6                  ZERO, NO MORE TO BE HAD.
         LA    R2,$@FQE            ADDRESS FQE DUMP ADDRESS.
         ST    R2,$DATA1           SAVE IN FORMAT LIST.
         LA    R3,FQETEXT0         ADDRESS FQE HEADER TEXT.
         ST    R3,$TEXT1           SAVE IN FORMAT LIST.
         ST    R1,$DATA2           SAVE FQE ADDRESS IN FORMAT LIST.
         LA    R3,FQETEXT1         ADDRESS FQE LABEL TEXTS.
         ST    R3,$TEXT2           SAVE IN FORMAT LIST.
         FORMAT $FORMAT1,BADRC=BADFQE FORMAT THE LINE.
         PACKIT $@FQE,BUFPOS=29    EXTRACT NEXT FQE ADDRESS.
         PRINTBUF ,                PRINT THE BUFFER.
         B     FQELOOP             RUN THE FQE CHAIN.
         EJECT
***********************************************************************
*                                                                     *
*     SCAN OPERANDS FROM SYSIN VERB OR IPCS VERBEXIT SUBCOMMAND.      *
*                                                                     *
***********************************************************************
         SPACE 1
SCANOPS  DS    0H
         L     R9,ADPLEXT             GET PARM LIST EXTENSION.
         ICM   R1,B'1111',0(R9)       LOAD AND TEST OPERAND POINTER.
         BNZ   NEXTOP                 BRANCH IF OPTIONS FOUND
         OI    $OPFLAGS,$SPQE+$DQE+$FQE DEFAULT TO ALL.
         BR    R14                    AND RETURN.
NEXTOP   DS    0H
         LR    R2,R1                  SAVE 1ST BYTE POINTER IN R2.
CHKLOOP1 DS    0H
         CLI   0(R1),C','             OPERAND SEPARATOR?
         BE    GOTONE                 YES, WE'VE GOT AN OPERAND.
         CLI   0(R1),C' '             OPERAND LIST TRAILER?
         BE    LASTONE                YES, LAST OPERAND.
         LA    R1,1(,R1)              BUMP TO NEXT BYTE.
         B     CHKLOOP1               AND CONTINUE SCANNING.
LASTONE  DS    0H
         OI    $OPFLAGS,$LASTONE      FLAG FOR LATER.
GOTONE   DS    0H
         LR    R4,R1                  SAVE END POINTER IN R4.
         SR    R4,R2                  COMPUTE OPERAND LENGTH.
         BNP   BADDELIM               LENGTH ZERO? NO GOOD.
         LA    R3,SCANTBL             ADDRESS SCAN TABLE.
         LA    R5,LSCANTBL            LOAD NUMBER OF ENTRIES.
         BCTR  R4,0                   DECREMENT FOR MACHINE CODE.
CHKLOOP2 DS    0H
         EX    R4,CLC1                SEE IF WE HAVE A TABLE MATCH.
         BE    ORITON                 YES, SET THE BIT(S) ON.
         LA    R3,5(,R3)              NO, BUMP TO NEXT TABLE ENTRY.
         BCT   R5,CHKLOOP2            CHECK THROUGH SCAN TABLE.
         LA    R8,8                   LOAD BAD OPERAND RETURN CODE.
         B     BADOPRND               SET IT AND RETURN.
BADDELIM DS    0H
         LA    R8,4                   LOAD BAD DELIMITER CODE.
BADOPRND DS    0H
         ST    R8,0(,R9)              REPLACE OPERAND POINTER.
         B     SETRC                  AND RETURN TO AMDPRDMP.
ORITON   DS    0H
         IC    R5,4(,R3)              INSERT BITS TO BE TURNED ON.
         EX    R5,ORBIT               TURN ON THE OPTION BIT.
         LA    R1,1(,R1)              BUMP PAST DELIMITER.
         TM    $OPFLAGS,$LASTONE      LAST OPERAND?
         BNO   NEXTOP                 NO, TRY FOR ANOTHER OPERAND.
         BR    R14                    YES, RETURN.
         SPACE 2
PACKIT   DS    0H
         L     R0,ADPLBUF          ADDRESS OUTPUT BUFFER.
         ALR   R15,R0              DISPLACE TO BYTE IN BUFFER.
         MVC   $DOUBLE,0(R15)      MOVE DATA TO WORK AREA.
         TR    $DOUBLE,TRTABLE1-C'A' TRANSLATE TO UNZONED NUMERIC.
         PACK  $WORK(5),$DOUBLE(9) PACK THE VALUE.
         MVC   0(4,R1),$WORK       MOVE DATA TO RECEIVING FIELD.
         BR    R14                 RETURN TO CALLER.
         SPACE 2
UNPACKIT DS    0H
         MVI   $WORK+4,X'F0'       SET TERMINATING SIGN FOR UNPK.
         UNPK  $DOUBLE(9),$WORK(5) UNPACK THE ANSWER.
         TR    $DOUBLE,TRTABLE2-C'0' CHANGE ZONED TO PRINTABLE.
         L     R15,ADPLBUF         GET BUFFER ADDRESS.
         LA    R1,0(R15,R1)        DISPLACE TO OUTPUT BYTE.
         MVC   0(8,R1),$DOUBLE     MOVE ANSWER TO BUFFER.
         BR    R14                 RETURN TO CALLER.
         EJECT
***********************************************************************
*                                                                     *
*     ISSUE VARIOUS ERROR MESSAGES IF MEMORY CAN'T BE ACCESSED        *
*                                                                     *
***********************************************************************
         SPACE 1
BADCVT   DS    0H
         PRINTBUF MESSAGE1         PRINT ERROR TEXT.
         B     SETRC               BO SET RETURN CODE.
         SPACE 1
BADGDA   DS    0H
         PRINTBUF MESSAGE2         PRINT ERROR TEXT.
         B     SETRC               SET RETURN CODE.
         SPACE 1
BADSPQE  DS    0H
         PRINTBUF MESSAGE4         PRINT ERROR TEXT.
         B     SETRC               SET RETURN CODE.
         SPACE 1
BADDQE   DS    0H
         PRINTBUF MESSAGE6         PRINT ERROR TEXT.
         B     SETRC               SET RETURN CODE.
         SPACE 1
BADFQE   DS    0H
         PRINTBUF MESSAGE7         PRINT ERROR TEXT.
         EJECT
***********************************************************************
*                                                                     *
*     NORMAL AND ABNORMAL RETURN POINT.  AN ENDING MESSAGE IS         *
*     PRINTED, AND THE REENTRANT WORK AREA IS FREED (SUBPOOL NUMBER   *
*     WAS PROVIDED IN THE ABDUMP PARAMETER LIST).                     *
*                                                                     *
***********************************************************************
         SPACE 1
SETRC    DS    0H
         LA    R2,4                SET RETURN CODE.
         B     NOENDMSG            PRDMP PROVIDES ERROR MESSAGE.
         SPACE 2
RETURN   DS    0H
         PRINTBUF ENDMSG           PRINT ENDING MESSAGE.
         LH    R2,$RC              SAVE RETURN CODE PAST FREEMAIN.
NOENDMSG DS    0H
         LA    R0,$LENGTH          LOAD LENGTH TO FREEMAIN.
         ICM   R0,B'1000',ADPLSBPL INSERT SUBPOOL.
         LR    R1,R11              SET ADDRESS TO BE FREED.
         L     R13,4(,R13)         BACK TO CALLER'S SAVE AREA.
         FREEMAIN R,LV=(0),A=(1)   FREE REENTRANT AREA.
         ST    R2,16(,R13)         PUT RETURN CODE IN R15 SLOT.
         LM    R14,R12,12(R13)     RESTORE CALLER'S REGISTERS.
         BR    R14                 RETURN TO CALLING PROGRAM.
         EJECT
***********************************************************************
*                                                                     *
*                    CONSTANTS AND EQUATES                            *
*                                                                     *
***********************************************************************
         SPACE 2
TITLE    DC    C'AMDAHL SYSTEM QUEUE AREA MAPPING PROGRAM.'
ENDMSG   DC    C'END OF SQA MAPPING PROGRAM.'
         SPACE 1
XAMSG1   DC    C'*** ENVIRONMENT ERROR:  YOU ARE EXAMINING A DUMP FROM *
               AN MVS/XA SYSTEM.'
XAMSG2   DC    C'      - AMDPRDMP USERS:  SPECIFY THE ''VSMDATA'' VERB.*
               '
XAMSG3   DC    C'      - IPCS USERS:  SPECIFY MODULE ''IGVSFMAN'' ON TH*
               E VERBEXIT SUBCOMMAND.'
MESSAGE1 DC    C'CVT COULD NOT BE ACCESSED.'
MESSAGE2 DC    C'GDA COULD NOT BE ACCESSED.'
MESSAGE4 DC    C'SPQE COULD NOT BE ACCESSED.'
MESSAGE6 DC    C'DQE COULD NOT BE ACCESSED.'
MESSAGE7 DC    C'FQE COULD NOT BE ACCESSED.'
         SPACE 1
DQEMSG1  DC    C'NUMBER OF DQES UNDER SPQE...='
DQEMSG2  DC    C'TOTAL SPACE DEFINED BY DQES.='
SPQEMSG  DC    C'(SP=___, KEY=_)'
         SPACE 1
GDATEXT0 DC    CL9'GDA.....='
GDATEXT1 DC    CL36'GDAFLAGS=VRDREG..=CSAPQEP.=VRPQEP..='
GDATEXT2 DC    CL36'PSASTRT.=PASIZE..=SQASPQEP=SQASPLFT='
GDATEXT3 DC    CL36'VRPFEL..=VRPLEL..=VRWFEL..=VRWLEL..='
GDATEXT4 DC    CL36'PFSTCPAB=CSASPQEP=GLBLCELL=GLBCELCT='
         SPACE 1
SPQETXT0 DC    CL9'SPQE....='
SPQETXT1 DC    CL36'SPQEAD..=SPDQEPTR=SPQEFLGS=SPQERES2='
         SPACE 1
DQETEXT0 DC    CL9'  DQE...='
DQETEXT1 DC    CL36'DQFQEPTR=DQEPTR..=DQEBLKAD=DQELNTH.='
         SPACE 1
FQETEXT0 DC    CL9'    FQE.='
FQETEXT1 DC    CL36'FQEPTR..=FQELNTH.=FQAREA..=FQERSVD.='
         EJECT
PATTERN1 DS    0F                  ALIGN LIST TO FULLWORD.
         DC    X'1F83',AL1(0,9)    ELEMENT ID.
         DC    2A(0)               DATA AND TEXT POINTER SPACE.
         DC    X'0F83',AL1(20,29)  FIRST WORD.
         DC    2A(0)               DATA AND TEXT POINTER SPACE.
         DC    X'0583',AL1(40,49)  SECOND WORD.
         DC    X'0583',AL1(60,69)  THIRD WORD.
         DC    X'0583',AL1(80,89)  FOURTH WORD.
         DC    A(0)                TERMINATOR.
         EJECT
BLANKS   DC    CL121' '             A FEW HANDY BLANKS.
         SPACE 1
SCANTBL  DS    0X                   VERB OPERAND SCANNING TABLE.
         DC    CL4'SPQE',AL1($SPQE)            .
         DC    CL4'DQE ',AL1($DQE+$SPQE)       .
         DC    CL4'FQE ',AL1($FQE+$DQE+$SPQE)  .
LSCANTBL EQU   (*-SCANTBL)/5        NUMBER OF SCAN ENTRIES.
         SPACE 1
ORBIT    OI    $OPFLAGS,0           *** EXECUTED ***
CLC1     CLC   0(0,R2),0(R3)        *** EXECUTED ***
         SPACE 1
TRTABLE1 DC    X'0A0B0C0D0E0F',42X'00',X'010203040506070809'
TRTABLE2 DC    C'0123456789ABCDEF'
         SPACE 1
         LTORG ,                   BUILD A LITERAL POOL.
         SPACE 2
LASTSPQE EQU   X'40'               SPQE FLAG INDICATOR.
CVTDCB   EQU   X'74'               LOGREC DCB OFFSET IN CVT.
CVTGDA   EQU   X'230'              GDA POINTER OFFSET IN CVT.
         EJECT
$DSECT   DSECT ,                   REENTRANT WORK AREA.
$SAVE    DS    18A                 SAVE AREA FOR SUBROUTINES.
$DOUBLE  DS    D                   CONVERSION AREA.
         DS    X                   PACK SIGN TO FOLLOW $DOUBLE.
$OPFLAGS DS    X                   SCANNED OPERAND FLAGS AS FOLLOWS:
$SPQE    EQU   X'40'                - SPQE PROCESSING REQUESTED.
$DQE     EQU   X'10'                - DQE PROCESSING REQUESTED.
$FQE     EQU   X'08'                - FQE PROCESSING REQUESTED.
$LASTONE EQU   X'01'                - VERB SCANNING FLAG.
$RC      DS    H                   HIGHEST RETURN CODE.
$WORK    DS    F                   WORK AREA.
         DS    X                   PACKED SIGN TO FOLLOW $WORK.
         DS    3X                  RESERVED.
$SPQEFLG DS    F                   SPQE FLAG SAVE AREA.
$@GDA    DS    A                   GDA DUMP ADDRESS SAVE AREA.
$@PQE    DS    A                   PQE DUMP ADDRESS SAVE AREA.
$@PQENXT DS    A                   NEXT PQE ADDRESS SAVE AREA.
$@SPQE   DS    A                   SPQE DUMP ADDRESS SAVE AREA.
$@FBQE   DS    A                   FBQE DUMP ADDRESS SAVE AREA.
$@FBQEND DS    A                   LAST FBQE ADDRESS SAVE AREA.
$@DQE    DS    A                   DQE DUMP ADDRESS SAVE AREA.
$@FQE    DS    A                   FQE DUMP ADDRESS SAVE AREA.
$@SP     DS    A                   SUBPOOL NUMBER.
         SPACE 2
$FORMAT1 EQU   *,40                FORMAT LIST AREA.
$FMT1    DS    4X                  FLAGS.
$TEXT1   DS    A                   HEADER ADDRESS.
$DATA1   DS    A                   HEADER VALUE POINTER.
$FORMAT2 EQU   *
$FMT2    DS    4X                  FLAGS.
$TEXT2   DS    A                   LABELS ADDRESS.
$DATA2   DS    A                   DUMP DATA ADDRESS.
         DS    4F                  REMAINING FLAGS AND TERMINATOR.
$LENGTH  EQU   *-$DSECT       LENGTH OF REENTRANT AREA.
         EJECT
         IHAABDPL DSECT=YES        GENERATE DUMP PARAMETER LIST.
         SPACE 2
         END   AMDPRSQA
