         TITLE 'SMP DATA EXTRACTION SUB-ROUTINE V3M0  12-11-85'
*---------------------------------------------------------------------*
*        SMPDATA                                                      *
*                                                                     *
*        GENERALIZED SUBROUTINE TO EXTRACT DATA FROM THE SMPCDS/SMPCSI*
*        AND PASS IT BACK TO THE CALLER                               *
*                                                                     *
*        INPUT R1 -> 4 WORDS                                          *
*              WORD1 = -> FUNCTION DESIRED                            *
*                  SRC    - FMID,RMID,UMID,DISTLIB,SYSLIB             *
*                  MAC    - FMID,RMID,UMID,DISTLIB,SYSLIB             *
*                  MOD    - FMID,RMID,UMID,DISTLIB,SYSLIB,LMOD        *
*                  LMOD   - SYSLIB,LEPARM,LE CONTROL CARDS            *
*                                                                     *
*              WORD2 = -> ELEMENT NAME                                *
*                  A)  FOR LMOD,MAC,MOD,SRC REQUESTS THIS IS THE      *
*                      ELEMENT NAME                                   *
*              WORD3 = -> 2 WORDS WHERE                               *
*                      WORD1 CONTAINS THE LENGTH OF THE PROVIDED      *
*                      DATA AREA.                                     *
*                      THE SECOND WILL POINT TO THE START OF THE DATA *
*                      AREA.                                          *
*              WORD4 = -> CSIZONE NAME (SMP/E ONLY)        *LBD 12/85*
*                                                                     *
*                                                                     *
*        DD'S REQUIRED:                                               *
*              SMPOUT   - DYNAMICALLY ALLOCATED                       *
*              SMPCNTL  - DYNAMICALLY ALLOCATED                       *
*              SMPPUNCH - DYNAMICALLY ALLOCATED                       *
*              SMPLOG   - DYNAMICALLY ALLOCATED                       *
*      ------> SMPCDS   - MUST BE PREALLOCATED <-------               *
*              OR                                           *LBD 03/85*
*      ------> SMPCSI   - MUST BE PREALLOCATED <-------     *LBD 03/85*
*                                                                     *
*        HMASMP IS INVOKED TO GATHER THE REQUIRED DATA                *
*        IF DDNAME SMPCDS IS ALLOCATED.                     *LBD 03/85*
*                                                           *LBD 03/85*
*        GIMSMP IS INVOKED IF DDNAME SMPCSI IS ALLOCATED.   *LBD 03/85*
*              WORD 4 MUST POINT TO AN 8 CHARACTER FIELD    *LBD 12/85*
*              CONTAINING THE ZONE NAME.                    *LBD 12/85*
         EJECT
*                                                                     *
*        FORMAT OF RETURNED DATA                                      *
*                                                                     *
*        FOR MAC SRC AND MOD REQUESTS                                 *
*        1        10                                                  *
*        NAME     ELEMENT NAME                                        *
*        DISTLIB  SMP DISTLIB DDNAME                                  *
*        SYSLIB   SMP SYSLIB DDNAME                                   *
*        FMID     FMID                                                *
*        RMID     RMID                                                *
*        UMID     ( MAX 4 UMIDS PER LINE                              *
*        UMID       4 UMIDS - MAY BE MULTIPLE LINES                   *
*        UMID       MAX 4 UMIDS  )                                    *
*        LMOD     LOAD MODULE NAME (MOD REQUEST ONLY)                 *
*                                                                     *
*        IF ANY OF THE ABOVE FIELDS ARE MISSING THEN THERE IS NO      *
*        ENTRY IN THE CDS FOR THAT FIELD.                             *
*                                                                     *
*        FOR LMOD REQUESTS                                            *
*        1        10                                                  *
*        NAME     ELEMENT NAME                                        *
*        SYSLIB   SMP TARGET LINKEDIT LIBRARY                         *
*        LEPARM   LINK EDIT PARM                                      *
*        LE CARDS (BLANK)                                             *
*        --- ACTUAL CARDS IN COL 1-80 ---                             *
*                                                                     *
*                                                                     *
*                                                                     *
*        RETURN CODES:                                                *
*              0  -  NORMAL RETURN                                    *
*              4  -  BAD SMP RETURN - PROBABLY ELEMENT NOT FOUND      *
*              8  -  NO ELEMENT NAME SPECIFIED                        *
*             12  -  INVALID FUNCTION CODE                            *
*             16  -  SVC 99 ERROR                                     *
*             20  -  EXCEEDED 600 DATA RECORDS                        *
*                                                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
SMPDATA  $PROLOG
         L     R5,0(R1)            -> FUNCTION CODE
         L     R6,4(R1)            -> DATA AREA
         L     R7,8(R1)            -> SIZE,ADDR
         TM    8(R1),X'80'        LAST PARM ?              *LBD 12/85*
         BO    NOZONE             YES                      *LBD 12/85*
         L     R8,12(R1)          -> CSI ZONE              *LBD 12/85*
         MVC   SMPZONE,0(R8)      MOVE ZONE NAME            *LBD 03/85*
         SETON SMPE                                        *LBD 12/85*
NOZONE   DS    0H                                          *LBD 12/85*
         L     R1,0(R7)
         ST    R1,DSIZE
         L     R1,4(R7)
         ST    R1,DADDR
         CLI   0(R6),C' '          NULL INPUT DATA AREA ?
         BNE   CKFUNC              NO - GO CHECK FUNCTION
         $EPILOG 8                 INVALID DATA AREA - NO ELEMENT NAME
CKFUNC   DS    0H                                           *LBD 03/85*
         CLC   =C'SRC',0(R5)       SRC ?                    *LBD 03/85*
         BE    DOSRC
         CLC   =C'MAC',0(R5)       MAC ?
         BE    DOMAC
         CLC   =C'MOD',0(R5)       MOD ?
         BE    DOMOD
         CLC   =C'LMOD',0(R5)      LMOD ?
         BE    DOLMOD
         $EPILOG 12                INVALID FUNCTION RETURN CODE 12
DOSRC    EQU   *
         MVC   SMPNAME,0(R6)
         MVC   SMPTYPE(3),=C'SRC'
         B     DOSMP
DOMAC    EQU   *
         MVC   SMPNAME,0(R6)
         MVC   SMPTYPE(3),=C'MAC'
         B     DOSMP
DOMOD    EQU   *
         MVC   SMPNAME,0(R6)
         MVC   SMPTYPE(3),=C'MOD'
         B     DOSMP
DOLMOD   EQU   *
         MVC   SMPNAME,0(R6)
         MVC   SMPTYPE(4),=C'LMOD'
         B     DOSMP
         EJECT
DOSMP    EQU   *
         FREE DDN='SMPCNTL'
         FREE DDN='SMPOUT'
         FREE DDN='SMPLOG'
         FREE DDN='SMPPUNCH'
         SPACE
         ALLOC DDN='SMPCNTL',UNIT='SYSDA',SPACE=(TRK,(1)),             *
               DISP=(NEW,DELETE),ERROR=SVC99ERR
         ALLOC DSN='NULLFILE',DDN='SMPOUT',ERROR=SVC99ERR
         ALLOC DSN='NULLFILE',DDN='SMPLOG',ERROR=SVC99ERR
         ALLOC DDN='SMPPUNCH',DISP=(NEW,DELETE),UNIT='SYSDA',          X
               SPACE=(TRK,(10,10)),ERROR=SVC99ERR
OPCNTL   OPEN  (SMPCNTL,OUTPUT)
PMOD     DS    0H                                           *LBD 03/85*
         IFOFF SMPE,NOSMPE                                  *LBD 03/85*
         MVC   UNLDCDS(4),=CL4' '                           *LBD 03/85*
         PUT   SMPCNTL,SMPECC                               *LBD 03/85*
NOSMPE   DS    0H                                           *LBD 03/85*
         PUT   SMPCNTL,UNLOADCD                             *LBD 03/85*
         CLOSE SMPCNTL
         LA    R1,SMPPARM
         IFON  SMPE,DOSMPE                                  *LBD 03/85*
         LINK  EP=HMASMP
         LTR   R15,R15
         BZ    DOIT
         LR    R1,R15              LOAD R1 WITH SMP RC
         $EPILOG 4                 RETURN WITH CODE 4 - BAD SMP
DOSMPE   DS    0H                                           *LBD 03/85*
         MVC   SMPPARMX(12),=CL12'PROCESS=END'              *LBD 03/85*
         MVC   SMPPARMD(2),=AL2(12)                         *LBD 03/85*
         LINK  EP=GIMSMP                                    *LBD 03/85*
         LTR   R15,R15                                      *LBD 03/85*
         BZ    DOIT                                         *LBD 03/85*
         LR    R1,R15              LOAD R1 WITH SMP RC      *LBD 03/85*
         $EPILOG 4                 RETURN WITH CODE 4 - BAD SMPD 03/85*
DOIT     EQU   *
         FREE DDN='SMPCNTL'
         FREE DDN='SMPOUT'
         FREE DDN='SMPLOG'
         L     R5,DADDR
         LA    R6,80               LOAD INCR
         LR    R7,R5
         A     R7,DSIZE
         SR    R7,R6               -> LAST ENTRY -1
         OPEN  SMPPUNCH
READPUN  GET   SMPPUNCH
         LR    R3,R1               -> INPUT DATA
         CLI   26(R3),C'.'
         BE    EOF$
         IFON  UMID,DOUMID
         IFON  LMODIN,DOLMODIN
         CLC   =C'REP ',0(R3)
         BE    NAME
         CLC   =C'ENDUCL',0(R3)
         BE    EOF$
         CLC   =C'DISTLIB',10(R3)
         BE    NORMAL
         CLC   =C'SYSLIB',10(R3)
         BE    SYSLIB
         CLC   =C'FMID',10(R3)
         BE    NORMAL
         CLC   =C'RMID',10(R3)
         BE    NORMAL
         CLC   =C'LMOD',10(R3)
         BE    LMOD
         CLC   =C'UMID',10(R3)
         BE    DOUMID
         CLC   =C'LEPARM',13(R3)
         BE    DOLEPARM
         CLC   =C'++LMODIN',0(R3)
         BE    STLMODIN
         B     READPUN
INCR     OC    0(80,R5),=CL80' '
         BXLE  R5,R6,READPUN
         $EPILOG 20                NOT ENOUGH ROOM IN DATA AREA
NAME     MVC   0(8,R5),=CL8'NAME'
         MVC   10(8,R5),28(R3)
         B     INCR
SYSLIB   MVC   0(8,R5),=CL8'SYSLIB '
         CLI   37(R3),C' '
         BE    SYSML
         MVC   10(9,R5),28(R3)
         B     INCR
SYSML    MVC   10(18,R5),28(R3)
         B     INCR
NORMAL   EQU   *
         MVC   0(8,R5),10(R3)
         MVC   10(8,R5),28(R3)
         B     INCR
LMOD     EQU   *
         MVC   0(8,R5),10(R3)
         LA    R1,28(R3)                                   *LBD 12/85*
         LA    R2,10(R5)                                   *LBD 12/85*
LMOD2    DS    0H                                          *LBD 12/85*
         MVC   0(8,R2),0(R1)                               *LBD 12/85*
         CLI   10(R1),C' '        END OF LMOD LIST ?       *LBD 12/85*
         BE    INCR               YES                      *LBD 12/85*
         LA    R2,8(R2)           BUMP OUTPUT POINTER      *LBD 12/85*
         LA    R1,10(R1)          BUMP INPUT POINTER       *LBD 12/85*
         B     LMOD2
DOUMID   EQU   *
         SETON UMID
         MVC   0(8,R5),=C'UMID'
         LA    R1,10(R5)
         LA    R2,40
         LA    R3,28(R3)
MUMID    CLI   0(R3),C')'
         BE    INCR
         MVC   0(1,R1),0(R3)
         LA    R1,1(R1)
         LA    R3,1(R3)
         BCT   R2,MUMID
         B     INCR
STLMODIN EQU   *
         SETON LMODIN
         MVC   0(80,R5),0(R3)
         B     INCR
DOLMODIN EQU   *
         CLC   =C'++ENDLMODIN',0(R3)
         BE    READPUN
         MVC   0(80,R5),0(R3)
         B     INCR
DOLEPARM EQU   *
         MVC   0(6,R5),13(R3)
         MVC   10(8,R5),28(R3)
         B     INCR
EOF$     CLOSE (SMPPUNCH,FREE)
         $EPILOG 0
SVC99ERR S99FAIL
         $EPILOG 16                SVC 99 ERROR
         BITSW UMID,LMODIN,SMPE
         SPACE
DSIZE    DS    F
DADDR    DS    F
         SPACE
UNLOADCD DC    CL80' '
         ORG   UNLOADCD
         DC    C' UNLOAD '
UNLDCDS  DC    C'CDS '                                      *LBD 03/85*
SMPTYPE  DC    CL4'    '
         DC    C'('
SMPNAME  DC    CL8' ',C')   .'
         ORG
SMPPARM  DC    X'80',AL3(SMPPARMD)
SMPPARMD DC    AL2(6)                                       *LBD 03/85*
SMPPARMX DC    CL20'DATE=U'                                 *LBD 03/85*
         SPACE 2
SMPECC   DC    CL80' '                                      *LBD 03/85*
         ORG   SMPECC+2                                     *LBD 03/85*
         DC    C'SET BOUNDARY('                             *LBD 03/85*
SMPZONE  DC    CL8' ',C').'                                 *LBD 03/85*
         ORG   ,                                            *LBD 03/85*
         SPACE 2                                            *LBD 03/85*
SMPPUNCH DCB   DSORG=PS,MACRF=GL,DDNAME=SMPPUNCH,EODAD=EOF$
SMPCNTL  DCB   DSORG=PS,MACRF=PM,DDNAME=SMPCNTL,LRECL=80,RECFM=FB,    XX
               BLKSIZE=80
         EJECT                                              *LBD 03/85*
         DYNSPACE
         EJECT                                              *LBD 03/85*
         IEFZB4D0
         EJECT                                              *LBD 03/85*
         IEFZB4D2
         END
