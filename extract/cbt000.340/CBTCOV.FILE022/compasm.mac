*PROCESS AGGREGATE,ATTRIBUTES(FULL),CHARSET(60,EBCDIC),NOCOMPILE(E),
         NOCOUNT,NODECK,NODUMP,ESD,FLAG(I),NOFLOW,NOGONUMBER,NOGOSTMT,
         NOIMPRECISE,NOINCLUDE,NOINSOURCE,NOINTERRUPT,
         LINECOUNT(55),NOLIST,LMESSAGE,NOMACRO,MAP,NOMARGINI,
         MARGINS(2,72,1),NOMDECK,NAME('COMPASM'),NEST,NONUMBER,OBJECT,
         OFFSET,OPTIMIZE(TIME),OPTIONS,SEQUENCE(73,80),SIZE(MAX),
         SOURCE,STMT,STORAGE,NOSYNTAX(S),TERMINAL,XREF(FULL);
 /*       COMPARE TWO VERSIONS OF AN ASSEMBLER LANGUAGE MODULE        */
 /*********************************************************************/
 /*                                                                   */
 /* FUNCTION:                                                         */
 /*   COMPASM COMPARES TWO VERSIONS OF AN ASSEMBLY LANGUAGE SOURCE    */
 /*   MODULE. IT IS ESPECIALLY WELL SUITED TO CASES WHERE THE TWO     */
 /*   VERSIONS DIFFER SIGNIFICANTLY. THE CONTENT OF THE SOURCE CODE   */
 /*   IS USED TO MAKE AN INTELLIGENT COMPARISON. SEQUENCE NUMBERS ARE */
 /*   NOT NORMALLY USED. THE DIFFERENCES BETWEEN THE TWO MODULES ARE  */
 /*   PRINTED AND/OR PUNCHED AS AN UPDATE DECK.  STATISTICS ON THE    */
 /*   EXTENT OF THE DIFFERENCES ARE ALSO PRINTED.                     */
 /*                                                                   */
 /* PARAMETERS:                                                       */
 /*   ALL PARAMETERS ARE OPTIONAL.  PARAMETERS ARE SPECIFIED AS       */
 /*   PARM='PLIPARMS/PGMPARMS'.  PGMPARMS MUST BE PRECEDED BY A "/".  */
 /*                                                                   */
 /*   PLIPARMS:                                                       */
 /*   ISASIZE(AMOUNT) (DEFAULT ISASIZE(500K))                         */
 /*       ISASIZE SPECIFIES THE INITIAL STORAGE AREA OBTAINED BY PLI. */
 /*       PERFORMANCE IS IMPROVED SLIGHTLY IF A LARGE ENOUGH VALUE IS */
 /*       SPECIFIED. IT MAY BE CALCULATED AS 164*SIZE+4500 (SEE       */
 /*       PGMPARM SIZE).                                              */
 /*                                                                   */
 /*   PGMPARMS:                                                       */
 /*   COLUMN=COLUMN-NUMBER (DEFAULT COLUMN=72)                        */
 /*       COLUMN SPECIFIES THE NUMBER OF COLUMNS USED FOR COMPARISON. */
 /*   DECK×NODECK (DEFAULT NODECK)                                    */
 /*       DECK SPECIFIES THAT AN UPDATE DECK IS TO BE WRITTEN TO FILE */
 /*       SYSPUNCH.                                                   */
 /*   FORMAT=<SMP×UPDATE> (DEFAULT FORMAT=SMP)                        */
 /*       SMP SPECIFIES THAT THE DECK IS TO BE IN SMP FORMAT. UPDATE  */
 /*       SPECIFIES THAT THE DECK IS TO BE IN IEBUPDTE FORMAT.        */
 /*   INCR=SEQUENCE-INCREMENT (DEFAULT INCR=10)                       */
 /*       INCR SPECIFIES THE INTERVAL BETWEEN SEQUENCE NUMBERS FOR    */
 /*       INSERTED CARDS WRITTEN TO SYSPUNCH.                         */
 /*   LINECOUNT=PAGE-SIZE (DEFAULT LINECOUNT=55)                      */
 /*       LINECOUNT SPECIFIES THE NUMBER OF LINES PER PAGE ON         */
 /*       SYSPRINT AND SYSTERM.                                       */
 /*   LIST×NOLIST×LIST=ALL (DEFAULT LIST)                             */
 /*       LIST SPECIFIES THAT A REPORT OF MODULE DIFFERENCES IS TO    */
 /*       WRITTEN TO SYSPRINT. LIST=ALL SPECIFIES THAT THE LISTING    */
 /*       WILL INCLUDE CARDS WHICH ARE THE SAME IN BOTH MODULES.      */
 /*   MODID=MODIFICATION-ID (DEFAULT MODID=        )                  */
 /*       MODID SPECIFIES A CHARACTER STRING WHICH WILL BE PUNCHED IN */
 /*       COLUMNS 64-71 OF COMMENTS CARDS USED FOR DELETION WHEN      */
 /*       FORMAT=SMP IS SPECIFIED.                                    */
 /*   SEQFLD=CCL (DEFAULT SEQFLD=738)                                 */
 /*       SEQFLD IS USED WHEN A PORTION OF THE SEQUENCE FIELD IN      */
 /*       COLUMNS 73-80 IS NON-NUMERIC.  CCL SPECIFIES THE COLUMN     */
 /*       (CC) AND LENGTH (L) OF THE NUMERIC PORTION OF THE SEQUENCE  */
 /*       FIELD.                                                      */
 /*   SIZE=MODULE-SIZE (DEFAULT SIZE=3000)                            */
 /*       SIZE SPECIFIES THE NUMBER OF CARDS IN THE LARGER MODULE.    */
 /*   TERM×NOTERM (DEFAULT NOTERM)                                    */
 /*       TERM SPECIFIES THAT STATISTICS AND ERROR MESSAGES WILL BE   */
 /*       WRITTEN TO FILE SYSTERM.                                    */
 /*   TRANSLATE×NOTRANSLATE (DEFAULT NOTRANSLATE)                     */
 /*       TRANSLATE NON-ASSEMBLER CHARACTERS TO BLANKS PRIOR TO       */
 /*       COMPARISON. SYSPRINT/SYSPUNCH OUTPUT IS NOT AFFECTED.       */
 /*                                                                   */
 /* INPUT FILES:                                                      */
 /*   ALL INPUT FILES MUST BE SEQUENTIAL OR A MEMBER OF A PARTITIONED */
 /*   DATA AND MUST BE RECFM=FB, LRECL=80.                            */
 /*                                                                   */
 /*   OLD (REQUIRED)                                                  */
 /*      OLD IS THE "ORIGINAL" VERSION OF THE MODULE.                 */
 /*   NEW (REQUIRED)                                                  */
 /*      NEW IS THE "MODIFIED" VERSION OF THE MODULE.                 */
 /*   SYSIN (OPTIONAL)                                                */
 /*      SYSIN IS USED WHEN DECK IS SPECIFIED. IT IS COPIED TO THE    */
 /*      BEGINNING OF SYSPUNCH. IF SYSIN IS OMITTED, AN UPDATE        */
 /*      ./ CHANGE NAME=MODULE-NAME CARD IS PUNCHED.                  */
 /*                                                                   */
 /* OUTPUT FILES:                                                     */
 /*   SYSPRINT (REQUIRED)                                             */
 /*      SYSPRINT IS A REPORT OF MODULE DIFFERENCES AND STATISTICS.   */
 /*      ADDED CARDS ARE FLAGGED WITH +++, AND DELETED CARDS ARE      */
 /*      FLAGGED WITH ---.  IT MUST BE RECFM=VBA, LRECL=125.          */
 /*   SYSTERM (OPTIONAL)                                              */
 /*      SYSTERM IS USED WHEN TERM IS SPECIFIED. IT IS A SUBSET OF    */
 /*      SYSPRINT FOR TSO TERMINAL USE. IT CONTAINS JUST STATISTICS   */
 /*      AND ERROR MESSAGES. IT MUST BE RECFM=VBA, LRECL=125.         */
 /*   SYSPUNCH (OPTIONAL)                                             */
 /*      SYSPUNCH IS USED WHEN DECK IS SPECIFIED. IT IS AN UPDATE     */
 /*      DECK IN SMP OR IEBUPDTE FORMAT WHICH CONVERTS THE "OLD"      */
 /*      MODULE INTO THE "NEW" MODULE. IT MUST BE RECFM=FB, LRECL=80. */
 /*                                                                   */
 /* METHOD OF OPERATION:                                              */
 /*   BOTH MODULES ARE READ INTO ARRAYS IN MAIN STORAGE. THE PROGRAM  */
 /*   THEN BUILDS CROSS-REFERENCE ARRAYS WHICH POINT TO MATCHING      */
 /*   CARDS IN THE TWO MODULES. MULTIPLE PASSES ARE MADE OVER THE     */
 /*   SOURCE TEXT. THE FIRST PASS COMPARES CARDS WHICH ARE MOST       */
 /*   LIKELY TO BE UNIQUE. EACH SUBSEQENT PASS COMPARES CARDS WHICH   */
 /*   ARE PROGRESSIVELY LESS LIKELY TO BE UNIQUE.                     */
 /*                                                                   */
 /*   THE FIRST PASS IDENTIFIES SOURCE MACROS AND OPEN CODE. EACH     */
 /*   MACRO IS COMPARED SEPARATELY. EACH MATCHING MACRO OR OPEN CODE  */
 /*   IS SCANNED FOR CARDS WITH SEQUENCE SYMBOLS. THEN BETWEEN        */
 /*   MATCHING SEQUENCE SYMBOLS, CARDS ARE SCANNED FOR NAMES. CARDS   */
 /*   BETWEEN MATCHING NAMES ARE SCANNED FOR NON-TRIVIAL CARDS.       */
 /*   FINALLY TRIVIAL CARDS ARE COMPARED BETWEEN MATCHING NON-TRIVIAL */
 /*   CARDS.  TRIVIAL CARDS ARE EITHER COMMENTS WITH SIMPLE PATTERNS  */
 /*   OF REPEATED CHARACTERS OR ASSEMBLER CONTROL STATEMENTS SUCH AS  */
 /*   EJECT OR SPACE.                                                 */
 /*                                                                   */
 /*   A REPORT AND/OR DECK ARE THEN PRODUCED USING THE                */
 /*   CROSS-REFERENCE ARRAYS. STATISTICS ARE PRINTED ON THE RESULTS   */
 /*   OF THE COMPARISON.                                              */
 /*                                                                   */
 /* AUTHOR:                                                           */
 /*   DOUGLAS H. ADAMS                                                */
 /*   INFORMATION SYSTEMS CENTER                                      */
 /*   ROCKWELL INTERNATIONAL CORPORATION                              */
 /*   MAIL CODE 110-SH28                                              */
 /*   2201 SEAL BEACH BLVD.                                           */
 /*   P.O. BOX 2515                                                   */
 /*   SEAL BEACH, CALIFORNIA 90740-1515                               */
 /*                                                                   */
 /*   (213) 594-2618                                                  */
 /*                                                                   */
 /*********************************************************************/
1COMPASM: PROCEDURE (PARM) OPTIONS (MAIN) REORDER;
 /*********************************************************************/
 /* PARAMETER AND FILE DECLARE STATEMENTS                             */
 /*********************************************************************/
 DECLARE COLUMN     FIXED BINARY INITIAL (72);
 DECLARE DECK       CHARACTER(6) INITIAL ('NODECK');
 DECLARE INPUT      /* OLD, NEW */ FILE INPUT RECORD
                    ENVIRONMENT (FB RECSIZE(80) TOTAL);
 DECLARE FORMAT     CHARACTER(6) INITIAL ('SMP');
 DECLARE INCR       FIXED BINARY INITIAL (10);
 DECLARE LINECOUNT  FIXED BINARY INITIAL (55);
 DECLARE LIST       CHARACTER(6) INITIAL ('LIST');
 DECLARE MODID      CHARACTER(8) INITIAL ((8)' ');
 DECLARE PARM       CHARACTER(100) VARYING;
 DECLARE PLIXOPT    CHARACTER(27) VARYING STATIC EXTERNAL
                    INITIAL ('ISASIZE(500K),NOSPIE,NOSTAE');
 DECLARE SEQFLD     CHARACTER(3) INITIAL ('738');
 DECLARE SIZE       FIXED BINARY INITIAL (3000);
 DECLARE SYSIN      FILE INPUT RECORD
                    ENVIRONMENT (FB RECSIZE(80) TOTAL);
 DECLARE SYSPRINT   FILE PRINT ENVIRONMENT (VB RECSIZE(125));
 DECLARE SYSPNCH    /* SYSPUNCH */ FILE OUTPUT RECORD
                    ENVIRONMENT (FB RECSIZE(80) TOTAL);
 DECLARE SYSTERM    FILE PRINT ENVIRONMENT (VB RECSIZE(125));
 DECLARE TERM       CHARACTER(6) INITIAL ('NOTERM');
 DECLARE TRANSLAT   CHARACTER(11) INITIAL ('NOTRANSLATE');
1/*********************************************************************/
 /* GLOBAL DECLARE STATEMENTS                                         */
 /*********************************************************************/
 DECLARE ADDED      FIXED BINARY INITIAL (0);
 DECLARE ALPHA      CHARACTER(29)
                    INITIAL ('$#@ABCDEFGHIJKLMNOPQRSTUVWXYZ');
 DECLARE ALPHANUM   CHARACTER(39)
                    INITIAL ('$#@ABCDEFGHIJKOMNOPQRSTUVWXYZ0123456789');
 DECLARE BINARY     BUILTIN;
 DECLARE DELETED    FIXED BINARY INITIAL (0);
 DECLARE CHARSET    CHARACTER(256);
 DECLARE INDEX      BUILTIN;
 DECLARE LENGTH     BUILTIN;
 DECLARE MATCHED    FIXED BINARY INITIAL (0);
 DECLARE MODULE     CHARACTER(8) INITIAL ('');
 DECLARE NEWCARD(*) CHARACTER(80) CONTROLLED;
 DECLARE NEWNUM     FIXED BINARY INITIAL (0);
 DECLARE NEWXREF(*) FIXED BINARY(15) CONTROLLED;
 DECLARE NO         BIT(1) INITIAL ('0'B);
 DECLARE NULL       BUILTIN;
 DECLARE OLDCARD(*) CHARACTER(80) CONTROLLED;
 DECLARE OLDXREF(*) FIXED BINARY(15) CONTROLLED;
 DECLARE OLDNUM     FIXED BINARY INITIAL (0);
 DECLARE PLIDUMP    BUILTIN;
 DECLARE REPEAT     BUILTIN;
 DECLARE SEQCOL     FIXED BINARY;
 DECLARE SEQLEN     FIXED BINARY;
 DECLARE SUBSTR     BUILTIN;
 DECLARE SYSINCARDS FIXED BINARY INITIAL (0);
 DECLARE TRANSLATE  BUILTIN;
 DECLARE VERIFY     BUILTIN;
 DECLARE YES        BIT(1) INITIAL ('1'B);
1/*********************************************************************/
 /* MAIN PROGRAM                                                      */
 /*********************************************************************/
 CALL PARMFIELD;                    /* ANALYZE PARM FIELD             */
 CALL INITIALIZE;                   /* INITIALIZE BASED ON PARMS      */
 CALL READ ('OLD',OLDCARD,OLDNUM);  /* READ OLD MODULE                */
 CALL READ ('NEW',NEWCARD,NEWNUM);  /* READ NEW MODULE                */
 CALL MACROS;                       /* COMPARE ALL MACROS             */
 CALL EXCLUDEMACROS;                /* PREVENT MACRO COMPARISONS      */
 CALL FINDMODULE;                   /* FIND CSECT/MACRO NAME          */
 CALL OPENCODE;                     /* COMPARE OPEN CODE              */
 CALL OUTPUT;                       /* PRINT/PUNCH COMPARISON RESULT  */
 CALL STATISTICS;                   /* PRINT COMPARISON STATISTICS    */
 CALL CLEANUP;                      /* FREE RESOURCES                 */
 RETURN;                            /* RETURN TO CALLER               */
1/*********************************************************************/
 /* ANALYZE PARAMETERS                                                */
 /*********************************************************************/
 PARMFIELD: PROCEDURE;
 /*-------------------------------------------------------------------*/
 DECLARE COMMA      FIXED BINARY;
 DECLARE EQUAL      FIXED BINARY;
 DECLARE KEYWORD    FIXED BINARY INITIAL (1);
 DECLARE LENKEYWORD FIXED BINARY;
 DECLARE LENPARM    FIXED BINARY;
 DECLARE LENVALUE   FIXED BINARY;
 DECLARE REMAIN     FIXED BINARY;
 DECLARE VALUE      FIXED BINARY;
 /*-------------------------------------------------------------------*/
 REMAIN = LENGTH(PARM);
 DO WHILE (REMAIN > 0); /* SCAN PARM FIELD */
    COMMA = INDEX(SUBSTR(PARM,KEYWORD,REMAIN),',');
    IF COMMA > 0
    THEN COMMA = KEYWORD+COMMA-1;
    ELSE COMMA = LENGTH(PARM)+1;
    LENPARM = COMMA-KEYWORD;
    EQUAL = INDEX(SUBSTR(PARM,KEYWORD,LENPARM),'=');
    IF EQUAL > 0
    THEN DO;
       EQUAL = KEYWORD+EQUAL-1;
       LENKEYWORD = EQUAL-KEYWORD;
       VALUE = EQUAL+1;
       LENVALUE = COMMA-VALUE;
       END;
    ELSE DO;
       LENKEYWORD = LENPARM;
       VALUE = 0;
       LENVALUE = 0;
       END;
    SELECT (SUBSTR(PARM,KEYWORD,LENKEYWORD)); /* PROCESS A PARAMETER */
       WHEN ('COLUMN')
          COLUMN = SUBSTR(PARM,VALUE,LENVALUE);
       WHEN ('DECK')
          DECK = 'DECK';
       WHEN ('FORMAT')
          FORMAT = SUBSTR(PARM,VALUE,LENVALUE);
       WHEN ('INCR')
          INCR = SUBSTR(PARM,VALUE,LENVALUE);
       WHEN ('LINECOUNT')
          LINECOUNT = SUBSTR(PARM,VALUE,LENVALUE);
       WHEN ('LIST')
          IF LENVALUE > 0
          THEN LIST = SUBSTR(PARM,VALUE,LENVALUE);
          ELSE LIST = 'LIST';
       WHEN ('MODID')
          MODID = SUBSTR(PARM,VALUE,LENVALUE);
       WHEN ('NODECK')
          DECK = 'NODECK';
       WHEN ('NOLIST')
          LIST = 'NOLIST';
       WHEN ('NOTERM')
          TERM = 'NOTERM';
       WHEN ('NOTRANSLATE')
          TRANSLAT = 'NOTRANSLATE';
       WHEN ('SEQFLD')
          SEQFLD = SUBSTR(PARM,VALUE,LENVALUE);
       WHEN ('SIZE')
          SIZE = SUBSTR(PARM,VALUE,LENVALUE);
       WHEN ('TERM')
          TERM = 'TERM';
       WHEN ('TRANSLATE')
          TRANSLAT = 'TRANSLATE';
       OTHERWISE DO; /* ERROR */
          PUT FILE (SYSPRINT)
              (SUBSTR(PARM,KEYWORD,LENPARM),' UNRECOGNIZED') SKIP;
          SIGNAL ERROR;
          END; /* ERROR */
       END; /* PROCESS A PARAMETER */
    KEYWORD = KEYWORD+LENPARM+1;
    REMAIN = REMAIN-LENPARM-1;
    END; /* SCAN PARM FIELD */
 END PARMFIELD;
1/*********************************************************************/
 /* INITIALIZATION                                                    */
 /*********************************************************************/
 INITIALIZE: PROCEDURE;
 /*-------------------------------------------------------------------*/
 DECLARE BUFFER     CHARACTER(80) BASED;
 DECLARE EOF        BIT(1);
 DECLARE I          FIXED BINARY;
 DECLARE P          POINTER INITIAL (NULL);
 /*-------------------------------------------------------------------*/
 OPEN FILE (SYSPRINT) PAGESIZE (LINECOUNT) LINESIZE (120);
 IF TERM = 'TERM'
 THEN DO;
    ON UNDEFINEDFILE (SYSTERM) BEGIN;
       PUT FILE (SYSPRINT) ('FILE SYSTERM UNDEFINED');
       TERM = 'NOTERM';
       END;
    OPEN FILE (SYSTERM) PAGESIZE (LINECOUNT) LINESIZE (120);
    END;
 IF DECK = 'DECK'
 THEN DO;
    ON UNDEFINEDFILE (SYSPNCH) BEGIN;
       PUT FILE (SYSPRINT) ('FILE SYSPUNCH UNDEFINED');
       IF TERM = 'TERM'
       THEN PUT FILE (SYSTERM) ('FILE SYSPUNCH UNDEFINED');
       DECK = 'NODECK';
       END;
    OPEN FILE (SYSPNCH) TITLE ('SYSPUNCH');
    END;
 IF DECK = 'DECK'
 THEN DO;
    ON UNDEFINEDFILE (SYSIN) EOF = YES;
    ON ENDFILE (SYSIN) EOF = YES;
    EOF = NO;
    OPEN FILE (SYSIN);
    IF ^ EOF
    THEN READ FILE (SYSIN) SET (P);
    DO WHILE (^ EOF);
       SYSINCARDS = SYSINCARDS+1;
       WRITE FILE (SYSPNCH) FROM (P->BUFFER);
       READ FILE (SYSIN) SET (P);
       END;
    CLOSE FILE (SYSIN);
    END;
 SEQCOL = SUBSTR(SEQFLD,1,2);
 SEQLEN = SUBSTR(SEQFLD,3,1);
 ALLOCATE OLDCARD(SIZE),OLDXREF(0:SIZE+1),
          NEWCARD(SIZE),NEWXREF(0:SIZE+1);
 DO I = 0 TO SIZE;
    OLDXREF(I),NEWXREF(I) = 0;
    END;
 CHARSET = '                ' ××
           '                ' ××
           '                ' ××
           '                ' ××
           '           . (+ ' ××
           '&          $*)  ' ××
           '-/         ,    ' ××
           '           #@''= '××
           '                ' ××
           '                ' ××
           '                ' ××
           '                ' ××
           'ABCDEFGHI       ' ××
           'JKLMNOPQR       ' ××
           ' STUVWXYZ       ' ××
           '0123456789      ' ;
 END INITIALIZE;
1/*********************************************************************/
 /* READ OLD OR NEW MODULE                                            */
 /*********************************************************************/
 READ: PROCEDURE (DDNAME,CARD,NUM);
 /*-------------------------------------------------------------------*/
 DECLARE BUFFER     CHARACTER(80) BASED;
 DECLARE CARD(*)    CHARACTER(80) CONTROLLED;
 DECLARE DDNAME     CHARACTER (8);
 DECLARE EOF        BIT(1);
 DECLARE I          FIXED BINARY;
 DECLARE NUM        FIXED BINARY;
 DECLARE P          POINTER;
 /*-------------------------------------------------------------------*/
 ON UNDEFINEDFILE (INPUT) BEGIN;
    PUT FILE (SYSPRINT) ('FILE '××DDNAME××' UNDEFINED');
    IF TERM = 'TERM'
    THEN PUT FILE (SYSTERM) ('FILE '××DDNAME××' UNDEFINED');
    SIGNAL ERROR;
    END;
 ON ENDFILE (INPUT) EOF = YES;
 EOF = NO;
 OPEN FILE (INPUT) TITLE (DDNAME);
 READ FILE (INPUT) SET (P);
 DO I = 1 TO SIZE WHILE (^ EOF);
    CARD(I) = P->BUFFER;
    READ FILE (INPUT) SET (P);
    END;
 NUM = I-1;
 CLOSE FILE (INPUT);
 IF ^ EOF
 THEN DO;
    PUT FILE (SYSPRINT)
        ('MODULE LARGER THAN ',SIZE);
    IF TERM = 'TERM'
    THEN PUT FILE (SYSTERM)
             ('MODULE LARGER THAN ',SIZE);
    SIGNAL ERROR;
    END;
 END READ;
1/*********************************************************************/
 /* SEARCH FOR MACROS                                                 */
 /*********************************************************************/
 MACROS: PROCEDURE;
 /*-------------------------------------------------------------------*/
 DECLARE N          FIXED BINARY;
 DECLARE NEWNAME    CHARACTER(8) VARYING INITIAL ('');
 DECLARE NMACRO     FIXED BINARY INITIAL (0);
 DECLARE NMEND      FIXED BINARY INITIAL (0);
 DECLARE NNEXT      FIXED BINARY INITIAL (0);
 DECLARE NSTART     FIXED BINARY;
 DECLARE OLDNAME    CHARACTER(8) VARYING INITIAL ('');
 DECLARE OMACRO     FIXED BINARY INITIAL (0);
 DECLARE OMEND      FIXED BINARY INITIAL (0);
 DECLARE OSTART     FIXED BINARY;
 /*-------------------------------------------------------------------*/
 OSTART = 1;
 NSTART = 1;
 DO UNTIL (OLDNAME = '' × OSTART > OLDNUM);
    CALL FINDMACRO (OLDCARD,OSTART,OLDNUM,OLDNAME,OMACRO,OMEND);
    NNEXT = NSTART;
    IF OLDNAME ^= ''
    THEN DO;
       DO UNTIL (OLDNAME = NEWNAME × NEWNAME = '' × NNEXT > NEWNUM);
          CALL FINDMACRO (NEWCARD,NNEXT,NEWNUM,NEWNAME,NMACRO,NMEND);
          NNEXT = NMEND+1;
          END;
       IF OLDNAME = NEWNAME
       THEN DO;
          CALL SEQSYMBOL (OMACRO,OMEND,NMACRO,NMEND);
          NSTART = NMEND+1;
          END;
       END;
    OSTART = OMEND+1;
    END;
 END MACROS;
1/*********************************************************************/
 /* FIND NEXT MACRO                                                   */
 /*********************************************************************/
 FINDMACRO: PROCEDURE (CARD,START,END,NAME,MACRO,MEND);
 /*-------------------------------------------------------------------*/
 DECLARE CARD(*)    CHARACTER(80) CONTROLLED;
 DECLARE END        FIXED BINARY;
 DECLARE I          FIXED BINARY;
 DECLARE L          FIXED BINARY;
 DECLARE MACRO      FIXED BINARY;
 DECLARE MEND       FIXED BINARY;
 DECLARE MODEL      FIXED BINARY;
 DECLARE N          FIXED BINARY;
 DECLARE NAME       CHARACTER(8) VARYING;
 DECLARE START      FIXED BINARY;
 /*-------------------------------------------------------------------*/
 NAME = '';
 DO MACRO = START TO END UNTIL (SUBSTR(CARD(MACRO),N,6) = 'MACRO ');
    IF SUBSTR(CARD(MACRO),1,1) ^= '*' &
         SUBSTR(CARD(MACRO),1,2) ^= '.*'
    THEN DO;
       I = INDEX(CARD(MACRO),' ');
       N = VERIFY(SUBSTR(CARD(MACRO),I+1,72-I),' ')+I;
       END;
    ELSE N = 1;
    END;
 DO MODEL = MACRO+1 TO END UNTIL (NAME ^= '');
    IF SUBSTR(CARD(MODEL),1,1) ^= '*' &
         SUBSTR(CARD(MODEL),1,2) ^= '.*'
    THEN DO;
       I = INDEX(CARD(MODEL),' ');
       N = VERIFY(SUBSTR(CARD(MODEL),I+1,72-I),' ')+I;
       L = INDEX(SUBSTR(CARD(MODEL),N+1,72-N),' ')+N;
       NAME = SUBSTR(CARD(MODEL),N,L-N);
       END;
    END;
 DO MEND = MODEL+1 TO END UNTIL (SUBSTR(CARD(MEND),N,5) = 'MEND ');
    IF SUBSTR(CARD(MODEL),1,1) ^= '*' &
         SUBSTR(CARD(MODEL),1,2) ^= '.*'
    THEN DO;
       I = INDEX(CARD(MEND),' ');
       N = VERIFY(SUBSTR(CARD(MEND),I+1,72-I),' ')+I;
       END;
    ELSE N = 1;
    END;
 END FINDMACRO;
1/*********************************************************************/
 /* EXCLUDE MACROS FROM SUBSEQUENT COMPARES                           */
 /*********************************************************************/
 EXCLUDEMACROS: PROCEDURE;
 /*-------------------------------------------------------------------*/
 DECLARE I          FIXED BINARY;
 DECLARE MACRO      FIXED BINARY INITIAL (0);
 DECLARE MEND       FIXED BINARY INITIAL (0);
 DECLARE NAME       CHARACTER(8) VARYING INITIAL ('');
 DECLARE START      FIXED BINARY;
 /*-------------------------------------------------------------------*/
 START = 1;
 DO UNTIL (NAME = '');
    CALL FINDMACRO (OLDCARD,START,OLDNUM,NAME,MACRO,MEND);
    IF NAME ^= ''
    THEN DO I = MACRO TO MEND;
       IF OLDXREF(I) = 0
       THEN OLDXREF(I) = -1;
       END;
    START = MEND+1;
    END;
 START = 1;
 DO UNTIL (NAME = '');
    CALL FINDMACRO (NEWCARD,START,NEWNUM,NAME,MACRO,MEND);
    IF NAME ^= ''
    THEN DO I = MACRO TO MEND;
       IF NEWXREF(I) = 0
       THEN NEWXREF(I) = -1;
       END;
    START = MEND+1;
    END;
 END EXCLUDEMACROS;
1/*********************************************************************/
 /* FIND MODULE NAME                                                  */
 /*********************************************************************/
 FINDMODULE: PROCEDURE;
 /*-------------------------------------------------------------------*/
 DECLARE BLANK      FIXED BINARY;
 DECLARE 1 CHANGECARD,
           2 CONSTANT1 CHARACTER(10) INITIAL ('./ CHANGE '),
           2 CONSTANT2 CHARACTER(12) INITIAL ('SEQFLD=(738,'),
           2 SEQFIELD  CHARACTER(3),
           2 CONSTANT3 CHARACTER(1)  INITIAL (')'),
           2 CONSTANT4 CHARACTER(6)  INITIAL (',NAME='),
           2 NAME      CHARACTER(8),
           2 CONSTANT5 CHARACTER(40) INITIAL ((40)' ');
 DECLARE I          FIXED BINARY;
 DECLARE OMACRO     FIXED BINARY INITIAL (0);
 DECLARE OMEND      FIXED BINARY INITIAL (0);
 DECLARE OPERATOR   FIXED BINARY;
 /*-------------------------------------------------------------------*/
 DO I = 1 TO OLDNUM WHILE (MODULE = '');
    IF OLDXREF(I) = 0 &
       SUBSTR(OLDCARD(I),1,1) ^= '*' &
       SUBSTR(OLDCARD(I),1,2) ^= '.*'
    THEN DO;
       BLANK = INDEX(OLDCARD(I),' ');
       OPERATOR = VERIFY(SUBSTR(OLDCARD(I),BLANK+1),' ')+BLANK;
       IF OPERATOR ^= BLANK
       THEN IF SUBSTR(OLDCARD(I),OPERATOR,6) = 'START ' ×
               SUBSTR(OLDCARD(I),OPERATOR,6) = 'CSECT '
            THEN MODULE = SUBSTR(OLDCARD(I),1,BLANK-1);
       END;
    END;
 IF MODULE = ''
 THEN CALL FINDMACRO (OLDCARD,1,OLDNUM,MODULE,OMACRO,OMEND);
 IF DECK = 'DECK' & SYSINCARDS = 0
 THEN DO;
    NAME = MODULE;
    SEQFIELD = SEQFLD;
    WRITE FILE (SYSPNCH) FROM (CHANGECARD);
    END;
 END FINDMODULE;
1/*********************************************************************/
 /* PROCESS OPEN CODE                                                 */
 /*********************************************************************/
 OPENCODE: PROCEDURE;
 /*-------------------------------------------------------------------*/
 DECLARE NNEXT FIXED BINARY;
 DECLARE NPREV FIXED BINARY;
 DECLARE ONEXT FIXED BINARY INITIAL(-1);
 DECLARE OPREV FIXED BINARY INITIAL(1);
 /*-------------------------------------------------------------------*/
 OLDXREF(OLDNUM+1) = NEWNUM+1;
 NEWXREF(NEWNUM+1) = OLDNUM+1;
 DO WHILE (OPREV <= OLDNUM);
    DO OPREV = ONEXT+2 TO OLDNUM WHILE (OLDXREF(OPREV) > 0);
       END;
    IF OPREV <= OLDNUM
    THEN DO;
       NPREV = OLDXREF(OPREV-1)+1;
       DO ONEXT = OPREV+1 TO OLDNUM WHILE (OLDXREF(ONEXT) <= 0);
          END;
       NNEXT = OLDXREF(ONEXT)-1;
       ONEXT = ONEXT-1;
       CALL SEQSYMBOL (OPREV,ONEXT,NPREV,NNEXT);
       END;
    END;
 END OPENCODE;
1/*********************************************************************/
 /* SEARCH FOR SEQUENCE SYMBOLS                                       */
 /*********************************************************************/
 SEQSYMBOL: PROCEDURE (OSTART,OEND,NSTART,NEND);
 /*-------------------------------------------------------------------*/
 DECLARE NEND       FIXED BINARY;
 DECLARE NEWNAME    CHARACTER(63) VARYING INITIAL ('');
 DECLARE NINDEX     FIXED BINARY INITIAL (0);
 DECLARE NNEXT      FIXED BINARY INITIAL (0);
 DECLARE NPREV      FIXED BINARY;
 DECLARE NSTART     FIXED BINARY;
 DECLARE OEND       FIXED BINARY;
 DECLARE OINDEX     FIXED BINARY INITIAL (0);
 DECLARE OLDNAME    CHARACTER(63) VARYING INITIAL ('');
 DECLARE ONEXT      FIXED BINARY;
 DECLARE OPREV      FIXED BINARY;
 DECLARE OSTART     FIXED BINARY;
 /*-------------------------------------------------------------------*/
 OPREV = OSTART;
 NPREV = NSTART;
 ONEXT = OSTART;
 DO UNTIL (OLDNAME = '' × ONEXT > OEND);
    CALL FINDSEQSYMBOL (OLDCARD,OLDXREF,ONEXT,OEND,OLDNAME,OINDEX);
    ONEXT = OINDEX+1;
    IF OLDNAME ^= ''
    THEN DO;
       NNEXT = NPREV;
       DO UNTIL (OLDNAME = NEWNAME × NEWNAME = '' × NNEXT > NEND);
          CALL FINDSEQSYMBOL
               (NEWCARD,NEWXREF,NNEXT,NEND,NEWNAME,NINDEX);
          NNEXT = NINDEX+1;
          END;
       IF OLDNAME = NEWNAME
       THEN DO;
          CALL NAME (OPREV,OINDEX,NPREV,NINDEX);
          OPREV = ONEXT;
          NPREV = NNEXT;
          END;
       END;
    END;
 IF OPREV <= OEND & NPREV <= NEND
 THEN CALL NAME (OPREV,OEND,NPREV,NEND);
 END SEQSYMBOL;
1/*********************************************************************/
 /* FIND NEXT SEQUENCE SYMBOL                                         */
 /*********************************************************************/
 FINDSEQSYMBOL: PROCEDURE (CARD,XREF,START,END,NAME,LOC);
 /*-------------------------------------------------------------------*/
 DECLARE CARD(*)    CHARACTER(80) CONTROLLED;
 DECLARE END        FIXED BINARY;
 DECLARE I          FIXED BINARY;
 DECLARE LOC        FIXED BINARY;
 DECLARE N          FIXED BINARY;
 DECLARE NAME       CHARACTER(63) VARYING;
 DECLARE XREF(*)    FIXED BINARY(15) CONTROLLED;
 DECLARE START      FIXED BINARY;
 /*-------------------------------------------------------------------*/
 NAME = '';
 LOC = 0;
 DO I = START TO END UNTIL (NAME ^= '');
    IF XREF(I) = 0 &
       SUBSTR(CARD(I),1,1) = '.' &
       VERIFY(SUBSTR(CARD(I),2,1),ALPHA) = 0
    THEN DO;
       N = INDEX(CARD(I),' ')-1;
       IF VERIFY(SUBSTR(CARD(I),2,N-1),ALPHANUM) = 0
       THEN DO;
          NAME = SUBSTR(CARD(I),1,N);
          LOC = I;
          END;
       END;
    END;
 END FINDSEQSYMBOL;
1/*********************************************************************/
 /* SEARCH FOR NAMES                                                  */
 /*********************************************************************/
 NAME: PROCEDURE (OSTART,OEND,NSTART,NEND);
 /*-------------------------------------------------------------------*/
 DECLARE NEND       FIXED BINARY;
 DECLARE NEWNAME    CHARACTER(63) VARYING INITIAL ('');
 DECLARE NINDEX     FIXED BINARY;
 DECLARE NNEXT      FIXED BINARY INITIAL (0);
 DECLARE NPREV      FIXED BINARY;
 DECLARE NSTART     FIXED BINARY;
 DECLARE OEND       FIXED BINARY;
 DECLARE OINDEX     FIXED BINARY INITIAL (0);
 DECLARE OLDNAME    CHARACTER(63) VARYING INITIAL ('');
 DECLARE ONEXT      FIXED BINARY;
 DECLARE OPREV      FIXED BINARY;
 DECLARE OSTART     FIXED BINARY;
 /*-------------------------------------------------------------------*/
 OPREV = OSTART;
 NPREV = NSTART;
 ONEXT = OSTART;
 DO UNTIL (OLDNAME = '' × ONEXT > OEND);
    CALL FINDNAME (OLDCARD,OLDXREF,ONEXT,OEND,OLDNAME,OINDEX);
    ONEXT = OINDEX+1;
    IF OLDNAME ^= ''
    THEN DO;
       NNEXT = NPREV;
       DO UNTIL (OLDNAME = NEWNAME × NEWNAME = '' × NNEXT > NEND);
          CALL FINDNAME (NEWCARD,NEWXREF,NNEXT,NEND,NEWNAME,NINDEX);
          NNEXT = NINDEX+1;
          IF OLDNAME = NEWNAME
          THEN DO;
             CALL STATEMENT (OPREV,OINDEX,NPREV,NINDEX);
             OPREV = ONEXT;
             NPREV = NNEXT;
             END;
          END;
       END;
    END;
 IF OPREV <= OEND & NPREV <= NEND
 THEN CALL STATEMENT (OPREV,OEND,NPREV,NEND);
 END NAME;
1/*********************************************************************/
 /* FIND NEXT NAME                                                    */
 /*********************************************************************/
 FINDNAME: PROCEDURE (CARD,XREF,START,END,NAME,LOC);
 /*-------------------------------------------------------------------*/
 DECLARE CARD(*)    CHARACTER(80) CONTROLLED;
 DECLARE END        FIXED BINARY;
 DECLARE I          FIXED BINARY;
 DECLARE LOC        FIXED BINARY;
 DECLARE N          FIXED BINARY;
 DECLARE NAME       CHARACTER(63) VARYING;
 DECLARE START      FIXED BINARY;
 DECLARE XREF(*)    FIXED BINARY(15) CONTROLLED;
 /*-------------------------------------------------------------------*/
 NAME = '';
 LOC = 0;
 DO I = START TO END UNTIL (NAME ^= '');
    IF XREF(I) = 0 &
       VERIFY(SUBSTR(CARD(I),1,1),ALPHA) = 0
    THEN DO;
       N = INDEX(CARD(I),' ')-1;
       IF VERIFY(SUBSTR(CARD(I),1,N),ALPHANUM) = 0
       THEN DO;
          NAME = SUBSTR(CARD(I),1,N);
          LOC = I;
          END;
       END;
    END;
 END FINDNAME;
1/*********************************************************************/
 /* COMPARE STATEMENTS                                                */
 /*********************************************************************/
 STATEMENT: PROCEDURE (OSTART,OEND,NSTART,NEND);
 /*-------------------------------------------------------------------*/
 DECLARE NEND       FIXED BINARY;
 DECLARE NEWTEMP    CHARACTER(80);
 DECLARE NNEXT      FIXED BINARY;
 DECLARE NPREV      FIXED BINARY;
 DECLARE NSTART     FIXED BINARY;
 DECLARE OEND       FIXED BINARY;
 DECLARE OLDTEMP    CHARACTER(80);
 DECLARE ONEXT      FIXED BINARY;
 DECLARE OPREV      FIXED BINARY;
 DECLARE OSTART     FIXED BINARY;
 /*-------------------------------------------------------------------*/
 NPREV = NSTART;
 OPREV = OSTART;
 DO ONEXT = OSTART TO OEND WHILE (NPREV <= NEND);
    IF NONTRIVIAL(OLDCARD(ONEXT)) & OLDXREF(ONEXT) = 0
    THEN DO NNEXT = NPREV TO NEND UNTIL (OLDXREF(ONEXT) > 0);
       IF NONTRIVIAL(NEWCARD(NNEXT)) & NEWXREF(NNEXT) = 0
       THEN DO;
          OLDTEMP = OLDCARD(ONEXT);
          NEWTEMP = NEWCARD(NNEXT);
          IF TRANSLAT = 'TRANSLATE'
          THEN DO;
             OLDTEMP = TRANSLATE(OLDTEMP,CHARSET);
             NEWTEMP = TRANSLATE(NEWTEMP,CHARSET);
             END;
          IF SUBSTR(OLDTEMP,1,COLUMN) = SUBSTR(NEWTEMP,1,COLUMN)
          THEN DO;
             OLDXREF(ONEXT) = NNEXT;
             NEWXREF(NNEXT) = ONEXT;
             IF OPREV < ONEXT & NPREV < NNEXT
             THEN CALL TRIVIAL (OPREV,ONEXT-1,NPREV,NNEXT-1);
             OPREV = ONEXT+1;
             NPREV = NNEXT+1;
             END;
          END;
       END;
    END;
 IF OPREV <= OEND & NPREV <= NEND
 THEN CALL TRIVIAL (OPREV,OEND,NPREV,NEND);
 END STATEMENT;
1/*********************************************************************/
 /* DETERMINE WHETHER A CARD IS TRIVIAL                               */
 /*********************************************************************/
 NONTRIVIAL: PROCEDURE (CARD) RETURNS (BIT(1));
 /*-------------------------------------------------------------------*/
 DECLARE BLANK      FIXED BINARY;
 DECLARE CARD       CHARACTER(80);
 DECLARE CONTROL    BIT(1) INITIAL ('0'B);
 DECLARE OPERATOR   FIXED BINARY;
 DECLARE PATTERN    BIT(1) INITIAL ('0'B);
 /*-------------------------------------------------------------------*/
 IF SUBSTR(CARD,1,1) = '*' × SUBSTR(CARD,1,2) = '.*'
 THEN IF VERIFY(SUBSTR(CARD,1,COLUMN),SUBSTR(CARD,1,6)) = 0
      THEN PATTERN = YES;
 IF ^ PATTERN
 THEN DO;
    BLANK = INDEX(CARD,' ');
    OPERATOR = VERIFY(SUBSTR(CARD,BLANK+1),' ')+BLANK;
    IF OPERATOR > BLANK
    THEN CONTROL = SUBSTR(CARD,OPERATOR,6) = 'EJECT ' ×
                   SUBSTR(CARD,OPERATOR,4) = 'POP '   ×
                   SUBSTR(CARD,OPERATOR,6) = 'PRINT ' ×
                   SUBSTR(CARD,OPERATOR,5) = 'PUSH '  ×
                   SUBSTR(CARD,OPERATOR,6) = 'REPRO ' ×
                   SUBSTR(CARD,OPERATOR,6) = 'SPACE ';
    END;
 RETURN (^(PATTERN × CONTROL));
 END NONTRIVIAL;
1/*********************************************************************/
 /* COMPARE TRIVIAL CARDS                                             */
 /*********************************************************************/
 TRIVIAL: PROCEDURE (OSTART,OEND,NSTART,NEND);
 /*-------------------------------------------------------------------*/
 DECLARE NEND       FIXED BINARY;
 DECLARE NEWTEMP    CHARACTER(80);
 DECLARE NNEXT      FIXED BINARY;
 DECLARE NPREV      FIXED BINARY;
 DECLARE NSTART     FIXED BINARY;
 DECLARE OEND       FIXED BINARY;
 DECLARE OLDTEMP    CHARACTER(80);
 DECLARE ONEXT      FIXED BINARY;
 DECLARE OSTART     FIXED BINARY;
 /*-------------------------------------------------------------------*/
 NPREV = NSTART;
 DO ONEXT = OSTART TO OEND WHILE (NPREV <= NEND);
    DO NNEXT = NPREV TO NEND WHILE (OLDXREF(ONEXT) = 0);
       OLDTEMP = OLDCARD(ONEXT);
       NEWTEMP = NEWCARD(NNEXT);
       IF TRANSLAT = 'TRANSLATE'
       THEN DO;
          OLDTEMP = TRANSLATE(OLDTEMP,CHARSET);
          NEWTEMP = TRANSLATE(NEWTEMP,CHARSET);
          END;
       IF NEWXREF(NNEXT) = 0 &
          SUBSTR(OLDTEMP,1,COLUMN) = SUBSTR(NEWTEMP,1,COLUMN)
       THEN DO;
          OLDXREF(ONEXT) = NNEXT;
          NEWXREF(NNEXT) = ONEXT;
          NPREV = NNEXT+1;
          END;
       END;
    END;
 END TRIVIAL;
1/*********************************************************************/
 /* PRINT/PUNCH OUTPUT                                                */
 /*********************************************************************/
 OUTPUT: PROCEDURE;
 /*-------------------------------------------------------------------*/
 DECLARE ADDFORMAT  CHARACTER(6) INITIAL('SMP');
 DECLARE HEADING    CHARACTER(116) INITIAL ((116)' ');
 DECLARE I          FIXED BINARY;
 DECLARE NNEXT      FIXED BINARY;
 DECLARE NPREV      FIXED BINARY;
 DECLARE OLDSEQ1    CHARACTER(8);
 DECLARE OLDSEQ2    CHARACTER(8);
 DECLARE ONEXT      FIXED BINARY INITIAL (1);
 DECLARE OPREV      FIXED BINARY INITIAL (0);
 DECLARE PAGE       FIXED BINARY INITIAL (1);
 /*-------------------------------------------------------------------*/
 SUBSTR(HEADING,1,COLUMN+7) =
                'ACTION COLUMN'××REPEAT('-',COLUMN-8)××'>';
 SUBSTR(HEADING,80,37) =
                'OLD-SEQN NEW-SEQN    '××MODULE××'    PAGE';
 IF LIST ^= 'NOLIST'
 THEN PUT FILE (SYSPRINT) EDIT
          (HEADING,PAGE,'') (A(116),F(4),SKIP(1),A(0));
 ON ENDPAGE (SYSPRINT) BEGIN;
    PAGE = PAGE+1;
    PUT FILE (SYSPRINT) EDIT
        (HEADING,PAGE,'') (PAGE,A(116),F(4),SKIP(2),A(0));
    END;
 OLDSEQ1 = SUBSTR(OLDCARD(1),73,8);
 SUBSTR(OLDSEQ1,SEQCOL-72,SEQLEN) = REPEAT('0',SEQLEN);
 DO WHILE (ONEXT <= OLDNUM);
    DO ONEXT = ONEXT TO OLDNUM WHILE (OLDXREF(ONEXT) <= 0);
       END;
    NPREV = OLDXREF(OPREV);
    NNEXT = OLDXREF(ONEXT);
    OLDSEQ2 = SUBSTR(OLDCARD(ONEXT),73,8);
    IF NNEXT-NPREV > 1
    THEN CALL ADDITION
         (ADDFORMAT,OLDSEQ1,OLDSEQ2,NPREV+1,NNEXT-1);
    ADDFORMAT = FORMAT;
    IF ONEXT-OPREV > 1
    THEN CALL DELETION (OPREV+1,ONEXT-1);
    OPREV = ONEXT;
    DO ONEXT = ONEXT+1 TO OLDNUM
       WHILE (OLDXREF(ONEXT) > 0 & OLDXREF(ONEXT)-OLDXREF(OPREV) <= 1);
       END;
    MATCHED = MATCHED+ONEXT-OPREV;
    IF LIST = 'ALL'
    THEN PUT FILE (SYSPRINT) EDIT
             (('      ',OLDCARD(I),
             SUBSTR(NEWCARD(OLDXREF(I)),73,8)
             DO I = OPREV TO ONEXT-1))
             (SKIP,A(6),X(1),A(80),X(1),A(8));
    OPREV = ONEXT-1;
    OLDSEQ1 = SUBSTR(OLDCARD(OPREV),73,8);
    END;
 OLDSEQ2 = (8)'9';
 NPREV = OLDXREF(OLDNUM);
 IF NPREV < NEWNUM
 THEN CALL ADDITION (ADDFORMAT,OLDSEQ1,OLDSEQ2,NPREV+1,NEWNUM);
 ON ENDPAGE (SYSPRINT) SYSTEM;
 END OUTPUT;
1/*********************************************************************/
 /* OLD CARDS DELETED                                                 */
 /*********************************************************************/
 DELETION: PROCEDURE (START,END);
 /*-------------------------------------------------------------------*/
 DECLARE 1 COMMENTCARD,
           2 CONSTANT1 CHARACTER(1) INITIAL ('*'),
           2 CONSTANT2 CHARACTER(34) INITIAL ((34)' '),
           2 CONSTANT3 CHARACTER(7) INITIAL ('DELETED'),
           2 CONSTANT4 CHARACTER(21) INITIAL ((21)' '),
           2 MOD       CHARACTER(8),
           2 CONSTANT5 CHARACTER(1) INITIAL (' '),
           2 SEQ       CHARACTER(8);
 DECLARE 1 DELETECARD,
           2 CONSTANT1 CHARACTER(15) INITIAL ('./ DELETE SEQ1='),
           2 SEQ1      CHARACTER(8),
           2 CONSTANT2 CHARACTER(6) INITIAL (',SEQ2='),
           2 SEQ2      CHARACTER(8),
           2 CONSTANT3 CHARACTER(43) INITIAL ((43)' ');
 DECLARE END        FIXED BINARY;
 DECLARE I          FIXED BINARY;
 DECLARE START      FIXED BINARY;
 /*-------------------------------------------------------------------*/
 DELETED = DELETED+END-START+1;
 MOD = MODID;
 IF LIST ^= 'NOLIST'
 THEN PUT FILE (SYSPRINT) EDIT
          (('---   ',OLDCARD(I) DO I = START TO END))
          (SKIP,A(6),X(1),A(80));
 IF DECK = 'DECK' & FORMAT = 'UPDATE'
 THEN DO;
    SEQ1 = SUBSTR(OLDCARD(START),73,8);
    SEQ2 = SUBSTR(OLDCARD(END),73,8);
    WRITE FILE (SYSPNCH) FROM (DELETECARD);
    END;
 IF DECK = 'DECK' & FORMAT = 'SMP'
 THEN DO I = START TO END;
    SEQ = SUBSTR(OLDCARD(I),73,8);
    WRITE FILE (SYSPNCH) FROM (COMMENTCARD);
    END;
 END DELETION;
1/*********************************************************************/
 /* NEW CARDS ADDED                                                   */
 /*********************************************************************/
 ADDITION: PROCEDURE (FORMAT,SEQ,SEQ2,START,END);
 /*-------------------------------------------------------------------*/
 DECLARE BUFFER     CHARACTER(80) BASED;
 DECLARE FORMAT     CHARACTER(6);
 DECLARE I          FIXED BINARY;
 DECLARE END        FIXED BINARY;
 DECLARE NEWPIC     PICTURE'99999999' INITIAL ('00000000');
 DECLARE 1 NUMBERCARD,
           2 CONSTANT1 CHARACTER(15) INITIAL ('./ NUMBER SEQ1='),
           2 SEQ1      PICTURE'XXXXXXXX',
           2 CONSTANT2 CHARACTER(6) INITIAL (',NEW1='),
           2 NEW1      PICTURE'XXXXXXXX',
           2 CONSTANT3 CHARACTER(6) INITIAL (',INCR='),
           2 INCR1     PICTURE'99999999',
           2 CONSTANT4 CHARACTER(11) INITIAL (',INSERT=YES'),
           2 CONSTANT5 CHARACTER(18) INITIAL ((18)' ');
 DECLARE P          POINTER;
 DECLARE SEQ        CHARACTER(8);
 DECLARE SEQ2       CHARACTER(8);
 DECLARE START      FIXED BINARY;
 /*-------------------------------------------------------------------*/
 ADDED = ADDED+END-START+1;
 IF DECK = 'DECK'
 THEN NEWPIC = BINARY(SUBSTR(SEQ,SEQCOL-72,SEQLEN))+INCR;
 IF DECK = 'DECK' & FORMAT = 'UPDATE'
 THEN DO;
    SEQ1 = SEQ;
    NEW1 = SEQ;
    SUBSTR(NEW1,SEQCOL-72,SEQLEN) = SUBSTR(NEWPIC,9-SEQLEN,SEQLEN);
    INCR1 = INCR;
    WRITE FILE (SYSPNCH) FROM (NUMBERCARD);
    END;
 IF LIST ^= 'NOLIST'
 THEN PUT FILE (SYSPRINT) EDIT
          (('   +++',SUBSTR(NEWCARD(I),1,72),SUBSTR(NEWCARD(I),73,8)
            DO I = START TO END))
          (SKIP,A(6),X(1),A(72),X(9),A(8));
 DO I = START TO END;
    IF DECK = 'DECK'
    THEN DO;
       IF FORMAT = 'UPDATE'
       THEN SUBSTR(NEWCARD(I),73,8) = (8)' ';
       IF FORMAT = 'SMP'
       THEN DO;
          SUBSTR(NEWCARD(I),73,8) = SEQ;
          SUBSTR(NEWCARD(I),SEQCOL,SEQLEN) =
             SUBSTR(NEWPIC,9-SEQLEN,SEQLEN);
          IF SUBSTR(NEWCARD(I),73,8) >= SEQ2
          THEN DO;
             PUT FILE (SYSPRINT) EDIT
                 ('****** NEW SEQUENCE INSERT ERROR: OLD = ',SEQ)
                 (SKIP,A,A);
             IF TERM = 'TERM'
             THEN PUT FILE (SYSTERM) EDIT
                      ('****** NEW SEQUENCE INSERT ERROR: OLD = ',SEQ)
                      (SKIP,A,A);
             END;
          NEWPIC = NEWPIC+INCR;
          END;
       LOCATE BUFFER FILE (SYSPNCH) SET (P);
       P->BUFFER = NEWCARD(I);
       END;
    END;
 END ADDITION;
1/*********************************************************************/
 /* PRINT STATISTICS                                                  */
 /*********************************************************************/
 STATISTICS: PROCEDURE;
 /*-------------------------------------------------------------------*/
 PUT FILE (SYSPRINT) EDIT
          ('******** PARAMETERS ********')  (PAGE,A)
          ('          COLUMN = ',COLUMN)    (SKIP,A,F(2))
          ('            DECK = ',DECK)      (SKIP,A,A)
          ('          FORMAT = ',FORMAT)    (SKIP,A,A)
          ('            INCR = ',INCR)      (SKIP,A,F(5))
          ('       LINECOUNT = ',LINECOUNT) (SKIP,A,F(2))
          ('            LIST = ',LIST)      (SKIP,A,A)
          ('           MODID = ',MODID)     (SKIP,A,A)
          ('          SEQFLD = ',SEQFLD)    (SKIP,A,A)
          ('            SIZE = ',SIZE)      (SKIP,A,F(5))
          ('            TERM = ',TERM)      (SKIP,A,A)
          ('******** STATISTICS ********')  (SKIP(2),A)
          ('          MODULE = ',MODULE)    (SKIP,A,A)
          ('OLD MODULE CARDS = ',OLDNUM)    (SKIP,A,F(5))
          ('NEW MODULE CARDS = ',NEWNUM)    (SKIP,A,F(5))
          ('     ADDED CARDS = ',ADDED)     (SKIP,A,F(5))
          ('   DELETED CARDS = ',DELETED)   (SKIP,A,F(5))
          (' UNCHANGED CARDS = ',MATCHED)   (SKIP,A,F(5));
 IF TERM = 'TERM'
 THEN PUT FILE (SYSTERM) EDIT
          ('******** PARAMETERS ********')  (PAGE,A)
          ('          COLUMN = ',COLUMN)    (SKIP,A,F(2))
          ('            DECK = ',DECK)      (SKIP,A,A)
          ('          FORMAT = ',FORMAT)    (SKIP,A,A)
          ('            INCR = ',INCR)      (SKIP,A,F(5))
          ('       LINECOUNT = ',LINECOUNT) (SKIP,A,F(2))
          ('            LIST = ',LIST)      (SKIP,A,A)
          ('           MODID = ',MODID)     (SKIP,A,A)
          ('          SEQFLD = ',SEQFLD)    (SKIP,A,A)
          ('            SIZE = ',SIZE)      (SKIP,A,F(5))
          ('            TERM = ',TERM)      (SKIP,A,A)
          ('******** STATISTICS ********')  (SKIP(2),A)
          ('          MODULE = ',MODULE)    (SKIP,A,A)
          ('OLD MODULE CARDS = ',OLDNUM)    (SKIP,A,F(5))
          ('NEW MODULE CARDS = ',NEWNUM)    (SKIP,A,F(5))
          ('     ADDED CARDS = ',ADDED)     (SKIP,A,F(5))
          ('   DELETED CARDS = ',DELETED)   (SKIP,A,F(5))
          (' UNCHANGED CARDS = ',MATCHED)   (SKIP,A,F(5));
 IF MATCHED+ADDED ^= NEWNUM × MATCHED+DELETED ^= OLDNUM
 THEN CALL PLIDUMP ('TNFSH','LOGIC ERROR');
 END STATISTICS;
1/*********************************************************************/
 /* CLEAN UP                                                          */
 /*********************************************************************/
 CLEANUP: PROCEDURE;
 /*-------------------------------------------------------------------*/
 CLOSE FILE (SYSPRINT),
       FILE (SYSPNCH),
       FILE (SYSTERM);
 FREE OLDCARD,OLDXREF,NEWCARD,NEWXREF;
 END CLEANUP;
1/*********************************************************************/
 END COMPASM;
