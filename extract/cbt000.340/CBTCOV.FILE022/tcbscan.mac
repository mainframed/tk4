PRIVMAP  CSECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*******************************************************************
*
*        THIS MODULE IS INTENDED TO BE USED AS AN EXIT TO AMDPRDMP,
*        AND WILL OPERATE AS AN EXIT.     THE VERB 'PRIVMAP' WILL
*        CAUSE THIS EXIT TO GET CONTROL, ONCE AN ENTRY IS ADDED
*        TO AMDPRECT.  THIS ROUTINE USES STANDARD PRINTDUMP LINKAGE
*        TO FORMAT AND PRINT CONTROL BLOCKS, PRINT MESSAGES, AND
*        TO ACCESS DUMPED DATA.  IT IS INTENDED TO BE USED TO
*        AID THE PSR IN DETERMINING A PROBLEM, WHEN A USER PRIVATE
*        AREA IS DEPLETED.  THE PROGRAM DOES NOT USE A GETMAINED
*        AREA FOR ITS' WORKAREA, SO IT IS NOT RE-ENTRANT, BUT THIS
*        SHOULD NOT PRESENT A PROBLEM, IF IT IS NOT PLACED IN LPA.
*        THE EXIT CHANGES SOME DATA IN THE WORKAREA, AFTER MOVING
*        THE DATA FROM PRINTDUMPS' BUFFER, FOR EASE OF FORMATTING.
*        WORKAREA LABELS MAY HAVE TO BE CHANGED, IF THE FOLLOWING MSS
*        CONTROL BLOCKS ARE CHANGED:
*               CVT, SPQE, DQE, FQE, OR TCB MSS BLOCKS.
*        THIS ROUTINE IS NOT FORMALLY SUPPORTED IN ANY WAY, BUT
*        I WOULD BE HAPPY TO ATTEMPT ANY CORRECTIONS, ON AN 'AS
*        AVAILABLE' BASIS.
*
*        FRANK H. CONNERY, JR., REGION 9, T.A.G.
*        (312) 245-7850   (IBM TIE LINE 8-261-7850)
*        REGION 9, TECHNICAL SUPPORT GROUP  (F.E.)
*        1 IBM PLAZA  (INTERNAL ZIP  38-528)
*        CHICAGO, ILLINOIS   60611
*
*        MODIFIED BY LIONEL DYCK, ROCKWELL INTERNATIONAL
*        PO BOX 2515, SEAL BEACH, CALIF 90740
*        - RUN AS NORMAL PRDMP EXIT INSTEAD OF TCB EXIT BY
*          DOING MY OWN SCAN OF THE TCB'S
*
*******************************************************************
         EJECT
         ENTRY PRIVMAP1
PRIVMAP1 SAVE (14,12),,PRIVMAP            SAVE REGISTERS
         BALR  12,0                       ESTABLISH BASE REGISTER
         USING *,12
         LA    7,CMAPSAV                  POINT TO MY SAVE AREA
         ST    13,CMAPSAV+4               ESTABLISH
         ST    7,8(,13)                    SAVE AREA LINKAGE
         ST    13,SAVPTR                  SAVE SAVE POINTER
         LR    13,7
         USING ABDPL,1                    ESTABLISH PARMLIST DSECT
         BAL   11,BLNKPRNT                SPACE OUTPUT
         L     R8,ADPLCVT                 -> CVT
         BAL   R11,GETBLOK                AND GET IT
         USING CVT,R8                     ESATABLISH ADDRESSABILITY
         L     R8,CVTASVT                 -> ASVT
         BAL   R11,GETBLOK                AND GET IT
         DROP  R8
         USING ASVT,R8                    ESTABLISH ADDRESSABILITY
         USING ABDPL,R1                   ESTAB ADDR TO ABDPL
         LH    R11,ADPLASID               LOAD CURRENT ASID
         SLL   R11,2                      AND MULTIPLY BY 4
         LA    R8,ASVTENTY                -> FIRST ASVT ENTRY
         AR    R8,R11                     AND NOW -> CURRENT ASID
         DROP  R8
         BAL   R11,GETBLOK                NOW GET CURRENT ASCB
         USING ASCB,R8                    ESTAB ADDR TO ASCB
         L     R8,ASCBASXB                -> ASXB
         DROP  R8
         BAL   R11,GETBLOK                NOW GET ASXB
         USING ASXB,R8                    ESTAB ADDR TO ASXB
         L     R8,ASXBFTCB                -> FIRST TCB
         DROP  R8
         BAL   R11,GETBLOK                NOW GET THE TCB
         USING TCB,R8                     ESTABLISH USING FOR TCB
         B     MAPIT
TCBLOOP  EQU   *
         L     R8,SAVETCB                 RELOAD TCB ADDR
         L     R8,TCBTCB                  -> NEXT TCB
         LTR   R8,R8                      ANY TCB THERE
         BNZ   MAPIT                      YES DO THE MAPPING
         L     13,SAVPTR                  POINT TO SAVEAREA
         LM    14,12,12(13)               RESTORE CALLERS' REGS
         BR    14                         ALL DONE, RETURN TO PRTDMP
MAPIT    EQU   *                          DO THE MAPPING
         L     7,ADPLBUF                  LOCATE PRINT BUFFER
         MVC   0(24,7),PRIVMSG            MOVE PRIVATE MSG
         BAL   11,MSGSET                  LINK TO PRINT IT
         ST    R8,SAVETCB                 SAVE CURRENT TCB ADDR
         LA    8,TCBMSS-TCB(,R8)              SET TCBMSS POINTER
         BAL   11,GETBLOK                 RETRIEVE POINTER
         LTR   15,15                      RETRIEVE OK?
         BZ    MSGOOD                     YES, CONTINUE
         MVC   CBNAME,$CBMSSB             ELSE MOVE 'TCBMSSB'
         BAL   11,CBMSG                   LINK TO PRINT IT
         B     TCBLOOP
MSGOOD   MVC   SPQEPTR(4),0(8)            SET TCBMSS SPQE
         MVI   SPQEPTR,X'00'              ENSURE HI BYTE ZERO
         BAL   7,MSSROUTN                 LINK TO FORMAT MSS BLOCKS
         BAL   11,BLNKPRNT                SPACE OUTPUT
         L     7,ADPLBUF                  LOCATE PRINT BUFFER
         MVC   0(24,7),UKYSPMSG           MOVE UKYSPACE MSG
         BAL   11,MSGSET                  LINK TO PRINT IT
         L     8,SAVETCB                  GET TCB POINTER
         LA    8,TCBUKYSP-TCB(,R8)        GET USER KEY SPACE POINTER
         BAL   11,GETBLOK                 RETREIVE POINTER FROM DUMP
         LTR   15,15                      RETRIEVE OK?
         BZ    UKGOOD                     YES, CONTINUE
         MVC   CBNAME,$CBUKYSP            ELSE MOVE 'TCBUKYSP'
         BAL   11,CBMSG                   LINK TO PRINT IT
         B     TCBLOOP
UKGOOD   MVC   SPQEPTR(4),0(8)            SET UKYSP SPQE
         MVI   SPQEPTR,X'00'              ENSURE HI BYTE ZERO
         BAL   7,MSSROUTN                 LINK TO FORMAT MSS BLOCKS
         BAL   11,BLNKPRNT                SPACE OUTPUT
         L     7,ADPLBUF                  LOCATE PRINT BUFFER
         MVC   0(24,7),SWAMSG             MOVE SWA MSG
         BAL   11,MSGSET                  LINK TO PRINT IT
         L     8,SAVETCB                  GET TCB POINTER
         LA    8,TCBSWA-TCB(,R8)          GET SWA SPQE POINTER
         BAL   11,GETBLOK                 GET SPQE POINTER FROM DUMP
         LTR   15,15                      RETRIEVE OK?
         BZ    SWGOOD                     YES, CONTINUE
         MVC   CBNAME,$CBSWA              ELSE MOVE 'TCBSWA'
         BAL   11,CBMSG                   LINK TO PRINT IT
         B     TCBLOOP
SWGOOD   MVC   SPQEPTR(4),0(8)            SET SWA SPQE
         MVI   SPQEPTR,X'00'              ENSURE HI BYTE ZERO
         BAL   7,MSSROUTN                 LINK TO FORMAT MSS BLOCKS
OUT      BAL   11,BLNKPRNT                SPACE OUTPUT
         L     7,ADPLBUF                  LOCATE PRINT BUFFER
         MVC   0(24,7),COMPMSG            MOVE COMPLETION MSG
         BAL   11,MSGSET                  LINK TO PRINT IT
         B     TCBLOOP                    KEEP LOOPING TILL DONE
SWAMSG   DC    C'*** SWA MSS BLOCKS  ****'
UKYSPMSG DC    C'*** UKYSP MSS BLOCKS ***'
PRIVMSG  DC    C'** PRIVATE MSS BLOCKS **'
COMPMSG  DC    C'* PRIVATE MAP COMPLETE *'
         DS    0F
         EJECT
********************************************************************
*
*        SUBROUTINE TO FORMAT MSS CONTROL BLOCKS.  THIS ROUTINE WILL
*        FORMAT SPQE'S, DQE'S, AND FQE'S, AND IS CALLED FOR BOTH
*        CSA AND FOR SQA.  A PATTERN IS SET UP, DEPENDING ONTHE
*        BLOCKS ACTUALLY FOUND, AND THE FORMAT/PRINT ROUTINE (FPROUT)
*        IS CALLED.  FPROUT WILL FORMAT THE MOVED MSS BLOCKS,DE-
*        PENDING ON THE PATTERN.  PATTERN IS A BYTE, '000SDF00', TO
*        ALLOW INDEXING TO PRTDMP PATTERN. (S = SPQE, D = DQE, AND
*        F = FQE).  THIS ALLOWS A COMMAN FORMAT/PRINT ROUTINE TO PRINT
*        THE BLOCKS, REGARDLESS OF WHICH, IF ANY, ARE PRESENT
*        (IF NO BLOCKS WERE GOTTEN, INDEX WILL BE ZERO, AND FPROUT
*        WILL RETURN TO CALLER.
*
******************************************************************
         SPACE 2
MSSROUTN LM    8,10,MAXSPQE               PICK UP MAX COUNTS
         STM   8,10,SPQECT                AND INITIALIZE LOOP COUNTS
SPQELP   SR    8,8                        CLEAR REG FOR INSERT
         ICM   8,7,SPQEPTR+1              GET SPQE POINTER
         BCR   8,7                        RETURN IF NONE
         MVC   DQECT(8),MAXDQE            SET NEW MAX CTS, DQE & FQE
         MVI   PATTERN,SDFPAT             SET PATTERN TO ALL
         BAL   11,GETBLOK                 GO GET SPQE
         LTR   15,15                      RETRIEVE OK ?
         BZ    TESTSCNT                   YES, GO TEST COUNT
         MVC   CBNAME,SPQECB              ELSE MOVE 'SPQE' TO MSG
         BAL   11,CBMSG                   LINK TO PRINT IT
         BR    7                          AND RETURN
TESTSCNT L     6,SPQECT                   PICK UP REMAINING COUNT
         BCT   6,SCNTOK                   BR IF NOT EXCEEDED
         MVC   CBLNAME,SPQECB             ELSE MOVE 'SPQE' TO LP MSG
         BAL   11,LOOPMSG                 LINK TO PRINT IT
         BR    7                          AND RETURN
SCNTOK   ST    6,SPQECT                   STORE DECREMENTED COUNT
         MVC   SPQE(12),0(8)              MOVE SPQE TO WORKAREA
         TM    FLGSPQE,X'80'              SHARED ?
         BZ    DQEONE                     NO, GO TO DQE PROCESS
         BO    SKIPSPQE                   NOT OWNED
         MVI   PATTERN,SPAT               SET TO F/P SPQE ONLY
         BAL   11,FPROUT                  LINK TO PRINT IT
SKIPSPQE MVC   SPQEPTR+1(3),NSPQE+1       SET UP NEXT SPQE
         B     SPQELP                     GO TO SPQE PROCESS
DQELP    MVC   FQECT,MAXFQE               NEW DQE, RESET FQE COUNT
         MVI   PATTERN,DFPAT              SAME SPQE, SO D & F ONLY
DQEONE   SR    8,8                        CLEAR FOR INSERT
         ICM   8,7,DQEPTR+1               GET DQE ADDRESS
         BNZ   DQEXIST                    BR IF ONE EXISTS
DQEBAD   NI    PATTERN,SPAT               T/F ALL BUT SPQE
         BAL   11,FPROUT                  AND LINK TO F/PRINT
         MVC   SPQEPTR+1(3),NSPQE+1       SET UP NEXT SPQE
         B     SPQELP                     AND GO PROCESS IT
DQEXIST  BAL   11,GETBLOK                 GO GET DQE
         LTR   15,15                      RETRIEVE OK ?
         BZ    TESTDCNT                   YES, BR TO CHECK COUNT
         MVC   CBNAME,DQECB               ELSE MOVE 'DQE' TO MSG
         BAL   11,CBMSG                   & LINK TO PRINT IT
         B     DQEBAD                     BR OUTPUT & GET NEXT SPQE
TESTDCNT L     6,DQECT                    PICK UP COUNT OF DQE'S
         BCT   6,DCNTOK                   BR IF COUNT NOT EXCEEDED
         MVC   CBLNAME,DQECB              ELSE PUT 'DQE' LOOP MSG
         BAL   11,LOOPMSG                 & LINK TO PRINT IT
         B     DQEBAD                     BR TO F/P & GET NXT SPQE
DCNTOK   ST    6,DQECT                    STORE DECREMENTED COUNT
         MVC   DQE(16),0(8)               MOVE DQE TO WORKAREA
         B     FQEONE                     GO TO PROCESS FQE
FQELP    MVI   PATTERN,FPAT               F/P FQE ONLY FOR ADDNL FQE
FQEONE   SR    8,8                        CLEAR REG FOR INSE
         ICM   8,7,FQEPTR+1               FQE ?
         BNZ   FQEXIST                    YES, BRANCH
FQEBAD   NI    PATTERN,SDPAT              T/F FQE IN PATTERN
         BAL   11,FPROUT                  LINK TO F/P ANY OTHERS
         MVC   DQEPTR+1(3),NDQE+1         SET NEXT DQE, IF ANY
         B     DQELP                      AND BRANCH TO PROCESS
FQEXIST  BAL   11,GETBLOK                 GO GET FQE
         LTR   15,15                      RETRIEVE OK ?
         BZ    TESTFCNT                   YES, BR TO CHECK COUNT
         MVC   CBNAME,FQECB               ELSE PUT 'FQE' IN MSG
         BAL   11,CBMSG                   AND LINK TO PRINT IT
         B     FQEBAD                     BR F/P & GET NXT DQE
TESTFCNT L     6,FQECT                    PICK UP FQE COUNT
         BCT   6,FCNTOK                   BR IF NOT EXCEEDED
         MVC   CBLNAME,FQECB              ELSE MOVE 'FQE' TO LOOP MSG
         BAL   11,LOOPMSG                 LINK TO PRINT IT,
         B     FQEBAD                     BR TO F/P & GET NXT DQE
FCNTOK   ST    6,FQECT                    STORE DECREMENTED COUNT
         MVC   FQE(12),0(8)               MOVE FQE TO WORKAREA
FQEVALID BAL   11,FPROUT                  LINK TO FORMAT/PRINT
         MVC   FQEPTR+1(3),NFQE           SET NXT FQE, IF ANY
         B     FQELP                      AND GO PROCESS
         EJECT
******************************************************************
*
*        FORMAT/PRINT ROUTINE. SETS UP CORRECT PATTERN FOR AMDPRDMP
*        FORMAT ROUTINE, THEN CALLS THE FORMAT ROUTINE, AND, ON
*        RETURN, CALLS THE PRINT ROUTINE OF AMDPRDMP.  THE MAIN
*        INPUT IS THE PATTERN MASK, WHICH HAS BEEN SET BY THE MSS
*        ROUTINE.  IF YOU WISH TO CHANGE THE PRINTED OUTPUT IN
*        ANY WAY, YOU MAY MODIFY THE PRINT PATTERNS.  NOTE THAT
*        THERE ARE ACTUALLY SIX PATTERNS, AS FOLLOWS:
*
*        SDFPATN--PATTERN USED TO OUTPUT SPQE, DQE, & FQE
*        DFPATN---USED ON SUBSEQUENT DQE'S (SPQE PRINTED ON FIRST)
*        FPATN----USED FOR SUBSEQUENT FQE'S
*        SDPATN---USED WHEN NO FQE'S ON FIRST DQE
*        SPATN----USED WHEN NO DQE'S ON SPQE, OR SHARED SPQE
*        DPATN----USED ON SUBSEQUENT DQE WITH NO FQE'S
*
*        TEST IS MADE FOR ZERO PATTERN, AND FPROUT WILL RETURN, IF
*        SO. (NO MSS CONTROL BLOCKS TO BE FORMATTED.)
*
******************************************************************
         SPACE  2
*        PATTERN MASK
SDFPAT   EQU   X'1C'                      SPQE, DQE, AND FQE
DFPAT    EQU   X'0C'                      DQE AND FQE
FPAT     EQU   X'04'                      FQE ONLY
SDPAT    EQU   X'18'                      SPQE AND DQE
DPAT     EQU   X'08'                      DQE ONLY
SPAT     EQU   X'10'                      SPQE ONLY
FULLPAT  EQU   X'1C'                      = SDFPAT, AT THIS TIME
         SPACE  1
*        NOTE THAT X'14' PATTERN NOT PRESENT.  SPQE AND FQE WITHOUT
*        A DQE WOULD NOT OCCUR.
         SPACE  1
FPROUT   SR    5,5                        CLEAR INDEX REG
         ICM   5,1,PATTERN                GET AND CHECK PATTERN MASK
         BCR   8,11                       RETURN IF ZERO
         LA    6,PATTAB                   POINT TO TABLE OF ADCON'S
         L     0,0(5,6)                   USE INDEX TO GET ENTRY
FRMTPRNT L     15,ADPLFRMT                GET EP PRTDMP FORMAT
         BALR   14,15                     LINK TO IT, R0 = PATTERN
BLNKPRNT L     15,ADPLPRNT                GET PRINT ROUTINE E.P.
         BALR  14,15                      LINK TO IT
         BR    11                         RETURN TO CALLER
         SPACE  2
         DS    0F
*        ADCONS TO DIFFERENT FORMAT PATTERNS
         SPACE  1
PATTAB   DC     AL4(SDFPATN)              SHOULD NEVER BE USED
         DC    AL4(FPATN)
         DC    AL4(DPATN)
         DC    AL4(DFPATN)
         DC    AL4(SPATN)
         DC    AL4(SDFPATN)               SHOULD NEVER BE USED
         DC    AL4(SDPATN)
         DC    AL4(SDFPATN)
         SPACE  3
*        THESE ARE THE ACTUAL PATTERNS USED TO FORMAT THE MSS DATA.
*        THE DATA TO BE FORMATTED WILL BE IN FIELDS IN 'MSSDATA'.
*        MSSDATA LABELS MAY HAVE TO BE CHANGED, AND/OR THE AREA
*        RECODED, IF THE CONTROL BLOCKS CHANGE.  DSECT LAYOUT WAS
*        NOT USED, AS USING STATEMENTS WOULD HAVE 'TIED UP' THE
*        REGISTERS.  EACH COMPLETE PATTERN ENDS WITH A FULL WORD OF
*        ZEROES, AND ALTERNATE LABLES ARE USED TO FORMAT PARTIAL
*        LINES.  (EXAMPLE: DFPATN)
*
*
         SPACE  2
SDFPATN  DS    0F
         DC    X'1F320006'
         DC    AL4(SPQELBL)
         DC    AL4(SPQEPTR+1)
         DC    X'1D300E14'
         DC    AL4(FLGSPQE)
         DC    X'1D10181C'
         DC    AL4(SUBPOOL)
         DC    X'15202025'
DFPATN   DC    X'1F22292E'
         DC    AL4(DQELBL)
         DC    AL4(DQEPTR+1)
         DC    X'1D22363B'
         DC    AL4(BLKADDR)
         DC    X'1D224348'
         DC    AL4(BLKLNGTH+1)
FPATN    DC    X'1F225055'
         DC    AL4(FQELBL)
         DC    AL4(FQEPTR+1)
         DC    X'1D525D65'
         DC    AL4(HIADDR+1)
         DC    X'1D126D71'
         DC    AL4(FREEBYTE+1)
         DC    F'0'
SDPATN   DC    X'1F320006'
         DC    AL4(SPQELBL)
         DC    AL4(SPQEPTR+1)
         DC    X'1D300E14'
         DC    AL4(FLGSPQE)
         DC    X'1D10181C'
         DC    AL4(SUBPOOL)
         DC    X'15202025'
DPATN    DC    X'1F22292E'
         DC    AL4(DQELBL)
         DC    AL4(DQEPTR+1)
         DC    X'1D22363B'
         DC    AL4(BLKADDR)
         DC    X'1D224348'
         DC    AL4(BLKLNGTH+1)
         DC    F'0'
SPATN    DC    X'1F320006'
         DC    AL4(SPQELBL)
         DC    AL4(SPQEPTR+1)
         DC    X'1D300E14'
         DC    AL4(FLGSPQE)
         DC    X'1D10181C'
         DC    AL4(SUBPOOL)
         DC    X'15202025'
         DC    F'0'
         EJECT
******************************************************************
*
*        SUBROUTINE TO GET A DUMPED PAGE.  USES REGISTERS 0,8,9,
*        14, AND 15.  INPUT IN REG 8 IS THE ADDRESS OF BLOCK TO BE
*        GOTTEN.  THIS ROUTINE SETS UP FOR PAGE ACCESS, AND, ON
*        RETURN, SETS REG 8 TO CORE LOCATION OF RETRIEVED CONTROL
*        BLOCK.  RETURN CODE IS PASSED IN REG 15 TO CALLER.
*        RC = 0, IF BLOCK SUCCESSFULLY RETRIEVED.
*
******************************************************************
         SPACE  2
GETBLOK  SRDL  8,12(0)                    SET PAGE ADDRESS
         SLL   8,12(0)                     IN REGISTER 8
         SRL   9,20(0)                     DISPLACEMENT IN REG 9
         LR    0,8                        SET 0 FOR ACCESS
         L     15,ADPLMEMA                GET ACCESS ROUTINE E.P.
         BALR  14,15                      AND GO GET THE PAGE
         LR    8,0                        TRANSFER CORE LOCATION
         AR    8,9                        ADD DISPLACEMENT BACK
         BR    11                         AND RETURN, REG 8 SET
         SPACE  2
*        MESSAGE ROUTINES
         SPACE  2
LOOPMSG  L     6,ADPLBUF                   GET PRINT BUFFER
         MVC   0(25,6),CBLOOPMS           MOVE 'POSSIBLE LOOP' MSG
         B     MSGSET                     BR TO OUTPUT MSG
CBMSG    L     6,ADPLBUF                  GET PRINT BUFFER
         MVC   0(25,6),CBUNAV             MOVE 'UNAVAILABLE' MSG
MSGSET   L     15,ADPLPRNT                GET PRINT ROUTINE E.P.
         BALR  14,15                      LINK TO IT
         BR    11                         AND THEN RETURN
         SPACE  2
*        MESSAGES
         SPACE  2
TITLE    DC    C'* PRIVATE MAP *'
CBUNAV   DC    C'UNABLE TO ACCESS '
CBNAME   DC    CL8'BLOCK'
         DC    C' PRIVMAP TERMINATING   '
CBLOOPMS DC    C'POSSIBLE LOOP IN '
CBLNAME  DC    CL8'BLOCK'
         EJECT
MSSDATA  DS    0F
SPQEPTR  DC    F'0'
SPQE     EQU   *
NSPQE    DC    F'0'
DQEPTR   DC    F'0'
FLGSPQE  DC    XL1'00'
SPQEOWN  EQU   X'20'
SPSHARE  EQU   X'80'
RSVDSPQE DC    XL1'00'
SUBPOOL  DC    XL1'00'
KEY      DC    XL1'00'
DQE      EQU   *
FQEPTR   DC    F'0'
NDQE     DC    F'0'
HIARCH   DC    XL1'00'
BLKADDR  DC    XL3'00'
BLKLNGTH DC    F'0'
FQE      EQU   *
FLGFQE   DC    XL1'00'
NFQE     DC    XL3'00'
FREEBYTE DC    F'0'
HIADDR   DC    F'0'
         SPACE  2
*        FOLLOWING IS PATTERN MASK, SET BY CALLERS OF FPROUT.
         SPACE  2
PATTERN  DC    XL1'1C'                    INITIALIZED TO SDF
         SPACE  2
*        FOLLOWING ARE LABELS FOR AMDPRDMP FORMAT ROUTINE.
SPQELBL  DC    C'SPQEFLAGSPKEY'
DQELBL   DC    C'DQEBLKLNG'
FQELBL   DC    C'FQEHI/ADRLN'
         EJECT
*        FOLLOWING IS THE WORKAREA.
         SPACE  3
CSAWORK  DS    0F                         ALLIGN TO WORD
CMAPSAV  DS    18F
SAVPTR   DS    1F
SAVETCB  DS    1F
MAXSPQE  DC    F'300'                     MAX SPQE COUNT
MAXDQE   DC    F'300'                     MAX DQE COUNT
MAXFQE   DC    F'300'                     MAX FQE COUNT
SPQECT   DS    1F                         OPERATIONAL SPQE COUNT
DQECT    DS    1F                         OPERATIONAL DQE COUNT
FQECT    DS    1F                         OPERATIONAL FQE COUNT
         EJECT
SPQECB   DC    CL8'SPQE'
DQECB    DC    CL8'DQE'
FQECB    DC    CL8'FQE'
$CBMSSB  DC    CL8'TCBMSSB'
$CBUKYSP DC    CL8'TCBUKYSP'
$CBSWA   DC    CL8'TCBSWA'
*        DSECTS FOR LABEL REFERENCES FOR ADPL
         IHAABDPL
         EJECT
         IHAASCB
         EJECT
         CVT   DSECT=YES
         EJECT
         IHAASXB
         EJECT
         IHAASVT
         EJECT
         IKJTCB
         SPACE 2
         END   PRIVMAP1
