 ROCPARSE:
    PROC (ARGV) OPTIONS(MAIN);
 /*
    THIS DIALOG FUNCTION SIMULATES THE DATA SET NAMES PARSING ACTION
    OF THE ISPF FOREGROUND PROCESSING PROGRAM ISRFPR. IT IS DESIGNED
    TO WORK IN CONJUNCTION WITH A NORMAL ISPF-TYPE DATA ENTRY SCREEN
    THAT INCLUDES SEGMENTED FIELDS FOR AN "ISPF" DATA SET AND AN
    "OTHER" DATASET.

    THE FUNCTION FIRST TESTS FOR A NON-BLANK IN EITHER THE "DSN" TYPE
    VARIABLE PASSED AS AN OPTIONAL PARAMETER, OR, IF NO PARAMETER IS
    PASSED, IN VARIABLE 'DSN'.  IF A NON-BLANK CONDITION IS FOUND,
    THAT VALUE IS PARSED AND VALIDATED.

    IF THE ABOVE CONDITION IS NOT SATISFIED, THEN THE FUNCTION WILL
    PARSE A SEGMENTED NAME CONTAINED IN THE VARIABLES 'PRJ', 'LIB',
    'TYP' AND 'MEM'. IN THIS CASE, VALIDATION IS PRESUMED DONE.

    WHEN A VARIABLE IS PASSED AS AN ARGUMENT, THE FUNCTION ONLY
    ALTERS THAT VARIABLE AND NO OTHERS. THE DATASET NAME WILL BE
    RETURNED IN THE VARIABLE IN FULLY QUALIFIED FORM, WITHOUT
    SURROUNDING SINGLE QUOTES.

    WHEN A VARIABLE IS NOT PASSED, THE ACTION IS TO PARSE EITHER THE
    "DSN", IF PRESENT, OR THE SEGMENTED VARIABLE NAME INTO THE
    FOLLOWING STANDARD ISPF VARIABLES. THE ORIGINAL VARIABLES ARE NOT
    ALTERED.

    ZDS     - CONTAINS THE FIRST TWO LEVELS OF THE DATASET NAME.
    ZDSQ    - CONTAINS THE FULL DATASET NAME
    ZDSQMEM - CONTAINS THE FULL DATASET NAME WITH PARENTHESIZED
              MEMBER, IF A MEMBER WAS SPECIFIED.
    ZMEM    - CONTAINS ONLY THE MEMBER NAME, IF ONE WAS SPECIFIED.

    IF A '*' WAS GIVEN AS A MEMBER NAME, 'ZMEM' WILL BE SET TO THAT
    VALUE, BUT 'ZDSQMEM' WILL NOT CONTAIN A PARENTHESIZED MEMBER NAME
    AT THE END. THIS ALLOWS DISPLAY OF THE NAME ON A SECOND SCREEN
    WITHOUT THE (*).

    ONE OTHER SPECIAL ACTION IS TAKEN WHEN A '*' IS SPECIFIED AS
    MEMBER NAME IN THE 'DSN' VARIABLE ONLY (NOT WHEN SPECIFIED IN
    'MEM'): VARIABLE 'RDSN' WILL BE SET TO THE EXACT VALUE OF
    VARIABLE 'DSN', BUT WITH THE ENDING "(*)" ELIMINATED.

    THE FOLLOWING CODES MAY BE RETURNED:

       16  - ISPF ENCOUNTERED A SERIOUS PROBLEM.
                                                                      */
 /*    10  - THE VARIABLE PASSED AS A PARAMETER WAS NOT FOUND, OR
             WHEN NO VARIABLE WAS PASSED, THE VARIABLE 'DSN' WAS
             NOT FOUND.

       14  - ONE OR MORE OF THE SYSTEM VARIABLES 'PRJ', 'LIB',
             'TYP', OR 'MEM' WAS NOT FOUND.

        8  - SOME OTHER STANDARD SYSTEM VARIABLE WAS NOT FOUND

        2  - SOME PORTION OF 'DSN' WAS NOT A VALID NAME

        1  - UNBALANCED QUOTES ON 'DSN'
                                                                      */
  DCL
     ARGV CHAR(8) VAR,
     ARG  CHAR(8);
  DCL
     VERSTR1 CHAR(29) STATIC INIT('ABCDEFGHIJKLMNOPQRSTUVWXYZ$@#'),
     VERSTR2 CHAR(39) STATIC
         INIT('ABCDEFGHIJKLMNOPQRSTUVWXYZ$@#1234567890');
  DCL PLIRETV BUILTIN;
  DCL
     PLIXOPT CHAR(30) VAR INIT('ISASIZE(4K) NOSTAE NOSPIE')
             STATIC EXTERNAL;
  DCL
     I FIXED BIN STATIC;
  DCL
     ISPLINK ENTRY EXTERNAL OPTIONS(ASM,INTER,RETCODE);
  DCL
   ((PRJ,
     LIB,
     MEM) CHAR (8),
     TYP CHAR(8),
     DSN  CHAR (56),
     RDSN  CHAR (56)) INIT (' ') STATIC;
  DCL
     (L8 INIT(8),
      L17 INIT(17),
      L26 INIT(26),
      L36 INIT(36),
      L44 INIT(44),
      L54 INIT(54),
      L56 INIT(56)) FIXED BIN (31) STATIC;
  DCL
    (ZDS CHAR(17),
     ZDSQ CHAR(44),
     ZDSQMEM CHAR(54),
     ZMEM CHAR(8),
     ZUSER CHAR(8)) STATIC INIT(' ');
  DCL
    (MDS CHAR(17),
     MDSQ CHAR(44),
     MDSQMEM CHAR(54),
     MMEM CHAR(8),
     MPREFIX CHAR(8),
     MDSN CHAR(56)) INIT('') VAR STATIC;
 /*                                                               */
  IF ARGV ^= ''
     THEN ARG = ARGV;
  ELSE
     ARG = 'DSN';
  CALL  ISPLINK ('VDEFINE','ZUSER ',ZUSER,'CHAR',L8);
  CALL  ISPLINK ('VDEFINE',ARG,DSN,'CHAR',L56);
  IF ARG = 'DSN' THEN
    DO;
      CALL  ISPLINK ('VDEFINE','ZDS ',ZDS,'CHAR',L17);
      CALL  ISPLINK ('VDEFINE','ZDSQ ',ZDSQ,'CHAR',L44);
      CALL  ISPLINK ('VDEFINE','ZDSQMEM ',ZDSQMEM,'CHAR',L54);
      CALL  ISPLINK ('VDEFINE','ZMEM ',ZMEM,'CHAR',L8);
      CALL  ISPLINK ('VDEFINE','RDSN ',RDSN,'CHAR',L56);
    END;
  CALL  ISPLINK ('VGET',            /* NAME OF DIALOG SERVICE        */
                 ARG,
                 'SHARED');
  IF PLIRETV ^= 0 THEN        /* RETURN CODES                  */
    DO;                       /* 8  - VARIABLE NOT FOUND       */
      IF PLIRETV = 8 THEN
        CALL PLIRETC(10); /* INITIAL VARIABLE NOT FOUND    */
      ELSE
        CALL PLIRETC(PLIRETV);
      RETURN;
    END;                      /* 16 - TRANSLATION ERROR OR     */
  IF DSN ^= ' ' THEN
    DO;
       I = INDEX(DSN,' ');
       IF I > 0 THEN
          MDSN = SUBSTR(DSN,1,INDEX(DSN,' ')-1);/*TO VARYING STRING */
       ELSE
          MDSN = DSN;
       IF SUBSTR(MDSN,1,1) = '''' THEN
         DO;
           IF SUBSTR(MDSN,LENGTH(MDSN)) ^= '''' THEN
             DO;
               CALL PLIRETC(1);
               RETURN;
             END;
           MDSN = SUBSTR(MDSN,2,LENGTH(MDSN)-2); /* THROW AWAY ' */
           I = INDEX(MDSN,'.');
           IF I > 0 THEN
             DO;
               PRJ = SUBSTR(MDSN,1,I-1);
               IF (I > 9) ×(VERIFY(SUBSTR(PRJ,1,I-1),VERSTR2) > 0) ×
                  (VERIFY(SUBSTR(PRJ,1,1),VERSTR1) > 0) THEN
                 DO;
                   CALL PLIRETC(2);
                   RETURN;
                 END;
               MDSN = SUBSTR(MDSN,I+1);
             END;
           ELSE
             DO;
               CALL PLIRETC(2);
               RETURN;
             END;
         END;
       ELSE
         DO;
           CALL  ISPLINK ('VGET',  /* NAME OF DIALOG SERVICE        */
                     '(ZUSER)',
                     'SHARED');
           IF PLIRETV ^= 0 THEN    /* RETURN CODES                  */
             DO;                   /* 8  - VARIABLE NOT FOUND       */
               CALL PLIRETC(PLIRETV);
               RETURN;
             END;                  /* 16 - TRANSLATION ERROR OR     */
           I = INDEX(ZUSER,' ');
           IF I > 0 THEN
              PRJ = SUBSTR(ZUSER,1,I-1);
           ELSE
              PRJ = ZUSER;
         END;
       I = INDEX(MDSN,'(');
       IF (I > 0) & (ARG = 'DSN') THEN
         DO;                    /* ISOLATE AND REMOVE THE MEMBER */
           J = INDEX(MDSN,')');
           IF J-(I+1) > 8 THEN
             DO;
               CALL PLIRETC(2);
               RETURN;
             END;
           MEM = SUBSTR(MDSN,I+1,J-(I+1));
           IF (VERIFY(SUBSTR(MEM,1,J-(I+1)),VERSTR2××'*') > 0) ×
              (VERIFY(SUBSTR(MEM,1,1),VERSTR1××'*') > 0) THEN
             DO;
               CALL PLIRETC(2);
               RETURN;
             END;
           MDSN = SUBSTR(MDSN,1,I-1)××SUBSTR(MDSN,J+1);
         END;
       IF LENGTH(MDSN) > 0 THEN
         DO;
           I = INDEX(MDSN,'.');
           IF I > 0 THEN
             DO;
               LIB = SUBSTR(MDSN,1,I-1);
               IF (I > 9) × (VERIFY(SUBSTR(LIB,1,I-1),VERSTR2) > 0) ×
                  (VERIFY(SUBSTR(LIB,1,1),VERSTR1) > 0) THEN
                 DO;
                   CALL PLIRETC(2);
                   RETURN;
                 END;
               MDSN = SUBSTR(MDSN,I+1);
             END;
           IF LENGTH(MDSN) > 0 THEN
             DO;
               J = 1;
               DO WHILE (J ^> LENGTH(MDSN));
                 I = INDEX(SUBSTR(MDSN,J),'.'); /* ANY MORE ? */
                 IF I > 0 THEN
                   DO;
                     IF (I > 9) ×
                        (VERIFY(SUBSTR(MDSN,J,1),VERSTR1)>0) THEN
                       DO;   /* FIELD TOO LONG OR NOT ALPHA BEGIN */
                         CALL PLIRETC(2);
                         RETURN;
                       END;
                     ELSE
                       J = J+I;
                   END;
                 ELSE
                   DO;        /* NO MORE '.'S           */
                     IF (LENGTH(MDSN) - (J-1) > 8) ×
                        (VERIFY(SUBSTR(MDSN,J,1),VERSTR1) > 0 ) THEN
                       DO;
                         CALL PLIRETC(2);
                         RETURN;
                       END;
                     J = 50;/* TERMINATE LOOP */
                   END;
               END;
               IF  VERIFY(MDSN,VERSTR2××'.') > 0 THEN
                 DO;
                   CALL PLIRETC(2);
                   RETURN;
                 END;
             END;
         END;
    END;                                    /* END DSN ^= ' '  */
  ELSE
    DO;                    /* DSN WAS NOT USED                 */
       CALL  ISPLINK ('VDEFINE','PRJ ',PRJ,'CHAR',L8);
       CALL  ISPLINK ('VDEFINE','LIB ',LIB,'CHAR',L8);
       CALL  ISPLINK ('VDEFINE','TYP ',TYP,'CHAR',L8);
       CALL  ISPLINK ('VDEFINE','MEM ',MEM,'CHAR',L8);
       CALL  ISPLINK ('VGET',
                      '(PRJ LIB TYP MEM)',
                      'SHARED');
       IF PLIRETV ^= 0 THEN        /* RETURN CODES                  */
         DO;                       /* 8  - VARIABLE NOT FOUND       */
           IF PLIRETV = 8 THEN
             CALL PLIRETC(14); /* SYSTEM VARIABLES NOT FOUND    */
           ELSE
             CALL PLIRETC(PLIRETV);
           RETURN;
         END;                      /* 16 - TRANSLATION ERROR OR     */
    END;
  I = INDEX(PRJ,' ');
  IF I > 0 THEN
     MDS = SUBSTR(PRJ,1,I-1);
  ELSE
     MDS = PRJ;
  I = INDEX(LIB,' ');
  IF LIB ^= ' ' THEN
     IF I > 0 THEN
        MDS = MDS××'.'××SUBSTR(LIB,1,I-1);
     ELSE
        MDS = MDS××'.'××LIB;
  IF DSN = ' ' THEN
    DO;     /*  IS AN SPF NAME */
      I = INDEX(TYP,' ');
      IF I > 0 THEN
         MDSQ = MDS××'.'××SUBSTR(TYP,1,I-1);
      ELSE
         MDSQ = MDS××'.'××TYP;
    END;
  ELSE
    IF LENGTH(MDSN) > 0 THEN
      MDSQ = MDS××'.'××MDSN;
    ELSE
      MDSQ = MDS;
  I = INDEX(MEM,' ');
  IF MEM ^= ' ' THEN
     DO;
        IF I > 0 THEN
           MMEM = SUBSTR(MEM,1,I-1);
        ELSE
           MMEM = MEM;
        IF MMEM ^= '*' THEN
           MDSQMEM = MDSQ××'('××MMEM××')';
        ELSE
           MDSQMEM = MDSQ;
     END;
  ELSE
     MDSQMEM = MDSQ;
  IF ARG ^= 'DSN' THEN
    DO;
      DSN = MDSQ;
      CALL ISPLINK ('VPUT',
                     ARG,
                    'SHARED');
      RETURN;
    END;
  IF (DSN ^= ' ') & (MMEM = '*') THEN
     DO;
       IF SUBSTR(DSN,1,1) = '''' THEN
         RDSN = ''''××MDSQ××'''';
       ELSE
         RDSN = SUBSTR(MDSQ,INDEX(MDSQ,'.')+1);
     END;
  ZDS = MDS;
  ZDSQ = MDSQ;
  ZDSQMEM = MDSQMEM;
  ZMEM = MMEM;
  CALL ISPLINK ('VPUT',
                '(ZDS ZDSQ ZDSQMEM ZMEM RDSN)',
                'SHARED');
 END;                   /* END PROGRAM  */
