         COPY  $COPYWRT
WSCRIPT  TITLE '          WATERLOO SCRIPT MAIN MODULE'
***********************************************************************
*        SCRIPT COMMAND MODULE                                        *
*        WAS SPRT MODULE TO SUPPORT OLD 'PRINT' FORM OF SCRIPT.       *
*        CHANGED 6/9/69 IN ORDER TO DELETE 'EDIT' FOR OF SCRIPT.      *
*        SPRT ENTRY POINT CHANGED TO SCRIPT                           *
*                                                                     *
*        CHANGED 4/1/70 BY WC ONEY AS FOLLOWS --                      *
*              (1) EVEN/ODD PAGE HEADINGS/FOOTINGS AND EJECTS.        *
*              (2) FOOTNOTE CONTROL (.FN)                             *
*              (3) CONSISTENT USE OF ASA CONTROL CHARACTERS.          *
*              (4) EMPTY PAGE SUPPRESSION (.EM)                       *
*              (5) LEADING BLANK LINE SUPPRESSION (.LS)               *
*              (6) ONLINE PRINT FUNCTION (.PR)                        *
*              (7) ONLINE READING FUNCTION (.RC)                      *
*              (8) START AND STOP LIMITS FOR .IM AND .AP              *
*              (9) ELIMINATION OF SEVERAL LOGIC FLAWS.                *
*              (10) ROMAN NUMERAL PAGE NUMBERING                      *
*              (11) REFERENCE NAME FUNCTIONS (.SR .UR 2PASS)          *
*              (12) TRANSLATE FUNCTION (.TR)                          *
*              (13) CONDITIONALS (.IF)                                *
*              (14) DON'T COUNT FUNCTION (.DC)                        *
*              (15) REMOTE SEQUENCES (.RM)                            *
*              (16) RIGHT ADJUST FUNCTION (.RA)                       *
***********************************************************************
         SPACE
***********************************************************************
*              05-01-72 JOHN ATKINSON                                 *
*              EXTENSIVE MODIFICATIONS WERE MADE TO REPLACE ALL OF THE*
*              CMS I/O MACROS CALLS WITH A MINIMAL NUMBER OF OS I/O   *
*              MACRO CALLS.  THIS WAS THE PREREQUISITE FOR ITS        *
*              MOVE TO TSO                                            *
*        THE FOLLOWING SECTIONS WERE REWRITTEN 05-01-72.              *
*        (1)   SCAN OF PARAMETER LIST                                 *
*        (2)   PROLOG-INITIALIZATION OF INPUT AND OUTPUT FILES.       *
*        (3)   APPEND A NEW FILE (.AP)                                *
*        (4)   IMBED AN ADDITIONAL FILE (.IM)                         *
*        (5)   READ A CONTROL LINE (.RC)                              *
*        (6)   READ A LINE AND TAKE NO ACTION (.RD)                   *
*        (7)   INTERNAL FUNCTIONS SPACER,IOPRINT,READ,ERROR.          *
*        (8)   ADDITIONAL INTERNAL FUNCTIONS OPNINPUT,CLOSFIL,SRCHSTK.*
***********************************************************************
         SPACE
***********************************************************************
*        04-01-73  W. DWYER                                           *
*                                                                     *
*        ALL INPUT FILE PROCESSING CODE REWRITTEN AND INCORPORATED    *
*        INTO A SEPARATE CONTROL SECTION, 'SCRIPTRD'.                 *
*                                                                     *
*        THE OBJECT WAS TO MAKE THE USE OF .AP AND .IM ALMOST AS      *
*        SIMPLE UNDER O/S AS IT WAS UNDER CMS                         *
***********************************************************************
         EJECT
SCRIPTW  CSECT ,                   TO ORDER LISTING
        $SCRCVT DSECT=NO,DOC=GEN
         EJECT
        $NSCDAT DSECT=NO,DOC=GEN
         EJECT
         COPY  #DSECTS
         EJECT
***********************************************************************
*                                                                     *
*                             INITIALIZATION                          *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE
         PRINT NOGEN               MADNICK IS NARCISSITIC
SCRIPTW $VERSION NAME=SCRIPT
         SPACE
         ENTRY MAIN,TRUEEND        SOME INTERESTING LABELS
         SPACE
         STM   R14,BASE,12(R13)    SAVE CALLER'S REGISTERS
         LR    BASE,R15            TRANSFER CALLING BASE
         USING SCRIPTW,BASE        PROGRAM BASE
         LR    X1,R1               RETAIN PARM POINTER
         L     R15,=V(SYSINT)      SYSTEM DEPENDENT INTERFACE
         BAL   R14,4(,R15)         INIT SYSTEM INTERFACE CONTROL AREA
         LR    TEMP,R13            SAVE OLD SAVE AREA ADDR
         L     R13,=V(NSCDAT)      DATA BASE REGISTER
         USING NSCDAT,R13          TELL THE ASSEMBLER
         ST    R13,8(,TEMP)        BACKWARDS CHAIN POINTER
         ST    TEMP,4(,R13)        FORWARDS CHAIN POINTER
         LA    BASESAVE,SAVETABL   SAVE AREA STACK ADDRESS
         ST    BASESAVE,SAVEINIT   RETAIN FOR FUTURE REFERENCE
         SPACE
         L     R15,=V(SCRIPTCW)    CONTROL WORD PROCESSOR
         BALR  R14,R15             LET IT INITIALIZE
         L     R15,=V(SCRIPTFO)    CHARACTER FORMATTER
         BALR  R14,R15             LET IT INITIALIZE
         L     R15,=V(SCRIPTHY)    HYPHENATION PROCESSOR
         LTR   R15,R15             DOES IT EXIST .Q
         BZ    *+6                 BRANCH IF NOT
         BALR  R14,R15             LET IT INITIALIZE
         L     R15,=V(SCRIPTMC)    COLUMN PROCESSOR
         BALR  R14,R15             LET IT INITIALIZE
         L     R15,=V(SCRIPTOU)    SUBROUTINE CALLS
         BALR  R14,R15             LET IT INITIALIZE
         L     R15,=V(SCRIPTPM)    PARM SCANNER
         BALR  R14,R15             LET IT INITIALIZE
         L     R15,=V(SCRIPTRD)    READ ROUTINE
         BALR  R14,R15             LET IT INITIALIZE
         L     R15,=V(SCRIPTSY)    SYSTEM INTERFACE ROUTINE
         ST    R15,VSCRLAST        HIGHEST ROUTINE ADDR FOR DUMPS
         BALR  R14,R15             LET IT INITIALIZE
         SPACE
         LR    R1,X1               RESTORE PARM LIST ADDR
         ST    R1,PLSTSV           SAVE PARM LIST ADDR FOR PASS2
         SPACE
*  IF SUBSTITUTE DDNAME LIST IS PRESENT, ALTER OUR DCB'S              *
         TM    0(R1),X'80'         IS THERE A SECOND PARM ADDR
         BO    SPRT05              BRANCH OUT IF NOT
         SPACE
         L     X1,4(,R1)           GET ADDRESS OF SUBSTITUTION LIST
         ST    X1,COMREPAD         STORE FOR I/O COORDINATOR
         SPACE
         TM    4(R1),X'80'         SECOND PARM THE LAST .Q
         BO    SPRT05              BRANCH IF YES
         L     TEMP,8(,R1)         GET THIRD PARM ADDRESS
         ST    TEMP,COMPARM3       AND RETAIN FOR SUBSEQUENT USE
        $CALL  VTRAPS              ENTER USER ROUTINES
         BC    BPOS,SPRT05         BRANCH IF SUCCESSFUL
         MVI   EFLAG001,ERRSET     PARM ERROR (IN EFFECT)
         B     ERRQUIT             PRINT ERROR AND TERMINATE
SPRT05   DS    0H
         B     PASS2               START FIRST PASS
         EJECT
***********************************************************************
*                                                                     *
*   INITIALIZE STORAGE FOR FIRST OR SECOND PASS                       *
*                                                                     *
***********************************************************************
         SPACE
PASS2    DS    0H
         L     BASESAVE,SAVEINIT   INITIALIZE SAVE AREA STACK START
        $CALL  PARMSCAN            PARM SCAN/INITIALIZE ROUTINE
         BC    BPOS,PARMSCOK       BRANCH IF NO ERRORS
         MVI   EFLAG001,ERRSET     SET ERROR FLAG
         B     ERRQUIT             GO TO PRINT DIAGNOSTIC AND QUIT
         SPACE
PARMSCOK DS    0H
         CLC   PASSNO,DEFPASOF+TAB3DEF  IS THIS THE LAST PASS .Q
         BE    SPIETEST            BRANCH IF YES
        $OFF   SWITCHS,(NPSWS,STSWS)  NO, CLEAR PAGE XXX AND STOP
         SPACE
SPIETEST DS    0H
        $IFON  SWITCHS,DBSWS,PARMPOST BRANCH IF DUMP WANTED
         L     R1,=A(SPIEADDR)     SPIE RECOVERY ADDRESS
        $CALL  SYSPIE              DEFINE EXIT
         SPACE
PARMPOST DS    0H
        $CALL  LKINIT              INITIALIZE LINK STORAGE
         BC    BNEG,ERRQUIT        IF ERROR, PRINT MSG AND QUIT
         SPACE
*   OPEN SCRIPT PRIMARY INPUT FILE NAMED 'SYSIN'                      *
         SPACE
         LA    R1,PRIMBLOK         TO PUT PRIMARY FILE ON INPUT LIST
         MVC   PRIMGOTO,BLANKS     CLEAR GOTO TARGET
         XC    PRIMARGC,PRIMARGC   CLEAR NUMBERED ARGUMENT COUNT
         XC    PRIMFLAG,PRIMFLAG   ZERO PRIMARY INPUT FLAGS
        $ON    PRIMFLAG,IO$IM      DO AN IMBED
        $CALL  RDFILE              STACK AS THE FIRST FILE
         SPACE
         CLC   PASSNO,F1           IS THIS THE FIRST PASS .Q
         BNE   QUIETON             BRANCH IF NOT
        $IFON  SWITCHS,QUSWS,QUIETON    BRANCH IF QUIET MODE
        $IFOFF TTYPE,TONLINE,QUIETON    BRANCH IF NOT ONLINE OUTPUT
         SPACE
         L     R1,WRKBUFFA         WORK BUFFER
         XC    0(4,R1),0(R1)       CLEAR A RDW AREA
         MVC   4(L'VERSN,R1),VERSN ENTER VERSION TEXT
         LA    R0,4+L'VERSN        TOTAL LENGTH OF RESULT
         STH   R0,0(,R1)           SET LENGTH IN RDW
         LR    R0,R1               POINT TO RESULT
        $CALL  PUTCONS             WRITE TO ONLINE TERMINAL
QUIETON  DS    0H
         SPACE
*        OPEN THE PRIMARY OUTPUT FILE
         SPACE
         CLC   PASSNO,DEFPASOF+TAB3DEF  IS THIS THE LAST PASS .Q
         BNE   PARMMAIN            BRANCH AROUND IF NOT
         SPACE
         SR    R0,R0               CLEAR RDW POINTER
        $CALL  PUTPRT              OPEN PRIMARY OUTPUT FILE
         BC    BPOS,PARMMAIN       BRANCH IF SUCCESSFUL
         MVI   EFLAG002,ERRTERM    TERMINAL ERROR
ERRQUIT  DS    0H
         XC    ERCONT,ERCONT       UNABLE TO CONTINUE
         B     ERRCHECK            GO TO PRINT DIAGNOSTIC
         SPACE
PARMMAIN DS    0H
         EJECT
***********************************************************************
*                                                                     *
*                             'MAIN' CONTROLLER                       *
*                                                                     *
***********************************************************************
         SPACE
MAIN     DS    0H
        $OFF   SWITCHS,FNOCT       CLEAR 'DON'T COUNT' SWITCH
MAINDC   DS    0H
         BAL   RETURN,ERRCHECK     CHECK ERROR SWITCHS
        $IFOFF IFSTAK,IFELSE,MAIN01     BRANCH IF NOT AFTER .ELSE
        $IFON  IFSTAK,IFDO,MAIN01  BRANCH IF IN DO GROUP
         MVC   IFSTAK,IFSTAK+IFSTAKSP   POP THE .IF STACK
         SPACE
MAIN01   DS    0H
        $CALL  READ                GET NEXT LOGICAL RECORD
        $IFON  IFSTAK,IFDO,MAIN02  BRANCH IF WITHIN DO GROUP
        $OFF   IFSTAK,(IFTHEN,IFELSE)   CLEAR OBJECT OF .TH AND .EL
         SPACE
MAIN02   DS    0H
         LH    R1,URCNT            GET SUBSTITUTE SYMBOL COUNT
         LTR   R1,R1               TEST WHAT IS LEFT
         BNP   MAIN05              BRANCH IF NOTHING
         CH    COUNT,H32767        IS THIS 'ON' CONDITION .Q
         BE    MAIN03              BRANCH IF YES
         BCTR  R1,0                DECREMENT REMAINDER BY ONE
MAIN03   DS    0H
         STH   R1,URCNT            UPDATE REMAINING COUNT
         MVC   URMAXCNT(2),URMAXCNT+2   INITIALIZE SUBSTITUTION COUNT
MAIN04   DS    0H
         LA    R1,BUFF2-1          BLANK BEFORE START OF INPUT LINE
         ST    R1,ARGSTART         POINTER TO RECORD START
         AH    R1,BUFF2LGZ         PLUS RECORD LENGTH
         ST    R1,ARGSTOP          STORE LAST ADDR IN RECORD
        $CALL  UR                  PROCESS AS IF .UR COMMAND
         OC    ERRFLGS,ERRFLGS     ANY ERRORS .Q
         BNZ   MAIN                BRANCH IF YES
         LTR   R15,R15             NULL SUBSTITUTION RESULT .Q
         BZ    MAIN                FORGET LINE IF YES
         LH    R1,URMAXCNT         GET CURRENT SUBS LEFT
         S     R1,F1               DECREMENT BY ONE
         BM    MAIN06              LOOPING IF MINUS
         STH   R1,URMAXCNT         UPDATE NUMBER LEFT
        $IFON  SWITCHS,URSWS,MAIN04   RE-CHECK IF SUBSTITUTIONS MADE
MAIN05   DS    0H
         OC    ERRFLGS,ERRFLGS     ANY ERRORS PRESENT .Q
         BNZ   MAIN                BRANCH IF YES
         SPACE
         LH    R1,LICNT            GET LITERAL COUNT
         S     R1,F1               DECREMENT BY ONE
         BM    MAIN07              BRANCH IF NONE LEFT
        $IFON  SWITCHS,LISWS,MAIN07     BRANCH IF LITERAL 'ON'
         STH   R1,LICNT            UPDATE LITERAL COUNT
         B     MAIN08              SKIP OVER TEST FOR PERIOD
         SPACE
MAIN06   DS    0H
         MVI   EFLAG009,ERRSET     SET LOOPING ERROR FLAG
         B     MAIN                AND GO BACK
         SPACE
MAIN07   DS    0H
         CLI   BUFF2,C' '          FIRST CHARACTER A BLANK .Q
         BE    MAIN08              YES, THAT'S NO CONTROL WORD
         CLC   PERIND(1),BUFF2     FIRST CHAR CW INDICATOR .Q
         BE    PERIOD              YES, HANDLE AS A COMMAND
         CLC   PERNBIND(1),BUFF2   FIRST CHAR NOBREAK CW INDICATOR .Q
         BE    PERIOD              YES, HANDLE AS A COMMAND
         SPACE
MAIN08   DS    0H
        $IFON  SWITCHS,CSSWS,MAIN  FORGET IT IF IN COND SECTION
         SPACE
         BAL   RETURN,MAINLB       WITHIN A GOTO .Q
         BC    BNEG,MAIN           BRANCH IF YES
         SPACE
        $OFF   IFSTAK,(IFCWTE,IFCWUR,IFCWIF) NOT .TH/.EL/.UR/.IF
         BAL   RETURN,MAINIF       TEST INCLUSION
         BC    BNEG,MAIN           BRANCH IF TO BE OMITTED
         SPACE
         BAL   RETURN,MAINES       GO CHECK FOR INPUT ESCAPE CHARS
         BAL   RETURN,MAINBK       GO CHECK FOR USER BKSP AND HEX JOIN
         BAL   RETURN,MAINTB       CHECK FOR USER TAB CHARACTERS
         BAL   RETURN,MAINOI       PROCESS OVERLAY INPUT
         SPACE
         BAL   RETURN,MAINUHY      TEST USER HYPHENATIONS
         SPACE
         OC    OCCNT,OCCNT         OVERLAY CHARACTER COUNT ZERO .Q
         BZ    MAIN09              BRANCH IF YES
        $CALL  MAINOC              PERFORM THE OPERATION
         SPACE
MAIN09   DS    0H
         LA    TEMP,BUFF2          FIRST CHAR OF INPUT
         AH    TEMP,BUFF2LGZ       LAST CHAR +1 OF STRING
MAIN10   DS    0H
         BCTR  TEMP,0              LAST CHAR OF STRING
         CLI   0(TEMP),C' '        A BLANK .Q
         BE    MAIN11              BRANCH IF YES
         CLI   0(TEMP),X'16'       A BACKSPACE .Q
         BNE   MAIN13              BRANCH IF NOT
         MVI   0(TEMP),C' '        REPLACE WITH A BLANK
MAIN11   DS    0H
         LH    R1,BUFF2LGZ         LENGTH OF STRING
         S     R1,F1               LESS ONE
         BNP   MAIN12              BRANCH IF NOTHING LEFT
         STH   R1,BUFF2LGZ         UPDATE LENGTH
         B     MAIN10              LOOP BACK AND TRY AGAIN
         SPACE
MAIN12   DS    0H
         MVC   BUFF2(1),PERIND     ENTER CONTROL WORD INDICATOR
         MVC   BUFF2+1(L'MNSIG),MNSIG   ADD SIGNAL CW AND OPERAND
         LA    TEMP,L'MNSIG+1      LENGTH OF RESULT
         STH   TEMP,BUFF2LGZ       ENTER LENGTH TO REPLACE BLANK LINE
        $CALL  ARGINIT             INITIALIZE COMMAND POINTERS
        $CALL  SITST               IS THERE SUCH A REMOTE .Q
         BC    BOMIT,PERIOD        PROCESS SIGNAL IF YES
         MVC   BUFF2(1),PERIND     ENTER CONTROL WORD INDICATOR
         MVC   BUFF2+1(L'MNSKIP),MNSKIP ADD SKIP CONTROL WORD
         LA    TEMP,L'MNSKIP+1     LENGTH OF RESULT
         STH   TEMP,BUFF2LGZ       ENTER LENGTH TO REPLACE BLANK LINE
        $CALL  ARGINIT             INITIALIZE COMMAND POINTERS
         B     PERIOD              AND PROCESS THE COMMAND
MNSIG    DC    C'SI SYSBLANK'      BLANK INPUT LINES FIRST DO THIS
MNSKIP   DC    C'SK'               BLANK INPUT LINES NEXT DO THIS
         SPACE
MAIN13   DS    0H
         L     X1,RCAREAAD         REVISION CODE WORK AREA
         LTR   X1,X1               DOES ANY EXIST .Q
         BZ    MAIN14              BRANCH IF NOT
         USING RCAREA,X1           AREA LOOKS LIKE THIS
         LH    R1,RCANFCNT         GET REMAINING ON/OFF COUNT
         S     R1,F1               DECREMENT BY ONE
         BM    MAIN14              BRANCH IF NOTHING THERE
         STH   R1,RCANFCNT         SET NEW COUNT REMAINING
         BNZ   MAIN14              BRANCH IF NOT THE LAST
        $CALL  RCOFF               TURN OFF CURRENT RC
         DROP  X1
         SPACE
MAIN14   DS    0H
         CLI   BUFF2,C' '          IS FIRST CHAR A BLANK .Q
         BE    BRKCHAR             YES, DON'T FILL AUTOMATICALLY
         CLI   BUFF2,X'05'         IS FIRST CHAR A TAB .Q
         BE    BRKCHAR             YES, DON'T FILL AUTOMATICALLY
        $IFOFF SWITCHS,MASWS,NBRKCHAR CLEAR NOW IF NOT 'MARK' OPTION
         CLI   BUFF2+1,X'16'       ALREADY DOUBLE CHARACTER .Q
         BE    NBRKCHAR            YES, DON'T ADD ANY MORE
         L     R1,BUFF3AD          TEMPORARY WORK BUFFER ADDR
         MVC   4(B2LG,R1),BUFF2    SAVE ACTIVE BUFFER
         MVC   BUFF2(2),=X'6D16'   UNDERSCORE BACKSPACE AT START
         MVC   BUFF2+2(B2LG),4(R1) ADD THE ORIGINAL TEXT
         LH    TEMP,BUFF2LGZ       GET LENGTH AGAIN
         LA    TEMP,2(,TEMP)       BUMP BY TWO
         STH   TEMP,BUFF2LGZ       UPDATE WITH NEW LENGTH
         B     NBRKCHAR            NO BREAK CHARACTER
         SPACE
BRKCHAR  DS    0H
        $ON    SWITCHS,JUADSWS     FORCE JUSTIFICATION AND OUTPUT
        $CALL  PRINTNB             CLEAR OUT PRINT BUFFER
         SPACE
NBRKCHAR DS    0H
         BAL   RETURN,MAINPI       PROCESS PARAGRAPH INDENT
         BAL   RETURN,MAINHI       PROCESS HANGING INDENT
         SPACE
         LH    TEMP,BUFF2LGZ       SET LENGTH WITH LEADING BLANK
         LA    TEMP,1(0,TEMP)      ..
         ST    TEMP,PTCHLNG        ..
         SPACE
         LA    R1,PARMPUT          LINK UP NEW LINE
        $CALL  LKPUT               WITH THE CURRENT
         SPACE
         LA    R1,LINKPARM         MERGE WITH OLD LINE, IF ANY
        $CALL  MERGE               DO THE MERGE
         SPACE
         LH    TEMP,CECNT          GET .CE/.LA/.RA COUNT
         LTR   TEMP,TEMP           ANY OUTSTANDING REQUESTS .Q
         BNP   TFI                 BRANCH AROUND IF NOT
         BCTR  TEMP,0              YES, DECREMENT COUNTER BY ONE
         STH   TEMP,CECNT          UPDATE COUNTER
TCERI01  DS    0H
        $IFON  SWITCHS,CESWS,TCERI02    BRANCH IF CENTRE IS ON
        $IFOFF SWITCHS,RASWS,DOPR  BRANCH IF NOT RIGHT ADJUST
        $CALL  RIGHTAD             RIGHT ADJUST THE LINE
         B     TCERI03             GO PRINT RIGHT FORMATTED LINE
TCERI02  DS    0H
        $CALL  CENTER              CENTRE THE LINE
TCERI03  DS    0H
        $CALL  PRINT               CLEAR THE PRINT BUFFER
         LA    R1,LINKPARM         POINT TO PARM AREA
        $CALL  MERGE               MERGE THE REMAINDER
         OC    OLDCOUNT,OLDCOUNT   WAS THERE ANY REMAINDER LEFT .Q
         BNZ   TCERI01             YES, PROCESS IT TOO
         B     MAIN                NO, GET NEXT LINE
         SPACE
TFI      DS    0H
        $IFON  SWITCHS,NFSWS,TAD   BRANCH IF IN 'NOFILL' MODE
        $IFON  SWITCHS,FNOCT,DOPR  BRANCH IF DON'T COUNT MODE
         SPACE
         OC    PTELLNG,PTELLNG     ANY RESIDUE (LINE EXCEEDED) .Q
         BZ    MAIN                NO, GET ANOTHER LINE
         SPACE
TAD      DS    0H
         CLI   JUVAL,JUVNEG        'NO JUSTIFY' MODE .Q
         BE    DOPR                BRANCH IF YES
        $ON    SWITCHS,JUADSWS     ELSE PRINT WILL JUSTIFY CURRENT LINE
         SPACE
DOPR     DS    0H
        $CALL  PRINT               CLEAR THE PRINT BUFFER
        $OFF   SWITCHS,JUADSWS     CLEAR JUSTIFY CURRENT LINE SWITCH
         LA    R1,LINKPARM         POINT TO PARM AREA
        $CALL  MERGE               MERGE THE REMAINDER
         OC    PTELLNG,PTELLNG     WAS THERE ANY REMAINDER LEFT .Q
         BNZ   TFI                 YES, PROCESS IT
         B     MAIN                NO, GET NEXT LINE
         EJECT
***********************************************************************
*                                                                     *
*              PRODUCE ALL ERROR DIAGNOSTICS HERE (SOME DAY)          *
*                                                                     *
***********************************************************************
         SPACE
ERRCHECK DS    0H
         OC    ERRFLGS,ERRFLGS     ANY ERRORS SET .Q
         BZ    ERRCK01             BRANCH IF NONE
        $SAVE  ,                   SAVE CALLER'S REGISTERS
        $CALL  ERROUT              PRINT DIAGNOSTIC(S)
        $RESTOR ,                  RESTORE CALLER'S REGISTERS
ERRCK01  DS    0H
         XC    ERRSTART,ERRSTART   CLEAR ERROR COLUMN
         BR    RETURN              RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*              USER BACKSPACE AND HEX JOIN                            *
*                                                                     *
***********************************************************************
         SPACE
MAINBK   DS    0H
         CLI   BSIND,C' '          BLANK FOR BACKSPACE .Q
         BE    MAINBK04            YES, QUIT NOW
        $SAVE  ,                   SAVE CALLER'S REGISTERS
         LA    R1,BUFF2-1          BEFORE FIRST CHAR OF INPUT STRING
         LH    COUNT,BUFF2LGZ      LENGTH OF INPUT STRING
         MVC   MAINBKCL+1(1),BSIND COS 'CLI' BEATS 'CLC'
         L     R15,HEXTABAD        HEX TRANSLATE TABLE
         XC    DECM,DECM           PREPARE FOR HEX CONVERSIONS
         SPACE
MAINBK01 DS    0H
MAINBKCL CLI   1(R1),*-*           USER BACKSPACE CHAR .Q
         BNE   MAINBK02            BRANCH IF NOT
         MVI   1(R1),X'16'         REPLACE WITH REAL BACKSPACE
         CLI   BSHJ,YNHJ           HEX JOIN OPTION IN EFFECT .Q
         BNE   MAINBK02            BRANCH IF NOT
         MVC   DECM+3(1),0(R1)     CHAR BEFORE BACKSPACE
         TR    DECM+3(1),0(R15)    HEX EQUIVALENT
         CLI   DECM+3,15           NOT A HEX CHAR .Q
         BH    MAINBK02            BRANCH IF NOT
         MVC   DECM+7(1),2(R1)     SECOND CHARACTER
         TR    DECM+7(1),0(R15)    HEX EQUIVALENT
         CLI   DECM+7,15           NOT A HEX CHAR .Q
         BH    MAINBK02            BRANCH IF NOT
         L     R0,DECM             FIRST HEX DIGIT
         SLL   R0,4                IN ITS PROPER PLACE
         A     R0,DECM+4           PLUS SECOND HEX DIGIT
         STC   R0,0(,R1)           REPLACE IN THE INPUT STRING
         LH    TEMP,BUFF2LGZ       LENGTH OF STRING
         S     TEMP,F2             LENGTH-2
         STH   TEMP,BUFF2LGZ       NEW LENGTH OF STRING
         LA    TEMP,BUFF2(TEMP)    NEW END OF STRING
         SR    TEMP,R1             LENGTH OF THE REMAINDER
         EX    TEMP,MAINBKMV       MOVE OVER THE REMAINDER
         B     MAINBK03            DON'T BUMP CHAR POINTER
MAINBK02 DS    0H
         LA    R1,1(,R1)           POINT TO NEXT CHAR
MAINBK03 DS    0H
         S     COUNT,F1            ONE CHARACTER MORE DONE
         BP    MAINBK01            GO TILL DONE
        $RESTOR ,                  RESTORE CALLER'S REGISTERS
MAINBK04 DS    0H
         BR    RETURN              AND RETURN TO CALLER
         SPACE
MAINBKMV MVC   1(*-*,R1),3(R1)     MOVE OVER BACKSPACE.HEX
         EJECT
***********************************************************************
*                                                                     *
*              ESCAPE CHARACTER ON INPUT                              *
*                                                                     *
***********************************************************************
         SPACE
MAINES   DS    0H
         L     R15,ESTABAD         ESCAPE SYMBOL TABLE ADDRESS
         LA    R15,0(,R15)         CLEAR ESCAPE CHARACTER
         LTR   R15,R15             IS THERE ANY ESCAPE CHAR .Q
         BZ    MAINES03            BRANCH IF NOT
        $SAVE  ,                   SAVE CALLER'S REGISTERS
         LA    R1,BUFF2            FIRST CHAR OF INPUT STRING
MAINES01 DS    0H
         LA    TEMP,BUFF2          FIRST CHAR OF INPUT STRING
         AH    TEMP,BUFF2LGZ       LAST CHAR OF STRING +1
         SR    TEMP,R1             LENGTH OF STRING REMAINDER
         BNP   MAINES02            BRANCH IF AT THE END
         BCTR  TEMP,0              LENGTH -1 OF REMAINDER
         EX    TEMP,TESTESC        TEST FOR ESCAPE CHAR
         BZ    MAINES02            BRANCH IF NO ESCAPE FOUND
         LA    TEMP,BUFF2          FIRST CHAR OF STRING
         AH    TEMP,BUFF2LGZ       LAST CHAR OF STRING +1
         BCTR  TEMP,0              DECREMENT TO THE LAST
         CR    TEMP,R1             IS ESCAPE LAST CHAR .Q
         BNH   MAINES02            FORGET REPLACEMENT IF YES
         LH    TEMP,BUFF2LGZ       LENGTH OF STRING
         BCTR  TEMP,0              LENGTH -1
         STH   TEMP,BUFF2LGZ       NEW LENGTH OF STRING
         LA    TEMP,BUFF2(TEMP)    END OF STRING
         SR    TEMP,R1             LENGTH OF REMAINDER
         EX    TEMP,TESTMVC        MOVE OVER REMAINDER
         L     TEMP,TRANADI        INPUT TRANSLATE TABLE
         TR    0(1,R1),0(TEMP)     TRANSLATE CHAR AFTER ESCAPE
         LA    R1,1(,R1)           BUMP OVER TRANSLATED CHARACTER
         B     MAINES01            LOOK FOR NEXT
MAINES02 DS    0H
        $RESTOR ,                  RESTORE CALLER'S REGISTERS
MAINES03 DS    0H
         BR    RETURN              RETURN TO CALLER
         SPACE
TESTESC  TRT   0(*-*,R1),0(R15)    EXECUTED SEARCH FOR ESCAPE
TESTMVC  MVC   0(*-*,R1),1(R1)     EXECUTED MOVE OVER ESCAPE
         EJECT
***********************************************************************
*                                                                     *
*              OVERLAY INPUT RECORD                                   *
*                                                                     *
***********************************************************************
         SPACE
MAINOI   DS    0H
MAINOI01 DS    0H
         L     X1,OIANCH           OVERLAY INPUT ANCHOR
         LTR   X1,X1               ANYTHING THERE .Q
         BZ    MAINOI06            BRANCH IF NONE
         USING OODSECT,X1          TELL THE ASSEMBLER
         L     COUNT,OOQCNT        GET OVERLAY COUNT LEFT
         S     COUNT,F1            DECREMENT BY ONE
         BNM   MAINOI02            BRANCH IF SOME LEFT
        $SAVE ,                    SAVE CALLER'S REGISTERS
         LA    R1,OIANCH-OOQFCHN+OODSECT     ANCHOR POINTER
        $CALL  OVREMOV             DELETE EMPTY ELEMENT
        $RESTOR ,                  RESTORE CALLER'S REGISTERS
         B     MAINOI01            AND TRY AGAIN
         SPACE
MAINOI02 DS    0H
        $SAVE  ,                   SAVE CALLER'S REGISTERS
         ST    COUNT,OOQCNT        UPDATE COUNT LEFT
         LH    COUNT,OOQRDW        LENGTH OF OVERLAY LINE
         LTR   COUNT,COUNT         ANY ARG PRESENT .Q
         BNP   MAINOI05            BRANCH IF NONE
         CH    COUNT,BUFF2LGZ      IS OVERLAY LONGER .Q
         BNH   MAINOI03            BRANCH IF NOT
         STH   COUNT,BUFF2LGZ      NEW LENGTH SAME AS OVERLAY
MAINOI03 DS    0H
         LA    R1,BUFF2-1(COUNT)   INPUT CHARACTER ADDRESS
         CLI   0(R1),C' '          BLANK IN INPUT .Q
         BNE   MAINOI04            BRANCH IF NOT
         IC    R1,OOQDATA-1(COUNT) OVERLAY CHARACTER
         STC   R1,BUFF2-1(COUNT)   ADD TO INPUT TEXT
MAINOI04 DS    0H
         BCT   COUNT,MAINOI03      DO ALL CHARACTERS IN INPUT
         SPACE
MAINOI05 DS    0H
        $RESTOR ,                  RESTORE CALLER'S REGISTERS
         SPACE
MAINOI06 DS    0H
         BR    RETURN              RETURN TO CALLER
         DROP  X1
         EJECT
***********************************************************************
*                                                                     *
*              PARAGRAPH INDENT ON INPUT                              *
*                                                                     *
***********************************************************************
         SPACE
MAINPI   DS    0H
         LH    R15,PICNT           GET PARAGRAPH INDENT VALUE
         LTR   R15,R15             ANY VALUE PRESENT .Q
         BNP   MNPI05              RETURN IF NOT
         LH    R15,CECNT           GET .CE/.LA/.RA COUNT
         LTR   R15,R15             ANY OUTSTANDING REQUESTS .Q
         BP    MNPI05              RETURN IF YES
        $IFON  SWITCHS,FNOCT,MNPI05     BRANCH IF DON'T COUNT
        $IFON  SWITCHS,NFSWS,MNPI05     BRANCH IF NOFILL MODE
         L     R15,OLDCOUNT        CHARACTER COUNT LEFT TO FORMAT
         LTR   R15,R15             ANYTHING PRESENT .Q
         BNZ   MNPI05              BRANCH IF NOT AFTER A BREAK
         CLI   BUFF2,X'05'         1ST CHARACTER A TAB .Q
         BE    MNPI05              FORGET INDENT IF YES
        $SAVE  ,                   SAVE CALLER'S REGISTERS
         L     R15,BUFF3AD         WORK BUFFER ADDRESS
         LH    COUNT,BUFF2LGZ      LENGTH OF RECORD
         LTR   COUNT,COUNT         TEST LENGTH
         BNP   MNPI04              GO TO RETURN IF NOTHING
         LA    R0,B2LG             MAXIMUM RECORD LENGTH
         LR    R1,COUNT            LENGTH OF REMAINDER
         AH    R1,PICNT            PLUS PARAGRAPH INDENT
         CR    R1,R0               TOO BIG .Q
         BNH   MNPI00              BRANCH IF NOT
         MVI   EFLAG044,ERRWARN    RESULT RECORD WOULD OVERFLOW
         B     MNPI04              GO TO RETURN
MNPI00   DS    0H
         EX    COUNT,MAINPISV      SAVE AWAY RECORD
         LH    R1,PICNT            PARAGRAPH INDENT COUNT
         EX    R1,MAINPICL         CLEAR INDENT AMOUNT
         LA    TEMP,BUFF2(R1)      TARGET OF RESULT
MNPI01   DS    0H
         CLI   4(R15),C' '         BLANK IN BUFFER .Q
         BNE   MNPI03              BRANCH IF NOT
         BCT   COUNT,MNPI02        DECREMENT INPUT RECORD LENGTH
         B     MNPI03              BUT DON'T FALL OFF THE FRONT
MNPI02   DS    0H
         LA    R15,1(,R15)         BUMP INPUT POINTER
         BCT   R1,MNPI01           UP TO INDENT VALUE
MNPI03   DS    0H
         EX    COUNT,MAINPIRE      RESTORE REST OF BUFFER
         AH    COUNT,PICNT         NEW STRING LENGTH
         STH   COUNT,BUFF2LGZ      SET NEW LENGTH
MNPI04   DS    0H
        $RESTOR ,                  RESTORE CALLER'S REGISTERS
MNPI05   DS    0H
         BR    RETURN              RETURN TO CALLER
         SPACE
MAINPISV MVC   4(*-*,R15),BUFF2    EXECUTED SAVE RECORD
MAINPICL MVC   BUFF2(*-*),BLANKS   EXECUTED CLEAR RECORD START
MAINPIRE MVC   0(*-*,TEMP),4(R15)  EXECUTED RESTORE RECORD
         EJECT
***********************************************************************
*                                                                     *
*              HANGING INDENT ON INPUT                                *
*                                                                     *
***********************************************************************
         SPACE
MAINHI   DS    0H
         OC    HICNT,HICNT         ANY HANGING INDENT DEFINED .Q
         BZ    MNHI03              BRANCH IF NOT
         OC    OFFLI,OFFLI         IS USER OFFSET OUTSTANDING .Q
         BNZ   MNHI03              YES, FORGET THE AUTOMATIC
         SPACE
        $SAVE ,                    SAVE CALLER'S REGISTERS
         LH    COUNT,HICNT         GET HANGING INDENT
         C     COUNT,LLZ           COMPARE WITH LINE LENGTH
         BH    MNHI01              TOO BIG IF GREATER
         LH    TEMP,INDL           CLEAR OFFSET
         SH    TEMP,OFFL            ..
         STH   TEMP,INDL           ADJUST INDENTATION
         SH    TEMP,UNDL           ..
         BM    MNHI01              ERROR IF TOO BIG
         STH   TEMP,RMARGIN        SET INDENTATION
         STH   COUNT,OFFL          SET CURRENT VALUE
         STH   COUNT,OFFLI         SET NEXT OFFSET VALUE
         STH   COUNT,OFUNCNT       SET MARGIN VALUE FOR FORMAT
         B     MNHI02              GO TO RETURN
MNHI01   DS    0H
         MVI   EFLAG016,ERRSET     HANGING INDENT FAILED
MNHI02   DS    0H
        $RESTOR ,                  RESTORE CALLER'S REGISTERS
         SPACE
MNHI03   DS    0H
         BR    RETURN              AND RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*              USER TAB CHARACTER                                     *
*                                                                     *
***********************************************************************
         SPACE
MAINTB   DS    0H
         CLC   TBIND,TBIND+1       DEFAULT TAB CHARACTER .Q
         BE    MAINTB02            YES, QUIT NOW
         CLI   TBIND,C' '          BLANK FOR A TAB .Q
         BE    MAINTB02            YES, QUIT NOW AGAIN
         SPACE
        $SAVE  ,                   SAVE CALLER'S REGS
         L     X1,TRINITAD         IDENTITY TRANSLATE TABLE
         SR    R1,R1               CLEAR WORK REG
         IC    R1,TBIND            USER TAB CHARACTER
         LA    R0,X'05'            THIS IS A REAL TAB
         STC   R0,0(R1,X1)         ZAP IDENTITY TRANS TABLE
         LH    COUNT,BUFF2LGZ      LENGTH OF INPUT STRING
         S     COUNT,F1            LENGTH-1
         BM    MAINTB01            BRANCH IF NOTHING
         EX    COUNT,MAINTBTR      USER TABLE TO REAL TABS
MAINTB01 DS    0H
         STC   R1,0(R1,X1)         RESTORE IDENTITY TRANS TABLE
        $RESTOR ,                  RESTORE CALLER'S REGS
         SPACE
MAINTB02 DS    0H
         BR    RETURN              RETURN TO CALLER
         SPACE
MAINTBTR TR    BUFF2(*-*),0(X1)    USER TABS TO REAL TABS
         EJECT
***********************************************************************
*                                                                     *
*              'USER HYPHENATION' CHECK                        SOCOL  *
*                                                                     *
***********************************************************************
         SPACE
MAINUHY  DS    0H
        $IFON  SWITCHS,NFSWS,MNUHY01    BRANCH IF NO FORMAT MODE
         LH    TEMP,CECNT          GET .CE/.LA/.RA COUNT
         LTR   TEMP,TEMP           ANY OUTSTANDING REQUESTS .Q
         BP    MNUHY01             RETURN IF YES
         LA    TEMP,HYUSER         USER HYPHENATION CODE
         C     TEMP,HYLEVEL        IS THAT OUR CURRENT LEVEL .Q
         BNE   MNUHY01             BRANCH IF NOT
         LH    TEMP,BUFF2LGZ       LENGTH OF STRING
         S     TEMP,F2             LENGTH LESS TWO
         BM    MNUHY01             BRANCH IF NOT AT LEAST TWO LONG
         LA    TEMP,BUFF2(TEMP)    POINT TO SECOND LAST CHARACTER
         CLI   0(TEMP),C'A'-X'40'  COMPARE WITH LOWER 'A'
         BL    MNUHY01             IF LESS, CANNOT BE A WORD
         CLI   0(TEMP),C'Z'        COMPARE WITH UPPER 'Z'
         BH    MNUHY01             IF MORE, CANNOT BE A WORD
         CLI   1(TEMP),HYACHAR     IS LAST CHAR AN ACTUAL HYPHEN .Q
         BNE   MNUHY01             BRANCH IF NOT
         MVI   1(TEMP),HYUCHAR     MAKE IT INTERNAL HYPHEN CHARACTER
MNUHY01  DS    0H
         BR    RETURN              AND RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*              'PERIOD' --- PROCESS PRINT CONTROLS                    *
*                                                                     *
***********************************************************************
         SPACE
PERIOD   DS    0H
        $IFON  SWITCHS,NCSWS,MAIN08  BRANCH IF CONTROLS TO BE IGNORED
        $IFOFF SWITCHS,LISWS,PERNOLI BRANCH IF NOT LITERAL 'ON'
         L     R1,BUFF3AD          POINT TO WORK BUFFER
         MVC   0(B2LG+4,R1),BUFF2LGZ    SAVE ENTIRE INPUT LINE
         SPACE
PERNOLI  DS    0H
         L     R1,CWTABAD          GET ADDR OF CONTROL WORD SEP TABLE
         LH    X2,BUFF2LGZ         GET LENGTH OF INPUT
         BCTR  X2,0                DECREMENT LENGTH BY ONE
         EX    X2,TESTCW           TEST FOR CONTROL WORD SEPARATOR
         BZ    PEREND              BRANCH IF NONE FOUND
         LR    X3,R1               POINT TO FOUND SEPARATOR
         MVI   0(X3),C' '          REPLACE CONTROL SEPARATOR BY BLANK
         BL    CWFOUND             BRANCH IF MIDST ON INPUT LINE
         STH   X2,BUFF2LGZ         REDUCE LENGTH AND IGNORE
         B     PEREND              AND CONTINUE
         SPACE
CWFOUND  DS    0H
         LA    X1,BUFF2            START OF INPUT AREA
         SR    X1,X3               NEGATIVE LENGTH
         LPR   X1,X1               MAKE IT POSITIVE
         STH   X1,BUFF2LGZ         SET NEW LENGTH
         SR    X2,X1               LENGTH OF REMAINDER
         LA    R1,1(,X3)           SAVE DATA FROM HERE
         LR    TEMP,X2             LENGTH OF AREA TO SAVE
         BCTR  TEMP,0              LENGTH-1 OF AREA TO SAVE
        $IFON  SWITCHS,LISWS,PERCWLI    BRANCH IF LITERAL 'ON'
        $CALL  HIDBADD             SAVE AREA IN READ STACK
PERCWLI  DS    0H
         EX    X2,BLNKREST         BLANK REST OF INPUT
         SPACE
PEREND   DS    0H
         BAL   RETURN,MAINES       GO CHECK FOR INPUT ESCAPE CHARS
         BAL   RETURN,MAINBK       GO CHECK FOR USER BKSP AND HEX JOIN
         BAL   RETURN,MAINTB       CHECK FOR USER TAB CHARACTERS
         SPACE
        $CALL  ARGINIT             SETUP FOR FIRST ARGUMENT
         L     X1,ARGSTART         RETAIN FIRST ARG START ADDR
         LTR   TEMP,TEMP           ANYTHING THERE BUT INDICATOR .Q
         BZ    PERNRM              NOT REMOTE IF YES
         CLC   0(1,COUNT),1(COUNT) DOUBLE INDICATOR .Q
         BE    PERNAT              YES, ONLY NATIVE CONTROL WORDS
         LA    R0,L'APIMNAME       MAXIMUM REMOTE NAME LENGTH
         CR    TEMP,R0             TOO BIG TO TEST .Q
         BH    PERRMOK             YES, LET IT THROUGH
         LA    TEMP,RMNAMLEN-1(TEMP)    NAME LENGTH DEFINED ENTRY
         CLI   0(TEMP),RMNAMDEF    ANY REMOTES OF LENGTH DEFINED .Q
         BNE   PERNRM              BRANCH IF NOT
PERRMOK  DS    0H
        $IFON  SWITCHS,LISWS,PERNRM     BRANCH IF LITERAL 'ON'
         CLI   1(COUNT),C'*'       START OF ASSEMBLER COMMENT .Q
         BNE   PERNCMT             BRANCH IF NOT
         CLI   2(COUNT),C' '       AND ONLY THAT .Q
         BE    PERNRM              BRANCH IF YES
PERNCMT  DS    0H
         LA    R0,1(,COUNT)        POINT PAST INDICATOR
         ST    R0,ARGSTART         SCAN NAME FROM THERE
        $CALL  SITST               TEST AS A REMOTE NAME
         BC    15-BOMIT,PERNRM     BRANCH IF NOT FOUND
        $IFON  SWITCHS,CSSWS,MAIN  FORGET IT IF IN COND SECTION
         SPACE
         BAL   RETURN,MAINLB       WITHIN A GOTO .Q
         BC    BNEG,MAIN           BRANCH IF YES
         SPACE
        $OFF   IFSTAK,(IFCWTE,IFCWUR,IFCWIF) NOT .TH/.EL/.UR/.IF
         BAL   RETURN,MAINIF       TEST INCLUSION
         BC    BNEG,MAIN           BRANCH IF TO BE OMITTED
        $CALL  SIS                 SIGNAL IF OK
         B     MAIN                AND CONTINUE
         SPACE
PERNAT   DS    0H
         LA    COUNT,1(,COUNT)     POINT TO SECOND INDICATOR
         CLC   0(1,COUNT),1(COUNT) ALTERNATE .LB .Q
         BNE   PERNRM              BRANCH IF NOT
         LA    X1,2(,COUNT)        ARGUMENT STARTS HERE
         MVC   RMCW(2),=C'LB'      CHANGE TO EXPRESSABLE FORM
         CLC   1(1,COUNT),2(COUNT) NATIVE ALTERNATE .LB .Q
         BNE   PERNNUL             BRANCH IF NOT
         LA    X1,3(,COUNT)        ARGUMENT STARTS HERE
         B     PERNNUL             AND CONTINUE
         SPACE
PERNRM   DS    0H
         MVC   RMCW(2),1(COUNT)    ALIGN CONTROL WORD
         OC    RMCW(2),BLANKS      CONVERT TO UPPER CASE
         CLI   RMCW,C' '           NULL CONTROL WORD .Q
         BNE   PERNNUL             BRANCH IF NOT
         MVC   RMCW(2),=C'NL'      CHANGE TO EXPRESSABLE FORM
PERNNUL  DS    0H
         ST    X1,ARGSTART         RESET FIRST ARG POINTER
         LH    R0,RMCW             TEST VIA REGISTER
         LM    X1,X3,INDEXS        SET INDEXS
PERLOP   DS    0H
         CH    R0,SPCTLW(,X1)      DOES CONTROL WORD MATCH .Q
         BE    MATCH               BRANCH IF YES
         BXLE  X1,X2,PERLOP        NO, TRY AGAIN
        $IFON  SWITCHS,LISWS,PERLI BRANCH IF LITERAL 'ON'
         CLI   1(COUNT),C'*'       ASSEMBLER TYPE COMMENT .Q
         BNE   PERERR              IF NOT, AN ERROR
         SPACE
         L     X1,HIDBANCH         POINT TO HIDDEN BUFFER
         USING HIDB,X1             AREA LOOKS LIKE THIS
         LTR   X1,X1               ANY HIDDEN BUFFER PRESENT .Q
         BZ    PERACMT             BRANCH IF NOT
         USING HIDB,X1             AREA LOOKS THIS WAY
         XC    HIDBLEN,HIDBLEN     ZERO LENGTH OF ANY REMAINING DATA
PERACMT  DS    0H
         B     MAIN                FULL LINE COMMENT ACCEPTED
         SPACE
PERERR   DS    0H
        $IFON  SWITCHS,LISWS,PERLI BRANCH IF LITERAL 'ON'
        $IFON  SWITCHS,CSSWS,MAIN  FORGET IT IF IN COND SECTION
         BAL   RETURN,MAINLB       WITHIN A GOTO .Q
         BC    BNEG,MAIN           BRANCH IF YES
         MVI   EFLAG004,ERRSET     ILLEGAL CONTROL WORD
         B     MAIN                AND CONTINUE
         SPACE
PERLI    DS    0H
         L     R1,BUFF3AD          ORIGINAL WORK BUFFER
         MVC   BUFF2LGZ(B2LG+4),0(R1)   RESTORE ORIGINAL LINE
        $IFOFF SWITCHS,LISWS,MAIN07     PROCESS AS COMMAND
         B     MAIN08              REPROCESS AS DATA
         SPACE
MATCH    DS    0H
         LH    TEMP,SPCTLC(,X1)    GET CURRENT USE COUNT
         LA    TEMP,1(,TEMP)       BUMP BY ONE
         STH   TEMP,SPCTLC(,X1)    UPDATE WITH RESULT
         SPACE
        $OFF   IFSTAK,(IFCWTE,IFCWUR,IFCWIF) NOT .TH/.EL/.UR/.IF
         LH    TEMP,SPCTLO(,X1)    OFFSET OF ROUTINE
        $IFOFF SWITCHS,LISWS,MATCHUR    BRANCH IF NOT LITERAL 'ON'
         CH    TEMP,=AL2(VLI-SCRICVT)   IS THIS '.LI' .Q
         BNE   PERLI               BRANCH IF NOT
         B     MATCHDN             CONTINUE
         SPACE
MATCHUR  DS    0H
         CH    TEMP,=AL2(VUR-SCRICVT)   IS THIS .UR .Q
         BNE   MATCHTH             BRANCH IF NOT
        $ON    IFSTAK,IFCWUR       TURN ON .UR SWITCH
         B     MATCHDN             AND GO CHECK
MATCHTH  DS    0H
         CH    TEMP,=AL2(VTH-SCRICVT)   IS THIS .TH .Q
         BNE   MATCHEL             BRANCH IF NOT
        $ON    IFSTAK,IFCWTE       TURN ON .TH SWITCH
         B     MATCHDN             AND GO CHECK
MATCHEL  DS    0H
         CH    TEMP,=AL2(VEL-SCRICVT)   IS THIS .EL .Q
         BNE   MATCHIF             BRANCH IF NOT
        $ON    IFSTAK,IFCWTE       TURN ON .EL SWITCH
         B     MATCHDN             GO AND CHECK
MATCHIF  DS    0H
         CH    TEMP,=AL2(VIF-SCRICVT)   IS THIS .IF .Q
         BNE   MATCHDO             BRANCH IF NOT
        $ON    IFSTAK,IFCWIF       TURN ON .IF SWITCH
         B     MATCHDN             GO AND CHECK
MATCHDO  DS    0H
         CH    TEMP,=AL2(VDO-SCRICVT)   IS THIS .DO .Q
         BNE   MATCHEN             BRANCH IF NOT
        $ON    IFSTAK,IFCWUR       TURN ON .UR SWITCH
         B     MATCHDN             GO AND CHECK
MATCHEN  DS    0H
         CH    TEMP,=AL2(VEN-SCRICVT)   IS THIS .EN .Q
         BNE   MATCHNL             BRANCH IF NOT
        $ON    IFSTAK,IFCWUR       TURN ON .UR SWITCH
         B     MATCHDN             GO AND CHECK
MATCHNL  DS    0H
         CH    TEMP,=AL2(VNL-SCRICVT)   IS THIS .NL .Q
         BNE   MATCHDN             BRANCH IF NOT
        $ON    IFSTAK,IFCWUR       TURN ON .UR SWITCH
         B     MATCHDN             GO AND CHECK
         SPACE
MATCHDN  DS    0H
         BAL   RETURN,MAINIF       TEST INCLUSION
         BC    BNEG,MAIN           BRANCH IF TO BE OMITTED
         SPACE
         LH    TEMP,SPCTLO(,X1)    GET OFFSET OF APPROPRIATE ROUTINE
         CH    TEMP,=AL2(VCS-SCRICVT)   IS THIS .CS .Q
         BE    MATCHCS             NO .CS TEST IF YES
        $IFON  SWITCHS,CSSWS,MAIN  FORGET IF IN COND SECTION
MATCHCS  DS    0H
         CH    TEMP,=AL2(VUR-SCRICVT)   IS THIS .UR .Q
         BE    MATCHGO             YES, LET IT THROUGH
         CH    TEMP,=AL2(VLB-SCRICVT)   IS THIS .LB .Q
         BE    MATCHGO             YES, LET IT THROUGH
         SPACE
         BAL   RETURN,MAINLB       WITHIN A GOTO .Q
         BC    BNEG,MAIN           BRANCH IF YES
         SPACE
MATCHGO  DS    0H
         L     R15,VSCRICVT        COMMUNICATIONS VECTOR ADDRESS
         L     R15,0(TEMP,R15)     ROUTINE ENTRY ADDRESS
         LTR   R15,R15             A REAL ADDRESS PRESENT .Q
         BZ    PERERR              UNDEFINED CONTROL WORD IF NOT
        $CALL  (R15)               GO TO APPROPRIATE ROUTINE
TRUEEND  DS    0H
         B     *+4(R15)            AS REQUIRED
         B     MAIN                CONTINUE WITH NEXT RECORD
         B     MAINDC              WRETDC - DON'T COUNT ENCOUNTERED
         B     MAIN05              WRETNR - ANOTHER RECORD NOW PRESENT
         B     TREND01             WRETQT - FINAL RECORD
         B     TREND08             WRETQQ - FINAL RECORD QUIT IMMED
         B     MAIN02              WRETSU - SUBSTITUTE ANOTHER RECORD
         B     PERLI               WRETLI - RESTORE ORIGINAL LITERAL
         B     TREND06             WRETPA - FINAL PAGE COMPLETE
         SPACE
TESTCW   TRT   BUFF2(*-*),0(R1)    TEST FOR CONTROL WORD SEPARATOR
BLNKREST MVC   1(*-*,X3),0(X3)     BLANK REST OF BUFF2
         EJECT
***********************************************************************
*                                                                     *
*              IF TEST ROUTINE                                        *
*                                                                     *
***********************************************************************
         SPACE
*        TO ENTER --   BAL   RETURN,MAINIF
*                      WITH FLAGS SET IN IFSTAK
*        ON EXIT  --   CC=BPOS IF RECORD TO BE PROCESSED
*                      CC=BNEG IF RECORD TO BE IGNORED
         SPACE
MAINIF   DS    0H
        $IFOFF IFSTAK,IFLAST,MNIF01     BRANCH IF NOT 1ST REC AFTER .IF
        $IFON  IFSTAK,IFCWTE,MNIF01     BRANCH IF .TH OR .EL
        $OFF   IFSTAK,IFLAST       RESET FIRST SWITCH
        $ON    IFSTAK,IFTHEN       TREAT AS OBJECT OF IMPLIED .TH
MNIF01   DS    0H
        $IFON  IFSTAK,IFCWIF,MNIF03     BRANCH IF .IF
        $IFON  IFSTAK,IFCWUR,MNIF07     BRANCH IF .UR, .DO OR .EN
        $IFANY IFSTAK,(IFTHEN,IFELSE),MNIF05 OBJECT OF .TH OR .EL .Q
        $IFON  IFSTAK,IFCWTE,MNIF07     BRANCH IF .TH OR .EL
MNIF02   DS    0H
         MVC   IFSTAK,IFSTAK+IFSTAKSP   POP THE 'IF' STACK ONE LEVEL
         OC    IFSTAK,IFSTAK       ALL DONE .Q
         BZ    MNIF07              YES, SUCCESSFUL RETURN
        $IFON  IFSTAK,IFDO,MNIF05  POPPED TO 'DO', CONTINUE
         B     MNIF02              GO POP ONCE MORE
MNIF03   DS    0H
        $IFANY IFSTAK,(IFTHEN,IFELSE),MNIF07 OBJECT OF .TH OR .EL .Q
MNIF03A  DS    0H
         MVC   IFSTAK,IFSTAK+IFSTAKSP   POP THE 'IF' STACK ONE LEVEL
         OC    IFSTAK,IFSTAK       ALL DONE .Q
         BZ    MNIF07              YES, SUCCESSFUL RETURN
        $IFON  IFSTAK,IFDO,MNIF07  POPPED TO 'DO', SUCCESSFUL RETURN
         B     MNIF03A             GO POP ONCE MORE
MNIF04   DS    0H
         MVC   IFSTAK,IFSTAK+IFSTAKSP   POP THE 'IF' STACK ONE LEVEL
         OC    IFSTAK,IFSTAK       ALL DONE .Q
         BZ    MNIF07              YES, SUCCESSFUL RETURN
        $IFON  IFSTAK,IFDO,MNIF05  POPPED TO 'DO', CONTINUE
         B     MNIF04              GO POP ONCE MORE
MNIF05   DS    0H
        $IFON  IFSTAK,IFELSE,MNIF06 BRANCH IF OBJECT OF ELSE
        $IFON  IFSTAK,IFFALSE,MNIF08    OMIT IF FALSE FOR .TH
         B     MNIF07              GO TO INCLUDE
MNIF06   DS    0H
        $IFON  IFSTAK,IFTRUE,MNIF08     OMIT IF TRUE FOR .EL
MNIF07   DS    0H
        $CC    POS                 SET INCLUDE CONDITION CODE
         B     MNIF09              BRANCH TO RETURN
MNIF08   DS    0H
        $CC    NEG                 SET EXCLUDE CONDITION CODE
MNIF09   DS    0H
         BR    RETURN              AND RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*              GOTO LABEL FOUND ROUTINE                               *
*                                                                     *
***********************************************************************
         SPACE
*        TO ENTER --    BAL   RETURN,MAINLB
*        ON EXIT  --    CC=BPOS  IF RECORD TO BE PROCESSED
*                       CC=BNEG  IF RECORD TO BE IGNORED
         SPACE
MAINLB   DS    0H
         CLI   LBGOTO,C' '         GOTO NOT IN EFFECT .Q
         BE    MAINLB02            BRANCH IF YES
         OC    LBGOTO(4),LBGOTO    A NUMERIC GOTO .Q
         BNZ   MAINLB01            FORGET THIS LINE IF NOT
         CLC   COMFILIT,LBGOTO+4   THIS THE GOTO TARGET .Q
         BL    MAINLB01            BRANCH IF NOT
         MVC   LBGOTO,BLANKS       CLEAR GOTO TARGET
         B     MAINLB02            AND TAKE INCLUDE EXIT
MAINLB01 DS    0H
        $CC    NEG                 DON'T INCLUDE THIS RECORD
         B     MAINLB03            GO TO RETURN
MAINLB02 DS    0H
        $CC    POS                 INCLUDE THIS RECORD
MAINLB03 DS    0H
         BR    RETURN              AND RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        THIS ROUTINE PRINTS FOOTNOTES AND REMOTES WHICH              *
*        REMAIN TO BE PROCESSED AT THE FINAL EOF                      *
*                                                                     *
***********************************************************************
         SPACE
TREND01  DS    0H
        $ON    SWITCHS,JUADSWS     FORCE JUSTIFICATION AND OUTPUT
        $CALL  PRINTNB             PRINT LAST LINE
         SR    X3,X3               INITIALIZE FIRST TIME SWITCH
TREND02  DS    0H
        $CALL  PAGEREAL            PHYSICAL PAGE EJECT
         CLI   ICORFLG,ICORNONE    CURRENTLY SAVING OUTPUT INCORE .Q
         BNE   TREND05             MISSING END IF YES
         OC    FNQCNT,FNQCNT       ANY FOOTNOTE LINES QUEUED .Q
         BNZ   TREND02             BRANCH BACK IF YES
         OC    CPQCNT,CPQCNT       ANY CONDITIONAL KEEP LINES .Q
         BNZ   TREND02             BRANCH BACK IF YES
         OC    CCQCNT,CCQCNT       ANY CONDITIONAL COLUMN QUEUED .Q
         BNZ   TREND02             BRANCH BACK IF YES
         OC    FKQCNT,FKQCNT       ANY FLOATING KEEP LINES .Q
         BNZ   TREND02             BRANCH BACK IF YES
         OC    FBQCNT,FBQCNT       ANY FLOATING BLOCK LINES .Q
         BZ    TREND03             BRANCH IF NONE
         MVC   CPAREA(CPFKFNL),FBAREA   MAKE FLOAT BLOCK LOOK LIKE .CP
         XC    FBAREA(CPFKFNL),FBAREA   AND CLEAR FLOAT BLOCK
         B     TREND02             CLEAR THOSE .CP'S
         SPACE
*        LOOK FOR A REMOTE WHICH CAN STILL BE TRIGGERED               *
*        (THIS INSURES THAT WHAT CAN BE PRINTED WILL BE               *
*        AND PREVENTS A POSSIBLE LOOP DUE TO SAVED REMOTES).          *
         SPACE
TREND03  DS    0H
        $IFON  SWITCHS,FEMPTY,TREND06   DONE IF PAGE EMPTY
         LTR   X3,X3               FIRST TIME TRYING TO TERMINATE .Q
         LA    X3,1(,X3)           BUMP TIME COUNT
         BNZ   TREND04             BRANCH IF NOT FIRST TIME
        $CALL  RMNEXT              SET UP FOR NEXT REMOTE (IF ANY)
         B     TREND02             AND TRY AGAIN
         SPACE
TREND04  DS    0H
        $CALL  RMCLR               REMOVE ANY AND ALL REMOTES
         B     TREND02             AND TRY AGAIN
         SPACE
TREND05  DS    0H
         MVI   EFLAG006,ERRTERM    MISSING '.XX END' STATEMENT
        $CALL  ERROUT              PRINT THE DIAGNOSTIC
         B     TREND08             AND QUIT IMMEDIATELY
         EJECT
***********************************************************************
*                                                                     *
*  POSITION PAPER, IF NECESSARY, CLOSE FILES, AND EXIT                *
*                                                                     *
***********************************************************************
         SPACE
TREND06  DS    0H
         CLC   PASSNO,DEFPASOF+TAB3DEF  IS THIS LAST PASS .Q
         BNE   TREND08             BRANCH IF NOT
        $IFOFF TTYPE,TONLINE,TREND08    BRANCH IF NOT ONLINE
        $IFON  TTYPE,TFILE,TREND08      BRANCH IF OUTPUT TO A FILE
        $IFOFF SWITCHS,STSWS,TREND07    SKIP IF NO 'STOP' OPTION
         MVC   CONSMAX,H1          READ ONE LINE FROM CONSOLE
         MVC   CONSGOTO,BLANKS     CLEAR GOTO TARGET
         XC    CONSFLAG,CONSFLAG   CLEAR CONSOLE FLAGS
        $ON    CONSFLAG,(IO$JIGG,IO$SUPR,IO$EJCT) DO A LOT
        $ON    CONSFLAG,IO$IM      AND IMBED THIS LAST OPERATION
         LA    R1,CONSBLOK         TO IMBED THE CONSOLE FILE
        $CALL  RDFILE              CALL THE INPUT COORDINATOR
         SPACE
         LA    R1,BUFF2LGZ         POINT TO READ TARGET
        $CALL  RDLINE              READ ONE LINE
         B     TREND08             AND QUIT
         SPACE
TREND07  DS    0H
        $IFON  TTYPE,TSCREEN,TREND08    NO SPACE UP FOR A CRT
         LA    COUNT,5             INTO NEXT PAGE BEFORE READY MSG
        $CALL  SPACEIM             GO SPACE DOWN NOW
         SPACE
TREND08  DS    0H
         SR    R1,R1               ZERO PARAMETER LIST
        $CALL  RDFILE              TO CLOSE ALL INPUT FILES
         SPACE
        $CALL  STAKFREE            FREE ANY SAVE/RESTORE STACK
         LA    R1,OOANCH           OUTPUT OVERLAY ANCHOR POINTER
        $CALL  OVCLR               REMOVE ANY AND ALL
         LA    R1,OIANCH           INPUT OVERLAY ANCHOR POINTER
        $CALL  OVCLR               REMOVE ANY AND ALL
         LA    R1,PEANCH           PERFORM STACK ANCHOR POINTER
        $CALL  OVCLR               REMOVE ANY AND ALL
        $CALL  RMCLR               CLEAR ANY REMOTES LEFT
        $CALL  BXCLR               CLEAR ANY BOX BUILDING DATA
         LA    R1,HNAREA           HEADNOTE DESCRIPTOR BLOCK
        $CALL  HNCLR               CLEAR ANY PRESENT
         LA    R1,HNEAREA          EVEN HEADNOTE DESCRIPTOR BLOCK
        $CALL  HNCLR               CLEAR ANY PRESENT
         LA    R1,HNOAREA          ODD HEADNOTE DESCRIPTOR BLOCK
        $CALL  HNCLR               CLEAR ANY PRESENT
         LA    R1,TBANCHR          PTR TO CURRENT USER TAB ANCHOR
        $CALL  TBFREBLK            DELETE THEM IF PRESENT
        $CALL  ERROUT              PRINT ANY TERMINATION ERRORS
         SPACE
         CLC   PASSNO,DEFPASOF+TAB3DEF  IS THIS LAST PASS .Q
         BE    TREND10             YES, GO TO TERMINATION
         L     R1,PLSTSV           NO, RESTORE P-LIST ADDRESS
         B     PASS2               GO DO ANOTHER PASS
         SPACE
TREND10  DS    0H
        $CALL  RCAFREE             RELEASE REVISION CODE WORK AREA
         SR    R0,R0               NO POINTER FOR WORK FILE CLOSE
         LA    R1,PUMAX            MAXIMUM POSSIBLE USER FILES
TREND11  DS    0H
        $CALL  PUWORK              CLOSE FILE, IF POSSIBLE
         S     R1,F1               DECREMENT FILE NUMBER
         BNM   TREND11             DO ALL FILES
         SPACE
         SR    R0,R0               ZERO ADDR TO FREE
         SR    R1,R1               ZERO LENGTH TO FREE
        $CALL  FREECELL            TERMINATE REGION MANAGER
         SPACE
        $IFOFF SWITCHS,STATSWS,TREND13  BRANCH IF NO STATISTICS
        $CALL  OUSTAT              FORMAT AVAILABLE USAGE STATISTICS
         SPACE
TREND13  DS    0H
         SR    R0,R0               CLEAR DATA POINTER
         BCTR  R0,0                NEGATIVE MEANS CLOSE
        $CALL  PUTPRT              CLOSE SYSPRINT OUTPUT FILE
         SR    R0,R0               CLEAR DATA POINTER
         BCTR  R0,0                NEGATIVE MEANS CLOSE
        $CALL  PUTTERM             CLOSE SYSTERM ERROR FILE
         SPACE
        $CALL  VTRAPS              REVERSE ANY USER TRAPS
         SPACE
         LH    X1,RETCODE          PICKUP RETURN CODE
         L     R13,4(,R13)         BACKWARD SAVE POINTER
         L     R15,=V(SYSINT)      SYSTEM DEPENDENT INTERFACE
         BAL   R14,8(,R15)         TERM SYSTEM INTERFACE CONTROL AREA
         LR    R15,X1              SET RETURN CODE
         RETURN (14,12),T,RC=(15)  RETURN TO O/S
         EJECT
***********************************************************************
*                                                                     *
*              LITERALS                                               *
*                                                                     *
***********************************************************************
         SPACE
         LTORG
         SPACE
SAVETABL DC    (SAVELEN*SAVEVLS/8)D'0'  STACKED REGISTER SAVE AREAS
         EJECT
***********************************************************************
*                                                                     *
*                             SPIE PROGRAM RECOVERY                   *
*                                                                     *
***********************************************************************
         SPACE
         PUSH  USING               SAVE ALL BASES
         DROP  ,                   REMOVE ALL CURRENT
SPIEADDR DS    0H
         BALR  R15,0               TEMP BASE
         USING *,R15               TELL THE ASSEMBLER
         SPACE
         L     COUNT,=V(NSCDAT)    COMMON WORK AREA
         USING NSCDAT,COUNT        AND TELL THE ASSEMBLER
         L     COUNT,DUMPAD        WHERE TO SAVE DATA
         USING DUMPAREA,COUNT      AND UPDATE THE ASSEMBLER
         ST    R13,DUMPREG+R13*4   SAVE ONE USER REG
         STM   TEMP,BASE,DUMPREG+TEMP*4 SAVE BUNGLER'S REGS
         MVC   DUMPREG+R14*4(8),12(R1)  SAVE R14 AND R15
         MVC   DUMPREG+R0*4(12),20(R1)  SAVE R0, R1 AND R2
         MVC   DUMPPSW(8),4(R1)    SAVE PSW
         SPACE
         L     R13,=V(NSCDAT)      DATA BASE REGISTER
         USING NSCDAT,R13          TELL THE ASSEMBLER AGAIN
         L     BASESAVE,SAVEINIT   SAVE AREA STACK ADDRESS
         USING DUMPAREA,COUNT      BUT RETAIN DUMP AREA
         SPACE
         XC    ERCONT,ERCONT       TURN OFF CONTINUE COUNT
         CLI   EFLAG998,ERRCLR     WAS IT A LOGIC ERROR .Q
         BE    SPIEA01             BRANCH IF NOT
         MVC   DUMPPSW+2(2),RETCODE  RESET INTERRUPT CODE
         DROP  COUNT
         B     SPIEA02             GO TO PROCESS ERROR MESSAGE
         SPACE
SPIEA01  DS    0H
         MVI   EFLAG999,ERRTERM    TERMINAL PROGRAM CHECK ERROR
SPIEA02  DS    0H
        $CALL  ERROUT              PRINT THE DIAGNOSTIC
         LA    R1,WRETQQ           QUICK TERMINATION CODE
        $CALL  QUITS               GO THROUGH TERMINATION
         SPACE
         LTORG ,                   SPIE LITERALS
         POP   USING               AS YOU WERE
         EJECT
         COPY  $SPCTLTB            COPY CONTROL WORDS
         SPACE 2
         END
