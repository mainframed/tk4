SHOWSPF  TITLE 'INFORMATION EXTRACTION SPF COMMAND'
***********************************************************************
*
*              INFORMATION EXTRACTION SPF COMMAND
*
*        THIS IS AN INTERFACE TO THE INFORMATION EXTRACTION ROUTINE
*        FOR SPF CLISTS UNDER SPF. IT IS INVOKED AS FOLLOWS:
*
*              ISPEXEC SELECT PGM(SHOWSPF) PARM(ID,NAME)
*              ISPEXEC VGET NAME SHARED
*
*        ID   - MUST BE A VALID IDENTIFIER FOR THE SHOW ROUTINE.
*        NAME - WILL BE USED TO CREATE A VARIABLE IN THE
*               SPF SHARED VARIABLE POOL. THE VARIABLE WILL BE SET TO
*               THE VALUE CORRESPONDING TO THE SHOW INDENTIFIER.
*
* CHANGE HISTORY:
*
*        DYNAMICALLY LOAD SHOW MODULE.                     *LBD 12/85*
*
***********************************************************************
SHOWSPF  CSECT
         EJECT
         REGEQU ,                  REGISTER EQUATES
         EJECT
***********************************************************************
*              PARAMETER
***********************************************************************
PARM     DSECT
PARMSIZE DS    H                   LENGTH OF PARAMETER STRING
PARMVAL  DS    CL100               PARAMETER CHARACTER STRING
         EJECT
***********************************************************************
*              WORKING STORAGE
***********************************************************************
WORK     DSECT                     WORK AREA
SAVE     DS    18F                 SAVE AREA
NAMELIST DS    C'('                ISPLINK VPUT NAME LIST
NAME     DS    CL8                 ISPLINK VPUT VARIABLE NAME
NAMEEND  DS    C')'                END OF NAME LIST
ID       DS    CL8                 SHOW IDENTIFIER
ILENGTH  DS    A(L'VALUE)          SHOW VALUE INPUT LENGTH
VALUE    DS    CL256               SHOW VALUE
OLENGTH  DS    F                   SHOW VALUE OUTPUT LENGTH
CALLSHOW CALL  ,                   CALL SHOW                           *
               (ID,                ID                                  *
               ILENGTH,            ILENGTH                             *
               VALUE,              VALUE                               *
               OLENGTH),           OLENGTH                             *
               VL,                                                     *
               MF=L
DEFINE   CALL  ,                   CALL ISPLINK                        *
               (,                  'VDEFINE'                           *
               NAMELIST,           NAMELIST                            *
               VALUE,              VALUE                               *
               ,                   'CHAR'                              *
               OLENGTH),           OLENGTH                             *
               VL,                                                     *
               MF=L
DELETE   CALL  ,                   CALL ISPLINK                        *
               (,                  'VDELETE'                           *
               NAMELIST),          NAMELIST                            *
               VL,                                                     *
               MF=L
PUT      CALL  ,                   CALL ISPLINK                        *
               (,                  'VPUT'                              *
               NAMELIST,           NAMELIST                            *
               ),                  'SHARED'                            *
               VL,                                                     *
               MF=L
WORKSIZE DS    0XL(*-WORK)         LENGTH OF WORK AREA
         EJECT
***********************************************************************
*              INITIALIZATION
***********************************************************************
SHOWSPF  CSECT
         USING SHOWSPF,R15
         SAVE  (14,12)             SAVE REGISTERS
         MODID ,                   IDENTIFICATION
         DROP  R15
         LR    R12,R15             R12 = BASE REGISTER
         USING SHOWSPF,R12
         L     R11,0(R1)           R11 -> PARM
         USING PARM,R11
         LA    R0,L'WORKSIZE       R0 = LENGTH OF WORK AREA
         GETMAIN R,LV=(0)          GET MAIN STORAGE FOR WORK AREA
         LR    R2,R1               R2 -> STORAGE
         LA    R3,L'WORKSIZE       R3 = LENGTH OF STORAGE
         SR    R5,R5               R5 = 0
         MVCL  R2,R4               CLEAR WORK AREA
         ST    R13,4(R1)           CHAIN SAVE AREAS
         ST    R1,8(R13)           ...
         LR    R13,R1              R13 -> WORKING STORAGE
         USING WORK,R13
         MVI   ID,C' '             ID = BLANK
         MVC   ID+1(L'ID-1),ID     ...
         MVI   NAME,C' '           NAME = BLANK
         MVC   NAME+1(L'NAME-1),NAME ...
         MVI   NAMELIST,C'('       NAMELIST = (NAME)
         MVI   NAMEEND,C')'        ...
         LA    R0,L'VALUE          ILENGTH = LENGTH OF VALUE
         ST    R0,ILENGTH          ...
         EJECT
***********************************************************************
*              PARSE PARAMETER STRING VIA SYNTAX MATRIX
***********************************************************************
*----------------------------------------------------------------------
*        POINT TO BEGINNING OF INPUT STRING.
*        POINT TO INITIAL ROW OF SYNTAX MATRIX.
*----------------------------------------------------------------------
         LH    R6,PARMSIZE         R6 = SIZE OF PARM FIELD
         BNP   ARGERROR            BRANCH IF MISSING
         BCTR  R6,0                R6 = SIZE - 1
         LA    R1,PARMVAL          R1 -> PARAMETER STRING
         BCTR  R1,0                R1 -> STRING - 1 FOR TRT
         SR    R2,R2               R2 = 0 FOR TRT
         LA    R4,MATRIX           R4 -> INITIAL MATRIX ROW
*----------------------------------------------------------------------
*        POINT TO NEXT INPUT CHARACTER
*----------------------------------------------------------------------
NEXT     DS    0H                  SCAN FOR NEXT PARAMETER
         LA    R7,PARAMETR         R7 -> TRT TABLE FOR PARAMETER
POINT    DS    0H                  POINT TO NEXT INPUT CHARACTER
COMA2##  DS    0H                  COMMA AFTER DELIMITING BLANK
         LTR   R6,R6               END OF PARAMETER STRING?
         BM    PROCESS             YES, BRANCH
         LA    R5,1(R1)            R5 -> NEXT INPUT CHARACTER
*----------------------------------------------------------------------
*        SCAN FOR NEXT SIGNIFICANT CHARACTER IN INPUT STRING.
*        TRANSLATE CHARACTER TO ITS CATEGORY (MATRIX COLUMN NUMBER).
*        CHECK FOR END OF PARAMETER STRING.
*        OBTAIN MATRIX ELEMENT USING CURRENT ROW AND COLUMN.
*        USE THAT ELEMENT AS NEW MATRIX ROW NUMBER.
*        BRANCH TO ACTION ROUTINE INDEXED BY THAT ELEMENT.
*----------------------------------------------------------------------
         EX    R6,TRT              R1 -> DELIMITING CHARACTER
*                                  R2 = MATRIX COLUMN NUMBER
         BNZ   SET                 END OF INPUT STRING?
         LA    R1,2(R6,R1)         R1 -> END OF INPUT STRING + 1
         LA    R2,ENDOS            R2 = ENDING MATRIX COLUMN NUMBER
SET      DS    0H
         BCTR  R6,0                R6 = REMAINING LENGTH
         AR    R6,R5               ...
         SR    R6,R1               ...
         SR    R3,R3               R3 = 0
         IC    R3,0(R2,R4)         R3 = MATRIX ELEMENT
         LR    R4,R3               R4 = NEW MATRIX ROW NUMBER
         MH    R4,=Y(L'MATRIX)     R4 = NUMBER * MATRIX ROW LENGTH
         LA    R4,MATRIX(R4)       R4 -> NEW MATRIX ROW
         SLL   R3,2                R3 = BRANCH INDEX
         B     ACTION(R3)          GO TO ACTION ROUTINE
*
TRT      TRT   1(0,R1),0(R7)       EXECUTED
*----------------------------------------------------------------------
*        BRANCH TABLE TO ACTION ROUTINES.
*----------------------------------------------------------------------
ACTION   DS    0H
         B     ABEND               SHOULD NEVER GET HERE
         B     PARM1##             FIRST PARAMETER
         B     BLNK1##             BLANK DELIMITING FIRST PARAMETER
         B     COMA1##             COMMA DELIMITING FIRST PARAMETER
         B     COMA2##             COMMA AFTER DELIMITING BLANK
         B     PARM2##             SECOND PARAMETER
         B     BLNK2##             BLANK DELIMITING SECOND PARAMETER
         B     ENDP1##             END OF SECOND PARAMETER
         B     ENDP2##             END OF PARAMETER STRING
         B     DELIM##             DELIMITER ERROR
         B     ABEND##             LOGIC ERROR
         EJECT
***********************************************************************
*              TAKE ACTION BASED ON SYNTACTIC SIGNIFICANCE
***********************************************************************
PARM1##  DS    0H                  FIRST PARAMETER
PARM2##  DS    0H                  SECOND PARAMETER
         LR    R9,R1               R9 -> PARAMETER
         LA    R7,DELIMITR         R7 -> TRT TABLE FOR DELIMITER
         B     POINT               POINT TO NEXT INPUT CHARACTER
*----------------------------------------------------------------------
BLNK1##  DS    0H                  BLANK DELIMITING FIRST PARAMETER
COMA1##  DS    0H                  COMMA DELIMITING FIRST PARAMETER
         LR    R8,R1               R8 = LENGTH OF FIELD SCANNED - 1
         SR    R8,R9               ...
         BCTR  R8,0                ...
         C     R8,=A(L'ID-1)       IS LENGTH OF PARAMETER > ID?
         BH    ARGERROR            YES, BRANCH
         EX    R8,MVCID            MOVE ID TO WORKING STORAGE
         B     NEXT                SCAN FOR PARAMETER
*
MVCID    MVC   ID(0),0(R9)         EXECUTED
*----------------------------------------------------------------------
ENDP1##  DS    0H                  END OF SECOND PARAMETER
BLNK2##  DS    0H                  BLANK DELIMITING SECOND PARAMETER
         LR    R8,R1               R8 = LENGTH OF FIELD SCANNED - 1
         SR    R8,R9               ...
         BCTR  R8,0                ...
         C     R8,=A(L'NAME-1)     IS LENGTH OF PARAMETER > NAME?
         BH    ARGERROR            YES, BRANCH
         EX    R8,MVCNAME          MOVE NAME TO WORKING STORAGE
         B     NEXT                SCAN FOR PARAMETER
*
MVCNAME  MVC   NAME(0),0(R9)       EXECUTED
         EJECT
***********************************************************************
ENDP2##  DS    0H                  END OF PARAMETER STRING
PROCESS  DS    0H                  PROCESS PARAMETERS
         LOAD  EP=SHOW             LOAD SHOW MODULE        *LBD 12/85*
         LR    R15,R0              SET EPA                 *LBD 12/85*
         CALL  (15),               INVOKE SHOW                         *
               (ID,                IDENTIFIER FOR INFORMATION REQUESTED*
               ILENGTH,            LENGTH PROVIDED FOR VALUE           *
               VALUE,              INFORMATION REQUESTED               *
               OLENGTH),           LENGTH OF INFORMATION PROVIDED      *
               VL,                                                     *
               MF=(E,CALLSHOW)
         LR    R8,R15              SAVE RETURN CODE        *LBD 12/85*
         DELETE EP=SHOW                                    *LBD 12/85*
         LTR   R8,R8               TEST RETURN CODE
         BNZ   SHOWERR             BRANCH IF ERROR
         CALL  ISPLINK,            DEFINE FUNCTION VARIABLE            *
               (=C'VDEFINE',       'VDEFINE'                           *
               NAMELIST,           (VARIABLE-NAME)                     *
               VALUE,              VALUE                               *
               =C'CHAR',           'CHAR'                              *
               OLENGTH),           VARIABLE-LENGTH                     *
               VL,                                                     *
               MF=(E,DEFINE)
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ISPERROR            BRANCH IF ERROR
         CALL  ISPLINK,            COPY TO SHARED VARIABLE             *
               (=C'VPUT',          'VPUT'                              *
               NAMELIST,           (VARIABLE-NAME)                     *
               =C'SHARED'),        'SHARED'                            *
               VL,                                                     *
               MF=(E,PUT)
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ISPERROR            BRANCH IF ERROR
         CALL  ISPLINK,            DELETE FUNCTION VARIABLE            *
               (=C'VDELETE',       'VDELETE'                           *
               NAMELIST),          (VARIABLE-NAME)                     *
               VL,                                                     *
               MF=(E,DELETE)
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ISPERROR            BRANCH IF ERROR
         B     NORMAL              NORMAL RETURN
         EJECT
***********************************************************************
*              TERMINATION
***********************************************************************
SHOWERR  DS    0H                  SHOW ERROR
ISPERROR DS    0H                  SPF ERROR
         LR    R2,R15              SAVE RETURN CODE
         B     RETURN
DELIM##  DS    0H                  DELIMITER ERROR
         LA    R2,20               RETURN CODE = 20
         B     RETURN
ARGERROR DS    0H                  CALLER ARGUMENT LIST ERROR
         LA    R2,12               RETURN CODE = 12
         B     RETURN
NORMAL   DS    0H                  NORMAL COMPLETION
         SR    R2,R2               RETURN CODE = 0
RETURN   DS    0H
         LA    R0,L'WORKSIZE       R0 = LENGTH OF WORK AREA
         LR    R1,R13              R1 -> DYNAMIC STORAGE
         L     R13,SAVE+4          R13 -> PREVIOUS SAVE AREA
         FREEMAIN R,LV=(0),A=(1)   FREE MAIN STORAGE FOR WORK AREA
         LR    R15,R2              R15 = RETURN CODE
         RETURN (14,12),RC=(15)    RETURN TO CALLER
*
ABEND##  ABEND 0,DUMP              LOGIC ERROR
*
         DROP  R11
         DROP  R12
         DROP  R13
         EJECT
***********************************************************************
*              PARSE TABLES
***********************************************************************
*----------------------------------------------------------------------
*        CATEGORIES OF CHARACTERS:
*              TRANSLATE-AND-TEST TABLE VALUES;
*              MATRIX COLUMN NUMBERS.
*----------------------------------------------------------------------
FIELD    EQU   0                   VALID CHARACTERS BETWEEN DELIMITERS
BLANK    EQU   1  ' '              BLANK
ALPHA    EQU   2  $#@ A-Z          ALPHABETIC AND NATIONAL
NUMBR    EQU   3  0-9              NUMERIC
COMMA    EQU   4  ,                COMMA
ENDOS    EQU   5                   END OF STRING
OTHER    EQU   6                   ANY OTHER CHARACTER
*----------------------------------------------------------------------
*        CORRESPONDENCE BETWEEN CHARACTERS AND CATEGORIES:
*              SCAN FOR START OF PARAMETER
*              TRANSLATE-AND-TEST TABLE
*----------------------------------------------------------------------
PARAMETR DS    0CL256
         DC    64AL1(OTHER)
         DC      AL1(FIELD)  ' '   BLANK
         DC    26AL1(OTHER)
         DC      AL1(ALPHA)  $     NATIONAL
         DC    15AL1(OTHER)
         DC      AL1(COMMA)  ,     COMMA
         DC    15AL1(OTHER)
         DC     2AL1(ALPHA)  #@    NATIONAL
         DC    68AL1(OTHER)
         DC     9AL1(ALPHA)  A-I   ALPHABETIC
         DC     7AL1(OTHER)
         DC     9AL1(ALPHA)  J-R   ALPHABETIC
         DC     8AL1(OTHER)
         DC     8AL1(ALPHA)  S-Z   ALPHABETIC
         DC     6AL1(OTHER)
         DC    10AL1(NUMBR)  0-9   NUMERIC
         DC     6AL1(OTHER)
*----------------------------------------------------------------------
*        CORRESPONDENCE BETWEEN CHARACTERS AND CATEGORIES:
*              SCAN FOR DELIMITER BETWEEN PARAMETERS
*              TRANSLATE-AND-TEST TABLE
*----------------------------------------------------------------------
DELIMITR DS    0CL256
         DC    64AL1(OTHER)
         DC      AL1(BLANK)  ' '   BLANK
         DC    26AL1(OTHER)
         DC      AL1(FIELD)  $     NATIONAL
         DC    15AL1(OTHER)
         DC      AL1(COMMA)  ,     COMMA
         DC    15AL1(OTHER)
         DC     2AL1(FIELD)  #@    NATIONAL
         DC    68AL1(OTHER)
         DC     9AL1(FIELD)  A-I   ALPHABETIC
         DC     7AL1(OTHER)
         DC     9AL1(FIELD)  J-R   ALPHABETIC
         DC     8AL1(OTHER)
         DC     8AL1(FIELD)  S-Z   ALPHABETIC
         DC     6AL1(OTHER)
         DC    10AL1(FIELD)  0-9   NUMERIC
         DC     6AL1(OTHER)
*----------------------------------------------------------------------
*        SYNTACTIC SIGNIFICANCE:
*              MATRIX ROW NUMBERS;
*              ACTION INDEX NUMBERS.
*----------------------------------------------------------------------
BEGIN    EQU   0                   BEGINNING OF INPUT STRING
PARM1    EQU   1                   FIRST PARAMETER
BLNK1    EQU   2                   BLANK DELIMITING FIRST PARAMETER
COMA1    EQU   3                   COMMA DELIMITING FIRST PARAMETER
COMA2    EQU   4                   COMMA AFTER DELIMITING BLANK
PARM2    EQU   5                   SECOND PARAMETER
BLNK2    EQU   6                   BLANK DELIMITING SECOND PARAMETER
ENDP1    EQU   7                   END OF SECOND PARAMETER
ENDP2    EQU   8                   END OF PARAMETER STRING
DELIM    EQU   9                   DELIMITER ERROR
ABEND    EQU   10                  LOGIC ERROR
*----------------------------------------------------------------------
*        CORRESPONDENCE BETWEEN CHARACTER CATEGORIES AND SYNTACTIC
*        SIGNIFICANCE:
*              NEW MATRIX ROW NUMBERS;
*              ACTION INDEXES.
*----------------------------------------------------------------------
MATRIX   DS    0XL6,AL1
*                  BLANK ALPHA NUMBR COMMA ENDOS OTHER
BEGIN#   DC    AL1(ABEND,PARM1,DELIM,DELIM,DELIM,DELIM)
PARM1#   DC    AL1(BLNK1,PARM1,PARM1,COMA1,DELIM,DELIM)
BLNK1#   DC    AL1(ABEND,PARM2,DELIM,COMA2,DELIM,DELIM)
COMA1#   DC    AL1(ABEND,PARM2,DELIM,DELIM,DELIM,DELIM)
COMA2#   DC    AL1(ABEND,PARM2,DELIM,DELIM,DELIM,DELIM)
PARM2#   DC    AL1(BLNK2,PARM2,PARM2,DELIM,ENDP1,DELIM)
BLNK2#   DC    AL1(ABEND,DELIM,DELIM,DELIM,ENDP2,DELIM)
         EJECT
         END   ,
