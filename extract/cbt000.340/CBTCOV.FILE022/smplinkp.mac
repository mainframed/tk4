         TITLE 'LINK EDIT DRIVER USING THE SMPCDS 12-16-85'
*--------------------------------------------------------------------*
* NAME: SMPLINKP                                                     *
*                                                                    *
* FUNCTION:                                                          *
*        THIS PROGRAM IS DESIGNED TO BE RUN UNDER ISPF               *
*        AND WILL RETRIEVE INFORMATION FROM ISPF PANELS FOR          *
*        PROCESSING.                                                 *
*                                                                    *
*        THE INFORMATION TO BE PROVIDED BY THE DRIVER PANEL IS:      *
*              OBJECT MODULE NAME(S) UP TO 8                         *
*              IN VARIABLES MEM1 THRU MEM8                           *
*                                                                    *
*              LOAD LIBRARY TO RECEIVE THE OUTPUT OF IEWL            *
*                                                                    *
*              DEFAULT AUTHORIZATION AND RENT OR REUS FOR NEW LMODS  *
*                                                                    *
*                                                                    *
* ISPF VARIABLES NEEDED ON INPUT:                                    *
*                                                                    *
*        SLOAD - LOAD LIBRARY FOR IEWL                               *
*        MEM1 THRU MEM8 - OBJECT MODULE NAME                         *
*        ROPT - RENT OR REUS FLAG OR BLANK FOR NEW LMODS             *
*        AUTH - Y OR N FOR NEW LMODS                                 *
*                                                                    *
* ISPF VARIABLES OUTPUT TO SMPLINKP PANEL:                           *
*        SLOAD                                                       *
*        MEM1 THRU MEM8                                              *
*        SYSLIB - THE SMP DETERMINED TARGET LIBRARY DDNAME           *
*                 OF SYSLMOD IF NEW                                  *
*        LEPARM - SMP DETERMINED LE PARM OR THAT PROVIDED BY ROPT    *
*        NEW    - INDICATES THAT YOU HAVE A NEW MODULE OR LMOD       *
*        DELMOD  - INDICATES DEFAULT LMOD FOR NEW MODULES IF DESIRED *
*                                                                    *
* SUB-PROGRAMS:                                                      *
*              SMPDATA - VIA ATTACH TO ACQUIRE SMPCDS INFORMATION    *
*              IEWL    - VIA ATTACH TO PERFORM LINKEDIT              *
*              IKJEFF18- VIA LINK TO PROVIDE DYNAMIC ALLOCATION      *
*                        FAILURE ANALYSIS                            *
* RETURN:                                                            *
*        00 - OK                                                     *
*        04 - FAILURE IN DYNAMIC ALLOCATION                          *
*                                                                    *
* DD'S REQUIRED THRU PRE ALLOCATION:                                 *
*              SYSLIN                                                *
*              SYSUT1                                                *
*              SYSLIB                                                *
*              SYSPRINT                                              *
*              OBJ - OBJECT DECK PDS                                 *
*              SMPCDS OR SMPCSI                                      *
*                                                                    *
* DD'S REQUIRED THRU DYNAMIC ALLOCATION:                             *
*              SYSLMOD                                               *
*                                                                    *
*--------------------------------------------------------------------*
SMPLINK  $PROLOG R11,R12
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*        PROCESS THE PARM TO GET THE PANEL TO DISPLAY OR             *
*        DEFAULT AND USE PANEL NAME SMPLINKP                         *
*                                                                    *
*--------------------------------------------------------------------*
         L     1,0(1)              * LOAD ADDR OF PARM
         LH    2,0(1)              * LOAD LENGTH OF PARM
         LTR   2,2                 * LENGTH OF ZERO
         BZ    NOPARM              * NO - BYPASS MOVE
         CH    2,=H'08'            * GREATER THAN 8 ?
         BH    BADPARM             * YES - TAKE DEFAULT - AND TELL IT
         BCTR  2,0                 * SUBTRACT LENGTH BY 1
         EX    2,MVCPANEL          * EXECUTE THE MOVE
         B     HAVEPARM
MVCPANEL MVC   PANEL(0),2(1)
BADPARM  TPUT  BADPMSG,L'BADPMSG
NOPARM   EQU   *                   USE DEFAULT PANEL ID
         MVC   PANEL,DEFPANEL
HAVEPARM EQU   *
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*        GO GET VIA VGET USING MY OWN SPECIAL MACRO THE NAMES OF THE *
*        OBJECT DECKS TO BE LINKEDITED                               *
*                                                                    *
*--------------------------------------------------------------------*
         ISPF  LOAD                                        *LBD 12/85*
         VDEFINE '(CSIZONE DELMOD ZPREFIX MEM1 MEM2 MEM3 MEM4 MEM5 MEM6X
                MEM7 MEM8 )',CSIZONE,CHAR,8,'(COPY)'
         VDEFINE '(M1 M2 M3 M4 M5 M6 M7 M8)',M1,CHAR,8     *LBD 12/85*
         VDEFINE '(AUTH)',AUTH,CHAR,1,'(COPY)'             *LBD 12/85*
         VDEFINE '(SYSLIB)',SYSLIB,CHAR,18
         VDEFINE '(LEPARM LMOD)',LEPARM,CHAR,8
         VDEFINE '(ROPT)',SLEPARM,CHAR,20,'(COPY)'         *LBD 12/85*
         VDEFINE '(SLOAD)',SLOAD,CHAR,44,'(COPY)'           *LBD 12/85*
         VDEFINE '(NEW)',NEW,CHAR,16,'(COPY)'               *LBD 12/85*
         L     R10,TAB
         USING MTABLE,R10
         MVC   $MEM,MEM1
         CLI   $MEM,C' '
         BE    MM2
         BAL   R9,SMPDATA
         LA    R10,ENTL(R10)
MM2      MVC   $MEM,MEM2
         CLI   $MEM,C' '
         BE    MM3
         BAL   R9,SMPDATA
         LA    R10,ENTL(R10)
MM3      MVC   $MEM,MEM3
         CLI   $MEM,C' '
         BE    MM4
         BAL   R9,SMPDATA
         LA    R10,ENTL(R10)
MM4      MVC   $MEM,MEM4
         CLI   $MEM,C' '
         BE    MM5
         BAL   R9,SMPDATA
         LA    R10,ENTL(R10)
MM5      MVC   $MEM,MEM5
         CLI   $MEM,C' '
         BE    MM6
         BAL   R9,SMPDATA
         LA    R10,ENTL(R10)
MM6      MVC   $MEM,MEM6
         CLI   $MEM,C' '
         BE    MM7
         BAL   R9,SMPDATA
         LA    R10,ENTL(R10)
MM7      MVC   $MEM,MEM7
         CLI   $MEM,C' '
         BE    MM8
         BAL   R9,SMPDATA
         LA    R10,ENTL(R10)
MM8      MVC   $MEM,MEM8
         CLI   $MEM,C' '
         BE    DOIT1
         BAL   R9,SMPDATA
DOIT1    DS    0H                                          *LBD 12/85*
         LA    R10,ENTL(R10)
         MVC   $MEM,=8X'FF'       SET END OF TABLE         *LBD 12/85*
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*        OK WE NOW HAVE ALL THE MODULE AND LMOD INFORMATION          *
*        NOW DEFINE ALL THE NEEDED ISPF VARIABLES AND                *
*        SELECT 1 LMOD AT A TIME FOR PROCESSING                      *
*                                                                    *
*--------------------------------------------------------------------*
         MVC   FUNCTION(4),=CL4'LMOD'
         SETON DOLMOD
         MVC   LMOD,BLANKS         INITIALIZE LMOD
         EJECT
         L     R10,TAB
         LA    R8,M1
         SETOF HAVELM,JCLIN,NEWMOD
         OPEN  (SYSLIN,OUTPUT)
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*        HERE IS PROCESS THE MODULE TABLE TO FIND ONE LMOD AT A      *
*        TIME TO SEND THRU THE SMPLINKP PANEL AND THEN THRU          *
*        IEWL .                                                      *
*                                                                    *
*--------------------------------------------------------------------*
PROCLMOD DS    0H                  PROCESS FOR LOAD MODULE NOW
         CLI   $MEM,C' '          NULL ENTRY ?
         BE    PROCINCR
         TM    $FLAG,$USED        ALREADY LINK'D THIS ENTRY
         BO    PROCINCR
         CLI   LMOD,C' '          FIRST TIME THRU ?
         BE    FSTLMOD            YES
         CLC   LMOD,$LMOD
         BNE   PROCINCR
FSTLMOD  DS    0H
         MVC   LMOD,$LMOD
         CLI   $NEW,C'N'
         BNE   CKLE
         MVC   NEW,=CL16'NEW MODULE'
CKLE     IFON  NEWMOD,CKSYSL
         MVC   LEPARM,SLEPARM
CKSYSL   CLI   SYSLIB,C' '
         BNE   MVCINCL
         MVC   SYSLIB(18),=CL18'SYSLMOD '
MVCINCL  MVC   INCLMOD,LMOD
         LA    R1,INCLMOD
         LA    R2,8
INCLMP   CLI   0(R1),C' '
         BE    DOINCLM
         LA    R1,1(R1)
         BCT   R2,INCLMP
DOINCLM  MVI   0(R1),C')'
         OI    $FLAG,$USED
         SETON HAVELM
         MVC   0(8,R8),$MEM
         MVC   INCLMEM,$MEM
         LA    R8,8(R8)           -> NEXT MODULE NAME      *LBD 12/85*
         LA    R1,INCLMEM
         LA    R2,8
INCLP    CLI   0(R1),C' '
         BE    DOINCL
         LA    R1,1(R1)
         BCT   R2,INCLP
DOINCL   MVI   0(R1),C')'
         PUT   SYSLIN,INCLUDEN
PROCINCR LA    R10,ENTL(R10)
         CLI   0(R10),X'FF'       END OF TABLE             *LBD 12/85*
         BNE   PROCLMOD           NO                       *LBD 12/85*
         IFON  HAVELM,PROCSMP
         B     EPILOG              LAST OF IT
PROCSMP  BAL   R9,SMPDATA
         PUT   SYSLIN,INCLUDEO
         MVI   NAME,C' '
         MVC   NAME+1(10),NAME     CLEAR NAME FIELD
         IFOFF JCLIN,DONAME
         AR    R5,R6
JCLINLP  CLI   0(R5),X'00'
         BE    DONAME
         PUT   SYSLIN,0(R5)
         BXLE  R5,R6,JCLINLP
DONAME   MVC   NAME,LMOD
         LA    R1,NAME
         LA    R2,8
NLP      CLI   0(R1),C' '          END OF NAME ?
         BE    ENAME
         LA    R1,1(R1)
         BCT   R2,NLP
ENAME    MVC   0(3,R1),=C'(R)'
         CLI   NEW,C' '
         BE    PUTNAME
         CLI   AUTH,C'Y'
         BNE   PUTNAME
         PUT   SYSLIN,SETCODE      SET AC(1)
PUTNAME  PUT   SYSLIN,NAMECD
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*        UPDATE THE ISPF VARIABLES AND DISPLAY PANEL SMPLINKP        *
*        OR THE PANEL SPECIFIED IN THE PARM                          *
*                                                                    *
*--------------------------------------------------------------------*
         DISPLAY PANEL=PANEL
         ST    R15,RC
         LTR   R15,R15
         BNZ   EPILOG
         CLOSE (SYSLIN,REREAD)
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*        GET CURRENT SLOAD IN CASE THE USER CHANGED HIS MIND         *
*        AND CHANGED THE SLOAD THEN DO DYNAMIC ALLOC                 *
*        IF IT DIFFERENT.                                            *
*        BUT FIRST PARSE THE DSN OF SLOAD                            *
*--------------------------------------------------------------------*
         CLI   SLOAD,X'7D'         ' ?
         BNE   GETPRFX
         MVC   ADSN,BLANKS
         LA    R1,ADSN
         LA    R2,SLOAD+1
         LA    R3,43
DSNMVC   CLI   0(R2),X'7D'         END OF DSN
         BE    DOALLOC
         MVC   0(1,R1),0(R2)
         LA    R1,1(R1)
         LA    R2,1(R2)
         BCT   R3,DSNMVC
         B     DOALLOC
GETPRFX  DS    0H
         MVC   ADSN(8),ZPREFIX
         LA    R1,ADSN
         LA    R2,SLOAD
         LA    R3,8
DSNMVC2  CLI   0(R1),C' '
         BE    MVIPEROD
         LA    R1,1(R1)
         BCT   R3,DSNMVC2
MVIPEROD MVI   0(R1),C'.'
         LA    R1,1(R1)
         LA    R3,36
DSNMVC3  CLI   0(R2),C' '          END OF DSN
         BE    DOALLOC             YES
         MVC   0(1,R1),0(R2)
         LA    R1,1(R1)
         LA    R2,1(R2)
         BCT   R3,DSNMVC3
DOALLOC  CLC   ADSN,SDSN
         BE    DOLKED
         MVC   SDSN,ADSN
         FREE  DDN='SYSLMOD'
         ALLOC DDN='SYSLMOD',DSN=ADSNA,DISP=SHR,ERROR=S99FAIL
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*        PERFORM THE LINKEDIT OF THE LOAD MODULE                     *
*        BY INVOKING IEWL                                            *
*                                                                    *
*--------------------------------------------------------------------*
DOLKED   CLI   LEPARM,C' '
         BE    SETLPARM
         MVC   ATT(8),LEPARM
         MVI   ATTC,C','
SETLPARM LA    R1,LPARM
         XC    WAITECB,WAITECB
         ATTACH EP=IEWL,SZERO=NO,PURGE=NONE,RSAPF=YES,ECB=WAITECB
         ST    R1,TCBADDR
         WAIT  ECB=WAITECB
         DETACH TCBADDR
         MVC   ATTC(9),BLANKS
         OPEN  (SYSLIN,OUTPUT)
         L     R10,TAB
         LA    R8,M1
         LA    R3,8                MAX NUMBER OF ENTRIES
         MVC   NEW,BLANKS
         MVC   NAME,BLANKS
         SETOF HAVELM,JCLIN,NEWMOD
         MVC   M1(M8-M1),BLANKS                            *LBD 12/85*
         MVC   LMOD,BLANKS                                 *LBD 12/85*
         MVC   LEPARM,BLANKS                               *LBD 12/85*
         B     PROCLMOD
S99FAIL  S99FAIL
         MVC   RC,=F'04'           SET RETURN CODE
         B     EPILOG
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*        INVOKE THE SMPDATA SUB-ROUTINE VIA LINK AND PARSE THE       *
*        RESPONSE INTO THE CORRECT ISPF VARIABLES                    *
*                                                                    *
*--------------------------------------------------------------------*
SMPDATA  DS    0H                  SMPDATA SUBROUTINE
*
**       RESET SMPDATA RECEIVE TABLE TO ZERO'S
*
         L     R5,DADDR
         LA    R6,80
         LR    R7,R5
         A     R7,DATALEN
         SR    R7,R6               REDUCE BY 1 FOR BXLE
CLRLOOP  XC    0(80,R5),0(R5)      XC SMPDATA TABLE
         BXLE  R5,R6,CLRLOOP
*
**       INVOKE SMPDATA SUBROUTINE FOR SMP CDS ACCESS
*
         CLI   CSIZONE,C' '       ANY ZONE NAME ?          *LBD 12/85*
         BNE   HAVEZONE                                    *LBD 12/85*
         OI    WORDS+8,X'80'      TURN ON END OF PARM LIST *LBD 12/85*
HAVEZONE DS    0H                                          *LBD 12/85*
         IFON  DOLMOD,SMPLMOD
         CLI   $MEM,C' '
         BER   R9
         MVC   MEMBER,$MEM
         B     CALLIT
SMPLMOD  MVC   MEMBER,LMOD
CALLIT   DS    0H
         L     R1,PARMPTR
         XC    WAITECB,WAITECB
         ATTACH EP=SMPDATA,SZERO=NO,PURGE=NONE,RSAPF=YES,ECB=WAITECB
         ST    R1,TCBADDR
         WAIT  ECB=WAITECB
         DETACH TCBADDR
         ICM   R15,7,WAITECB+1
         LTR   R15,R15
         BNZ   NEWMEM
         L     R5,DADDR
         LA    R6,80
         LR    R7,R5
         A     R7,DATALEN
         SR    R7,R6               REDUCE BY 1 FOR BXLE
         IFON  DOLMOD,LMODLOOP
         B     MODLOOP
NEWMEM   DS    0H
         IFON  DOLMOD,NEWLMOD
         MVI   $NEW,C'N'           SET ON NEW FLAG
         CLI   DELMOD,C' '
         BE    MVCMEM
         MVC   $LMOD,DELMOD
         B     NEXTMOD
MVCMEM   MVC   $LMOD,$MEM
NEXTMOD  EQU   *
         BR    R9                  GO FOR NEXT ENTRY
NEWLMOD  SETON NEWMOD
         BR    R9
MODLOOP  DS    0H
         CLC   =C'LMOD',0(R5)
         BE    DOLMODX
         BXLE  R5,R6,MODLOOP
         B     NEWMEM              ASSUME NEW
DOLMODX  MVC   $LMOD,10(R5)
         LA    R1,10(R5)          -> FIRST LMOD NAME       *LBD 12/85*
NLMODX   DS    0H                                          *LBD 12/85*
         CLI   8(R1),C' '         ANOTHER LMOD ?           *LBD 12/85*
         BE    NEXTMOD            NO                       *LBD 12/85*
         MVC   ENTL(ENTL,R10),0(R10)                       *LBD 12/85*
         LA    R10,ENTL(R10)                               *LBD 12/85*
         MVC   $LMOD,8(R1)                                 *LBD 12/85*
         LA    R1,8(R1)           -> NEXT LMOD ENTRY       *LBD 12/85*
         B     NLMODX                                      *LBD 12/85*
LMODLOOP DS    0H
         CLI   0(R5),X'00'         END ??
         BE    ENDLMOD
         IFON  JCLIN,DOJCLIN
         CLC   =C'SYSLIB',0(R5)
         BE    DOSYSLIB
         CLC   =C'LEPARM',0(R5)
         BE    DOLEPARM
         CLC   =C'++LMODIN',0(R5)
         BE    DOLMODIN
LMODBXLE BXLE  R5,R6,LMODLOOP
         B     NEWLMOD             ASSUME NEW
DOSYSLIB MVC   SYSLIB,10(R5)
         B     LMODBXLE
DOLEPARM MVC   LEPARM,10(R5)
         CLC   =C'COPY',LEPARM
         BE    CLRLPARM
         CLC   =C'STD',LEPARM
         BE    CLRLPARM
         B     LMODBXLE
CLRLPARM MVC   LEPARM,BLANKS
         B     LMODBXLE
DOJCLIN  EQU   *
DOLMODIN SETON JCLIN
ENDLMOD  BR    R9
         EJECT
EPILOG   CLOSE (SYSLIN)
         ISPF  DELETE                                      *LBD 12/85*
         L     R15,RC              LOAD RETURN CODE
         $EPILOG
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*        BELOW YOU WILL FIND MY DATA AREAS USED TO CONTAIN THE DATA  *
*        THAT I WILL MANIPULATE AND OR OTHERWISE REFERENCE           *
*                                                                    *
*--------------------------------------------------------------------*
         LTORG
         BITSW NEWMOD,HAVELM,DOLMOD,JCLIN,LSTLMOD
         EJECT
         ISPF  PARMS                                       *LBD 12/85*
         EJECT
RC       DC    F'00'               RETURN CODE
WAITECB  DC    F'00'
TCBADDR  DC    F'00'
         SPACE
LPARM    DC    X'80',AL3(LPTR)
LPTR     DC    AL2(LINKLEN)
LINKATTS DC    C'XREF,LIST,LET,NCAL,SIZE=(768K,100K)'
ATTC     DC    C' '
ATT      DC    CL20' '
LINKLEN  EQU   *-LINKATTS
         SPACE
ADSNA    DC    A(ADSN),Y(44)
ADSN     DC    CL44' '             ALLOC DSN
SDSN     DC    CL44' '             SAVE DSN
         EJECT
VPUT     DC    C'VPUT'
VGET     DC    C'VGET'
VDEL     DC    C'VDELETE'
VREPLACE DC    C'VREPLACE'
VCOPY    DC    C'VCOPY'
MOVE     DC    C'MOVE'             PARM FOR VCOPY
PANEL    DC    CL8' '
DEFPANEL DC    CL8'SMPLINKP'
*
SYSLIB   DC    CL18' '
*
NEW      DC    CL16' '
CSIZONE  DC    CL8' '              SMPE CSI ZONE NAME      *LBD 12/85*
DELMOD   DC    CL8' '              DEFAULT FOR NEW MODULES ONLY
ZPREFIX  DC    CL8' '              DEFAULT PREFIX          *LBD 12/85*
*                                 INPUT NAMES              *LBD 12/85*
MEM1     DC    CL8' '              OBJECT MODULE NAME
MEM2     DC    CL8' '              OBJECT MODULE NAME
MEM3     DC    CL8' '              OBJECT MODULE NAME
MEM4     DC    CL8' '              OBJECT MODULE NAME
MEM5     DC    CL8' '              OBJECT MODULE NAME
MEM6     DC    CL8' '              OBJECT MODULE NAME
MEM7     DC    CL8' '              OBJECT MODULE NAME
MEM8     DC    CL8' '              OBJECT MODULE NAME
*                                 NAMES FOR LINK PANEL     *LBD 12/85*
M1       DC    CL8' '              OBJECT MODULE NAME
M2       DC    CL8' '              OBJECT MODULE NAME
M3       DC    CL8' '              OBJECT MODULE NAME
M4       DC    CL8' '              OBJECT MODULE NAME
M5       DC    CL8' '              OBJECT MODULE NAME
M6       DC    CL8' '              OBJECT MODULE NAME
M7       DC    CL8' '              OBJECT MODULE NAME
M8       DC    CL8' '              OBJECT MODULE NAME
         DC    X'FF'              END OF OBJECT NAMES      *LBD 12/85*
AUTH     DC    C' '                DEFAULTS FOR NEW MODULE'S ONLY
SLEPARM  DC    CL20' '             DEFAULTS FOR NEW MODULE'S ONLY
SLOAD    DC    CL44' '
LEPARM   DC    CL8' '              LEPARM FROM CDS OR ROPT IF NEW
LMOD     DC    CL8' '              LMOD NAME
         SPACE
PARMPTR  DC    A(WORDS)
WORDS    DC    A(FUNCTION,MEMBER,DATALEN)
ZONE     DC    A(CSIZONE)                                  *LBD 12/85*
FUNCTION DC    CL8'MOD'
MEMBER   DC    CL8' '
BLANKS   DC    CL80' '
DATALEN  DC    A(400*80)
DADDR    DC    A(DATA)
         SPACE
BADPMSG  DC    C'***  PARM TOO LARGE - TAKING DEFAULT ***'
         EJECT
INCLUDEN DC    CL80' '
         ORG   INCLUDEN
         DC    C' INCLUDE OBJ('
INCLMEM  DC    CL8' '
         DC    C'            * INCLUDE NEW OBJECT   '
         ORG
         SPACE
INCLUDEO DC    CL80' '
         ORG   INCLUDEO
         DC    C' INCLUDE SYSLIB('
INCLMOD  DC    CL8' '
         DC    C'         * INCLUDE ORIGINAL LMOD'
         ORG
NAMECD   DC    CL80' '
         ORG   NAMECD
         DC    C' NAME    '
NAME     DC    CL8' '
         DC    C'                * MODULE NAME '
         ORG
SETCODE  DC    CL80'  SETCODE AC(1)  ****** AUTHORIZED ***'
         ORG
         EJECT
         PRINT NOGEN
SYSLIN   DCB   DSORG=PS,MACRF=PM,DDNAME=SYSLIN,LRECL=80,RECFM=FB,      *
               BLKSIZE=3120
         EJECT
TAB      DC    A(TABLE)
TABLE    DC    28CL18' '       TABLE DATA
TABLEE   EQU   *
         SPACE
         DYNSPACE
         SPACE
DATA     DC    400XL80'00'
         SPACE
         DSECT
MTABLE   DS    0H
$MEM     DS    CL8
$LMOD    DS    CL8
$NEW     DS    C
$FLAG    DS    X
$USED    EQU   X'80'
ENTL     EQU   *-MTABLE
         EJECT
         IEFZB4D0
         EJECT
         IEFZB4D2
         END
