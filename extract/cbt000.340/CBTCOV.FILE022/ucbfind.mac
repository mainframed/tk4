UCBFIND  CSECT
UCBFIND  AMODE 31
UCBFIND  RMODE ANY
*********************************************************************
*********************************************************************
**-- MAINTENANCE:                                                  **
**07/30/84 - COMMENT OUT LOAD OF DCB TO REDUCE ACTIVITY TO LNKLST  **
**                                                                 **
*********************************************************************
*********************************************************************
**                                                                 **
**        UCBFIND IS A SUBROUTINE FOR USE IN SP3 OR X-A SYSTEM FOR **
**  UCB LOOK UP FUNCTIONS. THE CHARTS BELOW DESCRIBES THE FUNCTIONS**
**-----------------------------------------------------------------**
**-----------------------------------------------------------------**
**-  COMMENT OUT THE #DIE MACRO (USED FOR CSR'S DBC TESTING OF ----**
**-- AUTHORIZED CODE) OR PRIOR TO PRODUCTION INSTALL, ZAP THE CODE:**
**-- 0328 00DEAD                        NO-OPS 070007  ------------**
**-- 032B 02     >>>>>>>TO>>>>>>>>>>>>>   "    00      ------------**
**---032C F140                            "    0700    ------------**
**-----------------------------------------------------------------**
**FUNC×       INPUT DATA                 ×  RETURNED OUTPUT DATA   **
**CODE×                                  ×                         **
**----×----------------------------------×-------------------------**
** 00 ×GENERIC OR ESOTERIC NAME          ×  ALL MATCHING UCBS      **
** 01 ×DEV CLASS+TYPE FOR GENERIC DEVICE ×  ALL MATCHING UCBS      **
** 01 ×DEV CLASS+TYPE FOR ESOTERIC DEVICE×  CURRENTLY NOT SUPPORTED**
** 02 ×1 COMPLETE VOL-SER                ×  CURRENTLY NOT SUPPORTED**
** 03 ×FIRST 3 CHARS OF VOL-SER          ×  CURRENTLY NOT SUPPORTED**
**-----------------------------------------------------------------**
** 00   DEVICE SEARCH VIA GENERIC NAME:******************************
**          THE EDT IS SEARCHED FOR GENERIC NAME.  IF MATCH FOUND, **
**  THE COMPLETE MASK (DEVICE CLASS AND DEVICE TYPE) IS RETRIEVED  **
**  FROM THE EDT.  THE NAME IS GENERIC IF THE DEVICE TYPE NOT 00.  **
**  ALL UCBS OF 'THAT DEVICE CLASS' ARE REQUESTED FROM THE SCAN    **
**  SERVICE ROUTINE.  EACH RETRIEVED UCB IS COMPARED WITH THE HELD **
**  DEVICE TYPE. UCB ADDRESSES OF ALL MATCHES ARE STORED IN THE    **
**  CALLERS STORAGE AREA WITH A COUNT OF THE NUMBER FOUND.         **
**                                                                 **
** 00   DEVICE SEARCH VIA ESOTERIC NAME:*****************************
**          THE EDT IS SEARCHED FOR ESOTERIC NAME. IF MATCH FOUND, **
**  THE COMPLETE MASK (DEVICE CLASS AND DEVICE TYPE) IS RETRIEVED  **
**  FROM THE EDT.  THE NAME IS ESOTERIC IF THE DEVICE TYPE = 00.   **
**  THE SCAN SERVICE ROUTINE CAN NOT BE USED, IEFAB4UV IS UTILIZED **
**  (PROTECT KEY 1)                                                **
**                                                                 **
** 01   DEVICE SEARCH VIA DEVICE CLASS + TYPE FOR GENERIC NAME:******
**  THE DEVICE IS GENERIC IF THE DEVICE TYPE NOT 00.  ALL UCBS OF  **
**  'THAT DEVICE CLASS' ARE REQUESTED FROM THE SCAN SERVICE ROUTINE**
**  EACH RETRIEVED UCB IS COMPARED WITH THE HELD DEVICE TYPE. ALL  **
**  MATCHES ARE STORED IN THE CALLER'S STORAGE AREA WITH A COUNT.  **
**
** 01   DEVICE SEARCH VIA DEVICE CLASS + TYPE FOR ESOTERIC NAME:*****
**  SUPPORTED ONLY UNDER X-A:
**  THE DEVICE IS ESOTERIC IF THE DEVICE TYPE = 00.  IEFAB4UV IS   **
**  INVOKED WITH THE UCBTYP AS INPUT REQUESTING A UNIT NAME AS     **
**  OUTPUT (THIS FUNCTION ONLY WORKS UNDER X-A).  IEFAB4UV IS THEN **
**  REINVOKED WITH THE UNIT NAME AS INPUT. OUTPUT CONSISTS OF THE  **
**  UCBS AND A COUNT OF THEM                                       **
**                                                                 **
**  IF ALL THE UCB ADDRESSES DO NOT FIT INTO THE OUTPUT AREA, THE  **
**  CALLER MUST RE-INVOKE THE SUBROUTINE WITH THE SAME REQUEST,    **
**  ''WITHOUT'' CLEARING OUT THE 100 BYTE WORK AREA (INFO IN THAT  **
**  AREA TELLS THE SUBROUTINE WHERE TO CONTINUE PROCESSING UCBS.   **
**  **THIS CODE IS NOT COMPLETED**                                 **
*********************************************************************
*********************************************************************
**                                                                 **
**    CMD BUFFER (INPUT) POINTED TO BY CPPL:                       **
**                                                                 **
**  ____________________________________________                   **
**  ×   XX    ×XXXXXX×CCCCCCCC×    XXXXXXXX    ×                   **
**  ×________________×________×________________×                   **
**  ×FUNCTION ×(NOT  × NAME/  ×  ADDRESS OF A  ×                   **
**  ×  CODE   × USED)× DEVICE × 2K OUTPUT AREA ×                   **
**  ×         ×      ×  TYPE  ×                ×                   **
**  ×_________×______×________×________________×                   **
**                                                                 **
** F  -XX FUNCTION BITS -                                          **
**  00: GENERIC/ESOTERIC NAME BEING PASSED FOR UCBS                **
**  01: UNITTYP (3010200E) IS BEING PASSED FOR MATCHING UCBS       **
**              (00012000) ESOTERIC DEVICES **WORKS ONLY FOR X-A   **
**  THE FOLLOWING FUNCTIONS ARE NOT SUPPORTED:                     **
**  02: 1 COMPLETE VOL-SER IS BEING PASSED FOR MATCHING UCB        **
**  03: FIRST 3 CHARS OF VOL-SER BEING PASSED FOR MATCHING UCBS    **
**    -XXXXXX NOT UTILIZED CURRENTLY                               **
** CL8-GENERIC/ESOTERIC/VOL-SER NAME                               **
**    OR:                                                          **
**    -XX DEVICE CLASS                                             **
**    -XXXXXX NOT UTILIZED FOR FUNCTION=01                         **
** F  -AN ADDRESS OF A 2K STORAGE AREA WHICH THE CALLER IS         **
**     RESPONSIBLE TO GET/FREEMAIN. IT WILL CONTAIN ALL THE OUTPUT **
**     FROM THE SUBROUTINE. THE BREAKDOWN OF ITS CONTENTS IS:      **
**     -100 BYTE WORK AREA WHICH MUST BE INITIALIZED TO BINARY     **
**         ZEROS 'ONLY' ON THE FIRST CALL TO THIS SUBROUTINE FOR A **
**         SPECIFIC FUNCTION. FOR SUBSEQUENT ACCESSES 'OF SAME'    **
**         FUNCTION, DO 'NOT' TOUCH THE CONTENTS OF THIS WORK AREA **
**     -4 BYTES (1 FULLWORD) FOR RETURNED COUNT OF # OF UCBS BEING **
**          RETURNED. THIS SHOULD BE INITIALIZED TO ZEROS          **
**     -1944 BYTES (486 FULLWORDS) FOR RETURNED UCB ADDRESSES. THIS**
**         SHOULD BE INITIALIZED TO ZEROS                          **
*********************************************************************
*********************************************************************
**  RETURN CODE SETTINGS:                                          **
**  R15 = 00 - ALL UCBS RETURNED                                   **
**  R15 = 04 - NOT ALL UCBS RETURNED, MUST RETURN FOR THE REST     **
**  R15 = 08 - NO UCBS FOUND                                       **
**  R15 = 16 - FUNCTION NOT SUPPORTED                              **
**  R15 = 20 - STORAGE NOT AVAIL TO IEFAB4UV FOR UCB LIST          **
**  R15 = 24 - DEVICE TYPE NOT DEFINED TO SYSTEM                   **
**  R15 = 28 - NOT ALL UCBS RETURNED, RECODE FOR MORE THAT 486 UCBS**
**  R15 = 99 - PROBLEM - ABEND PROGRAM                             **
*********************************************************************
*********************************************************************
R0       EQU   0
R1       EQU   1    WORK REG (PTR TO CPPL, UCB ADDR, ETC.)
R2       EQU   2    DSECT FOR INPUT PARM + 2K OUTPUT WORK AREA
R3       EQU   3    PTR TO UCB SLOT IN PARM AREA
R4       EQU   4    PTR TO CVT
R5       EQU   5    PTR TO JESCT, PTR TO EDT
R6       EQU   6    # OF UNIT NAMES IN EDT
R7       EQU   7    LENGTH OF EDT ENTRY
R8       EQU   8    PTR TO EDT ENTRY (GENERIC NAME)
R9       EQU   9
R10      EQU   10   1ST BASE REG
R11      EQU   11   2ND BASE REG
R12      EQU   12   HOLD RETURN CODE
R13      EQU   13   GETMAIN AREA FOR RE-ENT CODING
R14      EQU   14   BRANCH REG
R15      EQU   15
*
PROLOG   EQU   *
         USING *,R15
         BC    15,PSTART
         DC    CL8'UCBFIND'       MODULE NAME
         DC    CL8'&SYSDATE'      DATE MODULE COMPILED
         DC    CL8'&SYSTIME'      TIME MODULE COMPILED
PSTART   STM   R14,R12,12(R13)
         LR    R10,R15            LOAD REGS
         DROP  R15
         USING UCBFIND,R10,R11    BASE REGS
         LA    R11,4095(R10)      INITIALIZE 2ND BASE REG
         LA    R11,1(R11)         MAKE IT AN EVEN 4096
         LR    R2,R1              SAVE PTR TO PARM
         GETMAIN R,LV=LDYNAMIC    LEN OF DYNAMIC AREA
         LR    R3,R1
         ST    R13,4(R3)          SAVE HSA IN LSA
         ST    R3,8(R13)          SAVE LSA IN HSA
         L     R1,24(R13)         RESTORE REG ONE
         LR    R13,R3             SET UP NEW SAVE AREA
         USING DYNMAREA,R13
         SR    R12,R12            INITIALIZE RC REG
         MVC   WTOMSG(92),WTOPATRN CLEAR WTO MSGAREA + SET CNTL BITS
         L     R4,CVTPTR          GET CVT ADDR
         USING CVTMAP,R4          ADDR TO CVT
         L     R5,CVTJESCT        JES CONTROL TABLE
         L     R1,CVTUCBSC        LOAD ADDR OF UCB SCAN SERV RTN
         ST    R1,SSADDR          SAVE IT FOR LATER
         L     R1,0(R4)           OLD-NEW TCB PTR
         L     R1,4(R1)           OLD TCB PTR
         ST    R1,TCBHOLD         HOLD ADDR OF CURRENT TCB
         MVI   SYSTEMSW,X'00'     INITIALIZE SW FOR SYSTEM TYPE
         TM    CVTDCB,CVTMVSE     IF =1 IT IS X-A
         BC    8,MVS              IT IS MVS
XA       MVI   SYSTEMSW,X'11'     TURN ON THE SW TO SAY IT IS XA
MVS      EQU   *
         DROP  R4
******* GET PARM INFO:
FUNDUCBS LA    R4,0(R2)           GET PAST THE PARM LENGTH
         USING PARMAREA,R4
         L     R2,PARM2K          ADDRESS OF THE 2K WORK (OUTPUT) AREA
         USING OUT2K,R2           ADDRESS TO 2K AREA
         MVC   HOLDNAME,=CL8' '   CLEAR OUT HOLD AREA
         MVC   HOLDMASK,=XL4'00'  CLEAR OUT HOLD AREA
TESTFUNC CLI   PARMFUNC,X'00'     X'00' = ESOTERIC/GENERIC NAME INPUT
         BC    8,INNAME           FIND UCBS VIA ESOTERIC/GENERIC INPUT
         CLI   PARMFUNC,X'01'     X'01' = DEVICE CLASS GIVEN AS INPUT
         BC    8,INDEV            FIND UCBS = GIVEN DEVICE CLASS
         CLI   PARMFUNC,X'02'     X'02' = VOL-SER GIVEN AS INPUT
         BC    8,GIVE1VOL         FIND 1 UCB = GIVEN VOL-SER
         CLI   PARMFUNC,X'03'     X'03' = FIRST 3 CHARS OF VOL-SER
         BC    8,GIVEVOLS         FIND ALL UCB MATCHING FIRST 3 CHARS
         MVC   WTOMSG+4(80),MSG01 FUNCTION NOT SUPPORTED
         BAL   R14,WTOIT          WRITE MSG
         LA    R12,22             R12=16 FUNCTION NOT SUPPORTED
         BC    15,ENDIT           EOJ
*
*********************************************************************
*********PROCESSING ROUTINE WHEN INPUT IS ESOTERIC/GENERIC NAME
*********************************************************************
INNAME   MVC   HOLDNAME,PARMNAME  MOVE IN ESOTERIC/GENERIC NAME
         BAL   R14,EDTRTN         GO TO EDT RTN TO GET DEV CLASS + TYPE
         LTR   R12,R12            RC=0 ?
         BNZ   NONAME0            NO, NAMES NOT FOUND SAY IT + EOJ
         CLI   HOLDDEVT,X'00'     DEV TYPE=00 (ESOTERIC NAME)?
         BC    6,INNAMESR         NO, BRANCH TO BRANCH SERV RTN
         MVC   HOLDMASK,=XL4'00'  CLEAR OUT DEV MASK, NOT LONGER NEEDED
         MVC   HOLDFLAG,FLGNAME   IEFAB4UV FLAGS FOR UNIT NAME
         BAL   R14,IEFAB4UV       IEFAB4UV: ESOTERIC NAME IN-UCBS OUT
         LTR   R12,R12            WERE UCBS FOUND?
         BC    8,INNAMEUC         YES, GO BRANCH TO UCB MOVE RTN NOW
         CH    R12,=H'4'          RETURN CODE=4?
         BC    8,NONAME           NAME NOT FOUND-RETURN WITH RC=8
         CH    R12,=H'16'         RETURN CODE=16?
         BC    8,NOIEFSTO         NO STORG AVAIL FOR IEFAB4UV UCB LIST
         LA    R12,144            R12=99 LOAD THE ABEND RETURN CODE
         BC    15,ABENDIT         ABEND ALL OTHER RETURN CODES
INNAMEUC BAL   R14,IEFUCBS        GO MOVE THE UCBS TO CALLERS STORAGE
         BC    15,ENDIT           EOJ
INNAMESR BAL   R14,SCANSERV       TO SCAN SERV RTN + DO GENERIC SEARCH
         BC    15,ENDIT           EOJ
*********************************************************************
*********END OF ROUTINE FOR ESOTERIC/GENERIC INPUT
*********************************************************************
*
*********************************************************************
*********PROCESSING ROUTINE WHEN INPUT IS  DEV TYPE + CLASS:
*********************************************************************
INDEV    MVC   HOLDMASK,PARMDEV   MOVE IN 4 BYTE UCBTYP
         CLI   HOLDDEVT,X'00'     IS DEVICE TYPE=00 (ESOTERIC NAME)?
         BC    6,INDEVSR          NO, BRANCH TO BRANCH SERV RTN
**THE FOLLOWING FUNCTION ONLY SUPPORTED UNDER X-A. CHECK ENVIRONMENT.
         TM    SYSTEMSW,X'11'     IS THIS X-A
         BC    1,INDEVXA          YES, DO THE X-A PROCESSING
         MVC   WTOMSG+4(80),MSG12 ONLY SUPPORTED UNDER X-A
         BAL   R14,WTOIT          WRITE MSG
         LA    R12,22             R12=16 FUNCTION NOT SUPPORTED
         BC    15,ENDIT           EOJ
INDEVXA  MVC   HOLDFLAG,FLGDEV    IEFAB4UV FLAGS FOR UCBTYP
         BAL   R14,IEFAB4UV       UCBTYP IN - UNIT NAME OUT
         LTR   R12,R12            WAS A UNIT NAME FOUND?
         BC    8,INDEVIEF         YES, LINK AGAIN TO GET UCBS THIS TIME
         CH    R12,=H'4'          NOT FOUND
         BC    8,NONAME           SEND MSG NAME NOT FOUND
         CH    R12,=H'24'         ENVIRONMENT IS INCORRECT
         BC    8,NOEDTPTR         SAY NO EDT PTR IN JESCT
         CH    R12,=H'28'         IEFEB4UV DOES NOT SUPPORT FUNCTION
         BC    8,NOTSUP           SAY NOT SUPPORTED FUNCTION
         LA    R12,153            R12=99
         BC    15,ABENDIT         EOJ
         MVC   WTOMSG+4(80),MSG09 FUNCTION NOT SUPPORTED
         BAL   R14,WTOIT          WRITE MSG
         LA    R12,36             R12=24 DEVICE NOT DEFINED IN SYSTEM
* MOVE UNIT-NAME INTO HOLDNAME FOR NEXT IEFAB4UV LINK:
INDEVIEF MVC   HOLDNAME,IEFOUTNM  MOVE NAME/LOOK-UP-VALUE FOR NEXT BAL
         MVC   HOLDMASK,=XL4'00'  CLEAR DEV CLASS+TYPE/NO LONGER NEEDED
         MVC   HOLDFLAG,FLGNAME   IEFAB4UV FLAGS FOR UNIT NAME
         BAL   R14,IEFAB4UV       IEFAB4UV: UNIT NAME IN - UCBS OUT
         LTR   R12,R12            WERE UCBS FOUND?
         BC    8,INDEVUC          YES, GO BRANCH TO UCB MOVE RTN NOW
         CH    R12,=H'4'          RETURN CODE=4?
         BC    8,NONAME           NAME NOT FOUND-RETURN WITH RC=8
         CH    R12,=H'16'         RETURN CODE=16?
         BC    8,NOIEFSTO         NO STORG AVAIL FOR IEFAB4UV UCB LIST
         BC    15,ABENDIT      ???ABEND ALL OTHER RETURN CODES
INDEVUC  BAL   R14,IEFUCBS        GO MOVE THE UCBS TO CALLERS STORAGE
         BC    15,ENDIT           EOJ
INDEVSR  BAL   R14,SCANSERV       TO SCAN SERV RTN + DO GENERIC SEARCH
         BC    15,ENDIT           EOJ
*********************************************************************
*********END OF ROUTINE FOR DEV TYPE + CLASS INPUT
*********************************************************************
*
*********************************************************************
*****     EDT (ELIGIBLE DEVICE TABLE) SUBROUTINE     ****************
**********INPUT = ESOTERIC/GENERIC NAME, OUTPUT = DEVICE CLASS+TYPE
*********************************************************************
EDTRTN   STM   R14,R9,SUBSAVE     SAVE R0-R9,R14-R15 FOR SUBROUTINE
         LA    R12,0              ZERO OUT RETURN CODE REG
         USING JESCT,R5
         L     R5,JESEDT          PTR TO EDT
         L     R5,EDTLUVSP(,R5)   LOOK-UP SECTION
         L     R6,LUVENTNO(,R5)   # OF UNIT NAMES
         L     R7,LUVENTLN(,R5)   LENGTH OF ENTRY
         LA    R8,LUVENTRY(,R5)   FIRST ENTRY
         DROP  R5
LOOP     CLC   HOLDNAME,LUVUNAME(R8) UNIT FOUND?
         BE    EDTFOUND
         LA    R8,0(R7,R8)        GET NEXT ENTRY
         BCT   R6,LOOP            CONTINUE
         LA    R12,8              SET RC
         BC    15,EDTEND          END THE SUBROUTINE
EDTFOUND MVC   HOLDMASK,LUVVALUE(R8) SAVE UCBTYP TBYT1,2,DEVCLASS,+TYPE
EDTEND   STM   R14,R9,SUBSAVE     RESTORE REGS
         BCR   15,R14             RETURN TO CALLER
***********************************************************************
*****     END OF EDT SUBROUTINE     ***********************************
***********************************************************************
*
*********************************************************************
*****     SCAN SERVICE ROUTINE SUBROUTINE     ***********************
*****INPUT = GENERIC NAME, OUTPUT = UCBS. (IEFAB4UV CAN ALSO BE USED)
*********************************************************************
* NOW THAT YOU HAVE THE DEVICE MASK (DEVICE CLASS AND UNIT TYPE)
* GO TO THE SCAN SERVICE ROUTINE TO SEARCH UCB'S FOR THAT CLASS.
* WHEN RETRIEVED, COMPARE THE UNIT TYPE.  IF A MATCH, ADD THE UCB
* ADDRESS TO THE PARM (UCB SLOTS), THEN CONTINUE SEARCHING
*********************************************************************
SCANSERV STM   R14,R9,SUBSAVE     HOLD THESE REGS SO THEY CAN BE REUSED
         LA    R12,0              CLEAR OUT RETURN REG
         LA    R1,OUTWORK
         ST    R1,SSPRMWA         STORE ADDR IN SSPRMLST
         LA    R1,SSDEVC          ADDR OF DEVICE CLASS
         ST    R1,SSPRMDEV        STORE ADDR IN SSPRMLST
         MVC   SSDEVC,HOLDCLAS    SEARCH FOR CORRECT CLASS OF UCBS ONLY
         LA    R1,SSUCB           ADDR OF RETURNED UCB
         ST    R1,SSPRMUCB        STORE UCB IN SSPRMLST
         OI    SSPRMUCB,X'80'     END OF SSPRMLST
         LA    R3,OUTUCBS         LOAD ADDR OF FIRST UCB SLOT
         SR    R5,R5              INITIALIZE CNTR FOR # OF UCBS FOUND
SCANLOOP LA    R1,SSPRMLST
         L     R15,SSADDR
         BALR  R14,R15            GO TO SCAN SERVICE INTERFACE
         LTR   R15,R15            WAS A UCB RETURNED?
         BNZ   SCANEOL            NO, END THE SCAN LOOP (R12=0)
         L     R1,SSUCB           GET UCB ADDRESS THAT THE SCAN
         USING UCBOB,R1           ADDRESSABILITY TO UCB
         CLC   UCBTBYT3(2),HOLDDEV   IS CLASS + DEVICE TYPE EQUAL?
         BC    7,SCANLOOP         NO, LOOP WITH SCAN SERVICE AGAIN
         MVC   0(4,R3),SSUCB      MOVE IT INTO PARM UCB SLOT
         AH    R5,=H'1'           ADD 1 TO UCB COUNTER
         CH    R5,=H'486'         COMPARE TO THE TOTAL UCBS IT CAN HOLD
         BC    4,INCSLOT          THERE IS ROOM LEFT
         MVC   WTOMSG+4(80),MSG02 NOT ENOUGH PARM STORAGE
         BAL   R14,WTOIT          WRITE MSG
         LA    R12,4              SET RC
         BC    15,SCANEOL         EOJ
INCSLOT  LA    R3,4(0,R3)         MOVE TO NEXT SLOT
         BC    15,SCANLOOP        GO BACK TO SCAN SERVICE AGAIN
SCANEOL  ST    R5,OUTCNT          MOVE THE UCB COUNT TO OUTPUT AREA
         LTR   R5,R5              WERE THERE UCBS FOUND?
         BC    2,SCANEND          YES, GO END IT
         MVC   WTOMSG+4(80),MSG05       NO UCBS FOUND
         BAL   R14,WTOIT          WRITE MSG
         LA    R12,8              RC = NO UCBS FOUND
         BC    15,ENDIT           GO END IT
SCANEND  LM    R14,R9,SUBSAVE     RESTORE REGS
         BCR   15,R14             RETURN TO CALLER
**********************************************************************
*****     END OF SCAN SERVICE ROUTINE SUBROUTINE     *****************
**********************************************************************
*
***********************************************************************
*****     IEFAB4UV SUBROUTINE     *************************************
**1) INPUT=ESOTERIC UNIT NAMES, OUTPUT = UCBS
**2) INPUT=DEVICE TYPE (UCBTYP), OUTPUT = UNIT NAME
**   R2 = PTR TO OUT2K
**   MOVE TO KEY=1 STORAGE FLAGS + PROPER INFO + LINK TO IEFAB4UV
***********************************************************************
*
IEFAB4UV EQU  *
ESOTERIC STM   R14,R9,SUBSAVE     HOLD THESE REGS SO THEY CAN BE REUSED
         LA    R12,0              CLEAR OUT RETURN REG
         L    R6,TCBHOLD          HOLD ADDR OF TCB
         USING TCB,R6
******* MUST BE SUPERVISOR MODE TO GETMAIN KEY1 SP:
         SR   R1,R1
         SVC  254
         L    R14,SPNO236              SUBPOOL 236 (KEY 1)
         MODESET MODE=SUP
         GETMAIN R,LV=LKEY1SP,SP=(R14) FOR KEY SUBPOOL STORAGE
******* MUST BE KEY0 (OR KEY1) TO MOVE INTO SP236 (WRITE PROTECTED):
         MODESET EXTKEY=ZERO
         ST   R1,KEY1ADDR         SAVE KEY1 GETMAIN'D AREA PTR
         LR   R7,R1              PTR TO KEY1 STORAGE
*****************************************************************DBC
** TO USE CSR'S DEBUGGING CONTROLLER (DBC) USE THE FOLLOWING:  **DBC
*****************************************************************DBC
***DO ESTAE AFTER MODESET=SUP TO GET ESTAE IN CORRECT MODE:      DBC
*        LOAD  EP=DBC                                            DBC
*        LR    R14,R0                                            DBC
*        MVC   ESTAREA(DBCMFLN),DBCMFL                           DBC
*        ESTAE (R14),MF=(E,ESTAREA)                              DBC
*****THE FOLLOWING MACRO CAUSES AN ABEND + YOU ARE PUT INTO DBC  DBC
*****CONVERT TO NO-OPS PRIOR TO RELEASING INTO PRODUCTION        DBC
*        #DIE
*****************************************************************DBC
******* SET UP PARAMETER LIST FOR KEY 1 STORAGE FOR IEFAB4UV:
         USING KEY1SP,R7         ADDR TO DSECT
         LA   R1,UNITABLE
         ST   R1,UTBLPTR
         LA   R1,FLAGS
         ST   R1,FLAGPTR
         LA   R1,ATTRAREA
         ST   R1,ATTRPTR
         MVC  UNAME(8),HOLDNAME  MOVE IN UNIT NAME IF GIVEN
         MVC  UCBPTR,HOLDMASK    MOVE IN DEV TYPE + CLASS IF GIVEN
         MVC  FLAGS,HOLDFLAG     MOVE IN FLAGS WHICH ARE BEING HELD
******* KEY0 NO LONGER NEEDED, ALL INFO ALREADY MOVED TO SP236 STORAGE:
         MODESET EXTKEY=TCB,WORKREG=9   R6 STILL ADDRESSED TO TCB DSECT
         LA   R1,4
         SVC  254
         LA   R1,IEFPARM
         LINK EP=IEFAB4UV
*
         LR   R12,R15         SAVE THE RETURN CODE FOR LATER CHECKING
***********************************************************************
* ANSWERS RETURNED IN SUBPOOL 230 STORAGE. KEY 1 STORAGE (SUBPOOL 236)
* CAN BE FREED AFTER RETURNED INFO MOVED OUT. RETURN TO CALLER NOW.
* CALLER WILL PROCESS ANSWERS + GET SUBPOOL 230 STORAGE FREED LATER.
***********************************************************************
GOTANS   L    R7,UTBLPTR          POINTER TO UNIT TABLE
         DROP R7                  NO LONGER NEEDED
         USING UNITABLE,R7        ADDRESS TO UNIT TABLE
         MVC  UCBLIST,UCBPTR      SAVE PTR TO UCB LIST
         MVC  IEFOUTNM,UNAME      HOLD UNITNAME/LOOK-UP-VALUE
*RETURNED ATTRIB INFO NOT HELD BECAUSE NOT YET NEEDED IN UCBFIND CODE
         L    R14,SPNO236
         L    R1,KEY1ADDR
         FREEMAIN R,LV=LKEY1SP,SP=(R14),A=(R1)
IEFEND   LM   R14,R9,SUBSAVE      RESTORE REGS
         BCR  15,R14              RETURN TO CALLER
***********************************************************************
**********END OF IEFAB4UV SUBROUTINE***********************************
***********************************************************************
*
***********************************************************************
*****     IEFUCBS SUBROUTINE     *********************************
***SUBROUTINE TO MOVE UCBS RETURNED FROM IEFAB4UV INTO CALLERS STORAGE
***********************************************************************
IEFUCBS  STM   R14,R9,SUBSAVE     HOLD THESE REGS SO THEY CAN BE REUSED
         LA    R12,0              RESET RETURN CODE REG
         L     R9,UCBLIST         PTR TO UCB LIST
         CLI   0(R9),X'E6'        IS THIS THE UCB LIST? E6 = SP230
         BC    7,NOTUCBLS         NOT UCB LIST SEND MSG
**** 0(R9) IS THE LENGTH OF UCB LIST RETURNED, WE DO NOT NEED IT
         DROP  R7                 FROM KEY1 PARM DSECT
         MVC   OUTCNT,4(R9)       MOVE # OF UCBS TO CALLERS STORAGE
         L     R7,4(R9)           NUMBER OF UCBS IN LIST
         LA    R9,8(R9)           ADDRESS OF 1ST UCB PTR
         LA    R15,OUTUCBS        FIRST UCB PTR SLOT IN CALLERS STORAGE
         L     R8,=F'486'         ROOM FOR 486 UCBS IN CALLERS STORAGE
MOVEUCBS MVC   0(4,R15),0(R9)     MOVE UCB ADDR TO CALLERS STORAGE
         BCT   R7,NEXTUCB         GET READY TO MOVE NEXT ONE
         BC    15,IEFUCEND        NO MORE UCBS, END OF IEFUCBS SUB
NEXTUCB  BCT   R8,MOREROOM        MORE UCBS + MORE CALLERS STORAGE LEFT
*********************************************************************
*RETURN TO CALLER WITH 486 UCBS + NOTIFY HIM THAT MORE UCBS ARE AVAIL
*IF HE RETURNS PROPERLY. IF HE DOES NOT RETURN THEN SUBPOOL 230 WILL
*NOT BE FREED BY THE SUBROUTINE + CALLER WILL ABEND AT EOJ
*********************************************************************
RANOUT   LA    R12,40             R12=28 NOT ALL UCBS BEING RETURNED
         BC    15,IEFUCEND        END OF IEFUCBS SUB
MOREROOM LA    R9,4(R9)           POINT TO NEXT UCB FROM IEFAB4UV
         LA    R15,4(R15)         POINT TO NEXT SLOT IN USERS STORAGE
         B     MOVEUCBS           CONTINUE MOVING UCBS
IEFUCEND LM    R14,R9,SUBSAVE     RESTORE REGS
         BCR   15,R14             RETURN TO CALLER OF IEFUCBS
******************************************************************
*****     END OF IEFUCBS SUBROUTINE     **************************
******************************************************************
*
******************************************************************
*****     WTO PROCESSING ROUTINES BASED ON RETURN CODES     ******
******************************************************************
NONAME0  MVC   WTOMSG+4(80),MSG00   ESOTERIC NAME NOT FOUND - RETRY'
         BAL   R14,WTOIT          RC = NO UCBS FOUND
         LA    R12,8              RC = NO UCBS FOUND
         BC    15,ENDIT           END OF SUBROUTINE
NONAME   MVC   WTOMSG+4(80),MSG06   ESOTERIC NAME NOT FOUND - RETRY'
         BAL   R14,WTOIT          RC = NO UCBS FOUND
         LA    R12,8              RC = NO UCBS FOUND
         BC    15,ENDIT           END OF SUBROUTINE
NOIEFSTO MVC   WTOMSG+4(80),MSG07 NO STORGE AVAIL FOR IEFAB4UV UCB LIST
         BAL   R14,WTOIT          RC = NO IEFAB4UV STORAGE AVAILABLE
         LA    R12,32             RC=20 SEND BACK TO THE CALLER
         BC    15,ENDIT           END OF SUBROUTINE
NOTUCBLS MVC   WTOMSG+4(80),MSG08   RETURNED UCB LIST INVALID
         BAL   R14,WTOIT          RC = 24 RETURNED UCB LIST INVALID
         LA    R12,36             R12=24 IEFAB4UV RC=0-UCB LIST INVALID
         BC    15,ENDIT           END OF SUBROUTINE
NOEDTPTR MVC   WTOMSG+4(80),MSG10  EDT PTR NOT FOUND IN JESCT
         BAL   R14,WTOIT          RC = NO UCBS FOUND
         LA    R12,8              RC = NO UCBS FOUND
         BC    15,ENDIT           END OF SUBROUTINE
NOTSUP   MVC   WTOMSG+4(80),MSG11  EDT PTR NOT FOUND IN JESCT
         BAL   R14,WTOIT          RC = NO UCBS FOUND
         LA    R12,8              RC = NO UCBS FOUND
         BC    15,ENDIT           END OF SUBROUTINE
ABENDIT  MVC   WTOMSG+4(80),MSG13
         BAL   R14,WTOIT
         BC    15,EODAD
WTOIT    WTO   MF=(E,WTOMSG)
         MVC   WTOMSG+4(84),=84CL1' '
         BR    R14                RETURN TO ISSUSER
**********************************************************************
*****     END OF WTO SECTION     *************************************
**********************************************************************
*
**********************************************************************
*****     END OF JOB PROCESSING     **********************************
**********************************************************************
EODAD    L     R6,TCBHOLD
         USING TCB,R6
         SR    R1,R1              PREPARE FOR AUTHORIZATION
         SVC   254                TO PREPARE FOR KEY=1
         MODESET MODE=SUP         TO PREPARE FOR KEY=1
         L     R0,LISTLEN         SUBPOOL 230 + LEN OF STORAGE
         L     R1,UCBLIST         PTR TO GETMAIN'D AREA
         LTR   R1,R1              IS A FREEMAIN REQUIRED
         BC    8,EODADB           NO BRANCH AROUND IT
         MODESET EXTKEY=SCHED
         SVC   10                 FREEMAIN OF SUBPOOL 230
EODADB   MODESET KEY=ZERO
         MODESET EXTKEY=TCB,WORKREG=9
         MODESET MODE=PROB
         LA    R1,4
         SVC   254
         LR    R1,R13             DYNAMIC AREA ADDR
         LA    R0,LDYNAMIC        SIZE OF AREA
         L     R13,4(,R13)        PREV SAVE AREA
         LA    R1,0(,R1)          CLEAR HI ORDER
         SVC   10                 FREEMAIN
         LR    R15,R12            LOAD THE RETURN CODE FROM SUBROUTINE
         L     R14,12(R13)        RESTORE REG 14
         LM    R0,R12,16(R13)     RESTORE R0 -R12
         MVI   12(R13),X'FF'      INDICATE RETURN
         BR    R14                GO BACK TO TMP
         EJECT
GIVE1VOL MVC   WTOMSG+4(80),MSG01 FUNCTION NOT SUPPORTED
         BAL   R14,WTOIT          WRITE MSG
         LA    R12,22             R12=16 FUNCTION NOT SUPPORTED
         BC    15,ENDIT           EOJ
GIVEVOLS MVC   WTOMSG+4(80),MSG01 FUNCTION NOT SUPPORTED
         BAL   R14,WTOIT          WRITE MSG
         LA    R12,22             R12=16 FUNCTION NOT SUPPORTED
         BC    15,ENDIT           EOJ
ENDIT    LR    R1,R13             DYNAMIC AREA ADDR
         LA    R0,LDYNAMIC        SIZE OF AREA
         L     R13,4(,R13)        PREV SAVE AREA
         LA    R1,0(,R1)          CLEAR HI ORDER FOR FREEMAIN
         SVC   10                 FREEMAIN
         LM    R14,R11,12(R13)    RESTORE REGS
         LR    R15,R12            RETURN CODE
         L     R12,68(R13)        RESTORE REG 12
         MVI   12(R13),X'FF'      INDICATE RETURN
         BR    R14                GO BACK TO TMP
         EJECT
****************************************************************
**** LITERALS BELOW DO NOT REQUIRE GETMAIN STORAGE:
****************************************************************
******* THE FOLLOWING ARE FOR DBC ESTAE                         DBC
*DBCMFL   ESTAE ,MF=L                                           DBC
*DBCMFLN  EQU   *-DBCMFL                                        DBC
******* WTO MESSAGES + WTO FORMAT FOR 80 CHAR MSGS:
WTOPATRN WTO   '                                                       X
                                            ',ROUTCDE=(11),MF=L
MSG00 DC CL80'CBT1500 - GENERIC/ESOTERIC NAME NOT FOUND'
MSG01 DC CL80'CBT1500 - SPECIFIED PARM FUNCTION NOT SUPPORTED'
MSG02 DC CL80'CBT1500 - INSUFFICIENT STORAGE IN PARM AREA'
MSG03 DC CL80'CBT1500 - GENERIC NAME NOT FOUND'
MSG04 DC CL80'CBT1500 - ESOTERIC NAMES NOT SUPPORTED BY THIS UTILITY'
MSG05 DC CL80'CBT1500 - NO UCBS FOUND MATCHING THE DEVICE NAME'
MSG06 DC CL80'CBT1500 - NO UCBS FOUND MATCHING THIS ESOTERIC NAME'
MSG07 DC CL80'CBT1500 - NO STORAGE AVAILABLE FOR IEFAB4UV''S UCB LIST'
MSG08 DC CL80'CBT1500 - RETURNED UCB LIST INVALID'
MSG09 DC CL80'CBT1500 - DEVICE TYPE NOT DEFINED TO SYSTEM'
MSG10 DC CL80'CBT1500 - IEFAB4UV: ENVIRONMENT PROB NO EDT PTR IN JESCT'
MSG11 DC CL80'CBT1500 - FUNCTION NOT SUPPORTED BY IEFEB4UV'
MSG12 DC CL80'CBT1500 - FUNC=01+ ESOTERIC UCBTYP SUPPORTED ONLY IN X-A'
MSG13 DC CL80'CBT1500 - ABEND UCBFIND SUBROUTINE - CONTACT TEC SUPPORT'
******* THE FOLOWING ARE FOR EDT SEARCHING:
EDTLUVSP EQU   X'000'
LUVENTNO EQU   X'000'
LUVENTLN EQU   X'004'
LUVENTRY EQU   X'008'
LUVUNAME EQU   X'000'
LUVVALUE EQU   X'008'
******* THE FOLLOWING ARE FOR IEFAB4UV:
ALLBLANK DS    200CL9' '
         DS    0F
SPNO236  DC    X'000000EC'        SUBPOOL 236
SPNO230  DC    X'000000E6'        SUBPOOL 230
FLGNAME  DC    XL2'1000'          BIT 3 UCB SEARCH FOR UNIT NAME
FLGDEV   DC    XL2'2100'          BITS 2+7 CONVERT UCBTYP TO UNITNAME
**********************************************************************
**FOLLOWING WAS TAKEN FROM MODULE: IEFW21SD  CSECT: IEFAB4UV WHICH
**INTERFACES TO EDT (ELIGIBLE DEVICE TABLE). GENERATING MACRO NAME IS
**IEFZB421, BUT COULDN'T BE FOUND, SO HARDCODED OFFSETS ARE BEING USED
**********************************************************************
**LUVSECT  EQU   0                                                  **
**LUVHDR   EQU   LUVSECT                                            **
**LUVENTNO EQU   LUVHDR                                             **
**LUVENTRY EQU   0                                                  **
**UNITNAME EQU   LUVENTRY                                           **
**LUVALUE  EQU   LUVENTRY+8                                         **
**LUVGMTP  EQU   LUVENTRY+12                                        **
**LUVGENNO EQU   LUVENTRY+16                                        **
**LUVGENP  EQU   LUVENTRY+20                                        **
**LUVFLAGS EQU   LUVENTRY+24                                        **
**********************************************************************
******* GETMAIN AREA STARTS HERE:
DYNMAREA DSECT
MYSAVE   DS    18F
SUBSAVE  DS    12F                SAVE AREA FOR SUBROUTINES
ADDRCPPL DS    F                  CPPL ADDR FOR DSECT
ADDRCBUF DS    F                  ADDR OF CMD BUFFER
ADDRUPT  DS    F                  ADDR OF UPT
ADDRPSCB DS    F                  ADDR OF PSCB
ADDRECT  DS    F                  ADDR OF ECT
SYSTEMSW DS    X                  SW FOR XA/MVS SYSTEM TYPE
******* THE FOLLOWING IS FOR DBC:
*ESTAREA  ESTAE ,MF=L
******* THE FOLLOWING IS FOR IEFAB4UV:
CPPLADDR DS    F
         DS    0F
TCBHOLD  DS    F
IEFOUTNM DS    CL8        TMP HOLD FOR UNITNAME/LOOK-UP-VALUE FROM IEF
HOLDFLAG DS    XL2        TMP HOLD LOCATION FOR IEFAB4UV FLAGS
KEY1ADDR DS    F
LISTLEN  DS    F
UCBLIST  DS    F          PTR TO UCB LIST
         DS    0D
******* THE FOLLOWING ARE FOR WTO:
WTOMSG   WTO   '1234567890123456789212345678931234567894123456789512345X
               67896123456789712345678981234',ROUTCDE=(11),MF=L
******* FOR SCAN SERVICE ROUTINE:
SSPRMLST DS    3F                 SSPRMLST MAPPING FOR UCB
         ORG   SSPRMLST
SSPRMWA  DS    F                  ADDR OF 100-BYTE WORK AREA
SSPRMDEV DS    F                  ADDR OF DEV TYPE TO SCAN FOR
SSPRMUCB DS    F                  ADDR OF RETURNED UCB
         SPACE
SSDEVC   DS    CL1                DEVICE CLASS TO SEARCH FOR
SSUCB    DS    F                  RETURNED UCB ADDR
SSADDR   DS    F                  ADDR OF SCANSERVICE ROUTINE
*
******* FOR EDT SEARCHING:
HOLDNAME DS    CL8  CURRENT WORKING NAMES(ESOTERIC,GENERIC,LOOK-UP-VAL)
*HOLDDEVT DS    CL4                INPUT DEV CLASS + TYPE
HOLDMASK DS    0CL4               MASK (DEVICE CLASS + DEV TYPE)
TYP1     DS    CL1                UCBTBYT1
TYP2     DS    CL1                UCBTBYT2
HOLDDEV  DS    0CL2               DEVICE CLASS + TYPE
HOLDCLAS DS    CL1                DEVICE CLASS
HOLDDEVT DS    CL1                DEVICE TYPE
CNTUCB   DS    F                  COUNT OF # OF UCBS FOUND
         DS    0D
LDYNAMIC EQU   *-DYNMAREA
******* THE FOLLOWING MAPS THE PARM SENT AS INPUT TO THE SUBROUTINE:
PARMAREA DSECT
PARMFUNC DS    XL1
         DS    XL3
PARMNAME DS    0CL8
PARMDEV  DS    0XL4
PARMTYP1 DS    X
PARMTYP2 DS    X
PARMDEVC DS    X
PARMDEVT DS    X
         DS    CL4
PARM2K   DS    F           PTR TO 2K STORAGE AREA
******* MAP THE 2K AREA (USED FOR SUBROUTINE OUTPUT):
OUT2K    DSECT
OUTWORK  DS    XL100
OUTCNT   DS    F
OUTUCBS  DS    486F
***********************************************************************
******* DSECT FOR KEY1 SUBPOOL GETMAIN'D STORAGE
***********************************************************************
KEY1SP   DSECT                     GETMAIN DSECT FOR KEY1 SUBPOOL
* IEFAB4UV PARAMETER LIST:
IEFPARM  DS    0FL2                IEFAB4UV PARAMETER LIST MAPING
UTBLPTR  DS    F                   ADDRESS OF UNIT TABLE
FLAGPTR  DS    F                   ADDR OF DEVTYPE BYTE TO BE SEARCHED
*
* UNITABLE IS NOT DEFINED AS ANOTHER 'DSECT' SO LKEY1SP WILL SHOW TOTAL
* LENGTH OF REQUIRED KEY 1 STORAGE.  A   'USING UNITABLE,R7'  IS USED
* WITHIN THE CODE WITH OFFSETS CALCULATED AT 8X DISPLACED TO COMPENSATE
* FOR ABOVE IEFPARM STORAGE.
*
* IEFAB4UV UNIT TABLE:
UNITABLE DS    0CL20
UNAME    DS    8C
UCBPTR   DS    F
ATTRPTR  DS    F
         DS    F
*
* IEFAB4UV FLAGS:
FLAGS    DS    XL2
* IEFAB4UV ATTRIBUTE AREA:
ATTRAREA DS    CL10
LKEY1SP  EQU   *-KEY1SP
**********************************************************************
         EJECT
         IEFUCBOB                  UCB MAPPING MACRO
         EJECT
         IEFJESCT
         EJECT
         IKJTCB
         EJECT
         CVT   DSECT=YES
         EJECT
         IKJECT
         EJECT
         IKJUPT
         EJECT
         IKJCPPL
         EJECT
         IKJPPL
         EJECT
         IKJIOPL
         END   UCBFIND
