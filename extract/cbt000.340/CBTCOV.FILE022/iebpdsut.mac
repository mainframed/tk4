         MACRO
&ENTRY   BEGSB &EXIT,&COUNT,&REG=
         LCLC  &RG
&RG      SETC  '14'
         AIF   ('&EXIT' NE '').A
         MNOTE 5,'EXIT REFERENCE MISSING - NO GEN'
         MEXIT
.A       AIF   ('&ENTRY' NE '').B
         MNOTE 'NAME MISSING - CHK GENERATION'
.B       ANOP
         AIF   ('&REG' EQ '').XRG
&RG      SETC  '&REG'
.XRG     ANOP
&ENTRY   ST    &RG.,&EXIT+6  .         ENTRY - BEGIN SUBROUTINE.
         AIF   ('&COUNT' EQ '').C
         L     &RG.,&COUNT  .          INCRIMENT COUNT.
         LA    &RG.,1(0,&RG.)  .       THRU ENTRY.
         ST    &RG.,&COUNT  .          COUNTER.
         L     &RG.,&EXIT+6  .         RESTORE REGISTER.
         B     &COUNT+4  .             BRANCH AROUND COUNT SAVE AREA.
&COUNT   DC    F'0'  .                 COUNT TIMES THRU HERE.
         SPACE
.C       ANOP
         MEND
         MACRO
&LABEL   BITSW   &BIT0,&BIT1,&BIT2,&BIT3,&BIT4,&BIT5,&BIT6,&BIT7,&DSECT
         LCLC  &#
&#       SETC  '#'
         AIF   ('&BIT0' EQ '').A
&BIT0    EQU   *  .          BIT 0.
&BIT0&#  EQU   128  .        1... ....      BIT POSITION
.A       AIF   ('&BIT1' EQ '').B
&BIT1    EQU   *  .          BIT 1.
&BIT1&#  EQU   64  .         .1.. ....      BIT POSITION
.B       AIF   ('&BIT2' EQ '').C
&BIT2    EQU   *  .          BIT 2.
&BIT2&#  EQU   32  .         ..1. ....      BIT POSITION
.C       AIF   ('&BIT3' EQ '').D
&BIT3    EQU   *  .          BIT 3.
&BIT3&#  EQU   16  .         ...1 ....      BIT POSITION
.D       AIF   ('&BIT4' EQ '').E
&BIT4    EQU   *  .          BIT 4.
&BIT4&#  EQU   8  .          .... 1...      BIT POSITION
.E       AIF   ('&BIT5' EQ '').F
&BIT5    EQU   *  .          BIT 5.
&BIT5&#  EQU   4  .          .... .1..      BIT POSITION
.F       AIF   ('&BIT6' EQ '').G
&BIT6    EQU   *  .          BIT 6.
&BIT6&#  EQU   2  .          .... ..1.      BIT POSITION
.G       AIF   ('&BIT7' EQ '').H
&BIT7    EQU   *  .          BIT 7.
&BIT7&#  EQU   1  .          .... ...1      BIT POSITION
.H       ANOP
         AIF   ('&DSECT' EQ '').I
&LABEL   DS    XL1  .        BIT BYTE.
         SPACE
         MEXIT
.I       ANOP
&LABEL   DC    XL1'0' .      BIT BYTE.
         SPACE
         MEND
         MACRO
&NAME    DOSUB &ENTRY,&REG=
         LCLC  &RG
&RG      SETC  '14'
         AIF   ('&REG' EQ '').XRG
&RG      SETC  '&REG'
.XRG     ANOP
         AIF   ('&ENTRY' NE '').A
         MNOTE 5,'OPERAND 1 MISSING - NO GEN'
         MEXIT
.A       ANOP
&NAME    BAL   &RG.,&ENTRY  .          GO TO SUBROUTINE.
         SPACE
         MEND
         MACRO
&EX      ENDSB &REG=
         LCLC  &RG
&RG      SETC  '14'
         AIF   ('&REG' EQ '').XRG
&RG      SETC  '&REG'
.XRG     ANOP
         AIF   ('&EX' NE '').A
         MNOTE 'NAME MISSING - CHK GENERATION'
.A       CNOP  2,4
&EX      L     &RG.,*+6  .             RELOAD LINKAGE.
         BR    &RG  .                  EXIT - END OF SUBROUTINE.
         DC    F'0'  .                 RETURN ADDRESS.
         SPACE
         MEND
         MACRO
&N       FILL  &FIELD,&CHAR,&LENGTH
.*  USED TO CLEAR UP TO 256 BYTE FIELDS
         LCLA  &A1,&LNGTH
         LCLC  &C1
         AIF   ('&FIELD' NE '').A
         MNOTE 8,'PARAMETER 1 MISSING - NO GEN'
         MEXIT
.A       ANOP
         AIF   ('&CHAR'(2,1) EQ '''').B
         MNOTE 8,'PARAMETER 2 INCORRECTLY SPECIFIED - NO GEN'
         MEXIT
.B       AIF   ('&LENGTH' NE '').C
&LNGTH   SETA  L'&FIELD
         AGO   .D
.C       ANOP
&C1      SETC  '&LENGTH'
&LNGTH   SETA  &C1
.D       AIF   ('&LNGTH' GT '256').CALL
&N       MVI   &FIELD,&CHAR
         MVC   &FIELD+1(&LNGTH-1),&FIELD
         SPACE
         MEXIT
.CALL    ANOP
&N       L     15,=V(DPQFILL)
         LA    14,*+14
         BALR  1,15
         DC    AL1(0)
         DC    AL2(&LNGTH)
         DC    &CHAR
         DC    AL4(&FIELD)
         MEND
         MACRO
&LABEL   FTBR  &BRANCH
         AIF   ('&BRANCH' NE '').A
         MNOTE 5,'OPERAND MISSING - NO GEN'
         MEXIT
.A       ANOP
&LABEL   NOP   *+12  .                 FIRST TIME NOP.
         OI    *-3,X'F0'  .            SET TO BRANCH.
         B     &BRANCH  .              FIRST TIME BRANCH TO HERE.
         SPACE
         MEND
         MACRO
&LABEL   FTNOP &BRANCH
         AIF   ('&BRANCH' NE '').A
         MNOTE 5,'OPERAND MISSING - NO GEN'
         MEXIT
.A       ANOP
&LABEL   NOP   &BRANCH  .              FIRST TIME NOP.
.B       OI    *-3,X'F0'  .            SET TO BRANCH.
         SPACE
         MEND
         MACRO
&LABEL   IFOFF &BIT,&BROF,&BRON
         LCLB  &BL121,&BL122
         LCLC  &#
&#       SETC  '#'
         AIF   ('&BIT' NE '').A
         MNOTE 1,'OPERAND 1 MISSING - NO GENERATION'
         MEXIT
.A       ANOP
&BL121   SETB  ('&BRON' NE '')
&BL122   SETB  ('&BROF' NE '')
         AIF   (&BL121 OR &BL122).AA
         MNOTE 1,'NO TRANSFER ADDRESS'
         MEXIT
.AA      ANOP
&LABEL   TM    &BIT,&BIT&#  .          TEST FOR BIT.
         AIF   (NOT &BL122).OTHER
         BZ    &BROF  .                BRANCH NOT ON.
         AIF   (&BL121).OTHER
         SPACE
         MEXIT
.OTHER   BO    &BRON  .                BRANCH ON.
         SPACE
         MEND
         MACRO
&LABEL   IFON  &BIT,&BRYES,&BRNO
         LCLB  &BL121,&BL122
         LCLC  &#
&#       SETC  '#'
         AIF   ('&BIT' NE '').A
         MNOTE 1,'OPERAND 1 MISSING - NO GENERATION'
         MEXIT
.A       ANOP
&BL121   SETB  ('&BRYES' NE '')
&BL122   SETB  ('&BRNO' NE '')
         AIF   (&BL121 OR &BL122).AA
         MNOTE 1,'NO TRANSFER ADDRESS'
         MEXIT
.AA      ANOP
&LABEL   TM    &BIT,&BIT&#  .          TEST FOR BIT.
         AIF   (NOT &BL121).TAKNO
         BO    &BRYES  .               BRANCH ON.
         AIF   (&BL122).TAKNO
         SPACE
         MEXIT
.TAKNO   ANOP
         BZ    &BRNO  .                BRANCH NOT ON.
         SPACE
         MEND
         MACRO
&LABEL   NFILL &FIELD,&CHAR,&LENGTH
.*  USED TO CLEAR ANY SIZE FIELDS
         LCLA  &A1,&A2,&A3,&LNGTH
         LCLC  &C1,&C2,&C3,&DISP
         AIF   ('&FIELD' NE '').OK1
         MNOTE 8,'FIELD NAME MISSING - NO GEN.'
         MEXIT
.OK1     ANOP
         AIF   ('&CHAR'(2,1) EQ '''').OK2
         MNOTE 8,'FILL CHARACTER INCORRECTLY SPECIFIED - NO GEN.'
         MEXIT
.OK2     ANOP
         AIF   ('&LENGTH' NE '').OK3
         MNOTE 8,'FIELD LENGTH NOT SPECIFIED - NO GEN.'
         MEXIT
.OK3     ANOP
&C1      SETC  '&LENGTH'
&LNGTH   SETA  &C1
         AIF   ('&LNGTH' GT '256').MORTHN
&LABEL   MVI   &FIELD,&CHAR                  CLEAR FIRST.
         MVC   &FIELD+1(&LNGTH-1),&FIELD     THEN THE REST.
         AGO   .END
.MORTHN  ANOP
&C1      SETC  '&LENGTH'
&C2      SETC  '1'
&C3      SETC  '255'
&DISP    SETC  '256'
&LNGTH   SETA  &C3
&A1      SETA  &C2
&LABEL   MVI   &FIELD,&CHAR                  CLEAR FIRST.
         MVC   &FIELD+&A1.(&LNGTH),&FIELD   CLEAR MORE.
&A1      SETA  &DISP
&LNGTH   SETA  &DISP
&A2      SETA  &C1-256
.OK4     ANOP
         AIF   ('&A2' LT '256').LAST
         MVC   &FIELD+&A1.(&LNGTH),&FIELD   UNTIL COMPLETE.
&A2      SETA  &A2-256
&A1      SETA  &A1+256
         AGO   .OK4
.LAST    ANOP
.*  THIS TEST IS MADE IN CASE OF A LENGTH OF 4096 ON ONE BASE SINCE
.*  THE LAST MVC WILL BE FOR ZERO LENGTH AND WILL CAUSE AN ERROR.
&LNGTH   SETA  &A2
         AIF   ('&LNGTH' EQ '0').END
         MVC   &FIELD+&A1.(&LNGTH),&FIELD   AND MORE.
.END     ANOP
*                                      NOW IT'S DONE.
         SPACE
         MEND
         MACRO
&NAME    RETNX &AREA,&RC=,&REG01=
         AIF   ('&AREA' NE '').GD1
         MNOTE 12'SAVE AREA NAME MISSING - NO GEN'
         MEXIT
.GD1     ANOP
&NAME    L     13,&AREA+4          RESTORE LINKAGE REGISTER
         AIF   ('&REG01' NE '').PU01
         LM    2,12,28(13)              RESTORE REGISTERS
         AGO   .NXTA
.PU01    LM    0,12,20(13)              RESTORE REGISTERS
.NXTA    ANOP
         AIF   ('&RC' NE '').RTNCD
         LM    14,15,12(13)
         AGO   .CT1
.RTNCD   L     14,12(13)           RESTORE 14
         AIF   ('&RC' EQ '(15)').CT1
         LA    15,&RC              LOAD RETURN CODE
.CT1     MVI   12(13),X'FF'        SET RETURN INDICATION
         BR    14                  RETURN
         SPACE
         MEND
         MACRO
&NAME    SAVEX &AREA,&BASE,&VERSION,&INIT,&TESTRAN
         LCLA  &A1
         LCLC  &TEST
&TEST    SETC  '&AREA'(1,5)
         AIF   ('&AREA' NE '').GD1
         MNOTE 12,'SAVE AREA NAME MISSING - NO GEN'
         MEXIT
.GD1     ANOP
&A1      SETA  &BASE
         USING *,15
&NAME    B     22(0,15)            BRANCH AROUND ID
         DC    FL1'18'
         AIF   ('&NAME' NE '').GD2
         DC    CL9'&SYSECT'        IDENTIFIER
         AGO   .CT1
.GD2     DC    CL9'&NAME'          IDENTIFIER
.CT1     DC    CL8'&VERSION'       VERSION
         STM   14,12,12(13)        SAVE REGISTERS
         ST    13,&AREA+4               CHAIN FORWARD
         CNOP  0,4
         AIF   (&A1 GT 2).MV2
         AIF   (&A1 EQ 2).GD3
         AGO   .CT5
.MV2     MNOTE 'INVALID BASE REQUEST - USING 2'
         AGO   .GD3
.CT5     ANOP
         BAL   13,&AREA+72    SETUP SAVE AREA POINTER AND BASE
         DROP  15
         USING *,13                     ESTABLISH ADDRESSABILITY
&AREA    DC    18F'0'              SAVE AREA
         L     15,&AREA+4
         ST    13,8(0,15)               CHAIN BACK
         AGO   .CT7
.GD3     ANOP
         BAL   13,&AREA+76    SETUP SAVE AREA POINTER AND BASE
         DROP  15
         USING *,13,12                  ESTABLISH ADDRESSABILITY
&AREA    DC    18F'0'              SAVE AREA
         DC    AL4(&AREA+4096)
         L     15,&AREA+4
         ST    13,8(0,15)               CHAIN BACK
         L     12,&AREA+72              ESTABLISH 2ND BASE
.CT7     ANOP
         AIF   ('&INIT' EQ '').CT9
.CT9     ANOP
         AIF   ('&TESTRAN' EQ '').CT6
         AIF   ('&TESTRAN' EQ 'TEST').CT8
         MNOTE 'INVALID TESTRAN EDIT REQUEST'
         AGO   .CT6
.CT8     ANOP
*                            TESTRAN SPIE MACRO
         SPIE  &TEST.EXT,((1,15))
         B     &TEST.ABE     BRANCH AROUND TESTRAN DUMP
         SPACE 2
&TEST.EXT BALR 15,0          ESTABLISH ADDRESSABILITY FOR TESTRAN ABEND
         DROP  13
         USING *,15
         MVC   &TEST.PSW,4(1) MOVE OLD PSW FROM PIE
*                            TESTRAN ABEND MACRO
&TEST.ERR ABEND 4444,DUMP
&TEST.PSW DC   XL8'0'        OLD PROGRAM PSW ON PROGRAM INTERRUPT
         DROP  15
         USING &AREA,13      REESTABLISH CSECT ADDRESSABILITY
&TEST.ABE EQU  *
.CT6     ANOP
         SPACE
         MEND
         MACRO
&LABEL   SETOF &A,&B,&C,&D,&E,&F,&G,&H,&I,&J,&K,&L,&M,&N,&O,&P
         LCLA  &NU
         LCLC  &VALUE
         LCLC  &#
&#       SETC  '#'
         AIF   ('&A' NE '').OK
         MNOTE 5,'MISSING OPERANDS - NO GEN'
         MEXIT
.OK      AIF   ('&LABEL' EQ '').B1
&LABEL   EQU   *
.B1      ANOP
&NU      SETA  N'&SYSLIST
.CHK     AIF   ('&NU' NE '0').LOOP
         SPACE
         MEXIT
.LOOP    ANOP
&VALUE   SETC  '&SYSLIST(&NU)'
         NI    &SYSLIST(&NU),255-&VALUE&#
&NU      SETA  &NU-1
         AGO   .CHK
         MEND
         MACRO
&LABEL   SETON &A,&B,&C,&D,&E,&F,&G,&H,&I,&J,&K,&L,&M,&N,&O,&P
         LCLA  &NU
         LCLC  &VALUE
         LCLC  &#
&#       SETC  '#'
         AIF   ('&A' NE '').OK
         MNOTE 5,'MISSING OPERANDS - NO GEN'
         MEXIT
.OK      AIF   ('&LABEL' EQ '').B1
&LABEL   EQU   *
.B1      ANOP
&NU      SETA  N'&SYSLIST
.CHK     AIF   ('&NU' NE '0').LOOP
         SPACE
         MEXIT
.LOOP    ANOP
&VALUE   SETC  '&SYSLIST(&NU)'
         OI    &SYSLIST(&NU),&VALUE&#
&NU      SETA  &NU-1
         AGO   .CHK
         MEND
         TITLE 'IEBPDSUT - PARTITIONED (SYMBOLIC) DATASET UTILITY'
IEBPDSUT CSECT
         SPACE 2
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*
*        DESIGNED TO PROCESS A 'SYMBOLIC' PDS.
*
*        RESTRICTED TO LRECL = 80 , ANY BLOCKING FACTOR UP TO A MAX OF
*        32720.
*
*        OPTIONS :
*
*              THE FACILITIES OF THIS PROGRAM ARE INVOKED THROUGH THE
*              PARM FIELD OF THE EXEC STATEMENT.
*
*              THE DEFAULT PARMS ARE : LIST,INDEX,SPACE.
*
*              NOTE THAT IF THE DEFAULT IS NOT TAKEN (ANY PARM
*              SPECIFIED), THEN ALL DEFAULTS ARE DELETED AND THE
*              USER MUST SPECIFY THE OPTIONS HE REQUIRES.
*
*        PARM =
*
*              LIST - PROVIDES A LISTING ON SYSPRINT OF THE PDS IN
*                  MEMBER NAME SEQUENCE.
*
*              SPACE - PROVIDES 3 SPACES BETWEEN MEMBERS.
*
*              EJECT - EJECTS TO NEW PAGE AFTER EACH MEMBER.
*
*              INDEX - PROVIDES MEMBER/PAGE # CROSS REFERENCE.
*
*              NONUM - SUPPRESSES PRINTING OF LINE NUMBERS FOR
*                      THE LIST OPTION.
*
*
*
*              PUNCH - PRODUCES SEQUENTIAL OUTPUT ON SYSPUNCH DD CARD
*                  OF INPUT DATASET PRECEDED BY IEBUPDTE ADD CARD.
*
*              NOADD - SAME OUTPUT AS PUNCH, EXCEPT NO ADD OR
*                  NUMBER CARDS.
*
*              REPL - PROVIDES A REPL CARD FOR IEBUPDTE INSTEAD OF AN
*                  ADD CARD.
*
*
*
*              QUAL - ALLOWS SELECTION OF MEMBERS TO BE PROCESSED.
*                  USES SYSIN DD CARD WITH MEMBER NAME OR GROUP NAME
*                  BEGINNING IN CARD COLUMN 16. MULTIPLE SELECTIONS
*                  MUST BE IN ALPHA SEQUENCE.
*
*              IF THE NUMBER OF LINES PER PAGE MUST BE CHANGED, THE
*              FOLLOWING LOCAL CONSTANT SHOULD BE CHANGED.
         LCLC  &LINECNT
&LINECNT SETC  '55'
*
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
         SPACE 5
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        NOTE :
*
*              MORE THAN ONE OPTION MAY BE SPECIFIED IN THE PARM FIELD
*              PROVIDED THEY ARE SEPARATED BY COMMAS AND NOT MUTUALLY
*              EXCLUSIVE.
*
*          INVALID COMBINATIONS:
*
*                            EJECT,SPACE
*                            PUNCH,NONUM
*                            NOADD,REPL
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 5
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        REGISTER USAGE
*
*        REG 5 USED FOR ADDRESS OF BLOCK AREA FOR INPUT PDS DATA
*        REG 6 USED TO POINT TO AN OUTPUT RECORD
*        REG 7 USED TO DEBLOCK A BLOCKED PDS - HANDS OFF
*        REG 8 USED FOR INDEX PAGE.
*        REG 13 & 9 ARE THE BASE REGISTERS.
*        REGS 3,4,10,11,12   ARE AVAILABLE FOR PERMANENT ASSIGNMENT
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
         SPACE 3
***********************************************************************
*
*        ENTRY LINKAGE AND INITIALIZATION ROUTINES
*
***********************************************************************
         SAVEX A,1,V001SAVE     ENTRY REGISTERS
         L     9,=A(A+4096)     SECOND BASE REGISTER.
         USING A+4096,9         INFORM ASSEMBLER
         L     1,0(1)           GET PARM POINTER
         CLC   0(2,1),=H'0'     TEST IF PARM FIELD PRESENT
         BNE   SETSCAN          YES, PROCESS PARM DATA
         SETON LIST             DEFAULT TO 'LIST'
         SETON SPACE            WITH SPACING
         SETON INDEX            WITH INDEX
         SETON NEEDCOR          CORE FOR INDEX
         B     BEGIN            SKIP PARM SCAN ROUTINES
         SPACE 5
***********************************************************************
*
*        PARM HAS BEEN PROVIDED, SCAN FOR VALID COMBINATIONS
*
***********************************************************************
SETSCAN  LH    2,0(1)           SAVE PARM FIELD LENGTH
         LA    3,2(1)           POINT TO FIRST PARM FIELD
SCAN     CLC   0(5,3),=C'PUNCH'  CHECK FOR PUNCH OPTION
         BE    TSTPUNCH         YES, CHECK VALIDITY
         CLC   0(5,3),=C'SPACE'  SPACE OPTION?
         BE    TSTSPACE         YES, CHECK VALIDITY
         CLC   0(5,3),=C'EJECT'  EJECT OPTION?
         BE    TSTEJECT         YES, CHECK VALIDITY
         CLC   0(5,3),=C'NONUM'  NONUM OPTION?
         BE    TSTNONUM         YES, CHECK VALIDITY
         CLC   0(4,3),=C'LIST'  LIST OPTION?
         BE    TSTLIST          YES, CHECK VALIDITY
         CLC   0(4,3),=C'REPL'  REPL OPTION?
         BE    TSTREPL          YES, CHECK VALIDITY
         CLC   0(5,3),=C'INDEX'  INDEX OPTION?
         BE    TSTINDEX         YES, CHECK VALIDITY
         CLC   0(4,3),=C'QUAL'  QUAL OPTION?
         BE    TSTQUAL          YES, CHECK VALIDITY
         CLC   0(5,3),=C'NOADD'  NOADD OPTION?
         BE    TSTNOADD         YES, CHECK VALIDITY
PARMERR1 WTO   'IEBPDSUT - INVALID REQUEST',ROUTCDE=(11)
RETNX100 RETNX A,RC=100         INVALID OPTIONS, RETURN
         EJECT
***********************************************************************
*
*        CHECK EACH PARM OPTION FOR VALIDITY AND SETUP FOR PROCESSING
*
***********************************************************************
TSTPUNCH IFON  PUNCH,PARMERR2   ALREADY SPECIFIED?
         IFON  NONUM,PARMERR3   NONUM INVALID WITH PUNCH
         SETON PUNCH            INDICATE PUNCH OPERATION
SUBFIVE  SH    2,=H'5'          DECREMENT PARM DATA LEFT TO SCAN
         LA    3,5(3)           BUMP SCAN POINTER
         B     CHKCOMMA         CHECK FOR NEXT PARM OPTION
         SPACE 2
TSTSPACE IFON  SPACE,PARMERR2   ALREADY SPECIFIED?
         IFON  EJECT,PARMERR3   AMBIGUOUS?
         SETON SPACE            INDICATE SPACE OPTION
         B     SUBFIVE          GET NEXT PARM IF ANY
         SPACE 2
TSTEJECT IFON  EJECT,PARMERR2   ALREADY SPECIFIED?
         IFON  SPACE,PARMERR3   AMBIGUOUS?
         SETON EJECT            INDICATE EJECTS TO BE DONE
         B     SUBFIVE          GET NEXT PARM IF ANY
TSTNONUM IFON  NONUM,PARMERR2   ALREADY SPECIFIED?
         IFON  PUNCH,PARMERR3   PUNCH INVALID WITH NONUM
         SETON NONUM            INDICATE UNNUM OPTION
         B     SUBFIVE          GET NEXT PARM IF ANY
TSTNOADD IFON  NOADD,PARMERR2   ALREADY SPECIFIED?
         SETON NOADD            INDICATE NO ADD CARDS
         B     SUBFIVE          GET NEXT PARM IF ANY
         SPACE 2
TSTINDEX IFON  INDEX,PARMERR2   ALREADY SPECIFIED?
         SETON INDEX            INDICATE INDEX REQUESTED
         SETON NEEDCOR          AND GET CORE FOR INDEX
         B     SUBFIVE          GET NEXT PARM IF ANY
TSTQUAL  IFON  QUAL,PARMERR2    ALREADY SPECIFIED?
         SETON QUAL             INDICATE QUALIFIER SELECT
         OPEN  SYSIN            OPEND SYSIN DCB
         B     SUBFOUR          GET NEXT PARM IF ANY
TSTREPL  IFON  REPL,PARMERR2    ALREADY SPECIFIED?
         SETON REPL             INDICATE REPLACE OPTION
         MVC   ADDCARD+5(4),=C'REPL'  MOVE IN REPL
         B     SUBFOUR          GET NEXT PARM IF ANY
TSTLIST  IFON  LIST,PARMERR2    ALREADY SPECIFIED?
         SETON LIST             INDICATE LIST REQUESTED
SUBFOUR  SH    2,=H'4'          DECREMENT REMAINING PARM SIZE
         LA    3,4(3)           BUMP TO NEXT PARM
         SPACE 2
CHKCOMMA LTR   2,2              TEST FOR MORE OPTIONS
         BZ    BEGIN            LAST PARM, LET'S GO
         CLI   0(3),C','        CHECK FOR CORRECT DELIMITER
         BNE   PARMERR1         NO, INVALID PARM
         LA    3,1(3)           BUMP PAST COMMA
         BCT   2,SCAN           DECREMENT COUNT
         B     PARMERR1         OOPS, LAST WAS A COMMA, INVALID
         SPACE 2
PARMERR2 WTO   'IEBPDSUT - DUPLICATE OPTION REQUESTED',ROUTCDE=(11)
         B     RETNX100         RETURN WITH ERROR CODE 100
         SPACE 2
PARMERR3 WTO   'IEBPDSUT - AMBIGUOUS OPTIONS REQUESTED',ROUTCDE=(11)
         B     RETNX100         RETURN WITH ERROR CODE 100
         EJECT
***********************************************************************
*
*        TEST FOR VALID REQUEST AND INITIALIZE DATA AREAS
*
***********************************************************************
BEGIN    IFON  LIST,OPEN        WAS LIST REQUESTED?
         IFON  PUNCH,OPEN       WAS PUNCH REQUESTED?
         B     PARMERR1         INVALID REQUEST, INFORM
OPEN     IFOFF PUNCH,SKPPUNCH   DON'T OPEN IF NOT REQ'D
         OPEN  (SYSPUNCH,(OUTPUT))  OPEN SYSPUNCH
SKPPUNCH IFOFF LIST,SKPPRINT    DON'T OPEN IF NOT REQ'D
         OPEN  (SYSPRINT,(OUTPUT))  OPEN SYSPRINT
SKPPRINT RDJFCB  (SYSLIB)       GET THE JFCB
         MVC   DSNAME(32),JFCB  MOVE IN DSNAME.
         OPEN  (SYSLIB)         OPEN INPUT PDS (SYSLIB)
         LH    0,SYSLIB+62      GET SYSLIB BLKSIZE
         GETMAIN R,LV=(0)       GET A BUFFER LARGE ENOUGH
         LR    5,1              SETUP REG5 WITHBLOCK AREA
         L     2,16             GET CVT POINTER
         UNPK  DATE(5),57(3,2)  CONVERT CVTDATE TO PRINTABLE
         MVZ   DATE+4(1),=C'1'  MAKE LAST PRINT TOO
         L     2,SYSLIB+44      GET DEB POINTER
         L     2,32(2)          GET UCB POINTER
         MVC   VOLNO,28(2)      MOVE VOLSER FROM UCB
         B     CALLNAME         INITIALIZE TO FIRST MEMBER
ENDPDS   IFOFF LIST,CALLNAME    IF NOT PRINTING, SKIP
         PUT   SYSPRINT,PRTLINE  END OF MEMBER, BLANK LINE
         FILL  PRTLINE,C' '     CLEAR PRINT LINE.
         AP    LINECT,=P'1'     BUMP LINE COUNT
         SPACE 5
***********************************************************************
*
*        GET NEXT MEMBER NAME IN PDS VIA SEARCH OF DIRECTORY
*
***********************************************************************
CALLNAME L     15,=V(DIRSRCH)   ADDR OF DIRECTORY SEARCH RTN
         BALR  14,15            GET NEXT MEMBER NAME
         LTR   15,15            END OF MEMBERS?
         BNZ   EOFPDS           YES, CHECK FOR INDEX
         MVC   FINDAREA,0(1)    MOVE MEMBER NAME TO FIND AREA
         MVC   MBRNME,FINDAREA  AND TO WORK AREA
         IFOFF EJECT,BYEJ       EJECT SPECIFIED?
         MVC   LINECT,=P'&LINECNT'  YES, FORCE EJECT NEXT TIME
         EJECT
***********************************************************************
*
*        IF QUALIFYING MEMBERS, CHECK FOR USER REQUESTED MEMBERS
*
***********************************************************************
BYEJ     IFOFF QUAL,NOSEL       CHECKING FOR QUALIFIED NAMES?
COMPNME  CLC   FINDAREA,QUALNAME  YES, IS IT EQUAL?
         BE    NOSEL            YEA, LET'S PROCESS IT
         BL    CALLNAME         NO, GET NEXT MEMBER
         GET   SYSIN            OOPS, MUST GET NEXT SYSIN RECORD
         SR    2,2              CLEAR FOR NAME COUNT
         MVC   CARDIN,0(1)      MOVE SYSIN RECORD TO WORK AREA
         LA    1,QUALNAME+1     SET SCAN POINTER
LNGTH    CLC   0(1,1),=C' '     END OF NAME (QUALIFIER)
         BE    LNGFND           YES, NOW HAVE LENGTH
         LA    1,1(1)           NO, BUMP SCAN POINTER
         LA    2,1(2)           BUMP COUNT REG
         B     LNGTH            CHECK NEXT CHAR
LNGFND   STC   2,COMPNME+1      UPDATE COMPARE INSTRUCTION
         B     COMPNME          NOW WE CAN COMPARE AGAIN
         SPACE 5
***********************************************************************
*
*        LOCATE EACH MEMBER VIA 'FIND' AND PROCESS SAME
*
***********************************************************************
NOSEL    DOSUB MEMHEAD          NEW MEMBER, DO SKIP/EJECT
         FIND  SYSLIB,FINDAREA,D  SET DCB FOR READ OF MEMBER
         LTR   15,15            SUCCESSFULL?
         BZ    READPDS          YES, READ MEMBER
         WTO   'IEBPDSUT - DIRECTORY SEARCH I/O ERR',ROUTCDE=(11)
         RETNX A,RC=4044
READPDS  IFON  BLKSW,BYPREAD    WITHIN A BLOCK OF DATA?
READ     READ  DECBPDS,SF,SYSLIB,(5),'S'  READ MEMBER
         CHECK DECBPDS          INSURE NORMAL COMPLETION
         LR    6,5              INIT REG6 TO BLOCK ORIGIN
         LR    7,5              INIT REG7 TO BLOCK ORIGIN
         LH    1,SYSLIB+62      GET DCB BLKSIZE
         L     3,DECBPDS+16     GET RECORD POINTER
         SH    1,14(3)          SUBTRACT FROM BLOCKSIZE
         STH   1,DECBPDS+6      STORE AS SIZE
         SETON BLKSW            INDICATE NEW BLOCK WAS READ
         B     OUTPDS           SKIP BLOCK UPDATE
         SPACE 1
BYPREAD  LH    1,DECBPDS+6      GET REMAINING SIZE OF BLOCK
         SH    1,=H'80'         DECREMENT FOR THIS RECORD
         BZ    BLKEMPTY         GET ANOTHER BLOCK IF EMPTY
         STH   1,DECBPDS+6      SAVE UPDATED REMAINDER
         LA    7,80(7)          BUMP RELATIVE RECORD POINTER
         LR    6,7              COPY TO WORKING REG
OUTPDS   DOSUB PUTRCD           WRITE RECORD TO PUNCH/PRINT
         B     READPDS          GET NEXT RECORD
         SPACE 2
BLKEMPTY SETOF BLKSW            INDICATE CURRENT BLOCK EMPTY
         B     READ             GET NEXT BLOCK
         EJECT
***********************************************************************
*
*        FOR EACH NEW MEMBER, EITHER DO AN EJECT OR SPACE 5 LINES
*        AS REQUESTED BY THE USER.
*
***********************************************************************
MEMHEAD  BEGSB ENDMEM           HEADING ROUTINE FOR NEW MEMBER
         IFON  PUNCH,GENADD     ADD AN ADD/REPL CARD IF REQ'D
PRINTON  IFOFF SPACE,CHKEJ      SKIP SPACE IF NOT REQ'D
         MVI   PRTCC,C' '       SINGLE SPACE LINE
         AP    LINECT,=P'1'     BUMP LINE COUNT
         CP    LINECT,=P'&LINECNT'  SHOULD WE EJECT?
         BH    HEADMEM          YES, OVER REQ'D LINE COUNT
         PUT   SYSPRINT,PRTLINE  WRITE SPACE
CHKEJ    IFOFF EJECT,HEADWR     GENERATE EJECT IF REQ'D
HEADMEM  DOSUB HEADER           DO MAJOR HEADING (EJECT)
HEADWR   MVC   PRTMEM,FINDAREA  MOVE MEMBER NAME TO 1ST LINE
         PUT   SYSPRINT,PRTLINE
         FILL  PRTLINE,C' '     CLEAR PRINT LINE.
         AP    LINECT,=P'1'     BUMP LINE COUNT
         IFOFF INDEX,ENDMEM     SKIP ROUTINE IF NO INDEX PAGE
         IFOFF NEEDCOR,ADDTABLE
         SETOF NEEDCOR
         LCLA  &INDXA,&INDXA4,&INDXA5
         LCLA  &INDXB,&INDXB8,&INDXC,&INDXC8,&INDXD,&INDXD8
&INDXA   SETA  &LINECNT*40+4    INDEX PAGE SIZE + 4 (GETMAIN)
&INDXA4  SETA  &LINECNT*40      INDEX PAGE SIZE
&INDXA5  SETA  &LINECNT*40-1    INDEX PAGE SIZE - 1
&INDXB   SETA  &LINECNT*10      INDEX PAGE SIZE/4
&INDXB8  SETA  &LINECNT*10+8
&INDXC   SETA  &LINECNT*20
&INDXC8  SETA  &LINECNT*20+8
&INDXD   SETA  &LINECNT*30
&INDXD8  SETA  &LINECNT*30+8
         L     0,=F'&INDXA'
* INDEX PAGE &LINECNT X 40 + CHAIN POINTER
         GETMAIN R,LV=(0)       GET INDEX WORK AREA
         SR    2,2              INDICATE 1ST IN CHAIN EMPTY
         ST    2,0(1)           SET CHAIN POINTER ZERO
         FTNOP EXTNTA           FIRST TIME NO BRANCH
         ST    1,INDEXES        SAVE INDEX START POINT
EXTNTA   FTBR  EXTNTB           FIRST TIME BRANCH
         L     2,PREVINDX       ESTABLISH CHAIN
         ST    1,0(2)           LET PREVIOUS POINT TO CURRENT
EXTNTB   ST    1,PREVINDX       SAVE POINTER OF CURRENT FOR NEXT ST
         LA    1,4(1)           SKIP OVER POINTER
         ST    1,CURINDEX       SAVE CURRENT
         LR    2,1              COPY TO WORK REG
         A     2,=F'&INDXA4'    BUMP TO END OF AREA
         ST    2,LIMIT          SAVE AS LIMIT
         LR    2,1              TO WORK REG AGAIN
         L     1,=F'&INDXA5'    FIND LAST POSITION IN BLOCK
         MVI   0(2),C' '        CLEAR INDEX AREA
BLANKOUT MVC   1(250,2),0(2)    TO BLANKS
         LA    2,250(2)         BUMP POINTER
         SH    1,=H'250'        DECREMENT BY NUMBER MOVED
         CH    1,=H'250'        CAN I DO IT AGAIN?
         BH    BLANKOUT         YEA, DO IT
         BCTR  1,0              NO, USE EXECUTE
         EX    1,MOVEBLNK       CLEAR LAST PART OF ITS
         B     ADDTABLE         JUMP AROUND EX INSTR
MOVEBLNK MVC   1(0,2),0(2)      FINAL EXECUTED MOVE
ADDTABLE L     1,CURINDEX       GET POINTER TO CURRENT AREA
         MVC   0(8,1),FINDAREA  MOVE MEMBER NAME AND
         MVC   8(2,1),PGCTR     PAGE NUMBER TO INDEX
         LA    1,10(1)          BUMP TO NEXT ENTRY
         ST    1,CURINDEX       AND SAVE AS NEW CURRENT
         C     1,LIMIT          ARE WE AT THE LIMIT?
         BL    ENDMEM           NO, CONTINUE
         SETON NEEDCOR          YES, NEED SOME MORE CORE
         B     ENDMEM           GET IT NEXT TIME
         SPACE 2
GENADD   IFON  NOADD,CHKPRTXX   SKIP FOLLOWING IF NOADD
         MVC   ADDMBR(8),FINDAREA  MOVE IN MEMBER NAME.
         LA    6,ADDCARD        POINT TO ADD RECORD
         DOSUB PUTRCD           WRITE ADD RECORD TO SYSPUNCH
         LA    6,NUMBCARD       POINT TO NUMBER RECORD
         DOSUB PUTRCD           WRITE OUT NUMBER RECORD TO SYSPUNCH
CHKPRTXX IFON  LIST,PRINTON
ENDMEM   ENDSB
         EJECT
***********************************************************************
*
*        THIS IS THE RECORD PUT SUBROUTINE.  ALL NORMAL RECORDS ARE
*        WRITTEN FROM HERE.
*
***********************************************************************
PUTRCD   BEGSB ENDPUT           OUTPUT SUBROUTINE FOR PRINT/PUNCH
         IFOFF PUNCH,PRTDTL     IF NO PUNCH, SKIP
         PUT   SYSPUNCH,(6)     ELSE, PUNCH RECORD
         IFOFF LIST,ENDPUT      IF LIST NOT REQ'D, DONE
PRTDTL   CLC   0(15,6),ADDCARD  IS IT OUR ADD CARD?
         BE    ENDPUT           YES, DON'T PRINT IT.
         CLC   0(15,6),NUMBCARD  NUMBER CARD?
         BE    ENDPUT           YUP.
         AP    LINECT,=P'1'     BUMP LINE COUNT
         CP    LINECT,=P'&LINECNT'  ARE WE AT THE LIMIT
         BL    NOHEAD           NO, SKIP NEW HEADING
         DOSUB HEADER           GENERATE AN EJECT
NOHEAD   MVC   PRTDATA(80),0(6)  MOVE DATA TO PRINT BUF
         IFOFF NONUM,SKIPUN      BRANCH IF NONUM NOT USED
         MVC   PRTDATA+72(8),=CL8' ' CLEAR LINE COUNT FIELD
SKIPUN   PUT   SYSPRINT,PRTLINE  WRITE IT OUT
         FILL  PRTLINE,C' '     CLEAR PRINT LINE.
ENDPUT   ENDSB
         SPACE 5
***********************************************************************
*
*        THIS IS THE MAJOR (TOP OF PAGE) HEADER ROUTINE
*         FOR THE LIST OPTION.
*
***********************************************************************
HEADER   BEGSB EXMJR            SUBROUTINE TO GENERATE EJECT
         AP    PGCTR,=P'1'      BUMP PAGE COUNTER
         UNPK  PGNO(3),PGCTR(2)  MAKE PAGE NUMBER
         MVZ   PGNO+2(1),=C'1'  PRINTABLE
         PUT   SYSPRINT,HEADNG1  AND WRITE HEADING LINE
         PUT   SYSPRINT,HEADNG2  PRINT 2ND HEADER
         FILL  PRTLINE,C' '     CLEAR PRINT LINE.
         PUT   SYSPRINT,PRTLINE  JUMP A LINE
         ZAP   LINECT,=P'0'     RESET LINE COUNTER
         MVI   PRTCC,C'0'       DOUBLE SPACE LINE
EXMJR    ENDSB
         SPACE 5
***********************************************************************
*
*        END OF FILE ROUTINE (END OF MEMBERS).  CLOSE FILES,
*        AND BUILD INDEX (CROSSREFERENCE TABLE) IF REQ'D.
*
***********************************************************************
EOFPDS   CLOSE (SYSLIB)         CLOSE SYSLIB, END OF MEMBERS
         IFOFF PUNCH,CHKINDEX   IF NOT PUNCHING, SKIP
         CLOSE (SYSPUNCH)       CLOSE SYSPUNCH
CHKINDEX IFOFF LIST,RETURN      IF NOT LISTING, NO INDEX
         IFOFF INDEX,RETURN     IF NO INDEX REQ'D, RETURN
         EJECT
***********************************************************************
*
*        AN INDEX WAS REQUESTED, GENERATE SAME.
*
***********************************************************************
         L     6,INDEXES        GET NUMBER OF INDEX PAGES
         ZAP   PGCTR,=P'0'      CLEAR PAGE COUNTER
NXTX     LA    8,4(6)           POINT TO 1ST MEMBER NAME
         FILL  HDGDSNAM,X'40',66  CLEAR 66 CHARS OF HEADING
         MVC   HDGDSNAM(32),DSNAME  MOVE IN DSNAME.
         MVC   HEADNG1(120),INDEXHDG  MOVE TO HEADING LINE
         FILL  HEADNG2,C' '     CLEAR 2ND HEADER LINE
         DOSUB HEADER           CALL HEADING SUBROUTINE
         DOSUB HEADINDX         AND THEN MINOR SUBRTN
PUTINDEX CLC   0(8,8),BLANKS    THIS THE END OF INDEX?
         BE    RETURN           YEA, LET'S END THIS THING
         MVC   COLUMNAN,0(8)    MOVE NAME TO INDEX LINE
         UNPK  COLUMNAP,8(2,8)  MOVE PAGE NUMBER TO INDEX LINE
         OI    COLUMNAP+2,X'F0'  (LAST CHAR TOO)
ENDCOLB  NOP   INCINDEX         ONE TIME SWITCH
         CLC   &INDXB.(8,8),BLANKS  I DON'T UNDERSTAND THIS EITHER
         BNE   PUTCOLB          DO NEXT COLUMNS
         MVC   COLUMNBN(16),BLANKS  CLEAR OUT NO NAME OR PAGE.
         OI    ENDCOLB+1,X'F0'
         B     BLANKCLC
PUTCOLB  MVC   COLUMNBN,&INDXB.(8)
         UNPK  COLUMNBP,&INDXB8.(2,8)
         OI    COLUMNBP+2,X'F0'
ENDCOLC  NOP   INCINDEX
         CLC   &INDXC.(8,8),BLANKS
         BNE   PUTCOLC
BLANKCLC MVC   COLUMNCN(16),BLANKS  CLEAR OUT THE WHOLE THING.
         OI    ENDCOLC+1,X'F0'
         B     BLANKCLD
PUTCOLC  MVC   COLUMNCN,&INDXC.(8)
         UNPK  COLUMNCP,&INDXC8.(2,8)
         OI    COLUMNCP+2,X'F0'
ENDCOLD  NOP   INCINDEX
         CLC   &INDXD.(8,8),BLANKS
         BNE   PUTCOLD
BLANKCLD MVC   COLUMNDN(16),BLANKS  CLEAR OUT TO THE END OF THE PAGE.
         MVC   COLUMNDN+16(22),BLANKS  CLEAR OUT THE REST.
         MVC   COLUMNDN+38(21),BLANKS  CLEAR OUT THE REST.
         MVC   COLUMNDN+58(20),BLANKS  CLEAR IT ALL OUT.
         OI    ENDCOLD+1,X'F0'
         B     INCINDEX
PUTCOLD  MVC   COLUMNDN,&INDXD.(8)
         UNPK  COLUMNDP,&INDXD8.(2,8)
         OI    COLUMNDP+2,X'F0'
INCINDEX LA    8,10(8)          BUMP TO NEXT INDEX MEMBER
         AP    LINECT,=P'1'     BUMP LINE COUNT
         PUT   SYSPRINT,INDEXLIN  WRITE INDEX LINE
         MVI   INDEXLIN,C' '    RESET TO SINGLE SPACE
         CP    LINECT,=P'&LINECNT'  SHOULD WE EJECT
         BL    PUTINDEX         NO, CONTINUE
         L     1,0(6)           INDEX BLOCK CHAIN POINTER
         LTR   1,1              IS THE ANOTHER BLOCK?
         BZ    RETURN           NO, ALL DONE
         LR    6,1              YES, COPY IT TO WORK REG
         B     NXTX             PUMP OUT ANOTHER PAGE
         EJECT
***********************************************************************
*
*        NORMAL RETURN ROUTINE
*
***********************************************************************
RETURN   RETNX A,RC=0           NORMAL RETURN FROM HERE
         SPACE 5
***********************************************************************
*
*        TOP OF PAGE HEADING ROUTINE FOR INDEX PAGES
*
***********************************************************************
HEADINDX BEGSB EXITMINR         INDEX PAGE HEADING ROUTINE
         MVC   PRTLINE+1(19),=C'MEMBER      PAGE   '  SET UP
         MVC   PRTLINE+20(19),PRTLINE+1  PRINT LINE WITH
         MVC   PRTLINE+39(19),PRTLINE+1  FOUR ROWS OF HEADING
         MVC   PRTLINE+58(19),PRTLINE+1  FOR INDEX PAGE
         PUT   SYSPRINT,PRTLINE  AND WRITE IT OUT
         MVI   INDEXLIN,C'0'    SET UP DOUBLE SPACE
EXITMINR ENDSB
         EJECT
PRTEXIT  CLC   SYSPRINT+62(2),=H'0' WAS BLKSIZE SPECIFIED?
         BNER  14             YES, RETURN TO OPEN
         MVC   SYSPRINT+62(2),=H'133' NO, PROVIDE A DEFAULT
         BR    14             RETURN TO OPEN
PCHEXIT  CLC   SYSPUNCH+62(2),=H'0' WAS BLKSIZE SPECIFIED?
         BNER  14             YES, RETURN TO OPEN
         MVC   SYSPUNCH+62(2),=H'6160' NO, PROVIDE A DEFAULT
         BR    14             RETURN TO OPEN
SYSIN    DCB   DSORG=PS,MACRF=GL,DDNAME=SYSIN,LRECL=80,BFTEK=S,        X
               EODAD=EOFPDS
         SPACE 3
SYSLIB   DCB   DSORG=PO,MACRF=R,DDNAME=SYSLIB,EODAD=ENDPDS,NCP=1,      X
               LRECL=80,RECFM=FB,EXLST=EXLST
SYSPUNCH DCB   DDNAME=SYSPUNCH,MACRF=(PM),DSORG=PS,RECFM=FB,           *
               LRECL=80,EXLST=PCHXIT
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,LRECL=133,            *
               RECFM=FBA,EXLST=PRTXIT
         LTORG
         CNOP  0,8
FINDAREA DC    D'0'
EXLST    DC    X'87',AL3(JFCB)  SYSLIB JFCB EXIT LIST
PCHXIT   DC    X'85',AL3(PCHEXIT) BLOCK SIZE OPEN EXIT
PRTXIT   DC    X'85',AL3(PRTEXIT) BLOCK SIZE OPEN EXIT
INDEXES  DC    F'0'
CURINDEX DC    F'0'
PREVINDX DC    F'0'
LIMIT    DC    F'0'
PGCTR    DC    PL2'0'
         BITSW BLKSW,QUAL,NOADD,NEEDCOR,PUNCH
         BITSW REPL,LIST,SPACE,EJECT,INDEX,NONUM
PRTLINE  DS    0CL133           PHYSICAL PRINT LINE
PRTCC    DC    CL1' '
PRTMEM   DS    CL8'MEMBERNM',CL2' '  MEMBER NAME FOR HEADING
PRTDATA  DS    CL80             LOGICAL PRINT LINE (DATA)
         DC    CL42' '          FILL END OF PRINT LINE
CARDIN   DS    0CL80
         DC    CL15' '
QUALNAME DC    CL8' '
         DC    CL68' '
LINECT   DC    PL2'&LINECNT'
ADDCARD  DC    CL13'./ ADD  NAME=' IEBUPDTE ADD CARD
ADDMBR   DC    CL8' '           NAME FIELD
         DC    CL60' '          END OF ADD CARD
NUMBCARD DC    CL80'./ NUMBER NEW1=10,INCR=10'
HEADNG1  DC    C'1MEMBER='
MBRNME   DC    CL8' '           MEMBER NAME FIELD
         DC    C' DSN='
DSNAME   DC    CL44' '          DSNAME FIELD
         DC    C' VOL='
VOLNO    DC    CL6' '           VOLUME ID FIELD
         DC    CL30' '
         DC    C'DATE='
DATE     DC    CL5' '           DATE FIELD
         DC    C'    PAGE='
PGNO     DC    CL3' '           PAGE NUMBER FIELD
         DC    CL10' '          PADDING
HEADNG2  DS    0CL133
         DC    CL11' '
         DC    C'.........'
         DC    C'1.........'
         DC    C'2.........'
         DC    C'3.........'
         DC    C'4.........'
         DC    C'5.........'
         DC    C'6.........'
         DC    C'7.C.......'
         DC    CL45' '          PADDING
INDEXHDG DC    CL1'1'
         DC    C'TABLE OF CONTENTS FOR PARTITIONED DATA SET '
HDGDSNAM DC    CL44' '
BLANKS   DC    CL22' '
         DC    CL80' '
INDEXLIN DC    C'0'
COLUMNAN DS    CL8
         DC    C' ... '
COLUMNAP DS    CL3
         DC    CL3' '
COLUMNBN DS    CL8
         DC    C' ... '
COLUMNBP DS    CL3
         DC    CL3' '
COLUMNCN DS    CL8
         DC    C' ... '
COLUMNCP DS    CL3
         DC    CL3' '
COLUMNDN DS    CL8
         DC    C' ... '
COLUMNDP DS    CL3
         DC    CL9' '
         DC    CL14' '
         DC    CL10' '
         DC    CL10' '
         DC    CL20' '
JFCB     DS    CL187            JFCB BUFFER
         DROP  13
         DROP  9
         TITLE 'ACQUIRE PDS MEMBER NAME'
DIRSRCH  CSECT
         SPACE 2
*        NO PARAMETERS PASSED ON ENTRY
*        RETURN REGISTERS
*              R1 - ADDRESS OF 8 BYTE MEMBER NAME
*              R15 - RETURN CODE (0=NORMAL,4=EOF)
         SPACE 2
         SAVEX AA,1,V1
         L     4,SAVE4
         L     8,SAVE8
         FTNOP GETNXT
         OPEN  PDS
READDRTY LA    8,BUFF256
         ST    8,BUFF
         LH    4,TWO
         READ  DECBAA,SF,PDS,KEY,256
         CHECK DECBAA
         CLC   C14,0(8)         LESS THAN 14
         BH    ERR
         CLC   TWOFS+2(2),0(8)  GR THAN 256
         BL    ERR
         MVC   BLKLTH(2),0(8)
FINBLK   L     8,BUFF
         AR    8,4              8 NOW AT MEMBER NAME
         CLC   0(8,8),ALLFS     LAST CHK
         LR    1,8
         BE    PDSFINI
         SR    15,15
         ST    8,SAVE8
         ST    4,SAVE4
         B     EXIT
GETNXT   EQU   *
         LH    5,10(8)
         N     5,MASK1
         AR    5,5              5= # BYTES USER DATA
         AR    4,5              STEP 4
         AH    4,TWELVE         NAME + TTRC
         CH    4,BLKLTH
         BL    FINBLK
         B     READDRTY
ERR      LA    15,2004
         B     DUMP
ERROREND LA    15,2008
DUMP     ABEND (15),DUMP
PDSFINI  LA    15,4
EXIT     RETNX AA,RC=(15)
TWOFS    DC    F'256'
MASK1    DC    F'31'
ALLFS    DC    8X'FF'
SAVE4    DC    F'0'
SAVE8    DC    F'0'
BUFF     DC    F'0'
BLKLTH   DC    H'0'
TWELVE   DC    H'12'
TWO      DC    H'2'
C14      DC    H'14'
PDS      DCB   DSORG=PS,MACRF=R,RECFM=F,BLKSIZE=256,BUFNO=1,           *
               DDNAME=SYSLIB,KEYLEN=8,SYNAD=ERROREND,DEVD=DA
KEY      DC    D'0'
BUFF256  DS    CL256
         DS    0D
         LTORG
         END
