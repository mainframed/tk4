GDGC     TITLE 'GENERATION DATA SET COPY UTILITY'           *HMD 08/81*
*----------------------------------------------------------------------
*
*                   NOV ,1977
*
*        THIS PROGRAM COPIES INPUT GENERATION DATASETS
*        IN REVERSE ORDER (OLDEST GDG FIRST) TO AN OUTPUT
*        DATASET(SYSUT2) ALLOWING A USER TO MAINTAIN DATA
*        IN CHRONOLOGICAL SEQUENCE.  THIS IS REQUIRED IF USING
*        RMF OR OTHER POST PROCESSOR SYSTEMS THAT REQUIRE SMF
*        DATA TO BE IN SEQUENCE (IT AVOIDS LARGE SORTS).
*
*        THE INPUT DATASET NAME (HIGH LEVEL OF THE GDG) IS PASSED
*        AS PARM INFORMATION AND IS USED TO "DYNAMICALLY" ALLOCATE
*        EACH GENERATION LEVEL OF THE GROUP.  ONCE THIS ROUTINE
*        IS COMPLETE, THE USER MAY SCRATCH AND UNCATALOG THE
*        GENERATION DATA SETS IF HE WISHES.  THIS ROUTINE "WILL NOT"
*        SCRATCH OR UNCATALOG ANY DATASETS.
*
*        A MESSAGE DATASET (DDNAME MESSAGES) IS REQUIRED TO INFORM
*        THE USER OF ANY ERRORS AND TO INDICATE THE PROGRESS OF THE
*        COPY OPERATION.  THIS IS IN LIEU OF WTO MESSAGES.
*
*        NOTE THAT NO DCB INFORMATION MAY BE SPECIFIED FOR SYSUT1.
*        DCB INFORMATION MAY BE SUPPLIED FOR SYSUT2. THE DCB INFO
*        FROM SYSUT1 WILL BE COPIED TO SYSUT2 IN THE DCB OPEN EXIT.
*        BECAUSE OF THAT FACT, THIS PROGRAM WILL ONLY WORK ON
*        STANDARD LABEL FILES (DISK OR TAPE).
*
*        FOR VBS/VS FILES (LIKE SMF DATASETS) 'BFTEK=A' IS FORCED
*        FOR SYSUT1 IN THE DCB OPEN EXIT.
*
*
*----------------------------------------------------------------------
         EJECT
         MACRO
&LABEL   $PROLOG &LV=0
.**********************************************************************
.*
.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY
.*       MULTIPLE BASE REGISTERS.  ALSO, VIA THE 'LV=' KEYWORD
.*       PROVIDE ADDITIONAL USER STORAGE (APPENDED TO THE
.*       SAVE AREA) ADDRESSABLE FROM REG 13.  IF NO OPERANDS
.*       ARE CODED, REG 12 IS ASSUMED THE BASE. EXAMPLE:
.*              SECTNAME $PROLOG          = STANDARD REG 12 BASE
.*              SECTNAME $PROLOG 5        = STANDARD, REG 5 BASE
.*              SECTNAME $PROLOG 10,LV=20 = ADD 20 BYTES TO SAVE AREA
.*                                             REG 10 IS BASE
.*              SECTNAME $PROLOG R10,R11  = REGS 10 AND 11 ARE BASES
.*
.**********************************************************************
         LCLA  &AA,&AB,&AC
         GBLB  &PRORG
&AC      SETA  4096
&LABEL   CSECT
         B     32(R15)             BRANCH AROUND
         DC    AL1(26)
         DC    CL8'&LABEL'         CSECT NAME
         DC    C'-'
         DC    CL8'&SYSDATE'       COMPILE DATE
         DC    C'-'
         DC    CL8'&SYSTIME'       COMPILE TIME
         CNOP  0,4                 ALIGNMENT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R12,R15             LOAD BASE REG
         USING &LABEL,R12          INFORM ASSEMBLER
         AIF   (&LV GT 4023).MERR
         LA    R0,&LV+72           LOAD REG 0 WITH LENGTH VARIABLE
         GETMAIN R,LV=(0)          GET CORE FOR SAVEAREA AND USER
         AIF   (&LV+72 LE 256).XC2
         AIF   (&LV+72 LE 512).XC1
         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE
         LR    R2,R1               SAVE POINTER IN EVEN REG
         LA    R4,1(R1)            SET RECEIVING POINTER
         LR    R5,R0               SET RECEIVING LENGTH
         BCTR  R5,R0               DECREMENT LENGTH
         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE
         LA    R3,1                SET SENDING LENGTH
         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'
         AGO   .STORE
.XC1     ANOP
         XC    256(&LV-184,R1),256(R1)  CLEAR SAVE AREA
         XC    0(256,R1),0(R1)          CLEAR SAVE AREA
         AGO   .STORE
.XC2     ANOP
         XC    0(&LV+72,R1),0(R1)       CLEAR SAVE AREA
.STORE   ANOP
         ST    R13,4(R1)           SAVE BACK CHAIN
         ST    R1,8(R13)           SET FORWARD CHAIN
         LR    R11,R1              SAVE NEW SAVEAREA ADDRESS
         L     R15,16(R13)         RESTORE REG 15
         ST    R0,16(R13)          SAVE SAVEAREA LENGTH
         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN
         LR    R13,R11             SET SAVEAREA POINTER
         AIF   (N'&SYSLIST EQ 0).MEND
         AIF   ('&SYSLIST(1)' EQ 'R12').SKIPIT
         AIF   ('&SYSLIST(1)' EQ '12').SKIPIT
         LA    &SYSLIST(1),&LABEL  LOAD REQUESTED BASE REG
         DROP  R12                 DROP ASSUMED BASE REG
         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER
.SKIPIT  ANOP
&AA      SETA  2
.LOOP    ANOP
         AIF   (&AA GT N'&SYSLIST).MEXIT
&AB      SETA  &AA-1
         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB))  LOAD NEXT BASE REG
         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG
         USING &LABEL+&AC,&SYSLIST(&AA) INFORM ASSEMBLER
&AC      SETA  &AC+4096
&AA      SETA  &AA+1
         AGO   .LOOP
.MEXIT   ANOP
         AIF   (&PRORG).MEX2
         SPACE
         $REGS
         SPACE
.MEX2    ANOP
&AA      SETA  &LV+72
         MNOTE *,'TOTAL STORAGE AREA RECEIVED = &AA'
         MEXIT
.MEND    ANOP
         MNOTE *,'NO REGISTER SPECIFIED - R12 ASSUMED'
         AGO   .MEXIT
.MERR    ANOP
         MNOTE 12,'LV > 4023 - REQUEST IGNORED'
         AGO   .MEXIT
         MEND
         EJECT
         MACRO
&LABEL   $EPILOG &RC
&LABEL   LR    R1,R13              GET SAVEAREA ADDRESS
         L     R13,4(R13)          GET BACK CHAIN POINTER
         L     R0,16(R13)          GET SAVEAREA LENGTH
         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)
         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA
         LM    R14,R12,12(R13)     RESTORE CALLERS REGS
         AIF   (T'&RC EQ 'O').SPEC
         LA    R15,&RC             SET RETURN CODE
.SPEC    ANOP
         BR    R14                 RETURN TO CALLER
         MEND
         EJECT
         MACRO
         $REGS
         GBLB  &PRORG
         AIF   (&PRORG).MEX2
&PRORG   SETB  1
 SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
 SPACE
REG0     EQU   0
REG1     EQU   1
REG2     EQU   2
REG3     EQU   3
REG4     EQU   4
REG5     EQU   5
REG6     EQU   6
REG7     EQU   7
REG8     EQU   8
REG9     EQU   9
REG10    EQU   10
REG11    EQU   11
REG12    EQU   12
REG13    EQU   13
REG14    EQU   14
REG15    EQU   15
 SPACE
.MEX2    ANOP
       MEND
       EJECT
*----------------------------------------------------------------------
*
*        INITIALIZATION AND DCB/JFCB/DSCB MERGE
*
*----------------------------------------------------------------------
GDGCOPY  $PROLOG R12,LV=256       GET AN EXTRA 256 BYTES
ENTRY010 DS    0H
         L     R1,0(R1)           GET PARM POINTER
         LH    R2,0(R1)           GET PARM SIZE
         CH    R2,=H'0'           ANY PARM?
         BE    RETURN             NO, RETURN TO CALLER
         CH    R2,=H'35'          VALID SIZE?
         BH    RETURN             NO, RETURN TO CALLER
         LA    R3,CAMDSN(R2)      GET OFFSET TO GDG SUFFIX
         MVC   0(3,R3),=C'(0)'    START WITH CURRENT GENERATION
         ST    R3,GDGADDR         SAVE ADDRESS OF GENERATION LEVEL
         BCTR  R2,0               DECREMENT FOR EXECUTE
         EX    R2,PARMMOVE        MOVE DSNAME TO CAMLIST
         OPEN  (MESSAGES,(OUTPUT)) OPEN MESSAGE DATASET     *HMD 08/81*
         LA    R6,MESSAGES        POINT TO DCB              *HMD 08/81*
         USING IHADCB,R6          INFORM ASSEMBLER          *HMD 08/81*
         TM    DCBOFLGS,DCBOFOPN  DID IT OPEN OK?           *HMD 08/81*
         BO    ENTRY020           YES, CONTINUE             *HMD 08/81*
         ABEND 32,DUMP            NO, ABEND                 *HMD 08/81*
PARMMOVE MVC   CAMDSN(0),2(R1)    MOVE DSNAME TO LIST
         DROP  R6                                           *HMD 08/81*
         EJECT
*----------------------------------------------------------------------
*
*        FIND THE OLDEST GENERATION DATASET NAME VIA THE CATALOG
*
*----------------------------------------------------------------------
ENTRY020 DS    0H
         LOCATE CAMLIST           IS THIS THERE A '0' GENERATION
         LTR   R15,R15            ZERO RETURN CODE ?
         BNZ   RETURN             NO - END OF THE LINE
AAA020   AP    GDG#,=P'1'         ADD 1 TO RELATIVE GENERATION NUMBER
         BAL   R14,ENTRY900       CONVERT GDG#
         LOCATE CAMLIST           LOOK FOR OLDEST GENERATION
         LTR   R15,R15            ZERO RETURN CODE ?
         BZ    AAA020             YES, CHECK FOR NEXT
         SP    GDG#,=P'1'         BUMP BACK TO PREVIOUS GDG#
         BAL   R14,ENTRY900       CONVERT GDG#
         LOCATE CAMLIST           CONVERT GDG NUMBER
         LTR   R15,R15            ZERO RETURN CODE ?
         BZ    EXIT020            YES, CONTINUE
         ABEND 20,DUMP            SHOULD NOT OCCUR
EXIT020  EQU   *
         EJECT
*----------------------------------------------------------------------
*
*        COPY THE GDG TO THE OUTPUT FILE
*
*----------------------------------------------------------------------
ENTRY030 DS    0H
         BAL   R14,ENTRY910       ALLOC THE INPUT GDG
         MVC   STATUS+18(44),CAMDSN MODIFY MESSAGES TEXT
         PUT   MESSAGES,STATUS    PUT OUT THE STATUS MSG    *HMD 08/81*
         OPEN  (SYSUT1,(INPUT))   OPEN SYSUT1 INPUT FILE    *HMD 08/81*
         LA    R8,SYSUT1          SAVE SYSUT1 DCB           *HMD 08/81*
         CLI   FIRSTFLG,X'FF'     IS THIS THE FIRST TIME?   *HMD 08/81*
         BNE   AAA030             NO, DO NOT OPEN SYSUT2    *HMD 08/81*
         OPEN  (SYSUT2,(OUTPUT))  OPEN THE OUTPUT FILE      *HMD 08/81*
         MVI   FIRSTFLG,X'00'     INDICATE NOT FIRST TIME   *HMD 08/81*
AAA030   EQU   *
         GET   SYSUT1             GET A RECORD
         ST    R1,SAVE14          SAVE FOR DEBUGGING 002 ABENDS
         LR    R0,R1              POINT TO RECORD FOR PUT
         PUT   SYSUT2,(0)         WRITE RECORD
         B     AAA030             GET NEXT RECORD
BBB030   EQU   *
         CLOSE SYSUT1             CLOSE THE INPUT DATA SET
         BAL   R14,ENTRY920       DE-ALLOCATE THE GDG
         SPACE 3
*----------------------------------------------------------------------
*
*        UPDATE TO THE NEXT GENERATION IF ANY
*
*----------------------------------------------------------------------
ENTRY040 DS    0H
         CP    GDG#,=P'0'         DID WE JUST PROCESS GDG(0)?
         BE    EOJ                YES, ALL DONE
         SP    GDG#,=P'1'         NO, DECREMENT TO NEXT GENERATION
         BAL   R14,ENTRY900       CONVERT GDG#
         LOCATE CAMLIST           CONVERT NAME FOR DYNALLOC
         LTR   R15,R15            ZERO RETURN CODE ?
         BZ    ENTRY030           YES, CONTINUE
         ABEND 10,DUMP            SHOULD NOT OCCUR          *HMD 08/81*
         SPACE 3
*----------------------------------------------------------------------
*
*        CONVERT THE GDG NUMBER FOR ALLOCATE/LOCATE
*
*----------------------------------------------------------------------
ENTRY900 DS    0H
         L     R15,GDGADDR        GET MOVE TO ADDRESS
         MVC   0(9,R15),=CL9' '   CLEAR POSSIBLE REDUNDANT GDG#
         UNPK  1(3,R15),GDG#      UNPACK TO CAMLIST
         OI    3(R15),X'F0'       CHANGE SIGN
         MVI   1(R15),C'-'        NEGATIVE GDG NUMBER
         MVI   0(R15),C'('        MOVE LEFT PAREN
         MVC   4(2,R15),=CL25') ' MOVE RIGHT PAREN AND BLANK
         BR    R14                RETURN
         EJECT
*----------------------------------------------------------------------
*
*        ALLOCATE THE GENERATION DATA SET
*
*----------------------------------------------------------------------
ENTRY910 DS    0H
         ST    R14,SAVE14         SAVE CALLED FROM ADDRESS
         LA    R11,72(R13)        ADDRESS OF REQUEST BLOCK
         USING S99RBP,R11         REQ BLK POINTER DSECT
         LA    R10,S99RBP+4       ADDRESSABILITY OF RB DSECT
         USING S99RB,R10          RB DSECT
         ST    R10,S99RBPTR       MAKE RBPTR POINT TO RB
         OI    S99RBPTR,S99RBPND  TURN ON HOB IN RBPTR
         XC    S99RB(RBLEN),S99RB  CLEAR RB
         MVI   S99RBLN,RBLEN      PUT LEN IN ITS LENGTH FIELD
         MVI   S99VERB,S99VRBAL   SET VERB CODE TO ALLOCATE
         LA    R9,S99RB+RBLEN     POINT BEYOND RB (1ST TEXT PTR)
         USING S99TUPL,R9         ADDRESSABILITY OF TEXT UNIT POINTERS
         ST    R9,S99TXTPP        INIT TEXT PTR IN RB
         LA    R8,S99TUPL+16      POINT BEYOND LAST TXT PTR
*                                 (ROOM FOR 4 TEXT UNITS)
         USING S99TUNIT,R8        ADDRESSABILITY OF TEXT UNITS
* DDNAME
         ST    R8,S99TUPTR        1ST PTR TO 1ST UNIT
         LA    R1,DALDDNAM        KEY FOR DDNAME
         STH   R1,S99TUKEY        PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'6'     MOVE 6 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(6),=C'SYSUT1'  DDNAME
         LA    R8,12(R8)          BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
* DISP
         ST    R8,S99TUPTR        2ND PTR TO 2ND UNIT
         LA    R1,DALSTATS        KEY FOR DSN STATUS
         STH   R1,S99TUKEY        PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'1'     MOVE 1 TO TXT UNIT LNGTH FLD
         MVI   S99TUPAR,X'08'     INDICATE SHR DATA SET
         LA    R8,9(R8)           BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
* DATA SET NAME
         ST    R8,S99TUPTR        3RD PTR TO 3RD UNIT
         OI    S99TUPTR,S99TUPLN  TURN ON HOB TO INIDICATE LAST PTR
         LA    R1,DALDSNAM        KEY FOR DSNAME
         STH   R1,S99TUKEY        PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'44'    MOVE 44 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(44),CAMDSN  DSNAME
         LR    R1,R11             ADDR OF REQUEST BLOCK
         DYNALLOC
         ST    R15,RC             SAVE RETURN CODE
         LTR   R15,R15            RETURN CODE ZERO ?
         BNZ   ERROR1             NO - DECODE ERROR
         L     R14,SAVE14         GET CALLED FROM ADDRESS
         BR    R14
         EJECT
*----------------------------------------------------------------------
*
*     DE-ALLOCATE THE GENERATION DATA SET
*
*----------------------------------------------------------------------
ENTRY920 DS    0H
         ST    R14,SAVE14         SAVE CALLED FROM ADDRESS
         LA    R11,72(R13)        ADDRESS OF REQUEST BLOCK
         USING S99RBP,R11         REQ BLK POINTER DSECT
         LA    R10,S99RBP+4       ADDRESSABILITY OF RB DSECT
         USING S99RB,R10          RB DSECT
         ST    R10,S99RBPTR       MAKE RBPTR POINT TO RB
         OI    S99RBPTR,S99RBPND  TURN ON HOB IN RBPTR
         XC    S99RB(RBLEN),S99RB  CLEAR RB
         MVI   S99RBLN,RBLEN      PUT LEN IN ITS LENGTH FIELD
         MVI   S99VERB,S99VRBUN   SET VERB CODE TO UN-ALLOCATE
         LA    R9,S99RB+RBLEN     POINT BEYOND RB (1ST TEXT PTR)
         USING S99TUPL,R9         ADDRESSABILITY OF TEXT UNIT POINTERS
         ST    R9,S99TXTPP        INIT TEXT PTR IN RB
         LA    R8,S99TUPL+16      POINT BEYOND LAST TXT PTR
*                                 (ROOM FOR 4 TEXT UNITS)
         USING S99TUNIT,R8        ADDRESSABILITY OF TEXT UNITS
* DDNAME
         ST    R8,S99TUPTR        1ST PTR TO 1ST UNIT
         LA    R1,DALDDNAM        KEY FOR DDNAME
         STH   R1,S99TUKEY        PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'6'     MOVE 6 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(6),=C'SYSUT1'  DDNAME
         LA    R8,12(R8)          BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
* IN-USE ATTRIBUTE
         ST    R8,S99TUPTR        2ND PTR TO 2ND UNIT
         OI    S99TUPTR,S99TUPLN  TURN ON HOB TO INIDICATE LAST PTR
         LA    R1,DUNUNALC        KEY FOR UNALLOC IF IN-USE
         STH   R1,S99TUKEY        PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'0'     MOVE 0 TO TXT UNIT NUMBR FLD
         LR    R1,R11             ADDR OF REQUEST BLOCK
         DYNALLOC
         ST    R15,RC             SAVE RETURN CODE
         LTR   R15,R15            RETURN CODE ZERO ?
         BNZ   ERROR1             NO - DECODE ERROR
         L     R14,SAVE14         GET CALLED FROM ADDRESS
         BR    R14
         EJECT
*----------------------------------------------------------------------
*
*        END OF JOB
*
*----------------------------------------------------------------------
EOJ      CLOSE (SYSUT2)           CLOSE OUTPUT FILE         *HMD 08/81*
         OC    RC,RC              CLEAR RETCODE             *HMD 08/81*
         BNZ   PRERETN            NORMAL RETURN             *HMD 08/81*
         PUT   MESSAGES,NORMAL    TELL OF NORMAL RETURN     *HMD 08/81*
PRERETN  CLOSE (MESSAGES)         CLOSE PRINT FILE          *HMD 08/81*
RETURN   L     R15,RC             PICK UP RETURN CODE
         $EPILOG
         EJECT
*----------------------------------------------------------------------
*
*        ERROR ROUTINES
*
*----------------------------------------------------------------------
ERROR1   DS    0H
         L     R1,RC              PICK UP RETURN CODE
         CVD   R1,DBWRD
         UNPK  MSG1+11(3),DBWRD+6(2)   RETURN CODE
         OI    MSG1+13,X'F0'
         UNPK  MSG1+17(5),S99ERROR(3)  DYNAMIC ERROR CODE
         MVI   MSG1+21,X'40'
         UNPK  MSG1+29(5),S99INFO(3)   DYNAMIC INFO CODE
         MVI   MSG1+33,X'40'
         PUT   MESSAGES,MSG1           PUT ERROR MESSAGE    *HMD 08/81*
         ABEND 16,DUMP
DBWRD    DC    D'0'
         EJECT
*----------------------------------------------------------------------
*
*        CAMLIST FOR LOCATING EACH GDG
*
*----------------------------------------------------------------------
CAMLIST  CAMLST NAME,CAMDSN,,CAMWORK
CAMDSN   DC    CL44' '
CAMWORK  DS    0D
         DC    265C' '
         EJECT                                              *HMD 08/81*
*----------------------------------------------------------------------
*
*        STORAGE AREAS
*
*----------------------------------------------------------------------
GDGADDR  DC    F'0'               ADDRESS OF '(NNN)' FIELD
RC       DC    F'16'              RETURN CODE (PRIMED FOR ERROR)
SAVE14   DC    F'0'               REG 14 SAVE AREA
GDG#     DC    PL2'0'             CURRENT GDG NUMBER
FIRSTFLG DC    X'FF'              FIRST TIME FLAG           *HMD 08/81*
STATUS   DC    CL121'0GDGCOPY - ACTIVE='                    *HMD 08/81*
NORMAL   DC    CL121'-GDGCOPY - NORMAL COMPLETION'          *HMD 08/81*
MSG1     DC    CL121'0GDGCOPY - XXX - XXXXX ERROR XXXXX INFO (DYNAMIC AX
               LLOCATION ERROR)'                            *HMD 08/81*
INEXT    DC    XL1'85'                                      *HMD 08/81*
         DC    AL3(INROUT)      INPUT DCB EXIT ROUTINE      *HMD 08/81*
OUTEXT   DC    XL1'85'                                      *HMD 08/81*
         DC    AL3(OUTROUT)     OUTPUT DCB EXIT ROUTINE     *HMD 08/81*
         SPACE 2                                            *HMD 08/81*
         USING IHADCB,R1                                    *HMD 08/81*
INROUT   DS    0H                                           *HMD 08/81*
         USING *,R15            ADDRESS THIS ENTRY          *HMD 08/81*
         OC    DCBBUFL,DCBBUFL  IS BUFFER LENGTH ZERO?      *HMD 08/81*
         BNZ   INROUT1          NO, CONTINUE WITH EXIT      *HMD 08/81*
         MVC   DCBBUFL,DCBBLKSI MAKE BUFL=BLKSIZE           *HMD 08/81*
INROUT1  TM    DCBRECFM,DCBRECV VARIABLE LENGTH RECORDS?    *HMD 08/81*
         BZR   R14              NO, RETURN TO OPEN          *HMD 08/81*
         TM    DCBRECFM,DCBRECSB    SPANNED BLOCKS?         *HMD 08/81*
         BZR   R14              NO, JUST REGULAR RECORDS    *HMD 08/81*
         OI    DCBBFALN,DCBBFTA FORCE BFTEK=A               *HMD 08/81*
         BR    R14              RETURN TO OPEN              *HMD 08/81*
         DROP  R15                                          *HMD 08/81*
         SPACE 2                                            *HMD 08/81*
OUTROUT  DS    0H                                           *HMD 08/81*
         USING *,R15            ADDRESS THIS ENTRY          *HMD 08/81*
* R8 POINTS TO INPUT DCB                                    *HMD 08/81*
         CLI   DCBRECFM,0       IS RECFM PRESENT            *HMD 08/81*
         BNE   OUTROUT1         YES, DO NOT INSERT          *HMD 08/81*
         MVC   DCBRECFM(1),DCBRECFM-IHADCB(R8)              *HMD 08/81*
*                               MOVE RECFM FROM INPUT DCB   *HMD 08/81*
OUTROUT1 OC    DCBLRECL,DCBLRECL   IS LRECL ZERO?           *HMD 08/81*
         BNZ   OUTROUT2         NO, DO NOT INSERT LRECL     *HMD 08/81*
         MVC   DCBLRECL,DCBLRECL-IHADCB(R8)                 *HMD 08/81*
*                               MOVE LRECL FROM INPUT DCB   *HMD 08/81*
OUTROUT2 OC    DCBBLKSI,DCBBLKSI IS BLOCKSIZE ZERO?         *HMD 08/81*
         BNZ   OUTROUT3         NO, DO NOT INSERT BLOCKSIZE *HMD 08/81*
         MVC   DCBBLKSI,DCBBLKSI-IHADCB(R8)                 *HMD 08/81*
*                               INSERT BLOCK SIZE FROM INPUT*HMD 08/81*
OUTROUT3 OC    DCBBUFL,DCBBUFL  IS BUFFER LENGTH ZERO?      *HMD 08/81*
         BNZR  R14              NO, RETURN TO OPEN          *HMD 08/81*
         MVC   DCBBUFL,DCBBLKSI MOVE BLKSIZE TO BUFLEN      *HMD 08/81*
         BR    R14                                          *HMD 08/81*
         DROP  R1,R15                                       *HMD 08/81*
         LTORG
         EJECT                                              *HMD 08/81*
SYSUT1   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GL,EODAD=BBB030,           X
               BUFNO=10,EXLST=INEXT                         *HMD 08/81*
         EJECT                                              *HMD 08/81*
SYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PM,BUFNO=10,    *HMD 08/81*X
               EXLST=OUTEXT                                 *HMD 08/81*
         EJECT                                              *HMD 08/81*
MESSAGES DCB   DDNAME=MESSAGES,DSORG=PS,MACRF=PM,LRECL=121, *HMD 08/81*X
               RECFM=FBA,BUFNO=1                            *HMD 08/81*
         EJECT                                              *HMD 08/81*
         DCBD  DSORG=QS
         EJECT                                              *HMD 08/81*
         IEFZB4D0
         EJECT                                              *HMD 08/81*
         IEFZB4D2
RBLEN    EQU   (S99RBEND-S99RB)
         END
