*-----------------------------------------------------------*
* NAME:        ADDSYSMD                                     *
*                                                           *
* FUNCTION:    THIS PROGRAM WILL COMPLIMENT IBM'S           *
*              INFO/ACCESS BY TAKING THE SEQUENTIAL DATASET *
*              IT CREATES WITH MULTIPLE SYSMODS IN THEM     *
*              AND ADDING EACH SYSMOD TO A PDS AS AN        *
*              INDIVIDUAL MEMBER.                           *
*                                                           *
* EXEC:        PGM=ADDSYSMD                                 *
*                                                           *
* DD'S:        SMODIN DEFINES THE INFO/ACCESS SEQUENTIAL    *
*                     DATASET                               *
*              SMODOUT DEFINES THE PARTITIONED DATASET      *
*                     TO RECEIVE THE SYSMODS                *
*                                                           *
*-----------------------------------------------------------*
* HISTORY:     10/22/87                                     *
*              CREATED TO SOLVE THE OBSCENE PROBLEM CAUSED  *
*              BY INFO/ACCESS NOT SUPPORTING PDS OUTPUT     *
*-----------------------------------------------------------*
* AUTHOR:      LIONEL DYCK                                  *
*              ROCKWELL INTERNATIONAL                       *
*              PO BOX 2515                                  *
*              2201 SEAL BEACH BLVD.                        *
*              SEAL BEACH, CALIF  90740                     *
*              MAIL CODE 110-SH28                           *
*              PHONE (213) 594-1125                         *
*              COMNET 374-1125                              *
*-----------------------------------------------------------*
         EJECT
ADDSYSMD $PROLOG 12
         EJECT
         OPEN  (SMODOUT)
         CLOSE SMODOUT
         RDJFCB SMODOUT
         LA    R9,INFMJFCB
         USING INFMJFCB,R9
         OPEN  (SMODIN)
READ     GET   SMODIN
         LR    R10,R1             -> INPUT RECORD
         CLC   =C'++APAR',0(R10)
         BE    NEWAPAR
         CLC   =C'++ PTF (',0(R10)
         BE    NEWPTF
         IFOFF SMOD,READ          SKIP THIS RECORD
PUTIT    PUT   SMODOUT,0(R10)
         B     READ
         SPACE 2
NEWAPAR  DS    0H
         MVC   MEMBER(7),7(R10)
         B     CKCLOSE
NEWPTF   DS    0H
         MVC   MEMBER(7),8(R10)
         B     CKCLOSE
CKCLOSE  DS    0H
         IFOFF SMOD,NOCLOSE
         CLOSE SMODOUT
NOCLOSE  DS    0H
         MVC   JFCBELNM,MEMBER    MOVE SMOD NAME
         OI    JFCBTSDM,X'08'     DO NOT WRITE BACK
         OI    JFCBIND1,JFCPDS
         OPEN  (SMODOUT,OUTPUT),TYPE=J
         SETON SMOD
         B     PUTIT
EOF      DS    0H
         CLOSE SMODOUT
         $EPILOG 0
         EJECT
         LTORG
         SPACE 2
         BITSW SMOD
         SPACE 2
MEMBER   DC    CL8' '
         PRINT  OFF
SMODIN   DCB   DSORG=PS,MACRF=GL,DDNAME=SMODIN,EODAD=EOF
SMODOUT  DCB   DSORG=PS,MACRF=(GL,PM),DDNAME=SMODOUT,                  X
               EXLST=JFCB,LRECL=80
         PRINT ON
JFCB     DC    X'87',AL3(INFMJFCB)
         IEFJFCBN LIST=YES
         END   ,
