IOS      TITLE 'AMDPRIOS - AMDPRDMP IOS FORMAT EXIT'
******************************************************************
*                                                                *
*   NAME - AMDPRIOS                                              *
*                                                                *
*   FUNCTION - FORMAT AND DUMP THE MAJOR CONTROL BLOCKS AND      *
*              QUEUES OF THE I/O SUPERVISOR.                     *
*                                                                *
*   COMMAND PARAMETERS -  (TO EXPAND OUTOUT)                     *
*            COMM = DO NOT SUPPRESS ACTIVE COMMUNICATION I/O.    *
*            DEBUG = DUMP ALL UCBS AND ILK2 TABLE.               *
*                                                                *
*   OUTPUT - THE FOLLOWING CONTROL BLOCKS ARE DUMPED.            *
*            1. ACTIVE REQUESTS IOQ/IOSB (COMM = ALL REQUESTS)   *
*            2. QUEUED REQUESTS IOQ/IOSB                         *
*            3. UCBS FOR ACTIVE OR QUEUED I/O (DEBUG = ALL UCBS) *
*            4. LOGICAL CHANNEL QUEUE TABLE                      *
*            5. IOSCOM AND EXTENSION                             *
*            6. CHANNEL SET TABLE                                *
*            7. CHANNEL AVAILABILITY TABLE                       *
*            8. HOT I/O STATUS COLLECTION DATA TABLE             *
*            9. ILK2 UCB ADDRESS TABLE (DEBUG ONLY)              *
*                                                                *
*   OPERATION - INVOKED AS AN EXIT OF AMDPRDMP.  R1 POINTS TO THE*
*               AMDPRDMP PARM LIST AND CONTAINS ADDRESSES OF ALL *
*               REQUIRED REQUIRED ROUTINES AND DATA LOCATION.    *
*                                                                *
*   RESTRICTIONS - THIS ROUTINE ASSUMES MVS SU64 FOR HOT I/O     *
*                  NON XA EXECUTION AND NON XA DUMP              *
*                                                                *
*   ENTRY POINTS - AMDPRIOS.                                     *
*                                                                *
*   EXITS - NORMAL RETURN                                        *
*                                                                *
******************************************************************
         EJECT
AMDPRIOS CSECT
         USING *,R12               ESTABLISH ADDRESSABILITY
         SAVE  (14,12),,*          SAVE REGISTERS
         LR    R12,R15             LOAD BASE REG
         LA    R15,SAVEAREA        LOAD SAVEAREA ADDRESS
         ST    R13,SAVEAREA+4      SAVE PREVIOUS SAVEAREA ADDRESS
         ST    R15,8(R13)          CHAIN TO PREVIOUS SAVEAREA
         LR    R13,R15             UPDATE SAVEAREA POINTER
         MVI   FLAG,0              RESET PROGRAM SWITCH
         LR    R11,R1              LOAD PRDMP PARM LIST BASE
         USING ABDPL,R11
         ST    R1,PRDMPARM         SAVE PARAMETER REGISTER
         XC    ADPLASID,ADPLASID   SET ASID TO ZERO
*
*        CHECK FOR DEBUG OPERAND
*
         L     R1,ADPLEXT          LOAD EXTENSION ADDR
         ICM   R1,15,0(R1)         IS AN OPERAND PRESENT
         BZ    PARMCMPL            IF NOT SKIP PARM CHECK
PARMLOOP CLI   0(R1),BLANK         IS THIS END OF PARMS
         BE    PARMCMPL            IF YES GET OUT OF LOOP
         CLI   0(R1),COMMA         IS CHAR A COMMA
         BE    PARMINCR            IF YES GO BUMP TO NEXT PARM
         CLC   DEBUG,0(R1)         IS DEBUG SPECIFIED
         BE    SETDEBUG            IF YES GO SET FLAG
         CLC   COMM,0(R1)          IS COMM SPECIFIED
         BE    SETCOMM             IF YES GO SET FLAG
PARMINCR LA    R1,1(R1)            BUMP TO NEXT PARM POSITION
         B     PARMLOOP            LOOP THRU ALL PARMS
         SPACE
SETDEBUG OI    FLAG,DEBUGFG        SET DEBUG FLAG
         LA    R1,5(R1)            BUMP OVER PARM
         B     PARMLOOP            GO CHECK NEXT PARM
         SPACE
SETCOMM  OI    FLAG,COMMFG         SET ACT TP DISPLAY FLAG
         LA    R1,4(R1)            BUMP OVER PARM
         B     PARMLOOP            GO CHECK NEXT PARM
PARMCMPL EQU   *
*
*        CHECK CVT AVAILABILITY
*
CHKCVT   ICM   R10,15,ADPLCVT      LOAD ADDRESS OF DUMP'S CVT
         BZ    NOCVT               IF NO CVT QUIT
         USING CVT,R10             LOAD CVT BASE REG
         LR    R0,R10              LOAD PARM REG
         BAL   R14,ACCESS          ACCESS CVT
         LTR   R15,R15             IS CVT AVAILABLE
         BNZ   NOCVT               IF NOT QUIT
*
*        GET BUFFER FOR UCB ADDRESS LIST
*
         L     R0,WKSIZE           LOAD BUFFER SIZE
         GETMAIN EC,LV=(0),A=WKADR GET ILK2 BUFFER
         LTR   R15,R15             WAS STORAGE GOTTEN
         BNZ   NOBUF               IF NOT QUIT
         OI    FLAG,GOTBUF         INDICATE GOOD GETMAIN
         L     R0,WKADR            LOAD BUFFER ADDRESS
         L     R1,WKSIZE           LOAD BUFFER SIZE
         SLR   R14,R14             ZERO INPUT ADDR
         L     R15,HALFMASK        LOAD 0000FFFF
         SLL   R15,24              SET LENGTH TO ZERO AND PAD TO FF
         MVCL  R0,R14              SET WORK BUFFER TO ALL FF
*
*        PRINT HEADING
*
         LA    R1,IOSHDR           LOAD MSG ADDR
         LA    R2,L'IOSHDR         LOAD MSG LENGTH
         BAL   R14,PRINT           PRINT LINE
*
*        LOAD UCB ADDRESS BUFFER
*
         LA    R0,CVTILK2          LOAD UCB ADDR TABLE ADDR
         BAL   R14,ACCESS          CHECK ADDRESS AVAILABILITY
         LTR   R15,R15             IS ADDRESS AVAILABLE
         BNZ   ERROR               ERROR PATH
         LR    R1,R0               COPY ACTUAL AD OF CVTILK2 PTR
         SPACE
*        COPY SEGMENT 1 OF ILK2 POINTER TABLE FROM DUMP'S 4K RECORD
         SPACE
         L     R4,0(R1)            GET DUMP LOC OF ILK2
         ST    R4,WORK             SAVE DUMP ILK2 ADDR
         LR    R0,R4               LOAD PARM REG
         BAL   R14,ACCESS          CHECK ADDRESS AVAILABILITY
         LTR   R15,R15             IS ADDRESS AVAILABLE
         BNZ   ERROR               ERROR PATH
         LR    R5,R4               COPY START OF ILK2 TABLE
         N     R5,PARTPAGE         FIND DISPLACMENT TO START OF ILK2
         L     R1,RKSIZE           LOAD MAX RECORD LENGTH
         SR    R1,R5               FIND ACTUAL LENGTH IN BUFFER
         LR    R15,R1              SAVE LENGTH OF BUFFER DATA
         L     R2,WKADR            LOAD BUFFER ADDR
         LR    R14,R2              SAVE BUFFER ADDRESS
         LR    R3,R1               COPY ACTUAL LENGTH
         LR    R6,R1               SAVE MOVE LENGTH
         ST    R1,ILK2LN           INITIALIZE ILK2 DATA IN BUFFER
         MVCL  R2,R0               MOVE ILK2 TABLE SEGMENT TO BUF
         SRL   R15,1               CONVERT LENGTH TO HALFWORD COUNT
*
         L     R0,HALFMASK         LOAD 0000FFFF
ENDCHK1  CLM   R0,3,0(R14)         IS END OF TABLE IN BUFFER
         BE    BUFCOMP             IF YES SKIP NEXT READ
         LA    R14,2(R14)          BUMP TO NEXT BUFFER POINTER
         BCT   R15,ENDCHK1         LOOP THRU ALL POINTERS COPIED
         SPACE
*        COPY SEGMENT 2 OF ILK2 POINTER TABLE FROM DUMP'S 4K RECORD
         SPACE
         LA    R0,0(R4,R6)         LOAD PARM REG WITH STRT OF NEXT PAGE
         ST    R0,ILK2TEMP         SAVE START OF ILK2 SEG 2 LOG ADDR
         BAL   R14,ACCESS          CHECK ADDRESS AVAILABILITY
         LTR   R15,R15             IS ADDRESS AVAILABLE
         BNZ   ERROR               ERROR PATH
         L     R1,RKSIZE           LOAD MAX RECORD LENGTH
         LR    R15,R1              COPY MAX REC LENGTH
         A     R15,ILK2LN          ADD PREVIOUS LENGTH OF ILK2 IN BUF
         ST    R15,ILK2LN          UPDATE TOT LENGTH OF ILK2 IN BUF
         LR    R15,R1              COPY MAX REC LENGTH
         LR    R14,R2              SAVE BUFFER ADDRESS
         LR    R3,R1               LOAD MAX RECORD LENGTH
         MVCL  R2,R0               MOVE ILK2 TABLE SEGMENT TO BUF
*
         L     R0,HALFMASK         LOAD 0000FFFF
ENDCHK2  CLM   R0,3,0(R14)         IS END OF TABLE IN BUFFER
         BE    BUFCOMP             IF YES SKIP NEXT READ
         LA    R14,2(R14)          BUMP TO NEXT BUFFER POINTER
         BCT   R15,ENDCHK2         LOOP THRU ALL POINTERS COPIED
         SPACE
*        COPY SEGMENT 3 OF ILK2 POINTER TABLE FROM DUMP'S 4K RECORD
         SPACE
         L     R0,ILK2TEMP         LOAD START OF ILK2 SEG 2 LOG ADDR
         A     R0,RKSIZE           BUMP TO START OF SEG 3
         ST    R0,ILK2TEMP         SAVE START OF ILK2 SEG 3 LOG ADDR
         BAL   R14,ACCESS          CHECK ADDRESS AVAILABILITY
         LTR   R15,R15             IS ADDRESS AVAILABLE
         BNZ   ERROR               ERROR PATH
         L     R1,WKSIZE           LOAD BUFFER LENGTH
         S     R1,ILK2LN           FIND COUNT LEFT TO MOVE
         SH    R1,H2               DECR TO LEAVE FFFF IN END OF BUF
         LR    R3,R1               COPY COUNT TO OUTPUT LENGTH REG
         MVCL  R2,R0               MOVE ILK2 TABLE SEGMENT TO BUF
BUFCOMP  EQU   *
*
*        DISPLAY ACTIVE I/O REQUESTS
*
*        R3 = ILK2 BUFFER BASE (AMDPRIOS)
*        R4 = UCB BASE (DUMP)
*        R5 = UCB TEMP BASE (PRDMP BUF)
*        R6 = HI UCB ADDRESS (DUMP)
*
         L     R3,WKADR            LOAD ILK2 BUFFER ADDR
         SR    R6,R6               ZERO MAX UCB ADDRESS REG
         SPACE
ACT010   LH    R4,0(R3)            ADDRESS OF FIRST UCB
         N     R4,HALFMASK         JUST A HALF WORD ADDRESS
         BZ    ACTNEXT             SKIP NULL ENTRY
         C     R4,HALFMASK         END OF TABLE
         BE    ACTCMPL             IF YES QUIT
         CR    R4,R6               IS THIS UCB ADDRESS > LAST
         BL    ACTNEXT             IF NOT SKIP DUPLICATE ENTRY
         LTR   R6,R6               IS THIS 1ST UCB
         BNZ   *+8                 IF NOT SKIP NEXT ISN
         ST    R4,UCB1STAD         SAVE 1ST UCB ADDRESS
         LR    R6,R4               SAVE NEW HIGH UCB ADDRESS
         USING UCBOB,R4
         SPACE
         TM    FLAG,COMMFG         IS ACT TP TO BE DISPLAYED
         BO    CHKACT              IF YES SKIP DEVICE TYPE CHECK
         LA    R0,UCBTYP           LOAD PARM REG
         BAL   R14,ACCESS          CHECK ADDRESS AVAILABILITY
         LTR   R15,R15             IS ADDRESS AVAILABLE
         BNZ   ACTNEXT             IF NOT SKIP THIS UCB
         LR    R5,R0               LOAD UCB BASE REG
         USING UCBTYP,R5
         CLI   UCBTBYT3,UCB3COMM   IS DEVICE TP
         BE    ACTNEXT             IF YES SKIP THIS UCB
         DROP  R5
CHKACT   LA    R0,UCBCHAN          LOAD PARM REG
         BAL   R14,ACCESS          CHECK ADDRESS AVAILABILITY
         LTR   R15,R15             IS ADDRESS AVAILABLE
         BNZ   ACTNEXT             IF NOT SKIP THIS UCB
         LR    R5,R0               LOAD UCB BASE REG
         USING UCBCHAN,R5
         TM    UCBFLA,UCBACTV      IS DEVICE ACTIVE
         BZ    ACTNEXT             IF NOT SKIP THIS UCB
         DROP  R5
         SPACE
CHKACTHD TM    FLAG,AIOHEAD        HAS HEADING BEEN PRINTED
         BO    ACT020              IF YES SKIP HEADING
         BAL   R14,SKIP            PRINT BLANK LINE
         LA    R1,IOSHDR4          LOAD MSG ADDR
         LA    R2,L'IOSHDR4        LOAD MSG LENGTH
         BAL   R14,PRINT           PRINT LINE
         OI    FLAG,AIOHEAD        SET HEADING PRINTED FLAG
         MVC   IOTYPE,ACTIVE       SET IO TYPE
         SPACE
*        DISPLAY DEVICE ADDRESS (UCBNAME)
         SPACE
ACT020   OI    1(R3),1             SET FLAG TO PRINT UCB
         BAL   R14,SKIP            PRINT BLANK LINE
         LA    R0,UCBNAME          LOAD PARM REG
         BAL   R14,ACCESS          CHECK ADDRESS AVAILABILITY
         LTR   R15,R15             IS ADDRESS AVAILABLE
         BNZ   ACTNEXT             IF NOT SKIP THIS UCB
         LR    R1,R0               LOAD UCB BASE REG
         USING UCBNAME,R1
         MVC   DEVNAME,UCBNAME     COPY UCBNAME TO LINE
         DROP  R1
         LA    R1,IOSHDR11         LOAD MSG ADDR
         LA    R2,L'IOSHDR11       LOAD MSG LENGTH
         BAL   R14,PRINT           PRINT LINE
         SPACE
*        ACTIVE DUMP IOQ & IOSB IF AVAILABLE
         SPACE
         USING UCBCHAN,R5
         TM    UCBFLA,UCBPST       IS IOQ AVAILABLE
         BZ    ACTNEXT             IF NOT SKIP THIS UCB
         DROP  R5
         SH    R4,H8               BACKUP UCB BASE TO LOCKWORD
         USING UCBLOCK,R4
         LA    R0,UCBIOQ           LOAD PARM REG
         BAL   R14,ACCESS          CHECK ADDRESS AVAILABILITY
         LTR   R15,R15             IS ADDRESS AVAILABLE
         BNZ   ACTNEXT             IF NOT SKIP THIS UCB
         LR    R5,R0               LOAD UCB BASE REG
         USING UCBIOQ,R5
         L     R7,UCBIOQ           LOAD IOQ ADDRESS
         USING IOQ,R7
         LA    R8,IOQLEN(R7)       LOAD IOQ END ADDR
         BAL   R14,SKIP            PRINT BLANK LINE
         BAL   R14,DUMPRG          GO DUMP IOQ
         LA    R0,IOQIOSB          LOAD PARM REG
         BAL   R14,ACCESS          CHECK ADDRESS AVAILABILITY
         LTR   R15,R15             IS ADDRESS AVAILABLE
         BNZ   ACTNEXT             IF NOT SKIP THIS UCB
         LR    R5,R0               LOAD IOQ BASE REG
         USING IOQIOSB,R5
         L     R7,IOQIOSB          LOAD IOSB ADDRESS
         USING IOSB,R7
         LA    R8,IOSEND           LOAD IOSB END ADDRESS
         BAL   R14,SKIP            PRINT BLANK LINE
         BAL   R14,DUMPRG          GO DUMP IOQ
         SPACE
ACTNEXT  LA    R3,2(R3)            BUMP TO NEXT ILK2 UCB ADDR
         B     ACT010              LOOP THRU ALL UCBS
ACTCMPL  ST    R3,ILK2ENDA         SAVE END OF ILK2 ADDRESS
         TM    FLAG,COMMFG         IS ACT TP TO BE DISPLAYED
         BO    NOCOMMSG            IF YES SKIP MSG
         BAL   R14,SKIP            PRINT BLANK LINE
         LA    R1,IOSHDR13         LOAD MSG ADDR
         LA    R2,L'IOSHDR13       LOAD MSG LENGTH
         BAL   R14,PRINT           PRINT LINE
NOCOMMSG EQU   *
         SPACE
*        GET ADDRESSES OF IOSCOM AND IOSCOM EXTENSION
         SPACE
         LA    R0,CVTIXAVL         LOAD ADDRESS OF IOSCOM  PTR
         BAL   R14,ACCESS          CHECK ADDRESS AVAILABILITY
         LTR   R15,R15             IS ADDRESS AVAILABLE
         BNZ   ERROR               ERROR PATH
         LR    R1,R0               COPY TO USABLE REG
         L     R3,0(R1)            GET DUMP LOC OF IOSCOM
         ST    R3,IOSCOMAD         SAVE IOSCOM ADDR
         USING IOCOM,R3
         LA    R0,IOCOMEX          LOAD IOSCOMEX PTR ADDR
         BAL   R14,ACCESS          CHECK ADDRESS AVAILABILITY
         LTR   R15,R15             IS ADDRESS AVAILABLE
         BNZ   ERROR               ERROR PATH
         LR    R1,R0               COPY TO USABLE REG
         L     R5,0(R1)            LOAD START IOSCOM EXTENSION
         ST    R5,IOSEXAD          SAVE IOSCOMEX ADDRESS
         USING IOX,R5
         SPACE
*        GET START OF LCH TABLE AND NUMBER OF LCHS
         SPACE
         LA    R0,IOCLCHTB         LOAD LCH PTR ADDR
         BAL   R14,ACCESS          CHECK ADDRESS AVAILABILITY
         LTR   R15,R15             IS ADDRESS AVAILABLE
         BNZ   ERROR               ERROR PATH
         LR    R1,R0               COPY TO USABLE REG
         L     R4,0(R1)            LOAD START OF LCH TABLE
         ST    R4,LCHAD            SAVE START OF LCH TABLE
         USING LCH,R4
         LA    R0,IOXLCHCT         LOAD LOG CHAN COUNT ADDR
         BAL   R14,ACCESS          CHECK ADDRESS AVAILABILITY
         LTR   R15,R15             IS ADDRESS AVAILABLE
         BNZ   ERROR               ERROR PATH
         LR    R1,R0               COPY TO USABLE REG
         SR    R3,R3               ZERO COUNT REG
         IC    R3,0(R1)            LOAD NUMBER OF LOGICAL CHAN
         ST    R3,LCHCNT           SAVE NUMBER OF LCH ENTRIES
         DROP  R3,R5
         SPACE
*        DUMP QUEUED I/O REQUESTS
*
*        R1 = UCBNAME BASE (DUMP)
*        R3 = LCH COUNT (REMAINING)
*        R4 = LCH BASE (DUMP)
*        R5 = IOSB BASE (DUMP)
*        R6 = LAST IOQ ADDR (DUMP)
*        R7 = IOQ BASE (DUMP)
*        R8 = UCB BASE (DUMP)
         SPACE
*        LOOP THRU ALL LCWS
         SPACE
RQE010   LA    R0,LCHFST           LOAD PARM REG
         BAL   R14,ACCESS          CHECK ADDRESS AVAILABILITY
         LTR   R15,R15             IS ADDRESS AVAILABLE
         BNZ   ERROR               ERROR PATH
         LR    R1,R0               COPY TO USABLE REG
         ICM   R7,15,0(R1)         LOAD 1ST IOQ ADDR
         BNP   RQE100              GO GET NEXT LCH IF NONE
         ICM   R6,15,4(R1)         LOAD LAST IOQ ADDR
         BNP   RQE100              GO GET NEXT LCH IF NONE
         SPACE
         TM    FLAG,QIOHEAD        HAS HEADING BEEN PRINTED
         BO    RQE020              IF YES SKIP HEADING
         BAL   R14,SKIP            PRINT BLANK LINE
         LA    R1,IOSHDR5          LOAD MSG ADDR
         LA    R2,L'IOSHDR5        LOAD MSG LENGTH
         BAL   R14,PRINT           PRINT LINE
         OI    FLAG,QIOHEAD        SET HEADING PRINTED FLAG
         MVC   IOTYPE,QUEUED       SET IO TYPE
         SPACE
*        LOOP THRU ALL ENTRIES ON THIS LOGICAL CHANNEL
         SPACE
         USING IOQ,R7
RQE020   ST    R7,SAVEIOQ          SAVE START OF IOQ
         SPACE
RQE030   LA    R0,IOQIOSB          LOAD IOSB ADDR
         BAL   R14,ACCESS          CHECK ADDRESS AVAILABILITY
         LTR   R15,R15             IS ADDRESS AVAILABLE
         BNZ   RQE100              IF NOT AVAILABLE TRY NEXT LCH
         LR    R1,R0               COPY TO USABLE REG
         L     R5,0(R1)            LOAD IOSB ADDRESS
         USING IOSB,R5
RQE040   LA    R0,IOSUCB           LOAD UCB ADDR
         BAL   R14,ACCESS          CHECK ADDRESS AVAILABILITY
         LTR   R15,R15             IS ADDRESS AVAILABLE
         BNZ   RQE100              IF NOT AVAILABLE TRY NEXT LCH
         LR    R1,R0               COPY TO USABLE REG
RQE050   L     R8,0(R1)            LOAD UCB ADDRESS
         USING UCBOB,R8
         BAL   R14,SKIP            PRINT BLANK LINE
         LA    R0,UCBNAME          LOAD PARM REG
         BAL   R14,ACCESS          CHECK ADDRESS AVAILABILITY
         LTR   R15,R15             IS ADDRESS AVAILABLE
         BNZ   RQE080              IF NOT SKIP THIS UCB
         LR    R1,R0               LOAD UCB BASE REG
         USING UCBNAME,R1
         MVC   DEVNAME,UCBNAME     COPY UCBNAME TO LINE
         DROP  R1
         LA    R1,IOSHDR11         LOAD MSG ADDR
         LA    R2,L'IOSHDR11       LOAD MSG LENGTH
         BAL   R14,PRINT           PRINT LINE
         SPACE
*        FIND AND FLAG UCB ADDRESS FOR DUMP
         SPACE
         TM    FLAG,DEBUGFG        IS DEBUG SPECIFIED
         BO    RQE080              IF YES SKIP FLAGGING UCB
         L     R1,WKADR            LOAD ILK2 BUFFER ADDR
RQE060   LH    R9,0(R1)            ADDRESS OF FIRST UCB
         N     R9,UCBMASK          JUST A HALF WORD ADDRESS
         BZ    RQE070              SKIP NULL ENTRY
         CR    R9,R8               IS ENTRY FOR UCB
         BNE   RQE070              IF NOT SKIP ENTRY
         OI    1(R1),1             SET FLAG TO DUMP UCB
         B     RQE080              GO DUMP IOQ AND IOSB
RQE070   LA    R1,2(R1)            BUMP UCB ADDRESS INDEX
         C     R1,ILK2ENDA         IS THIS END OF UCB LIST
         BL    RQE060              LOOP THRU ALL UCBS
RQE080   EQU   *
         SPACE
         LA    R8,IOQLEN(R7)       LOAD END OF IOQ
         BAL   R14,SKIP            PRINT BLANK LINE
         BAL   R14,DUMPRG          DUMP IOQ
         LR    R7,R5               LOAD START OF IOSB
         LA    R8,IOSEND           LOAD END OF IOSB ADDR
         BAL   R14,SKIP            PRINT BLANK LINE
         BAL   R14,DUMPRG          DUMP IOSB
         DROP  R5
         SPACE
         L     R7,SAVEIOQ          RESTORE IOQ ADDRESS
         CR    R6,R7               IS THIS THE LAST IOQ
         BE    RQE100              IF YES GET OUT OF LOOP
         LA    R0,IOQLNK           LOAD NEXT IQE ADDR
         BAL   R14,ACCESS          CHECK ADDRESS AVAILABILITY
         LTR   R15,R15             IS ADDRESS AVAILABLE
         BNZ   RQE100              IF NOT AVAILABLE TRY NEXT LCH
         LR    R1,R0               COPY TO USABLE REG
         L     R7,0(R1)            LOAD NEXT IOQ ADDRESS
         B     RQE020              GO DUMP NEXT IOQ/IOSB
         SPACE
RQE100   LA    R4,LCHEL(R4)        BUMP TO NEXT LCH
         BCT   R3,RQE010           LOOP THRU ALL LCHS
RQECMPL  EQU   *
         SPACE
*        DUMP UCBS WITH ACTIVE OR QUEUED I/O
         SPACE
         BAL   R14,SKIP            PRINT BLANK LINE
         LA    R1,IOSHDR1          LOAD MSG ADDR
         LA    R2,L'IOSHDR1        LOAD MSG LENGTH
         BAL   R14,PRINT           PRINT LINE
         TM    FLAG,DEBUGFG        IS DEBUG SPECIFIED
         BZ    UCB050              IF NOT SKIP DUMP OF ALL UCBS
         SPACE
*        DUMP ALL UCBS IF DEBUG SPECIFIED
         SPACE
UCB010   LA    R7,2048             LOAD 2K VALUE
         AR    R7,R7               DOUBLE TO 1ST UCB ADDRESS
         L     R8,UCB1STAD         LOAD 1ST UCB ADDRESS
         USING UCBOB,R8
         LA    R0,UCBEXTPT         LOAD PARM REG
         DROP  R8
         BAL   R14,ACCESS          CHECK ADDRESS AVAILABILITY
         LTR   R15,R15             IS ADDRESS AVAILABLE
         BNZ   UCBCMPL             IF NOT SKIP DUMPING ALL UCBS
         LR    R1,R0               COPY TO USABLE REG
         L     R8,0(R1)            LOAD END OF LAST UCB ADDRESS
         BAL   R14,SKIP            PRINT BLANK LINE
         BAL   R14,DUMPRG          DUMP ALL UCBS
         B     UCBCMPL             UCBS ARE NOW ALL DUMPED
         SPACE
*        DUMP ONLY UCBS WITH ACTIVE OR QUEUED REQUESTS
*        LEAST SIGNIFICANT BIT SET TO 1 IN ILK2 BUFFER FOR EACH
*        ACTIVE OR QUEUED I/O REQUEST'S UCB POINTER
         SPACE
UCB050   L     R3,WKADR            LOAD ILK2 BUFFER ADDR
         SPACE
UCB060   LH    R7,0(R3)            ADDRESS OF FIRST UCB
         TM    1(R3),1             IS THIS UCB TO BE DUMPED
         BZ    UCB070              IF NOT SKIP IT
         N     R7,UCBMASK          SET REG TO AN EVEN HALF WORD ADDR
         USING UCBOB,R7
         BAL   R14,SKIP            PRINT BLANK LINE
         LA    R0,UCBNAME          LOAD PARM REG
         BAL   R14,ACCESS          CHECK ADDRESS AVAILABILITY
         LTR   R15,R15             IS ADDRESS AVAILABLE
         BNZ   UCB070              IF NOT SKIP THIS UCB
         LR    R1,R0               LOAD UCB BASE REG
         USING UCBNAME,R1
         MVC   UNAME,UCBNAME       COPY UCBNAME TO LINE
         DROP  R1
         LA    R1,IOSHDR12         LOAD MSG ADDR
         LA    R2,L'IOSHDR12       LOAD MSG LENGTH
         BAL   R14,PRINT           PRINT LINE
         BAL   R14,SKIP            PRINT BLANK LINE
         SH    R7,H8               DECREMENT TO UCB LOCKWORD
         LA    R8,48(R7)           LOAD END OF MAX LENGTH UCB
         BAL   R14,DUMPRG          GO DUMP UCB
UCB070   LA    R3,2(R3)            BUMP UCB ADDRESS INDEX
         C     R3,ILK2ENDA         IS THIS END OF UCB LIST
         BL    UCB060              LOOP THRU ALL UCBS
UCBCMPL  EQU   *
         SPACE
*
*   DUMP THE LOGICAL CHANNEL QUEUES
*
IOS050   EQU   *
         BAL   R14,SKIP            PRINT A BLANK LINE
         LA    R1,IOSHDR3          HEADING FOR LCHS
         LA    R2,L'IOSHDR3        LENGHT OF HEADING
         BAL   R14,PRINT           TO PRINT HEADING
         BAL   R14,SKIP            PRINT A BLANK LINE
         LM    R7,R8,LCHAD         LOAD LCH TABLE AD & COUNT
         SLL   R8,LCHELP2          FIND TOTAL LENGTH
         ALR   R8,R7               GET END OF LCHS
         BAL   R14,DUMPRG          TO PRINT LCHS
         SPACE
*        DUMP IOS COMMUNICATION AREA
         SPACE
IOS060   EQU   *
         BAL   R14,SKIP            PRINT A BLANK LINE
         LA    R1,IOSHDR2          HEADING FOR IOCOMM
         LA    R2,L'IOSHDR2        LENGTH OF HEADING
         BAL   R14,PRINT           PRINT HEADING
         BAL   R14,SKIP            PRINT A BLANK LINE
         L     R3,IOSCOMAD         LOAD IOCOMM ADDRESS
         USING IOCOM,R3
         LR    R7,R3               LOAD START OF IOCOM
         LA    R8,IOSCOMLN(R7)     LOAD END OF IOCOM
         BAL   R14,DUMPRG          DUMP IOCOM
         SPACE
*        DUMP IOS COMMUNICATION AREA EXTENSION
         SPACE
IOS065   BAL   R14,SKIP            SKIP A BLANK LINE
         L     R7,IOSEXAD          LOAD IOSCOM EXTENSION ADD
         LA    R8,IOSEXLN(R7)      LOAD IOSCOM EXTENSION END
         BAL   R14,DUMPRG          DUMP IOCOM EXTENSION
         SPACE
*        DUMP CHANNEL SET TABLE
         SPACE
IOS070   EQU   *
         LA    R0,IOCMCST          LOAD CHAN SET TABLE ADDR
         BAL   R14,ACCESS          CHECK ADDRESS AVAILABILITY
         LTR   R15,R15             IS ADDRESS AVAILABLE
         BNZ   IOSCMPL             IF NOT QUIT
         LR    R1,R0               COPY TO USABLE REG
         L     R4,0(R1)            LOAD CST BASE REG
         USING CSTE,R4
         BAL   R14,SKIP            SKIP A BLANK LINE
         LA    R1,IOSHDR7          LOAD HEADING ADDR
         LA    R2,L'IOSHDR7        LOAD HEADING LENGTH
         BAL   R14,PRINT           PRINT HEADING
         BAL   R14,SKIP            PRINT A BLANK LINE
         LA    R8,16*16(R7)        LOAD CST END ADDR
         BAL   R14,DUMPRG          DUMP CST
         SPACE
*        DUMP CHANNEL AVAILABILITY TABLE
         SPACE
IOS080   EQU   *
         LA    R0,CSTCATP          LOAD CHAN AVIL TABLE ADDR
         BAL   R14,ACCESS          CHECK ADDRESS AVAILABILITY
         LTR   R15,R15             IS ADDRESS AVAILABLE
         BNZ   IOSCMPL             IF NOT QUIT
         LR    R1,R0               COPY TO USABLE REG
         L     R7,0(R1)            LOAD START OF CAT
         BAL   R14,SKIP            SKIP A BLANK LINE
         LA    R1,IOSHDR9          LOAD HEADING ADDR
         LA    R2,L'IOSHDR9        LOAD HEADING LENGTH
         BAL   R14,PRINT           PRINT HEADING
         BAL   R14,SKIP            PRINT A BLANK LINE
         LA    R8,16*CATEL(R7)     LOAD CAT END ADDR
         BAL   R14,DUMPRG          DUMP CAT
         SPACE
*        DUMP HOT I/O STATUS COLLECTION DATA (SCD)
         SPACE
IOS090   EQU   *
         LA    R0,CSTSCDP          LOAD 1ST SCD ADDR
         BAL   R14,ACCESS          CHECK ADDRESS AVAILABILITY
         LTR   R15,R15             IS ADDRESS AVAILABLE
         BNZ   IOSCMPL             IF NOT QUIT
         LR    R1,R0               COPY TO USABLE REG
         L     R7,0(R1)            LOAD START OF SCD
         BAL   R14,SKIP            SKIP A BLANK LINE
         LA    R1,IOSHDR10         LOAD HEADING ADDR
         LA    R2,L'IOSHDR10       LOAD HEADING LENGTH
         BAL   R14,PRINT           PRINT HEADING
         BAL   R14,SKIP            PRINT A BLANK LINE
         LA    R8,16*SCDLN(R7)     LOAD SCD END ADDR
         BAL   R14,DUMPRG          DUMP SCD
         SPACE
*        DUMP ILK2 IF DEBUG SPECIFIED
         SPACE
         TM    FLAG,DEBUGFG        IS DEBUG SPECIFIED
         BZ    ILK2CMPL            IF NOT SKIP DUMP OF ILK2 & ALL UCBS
         BAL   R14,SKIP            PRINT BLANK LINE
         LA    R1,IOSHDR8          LOAD MSG ADDR
         LA    R2,L'IOSHDR8        LOAD MSG LENGTH
         BAL   R14,PRINT           PRINT LINE
         L     R7,WORK             LOAD START OF DUMP'S ILK2 TABLE
         L     R8,ILK2ENDA         GET END OF ILK2 TABLE ADDRESS
         S     R8,WKADR            FIND BYTES IN ILK2 TABLE BUF
         LA    R8,2(R7,R8)         GET END OF DUMP'S ILK2 TAB ADDR
         BAL   R14,SKIP            PRINT BLANK LINE
         BAL   R14,DUMPRG          DUMP ILK2 TABLE
ILK2CMPL EQU   *
         SPACE
*        ALL OUTPUT IS COMPLETE RETURN TO CALLER
         SPACE
IOSCMPL  BAL   R14,SKIP            PRINT A BLANK LINE
         LA    R1,MSGEND
         LA    R2,L'MSGEND
         BAL   R14,PRINT           PRINT HEADING
         BAL   R14,SKIP            PRINT A BLANK LINE
         SPACE
IOS460   TM    FLAG,GOTBUF         WAS GETMAIN DONE
         BZ    IOS500              IF NOT SKIP FREEMAIN
         L     R0,WKSIZE           AMOUNT GOTTEN
         L     R1,WKADR            WHERE GOTTEN
         FREEMAIN R,LV=(R0),A=(R1) RETURN IT
IOS500   L     R13,SAVEAREA+4      LOAD PREVIOUS SAVEAREA ADDRESS
         RETURN  (14,12)           RETURN TO CALLER
*
*        ERROR RETURNS
*
ERROR    LA    R1,MSGQUIT          LOAD ERROR MSG ADDR
         LA    R2,L'MSGQUIT        LOAD ERROR MSG LENGTH
         BAL   R14,PRINT           PRINT IT
         B     IOS460              GO TERMINATE
         SPACE
NOCVT    LA    R1,MSGNOCVT         LOAD ERROR MSG ADDR
         LA    R2,L'MSGNOCVT       LOAD ERROR MSG LENGTH
         BAL   R14,PRINT           PRINT IT
         B     IOS460              GO TERMINATE
         SPACE
NOBUF    LA    R1,MSGNOBUF         LOAD ERROR MSG ADDR
         LA    R2,L'MSGNOBUF       LOAD ERROR MSG LENGTH
         BAL   R14,PRINT           PRINT IT
         B     IOS500              GO TERMINATE
         EJECT
**********************************************************
*
*     11/04/75
*
*   NAME- DUMPRG (DUMP RANGE) MODULE IS COMMON CONVERT
*           AND PRINT MODULE FOR AMDPRDMP EXIT ROUTINES.
*
*   FUNCTION- FORMATS AND PRINTS OUTPUT LINES.
*          DEPENDING ON ENTRY POINT USED ON REFERENCING
*          THE MAIN EXIT ROUTINE MODULE THIS ROUTINE WILL
*          FORMAT THE OUTPUT FOR A STANDARD PRINT FIELD
*         OF 121 CHARACTERS OR FOR A TERMINAL (3270) TYPE
*         DISPLAY OF 80 CHARACTERS.
*
*   PARAMETERS-
*         PRDMPARM IS CURRENTLY REQUIRED TO BE
*         DEFINED OUTSIDE THE DUMPRG AREA. PRDMPARM GIVES
*         THE POINTER TO THE PRINT DUMP ROUTINES.
*         THE DUMP RANGE AND TYPE ARE PASSED IN
*         REGISTERS:
*         INPUT R6 HI BYTE AS REQUIRED BY DUMP
*              R7 STARTING ADDRESS
*              R8 ENDING ADDRESS OR LENGTH IF HI BIT
*              IS ON.
*
*   EXTERNAL ROUTINES- CONTAINS MAKECHIN DSECT AND
*                USES EBCDIC TRANSLATION TABLE MACRO
*                  AHBTREBC.
*
*          THE MAKECHIN DSECT IS AT THE END OF THE
*         DUMPRG ROUTINE. IF DUMPRG IS ASSEMBLED WITH
*         ANOTHER PROGRAM BE CERTAIN NO DATA AREAS ARE
*         ASSEMBLED AFTER IT AS THE MAKECHIN DSECT IS
*         NOT CLOSED AND ALL DATA AREAS FOLLOWING WILL
*         BE ASSUMED PART OF THE DSECT.
*
*   EXTERNAL REFERENCES- THE FOLLOWING ARE REQUIRED TO
*                BE DEFINED IN THE CODE OF THE EXIT
*                THAT USES THE DUMPRG ROUTINE:
*          REGISTER USAGE
*             WORK  EQU R3
*             LINE  EQU R4
*             WORDS EQU R5
*             LINEPOS EQU R9
*             DATA  EQU  R10
*
*          AMDPRDMP PARAMETER FIELDS:
*             PRDMPARM  DS  F  FIELD WHERE R1 IS
*                  STORED UPON ENTRY TO MAIN PROGRAM
*                  WHICH POINTS TO AMDPRINT AREA.
*             PRDMASID  EQU 4 ASID # IF USED.
*             BUFFER    EQU 8 PRINT LINE BUFFER ADDRESS
*             PRINTIT   EQU 12 PRINT ROUTINE ADDRESS
*             PRDCVT    EQU 16 CVT ADDRESS
*             MEMACC    EQU 20 STORAGE ACCESS RTN ADR.
*
*
DUMPRG   SAVE  (14,12)             SAVE ALL REGS
         LA    R15,DUMPRGS         LOAD SAVEAREA ADDRESS
         ST    R13,DUMPRGS+4       SAVE PREVIOUS SAVE AREA ADDRESS
         ST    R15,8(R13)          CHAIN SAVEAREAS
         LR    R13,R15             UPDATE SAVEAREA POINTER
         LTR   R8,R8               LENGTH?
         BP    LENGTHX             NO, 8 HAS END ADDRESS
         BZ    DUMPRG              ZERO LENGTH IGNORE CALL
         LA    R8,0(R7,R8)         PUT END ADDR IN 8
         SPACE
LENGTHX  EQU   *
         LA    R7,0(R7)            CLEAR HI BYTES
         LA    R8,0(R8)
         ST    R7,LINEADDR         SAVE BEGIN ADDR
         TM    ADPLFLAG,ADPLIPCS   IS MODULE LOADED BY IPCS
         BNO   SET121              NO- 121 CHAR PRINTER
         NI    LINEADDR+3,X'F0'    MAKE MULT OF X'10'
         B     CONT80              CONTINUE WITH 80 CHAR
SET121   NI    LINEADDR+3,X'E0'    MAKE MULTIPLE OF X'20'
CONT80   EQU   *
         SRL   R7,2                GET FULLWORD BDRY
         SLL   R7,2                FOR BEGIN ADDR
         LR    R3,R7
         S     R3,LINEADDR         AMOUNT NOT WANTED AT START
         LA    R5,4                NORMAL NUM WORDS
         L     R9,ADPLBUF          LOAD ADDRESS OF OUTPUT BUFFER
         LA    R4,50(R9,R3)        WHERE TO START EBCDIC (80 CHAR.)
         TM    ADPLFLAG,ADPLIPCS   IS MODULE LOADED BY IPCS
         BO    YES80               YES
         LA    R4,85(R9,R3)        WHERE TO START EBCDIC 121 CHAR.
         LA    R5,4(,R5)           ADD 4 MORE WORDS TO LINE
YES80    EQU   *
         SRL   R3,2                WORDS LEFT BLANK AT FRONT
         SR    R5,R3               NUM FOR FIRST LINE
         MH    R3,H9               CALC WHERE TO START SHOWING STUF
         LA    R9,8(R3,R9)         THIS IS WHERE
         SLR   R3,R3
         BCTR  R3,0                FORCE A PASS THRU PRDMP
         ST    R3,NXTGET           BUFFER OBTAIN ON FIRST PASS
DOLINE   L     R3,LINEADDR         ADDR SHOWING ON LEFT OF LINE
*                                  WE WILL DO NEXT
         LA    R3,X'10'(R3)        END OF THAT LINE
         TM    ADPLFLAG,ADPLIPCS   IS MODULE LOADED BY IPCS
         BO    ONLY80              YES
         LA    R3,X'10'(,R3)       ADD 16 MORE FOR END OF LINE
ONLY80   EQU   *
         CR    R3,R8               GR THAN END ADDR
         BNH   WHOLINE             NO, WANT ENTIRE LINE
         SR    R3,R8               HOW MUCH LESS THAN FULL LINE
         SRL   R3,2                FULLWORD BDRY
         SR    R5,R3               THIS MANY LESS WORDS ON THIS LN
         BNP   DUMPRET             NONE? OOPS
WHOLINE  C     R7,NXTGET           DO WE HAVE DATA IN BUFFER ALRDY
         BL    FORMIT              YUP
         LA    R3,X'800'(R7)       WANT TO OBTAIN 2 K WORTH OF DATA
         N     R3,MASK2K           ROUND
         ST    R3,NXTGET           THIS IS WHERE NEXT OBTAIN WILL
*                                  BE NEEDED
         LR    R0,R7               ADDR FOR THIS CALL TO ACCESS MEM
         BAL   R14,ACCESS          GO ACCESS ADDRESS
         LTR   R15,R15             OK?
         BNZ   DUMPERR
         LR    R6,R0               ADDR OF THE DATA IN A BUFFER
FORMIT   LR    R3,R5               NUM WORDS ON THIS LINE
         SLL   R3,2                NUM BYTES
         BCTR  R3,0                DECREMENT FOR EX ISN
         EX    R3,MOVEDATA         MOVE DATA TO RIGHT AREA
         EX    R3,TRDATA           BLANK OUT UNPRINTABLE
         L     R4,ADPLBUF          ADDR OF THE BUFFER
         UNPK  0(7,R4),LINEADDR+1(4)    PUT IN ADDR OF THE DATA
         TR    0(6,R4),TRTAB
         MVI   6(R4),C' '
         TM    ADPLFLAG,ADPLIPCS   IS MODULE LOADED BY IPCS
         BNO   IS121               NO
         MVI   66(R4),C'*'         PUT IN * AROUND
         MVI   49(R4),C'*'         EBCDIC
         B     UNPKIT
IS121    MVI   117(R4),C'*'        PUT IN * AROUND EBDIC
         MVI   84(R4),C'*'         START OF EBCDIC
UNPKIT   UNPK  0(9,R9),0(5,R6)     PUT THE DATA IN THE BUF
         TR    0(8,R9),TRTAB       TRANSLATE
         MVI   8(R9),C' '          INSERT BLANK
         LA    R9,9(R9)            SPOT FOR NEXT WORK
         LA    R6,4(R6)            ADDR OF NEXT DATA WORD
         BCT   R5,UNPKIT           DO IT AGAIN
         BAL   R14,SKIP            GO PRINT FORMATTED LINE
         L     R7,LINEADDR         ADDR LINE JUST DONE
         LA    R7,X'10'(R7)        NEXT LINE ADDR
         LA    R5,4                MIN. NUMBER ON LINE DISPLAYED
         TM    ADPLFLAG,ADPLIPCS   IS MODULE LOADED BY IPCS
         BO    ISOK80              YES
         LA    R7,X'10'(,R7)       UP TO NEXT LINE
         LA    R5,4(,R5)           DOUBLE LINE SIZE
ISOK80   EQU   *
         ST    R7,LINEADDR         SAVE IT
         CR    R7,R8               END YET
         BNL   DUMPRET             YES, LEAVE
         L     R9,ADPLBUF          ADDR NEW BUFFER
         LA    R9,8(R9)            START OF WHERE TO PUT DATA
         TM    ADPLFLAG,ADPLIPCS   IS MODULE LOADED BY IPCS
         BNO   DO121L              NO
         LA    R4,42(R9)           WHERE TO START EBCDIC
         B     DOLINE              DO NEXT LINE
DO121L   LA    R4,77(,R9)          START OF EBCDIC
         B     DOLINE
         SPACE
MOVEDATA MVC   0(0,R4),0(R6)       MOVE IN ACTUAL DATA
TRDATA   TR    0(0,R4),EBCDIC      BLANK OUT NON PRINTABLE
*
*        ERROR RETURN FROM DUMPRG
*
DUMPERR  LA    R1,MSGQUIT          LOAD ERROR MSG ADDR
         LA    R2,L'MSGQUIT        LOAD ERROR MSG LENGTH
         BAL   R14,PRINT           PRINT IT
*
*        NORMAL RETURN FROM DUMPRG
*
DUMPRET  L     R13,DUMPRGS+4       LOAD PREVIOUS SAVEAREA ADDRESS
         RETURN  (14,12)           RETURN TO CALLER
         EJECT
*        GENERAL PRINT LINE SUBROUTINES
*
*        R1 CONTAINS PRINT LINE ADDR
*        R2 CONTAINS LINE LENGTH
*
PRINT    STM   R14,R1,PRTSAVE      SAVE USED REGS
         BCTR  R2,0                DECREMENT LENGTH FOR EX ISN
         L     R14,ADPLBUF         LOAD CURRENT BUFFER ADDR
         EX    R2,MOVEMSG          MOVE THE MESSAGE
         SPACE
PRINTX   LR    R1,R11              RESTORE PRDMP PARM REG
         L     R15,ADPLPRNT        LOAD PRDMP PRNT ROUTINE ADDR
         BALR  R14,R15
         LM    R14,R1,PRTSAVE      RESTORE
         BR    R14
         SPACE
MOVEMSG  MVC   0(0,R14),0(R1)
*
*        PRINTS A BLANK LINE OR LINE ALREADY IN BUFFER
*
SKIP     STM   R14,R1,PRTSAVE      SAVE USED REGS
         B     PRINTX              GO PRINT LINE IN BUFFER
         EJECT
*        THIS SUBROUTINE INTERFACES WITH PRDMPS ACCESS ROUTINE TO FETCH
*        THE VIRTUAL DATA FROM DUMP.
*
*        INPUT
*
*        R0 = VIRTUAL ADDRESS OF DATA DESIRED
*        R1 = ORIGINAL PARM ADDRESS
*        R14 = RETURN ADDRESS
*        R15 = ENTRY ADDRESS
*
*        OUTPUT
*
*        R0 = ADDRESS OF DATA DESIRED
*        R15 = RETURN CODE (0=DATA READ, 4=DATA NOT AVAILABLE)
         SPACE  1
ACCESS   ST     R14,ACCSAVE        SAVE RETURN ADDRESS
         LR     R1,R11             RESTORE PRDMP PARM REG
         L      R15,ADPLMEMA       LOAD PRDMP ACCESS ROUTINE ADDR
         BALR   R14,R15            GO LOAD REQUESTED PAGE.
         L      R14,ACCSAVE        RESTORE RETURN ADDRESS
         BR     R14                RETURN TO CALLER
         EJECT
         REGEQU
BLANK    EQU   C' '                DELIMITER
COMMA    EQU   C','                DELIMITER
STAR     EQU   C'*'                DELIMITER
SAVEAREA DS    18F                 AMDPRIOS SAVEAREA
DUMPRGS  DS    18F                 DUMP RANGE SUBROUTINE SAVEAREA
WORK     DS    F                   TEMP WORKAREA
ILK2LN   DS    F                   LENGTH OF ILK2 LENGTH IN BUFFER
ILK2TEMP DS    A                   LOGICAL ADDR OF ILK2 SEG 2
LFDSAVE  DS    2F
FDSAVE   DS    2F
PRTSAVE  DS    4A                  PRINT SUBROUTINE SAVE R14-R1
ACCSAVE  DS    A                   STOR ACCESS SUBROUTINE SAVE R14
PRDMPARM DS    A
ILK2ENDA DS    A                   END OF ILK2 TABLE BUF ADDR
LINEADDR DS    F                   TEMPORARY LINE POSITION
NXTGET   DS    F                   NEXT BUFFER POINTER
HALFMASK DC    F'65535'            HALF WORD MASK
UCBMASK  DC    F'65532'            UCB WORD MASK
PAGEMASK DC    X'00FFF000'         PAGE BOUNDARY MASK
MASK2K   DC    A(0-2048) '         2K PAGE BOUNDARY MASK
PARTPAGE DC    F'4095'             PARTIAL PAGE BOUNDARY MASK
SAVEIOQ  DC    A(0)                IOQ SAVEAREA ADDR
UCB1STAD DC    A(0)                DUMP ADDR OF 1ST UCB
IOSCOMAD DC    A(0)                DUMP ADDR OF IOSCOM
IOSEXAD  DC    A(0)                DUMP ADDR OF IOSCOM EXTENSION
LCHAD    DC    A(0)                DUMP ADDRESS OF LCH TABLE
LCHCNT   DC    F'0'                NUMBER OF LOGICAL CHANNELS
WKADR    DS    F                   ADDRESS OF WORKAREA
WKSIZE   DC    F'8192'             SIZE OF WORKING STORAGE
RKSIZE   DC    F'4096'             SIZE OF 1 DUMP RECORD
CHPATHLO DC    1F'0'               LOWEST PATH
CHPATHHI DC    1F'3'               HIGHEST PATH
IOREQ    DS    3F                  IOREQ HOLD AREA
FLAG     DC    X'00'               PROGRAM FLAG
DEBUGFG  EQU   X'80'               DEBUG FLAG
COMMFG   EQU   X'40'               DISPLAY ACTIVE TP REQUESTS
GOTBUF   EQU   X'20'               GETMAIN SUCCESSFUL
AIOHEAD  EQU   X'08'               ACTIVE I/O HEADING PRINTED
QIOHEAD  EQU   X'04'               QUEQED I/O HEADING PRINTED
UCBHEAD  EQU   X'02'               UCB HEADING PRINTED
H2       DC    H'2'                CONSTANT
H8       DC    H'8'                CONSTANT
H9       DC    H'9'                CONSTANT
DEBUG    DC    C'DEBUG'            PARM TO DUMP EXTRA DATA
COMM     DC    C'COMM'             PARM TO DISPLAY ACTIVE TP REQUESTS
ACTIVE   DC    C'ACTIVE'           I/O TYPE
QUEUED   DC    C'QUEUED'           I/O TYPE
TRTAB    EQU   *-C'0'              HEX TRANSLATE TABLE
         DC    C'0123456789ABCDEF'
         LTORG
**                                                                   **
**     DECLARE A TRANSLATE TABLE TO TRANSFORM EBCDIC CHARACTERS WITH **
EBCDIC   EQU   *,256,C'C'           TRANSLATE TABLE
         DC    193C' '
         DC    C'ABCDEFGHI'
         DC    7C' '
         DC    C'JKLMNOPQR'
         DC    8C' '
         DC    C'STUVWXYZ'
         DC    6C' '
         DC    C'0123456789'
         DC    6C' '
         EJECT
*        EXIT ROUTINE PRINTER LINES
         SPACE
IOSHDR   DC    C'           IOS CONTROL BLOCKS'
MSGEND   DC    C'           END OF IOS DUMP '
IOSHDR1  DC    C' UCBS BY PRIME DEVICE ADDRESS SEQUENCE'
IOSHDR2  DC    C' IOS COMMUNICATION AREA AND EXTENSION'
IOSHDR3  DC    C' IOS LOGICAL CHANNEL QUE TABLE'
IOSHDR4  DC    C' ACTIVE I/O REQUESTS IOQ/IOSB BY PRI DEV SEQUENCE'
IOSHDR5  DC    C' QUEUED I/O REQUESTS IOQ/IOSB BY LOG CHAN SEQUENCE'
IOSHDR6  DC    C' CHANNEL PATH TABLE'
IOSHDR7  DC    C' CHANNEL SET TABLE'
IOSHDR8  DC    C' ILK2 TABLE'
IOSHDR9  DC    C' CHANNEL AVAILABILITY TABLE'
IOSHDR10 DC    C' HOT I/O SCD TABLE'
IOSHDR11 DC    C' ACTIVE I/O XXX'
DEVNAME  EQU   *-3,3               UCB NAME
IOTYPE   EQU   IOSHDR11+1,6        I/O REQUEST TYPE
IOSHDR12 DC    C' UCB XXX'
UNAME    EQU   *-3,3               UCB NAME
IOSHDR13 DC    C' ACTIVE COMMUNICATION I/O SUPPRESSED'
MSGQUIT  DC    C'ERROR ACCESSING DATA IN DUMP'
MSGNOCVT DC    C'CVT NOT ACCESSABLE NO IOSDATA'
MSGNOBUF DC    C'GETMAIN FAILED FOR WORKING STORAGE'
         EJECT
MAKECHIN DSECT ,
*
*              DESCRIBES STATUS OF CHAIN  TO START
*              AND DURING THE CHAIN DUMP
*
MCINDIR  DS    X                       NUMBER OF INDIRECTS
*                                       TO BE APPLIED TO THE STARTING
*                                       ADDRESS TO FIND FIRST MEMBER
*                                       OF THE CHAIN
MCSTART  DS    AL3                     START OF FIRST MEMBER
MCSTARTR DS    A                       START OF FIRST MEMBER OF CHAIN
*                                       AFTER INDIRECT ADDRESSING DONE
MCNEXT   DS    A                       DISPLACEMENT INTO A CHAIN
*                                       MEMBER OF ITS POINTER
*                                       TO THE NEXT MEMBER
MCNXTMOD DS    A                       TO BE ADDED TO NEXT PTR
*                                       VALUE TO FIND THE NEXT
*                                       MEMBER OF THE CHAIN
*                                      NOTE - IF HW PTRS THEN THIS
*                                       IS THE BASE FOR THE HW
*                                       DISPLACEMENTS
MCLEN    DS    A                       LENGTH OF A MEMBER
MCEND    DS    A                       ADDRESS OF LAST
*                                       MEMBER OF CHAIN
*                                       ALSO ADDRESS OF 0 OR
*                                       RAPING CHAIN WILL STOP IT
MCFLONM  DS    X                       MASK OF BITS WHICH
*                                       MUST BE ON TO SELECT A MEMBER
MCFLON   DS    AL3                     DISPLACEMENT INTO MEMBER
*                                       OF FLAG FOR BITS ON
MCFLOFFM DS    X                       BITS WHICH MUST BE OFF
MCFLOFF  DS    AL3                     DISPLACEMENT INTO MEMBER
*                                       OF BITS OFF FLAG
MCCURR   DS    A                       CURRENT MEMBER OF CHAIN
MCFLAG   DS    X                       FLAG
MCHW     EQU   X'80'                   NEXT PTR IS HALFWORD
MC3B     EQU   X'40'                   NEXT PTR IS 3 BYTE ADDR
MCFW     EQU   X'20'                   NEXT PTR IS FULLWORD PTR
MCREAL   EQU   X'10'                   MEMBERS ARE IN REAL CORE
MCBDRY   DS    X                       WORK AREA
MCASID   DS    H                       ASID CONTAINING CHAIN
*                                       OR 0 IF CURRENT SPACE
MCLEND   EQU   *-MAKECHIN              LENGTH OF MAKECHAIN
         EJECT
         IHAABDPL
ADPLIPCS EQU   X'10'               MODULE LOADED BY IPCS
         EJECT
         IECDIOCM
IOSCOMLN EQU   *-IOCOM             LENGTH OF IOS COMMON
         EJECT
         IECDIOCX
IOSEXLN  EQU   *-IOX               LENGTH OF IOS COMMON EXTENSION
         EJECT
         IECDLCH
         EJECT
         IECDIOQ
         EJECT
         IECDIOSB
         EJECT
         IECDCST
         EJECT
         IECDCAT
         EJECT
*        IECDSCD
SCD      DSECT
********************************************************************
*                                                                  *
* CONTROL BLOCK NAME - SCD                                         *
*                                                                  *
* DESCRIPTIVE NAME - HOT I/O STATUS COLLECTION DATA                *
*                                                                  *
* MAPPING MACRO NAME - IECDSCD                                     *
*                                                                  *
* FUNCTION -                                                       *
*   THE SCD IS USED TO MAINTAIN INFORMATION ON UNSOLICITED STATUS  *
*   AND INTERRUPTS FOR THE PURPOSE OF DETERMINING IF HOT I/O IS    *
*   OCCURRING. THERE IS ONE SCD PER CHANNEL PER PROCESSOR. THE     *
*   SCDS ARE INDEXED BY CHANNEL NUMBER.                            *
*                                                                  *
* CHANGE ACTIVITY - NONE                                           *
*   A000000-999999                                         @ZA30350*
*                                                                  *
********************************************************************
SCDCPUID DS    H                   CPU OF HOT CHANNEL OR DEVICE
SCDADDR  DS    H                   CHANNEL/DEVICE ADDRESS
SCDFLG1  DS    X                   FLAG BYTE 1
SCDRECUR EQU   X'80'               HOT I/O RECURSION INDICATOR
SCDRSCDE DS    0XL2                HOT I/O DETECTION FLAGS
SCDRSC1  DS    X                   DETECTION FLAG BYTE 1
SCDTMOUT EQU   X'80'               TIME OUT HOT I/O
SCDAVAIL EQU   X'40'               AVAILABILITY INTERRUPT
SCDUNSOL EQU   X'20'               UNSOLICITED STATUS
SCDNOSYS EQU   X'10'               DEVICE NOT SYSGENED
SCDHOTD  EQU   X'08'               IF SET-HOT DEVICE--OTHERWISE-HOT
*                                    HOT CHANNEL
SCDINVDV EQU   X'04'               CHANNEL ERROR AND INVALID DEVICE
*                                    ADDR
SCDCUERR EQU   X'02'               CHANNEL ERROR-CONTROL UNIT
*                                    PROBABLE CAUSE
SCDCHERR EQU   X'10'               CHANNEL ERROR-CONTROL UNIT NOT
*                                    PROBABLE CAUSE
SCDRSC2  DS    X                   RESERVED
         DS    X                   RESERVED
SCDCSWST DS    XL2                 CSW STATUS
         DS    XL2                 RESERVED
SCDCNTS  DS    0XL4                HOT I/O COUNTERS
SCDRCNT  DS    H                   STATUS REPEAT COUNT
SCDTRCNT DS    H                   TIMEOUT REPEAT COUNT
SCDTIME  DS    0XL8                TIME OF STATUS
SCDTIME1 DS    F                   VALUE FOR CALCULATING SECONDS
*                                    ELAPSED
SCDTIME2 DS    F                   2ND WORD OF TIME VALUE
         DS    2F                  RESERVED
SCDLN    EQU   *-SCD               LENGTH OF 1 SCD ENTRY
         EJECT
UCB      DSECT
         IEFUCBOB PREFIX=YES,LIST=YES
         EJECT
CVT      DSECT
         CVT   LIST=YES
         END
