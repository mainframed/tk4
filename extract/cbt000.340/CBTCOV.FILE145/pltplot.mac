*          DATA SET PLTPLOT    AT LEVEL 004 AS OF 15/04/82
         TITLE 'PLTPLOT - PLOT INTERFACE ROUTINE FOR PAGEPLOT SYSTEM'
***********************************************************************
*                                                                     *
*    NAME:     PLTPLOT (ENTRY NAME IS PLOT)                           *
*                                                                     *
*    FUNCTION:                                                        *
*              TO PROVIDE A USER INTERFACE TO THE PAGEPLOT SYSTEM     *
*              WHICH MATCHES THE CALCOMP INTERFACE.  THE ONLY         *
*              DIFFERENCE IS THAT AN ATTEMPT TO RESET THE ORIGIN TO   *
*              A LOCATION OUTSIDE THE PLOT AREA CAUSES THE CURRENT    *
*              PAGE TO BE PRINTED AND THE ORIGIN TO BE SET TO THE     *
*              LOWER LEFT CORNER OF A NEW PAGE.                       *
*                                                                     *
*    PARAMETERS:                                                      *
*              1) 4BYTE FLOAT - THE X COORDINATE, IN INCHES FROM      *
*                 THE CURRENT REFERENCE POINT(ORIGIN) OF THE POSITION *
*                 TO WHICH THE IMAGINARY PEN IS MOVED.                *
*              2) 4BYTE FLOAT - THE Y COORDINATE AS ABOVE             *
*              3) 4BYTE BINARY - A CONTROL VARIABLE AS FOLLOWS:       *
*                 +2  THE LOGICAL PEN IS DOWN (A LINE WILL BE DRAWN)  *
*                 +3  THE LOGICAL PEN IS UP (NO PRINTED OUTPUT)       *
*                 -2  THE LOGICAL PEN IS DOWN (A LINE WILL BE DRAWN)  *
*                     AND THE TARGET COORDINATE BECOMES THE ORIGIN    *
*                 -3  NO LINE IS DRAWN, THE X AND Y VALUES BECOME     *
*                     THE NEW ORIGIN.  THIS IS TYPICALLY USED WITH    *
*                     999 VALUES IN THE FIRST TWO PARAMETERS TO FORCE *
*                     A NEW PLOT PAGE                                 *
*                 999 THE FIRST TWO PARAMETERS ARE IGNORED, THE       *
*                     CURRENT PAGE IS PRINTED, THE OUTPUT FILE        *
*                     CLOSED AND ALL RESOURCES RELEASED.              *
*                                                                     *
*    OUTPUT:                                                          *
*              THE CURRENT PLOT PAGE MAY BE PRINTED.                  *
*                                                                     *
*    PROCESSING:                                                      *
*              IF THE PRINT FILE IS NOT OPEN, PLOTS WILL BE CALLED    *
*                TO ESTABLISH THE ENVIRONMENT                         *
*              THE LOGIC IS DRIVEN BY THE VALUES IN THE PARAMETERS    *
*              AS DESCRIBED ABOVE AND IN COMMENTS THROUGHOUT THE      *
*              CODE                                                   *
*                                                                     *
***********************************************************************
         EJECT
         PRINT NOGEN
PLOT ASMENTRY  SAVE=REUS,DSA=120
*                                  R10 = BASE REGISTER
     L         R11,=V(PLTEXT)
     USING     @GLOBAL,R11         R11-> GLOBAL VARIABLES
     IF        CLI,@SASFLAG,C'1',E ??    IF NULL CALL TO PLOT
       MVI     @SASFLAG,C' '             RESET @SASFLAG
       B       EXIT
     ENDIF
     LM        R2,R4,0(R1)         R2 -> X
     IF        CLI,@OPEN,C'1',NE   ??    IF NO ENVIRONMENT
       CALL    PLOTS
       IF      CLI,@OPEN,C'1',NE   ??    IF OPEN FAILED
         B     EXIT
       ENDIF
     ENDIF
*                                  R3 -> Y
     STD       D0,D0SAVE                 SAVE REGISTER D0
     STD       D2,D2SAVE                 SAVE REGISTER D2
     STD       D4,D4SAVE                 SAVE REGISTER D4
     STD       D6,D6SAVE                 SAVE REGISTER D6
     L         R4,0(R4)            R4  = IPEN
     ST        R4,IPEN
     IF        C,R4,=F'999',E      ??    IF END OF PROCESSING
       CALL    PLTPAGE
       LA      R5,@DCB             R5 -> DCB
       CLOSE   ((5))
**** FREE CORE FOR PAGE BUFFERS
       L       R0,@CORE            R0  = LENGTH TO FREE
       LA      R7,@PAGEC           R7 -> ADDR OF AREA
       PRINT   GEN
       FREEMAIN EU,LV=(R0),A=(R7),SP=12
       PRINT   NOGEN
       MVI     @OPEN,C'0'
       B       EXIT
     ENDIF
     LE        E0,0(R2)            E0  = X
     LE        E2,0(R3)            E2  = Y
     ME        E0,@FACTOR          E0  = X * CURRENT FACTOR
     ME        E2,@FACTOR          E2
     AE        E0,@XORG            E0  = X IN INCHES ON PAPER
     AE        E2,@YORG            E2  = Y IN INCHES ON PAPER
     IF        LTER,E0,E0,M        ??    IF X PAGE VALUE NEGATIVE
       LA      R0,39
       LA      R1,=CL39'NOTE - NEGATIVE X VALUE FORCED NEW PAGE'
       CALL    PLTMSG
       CALL    PLTPAGE
       B       EXIT
     ENDIF
     IF        LTER,E2,E2,M        ??    IF Y PAGE VALUE NEGATIVE
       LA      R0,39
       LA      R1,=CL39'NOTE - NEGATIVE Y VALUE FORCED NEW PAGE'
       CALL    PLTMSG
       CALL    PLTPAGE
       B       EXIT
     ENDIF
     STE       E0,@X               E0    SAVE
     STE       E2,@Y               E2    SAVE
     LPR       R4,R4
     CASE      CH,R4,=H'3',E       ??    PEN UP MOVE
       STE     E0,@XLAST           E0    MARK NEW POSITION
       STE     E2,@YLAST           E2
     WHEN      =H'2'                     PEN DOWN MOVE
       MVI     SWITCH,X'00'              RESET ERROR FLAG
       MVI     @DATA,C'1'
       BAL     R14,DRAW                  GO DRAW THE LINE
       IF      CLI,SWITCH,X'FF',E  ??    IF LINE OUTSIDE PAGE
       SR      R1,R1               R1 =  0
         IF    C,R1,@CNTRL,E       ??    IF COUNTER EQUAL 0
           LA  R0,39
           LA  R1,=CL39'NOTE - LINE EXTENDS BEYOND EDGE OF PAGE'
           CALL PLTMSG
         ENDIF
         L     R1,@CNTRL            R1 = LINE ERROR COUNTER
         LA    R1,1(R1)                  INCREMENT COUNTER
         ST    R1,@CNTRL
       ENDIF
       STE     E0,@XLAST                 MARK NEW POSITION
       STE     E2,@YLAST
     WHEN      ELSE                      INVALID IPEN VALUE
       LA      R0,44
       LA      R1,=CL44'ERROR - INVALID IPEN VALUE - PAGE TERMINATED'
       CALL    PLTMSG
       CALL    PLTPAGE
       B       EXIT
     ENDCASE
     L         R4,IPEN
     IF        LTR,R4,R4,M         ??    IF   NEW ORIGIN DEFINED
       CASE    CE,E0,@PAGEW,H            WHEN X OUTSIDE PAGE BOUND
         MVI   SWITCH,X'FF'              SET FLAG
       WHEN    CE,E2,@PAGEH,H            WHEN Y OUTSIDE PAGE BOUND
         MVI   SWITCH,X'FF'              SET FLAG
       WHEN    ELSE                      ORIGIN INSIDE PAGE
         MVI   SWITCH,X'00'
         STE   E0,@XORG                  SET NEW ORIGIN
         STE   E2,@YORG
       ENDCASE
       IF      CLI,SWITCH,X'FF',E  ??    IF ORIGIN OUTSIDE PAGE
         CALL  PLTPAGE                   MOVE ON TO NEW PAGE
       ENDIF
     ENDIF
EXIT LD        D0,D0SAVE                 RESTORE REGISTER D0
     LD        D2,D2SAVE                 RESTORE REGISTER D2
     LD        D4,D4SAVE                 RESTORE REGISTER D4
     LD        D6,D6SAVE                 RESTORE REGISTER D6
     ASMEXIT   RC=0
     EJECT
DRAW     DS    0H
*
*    THIS SUBROUTINE DRAWS A LINE FROM(@XLAST,@YLAST) TO (@X,@Y)
*    BY SETTING BITS IN THE MAP FORM OF THE PAGE.
*
*    PARAMETERS:
*              R14 - RETURN ADDRESS
*              E0  - @X VALUE
*              E2  - @Y VALUE
*
*    REGISTER USAGE
*              R15 - RETURN ADDR IN CALL TO PSET
*
*   FOR PROGRAMMING CONVENIENCE WE WILL CALCULATE A LO & HI VALUE
*   FOR EACH CO-ORDINATE SO THAT A POSITIVE INCREMENT MAY BE USED
*
*   SET XLO AND XHI
*
*   SPECIAL CASE - ENSURE LAST POINT IS SET
     BAL       R15,PSET
     IF        CE,E0,@XLAST,L      ??    IF X LESS THAN LAST X
       STE     E0,XLO
       MVC     XHI,@XLAST
     ELSE
       MVC     XLO,@XLAST
       STE     E0,XHI
     ENDIF
*
*    SET YLO AND YHI
*
     IF        CE,E2,@YLAST,L      ??    IF Y LESS THAN LAST Y
       STE     E2,YLO
       MVC     YHI,@YLAST
     ELSE
       MVC     YLO,@YLAST
       STE     E2,YHI
     ENDIF
*
*   SPECIAL CASE TEST
*
     IF        CE,E2,@YLAST,E      ??    IF HORIZONTAL LINE
       LE      E0,XLO              E0    X TO INCREMENT
*                                  E2   Y CONSTANT
       DOWHILE CE,E0,XHI,NH              STEP ALONG X AXIS
         BAL   R15,PSET                  SET POINT
         AE    E0,@XINC            E0    NEXT POINT
       ENDDO
       LE      E0,@X               E0    RESTORE
       BR      R14                       RETURN
     ENDIF
*
*   SPECIAL CASE TEST
*
     IF        CE,E0,@XLAST,E      ??    IF VERTICAL LINE
*                                  E0   Y CONSTANT
       LE      E2,YLO              E2    Y TO INCREMENT
       DOWHILE CE,E2,YHI,NH              STEP UP Y AXIS
         BAL   R15,PSET                  SET POINT
         AE    E2,@YINC            E2    NEXT POINT
       ENDDO
       LE      E2,@Y               E2    RESTORE
       BR      R14                       RETURN
     ENDIF
*
*   GENERAL CASE
*
*   CALCULATE SLOPE  A=(@YLAST-@Y)/(@XLAST-@X)
*
     LE        E6,@YLAST           E6
     SER       E6,E2
     LE        E4,@XLAST           E4
     SER       E4,E0               E4
     DER       E6,E4               E6  = SLOPE
     STE       E6,A                E6    STORE A
*
*   Y=AX+B ==> B=Y-AX  ==> B=@YLAST-(A*@XLAST)
*
     LE        E4,@XLAST
     ME        E4,A                      (A*@XLAST)
     LE        E6,@YLAST
     SER       E6,E4               E6  = B
     STE       E6,B                E6    STORE B
*
*   THE FOLLOWING CODE WILL STEP ALONG EITHER THE X OR Y AXIS BY
*   PREDEFINED INCREMENTS (@XINC OR @YINC) AND SET POINTS IN THE
*   MAP.  A FUTURE ENHANCEMENT WOULD CALCULATE THE OPTIMAL INCREMENT
*   BASED ON THE MINIMUM SIZE AND SLOPE.
*
     LE        E6,A                E6  = A
     LPER      E6,E6               E6  = ABSOLUTE VALUE OF A
     IF        CE,E6,=E'1',NH      ??    IF 45 DEGREES OR LESS
*                             E0 - X
*                             E2 - Y
       LE      E0,XLO              E0    - XLO
*                             E6 - WORK
       DOWHILE CE,E0,XHI,NH              WHILE XLO <= XHI
         LE    E2,A                      *
         MER   E2,E0               E2    - ** Y=(A*XLO)+3
         AE    E2,B                      *
         BAL   R15,PSET                  SET POINT
         AE    E0,@XINC                  GET NEXT X
       ENDDO
       LE      E2,@Y               E2    RESTORE Y
       LE      E0,@X                     RESTORE X
       BR      R14                       RETURN
*
     ELSE      SLOPE                     OVER 45 DEGREES
*                             E0   X
*                             E2   Y
       LE      E2,YLO              E2    YLO
*                             E6   WORK
       DOWHILE CE,E2,YHI,NH              WHILE YLO <= YHI
         LER   E0,E2                     *
         SE    E0,B                E0    ** X=(YLO-B)/A
         DE    E0,A                      *
         BAL   R15,PSET                  SET POINT
         AE    E2,@YINC                  GET NEXT Y
       ENDDO
       LE      E0,@X                     RESTORE X
       LE      E2,@Y               E2    RESTORE Y
       BR      R14                       RETURN
     ENDIF
     EJECT
PSET     DS    0H
*
*    THIS SUBROUTINE SETS A SINGLE BIT IN THE PAGE MAP
*
*    PARAMETERS:
*              E0 - X-VALUE IN INCHES
*              E2 - Y-VALUE IN INCHES
*              R15- RETURN ADDRESS
*
*    REGISTER USAGE:
*              E6 - WORK REG FOR CONVERSION
*              R4 - R7 WORK REG
*
*
*  GET X AS AN INTEGER  VALUE IN PLOTTER INCREMENTS
*
     IF        CE,E0,XSET,NE       ??    IF X NOT SAME AS LAST CALL
       IF      CE,E0,@PAGEW,H      ??    IF OUTSIDE OF PAGE
         MVI   SWITCH,X'FF'              SET ERROR FLAG
         BR    R15                       RETURN
       ENDIF
       SWR     D6,D6               D6  = ZERO
       LER     E6,E0               E6    X VALUE
       ME      E6,@POINTX          E6  = X IN PLOTTER INCREMENTS
       AW      D6,=X'4E00000000000000'   ADD FUDGE
       STD     D6,DOUBLE                 SAVE IN TEMP
       L       R6,DOUBLE+4         R6  = RITE SIDE OF TEMP
       BNM     PSET1
       LCR     R6,R6
PSET1  ST      R6,XBIN             R6    SAVE FOR FUTURE
       STE     E0,XSET             E0    SAVE FOR FUTURE
     ELSE
       L       R6,XBIN
     ENDIF
*
*  GET Y AS AN INTEGER VALUE IN PLOTTER INCREMENTS
*
     IF        CE,E2,YSET,NE       ??    IF Y NOT SAME AS LAST CALL
       IF      CE,E2,@PAGEH,H      ??    IF OUTSIDE OF PAGE
         MVI   SWITCH,X'FF'              SET ERROR FLAG
         BR    R15                       RETURN
       ENDIF
       SWR     D6,D6               D6  = ZERO
       LER     E6,E2               E6    Y VALUE
       ME      E6,@POINTY          E6    Y IN PLOTTER INCREMENTS
       AW      D6,=X'4E00000000000000'   ADD FUDGE
       STD     D6,DOUBLE
       L       R5,DOUBLE+4
       BNM     PSET2
       LCR     R5,R5
PSET2  ST      R5,YBIN
       STE     E2,YSET
     ELSE
       L       R5,YBIN
     ENDIF
*                                  R5  = Y VALUE IN PLOTTER INCR
*                                  R6  = X VALUE IN PLOTTER INCR
     SR        R4,R4               R4  = 0
*                                  R5  = RASTER ROW OFFSET
     D         R4,=F'3'            R4  = 0(BOTTOM)1(MIDDLE)2(TOP)
*                                        OF CELL IN BYTE
*                                  R5  = ROW OFFSET IN MAP
     MH        R5,@PAGEX+2         R5  = BYTE OFFSET (START OF ROW)
     A         R5,@PAGEB           R5 -> START OF ROW IN MAP
     SR        R7,R7               R7  = ZERO
*                                  R6  = RASTER COLUMN OFFSET
     SRDL      R6,1                R6  = BYTE OFFSET IN ROW
     SRL       R7,29               R7  = 0(LEFT)OR 4(RITE) IN CELL
     AR        R5,R6               R5 -> BYTE IN MAP
     LA        R4,ORTABL(R4)       R4 -> A'Y' VALUE IN TABLE
     AR        R4,R7               R4 -> BYTE WITH BIT TO OR
     OC        0(1,R5),0(R4)             SET BIT IN MAP
     BR        R15                 R15   RETURN
     EJECT
         LTORG
*
*  STATIC VARIABLES FOR PLOT
*
*
*  STATIC VARIABLES FOR DRAW
*
XLO      DC    E'0'
XHI      DC    E'0'
YLO      DC    E'0'
YHI      DC    E'0'
A        DC    E'0'
B        DC    E'0'
*
*  STATIC VARIABLES FOR PSET
*
XBIN     DC    F'0'
YBIN     DC    F'0'
XSET     DC    E'0'
YSET     DC    E'0'
ORTABL   DS    0CL8
         DC    X'02082000'    LEFT OF CELL(BOTTOM, MIDDLE, TOP, UNUSED)
         DC    X'01041000'    RITE OF CELL(BOTTOM, MIDDLE, TOP, UNUSED)
DSA      DSECT
*
*  DYNAMIC AREAS FOR PLOT
*
SWITCH   DS    CL1             ERROR FLAG - SET IF VALUE OUTSIDE  PAGE
IPEN     DS    F
D0SAVE   DS    D
D2SAVE   DS    D
D4SAVE   DS    D
D6SAVE   DS    D
*
*  DYNAMIC AREAS FOR DRAW
*
*
*  DYNAMIC AREAS FOR PSET
*
DOUBLE   DS    D               TEMPORARY STORAGE
*
DSAEND   EQU   *
         EJECT
         COPY PLTGLOBL
         END   PLOT
