         MACRO
&NAME    DOWHILE
.**********************************************************************
.*                                                                    *
.*   NAME:               DOWHILE                                      *
.*                                                                    *
.*   FUNCTION:                                                        *
.*       TO IMPLEMENT THE DOWHILE STATEMENT IN ASSEMBLER              *
.*       IN CONJUNCTION WITH THE ENDDO MACRO                          *
.*                                                                    *
.*   PARAMETERS:    (1)  ASSEMBLER INSTRUCTION                        *
.*                  (2)  FIRST OPERAND OF INSTRUCTION                 *
.*                  (3)  SECOND OPERAND OF INSTRUCTION                *
.*                  (4)  COMPARISON OPERATOR                          *
.*                                                                    *
.*   USAGE:                                                           *
.*       THE CODE DELIMITED BY DOWHILE AND ENDDO IS EXECUTED WHILE    *
.*       THE COMPARISON SPECIFIED IN THE DOWHILE IS TRUE.  THE        *
.*       COMPARISON IS DONE AT THE BEGINNING OF THE LOOP.  THESE      *
.*       MACROS CAN BE NESTED UP TO 20 LEVELS.                        *
.*                                                                    *
.*   EXAMPLE:                                                         *
.*       DOWHILE CLI,BYTE,C'X',E                                      *
.*         (CODE TO EXECUTE WHILE BYTE='X')                           *
.*       ENDDO                                                        *
.*                                                                    *
.**********************************************************************
         GBLA  &KFQNIV,&KFQSEQ(20)
         GBLC  &KFQTYP(20),&KFQEND(20)
         GBLC  &KFQAA(20),&KFQBB(20)
         GBLC  &KFQCC(20),&KFQDD(20)
         LCLC  &BCOND                  INVERTED CONDITION
         LCLA  &ATIM,&AINX
         AIF   (&KFQNIV LT 20).OKLVL
         MNOTE 8,'TOO MANY NESTED MACROS - &KFQNIV '
         MEXIT
.OKLVL   ANOP
&KFQNIV  SETA  1+&KFQNIV
         AIF   (N'&SYSLIST EQ 4).ALLOP  ARE THERE FOUR OPERANDS
         DIAGNOS 10                     NO
         MEXIT
.ALLOP   ANOP                           YES
&KFQSEQ(&KFQNIV) SETA 1+&KFQSEQ(&KFQNIV)
&KFQTYP(&KFQNIV) SETC 'DOWHILE'
&KFQEND(&KFQNIV) SETC 'ZD&KFQNIV.E&KFQSEQ(&KFQNIV)'
&KFQCC(&KFQNIV) SETC  'ZD&KFQNIV.S&KFQSEQ(&KFQNIV)'
&KFQCC(&KFQNIV) DS    0H
         AIF   ('&SYSLIST(4)'(1,1) EQ 'N').BC
&BCOND   SETC  'N'.'&SYSLIST(4)'
         AGO   .BGEN
.BC      ANOP
&BCOND   SETC  '&SYSLIST(4)'(2,K'&SYSLIST(4)-1)
.BGEN    ANOP
&ATIM    SETA  N'&SYSLIST(3)           NUMBER OF LOOPS
         AIF   (&ATIM GT 1).LLIST
&NAME    &SYSLIST(1) &SYSLIST(2),&SYSLIST(3)
         B&BCOND &KFQEND(&KFQNIV)
         MEXIT
.LLIST   ANOP
.******************************************************
.* GENERATE ADDITIONAL BRANCHES IF AN OR IS SPECIFIED *
.******************************************************
&AINX    SETA  1                       OPERAND INDEX
.LLOOP   AIF   (&AINX GE &ATIM).ELOOP
         &SYSLIST(1) &SYSLIST(2),&SYSLIST(3,&AINX)
         B&SYSLIST(4) ZD&KFQNIV.D&KFQSEQ(&KFQNIV)
&AINX    SETA  &AINX+1                 NEXT OPERAND
         AGO   .LLOOP
.ELOOP   &SYSLIST(1) &SYSLIST(2),&SYSLIST(3,&AINX)
         B&BCOND &KFQEND(&KFQNIV)
ZD&KFQNIV.D&KFQSEQ(&KFQNIV) DS  0H
         MEND
