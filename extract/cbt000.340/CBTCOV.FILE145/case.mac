         MACRO
         CASE
.**********************************************************************
.*                                                                    *
.*   NAME:               CASE                                         *
.*                                                                    *
.*   FUNCTION:                                                        *
.*       TO IMPLEMENT THE CASE STATEMENT IN ASSEMBLER                 *
.*       IN CONJUNCTION WITH THE WHEN & ENDCASE MACROS                *
.*                                                                    *
.*   PARAMETERS:    (1)  ASSEMBLER INSTRUCTION                        *
.*                  (2)  FIRST OPERAND OF INSTRUCTION                 *
.*                  (3)  SECOND OPERAND OF INSTRUCTION                *
.*                  (4)  COMPARISON OPERATOR                          *
.*                                                                    *
.*   USAGE:                                                           *
.*       THE COMPARISON SPECIFIED IS PERFORMED AS THE FIRST CASE.     *
.*       THE FIRST, SECOND, AND FOURTH OPERANDS ARE PROPOGATED DOWN   *
.*       TO THE WHEN STATEMENTS.  THE WHEN STATEMENT CAN SPECIFY      *
.*       EITHER THE THIRD OPERAND ONLY TO PERFORM THE SAME COMPARISON *
.*       AS IN THE CASE STATEMENT, OR IT CAN SPECIFY THE COMPLETE     *
.*       COMPARISON OPERATION AS FOR THE CASE STATEMENT.              *
.*                                                                    *
.*   EXAMPLE:                                                         *
.*       CASE  CH,R15,=H'0',E                                         *
.*           (CODE TO EXECUTE IF R15=0)                               *
.*       WHEN  =H'4'                                                  *
.*           (CODE TO EXECUTE IF R15=4)                               *
.*       WHEN  (=H'8',=H'12')                                         *
.*           (CODE TO EXECUTE IF R15=8 OR R15=12)                     *
.*       WHEN  CLI,TESTBYTE,C'X',E                                    *
.*           (CODE TO EXECUTE IF TESTBYTE='X')                        *
.*       WHEN  ELSE                                                   *
.*           (CODE TO EXECUTE IF NONE OF THE ABOVE ARE TRUE)          *
.*       ENDCASE                                                      *
.*                                                                    *
.**********************************************************************
         GBLA  &KFQNIV,&KFQSEQ(20)
         GBLC  &KFQTYP(20),&KFQEND(20)
         GBLC  &KFQAA(20),&KFQBB(20)
         GBLC  &KFQCC(20),&KFQDD(20)
         LCLA  &ATIM,&AINX
         AIF   (N'&SYSLIST NE 4).ERR1
.****************************************
.*       MAINTAIN THE STRUCTURE STACK   *
.****************************************
         AIF   (&KFQNIV LT 20).OKDEPTH
         MNOTE '*** TOO MANY LEVELS IN STRUCTURE  -   &KFQNIV'
         MEXIT
.OKDEPTH ANOP
.***********************************************************
.*       SAVE OPERANDS FROM THE MACRO-STATEMENT            *
.***********************************************************
&KFQNIV   SETA  &KFQNIV+1           INCREMENT LEVEL
&KFQTYP(&KFQNIV) SETC  'CASE'       SAVE NAME OF CURRENT STRUCTURE
&KFQAA(&KFQNIV) SETC  '&SYSLIST(1)'     INSTRUCTION CODE
&KFQBB(&KFQNIV) SETC  '&SYSLIST(2)'     FIXED OPERAND
         AIF   ('&SYSLIST(4)'(1,1) EQ 'N').NEGCC
&KFQDD(&KFQNIV) SETC  'N&SYSLIST(4)'    INVERT COND. CODE
         AGO   .CCDONE
.NEGCC   ANOP
&KFQDD(&KFQNIV) SETC '&SYSLIST(4)'(2,K'&SYSLIST(4)-1) INVERT
.CCDONE  ANOP
&KFQSEQ(&KFQNIV) SETA 1+&KFQSEQ(&KFQNIV)    LABEL WITHIN LEVEL
&KFQEND(&KFQNIV) SETC 'ZC&KFQNIV.E&KFQSEQ(&KFQNIV)'
         AIF   (N'&SYSLIST(3) GT 1).LLIST
         &KFQAA(&KFQNIV)  &SYSLIST(2),&SYSLIST(3)
         B&KFQDD(&KFQNIV)   ZC&KFQNIV.L&KFQSEQ(&KFQNIV)
         MEXIT
.LLIST   ANOP
&ATIM    SETA  N'&SYSLIST(3)           NUMBER OF LOOPS
&AINX    SETA  1                       OPERAND INDEX
.******************************************************
.* GENERATE ADDITIONAL BRANCHES IF AN OR IS SPECIFIED *
.******************************************************
.LLOOP   AIF   (&AINX GE &ATIM).ELOOP
         &KFQAA(&KFQNIV) &SYSLIST(2),&SYSLIST(3,&AINX)
         B&SYSLIST(4) ZC&KFQNIV.D&KFQSEQ(&KFQNIV)
&AINX    SETA  &AINX+1                 NEXT OPERAND
         AGO   .LLOOP
.ELOOP   &KFQAA(&KFQNIV) &SYSLIST(2),&SYSLIST(3,&AINX)
         B&KFQDD(&KFQNIV)  ZC&KFQNIV.L&KFQSEQ(&KFQNIV)
ZC&KFQNIV.D&KFQSEQ(&KFQNIV) DS  0H
         MEXIT
.ERR1    MNOTE  8,'***  FOUR OPERANDS MUST BE SPECIFIED ***'
         MEND
