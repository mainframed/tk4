         MACRO
         LOOP  &TIMES=,&REG=0
.**********************************************************************
.*                                                                    *
.*   NAME:               LOOP                                         *
.*                                                                    *
.*   FUNCTION:                                                        *
.*       TO IMPLEMENT THE LOOP STATEMENT IN ASSEMBLER                 *
.*       IN CONJUNCTION WITH THE WHILE & ENDLOOP MACROS               *
.*                                                                    *
.*   PARAMETERS:    (1)  LOOP CONTROL, ONE OF THE FOLLOWING:          *
.*                       A. A REGISTER ENCLOSED IN BRACKETS           *
.*                       B. A DECIMAL  NUMBER                         *
.*                       C. A FULL WORD ADDRESS                       *
.*                       D. THE KEYWORD 'FOREVER'                     *
.*                  (2)  REGISTER TO USE IN LOOP CONTROL              *
.*                       IF LOOP CONTROL IS NOT A REGISTER            *
.*                      (DEFAULTS TO 0)                               *
.*                                                                    *
.*   USAGE:                                                           *
.*       THE CODE ENCLOSED BY LOOP AND LOOPEND IS EXECUTED THE NUMBER *
.*       OF TIMES SPECIFIED BY THE LOOP CONTROL (PARAMETER 1).  THE   *
.*       REGISTER SPECIFIED EITHER IN THE LOOP CONTROL OR PARAMETER   *
.*       2 IS USED IN A BCT INSTRUCTION TO SET UP THE LOOP (AN        *
.*       UNCONDITIONAL BRANCH IS GENERATED IF THE 'FOREVER' KEYWORD   *
.*       IS SPECIFIED).  IF THE CODE INCLUDES WHILE CLAUSES, THE      *
.*       COMPARISON SPECIFIED IS PERFORMED AT THE POSITION OF THE     *
.*       WHILE AND, IF FALSE, AN EXIT IS MADE FROM THE LOOP.          *
.*                                                                    *
.*   EXAMPLES:                                                        *
.*       LOOP  TIMES=(R5)                                             *
.*          (CODE TO EXECUTE R5 TIMES - R5 IS SET TO 0 BY LOOP)       *
.*       ENDLOOP                                                      *
.*                                                                    *
.*       LOOP  TIMES=FIVE,REG=R2                                      *
.*          (CODE TO EXECUTE A MAXIMUM OF FIVE TIMES)                 *
.*       WHILE CLI,BYTE,(C'X',C'Y'),E                                 *
.*          (CODE TO EXECUTE UP TO FIVE TIMES WHILE BYTE='X' OR 'Y')  *
.*          (R2 IS SET TO FIVE - NUMBER OF TIMES LOOP EXECUTES)       *
.*       ENDLOOP                                                      *
.*       FIVE  DC   F'5'                                              *
.*                                                                    *
.*       LOOP  TIMES=FOREVER                                          *
.*       WHILE CH,R5,=H'10',L                                         *
.*          (CODE TO EXECUTE WHILE R5 < 10)                           *
.*       ENDLOOP                                                      *
.*                                                                    *
.**********************************************************************
         GBLA  &KFQNIV,&KFQSEQ(20)
         GBLC  &KFQTYP(20),&KFQEND(20)
         GBLC  &KFQAA(20),&KFQBB(20)
         GBLC  &KFQCC(20),&KFQDD(20)
&KFQNIV  SETA  &KFQNIV+1
         AIF   (&KFQNIV LE 20).OKLVL
         MNOTE 8,'TOO MANY NESTED MACROS - &KFQNIV'
         MEXIT
.OKLVL   AIF   (T'&TIMES NE 'O').GEN1
         MNOTE 8,'OPERAND MISSING  - TIMES'
         MEXIT
.GEN1    ANOP
&KFQTYP(&KFQNIV) SETC  'LOOP'          STORE STRUCTURE TYPE
&KFQAA(&KFQNIV) SETC   '&REG'          STORE REGISTER
         AIF   ('&TIMES'(1,1) NE '(').NOTREG
&KFQAA(&KFQNIV) SETC '&TIMES(1)'       GET REGISTER NUMBER
.NOTREG  ANOP
&KFQSEQ(&KFQNIV) SETA 1+&KFQSEQ(&KFQNIV) INCREMENT SEQ NUM
&KFQCC(&KFQNIV)  SETC 'ZL&KFQNIV.L&KFQSEQ(&KFQNIV)' START LABEL
&KFQEND(&KFQNIV) SETC 'ZL&KFQNIV.E&KFQSEQ(&KFQNIV)' END LABEL
         AIF    ('&TIMES' NE 'FOREVER').NOTFOR
&KFQAA(&KFQNIV)  SETC 'FRVR'
         AGO     .LAB
.NOTFOR  ANOP
         AIF   ('&TIMES'(1,1) EQ '(').EXEC
         AIF   (T'&TIMES NE  'N').NOTSELF
         LA    &KFQAA(&KFQNIV),&TIMES  GET LOOP COUNT
         AGO   .EXEC
.NOTSELF ANOP
         L    &KFQAA(&KFQNIV),&TIMES GET LOOP COUNT
.EXEC    ANOP
         LTR  &KFQAA(&KFQNIV),&KFQAA(&KFQNIV)
         BNP  &KFQEND(&KFQNIV)
.LAB     ANOP
&KFQCC(&KFQNIV) DS 0H
         MEND
