
                    INSTRUCTIONS FOR USING GDGMERGE PROGRAM
                    =======================================

   THIS PROGRAM DYNAMICALLY ALLOCATES EVERY DATASET IN A GDG LIST,
 STARTING AT GENERATION ONE (G0001V00), AND COPIES ALL THE GENERATIONS
 TO ONE OUTPUT FILE. A COUNT OF THE NUMBER OF RECORDS PROCESSED IN EACH
 GENERATION IS MADE AND THIS COUNT IS PRINTED AT THE END OF THE JOB.

   THE PROGRAM ASSUMES THE VERSION NUMBER OF THE GDG IS ALWAYS 00.
          IE. GNNNNV00

   THE DISPOSITION OF THE GENERATIONS AT THE END OF THE STEP IS
 DEPENDENT ON PARAMETERS PASSED TO THE PROGRAM, BUT THEY ARE EITHER
 DELETED AND UNCATALOGED, OR KEPT.

   THE REQUIRED JCL FOR RUNNING GDGMERGE IS AS FOLLOWS :-

              1 //JOBNAME  JOB ACCNT INFO
              2 //STEP     EXEC PGM=GDGMERGE,PARM='GDGROOT,DEL=?'
              3 //PRINT    DD   SYSOUT=*,BLKSIZE=133
              5 //SYSUT1   DD   .................................

  JCL CARD   DESCRIPTION

     1       JOB CARD (REQUIRED).

     2       EXEC CARD (REQUIRED) MUST HAVE A PARM SPECIFIED FOR THE GDG
             ROOT :-
             EG. ZZ.GDG.BASE  THIS WILL FIND FILES CALLED :-
                 ZZ.GDG.BASE.G0001V00
             A SECOND OPTIONAL PARM SPECIFIES THE DISPOSTION OF THE
             FILES AT STEP END. SPECIFY 'DEL=Y' AND THE FILES WILL BE
             DELETED AND UNCATALOGED, SPECIFY 'DEL=N' AND THE FILES
             WILL BE KEPT.

             IF 'DEL=' IS NOT CODED 'DEL=Y' IS ASSUMED.
+            IF 'DEL=' IS NOT CODED 'DEL=Y' IS ASSUMED.

             A THIRD OPTIONAL PARM SPECIFIES THE ACTION TO BE TAKEN IF
             THE FIRST GENERATION CANNOT BE LOCATED. SPECIFY 'NOABEND'
             TO PREVENT THE STEP ABENDING. THIS WILL THEN GIVE A
             CONDITION CODE OF 8. IF THIS PARM IS MISSING THE DEFAULT
             ACTION IS TO ABEND THE STEP.

             THE ORDER OF THESE PARAMETERS IS NOT IMPORTANT.

     3       PRINT DD STATEMENT (REQUIRED). DEFINES THE PRINT OUT FILE.
             THIS WILL CONTAIN A COUNT OF THE RECORDS IN EACH GENERATION
             AND IF THE GENERATIONS HAVE BEEN KEPT OR NOT ( DEPENDING ON
             THE PARM PASSED TO THE PROGRAM ).

     4       SYSUT1 DD CARD (REQUIRED). DEFINES THE OUTPUT FILE. THE
             DISPOSITION OF THIS FILE IS NOT GOVERNED BY THE 'DEL' PARM
             ON THE EXEC CARD.
   CONDITION CODES RETURNED FROM GDGMERGE ARE:-

                      0     SUCCESSFUL COMPLETION.

                      8     UNABLE TO LOCATE FIRST GENERATION AND
                            'NOABEND' WAS SPECIFIED AS A PARM.

    IMPORTANT
    =========
             IF THE FIRST GENERATION IS NOT LOACTED AND 'NOABEND' IS
             SPECIFIED ALL SUBSEQUENT GENERATIONS ARE LEFT UNTOUCHED.
GDGMERGE CSECT
         STM   14,12,12(13)     SAVE REGISTERS IN CALLERS AREA
         LR    R12,R15
         USING GDGMERGE,R12
         LR    R15,R13
         BAL   R13,PRGMSAVE+94
PRGMSAVE DC    18F'0'
*
*        ASSEMBLY INFORMATION - DATE, TIME AND CSECT NAME FOLLOW
*
         DC    CL8'&SYSDATE'     **** ASSEMBLY DATE (MM/DD/YY) ****
         DC    CL6' &SYSTIME'    ***** ASSEMBLY TIME (HH.MM) ******
         DC    CL8'&LAB'         *********  CSECT NAME  ***********
         ST    R13,8(R15)
         ST    R15,4(R13)
         SPACE 1
***********************************************************************
**  W E L C O M E   T O   G D G M E R G E                            **
***********************************************************************
**    REGISTER USAGE                                                 **
** R0  =  WORK                                                       **
** R1  =  WORK                                                       **
** R2  =  ADDRESS OF INPUT PARAMETERS                                **
** R3  =  WORK                                                       **
** R4  =  WORK                                                       **
** R5  =  NO OF RECORDS WRITTEN TO OP FILE                           **
** R6  =  GENERATION NUMBER COUNT                                    **
** R7  =  WORK                                                       **
** R8  =  POINTS TO RECORD ADDR FOR I/O                              **
** R9  =  WORK                                                       **
** R10 =  POINTS TO FIRST TEXTUNIT FOR SVC99                         **
** R11 =  POINTS TO INPUT GDG DSN IN GETMAINED AREA                  **
** R12 =  BASE REGISTER                                              **
** R13 =  STANDARD IBM LINKAGE                                       **
** R14 =  STANDARD IBM LINKAGE                                       **
** R15 =  STANDARD IBM LINKAGE                                       **
**                                                                   **
** THIS PROGRAM DYNAMICALLY ALLOCATES EVERY DATASET IN A GDG LIST    **
** STARTING AT GENERATION (G0001V00) ONE AND COPIES ALL THE FILES    **
** TO ONE OUTPUT FILE (SYSUT1). A COUNT OF THE NUMBER OF RECORDS     **
** PROCESSED IS ALSO MADE. THE PROGRAM ASSUMES THE VERSION NUMBER    **
** OF THE GDG IS ALWAYS 00.                                          **
**  REQUIRED DD STATEMENTS ARE :-                                    **
**            PRINT  DD STATEMENT (REPORT PRINT FILE)                **
**            SYSUT1 DD STATEMENT (OUTPUT FILE)                      **
**  INPUT PARAMETERS (SPECIFIED IN ANY ORDER) ARE :-                 **
**   'GDG.BASE.NAME' (ALWAYS REQUIRED)                               **
**   DEL=Y/N  (OPTIONAL) IF DEL=N IS SPECIFIED THE INPUT GENERATIONS **
**            ARE KEPT. THE DEFAULT IS DEL=Y WHICH DELETES AND UNCATS**
**   'NOABEND' (OPTIONAL) IF NOABEND IS SPECIFIED THE STEP WILL NOT  **
**            ABEND IF THE FIRST GENERATION CANNOT BE FOUND BUT IT   **
**            WILL SET THE CONDITION CODE TO 8 AND STOP PROCESSING.  **
**                                                                   **
**  IF A SPACE CONDITION IS RAISED ON THE OUTPUT FILE (SYSUT1)       **
**  AND IT A B37 TYPE CONDTION THEN A WRITE TO OPERATOR MESSAGE IS   **
**  ISSUED AND THE MERGE STEP ABENDS USER 0037 WITHOUT DUMPING.      **
**                                                                   **
**                                                                   **
**                                                                   **
**          **************************                               **
**          * MODULE NAME = GDGMERGE *                               **
**          **************************                               **
**                                                                   **
**            SOURCE ON Q14 (GDGMERGE)                               **
**                                                                   **
**               ATTRIBUTES = KEY 8, NON-REENTRANT,                  **
**                  PROBLEM PROGRAM STATE                            **
**                                                                   **
**            ENTRY POINTS = GDGMERGE (ONLY ENTRY POINT)             **
**                                                                   **
**            EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14  **
**                                                                   **
**            EXTERNAL REFERENCES = NONE                             **
**                                                                   **
**               CONTROL BLOCKS = NONE                               **
**                                                                   **
**            MACROS = EOJ, WTO, RETURN,GETMAIN, DCB, DYNALLOC       **
**                     GET, PUT, OPEN, CLOSE, ABEND                  **
**                                                                   **
***********************************************************************
**    ALL THE REGISTER EQUATES FOLLOW
***********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10      EQUATE PREFIX TO NUMERIC SYMBOLS IN ORDER
R11      EQU   11       TO MAKE THE USE OF REGISTER OPERANDS IN
R12      EQU   12       INSTRUCTIONS SELF EXPLANITORY.THIS ALSO
R13      EQU   13         CREATES ENTRIES IN CROSS REFERENCE.
R14      EQU   14
R15      EQU   15
FPR0     EQU   0
FPR2     EQU   2
FPR4     EQU   4
FPR6     EQU   6
         EJECT
         L     R2,0(R1)           R2 = PARMS
         LR    R3,R2              R3 = PARMS
         LH    R4,0(R2)           R4 = PARM LENGTH
         CH    R4,=H'1'           PARMS PRESENT
         BL    PARMERR            ... NO
         LA    R2,2(R2)           R2 POINTS TO FIRST PARM
         SR    R9,R9              MOVE R4 TO R9 FOR LOOP COUNT
         MVI   ABENDFLG,C'Y'      SET THE ABEND FLAG ON
         MVI   DELFLAG,C'X'       SET THE DELETE FLAG ON
         MVI   DSNFLAG,C'N'       SET THE DSNAME FLAG ON
         LR    R10,R2             SAVE R2 IN R10 FOR NOW
TRYDEL   CLI   0(R10),X'00'       END OF PARMS ?
         BE    MAINPROG
         CLC   0(4,R10),=C'DEL='  IS IT THE DEL= PARM ?
         BE    DELFOUND           YES - GO PROCESS IT
         CLC   0(7,R10),=C'NOABEND' IS IT THE NOABEND PARM ?
         BE    NOABFND            YES - GO AND PROCESS IT
         CLI   DSNFLAG,C'N'       SET THE DSNAME FLAG ON
         BNE   PARMERR            YES - WE HAVE HAD ONE ALREADY
         MVI   DSNFLAG,C'Y'       SET THE DSNAME FLAG ON
         LR    R2,R10             SAVE THE ADDRESS OF IT
         LA    R10,1(R10)         UP R10 BY ONE
         LA    R9,1(R9)           UP R9 BY ONE
LOOP     CLI   0(R10),C','        IS THE CHARACTER A COMMA ?
         BE    ENDLOOP            YES - END THE LOOP
         CLI   0(R10),X'00'       END OF PARMS ?
         BE    MAINPROG           YES - END THE LOOP
         LA    R10,1(R10)         UP R10 BY ONE
         LA    R9,1(R9)           UP R9 BY ONE
         B     LOOP               AND LOOP BACK
ENDLOOP  LA    R10,1(R10)         SKIP THE COMMA
         B     TRYDEL
NOABFND  CLI   ABENDFLG,C'N'      HAVE WE HAD A PARN NOABEND BEFORE?
         BE    PARMERR            YES - ERROR
         MVI   ABENDFLG,C'N'      YES - SET THE ABEND FLAG OFF
         LA    R10,7(R10)         SKIP NO ABEND
         CLI   0(R10),C','         NEXT CHARACTER A COMMA
         BNE   ABENDEND           NO - TRYEND OF PARMS
         LA    R10,1(R10)         SKIP THE COMMA
         B     TRYDEL
ABENDEND CLI   0(R10),X'00'        END OF PARM ?
         BE    MAINPROG           NO - PARM ERROR
         B     PARMERR            ERROR THEN
DELFOUND CLI   DELFLAG,C'X'       HAVE WE HAD A PARN DEL=  BEFORE?
         BNE   PARMERR            YES - ERROR
         LA    R10,4(R10)         SKIP PASSED THE DEL= PART
         CLI   0(R10),C'Y'        IS IT Y ?
         BNE   KEEPTHEM           NO - GO TO KEEP THEM PROCESS
         MVI   DELFLAG,C'Y'       SET THE DELFLAG ON
         B     SKIPLET            GO SKIP THE LETTER
KEEPTHEM CLI   0(R10),C'N'         IS IT N ?
         BNE   PARMERR            NO - ITS AN ERROR THEN
         MVI   DELFLAG,C'N'       SET THE DELFLAG OFF
SKIPLET  LA    R10,1(R10)         SKIP THE LETTER
         CLI   0(R10),C','         NEXT CHARACTER A COMMA
         BNE   DELEND             NO - TRY END OF PARMS
         LA    R10,1(R10)         SKIP THE COMMA
         B     TRYDEL
DELEND   CLI   0(R10),X'00'        END OF PARM ?
         BE    MAINPROG           NO - PARM ERROR
         B     PARMERR            ERROR THEN
MAINPROG EQU   *
         CLI   DSNFLAG,C'N'       ANY DSNAME PASSED
         BE    PARMERR            NO DSNAME ---- ERROR
         CLI   DELFLAG,C'X'       ANY DSNAME PASSED
         BNE   MAINOK             NO DSNAME ---- ERROR
         MVI   DELFLAG,C'Y'       SET FLAG SO THE DELETE
MAINOK   LR    R4,R9              SAVE R9 IN R4
         LA    R9,15(R9)          INCREMENT R9 FOR TOTAL NO OF BYTES
         GETMAIN R,LV=(R9)
         LR    R10,R1             R10 ==> GETMAINED AREA
         MVC   0(2,R10),=X'0002'  SET UP SVC99 PARMLIST
         MVC   2(2,R10),=X'0001'
         LR    R9,R4
         LA    R9,9(R9)
         ST    R9,PARMLEN
         MVC   4(2,R10),PARMHLF   MOVE IN LENGTH OF DSN
         LR    R9,R4              READY TO MOVE PARM DSN
         BCTR  R9,0               SUBTRACT 1 FROM LENGTH
         EX    R9,MOVEDSN         PUT DSN IN GETMAINED AREA
         LA    R11,6(R10)         R11 ===> DSN IN GETMAINED AREA
         LA    R9,0(R4,R11)
         MVC   0(2,R9),=C'.G'
         MVC   6(3,R9),=C'V00'
         LA    R11,2(R4,R11)      R11 ===> GEN NUMB
         SR    R6,R6
         MVI   FILABEND,X'00'     CLEAR FLAG
         B     MAINPROC           PROCESS PARM FILE
ENDPROC  EQU  *
         CLOSE (SYSUT1)           CUMULATIVE FILE
         CLOSE (PRINT)            REPORT DATASET
         SR    R0,R0
         ST    R0,CONDCODE
EXIT8    L     R15,CONDCODE            LOAD R15 WITH COND CODE
         L     R13,4(R13)              RELOAD R13
         RETURN (14,12),RC=(15)        RETURN TO SENDER
         EJECT
MAINPROC OPEN (SYSUT1,(OUTPUT))   CUMULATIVE FILE
         TM    OUTOPEN,X'10'      CHECK OPEN IS OK
         BZ    OPENFAIL
         ST    R10,SVC99TU1       STORE SVC 99 PARM ADDRESS
FIRSTDG  LA    R6,1(R6)           UP THE COUNT
         CVD   R6,DECIMAL         CONVERT IT
         LA    R7,DECIMAL         LOAD ADDRESS OF DECIMAL INTO R6
         OI    7(R7),X'0F'        FORCE 'F' IN LAST BIT
         UNPK  UNPKGEN,0(8,R7)    UNPACK GEN COUNT
         LA    R7,UNPKGEN         POINT TO UNPACKED GENERATION NUMBER
         MVC   0(4,R11),12(R7)    MOVE IN GENERATION COUNT
         CLI   DELFLAG,C'Y'       IS THE DELPARM FLAG SET ON
         BE    ALLOCIT            YES - JUST GO ALLOCATE IT THEN
         MVC   S99TU3(7),=X'00050001000108'   SET UP DISP=OLD,KEEP,KEEP
         MVC   CONTREC+19(24),=C' DATA SET HAS BEEN KEPT '
ALLOCIT  LA    R1,S99RBPTR        POINT TO S99 PARMS
         DYNALLOC                 ALLOCATE INPUT GDG
         CLC   S99ERROR,=X'0210'  UNAVAILABLE
         BE    DYNERR1
         CLC   S99ERROR,=X'022C'  UNAVAILABLE
         BE    DYNERR1
         CLC   S99ERROR,=X'036C'  BAD PARMS TO SVC99
         BE    DYNERR2
         LTR   R15,R15
         BNE   DYNERR1
         B     PROCGDG
NEXTGDG  LA    R6,1(R6)           UP THE COUNT
         CVD   R6,DECIMAL         CONVERT IT
         LA    R7,DECIMAL         LOAD ADDRESS OF DECIMAL INTO R6
         OI    7(R7),X'0F'        FORCE 'F' IN LAST BIT
         UNPK  UNPKGEN,0(8,R7)    UNPACK GEN COUNT
         LA    R7,UNPKGEN         POINT TO UNPACKED GENERATION NUMBER
         MVC   0(4,R11),12(R7)    MOVE IN GENERATION COUNT
         LA    R1,S99RBPTR        POINT TO S99 PARMS
         DYNALLOC                 ALLOCATE INPUT GDG
         CLC   S99ERROR,=X'0210'  UNAVAILABLE
         BE    DYNERR1
         CLC   S99ERROR,=X'022C'  UNAVAILABLE
         BE    DYNERR1
         CLC   S99ERROR,=X'036C'  BAD PARMS TO SVC99
         BE    DYNERR2
         LTR   R15,R15
         BNE   OKFAIL
PROCGDG  MVC   GDGDD,S99DD        SETUP DD IN GDG DCB
         OPEN  (INGDG)            OPEN GDG FILE
         TM    DISKOPEN,X'10'     CHECK OPEN FLAGS
         BZ    GDGFAIL
         SR    R5,R5              INIT NO OF RECORDS PROCESSED COUNT
READGDG  GET   INGDG              READ INPUT FILE
         LR    R8,R1
         PUT   SYSUT1,0(R8)       WRITE TO OUTPUT FILE FROM INGDG
         CLI   FILABEND,X'FF'     B37 ABEND OCCURRED ?
         BNE   OKPUT              NO - PROCESS OK
         B     B37FAIL            YES - DO FINAL PROCESS
OKPUT    DS    0H
         LA    R5,1(R5)           INCREMENT RECORDS WRITTEN COUNT
         B     READGDG            PROCESS UNTIL EOF
EOF      CLOSE (INGDG)            CLOSE FILE
         LA    R8,CONTDAT         READY FOR MOVE
         MVI   0(R8),C' '         *CLEAR NAME FIELD
         MVC   1(43,R8),0(R8)     *
         L     R9,PARMLEN         LENGTH OF DSNAME
         BCTR  R9,0               MINUS 1
         EX    R9,MOVENAME        MOVE DSNAME TO OUTPUT LINE
         CVD   R5,DECIMAL         CONVERT RECORD COUNT
         LA    R7,DECIMAL         LOAD ADDRESS OF DECIMAL INTO R5
         OI    7(R7),X'0F'        FORCE 'F' IN LAST BIT
         UNPK  UNPKGEN,0(8,R7)    UNPACK RECORD COUNT
         LA    R7,UNPKGEN         ADDRESS OF UNPKGEN IN R7
         MVC   CONTREC,8(R7)      MOVE IN RECORD COUNT
         BAL   R7,PRINTLIN        WRITE CONTROL DETAIL LINE
         SR    R5,R5              CLEAR COUNTER
         B     NEXTGDG
OKFAIL   LA    R8,CONTROL              *
         MVI   0(R8),C' '              * CLEAR PRINT LINE
         MVC   1(132,R8),0(R8)         *
         MVC   30(20,R8),=C'PROCESSING COMPLETE*'
         BAL   R7,PRINTLIN
         B     ENDPROC            DO EOJ PROCESSING
B37FAIL  LA    R8,CONTROL              *
         MVI   0(R8),C' '              * CLEAR PRINT LINE
         MVC   1(132,R8),0(R8)         *
         MVC   30(20,R8),=C'B37 ON OUTPUT RERUN'
         BAL   R7,PRINTLIN
         WTO   '*** ABEND *** NO SPACE FOR OUTPUT FILE (B37) INFORM SOMX
               EONE. MERGE ABENDED',DESC=(2)
         ABEND 37                 B37 ABEND
*        WRITE CONTROL DETAIL LINE
PRINTLIN EQU   *
         TM    PRINTOP,X'10'
         BNZ   OUTLINE
         OPEN  (PRINT,(OUTPUT))
         ZAP   LINECT,=P'50'
         PUT   PRINT,HEADER
         PUT   PRINT,HEAD2
OUTLINE  PUT   PRINT,CONTROL
         SP    LINECT,=P'1'
         BP    PRINTEND
NEWHEDER PUT   PRINT,HEADER
         PUT   PRINT,HEAD2
         ZAP   LINECT,=P'50'
PRINTEND BR    R7
         EJECT
*       ABEND ROUTINES
PARMERR  LR    R8,R1            SAVE R1 IN R8
         WTO   'INVALID PARMS INPUT'
         ABEND 100,DUMP
DYNERR1  EQU   *
         CLI   ABENDFLG,C'N'     DO WE WANT TO ABEND
         BNE   YESABEND          YES - GO DO IT THEN
         WTO   'FIRST GENERATION IS MISSING',ROUTCDE=(2,11)
         LA    R0,8
         ST    R0,CONDCODE
         B     EXIT8
YESABEND WTO   'SYSTEM ERROR - FAILED ON FIRST GDG',ROUTCDE=(2,11)
         ABEND 200,DUMP
DYNERR2  LR    R8,R1             SAVE R1 IN R8
         WTO   'SYSTEM ERROR - FAILED SVC 99 PARMS',ROUTCDE=(2,11)
         ABEND 300,DUMP
DYNERR3  LR    R8,R1            SAVE R1 IN R8
         CVD   R6,DECIMAL       CONVERT IT
         LA    R7,DECIMAL       LOAD ADDRESS OF DECIMAL INTO R6
         OI    7(R7),X'0F'      FORCE 'F' IN LAST BIT
         UNPK  UNPKGEN,0(8,R7)  UNPACK GEN COUNT
         LA    R7,UNPKGEN       ADDRESS OF UNPKGEN IN R6
         MVC   WTO2GEN,12(R7)   MOVE IN RECORD COUNT
WTO2     WTO   'SYSTEM ERROR - UNABLE TO OPEN GENERATION XXXX'
WTO2GEN  EQU WTO2+49,4
         ABEND 500,DUMP
OPENFAIL LR    R8,R1               SAVE R1 IN R8
         WTO   'SYSTEM ERROR - UNABLE TO OPEN ** SYSUT1 **',ROUTCDE=11
         ABEND 600,DUMP
GDGFAIL  EQU  *
         LR    R8,R1            SAVE R1 IN R8
         CVD   R6,DECIMAL       CONVERT IT
         LA    R7,DECIMAL       LOAD ADDRESS OF DECIMAL INTO R6
         OI    7(R7),X'0F'      FORCE 'F' IN LAST BIT
         UNPK  UNPKGEN,0(8,R7)  UNPACK GEN COUNT
         LA    R7,UNPKGEN       ADDRESS OF UNPKGEN IN R7
         MVC   WTO2GEN,12(R7)   MOVE IN RECORD COUNT
WTO3     WTO   'SYSTEM ERROR - UNABLE TO OPEN GENERATION XXXX'
WTO3GEN  EQU WTO3+49,4
         ABEND 700,DUMP
*        END ABEND ROUTINES
         EJECT
*        DCB OPEN ROUTINE
DCBOPEN  EQU  *
         CLI   RECFM,X'58'       IF RECFM=VBS THEN BFTEK=A
         BNE   CONTINUE
         OI    32(R1),X'60'      OR ON BFTEK=A FOR VBS DATA
CONTINUE BR    R14
         EJECT
         DS    0F                    ALIGN
CONDCODE DS    F
OPEX     DC    X'85',AL3(DCBOPEN)    DCB INGDG EXITLIST
MOVEDSN  MVC   6(0,R10),0(R2)        R2 ==>  PARMDATA
MOVENAME MVC   0(0,R8),6(R10)        DSN ==> PRINTLINE
DELFLAG  DS    CL1
ABENDFLG DS    CL1
DSNFLAG  DS    CL1
DECIMAL  DS    D
UNPKGEN  DS    CL16
FILABEND DC    X'00'
LINECT   DC    P'0000'                        LINES PRINTED COUNT
HEADER   DC    C'1'
         DC    CL42' '
         DC    CL47' NUMBER OF RECORDS PROCESSED FROM INPUT GDG    '
         DC    CL43' '
HEAD2    DC    CL43' '
         DC    CL47'  FILENAME                       NO. OF RECORDS'
         DC    CL43' '
CONTROL  DS    0CL133
         DC    CL22' '
CONTDAT  DS    CL44
         DC    CL14' '
CONTREC  DS    CL8' '
         DC    CL45'     ***** DELETED AND UNCATALOGED *****     '
PARMLEN  DS    0F
PARM1    DS    H
PARMHLF  DS    H
         EJECT
*        DYNAMIC ALLOCATION PARAMETER LIST
         DS    0F                              ALIGN
S99RBPTR DC    X'80'                           HIGH ORDER BIT ON
         DC    AL3(S99RB)                      POINTER TO SVC 99 RB
S99RB    EQU   *                               SVC 99 REQUEST BLOCK
         DC    X'14'                           LENGTH OF RB
         DC    X'01'                           VERB DSNAME ALLOCATION
         DC    X'4000'                         FLAGS-1 , S99NOCNV ON
S99ERROR DC    H'0'                            ERROR  RETURN CODE
         DC    H'0'                            REASON RETURN CODE
         DC    A(S99TUPL)                      POINTER TO S99TUPL
         DC    F'0'                            RESERVED SPACE
         DC    F'0'                            FLAGS 2
S99TUPL  EQU   *                               TEXT UNIT POINTER LIST
SVC99TU1 DS    F                               POINTER TO TEXT UNIT1
         DC    A(S99TU2)                       POINTER TO TEXT UNIT2
         DC    A(S99TU3)                       POINTER TO TEXT UNIT3
         DC    A(S99TU4)                       POINTER TO TEXT UNIT4
         DC    X'80'                           END OF LIST MARKER
         DC    AL3(S99TU5)                     POINTER TO TEXT UNIT5
S99TU2   DC    X'0004',X'0001',X'0001',X'01'   DISP=OLD
S99TU3   DC    X'0005',X'0001',X'0001',X'04'        DELETE
S99TU4   DC    X'0006',X'0001',X'0001',X'08'        KEEP
S99TU5   DC    X'0055',X'0001',X'0008',CL8' '  RETURN DD NAME
S99DDLEN EQU   S99TU5+4,2                      LENGTH OF DD NAME
S99DD    EQU   S99TU5+6,8                      RETURNED DD NAME
         EJECT
*        DCB MACROS
*        INPUT GENERATION FILE
INGDG    DCB   DDNAME=SYSDA,DSORG=PS,EODAD=EOF,MACRF=(GL),EXLST=OPEX
RECFM    EQU   INGDG+36,1          RECFM
GDGDD    EQU   INGDG+40,8          DD NAME
DISKOPEN EQU   INGDG+48,1          DISK OPEN FLAGS
*
         EJECT
*        OUTPUT GENERATION/CUMULATIVE FILE                       *
SYSUT1   DCB   DSORG=PS,MACRF=(PM),DDNAME=SYSUT1,EXLST=FILERR1
OUTOPEN  EQU   SYSUT1+48,1         SYSUT1 OPEN FLAGS
FILERR1  DS    0F
         DC    XL1'91'
         DC    AL3(FILERROR)
FILERROR DS    0F
         CLC   0(2,R1),=X'B370'
         BE    ABENDB37
         B     FILERET
ABENDB37 DS    0H
         MVI   FILABEND,X'FF'
         MVI   3(R1),X'04'         SUPPRESS ABEND FROM SYSTEM
FILERET  RETURN
*
         EJECT
*        PRINT FILE
PRINT    DCB   DSORG=PS,MACRF=(PM),DDNAME=PRINT,RECFM=FBA,LRECL=133
PRINTOP  EQU   PRINT+48,1          PRINT OPEN FLAGS
*
         EJECT
         END
