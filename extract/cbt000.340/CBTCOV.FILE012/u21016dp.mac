* PROCESS  A,X,AG,LIST,MAP,OPT(TIME),STG;
 /*      ZAJL4 - IDENTIFY ENTRY TYPE AND READ DSCBS  */
0ZAJL4:  PROC(JDS) REORDER;
0/* PRINT FILE FOR DATASET LISTING    */
         DCL   SYSUT2    FILE PRINT;
-/*      ENTRY DECLARATION */
         DCL ZAJDSCB ENTRY(CHAR(6),CHAR(*),CHAR(*));
-/* STRUCTURE TO HOLD TABLE OF DATASETS    */
         DCL   1    DSETS(600) EXTERNAL,
 /*                   FOR ALPHAMERIC SEQUENCING */
                    2 DSSEQ   FIXED BIN(16),
 /*                   DATASET NAME    */
                    2 DSN     CHAR(44),
 /*                   LENGTH OF NAME  */
                    2 DSNLN   FIXED BIN(15),
 /*                   VOLUME SERIAL   */
                    2 DSVOL   CHAR(6),
 /*                   DEVICE TYPE     */
                    2 DSTYP   CHAR(4);
-/* AREAS TO HOLD DSCBS     */
         DCL   FMT1 CHAR(96),
               FMT2 CHAR(140),
               FMT3 CHAR(140);
-/* DESCRIPTION OF FORMAT 1 DSCB */
         DCL   1    F1 BASED(P1),
                    2 FL1     CHAR(9),
                    2 CREYY   BIT(8) ALIGNED,
                    2 CREDD   BIT(16) ALIGNED,
                    2 EXPYY   BIT(8) ALIGNED,
                    2 EXPDD   BIT(16) ALIGNED,
                    2 XTNTS   BIT(8) ALIGNED,
                    2 FL2     CHAR(22),
                    2 DSORG,
                         3 IS BIT(1),
                         3 PS BIT(1),
                         3 DA BIT(1),
                         3 FL3 BIT(3),
                         3 PO BIT(1),
                         3 UD BIT(1),
                    2 FL4     BIT(8),
                    2 RECFM,
                         3 F  BIT(1),
                         3 V  BIT(1),
                         3 T  BIT(1),
                         3 B  BIT(1),
                         3 S  BIT(1),
                         3 A  BIT(1),
                         3 M  BIT(1),
                         3 XX BIT(1),
                    2 OPTCD   BIT(8),
                    2 BLKSZ   BIT(16) ALIGNED,
                    2 LRECL   BIT(16) ALIGNED,
                    2 KEYL    BIT(8) ALIGNED,
                    2 RKP     BIT(16) ALIGNED,
                    2 FL5     CHAR(1),
                    2 SECTYP1 BIT(2),   /* ALLOCATION MODE */
                    2 RESVD   BIT(2),
                    2 SECTYP2 BIT(4),   /* ALLOCATION OPTION */
                    2 SECQTY  BIT(24) ALIGNED,
                    2 LAST    BIT(24) ALIGNED,
                    2 FL6     CHAR(4),
                    2 XT(3) ALIGNED,
                         3 FLG BIT(8),
                         3 FLS BIT(8),
                         3 LOWCC BIT(16),
                         3 LOWHH BIT(16),
                         3 UPPCC BIT(16),
                         3 UPPHH BIT(16),
                    2 PTR1    CHAR(5);
         P1=ADDR(FMT1);
-/* DESCRIPTION OF FORMAT 2 DSCB */
         DCL   1    F2 BASED(P2) ALIGNED,
                    2 FL1     CHAR(59),
                    2 DELT    BIT(16),
                    2 REFS    BIT(24),
                    2 NOBYT   BIT(16),
                    2 FL2     BIT(8),
                    2 RECS    BIT(32),
                    2 FL3     CHAR(55),
                    2 RORG2   BIT(16),
                    2 OVCT    BIT(16),
                    2 RORG1   BIT(16),
                    2 FL4     CHAR(3),
                    2 PTR2    CHAR(5);
         P2=ADDR(FMT2);
-/* DESCRIPTION OF FORMAT 3 DSCB */
         DCL   1    F3 BASED(P3) ALIGNED,
                    2 FL1     CHAR(4),
                    2 XT1(4),
                         3 FLS BIT(16),
                         3 LO1C BIT(16),
                         3 LO1H BIT(16),
                         3 UP1C BIT(16),
                         3 UP1H BIT(16),
                    2 FL2     CHAR(1),
                    2 XT2(9),
                         3 FLS BIT(16),
                         3 LO2C BIT(16),
                         3 LO2H BIT(16),
                         3 UP2C BIT(16),
                         3 UP2H BIT(16),
                    2 PTR3    CHAR(5);
         P3=ADDR(FMT3);
-/* OTHER DECLARATIONS */
         DCL   JDS  FIXED BIN(15);
         DCL   CDSORG CHAR(2) INIT('  ');
         DCL   CRF    CHAR(3) VAR INIT('');
         DCL SECTYPES(0:3) CHAR(3) STATIC INIT
                         ('ABS','BLK','TRK','CYL');
         DCL MAXTRK FIXED BIN;          /* TRKS PER CYL FOR DEVICE */
-/*      HANDLE DATASETS WITH MORE THAN 5 VOLUMES    */
0        IF DSVOL(JDS)='      '
           THEN DO;
                PUT FILE(SYSUT2) SKIP(2) EDIT (DSN(JDS),
                    'MORE THAN 5 VOLUMES - NO FURTHER INFORMATION')
                         (A(51),A);
                RETURN;
                END;
-/*      HANDLE TAPE DATASETS    */
0        IF DSTYP(JDS)='TAPE'
           THEN DO;
                FMT1=' TAPE DATASET ';
                GO TO PUTMSG;
                END;
-/*      OBTAIN FORMAT 1 DSCB    */
0        FMT1='';
         CALL ZAJDSCB(DSVOL(JDS),DSN(JDS),FMT1);
         IF PTR1=''      /* DSCB COULD NOT BE READ */
           THEN DO;
 PUTMSG:
                IF DSNLN(JDS)>0    /* CONTINUED MULTI-VOLUME DATASET */
                  THEN DSN(JDS)='';
                PUT FILE(SYSUT2) SKIP(2) EDIT (DSN(JDS),DSVOL(JDS),
                         SUBSTR(FMT1,1,20),'- NO FURTHER INFORMATION')
                         (A(44),A(7),A,A);
                RETURN;
                END;
         IF DSTYP(JDS)='2314'
           THEN MAXTRK=20;
           ELSE IF DSTYP(JDS)='3330'
                  THEN MAXTRK=19;
                  ELSE MAXTRK=8;        /* 2301 OR 2305 */
-/*      OBTAIN OTHER DSCBS AS REQUIRED    */
0        IF IS
           THEN DO;
                CALL ZAJDSCB(DSVOL(JDS),PTR1,FMT2);
                PTR1=PTR2;
                END;
0        IF XTNTS > 3
           THEN CALL ZAJDSCB(DSVOL(JDS),PTR1,FMT3);
-/*      CALCULATE SIZE AND FREE SPACE     */
0        JTOT=0;
0        DO J=1 TO XTNTS;
           IF J<4
             THEN DO;
                  IF FLG(J)=128
 /*                      SPLIT CYLINDER    */
                    THEN JTRK=UPPHH(J)-LOWHH(J);
                    ELSE JTRK=MAXTRK;
                  JSIZE=JTRK*(UPPCC(J)-LOWCC(J))+UPPHH(J)-LOWHH(J)+1;
                  GO TO TOTAL;
                  END;
           IF J<=7
             THEN JSIZE=MAXTRK*(UP1C(J-3)-LO1C(J-3))+UP1H(J-3)
                              -LO1H(J-3);
             ELSE JSIZE=MAXTRK*(UP2C(J-7)-LO2C(J-7))+UP2H(J-7)
                              -LO2H(J-7);
           JSIZE=JSIZE+1;
 TOTAL:
           JTOT=JTOT+JSIZE;
         END;
0        IF LAST THEN JSPARE=JTOT-LAST/256-1;
                 ELSE JSPARE=0;
-/*      PREPARE COMMON INFORMATION   */
0        IF IS THEN CDSORG='IS';
         IF PS THEN CDSORG='PS';
         IF DA THEN CDSORG='DA';
         IF PO THEN CDSORG='PO';
         IF F THEN IF V THEN CRF='U';
                        ELSE CRF='F';
              ELSE IF V THEN CRF='V';
                        ELSE CRF='U';
         IF B THEN CRF=CRF××'B';
         IF S THEN CRF=CRF××'S';
         IF A THEN CRF=CRF××'A';
         IF M THEN CRF=CRF××'M';
         IF DSNLN(JDS)>0      /* CONTINUED MULTI-VOLUME DATASET */
           THEN DSN(JDS)='';
-/*      PRINT COMMON LINE  */
0        PUT FILE(SYSUT2) SKIP(2) EDIT
               (DSN(JDS),DSVOL(JDS),XTNTS,JTOT,JSPARE,SECQTY,
                SECTYPES(SECTYP1),CREYY,'.',CREDD,EXPYY,'.',EXPDD,
                CDSORG,CRF,BLKSZ,LRECL,KEYL,RKP)
               (A(44),A(6),F(4),F(8),F(6),F(6),X(1),A(3),F(4),A(1),
                P'999',F(4),A(1),P'999',X(3),A(5),A(3),F(7),F(6),
                P'ZZZZZZ',P'ZZZZZ');
-/*      EXTRA INFORMATION FOR ISAM DATASETS    */
0        IF IS
           THEN DO;
                PUT FILE(SYSUT2) SKIP EDIT (DELT,
                    ' RECORDS TAGGED FOR DELETION') (F(9),A);
                PUT FILE(SYSUT2) SKIP EDIT (REFS,
                    ' REFERENCES TO OVERFLOW RECORDS') (F(9),A);
                PUT FILE(SYSUT2) SKIP EDIT (NOBYT,
                    ' BYTES TO HOLD HIGH INDEX IN CORE') (F(9),A);
                PUT FILE(SYSUT2) SKIP EDIT (RECS,
                    ' RECORDS IN PRIME DATA AREA') (F(9),A);
                PUT FILE(SYSUT2) SKIP EDIT (RORG2,
                    ' EMPTY TRACKS IN IND. OVFLOW AREA')(F(9),A);
                PUT FILE(SYSUT2) SKIP EDIT (OVCT,
                    ' RECORDS IN OVERFLOW AREAS') (F(9),A);
                PUT FILE(SYSUT2) SKIP EDIT (RORG1,
                    ' CYL. OVERFLOW AREAS ARE FULL') (F(9),A);
                END;
         RETURN;
         END;
