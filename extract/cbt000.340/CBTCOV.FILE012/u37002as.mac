         MACRO
&NA      BEGIN &BASE,&SAVADR=,&ID=YES,&REGS=YES
         GBLA  &CHK
         LCLC  &BS1,&BS2,&BS3
         USING *,15
         AIF   ('&REGS' EQ 'NO').NOREGS
         AIF   (&CHK EQ 1).NOREGS
*  REGISTER EQUATES
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
FP0      EQU   0
FP2      EQU   2
FP4      EQU   4
FP6      EQU   6
&CHK     SETA  1
.*  SET UP CSECT NAME AS AN 8-BYTE CHARACTER CONSTANT IF SPECIFIED
.NOREGS  AIF   ('&ID' EQ 'NO').NOID
         AIF   ('&SYSECT' EQ '').NOID
         B     *+12
         DC    CL8'&SYSECT'
.NOID    ANOP
&NA      STM   14,12,12(13)
         AIF   ('&BASE' NE  '').BSPEC
&BS1     SETC  '12'                DEFAULT BASE = 12
         CNOP  0,4
         BAL   &BS1,*+76
         USING *,&BS1
         AGO   .SAVE
.*  BASE SPECIFIED. SET UP APPROPRIATE USING STATEMENT, ALLOWING UP TO
.*     THREE REGISTERS
.BSPEC   ANOP
&BS1     SETC  '&BASE(1)'
&BS2     SETC  '&BASE(2)'
&BS3     SETC  '&BASE(3)'
         AIF   ('&BS2' EQ  '').ONLY1
         AIF   ('&BS2' EQ '&BS1' OR '&BS1' EQ '&BS3').FAIL
         AIF   ('&BS2' EQ '&BS3').FAIL
         AGO   .OVER1
.*  ALL SPECIFIED BASE REGISTERS ARE UNIQUE
.ONLY1   CNOP  0,4
         BAL   &BS1,*+76
         USING *,&BS1
         AGO   .SAVE
.*  MORE THAN ONE BASE REGISTER SPECIFIED
.OVER1   CNOP  0,4
         BAL   &BS1,*+76
         AIF   ('&BS3' NE  '').ALL3 THREE BASE REGISTERS SPECIFIED
         USING *,&BS1,&BS2
         AGO   .SAVE
.ALL3    USING *,&BS1,&BS2,&BS3
.SAVE    ANOP
&SAVADR  DC    18F'0'
         AIF   ('&BS2' NE  '').SETB2
         AGO   .STORE
.SETB2   LR    &BS2,&BS1           SET 2ND BASE =
         AH    &BS2,IND&SYSNDX        1ST BASE + 4096
         AIF   ('&BS3' NE  '').SETB3
         AGO   .INC4K
.SETB3   LR    &BS3,&BS2           SET 3RD BASE =
         AH    &BS3,IND&SYSNDX        2ND BASE + 4096
.INC4K   B     *+6
IND&SYSNDX  DC H'4096'
.*  COMPLETE THE ESQUENCE
.STORE   ST    &BS1,8(13)
         ST    13,4(&BS1)
         LR    13,&BS1
         MEXIT
.*  ERROR NOTES
.FAIL    MNOTE 12,'BASE REGS DO NOT HAVE UNIQUE NAMES. GENERATION '
         MNOTE *,'TERMINATED'
         MEXIT
         MEND
         MACRO
&NAME    FINISH &RC=Z
&NAME    L     13,4(13)
         AIF   ('&RC' EQ '(15)').REG15
         AIF   ('&RC'(1,1) EQ '(').REGERR
         AIF   ('&RC' EQ 'Z').NORC
         LA    15,&RC
.REG15   L     14,12(13)
         LM    0,12,20(13)
         AGO   .OUT
.NORC    LM    14,12,12(13)
.OUT     BR    14
         MEXIT
.REGERR  MNOTE *,RETURN CODE REGISTER MUST BE 15. NO R.C. RETURNED
         AGO   .NORC
         MEND
         MACRO
&NAME    WTP   &MESSAGE,&MF=
         AIF   ('&MF' NE '').LISTEX
&NAME    WTO   &MESSAGE,ROUTCDE=(11)
         MEXIT
.LISTEX  AIF   ('&MESSAGE' EQ '').EX
&NAME    WTO   &MESSAGE,ROUTCDE=(11),MF=&MF
         MEXIT
.EX      ANOP
&NAME    WTO   MF=&MF
         MEND
         MACRO
&NAME    EDIT  &TO,&FROM,&EDWD
         LCLA  &CNT1,&CNT2,&CNT3,&EDMK
         LCLC  &LITWK,&EDCD,&LIT1,&LIT2,&LIT3,&LIT4,&LIT5,&NO,&LIT6
         AIF   (T'&EDWD NE 'O').A1      IS EDIT WORD OMITTED
         MNOTE 1,'NO EDIT FORMAT GIVEN'
         MEXIT
.A1      AIF   ('&EDWD'(1,1) EQ '''').A2
.A15     MNOTE 1,'EDIT FORMAT NOT WITHIN QUOTS'
         MEXIT
.A2      AIF   ('&EDWD'(K'&EDWD,1) EQ '''').A3
         AGO   .A15
.A3      ANOP
&CNT1    SETA  K'&EDWD-2
&CNT2    SETA  1
         AIF   ('&EDWD'(2,1) EQ 'X').A4
         AIF   ('&EDWD'(2,1) EQ '*').A6
         MNOTE 1,'INPROPER FILL CHARARTER - USE X OR *'
         MEXIT
.A4      ANOP
&LITWK   SETC  '40'
         AGO   .A7
.A6      ANOP
&LITWK   SETC  '5C' *
&CNT2    SETA  &CNT2+1
.A7      ANOP
&CNT2    SETA  &CNT2+1
&EDCD    SETC  '&EDWD'(&CNT2+4*&CNT3,1)
         AIF   ('&EDCD' EQ '''').C91
         AIF   ('&EDCD' EQ 'X').A8
         AIF   ('&EDCD' EQ ',').A9
         AIF   ('&EDCD' EQ '0').B1
         AIF   ('&EDCD' EQ '.').B2
         AIF   ('&EDCD' EQ ' ').B3
         AIF   ('&EDCD' EQ 'C').B4
         AIF   ('&EDCD' EQ 'R').B5
         AIF   ('&EDCD' EQ '-').B6
         AIF   ('&EDCD' EQ '$').B7
         AIF   ('&EDCD' EQ '*').B8
         AIF   ('&EDCD' EQ '/').B9
         MNOTE 1,'IMPROPER EDIT CHARACTER X,0. CR-$*/'
         MEXIT
.A8      ANOP
&LITWK   SETC  '&LITWK'.'20' DIGIT SELECTOR
         AGO   .C9
.A9      ANOP
&LITWK   SETC  '&LITWK'.'6B'  COMMA
         AGO   .C9
.B1      ANOP
&LITWK   SETC  '&LITWK'.'21'  SIGNIFICANT STARTER
         AGO   .C9
.B2      ANOP
&LITWK   SETC  '&LITWK'.'4B'  PERIOD
         AGO   .C9
.B3      ANOP
&LITWK   SETC  '&LITWK'.'40'  BLANK
         AGO   .C9
.B4      ANOP
&LITWK   SETC  '&LITWK'.'C3'  C
         AGO   .C9
.B5      ANOP
&LITWK   SETC  '&LITWK'.'D9'  R
         AGO   .C9
.B6      ANOP
&LITWK   SETC  '&LITWK'.'60'  -
         AGO   .C9
.B7      ANOP
&EDMK    SETA  &CNT2+4*&CNT3
         AGO   .B1
.B8      ANOP
&LITWK   SETC  '&LITWK'.'5C'  *
         AGO   .C9
.B9      ANOP
&LITWK   SETC  '&LITWK'.'61'  /
.C9      AIF   (&CNT2 NE 3).A7
.C91     AIF   (&CNT3 EQ 0).D1
         AIF   (&CNT3 EQ 1).D2
         AIF   (&CNT3 EQ 2).D3
         AIF   (&CNT3 EQ 3).D4
         AIF   (&CNT3 EQ 5).D6
         AIF   (&CNT3 EQ 4).D5
         MNOTE 1,'EDIT WORD TOO LARGE TO HANDLE'
.D1      ANOP
&LIT1    SETC '&LITWK'
         AGO   .D9
.D2      ANOP
&LIT2    SETC '&LITWK'
         AGO   .D9
.D3      ANOP
&LIT3    SETC '&LITWK'
         AGO   .D9
.D4      ANOP
&LIT4    SETC '&LITWK'
         AGO   .D9
.D5      ANOP
&LIT5    SETC '&LITWK'
         AGO   .D9
.D6      ANOP
&LIT6    SETC  '&LITWK'
.D9      AIF   ('&EDCD' EQ '''').E1
&LITWK   SETC '&NO'
&CNT3    SETA  &CNT3+1
&CNT2    SETA 0-1
         AGO   .A7
.E1      AIF   ('&TO'(K'&TO,1) EQ ')').E2
&CNT3    SETA  &CNT3*4+&CNT2-1
         AIF   ('&EDWD'(2,1) NE '*').E1A
&CNT3    SETA  &CNT3-1
.E1A     ANOP
&LITWK   SETC  '('.'&CNT3'.')'
&NAME    MVC   &TO&LITWK,=X'&LIT1&LIT2&LIT3&LIT4&LIT5&LIT6'
         AIF   (&EDMK NE 0).F1
         ED    &TO&LITWK,&FROM
         AGO   .E4
.E2      ANOP
&NAME    MVC   &TO,=X'&LIT1&LIT2&LIT3&LIT4&LIT5&LIT6'
         AIF   (&EDMK NE 0).F2
.E3      ED    &TO,&FROM
         AGO   .E4
.F1      LA    1,&TO+&EDMK
         EDMK  &TO&LITWK,&FROM
.F15     BCTR  1,0
         MVI   0(1),C'$'
         AGO   .E4
.F2      EDMK  &TO,&FROM
         AGO   .F15
.E4      ANOP
         MEND
         TITLE 'SYSBDUMP - BUILD CONTROL CARDS FOR IMDPRDMP'
         ISEQ  73,80
         SPACE 2
***********************************************************************
*                                                                     *
*        THIS MODULE BUILDS CONTROL CARDS FOR THE IBM SERVICE AID     *
*                                                                     *
*        IMDPRDMP WHICH FORMATS AND PRINTS CORE-IMAGE AND STAND-ALONE *
*                                                                     *
*        DUMPS.  SYSBDUMP CONSTRUCTS CONTROL CARDS TO PRINT THE       *
*                                                                     *
*        NUCLEUS AND ALL PROBLEM PROGRAM PARTITIONS THAT WERE         *
*                                                                     *
*        ABENDING WITH THE FOLLOWING EXCEPTIONS:                      *
*                                                                     *
*              1. TP WAS ABENDING ON A 213, 033 OR AN 03B - PARTITION *
*                                                                     *
*                 NOT PRINTED.                                        *
*                                                                     *
*              2. NO TASKS ABENDING - ALL PARTITIONS PRINTED.         *
*                                                                     *
*              3. 'DUMP' COMMAND HAS BEEN ISSUED - ALL PARTITIONS     *
*                                                                     *
*                 PRINTED.                                            *
*                                                                     *
*                                                                     *
*        REGISTER USAGE:                                              *
*                                                                     *
*              R0 - SYSTEM/WORK                                       *
*              R1 - SYSTEM/WORK                                       *
*              R2 - WORK                                              *
*              R3 - WORK                                              *
*              R4 - TEMP REGISTER SAVE                                *
*              R5 -                                                   *
*              R6 -                                                   *
*              R7 -                                                   *
*              R8 - STORAGE CONTROL CARD ENTRY ->                     *
*              R9 - DUMP STORAGE ADDRESSES                            *
*             R10 - BAL REGISTER                                      *
*             R11 -                                                   *
*             R12 - BASE                                              *
*             R13 - SAVE                                              *
*             R14 - SYSTEM/WORK                                       *
*             R15 - SYSTEM/WORK                                       *
*                                                                     *
*                                                                     *
*        WRITTEN BY CHRIS HUTCHINS, JUNE 1972,                        *
*                                                                     *
*        WEST SUSSEX COUNTY COUNCIL SYSTEMS PROGRAMMING GROUP.        *
*                                                                     *
***********************************************************************
         EJECT
SYSBDUMP CSECT
         BEGIN
         L     R1,0(R1)            LOAD ADDRESS OF PARM FIELD
         LH    R2,0(R1)            LOAD PARM FIELD LENGTH
         LTR   R2,R2               PARM SPECIFIED?
         BZ    NOPARM              NO, THEN BRANCH
         CH    R2,=H'78'           LONGER THAN ALLOWED?
         BC    12,PLTHOK           NO, THEN BRANCH
         LH    R2,=H'78'           SET UP TRUNCATED LENGTH
PLTHOK   BCTR  R2,0                DECREMENT FOR MVC
         EX    R2,PARMMVC
         B     OPEN
NOPARM   MVI   TSW,X'FF'           SET TITLE DEFAULT SWITCH
OPEN     OPEN  (DUMP,,CARDS,(OUTPUT,REREAD))
*
*        WRITE OUT TITLE CARD
*
         CLI   TSW,X'FF'           DEFAULT TITLE CARD?
         BE    GETREL              NO, THEN GET RELEASE NO.
TCARDPUT LA    R0,TCARD
         BAL   R10,PUT
*
*        GET FIRST BLOCK OF CORE
*
         LA    R1,X'4C'            LOAD ADDRESS REQ'D (CVT POINTER)
         BAL   R10,GETCORE         GET CORE
         CLC   COREADD1,=F'0'      IS DUMP DATA SET EMPTY
         BNE   EMPTYDMP            YES, THEN BRANCH
         L     R1,0(R1)            LOAD ADDRESS REQ'D (CVT)
         BAL   R10,GETCORE         GET CORE
         TM    182(R1),B'00001000' MFT WITH SUBTASKING?
         BZ    *+8                 NO, THEN BRANCH
         MVI   SUBTASK,X'FF'       SET SUBTASKING SWITCH
         L     R1,124(R1)          LOAD ADDRESS REQ'D (I/O FREELIST)
         BAL   R10,GETCORE
         L     R1,4(R1)            GET TCB LIST POINTER
         BAL   R10,GETCORE
         LA    R9,LOWNHIGH         LOAD LOW & HIGH ADDRESS POINTER
*
*        SCAN THROUGH TCB'S TO CHECK FOR TASKS ABENDING AFTER CHECKING
*        TO SEE IF 'DUMP' WAS IN PROGRESS.
*
         L     R4,0(R1)            LOAD 1ST TCB ADDRESS
         CLI   SUBTASK,X'00'       SUBTASKING?
         BE    TCB2                NO, THEN BRANCH
         L     R1,12(R1)           LOAD ADDRESS 4TH TCB
         B     TCB2+4              SKIP NEXT INSTRUCTION
TCB2     L     R1,8(R1)            LOAD 3RD TCB ADDRESS (MS)
         BAL   R10,GETCORE
         TM    172(R1),X'01'       'DUMP' IN PROGRESS
         BO    DUMPCD              YES, THEN BRANCH
         LR    R1,R4               LOAD TCB ADDRESS (1ST)
         B     SKIP                SKIP OVER FIRST TIME ROUND
NEXTTCB  L     R1,116(R1)          LOAD NEXT TCB ADDRESS
         LA    R1,0(R1)            ZERO HIGH ORDER BYTE
         C     R1,=F'0'            LAST IN CHAIN?
         BE    ENDTCBS             YES, THEN BRANCH
         LR    R4,R1               SAVE TCB ADDRESS
SKIP     BAL   R10,GETCORE
         CLC   16(4,R1),=F'0'      TASK ABENDING?
         BE    NEXTTCB             NO, THEN BRANCH
         CLC   125(3,R1),=X'000000'    SYS TASK ABENDING (PIB -> = 0)?
         BNE   USERTASK            NO, THEN BRANCH
         MVI   SYSABEND,X'FF'      SET SYSTEM TASK ABEND SWITCH
         B     NEXTTCB
*
*        CHECK IF TP ABEND THAT HAS BEEN MASKED OFF
*
USERTASK CLI   TPFOUND,X'FF'       TP PARTITION ALREADY FOUND?
         BE    DUMPIT              YES, THEN BRANCH
         L     R1,0(R1)            LOAD RB ADDRESS
NEXTRB   BAL   R10,GETCORE
         TM    11(R1),X'80'        RB 'NEXT' TO TCB
         BC    1,YESRBN            YES, THEN BRANCH
         L     R1,28(R1)           POINT TO NEXT RB
         B     NEXTRB
YESRBN   CLC   0(7,R1),=C'DFHDCSA' TP ACTIVE? (CICS)
         BE    CICS
         CLC   0(6,R1),=C'DFHSIP'  CICS INITILISATION?
         BNE   DUMPIT              NO, THEN BRANCH
CICS     MVI   TPFOUND,X'FF'       SET TP FOUND SWITCH
         LR    R1,R4               RESTORE TCB ADDRESS
         BAL   R10,GETCORE
         L     R2,16(R1)           LOAD COMPLETION CODES
         LA    R15,3               SET BCT COUNT
         LA    R3,TPCMPCDE         LOAD TABLE ADDRESS
NEXTABND CLM   R2,6,0(R3)          TP COMPLETION CODE?
         BE    NEXTTCB             YES, THEN BRANCH
         LA    R3,2(R3)            INCREMENT TO NEXT COMPLETION CODE
         BCT   R15,NEXTABND
DUMPIT   LR    R1,R4               RESTORE TCB ADDRESS
         BAL   R10,GETCORE
         CLI   SUBTASK,X'00'       SUBTASKING?
         BE    NOSUB               NO, THEN BRANCH
         L     R1,44(R1)           LOAD JOB STEP TCB ADDRESS
         BAL   R10,GETCORE
NOSUB    L     R1,24(R1)           LOAD BOUNDARY BOX ADDRESS
         BAL   R10,GETCORE
         LM    R0,R1,4(R1)         LOAD LOW & HIGH ADDRESSES
         STM   R0,R1,0(R9)         SAVE ADDRESSES
         LA    R9,8(R9)            INCREMENT TO NEXT ADDRESS AREA
         LR    R1,R4               RESTORE TCB ADDRESS
         BAL   R10,GETCORE
         B     NEXTTCB
*
*        END OF ALL TCBS REACHED
*
ENDTCBS  CLC   LOWNHIGH(4),=F'0'   ANY TASKS ABENDED?
         BE    SYSTASKS            NO, THEN BRANCH
         CLC   LOWNHIGH+8(4),=F'0' MORE THAN ONE PAIR
         BE    SBUILD              NO, THEN BRANCH
*
*        SCAN THROUGH TABLE COMBINING CONTIGUOUS ADDRESSES
*
         LH    R2,=H'-8'
         LR    R1,R9
         AR    R1,R2               POINT TO LAST ENTRY IN TABLE
         AR    R1,R2               POINT TO SECOND TO LAST ENTRY
         LA    R3,LOWNHIGH-8       POINT TO TABLE MINUS 1 ENTRY
COMPARE  CLC   0(4,R1),12(R1)      ENTRIES CONTIGUOUS?
         BNE   NOTSAME             NO, THEN BRANCH
         MVC   0(4,R1),8(R1)       COMBINE ENTRIES
         MVC   8(4,R1),=4X'FF'     SET INDICATOR FOR NULL ENTRY
NOTSAME  BXH   R1,R2,COMPARE
*
*        BUILD STORAGE PRINT CARDS
*
SBUILD   EQU   *
         LA    R3,LOWNHIGH-8       POINT TO TABLE MINUS ONE ENTRY
         SH    R9,=H'8'            POINT TO LAST TABLE ENTRY
         MVC   ONGOTYPE(5),=C'N,S=('    MOVE IN 'N & S' PARAMETER
         LA    R8,ONGOTYPE+5       LOAD ADDRESS FOR CURRENT ENTRY
SNEXT    CLC   0(4,R9),=4X'FF'     NULL ENTRY?
         BNE   GOOD                NO, THEN BRANCH
         SH    R9,=H'8'            POINT BACK TO PREVIOUS ENTRY
         B     NULLCONT
GOOD     LA    R2,2                LOAD PASS COUNT
NEXTFLD  LA    R9,1(R9)
         CALL  WSHEXEX,((R9),(R8),H3)
         BCTR  R9,0
         MVI   6(R8),C','          MOVE IN FIELD SEPERATOR
         LA    R8,7(R8)            INCREMENT TO NEXT FIELD
         LA    R9,4(R9)            INCREMENT TO NEXT LOCATION
         BCT   R2,NEXTFLD
         SH    R9,=H'16'           POINT BACK TO PREVIOUS ENTRY
NULLCONT CR    R9,R3               END OF TABLE?
         BH    SNEXT               NO, THEN BRANCH
         BCTR  R8,0                POINT TO LAST COMMA
         MVI   0(R8),C')'          INSERT ENDING BRACKET
         B     PRINTALL
SYSTASKS CLI   SYSABEND,X'00'      ANY SYSTEM TASKS ABENDED?
         BE    NOABEND             NO, THEN BRANCH
         MVI   ONGOTYPE,C'N'       PRINT NUCLEUS ONLY
*
*        PRINT ALL ROUTINE - WRITE OUT REMAINDER OF CONTROL CARDS
*        AND CLOSE FILES ABENDING IF NECESSARY
*
PRINTALL EDIT  ENDWTP1+54,ENTRY,'XXX0X'
         EDIT  ENDWTP2+72,ENTRYIN,'XXX0X'
ENDWTP1  WTP   'SYSBDUMP - NUMBER OF ENTRIES TO READ ROUTINE = NNNNN.'
ENDWTP2  WTP   'SYSBDUMP - NUMBER OF TIMES REQUIRED RECORD WAS ALREADY -
               IN CORE = NNNNN.'
         LA    R0,ONGO             WRITE
         BAL   R10,PUT                   OUT
         LA    R0,GO                         THE
         BAL   R10,PUT                           REMAINING
         LA    R0,END                                      CONTROL
         BAL   R10,PUT                                            CARDS
         CLOSE (CARDS,REREAD)
         CLI   ABENDCDE+1,X'01'    IO ERROR (DON'T CLOSE DUMP FILE)
         BE    ABEND               YES, THEN BRANCH
         CLOSE DUMP
         CLC   ABENDCDE,=H'0'      ANY TASKS ABENDING?
         BNE   ABEND               YES, THEN BRANCH
*
*        RETURN TO SYSTEM
*
         LH    R15,RETCODE         LOAD RETURN CODE
         FINISH RC=(15)
         SPACE 5
*
*        ABEND TASK
*
ABEND    LH    R1,ABENDCDE         LOAD ABEND CODE
         ABEND (1),DUMP
         EJECT
*
*        EMPTY DATA SET
*
EMPTYDMP WTP   'SYSBDUMP - SYS1.DUMP DATA SET EMPTY.'
         MVI   RETCODE+1,X'04'     SET RETURN CODE = 4
         B     PRINTALL
         SPACE 4
*
*        'DUMP' COMMAND ISSUED
*
DUMPCD   WTP   'SYSBDUMP - ''DUMP'' COMMAND ISSUED.'
         B     PRINTALL
         SPACE 4
*
*        NO TASKS ABENDING
*
NOABEND  WTP   'SYSBDUMP - NO TASKS ABENDING'
         B     PRINTALL
         EJECT
*
*        GET CORE ROUTINE
*
*        EACH BLOCK IS IN THE FOLLOWING FORMAT:
*
*        KEY   DS   F       -  ACTUAL CORE ADDRESS OF DUMPED BLOCK
*        DATA  DS   XL1024  -  1K BLOCK OF DUMPED CORE
*
         SPACE 3
*
*        CALCULATE WHICH BLOCK REQ'D
*
GETCORE  AP    ENTRY,=P'1'         INCREMENT NO. OF TIMES ROUTINE ENTRY
         CP    ENTRY,=P'1000'      1,000 ENTRIES TO GET CORE ROUTINE?
         BL    LESS1000            NO, THEN BRANCH
         LA    R15,1000            SET ABEND
         STH   R15,ABENDCDE                  CODE = 1000
         B     PRINTALL
LESS1000 LA    R1,0(R1)            CLEAR HIGH ORDER BYTE
         SLR   R0,R0               CLEAR R0
         D     R0,=F'1024'         DIVIDE BY 1024
         STH   R0,COFFSET          STORE REMAINDER (OFFSET WITHIN 1K)
         C     R1,CURRENTB         BLOCK ALREADY LOADED?
         BE    INCORE              YES, THEN BRANCH
         ST    R1,CURRENTB         SAVE CURRENT BLOCK ADDRESS
         LA    R1,1(R1)            INCREMENT TO ACTUAL BLOCK NUMBER
         ST    R1,CBLK1NO          STORE 1ST BLOCK NO
         LA    R1,1(R1)            CALCULATE AND
         ST    R1,CBLK2NO                        STORE 2ND BLOCK NO
*
*        READ IN BLOCKS
*
         READ  DECB1,DI,DUMP,COREBLK1,1024,COREADD1,CBLK1NO+1
         WAIT  ECB=DECB1
         CLC   DECB1+1(2),=X'0000' CHECK FOR ANY ERRORS
         BNE   IOERROR             YES, THEN BRANCH
         READ  DECB2,DI,DUMP,COREBLK2,1024,COREADD2,CBLK2NO+1
         WAIT  ECB=DECB2
         CLC   DECB2+1(2),=X'0000' CHECK FOR ANY ERRORS
         BNE   IOERROR             YES, THEN BRANCH
         LM    R2,R3,COREADD1      LOAD BLOCK ADDRESSES
         LA    R2,0(R2)             CLEAR HIGH ORDER BYTE
         LA    R3,0(R3)             CLEAR HIGH ORDER BYTE
         SR    R3,R2               CHECK IF
         SH    R3,=H'1024'                  AREAS CONTIGUOUS
         BNZ   NOTCONTG            NO, THEN BRANCH
         B     *+10
INCORE   AP    ENTRYIN,=P'1'       INCREMENT NO. OF TIMES IN CORE
         LA    R1,COREBLK1         LOAD CORE BLOCK1 ADDRESS
         AH    R1,COFFSET          RETURN ACTUAL ADDRESS OF ADD. REQ'D
         BR    R10                 RETURN
         SPACE 5
*
*        HANDLE IO ERRORS
*
IOERROR  TM    DECB1+1,X'80'       RECORD NOT FOUND CONDITION?
         BNO   IOABEND             NO, THEN BRANCH
         CLI   CBLK1NO+3,X'01'     FIRST BLOCK BEING READ?
         BE    EMPTYDMP            YES,THEN BRANCH
IOABEND  MVI   ABENDCDE+1,X'01'    SET ABEND CODE
         B     PRINTALL            BRANCH TO PRINT ALL
         SPACE 5
*
*        AREAS NOT CONTIGUOUS
*
NOTCONTG MVI   ABENDCDE+1,X'02'    SET ABEND CODE
         B     PRINTALL            BRANCH TO PRINT ALL
         SPACE 10
*
*        PUT ROUTINE
*
PUT      PUT   CARDS,(0)
         BR    R10
         SPACE 5
PARMMVC  MVC   TCARD+2(0),2(R1)
         SPACE 8
*
*        GET RELEASE NUMBER
*
GETREL   LA    R1,X'4C'
         BAL   R10,GETCORE
         L     R1,0(R1)            LOAD CVT ADDRESS
         SH    R1,=H'4'            POINT TO CVT-4
         BAL   R10,GETCORE
         MVC   RELNO(2),0(R1)
         MVC   RELNO+3(1),2(R1)
         MVI   RELNO+2,C'.'
         MVC   TCARD+2(L'DEFTITLE+4),DEFTITLE  INSERT DEFAULT TITLE
         B     TCARDPUT
         EJECT
*
*        CONSTANTS
*
TCARD    DC    C'T',79C' '
ONGO     DS    0CL80
         DC    C'ONGO Q,F,P '
ONGOTYPE DC    C'A'
         DC    68C' '
GO       DC    CL80'GO'
END      DC    CL80'END'
RETCODE  DC    H'0'
TPFOUND  DC    X'00'
SUBTASK  DC    X'00'
TSW      DC    X'00'
H2       DC    H'2'
H3       DC    H'3'
ABENDCDE DC    H'0'
COFFSET  DC    H'0'
CBLK1NO  DC    F'0'
CBLK2NO  DC    F'0'
LOWNHIGH DC    32F'0'
CURRENTB DC    0F'0',4X'FF'
ENTRY    DC    PL3'0'
ENTRYIN  DC    PL3'0'
TPCMPCDE DC    X'2130'
         DC    X'0330'
         DC    X'03B0'
SYSABEND DC    X'00'
DEFTITLE DC    C'W.S.C.C. CORE IMAGE DUMP - MFT '
RELNO    DC    CL4' '
         LTORG
         EJECT
*
*        D.C.B'S.
*
DUMP     DCB   RECFM=F,MACRF=RI,DSORG=DA,DDNAME=DUMP,                  -
               BLKSIZE=1024,OPTCD=R,KEYLEN=4
         EJECT
CARDS    DCB   RECFM=F,DSORG=PS,MACRF=PM,DDNAME=CARDS,                 -
               LRECL=80,BLKSIZE=80
         SPACE 10
*
*        AREA TO READ IN 4 BYTE KEYS AND 2 X 1K BLOCKS OF DUMPED
*        CORE.  KEYS ARE ACTUAL ADDRESSES OF DUMPED CORE BEFORE
*        DUMPING.
*
         DS    0D
COREADD1 DC    F'0'
COREADD2 DC    F'0'
COREBLK1 DS    XL2048
COREBLK2 EQU   COREBLK1+1024
         END
         TITLE 'SUB-ROUTINE TO TRANSLATE HEX QUARTETS TO CHARACTERS'
         ISEQ  73,80
WSHEXEX  CSECT
         SPACE 2
*  ON ENTRY, R1 PARAMETER LIST IS:
*        1. ADDR. OF "FROM" AREA
*        2. ADDR. OF "TO" AREA
*        3. ADDR. OF HALF-WORD CONTAINING "FROM" LENGTH
         SPACE 2
         STM   14,2,12(13)
         LM    14,0,0(1)           R14, FROM ADDR.;  R15, TO ADDR.
         LR    1,0
         LH    1,0(1)              R1, LENGTH
         BCTR  1,0
         AR    1,14                R1 NOW END OF FROM AREA FOR BXLE
         LA    0,1                 CONSTANT FOR INCREMENT IN BXLE
         BALR  2,0
         USING *,2
LOOP     MVC   1(1,15),0(14)
         MVO   0(2,15),1(1,15)
         NI    1(15),X'0F'
         TR    0(2,15),TABLE
         LA    15,2(15)
         BXLE  14,0,LOOP
         LM    14,2,12(13)
         BR    14
         SPACE 2
TABLE    DC    C'0123456789ABCDEF'
         END
