 /*       THIS PROGRAM FORMATS THE OUTPUT OF THE TSG OVERLAY TRACE
         PROGRAM. IT SHOULD BE INVOKED WITH THE DDCARD 'TRACE'
         TO DESCRIBE THE TRACE DATA SET. OUTPUT IS ON SYSPRINT        */
 OUTRACE:PROC OPTIONS(MAIN) REORDER;
        %DCL $ARRAY_BOUND FIXED;       /* IF THE ACCUMULATING ARRAY  */
        %$ARRAY_BOUND = 1000;          /*A IS NOT LARGE ENOUGH, THE  */
                                       /*PROGAM STOPS BY SIGNAL ERROR*/
                                       /* THE MAXIMUM VALUE OF THIS  */
                                       /*VARIABLE IS 32760, WHEN THE */
                                       /*ARRAY WILL OCCUPY 33OK      */
         /* ACCUMULATING ARRAYS*/
         DCL  1 A(0:$ARRAY_BOUND),
               2 STRING CHAR(8),
               2 COUNT FIXED BIN(15);  /*MAXIMUM IDENTICAL CALLS =32K*/
         DCL B LIKE A;
         DCL  TOT(256) FIXED BIN(16) STATIC INIT((256)0);
         /* INPUT RECORD       */
         DCL  1 RECORD,
               2 BITFIL BIT(6),
               2 LOADED BIT(1),
               2 CALLER_CHAIN BIT(1),
               2 RETURN CHAR(3),
               2 SEGTO CHAR(1),
               2 TARGET CHAR(3);
         ON ENDFILE (TRACE) GO TO PRINT ;
         DCL(I,J,K,L,M)FIXED BIN(16);  /* COUNTERS */
         DCL STRING CHAR(8);           /* USED IN ACCUMULATION */
         A.STRING(0)=LOW(8);           /*LOWEST VALUE AS STARTER     */
         A.STRING(1)=HIGH(8);          /*LARGEST VALUE AS STARTER    */
         K=1;                          /* K HOLDS CURRENT BOUND OF A */
         /* LOOP, READING A.RECORD */
 BUILD:  DO I=0 BY 1 ;
           READ FILE(TRACE) INTO(RECORD);
           STRING = SEGTO××TARGET××RETURN;
 /*    : THIS COMMENT ILLUSTRATES THE MECHANISM OF ADDING OR MATCHING*/
 /*           A STRING BY THE BINARY SEARCH TECHNIQUE                */
 /*    : ADD STRING OF VALUE  H TO STRINGS OF VALUE A,B,C,D,E,F,G,Z. */
 /*    : SUCCESSIVE VALUSE OF L WILL BE 4 , 6 , 7 .                  */
 /*    : AFTER SHIFTING THE STRINGS THE VALUES WILL BE A,B,C,D,E,    */
 /*                                                        F.G.G.Z   */
 /*    : THE SEVENTH STRING (G) IS LESS THAN H , SO L=L+1            */
 /*    : H IS NOW INSERTED AT POSITION L  A,B,C,D,E,F,G,H,Z          */
 /*                                                                  */
 /*    OTHER EXAMPLES G ABCDEFGHIJKZ                                 */
 /*                          1432      MATCH AT 4TH VALUE OF L       */
           J,L=(K+1)/2;                /*INITIAL VALUES FOR          */
           M=J/2;                      /*     BINARY SEARCH           */
 BINSEARCH:DO WHILE (M>0);
             IF STRING < A.STRING(L) THEN L=L-M;
             ELSE IF STRING > A.STRING(L) THEN L=L+M;
             ELSE GO TO MATCH;
             J=(J+1)/2;
             M=J/2;
           END BINSEARCH;
           IF STRING =A.STRING(L) THEN GO TO MATCH;   /* TEST LAST L*/
 NEW_ENTRY:/* SHIFT OLD ENTRIES TO ADD A NEW STRING */
           IF $ARRAY_BOUND = K+1 THEN DO;
         %DEACTIVATE $ARRAY_BOUND;
              PUT EDIT ('*** ARRAY USED TO ACCUMULATE CALLS IS FULL, ')
                    (A)
                    ('RECOMPILE PROGRAM AND INCREASE $ARRAY_BOUND ***')
                    (A);
         %ACTIVATE $ARRAY_BOUND;
              SIGNAL ERROR;
              END;
           DO M = K BY -1 TO L;
             A(M+1) = A(M);
           END;
           /* BINARY SEARCH MAY POINT NEXT HIGHER,OR NEXT LOWER, SO  */
           IF A.STRING(L) < STRING THEN L=L+1;
           K=K+1;
           A.STRING(L) = STRING;
           A.COUNT(L) = 0;
         /* DROP THROUGH TO  */
 MATCH:    A.COUNT(L)=A.COUNT(L)+1;
         END BUILD;
         /* PRINT RESULTS */
         DCL(SEGCALLS,EPCALLS) FIXED BIN(16) INIT(0) STATIC;
         DCL PRINTIND CHAR(1) INIT('2');/*'2' = NEW SEGMENT,*/
                                        /*'1' = NEW ENTRY POINT */
         DCL EP CHAR(6);                /* HEX(ENTRY POINT)     */
         DCL ISEG FIXED DEC(3);         /* UNSPEC(SEGMENT NO.   */
         DCL CHWORK CHAR(12);           /* CHAR WORK AREA       */
         DCL TOTAL FIXED BIN(16) INIT(0);/*CHECK AGAINST SIZE   */
         DCL HEX ENTRY(CHAR(*)) RETURNS(CHAR(12) VAR) REDUCIBLE;
 PRINT:  ON ENDPAGE(SYSPRINT) PUT EDIT
                   ('CALLS TO SEGMENT NUMBER',ISEG)(PAGE,X(10),A,F(4));
         K=K-1;                        /* A.STRING(K) WAS HIGH(8)    */
         A.STRING(K+1) = LOW(1);       /* SEGNO(K) ^= LOW */
 LISTING:DO J = 1 BY 1 TO K;           /* SCAN A, PRINTING RESULTS*/
           IF PRINTIND = '2' THEN DO;
              PRINTIND = '1';
              ISEG = UNSPEC(SUBSTR(A.STRING(J),1,1));
              SIGNAL ENDPAGE(SYSPRINT);
              SEGCALLS = 0;
           END;
           IF PRINTIND = '1' THEN DO;
              PRINTIND = '0';
              EP = HEX(SUBSTR(A.STRING(J),2,3));
              PUT SKIP(2) EDIT
                   ('CALL TO OFFSET ',EP,' FROM')(A);
              EPCALLS=0;
           END;
           PUT EDIT
               (HEX(SUBSTR(A.STRING(J),5,3)),' TOTALED',A.COUNT(J))
               (COL(28),2 A,F(5));
           EPCALLS = EPCALLS + A.COUNT(J);
           IF SUBSTR(A.STRING(J),1,4) ^= SUBSTR(A.STRING(J+1),1,4)
              THEN DO;                 /* NEW ENTRY POINT, PRINT    */
              PRINTIND= '1';                                /*TOTALS*/
              SEGCALLS=SEGCALLS+EPCALLS;
              PUT EDIT(' : IN ALL',EPCALLS)(A,F(6));
           END;
           IF SUBSTR(A.STRING(J),1,1) ^= SUBSTR(A.STRING(J+1),1,1)
              THEN DO;                 /* NEW SEGMENT, PRINT TOTALS */
              PRINTIND = '2';
              TOT(ISEG)=SEGCALLS;
              PUT SKIP(2) EDIT
                  ('TOTAL CALLS TO SEGMENT',ISEG,' WERE',SEGCALLS)
                  (X(5),A,F(4),A,F(7));
           END;
         END LISTING;
         ON ENDPAGE(SYSPRINT) SYSTEM;
         PUT PAGE EDIT ('TOTAL CALLS TO EACH SEGMENT BY SVC 45')(A);
         PUT SKIP(3);
 SEGLIST:DO J=1 TO 256;
         IF TOT(J) ^= 0 THEN DO;
            PUT EDIT(J,':',TOT(J),' CALLS;')(F(4),A,P'*****9',A(9));
            TOTAL = TOTAL + TOT(J);
            END;
         END SEGLIST;
         IF I ^= TOTAL THEN DO;
            PUT EDIT ('*** A SIZE ERROR HAS OCCURRED ***',I,TOTAL)
                     (SKIP(3),A,F(7),F(7));
 /**********************************************************************
            SIGNAL ERROR;
***********************************************************************/
         END;
         PUT SKIP(3) EDIT ('TOTAL CALLS',TOTAL)(A,F(7));
         /* SORT THE CALLS INTO DESCENDING ORDER OF FREQUENCY        */
 SORT:   DO J=K BY -1 TO 2;
           DO M= 1 TO J-1;
             IF A.COUNT(M) < A.COUNT(J) THEN DO;
                B=A(J);
                A(J)=A(M);
                A(M)=B;
         END SORT;
         PUT PAGE EDIT ('MOST FREQUENT CALLS USING SVC 45')
                       (A);
         PUT SKIP(2) EDIT ('SEGMENT','ENTRY POINT','RETURN ADDRESS',
                                                           'CALLS')
                          (X(10),4 A(15));
         PUT SKIP(2);
         M=A.COUNT(1)/10;
         DO J=1 BY 1 TO MIN(30,K) WHILE (A.COUNT (J) > M);
            ISEG = UNSPEC(SUBSTR(A.STRING(J),1,1));
             CHWORK = HEX(SUBSTR(A.STRING(J),2,6));
            PUT SKIP EDIT
                (ISEG,SUBSTR(CHWORK,1,6),SUBSTR(CHWORK,7,6),A.COUNT(J))
                (X(12),F(3),X(10),2 A(15),F(5));
         END;
 END OUTRACE;
