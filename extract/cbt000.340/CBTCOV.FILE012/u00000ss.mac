AMM.     TITLE 'LIBRARY LINK-EDIT UTILITY - A.M.MORRISH'
         PUNCH '   ENTRY       RT5020M'
         PUNCH '   ALIAS       RTPLKED'
         EJECT                                                        *
RT5020M  CSECT
***********************************************************************
*                                                                     *
*  THIS PROGRAM MAY BE USED TO LINK-EDIT AN ENTIRE LIBRARY FROM THE   *
* DATA SET DEFINED BY THE DDNAME SYSLIB TO THE DATA SET DEFINED BY    *
* THE DDNAME SYSLMOD.                                                 *
*                                                                     *
*  THE PARAMETER LIST IS SCANNED FOR THE FOLLOWING ATTRIBUTES.        *
*                                                                     *
*        XREF, MAP, LIST, NCAL, DC, NE, OL, SIZE, DCBS                *
*                                                                     *
*        ANY OTHER ENTRY IN THE PARAMETER LIST IS AN ERROR AND NCAL   *
* IS ASSUMED IN ANY CASE. THE VERIFIED PARAMETER LIST IS USED AS A    *
* BASIC LIST FOR ALL INVOKED LINK EDITS.                              *
*                                                                     *
*  THE DIRECTORY OF SYSLIB IS THEN READ AND IS SCANNED FOR ALL NORMAL *
* ENTRIES (VIZ. NOT OVERLAY, SCATTER OR TESTRAN FORMATS). A SYSLIN    *
* DATA STREAM OF INCLUDE, ALIAS AND NAME CARDS IS GENERATED AND, WHEN *
* THE SCAN IS COMPLETE, THE PROGRAM LINKS TO THE LINKAGE EDITOR TO    *
* PROCESS THIS PARAMETER LIST. THIS PROCEDURE IS THEN REPEATED FOR    *
* OVERLAY, SCATTER AND TESTRAN FORMAT MODULES.                        *
*                                                                     *
*  WHEN THE LINK-EDITS ARE COMPLETE THE PROGRAM READS THE DIRECTORY   *
* OF THE SYSLMOD DATA SET AND COMPARES WITH THE NAMES IN THE SYSLIB   *
* DIRECTORY. THE FOLLOWING ACTION IS THEN TAKEN :                     *
*                                                                     *
*        NAME IN BOTH SYSLMOD AND SYSLIB DIRECTORIES :                *
*              THE TTRS OF THE SYSLMOD DIRECTORY ENTRY ARE MERGED     *
*              INTO THE SYSLIB DIRECTORY ENTRY. THE RESULT IS STOWED  *
*              AS THE NEW DIRECTORY ENTRY FOR SYSLMOD. THE ATTRIBUTES *
*              OF THE NEW ENTRY ARE LISTED IN THE SYSPRINT DATA SET.  *
*                                                                     *
*        NAME IN SYSLMOD DIRECTORY BUT NOT IN SYSLIB DIRECTORY :      *
*              THE NAME IS NOTED IN THE SYSPRINT DATA SET WITH THE    *
*              COMMENT 'ALREADY PRESENT'                              *
*                                                                     *
*        NAME IN SYSLIB DIRECTORY BUT NOT IN SYSLMOD DIRECTORY :      *
*              THE PROGRAME STORES THE NAME IN THE SYSPRINT DATA SET  *
*              WITH THE COMMENT 'NOT COPIED' AND ATTEMPTS TO SUGGEST  *
*              A REASON.                                              *
*                                                                     *
*  THE PROGRAM THEN RELEASES ALL ACQUIRED STORAGE AND TERMINATES.     *
*                                                                     *
*
*  THIS PROGRAM ISSUES A LOAD FOR RTPSTOW - RTPSTOW MUST THEREFORE BE
*  AVAILABLE IN A JOB, STEP, OR LINK LIBRARY AT EXECUTION TIME.
*
*                                                                     *
         SPACE 1
* REGISTER USAGE
R0       EQU   0                   WORK REGISTER.
R1       EQU   1                   WORK REGISTER / PARAMETER REGISTER.
R2       EQU   2                   WORK REGISTER / BXLE REGISTER.
R3       EQU   3                   BXLE REGISTER / LINK REGISTER.
R4       EQU   4                   BXLE REGISTER.
R5       EQU   5                   WORK REGISTER.
R6       EQU   6                   LINK REGISTER.
R7       EQU   7
R8       EQU   8
R9       EQU   9                   BUILD LIST POINTER.
R10      EQU   10                  BUILD LIST POINTER.
R11      EQU   11                  PARM LIST POINTER / PASS COUNTER.
RBASE    EQU   12                  BASE REGISTER.
R13      EQU   13                  SAVE AREA POINTER.
R14      EQU   14                  RETURN ADDRESS.
R15      EQU   15                  ENTRY POINT ADDRESS / RETURN CODE.
         EJECT
*
*        INITIALISE AND SCAN PARAMETERS.
*
         SPACE 1
*        BEGIN SAVE,BASE=RBASE     INITIALISE AND DEFINE BASE REGISTER.
         STM   14,12,12(13)
         BALR  RBASE,0
         USING *,RBASE
         LA    15,SAVE
         ST    15,8(13)
         ST    13,4(15)
         LR    13,15
         L     R11,0(R1)           SET GR11 -> PARAMETER LIST.
         LA    R1,2(R11)           SET GR1 -> FIRST PARM OF PARM LIST.
         LH    R0,0(R11)           SET GR0 = LENGTH OF PARM LIST.
         LTR   R0,R0               TEST SIGN OF GR0.
         BNP   PARMEND             IF NOT PLUS THEN NO PARAMETER LIST.
         AR    R0,R1               SET GR0 -> END OF BUFFER.
PARMLOOP LA    R2,KEYTAB2-KEYTAB   SET GR2 = INCREMENT VALUE.
         LA    R3,KEYTABND         SET GR3 -> END OF KEY-WORD TABLE.
         LA    R4,KEYTAB           SET GR2 -> KEY-WORD TABLE.
         SR    R5,R5               SET GR5 = 0.
         IC    R5,0(R4)            SET GR5 = KEY-WORD LENGTH.
         EX    R5,KEYCLC           IS THIS A VALID KEY-WORD ?
         BE    *+12                IF SO THEN GO TO CHECK PARAMETER.
         BXLE  R4,R2,*-12          LOOP UNTIL FOUND OR TABLE EXHAUSTED.
         B     ERR01               IF NOT FOUND THEN ERROR.
         LA    R1,1(R1,R5)         SET GR1 -> CHAR FOLLOWING KEY-WORD.
         BAL   R14,6(R4)           LINK TO APPROPRIATE SUB-ROUTINE.
         CR    R1,R0               IS IT END OF PARMS ?
         BE    PARMOUT             IF SO THEN EXIT.
         CLI   0(R1),C' '          IS NEXT CHARACTER A BLANK ?
         BE    PARMOUT             IF SO THEN EXIT.
         CLI   0(R1),C','          IS NEXT CHARACTER A COMMA ?
         BNE   ERR01               IF NOT THEN ERROR.
         LA    R1,1(R1)            INCREMENT GR1 FOR NEXT.
         B     PARMLOOP            GO TO TEST NEXT PARAMETER.
         SPACE 1
PARMOUT  LA    R0,3(R11)           SET GR0 FOR SUBTRACT.
         SR    R1,R0               SET GR1 = TOTAL LENGTH.
         EX    R1,MOVEPARM         MOVE PARAMETER LIST
         LA    R1,L'CNCAL+1(R1)    SET GR1 = LENGTH OF PARMS WITH NCAL.
         STH   R1,PARM             STORE INCREMENTED LENGTH.
         STH   R1,BASELEN          SAVE INCREMENTED LENGTH.
         LA    R1,PARM-L'CNCAL(R1) SET GR1 -> END OF PARAMETER LIST.
         MVC   2(L'CNCAL,R1),CNCAL SET NCAL LINK-EDIT OPTION.
PARMEND  DS    0H
         SPACE 1
*
*        INITIALISE TYPE LOOP.
*
         SPACE 1
         SR    R11,R11             SET GR11 = 0.
         BLDL  0,BLDL              BUILD LIST.
         LTR   R15,R15             TEST RETURN CODE.
         BNZ   ERR05               IF NOT ZERO THEN ERROR.
         SPACE 1
*
*        READ SYSLIB DIRECTORY.
*
         SPACE 1
PASSML2  MVC   PARM1(12),PARM2     STORE DCB ADDRESS IN PARM.
         MVI   PARM1,5             SET SHORT BLOCK.
         LINK  SF=(E,LINKL1),MF=(E,PARM1)    LINK TO RTPDIRD.
         LTR   R15,R15             TEST RETURN CODE.
         BNZ   ERR02               IF NOT ZERO THEN ERROR.
         SPACE 1
*
*        SCAN FOR VALID ENTRY AND CREATE SYSLIN.
*
         SPACE 1
PASSML   L     R10,PARM1           SET GR10 -> SIMULATED BUILD LIST.
         LA    R10,4(R10)          SET GR10 -> FIRST ENTRY IN BUILD LST
PASSLOOP CLI   0(R10),X'FF'        IS IT END OF LIST ?
         BE    LINK                IF SO THEN END OF PASS.
         TM    11(R10),X'80'       IS ENTRY AN ALIAS ?
         BO    PASSNEXT            IF SO THEN IGNORE
         L     R15,TESTTAB(R11)    SET GR15 -> ENTRY VALIDATION.
         BALR  R14,R15             LINK TO VALIDATION ROUTINE.
         B     PASSNEXT            ENTRY REJECTED RETURN.
         MVI   INCNM+8,C' '        BLANK OUT CLOSING PARENTHESIS.
         MVC   INCNM(8),0(R10)     STORE NAME IN INCLUDE CARD.
         LA    R1,INCNM+7          SET GR1 -> END OF NAME.
         CLI   0(R1),C' '          IS COLUMN BLANK ?
         BNE   *+8                 IF NOT THEN END FOUND
         BCT   R1,*-8              DECREMENT GR1 AND REPEAT.
         MVI   1(R1),C')'          INSERT CLOSING PARENTHESES.
         LA    R2,INCCARD          SET GR1 -> INCLUDE CARD.
         BAL   R3,SUBWRITE         LINK TO WRITE CARD.
         L     R9,PARM1            SET GR9 -> SIMULATED BUILD LIST.
         LA    R9,4(R9)            SET GR9 -> FIRST ENTRY IN BUILD LIST
ALIASLP  CLI   0(R9),X'FF'         IS IT END OF LIST ?
         BE    ALIASEND            IF SO THEN END OF ALIASES.
         TM    11(R9),X'80'        IS ENTRY AN ALIAS ?
         BZ    ALIASNXT            IF NOT THEN GO TO TRY NEXT.
         CLC   8(3,R9),8(R10)      IS TTR OF FIRST BLOCK THE SAME ?
         BNE   ALIASNXT            IF NOT THEN GO TO TRY NEXT.
         MVC   ALIASNM,0(R9)       STORE ALIAS NAME.
         LA    R2,ALSCARD          SET GR2 -> ALIAS CARD.
         BAL   R3,SUBWRITE         LINK TO WRITE CARD.
ALIASNXT LA    R9,22(R9)           SET GR9 -> NEXT ENTRY IN BUILD LIST.
         B     ALIASLP             GO TO TRY NEXT ENTRY.
ALIASEND MVC   NAMNM,0(R10)        STORE NAME IN NAME CARD.
         LA    R1,NAMNM+7          SET GR1 -> END OF NAME.
         CLI   0(R1),C' '          IS CHARACTER BLANK ?
         BNE   *+8                 IF NOT THEN END FOUND.
         BCT   R1,*-8              LOOP UNTIL FOUND.
         MVC   1(4,R1),CREP        STORE REPLACE INDICATOR.
         LA    R2,NAMCARD          SET GR2 -> NAME CARD.
         BAL   R3,SUBWRITE         LINK TO WRITE CARD.
         SPACE 1
PASSNEXT LA    R10,22(R10)         SET GR10 -> NEXT ENTRY IN BUILD LIST
         B     PASSLOOP
         SPACE 1
*
*        TEST FOR SYSLIN CREATION AND LINK TO IEWL IF REQUIRED.
*
         SPACE 1
LINK     TM    LIN+48,X'10'        IS SYSLIN DATA SET OPEN ?
         BZ    LINKEND             IF NOT THEN NO LINK.
         L     R1,PARM1            SET GR1 -> DYNAMIC BUILD LIST.
         LH    R0,PARM1+4          SET GR0 = LENGTH OF BUILD LIST.
         FREEMAIN R,LV=(0),A=(1)   RELEASE DYNAMIC AREA.
         XC    PARM1(6),PARM1      CLEAR PARM1 POINTERS.
         CLOSE MF=(E,CLOSEL1)      CLOSE SYSLIN.
         LINK  SF=(E,LINKL2),MF=(E,PARMPTR)  LINK TO LINK EDIT.
LINKEND  L     R15,SETTAB(R11)     SET GR15 -> ROUTINE TO SET NEW PARMS
         BALR  R14,R15             LINK TO ROUTINE TO SET NEW PARMS.
         LA    R11,4(R11)          SET GR11 -> NEXT OFFSET ENTRY.
         OC    PARM1(6),PARM1      COMPARE FOR PARM 1 RELEASED.
         BZ    PASSML2             IF RELEASED THEN GO TO MAIN LOOP.
         B     PASSML              GO TO MAIN LOOP.
         EJECT
*
*        READ SYSLMOD DIRECTORY.
*
         SPACE 1
STOW     LOAD  DE=BLDL+120         LOAD RTPSTOW.
         ST    R0,STOWADR          STORE ADDRESS OF ENTRY POINT.
         OC    PARM1(6),PARM1      COMPARE FOR DYNAMIC AREA RELEASED.
         BZ    STOWGET             IF RELEASED THEN GO TO OBTAIN SPACE.
         L     R1,PARM1            SET GR1 -> DYNAMIC AREA.
         LH    R0,PARM1+4          SET GR0 = LENGTH OF DYNAMIC AREA.
         FREEMAIN R,LV=(0),A=(1)   RELEASE DYNAMIC AREA.
STOWGET  MVC   PARM1(12),PARM2     SET PARM1 -> DCB.
         LINK  SF=(E,LINKL1),MF=(E,PARM1)    LINK TO RTPDIRD.
         MVC   LMOD+40(8),CLMOD    SET SYSLMOD DDNAME IN DCB.
         LINK  SF=(E,LINKL1),MF=(E,PARM2)    LINK TO RTPDIRD
         LTR   R15,R15             TEST RETURN CODE.
         BNZ   ERR03               IF NOT ZERO THEN ERROR.
         SPACE 1
*
*        OPEN DATA SETS
*
         SPACE 1
         OPEN  MF=(E,OPENL1)       OPEN SYSLMOD AND SYSPRINT DATA SETS.
         SPACE 1
*
*        OBTAIN SPACE FOR OUTPUT LINES.
*
         SPACE 1
         LH    R0,PGSIZE           SET GR0 = NUMBER OF BYTES PER PAGE.
         GETMAIN R,LV=(0)          OBTAIN DYNAMIC STORAGE SPACE.
         ST    R1,PGSTART          STORE START OF PAGE ADDRESS.
         AH    R1,PGSIZE           SET GR1 -> END OF PAGE
         ST    R1,PGEND            STORE END OF PAGE ADDRESS.
         SPACE 1
*
*        INITIALISE STOW AND COMMENT LOOP.
*
         SPACE 1
         L     R10,PARM1           SET GR10 -> SYSLIB BUILD LIST.
         LA    R10,4(R10)          SET GR10 -> FIRST ENTRY IN BUILD LST
         L     R9,PARM2            SET GR9 -> SYSLMOD BUILD LIST.
         LH    R8,2(R9)            SET GR8 = LENGTH PER MEMBER.
         LA    R9,4(R9)            SET GR9 -> FIRST ENTRY IN BUILD LIST
         SPACE 1
STOWSET  L     R11,PGSTART         SET GR11 -> FIRST LINE.
         MVI   0(R11),X'09'        SET SPACE 1 CODE.
         MVI   1(R11),C' '         BLANK FIRST BYTE.
         MVC   2(119,R11),1(R11)   BLANK ENTIRE LINE.
         LR    R1,R11              SET GR1 -> FIRST LINE.
         LA    R0,51               SET GR0 = NUMBER OF LINES -1.
         MVC   121(121,R1),0(R1)   SET NEXT LINE.
         LA    R1,121(R1)          INCREMENT GR1 FOR NEXT LINE.
         BCT   R0,*-10             LOOP UNTIL ALL LINES IN PAGE CLEARED
         SPACE 1
*
*        COMPARE NAMES AND SET STOW AND WRITE MESSAGES.
*
         SPACE 1
STOWLOOP CLI   0(R10),X'FF'        END OF SYSLIB DIRECTORY ?
         BNE   *+12                IF NOT THEN USE.
         CLI   0(R9),X'FF'         END OF SYSLMOD DIRECTORY ?
         BE    STOWOUT             IF SO THEN GO TO WRITE LAST PAGE.
         CLC   0(8,R9),0(R10)      COMPARE NAME IN SYSLMOD WITH SYSLIB.
         BL    STOWLO              IF LESS THEN GO TO WRITE ALREADY THR
         BH    STOWHI              IF GREATER THEN GO TO WRITE NOT THRE
         NI    21(R10),X'7F'       REMOVE DC ATTRIBUTE FOOM SYSLIB.
         OC    20(2,R9),20(R10)    COPY ATTRIBUTES FROM SYSLIB.
         MVC   27(3,R9),27(R10)    COPY ENTRY POINT ADDRESS FROM SYSLIB
         OC    27(3,R9),27(R9)     TEST FOR ENTRY ADDRESS ZERO.
         BZ    *+8                 IF ZERO THEN LEAVE.
         NI    21(R9),X'DF'        REMOVE 'EP=0' FLAG.
         IC    R2,11(R9)           SET GR2 = LENGTH OF SYSLMOD ENTRY.
         IC    R3,11(R10)          SET GR3 = LENGTH OF SYSLIB ENTRY.
         LA    R4,X'1F'            SET GR4 FOR MASK.
         NR    R2,R4               CLEAR UNWANTED BITS IN GR2.
         NR    R3,R4               CLEAR UNWANTED BITS IN GR3.
         LA    R2,11(R2,R2)        SET GR2 = LENGTH IN BYTES (-1).
         LA    R3,11(R3,R3)        SET GR3 = LENGTH IN BYTES (-1).
         EX    R3,ENTMOVE          MOVE SYSLIB ENTRY TO WORK AREA.
         EX    R2,ENTMOVE+6        OVER-RIDE WITH SYSLIB ENTRY.
         MVC   READAR+11(1),11(R10)     RESTORE LENGTH OF SYSLIB ENTRY.
         LA    R0,READAR           SET GR0 -> DIRECTORY ENTRY.
         MVC   1(8,R11),0(R9)      STORE MEMBER NAME IN SYSPRINT.
         LA    R1,LMOD             SET GR1 -> SYSLMOD DCB
         L     R15,STOWADR         SET GR15 -> RTPSTOW ENTRY POINT.
         BALR  R14,R15             LINK TO RTPSTOW.
         LTR   R15,R15             TEST RETURN CODE.
         BNZ   ERR04               IF NOT ZERO THEN ERROR.
         UNPK  11(7,R11),27(4,R9)  STORE ENTRY POINT ADDRESS.
         TR    11(6,R11),TRTAB     TRANSLATE TO PRINTABLE FORMAT.
         MVI   17(R11),C' '        REMOVE EXTRA CHARACTER FROM UNPACK.
         SPACE 1
*
*        STORE ATTRIBUTES OF MEMBER IN SYSPRINT.
*
         SPACE 1
         SR    R6,R6               SET GR6 = 0.
         LA    R2,ATRTAB2-ATRTAB   SET GR2 = INCREMENT VALUE.
         LA    R3,ATRTBND1         SET GR3 ->END OF ATTRIBUTE TABLE A.
         LA    R4,ATRTAB           SET GR4 -> ATTRIBUTE TABLE.
         IC    R1,20(R9)           SET GR1 = FIRST ATTRIBUTE BYTE.
         LA    R5,20(R11)          SET GR5 -> START OF ATTRIBUTE LIST
         TM    11(R10),X'80'       IS MEMBER AN ALIAS ?
         BZ    ATRLP1              IF NOT THEN SKIP SETTING ALIAS.
         MVC   0(5,R5),ALSCARD+3   SET ALIAS IN ATTRIBUTES.
         LA    R5,6(R5)            INCREMENT GR5 FOR NEXT ATTRIBUTE.
ATRLP1   EX    R1,ATRTM            TEST FOR ATTRIBUTE PRESENCE.
         BZ    *+16                IF NOT PRESENT THEN GO TO TEST NEXT.
         IC    R6,1(R4)            SET GR6 = LENGTH FOR MOVE.
         EX    R6,ATRMOVE          MOVE ATTRIBUTE TO SYSPRINT.
         LA    R5,2(R5,R6)         INCREMENT GR5 FOR NEXT ATTRIBUTE.
         BXLE  R4,R2,ATRLP1        LOOP UNTIL ATTRIBUTES EXHAUSTED.
         LA    R3,ATRTABND         SET GR3 -> END OF ATTRIBUTE TABLE B.
         CR    R4,R3               IS THIS SECOND TIME THROUGH ?
         BH    STOWNXT             IF SO THEN GO TO TEST NEXT MEMBER.
         TM    21(R9),X'80'        IS 'DC' ATTRIBUTE SPECIFIED ?
         BO    *+14                IF NOT THEN DO NOT STORE.
         MVC   0(2,R5),CDC         STORE DC ATTRIBUTE.
         LA    R5,3(R5)            INCREMENT GR5 FOR NEXT ATTRIBUTE.
         IC    R1,21(R9)           SET GR1 = SECOND ATTRIBUTE BYTE.
         B     ATRLP1              GO TO CONTINUE SCAN FOR ATTRIBUTES.
         SPACE 1
*
*        INCREMENT REGISTERS AND GO TO TRY NEXT.MEMBER.
*
         SPACE 1
STOWNXT  AR    R10,R8              SET GR10 -> NEXT MEMBER IN SYSLIB.
         SPACE 1
STOWNXT1 AR    R9,R8               SET GR9 -> NEXT MEMBER IN SYSLMOD.
STOWNXT2 LA    R11,121(R11)        SET GR9 -> NEXT LINE.
         C     R11,PGEND           COMPARE FOR END OF PAGE.
         BL    STOWLOOP            IF NOT THEN GO TO NEXT MEMBER.
         BH    STOWWRT             IF END OF COL2 THEN GO TO WRITE PAGE
         L     R11,PGSTART         SET GR11 -> START OF PAGE.
         LA    R11,60(R11)         SET GR11 -> START OF COLUMN 2.
         B     STOWLOOP            GO TO TRY NEXT MEMBER.
STOWWRT  BAL   R3,SUBPAGE          LINK TO WRITE PAGE.
         B     STOWSET             GO TO RE-INITIALISE PAGE.
         SPACE 1
*
*        STORE MEMBER ALREADY PRESENT MESSAGE.
*
         SPACE 1
STOWLO   MVC   1(8,R11),0(R9)      STORE MEMBER NAME IN SYSPRINT
         MVC   20(L'MSGAT,R11),MSGAT STORE 'ALREADY PRESENT ' MESSAGE.
         B     STOWNXT1            GO TO INCREMENT REGISTERS FOR NEXT.
         SPACE 1
*
*        STORE MEMBER NOT COPIED MESSAGE.
*
         SPACE 1
STOWHI   MVC   1(8,R11),0(R10)     STORE MEMBER NAME IN SYSPRINT.
         MVC   20(L'MSGNC,R11),MSGNC STORE 'NOT COPIED' MESSAGE.
         TM    21(R10),X'08'       TEST FOR NOT EDITABLE.
         BZ    *+14                IF EDITABLE THEN GO TO NEXT TEST
         MVC   20+L'MSGNC(L'MSGNE,R11),MSGNE STORE 'NOT EDITABLE'.
         B     STOWHIA             GO TO UPDATE REGISTERS.
         TM    11(R10),X'80'       IS IT UNMATCHED ALIAS ?
         BZ    *+14                IF NOT THEN GO TO NEXT TEST.
         MVC   20+L'MSGNC(L'MSGUA,R11),MSGUA STORE 'UNMATCHED ALIAS'.
         B     STOWHIA             GO TO UPDATE REGISTERS.
         SPACE 1
STOWHIA  LA    R10,30(R10)         SET GR10 -> NEXT MEMBER IN SYSLIB.
         B     STOWNXT2            GO TO INCREMENT GR11 FOR NEXT.
         SPACE 1
*
*        EXIT.
*
         SPACE 1
STOWOUT  BAL   R3,SUBPAGE          LINK TO WRITE LAST PAGE.
         CLOSE MF=(E,CLOSEL2)      CLOSE SYSLMOD AND SYSPRINT DATA SETS
         L     R1,PARM1            SET GR1 -> SYSLIB BLDL DYNAMIC AREA.
         LH    R0,PARM1+4          SET GR1 =*LENGTH OF DYNAMIC AREA.
         FREEMAIN R,LV=(0),A=(1)   RELEASE DYNAMIC AREA.
         L     R1,PARM2            SET GR1 -> SYSLMOD BLDL DYNAMIC AREA
         LH    R0,PARM2+4          SET GR0 = LENGTH OF DYNAMIC AREA.
         FREEMAIN R,LV=(0),A=(1)   RELEASE DYNAMIC AREA.
         L     R0,PGEND            SET GR0 -> END OF PAGE AREA.
         L     R1,PGSTART          SET GR1 -> START OF PAGE AREA.
         SR    R0,R1               SET GR0 = LENGTH OF DYNAMIC AREA.
         FREEMAIN R,LV=(0),A=(1)   RELEASE DYNAMIC AREA.
         DELETE DE=BLDL+120        DELETE RTPSTOW.
*RETURN  GOBACK SAVE               RETURN.
RETURN   L     13,4(13)
         LM    14,12,12(13)
         MVI   12(13),255
         LA    15,0
         BR    14
         EJECT
* FOLLOWING SUB-ROUTINES ARE USED BY THIS PROGRAM.
         SPACE 1
SUBWRITE TM    LIN+48,X'10'        IS SYSLIN DATA SET OPEN ?
         BO    SUBWRTA             IF SO THEN USE.
         OPEN  MF=(E,OPENL2)       OPEN SYSLIN DATA SET.
SUBWRTA  PUT   LIN,(R2)            WRITE RECORD.
         BR    R3                  RETURN.
         SPACE 2
SUBPAGE  C     R11,PGSTART         TEST FOR NULL PAGE.
         BCR   8,R3                IF NULL THEN RETURN.
         PUT   PRT,HDR-1           WRITE SKIP TO CHANNEL 1.
         PUT   PRT,HDR             WRITE HEADER.
         L     R7,PGSTART          SET GR7 -7 START OF PAGE.
SUBPAGEA PUT   PRT,(R7)            WRITE LINE.
         LA    R7,121(R7)          INCREMENT GR7 FOR NEXT
         CR    R7,R11              IS LIMIT OF LINES WRITTEN REACHED ?
         BCR   8,R3                IF SO THEN RETURN.
         C     R7,PGEND            IS IT END OF PAGE ?
         BCR   8,R3                IF SO THEN RETURN.
         B     SUBPAGEA            GO TO WRITE NEXT LINE.
         SPACE 2
PARMSIZE CLI   0(R1),C'('          IS SUBLIST SPECIFIED ?
         BE    *+10                IF SO THEN GO TO STEP OVER PARENS.
         BAL   R6,SUBPARM          LINK TO FIND DELIMITER.
         BR    R14                 RETURN.
         LA    R1,1(R1)            SET GR1 -> SUB-PARAMETER.
         BAL   R6,SUBPARM          LINK TO FIND DELIMITER.
         CLI   0(R1),C','          IS DELIMITER A COMMA ?
         BE    *-12                IF SO THEN GO TO PROCESS NEXT SUB-P.
         CLI   0(R1),C')'          IS DELIMITER A CLOSING PARENTHESIS ?
         BNE   ERR01               IF NOT THEN ERROR.
         LA    R1,1(R1)            INCREMENT GR1 OVER CLOSING PAREN.
         BR    R14                 RETURN.
         SPACE 2
SUBPARM  TM    0(R1),C'0'          IS CHARACTER NUMERIC ?
         BCR   14,R6               IF NOT THEN RETURN.
         LA    R1,1(R1)            INCREMENT GR1 FOR NEXT.
         B     SUBPARM             GO TO TEST NEXT CHARACTER.
         SPACE 2
SETOVLY  LA    R2,COVLY            SET GR2 -> OVERLAY CHARACTER STRING.
         LA    R3,L'COVLY-1        SET GR3 F LENGTH OF STRING
         B     SETCOM              GO TO COMMON ROUTINE.
         SPACE 1
SETSCTR  LA    R2,CSCTR            SET GR2 -> SCATTER CHARACTER STRING.
         LA    R3,L'CSCTR-1        SET GR3 = LENGTH OF STRING.
         B     SETCOM              GO TO COMMON ROUTINE.
         SPACE 1
SETTEST  LA    R2,CTEST            SET GR2 -> TEST CHARACTER STRING.
         LA    R3,L'CTEST-1        SET GR3 = LENGTH OF STRING.
         SPACE 1
SETCOM   LA    R1,PARM+2           SET GR1 -> START OF PARM LIST.
         AH    R1,BASELEN          SET GR1 -> END OF BASIC PARMLIST.
         MVI   0(R1),C','          STORE DELIMITER.
         EX    R3,SETMOVE          STORE PARAMETER.
         AH    R3,BASELEN          INCREMENT GR3 BY BASIC LENGTH.
         LA    R3,2(R3)            SET GR3 = NEW LENGTH OF PARM LIST.
         STH   R3,PARM             STORE UPDATED LENGTH.
         BR    R14                 RETURN.
         SPACE 2
TESTNORM IC    R0,11(R10)          SET GR1 = LENGTH IN DOUBLE WORDS
         N     R1,F31              CLEAR HI-ORDER BITS.
         EX    R1,COMPLEN          COMPARE WITH MAXIMUM LENGTH SO FAR.
         BNL   *+8                 IF NOT GREATER THEN USE PREVIOUS MAX
         STC   R1,PARM2            STORE LENGTH IN PARM 2.
         TM    20(R10),X'34'       IS MODULE OVLY, TEST, OR SCTR ?
         BCR   7,R14               IF SO THEN RETURN.
         B     TESTCOM             GO TO COMMON ROUTINE.
         SPACE 1
TESTOVLY TM    20(R10),X'20'       IS MODULE OVERLAY ?
         LR    R9,R14              SAVE RETURN ADDRESS.
         BAL   R14,TESTCOMA        LINK TO COMMON ROUTINE PREFIX.
         B     0(R9)               RETURN IF NOT EDITABLE.
         TM    LMOD+48,X'10'       IS DATA SET OPEN ?
         BO    *+10                IF SO YHEN SKIP OPEN.
         OPEN  MF=(E,OPENL3)       OPEN SYSLIB DATA SET.
         MVI   11(R10),0           CLEAR CONCATENATION ID.
         LA    R2,16               SET GR2 = INCREMENT FOR CESD.
         SR    R8,R8               SET GR8 = 0
FIND     FIND  LMOD,8(R10),C       LOCATE MEMBER.
READLP2  READ  READL,SF,MF=E       READ RECORD OF MEMBER.
         CHECK READL               CHECK READ.
         CLI   READAR,X'20'        IS RECORD A CESD ?
         BNE   READSW3             IF NOT THEN END OF INPUT.
         LA    R1,READAR+8         SET GR1 -> FIRST NAME.
         LR    R3,R1               SET GR3 -> FIRST NAME.
         AH    R3,READAR+6         SET GR3 -> END OF CESD.
         BCTR  R3,R0               DECREMENT GR3 FOR BXLE.
READLP1  TM    8(R1),X'0F'         IS NAME SECTION DEFINITION ?
         BNZ   READNEXT            IF NOT THEN GO TO TEST NEXT ENTRY.
READSW1  BC    0,*+12              FIRST PASS SWITCH.
         LA    R8,12(R8)           INCREMENT FOR COUNT OF SECTION NAMES
         B     READNEXT            GO TO GET NEXT NAME.
         MVC   0(12,R5),0(R1)      MOVE MEMBER NAME AND ADDRESS.
         MVC   8(1,R5),12(R1)      MOVE SEGMENT NUMBER.
         LA    R5,12(R5)           SET GR5 -> NEXT ENTRY.
         SPACE 1
READNEXT BXLE  R1,R2,READLP1       GO TO GET NEXT MEMBER.
         B     READLP2             GO TO READ NEXT RECORD.
         SPACE 1
READSW3  BC    0,READSCAN          FIRST PASS SWITCH.
         OI    READSW1+1,X'F0'     )
         OI    READSW3+1,X'F0'     )
         GETMAIN R,LV=(R8)         OBTAIN DYNAMIC AREA.
         LR    R4,R1               SET GR4 -> START OF AREA.
         LA    R7,0(R4,R8)         SET GR7 -> END OF AREA.
         LR    R5,R4               SET GR5 -> START OF AREA.
         B     FIND                GO TO FIND MEMBER.
         SPACE 1
READSCAN NI    READSW1+1,X'0F'     )
         NI    READSW3+1,X'0F'     )
         LA    R2,12               SET GR2 = 12.
         LR    R6,R2               SET GR6 = 12.
         LR    R3,R7               SET GR3 -> END OF AREA.
         BCTR  R3,R0               DECREMENT GR3 FOR BXLE.
         LA    R8,1                SET GR8 = ID OF FIRST SEGMENT.
         B     NOVLAY              GO TO SET UP FIRST INSERT CARD.
SCANOVLY LR    R1,R4               SET GR1 -> START OF AREA.
         LA    R5,1(R8)            SET GR5 = SEGMENT NUMBER (+1)
         SLL   R5,24               SHIFT LEFT FOR COMPARE.
         EX    R8,SCANCLI          COMPARE FOR THIS SEGMENT.
         BNE   *+16                IF NOT THEN SKIP COMPARE.
         CL    R5,8(R1)            COMPARE FOR LOWEST ADDRESS IN SEGMNT
         BNH   *+8                 IF NOT LOWEST THEN SKIP RELOAD.
         L     R5,8(R1)            SET GR5 = LOWEST ADDRESS IN SEGMENT.
         BXLE  R1,R2,*-20          LOOP UNTIL ALL IN SEGMENT COMPARED.
         LA    R1,1(R8)            SET GR1 = SEGMENT NUMBER (+1)
         SLL   R1,24               SHIFT LEFT FOR COMPARE.
         CR    R5,R1               COMPARE FOR NO SEGMENT FOUND.
         BE    SCANEND             IF NONE THEN END SCAN.
         ST    R5,PGSTART          STORE ADDRESS FOR HEXPRINT.
         MVI   OVLYNM,C'O'         SET OVERLAY IDENTIFIER.
         MVI   OVLYNM+7,C' '       BLANK LAST CHARACTER OF IDENTIFIER.
         UNPK  OVLYNM+1(7),PGSTART+1(4) STORE OVERLAY NAME.
         TR    OVLYNM+1(6),TRTAB   TRANSLATE TO PRINTABLE FORMAT.
         MVI   OVLYNM+7,C' '       REMOVE EXTRA CHARACTER FROM UNPACK.
         STM   R1,R3,TEMPSAVE      SAVE REGISTERS.
         LA    R2,OVLYCARD         SET GR2 -> OVERLAY CARD.
         BAL   R3,SUBWRITE         LINK TO WRITE OUTPUT.
         LM    R1,R3,TEMPSAVE      RESTORE REGISTERS.
         SPACE 1
NOVLAY   LR    R1,R4               SET GR1 -> START OF AREA.
         EX    R8,SCANCLI          COMPARE FOR SEGMENT NUMBER.
         BNE   NOINSRT             IF NOT EQUAL THEN SKIP INSERT.
         MVC   INSRTNM,0(R1)       STORE INSERT NAME
         STM   R1,R3,TEMPSAVE      SAVE REGISTERS.
         LA    R2,INSRCARD         SET GR2 -> INSERT CARD.
         BAL   R3,SUBWRITE         LINK TO WRITE CARD.
         LM    R1,R3,TEMPSAVE      RESTORE REGISTERS.
NOINSRT  BXLE  R1,R2,NOVLAY+2      GO TO TEST NEXT SD ENTRY.
         LA    R8,1(R8)            INCREMENT SEGMENT COUNT
         B     SCANOVLY            GO TO SCAN
         SPACE 2
SCANEND  SR    R7,R4               SET GR7 = LENGTH OF AREA.
         FREEMAIN R,LV=(R7),A=(R4) RELEASE DYNAMIC AREA.
         B     4(R9)               RETURN
SCANCLI  CLI   8(R1),0             MODEL STATEMENT
         SPACE 1
TESTSCTR TM    20(R10),X'04'       IS MODULE SCATTER FORMAT ?
         B     TESTCOMA            GO TO COMMON ROUTINE PREFIX.
         SPACE 1
TESTTEST TM    20(R10),X'10'       IS MODULE TEST FORMAT ?
         SPACE 1
TESTCOMA BCR   8,R14               RETURN IF NOT REQUIRED FORMAT.
TESTCOM  TM    21(R10),X'08'       IS MODULE NOT EDITABLE ?
         BCR   7,R14               IF SO THEN RETURN.
         B     4(R14)              RETURN.
         EJECT
*
*        ERROR ROUTINES.
*
         SPACE 1
ERR01    LA    R2,MSGPARM          SET GR2 -> PARAMETER ERROR MESSAGE.
         B     ERRCOM1             GO TO COMMON ERROR ROUTINE.
         SPACE 2
ERR02    LA    R2,MSGDIRD          SET GR2 -> DIRECTORY READ ERROR.
         B     ERRCOM1             GO TO COMMON ERROR ROUTINE.
         SPACE 2
ERR03    LA    R2,MSGDIRD          SET GR2 -> DIRECTORY READ ERROR.
         MVC   1(8,R2),CLMOD       SET SYSLMOD DD NAME.
         L     R1,PARM1            SET GR1 -> SYSLIB BLD1
         LH    R0,PARM1+4          SET GR0 = LENGTH OF DYNAMIC AREA.
         FREEMAIN R,LV=(0),A=(1)   RELEASE DYNAMIC AREA.
ERRCOM1  OPEN  MF=(E,OPENL1+4)     OPEN SYSPRINT DATA SET.
         PUT   PRT,(R2)            WRITE ERROR MESSAGE.
         CLOSE MF=(E,CLOSEL2+4)    CLOSE SYSPRINT DATA SET.
         B     RETURN              GO TO RETURN.
         SPACE 2
ERR04    MVC   20(L'MSGSTOW,R11),MSGSTOW STORE STOW ERROR MESSAGE.
         B     STOWNXT             GO TO TEST NEXT MEMBER.
         SPACE 1
ERR05    LA    R2,MSGBLDL          SET GR2 -> BLDL ERROR MESSAGE.
         B     ERRCOM1             GO TO COMMON ERROR ROUTINE.
         SPACE 2
*
*        MODEL STATEMENTS
*
         SPACE 1
ENTMOVE  MVC   READAR(0),0(R10)    MOVE SYSLIB ENTRY TO WORK AREA.
         MVC   READAR(0),0(R9)     OVER-RIDE WITH SYSLMOD ENTRY.
KEYCLC   CLC   0(0,R1),1(R4)       COMPARE FOR VALID KEY-WORD.
MOVEPARM MVC   PARM+2(0),2(R11)    MOVE PARM FIELD FOR MODIFICATION.
ATRTM    TM    0(R4),0             TEST FOR ATTRIBUTE SPECIFICATION.
ATRMOVE  MVC   0(0,R5),2(R4)       MOVE ATTRIBUTE TO SYSPRINT
SETMOVE  MVC   1(0,R1),0(R2)       MODIFY PARM FIELD.
COMPLEN  CLI   PARM2,0             COMPARE FOR MAXIMUM LENGTH.
         EJECT
* DCB EXIT FOR SYSLIN AND SYSPRINT.
         SPACE 3
DCBEXIT  DCBEXITS
         EJECT
* SAVE AREAS, WORK AREAS AND CONSTANTS USED BY THE PROGRAM.
         SPACE 2
SAVE     DS    18F
LMOD     DCB   DSORG=PO,MACRF=(R,W),DDNAME=SYSLIB
LIN      DCB   DSORG=PS,MACRF=PM,DDNAME=SYSLIN,LRECL=80,BLKSIZE=400,   *
               RECFM=FB,EXLST=DCBEXIT
PRT      DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,LRECL=121,RECFM=FBM,  *
               BLKSIZE=605,EXLST=DCBEXIT
         SPACE 1
OPENL1   OPEN  (LMOD,OUTPUT,PRT,OUTPUT),MF=L
OPENL2   OPEN  (LIN,OUTPUT),MF=L
OPENL3   OPEN  LMOD,MF=L           OPEN SYSLMOD DATA SET.
CLOSEL1  CLOSE (LIN,,LMOD),MF=L
CLOSEL2  CLOSE (LMOD,,PRT),MF=L
         READ  READL,SF,LMOD,READAR,'S',MF=L
LINKL1   LINK  DE=BLDL+62,SF=L
LINKL2   LINK  DE=BLDL+4,SF=L
PARM1    DC    A(LMOD),2A(0)
PARM2    DC    A(LMOD),2A(0)
F31      DC    F'31'
PGSTART  DS    A
PGEND    DS    A
STOWADR  DC    A(0)
PARMPTR  DC    X'80',AL3(PARM)
TEMPSAVE DS    3F
TRTAB    EQU   *-C'0'              DEFINE TRANSLATE ORIGIN.
         DC    C'0123456789ABCDEF'
         SPACE 2
* POINTER TABLE TO SET NEW PARAMETER LIST (REFERENCED BY GR11 OFFSET).
         SPACE 1
SETTAB   DC    A(SETOVLY)          OVERLAY (WITH XCAL)
         DC    A(SETSCTR)          SCATTER FORMAT.
         DC    A(SETTEST)          TEST MODULE.
         DC    A(STOW)             EXIT.
         SPACE 2
* POINTER TABLE TO TEST FOR INCLUSION IN THIS PASS.
         SPACE 1
TESTTAB  DC    A(TESTNORM)         NORMAL
         DC    A(TESTOVLY)         OVERLAY STRUCTURE.
         DC    A(TESTSCTR)         SCATTER FORMAT.
         DC    A(TESTTEST)         TEST MODULE.
         SPACE 2
* KEY-WORD TABLE FOR PARAMETER LIST.
         SPACE 1
         DS    0H
KEYTAB   DC    AL1(3),C'XREF ',X'07FE'
KEYTAB2  DC    AL1(2),C'MAP  ',X'07FE'
         DC    AL1(3),C'LIST ',X'07FE'
         DC    AL1(3),C'NCAL ',X'07FE'
         DC    AL1(1),C'DC   ',X'07FE'
         DC    AL1(1),C'NE   ',X'07FE'
         DC    AL1(1),C'OL   ',X'07FE'
         DC    AL1(3),C'DCBS ',X'07FE'
KEYTABND DC    AL1(4),C'SIZE=',X'47F0',S(PARMSIZE)
         SPACE 2
* KEY-WORD TABLE FOR ATTRIBUTE LIST.
         SPACE 1
ATRTAB   DC    X'80',AL1(3),C'RENT'     RE-ENTRANT.
ATRTAB2  DC    X'40',AL1(3),C'REUS'     RE-USABLE.
         DC    X'20',AL1(3),C'OVLY'     OVERLAY STRUCTURE.
         DC    X'10',AL1(3),C'TEST'     TESTRAN.
         DC    X'08',AL1(1),C'OL  '     ONLY LOADABLE.
ATRTBND1 DC    X'04',AL1(3),C'SCTR'     SCATTER FORMAT.
         DC    X'08',AL1(1),C'NE  '     NOT EDITABLE.
ATRTABND DC    X'01',AL1(3),C'REFR'     REFRESHABLE.
         SPACE 2
PGSIZE   DC    0H'0',AL2(52*121)
BASELEN  DC    H'4'
INCCARD  DC    CL80' '
         ORG   INCCARD
         DC    C'   INCLUDE     SYSLIB('
INCNM    DS    CL8' '
         ORG
ALSCARD  DC    CL80' '
         ORG   ALSCARD
         DC    C'   ALIAS       '
ALIASNM  DC    CL8' '
         ORG
NAMCARD  DC    CL80' '
         ORG   NAMCARD
         DC    C'   NAME        '
NAMNM    DS    CL8' '
         ORG
OVLYCARD DC    CL80' '
         ORG   OVLYCARD
         DC    C'   OVERLAY     '
OVLYNM   DS    CL8' '
         ORG
INSRCARD DC    CL80' '
         ORG   INSRCARD
         DC    C'   INSERT      '
INSRTNM  DS    CL8' '
         ORG
PARM     DC    H'4',CL102'NCAL'
MSGPARM  DC    X'09',CL120'PARAMETER LIST IN ERROR'
MSGDIRD  DC    X'09',CL120'SYSLIB  DIRECTORY READ ERROR'
MSGBLDL  DC    X'09',CL120'BLDL FOR IEWL/RTPDIRD/RTPSTOW FAILED - CHECK*
                LINKLIB, JOBLIB AND STEPLIB.'
MSGSTOW  DC    C'STOW FAILED'
MSGAT    DC    C'ALREADY PRESENT'
MSGNC    DC    C'NOT COPIED -'
MSGNE    DC    C'NOT EDITABLE'
MSGUA    DC    C'UNMATCHED ALIAS'
CNCAL    DC    C',NCAL'
CREP     DC    CL4'(R) '
CLMOD    DC    CL8'SYSLMOD'
COVLY    DC    C'OVLY,XCAL'
CSCTR    DC    C'SCTR'
CTEST    DC    C'TEST'
CDC      DC    C'DC'
         DC    X'8B'
HDR      DC    X'11'
         DC    2CL60'  NAME     ENTRY   ATTRIBUTES'
READAR   DS    0H,CL248
BLDL     DC    H'3,58',CL58'IEWL',CL58'RTPDIRD',CL58'RTPSTOW'
         END
