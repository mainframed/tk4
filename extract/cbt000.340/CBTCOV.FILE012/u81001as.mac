************************************************************************
*
*         LEYLAND VEHICLES  BATHGATE SCOTLAND  TEL BATHGATE 53581
*         -------------------------------------------------------
*
*
*         FOR USER OF ILREDT (IAN L RAMAGE'S SOURCE LIBRARY MANAGEMENT)
*                             PACKAGE)
*
************************************************************************
*
*     C O N T E N T S .
*     -----------------
*
*        1. GENERAL DESCRIPTION.
*        2. SAMPLE CATALOGUE PROCEDURE.
*        3. SOURCE STATEMENTS FOR PROGRAMS: CTO001 AND CTO002.
*
*
*
************************************************************************
*
* 1.  G E N E R A L  D E S C R I P T I O N
*     ------------------------------------
*
*
*        -TWO PROGRAMS CTO001 AND CTO002 ALONG WITH ILREDT ARE
*         UTILISED TO PROVIDE THE MEANS FOR ENSURING THAT THE SOURCE
*         VERSION AND THE LOAD VERSION OF A GIVEN PROGRAM ARE IN STEP.
*
*        -THE SOURCE PROGRAM IS LOADED TO THE INSTALATION'S SOURCE
*         LIBRARY USING ILREDT. THE PROGRAM IS THEN COMPILED AND LINK-
*         AGE EDITED  TO THE INSTALATION'S LOAD LIBRARY USING A
*         CATALOGUE PROCEDURE 'SRCELINK' (DESCRIBED BELOW). THE SOURCE
*         AND LOAD VERSIONS ARE STAMPED WITH THE SAME DATE AND TIME
*         (BEING THE DATE AND TIME OF THE 'SRCELINK' RUN).
*        -PL/1 (OPTIMIZER V3 L0), COBOL (ANS V2 L2), AND
*         ASSEMBLER (F), DURING THE LINK EDIT STEP
*         MODULES MAY BE INCLUDED FROM SPECIFIED LIBRARIES (FORMAT
*         DESCRIBED BELOW), THE LINKAGE EDITOR CONTROL STATEMENT
*         'NAME' CAN ALSO BE USED.
*         LOAD PROGRAMS CAN BE CONSTRUCTED WITH ONE OR MORE SOURCE
*         MODULES, ALL OR SOME OF THE SOURCE MODULES CAN BE COMPILED
*         (MAXIMUM OF 10) DURING AN EXECUTION OF 'SRCELINK', THOSE
*         WHICH ARE NOT COMPILED ARE INCLUDED DURING THE LINKAGE EDIT
*         STAGE. ONLY MODULES THAT ARE COMPILED AND THE FINAL LOAD
*         VERSION ARE DATE AND TIME STAMPED.
****
****
****
****
*     C O N T R O L   S T A T E M E N T   F O R M A T S .
*     ---------------------------------------------------
*
*
*
*         1. COMPILER COMMAND
*
*            CC1-4
*              -PLI *NAME*
*              -COB *NAME*
*              -ASF *NAME*
*
*            '*NAME*' IS THE NAME OF THE SOURCE MEMBER ON THE SOURCE
*            LIBRARY
*
*
*
*         2. LINKAGE EDITOR COMMAND
*
*            CC 1-5
*               -LINK
*
*            THIS CONTROL CARD IS FOLLOWED BY THE APPROPRIATE LINKAGE
*            EDIT CONTROL STATEMENTS.
*
*         ( IN BUILT IN THE'SCRELINK'PROCEDURE ARE THE FOLLOWING DD
*          STATEMENTS FOR USE DURING THE LINKAGE EDIT STEP -
*            DDNAME        LIBRARY
*            ------        -------
*            TESTLINK      INSTALATIONS  TEST LOAD  LIBRARY
*            TESTMOD       INSTALATIONS  COMMON ROUTINES TEST LOAD  LIBR
*            PRODLINK      INSTALATIONS  PRODUCTION LOAD LIBRARY
*            PRODMOD       INSTALATIONS  PRODUCTION COMMON ROUTINE LOAD
*****
*****
*****
*****
*     E X A M P L E S.
*     ----------------
*
*
*         1.        //  EXEC SRCELINK
*                   -COB SRCE1
*
*          THIS WILL TAKE THE SOURCE MEMBER 'SRCE1' COMPILE IT USING
*          THE COBOL COMPILER AND LINKAGE EDIT THE RESULTING OBJECT
*          PROGRAM. THE SOURCE AND LOAD VERSIONS WILL BE DATE AND TIME
*          STAMPED.  IN THIS INSTANCE BOTH THE SOURCE AND LOAD VERSIONS
*          ARE NAMED 'SRCE1'.
*
*
*         2.        //  EXEC SRCELINK
*                   -PLI RTNE1
*                   -PLI RTNE3
*
*                   -LINK
*                    INCLUDE TESTLINK(RTNE1)
*                    INCLUDE TESTLINK(RTNE3)
*                    INCLUDE TESTLINK(PROGRAM)
*                    NAME PROGRAM (R)
*
*          A LOAD MODULE CALLED 'PROGRAM' CONSISTS OF FIVE ROUTINES,
*          RTNE1,RTNE2,RTNE3,RTNE4,AND RTNE5.  ROUTINES 'RTNE1' AND
*         'RTNE3' HAVE BEEN MODIFIED AND THE NEW SOURCE VERSIONS
*          LOADED TO THE INSTALATIONS SOURCE LIBRARY.  THIS EXECUTION
*          OF 'SRCELINK' COMPILES THE TWO MODIFIED ROUTINES AND DATE
*          AND TIME STAMPS THEIR SOURCE AND LOAD VERSIONS. THE PROGRAM
*          IS LINKAGE EDITTED, THE NEW VERSION REPLACING THE OLD ON
*          THE INSTALATION'S LOAD LIBRARY.
*
*****
*****
*****
*****
************************************************************************
************************************************************************
************************************************************************
*
* 2. S A M P L E  C A T A L O G U E  P R O C D E U R E
*    -------------------------------------------------
*
*
*   S R C E L I N K    P R O C E D U R E
*   ------------------------------------
*
*
*     //SRCELINK  PROC  SOURCE='LEY.SOURCE',OBJLIB='LEY.TESTLINK',
*     //          SPACE='(CYL,(1,1))',STEPLIB='LEY.ILRLINK',
*     //          PCLASS=A,TCLASS=A,UTIL='LEY.UTILITY',
*     //          COBCOP1='LEY.COPYLIB',COBCOP2='LEY.EMPTYPDS',
*     //          ASSCOPY='LEY.EMPTYPDS',PL1COPY='LEY.COPYLIB',
*     //          TERM=NO,OUTLIM=0,SYSPLI='LEY.PLIBASE',
*     //          SYSLIL='LEY.EMPTYPDS',PUNCH='LEY.EMPTYPDS',
*     //          STEPPLI='LEY.PLILINK',STEPCOB='LEY.COBLINK',
*     //          SYSCOB='LEY.COBLIB',SYSLIB='LEY.TESTMOD'
*     //* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*     //*
*     //*                    *---> S R C E L I N K <---*
*     //*                    *-------------------------*
*     //*      PARAMETERS: (DEFAULTS IN PARENTHESES)
*     //*
*     //*         SOURCE  - SOURCE LIBRARY DSNAME (LEY.SOURCE)
*     //*         OBJLIB  - LINK EDITOR OUTPUT LIBRARY DSNAME(LEY.TESTLI
*     //*         ------------------------------------------------------
*     //*         PCLASS  - PRINTED OUTPUT SYSOUT CLASS (A)
*     //*         TCLASS  - SYSTERM SYSOUT CLASS (A)
*     //*         TERM    - FOR DIAGNOSTIC OUTPUT ON SYSTERM SPECIFY 'YE
*     //*                   (NO) : ASF, COB, FOR & LNK ONLY
*     //*         COBCOP1 - FIRST COBOL COPY LIBRARY (LEY.COPYLIB)
*     //*         COBCOP2 - SECOND COBOL COPY LIBRARY (LEY.EMPTYPDS)
*     //*         PL1COPY - PL/I COPY LIBRARY (LEY.COPYLIB)
*     //*         ASSCOPY - ASSEMBLER COPY LIBRARY (LEY.EMPTYPDS)
*     //*         SYSPLI  - PLIL SYSLIB DSNAME (LEY.PLIBASE)
*     //*         SYSCOB  - COBL SYSLIB DSNAME (LEY.COBLIB)
*     //*         SYSLIB  - USER SYSLIB DSNAME (LEY.TESTMOD)
*     //*         SYSLIL  - LNK SYSLIB DSNAME (LEY.EMPTYPDS)
*     //*         PUNCH   - SYSPUNCH DSNAME (LEY.EMPTYPDS)
*     //*         OUTLIM  - SYSPRINT/X/Z OUTPUT LIMIT (NO LIMIT)
*     //*         SPACE   - SYSUT2 DD DATASET SPACE (<(CYL,(1,1))>)
*     //*         STEPLIB - ILREDIT LOAD LIBRARY DSNAME (LEY.ILRLINK)
*     //*         UTIL    - UTILITY LOAD LIBRARY DSNAME (LEY.UTILITY)
*     //*         STEPPLI - PLI COMPILER LINK LIBRARY   (LEY.PLILINK)
*     //*         STEPCOB - COBOL COMPILER LINK LIBRARY (LEY.COBLINK)
*     //*
*     //* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*     //*
*     //*
*     //STEP05  EXEC PGM=CTO001A
*     //****************************************************************
*     //*** VETS INPUT,DATE STAMPS SOURCE,CREATES ILREDIT & LINKEDIT INP
*     //****************************************************************
*     //STEPLIB DD DSN=&UTIL,DISP=SHR
*     //PDS     DD DSN=&SOURCE,DISP=SHR
*     //COMPOUT DD DSN=&&COMP,DISP=(NEW,PASS),SPACE=(TRK,(1,1)),
*     //        UNIT=SYSDA,DCB=(RECFM=FB,LRECL=80,BLKSIZE=400)
*     //PRNTOUT DD DSN=&&PRNT,DISP=(NEW,PASS),SPACE=(TRK,(1,1)),
*     //        UNIT=SYSDA,DCB=(RECFM=FB,LRECL=80,BLKSIZE=400)
*     //LINK1   DD DSN=&&LNK1,DISP=(NEW,PASS),SPACE=(TRK,(1,1)),
*     //        UNIT=SYSDA,DCB=(RECFM=FB,LRECL=80,BLKSIZE=400)
*     //LINK2   DD DSN=&&LNK2,DISP=(NEW,PASS),SPACE=(TRK,(1,1)),
*     //        UNIT=SYSDA,DCB=(RECFM=FB,LRECL=80,BLKSIZE=400)
*     //LINK3   DD DSN=&&LNK3,DISP=(NEW,PASS),SPACE=(TRK,(1,1)),
*     //        UNIT=SYSDA,DCB=(RECFM=FB,LRECL=80,BLKSIZE=400)
*     //*
*     //STEP10    EXEC  PGM=ILREDIT,COND=(0,NE,STEP05)
*     //****************************************************************
*     //*** DOES COMPILE(S) & LINKEDIT(S) FROM INPUT EX-STEP05
*     //****************************************************************
*     //X         DD    DDNAME=VOLMOUNT ... FOR PROGM PACK MOUNTS ETC
*     //STEPLIB   DD    DSN=&STEPLIB,DISP=SHR
*     //          DD    DSN=&STEPPLI,DISP=SHR
*     //          DD    DSN=&STEPCOB,DISP=SHR
*     //SYSIN     DD    DSN=&&COMP,DISP=(OLD,DELETE)
*     //SYSLIA    DD    DSN=SYS1.MACLIB,DISP=SHR
*     //          DD    DSN=LEY.COPYLIB,DISP=SHR
*     //          DD    DSN=&ASSCOPY,DISP=SHR
*     //SYSLIB    DD    DSN=&SYSPLI,DISP=SHR
*     //          DD    DSN=&SYSCOB,DISP=SHR
*     //          DD    DSN=&SYSLIB,DISP=SHR
*     //          DD    DSN=&OBJLIB,DISP=SHR
*     //          DD    DSN=LEY.PRODMOD,DISP=SHR
*     //SYSLIC    DD    DSN=&COBCOP1,DISP=SHR
*     //          DD    DSN=&COBCOP2,DISP=SHR
*     //SYSLIL    DD    DSN=&SYSLIL,DISP=SHR
*     //          DD    DSN=LEY.PLIBASE,DISP=SHR
*     //          DD    DSN=LEY.COBLIB,DISP=SHR
*     //SYSLIP    DD    DSN=&PL1COPY,DISP=SHR
*     //SYSUT1    DD    DSN=&SOURCE,DISP=SHR
*     //SYSUT2    DD    UNIT=SYSDA,SPACE=&SPACE,
*     //          DCB=(RECFM=FB,LRECL=80,BLKSIZE=3200)
*     //SYSUT3    DD    UNIT=SYSDA,SPACE=&SPACE
*     //SYSUT4    DD    UNIT=SYSDA,SPACE=&SPACE
*     //SYSUT5    DD    UNIT=SYSDA,SPACE=&SPACE
*     //SYSUT6    DD    UNIT=SYSDA,SPACE=&SPACE
*     //SYSUT9    DD    DSN=&SOURCE,DISP=SHR
*     //SYSWRK    DD    UNIT=SYSDA,SPACE=&SPACE
*     //SYSWRKB   DD    UNIT=SYSDA,SPACE=&SPACE
*     //SYSPRINT  DD    SYSOUT=&PCLASS,OUTLIM=&OUTLIM,
*     //          DCB=(RECFM=FBA,LRECL=121,BLKSIZE=1089)
*     //SYSPRINX  DD    SYSOUT=&PCLASS,OUTLIM=&OUTLIM,
*     //          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=1129)
*     //SYSPRINY  DD    SYSOUT=&PCLASS,OUTLIM=&OUTLIM,
*     //          DCB=(RECFM=FBM,LRECL=121,BLKSIZE=1089)
*     //SYSPRINZ  DD    SYSOUT=&PCLASS,OUTLIM=&OUTLIM,
*     //          DCB=(RECFM=FBA,LRECL=121,BLKSIZE=1089)
*     //SYSPUNCH  DD    DSN=&PUNCH,DISP=SHR
*     //SYSTERM   DD    DDNAME=&TERM
*     //YES       DD    SYSOUT=&TCLASS
*     //NO        DD    DUMMY,DCB=(BLKSIZE=80)
*     //DD1       DD    DSN=&&LNK3,DISP=(OLD,PASS)
*     //SYSLIN    DD    UNIT=SYSDA,SPACE=(CYL,(1,1)),
*     //          DCB=(RECFM=FB,LRECL=80,BLKSIZE=400)
*     //          DD    DSN=&&LNK3,DISP=(OLD,PASS),VOL=REF=*.DD1
*     //          DD    DSN=&&LNK1,DISP=(OLD,DELETE)
*     //SYSLMOD   DD    DSN=&OBJLIB,DISP=SHR
*     //LINK2     DD    DSN=&&LNK3,DISP=(OLD,DELETE),VOL=REF=*.DD1
*     //          DD    DSN=&&LNK2,DISP=(OLD,DELETE)
*
*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
*
*     //TESTLINK  DD    DSN=LEY.TESTLINK,DISP=SHR     ******************
*     //TESTMOD   DD    DSN=LEY.TESTMOD,DISP=SHR      * INSTALATION'S  *
*     //PRODLINK  DD    DSN=LEY.PRODLINK,DISP=SHR     *     LOAD       *
*     //PRODMOD   DD    DSN=LEY.PRODMOD,DISP=SHR      *   LIBRARIES    *
*                                                     ******************
*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
*
*     //STEP15    EXEC  PGM=CTO002A,COND=((0,NE,STEP05),(5,LE,STEP10))
*     //****************************************************************
*     //*** PRINTS REPORT INDICATING SUCCESSFUL COMPILE & LINKEDIT
*     //****************************************************************
*     //STEPLIB   DD    DSN=&UTIL,DISP=SHR
*     //SPECARD   DD    DSN=LEY.PROCDATA(CTOP01A),DISP=SHR
*     //INFILE    DD    DSN=&&PRNT,DISP=(OLD,DELETE)
*     //SYSPRINT  DD    SYSOUT=&PCLASS,DCB=(RECFM=FBA,BLKSIZE=1330,LRECL
*     //LOAD      DD    DSN=&OBJLIB,DISP=SHR
*     //SOURCE    DD    DSN=&SOURCE,DISP=SHR
*     //STEP20    EXEC  PGM=CTO002A,COND=((0,NE,STEP05),(4,GE,STEP10))
*     //****************************************************************
*     //*** PRINTS REPORT INDICATING UNSUCCESSFUL COMPILE & LINKEDIT
*     //****************************************************************
*     //STEPLIB   DD    DSN=&UTIL,DISP=SHR
*     //SPECARD   DD    DSN=LEY.PROCDATA(CTOP02A),DISP=SHR
*     //INFILE    DD    DSN=&&PRNT,DISP=(OLD,DELETE)
*     //SYSPRINT  DD    SYSOUT=&PCLASS,DCB=(RECFM=FBA,BLKSIZE=1330,LRECL
*     //LOAD      DD    DSN=&OBJLIB,DISP=SHR
*     //SOURCE    DD    DSN=&SOURCE,DISP=SHR
*     //STEP25    EXEC  PGM=CTO002A,COND=(16,NE,STEP05)
*     //****************************************************************
*     //*** PRINTS REPORT INDICATING WHY COMPILE & LINKEDIT WAS NOT RUN
*     //****************************************************************
*     //STEPLIB   DD    DSN=&UTIL,DISP=SHR
*     //SPECARD   DD    DSN=LEY.PROCDATA(CTOP03A),DISP=SHR
*     //INFILE    DD    DSN=&&PRNT,DISP=(OLD,DELETE)
*     //SYSPRINT  DD    SYSOUT=&PCLASS,DCB=(RECFM=FBA,BLKSIZE=1330,LRECL
*     //LOAD      DD    DSN=&OBJLIB,DISP=SHR
*     //SOURCE    DD    DSN=&SOURCE,DISP=SHR
*
*
************************************************************************
************************************************************************
************************************************************************
*
*
* 3. S O U R C E  S T A T E M E N T S .
*    ----------------------------------
*
CTO001A  CSECT
         STM   R14,R12,12(R13)
         BALR  R12,0
         USING *,R12
         LR    R11,R13
         LA    R13,SAVAR
         ST    R13,8(R11)
         ST    R11,4(R13)
* INITIALISATION
         LA    R7,0
         LA    R8,FRST     (STORE ADDRESS OF MODULE LIST FOR
         ST    R8,ADFRST       SORTING FOR BLDL MACRO)
         LA    R8,LIMIT    (STORE ADDRESS OF END OF MODULE LIST
         ST    R8,ADLIM        FOR SORTING FOR BLDL MACRO)
         LA    R8,SPACE8   (R8 TO BE USED FOR INCREMENTING(+8) POINTER
         ST    R8,ADSP8     TO MODULE LIST - INITIAL VALUE IN ADSP8)
         RDJFCB PDS        READ JFCB FOR PDS INTO JFCBSP
* OPEN FILES
         OPEN  (SYSIN,(INPUT),PRNTOUT,(OUTPUT),COMPOUT,(OUTPUT))
         OPEN  (PDS,(UPDAT),LINK1,(OUTPUT),LINK2,(OUTPUT))
         OPEN  (LINK3,(OUTPUT))
         GET   SYSIN,EDAREA      READ CARD INTO EDIT AREA
         PUT   PRNTOUT,EDAREA    PRINT CARD
         OI    SWITCH,FIRSTRD    SET FIRST READ SWITCH ON
NEXTIN   EQU   *
         GET   SYSIN,ALTAREA     READ CARD INTO ALTERNATE AREA
         PUT   PRNTOUT,ALTAREA   PRINT CARD
         OI    SWITCH,SECNDRD    SET SECOND READ SWITCH ON
         BAL   R10,EDIT          CALL EDIT SUBROUTINE
         MVC   EDAREA,ALTAREA    MOVE LAST CARD READ TO EDIT AREA
         B     NEXTIN            GET NEXT CARD
*
*
***********************************************************************
EDIT     EQU   *      SUBROUTINE USING RETURN REGISTER R10            *
***********************************************************************
         TM    SWITCH,EDERRSW    IS THERE ALREADY AN EDIT ERROR?
         BOR   R10               IF SO - RETURN
         TM    SWITCH,SECNDRD    WAS THERE ONLY ONE INPUT CARD?
         BNO   LANGCHK           IF SO - CHECK FOR VALID LANGUAGE
         TM    SWITCH,LINKSW    HAVE WE ALREADY READ THE -LINK CARD?
         BO    LINKON         IF SO - ASSUME THE CARD IS LINKEDIT INPUT
         CLC   ED1TO5,LINK5      IS THIS CARD THE -LINK CARD?
         BE    LINKCHK        IF SO - CHECK FOR FAVOURABLE CONDITIONS
LANGCHK  EQU   *
         CLC   ED1TO5,=C'-PLI ' (IF THE LANGUAGE SPECIFIED IS NOT
         BE    COMPEDIT                     PL/I
         CLC   ED1TO5,=C'-ASF '             ASSEMBLER
         BE    COMPEDIT                     OR
         CLC   ED1TO5,=C'-COB '             COBOL
         BE    COMPEDIT                     OR
         CLC   ED1TO5,=C'-DMS '             DMS
         BNE   BADEDIT           THE ERROR SWITCH SHOULD BE SET ON)
COMPEDIT EQU   *
         LA    R3,EDAREA+4      (CHECK CARD COLUMNS 6 TO 71
         LA    R5,EDAREA+70          FOR
         LA    R4,1                  START
NEXTCOL1 EQU   *                     OF
         BXH   R3,R4,BADEDIT         MODULE
         CLI   0(R3),SPACE           NAME.
         BE    NEXTCOL1              IF
         LR    R6,R3                 NOT FOUND
         AR    R5,R4             THE ERROR SWITCH SHOULD BE SET ON)
NEXTCOL2 EQU   *
         BXH   R3,R4,BADEDIT    (CHECK BETWEEN MODULE NAME START AND
         CLI   0(R3),SPACE           CARD COLUMN 71 FOR END
         BNE   NEXTCOL2              OF MODULE NAME.IF NOT
         SR    R3,R6                 FOUND OR IF MODULE IS
         C     R3,F8                 LONGER THAN 8 BYTES
         BH    BADEDIT           THE ERROR SWITCH SHOULD BE SET ON)
         SR    R3,R4             PUT THE MODULE NAME LENGTH INTO R3
         EX    R3,EXMOVE     MOVE THE MODULE NAME TO THE ILREDIT RECORD
         MVC   COMPAREA+13(3),EDAREA+1 LINGO NAME TO THE ILREDIT RECORD
         A     R8,F8         INCREMENT POINTER TO MODULE LIST FOR BLDL
         C     R8,ADLIM      IS THIS THE ELEVENTH COMPILE CARD
         BE    BADEDIT       IF SO - SET THE ERROR SWITCH ON
         MVC   0(8,R8),COMPAREA+49  MOVE MODULE NAME TO LIST FOR BLDL
         C     R8,ADFRST            IS THIS THE FIRST COMPILE CARD
         BNE   COMPUT               IF NOT - WRITE THE ILREDIT RECORD
* FIRST COMPILE CARD
         TM    SWITCH,EOFSW         HAS SYSIN ENDFILE BEEN ENCOUNTERED?
         BO    ONECOMP              IF SO - SET UP FOR ONE LINKEDIT
         CLC   AL1TO5,LINK5         IS THE -LINK CARD NEXT FOR EDITING?
         BE    ONECOMP              IF SO - SET UP FOR ONE LINKEDIT
* TWO LINKEDITS REQUIRED
         LA    R2,LINK2             POINT R2 TO SECOND LINKEDIT FILE
         MVC   COMPAREA+28(5),=C',NCAL'  MOVE NCAL TO LINKEDIT PARM
         B     COMPUT                    GO WRITE THE ILREDIT RECORD
* ONE LINKEDIT REQUIRED
ONECOMP  EQU   *
         LA    R2,LINK1             POINT R2 TO FIRST LINKEDIT FILE
COMPUT   EQU   *
         PUT   COMPOUT,COMPAREA       WRITE THE ILREDIT RECORD
         MVC   COMPAREA+49(8),SPACE8  BLANK OUT MODULE NAME
         BR    R10                    RETURN
EXMOVE   MVC   COMPAREA+49(0),0(R6)   INSTRUCTION TO MOVE MODULE NAME
LINKON   EQU   *
         PUT   (R2),EDAREA            WRITE OUT LINKEDIT RECORD
         A     R7,F1                  ADD ONE TO LINKEDIT TOTAL
         BR    R10                    RETURN
LINKCHK  EQU   *
*
         TM    SWITCH,EOFSW         HAS SYSIN ENDFILE BEEN ENCOUNTERED?
         BO    BADEDIT              IF SO - SET THE ERROR SWITCH ON
         C     R8,ADFRST           HAVE WE HAD ANY VALID COMPILE CARDS?
         BL    BADEDIT             IF NOT - SET THE ERROR SWITCH ON
         BE    SETLINK             IF ONE ONLY - GO SET LINK SWITCH
* TWO LINKEDITS REQUIRED
         PUT   COMPOUT,REDEF       (WRITE ILREDIT RECORDS TO SET UP
         PUT   COMPOUT,LINKCARD     STANDALONE LINKEDIT)
SETLINK  EQU   *
         OI    SWITCH,LINKSW       SET LINK SWITCH ON
         BR    R10                 RETURN
BADEDIT  EQU   *
         OI    SWITCH,EDERRSW      SET ERROR SWITCH ON
         BR    R10                 RETURN
*
*   END OF EDIT SUBROUTINE
*
*
*
***********************************************************************
ZONCHK   EQU   *      SUBROUTINE USING RETURN REGISTER R10
***********************************************************************
         TM    0(R4),HEX08       IS BIT 4 ON?
         BNOR  R10               IF NOT - RETURN
         TM    0(R4),HEX06       ARE BITS 5 & 6 BOTH OFF ?
         BZR   R10               IF SO - RETURN
         NI    0(R4),HEXCF       CHANGE ZONE FROM F TO C
         IC    R5,0(R4)          PUT BYTE BACK INTO R5
         S     R5,=F'9'          SUBTRACT 9(A BECOMES 1,..,F BECOMES 6)
         STC   R5,0(R4)          RE-STORE BYTE
         BR    R10               RETURN
*
* END OF ZONCHK SUBROUTINE
*
*
*
***********************************************************************
EOCARDF  EQU   *  ENDFILE ROUTINE FOR SYSIN (MAIN BODY OF PROGRAM)    *
***********************************************************************
         OI    SWITCH,EOFSW    SET ENDFILE SWITCH ON
         TM    SWITCH,FIRSTRD  WAS THERE ANY INPUT ?
         BNO   NOINPUT         IF NOT - TERMINATE JOB (RETURN CODE 16)
         BAL   R10,EDIT        EDIT THE LAST CARD
         TM    SWITCH,EDERRSW  WAS THERE AN EDIT ERROR?
         BO    INVALID         IF SO - TERMINATE JOB (RETURN CODE 16)
         C     R8,ADFRST       WAS THERE ONLY ONE COMPILE CARD?
         BE    VALID          IF SO - SKIP CHECK FOR LINK CARDS PRESENT
         C     R7,F0           ARE THERE LINKEDIT CARDS PRESENT ?
         BE    INVALID        IF NOT - TERMINATE JOB (RETURN CODE 16)
****************
VALID    EQU   *    THIS BIT SORTS THE SOURCE MODULE NAMES FOR THE BLDL
****************
         LR    R5,R8           LOAD MODULE LIST POINTER INTO R5
         S     R5,ADSP8      SUBTRACT INITIAL MODULE LIST POINTER VALUE
         LA    R4,0            ZEROISE R4
         D     R4,F8         DIVIDE(R4 & R5)/8 GIVING NUMBER OF MODULES
         STH   R5,BLDLIST    STORE NUMBER OF MODULES IN BLDL AREA
         MVC   8(8,R8),HEXFS  MOVE 8 X'FF'S AFTER LAST MODULE IN LIST
LOOP     EQU   *
         L     R6,ADFRST      LOAD ADDRESS OF FIRST MODULE INTO R6
         NI    SWITCH,255-SORTSW    TURN SORT SWITCH OFF
COMPARE  EQU   *
         CLC   0(8,R6),8(R6)  COMPARE MODULE(N) WITH MODULE(N+1)
         BE    INVALID        IF EQUAL - TERMINATE JOB (RETURN CODE 16)
         BL    LASTCHK        IF (N) LOW - SKIP TO CHECK FOR LIST END
         XC    0(8,R6),8(R6)  (SWAP ROUND MODULES
         XC    8(8,R6),0(R6)   IN LIST (N) BECOMES
         XC    0(8,R6),8(R6)   (N+1) AND VICE-VERSA)
         OI    SWITCH,SORTSW SET SWITCH TO INDICATE SWAPPING TOOK PLACE
LASTCHK  EQU   *
         A     R6,F8          ADD 8 TO ADDRESS OF MODULE(N)
         CR    R6,R8       HAS R6 BEEN INCREMENTED PAST THE LAST MODULE
         BNH   COMPARE     IF NOT - GO BACK & COMPARE LATEST N & N+1
         TM    SWITCH,SORTSW  DID SWAPPING TAKE PLACE IN THIS PASS?
         BO    LOOP        IF SO - GO BACK & START ANOTHER PASS
******************* INITIALISE BLDL LIST
         LA    R6,FRST     POINT R6 TO FIRST MODULE IN LIST
         LA    R7,LIST     POINT R7 TO FIRST MODULE NAME FOR BLDL
MOVENAME EQU   *
         MVC   0(8,R7),0(R6)   MOVE MODULE FROM LIST TO BLDL AREA
         A     R6,F8           INCREMENT LIST POINTER BY 8
         A     R7,=F'20'       INCREMENT BLDL POINTER BY 20
         BCT   R5,MOVENAME     SUBTRACT 1 FROM R5 & BRANCH IF NON ZERO
*******TIME & DATE MACRO HERE
         TIME
         ST    R0,STIME        STORE TIME IN STOW AREA
         ST    R1,SVERS        STORE DATE IN STOW AREA
         ENQ   (QNAME,JFCBSP,,,SYSTEM)  ENQ ON SOURCE PDS
         BLDL  PDS,BLDLIST     ISSUE BLDL
         B     BLDRET(R15)  USE RETURN CODE TO INDEX BRANCH-TO ADDRESS
BLDRET   B     UPDATE  ************************************************
         B     INVDEQ  *      BRANCH TABLE FOR BLDL RETURN CODES      *
         B     INVDEQ  *                                              *
         B     INVDEQ  ************************************************
UPDATE   EQU   *            ALL MODULES FOUND IN DIRECTORY
         USING BLENTRY,R4   USE R4 TO ADDRESS BLENTRY DSECT
         LH    R5,BLDLIST   LOAD NUMBER OF MODULES INTO R5
         LA    R4,LIST      POINT R4 TO FIRST BLDL LIST ENTRY
BLOOP    EQU   *
         CLI   EC,HEX03     ARE THERE 3 HALF-WORDS OF USER DATA
         BE    ILREADY      IF SO - ASSUME ILREDIT-FORMAT ALREADY
         CLI   EC,BINZERO   ARE THERE 0 HALF-WORDS OF USER DATA
         BNE   INVDEQ       IF NOT - DEQ & STOP JOB WITH RETURN CODE 16
         MVI   EVERS,HEX01  MOVE X'01' TO VERSION NUMBER IN BLDL ENTRY
ILREADY  EQU   *
         MVC   SNAME,ENAME   MOVE MODULE NAME + TTR TO STOW AREA
         MVC   SVERS,EVERS   MOVE VERSION NUMBER FROM BLDL TO STOW AREA
         STOW  PDS,SNAME,R      ISSUE STOW
         C     R15,F0        CHECK STOW RETURN CODE FOR ZERO
         BNE   INVDEQ      IF NOT - DEQ & STOP JOB WITH RETURN CODE 16
         A     R4,F20      POINT R4 TO NEXT BLDL LIST ENTRY
         BCT   R5,BLOOP      SUBTRACT 1 FROM R5 & BRANCH IF NON ZERO
         DEQ   (QNAME,JFCBSP,,SYSTEM)  UPDATE O.K. - DEQ
* CALCULATE SETSSI INFO & SET UP CARD
         UNPK  SETSSI+8(5),SDATE   UNPACK DATE GIVING 1ST 5 OF SETSSI
         MVO   MINS,STIME+1(1)     (MOVE BCD TIME FIELDS INTO
         MVO   HRS,STIME(1)         PACKED DECIMAL FORMAT)
         MP    MINTOT,HRS          MULTIPLY HOURS BY 60
         AP    MINTOT,MINS         ADD IN THE MINUTES
         CVB   R3,MINTOT       CONVERT MINUTES TOTAL TO BINARY(IN R3)
*******************************************************************
         A     R3,=F'61440'           *  HERE COMMENCETH A RATHER *
         STC   R3,SETSSI+15           *         HAM-FISTED        *
         SRL   R3,4                   *         METHOD  OF        *
         STC   R3,SETSSI+14           *         CONVERTING        *
         SRL   R3,4                   *          INTERNAL         *
         STC   R3,SETSSI+13           *         HEXADECIMAL       *
         MVZ   SETSSI+14(2),SETSSI+13 *         TO  PRINTED       *
         XR    R5,R5                  *         HEXADECIMAL       *
         LA    R4,SETSSI+14           *      HIGHEST  POSSIBLE    *
         BAL   R10,ZONCHK             *    VALUE IS '59F' (2359)  *
         A     R4,F1                  *      (SEE ALSO ZONCHK)    *
         BAL   R10,ZONCHK             *  (I NOW KNOW A BETTER WAY)*
*******************************************************************
         PUT   LINK3,SETSSI    WRITE SETSSI RECORD TO IT'S OWN FILE
         MVC   SSI,SETSSI
         MVC   YYDDD,SETSSI+8
         UNPK  HH,HRS
         UNPK  MM,MINS
         OI    HH+1,HEX30
         OI    MM+1,HEX30
         PUT   PRNTOUT,PRNTSSI
RETURN   EQU   *
         CLOSE (SYSIN,,PRNTOUT,,COMPOUT,,PDS,,LINK1,,LINK2,,LINK3)
         L     R13,4(R13)
         LM    R14,R12,12(R13)
RTRNCDE  LA    R15,0
         BR    R14
INVALID  EQU   *
         MVC   NI1TO16,INVIPT   INDICATE THAT INPUT WAS INVALID
NOINPUT  EQU   *
         PUT   PRNTOUT,NOIPT    WRITE RECORD GIVING REASON FOR ERROR
         MVI   RTRNCDE+3,RC16   SET UP RETURN CODE 16
         B     RETURN
INVDEQ   EQU   *
         DEQ   (QNAME,JFCBSP,,SYSTEM)   UPDATE UNSUCCESFUL - DEQ
         MVC   NI1TO16,INVPDS INDICATE THAT PDS UPDATE WAS UNSUCCESSFUL
         B     NOINPUT
*    END OF PROGRAM LOGIC
SYSIN    DCB   DDNAME=SYSIN,MACRF=GM,DSORG=PS,EODAD=EOCARDF
PRNTOUT  DCB   DDNAME=PRNTOUT,MACRF=PM,DSORG=PS
COMPOUT  DCB   DDNAME=COMPOUT,MACRF=PM,DSORG=PS
LINK1    DCB   DDNAME=LINK1,MACRF=PM,DSORG=PS
LINK2    DCB   DDNAME=LINK2,MACRF=PM,DSORG=PS
LINK3    DCB   DDNAME=LINK3,MACRF=PM,DSORG=PS
PDS      DCB   DDNAME=PDS,DSORG=PO,MACRF=(R,W),EXLST=PDSEXIT
PDSEXIT  DS    0F
         DC    X'87'
         DC    AL3(JFCBSP)
         DS    0F
JFCBSP   DS    0CL44
         DS    CL176
QNAME    DC    C'SYSIEWL '
SAVAR    DS    18F
ADFRST   DS    F
ADLIM    DS    F
ADSP8    DS    F
F0       DC    F'0'
F1       DC    F'1'
F8       DC    F'8'
F20      DC    F'20'
         DS    0F
SNAME    DS    CL11
         DC    X'03'
SVERS    DS    C
SDATE    DS    CL3
STIME    DS    CL2
         DS    CL2
         DS    0D
MINTOT   DC    PL8'60'
MINS     DC    PL2'0'
HRS      DC    PL2'0'
SPACE8   DC    CL8' ' THIS CARD(SPACE8 DC CL8) MUST ALWAYS PRECEDE FRST
FRST     DS    CL80
LIMIT    DS    CL8    THIS CARD(LIMIT DS CL8) MUST ALWAYS FOLLOW FRST
HEXFS    DC    X'FFFFFFFFFFFFFFFF'
BLDLIST  DS    H
         DC    H'20'
LIST     DS    CL200
ED1TO5   DS    0CL5
EDAREA   DS    CL80
AL1TO5   DS    0CL5
ALTAREA  DS    CL80
COMPAREA DC   CL80'./ COMP EXEC=???L,PARML=''MAP,AC=0,LET,LIST'',NAME='
REDEF    DC    CL80'./ REDEF SYSUT1,LINK2'
SETSSI   DC    CL80' SETSSI'
PRNTSSI  DS    0CL80
SSI      DS    CL17
         DC    CL35'** SOURCE MODULE(S) STAMPED - DATE '
YYDDD    DS    CL5
         DC    CL6',TIME '
HH       DS    CL2
         DC    C'.'
MM       DS    CL2
         DC    CL12' ***********'
LINKCARD DC    CL80'./ COMP EXEC=LNK'
INVIPT   DC    C'INVALID INPUT   '
INVPDS   DC    C'SOURCE PDS ERROR'
NI1TO16  DS    0CL16
NOIPT    DC    CL80'NO INPUT'
LINK5    DC    C'-LINK'
SWITCH   DC    X'00'
BINZERO  EQU   X'00'
HEX01    EQU   X'01'
FIRSTRD  EQU   X'01'
SECNDRD  EQU   X'02'
HEX03    EQU   X'03'
EDERRSW  EQU   X'04'
HEX06    EQU   X'06'
LINKSW   EQU   X'08'
HEX08    EQU   X'08'
EOFSW    EQU   X'10'
RC16     EQU   X'10'
SORTSW   EQU   X'20'
HEX30    EQU   X'30'
SPACE    EQU   X'40'
HEXCF    EQU   X'CF'
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
BLENTRY  DSECT
ENAME    DS    CL8
         DS    CL5
EC       DS    C
EVERS    DS    C
         END
************************************************************************
************************************************************************
************************************************************************
************************************************************************
************************************************************************
************************************************************************
CTO002A  CSECT
         STM   R14,R12,12(R13)
         BALR  R12,0
         USING *,R12
         LR    R11,R13
         LA    R13,SAVAR
         ST    R13,8(R11)
         ST    R11,4(R13)
* START OF PROGRAM LOGIC
         OPEN  (INFILE,(INPUT),SPECARD,(INPUT),SYSPRINT,(OUTPUT))
         PUT   SYSPRINT,ASTERS   PRINT FIRST LINE OF ASTERISKS
         MVI   ASTERS,X'40'      CHANGE CARRIAGE CONTROL CHARACTER
         PUT   SYSPRINT,HD1      PRINT FIRST HEADING LINE
         RDJFCB LOAD             GET LOAD LIBRARY NAME
         MVC   LOADNAME,JFCBSP   MOVE IT INTO PLACE
         RDJFCB SOURCE           GET SOURCE LIBRARY NAME
         MVC   JFCB1,AST19       MOVE ASTERISK & BLANK AFTER NAME
         PUT   SYSPRINT,HD2      PRINT SECOND HEADING LINE
         PUT   SYSPRINT,ASPA     PRINT BLANK LINE(ASTERISK AT EACH END)
         PUT   SYSPRINT,HD3    PRINT START OF THIRD HEADING(ASTERISKS)
         GET   SPECARD,SPAREA          READ SPEC. CARD
         CLC   TYPRUN,=C'VALID   RUN'
         BE    VALID
         CLC   TYPRUN,=C'ILR SUSPECT'
         BE    ILRSUSP
         CLC   TYPRUN,=C'ILR NOT RUN'
         BE    NOILR
EOSPEC   EQU   *             ROUTINE FOR SPEC. CARD INVALID OR MISSING
         MVC   HD3A,BADSPEC        MOVE MESSAGE TO THIRD HEADING
         BAL   R10,PUTS1           PRINT REMAINDER OF THIRD HEADING
RETURN   EQU   *
         PUT   SYSPRINT,ASTERS   PRINT FINAL LINE OF ASTERISKS
         CLOSE (INFILE,,SYSPRINT,,SPECARD)    CLOSE FILES
         L     R13,4(R13)
         LM    R14,R12,12(R13)
RTRNCDE  LA    R15,0                      ZEROISE RETURN CODE
         BR    R14                           RETURN POINT
* VALID COMPILE & LINK ROUTINE
VALID    EQU   *
         MVC   HD3A,GOODRUN        MOVE MESSAGE TO THIRD HEADING
         B     BALPUTS1                 GO TO COMMON ROUTINE
* SUSPECT COMPILE & LINK ROUTINE
ILRSUSP  EQU   *
         MVC   HD3A,BADCOMP        MOVE MESSAGE TO THIRD HEADING
         B     BALPUTS1                 GO TO COMMON ROUTINE
* COMPILE & LINK BYPASSED ROUTINE
NOILR    EQU   *                                       (CHANGE OVERLAY
         MVC   HDOVLY(34),=C'+ * COMPILE ETC NOT RUN BECAUSE - '  LINE)
         MVC   HD3A,BADINPUT       MOVE MESSAGE TO THIRD HEADING
* COMMON ROUTINE
BALPUTS1 EQU   *
         BAL   R10,PUTS1         PRINT REMAINDER OF THIRD HEADING
GETNEXT  EQU   *
         PUT   SYSPRINT,CARDLINE PRINT LINE WITH INPUT CARD(OR HEADING)
         GET   INFILE,INAREA       GET INPUT RECORD
         B     GETNEXT         RETURN TO PRINT & GET NEXT
EOINFILE EQU   *               FALL THROUGH HERE ON END OF INPUT FILE
         PUT   SYSPRINT,HDOVLY   PRINT OVERLAY LINE
         PUT   SYSPRINT,ASPA     PRINT BLANK LINE(ASTERISK AT EACH END)
         B     RETURN            GO TO END OF PROGRAM ROUTINE
PUTS1    EQU   *         SUBROUTINE USING RETURN REGISTER R10
         PUT   SYSPRINT,HD3    PRINT MESSAGE PART OF THIRD HEADING
         MVC   HD3B,AST38      'ASTERISK' OUT MESSAGE
         PUT   SYSPRINT,HD3    PRINT LAST OF THIRD HEADING(ASTERISKS)
         PUT   SYSPRINT,ASPA     PRINT BLANK LINE(ASTERISK AT EACH END)
         BR    R10               RETURN TO CALLING POINT
*    END OF PROGRAM LOGIC
SYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS
INFILE   DCB   DDNAME=INFILE,MACRF=GM,DSORG=PS,EODAD=EOINFILE
SPECARD  DCB   DDNAME=SPECARD,MACRF=GM,DSORG=PS,EODAD=EOSPEC
SOURCE   DCB   DDNAME=SOURCE,DSORG=PO,MACRF=R,EXLST=SRCEXIT
LOAD     DCB   DDNAME=LOAD,DSORG=PO,MACRF=R,EXLST=LDEXIT
SAVAR    DS    18F
SRCEXIT  DS    0F
         DC    X'87'
         DC    AL3(JFCBSP)
LDEXIT   DS    0F
         DC    X'87'
         DC    AL3(JFCBSP)
         DS    0F         ALIGNMENT REQUIRED FOR RDJFCB MACRO
         DS    CL2
HD2      DC    CL13' *LOAD PDS...'
LOADNAME DS    CL44
         DC    CL13'SOURCE PDS...'
JFCBSP   DS    CL44       N.B. THIS MUST BE ON WORD BOUNDARY
JFCB1    DS    CL19
JFCB2    DS    CL113      REMAINDER OF RDJFCB MACRO AREA(176 BYTES)
TYPRUN   DS    0CL11
SPAREA   DS    CL80
BADSPEC  DC    CL33'  SPEC. CARD MISSING OR INVALID'
BADCOMP  DC    CL33' INVALID COMPILATION OR LINKEDIT'
BADINPUT DC    CL33'    INVALID PRE-PROCESSOR RUN'
GOODRUN  DC    CL33'              VALID'
ASTERS   DS    0CL133
         DC    CL44'1*******************************************'
AST38    DC    CL38'**************************************'
         DC    CL51'*********************************'
HD1      DS    0CL133
         DC    CL26' *'
         DC    CL51'LEYLAND(BATHGATE) SOURCE LIBRARY TO LOAD LIBRARY -'
         DC    CL37'UPDATE REPORT'
AST19    DC    CL19'*'
ASPA     DC    CL114' *'
         DC    CL19'*'
HD3      DC    CL36' *'
         DC    CL5'*****'
HD3A     DS    0CL33
HD3B     DC    CL38'**************************************'
         DC    CL35' '
         DC    CL19'*'
HDOVLY   DC    CL133'+ ********** LOAD MODULE STAMPED -'
CARDLINE DC    CL34' *'
INAREA   DC    CL65'123456....       INPUT CARD(S) COLUMNS'
         DC    CL34'...701234567880*'
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
************************************************************************
************************************************************************
******   T H E      E N D       ****************************************
************************************************************************
************************************************************************
************************************************************************
