//N320DOCS JOB (73224,2,200),PETER
// EXEC  ACL,PARM.L='LIST,XREF,MAP'
         TITLE 'SVSDOCS PROGRAM DESCRIPTION'
*        DOCS IS A PROGRAM TO PROVIDE A DISPLAY OF VIRTUAL MEMORY
*        IN AN SVS ENVIRONMENT, UPDATED AT REGULAR PREDEFINED INTERVALS
*
*        IN ADDITION TO THE MEMORY MAP, OTHER SYSTEM INFORMATION SUCH
*        AS OUTSTANDING MOUNT REQUESTS, INTERVENTION REQUIRED STATUS,
*        FREE REQUEST QUEUE ELEMEMTS, OUTSTANDING REPLIES, FREE
*        INITIATORS, WTO BUFFERS USED AND PAGING RATE IS DISPLAYED.
*        OUTPUT IS DIRECTED TO A VDU WITH AN 80 CHARACTER LINE WIDTH
*        AND A VARIABLE NUMBER OF LINES. IN THE PROGRAM THE BTAM ACCESS
*        METHOD IS USED TO DRIVE A 3270 DISPLAY SCREEN.
*
*        TSO USER REGIONS WILL BE DISPLAYED ONLY IF THE FIRST THREE
*        CHARACTERS OF THE TSO JOBNAME ARE 'TSO'. ALTERNATIVELY THE
*        'CLC' INSTRUCTION BELOW THE COMMENT 'TEST FOR TSO ACTIVE'
*        SHOULD BE ALTERED ACCORDINGLY.
*        THE TASK WOULD NORMALLY BE CONSOLE INITIATED. IT CAN RESIDE IN
*        64K VIRTUAL REGION OR 16K REAL REGION.
*        TO TERMINATE THE TASK REPLY STOP TO THE OUTSTANDING REPLY
*
*        THE CVT MACRO SHOULD BE INCLUDED IN MACLIB FOR SUCCESSFUL
*        COMPILATION
*
*
*        SAMPLE JCL FOR CONSOLE INITIATION
*        // EXEC PGM=PROGNAME,REGION=64K,DPRTY=13
*        //STEPLIB DD DSN=LIBRARY,DISP=SHR
*        //TP DD UNIT=XXX  XXX=ADDRESS OF VDU
*
*
*        VARIABLE PARAMETERS - PROGRAM SHOULD BE ASSEMBLED WITH
*                              UPDATINT & SCRNZ SET TO REQUIRED
*                              TIME INTERVAL & SCREEN SIZE.
*
*                         N.B. THE PROGRAM USES THE TIME MACRO
*                              FOR TIME RELATED STATISTICS AND
*                              DOES NOT RELY ON AN ACCURATE
*                              STIMER PROMPTED DISPATCH.
*
*
UPDATINT EQU   10        UPDATE INTERVAL (10 = 10 SECS)
SCRNSZ   EQU   32        NR OF 80 CHAR LINES ON VDU (32 = 32 LINES)
*
*        REGISTER DEFINITIONS
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
*
         TITLE 'SVSDOCS MAINLINE CODE'
SVSDOCS  CSECT
         STM   R14,R12,12(R13)
         LR    R11,R15
         USING SVSDOCS,R11
         ST    R13,SAVEREG+4
         LR    R10,R13
         LA    R13,SAVEREG
         ST    R13,8(R10)
*
*        CLEAR DISPAY BUFFER
*
         L     R0,ABUFF
         LA    R1,L'BUF
         SR    R2,R2
         L     R3,=X'40000000'   SET SPACE IN HI BYTE
         MVCL  R0,R2
*
*        OPEN DCB FOR DISPLAY
*
         OPEN  TP
*
*
XX1      LA    R10,CLDOCS
         BAL   R9,OSREP    CHECK FOR REPLY TO INITIATE CLOSEDOWN
*
*
*
*
         L     R12,16       GET CVT PTR
         USING CVTTAB,R12   ESTABLISH ADDRESSABILITY
*
*
         L     R1,ABUFF
         ST    R1,SAVE
*
*
         L     R3,ADSP
*
         LA    R5,49(R1)
         SR    R6,R6
*
         L     R8,CVTHEAD
         L     R8,TCBORG(R8)
*
*
*        WRITE MASTER SCHED TEXT INTO INTERNAL BUFFER
*
*
         BAL   R10,FILL
         BAL   R10,PT0
         MVC   0(40,R3),BUFF
         LA    R4,1
         LA    R3,40(R3)
*
*
*        GET FIRST  FIRST LEVEL SUBTASK TCB POINTED BY MASTER SCHED
*        TCB.
*
*
         L     R7,TCBSUB(R8)           GET SUBTADK TCB
         LTR   R7,R7                   CHECK FOR NO SUBTASK
         BZ    SQS                     THEN BUILD SQS SIZE
*
*
*        GET SECOND LEVEL TCB POINTED BY FIRST LEVEL TCB.
*        IF NO TCB IS FOUND THE INITIATOR IS WAITING. OTHERWISE
*        GET TIOT, INITNAME, PRTY, REGION, AND JOBNAME.
*
*
SUB2     L     R8,TCBSUB(R7)       GET SECOND LEVEL SUBTASK
         LTR   R8,R8                   CHECK FOR NO SUBTASK
         BZ    PREV                    SKIP IT
         TM    TCBPTK(R8),X'F0'        CHECK PROTECTION KEY
         BZ    SUB3                    IT IS PROT-KEY ZERO
         L     R9,TCBTIO(R8)           GET TIOT
         MVC   INIT(5),3(R9)           MOVE INITNAME (-HOS)
*
* CALCULATE TIME REMAINING FOR A JOB. THIS IS DONE ONLY IF A JOBSTEP
* SUBTASK IS FOUND. TIME IS DISPLAYED AS HH.MM.SS
*
         L     R10,TCBSUB(R8)          GET SUBTASK THREE
         LTR   R10,R10                 CHECK FOR NO SUBTASK
         BZ    NOTIME                  TIME IS ZERO
         L     R9,TCBTME(R8)
         LR    R8,R10
         LTR   R9,R9
         BNE   TIMER
*
NOTIME   EQU   *
         MVC   TIME,=X'00000000'
         B     TMY
*
TIMER    EQU   *
         TM    0(R9),X'07'
         BNO   TM20
         LM    R0,R1,32(R9)
         B     TMX
TM20     LM    R0,R1,16(R9)
TMX      SRDL  R0,12                   MICRO-SECONDS
         D     R0,=F'1000000'          SECONDS
         SR    R0,R0
         D     R0,=F'60'               MINUTES
         CVD   R0,SECS                 ×..×..×..×..×..×..×0S×SC×
         SR    R0,R0
         D     R0,=F'60'               HOURS
         CVD   R0,MINS                 ×..×..×..×..×..×..×0M×MC×
         CVD   R1,CONV                 ×..×..×..×..×..×..×0H×HC×
         MVO   TIME(2),CONV+6(2)       ×HH×C.×..×..×
         MVO   TIME+1(2),MINS+6(2)     ×HH×MM×C.×..×
         MVO   TIME+2(2),SECS+6(2)     ×HH×MM×SS×C.×
TMY      EQU   *
*
*
*
*
*        GET THIRD LEVEL SUBTASK TCB. THIS IS THE JOBSTEP TCB.
*        IF NO TCB IS FOUND, THE JOB IS ALREADY ENQUEUED.
*        GET STEPNAME.
*
SUB3     BAL   R10,PTX        PROTECT KEY NON ZERO
         L     R9,TCBPQE(R8)  LOAD DPQE
         SR    R10,R10
         ICM   R10,8,8(R9)   LOAD TOP BYTE OF DPQE PTR
         BNZ   ENQ           NOT PQE ADDRESS SO SHOW WAITING
         BAL   R10,FILL
         BAL   R10,WRITE
*
*        TEST FOR TSO ACTIVE
*
         CLC   JOB(3),=C'TSO'
         BNE   PREV
         STM   R8,R9,SAVE2
         L     R8,TCBSUB(R8)     TSO CONTROL TASK
         LTR   R8,R8
         BZ    RSTR              NONE THERE
         LR    R9,R8             USE R9 FOR LATERAL CHAINING
NEXTREG  L     R9,TCBPREV(R9)    GET REGION CONTROL TASK
         LTR   R9,R9
         BZ    RSTR              OUT IF NO MORE REGIONS
         L     R8,TCBSUB(R9)     GET USER TCB
         LTR   R8,R8
         BZ    NEXTREG           GET NEXT REGION IF THIS UNUSED
         BAL   R10,FILL
         MVC   JOB(8),=CL8'TSO USER'
         L     R8,TCBTIO(R8)     GET TIOT
         MVC   JOB+8(8),0(R8)    MOVE IN USER ID
         BAL   R10,WRITE         AND PLACE IN BUFFER
         B     NEXTREG            GET NEXT REGION
RSTR     LM    R8,R9,SAVE2        RESTORE REGS
         B     PREV
SAVE2    DC    2F'0'
*
*
*        MOVE GOTTEN TEXT INTO INTERNAL BUFFER.
*
*
WRITE    C     R4,MAXLINE              CHECK BUFFER FULL
         BCR   10,R10                  SKIP BUFFER LOADING
         MVC   0(40,R3),BUFF           MOVE CONTENTS OF BUFFER
         LA    R3,40(R3)               GET NEXT BUFFER AREA
         LA    R4,1(R4)                ADD INTO COUNT
         EX    0,PT0                   CLEAR INIT NAME
         BR    R10                     GET NEXT TCB CHAIN
*
*
* ENQ:   TO PROCESS ENQUEUE SITUATIONS.
*
*
ENQ      C     R6,MAXLINE              CHECK FOR BUFFER END
         BNL   PREV                    YES, SKIP IT
         MVC   0(6,R5),INIT            MOVE INITNAME
         MVC   7(8,R5),JOB+8           MOVE JOBNAME
         CLI   0(R5),C' '
         BNE   WAITY
         MVC   0(6,R5),JOB
WAITY    CLI   8(R5),C' '
         BNE   WAITX
         MVC   7(8,R5),=C'WAITING '
WAITX    EX    0,PT0
         LA    R5,80(R5)               GET NEXT BUFFER
         LA    R6,1(R6)                HIGHER COUNT
*
*
*        GET PREVIOUS TCB IN TCB SUBTASK QUEUE.
*        IF GOTTEN TCB HAS NO PREVIOUS ONE THE SCAN IS TERMINATED.
*        OTHERWISE THE NEXT SECOND LEVEL TCB WILL BE EXAMINED.
*
*
PREV     L     R7,TCBPREV(R7)          GET NEXT MASTER SCHED SUBTASK
         L     R8,TCBPREV(R7)          GET PREVIOUS TASK
         LTR   R8,R8                   CHECK FOR TERMINATION
         BNZ   SUB2                    TASKNAME FOUND PROCESS IT
*
*
*        AT TERMINATION OF THE TCB SCAN THE TEXT FOR SQS IS CALCU
*        LATED BY EXAMINATION OF THE GOVRFLB.
*        THE GOTTEN TEXT IS STORED INTO INTERNAL BUFFER.
*
*
SQS      C     R4,MAXLINE
         BNL   MOUNT
         L     R1,CVTABEND             GET USER AREA
         L     R1,SCVTMSSQ(R1)         ADRESS OF GOVRFLB
         MVC   HIGH,=X'01000000'     FORCE LAST USED BYTE IN SQS(16MEG)
         MVC   LOW,0(R1)               SET LOW ADD OF SQA FROM GOVRFLB
         L     R1,HIGH
         S     R1,LOW
         ST    R1,REG
         MVC   JOB(16),=C'SYSTEM    SQA   '
         XC    PRTY(2),PRTY CLEAR PRTY & PROT
         EX    0,PT0 CLEAR INITNAME
         MVC   0(40,R3),BUFF MOVE BUFFER
         LA    R4,1(R4)
         LA    R3,40(R3)
*
*         MOVE IN LINKPACK TEXT
*
         C      R4,MAXLINE
         BNL   MOUNT           SKIP ENTRY IF NO SPACE
         MVC   HIGH,LOW
         MVC   LOW,CVTSHRVM
         L     R1,HIGH
         S     R1,LOW
         ST    R1,REG
         MVC   JOB(16),=C'PAGEABLELINKPACK'
         MVC   0(40,R3),BUFF
         LA    R4,1(R4)
         LA    R3,40(R3)
*
*        MOVE IN NUCLEUS TEXT
*
         C    R4,MAXLINE
         BNL  MOUNT
         XC   LOW,LOW         FORCE LOW ADDRESS
         L    R1,CVTNUCB      TO OF NUCLEUS
         ST   R1,HIGH
         ST   R1,REG
        MVC   JOB(16),=CL16'VS2 R1.7NUCLEUS'
         MVC   0(40,R3),BUFF     MOVE IN TEXT
         LA    R4,1(R4)          UPDATE LINE CNT
*
*    GET ALL  OUTSTANDING MOUNT REQUESTS
         EJECT
*
*
*
MOUNT    STM   R2,R9,MYSAVE
         LA    R6,1
         L     R9,SAVE
         MVC   65(14,R9),=C'MOUNTS PENDING'
         LA    R9,145(R9)
         MVI   SUCB,C' '
         MVC   SUCB+1(071),SUCB   CLEAR TO BLANKS
         L     R2,CVTILK2
ST1      LH    R3,0(R2)
         LTR   R3,R3
         BC    8,NXT
         BC    4,INTEND
         CLI   2(R3),X'FF'
         BC    7,INTEND
         CLI   18(R3),X'20'
         BC    8,ST7            DIRECT ACCESS
         CLI   18(R3),X'80'
         BC    8,ST6A           TAPES
NXT      LA    R2,2(R2)
         B     ST1
ST6A     TM    6(R3),X'40'     DEVICE READY?
         BZ    NXT             YES SO NO MOUNT PENDING
ST7      TM    6(R3),X'01'
         BZ    ST8               NO ERROR ROUTINE
*        ERROR ROUTINE IN CONTROL FOR NOT READY DEVICE..MUST BE INT REQ
         MVC   VOLUME(7),=C'INT REQ'
         B    ST9
ST8      TM    35(R3),X'80'
         BZ    NXT
         MVC   VOLUME(6),28(R3)
ST9      MVC   UNIT(3),13(R3)
         C     R6,MAXLINE
         BNL   INTEND
*        CHECK IF ALREADY FOUND
         LA    R4,3
         LA    R5,EUCB
         LA    R8,SUCB
ST10     CLI   0(R8),C' '
         BE    ST11         NOT IN LIST
         CLC   0(3,R8),UNIT
         BE    ST13         ALREADY IN LIST SO IGNORE
         BXLE  R8,R4,ST10
         B     ST13         LIST FULL SO IGNORE
ST11     MVC   0(3,R8),UNIT SET IN LIST
         LA    R6,1(R6)
         MVC   0(14,R9),VOLUME
         LA    R9,80(R9)
         MVC   VOLUME(7),=CL7' '   CLEAR ID
ST13     MVC   UNIT,=CL3' '        AND UNIT
         B     NXT
VOLUME   DC    CL7' '
         DC    C' ON '
UNIT     DC    CL3' '
SUCB     DC    24CL3' '
EUCB     EQU   *-3
MYSAVE   DS    8F
*
*
INTEND   LM    R2,R9,MYSAVE   CONTINUE WITH MAINLINE PROCESSING
*
         EJECT
*
* TO GET ALL OUTSTANDING REPLIES WE SEARCH REPLY QUEUE ELEMENT
* QUEUE ADRESSED VIA CVT AND UCM-TABLE. WE GET REPLY NUMBER
* AND CORESPONDING JOBNAME FROM TIOT VIA TCB.
*
*
         L     R1,CVTCUCB    GET POINTER TO REPLY BUFFERS
         CLC   UCMRQNR(2,R1),=X'0000' IS POINTER ZERO
         BNH   WTOREND
         L     R1,UCMRPYQ(R1)
*
WTORLOOP LTR   R1,R1 END OF LOOP
         BZ    WTOREND
*
         LA    R5,80(R5)
         LA    R6,1(R6)
*
         C     R6,MAXLINE ISBUFFER EXEEDED
         BNL   WTOREND
*
         MVC   0(5,R5),=C'REPLY'
         MVC   6(2,R5),RQELD(R1)
         L     R2,RQETCB(R1)
         L     R2,TCBTIO(R2)
         MVC   9(8,R5),0(R2)
         L     R1,0(R1)
         B     WTORLOOP
*
UCMRQNR  EQU   56
RQELD    EQU   4
UCMRPYQ  EQU   28
RQETCB   EQU   8
*
WTOREND  EQU   *
*
*
*
*        BUILD BUFFER FOR INTERNAL SORT
*        FIRST WORD CONTAINS SORT VALUE.
*        SECOND THE DISPLACEMENT TO THE INTERNAL TEXT AREA.
*
*
BBUFF    EQU   *
         ST    R4,COUNT
         L     R1,ADSP
         LA    R3,DSPX
         SR    R2,R2
         SR    R6,R6
*
*
LOOPM    MVC   0(4,R3),4(R1)
         ST    R2,4(R3)
         LA    R3,8(R3)
         LA    R2,40(R2)
*
*
         LA    R1,40(R1) GET NEXT ENTRY
         BCT   R4,LOOPM
         TITLE 'D2260X - SORT SUBROUTINE'
*        SUBROUTINE TO SORT THE HIGH WATERMARKS OF THE INTERNAL
*        TEXT.
*
*
SORT     SR    R3,R3
         LA    R1,DSPX
         L     R4,COUNT                LOAD COUNT
LOOP     LA    R2,8(R1)
         BCT   R4,SGO
         B     SEND
*
SGO      L     R5,0(R1)
         C     R5,0(R2)
         BH    LOOPX
         MVC   Z,0(R1)
         MVC   0(8,R1),0(R2)
         MVC   0(8,R2),Z
         SR    R3,R3
*
LOOPY    LR    R1,R2
         B     LOOP
*
LOOPX    LA    R3,1(R3)
         B     LOOPY
*
SEND     LA    R3,1(R3)
         C     R3,COUNT
         BNE   SORT
         L     R1,ADSP
         SR    R4,R4
         LA    R2,DSPX
         A     R1,4(R2)       CORRECT DISPLACEMENT
         L     R3,COUNT
         L     R7,SAVE
         L     R9,8(R1)
         BAL   R10,PUT
*
*
         TITLE 'SVSDOCS- BUILD DISPLAY BUFFER'
*        BUILD DISPLAY BUFFER FROM SORTED INTERNAL TEXT.
*        FREE REGIONS ARE RECOGNIZED AND INSERTED.
*
*
DLOOP    L     R9,0(R1)
         LA    R2,8(R2)
         BCT   R3,DLOOPY
         B     DEND
*
DLOOPY   EQU   *
         L     R6,4(R2)
         L     R1,ADSP
         LA    R1,0(R1,R6)
         C     R9,4(R1)
         BNE   DFREE
         L     R9,8(R1)
         BAL   R10,PUT
         B     DLOOP
*
DEND     EQU   *
*
*        DISPLAY TIME AND DATE ON LAST LINE
*
         TIME
         MVC   TVAL,=X'21204B20204B2020'
         ST    R0,TIME
         ED    TVAL,TIME
         MVC   DVAL,=X'21204B202020'
         ST    R1,TIME
         ED    DVAL,TIME+1
         LA    R3,(SCRNSZ-1)*80          LAST LINE
         A     R3,ABUFF
         MVC   50(TMSGLEN,R3),TMSG
*
*        DISPLAY WTO BUFFERS USED
*
         L     R3,CVTCUCB      GET UCM
         LH    R1,UCMWQLM(R3)  WTO BUFFER LIMIT
         CVD   R1,CONV
         MVC   WTOLIM,=X'40202120'
         ED    WTOLIM,CONV+6
         LH    R1,UCMWQNR(R3)  WTO BUFFERS USED
         CVD   R1,CONV
         MVC   WTOUSED,=X'40202120'
         ED    WTOUSED,CONV+6
         LA    R3,(SCRNSZ-3)*80
         A     R3,ABUFF
         MVC   50(WTOMLEN,R3),WTOBUFF
*
*        DISPLAY TOTAL PAGING RATE
*
         L     R2,CVTPVTP    PTR TO PAGE VECTOR TABLE
         L     R3,PVTNPOUT(R2) PAGES OUT
         A     R3,PVTNPIN(R2)  PAGES IN
         A     R3,PVTNPREC(R2) PAGES RECLAIMED
         A     R3,PVTSPOUT(R2) SWAPPED OUT PAGES
         A     R3,PVTSPIN(R2)  SWAPPED IN PAGES
         L     R2,PTOT         LAST PAGE TOTAL
         ST    R3,PTOT         SAVE THIS TOTAL
         TIME  BIN             TOD IN 1/100 SEC
         L     R1,LASTIME
         ST    R0,LASTIME      SAVE CURRENT TIME
         LTR   R2,R2
         BM    GETRQE          SKIP IF FIRST TIME THRU'
         SR    R0,R1           ELAPSED IN 1/100 SEC
         CR    R3,R2
         BL    OLDRATE         DISPLAY PREVIOUS IF COUNTS RESET
         SR    R3,R2
         SR    R2,R2
         M     R2,=F'1000'
         DR    R2,R0         PAGES/10 SEC
         CVD   R3,CONV
         MVC   PRATE,=X'4021204B20'
         ED    PRATE,CONV+6
OLDRATE  LA    R3,(SCRNSZ-4)*80
         A     R3,ABUFF
         MVC   50(PAGEMLEN,R3),PAGEMSG
*
*        CALCULATE FREE RQES
*
GETRQE   L     R3,CVTIXAVL ADDR  OF FREELIST
         SR    R10,R10   INITIALISE COUNT
RQ1      LH    R3,0(R3)  SCAN FREELIST
         LTR   R3,R3
         LA    R10,1(R10) UPDATE COUNT
         BC    02,RQ1    GET NEXT
         BCTR  R10,0      ADJUST TOTAL
         CVD   R10,CONV
         MVC   RQES,=X'40202120'
         ED    RQES,CONV+6
         LA    R3,(SCRNSZ-5)*80
         A     R3,ABUFF
         MVC   50(RQMLEN,R3),QTEXT
*
*        WRITE BUFFER TO SCREEN
*
         LA    R2,CCHAR         ADDR OF BUFFER
         LA    R3,SCRNSZ*80+4   LENGTH OF BUFFER & CNTRLS
         LA    R4,1             LINE NUMBER
         BAL   9,WRSCREEN
         L    R3,=X'40000000' SET PAD TO BLANK AND ZERO COUNT
         SR    R2,R2
         LA    5,SCRNSZ*80     LENGTH FOR CLEAR
         L     R4,ABUFF
         MVCL  R4,R2         CLEAR BUFFER
         STIMER WAIT,BINTVL=INTIME
         B     XX1           REPEAT
         EJECT
OSREP    TM    WTOECB,X'40'
         BCR   08,R9         RETURN IF ECB NOT POSTED
         CLC   WTOREP,=C'STOP'
         BCR   08,R10        RETURN IF STOP ENTERED
         XC    WTOECB,WTOECB
         XC    WTOREP,WTOREP
         WTOR  'DOCS - REPLY STOP TO END',WTOREP,4,WTOECB
         BR    R9
CLDOCS   LA    R2,CCHAR
         LA    R3,4
         LA    R4,1
         BAL   9,WRSCREEN       CLEAR SCREEN
         LA    R2,DOCSND
         LA    R3,ENDLEN
         LA    R4,1             LINE NUMBER
         BAL   9,WRSCREEN       WRITE END MESSAGE
END      EQU   *
         CLOSE TP
         L     R13,SAVEREG+4
         RETURN (14,12),RC=0
*
*
DFREE    S     R9,4(R1)
         MVC   0(17,R7),=C' **** FREE ***-->'
         BAL   R10,PUTX
         L     R9,8(R1)
         BAL   R10,PUT
         B     DLOOP
         TITLE 'D2260X - SUBROUTINES'
*
*        THESE SUBROUTINES ARE USED FOR DIFFERENT PURPOSES.
*        RETURN REGISTER IS ALREADY REG 10.
*
*
* PUT:   TO WRITE ENTRIES INTO DISPLAY BUFFER.
*
*
PUT      MVC   0(8,R7),12(R1)
         MVC   9(8,R7),20(R1)
         CLI   34(R1),C' '
         BE    PUTX
*
*
         MVC   28(9,R7),=X'4021204B20204B2020'
         ED    28(9,R7),28(R1)
         MVC   38(6,R7),34(R1)
PUTY     EQU   *
         MVC   24(2,R7),=C'P='
         MVC   26(1,R7),32(R1)
*
PUTX     EQU   *
         SR    R8,R8
         D     R8,=F'1024'
         CVD   R9,CONV
         MVC   WORKA,=X'402020202020D2'
         ED    WORKA(6),CONV+5
         MVC   17(6,R7),WORKA+1
         LA    R4,1(R4)
         LA    R7,80(R7)
         C     R4,MAXLINE
         BH    DEND
         BR    R10
*
* FILL   TO WRITE PRTY AND REGION INTO INTERNAL TEXT
*
*
FILL     EQU   *
         SR    R1,R1                    CALCULATE DISPATCHING PRTY
         SR    R0,R0
         IC    R1,TCBPRTY(R8)
         D     R0,=F'16'
         STC   R1,PRTY
         TR    PRTY,TR
         L     R2,TCBPQE(R8)
         L     R2,8(R2)
         L     R1,20(R2)
         MVC   LOW,24(R2)
         ST    R1,REG
         A     R1,24(R2)
         ST    R1,HIGH
         BR    R10
*
*
* PTO:    TO WRITE JOBNAMES, STEPNAMES, INITS DEPENDING ON THE FOUND
*        PROTEKTION KEY.
*
*
WRSCREEN XC    TPDECB,TPDECB
         WRITE TPDECB,TSA,TP,(R2),(R3),,(R4),MF=E
         WAIT  ECB=TPDECB
         CLI   TPDECB,X'7F'
         BCR   08,9
         LA    R1,WTOMSG
         SVC   35
         STIMER WAIT,BINTVL=INTIME
         ST    R9,EXSV
         LA    R10,END
         BAL   R9,OSREP
         L     R9,EXSV
         B     WRSCREEN          REPEAT
         EJECT
PT0      MVC   INIT,=C'      '
PTX      L     R9,TCBTIO(R8)
         MVC   JOB(16),0(R9)
         MVC   PROT,TCBPTK(R8) MOVE PROTECTION KEY OF TASK
         BR    R10
         TITLE 'SVSDOCS- CONSTANTS AND DEFINITIONS'
*
*        SUBSTRING MAPPING FOR INTERNAL BUFFER
*        40 BYTES PER ENTRY
*
*
BUFF     DS    0F
LOW      DS    F
HIGH     DS    F
REG      DS    F
JOB      DS    CL8
STEP     DS    CL8
TIME     DC    F'0'
PRTY     DS    C
PROT     DS    C
INIT     DS    CL6
*        END OF MAPPING
TPTR     DC    A(BUF)
SAVE     DS    F
COUNT    DS    F
Z        DS    CL8
DSPX     DS    (SCRNSZ*2)F SET UP BUFF (8BYTES PER ENTRY)
CONV     DS    D
SECS     DS    D
MINS     DS    D
TR       DC    C'0123456789ABCDEF'
*
*
*        OFFSETS IN TASK CONTROL BLOCK (TCB)
*
*
TCBTME   EQU   120
TCBORG   EQU   132
TCBPREV  EQU   128
TCBSUB   EQU   136
TCBTIO   EQU   12
TCBPQE   EQU   152
TCBPTK   EQU   28
TCBPRTY  EQU   35
SCVTMSSQ EQU   108
*
         EJECT
         LTORG
*
SAVEREG  DS    18F
WTOECB   DC    X'40000000' SIMULATE POSTED FOR FIRST TIME THRU
WTOREP   DC    F'0'           REPLY AREA
INTIME   DC    A(UPDATINT*100) CONERT WAIT TIME TO HUNDREDTHS OF A SEC
DOCSND   DC    X'C7114DF0'
         DC    CL19' '
ENDMSG   DC    C'********** D O C S    E N D E D **********'
ENDLEN   EQU   *-DOCSND
HOME     DC    X'B8'
EXSV    DS    F
MAXLINE DC    A(SCRNSZ)  NR LINES ON SCREEN
WTOMSG  DC    H'30',H'0' WRITE MSG TO OP
WTOTXT  DC    C'DOCS TP ERROR: SENSE '
SNS     DC    CL5' '
HEXTAB  EQU   TR
QTEXT   DC    C'* FREE RQES'
        DC    CL9' '
RQES     DS    CL4
RQMLEN   EQU   *-QTEXT
TMSG     DC    C'TIME='
TVAL     DS    CL8
         DC    CL3' '
         DC    C'DATE='
DVAL     DS    CL6
TMSGLEN  EQU   *-TMSG
WTOBUFF  DC    C'* WTO BUFFERS'
WTOUSED  DS    CL4
         DC    C' OF'
WTOLIM   DS    CL4
WTOMLEN  EQU   *-WTOBUFF
PAGEMSG  DC    C'* PAGING RATE  '
PRATE    DS    CL5
         DC    C'/SEC'
PAGEMLEN EQU   *-PAGEMSG
LASTIME  DS    F
PTOT     DC    F'-1'
PVTNPOUT EQU   X'124'
PVTNPIN  EQU   X'128'
PVTSPOUT EQU   X'12C'
PVTSPIN  EQU   X'130'
PVTNPREC EQU   X'13C'
UCMWQLM  EQU   X'2E'
UCMWQNR  EQU   X'3A'
*
WORKA   DS    CL7
ABUFF   DC    A(BUF)
ADSP    DC    A(DSP)
*
*
*       TRANSLATE TABLE EBCDIC TO TTY (INVERTED ASCII)
*
*
         EJECT
TP       DCB   DDNAME=TP,MACRF=W,DSORG=CX,EROPT=ET
*
* LIST FORM MACRO FOR WRITE
*
         WRITE TPDECB,T,,,,,1,MF=L
*
CCHAR    DC    X'C7114040'   CNTRL CHARS TO PRECEDE SCREEN WRITE
BUF      DS    CL(SCRNSZ*80) BUFFER FOR SCREEN WRITE
DSP      DS    CL(SCRNSZ*40) INTERNAL BUFFER 40 BYTES PER ENTRY
CVTTAB   DSECT
         CVT
         END   SVSDOCS
//L.SYSLMOD DD DSN=T320.PROGLIB(DOCS),DISP=OLD
