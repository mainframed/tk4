         MACRO
&NAME    SM##  &A,&B
         SPACE
&NAME    MVC   &A.(8),MASK       * MOVE IN MASK
         ED    &A.(8),&B         * EDIT  PL4 TO CL7
         SPACE
         MEND
         EJECT
         PRINT GEN
         TITLE ' SAGUIDE -- SEQUENTIAL IEBUPDTE-STYLE OUTPUT FROM  PART*
               ITIONED INPUT '
         TITLE ' SAGUIDE -- SEQUENTIAL IEBUPDTE-STYLE OUTPUT FROM  PART*
               ITIONED INPUT '
***      SAGUIDE IS A PROGRAM WHICH READS A CARD IMAGE LIBRARY      ***
***                                                                 ***
***      AND PRODUCES UP TO EIGHT SEQUENTIAL FILES WHICH MAY BE     ***
***                                                                 ***
***      USED TO RECREATE IT, BY PASSAGE THROUGH IEBUPDTE           ***
***                                                                 ***
***      THE NUMBER OF FILES CREATED IS DETERMINED BY A PARM, WHOSE ***
***                                                                 ***
***      DEFAULT IS ONE                                             ***
***                                                                 ***
***      CONTROL CARDS MAY BE SUPPLIED, WHICH ENABLE THE USER TO    ***
***                                                                 ***
***      INCLUDE OR EXCLUDE INDIVIDUAL MEMBERS OR ENTIRE NODES      ***
***                                                                 ***
***      THE FORMAT IS AS FOLLOWS:-                                 ***
***                                                                 ***
***      COL 1 =   *          COMMENT                               ***
***                INODE=     INCLUDE ALL MEMBERS BEGINNING WITH THE***
***                           SPECIFIED NODE ( 1 NODE/CARD)         ***
***                ENODE=     EXCLUDE ALL MEMBERS BEGINNING WITH THE***
***                           SPECIFIED NODE ( 1 NODE/CARD)         ***
***                I          INCLUDE ALL MEMBERS ON THIS CARD      ***
***                           MEMBERS START IN COL 2 AND MAY BE     ***
***                           SEPARATED BY ,.:;/+-                  ***
***                           NO MEMBER MAY START IN COL 73 OR AFTER***
***                 E         EXCLUDE ALL MEMBERS ON THIS CARD      ***
***                           MEMBERS START IN COL 2 AND MAY BE     ***
***                           SEPARATED BY ,.:;/+-                  ***
***                           NO MEMBER MAY START IN COL 73 OR AFTER***
***                 C         CHANGE THE TWO-CHARACTER IEBUPDTE     ***
***                           CONTROL CARD IDENTIFIER TO THAT       ***
***                           PROVIDED IN COLS 2-3. ALSO CHANGE THE ***
***                           COMPARAND FOR EACH CARD IMAGE WRITTEN ***
***                           TO TAPE TO THE SAME CHARACTER STRING  ***
***                            -- THIS ENABLES AN 'IEBUPDTE-FORMAT' ***
***                           TAPE TO BE PRODUCED WITH CONTROL CARDS***
***                           THAT ARE UNIQUE TO THE INPUT STREAM.  ***
***                           THE GUIDE LIBRARY HAS ./ CARDS WITHIN ***
***                           ITS MEMBERS AND AN UNMODIFIED IEBUPDTE***
***                           WOULD GO MAD PROCESSING NORMAL OUTPUT ***
***                           FROM THIS PROGRAM. BY CHANGING WITH A ***
***                             C<<         CARD, AND PROVIDING A   ***
***                           COPY OF IEBUPDTE WHICH CAN COPE WITH  ***
***                           THE '<<' THE LIBRARY MAY BE RECREATED ***
***                           DURING EXECUTION THE PROGRAM REPORTS  ***
***                           ON THE NUMBER OF OCCURRENCES OF THE   ***
***                           CHOSEN CHARACTER STRING IN EACH MEMBER***
***                           IF GREATER THAN ZERO                  ***
***                                                                 ***
***            PARM INFORMATION:                                    ***
***                                                                 ***
***                                                                 ***
***                      THE NUMBER OF OUTPUT FILES IS SPECIFIED    ***
***                      AS A SINGLE EBCDIC NUMBER IN THE PARM      ***
***                      ITS VALUE MAY BE FROM 1 TO 8               ***
***                      THERE SHOULD BE A DD CARD FOR EACH         ***
***                      FILE. THE DDNAME MUST BE SYSUTN, WHEN      ***
***                      N STARTS AT 2 AND GROWS TO A MAXIMUM OF 9  ***
***                                                                 ***
***                        OMISSION OF THE PARM WRITES ONE FILE TO  ***
***                        SYSUT2                                   ***
         EJECT
SAGUIDE  BEGIN
         LR    R2,R1             * SAVE R1 BEFORE OPEN                *
         LA    R11,W2            * R11 -> ADDRESSABILITY POINT        *
      USING    W2,R11
         SPACE
       OPEN    (SYSPRINT,OUTPUT) * OPEN SYSPRINT                      *
         SPACE
         BAL   R10,PARMPROC      * PROCESS PARM FIELD - SET UP PRT LINE
         LA    R9,PARMPRT        * R9 -> PRTLINE                      *
         ZAP   LCT,P30           * SET LINE COUNT INCREMENT           *
         BAL   R10,PRT           * PRINT THE LINE                     *
         BAL   R10,OPEN          * OPEN ALL OUTPUT FILES              *
         TM    FLAGS,WARNING     * ANY FAILED ??                      *
         BO    WARYMSG           * YES - ISSUE 'BEWARE' MESSAGE       *
         LA    R9,ALLGOOD        * R9 -> GOOD MESSAGE                 *
SUMMGPRT ZAP   LCT,P30           * INDICATE 3 LINE SPACING            *
         BAL   R10,PRT           * PRINT MSG                          *
         B     ASKSYSIN          * INTERROGATE SYSIN                  *
WARYMSG  DS    0H                *                                    *
         LA    R9,SOMEBAD        * R9 -> WARNING MESSAGE              *
         B     SUMMGPRT          * PRINT IT                           *
*
ASKSYSIN DS    0H                *                                    *
         SPACE
       OPEN    (SYSIN)           * OPEN SYSIN                         *
         SPACE
         TM    SYSIN+48,X'10'    * SUCCESSFUL ??                      *
         BZ    SYSINEND          * NO - DEFAULT PROCESSING            *
*
         MVC   HD1,NEWHD1        * YES - SET UP NEW TITLE             *
         ZAP   LCT,P990          * ENSURE NEW PAGE                    *
         ZAP   PCT,P1            * RESET PAGE #                       *
         LA    R9,SYSININ        * R9 -> MESSAGE                      *
         BAL   R10,PRT           * PRINT IT                           *
         ZAP   LCT,P20           * NEXT MSG HAS 2 LINES               *
         LA    R9,CRDTITL        * R9 -> IT                           *
         BAL   R10,PRT           * PRINT IT. (LCT RESET TO P'10')     *
         LA    R9,BLANKS         * R9 -> LINE OF BLANKS               *
         BAL   R10,PRT           * PRINT IT                           *
*
GETSYSIN DS    0H
         SPACE
      GET      SYSIN,CARD        * READ A CARD                        *
         SPACE
         LA    R9,CARDPRT        * R9 -> CARD-IMAGE + MESSAGE         *
         BAL   R10,PRT           * PRINT IT ( LCT = P'10')            *
         BAL   R10,CARDPROC      * PROCESS CARD                       *
         B     GETSYSIN          * GET ANOTHER                        *
*
SYSINEND DS    0H                * EODAD ON SYSIN                     *
         LA    R9,EOSYSIN        * R9 -> END OF INPUT MSG             *
         ZAP   LCT,P30           * LCT SAYS 3 LINES                   *
         BAL   R10,PRT           * PRINT MSG                          *
         TM    FLAGS,INCL+INCNODE * INCLUDE MODE ??                   *
         BNZ   INCMODE           * YES - BRANCH                       *
         TM    FLAGS,EXCL+EXNODE * NO - EXCLUDE MODE ??               *
         BZ    NOMODE            * NO - NO MODE AT ALL                *
         LA    R9,MODE2          * YES - R9 ->  INFORMATIVE MSG       *
         ZAP   LCT,P20           * LINE COUNT SAYS 2 LINES            *
         BAL   R10,PRT           * PRINT IT                           *
         B     NOMODE            * SKIP NEXT CODE                     *
INCMODE  DS    0H                *                                    *
         LA    R9,MODE1          * R9 -> INFORMATIVE MESSAGE          *
         ZAP   LCT,P20           * LINE COUNT SAYS 2 LINES            *
         BAL   R10,PRT           * PRINT IT                           *
NOMODE   DS    0H                *                                    *
         MVC   HD1,NEWHD2        * NEW HEADING                        *
         ZAP   LINECT,P990       * ENSURE PAGE THROW                  *
         ZAP   LCT,P30           * LCT SAYS 3 LINES                   *
         ZAP   PCT,P1            * RESET PAGE COUNT                   *
         LA    R9,SUBHD1         * R9 -> SUB-HEADING                  *
         BAL   R10,PRT           * PRINT IT  (LCT RESET TO P'10')     *
         LA    R9,BLANKS         * R9 -> BLANK LINE                   *
         BAL   R10,PRT           * PRINT IT                           *
MORCARD  L     R15,=V(SPM21GET)  * R15 -> USEFUL ROUTINE              *
         LA    R1,AREA           * R1 -> INPUT AREA                   *
         BALR  R14,R15           * CALL IT                            *
         LTR   R15,R15           * EOF ??                             *
         BNZ   EOF               * YES - BRANCH                       *
         LR    R2,R0             * NO - R2 -> MEMBER NAME             *
         AP    TCT,P1            * ADD 1 TO TOTAL CARDS READ          *
         CLC   0(8,R2),LAST      * SAME AS BEFORE ??                  *
         BNE   CHG               * NO - IT IS A CHANGE                *
RESUME   TM    FLAGS,OFF         * YES - ARE WE WRITING IT ??         *
         BO    UPEXCT            * NO - INCREMENT 'EXCLUDED CARD' CT  *
         AP    CARDIN,P1         * TOTAL CARDS INCLUDED               *
         CLC   AREA(2),DOTSLASH  * YES - IS IT UPDTE CARD ??          *
         BE    CARDUPDT          * YES - BRANCH OUT                   *
CONT1    DS    0H                *                                    *
         AP    CDCT,P1           * CARDS PER MEMBER                   *
         LA    R9,AREA           * R9 -> CARD-IMAGE TO BE WRITTEN     *
         BAL   R10,WRITE         * WRITE TO FILES                     *
         B     MORCARD           * MORE CARDS PLEASE                  *
UPEXCT   DS    0H                                                     *
         AP    CARDEX,P1         * ADD 1 TO COUNT OF EXCLUDED CARDS   *
         AP    CDCT,P1           * CARDS PER MEMBER                   *
         B     MORCARD           * GO AND GET ANOTHER                 *
CARDUPDT DS    0H                *                                    *
         AP    WCT,P1            * UPDATE COUNT OF IEBUPDTE CARDS     *
         B     CONT1             * BACK TO MAINLINE                   *
EOF      DS    0H                *                                    *
         LR    R2,R15            * R2 HAS VALUE OF 4 FROM SPM21GET    *
         BAL   R10,CHG1          * PROCESS LAST MEMBER                *
         CP    WCT,P0            * ANY IEBUPDTE CARDS ??              *
         BE    EOF2              * NONE                               *
         SPACE
      SM##     WARNCT,WCT        * EBCDIC MESSAGE COUNT               *
         SPACE
         LA    R9,WARNING1       * R9 -> WARNING MESSAGE              *
         BAL   R10,PRT           * PRINT IT                           *
EOF2     DS    0H                *                                    *
         MVC   HD1,NEWHD3        * NEW HEADING FOR NEXT PAGE          *
         ZAP   PCT,P1            * PAGE COUNT RESET                   *
         ZAP   LINECT,P990       * SET LINE COUNT TO OVERFLOW         *
         ZAP   LCT,P30           * SPACE 3 LINES                      *
         LA    R9,SUBHD2         * R9 -> SUBHEADING LINE 1            *
         BAL   R10,PRT           * PRINT IT                           *
         LA    R9,SUBHD2A        * R9 -> SUBHEADING LINE 2            *
         BAL   R10,PRT           * PRINT IT                           *
         LA    R9,BLANKS         * R9 -> BLANK LINE                   *
         BAL   R10,PRT           * PRINT IT                           *
         SPACE
      SM##     TOTCOUNT,TCT      * CONVERT FIELDS TO NUMERICS - ALL   *
      SM##     MEMCOUNT,MCT      * CARDS, ALL MEMBERS                 *
      SM##     MEMINC,MINC       * MEMBERS INCLUDED                   *
      SM##     MEMEXC,MEXC       * MEMBERS EXCLUDED                   *
      SM##     CARDINC,CARDIN    * CARDS INCLUDED                     *
      SM##     CARDEXC,CARDEX    * CARDS EXCLUDED                     *
      SM##     FILEOUT,FCT       * FILES WRITTEN                      *
      SPACE
         ZAP   LCT,P30           * SPACE 3 LINES                      *
         LA    R9,SUMLINE        * R9 -> SUMMARY LINE                 *
         BAL   R10,PRT           * PRINT IT                           *
         LA    R9,EOJLINE        * R9 -> END-OF-JOB LINE              *
         ZAP   LCT,P30           * SPACE 3 LINES                      *
         BAL   R10,PRT           * PRINT IT                           *
         BAL   R10,CLOSE         * CLOSE ALL OUTPUT FILES             *
         TM    FLAGS,INCNODE+EXNODE * ANY NODES CHOSEN ??             *
         BZ    FREELIST          * NO -- TRY INDIVIDUAL NAMES         *
FREENODE DS    0H                *                                    *
         LA    R2,NODEAD         * R2 -> START OF NODE ADDRESSES      *
         CLC   0(4,R2),F0        * ANY THERE ??                       *
         BE    FREELIST          * NO - FINISHED FREEING.             *
NEXTNODE DS    0H                *                                    *
         L     R3,0(0,R2)        * YES - R3 -> NODE TABLE             *
         CLC   NODELINK(4,R3),F0 * DOES ANOTHER CHAIN ON TO THIS ONE ?*
         BE    FREEIT1           * NO - THIS IS LAST IN CHAIN ??      *
         LA    R2,NODELINK(0,R3) * YES - R2 -> CHAIN FIELD            *
         B     NEXTNODE          * KEEP SEARCHING FOR LAST TABLE IN   *
FREEIT1  DS    0H                *  THE CHAIN                         *
         LA    R4,NODELEN        * LAST TABLE REACHED. R3 -> IT       *
         SPACE
     FREEMAIN  R,LV=(4),A=(3)    * FREE UP THE TABLE                  *
         SPACE
         MVC   0(4,R2),F0        * CLEAR THE LINK FIELD               *
         B     FREENODE          * ROUND UNTIL FINISHED               *
*                                *                                    *
FREELIST DS    0H                *                                    *
         TM    FLAGS,INCL+EXCL   * ANY INDIVIDUAL MEMBERS IN LIST ??  *
         BZ    ENDFREE           * NO - FINISH                        *
LISTFREE DS    0H
         LA    R2,LISTAD         * R2 -> A(LIST TABLE)                *
         CLC   0(4,R2),F0        * DOES ONE EXIST ??                  *
         BE    ENDFREE           * NO - QUIT                          *
NEXTLIST DS    0H                *                                    *
         L     R3,0(0,R2)        * YES - R3 -> TABLE                  *
         CLC   LISTLINK(4,R3),F0 * ANOTHER CHAINGD ON ??              *
         BE    FREEIT2           * NO - FREE THIS                     *
         LA    R2,LISTLINK(0,R3) * YES - R2 -> LINK FIELD FOR NEXT    *
         B     NEXTLIST          * CONTINUE SEARCH FOR LAST IN LIST   *
FREEIT2  DS    0H                * R3 -> TABLE                        *
         LA    R4,LISTLEN        * R4 HAS LENGTH                      *
         SPACE
     FREEMAIN  R,LV=(4),A=(3)    * FREE TABLE                         *
         SPACE
         MVC   0(4,R2),F0        * CLEAR LINK FIELD                   *
         B     LISTFREE          * CARRY ON UNTIL ALL FREE            *
*                                *                                    *
ENDFREE  DS    0H                * - ALL TABLES FREED UP NOW          *
         SPACE
      CLOSE    (SYSPRINT)        * CLOSE SYSPRINT                     *
         SPACE
         TM    FLAGS,WARNING     * ANY WARNINGS ??                    *
         BO    RC4               * YES - BRANCH                       *
         LA    R15,0             * NO - SET RETURN CODE OF ZERO       *
XIT      DS    0H                                                     *
         L     R13,4(0,R13)      * R13 -> OLD SAVE AREA               *
         L     R14,12(0,R13)     * R14 -> O.S.                        *
         LM    R0,R12,20(R13)    * RESTORE REGISTERS                  *
         BR    R14               * BACK TO SCP                        *
RC4      DS    0H                *                                    *
         LA    R15,4             * SET TRIVIAL RETURN CODE            *
         B     XIT               * EXIT TIDILY                        *
         EJECT
***            CHG --  ROUTINE ENTERED WHEN MEMBER NAME CHANGES     ***
***                                                                 ***
***      ACTIONS:-  1.   PRINT SUMMARIES FOR PREVIOUS MEMBER        ***
***                 2.   TEST TO SEE IF NEW MEMBER IS INCLUDED      ***
***                 3.   IF SO, WRITE OUT IEBUPDTE CARD             ***
***                                                                 ***
***                                                                 ***
         SPACE 2
CHG      AP    MCT,P1            * ADD 1 TO MEMBER COUNT IN           *
         BAL   R10,CHG1          * PRINT SUMMARY                      *
         BAL   R10,TESTWRT       * TEST TO SEE IF WE ARE TO USE THIS 1*
         TM    FLAGS,OFF         * ARE WE ??                          *
         BO    NOUPDT            * NO - BRANCH                        *
         AP    MINC,P1           * UPDATE # OF INCLUDED MEMBERS       *
         MVC   UPDTCARD+12(8),LAST * MOVE IN MEMBER NAME              *
         LA    R9,UPDTCARD       * R9 -> CARD TO BE WRITTEN           *
         BAL   R10,WRITE         * WRITE IT                           *
         B     RESUME            * CARRY ON PROCESSING                *
NOUPDT   DS    0H                *                                    *
         AP    MEXC,P1           * UPDATE COUNT OF EXCLUDED MEMBERS   *
         B     RESUME            * CARRY ON PROCESSING                *
         EJECT
***            CHG1 -- ROUTINE TO PRINT OUT SUMMARY OF ACTIVITY     ***
***            ON LAST MEMBER                                       ***
***
***      ACTIONS:-  1.   FIRST TIME THROUGH ??
***                 2.   IF YES THEN MINIMAL PROCESSING
***                 3.   BUILD UP STATS LINE
***                 4.   ANY UPDTE CARDS ??
***                 5.   IF YES, THEN PRINT WARNING MESSAGE
***
***      REGISTERS USED:-
***
         SPACE 2
CHG1     DS    0H                *                                    *
         CLC   LAST(8),BLANKS    * FIRST TIME THROUGH ??              *
         BE    NOWARN            * YES - UPDATE 'LAST MEMBER' FIELD   *
         MVC   MNAME(8),LAST     * NO - SET UP PRINT LINE             *
         TM    FLAGS,OFF         * DID WE INCLUDE THIS ONE ??         *
         BO    EXSTAT            * NO - SET EXCLUDED STATUS           *
         MVC   STAT(14),=C'   INCLUDED   ' * YES - SET INCLUDED STATUS*
         B     CARDSUM           * SUMMARY OF NUMBERS                 *
EXSTAT   DS    0H                *                                    *
         MVC   STAT(14),=C'***EXCLUDED***' * SET EXCLUDED STATUS      *
CARDSUM  DS    0H                *                                    *
      SM##     MCDCT,CDCT        * # OF CARDS TO THIS MEMBER          *
         SPACE
         LR    R8,R10            * SAVE R10 OVER CALL TO PRINT        *
         LA    R9,PLINE          * R9 -> PRINTLINE                    *
         BAL   R10,PRT           * PRINT IT                           *
         LR    R10,R8            * RESTORE R10 OVER CALL TO PRINT     *
         ZAP   CDCT,P0           * CLEAR COUNT OF CARDS/MEMBER        *
         CP    WCT,P0            * ANY WARNINGS                       *
         BE    NOWARN            * NO - BRANCH                        *
         LR    R8,R10            * SAVE R10 OVER CALL TO PRINT        *
         SPACE
       SM##    WARNCT,WCT        * YES - EDIT COUNT OF WARNINGS       *
         SPACE
         LA    R9,WARNING1       * R9 -> WARNING MESSAGE              *
         BAL   R10,PRT           * PRINT IT                           *
         LR    R10,R8            * RESTORE R10 AFTER                  *
NOWARN   DS    0H                *                                    *
         MVC   LAST(8),0(R2)     * SET UP FIELD                       *
         ZAP   WCT,P0            * CLEAR WARNING COUNT                *
         BR    R10               * RETURN TO CALLER                   *
         EJECT
***            OPEN - ROUTINE TO OPEN UP TO 8 DCBS WITH DDNAMES     ***
***            OF  SYSUT2,SYSUT3 ...  SYSUT9                        ***
***                                                                 ***
***            ASSUMPTIONS:-  DCBADS IS TO CONTAIN ADDRESSES OF     ***
***                           SUCCESSFULLY OPENED DCBS.             ***
***                           8 DCBS ARE CONTIGUOUSLY ASSEMBLED AT  ***
***                           LABEL 'SYSUT2'                        ***
***                           'SAVPARM' CONTAINS EBCDIC PARM (1 BYTE)**
***                           R10 IS THE RETURN ADDRESS             ***
***                                                                 ***
***            REGISTERS USED:- R1,R2,R3,R4,R8,R10                  ***
***                                                                 ***
         SPACE 2
OPEN     DS    0H                *                                    *
         LR    R8,R10            * SAVE RETURN ADDRESS                *
         LA    R2,SYSUT2         * R2 -> 1ST DCB                      *
         LA    R3,DCBADS         * R3 -> DCB ADDRESS LIST             *
         XR    R4,R4             * CLEAR R4                           *
         IC    R4,SAVPARM        * PARM VALUE IN R4                   *
         N     R4,F15            * BINARY VALUE                       *
OPENLOOP MVC   DDNAME1(8),40(R2) * PRIME MESSAGES                     *
         MVC   DDNAME2(8),40(R2) *  . . . . . .                       *
         SPACE
       OPEN    ((R2),(OUTPUT))   * OPEN FILE                          *
         SPACE
         ZAP   LCT,P20           * SET UP LINE COUNT                  *
         TM    48(R2),X'10'      * OPEN ??                            *
         BZ    NOTOPEN           * NO - BAD MESSAGE                   *
         AP    FCT,P1            * ADD 1 TO COUNT OF OPEN FILES       *
         ST    R2,0(0,R3)        * YES - STORE A(DCB) IN LIST         *
         LA    R3,4(0,R3)        * UPDATE LIST POINTER                *
         LA    R9,OPENOK         * R9 -> GOOD MESSAGE                 *
OPENMSG  BAL   R10,PRT           * PRINT IT                           *
         LA    R2,DCBLEN(0,R2)   * R2 -> NEXT DCB                     *
         BCT   R4,OPENLOOP       * ROUND AGAIN                        *
         LR    R10,R8            * LOOP EXHAUSTED - RESTORE R10       *
         BR    R10               * RETURN TO CALLER                   *
NOTOPEN  DS    0H                *                                    *
         LA    R9,OPENBAD        * R9 -> BAD MESSAGE                  *
         OI    FLAGS,WARNING     * SET ON WARNING FLAG                *
         B     OPENMSG           * BACK TO MAINLINE                   *
         EJECT
***            WRITE - ROUTINE TO PUT DATA RECORDS TO EACH          ***
***            OPENED FILE                                          ***
***                                                                 ***
***            ASSUMPTIONS:-  R9 -> RECORD TO BE WRITTEN            ***
***                          'DCBADS'  CONTAINS LIST OF ADDRESSES   ***
***                           OF OPEN DCBS - DELIMITED BY A(0)      ***
***                           R10-> RETURN ADDRESS                  ***
***                                                                 ***
***            REGISTERS USED:- R14,R15,R0,R1,R2,R3                 ***
         SPACE 2
WRITE    DS    0H                *                                    *
         LA    R2,DCBADS         * R2 -> HEAD OF DCBLIST              *
WRTLOOP  L     R3,0(0,R2)        * R3 -> DCB                          *
         LTR   R3,R3             * IS IT THERE ?                      *
         BZ    WRTEND            * NO - BRANCH                        *
         SPACE
       PUT     (R3),(R9)         * YES - WRITE RECORD                 *
         SPACE
         LA    R2,4(0,R2)        * R2 -> NEXT DCB ADDRESS             *
         B     WRTLOOP           * ROUND AGAIN                        *
WRTEND   DS    0H                *                                    *
         BR    R10               * BACK TO CALLER                     *
         EJECT
***            CLOSE - ROUTINE TO CLOSE ALL OPEN DCBS               ***
***                                                                 ***
***            ASSUMPTIONS:-  'DCBADS' CONTAINS LIST OF ADDRESSES   ***
***                            OF OPEN DCBS                         ***
***                            R10 -> RETURN ADDRESS                ***
***                                                                 ***
***            REGISTERS USED:- R1,R2,R3                            ***
         SPACE 2
CLOSE    DS    0H                *                                    *
         LA    R2,DCBADS         * R2 -> HEAD OF DCB LIST             *
CLOSLOOP DS    0H                *                                    *
         L     R3,0(0,R2)        * R3 -> DCB                          *
         LTR   R3,R3             * IS ONE THERE ??                    *
         BZ    CLOSEND           * NO - BRANCH                        *
         SPACE
       CLOSE ((R3))              * YES - CLOSE IT                     *
         SPACE
         LA    R2,4(0,R2)        * R2 -> NEXT DCB ADDRESS             *
         B     CLOSLOOP          * ROUND AGAIN                        *
CLOSEND  DS    0H                *                                    *
         BR    R10               * RETURN TO CALLER                   *
         EJECT
***            PARMPROC - ROUTINE TO PROCESS THE PARM FIELD         ***
***                                                                 ***
***            ASSUMPTIONS:- .R1 -> A(PARMFIELD)                    ***
***                                                                 ***
***                          .THE PARM FIELD IS AS EXPECTED FROM    ***
***                           PROGRAM INVOCATION                    ***
***                          .R10 -> RETURN ADDRESS                 ***
***                                                                 ***
***            REGISTERS USED:-                                     ***
***                                                                 ***
         SPACE 2
PARMPROC DS    0H                *                                    *
         L     R1,0(0,R2)        * R1 -> PARM                         *
         CH    R1,H0             * NO PARM AT ALL ??                  *
         BE    NOPARM            * NO - TAKE DEFAULT                  *
         CH    R1,H1             * MORE THAN 1 CHARACTER ??           *
         BH    DUFFPARM          * YES - ERROR MESSAGE + DEFAULT      *
         CLI   2(R1),ONE         * ZERO OR LESS ??                    *
         BL    DUFFPARM          * YES - ERROR                        *
         CLI   2(R1),EIGHT       * NO - EIGHT OR GREATER ??           *
         BH    DUFFPARM          * YES - ERROR
         MVC   SAVPARM(1),2(R1)  * SAVE IN STORAGE ..                 *
PARMRET  MVC   PARMSTOR(1),SAVPARM * .. AND IN PRINTLINE              *
         BR    R10               * BACK TO CALLER                     *
NOPARM   DS    0H                *
         MVC   DEFT,DEFAULT      * MOVE IN CHAR STRING '(DEFAULT)'
         B     PARMRET           * SET DEFAULT AND RETURN
DUFFPARM DS    0H                *
         MVC   ERRPARM,PERR      * MOVE IN ERROR MESSAGE
         MVC   DEFT,DEFAULT      * MOVE IN '(DEFAULT)'
         B     PARMRET           * SET DEFAULT AND RETURN
*                                                                     *
***      'SAVPARM' IS ALREADY PRIMED WITH A DEFAULT OF '1'          ***
*                                                                     *
         EJECT
***            PRT - SUBROUTINE TO WRITE MESSAGES TO SYSPRINT       ***
***                                                                 ***
***            ASSUMPTIONS:-  R9 -> PRINTLINE                       ***
***                           'LCT' CONTAINS THE INCREMENT TO THE   ***
***                           LINE COUNT                            ***
***                           R10   CONTAINS THE RETURN ADDRESS     ***
         SPACE 2
PRT      DS    0H                *                                    *
         AP    LINECT,LCT        * INCREMENT LINE COUNT               *
         BNO   PUT               * OVERFLOW ??  NO -- BRANCH          *
         MVC   PAGENO,MASK       * YES - CONVERT PAGE NUMBER TO       *
         ED    PAGENO,PCT        *  EBCDIC                            *
         AP    PCT,P1            * INCREMENT PAGE NUMBER              *
      PUT      SYSPRINT,HD1      * HEADING 1                          *
         SPACE
      PUT      SYSPRINT,BLANKS   * BLANK LINES BETWEEN                *
         ZAP   LINECT,P450       * RESET LINE COUNT                   *
         AP    LINECT,LCT        * ADD CURRENT SPACING                *
PUT      DS    0H                *                                    *
         SPACE
      PUT      SYSPRINT,(R9)     * WRITE RECORD                       *
         ZAP   LCT,P10           * SET LINE SPACING TO DEFAULT        *
         BR    R10               * RETURN TO CALLER                   *
         EJECT
***            CARDPROC -- ROUTINE TO EDIT AND PROCESS CONTROL      ***
***            CARDS READ INTO  'CARD'                              ***
***                                                                 ***
***      ACCEPTABLE:- *,I,E,C IN COL 1                              ***
***                                                                 ***
***                 - MEMBER NAMES IN COLS 2->N, SEPARATED BY       ***
***                   COMMAS,COLONS,HYPHEN,SLASH, ETC               ***
***                 - NODE=XXXX  (UP TO 7 CHARS) IN COL 2->N        ***
***                   SEPARATED BY COMMAS ETC                       ***
***                 - COMMENTS IN COLS 2-80 (IF COL 1 = *)          ***
***                 - CHAR STRING IN COLS 2-3 WHICH WILL REPLACE    ***
***                   ./   ON IEBUPDTE CONTROL CARDS ON OUTPUT      ***
***                   FILES (COL 1  =  C)                           ***
***                                                                 ***
***            A TABLE IS CONSTRUCTED WHICH CONSISTS OF EITHER      ***
***                                                                 ***
***                 MEMBER NAMES ( DS  CL8)  OR                     ***
***                                                                 ***
***                 NODES  ( DC  AL1(L'NODE),DC   C'NODE' )         ***
***                                                                 ***
***            RETURN IS VIA REGISTER 10                            ***
***                                                                 ***
***            REGISTERS USED:- R7,R8,R9,R10                        ***
***            SUBROUTINES CALLED:- INODE,ENODE,INCLUD,EXCLUD,PRT,  ***
***                                 NODEPROC,INEXPROC               ***
         SPACE 2
CARDPROC LR    R8,R10            * SAVE R10                           *
         CLI   CARD,C'*'         * COMMENT ??                         *
         BE    CARDXIT           * YES - NO PROCESSING                *
         CLC   CARD(6),CINODE    * INODE= SPECIFIED ??                *
         BE    INODE             * YES - BRANCH                       *
         CLC   CARD(6),CENODE    * NO - ENODE= SPECIFIED ??           *
         BE    ENODE             * YES - BRANCH                       *
         CLI   CARD,C'I'         * NO - INCLUDE ??                    *
         BE    INCLUD            * YES - BRANCH                       *
         CLI   CARD,C'E'         * NO - EXCLUDE ??                    *
         BE    EXCLUD            * YES - BRANCH                       *
         CLI   CARD,C'C'         * CHANGE CARD ??                     *
         BE    CHGUPDT           * YES - GO PROCESS CHG TO UPDTE      *
         LA    R9,W2             * NO - R9 -> WARNING MESSAGE         *
         BAL   R10,PRT           * PRINT IT                           *
         B     CARDXIT           * NO MORE PROCESSING                 *
*
INODE    DS    0H                *                                    *
         TM    FLAGS,EXNODE+EXCL * EXCLUDING ??                       *
         BNZ   DAFT              * YES - SILLY                        *
         OI    FLAGS,INCNODE     * NO - SAY WE ARE INCLUDING          *
         BAL   R7,NODEPROC       * PROCESS NODE                       *
         B     CARDXIT           * NO FURTHER PROCESSING              *
*
ENODE    DS    0H                *                                    *
         TM    FLAGS,INCNODE+INCL * INCLUDING ??                      *
         BNZ   DAFT              * YES - SILLY                        *
         OI    FLAGS,EXNODE      * NO - SAY WE ARE EXCLUDING          *
         BAL   R7,NODEPROC       * PROCESS NODE                       *
         B     CARDXIT           * NO FURTHER PROCESSING.             *
*
INCLUD   DS    0H                *                                    *
         TM    FLAGS,EXNODE+EXCL * EXCLUDE OR EXCLUDE NODE ALREADY ?? *
         BNZ   DAFT              * YES - SILLY                        *
         OI    FLAGS,INCL        * NO - SET FLAG                      *
         BAL   R7,INEXPROC       * PROCESS CARD                       *
         B     CARDXIT           * NO FURTHER PROCESSING              *
*
EXCLUD   DS    0H                *                                    *
         TM    FLAGS,INCNODE+INCL * INCLUDE OR INCLUDE NODE ALREADY ??*
         BNZ   DAFT              *  YES - SILLY                       *
         OI    FLAGS,EXCL        * NO  -  SET ON FLAG                 *
         BAL   R7,INEXPROC       * PROCESS CARD                       *
         B     CARDXIT           * NO FURTHER PROCESSING              *
*
CHGUPDT  DS    0H                * ONLY COLS 2 AND 3 SHOULD BE USED   *
         CLI   CARD+1,X'40'      * COL 2  BLANK ??                    *
         BE    DUFUPDT           * YES - ERROR                        *
         CLI   CARD+2,X'40'      * COL 3  BLANK ??                    *
         BE    DUFUPDT           * YES - ERROR                        *
         CLI   CARD+3,X'40'      * COL 4  BLANK ??                    *
         BNE   DUFUPDT           * NO  - ERROR                        *
         MVC   DOTSLASH(2),CARD+1 * CHANGE UPDTE CTRL CARD ID         *
         MVC   UPDTCARD(2),CARD+1 *  . . . . . . . .  . .  .          *
         MVC   NEWUPDT(2),CARD+1  * WRITE IN MESSAGE                  *
         LA    R9,NEWMSG         * R9 -> MESSAGE                      *
MSGPUT   LR    R8,R10            * SAVE R8 OVER CALL TO PRINT         *
         BAL   R10,PRT           * PRINT MESSAGE                      *
         LR    R10,R8            * RESTORE R10                        *
         BR    R10               * BACK TO CALLER                     *
DUFUPDT  DS    0H                *                                    *
         LA    R9,BADUPDT        * R9 -> MESSAGE                      *
         B     MSGPUT            * GO AND PRINT IT                    *
         EJECT
***            NODEPROC - ADD TO TABLE OF NODES TO BE PROCESSED     ***
***                                                                 ***
***      ASSUMPTIONS:-   -'NODEAD' HAS ADDRESS OF NODE TABLE        ***
***                      - ONLY 1 NODE PER CARD - DELIMITED BY A    ***
***                        BLANK                                    ***
***                      - NO MORE THAN 7 CHARACTERS PER NODE       ***
***                      - R7 IS  RETURN REGISTER                   ***
***      REGISTERS USED:- R0,R1,R2,R3,R4,R5,R7                      ***
***                                                                 ***
         SPACE 2
NODEPROC DS    0H                *                                    *
         L     R3,NODEAD         * R3 -> NODE TABLE                   *
         LTR   R3,R3             * IS ONE THERE ??                    *
         BNZ   GOTTEN            * YES                                *
         LA    R0,NODELEN        * NO - R0 HAS LENGTH                 *
         SPACE
     GETMAIN   R,LV=(0)          * GET THE CORE                       *
         SPACE
         MVI   NODCT(R1),X'00'   * INITIALISE NODE COUNT FIELD ...    *
         XC    NODELINK(4,R1),NODELINK(R1) * ... AND NODE LINK FIELD  *
         ST    R1,NODEAD         * SET UP IN STORAGE FOR NEXT TIME    *
         LR    R3,R1             * R3 -> NODE TABLE                   *
GOTTEN   DS    0H                *                                    *
         XR    R4,R4             * CLEAR R4                           *
         IC    R4,NODCT(0,R3)    * R4 HAS COUNT OF NODES TO DATE      *
         LR    R5,R4             * SO DOES R5                         *
         CH    R5,NODMAX         * TABLE FULL ??                      *
         BE    NODEXT            * YES - EXTEND IT                    *
         SLL   R4,3              * NO - CALCULATE DISPLACEMENT OF NEXT*
         LA    R4,0(R4,R3)       * ENTRY                              *
         LA    R5,CARD+6         * R5 -> 1ST DATA CHARACTER ON CARD   *
         TRT   0(8,R5),TRTAB1    * FIND DELIMITER                     *
         BZ    ERR1              * NONE IN 1ST 8 - ERROR              *
         SR    R1,R5             * CALCULATE NODE LENGTH              *
         BZ    ERR1              * ZERO - ERROR                       *
         STC   R1,0(0,R4)        * STORE LENGTH OF NODE IN TABLE      *
         BCTR  R1,0              * REDUCE BY 1 FOR EXECUTE            *
         EX    R1,MVNODE         * MOVE NODE                          *
         IC    R1,NODCT(0,R3)    * NODE COUNT IN R1                   *
         LA    R1,1(0,R1)        * ADD 1                              *
         STC   R1,NODCT(0,R3)    * STORE BACK IN TABLE                *
         BR    R7                * RETURN TO CALLER                   *
*
MVNODE   MVC   1(0,R4),0(R5)     * SKELETON 'MOVE NODE' INSTRUCTION   *
*
NODEXT   DS    0H                *                                    *
         LA    R0,NODELEN        * R0 HAS LENGTH                      *
         CLC   NODELINK(4,R3),F0 * IS LINK FIELD ZEROS ?              *
         BE    NODEXT1           * YES - GET FRESH TABLE              *
         L     R3,NODELINK(0,R3) * NO - R3 -> NEW TABLE               *
         B     GOTTEN            * CONTINUE                           *
NODEXT1  DS    0H                *                                    *
         SPACE
     GETMAIN   R,LV=(0)          * GET THE NEXT TABLE                 *
         SPACE
         MVI   NODCT(R1),X'00'   * INITIALISE COUNT                   *
         XC    NODELINK(4,R1),NODELINK(R1) * CLEAR LINK FIELD         *
         ST    R1,NODELINK(0,R3) * CHAIN TABLES TOGETHER              *
         LR    R3,R1             * R3 -> NEW TABLE                    *
         B     GOTTEN            * RESUME                             *
*
ERR1     DS    0H                *                                    *
         LA    R9,W3             * R9 -> WARNING                      *
         MVC   BADATA(4),0(R5)   * MOVE IN DATA IDENTIFYING ERROR     *
         BAL   R10,PRT           * PRINT MSG.                         *
         BR    R7                * RETURN TO CALLER                   *
*
DAFT     DS    0H                *                                    *
         LA    R9,W1             * R9 -> WARNING                      *
         BAL   R10,PRT           * PRINT IT                           *
         B     CARDXIT           * XIT                                *
*
         EJECT
INEXPROC DS    0H                * ON ENTRY 'CARD' CONTAINS DATA WITH *
*                   AN 'E' OR 'I' IN COL 1, FOLLOWED BY MEMBER NAMES  *
*                   SEPARATED BY ,.:/;+-                              *
*                   A BLANK IS INTERPRETED AS END OF CARD             *
*
*                   RETURN VIA   BR  R7  (NORMAL)
*                                B   CARDXIT (ABNORMAL)
         SPACE 2
         LA    R6,CARD+1         * R6 -> 1ST CHAR OF MEMBER NAME      *
         L     R3,LISTAD         * R3 -> LIST                         *
         LTR   R3,R3             * DOES IT EXIST ??                   *
         BNZ   LISTOK            * YES                                *
         LA    R0,LISTLEN        * NO - R0 HAS LENGTH                 *
         SPACE
      GETMAIN  R,LV=(0)          * GET THE LIST                       *
         SPACE
         ST    R1,LISTAD         * SAVE IN PTR                        *
         XC    LISTLINK(4,R1),LISTLINK(R1) * CLEAR LINK FIELD         *
         MVI   LISTCT(R1),X'00'  * AND COUNT FIELD (MAX=255)          *
         LR    R3,R1             * R3 -> LIST                         *
LISTOK   DS    0H                *                                    *
         XR    R4,R4             * CLEAR R4                           *
         IC    R4,LISTCT(0,R3)   * COUNT OF MEMBERS IN THIS LIST      *
         LR    R5,R4             * AND IN R5                          *
         CH    R5,LISTMAX        * IS THIS LIST FULL ??               *
         BE    MORELST           * YES - TRY NEXT                     *
         SLL   R4,3              * NO - INDEX DOWN THIS LIST FOR THE  *
         LA    R4,0(R4,R3)       * NEXT ENTRY                         *
         MVC   0(8,R4),BLANKS    * INITIALISE TO BLANKS               *
         XR    R2,R2             * CLEAR FOR TRT                      *
         TRT   0(9,R6),TRTAB2    * FIND A TERMINATING CHARACTER IN 9  *
*
         BZ    ERR2              * NO SUITABLE CHAR - ERROR           *
INDX     B     INDX(R2)          * R2 HAS  4  OR  8                   *
         B     NOBLANK           * VALUE = 4                          *
BLANK    SR    R1,R6             * VALUE = 8  - BLANK FOUND - R1 -> IT*
         BZ    ERR2              * LENGTH OF MEMBER                   *
         BCTR  R1,0              * LESS 1 FOR EXECUTE                 *
         EX    R1,MVMEMB         * MOVE MEMBER TO LIST                *
         LA    R5,1(0,R5)        * UPDATE COUNT OF MEMBERS            *
         STC   R5,LISTCT(0,R3)   * AND STORE BACK                     *
         BR    R7                * RETURN TO CALLER                   *
*
NOBLANK  DS    0H                *                                    *
         SR    R1,R6             * CALCULATE MEMBER LENGTH            *
         BZ    ERR2              * LENGTH OF MEMBER = 0 -- ERROR      *
         BCTR  R1,0              * LESS 1 FOR EXECUTE                 *
         EX    R1,MVMEMB         * MOVE MEMBER TO LIST                *
         LA    R5,1(0,R5)        * ADD 1 TO COUNT                     *
         STC   R5,LISTCT(0,R3)   * STORE BACK                         *
         LA    R6,2(R6,R1)       * R6 -> NEXT ENTRY                   *
         C     R6,ENDCARD        * DOES IT START IN COL 73 OR AFTER ??*
         BL    LISTOK            * NO - CARRY ON                      *
         B     ERR2              * YES - ERROR                        *
*
MORELST  DS    0H                *                                    *
         CLC   LISTLINK(4,R3),F0 * ANYMORE ??                         *
         BE    MORELST1          * NO - GET SOME                      *
         L     R3,LISTLINK(0,R3) * YES - R3 -> NEXT                   *
         B     LISTOK            * CONTINUE                           *
MORELST1 DS    0H                *                                    *
         LA    R0,LISTLEN        * R0 HAS LENGTH                      *
         SPACE
     GETMAIN   R,LV=(0)          * GET IT                             *
         SPACE
         MVI   LISTCT(R1),X'00'  * ZERO COUNT                         *
         XC    LISTLINK(4,R1),LISTLINK(R1) * AND LINK FIELD           *
         ST    R1,LISTLINK(0,R3) * CHAIN TOGETHER                     *
         LR    R3,R1             * R3 -> NEW TABLE                    *
         B     LISTOK            * CONTINUE                           *
*
ERR2     DS    0H                * R6 -> 1ST ERRONEOUS CHARACTER      *
         MVC   BADATA(4),0(R6)   * MOVE 4 CHARS TO MESSAGE            *
         LA    R9,W3             * R9 -> MESSAGE                      *
         BAL   R10,PRT           * PRINT IT                           *
         B     CARDXIT           * LEAVE                              *
*
CARDXIT  DS    0H                *                                    *
         LR    R10,R8            * RESTORE R10                        *
         BR    R10               * RETURN TO CALLER                   *
         SPACE 2
MVMEMB   MVC   0(0,R4),0(R6)     * MOVE IN MEMBER NAME                *
         EJECT
***            TESTWRT -- ROUTINE TO DETERMINE WHETHER OR NOT       ***
***            A CHANGED MEMBER IS ELEGIBLE FOR SELECTION           ***
***                                                                 ***
***      ASSUMPTIONS:-  -'NODEAD' AND 'LISTAD' CONTAIN EITHER ZEROS ***
***                      OR TABLE ADDRESSES                         ***
***                     - R10 IS RETURN ADDRESS                     ***
***                     -'LAST' CONTAINS NEW MEMBER NAME            ***
***      REGISTERS USED:-                                           ***
***                                                                 ***
         SPACE 2
TESTWRT  DS    0H                *                                    *
         NI    FLAGS,255-OFF     * DEFAULT SETTING FOR FLAG           *
         TM    FLAGS,INCNODE+INCL+EXNODE+EXCL * ARE WE SELECTIVE ??   *
         BZR   R10               * NO - BACK TO CALLER                *
*                                                                     *
         L     R3,NODEAD         * R3 -> NODE TABLE                   *
NODCONT  LTR   R3,R3             * IS ONE THERE ??                    *
         BZ    NONODES           * NO  -  NO NODES                    *
         XR    R4,R4             * YES - CLEAR R4                     *
         IC    R4,NODCT(0,R3)    * NODE COUNT IN R4                   *
         LTR   R4,R4             * TEST FORA BLANK TABLE              *
         BC    8,NONODES         * IF BLANK LEAVE ROUTINE             *
         LR    R5,R3             * R5 -> START OF TABLE               *
         XR    R6,R6             * CLEAR R6                           *
NODLOOP  IC    R6,0(0,R5)        * R6 HAS L'NODE                      *
         BCTR  R6,0              * LESS 1 FOR EXECUTE                 *
         EX    R6,COMPNODE       * COMPARE NODE AND MEMBER NAME       *
         BE    AHIT              * AN EQUAL COMPARE                   *
         LA    R5,8(0,R5)        * NO - R5 -> NEXT NODE               *
         BCT   R4,NODLOOP        * SPIN ROUND                         *
         L     R3,NODELINK(0,R3) * AT END SEE IF MORE TABLES ARE THERE*
         B     NODCONT           * AND CONTINUE                       *
*                                                                     *
COMPNODE CLC   LAST(0),1(R5)     * COMPARE NODE VS PART OF MEMBER NAME*
*                                                                     *
NONODES  DS    0H                *                                    *
         L     R3,LISTAD         * R3 -> TABLE OF MEMBERS             *
LISTCONT LTR   R3,R3             * IS IT THERE ??                     *
         BZ    NOTHING           * NO - XIT                           *
         XR    R4,R4             * YES - CLEAR R4                     *
         IC    R4,LISTCT(0,R3)   * COUNT OF TABLE ENTRIES             *
         LTR   R4,R4             * TEST FORA BLANK TABLE              *
         BC    8,NOTHING         * IF BLANK LEAVE ROUTINE             *
         LR    R5,R3             * R5 -> TABLE START                  *
LISTLOOP CLC   LAST(8),0(R5)     * COMPARE MEMBER NAME WITH TABLE     *
         BE    AHIT              * - A HIT -- XIT                     *
         LA    R5,8(0,R5)        * A MISS -- R5 -> NEXT ENTRY         *
         BCT   R4,LISTLOOP       * SPIN ROUND                         *
         L     R3,LISTLINK(0,R3) * - END OF TABLE - ANYMORE LINKED IN *
         B     LISTCONT          * GO AND SEE                         *
*                                                                     *
NOTHING  DS    0H                *  NOTHING FOUND IN LISTS            *
         TM    FLAGS,INCNODE+INCL * ARE WE INCLUDING                  *
         BZ    LEAVE             * NO - LEAVE FLAGS AT DEFAULT        *
         OI    FLAGS,OFF         * YES - EXCLUDE THIS 'COS IT WAS NOT *
*                                * FOUND                              *
LEAVE    BR    R10               * RETURN TO CALLER                   *
*                                                                     *
AHIT     DS    0H                * A MATCH ON NODE OR MEMBER          *
         TM    FLAGS,INCNODE+INCL * AND ARE WE INCLUDING              *
         BNZR  R10               * YES - LEAVE FLAG AT DEFAULT        *
         OI    FLAGS,OFF         * NO  - SET 'LEAVE IT' STATUS        *
         BR    R10               * RETURN TO CALLER                   *
*                                                                     *
         EJECT
***            CONSTANTS, TRANSLATE TABLES, DCBS, HEADINGS ETC      ***
         SPACE 2
***                              * TRANSLATE TABLES FOR CARD SCAN     *
TRTAB2   DC    256X'00'
         ORG   TRTAB2+C' '
         DC    X'08'
         ORG   TRTAB2+C','
         DC    X'04'
         ORG   TRTAB2+C';'
         DC    X'04'
         ORG   TRTAB2+C'/'
         DC    X'04'
         ORG   TRTAB2+C'.'
         DC    X'04'
         ORG   TRTAB2+C':'
         DC    X'04'
         ORG   TRTAB2+C'+'
         DC    X'04'
         ORG   TRTAB2+C'-'
         DC    X'04'
         ORG
TRTAB1   DC    256X'04'
         ORG   TRTAB1+C'#'
         DC    X'00'
         ORG   TRTAB1+C'@'
         DC    X'00'
         ORG   TRTAB1+C'$'
         DC    X'00'
         ORG   TRTAB1+C'A'
         DC    9X'00'
         ORG   TRTAB1+C'J'
         DC    9X'00'
         ORG   TRTAB1+C'S'
         DC    8X'00'
         ORG   TRTAB1+C'0'
         DC    10X'00'
         ORG
*
         EJECT
***            CONSTANTS, COUNTERS                                  ***
         SPACE 2
PCT      DC    PL4'1'            * PAGE COUNT                         *
CDCT     DC    PL4'0'            * CARDS PER MEMBER                   *
WCT      DC    PL4'0'            * # OF IEBUPDTE CARDS PER MEMBER     *
TCT      DC    PL4'0'            * TOTAL CARDS READ IN                *
MCT      DC    PL4'0'            * TOTAL MEMBERS READ IN              *
MINC     DC    PL4'0'            * MEMBERS INCLUDED                   *
MEXC     DC    PL4'0'            * MEMBERS EXCLUDED                   *
CARDIN   DC    PL4'0'            * # OF CARDS INCLUDED                *
CARDEX   DC    PL4'0'            * # OF CARDS EXCLUDED                *
FCT      DC    PL4'0'            * # OF FILES WRITTEN                 *
*
P0       DC    PL2'0'            * PACKED DECIMAL CONSTANTS           *
P1       DC    PL2'1'            *  . . . . . . . . . . .             *
P10      DC    PL2'10'           * INCREMENTS FOR LINE COUNT          *
P20      DC    PL2'20'           *  . . . . . . . . . . . .           *
P30      DC    PL2'30'           *  . . . . . . . . . . . .           *
P450     DC    PL2'450'          * LINE COUNT RESET TO THIS VALUE     *
LINECT   DC    PL2'990'          * DEFAULT LINE COUNT - SET TO OVERFLOW
LCT      DC    PL2'10'           * DEFAULT LINE COUNT INCREMENT       *
P990     DC    PL2'990'          * USED TO ENSURE                     *
AREA     DS    CL80              * CARDS FROM SYSUT1 READ IN HERE     *
CINODE   DC    C'INODE='         * KEYWORD FOR INCLUDE NODE           *
CENODE   DC    C'ENODE='         * KEYWORD FOR EXCLUDE NODE           *
DEFAULT  DC    C'(DEFAULT)'      * DEFAULT INDICATOR                  *
LAST     DC    8C' '             * SAVE AREA FOR LAST MEMBER          *
F0       DC    F'0'              * FULLWORD VALUE ZERO                *
F15      DC    F'15'             * FULLWORD OF 15 - USED IN ANDING    *
H0       DC    H'0'              * HALFWORD CONSTANT
H1       DC    H'1'              *  . . . . . . . .
ONE      EQU   X'F1'             * USED IN  'CLI'
EIGHT    EQU   X'F8'             *  . . . . . .
MASK     DC    X'4020202020202120' * EDIT MASK FOR PL4                *
*
UPDTCARD DC    CL80'./ ADD NAME=' * UPDTE CARD                        *
UPDTNAME EQU   UPDTCARD+12       * MEMBER NAME GOES HERE              *
DOTSLASH DC    C'./'             * IEBUPDTE IDENTIFIER                *
SAVPARM  DC    C'1'              * DEFAULT # OF OUTPUT FILES          *
         EJECT
***            HEADINGS, MESSAGES                                   ***
         SPACE 2
NEWHD1   DC    CL120'1 --SAGUIDE --  MESSAGES AND CONTROL STATEMENTS'
*
SYSININ  DC    CL133'-   SYSIN FILE PRESENT '
*
CRDTITL  DC    CL133'0   CARD INPUT AND DIAGNOSTIC LISTING'
*
BLANKS   DC    CL133' '
*
CARDPRT  DC    CL10' *********'  *                                    *
CARD     DC    CL80' '           * CARD READ FROM SYSIN INTO HERE     *
         DC    43C'*'            *                                    *
*
W1       DC    CL133'  *****  ABOVE CARD IGNORED -- CANNOT MIX ''I'' AN*
               D ''E'' CARDS  *****'
*
W2       DC    CL133'  *****  ABOVE CARD IGNORED -- MUST HAVE ''I'', ''*
               E'', ''C'' IN COL 1 *****'
*
W3       DC    CL051'  *****  ABOVE CARD IN ERROR - ALL DATA FOLLOWING *
               '''
BADATA   DS    CL4
         DC    CL78''' IGNORED  *****'
*
EOSYSIN  DC    CL133'-    END OF INPUT '
HD1      DC    CL120'1-- SAGUIDE --  INITIALISATION MESSAGES'
         DC    C'PAGE'
PAGENO   DS    CL8
         DC    CL1' '
*
PARMPRT  DC    CL16'-  PARM FIELD = '
PARMSTOR DS    CL1
         DC    CL1' '
DEFT     DC    CL9' '
ERRPARM  DC    CL106' '
PERR     DC    CL106' PARMFIELD IN ERROR. VALUE NOT >1 AND<9'
*
OPENOK   DC    CL44'0   OPEN SUCCESSFUL FOR FILE WITH DDNAME OF '
DDNAME1  DS    CL8
         DC    81C' '
*
OPENBAD  DC    CL44'0   OPEN FAILED     FOR FILE WITH DDNAME OF '
DDNAME2  DS    CL8
         DC    81C'*'
*
ALLGOOD  DC    CL133'-  ALL OUTPUT FILES OPENED SUCCESSFULLY '
*
SOMEBAD  DC    CL133'-  WARNING - NOT ALL OUTPUT FILES OPENED SUCCESSFU*
               LLY '
*
*
MODE1    DC    CL133'0   SELECTIVE INCLUDE MODE INVOKED'
MODE2    DC    CL133'0   SELECTIVE EXCLUDE MODE INVOKED'
*
NEWMSG   DC    CL133'  COLS 1-2 OF IEBUPDTE CONTROL CARD CHANGED TO '
         ORG   NEWMSG+47
NEWUPDT  DS    CL2
         ORG
BADUPDT  DC    CL133' INVALID UPDTE CHANGE CARD -- EITHER BLANK(S) IN C*
               OLUMNS 2-3  OR NON-BLANK IN COLUMN  4  ***** '
*
NEWHD2   DC    CL120'1 -- SAGUIDE --  EXECUTION TIME MESSAGES, STATISTI*
               CS AND WARNINGS '
*
SUBHD1   DC    CL133'-   MEMBER NAME        # OF CARD IMAGES        STA*
               TUS  '
*
         EJECT
PLINE    DC    C'     '
MNAME    DS    CL8               * MEMBER NAME
         DC    10C' '
MCDCT    DS    CL8               * # OF CARDS
         DC    13C' '
STAT     DS    CL14              * STATUS OF MEMBER
         DC    75C' '
WARNING1 DC    CL50' ****  -- WARNING --  THE ABOVE MEMBER CONTAINS   '
WARNCT   DS    CL8
         DC    CL20'  IEBUPDTE CARDS    '
         DC    55C'*'
*
NEWHD3   DC    CL120'1 -- SAGUIDE -- SUMMARY OF ACTIVITY'
*
SUBHD2   DC    CL133'-   CARDS     MEMBERS     MEMBERS     MEMBERS     *
               CARDS     CARDS     FILES'
SUBHD2A  DC    CL133'    READ       READ       INCLUDED    EXCLUDED    *
               INCLUDED  EXCLUDED  WRITTEN'
SUMLINE  DC    C'-'              *                                    *
TOTCOUNT DS    CL8               * TOTAL CARDS IN                     *
         DC    CL4' '            *                                    *
MEMCOUNT DS    CL8               * TOTAL MEMBERS IN                   *
         DC    CL4' '            *                                    *
MEMINC   DS    CL8               * MEMBERS INCLUDED                   *
         DC    CL4' '            *                                    *
MEMEXC   DS    CL8               * MEMBERS EXCLUDED                   *
         DC    CL2' '            *                                    *
CARDINC  DS    CL8               * CARDS INCLUDED                     *
         DC    CL2' '            *                                    *
CARDEXC  DS    CL8               * CARDS EXCLUDED                     *
         DC    CL2' '            *                                    *
FILEOUT  DS    CL8               * FILES WRITTEN                      *
         DC    58C' '            *                                    *
*
EOJLINE  DC    CL133'-       ********** END OF JOB ********** '
***            DCBS, RELATED FIELDS, FLAGS, TABLES                  ***
SYSIN    DCB   DDNAME=SYSIN,MACRF=GM,DSORG=PS,RECFM=F,LRECL=80,        *
               BLKSIZE=80,EODAD=SYSINEND
SYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,RECFM=FA,LRECL=133,   *
               BLKSIZE=133
SYSUT2   DCB   DDNAME=SYSUT2,MACRF=PM,DSORG=PS,LRECL=80,RECFM=FB
SYSUT3   DCB   DDNAME=SYSUT3,MACRF=PM,DSORG=PS,LRECL=80,RECFM=FB
SYSUT4   DCB   DDNAME=SYSUT4,MACRF=PM,DSORG=PS,LRECL=80,RECFM=FB
SYSUT5   DCB   DDNAME=SYSUT5,MACRF=PM,DSORG=PS,LRECL=80,RECFM=FB
SYSUT6   DCB   DDNAME=SYSUT6,MACRF=PM,DSORG=PS,LRECL=80,RECFM=FB
SYSUT7   DCB   DDNAME=SYSUT7,MACRF=PM,DSORG=PS,LRECL=80,RECFM=FB
SYSUT8   DCB   DDNAME=SYSUT8,MACRF=PM,DSORG=PS,LRECL=80,RECFM=FB
SYSUT9   DCB   DDNAME=SYSUT9,MACRF=PM,DSORG=PS,LRECL=80,RECFM=FB
DCBLEN   EQU   SYSUT3-SYSUT2     * LENGTH OF A DCB                    *
*
DCBADS   DC    10A(0)            * ADDRESSES OF OPEN DCBS STORED HERE *
*
*                                                                     *
FLAGS    DC    X'00'             * FLAG BYTE                          *
*                                                                     *
WARNING  EQU   X'80'             * NOT ALL FILES OPENED               *
OFF      EQU   X'40'             * DO NOT WRITE THIS MEMBER           *
INCL     EQU   X'20'             * I   CARDS INPUT                    *
INCNODE  EQU   X'10'             * INODE=  CARDS INPUT                *
EXCL     EQU   X'08'             * E   CARDS INPUT                    *
EXNODE   EQU   X'04'             * ENODE=  CARDS INPUT                *
*                                                                     *
LIST#    EQU   100               * # OF ENTRIES IN MEMBER TABLE       *
NODE#    EQU   8                 * # OF ENTRIES IN NODE TABLE         *
LISTMAX  DC    AL2(LIST#)        * MAX # OF ENTRIES PER MEMBER LIST   *
NODMAX   DC    AL2(NODE#)        * MAX # OF ENTRIES PER NODE LIST     *
LISTLEN  EQU   8*LIST#+4+1       * LENGTH OF MEMBER TABLE             *
NODELEN  EQU   8*NODE#+4+1       * LENGTH OF NODE TABLE               *
LISTLINK EQU   8*LIST#           * OFFSET OF LINK FIELD               *
NODELINK EQU   8*NODE#           * OFFSET OF LINK FIELD               *
LISTCT   EQU   8*LIST#+4         * OFFSET OF CURRENT COUNT FIELD      *
NODCT    EQU   8*NODE#+4         * OFFSET OF CURRENT COUNT FIELD      *
LISTAD   DC    A(0)              * A(LIST TABLE)                      *
NODEAD   DC    A(0)              * A(NODE TABLE)                      *
*                                                                     *
ENDCARD  DC    A(CARD+73)        * DELIMITING RANGE OF CARD           *
         SPACE 2
         END
