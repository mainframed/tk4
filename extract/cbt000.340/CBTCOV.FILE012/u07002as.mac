//*
//*                SAMPLE JOB CONTROL LANGUAGE VALIDATION EXIT
//*
//*                WRITES SMBS    -    USES 'YEBEQU' MACRO
//*
//*                AUTHOR  *** MKB *** BRITISH RAIL
//*
         TITLE ' IEFUJV - SMF JOB VALIDATION EXIT'
IEFUJV   CSECT
         USING *,R15
*
         STM   R14,R12,12(R13) SAVE REGISTERS
         LR    R12,R1         SAVE R1 (WHICH POINTS TO PARM LIST)
         LA    R0,COREQTY     CORE REQUIRED
         GETMAIN R,LV=(0)
         ST    R13,4(0,R1)    FORWARD CHAIN SAVE AREAS
         ST    R1,8(0,R13)    BACKWARD CHAIN SAVE AREAS
         LR    R13,R1         R13 -S NEW SAVE AREA
         USING CORE,R13       ESTABLISH ADDRESSABILITY OF CORE
         DROP  R15
         BALR  R3,0           ESTABLISH ADDRESSABILITY OF CSECT
         USING *,R3
         EJECT
***                 PURPOSE OF ROUTINE                              ***
         SPACE 2
*              TO DETERMINE THE NATURE OF THE CARD IMAGE PASSED       *
*                                                                     *
*              IF THE CARD IS A 'JOB' CARD THE THREE LETTER PREFIX    *
*                                                                     *
*              OF THE JOBNAME IS CHECKED FOR VALIDITY                 *
*                                                                     *
*              IF THE CARD IS AN 'EXEC' CARD THE CARD IS CHECKED      *
*                                                                     *
*              FOR A STEPNAME AND THE PROGRAM NAME IS CHECKED         *
*                                                                     *
*              AGAINST A LIST OF 'MONITORED' PROGRAMS. THESE          *
*                                                                     *
*              MAY BE PROGRAM PRODUCTS OR CONTROLLED USE PROGRAMS     *
*                                                                     *
*              SUCH AS SUPERZAP ETC                                   *
*                                                                     *
*              IF THE CARD IS A DD CARD THE DD NAME IS CHECKED FOR    *
*                                                                     *
*              SYSABEND AND IF FOUND 'SYSUDUMP' IS SUBSTITUTED        *
*                                                                     *
*              SIMILARLY IF 'SYSABENZ' IS FOUND, 'SYSABEND' IS        *
*                                                                     *
*              SUBSTITUTED. IF THE CARD IS A 'JOBLIB' CARD THEN       *
*                                                                     *
*              A WARNING IS ISSUED                                    *
*                                                                     *
*              WHERE APPROPRIATE MESSAGES ARE WRITTEN TO SYSPRINT     *
*                                                                     *
*              VIA SMBS - THESE MESSAGES BEING PICKED UP BY THE       *
*                                                                     *
*              HASP WTR MODIFICATION AND SUITABLY HIGHLIGHTED         *
*                                                                     *
         EJECT
***                          SPECIAL NOTE                           ***
*                                                                     *
*                   THIS ROUTINE USES A RELEASE-DEPENDENT             *
*                                                                     *
*                   EQUATE, 'DISPL', WHICH IS BASED ON THE            *
*                   VALUE OF THE OFFSET OF THE VCON OF                *
*                                                                     *
*                                                                     *
*                   'IEFVGM' WITHIN THE CSECT THAT CALLS              *
*                                                                     *
*                   IEFUJV (IEFVHEB). THIS OFFSET (LESS 2)            *
*                                                                     *
*                   IS THE VALUE OF THE EQUATE 'DISPL'.               *
*                                                                     *
*        (TWO IS SUBTRACTED DUE TO THE BALR AT THE START OF IEFVHEB)  *
*                                                                     *
*                  THE VALUE OF THIS EQUATE IS THE SAME FOR           *
*                                                                     *
*                  O.S. RELEASE 20.6 AND 21.0                         *
*                                                                     *
***                                                                 ***
         EJECT
***                           REGISTER USAGE                        ***
         SPACE 2
*        REG2       USED BY TRT                                       *
*                                                                     *
*        REG3       BASE                                              *
*                                                                     *
*        REGS 4-8   WORK                                              *
*                                                                     *
*        REG9       -> COMMON PARAMETER AREA                          *
*                                                                     *
*        REG10      -> JCL CARD IMAGE                                 *
*                                                                     *
*        REG11      -> ONE BYTE JCL CARD DESCRIPTOR                   *
*                                                                     *
*        REG12      SAVE REGISTER FOR REG 1                           *
*                                                                     *
*        REG13      -> SAVE AREA                                      *
*                                                                     *
*        REG14      LINK REGISTER                                     *
*                                                                     *
*        REG15      RETURN CODE                                       *
*                                                                     *
         EJECT
         LM    R9,R11,0(R12)  R9 -> COMMON PARAMETER AREA
*                             R10 -> JCL CARD IMAGE
*                             R11 -> CARD TYPE
         USING JCLCARD,R10
         LA    R15,ZERORET    INITIALIZE RETURN CODE WITH ZEROS
         TM    0(R11),JOBTYP+EXECTYP+DDTYP  IF NOT 'JOB', 'EXEC' OR
         BNM   RETURN                       'DD' WE DON'T WANT TO KNOW
*
         CLI   0(R11),DDTYP   DD CARD ?
         BE    DD             BRANCH ON YES
*
         CLI   0(R11),EXECTYP EXEC CARD ?
         BE    EXEC           BRANCH ON YES
*
***            IT MUST BE A JOB CARD                                ***
         EJECT
***            TEST THREE-LETTER PREFIX OF JOBNAME                  ***
         SPACE 2
         LM    R5,R7,BXLEVALU  LOAD VCON-INCR-VCON INTO REGS 5-7
LOOP1    EQU   *
         CLC   JOBPRFIX(3),0(R5)   VALID PREFIX ?
         BE    RETURN              BRANCH ON YES - 0 IN REG 15
         BXLE  R5,R6,LOOP1         LOOP ROUND UNTIL END
*                        DROP THROUGH IF NO MATCH FOUND               *
         LA    R8,MSG#1       ERROR MESSAGE 'INVALID JOB PREFIX'
         B     ERRORRTN       GO TO ERROR ROUTINE
         EJECT
***            EXEC CARD PROCESSING                                 ***
         SPACE 2
EXEC     EQU   *
         CLI   STEPNAME,BLANK TEST FOR PRESENCE OF STEPNAME
         BNE   TESTPGMN       STEP NAME PRESENT
         LA    R8,MSG#2       ERROR MESSAGE 'NO STEPNAME'
         B     ERRORRTN       GO TO ERROR ROUTINE
         SPACE 2
TESTPGMN EQU   *
         XR    R2,R2          CLEAR REG 2
         TRT   TRTSTART(TRTLENG),TRTABLE  SEEK OUT '=' OR ','
         BC    8,RETURN       NEITHER - IT MUST BE A CATALOGED OR
*                              IN-STREAM PROCEDURE
BASE     B     BASE(R2)       IF ',' FOUND FIRST THEN NO '=' CAN BE
*                              PRESENT - R2 WILL CONTAIN '4' AND IT
         B     RETURN         RETURNS TO CALLER WITH 0 IN REG 15
*                             IF AN '=' SIGN FOUND, THEN FURTHER
*                              PROCESSING IS REQUIRED - REG 1 -> '='
         LA    R7,PGMLENG     MAX LENGTH OF PROGRAM'S NAME
         LA    R4,1(0,R1)     R4 -> 1ST CHAR OF PGM NAME
         TM    0(R4),ALPHA    IS FIRST CHAR OF PGM NAME ALPHABETIC ?
         BNO   RETURN         BRANCH ON NO - 0 IN REG 15 -
*                              PROBABLY PGM=*.LKED SYSLMOD
*
LOOP2    EQU   *
         CLI   2(R1),BLANK    SEEK BLANK DELIMITER TO PGM NAME
         BE    ENDLOOP2       BRANCH IF FOUND
         CLI   2(R1),COMMA    SEEK COMMA DELIMITER TO PGM NAME
         BE    ENDLOOP2       BRANCH IF FOUND
         LA    R1,1(0,R1)     INCREMENT POINTER TO PGM NAME
         BCT   R7,LOOP2       LOOP ROUND 'PGMLENG' TIMES
*                            NO  DELIMITER FOUND
         LA    R8,MSG#3       ERROR MESSAGE 'WRONG LENGTH PGM NAME'
         B     ERRORRTN       GO TO ERROR ROUTINE
         SPACE 2
ENDLOOP2 EQU   *
*                   ON ENTRY REG 4 -> 1ST CHAR OF PGM NAME
*                            REG 1 (+2) -> DELIMITER ' ' OR ','
         SPACE
         LA    R1,1(0,R1)    REG 1 -> LAST CHARACTER
         SR    R1,R4         SET UP FOR EXECUTE INSTRUCTION
*
         LM    R5,R7,BXLVALU2 LOAD VCON-INCR-VCON INTO REGS 3-5
LOOP3    EQU   *
         EX    R1,PGMCOMPR    COMPARE PGM NAME WITH 'PROTECTED LIST'
         BE    PPGM           BRANCH IF EQUAL
         BXLE  R5,R6,LOOP3   LOOP ROUND THROUGH LIST
*              DROP THROUGH IF NO MATCH FOUND                         *
         B     RETURN         GO BACK TO CALLER - 0 IN REG 15
         EJECT
***                 DD CARD PROCESSING                              ***
         SPACE 2
DD       EQU   *
         SPACE
***                 TEST FOR JOBLIB
         SPACE
         CLC   JOBNAME(L'CJOBLIB),CJOBLIB  JOBLIB PRESENT ?
         BE    JOBLIB         BRANCH ON YES
         SPACE 2
***                 TEST FOR 'SYSABEND' OR 'SYSABENZ                ***
         SPACE
         LA    R7,MAXDISPL    LIMIT FOR DISPLACEMENT ACROSS JCL CARD
*                              OF START OF 'Y' IN  //X.Y OVER-RIDE
         LR    R6,R10         R6 -> START OF JCL IMAGE
LOOP4    EQU   *
         CLC   2(L'SYSABEND,R6),SYSABEND  SYSABEND PRESENT ?
         BE    DSYSABEN       BRANCH ON YES
         CLC   2(L'SYSABENZ,R6),SYSABENZ  SYSABENZ PRESENT ?
         BE    ZSYSABEN       BRANCH ON YES
         LA    R6,1(0,R6)     STEP ACROSS CARD
         BCT   R7,LOOP4       LOOP ROUND 'MAXDISPL' TIMES
         SPACE
*                        DROP THROUGH IF NO MATCH MADE                *
         SPACE
         B     RETURN         BACK TO CALLER - 0 IN REG 15
         EJECT
***                 RETURN TO CALLER                                ***
         SPACE 2
*              REG 15 CONTAINS EITHER 0 OR 4
         SPACE
RETURN   EQU   *
         L     R13,CORE+4     OLD SAVE AREA ADDRESS
         LTR   R15,R15        IS REG 15 ZERO X
         BNZ   CANCEL         BRANCH IF REG 15 CONTAINED '4'
         LM    R14,R12,12(R13) RESTORE REGISTERS
         LA    R15,ZERORET    SET ZERO RETURN CODE
         BR    R14            RETURN TO CALLER
CANCEL   EQU   *
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,CANCELCD   SET 'CANCEL' RETURN CODE
         BR    R14            RETURN TO CALLER
         EJECT
***                      ERROR ROUTINE                              ***
         SPACE 2
*        ON ENTRY REG 8 POINTS TO AN ERROR MESSAGE                    *
         SPACE 2
ERRORRTN BAL   R14,MSGSETUP   GO AND SET UP FOR SMB WRITE
         LR    R2,R8          R2 -> ERROR MESSAGE
         BAL   R6,SMBWRITE    GO AND WRITE SMB
         LA    R15,ERRORCD    LOAD R15 WITH ERROR CODE
         B     RETURN         EXIT
         EJECT
***                 PROTECTED PROGRAM DISCOVERED                    ***
         SPACE 2
PPGM     EQU   *
         BAL   R14,MSGSETUP   GO AND SET UP FOR SMB WRITE
         LA    R2,MSG#4       R2 -> ERROR MESSAGE
         BAL   R6,SMBWRITE    GO AND WRITE SMB
         LA    R15,ZERORET    ZERO RETURN CODE
         B     RETURN         EXIT  0 IN REG 15
         EJECT
***                  JOBLIB DD CARD DETECTED                        ***
         SPACE 2
JOBLIB   EQU   *
         BAL   R14,MSGSETUP   GO AND SET UP FOR SMB WRITE
         LA    R2,MSG#5       R2 -> MESSAGE
         BAL   R6,SMBWRITE    GO AND WRITE SMB
         LA    R15,ZERORET    ZERO RETURN CODE
         B     RETURN         EXIT - 0 IN REG 15
         EJECT
***                 SYSABEND DD CARD DETECTED                      ***
         SPACE 2
DSYSABEN EQU   *
         SPACE
*              ON ENTRY REG 6 (+2) -> 'SYSABEND' CHAR STRING ON IMAGE *
         MVC   2(L'SYSUDUMP,R6),SYSUDUMP     MOVE IN 'SYSUDUMP'     E *
         BAL   R14,MSGSETUP  GO AND SET UP FOR SMB WRITE
         LA    R2,MSG#6       R2 -> MESSAGE
         BAL   R6,SMBWRITE    GO AND WRITE MESSAGE
         LA    R15,ZERORET    ZERO RETURN CODE
         B     RETURN         EXIT - 0 IN REG 15
         EJECT
***                SYSABENZ DD CARD DETECTED                       ***
         SPACE 2
ZSYSABEN EQU   *
         SPACE
*              ON ENTRY REG 6 (+2) -> 'SYSABENZ' CHAR STRING ON IMAGE *
         SPACE
         MVC   2(L'SYSABEND,R6),SYSABEND     MOVE IN 'SYSABEND'     E *
         BAL   R14,MSGSETUP   GO AND SET UP FOR SMB WRITE
         LA    R2,MSG#7       R2 -> MESSAGE
         BAL   R6,SMBWRITE    GO AND WRITE SMB
         LA    R15,ZERORET    ZERO RETURN CODE
         B     RETURN         EXIT - 0 IN REG 15
         EJECT
***            ROUTINE TO SET UP TO WRITE SMB                      ***
         SPACE 2
MSGSETUP EQU   *
         L     R2,CORE+4     LOAD ADDRESS OF IEFVHEB (CALLING PGM)
*                              SAVE AREA
         MVC   OR5(32),40(R2) MOVE IN REGS 5-12 AS AT ENTRY TO THIS
*                              EXIT
         L     R2,64(R2)      LOAD R2 WITH IEFVHEB'S BASE REGISTER AS
*                              AT ENTRY TO THIS ROUTINE (REG 11)
         MVC   ADDR,DISPL(R2) MOVE VCON OF IEFVGM INTO FIELD 'ADDR'
*                               IEFVGM IS USED TO WRITE SMBS          *
********************DISPL IS RELEASE DEPENDENT*************************
         SPACE
         SPACE
         BR    R14            RETURN TO CALLER
         EJECT
***            ROUTINE TO WRITE AN >MB USING IEFVGM                 ***
         SPACE 2
*              ON ENTRY REG 2 POINTS TO THE MESSAGE TO BE PRINTED     *
SMBWRITE EQU   *
         STM   R5,R12,NSAVE   SAVE CURRENT REGISTERS
         LM    R5,R12,OR5     LOAD IEFVHEB'S REGS 5-10
         L     R12,OR12       LOAD IEFVHEB'S REG 12
         LR    R9,R2          R9 -> MESSAGE
         SR    R2,R2          CLEAR R2
         L     R15,ADDR       LOAD ADDR OF IEFVGM
         LA    R13,CORE       LOAD ADDR OF OUR SAVE AREA
         BALR  R14,R15        BRANCH TO IEFVGM
         STM   R5,R12,OR5     RESAVE IEFVHEB REGS 5-12
         LM    R5,R12,NSAVE   RESTORE OUR REGS
         BR    R6             RETURN TO CALLER
         SPACE
***                 MODEL STATEMENTS USED IN THIS ROUTINE          ***
*              ON ENTRY REG1 CONTAINS THE LENGTH SUITABLY MODIFIED
*                       REG5 -> TABLE
*                       REG4 -> PGM NAME AS FOUND
         SPACE
PGMCOMPR CLC   0(1,R4),0(R5)  COMPARE PGM NAME WITH TABLE ENTRY
         EJECT
         EJECT
***            CONSTANTS USED IN THIS ROUTINE                      ****
         SPACE 2
BXLEVALU EQU   *
         DC    V(PRFXSTRT)    START OF JOB PREFIX TABLE
         DC    A(3)           INCREMENT
         DC    V(PREFXEND)    END OF PREFIX TABLE
         SPACE 2
TRTABLE  EQU   *
         DC    107X'00'      IGNORED
         DC    X'04'         INCREMENT IN REG 2 IF ',' IS FOUND
         DC    18X'00'       IGNORED
         DC    X'08'          INCREMENT IN R2 IF '=' IS FOUND
         DC    129X'00'       ALL OTHER CHARS ARE IGNORED
         DS    0F
BXLVALU2 EQU   *
         DC    V(PPGMSTRT)    START OF PRIVILEGED PGM TABLE
         DC    A(8)           INCREMENT
         DC    V(PPGMEND)     END OF PRIVILEGED PGM TABLE
CJOBLIB  DC    C'JOBLIB'
SYSABEND DC    C'SYSABEND'
SYSABENZ DC    C'SYSABENZ'
SYSUDUMP DC    C'SYSUDUMP'
MSG#1    EQU   *
         DC    CL40'YMF001A   INVALID JOB PREFIX ***********'
         DC    CL40'JOB CANCELLED AT JCL VALIDATION ********'
MSG#2    EQU   *
         DC    CL40'YMF002A   NO STEPNAME ON EXEC CARD *****'
         DC    CL40'JOB CANCELLED AT JCL VALIDATION *********'
MSG#3    EQU   *
         DC    CL40'YMF003A   PGM NAME TOO LONG *************'
         DC    CL40'JOB CANCELLED AT JCL VALIDATION ********'
MSG#4    EQU   *
         DC    CL40'YMF004I   YOU HAVE CALLED FOR A ''PRIVILE'
         DC    CL40'GED PROGRAM'' ***************************'
MSG#5    EQU   *
         DC    CL40'YMF005I   PLEASE DO NOT USE ''JOBLIB'' CAR'
         DC    CL40'DS - ''STEPLIB'' IS MORE EFFICIENT *******'
MSG#6    EQU   *
         DC    CL40'YMF006W   ''SYSUDUMP'' SUBSTITUTED FOR ''SY'
         DC    CL40'SABEND'' ********************************'
MSG#7    EQU   *
         DC    CL40'YMF007W   ''SYSABEND'' SUBSTITUTED FOR ''SY'
         DC    CL40'SABENZ   *******************************'
         EJECT
***            EQUATES USED IN THIS ROUTINE                         ***
         SPACE 2
COREQTY  EQU   72+68         SAVE AREA FOR ROUTINE +
*                             SAVE AREA FOR SMB WRITER INTERFACE
JOBTYP   EQU   1              USED TO DETERMINE WHICH PROCESSING
EXECTYP  EQU   2                ROUTE TO FOLLOW.ON ENTRY TO THIS
DDTYP    EQU   4                  ROUTINE R1 -> LIST OF ADDRESSES
*                                   THE THIRD ADDRESS IS OF A ONE
*                                     BYTE FIELD SHOWING CARD TYPE
         SPACE
BLANK    EQU   X'40'          BLANK USED IN COMPARES
PGMLENG  EQU   8              MAXIMUM LENGTH OF PROGRAM NAME
ALPHA    EQU   X'C0'          USED WITH TM INSTR TO DETERMINE WHETHER
*                              OR NOT 1ST CHAR OF PGM NAME IS
*                              ALPHABETIC OR NUMERIC
COMMA    EQU   X'6D'         USED IN COMPARES
MAXDISPL EQU   9             DISPLACEMENT ACROSS CARD OF 'SYSABEND'
*                             IN OVER-RIDE
ZERORET  EQU   0              RETURN CODE PASSED TO CALLER - JOB OK
CANCELCD EQU   4             RETURN CODE PASSED TO CALLER - JOB NG
ERRORCD  EQU   4              RETURN CODE PASSED TO 'RETURN' RTNE
         EJECT
***                 DSECTS USED IN THIS ROUTINE                     ***
         SPACE 2
CORE     DS    18F            SAVE AREA FOR THIS ROUTING
ADDR     DS    F              ADDRESS OF IEFVGM (SMB WTR IN IEFVHA)
OR5      DS    F              REGISTER 5 ON ENTRY TO THIS ROUTINE
OR6      DS    F              REGISTER 6 ON ENTRY TO THIS ROUTINE
OR7      DS    F              REGISTER 7 ON ENTRY TO THIS ROUTINE
OR8      DS    F              REGISTER 8 ON ENTRY TO THIS ROUTINE
OR9      DS    F              REGISTER 9 ON ENTRY TO THIS ROUTINE
OR10     DS    F              REGISTER 10 ON ENTRY TO THIS ROUTINE
OR11     DS    F              REGISTER 11 ON ENTRY TO THIS ROUTINE
OR12     DS    F              REGISTER 12 ON ENTRY TO THIS ROUTINE
NSAVE    DS 8F                SAVE AREA FOR REGS 5-12 ON BRANCHING
*                              TO IEFVGM (SMB WRITER)
         SPACE 2
JCLCARD  DSECT
TWOSLASH DS    CL2            C'//'
JOBPRFIX DS    CL3            JOB PREFIX
         ORG   JOBPRFIX
JOBNAME  DS    CL8            JOB NAME
         ORG   JOBPRFIX
STEPNAME DS    CL1            1ST CHAR OF STEP NAME
         ORG
         DS    CL2
TRTSTART DS    CL1            START OF CARD FOR '=' OR ',' SCAN
         DS    CL58
ENDTRT   DS    CL1
TRTLENG  EQU   ENDTRT-TRTSTART LENGTH OF '=' OR ',' SCAN
         SPACE 3
***                 RELEASE DEPENDENT CONSTANTS                     ***
         SPACE
DISPL    EQU   X'2B2'    THIS IS THE DISPLACEMENT (LESS 2) FROM THE
*                             BASE REGISTER OF IEFVHEB OF THE VCON
*                             OF IEFVGM (SMB WTR) USED TO WRITE
*                             SMB' FROM IEFUJV
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
