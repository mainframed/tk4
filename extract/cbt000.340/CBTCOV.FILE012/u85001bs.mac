*
*        C*PYR*GHT  GENERAL ACCIDENT FIRE AND LIFE ASSURANCE
*                   CORPORATION P.L.C.          1982
*
*        WRITTEN BY ALASTAIR MACPHERSON,
*                   TECHNICAL SUPPORT DEPT,
*                   GAFLAC,
*                   GENERAL BUILDINGS,
*                   PERTH,
*                   SCOTLAND
*                   TEL. PERTH (0738) 21202 X 520
*
*******  I'D BE GRATEFUL TO RECEIVE ANY COMMENTS, SUGGESTIONS, ETC.,
*******  REGARDING THIS PROGRAM!
*
*        THE PROGRAM MUST BE AUTHORISED, SINCE IT USES MODESET
*
*        JCL.....
*          TO ASSEMBLE...PUT SYS1.AMODGEN IN THE SYSLIB.
*          TO LINK    ...PUT IN ' SETCODE AC(1) ' OR SIMILAR.
*                     ...LINK IT INTO AN AUTHORISED LIBRARY.
*          TO EXECUTE ...
*            //      EXEC PGM=WHATEVERYOUCALLIT
*            //CTCA  DD   UNIT=CUU
*
*        ON THE VM/PASSTHROUGH MACHINE...
*          THE ' PVM CONFIG ' FILE WOULD CONTAIN
*                           LOCAL TAYSIDE
*                           LINK 320 VTAMCTCA CTCA
*          IF THE VARIABLES SET IN THE CUSTOMISATION BIT ( SEE BELOW)
*                           WERE - &LOCAL = 'VTAMCTCA'
*                           AND    &PVM   = 'TAYSIDE'
*           ( OF COURSE '320' WOULD BE WHATEVER YOUR CTCA IS! )
*
*        THINGS TO DO SOMETIME...
*        - IMPROVE ERROR RECOVERY
*        - DRAIN LINE ON ABEND, EOJ, ETC.
*        - AUTOMATICALLY START LINE
*        - GET PRESENT FOR WIFE'S BIRTHDAY
*        - ADD ANOTHER BASE REG, OR MODULARISE
*        - FREEMAIN SRB/IOSB, RESET UCB, AT EOJ
*        - TALK TO CTCA VIA BISYNC LINE AS WELL AS CTCA
*        -
*
*        THIS IS THE FREE VERSION ( VTAMCTCA 1.1.2.1.3 ).
*        IF YOU WANT THE VERSION THAT WORKS, YOU MUST
*        ORDER VTAMCTCA/SP , AND IT'LL COST YOU $1000/MONTH.
*
*
         EJECT
*
* THE 'NODE' MACRO ISN'T USED IN THIS PROGRAM.
* SEE THE DESCRIPTION OF THE GLOBAL &LUTABLE
         MACRO
         NODE  &LUNAME=,&DEVICE=,&MODEL=
         GBLB  &NOTFRST
         LCLC  &CLTYP,&MOD
         AIF   ('&DEVICE' EQ '3278').A3278
         AIF   ('&DEVICE' EQ '3277').A3277
.* DUFF DEVICE SPECIFIED
         MNOTE 8,INVALID DEVICE &DEVICE
         MEXIT
.A3277   ANOP
&CLTYP   SETC  '4004'
&MOD     SETC  '&MODEL'
         AGO   .GEN
.A3278   ANOP
&CLTYP   SETC  '4001'
&MOD     SETC  '&MODEL'
.GEN     ANOP
         AIF   (&NOTFRST).ORGY
         AIF   (T'&LUNAME NE 'O').DUFFLU
&NOTFRST SETB  1
LUTABLE  CSECT
         AGO   .ORGX
.ORGY    ANOP
         AIF   (T'&LUNAME EQ 'O').DUFFLU
         ORG   *-1                 BACK OVER FENCE
.ORGX    ANOP
         DC    CL8'&LUNAME '
         DC    AL1(0,&MOD)
         DC    X'&CLTYP'
         DC    X'FF'               FENCE
         MEXIT
.DUFFLU  ANOP
         MNOTE 8,INVALID LUNAME
         MEND
         MACRO
         MODIFY &VERB=,&RTN=
         GBLB  &MOD
         AIF   (NOT &MOD).ORGX
         ORG   *-1                 BACK OVER FENCE
         AGO   .GEN
.ORGX    ANOP
&MOD     SETB  1
MODTAB   DS    0F                  START OF VERB TABLE
.GEN     ANOP
         DC    CL8'&VERB'          VERB
         DC    A(&RTN)             HANDLER
         DC    X'FF'               FENCE
         MEND
         EJECT
*
* USE THIS ONE INSTEAD OF 'EQU' FOR DEBUGGING
         SPACE 5
         MACRO
&LAB     WEQU  &DATA
&LAB     EQU   &DATA
         WTO   '&LAB'
         MEND
         EJECT
********************************************************************
********************************************************************
**                                                                **
**                CUSTOMISATION BIT.                              **
**                                                                **
********************************************************************
********************************************************************
         SPACE 2
***********************************
         GBLC  &PVM
* SET THIS TO THE NODENAME OF THE PASSTHRU VIRTUAL MACHINE
* WHICH IS AT THE OTHER END OF THE CTCA.
*
***********************************
         SPACE
***********************************
         GBLC  &VTAM
* SET THIS TO THE VTAM APPLID REQUIRED.
*
***********************************
         SPACE
***********************************
         GBLC  &LOCAL
* SET THIS TO THE PVM NODENAME WHICH THIS VTAM APPLICATION
* IS SIMULATING.
*
***********************************
         SPACE
***********************************
         GBLC  &LUTAB
* SET THIS TO A LOAD MODULE NAME.
* THE LOAD MODULE CONTAINS A LIST OF LUNAMES AND CORRESPONDING
* DEVICE TYPES. PINCH THE NODE MACRO FROM THE FRONT OF THIS
* ASSEMBLY AND USE IT TO GENERATE THE MODULE.
* IF THE LU NAME BEING SEARCHED FOR DOESN'T EXIST IN THE TABLE,
* THE FIRST ENTRY IN THE TABLE IS USED.
*
* IF YOU'VE GOT A 'PSERVIC=...' IN YOUR VTAM DEFINITION,
* THE PSERVIC DEFINITION IS USED IN PREFERENCE TO &&LUTAB
* TO DETERMINE THE MODEL NUMBER ETC.
*
* YOU CAN OMIT TO DEFINE &&LUTAB IF YOU'VE GOT PSERVIC, IN WHICH
* CASE THE EXTRA LOAD MODULE IS NOT REQUIRED.
*
***********************************
         SPACE
***********************************
         GBLB  &MODEL5             SET TO 'TRUE' IF PVM SUPPORTS MODEL5
* SET THIS IF YOUR PASSTHRU SUPPORTS MODEL 5 SCREENS.
*
***********************************
         SPACE
&PVM     SETC  'TAYSIDE'           ID OF THE PASSTHRU MACHINE.
&VTAM    SETC  'VTAMCTCA'          VTAM APPLID.
&LOCAL   SETC  '&VTAM'             ID OF THIS PASSTHRU NODE.
*LUTAB   SETC  'LUTABLE'           NAME OF TABLE OF DEVICE TYPES
&MODEL5  SETB  1                   THIS CARD LAST IF GE VM/SP R2.
&MODEL5  SETB  0                   THIS CARD LAST IF LT VM/SP R2.
&LOCAL   SETC  'TESTCTCA'          THIS CARD ASSEMBLES A TEST VERSION
         TITLE '&VTAM - VM/PASSTHRU SIMULATOR'
&VTAM    CSECT
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3                   CVT
R4       EQU   4                   LOGICAL UNIT BLOCK (LUB)
R5       EQU   5                   PVM RECORD         (PVB)
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11                  BASE REG
R12      EQU   12                  BASE REG
R13      EQU   13                  SAVEAREA
R14      EQU   14                  RETURN ADDR
R15      EQU   15                  ENTRY POINT/ RETURN CODE
R16      EQU   16                  RESERVED FOR FUTURE EXPANSION.
SUBPOOL  EQU   1
STX      EQU   X'02'
DLE      EQU   X'10'
ENQ      EQU   X'2D'
EOT      EQU   X'37'
ACK0     EQU   X'70'
         SPACE
         USING *,R15
         B     START
         DC    AL1(TEXTEND-*-1)
         DC    CL9'&VTAM'
         DC    CL9'&SYSDATE'
         DC    C'&SYSTIME'
         DC    C' C*PYR*GHT - GENERAL ACCIDENT FIRE AND LIFE'
         DC    C' CORPORATION P.L.C.    1982'
TEXTEND  EQU   *
BASE2    DC    A(SAVEAREA+4096)
SAVEAREA DS    9D                  SAVEAREA
START    EQU   *
         STM   R14,R12,12(R13)     SAVE CALLER'S REGS
         L     R12,BASE2           SETUP SECOND BASE REGISTER
         LA    R11,SAVEAREA        POINT AT NEW SAVEAREA/FIRST BASE
         DROP  R15                 LIKE A TON OF BRICKS
         ST    R13,4(,R11)         CHAIN HSA
         ST    R11,8(,R13)         CHAIN LSA
         LR    R13,R11             SAVEAREA
         USING SAVEAREA,R11,R12    SET UP ADDRESSABILITY
         PRINT NOGEN
         USING PSA,0               ADDRESS THE PSA
         USING CVT,R3              ADDRESS CVT
         USING LUB,R4
         USING PVMBLOCK,R5
         STM   R11,R12,BASEREGS    SAVE BASE REGS FOR EXIT RTNS
         SPACE
         L     R2,0(,R1)           PICK UP PARM POINTER
         ICM   R3,3,0(R2)          PICK UP PARM LENGTH
         BZ    NOPARM              BRANCH IF ITS MISSING
         BCTR  R3,0                DECREMENT FOR EXECUTE
         EX    R3,MOVEPARM         SAVE PARM
         OI    FLAGS,GOTPARM       SET FLAG
NOPARM   EQU   *
         SPACE
***********************************************************************
**                                                                   **
**  GET OPERATOR COMMUNICATIONS GOING                                **
**   ( STOP / MODIFY )                                               **
**                                                                   **
**                                                                   **
**                                                                   **
***********************************************************************
         EXTRACT EXTRAREA,                                             *
               FIELDS=(COMM,TIOT,ASID)
         L     R6,COMMA            POINT AT COMMS AREA
         LA    R6,4(,R6)           A(POINTER TO CIB)
         L     R7,0(,R6)           A(CIB)
         QEDIT ORIGIN=(R6),        FREE 'START' CIB                    *
               BLOCK=(R7)
         QEDIT ORIGIN=(R6),        ALLOW 'MODIFIES'                    *
               CIBCTR=5
         SPACE
         L     R3,COMMA            PICK UP A(A(ECB))
         MVC   ECBLIST(4),0(R3)    PUT A(ECB) IN ECBLIST
         SPACE
         AIF   ('&LUTAB' EQ '').LUTX7
         LOAD  EPLOC=LUTABLE       LOAD TABLE OF LU NAMES
         ST    R0,ALUTABLE         SAVE ITS ADDR
         SPACE
.LUTX7   ANOP
         SPACE
***********************************************************************
**                                                                   **
**  OPEN THE VTAM ACB                                                **
**   THEN THE CTCA DCB.                                              **
**                                                                   **
***********************************************************************
         SPACE
VORETRY  EQU   *
         MVI   WTOREPLY,0          INITIALISE REPLY
         OPEN  ACB                 TRY THE VTAM OPEN.
         LTR   R15,R15             DID IT WORK?
         BZ    OPENCTCA            ....YES IT DID.
         SPACE
         XC    CTCAECB,CTCAECB     USE THIS AS AN ECB
         WTOR  '#GA001A VTAM OPEN FAILURE - REPLY ''U''TO RETRY',      *
               WTOREPLY,           PUT REPLY HERE PLEASE               *
               L'WTOREPLY,                                             *
               CTCAECB
         WAIT  ECB=CTCAECB         WAIT FOR A REPLY
         OI    WTOREPLY,C' '       UPPERCASE
         CLI   WTOREPLY,C'U'       TEST REPLY
         BE    VORETRY             RETRY THE OPEN.
         B     EOJ                 GIVE UP.
         SPACE
OPENCTCA EQU   *
         OPEN  CTCADCB             GET THE CTCA GOING
         TM    CTCADCB+48,X'10'    TEST DCBOFOPN..
         BO    OPENSDUN            ..BRANCH IF OK.
         WTO   'CTCA OPEN FAILURE'
         ABEND 3
OPENSDUN EQU   *
         MVC   PURGDEBA,CTCADCB+45 MOVE A(DEB) TO PURGE PARM LIST
         SPACE
***********************************************************************
**                                                                   **
**  NOW FOR THE NAUGHTY BIT.                                         **
**   THE UCB FOR THE CTCA MUST BE PRIMED WITH THE ADDRESS            **
**   OF AN IOSB/SRB COMBINATION.                                     **
**   THE SRB WILL BE SCHEDULED WHEN AN ATTENTION INTERRUPT IS        **
**   PRESENTED BY THE CTCA.                                          **
**   THIS IS BECAUSE THIS PROGRAM MUST BE AWARE OF ALL ATTENTION     **
**   INTERRUPTS FROM THE CTCA.                                       **
**                                                                   **
***********************************************************************
         SPACE
         L     R3,CVTPTR           POINT R3 AT CVT
         L     R5,CVTTCBP          TCB WORDS
         L     R5,4(,R5)           TCB
         L     R5,0(,R5)           RB
         ST    R5,RBADDR
         MODESET MODE=SUP          GET INTO SUPERVISOR STATE
         SPACE
         GETMAIN R,                GET AN IOSB                         *
               LV=108,                                                 *
               SP=245
         LR    R8,R1
         USING IOSB,R8             IOSB ADDRESSABILITY
         SPACE
         GETMAIN R,                GET AN SRB                          *
               LV=44,                                                  *
               SP=245
         LA    R9,0(,R1)
         USING SRBSECT,R9          SRB ADDRESSABILITY
         SPACE
* NOW SET UP THE SRB AND IOSB ....
* GOT TO GET INTO KEY ZERO FIRST THOUGH...
         IPK                       SAVE OLD PSW KEY IN R2
         SR    R6,R6
         SPKA  0(R6)               GET INTO KEY ZERO
         SPACE
         XC    SRB(44),SRB         ZEROISE THE SRB.
         XC    IOSB(108),IOSB      ZEROISE THE IOSB
         MVC   SRBID,=C'SRB '      ID
         LA    R6,ATTNRTN          POINT AT ROUTINE
         ST    R6,SRBEP            PUT ITS ADDR IN SRB
         ST    R6,IOSPGAD          AND IOSB
         ST    R6,IOSNRM           AND IOSB
         ST    R8,SRBPARM          INSERT IOSB ADDR
         L     R4,CVTTCBP          POINT AT TCB WORDS
         MVC   SRBASCB,12(R4)      INSERT A(ASCB) IN SRB
         ST    R9,IOSSRB           PUT A(SRB) IN IOSB
         OI    IOSOPT,IOSDEP       DE POSTING
         OI    IOSOPT,IOSPSLL      DON'T WANT LOCAL LOCK
         MVC   IOSASID,ASID PUT ASID IN IOSB
* PUT THE ADDRESS OF THE SRB INTO THE UCB
         L     R3,TIOTA            PICK UP TIOT ADDRESS
         AH    R3,CTCADCB+40       ADD OFFSET
         LH    R3,18(,R3)          PICK UP UCB ADDRESS
         ST    R9,24(,R3)          MOVE A(SRB) TO UCB
         ST    R9,SRBA             SAVE SRB ADDR FOR LATER
         ST    R3,IOSUCB           PUT A(UCB) IN IOSB
         ST    R3,UCBADDR          PUT A(UCB) HERE
         DROP  R8
         DROP  R9
* THATS THEM DONE. NOW GET OUT OF KEY ZERO...
         SPACE
         SPKA  0(R2)               RESTORE OLD PSW KEY
         MODESET MODE=PROB         GET OUT OF SUPERVISOR STATE
         EJECT
***********************************************************************
**                                                                   **
**  NOW THIS PROGRAM WILL KNOW THAT AN ATTENTION INTERRUPT HAS       **
**  OCCURRED, BECAUSE 'ATTNECB' WILL BE POSTED.                      **
**                                                                   **
**                                                                   **
**  NEXT STAGE ..........                                            **
**                                                                   **
**  ... ESTABLISH INITIAL STIMER,  WITH EXIT WHICH WILL WAKE UP      **
**      EVERY SO OFTEN TO HAVE A LOOK AT THINGS.                     **
**                                                                   **
**  ... TRY TO ESTABLISH CONTACT WITH VM/PASSTHRU VIA THE CTCA.      **
**                                                                   **
***********************************************************************
         SPACE
         STIMER REAL,                                                  *
               TIMEREX,                                                *
               DINTVL=INTERVAL
         SPACE
SIGNCTC  EQU   *
         OI    FLAGS,STARTING      FLAG CTCA AS STARTING
         L     R1,UCBADDR
         SVC   33                  IOHALT
*        IOHALT (R1)
         LA    R6,CCWSENSE         FIND OUT IF PVM HAS
         BAL   R14,CTCAIO          ..DONE ANY I/O.
         TM    IOFLAGS,IOFIDDLE    IF THAT I/O WAS PURGED...
         BO    SIGNWAIT            ..JUST WAIT FOR AN ATTENTION.
         CLI   COMMBYTE,7          WAS IT A CONTROL...
         BE    DOREAD              ..YES - DO A READ.
         CLI   COMMBYTE,1          WAS IT A WRITE...
         BE    DOREAD              ..YES - DO A READ.
         LA    R6,CCWENAB          ENABLE ...
         BAL   R14,CTCAIO          ..COMPATABILITY MODE.
         TM    IOFLAGS,IOFIDDLE    IF IT WENT WRONG...
         BO    SIGNCTC             ...RESTART.
SIGNWAIT EQU   *
         WTO   'WAITING ON PVM STARTING THE LINE',                     *
               ROUTCDE=(2),                                            *
               DESC=(3)
         ST    R1,WTOID            SAVE ID.
         WAIT  ECB=ATTNECB         WAIT FOR SOME ACTION
         XC    ATTNECB,ATTNECB
         CLI   COMMBYTE,7          WAS IT A CONTROL...
         BE    DOREAD              ..YES - DO A READ.
         CLI   COMMBYTE,1          WAS IT A WRITE...
         BE    DOREAD              ..YES - DO A READ.
         B     SIGNCTC             ..RESTART
         SPACE
BADNODE  EQU   *
         MVC   BADWTOND,SRECID     INSERT DUFF NODE IN WTO
BADWTO   WTO   'PASSTHRU IS LOOKING FOR XXXXXXXX'
         ABEND 100,DUMP
BADWTOND EQU   BADWTO+32,8
         SPACE
DOWRIT   EQU   *
         CLC   SRECID,OURID        CORRECT NODE?
         BNE   BADNODE             ...NO - BRANCH.
         SPACE
         MVC   SRECID,PVMID        EXPECTED PASSTHRU ID
         MVC   SRECVERS,VERSION    SIMULATED PVM SOFTWARE LEVEL
         MVI   SRECCC,ENQ          DO AN ENQUIRY
         LA    R6,CCWCNTRL
         BAL   R14,CTCAIO
         TM    IOFLAGS,IOFIDDLE    IF IT WENT WRONG...
         BO    SIGNCTC             ...RESTART.
         LA    R6,CCWSGNW
DOWRIT2  EQU   *
         BAL   R14,CTCAIO          WRITE IT.
         TM    IOFLAGS,IOFIDDLE    IF IT WENT WRONG...
         BO    SIGNCTC             ...RESTART.
         WAIT  ECB=ATTNECB         WAIT ON AN ATTENTION IRPT.
         XC    ATTNECB,ATTNECB
DOREAD   EQU   *
         LA    R6,CCWSGNR          POINT AT READ CCW
         BAL   R14,CTCAIO          READ IT
         TM    IOFLAGS,IOFIDDLE    IF IT WENT WRONG...
         BO    SIGNCTC             ...RESTART.
         CLI   SRECCC,EOT          CHECK RESPONSE
*****    BE    LINKBAD             OTHER SIDE SAYS LINK BAD
         CLI   SRECCC,ENQ          IF ENQ WAS RECVD...
         BE    DOWRIT              ...SEND ACK
         CLI   SRECCC,ACK0         IF ACK0 WASN'T RECVD...
         BNE   SIGNCTC             ...NOT RIGHT - REPEAT.
         CLC   SRECID,OURID        CHECK LOCAL NODE ID
         BNE   BADNODE             ..BRANCH IF INCORRECT.
SIGNOK   EQU   *
**
** SIGNON IS COMPLETE. START ACCEPTING LOGONS.
**
         L     R1,WTOID            PICK UP ID
         DOM   MSG=(1)             DELETE WTO
         WTO   'PVM NODE &PVM IS UP'
         NI    FLAGS,255-STARTING  RESET 'STARTING' FLAG
         OI    FLAGS,STARTED       SET 'STARTED' FLAG
         SPACE
         SETLOGON RPL=MAINRPL,     ACCEPT LOGONS NOW                   *
               OPTCD=START
         SPACE
* DROP DOWN TO DO INITIAL RECEIVE.
         EJECT
RECEIVE  EQU   *
* LEAVE A 'RECEIVE' OUTSTANDING.
         SPACE
         TM    TPENDECB,POSTED     VTAM ENDING?
         BO    EOJ                 YES - BRANCH.
         SPACE
         XC    RECVECB,RECVECB     RESET RECEIVE ECB
         SPACE
         RECEIVE RPL=MAINRPL,                                          *
               AREA=OUTDATA,                                           *
               AREALEN=L'OUTDATA,                                      *
               OPTCD=(ASY,ANY,CA),                                     *
               ECB=RECVECB,                                            *
               RTYPE=(DFSYN,DFASY,NRESP)
         LA    R9,2
         LR    R2,R0
         LTR   R15,R15
         BNZ   DUMP
         SPACE
MULTWAIT EQU   *
         SPACE
         WAIT  ECBLIST=ECBLIST     WAIT FOR SOMETHING TO HAPPEN
         SPACE
         L     R6,ECBLIST          PICK UP STOP/MODIFY ECB ADDRESS
         TM    0(R6),POSTED        STOP/MODIFY?
         BO    STOPMODF            YES - BRANCH
         SPACE
         TM    ATTNECB,POSTED      ATTENTION INTERRUPT?
         BO    GOTATTN             YES - BRANCH.
         SPACE
         TM    CONTWECB,POSTED     WANT TO RESUME WRITING?
         BO    CONTWRT             YES - BRANCH.
         SPACE
         TM    RECVECB,POSTED      RECEIVED DATA?
         BO    GOTRECV             YES - BRANCH.
         SPACE
         TM    EXITECB,POSTED      EXIT ROUTINE TRIGGER?
         BO    GOTEXIT             YES - BRANCH.
         SPACE
         TM    TPENDECB,POSTED     VTAM ENDING?
         BO    EOJ                 YES - BRANCH.
         SPACE
* GOOD GRIEF. WONDER WHAT WAS WAS POSTED THEN?
* IT MUST BE CHRISTMAS.
         EJECT
STOPMODF EQU   *
         SPACE
***********************************************************************
**                                                                   **
**  A 'STOP' OR 'MODIFY' HAS BEEN ISSUED.                            **
**                                                                   **
**                                                                   **
**                                                                   **
**                                                                   **
***********************************************************************
         SPACE
         L     R3,COMMA
         L     R3,4(,R3)           POINT AT CIB
         CLI   4(R3),X'40'         TEST FOR 'STOP'
         BE    EOJ                 ...YES - BRANCH.
* R3 HAS CIB ADDRESS.
         WTO   'MODIFY ACCEPTED'
         LA    R9,MINVAL           DEFAULT TO INVALID VERB.
         ICM   R4,B'0011',14(R3)   PICK LENGTH FROM CIB
         BZ    MODINVAL            ...BRANCH IF INVALID.
         BCTR  R4,0                DECREMENT FOR EXECUTE
         SPACE
         LA    R5,MODTAB-12
MODLOOP  EQU   *
         LA    R5,12(,R5)          NEXT ENTRY IN VERB TABLE
         CLI   0(R5),X'FF'         END OF VERB TABLE?
         BE    MODINVAL            YES - INVALID VERB
         EX    R4,MODCLC           IS THIS THE VERB?
         BNE   MODLOOP             NO - TRY NEXT ONE.
         L     R9,8(,R5)           LOAD HANDLER ADDRESS
MODINVAL EQU   *
         BALR  R10,R9              GO SERVICE REQUEST.
MODDUN   EQU   *
* FREE THE CIB. IT WAS INNOCENT ANYWAY.
         L     R6,COMMA            POINT AT COMMS AREA
         LA    R6,4(,R6)           A(POINTER TO CIB)
         QEDIT ORIGIN=(R6),        FREE 'START' CIB                    *
               BLOCK=(R3)
         B     MULTWAIT            AND RETURN TO MULTIPLE WAIT
         SPACE
         EJECT
***********************************************************************
**                                                                   **
**  DATA HAS BEEN RECEIVED FROM VTAM.                                **
**                                                                   **
**                                                                   **
**                                                                   **
**                                                                   **
***********************************************************************
         SPACE
GOTRECV  EQU   *
         SPACE
         CHECK RPL=MAINRPL
         SPACE
         SHOWCB AM=VTAM,                                               *
               RPL=MAINRPL,                                            *
               FIELDS=(USER,RECLEN), GET LUB ADDRESS+DATA LENGTH       *
               AREA=LUBA,          ..IN THIS FIELD                     *
               LENGTH=8
         SPACE
* FIND OUT IF THIS IS THE FIRST LINK IN A CHAIN.
* IF IT IS, MORE RECEIVES MUST BE DONE.
         SPACE
         TESTCB AM=VTAM,                                               *
               RPL=MAINRPL,                                            *
               CHAIN=ONLY
         BE    SENDEB              BRANCH IF ITS THE ONLY LINK.
* OOOOOOOKAY.
         L     R5,RECLEN           INITIALISE TOTAL LENGTH COUNTER
RNXTLINK EQU   *
         LA    R4,OUTDATA(R5)      POINT AT END OF DATA
         RECEIVE RPL=MAINRPL,                                          *
               AREA=(R4),                                              *
               AREALEN=4000,                                           *
               ECB=INTERNAL,                                           *
               OPTCD=(SYN,SPEC),                                       *
               RTYPE=(DFSYN,DFASY,NRESP)
         SPACE
         SHOWCB AM=VTAM,                                               *
               RPL=MAINRPL,                                            *
               FIELDS=RECLEN,      GET DATA LENGTH                     *
               AREA=RECLEN,        ..IN THIS FIELD                     *
               LENGTH=4
         SPACE
         A     R5,RECLEN           BUMP TOTAL LENGTH COUNTER
         SPACE
* FIND OUT IF THIS IS THE LAST LINK IN A CHAIN.
* IF NOT , MORE RECEIVES MUST BE DONE.
         SPACE
         TESTCB AM=VTAM,                                               *
               RPL=MAINRPL,                                            *
               CHAIN=MIDDLE
         BE    RNXTLINK            BRANCH IF ITS A MIDDLE LINK.
* YIPPEE. THATS ALL OF THE CHAIN IN.
         ST    R5,RECLEN           PUT TOTAL LENGTH BACK HERE.
SENDEB   EQU   *
         L     R4,LUBA             POINT AT LUB
         L     R8,LUBNIBA          PICK UP NIB POINTER
         LA    R5,OUTREC           POINT AT OUTWARD RECORD
         ICM   R7,B'1111',RECLEN   TEST VTAM RECORD LENGTH
         BNE   NONZERO             BRANCH IF NON-ZERO.
* TEST SNA SENSE CODES...
         CLC   =X'0831',MAINRPL+88 TERMINAL SWITCHED OFF?
         BE    DISC                ..YES - DISCONNECT HIM.
         CLC   =X'082B',MAINRPL+88 'SYSREQ' USED?
         BE    DISC                ..YES - DISCONNECT HIM.
         MVC   ZEROWTO+27(8),12(R8) LU NAME
         LA    R6,MAINRPL+13
         LA    R7,ZEROWTO+44
         LA    R2,11
         BAL   R14,HEX
         LA    R6,MAINRPL+88
         LA    R7,ZEROWTO+73
         LA    R2,4
         BAL   R14,HEX
ZEROWTO  WTO   '0LEN VTAM REC-NODE=XXXXXXXX RTN/FDB=XXXXXXXXXXXXXXXXXXX*
               XXX SENSE=XXXXXXXX*********'
         B     RECEIVE
         SPACE
DISC     EQU   *
* CONSTRUCT A RECORD ASKING PVM TO DISCONNECT US.
         MVI   PVMRTYPE,X'80'      CONTROL RECORD.
         MVI   PVMSTYPE,X'04'      SESSION TERMINATION.
         B     FILLCOMN            DO REMAINDER OF RECORD.
         SPACE
NONZERO  EQU   *
         SPACE
         SEND  RPL=MAINRPL,        SEND OUT END BRACKET.               *
               RECLEN=0,                                               *
               STYPE=REQ,                                              *
               CONTROL=DATA,                                           *
               CODESEL=STANDARD,                                       *
               POST=RESP,                                              *
               ECB=INTERNAL,                                           *
               BRACKET=(NBB,EB),                                       *
               CHAIN=ONLY,                                             *
               RESPOND=(NEX,FME,NRRN,NQRESP),                          *
               RTYPE=(DFSYN,DFASY,RESP),                               *
               OPTCD=(SYN,CA)
         SPACE
         SHOWCB AM=VTAM,                                               *
               NIB=(R8),                                               *
               FIELDS=NAME,        EXTRACT LUNAME FROM NIB             *
               AREA=OUTLUNAM,      AND PUT IT HERE                     *
               LENGTH=L'OUTLUNAM
         SPACE
*
* CREATE A RECORD TO GIVE TO CTCA
*
         MVI   PVMRTYPE,X'20'      GRAPHIC DATA RECORD
         MVI   PVMSTYPE,0          NO FLAGS SET HERE
FILLCOMN EQU *
         MVC   PVMSUSER,LUBNAME    INSERT SOURCE NAME
         MVC   PVMDUSER,LUBUSER    INSERT DESTINATION NAME
         MVC   PVMDNODE,LUBNODE    INSERT DESTINATION NODE
         MVC   PVMSNODE,OURID      SOURCE NODE
         TM    LUBFLAGS,LUBFRBUF   RESPONSE TO 'READ BUFFER' ?
         BZ    RECDONE             NO    - BRANCH.
         NI    LUBFLAGS,255-LUBFRBUF YES -TURN FLAG OFF IN LUB...
         OI    PVMSTYPE,X'20'            ...AND ON IN RECORD.
RECDONE  EQU   *
         SPACE
*
* THE RECORD IS ALMOST COMPLETE.
* GIVE IT A SEQUENCE NUMBER.
*
* WRITE THE DATA TO THE CTCA
*
         SPACE
         TM    FLAGS2,DRAINED      IF CTCA IS DRAINED...
         BO    RECEIVE             ...DON'T WRITE TO CTCA.
         SPACE
         L     R7,RECLEN
         STH   R7,PVMRECL          STORE IN RECORD
         LA    R7,PVMHLEN(,R7)     BUMP FOR HEADER PORTION
         STH   R7,CTCACCWW+6       STORE IN CCW
         STH   R7,EXICCWW+6        STORE IN EXIT RTN CCW
         STH   R7,PVMBLEN          STORE IN BLOCK
         SPACE
         LH    R7,SEQTO            PICK NEXT SEQ NO
         LTR   R7,R7               READY TO WRAP?
         BNM   WRAPX               NO - CONTINUE.
         SLR   R7,R7               YES - WRAP ROUND TO 0
WRAPX    EQU   *
         STH   R7,PVMSEQ           STORE IN BLOCK
         LA    R7,1(,R7)           BUMP
         STH   R7,SEQTO            SAVE AS NEXT SEQ NO.
         B     CONTWRT2
         SPACE
CONTWRT  EQU   *
* CONTINUE WHERE WE LEFT OFF.
         LM    R0,R15,WREGS        RESTORE REGS.
         XC    CONTWECB,CONTWECB
CONTWRT2 EQU   *
* CHECK ATTN ECB.
         TM    ATTNECB,POSTED      IF ATTN ECB ISNT POSTED...
         BZ    DOCNTRL             ...TAKE BRANCH.
CONTWRT3 EQU  *
         POST  CONTWECB            REMEMBER TO START HERE AGAIN.
         STM   R0,R15,WREGS        SAVE CURRENT REGS
         B     MULTWAIT            ...GO SERVICE ATTENTION.
DOCNTRL  EQU   *
         LA    R6,CNTRLWRT         POINT AT CONTROL/WRITE CCW
         BAL   R14,CTCAIO          DO THE I/O
* CHECK CSW. POSSIBLY THE WRITE FAILED 'COS
* THE OTHER SIDE BEAT IT TO THE WRITE.
         TM    IOBCSW+3,ATTN+BUSY  LOOK FOR THESE BITS
         BNZ   WSENSE              CONTROL/WRITE DIDN'T WORK...
*                                  ...GO DO SENSE.
         TM    IOFLAGS,IOFIDDLE    TEST FOR FIDDLE
         BO    CONTWRT3            CONTROL/WRITE DIDN'T WORK
         SPACE
         OI    FLAGS,ACKEXP        TURN ON 'ACK EXPECTED' FLAG.
        WAIT  ECB=ATTNECB         WAIT FOR ACK TO COME BACK
         TM    FLAGS2,NORECV       RECEIVE REQUIRED?
         BZ    RECEIVE             YES - GO FOR NEXT RECEIVE
         NI    FLAGS2,255-NORECV   NO  - SET FLAG OFF...
         B     MULTWAIT            ...AND JUST WAIT.
         SPACE
WSENSE   EQU   *
* FIND OUT WHAT OTHER SIDE WANTS.
         MVI   COMMBYTE,0
         LA    R6,CCWSENSE         POINT AT SENSE CCW
         BAL   R14,CTCAIO          DO A SENSE-COMMAND-BYTE
         TM    ATTNECB,POSTED      GOT A GENUINE ATTN?
         BO    CONTWRT3            YES - DON'T FRIG IT.
         POST  ATTNECB             NO - FRIG ONE.
         B     CONTWRT3            CONTROL/WRITE DIDN'T WORK
         EJECT
GOTATTN  EQU   *
         SPACE
***********************************************************************
**                                                                   **
**  AN ATTENTION INTERRUPT HAS BEEN RECEIVED FROM THE CTCA.          **
**                                                                   **
**                                                                   **
**                                                                   **
**                                                                   **
***********************************************************************
         SPACE
         XC    ATTNECB,ATTNECB     RESET ECB
         SPACE
         CLI   COMMBYTE,1          WAS IT 'WRITE'...
         BE    DOREAD2             ...YES - BRANCH.
         CLI   COMMBYTE,7          WAS IT 'CONTROL'...
         BE    DOREAD2             ...YES - BRANCH.
         CLI   COMMBYTE,2          WAS IT A READ...
         BNE   MULTWAIT            ...NO - IGNORE IT
         LA    R6,ACKCCW           SEND OUT AN ACK.
         BAL   R14,CTCAIO
         B     MULTWAIT
DOREAD2  EQU   *
***********************************************************************
**                                                                   **
**  DATA IS TO BE READ FROM THE CTCA AND SENT TO THE APPROPRIATE     **
**  LOGICAL UNIT.                                                    **
**                                                                   **
**                                                                   **
**                                                                   **
***********************************************************************
         SPACE
         LA    R6,CTCACCWR         POINT AT READ CCW
         BAL   R14,CTCAIO          DO THE I/O
*
* A READ FROM THE CTCA IS COMPLETE
         SPACE
         L     R5,READADDR         POINT AT BLOCK.
         SPACE
         CLC   =C'DRAIN',PVMDLE    REQUESTING DRAIN...
         BE    EOJ                 ...YES - END OF JOB.
         SPACE
         CLC   PVMDLE(2),XACK0     IS IT JUST AN ACK0...
         BNE   GIVEACK             ..NO - SEND AN ACK BACK.
         TM    FLAGS,ACKEXP
         BO    GOTACK
         WTO   'UNEXPECTED ACK0 RECEIVED'
GOTACK   EQU   *
         NI    FLAGS,255-ACKEXP    TURN OFF 'ACK EXPECTED' FLAG.
         B     MULTWAIT            FINISHED WITH THIS ACK.
         SPACE
GIVEACK  EQU   *
         TM    FLAGS,ACKEXP        WAS AN ACK EXPECTED..
         BZ    SENDACK             ..NO-THATS OK THEN.
         WTO   'MISSING ACK0'
SENDACK  EQU   *
         SPACE
* SEND OUT THE 'ACK' TO PVM.
         SPACE
         LA    R6,ACKCCW           POINT AT ACK  CCW
         BAL   R14,CTCAIO          DO THE I/O
* THE DATA FROM THE CTCA IS IN 'READCTCA'.
* DEBLOCK IT.
*
         L     R5,READADDR         POINT AT BLOCK.
         SPACE
         CLC   PVMDLE(2),XSTX      IS IT A GOOD BLOCK...
         BE    GDLESTX             ..OK.
         SPACE
         ABEND 1234,DUMP
         SPACE
GDLESTX  EQU   *
         LH    R3,PVMNRECS         PICK UP RECORD COUNT
         LA    R5,PVMRECRD         POINT R5 AT FIRST RECORD.
GRECORD  EQU   *
         USING PVMRECRD,R5
         SPACE
* R5 IS POINTING AT THE NEXT RECORD IN THE BLOCK.
*
* PROCESS THE RECORD.
*
* SEND THE DATA TO THE APPROPRIATE LU.
*
         SPACE
         LA    R4,LUBROOT
CTCARLUB EQU   *
         LR    R7,R4               SAVE POINTER TO PREVIOUS LUB
         ICM   R4,15,LUBNEXT       NEXT LUB.
         BE    DUMMYLUB            NO MORE - USE DUMMY LUB.
         CLC   LUBNAME,PVMDUSER    IS THIS THE CORRECT LUB?
         BNE   CTCARLUB            NO - TRY NEXT ONE.
         B     GOTLUB              YES - YIPPEE
DUMMYLUB EQU   *
         L     R4,LUBROOT          POINT R4 AT DUMMY LUB
GOTLUB   EQU   *
* R4 NOW POINTS TO THE LUB FOR THE CTCA DATA.
* ( R7 POINTS TO THE PREVIOUS LUB )
         L     R8,LUBNIBA          PICK UP NIB POINTER
         L     R6,4(,R8)           PICK UP CID
         SPACE
*
* FIND OUT THE RECORD TYPE.
*
         SPACE
         TM    PVMRTYPE,X'80'      CONTROL RECORD?
         BO    GTCNTROL            YUP.
         TM    PVMRTYPE,X'40'      SIGNON/OFF?
         BO    GTSIGN
         TM    PVMRTYPE,X'20'      GRAPHIC DATA?
         BO    GTGDATA
         TM    PVMRTYPE,X'10'      NON-GRAPHIC DATA?
         BO    GTDATA
         TM    PVMRTYPE,X'08'      NETWORK QUERY?
         BO    GTQUERY
         B     NXTREC              CHUCK THE RECORD AWAY.
         EJECT
GTCNTROL EQU   *
* THIS IS A CONTROL RECORD.
* CHECK THE SUBTYPE.
         TM    PVMSTYPE,X'40'      LINE STARTUP?
         BO    GCSTRTUP
         TM    PVMSTYPE,X'20'      LINE SHUTDOWN?
         BO    GCSHUTD
         TM    PVMSTYPE,X'10'      REQUEST FOR SIGNON?
         BO    GCSGNON
         TM    PVMSTYPE,X'08'      RESPONSE TO SIGNON?
         BO    GCSGNRSP
         TM    PVMSTYPE,X'04'      SESSION TERMINATION?
         BO    GCTERM
         TM    PVMSTYPE,X'02'      CMD/MSG/REPLY
         BO    GCMSG
         B     NXTREC              CHUCK IT AWAY.
         SPACE
GCSGNRSP EQU   *
* SIGNON RESPONSE.
* STORE LDEV ADDR IN LUB.
         SPACE
         MVC   LUBUSER,PVMSUSER    INSERT LDEV ADDR IN LUB
         B     NXTREC
         SPACE
GCTERM   EQU   *
* SESSION TERMINATION.
* DO A CLSDST.
* REMOVE THE LUB FROM THE CHAIN, AND FREE IT.
         SPACE
         TM    LUBFLAGS,LUBDUMMY   IF NO LUB EXISTS...
         BO    NXTREC              ...DO NOWT.
         SPACE
         CLSDST RPL=SENDRPL,                                           *
               ARG=(R6),                                               *
               OPTCD=SYN
*
* SHOULD GET CONTROL OF LUBS
*
         MVC   0(4,R7),LUBNEXT     MOVE CHAIN POINTER BACK.
*
* SHOULD RELEASE CONTROL OF LUBS
*
         FREEMAIN R,               FREE THE LUB                        *
               LV=LUBLEN,                                              *
               A=(R4)
         SPACE
         B     NXTREC              DONE WITH THIS RECORD.
         SPACE 2
GCSGNON  EQU   *
* SOMEBODY IS TRYING TO SIGN ON TO ME.
* KICK HIM IN THE BALLS.
         LA    R7,L'NOSOINFO       MESSAGE LENGTH
         ST    R7,RECLEN           ..STORE IT HERE.
         MVC   OUTDATA(L'NOSOINFO),NOSOINFO
         MVI   OUTTYPE+1,X'04'     'SESSION TERMINATION'
         MVC   OUTLUNAM,PVMDUSER
GCREPLYC EQU   *
         OI    FLAGS,REPLYING      SHOW PARTIAL RECORD EXISTS
         MVI   OUTTYPE,X'80'
         MVC   OUTDNODE,PVMSNODE
         MVC   OUTDTASK,PVMSUSER
         ST    R5,REPLYR5
         LA    R5,OUTREC           POINT AT RECORD TO GIVE TO CTCA.
         BAL   R10,QIO             GO SEND REPLY
         POST  EXITECB             PROD OTHER THREAD
         L     R5,REPLYR5
         NI    FLAGS,255-REPLYING  TURN FLAG OFF AGAIN
         B     NXTREC              DONE WITH THIS RECORD.
         EJECT
GCMSG    EQU   *
GTQUERY  EQU   *
         CLI   PVMDATA,C'M'        TEST FOR MESSAGE...
         BE    GCMESSAG            BRANCH IF IT IS.
         CLI   PVMDATA,C'C'        TEST FOR COMMAND...
         BE    GCCOMMAN            BRANCH IF IT IS.
         B     NXTREC              IGNORE IT.
GCMESSAG EQU   *
         MVC   GCMESW1D,PVMSNODE
         MVC   GCMESW2L,PVMRECL
         CLC   PVMRECL,MAXWTO
         BL    GCLENOK
         MVC   GCMESW2L,MAXWTO
GCLENOK  EQU   *
         LH    R7,GCMESW2L
*        BCTR  R7,0
         SH    R7,=H'9'
         EX    R7,GCMESW2M         MOVE MESSAGE DATA IN
         LA    R7,1(,R7)
         STH   R7,GCMESW2L
GCMESW1  WTO   'MESSAGE FROM XXXXXXXXYYYYYYYY:'
GCMESW1D EQU   GCMESW1+21,16
GCMESW2  WTO   '1234567890123456789012345678901234567890'
GCMESW2L EQU   GCMESW2+4,2
GCMESW2D EQU   GCMESW2+8,40
         B     NXTREC              IGNORE IT.
GCCOMMAN EQU   *
         MVC   OUTLUNAM,=CL8'SYSTEM'
         MVC   NOTPVMND,PVMSUSER
         LA    R7,LNOTAPVM         MESSAGE LENGTH
         ST    R7,RECLEN           ..STORE IT HERE.
         MVC   OUTDATA(LNOTAPVM),NOTAPVM
         MVI   OUTTYPE+1,X'02'     'REPLY'
         B     GCREPLYC
         EJECT
GTDATA   EQU   *
GTGDATA  EQU   *
* DATA RECORD.
         SPACE
         LH    R7,PVMRECL          GET DATA LENGTH
         SPACE
         TM    PVMDATA,X'02'       IS IS A READ-TYPE COMMAND?
         BO    WATCHEB             ..YES-SEND BRACKETS SEPARATELY.
         SPACE
         CLI   PVMDATA,X'0F'
         BNE   NOT0F
         MVI   PVMDATA,X'6F'
         B     PUSHOUT
NOT0F    EQU   *
         CLI   PVMDATA,X'0D'
         BNE   NOT0D
         MVI   PVMDATA,X'7E'
         B     PUSHOUT
NOT0D    EQU   *
         OI    PVMDATA,X'F0'
PUSHOUT  EQU   *
         TM    LUBFLAGS,LUBRULIM   IF RU SIZE NOT LIMITED...
         BZ    SENDALL             ...SEND THE LOT OUT.
         CH    R7,LUBRUSIZ         IF LE LIMIT...
         BNH   SENDALL             ...SEND THE LOT OUT.
         LH    R2,LUBRUSIZ         PICK UP LIMIT...
         SEND  RPL=SENDRPL,        SEND OUT CTCA DATA                  *
               ARG=(R6),                                               *
               AREA=PVMDATA,                                           *
               RECLEN=(R2),                                            *
               STYPE=REQ,                                              *
               CONTROL=DATA,                                           *
               CODESEL=STANDARD,                                       *
               POST=RESP,                                              *
               ECB=INTERNAL,                                           *
               BRACKET=(BB,EB),                                        *
               CHAIN=FIRST,        FIRST IN THE CHAIN                  *
               RESPOND=(EX,FME,NRRN,NQRESP),                           *
               RTYPE=(DFSYN,DFASY,RESP),                               *
               OPTCD=(SYN,CA)
         LA    R9,PVMDATA          POINT AT DATA
NEXTLINK EQU   *
         AR    R9,R2               BUMP DATA POINTER
         SR    R7,R2               DECREMENT RESIDUAL COUNT
         CR    R7,R2               TIME TO DO LAST LINK IN CHAIN YET?
         BNH   LASTLINK            YUP - GO DO IT.
         SEND  RPL=SENDRPL,        SEND OUT NEXT LINK IN CHAIN         *
               ARG=(R6),                                               *
               AREA=(R9),                                              *
               RECLEN=(R2),                                            *
               STYPE=REQ,                                              *
               CONTROL=DATA,                                           *
               CODESEL=STANDARD,                                       *
               POST=RESP,                                              *
               ECB=INTERNAL,                                           *
               CHAIN=MIDDLE,       FIRST IN THE CHAIN                  *
               RESPOND=(EX,FME,NRRN,NQRESP),                           *
               RTYPE=(DFSYN,DFASY,RESP),                               *
               OPTCD=(SYN,CA)
         B     NEXTLINK            GO SEND NEXT LINK IN CHAIN
LASTLINK EQU   *
         SEND  RPL=SENDRPL,        SEND OUT LAST LINK IN CHAIN         *
               ARG=(R6),                                               *
               AREA=(R9),                                              *
               RECLEN=(R7),                                            *
               STYPE=REQ,                                              *
               CONTROL=DATA,                                           *
               CODESEL=STANDARD,                                       *
               POST=RESP,                                              *
               ECB=INTERNAL,                                           *
               CHAIN=LAST,         FIRST IN THE CHAIN                  *
               RESPOND=(NEX,FME,NRRN,NQRESP),                          *
               RTYPE=(DFSYN,DFASY,RESP),                               *
               OPTCD=(SYN,CA)
         B     NXTREC
SENDALL  EQU   *
         SEND  RPL=SENDRPL,        SEND OUT CTCA DATA                  *
               ARG=(R6),                                               *
               AREA=PVMDATA,                                           *
               RECLEN=(R7),                                            *
               STYPE=REQ,                                              *
               CONTROL=DATA,                                           *
               CODESEL=STANDARD,                                       *
               POST=RESP,                                              *
               ECB=INTERNAL,                                           *
               BRACKET=(BB,EB),                                        *
               CHAIN=ONLY,                                             *
               RESPOND=(NEX,FME,NRRN,NQRESP),                          *
               RTYPE=(DFSYN,DFASY,RESP),                               *
               OPTCD=(SYN,CA)
         B     NXTREC
         SPACE
WATCHEB  EQU   *
         SPACE
         SEND  RPL=SENDRPL,        SEND OUT BEGIN BRACKET.             *
               ARG=(R6),                                               *
               RECLEN=0,                                               *
               STYPE=REQ,                                              *
               CONTROL=DATA,                                           *
               CODESEL=STANDARD,                                       *
               POST=RESP,                                              *
               ECB=INTERNAL,                                           *
               CHAIN=ONLY,                                             *
               BRACKET=(BB,NEB),                                       *
               RESPOND=(NEX,FME,NRRN,NQRESP),                          *
               RTYPE=(DFSYN,DFASY,RESP),                               *
               OPTCD=(SYN,CA)
         SPACE
         OI    PVMDATA,X'F0'       FRIG COMMAND CODE
         CLI   PVMDATA,X'F2'       IS IT A 'READ BUFFER' ...
         BNE   SDATANOB            ..NO-JUST SEND DATA.
         OI    LUBFLAGS,LUBFRBUF   ..YES-SET FLAG IN LUB.
SDATANOB EQU   *
         SEND  RPL=SENDRPL,        SEND OUT CTCA DATA                  *
               ARG=(R6),                                               *
               AREA=PVMDATA,                                           *
               RECLEN=(R7),                                            *
               STYPE=REQ,                                              *
               CONTROL=DATA,                                           *
               CODESEL=STANDARD,                                       *
               POST=RESP,                                              *
               ECB=INTERNAL,                                           *
               CHAIN=ONLY,                                             *
               BRACKET=(NBB,NEB),   WITH NO BRACKETS.                  *
               RESPOND=(NEX,FME,NRRN,NQRESP),                          *
               RTYPE=(DFSYN,DFASY,RESP),                               *
               OPTCD=(SYN,CA)
         SPACE
         SEND  RPL=SENDRPL,        SEND OUT END BRACKET.               *
               ARG=(R6),                                               *
               RECLEN=0,                                               *
               STYPE=REQ,                                              *
               CONTROL=DATA,                                           *
               CODESEL=STANDARD,                                       *
               POST=RESP,                                              *
               ECB=INTERNAL,                                           *
               CHAIN=ONLY,                                             *
               BRACKET=(NBB,EB),                                       *
               RESPOND=(NEX,FME,NRRN,NQRESP),                          *
               RTYPE=(DFSYN,DFASY,RESP),                               *
               OPTCD=(SYN,CA)
         SPACE
         B     NXTREC
         SPACE
*****************************
GCSTRTUP EQU   *
GCSHUTD  EQU   *
GTSIGN   EQU   *
*****************************
NXTREC   EQU   *
         AH    R5,PVMRECL          POINT AT ....
         LA    R5,PVMRHLEN(,R5)    ....NEXT RECORD.
         BCT   R3,GRECORD          BACK TO PROCESS NEXT RECORD
         SPACE
* ALL RECORDS IN THE BLOCK HAVE NOW BEEN PROCESSED.
         DROP  R5
         USING PVMBLOCK,R5
SREXIT   EQU   *
         B     MULTWAIT            RETURN
         EJECT
DUMP     EQU   *
         ABEND 1,DUMP
         EJECT
GOTEXIT  EQU   *
**********************************************************************
*
* A VTAM EXIT ROUTINE HAS QUEUED A RECORD TO BE SENT DOWN THE CTCA.
*
**********************************************************************
         SPACE
*
* SHOULD GET CONTROL OF Q
*
*
         ICM   R6,B'1111',EXITQA   GET RECORD ADDR
         BNE   GEUNCH              ..IT EXISTS..UNCHAIN IT.
         XC    EXITECB,EXITECB     ..IT DOESN'T EXIST..RESET ECB
*
* SHOULD RELEASE CONTROL OF Q
*
         B     MULTWAIT            ..........WAIT.
         SPACE
GEUNCH   EQU   *
         MVC   EXITQA,0(R6)        UNCHAIN IT.
*
*
* SHOULD RELEASE CONTROL OF Q
*
         L     R7,4(,R6)           PICK UP GOTTEN LENGTH
         SH    R7,=H'9'            GET BLOCK LEN -1
         LA    R5,OUTREC           POINT AT OUTWARD RECORD
         EX    R7,EMOVEOUT         MOVE DATA
         SH    R7,=Y(PVMBLOCK-PVMDATA-1) GET RECORD LENGTH
         ST    R7,RECLEN           STORE IT HERE
         SPACE
         L     R7,4(,R6)           PICK UP GOTTEN LENGTH
         FREEMAIN R,               FREE RECORD AREA.                   *
               A=(R6),                                                 *
               LV=(R7)
         SPACE
         OI    FLAGS2,NORECV       NO FURTHER RECEIVE REQUIRED
         B     RECDONE             GO WRITE THE DATA
         EJECT
***********************************************************************
**                                                                   **
**  ROUTINE TO CONVERT BINARY INTO PRINTABLE HEX CHARACTERS.         **
**  AT ENTRY - R6 POINTS AT SOURCE AREA                              **
**             R7 POINTS AT TARGET AREA                              **
**             R2 CONTAINS LENGTH OF SOURCE AREA                     **
**                (I.E. HALF THE LENGTH OF TARGET AREA)              **
**            R14 CONTAINS THE RETURN ADDRESS                        **
**                                                                   **
**                                                                   **
***********************************************************************
         SPACE
HEX      EQU   *
         SLL   R2,1                GET TARGET LENGTH
         LA    R15,0(R2,R7)        POINT AT CHAR WHICH WILL BE DUFFED
         ICM   R15,B'1000',0(R15)  AND SAVE IT IN HIGH BYTE.
HEXNEXT  EQU   *
         CH    R2,H8               IF LENGTH LT 8...
         BL    HEXEXS              ..DO THE EXECUTES.
         UNPK  0(9,R7),0(5,R6)     UNPACK NEXT FOUR BYTES
         TR    0(8,R7),HEXTAB-C'0' TRANSLATE INTO PRINTABLE.
         LA    R7,8(,R7)           BUMP TARGET POINTER
         LA    R6,4(,R6)           BUMP SOURCE POINTER
         SH    R2,H8               DECREMENT LENGTH
         B     HEXNEXT             ...DO NEXT 4 BYTES.
HEXEXS   EQU   *
         LTR   R1,R2               COPY RESIDUAL LENGTH
         BZ    HEXEXIT             EXIT IF ITS ZERO
         SLL   R1,5                SHUFFLE IT UP 5 BITS
         AR    R1,R2               ADD IN R2
         SRL   R1,1                SHUFFLE DOWN 1 BIT
         BCTR  R2,0                DECREMENT FOR EXECUTE
         EX    R1,HEXUNPK          VARIABLE LENGTH UNPACK
         EX    R2,HEXTR            VARIABLE LENGTH TRANSLATE
HEXEXIT  EQU   *
         STCM  R15,B'1000',0(R15)  RESTORE DUFFED CHAR
         BR    R14
         EJECT
***********************************************************************
**                                                                   **
**  JOB TERMINATION.
**                                                                   **
**                                                                   **
**                                                                   **
**                                                                   **
***********************************************************************
         SPACE
EOJ      EQU   *
         SPACE
         WTO   'VTAM/VM CONNECTION ENDING'
         CLOSE ACB
         L     R13,4(,R13)         HSA
         LA    R15,0               RC
         L     R14,12(,R13)        RETURN POINT
         LM    R0,R12,20(R13)      RESTORE CALLER'S REGS
         MVI   12(R13),X'FF'       SHOWS SUCCESSFUL RETURN
         BR    R14                 ... AND GET OUT.
         SPACE 3
         EJECT
***********************************************************************
**                                                                   **
**  'MODIFY' ROUTINES.                                               **
**                                                                   **
**                                                                   **
**                                                                   **
**                                                                   **
***********************************************************************
         SPACE
MDUMP    EQU   *
* DUMP REQUIRED
         ABEND 1,DUMP              DIE.
         SPACE
MLUON    EQU   *
* LU TRACE START
         OI    FLAGS,LUTRACE       SET FLAG
         WTO   'LU TRACE ACTIVE'
         BR    R10
         SPACE
MLUOFF   EQU   *
* LU TRACE END
         NI    FLAGS,255-LUTRACE   RESET FLAG
         WTO   'LU TRACE INACTIVE'
         BR    R10
         SPACE
         AIF   ('&LUTAB' EQ '').LUTX6
MRELOAD  EQU   *
* RE-LOAD THE LU TABLE
         DELETE EPLOC=LUTABLE      DELETE OLD ONE
         LOAD  EPLOC=LUTABLE       LOAD NEW ONE
         ST    R0,ALUTABLE         AND SAVE ITS ADDR
         WTO   'LU TABLE RELOADED'
         BR    R10
         SPACE
.LUTX6   ANOP
MINVAL   EQU   *
* INVALID VERB
         WTO   'MODIFY INVALID'
         BR    R10
         EJECT
***********************************************************************
**                                                                   **
**  VTAM LOGON EXIT ROUTINE.                                         **
**                                                                   **
**                                                                   **
**                                                                   **
**                                                                   **
***********************************************************************
         SPACE
         PUSH  USING               STACK 'USING'.
LOGON    EQU   *
         DROP  R11,R12
         USING *,R15
         LM    R11,R12,BASEREGS    PICK UP BASE REGS
         POP   USING               BACK TO OLD 'USING'
         LA    R13,LOGSAVE         POINT AT A SAVEAREA
         ST    R14,LOGR14          SAVE VTAM RETURN POINT
         OI    EXFLAGS,LOGNFLAG    SET FLAG
         LM    R2,R7,0(R1)         PICK UP POINTERS
         STM   R2,R7,LOGWORD1      SAVE THEM
         LA    R5,EXIREC           POINT AT RECORD TO GIVE TO CTCA.
         MVC   PVMSUSER,0(R3)      INSERT LUNAME
         GETMAIN R,                GET ANOTHER LUBLOK                  *
               LV=LUBLEN
         LR    R4,R1               POINT AT NEW LUBLOK
         XC    LUB(LUBLEN),LUB     INITIALISE LUB.
         MVC   LUBNAME,PVMSUSER    INSERT LU NAME
         SPACE
         GENCB AM=VTAM,            GENERATE A NIB                      *
               BLK=NIB,                                                *
               MODE=RECORD,                                            *
               NAME=(*,0(R3)),     INSERT LU NAME IN IT                *
               PROC=CA,                                                *
               USERFLD=(R4)        PUT A(LUBLOK) IN USERFLD
         SPACE
         LR    R8,R1               PICK UP NIB POINTER
         XC    REQDNODE,REQDNODE
         SPACE
         INQUIRE RPL=LOGONRPL,                                         *
               NIB=(R8),           NIB                                 *
               AREA=REQDNODE,                                          *
               AREALEN=L'REQDNODE
         SPACE
         MVC   LUBNODE,PVMID       DEFAULT PVM NODE.
         OC    REQDNODE,BLANKS     CHANGE TO UPPERCASE
         CLC   REQDNODE,BLANKS     IF NODE NOT SPECIFIED...
         BE    NODEOK              ...LEAVE DEFAULT NODE.
         MVC   LUBNODE,REQDNODE    ELSE INSERT SPECIFIED NODE.
NODEOK   EQU   *
         MVC   LUBUSER,BLANKS      NO USER ID YET.
         MVC   EXIDESTN,LUBNODE    INSERT SPECIFIED NODE.
         MVC   EXIDESTT,LUBUSER    BLANK OUT TASKID.
* NOW GET THE SESSION PARAMETERS
         SPACE
         INQUIRE RPL=LOGONRPL,                                         *
               OPTCD=SESSPARM,     GET LENGTH OF SESSION PARAMETERS    *
               AREALEN=0
         SPACE
         SHOWCB AM=VTAM,                                               *
               RPL=LOGONRPL,                                           *
               FIELDS=RECLEN,      GET LENGTH OF SESSION PARAMETERS... *
               AREA=RECLEN,        ..IN THIS FIELD                     *
               LENGTH=4
         SPACE
         L     R6,RECLEN
         GETMAIN R,                GET AREA FOR SESSION PARMS          *
               LV=(R6)
         LR    R9,R1               POINT AT AREA
         USING ISTDBIND,R9         GET ADDRESSABILITY
         SPACE
         INQUIRE RPL=LOGONRPL,                                         *
               OPTCD=SESSPARM,     GET SESSION PARAMETERS              *
               AREA=ISTDBIND,                                          *
               AREALEN=(R6)
         ST    R9,BINDA
         SPACE
         OPNDST RPL=LOGONRPL,      OPEN IT UP                          *
               NIB=(R8),                                               *
               OPTCD=(SYN,ACCEPT,CA)
         SPACE
         TESTCB AM=VTAM,           FIND OUT IF OPNDST WORKED           *
               NIB=(R8),                                               *
               CON=YES,                                                *
               ERET=LUDUFF
         BE    LUOPENED
         SPACE
LUDUFF   EQU   *
* THE LU HASN'T OPNDSTED SATISFACTORILY.
         MVC   LUDWTO+25(8),12(R8)
LUDWTO   WTO   'OPNDST FAILED LU=XXXXXXXX'
         CLSDST RPL=LOGONRPL,                                          *
               NIB=(R8),                                               *
               OPTCD=(SYN,RELEASE)
*** SHOULD FREE LUB + NIB
         B     EXITEXIT            JUST EXIT.
         SPACE
LGOTHIM  EQU   *
* SOMEONE IS LOGGING ON...
* BUT WE DIDN'T KNOW HE HAD LOGGED OFF.
* DON'T SEND ANYTHING TO PVM, BUT ACCEPT HIS LOGON.
*
* SHOULD RELEASE CONTROL OF LUBS
*
         FREEMAIN R,               FREE THE NEW LUB                    *
               LV=LUBLEN,                                              *
               A=(R4)
         SPACE
         LR    R4,R9               POINT AT OLD LUB
         L     R7,BINDA            POINT AT BINDAREA.
         L     R6,RECLEN
         FREEMAIN R,               FREE UP BINDAREA                    *
               A=(R7),                                                 *
               LV=(R6)
         SPACE
         MODCB AM=VTAM,            MODIFY NIB                          *
               NIB=(R8),                                               *
               USERFLD=(R9)        PUT A(OLD LUBLOK) IN USERFLD
         SPACE
         ST    R8,LUBNIBA          INSERT NEW NIB ADDRESS IN OLD LUB
         B     EXITEXIT            ...BACK TO VTAM.
         SPACE
LUOPENED EQU   *
* THE LU HAS BEEN OPNDSTED SATISFACTORILY.
* ADD THE LUB ONTO THE END OF THE CHAIN.
*
* SHOULD GET CONTROL OF LUBS
*
         LA    R6,LUBROOT          POINT AT A(FIRST LUB)
CHAINLUB EQU   *
         LR    R9,R6               POINT AT NEXT LUB
         CLC   LUBNAME,4(R9)       ALREADY AWARE OF HIM?
         BE    LGOTHIM             ...YES - BRANCH
         ICM   R6,B'1111',0(R9)    TEST CHAIN POINTER
         BNE   CHAINLUB            ...BACK IF NOT AT END OF CHAIN
* R9 IS NOW POINTING AT THE LAST LUB.
         ST    R4,0(,R9)           CHAIN NEW LUBLOK
         ST    R8,LUBNIBA          INSERT NIB ADDRESS
*
* SHOULD RELEASE CONTROL OF LUBS
*
         SPACE
**
** NOW EXAMINE THE SESSION PARAMETERS TO FIND OUT THE MAXIMUM
** RU SIZE WHICH WE CAN SEND TO THE LU.
**
         L     R9,BINDA            POINT AT BINDAREA.
         XR    R7,R7               CLEAR WORK REG
         ICM   R7,1,BINPRUSZ       PICK UP MAX RU SIZE
         BZ    LGOTRUSZ            BRANCH IF NOT THERE.
         LR    R6,R7               PUT IT HERE AS WELL
         SRL   R7,4                GET MANTISSA
         N     R6,=A(15)           GET EXPONENT
         SLL   R7,0(R6)            GET REAL VALUE IN R7
         STH   R7,LUBRUSIZ         SAVE SIZE LIMIT IN LUB
         BZ    LGOTRUSZ            BRANCH IF IT ENDS UP AS 0
         OI    LUBFLAGS,LUBRULIM   SET 'RU SIZE LIMITED' FLAG
LGOTRUSZ EQU   *
         SPACE
**
** NOW EXAMINE THE SESSION PARAMETERS TO FIND OUT THE SCREEN
** DEVICE TYPE AND MODEL NUMBER.
**
         MVI   PVMDATA+6,X'40'     GRAPHICS - SURELY THEY ALL ARE
         SPACE
         MVI   PVMDATA+7,X'01'     SAY ITS A 3278.
         CLI   BINFM,2             TEST FOR 3277...
         BNE   LGOTYP              ...BRANCH IF NOT.
         MVI   PVMDATA+7,X'04'     SAY ITS A 3277
         MVI   PVMDATA+8,2         DEFAULT TO A MODEL 2.
         B     LGOTMODL            ...LEAVE IT AS M2.
LGOTYP   EQU   *
         AIF   ('&LUTAB' EQ '').LUTX1
         CLI   BINPRESZ,0          ANYTHING IN PSERVIC?
         BE    LOOKTAB             NO - GO DO TABLE LOOKUP.
.LUTX1   ANOP
* FIND OUT THE MODEL NUMBER FROM THE SCREEN SIZE IN PSERVIC
         SPACE
         MVI   PVMDATA+8,3         SAY ITS A MODEL 3.
         CLC   BINSALTR(2),=AL1(32,80) TEST FOR 32X80 (MODEL 3)
         BE    LGOTMODL            YES - LEAVE IT AS M3.
         SPACE
         MVI   PVMDATA+8,4         SAY ITS A MODEL 4
         CLC   BINSALTR(2),=AL1(43,80) TEST FOR 43X80 (MODEL 4)
         BE    LGOTMODL            YES - LEAVE IT AS M4
         SPACE
         AIF   (NOT &MODEL5).M5Z
         MVI   PVMDATA+8,5         SAY ITS A MODEL 5.
         CLC   BINSALTR(2),=AL1(27,132) TEST FOR 27X132 ( MODEL 5 )
         BE    LGOTMODL            YES - LEAVE IT AS M5
.M5Z     ANOP
         SPACE
         MVI   PVMDATA+8,2         DEFAULT TO A MODEL 2.
         AIF   ('&LUTAB' EQ '').LUTX2
         B     LGOTMODL            ...LEAVE IT AS M2.
         SPACE
LOOKTAB  EQU   *
**
** NOTHING DEFINED IN PSERVIC.
** LOOK UP THE TABLE OF LUNAMES/DEVICE TYPES
**
**
         L     R6,ALUTABLE
DEVNEXT  EQU   *
         LA    R6,12(,R6)          NEXT TABLE ENTRY
         CLI   0(R6),X'FF'         TEST FOR FENCE...
         BE    DEVNO               BRANCH IF AT FENCE.
         CLC   LUBNAME,0(R6)       TEST FOR CORRECT LU...
         BNE   DEVNEXT             BACK IF NOT GOT IT YET.
* GOT IT.
DEVEND   EQU   *
         MVC   PVMDATA+6(2),10(R6) INSERT CLASS/TYPE
         MVC   PVMDATA+8(1),9(R6)  INSERT MODEL
.LUTX2   ANOP
LGOTMODL EQU   *
         L     R6,RECLEN
         FREEMAIN R,               FREE UP BINDAREA                    *
               A=(R9),                                                 *
               LV=(R6)
         SPACE
         MVI   PVMRTYPE,X'80'      TYPE    - CONTROL.
         MVI   PVMSTYPE,X'04'      SUBTYPE - SESSION TERMINATION
         MVC   PVMDATA(6),=X'FF004F02F01D'
         LA    R6,9                SET UP...
         ST    R6,RECLEN           ...RECORD LENGTH 4.
         BAL   R10,QIO             END ANY PREVIOUS SESSION...
         SPACE
         MVI   PVMSTYPE,X'10'      SUBTYPE - REQ.FOR SIGNON
         NI    EXFLAGS,255-LOGNFLAG RESET FLAG
         SPACE
EXITQIO  EQU   *
         BAL   R10,QIO
         POST  EXITECB             TELL THE MAINLINE
EXITEXIT EQU   *
         L     R14,LOGR14          REGAIN R14
         BR    R14                 RETURN TO VTAM.
         AIF   ('&LUTAB' EQ '').LUTX8
DEVNO    EQU   *
* NO CORRESPONDING LU. USE THE FIRST ONE IN THE TABLE.
         L     R6,ALUTABLE
         B     DEVEND
.LUTX8   ANOP
LUMP     ABEND 3,DUMP
         EJECT
QIO      EQU   *
**** GETMAIN AN AREA FOR THE RECORD
         LA    R6,PVMDATA-PVMBLOCK+8 BASIC LENGTH
         A     R6,RECLEN           BUT ADD RECLEN
         GETMAIN R,                                                    *
               LV=(R6)
         LR    R7,R1               POINT AT GOTTEN AREA
         SPACE
         XC    0(4,R1),0(R7)       ZEROISE CHAIN POINTER
         ST    R6,4(,R7)           SAVE GOTTEN LENGTH
         SH    R6,=H'9'            ADJUST
         EX    R6,EXITMOVE         MOVE DATA TO GOTTEN AREA
*
*
* SHOULD GET CONTROL OF Q
*
         LA    R6,=A(EXITQA)       POINT AT EXIT QUEUE ADDRESS
LQNEXT   EQU   *
         L     R6,0(,R6)           POINT AT NEXT IN Q
         OC    0(4,R6),0(R6)       TEST FOR END OF QUEUE
         BNE   LQNEXT              ..NOPE - TRY NEXT ONE.
* GOT THE END OF CHAIN. ADD THIS ONE ON.
         ST    R7,0(,R6)
*
*
* SHOULD RELEASE CONTROL OF Q
*
         BR    R10
         EJECT
***********************************************************************
**                                                                   **
**  VTAM ENDING EXIT ROUTINE.                                        **
**                                                                   **
**                                                                   **
**                                                                   **
**                                                                   **
***********************************************************************
         SPACE
ZNET     EQU   *
         PUSH  USING
         DROP  R11,R12
         USING *,R15
         POST  TPENDECB
         BR    R14
         POP   USING
         EJECT
         PUSH  USING
RESP     EQU   *
         USING *,R11
         LR    R11,R15
         BR    R14
         POP   USING
         EJECT
         PUSH  USING               STACK 'USING'.
LOSTERM  EQU   *
         SPACE
***********************************************************************
**                                                                   **
**  LOSTERM EXIT ROUTINE.                                            **
**  DROP THE LU FROM PASSTHRU,                                       **
**   LEAVING IT IN 'FORCE-DISCONNECT' MODE.                          **
**                                                                   **
**                                                                   **
***********************************************************************
         SPACE
         DROP  R11,R12
         USING *,R15
         LM    R11,R12,BASEREGS    PICK UP BASE REGS
         POP   USING               BACK TO OLD 'USING'
         LA    R13,LOGSAVE         POINT AT A SAVEAREA
         ST    R14,LOGR14          SAVE VTAM RETURN POINT
         OI    EXFLAGS,LOSTFLAG    SET 'IN LOSTERM EXIT' FLAG
         L     R4,8(,R1)           POINT AT LUB (USERFIELD)
         L     R6,4(,R1)           POINT AT CID
         L     R8,LUBNIBA          PICK UP NIB POINTER
         TM    LUBFLAGS,LUBDUMMY   IF NO LUB EXISTS...
         BO    EXITEXIT            ...DO NOWT.
         SPACE
         CLSDST RPL=LOGONRPL,                                          *
               ARG=(R6),                                               *
               OPTCD=(RELEASE,SYN)
         SPACE
         LA    R5,EXIREC           POINT AT RECORD TO GIVE TO CTCA.
         MVC   PVMSUSER,LUBNAME    INSERT LUNAME IN RECORD
         MVC   PVMDNODE,LUBNODE    DESTINATION NODE
         MVC   PVMDUSER,LUBUSER    PVM USERID
         MVI   PVMRTYPE,X'80'      TYPE    - CONTROL.
         MVI   PVMSTYPE,X'04'      SUBTYPE - SESSION TERMINATION.
         SPACE
*
* SHOULD GET CONTROL OF LUBS
*
         L     R7,LUBROOT          NOW FREE THE LUB...
LTRM010  EQU   *
         LTR   R7,R7               IF R7 NOW ZERO...
         BZ    LTRMXX              ...GIVE UP.
         CLM   R4,B'0111',1(R7)
         BE    LTRM030
         L     R7,0(,R7)           NEXT LUB
         B     LTRM010
LTRMXX   EQU   *
*
* SHOULD RELEASE CONTROL OF LUBS
*
         B     EXITEXIT
         SPACE
LTRM030  EQU   *
         MVC   0(4,R7),LUBNEXT     MOVE CHAIN POINTER BACK.
*
* SHOULD RELEASE CONTROL OF LUBS
*
         SPACE
         FREEMAIN R,               FREE THE LUB                        *
               LV=LUBLEN,                                              *
               A=(R4)
         LA    R6,9                SET UP...
         ST    R6,RECLEN           ...RECORD LENGTH 4.
         NI    EXFLAGS,255-LOSTFLAG RESET 'IN LOSTERM EXIT' FLAG
         B     EXITQIO             GO QUEUE I/O
         EJECT
CTCAIO   EQU   *
* DO I/O TO THE CTCA.
* R6 POINTS AT THE CHANNEL PROGRAM.
         OI    FLAGS2,DOINGIO      SET FLAGS
         STCM  R6,B'0111',IOBSTART PUT CCW ADDR IN IOB
         SPACE
         OI    IOFLAGS,IOCHNG      SET THIS FLAG
         OI    IOFLAGS,IOSTART     SET THIS FLAG
         NI    IOFLAGS,255-IOSTOP  RESET THIS FLAG
         NI    IOFLAGS,255-IOFIDDLE RESET THIS FLAG
         XC    CTCAECB,CTCAECB     RESET ECB
         EXCP  IOB                 DO THE CTCA I/O
         WAIT  ECB=CTCAECB         WAIT ON COMPLETION
         OI    IOFLAGS,IOSTOP      SET THIS FLAG
         NI    IOFLAGS,255-IOOUTSTA RESET 'OUTSTANDING' FLAG
         NI    FLAGS2,255-DOINGIO      SET FLAGS
         SPACE
         BR    R14
         SPACE
         EJECT
TIMEREX  EQU   *
         SPACE
***********************************************************************
**                                                                   **
**  TIMER EXIT ROUTINE.                                              **
**  GETS DRIVEN EVERY SO OFTEN.                                      **
**  CHECKS UP ON THE STATE OF THE CTCA.....                          **
**                                                                   **
**  IF NOTHING HAS HAPPENED FOR AGES, DO A SENSE-COMMAND-BYTE        **
**  JUST TO MAKE SURE THAT WE HAVEN'T MISSED AN ATTENTION IRPT.      **
**                                                                   **
**  IF I/O HAS BEEN STARTED BUT HAS HUNG,                            **
**  PURGE IT THEN DO A SENSE-COMMAND-BYTE.                           **
**                                                                   **
***********************************************************************
         SPACE
         PUSH  USING
         USING *,R15
         STM   R14,R12,12(R13)     SAVE CALLER'S REGS
         LA    R11,TIMERSAV        POINT AT TIMER SAVEAREA
         ST    R13,4(,R11)         CHAIN HSA
         ST    R11,8(,R13)         CHAIN LSA
         LR    R13,R11             SAVEAREA
         LM    R11,R12,BASEREGS    PICK UP USUAL BASE REGS
         DROP  R15                 LIKE A TON OF BRICKS
         POP   USING               RESTORE USING
         SPACE
         LA    R9,INTERVAL         POINT AT NORMAL INTERVAL
         SPACE
         TM    IOFLAGS,IOOUTSTA    I/O STILL OUTSTANDING?
         BO    TIMEOUTS            ...YES - BRANCH.
         SPACE
         TM    IOFLAGS,IOCHNG      DONE ANYTHING SINCE LAST TIME?
         BZ    TIMECHEK            ..NO - CHECK UP ON THINGS.
         NI    IOFLAGS,255-IOIDLE  SHOW THAT WE'VE DONE SOMETHING
         SPACE
         TM    IOFLAGS,IOSTOP      I/O COMPLETED?
         BO    TIMEXIT             ...YES - DO NOWT.
         SPACE
* THUS I/O HAS STARTED BUT NOT FINISHED
* MIGHT BE NORMAL THOUGH, SO DON'T TAKE ANY ACTION TILL NEXT TIME.
* MAKE THE INTERVAL SHORTER HOWEVER, JUST IN CASE.
         OI    IOFLAGS,IOOUTSTA    SET FLAG FOR NEXT TIME.
         LA    R9,SHORTINT         LETS HAVE A SHORTER INTERVAL
         SPACE
TIMEXIT  EQU   *
         NI    IOFLAGS,255-IOCHNG  RESET 'CHANGED' FLAG.
         SPACE
         STIMER REAL,              RESTORE STIMER.                     *
               TIMEREX,                                                *
               DINTVL=(R9)
         SPACE
         L     R13,4(,R13)         HSA
         LA    R15,0               RC
         L     R14,12(,R13)        RETURN POINT
         LM    R0,R12,20(R13)      RESTORE CALLER'S REGS
         MVI   12(R13),X'FF'       SHOWS SUCCESSFUL RETURN
         BR    R14                 ... AND GET OUT.
         SPACE
TIMEOUTS EQU   *
* I/O HAS BEEN OUTSTANDING FOR A LONG TIME.
* CONSIDER IT DEAD. PURGE IT
         NI    IOFLAGS,255-IOOUTSTA RESET 'OUTSTANDING' FLAG.
         PURGE PURGLIST            GET RID OF THAT LAST I/O
         WTO   'OUTSTANDING I/O PURGED'
         OI    IOFLAGS,IOFIDDLE
         B     TIMESENS            GO DO SENSE
         SPACE
TIMECHEK EQU   *
* NO ACTIVITY OCCURRED FOR ONE STIMER INTERVAL.
         SPACE
         TM    IOFLAGS,IOIDLE      IF 'IDLE' FLAG IS ON...
         BO    TIMESENS            DO A SENSE.
         OI    IOFLAGS,IOIDLE      ELSE JUST TURN IT ON.
         B     TIMEXIT
TIMESENS EQU   *
* THERE HAS BEEN NO CTCA ACTIVITY FOR TWO CONSECUTIVE
* STIMER INTERVALS OR...
* ...A PURGE HAS JUST BEEN DONE.
* DO A SENSE-COMMAND-BYTE ON THE CTCA IN CASE WE'VE MISSED
* AN ATTENTION INTERRUPT.
         NI    IOFLAGS,255-IOIDLE  SHOW THAT WE'VE DONE SOMETHING
         MVI   COMMBYTE,0
         XC    CTCAXECB,CTCAXECB   RESET ECB
         EXCP  XIOB                DO SENSE-COMMAND-BYTE
         WAIT  ECB=CTCAXECB        WAIT ON COMPLETION
         SPACE
         CLI   COMMBYTE,0          TEST FOR GENUINELY NO ACTIVITY..
         BE    TIMEXIT             ..BRANCH IF SO.
         SPACE
         TM    ATTNECB,POSTED      IF ECB WAS POSTED VERY RECENTLY..
         BO    TIMEXIT             DON'T NEED TO DO ANYTHING.
         SPACE
         POST  ATTNECB             SIMULATE AN ATTENTION IRPT
         B     TIMEXIT             ..AND EXIT
         EJECT
ATTNRTN  EQU   *
*
* THIS ROUTINE IS POINTED AT BY THE SRB WHICH WAS INDICATED IN
* THE UCB DURING INITIALISATION.
* IT IS ENTERED AFTER AN ATTENTION INTERRUPT.
* ALL IT DOES IS TO POST 'ATTNECB' TO TELL THE MAINLINE.
* NOTE THAT A 'SENSE-COMMAND-BYTE' HAS ALREADY BEEN DONE BY MVS,
* AND THE COMMAND BYTE HAS BEEN PLACED IN THE IOSB (IOSSKBB)
*
         PUSH  USING
         USING *,R12
         LR    R12,R15             SETUP BASE REG
         ST    R14,ATTNRET         SAVE RETURN POINT ADDR
         LA    R13,ATTNSAVE        LOCAL SAVEAREA
         L     R3,FLCCVT           PICK UP CVT ADDRESS
         SPACE
* TURN OFF QUIESCE BIT IN UCB
         L     R10,UCBADDR         POINT AT UCB
         NI    6(R10),B'11111110'  TURN OFF QUIESCE BIT
         SPACE
         LR    R9,R0               SRB
         USING SRBSECT,R9          SRB ADDRESSABILITY
         L     R8,SRBPARM          IOSB
         USING IOSB,R8             IOSB ADDRESSABILITY
         SPACE
* PREPARE FOR BRANCH ENTRY POST.
         MVC   COMMBYTE,IOSSKBB    MOVE COMMAND BYTE.
         LA    R10,0               COMPLETION CODE
         LA    R11,ATTNECB         POINT AT ECB
         L     R15,CVT0PT01        BRANCH EP
         BALR  R14,R15             GO DO POST
         SPACE
         L     R14,ATTNRET         REGAIN RETURN POINT
         LA    R15,ATTNEXIT
        MVI   IOSUSE,0            UNLOCK THE IOSB
         BR    R14
ATTNEXIT EQU   *
         L     R3,SRBA             SRB
         L     R3,28(,R3)          IOSB
         MVI   32(R3),0            UNLOCK THE IOSB
         BR    R14
         POP   USING
ATTNRET  DS    F
ATTNSAVE DS    18F
         EJECT
* EXECUTED INSTRUCTIONS
MOVEPARM MVC   PARM(0),2(R2)       SAVE PARM
MODCLC   CLC   16(0,R3),0(R5)
HEXUNPK  UNPK  0(0,R7),0(0,R6)     UNPACK NEXT FOUR BYTES
HEXTR    TR    0(0,R7),HEXTAB-C'0' TRANSLATE INTO PRINTABLE.
GCMESW2M MVC   GCMESW2D(0),PVMDATA+4
EXITMOVE MVC   8(0,R7),0(R5)       MOVE EXIT RTN RECORD
EMOVEOUT MVC   0(0,R5),8(R6)       ..MOVE IT BACK.
         SPACE 3
* OS CONTROL BLOCKS
         SPACE
ACB      ACB   AM=VTAM,                                                *
               APPLID=APPLID,                                          *
               EXLST=VTMEXLST,                                         *
               MACRF=LOGON
         SPACE 2
VTMEXLST EXLST AM=VTAM,                                                *
               LOGON=LOGON,        LOGON EXIT                          *
               TPEND=ZNET,         VTAM ENDING EXIT RTN                *
               LOSTERM=LOSTERM,                                        *
               RESP=RESP           RESPONSE EXIT
         SPACE 5
MAINRPL  RPL   AM=VTAM,                                                *
               OPTCD=SYN,                                              *
               ACB=ACB
         SPACE 5
SENDRPL  RPL   AM=VTAM,            USED FOR SENDING                    *
               OPTCD=SYN,                                              *
               ACB=ACB
         SPACE 3
LOGONRPL RPL   AM=VTAM,            USED IN VTAM EXITS                  *
               ACB=ACB
         SPACE 5
CTCADCB  DCB   DDNAME=CTCA,                                            *
               MACRF=E,                                                *
               IOBAD=IOB,                                              *
               DEVD=DA             WELL, IT HAS TO BE SOMETHING.
         EJECT
         PRINT GEN
* CHANNEL PROGRAMS -
CTCACCWR CCW   RCTCA,READCTCA,SILI,4096+PVMHLEN
CNTRLWRT CCW   7,0,SILI+CC,1
CTCACCWW CCW   WCTCA,OUTREC,SILI,0
ACKCCW   CCW   7,0,SILI+CC,1
CCWACK   CCW   WCTCA,XACK0,SILI,2
CCWCNTRL CCW   7,0,SILI,1
CCWSGNR  CCW   RCTCA,SREC,SILI,L'SREC
*CWSGNW  CCW   7,0,SILI+CC,1
CCWSGNW  CCW   WCTCA,SREC,SILI,L'SREC
CCWSENSE CCW   X'14',COMMBYTE,SILI,1
CCWENAB  CCW   X'43',COMMBYTE,SILI,1
*XICCWW  CCW   7,0,SILI+CC,1
EXICCWW  CCW   WCTCA,EXIREC,SILI,0
* DOUBLEWORDS -
INTERVAL DC    0D'0',Z'00001500'   NORMAL CHECKUP INTERVAL
SHORTINT DC    0D'0',Z'00000500'   SHORT CHECKUP INTERVAL
* ECB LIST -
ECBLIST  DC    A(0)                A(STOP/MODIFY ECB)
         DC    A(TPENDECB)
         DC    A(RECVECB)
         DC    A(EXITECB)
         DC    A(CONTWECB)
         DC    X'80',AL3(ATTNECB)
* FULLWORDS -
BASEREGS DS    2F                  BASE REGS
         AIF   ('&LUTAB' EQ '').LUTX3
ALUTABLE DS    A                   A(LU TABLE)
.LUTX3   ANOP
UCBADDR  DS    A                   CTCA UCB ADDRESS
ATTNECB  DC    A(0)                ATTENTION ECB
TPENDECB DC    A(0)                VTAM ENDING ECB
RECVECB  DC    A(0)                RECEIVE ECB
EXITECB  DC    A(0)                EXIT ROUTINE ECB
CTCAECB  DC    A(0)                CTCA ECB
CTCAXECB DC    A(0)                ANOTHER CTCA ECB
CONTWECB DC    A(0)                'INTERRUPTED WRITE' ECB
POSTED   EQU   X'40'               'POSTED' FLAG IN ECB.
RBADDR   DS    F                   RB ADDRESS
BINDA    DS    F
WTOID    DS    F                   WTO ID.
REPLYR5  DS    F
*
LUBA     DS    F                   A(A LUB)
RECLEN   DS    F                   RECVD REC LEN (MUST FOLLOW 'LUBA')
*
EXTRAREA DS    0F                  'EXTRACT' RESULT LIST ...
TIOTA    DS    F                   TIOT POINTER
COMMA    DS    F                   POINTER TO COMMS ECB / CIB
         DS    H
ASID     DS    H                   ASID
*
PURGLIST DC    B'11100111'
PURGDEBA DS    AL3
         DC    X'00'
         DC    AL3(0)              A(TCB)
         DC    X'0'
         DC    AL3(PIRLA)
         DC    B'00000000'
         DC    X'00'
         DC    X'00'
PIRLA    DS    A
TIMERSAV DS    18F                 SAVEAREA FOR STIMER EXIT
WREGS    DS    16F                 REGS SAVED ON INTERRUPTED WRITE.
LOGSAVE  DS    18F                 LOGON EXIT ROUTINE SAVEAREA
LOGR14   DS    F                   R14 ON ENTRY TO LOGON EXIT
LOGWORD1 DS    F
LOGWORD2 DS    F
LOGWORD3 DS    F
LOGWORD4 DS    F
LOGWORD5 DS    F
LOGWORD6 DS    F
LUBROOT  DC    A(FIRSTLUB)         THE ROOT OF ALL LUBS
READADDR DC    A(READCTCA)         POINTER TO INPUT AREA
EXITQA   DC    A(0)                EXIT RTN QUEUE ROOT
SRBA     DS    A                   SRB ADDRESS
         SPACE 2
* IOB -
IOB      DS    0F
IOBFLAG1 DC    B'11000010'
IOBFLAG2 DC    B'00000000'
IOBSENS0 DS    X
IOBSENS1 DS    X
IOBECBCC DS    X
IOBECBPT DC    AL3(CTCAECB)
IOBFLAG3 DS    X
IOBCSW   DS    XL7
IOBSIOCC DS    X
IOBSTART DC    AL3(0)              A(CHANNEL PROGRAM)
         DS    X
IOBDCBPT DC    AL3(CTCADCB)
IOBRESTR DS    XL4
IOBINCAM DC    Y(0)
IOBERRCT DC    Y(0)
         DC    2A(0)
         SPACE 2
* TIMER EXIT IOB -
XIOB     DS    0F
XOBFLAG1 DC    B'11000010'
XOBFLAG2 DC    B'00000000'
XOBSENS0 DS    X
XOBSENS1 DS    X
XOBECBCC DS    X
XOBECBPT DC    AL3(CTCAXECB)
XOBFLAG3 DS    X
XOBCSW   DS    XL7
XOBSIOCC DS    X
XOBSTART DC    AL3(CCWSENSE)       A(CHANNEL PROGRAM)
         DS    X
XOBDCBPT DC    AL3(CTCADCB)
XOBRESTR DS    XL4
XOBINCAM DC    Y(0)
XOBERRCT DC    Y(0)
         DC    2A(0)
*
FIRSTLUB DC    A(0)                POINTER TO NEXT LUB
         DC    CL8'SYSTEM'         DUMMY LU NAME
         DC    CL8'SYSTEM'         DUMMY NODE NAME
         DC    CL8'SYSTEM'         DUMMY USER NAME
         DC    X'80'               FLAGS
         DC    AL3(0)              DUMMMY NIB POINTER
         SPACE 2
* HALFWORDS -
H8       DC    H'8'
TRNBLIN  DC    H'32'               N'BYTES IN A TRACE LINE.
SEQFROM  DC    H'0'                SEQ.NO. - FROM CTCA
SEQTO    DC    H'0'                SEQ.NO. - TO   CTCA
MAXWTO   DC    H'40'               MAX MSG WTO LENGTH
* DEVICE COMMAND CODES EQU'S -
EW3270   EQU   X'F5'               3270 ERASE/WRITE
W3270    EQU   X'F1'               3270 WRITE
RCTCA    EQU   2
WCTCA    EQU   1
SILI     EQU   B'00100000'
CC       EQU   B'01000000'
ATTN     EQU   B'10000000'
BUSY     EQU   B'00010000'
* NON-ALIGNED -
         SPACE
TEMP1    DS    C
FLAGS    DC    X'00'               BIT FLAGS....
REPLYING EQU   B'00000001'         ...RECORD IS PARTIALLY SET UP.
GOTPARM  EQU   B'00000010'         ...JCL PARAMETER IS PRESENT
STARTING EQU   B'00000100'         ...PVM LINK IS STARTING
STARTED  EQU   B'00001000'         ...PVM LINK HAS STARTED
ZFLAG    EQU   B'00010000'
TRACEON  EQU   B'00100000'         ...DATA TRACING IS ACTIVE
LUTRACE  EQU   B'01000000'         ...LU TRACING IS ACTIVE
ACKEXP   EQU   B'10000000'         ...AN 'ACK0' IS EXPECTED NEXT.
         SPACE
FLAGS2   DC    X'00'               MORE BIT FLAGS....
TIMEDOUT EQU   B'00000001'         ...I/O TO THE CTCA HAS TIMED OUT.
DRAINED  EQU   B'00000010'         ...PVM HAS DRAINED THE CTCA.
DOINGIO  EQU   B'00000100'         ...DOING I/O ON CTCA
NORECV   EQU   B'00001000'         ...RECEIVE NOT REQUIRED.
         SPACE
IOFLAGS  DC    X'00'               CTCA I/O STATUS FLAGS...
IOSTART  EQU   B'00000001'         ...GOING INTO EXCP
IOSTOP   EQU   B'00000010'         ...COMING OUT OF EXCP
IOCHNG   EQU   B'00000100'         ...BEEN INTO I/O ROUTINE
IOOUTSTA EQU   B'00001000'         ...I/O IS OUTSTANDING.
IOIDLE   EQU   B'00010000'         ...IDLE
IOFIDDLE EQU   B'00100000'         .....
         SPACE
EXFLAGS  DC    X'00'               CODE LOCATION FLAGS....
LOSTFLAG EQU   B'00000001'         ...INSIDE LOSTERM EXIT
LOGNFLAG EQU   B'00000010'         ...INSIDE LOGON EXIT
INEXIT   EQU   LOSTFLAG+LOGNFLAG   ...INSIDE ANY VTAM EXIT
         SPACE
WTOREPLY DS    C                   REPLY AREA FOR WTOR
HEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE
XACK0    DC    AL1(DLE,ACK0)
XSTX     DC    AL1(DLE,STX)
PVMID    DC    CL8'&PVM'           PVM NODE ID.
OURID    DC    CL8'&LOCAL'         OUR NODE ID.
         SPACE
APPLID   DC    AL1(L'#VTAMID)
#VTAMID  DC    C'&VTAM'            VTAM APPLICATION ID.
         SPACE
SREC     DS    0CL12               SIGN-ON RECORD.
SRECID   DS    CL8                 ID
SRECVERS DS    3X                  PVM VERSION
SRECCC   DS    X                   RECORD TYPE
         SPACE
REQDNODE DS    CL8
PARM     DC    CL8' '              JCL PARAMETER
BLANKS   DC    CL8' '              HANDY BLANKS
         AIF   ('&LUTAB' EQ '').LUTX4
LUTABLE  DC    CL8'&LUTAB'         LU TABLE NAME
.LUTX4   ANOP
NOSOINFO DC    C'SIGN-ON TO &LOCAL NOT PERMITTED           '
NOTAPVM  DC    C'MSG &PVM '
NOTPVMND DS    CL8
         DC    C' COMMAND REJECTED'
LNOTAPVM EQU   *-NOTAPVM
VERSION  DC    X'010105'           PRETEND WE'RE PVM 1.1.5
COMMBYTE DC    X'00'               CCW COMMAND CODE
         SPACE
         MODIFY VERB=DUMP,RTN=MDUMP
         MODIFY VERB=LUON,RTN=MLUON
         MODIFY VERB=LUOFF,RTN=MLUOFF
         AIF   ('&LUTAB' EQ '').LUTX5
         MODIFY VERB=RELOAD,RTN=MRELOAD
.LUTX5   ANOP
         LTORG
         EJECT
****************
**************** RECORD OUTWARD TO THE CTCA, CREATED IN VTAM EXIT RTN
****************
         DC    0D'0',CL8'EXITCTCA'
EXIREC   EQU   *
         DC    AL1(DLE)            DLE
         DC    AL1(STX)            STX
         DS    XL2                 SEQUENCE NO
         DS    XL2                 BLOCK LENGTH
         DC    X'0001'             1 RECORD PER BLOCK.
         DC    X'00000000'         OWNER TCB IN PVM.
EXITYPE  DC    X'8010'             TYPE.
EXIRLEN  DS    XL2                 RECORD LENGTH
         DC    CL8'&LOCAL'         SOURCE NODE.
         DC    CL8' '              SOURCE LU NAME.
EXIDESTN DS    CL8                 DESTINATION NODE NAME
EXIDESTT DC    CL8' '              DESTINATION TASK ID.
         DC    XL4'00000000'       FLAGS/SPECIAL DEFINITION
EXIDATA  DS    CL8                 DATA
         SPACE 3
****************
**************** RECORD OUTWARD TO THE CTCA -
****************
         DC    0D'0',CL8'  TOCTCA'
OUTREC   EQU   *
         DC    AL1(DLE)            DLE
         DC    AL1(STX)            STX
OUTSEQ   DS    XL2                 SEQUENCE NO
OUTLEN   DS    XL2                 BLOCK LENGTH
         DC    X'0001'             1 RECORD PER BLOCK.
         DC    X'00000000'         OWNER TCB IN PVM.
OUTTYPE  DC    X'8010'             TYPE.
OUTRLEN  DS    XL2                 RECORD LENGTH
         DC    CL8'&LOCAL'         SOURCE NODE.
OUTLUNAM DC    CL8' '              SOURCE LU NAME.
OUTDNODE DS    CL8                 DESTINATION NODE NAME
OUTDTASK DC    CL8' '              DESTINATION TASK ID.
         DC    XL4'00000000'       FLAGS/SPECIAL DEFINITION
OUTDATA  DS    CL4096              DATA
         SPACE 3
****************
**************** RECORD INWARD FROM THE CTCA -
****************
         DC    0D'0',CL8'FROMCTCA'
         SPACE
READCTCA DS    CL(4096+52)
         EJECT
LUB      DSECT
LUBNEXT  DS    A                   POINTER TO NEXT LUB
LUBNAME  DS    CL8                 LU NAME
LUBNODE  DS    CL8                 PVM NODE NAME
LUBUSER  DS    CL8                 PVM USER NAME
LUBFLAGS DS    0X                  FLAGS
LUBNIBA  DS    A                   POINTER TO NIB
LUBRUSIZ DS    H                   MAX RU SIZE TO SEND.
LUBLEN   EQU   *-LUB               LUB LENGTH
         SPACE
* BITS IN 'LUBFLAGS' ....
LUBFRBUF EQU   B'00000001'         ...'READ BUFFER' ISSUED LAST.
LUBRULIM EQU   B'00000010'         ...RU SIZE IS LIMITED
LUBDUMMY EQU   B'10000000'         ...DUMMY LUB.
         EJECT
PVMBLOCK DSECT
PVMDLE   DC    AL1(DLE)            DLE
PVMSTX   DC    AL1(STX)            STX
PVMSEQ   DS    XL2                 SEQUENCE NO
PVMBLEN  DS    XL2                 BLOCK  LENGTH
PVMNRECS DS    XL2                 N'RECORDS IN THIS BLOCK.
PVMRECRD EQU   *
         DS    X'00000000'         OWNER TCB IN PVM.
PVMRTYPE DS    X                   RECORD TYPE.
PVMSTYPE DS    X                   RECORD SUBTYPE.
PVMRECL  DS    XL2                 RECORD LENGTH
PVMSNODE DS    CL8                 SOURCE NODE.
PVMSUSER DS    CL8                 SOURCE USER.
PVMDNODE DS    CL8                 DESTINATION NODE NAME
PVMDUSER DS    CL8                 DESTINATION USER.
PVMXXXX1 DC    XL4'20000000'  ********DUNNO.
PVMDATA  DS    CL4096              DATA
PVMHLEN  EQU   OUTDATA-OUTREC      REC LEN EXCLUDING DATA.
PVMRHLEN EQU   PVMDATA-PVMRECRD    RECORD HEADER LENGTH
         EJECT
         ISTDBIND
         PRINT NOGEN
         IECDIOSB
         EJECT
         IHASRB
         IHAPSA
         CVT   DSECT=YES
         END
