     TITLE 'MACRO FOR FINDING POSITIONAL PARAMETERS'
         MACRO
         POSPARM &LIST,&RETURN
         LCLA  &NUMPRM,&N,&LISTLN
*        FUNCTION OF THIS MACRO:
*
*
*       -  GIVEN ADDRESS OF A STANDARD OS PARAMETER LIST FROM AN
*                EXEC CARD,I.E. 1 HALFWORD GIVING LENGTH OF LIST
*                               FOLLOWED BY LIST ITSELF
*
*       -  RETURN EACH PARAMETER TO A SPECIFIED ADDRESS IN THE SAME
*                 FORMAT, I.E. 1 HALFWORD GIVING LENGTH OF PARAMETER
*                              FOLLOWED BY THE PARAMETER ITSELF
*
*          PARAMETERS ARE SEPARATED BY COMMAS,
*          EMBEDDED BLANKS ARE TREATED AS PART OF THE PARAMETER IN
*            WHICH THEY OCCUR
.*   REGISTER USE WITHIN THIS MACRO -
.*        R2   -> CURRENT CHARACTER BEING EXAMINED
.*        R3   ACCUMULATES LENGTH OF CURRENT PARM
.*        R4   LENGTH OF PARM LIST
.*        R5   -> START OF CURRENT PARM
.*        R7   -> RECV ADDR FOR CURRENT PARM
.*        R8   -> LIST OF RECV ADDRS
&N       SETA  1
&NUMPRM  SETA  N'&RETURN
&LISTLN  SETA  N'&RETURN*4
         CNOP  2,4
         B     *+6+4+&LISTLN
MOVE     MVC   2(,7),0(5)          CONTENTS PARM TO RECEIVING ADDR
RETURN   DS    0F
.NEXPRM  AIF   (&NUMPRM EQ 0).SKIP
         DC    A(&RETURN(&N))      ADDR OF RECV ADDR FOR PARM &N
&N       SETA  &N+1
&NUMPRM  SETA  &NUMPRM-1
         AGO   .NEXPRM
.SKIP    ANOP
         LA    2,2(&LIST)          ADDR PARAMETER LIST
         LH    4,0(&LIST)          LENGTH OF LIST
         LR    5,2                 RETAIN START OF 1ST PARM
         SR    3,3                 ZERO LENGTH OF CURRENT PARM
         L     7,RETURN            1ST RETURN ADDR
         LA    8,RETURN            ADDR OF LIST OF RETURN ADDRESSES
         B     FIRST               SKIP INCREMENTING ON 1ST TIME
NEXT1    EQU   *
         LA    2,1(2)              -> NEXT CHAR IN PARM LIST
         LA    3,1(3)              LENGTH CURRENT PARM +1
         BCTR  4,0                DECREMENT LENGTH REMAINING
         C     4,=F'0'            END OF PARM LIST
         BE    LAST
FIRST    EQU   *
         CLI   0(2),C','           END OF CURRENT PARM FIELD
         BNE   NEXT1
         STH   3,0(,7)            LENGTH OF CURRENT PARM
         S     3,=F'1'             -1 FOR MVC INSTRUCTION
         EX    3,MOVE              PARAMETER TO RECV ADDR + 2
         LA    8,4(8)              INCREMENT OFFSET ON RECV ADDR LIST
         L     7,0(0,8)            -> RECV ADDR NEXT PARM
         LA    2,1(2)              MOVE PAST COMMA TO NEXT CHAR
         BCTR  4,0                1ST DECREMENT
         LR    5,2                 R5-> START OF CURRENT PARM
         SR    3,3                ZERO CURRENT LENGTH
         B     NEXT1
LAST     EQU   *
         STH   3,0(,7)
         LTR   2,3
         BZ    NOPARM
         S     3,=F'1'
         EX    3,MOVE
NOPARM   EQU   *
         MEND
     TITLE 'PROGRAM DESCRIPTION'
*
*
*  PTGDGMOV
*
*  WRITTEN BY  ROSS HINDS                              PHONE - 983577
*              COMPUTER CENTRE
*              DEPARTMENT OF POSTS AND TELEGRAPHS
*              DUBLIN 14.
*              SEPTEMBER 1974.
*
*    THIS PROGRAM WAS WRITTEN TO HANDLE THE FOLLOWING SYSTEM:
*      THERE IS A LARGE BATCH OF TRUNK TICKETS FOR EACH DAY. THESE ARE
*      READ ONE DAY PER JOB BUT MANY DAYS TICKETS CAN ARRIVE TOGETHER.
*      A CONSOLIDATION JOB WORKS ON A WEEK'S RECORDS(TICKET IMAGES ON
*      TAPE) AT A TIME. A SYSTEM WAS REQUIRED WHICH ENABLED THE DAILY
*      TICKET READING TO BE INDEPENDENT OF THE WEEKLY RUNS, AND WHICH
*      WOULD AUTOMATICALLY HANDLE TAPE ALLOCATION.
*
*      THERE ARE 3 GENERATION DATA GROUPS USED WITH THIS PROGRAM,
*      SAY GDG1,GDG2,GDG3.
*        EACH DAY'S TICKETS ARE DEFINED AS GDG1(+1)ON THE TAPE DEFINED
*        BY GDG3(0). THE WEEKLY PROCEDURE HAS THIS PROGRAM AS STEP 1;
*        IT MOVES 6(A VARIABLE PARAMETER) OF THE OLDEST MEMBERS OF
*        GDG1 TO GDG2 AND THE OTHER PROGRAMS IN THE WEEKLY PROCEDURE
*        REFERENCE GDG2 ONLY. THUS 6 TAPES ARE HANDLED AT A TIME. IF
*        THE WEEKLY PROCEDURE EXECUTES CORRECTLY THIS PROGRAM WITH
*        PARM3='A' MOVES ALL ENTRIES FROM GDG2 TO GDG3 CHANGING THE
*        ABSOLUTE GENERATION NUMBERS SO THAT THE NEW ENTRIES IN GDG3
*        APPEAR TO BE THE OLDEST MEMBERS OF GDG3.
*
*        ALTHOUGH ENTRIES ARE MOVED FROM GDG1 TO GDG2 THE GDG1
*        DATASETS CAN BE READ AS GDG2
*        DATASETS BECAUSE ONLY THE LAST 17 CHARS OF A DATASET NAME
*        ARE STORED ON A TAPE DATASET LABEL, THIS DOES NOT CHANGE IN
*        THE MOVE FROM GDG1 TO GDG2- THE PROGRAM INSISTS THAT DATA
*        GROUP NAMES BE LONGER THAN 8 CHARS(GROUP NAME + '.' + ABS NUM
*        > 17 CHARS).
*
*
*
*  FUNCTION -  TRANSFERS ENTRIES FROM ONE GENERATION DATA GROUP TO
*              ANOTHER.
*
*              IF THE NUMBER OF ENTRIES IS SPECIFIED ABSOLUTELY THE
*              GENERATION NUMBERS ARE NOT CHANGED ON TRANSFER.
*              IF ALL ENTRIES OF A GROUP ARE TO BE TRANSFERED THE
*              ABSOLUTE GENERATION NUMBERS ARE CHANGED TO BE THOSE
*              WHICH WILL MAKE THE TRANSFERED ENTRIES APPEAR AS THE
*              OLDEST GENERATIONS OF THE GROUP TO WHICH THEY HAVE
*              MOVED.
*              IF THE GROUP TO WHICH THE ENTRIES ARE TO BE MOVED IS
*              EMPTY THEN THE GENERATION NUMBERS IN THE GROUP WILL BE
*              SET TO G9998V00 AND SO ON DOWN.
*
*
*   INPUT    - PARM FIELD ON THE EXEC STMT HAS FOLLOWING
*                 1. GDG FROM WHICH ENTRIES ARE TO BE MOVED
*                 2. GDG  TO  WHICH ENTRIES ARE TO BE MOVED
*                 3. NO. OF ENTRIES TO BE MOVED, CONTAINS 'A' IF ALL
*                    ENTRIES ARE TO BE MOVED.
*   OUTPUT   - PRINTED  LIST OF ENTRIES WHICH WERE CHANGED.
*
*
     TITLE 'EQUATES AND DSECTS'
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*              REGISTER USAGE -
*               R2       WORK REGISTER AND CATLG DSECT ADDRESSABILITY
*               R3       WORK
*               R4       WORK
*               R5       NUM ENTRIES TO BE MOVED
*               R6       RELATIVE GENERATION NUMBER GDG1 - CURRENT SIZE
*               R7       WORK
*               R8       WORK
*               R9       RELATIVE GENERATION NUMBER GDG2 - CURRENT SIZE
*               R10      UNUSED
*               R11      NUM VOLS IN VOL LIST
*               R12      BASE
*               R14      LINK
*               R15      RETURN CODE
CATLG    DSECT
ENAME    DS    CL8
ETTR     DS    CL3
ETYPE    DS    CL1
EGFLAGS  DS    CL1
EGMAXSIZ DS    CL1
EGCURSIZ DS    CL2
     TITLE 'BEGIN CSECT AND SAVE REGISTERS'
PTGDGMOV CSECT
         BEGIN
     TITLE 'PICK UP PARAMETERS FROM EXEC STATEMENT'
*        PICK UP PARMATERS FROM EXEC STMT
*
         L     R1,0(R1)            ADDR OF PARMLIST
         CLC   0(2,R1),BIN0        NO PARMS ON EXEC STMT AT ALL
         BE    ERR9
         POSPARM R1,(GDG1IN,GDG2IN,NMOVIN)
     TITLE 'PRINT HEADINGS'
         OPEN  (PRINDCB,(OUTPUT))
         USING CATLG,R2            ADDRESSING FOR CATALOG BLOCK ENTRY
*
*    PRINT HEADINGS
*
         MVC   INAME(44),GDG1DSN
         MVC   ONAME(44),GDG2DSN
         LH    R3,MOVELN           NUM MOVING TO
         S     R3,=F'1'            -1 FOR EX OF MVC INSTR
         EX    R3,MOVE6                          PRINTING
         PUT   PRINDCB,HEAD1
         PUT   PRINDCB,HEAD2
         PUT   PRINDCB,HEAD3
         PUT   PRINDCB,HEAD4
     TITLE 'MAIN LINE  -  MOVE ENTRIES FROM GDG1 TO GDG2'
*
*              CHECK GIPE'S EXIST AND CONTAIN CORRECT NUM ENTRIES
*               - ENTRIES IN GDG1 >= NUM SPECIFIED ON EXEC STMT
*               - ENTRIES IN GDG2 = 0 IF 'A' NOT SPECIFIED
*
         MVC   GDGIN(46),GDG1IN    SETUP TO FIND GIPE FOR GDG1
         BAL   R14,FINDGIP
         LH    R6,EGCURSIZ         NUM EXISTING ENTRIES IN GENERATIONDG
         CLI   NMOVNG,C'A'         ALL ENTRIES TO BE MOVED
         BE    ALLMOVE
         LH    R5,MOVELN
         S     R5,=F'1'            DECREMENT FOR PACK1
         EX    R5,ANDC             IS PARM ALL NUMERIC
         EX    R5,ALLNMRIC
         BNE   ERR14
         EX    R5,PACK1            PACK NO. ENTRIES TO BE MOVED
         CVB   R5,PMOVNG
         C     R5,F0               NO ENTRIES TO MOVE
         BE    WINDUP
SETUP    EQU   *
         CR    R5,R6               ENOUGH EXISTING ENTRIES
         BH    ERR5
*              FIND  CATALOG BLK FOR GDG2
*
*
         MVC   GDGIN(46),GDG2IN    SETUP TO FIND GIPE FOR GDG2
         MVI   DSNAME,C' '
         MVC   DSNAME+1(43),DSNAME
         BAL   R14,FINDGIP
         SR    R3,R3               CAN NUM GDG1 ENTRIES TO BE MOVED
         AH    R3,EGCURSIZ           FIT IN GDG2,
         AR    R3,R5                 I.E. IS CURRENT SIZE GDG2+NUM
         SR    R4,R4                 MOVING
         IC    R4,EGMAXSIZ                  <= MAX
         CR    R3,R4                             SIZE  GDG2
         BH    ERR13
         CLI   NMOVNG,C'A'
         BE    ALLGO
         CLC   EGCURSIZ(2),BIN0    NO EXISTING ENTRIES
         BNE   ERR7
CONTIN1  EQU   *
         MVC   GDGIN(46),GDG1IN
NENTRY   EQU   *
         MVC   LOCDSN(44),LOCBLNK  BLANK OUT
         S     R6,=F'1'            GDG1 REL GEN NUM -1
         LR    R7,R6                  GDG1 REL GEN NUM
         BAL   R14,RELNUM          FORM GDG1 REL GEN NUM FOR LOCATE
         LOCATE RELLOC1            GDG1 USING RELATIVE GEN NUM
         C    R15,=F'0'            SUCCESSFUL
         BNE  ERR3
         MVC   GDG1ABSN(44),LOCDSN KEEP ABS GEN NAME FOR UNCATLG LATER
         LA    R2,LOCDSN           -> LAST 9 CHARS IN ABSOLUTE NAME
         AH    R2,GDG1LN             I.E. '.' AND ABS GEN NUM
         MVC   MSG(8),1(R2)        GDG1 GEN NUM FOR PRINTING
         LA    R3,GDG2DSN          -> END
         AH    R3,GDG2LN                  OF GDG2DSN
         CLI   NMOVNG,C'A'
         BNE   SKIP1
*
*                 FIND ABSOLUTE GEN NUM FOR NEXT OLDEST GEN IN GDG2
*
         SP    PGDG2NUM(8),=P'1'
         UNPK  2(4,R2),PGDG2NUM(8) UNPACK TO LOCDSN
         MVZ   5(1,R2),=X'F0'      REMOVE SIGN
SKIP1    EQU   *
         MVC   0(9,R3),0(R2)       ABS GEN NUM
         MVC   MSG+30(8),1(R3)     GDG2 GEN NUM FOR PRINTING
         CATALOG CAT               RECATALOG IN GDG2
         C    R15,=F'0'
         BNE  ERR4
         CATALOG UNCAT             UNCATALOG GDG1
         C     R15,=F'0'
         BNE   ERR2
         LA    R2,GDG1VOL          ADDR VOL LIST (VOL CONTROL BLOCK)
         LH    R11,0(R2)           NUM VOLS
         A     R2,=F'2'            SKIP 1ST 2 BYTES (NUM VOLS)
NEXVOL   EQU   *
         MVC   MSG+20(6),4(R2)     VOL ID FOR PRINTING
         PUT   PRINDCB,MSGAREA
         BCT   R5,NENTRY
WINDUP   EQU   *
         MVC   MSG(132),ASACHAR
         MVI   ASACHAR,C'-'
         MVC   MSG(10),ENDMSG
         PUT   PRINDCB,MSGAREA
         L     13,4(13)
         RETURN (14,12),RC=0
ALLMOVE  EQU   *
         LTR   R6,R6               ANY ENTRIES TO MOVE
         BZ    ERR15               NO,BRANCH
         LH    R5,EGCURSIZ         NUM MOVING=NUM ENTRIES
         B     SETUP
ALLGO    EQU   *
         LH    R9,EGCURSIZ         NUM EXISTING ENTRIES IN GDG2
         C     R9,F0               BRANCH IF NO ENTRIES IN GDG2
         BE    GEN9999               TO MAKE NEW ENTRY G9999V00
         S     R9,=F'1'            GDG2 REL GEN NUM -1
         LR    R7,R9                  GDG2 REL GEN NUM
         BAL   R14,RELNUM          FORM GDG2 REL GEN NUM FOR LOCATE
         LOCATE RELLOC1            GDG2 USING RELATIVE GEN NUM
         LA    R3,GDG2DSN          -> END OF
         AH    R3,GDG2LN                     GDG2DSN
         LA    R2,LOCDSN           -> END OF LOCDSN NOW CONTAINING
         AH    R2,GDG2LN             ABS GEN NUM GDG2DSN
         MVC   GDG2NUM(4),2(R2)    ABSOLUTE GEN NUM GDG2
CONTIN2  EQU   *
         PACK  PGDG2NUM(8),GDG2NUM(4)
         CVB   R2,PGDG2NUM
         CR    R2,R5               CHECK ABSOLUTE GEN NUM > NUM
         BNH   ERR12             GEN 0 WILL NOT BE REACHED
         B     CONTIN1
GEN9999  EQU   *
         MVC   GDG2NUM(4),=C'9999'
         B     CONTIN2
     TITLE 'SUBROUTINE  -  FIND GENERATION INDEX POINTER ENTRY'
*
*    ROUTINE TO FIND THE GENERATION POINTER INDEX FOR A SPECIFIED GDG
*
*         ON ENTRY ROUTINE EXPECTS
*           1. GDG NAME IN 'GDGDSN'
*           2. GDG NAME LENGTH IN 'GDGLN'
*
*         ON RETURN R2 -> GIPE
*
FINDGIP  EQU   *
*    CHECK  GEN DATASET NAME > 17 CHARS
*      I.E  GEN DATA GROUP NAME > 8 CHARS
         LA    R2,8
         CH    R2,GDGLN
         BH    ERR8
         LA    R2,GDGDSN
         AH    R2,GDGLN
         LA    R3,1
NEXT     EQU   *
         SR    R2,R3               -> NEXT CHAR BACK
         CLI   0(R2),C'.'          FIRST '.'
         BNE   NEXT
         LA    R3,GDGDSN
         SR    R2,R3               GET LENGTH TO FIRST '.' FROM RIGHT
         S     R2,=F'1'            DECREMENT FOR MOVE1 EX INSTRUCTION
         EX    R2,MOVE1            DSNAME GDG1 SETUP FOR LOCATE MACRO
         LOCATE GDG1BLK            READ 1ST BLOCK FOR THIS INDEX
         C     R15,=F'12'
         BNE   ERR10
         LA    R4,GDGDSN+2         +2 FOR '.' AND R2 BEING -1 FOR MVC
         AR    R4,R2               -> SIMPLE NAME OF GDG
         LH    R3,GDGLN            R3=(LENGTH -(R2+2) -1)
         S     R3,=F'2'             (R2+2) AS IN LA R4,GDGDSN+2 ABOVE
         SR    R3,R2                 -1 FOR MVC INSTR.
*                                  R3 THEN HAS LENGTH OF SIMPLE NAME
*                                   TO BE MOVED BY MOVE2
         EX    R3,MOVE2
         LA    R2,WORK1            CATLG DSECT ADDRESSABILITY
         A     R2,=F'2'            SKIP 1ST 2 BYTES OF BLOCK (=LENGTH)
         CLI   ETYPE,X'03'         INDEX CONTROL ENTRY
         BNE   ERR1
TTRNTRY  EQU   *
NXNTRY   EQU   *
         SR    R3,R3               ZERO
         IC    R3,ETYPE            NUM 1/2 WORDS AFTER 'ETYPE' TO NEXT
*                                    ENTRY
         SLA   R3,1(0)             CONVERT 1/2 WORDS TO BYTES
         A     R2,=F'12'           COMMON ENTRY LENGTH AND
         AR    R2,R3                 EXCESS OVER THAT GIVES NEXT ENTRY
         CLI   ETYPE,X'00'         INDEX LINK ENTRY
         BE    ILE
         CLI   ETYPE,X'02'         GENERATION INDEX POINTER ENTRY(GIPE)
         BNE   NXNTRY
         CLC   LASTNME,ENAME       CORRECT GIPE
         BNE   NXNTRY
         BR    R14
*
ILE      EQU   *
         CLC   ENAME,X16F          INDEX LINK ENTRY
         BNE   NXNTRY
         CLC   ETTR,BIN0           LAST ENTRY IN INDEX,I.E.ENTRY SOUGHT
         BE    ERR6                 DOES NOT EXIST
         MVC   NEXTTR(3),ETTR
         LOCATE BLKTTR
         LA    R2,WORK1            CATLG DSECT ADDRESSABILITY
         A     R2,=F'2'            SKIP 1ST 2 BYTES OF BLICK (LENGTH)
         B     TTRNTRY
     TITLE 'SUBROUTINE - ASSEMBLE FULL RELATIVE GENETATION NAME'
*        ASSEMBLE FULL RELATIVE GENERATION NAME
*
*         ON ENTRY THIS SUBROUTINE EXPECTS
*           1. GDG NAME IN 'GDGDSN'
*           2. GDG NAME LENGTH IN 'GDGLN'
*           3. R7 CONTAINS RELATIVE GEN NUM
*
*         ON RETURN REL GEN NAME IS IN 'LOCDSN' READY FOR ISSUE
*           OF LOCATE MACRO.
*
RELNUM   EQU   *
         LA   R2,LOCDSN
         LH    R3,GDGLN
         AR   R2,R3                -> END OF GDG NAME
         S     R3,=F'1'            DECREMENT FOR MOVE4
         EX   R3,MOVE4             GDG NAME IN PLACE FOR LOCATE REL NO.
         C     R7,=F'0'            GEN(0)
         BE    GENZERO
         CVD   R7,DWORD
         UNPK  RELGEN(4),DWORD
         MVZ   RELGEN+3(1),=X'F0'  REMOVE SIGN
         LA    R7,RELGEN           FIND NONZERO DIGITS IN REL GEN NUM
FINDLN   EQU   *
         CLI   0(R7),C'0'
         BNE   NONZERO
         A    R7,=F'1'
         B     FINDLN
NONZERO  LA    R8,RELGEN+4
         SR    R8,R7               NO CHARS TOBE MOVED
         MVC  0(2,R2),=C'(-'       ASSEMBLE
         A    R2,=F'2'              FULL
         S     R8,=F'1'
         EX   R8,MOVE5                REL
         AR   R2,R8                     GEN
         MVC   1(1,R2),=C')'              NAME
*                                    E.G.  SAMP.GDG(-13)
         BR    R14                 RETURN TO MAIN LINE
GENZERO  EQU   *
         MVC   0(3,R2),=C'(0)'       REL GEN NUM
         BR    R14                 RETURN TO MAIN LINE
     TITLE 'ERROR PRINTING AND ABNORMAL TERMINATION'
ERR1     EQU   *
         MVC   MSG+15(39),MSG1
         B     PRINT
ERR2     EQU   *
         MVC   MSG+15(34),MSG2
         B     PRNTRG15
ERR3     EQU   *
         MVC   MSG+15(46),MSG3
         B     PRNTRG15
ERR4     EQU   *
         MVC   MSG+15(30),MSG4
         B     PRNTRG15
ERR5     EQU   *
         MVC   MSG+15(51),MSG5
         B     PRINT
ERR6     EQU   *
         MVC   MSG+15(41),MSG6
         MVC   MSG+56(44),GDGDSN   NAME OF GDG NOT FOUND
         B     PRINT
ERR7     EQU   *
         MVC   MSG+15(44),MSG7
         B     PRINT
ERR8     EQU   *
         MVC   MSG+15(51),MSG8
         B     PRINT
ERR9     EQU   *
         OPEN  (PRINDCB,(OUTPUT))  ERR9 OPEN
         MVC   MSG+15(36),MSG9
         B     PRINT
ERR10    EQU   *
         MVC   MSG+15(24),MSG10
         MVC   MSG+39(44),DSNAME
         B     PRNTRG15
ERR11    EQU   *
         MVC   MSG+15(20),MSG11
         B     PRNTRG15
ERR12    EQU   *
         MVC   MSG+15(102),MSG12
         B     PRINT
ERR13    EQU   *
         MVC   MSG+15(109),MSG13
         B     PRINT
ERR14    EQU   *
         MVC   MSG+15(39),MSG14
         B     PRINT
ERR15    EQU   *
         MVC   MSG+15(18),MSG15
         B     PRINT
PRNTRG15  EQU  *
         CVD   R15,DWORD
         UNPK  RELGEN(4),DWORD+4(4)
         MVZ   RELGEN+3(1),=X'F0'
         MVC   MSG+48+16(4),RELGEN
PRINT    EQU   *
         MVI   MSGAREA,C'-'        ASA CHAR
         MVC   MSG(13),ERROR
         PUT   PRINDCB,MSGAREA
         ABEND 1,DUMP
         L     13,4(13)
         RETURN (14,12),RC=12
     TITLE     'CONSTANTS AND MODEL STATEMENTS'
         LTORG
MOVE1    MVC   DSNAME(0),GDGDSN
MOVE2    MVC   LASTNME(0),0(R4)    SIMPLE NAME GDG1 -> LASTNME
MOVE4    MVC   LOCDSN(0),GDGDSN
MOVE5    MVC   0(0,R2),0(R7)       NONZERO DIGITS OF UNPACKED CURRENT
*                                    SIZE TO BE USED AS REL GEN NUM
MOVE6    MVC   HEAD4+78(0),NMOVNG   PARM3(NUM MOVING) TO PRINT LINE
PACK1    PACK  PMOVNG,NMOVNG(0)    NUM ENTRIES TO MOVE
ANDC     NC    ZONES1(0),NMOVNG    CHECK PARM IS ALL NUMERIC
ALLNMRIC CLC   ZONES1(0),ZONES2      BY AND & COMPARE
NEXTTR   DS    CL3
MSGAREA   DS   0CL133
ASACHAR   DC   C' '
MSG       DC   CL132' '
GDGIN    DS    0H
GDGLN    DS    H
GDGDSN  DS    44C
GDG1IN   DS    0H
GDG1LN   DS    H
GDG1DSN  DC    CL44' '
GDG2IN   DS    0H
GDG2LN   DS    H
GDG2DSN  DC    CL44' '
NMOVIN   DS    0H
MOVELN   DC    H'0'
NMOVNG   DC    CL3' '
PMOVNG   DS    D
GDG2NUM  DC    4C' '
         DS    0D
PGDG2NUM DC    PL8'0'
         DS    0D
WORK1    DS    265C
GDG1VOL  DS    0D
         DS    265C
DWORD    DS    D
RELGEN   DS    4C
LOCBLNK  DC    C' '
LOCDSN   DC    44C' '
LOC2DSN  DC    44C' '
GDG1ABSN DC    44C' '              GDG1 ABSOLUTE GENERATION NAME
DSNAME    DC    CL44' '
LASTNME  DC    CL8' '
NEXTGEN  DC    C'(+1)'
ZONES1   DC    X'F0F0F0'           NUMERIC ZONES
ZONES2   DC    X'F0F0F0'           NUMERIC ZONES
F12      DC    F'12'
F0       DC    F'0'
BIN0     DC    X'000000'
X16F     DC    8X'FF'
HEAD1    DS    0CL133
         DC    C'1'
         DC    C'DEPARTMENT OF POSTS && TELEGRAPHS'
         DC    CL34' '
         DC    C'UTILITY PROGRAM   PTGDGMOV'
         DC    C'-VERSION 2.1'
         DC    CL28' '
HEAD2    DS    0CL133
         DC    C'0'
         DC    C'THE FOLLOWING GENERATIONS HAVE BEEN UNCATALOGED FROM'
          DC    C' GENERATION DATA GROUP - '
INAME    DC    CL57' '
HEAD3    DS    0CL133
         DC    C' '
         DC    C'AND HAVE BEEN CATALOGED IN GENERATION DATA GROUP -'
         DC    CL27' '
ONAME    DC    CL55' '
HEAD4    DS    0CL133
         DC    C'0'
         DC    CL13'GENERATION IN'
         DC    CL4' '
         DC    CL3' '
         DC    C'VOL SER'
         DC    CL3' '
         DC    CL14'GENERATION OUT'
         DC    CL6' '
         DC    CL26'NUMBER OF ENTRIES MOVING ='
         DC    CL56' '
ENDMSG   DC    C'NORMAL END'
ERROR    DC    C'*** ERROR ***'
MSG1     DC    C'NO INDEX CONTROL ENTRY IN CATALOG BLOCK'
MSG2     DC    C'UNCATALOG FOR FROMGDG FAILED. R15='
MSG3     DC    C'LOCATE ON REL GEN NUM FOR FROMGDG FAILED. R15='
MSG4     DC    C'CATALOG FAILED FOR TOGDG. R15='
MSG5     DC    C'ENTRIES TO MOVE > EXISTING ENTRIES. NO ACTION TAKEN'
MSG6     DC    C'NO INDEX FOUND FOR GENERATION DATA GROUP '
MSG7     DC    C'TOGDG IS NOT EMPTY. EMPTY IT OR SPECIFY ''A'' '
MSG8     DC    C'GEN DATA GROUP NAME IS TOO SHORT. MUST BE > 8 CHARS'
MSG9     DC    C'PARAMETERS ON EXEC STATEMENT MISSING'
MSG10    DC    C'LOCATE FAILED FOR INDEX='
MSG11    DC    C'LOCATE ON TTR FAILED'
MSG12    DC    C'''A'' TYPE MOVE SPECIFIED WILL GIVE ABS GEN NUM OF ZERO
               O IN TOGDG. RESET TOGDG BEGINNING G9999V00 ET SEQ.'
MSG13    DC    C'NUMBER OF ENTRIES TO BE MOVED TO TOGDG IS TOO GREAT.  C
               EXPAND TOGDG OR REDUCE THE NUMBER OF ENTRIES MOVING    '
MSG14    DC    C'NUMBER OF ENTRIES MOVING IS NOT NUMERIC'
MSG15    DC    C'NO ENTRIES TO MOVE'
GDG1BLK  CAMLST NAME,DSNAME,,WORK1
RELLOC1  CAMLST NAME,LOCDSN,,GDG1VOL
CAT      CAMLST CAT,GDG2DSN,,GDG1VOL
UNCAT    CAMLST UNCAT,GDG1ABSN
BLKTTR   CAMLST BLOCK,NEXTTR,,WORK1
PRINDCB  DCB   DDNAME=SYSPRINT,                                        C
               BLKSIZE=133,                                            C
               LRECL=133,                                              C
               DSORG=PS,                                               C
               MACRF=(PM),                                             C
               RECFM=FBA
         END   PTGDGMOV
