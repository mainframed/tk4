         MACRO
&NAME    BEGIN   &BASE=1,&PL1=NO,&ENTRY=,&REGS=R01
         GBLC  &REG00,&REG01,&REG09     REFERENCED IN 'BACK' MACRO
         GBLB  &FIRST                   FOR REG EQU GEN.
         GBLB  &BGEXTRN,&BGPL1SW
         LCLC  &PENTRY
         LCLA  &AWORK1,&AWORK2,&AWORK3
*BEGIN    V2                                                  19.4.73
*        GENERATE CSECT INITIALISATION CODING INCLUDING PL1
*        COMPATIBILITY IF REQUIRED
&NAME    CSECT
&BGPL1SW SETB  0                        SET  OFF PL1 SW
         AIF   ('&PL1' NE 'YES').NOPL1
&BGPL1SW SETB  1
.NOPL1   ANOP
         AIF   (K'&ENTRY EQ 0).NOENTRY
         ENTRY &ENTRY
&ENTRY   DS    0H
&PENTRY  SETC  '&ENTRY'
         AGO   .GENREGS
.NOENTRY ANOP
         AIF   (&BGPL1SW NE 1).GENREGS
         AIF   (K'&NAME LE 7).GENREGS
.* TRUNCATE 8 CHAR CSECT NAME  TO 7 CHAR PL1 ENTRY POINT
&PENTRY  SETC  '&NAME'(1,4).'&NAME'(6,3)
         ENTRY &PENTRY
&PENTRY  DS    0H   PL1 ENTRY - 1ST 4 AND LAST 3 CHARS OF CSECT NAME
.GENREGS ANOP
         AIF   (&FIRST).NORGEN
&FIRST   SETB  1
         SPACE 1
         AIF   ('&REGS' NE 'R01').GENREG1
R00      EQU   0                        ) I/0 AND
R01      EQU   1                        ) PARAMETERS
R02      EQU   2
R03      EQU   3
R04      EQU   4
R05      EQU   5
R06      EQU   6
R07      EQU   7
R08      EQU   8
R09      EQU   9                        USED BY PL1
&REG00   SETC  'R00'
&REG09   SETC  'R09'
&REG01   SETC  'R01'
         AGO   .GENREG2
.GENREG1 ANOP
R0       EQU   0                        ) I/0 AND
R1       EQU   1                        ) PARAMETERS
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9                        USED BY PL1
&REG00   SETC  'R0'
&REG09   SETC  'R9'
&REG01   SETC  'R1'
.GENREG2 ANOP
R10      EQU   10                       )      ) PL1= BASE REG
R11      EQU   11                       ) BASE ) PL1=A(STATIC STORAGE)
R12      EQU   12                       ) REGS ) PL1= PSUEDO REG VECTOR
R13      EQU   13                       POINTER TO REG SAVE AREA
R14      EQU   14                       RETURN ADDR
R15      EQU   15                       BRANCHING ADDR
.NORGEN  ANOP
         SPACE 1
         CNOP  2,4
         BALR  R15,&REG00
         USING *,R15
         AIF   (&BGPL1SW EQ 0).ASAVE
.* GENERATE PL1 COMPATIBLE SAVE ROUTINE
         B     *+20
         AIF   (K'&NAME GT 7).PSAVE05
         DC    AL1(7)
         DC    CL7'&NAME'
         AGO   .PSAVE10
.PSAVE05 ANOP
         DC    AL1(7)
         DC    CL7'&PENTRY'
.PSAVE10 ANOP
         DC    F'136'                   DSA LENGTH
         DC    A(*+148)                 ADDR OF STATIC STORAGE
         CLC   *+176(4),*+196           IS PLI CNTRL MOD IN CORE
         BE    *+42                     NO THEN USE ASS SAVE ROUTINE
         SPACE 1
* PL1 SAVE ROUTINE
         STM   R14,R11,12(R13)          SAVE REGS
         L     R11,&NAME+16             GET ADDR OF STATIC STORAGE
         L     &REG00,&NAME+12          GET DSA LENGTH
         L     R15,32(0,R11)            GET IHESADA ADDR
         BALR  R14,R15                  LINK TO SET UP PL1 ENVIRONMENT
         LA    &REG09,100(0,R13)        USED BY PL1
         ST    R13,0(R12,0)             STORE DSA ADDR IN PR VECTOR
         MVI   0(R13),X'80'             SET DSA FLAG BYTE
         DC    X'0700'                  PADDING BYTES
         BALR  R15,&REG00
         B     156(R15)                 GO TO SET BASE REGS
         SPACE 1
.ASAVE   ANOP
* ASSEMBLER SAVE ROUTINE
         STM   R14,R12,12(R13)          SAVE REGS
         ST    R13,*+24                 CHAIN LAST S/A TO THIS
         LR    R14,R13
         LA    R13,*+14                 POINT R13 TO SAVEAREA
         ST    R13,8(R14)               CHAIN THIS S/A TO LAST
         AIF   (&BGPL1SW EQ 0).ASAVE05
         B     *+134                    GO TO SET BASE REGS
         AGO   .ASAVE10
.ASAVE05 ANOP
         B     *+78                     GO TO SET BASE REGS
.ASAVE10 ANOP
         DC    X'0700'                  PADDING BYTES
         DC    18F'0'                   SAVEAREA
         AIF   (&BGPL1SW EQ 0).SETBASE
         SPACE 1
         DC    F'4096'                  PL1 STATIC STORAGE
         DC    A(*-4+1024)                FIXED AREAS
         DC    A(*-8+2048)
         DC    A(*-12+3072)
         DC    A(*-16+4096)
         DC    A(*-20+5120)
         DC    A(*-24+6144)
         DC    A(*-28+7168)
         AIF   (&BGEXTRN).NOEXTRN
         EXTRN IHESADA,IHESADB,IHESAFA,IHESARC
.NOEXTRN ANOP
&BGEXTRN SETB  1
         DC    A(IHESADA)
         DC    A(IHESADB)
         DC    F'0'
         DC    F'0'
         DC    A(IHESAFA)
         DC    F'0'
.SETBASE ANOP
         SPACE 1
         DROP  R15
         AIF   ('&BASE'(1,1) NE '(').BASE05
.* GENERATE USING'S FOR EACH BASE SPECIFIED
&AWORK1  SETA  0
&AWORK2  SETA  0
&AWORK3  SETA  1
         BALR  &BASE(&AWORK3),&REG00    SET UP BASE REGISTER
.ALOOP   ANOP
         USING *-&AWORK1+&AWORK2,&BASE(&AWORK3)
&AWORK3  SETA  &AWORK3+1
         AIF   (K'&BASE(&AWORK3) EQ 0).AEND  EXIT IF END OF SUB-LIST
&AWORK1  SETA  &AWORK1+8
&AWORK2  SETA  &AWORK2+4096
         LA    &BASE(&AWORK3),2048(&BASE(&AWORK3-1)) SET UP NEXT
         LA    &BASE(&AWORK3),2048(&BASE(&AWORK3))     BASE REGISTER
         AGO   .ALOOP
.BASE05  ANOP
         AIF   (&BGPL1SW EQ 0).BASE10
         BALR  R10,&REG00               SET UP BASE REGISTER
         USING *,R10
         AIF   ('&BASE' EQ '1').AEND
         LA    R11,2048(R10)            SET UP NEXT
         LA    R11,2048(R11)              BASE REGISTER
         USING *-8+4096,R11
         AGO   .AEND
.BASE10  ANOP
         BALR  R12,&REG00               SET UP BASE REGISTER
         USING *,R12
         AIF   ('&BASE' EQ '1').AEND
         LA    R11,2048(R12)            SET UP NEXT
         LA    R11,2048(R11)              BASE REGISTER
         USING *-8+4096,R11
         AIF   ('&BASE' EQ '2').AEND
         LA    R10,2048(R11)            SET UP NEXT
         LA    R10,2048(R10)              BASE REGISTER
         USING *-16+8192,R10
.AEND    ANOP
         MEND
         MACRO
&NAME    BACK   &RC=0
*BACK     V2                                                  19.4.73
*        USE ONLY IN CONJUNCTION WITH 'BEGIN'
*        PROVIDES PL1 COMPATIBILITY IF REQUIRED
         GBLC  &REG00,&REG01            SET IN 'BEGIN' MACRO
         GBLB  &BGPL1SW
         LCLA  &AWORK1
         LCLC  &CWORK1
&NAME    DS    0H
         AIF   ('&RC'(1,1) EQ '(').REGCODE
         LA    R15,&RC                  SET RETURN CODE
         AGO   .ABACK05
.REGCODE ANOP
         AIF   ('&RC' EQ '(15)').ABACK05
         AIF   ('&RC' EQ '(R15)').ABACK05
&AWORK1  SETA  K'&RC
&AWORK1  SETA  &AWORK1-2
&CWORK1  SETC  '&RC'(2,&AWORK1)
         LR    R15,&CWORK1              SET RETURN CODE
.ABACK05 ANOP
         AIF   (&BGPL1SW EQ 0).ABACK10       DID BEGIN HAVE PL1 COMPAT.
         CNOP  0,4                      ALIGN'A'TYPE
         B     *+12
         DC    A(IHESADA)               BEGIN HAS EXTRN
         DC    F'0'
         CLC   *-8(4),*-4               IS PL1 IN CORE
         BE    *+56                     NO THEN USE ASS RETURN
         LTR   R15,R15                  IS A RETCODE SET
         BZ    *+44                       NO
         ST    R15,*+28                 YES THEN SET CODE
         OI    *+20,X'80'                 AND LINK
         LA    &REG01,*+16                TO IHESARC TO SET
         L     R15,*+20                   RETURN
         BALR  R14,R15                    CODE
         B     *+22                     BRANCH ROUND
         DC    X'0700'                    PADDING BYTES AND
         DC    A(*+4)                     PARM LIST
         DC    F'0'                     RETURN CODE
         DC    A(IHESARC)
         DC    A(IHESAFA)
         L     R15,*-4                  GET ADDR OF IHESAFA
         BALR  R14,R15                  AND RETURN
.ABACK10 ANOP
* ASSEMBLER STANDARD RETURN
         L     R13,4(R13)               GET ADDR OF LAST S/A
         L     R14,12(R13)              GET RETURN ADDR
         LM    &REG00,R12,20(R13)       RESTORE REGS
         BR    R14                      RETURN
         MEND
         TITLE 'PRINT PARM INFO ON LOG TO INSTRUCT OPERATOR'
CHATTER  BEGIN
         L     R02,0(R01)
*
LOADIT   LH    R03,0(R02)
         LTR   R03,R03
         BZ    NOPARM
         LA    R02,2(R02)
         BCTR  R03,R00
         EX    R03,MOVIT
         LA    R03,5(R03)
         STC   R03,LENGTH+1
         CNOP  0,4
         BAL   R01,SVC35
*
LENGTH   DC    X'0000'
         DC    X'0000'
MESSAGE  DC    CL122' '
*
SVC35    SVC   35
*
         BACK
*
MOVIT    MVC   MESSAGE(1),0(R02)
*
NOPARM   LA    R02,NULMES
         B     LOADIT
*
NULMES   DC    H'50'
         DC    C'WARNING - CHATTER INVOKED WITH NO PARM INFORMATION'
         END
