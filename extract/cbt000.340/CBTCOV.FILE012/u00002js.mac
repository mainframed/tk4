*  THIS PROGRAM HAS NOT BEEN TESTED UNDER MVT
*  SPMODE  HAS  BEEN ADDED TOMAKE IT MVT COMPATABLE
*  USE THE PROGRAM FOR ONLY ONE TAPE   PER JOB STEP
* CALL THE DDNAME OF THE DD CARD ANY NAME YOU LIKE
* BUT THE PROGRAM IN PL1 MUST PASS THIS NAME TO SETMODE
* TWO OTHER DD CARDS MUST BE PRESENT TO ENABLE UNIT SWITCHING
* //NINETRK   DD  UNIT=(TAPE9,,DEFER)
* //SEVENTRK  DD  UNIT=(TAPE7,,DEFER)
* THE CORRECT MODE AND DENSITY ARE WRITTEN TO THE USER JFCB
* * JUST OPEN THE FILE NORMALLY AFTER  RECEIVING  N OR S FROM SETMODE
*  DON' T FORGET TO  SPECIFY BLP FOR YOUR DDNAME
SMOD     TITLE 'SETMODE- RE. BRANAGAN- CALLED BY PL/1 '
SETMODE  CSECT
***********************************************************************
*  SETMODE SUBROUTINE - MARCH 1970
*      THIS SUBROUTINE IS TO BE CALLED BY A PL/1 PROGRAM TO
*      DETERMINE THE MODE AND DENSITY IN WHICH A TAPE CAN BE READ
*              PL/1 WILL SUPPLY A TABLE OF FOUR FIELDS,IN THE
*              ORDER:-
*          (1) FILE - WHICH IS A FULL WORD BINARY FIELD WHICH,
*              WHEN THE PROGRAM IS INITIALLY CALLED,WILL
*              CONTAIN THE VALUE 1. IT"S VALUE WILL BE OTHER
*              THAN 1 WHEN THE CALLING PROGRAM WISHES TO READ
*              SUBSIQUENT DATA SETS ON AN UNLABELLED TAPE
*
*          (2) DDNAME - OF THE STATEMENT WHICH DESCRIBES THE
*              TAPE UNIT WHICH IS FIRST TO BE TRIED. 8 BYTES
*
*          (3) RETURN CODE - ON RETURN FROM THE PROGRAM ONE OF
*              THREE CODES WILL BE PLACED IN THIS FIELD. 1 BYTE
*             (A) U -> TAPE IS UNREADABLE
*             (B) S -> TAPE IS STANDARD LABELLED
*             (C) N -> TAPE IS UNLABELLED
*
*          (4) MODE - MODE TAPE IS READABLE IN - 1 BYTE
***********************************************************************
R0       EQU   0
R1       EQU   1                        DOPE VECTOR TABLE
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
         BEGIN BASE=R10
*
         L     R1,0(R1)                 LOAD GR1 WITH THE DVT.
         ST    R1,DOPEVT                AND STORE
         L     R11,4(R1)                FIND DDADDRESS
         MVC   DDNAME(8),0(R11)         MOVE DDNAME TO FIELD STORE
*
         LR    R11,R1                   FIND  THE FILE SEQUENCE NUMBER
         L     R11,0(R11)
         L     R11,0(R11)
*
         SPMODE  PROB,0
*
         C     R11,=F'1'                IF HIGH WE
         BH    NEXTFILE                 UPDATE FILE SEQ NO. IN JFCB
*
         MVC   DCB+40(8),DDNAME         MOVE DDNAME TO
*                                       DCB BEFORE OPEN
         XC    SWSWAP,SWSWAP           CLEAR SWITCH
*
OPEN     OPEN  (DCB,)                  OPEN THE DATA SET FOR EXCP
*                                       BLP. SHOULD HAVE BEEN SPECIFIED
         XC    ECB(4),ECB              CLEAR ECB
         MVI   SWS,X'00'               CLEAR SWS
         MVC   IOBCPROG,=AL3(CHANPRG1+8)  RESET CHAN PROG
         MVI   DCB+44,12                NO ERROR RETRIES
BMAIN    L     R11,DCB+44               LOAD DEB ADDRESS INTO GR11
         L     R1,32(R11)              LOAD UCB ADDR INTO R0
         TM    17(R1),X'80'            TEST FOR SEVEN TRACK
         BNO   BMAIN1
*
         LA    R7,15                   SEVEN TRACK MODE
         LA    R8,MODETABL+1           TESTING
         B     BMOVE
*
BMAIN1   LA    R7,1                    NINE TRACK MODE
         LA    R8,MODETABL             TESTING
*
BMOVE    MVC   32(1,R11),0(R8)          LOAD THE MODE INTO THE DEB
         EXCP  IOB                      ISSUE THE READ
         WAIT  ECB=ECB                  AND REWIND
*
         CLI   ECB,X'7F'                CHECK FOR A
         BE    READOK                   GOOD READ
         NI    DCB+44,X'3F'
         MVC   IOBCPROG,=AL3(CHANPRG1)
         LA    R8,1(R8)                 TRY ANOTHER MODE IF
         BCT   R7,BMOVE                 NOT A GOOD READ
*
         CLI   SWSWAP,X'FF'
         BE    FINI
         L     R1,16                   FIND THE
         L     R1,0(R1)                TCB
         L     R1,4(R1)                AND THEN THE
         L     R1,12(R1)               TIOT
         LA    R1,24(R1)               DDSTART
         LR    R4,R1
         SR    R2,R2
CLC      IC    R2,0(R1)
         CLC   DDNAME(8),4(R1)         LOOK FOR DDNAME PESSED
         BNE   TESTDD
*
         L     R3,16(R1)
         TM    17(R3),X'80'            TEST UCB FOR
         BNO   SEVEN                   SEVEN OR NINE TRACK
*
         IC    R2,0(R4)                9 TRACK
COMP9    CLC   4(8,R4),=C'NINETRK '
         BNE   AR9
         B     FINSH
*
AR9      AR    R4,R2                   INCREMENT AND
         IC    R2,0(R4)                LOOK FOR THE
         LTR   R2,R2                   END OF THE
         BZ    ERR5                    TIOT
         B     COMP9
*
SEVEN    IC    R2,0(R4)
COMP7    CLC   4(8,R4),=C'SEVENTRK'
         BNE   AR7
         B     FINSH
AR7      AR    R4,R2                   INCREMENT AND
         IC    R2,0(R4)                LOOK FOR THE
         LTR   R2,R2                   END OF THE
         BZ    ERR6                    TIOT
         B     COMP7
*
TESTDD   LTR   R2,R2                   INCREMENT TO FIND
         BZ    EOT                     DDNAME
         AR    R1,R2
         B     CLC
*
FINSH    MVI   SWSWAP,X'FF'
         LR    R2,R1
         CLOSE   (DCB,)
         LR    R1,R2
         MVC   16(4,R1),16(R4)
         B     OPEN
*
EOT      LA    R15,4
         B     ERROR
FINI     L     R1,DOPEVT                SET GR1 TO DOPE VECTOR TABLE
         L     R1,12(R1)                SET GR1 WITH RETURN CODE ADDR.
         MVI   0(R1),C'U'               U -> UNREADABLE
         B     RETURN
*
READ     RDJFCB (DCB,)                  NOW READ JFCB FOR UPDATING
         MVC   IOBCPROG,=AL3(CHANPRG2)  PREPARE TO READ WITH DATA TRANS
         XC    ECB(4),ECB               CLEAR ECB
*
         EXCP  IOB                      READ
         WAIT  ECB=ECB                  WAIT
*
         CLI   ECB,X'7F'                CHECK IF STILL OK
         BE    CARRYON
*
         L     R1,DOPEVT                IF THE READ WAS NOT GOOD THE
         L     R1,12(R1)                SECOND TIME THEN ISSUE A RETURN
         MVI   0(R1),C'P'               CODE OF P FOR PARTIALLY
         B     RETURN                   READABLE
*
CARRYON  CLC   TEST(4),=C'VOL1'         LOOK FOR STANDARD LABEL
         BE    SLABEL
*
         MVI   JFCB+66,X'01'            NO LABEL
         L     R1,DOPEVT                STORE THE INFORMATION
         L     R1,12(R1)                IN THE JFCB AND THE
         MVI   0(R1),C'N'               RETURN CODE
         B     BMODE
*
SLABEL   MVI   JFCB+66,X'02'            STANDARD LABEL
         L     R1,DOPEVT                STORE THE INFORMATION
         L     R1,12(R1)                IN THE JFCB AND THE
         MVI   0(R1),C'S'               RETURN CODE
*
         MVI   SWS,X'FF'                TURN SWITCH ON TO SIGNIFY
         MVC   IOBCPROG,=AL3(CHANPRG3)  THE MAIN DATA READ FOR STANDARD
         XC    ECB(4),ECB               LABELS
         EXCP  IOB
         WAIT  ECB=ECB                  FORWARD SPACE PAST THE LABELS
         CLI   ECB,X'7F'                AND RE-CHECK
         BNE   BERR003                  THE DENSITY AND MODE
         MVC   IOBCPROG,=AL3(CHANPRG1+8)  RESET CHAN PROG.
         XC    ECB(4),ECB               AND ECB
         B     BMAIN
READOK   CLI   SWS,X'FF'
         BNE   READ
*
BMODE    L     R1,DOPEVT                MOVE THE MODE
         L     R1,20(R1)                TO THE PARAMETER
         MVC   0(1,R1),0(R8)            LIST
*
         MVI   JFCB+93,X'03'            SET DEVICE
         MVC   MODE(1),0(R8)            CHARACTERISTICS
         NI    MODE,X'38'               IN JFCB
         OC    JFCB+93(1),MODE
*
         MVI   JFCB+94,X'03'            SET DENSITY
         MVC   MODE(1),0(R8)            IN JFCB
         NI    MODE,X'C0'
         OC    JFCB+94(1),MODE
*
*        ROUTINE TO WRITE BACK THE JFCB
*
RYTJFCB  L     R1,16                    SET GR1 -> CVT
         L     R4,12(R1)                SET GR4 -> SYSJOBQE DCB
         L     R5,28(R1)                SET GR5 -> TTR-MBBCCHHR RTN.
         L     R4,44(R4)                SET GR4 -> SYSJOBQE DEB
         MVC   DEBDISK(48),0(R4)        SAVE THE DEB
*
         LA    R0,DCBDISK               SET GR0 -> DCB.
         ST    R0,DEBDISK+24            STORE DCB POINTER IN DEB
*
         L     R1,0(R1)                 SET GR1 -> TCB POINTERS
         L     R1,4(R1)                 SET GR1 -> CURRENT TCB
         MVC   DEBDISK+24(1),28(R1)     SET PROTECTION KEY IN DEB
         OI    DEBDISK+24,X'0F'         SET DEB IDENTIFIER
*
         LA    R4,DEBDISK               SET GR4 -> DEB
         L     R1,12(R1)                SET GR1 -> TIOT
         LA    R1,24(R1)                SET GR1 -> FIRST DD ENTRY
         SR    R0,R0                    CLEAR R0
*
TIOTLOOP IC    R0,0(R1)                 SET GR0 = LENGTH OF DD ENTRY
         CLC   DDNAME(8),4(R1)          COMPARE FOR DDNAME
         BNE   *+14                     BRANCH NOT FOUND
         MVC   TTRDISK(3),12(R1)        STORE TTR OF JFCB
         B     WRITEXCP                 EXECUTE THE WRITE
         BXH   R1,R0,TIOTLOOP           LOOP UNTILL DDNAME FOUND
         B     BERR001                  NO DDNAME FOUND
*
WRITEXCP L     R0,TTRDISK               SET GR0 = TTR OF JFCB
         LR    R1,R4                    SET GR1 ->DEB.
         LA    R2,IOBDISK+32            SET GR2 -> MBBCCHHR AREA
         LR    R15,R5                   SET GR15 -> CONVERT ROUTINE
         LR    R6,R10
         STM   R9,R13,FIVEFUL          SAVE GR9 -GR13
         BALR  14,15                    LINK TO CONVERSION ROUTINE
         LR    R10,R6
*
         LM    R9,R13,FIVEFUL          RESTORE GR9 - GR13
         LA    R0,CPDISK                SET GR0 TO CHANNEL PROGRAM
         ST    R0,IOBDISK+16            STORE CHANNEL PROGRAM ADDRESS
         XC    ECBDISK,ECBDISK
         EXCP  IOBDISK                  EXECUTE WRITE
         WAIT  ECB=ECBDISK              WAIT
         CLI   ECBDISK,X'7F'
         BNE   BERR002
         CLOSE (DCB,REREAD)
*
RETURN   GOBACK
ERROR    ST    R1,ABEND                 ABEND
         L     R1,ABEND+4               ROUTINE
         OR    R1,R15
         SVC   13
*
BERR001  ABEND 1,DUMP                  NO USER DDNAME FOUND
BERR002  ABEND 2,DUMP                  I/O ERROR ON WRITING JFCB
BERR003  ABEND 3,DUMP                  I/O ERROR ON REREADING TAPE
ERR5     ABEND 5,DUMP                  NO DDNAME OF NINETRK FOUND
ERR6     ABEND 6,DUMP                  NO DDNAME OF NINETRK FOUND
*
NEXTFILE STH   R11,JFCB+68              STORE NEW FILE SEQUENCE
         B     RYTJFCB                  IN JFCB AND WRITE BACK
*
DOPEVT   DS    F
DDNAME   DS    CL8
FILESEQ  DS    F
*
DCB      DCB   DDNAME=ANYNAME,MACRF=E,EXLST=EXITLIST,DSORG=PS,         X
               DEVD=TA
*
ECB      DC    F'0'
IOB      DS    0F                       THE IOB FOR
         DC    X'40'                    READING THE
         DS    CL4                      TAPE
         DC    AL3(ECB)
         DS    CL9
IOBCPROG DC    AL3(CHANPRG1)
         DS    CL1
         DC    AL3(DCB)
         DS    CL4
         DC    H'1'
*
EXITLIST DS    0F                       EXITLIST FOR READING
         DC    X'87'                    THE JFCB
         DC    AL3(JFCB)
*
JFCB     DS    44F
*
MODETABL DC    X'C3'                   800/1600 BPI
         DC    X'7B',X'73',X'6B',X'63',X'53'              556
         DC    X'BB',X'B3',X'AB',X'A3',X'93'     7 TRACK  800 BPI
         DC    X'3B',X'33',X'2B',X'23',X'13'              200
*
CHANPRG1 CCW   X'27',TEST,X'60',1      BACKSPACE
         CCW   X'02',TEST,X'30',80     SUPPRESS DATA TRANSFER - READ
*
CHANPRG2 CCW   X'27',TEST,X'60',1      BACKSPACE
         CCW   X'02',TEST,X'20',80     READ
*
         DS    0D
TEST     DS    CL80
SWS      DC    X'00'
*
CHANPRG3 CCW   X'63',TEST,X'20',1       FORWARD SPACE FILE
*
MODE     DS    CL1
*
DEBDISK  DS    12F
DCBDISK  DS    10F
         DC    H'0',X'8000',A(DEBDISK),X'12',23X'00'
TTRDISK  DC    F'0'
IOBDISK  DC    X'42',A(ECBDISK,0,0,CPDISK,DCBDISK,0,0),2A(0)
*
CPDISK   CCW   X'31',IOBDISK+35,X'40',5
         CCW   X'08',CPDISK,0,0
         CCW   X'05',JFCB,0,176
*
ECBDISK  DC    F'0'
*
ABEND    DS    F
         DC    X'80',AL3(0)
FIVEFUL  DS    5F
SWSWAP   DC    X'00'
FR11     DS    F
         END
