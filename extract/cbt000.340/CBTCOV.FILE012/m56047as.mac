         MACRO
&LABEL   ZCSECT &GETMAIN=0,&REG=REG,&WKLEN=0
.*
.*  &&SYSLIST      POSITIONAL PARAMETERS INDICATE ORDER OF BASE REGS.
.*                 REGISTERS IN DECENDING SEQUENCE PLEASE FOR
.*                 EFFICIENCY, BUT NOT NECESSARY
.*
.*  &&GETMAIN=     NUMBER OF SAVE AREAS TO BE DYNAMICALLY AQUIRED
.*                 OR 'NEXT' TO INDEX DOWN A PREVIOUSLY AQUIRED AREA
.*                 BY '   LA 13,72(13)    '
.*
.*
.*  &&REG=         VALUE TO BE USED FOR EQUATING REGISTERS. 'REG' IS
.*                 THE DEFAULT SUPPLIED BY THE MACRO.
.*
.*
.*  &&WKLEN=       THE LENGTH OF AN ADDITIONAL WORK AREA TO BE
.*                 GETMAINED AT THE END OF THE REGISTER SAVE AREA.
.*                 THIS CAN BE USED AS A WORK AREA ADDRESSED BY
.*                 REGISTER 13. (A DSECT SHOULD BE USED).
.*
.*
         GBLA  &EQUATE       USED FOR REGISTER NO. IN EQU CONSTANTS
         GBLA  &SIZE         PASSED ON TO FREEMAIN WITHIN ZRETURN
         GBLA  &INDX                   INDEX FOR ARRAY
         GBLC  &NAME(75)               ARRAY TO HOLD &SYSECT AND &SIZE
.*                                     AND &&WKLEN
.*
         LCLB  &MULTI  '1' IF BASE REGS NOT SPECIFIED IN DECENDING SEQ.
         LCLA  &IND    USED AS A SUBSCRIPT ALONG &&SYSLIST  VALUES
         LCLA  &DISP   CALCULATED VALUES FOR ASSEMBLER INSTRUCTIONS
.*
.*
.* ****  SET UP CSECT NAME, DEFAULT CONSTANTS, AND EQUATE REG IF REQD.
&LABEL   CSECT
         USING *,15
&SIZE    SETA  0
&DISP    SETA  18
.EQUATE  ANOP
         AIF   (&EQUATE GT 15).SAVE
&REG&EQUATE EQU &EQUATE
&EQUATE  SETA  &EQUATE+1
         AGO   .EQUATE
.*
.*
.* ****  SAVE REGISTERS, DETERMINE SAVEAREA TYPE
.SAVE    ANOP
         SAVE  (14,12),,*
         LR    11,13
.*
         AIF   ('&GETMAIN' EQ '0').NONRENT
         AIF   (T'&GETMAIN EQ 'N').GETMAIN
         AIF   ('&GETMAIN' EQ 'NEXT').BUMP
         MNOTE 4,'ILLEGAL OPERAND FIELD GETMAIN=&GETMAIN'
.*
.* ****  USER SAVEAREA FOR NON-RENT CODE
.NONRENT ANOP
         CNOP  0,4
         BAL   13,*+4+&DISP*4
IHB&SYSNDX DC  &DISP.A(0)
         AGO   .CHAIN
.*
.* ****  AQUIRE MULTIPLE AREAS FOR NUMBER INDICATED IN &&GETMAIN
.GETMAIN ANOP
&SIZE    SETA  (&DISP*4)*&GETMAIN
         AIF   ('&INDX' GE '75').MNOTE1
&INDX    SETA  &INDX+1
&NAME(&INDX) SETC '&LABEL'
&INDX    SETA  &INDX+1
&NAME(&INDX) SETC '&SIZE'
&INDX    SETA  &INDX+1
&NAME(&INDX) SETC '&WKLEN'
         GETMAIN R,LV=&SIZE+&WKLEN,SP=13
         LR    13,1
.XC256   ANOP
         AIF   ('&SIZE' LE '256').XC
         XC    0(256,1),0(1)
         LA    1,256(0,1)
&SIZE    SETA  &SIZE-256
         AGO   .XC256
.XC      ANOP
         XC    0(&SIZE,1),0(1)
         LM    15,1,16(11)
         AGO   .CHAIN
.MNOTE1  MNOTE 8,'MORE THAN 25 ZCSECTS WITH GETMAIN ISSUED'
         MEXIT
.*
.* ****  INDEX DOWN TO NEXT PHYSICAL AREA FROM PREVIOUS &&GETMAIN BLOCK
.BUMP    ANOP
         LA    13,&DISP*4(0,13)
.*
.* ****  COMPLETE SAVEAREA CHAINING ACCORDING TO O.S. CONVENTIONS
.CHAIN   ANOP
         XR    12,12
         STM   11,12,4(13)
         ST    13,8(11)
.*
.* ****  IF NO BASE, THEN ASSUME REG 12
.* ****  IF ONE SPECIFIED, THEN ACCEPT THAT AS BASE REG.
.* ****  IF MORE THAN ONE SPECIFIED, ALTERNATIVE BASE CONSTRUCTION REQD
.* ****  IF REG13 IS SPECIFIED, USE SAVE AREA AS START OF BASE
         AIF   (N'&SYSLIST GT 1).BASE
&IND     SETA  12
         AIF   (N'&SYSLIST EQ 0).BALR
&IND     SETA  &SYSLIST(1)
         AIF   (&IND EQ 13).USER13
.BALR    ANOP
         BALR  &IND,0
         USING *,&IND
         MEXIT
.*
.USER13  USING IHB&SYSNDX,&IND
         MEXIT
.*
.* ****  IF REG 13 IS SPECIFIED AS FIRST BASE, ASSUME THAT SAVE
.* ****  AREA IS TO BE USED AS ADDRESSABLE START OF PROGRAM
.*
.BASE    ANOP
         AIF   (&SYSLIST(1) NE 13).BASEX
.*
.* ****  MULTIPLE BASE CONSTRUCTION USING REG13 AS FIRST. BUILDS A
.* ****  LIST OF ADCONS AND USINGS AND LOADS THEM UP BY A 'LM' IF
.* ****  POSSIBLE
.*
&MULTI   SETB  0
         USING IHB&SYSNDX,13
&IND     SETA  N'&SYSLIST
.R13LOOP USING IHB&SYSNDX+4096*(&IND-1),&SYSLIST(&IND)
         DC    A(IHB&SYSNDX+4096*(&IND-1))
&IND     SETA  &IND-1
         AIF   (&IND EQ 1).LOAD
         AIF   (&SYSLIST(&IND) EQ &SYSLIST(&IND+1)+1).R13LOOP
&MULTI   SETB  1
         AGO   .R13LOOP
.* ****  MULTIPLE BASE CONSTRUCTION, USES FIRST BASE AS A ' BAL '
.* ****    AROUND ADCONS FOR THE REST OF THE BASES.
.BASEX   ANOP
&DISP    SETA  N'&SYSLIST
         CNOP  0,4
         BAL   &SYSLIST(1),*+&DISP*4
         USING *,&SYSLIST(1)
.*
.* ****  STARTING AT THE HIGHEST BASE, WORK DOWN THE LIST CREATING
.* ****      ONE ADCON AND USING INSTRUCTION FOR EACH BASE FOUND
.* ****      ENSURING ALL BASES ARE MULTIPLES OF 4096 AWAY FROM
.* ****      FIRST BASE REG. POSITION
&MULTI   SETB  0
&IND     SETA  N'&SYSLIST
.LOOP    ANOP
&DISP    SETA  (4096*(&IND-1))-((N'&SYSLIST-&IND)*4)
         USING *+&DISP,&SYSLIST(&IND)
         DC    A(*+&DISP)
&IND     SETA  &IND-1
         AIF   (&IND EQ 1).LOAD
.* ****  TEST FOR DECENDING SEQUENCE OF BASE REGISTERS
         AIF   (&SYSLIST(&IND) EQ &SYSLIST(&IND+1)+1).LOOP
&MULTI   SETB  1
         AGO   .LOOP
.*
.* ****  HAVING CONSTRUCTED THE LIST OF ADCONS, &&MULTI IS INSPECTED
.* ****  TO SEE IF ONE ' LM ' INSTRUCTION CAN BE USED ,
.* ****  OTHERWISE A SERIES OF ' L ' INSTRUCTIONS WILL HAVE TO BE USED
.LOAD    ANOP
         AIF   (&MULTI EQ 0).LOADM
&IND     SETA  &IND+1
&DISP    SETA  ((&IND-2)*8)+4
         L     &SYSLIST(&IND),*-&DISP
         AIF   (N'&SYSLIST GT &IND).LOAD
         MEXIT
.LOADM   ANOP
&IND     SETA  N'&SYSLIST-1
         LM    &SYSLIST(N'&SYSLIST),&SYSLIST(2),*-&IND*4
         MEND
