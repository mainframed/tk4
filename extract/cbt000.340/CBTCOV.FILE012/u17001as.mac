P60014   CSECT
**********************************************************************
**********************************************************************
**                                                                  **
**       GENERAL FILE PRINT EXTRACT PROGRAM.                        **
**                                                                  **
**********************************************************************
**********************************************************************
         PRINT NOGEN
         SPACE 3
**********************************************************************
*                                                                    *
*        PROGRAM HOUSEKEEPING.                                       *
*                                                                    *
**********************************************************************
         SPACE 2
MBEGIN   STM   R14,R12,12(R13)          SAVE REG'S IN CALLING SAVEA
         LR    R11,R15                  LOAD R11 AS BASE REGISTER
         USING MBEGIN,R11,R10           TWO BASE REG'S NEEDED
         LA    R10,4090(R11)            SET UP BASE REG 2
         LA    R10,6(R10)               FINISH THE JOB
         ST    R13,MSAVEA+4             SAVE CALLING SAVEA ADDRESS
         LR    R15,R13                  R15 = CALLING SAVEA
         LA    R13,MSAVEA               R13 = THIS PROGS SAVEA
         ST    R13,8(R15)               CHAIN IN CALLING SAVEA
         B     *+76                     GET PAST SAVEAREA
MSAVEA   DS    18F
D010     L     R4,ALIT                   LOAD BASE REGISTER - LITERALS
         L     R5,AANDS                  LOAD BASE REGISTER - 'ANDS'
         L     R6,AORS                   LOAD BASE REGISTER - 'ORS'
         L     R7,AFLD                   LOAD BASE REGISTER - PRINT
         LA    R8,PRAREA                 POINT TO HEADING LINE 1
         CALL  GETDAT,(DAND,DATE)        GET IPL DATE FOR HEADING
         BAL   R9,PHDR                   GO PRINT HEADINGS
         EJECT
**********************************************************************
*                                                                    *
*        READ A PARAMETER CARD.                                      *
*                                                                    *
**********************************************************************
         SPACE 2
D020     BAL   R9,PWRITE                 SPACE ONE LINE
         BAL   R9,CDREAD                 GO READ AND PRINT DATA CARD
         CLI   CDAREA,C' '               TEST IF COLUMN 1 BLANK
         BNE   D810                      NO, ERROR
         CLI   CDAREA+4,C' '             TEST IF COLUMN 4 BLANK
         BNE   D810                      NO, ERROR
         CLI   CDAREA+71,C' '            TEST IF COLUMN 72 BLANK
         BNE   D810                      NO, ERROR
         CLC   CDAREA+1(3),DREC          TEST IF 'REC' CARD
         BE    D110                      BRANCH IF YES
         CLC   CDAREA+1(3),DHDR          TEST IF 'HDR' CARD
         BE    D210                      BRANCH IF YES
         CLC   CDAREA+1(3),DAND          TEST IF 'AND' CARD
         BE    D310                      BRANCH IF YES
         CLC   CDAREA+1(3),DORS          TEST IF 'ORS' CARD
         BE    D310                      BRANCH IF YES
         CLC   CDAREA+1(3),DFLD          TEST IF 'FLD' CARD
         BE    D410                      BRANCH IF YES
         B     D810                      GO TO ERROR ROUTINE
         EJECT
**********************************************************************
*                                                                    *
*        'REC' CARD ROUTINE.                                         *
*                                                                    *
**********************************************************************
         SPACE 2
D110     CLI   DVTP,X'40'               TEST IF NOT FIRST 'REC CARD
         BNE   D810                     NOT FIRST, SO ERROR
         CLC   CDAREA+5(3),DUTE         TEST IF 'UT' PARAMETER
         BE    D120                     YES, VALID
         CLC   CDAREA+5(3),DVS          TEST IF 'VS' PARAMETER
         BNE   D810                     GO TO ERROR IF NOT
D120     MVC   DVTP,CDAREA+5            STORE DEVICE TYPE
         MVC   CDAREA(72),CDAREA+7      BYPASS FIRST PARAMETER
         MVI   POSNCHK,C','             SET TEST FOR COMMA
         BAL   R9,D800                  GO SEPARATE RECNO
         CVD   R3,WORK                  RECS TO PRINT IN DECIMAL
         ZAP   RCNO,WORK(8)             SAVE RECS TO PRINT
         MVC   CDAREA(4),CDAREA+1       POINT TO NEXT CARD PARAMETER
         CLC   CDAREA(3),DPUT           TEST IF FILE 'PUT'
         BE    D140                     YES, VALID SO BRANCH
         CLC   CDAREA(3),DCHR           TEST IF 'CHR' PRINT
         BE    D140                     YES, VALID SO BRANCH
         CLC   CDAREA(3),DHEX           TEST IF 'HEX' PRINT
         BE    D140                     YES, VALID SO BRANCH
         CLC   CDAREA(3),DFLD           TEST IF 'FLD' PRINT
         BNE   D810                     NO, INVALID SO BRANCH
D140     MVC   PRTP,CDAREA              STORE PRINT TYPE
         B     D020                     GO TO READ ANOTHER CARD
         EJECT
**********************************************************************
*                                                                    *
*        'HDR' CARD VALIDATION ROUTINE.                              *
*                                                                    *
**********************************************************************
         SPACE 2
D210     CLI   PRTP,C'F'                TEST IF 'FLD' WAS REQUESTED
         BNE   D810                     NO, GO TO ERROR ROUTINE
         LH    R3,HDCT                  RESTORE 'HDR' CARD COUNT
         LA    R3,1(R3)                 ADD 1 TO IT
         STH   R3,HDCT                  PUT IT BACK FOR LATER
         CH    R3,DH06                  TEST IF MORE THAN 6
         BH    D810                     YES, BRANCH TO ERROR ROUTINE
         BCTR  R3,R0                    SUBTRACT 1 FROM COUNT
         MH    R3,DH66                  MULTIPLY FOR OFFSET
         LA    R2,HDRF                  POINT TO FIRST SPACE
         AR    R3,R2                    ADD CALCULATED OFFSET
         MVC   0(66,R3),CDAREA+5        MOVE THE HEADING DATA TO STORE
         B     D020                     GO READ ANOTHER CARD
         EJECT
**********************************************************************
*                                                                    *
*        AND / ORS CARD VALIDATION ROUTINE.                          *
*                                                                    *
**********************************************************************
         SPACE 2
D310     MVC   HOLDAORO,CDAREA+1        STORE 'A' OR 'O' CARD TYPE
         MVC   CDAREA(72),CDAREA+4      POINT TO FIRST DECISION
D320     MVC   CDAREA(72),CDAREA+1      ADVANCE BY 1 BYTE
         CLI   CDAREA,C' '              TEST IF SPACE FOUND
         BE    D020                     YES, GO READ ANOTHER CARD
         MVC   HOLDTYPE,CDAREA          STORE CHARACTER TYPE FOR TEST
         MVI   POSNCHK,C' '             SET BLANK FOR DELIMETER
         BAL   R9,D800                  GO SEPARATE DISPOSITION
D330     STH   R2,COMPINST+2            MOVE DISPLACEMENT TO INST.
         OI    COMPINST+2,X'70'         ADD BASE FOR DATA ADDRESS
         CLI   HOLDTYPE,C'B'            TEST IF 'BOTH' TEST REQ'D
         BE    D380                     YES, BRANCH
         LR    R2,R4                    POINT TO CURRENT LITAREA SPACE
         L     R3,ALIT                  POINT TO LITAREA BEGINNING
         SR    R2,R3                    FIND DISPLACEMENT WITHIN IT
         STH   R2,COMPINST+4            PUT IT INTO THE INSTRUCTION
         OI    COMPINST+4,X'40'         INSERT R4 AS BASE REGISTER
         MVC   HOLDCOND,CDAREA          STORE TEST TYPE
         CLI   HOLDTYPE,C'P'            TEST IF PACKED FIELD
         BE    D350                     YES, BRANCH
         CLI   HOLDTYPE,C'C'            TEST IF CHARACTER FIELD
         BNE   D810                     NO, ERROR
*        BUILD CHARACTER LITERAL.
         SR    R2,R2                    CLEAR R2 FOR CHAR LITERAL
D340     MVC   CDAREA(72),CDAREA+1      POINT TO DATA BYTE 1
         CLI   CDAREA,C','              TEST IF END
         BE    D345                     YES, BRANCH
         LA    R2,1(R2)                 ADD 1 TO DATA COUNT
         CH    R2,DH256                 TEST IF 256 BYTES LONG YET
         BH    D810                     MORE - ERROR.
         MVC   0(1,R4),CDAREA           MOVE 1 BYTE TO LITERAL POOL
         LA    R4,1(R4)                 ADD 1 TO LITERAL COUNT
         B     D340                     RETURN FOR ANOTHER BYTE
D345     BCTR  R2,R0                    SUBTRACT 1 FROM DATA COUNT
         STC   R2,COMPINST+1            STORE AS LENGTH IN INSTR.
         MVI   COMPINST,X'D5'           STORE OP. CODE (CLC)
         B     D360                     BYPASS PACKED LITERAL BUILD
*        BUILD PACKED LITERAL.
D350     MVI   WORK,C'0'                MOVE ZERO TO FIRST CHAR
         MVC   WORK+1(15),WORK          PROPAGATE THRU FIELD
         SR    R3,R3                    CLEAR R3 FOR WORK
D352     MVC   CDAREA(72),CDAREA+1      POINT TO FIRST DATA BYTE
         CLI   CDAREA,C','              TEST FOR END OF FIELD
         BE    D355                     YES, BRANCH
         LA    R3,1(R3)                 ADD 1 TO INPUT DATA COUNT
         CH    R3,DH16                  TEST FOR 16 BYTES YET
         BH    D810                     BRANCH IF MORE - ERROR
         CLI   CDAREA,C'0'              TEST AGAINST ZERO
         BL    D810                     LOW - NOT NUMERIC - ERROR
         CLI   CDAREA,C'9'              TEST AGAINST 9
         BH    D810                     HIGH - NOT NUMERIC - ERROR
         MVC   WORK(15),WORK+1          LEFT-JUSTIFY 1 BYTE
         MVC   WORK+15(1),CDAREA        MOVE DATA DIGIT TO WORK END
         B     D352                     RETURN TO GET'EM LOOP
D355     PACK  WORK,WORK                PACK LITERAL
         SRL   R3,1                     DIVIDE LENGTH BY 2
         LA    R3,1(R3)                 ADD 1 TO LENGTH
         LA    R2,WORK+16               R2 = END OF WORK
         SR    R2,R3                    LESS ACTUAL LENGTH
         STH   R3,HOLDLGTH              SAVE LENGTH
         BCTR  R3,R0                    SUBTRACT 1 FROM LENGTH
         STC   R3,*+5                   CHANGE NEXT INSTRUCTION
         MVC   0(8,R4),0(R2)            MOVE TO LITERAL POOL
         AH    R4,HOLDLGTH              UPDATE LITERAL COUNT
         STC   R3,COMPINST+1            STORE LENGTH IN INSTR.
         MVO   COMPINST+1(1),COMPINST+1(1) MOVE IT ACROSS
         MVI   COMPINST,X'F9'           STORE OP CODE (CP)
*
*        GENERATE 'AND' TESTS.
*
D360     CLI   HOLDAORO,C'O'            TEST IF 'ORS'
         BE    D370                     YES, BRANCH ELSE 'AND'
         MVI   COMPINST+6,X'07'         STORE BRANCH OP CODE
         OI    COMPINST+7,X'05'         STORE BR ADDRESS
         CLI   HOLDCOND,C'='            TEST IF '=' SPECIFIED
         BNE   D362                     NO, BRANCH
         OI    COMPINST+7,X'70'         STORE 'BNE' OP CODE
         B     D365                     NOW OK
D362     CLI   HOLDCOND,C'<'            TEST FOR LESS THAN TEST
         BNE   D363                     NO, BRANCH
         OI    COMPINST+7,X'B0'         STORE 'BNL' OP CODE
         B     D365                     NOW OK
D363     CLI   HOLDCOND,C'>'            TEST FOR GREATER-THAN TEST
         BNE   D810                     NO, ERROR
         OI    COMPINST+7,X'D0'         STORE BNH OP CODE
D365     MVC   0(8,5),COMPINST          STORE INSTR. IN 'AND' AREA
         LA    5,8(5)                   UPDATE THE CURRENT POINTER
         BAL   9,D820                   PRINT THE INSTRUCTION
         B     D320                     RETURN TO LOOP
*
*        GENERATE 'ORS' TEST.
*
D370     MVI   COMPINST+6,X'07'         STORE 'BRANCH' OP CODE
         OI    COMPINST+7,X'06'         STORE ADDRESS
         CLI   HOLDCOND,C'='            TEST FOR 'EQUAL' SPECIFICATION
         BNE   D372                     NO, BRANCH
         OI    COMPINST+7,X'80'         STORE 'BE' OP CODE
         B     D375                     TEST NOW OK
D372     CLI   HOLDCOND,C'<'            TEST FOR 'LESS THAN'
         BNE   D373                     NO, BRANCH
         OI    COMPINST+7,X'40'         STORE 'BL' OP CODE
         B     D375                     TEST NOW OK
D373     CLI   HOLDCOND,C'>'            TEST FOR 'GREATER THAN'
         BNE   D810                     NO, ERROR SO BRANCH
         OI    COMPINST+7,X'20'         STORE 'BH' OP CODE
D375     MVC   0(8,R6),COMPINST        STORE IN 'ORS' AREA
         LA    R6,8(R6)                UPDATE ORS COUNT
         BAL   R9,D820                 GO PRINT THE INSTRUCTION
         B     D320                    GO READ ANOTHER CARD
*
*        'BOTH' ROUTINE. INTRA-RECORD TEST.
*
D380     MVI   POSNCHK,C','            ALLOW COMMA AS DELIMETER
         BAL   R9,D800                 GO FIND RECORD DISPLACEMENT
         STC   R2,COMPINST+1           STORE TEST LENGTH IN INSTR.
         MVC   CDAREA(72),CDAREA+1     BYPASS COMMA
         MVC   HOLDCOND,CDAREA         STORE TEST
         BAL   R9,D800                 GO FIND SECOND DISPLACEMENT
         STH   R2,COMPINST+4           STORE IN INSTRUCTION
         OI    COMPINST+4,X'70'        SET BASE REG AS 7
         MVI   COMPINST,X'D5'          USE 'CLC'
         B     D360                    GO FINISH INSTRUCTION
         EJECT
**********************************************************************
*                                                                    *
*        'FLD' CARD ROUTINE.                                         *
*                                                                    *
**********************************************************************
         SPACE 2
D410     EQU   *
         CLI   PRTP,C'F'               TEST IF 'FLD' WAS SPECIFIED
         BNE   D810                    NO, ERROR
         MVC   CDAREA(72),CDAREA+4     POINT TO FIRST PARAMETER
D420     MVC   CDAREA(72),CDAREA+1     BYPASS DELIMITER
         CLI   CDAREA,C' '             TEST IF CARD FINISHED
         BE    D020                    YES, GO READ ANOTHER CARD
         MVC   HOLDTYPE,CDAREA         STORE CHARACTER TYPE
         MVI   POSNCHK,C','            ALLOW COMMA AS DELIMITER
         BAL   9,D800                  GET POSITION IN RECORD
         STH   2,COMPINST+4            STORE IN INSTRUCTION
         OI    COMPINST+4,X'70'        STORE RECORD BASE REGISTER
         BAL   9,D800                  GET FIELD LENGTH (BYTES)
         STC   2,COMPINST+1            STORE IN INSTRUCTION
         STH   2,HOLDLGTH              STORE FOR LATER ASWELL
         BAL   9,D800                  GET OUTPUT DISPLACEMENT
         STH   2,COMPINST+2            STORE IN INSTRUCTION
         STH   2,HOLDISP               SAVE FOR LATER
         OI    COMPINST+2,X'80'        POINT TO PRINT AREA BASE
         CH    3,DH13                  TEST IF SECOND LINE
         BL    *+8                     NO, BYPASS NEXT INSTR.
         MVI   LNCT,C'2'               SET 'SECOND LINE' SWITCH
         CLI   HOLDTYPE,C'P'           TEST IF PACKED FIELD
         BE    D430                    YES, GO DO IT
         CLI   HOLDTYPE,C'C'           TEST IF CHARACTER FIELD
         BE    D425                    YES, GO TO ROUTINE
         CLI   HOLDTYPE,C'S'           TEST IF SIGNED UNPACKED
         BNE   D810                    NO, ERROR
D425     EQU   *
         MVI   COMPINST,X'D2'          USE 'MVC' OP CODE
         MVC   0(6,R7),COMPINST        STORE INSTRUCTION IN POOL
         LA    R7,6(R7)                POINT TO NEXT SLOT
         CLI   HOLDTYPE,C'S'           TEST IF SIGN TO BE REMOVED
         BNE   D426                    NO, BYPASS THIS LOT
         MVC   COMPINST+6(4),MVCFF     ADD SIGN-REMOVER INSTR.
         LH    R3,HOLDISP              RESTORE DISPLACEMENT
         LH    R2,HOLDLGTH             THEN LENGTH
         AR    R3,R2                   ADD FOR FIELD END
         STH   R3,COMPINST+8           STORE IN INSTRUCTION
         OI    COMPINST+8,X'80'        ENSURE BASE REG 8 USED
         MVC   0(4,R7),COMPINST+6      STORE INSTR. IN POOL
         LA    R7,4(R7)                POINT TO NEXT POOL SLOT
D426     EQU   *
         BAL   R9,D820                 GO PRINT INSTRUCTION
         B     D420                    GO DO NEXT FIELD
D430     MVI   COMPINST,X'F3'          SET UP 'UNPACK' INSTRUCTION
         LH    R2,HOLDLGTH             STORE LENGTH
         SLA   R2,1                    MULTIPLY BY 2
         STC   R2,HOLDLGTH             SAVE AGAIN
         MVO   COMPINST+1(1),HOLDLGTH(1) FIDDLE INTO INSTR.
         MVC   COMPINST+6(2),DORF      MOVE ZONE-CLEAR INSTR.
         AR    R2,R3                   GET DISPLACEMENT OF SIGN
         BCTR  R2,R0                   CORRECT IT
         STH   R2,COMPINST+8           USE IT IN ZONE-CLEAR INSTR.
         OI    COMPINST+8,X'80'        POINT BASE REGISTER
         MVC   0(10,R7),COMPINST       MOVE BOTH INSTS TO POOL
         LA    R7,10(R7)               POINT TO NEXT SLOT
         BAL   R9,D820                 PRINT INSTRUCTION
         B     D420                    GO DO NEXT FIELD
         EJECT
**********************************************************************
*                                                                    *
* ROUTINE TO CONVERT 1 TO 6 DECIMAL DIGITS TO BINARY IN R3 AND THE   *
*  SAME NUMBER LESS 1 IN R2........................                  *
*                                                                    *
**********************************************************************
         SPACE 2
D800     EQU   *
         MVC   WORK(6),DZRO             CLEAR WORK AREA TO ZERO
         SR    R2,R2                   CLEAR WORK REGISTER
D801     LA    R2,1(R2)                ADD 1 TO COUNT
         MVC   CDAREA(72),CDAREA+1     POINT TO NEXT DIGIT ON CARD
         CLI   CDAREA,C'0'             TEST AGAINST ZERO
         BL    D802                    LOW - MAY BE BLANK OR COMMA
         CH    R2,DH06                 TEST IF MORE THAN 6 DIGITS
         BH    D810                    YES, ERROR
         CLI   CDAREA,C'9'             TEST AGAINST 9
         BH    D810                    HIGH - MUST BE ERROR
         MVC   WORK(5),WORK+1          SHUFFLE DOWN 1 POSITION
         MVC   WORK+5(1),CDAREA        INSERT THE NEW DIGIT
         B     D801                    GO LOOK AT NEXT DIGIT
D802     CLI   POSNCHK,C','            TEST IF COMMA ALLOWED
         BNE   D803                    NO, BYPASS NEXT INSTR.
         CLI   CDAREA,C','             TEST IF COMMA
         BNE   D810                    NO, ERROR
D803     EQU   *
         CLC   DZRO,WORK               TEST IF FINAL NUMBER IS ZERO
         BE    D810                    YES, ERROR
         PACK  WORK+8(8),WORK(6)       PACK VALID NUMBER
         CVB   R2,WORK+8               NOW BINARY IN R2
         LR    R3,R2                   R3 = ACTUAL LTH
         BCTR  R2,R0                   R2 = LTH CODE OR DISP
         BR    R9                      RETURN FROM SUBROU
D810     MVI   ERRFLAG,C'X'            ERROR ROUTINE
         MVC   26(5,R8),DERR           MOVE 'ERROR' TO PRINT
         BAL   R9,D821                 CLEAR THE INSTRUCTION
         B     D020                    GO READ ANOTHER CARD
*
*        PRINT GOOD INSTRUCTION.
*
D820     UNPK  WORK(11),COMPINST(6)    UNPACK FIRST HALF
         UNPK  WORK+10(11),COMPINST+5(6) THEN THE REST
         TR    WORK(20),TRTABLE-240    TRANSLATE INTO CHARACTER
         CLC   WORK+12(4),DZRO         TEST IF TWELVE BYTES ENOUGH
         BNE   *+10                    NO, BYPASS NEXT INSTRUCTION
         MVC   WORK+12(4),DSPC         MOVE SPACES OVER ZEROS
         CLC   WORK+16(4),DZRO         TEST IF 16 BYTES ENOUGH
         BNE   *+10                    NO, BYPASS NEXT INSTRUCTION
         MVC   WORK+16(4),DSPC         MOVE SPACES OVER ZEROS
         MVC   26(12,R8),WORK          MOVE BEGINNING TO PRINT LINE
         MVC   39(8,R8),WORK+12        THEN SOME MORE
D821     XC    COMPINST(10),COMPINST   CLEAR INSTRUCTION BUILD AREA
         B     PWRITE                  GO PRINT IT
         EJECT
**********************************************************************
*                                                                    *
*        END OF CARDS.                                               *
*                                                                    *
**********************************************************************
         SPACE 2
D850     EQU   *
         CLI   ERRFLAG,X'40'           TEST IF ANY ERRORS FOUND
         BE    D860                    NO, CARRY ON PROCESSING
         MVC   21(13,R8),DCAN          MOVE CANCELLED MESSAGE PRINT
         BAL   R9,PWRITE               PRINT IT
         MVC   MRETCODE,F100           SET COND CODE = 100
         B     EOJ                     END PROGRAM
D860     MVC   0(2,R5),DBR6            FINISH 'AND' AREA WITH BRANCH
         MVC   0(2,R6),DBR5            SAME FOR 'ORS' AREA
         MVC   0(2,R7),DBR6            AND FOR 'FLD' AREA
         L     R2,AORS                 POINT R2 TO 'ORS' AREA
         CR    R6,R2                   TEST IF 'ORS' AREA ENTRIES
         BH    *+10                    YES, OMIT NEXT INSTRUCTION
         MVC   0(2,R6),DBR6            JUST BRANCH....
D870     L     R4,ALIT                 RELOAD LITERAL BASE REGISTER
         LA    R5,D900                 PUT R5 = PROCESSING START
         SP    PGCT,PGCT               ZEROISE PAGE COUNT
D880     LA    R9,D900                 PUT SUBROU RETURN = PROCESSING
         CLI   PRTP,C'F'               TEST IF 'FLD' SPECIFIED
         BE    D883                    YES, BRANCH
         CLI   PRTP,C'H'               TEST IF 'HEX' SPECIFIED
         BE    D882                    YES, BRANCH
         CLI   PRTP,C'P'               TEST IF FILE PUT SPECIFIED
         BE    D884                    YES, BRANCH
D881     MVC   HDAREA(102),HDRC        USE STANDARD 'CHR' HEADING
         B     PHDR                    GO PRINT HEADING
D882     MVC   HDAREA(100),HDRH        USE STANDARD 'HEX' HEADING
         MVC   D915(4),D915+4          ALTER PRINT BRANCH INSTRUCTION
         B     PHDR                    GO PRINT HEADING
D883     LH    R3,HDCT                 RESTORE HEADING-CARD COUNT
         LA    R3,1(R3)                ADD 1 TO IT
         SRA   R3,R1                   DIVIDE BY TWO FOR LINES
         STH   R3,HDCT                 SAVE HEADING COUNT
         MVC   HDAREA(110),HDRF        MOVE TOP LINE HEADING
         MVC   HDRF(132),HDRC          MOVE STANDARD CHARACTER HEADING
         MVC   HDRC(132),HDRH          MOVE STANDARD HEX HEADING
         MVC   D910(4),D915+8          ALTER BRANCH INSTR. FOR HDINGS
         B     PHDR                    GO PRINT ONE NOW
D884     MVC   D915(4),D915+12         ALTER MATCH EQUAL ROUTINE
         OPEN  (UTOUT,OUTPUT)          OPEN OUTPUT FILE
         B     D881                    SAME AS CHR ROUTINE NOW
         EJECT
**********************************************************************
*                                                                    *
*        PROCESSING  SECTION.                                        *
*                                                                    *
**********************************************************************
         SPACE 2
D900     BAL   R6,READRTN              READ A RECORD
         BAL   R6,ANDAREA              PROCESS 'AND' TESTS
         BAL   R6,ORSAREA              PROCESS 'ORS' TESTS
D910     AP    OPCT,DP01               ADD 1 TO RECORD COUNT
         MVC   120(12,R8),DMSK         EDIT MASK FOR DATE
         ED    120(6,R8),IPCT+1        MOVE 'INPUT RECORD' COUNT
         ED    126(6,R8),OPCT+1        MOVE 'PRINTED RECORDS' COUNT
D915     B     D920                    GO TO 'CHR' PRINT ROUTINE
         B     D930                    GO TO 'HEX' PRINT ROUTINE
         B     D940                    GO TO 'FLD' PRINT ROUTINE
         B     D950                    GO TO FILE PUT ROUTINE
         EJECT
**********************************************************************
**        PRINT ROUTINES ..........                                 **
**                                                                  **
**    R7 = INPUT RECORD                                             **
**    R8 = PRINT LINE                                               **
**    R12 = RECSIZE                                                 **
**********************************************************************
*
*
*              CHARACTER PRINT ROUTINE.
*
*
D920     LA    R9,100                  R9 = PRINT POSITIONS / LINE
         SP    RCNO,DP01               SUBTRACT FROM RECS TO PRINT
D921     CR    R12,R9                  TEST IF RECORD FINISHED
         BNH   D923                    NO, BRANCH
         MVC   0(100,R8),0(R7)         MOVE TO PRINT AREA
         MVI   PLINE,C' '              SET FOR SINGLE SPACE
         ST    R9,SAVER9               SAVE R9 FOR LATER
         BAL   R9,PWRITE               GO PRINT THE LINE
         L     R9,SAVER9               RESTORE R9 AGAIN
         SR    R12,R9                  SUBTRACT PRINTED FROM REC. CNT
         AR    R7,R9                   ADD TO DISP IN RECORD
         B     D921                    RETURN TO LOOP
D922     MVC   0(0,R8),0(R7)           'EX' INSTRUCTION....
D923     BCTR  R12,R0                  SUBTRACT 1 FROM REC REMAINING
         EX    R12,D922                USE AS LENGTH FOR MOVE
         MVI   PLINE,C' '              SET FOR SINGLE SPACE
         BAL   R9,PWRITE               PRINT END OF RECORD
         B     D900                    GO TO PROCESS AGAIN
         EJECT
*               HEX PRINT ROUTINE
*
D930     EQU   *
         LA    COUNT,5                 PUT R5 = LINES PER 100 CHARS
         LA    LINEREG,LINE-1          LINEREG POINTS TO SPACE
D931     MVC   1(132,LINEREG),0(LINEREG) CLEAR LINE TO SPACES
         LA    LINEREG,132(LINEREG)    POINT TO NEXT LINE
         BCT   COUNT,D931              DO ABOVE 5 TIMES
*
NOP1     NOP   PRINT1                  ONLY DONE ONCE PER 100 CHARS
         MVC   LINE(14),RECHEAD        MOVE 'REC NO' TO PRINT
         MVC   LINE+14(8),EDPAT        MOVE EDIT PATTERN
         ED    LINE+14(8),RECNO        MOVE RECORD NUMBER
         OI    NOP1+1,X'F0'            ENSURE ONLY DONE ONCE PER 100
*
PRINT1   LA    COUNT,100               SET COUNT FOR LINE SIZE
         LA    BYTEREG,BTABLE+1        POINT TO CHAR POS LINE
         LA    LINEREG,LINE+31         POINT TO PRINT LINE
LOOP11   MVC   0(1,LINEREG),0(PRNTREG) MOVE CHARACTER VERSION LINE 1
         MVC   DIGIT,0(PRNTREG)        STORE DIGIT
         MVN   DIGIT,DXFF              JUST KEEP ZONE
         TR    DIGIT,TABLE             TRANSLATE FOT PRINT
         MVC   132(1,LINEREG),DIGIT    MOVE TO PRINT LINE  2
         MVC   DIGIT,0(PRNTREG)        STORE AGAIN
         MVZ   DIGIT,DXFF              JUST KEEP NUMERIC QUARTET NOW
         TR    DIGIT,TABLE             TRANSLATE AGAIN
         MVC   264(1,LINEREG),DIGIT    MOVE TO PRINT LINE 3
         MVC   396(1,LINEREG),0(BYTEREG) MOVE MAP TO LINE 4
         LA    LINEREG,1(LINEREG)      POINT TO NEXT PRINT POSITION
         LA    PRNTREG,1(PRNTREG)      POINT TO NEXT RECORD DIGIT
         LA    BYTEREG,1(BYTEREG)      POINT TO NEXT MAP BYTE
         BCTR  CNTREG,R0               SUBTRACT 1 FROM RECORD COUNT
         LTR   CNTREG,CNTREG           TEST IF MORE TO PRINT
         BZ    D932                    BRANCH IF NOT
         BCT   COUNT,LOOP11            DO AGAIN IF PRINT ROOM LEFT
D932     MVC   LINE+25(4),DCHAR        MOVE 'CHAR' CONSTANT
         MVC   LINE+157(4),DZONE       MOVE 'ZONE' CONSTANT
         MVC   LINE+289(4),DNUMR       MOVE 'NUMR' CONSTANT
         MVC   LINE+421(6),EDPAT       MOVE EDIT PATTERN
         ED    LINE+421(6),BCNT        EDIT 'HUNDREDS' COUNT FOR MAP
         AP    BCNT,DP10               ADD TO 'HUNDREDS' COUNT
         LA    COUNT,5                 SET COUNT FOR ACTUAL PRINTS
         LA    LINEREG,LINE            POINT TO FIRST 'LINE'
LOOP12   MVC   0(132,R8),0(LINEREG)    MOVE LINE TO PRINT FOR SUBROU
         MVI   PLINE,C' '              SET FOR SINGLE SPACE
         BAL   R9,PWRITE               GO PRINT THE LINE
         LA    LINEREG,132(LINEREG)    POINT TO THE NEXT ONE
         BCT   COUNT,LOOP12            RETURN AND DO 5 TIMES
         LTR   CNTREG,CNTREG           TEST IF MORE TO PRINT
         BP    D930                    YES, RETURN
         ZAP   BCNT,DP00               CLEAR 'HUNDREDS' COUNT
         NI    NOP1+1,X'0F'            RESET FIRST BYPASS
         SP    RCNO,DP01               SUBTRACT FROM RECS TO PRINT
         B     D900                    GO BACK TO PROCESSING
         EJECT
*
*        FIELD PRINT ROUTINE.
*
D940     BAL   R6,FLDAREA              PERFORM PRESET CODING
         MVI   PLINE,C' '              SET FOR SINGLE SPACE
         BAL   R9,PWRITE               PRINT THE LINE
         CLI   LNCT,C'2'               TEST IF TWO LINES
         BNE   D941                    NO, BRANCH
         MVC   0(132,R8),132(R8)       MOVE SECOND FOR PRINTING
         MVI   PLINE,C' '              SET FOR SINGLE SPACE
         BAL   R9,PWRITE               PRINT IT
D941     EQU   *
         SP    RCNO,DP01               SUBTRACT FROM RECS TO PRINT
         B   D900                      GO BACK TO PROCESSING
         EJECT
*
*              FILE OUTPUT ROUTINE.
*
D950     EQU   *
         PUT   UTOUT,(7)                WRITE OUTPUT RECORD
         SP    RCNO,DP01                SUBTRACT 1 FROM RECS-TO-PUT
         B     D900                     GO READ NEXT RECORD
         EJECT
**********************************************************************
*                                                                    *
*         CARD INPUT ROUTINE                                         *
*                                                                    *
**********************************************************************
         SPACE 2
CDREAD   EQU   *
         CALL  JCREAD,(CDAREA)         READ A CARD
         CLC   CDAREA(5),CARDEOF       TEST IF END OF FILE
         BE    D850                    YES, BRANCH
         MVC   21(80,R8),CDAREA        MOVE IT FOR PRINTING
         MVI   20(R8),C'*'             ADD AN ASTERISK TO LOOK NICE
         MVI   PLINE,C' '              SET FOR SINGLE SPACE
         B     PWRITE                  PRINT IT
         EJECT
**********************************************************************
*                                                                    *
*         PRINT OUTPUT ROUTINE                                       *
*                                                                    *
**********************************************************************
         SPACE 2
PWRITE   EQU   *
         MVC   PLINE+1(132),PRAREA     MOVE DATA TO BE PRINTED
         CALL  PGENPRTA,(PLINE)        PRINT IT
         AP    LINECNT,DP01            ADD 1 TO LINE COUNT
         CP    LINECNT,DP56            TEST IF PAGE FULL
         BH    PHDR                    YES, BRANCH
         MVI   0(R8),C' '              CLEAR PRINT
         MVC   1(131,R8),0(R8)         CLEAR THE LINE TO SPACES
         BR    R9                      RETURN TO CALLER
PHDR     ST    R9,SAV9                 STORE R9
         ZAP   LINECNT,DP00            CLEAR LINE COUNT
         MVI   0(R8),C' '              CLEAR FIRST PRINT POS
         MVC   1(131,R8),0(R8)         CLEAR REST OF LINE
         MVI   PLINE,C'1'              SET FOR NEW PAGE
         BAL   R9,PWRITE               SKIP TO NEW PAGE
         MVC   0(132,R8),HDAREA        MOVE HEADING FOR PRINT
         AP    PGCT,DP01               ADD 1 TO PAGE COUNT
         ED    126(4,R8),PGCT          MOVE PAGE COUNT TO LINE
         CLI   HDCT+1,X'02'            TEST IF SECOND HEADING
         BL    PHDX                    NO, BYPASS THIS LOT
         MVI   PLINE,C'0'              SET FOR DOUBLE SPACE
         BAL   R9,PWRITE               GO PRINT THIS LINE
         MVC   0(132,R8),HDAREA+132    MOVE SECOND HEADLINE DATA
         CLI   HDCT+1,X'03'            TEST IF 3 HEADINGS
         BL    PHDX                    NO, BYPASS CRAP
         BAL   R9,PWRITE               PRINT THIS LINE
         MVC   0(132,R8),HDAREA+264    MOVE THIRD HEADING
PHDX     EQU   *
         MVI   PLINE,C'0'              SET FOR DOUBLE SPACE
         BAL   R9,PWRITE               PRINT A LINE
         L     R9,SAV9                 RESTORE R9
         BR    R9                      BRANCH TO IT
         EJECT
**********************************************************************
*                                                                    *
*         FILE CARE ROUTINE                                          *
*                                                                    *
**********************************************************************
         SPACE 2
READRTN  EQU   *
         TM    IOSW,X'01'              TEST IF FIRST TIME THRU
         BO    NOTFIRST                NO - BRANCH
         OI    IOSW,X'01'              CLEAR FIRST - TIME SWITCH
         CLI   DVTP,C'U'               TEST IF SEQUENTIAL
         BE    CHUT                    YES - BRANCH
         SPACE 2
*                                      ASSUME VSAM FILE BY DEFAULT
*
*        OPEN VSAM FILE
*
         MODCB ACB=VSACB,DDNAME=UTIN   ADD DDNAME TO ACB
         OPEN  VSACB                   OPEN THE FILE
         LTR   15,15                   TEST RETURN CODE
         BZ    OPENVS                  IF OK BRANCH
         ST    15,VSR15                STORE R15 FOR SUBROU
         CALL  MVSCHECK,(VSR15)        EXPAND VSAM ERROR CODES
VSERROR  EQU   *
         MVC   VAMESS(14),VSOG         MOVE MESSAGE
         CALL  MABEND,(VAPROG)         ABEND PROGRAM
OPENVS   EQU   *
         MVC   VSADDR,AVSRPL           POINT TO RPL FOR GET
         MVI   VSOG,C'G'               INDICATE A 'GET' TO BE DONE
         MODCB RPL=VSRPL,OPTCD=KEY     SET DEFAULT RPL = KEYED
         LA    14,VSACB                A(VSAM A.M. BLOCK)
         L     15,4(14)                ACBAMBL - A(A.M. BLOCK LIST)
         L     14,52(15)               AMBLDTA - A(DATA SET AMB)
         L     15,20(14)               A(A.M. DATASET STATISTICS)
         LA    14,1(15)                AMDATTR - A(ATTRIBUTES)
         TM    0(14),X'80'             TEST IF KSDS
         BO    READVS                  YES, RPL IS ALREADY KEYED
         TM    0(14),X'02'             TEST IF RRDS
         BO    READVS                  YES, RPL IS ALREADY KEYED
         MODCB RPL=VSRPL,OPTCD=ADR     SET FOR ADDRESSED ACCESS
         B     READVS                  GO NOW TO READ IT
         SPACE 2
*
*        OPEN QSAM FILE
*
CHUT     EQU   *                       SEQUENTIAL INPUT
         OPEN  UTDCB                   OPEN THE FILE
         EJECT
**********************************************************************
*                                                                    *
*         READ ROUTINES                                              *
*                                                                    *
**********************************************************************
         SPACE 2
NOTFIRST EQU   *
         CLI   DVTP,C'U'               TEST IF SEQUENTIAL
         BE    READUT                  YES - BRANCH
*                                      ASSUME VSAM INPUT BY DEFAULT
READVS   EQU   *
         CP    RCNO,DP01               TEST RECS TO PRINT
         BL    VSCLOSE                 ENOUGH DONE - CLOSE FILE
         GET   RPL=VSRPL               READ VSAM RECORD
         LTR   R15,R15                 TEST RETURN CODE
         BZ    VSR1                    IF OK GO TO VSR1
         ST    R15,VSR15               SAVE R15 FOR SUBROU
         CALL  MVSCHECK,(VSR15)        EXPAND RETURN CODE
         CLC   VSRET,VSEOF             TEST IF EOF
         BNE   VSERROR                 NO, ERROR
         MVC   ELINE+55(12),REACHED     SHOW EOF REACHED
VSCLOSE  EQU   *
         CLOSE VSACB                   YES, CLOSE FILE
         B     EOJ                     GO TO EOJ
VSR1     EQU   *
         L     R7,VSAMADDR             POINT R7 TO RECORD
         MVC   RCSZ,VSRPL+50           STORE RECORD SIZE
         B     READEND                 READ DONE AND OK
READUT   EQU   *
         CP    RCNO,DP01               TEST RECS TO PRINT
         BL    UTEOF1                  ENOUGH DONE, GO TO EOF
         GET   UTDCB                   READ SEQUENTIAL RECORD
         LR    R7,R1                   POINT TO RECORD
         MVC   RCSZ,UTDCB+82           STORE RECSIZE
         TM    UTDCB+36,X'80'          TEST IF VARIABLE LENGTH
         BO    READEND                 YES, OK FROM DCB
         MVC   RCSZ,0(R1)              RECSIZE FROM REC BYTES 1 + 2
         LA    R7,4(R7)                BYPASS RECSIZE IN RECORD
READEND  EQU   *
         SR    R12,R12                 CLEAR R12
         LH    R12,RCSZ                PUT R12 = RECORD SIZE
         AP    IPCT,DP01               ADD 1 TO INPUT COUNT
         AP    RECNO,DP01              ADD 1 TO RECORD NUMBER
         BR    R6                      EXIT FROM ROUTINE
         EJECT
**********************************************************************
*                                                                    *
*         END OF FILE ROUTINES                                       *
*                                                                    *
**********************************************************************
         SPACE 2
UTEOF    EQU   *
         MVC   ELINE+55(12),REACHED    SHOW EOF REACHED
UTEOF1   EQU   *
         CLOSE UTDCB                   CLOSE INPUT FILE
EOJ      EQU   *
         CLI   PRTP,C'F'                TEST IF FLD WAS USED
         BE    EOJ10                    YES, BYPASS RECORD COUNTS
         MVC   PLINE(133),ELINE         MOVE TOTALS LINE
         ED    PLINE+1(8),IPCT          EDIT INPUT COUNT
         ED    PLINE+24(8),OPCT         EDIT OUTPUT COUNT
         CALL  PGENPRTA,(PLINE)         PRINT TOTALS LINE
         CLI   PRTP,C'P'                TEST IF FILE OUTPUT
         BNE   EOJ10                    NO, BYPASS NEXT INSTR.
         CLOSE UTOUT                    CLOSE OUTPUT FILE
EOJ10    EQU   *
         CNOP  0,4                      ALIGN TO FULLWORD
         B     *+8                      BYPASS COND CODE STORAGE
MRETCODE DC    F'0'
         L     R13,MSAVEA+4             R13 = CALLING PROGS SAVEA
         L     R14,12(R13)              R14 = RETURN ADDRESS
         L     R15,MRETCODE             SET RETURN CODE
         LM    R2,R12,28(R13)           RESTORE REGISTERS
         BR    R14                      EXIT FROM PROGRAM
         EJECT
**********************************************************************
**********************************************************************
**                                                                  **
**       R E G I S T E R S  U S E D .                               **
**                                                                  **
**********************************************************************
**********************************************************************
R0       EQU   0    WORK
R1       EQU   1    WORK
R2       EQU   2    WORK
R3       EQU   3    WORK
R4       EQU   4    LITERAL AREA BASE REGISTER
R5       EQU   5    'AND' AREA BASE REGISTER
R6       EQU   6    'ORS' AREA BASE REGISTER
R7       EQU   7    PRINT ROUTINE BASE REGISTER / RECORD POINTER
R8       EQU   8    WORK
R9       EQU   9    WORK / SUBROUTINE RETURN
R10      EQU   10   BASE REGISTER
R11      EQU   11   BASE REGISTER
R12      EQU   12   WORK
R13      EQU   13   WORK / SAVE AREA
R14      EQU   14   WORK
R15      EQU   15   WORK
*
*
*
PRNTREG  EQU   7
COUNT    EQU   6
CNTREG   EQU   12
LINEREG  EQU   2
BYTEREG  EQU   15
         EJECT
**********************************************************************
**********************************************************************
**                                                                  **
**C O N S T A N T S  A N D  S T O R A G E .                         **
**                                                                  **
**********************************************************************
**********************************************************************
*
*        'MVSCHECK' AND 'MABEND' PARAMETER AREAS
*
VSR15    DS    F
VSADDR   DC    A(VSACB)
VSOG     DC    CL8'O'
VSRET    DS    CL6
*
VAPROG   DC    CL8'P60014  '
VARET    DC    C'0100 '
VAMESS   DC    CL50' '
*
*        MISCELLANEOUS.
*
         DS    0D         )
         DS    F          )  FOR ALIGNMENT (SO WORK+8 IS DOUBLEWORD)
VSAMADDR DS    F
WORK     DS    CL16
RCND     DS    H
WRK2     DS    CL8
COMPINST DC    XL10'00'
DVTP     DC    CL1' '        DEVICE = T/D
PRTP     DC    CL1' '        PRINT TYPE
RCNO     DS    PL4'0'        RECORDS TO PRINT
RCSZ     DS    H'0'          REC SIZE
HDCT     DC    H'0'          HDR COUNT
HDAREA   DC    CL20' '
         DC    CL20'P60014.  SELECTIVE'
         DC    CL70' PRINT  UTILITY **'
DATE     DC    CL12' '
PAGE     DC    C'PAGE '
         DC    X'2020204040'
HDRF     DS    CL132
HDRC     DC    C'....5....1....5....2....5....3....5....4....5....5'
         DC    C'....5....6....5....7....5....8....5....9....5....100'
         DC    CL30' '
HDRH     DC    CL132' '
TRTABLE  DC    C'0123456789ABCDEF'
HOLDAORO DS    CL1
HOLDTYPE DS    CL1
HOLDCOND DS    CL1
POSNCHK  DC    C' '
ERRFLAG  DC    C' '
LNCT     DS    CL1           FLD LINES
HOLDLGTH DS    H
SAVER9   DS    F
SAV9     DS    F             SAVE R9 = RETURN ADDR
F0       DC    F'0'
ACBAREA  DS    F
F100     DC    F'100'
IOSW     DC    X'00'         1ST TIME SW
PGCT     DC    P'000'
IPCT     DC    P'0000000'    I/P REC CNT
OPCT     DC    P'0000000'    O/P REC CNT
DMSK     DC    X'402020202020402020202020'
DP00     DC    P'0'
DP01     DC    P'1'
DP10     DC    P'10'
DP56     DC    P'56'
DZRO     DC    CL6'000000'
DSPC     DC    C'    '
KEYLEN   DC    H'0'
DH04     DC    H'4'
DH06     DC    H'06'
DH256    DC    H'256'
DH13     DC    H'133'
DH66     DC    H'66'
DH16     DC    H'16'
HOLDISP  DC    H'0'
DXFF     DC    X'FF'
LINECNT  DC    PL2'0'
DORF     DC    X'96F0'
DBR6     DC    X'07F6'
DBR5     DC    X'07F5'
REACHED  DC    C'REACHED.      '
DPUT     DC    C'PUT'
DHDR     DC    C'HDR'
DREC     DC    C'REC'
DAND     DC    C'AND'
DORS     DC    C'ORS'
DFLD     DC    C'FLD'
DERR     DC    C'ERROR'
DUTE     DC    C'UT='
DVS      DC    C'VS='
DCHR     DC    C'CHR'
DHEX     DC    C'HEX'
DCAN     DC    C'JOB CANCELLED'
DNUMR    DC    C'NUMR'
DZONE    DC    C'ZONE'
DCHAR    DC    C'CHAR'
RECHEAD  DC    C'RECORD NUMBER'
MVCFF    DC    X'96F08000'
VSEOF    DC    C'080004'
CARDEOF  DC    C'/*EOF'
RBA      DC    F'0'
*
AORS     DC    A(ORSAREA)
ALIT     DC    A(LITAREA)
AANDS    DC    A(ANDAREA)
AFLD     DC    A(FLDAREA)
AVSRPL   DC    A(VSRPL)
*
ELINE    DC    C'-'
         DC    X'4020202020202020'
         DC    C' RECORDS READ. '
         DC    X'4020202020202020'
         DC    C' RECORDS SELECTED.'
         DC    CL113' EOF NOT REACHED.'
PLINE    DS    CL133
PRAREA   DS    CL264
         LTORG
CDAREA   DS    CL80
*
         DC    C' '
LINE     DS    5CL132
DIGIT    DS    C
TABLE    EQU   *
         DC    15X'00'
         DC    C'0'
         DC    15X'00'
         DC    C'1'
         DC    15X'00'
         DC    C'2'
         DC    15X'00'
         DC    C'3'
         DC    15X'00'
         DC    C'4'
         DC    15X'00'
         DC    C'5'
         DC    15X'00'
         DC    C'6'
         DC    15X'00'
         DC    C'7'
         DC    15X'00'
         DC    C'8'
         DC    15X'00'
         DC    C'9'
         DC    15X'00'
         DC    C'A'
         DC    15X'00'
         DC    C'B'
         DC    15X'00'
         DC    C'C'
         DC    15X'00'
         DC    C'D'
         DC    15X'00'
         DC    C'E0123456789ABCDEF'
BCNT     DC    PL3'0'
RECNO    DC    PL4'0'
EDPAT    DC    X'4020202020202020'
BTABLE   EQU   *
         DC    C'01...5...1'
         DC    C'0...15...2'
         DC    C'0...25...3'
         DC    C'0...35...4'
         DC    C'0...45...5'
         DC    C'0...55...6'
         DC    C'0...65...7'
         DC    C'0...75...8'
         DC    C'0...85...9'
         DC    C'0...95..100'
         EJECT
**********************************************************************
**                                                                  **
**       V S A M  A C B .                                           **
**                                                                  **
**********************************************************************
         SPACE 3
VSACB    ACB   MACRF=(ADR,KEY)
         SPACE 3
**********************************************************************
**                                                                  **
**       V S A M  R P L .                                           **
**                                                                  **
**********************************************************************
         SPACE 3
VSRPL    RPL   ACB=VSACB,AREA=VSAMADDR,AREALEN=4,OPTCD=(LOC),ARG=RBA
         SPACE 3
**********************************************************************
**                                                                  **
**       Q S A M  D C B ' S .                                       **
**                                                                  **
**********************************************************************
         SPACE 3
UTDCB    DCB   DDNAME=UTIN,DSORG=PS,EODAD=UTEOF,MACRF=(GL)
UTOUT    DCB   DSORG=PS,MACRF=(PM),DDNAME=UTOUT
         EJECT
**********************************************************************
**                                                                  **
**       S E L E C T I O N  I N S T R U C T I O N   P O O L S .     **
**                                                                  **
**********************************************************************
         SPACE 3
LITAREA  DS    CL400
ANDAREA  DS    CL200
ORSAREA  DS    CL200
FLDAREA  DS    CL200
         END
