***********************************************************************
*                                                                     *
* THIS MODULE IS AN EXPANSION OF THE STANDARD OS WRITER MODULE        *
* IEFSD087, PROVIDING THE FOLLOWING ADDITIONAL FACILITIES --          *
*                                                                     *
* 1. FORMS ALIGNMENT -- IF THE PROGRAMMER SPECIFIED THE NAME ALIGN IN *
*    HIS DD CARD,      E.G. SYSOUT=(A,ALIGN)      THIS WRITER WILL    *
*    PAUSE AFTER THE FIRST PAGE OF OUTPUT AND WILL ISSUE AN           *
*    APPROPRIATE WTOR MESSAGE. ACCORDING TO THE OPERATORS REPLY, THE  *
*    WRITER WILL CONTINUE NORMALLY PRINTING THE SECOND PAGE ONWARDS,  *
*    OR IT WILL REPEAT THE ABOVE SEQUENCE.                            *
*                                                                     *
* 2. MULTIPLE COPIES -- IF THE PROGRAMMER SPECIFIED THE NAME COPY* IN *
*    HIS DD CARD, WHERE * IS A DIGIT FROM 2 TO 9 INCLUSIVE, THE OUTPUT*
*    DATA SET WILL BE PRINTED THE SPECIFIED NUMBER OF TIMES.          *
*                                                                     *
* 3. MULTIPLE COPIES WITH FORMS ALIGNMENT -- THE PROGRAMMER CAN       *
*    REQUEST BOTH THE ABOVE FACILITIES BY SPECIFYING COPY*A IN HIS    *
*    DD CARD.      E.G. SYSOUT=(A,COPY2A)                             *
* 4. RESTART -- IF THE OPERATOR ENTERS CANCEL 00E, THIS WRITER WILL   *
*    RESPOND BY ISSUING A WTOR MESSAGE, GIVING THE OPERATOR THE CHOICE*
*    OF RESTARTING THE OUTPUT CURRENTLY BEING PRINTED, OR GENUINELY   *
*    CANCELLING IT. THIS IS USEFUL IN THE EVENT OF A PAPER-WRECK ON   *
*    THE PRINTER.                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*STATUS CHANGE LEVEL 000                                              *
*                                                                     *
*FUNCTION OF THIS MODULE                                              *
*                                                                     *
*    1. GET THE INDIVIDUAL RECORDS FROM THE DATASET.                  *
*    2. WRITE TO THE SYSTEM OUTPUT DEVICE ERROR MESSAGES IF THE DCB   *
*       IS NOT SATISFACTORY FOR QSAM PROCESSING OR IF THE IS AN       *
*       UNRECOVERABLE INPUT ERROR.                                    *
*    3. IF INPUT DATASET IS SPANNED AND OUTPUT IS NOT LOADS THE    VS0H
*       VARIABLE SPANNED ROUTINE (IEFSDXXX) AND DELETES IT WHEN    VS0H
*       THE INPUT DATASET IS DONE. IF EITHER INPUT OR OUTPUT IS    VS0H
*       SPANNED IEFSDXXX IS ENTERED TO INITIALIZE THE SPAN CONTROL VS0H
*       AREA AND GET CORE FOR AN AREA TO BUILD THE SPANNED RECORD  VS0H
*       IN IF NECESSARY. IT WILL FREE THIS AREA WHEN THE INPUT     VS0H
*       IS DONE.                                                   VS0H
*                                                                     *
*OPERATION OF THIS MODULE                                             *
*                                                                     *
*    ENTRY POINT 1 - IEFSD087 WHICH IS LINKED TO FROM IEFSD070 WHEN   *
*        THIS MODULE IS TO BE USER TO PUT OUT DATASETS.               *
*    INPUT AT ENTRY POINT 1                                           *
*        REGISTER 1 POINTS TO THE WORK LIST USED BY DSB AND SMB       *
*        ROUTINE.                                                     *
*                                                                     *
*    EXIT POINT 0.5 - BRANCH TO IEFSDXXX TO INITIALIZE THE SPAN    VS0H
*        CONTROL AREA IF INPUT OR OUTPUT IS VARIABLE SPANNED.      VS0H
*    INPUT AT EXIT POINT 0.5                                       VS0H
*        REGISTER 7 POINTS TO THE WORK LIST USED BY DSB AND SMB    VS0H
*        ROUTINE.                                                  VS0H
*        REGISTER 8 POINTS TO THE PARAMETER LIST GIVEN TO SMB AND  VS0H
*        DSB PROCESSING ROUTINES.                                  VS0H
*                                                                  VS0H
*    EXIT POINT 1 - BRANCH TO IEFSD088 TO DO THE START TRANSITION     *
*        ROUTINE.                                                     *
*    OUTPUT AT EXIT POINT 1                                           *
*        REGISTER 7 POINTS TO THE WORK LIST USED BY DSB AND SMB       *
*        ROUTINE.                                                     *
*        REGISTER 8 POINTS TO THE WORK AREA FOR STANDARD OUTPUT       *
*        ROUTINE.                                                     *
*                                                                     *
*    EXIT POINT 2 - BRANCH TO IEFSD089 TO DO THE PUT FOR EACH RECORD. *
*    OUTPUT AT EXIT POINT 2                                           *
*        REGISTER 7 POINTS TO THE WORK LIST USED BY DSB AND SMB       *
*        ROUTINE.                                                     *
*        REGISTER 8 POINTS TO THE PARAMETER LIST GIVEN TO SMB AND     *
*        DSB PROCESSING ROUTINES.                                     *
*                                                                     *
*    EXIT POINT 3 - BRANCH TO IEFSD098 TO DO THE END TRANSITION       *
*        ROUTINE.                                                     *
*    OUTPUT AT EXIT POINT 3                                           *
*        REGISTER 7 POINTS TO THE WORK LIST USED BY DSB AND SMB       *
*        ROUTINE.                                                     *
*        REGISTER 8 POINTS TO THE WORK AREA FOR STANDARD OUTPUT       *
*        ROUTINE.                                                     *
*                                                                     *
*    EXIT POINT 4- RETURN TO IEFSD078 IF SYSOUT WORK DONE.            *
*        THE REGISTERS ARE RESTORED TO AS THEY WERE ON LEAVING        *
*        IEFSD078.                                                    *
*                                                                     *
*EXTERNAL ROUTINES                                                    *
*                                                                     *
*    IEFSD088 THE TRANSITION ROUTINE                                  *
*    IEFSD089 THE OUTPUT ROUTINE                                      *
*   IEFSDXXX SPANNED DATASETS ROUTINE                              VS0H
*    IEFSD078 SYSOUT WRITER LINK-TO-DSB/SMB                           *
*    IEFSD87M MESSAGES FOR IEFSD087                                   *
*                                                                     *
*TABLES/WORK AREAS                                                    *
*                                                                     *
*    THE WORK LIST USED BY DSB AND SMB ROUTINES -WORKLST              *
*                                                                     *
*        /---------------------------------------------------/        *
*        / VARBA *    /            /            /            /        *
*        /---------------------------------------------------/        *
*        / DCBOT    -OUTPUT DCB ADDRESS                      /        *
*        /---------------------------------------------------/        *
*        / DCBIN    -ADDRESS OF INPUT DCB OR MESSAGE BUFFER  /        *
*        /---------------------------------------------------/        *
*        / WOSPS *                                           /        *
*        /---------------------------------------------------/        *
*        / WOSPT *                                           /        *
*        /---------------------------------------------------/        *
*        / WOSAP *                                           /        *
*        /---------------------------------------------------/        *
*        / WOSVA    -REGISTER SAVE AREA                      /        *
*        /---------------------------------------------------/        *
*        /     ( 17 MORE FULL WORDS )                        /        *
*        /---------------------------------------------------/        *
*               /            /            /            /              *
*               /            /            /            /              *
*               /            /            /            /              *
*        /---------------------------------------------------/        *
*        / WOWRN    -NAME OF SYSOUT PROGRAM TO WRITE DATA SET/        *
*        /---------------------------------------------------/        *
*        /     ( 1 MORE FULL WORD )                          /        *
*        /---------------------------------------------------/        *
*        / WOTIO    -ADDRESS OF PREVIOUSLY USED TIOT         /        *
*        /---------------------------------------------------/        *
*        / WJFCB    -JFCB ADDRESS                            /     VS0H
*        /---------------------------------------------------/     VS0H
*        / WOTIQ    -POINTER TO CANCEL ECB IN CSCB           /     VS0H
*        /---------------------------------------------------/     VS0H
*        / WOXXX    -ADDRESS OF SPANNING MODULE              /     VS0H
*        /---------------------------------------------------/     VS0H
*        / WOXXA    -LOCATION OF SPANNING CONTROL            /     VS0H
*        /---------------------------------------------------/     VS0H
*        / WOLCL    -LENGTH AND SEGMENT INDICATION           /     VS0H
*        /---------------------------------------------------/     VS0H
*                                                                     *
*                * VAPBA                                              *
*                  128 = FTFTW    - THE OUTPUT DEVICE IS A 1442       *
*                   64 = PUNSH    - THE OUTPUT IS TO BE PUNCH TYPE    *
*                   32 = UNRWR    - THE OUTPUT DEVICE IS UNIT RECORD  *
*                                                                     *
*                * WOSPS                                              *
*                  ADDRESS OF PARLIST, OR SIZE OF AREA GOT FOR        *
*                  SCRATCHING A DATA SET                              *
*                                                                     *
*                * WOSPT                                              *
*                  ADDRESS OF START OF MESSAGE, OR LOCATION OF        *
*                  AREA GOT FOR SCRATCHING A DATA SET                 *
*                                                                     *
*                * WOSAP                                              *
*                  THE FIRST BYTE IS THE RETURN CODE GOT FROM         *
*                  SCRATCHING A DATASET, THE REST IS THE LOCATION     *
*                  OF THE REGISTER SAVE AREA GIVEN TO THE MODULES     *
*                  BY IEFSD078.                                       *
*                                                                     *
*    WORK AREA FOR STANDARD OUTPUT ROUTINE -WKSOR                     *
*                                                                     *
*        /---------------------------------------------------/        *
*        / SORS1 *    / CONCH *    / SAVED *    / SAVEC *    /        *
*        /---------------------------------------------------/        *
*        / LOCAT    -ADDR IN PREVIOUS RECORD FOR CNTRL CHAR  /        *
*        /---------------------------------------------------/        *
*        / INLSF    -LENGTH OF INPUT MESSAGE                 /        *
*        /---------------------------------------------------/        *
*        / INLOC    -LOCATION OF INPUT MESSAGE               /        *
*        /---------------------------------------------------/        *
*        / OTLWR    -LENGTH OF OUTPUT MESSAGE                /        *
*        /---------------------------------------------------/        *
*        / OTLSF    -UNUSED                                  /        *
*        /---------------------------------------------------/        *
*        / OTLOC    -UNUSED                                  /        *
*        /---------------------------------------------------/        *
*        / SRETR    -LOCATION OF LINKORS REGISTER SAVE AREA  /        *
*        /---------------------------------------------------/        *
*        / SMSVA    -REGISTER SAVE AREA                      /        *
*        /---------------------------------------------------/        *
*        /     ( 17 MORE FULL WORDS )                        /        *
*        /---------------------------------------------------/        *
*               /            /            /            /              *
*               /            /            /            /              *
*               /            /            /            /              *
*        /---------------------------------------------------/        *
*        / BALRG    -RETURN REGISTER SAVED HERE              /        *
*        /---------------------------------------------------/        *
*        / BCTSW *    /                                               *
*        /------------/                                               *
*                                                                     *
*                * SORS1                                              *
*                128 = OLDSW    - THE INITIAL WORK HAS BEEN DONE      *
*                                   ON THESE MESSAGES OR THIS         *
*                                   DATASET                           *
*                   64 = MACHS    - THE INPUT DATA HAS MACHINE        *
*                                   CONTROL CHARACTERS                *
*                   32 = INERS    - AN INPUT ERROR, A BAD CONTROL     *
*                                   CHARACTER TO TRANSLATE OR         *
*                                   THE DATA SET WAS NEVER OPENED     *
*                   16 = LRERS    - THE DATA SET WAS NEVER OPENED     *
*                                                                     *
*                * CONCH                                              *
*                  THE UNTRANSLATED CONTROL CHARACTER                 *
*                                                                     *
*                * SAVED                                              *
*                  THE SAVE CHARACTER FOR NEXT RECORD                 *
*                                                                     *
*                * SAVEC                                              *
*                  THE SAVE CHARACTER FOR THIS RECORD                 *
*                                                                     *
*                * BCTSW                                              *
*                  THE NUMBER OF RECORDS TO PUT AT END OF             *
*                  DATA SET OR MESSAGES                               *
*                                                                     *
*                                                                     *
*ATTRIBUTES - REENTRANT                                               *
*                                                                     *
***********************************************************************
*                        NEEDED DSECTS
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*DEFINE DCB LABELS FOR DCB OF MAXIMUM SIZE
         DCBD  DSORG=PS
*DEFINE DCB AND OPEN AND CLOSE. (EODAD,SYNAD,OPEN,AND CLOSE TO ADD)
TODCB    DSECT
         DCB   DSORG=PS,                                               *
               MACRF=GL,                                               *
               BUFNO=2
SPOPN    OPEN  (0,INPUT),MF=L
SPCLO    CLOSE (0),MF=L
SPEXL    DC    F'0'                     DCB EXIT LIST
SPEXL1   DC    F'0'                    DCB EXIT LIST
BODCB    EQU   *
WRKDSECT DSECT
*THE WORK LIST USED BY DSB AND SMB ROUTINE
WORKLST  DS    0F
VARAR    DS    0F                       VARIABLE
VARBA    DS    C                        SWITCHES
FIFTW    EQU   128                      1442 SWITCH
PUNSH    EQU   64                       PUNCH SWITCH
UNRWR    EQU   32                       UNIT RECORD WRITER SWITCH
         DS    0F
DCBOT    DS    F                        OUTPUT DCB
DCBIN    DS    F                        INPUT DCB OR MESSAGE BUFFER
WOTIQ    DS    F                        ECB FOR CANCEL
WOSPS    DS    F                        SAVE PARAMETER AREA
WOSPT    DS    F                        SAVE POINTER TO MESSAGE
WOSAP    DS    F                        SAVE AREA POINTER
WOSVA    DS    18F                      SAVE AREA
WOWRN    DS    2F                 ROUTINE USED TO WRITE DATASET    000F
WOTIO    DS    F                        TIOT POINTER FOR OUTPUT ONLY
WJFCB    DS    F                        SAVE JFCB ADDRESS          000F
WOXXX    DS    F                        ADDRESS OF SPANNING MODULE VS0H
WOXXA    DS    F                        LOCATION OF SPANNING CORE  VS0H
WOLCL    DS    F                        LENGTH AND SEGMENT IND.    VS0H
WORKEND  EQU   *
*WORK AREA FOR STANDARD OUTPUT ROUTINE
WKSOR    DS    0F
SORS1    DS    C                        SWITCHES
OLDSW    EQU   128                      OLD SWITCH
MACHS    EQU   64                       MACHINE SWITCH
INERS    EQU   32                       PERMANENT IO INPUT ERROR
LRERS    EQU   16                       LRECL FIELD ZERO
SPASW    EQU   8                        SPANNED INPUT SWITCH       VS0H
CNTGE    EQU   4                        CANT GET CORE SWITCH       VS0H
OVERT    EQU   2                        OVER 32K SWITCH            VS0H
ERRSW    EQU   1                        ERROR SWITCH               VS0H
CONCH    DS    C                        SAVE UNTRANSLATED CONTROL CHAR.
SAVED    DS    C                        SAVE CHARACTER FOR NEXT RECORD
SAVEC    DS    C                        SAVE CHARACTER FOR THIS RECORD
LOCAT    DS    A                        LOCATION OF LAST CONTROL CHAR.
INLSF    DS    F                        INPUT LENGTH IN STANDARD FORM
INLOC    DS    A                        INPUT RECORDS LOCATION
OTLWR    DS    F                        OUTPUT LENGTH WHOLE RECORD
OTLSF    DS    F                        OUTPUT LENGTH IN STANDARD FORM
OTLOC    DS    A                        OUTPUT RECORDS LOCATION
SRETR    DS    F                        SAVE RETURN REGISTER HERE
SMSVA    DS    18F                      SAVE AREA
BALRG    DS    F                        INFORMATION SAVE AREA
BCTSW    DS    C                        BUFFER COUNT SWITCH
SEGIN    DS    C                        SEGMENT FROM LAST INPUT    VS0H
*******************  ADDITIONAL SWITCHES, ETC.  ***********************
         DS    0F
COPYCNT  DS    C
ALIGNREP DS    C
SWITCHES DS    C
OKSW     EQU   1
SKIPSW   EQU   2
ALIGNCNT DS    C
ALIGNECB DS    F
***********************************************************************
WKSOE    DS    0F
*CONTROL AREA FOR SPANNING                                         VS0H
WORKFXXX DSECT                                                     VS0H
         DS    0F                                                  VS0H
ATENW    DS    18F                      SAVE AREA                  VS0H
SWXXX    DS    C                        SWITCHES                   VS0H
WATPT    EQU   1                        WORK AREA TO BE PUT SW     VS0H
WABPT    EQU   2                        WORK AREA BEING PUT SW     VS0H
DTASW    EQU   4                        DATA SET SWITCH            VS0H
INSEG    DS    C                        INPUT SEGMENT INDICATION   VS0H
INSEW    DS    C                        SAVE FOR ABOVE             VS0H
         DS    C                                                   VS0H
MAXI1    DS    F                        INITIAL  MAX. INPUT        VS0H
MAXO1    DS    F                                 MAX  OUTPUT       VS0H
MINO1    DS    F                                 MIN. OUTPUT       VS0H
MAXI2    DS    F                        WORKING  MAX. INPUT        VS0H
MAXO2    DS    F                                 MAX. OUTPUT       VS0H
MINO2    DS    F                                 MIN. OUTPUT       VS0H
MAXI3    DS    F                        SAVED    MAX. INPUT        VS0H
MAXO3    DS    F                                 MAX. OUTPUT       VS0H
MINO3    DS    F                                 MIN. OUTPUT       VS0H
SOUTL    DS    F                        OUTPUT LENGTH              VS0H
         DS    F                        OUTPUT LOCATION            VS0H
INLSW    DS    F                        SAVE INPUT LENGTH          VS0H
INLOW    DS    F                        SAVE INPUT LOCATION        VS0H
LENLO    DS    F                        LOCATION OF LENGTH OUTPUT  VS0H
         DS    F                        LENGTH OUTPUT (SOMETIMES)  VS0H
WOKRL    DS    F                        LENGTH OF WORK AREA        VS0H
WOKRA    DS    F                        LOCATION OF WORK AREA      VS0H
         DS    F                        PLACE FOR GET MAIN STUFF   VS0H
WORKEEND EQU   *                                                   VS0H
BSKWA    DS    168C                     WORK AREA FOR NON DATASETS VS0H
WORKFEND EQU   *                                                   VS0H
*EQUATES
ASASW    EQU   4                        ASA CONTROL CHARACTER
MACSW    EQU   2                        MACHINE CONTROL CHARACTER
NOTLA    EQU   X'1'                     NOT LAST SEGMENT           VS0H
NOTFI    EQU   X'2'                     NOT FIRST SEGMENT          VS0H
VARSP    EQU   X'48'                    VARIABLE SPANNED RECFM     VS0H
CVT      EQU   16                                                  000F
MFTWO    EQU   X'74'                                               000F
MFTBT    EQU   X'20'                                               000F
VARSW    EQU   64                       VARIABLE SWITCH WHEN NOT FIXED
FIXSW    EQU   128                      FIXED SWITCH WHEN NOT VARIABLE
UNKSW    EQU   VARSW+FIXSW              UNKNOWN SWITCH
*                                                                     *
*                   THIS ROUTINE IS THE STANDARD SYSOUT WRITER        *
*                   ROUTINE WHICH MAY BE USED TO WRITE OUT            *
*                   DATASETS INSTEAD OF ONE SUPPLIED BY THE           *
*                   USER. IT RECEIVES A 3 WORD REGISTER SAVE          *
*                   AREA THE ADDRESS OF WHICH IS IN REGISTER          *
*                   1. THE AREA HAS THE FOLLOWING APPEARANCE          *
*                                                                     *
*                    *************************************            *
*                    *        *        *        *        *            *
*                    *SWITCHES*        *        *        *            *
*                    *        *        *        *        *            *
*                    *************************************            *
*                    *                                   *            *
*                    *         ADDRESS OF OUTPUT DCB     *            *
*                    *                                   *            *
*                    *************************************            *
*                    *                                   *            *
*                    *         ADDRESS OF INPUT DCB      *            *
*                    *                                   *            *
*                    *************************************            *
*                                                                     *
*                   SWITCHES ARE AS FOLLOWS                           *
*                                                                     *
*                    LEFT MOST BIT (128) IS ON IF THE OUTPUT          *
*                    UNIT IS A 1442 PUNCH                             *
*                                                                     *
*                    NEXT BIT (64)  IS ON IF THE OUTPUT UNIT          *
*                    IS A PUNCH OR IF IT IS TAPE WHICH HAS A          *
*                    PUNCH AS ITS ULTIMATE DESTINATION                *
*                                                                     *
*                    NEXT BIT (32) IS ON IF THE OUTPUT UNIT           *
*                    IS A PRINTER OR A PUNCH.                         *
*                                                                     *
*                                                                     *
*                   A USER MAY WRITE A ROUTINE TO USE INSTEAD         *
*                   OF THIS. HE WILL HAVE THE ROUTINE IN THE          *
*                   LINK LIBRARY AND THE PROGRAM NAME IN THE          *
*                   SYSOUT FIELD OF THE DD STATEMENT. SEE JCL         *
*                   PUBLICATION.                                      *
*                                                                     *
*                   THE USERS PROGRAM WILL GET CONTROL WITH           *
*                   THE OUTPUT FILE OPEN AND THE INPUT FILE           *
*                   NOT OPENED.                                       *
*                                                                     *
*                   AT THE END OF HIS ROUTINE HE WILL CLOSE           *
*                   THE INPUT FILE AND RETURN. THE INPUT FILE         *
*                   WILL THEN BE DELETED FOR HIM.                     *
*                                                                     *
*INITIALIZE
IEFSD087 CSECT
*2153058300,064600,076800,079400,084400-084800                     CC0H
         SAVE  (14,12)                  SAVE REGISTERS
         BALR  R9,0                     SET BASE REGISTER
         USING *,R9
         LR    R7,R1                    SAVE PARAM REGISTERS
         USING WORKLST,R7
*GET CORE FOR WORK AREA
         LA    R0,WKSOE-WKSOR           GET SIZE OF WORK AREA
         GETMAIN R,LV=(0)               GET CORE FOR IT
         LR    R8,R1                    SET REGISTER TO WORK AREA
         USING WKSOR,R8
         ST    R13,SRETR                SAVE RETURN REGISTER
         LA    R13,SMSVA                GET SAVE AREA ADDRESS
***********************************************************************
         MVI   COPYCNT,1               SET NUMBER OF COPIES TO 1.
         CLC   WOWRN(4),=C'COPY'       IF THE MODULE WAS CALLED BY
         BNE   ACLEAR                  THE NAME COPY, RESET NUMBER OF
         MVN   COPYCNT(1),WOWRN+4      COPIES AS REQUESTED.
         B     ACLEAR
ONELESS  STC   R4,COPYCNT              AFTER 1ST TIME , ENTER HERE.
ACLEAR   MVI   ALIGNREP,0              CLEAR WORK AREA
         MVC   ALIGNREP+1(6),ALIGNREP
***********************************************************************
*CLEAR TRANSITION WRITE SWITCH
         MVI   BCTSW,X'00'              PUT COUNT TO 0
*
*        INIT CONTROL CHARS
*
         MVI   SAVEC,X'09'
         MVI   SAVED,X'09'
*TURN OFF SWITCHES
         MVI   SORS1,0
         MVI   SEGIN,0                  MAKE SEGMENT 0             VS0H
*PUT IN EXLST ROUTINE
         L     R6,DCBIN                 GET ADDRESS OF DCB
         USING IHADCB,R6
         LA    R10,SPEXL-TODCB(0,R6)    GET ADDRESS OF DCB EXIT LIST
         ST    R10,SPEXL-TODCB(0,R6)    SAVE IT
         MVC   DCBEXLST+1(3),SPEXL+1-TODCB(R6)
         MVC   SPEXL-TODCB(4,R6),WJFCB  PUT IN JFCB ADDRESS
         MVI   SPEXL-TODCB(R6),X'07'    SET HIGH ORDER BYTE AT 7
         MVC   SPEXL-TODCB+4(4,R6),ADING   PUT IN OPEN EXIT LIST ADDR
*OPEN INPUT
         LA    R1,SPOPN-TODCB(0,R6)     GET ADDRESS OF OPEN
         OPEN  ((R6),INPUT),TYPE=J,MF=(E,(1))
*PUT IN INPUT SYNAD AND EODAD ROUTINES
         MVC   DCBSYNAD+1(3),ADINE+1    PUT IN INPUT ERROR ROUTINE
         MVC   DCBEODAD+1(3),ADINF+1    PUT IN INPUT END OF FILE ROUT.
*SET MACHINE SWITCH TO INDICATE INPUT CONTROL CHARACTER TYPE
         TM    DCBRECFM,MACSW           TEST FOR MACHINE CNTRL CHAR
         BZ    VSPST                    BRANCH TO TEST SPAN IF NOT VS0H
         OI    SORS1,MACHS              TURN ON MACHINE SWITCH
*IS VARIABLE SPANNED OUTPUT                                        VS0H
VSPST    L     R15,WOXXX                GET SPANNED MODULE ADDRESS VS0H
         LTR   R15,R15                  IF A MODULE PRESENT        VS0H
         BNZ   SPANM                    THEN ENTER IT              VS0H
*IS VARIABLE SPANNED INPUT                                         VS0H
         TM    DCBRECFM,VARSP           IF NOT VS INPUT THEN       VS0H
         BNO   DTRRO                    BRANCH TO AVOID SPANNING   VS0H
*LOAD THE SPANNING MODULE                                          VS0H
         LOAD  EP=IEFSDXXX                                         VS0H
*SAVE THIS ADDRESS                                                 VS0H
         ST    R0,WOXXX                                            VS0H
*GET CORE FOR SPANNING WORK AREA                                   VS0H
         LA    R0,WORKFEND-WORKFXXX     GET SIZE                   VS0H
         GETMAIN R,LV=(0)               GET CORE                   VS0H
*SAVE THE GOT CORE OF SPANNING MODULE                              VS0H
         ST    R1,WOXXA                                            VS0H
*BRANCH TO THE SPANNING MODULE                                     VS0H
SPANM    L     R15,WOXXX                GET SPAN MODULE ADDRESS    VS0H
         O     R15,BATEY                USE 8 TO INDICATE DATASET  VS0H
         BALR  R14,R15                  GO TO SPANNING MODULE      VS0H
*DO TRANSITION ROUTINE
DTRRO    L     R15,SD88EXIT             GET ADDRESS FOR EXIT
         BALR  R14,R15
*IS THERE AN UNRECOVERABLE ERROR
         L     R10,WOSAP                GET ADDRESS ERROR RETURN PUT AT
         TM    19(R10),X'FF'            TEST FOR ERROR IF SO
         BNE   CLIDS                    BRANCH TO CLOSE INPUT
*IS THERE AN UNOPENED DATASET
         TM    SORS1,LRERS+INERS        TEST FOR UNOPENED DATASET
         BO    SD87EOFX                 IF SO BRANCH TO END OF FILE
*WAS CORE NEEDED FOR WORK AREA THAT WASNT AVAILABLE                VS0H
         TM    SORS1,OVERT+CNTGE        IF CANT GET NEEDED CORE    VS0H
         BNZ   SD87EREX                 GO TO WRITE MESSAGE        VS0H
*GET NEXT LOGICAL RECORD
GLOGR    L     R1,CVT                   TEST FOR MFT IF NOT        000F
         TM    MFTWO(R1),MFTBT                                     000F
         BZ    GLOGS                    BRANCH TO AVOID MFT STUFF  000F
         L     R1,WOTIQ                 SEE IF CANCEL              000F
         TM    0(R1),X'40'                                         000F
***********************************************************************
         BZ    GLOGS                   CANCEL BIT NOT SET.
         NI    0(R1),X'FF'-X'40'       SET OFF CANCEL BIT
         SR    R4,R4                   CLEAR COUNT REG.
         ST    R4,ALIGNECB             ALSO CLEAR ECB FOR WTOR.
         LA    1,WTORMFL2              CANCEL REQUESTED BY OPERATOR,
* FOLLOWING CARD INSERTED BY A J BEW 12/3/71
         WTOR  ,ALIGNREP,,ALIGNECB,MF=(E,(1))
         WAIT  ECB=ALIGNECB            WAIT FOR REPLY.
* FOLLOWING CARD INSERTED BY A J BEW 12/3/71
         CLI   ALIGNREP,C'R'   ISRESTART REQUIRED
         BNE   TRUCNCL                 IF NOT, SET COUNT TO 1.
RESTART  IC    R4,COPYCNT              IF SO, PICK UP CURRENT COUNT.
TRUCNCL  LA    R4,1(R4)                INCREMENT COUNT BY 1.
         STC   R4,COPYCNT              STORE IT IN SAVE FIELD.
         B     SD87EOFX                BRANCH TO END OF FILE RTN.
***********************************************************************
GLOGS    LR    R1,R6                    GET ADDRESS OF DCB         000F
         MVI   SEGIN,0                  GET 0 SEGMENT INDICATION   VS0H
         GET   (1)                      GET NEXT RECORD
*IS THERE A PERMANENT IO INPUT ERROR
         TM    SORS1,INERS              TEST FOR IO ERROR IF SO
         BO    PTICC                    BRANCH TO PUT MESSAGE CNTR CHAR
*GET LENGTH AND BEGINNING OF INPUT RECORD
         LH    R11,DCBLRECL             GET LENGTH
         LR    R12,R1                   GET BEGINNING
*GET SEGMENT INDICATION                                            VS0H
         TM    DCBRECFM,VARSP           IF NOT SPANNING THEN       VS0H
         BNO   SEGDN                    AVOID SAVING SEGMENT       VS0H
         MVC   SEGIN(1),2(R12)          GET SEGMENT INDICATION     VS0H
*IS SEGMENT O.K.                                                   VS0H
         L     R3,WOXXA                 GET PREVIOUS SEGMENT BASE  VS0H
         IC    R3,INSEG-ATENW(R3)       GET PREVIOUS SEGMENT       VS0H
         IC    R10,SEGIN                GET PRESENT SEGMENT        VS0H
         SRL   R10,1                    SHIFT TO ALIGN             VS0H
         XR    R10,R3                   IF SEG OK THE LOW BIT 0    VS0H
         N     R10,ONELY                ONLY LOW BIT LEFT. IF IT 1 VS0H
         BO    SEGER                    THEN BRANCH TO SEG. BAD    VS0H
SEGDN    EQU   *                        SAVE SEGMENT               VS0H
*IS THE INPUT RECORD IN VARIABLE FORMAT
         TM    DCBRECFM,FIXSW           TEST FOR NON VARIABLE IF SO
         BO    TFCCH                    BRANCH AROUND MODIFICATION
*MODIFY LENGTH AND BEGINNING LOCATION BY 4
         LA    R10,4                    MODIFY BY 4
         SR    R11,R10                  SUBTRACTED FROM LENGTH
         BM    SD87EREX                 ERROR AS RECORD TOO SHORT   076
         AR    R12,R10                  ADDED TO BEGINNING LOCATION
*IS THIS A SUBSEQUENT SEGMENT                                      VS0H
         TM    SEGIN,NOTFI              IF SUBSEQUENT SEGMENT THEN VS0H
         BO    TOOLD                    AVOID C.C. FIX             VS0H
*IS THERE A CONTROL CHARACTER
TFCCH    TM    DCBRECFM,ASASW+MACSW     TEST FOR NO CONTROL CHAR. IF SO
         BZ    ASPOC                    BRANCH TO PUT STANDARD ONE IN
*GET CONTROL CHARACTER
         MVC   CONCH,0(R12)             SAVE CONTROL CHARACTER
*MODIFY LENGTH AND BEGINNING LOCATION BY 1
         LA    R10,1                    MODIFY BY 1
         SR    R11,R10                  SUBTRACTED FROM LENGTH
         BM    SD87EREX                 ERROR AS RECORD TOO SHORT   076
         AR    R12,R10                  ADDED TO BEGINNING LOCATION
         B     TOOLD                    BRANCH TO TURN ON OLD SWITCH
*MAKE ASA SPACE 1 THE CONTROL CHARACTER
ASPOC    MVI   CONCH,C' '
*IS PRINTER OVERFLOWED
         L     R3,DCBOT                 GET DCB ADDRESS
         PRTOV (3),12,MASCH             IF OVER FLOWED BRANCH TO SKIP
*IS OLD SWITCH ON
         TM    SORS1,OLDSW              TEST FOR OLD SWITCH ON IF SO
         BO    TOOLD                    BRANCH TO DO OUTPUT ROUTINE
*MAKE ASA SKIP TO CHANNEL 1 THE CONTROL CHARACTER
MASCH    MVI   CONCH,C'1'
*TURN ON OLD SWITCH
***********************************************************************
TOOLD    TM    VARBA,UNRWR             OUTPUT TO PRINTER ?
         BZ    TOOLDB                  NO, SO IGNORE MODIFICATIONS.
         TM    SWITCHES,OKSW           IS FORM ALREADY ALIGNED ?
         BO    TOOLDB                  YES, SO SKIP
         CLC   WOWRN(5),=C'ALIGN'      IF MODULE WAS CALLED BY THE NAME
         BE    ASAORMC                 ALIGN, BRANCHTO NEXT TEST.
         CLI   WOWRN+5,C'A'            LIKEWISE FOR MULTIPLE COPIES
         BE    ASAORMC                 WITH ALIGNMENT.
         OI    SWITCHES,OKSW           SET ALREADY-ALIGNED SWITCH.
         B     TOOLDB                  BRANCH FOR NO ALIGNMENT.
ASAORMC  TM    SORS1,MACHS             IS IT M/C CARRIAGE CONTROL CHAR?
         BZ    ASACH                   BRANCH FOR ASA CHAR.
         TM    SWITCHES,SKIPSW         DID PREVIOUS RECORD CONTAIN A
         BO    AQUESTN                 SKIP-TO-CH-1 M/C CHAR ?
         CLI   CONCH,X'89'             NO,THEN DOES THIS RECORD ?
         BNE   ACOUNT                  NO, SO GO CHECK LINE COUNT.
         TM    SORS1,OLDSW             IS THIS START OF OUTPUT?
         BZ    TOOLDB                  YES, THEN DEFER ALIGNMENT.
         OI    SWITCHES,SKIPSW         NO, THEN INDICATE THIS RECORD
         B     TOOLDB                  CONTAINS M/C CHAR, AND PROCEED.
ASACH    CLI   CONCH,X'F1'             IS IT ASA SKIP-TO-CH-1 ?
         BNE   ACOUNT                  NO, SO GO CHECK LINE COUNT.
         TM    SORS1,OLDSW             IS THIS START OF OUTPUT ?
         BZ    TOOLDB                  YES, SO DEFER ALIGNMENT.
         B     AQUESTN                 NO, SO ISSUE WTOR.
ACOUNT   CLI   ALIGNCNT,60             HAVE 60 LINES BEEN PRINTED ?
         BE    AQUESTN                 YES, SO ISSUE ALIGNMENT MESSAGE.
         SR    R4,R4                   CLEAR REGISTER.
         IC    R4,ALIGNCNT             GET CURRENT LINE COUNT.
         LA    R4,1(R4)                INCREMENT BY 1.
         STC   R4,ALIGNCNT             STORE NEW VALUE.
         B     TOOLDB                  GO TO PRINT RECORD.
AQUESTN  LA    1,WTORMFL1              GET ALIGNMENT MESSAGE.
         SR    R4,R4                   CLEAR COUNT REG.
         ST    R4,ALIGNECB             ALSO CLEAR ECB FOR WTOR.
* FOLLOWING CARD INSERTED BY A J BEW 12/3/71
         WTOR  ,ALIGNREP,,ALIGNECB,MF=(E,(1))
         WAIT  ECB=ALIGNECB            WAIT FOR REPLY.
* FOLLOWING CARD INSERTED BY A J BEW 12/3/71
         CLI   ALIGNREP,C'C'   IS ALIGNMENT OK
         BNE   RESTART                 NO, GO RESTART OUTPUT.
         OI    SWITCHES,OKSW           SET ALREADY-ALIGNED SWITCH.
***********************************************************************
TOOLDB   OI    SORS1,OLDSW
*DO OUTPUT ROUTINE
         STM   R11,R12,INLSF            SAVE LOCATION AND BEGINNING
         L     R15,SD89EXIT             GET ADDRESS FOR EXIT
         BALR  R14,R15
*IS THERE AN UNRECOVERABLE ERROR
         L     R10,WOSAP                GET ADDRESS ERROR RETURN PUT AT
         TM    19(R10),X'FF'            TEST FOR ERROR IF SO
         BNE   CLIDS                    BRANCH TO CLOSE INPUT
*IS PERMANENT IO INPUT ERROR SWITCH ON
         TM    SORS1,INERS+OVERT+CNTGE+ERRSW IF IO CORRECT THEN    VS0H
         BZ    GLOGR                    BRANCH TO GET NEXT RECORD
*TURN ON OLD SWITCH
SD87EOFX OI    SORS1,OLDSW
*FIX NUMBER OF TRANSITION WRITES
         MVI   BCTSW,1                  PUT IN 1 FOR PAINTER
         TM    VARBA,PUNSH              TEST FOR PUNCH IF NOT
         BZ    DTRAN                    BRANCH TO DO TRANSITION
         MVI   BCTSW,3                  PUT IN 3 FOR PUNCH
*DO TRANSITION ROUTINE
DTRAN    L     R15,SD88EXIT             GET ADDRESS FOR EXIT
         BALR  R14,R15
*IS THERE A SPANNED MODULE                                         VS0H
CLIDS    L     R3,WOXXA                 GET SPANNING WORK AREA     VS0H
         LTR   R3,R3                    IF IT IS O THEN            VS0H
         BZ    CLIDU                    AVOID CLEAN UP             VS0H
*IS THERE A SPECIAL SPAN WORK AREA                                 VS0H
         USING WORKFXXX,R3                                         VS0H
         LM    R0,R1,WOKRL              GET SIZE AND ADDRESS       VS0H
         C     R0,ONSXA                 IF NOT OVER 168 THEN       VS0H
         BNH   TFSPO                    BRANCH AS NO CORE GOT      VS0H
*FREE SPECIAL SPAN WORK AREA                                       VS0H
         FREEMAIN R,LV=(0),A=(1)        FREE CORE                  VS0H
* IS THERE SPANNED OUTPUT                                          VS0H
TFSPO    L     R1,DCBOT                 GET DCB OUTPUT ADDRESS     VS0H
         TM    DCBRECFM-IHADCB(R1),VARSP  IF SPANNED THEN          VS0H
         BO    CLIDU                    AVOID DELETING SPAN MODULE VS0H
*FREE SPAN WORK AREA                                               VS0H
         LA    R0,WORKFEND-WORKFXXX     GET SIZE                   VS0H
         LR    R1,R3                    GET CORE                   VS0H
         FREEMAIN R,LV=(0),A=(1)        FREE CORE                  VS0H
*DELETE THE SPANNING MODULE                                        VS0H
         DELETE EP=IEFSDXXX                                        VS0H
         DROP  R3                                                  VS0H
*INDICATE SPANNING CODE NOT PRESENT                                VS0H
         XC    WOXXX(8),WOXXX                                      VS0H
*CLOSE INPUT
CLIDU    LA    R1,SPCLO-TODCB(0,R6)     GET ADDRESS OF CLOSE       VS0H
         CLOSE ((R6)),MF=(E,(1))
***********************************************************************
         SR    R4,R4                   CLEAR COUNT REG.
         IC    R4,COPYCNT              GET CURRENT COPY COUNT.
         BCT   R4,ONELESS              SUBTRACT 1. BRANCH IF MORE TO DO
***********************************************************************
*FREE INPUT POOLS
         LR    R1,R6                    GET ADDRESS OF DCB
         FREEPOOL (1)
*FREE WORK AREA
         L     R13,SRETR                GET RETURN REGISTER
         LA    R0,WKSOE-WKSOR           GET SIZE OF WORK AREA
         LR    R1,R8                    GET START OF IT
         FREEMAIN R,LV=(0),A=(1)
*SAVE RETURN INDICATION
         L     R10,WOSAP                GET ADDRESS ERROR RETURN PUT AT
         MVC   16(4,R13),16(R10)        PUT IT WHERE REG. 15 GETS IT
         RETURN (14,12)                 RETURN TO IEFSD085
*DOES DATASET HAVE FIELDS WHICH ARE NEEDED TO OPEN
SD87EXLS CLC   DCBBLKSI(2),FOURY        TEST FOR ZERO IF NOT
         BCR   7,R14                    BRANCH TO FINISH OPEN
         CLC   DCBBUFL(2),FOURY         TEST FOR ZERO IF NOT
         BCR   7,R14                    BRANCH TO FINISH OPEN
*FIX SO DATASET CAN COMPLETE OPEN
         LA    R10,18                   GET SMALLEST LENGTH
         STH   R10,DCBBLKSI             PUT IN BLOCK SIZE
         STH   R10,DCBLRECL            PUT IN LRECL FOR OPEN     000G
         OI    SORS1,LRERS+INERS        TURN ON NO LRECL AND IO ERROR
         BR    R14                      BRANCH TO ALLOW OPEN
*INPUT ERROR ROUTINE
SD87EREX L     R10,IEFSDM87             SET UP MESSAGE BASE        VS0H
         USING IEFSD87M,R10                                        VS0H
         LA    R12,MS32K                GET START OF MESSAGE       VS0H
         LA    R11,MS32E-MS32K          GET LENGTH OF MESSAGE      VS0H
         TM    SORS1,OVERT              IF OVER 32K ERROR THEN     VS0H
         BO    PTICC                    BRANCH TO GET C.C.         VS0H
         LA    R12,MSGET                GET START OF MESSAGE       VS0H
         LA    R11,MSGEE-MSGET          GET LENGTH OF MESSAGE      VS0H
         TM    SORS1,CNTGE              IF COULDNT GET CORE THEN   VS0H
         BO    PTICC                    BRANCH TO GET C.C.         VS0H
         OI    SORS1,INERS              TURN ON IO ERROR           VS0H
         LA    R12,FIRLN                GET START OF MESSAGE
         LA    R11,ENDLN-FIRLN          GET LENGTH OF MESSAGE
         B     PTICC                    BRANCH TO GET CONTROL CHARACTER
SEGER    L     R10,IEFSDM87             SET UP MESSAGE BASE        VS0H
         LA    R12,MSSEG                GET LOCATION OF MESSAGE    VS0H
         LA    R11,MSSEE-MSSEG          GET LENGTH OF MESSAGE      VS0H
         OI    SORS1,ERRSW              TURN ON BAD SEGMENT SW.    VS0H
*PUT IN THE ERROR CONTROL CHARACTER
PTICC    MVI   CONCH,C' '               GET ASA SPACE 1 OR POCKET 1
         MVI   SEGIN,0                  CLEAR SEGMENT              VS0H
         TM    SORS1,MACHS              TEST FOR MACHINE CNTRL CHAR.
         BZ    TOOLD                    BRANCH TO PUT MESSAGE IF NOT
         MVI   CONCH,X'09'              GET MACHINE SPACE 1
         TM    VARBA,PUNSH              TEST FOR PUNCH TYPE OUTPUT
         BZ    TOOLD                    BRANCH TO PUT MESSAGE IF NOT
         MVI   CONCH,X'01'              GET MACHINE POCKET 1
         TM    VARBA,FIFTW              TEST FOR 1442 PUNCH IF NOT
         BZ    TOOLD                    BRANCH TO PUT MESSAGE
         MVI   CONCH,X'81'              GET 1442 POCKET 1
         B     TOOLD                    BRANCH TO PUT MESSAGE
***********************************************************************
* FOLLOWING CARD INSERTED BY A J BEW 12/3/71
WTORMFL1 WTOR  'REPLY ''C'' WHEN FORM ALIGNED',,1,,MF=L,ROUTCDE=(7)
* FOLLOWING CARD INSERTED BY A J BEW 12/3/71
WTORMFL2 WTOR  'REPLY ''R'' TO RESTART OUTPUT',,1,,MF=L,ROUTCDE=(2)
***********************************************************************
*CONSTANTS
         DS    0F
FOURY    DC    X'00000004'
BATEY    DC    X'08000000'              TO INDICATE DATASET INPUT  VS0H
ONSXA    DC    F'168'                   MINIMUM GOT CORE           VS0H
ADINE    DC    A(SD87EREX)
ADINF    DC    A(SD87EOFX)
ADING    DC    X'85'                    LAST ENTRY, DATA CONTROL BLOCK
         DC    AL3(SD87EXLS)            ADDRESS OF ROUTINE
SD88EXIT DC    V(IEFSD088)              TRANSITION ROUTINE
SD89EXIT DC    V(IEFSD089)              OUTPUT ROUTINE
IEFSDM87 DC    V(IEFSD87M)              MESSAGE CONSTANTS
ONELY    DC    X'00000001'                                         VS0H
         DC    C'ZAPSZAPSZAPSZAPS'                                 VS0H
         DC    C'ZAPSZAPSZAPSZAPS'                                 VS0H
         DC    C'ZAPSZAPSZAPSZAPS'                                 VS0H
         DC    C'ZAPSZAPSZAPSZAPS'                                 VS0H
         DC    C'ZAPSZAPSZAPSZAPS'                                 VS0H
         LTORG
***********************************************************************
*                                                                     *
*TITLE         IEFSD87M   MESSAGES FOR IEFSD087                       *
*                                                                     *
***********************************************************************
IEFSD87M CSECT
         DS    0F
FIRLN    DC    C'IEF314I SYSIO'
ENDLN    EQU   *
MS32K    DC    C'IEF229I LRECL EXCEEDS 32K'                        VS0H
MS32E    EQU   *                                                   VS0H
MSGET    DC    C'IEF32OI STORAGE NOT AVAILABLE'                    VS0H
MSGEE    EQU   *                                                   VS0H
MSSEG    DC    C'IEF321I SEGMENT INVALID'                          VS0H
MSSEE    EQU   *                                                   VS0H
         END
