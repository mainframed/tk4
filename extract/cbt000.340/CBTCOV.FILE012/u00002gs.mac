AMM.     TITLE 'RT5012M - FIRST LOAD OF TESTING MONITOR PROGRAM - A.M.'
         PUNCH '   ENTRY       RT5012M'
         PUNCH '   ALIAS       RTPMNIT'
         EJECT                                                        *
RT5012M  CSECT
***********************************************************************
*                                                                     *
*  THIS PROGRAM IS THE FIRST LOAD OF THE TESTING MONITOR PROGRAM. THE *
* EXECUTION OF THIS PROGRAM IS CONTROLLED BY A PARAMETER LIST AND THE *
* OPTIONAL DATA SET 'SYSPARM'. THE FIRST BYTE OF THE PARAMETER LIST   *
* SPECIFIES THE COMPILER THAT IS TO BE USED AND MUST BE CODED AS ONE  *
* OF THE FOLLOWING CHARACTERS :                                       *
*                                                                     *
*  A  ASSEMBLER  F       F  FORTRAN    G       P  PL/1       F        *
*  B  COBOL      F       G  ALGOL      E       R  RPG        E        *
*  C  COBOL      E       H  FORTRAN    H                              *
*                                                                     *
*        THE SECOND BYTE OF THE PARAMETER LIST SPECIFIES THE OPTIONS  *
* THAT ARE REQUIRED AND MUST BE CODED AS ONE OF THE FOLLOWING NUMBERS:*
*                                                                     *
*  1  COMPILE ONLY       3  COMPILE LOAD & GO  5  GO ONLY.            *
*  2  COMPILE AND LINK   4  LOAD AND GO        6  COMPILE LINK & GO   *
*                                                                     *
*        THE REMAINDER OF THE PARAMETER LIST IS PROCESSED ONLY SO FAR *
* AS IT CAN BE INTERPRETED. ANY RESIDUAL PARAMETERS ARE PASSED TO THE *
* 'GO' STEP (IF ANY). THE THIRD BYTE OF THE PARAMETER LIST MAY BE USED*
* TO SPECIFY THE CONDITIONS UNDER WHICH THE JOB STEP IS TO BE ENDED.  *
* TIE OPTION OS SPECIFIED AS THE CONDITION THAT IS TO CAUSE THE JOB   *
* STEP TO END,AND IS CODED AS ONE OF THE FOLLOWING CHARACTERS :       *
*                                                                     *
*  W  WARNING     04     S  SEVERE ERROR   12                         *
*  E  ERROR       08     T  TERMINAL ERROR 16                         *
*                                                                     *
*        IF ANY OTHER CHARACTER IS CODED THE DEFAULT OF 'E' IS TAKEN  *
* AND THE REMAINDER (INCLUDING THE CHARACTER IN ERROR) IS RESERVED    *
* FOR THE 'GO' STEP. IF A VALID TERMINATION CHARACTER IS CODED THEN   *
* IT MAY BE FOLLOWED BY THE MAXIMUM STEP TIME (IN MINUTES). IF NO     *
* TIME LIMIT IS SPECIFIED THERE WILL BE NO DEFAULT. THE TIME LIMIT IS *
* IN ACTUAL TIME AND NOT ON ACTIVE TIME.                              *
*                                                                     *
***********************************************************************
         EJECT
* REGISTER USAGE.
         SPACE 1
R0       EQU   0                   WORK REGISTER.
R1       EQU   1                   WORK REGISTER / PARAMETER REGISTER.
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7                   ADDRESS OF TEMPORARY AREA.
R8       EQU   8
R9       EQU   9                   END OF PARAMETER LIST.
R10      EQU   10                  COMPILER DESCRIPTOR ENTRY POINTER.
R11      EQU   11                  PARAMETER LIST CHARACTER POINTER.
RBASE    EQU   12                  BASE REGISTER.
R13      EQU   13                  SAVE AREA POINTER.
R14      EQU   14                  RETURN ADDRESS.
R15      EQU   15                  ENTRY POINT ADDRESS / RETURN CODE.
         SPACE 3
*  MAXIMUM BLOCK-SIZE FOR SYSTEM OUTPUT DATA SETS.
         SPACE 1
MAXBLKSI EQU   2474                MAXIMUM SYSOUT BLOCK SIZE FOR 16K
*              WRITER. IF A 14K WTR IS TO BE USED THIS SHOUD BE 1912.
         EJECT
*        BEGIN (DYNAMIC,DYNL,DYNAR),BASE=RBASE    INITIALISE.
         STM   14,12,12(13)
         BALR  RBASE,0
         USING *,RBASE
         LA    0,DYNL(0,0)
         BAL   1,*+4
         SVC   10
         LR    15,1
         LM    0,1,20(13)
         ST    15,8(13)
         ST    13,4(15)
         LR    13,15
         USING DYNAR,13
         SPACE 1
***********************************************************************
*                                                                     *
*        INITIALISE DATA AREAS AND OBTAIN TEMPORARY AREA.             *
*                                                                     *
***********************************************************************
         SPACE 1
         L     R11,0(R1)           SET GR11 -> PARAMETER LIST.
         MVC   DYNDDN(90),DDNAMES  STORE OVER-RIDE DD NAMES.
         MVC   DYNDCB(DYNLINK-DYNDCB),LMOD        STORE DCB.
         XC    DYNLINK(DYNDDN-DYNLINK),DYNLINK    CLEAR INITIAL VALUES.
         LA    R0,DYNDDN           SET GR0 -> DD-NAME OVER-RIDES.
         ST    R0,DYNPARMC+4       STORE DDNAME OVER-RIDE FOR COMPILER.
         ST    R0,DYNPARML+4       STORE DDNAME OVER-RIDE FOR LINK-EDIT
         OI    DYNPARMC+4,X'80'    )
         OI    DYNPARML+4,X'80'    ) SET END OF PARAMETER LISTS.
*        OI    DYNPARMG,X'80'      )
         LA    R0,4                SET GR0 = 4.
         ST    R0,DYNCOND          STORE DEFAULT TERMINATION CONDITION.
         LA    R0,TEMPL            SET GR0 = LENGTH OF TEMPORARY AREA.
         GETMAIN R,LV=(0)          OBTAIN TEMPORARY SAVE AREA.
         LR    R7,R1               SET GR7 -> TEMPORARY SAVE AREA.
         USING TEMP,R7             DEFINE BASE FOR TEMPORARY AREA.
         MVC   TEMPDCBA(TEMPDCBB-TEMPDCBA),PRNTA
         MVC   TEMPDCBB(TEMPDCBP-TEMPDCBB),PRNTA
         MVI   TEMPDCBB+47,C'B'
         MVC   TEMPDCBP(TEMPDCBL-TEMPDCBP),PARM
         MVC   TEMPDCBL(TEMPOPEN-TEMPDCBL),LIB
         LA    R0,TEMPJFCB         )
         ST    R0,TEMPEXIT         )
         LA    R0,TEMPEXIT         )
         IC    R1,TEMPDCBL+36      ) SET UP EXIT LIST.
         ST    R0,TEMPDCBL+36      )
         STC   R1,TEMPDCBL+36      )
         MVI   TEMPEXIT,X'87'      )
         LM    R14,R2,OPENL        LOAD MODEL OPEN STATEMENTS.
         ALR   R14,R13             SET TRUE ADDRESS OF SYSLMOD.
         ALR   R15,R7                                  SYSPRNTA.
         ALR   R0,R7                                   SYSPRNTB.
         ALR   R1,R7                                   SYSPARM.
         ALR   R2,R7                                   SYSLIB.
         STM   R14,R2,TEMPOPEN     STORE OPEN PARAMETER LIST.
         LA    R0,58               SET GR0 = 58.
         STH   R0,TEMPBLDL+2       STORE NUMBER OF BYTES FOR BLDL.
         LA    R0,1                SET GR0 = 1
         STH   R0,TEMPBLDL         STORE NO. OF ENTRIES IN BUILD LIST.
         SPACE 1
***********************************************************************
*                                                                     *
*        SCAN PARAMETER LIST                                          *
*                                                                     *
***********************************************************************
         SPACE 1
         LH    R9,0(R11)           SET GR9  = LENGTH OF PARAMETER LIST.
         LA    R0,2                SET GR0 = MINIMUM LENGTH OF PARMS.
         CR    R9,R0               COMPARE FOR MINIMUM LENGTH.
         BL    ERR01               IF LESS THEN ERROR.
         LA    R9,1(R9,R11)        SET GR9 -> LAST CHARACTER IN PARMS.
         LA    R8,1                SET GR8 = 1.
         LA    R11,2(R11)          SET GR11 -> FIRST PARAMETER.
         LA    R10,CMPA            SET GR10 -> FIRST COMPILER ENTRY.
         LA    R14,CMPB-CMPA       SET GR14 = COMPILER TABLE INCREMENT.
         LA    R15,CMPEND          SET GR15 -> END OF COMPILER TABLE.
         CLC   0(1,R11),0(R10)     COMPARE FOR CHARACTER.
         BE    *+12                IF FOUND THEN GO TO PROCESS TABLE.
         BXLE  R10,R14,*-10        LOOP UNTIL TABLE EXHAUSTED.
         B     ERR01               IF NO TABLE ENTRY FOUND THEN ERROR.
         USING CMP,R10             DEFINE COMPILER BASE.
         BXH   R11,R8,ERR01        TEST FOR END OF PARMS.
         CLI   0(R11),C'1'         COMPARE OPTION WITH COMPILE ONLY.
         BL    ERR01               IF LESS THEN ERROR.
         CLI   0(R11),C'6'         COMPARE OPTION WITH FORCE C-LINK-GO.
         BH    ERR01               IF GREATER THEN ERROR.
         MVC   DYNOPT(1),0(R11)    SAVE OPTION.
         SPACE 1
         BXH   R11,R8,PARMEND      TEST FOR END OF PARMS.
         LA    R15,4               SET GR15 = 4.
         CLI   0(R11),C'W'         IS STOP ON WARNING ?
         BE    SETSTOP             IF SO THEN GO TO STORE.
         LA    R15,8               SET GR15 = 8.
         CLI   0(R11),C'E'         IS STOP ON ERROR ?
         BE    SETSTOP             IF SO THEN GO TO STORE.
         LA    R15,12              SET GR15 = 12.
         CLI   0(R11),C'S'         IS STOP ON SEVERE ERROR ?
         BE    SETSTOP             IF SO THEN GO TO STORE.
         LA    R15,16              SET GR15 = 16.
         CLI   0(R11),C'T'         IS STOP ON TERMINAL ERROR ?
         BNE   PARMEND             IF NOT THEN END OF PARMS.
SETSTOP  ST    R15,DYNCOND         STORE ENDING CONDITION.
         SPACE 1
         BXH   R11,R8,PARMEND      TEST FOR END OF PARMS.
         LR    R1,R11              SET GR1 -> START OF TIME.
         TM    0(R1),X'F0'         IS CHARACTER NUMERIC ?
         BNO   *+8                 IF NOT THEN END FOUND.
         BXLE  R1,R8,*-8           LOOP UNTIL END FOUND.
         SR    R1,R11              SET GR1 = LENGTH.
         BNP   PARMEND             IF NOT PLUS THEN NO TIME.
         BCTR  R1,R0               DECREMENT GR1 FOR MOVE.
         EX    R1,PARMPACK         PACK TIME.
         LA    R11,1(R1,R11)       SET GR11 -> PARM BEYOND TIME.
         CVB   R1,TEMPDW           CONVERT TO BINARY.
         LA    R0,3000             SET GR0 = 3000.
         AR    R0,R0               SET GR0 = 6000.
         MR    R0,R0               SET GR1 = TIME IN 1/100 SECS.
         ST    R1,DYNTIME          STORE TIME.
         SPACE 1
PARMEND  CR    R11,R9              COMPARE FOR END OF LIST.
         BH    *+14                IF SO THEN SKIP TEST.
         CLI   0(R11),C','         IS CHARACTER A DELIMITER ?
         BNE   *+6                 IF NOT THEN SKIP SET.
         AR    R11,R8              INCREMENT GR11 OVER COMMA.
         SPACE 1
***********************************************************************
*                                                                     *
*        TEST FOR ASSEMBLER H SUBSTITUTION FOR ASSEMBLER F.           *
*                                                                     *
***********************************************************************
         SPACE 1                                                      *
         CLI   CMPIDM,C'A'         IS IDENTIFIER 'A' ?
         BNE   NOTASMH             IF NOT THEN NOT ASSEMBLER.
         MVC   TEMPJFCB(8),GMASMH  MOVE LENGTH TO SUP-POOL ZERO.
         GETMAIN VC,LA=TEMPJFCB,A=TEMPWORK,MF=(E,TEMPCAML),SP=0
         LTR   R15,R15             WAS SPACE FOUND ?
         BNZ   NOTASMH             IF NOT THEN USE ASSEMBLER F.
         FREEMAIN V,MF=(E,TEMPCAML)     RELEAASE DYNAMIC SPACE.
         MVC   TEMPBLDL+4(8),CMPAH+CMPNAME-CMP-RT5012M-6(RBASE)
         BLDL  0,TEMPBLDL          BUILD LIST FOR ASSEMBLER H.
         LTR   R15,R15             IS ASSEMBLER H AVAILABLE ?
         BNZ   NOTASMH             IF NOT THEN USE ASSEMBLER F.
         LA    R10,CMPAH-RT5012M-6(,RBASE)   USE ASSEMBLER H.
NOTASMH  DS    0H
         SPACE 1
***********************************************************************
*                                                                     *
*        SET UP DEFAULT PARAMETER LISTS.
*                                                                     *
***********************************************************************
         SPACE 1
         SR    R9,R11              SET GR9 = LENGTH OF DEFAULT PARMS.
         LA    R9,1(R9)            SET GR9 = TRUE LENGTH.
         LA    R0,4(R9)            SET GR0 = LENGTH REQUIRED.
         GETMAIN R,LV=(0)          OBTAIN DYNAMIC SPACE FOR GO PARMS.
         STH   R9,2(R1)            STORE LENGTH OF PARAMETERS.
         LA    R1,2(R1)            SET GR1 FOR STORE.
         ST    R1,DYNPARMG         STORE GO STEP DEFAULT PARAMETERS.
         BCTR  R9,R0               DECREMENT GR9 FOR STORE.
         LTR   R9,R9               TEST SIGN OF GR9.
         BM    *+8                 IF MINUS THEN NO STORE.
         EX    R9,DEFPARM          STORE DEFAULT PARAMETERS.
         L     R11,CMPPARMC        SET GR11 -> COMPILER PARAMETER LIST.
         LH    R9,CMPPRMCL         SET GR9 = LENGTH OF PARAMETERS.
         LA    R0,4(R9)            SET GR0 = LENGTH REQUIRED.
         GETMAIN R,LV=(0)          OBTAIN DYNAMIC AREA FOR COMP PARMS.
         STH   R9,2(R1)            STORE LENGTH OF PARAMETERS.
         LA    R1,2(R1)            SET GR1 FOR STORE.
         BCTR  R9,R0               DECREMENT GR9 FOR STORE.
         LTR   R9,R9               TEST SIGN OF GR9.
         BM    *+8                 IF MINUS THEN NO STORE.
         EX    R9,DEFPARM          STORE DEFAULT PARAMETERS.
         ST    R1,DYNPARMC         STORE COMPILE STEP DEFAULT PARAMETRS
         L     R11,CMPPARML        SET GR11 -> LINK-EDIT PARAMETER LIST
         LH    R9,CMPPRMLL         SET GR9 = LENGTH OF PARAMETERS.
         LA    R0,4(R9)            SET GR0 = LENGTH REQUIRED.
         GETMAIN R,LV=(0)          OBTAIN DYNAMIC SPACE FOR LKED PARMS.
         STH   R9,2(R1)            STORE LENGTH OF PARAMETERS.
         LA    R1,2(R1)            SET GR1 FOR STORE.
         ST    R1,DYNPARML         STORE LINKEDIT STEP DEFAULT PARMS.
         BCTR  R9,R0               DECREMENT GR9 FOR STORE.
         LTR   R9,R9               TEST SIGN OF GR9.
         BM    *+8                 IF MINUS THEN NO STORE.
         EX    R9,DEFPARM          STORE DEFAULT PARAMETERS.
         SPACE 1
***********************************************************************
*                                                                     *
*        SET UP DD-NAME OVER-RIDES.                                   *
*                                                                     *
***********************************************************************
         SPACE 1
         L     R1,16               SET GR1 -> CVT.
         L     R1,0(R1)            SET GR1 -> TCB POINTERS.
         L     R1,4(R1)            SET GR1 -> CURRENT TCB.
         L     R1,12(R1)           SET GR1 -> TIOT.
         LA    R1,24(R1)           SET GR1 -> FIRST DD-ENTRY IN TIOT.
         SR    R0,R0               SET GR0 = 0.
DDNLOOP  CLC   CSYSINP,4(R1)       IS DDNAME 'SYSINP' ?
         BNE   *+14                IF NOT THEN LEAVE.
         MVC   DYNDDN+34(8),CSYSINP     STORE OVER-RIDE NAME.
         B     *+12                BRANCH AROUND LOOP
         IC    R0,0(R1)            SET GR0 = LENGTH OF ENTRY.
         BXH   R1,R0,DDNLOOP       LOOP UNTIL NAME FOUND.
         SPACE 1
***********************************************************************
*                                                                     *
*        OPEN DATA SETS.                                              *
*                                                                     *
***********************************************************************
         SPACE 1
         MVC   TEMPDCBA+62(2),CMPBLKSI  STORE COMPILER BLOCK-SIZE.
         MVC   TEMPDCBA+83(1),CMPLRECL  STORE COMPILEE RECORD LENGTH.
         MVC   TEMPDCBA+36(1),CMPRECFM  STORE COMPILER RECORD FORMAT.
         OPEN  MF=(E,TEMPOPEN)     OPEN ALL DATA SETS.
         SPACE 1
***********************************************************************
*                                                                     *
*        BUILD LIST FOR COMPILER AND LINKAGE EDITOR OR LOADER.        *
*                                                                     *
***********************************************************************
         SPACE 1
         CLI   DYNOPT,C'6'         IS OPTION FORCE COMPILE-LINK-GO ?
         BE    BLDLLKD2            IF SO THEN GO TO FORCE.
         CLI   DYNOPT,C'5'         IS OPTION GO ONLY ?
         BE    NOBLDL              IF SO THEN NO BLDL.
         CLI   DYNOPT,C'3'         DOES RUN INCLUDE A GO ?
         BL    BLDLLKED            IF NOT THEN GO TO TEST FOR LKED.
         MVC   TEMPBLDL+4(8),CLOAD STORE LOADER NAME.
         MVC   DYNBLDLL,CLKED      STORE LINKAGE EDITOR NAME.
         BLDL  0,TEMPBLDL          BUILD LIST FOR LOADER.
         LTR   R15,R15             TEST FOR BLDL SUCCESSFUL.
         BNZ   BLDLLKED            IF FAIL THEN USE LINK EDIT.
         MVC   DYNBLDLL,CLOAD      STORE LOADER PROGRAM NAME.
         CLI   DYNOPT,C'4'         IS OPTION LINK AND GO ?
         MVI   DYNOPT,C'2'         SET OPTION COMPILE AND LINK.
         BNE   BLDLLKD1            IF NOT THEN SET FOR COMPILE-LOAD-GO.
         MVI   DYNOPT,C'4'         RESTORE LOAD AND GO.
         MVI   DYNCOND,X'80'       SET STOP ON ALL CONDITIONS.
*              THE STATEMENT ABOVE FORCES THE PROGRAM TO END AFTER ONE
*              STEP ONLY BY ENSURING THAT ANY CONDITION CODE RETURNED
*              BY THE PROGRAM WILL BE GREATER THAN THE TERMINATING
*              CODE. THIS IGNORES THE CODE SPECIFIED BY THE USER BUT
*              THE EFFECT IS TRANSPARENT AS IT IS NOW A ONE STEP JOB.
         B     BLDLLKD1            GO TO TEST FOR SYSLIB.
BLDLLKED CLI   DYNOPT,C'2'         DOES OPTION INCLUDE A LINK-EDIT ?
         BL    BLDLCOMP            IF NOT THEN GO TO TEST FOR COMPILE.
         B     *+8                 BRANCH AROUND FORCE C-L-G.
BLDLLKD2 MVI   DYNOPT,C'3'         SET OPTION TO FORCE COMPILE-LINK-GO.
         MVC   DYNBLDLL,CLKED      STORE LINKAGE EDITOR PROGRAM NAME.
BLDLLKD1 DS    0H
         CLI   CMPIDM,C'A'         IS COMPILER ASSEMBLER ?
         BE    BLDLCOMP            IF SO THEN NO SYSLIB.
         CLI   CMPIDM,C'R'         IS COMPILER RPG ?
         BE    BLDLCOMP            IF SO THEN NO SYSLIB.
         BAL   R2,SETLIB           LINK TO SET SYSLIB NAME.
BLDLCOMP CLI   DYNOPT,C'3'         DOES OPTION INCLUDE A COMPILE ?
         BH    NOBLDL              IF NOT THEN BLDL COMPLETE.
         MVC   DYNBLDLC,CMPNAME    STORE COMPILER NAME.
         CLI   CMPIDM,C'A'         IS COMPILER ASSEMBLER ?
         BNE   NOBLDL              IF NOT THEN SET-UP COMPLETE.
         BAL   R2,SETLIB           LINK TO SET LIBRARY.
NOBLDL   DS    0H
         SPACE 1
***********************************************************************
*                                                                     *
*        PROCESS SYSPARM DATA SET.                                    *
*                                                                     *
***********************************************************************
         SPACE 1
         TM    TEMPDCBP+48,X'10'   IS SYSPARM DATA SET OPEN ?
         BZ    EODPARM             IF NOT THEN GO TO CLOSE.
         SPACE 1
SYSPREAD BAL   R8,SYSPSUB1         LINK TO READ SYSPARM DATA SET.
         CLI   1(R1),C'='          IS PARAMETER SPECIFIED ?
         BNE   SYSPREAD            IF NOT THEN GO TO READ NEXT CARD.
SYSPSTRD LA    R6,DYNPARMC         SET GR6 -> COMPILE STEP PARAMETERS.
         CLC   CMPIDM,0(R1)        IS THIS CARD FOR THE COMPILER ?
         BE    SYSPPFND            IF SO THEN GO TO PROCESS.
         LA    R6,DYNPARML         SET GR6 -> LKED STEP PARAMETERS.
         CLI   0(R1),C'L'          IS THIS CARD FOR THE LINKAGE EDITOR?
         BE    SYSPPFND            IF SO THEN GO TO PROCESS.
         CLI   0(R1),C'G'          IS THIS CARD FOR THE GO STEP ?
         BNE   SYSPREAD            IF NOT THEN GO TO READ NEXT CARD.
         LA    R6,DYNPARMG         SET GR6 -> GO STEP PARAMETERS.
SYSPPFND XC    TEMPTRTB,TEMPTRTB   CLEAR TRANSLATE TABLE.
         L     R1,0(R6)            SET GR1 -> DYNAMIC AREA.
         LA    R0,2                SET GR0 = 2
         SR    R1,R0               DECREMENT GR1 FOR START OF AREA.
         LA    R0,4                SET GR0 = 4.
         AH    R0,2(R1)            SET GR0 = LENGTH TO BE FREED.
         FREEMAIN R,LV=(0),A=(1)   RELEASE PREVIOUS PARAMETER AREA.
         SR    R0,R0               SET GR0 = 0.
         ST    R0,0(R6)            STORE ZERO ENTRY IN PARAMETER AREA.
         CLI   2(R5),C''''         ARE QUOTES SPECIFIED ?
         BE    SYSPQUOT            IF SO THEN GO TO PROCESS QUOTES.
         CLI   2(R5),C'('          ARE PARENTHESES SPECIFIED ?
         BE    SYSPAREN            IF SO THEN GO TO PROCESS PARENTHESES
         LA    R4,2(R5)            SET GR4 -> FIRST PARAMETER.
         SPACE 1
         MVI   TEMPTRTB+C' ',1     SET STOP ON BLANK.
         BAL   R3,SYSPSUB2         LINK TO SCAN FOR DELIMITER.
         B     SYSPREAD            GO TO READ NEXT CARD.
         SPACE 1
SYSPQUOT MVI   TEMPTRTB+C'''',1    SET STOP ON QUOTES.
         LA    R4,3(R5)            SET GR4 -> FIRST PARAMETER.
         BAL   R3,SYSPSUB2         LINK TO SCAN FOR DELIMITER.
         CLI   0(R4),C''''         IS DOUBLE QUOTE SPECIFIED ?
         BNE   SYSPENDP            IF NOT THEN END.
         LA    R4,1(R4)            INCREMENT GR4 FOR NEXT.
         B     SYSPSUB2            GO TO CONTINUE SCAN.
         SPACE 1
SYSPAREN MVI   TEMPTRTB+C' ',1     SET STOP ON BLANKS.
         LA    R4,3(R5)            SET GR4 -> FIRST PARAMETER.
         BAL   R3,SYSPSUB2         LINK TO SCAN FOR DELIMITER.
         BCTR  R4,R0               DECREMENT GR4 FOR TEST.
         CLI   0(R4),C','          WAS LAST CHARACTER A COMMA ?
         BE    SYSPSUB3            IF SO THEN GO TO SCAN NEXT CARD.
SYSPENDP L     R1,0(R6)            SET GR1 -> PARAMETER LIST.
         LH    R14,0(R1)           SET GR14 = LENGTH OF PARAMETER.
         BCTR  R14,R0              DECREMENT GR14 FOR FINAL STORE.
         STH   R14,0(R1)           STORE DECREMENTED LENGTH.
         LA    R1,2(R1,R14)        SET GR1 -> LAST CHARACTER.
         MVI   0(R1),C' '          BLANK OUT LAST CHARACTER.
         B     SYSPREAD            GO TO READ NEXT CARD.
         SPACE 1
SYSPSUB1 GET   TEMPDCBP            READ CONTROL CARD.
         LR    R5,R1               SET GR5 -> CONTROL CARD.
         BR    R8                  RETURN.
         SPACE 1
SYSPSUB2 LA    R15,70(R5)          SET GR15 -> END FOR SCAN.
         LA    R1,71(R5)           SET GR1 -> DEFAULT END.
         SR    R15,R4              SET GR15 = LENGTH FOR SCAN.
         EX    R15,SYSPEX1         SCAN FOR DELIMITER.
         BZ    *+16                IF END OF RECORD THEN LEAVE.
         CLI   0(R1),C''''         IS CHARACTER A QUOTE ?
         BNE   *+8                 IF NOT THEN MUST BE BLANK.
         LA    R1,1(R1)            INCREMENT GR1 TO STORE QUOTE.
         SR    R1,R4               SET GR1 = LENGTH FOR MOVE.
         BCR   8,R3                    IF NO DATA THEN IGNORE.
         L     R2,0(R6)            SET GR2 -> PREVIOUS PARM LIST.
         LTR   R2,R2               TEST FOR FIRST TIME.
         BZ    *+8                 IF SO THEN NO ADDITIONAL SPACE.
         AH    R1,0(R2)            SET GR1 = TOTAL PARAMETER LENGTH.
         LR    R8,R1               SET GR8 = TOTAL PARAMETER LENGTH.
         LA    R0,4(R8)            SET GR0 = TOTAL LENGTH REQUIRED.
         GETMAIN R,LV=(0)          OBTAIN DYNAMIC SPACE.
         STH   R8,2(R1)            STORE PARAMETER LENGTH.
         LA    R1,2(R1)            INCREMENT GR1 FOR PARAMETER ADDRESS.
         ST    R1,0(R6)            STORE ADDRESS OF PARAMETER AREA.
         LTR   R2,R2               TEST SIGN OF GR2.
         BZ    SYSPSB2A            IF ZERO THEN SKIP FIRST MOVE.
         LH    R15,0(R2)           SET GR15 = LENGTH OF PREVIOUS PARMS.
         SR    R8,R15              SET GR8 = LENGTH OF CURRENT PARMS.
         BCTR  R15,R0              SET GR15 = LENGTH FOR EXECUTE.
         EX    R15,SYSPEX2         MOVE PREVIOUS CHARACTERS.
         LA    R1,1(R1,R15)        SET GR1 FOR CURRENT PARMS.
SYSPSB2A BCTR  R8,R0               SET GR8 = LENGTH FOR EXECUTE.
         EX    R8,SYSPEX3          MOVE CURRENT CHARACTERS.
         LA    R4,1(R8,R4)         SET GR4 -> NEXT CHATACTER IN RECORD.
         LTR   R1,R2               TEST FOR FIRST TIME.
         BZ    SYSPSB2B            IF SO THEN SKIP FREEMAIN.
         LA    R0,5(R15)           SET GR0 = LENGTH TO BE FREED.
         LA    R14,2               SET GR14 = 2.
         SR    R1,R14              DECREMENT GR1 FOR FREEMAIN.
         FREEMAIN R,LV=(0),A=(1)   RELEASE PREVIOUS PARAMETER AREA.
SYSPSB2B LA    R0,71(R5)           SET GR0 -> CONTINUATION COLUMN.
         CR    R4,R0               COMPARE FOR END FOUND.
         BCR   7,R3                IF NOT THEN RETURN.
         SPACE 1
SYSPSUB3 BAL   R8,SYSPSUB1         LINK TO READ CONTROL CARD.
         CLI   0(R5),C' '          IS FIRST CHARACTER BLANK ?
         BNE   SYSPSTRD            IF NOT THEN GO TO PROCESS NEW CARD.
         LA    R4,1(R5)            SET GR4 -> FIRST VALID CONT COLUMN.
         CLI   TEMPTRTB+C'''',0    IS IT A QUOTE DELIMIT ?
         BNE   SYSPSUB2            IF SO THEN GO TO CONTINUE SCAN.
         LA    R1,15(R5)           SET GR1 -> END OF VALID CONT. COLS.
         LA    R0,1                SET GR0 = 1.
         CLI   0(R4),C' '          IS COLUMN BLANK ?
         BNE   SYSPSUB2            IF NOT THEN GO TO CONTINUE SCAN.
         BXLE  R4,R0,*-8           LOOP UNTIL NON-BLANK CHARACTER FOUND
         B     SYSPSUB3            IF NO CONTINUATION THEN SKIP CARD.
         SPACE 1
*                                                                     *
*        CLOSE DATA SETS AND SET UP LOADER PARAMETERS (IF NEEDED).    *
*                                                                     *
***********************************************************************
         SPACE 1
EODPARM  CLOSE MF=(E,TEMPOPEN+4)   CLOSE TEMPORARY DATA SETS.
         LA    R9,TEMPOPEN+4       SET GR9 -> CLOSE LIST.
FPLPPARM L     R1,0(R9)            SET GR1 -> DCB.
         TM    23(R1),1            TEST FOR BUFFER POOL PRESENT.
         BO    NOFPPARM            IF NOT THEN SKIP FREEPOOL.
         FREEPOOL (1)              FREE BUFFER POOL FOR PROCESSORS.
NOFPPARM TM    0(R9),X'80'         IS IT END OF LIST ?
         LA    R9,4(R9)            SET GR9 -> NEXT ENTRY IN CLOSE LIST.
         BNO   FPLPPARM            IF NOT END THEN GO TO TEST NEXT.
         CLI   DYNOPT,C'2'         IS COMPILE AND LINK SPECIFIED ?
         BE    *+12                IF SO THEN GO TO TEST FOR LOADER.
         CLI   DYNOPT,C'4'         IS LINK AND GO SPECIFIED ?
         BNE   NOTLOADR            IF NOT THEN NO TEST FOR LOADER.
         CLC   CLOAD,DYNBLDLL      IS LOADER SPECIFIED ?
         BNE   NOTLOADR            IF NOT THEN NOT LOADER.
         L     R8,DYNPARML         SET GR8 -> LINKAGE EDITOR PARAMETERS
         L     R11,DYNPARMG        SET GR11 -> GO PARAMETERS.
         LH    R9,0(R8)            SET GR9 = LENGTH OF LKED PARMS.
         AH    R9,0(R11)           SET GR9 = TOTAL LENGTH OF PARMS.
         LA    R9,1(R9)            SET GR9 = TOTAL LENGTH.
         LA    R0,4(R9)            SET GR0 = TOTAL LENGTH FOR MOVE.
         GETMAIN R,LV=(0)          OBTAIN DYNAMIC LOADER SPACE.
         STH   R9,2(R1)            STORE PARAMETER LENGTH.
         LA    R1,2(R1)            SET GR1 FOR STORE.
         ST    R1,DYNPARML         STORE POINTER TO LOADER PARMS.
         LH    R9,0(R8)            SET GR9 = LENGTH OF LOADER PARMS.
         BCTR  R9,R0               DECREMENT GR9 FOR MOVE.
         EX    R9,DEFPARMA         MOVE PARAMETERS.
         LA    R1,2(R1,R9)         SET GR1 FOR GO PARAMETERS.
         MVI   1(R1),C'/'          SET DELIMITER.
         LA    R2,2                SET GR2 = 2
         LH    R9,0(R11)           SET GR9 -> GO PARAMETERS.
         LTR   R9,R9               TEST FOR ZERO.
         BZ    FREEPARM            IF ZERO THEN GO TO FREE PARAMETERS.
         BCTR  R9,R0               DECREMENT GR9 FOR MOVE.
         LA    R11,2(R11)          INCREMENT GR11 FOR MOVE.
         EX    R9,DEFPARM          MOVE PARAMETERS.
         SR    R11,R2              DECREMENT GR11 FOR FREEMAIN.
         SR    R11,R2              DECREMENT GR11 FOR FREEMAIN.
         LA    R0,5(R9)            SET GR0 = LENGTH TO BE FREED.
         FREEMAIN R,LV=(0),A=(R11) RELEASE OLD GO PARAMETERS.
         GETMAIN R,LV=4            OBTAIN DUMMY GO PARAMETERS.
         LA    R1,2(R1)            SET GR1 FOR STORE.
         ST    R1,DYNPARMG         STORE PARAMETERS.
         SR    R0,R0               SET GR0 = 0.
         STH   R0,0(R1)            STORE PARAMETERS.
FREEPARM LH    R9,0(R8)            SET GR9 = LENGTH OF PARAMETERS.
         SR    R8,R2               DECREMENT GR8 FOR FREEMAIN.
         LA    R0,4(R9)            SET GR0 = LENGTH TO BE FREED.
         FREEMAIN R,LV=(0),A=(R8)  RELEASE OLD LINKAGE EDITOR PARMS.
         SPACE 1
***********************************************************************
*                                                                     *
*        TRANSFER CONTROL TO RT5013M.                                 *
*                                                                     *
***********************************************************************
         SPACE 1
NOTLOADR OI    DYNPARMG,X'80'      SET ON VL BIT FOR GO STEP PARMS.
         LA    R0,TEMPL            SET GR0 = LENGTH OF TEMPORARY AREA.
         FREEMAIN R,LV=(0),A=(R7)  RELEASE TEMPORARY AREA.
         XCTL  SF=(E,XCTL)         TRANSFER CONTROL.
         EJECT
***********************************************************************
*                                                                     *
*        ERROR ROUTINES.                                              *
*                                                                     *
***********************************************************************
         SPACE 1
ERR01    LA    R15,20              SET GR15 = ERROR CODE.
         B     ERRCOM              GO TO COMMON ROUTINE.
         SPACE 1
ERR02    CLOSE MF=(E,TEMPOPEN)     CLOSE TEMPORARY DATA SETS.
         LA    R15,24              SET GR15 = ERROR CODE.
ERRCOM   LA    R0,TEMPL            SET GR0 = LENGTH OF TEMPORARY AREA.
         FREEMAIN R,LV=(0),A=(7)   RELEASE DYNAMIC AREA.
*        GOBACK (DYNAMIC,DYNL),RC=(15)  RETURN.
         LR    1,13
         L     13,4(13)
         LA    0,DYNL
         SVC   10
         L     14,12(13)
         LM    0,12,20(13)
         MVI   12(13),255
         BR    14
         EJECT
***********************************************************************
*                                                                     *
*        EXIT ROUTINES FOR SYSPRNTA, SYSPRNTB AND SYSLMOD (& SYSLIB)  *
*                                                                     *
***********************************************************************
         SPACE 1
PRTEXIT  DC    0F'0',X'85',AL3(*+3)
         L     15,16
         L     15,0(15)
         L     15,4(15)
         L     15,0(15)
         L     15,28(15)
         L     15,104(15)
         LH    0,202(15)
         LTR   0,0
         BZ    *+8
         STH   0,62(1)
*PRTEXIT DCBEXITS OPEN
         LH    R15,62(R1)          SET GR15 = BLOCK SIZE.
         LTR   R15,R15             TEST FOR BLOCK-SIZE SPECIFIED.
         BCR   7,R14               IF SPECIFIED THEN USE.
         LA    R3,MAXBLKSI         SET GR3 = MAXIMUM BLOCK SIZE.
         SR    R2,R2               SET GR2 = 0.
         LH    R15,82(R1)          SET GR2 = RECORD LENGTH.
         DR    R2,R15              SET GR3 = BLOCKING FACTOR.
         MR    R2,R15              SET GR3 = MAXIMUM BLOCK SIZE.
         TM    36(R1),X'40'        IS RECFM V ?
         BZ    PRTEXITA            IF NOT THEN USE.
         LA    R3,4(R3)            INCREMENT BY 4 FOR BLOCKING FACTOR.
         LA    R0,MAXBLKSI         SET GR0 = MAXIMUM BLOCK-SIZE.
         CR    R3,R0               COMPARE FOR GREATER.
         BNH   PRTEXITA            IF NOT GREATER THEN USE.
         SR    R3,R15              DECREMENT FOR USE.
PRTEXITA STH   R3,62(R1)           STORE BLOCK SIZE.
         L     R4,16               SET GR4 -> CVT.
         L     R9,0(R4)            SET GR9 -> TCB POINTERS.
         L     R9,4(R9)            SET GR9 -> CURRENT TCB.
         L     R9,12(R9)           SET GR9 -> TIOT.
         AH    R9,40(R1)           SET GR9 -> TIOT ENTRY FOR TBIS DS.
         LH    R9,18(R9)           SET GR9 -> UCB.
         TM    18(R9),X'20'        IS DEVICE DASD ?
         BZ    PRTEXITB            IF NOT THEN GO TO TEST FOR UNBLOCK.
         L     R4,64(R4)           SET GR4 -> DEVICE CHARACTERISTICS T.
         IC    R2,19(R9)           SET GR2 = INDEX TO DEVICE TABLE INDX
         IC    R2,0(R2,R4)         SET GR2 = INDEX TO DEV CHAR TABLE.
         AR    R4,R2               SET GR4 -> DEVICE TABLE ENTRY.
         SR    R9,R9               CLEAR NUMBER OF RECORDS PER TRACK.
         CH    R3,4(R4)            COMPARE FOR TRACK SIZE.
         BNH   *+10                IF FIT THEN USE.
         SR    R3,R15              DECREMENT GR3 BY RECORD LENGTH.
         B     *-10                LOOP UNTIL FIT FOUND.
*              THE FOLLOWING CODE IS DESIGNED TO CALCULATE THE LARGEST
*              BLOCK-SIZE THAT WILL ALLOW THE GREATEST NUMBER OF
*              LOGICAL RECORDS TO BE RECORDED ON A TRACK. THIS IS TO
*              PROVIDE THE MOST EFFICIENT BLOCKING OF SYSPRINT. IF THE
*              CRITICAL REQUIREMENT IS TO REDUCE THE NUMBER OF EXCPS
*              IN THE COMPILER AND THE SYSTEM WRITER A RETURN MAY BE
*              MADE BY INSERTING AT THIS POINT :
*        ST    R3,62(R1)           SAVE TOP BLOCK SIZE.
*        BR    R14                 RETURN.
*              CODE CONTINUES.
         LR    R7,R3               SET GR7 = BLOCK SIZE VALUE.
         SR    R6,R6               SET GR6 = 0.
         DR    R6,R15              SET GR7 = RECORDS / BLOCK.
         LR    R8,R7               SET GR8 = RECORDS / BLOCK.
PRTEXITC LR    R5,R3               SAVE CURRENT BLOCK-SIZE VALUE.
         LH    R7,4(R4)            SET GR7 = TRACK LENGTH.
         SR    R7,R3               SET GR7 = RESIDUAL TRACK LENGTH.
         TM    9(R4),X'01'         IS TOLERANCE FACTOR REQUIRED ?
         BZ    *+12                IF NOT THEN USE LENGTH.
         MH    R3,10(R4)           MULTIPLY BY TOLERANCE FACTOR.
         SRL   R3,9                DIVIDE BY 512 FOR MODIFIED LENGTH.
         IC    R2,6(R4)            SET GR2 = ADDITIONAL BYTES / BLOCK.
         AR    R3,R2               INCREMENT GR3 FOR EFFECTIVE LENGTH.
         IC    R2,7(R4)            SET GR2 = BLOCK OVER HEAD FOR LAST.
         SR    R7,R2               DECREMENT GR7 FOR RESIDUAL LENGTH.
         IC    R2,8(R4)            SET GR2 = KEYED BLOCK OVERHEAD.
         SR    R3,R2               DECREMENT GR3 FOR EFFECTIVE LENGTH.
         AR    R7,R2               INCREMENT GR7 FOR RESIDUAL LENGTH.
         SR    R6,R6               SET GR6 = 0
         DR    R6,R3               SET GR7 = BLOCKS/TRACK -1.
         LA    R7,1(R7)            SET GR7 = BLOCKS / TRACK.
         MR    R6,R8               SET GR7 = RECORDS / TRACK.
         CR    R7,R9               COMPARE WITH PREVIOUS MAXIMUM.
         BNH   *+10                IF NOT GREATER THEN LEAVE.
         LR    R9,R7               SET GR9 = NEW MAXIMUM VALUE.
         STH   R5,62(R1)           STORE BLOCK SIZE.
         LR    R3,R5               SET GR3 = BLOCK SIZE.
         SR    R3,R15              DECREMENT FOR NEXT BLOCK-SIZE.
         BCT   R8,PRTEXITC         LOOP UNTIL ALL TESTS MADE.
         BR    R14                 RETURN.
PRTEXITB TM    18(R9),X'80'        IS DEVICE MAGNETIC TAPE ?
         BCR   7,R14               IF SO THEN RETURN.
         STH   R15,62(R1)          STORE UNBLOCKED RECORD LENGTH.
         NI    36(R1),X'EF'        SET UNBLOCKED INDICATOR IN RECFM.
         BR    R14                 RETURN.
         SPACE 1
LMODEXIT L     R15,16              SET GR15 -> CVT.
         L     R15,0(R15)          SET GR15 -> TCB POINTERS.
         L     R15,4(R15)          SET GR15 -> CURRENT TCB.
         L     R15,0(R15)          SET GR15 -> CURRENT REQUEST BLOCK.
         L     R15,28(R15)         SET GR15 -> SVRB FOR IGG0190M
         L     R15,104(R15)        SET GR15 -> GOTTEN CORE (SIC).
         MVC   DYNNAME(8),144(R15) STORE MEMBER NAME FOR GO STEP.
         CLI   DYNNAME,C' '        IS NAME OMITTED ?
         BCR   7,R14               IF NOT THEN RETURN.
         MVC   DYNNAME(8),CTEMPNM  STORE LINK NAME = 'TEMPNAME'.
         BR    R14                 RETURN.
         SPACE 1
SETLIB   RDJFCB MF=(E,TEMPOPN1)    READ JFCB FOR SYSLIB.
         CLC   CMPLIB,TEMPJFCB     COMPARE FOR CORRECT DATA SET.
         BCR   8,R2                IF SO THEN LEAVE.
         MVI   TEMPJFCB,C' '       BLANK OUT FIRST BYTE OF NAME.
         MVC   TEMPJFCB+1(43),TEMPJFCB  CLEAR DSNAME IN JFCB.
         MVC   TEMPJFCB(L'CMPLIB),CMPLIB     STORE LIBRARY NAME.
         SR    R0,R0               SET GR0 = 0
         ST    R0,TEMPCAML         STORE IN CAMLST OPTIONS.
         ST    R0,TEMPCAML+8       STORE IN PARAMETER 2.
         MVI   TEMPCAML,68         STORE OPTION 1.
         LA    R0,TEMPJFCB         STORE ADDRESS OF NAME.
         ST    R0,TEMPCAML+4       STORE IN PARAMETER 1.
         LA    R0,TEMPWORK         SET GR0 -> TEMPORARY LOCATE WORK AR.
         ST    R0,TEMPCAML+12      STORE IN PARAMETER 3.
         LOCATE TEMPCAML           LOCATE LIBRARY.
         LTR   R15,R15             TEST RETURN CODE.
         BNZ   ERR02               IF NON-ZERO THEN LIBRARY ABSENT.
         MVC   TEMPJFCB+118(6),TEMPWORK+6    STORE VOLUME SERIAL.
         L     R1,16               SET GR1 -> CVT.
         L     R1,40(R1)           SET GR1 -> UCB LOOK-UP TABLE.
SETLIBD  LH    R15,0(R1)           SET GR15 -> UCB.
         LTR   R15,R15             TEST SIGN OF GR15.
         BZ    SETLIBA             IF ZERO THEN GO TO FIND NEXT.
         BM    ERR02               IF MINUS THEN PACK NOT MOUNTED.
         CLI   18(R15),X'20'       IS DEVICE DASD ?
         BNE   SETLIBA             IF NOT THEN GO TO FIND NEXT.
         CLI   19(R15),X'05'       IS DEVICE DATA CELL ?
         BE    SETLIBB             IF SO THEN GO TO SCAN SUB-CELLS.
         CLC   TEMPJFCB+118(6),28(R15)  IS SERIAL NUMBER THAT REQUIRED?
         BE    SETLIBC             IF SO THEN GO TO FIND TIOT ENTRY.
SETLIBA  LA    R1,2(R1)            SET GR1 -> NEXT UCB POINTER.
         B     SETLIBD             GO TO TEST NEXT UCB POINTER.
*              FOLLOWING CODE RELATES TO A DATA CELL ONLY AND CANNOT
*              BE TESTED IN THE RESPOND ENVIRONMENT.
SETLIBB  LA    R15,56(R15)         SET GR15 -> FIRST SUB-CELL.
         LA    R0,10               SET GR0 = 10.
SETLIBE  CLC   TEMPJFCB+118(6),4(R15)   IS SERIAL NUMBER THAT REQUIRED?
         BE    SETLIBC             IF SO THEN GO TO FIND TIOT ENTRY.
         LA    R15,16(R15)         SET GR15 -> NEXT SUB-CELL.
         BCT   R0,SETLIBE          LOOP UNTIL ALL SUB-CELLS TESTED.
         B     SETLIBA             GO TO FIND NEXT UCB.
*              END OF DATA-CELL-ONLY CODE.
         SPACE 1
SETLIBC  L     R1,16               SET GR1 -> CVT.
         L     R1,0(R1)            SET GR1 -> TCB POINTERS.
         L     R1,4(R1)            SET GR1 -> CURRENT TCB.
         L     R1,12(R1)           SET GR1 -> TIOT.
         LA    R1,24(R1)           SET GR1 -> FIRST TIOT DD ENTRY.
         SR    R0,R0               SET GR0 = 0.
SETLIBG  CLC   4(8,R1),TEMPDCBL+40 IS NAME THAT OF SYSLIB ?
         BE    SETLIBF             IF SO THEN GO TO TEST TIOT DD ENTRY.
         IC    R0,0(R1)            SET GR0 = LENGTH OF TIOT DD ENTRY.
         BXH   R1,R0,SETLIBG       LOOP UNTIL TIOT EXHAUSTED.
         B     ERR02               IF DD STATEMENT NOT PRESENT THEN ERR
SETLIBF  CH    R15,18(R1)          COMPARE FOR ALREADY ON DEVICE.
         BE    SETLIBH             IF SO THEN DO  NOT STORE.
*              THE FOLLOWING INSTRUCTION IS EXECUTED ONLY IF THE SYSLIB
*              DEVICE MUST BE CHANGED. IF EXECUTED UNDER MFT THE NEW
*              DEVICE ADDRESS WILL BE CORRECTLY STORED. UNDER MVT,
*              HOWEVER, THE INSTRUCTION WILL CAUSE A PROTECTION CHECK.
*              IF THIS UTILITY PROGRAM IS TO BE USED UNDER MVT THEN THE
*              USER MUST EITHER ENSURE THAT SYSLIB ALWAYS REFERENCES
*              THE CORRECT DEVICE OR MUST INSERT CODE TO STORE THE NEW
*              DEVICE ADDRESS WITH PROTECT KEY OF ZERO.
         SPACE 1
*  THIS LOCAL MACRO-INSTRUCTION DOES JUST THAT.
*
         SPMODE PROB,0             SET PSW PROTECT KEY TO ZERO.
*
         STH   R15,18(R1)          STORE NEW DEVICE ADDRESS.
*
*  REPEAT OF LOCAL MACRO-INSTRUCTION TO GET BACK TO USER PROTECT KEY.
*
         SPMODE PROB,*             RESTORE USER PROTECT KEY IN PSW.
         SPACE 1
SETLIBH  OPEN  MF=(E,TEMPOPN1),TYPE=J   OPEN SYSLIB TO WRITE JFCB.
         CLOSE MF=(E,TEMPOPN1)     CLOSE SYSLIB DATA SET.
         BR    R2                  RETURN.
         EJECT
***********************************************************************
*                                                                     *
*        MODEL STATEMENTS.                                            *
*                                                                     *
***********************************************************************
         SPACE 1
PARMPACK PACK  TEMPDW,0(0,R11)     PACK TIME INTO DOUBLE WORD.
         SPACE 3
SYSPEX1  TRT   0(0,R4),TEMPTRTB    SCAN FOR DELIMITER.
SYSPEX2  MVC   2(0,R1),2(R2)       MOVE PREVIOUS CHATACTERS.
SYSPEX3  MVC   2(0,R1),0(R4)       MOVE CURRENT CHARACTERS.
         SPACE 3
DEFPARM  MVC   2(0,R1),0(R11)      MOVE PARAMETERS TO PARM AREA.
DEFPARMA MVC   2(0,R1),2(R8)       MOVE PARAMETERS TO PARM AREA.
         EJECT
***********************************************************************
*                                                                     *
*        CONSTANTS.                                                   *
*                                                                     *
***********************************************************************
         SPACE 2
GMASMH   DC    A(198*1024,200*1024)
EXITL    DC    0F'0',X'85',AL3(LMODEXIT)     EXIT LIST FOR SYSLMOD.
PRNTA    DCB   DDNAME=SYSPRNTA,DSORG=PS,MACRF=PM,RECFM=FBSM,LRECL=121, *
               BLKSIZE=605,EXLST=PRTEXIT
PARM     DCB   DDNAME=SYSPARM,DSORG=PS,MACRF=GL,RECFM=FB,LRECL=80,     *
               EODAD=EODPARM
LMOD     DCB   DDNAME=SYSLMOD,MACRF=E,EXLST=EXITL,DSORG=PO
LIB      DCB   DDNAME=SYSLIB,DSORG=PO,MACRF=E,EXLST=TEMPEXIT-TEMP
OPENL    OPEN  (DYNDCB-DYNAR,,TEMPDCBA-TEMP,OUTPUT,                    *
               TEMPDCBB-TEMP,OUTPUT,TEMPDCBP-TEMP,),MF=L
         OPEN  (TEMPDCBL-TEMP),MF=L
         SPACE 2
XCTL     XCTL  EP=RTP5013M,SF=L    L-FORM XCTL.
         SPACE 2
DDNAMES  DC    H'88',5XL8'0',C'SYSPRNTASYSLIN  ',3XL8'0',C'SYSLIN  '
         SPACE 2
CSYSINP  DC    CL8'SYSINP'
CLOAD    DC    CL8'IEWLDRGO'
CLKED    DC    CL8'IEWL    '
CTEMPNM  DC    CL8'TEMPNAME'       NAME FOR USE IF OMITTED BY USER.
         EJECT
***********************************************************************
*                                                                     *
*        COMPILER DESCRIPTION TABLE.                                  *
*                                                                     *
***********************************************************************
         SPACE 1
CMP      DS    0A
CMPA     DS    0A
CMPPARMC DS    0A                  POINTER TO COMPILER PARAMETER LIST.
CMPIDM   DC    C'A',AL3(AP)        COMPILER IDENTIFIER.
CMPPARML DS    0A                  POINTER TO LINK EDITOR PARAMETER LST
CMPLRECL DC    AL1(121),AL3(AL)    RECORD LENGTH OF COMPILER SYSPRINT.
CMPPRMCL DC    AL2(L'AP)           LENGTH OF COMPILER PARAMETERS.
CMPPRMLL DC    AL2(L'AL)           LENGTH OF LINKAGE EDITOR PARAMETERS.
CMPBLKSI DC    H'0'                COMPILER SYSPRINT BLOCKSIZE.
CMPNAME  DC    CL8'IEUASM  '       COMPILER NAME.
CMPRECFM DC    AL1(FBM)            RECORD FORMAT OF COMPILER SYSPRINT.
CMPLIB   DC    CL13'SYS1.MACLIB'   COMPILER/LINK EDITOR LIBRARY NAME.
CMPB     DS    0A                  COBOL  F
         DC    C'B',AL3(BP),AL1(121),AL3(BL),AL2(0,L'BL,0)
         DC    CL8'IEQCBL00',AL1(FBA),CL13'SYS1.COBLIB'
CMPC     DS    0A                  COBOL  E
         DC    C'C',AL3(CP),AL1(121),AL3(CL),AL2(L'CP,L'CL,121)
         DC    CL8'IEPCBL00',AL1(FA),CL13'SYS1.COBLIB'
CMPF     DS    0A                  FORTRAN  G
         DC    C'F',AL3(FP),AL1(120),AL3(FL),AL2(0,L'FL,0)
         DC    CL8'IEYFORT',AL1(FBA),CL13'SYS1.FORTLIB'
CMPG     DS    0A                  ALGOL  E
         DC    C'G',AL3(GP),AL1(121),AL3(GL),AL2(0,L'FL,121)
         DC    CL8'ALGOL',AL1(FA),CL13'SYS1.ALGLIB'
CMPH     DS    0A                  FORTRAN  H
         DC    C'H',AL3(HP),AL1(137),AL3(HL),AL2(0,L'HL,0)
         DC    CL8'IEKAA00',AL1(VBA),CL13'SYS1.FORTLIB'
CMPP     DS    0A                  PL/1  F
         DC    C'P',AL3(PP),AL1(125),AL3(PL),AL2(0,L'PL,0)
         DC    CL8'IEMAA',AL1(VBA),CL13'PL1.LKED'
CMPR     DS    0A                  RPG  E
         DC    C'R',AL3(RP),AL1(121),AL3(RL),AL2(0,L'RL,121)
         DC    CL8'IESRPG',AL1(FA),CL13' '
CMPEND   EQU   *-1
CMPAH    DS    0A
         DC    C'A',AL3(AP),AL1(121),AL3(AL),AL2(L'AP,L'AL,0)
         DC    CL8'IEV90   ',AL1(FBM),CL13'SYS1.MACLIB'
         SPACE 1
* RECORD FORMAT IDENTIFIERS.
FBM      EQU   B'10011011'         FIXED BLOCKED WITH M/C CONTROL CHARS
FBA      EQU   B'10011101'         FIXED BLOCKED WITH ASA CONTROL CHARS
VBA      EQU   B'01010101'         VARIABLE BLOCKED WITH ASA CTL CHARS.
FA       EQU   B'10001101'         FIXED WITH ASA CONTROL CHARACTERS.
         EJECT
***********************************************************************
*                                                                     *
*        DEFAULT PARAMETER LISTS.                                     *
*                                                                     *
***********************************************************************
         SPACE 1
AP       DC    C'LOAD,NODECK'
AL       DC    C'LET,LIST,XREF,NCAL'
         SPACE 2
BP       EQU   *
BL       DC    C'LET,LIST,XREF'
         SPACE 2
CP       DC    C'BUFSIZE=7200'
         ORG   BL
CL       DS    0CL(L'BL)
         ORG
         SPACE 2
FP       EQU   *
         ORG   BL
FL       DS    0CL(L'BL)
         ORG
         SPACE 2
GP       EQU   *
         ORG   BL
GL       DS    0CL(L'BL)
         ORG
         SPACE 2
HP       EQU   *
         ORG   BL
HL       DS    0CL(L'BL)
         ORG
         SPACE 2
PP       EQU   *
         ORG   BL
PL       DS    0CL(L'BL)
         ORG
         SPACE 2
RP       EQU   *
         ORG   AL
RL       DS    0CL(L'AL)
         ORG
         EJECT
***********************************************************************
*                                                                     *
*        TEMPORARY AREA FORMAT.                                       *
*                                                                     *
***********************************************************************
         SPACE 1
TEMP     DSECT
TEMPDW   DS    D
TEMPDCBA DCB   DSORG=PS,MACRF=GL,RECFM=FBM,LRECL=121,BLKSIZE=605,      *
               EXLST=PRTEXIT,DDNAME=SYSPRNTA
TEMPDCBB DCB   DSORG=PS,MACRF=GL,RECFM=FBM,LRECL=121,BLKSIZE=605,      *
               EXLST=PRTEXIT,DDNAME=SYSPRNTB
TEMPDCBP DCB   DSORG=PS,MACRF=GL,RECFM=FB,LRECL=80,DDNAME=SYSPARM
TEMPDCBL DCB   DSORG=PO,MACRF=E,EXLST=TEMPEXIT-TEMP,DDNAME=SYSLIB
TEMPOPEN OPEN  (DYNDCB-DYNAR,,TEMPDCBA-TEMP,OUTPUT,                    *
               TEMPDCBB-TEMP,OUTPUT,TEMPDCBP-TEMP),MF=L
TEMPOPN1 OPEN  (TEMPDCBL-TEMP),MF=L
TEMPBLDL DS    2H,CL58
TEMPJFCB DS    44F
TEMPEXIT DC    0A(0),X'87',AL3(TEMPJFCB-TEMP)
TEMPTRTB DS    XL256
TEMPCAML CAMLST NAME,TEMPJFCB-TEMP,,TEMPWORK-TEMP
TEMPWORK DS    0D,CL265
TEMPL    EQU   *-TEMP
         TITLE 'RT5012M - DYNAMIC SAVE AREA FORMAT. - A.MORRISH.'
DYNAR    DSECT
         DS    18F                 SAVE AREA.
DYNDCB   DCB   DDNAME=SYSLMOD,MACRF=E,EXLST=0,DSORG=PO
DYNLINK  LINK  DE=0,DCB=0,SF=L
DYNPARMC DC    A(0),X'80',AL3(DYNDDN)
DYNPARML DC    A(0),X'80',AL3(DYNDDN)
DYNPARMG DC    X'80',AL3(0)
DYNCOND  DC    F'4'                CONDITION FOR TERMINATION.
DYNTIME  DC    F'0'                TIME LIMIT.
DYNNAME  DC    CL8'TEMPNAME'
DYNDDN   DC    H'88',5XL8'0',C'SYSPRNTASYSLIN  ',3XL8'0',C'SYSLIN  '
DYNBLDLC DC    CL8'COMPILER'
DYNBLDLL DC    CL8'LINKEDIT'
DYNOPT   DC    CL1'1'              OPTION CODE.
DYNL     EQU   *-DYNAR             DYNAMIC AREA LENGTH
         END   RT5012M
