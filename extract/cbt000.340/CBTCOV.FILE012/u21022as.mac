*
**   AUTJORS - I.C.I. (MOND DIVISION)
*
         TITLE '  COURSE EXAMPLE MONITOR PROGRAM  '
***********************************************************************
*                                                                     *
*        THIS PROGRAM WILL COMPILE A PL/I PROGRAM, PRODUCE AN         *
*          EDITED COMPILATION LISTING AND, IF NO SERIOUS ERRORS       *
*          HAVE BEEN DETECTED, ATTEMPT TO EXECUTE THE PROGRAM.        *
*                                                                     *
*        STAGES IN THIS PROCESS ARE :-                                *
*                                                                     *
*              1. LINK TO THE PL/I COMPILER, SENDING THE LISTING      *
*                   TO A TEMPORARY FILE (SYSUT2).                     *
*                                                                     *
*              2. READ BACK THE LISTING FILE AND PRINT RELEVANT       *
*                   PORTIONS, EXPURGATED WHERE NECESSARY.             *
*                                                                     *
*              3. LINK TO THE LOADER (ENTRY POINT IEWLOADR) TO        *
*                   LOAD THE COMPILED PROGRAM.                        *
*                                                                     *
*              4. CALL THE COMPILED AND LOADED PROGRAM.               *
*                                                                     *
*        THE PROGRAM IS REENTRANT.                                    *
*                                                                     *
*        AUTHOR - T.J.BOURNE, ICI CENTRAL MANAGEMENT SERVICES.        *
*                                                                     *
*        VERSION 1.2 - 15/MAY/70.                                     *
*              (NOW COMPATIBLE WITH VERSION 5 OF PL/I(F) COMPILER)    *
*                                                                     *
***********************************************************************
ZCPL1MON CSECT
         PRINT NOGEN
         SAVE  (14,12),,*          SAVE REGISTERS.
         LR    12,15               SET UP BASE REGISTER.
         USING ZCPL1MON,12         TELL ASSEMBLER.
         LR    11,13               SAVE CALLER'S SAVE AREA ADDRESS.
         GETMAIN R,LV=SAVELEN      GET A SAVE AREA.
         LR    13,1                SET UP SAVE AREA REGISTER.
         USING SAVE,13             TELL ASSEMBLER.
         ST    13,8(,11)           CHAIN OLD AND NEW
         ST    11,BACKCHN            SAVE AREAS TOGETHER.
         MVI   HDFLG,0
*                                                                     *
**             HOUSE-KEEPING COMPLETE.  NOW DO COMPILATION.          **
*                                                                     *
         LINK  EP=IEMAA,PARAM=(PL1OPT,PL1DD),VL=1
         STC   15,RETCODE          SAVE COMPILER RETURN CODE.
*                                                                     *
**             NOW PRINT THE LISTING.                                **
*                                                                     *
         GETMAIN R,LV=IOARLEN      GET AREA FOR DCBS ETC..
         LR    10,1                SET UP I/O AREA REGISTER.
         USING IOAR,10             TELL ASSEMBLER.
         MVC   SYSUT2(PRINT-SYSUT2),DCB1
         MVC   PRINT(LOPEN-PRINT),DCB2
         MVC   ERLIN+2(3),=X'0000F0'    SET UP DOUBLE SPACE.
         LA    1,SYSUT2
         LA    2,PRINT
         STM   1,2,LOPEN
         MVI   LOPEN+4,X'8F'
         OPEN  MF=(E,LOPEN)
         MVI   STATE,INIT          SHOW PROCESSING HEADER PAGE.
*                                                                     *
LOOP     GET   SYSUT2              GET A LINE.
         CLI   4(1),C'1'           START OF PAGE ?
         BNE   PUT                 BRANCH IF NOT.
*                                                                     *
         CLC   122(2,1),=C' 1'     FIRST PAGE ?
         BNE   NOTFST              BRANCH IF NOT.
*                                                                     *
LOSEIT   GET   SYSUT2              READ ANOTHER LINE.
         CLI   4(1),C'1'           START OF NEXT PAGE ?
         BNE   LOSEIT              BRANCH IF NOT.
         MVI   STATE,SOURCE        SHOW PROCESSING SOURCE LISTING.
*                                                                     *
NOTFST   EQU   *
         MVC   HEADER(125),0(1)    SAVE HEADER LINE.
         GET   SYSUT2              GET SECOND LINE OF PAGE.
         CLI   STATE,SOURCE        IN SOURCE LISTING ?
         BNE   XTST2               BRANCH IF NOT.
*                                                                     *
         CLC   57(21,1),=C'CROSS-REFERENCE TABLE'
         BE    XFND                BRANCH IF START OF XREF.
*                                                                     *
         LR    3,1                 SAVE THIS LINE
         PUT   PRINT,HEADER        PRINT FIRST
         PUT   PRINT,(3)             TWO LINES.
         B     LOOP                PRINT REST OF PAGE.
*                                                                     *
XFND     MVI   STATE,XREF          SHOW NOW IN XREF.
         GET   SYSUT2              GET TABLE HEADING.
*                                                                     *
XFND2    GET   SYSUT2              GET NEXT LINE.
         CLI   4(1),C'1'           START OF PAGE?
         BE    NOTFST              BRANCH IF SO.
         CLC   0(2,1),=H'20'       SHORT LINE ?
         BL    XFND2               IGNORE IT IF SO.
         CLI   21(1),C' '          BLANK NAME ?
         BE    XFND2               IGNORE IT IF SO.
*                                                                     *
         CLI   5(1),C' '           IS NAME DECLARED ?
         BNE   DECOK               BRANCH IF SO.
*                                                                     *
         BAL   14,HDTST            PRINT HEADING IF NECESSARY.
         LR    2,1                 SAVE INPUT RECORD ADDRESS.
         LA    3,ERLIN+5           POINT AT START OF MESSAGE.
         LA    4,5                 SET LENGTH TO 5.
         LA    1,21(,2)            POINT AT IDENTIFIER.
         BAL   7,FORMAT            COPY IT INTO MESSAGE.
         MVC   0(31,3),MSG3        COPY HALF OF MESSAGE.
         LA    3,31(,3)            UPDATE POINTER.
         LA    4,31(,4)            UPDATE LENGTH.
         LA    1,57(,2)            POINT AT REFERENCES.
         BAL   7,FORMAT            COPY THEM INTO MESSAGE.
         MVC   0(24,3),MSG4        COPY REST OF MESSAGE.
         LA    4,24(,4)            UPDATE LENGTH.
         STH   4,ERLIN             SET RECORD LENGTH.
         PUT   PRINT,ERLIN         PRINT 'NOT DECLARED' MESSAGE.
         B     XFND2               GET NEXT INPUT LINE.
*                                                                     *
DECOK    CLI   57(1),C' '          IS NAME REFERENCED ?
         BNE   XFND2               BRANCH IF SO.
         CLC   5(3,1),=C'1  '      PROCEDURE NAME ?
         BE    XFND2               IGNORE IT IF SO.
*                                                                     *
         BAL   14,HDTST            PRINT HEADING IF NECESSARY.
         LR    2,1                 SAVE INPUT RECORD ADDRESS.
         LA    3,ERLIN+5           POINT AT START OF MESSAGE.
         LA    4,5                 SET LENGTH TO 5.
         LA    1,21(,2)            POINT AT IDENTIFIER.
         BAL   7,FORMAT            COPY IDENTIFIER.
         MVC   0(32,3),MSG1        COPY HALF OF MESSAGE.
         LA    3,32(,3)            UPDATE POINTER.
         LA    4,32(,4)            UPDATE LENGTH.
         LA    1,5(,2)             POINT AT DCL. STMT. NUMBER.
         BAL   7,FORMAT            COPY DCL. STMT.
         MVC   0(23,3),MSG2        COPY REST OF MESSAGE.
         LA    4,23(,4)            UPDATE LENGTH.
         STH   4,ERLIN             SET RECORD LENGTH.
         PUT   PRINT,ERLIN         PRINT 'NOT USED' MESSAGE.
         B     XFND2               GET NEXT INPUT LINE.
*                                                                     *
XTST2    EQU   *
         CLC   5(7,1),=C'DCL NO.'  STILL IN XREF ?
         BE    XFND2               BRANCH IF SO.
*                                                                     *
         MVI   STATE,ERROR         SHOW XREF COMPLETE.
         CLC   5(9,1),=C'SYNTAX CH'  THE WASTED PAGE ?
         BE    XFND2               IGNORE IT IF SO.
ELP      GET   SYSUT2              GET NEXT LINE.
         CLI   4(1),C'-'           ERROR HEADING ?
         BE    ELP2                BRANCH IF SO.
         CLI   4(1),C'1'           NEW PAGE ?
         BNE   ELP                 BRANCH IF NOT.
*                                                                     *
ELP2     LR    0,1                 SAVE LINE.
         CLC   4(12,1),=C'-*STATISTICS'      REMOVE
         BE    IGNORE
         CLC   4(12,1),=C'- NO ERROR D'       SOME
         BE    IGNORE
         CLC   4(12,1),=C'-AUXILIARY S'        UNWANTED
         BE    IGNORE
         CLC   4(12,1),=C'- WARNINGS S'         MESSAGES.
         BE    IGNORE
         PUT   PRINT,(0)           PRINT IT.
IGNORE   EQU   *
         GET   SYSUT2              GET NEXT.
         B     ELP2                REPEAT.
*                                                                     *
**       THIS SUBROUTINE ENSURES THAT THE FIRST PAGE AFTER THE       **
**         SOURCE LISTING HAS A HEADING.                             **
*                                                                     *
HDTST    STM   14,1,HDSAV          SAVE REGS.
         CLI   HDFLG,0             HEADER ALREADY PRINTED ?
         BNE   HDONE               BRANCH IF SO.
         PUT   PRINT,HEADER        PRINT HEADING LINE.
         MVI   HDFLG,1             SHOW HEADER PRINTED.
HDONE    LM    14,1,HDSAV          RESTORE REGISTERS.
         BR    14                  RETURN.
*                                                                     *
*                                                                     *
*                                                                     *
**       THIS SUBROUTINE FINDS THE LENGTH OF A STRING OF NON-BLANK   **
**         CHARACTERS.  ON ENTRY, R1 POINTS TO THE START OF THE      **
**         STRING; ON EXIT, R15 CONTAINS THE LENGTH.                 **
*                                                                     *
SCAN     SR    15,15               CLEAR RESULT REGISTER.
         ST    2,SC2SAV            SAVE REGISTER 2.
SCLP     LA    15,1(,15)           ADD 1 TO LENGTH.
         LA    2,0(1,15)           LOOK AT NEXT CHARACTER.
         CLI   0(2),C' '           IS IT BLANK ?
         BNE   SCLP                REPEAT LOOP IF NOT.
         L     2,SC2SAV            RESTORE REGISTER 2.
         BR    14                  RETURN.
*                                                                     *
**       THIS SUBROUTINE MOVES A VARIABLE-LENGTH ITEM (POINTED AT    **
**         BY R1) INTO A MESSAGE (POINTED AT BY R3) AND INCREMENTS   **
**         REGISTERS 3 AND 4 BY THE LENGTH OF THE ITEM.              **
*                                                                     *
FORMAT   BAL   14,SCAN             FIND LENGTH OF ITEM.
         BCTR  15,0                GET (LENGTH - 1).
         EX    15,FMOVE            COPY ITEM TO MESSAGE.
         LA    3,1(3,15)           UPDATE MESSAGE POINTER.
         LA    4,1(4,15)           UPDATE MESSAGE LENGTH.
         BR    7                   RETURN TO CALLER
*                                                                     *
PUT      LR    0,1
         PUT   PRINT,(0)           PRINT THE LINE
         B     LOOP                GO TO GET NEXT LINE.
*                                                                     *
**             LISTING COMPLETED. NOW TIDY UP.                       **
*                                                                     *
LISTEND  MVI   LOPEN+4,X'80'
         CLOSE MF=(E,LOPEN)        CLOSE BOTH FILES.
         FREEPOOL SYSUT2           FREE
         FREEPOOL PRINT              BUFFERS.
         FREEMAIN R,LV=IOARLEN,A=(10)   FREE DATA AREA.
*                                                                    *
**             NOW CHECK WHETHER EXECUTION IS POSSIBLE.              **
*                                                                     *
         CLI   RETCODE,8           ANY SEVERE ERRORS?
         BNH   LOAD                GO TO LOAD PROGRAM IF NOT.
*                                                                     *
**             TERMINATE.                                            **
*                                                                     *
FINISH   LR    1,13                SAVE AREA ADDRESS.
         L     13,BACKCHN          PREVIOUS SAVE AREA.
         FREEMAIN R,LV=SAVELEN,A=(1)    FREE SAVE AREA.
         RETURN (14,12)            RETURN TO OS.
*                                                                     *
**             LOAD THE COMPILED PROGRAM.                            **
*                                                                     *
LOAD     LOAD  EP=IEWLOADR         LOAD THE LOADER.
         LR    15,0                LOAD ENTRY POINT ADDRESS.
         CALL  (15),(LDROPT),VL    CALL THE LOADER.
         C     15,=F'8'            PROGRAM LOADED OK ?
         BNL   FINISH              TERMINATE IF NOT.
*                                                                     *
**             EXECUTE THE LOADED PROGRAM.                           **
*                                                                     *
         LR    15,0                LOAD ENTRY POINT REGISTER.
         CALL  (15),(NULL),VL      CALL THE PROGRAM.
*                                                                     *
         B     FINISH              ALL DONE.
         EJECT
**             PARAMETER LISTS, ETC..                                **
*                                                                     *
         DS    0H
PL1OPT   DC    AL2(PL1END-*-2)
         DC    C'X,FE,NOOPLIST,NM,NA'
PL1END   EQU   *
         DS    0H
PL1DD    DC    AL2(DDEND-*-2)
         DC    5XL8'00',CL8'SYSUT2'
DDEND    EQU   *
DCB1     DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=GL,RECFM=VBA,LRECL=125,    C
               BFTEK=S,EODAD=LISTEND
DCB2     DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,RECFM=VBA,LRECL=125,  C
               BLKSIZE=129,BFTEK=S
NULL     DC    H'0'
LDROPT   DC    AL2(LDREND-*-2)
         DC    C'NOPRINT,NOLET'
LDREND   EQU   *
MSG1     DC    C' HAS BEEN DECLARED IN STATEMENT '
MSG2     DC    C' BUT HAS NOT BEEN USED.'
MSG3     DC    C' HAS BEEN USED IN STATEMENT(S) '
MSG4     DC    C' WITHOUT BEING DECLARED.'
FMOVE    MVC   0(1,3),0(1)         TO MOVE AN ITEM INTO A MESSAGE.
         EJECT
**             DESCRIPTION OF MAIN DATA AREA.                        **
*                                                                     *
DSECT13  DSECT
SAVE     DS    F                   FLAG WORD.
BACKCHN  DS    F                   BACKWARD CHAIN POINTER.
FWDCHN   DS    F                   FORWARD CHAIN POINTER.
         DS    15F                 REGISTER SAVE AREA.
RETCODE  DS    F                   COMPILER RETURN CODE.
PROGAR   DS    2F                  ADDR. AND SIZE OF LOADED PROGRAM.
         DS    0D
SAVELEN  EQU   *-SAVE
STATE    EQU   RETCODE+1           FLAGS DURING LISTING PHASE.
INIT     EQU   X'80'               HEADER PAGE.
SOURCE   EQU   X'40'               SOURCE LISTING.
XREF     EQU   X'20'               CROSS-REFERENCE LISTING.
ERROR    EQU   X'10'               COMPILER DIAGNOSTIC LISTING.
HDFLG    EQU   RETCODE+2           HEADER FLAG.
         EJECT
**             DESCRIPTION OF DATA AREA FOR PRINT PHASE.             **
*                                                                     *
IOAR     DSECT
SYSUT2   DCB   DSORG=PS,MACRF=GL
PRINT    DCB   DSORG=PS,MACRF=PM
LOPEN    DS    2F
HEADER   DS    64H                 SPACE TO SAVE HEADER.
ERLIN    DS    64H                 SPACE TO BUILD ERROR MESSAGE.
HDSAV    DS    4F                  EXTRA SAVE AREA.
SC2SAV   DS    F                   TO SAVE REGISTER 2.
         DS    0D
IOARLEN  EQU   *-SYSUT2
         END   ZCPL1MON
