DLINES   CSECT
***********************************************************************
*        THIS MODULE EXAMINES THE JOB QUEUE AND FOR EACH O/P JOB IT   *
*        ACCUMULATES THE TOTAL NO OF PRINT LINES FOR EACH O/P CLASS   *
*        AND DISPLAYS CLASS,JOBNAME,USER AND NO OF PRINT LINES ON THE *
*        CENTRAL CONSOLE                                              *
*                                                                     *
***********************************************************************
         SAVE  (14,12),,*
         BALR  12,0
         USING *,12
         LR    11,13                   * SET
         LA    13,SAVE                 *     UP
         ST    13,8(11)                *        SAVE
         ST    11,4(13)                *             AREA
*
* OPEN SYS1.SYSJOBQE AND SYS1.SYSPOOL AND WRITE WTO HEADINDS
*
         OPEN  (JOBQE,,SPOOL)          * OPEN FILES
         BAL   10,WTOLINE              * WTO FOR HEADINGS
*
* CHAIN FROM CVT TO QID TABLE AND TO JLIH
*
         L     4,16                    * CVT ADDR
         MVC   CONVADDR,28(4)          * SAVE CVTPCNVT ADDR
         L     3,296(4)                * JESCT ADDR
         L     2,240(3)                * JLIH ADDR
         MVC   JLIEADDR,4(2)           * SAVE JLIE ADDR
         L     3,328(4)                * CVTEXT2 ADDR
         L     2,24(3)                 * CVTQIDA ADDR
         MVC   QIDADDR,0(2)            * QID TABLE FIRST ENTRY
         MVC   QIDLNTH+2,14(2)         * QID ENTRY LENGTH
         EJECT
*
* CHAIN THROUGH JLIE'S
*
GETJLIE L     3,JLIEADDR               * RESTORE JLIE ADDR
         MVC   JLIEADDR,0(3)           * SAVE NEXT JLIE ADDR
         B     GETJLE                  * BRANCH TO TEST JLE
*
NEXTJLIE OC    JLIEADDR,JLIEADDR       * TEST FOR END OF CHAIN
         BNZ   GETJLIE                 * BACK FOR NEXT JLIE
         B     FINISH                  * ELSE END PROCESSING
*
* SEARCH JLE CHAIN
*
GETJLE   ICM   4,15,8(3)               * LOAD JLE ADDR
         BZ    NEXTJLIE                * DUMMY JLIE - NO JLE ADDR
TESTJLE  MVC   JLEADDR,0(4)            * SAVE NEXT JLE ADDR
         TM    0(4),X'40'              * TEST FOR DUMMY JLE
         BO    NEXTJLE                 * BRANCH IF DUMMY NEXT IN CHAIN
         TM    19(4),X'20'             * TEST FOR O/P JLE
         BNO   NEXTJLE                 * BRANCH NOT O/P JLE
         CLI   18(4),C'Q'              * TEST FOR O/P CLASS Q
         BNE   GETDCA                  * READ DCA FOR NON-CLASS-Q O/P
*
NEXTJLE  XR    4,4                     * CLEAR REG 4
         ICM   4,7,JLEADDR+1           * LOAD NEXT JLEADDR
         BZ    NEXTJLIE                * NEXT JLIE IF END JLE CHAIN
         B     TESTJLE                 * TEST NEXT CHAINED JLE
         EJECT
*
* GET NEXT DCA, SAVE CLASS  READ DSD FROM DCB FOR A CLASS AND ACCUM
*        PRINT LINES ,WRITE TO CONSOLE.  CHAIN THRU DSB FOR CHANGE
*        OF CLASS -- RETURN WHEN DSB CHAIN EXAUSTED.
*
GETDCA   L     0,20(4)                 * LOAD TTRL OF DCA
         MVI   DSIDAREA,X'00'          * REINITIALISE DSID AREA
         MVC   DSIDAREA+1(159),DSIDAREA
         LA    6,DSIDAREA              * RESET POINTER
GOREAD   BAL   9,READDCA               * BRANCH TO READ DCA
         LA    7,DSBSTART              * ADDR START DSB'S IN DCA
*
         MVC   WTOCLASS,80(7)          * SAVE O/P CLASS IN WTO LINE
         MVC   WTOJOB,BUFF             * INSERT JOB NAME INTO WTO LINE
         MVC   DSDADDR,88(7)           * SAVE DSD ADDR
NEXTDSB  ICM   0,15,104(7)             * TEST DSID NON ZERO
         BZ    GETSPOL                 * BRANCH IF END DSB CHAIN
         ST    0,0(6)                  * SAVE DSID IN TABLE
         CLC   DCAADDR,4(7)            * TEST DSB CHAIN TTR = NEXT DCA
         BNE   BUMP                    * BRANCH IF MORE IN THIS CHAIN
         L     0,4(7)                  * LOAD TTR OF NEXT DCA
         BAL   9,READDCA               * GET NEXT DCA
         B     BUMPTAB
*
BUMP     LA    7,176(7)                * BUMP DSB POINTER
BUMPTAB  LA    6,4(6)                  * BUMP TABLE POINTER
         B     NEXTDSB                 * BACK FOR NEXT DSB
*
GETSPOL  L     0,DSDADDR               * RESTORE ADDR DSD
         BAL   10,READSPOL             * BRANCH TO READ SPOOL
*
         B     NEXTJLE                 * BRANCH BACK NEXT JLE
         EJECT
*
* THIS INTERNAL SUBROUTINE READS DSD'S FROM SYSPOOL AND ACCUMULATES
*        NO OF PRINT LINES. AT THE END OF THE DSD CHAIN THE TOTAL
*        LINES ARE WTO'D TO THE CONSOLE
*
READSPOL LA    9,DSIDAREA              * INITIALISE DSID AREA POINTER
*
NEXTSPOL L     1,SPOOL+44              * DEB ADDR OF SYSPOOL
         LA    2,SPOLSEEK              * IOB ADDR FOR MBBCCHHR
         L     15,CONVADDR             * ENTRY POINT FOR CVTCPNVT
         LA    8,CONVSAVE              * SAVE REGS 9-13 WHICH ARE
         STM   9,13,0(8)               *  CORRUPTED BY CVTPCNVT
         BALR  14,15                   * BRANCH TO CVTPCNVT
         LM    9,13,0(8)               * RESTORE CORRUPTED REGS
*
         XC    EXCPECB,EXCPECB         * CLEAR ECB FOR I/O
         EXCP  SPOLIOB                 * INITIATE I/O
         WAIT  ECB=EXCPECB             * WAIT FOR COMPLETION
         CLI   EXCPECB,X'7F'           * TEST I/O
         BE    READOK                  * BRANCH IF OK
         ABEND 002,DUMP                * OTHERWISE ABEND USER 002
*
READOK   XR    6,6                     * CLEAR REG FOR COUNT DATASETS
         LH    6,DSDDSNUM              * LOAD COUNT OF DATASETS
         LA    8,DSDENTRY              * START OF DSD ENTRY
ACCUM    CLC   0(4,9),4(8)             * COMPARE DSID'S
         BNE   BUMPDSD                 * DONT ACCUMULATE IF NE
         AH    5,18(8)                 * ACCUM O/P LINES
         LA    9,4(9)                  * BUMP DSID POINTER
BUMPDSD  LA    8,20(8)                 * BUMP DSD AREA POINTER
         BCT   6,ACCUM                 * BACK IF ANOTHER FILE ENTRY
         ICM   0,15,DSDCHAIN           * LOAD CHAIN ADDT NEXT DSD
         BZ    WTOMESS                 * BRANCH TO DISPLAY IF END CHAIN
         CLC   DSDCHAIN,=X'FFFFFFFF'
         BE    WTOMESS
         B     READSPOL                * GET NEXT DSD BLOCK IN CHAIN
*
WTOMESS  CVD   5,DWORD                 * FORMAT
         MVC   WTOLNS,=X'402020202120' * NO OF
         ED    WTOLNS,DWORD+5          *   PRINT LINES
         XR    3,3                     * CLEAR REG 3 FOR QID NO
         ICM   3,3,16(4)               * LOAD QID NO
         BZ    CENT                    * BRANCH IF ZERO IN QID NO
         B     NOTCENT                 * NOT CENTRAL USER
CENT     EQU   *
         MVC   WTOUSER,=C'CENTRAL'     * SET USERID TO CENTRAL
         B     WTOOUT                  * BRANCH TO ISSUE WTO
NOTCENT  EQU   *
         M     2,QIDLNTH               * MULTIPLY LENGTH BY QIDNO-1
         L     2,QIDADDR               * LOAD QID TABLE ADDR
         AR    2,3
         MVC   WTOUSER,0(2)            * MOVE IN USER ID
WTOOUT   MVC   WTOLINE+8(32),WTOAREA
WTOLINE  WTO   'QUEUE JOBNAME  USER    LINES-O/P',ROUTCDE=(2,11)
         MVI   WTOAREA,C' '            * CLEAR WTO AREA
         MVC   WTOAREA+1(31),WTOAREA   *  AND
         XR    5,5                     *   REINITIALISE
         BR    10                      * RETURN
         EJECT
*
* INTERNAL SUBROUTINE TO READ DCA FROM SYSJOBQE
*        R0 - INITIAL TTRL ADDR OF DCA
*
READDCA  N     0,=X'FFFFFF00'          * CONVERT TTRL TO TTRN (N=0)
         L     1,JOBQE+44              * DEB ADDR OF SYSJOBQE
         LA    2,EXCPSEEK              * IOB ADDR FOR MBBCCHHR
         L     15,CONVADDR             * ADDR CVTPCNVT ENTRY
         LA    8,CONVSAVE              * SAVE REGS 9-13 WHICH ARE
         STM   9,13,0(8)               *  CORRUPTED BY CVTPCNVT
         BALR  14,15                   * BRANCH TO CVTPCNVT
         LM    9,13,0(8)               * RESTORE CORRUPTED REGS
*
         XC    EXCPECB,EXCPECB         * CLEAR ECB FOR I/O
         EXCP  EXCPIOB                 * INITIATE I/O
         WAIT  ECB=EXCPECB             * WAIT FOR COMPLETION
         CLI   EXCPECB,X'7F'           * TEST I/O
         BER   9                       * RETURN IF OK
         ABEND 001,DUMP                * OTHERWISE ABEND USER 001
*
* END PROCESSING
*
FINISH   CLOSE (JOBQE,,SPOOL)          * CLOSE FILES
         L     13,4(13)
         RETURN (14,12),RC=0
         EJECT
*
* DATA AREAS
*
SAVE     DS    18F
CONVSAVE DS    5F                      * SVAR FOR REGS 9-13
CLASS    DC    C' '
DWORD    DC    D'0'
CONVADDR DC    F'0'
JLIEADDR DC    F'0'
QIDADDR  DC    F'0'
QIDLNTH  DC    F'0'
JLEADDR  DC    F'0'
DSDADDR  DC    F'0'
WTOAREA  DS    0CL32
         DC    CL2'  '
WTOCLASS DC    C' '
         DC   CL3'   '
WTOJOB   DC    CL8'        '
         DC    C' '
WTOUSER  DC    CL7'       '
         DC    C' '
WTOLNS   DC    CL9'         '
*
DSDBUFF  DS    0CL264
         DC    CL4'0'
DSDCHAIN DC    CL4'0'
         DC    CL10'0'
DSDDSNUM DC    CL2'0'
         DC    CL4'0'
DSDENTRY DC    240CL1'0'
*
BUFF     DS    0CL916
         DC    CL32'0'
DCAADDR  DC    CL4'0'
DSBSTART DC    880CL1'0'
*
DSIDAREA DS    0CL160
         DC    40F'0'
EXCPECB  DS    F
EXCPIOB  DC    X'40'                   * IOBFLAG1
         DC    X'000000'               * IOBFLAG2/SENS0/SENS1
         DC    X'00'                   * IOBECBCC
         DC    AL3(EXCPECB)            * IOBECBPT
         DC    XL8'0'                  * IOBFLAG3/CSW
         DC    X'00'                   * IOBSIOCC
EXCPACCW DC    AL3(EXCPCCW1)           * IOBSTART
         DC    X'00'                   * RESERVED
         DC    AL3(JOBQE)              * IOBDCBPT
         DC    XL4'0'                  * IOBRESTR
         DC    X'0000'                 * IOBINCAM
         DC    X'0000'                 * IOBERRCT
EXCPSEEK DC    XL8'0'                  *IOBSEEK (MBBCCHHR)
*
SPOLIOB  DC    X'40'
         DC    X'000000'
         DC    X'00'
         DC    AL3(EXCPECB)
         DC    XL8'0'
         DC    X'00'
SPOLCCW  DC    AL3(EXCPCCW2)
         DC    X'00'
         DC    AL3(SPOOL)
         DC    XL8'0'
SPOLSEEK DC    XL8'0'
*
JOBQE    DCB   DDNAME=JOBQE,MACRF=(E),DSORG=PS,IOBAD=EXCPIOB,DEVD=DA
SPOOL    DCB   DDNAME=SPOOL,MACRF=(E),DSORG=PS,IOBAD=SPOLIOB,DEVD=DA
*
EXCPCCW1 CCW   X'31',EXCPSEEK+3,X'40',5
         CCW   X'08',*-8,0,0
         CCW   X'06',BUFF,X'20',916
*
EXCPCCW2 CCW   X'31',SPOLSEEK+3,X'40',5
         CCW   X'08',*-8,0,0
         CCW   X'06',DSDBUFF,X'20',264
         END
