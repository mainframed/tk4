***********************************************************************
*        P A G E A T E R
*
*        THIS ROUTINE GETMAINS THE AMOUNT OF CORE SPECIFIED IN THE
*        JCL PARM FIELD AND CAUSES STORE REFERENCES TO EACH 4K PAGE
*        OF THAT CORE IN ORDER TO GENERATE A VERY HIGH PAGING RATE
*        NOTE:
*
*            THIS ROUTINE HAS BEEN MODIFIED 9/MAR/79 TO ACCEPT AN
*        ALTERNATIVE PARM FIELD OF 'PARM=SPF'. THIS NEW PARAMETER
*        CAUSES THE ROUTINE TO SIMULATE THE PAGING AND SWAPPING OF AN
*        AVERAGE SPF USER. IT DOES SO BY CAUSING ITSELF TO BE SWAPPED
*        OUT REGULARLY AND REFERENCING A FAIRLY HIGH NUMBER OF PAGES
*        WHEN IT IS SWAPPED IN.
*            THE PAGING RATES WHICH ARE MAINTAINED HAVE BEEN DECIDED
*        BY DATA FROM THE PAGING MONITOR ON REAL SPF USE. THE NORMS
*        APPEAR TO BE ABOUT 200 PAGES PER MINUTE IN AND 100 PAGES PER
*        MINUTE OUT FOR NORMAL USE. DURING THE COURSE OF A MINUTE,
*        THERE WILL PROBABLY BE ABOUT 2-4 SWAP-IN/SWAP-OUT SEQUENCES.
*
*
***********************************************************************
         SPACE 2
PAGEATER ZCSECT
         EJECT
***********************************************************************
*        PROCESS THE PARM FIELD
***********************************************************************
         SPACE 2
         L     REG1,0(REG1)        ADDRESS OF PARM FIELD
         LH    REG15,0(REG1)       LENGTH OF PARM FIELD
         BCT   REG15,*+10          SUBTRACT 1 FOR EXECUTE
         PACK  DBLWORD,2(0,REG1)   PACK THE SPECIFIED LENGTH
         EX    REG15,*-6           EXECUTE THE PACK
         B     *+10                JUMP OVER THE CLC INSTRUCTION
         CLC   2(0,REG1),SPF       IS IT A REQUEST FOR SPF PROCESSING
         EX    REG15,*-6           EXECUTE THE COMPARE
         BNE   NOTSPF0             NO. DO NOT SET THE FLAG
         OI    WORKFLAG,SPFMODE    SIGNAL SPF SIMULATION MODE
         B     PARMDONE            PARM PROCESSING COMPLETE
NOTSPF0  EQU   *
         CVB   REG2,DBLWORD        AND CONVERT IT TO BINARY
PARMDONE EQU   *
         EJECT
***********************************************************************
*        GETMAIN THE REQUIRED CORE
***********************************************************************
         SPACE 2
         TM    WORKFLAG,SPFMODE    SPF SIMULATION
         BZ    NOTSPF1             NO. GET ON WITH IT
         L     REG2,SPFCORE        YES. LOAD SPF CORE SIZE
         OI    WORKFLAG,WRITE      SET INITIAL WORK STATUS
NOTSPF1  EQU   *
         GETMAIN R,LV=(2)          GETMAIN THAT MUCH CORE
         LR    REG4,REG1           AND SAVE ITS ADDRESS
         EJECT
***********************************************************************
*        INITIALISE FOR PAGE - EATING PROCESSING LOOP
***********************************************************************
         SPACE 2
         LA    REG6,2048           HALF REQUIRED INCREMENT
         AR    REG6,REG6           GET 4K LOOP INCREMENT
         LA    REG7,0(REG2,REG4)   ADDRESS OF END OF AREA
         BCTR  REG7,0              ADDRESS OF LAST BYTE
         STM   REG4,REG7,WORKREGS  SAVE THOSE CONTENTS
         EJECT
***********************************************************************
*        GENERATE A LARGE NUMBER OF PAGE REFERENCES
***********************************************************************
         SPACE 2
PAGELOOP EQU   *
         TM    WORKFLAG,WRITE      SHALL WE WRITE TO THIS PAGE ?
         BO    DOWRITE             YES. GO WRITE TO IT
         IC    REG15,0(REG4)       JUST REFERENCE THE PAGE
         B     PAGEDONE            THAT PAGE IS PROCESSED
DOWRITE  EQU   *
         MVI   0(REG4),X'FF'       MOVE DATA TO THAT BYTE
PAGEDONE EQU   *
         XI    WORKFLAG,WRITE+READ FLIP THE LOGIC BITS
         TM    WORKFLAG,SPFMODE    SPF SIMULATION ?
         BZ    NOTSPF2             NO. CARRY ON
         STIMER WAIT,BINTVL=WAITTIME WAIT FOR A WHILE
NOTSPF2  EQU   *
         BXLE  REG4,REG6,PAGELOOP  AND DO IT AGAIN AND AGAIN AND...
         EJECT
***********************************************************************
*        GENERATE A SWAP-IN/SWAP-OUT SEQUENCE FOR SPF
***********************************************************************
         SPACE 2
         TM    WORKFLAG,SPFMODE    SPF SIMULATION
         BZ    NOTSPF3             NO. CARRY ON AS NORMAL
         STIMER WAIT,BINTVL=WAITTIM2 WAIT FOR A WHILE
NOTSPF3  EQU   *
         EJECT
***********************************************************************
*        RELOAD INITIAL REGISTER CONTENTS
***********************************************************************
         SPACE 2
         LM    REG4,REG7,WORKREGS  LOAD UP REGISTER CONTENTS
         B     PAGELOOP            AND START AGAIN
         EJECT
***********************************************************************
*        WORK AREAS AND CONSTANTS
***********************************************************************
         SPACE 2
DBLWORD  DS    D                   WORK AREA FOR MATHS
WORKREGS DS    4F                  SAVE AREA FOR WORK REGISTERS
WAITTIME DC    F'1'                WAIT TIME BETWEEN REFERENCES
WAITTIM2 DC    F'1500'             LONG TIME TO GENERATE SWAP OUT
SPFCORE  DC    A(300000)           ASSUMED SIZE OF SPF+WORK AREAS ETC
SPF      DC    C'SPF'              ALTERNATIVE PARM VALUE
WORKFLAG DC    X'00'               WORK/LOGIC FLAG
SPFMODE  EQU   X'80'               SPF SIMULATION IS REQUIRED
WRITE    EQU   X'40'               WRITE TO PAGE IS REQUIRED
READ     EQU   X'20'               READ FROM PAGE IS REQUIRED
         LTORG
         END
