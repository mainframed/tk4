AMM.     TITLE 'TAPE VOLUME REFERENCE UTILITY - A.MORRISH. '
RTPTPRF2 CSECT
***********************************************************************
*                                                                     *
*  THIS PROGRAM CAUSES THE VOLUMES OF THE DATA SET ASSOCIATED WITH A  *
* DD STATEMENT TO BE ASSIGNED TO THE DATA SET ASSOCIATED WITH ANOTHER *
* DD STATEMENT.                                                       *
*                                                                     *
*  THE USER MAY SPECIFY IN A PARAMETER LIST.:                         *
*                                                                     *
*        PAR1  THE DDNAME OF THE DD STATEMENT THAT IDENTIFIES THE     *
*              DATA SET, THE VOLUMES OF WHICH ARE TO BE ASSIGNED TO   *
*              ANOTHER DATA SET. IF OMITTED 'SYSUT1' IS ASSUMED.      *
*                                                                     *
*        PAR2  THE DDNAME OF THE DD STATEMENT THAT IDENTIFIES THE     *
*              DATA SET THAT IS TO HAVE THE VOLUMES OF ANOTHER DATA   *
*              SET ASSIGNED TO IT. IF OMITTED 'SYSUT2' IS ASSUMED.    *
*                                                                     *
*        PAR3  THE NAME OF A PROGRAM THAT IS TO BE EXECUTED WHEN THE  *
*              VOLUMES HAVE BEEN ASSIGNED. IF OMITTED NO PROGRAM IS   *
*              EXECUTED.                                              *
*                                                                     *
*        PAR4  A DECIMAL VALUE THAT INDICATES THE HIGHEST COMPLETION  *
*              CODE ALLOWABLE. IF THE RETURN CODE FROM THE PROGRAM    *
*              SPECIFIED IN PAR3 EXCEEDS THIS VALUE THEN A USER ABEND *
*              WILL OCCUR. IF OMITTED THERE WILL BE NO TEST ON THE    *
*              RETURN CODE.                                           *
*                                                                     *
*        THE REMAINDER OF THE PARAMETER LIST, IF ANY, WILL BE PASSED  *
*        AS A PARAMETER LIST TO THE PROGRAM SPECIFIED IN PAR3.        *
*                                                                     *
***********************************************************************
         SPACE 2
* REGISTER USAGE
R0       EQU   0                   WORK REGISTER.
R1       EQU   1                   WORK REGISTER / PARAMETER REGISTER.
R2       EQU   2                   WORK REGISTER.
RBASE    EQU   3                   BASE REGISTER
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13                  SAVE AREA POINTER.
R14      EQU   14                  RETURN ADDRESS.
R15      EQU   15                  ENTRY POINT ADDRESS / RETURN CODE.
         EJECT
*        BEGIN SAVE,BASE=RBASE     INITIALISE AND DEFINE BASE REGISTER.
         STM   14,12,12(13)
         BALR  RBASE,0
         USING *,RBASE
         LA    15,SAVE
         ST    15,8(13)
         ST    13,4(15)
         LR    13,15
         LR    R9,R1               SET GR9 -> PARM LIST POINTER.
         L     R11,0(R1)           SET GR11-> PARAMETER LIST.
         LH    R0,0(R11)           SET GR0 = LENGTH OF PARAMETER LIST.
         LA    R1,2(R11)           SET GR1 -> START OF PARAMETER LIST
         AR    R0,R1               SET GR0 -> END OF PARAMETER LIST.
         BAL   R14,SUB1A           LINK TO FIND PARM1
         B     *+14                IF NOT PRESENT THEN GO TO FIND PARM2
         MVC   UT1(8),EPLOC        SET DDNAME TO BLANKS.
         EX    R15,SETPAR1         STORE OVER-RIDE DDNAME.
         BAL   R14,SUB1            LINK TO FIND PARM2
         B     *+14                IF NOT PRESENT THEN GO TO FIND PARM3
         MVC   UT2(8),EPLOC        SET DDNAME TO BLANKS
         EX    R15,SETPAR2         STORE OVER-RIDE DDNAME
         BAL   R14,SUB1            LINK TO FIND PARM3
         B     *+8                 IF NOT PRESENT THEN GO TO FIND PARM4
         EX    R15,SETPAR3         STORE ENTRY POINT NAME.
         BAL   R14,SUB1            LINK TO FIND PARM4
         B     *+16                IF NOT PRESENT THEN GO TO SET NEW P.
         EX    R15,SETPAR4         PACK RETURN CODE LIMIT.
         CVB  R2,DOUBWD            CONVERT TO BINARY
         ST    R2,LIMRC            STORE IN RETURN CODE LIMIT.
         LA    R1,2(R1,R15)        SET GR1 -> START OF REMAINING PARMS.
         LH    R0,0(R11)           SET GR0 = LENGTH OF PARAMETER LIST.
         LA    R15,2(R11)          SET GR15 -> 1ST BYTE OF PARM LIST.
         SR    R15,R1              SET GR15 = -1 * EXCESS CHARACTERS.
         AR    R15,R0              SET GR15 = RESIDUAL COUNT OF PARMS.
         BNM   *+6                 IF NOT MINUS THEN USE
         SR    R15,R15             SET GR15 = 0
         STH   R15,0(R11)          STORE NEW PARAMETER LIST LENGTH.
         BNP   *+10                IF NOT PLUS THEN MUST BE ZERO.
         BCTR  R15,R0              DECREMENT GR15
         EX    R15,SETPAR5         STORE UPDATED PARAMETER LIST.
         SPACE 1
*
*        SCAN TTOT FOR DDNAMES.
*
         SPACE 1
         L     R1,16               SET GR1 -> CVT.
         L     R4,12(R1)           SET GR4 -> SYSJOBQE DCB.
         L     R5,28(R1)           SET GR5 -> TTR - MBBCCHHR RTN.
         L     R4,44(R4)           SET GR4 -> SYSJOBQE DEB.
         MVC   DEB(48),0(R4)       SAVE DEB.
         LA    R0,DCB              SET GR0 -> DCB.
         ST    R0,DEB+24          STORE DCB POINTER IN DEB.
         L     R1,0(R1)            SET GR1 -> TCB POINTERS.
         L     R1,4(R1)            SET GR1 -> CURRENT TCB.
         MVC   DEB+24(1),28(R1)    SET PROYECTION KEY IN DEB.
         OI    DEB+24,X'0F'        SET DEB IDENTIFIER IN DEB.
         LA    R4,DEB              SET GR4 -> DEB FOR CONVERT.
         L     R1,12(R1)           SET GR1 -> TIOT.
         LA    R1,24(R1)           SET GR1 -> FIRST DD-ENTRY.
         SR    R0,R0               SET GR0 = 0.
TIOTLOOP IC    R0,0(R1)            SET GR0 = LENGTH OF DD ENTRY.
         CLC   UT1(8),4(R1)        COMPARE FOR SYSUT1 NAME.
         BNE   *+20                IF NOT THEN GO TO TEST SYSUT2.
         OC    TTR1(3),TTR1        TEST FOR PREVIOUS FIND.
         BNZ   *+10                IF PREVIOUS FIND THEN USE FIRST.
         MVC   TTR1(3),12(R1)      STORE TTR OF JFCB.
         CLC   UT2(8),4(R1)        COMPARE FOR SYSUT2 NAME.
         BNE   *+20                IF NOT THEN GO TO TEST NEXT.
         OC    TTR2(3),TTR2        TEST FOR PREVIOUS FIND.
         BNZ   *+10                IF PREVIOUS FIND THEN USE FIRST.
         MVC   TTR2(3),12(R1)      STORE TTR OF JFCB.
         OC    TTR1(3),TTR1        TEST FOR SYSUT1 FOUND.
         BZ    *+14                IF NOT THEN GO TO SCAN NEXT.
         OC    TTR2(3),TTR2        TEST FOR SYSUT2 FOUND.
         BNZ   TTRFND              IF SO THEN END SCAN.
         BXH   R1,R0,TIOTLOOP      LOOP UNTIL FOUND OR TIOT EXHAUSTED.
         B     ERR02               GO TO ERROR ROUTINE.
         SPACE 1
*
*        SET UP EXCP TO READ SYSUT1 JFCB.
*
         SPACE 1
TTRFND   L     R0,TTR1             SET GR0 = TTR OF JFCB.
         LR    R1,R4               SET GR1 -> DEB.
         LA    R2,IOB1+32          SET GR2 -> MBBCCHHR AREA.
         LR    R15,R5              SET GR15 -> CONVERT ROUTINE.
         LR    R6,R13              SAVE GR13 IN NON-VOLATILE REGISTER.
         BALR  R14,R15             LINK TO CONVERSION ROUTINE.
         LR    R13,R6              RESTORE GR13.
         SPACE 1
*
*        EXECUTE CHANNEL PROGRAM.
*
         SPACE 1
         SPMODE PROB,0             SET PROTECT KEY ZERO.
         EXCP  IOB1               EXECUTE CHANNEL PROGRAM.
         SPACE 1
*
*        SET UP EXCP TO READ AND RE-WRITE SYSUT2 JFCB.
*
         SPACE 1
         L     R0,TTR2             SET GR0 = TTR OF JFCB.
         LR    R1,R4               SET GR1 -> DEB.
         LA    R2,IOB2+32          SET GR2 -> MBBCCHHR AREA.
         LR    R15,R5              SET GR15 -> CONVERT ROUTINE.
         BALR  R14,R15             LINK TO CONVERST ROUTINE.
         LR    R13,R6              RESTORE GR13.
         WAIT  1,ECB=ECB           WAIT FOR COMPLETION.
         CLI   ECB,X'7F'           IS READ GOOD ?
         BNE   ERR04               IF NOT THEN ERROR.
         SPACE 1
*
*        READ SYSUT2 JFCB.
*
         SPACE 1
         EXCP  IOB2               EXECUTE CHANNEL PROGRAM.
         WAIT  1,ECB=ECB           WAIT FOR COMPLETION.
         CLI   ECB,X'7F'           CHECK FOR VALIDITY.
         BNE   ERR04               IF NOT THEN ERROR.
         SPACE 1
*
*        REWRITE SYSUT2 JFCB.
*
         SPACE 1
         MVC   JFCB2+117(31),JFCB+117   SET VOLUME SERIAL NUMBERS.
         MVC   JFCB2+149(3),JFCB+149    SET ADDRESS OF JFCB EXTENSION.
         LA    R0,CP2A             SET GR0 -> WRITE CHANNEL PROGRAM.
         ST    R0,IOB2+16          STORE CHANNEL PROG ADDRESS IN IOB.
         EXCP  IOB2                REWRUTE SYSUT2 JFCB.
         WAIT  1,ECB=ECB           WAIT FOR COMPLETION.
         LA    R0,CP2              SET GR0 -> READ CHANNEL PROGRAM.
         ST    R0,IOB2+116         RESTORE CHANNEL PROGRAM.
         CLI   ECB,X'7F'           CHECK FOR VALIDITY.
         BNE   ERR04               IF NOT THEN ERROR.
         SPACE 1
*
*        SET UP FOR LINK TO REQUIRED PROGRAM.
*
         SPACE 1
         SPMODE PROB,*             RESTORE USER PROTECT KEY.
         SR    R15,R15             SET GR15 = 0
         CLI   EPLOC,C' '          IS ENTRY POINT NAME PRESENT ?
         BE    RETURN              IF NOT THEN GO TO RETURN
         CLI   LIMRC,X'FF'         HAS A LIMIT RETURN CODE BEEN STORED?
         BE    XCTL                IF SO THEN GO TO TRANFER CONTROL.
         LR    R1,R9               SET GR1 -> PARM LIST POINTER.
         LINK  SF=(E,LINKL)        LINK TO REQUIRED PROGRAMME.
         C     R15,LIMRC           COMPARE RETURN CODE WITH LIMIT.
         BH    ERR03               IF GREATER THEN ERROR.
*RETURN  GOBACK SAVE,RC=(15)       RETURN.
RETURN   L     13,4(13)
         L     14,12(13)
         LM    0,12,20(13)
         MVI   12(13),255
         BR    14
         SPACE 1
XCTL     L     R13,4(R13)          SET GR13 -> PREVIOUS SAVE AREA.
         LM    R14,R11,12(R13)     RESTORE REGISTERS.
         XCTL  12,SF=(E,LINKL)     TRANSFER CONTROL.
         EJECT
*
*        SUB-ROUTINE
*
         SPACE 1
SUB1     LA    R1,2(R1,R15)        SET GR1 -> START OF NEXT PARM.
SUB1A    LR    R15,R1              SET GR15 -> FIRST CHARACTER IN PARM.
SUB1C    CR    R15,R0              COMPARE WITH END OF PARM LIST.
         BNL   SUB1B               IF GREATER THEN END OF SCAN.
         CLI   0(R15),C','         IS CHARACTER DELIMITER ?
         BE    SUB1B               IF SO THEN END OF SCAN
         CLI   0(R15),C' '         IS CHARACTER BLANK ?
         BE    SUB1B               IF SO THEN END OF SCAN.
         LA    R15,1(R15)          INCREMENT GR15 FOR NEXT CHARACTER.
         B     SUB1C               GO TO TEST NEXT CHARACTER.
SUB1B    SR    R15,R1              SET GR15 = NO. CHARS SCANNED.
         C     R15,F8              COMPARE WITH MAXIMUM.
         BH    ERR01               IF GREATER THEN ERROR.
         S     R15,F1              DECREMENT GR15 FOR EXECUTE.
         BNM   4(R14)              IF NOT MINUS THEN GO TO EXECUTE.
         BR    R14                 RETURN TO BYPASS EXECUTE.
         SPACE 1
*
*        ERROR ROUTINES.
*
         SPACE 1
ERR01    LA    R15,1
         B     ERR03
ERR02    LA    R15,2
ERR03    ST    R1,ABEND
         L     R1,ABEND+4
         OR    R1,R15
         SVC   13
ERR04    LA    R15,4
         B     ERR03
         SPACE 1
ABEND    DS    F
         DC    X'80',AL3(0)
         SPACE 1
*
*        MODEL STATEMENTS
*
         SPACE 1
SETPAR1  MVC   UT1(0),0(R1)        STORE SYSUT1 DDNAME OVER-RIDE.
SETPAR2  MVC   UT2(0),0(R1)        STORE SYSUT2 DDNAME OVER-RIDE.
SETPAR3  MVC   EPLOC(0),0(R1)      STORE ENTRY POINT NAME.
SETPAR4  PACK  DOUBWD(8),0(0,R1)   PACK LIMIT RETURN CODE.
SETPAR5  MVC   2(0,R11),0(R1)      MOVE RESIDUAL PARAMETER LIST.
         EJECT
DOUBWD   DS    D
SAVE     DS    18F
UT1      DC    CL8'SYSUT1'
UT2      DC    CL8'SYSUT2'
LINKL    LINK  EPLOC=EPLOC,SF=L
F1       DC    F'1'
F8       DC    F'8'
LIMRC    DC    4X'FF'
EPLOC    DC    CL8' '
ECB      DC    F'0'
TTR1     DC    F'0'
TTR2     DC    F'0'
IOB1     DC    X'42',A(ECB,0,0,CP1,DCB,0,0),2A(0)
IOB2     DC    X'42',A(ECB,0,0,CP2,DCB,0,0),2A(0)
CP1      CCW   X'31',IOB1+35,X'40',5
         CCW   X'08',CP1,0,0
         CCW   X'06',JFCB,0,176
CP2      CCW   X'31',IOB2+35,X'40',5
         CCW   X'08',CP2,0,0
         CCW   X'06',JFCB2,0,176
CP2A     CCW   X'31',IOB2+35,X'40',5
         CCW   X'08',CP2A,0,0
         CCW   X'05',JFCB2,0,176
         SPACE 1
JFCB     DS    44F
DCB      EQU   *-40
         DC    H'0',X'8000',A(DEB),X'12',23X'0'
DEB      DS    12F                 DATA EXTENT BLOCK FOR SYSJOBQE.
JFCB2    DS    44F
         END
