         MACRO
&NAME    BZR   &R
&NAME    BCR   8,&R                BR ON ZERO
         MEND
         MACRO
&NAME    BNZR  &R
&NAME    BCR   7,&R                BR ON NOT ZERO
         MEND
         MACRO
&NAME    BMR   &R
&NAME    BCR   4,&R                BR ON MINUS OR MIXED
         MEND
         MACRO
&NAME    BOR   &R
&NAME    BCR   1,&R                BR ON OVERFLOW OR IF ONES
         MEND
         MACRO
&NAME    BPR   &R
&NAME    BCR   2,&R                BR ON PLUS
         MEND
         MACRO
&NAME    BNER  &R
&NAME    BCR   7,&R                BR ON NOT EQUAL
         MEND
         MACRO
&NAME    BNLR  &R
&NAME    BCR   11,&R               BR ON NOT LOW
         MEND
         MACRO
&NAME    BNHR  &R
&NAME    BCR   13,&R               BR ON NOT HIGH
         MEND
         MACRO
&NAME    BER   &R
&NAME    BCR   8,&R                BR ON EQUAL
         MEND
         MACRO
&NAME    BLR   &R
&NAME    BCR   4,&R                BR ON LOW
         MEND
         MACRO
&NAME    BHR   &R
&NAME    BCR   2,&R                BR ON HIGH
         MEND
         MACRO
&NAME    BNPR  &R
&NAME    BCR   13,&R               BR ON NOT PLUS
         MEND
         MACRO
&NAME    BNMR  &R
&NAME    BCR   11,&R               BR ON NOT MINUS
         MEND
         MACRO
&NAME    BNOR  &R
&NAME    BCR   14,&R               BR IF NOT ONES
         MEND
         MACRO
&NAME    NUMBR
         B     F&SYSNDX+6
A&SYSNDX DC    X'FF00FFFFFFFFFF00FFFFFFFFFF00'
B&SYSNDX DC    X'F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0'
C&SYSNDX DC    XL10'00'
         DC    X'FAFBFCFDFEFF'
X&SYSNDX DC    F'0'                SAVE AREA REGISTER 2
D&SYSNDX NC    B&SYSNDX,0(14)
E&SYSNDX XC    B&SYSNDX,=20X'F0'
F&SYSNDX TRT   0(0,14),C&SYSNDX-240
&NAME    MVI   D&SYSNDX+1,X'00'    SET INSTR. LENGTHS TO ZERO
         MVI   E&SYSNDX+1,X'00'
         MVI   F&SYSNDX+1,X'00'
         BCTR  15,0
         ST    2,X&SYSNDX          SAVE REGISTER 2
         MVC   B&SYSNDX,=20X'F0'   SET MASK TO LOWEST VALID CHARACTER
         EX    15,D&SYSNDX         EXECUTE AND WITH DATA LENGTH IN R15
         EX    15,E&SYSNDX
         BM    G&SYSNDX            ERROR IF ANY BITS LEFT ON
         EX    15,F&SYSNDX         EXECUTE TRANSLATE AND TEST
         BC    8,H&SYSNDX          IF  OK  BYPASS ERROR ROUTINE
G&SYSNDX LR    14,15               ERROR ROUTINE SETS REGS.14 & 15 EQL.
H&SYSNDX L     2,X&SYSNDX          RESTORE REGISTER 2
         MEND
         MACRO
&NAME    PROGOUT  &RC
         LCLA  &A
&NAME    L     R13,4(R13)
         LM    R14,R12,12(R13)
         AIF   (K'&RC GT 0).G01
         MNOTE 0,'RC OMITTED RC=0 ASSUMED'
&A       SETA  0
         AGO   .G03
.G01     ANOP
&A       SETA  &RC
         AIF   (&A GT 15).ERROR
.G03     LA    R15,&A.(R0,R0)
         BR    R14
         MEXIT
.ERROR   MNOTE 8,'INVALID RETURN CODE'
         MEND
         MACRO
&NAME    PROGIN
         ENTRY SAVEAREA
&NAME    SAVE  (14,12)
         BALR  R5,R0
         USING *,R5
         CNOP  6,8
         ST    R13,*+22
         LR    R6,R13
         LA    R13,*+12
         ST    R13,8(R6)
         B     *+76
SAVEAREA DS    9D
         MEND
         MACRO
&NAME    MODOUT &R1,&R2,&R3,&R4,&R5,&R6
         LCLA  &A,&B
&NAME    L     R13,4(R13)
         AIF   (K'&R6 EQ 0).M01
         MNOTE 1,'NO MORE THAN 5 REGS CAN BE SPECIFIED- REST IGNORED'
.M01     AIF   (K'&R1 EQ 0).M09
&A       SETA  &R1
         AIF   (&A GT 12).ERROR
&B       SETA  &A*4+20
         ST    &A,&B.(R13)
         AIF   (K'&R2 EQ 0).M09
&A       SETA  &R2
         AIF   (&A GT 12).ERROR
&B       SETA  &A*4+20
         ST    &A,&B.(R13)
         AIF   (K'&R3 EQ 0).M09
&A       SETA  &R3
         AIF   (&A GT 12).ERROR
&B       SETA  &A*4+20
         ST    &A,&B.(R13)
         AIF   (K'&R4 EQ 0).M09
&A       SETA  &R4
         AIF   (&A GT 12).ERROR
&B       SETA  &A*4+20
         ST    &A,&B.(R13)
         AIF   (K'&R5 EQ 0).M09
&A       SETA  &R5
         AIF   (&A GT 12).ERROR
&B       SETA  &A*4+20
         ST    &A,&B.(R13)
         AGO   .M09
.ERROR   MNOTE 1,'REGS 13,14 AND 15 CANNOT BE CHANGED- MACRO IGNORED'
         MEXIT
.M09     RETURN (14,12)
         MEND
         MACRO
&NAME    MODIN
         CNOP  4,8
&NAME    SAVE  (14,12)
         BALR  R5,R0
         USING *,R5
         ST    R13,*+26
         LR    R6,R13
         LA    R13,*+16
         ST    R13,8(R6)
         LM    R6,R10,0(R1)
         B     *+76
         DS    9D
         MEND
         MACRO
&NAME    LPYR  &INPUT,&NOLPYR
         AIF   ('&INPUT' NE ' ').NO
         MNOTE 'FIRST PARAMETER OMITTED'
         AGO   .N1
.NO      AIF   ('&NOLPYR' NE ' ').N2
         MNOTE 'SECOND PARAMETER OMITTED'
.N1      MNOTE 'GENERATION TERMINATED'
         MEXIT
.N2      ANOP
&NAME    TM    &INPUT,X'01'
         BO    &NOLPYR
         TM    &INPUT,X'12'
         BM    &NOLPYR
         MEND
*
         TITLE 'GP020212 READ PDS COMPLETELY OR SELECTED MEMBER       '
GP020212 CSECT
         ENTRY GP020202            INSERT MODULE NUMBER CHANGING
GP020202 EQU   *                   PROGRAMMER CODE TO V.M. LEVEL
         PRINT NOGEN
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 3
***********************************************************************
*                                                                     *
*    MODULE GP020212  PROGRAMMER PAUL.A.DANIELSON.  ASSIGNED 30/03/72 *
*                                                                     *
*                           MODULE FUNCTIONS                          *
*                           ----------------                          *
*  DEPENDING ON THE CONTENTS OF P1 AND P2 THE MODULE WILL EITHER READ *
*  A NAMED PDS MEMBER AND INDICATE END OF MEMBER IN P4 OR READ ALL    *
*  MEMBERS WHOSE ADDRESSES ARE IN THE LIST AT P1 IN THE ORDER OF THE  *
*  ADDRESSES AND INDICATE END OF MEMBER AND END OF FILE (LAST MEMBER  *
*  IN LIST RETRIEVED).                                                *
*    1. SINGLE MEMBER PROCESSING.                                     *
*       -------------------------                                     *
*       P1 CONTAINS AN 8 BYTE MEMBER NAME LEFT JUSTIFIED AND PADDED   *
*       WITH BLANKS. P2 CONTAINS X'F0' TO INDICATE SINGLE MEMBER      *
*       PROCESSING ,IT IS SET TO X'FF' TO CLOSE THE DATA SET. P3 WILL *
*       CONTAIN THE MEMBER RECORD. AT END OF MEMBER ITS CONTENTS ARE  *
*       UNPREDICTABLE. P4 IS SET TO X'F0' TO INDICATE END OF MEMBER.  *
*                                                                     *
*    2. SEQUENTIAL MEMBER PROCESSING.                                 *
*       -----------------------------                                 *
*       P1 CONTAINS A LIST OF 4 BYTE MEMBER ADDRESSES IN THE ORDER IN *
*       WHICH THEY ARE TO BE READ (NORMALLY THIS LIST IS CREATED BY   *
*       GP020112). THE END OF P1 IS INDICATED BY A FULLWORD OF X'FF'S *
*       P2 CONTAINS X'00' TO INDICATE A LIST OF ADDRESSES AT P1.      *
*       P3 CONTAINS THE MEMBER RECORD. AT END OF MEMBER P3 CONTAINS   *
*       THE FIRST RECORD OF THE NEXT MEMBER TO BE READ.P4 CONTAINS    *
*       X'F0' AT END OF MEMBER AND X'FF' AT END OF DATA SET (LAST     *
*       MEMBER IN ADDRESS LIST BEEN READ).                            *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
         SPACE 2
*                             PARAMETERS                              *
*                             ----------                              *
*  1. I - A TABLE OF 4 BYTE DISK ADDRESS TERMINATED BY X'FF' OR AN    *
*         8 BYTE MEMBER NAME LEFT JUSTIFIED AND PADDED WITH BLANKS.   *
*  2. I - A ONE BYTE INDICATOR WHEN 00 P1 IS TABLE OF ADDRESSES,WHEN  *
*         F0 P1 CONTAINS MEMBER NAME,WHEN FF CLOSES DATA SET.         *
*  3. O - OUTPUT RECORD. (ANY LENGTH)                                 *
*                                                                     *
*  4. O - A ONE BYTE INDICATOR SET TO F0 AT END OF MEMBER FF AT       *
*         END OF P1 ADDRESS LIST. (END OF DATA SET)                   *
*  5.                                                                 *
*                                                                     *
*                                                                     *
*                           SPECIAL NOTES                             *
*                           -------------                             *
*  A FIXED OR FIXED BLOCK DATA SET CAN BE READ. DEBLOCKING IS DONE    *
*  IN THIS MODULE ACCORDING TO DCB INFORMATION ON THE DD CARD.AT      *
*  EODAD WHEN LIST ADDRESSES ARE USED THE DATA SET IS CLOSED.         *
*                                                                     *
***********************************************************************
*
**  AMENDMENT TO MODULE GP020212 BY PAUL ANTON DANIELSON
*
**  ASSIGNED 26/05/72, EFFECTIVE 01/05/72 AMENDMENT IS 0.1
*
**  DETAILS OF AMENDMENT ISSUE WTO PRIOR TO ABENDS.
*   --------------------
*
***********************************************************************
*
**  AMENDMENT TO MODULE GP020212 BY P. A. DANIELSON.
*
**  ASSIGNED 16/09/72, EFFECTIVE 18/09/72 AMENDMENT IS 0.2
*
**  DETAILS OF AMENDMENT WHEN MEMBER NOT FOUND FOLLOWING A 'FIND'
*   -------------------- (SINGLE MEMBER PROCESSING) RETURN WITH HEX FF
*                        IN FIRST BYTE OF PARAMETER 1 INSTEAD OF
*                        ABENDING.
*
*
*
*
*
***********************************************************************
         EJECT
         ISEQ  73,80
         MODIN
*
         LA    R2,PDS              PROVIDE ADDRESS ABILITY -
         USING IHADCB,R2           FOR DCB DSECT.
*
**       OPEN PDS AND OBTAIN CORRECT AMOUNT OF CORE FOR BUFFER
*        -----------------------------------------------------
BA02     EQU   *
         BC    0,BA06         NOTE ... 1ST TIME THROUGH ONLY
         OI    BA02+1,X'F0'   ---- SET TO BC 15,BA06
*
         MVI   0(R9),X'00'         SET EODAD/ END OF MODULE IND OFF
         OPEN  (PDS,(INPUT))       OPEN PARTITIONED DATA SET
*
**       CHECK DCB INFORMATION
*        ---------------------
         CLC   DCBLRECL,=H'256'    Q. IS RECORD SIZE MORE THAN 256
         BNH   BA03                A. NO - CONTINUE
         OI    BA25+1,X'F0'        USE MULTIPLE MOVE ROUTINE
BA03     EQU   *
         TM    DCBRECFM,X'80'      Q. UNDEFINED OR FIXED
         BZ    BA04                A. NO - ABEND
         TM    DCBRECFM,X'40'      Q. FIXED
         BZ    BA05                A. YES - OK
*
BA04     EQU   *
         WTO   'GP0202T - INVALID PDS RECFM ,JOB TERMINATED'        0.1
         ABEND 92,DUMP             DUMP - INVALID RECFM
*
BA05     EQU   *
         LH    R11,DCBBLKSI        PUT BLOCKSIZE INTO REG FOR GETMAIN
         GETMAIN R,LV=(R11)        GET BUFFER AREA
         ST    R1,SFD004           SAVE ADDRESS OF BUFFER
         ST    R6,SAA004           SAVE ADDRESS OF LIST (OR NAME)
************************ END OF FIRST TIME THROUGH ROUTINES ***********
BA06     EQU   *
         CLI   0(R7),X'FF'         Q. CLOSE REQUIRED
         BE    BA62                A. YES - GO CLOSE AND RESET SWITCHES
*
**       LOCATE REQUIRE MEMBER
*        ---------------------
BA08     EQU   *
         BC    0,BA16              BRANCH IF NEW MEMBER IS NOT REQUIRED
         OI    BA08+1,X'F0'        SET TO BC 15
*
         CLI   0(R7),X'00'         Q. LIST OF MEMBER ADDRS AT P1
         BE    BA12                A. YES - POINT TO NEXT MEMBER REQ'D
         CLI   0(R7),X'F0'         Q. MEMBER NAME AT P1
         BE    BA14                A. YES - GO FIND REQ'D MEMBER
*
         WTO   'GP0202T - PARAMETER 2 ERROR ,JOB TERMINATED'        0.1
         ABEND 92,DUMP             INVALID P2
*
**       POINT TO START OF NEXT MEMBER IN LIST
*        -------------------------------------
BA12     EQU   *
         POINT PDS,(R6)            POINT TO NEXT MEMBER
         B     BA16                GO READ FIRST RECORD
*
**       FIND MEMBER SPECIFIED BY P1
*        ---------------------------
BA14     EQU   *
         FIND  PDS,(R6),D          FIND MEMBER NAME AT P1
         LTR   R15,R15             Q. WAS FIND SUCESSFUL
         BZ    BA16                A. YES - READ FIRST RECORD
*
         MVI   0(R6),X'FF'         INDICATE MEMBER NOT FOUND        0.2
         B     BA30                GO TO MODOUT                     0.2
*
**       READ RECORD FROM PDS AND DEBLOCK
*        --------------------------------
BA16     EQU   *
         CP    CPC003,=P'0'        Q. ANY RECORDS LEFT IN BLOCK
         BH    BA24                A. YES GO DEBLOCK
*
         L     R11,SFD004          POINT TO BUFFER FOR NEXT RECORD
         READ  DECB1,SF,PDS,(R11),'S'   READ NEXT RECORD
         CHECK DECB1               CHECK FOR COMPLETE I/O
         ST    R11,SFA004          SAVE POINTER TO NEXT RECORD IN BLK
         LH    R15,DCBBLKSI        PUT BLOCKSIZE INTO WORK REGISTER
         L     R14,DECB1+16        PUT IOB ADDRESS INTO WORK REGISTER
         SH    R15,14(R14)         OBTAIN NO OF BYTES READ
         SR    R14,R14             ZEROISE R14
         LH    R1,DCBLRECL         PUT LRECL INTO REGISTER 1
         DR    R14,R1              DIV NO OF BYTES READ BY LRECL
         CVD   R15,SDD008          CONVERT NO OF RECS IN BLK TO DEC.
*
**       MOVE RECORD TO P3
*        -----------------
BA24     EQU   *
         L     R11,SFA004          POINT R11 TO NEXT RECORD
         LH    R15,DCBLRECL        PUT RECORD LENGTH INTO WORK REGISTER
         BCTR  R15,R0              SUBTRACT 1 FOR EXECUTED MOVE
*
**       MOVE LESS THAN 257 BYTES
*        ------------------------
BA25     EQU   *
         BC    0,BA26              SET TO BC 15 IF MORE THAN 256
         EX    R15,BA99            MOVE RECORD TO P3
         B     BA28                GO TO UPDATE POINTER TO RECORD
*
**       MOVE MORE THAN 256 BYTES
*        ------------------------
BA26     EQU   *
         MVC   0(256,R8),0(R11)    MOVE RECORD TO P3
         LA    R8,256(R8)          POINT TO NEXT OUTPUT POSITION IN P3
         LA    R11,256(R11)        POINT TO NEXT BYTE IN BUFFER
         SH    R15,=H'256'         SUBT. 256 FROM REMAINING LENGTH
         CH    R15,=H'255'         Q. REMAINDER LESS THAN 257
         BH    BA26                A. NO - LOOP
         EX    R15,BA99            MOVE LAST BIT OF RECORD TO P3
*
**       UPDATE POINTER AND COUNT OF RECORDS LEFT IN BLOCK
*        -------------------------------------------------
BA28     EQU   *
         LA    R15,1(R15)          ADD 1 TO GIVE TRUE LENGTH OF RECORD
         LA    R11,0(R11,R15)      POINT TO START OF NEXT RECORD
         ST    R11,SFA004          SAVE POINTER TO NEXT RECORD
         SP    CPC003,=P'1'        SUBTRACT 1 FROM NO OF RECS LEFT
*
BA30     EQU   *
         MODOUT
*        ------
         SPACE 3
*
**       END OF MEMBER ROUTINE
*        ---------------------
BA50     EQU   *
         MVI   0(R9),X'F0'         INDICATE END OF MEMBER
         NI    BA08+1,X'0F'        RESET BRANCH FOR NEXT FIND/POINT
         CLI   0(R7),X'F0'         Q. WAS THIS A SINGLE MEMBER READ
         BE    BA30                A. YES - EXIT
*
         L     R6,SAA004           POINT TO ADDRESS LIST AT P1
         LA    R6,4(R6)            POINT TO NEXT ADDRESS IN LIST
         ST    R6,SAA004           SAVE POINTER TO NEXT MEMBER ADDRESS
         CLC   0(4,R6),=F'-1'      Q. END OF LIST (EOF)
         BNE   BA08                A. NO - GO READ NEXT MEMBER
*
**       END OF DATA SET OR CLOSE REQUESTED
*        ----------------------------------
BA62     EQU   *
         NI    BA02+1,X'0F'        RESET 1ST TIME THROUGH SWITCH
         NI    BA08+1,X'0F'        RESET NEW MEMBER REQ'D SWITCH
         NI    BA25+1,X'0F'        RESET MOVE ROUTINE SWITCH
         MVI   0(R9),X'FF'         INDICATE END OF MEMBERS (EOF)
         LH    R0,DCBBLKSI         PUT BLOCK LENGTH IN REG 0
         L     R1,SFD004           PUT ADDRESS OF BUFFER IN REG 1
         FREEMAIN R,LV=(0),A=(1)   RELEASE CORE OBTAINED FOR BUFFER
         CLOSE (PDS)               CLOSE PARTITIONED DATA SET
*
         B     BA30                RETURN
*
         SPACE 3
*
**       EXECUTED MOVE TO MOVE RECORD OR RECORD SEGMENT TO P3
*        ----------------------------------------------------
BA99     MVC   0(0,R8),0(R11)
*
**       STORAGE AREAS AND CONSTANTS
*        ---------------------------
SFD004   DS    F                   ADDRESS OF INPUT BUFFER
SFA004   DS    F                   ADDRESS OF NEXT RECORD
SAA004   DS    A                   ADDRESS OF NEXT MEMBER ADDR IN LIST
SDD008   DS    0D                  DOUBLE WORD FOR CVD
         DS    CL5                 FILLER
CPC003   DC    PL3'0'              NO OF RECORDS LEFT IN BLOCK
*
**       PDS DCB
*        -------
PDS      DCB   DSORG=PO,MACRF=(R),EODAD=BA50,DDNAME=PDSDD
*
         SPACE 3
         LTORG
         DCBD  DSORG=PO
GP020212 CSECT
         END
