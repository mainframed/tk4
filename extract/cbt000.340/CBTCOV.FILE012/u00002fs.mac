AMM.     TITLE 'RESPOND STOW ROUTINE - A.MORRISH'
***********************************************************************
*                                                                     *
*  THIS ROUTINE IS ENTERED AT THE POINT AT WHICH THE USER WISHES TO   *
* ISSUE A STOW MACRO-INSTRUCTION WITH THE ADD OR REPLACE OPTION. THE  *
* ROUTINE WILL PERFORM THE STOW BUT WILL NOT -                        *
*                                                                     *
*        ALTER THE TTR IN THE USER DATA TO THAT IN DCBRELAD.          *
*                                                                     *
*        WRITE AN EOD MARK AT THE CURRENT DISK LOCATION.              *
*                                                                     *
*  THE ONLY IMPACT OF THIS ROUTINE ON THE DATA SET IS IN THE          *
* DIRECTORY.                                                          *
*                                                                     *
*  RETURN CODES ARE AS FOR STOW.                                      *
*                                                                     *
*  AT ENTRY REGISTER 0 CONTAINS THE ADDRESS OF THE USER SUPPLIED DATA *
* THAT IS TO BE PLACED IN THE DIRECTORY. REGISTER ONE CONTAINS THE    *
* ADDRESS OF THE OPEN DCB THAT DEFINES THE DATA SET THAT IS TO BE     *
* CHANGED                                                             *
*                                                                     *
***********************************************************************
         SPACE 2
* REGISTER USAGE
R0       EQU   0                   PARAMETER REGISTER / WORK REGISTER.
R1       EQU   1                   PARAMETER REGISTER / WORK REGISTER
R2       EQU   2                   LINK REGISTER.
R3       EQU   3                   ADDRESS OF MEMBER ENTRY IN OUTPUT.
R4       EQU   4                   ADDRESS OF MEMBER ENTRY IN INPUT.
R5       EQU   5                   LENGTH OF MEMBER ENTRY.
R6       EQU   6                   ADDRESS OF LAST BYTE IN INPUT BUFFER
R7       EQU   7                   ADDRESS OF NEXT INPUT BUFFER.
R8       EQU   8                   ADDRESS OF CURRENT OUTPUT BUFFER.
R9       EQU   9                   LOOP CONTROL ADDRESS.
R10      EQU   10                  ADDRESS OF USER ADD OR REPLACE DATA.
R11      EQU   11                  ADDRESS OF USER DCB.
RBASE    EQU   12                  BASE REGISTER.
R13      EQU   13                  SAVE AREA POINTER.
R14      EQU   14                  LINK REGISTER.
R15      EQU   15                  ENTRY POINT ADDRESS / RETURN CODE.
         EJECT
RTPSTOW  CSECT
*        BEGIN SAVE,BASE=RBASE     INITIALISE AND DEFINE BASE REGISTER.
         STM   14,12,12(13)
         BALR  RBASE,0
         USING *,RBASE
         LA    15,SAVE
         ST    15,8(13)
         ST    13,4(15)
         LR    13,15
         LPR   R10,R0              SET GR10 -> REPLACE OR ADD DATA.
         LPR   R11,R1              SET GR11 -> DCB.
         USING IHADCB,R11          DEFINE GR11 AS BASE REGISTER.
         MVI   WCOMM,READ+KEY+DATA RESTORE DRY RUN COMMAND CODE.
         MVI   WCCW3+4,CC+SKIP+SLI RESTORE DRY RUN SKIP AND SLI INDS.
         ST    R11,IOB+20          STORE DCB ADDRESS IN IOB.
         XC    RCCW3+1(3),RCCW3+1  CLEAR ADDRESS FOR 'OR'
         O     R10,RCCW3           SET SEARCH KEY IN GR10.
         ST    R10,RCCW3           STORE SEARCH KEY ADDRESS IN CCW.
         SPACE 1
*
*        INITIALISE FOR FIRST SEARCH.
*
         SPACE 1
RERUN    LA    R1,RCCW1            SET GR1 -> FIRST SEARCH.
         ST    R1,IOB+16           STORE SEARCH CCW ADDRESS IN IOB.
         L     R1,DCBDEBAD         SET GR1 -> DEB.
         MVC   IOB+33(6),36(R1)    SET INITIAL SEEK ADDRESS IN IOB.
         BAL   R2,SUB4A            LINK TO SEARCH FOR KEY.
         LA    R1,WCCW1            SET GR1 -> FIRST ROTATE CCW.
         ST    R1,IOB+16           STORE ROTATE CCW ADDRESS IN IOB.
         LA    R3,BUFF4+18         SET GR3 -> FIRST OUTPUT MEMBER ADDR.
         LA    R4,BUFF1+18         SET GR4 -> FIRST MEMBER IN BLOCK.
         LA    R6,BUFF1+16         SET GR6 -> START OF DIRECTORY DATA.
         AH    R6,BUFF1+16         SET GR6 -> LAST BYTE USED IN BLOCK.
         LA    R7,BUFF2            SET GR7 -> NEXT INPUT BUFFER.
         LA    R8,BUFF4            SET GR8 -> CURRENT OUTPUT BUFFER.
         MVI   272(R7),255         SET BUFFER AVAILABLE INDICATOR
         BALR  R9,R0               SET GR9 FOR LOOP.
         SPACE 1
*
*        SEARCH FOR MEMBER NAME EQUAL OR HIGH IN INPUT BLOCK.
*
         SPACE 1
         CLC   0(8,R4),0(R10)      COMPARE DIRECTORY NAME WITH USER NM.
         BE    REPLACE             IF EQUAL THEN GO TO REPLACE.
         BH    ADD                 IF HIGH THEN GO TO ADD.
NOCOMP   BAL   R14,SUB1            LINK TO STORE MEMBER IN OUTPUT.
         AR    R4,R5               SET GR4 -> NEXT MEMBER.
TSTLAST  CLR   R4,R6               COMPARE WITH END OF BUFFER.
         BCR   4,R9                IF LESS THEN GO TO PROCESS THIS MEMB
         LR    R1,R5               SET GR1 = LENGTH OF MEMBER.
         SR    R4,R5               SET GR4 -> PREVIOUS MEMBER.
         CLI   0(R4),X'FF'         IS IT LAST INPUT RECORD ?
         BNE   NXTBLK              IF NOT THEN GO TO READ NEXT BLOCK.
         TM    IOB+12,X'01'        HAS EOD BEEN REACHED ?
         BNZ   EOD                 IF SO THEN GO TO TEST CCW.
         BAL   R9,SUB2             LINK TO TEST FOR RERUN.
NORMEXIT SR    R15,R15             SET GR15 = 0.
*RETURN  GOBACK SAVE,RC=(15)       RETURN.
RETURN   L     13,4(13)
         L     14,12(13)
         LM    0,12,20(13)
         MVI   12(13),255
         BR    14
         SPACE 1
*
*        AT END OF DATA CHECK FOR AVAILABLE SPACE.
*
         SPACE 1
EOD      L     R5,IOB+8            SET GR5 -> LAST CCW
         LA    R15,12              SET GR15 = 'NO SPACE' ERROR CODE.
         CLI   0(R5),READ+COUNT+KEY+DATA+MT  TEST CCW COMMAND CODE.
         BE    RETURN              IF READ CKD THEN RETURN.
         BAL   R9,SUB2             LINK TO TEST FOR RERUN.
         L     R7,WCCW3            SET GR7 -> LAST OUTPUT BUFFER.
         MVC   DCBDIRCT+1(1),9(R7) STORE NUMBER OF BYTES IN LAST BLOCK.
         B     NORMEXIT            GO TO NORMAL EXIT.
         SPACE 1
*
*        POSITION IN BLOCK CORRESPONDING TO USER DATA FOUND.
*
         SPACE 1
REPLACE  BAL   R15,SUB3            LINK TO CALCULATE LENGTH.
         AR    R4,R5               SET GR4 -> NEXT MEMBER.
         LR    R5,R1               RESTORE GR5.
         SPACE 1
ADD      LR    R9,R4               SAVE POINTER TO MEMBER.
         LR    R4,R10              SET GR4 -> USER DATA.
         BAL   R14,SUB1            LINK TO STORE ENTRY IN OUTPUT.
         LR    R4,R9               RESTORE POINTER TO MEMBER.
         LA    R9,NOCOMP           SET GR9 TO ELIMINATE COMPARES.
         B     TSTLAST             GO TO TEST FOR LAST MEMBER.
         SPACE 1
*
*        READ NEXT BLOCK.
*
         SPACE 1
NXTBLK   CLI   0(R7),255           IS NEXT BUFFER AVAILABLE ?
         BNE   *+8                 IF NOT THEN NO ROTATE.
         BAL   R2,SUB4             LINK TO ROTATE BUFFERS.
         LA    R4,18(R7)           SET GR4 -> START OF NEXT ENTRY.
         LA    R6,16(R7)           SET GR6 -> START OF NEXT BLOCK.
         AH    R6,16(R7)           SET GR6 -> LAST BYTE USED IN BLOCK.
         LA    R7,272(R7)          SET GR7 -> NEXT BUFFER.
         LA    R2,BUFF4            SET GR2 -> LAST BUFFER.
         CLR   R7,R2               COMPARE FOR VALID GR7.
         BCR   13,R9               IF VALID THEN GO TO PROCESS NEXT.
         LA    R7,BUFF1            SET GR7 -> FIRST BUFFER.
         BR    R9                  GO TO PROCESS NEXT.
         EJECT
*  SUBROUTINES
         SPACE 2
*
*        STORE ENTRY IN OUTPUT BUFFER.
*
         SPACE 1
SUB1     BAL   R15,SUB3            LINK TO CALCULATE LENGTH.
         BNL   *+8                 IF ENTRY FITS THEN NO ROTATE.
         BAL   R2,SUB4             LINK TO ROTATE BUFFERS.
         LR    R2,R5               SET GR2 = LENGTH.
         BCTR  R2,R0               DECREMENT GR2 FOR MOVE.
         EX    R2,SUB1A            MOVE ENTRY TO OUTPUT.
         AR    R3,R5               SET GR3 FOR NEXT MEMBER TO BE STORED
         BR    R14                 RETURN
SUB1A    MVC   0(0,R3),0(R4)       MODEL STATEMENT.
         SPACE 1
*
*        TEST FOR RERUN.
*
         SPACE 1
SUB2     BAL   R2,SUB4             LINK TO ROTATE BUFFERS.
         CLI   WCOMM,WRITE+KEY+DATA  IS THIS THE DRY RUN ?
         BCR   8,R9                IF NOT THEN RETURN.
         MVI   WCOMM,WRITE+KEY+DATA     SET COMMAND TO WRITE.
         MVI   WCCW3+4,CC          SET CCW TO COMMAND CHAIN.
         B     RERUN               GO TO EXECUTE WET RUN.
         SPACE 1
*
*        CALCULATE LENGTH OF MEMBER.
*
         SPACE 1
SUB3     LR    R1,R5               SAVE PREVIOUS LENGTH.
         LH    R5,10(R4)           SET GR5 = NUMBER OF DATA HALF-WORDS.
         N     R5,F31              CLEAR HIGH ORDER BYTES.
         LA    R5,12(R5,R5)        SET GR5 = TOTAL LENGTH OF MEMBER.
         LA    R2,272(R8)          SET GR2 -> END OF BUFFER.
         SR    R2,R3               SET GR2 = RESIDUAL COUNT.
         CR    R2,R5               COMPARE FOR FIT.
         BR    R15                 RETURN.
         SPACE 1
*
*        ROTATE BUFFERS.
*
         SPACE 1
SUB4     LA    R15,16(R8)          SET GR15 -> START OF OUTPUT BUFFER.
         SR    R15,R3              SET GR15 = BYTES USED (NEGATIVE)
         LCR   R15,R15             SET GR15 = LENGTH OF BLOCK.
         STH   R15,16(R8)          STORE LENGTH OF BLOCK.
         MVI   0(R8),255           SET BUFFER AVAILABLE.
         SR    R3,R1               SET GR3 = HIGHEST ENTRY IN BLOCK.
         MVC   8(8,R8),0(R3)       SET KEY.
         LA    R1,BUFF4            SET GR1 -> LAST BUFFER.
         CLR   R1,R8               COMPARE WITH CURRENT BUFFER.
         LR    R1,R8               SET GR1 -> CURRENT BUFFER.
         LA    R8,272(R8)          SET GR8 -> NEXT BUFFER.
         BNE   *+8                 IF VALID THEN USE NEXT BUFFER.
         LA    R8,BUFF1            SET GR8 -> FIRST BUFFER.
         LA    R0,8(R1)            SET GR0 -> KEY OF LAST BUFFER.
         ST    R0,WCCW3            STORE WRITE ADDRESS IN WRITE CCW
         MVC   WCCW3(1),WCOMM      SET WRITE COMMAND (OR READ) IN CCW.
         LA    R15,BUFF1           SET GR15 -> FIRST BUFFER.
         S     R1,F272             DECREMENT GR1 FOR PREVIOYS BUFFER.
         CR    R1,R15              COMPARE FOR PREVIOUS BUFFER.
         BNL   *+8                 IF VALID THEN USE.
         LA    R1,BUFF4            SET GR1 -> LAST BUFFER.
         MVC   IOB+35(5),0(R8)     STORE SEEK ADDRESS.
         ST    R1,WCCW8            STORE READ ADDRESS IN CCW.
         MVI   WCCW8,READ+COUNT+KEY+DATA+MT  SET READ OPERATION.
         SPACE 1
SUB4A    EXCP  IOB                 EXECUTE CHANNEL PROGRAM.
         WAIT  1,ECB=ECB           WAIT FOR COMPLETION.
         LA    R3,18(R8)           SET GR3 -> NEXT MEMBER ENTRY.
         TM    ECB,X'20'           CHECK FOR I/O ERROR.
         BCR   1,R2                IF NONE THEN RETURN.
         TM    IOB+12,X'01'        IS IT END OF DATA ?
         BCR   1,R2                IF SO THEN RETURN.
         LA    R15,16              SET DIRECTORY READ ERROR CODE.
         B     RETURN              GO TO RETURN.
         EJECT
SAVE     DS    18F
IOB      DC    X'42000000',A(ECB,0,0,RCCW1,0),2A(0),A(0,1)
ECB      DC    F'0'
         SPACE 1
RCCW1    CCW   READ+HA,BUFF1,CC,5
RCCW2    CCW   READ+COUNT+MT,BUFF1,CC,8
RCCW3    CCW   SEARCH+KEY+EQ+HI+MT,0,CC,8
         CCW   TIC,RCCW2,0,0
         CCW   READ+DATA+MT,BUFF1+16,CC,256
         CCW   READ+COUNT+KEY+DATA+MT,BUFF2,0,272
F272     EQU   *-4
         SPACE 1
WCCW1    CCW   SEARCH+COUNT+EQ,IOB+35,CC,5
         CCW   TIC,WCCW1,0,31
F31      EQU   *-4
WCCW3    CCW   READ+KEY+DATA,0,CC+SKIP+SLI,264
WCCW4    CCW   SEARCH+COUNT+EQ,IOB+35,CC,5
         CCW   TIC,WCCW4,0,READ+KEY+DATA
WCOMM    EQU   *-1
         CCW   READ+KEY+DATA,0,CC+SKIP,264
         CCW   READ+KEY+DATA+MT,0,CC+SLI+SKIP,264
WCCW8    CCW   READ+COUNT+KEY+DATA+MT,0,0,272
         SPACE 1
* CCW EQUATES.
WRITE    EQU   X'01'
SEARCH   EQU   X'01'
READ     EQU   X'02'
DATA     EQU   X'04'
KEY      EQU   X'08'
COUNT    EQU   X'10'
HA       EQU   X'18'
EQ       EQU   X'20'
HI       EQU   X'40'
MT       EQU   X'80'
TIC      EQU   X'08'               TRANSFER IN CHANNEL.
*
CC       EQU   X'40'
SLI      EQU   X'20'
SKIP     EQU   X'10'
         SPACE 2
BUFF1    DS    136H
BUFF2    DS    136H
BUFF3    DS    136H
BUFF4    DS    136H
         DCBD  DSORG=PO,DEVD=DA
         END
