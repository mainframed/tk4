SPY00    TITLE 'SPY COMMAND MODULE - REL 2.0'
SPY00    START
* FUNCTION:-
*        TO INITIALISE THE SPY SYSTEM
*        TO RECEIVE AND VERIFY SPY COMMANDS
*        TO ATTACH AND ACTIVATE SPY COMMAND PROCESSORS
*        TO PROCESS THE SPY 'HELP' COMMAND
*        TO CONTROL THE SHUTDOWN OF SPY
*
* EXTERNAL REFERENCES:-
*
* ENTRY POINTS:-
*        HEREWEGO - MAIN ENTRY POINT / RESTART ENTRY POINT
*        TIMBREAK - TIMER INTERVAL EXPIRED ENTRY POINT
*        RESTART  - SPIE ERROR ENTRY POINT - CAUSES RESTART
*
* TABLES:-
*        CLEANUP  - XLATE COMMAS TO SPACES & LOWER TO UPPER CASE
*        DISKTABL - TABLE OF ACESSIBLE DISKS (FOLLOWED BY 'END')
*        CMMDTABL - TABLE OF RECOGNISED SPY COMMANDS & SYNONYMS
*        HELPLIST - HELP DATA
*        TCBTABLE - TABLE OF PARTITION TCB'S IN PARTITION ORDER
*
*******************************************************************
*                              N O T E                            *
*           THIS MODULE MUST BE  A U T H O R I S E D ! ! !        *
*******************************************************************
*
* REGISTER USAGE:-
*        R0    OS LINKAGE / SCRATCH
*        R1    OS LINKAGE / SCRATCH
*        R2    SCRATCH
*        R3    SCRATCH
*        R4    PARAMETER CSECT (PARMSECT) ADDRESSABILITY
*        R5    CMMDTABL ADDRESSABILITY
*        R6
*        R7
*        R8
*        R9
*        R10
*        R11
*        R12   LOCAL ADDRESSABILITY
*        R13   SAVEAREA POINTER
*        R14   OS LINKAGE / SCRATCH / INTERNAL LINKAGE
*        R15   OS LINKAGE / SCRATCH
*
         EJECT
*******************************************************************
* DEVELOPED BY THE COMMERCIAL UNION ASSURANCE COMPANY TECHNICAL   *
* SUPPORT GROUP, 431 GODSTONE ROAD, WHYTELEAFE, SURREY, CR3 OYQ.  *
* THIS SOFTWARE IS FREELY OFFERED IN THE SPIRIT OF MUTUAL AID BUT *
* WE ACCEPT NO LIABILITY WHATSOEVER FOR ANY DAMAGES ARISING FROM  *
* ITS USE, WHETHER DUE TO MALFUNCTION OR DELIBERATE ABUSE         *
*******************************************************************
*                                                               *MOD1
* MOD1 SET COMMAND TYPE TO 'N' (I.E. SWITCH OFF) FOR COMMANDS   *MOD1
*      WHICH ARE ONLY USED IN A VM ENVIRONMENT. MODIFY HELPLIST *MOD1
*      TO REFLECT CHANGES AND DISPLAY ONE FORMAT ONLY FOR       *MOD1
*      EACH COMMAND.                                            *MOD1
*                                                               *MOD1
*      B.NOLAN                          21ST AUGUST 1978        *MOD1
*                                                               *MOD1
*****************************************************************MOD1
         SPACE 1
** SYMBOLIC REGISTER EQUATES **
         SPACE 1
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
************************
*  SPY INITIALISATION  *
************************
         SPACE 1
         USING HEREWEGO,R15            TEMPORARY ADDRESSABILITY
HEREWEGO SAVE  (14,12),,SPY.COMMAND.MODULE.-.RELEASE.2.0
         B     SETUP                   GO CHAIN SAVEAREAS ETC
SAVEAREA DS    18F                     'OUR' SAVEAREA
         DROP  R15                     FINISHED WITH HIM
         USING HEREWEGO,R12            PERMANENT ADDRESSABILITY
SETUP    LR    R12,R15                 SET BASE REGISTER
         ST    R13,SAVEAREA+4          POINT NEW TO OLD
         LR    R15,R13                 REMEMBER OLD
         LA    R13,SAVEAREA            UPDATE SAVEAREA POINTER
         ST    R13,8(,R15)             POINT OLD TO NEW
         SPACE 1
         USING CMDSECT,R5              COMMAND TABLE ADDRESSABILITYV
         USING PARMSECT,R4             PARAMETER CSECT ADDRESSABILITY
         L     R4,=A(PARMSECT)         INIT R4 TO BASE ADDRESS PARMSECT
         SPACE 1
**************************************
* SAVE AREAS HAVE BEEN CHAINED       *
* BASE REGISTER 12 IS ACTIVE         *
* PARMSECT BASE REGISTER 4 IS ACTIVE *
* BASE REGISTER 5 WILL BE SET LATER  *
**************************************
         EJECT
****************************************
* BUILD TABLE OF ACCESSIBLE DISKS FOR  *
* USE BY DISK PROCESSING SPY COMMANDS  *
****************************************
         SPACE 1
* NOTE:-
*        FOR EACH DISK TO BE ACCESED BY SPY, INCLUDE A DDCARD OF
*        THE FOLLOWING FORMAT IN THE SPY JOBSTEP
*
*                                    3330
*              //DDVOLSER DD    UNIT=DISK,DISP=OLD,VOL=SER=VOLSER
*                                    ETC
         SPACE 1
         EXTRACT W1F,FIELDS=TIOT       A(TIOT) ==> W1F
         L     R1,W1F                  POINT TO TIOT
         LA    R1,24(,R1)              1ST DD ENTRY IN TIOT
         L     R15,=A(DISKTABL)        INIT DISK TABLE POINTER
         SLR   R0,R0                   CLEAR R0 FOR LENGTH BYTE
         SPACE 1
TIOTLOOP CLI   0(R1),X'00'             END OF TIOT ?
         BE    TIOTEND                 YES - GET OUT
         CLI   0(R1),X'14'             ONE OF OURS ?
         BNE   TIOTNEXT                SURELY NOT
         CLC   4(2,R1),=C'DD'          IS DDNAME = DDVOLSER ?
         BNE   TIOTNEXT                NO - THEN IT'S NOT ONE OF OURS
         MVC   0(6,R15),6(R1)          YES - ADD VOLSER TO TABLE
         LA    R15,6(,R15)             AND BUMP THE POINTER
         SPACE 1
TIOTNEXT IC    R0,0(R1)                LENGTH DD ENTRY ==> R0
         ALR   R1,R0                   BUMP R1 TO NEXT DD ENTRY
         B     TIOTLOOP                AND GO ROUND UNTIL ALL DONE
         SPACE 1
TIOTEND  MVC   0(3,R15),=C'END'        MARK END OF DISK TABLE
         EJECT
*************************************
* PREPARE TO ACCEPT MODIFY COMMANDS *
*************************************
         SPACE 1
         EXTRACT W1F,FIELDS=COMM       A(COMM AREA) ==> W1F
         L     R2,W1F                  A(COMM AREA) ==> R2
         MVC   MODFYECB,0(R2)          MOVE A(MODIFY ECB) TO MODFYECB
         LA    R2,4(,R2)               POINT TO A(CIB)
         ST    R2,AACIB                SAVE A(A(CIB))
         SPACE 1
CLEARCIB L     R2,AACIB                GET A(A(CIB))
         ICM   R3,15,0(R2)             GET A(CIB) & SET COND CODE
         BZ    CIBCLEAR                ZERO ? - CIB CHAIN IS CLEAR
         QEDIT ORIGIN=(R2),BLOCK=(R3)  CLEAR 1ST BLOCK ON CHAIN
         B     CLEARCIB                GO LOOK FOR MORE TO GET RID OF
         SPACE 1
CIBCLEAR L     R2,AACIB                GET A(A(CIB))
         QEDIT ORIGIN=(R2),CIBCTR=1    ENABLE MODIFY COMMAND
         EJECT
****************************
* CHECK FOR VM ENVIRONMENT *
* SET FLAGS ACCORDINGLY    *
****************************
         SPACE 1
         L     R1,16(0,0)              GET A(CVT)
         L     R1,328(,R1)             GET A(COMMON EXTENSION)
         TM    5(R1),X'C0'             IS VM/370 RUNNING ?
         BZ    NOTVM                   NO - SKIP VM INITIALISATION
         SPACE 1
         TM    5(R1),X'80'             NONPAGING VM ENVIRONMENT ?
         BZ    VMONLY                  NO - VS1 IS PAGING
         OI    FLAG1,VMPAGE            YES - TELL THE WORLD VM PAGING
         SPACE 1
VMONLY   OI    FLAG1,VMENVIR+VMSPY     UNDER VM, SPY IS LIVE
         WTO   '** VM SPY IS LIVE **'
         SPACE 1
NOTVM    BAL   R14,TIMER               ACTIVATE TIMER
         EJECT
****************************
* CHECK FOR ABEND RECOVERY *
* - ISSUE SPIE IF NEEDED   *
* - OPEN DUMP DATASET      *
* - FILL IN TCB TABLE      *
****************************
         SPACE 1
         TM    FLAG1,RECOVER           IS THIS A RECOVERY ?
         BNZ   RSTRTMSG                YES - GO ISSUE RESTART MESSAGE
         OI    FLAG1,RECOVER           NO -SET FLAG FOR FUTURE ABENDS
         SPACE 1
** ISSUE SPIE COMMAND **
         SPACE 1
         SPIE  RESTART,((1,7))         ISSUE SPIE TO TRAP ERRORS
         ST    R1,LASTPICA             SAVE A(LAST PICA) FOR EXIT
         SPACE 1
** OPEN DUMP DATASET **
         SPACE 1
         OPEN  (DUSTBIN,(OUTPUT))      OPEN SNAP DUMP DATASET
         SPACE 1
** FILL IN TCB TABLE **
         L     R1,16(0,0)              GET A(CVT)
         L     R1,244(,R1)             GET A(A(TCB FOR P0))
         L     R14,ATCBTABL            GET START OF OUR TCB TABLE
         SPACE 1
TCBLOOP  L     R15,0(,R1)              GET A(NEXT TCB)
         LA    R15,0(,R15)             CLEAR TOP BYTE
         LTR   R15,R15                 IT IT ZERO ?
         BZ    RSTRTDUN                YES - GET OUT
         SPACE 1
         ST    R15,0(,R14)             SAVE POINTER IN TABLE
         TM    30(R15),X'01'           IS IT TIME-SLICED ?
         BZ    TCBNOTSL                NO ==>
         OI    4(R14),TCBTSL           FLAG TABLE ENTRY
         OI    FLAG1,TSLACTV           TELL THE WORLD TIMESLICE ACTIVE
TCBNOTSL TM    203(R15),X'80'          IS IT UNDER DDG ?
         BZ    TCBNODDG                NO ==>
         OI    4(R14),TCBDDG           FLAG TABLE ENTRY
         OI    FLAG1,DDGACTV           TELL THE WORLD DDG ACTIVE
TCBNODDG TM    4(R14),TCBNODSP         IS THIS GUY MOVABLE ?
         BZ    TCBMVBL                 YES ==>
         ST    R14,TCBBAR              NO - LOWER THE BAR
TCBMVBL  LA    R1,4(,R1)               BUMP ADDRESS LIST POINTER
         LA    R14,L'TCBENT(,R14)      BUMP TCB TABLE POINTER
         B     TCBLOOP                 AND RECYCLE
         SPACE 1
RSTRTMSG WTO   '** SPY RESTART COMPLETED **'
         SPACE 1
RSTRTDUN EQU   *
         EJECT
*********************
* MAIN COMMAND LOOP *
*********************
         SPACE 1
NEXTCMMD MVI   REPLY,C' '              CLEAR
         MVC   REPLY+1(L'REPLY-1),REPLY       REPLY BUFFER
         SPACE 1
         TM    FLAG1,MODIFY            WAS LAST COMMAND A MODIFY ?
         BO    WASMODFY                YES - NO NEED TO DO A WTOR
         SPACE 1
         XC    WTORECB,WTORECB         RESET WTOR ECB
         BAL   R14,ASTERISK            PUT OUT A LINE OF ASTERISKS
         WTOR  '** SPY - YES, MASTER ? **',REPLY,L'REPLY,WTORECB
         BAL   R14,ASTERISK            PUT OUT A LINE OF ASTERISKS
         B     WAITABIT                AND WAIT FOR SOMETHING
         SPACE 1
WASMODFY NI    FLAG1,255-MODIFY        RESET MODIFY FLAG
         SPACE 1
         L     R2,AACIB                A(A(CIB)) ==> R2
         L     R3,0(,R2)               A(CIB) ==> R3
         QEDIT ORIGIN=(R2),BLOCK=(R3)  REMOVE OLD CIB & ENABLE MODIFY
         SPACE 1
***********************
* WAITING FOR COMMAND *
***********************
         SPACE 1
WAITABIT WAIT  1,ECBLIST=GODOT         "I'M LEANING ON THE LAMPOST..."
         SPACE 1
*************************************
* ACCEPT COMMAND OR TIMER INTERRUPT *
*************************************
         SPACE 1
         TM    TIMERECB,X'40'          WAS IT A TIMER INTERRUPT ?
         BZ    CLRPRM                  NO - THEN IT MUST BE A COMMAND
         SPACE 1
         LA    R14,WAITABIT            MAKE TIMER RETURN TO WAIT
         B     TIMER                   INVOKE TIMER / VM SPY
         SPACE 1
CLRPRM   MVI   PARM,C' '               CLEAR
         MVC   PARM+1(L'PARM-1),PARM      PARAMETER FIELD
         SPACE 1
         TM    WTORECB,X'40'           WAS THAT A REPLY ?
         BNZ   WASREPLY                YES - SKIP ON A BIT
         SPACE 1
         OI    FLAG1,MODIFY            TURN ON MODIFY BIT
         L     R2,AACIB                A(A(CIB)) ==> R2
         L     R2,0(,R2)               POINT TO CIB
         LH    R1,14(,R2)              GET DATA LENGTH
         BCTR  R1,R0                   REDUCE BY 1 FOR THE MACHINE
         EX    R1,MOVEREPL             MVC REPLY(*-*),16(R2)
         SPACE 1
WASREPLY TR    REPLY,CLEANUP           XLATE TO UPPER CASE AND
*                                      TURN COMMAS INTO SPACES
         EJECT
*****************************
* ANALYZE & PROCESS COMMAND *
*****************************
         SPACE 1
         MVC   COMMAND,=CL10' '        CLEAR COMMAND BUFFER
         CLI   REPLY,C' '              LEADING SPACE IN REPLY ?
         BE    INVCMMD                 YES - INVALID COMMAND
         SPACE 1
         LA    R1,REPLY+1              1ST POSSIBLE SPACE IN BUFFER
         LA    R0,10                   MAX RANGE OF INTEREST
         SPACE 1
SCANCMD  CLI   0(R1),C' '              TRAILING SPACE ?
         BE    SCANEND                 YES - SCAN IS COMPLETE
         LA    R1,1(,R1)               NO - BUMP POINTER
         BCT   R0,SCANCMD              AND TRY UP TO A MAX OF 10
         B     INVCMMD                 > 10 BYTES - COMMAND INVALID
         SPACE 1
SCANEND  LR    R15,R1                  SAVE POINTER FOR LATER
         BCTR  R1,R0                   BACK OFF TO LAST NON-BLANK
         SL    R1,=A(REPLY)            CONVERT TO M/C LENGTH
         EX    R1,MOVECMMD             MVC COMMAND(*-*),REPLY
         SPACE 1
         LA    R1,REPLY+L'REPLY        SET UP A TERMINATOR
         SLR   R1,R15                  MAX POSSIBLE PARM LENGTH ==> R1
         SPACE 1
SCANPRM  CLI   0(R15),C' '             LOOK FOR START OF PARM
         BNE   SCNPREND                FOUND IT - BRANCH
         LA    R15,1(,R15)             OH WELL, TRY THE NEXT ONE
         BCT   R1,SCANPRM              REDUCING COUNT AS YOU GO
         B     PRMDONE                 NO PARM SUPPLIED ? FAIR ENOUGH
         SPACE 1
SCNPREND BCTR  R1,R0                   REDUCE TO M/C LENGTH
         EX    R1,MOVEPARM             MVC PARM(*-*),0(R15)
         SPACE 1
PRMDONE  XC    PARMECB,PARMECB         CLEAR PARM ECB
         SPACE 1
* NOTE - AS ALL SUBROUTINES AND SUBTASKS SHARE THE SAME PARAMETER AREA
* IT IS THE RESPONSIBILITY OF THE SUBROUTINE/TASK TO COPY THE FIELDS
* 'PARM' AND 'COMMAND' AS EARLY AS POSSIBLE IN ITS EXECUTION
* AND THEN POST THE PARM ECB 'PARMECB'. THE SPY COMMAND MODULE WILL
* WAIT ON THIS ECB WHENEVER IT ATTACHES AN ASYNCHRONOUS TASK, THUS
* AVOIDING THE POSSIBILITY OF OVER-WRITING THE PARM FIELDS BEFORE THE
* SUBTASK HAS HAD A CHANCE TO COPY THEM. EQUALLY, A SUBTASK MAY NOT
* MODIFY FIELDS IN 'PARMSECT' UNLESS CONSIDERATION HAS BEEN MADE FOR
* THE POSSIBLE EFFECT THIS MAY HAVE ON OTHER SUBROUTINES/TASKS.
         SPACE 1
** SCAN COMMAND TABLE FOR SUPPLIED COMMAND **
         SPACE 1
         L     R5,=A(CMMDTABL)         POINT TO START OF COMMAND TABLE
         SPACE 1
FINDCMMD CL    R5,=A(CMMDEND)          CHECK FOR END OF TABLE
         BNL   INVCMMD                 END REACHED - INVALID COMMAND
         CLC   COMMAND,CMDKEY          CHECK COMMAND AGAINST KEY
         BE    FOUNDCMD                "WE HAVE LIFT-OFF"
         LA    R5,CMDLNGTH(,R5)        OK - TRY NEXT KEY (IF ANY)
         B     FINDCMMD                LOOP UNTIL FOUND OR DEAD
         SPACE 1
FOUNDCMD MVC   COMMAND,CMDNAME         MOVE TRUE COMMAND NAME TO PARMS
         SPACE 1
** SWITCH ON COMMAND TYPE **
         SPACE 1
         CLI   CMDTYPE,C'A'            COMMAND TYPE 'A' ?
         BE    TYPEACMD                YES, PROCESS ....
         CLI   CMDTYPE,C'E'            COMMAND TYPE 'E' ?
         BE    TYPEECMD                YES, PROCESS ....
         CLI   CMDTYPE,C'I'            COMMAND TYPE 'I' ?
         BE    TYPEICMD                YES, PROCESS ....
         CLI   CMDTYPE,C'N'            COMMAND TYPE 'N' ?
         BE    TYPENCMD                YES, PROCESS ....
         SPACE 1
         WTO   '** SPY INTERNAL ERROR - COMMAND TYPE NOT RECOGNISED **'
         B     NEXTCMMD                GIVE UP GRACEFULLY
         SPACE 1
** PROCESS COMMAND TYPE 'N' **
         SPACE 1
TYPENCMD WTO   '** SPY - SORRY, THAT COMMAND ISN''T WORKING **'
         B     NEXTCMMD                WELL, THAT DIDN'T TAKE LONG
         SPACE 1
** PROCESS COMMAND TYPE 'I' **
         SPACE 1
* THIS IS A DIRECT BRANCH TO 'CMDADDR'. ALL INTERNAL COMMANDS RETURN
* CONTROL TO 'NEXTCMMD' ON COMPLETION.
         SPACE 1
TYPEICMD L     R15,CMDADDR             GET COMMAND ADDRESS
         BR    R15                     XFR TO COMMAND
         SPACE 1
** PROCESS COMMAND TYPE 'E' **
         SPACE 1
* TYPE 'E' COMMANDS ARE PROCESSED SYNCHRONOUSLY VIA A STANDARD OS
* 'CALL' MACRO. ON RETURN, CONTROL IS PASSED TO 'NEXTCMMD'.
* N.B. MODULES FOR TYPE 'E' COMMANDS MUST BE LINKED WITH THIS MODULE
         SPACE 1
TYPEECMD L     R15,CMDADDR             GET COMMAND ENTRY POINT
         CALL  (15),(PARMSECT),VL      XFR TO COMMAND
         B     NEXTCMMD                END OF COMMAND - GO FIND NEXT
         SPACE 1
* PROCESS COMMAND TYPE 'A' **
         SPACE 1
* ASYNCHRONOUS COMMAND PROCESSED VIA 'ATTACH'
* ONCE ATTACHED, WE MUST WAIT ON 'PARMECB' FOR SUBTASK TO
* RELEASE 'PARMSECT'. MAIN TASK (US) MAY THEN RECYCLE
         SPACE 1
TYPEACMD MVC   ATTCMMND,CMDMODUL       MOVE MODULE-NAME TO WORK-AREA
         ATTACH EPLOC=ATTCMMND,PARAM=(PARMSECT),VL=1
         LTR   R15,R15                 SUCCESSFUL ?
         BZ    WAITPARM                YES - WAIT FOR PLIST TO FREE
         WTO   '** SPY - ERROR IN ATTACH - COMMAND CANCELLED **'
         B     NEXTCMMD                GO FIND ANOTHER
         SPACE 1
WAITPARM WAIT  1,ECB=PARMECB           WAIT FOR PLIST TO FREE UP
         B     NEXTCMMD                AND RECYCLE
         SPACE 1
** INVALID COMMAND **
         SPACE 1
INVCMMD  WTO   '** SPY - EH ? **'      WHAT !
         B     NEXTCMMD                RECYCLE
         EJECT
************************
* INTERNAL SUBROUTINES *
************************
         SPACE 1
** OUTPUT A LINE OF ASTERISKS **
         SPACE 1
ASTERISK WTO   '********************************************'
         BR    R14
         SPACE 3
** TIMER ROUTINE **
         SPACE 1
* THIS ROUTINE HAS TWO MUTUALLY EXCLUSIVE FUNCTIONS
*
* IF VMSPY IN FLAG1 IS ON, IT ATTACHES SPY53 (THE VM SPY TASK)
* AND THEN ISSUES A STIMER REQUEST FOR CONTROL TO BE PASSED TO ROUTINE
* 'TIMBREAK' AFTER A BRIEF INTERVAL (USUALLY 30 SECS <= INTVL <= 1 MIN)
* THIS PROVIDES FOR REGULAR UPDATE OF THE VM SPY DATASET
*
* IF VMSPY IS OFF THEN THE SAME STIMER IS ISSUED, BUT WITH A 4-MINUTE
* INTERVAL AND SPY53 IS NOT ATTACHED. THIS ACTION SUPPRESSES THE C.U.
* MESSAGE ISSUED WHENEVER A JOB SPENDS 5 MINUTES IN A WAIT STATE
         SPACE 1
TIMER    ST    R14,TIMRET              SAVE RETURN ADDRESS
         MVC   TIMINT,=C'00040000'     ASSUME VM SPY NOT ACTIVE
         SPACE 1
         TM    FLAG1,VMSPY             IS SPY LIVE ?
         BZ    TIMREQ                  NO - READY TO ISSUE STIMER
         SPACE 1
         MVC   TIMINT,=C'00003000'     SET SHORTER TIME INTERVAL
         ATTACH EP=SPY53                AND ATT VM SPY TASK
         SPACE 1
TIMREQ   XC    TIMERECB,TIMERECB       CLEAR TIMER ECB
         STIMER REAL,TIMBREAK,DINTVL=TIMINT ISSUE STIMER
         L     R14,TIMRET              RESTORE RETURN ADDRESS
         BR    R14                     AND EXIT
         EJECT
********************
* INTERNAL COMMAND *
*   ** SPY **      *
********************
         SPACE 1
* CHECK 1ST 3 BYTES OF 'PARM'
* IF = 'ON ', TURN ON VMSPY IN FLAG1 AND CALL TIMER
* IF = 'OFF', TURN OFF VMSPY IN FLAG1
* ELSE LEAVE VMSPY IN FLAG1 UNCHANGED
         SPACE 1
VMSPYCMD CLC   =CL3'ON',PARM           RQS TO TURN ON VMSPY ?
         BNE   VMSPYCM1                NO - MAYBE 'OFF'
         SPACE 1
         OI    FLAG1,VMSPY             SET FLAG ON
         BAL   R14,TIMER               START TIMER / VMSPY
         WTO   '** VM SPY IS LIVE **'  TELL THE WORLD
         B     NEXTCMMD                RECYCLE ....
         SPACE 1
VMSPYCM1 CLC   =CL3'OFF',PARM          RQS TO TURN OFF VMSPY ?
         BNE   VMSPYCM2                NO - FORGET IT
         SPACE 1
         NI    FLAG1,255-VMSPY         SET FLAG OFF
         WTO   '** VM SPY IS ASLEEP **'   TELL THE WORLD
         B     NEXTCMMD                RECYCLE ....
         SPACE 1
VMSPYCM2 WTO   '** SPY ''ON'' OR ''OFF'', PLEASE **'   EH ?
         B     NEXTCMMD
         EJECT
********************
* INTERNAL COMMAND *
*   ** DIE **      *
********************
         SPACE 1
* CHOP ANY OUTSTANDING TIMER
* FLAG ANY CONTINUOUS SUBTASKS (E.G. SCH) TO CLOSE
* RESTORE PREVIOUS PICA (IF ANY)
* WAIT UNTIL ALL SUBTASKS HAVE CLOSED
* CLOSE SNAP DUMP DATASET & EXIT
         SPACE 1
DIECMD   TTIMER CANCEL                 CHOP ANY OUTSTANDING TIMER
         MVC   TIMINT,=C'00010000'     POSS. WAIT COMING LATER
         SPACE 1
         TM    SCHDFLAG,SCHDACTV       IS SCH SUBTASK ACTIVE ?
         BZ    DIEPICA                 NO - OTHERS DIE NATURALLY
         OI    SCHDFLAG,SCHDDIE        BUT SCH HAS TO BE FLAGGED
         SPACE 1
** RESTORE OLD PICA (IF ANY) **
         SPACE 1
DIEPICA  ICM   R1,15,LASTPICA          GET A(LAST PICA) & SET CCODE
         B     DIESHOK                 IF ZERO - FORGET IT
         SPIE  ,MF=(E,(1))             RESTORE PICA TO PREVIOUS
         SPACE 1
** WAIT FOR SUBTASKS (IF ANY) TO QUIESCE **
         SPACE 1
DIESHOK  L     R1,16(0,0)              GET A(CVT)
         L     R1,0(,R1)               GET A(A(MY TCB)-4)
         L     R1,4(,R1)               GET A(MY TCB)
         CLC   128(12,R1),=XL12'00'    ANY SUBTASKS ACTIVE ?
         BE    DIECLOSE                NO - READY TO CLOSE DUSTBIN
         SPACE 1
         WTO   '** SPY DYING BUT WAITING FOR SUBTASKS **'
         STIMER WAIT,DINTVL=TIMINT     GIVE S/TASKS A CHANCE TO CLOSE
         B     DIESHOK                 THEN RECHECK S/TASK SITUATION
         SPACE 1
DIECLOSE CLOSE (DUSTBIN)               CLOSE DUMP DATASET
         SPACE 1
         WTO   '** SPY IS DEAD **'
         SPACE 1
         L     R13,4(,R13)             RESTORE S/A POINTER
         RETURN (14,12),RC=0           AND FAREWELL
         EJECT
********************
* INTERNAL COMMAND *
*   ** HELP **     *
********************
         SPACE 1
* DISPLAY HELP DATA AS SHOWN IN HELPLIST
         SPACE 1
HELPCMD  L     R2,=A(HELPLIST)         POINT TO START OF HELP DATA
         SPACE 1
HELPLOOP CL    R2,=A(HELPEND)          CHECK FOR END OF DATA
         BNL   NEXTCMMD                YES - ALL DONE
         SPACE 1
         MVC   HELPWTO+8(L'HELPLINE),0(R2)  PATCH WTO
         CNOP  0,4                     ALIGN WTO
HELPWTO  WTO   'HELPHELPHELPHELPHELPHELPHELPHELPHELPHELPHELPHELPHEL'
         LA    R2,L'HELPLINE(,R2)      BUMP POINTER TO NEXT
         B     HELPLOOP                AND REPEAT
         EJECT
************************
* TIMBREAK ENTRY POINT *
************************
         SPACE 1
* HERE WHEN TIME INTERVAL SET BY 'TIMER' EXPIRES
         SPACE 1
         USING TIMBREAK,R15            TEMPORARY ADDRESSABILITY
TIMBREAK SAVE  (14,12),,SPY.COMMAND.TIMBREAK
         B     TIMSETUP                GO CHAIN SAVEAREAS ETC
TIMRSAVE DS    18F                     'OUR' SAVEAREA
TIMSETUP L     R12,=A(HEREWEGO)        LOAD R12 WITH MODULE ORIGIN
         DROP  R15                     & DISPOSE OF TEMP BASE
         SPACE 1
         ST    R13,TIMRSAVE+4          POINT NEW TO OLD
         LR    R15,R13                 REMEMBER OLD
         LA    R13,TIMRSAVE            UPDATE SAVEAREA POINTER
         ST    R13,8(,R15)             POINT OLD TO NEW
         SPACE 1
         POST  TIMERECB                TIME GENTLEMEN PLEASE
         SPACE 1
         L     R13,4(,R13)             RESTORE OLD SAVEAREA POINTER
         RETURN (14,12),RC=0           AND RETURN TO CONTROL PROGRAM
         EJECT
******************************
* ABEND RECOVERY ENTRY POINT *
******************************
         SPACE 1
* THIS ROUTINE TAKES A SNAP DUMP OF THE PARTITION,
* RESTORES ALL REGISTERS AS THEY WERE ON ENTRY,
* AND (INDIRECTLY) TRANSFERS CONTROL TO 'HEREWEGO'
         SPACE 1
         USING RESTART,R15             TEMPORARY ADDRESSABILITY
RESTART  STM   R0,R15,RSTRT16F         SAVE REGS FOR DE-BUGGERS
         L     R12,=A(HEREWEGO)        LOAD R12 WITH MODULE ORIGIN
         DROP  R15                     & DISPOSE OF TEMP BASE
         SPACE 1
         B     RSTRT1                  SKIP ROUND SAVEAREA
CRSHSAVE DC    18F'0'                  MAYBE USED BY SNAP
         SPACE 1
RSTRT1   LA    R13,CRSHSAVE            SAVEAREA FOR SYSTEM ROUTINES
         SPACE 1
         SNAP  DCB=DUSTBIN,SDATA=(CB),PDATA=(ALL)  DUMP MEMORY
         WTO   '** SPY JUST CRASHED !! **'
         SPACE 1
         L     R1,RSTRT16F+4*R1        RESTORE R1
         L     R14,RSTRT16F+4*R14      RESTORE R14
         SPACE 1
         L     R13,SAVEAREA+4          RESTORE ENTRY R13
         MVC   9(3,R1),17(R13)         POINT EXIT PSW @ HEREWEGO
         LM    R3,R12,32(R13)          RESTORE REGS 3 - 12
         MVC   12(20,R1),12(R13)       'RESTORE' REGS 14 - 2
         BR    R14                     RETURN TO HEREWEGO, VIA CONTROL
         EJECT
**************************************
* ASSORTED FLAGS FIELDS AND POINTERS *
**************************************
         SPACE 1
ATTCMMND DS    D                       WORK-AREA FOR ATTACH MACRO
W1D      DS    D                       WORK AREA
TIMINT   DS    D                       TIMER TIME INTERVAL
RSTRT16F DS    16F                     DEBUG REGISTERS
TIMRET   DS    F                       TIMER ROUTINE RETURN ADDRESS
W1F      DS    F                       WORK AREA
AACIB    DS    F                       BECOMES A(A(CIB))
LASTPICA DS    F                       BECOMES A(LAST PICA)
WTORECB  DC    F'0'                    WTOR ECB
TIMERECB DC    F'0'                    TIMER COMPLETED ECB
         SPACE 1
GODOT    DS    0F                      ECB ADDRESS LIST
MODFYECB DC    F'0'                    BECOMES A(MODIFY ECB)
         DC    A(TIMERECB)             TIMBREAK ECB ADDRESS
         DC    X'80',AL3(WTORECB)      A(WTORECB) + END OF LIST
         SPACE 1
MOVEPARM MVC   PARM(*-*),0(R15)        EXECUTED MOVE
MOVECMMD MVC   COMMAND(*-*),REPLY      EXECUTED MOVE
MOVEREPL MVC   REPLY(*-*),16(R2)       EXECUTED MOVE
REPLY    DS    CL100
         SPACE 1
CLEANUP  EQU   *                       CLEANUP TANSLATE TABLE
         DC    X'000102030405060708090A0B0C0D0E0F'
         DC    X'101112131415161718191A1B1C1D1E1F'
         DC    X'202122232425262728292A2B2C2D2E2F'
         DC    X'303132333435363738393A3B3C3D3E3F'
         DC    X'404142434445464748494A4B4C4D4E4F'
         DC    X'505152535455565758595A5B5C5D5E5F'
         DC    X'606162636465666768696A406C6D6E6F' XLATE COMMA TO SPACE
         DC    X'707172737475767778797A7B7C7D7E7F'
         DC    X'80C1C2C3C4C5C6C7C8C98A8B8C8D8E8F' XLATE TO UPPER CASE
         DC    X'90D1D2D3D4D5D6D7D8D99A9B9C9D9E9F' XLATE TO UPPER CASE
         DC    X'A0A1E2E3E4E5E6E7E8E9AAABACADAEAF' XLATE TO UPPER CASE
         DC    X'F0F1F2F3F4F5F6F7F8F9BABBBCBDBEBF' XLATE TO UPPER CASE
         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'
         SPACE 1
DUSTBIN  DCB   DDNAME=DUSTBIN,         DCB FOR SNAP DUMPS              C
               DSORG=PS,                                               C
               RECFM=VBA,                                              C
               MACRF=(W),                                              C
               BLKSIZE=882,                                            C
               LRECL=125
         EJECT
** LITERALS **
         SPACE 1
         LTORG
         EJECT
****************************
* ADDITIONAL CSECTS FOLLOW *
****************************
         SPACE 1
DISKTABL CSECT
         DS    101CL6                  ROOM FOR 100 DISKS
         SPACE 3
PARMSECT CSECT
         DC    AL2(ENDPARM-*)          DUMMY LENGTH BYTES
PARM     DS    CL100                   COMMAND PARMS
COMMAND  DS    CL10                    COMMAND
         SPACE 1
FLAG1    DC    X'00'                   FLAGS BYTE 1
VMENVIR  EQU   X'80'                   ON IF RUNNING UNDER VM
VMSPY    EQU   X'40'                   ON IF VM SPY IS LIVE
RECOVER  EQU   X'20'                   ON IF REENTRY IMPLIES RESTART
MODIFY   EQU   X'10'                   ON IF MODIFY USED ON LAST CMMD
VMPAGE   EQU   X'08'                   ON IF NONPAGING VM ENVIRONMENT
DDGACTV  EQU   X'04'                   ON IF DYNAMIC DISPATCHING ACTIVE
TSLACTV  EQU   X'02'                   ON IF TIMESLICING ACTIVE
         DC    XL3'00'                 ** PADDING **
         SPACE 1
ATCBTABL DC    A(TCBTABLE)             ADDRESS OF TCB TABLE
ADISKS   DC    A(DISKTABL)             ADDRESS OF DISKTABL
TCBBAR   DC    F'0'                    A(A(LAST NON-MOVABLE TCB))
PARMECB  DC    F'0'                    PARAMETER LOCKING ECB
         SPACE 1
** SCHEDULER FLAGS **
         SPACE 1
SCHDFLAG DC    X'00'
SCHDACTV EQU   X'80'                   ON IF SCHEDULER ACTIVE
SCHDDIE  EQU   X'40'                   TURN ON TO KILL SCHEDULER
         DC    XL3'00'                 ** PADDING **
ENDPARM  EQU   *
         SPACE 3
HELPLIST CSECT
HELPLINE DC    C'***************************************************'
*MOD1    DC    C'* VM SPY              - ENTER SPY,ON/OFF          *'
         DC    C'* SHUTDOWN SPY        - ENTER DIE                 *'
*MOD1    DC    C'* CPU UTILISATION     - ENTER MON1                *'
         DC    C'* CPU UTILISATION     - ENTER CPU                 *'
*MOD1    DC    C'* I/O UTILISATION     - ENTER MON2                *'
         DC    C'* I/O UTILISATION     - ENTER I/O                 *'
*MOD1    DC    C'* PENDING TAPE MOUNTS - ENTER AVR                 *'
         DC    C'* PENDING TAPE MOUNTS - ENTER MOUNT               *'
*MOD1    DC    C'* ONLINE FREE         - ENTER FRE OR FRE,VOLSER   *'
         DC    C'* ONLINE FREE SPACE   - ENTER FREE OR             *'
         DC    C'*                                   FREE,VOLSER   *'
*MOD1    DC    C'* ALLOCATION DETAILS  - ENTER NOT,JOBNAME OR      *'
*MOD1    DC    C'*                             NOT,ZZVOLSER        *'
         DC    C'* ALLOCATION DETAILS  - ENTER NOTE,JOBNAME OR     *'
         DC    C'*                             NOTE,ZZVOLSER       *'
         DC    C'* SPOOL OUTPUT SIZES  - ENTER LIN OR LIN,ALL OR   *'
         DC    C'*                        LIN,C (C=SYSOUT CLASS)   *'
*MOD1    DC    C'* SPOOL OUTPUT SIZES  - ENTER JES OR JES,ALL OR   *'
*MOD1    DC    C'*                        JES,C (C=SYSOUT CLASS)   *'
*MOD1    DC    C'* SPOOL OUTPUT SIZES  - ENTER LINES OR LINES,ALL  *'
*MOD1    DC    C'*                     OR LINES,C (C=SYSOUT CLASS) *'
*MOD1    DC    C'* SPOOL OUTPUT SIZES  - ENTER SPOOL OR SPOOL,ALL  *'
*MOD1    DC    C'*                     OR SPOOL,C (C=SYSOUT CLASS) *'
         DC    C'* PAGING ACTIVITY     - ENTER PAG                 *'
*MOD1    DC    C'* PAGING ACTIVITY     - ENTER PAGING              *'
*MOD1    DC    C'* ISSUE CP COMMAND    - ENTER CP,CPCOMMAND        *'
*MOD1    DC    C'* (N.B. USE COMMAS INSTEAD OF SPACES IN COMMAND ) *'
         DC    C'* TURN ON SCHEDULER   - ENTER SCH                 *'
         DC    C'* TURN OFF SCHEDULER  - ENTER SCH,OFF             *'
         DC    C'* TRACE SUSPECTED LOOP- ENTER TRC,PX              *'
         DC    C'* SUSPEND A JOB       - ENTER HLD,PX              *'
         DC    C'* RELEASE A                                       *'
         DC    C'*    SUSPENDED JOB    - ENTER REL,PX              *'
*MOD1    DC    C'* CHANGE PRIORITY     - ENTER DSP,PX,NNN          *'
         DC    C'* DISPLAY PRIORITIES  - ENTER PRI (PARTITION SEQ) *'
         DC    C'*                       OR PRI,D (PRIORITY SEQ)   *'
*MOD1    DC    C'* DISPLAY ACTIVE STEP - ENTER DISPLAY,JOBNAME     *'
*MOD1    DC    C'*                     OR DISPLAY,PX               *'
         DC    C'* DISPLAY ACTIVE STEP - ENTER D,JOBNAME           *'
         DC    C'*                           OR D,PX               *'
         DC    C'***************************************************'
HELPEND  EQU   *                       END OF HELP DATA
         EJECT
*************************
* TCB INFORMATION TABLE *
*************************
         SPACE 1
* ONE ENTRY PER PARTITION, IN PARTITION ORDER, STARTING AT P0
* MAX 16 ENTRIES (P0 - PF), 8 BYTES PER ENTRY
         SPACE 1
****************************************************************
*                    N O T E                                   *
* PARTITIONS ARE SPLIT INTO TWO GROUPS, THOSE WHOSE PRIORITY   *
* CAN BE ALTERED BY SPY, AND THOSE WHOSE PRIORITY CANNOT.      *
* ALL THOSE WHO CANNOT   M U S T   PRECEDE ALL THOSE WHO CAN   *
* AND THERE   M U S T   BE AT LEAST   O N E   PARTITION WHOSE  *
* PRIORITY CANNOT BE ALTERED.                                  *
****************************************************************
         SPACE 1
TCBNODSP EQU   X'80'                   DSP PRIORITY MAY NOT BE ALTERED
TCBTSL   EQU   X'40'                   THIS PARTITION IS TIME-SLICED
TCBDDG   EQU   X'20'                   THIS PARTITION IS UNDER DDG
         SPACE 1
TCBTABLE CSECT
         SPACE 1
*        BYTES 0 - 3     ADDRESS OF THIS PARTITION'S TCB
*        BYTE  4         FLAGS BYTE (SEE ABOVE)
*        BYTES 5 - 7     RESERVED
         SPACE 1
TCBENT   DS    0D
         DC    A(0),AL1(TCBNODSP),AL3(0)    P0        NOT MOVABLE
         DC    A(0),AL1(TCBNODSP),AL3(0)    P1        NOT MOVABLE
         DC    A(0),AL1(TCBNODSP),AL3(0)    P2        NOT MOVABLE
         DC    A(0),AL1(TCBNODSP),AL3(0)    P3        NOT MOVABLE
         DC    A(0),AL1(TCBNODSP),AL3(0)    P4        NOT MOVABLE
         DC    A(0),AL1(TCBNODSP),AL3(0)    P5        NOT MOVABLE
         DC    A(0),AL1(0),AL3(0)           P6        MOVABLE
         DC    A(0),AL1(0),AL3(0)           P7        MOVABLE
         DC    A(0),AL1(0),AL3(0)           P8        MOVABLE
         DC    A(0),AL1(0),AL3(0)           P9        MOVABLE
         DC    A(0),AL1(0),AL3(0)           P10 (A)   MOVABLE
         DC    A(0),AL1(0),AL3(0)           P11 (B)   MOVABLE
         DC    A(0),AL1(0),AL3(0)           P12 (C)   MOVABLE
         DC    A(0),AL1(0),AL3(0)           P13 (D)   MOVABLE
         DC    A(0),AL1(0),AL3(0)           P14 (E)   MOVABLE
         DC    A(0),AL1(0),AL3(0)           P15 (F)   MOVABLE
         DC    A(0),AL1(0),AL3(0)           STOPPER - ALWAYS ZERO
         EJECT
****************************************************************
*              S P Y   C O M M A N D   T A B L E               *
****************************************************************
         SPACE 1
* THERE IS ONE ENTRY IN THE TABLE FOR EACH COMMAND/SYNONYM RECOGNISED
         SPACE 1
CMDSECT  DSECT                         MAPS ONE ENTRY IN COMMAND TABLE
CMDKEY   DS    CL10           COMMAND KEY (COMMAND OR SYNONYM)
CMDNAME  DS    CL10           COMMAND NAME (I.E. NOT A SYNONYM)
CMDMODUL DS    0CL8           COMMAND TYPE 'A' MODULE NAME
CMDADDR  DS    A(0)           COMMANDS TYPE 'E' OR 'I' MODULE ADDRESS
         DS    F              COMPLETES 8 BYTES FOR FIELD 'CMDMODUL'
CMDTYPE  DS    C              COMMAND TYPE
*                             =A --- ATTACHED AS ASYNCHRONOUS SUBTASK
*                             =E --- CALLED AS EXTERNAL SUBROUTINE
*                             =I --- INTERNAL COMMAND
*                             =N --- COMMAND NOT AVAILABLE
CMDFLG1  DS    X              FLAGS - RESERVED FOR USE BY C.U.
CMDFLG2  DS    X              FLAGS - RESERVED FOR USE BY C.U.
CMDUSR1  DS    X              FLAGS - RESERVED FOR INSTALLATION USES
CMDRSV1  DS    F              RESERVED FOR USE BY C.U.
CMDUSR2  DS    F              RESERVED FOR INSTALLATION USE
CMDLNGTH EQU   *-CMDSECT      LENGTH IN BYTES
         SPACE 3
CMMDTABL CSECT
         SPACE 1
         DC    CL10'SPY',CL10'SPY'                     VM SPY COMMAND
         DC    A(VMSPYCMD),F'0'
         DC    C'N',X'00',X'00',X'00'                  WAS 'I'   MOD1
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'HELP',CL10'HELP'                   HELP COMMAND
         DC    A(HELPCMD),F'0'
         DC    C'I',X'00',X'00',X'00'
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'DIE',CL10'DIE'                     SHUTDOWN COMMAND
         DC    A(DIECMD),F'0'
         DC    C'I',X'00',X'00',X'00'
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'MON1',CL10'MON1'                   MON1 COMMAND
         DC    CL8'SPY50'
         DC    C'A',X'00',X'00',X'00'
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'CPU',CL10'MON1'                    MON1 SYNONYM
         DC    CL8'SPY50'
         DC    C'A',X'00',X'00',X'00'
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'MON2',CL10'MON2'                   MON2 COMMAND
         DC    CL8'SPY51'
         DC    C'A',X'00',X'00',X'00'
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'I/O',CL10'MON2'                    MON2 SYNONYM
         DC    CL8'SPY51'
         DC    C'A',X'00',X'00',X'00'
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'FRE',CL10'FRE'                     FRE COMMAND
         DC    CL8'SPY55'
         DC    C'A',X'00',X'00',X'00'
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'FREE',CL10'FRE'                    FRE SYNONYM
         DC    CL8'SPY55'
         DC    C'A',X'00',X'00',X'00'
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'AVR',CL10'AVR'                     AVR COMMAND
         DC    CL8'SPY59'
         DC    C'A',X'00',X'00',X'00'
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'MOUNT',CL10'AVR'                   AVR SYNONYM
         DC    CL8'SPY59'
         DC    C'A',X'00',X'00',X'00'
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'NOT',CL10'NOT'                     NOT COMMAND
         DC    CL8'SPY54'
         DC    C'A',X'00',X'00',X'00'
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'NOTE',CL10'NOT'                    NOT SYNONYM
         DC    CL8'SPY54'
         DC    C'A',X'00',X'00',X'00'
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'LIN',CL10'LIN'                     LIN COMMAND
         DC    CL8'SPY56'
         DC    C'A',X'00',X'00',X'00'
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'JES',CL10'LIN'                     LIN SYNONYM
         DC    CL8'SPY56'
         DC    C'A',X'00',X'00',X'00'
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'LINES',CL10'LIN'                   LIN SYNONYM
         DC    CL8'SPY56'
         DC    C'A',X'00',X'00',X'00'
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'SPOOL',CL10'LIN'                   LIN SYNONYM
         DC    CL8'SPY56'
         DC    C'A',X'00',X'00',X'00'
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'PAG',CL10'PAG'                     PAG COMMAND
         DC    CL8'SPY57'
         DC    C'A',X'00',X'00',X'00'
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'PAGING',CL10'PAG'                  PAG SYNONYM
         DC    CL8'SPY57'
         DC    C'A',X'00',X'00',X'00'
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'DISPLAY',CL10'DISPLAY'         DISPLAY COMMAND
         DC    V(SPY40),A(0)
         DC    C'E',X'00',X'00',X'00'
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'D',CL10'DISPLAY'               DISPLAY SYNONYM
         DC    V(SPY40),A(0)
         DC    C'E',X'00',X'00',X'00'
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'CP',CL10'CP'                   CP COMMAND
         DC    V(SPY40),A(0)
         DC    C'N',X'00',X'00',X'00'              WAS 'E'       MOD1
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'SCH',CL10'SCH'                 SCH COMMAND
         DC    V(SPY40),A(0)
         DC    C'E',X'00',X'00',X'00'
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'PRI',CL10'PRI'                 PRI COMMAND
         DC    CL8'SPY58'
         DC    C'A',X'00',X'00',X'00'
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'TRC',CL10'TRC'                 TRC COMMAND
         DC    CL8'SPY58'
         DC    C'A',X'00',X'00',X'00'
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'DSP',CL10'DSP'                 DSP COMMAND
         DC    CL8'SPY58'
         DC    C'N',X'00',X'00',X'00'              WAS 'A'       MOD1
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'HLD',CL10'HLD'                 HLD COMMAND
         DC    CL8'SPY58'
         DC    C'A',X'00',X'00',X'00'
         DC    F'0',F'0'
         SPACE 1
         DC    CL10'REL',CL10'REL'                 REL COMMAND
         DC    CL8'SPY58'
         DC    C'A',X'00',X'00',X'00'
         DC    F'0',F'0'
         SPACE 1
CMMDEND  EQU   *              ***** END OF COMMAND TABLE *****
         END
