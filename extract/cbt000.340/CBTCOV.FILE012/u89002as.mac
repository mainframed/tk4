ICLTRAN  CSECT
***********************************************************************
*                                                                     *
*                                                                     *
*        ICLTRAN WRITES TAPES IN STANDARD ICL FORMAT                  *
*        A HEADER, START OF SUBFILE SENTINEL AND A                    *
*        TRAILER ARE WRITTEN TO THE TAPE.                             *
*                                                                     *
*        THE TAPE FILE MUST BE SPECIFIED IN THE JCL                   *
*        AS THREE UNLABLED SUBFILES.  THE DD NAMES                    *
*        OF WHICH ARE MADE UP OF THE LAST SEVEN                       *
*        CHARACTERS OF THE ICL TAPE NAME SUFFIXED                     *
*        BY "1" "2" AND "3" RESPECTIVELY.                             *
*                                                                     *
*        WHEN THIS ROUTINE IS CALLED THE FIRST                        *
*        PARAMETER DEFINES THE FUNCTION TO BE                         *
*        PERFORMED I.E. 1 = OPEN, 2 = WRITE AND                       *
*        3=CLOSE.                                                     *
*        FOR THE OPEN FUNCTION PARAMETER TWO IS                       *
*        THE ADDRESS OF AN AREA CONTAINING THE                        *
*        ICL TSN (8 BYTES), TAPE NAME (12 BYTES)                      *
*        AND GENERATION NUMBER (4 BYTES).  PARAMETER                  *
*        THREE IS THE ADDRESS OF A FIELD CONTAINING                   *
*        THE MAXIMUM BLOCK SIZE IN WORDS (3 BYTES                     *
*        PACKED).                                                     *
*        FOR THE WRITE FUNCTION PARAMETER TWO IS                      *
*        THE ADRESS A FIELD CONTAINING THE RECORD                     *
*        SIZE IN BYTES (3 BYTES PACKED).  PARAMETER                   *
*        THREE IS THE ADDRESS OF A FILED CONTAINING                   *
*        THE RECORD TO BE TRANSLATED.                                 *
*        THE CLOSE FUNCTION REQUIRES NO FURTHER                       *
*        PARAMETERS.                                                  *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
         STM   14,12,12(13)
         BALR  12,0
         USING *,12,11
         LA    11,2048(12)
         LA    11,2048(11)
         LA    10,SREGS             * ADRESS OF NEXT SAVE AREA *
         ST    10,8(13)             * SAVE LINKS *
         ST    13,4(10)
         LR    13,10                * SET UP NEXT SAVE AREA *
         LM    2,4,0(1)             * PICK UP PARAMTERS *
         CLI   0(2),C'1'            * OPEN ? *
         BE    BLKC01               * OPEN ROUTINE *
         CLI   0(2),C'2'            * WRITE ? *
         BE    BLKA01               * BLOCKING ROUTINE *
         CLI   0(2),C'3'            * CLOSE ? *
         BE    BLKB01               * BLOCK WRITE ROUTINE *
         MVI   0(2),X'FF'           * SET UP ERROR INDICATOR *
         B     BLKE01               * GO TO EXIT ROUTINE *
*
*
BLKA01   CLC   NOTRAN,=H'0'         * IS FILE OPEN ? *
         BNE   BLKA05               * YES *
         MVI   0(2),X'FE'           * SET ERROR CODE *
         B     BLKE01               * EXIT *
BLKA05   CLC   COUNT,=H'0'          * RECORD COUNT ZERO *
         BNE   BLKA10
         LA    6,BLOCK              * SET START ADDR OF BLOCK
         LA    8,WCWTAB               AND WORD COUNT TABLE    *
         B     BLKA15
BLKA10   CLC   COUNT,=H'100'        * RECORD ONE HUNDRED ? *
         BE    BLKB01               * YES - GO TO TRANSLATE ROUTINE *
         L     6,SP1                * SET CURRENT POINT IN BLOCK
         L     8,SP2                  AND WORD COUNT TABLE       *
BLKA15   ZAP   CONV,0(3,3)          * CONVERT LENGTH
         CVB   5,CONV                 TO BINARY      *
         LH    10,COUNT             * PICK UP RECORD COUNT
         LA    10,1(10)               ADD ONE TO COUNT
         STH   10,HOLDC               HOLD UPDATED COUNT
         SLL   10,2                   AND MULTIPLY BY 4    *
         LA    9,0(6,5)             * ADD BLK POINTER AND REC LENGTH *
         AR    10,9                 * PLUS 4 BYTES PER RECORD *
         CL    10,END               * WILL RECORD FIT IN BLOCK *
         BH    BLKB01               * NO - GO TO TRANSLATE ROUTINE *
         MVC   COUNT,HOLDC          * UPDATE COUNT *
         LA    7,4(5)               * ADD 4 FOR WORD COUNT
         A     7,BLKSIZE              AND KEEP RUNNING TOTAL FOR
         ST    7,BLKSIZE              BLOCK SIZE (IN BYTES )     *
         LR    7,5                  * SET "ODD" REG FOR LONG MOVE *
         STH   7,0(8)               * STORE LENGTH IN WORD COUNT TAB *
         LA    8,2(8)               * INCREMENT POINTER
         ST    8,SP2                  AND STORE IN SP2  *
         MVCL  6,4                  * MOVE RECORD TO BLOCK
         ST    6,SP1                  AND STORE POINTER IN SP1 *
         B     BLKE01               * GO TO EXIT ROUTINE *
*
*
BLKB01   CLC   COUNT,=H'0'          * BLOCK EMPTY ? *
         BE    BLKB25
         LH    1,NOTRAN             * SET LOOP COUNTER *
         LA    2,BLOCK
BLKB05   TR    0(256,2),TRANT       * TRANSLATE BLOCK
         LA    2,256(2)               IN 256 BYTE CHUNKS *
         BCT   1,BLKB05
         LA    1,BLOCK              * SET POINTER *
         LA    2,WCWTAB
         LA    3,IOAREA
         LH    4,COUNT              * SET LOOP COUNTER TO NO. OF RECS *
BLKB10   LH    5,0(2)               * PICK UP LEN FROM WORD COUNT TAB
         SRL   5,2                    AND DEVIDE BY FOUR              *
         LA    6,1(5)
         MVI   0(3),X'00'           * SET UP ICL 24 BIT WORD
         STC   6,2(3)                 IN FIRST THREE BYTES
         SRL   6,8                    OF RECORD              *
         STC   6,1(3)
         LA    3,3(3)               * INCREMENT IOAREA PIONTER *
BLKB15   L     6,0(1)               * PICK UP WORD FROM BLOCK *
         LA    1,4(1)               * INCREMENT BLOCK POINTER *
         LA    8,4                  * SET LOOP COUNTER TO FOUR *
BLKB20   SRDL  6,6                  * CONVERT 32 BITS IN REG6
         SRL   6,2                    INTO 24 BITS IN REG7    *
         BCT   8,BLKB20
         ST    7,WORK
         MVC   0(3,3),WORK          * MOVE THREE BYTES TO IOAREA *
         LA    3,3(3)               * INCREMENT IOAREA POINTER *
         BCT   5,BLKB15             * LOOP FOR NEXT FOUR CHARACTERS *
         LA    2,2(2)               * INCREMENT WCW TABLE POINTER *
         BCT   4,BLKB10             * LOOP FOR NEXT RECORD *
         L     1,BLKSIZE            * SIZE OF BLOCK BEFORE PACKING *
         SRL   1,2                  * DIVIDE BY FOUR
         LR    5,1                    AND MULTIPLY BY THREE
         AR    1,5                    TO CALCULATE OUTPUT RECORD
         AR    1,5                    LENGTH IN BYTES            *
         BAL   14,SUBA01            * WRITE RECORD - LENGTH IN REG1 *
         L     1,BLCOUNT            * ADD ONE TO
         LA    1,1(1)                 BLOCK COUNT *
         ST    1,BLCOUNT
         MVC   BLKSIZE,=XL4'00'     * RESET BLOCK SIZE *
BLKB25   MVC   COUNT,=H'0'          * RESET RECORD COUNT *
         L     2,SREGS+4            * PICK UP ADDR OF POINTER *
         L     1,24(2)              * RESET REG1
         LM    2,4,0(1)               AND PICK UP PARAMETERS *
         CLI   0(2),C'3'            * CLOSE ? *
         BE    BLKD01               * CLOSE ROUTINE *
         B     BLKA05               * MOVE RECORD TO BLOCK *
*
*
BLKC01   MVI   IOAREA,X'00'         * CLEAR AREA FOR HEADER *
         MVC   IOAREA+1(59),IOAREA
         MVC   IOAREA(3),=X'A24932' * SET UP ICL "HDDR" *
         MVC   SP1(8),0(3)          * TSN (SECOND PARAMETER) *
         LA    5,2                  * SET OUTER LOOP COUNTER *
         L     6,SP2                * LAST FOUR BYTES OF TSN *
BLKC05   LA    8,4                  * SET INNER LOOP COUNTER *
BLKC10   SRDL  6,3                  * SELECT LOW ORDER THREE BITS
         SRL   6,5                    FROM EACH BYTE              *
         BCT   8,BLKC10             * LOOP FOR NEXT BYTE (INNER) *
         L     6,SP1                * FIRST FOUR BYTES OF TSN *
         BCT   5,BLKC05             * LOOP FOR NEXT FOUR BYTS (OUTER) *
         ST    7,WORK               * STORE IN WORK AREA *
         MVC   IOAREA+3(3),WORK     * CONVERTED TSN TO IOAREA *
         LA    9,IOAREA+6           * ADDRESS OF LABEL IN HEADER *
         LA    5,3                  * SET OUTER LOOP COUNTER *
         MVC   HOLD,8(3)            * HOLD TAPE LABEL*
BLKC15   MVC   SP1,8(3)             * ONE WORD OF LABEL *
         TR    SP1,TRANT            * TRANSLATE TO ICL *
         L     6,SP1                * PACK DOWN TO SIX BIT CHARACTERS *
         LA    8,4                  * SET INNER LOOP COUNTER *
BLKC20   SRDL  6,6                  * SELECT LOW ORDER SIX
         SRL   6,2                    BITS FROM EACH BYTE  *
         BCT   8,BLKC20             * LOOP FOR NEXT BYTE (INNER) *
         ST    7,WORK
         MVC   0(3,9),WORK          * MOVE THREE BYTE TO IOAREA *
         LA    9,3(9)               * INCREMENT OUTPUT
         LA    3,4(3)                 AND INPUT FIELDS *
         BCT   5,BLKC15             * LOOP FOR NEXT FOUR BYTES (OUTER)*
         PACK  CONV,8(4,3)          * PACK GENERATION NUMBER
         CVB   6,CONV                 AND CONVERT TO BINARY  *
         ST    6,WORK
         MVC   IOAREA+18(3),WORK+1  * MOVE 24 BIT NUMBER TO IOAREA *
         MVC   TAPE+40(7),HOLD+5    * BUILD DDNAME FROM LABEL *
         MVI   TAPE+47,C'1'         * SUFFIX DDNAME BY 1 *
         OPEN  (TAPE,(OUTPUT))
         LA    1,60                 * SET UP HEADER LENGTH IN BYTES *
         BAL   14,SUBA01            * WRITE RECOED - LENGTH IN REG1 *
         CLOSE (TAPE,LEAVE)
         MVI   TAPE+47,C'2'         * SUFFIX DDNAME BY 2 *
         OPEN  (TAPE,(OUTPUT))
         MVI   IOAREA,X'00'         * CLEAR AREA FOR SENTINEL *
         MVC   IOAREA+1(59),IOAREA
         MVI   IOAREA,X'80'         * START OF SUBFILE SENTINEL *
         MVI   IOAREA+2,X'02'
         LA    1,60                 * LENGTH IN BYTES *
         BAL   14,SUBA01            * WRITE RECORD - LENGTH IN REG1 *
         ZAP   CONV,0(3,4)          * MAXIMUM BLOCK SIZE (3RD PARAM) *
         CVB   5,CONV
         LR    6,5                  * HOLD SIZE IN WORDS *
         SLL   5,2                  * MULTIPLY BY FOUR *
         A     5,=A(BLOCK-1)
         ST    5,END                * END OF BLOCK *
         LA    6,63(6)              * ROUND UP *
         SRL   6,6                  * DIVIDE BY 64 *
         STH   6,NOTRAN             * NUMBER OF TRANSLATES REQUIRED *
         B     BLKE01               * EXIT ROUTINE *
*
*
BLKD01   CLOSE (TAPE,LEAVE)
         MVI   TAPE+47,C'3'         * SUFFIX DDNAME BY 3 *
         OPEN  (TAPE,(OUTPUT))
         MVI   IOAREA,X'00'         * CLEAR TRAILER SENTINEL *
         MVC   IOAREA+1(59),IOAREA
         MVI   IOAREA,X'80'         * EOF LABEL *
         MVC   IOAREA+3(3),BLCOUNT+1 * 24 BIT BLOCK COUNT *
         LA    1,60                 * LENGTH IN BYTES *
         BAL   14,SUBA01            * WRITE RECORD - LENGTH IN REG1 *
         CLOSE (TAPE)
         MVC   NOTRAN,=H'0'         * SET FOR RESTART *
         B     BLKE01               * EXIT ROUTINE *
*
*
BLKE01   L     13,4(13)             * RESET LINK *
         LM    14,12,12(13)         * EXIT ROUTINE  *
         BR    14                   * RETURN TO CALLING ROUTINE *
*
*
         EJECT
SUBA01   STM   14,12,12(13)         * SAVE REGISTERS *
         LA    10,SREGS2
         ST    10,8(13)
         ST    13,4(10)
         LR    13,10
         LA    5,0(1)               * PLACE LENGTH IN REG5 *
         WRITE TAPE1,               *  WRITE TAPE - LENGTH IN REG5 *   X
               SF,                                                     X
               TAPE,                                                   X
               IOAREA,                                                 X
               (5)
         CHECK TAPE1
         L     13,4(13)             * RESET *
         LM    14,12,12(13)
         BR    14                   * RETURN *
*
*
         EJECT
         DS    0D
CONV     DC    PL8'0'
         DS    CL1
IOAREA   DS    CL3                  * TAPE OUT PUT AREA *
BLOCK    DS    1024F                * UNTRANSLATED BLOCK *
SREGS    DS    18F                  * REGISTER SAVE AREAS *
SREGS2   DS    18F
SP1      DS    F
SP2      DS    F
BLCOUNT  DC    F'0'                 * NUMBER OF DATA BLOCKS *
WORK     DS    F
BLKSIZE  DC    F'0'
END      DC    F'0'
NOTRAN   DC    H'0'                 * NUMBER OF TRANSLATES REQUIRED *
WCWTAB   DS    100H                 * RECORD LENGTHS IN BYTES *
COUNT    DC    H'0'
HOLDC    DC    H'0'
TRANT    DC    64X'00'              *IBM TO ICL TRANSLATE TABLE *
         DC    X'10'
         DC    10X'00'
         DC    X'1E'
         DC    X'0C'
         DC    X'18'
         DC    X'1B'
         DC    X'00'
         DC    X'16'
         DC    9X'00'
         DC    X'11'
         DC    X'14'
         DC    X'1A'
         DC    X'19'
         DC    X'0B'
         DC    X'00'
         DC    X'1D'
         DC    X'1F'
         DC    X'14'
         DC    8X'00'
         DC    X'1C'
         DC    X'15'
         DC    X'00'
         DC    X'0E'
         DC    X'0F'
         DC    10X'00'
         DC    X'0A'
         DC    X'13'
         DC    X'20'
         DC    X'17'
         DC    X'0D'
         DC    X'12'
         DC    X'14'
         DC    X'21'
         DC    X'22'
         DC    X'23'
         DC    X'24'
         DC    X'25'
         DC    X'26'
         DC    X'27'
         DC    X'28'
         DC    X'29'
         DC    7X'00'
         DC    X'2A'
         DC    X'2B'
         DC    X'2C'
         DC    X'2D'
         DC    X'2E'
         DC    X'2F'
         DC    X'30'
         DC    X'31'
         DC    X'32'
         DC    8X'00'
         DC    X'33'
         DC    X'34'
         DC    X'35'
         DC    X'36'
         DC    X'37'
         DC    X'38'
         DC    X'39'
         DC    X'3A'
         DC    3X'00'
         DC    X'3B'
         DC    15X'00'
         DC    X'3D'
         DC    3X'00'
         DC    X'21'
         DC    X'22'
         DC    X'23'
         DC    X'24'
         DC    X'25'
         DC    X'26'
         DC    X'27'
         DC    X'28'
         DC    X'29'
         DC    7X'00'
         DC    X'2A'
         DC    X'2B'
         DC    X'2C'
         DC    X'2D'
         DC    X'2E'
         DC    X'2F'
         DC    X'30'
         DC    X'31'
         DC    X'32'
         DC    8X'00'
         DC    X'33'
         DC    X'34'
         DC    X'35'
         DC    X'36'
         DC    X'37'
         DC    X'38'
         DC    X'39'
         DC    X'3A'
         DC    6X'00'
         DC    X'00'
         DC    X'01'
         DC    X'02'
         DC    X'03'
         DC    X'04'
         DC    X'05'
         DC    X'06'
         DC    X'07'
         DC    X'08'
         DC    X'09'
         DC    6X'00'
HOLD     DS    CL12
         EJECT
         LTORG *
TAPE     DCB   DSORG=PS,                                               X
               MACRF=W,                                                X
               RECFM=U
         END
