         MACRO
&NAME    PLINE &DCB,&AREA,&RETURN,&LEN=133
         LCLC  &B
         LCLA  &A
&A       SETA  &LEN-1
         AIF   (T'&RETURN  NE 'N').P0101
         AIF   ('&AREA' EQ '').LOCATE
         AIF   ('&AREA'(1,1)  NE  '(').GOON
&B       SETC  '0'
.GOON    ANOP
&NAME    PUT   &DCB,&AREA
         AGO   .CLEAR
.LOCATE  ANOP
&NAME    PUT   &DCB
         AGO   .OUT
.CLEAR   MVI   &B.&AREA,X'40'
         AIF   ('&B' EQ '0').REG
         MVC   &AREA+1(&A),&AREA
         AGO   .OUT
.REG     MVC   1(&A.,&AREA),&B.&AREA
.OUT     BR    &RETURN
         MEXIT
.P0101   MNOTE  '12,RETURN REGISTER INCORRECT'
         MEND
         MACRO
&NAME    BEGIN &BASE,&ENTRY,&BRANCH,&SAVADR=,&ID=YES,&REGS=YES,        -
               &WORKLTH=0,&WORKNME=,&RENT=NO
.*
.*       THIS IS A RE-WRITE OF THE EXSISTING 'BEGIN' MACRO AND
.*       A REPLACEMENT FOR THE 'MBEGIN' MACRO.  AN
.*       ADDITIONAL RE-ENTRANT FEATURE HAS ALSO BEEN ADDED.
.*
.*       WRITTEN BY CHRIS HUTCHINS, MAY 1974.
.*
.*       WEST SUSSEX COUNTY COUNCIL SYSTEMS PROGRAMMING GROUP.
.*
         GBLB  &CHK,&RSW
         GBLC  &SNAME
         LCLB  &ENTSW
         LCLC  &BS1,&BS2,&BS3,&BS4
         LCLC  &EN1,&EN2,&EN3,&EN4
         LCLC  &BR1,&BR2,&BR3,&BR4
         AIF   ('&REGS' EQ 'NO' OR &CHK).NOREGS
         SPACE
*        REGISTER EQUATES
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
&CHK     SETB  1
.NOREGS  ANOP
         AIF   ('&NAME' EQ '').NAMESKP
&NAME    EQU   *
.NAMESKP AIF   ('&ENTRY' EQ '' OR '&ENTRY(2)' EQ '').U15
&EN1     SETC  '&ENTRY(1)'
&EN2     SETC  '&ENTRY(2)'
&EN3     SETC  '&ENTRY(3)'
&EN4     SETC  '&ENTRY(4)'
         ENTRY &EN1
         ENTRY &EN2
         AIF   ('&EN3' EQ '').ENT2
         ENTRY &EN3
         AIF   ('&EN4' EQ '').ENT2
         ENTRY &EN4
.ENT2    ANOP
&EN1     NOPR  0
&EN2     NOPR  0
         AIF   ('&EN3' EQ '').NOPENT
&EN3     NOPR  0
         AIF   ('&EN4' EQ '').NOPENT
&EN4     NOPR  0
.NOPENT  ANOP
         AGO   .STM
.U15     USING *,15
.STM     STM   14,12,12(13) .      SAVE REGISTERS
         AIF   ('&BASE(1)' NE '').BSPEC
&BS1     SETC  '12'
         AGO   .RENTCK
.BSPEC   ANOP
&BS1     SETC  '&BASE(1)'
.RENTCK  AIF   ('&RENT' EQ 'YES').RENTNT
         AIF   ('&RENT' EQ 'NO').NOERR3
         MNOTE 8,'RENT VALUE INVALID - RENT=NO ASSUMED'
.NOERR3  ANOP
&RSW     SETB  0
         AIF   ('&WORKLTH' EQ '' OR '&WORKLTH' EQ '0').NOERR1
         MNOTE 4,'WORKLTH INVALID WHEN RENT=NO - IGNORED'
.NOERR1  AIF   ('&WORKNME' EQ '').NOERR2
         MNOTE 4,'WORKNME INVALID WHEN RENT=NO - IGNORED'
.NOERR2  ANOP
         AIF   ('&ENTRY' EQ '' OR '&ENTRY(1)' EQ '').NOBALR
         BALR  &BS1,0
         USING *,&BS1
.NOBALR  AIF   ('&ID' EQ 'NO' OR '&SYSECT' EQ '').NOID1
         B     *+12
         DC    CL8'&SYSECT'
.NOID1   ANOP
         CNOP  0,4
         BAL   &BS1,IHB&SYSNDX.B
IHB&SYSNDX EQU *
         USING *,&BS1
&SAVADR  DC    18F'0'
IHB&SYSNDX.B ST &BS1,8(13) .          CHAIN
         ST    13,4(&BS1) .                SAVE
         LR    13,&BS1 .                        AREA
         AGO   .MBASE
.*
.RENTNT  ANOP
&RSW     SETB  1
         AIF   ('&SAVADR' EQ '').NOSAVA
         MNOTE 4,'SAVADR INVALID WHEN RENT=YES - IGNORED'
.NOSAVA  ANOP
         BALR  &BS1,0
IHB&SYSNDX EQU *
         USING *,&BS1
         AIF   ('&ID' EQ 'NO' OR '&SYSECT' EQ '').NOID2
         B     *+12
         DC    CL8'&SYSECT'
.NOID2   ANOP
         BAL   1,*+8
IHB&SYSNDX.S DC AL4((((72+&WORKLTH)+7)/8)*8)
         ICM   0,B'1111',IHB&SYSNDX.S
         SVC   10
&SNAME   SETC  'IHB&SYSNDX.S'
         XC    0(72,1),0(1) .      CLEAR SAVE AREA
         ST    1,8(13) .           CHAIN
         ST    13,4(1) .                 SAVE
         LR    13,1 .                         AREA
         L     1,4(13) .           RESTORE
         L     1,24(1) .                   REGISTER 1
         AIF   ('&WORKNME' EQ '').MBASE
         USING &WORKNME-72,13 .    USING FOR 'WORKNME' DSECT
.*
.MBASE   AIF   ('&BASE' EQ '' OR '&BASE(2)' EQ '').MENTS
&BS2     SETC  '&BASE(2)'
&BS3     SETC  '&BASE(3)'
&BS4     SETC  '&BASE(4)'
         AIF   ('&BS4' EQ '').BS3CK
         AIF   ('&BS4' EQ '&BS3' OR '&BS4' EQ '&BS2' OR '&BS4' EQ '&BS1-
               ').FAIL1
.BS3CK   AIF   ('&BS3' EQ '').BS2CK
         AIF   ('&BS3' EQ '&BS2' OR '&BS3' EQ '&BS1').FAIL1
.BS2CK   AIF   ('&BS2' EQ '').MENTS
         AIF   ('&BS2' EQ '&BS1').FAIL1
         AIF   ('&BS4' EQ '').BS3U
         USING IHB&SYSNDX+4096,&BS2,&BS3,&BS4
         AGO   .BASET
.BS3U    AIF   ('&BS3' EQ '').BS2U
         USING IHB&SYSNDX+4096,&BS2,&BS3
         AGO   .BASET
.BS2U    USING IHB&SYSNDX+4096,&BS2
.BASET   LR    &BS2,&BS1
         AH    &BS2,IHB&SYSNDX.K
         AIF   ('&BS3' EQ '').KSET
         LR    &BS3,&BS2
         AH    &BS3,IHB&SYSNDX.K
         AIF   ('&BS4' EQ '').KSET
         LR    &BS4,&BS3
         AH    &BS4,IHB&SYSNDX.K
.KSET    B     *+6
IHB&SYSNDX.K DC H'4096'
.*
.MENTS   AIF   ('&BRANCH' EQ '').END
&BR1     SETC  '&BRANCH(1)'
&BR2     SETC  '&BRANCH(2)'
&BR3     SETC  '&BRANCH(3)'
&BR4     SETC  '&BRANCH(4)'
         AIF   ('&BR1' NE '' AND '&EN1' EQ '').FAIL2
         AIF   ('&BR2' NE '' AND '&EN2' EQ '').FAIL2
         AIF   ('&BR3' NE '' AND '&EN3' EQ '').FAIL2
         AIF   ('&BR4' NE '' AND '&EN4' EQ '').FAIL2
&ENTSW   SETB  1
         AIF   (NOT &RSW).BRTAB
         L     15,4(13)
         L     15,16(15)
.BRTAB   N     15,IHB&SYSNDX.A
         SLL   15,1
         B     *+4(15)
         B     &BR1
         B     &BR2
         AIF   ('&BR3' EQ '').BRK
         B     &BR3
         AIF   ('&BR4' EQ '').BRK
         B     &BR4
.BRK     ANOP
         CNOP  0,4
IHB&SYSNDX.A DC X'00000007'
         AGO   .END
.*
.*       ERROR MESSAGES
.*
.FAIL1   MNOTE 12,'DUPLICATE BASE REGISTERS SPECIFIED'
.FAIL999 MNOTE *,'MACRO GENERATION TERMINATED'
         MEXIT
.FAIL2   MNOTE 12,'BRANCH NUMBERS DO NOT AGREE WITH ENTRY NUMBERS'
         AGO   .FAIL999
.END     SPACE
         MEND
         MACRO
&NAME    FINISH &RC=0
         GBLB  &RSW
         GBLC  &SNAME
         AIF   (NOT &RSW).CONT
&NAME    LA    1,0(13)
         L     13,4(13)
         ICM   0,B'1111',&SNAME
         SVC   10
         AGO   .RCHK
.CONT    ANOP
&NAME    L     13,4(13)
.RCHK    AIF   ('&RC' EQ '(15)').REG15
         AIF   ('&RC'(1,1) EQ '(').REGLOAD
         AIF   ('&RC' EQ 'NO').NORC
         AIF   (T'&RC NE 'N').ERR
         AIF   ('&RC' EQ '0').SLR
         LA    15,&RC
         AGO   .REG15
.SLR     SLR   15,15 .             SET ZERO RETURN CODE
.REG15   L     14,12(13)
         LM    0,12,20(13)
         AGO   .OUT
.NORC    LM    14,12,12(13)
.OUT     BR    14
         MEXIT
.REGLOAD LR    15,&RC(1)
         AGO   .REG15
.ERR     MNOTE 8,'INVALID RETURN CODE VALUE - IGNORED'
         AGO   .NORC
         MEND
         TITLE 'X-REF PROGRAM FOR MACRO LANGUAGE'
         ISEQ  73,80
UTIMXREF CSECT
         SPACE 2
*   THIS PROGRAM LOOKS THROUGH THE DATA BETWEEN "MACRO" AND "MEND"
*        ASSEMBLER STATEMENTS, AND PRODUCES A CROSS-REFERENCE LISTIGG
*        OF ALL THE SYMBOLIC NAMES.
*   IT PRINT THE INPUT (SEQUENCE NUMBERED) AND ALSO WRITES OUT A
*        COPY OF THE INPUT TO A NEW FILE SO THAT, FOR EXAMPLE, IT CAN
*        THEN BE INPUT TO AN ASSEMBLY OR AN IEBUPDTE
         SPACE 4
         BEGIN
         SPACE 2
         OPEN  (SYSIN,,OUT,OUTPUT,PRINT,OUTPUT)
*
         GETMAIN R,LV=6513         ENOUGH FOR 500 ENTRIES (+ 1)
         ST    R1,AREA
*
RESET    L     R1,AREA
         ST    R1,NEXTTAB
         AH    R1,H6500
         ST    R1,AREATOP
*
*   FIRST CARD - MUST BE "MACRO", OR ELSE "./" FOR IEBUPDTE, THEN MACRO
*
FIRSTGET GET   SYSIN
         LR    R11,R1
         PUT   OUT,(R11)
         CLC   0(2,R11),=C'./'     Q IEBUPDTE CTL CARD
         BE    FIRSTGET
QMACRO   LR    R10,R11
         BAL   R3,NOSPACE          FIND 1ST NON-SPACE CHAR.
         CLC   0(5,R1),=C'MACRO'
         BNE   ABEND4
         LA    R11,71(R11)
PUTP1    BAL   R3,DISPLAY
*
*   MUST BE MODEL STATEMENT NOW
*
         GET   SYSIN
         LR    R11,R1
         MVI   TYPE,X'C0'
         PUT   OUT,(R11)
         LR    R10,R11
         LA    R11,71(R11)
         BAL   R4,STORKEYW         GO FIND & STORE NAMES
*
         CLI   LASTCHAR,C' '       Q LAST COL.OF CARD INDICS.CONTINUE
         BNE   PUTP1                YES, LOOP ON MODEL STATEMENT
         SR    R7,R7
         EJECT
*   MAIN STREAM CARDS
*
PUTP2    BAL   R3,DISPLAY
         GET   SYSIN
         LR    R11,R1
         PUT   OUT,(R11)
         LR    R10,R11
         MVI   TYPE,X'00'
         BAL   R3,NOSPACE          FIND 1ST COL. PUNCHED
         CR    R10,R1              Q IN COL.1?
         BNE   OTHRDEFN
         CLI   0(R1),C'&&'          YES. IS IT A SYMBOL?
         BE    STOREC1
         CLI   0(R1),C'.'           NO. IS IT A BRANCH ENTRY?
         BNE   IGNC1
         CLI   1(R1),C'*'           MAY BE, BUT Q A COMMENT CARD
         BNE   BRDEFN
         LA    R11,71(R11)
         B     PUTP2                 YES, JUST PRINT
         SPACE
*   CARD WITH '.' OR '&' IN COL.1;  STORE IT BEFORE PROCEEDING TO
*        REST OF CARD
BRDEFN   MVI   TYPE,X'80'          (IF "." COL.1, THIS IS DEFINITION)
STOREC1  BAL   R4,SCAN2
         MVI   TYPE,X'00'
         B     NEXTPUN
*
*   SOMETHING IN COL.1, BUT NOT '.' OR '&'; FIND 1ST BLANK COL.AFTER
*
IGNC1    LA    R1,1(R1)
         CLI   0(R1),X'40'
         BNE   IGNC1
         SPACE 2
*   ANY PUNCHING IN COL.1 THAT WE NEED NOW DEALT WITH.
*        R1 POINTS TO BLANK COL - EITHER 1, OR BEYOND
*
NEXTPUN  BAL   R3,NOSPACE
OTHRDEFN CLC   0(4,R1),=C'MEND'    LOOK FOR MEND FIRST
         BE    LASTIN
         CLC   0(3,R1),=C'GBL'
         BNE   QLCL
         IC    R7,=X'20'
         B     GBLORLCL
QLCL     CLC   0(3,R1),=C'LCL'
         BNE   NORMAL
         IC    R7,=X'04'
GBLORLCL CLI   3(R1),C'A'
         BE    VARTYPE
         SRL   R7,1
         CLI   3(R1),C'B'
         BE    VARTYPE
         SRL   R7,1
VARTYPE  STC   R7,TYPE
         OI    TYPE,X'80'
         B     VARSYMS
         SPACE 2
*   NOT A "MEND" NOR A DEFINITION OF VARIABLE
*
NORMAL   CLC   0(3,R1),=C'AGO'     Q INTERNAL BRANCH
         BE    ABRANCH
         CLC   0(3,R1),=C'AIF'
         BE    ABRANCH
VARSYMS  LA    R11,71(R11)
         BAL   R4,STORKEYW         DO REST OF CARD
         B     PUTP2
*
ABRANCH  LA    R1,1(R1)
         CR    R1,R11              END OF CARD?
         BNE   *+12
         OI    CSW,X'80'            YES, BR.SYMBOL NOT FOUND - MUST BE
         B     VARSYMS               IN A CONTN. CARD
         CLI   0(R1),C'.'
         BNE   ABRANCH
         LR    R0,R10              (SAVE R10)
         BAL   R4,STOREAA          LABEL FOUND, STORE IT
         LR    R10,R0              RESET CARD POINTER
         B     VARSYMS              GO DO "&"NAMES
         EJECT
*   END OF INPUT DATA - EITHER EODAD OR "MEND" FOUND
*
EODAD    OI    CSW,X'01'
         B     NMERGE
LASTIN   LA    R11,71(R11)
         BAL   R3,DISPLAY
         MVI   PAREA,X'40'
         MVC   PAREA+1(132),PAREA
*
*   PREPARE X-REF LISTING - MERGE ALL THE NAMES FIRST
*
NMERGE   CLC   AREA,NEXTTAB        HAD ANY NAMES?
         BE    STOP1                NO, BYPASS XREF
         ST    R5,TABLETOP
         S     R5,AREA             CALC. NO. OF ENTRIES
         SR    R4,R4
         D     R4,F13
         STH   R5,NOOFENTS         STORE IN PARAM. LIST
         MVC   SORT+24(4),AREA     START ADDR.
         CNOP  0,4
SORT     CALL  WSSORT,(CAN,H13,H12,0,NOOFENTS,H0,RET)
         SPACE 4
*   ALL ENTRIES NOW SORTED - START X-REF LISTING
*
         BAL   R4,PSUBA
         SPACE
         L     R5,AREA
PLOOP    LA    R9,PAREA+24
         MVC   NAME(8),0(R5)       HOLD CURRENT SYMBOL
         MVC   PAREA+1(8),0(R5)
PLOOPA   TM    12(R5),X'80'         Q WAS THIS THE DEFINITION
         BZ    PREFER
         MVC   PAREA+12(4),8(R5)    YES, STMT NO. TO "DEFN" COL.
         SH    R9,H6
         B     *+10
PREFER   MVC   0(4,R9),8(R5)        NO, STMT NO. TO NEXT COL.
         TM    12(R5),X'40'        DO TYPE - Q MODEL STATEMENT
         BZ    QGBLA
         MVC   PAREA+18(4),=C'MODL'
         B     UPPAREA
QGBLA    TM    12(R5),X'20'
         BZ    QGBLB
         MVC   PAREA+18(4),=C'GBLA'
         B     UPPAREA
QGBLB    TM    12(R5),X'10'
         BZ    QGBLC
         MVC   PAREA+18(4),=C'GBLB'
         B     UPPAREA
QGBLC    TM    12(R5),X'08'
         BZ    QLCLA
         MVC   PAREA+18(4),=C'GBLC'
         B     UPPAREA
QLCLA    TM    12(R5),X'04'
         BZ    QLCLB
         MVC   PAREA+18(4),=C'LCLA'
         B     UPPAREA
QLCLB    TM    12(R5),X'02'
         BZ    QLCLC
         MVC   PAREA+18(4),=C'LCLB'
         B     UPPAREA
QLCLC    TM    12(R5),X'01'
         BZ    UPPAREA
         MVC   PAREA+18(4),=C'LCLC'
UPPAREA  LA    R9,6(R9)
         C     R9,=A(PAREA+129)
         BL    SAMELINE
         BAL   R4,PSUB
         LA    R9,PAREA+24
SAMELINE LA    R5,13(R5)
         C     R5,TABLETOP         Q END OF ALL SYMBOLS
         BH    STOP1
         CLC   0(8,R5),NAME         NO, Q SAME AS LAST SYMBOL
         BE    PLOOPA
         CLI   PAREA+1,X'40'         NO, Q JUST PRINTED A MAIN LINE
         BNE   GOPUTP
         CLI   PAREA+24,X'40'       OR CONTINUATION LINE
         BE    PLOOP
GOPUTP   BAL   R4,PSUB
         B     PLOOP
         SPACE 2
*   END FF A MACRO
*
STOP1    TM    CSW,X'01'           WAS IT ON EODAD?
         BO    FINISH
         B     RESET                NO, WAS "MEND" - MAY BE MORE TO DO
         SPACE 3
*   END OF JOB
*
FINISH   CLOSE (SYSIN,,OUT,,PRINT)
         FINISH RC=0
         EJECT
*   SUBROUTINES
*
*   1.  TO FIND AN AMPERSAND IN THE INPUT CARD, AND/OR STORE ANY
*        ITEMS FOR THE CROSS-REFERENCE
*
STORKEYW MVI   LASTCHAR,X'40'
SCANLOOP BAL   R3,AMPSAND          FIND AN AMPERSAND
         BNE   PUTLCH
STOREAA  LR    R10,R1              POINT TO IT
SCAN2    L     R5,NEXTTAB          SET UP TABLE ENTRY
         MVC   0(8,R5),SPACES
         MVI   12(R5),X'00'
*
MVACHAR  MVC   0(1,R5),0(R1)       MOVE A CHAR. OF SYMBOL TO TABLE
         LA    R5,1(R5)            UP TABLE
         LA    R1,1(R1)            UP CARD
         CR    R1,R11              Q COL. 72 YET
         BNE   NSAMECD
         CLI   0(R11),X'40'         YES. CONTINUATION FOLLOWS?
         BE    ENDSYMB               NO, END OF A SYMBOL
         BAL   R3,DISPLAY
         GET   SYSIN                 GET NEXT CARD
         LR    R10,R1
         PUT   OUT,(R10)
         TM    CSW,X'80'
         BNO   *+12
         MVI   CSW,X'00'
         B     ABRANCH
         LA    R11,71(R10)
         BAL   R3,NOSPACE          FIND 1ST COL PUNCHED
*
NSAMECD  CLI   0(R1),C'A'          CHAR. LESS THAN ALPHA?
         BL    ENDSYMB
         B     MVACHAR              NO
*                                   YES
ENDSYMB  L     R5,NEXTTAB
         OC    12(1,R5),TYPE
         MVC   8(4,R5),SEQNO
         LA    R5,13(R5)
         C     R5,AREATOP
         BNH   MORETAB
         ABEND 8,DUMP
MORETAB  ST    R5,NEXTTAB
PUTLCH   MVC   LASTCHAR(1),0(R1)
         LR    R10,R1
         CR    R10,R11
         BL    SCANLOOP
         BR    R4
         SPACE 4
*    2.  LOOK ALONG A CARD FOR THE 1ST CHARACTER OTHER THAN A SPACE
*
NOSPACE  LR    R1,R10
NOSPLOOP CLI   0(R1),X'40'
         BCR   7,R3                GO OUT IF NO SPACE
         LA    R1,1(R1)
         B     NOSPLOOP
         SPACE 4
*    3.  LOOK ALONG A CARD FOR ANY AMPERSAND
*
AMPSAND  LR    R1,R10
AMPLOOP  CLI   0(R1),C'&&'
         BCR   8,R3
         LA    R1,1(R1)
         CR    R1,R11
         BE   PUTLCH
         B     AMPLOOP
         SPACE 4
*   PRINTING ROUTINE FOR THE INPUT DATA
*
DISPLAY  CP    LINCNT,KP55
         BL    PLINE
         PUT   PRINT,HEAD1
         PUT   PRINT,SUBHEAD1
         MVI   PAREA,C'0'
         SP    LINCNT,LINCNT
PLINE    SH    R11,H71
         AP    LINCNT,KP1
         MVC   PAREA+36(4),SPACES
         TM    RET,X'80'           DID PREV.CARD HAVE COL.72 PUNCH
         BO     DOPUT                YES, DON'T PRINT SEQ.NO.
         MVC   PAREA+36(4),SEQNO
DOPUT    MVC   PAREA+41(80),0(R11)
         PUT   PRINT,PAREA
         MVI   PAREA,X'40'
         MVI   RET,X'00'
         CLI   71(R11),X'40'       DOES THIS CARD HAVE COL72 PUNCH
         BE    UPSEQNO
         MVI   RET,X'80'           YES,DON'T UPDATE,NOR MOVE NEXT TIME
         B     PEXIT
UPSEQNO  PACK  WKAR,SEQNO
         AP    WKAR,KP1
         UNPK  SEQNO,WKAR
         OI    SEQNO+3,X'F0'
PEXIT    BR    R3
         SPACE 4
*   ROUTINE FOR PRINTING LINES OF X-REFERENCE TABLE
*
PSUB     BAL   R3,PRINE
         AP    LINCNT,KP1
         CP    LINCNT,KP55
         BL    PSEXIT
PSUBA    SP    LINCNT,LINCNT
         PUT   PRINT,HEAD2
         PUT   PRINT,SUBHEAD2
         SPACE
         MVI   PAREA,C'0'
PSEXIT   BR    R4
PRINE    PLINE PRINT,PAREA,3
         SPACE 4
*   ABNORMAL END - THERE WAS NO "MACRO" CARD FIRST IN DECK
*
ABEND4   WTO   'NO "MACRO" CARD FIRST IN DECK',ROUTCDE=(11)
         ABEND 4
         SPACE 4
*   EXECUTED INSTRUCTION
*
MVA      MVC   0(0,R5),0(R10)
         EJECT
*   CONSTANTS AND AREAS
*
F13      DC    F'13'
TABLETOP DC    A(0)
NEXTTAB  DC    A(0)
NAME     DC    CL8' '
WKAR     DC    PL4'0'
AREA     DC    A(0)
AREATOP  DC    A(0)
NOOFENTS DC    H'0'
H71      DC    H'71'
H13      DC    H'13'
H12      DC    H'12'
H6       DC    H'6'
H5       DC    H'5'
H0       DC    H'0'
H6500    DC    H'6500'
LINCNT   DC    PL2'55'
KP1      DC    PL1'1'
KP55     DC    PL2'55'
TYPE     DC    X'00'
LASTCHAR DC    C' '
SEQNO    DC    C'0001'
CAN      DC    C'CAN'
RET      DC    X'00'
SPACES   DC    8C' '
CSW      DC    X'00'
PAREA    DC    133C' '
HEAD1    DC    C'1',8C' ',C'LISTING OF MACRO SOURCE CODE',96C' '
HEAD2    DC    C'1',45C' ',C'CROSS-REFERENCE',72C' '
SUBHEAD1 DC    C'-',35C' ',C'STMT   SOURCE STATEMENT',74C' '
SUBHEAD2 DC    C'- SYMBOL    DEFN  TYPE   REFERENCES',98C' '
         EJECT
SYSIN    DCB   DSORG=PS,MACRF=GL,RECFM=FB,DDNAME=SYSIN,EODAD=EODAD
OUT      DCB   DDNAME=OUT,LRECL=80,BLKSIZE=800,DSORG=PS,MACRF=PM,      -
               RECFM=FB
PRINT    DCB   DDNAME=PRINT,DSORG=PS,MACRF=PM,RECFM=FBA,LRECL=133,     -
               BLKSIZE=665
         SPACE 4
         LTORG
         TITLE 'SORT SUBROUTINE'
         ISEQ  73,80
***********************************************************************
*                                                                     *
*        THIS  SUBROUTINE  SORTS  A  TABLE  OF  FIXED-LENGTH          *
*                                                                     *
*              RECORDS  HELD  IN  CORE.                               *
*                                                                     *
*        THE RECORDS ARE SORTED IN ASCENDING OR DESCENDING KEY ORDER  *
*        ACCORDING TO THE KEY-TYPE PARAMETER HANDED ACROSS.           *
*        THE KEYS MAY BE IN CHARACTER OR PACKED DECIMAL FORMAT,       *
*        AND MAY APPEAR ANYWHERE WITHIN THE RECORD.                   *
*                                                                     *
*        THE PARAMETERS TO BE HANDED ACROSS ARE:-                     *
*                                                                     *
*           1. A 3-BYTE FIELD CONTAINING A DESCRIPTION OF THE         *
*              KEY-TYPE.  THE VALUES BEING:-                          *
*                   1ST BYTE   P - KEY IN PACKED DECIMAL NUMBER.      *
*                              C - KEY IN CHARACTER FORMAT.           *
*                   2ND BYTE   A - RECORDS TO BE SORTED IN ASCENDING  *
*                                                      KEY ORDER.     *
*                              D - RECORDS TO BE SORTED IN DESCENDING *
*                                                      KEY ORDER.     *
*                   3RD BYTE   D - CHECK FOR DUPLICATE KEYS.          *
*                                  ANY OTHER CHARACTER FOR NO CHECK.  *
*                                                                     *
*           2. A HALFWORD FIELD CONTAINING THE LENGTH OF THE RECORD   *
*              IN BINARY.                                             *
*                                                                     *
*           3. A HALFWORD FIELD CONTAINING THE LENGTH OF THE SORT KEY *
*              IN BINARY.                                             *
*                                                                     *
*           4. THE TABLE OF RECORDS TO BE SORTED.                     *
*                                                                     *
*           5. A HALFWORD FIELD CONTAINING THE NUMBER OF RECORDS IN   *
*              THE TABLE IN BINARY.                                   *
*                                                                     *
*           6. A HALFWORD FIELD CONTAINING THE RELATIVE POSITION OF   *
*              THE SORT KEY WITHIN EACH RECORD IN BINARY.             *
*                                                                     *
*           7. A SINGLE BYTE TO CONTAIN THE RETURN CODE.              *
*              THE VALUES BEING:-                                     *
*                 0 - SORT SUCCESSFUL                                 *
*                 1 - SORT SUCCESSFUL, DUPLICATE KEYS FOUND           *
*                 2 - INVALID KEYS FOUND, SORT INCOMPLETE(PACKED ONLY)*
*                 3 - INVALID PARAMETER - KEY DOES NOT FALL WITHIN    *
*                                         RECORD BOUNDRIES            *
*                 4 - INVALID PARAMETER - KEY GREATER THAN RECORD     *
*                                         LENGTH OR LESS THAN 1       *
*                 5 - INVALID PARAMETER - INVALID DESCRIPTION KEYS    *
*                 6 - INVALID PARAMETER - RECORD LENGTH GREATER THAN  *
*                                         256 OR LESS THAN 1          *
*                 7 - INVALID PARAMETER - NO OF RECORDS TO BE SORTED  *
*                                         LESS THAN 1.                *
*                                                                     *
***********************************************************************
         EJECT
WSSORT   CSECT
         SPACE
         BEGIN
         SPACE
         LR    R8,R1                        SAVE R1 IN R8
         L     R9,24(R8)                    LOAD ADDRESS OF PARM7
         L     R3,0(R8)                     LOAD ADDRESS OF PARM 1
         MVC   PACKSW,0(R3)                 SET PACK SWITCH
         MVC   DKEY,2(R3)
         CLI   0(R3),C'P'                   PACKED?
         BE    PACKED
         CLI   0(R3),C'C'                   CHARACTER?
         BE    CHARCTR
         B     ERROR5
         SPACE
SORTSEQ  CLI   1(R3),C'A'                   ASCENDING SORT?
         BE    ASCEND
         CLI   1(R3),C'D'                   DESCENDING SORT?
         BE    DESCEND
         B     ERROR5
         EJECT
FLDLGTH  L     R3,4(R8)                     LOAD ADDRESS OF PARM 2
         LH    R2,0(R3)                     LOAD PARM 2
         CH    R2,=H'256'                   REC. LENGTH > 256?
         BH    ERROR6
         CH    R2,=H'1'                                 < 1?
         BL    ERROR6
         BCTR  R2,0                         SUBTRACT 1  FOR LGTH. INSRT
         STC   R2,AGAIN+1                   PLUG IN MVC LENGTH
         STC   R2,AGAIN+7
         STC   R2,MOVELOW+1
         STC   R2,MOVELOW+7
         STC   R2,OUP-5
         STC   R2,OUP-11
         STC   R2,HIGHSEQ+9
         STC   R2,LOWEQ+9
         STC   R2,XOR1+1
         STC   R2,XOR1+7
         STC   R2,XOR1+13
         AH    R2,=H'1'                     RESTORE LENGTH
         SLA   R2,1                         MULTIPLY BY 2
         ST    R2,LENSAVE
         LR    R0,R2
         GETMAIN R,LV=(0)
         ST    R1,CORESAVE
         LR    R10,R1
         SRA   R2,1                         DIVIDE BY 2
         STC   R2,AGAIN+9                   PLUG IN HIGH STORE DISPLACE
         STC   R2,OUP-1
         STC   R2,XOR1+3
         STC   R2,XOR1+11
         STC   R2,XOR1+15
         STC   R2,HIGHSEQ+13
         EJECT
         L     R3,8(R8)                     LOAD ADDRESS OF PARM 3
         LH    R4,0(R3)
         LR    R15,R4                       SAVE R4 IN R15
         CR    R4,R2                        KEY > RECORD?
         BH    ERROR4
         CH    R4,=H'1'                     KEY < 1?
         BL    ERROR4
         BCTR  R4,0                         SUBTRACT 1 FROM R4
         CLI   PACKSW,C'P'                  PACK SWITCH ON?
         BNE   CLCHAR
         CH    R4,=H'15'                    VALID PACKED KEY?
         BH    ERROR4
         SPIE  ERROR2,(7)                   MASK OFF 0C7'S
         ST    R1,OLDPICA
         LR    R5,R4                        SET UP & PLUG IN LENGTHS
         SLA   R5,4
         OR    R4,R5
CLCHAR   STC   R4,COMPARE1+1
         STC   R4,COMPARE2+1
         STC   R4,ONCEMORE+1
         EJECT
         L     R6,12(R8)                    LOAD ADDRESS OF TABLE
         ST    R6,TBLEADDR
         L     R3,16(R8)                    LOAD ADDRESS OF PARM 5
         LH    R14,0(R3)
         ST    R14,NORECS
         CH    R14,=H'1'                    NO OF RECS. < 1?
         BL    ERROR7
         LR    R7,R2                        CALCULATE SIZE OF TABLE
         MH    R7,0(R3)
         AR    R7,R6
         SR    R7,R2
         EJECT
         L     R3,20(R8)                    LOAD ADDRESS OF PARM 6
         LH    R1,0(R3)
         LTR   R1,R1
         BC    4,ERROR3
         LR    R11,R2                       VALID KEY OFFSET?
         SR    R11,R15
         CR    R1,R11
         BH    ERROR3
         EJECT
         LA    R8,COUNT                     SET UP COUNTS & ADDRESSES
         LA    R11,INNERLP
         LR    R15,R14
         EJECT
AGAIN    MVC   0(1,R10),0(6)                HOLD FIRST ENTRY
         MVC   0(1,R10),0(7)                HOLD LAST  ENTRY  B
         LA    R4,0(1,6)                    POINT TO KEY
         LR    5,4
         LR    R3,R4
         SPACE
         B     COMPARE1
INNERLP  AR    R3,R2
COMPARE1 CLC   0(1,R3),0(4)
BRANCH1  BL    SWOPMIN
COMPARE2 CLC   0(1,R3),0(R5)
BRANCH2  BH    SWOPHIGH
COUNT    BCTR  14,11
         B     MOVE
SWOPMIN  LR    R4,R3                        REPLACE LOWEST SOFAR
         BR    R8
SWOPHIGH LR    R5,R3                        REPLACE HIGHEST SO FAR
         BR    R8
         EJECT
*        MOVE HIGHEST & LOWEST RECORDS FOUND THIS PASS IF NECESSARY
         SPACE 2
MOVE     SR    R4,R1                        RESTORE TO RECORD ADDRESS
         SR    R5,R1
         CR    R7,R4                        LAST = LOWEST?
         BE    SWOPIT
         CR    R6,R5                        FIRST =HIGHEST?
         BNE   JUMP1
XOR1     XC    0(1,R10),0(R10)              SWOP HELD ENTRIES
         XC    0(1,R10),0(R10)
         XC    0(1,R10),0(R10)
HIGHSEQ  EX    0,MOVELOW
         EX    0,MOVELOW+6
         MVC   0(1,R7),0(R10)               B
         B     OUP
SWOPIT   CR    R6,R5                        FIRST = HIGHEST?
         BNE   SWOPEM
         EX    0,XOR1
         EX    0,XOR1+6
         EX    0,XOR1+12
         EX    0,SWOPIT-10
         EX    0,LOWEQ+8
         B     OUP
SWOPEM   EX    0,XOR1
         EX    0,XOR1+6
         EX    0,XOR1+12
LOWEQ    EX    0,MOVEHIGH
         EX    0,MOVEHIGH+6
         MVC   0(1,R6),0(R10)
         B     OUP
MHI      CR    R7,R5                        LAST = HIGHEST?
         BE    OUP
         B     MOVELOW
JUMP1    CR    R6,R4                        FIRST = LOWEST?
         BE    MHI
MOVELOW  MVC   0(1,R6),0(R4)                MOVE RECORDS
         MVC   0(1,R4),0(R10)
MOVEHIGH MVC   0(1,R7),0(R5)
         MVC   0(1,R5),0(R10)               B
         EJECT
OUP      AR    R6,R2
         SR    R7,R2                                    THE NEXT PASS
         LR    R14,R15
         BCTR  14,0
         BCTR  14,0
         LR    R15,R14
         CH    R15,=H'1'
         BH    AGAIN
         CLI   DKEY,C'D'
         BE    DUPS
         MVI   0(R9),C'0'                   SET RETURN CODE = 0
RETURN   BAL   R10,FREEMAIN
         CLI   PACKSW,C'P'
         BE    UNSPIE
         B     EOJ
         SPACE 3
ERROR2   MVC   9(3,1),ERROR2A               (ERROR2 = SPIE ERROR)
         BR    R14
ERROR2B  MVI   0(R9),C'2'                   SET RETURN CODE = 2
UNSPIE   L     1,OLDPICA                    RESET SPIE
         SPIE  MF=(E,(1))
EOJ      FINISH
         EJECT
ERROR5   MVI   0(R9),C'5'                   SET RETURN CODE = 5
         B     EOJ
         SPACE 1
ERROR6   MVI   0(R9),C'6'                   SET RETURN CODE = 6
         B     EOJ
         SPACE 1
ERROR7   MVI   0(R9),C'7'                   SET RETURN CODE = 7
         BAL   R10,FREEMAIN
         CLI   PACKSW,C'P'
         BE    UNSPIE
         B     EOJ
         SPACE 1
ERROR4   MVI   0(R9),C'4'                   SET RETURN CODE = 4
         BAL   R10,FREEMAIN
         B     EOJ
         SPACE 1
ERROR3   MVI   0(R9),C'3'                   SET RETURN CODE = 3
         BAL   R10,FREEMAIN
         CLI   PACKSW,C'P'
         BE    UNSPIE
         B     EOJ
         EJECT
*        SEARCH FOR DUPLICATE RECORDS
         SPACE 2
DUPS     L     R6,TBLEADDR                  LOAD ADDRESS OF TABLE
         L   R14,NORECS                     LOAD NO. OF RECORDS
         LA    R6,0(R6,R1)                  LOAD ADDRESS OF FIRST
         LA    R7,0(R6,R2)                            & SECOND KEY
ONCEMORE CLC   0(1,R6),0(R7)                COMPARE RECORDS
         BE    TERM                         IF = TO BRANCH OUT
         AR    R6,R2                              ELSE NEXT RECORD
         AR    R7,R2
         BCTR  R14,0
         CH    R14,=H'1'          BRANCH OUT IF END OF TABLE
         BNH   RETURN-4
         B     ONCEMORE
TERM     MVI   0(R9),C'1'                   SET RETURN CODE = 1
         B     RETURN
         SPACE 4
FREEMAIN L     R1,CORESAVE
         L     R0,LENSAVE
         FREEMAIN R,LV=(0),A=(1)
         BR    R10
         EJECT
PACKED   MVI   COMPARE1,X'F9'               PLUG IN CP
         MVI   COMPARE2,X'F9'
         MVI   ONCEMORE,X'F9'
         B     SORTSEQ
         SPACE
CHARCTR  MVI   COMPARE1,X'D5'               PLUG IN CLC
         MVI   COMPARE2,X'D5'
         MVI   ONCEMORE,X'D5'
         B     SORTSEQ
         SPACE 2
ASCEND   MVI   BRANCH1+1,X'40'              PLUG IN ASCENDING BC
         MVI   BRANCH2+1,X'20'
         B     FLDLGTH
         SPACE
DESCEND  MVI   BRANCH1+1,X'20'              PLUG IN DESCENDING BC
         MVI   BRANCH2+1,X'40'
         B     FLDLGTH
         EJECT
OLDPICA  DS    F
CORESAVE DS    F
LENSAVE  DS    F
TBLEADDR DS    F
NORECS   DS    F
PACKSW   DS    CL1
ERROR2A  DC    AL3(ERROR2B)
DKEY     DS    CL1
         LTORG
         END
