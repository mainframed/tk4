         MACRO
&NAME    ENTER &DSECT,&BASE=,&PARM=,&ID=,&SAVE=
.* THE ENTER MACRO IS USED WHERE A CSECT IS ENTERED (REGISTER 15 MUST
.* POINT TO THE BEGINING OF THE ENTER MACRO).IT DOES THE FOLLOWING -
.*  1. SAVES REGISTERS.
.*  2. SETS UP BASE REGISTER(S) AS FOLLOWS -
.*     (A) REG 13 SET UP AS A BASE REGISTER POINTING TO THE BEGINING
.*         OF THE SAVE AREA (SEE 3 BELOW). THE ONLY TIME THIS IS
.*         NOT DONE IS IF SAVE IS NOT SPECIFIED, DSECT IS NOT
.*         SPECIFIED, AND BASE IS SPECIFIED.
.*     (B) UNLESS NO GETMAIN IS SPECIFIED, AND NO SAVE AREA IS
.*         SPECIFIED, A BASE REGISTER IS SET UP IN ADDITION TO REG 13.
.*  3. DOES ONE OF THE FOLLOWING -
.*     (A) SETS UP A SAVE AREA.
.*     (B) USES A SAVE AREA WHOSE ADDRESS IS PROVIDED.
.*     (C) GETMAINS AN AREA WHOSE FIRST (OR ONLY) 18 WORDS ARE THE
.*        SAVE AREA. THIS FORMAT WOULD BE USED IN A RE-ENTRANT PROGRAM.
.*  4. CHAINS THE SAVE AREAS.
.*  5. OPTIONALLY SAVES REGISTER 1 IN ANOTHER REGISTER.
.*  6. OPTIONALLY GENERATES A CSECT CARD.
.*       FORMAT OF MACRO -
.* NAME  ENTER (DSECT,LV),BASE=R1,PARM=R2,ID=ID,SAVE=SAVEAREA
.*       WHERE -
.*  NAME  IS THE NAME USED ON A GENERATED CSECT CARD. IF OMITTED, NO
.*             CSECT CARD IS GENERATED.
.*  (DSECT,LV) SPECIFIES THE NAME AND LENGTH (IN BYTES) OF A DSECT FOR
.*             THE AREA TO BE GETMAINED; A USING DSECT,13 IS GENERATED
.*             FOR A GETMAINED AREA.IF ONLY DSECT IS SPECIFIED,LV
.*             DEFAULTS TO 72 BYTES. (DSECT,LV) CANNOT BE SPECIFIED
.*             WITH SAVE.
.*  BASE  SPECIFIES THE BASE REGISTER SET UP.DEFAULT OF BASE=12 UNLESS
.*             NEITHER (DSECT,LV) OR SAVE ARE SPECIFIED. IN THIS CASE
.*             REG 13 ACTS AS THE BASE REGISTER BECAUSE A SAVE AREA
.*             IS SET UP IS AT THE BEGINING OF THE PROGRAM. THE
.*             REGISTER SPECIFIED MUST BE IN THE RANGE 2 TO 12.
.*  PARM  SPECIFIES THE REGISTER USED TO SAVE THE CONTENTS OF REGISTER
.*             1.NO SAVING DONE IF PARM NOT SPECIFIED,BUT REGISTER 1
.*             WILL REMAIN UNCHANGED IF THE GETMAIN OPTION IS NOT USED.
.*             THE REGISTER MUST BE IN THE RANGE 2 TO 12.
.*  ID    SPECIFIES AN IDENTIFIER OPERAND IDENTICAL TO THAT FOR THE
.*             IBM-SUPPLIED SAVE MACRO.
.*  SAVE  SPECIFIES THE ADDRESS OF A SAVE AREA. IT CANNOT BE SPECIFIED
.*             WITH (DSECT,LV) AS THE SAVE AREA IS GETMAINED IN THIS
.*             CASE. IF NEITHER SAVE OR (DSECT,LV) IS SPECIFIED THEN
.*             A SAVE AREA IS SET UP AT THE BEGINING OF THE PROGRAM.
.*             NOTE THAT IF SAVE IS SPECIFIED THE AREA MUST BE
.*             WITHIN 4095 BYTES OF THE BEGINING OF THE CSECT.
         AIF   ('&NAME' EQ '').NONAME
&NAME    CSECT
.NONAME  USING *,15
         SAVE  (14,12),T,&ID
         AIF   ('&BASE' EQ '').TGET
         BALR  &BASE,0
         USING *,&BASE
         AGO   .TPARM
.TGET    AIF   ('&SAVE' NE '').SETBASE
         AIF   ('&DSECT' EQ '').TPARM
.SETBASE BALR  12,0
         USING *,12
.TPARM   AIF   ('&PARM' EQ '').NOPARM
         LR    &PARM,1
.NOPARM  AIF   ('&DSECT' EQ '').NOGET
         DROP  15
         AIF   ('&SAVE' NE '').ERR
         AIF   ('&DSECT(2)' EQ '').NOLV
         GETMAIN R,LV=&DSECT(2)
         AGO   .LV
.NOLV    GETMAIN R,LV=72
.LV      ST    13,4(,1)
         ST    1,8(,13)
         LR    13,1
         USING &DSECT(1),13
         MEXIT
.NOGET   AIF   ('&SAVE' NE '').SAVE
         CNOP  0,4
         BAL   15,*+76
         DROP  15
S&SYSNDX DC    18F'0'
         AGO   .NOSAVE
.SAVE    LA    15,&SAVE
         DROP  15
.NOSAVE  ST    13,4(,15)
         ST    15,8(,13)
         LR    13,15
         AIF   ('&SAVE' NE '').ENDX
         AIF   ('&BASE' NE '').END
         USING S&SYSNDX,13
.END     MEXIT
.ENDX    USING &SAVE,13
         MEXIT
.ERR     MNOTE 12,'**** DSECT AND SAVE CANNOT BE SPECIFIED TOGETHER IN X
               ENTER MACRO'
         MEND
         MACRO
&NAME    EXIT  &DSECT,&T,&RC=0
.* THE EXIT MACRO IS USED TO RETURN FROM A CSECT.IT DOES THE FOLLOWING-
.*  1. RESTORES THE SAVE REGISTER.
.*  2. OPTIONALLY FREEMAINS THE AREA POINTED TO BY REG 13.
.*  3. SETS A RETURN CODE,IF REQUIRED.
.*  4. OPTIONALLY SETS THE X'FF' INDICATOR IN THE SAVE AREA TO SAY THAT
.*     CONTROL HAS BEEN RETURNED TO THE CALLING ROUTINE.
.*       FORMAT OF MACRO -
.* NAME  EXIT  (R,LV),&T,RC=NN
.*       WHERE -
.* (R,LV) SPECIFIES THAT A FREEMAIN IS REQUIRED.R IS CODED AS SHOWN,
.*       AND LV IS THE NUMBER OF BYTES TO BE FREEMAINED.IF ONLY R IS
.*       SPECIFIED,LV DEFAULTS TO 72 BYTES.IF NOTHING IS SPECIFIED,
.*       NO FREEMAIN IS DONE.
.* T      SPECIFIES THAT THE SAVE AREA IS TO BE FLAGGED WITH X'FF' TO
.*       INDICATE RETURN OF CONTROL TO THE CALLING PROGRAM. FLAGGING
.*       IS DONE IF T CODED - OTHERWISE OMIT THIS OPERAND.
.* RC     SPECIFIES ONE OF -
.*         (A) RC=(15)  WHICH MEANS THAT A RETURN CODE IS ALREADY
.*             LOADED INTO REG 15.
.*         (B) RC=(R)  WHERE R IS A REGISTER THAT THE RETURN CODE
.*             HAS BEEN LOADED INTO.
.*         (C) RC=VALUE  WHERE VALUE IS THE RETURN CODE TO BE SET.
.*             THE MAXIMUM RETURN CODE POSSIBLE IS 4095.
.*        NOTE THAT RC=0 IS THE DEFAULT.
         AIF   ('&DSECT(1)' EQ 'R').C2
&NAME    L     13,4(,13)
.C3      AIF   ('&RC'(1,1) NE '(').C3A
         AIF   ('&RC' EQ '(15)').C3A
         LR    15,&RC(1)
         RETURN (14,12),&T.,RC=(15)
         MEXIT
.C3A     RETURN (14,12),&T.,RC=&RC
         MEXIT
.C2      ANOP
&NAME    LR    1,13
         LR    12,15
         L     13,4(,13)
         AIF   ('&DSECT(2)' NE '').C4
         FREEMAIN R,LV=72,A=(1)
         AGO   .C5
.C4      FREEMAIN R,LV=&DSECT(2),A=(1)
.C5      LR    15,12
         AGO   .C3
         MEND
         TITLE 'ZSCPDS - AMEND CARD-IMAGE PDS'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*  THIS PROGRAM REPLACES ALL OCCURRENCES OF A SPECIFIED STRING WITHIN *
*  A PDS BY ANOTHER STRING (WHICH DOES NOT HAVE TO BE OF THE SAME     *
*  SIZE). THE PDS MUST BE RECFM=F(B) AND LRECL=80. ONLY COLS 1-71     *
*  ARE SCANNED, AND AN ERROR CONDITION WILL OCCUR IF, ON SUBSTITUTING *
*  THE NEW STRING, AN OVERFLOW INTO COLUMN 72 OCCURS. DETAILS OF ALL  *
*  CHANGES MADE ARE OUTPUT ON SYSPRINT.                               *
*                                                                     *
*  JCL REQUIRED:-                                                     *
*      //  EXEC  PGM=ZSCPDS,PARM='OLD-STRING/NEW-STRING'              *
*      //SYSPRINT DD SYSOUT=A                                         *
*      //PDS  DD  DSN=XXXXXX,DISP=OLD   (PDS TO BE AMENDED)           *
*      //                                                             *
*                                                                     *
*  RETURN CODES:-                                                     *
*      00 = SUCCESSFUL COMPLETION                                     *
*      04 = COMPLETION - STRING OVERFLOW(S) HAVE OCCURRED             *
*      08 = BAD PARAMETER                                             *
*      16 = UNABLE TO OPEN SYSPRINT                                   *
*      20 = PDS IS NOT LRECL=80 OR RECFM=F(B)                         *
*      24 = UNABLE TO OPEN PDS                                        *
*      28 = UNABLE TO OPEN PDS DIRECTORY                              *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*               INITIALISATION AND PARAMETER EXTRACTION               *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
ZSCPDS   CSECT
         REGS
         ENTER ID=*
         L     R2,0(R1)       GET PARAMETER ADDRESS
         LH    R3,0(R2)       GET PARAMETER LENGTH
         LTR   R3,R3          PARAMETER PRESENT?
         BZ    NOPARM         NO PARAMETER PRESENT - ERROR EXIT
         MVI   RETCODE,X'1C'  SET BAD RETURN CODE
         LA    R4,2(R3,R2)    POINT PAST END OF PARAMETER
         LA    R3,2(R2)       POINT TO START OF PARAMETER
PARMLOOP EQU   *
         CLI   0(R3),C'/'     IS IT A SLASH?
         BE    SLASH          YES, EXIT FROM LOOP
         LA    R3,1(R3)       POINT TO NEXT PARAMETER CHARACTER
         CR    R3,R4          PAST END OF PARAMETERS?
         BL    PARMLOOP       NO, GO ROUND AGAIN
         B     BADPARM        YES - NO SLASH PRESENT - ERROR EXIT
SLASH    EQU   *
         LA    R2,2(R2)       POINT TO START OF PARAMETER
         LR    R6,R4
         BCTR  R6,0           POINT TO LAST BYTE OF PARM
         SR    R6,R3          LENGTH OF NEW STRING
         LR    R5,R3
         SR    R5,R2          LENGTH OF OLD STRING
         CR    R5,R6          STRING'S DIFFERENT LENGTH?
         BNE   UPDFORM        YES - MUST BE UPDATE RUN
         BCTR  R5,0           PREPARE FOR EXECUTE
         EX    R5,COMSTRNG    COMPARE OLD STRING TO NEW STRING
         BNE   UPDFORM        NOT EQUAL - UPDATE RUN
         MVI   LOCSW,X'01'    SET LOCATE ONLY FLAG
         OPEN  (DIR,,PDS,,PRT,OUTPUT) OPEN ALL FILES(PDS AS INPUT)
         B     TESTOPEN       TEST OPEN
COMSTRNG CLC   0(0,R2),1(R3)  COMPARE STRINGS
UPDFORM  EQU   *
         OPEN  (DIR,,PDS,UPDAT,PRT,OUTPUT)   OPEN ALL FILES
TESTOPEN EQU *
         TM    DIR+48,X'10'   OPEN SUCCESSFUL FOR DIRECTORY OF PDS?
         BZ    EXIT           NO - ERROR EXIT
         NI    RETCODE,X'F8'  ADJUST RETURN CODE
         TM    PDS+48,X'10'   OPEN SUCCESSFUL FOR THE PDS ITSELF
         BZ    CLOSEDIR       NO - ERROR EXIT
         NI    RETCODE,X'F0'  ADJUST RETURN CODE
         TM    PRT+48,X'10'   OPEN SUCCESSFUL FOR SYSPRINT?
         BZ    CLOSEPDS       NO - ERROR EXIT
         MVI   RETCODE,X'00'  SET GOOD RETURN CODE
         CLC   PDS+82(2),H80  LRECL OF PDS = 80?
         BNE   BADPDS         NO - ERROR EXIT
         TM    PDS+36,X'80'   RECFM OF PDS IS F(B)?
         BZ    BADPDS         NO - ERROR EXIT
         LR    R5,R3          SAVE R3
         LA    R3,1(R3)       POINT PAST SLASH
         SR    R4,R3          CALCULATE LENGTH OF SECOND STRING
         STH   R4,LEN2        SAVE SECOND STRING LENGTH
         BCTR  R4,0           LENGTH - 1 FOR MVC
         STC   R4,MVCSTR2+1   STORE LENGTH IN MVC INSTRUCTION
         STC   R4,MVCSTR2A+1  STORE LENGTH IN MVC INSTRUCTION
         SR    R5,R2          CALCULATE LENGTH OF FIRST STRING
         STH   R5,LEN1        SAVE FIRST STRING LENGTH
         BCTR  R5,0           LENGTH - 1 FOR CLC
         STC   R5,CLCSTR1+1   STORE LENGTH IN CLC INSTRUCTION
         STC   R5,MVCSTR1A+1  STORE LENGTH IN MVC INSTRUCTION
         LH    R1,PDS+62      GET PDS BLOCKSIZE
         LR    R10,R1         SAVE R1
         SLL   R1,1           DOUBLE-BUFFERING
         GETMAIN R,LV=(1)     GETMAIN AREA FOR PDS BLOCK
         ST    R1,ABUFF1      SAVE ADDRESS OF BUFFER 1
         ST    R1,PDSDECBA+12   SAVE ADDRESS OF BUFFER 1 IN READ LIST
         LA    R1,0(R10,R1)   POINT TO START OF BUFFER 2
         ST    R1,ABUFF2      SAVE ADDRESS OF BUFFER 2
         ST    R1,PDSDECBB+12   SAVE ADDRESS OF BUFFER 2 IN READ LIST
         B     DIRBLK         GO READ DIRECTORY BLOCK
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                     READ DIRECTORY BLOCK                            *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DIRBLK   EQU   *
         ZAP   LINECNT,P55    FORCE NEW PAGE ON SYSPRINT
         READ  DIRDECB,SF,DIR,DIRAREA   READ A DIRECTORY BLOCK
         CHECK DIRDECB
         CLC   DIRAREA+10(8),FFS   LAST DIRECTORY BLOCK?
         BE    CLOSEPRT       YES, GO TERMINATE THE PROGRAM
         LA    R4,DIRAREA+10  POINT TO FIRST NAME FIELD
         MVC   MEMNAME,DIRAREA+10  SAVE MEMBER NAME
         LH    R5,DIRAREA+8   GET NUMBER OF DATA BYTES IN THIS BLOCK
         SH    R5,H2          ADJUST FOR THE LENGTH OF THE FIELD ITSELF
         B     PROCESS        GO PROCESS PDS MEMBER
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                        PROCESS PDS MEMBER                           *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
PROCESS  EQU   *
         MVC   PDSBLOCK(3),8(R4)   GET TTR OF PDS MEMBER
         POINT PDS,PDSBLOCK   POINT TO START OF PDS MEMBER
         LA    R8,PDSDECBA    PREPARE FOR ......
         LA    R9,PDSDECBB    ...... OVERLAPPING READS
READPDS1 READ  (R8),SF,MF=E   READ A BLOCK OF THE PDS
READPDS2 READ  (R9),SF,MF=E   READ THE NEXT PDS BLOCK
         CHECK (R8)           CHECK FOR COMPLETION OF FIRST READ
         MVC   ABUFFX,12(R8)  STORE ADDRESS OF THIS BUFFER
         L     R10,16(R8)     STORE RELEVANT IOB ADDRESS
         BAL   R11,UPDATE     SEE IF BLOCK NEEDS UPDATING
         CLI   UPDSW,X'00'    BLOCK NEEDS UPDATING?
         BE    NOUPD1         NO, CONTINUE
         CHECK (R9)           CHECK FOR COMPLETION OF OTHER READ
         WRITE (R8),SF,MF=E   RE-WRITE THE UPDATED BLOCK (INPLACE)
         MVI   UPDSW,X'00'    CLEAR UPDATE SWITCH
         MVC   ABUFFX,12(R9)  STORE ADDRESS OF THIS BUFFER
         L     R10,16(R9)     STORE ADDRESS OF RELEVANT IOB
         BAL   R11,UPDATE     SEE IF BLOCK NEEDS UPDATING
         CLI   UPDSW,X'00'    BLOCK NEEDS UPDATING?
         BE    NOUPD2         NO, CONTINUE
         MVI   UPDSW,X'00'    CLEAR UPDATE SWITCH
         WRITE (R9),SF,MF=E   RE-WRITE THE UPDATED BLOCK (INPLACE)
         CHECK (R8)           CHECK FOR COMPLETION OF OTHER READ
         CHECK (R9)           CHECK FOR COMPLETION OF THE RE-WRITE
         B     READPDS1       GO ROUND AGAIN
NOUPD1   EQU   *
         ST    R9,SAVER9      ...... SWAP
         LR    R9,R8          ...... CONTENTS OF
         L     R8,SAVER9      ...... R8 AND R9
         B     READPDS2       GO READ NEXT BLOCK
NOUPD2   EQU   *
         CHECK (R8)           CHECK FOR COMPLETION OF LAST READ
         B     READPDS1       GO ROUND AGAIN
ENDPDS   EQU   *
         CLI   UPDSW,X'00'    OUTSTANDING WRITE?
         BE    NOWRITE        NO, CONTINUE
         WRITE (R8),SF,MF=E
         CHECK (R8)
NOWRITE  EQU   *
         TM    PDSDECBA,X'80' WAITING FOR COMPLETION?
         BZ    TESTB          NO, SKIP
         CHECK PDSDECBA       CHECK FOR COMPLETION
TESTB    EQU   *
         TM    PDSDECBB,X'80' WAITING FOR COMPLETION?
         BZ    ENDCHECK       NO, SKIP
         CHECK PDSDECBB       CHECK FOR COMPLETION
ENDCHECK EQU   *
         NI    11(R4),X'1F'   TURN OFF TOP 3 BITS OF COUNT FIELD
         XR    R10,R10        CLEAR R10
         IC    R10,11(R4)     GET COUNT FIELD
         SLL   R10,1          CALCULATE SIZE OF USER DATA
         SH    R5,H12         SUBTRACT LENGTH OF MEMBER NAME + TTR + C
         SR    R5,R10         END OF DIRECTORY BLOCK?
         BZ    DIRBLK         YES, GO READ NEXT BLOCK
         LA    R4,12(R10,R4)  NO, POINT TO NEXT MEMBER NAME FIELD
         CLC   0(8,R4),FFS    LAST MEMBER?
         BE    CLOSEPRT       YES, TERMINATE
         ZAP   LINECNT,P55    FORCE NEW PAGE ON SYSPRINT
         MVC   MEMNAME,0(R4)  SAVE MEMBER NAME
         B     PROCESS        ...... AND PROCESS
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                          UPDATE ROUTINE                             *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
UPDATE   EQU   *
         ST    R4,SAVER4      SAVE R4
         ST    R5,SAVER5      SAVE R5
         ST    R8,SAVER8      SAVE R8
         ST    R9,SAVER9      SAVE R9
         L     R4,ABUFFX      POINT TO START OF BUFFER
         LA    R7,WORKBUFF+70 POINT TO LAST BYTE IN WORK BUFFER
         MVI   UPDSW,X'00'    CLEAR UPDATE INDICATOR
         LH    R10,14(R10)    GET RESIDUAL BLOCK COUNT FROM IOB
         SH    R10,PDS+62     CALCULATE NUMBER OF DATA BYTES (NEGATIVE)
MAINLINE EQU   *
         LA    R9,71          SET COUNT OF COLUMNS TO BE TESTED
         LA    R6,WORKBUFF    POINT TO START OF WORK BUFFER
         MVC   WORKBUFF,SPACES     CLEAR WORK BUFFER
CLCSTR1  CLC   0(0,R4),0(R2)  TEST FOR PRESENCE OF FIRST STRING
         BE    FOUND          IF FOUND, GO PROCESS
         MVC   0(1,R6),0(R4)  MOVE 1 BYTE INTO WORK BUFFER
         LA    R4,1(R4)       POINT TO NEXT CHARACTER IN PDS
         LA    R6,1(R6)       POINT TO NEXT CHARACTER IN WORK BUFFER
         CR    R6,R7          END OF WORK BUFFER?
         BH    ENDWORK        YES, ACTION REQUIRED
BCT      BCT   R9,CLCSTR1     GO SEARCH NEXT COLUMN
         B     ENDCARD        END OF THIS CARD-IMAGE
ENDWORK  EQU   *
         BCTR  R9,0           ALLOW FOR BYPASSED BCT
         CH    R9,H0          END OF CARD-IMAGE?
         BE    ENDCARD        YES, EVERYTHING OK
         BCTR  R9,0           NO, LENGTH - 1 FOR CLC
         STC   R9,CLCREST+1   SET UP CLC
CLCREST  CLC   0(0,R4),SPACES REMAINDER OF CARD-IMAGE IS BLANK?
         BNE   ERROR         NO, INDICATES OVERFLOW INTO COL 72 - ERROR
         B     ENDCARD        YES, EVERYTHING OK
FOUND    EQU   *
         OI    UPDSW,X'80'    INDICATE OLD-STRING FOUND
MVCSTR2  MVC   0(0,R6),0(R3)  MOVE SECOND STRING TO WORK BUFFER
         AH    R6,LEN2     POINT PAST SECOND STRING WITHIN WORK BUFFER
         CR    R6,R7          END OF WORK BUFFER?
         BH    ERROR     YES, STRING HAS OVERFLOWED THE BUFFER - ERROR
         AH    R4,LEN1        POINT PAST FIRST STRING WITHIN CARD-IMAGE
         SH    R9,LEN1        ADJUST NUMBER OF COLUMNS TO SEARCH
         CH    R9,H0          END OF CARD?
         BH    CLCSTR1        NO, GO ROUND AGAIN
ENDCARD  EQU   *
         L     R4,ABUFFX      POINT TO START OF CARD-IMAGE
         TM    UPDSW,X'80'    HAS THIS CARD-IMAGE BEEN AMENDED?
         BZ    NEXTCARD       NO, SKIP
         NI    UPDSW,X'7F'    TURN OFF INDICATOR
         BAL   R5,NEWPAGE     TEST FOR NEW PAGE ETC.
         CLI   LOCSW,X'01'    PROGRAM IN 'LOCATE ONLY' MODE?
         BE    LOCONLY        YES, PRINT OUT ONLY
         MVC   PRTLINE+94(8),REPLACED
         PUT   PRT,PRTLINE
         MVC   PRTLINE+1(71),WORKBUFF  AMENDED CARD-IMAGE TO PRINT LINE
         MVC   PRTLINE+72(9),71(R4)     MOVE LAST 9 COLUMNS (UNCHANGED)
         MVC   PRTLINE+101(4),MENT
         PUT   PRT,PRTLINE
         MVC   PRTLINE,SPACES
         MVC   0(71,R4),WORKBUFF   REPLACE IT WITH THE WORK BUFFER
         OI    UPDSW,X'01'    INDICATE UPDATE HAS TAKEN PLACE
         B     NEXTCARD
LOCONLY  EQU   *
         MVC   PRTLINE+94(7),LOCATED
         PUT   PRT,PRTLINE
         MVC   PRTLINE,SPACES
         MVC   0(71,R4),WORKBUFF   REPLACE IT WITH THE WORK BUFFER
         MVI   UPDSW,X'00'    INDICATE NO UPDATE
NEXTCARD EQU   *
         AH    R10,H80        ANY DATA BYTES LEFT IN THIS BLOCK?
         BZ    ENDUPD         NO, END OF BLOCK
         AH    R4,H80         INDICATE A CARD-IMAGE HAS BEEN PROCESSED
         ST    R4,ABUFFX      SET NEW START LOCATION
         B     MAINLINE       ....... CONTINUE
ERROR    EQU   *
         L     R4,ABUFFX      GET BUFFER ADDRESS
         NI    UPDSW,X'7F'    TURN OFF INDICATOR BIT
         BAL   R5,NEWPAGE     TEST FOR NEW PAGE ETC.
         MVC   PRTLINE+94(5),CERR  INDICATE ERROR
         PUT   PRT,PRTLINE
         MVC   PRTLINE,SPACES
         MVI   PRTLINE,C' '   SKIP 1 LINE
         MVC   PRTLINE+1(53),ERRMSG     ERROR MESSAGE TO PRINT LINE
         PUT   PRT,PRTLINE
         MVC   PRTLINE,SPACES
         MVI   RETCODE,X'04'  INDICATE ERROR RETURN CODE
         B     NEXTCARD       FINISH OFF THE SUB-ROUTINE
ENDUPD   EQU   *
         L     R4,SAVER4      RECOVER R4
         L     R5,SAVER5      RECOVER R5
         L     R8,SAVER8      RECOVER R8
         L     R9,SAVER9      RECOVER R9
         BR    R11            RETURN TO CALLER
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                           NEW PAGE ROUTINE                          *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
NEWPAGE  EQU   *
         CP    LINECNT,P55    NEW PAGE DUE?
         BNE   MEMHEAD        NO, CONTINUE
         MVI   PRTLINE,C'1'   SKIP TO NEW PAGE
         AP    PAGECNT,P1     INCREMENT PAGE COUNT
         MVC   PRTLINE+1(40),HEAD
         MVC   PRTLINE+41(3),MASK
         ED    PRTLINE+40(4),PAGECNT
         PUT   PRT,PRTLINE
         MVC   PRTLINE,SPACES
         MVC   PRTLINE+3(3),OLD
         MVC   PRTLINE+7(10),STRVAL
MVCSTR1A MVC   PRTLINE+17(0),0(R2)
         LA    R8,PRTLINE+17
         AH    R8,LEN1
         MVI   0(R8),X'7D'    CLOSING QUOTE
         PUT   PRT,PRTLINE
         MVC   PRTLINE,SPACES
         MVC   PRTLINE+3(3),NEW
         MVC   PRTLINE+7(10),STRVAL
MVCSTR2A MVC   PRTLINE+17(0),0(R3)
         LA    R8,PRTLINE+17
         AH    R8,LEN2
         MVI   0(R8),X'7D'    CLOSING QUOTE
         PUT   PRT,PRTLINE
         MVC   PRTLINE,SPACES
         ZAP   LINECNT,LINECNT     ZEROISE LINE COUNT
MEMHEAD  EQU   *
         MVI   PRTLINE,C'-'   SKIP 3 LINES
         MVC   PRTLINE+1(6),MEMBER
         MVC   PRTLINE+8(8),MEMNAME     MEMBER NAME TO PRINT LINE
         PUT   PRT,PRTLINE
         MVI   PRTLINE,C' '   SKIP 1 LINE
         MVC   PRTLINE+1(80),0(R4) CURRENT CARD-IMAGE TO PRINT LINE
         MVI   PRTLINE+86,C'*'
         AP    LINECNT,P5
         BR    R5             RETURN TO CALLER
         SPACE 6
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                          ERROR ROUTINES                             *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
NOPARM   EQU   *
         MVI   RETCODE,X'08'  SET BAD RETURN CODE
         B     EXIT
BADPARM  EQU   *
         MVI   RETCODE,X'08'  SET BAD RETURN CODE
         B     CLOSEPRT
BADPDS   EQU   *
         MVI   RETCODE,X'14'  SET BAD RETURN CODE
         B     CLOSEPRT
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                        TERMINATION ROUTINES                         *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
CLOSEPRT EQU   *
         CLOSE PRT
CLOSEPDS EQU   *
         CLOSE PDS
CLOSEDIR EQU   *
         CLOSE DIR
EXIT     EQU   *
         XR    R15,R15
         IC    R15,RETCODE    GET RETURN CODE
         EXIT  RC=(15)
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                     VARIABLES AND CONSTANTS                         *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
P1       DC    P'1'
P5       DC    P'5'
LINECNT  DC    P'55'
P55      DC    P'55'
PAGECNT  DC    PL2'0'
LEN1     DS    H
LEN2     DS    H
H0       DC    H'0'
H2       DC    H'2'
H12      DC    H'12'
H80      DC    H'80'
ABUFF1   DS    F
ABUFF2   DS    F
ABUFFX   DS    F
SAVER4   DS    F
SAVER5   DS    F
SAVER8   DS    F
SAVER9   DS    F
PDSBLOCK DC    F'0'
DIRAREA  DC    0F'0',264X'00'
RETCODE  DC    X'00'
LOCSW    DC    X'00'      LOCATE ONLY FLAG
UPDSW    DC    X'00'      X'01' = THIS BLOCK HAS BEEN UPDATED
*                         X'80' = THIS CARD-IMAGE HAS BEEN UPDATED
MASK     DC    X'202120'
FFS      DC    8X'FF'
MEMNAME  DS    CL8
OLD      DC    C'OLD'
NEW      DC    C'NEW'
MENT     DC    C'MENT'
CERR     DC    C'ERROR'
MEMBER   DC    C'MEMBER'
LOCATED  DC    C'LOCATED'
REPLACED DC    C'REPLACED'
STRVAL   DC    C'STRING = ',X'7D'
WORKBUFF DS    CL71
PRTLINE  DS    CL133
SPACES   DC    CL133' '
HEAD     DC    C'ZSCPDS - AMEND CARD-IMAGE PDS      PAGE '
ERRMSG   DC    C'**** REPLACEMENT LINE TOO LONG - NO ACTION TAKEN ****'
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                           LIST FORM OF READS                        *
*                                                                     *
*  (NOTE THAT THE VALUES 'ABUFF1' AND 'ABUFF2' ARE OVERWRITTEN FROM   *
*   WITHIN THE PROGRAM WHEN THE AREAS HAVE BEEN GETMAINED).           *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         READ  PDSDECBA,SF,PDS,ABUFF1,MF=L
         READ  PDSDECBB,SF,PDS,ABUFF2,MF=L
         SPACE 6
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                             DCBS                                    *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
PDS      DCB   DDNAME=PDS,DSORG=PS,MACRF=(RP,WP),NCP=2,EODAD=ENDPDS
DIR      DCB   DDNAME=PDS,DSORG=PS,MACRF=(R),RECFM=F,BLKSIZE=256,      X
               LRECL=256,KEYLEN=8
PRT      DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),RECFM=FBA,          X
               LRECL=133,BLKSIZE=1330
         END
