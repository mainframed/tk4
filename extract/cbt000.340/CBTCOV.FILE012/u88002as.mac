*
*         REBMKSEQ
*        TO PRODUCE A SEQUENTIAL FILE FROM A PDS
*        ALL MEMBERS ARE COPIED TO A DS WITH THE SAME LRECL AND
*        BLKSIZE AS THE PDS
*
*
***********************************************************************
*
*
         REGISTER                   SET REGS.
*
*        SET UP SAVE AREAS & CHAIN
*
BEGIN    SUBR  REBMKSEQ
*
*       R3      CONTAINS BLOCKSIZE
*       R6      CONTAINS LRECL
*       R7      CONTAINS OUTPUT DCB ADDRESS
*
*
*
*
         OPEN  (MDIRDCB,(INPUT),DCBMEMB,(INPUT),DCBMESG,(OUTPUT))
*
         USING IHADCB,R8         USE DCB DSECT TO LOOK IF FILES
*
*
         LA    R8,DCBMEMB
         TM    DCBOFLG,DCBOFOPN
         BZ    *+8
         OI    OPENFLAG,X'40'    SET FLAG FOR   OPENED
         LH    R3,DCBLRECL       GET PDS LRECL
         LH    R6,DCBBLKSI      BLOCK SIZE FOR INPUT BUFFER
         MVC   RECFM,DCBRECFM       SAVE RECORD FORM
         TM    RECFM,X'80'        IS IT FIXED
         BZ    VARRECFM   NO ASSUME ITS VARIABLE
         LA    R7,DCBFIXED        USE PUT MOVE DCB
         BC    15,OPENOUT
VARRECFM LA    R7,DCBVARY         USE BSAM WRITE
OPENOUT  OPEN ((R7),OUTPUT)    OPEN OUTPUT FILE
         LR    R8,R7            OPENED SUCCESSFULLY
         TM    DCBOFLG,DCBOFOPN
         BZ    *+8
         OI    OPENFLAG,X'80'    SET FLAG FOR   OPENED
         LA    R8,MDIRDCB
         TM    DCBOFLG,DCBOFOPN
         BZ    *+8
         OI    OPENFLAG,X'20'    SET FLAG FOR   OPENED
         DROP  R8
         TM    OPENFLAG,X'E0'      ANY FAILED OPENS
         BNO   OPENERR
*
BUFFER1  GETMAIN EU,LV=(6),A=BUFFADDR,SP=101    GET INPUT BUFFER
         C     R15,=F'00'
         BH    NOBUFF
*
*
*
         L     R8,=X'FFFFFFFF'   LAST ENTRY SET TO '1' S
*
*        READ A DIRECTORY BLOCK
*
INPUT    READ  MDIRDECB,SF,MDIRDCB,PDSBLK        READ PDS DIRECTORY
*                                             BLOCK
         CHECK MDIRDECB,DSORG=ALL       READ O.K.  ?
         L     R9,=F'2'       INCLUDE BYTS USED FIELD IN COUNT
*        CH    R9,BYTSUSED    DONT PROCESS DIRECTORY BLOCKS IF
*        BH    EODAD          NOT USED
         LA    R11,MEMBLST         USE R11 TO POINT TO EACH MEMBER
         USING MEMBER,R11
NEXTENT  C     R8,NAME     SEE IF ENTRY 11111 END
         BE    EODAD
*
NOJOB    MVC   TTRK,TTR
         FIND  DCBMEMB,TTR0,C       FIND MEMBER USING REL. TRACK
READLOOP L     R2,BUFFADDR       LOAD START ADDRESS OF INPUT BUFFER
         READ  DECBMEMB,SF,DCBMEMB,       READ MEMBER                  X
               (R2)
         CHECK DECBMEMB            SUCCESSFUL READ ?
*
         TM    RECFM,X'80'     VARIABLE OR FIXED RECORD
         BZ    WRITVARY        USE BSAM WRITE FOR VARIABLE RECORDS
*
*        USE PUTS FOR FIXED RECORDS
*
*
         LR    R5,R6                  BUFFER LENGTH
         L     R4,DECBMEMB+16     GET IOB ADDR
         SH    R5,14(R4)          GET LENGTH OF BLOCK READ
         LR    R4,R3     INCR. = LRECL
         AR    R5,R2             END ADDRESS
         SR    R5,R4
WRITFIXD PUT   (R7),(R2)        WRITE LINE
         BXLE  R2,R4,WRITFIXD     LOOP TO PROCEESS NEXT RECORD
         BC    15,READLOOP     NO. CONTINUE READING
WRITVARY WRITE DECBOUT,SF,(R7),(R2)
         CHECK DECBOUT
         BC    15,READLOOP     NO. CONTINUE READING
*
*
*
INCRPOS  MVC   HALF,NUMHALF        ALIGN NO OF HALFWORDS TO FULLWORD
         L     R10,HALFFULL
         N     R10,=F'31'          AND OUT UNWANTED BITS
         AR    R10,R10             CONVERT NO. HALFWORDS TO NO. BYTES
         A     R10,=F'12'          INCR. POINTER TO LOOK AT NEXT MEMBER
         AR    R9,R10
         AR    R11,R10             INCR POINTER BY EXTRA BYTES
         CH    R9,BYTSUSED       ARE ALL ENTRIES READ ?
         BL    NEXTENT           READ NEXT DIRECTORY ENTRY
         DROP  R11
         BC    15,INPUT            GET NEXT DIRECTORY BLOCK
*
READERR  SYNADAF ACSMETH=BPAM
         LR    R6,R1       SAVE ADDRESS OF SYNAD MESSAGE
         PUT   DCBMESG,MESGREA
         BC    15,SYNADMES
VARYERR  SYNADAF ACSMETH=BSAM
         LR    R6,R1       SAVE ADDRESS OF SYNAD MESSAGE
         PUT   DCBMESG,MESGWRI
         BC    15,SYNADMES
FIXDERR  SYNADAF ACSMETH=QSAM
         LR    R6,R1       SAVE ADDRESS OF SYNAD MESSAGE
         PUT   DCBMESG,MESGWRI
SYNADMES LA    R5,MESGSYN      LOAD ADDRESS OF OUTPUT LINE
         MVC   8(77,5),50(6)        MOVE SYNAD MESG TO OUTPUT LINE
         PUT   DCBMESG,MESGSYN
         SYNADRLS
         CLOSE (DCBMESG,)
         ABEND 16
EODAD    CLOSE ((R7),,MDIRDCB,,DCBMEMB,,DCBMESG,)  END OF DATA
         FREEMAIN EU,LV=(6),A=BUFFADDR,SP=101  FREE INPUT BUFFER
         ZR    R15
*        GOODBY  RC=(15)
GOODBY   L     13,4(13)        RECOVER PREVIOUS SAVE AREA
         LM    0,12,20(13)      RESTORE REGISTERS
         L     14,12(13)        GET RETURN ADDRESS
         BR    14                RETURN
NOBUFF   PUT   DCBMESG,MESGBUF
         CLOSE (DCBMESG,)
         ABEND 8      NO BUFFERS SO END
OPENERR  TM    OPENFLAG,X'80'
         BO   CLOSE1
         PUT   DCBMESG,MESGOUT     OUTPUT NOT OPEN
         BC    15,T2
CLOSE1   CLOSE ((R7),)
T2       TM    OPENFLAG,X'60'      FAIL ON MEMBERS
         BO   CLOSE2
         PUT   DCBMESG,MESGPDS     PDS MEMBERS NOT OPEN
         BC    15,T3
CLOSE2   CLOSE (DCBMEMB,)         FAIL ON DIRECTORY?
T3       TM    OPENFLAG,X'40'
         BO   CLOSE4
         PUT   DCBMESG,MESGPDS    PDS DIRECTORY NOT OPEN
         BC    15,CLOSE4
CLOSE3   CLOSE (MDIRDCB,)
CLOSE4   CLOSE (DCBMESG,)
         ABEND 12
***********************************************************************
*
*     DATA AREAS
*
***********************************************************************
*
HALFFULL DS    0F
         DC    X'000000'
HALF     DS    C
*
         DS    0F                       ALIGN TO FULL WORD
PDSBLK   DS    0CL256                 256 BYTES FOR DIRECTORY BLOCK
BYTSUSED DS    H
MEMBLST  DS    CL254                  DIRECTORY ENTRIES
*
         DS    CL65
          DS    0F
BLANK    DC    C' '    BLANK FOR COMPARE
RECFM    DS    C              RECORD FORMAT TEMP STORE
*
*
TTR0     DS    0F
TTRK     DS    XL3
K        DC   X'00'
*
BUFFADDR DS   F               BUFFER ADDRESS
*
*
OPENFLAG DC    X'00'
         LTORG
*
************************************
*
*     ERROR MESSAGES
*
************************************
*
MESGOUT  DC    AL2(MESGOUTL,0),C' ? UNABLE TO OPEN SEQUENTIAL FILE FOR X
               OUTPUT.DDNAME  SYSUT2'
MESGOUTL EQU   *-MESGOUT
*
MESGPDS  DC    AL2(MESGPDSL,0),C' ? UNABLE TO OPEN PDS FOR INPUT.DDNAMEX
                 SYSUT1'
MESGPDSL EQU   *-MESGPDS
*
MESGBUF  DC    AL2(MESGBUFL,0),C' ? UNABLE TO CLAIM INPUT BUFFER'
MESGBUFL EQU   *-MESGBUF
*
MESGREA  DC    AL2(MESGREAL,0),C' ? ERROR READING INPUT PD.DDNAME  SYSUX
               T1'
MESGREAL EQU   *-MESGREA
*
MESGWRI  DC    AL2(MESGWRIL,0),C' ? ERROR WRITING OUTPUT SEQUENTIAL FILX
               E.DDNAME  SYSUT2'
MESGWRIL EQU   *-MESGWRI
*
MESGSYN  DC    AL2(MESGSYNL,0),80C' '
MESGSYNL EQU   *-MESGSYN
*
*
*
*
*    SYS1.MDIR TO READ MEMBER NAMES (USERIDS)
*
MDIRDCB  DCB   DSORG=PO,MACRF=(R),EODAD=EODAD,DDNAME=SYSUT1,RECFM=F,   X
               SYNAD=READERR,LRECL=256,BLKSIZE=256
*
*    SYS1.MDIR TO READ A MEMBER (USER PROFILE)
*
DCBMEMB  DCB   DSORG=PO,MACRF=(R),DDNAME=SYSUT1,                       X
               SYNAD=READERR,EODAD=INCRPOS
*
*    OUTPUT FOR USERIDS & SELCT
*
DCBVARY  DCB   DSORG=PS,MACRF=(W),DDNAME=SYSUT2,SYNAD=VARYERR,         X
               RECFM=VB
DCBFIXED DCB   DSORG=PS,MACRF=(PM),DDNAME=SYSUT2,SYNAD=FIXDERR,        X
               RECFM=FB
*
*     OUTPUT FOR MESSAGES
*
DCBMESG  DCB   DSORG=PS,MACRF=(PM),DDNAME=SYSPRINT,RECFM=VBA,          X
               BLKSIZE=3156
*
*        DSECT TO MAP EACH MEMBER
*
MEMBER   DSECT
NAME     DS    0CL8                       MEMBER NAME
USERID   DS    CL7                        USERID 7 CHARS
         DS    C                          ZERO
TTR      DS    CL3                        TTR INFO IN HEX
NUMHALF  DS    CL1                        NO. OF EXTRA HALFWORDS
*
*
         PRINT NOGEN
         DCBD  DSORG=PO,DEVD=DA
         END
