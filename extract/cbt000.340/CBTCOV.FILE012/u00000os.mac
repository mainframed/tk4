AMM.     TITLE 'RT5018M - PDS BLOCK LISTING UTILITY. - A.MORRISH.'
         LCLA  &A
&A       SETA  20
RT5018M  CSECT
***********************************************************************
*                                                                     *
*  THIS PROGRAMME SCANS A PDS AND COUNTS THE NUMBER OF BLOCKS AND THE *
* NUMBER OF BYTES.FOR EACH MEMBER. THE TTR,OF THE MEMBER AND THE SIZE *
* OF THE LARGEST AND SMALLEST BLOCKS ARE NOTED.                       *
*                                                                     *
* ATTRIBUTES - SERIALLY REUSABLE.                                     *
*                                                                     *
* ACCESS METHODS -  EXCP TO READ THE MEMBER.                          *
*                   BSAM TO READ MEMBER (IF PDS ON MULTIPLE EXTENTS). *
*                   QSAM TO WRITE SYSPRINT.                           *
*                                                                     *
* EXTERNAL ROUTINES - RTPDIRD TO READ THE DIRECTORY.                  *
*                                                                     *
***********************************************************************
         SPACE 1
* REGISTER USAGE.
R0       EQU   0                   WORK REGISTER./ PARAMETER REGISTER.
R1       EQU   1                   WORK REGISTER / PARAMETER REGISTER.
R2       EQU   2                   WORK REGISTER / PARAMETER REGISTER.
RBASE    EQU   3                   BASE REGISTER.
R4       EQU   4                   14
R5       EQU   5                   END OF PAGE.
R6       EQU   6                   CURRENT MEMBER IN BUILD LIST.
R7       EQU   7                   CURRENT MEMBER IN PAGE.
R8       EQU   8                   SAVE AREA POINTER (TO RESTORE R13)
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13                  SAVE AREA POINTER.
R14      EQU   14                  RETURN ADDRESS.
R15      EQU   15                  ENTRY POINT ADDRESS / RETURN CODE.
         EJECT
         BEGIN SAVE,BASE=RBASE     INITIALISE AND DEFINE BASE REGISTER.
         LR    R8,R13              SAVE REGISTER 13.
         SPACE 1
*
*        READ  DIRECTORY.
*
         SPACE 1
         LINK  SF=(E,LINKL),MF=(E,PARMS)     READ DIRECTORY.
         LTR   R15,R15             TEST RETURN CODE.
         BNZ   ERR01               IF NOT ZERO THEN ERROR.
         SPACE 1
*
*        OPEN DATA SETS.
*
         SPACE 1
         OPEN  MF=(E,OPENL)        OPEN SYSLIB AND SYSPRINT.
         L     R1,LIB+68           SET GR1 -> IOB.
         L     R1,24(R1)           SET GR1 -> CHANNEL PROGRAM.
         LA    R0,8                SET GR0 = 8.
         CLI   0(R1),X'06'        )
         BE    *+16               )
         CLI   0(R1),X'86'        ) SCAN FOR READ DATA CCW.
         BE    *+8                )
         BXH   R1,R0,*-16         )
         OI    4(R1),X'10'         SET SKIP DATA TRANSFER.
         SPACE 1
*
*        SET UP HEADER AND OBTAIN STORAGE FOR 1 PAGE.
*
         SPACE 1
         SP    PNO,PNO             CLEAR PAGE NUMBER.
         LH    R5,FCON             SET GR5 = LENGTH REQUIRED FOR PAGE.
         GETMAIN R,LV=(R5)         OBTAIN SPACE.
         ST    R1,PGSTART          STORE START ADDRESS.
         AR    R5,R1               SET GR5 -> END OF PAGE.
         BCTR  R5,R0               DECREMENT GR5 FOR BXLE.
         L     R6,PARMS            SET GR6 -> START OF PARM LIST.
         LA    R6,4(R6)            SET GR6 -> FIRST MEMBER.
         LA    R4,16               SET GR4 = INCREMENT VALUE.
         SPACE 1
*
*        INITIALISE FOR NEW PAGE.
*
         SPACE 1
LOOP3    L     R7,PGSTART          SET GR7 -> START OF PAGE.
         SPACE 1
*
*        FIND MEMBER.
*
         SPACE 1
LOOP1    CLI   0(R6),X'FF'         IS IT END OF DIRECTORY ?
         BE    ENDUP               IF SO THEN GO TO ENDUP
         ST    R6,0(R7)            STORE ADDRESS OF BUILD LIST MEMBER.
         XC    4(10,R7),4(R7)      CLEAR COUNTERS.
         MVI   11(R6),0            CLEAR CONCATENATION BIT.
         L     R0,8(R6)            SET GR0 = TTR.
         S     R0,F256             DECREMENT FOR PREVIOUS RECORD.
         L     R1,LIB+44           SET GR1 -> DEB.
         CLI   16(R1),1            IS IT MULTI-EXTENT PDS ?
         BH    BSAMREAD            IF SO THEN GO TO USE BSAM
         LA    R2,IOB+32           SET GR2 -> MBBCCHHR.
         L     R15,16              SET GR15 -> CVT.
         L     R15,28(R15)         SET GR15 -> CONVERT ROUTINE.
         BALR  R14,R15             LINK TO CONVERT TO MBBCCHHR.
         LR    R13,R8              RESTORE REGISTER 13.
         SPACE 1
*
*        INITIALISE MEMBER ENTRY IN PAGE.
*
         SPACE 1
         ST    R6,0(R7)            STORE ADDRESS OF BUILD LIST MEMBER.
         XC    4(10,R7),4(R7)      CLEAR COUNTERS.
         SPACE 1
*
*        SCAN MEMBER AND INCREMENT COUNTS.
*
         SPACE 1
EXCP     EXCP  IOB                 EXECUTE CHANNEL PROGRAM.
         WAIT  1,ECB=ECB           WAIT FOR COMPLETION.
         SPACE 1
*
*        SCAN TO STORE MEMBER DATA.
*
         SPACE 1
         LA    R12,CTEND           SET GR12 -> FIRST COUNT HALF-WORD.
         L     R11,IOB+8           SET GR11 -> LAST CCW (+1).
         S     R11,F16             SET GR11 -> LAST READ COUNT CCW.
         L     R11,0(R11)          SET GR11 -> LAST AREA EEAD INTO.
         LA    R11,5(R11)          SET GR11 -> LAST COUNT HALF-WORD(-1)
         LA    R10,2               SET GR10 = 2.
         LNR   R10,R10             SET GR10 = -2.
LOOP4    LH    R0,0(R12)           SET GR0 = DATA BYTE COUNT.
         LTR   R0,R0               TEST SIGN OF GR0.
         BZ    SCANEND             IF ZERO THEN EOD REACHED.
         L     R1,4(R7)            SET GR1 = BYTE COUNT.
         AR    R1,R0               INCREMENT BYTE COUNT.
         ST    R1,4(R7)            STORE INCREEENTED BYTE COUNT.
         LH    R1,8(R7)            SET GR1 = BLOCK COUNT.
         LA    R1,1(R1)            INCREMENT BLOCK COUNT.
         STH   R1,8(R7)            STORE INCREMENTED BLOCK COUNT.
         CH    R0,10(R7)           COMPARE LENGTH WITH MAX.
         BNH   *+8                 IF NOT GREATER THEN LEAVE.
         STH   R0,10(R7)           UPDATE MAXIMUM BLOCK LENGTH.
         LH    R1,12(R7)           SET GR1 = MINIMUM BLOCK LENGTH.
         LTR   R1,R1               TEST SIGN OF MINIMUM.
         BZ    *+10                IF ZERO THEN GO TO STORE.
         CR    R0,R1               COMPARE LENGTH WIRH MIN.
         BNL   *+8                 IF NOT LESS THEN LEAVE.
         STH   R0,12(R7)           UPDATE MINIMUM BLOCK LENGTH.
         BXH   R12,R10,LOOP4       LOOP UNTIL ALL PROCESSED.
         MVC   IOB+35(5),IOB+36    ALIGN COUNT FOR NEXT SEARCH.
         CLI   ECB,X'7F'           WAS COMPLETION NORMAL ?
         BE    EXCP                IF SO THEN GO TO REPEAT EXCP.
SCANEND  DS    0H
         SPACE 1
*
*        CHECK FOR COMPLETION OF PAGE OR MEMBER LIST.
*
         SPACE 1
         LA    R6,12(R6)           SET GR6 -> NEXT MEMBER.
         BXLE  R7,R4,LOOP1         LOOP UNTIL PAGE FILLED.
         SPACE 1
*
*        WRITE PAGE.
*
         SPACE 1
ENDUP    PUT   PRT,SKIP            WRITE SKIP TO CHANNEL 1.
         AP    PNO,P1              INCREMENT PAGE NUMBER.
         OI    PNO+1,X'0F'         REMOVE ZONE.
         UNPK  PAGE,PNO            UNPACK PAGE NUMBER.
         PUT   PRT,HDR1            WRITE MAIN HEADER.
         PUT   PRT,HDR2            WRITE SECONDARY HEADER.
         SR    R10,R10             SET GR10 = 0.
         LR    R11,R7              SET GR11 -> CURRENT ENTRY.
         S     R11,PGSTART         SET GR11 = LENGTH OF MEMBERS.
         DR    R10,R4              DIVIDE BY 14 TO GET NUMBER.
         LA    R11,1(R11)          INCREMENT BEFORE SHIFT.
         SRL   R11,1               DIVIDE BY 2 FOR BREAK POINT.
         MR    R10,R4              SET GR11 = OFFSET ADDRESS.
         A     R11,PGSTART         SET GR11 -> FIRST MEMBER IN 2ND COL.
         LR    R10,R11             SET GR10 -> FIRST MEMBER IN 2ND COL.
         L     R2,PGSTART          SET GR2 -> START OF PAGE.
LOOP2    MVI   LINE+1,C' '         BLANK FIRST CHAR OF LINE.
         MVC   LINE+2(119),LINE+1  BLANK LINE.
         CR    R2,R11              COMPARE FOR END OF PAGE.
         BNL   EXIT                IF SO THEN GO TO EXIT.
         L     R12,0(R2)           SET GR12 -> BLDL ENTRY FOR MEMBER.
         MVC   LINE+1(8),0(R12)    STORE MEMBER NAME.
         UNPK  LINE+11(5),8(3,R12) UNPACK RELATIVE TRACK NUMBER.
         UNPK  LINE+16(3),10(2,R12)     UNPACK RECORD NUMBER.
         TR    LINE+11(7),HEXTAB   CONVERT TO PRINTABLE FORMAT.
         MVI   LINE+15,C' '        BLANK OUT UNWANTED BYTE.
         MVI   LINE+18,C' '        BLANK OUT UNWANTED BYTE.
         MVC   LINE+20(6),MASK+3   STORE MASK FOR BLOCKS
         LH    R0,8(R2)            SET GR0 = BLOCK NUMBER.
         CVD   R0,DOUBWD           CONVERT TO DECIMAL.
         ED    LINE+19(7),DOUBWD+5      STORE BLOCK NUMBER.
         MVC   LINE+28(9),MASK     STORE MASK FOR BYTES.
         L     R0,4(R2)            SET GR0 = BYTE NUMBER.
         CVD   R0,DOUBWD           CONVERT TO DECIMAL.
         ED    LINE+27(10),DOUBWD+4     STORE BYTE NUMBER.
         MVC   LINE+39(6),MASK+3   STORE MASK FOR MAX.
         LH    R0,10(R2)           SET GR0 = MAX.
         CVD   R0,DOUBWD           CONVERT TO DECIMAL.
         ED    LINE+38(7),DOUBWD+5      STORE MAX.
         MVC   LINE+47(6),MASK+3   STORE MASK FOR MIN.
         LH    R0,12(R2)           SET GR0 = MIN.
         CVD   R0,DOUBWD           CONVERT TO DECIMAL.
         ED    LINE+46(7),DOUBWD+5      STORE MIN.
         AR    R2,R4               INCREMENT GR2 FOR NEXT MEMBER.
         CR    R10,R7              HAS COLUMN 2 ENDED ?
         BNL   PUT                 IF SO  THEN GO TO WRITE LINE
         L     R12,0(R10)          SET GR12 -> BLDL ENTRY FOR MEMBER.
         MVC   LINE+61(8),0(R12)   STORE MEMBER NAME.
         UNPK  LINE+71(5),8(3,R12) UNPACK RELATIVE TRACK NUMBER.
         UNPK  LINE+76(3),10(2,R12)     UNPACK RECORD NUMBER.
         TR    LINE+71(7),HEXTAB   CONVERT TO PRINTABLE FORMAT.
         MVI   LINE+75,C' '        BLANK OUT UNWANTED BYTE.
         MVI   LINE+78,C' '        BLANK OUT UNWANTED BYTE.
         MVC   LINE+80(6),MASK+3   STORE MASK FOR BLOCKS.
         LH    R0,8(R10)           SET GR0 = BLOCK NUMBER.
         CVD   R0,DOUBWD           CONVERT TO DECIMAL.
         ED    LINE+79(7),DOUBWD+5      STORE BLOCK NUMBER
         MVC   LINE+88(9),MASK     STORE MASK FOR BYTES.
         L     R0,4(R10)           SET GR0 = BYTE NUMBER.
         CVD   R0,DOUBWD           CONVERT TO DECIMAL.
         ED    LINE+87(10),DOUBWD+4     STORE BYTE NUMBER.
         MVC   LINE+99(6),MASK+3   STORE MASK FOR MAX.
         LH    R0,10(R10)          SET GR0 = MAX.
         CVD   R0,DOUBWD           CONVERT TO DECIMAL.
         ED    LINE+98(7),DOUBWD+5      STORE MAX.
         MVC   LINE+107(6),MASK+3  STORE MASK FOR MIN.
         LH    R0,12(R10)          SET GR0 = MIN
         CVD   R0,DOUBWD           CONVERT TO DECIMAL.
         ED    LINE+106(7),DOUBWD+5     STORE MIN.
         AR    R10,R4              INCREMENT GR10 FOR NEXT MEMBER.
PUT      PUT   PRT,LINE            WRITE LINE.
         B     LOOP2               GO TO SET UP NEXT LINE.
         SPACE 1
*
*        END PROGRAM.
*
         SPACE 1
EXIT     CLI   0(R6),X'FF'         IS IT END OF DIRECTORY ?
         BNE   LOOP3               IF NOT THEN GO TO SET UP NEXT PAGE.
         L     R1,PGSTART          SET GR1 -> PAGE AREA.
         LH    R0,FCON             SET GR0 = LENGTH OF PAGE AREA.
         FREEMAIN   R,LV=(0),A=(1) RELEASE DYNAMIC PAGE AREA.
         L     R1,PARMS            SET GR1 -> BUILD LIST AREA.
         LH    R0,PARMS+4          SET GR0 = LENGTH OF BUILD LIST AREA.
         FREEMAIN   R,LV=(0),A=(1) RELEASE DYNAMIC BUILD LIST AREA.
         CLOSE MF=(E,CLOSEL)       CLOSE SYSLIB AND SYSPRINT DATA SETS.
         GOBACK SAVE,RC=0          RETURN.
         EJECT
ERR01    ABEND 1
         SPACE 2
EXLST    DC    0A(0),X'85',AL3(EXLST+4)
         L     R2,16               SET GR2 -> CVT.
         L     R2,0(R2)            SET GR2 -> TCB POINTERS.
         L     R2,4(R2)            SET GR2 -> CURRENT TCB.
         L     R2,0(R2)            SET GR2 -> RB.
         L     R2,28(R2)           SET GR2 -> PREVIOUS RB (190M SVRB).
         L     R4,96+8(R2)         SET GR4 -> GOTTEN CORE (SIC).
         MVC   DSN(44),X'64'(R4)   STORE DSNAME IN HEADER.
         BR    R14                 RETURN.
         SPACE 2
PRTEXIT  DCBEXITS
         EJECT
DOUBWD   DS    D
SAVE     DS    18F
PRT      DCB   DDNAME=SYSPRINT,DSORG=PS,LRECL=121,RECFM=FBM,           *
               BLKSIZE=1089,MACRF=PM,EXLST=PRTEXIT
LIB      DCB   DDNAME=SYSLIB,DSORG=PO,MACRF=R,EXLST=EXLST,             *
               EODAD=SCANEND,RECFM=U,BLKSIZE=32760
OPENL    OPEN  (LIB,,PRT,OUTPUT),MF=L
LINKL    LINK  EP=RTPDIRD,SF=L
PARMS    DC    A(LIB,0,0)
ECB      DC    F'0'
IOB      DC    X'42',A(ECB,0,0,CPROG,LIB,0,0),2A(0)
         DS    H,&A.X              DATA LENGTH AREA.
CTEND    EQU   *-2                 FIRST COUNT HALF-WORD.
CPROG    CCW   X'31',IOB+35,X'40',5
         CCW   X'08',CPROG,0,0
.C1      CCW   X'92',IOB+34+&A,X'40',8
         CCW   X'06',IOB+34+&A,X'70',1
&A       SETA  &A-2
         AIF   (&A NE 0).C1
         ORG   *-4
         DC    X'30'
         ORG
PGSTART  DS    A
CLOSEL   CLOSE (LIB,,PRT),MF=L
F16      DC    F'16'
F256     DC    F'256'
HEXTAB   EQU   *-240
         DC    C'0123456789ABCDEF'
COUNT    DS    CL8
FCON     DC    AL2(16*58*2)
SKIP     DC    X'8B'
HDR1     DC    X'11',CL120'RT5018M LIBRARY BYTE COUNT.  DSNAME='
         ORG   HDR1+37
DSN      DS    CL44
         ORG   HDR1+113
         DC    C'PAGE '
PAGE     DC    C'000'
         ORG
HDR2     DC    X'09',2CL60'  NAME     TT   R   BLKS      BYTES     MAX *
                   MIN'
LINE     DC    X'09',CL120' '
PNO      DC    PL2'0'
P1       DC    P'1'
MASK     DC    X'206B2020206B202120'
         EJECT
BSAMREAD FIND  LIB,8(R6),C         POSITION TO MEMBER.
         MVI   DSN+45,C'*'         SET SLOW LIST INDICATOR.
BSAMLOOP READ  READL,SF,MF=E       READ SYSLIB RECORD.
         CHECK READL               CHECK READ.
         LH    R0,LIB+62           SET GR0 = BLOCKSIZE.
         L     R1,READL+16         SET GR1 -> IOB.
         SH    R0,14(R1)           SET GR0 = SIZE OF BLOCK READ.
         L     R1,4(R7)            SET GR1 = BYTE COUNT.
         AR    R1,R0               INCREMENT BYTE COUNT.
         ST    R1,4(R7)            STORE INCREMENTED BYTE COUNT.
         LH    R1,8(R7)            SET GR1 = BLOCK COUNT.
         LA    R1,1(R1)            INCREMENT BLOCK COUNT.
         STH   R1,8(R7)            STORE INCREMENTED BLOCK COUNT.
         CH    R0,10(R7)           COMPARE LENGTH WITH MAX.
         BNH   *+8                 IF NOT GREATER THEN LEAVE.
         STH   R0,10(R7)           UPDATE MAXIMUM BLOCK LENGTH.
         LH    R1,12(R7)           SET GR1 = MINIMUM BLOCK LENGTH.
         LTR   R1,R1               TEST SIGN OF MINIMUM.
         BZ    *+10                IF ZERO THEN GO TO STORE.
         CR    R0,R1               COMPARE LENGTH WITH MIN.
         BNL   *+8                 IF NOT LESS THEN LEAVE.
         STH   R0,12(R7)           UPDATE MINIMUM BLOCK LENGTH.
         B     BSAMLOOP            GO TO REPEAT READ.
         SPACE 1
         READ  READL,SF,LIB,,32760,MF=L
         END
