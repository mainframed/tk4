         MACRO
&LBL     LNKSQ &IN,&EX,&SPEX,&PR,&BR1,&BR2,&BR3,&ENTRY=SUB
         GBLB  &EQU
         LCLB  &SP
         LCLB  &PRIM
         LCLC  &X
&SP      SETB  (T'&SPEX EQ 'O')
&PRIM    SETB  ('&ENTRY' EQ 'PRIMARY')
&X       SETC  'Q'.'&SYSNDX'
*        SAVE  (14,12),T,*  SAVE CALLERS REGS,ESTABLISH PROGID
         SAVE  (14,12),T,*
*
         BALR  &BR1,0   ESTABLISH
         USING *,&BR1  FIRST BASE REGISTER
         AIF   (T'&BR2 EQ 'O').BREGS
&X.BP1   EQU   *    FIRST BASE POINT ADDR
         L     &BR2,&X.BP2  LOAD SECOND BASE REGISTER
         USING &X.BP1+4096,&BR2  AND TELL COMPILER
         AIF   (T'&BR3 EQ 'O').BREGS
         L     &BR3,&X.BP3  LOAD THIRD BASE REGISTER
         USING &X.BP1+8192,&BR3  AND TELL COMPILER
.BREGS   AIF   (T'&BR2 EQ 'O').NOADCS
         B     &X.ENT
&X.BP2   DC    A(&X.BP1+4096)  2ND BASE POINT ADDRESS
         AIF   (T'&BR3 EQ 'O').BBB
&X.BP3   DC    A(&X.BP1+8192)  3RD BASE POINT ADDRESS
.BBB     ANOP
&X.ENT   EQU   *
.NOADCS  ANOP
         AIF   (&PRIM).XS
         CLI   0(13),X'A0'  ENTRY FROM ASSEM.USER?
         BE    &X.ASM    YES
         LA    0,100  NO,INITIALISE A 100-BYTE
         L     15,=V(IHESADA)  PL/I DSA
         BALR  14,15 FOR THIS SUBROUTINE
         MVI   0(13),X'80'  FLAG IT AS PL/I
         AIF   (T'&PR EQ 'O').NOPARMP
         LR    &PR,1
.NOPARMP B     &IN   ENTRY TO USER FROM PL/I CALLER.
&X.ASM   EQU   *
.XS      ANOP
         LR    14,1  SAVE PARMREG
         LA    0,72 ASSEMBLER,GET A 72-BYTE
*        GETMAIN R,LV=(0)  DYNAMIC SAVE AREA
         GETMAIN R,LV=(0)  DYNAMIC SAVE AREA
*
         MVC   0(4,1),=X'A0010048'   INITIALISE IT,
         ST    13,4(1)  CHAIN SAVE
         ST    1,8(13)   AREAS
         XC    8(64,1),8(1)  ZEROISE REST OF AREA
         LR    13,1 R13 NOW POINTS TO THIS SAVE AREA
         USING SAVEAREA,13
         AIF   (T'&PR EQ 'O').NOPARMA
         LR    &PR,14  RESTORE PARMREG TO USER PARMREG
         AGO   .USER
.NOPARMA LR    1,14  RESTORE PARMREG TO GPR 1
.USER    B     &IN  ENTRY TO USER FROM ASSEM. CALLER
         AIF   (&SP).XT
* ************* ENTRY TO NON-RETURN EXIT ROUTINE **********************
         AIF   (&PRIM).XW
&SPEX    CLI   1(13),1  ASSEM?
         BE    &X.ASX  GO TO ASSEM. EXIT
         L     15,=V(IHESAFC)  INITIATE PL/I GOTO ROUTINE
         BR    15   RETURN TO USER SPECIFIED ADDRESS
&X.ASX   EQU   *
.XX      L     14,4(13)  REPLACE RETURN ADDR
         ST    1,12(14)  IN CALLERS SAVE AREA
.AX1     ANOP
&X.AST   EQU   *
.AX2     ANOP
         LR    1,13  GET SAVE AREA ADDR
         LH    0,2(1)  GET SAVE AREA LENGTH
         L     13,4(1)  RESTORE ADDR OF USERS SAVEAREA
*        FREEMAIN R,LV=(0),A=(1) FREE SAVEAREA
         FREEMAIN R,LV=(0),A=(1) FREE SAVEAREA
*
         L     14,12(13)  RESTORE RETURN REG 14
* N.B. REG 15 NOT RESTORED,USER MUST PLACE RETURN CODE IN IT. *********
         LM    0,12,20(13)  RESTORE OTHER REGS
         BR    14  RETURN TO CALLER
         AIF (&SP).LTORG
         AGO   .XT
.XW      ANOP
&SPEX    EQU   *
         AGO   .XX
.XT      AIF   (&PRIM).XV
&EX      CLI   1(13),1 ASSEM?
         BE    &X.AST TAKE ASSEM EXIT
         L     15,=V(IHESAFA)  FREE DSA
         BR    15  AND RETURN TO CALLER
         AIF   (NOT &SP).LTORG
         AGO   .AX1
.XV      AIF   (NOT &SP).AY
&EX      EQU   *
         AGO   .AX2
.AY      ANOP
&EX      EQU   &X.AST
.LTORG   ANOP
         LTORG
         AIF   (&EQU).FIN
&EQU     SETB  1
* --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- *
SAVEAREA DSECT
         DS    XL1
ASMSW    DS    XL1
         DS    H
         DS    17F
&SYSECT  CSECT
* THE EQUATES BELOW ALLOW YOU TO USE SYMBOLIC REGISTER NOTATIONR0-R15:*
* SYMBOL      REGISTER                                                *
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
* --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- *
.FIN     MEND
         SPACE 4
         MACRO
&LBL     DATIME &SVC=NO,&DATE=NO,&TIME=NO,&TMTYP=BIN,&TESTRGS=NO,      *
               &OTF=HMS,&TDTE=DMY
         LCLC  &X
&X       SETC  '&SYSNDX'
&LBL     DS    0H
         AIF   ('&SVC' EQ 'NO').D1
*        TIME  (TMTYP)
         TIME  &TMTYP
.D1      AIF   ('&DATE' EQ 'NO').T1
         STM   0,1,V&X   SAVE REGISTERS 0 AND 1
         AIF   ('&TESTRGS' EQ 'NO').D2
         LTR   1,1  IS DATE PRESENT ?
         AIF   ('&TIME' EQ 'NO').D3
         BZ    B&X  NO,TEST TIME.
         AGO   .D2
.D3      BZ    Q&X   NO,EXIT
.D2      ANOP
         TM    V&X+5,1   ODD YEAR...
         BO    N&X       YUP,SO NOT LEAP
         CLI   V&X+5,0   YEAR=CENTURY ?
         BE    N&X    NOT A LEAP YEAR
         TM    V&X+5,X'12'   YEAR=MODULO 4 ?
         BM    N&X         NO,NOT A LEAP YEAR
         MVI   T&X+3,29  LEAPYEAR,SO FEB HATH 29
N&X      ZAP   D&X,V&X+6(2)   CONVERT JULIAN DAY
         CVB   0,D&X  TO BINARY
         XR    1,1    TABLE INDEX
L&X      LA    1,2(,1)
         SH    0,T&X-2(1)           SUBTRACT DAYS IN MONTH
         BP    L&X IF REMAINDER POSITIVE,TRY NEXT MONTH
         AH    0,T&X-2(1)    RESTORE TRUE NUMBER OF DAYS
         SRL   1,1   INDEX/2=MONTH NUMBER
         AIF   ('&TDTE' EQ 'FULL').FULLDTE
         CVD   0,D&X       CONVERT DAY TO DECIMAL
         MVO   Z&X.(2),D&X+6(2)   SET UP DAY
         CVD   1,D&X    MONTH TO DECIMAL
         MVO   Z&X+1(2),D&X+6(2)    SET UP MONTH
         MVC   Z&X+2(1),V&X+5    SET UP YEAR
*  Z NOW CONTAINS X'DDMMYY0C'
         LA    1,&DATE ADDRESS DATE OUTPUT AREA
         MVC   0(10,1),E&X
         MVI   6(1),C'/'
         ED    0(10,1),Z&X
         MVI   3(1),C'/'
         MVI   T&X+3,28   RESTORE FEB TO 28
         AGO   .TA
.FULLDTE STH   0,Z&X  SAVE DAY#
         STH   1,Z&X+2 AND MONTH#
         STM   14,15,V2&X SAVE 14 AND 15
         IC    1,FF&X-1(1) APPLY FUDGE FACTOR FOR MONTH
         AR    1,0 AND ADD TO DAY#
         MVI   V&X+4,X'19' ADD CENT FOR A MO
         XC    D&X,D&X CLEAR WORK
         MVO   D&X+5(3),V&X+4(2)
         OI    D&X+7,15
         MVI   V&X+4,0 RESET YEAR - FULL YEAR NOW IN D
         CVB   15,D&X TO BINARY
         CLI   Z&X+3,2 IF MONTH JAN OR FEB
         BH    *+6
         BCTR  15,0 KNOCK 1 OFF
         XR    14,14
         LA    0,3
         D     14,YC&X  FIND CENT
         NR    15,0    CENT MOD 4
         NR    0,14    COMMON YEARS
         SRA   14,2    AND
         AR    15,14    LEAPYEARS
         MH    15,HF&X BY 5
         AR    1,15
         AR    1,0
         XR    0,0
         D     0,HS&X DIVIDE BY 7
         AH    0,HO&X ADD 1 = DAY# 1 TO 7
         LA    15,&DATE GET OUTPUT FIELD
         MVI   0(15),64 BLANK OUT
         MVC   1(29,15),0(15) 30 BYTES
         LA    14,DT&X
         XR    1,1
DL&X     IC    1,0(,14)
         BCT   0,DN&X
         EX    1,FM&X  MOVE DAY WORD IN
         LA    15,1(1,15)
         MVI   0(15),C','
         LH    0,Z&X+2 GET MONTH# 1 TO 12
         LA    15,1(,15)
         LA    14,MT&X TABLE OF MONTH WORDS
ML&X     IC    1,0(,14) MOVE LENGTH
         BCT   0,MN&X GO ROUND TILL AT RIGHT MONTH
         EX    1,FM&X MOVE MONTH WORD IN
         LA    15,1(1,15)
         LH    0,Z&X  DAY #
         CVD   0,D&X
         OI    D&X+7,15 FSIGN
         UNPK  1(2,15),D&X+6(2)
         CLI   1(15),240 BLANK OUT
         BNE   *+8 LEADING
         MVI   1(15),64 ZERO
         CLI   1(15),C'1' IF DATE=10-19
         BE    TH&X       ALL THS
         CLI   2(15),C'1'
         BNE   ND&X
         MVC   3(2,15),ZST&X
         B     YR&X
ND&X     CLI   2(15),C'2'
         BNE   RD&X
         MVC   3(2,15),ZND&X
         B     YR&X
RD&X     CLI   2(15),C'3'
         BNE   TH&X
         MVC   3(2,15),ZRD&X
         B     YR&X
FM&X     MVC   0(*-*,15),1(14)
DN&X     LA    14,2(1,14)
         B     DL&X
MN&X     LA    14,2(1,14)
         B     ML&X
TH&X     MVC   3(2,15),ZTH&X
YR&X     MVC   5(4,15),ZDN&X
         UNPK  D&X.(3),V&X.+5(2)
         MVC   9(2,15),D&X YEAR IN
         LM    14,15,V2&X
         AGO   .TA
.T1      AIF   ('&TIME' EQ 'NO').Q1
         STM   0,1,V&X   SAVE REGISTERS 0 AND 1
         AGO   .TB
.TA      AIF   ('&TIME' EQ 'NO').R1
         L     0,V&X  RESTORE TIME TO REG 0
.TB      AIF   ('&TESTRGS' EQ 'NO').T2
B&X      LTR   0,0  IS TIME PRESENT ?
         BZ    Q&X  NO,EXIT
.T2      AIF   ('&TMTYP' NE 'TU').T3
         SRDL  0,39  CONVERT TIMER UNITS
         D     0,Y&X    TO HUNDREDTHS OF SECONDS.
         XR    0,0
         AGO   .T4
.T3      AIF   ('&TMTYP' NE 'BIN').T5
         SRDL  0,32 SHIFT TIME TO 1
.T4      MH    1,S&X CONVERT TO THOUS
         D     0,M&X  CALCULATE MINUTES
         ST    0,Z&X  SAVE SECS
         XR    0,0
         D     0,H&X  CALCULATE HOURS
         MH    1,C&X   HRS*100
         AR    1,0  ADD MINS
         M     0,F&X  H-M*100000
         AL    1,Z&X  ADD SECS
         CVD   1,D&X  CONVERT TO DECIMAL  (X'000000HHMMSSTHTC')
         MVC   Z&X,D&X+3  Z=X'HHMMSSTH'
         AGO   .T6
.T5      AIF   ('&TMTYP' EQ 'DEC').T5A
         MNOTE 8,'***** TMTYP INVALID - SHOULD BE TU,BIN OR DEC'
.T5A     ST    0,Z&X
.T6      LA    1,&TIME ADDRESS OUTPUT TIME AREA
         AIF   ('&OTF' EQ 'MSH').LNG
         MVC   0(10,1),E&X EDIT TIME
         MVI   3(1),C'.'
         ED    0(10,1),Z&X TIME TO AREA
         AGO   .R1
.LNG     MVC   0(12,1),E&X
         MVI   9(1),C'.'
         ED    0(12,1),Z&X
         MVI   3(1),C','
.R1      ANOP
Q&X      LM    0,1,V&X  RESTORE REGISTERS 0 AND 1
         B     R&X  EXIT ROUND CONSTANTS
*
*        CONSTANTS USED ABOVE
*
D&X      DC    D'0'
V&X      DC    2F'-1' REGISTER SAVEAREA
Z&X      DC    F'-1' WORK AREA
         AIF   ('&TIME' EQ 'NO').C2
         AIF   ('&TMTYP' NE 'TU').C3
Y&X      DC    F'3'   CONSTANT USED IN TIMER UNIT-SECS/100
         AGO   .C4
.C3      AIF   ('&TMTYP' NE 'BIN').C2
.C4      ANOP
M&X      DC    F'60000'
F&X      DC    F'100000'
H&X      DC    F'60'
S&X      DC    H'10'
C&X      DC    H'100'
.C2      AIF   ('&DATE' EQ 'NO').C5
T&X      DC    H'31,28,31,30,31,30,31,31,30,31,30,31'
         AIF   ('&TDTE' NE 'FULL').C6
V2&X     DC    2F'-1' SAVE AREA FOR REGS 14,15
YC&X     DC    F'100'
HS&X     DC    F'7'
HF&X     DC    H'5'
HO&X     DC    H'1'
DT&X     DC    X'5',C'SUNDAY',X'5',C'MONDAY',X'6',C'TUESDAY'
         DC    X'8',C'WEDNESDAY',X'7',C'THURSDAY',X'5',C'FRIDAY'
         DC    X'7',C'SATURDAY'
MT&X     DC    X'6',C'JANUARY',X'7',C'FEBRUARY',X'4',C'MARCH'
         DC    X'4',C'APRIL',X'2',C'MAY',X'3',C'JUNE',X'3',C'JULY'
         DC    X'5',C'AUGUST',X'8',C'SEPTEMBER',X'6',C'OCTOBER'
         DC    X'7',C'NOVEMBER',X'7',C'DECEMBER'
ZST&X    DC    C'ST'
ZND&X    DC    C'ND'
ZRD&X    DC    C'RD'
ZTH&X    DC    C'TH'
ZDN&X    DC    C'.,19'
FF&X     DC    FL1'0,3,2,5,0,3,5,1,4,6,2,4' FUDGE FACTORS
         AGO   .C6
.C5      AIF   ('&TIME' EQ 'NO').C7
.C6      ANOP
E&X      DC    X'4021202221204B202040'
         AIF   ('&OTF' NE 'MSH').C7
         DC    X'2020'
.C7      ANOP
R&X      DS    0H
.Q1      MEND
         SPACE 4
         MACRO
&LBL     PRNTL &Z,&DDN=SYSPRINT,&LRECL=121,&REG=12,                    *
               &HDG=,&SUB1=,&SUB2=,&LCNT=,&PGNM=  DEFAULT LCNT=60
         GBLA  &PR$$LRC
         GBLB  &PR$$PGG
         GBLC  &X,&PR$$REG
         LCLA  &VAR
         AIF   ('&X' EQ 'PR$$').NTFST
         AIF   ('&Z' EQ 'DEFINE').SETX
         AIF   ('&Z' EQ 'PAGE').SETX
         MNOTE 12,'** FIRST PRNTL MACRO IS NOT DEFINE OR PAGE **'
         MEXIT
.NTFST   AIF   ('&Z' NE 'DEFINE').CLSE
         MNOTE 12,'*** DUPLICATE PRNTL DEFINE MACRO ***'
         MEXIT
.SETX    ANOP
&X       SETC  'PR$$'
&PR$$LRC SETA  &LRECL
&PR$$REG SETC  '&REG'
&PR$$PGG SETB ('&PGNM' EQ 'YES')
* --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- *
&X.OPCL  DC    A(&X.DCB)
* PR$$DCB  DCB  DSORG=PS,MACRF=PL,RECFM=FBA,EXLST=PR$$EXLS,           *
         MNOTE *,'DDNAME=&DDN,LRECL=&LRECL'
&X.DCB   DCB   DSORG=PS,DDNAME=&DDN,MACRF=PL,RECFM=FBA,LRECL=&LRECL,   *
               EXLST=&X.EXLS
&X.EXLS  DC    0F'0',X'85',AL3(&X.OPEX)
&X.OPEX  XR    &REG,&REG
         AH    &REG,62(,1)   TEST DCBBLKSI
         BCR   7,14          USER HAS SUPPLIED.
         LH    &REG,82(,1)   NO,SO TAKE LRECL
         STH   &REG,62(,1)   AS BLKSI
         XR    &REG,&REG
         NI    36(1),X'EF'   SET OFF RECFM=B
         BR    14            RETURN
&X.SAVE  DC    F'0'                SAVE AREA FOR USER RETURN ADDRESS
&X.SAV2  DC    F'-1'               SAVE ADDRESS OF USER RETURN DURING
*                                  RECURSION.
&X.SAVB  DC    F'-1'               SAVE ADDR OF CURRENT PRINT BUFFER
&X.CTBL  DC    C'+ 0-'             PERMITTED ASA CONTROL CHARS TO USER
         AIF   ('&Z' EQ 'PAGE').NOH
         AIF   (T'&HDG NE 'C').NOH
&VAR     SETA  L'&HDG-1
         AIF   (&VAR LT &LRECL).HDAD
&VAR     SETA  &LRECL-1
         MNOTE 0,'&HDG LONGER THAN LRECL ( &LRECL ) - TRUNCATED'
.HDAD    ANOP
&X.AHDG  DC    AL1(&VAR)
         DC    AL3(&HDG)
         AIF   (T'&SUB1 NE 'C').NS1
&VAR     SETA  L'&SUB1-1
         AIF   (&VAR LT &LRECL).HSB1
&VAR     SETA  &LRECL-1
         MNOTE 0,'&SUB1 LONGER THAN LRECL ( &LRECL ) - TRUNCATED'
.HSB1    ANOP
&X.ASB1  DC    AL1(&VAR)
         DC    AL3(&SUB1)
         AIF   (T'&SUB2 NE 'C').NS2
&VAR     SETA  L'&SUB2-1
         AIF   (&VAR LT &LRECL).HSB2
&VAR     SETA  &LRECL-1
         MNOTE 0,'&SUB2 LONGER THAN LRECL ( &LRECL ) - TRUNCATED'
.HSB2    ANOP
&X.ASB2  DC    AL1(&VAR)
         DC    AL3(&SUB2)
         AGO   .TLCNT
.NOH     ANOP
&X.AHDG  DC    A(0)                HDG NOT SPECIFIED AT DEFINE TIME
.NS1     ANOP
&X.ASB1  DC    A(0)                SUB1 NOT SPECIFIED AT DEFINE TIME
.NS2     ANOP
&X.ASB2  DC    A(0)                SUB2 NOT SPECIFIED AT DEFINE TIME
.TLCNT   ANOP
&X.LCNT  DC    H'0'                CURRENT LINE COUNTER
         AIF   ('&Z' EQ 'PAGE').DFLC
         AIF   (T'&LCNT NE 'N').DFLC
&X.EOPG  DC    H'&LCNT'            LCNT AS SPECIFIED AT DEFINE TIME
         AGO   .CDGX
.DFLC    ANOP
&X.EOPG  DC    H'60'               LCNT NOT SPECIFIED AT DEFINE TIME
.CDGX    AIF   (NOT &PR$$PGG).NXT
&X.PGNC  DC    C'PAGE',X'402020202120'
&X.PGNM  DC    H'0'
.NXT     ANOP
&X.CLSE  TM    &X.OPCL,128
         BCR   8,14                NOT OPEN,NO-OP
*        CLOSE (,LEAVE),MF=(E,PR$$OPCL)   CLOSE PRINT FILE
         CLOSE (,LEAVE),MF=(E,&X.OPCL)
         MVI   &X.OPCL,0           INDICATE CLOSED
         XR    &REG,&REG           MAKE BUFFER REG
         BCTR  &REG,0              NEGATIVE
         ST    &REG,&X.SAVB        STORE BUFFER REG
         BR    14                  EXIT
&X.PAGE  XC    &X.SAVB,&X.SAVB     HEADUP ONLY
         MVI   &X.FCSW+1,0         SET EXTRA LINE DROPTHRU
&X.LINE  ST    14,&X.SAVE          SAVE USER RETURN ADDR
         TM    &X.OPCL,128         OPEN?
         BO    &X.GBFR             YES,OK
         OI    &X.OPCL,128         MAKE OPEN L-FORM VALID
*        OPEN  (,OUTPUT),MF=(E,PR$$OPCL)  OPEN PRINT FILE
         OPEN  (,OUTPUT),MF=(E,&X.OPCL)  OPEN PRINT FILE
&X.GBFR  L     &REG,&X.SAVB        RESTORE BUFFER AADRESS REG
         LTR   &REG,&REG           IS IT ZERO
         BP    &X.TASA             NORMAL LINE
         MVI   &X.FTSW+1,240       FIRST TIME AND HEADUP DROPTHRU
         B     &X.LOCT             GO STRAIGHT TO LOCATE
&X.LNIN  ST    14,&X.SAVE          RECURSION ENTRY POINT
&X.TASA  XR    0,0
         XR    1,1
         IC    0,0(,&REG)          GET CONTROL
         LA    15,4                SEARCH STOPPER
&X.CCLP  IC    1,&X.CTBL-1(15)     GET TBL ARG
         CR    0,1
         BE    &X.GOTC             MATCH
         BCT   15,&X.CCLP          TRY MORE
         LA    15,2                SING SPACE DEFAULT
         MVI   0(&REG),C' '        CORRECT CC IN BUFFER
&X.GOTC  BCTR  15,0                15=LINES SPACED IN LAST LINE PRINT
         AH    15,&X.LCNT          INCREMENT LINECOUNT
         B     *+8                 BYPASS
&X.STOR  ST    14,&X.SAVE          SECONDARY ENTRY POINT
         STH   15,&X.LCNT          RESTORE LINECT
*        PUT   PR$$DCB             GET NEXT PRINT BUFFER
&X.LOCT  PUT   &X.DCB
         LA    &REG,0(,1)          BUFFER ADDRESS TO USER REG(0 BYTE 0)
         MVI   0(&REG),C' '        BLANK OUT
         MVC   1(&LRECL-1,&REG),0(&REG)  PRINT LINE
&X.FTSW  NOP   &X.NWPG             F/T DROPTHRU TO HEADUP
         CLC   &X.LCNT,&X.EOPG     PAGE OVERFLOW...
         BNL   &X.NWPG             YES,PAGE UP
&X.RETN  ST    &REG,&X.SAVB        SAVE BUFFER ADDRESS REG
         L     14,&X.SAVE          RESTORE USER RETURN ADDRESS
         BR    14                  RETURN TO USER
*        PAGE HEADUP ROUTINES       *
&X.NWPG  MVC   &X.SAV2,&X.SAVE     PREPARE FOR INTERNAL RECURSION
         MVI   &X.FTSW+1,0         RESET F/T AND NEWPAGE DROP
         L     15,&X.AHDG
         BAL   14,&X.INMV          MOVE IN HEADING IF ONE
         MVI   0(&REG),C'1'        DEFAULT NEWPAGE IF NO HDG
         AIF   (NOT &PR$$PGG).WHD
         LH    1,&X.PGNM
         LA    1,1(,1)       INCREMENT PAGE NUMBER
         STH   1,&X.PGNM           STORE NEW PAGE NUMBER
         CVD   1,24(,13)           CONVERT TO DECIMAL
&VAR     SETA  &LRECL-10
         MVC   &VAR.(10,12),&X.PGNC
&VAR     SETA    &VAR+4
         ED    &VAR.(6,12),29(13)     EDIT PAGE NUMBER TO PRINT
.WHD     ANOP
         LA    15,1                RESET LINECOUNT
         BAL   14,&X.STOR          FIRST PARTIAL RECURSE
         L     15,&X.ASB1
         BAL   14,&X.INMV          MOVE IN FIRST SUB-HEAD IF ONE
         B     &X.NORM             NO,SING SPACE PAST HDG
         BAL   14,&X.LNIN          GET NEW PRINT BUFFER
         L     15,&X.ASB2
         BAL   14,&X.INMV          MOVE IN SECOND SUB-HEAD IF ONE
         B     &X.NORM             NO SEC SUB,SPACE OUT PAST HDG(S)
         BAL   14,&X.LNIN          GET NEW PRINT BUFFER
&X.NORM  MVC   &X.SAVE,&X.SAV2     STOP RECURSION
&X.FCSW  B     &X.LNIN+4           NOW GET USERS REQUESTED LINE
         MVI   *-3,240             LINE NOT WANTED-SEAL DROPTHRU
         B     &X.RETN             EXIT
&X.INMV  LTR   15,15               IS THERE A LINE TO PRINT...
         BCR   8,14                NO,TAKE DEFAULT ACTION
         STCM  15,8,*+5            YES,MOVE LENGTH IN
         MVC   0(0,12),0(15)       LINE TO PRINT
         B     4(,14)              EXIT TO 'DONE' POINT
* --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- *
         AIF   ('&Z' EQ 'PAGE').PAGE
         MEXIT
.CLSE    AIF   ('&Z' NE 'CLOSE').LINE
&LBL     BAL   14,&X.CLSE          CLOSE PRINT FILE
         MEXIT
.LINE    AIF   ('&Z' NE 'PAGE').SIMP
.PAGE    ANOP
&LBL     DS    0H
         AIF   ('&PGNM' NE 'RESET').TLCXX
         AIF   (&PR$$PGG).PGRES
         MNOTE 0,'* PAGE NUMBERING NOT SPECIFIED IN DEFINE-IGNORED *'
         AGO   .TLCXX
.PGRES   XC    &X.PGNM,&X.PGNM     RESET PAGE COUNT
.TLCXX   AIF   ('&LCNT' EQ '').LHDG
         LA    14,&LCNT
         STH   14,&X.EOPG
.LHDG    AIF   ('&HDG' EQ '').TSB1
         LA    14,&HDG
         ST    14,&X.AHDG          STORE NEW HEADING ADDRESS
         AIF   (T'&HDG NE 'C').TSB1
&VAR     SETA  L'&HDG-1
         AIF   (&VAR LT &PR$$LRC).ICHD
&VAR     SETA  &PR$$LRC-1
         MNOTE 0,'&HDG LONGER THAN &PR$$LRC (LRECL) - TRUNCATED'
.ICHD    MVI   &X.AHDG,&VAR        AND LENGTH
.TSB1    AIF   ('&SUB1' EQ '').TSB2
         LA    14,&SUB1
         ST    14,&X.ASB1          ADDRESS OF NEW SUBHEAD
         AIF   (T'&SUB1 NE 'C').TSB2
&VAR     SETA  L'&SUB1-1
         AIF   (&VAR LT &PR$$LRC).ICS1
&VAR     SETA  &PR$$LRC-1
         MNOTE 0,'&SUB1 LONGER THAN &PR$$LRC (LRECL) - TRUNCATED'
.ICS1    MVI   &X.ASB1,&VAR        AND LENGTH
.TSB2    AIF   ('&SUB2' EQ '').PGGO
         LA    14,&SUB2
         ST    14,&X.ASB2          ADDRESS OF NEW MINOR SUBHEAD
         AIF   (T'&SUB2 NE 'C').PGGO
&VAR     SETA  L'&SUB2-1
         AIF   (&VAR LT &PR$$LRC).ICS2
&VAR     SETA  &PR$$LRC-1
         MNOTE 0,'&SUB2 LONGER THAN &PR$$LRC (LRECL) - TRUNCATED'
.ICS2    MVI   &X.ASB2,&VAR        AND LENGTH
.PGGO    BAL   14,&X.PAGE          GO PAGE UP
         MEXIT
.SIMP    ANOP
&LBL     BAL   14,&X.LINE          GET PRINT BUFFER
         AIF   (T'&Z NE 'O').MOVE
         MEXIT
.MOVE    AIF   ('&Z'(1,1) EQ '''').QUO
         AIF   ('&Z'(1,1) EQ '(').BRAK
         AIF   (T'&Z EQ 'C').CHAR
.INV     MNOTE 12,'*** ILLEGAL FIRST OPERAND ***'
         MEXIT
.CHAR    ANOP
&VAR     SETA  L'&Z
         AIF   (&VAR LE &PR$$LRC).VAR1
&VAR     SETA  &PR$$LRC
         MNOTE *,'&Z LONGER THAN &PR$$LRC - TRUNCATED'
.VAR1    MVC   0(&VAR,&PR$$REG),&Z  MOVE IN YOUR PRINTLINE
         MEXIT
.QUO     ANOP
&VAR     SETA  K'&Z-2
         AIF   (&VAR LE &PR$$LRC).VAR2
&VAR     SETA  &PR$$LRC
         MNOTE *,'CHARSTRING LONGER THAN &PR$$LRC-TRUNCATED'
.VAR2    MVC   0(&VAR,&PR$$REG),Q&SYSNDX
         B     Z&SYSNDX
Q&SYSNDX DC    C&Z
Z&SYSNDX DS    0H
         MEXIT
.BRAK    AIF   (T'&Z(1) NE 'N').INV
         MVC   0(&Z(1),&PR$$REG),&Z(2)
         MEND
         SPACE 4
         MACRO
         IEFJFCBN
INFMJFCB EQU   *
JFCBDSNM DS    CL44 DATA SET NAME
JFCBELNM DS    CL8 ELEMENT NAME OR VERSION
JFCBTSDM DS    CL1 TASK SCHEDULER - DATA
*                                           MANAGEMENT INTERFACE BYTE
JFCBSYSC DS    CL13 SYSTEM CODE
JFCBLTYP DS    CL1 LABEL TYPE AND USER'S-LABEL
*                                           INDICATOR
         DS    CL1 NOT USED
JFCBFLSQ DS    CL2 FILE SEQUENCE NUMBER
JFCBVLSQ DS    CL2 VOLUME SEQUENCE NUMBER
JFCBMASK DS    CL8 DATA MANAGEMENT MASK
JFCBCRDT DS    CL3 DATA SET CREATION DATE
JFCBXPDT DS    CL3 DATA SET EXPIRATION DATE
JFCBIND1 DS    CL1 INDICATOR BYTE 1
JFCBRLSE EQU   64 BITS 0 AND 1 - EXTERNAL
*                                           STORAGE RELEASE INDICATOR
JFCBLOCT EQU   16 BITS 2 AND 3 - DATA SET
*                                           HAS BEEN LOCATED
JFCBNEWV EQU   4 BITS 4 AND 5 - NEW VOLUME
*                                           ADDED TO DATA SET
JFCBPMEM EQU   1 BITS 6 AND 7 - DATA SET IS
*                                           A MEMBER OF A PODS OR GDG
JFCBIND2 DS    CL1 INDICATOR BYTE 2
JFCBSTAT EQU   64 BITS 0 AND 1 - DATA SET
*                                           STATUS (NEW, OLD, OR MOD)
JFCBSCTY EQU   16 BITS 2 AND 3 - DATA SET
*                                           SECURITY INDICATOR
JFCBUFNO DS    0AL1
JFCBUFRQ DS    AL1
JFCBFTEK DS    0BL1
JFCBFALN DS    BL1
JFCBUFL  DS    AL2
JFCEROPT DS    BL1
JFCTRTCH DS    0BL1
JFCKEYLE DS    0AL1
JFCMODE  DS    0BL1
JFCCODE  DS    0BL1
JFCSTACK DS    0BL1
JFCPRTSP DS BL1
JFCDEN   DS    BL1
JFCLIMCT DS    AL3
JFCDSORG DS    BL2
JFCRECFM DS    BL1
JFCOPTCD DS    BL1
JFCBLKSI DS    AL2
JFCLRECL DS    AL2
JFCNCP   DS    AL1
JFCNTM   DS    AL1
JFCRKP   DS    AL2
JFCCYLOF DS    AL1
JFCDBUFN DS    AL1
JFCINTVL DS    AL1
JFCCPRI  DS    BL1
JFCSOWA  DS    AL2
JFCBNTCS DS    CL1 NUMBER OF OVERFLOW TRACKS
JFCBNVOL DS    CL1 NUMBER OF VOLUME SERIAL
*                                           NUMBERS
JFCBVOLS DS    CL30 VOLUME SERIAL NUMBERS (THE
*                                           FIRST FIVE)
JFCBEXTL DS    CL1 LENGTH OF BLOCK OF EXTRA
*                                           VOLUME SERIAL NUMBERS
*                                           (BEYOND FIVE)
JFCBEXAD DS    CL3 TRACK ADDRESS OF BLOCK OF
*                                           EXTRA VOLUME SERIAL NUMBERS
JFCBPQTY DS    CL3 PRIMARY QUANTITY OF D.A.
*                                           STORAGE REQUIRED
JFCBCTRI DS    CL1 INDICATES WHETHER CYLINDERS
*                                           TRACKS, OR RECORDS ARE
*                                           SPECIFIED IN JFCBPQTY AND
*                                           JFCBSQTY
JFCBSQTY DS    CL3 SECONDARY QUANTITY OF D.A.
*                                           STORAGE REQUIRED
JFCBIND3 DS    CL1 INDICATOR BYTE 3
JFCBCNTG EQU   64 BITS 0 AND 1 - CONTIGUOUS
*                                           STORAGE INDICATOR
JFCBMXIG EQU   16 BITS 2 AND 3 - MAXIMUM
*                                           AVAILABLE EXTENT INDICATOR
JFCBALXI EQU   4 BITS 4 AND 5 - ALL EXTENTS
*                                           INDICATOR
JFCBRNDC EQU   1 BITS 6 AND 7 - ROUND
*                                           CYLINDER INDICATOR
JFCBDQTY DS    CL3 QUANTITY OF D.A. STORAGE
*                                           REQUIRED FOR A DIRECTORY
JFCBSPNM DS    CL3 CORE ADDRESS OF THE JFCB
*                                           WITH WHICH CYLINDERS ARE
*                                           SPLIT
JFCBABST DS    CL2 RELATIVE ADDRESS OF FIRST
*                                           TRACK TO BE ALLOCATED
JFCBSBNM DS    CL3 CORE ADDRESS OF THE JFCB
*                                           FROM WHICH SPACE IS TO BE
*                                           SUBALLOCATED
JFCBDRLH DS    CL3 AVERAGE DATA RECORD LENGTH
JFCBVLCT DS    CL1 VOLUME COUNT
JFCBSPTN DS CL1 NUMBER OF TRACKS PER
*                                           CYLINER TO BE USED BY THIS
*                                           DATA SET WHEN SPLIT
*                                           CYLINDERS IS INDICATED
JFCBLGTH EQU   176 LENGTH OF JFCB
JFCBEND EQU   *
         MEND
*/* $$$$ TPVOLCP4 - TAPE VOLUME COPY - K.H.JENKINSON - 18/4/74
TVOL     TITLE 'TPVOLCP - TAPE VOLUME COPY UTILITY - KHJ '
TPVOLCP  START
         LNKSQ IN,EX,,,2,ENTRY=PRIMARY
INP      DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GL,SYNAD=IERR,RECFM=U,     @
               LRECL=1,EODAD=EOF,EROPT=ACC,EXLST=INEX
OUT      DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PM,EROPT=ACC,RECFM=U,      @
               LRECL=1,SYNAD=OERR,EXLST=EXEX
DW       DC    D'0'
INEX     DC    0F'0',X'87',AL3(INJFCB)
EXEX     DC    0F'0',X'87',AL3(EXJFCB)
INJFCB   DC    44F'0'
EXJFCB   DC    44F'0'
BLKCNT   DC    F'0'
TYPTBL   DC    0F'0'
         DC    C'VOL1',A(VOL)
         DC    C'HDR1',A(TYP1)
         DC    C'HDR2',A(TYP2)
         DC    C'EOV1',A(TYP1)
         DC    C'EOV2',A(TYP2)
         DC    C'EOF1',A(TYP1)
         DC    C'EOF2',A(TYP2)
         DC    C'UHL1',A(UHL)
         DC    C'UHL2',A(UHL)
         DC    C'UHL3',A(UHL)
         DC    C'UHL4',A(UHL)
         DC    C'UHL5',A(UHL)
         DC    C'UHL6',A(UHL)
         DC    C'UHL7',A(UHL)
         DC    C'UHL8',A(UHL)
         DC    C'UTL1',A(UHL)
         DC    C'UTL2',A(UHL)
         DC    C'UTL3',A(UHL)
         DC    C'UTL4',A(UHL)
         DC    C'UTL5',A(UHL)
         DC    C'UTL6',A(UHL)
         DC    C'UTL7',A(UHL)
         DC    C'UTL8',A(UHL)
         DC    F'-1'          STOPPER
OPRM     OPEN  (INP,,OUT,(OUTPUT)),MF=L
SYNSV    DC    3F'0'         SAVE AREA FOR REGS 14-0 IN SYNAD
MINBLK   DC    H'32767'
MAXBLK   DC    H'0'
MAXVAL   DC    H'32767'
FLSQI    DC    H'1'          CURRENT FILE SEQUENCE NO(INPUT).
FLSQO    DC    H'1'          CURRENT FILE SEQUENCE NO(OUTPUT).
         PRNTL DEFINE,PGNM=YES,HDG=HED
WTOM     WTO   'TPVOLCP: 1234567891123456789212345678931234567894123456@
               78951234567896123456789712345678981234567899123456789012@
               3',ROUTCDE=2,DESC=6,MF=L
WTORM    WTOR  'TPVOLCP: REPLY S(KIP BLOCK,C(ANCEL FILE)',RP,1,WECB,   @
               ROUTCDE=1,DESC=2,MF=L
WECB     DC    F'0'
RP       DC    X'40'
SW       DC    X'80'
FSTRD    EQU   128            IF NOT SET OFF BY GET,T/M ONLY
IOCNC    EQU   64             IOERROR,INPUT,CANCEL FILE REQUEST
IOSKP    EQU   32             IOERROR,INPUT,SKIP BLOCK REQUEST
NEWVOL   EQU   16             NEWVOLID ON OUTPUT SL TAPE REQUEST
OUTERR   EQU   8              IOERROR,OUTPUT,TERMINATE JOB
LBLS     EQU   4              PROCESSING LABELS
VLBL     EQU   2              PROCESSING VOL LABEL
VARLEN   EQU   1              DATA APPEARS TO BE VARIABLE LENGTH
HED      DS    0CL121
         DC    C'1DATE'
HDT      DC    CL10' '
         DC    C'TIME'
HTM      DC    CL10' '
         DC    CL22' '
         DC    CL71'LUCAS TAPE VOLUME COPY UTILITY V.3 L.0'
PRF      DC    C'0FILE XXX * -DATA-'
PATT     DC    X'4020202020202120'
NVOLID   DC    CL6' '
IN       L     R1,0(,R1)      ADDR EXECPARM
         LH    R3,0(,R1)      LEN
         LTR   R3,R3          ANY PARM..
         BZ    RDJFCBS        NO
         CH    R3,=H'6'       GT 6 CHARS
         BNH   VOLPRM         OK
         PRNTL '0INVALID PARM IGNORED'
         B     RDJFCBS
VOLPRM   BCTR  R3,0
         STC   R3,*+5
         MVC   NVOLID(*-*),2(R1)
         OI    SW,NEWVOL
RDJFCBS  RDJFCB MF=(E,OPRM)
         DATIME SVC=YES,DATE=HDT,TIME=HTM
         LA    R1,INJFCB
         LH    R8,FLSQI
         BAL   R14,SETJFCB
         STH   R8,FLSQI
         LA    R1,EXJFCB
         LH    R8,FLSQO
         BAL   R14,SETJFCB
         STH   R8,FLSQO
OPFLS    OPEN  MF=(E,OPRM),TYPE=J
         LH    R1,FLSQI
         CVD   R1,DW
         MVC   PRF+5(4),PATT
         ED    PRF+5(4),DW+6
RD       NI    SW,255-IOCNC-IOSKP
         GET   INP
         TM    SW,IOCNC      HAS AN I/O ERROR OCCURRED..
         BO    EOF           TREAT AS END OF FILE
         TM    SW,IOSKP       BLOCK TO BE SKIPPED..
         BO    UPCNT          SKIP WRITE BUT UPDATE BLKCNT
         NI    SW,255-FSTRD   SET OFF T/M ONLY SW
         LA    R3,0(,R1)      SAVE BUFFER ADDRESS
         XR    R4,R4
         LH    R5,INP+(DCBLRECL-IHADCB)
         STH   R5,OUT+(DCBLRECL-IHADCB)
         CH    R5,MINBLK      LRECL LESS THAN CURRENT MIN..
         BNL   *+8            NO
         STH   R5,MINBLK
         CH    R5,MAXBLK      LRECL GT CURRENT MAX..
         BNH   *+8            NO
         STH   R5,MAXBLK      YUP,STORE IT.
         CLC   2(2,R3),=H'0'      COULD THIS BE A BDW..
         BNE   FIXUN              NO
         MVC   DW(2),0(R3)        DOES FIRST HWORD
         CH    R5,DW              EQUAL BLOCK LENGTH..
         BNE   FIXUN              NO,FIXED/UNDEFINED
         OI    SW,VARLEN        YES,IT COULD BE VARIABLE
         B     TCRDIM
FIXUN    NI    SW,255-VARLEN      NO,VERY DOUBTFUL
TCRDIM   CH    R5,=H'80'       CARD-IMAGE..
         BNE   WRITE
TPLN     LA    R7,TYPTBL
TPLP     CLI   0(R7),255      END OF TBL..
         BE    WRITE          DONE
         CLC   0(4,R3),0(R7)  IS IT A STD.LABEL..
         BNE   TRYMOR         NO,TRY ANOTHER
         PRNTL PRF
         MVC   13(4,R12),0(R3)  LABEL TYPE
         OI    SW,LBLS         LABELPROC
         L     R15,4(,R7)     ADDR OF RTN
         BALR  R14,R15        BRANCH TO IT
WRITE    PUT   OUT,(R3)       WRITE BLOCK OUT
         TM    SW,OUTERR      I/O ERROR ON BLOCK WRITE..
         BO    FCLS           SHUT UP SHOP
UPCNT    L     R1,BLKCNT      INCREMENT
         LA    R1,1(,R1)      BLOCK
         ST    R1,BLKCNT      COUNT
         B     RD             READ NEXT BLOCK
TRYMOR   LA    R7,8(,R7)      IX UP TBL
         B     TPLP           TRY ANOTHER TYPE
EOF      TM    SW,FSTRD       T/M ONLY..
         BO    WTM
         TM    SW,LBLS        LABEL PROC
         BZ    DATA           NO
         LA    R15,2
         TM    SW,VLBL        VOLLABEL..
         BZ    *+8
         LA    R15,1(,R15)    3 REX
         NI    SW,255-LBLS-VLBL
         C     R15,BLKCNT     ARE THERE CORRECT # BLKS..
         BE    CLRB           YES,NO NEED FOR DATA INFO.
DATA     PRNTL PRF
         L     R1,BLKCNT
         CVD   R1,DW
         MVC   20(8,R12),PATT
         ED    20(8,R12),DW+4
         MVC   30(20,R12),=C'BLOCKS - LENGTH-MIN.'
         MVC   50(6,R12),PATT
         LH    R1,MINBLK
         CVD   R1,DW
         ED    50(6,R12),DW+5
         MVC   56(5,R12),=C',MAX.'
         MVC   61(6,R12),PATT
         LH    R1,MAXBLK
         CVD   R1,DW
         ED    61(6,R12),DW+5
         MVC   67(6,R12),=C'BYTES.'
         TM    SW,IOCNC
         BZ    *+10
         MVC   80(17,R12),=C'(UP TO I/O ERROR)'
         TM    SW,IOSKP
         BZ    *+10
         MVC   80(25,R12),=C'(INCLUDES SKIPPED BLOCKS)'
         TM    SW,VARLEN      IS VARIABLE LENGTH SUSPECTED..
         BZ    CLRB
         MVC   106(10,R12),=C'*VARIABLE*'
CLRB     XC    BLKCNT,BLKCNT
         NI    SW,255-VARLEN
         XC    MAXBLK,MAXBLK
         MVC   MINBLK,MAXVAL
WTM      TM    SW,IOCNC
         BO    FCLS           EOF FORCED,NOT SENSED
         PRNTL '0*****   T/M   *****'
FCLS     CLOSE (INP,LEAVE,OUT,LEAVE)
         TM    SW,FSTRD+OUTERR
         BNZ   FIN
         OI    SW,FSTRD
         LH    R8,FLSQI
         LA    R8,1(,R8)       INCR FILE SEQ NUM
         STH   R8,INJFCB+(JFCBFLSQ-IHAJFCB)
         STH   R8,FLSQI
         LH    R8,FLSQO
         LA    R8,1(,R8)
         STH   R8,EXJFCB+(JFCBFLSQ-IHAJFCB)
         STH   R8,FLSQO
         B     OPFLS
FIN      PRNTL '0TAPE COPY TERMINATED.'
         PRNTL CLOSE
         XR    R15,R15
         B     EX             EXIT AT END OF PGM
VOL      MVC   21(6,R12),4(R3)
         OI    SW,VLBL
         CLC   41(10,R3),27(R12)  OWNER BLANKS..
         BE    TNWVL          NO NEED TO PRINT
         MVC   28(6,R12),=C'OWNER-'
         MVC   34(10,R12),41(R3)
TNWVL    TM    SW,NEWVOL
         BCR   8,R14          EXIT IF VOL NOT TO BE CHANGED
         MVC   4(6,R3),NVOLID
         MVC   50(13,R12),=C'OUTPUT VOLID='
         MVC   63(6,R12),4(R3)
         BR    R14            END OF VOL LABEL PROCESS
TYP1     MVC   21(17,R12),4(R3)
         MVC   40(4,R12),=C'SER='
         MVC   44(6,R12),21(R3)
         MVC   53(6,R12),PATT
         PACK  DW(3),27(4,R3)
         OI    DW+2,15
         ED    53(6,R12),DW
         MVC   51(4,R12),=C'VOL='
         MVC   62(6,R12),PATT
         PACK  DW(3),31(4,R3)
         OI    DW+2,15
         ED    62(6,R12),DW
         MVC   59(5,R12),=C',SEQ='
         MVC   72(8,R12),PATT
         PACK  DW(4),54(6,R3)
         OI    DW+3,15
         ED    72(8,R12),DW
         MVC   69(5,R12),=C'BLKS='
         LA    R7,89(,R12)
         PACK  DW(4),42(5,R3)
         BAL   R8,CVDT
         MVC   81(9,R12),=C'-CREATED-'
         CLC   48(5,R3),=C'00000'  NO EXPDT..
         BE    SECURE         NO,AVOID PRINT
         LA    R7,106(,R12)
         PACK  DW(4),48(5,R3)
         BAL   R8,CVDT
         MVC   98(9,R12),=C',EXPIRES-'
SECURE   CLI   53(R3),C'1'
         BNE   TRY3
         MVC   117(4,R12),=C'PSWD'
         BR    R14            EXIT
TRY3     CLI   53(R3),C'3'
         BCR   7,R14
         MVC   117(4,R12),=C'RWWR'
         BR    R14
CVDT     OI    DW+3,15
         L     R1,DW
         DATIME DATE=0(,R7)
         BR    R8             RETURN
TYP2     MVC   21(6,R12),=C'RECFM='
         MVC   27(1,R12),4(R3)
         LA    R7,28(,R12)
         CLI   38(R3),64
         BE    TRYCC
         MVC   28(1,R12),38(R3)
         LA    R7,1(,R7)
         CLI   38(R3),C'R'    BS..
         BNE   TRYCC
         MVC   28(2,R12),=C'BS'
         LA    R7,1(,R7)
TRYCC    MVC   0(1,R7),36(R3)
         MVC   37(6,R12),PATT
         OI    41(R12),1
         PACK  DW(3),10(5,R3)
         OI    DW+2,15
         ED    37(6,R12),DW
         MVC   31(7,R12),=C',LRECL='
         MVC   51(6,R12),PATT
         OI    55(R12),1
         PACK  DW(3),5(5,R3)
         OI    DW+2,15
         ED    51(6,R12),DW
         MVC   43(9,R12),=C',BLKSIZE='
         MVC   57(5,R12),=C',DEN='
         MVC   62(1,R12),15(R3)
         CLC   34(2,R3),63(R12) ANY TRTCH..
         BE    JSTP           NO,IGNORE
         MVC   63(7,R12),=C',TRTCH='
         MVC   70(2,R12),34(R3)
JSTP     MVC   81(14,R12),=C'-BY(JOB/STEP)-'
         MVC   96(17,R12),17(R3)
         CLI   16(R3),C'1'    VOLSWITCH..
         BCR   7,R14          NO,EXIT
         MVC   115(6,R12),=C'VSWTCH'
         BR    R14            EXIT
UHL      MVC   21(76,R12),4(R3)
         BR    R14
         USING IHAJFCB,R1
SETJFCB  OI    JFCBMASK+4,128    **FORCE JFCB WRITEBACK**
         CH    R8,JFCBFLSQ
         BNL   *+8
         LH    R8,JFCBFLSQ
         STH   R8,JFCBFLSQ
         MVI   JFCBLTYP,16    FORCE BLP
         XC    JFCBUFNO(4),JFCBUFNO
         XC    JFCRECFM,JFCRECFM
         XC    JFCLRECL,JFCLRECL
         CLC   JFCBLKSI,=H'0'
         BNE   TBFUR
         MVC   JFCBLKSI,=H'10000'
TBFUR    CLC   JFCBLKSI,=H'32760'
         BNH   *+10
         MVC   JFCBLKSI,=H'32760'
         CLI   JFCBUFNO,0  WAS BUFNO SPECIFIED..
         BCR   7,R14       YES,LEAVE AS IS
         CLC   JFCBLKSI,=H'19000' NO,SO IF BLKSI GT 19000
         BH    BUFEQ1
         BR    R14
BUFEQ1   MVI   JFCBUFNO,1     THEN FORCE BUFNO DOWN TO 1
         BR    R14            SO JOB WILL RUN IN 90K
         DROP  R1
IERR     XR    R10,R10
         B     *+8
OERR     LA    R10,1
         SYNADAF ACSMETH=QSAM
         LR    R9,R1          SAVE ADDR SYNADAF BUFFER
         STM   R14,R0,SYNSV   SAVE VOLATILE REGS
         PRNTL PRF
         MVC   12(14,R12),=C'*** I/O ERROR,'
         MVC   26(78,R12),50(R9)
         LTR   R10,R10
         BNZ   OUTER
         L     R8,BLKCNT
         LTR   R8,R8
         BZ    CNCL
         MVC   WTOM+13(103),1(R12)
         WTO   MF=(E,WTOM)
REP      MVI   RP,64
         XC    WECB,WECB
         WTOR  MF=(E,WTORM)
         WAIT  ECB=WECB
         OI    RP,64
         CLI   RP,C'S'
         BE    SKIP
         CLI   RP,C'C'
         BNE   REP
CNCL     OI    SW,IOCNC       CANCEL FILE
         PRNTL PRF
         MVC   12(15,R12),=C'** CANCELLED **'
         B     SRLS
OUTER    OI    SW,OUTERR
         PRNTL PRF
         MVC   12(30,R12),=C'** OUTPUT ERROR TERMINATED JOB.'
         B     SRLS
SKIP     PRNTL PRF
         MVC   12(27,R12),=C'** BLOCK XXXXXXX SKIPPED **'
         CVD   R8,DW
         MVC   20(8,R12),PATT
         ED    20(8,R12),DW+4
         OI    SW,IOSKP
SRLS     LR    R1,R9
         LM    R14,R0,SYNSV   RESTORE VOLATILE REGS
         SYNADRLS
         BR    R14
         LTORG
         DCBD  DSORG=PS,DEVD=TA
IHAJFCB  DSECT
         IEFJFCBN
         END   TPVOLCP
