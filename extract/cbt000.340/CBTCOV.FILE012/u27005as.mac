  TITLE 'MACROS'
         MACRO
         POSPARM &LIST,&RETURN,&PARM
         LCLA  &NUMPRM,&N,&LISTLN
&N       SETA  1
&NUMPRM  SETA  N'&RETURN
&LISTLN  SETA  N'&RETURN*4
         CNOP  0,4                 FORCE FULLWORD ALLIGNMENT
         AIF   ('&PARM' EQ '').SKIP0
         B     *+6+6+4+&LISTLN+4
         AGO   .SKIP01
.SKIP0   ANOP
         B     *+6+6+4+&LISTLN
.SKIP01  ANOP
MOVE&SYSNDX  MVC   2(,7),0(5)      CONTENTS PARM TO RECV ADDR
MOV2&SYSNDX MVC 2(0,1),0(2)         CALLED PGM PARMS
RETN&SYSNDX  DS    0F
.NEXPRM   AIF  (&NUMPRM EQ 0).SKIP
         DC    A(&RETURN(&N))
&N       SETA  &N+1
&NUMPRM  SETA  &NUMPRM-1
         AGO   .NEXPRM
.SKIP    ANOP
         AIF   ('&PARM' EQ '').SKIP1
PPRM&SYSNDX DC A(&PARM)            -> AREA FOR CALLED PGM PARMS
.SKIP1   ANOP
         LA    2,2(&LIST)          ADDR OF LIST
         LH    4,0(&LIST)          LENGTH OF LIST
         LR    5,2                 KEEP START OF PARM
         SR    3,3                 ZERO CURRENT PARM LENGTH
         L     7,RETN&SYSNDX       1ST RETURN ADDRESS
         LA    8,RETN&SYSNDX       ADDR OF LIST OF RETURNING ADDRESSES
         B     FRS1&SYSNDX
NXT1&SYSNDX  EQU *
         LA    3,1(3)              INCR CURRENT LENGTH
NXA1&SYSNDX EQU   *                ENTRY TO INCR TO NEXT CHAR,NOT LNGTH
         LA    2,1(2)              -> NEXT CHAR
         BCT   4,FRS1&SYSNDX
LAST&SYSNDX EQU *
         C     3,=F'0'             NO PARMS SO SKIP MOVE
         BE    END&SYSNDX
         STH   3,0(7)              LENGTH OF PARM
         S     3,=F'1'
         EX    3,MOVE&SYSNDX
         B     END&SYSNDX
FRS1&SYSNDX  EQU   *
         CLI   0(2),C','
         AIF   ('&PARM' EQ '').SKIP2
         BE    STOR&SYSNDX
         CLI   0(2),C'/'           END OF PARM FOR THIS PROGRAM,
*                                    BEGINNING OF PARMS FOR CALLED PGM
.SKIP2   ANOP
         BNE   NXT1&SYSNDX
         AIF   ('&PARM' EQ '').SKIP3
         C     3,=F'0'
         BE    SKIP&SYSNDX
         STH   3,0(7)              LENGTH OF PARM
         S     3,=F'1'             -1 FOR EX INSTR
PGPM&SYSNDX  EX    3,MOVE&SYSNDX
SKIP&SYSNDX  EQU   *
         LA    2,1(2)              MOVE PAST /
         S     4,=F'1'             -1 FOR /
         L     1,PPRM&SYSNDX       R1->AREA FOR CALLED PGM PARMS
         STH   4,0(1)              LENGTH OF PARMS FOR CALLED PGM
         S     4,=F'1'             -1 FOR EX INSTR
         EX    4,MOV2&SYSNDX
         B     END&SYSNDX
.SKIP3   ANOP
STOR&SYSNDX  EQU *
         LTR   3,3                 ANY PARMS TO MOVE
         BNP   RSET&SYSNDX
         STH   3,0(7)
         S     3,=F'1'
         EX    3,MOVE&SYSNDX
RSET&SYSNDX  EQU   *
         LA    8,4(8)              NEXT RECEIVING ADDR ON LIST
         L     7,0(0,8)              TO R7
         LA    5,1(2)              -> NEXT CHAR
         SR    3,3                 ZERO CURRENT LENGTH
*           IS NEXT CHAR '('
         CLI   1(2),C'('
         BNE   NXA1&SYSNDX
         LA    2,2(2)              MOVE PAST , AND (
         LA    5,1(5)              START OF PARM PAST '('
         S     4,=F'2'             MOVE PAST , AND (
         B     FRS2&SYSNDX
NXT2&SYSNDX  EQU   *
         LA    2,1(2)              INCR -> NEXT CHAR
         LA    3,1(3)              CURRENT LENGTH +1
         BCT   4,FRS2&SYSNDX
         WTO   'PTVOLREF - MSG1  INVALID SYNTAX, NO CLOSING )',        C
               ROUTCDE=(11)
         ABEND 1,DUMP
FRS2&SYSNDX  EQU   *
         CLI   0(2),C')'
         BNE   NXT2&SYSNDX
         STH   3,0(7)              LENGTH OF CURRENT PARM
         S     3,=F'1'             MVC INSTR    -1
         EX    3,MOVE&SYSNDX
         LA    2,1(2)              INCR PAST ')'
         S     4,=F'1'
         C     4,=F'0'
         BE    END&SYSNDX
         CLI   0(2),C','           NEXT CHAR MUST BE ',' OR '/'
         BNE   TEST&SYSNDX
         B     RSET&SYSNDX
TEST&SYSNDX  EQU   *
         AIF   ('&PARM' EQ '').SKIP4
         CLI   0(2),C'/'
         BE    PGPM&SYSNDX
.SKIP4   ANOP
         WTO   'PTVOLREF - MSG2  INVALID SYNTAX, NO , AFTER )',        C
               ROUTCDE=(11)
         ABEND 2,DUMP
END&SYSNDX  EQU *
         MEND
         MACRO
         KEYZERO
         STM   14,5,12(13)
         CNOP  0,4
         BAL   15,*+8
         DC    V($SPMODE)
         L     15,0(0,15)          R15->$SPMODE
         LA    5,4(0,0)            4=MODE CODE
         BALR  14,15               LINK TO $SPMODE
         LM    14,5,12(13)
$SPMODE  CSECT
         LA    1,DDCB-$SPMODE
         LA    2,DECB-$SPMODE-8(15)
         SVC   54
         BR    14
PRIVRTN  LPSW  IHB0001C-*(12)      FORCE PROTECT KEY=0 TO RESET RB
         L     2,16(0,0)           R2-> CVT
         L     2,0(0,2)              -> TCB POINTERS
         L     3,4(0,2)              -> CURRENT TCB
         L     2,0(0,3)              -> CURRENT RB
         L     2,28(0,2)             -> PREVIOUS RB
         MVZ   17(1,2),28(3)       PROT KEY ZERO
         OI    17(2),X'01'         PROB PGM MODE &
         EX    0,IHB0001D-PRIVRTN(12,5)
         BR    13
IHB0001D OI    17(2),X'01'         P/P MODE USER KEY
         NI    17(2),X'0F'         P/P MODE ZERO KEY
         NI    17(2),X'FE'         SUP MODE USER KEY
         NI    17(2),X'0E'         SUP MODE ZERO KEY
IHB0001C DC    0D'0',X'FF040000',A(PRIVRTN+4)
DECB     DC    A(DDCB)
EXPTR    DC    A(PRIVRTN)
DDCB     DS    0F
         ORG   DDCB+X'2A'
DCBMACRF DC    X'00'
         ORG   DDCB+X'2C'
DCBDEBAD DC    A(DDEB)
         ORG   DDCB+X'E8'
DCBWKPT2 DC    A(DCWDCBFA-X'3C')
DCWDCBFA DC    X'00'           NOT DISP=SHR
DDEB     DS    0F
         ORG   DDEB+X'18'
DEBPROTG DC    X'00'
         ORG   DDEB+X'2C'
DEBEXPTR DC    A(EXPTR)
&SYSECT  CSECT
         MEND
         MACRO
         KEYUSER
         STM   14,5,12(13)
         CNOP  0,4
         BAL   15,*+8
         DC    V($SPMODE)
         L     15,0(0,15)          R15->$SPMODE
         SR    5,5                 0=MODE CODE
         BALR  14,15               LINK TO $SPMODE
         LM    14,5,12(13)
         MEND
        TITLE 'PROGRAM DESCRIPTION'
PTVOLREF CSECT
*    PTVOLREF
*    FUNCTION OF PROGRAM
*         ASSIGN VOLS ASSOCIATED WITH ONE DDNAME TO ANOTHER DDNAME
*         AND THEN TRANSFERS CONTROL TO ANOTHER PROGRAM.
*         THE VOLS FOR UP TO 5 DDNAMES MAY BE SWITCHED TO 5 OTHER
*         DDNAMES RESPECTIVELY
*
*    PURPOSE
*         THE PROGRAM WAS WRITTEN TO ALLOW CYCLING OF TAPES USED WITH
*         MULTI-VOLUME DATASETS.
*         THE REQUIRMENT WAS TO WRITE THE LATEST GENERATION DATASET ON
*         THE TAPES OCCUPIED BY THE OLDEST GENERATION DATASET. THIS CAN
*         BE DONE USING THE FOLLOWING JCL:
*            //GDGOLD  DD DSN=GDG(-5),DISP=OLD
*            //GDGNEW  DD DSN=GDG(+1),UNIT=AFF=GDGOLD,VOL=REF=*.GDGOLD,
*         THIS WORKS FOR SINGLE VOLUME DATASETS BUT VOL=REF PICKS UP
*         THE LAST VOLUME IN A MULTI-VOLUME DATASET-ALL OTHERS ARE
*         IGNORED. THEN WHEN A SECOND VOLUME IS NEEDED OS CALLS FOR A
*         SCRATCH TAPE. THIS IS NOT STATISFACTORY WHEN SPECIFIC TAPES
*         ARE ALLOCATED TO PARTICULAR GENERATION DATA GROUPS.
*
*    INPUT IS BY PARM FIELD ON THE EXEC STATEMENT WHICH IS CODED
*         PARM='PROGRAM,(DD1IN,DD1OUT),(DD2IN,DD2OUT),..../PARMS'
*
*      WHERE   PROGRAM   IS NAME OF THE PROGRAM TO BE EXCUTED WHEN THE
*                        VOL CHANGES HAVE BEEN MADE.
*
*              DD1IN     IS THE DDNAME FROM WHICH THE VOLS ARE TO BE
*                        TAKEN
*              DD1OUT    IS THE DDNAME TO WHICH THE VOLS ARE TO BE
*                        MOVED
*                        DD2IN & DD2OUT ARE THE NEXT PAIR OF DDNAMES
*                        AND SO ON
*              PARMS     ARE THE PARAMETERS TO BE PASSED TO THE PROGRAM
*                        TO BE EXECUTED
*
*
*    OUPUT    THERE IS NO OUTPUT FROM THE PROGRAM OTHER THAN THE
*             CHANGES TO THE JFCB'S
*
*        THE PROGRAM ABENDS IF ERRORS ARE DETECTED
*
*    THE BASIC PROGRAM IS THAT OF A. MORRISH CONTAINED IN THE GUIDE
*      GOODIES LIBRARY VERSION 2 AS U000002.
*
*      IT HAS BEEN MODIFIED AS FOLLOWS:
*
*      1 THE VOLS FOR UP TO 5 PAIRS OF DDNAMES CAN BE SWITCHED.
*      2 A PROGRAM MUST BE EXECUTED AFTER SWITCHING VOLS AND
*        TRANSFER IS ALWAYS BY XCTL.
*      3 THE EXEC STMT PARAMETER FORMAT HAS BEEN CHANGED
*      4 MACROS FOR GETTING INTO AND OUT OF KEY ZERO WITH RELEASE 21.7
*        HAVE BEEN SUPPLIED
*      5 THE ERROR HANDLING ROUTINES HAVE BEEN CHANGED TO WRITE
*        MESSAGES TO THE PROGRAMMER BY WTO'S WITH ROUTCODE=11
*
*
*    WRITTEN BY  ROSS HINDS                           PHONE 983577
*                COMPUTER CENTRE
*                DEPARTMENT OF POSTS & TELEGRAPHS
*                DUBLIN 14
*
*   JANUARY 1975       VERSION 1.1
*        VERSION 1.1  FIXES BUGS IN VERSION 1.0
*
* REGISTER USAGE
R0       EQU   0                   WORK REGISTER.
R1       EQU   1                   WORK REGISTER / PARAMETER REGISTER.
R2       EQU   2                   WORK REGISTER.
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13                  SAVE AREA POINTER.
R14      EQU   14                  RETURN ADDRESS.
R15      EQU   15                  ENTRY POINT ADDRESS / RETURN CODE.
RBASE    EQU   12
*        BEGIN SAVE,BASE=RBASE     INITIALISE AND DEFINE BASE REGISTER.
         STM   14,12,12(13)
         BALR  RBASE,0
         USING *,RBASE
         LA    15,SAVE
         ST    15,8(13)
         ST    13,4(15)
         LR    13,15
     TITLE 'GET PARMS FROM EXEC STATEMENT'
         ST    R1,ADRPLIST         KEEP ADDR OF PARM LIST FOR XCTL
         L     R1,0(R1)            ADDR OF PARMLIST
         CLC   0(2,R1),BIN0        ANY PARMS ON EXEC STMT
         BNE   SKIP1               YES, BRANCH.
         WTO   'PTVOLREF - MSG3  NO PARAMETERS ON EXEC STMT',          C
               ROUTCDE=11
         ABEND 3,DUMP
SKIP1    EQU   *
         POSPARM 1,(PGMLN,PARM1LN,PARM2LN,PARM3LN,PARM4LN,PARM5LN),    C
               PGMPRMLN
         CLC   PGMLN(2),H8         PGM NAME >8 CHARS
         BH    ERR11               YES BRANCH
         CLC   PARM1LN(2),H17      PARM>2 8 CHAR DDNAMES + ',' I E 17
         BH    ERR12
         CLC   PARM2LN(2),H17      PARM>2 8 CHAR DDNAMES + ',' I E 17
         BH    ERR13
         CLC   PARM3LN(2),H17      PARM>2 8 CHAR DDNAMES + ',' I E 17
         BH    ERR14
         CLC   PARM4LN(2),H17      PARM>2 8 CHAR DDNAMES + ',' I E 17
         BH    ERR15
         CLC   PARM5LN(2),H17      PARM>2 8 CHAR DDNAMES + ',' I E 17
         BH    ERR16
      TITLE 'GET PROTECT KEY ZERO'
*    GET PROTECT KEY ZERO TO ACCESS CVT AND OTHER CONTROL BLOCKS(WITH
*    FETCH PROTECTION) AND TO ISSUE EXCP'S TO READ  AND WRITE JFCB'S
*
         KEYZERO
     TITLE 'LOCATE 1ST DD ENTRY IN TIOT AND STORE FOR SWAPJFCB ROUTINE'
*
         L     R1,16               SET GR1 -> CVT.
         L     R4,12(R1)           SET GR4 -> SYSJOBQE DCB.
         MVC   CONVRTN(4),28(R1)   STORE ADDRESS OF TTR->MBBCCHHR RTNE
         L     R4,44(R4)           SET GR4 -> SYSJOBQE DEB.
         MVC   DEB(48),0(R4)       SAVE DEB.
         LA    R0,DCB              SET GR0 -> DCB.
         ST    R0,DEB+24          STORE DCB POINTER IN DEB.
         L     R1,0(R1)            SET GR1 -> TCB POINTERS.
         L     R1,4(R1)            SET GR1 -> CURRENT TCB.
         MVC   DEB+24(1),28(R1)    SET PROYECTION KEY IN DEB.
         OI    DEB+24,X'0F'        SET DEB IDENTIFIER IN DEB.
         LA    R4,DEB              SET GR4 -> DEB FOR CONVERT.
         L     R1,12(R1)           SET GR1 -> TIOT.
         LA    R1,24(R1)           -> FIRST DD ENTRY IN TIOT
         ST    R1,DDENTRY
     TITLE 'PTVOLREF - MAIN LINE'
         CLC   PARM1LN(2),BIN0     PARAMETER PRESENT
         BE    CALLPGM             NO,BRANCH TO SET UP XCTL
         LA    R1,PARM1LN          SET UP TO ENTER ROUTINE TO MOVE
         BAL   R14,SWAPJFCB         VOLS FROM JFCB1 TO JFCB2
         CLC   PARM2LN(2),BIN0
         BE    CALLPGM
         LA    R1,PARM2LN
         BAL   R14,SWAPJFCB
         CLC   PARM3LN(2),BIN0
         BE    CALLPGM
         LA    R1,PARM3LN
         BAL   R14,SWAPJFCB
         CLC   PARM4LN(2),BIN0
         BE    CALLPGM
         LA    R1,PARM4LN
         BAL   R14,SWAPJFCB
         CLC   PARM5LN(2),BIN0
         BE    CALLPGM
         LA    R1,PARM5LN
         BAL   R14,SWAPJFCB
         B     CALLPGM
CALLPGM  EQU   *
         KEYUSER
         L     R1,ADRPLIST         RESTORE PARM LIST ADR
         L     R2,0(R1)            R2->PARM LIST FOR PTVOLREF
         MVC   0(2,R2),PGMPRMLN    CALLED PGM PARM LNTH TO 1ST 1/2 WRD
         LH    R3,0(R2)            LENGTH OF PARM TO MOVE BY EX INSTR
         LTR   R3,R3               ZERO LENGTH FLD  - I.E. NO PARM
         BZ    SKIP2               YES,BRANCH
         S     R3,=F'1'            -1 FOR EX INSTR
         EX    R3,MOVEPARM         CALLED PGM PARMS TO PTVOLREF PRM FLD
SKIP2    EQU   *
         L     R13,4(R13)          -> PREVIOUS SAVE AREA
         LM    R14,R11,12(R13)     RESTORE REGS
         XCTL  12,EPLOC=PROGRAM
    TITLE  'SUBROUTINE - CHANGE JFCB'
*
*
* ON ENTRY THIS ROUTINE EXPECTS R1-> 2 DDNAMES SEPARATED BY A ,
*                               'DDENTRY' HAS ADDR 1ST DD ENTRY IN TIOT
*  ON RETURN THE VOLS OF 1ST JFCB WILL HAVE BEEN WRITTEN  TO
*        THE JFCB OF THE SECOND ONE
*
*    FOLLOWING REGS ARE ALTERED IN THIS ROUTINE
*          0,1,2,4,5,6,7,9,10,11,15
*
SWAPJFCB EQU   *
         POSPARM R1,(DD1LN,DD2LN)
         LA    R10,8(0)
         CH    R10,DD1LN
         BL    ERR10               DDNAME TOO LONG
         CH    R10,DD2LN
         BL    ERR10               DDNAME TOO LONG
         MVC   UT1(8),DD1
         MVC   UT2(8),DD2
         MVC   DD1LN(10),BLANKS
         MVC   DD2LN(10),BLANKS
         ST    R14,SAVERG14        R14 STORED TO RESTORE AT END OF RTNE
         L     R1,DDENTRY
         LA    R4,DEB              -> DEB FOR CONVERT
         L     R5,CONVRTN          ADDR TTR->MBBCCHHR ROUTINE
         SR    R0,R0               SET GR0 = 0.
TIOTLOOP IC    R0,0(R1)            SET GR0 = LENGTH OF DD ENTRY.
         CLC   UT1(8),4(R1)        COMPARE FOR SYSUT1 NAME.
         BNE   *+20                IF NOT THEN GO TO TEST SYSUT2.
         OC    TTR1(3),TTR1        TEST FOR PREVIOUS FIND.
         BNZ   *+10                IF PREVIOUS FIND THEN USE FIRST.
         MVC   TTR1(3),12(R1)      STORE TTR OF JFCB.
         CLC   UT2(8),4(R1)        COMPARE FOR SYSUT2 NAME.
         BNE   *+20                IF NOT THEN GO TO TEST NEXT.
         OC    TTR2(3),TTR2        TEST FOR PREVIOUS FIND.
         BNZ   *+10                IF PREVIOUS FIND THEN USE FIRST.
         MVC   TTR2(3),12(R1)      STORE TTR OF JFCB.
         OC    TTR1(3),TTR1        TEST FOR SYSUT1 FOUND.
         BZ    *+14                IF NOT THEN GO TO SCAN NEXT.
         OC    TTR2(3),TTR2        TEST FOR SYSUT2 FOUND.
         BNZ   TTRFND              IF SO THEN END SCAN.
         BXH   R1,R0,TIOTLOOP      LOOP UNTIL FOUND OR TIOT EXHAUSTED.
         B     ERR02               GO TO ERROR ROUTINE.
         SPACE 1
*
*        SET UP EXCP TO READ SYSUT1 JFCB.
*
         SPACE 1
TTRFND   L     R0,TTR1             SET GR0 = TTR OF JFCB.
         LR    R1,R4               SET GR1 -> DEB.
         LA    R2,IOB1+32          SET GR2 -> MBBCCHHR AREA.
         LR    R15,R5              SET GR15 -> CONVERT ROUTINE.
         LR    R6,R13              SAVE GR13 IN NON-VOLATILE REGISTER.
         LR    R7,R12              SAVE R12 IN NON-VOLATILE REG
         BALR  R14,R15             LINK TO CONVERSION ROUTINE.
*    THE CONVERSION ROUTINE IS PART OF SVC 18, WHICH IS RESIDENT
*    REGISTER USAGE IS AS FOLLOWS:
*
*        REGISTER    ENTRY                                 EXIT
*         0          ACTUAL TTRN                           DESTROYED
*         1          DEB ADDRESS                           TRANSPARENT
*         2          ADDR OF 8 BYTE AREA FOR MBBCCHHR      TRANSPARENT
*         3-8        IGNORED                               TRANSPARENT
*         9-13       IGNORED                               DESTROYED
*         14         RETURN ADDRESS                        TRANSPARENT
*         15         ENTRY ADDRESS                         ERROR CODE
         LR    R13,R6              RESTORE GR13.
         LR    R12,R7              RESTORE R12
         SPACE 1
*
*        EXECUTE CHANNEL PROGRAM.
*
         SPACE 1
         EXCP  IOB1               EXECUTE CHANNEL PROGRAM.
         SPACE 1
*
*        SET UP EXCP TO READ AND RE-WRITE SYSUT2 JFCB.
*
         SPACE 1
         L     R0,TTR2             SET GR0 = TTR OF JFCB.
         LR    R1,R4               SET GR1 -> DEB.
         LA    R2,IOB2+32          SET GR2 -> MBBCCHHR AREA.
         LR    R15,R5              SET GR15 -> CONVERT ROUTINE.
         BALR  R14,R15             LINK TO CONVERST ROUTINE.
         LR    R13,R6              RESTORE GR13.
         LR    R12,R7              RESTORE R12
         WAIT  1,ECB=ECB           WAIT FOR COMPLETION.
         CLI   ECB,X'7F'           IS READ GOOD ?
         BNE   ERR04               IF NOT THEN ERROR.
         SPACE 1
*
*        READ SYSUT2 JFCB.
*
         SPACE 1
         EXCP  IOB2               EXECUTE CHANNEL PROGRAM.
         WAIT  1,ECB=ECB           WAIT FOR COMPLETION.
         CLI   ECB,X'7F'           CHECK FOR VALIDITY.
         BNE   ERR04               IF NOT THEN ERROR.
         SPACE 1
*
*        REWRITE SYSUT2 JFCB.
*
         SPACE 1
         MVC   JFCB2+117(31),JFCB+117   SET VOLUME SERIAL NUMBERS.
         MVC   JFCB2+149(3),JFCB+149    SET ADDRESS OF JFCB EXTENSION.
         LA    R0,CP2A             SET GR0 -> WRITE CHANNEL PROGRAM.
         ST    R0,IOB2+16          STORE CHANNEL PROG ADDRESS IN IOB.
         EXCP  IOB2                REWRUTE SYSUT2 JFCB.
         WAIT  1,ECB=ECB           WAIT FOR COMPLETION.
         LA    R0,CP2              SET GR0 -> READ CHANNEL PROGRAM.
         ST    R0,IOB2+16          RESET -> JFCB READ CHANNEL PROGRAM
         CLI   ECB,X'7F'           CHECK FOR VALIDITY.
         BNE   ERR04               IF NOT THEN ERROR.
         XC    TTR1(4),TTR1        ZERO FOR NEXT TIME
         XC    TTR2(4),TTR2        ZERO FOR NEXT TIME
*
*        SET UP FOR LINK TO REQUIRED PROGRAM.
*
         L     R14,SAVERG14        RESTORE R14 FOR BRANCH ADDR
         BR    R14
  TITLE  'ERROR ROUTINES'
ERR02    EQU   *
         WTO   'PTVOLREF - MSG5  DDNAME NOT FOUND',ROUTCDE=11
         ABEND 5,DUMP
ERR04    EQU   *
         WTO   'PTVOLREF - MSG6  EXCP FAILED,ECB^=X"7F"',ROUTCDE=11
         ABEND 6,DUMP
ERR10    EQU   *
         WTO   'PTVOLREF - MSG4  DDNAME TOO LONG',ROUTCDE=11
         ABEND 4,DUMP
ERR11    EQU   *
         WTO   'PTVOLREF - MSG11  PROGRAM NAME IS LONGER THAN 8 CHARS',C
               ROUTCDE=11
         ABEND 11,DUMP
ERR12    EQU   *
         WTO   'PTVOLREF - MSG12  1ST DDNAME PAIR TOO LONG',ROUTCDE=11
         ABEND 12,DUMP
ERR13    EQU   *
         WTO   'PTVOLREF - MSG13  2ND DDNAME PAIR TOO LONG',ROUTCDE=11
         ABEND 13,DUMP
ERR14    EQU   *
         WTO   'PTVOLREF - MSG14  3RD DDNAME PAIR TOO LONG',ROUTCDE=11
         ABEND 14,DUMP
ERR15    EQU   *
         WTO   'PTVOLREF - MSG15  4TH DDNAME PAIR TOO LONG',ROUTCDE=11
         ABEND 15,DUMP
ERR16    EQU   *
         WTO   'PTVOLREF - MSG16  5TH DDNAME PAIR TOO LONG',ROUTCDE=11
         ABEND 16,DUMP
MOVEPARM MVC   2(0,R2),PGMPRM      CALLED PGM PARMS TO PTVOLREF PRM FLD
  TITLE  'CONSTANTS'
SAVE     DS    18F
UT1      DC    CL8'SYSUT1'
UT2      DC    CL8'SYSUT2'
ECB      DC    F'0'
TTR1     DC    F'0'
TTR2     DC    F'0'
IOB1     DC    X'42',A(ECB,0,0,CP1,DCB,0,0),2A(0)
IOB2     DC    X'42',A(ECB,0,0,CP2,DCB,0,0),2A(0)
CP1      CCW   X'31',IOB1+35,X'40',5
         CCW   X'08',CP1,0,0
         CCW   X'06',JFCB,0,176
CP2      CCW   X'31',IOB2+35,X'40',5
         CCW   X'08',CP2,0,0
         CCW   X'06',JFCB2,0,176
CP2A     CCW   X'31',IOB2+35,X'40',5
         CCW   X'08',CP2A,0,0
         CCW   X'05',JFCB2,0,176
         SPACE 1
JFCB     DS    44F
DCB      EQU   *-40
         DC    H'0',X'8000',A(DEB),X'12',23X'0'
DEB      DS    12F                 DATA EXTENT BLOCK FOR SYSJOBQE.
JFCB2    DS    44F
DDNAMES  DS    0H
DD1LN    DC    H'0'
DD1      DC    CL8' '
DD2LN    DC    H'0'
DD2      DC    CL8' '
BLANKS   DC    H'0'
         DC    CL8' '
PGMLN    DC    H'0'
PROGRAM  DC    CL8' '
PARM1LN  DC    H'0'
PARM1    DC    CL17' '
PARM2LN  DC    H'0'
PARM2    DC    CL17' '
PARM3LN  DC    H'0'
PARM3    DC    CL17' '
PARM4LN  DC    H'0'
PARM4    DC    CL17' '
PARM5LN  DC    H'0'
PARM5    DC    CL17' '
DDENTRY  DC    A(0)
BIN0     DC    H'0'
ADRPLIST DC    A(0)                PARM LIST ADR
PGMPRMLN DC    H'0'
PGMPRM   DC    CL100' '
CONVRTN  DC    A(0)
SAVERG14 DC    A(0)
H17      DC    H'17'
H8       DC    H'8'
         END
