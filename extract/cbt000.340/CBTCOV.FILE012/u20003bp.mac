         /*  PRODUCE FREQUENCY REPORT ON O/S ACTIVITY */
 ANALYS:  PROC OPTIONS(MAIN);
         %INCLUDE HABEND;       /* THIS CALLS IN AN ON ERROR BLOCK   */
          DCL INPUT FILE RECORD;
          DCL OUTPUT FILE RECORD;
          DCL FRIG CHAR(1),
          BLDLBIT BIT(1) DEF FRIG;
 DCL      INAREA    CHAR(20);
          DCL 1 IN UNALIGNED DEF INAREA,
                2 RECTYP CHAR(1),
                2 TCBID CHAR(1),
                2 SVCNO CHAR(1),
                2 SPARE1 CHAR(1),
                2 PGM CHAR(8),
                2 COUNT FIXED BIN(31);
 DCL      TAB1 CHAR(16000);
         DCL   TAB1A (1000) CHAR (16) DEF TAB1;
          DCL   1 TAB11(1000) UNALIGNED DEF TAB1,
                2 RECTYP CHAR(1),
                2 TCBID CHAR(1),
                2 SVCNO CHAR(1),
                2 SPARE1 CHAR(1),
                2 PGM CHAR(8),
                2 COUNT FIXED BIN(31);
 DCL      TAB2 CHAR(16000);
         DCL   TAB2A (1000) CHAR (16) DEF TAB1;
          DCL   1 TAB21(1000) UNALIGNED DEF TAB2,
                2 RECTYP CHAR(1),
                2 TCBID CHAR(1),
                2 SVCNO CHAR(1),
                2 SPARE1 CHAR(1),
                2 PGM CHAR(8),
                2 COUNT FIXED BIN(31);
          DCL   OUTAR CHAR(133) INIT(' ') STATIC;
          DCL  HEAD1 CHAR(133) INIT('1                             T R A
  N S I E N T    M O D U L E    A C T I V I T Y
                  PAGE      ') STATIC;
         DCL HEAD2 CHAR(133) STATIC INIT('0  TOTAL ELAPSED TIME IS');
          DCL HEAD3 CHAR(133)  INIT('-
            S V C             L I N K            L O A D            X C
 T L          A T T A C H   ') STATIC;
          DCL HEAD4 CHAR (133) INIT(' MODULE     DESCRIPTION
 VIA   REQ   IND  CUM     REQ   IND  CUM     REQ   IND  CUM     REQ   IN
 D  CUM     REQ   IND  CUM  ') STATIC;
          DCL HEAD5 CHAR(133)  INIT('  NAME
 BLDL  FREQ   %    %      FREQ   %    %      FREQ   %    %      FREQ   %
     %      FREQ   %    %   ') STATIC;
         DCL BLDL CHAR(1) DEF OUTAR POS(37);
         DCL HDTM CHAR(9) DEF HEAD2 POS(26);
         DCL TOTTM CHAR(9) STATIC INIT('   .  .  ');
         DCL HPIC PIC'ZZ9' DEF TOTTM;
         DCL MPIC PIC'99' DEF TOTTM POS(5);
         DCL SPIC PIC'99' DEF TOTTM POS(8);
         DCL  WK FIXED BIN(31) STATIC;
          DCL   MAX FIXED BIN(31) STATIC;
          DCL COUNT FIXED BIN(31) STATIC;
          DCL   MODULE CHAR(8) STATIC;
          DCL   BLANK CHAR(8) STATIC;
          DCL   LINCNT FIXED(3) INIT(60) STATIC;
          DCL   SKIP CHAR(1) DEF OUTAR POS(1);
          DCL   ACCUM (5) FIXED BIN(31) STATIC;
          DCL   PGCNT FIXED(3) INIT(0) STATIC;
          DCL   PAGE PIC'ZZ9' DEF HEAD1 POS(129);
          DCL   PRTMOD CHAR(8) DEF OUTAR POS(2);
          DCL   1 PRTFREQ(5) DEF OUTAR POS(38),
                2 P1 PIC'ZZZZZZ9',
                2 P2 PIC'ZZZ9.9',
                2 P3 PIC'ZZZ9.9';
          DCL   CODE CHAR(1) STATIC;
          DCL   TOTS(5) FIXED BIN(31) STATIC;
         DCL (I,J,K,L) FIXED BIN(31) STATIC;
         DCL RUNTIME FIXED BIN(31) STATIC INIT(0);
         DCL E FIXED BIN(31) STATIC INIT(1);
         DCL EXCPS CHAR(480) STATIC INIT(' ');
         DCL 1 EXCP (40) UNALIGNED DEF EXCPS,
               2 ADDD CHAR(8),
               2 COUNT FIXED BIN(31);
         DCL CHANS (7) CHAR(1) STATIC INIT('0','1','2','3','4','5','6');
         DCL EXCPTOT (7) FIXED BIN(31);
         EXCPTOT(*) = 0;
         DCL PCHAN CHAR(8) DEF OUTAR POS(10);
         DCL PEXCP (7) PIC'ZZZZZZZZZ9' DEF OUTAR POS(20);
         DCL EXCPHD CHAR(133) STATIC INIT('1         DEV ADDR      CHAN
 0    CHAN 1    CHAN 2    CHAN 3    CHAN 4    CHAN 5    CHAN 6');
         DCL D FIXED BIN(31) STATIC;
         DCL   DESCRID CHAR(8) DEF DESCAREA;
         DCL   DESCRDES CHAR(20) DEF DESCAREA POS(9);
         DCL DESCR FILE RECORD;
         DCL 1 DESCRTAB(100),
         2 ID CHAR(8),
          2 DESC CHAR(20);
         DCL DESCNUM FIXED BIN(31) STATIC;
         DCL PDESC CHAR(20) DEF OUTAR POS(12);
         DCL DESCAREA CHAR(80) STATIC;
         OPEN FILE(DESCR) INPUT;
         ON ENDFILE(DESCR) GOTO EODESC;
         DO D = 1 TO 100;
         READ FILE(DESCR) INTO(DESCAREA);
         DESCRTAB.ID(D) = DESCRID;
         DESCRTAB.DESC(D) = DESCRDES;
         END;
 EODESC: CLOSE FILE(DESCR);
         DESCNUM = D-1;
          ON ENDFILE(INPUT) GO TO EOINP;
          OPEN FILE(INPUT) INPUT,
                FILE(OUTPUT) OUTPUT;
          J = 1;
          COUNT = 0;
          TOTS(*) = 0;
          ACCUM(*) = 0;
          MAX = 0;
          TAB1A(*) = LOW(16);
          TAB2A(*) = LOW(16);
1         DO I = 1 TO 1000;
         /*  READ INPUT FILE           */
         /*  SELECT REQUIRED RECORD TYPES */
         /*  COMPUTE TOTALS            */
         /*  COUNT INPUT RECORDS       */
         /*  ALLOW FOR 1000 RECORDS    */
-READ:    READ FILE(INPUT) INTO(INAREA);
         IF IN.RECTYP = '1' THEN GOTO RT1;
         IF IN.RECTYP = '2' THEN GOTO RT2;
         IF IN.RECTYP = '3' THEN GOTO RT3;
         IF IN.RECTYP = '9' THEN GOTO RT9;
          GO TO READ;
 /* NOTE MULTI-PUNCHED COLS FOR SVCNO  */
-RT1:    IF IN.SVCNO = '§' THEN DO;
               L = 2;
               GOTO ADDTOTS;
               END;
0        IF IN.SVCNO = '©' THEN DO;
               L = 3;
               GOTO ADDTOTS;
               END;
0        IF IN.SVCNO = '' THEN DO;
               L = 4;
               GOTO ADDTOTS;
               END;
0        IF IN.SVCNO = 'Å' THEN DO;
               L = 5;
               GOTO ADDTOTS;
               END;
         GOTO READ;
-RT2:    L = 1;
         GOTO ADDTOTS;
-RT3:    EXCP.ADDD(E) = IN.PGM;
         EXCP.COUNT(E) = IN.COUNT;
         E = E + 1;
         GOTO READ;
-RT9:    RUNTIME=RUNTIME+IN.COUNT;
         GOTO READ;
-ADDTOTS: TOTS(L) = TOTS(L) + IN.COUNT;
 ENDTOTS: TAB11(I) = IN;
          COUNT = COUNT + 1;
          END;
-         DISPLAY ('TABLE OVERFLOW');
          CODE = '1';
          GO TO DISP;
1EOINP: HPIC = RUNTIME/3600;
         MPIC = MOD(RUNTIME,3600) / 60;
         SPIC = MOD(RUNTIME,60);
         HDTM = TOTTM;
 LOOPY:  DO I = 1 TO COUNT;
0        /*  GET HIGHEST FREQUENCY     */
          IF TAB11.COUNT(I) <= MAX
                THEN GO TO ENDIT;
          MAX = TAB11.COUNT(I);
          K = I;
 ENDIT:   END;
0         IF MAX = 0
                THEN GO TO EOSORT;
-        /* EXTRACT ALL ENTRIES WITH SAME MODULE NAME AS HIGHEST /*
         /*  FREQUENCY                 */
0         TAB21(J) = TAB11(K);
          MODULE = TAB21.PGM(J);
          J = J + 1;
          TAB1A(K) = LOW(16);
          DO I = 1 TO COUNT;
          IF TAB11.PGM(I) ^= MODULE
                THEN GO TO ENDMOD;
          TAB21(J) = TAB11(I);
          J = J + 1;
          TAB1A(I) = LOW(16);
 ENDMOD:  END;
          MAX = 0;
         GOTO LOOPY;
1        /*  ALL ENTRIES ARE NOW SORTED INTO FREQUENCY ORDER */
 EOSORT:  I = 1;
-START:  COUNT = COUNT - 1;
-        IF TAB21.RECTYP(I) = '2' THEN DO;
               J = 1;
               GOTO PRINTIT;
               END;
0        IF TAB21.SVCNO(I) = '§' THEN DO;
               J = 2;
               GOTO PRINTIT;
               END;
0        IF TAB21.SVCNO(I) = '©' THEN DO;
               J = 3;
               GOTO PRINTIT;
               END;
0        IF TAB21.SVCNO(I) = '' THEN DO;
               J = 4;
               GOTO PRINTIT;
               END;
0        IF TAB21.SVCNO(I) = 'Å' THEN DO;
               J = 5;
               GOTO PRINTIT;
               END;
          SIGNAL ERROR;
1PRINTIT: PRTMOD = TAB21.PGM(I);
          P1(J) = TAB21.COUNT(I);
          WK = TAB21.COUNT(I) * 1000;
          P2(J) = WK / TOTS(J);
          ACCUM(J) = ACCUM(J) + TAB21.COUNT(I);
          WK = ACCUM(J) * 1000;
          P3(J) = WK / TOTS(J);
          FRIG = TAB21.TCBID(I);
          IF BLDLBIT THEN BLDL= '*';
         DO D = 1 TO DESCNUM;
               IF DESCRTAB.ID(D) = PRTMOD THEN DO;
               PDESC = DESCRTAB.DESC(D);
               GOTO GOTDESC;
               END;
         END;
 GOTDESC:
          CALL WRITE;
-TABINCR: I = I + 1;
          IF COUNT = 0
                THEN GO TO TOTALUP;
          GO TO START;
1        /*  COMPUTE TOTALS AND PRINT  */
 TOTALUP: SKIP = '-';
          PRTMOD = 'TOTALS  ';
          DO I = 1 TO 5;
          P1(I) = TOTS(I);
          P2(I) = 1000;
          P3(I) = 1000;
          END;
          WRITE FILE(OUTPUT) FROM(OUTAR);
         OUTAR = '-';
         WRITE FILE(OUTPUT) FROM(EXCPHD);
 EXCPPRT:      DO I = 1 TO 40;
         IF SUBSTR(ADDD(I),1,1) = ' ' THEN GOTO EXCPOUT;
               DO J = 1 TO 7;
               IF SUBSTR(ADDD(I),1,1) = CHANS(J) THEN DO;
                         PCHAN = EXCP.ADDD(I);
                           PEXCP(J) = EXCP.COUNT(I);
                           EXCPTOT(J) = EXCPTOT(J) + EXCP.COUNT(I);
                           WRITE FILE(OUTPUT) FROM(OUTAR);
                           OUTAR = '0';
                           END;
                     END;
               END;
 EXCPOUT:      OUTAR = '-  TOTAL EXCPS';
         DO I = 1 TO 7;
               PEXCP(I) = EXCPTOT(I);
               END;
         WRITE FILE(OUTPUT) FROM(OUTAR);
          CLOSE FILE(INPUT),
                FILE(OUTPUT);
          CODE = '0';
 DISP:    DISPLAY ('END CODE'××CODE);
1        /*  WRITE PROC                                  */
-WRITE:  PROC;
          IF LINCNT < 46 THEN GOTO NOHEAD;
          PGCNT = PGCNT + 1;
          PAGE = PGCNT;
          WRITE FILE(OUTPUT) FROM(HEAD1);
          WRITE FILE(OUTPUT) FROM(HEAD2);
          WRITE FILE(OUTPUT) FROM(HEAD3);
          WRITE FILE(OUTPUT) FROM(HEAD4);
          WRITE FILE(OUTPUT) FROM(HEAD5);
          LINCNT = 0;
          SKIP = '-';
 NOHEAD: WRITE FILE(OUTPUT) FROM(OUTAR);
          LINCNT = LINCNT + 1;
          OUTAR = ' ';
          END WRITE;
          END;
