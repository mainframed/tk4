//JCLPRCSR JOB (1580,5),'JCL PROCESSOR',CLASS=N
// EXEC ASMFCL,L=H
//SYSLIB DD
// DD DSN=JEA.MACLIB,DISP=SHR
// DD DSN=SYS1.AMODGEN,DISP=SHR
// DD DSN=SYS1.AMACLIB,DISP=SHR
**********************************************************************
*                    U T 5 0 9                                        *
*                                                                     *
*        THIS ROUTINE IS DESIGNED TO FACILITATE THE ALTERATION OF     *
*        JCL PROCEDURES BY SELECTING EACH MEMBER OF A JCL LIBRARY     *
*        IN TURN AND DELIMITING EACH CONTROL CARD INTO A WORK AREA    *
*        READY FOR PROCESSING BY A PREDETERMINED ROUTINE              *
*        DESIGNED FOR THE PURPOSE.                                    *
*          ON ENTRY TO THE SUBROUTINE, EACH CARD WILL HAVE BEEN       *
*        STRIPPED OF ALL COMMENTS AND CONTINUATION CARDS HAVE BEEN    *
*        COPIED ON TO THE END OF THE FIRST CARD TO PRODUCE A STRING   *
*        OF JCL TEXT WHICH IS EASY TO PROCESS. AFTER IT HAS BEEN      *
*        PROCESSED, EACH CARD IS RECONVERTED INTO ITS ORIGINAL FORM.  *
*                                                                     *
*                                                                     *
**********************************************************************
         EJECT
***********************************************************************
*        DSECTS USED IN THIS MODULE                                   *
***********************************************************************
         SPACE 2
DSCB     DSECT
         IECSDSL1 (1)
JFCB     DSECT
         IEFJFCBN
         EJECT
***********************************************************************
*        EQUATES USED IN THIS MODULE                                  *
***********************************************************************
         SPACE 2
VERBCOL  EQU   15                  START COLUMN FOR JCL VERB
OPND1COL EQU   20                  START COLUMN FOR FIRST CARD OPERANDS
OPCOLUMN EQU   15                  START OF OPERAND DATA ON CARD
CMNTCOL  EQU   35                  NORMAL START ADDRESS FOR COMMENTS
OPND1MAX EQU   70-OPND1COL         MAXIMUM LENGTH OPERAND ON FIRST CARD
MAXOPLEN EQU   70-OPCOLUMN         MAXIMUM LENGTH OF DATA PER CARD
CHNFLDS  EQU   8                   LENGTH OF EXTRA CHAINING FIELDS
NOCHKNO  EQU   2                   NO OF CTL FIELDS NOT CHKD FOR LENGTH
         EJECT
**********************************************************************
*        INITIAL PROGRAM ENTRY HOUSEKEEPING
**********************************************************************
         SPACE 2
UT509    ZCSECT 13,12
         MVI   FLAG,0              INITIALISE LOGIC FLAG
         MVI   BUFFER,C' '         USED AS SIGNAL THAT IT IS EMPTY
         EJECT
***********************************************************************
*        FIRST ESTABLISH THE FILE FORMATS IN USE                      *
***********************************************************************
         SPACE 2
TESTFILE DS    0H
         LA    REG2,INPUT          LOAD ADDRESS OF FIRST DCB
         BAL   REG11,VTOCTST       GO EXAMINE THE FILE
         LTR   REG15,REG15         TEST RETURN CODE
         BNZ   *+8                 PARTITIONED. DONT SET FLAG
         OI    FLAG,INSEQ          INDICATE SEQUENTIAL INPUT
         LA    REG2,OUTPUT         LOAD ADDRESS OF OUTPUT DCB
         BAL   REG11,VTOCTST       GO EXAMINE THE FILE
         LTR   REG15,REG15         TEST RETURN CODE
         BNZ   *+8                 PARTITIONED. DONT SET FLAG
         OI    FLAG,OUTSEQ         OUTPUT FILE IS SEQUENTIAL
         EJECT
**********************************************************************
*        MAIN LOGIC                                                   *
**********************************************************************
         SPACE 2
MAIN     DS    0H
         ZAP   LINENO,=P'0'        INITIALISE THE LINE NUMBER REGISTER
         BAL   REG11,OPEN          GO OPEN THE FILES
LOOPMAIN BAL   REG11,GETBUF        OBTAIN A COMPLETE BUFFER
         BAL   REG11,PROCSSIT      GO PROCESS THE CARD
         BAL   REG11,TESTLNTH      GO TEST LENGTH OF EACH LINE
         BAL   REG11,PUTBUF        REBUILD THE JCL CARDS
         TM    FLAG,EOF            END OF FILE REACHED ?
         BZ    LOOPMAIN            NO. LOOP FOR ALL INPUT
MAINSTOP DS    0H
         BAL   REG11,CLOSE         CLOSE THE FILES
         EJECT
**********************************************************************
*        COMMON PROGRAM EXIT                                          *
**********************************************************************
         SPACE 2
EXITPGM  DS    0H
         ZRETURN RC=0
         EJECT
***********************************************************************
*        FIND OUT WHAT USER ROUTINES ARE NEEDED AND CALL THEM         *
***********************************************************************
         SPACE 2
PROCSSIT DS    0H
         CLC   VERB,PROC           IS THS A PROC STATEMENT
         BE    DOPROC              YES.
         CLC   VERB,EXEC           IS THIS AN EXEC STATEMENT
         BE    DOEXEC              YES.
         CLC   VERB,DD             DD STATEMENT PERHAPS ?
         BE    DODD                YEA
         SPACE 2
DOERROR  L     REG10,$ERROR        LOAD ADDRESS OF ERROR ROUTINE
         B     CALLIT              GO ISSUE CALL TO THE ROUTINE
         SPACE 2
DOPROC   L     REG10,$PROC         LOAD ADDRESS OF THE ROUTINE
         B     CALLIT              GO ISSUE CALL TO THE ROUTINE
         SPACE 2
DOEXEC   L     REG10,$EXEC         LOAD ADDRESS OF THE ROUTINE
         B     CALLIT              GO ISSUE CALL TO THE ROUTINE
         SPACE 2
DODD     L     REG10,$DD           LOAD ADDRESS OF THE ROUTINE
         B     CALLIT              GO ISSUE CALL TO THE ROUTINE
         SPACE 2
PROC     DC    CL8'PROC'
EXEC     DC    CL8'EXEC'
DD       DC    CL8'DD'
$ERROR   DC    V($ERROR)
$PROC    DC    V($PROC)
$EXEC    DC    V($EXEC)
$DD      DC    V($DD)
$ENDPROC DC    V($ENDPROC)
$ENDEXEC DC    V($ENDEXEC)
         EJECT
***********************************************************************
*        TEST FOR THE PRESCENCE OF A USER EXIT AND TAKE IT            *
***********************************************************************
         SPACE 2
CALLIT   DS    0H
         ST    REG11,CALLRG11      SAVE LINK REGISTER
CALLITX  XC    SCANPTR,SCANPTR     CLEAR THE SCAN POINTER
         LTR   REG15,REG10         IS THERE AN EXIT LINK-EDITTED
         BZ    CALLEXIT            NO. RETURN TO CALLER
         LA    REG1,$PRMAREA       LOAD ADDRESS OF PARM AREA
         BALR  REG14,REG15         YES. BRANCH TO IT
         OI    FLAG2,0             EXECUTED. SETS BITS IN FLAG2
         EX    REG15,*-4           SET RETURN CODE IN FLAG
         TM    FLAG2,FETCHIT       HAS HE DATA TO INSERT ?
         BZ    CALLEXIT            NO. RETURN TO CALLER
         NI    FLAG2,255-FETCHIT   RESET FLAG
         BAL   REG11,STOWCARD      GO SAVE CARD ON CHAIN
         B     CALLITX             GO CALL HIM AGAIN
CALLEXIT L     REG11,CALLRG11      RELOAD LINK REGISTER
         BR    REG11               RETURN TO CALLER
         SPACE 2
CALLRG11 DS    F                   SAVE AREA FOR LINK REGISTER
         EJECT
***********************************************************************
*        EXAMINE A FILE TO SEE IF IT IS SEQUENTIAL OR PARTITIONED     *
***********************************************************************
         SPACE 2
VTOCTST  DS    0H
         RDJFCB ((2))              READ IN JOB FILE CONTROL BLOCK
         LA    REG3,JFCBAREA       LOAD ADDRESS OF JFCB
         USING JFCB,REG3           ADDRESSABILITY FOR JFCB
         TM    JFCBTSDM,JFCSDS     SPOOL FILE ?
         BO    VTOCSEQ             YES. GO SET SEQUENTIAL RET CODE
         CLI   JFCBELNM,C'0'       TEST FIRST BYTE MEM NAME/GEN INDEX
         BNL   VTOCSEQ             MUST BE INDEX NUMBER. TREAT AS SEQ
         CLI   JFCBELNM,C' '       ANY MEMBER NAME CODED IN JCL ?
         BNE   VTOCSEQ             YES. TREAT IT AS SEQUENTIAL
         TM    JFCBIND2,JFCNEW     IS THIS A NEW DATA SET
         BNO   VTOCRD              NO. GO LOOK FOR DSCB
         NC    JFCBDQTY,JFCBDQTY   IS A DIR BLK VALUE CODED IN SPACE
         BZ    VTOCSEQ             NO. TREAT AS SEQUENTIAL
         B     VTOCPART            YES. TREAT AS PARTITIONED
VTOCRD   MVC   VOLUME,JFCBVOLS     MOVE VOLUME SERIAL TO WORK AREA
         OBTAIN CAMLST             READ IN DSCB
         LA    REG3,DSCBAREA       LOAD ADDRESS OF DSCB
         USING DS1FMTID,REG3       ADDRESSABILITY FOR DATA PORTION
         TM    DS1DSORG,DS1PO      TEST FOR PARYITIONED DATA SET
DS1PO    EQU   X'02'               REPLACE WHEN DSECT SEEN
         BZ    VTOCSEQ             NO. SIGNAL SEQUENTIAL FILE
VTOCPART LA    REG15,4             SIGNAL PARTITIONED FILE
         BR    REG11               RETURN TO CALLER
VTOCSEQ  LA    REG15,0             SIGNAL SEQUENTIAL FILE
         BR    REG11               RETURN TO CALLER
         SPACE 2
         DS    0D                  ALIGNMENT
DSCBAREA DS    CL148               WORK AREA FOR DSCB
JFCBAREA DS    CL176               WORK AREA FOR JFCB
EXLST    DC    X'87'               DCB EXIT LIST
         DC    AL3(JFCBAREA)       AREA INTO WHICH JFCB IS READ
VOLUME   DS    CL6                 SAVE AREA FOR VOL SERIAL
CAMLST   CAMLST SEARCH,JFCBAREA,VOLUME,DSCBAREA
         EJECT
***********************************************************************
*        INITIALISE THE FILES                                         *
***********************************************************************
         SPACE 2
OPEN     DS    0H
         ST    REG11,OPNREG11      SAVE LINK REGISTER
         TM    FLAG,INSEQ          INPUT FILE SEQUENTIAL
         BO    OPENIN              YES. GO OPEN FILE NORMALLY
         OPEN  (INPUTPO)           OPEN PARTITIONED DCB FOR INPUT
         BAL   REG11,SETUPIN       SET UP INPUT IO OPERATIONS
         LA    REG1,GETNXT         LOAD ADDRESS OF PO ROUTINE
         STCM  REG1,7,INPUT+49     STORE ADDRESS PSEUDO ACCESS METHOD
         B     TESTOUT             GO OPEN OUTPUT FILE
OPENIN   OPEN  (INPUT)             OPEN THE INPUT FILE
TESTOUT  DS    0H
         TM    FLAG,OUTSEQ         OUTPUT FILE SEQUENTIAL ?
         BO    OPENOUT             YES. OPEN THE FILE NORMALLY
         OPEN  (OUTPUTPO,OUTPUT)   OPEN THE PARTITIONED OUTPUT FILE
         BAL   REG11,SETUPOUT      INITIALISE OUTPUT IO OPERATIONS
         LA    REG1,PUTNXT         LOAD ADDRESS OF OUTPUT ROUTINE
         STCM  REG1,7,OUTPUT+49    STORE ADDRESS OF PSEUDO ACCESS METH
         B     OPENEXIT            EXIT FROM THE ROUTINE
OPENOUT  OPEN  (OUTPUT,OUTPUT)     OPEN THE OUTPUT SEQUENTIAL FILE
OPENEXIT DS    0H
         L     REG11,OPNREG11      RELOAD LINK REGISTER
         BR    REG11               RETURN TO CALLER
         SPACE 2
OPNREG11 DS    F                   SAVE AREA FOR LINK REGISTER
         EJECT
***********************************************************************
*        INITIALISE IO OPERATIONS FOR INPUT PDS                       *
***********************************************************************
         SPACE 2
SETUPIN  DS    0H
         ST    REG11,SETINR11      SAVE LINK REGISTER
         GETBUF INPUTPO,9          LOAD ADDRESS FIRST BUFFER
         ST    REG9,DECBIN1+12     SAVE THIS ADDRESS IN DECB
         GETBUF INPUTPO,9          LOAD ADDRESS SECOND BUFFER
         ST    REG9,DECBIN2+12     SAVE THIS ADDRESS IN BUFFER
         BAL   REG11,GETMEM        LOCATE NEXT MEMBER NAME
         LTR   REG15,REG15         END OF MEMBERS FOUND
         BNZ   EODAD               NO INPUT DATA. TERMINATE
         L     REG11,SETINR11      RELOAD LINK REGISTER
         BR    REG11               RETURN TO CALLER
         SPACE 2
SETINR11 DS    F                   SAVE AREA FOR LINK REGISTER
         PRINT NOGEN
         READ  DECBIN1,SF,INPUTPO,0,MF=L
         DC    A(DECBIN2)          CHAIN FIELD
         READ  DECBIN2,SF,INPUTPO,0,MF=L
         DC    A(DECBIN1)          CHAIN FIELD
MEMNAME  DS    CL8                 NAME OF CURRENT MEMBER
TTR      DS    CL3                 TTR OF CURRENT MEMBER
         DC    X'00'               PADDING FOR TTR FIELD
INPUTPO  DCB   DDNAME=SYSUT1,DSORG=PO,MACRF=R,LRECL=80,BUFNO=2,NCP=2,  X
               EODAD=EODAD
         PRINT GEN
         EJECT
***********************************************************************
*        INITIALISE IO OPERATIONS FOR OUTPUT                          *
***********************************************************************
         SPACE 2
SETUPOUT DS    0H
         GETBUF OUTPUTPO,9         OBTAIN FIRST OUTPUT BUFFER
         ST    REG9,DECBOUT2+12    SAVE ADDRESS OF THIS BUFFER
         GETBUF OUTPUTPO,9         OBTAIN ADDRESS OF SECOND BUFFER
         ST    REG9,DECBOUT1+12    SAVE ADDRESS OF THIS BUFFER
         MVI   DECBOUT2+3,X'FF'    SHOW THAT NO CHECK IS NEEDED
         LR    REG10,REG9          LOAD ADDRESS OF START OF BUFFER
         AH    REG10,OUTPUTPO+X'3E' LOAD ADDRESS OF END OF BUFFER
         SH    REG9,OUTPUTPO+X'52' FUDGE FIRST ADDITION BY PUTNXT
         LA    REG8,DECBOUT1       LOAD ADDRESS OF FIRST WRITE DECB
         STM   REG8,REG10,OUTPUT+X'44' SAVE IN PSEUDO DCB
         LH    REG9,OUTPUTPO+X'3E' LOAD LENGTH OF A BLOCK
         STH   REG9,OUTPUT+X'3E'   SAVE LENGTH IN PSEUDO DCB
         BR    REG11               RETURN TO CALLER
         SPACE 2
         PRINT NOGEN
         WRITE DECBOUT1,SF,OUTPUTPO,,'S',MF=L
         DC    A(DECBOUT2)         CHAIN FIELD
         WRITE DECBOUT2,SF,OUTPUTPO,,'S',MF=L
         DC    A(DECBOUT1)         CHAIN FIELD
OUTPUTPO DCB   DDNAME=SYSUT2,DSORG=PO,MACRF=(W),LRECL=80,NCP=2,BUFNO=2
         PRINT GEN
         EJECT
***********************************************************************
*        TERMINATION ROUTINE FOR EACH MEMBER/DATA SET                 *
***********************************************************************
         SPACE 2
CLOSE    DS    0H
         ST    REG11,CLSREG11      SAVE LINK REGISTER
         NI    FLAG,255-EOF        RESET END OF FILE FLAG
         TM    FLAG,ALLSEQ         ALL FILES SEQUENTIAL ?
         BO    CLOSE2              YES. GO CLOSE BOTH FILES
         TM    FLAG,OUTSEQ         OUTPUT FILE SEQUENTIAL ?
         BO    NOSTOWIT            YES JUMP OVER LINK TO STOW ROUTINE
         MVC   MEMNAME,MEMNAMEX    IF INPUT=PS. GIVES CORRECT NAME
         BAL   REG11,STOWMEM       STOW NEW MEMBER IN PDS
NOSTOWIT TM    FLAG,INSEQ          INPUT SEQUENTIAL ?
         BO    CLOSE2              YES. END OF PROCESSING CLOSE FILES
         BAL   REG11,GETMEM        NO.  GO SELECT NEXT MEMBER
         LTR   REG15,REG15         END OF MEMBERS FOUND ?
         BNZ   CLOSE2              YES. END OF PROCESSING CLOSE FILES
         L     REG11,OPNREG11      LOAD ADDRESS START PROCESSING RTNS
         BR    REG11               RETURN TO PROCESS NEXT MEMBER
CLOSE2   DS    0H                  CLOSE BOTH FILES USED
         LA    REG9,INPUT          LOAD ADDRESS INPUT SEAUENTIAL FILE
         TM    48(REG9),X'10'      FILE OPEN ?
         BO    CLS2OUT             YES. GO FIND CORRECT OUTPUT FILE
         LA    REG9,INPUTPO        LOAD ADDRESS OF INPUT PARTITIONED
CLS2OUT  LA    REG10,OUTPUT        LOAD ADDRESS OF OUTPUT SEQUENTIAL
         TM    48(REG10),X'10'     FILE OPEN ?
         BO    CLS2DOIT            YES. GO ISSUE CLOSE
         LA    REG10,OUTPUTPO      LOAD ADDRESS PARTITIONED FILE
CLS2DOIT CLOSE ((9),,(10))         CLOSE ALL FILES USED
         L     REG11,CLSREG11      RELOAD LINK REGISTER
         BR    REG11               RETURN TO CALLER
         SPACE 2
CLSREG11 DS    F                   SAVE AREA FOR LINK REGISTER
         EJECT
***********************************************************************
*        OBTAIN THE NEXT INPUT RECORD                                 *
***********************************************************************
         SPACE 2
GETNXT   DS    0H
PUTNXT   DS    0H
         ST    REG14,0(REG1)       SAVE LINK REGISTER
         STM   REG2,REG12,4(REG1)  SAVE ALL USER REGISTERS
         LR    REG2,REG1           SAVE ADDRESS OF DCB
         LM    REG7,REG10,X'44'(REG1) LOAD CONTROL FIELDS
         AR    REG8,REG10          STEP TO NEXT RECORD
         CR    REG8,REG9           TEST FOR END OF BUFFER
         BL    GETNEXIT            NO. RETURN TO CALLER
         LR    REG1,REG7           LOAD PARAMETER REGISTER 1
         L     REG15,8(REG1)       LOAD ADDRESS OF PO DCB
         L     REG15,48(REG15)     LOAD ADDRESS OF READ/WRITE RTN
         BALR  REG14,REG15         LINK TO READ/WRITE ROUTINE
         L     REG7,20(REG7)       LOAD ADDRESS NEXT DECB
         LR    REG1,REG7           LOAD PARAMETER REGISTER
         CLI   3(REG1),X'FF'       SHOULD A CHECK BE ISSUED ?
         MVI   3(REG1),X'00'       (RESET NO-CHECK FLAG)
         BE    OUTSTART            NO. BYPASS CALL TO CHECK ROUTINE
         CHECK (1)                 WAIT FOR IO COMPLETION
OUTSTART L     REG8,12(REG7)       LOAD ADDRESS OF START OF BUFFER
         LR    REG9,REG8           LOAD SECOND PARAMETER REGISTER
         AH    REG9,X'3E'(REG2)    CALCULATE ADDRESS OF END OF BLOCK
         CLI   5(REG1),X'20'       WAS THAT I/O IN OR OUT
         BE    *+12                OUT. STEP OVER SHORT BLOCK ROUTINE
         L     REG1,16(REG1)       LOAD ADDRESS OF IOB
         SH    REG9,14(REG1)       SUBTRACT RESIDUAL BYTE COUNT
GETNEXIT STM   REG7,REG10,X'44'(REG2) STORE NEW PARAMETERS IN P-DCB
         LR    REG1,REG8           LOAD RETURN PARAMETER REGISTER
         L     REG14,0(REG2)       RELOAD LINK REGISTER
         LM    REG2,REG12,4(REG2)  RELOAD USER REGISTERS
         BR    REG14               RETURN TO CALLER
         EJECT
***********************************************************************
*        UPDATE THE OUTPUT DIRECTORY TO INCLUDE THE MEMBER WRITTEN    *
***********************************************************************
         SPACE 2
STOWMEM  DS    0H
         STM   REG14,REG10,STOWSAVE SAVE GETBUF'S WORK REGISTERS
         LA    REG2,OUTPUT         LOAD ADDRESS OF OUTPUT DCB
         LM    REG7,REG10,X'44'(REG2) LOAD PARAMETER REGISTERS
         AR    REG8,REG10          INCREMENT TO INCLUDE LAST RECORD
         AH    REG8,X'3E'(REG2)    ADD THE LENGTH OF A BLOCK
         SR    REG8,REG9           CALCULATE THE LENGTH OF THIS BLOCK
         LTR   REG8,REG8           THIS BUFFER BIN USED ?
         BZ    STOWCHK2            NO. NO WRITE FOR LAST BUFFER
         STH   REG8,OUTPUTPO+X'3E' STORE LENGTH FOR WRITE IN DCB
         WRITE (7),SF,MF=E         WRITE OUT THE LAST BLOCK
         CHECK (7)                 WAIT FOR LAST IO TO COMPLETE
         MVC   OUTPUTPO+X'3E'(2),OUTPUT+X'3E' RESET BLOCKSIZE
STOWCHK2 L     REG1,20(REG7)       LOAD ADDRESS PREVIOUS DECB
         CLI   3(REG1),X'FF'       THIS OTHER DECB BIN USED ?
         BE    STOWSTOW            NO. DON'T TRY A CHECK THEN
         CHECK (1)                 WAIT FOR THAT TO COMPLETE
         MVI   3(REG1),X'FF'       FLAG NO CKECK NEEDED HERE
STOWSTOW STOW  OUTPUTPO,MEMNAME,R  UPDATE THE DIRECTORY
         CH    REG15,=H'12'        STOW COMPLETED OK
         BNL   STOWERR             NO. EXIT FROM PROGRAM
         L     REG8,12(REG7)       LOAD ADDRESS OF THE BUFFER
         LR    REG9,REG8           LOAD SECOND PARAMETER REGISTER
         AH    REG9,X'3E'(REG2)    CALCULATE END ADDRESS OF BUFFER
         SR    REG8,REG10          FUDGE FIRST ADDITION OF PUTNXT
         STM   REG7,REG10,X'44'(REG2) STORE PARAMETERS IN P-DCB
         LM    REG14,REG10,STOWSAVE  RESTORE GETBUF'S WORK REGISTERS
         BR    REG11               RETURN TO CALLER
         SPACE 2
STOWSAVE DS    14F                 SAVE AREA FOR INCOMING REGISTERS
         EJECT
***********************************************************************
*        LOCATE THE NEXT MEMBER OF INPUT PDS                          *
***********************************************************************
         SPACE 2
GETMEM   DS    0H
         STM   REG1,REG6,SAVEHIS   SAVE CALLERS REGISTERS
NOP1     NOP   EODIRX              BRANCH TAKEN AT END OF DIRECTORY
NOP2     NOP   NXTENTRY            TAKEN ALWAYS AFTER INITIALISATION
         OPEN  (DIRECTRY)          OPEN THE PDS DIRECTORY FOR INPUT
GETX     GET   DIRECTRY            READ THE FIRST/NEXT DIRECTORY BLOCK
         CLC   0(2,REG1),=H'0'     IS BLOCK IN USE ?
         BE    GETX                NO. IGNORE IT AND FETCH NEXT ONE
         LA    REG2,2(REG1)        LOAD ADDRESS START OF DATA
         LH    REG5,0(REG1)        LOAD LENGTH OF DATA USED IN BLOCK
         LA    REG5,0(REG5,REG1)   LOAD ADDRESS OF END OF DATA
         BCTR  REG5,0              SUBTRACT 1 FOR BXLE
LOOPMEM  CLC   0(8,REG2),=8X'FF'   LOGICAL END OF DIRECTORY ?
         BE    EODIR               YES. EXIT FROM PROCESSING LOOP
         BAL   REG6,DOENTRY        GO PASS THIS ENTRY TO CALLER
         XR    REG4,REG4           CLEAR WORK REGISTER
         IC    REG4,11(REG2)       LOAD C BYTE OF TTRC
         N     REG4,=F'31'         STRIP OF ALIAS BIT, NOTE LIST ETC
         AR    REG4,REG4           CONVERT HALFWORDS TO BYTES
         LA    REG4,12(REG4)       ADD LENGTH BASIC ENTRY
         BXLE  REG2,REG4,LOOPMEM   LOOP FOR WHOLE BLOCK
         B     GETX                GO FETCH NEXT BLOCK
         SPACE 2
DOENTRY  MVC   MEMNAME,0(REG2)     PASS CALLER THE CURRENT MEMBER NAME
         MVC   MEMNAMEX,MEMNAME    ENSURE SECONDARY FIELD IS WITH US
         MVC   TTR,8(REG2)         PASS CALLER THE TTR OF THIS MEMBER
         OI    NOP2+1,X'F0'        SET NOP TO BRANCH NEXT TIME
         STM   REG1,REG6,SAVEMINE  SAVE MY REGISTERS
         FIND  INPUTPO,TTR,C       POINT AT THIS MEMBER
         XC    INPUT+X'48'(8),INPUT+X'48' CLEAR DEBLOCK FIELDS
         LA    REG9,DECBIN2        LOAD ADDRESS SECOND DECB
         ST    REG9,INPUT+X'44'    SAVE ADDRESS IN REAL DCB
         LH    REG9,INPUTPO+X'3E'  LOAD LENGTH OF A BLOCK
         STH   REG9,INPUT+X'3E'    STORE THIS IN PSEUDO DCB
         READ  DECBIN1,SF,MF=E     READ IN THE FIRST RECORD
         LM    REG1,REG6,SAVEHIS   RESTORE HIS REGISTERS
         XR    REG15,REG15         SET ZERO RETURN CODE
         BR    REG11               RETURN TO CALLER
NXTENTRY DS    0H                  RETURN FOR NEXT ENTRY
         LM    REG1,REG6,SAVEMINE  RELOAD MY REGISTERS
         BR    REG6                RETURN TO CALLER
         SPACE 2
EODIR    DS    0H
         CLOSE (DIRECTRY)          CLOSE THE DIRECTORY FILE
         OI    NOP1+1,X'F0'        AVOID ABENDS FOR CALL AFTER EOF
EODIRX   LA    REG15,4             SET NONZERO RETURN CODE
         LM    REG1,REG6,SAVEHIS   RESTORE CALLERS REGISTERS
         BR    REG11               RETURN TO CALLER
         SPACE 2
SAVEHIS  DS    6F                  SAVE AREA FOR CALLERS REGISTERS
SAVEMINE DS    6F                  SAVE AREA FOR THIS ROUTINE'S REGS
         SPACE 2
         PRINT NOGEN
DIRECTRY DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GL,EODAD=EODIR,RECFM=F,    X
               LRECL=256,BLKSIZE=256
         PRINT GEN
         EJECT
**********************************************************************
*        PROCESS THE FIRST CARD OF A POSSIBLE SERIES                  *
**********************************************************************
         SPACE 2
GETBUF   DS    0H
         ST    REG11,SAVEGET       SAVE LINK REGISTER
         LA    REG0,BUFFER         LOAD ADDRESS OF THE DATA AREA
         ST    REG0,BUFFAD         SAVE START ADDRESS OF BUFFER
         ST    REG0,RECADD         SAVE START ADDRESS OF DATA
         LA    REG1,L'BUFFER       LOAD LENGTH OF DATA BUFFER
         XR    REG15,REG15         CLEAR LENGTH REGISTER
         ICM   REG15,8,=C' '       LOAD PADDING CHARACTER
         MVCL  REG0,REG14          CLEAR THE BUFFER
         LA    REG0,LINEMARK       LOAD ADDRESS OF FIRST LINE MARK
         MVI   LINEMARK,X'FF'      SIGNAL LAST ENTRY
         ST    REG0,NXTMARK        INITIALISE LINE MARKERS
         XR    REG7,REG7           CLEAR THE RECORD COUNT REGISTER
         LA    REG9,CMNTCHN        LOAD ADDRESS OF COMMENT CHAIN
         XC    CMNTCHN,CMNTCHN     CLEAR THE COMMENT CHAIN
         MVC   INLINEND,=A(INLINCHN) RESET INLINE COMMENT CHAIN
LOOP     LA    REG1,HOLDCARD       LOAD ADDRESS OF CARD HOLD AREA
         TM    FLAG,CARDHELD       IS A PREVIOUS CARD HELD ?
         BO    NOREAD              YES. CARRY ON WITHOUT A NEW RECORD
         GET   INPUT               GET NEXT INPUT RECORD
NOREAD   NI    FLAG,255-CARDHELD   TURN OFF CARD HELD FLAG
         LA    REG8,70(REG1)       LOAD ADDRESS OF END OF DATA ON CARD
         ST    REG8,LASTCOL        SAVE ADDRESS OF LAST COLUMN
         CLC   0(3,REG1),=C'//*'   IS THIS A COMMENTS CARD ?
         BNE   *+12                NO. STEP OVER LINK TO CMNTS RTN
         BAL   REG11,STOWCMNT      GO SAVE DETAILS OF COMMENTS CARD
         B     LOOP                GO FETCH NEXT CARD
         CLC   0(2,REG1),=C'//'    DOES IT LOOK LIKE JCL ?
         BE    *+12                YES. STEP OVER LINK TO ERROR ROUTINE
         BAL   REG11,ERRCARD       PASS ERROR CARD TO PROCESSOR
         B     LOOP                GO FETCH NEXT JCL CARD
         LA    REG7,1(REG7)        INCREMENT RECORD COUNTER
         LR    REG14,REG1          LOAD ADDRESS OF CARD
         LA    REG15,71            SET LENGTH FOR SCAN MACRO
         BAL   REG11,SCAN          SPLIT UP CARD INTO ITS PARTS
         L     REG2,CHAIN          LOAD ADDRESS OF SCAN MACRO OUTPUT
         LTR   REG2,REG2           TEST FOR SUCCESSFUL DELIMIT
         BZ    ERROR               SOMETHING SADLY AMISS HERE
         BAL   REG11,DONAMES       EXTRACT CARD NAME AND TEST CONCAT
         XR    REG15,REG15         CLEAR LENGTH REGISTER
         IC    REG15,4(REG2)       LOAF LENGTH FIRST PART OF CARD
         LA    REG15,1(REG15)      ARRANGE TO MOVE 1 BLANK ALSO
         L     REG14,4(REG2)       LOAD ADDRESS OF THIS PART
         BAL   REG11,LOADIT        LOAD THIS DATA INTO OUT BUFFER
         L     REG2,0(REG2)        LOAD ADDRESS NEXT BLOCK
         LTR   REG2,REG2           TEST FOR MISSING VERB
         BZ    ERROR               IT HAD TO HAPPEN !
         IC    REG15,4(REG2)       LOAD LENGTH OF VERB
         LA    REG15,1(REG15)      ARRANGE TO MOVE 1 BLANK ALSO
         L     REG14,4(REG2)       LOAD ADDRESS OF VERB
         BAL   REG11,TESTVERB      GO EXAMINE VALIDITY OF VERB
         BAL   REG11,LOADIT        LOAD VERB PART INTO BUFFER
         EJECT
**********************************************************************
*        PROCESS THE OPERAND ENTRIES ON THIS AND ANY CONTINUATION CRD *
**********************************************************************
         SPACE 2
LOOP2    L     REG2,0(REG2)        LOAD ADDRESS OF OPERAND LIST BLOCK
         LTR   REG2,REG2           TEST FOR MISSING OPERANDS
         BZ    VERBONLY            '// PEND' ETC.
         XR    REG15,REG15         CLEAR LENGTH REGISTER
         IC    REG15,4(REG2)       LOAD LENGTH OF OPERAND LIST
         L     REG14,4(REG2)       LOAD ADDRESS OF OPERAND LIST
         BAL   REG11,LOADIT        GO LOAD LIST INTO BUFFER
         BAL   REG11,INLINCMT      TEST FOR IN LINE COMMENTS AND PRCSS
         BCTR  REG14,0             ADDRESS LAST BYTE OF OPERAND LIST
         CLI   0(REG14),C','       TEST FOR CONTINUATION
         BE    GET                 YES. CARRY ON WITH NEXT CARD
         C     REG14,LASTCOL       IS DATA RIGHT TO END OF CARD
         BNE   STOPGET             NO. EXIT FROM THIS ROUTINE
         CLI   1(REG14),C' '       IS COLUMN 72 NON-BLANK ?
         BNE   GET                 NO. THEN IT'S NOT CONTINUATION
         B     STOPGET
GET      GET   INPUT               GET ANOTHER INPUT CARD
         LA    REG8,70(REG1)       LOAD ADDRESS OF END OF DATA ON CARD
         ST    REG8,LASTCOL        SAVE ADDRESS OF LAST COLUMN
         CLC   0(3,REG1),=C'//*'   IS THIS A COMMENTS CARD ?
         BNE   *+12                NO STEP OVER LINK TO CMNTS RTN
         BAL   REG11,STOWCMNT      GO SAVE DETAILS OF COMMENT CARD
         B     GET                 GO FETCH ANOTHER CARD
         CLC   0(3,REG1),=C'// '   IS IT A VALID CONTINUATION CARD ?
         BE    CRDVALID            YES. JUMP OVER LINK TO ERROR RTN
         CLC   0(2,REG1),=C'//'    IS IT VALID JCL ANYWAY ?
         BNE   NOHOLDIT            NO. DON'T HOLD IT FOR PROCESSING
         MVC   HOLDCARD,0(REG1)    SAVE THIS CARD FOR LATER USE
         OI    FLAG,CARDHELD       SIGNAL THAT HOLDCARD IS FULL
         B     STOPGET             TERMINATE PROCESSING THIS CARD
NOHOLDIT BAL   REG11,ERRCARD       PASS ERROR CARD TO PROCESSOR
         B     STOPGET             TERMINATE THIS CARD. START ANOTHER
CRDVALID LA    REG7,1(REG7)        INCREMENT THE RECORD COUNT REGISTER
         LR    REG14,REG1          LOAD ADDRESS OF START OF CARD
         LA    REG15,71            LOAD LENGTH FOR SCAN MACRO
         BAL   REG11,SCAN          GO SPLIT UP CARD INTO PARTS
         L     REG2,CHAIN          LOAD ADDRESS OF FIRST BLOCK
         B     LOOP2               LOOP FOR ALL CONTINUATION CARDS
STOPGET  L     REG11,SAVEGET       RELOAD LINK REGISTER
VERBONLY EQU   STOPGET             END PROCESSING IF OPERANDS MISSING
         TR    BUFFER(256),QUOTAB2 RESTORE DATA IN QUOTES
         TR    BUFFER+256(L'BUFFER-256),QUOTAB2 AND THE REST
         L     REG15,BUFFAD        LOAD ADDRESS OF END OF DATA
         BCTR  REG15,0             LOAD ADDRESS OF LAST BYTE
         ST    REG15,RECEND        SAVE FOR USER ROUTINES
         BR    REG11               RETURN TO CALLER
         EJECT
***********************************************************************
*        ROUTINE TO LOAD DATA INTO OUTPUT BUFFER
***********************************************************************
         SPACE 2
LOADIT   DS    0H
         L     REG1,NXTMARK        LOAD ADDRESS NEXT CONTROL FIELD
         STH   REG15,0(REG1)       SAVE LENGTH THIS SEGMENT
         LA    REG1,2(REG1)        STEP TO NEXT CONTROL FIELD
         MVI   0(REG1),X'FF'       SIGNAL END OF TABLE
         ST    REG1,NXTMARK        SAVE ADDRESS OF THIS ELEMENT
         L     REG0,BUFFAD         LOAD ADDRESS OF NEXT OUTPUT BYTE
         LR    REG1,REG15          LOAD SECOND LENGTH REGISTER
         MVCL  REG0,REG14          MOVE INPUT DATA TO BUFFER
         ST    REG0,BUFFAD         SAVE NEW START ADDRESS
         BR    REG11               RETURN TO CALLER
         SPACE 2
SAVEGET  DS    F                   SAVE AREA FOR LINK REGISTER
BUFFAD   DS    F                   ADDRESS OF CURRENT END OF BUFFER
BUFFER   DS    CL500               BUFFER AREA FOR PACKED ACRDS
NXTMARK  DS    F                   ADDRESS OF NEXT LINE MARKER FIELD
LINEMARK DS    CL100               LINE MARKER FIELDS FOR REBUILD
         EJECT
***********************************************************************
*        LOCATE THE NAME FIELD ON THE CARD AND PROCESS CONCATENATION  *
***********************************************************************
         SPACE 2
DONAMES  DS    0H
         XR    REG15,REG15         CLEAR LENGTH REGISTER
         IC    REG15,4(REG2)       LOAD LENGTH OF FIRST PART
         L     REG14,4(REG2)       LOAD ADDRESS OF DATA
         LA    REG14,2(REG14)      STEP OVER '//'
         CLI   0(REG14),C' '       NAME FIELD IS BLANK ?
         BNE   CONTNAME            NO. CARRY ON
         TM    FLAG,LEADDLTD       HAS A DD CARD BEEN DELETED
         BZ    CONTNAME            NO. NO DANGER HERE
         L     REG1,0(REG2)        LOAD ADDRESS OF NEXT ELEMENT
         LTR   REG1,REG1           ANYTHING THERE
         BZ    CONTNAME            NO (?). FORGET IT
         L     REG1,4(REG1)        LOAD ADDRESS OF VERB
         CLC   0(3,REG1),=C'DD '   IS THIS A DD STATEMENT ?
         BNE   CONTNAME            NO. CARRY ON
         MVC   SPNAME,CARDNAME     MOVE OLD DDNAME TO SPECIAL FIELD
         MVC   4(4,REG2),SPECIAL   FUDGE THE SCAN BLOCK FOR THIS CARD
         B     NAMEEXIT            RETURN TO CALLER
CONTNAME BCTR  REG15,0             SUBTRACT ONE FROM LENGTH
         BCTR  REG15,0             AND ANOTHER
         LA    REG0,CARDNAME       LOAD ADDRESS OF RESULT FIELD
         LA    REG1,L'CARDNAME     LOAD LENGTH OF RECEIVING FIELD
         ICM   REG15,8,=C' '       LOAD PAD FILL CHARACTER
         MVCL  REG0,REG14          MOVE CARD NAME TO FIELD
NAMEEXIT NI    FLAG,255-LEADDLTD   RESET LOGIC FLAG
         BR    REG11               RETURN TO CALLER
         SPACE 2
SPECIAL  DC    AL1(L'SPNAME+2)     LENGTH OF SUBSTITUTE NAME FIELD
         DC    AL3(SPNAMEX)        ADDRESS OF SPECIAL NAME FIELD
SPNAMEX  DC    C'//'               SIMULATE START OF JCL CARD
SPNAME   DC    CL8' '              USED TO HOLD NAME OF CONCAT'TED CRD
         DC    C' '                ONE BLANK TO FOLLOW
         EJECT
***********************************************************************
*        TEST FOR COMMENTS ON THE END OF A CARD AND STORE ANY FOUND   *
***********************************************************************
         SPACE 2
INLINCMT DS    0H
         L     REG2,0(REG2)        LOAD ADDRESS OF NEXT SCAN BLOCK
         LTR   REG2,REG2           ANY MORE DATA FIELDS ON CARD ?
         BZ    0(REG11)            NO. RETURN TO CALLER
         BCTR  REG8,0              ADDRESS BYTE IN FRONT OF LAST ONE
         CLI   0(REG8),C' '        LAST POSITION BLANK
         BE    *-6                 LOOP BACK DOWN RECORD FOR LAST DATA
         L     REG0,4(REG2)        LOAD START ADDRESS OF COMMENTS
         SR    REG8,REG0           CALCULATE LENGTH OF DATA
         LA    REG0,CHNFLDS+1(REG8) ADD LENGTH OF CHAINING FIELDS
         GETMAIN R,LV=(0)          GETMAIN SOME CORE
         XC    0(4,REG1),0(REG1)   CLEAR CHAINING FIELD
         STC   REG8,0(REG1)        SAVE LENGTH OF COMMENTS  AREA
         ST    REG7,4(REG1)        STOW RECORD ID
         L     REG15,4(REG2)       LOAD START ADDRESS OF DATA
         EX    REG8,CMNTMVC        EXECUTE THE MOVE
         L     REG15,INLINEND      LOAD ADDRESS OF LAST ELEMENTT
         STCM  REG1,7,1(REG15)     CHAIN THIS ONE TO IT
         ST    REG1,INLINEND       SAVE ADDRESS OF THIS AS LAST
         BR    REG11               RETURN TO CALLER
         SPACE 2
CMNTMVC  MVC   8(0,REG1),0(REG15)  EXECUTED
INLINEND DC    A(INLINCHN)
INLINCHN DC    A(0)
         EJECT
***********************************************************************
*        RELOAD THE BUFFER ONTO OUTPUT FILE
***********************************************************************
         SPACE 2
PUTBUF   DS    0H
         ST    REG11,SAVEOUT       SAVE LINK REGISTER
         TR    BUFFER(256),QUOTAB2 RESTORE DATA TO ITS FORMER GLORY
         TR    BUFFER+256(L'BUFFER-256),QUOTAB2 AND THE REST
         TM    FLAG2,DELETEIT      THIS CARD TO BE DELETED ?
         BO    DODELETE            YES. BYPASS RECONSTRUCTION
         LA    REG0,BUFFER         LOAD ADDRESS FIRST INPUT BYTE
         ST    REG0,BUFFAD         SAVE THIS ADDRESS
         LA    REG2,LINEMARK       LOAD ADDRESS LINE CONTROL FIELDS
         XR    REG7,REG7           CLEAR THE RECORD COUNT REGISTER
         BAL   REG11,LOADCMNT      GO TEST FOR OUTSTANDING COMMENTS
         LA    REG7,1(REG7)        INCREMENT RECORD COUNTER
         PUT   OUTPUT              OBTAIN AN OUTPUT BUFFER
         MVI   0(REG1),C' '        SET UP FOR CLEARING THE BUFFER
         MVC   1(79,REG1),0(REG1)  CLEAR THE OUTPUT BUFFER
         LR    REG14,REG1          LOAD ADDRESS REGISTER
         BAL   REG11,OUTMOVE       LOAD UP THE // ETC
         LA    REG2,2(REG2)        LOAD ADDRESS NEXT CONTROL FIELD
         LA    REG14,VERBCOL(REG1) SET VERB COLUMN ADDRESS
         CLI   0(REG2),X'FF'       END OF PARAMETER LIST ?
         BE    OUTSTOPX            YES. TERMINATE RELOAD
         BAL   REG11,OUTMOVE       GO LOAD UP VERB
         LA    REG2,2(REG2)        LOAD ADDRESS NEXT CONTROL FIELD
         LA    REG14,OPND1COL(REG1) SET OPERAND COLUMN ADDRESS
         CLI   0(REG2),X'FF'       END OF PARAMETER LIST ?
         BE    OUTSTOPX            YES. TERMINATE RELOAD
LOOP3    BAL   REG11,OUTMOVE       LOAD UP THE OPERAND LIST
         LA    REG15,71(REG1)      LOAD ADDRESS OF END OF CARD
         CR    REG14,REG15         DATA GOES TO END OF CARD ?
         BL    *+8                 NO. COLUMN 72 OK AS IT IS
         MVI   71(REG1),C'*'       MOVE CONTINUATION INDICATOR IN
         BAL   REG11,INLINRES      GO RESTORE ANY IN LINE COMMENTS
         BAL   REG11,DOOUTSEQ      GIVE THE CARD A SEQUENCE NUMBER
         BAL   REG11,LOADCMNT      GO TEST FOR ANY COMMANTS CARDS
         LA    REG2,2(REG2)        LOAD ADDRESS NEXT CONTROL FIELD
         CLI   0(REG2),X'FF'       TEST FOR END OF DATA
         BE    OUTSTOP             YES. EXIT FROM THIS ROUTINE
         LA    REG7,1(REG7)        INCREMENT THE RECORD COUNT REGISTER
         PUT   OUTPUT              OBTAIN AN OUTPUT BUFFER
         MVI   0(REG1),C' '        SET UP TO CLEAR THE BUFFER
         MVC   1(79,REG1),0(REG1)  CLEAR THE OUTPUT BUFFER
         MVC   0(2,REG1),=C'//'    SET UP JCL COLUMNS 1 AND 2
         LA    REG14,OPCOLUMN(REG1) SET ADDRESS OF CONTINUATION COLUMN
         B     LOOP3               LOOP FOR ALL OPERAND FIELDS
OUTSTOPX BAL   REG11,DOOUTSEQ      GIVE THE RECORD A NUMBER
OUTSTOP  L     REG11,SAVEOUT       RELOAD LINK REGISTER
         NI    FLAG2,255-DELETEIT  RESET DELETE FLAG
         BR    REG11               RETURN TO CALLER
         EJECT
***********************************************************************
*        COMMON RELOAD ROUTINE TO MOVE DATA OUT OF BUFFER             *
***********************************************************************
         SPACE 2
OUTMOVE  DS    0H
         CLI   0(REG2),X'FF'       ACCIDENTLY BEEN PASSED END OF TABLE
         BE    OUTEXIT             YES DAMMIT. RETURN TO CALLER
         LH    REG15,0(REG2)       LOAD LENGTH OF THIS DATA ELEMENT
         L     REG4,BUFFAD         LOAD ADDRESS NEXT INPUT BYTE
         LR    REG5,REG15          LOAD SECOND LENGTH REGISTER
         MVCL  REG14,REG4          MOVE DATA TO OUTPUT RECORD
         ST    REG4,BUFFAD         SAVE ADDRESS NEXT INPUT BYTE
OUTEXIT  BR    REG11               RETURN TO CALLER
SAVEOUT  DS    F                   SAVE AREA FOR LINK REGISTER
         EJECT
***********************************************************************
*        CHECK FOR A CONCATENATED DD CARD BEING DELETED               *
***********************************************************************
         SPACE 2
DODELETE DS    0H
         CLC   VERB,DD             IS THIS A DD CARD
         BNE   DELTEXIT            NO. RETURN TO CALLER
         CLI   BUFFER+2,C' '       IS THIS CARD ITSELF CONCATENATED ?
         BE    DELTEXIT            YES. DELETE SHOULD BE OK
         OI    FLAG,LEADDLTD       SET FLAG FOR FOLLOWING JCL CARD
DELTEXIT B     OUTSTOP             RETURN TO END OF OUTPUT ROUTINE
         EJECT
***********************************************************************
*        RESET ANY COMMENTS THAT APPEAR ON JCL CARDS                  *
***********************************************************************
         SPACE 2
INLINRES DS    0H
         ST    REG1,RESTSAVE       SAVE ADDRESS OF RECORD
FREELOOP L     REG8,INLINCHN       LOAD START OF COMMENT CHAIN
         LTR   REG8,REG8           TEST FOR ANY/ANY MORE COMMENTS
         BZ    RESTEXIT            NONE. RETURN TO CALLER
         C     REG7,4(REG8)        DOES THIS DATA FIT THIS LINE
         BH    REMOVEIT            NO. THIS CARD HAS BEEN DELETED
         BL    RESTEXIT            NO. RETURN TO CALLER
         XR    REG10,REG10         CLEAR LENGTH REGISTER
         IC    REG10,0(REG8)       LOAD EXECUTABLE LENGTH OF DATA
         LA    REG0,70(REG1)       LAST USABLE DATA POSITION ON CARD
         LA    REG15,71(REG1)      SAME BUT ALLOWS FOR EXECUTABLE LGTH
         LA    REG3,CMNTCOL(REG1)  NORMAL START ADDRESS OF COMMENTS
         CR    REG14,REG0          IS ANY ROOM LEFT ON CARD ?
         BNL   REMOVEIT            NO. THROW 'EM AWAY.
         SR    REG0,REG14          MAX AVAILABLE SPACE ON CARD
         SR    REG15,REG3          NORMAL COMMENT SPACE AVAILABLE
         CR    REG0,REG10          WILL COMMENTS FIT ANYWAY ?
         BNH   TRUNCATE            NO. PUT IN WHAT WILL FIT
         CR    REG14,REG3          DO OPERANDS GO PAST NORMAL COMMENTS
         BH    INSERTEM            YES. INSERT CMNTS AT END OF OPND
         CR    REG15,REG10         WILL COMMENTS FIT IN NORMAL SPACE
         BL    INSERTEM            NO. PUT THEM AFTER OPERANDS
         B     EXINSMVC            YES. GO PUT THEM THERE THEN
RESTEXIT BR    REG11               RETURN TO CALLER
TRUNCATE LR    REG10,REG0          SET AVAILABLE SPACE AS SIZE OF CMNTS
         BCTR  REG10,0             SUBTRACT 1 FOR EXECUTE
INSERTEM LA    REG3,1(REG14)       SET 'TO' ADDRESS AFTER OPERANDS
EXINSMVC EX    REG10,INSMVC        EXECUTE THE MOVE INTO CARD
REMOVEIT MVC   INLINCHN+1(3),1(REG8)    RESET COMMENT CHAIN
         IC    REG10,0(REG8)       LOAD LENGTH OF COMMENTS IN BLOCK
         LA    REG10,CHNFLDS+1(REG10) CALCULATE LENGTH TO FREE
         FREEMAIN R,LV=(10),A=(8)  FREE UP THE BLOCK
         L     REG1,RESTSAVE       RESTORE ADDRESS OF RECORD
         B     FREELOOP            GO TEST NEXT BLOCK ON CHAIN
         SPACE 2
INSMVC   MVC   0(0,REG3),8(REG8)   MOVE COMMENT DATA TO CARD
RESTSAVE DC    A(0)                SAVE AREA FOR RECORD ADDRESS
         EJECT
***********************************************************************
*        EXAMINE EACH CONTROL FIELD FOR OPERANDS NEEDING CONTINUATION *
***********************************************************************
         SPACE 2
TESTLNTH DS    0H
         ST    REG11,TESTLR11      SAVE LINK REGISTER
         LA    REG14,BUFFER        LOAD START ADDRESS OF DATA
         L     REG15,RECEND        LOAD ADDRESS OF LAST BYTE
         LA    REG15,1(REG15)      LOAD ADDRESS OF END OF DATA
         SR    REG15,REG14         LOAD LENGTH OF DATA
         BAL   REG11,UNQUOTE       GO REMOVE UNWANTED DATA IN QUOTES
         LA    REG2,LINEMARK       LOAD ADDRESS OF START OF CTL FIELDS
         L     REG1,RECADD         LOAD START ADDRESS OF OUTPUT DATA
         LA    REG14,NOCHKNO       NUMBER OF FIELDS WHICH ARE NOT CHCKD
CHKLOOP  CLI   0(REG2),X'FF'       END OF FIELDS ?
         BE    LNTHEXIT            MINIMUM NUMBER OF FIELDS PRESENT
         AH    REG1,0(REG2)        STEP OVER THE NEGLECTED FIELD
         LA    REG2,2(REG2)        LOAD ADDRESS OF NEXT CONTROL FIELD
         BCT   REG14,CHKLOOP       LOOP OVER ALL NEGLECTED FIELDS
         LA    REG14,OPND1MAX      LOAD MAX LGTH OF FIRST OPERAND FIELD
         XR    REG3,REG3           CLEAR OVERFLOW LENGTH REGISTER
LNTHLOOP CLI   0(REG2),X'FF'       IS THIS THE END OF TABLE ?
         BE    LNTHSTOP            YES. CLEARUP PROCESSING
         LH    REG15,0(REG2)       LOAD LENGTH OF THIS NEXT OPERAND
         AR    REG15,REG3          ADD IN ANY OVERFLOW DATA FROM LAST
         XR    REG3,REG3           CLEAR THE OVERFLOW LENGTH
         CR    REG15,REG14         IS THIS OPERAND TOO LONG ?
         BNH   LNTHEND             NO. LEAVE IT ALONE
         LR    REG3,REG15          SAVE TOTAL LENGTH OF LIST
         LA    REG15,0(REG14,REG1) CALCULATE LAST BYTE THAT WILL FIT
LNTHXTST BCTR  REG15,0             SUBTRACT ONE FOR GOOD MEASURE
         CLI   0(REG15),C','       SUITABLE PLACE TO CHOP IT OFF ?
         BE    LNTHCMMA            YES. STOP LOOPING ABOUT
         CR    REG1,REG15          BACK WHERE WE STARTED YET ?
         BL    LNTHXTST            NO. TRY AGAIN
         LA    REG15,0(REG14,REG1) YES. NO COMMA. DO IT THE HARD WAY
         BCTR  REG15,0             SUBTRACT ONE TO SIM. COMMA
LNTHCMMA SR    REG15,REG1          THAT IS THE NEW LENGTH THIS LINE
         LA    REG15,1(REG15)      STEP OVER COMMA WE FOUND
         SR    REG3,REG15          THAT IS WHAT'S LEFT OVER
LNTHEND  AR    REG1,REG15          STEP TO START NEXT LINE
         STH   REG15,0(REG2)       UPDATE THE CONTROL AREA
         LA    REG2,2(REG2)        STEP TO NEXT CONTROL ENTRY
         LA    REG14,MAXOPLEN      LOAD MAX LENGTH CONTINUED OPERANDS
         B     LNTHLOOP            PROCESS ALL TABLE ENTRIES
LNTHSTOP LTR   REG3,REG3           ANY DATA LEFT OVER
         BZ    LNTHEXIT            NO. GO STRAIGHT TO EXIT
         STH   REG3,0(REG2)        YES. SAVE IT IN NEXT ENTRY
         MVI   2(REG2),X'FF'       SET NEW END OF TABLE
         XR    REG3,REG3           CLEAR LENGTH REGISTER
         B     LNTHLOOP            GO PROCESS TRAILING DATA
LNTHEXIT L     REG11,TESTLR11      RELOAD LINK REGISTER
         BR    REG11               RETURN TO CALLER
         SPACE 2
TESTLR11 DS    F                   SAVE AREA FOR LINK REGISTER
         EJECT
***********************************************************************
*        JCL/CMNT  CARD NEEDS SAVING FOR LATER REINSERTION            *
***********************************************************************
         SPACE 2
STOWCARD DS    0H
STOWCMNT DS    0H
         LR    REG2,REG1           SAVE ADDRESS OF THE COMMANT CARD
         GETMAIN R,LV=88           GETMAIN A BLOCK OF CORE
         MVC   8(80,REG1),0(REG2)  SAVE THE COMMENTS CARD
         ST    REG7,4(REG1)        SAVE CURRENT CARD NUMBER
         XC    0(4,REG1),0(REG1)   CLEAR THE CHAINING FIELD
         ST    REG1,0(REG9)        CHAIN THIS AREA TO LAST ONE
         LR    REG9,REG1           SAVE ADDRESS OF LAST ELEMENT
         BR    REG11               RETURN TO CALLER
         SPACE 2
CMNTCHN  DS    F                   ADDRESS OF CHAIN OF SAVED CMNT CRDS
         EJECT
***********************************************************************
*        TEST FOR NEED TO RELOAD A SAVED COMMENT CARD
***********************************************************************
         SPACE 2
LOADCMNT DS    0H
         ST    REG11,LOADSAVE      SAVE LINK REGISTER
         L     REG9,CMNTCHN        LOAD ADDRESS OF FIRST SAVED COMMENT
LOADLOOP LTR   REG9,REG9           TEST FOR ANY SAVED COMMENTS
         BZ    LOADENDS            NO. RELOAD REG9 AND RETURN
         C     REG7,4(REG9)        DOES COMMENT BELONG HERE ?
         BL    LOADEXIT            NO. RETURN TO CALLER
         PUT   OUTPUT              OBTAIN AN OUTPUT BUFFER
         MVC   0(80,REG1),8(REG9)  LOAD UP THE COMMENT CARD
         BAL   REG11,DOOUTSEQ      GO ASSIGN IT A SEQUENCE NUMBER
         LR    REG1,REG9
         L     REG9,0(REG9)        LOAD ADDRESS OF NEXT ELEMENT
         ST    REG9,CMNTCHN        SAVE ADDRESS OF LAST BLOCK
         FREEMAIN R,LV=88,A=(1)    FREEMAIN THE ELEMENT
         B     LOADLOOP            LOOP FOR ALL SAVED CMNTS THIS RCRD
LOADENDS LA    REG9,CMNTCHN        RELOAD ADDRESS OF START OF CHAIN
LOADEXIT DS    0H
         L     REG11,LOADSAVE      RELOAD LINK REGISTER
         BR    REG11               RETURN TO CALLER
         SPACE 2
LOADSAVE DS    F                   SAVE AREA FOR LINK REGISTER
         EJECT
***********************************************************************
*        GIVE EACH OUTPUT RECORD A NEW SEQUENCE NUMBER
***********************************************************************
DOOUTSEQ DS    0H
         SPACE 2
         AP    LINENO,INCR         INCREMENT THE LINE NUMBER
         UNPK  72(8,REG1),LINENO   UNPACK LINE NUMBER TO CARD
         OI    79(REG1),X'F0'      MAKE LAST DIGIT USABLE
         BR    REG11               RETURN TO CCALLER
         SPACE 2
LINENO   DC    PL4'0'              LINE NUMBER FOR OUTPUT FILE
INCR     DC    P'100'              INCREMENT FOR OUTPUT LINE NUMBERS
         EJECT
***********************************************************************
*        ROUTINE TO SCAN DATA AND SPLIT IT INTO PARTS                 *
***********************************************************************
SCAN     DS    0H
         ST    REG11,SCANR11       SAVE LINK REGISTER
         BAL   REG11,UNQUOTE       GO MAKE 'IN QUOTE' DATA USABLE
         SCAN  DATA=(REG14),LENGTH=(REG15),DELIM=(' '),RETAREA=CHAIN
         L     REG11,SCANR11       RELOAD LINK REGISTER
         BR    REG11               RETURN TO CALLER
         SPACE 2
SCANR11  DS    F                   SAVE AREA FOR LINK REGISTER
CHAIN    DS    CL256               WORK AREA FOR SCAN MACRO
         EJECT
***********************************************************************
*        REMOVE UNWANTED BLANKS AND COMMAS FROM DATA IN QUOTES        *
***********************************************************************
         SPACE 2
UNQUOTE  DS    0H
         STM   REG14,REG1,QUOTSAVE SAVE INCOMING REGISTERS
         LA    REG0,0(REG15,REG14) ADDRESS OF END OF DATA
         BCT   REG15,*+10          SUBTRACT ONE FROM LENGTH
         TRT   0(0,REG14),QUOTAB3  ANY QUOTES IN THIS LINE
         EX    REG15,*-6           EXECUTE THE TRT
         BZ    QUOTEXIT            NO. RETURN TO CALLER
         NI    FLAG,255-FLIP       SET LOGIC TO OUT OF QUOTE CNDTION
         OI    FLAG,OUTQUOTE       INITIALISE THE CORRECT BIT
         B     *+8                 JUMP OVER LOOP INCREMENT
QUOTLOOP LA    REG1,1(REG1)        LOAD ADDRESS OF NEXT BYTE
         CR    REG1,REG0           AT END OF SCAN YET ?
         BE    QUOTEXIT            YES. RETURN TO CALLER
         CLI   0(REG1),C''''       IS THIS A QUOTE ?
         BNE   QUOTTR              NO. LEAVE THE POOR FLAG ALONE
         XI    FLAG,FLIP           IF IN SET OUT,IF OUT SET IN....
         B     QUOTLOOP            GO FETCH NEXT BYTE
QUOTTR   TM    FLAG,INQUOTE        ARE WE IN QUOTES THEN
         BZ    QUOTLOOP            NO. GO FETCH NEXT BYTE
         TR    0(1,REG1),QUOTAB1   TRANSLATE UNWANTED DATA OUT
         B     QUOTLOOP            GO DOWN WHOLE FIELD
QUOTEXIT LM    REG14,REG1,QUOTSAVE RELOAD CALLER'S REGISTERS
         BR    REG11               RETURN TO CALLER
         SPACE 2
QUOTSAVE DS    4F                  SAVE AREA FOR PARAMETER REGISTERS
QUOTAB1  DC    256AL1(*-QUOTAB1)
         ORG   QUOTAB1+C' '
         DC    X'01'
         ORG   QUOTAB1+C','
         DC    X'02'
         ORG
QUOTAB2  DC    256AL1(*-QUOTAB2)
         ORG   QUOTAB2+X'01'
         DC    C' '
         ORG   QUOTAB2+X'02'
         DC    C','
         ORG
QUOTAB3  DC    256X'00'
         ORG   QUOTAB3+C''''
         DC    X'FF'
         ORG
         EJECT
***********************************************************************
*        END OF DATA ROUTINE
***********************************************************************
         SPACE 2
EODAD    OI    FLAG,EOF            SIGNAL END OF FILE REACHED
         BAL   REG11,ENDPROC       END OF PROCEDURE AND EXEC
         OI    FLAG3,NEWFILE       SHOW START OF A NEW FILE IMMINENT
         CLI   BUFFER,C' '         IS THE BUFFER EMPTY ?
         BNE   STOPGET             NO. RETURN TO PROCESS LAST RECORD
         NC    CMNTCHN,CMNTCHN     ARE ANY STRAGGLING COMMENTS LEFT
         BZ    MAINSTOP            NO. ALL FINISHED
         BAL   REG11,LOADCMNT      GO RELOAD THE LAST COMMENTS
         B     MAINSTOP            ALL DONE. TERMINATE THIS MEMBER
         EJECT
***********************************************************************
*        CONSTANTS AND LITERALS                                       *
***********************************************************************
         SPACE 2
LASTCOL  DS    F                   ADDRESS OF LAST VALID COL ON CARD
FLAG     DC    X'00'               FLAG FOR INTERNAL LOGIC
EOF      EQU   X'80'               END OF FILE REACHED ON INPUT
INSEQ    EQU   X'40'               INPUT FILE IS SEQUENTIAL
OUTSEQ   EQU   X'20'               OUTPUT FILE IS SEQUENTIAL
ALLSEQ   EQU   INSEQ+OUTSEQ        ALL FILES ARE SEQUENTIAL
CARDHELD EQU   X'10'               A CARD IS BEING HELD IN HOLDCARD
INQUOTE  EQU   X'08'               CURRENT BYTE IS INSIDE QUOTES
OUTQUOTE EQU   X'04'               CURRENT BYTE IS NOT INSIDE QUOTES
FLIP     EQU   INQUOTE+OUTQUOTE    USED TO 'FLIP' BETWEEN ABOVE TWO
LEADDLTD EQU   X'02'               A CONCATENATED DD CARD WAS DELETED
FLAG2    DC    X'00'               RETURN FROM USER EXIT FLAG
NORMAL   EQU   X'00'               NO FURTHER ACTION
FETCHIT  EQU   X'04'               RETURN FOR ANOTHER RECORD
DELETEIT EQU   X'08'               DELETE CURRENT RECORD
FLAG3    DC    X'80'               START OF STEP/PROCEDURE LOGIC FLAG
NEWFILE  EQU   X'80'               THIS IS START OF A NEW FILE
NEWPROC  EQU   X'40'               THIS IS START OF A NEW PROCEDURE
HOLDCARD DS    CL80                SAVE AREA FOR ERROR AND PROC CARDS
         PRINT NOGEN
INPUT    DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GL,LRECL=80,EODAD=EODAD,   X
               EXLST=EXLST
         SPACE 2
OUTPUT   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PL,LRECL=80,EXLST=EXLST
         LTORG
         EJECT
***********************************************************************
*        IDENTIFY THE TYPE OF JCL CARD                                *
***********************************************************************
         SPACE 2
TESTVERB DS    0H
         ST    REG11,TESTR11       SAVE LINK REGISTER
         STM   REG14,REG2,TESTSAVE SAVE PARAMETER REGISTERS
         IC    REG10,4(REG2)       LOAD LENGTH OF OPERAND
         MVC   VERB,=8C' '         BLANK OUT THE VERB FIELD
         BCT   REG10,*+10          SUBTRACT ONE FROM LENGTH
         MVC   VERB(0),0(REG14)    MOVE VERB TO WORK AREA
         N     REG10,=F'7'         LIMIT LENGTH TO 8 BYTES
         EX    REG10,*-10          EXECUTE THE MOVE
         CLC   VERB,PROC           IS THIS A PROC STATEMENT
         BNE   TESTEXEC            NO. TRY FOR EXEC STATEMENT
         BAL   REG11,ENDPROC       INVOKE END OF PROC PROCEDURE
         TM    FLAG,INSEQ          IS INPUT SEQUENTIAL ?
         BZ    TESTEXIT            NO. STOW DETAILS ARE AVAILABLE
         BAL   REG11,STRTPROC      YES. PREPARE DUMMY EOF DETAILS
         B     TESTEXIT            RETURN TO CALLER
TESTEXEC CLC   VERB,EXEC           IS THIS AN EXEC STATEMENT ?
         BNE   TESTEXIT            NO. RETURN TO CALLER
         BAL   REG11,ENDEXEC       YES. INVOKE END OF EXEC PROCEDURE
         MVC   STEPNAME,CARDNAME   UPDATE STEP NAME FOR NEXT STEP
TESTEXIT L     REG11,TESTR11       RELOAD LINK REGISTER
         LM    REG14,REG2,TESTSAVE RESTORE PARAMETER REGISTERS
         BR    REG11               RETURN TO CALLER
         SPACE 2
TESTR11  DS    F                   SAVE AREA FOR LINK REGISTER
TESTSAVE DS    5F                  SAVE AREA FOR PARAMETER REGISTERS
         EJECT
***********************************************************************
*        FOR INPUT SEQUENTIAL AND OUTPUT PARTITIONED. DUMMY EOF NEEDED*
***********************************************************************
         SPACE 2
STRTPROC DS    0H
         ST    REG11,STRTR11       SAVE LINK REGISTER
         MVC   MEMNAME,MEMNAMEX    UPDATE THE REAL MEMBER NAME
         MVC   MEMNAMEX,CARDNAME   UPDATE MEMBER NAME
         CLI   MEMNAMEX,C' '       NAME FIELD BLANK ?
         BNE   PROCGOON            NO. EVERYTHING OK
         MVC   MEMNAMEX,=CL8'$$$UT509' HE'S AN IDIOT
PROCGOON CLI   MEMNAME,C' '        FIRST ENTRY TO THIS ROUTINE ?
         BE    STRTEXIT            YES. RETURN TO CALLER
         TM    FLAG,OUTSEQ         OUTPUT FILE SEQUENTIAL ?
         BO    STRTEXIT            YES. NO STOW REQUIRED
         BAL   REG11,LOADCMNT      GO OUTPUT ANY STRAGGLING COMMENTS
         BAL   REG11,STOWMEM       GO UPDATE OUTPUT DIRECTORY
STRTEXIT L     REG11,STRTR11       RELOAD LINK REGISTER
         BR    REG11               RETURN TO CALLER
         SPACE 2
STRTR11  DS    F                   SAVE AREA FOR LINK REGISTER
         EJECT
***********************************************************************
*        INVOKE THE USER'S END OF PROCEDURE RTN                       *
***********************************************************************
         SPACE 2
ENDPROC  DS    0H
         ST    REG11,ENDPRC11      SAVE LINK REGISTER
         TM    FLAG3,NEWFILE       START OF A NEW INPUT FILE
         BO    ENDPEXIT            YES. NOT END OF PROCEDURE YET
         BAL   REG11,ENDEXEC       END OF PROC IS ALSO END OF EXEC
         L     REG10,$ENDPROC      LOAD ADDRESS OF ROUTINE
         BAL   REG11,CALLIT        GO INVOKE THE USER'S EXIT ROUTINE
         BAL   REG11,LOADCMNT      GO LOAD ANY INSERTED CARDS ETC
ENDPEXIT NI    FLAG3,255-NEWFILE   RESET START OF NEW FILE FLAG
         OI    FLAG3,NEWPROC       SIGNAL START OF NEW PROCEDURE
         ZAP   LINENO,=P'0'        RESET LINE NUMBERS
         L     REG11,ENDPRC11      RELOAD LINK REGISTER
         BR    REG11               RETURN TO CALLER
         SPACE 2
ENDPRC11 DS    F                   SAVE AREA FOR LINK REGISTER
         EJECT
***********************************************************************
*        INVOKE THE USER'S END OF STEP PROCEDURE                      *
***********************************************************************
         SPACE 2
ENDEXEC  DS    0H
         ST    REG11,ENDEXR11      SAVE LINK REGISTER
         TM    FLAG3,NEWPROC       NEW PROCEDURE ?
         BO    ENDEXEXT            YES. THEN NO END OF STEP NEEDED
         L     REG10,$ENDEXEC      LOAD ADDRESS OF USER ROUTINE
         BAL   REG11,CALLIT        GO PASS CONTROL TO THE EXIT ROUTINE
         BAL   REG11,LOADCMNT      GO LOAD ANY INSERTED CARDS ETC
ENDEXEXT NI    FLAG3,255-NEWPROC   RESET NEW PROCEDURE FLAG
         L     REG11,ENDEXR11      RELOAD LINK REGISTER
         BR    REG11               RETURN TO CALLER
         SPACE 2
ENDEXR11 DS    F                   SAVE AREA FOR LINK REGISTER
         EJECT
***********************************************************************
*        AN INVALID CARD IS ENCOUNTERED                               *
***********************************************************************
         SPACE 2
ERRCARD  DS    0H
         MVC   VERB,=8C'*'         SHOW THAT NO VALID VERB FOUND
         BR    REG11               RETURN TO CALLER
         EJECT
ERROR    BAL   REG11,ERRCARD       SIGNAL CARD IS INVALID
         B     STOPGET             TERMINATE PROCESSING FOR IT
         SPACE 2
STOWERR  DS    0H
         CH    REG15,=H'16'        I/O ERROR OR DIRECTORY FULL
         BL    DIRFULL             DIRECTORY FULL
         WTO   '**** PERMANENT I/O ERROR ON OUTPUT DIRECTORY.'
         B     BASEMSG             CARRY ON WITH REST OF MESSAGE
DIRFULL  WTO   '**** OUTPUT DIRECTORY IS FULL.'
BASEMSG  MVC   NAMEOFFS(8),MEMNAMEX
STOWWTO  WTO   '**** STOW FAILED FOR MEMBER -         .'
NAMEOFFS EQU   STOWWTO+38
         WTO   '**** PROCESSING TERMINATED.'
         ZRETURN RC=12
         EJECT
***********************************************************************
*                                                                     *
*        THE FOLLOWING ARE UTILITY ROUTINES WHICH ARE INVOKED BY      *
*        THE PROCESSING ROUTINES WHEN REQUIRED. EACH USES REGISTER    *
*        11 AS A BASE AND EXPECTS PARAMETERS TO BE PASSED IN PRE-     *
*        DETERMINED REGISTERS. THESE ARE DEFINED AT THE START OF      *
*        EACH ROUTINE.                                                *
*            ON RETURN FROM THESE ROUTINES, REGISTERS 4 THRU 8        *
*        WILL NOT BE ALTERED; REGISTERS 14 THRU 1 WILL ALWAYS BE      *
*        ALTERED; REGISTERS 11 THRU 13 WILL NOT BE ALTERED; AND       *
*        REGISTERS 2 AND 3 ARE ONLY ALTERED BY SOME ROUTINES          *
*                                                                     *
*                                                                     *
***********************************************************************
         DROP  REG13               RELEASE ADDRESSABILITY
         DROP  REG12               RELEASE ADDRESSABILITY
         EJECT
***********************************************************************
*        CONTROL AREA UPDATE. MAINTAIN TABLE OF OPERAND FIELDS        *
*                                                                     *
* PARMS  REG11 = RETURN ADDRESS TO CALLER                             *
*        REG15 = LENGTH AND SIGN OF DATA TO BE CHANGED                *
*        SCANPTR IS ASSUMED TO CONTAIN OFFSET TO POINT OF CHANGE      *
*        CTLTABL IS REFERENCED AND UPDATED BY THIS ROUTINE            *
***********************************************************************
         SPACE
         ENTRY JCLCAU
JCLCAU   DS    0H
         ST    REG11,0(REG13)      SAVE LINK REGISTER
         BALR  REG11,0             BASE ADDRESS FOR THIS ROUTINE
         USING *,REG11             ADDRESSABILITY
         L     REG14,SCANPTR       LOAD ADDRESS OF DATA CHANGE
         L     REG9,CTLTABL        LOAD ADDRESS OF CONTROL TABLE
         LCR   REG15,REG15         CHANGE SIGN OF INPUT NUMBER
SRCHLOOP LH    REG10,0(REG9)       LOAD FIRST/NEXT CONTROL PARAMETER
         CR    REG10,REG14         IS CHANGE IN THIS SEGMENT OF DATA
         BL    ENDSLOOP            NO. GO STEP UP TO NEXT SEGMENT
         LTR   REG15,REG15         INSERTION OR DELETION ?
         BP    CAUCONT             DELETION. CARRY ON
         L     REG0,CTLTABL        LOAD START ADDRESS CTL TABLE
         AH    REG0,=AL2(2*NOCHKNO-2) LOAD ADDR FIRST OPND CTL ENTRY
         CR    REG9,REG0           TRYING TO INSERT INTO VERB PART ?
         BNE   SRNORMAL            NO. ALLOW NORMAL INSERTION
         CR    REG10,REG14         IS INSERTION TO STRT FRST OPERAND
         BE    ENDSLOOP            YES. DONT PUT IT HERE THEN
         B     SRNORMAL            OK. CARRY ON
CAUCONT  LA    REG1,0(REG14,REG15) LOAD END OFFSET OF CHANGE
         CR    REG10,REG1          DOES CHANGE EXTEND OUTSIDE THIS SEG
         BNL   SRNORMAL            NO. GO PERFORM NORMAL TABLE UPDATE
         STH   REG14,0(REG9)       SET NEW LENGTH OF THIS SEGMENT
         SR    REG10,REG14         CALCULATE LENGTH REMOVED HERE
         SR    REG15,REG10         CALCULATE LENGTH REMOVED NEXT SEG
         XR    REG14,REG14         SHOW THAT CHANGE HAS OVERFLOWED SEG
         LA    REG9,2(REG9)        ADDRESS NEXT ENTRY IN CTL TABLE
         B     SRCHLOOP            GO PROCESS NEXT SEGMENT
ENDSLOOP LA    REG9,2(REG9)        LOAD ADDRESS OF NEXT CTL TABLE ENTRY
         SR    REG14,REG10         SUBTRACT LENGTH THIS SEGMENT
         B     SRCHLOOP            GO PROCESS NEXT ENTRY IN TABLE
SRNORMAL SR    REG10,REG15         CALCULATE NEW LENGTH OF SEGMENT
         STH   REG10,0(REG9)       STORE NEW LENGTH IN TABLE
         L     REG11,0(REG13)      RELOAD LINK REGISTER
         BR    REG11               RETURN TO CALLER
         SPACE
         EJECT
***********************************************************************
*        DATA INSERTION ROUTINE                                       *
*                                                                     *
* PARMS  REG11 = RETURN ADDRESS TO CALLER                             *
*        REG15 = LENGTH OF DATA TO BE INSERTED                        *
*        REG0  = ADDRESS OF DATA TO BE INSERTED                       *
*        SCANPTR IS ASSUMED TO CONTAIN AFFSET TO POINT OF INSERTION   *
*        RECADD  IS ASSUMED TO POINT TO START OF COMPOSITE RECORD     *
*        RECEND  IS ASSUMED TO POINT TO LAST BYTE OF COMPOSITE RECORD *
***********************************************************************
         SPACE
         ENTRY JCLINS
JCLINS   DS    0H
         ST    REG11,0(REG13)      SAVE LINK REGISTER
         BALR  REG11,0             SET BASE ADDRESS OF THIS ROUTINE
         USING *,REG11             ADDRESSABILITY FOR THE ROUTINE
         ST    REG15,INSREG15      SAVE LENGTH REGISTER
         L     REG14,SCANPTR       LOAD OFFSET TO INSERTION POINT
         A     REG14,RECADD        GET ABSOLUTE ADDR OF THIS
         L     REG2,RECEND         LOAD ADDRESS OF LAST BYTE OF RECORD
         LA    REG1,0(REG15,REG2)  CALCULATE NEW END OF RECORD ADDRESS
         ST    REG1,RECEND         UPDATE CONTROL AREA
         SR    REG2,REG14          LOAD LENGTH OF DATA TO BE SHIFTED
         LA    REG15,0(REG14,REG15) LOAD ADDRESS OF 'MOVE TO' POINT
         LA    REG3,1              LOAD BXH REGISTER
         LCR   REG3,REG3           MAKE IT NEGATIVE
         IC    REG10,0(REG2,REG14) LOAD LAST BYTE OF DATA
         STC   REG10,0(REG2,REG15) STORE IT AT NEW END OF RECORD
         BXH   REG2,REG3,*-8       DO THIS FOR PRECEEDING BYTES
         SR    REG15,REG14         CALCULATE LENGTH OF GAP LEFT
         LR    REG1,REG15          LOAD SECOND LENGTH REGISTER
         MVCL  REG14,REG0          MOVE NEW DATA INTO GAP
         L     REG15,INSREG15      RELOAD LENGTH OF DATA
         L     REG2,=A(JCLCAU)     LOAD ADDRESS OF NEXT ROUTINE
         L     REG11,0(REG13)      RELOAD LINK REGISTER
         BR    REG2                GO UPDATE CONTROL AREAS
         SPACE
INSREG15 DS    F                   SAVE AREA FOR LENGTH REGISTER
         EJECT
***********************************************************************
*        SCAN ROUTINE. SETS SCANPTR TO A SPECIFIC LOCATION            *
*                                                                     *
* PARMS  REG11 = RETURN ADDRESS TO CALLER                             *
*        REG14 = ADDRESS OF SEARCH ARGUMENT                           *
*        REG15 = LENGTH OF SEARCH ARGUMENT                            *
*        SCANPTR IS ASSUMED TO CONTAIN THE START ADDRESS OF THE SCAN  *
***********************************************************************
         SPACE
         ENTRY JCLSCAN
JCLSCAN  DS    0H
         ST    REG11,0(REG13)      SAVE LINK REGISTER
         BALR  REG11,0             SET BASE REGISTER FOR THE ROUTINE
         USING *,REG11             ADDRESSABILITY
         L     REG1,SCANPTR        LOAD START ADDRESS FOR SCAN
         A     REG1,RECADD         LOAD ABSOLUTE ADDRESS OF THIS
         L     REG3,RECEND         LOAD ADDRESS LAST BYTE OF DATA
         LA    REG3,1(REG3)        LOAD ADDRESS OF END OF RECORD
         SR    REG3,REG15          LOAD ADDRESS OF LAST BYTE TO SCAN
         LA    REG2,1              SET INDEX REGISTER
         XR    REG10,REG10         CLEAR SCAN LENGTH ACCUMULATOR
         CR    REG3,REG1           IS THE SCAN RENGE VALID
         BNH   SCNERROR            NO. RETURN TO CALLER IN DISGUST
         BCT   REG15,*+10          SUBTRACT 1 FROM LENGTH REGISTER
         CLC   0(0,REG14),0(REG1) COMPARE THIS PART OF DATA AND ARG
         EX    REG15,*-6           EXECUTE THE COMPARE INSTRUCTION
         BE    SCNEXIT             YES. ARGUMENT IS FOUND
         LA    REG10,1(REG10)      INCREMENT THE ACCUMULATOR
         BXLE  REG1,REG2,*-12      LOOP DOWN THE REST OF THE RECORD
SCNNOTF  L     REG1,RECEND         LOAD ADDRESS OF END OF RECORD
         LA    REG1,1(REG1)        LOAD ADDRESS NEXT FREE BYTE
         S     REG1,RECADD         SET LENGTH FOR SCANPTR
         LA    REG10,0(REG15,REG10) LOAD LENGTH OF SHIFT
         CLI   *,X'96'             SET NOT EQUAL COND CODE
         B     SCNRETRN            RETURN TO CALLER
SCNEXIT  S     REG1,RECADD         CALCULATE SCANPTR OFFSET
         CLI   *,X'95'             SET EQUAL CONDITION CODE
SCNRETRN ST    REG1,SCANPTR        UPDATE THE SCAN POINTER
         LR    REG15,REG10         LOAD LENGTH OF SCAN SHIFT
         L     REG11,0(REG13)      RELOAD THE LINK REGISTER
         BR    REG11               RETURN TO CALLER
SCNERROR L     REG15,RECEND        LOAD ADDRESS LAST BYTE OF CARD
         LA    REG15,1(REG15)      LOAD ADDRESS OF END OF DATA
         SR    REG15,REG1          LENGTH FROM SCANPTR TO END OF CARD
         B     SCNNOTF             CARRY ON AS IF NOT FOUND
         EJECT
***********************************************************************
*        DATA DELETION ROUTINE. REMOVE SPECIFIED DATA FROM RECORD     *
*                                                                     *
* PARMS  REG11 = RETURN ADDRESS TO CALLER                             *
*        REG15 = LENGTH OF DATA TO BE REMOVED                         *
*        SCANPTR IS ASSUMED TO CONTAIN OFFSET TO POINT OF DELETION    *
***********************************************************************
         SPACE
         ENTRY JCLDEL
JCLDEL   DS    0H
         ST    REG11,0(REG13)      SAVE LINK REGISTER
         BALR  REG11,0             SET BASE ADDRESSS REGISTER
         USING *,REG11             ADDRESSABILITY
         ST    REG15,DELREG15      SAVE LENGTH REGISTER
         L     REG14,SCANPTR       LOAD OFFSET TO DELETION POINT
         A     REG14,RECADD        LOAD ABSOLUTE ADDRESS OF THIS POINT
         LA    REG0,0(REG15,REG14) LOAD ADDRESS OF BYTE AFTER DLTD DATA
         L     REG15,RECEND        LOAD ADDRESS LAST BYTE OF RECORD
         LA    REG15,1(REG15)      LOAD ADDRESS OF END OF RECORD
         LR    REG1,REG15          PREPARE SECOND LENGTH REGISTER
         SR    REG15,REG14         CALCULATE LENGTH DATA TO BE MOVED
         SR    REG1,REG0           CALCULATE LENGTH ADDED DATA + DLTD
         ICM   REG1,8,=C' '        PADDING CHARACTER FOR END OF REC
         MVCL  REG14,REG0          MOVE DATA FORWARD OVER DELETED DATA
         L     REG15,RECEND        LOAD OLD RECORD END ADDRESS
         S     REG15,DELREG15      SUBTRACT LENGTH DELETED
         ST    REG15,RECEND        REPLACE IN PARM AREA
         L     REG15,DELREG15      RELOAD LENGTH REGISTER
         LNR   REG15,REG15         MAKE IT NEGATEIVE TO SHOW DELETION
         L     REG2,=A(JCLCAU)     LOAD ADDRESS OF NEXT ROUTINE
         L     REG11,0(REG13)      LOAD LINK REGISTER
         BR    REG2                GO UPDATE CONTROL AREAS
         SPACE
DELREG15 DS    F                   SAVE AREA FOR LENGTH REGISTER
         EJECT
         LTORG
$PRMAREA DS    0F
USERAREA DS    CL256               USER WORK AREA
         DC    A(JCLCAU)           ADDRESS OF CONTROL AREA UPDATE RTN
         DC    A(JCLDEL)           ADDRESS OF JCL DELETE RTN
         DC    A(JCLSCAN)          ADDRESS OF JCL SCAN ROUTINE
         DC    A(JCLINS)           ADDRESS OF JCL INSERT RTN
VERB     DS    CL8                 VERB ON PRESENT JCL CARD
MEMNAMEX DC    CL8' '              NAME OF CURRENT PROCEDURE
STEPNAME DC    CL8' '              NAME OF STEP
CARDNAME DC    CL8' '              NAME ON CARD
SCANPTR  DS    F                   CURRENT SETSCAN MACRO SETTING
RECADD   DS    F                   ADDRESS OF FIRST BYTE OF DATA
RECEND   DS    F                   ADDRESS OF LAST BYTE OF DATA
CTLTABL  DC    A(LINEMARK)         ADDRESS OF LINE CTL TABLE
WKAREA   DS    F                   GENREAL WORK AREA
         END
//LKED.SYSLMOD DD DSN=SYS2.TESTLIB,DISP=SHR
  NAME UT509(R)
