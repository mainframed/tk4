         TITLE 'LOVSMFUT - CPU UTILISATION'
***********************************************************************
*        AUTHOR       - WILSON ADAMS.
*                       STANDARD LIFE ASSURANCE CO.
*                       3 GEORGE STREET.
*                       EDINBURGH.
*                       EH2 2XZ.
*
*        MEMBER NAME  - LOVSMFUT.
*        ENTRY POINT  - LOVSMFUT.
*        LANGUAGE     - ASSEMBLER.
*        DATE WRITTEN - 2ND MARCH 1978.
*
*              THIS PROGRAM PRODUCES CPU UTILISATION STATISTICS.  THESE
*        STATISTICS CONSIST OF THE NO. OF TRANSACTIONS, ELAPSED, WAIT,
*        IMS CPU AND JOB CPU TIMES, TOTAL CPU, IMS CPU AND VS CPU
*        USAGE, AND THE PAGING RATE/SECOND.  THE TOTAL CPU, IMS CPU AND
*        VS CPU USAGE ARE COMPUTED BY THE FOLLOWING FORMULAE:-
*
*              (ELAPSED TIME-WAIT TIME)/ELAPSED TIME*100
*
*              IMS CPU TIME/ELAPSED TIME*100
*
*              (ELAPSED TIME-(WAIT TIME+JOB CPU TIME+IMS CPU TIME))/
*              ELAPSED TIME*100
*
*              THE EXEC PARM FIELD SPECIFIES THE DATE, START AND STOP
*        TIMES OF THE PERIOD IN WHICH CPU UTILISATION STATISTICS ARE TO
*        BE PRODUCED.  THE LAST TWO PARAMETERS, WHICH ARE OPTIONAL,
*        SPECIFY THE IMS CPU TIME AND THE NO. OF TRANSACTIONS.  THE
*        EXEC PARM FIELD HAS THE FOLLOWING FORMAT:-
*
*              PARM='YYDDD,HH.TTT,HH.TTT,HH.MM.SS,NNNNNNNN'
*
*        'HH.TTT' IS HOURS AND THOUSANDTHS HOURS.  THE LAST PARAMETER
*        CAN BE FROM ONE TO EIGHT BYTES LONG.
*
*              SMF RECORD TYPES 1, 4 AND 12 ARE READ FROM THE
*        ACCUMULATION TAPE FOR THE TWO DAYS STARTING WITH THE DAY
*        SPECIFIED IN THE EXEC PARM FIELD.  THESE RECORDS ARE SORTED IN
*        CHRONOLOGICAL ORDER BY THE SORT PROGRAM.  RECORD TYPES 1 AND
*        12 MUST PRECEDE THE TYPE 4  RECORDS.
*
*              THE START AND STOP TIMES ARE ADJUSTED TO THE TIME OF THE
*        INTERVAL SPECIFIED ON THE TYPE 1 OR 12 RECORD IMMEDIATELY
*        FOLLOWING THE TIME SPECIFIED ON THE EXEC PARM FIELD.  THE TYPE
*        1 AND 12 RECORDS SUPPLY THE WAIT TIME AND PAGING INFORMATION.
*        THE TYPE 4 RECORDS SUPPLY THE STEP CPU TIME.  A PROPORTION OF
*        THE STEP CPU TIME IS ACCUMULATED IF THE ENTIRE STEP DID NOT
*        EXECUTE WITHIN THE NEWLY ADJUSTED TIME INTERVAL.
*
*              LOVSMFUT LINKS TO THE SORT PROGRAM.  THE SORTIN AND
*        SORTOUT DATA SETS ARE REQUIRED AS NO EXITS ARE PROVIDED.  THE
*        SORT PARAMETER LIST SPECIFIES A CORE SIZE OF 32K.
         EJECT
*              THE PRINTED OUTPUT CONSISTS OF TWO DESCRIPTIVE HEADINGS
*        AND NINE LINES EACH DESCRIBING A STATISTIC.  THERE ARE FOUR
*        GROUPS OF STATISTICS, NO. OF TRANSACTIONS, TIMES, CPU USAGE
*        AND PAGING RATE/SECOND, EACH SEPARATED BY A BLANK LINE.  AN
*        ERROR MESSAGE IS PRODUCED IF THE EXEC PARM FIELD IS INVALID.
*
*              THIS PROGRAM USES THE CLOSE, DCB, GET, LINK, OPEN AND
*        PUT IBM MACRO INSTRUCTIONS, AND THE DATEA, RETURNA AND SAVEC
*        USER MACRO INSTRUCTIONS.
*
*              THE DATEA, RETURNA AND SAVEC USER MACROS CORRESPOND TO
*        GUIDE GOODIES MEMBERS U620353M, U620354M AND U620355M,
*        RESPECTIVELY.
*
*              LOVSMFUT IS ALWAYS TERMINATED WITH RETURN CODE ZERO.
*        THERE ARE NO ABEND CODES.
*
*        REGISTER USAGE.
*
*        REG 0 USED BY SYSTEM AND FIXED POINT OPERATIONS.
*        REG 1 USED BY SYSTEM, ADDRESS OF PARAMETERS, USED BY TRT
*              INSTRUCTION AND USED IN FIXED POINT OPERATIONS.
*        REG 2 USED BY TRT INSTRUCTION.
*        REG 3 BRANCH ON COUNT REGISTER.
*        REG 4 USED TO ADDRESS DAYS IN MONTH WHEN LOOPING.
*        REG 5 ACCUMULATED WAIT TIME.
*        REG 6 ACCUMULATED JOB CPU TIME.
*        REG 7 ACCUMULATED NO. OF PAGE-INS AND PAGE-OUTS.
*        REG 8 JOB STOP TIME IN HUNDREDTHS OF A SECOND.
*        REG 9 JOB START TIME IN HUNDREDTHS OF A SECOND.
*        REG10 EXEC PARM FIELD ADDRESS.
*        REG11 NOT USED.
*        REG12 SECOND BASE REGISTER.
*        REG13 SAVE AREA ADDRESS AND FIRST BASE REGISTER.
*        REG14 RETURN POINT ADDRESS.
*        REG15 ENTRY POINT ADDRESS AND RETURN CODE.
***********************************************************************
         EJECT
***********************************************************************
* TOP SECTION.
         PRINT NOGEN
LOVSMFUT SAVEC N=2                 SEE GUIDE GOODIES MEMBER U620355M.
         L     R10,0(R1)           GET EXEC PARM INFORMATION.
         USING PARMS,R10
         BAL   R14,PARA            VALIDATE EXEC PARM INFORMATION.
         LTR   R15,R15             IF PARM INFORMATION INVALID,
         BNZ   TOP                 PRINT AN ERROR MESSAGE.
         BAL   R14,PROC            READ SMF TAPE.
         LTR   R15,R15             IF NO RECORDS FOUND,
         BNZ   TOP                 PRINT AN ERROR MESSAGE.
         BAL   R14,CALC            PERFORM CALCULATIONS.
TOP      BAL   R14,PRINTER
         RETURNA RC=0              SEE GUIDE GOODIES MEMBER U620354M.
***********************************************************************
         EJECT
***********************************************************************
* PARM INFORMATION VALIDATION SECTION.
PARA     ST    R14,PARASV
         LA    R15,4
         CLC   PARMLEN,=H'19'
         BE    PARA1
         CLC   PARMLEN,=H'28'      IF PARM LENGTH INVALID,
         BL    PARAEND             PRINT AN ERROR MESSAGE.
         CLC   PARMLEN,=H'29'
         BE    PARAEND
         MVC   MESSAGE(34),=CL34'PARAMETERS NOT SEPARATED BY COMMAS'
         CLI   PARMSEP3,C','       IF PARMS. NOT SEPARATED BY COMMAS,
         BNE   PARAEND             PRINT AN ERROR MESSAGE.
         MVC   MESSAGE(34),=CL34'IMS CPU TIME INVALID'
         CLI   IMSHH+2,C'.'        IF IMS CPU TIME INVALID,
         BNE   PARAEND             PRINT AN ERROR MESSAGE.
         CLI   IMSMM+2,C'.'
         BNE   PARAEND
         TRT   IMSHH,TRTTBL
         BNZ   PARAEND             HOURS NON NUMERIC.
         CLC   IMSHH,=CL2'24'
         BNL   PARAEND             HOURS GREATER THAN 23.
         TRT   IMSMM,TRTTBL
         BNZ   PARAEND             MINUTES NON NUMERIC.
         CLC   IMSMM,=CL2'60'
         BNL   PARAEND             MINUTES GREATER THAN 59.
         TRT   IMSSEC,TRTTBL
         BNZ   PARAEND             SECONDS NON NUMERIC.
         CLC   IMSSEC,=CL2'60'
         BNL   PARAEND             SECONDS GREATER THAN 59.
         PACK  IMSCPUTM,IMSSEC     CONVERT IMS CPU TIME TO SECONDS.
         PACK  PKFLD,IMSMM
         MP    PKFLD,=P'60'
         AP    IMSCPUTM,PKFLD
         PACK  PKFLD,IMSHH
         MP    PKFLD,=P'3600'
         AP    IMSCPUTM,PKFLD
         SRP   IMSCPUTM,2,0        MULTIPLY BY 100.
         MVC   IMSTIME,IMSHH       MOVE IMS CPU TIME TO PRINT LINE.
         CLC   PARMLEN,=H'28'      IF NO. OF TRANSACTIONS NOT SPECIFIED
         BE    PARA1               BRANCH TO PARA1.
         MVC   MESSAGE(34),=CL34'PARAMETERS NOT SEPARATED BY COMMAS'
         CLI   PARMSEP4,C','       IF PARMS. NOT SEPARATED BY COMMAS,
         BNE   PARAEND             PRINT AN ERROR MESSAGE.
         MVC   MESSAGE(34),=CL34'NUMBER OF TRANSACTIONS INVALID'
         LH    R0,PARMLEN
         SH    R0,=H'30'
         STC   R0,*+5              SET NEXT INSTRUCTION'S LENGTH.
         TRT   NUMTRANS,TRTTBL     IF NO. OF TRANSACTIONS INVALID,
         BNZ   PARAEND             PRINT AN ERROR MESSAGE.
         STC   R0,*+5              SET NEXT INSTRUCTION'S LENGTH.
         MVC   TRANSCT,NUMTRANS
PARA1    MVC   MESSAGE(34),=CL34'DATE INVALID'
         TRT   PARMDATE,TRTTBL     IF DATE INVALID,
         BNZ   PARAEND             PRINT AN ERROR MESSAGE.
         PACK  PKFLD,PARMDATE(2)   PACK YEAR.
         DP    PKFLD,=P'4'
         CLI   PKFLD+3,X'0C'       IF NOT A LEAP YEAR,
         BNE   PARA2               BRANCH TO PARA2.
         AP    DAYSYEAR,=P'1'
         ZAP   DAYS+2,=P'29'
PARA2    PACK  PKDATE,PARMDATE
         CP    PKDATE+2(2),DAYSYEAR IF NO. OF DAYS GREATER THAN 365 UR
         BH    PARAEND             366, BRANCH TO PARAEND.
         PACK  DAY,PARMDATE+2(3)   CONVERT JULIAN DATE IN PARM FIELD TO
         MVC   YEAR,PARMDATE       THE FORM 'DD/MM/YY'.
         LA    R3,11
         LA    R4,DAYS
PARA3    SP    DAY,0(2,R4)         CONVERT DAYS INTO DAYS AND MONTHS.
         BNP   PARA4
         AP    MONTH,=P'1'
         LA    R4,2(R4)
         BCT   R3,PARA3
PARA4    AP    DAY,0(2,R4)
         UNPK  MONTH,MONTH
         UNPK  DAY,DAY
         OC    DAY+1(4),=XL4'F00000F0'
         MVC   MESSAGE(34),=CL34'PARAMETERS NOT SEPARATED BY COMMAS'
         CLI   PARMSEP1,C','       IF PARMS. NOT SEPARATED BY COMMAS,
         BNE   PARAEND             PRINT AN ERROR MESSAGE.
         CLI   PARMSEP2,C','
         BNE   PARAEND
         MVC   MESSAGE(34),=CL34'START TIME INVALID'
         TRT   STARTHH,TRTTBL      IF START TIME INVALID,
         BNZ   PARAEND             PRINT AN ERROR MESSAGE.
         CLC   STARTHH,=CL2'24'
         BNL   PARAEND             HOURS GREATER THAN 23.
         PACK  STARTIME,STARTHH
         SRP   STARTIME,3,0        MULTIPLY BY 1000.
         CLI   STARTHH+2,C'.'
         BNE   PARAEND
         TRT   STARTTHS,TRTTBL
         BNZ   PARAEND
         PACK  PKFLD,STARTTHS
         AP    STARTIME,PKFLD
         MP    STARTIME,=P'360'    CONVERT TO 100TH SECONDS.
         CVB   R9,STARTIME
         ZAP   STARDATE,PKDATE
         OI    STARDATE+3,X'0F'
         ST    R9,STRTIME
         MVC   MESSAGE(34),=CL34'STOP TIME INVALID'
         TRT   STOPHH,TRTTBL       IF STOP TIME INVALID,
         BNZ   PARAEND             PRINT AN ERROR MESSAGE.
         CLC   STOPHH,=CL2'24'
         BNL   PARAEND             HOURS GREATER THAN 23.
         PACK  STOPTIME,STOPHH
         SRP   STOPTIME,3,0        MULTIPLY BY 1000.
         CLI   STOPHH+2,C'.'
         BNE   PARAEND
         TRT   STOPTHS,TRTTBL
         BNZ   PARAEND
         PACK  PKFLD,STOPTHS
         AP    STOPTIME,PKFLD
         AP    STOPTIME,=P'1'
         MP    STOPTIME,=P'360'    CONVERT TO 100TH SECONDS.
         CVB   R8,STOPTIME
         ZAP   STOPDATE,PKDATE
         OI    STOPDATE+3,X'0F'
         ST    R8,STPTIME
         MVC   MESSAGE(34),=CL34'STOP TIME NOT AFTER START TIME'
         CR    R8,R9               IF STOP TIME NOT AFTER START TIME,
         BNH   PARAEND             PRINT AN ERROR MESSAGE.
         SR    R15,R15
PARAEND  L     R14,PARASV
         BR    R14
***********************************************************************
         EJECT
***********************************************************************
* SMF TAPE PROCESSING SECTION.
PROC     ST    R14,PROCSV
         OPEN  (SMFTAPE,,SORTIN,(OUTPUT))
PROC1    GET   SMFTAPE
         MVC   SMFREC,4(R1)
         CLI   RECTYPE,X'01'       IF A TYPE 1 SMF RECORD,
         BE    PROC2               BRANCH TO PROC2.
         CLI   RECTYPE,X'0C'       IF NOT A TYPE 12 SMF RECORD,
         BNE   PROC1A              BRANCH TO PROC1A.
         MVI   RECTYPE,X'01'       INDICATE A TYPE 1 SMF RECORD.
         B     PROC2
PROC1A   CLI   RECTYPE,X'04'       IF NOT A TYPE 4 SMF RECORD,
         BNE   PROC1               READ NEXT RECORD.
         AH    R1,DEVENTLN         LOCATE STEP CPU TIME.
         MVC   SMFCPUTM,106(R1)    MOVE IN STEP CPU TIME.
PROC2    CP    SMFDATE,PKDATE      IF SMF RECORD BEFORE REQUESTED DATE,
         BL    PROC1               READ NEXT RECORD.
         ZAP   WKDATE,SMFDATE
         SP    WKDATE,PKDATE
         CP    WKDATE,=P'1'        IF SMF RECORD MORE THAN 1 DAY AFTER
         BH    PROC1               REQUESTED DATE, READ NEXT RECORD.
PROC2A   AP    RECCT,=P'1'
         PUT   SORTIN,SMFREC
         B     PROC1
PROC3    CLOSE (SMFTAPE,,SORTIN)
         LA    R15,4
         MVC   MESSAGE(34),=CL34'NO RECORDS OR SORT FAILURE'
         CP    RECCT,=P'0'
         BE    PROCEND
         UNPK  FILSZ,RECCT
         OI    FILSZ+4,X'F0'
         LINK  EP=SORT,PARAM=(SORTPARM+2),VL=1
PROCEND  L     R14,PROCSV
         BR    R14
***********************************************************************
         EJECT
***********************************************************************
* CALCULATIONS SECTION.
CALC     ST    R14,CALCSV
         OPEN  (SORTOUT)
         SR    R5,R5
         SR    R6,R6
         SR    R7,R7
CALC1    GET   SORTOUT,SMFREC
         CLI   RECTYPE,X'04'       IF AN SMF RECORD TYPE 4,
         BE    CALCEND             BRANCH TO CALCEND
         ZAP   WKSMFDTE,SMFDATE
         MVC   FULLWORD,EXPTIME
         CLC   SMFTIME,EXPTIME     IF INTERVAL EXPIRY TIME NOT BEFORE
         BNL   CALC1A              MIDNIGHT, BRANCH TO CALC1A.
         SP    WKSMFDTE,=P'1'
CALC1A   OI    WKSMFDTE+3,X'0F'
         CLC   WKSMFDTE(8),STARDATE IF SMF RECORD BEFORE REQUESTED
         BL    CALC1               INTERVAL, READ NEXT RECORD.
         MVC   STARDATE(8),WKSMFDTE
         L     R9,STRTIME          OBTAIN NEW START TIME.
         CVD   R9,STARTIME
CALC2    GET   SORTOUT,SMFREC
         CLI   RECTYPE,X'04'       IF AN SMF RECORD TYPE 4,
         BE    CALCEND             BRANCH TO CALCEND.
         MVC   FULLWORD,WAITTIME
         A     R5,FULLWORD
         MVC   FULLWORD,PAGEINS
         A     R7,FULLWORD
         MVC   FULLWORD,PAGEOUTS
         A     R7,FULLWORD
         ZAP   WKSMFDTE,SMFDATE
         MVC   FULLWORD,EXPTIME
         CLC   SMFTIME,EXPTIME     IF INTERVAL EXPIRY TIME NOT BEFORE
         BNL   CALC3               MIDNIGHT, BRANCH TO CALC3.
         SP    WKSMFDTE,=P'1'
CALC3    OI    WKSMFDTE+3,X'0F'
         CLC   WKSMFDTE(8),STOPDATE IF SMF RECORD WITHIN REQUESTED
         BL    CALC2               INTERVAL, READ NEXT RECORD.
         MVC   STOPDATE(8),WKSMFDTE
         L     R8,STPTIME          OBTAIN NEW STOP TIME.
         CVD   R8,STOPTIME
CALC4    GET   SORTOUT,SMFREC
         CLI   RECTYPE,X'04'       IF NOT AN SMF RECORD TYPE 4,
         BNE   CALC4               READ NEXT RECORD.
         ZAP   WKSMFDTE,SMFDATE
         OI    WKSMFDTE+3,X'0F'
         MVC   FULLWORD,SMFTIME
         ZAP   WKDATE,STEPSRDT
         OI    WKDATE+3,X'0F'
         MVC   WKTIME,STEPSRTM
         CLC   WKSMFDTE(8),STARDATE IF SMF RECORD BEFORE REQUESTED
         BNH   CALC4               INTERVAL, READ NEXT RECORD.
         CLC   WKDATE(8),STOPDATE  IF STEP STARTED AFTER REQUESTED
         BNL   CALC4               INTERVAL, READ NEXT RECORD.
         L     R14,FULLWORD        LOAD STEP STOP TIME INTO REG. 14.
         CLC   WKSMFDTE(8),STOPDATE IF STEP STOPPED WITHIN REQUESTED
         BNH   CALC4A              INTERVAL, BRANCH TO CALC4A.
         LR    R14,R8              LOAD STOP TIME INTO REG. 14.
CALC4A   L     R15,WKTIME          LOAD STEP START TIME INTO REG. 15.
         CLC   WKDATE(8),STARDATE  IF STEP STARTED WITHIN REQUESTED
         BNL   CALC4B              INTERVAL, BRANCH TO CALC4B.
         LR    R15,R9              LOAD START TIME INTO REG. 15.
CALC4B   SR    R14,R15             SUBTRACT START TIME FROM STOP TIME.
         BP    CALC5               STEP EXECUTED IN SAME DAY.
         A     R14,=F'8640000'     ADD ON 24 HOURS.
CALC5    L     R15,FULLWORD        LOAD STEP STOP TIME INTO REG. 15.
         S     R15,WKTIME          SUBTRACT STEP START TIME.
         BP    CALC5A              STEP EXECUTED IN SAME DAY.
         A     R15,=F'8640000'     ADD ON 24 HOURS TO INTERVAL.
CALC5A   SR    R0,R0
         L     R1,SMFCPUTM         LOAD STEP CPU TIME INTO REG. 1.
         LA    R1,0(R1)            ZEROISE HIGH ORDER BYTE.
         CR    R14,R15             IF STEP EXECUTED WITHIN REQUESTED
         BNL   CALC5B              INTERVAL, BRANCH TO CALC5B.
         MR    R0,R14              COMPUTE PROPORTION OF STEP CPU TIME
         DR    R0,R15              TO BE ACCUMULATED.
         LA    R15,1(R15)          ADD 1 TO DIVISOR.
         SRA   R15,1               DIVIDE BY 2.
         SR    R15,R0              SUBTRACT REMAINDER.
         BP    CALC5B
         LA    R1,1(R1)            ROUND UP.
CALC5B   AR    R6,R1               ACCUMULATE STEP CPU TIME.
         B     CALC4               READ NEXT RECORD.
CALC6    CLOSE (SORTOUT)
         ZAP   ELAPTIME,STOPTIME   COMPUTE ELAPSED TIME.
         SP    ELAPTIME,STARTIME
         BP    CALC6A              ELAPSED TIME WITHIN SAME DAY.
         AP    ELAPTIME,=P'8640000' ADD ON 24 HOURS TO INTERVAL.
CALC6A   LR    R1,R5               LOAD TOTAL WAIT TIME INTO REG. 1.
         CLC   PARMLEN,=H'19'      IF IMS CPU TIME SPECIFIED,
         BE    CALC7               ADD TOTAL JOB CPU TIME AND IMS CPU
         ALR   R1,R6               TIME TO TOTAL WAIT TIME.
         CVB   R0,IMSCPUTM
         ALR   R1,R0
         ZAP   CPUUTIL,ELAPTIME
         CVD   R1,CONVDEC
         SP    CPUUTIL,CONVDEC    COMPUTE VS OVERHEAD.
         SRP   CPUUTIL,3,0         MULTIPLY BY 1000.
         ZAP   CONVDEC,ELAPTIME
         DP    CPUUTIL,CONVDEC
         SRP   CPUUTIL(8),63,5     ROUND TO NEAREST PER. CENT.
         MVC   VSOVHD,PERCENT
         ED    VSOVHD,CPUUTIL+6
         MVI   VSOVHD+4,C'%'
         ZAP   CPUUTIL,IMSCPUTM    COMPUTE IMS OVERHEAD.
         SRP   CPUUTIL,3,0         MULTIPLY BY 1000.
         DP    CPUUTIL,ELAPTIME
         SRP   CPUUTIL(8),63,5     ROUND TO NEAREST PER. CENT.
         MVC   IMSOVHD,PERCENT
         ED    IMSOVHD,CPUUTIL+6
         MVI   IMSOVHD+4,C'%'
CALC7    ZAP   CPUUTIL,ELAPTIME
         CVD   R5,CONVDEC          CONVERT WAIT TIME TO DECIMAL.
         SP    CPUUTIL,CONVDEC    COMPUTE CPU UTILISATION.
         SRP   CPUUTIL,3,0         MULTIPLY BY 1000.
         ZAP   CONVDEC,ELAPTIME
         DP    CPUUTIL,CONVDEC
         SRP   CPUUTIL(8),63,5     ROUND TO NEAREST PER CENT.
         ED    PERCENT,CPUUTIL+6
         SRP   ELAPTIME,62,5       ROUND TO NEAREST SECOND.
         CVD   R7,CONVDEC          CONVERT PAGE EXCEPTIONS TO DECIMAL.
         ZAP   CPUUTIL,CONVDEC
         SRP   CPUUTIL,2,0         MULTIPLY BY 100.
         DP    CPUUTIL,ELAPTIME    COMPUTE PAGING RATE/SECOND.
         SRP   CPUUTIL(8),63,5     ROUND TO NEAREST DECIMAL POINT.
         ED    PAGERATE,CPUUTIL+6
         DP    ELAPTIME,=P'60'     CONVERT ELAPSED TIME INTO HH.MM.SS.
         DP    ELAPTIME(6),=P'60'
         UNPK  ELAPHH,ELAPTIME(4)
         UNPK  ELAPMM,ELAPTIME+4(2)
         UNPK  ELAPSS,ELAPTIME+6(2)
         OC    ELAPHH+1(7),=XL7'F00000F00000F0'
         CVD   R5,CONVDEC          CONVERT WAIT TIME TO DECIMAL.
         SRP   CONVDEC,62,5        ROUND TO NEAREST SECOND.
         DP    CONVDEC,=P'60'      CONVERT WAIT TIME TO HH.MM.SS.
         DP    CONVDEC(6),=P'60'
         UNPK  WAITHH,CONVDEC(4)
         UNPK  WAITMM,CONVDEC+4(2)
         UNPK  WAITSS,CONVDEC+6(2)
         OC    WAITHH+1(7),=XL7'F00000F00000F0'
         CVD   R6,CONVDEC          CONVERT JOB CPU TIME TO DECIMAL.
         SRP   CONVDEC,62,5        ROUND TO NEAREST SECOND.
         DP    CONVDEC,=P'60'      CONVERT JOB CPU TIME TO HH.MM.SS.
         DP    CONVDEC(6),=P'60'
         UNPK  JOBCPUHH,CONVDEC(4)
         UNPK  JOBCPUMM,CONVDEC+4(2)
         UNPK  JOBCPUSS,CONVDEC+6(2)
         OC    JOBCPUHH+1(7),=XL7'F00000F00000F0'
         SRP   STARTIME,62,5       ROUND TO NEAREST SECOND.
         DP    STARTIME,=P'60'     CONVERT START TIME TO HH.MM.SS.
         DP    STARTIME(6),=P'60'
         UNPK  STARTHRS,STARTIME(4)
         UNPK  STARTMIN,STARTIME+4(2)
         UNPK  STARTSEC,STARTIME+6(2)
         OC    STARTHRS+1(7),=XL7'F00000F00000F0'
         SRP   STOPTIME,62,5       ROUND TO NEAREST SECOND.
         DP    STOPTIME,=P'60'     CONVERT STOP TIME TO HH.MM.SS.
         DP    STOPTIME(6),=P'60'
         UNPK  STOPHRS,STOPTIME(4)
         UNPK  STOPMIN,STOPTIME+4(2)
         UNPK  STOPSEC,STOPTIME+6(2)
         OC    STOPHRS+1(7),=XL7'F00000F00000F0'
         MVC   MESSAGE,HDRMSG
CALCEND  L     R14,CALCSV
         BR    R14
***********************************************************************
         EJECT
***********************************************************************
* PRINT SECTION.
PRINTER  ST    R14,PRINTSV
         OPEN  (PRINT,(OUTPUT))
         DATEA DATE,TIME           SEE GUIDE GOODIES MEMBER U620353M.
         XC    TIME+2(7),=XL7'8300009F0000A2'
         PUT   PRINT,HEADING1
         PUT   PRINT,HEADING2
         CLC   MESSAGE,HDRMSG      IF AN ERROR MESSAGE PRINTED,
         BNE   PRINTER1            BRANCH TO PRINTER1.
         MVC   PRTMSG,MESSAGE1     PRINT NO. OF TRANSACTIONS.
         PUT   PRINT,PRTREC
         MVI   PRTREC,C'0'         INDICATE DOUBLE LINE SPACING.
         MVC   PRTMSG,MESSAGE2     PRINT ELAPSED TIME.
         PUT   PRINT,PRTREC
         MVI   PRTREC,C' '         INDICATE SINGLE LINE SPACING.
         MVC   PRTMSG,MESSAGE3     PRINT WAIT TIME.
         PUT   PRINT,PRTREC
         MVC   PRTMSG,MESSAGE4     PRINT IMS CPU TIME.
         PUT   PRINT,PRTREC
         MVC   PRTMSG,MESSAGE5     PRINT JOB CPU TIME.
         PUT   PRINT,PRTREC
         MVI   PRTREC,C'0'         INDICATE DOUBLE LINE SPACING.
         MVC   PRTMSG,MESSAGE6     PRINT TOTAL CPU USAGE.
         PUT   PRINT,PRTREC
         MVI   PRTREC,C' '         INDICATE SINGLE LINE SPACING.
         MVC   PRTMSG,MESSAGE7     PRINT IMS CPU USAGE.
         PUT   PRINT,PRTREC
         MVC   PRTMSG,MESSAGE8     PRINT VS CPU USAGE.
         PUT   PRINT,PRTREC
         MVI   PRTREC,C'0'         INDICATE DOUBLE LINE SPACING.
         MVC   PRTMSG,MESSAGE9     PRINT PAGING RATE/SECOND.
         PUT   PRINT,PRTREC
PRINTER1 CLOSE (PRINT)
         L     R14,PRINTSV
         BR    R14
***********************************************************************
         EJECT
***********************************************************************
         LTORG
***********************************************************************
         EJECT
***********************************************************************
         DS    0D
TRTTBL   DC    240XL1'FF',XL10'00',6XL1'FF'
CPUUTIL  DC    PL16'0'
CONVDEC  DS    D
IMSCPUTM DC    PL8'0'
STARTIME DS    D
STOPTIME DS    D
ELAPTIME DS    D
STARDATE DS    PL4
STRTIME  DS    F
STOPDATE DS    PL4
STPTIME  DS    F
WKSMFDTE DS    PL4
FULLWORD DS    F
WKDATE   DS    PL4
WKTIME   DS    F
PARASV   DS    F
PROCSV   DS    F
CALCSV   DS    F
PRINTSV  DS    F
PKFLD    DS    PL4
PKDATE   DS    PL4
RECCT    DC    PL4'0'
DAYS     DC    PL2'31,28,31,30,31,30,31,31,30,31,30,0'
SORTPARM DC    A(28,SORTA,SORTB,RECA,RECB,0,0)
         DC    XL4'00008000'
SORTA    DC    CL48' SORT FIELDS=(2,1,FI,A,7,4,PD,A,3,4,FI,A),FILSZ='
FILSZ    DS    CL5
         DC    CL7',EQUALS'
SORTB    DC    CL1' '
RECA     DC    CL14' RECORD TYPE=F'
RECB     DS    CL1' '
DAYSYEAR DC    PL2'365'
         DS    0F
SMFREC   DS    0CL116
         DS    CL1
RECTYPE  DS    XL1
SMFTIME  DS    BL4
SMFDATE  DS    PL4
         DS    CL4
WAITTIME DS    BL4
EXPTIME  DS    BL4
PAGEINS  DS    BL4
PAGEOUTS DS    BL4
         DS    XL9
STEPSRTM DS    BL4
STEPSRDT DS    PL4
         DS    XL55
DEVENTLN DS    H
         DS    CL8
SMFCPUTM DS    BL4
HEADING1 DS    0CL133
         DC    CL41'1STANDARD LIFE ASSURANCE CO.        DATE '
DATE     DS    CL8
         DC    CL13'        TIME '
TIME     DS    CL9
         DC    CL62' '
HEADING2 DS    0CL133
         DC    CL30'0CPU UTILISATION STATISTICS - '
MESSAGE  DC    CL42'EXEC PARM FIELD LENGTH INVALID'
         DC    CL61' '
PRTREC   DS    0CL133
         DC    CL1'-'
PLINE    DS    0CL132
PRTMSG   DS    CL33
         DC    CL99' '
HDRMSG   DS    0CL42
         DC    CL4'FOR '
DAY      DS    PL2
         DC    CL1'/'
MONTH    DC    PL2'1'
         DC    CL1'/'
YEAR     DS    CL2
         DC    CL9' BETWEEN '
STARTHRS DS    CL2
         DC    CL1'.'
STARTMIN DS    CL2
         DC    CL1'.'
STARTSEC DS    CL2
         DC    CL5' AND '
STOPHRS  DS    CL2
         DC    CL1'.'
STOPMIN  DS    CL2
         DC    CL1'.'
STOPSEC  DS    CL2
MESSAGE1 DC    CL25'NUMBER OF TRANSACTIONS - '
TRANSCT  DC    CL8'N/A'
MESSAGE2 DC    CL23'ELAPSED TIME',CL2'-'
ELAPHH   DS    CL2
         DC    CL1'.'
ELAPMM   DS    CL2
         DC    CL1'.'
ELAPSS   DS    CL2
MESSAGE3 DC    CL23'WAIT TIME',CL2'-'
WAITHH   DS    CL2
         DC    CL1'.'
WAITMM   DS    CL2
         DC    CL1'.'
WAITSS   DS    CL2
MESSAGE4 DC    CL23'IMS CPU TIME',CL2'-'
IMSTIME  DC    CL8'N/A'
MESSAGE5 DC    CL23'JOB CPU TIME',CL2'-'
JOBCPUHH DS    CL2
         DC    CL1'.'
JOBCPUMM DS    CL2
         DC    CL1'.'
JOBCPUSS DS    CL2
MESSAGE6 DC    CL23'TOTAL CPU USAGE',CL1'-'
PERCENT  DC    XL4'40202120'
         DC    CL5'%'
MESSAGE7 DC    CL23'IMS CPU USAGE',CL1'-'
IMSOVHD  DC    CL4' N/A'
         DC    CL5' '
MESSAGE8 DC    CL23'VS CPU USAGE',CL1'-'
VSOVHD   DC    CL4' N/A'
         DC    CL5' '
MESSAGE9 DC    CL23'PAGING RATE/SECOND',CL1'-'
PAGERATE DC    XL5'4021204B20'
         DC    CL4' '
SMFTAPE  DCB                                                           C
               BFTEK=A,                                                C
               DDNAME=SMFTAPE,                                         C
               DSORG=PS,                                               C
               EODAD=PROC3,                                            C
               MACRF=GL
SORTIN   DCB                                                           C
               BLKSIZE=1160,                                           C
               DDNAME=SORTIN,                                          C
               DSORG=PS,                                               C
               LRECL=116,                                              C
               MACRF=PM,                                               C
               RECFM=FB
SORTOUT  DCB                                                           C
               DDNAME=SORTOUT,                                         C
               DSORG=PS,                                               C
               EODAD=CALC6,                                            C
               MACRF=GM
PRINT    DCB                                                           C
               BLKSIZE=1330,                                           C
               DDNAME=PRINT,                                           C
               DSORG=PS,                                               C
               LRECL=133,                                              C
               MACRF=PM,                                               C
               RECFM=FBA
***********************************************************************
         EJECT
***********************************************************************
PARMS    DSECT
PARMLEN  DS    H
PARMDATE DS    CL5
PARMSEP1 DS    CL1
STARTHH  DS    CL2
         DS    CL1
STARTTHS DS    CL3
PARMSEP2 DS    CL1
STOPHH   DS    CL2
         DS    CL1
STOPTHS  DS    CL3
PARMSEP3 DS    CL1
IMSHH    DS    CL2
         DS    CL1
IMSMM    DS    CL2
         DS    CL1
IMSSEC   DS    CL2
PARMSEP4 DS    CL1
NUMTRANS DS    CL8
***********************************************************************
         END
