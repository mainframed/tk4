*         3330 - 3350 CONVERSION AID
* NN03 AND SPACE CONSTITUTE A PROGRAM TO PUNCH COPY DECKS (GENER/ISAM)
* FOR SEQUENTIAL AND INDEXED SEQUENTIAL DATA SETS. THE NECESSARY
* INFORMATION IS DERIVED FROM A RECORD - BUILT ELSEWHERE - WHOSE CONTENT
* ARE DERIVED FROM A VTOC RECORD (CAMLST AND OBTAIN MACROS). THE SPACE
* ALGORITHM USES INPUT BLOCK SIZE TO CALCULATE A SPACE CONVERSION
* FACTOR, AND APPLIES THIS TO THE SPACE USED (NOT ALLOCATED) ON THE
* 3330, AND ALLOCATES SECONDARY SPACE IN CYLS ON A 10% BASIS.
* THE MACRO JCLPN PUNCHES ANY REQUIRED NUMBER OF
* '//             VOL=REF=DISKNN' CARDS.
         MACRO
         JCLPN
         LCLA  &CNT
         LCLA  &INDX
         LCLC  &VOL(4)
&INDX    SETA 1
&CNT     SETA  0
.LP1     ANOP
         AIF   (&CNT GT 3).MAIN
&CNT     SETA  (&CNT+1)
&VOL(&CNT) SETC 'DISK0&CNT'
         AGO   .LP1
.MAIN    ANOP
&CNT     SETA  0
.LP2     ANOP
&CNT     SETA  (&CNT+1)
         PUNCH '//             VOL=REF=&VOL(&INDX)'
         AIF   (&CNT LT 101).LP2
&INDX    SETA  (&INDX+1)
         AIF   (&INDX LT 5).MAIN
         MEND
XXX      START
         JCLPN
         END
 NN03..   PROC OPTIONS(MAIN),.

 DCL      DATASET FILE RECORD INPUT,.   /* ONE RECORD PER DATASET    */

 DCL      PUNCH   FILE RECORD OUTPUT ENV(BLKSIZE(80) F),. /* COPY DKS*/

 DCL      LIST    FILE RECORD OUTPUT ENV(BLKSIZE(133) CTL360 F),.
                                                  /* LIST OF COPY DKS*/
 DCL      REPORT  FILE RECORD OUTPUT ENV(BLKSIZE(133) CTL360 F),.
                                                  /* REPORT EXCEPTNS
                                                                 ETC */
 DCL      SPACE ENTRY,.


 DCL      INDX DEC FIXED(5) INIT(1),.   /* COPY STEP NUMBER          */

 DCL      1 HD1 STATIC,
            2  CTLA BIT(8) INIT('00001001'B),
            2  BA   CHAR(55) INIT(' SSG03'),
            2  CA   CHAR(45) INIT('BOULTON & PAUL GRP LTD'),
            2  DA   CHAR(5) INIT('DATE '),
            2  DTE  CHAR(8),
            2  EA   CHAR(7) INIT('  PAGE '),
            2  PNO  PIC'ZZ9',
            2  FA   CHAR(9) INIT(' '),.

 DCL      1 HD2 STATIC,
            2  CTLB BIT(8) INIT('00010001'B),
            2  AB   CHAR(53) INIT(' '),
            2  BB   CHAR(79) INIT('SSG - 3330/3350 CONVERSION'),.

 DCL      1 HD3A STATIC,
            2  CTLC BIT(8) INIT('00010001'B),
            2  CA   CHAR(54) INIT(' '),
            2  CB   CHAR(78) INIT('LISTING OF DECKS PUNCHED'),.

 DCL      1 HD3B STATIC,
            2  CTLD BIT(8) INIT('00010001'B),
            2  DA   CHAR(54) INIT(' '),
            2  DB   CHAR(78) INIT('REPORT ON DATASETS READ'),.

 DCL      1 ITMHD STATIC,
            2  CTLE BIT(8) INIT('00001001'B),
            2  EA   CHAR(60) INIT('             DATASET'),
            2  EB   CHAR(9) INIT('COPY WITH'),
            2  EC   CHAR(25) INIT('       CRTDTE EXPDTE     '),
            2  ED   CHAR(25) INIT('OPTCD  PSWRD TYPE  VOLUME'),
            2  EE   CHAR(13) INIT(' '),.

 DCL      1 ITMLN STATIC,
            2  CTLF BIT(8) INIT('00001001'B),
            2  FA   CHAR(1) INIT('I'),
            2  SEQ  PIC'99999',
            2  FB   CHAR(4),
            2  DSN  CHAR(44),
            2  FC   CHAR(4) INIT(' '),
            2  CPW  CHAR(12),
            2  FI   CHAR(6)  INIT(' '),
            2  CRT  CHAR(5),
            2  FD   CHAR(2) INIT(' '),
            2  EXP  CHAR(5),
            2  FE   CHAR(7) INIT(' '),
            2  OPT  CHAR(3),
            2  FF   CHAR(6) INIT(' '),
            2  PSWD CHAR(4),
            2  FG   CHAR(5) INIT(' '),
            2  VOL  CHAR(6),
            2  FH   CHAR(13) INIT(' '),.

 DCL      1 SKIP STATIC,
            2 SKPCTL BIT(8) INIT('10001011'B),
            2 ZZZ  CHAR(132),.


 DCL      1 INREC,            /* INPUT RECORD LAYOUT                 */
            2  IHIX CHAR(8),       /*   INDEX                        */
            2  IDSN CHAR(44),      /*   DSN                          */
            2  IVOL CHAR(6),       /*   VOLUME SERIAL                */
            2  ICRT CHAR(5),       /*   CREATION DATE                */
            2  IEXP CHAR(5),       /*   EXPIRY DATE                  */
            2  IDSG CHAR(3),       /*   DSORG                        */
            2  IREC CHAR(4),       /*   RECFM                        */
            2  IOPT CHAR(2),       /*   OPTCD                        */
            2  IBLK CHAR(5),       /*   BLOCKSIZE                    */
            2  ILEN CHAR(5),       /*   RECORD LENGTH                */
            2  IKEY CHAR(3),       /*   KEYLENGTH                    */
            2  IRKP CHAR(3),       /*  RKP                           */
            2  IPSW CHAR(4),       /*  PASSWORD TYPE                 */
            2 IALL CHAR(211),.     /*  REST                          */

 DCL      INDPTR PTR INIT(ADDR(INREC)),.

 /* CARD BUILD AREAS FOR PUNCHING/PRINTING                           */

 DCL      1 C1 STATIC,
            2  SL   CHAR(3) INIT('//I'),
            2  CSEQ PIC '99999',
            2  PROG CHAR(72),.

 DCL      GEN CHAR(72) INIT('   EXEC PGM=IEBGENER') STATIC,
          SAM CHAR(72) INIT('   EXEC PGM=IEBISAM,PARM=COPY') STATIC,.

 DCL      GDUM CHAR(80) INIT('//SYSIN    DD  DUMMY') STATIC,.

 DCL      COUT CHAR(80) INIT('//SYSPRINT DD  SYSOUT=A') STATIC,.

 DCL      1 CSY1 STATIC,
            2  CS1A CHAR(19) INIT('//SYSUT1   DD  DSN='),
            2  DSN1 CHAR(45),
            2  CS1B CHAR(16) INIT(' '),.

 DCL      1 GDISP STATIC,
            2  P1   CHAR(32) INIT ('//             DISP=(OLD,UNCATLG'),
            2  P2   CHAR(48) INIT(',KEEP)'),.

 DCL      1 SDISP STATIC,
            2  P1   CHAR(32) INIT ('//             DISP=(OLD,UNCATLG'),
            2  P2   CHAR(48) INIT(',KEEP),DCB=DSORG=IS'),.

 DCL      1 CSY2  STATIC,
            2  CS2A CHAR(19) INIT('//SYSUT2   DD  DSN='),
            2  DSN2 CHAR(45),
            2  CS2B CHAR(16) INIT(' '),.

 DCL      1 GO2 STATIC,
            2 GOA   CHAR(28) INIT('//             DISP=(,CATLG,'),
            2 GOB   CHAR(14) INIT('DELETE),SPACE='),
            2 GSP   CHAR(16),
            2 GOC   CHAR(22) INIT(' '),.

 DCL      1 SDCB1 STATIC,
            2 SDA   CHAR(20) INIT('//             DCB=('),
            2 SDR1  CHAR(60),.

 DCL      1 SDCB2 STATIC,
            2 SDB   CHAR(16) INIT('//'),
            2 SDR2  CHAR(64),.

 DCL      COMMENT CHAR(80) INIT('//*'),.

 DCL      1 CARDPRNT STATIC,            /*  CARD PRINT LINE          */
            2 CTLX  BIT(8) INIT('00001001'B),
            2 IMAGE CHAR(80),
            2 REST CHAR(52) INIT(' '),.

 DCL      CDPTR PTR,
          CARDSTR CHAR(80) BASED(CDPTR),
          CARDRAY(80) CHAR(1) BASED(CDPTR),.

 DCL      WRK CHAR(45) STATIC,
          WRKRAY(45) CHAR(1) DEF WRK,.

 DCL      (PCNTL,PCNTR) DEC FIXED(5) INIT(0),     /* PAGE AND        */
          (LNCNTL,LNCNTR) DEC FIXED(3) INIT(60),. /*  LINE COUNTS    */

 DCL      DATE BUILTIN,.


          DTE = DATE,.

          OPEN FILE(DATASET),
               FILE(PUNCH),
               FILE(LIST),
               FILE(REPORT),.

          ON ERROR BEGIN,.
                    CALL PLIDUMP('HB','NN03 NEEDS SLIGHT ATTENTION'),.
                    STOP,.
                   END,.

          ON ENDFILE(DATASET) GOTO FINISH,.


 READREC..
          READ FILE(DATASET) INTO(INREC),.

          IF IDSG = 'PS ' THEN GOTO SEQONE,.
          IF IDSG = 'IS ' THEN GOTO INSONE,.
 /* IF NEITHER IS NOR PS, REPORT SAME                                */

          ITMLN.SEQ = '99999',.         /* HIGH SEQ NO TO HIGHLIGHT  */
          DSN = IDSN,.
          CPW = 'NOT IS OR PS',.
          CRT = ICRT,.
          EXP = IEXP,.
          OPT = IOPT,.
          PSWD = IPSW,.
          VOL = IVOL,.
          CALL PRNTREP,.
          GOTO READREC,.

 SEQONE..                     /* SEQUENTIAL FILE, SO PUNCH IEBGENER  */
          PROG = GEN,.                  /* EXEC CARD                 */
          CSEQ = INDX,.
          WRITE FILE(PUNCH) FROM(C1),.
          CDPTR = ADDR(C1),.
          CALL PRNTLST,.
                                        /* DD DUMMY                  */
          WRITE FILE(PUNCH) FROM(GDUM),.
          CDPTR = ADDR(GDUM),.
          CALL PRNTLST,.
                                        /* SYSPRINT                  */
          WRITE FILE(PUNCH) FROM(COUT),.
          CDPTR = ADDR(COUT),.
          CALL PRNTLST,.
                                        /* SET UP SYSUT1 DSN, SYSUT2 */
                                        /* DSN, AND PUNCH SYSUT1     */
          WRK = IDSN,.
          DO I = 1 TO 45,.
           IF WRKRAY(I) = ' ' THEN DO,.
                                 WRKRAY(I) = ',',.
                                 GOTO MVDSN,.
                                   END,.
          END,.
 MVDSN..  DSN1,DSN2 = WRK,.
          WRITE FILE(PUNCH) FROM(CSY1),.
          CDPTR = ADDR(CSY1),.
          CALL PRNTLST,.
                                        /* SYSUT1 DISP               */
          WRITE FILE(PUNCH) FROM(GDISP),.
          CDPTR = ADDR(GDISP),.
          CALL PRNTLST,.
                                        /* SYSUT2 DSN                */
          WRITE FILE(PUNCH) FROM(CSY2),.
          CDPTR = ADDR(CSY2),.
          CALL PRNTLST,.
                                        /* SYSUT2 DISP,SPACE         */
          CALL SPACE(INDPTR,GSP),.
          WRITE FILE(PUNCH) FROM(GO2),.
          CDPTR = ADDR(GO2),.
          CALL PRNTLST,.

          WRITE FILE(PUNCH) FROM(COMMENT),.
          CDPTR = ADDR(COMMENT),.
          CALL PRNTLST,.
                                        /* REPORT ON DECK PUNCHED    */
          CPW = 'IEBGENER    ',.
          DSN = IDSN,.
          CRT = ICRT,.
          EXP = IEXP,.
          OPT    = IOPT,.
          SEQ = INDX,.
          INDX = INDX+1,.
          PSWD =   IPSW,.
          VOL  =   IVOL,.
          CALL PRNTREP,.
          GOTO READREC,.
 /*                           END OF IEBGENER ROUTINE                */
 /*                                                                  */
 /*                                INDEXED SEQUENTIAL, SO PUNCH      */
 INSONE..                                              /* 1EBISAM    */
          PROG = SAM,.                  /* EXEC CARD                 */
          CSEQ = INDX,.
          WRITE FILE(PUNCH) FROM(C1),.
          CDPTR = ADDR(C1),.
          CALL PRNTLST,.
                                        /* SYSPRINT                  */
          WRITE FILE(PUNCH) FROM(COUT),.
          CDPTR = ADDR(COUT),.
          CALL PRNTLST,.
                                        /* SET UP SYSUT1,SYSUT2 DSN  */
                                        /* AND PUNCH SYSUT1          */
          WRK = IDSN,.
          DO I = 1 TO 45,.
           IF WRKRAY(I) = ' ' THEN DO,.
                                 WRKRAY(I) = ',',.
                                 GOTO MVDSN2,.
                                   END,.
          END,.
 MVDSN2.. DSN1,DSN2 = WRK,.

          WRITE FILE(PUNCH) FROM(CSY1),.
          CDPTR = ADDR(CSY1),.
          CALL PRNTLST,.
                                        /* SYSUT1 DISP               */
          WRITE FILE(PUNCH) FROM(SDISP),.
          CDPTR = ADDR(SDISP),.
          CALL PRNTLST,.
                                        /* SYSUT2 DSN                */
          WRITE FILE(PUNCH) FROM(CSY2),.
          CDPTR = ADDR(CSY2),.
          CALL PRNTLST,.
                                        /* SYSUT2 DISP,SPACE         */
          CALL SPACE(INDPTR,GSP),.
          WRITE FILE(PUNCH) FROM(GO2),.
          CDPTR = ADDR(GO2),.
          CALL PRNTLST,.
                                        /* ASSIGN DCB PARAMETERS TO  */
          SDR1 = ' ',.                  /* CARD IMAGE                */
          SUBSTR(SDR1,1,8)= 'BLKSIZE=',.
          SUBSTR(SDR1,9,5) = IBLK,.
          SUBSTR(SDR1,14,1) = ',',.
          SUBSTR(SDR1,15,6) = 'LRECL=',.
          SUBSTR(SDR1,21,5) = ILEN,.
          SUBSTR(SDR1,26,1) = ',',.
          SUBSTR(SDR1,27,6) = 'RECFM=',.
 /*                                                                  */
          WRK = IREC,.
          DO I = 1 TO 4,.
          IF WRKRAY(I) = ' ' THEN GOTO NEXTBIT,.
          SUBSTR(SDR1,(32+I),1) = WRKRAY(I),.
          END,.

 NEXTBIT..
          SUBSTR(SDR1,(32+I),1) = ',',.
          SUBSTR(SDR1,(33+I),7) = 'KEYLEN=',.
          SUBSTR(SDR1,(40+I),3) = IKEY,.
          SUBSTR(SDR1,(43+I),1) = ',',.

          WRITE FILE(PUNCH) FROM(SDCB1),.    /* FIRST DCB CARD       */
          CDPTR = ADDR(SDCB1),.
          CALL PRNTLST,.

          SDR2 = ' ',.
          SUBSTR(SDR2,1,6) = 'DSORG=',.
          WRK = IDSG,.
          DO I = 1 TO 3,.
             IF WRKRAY(I) = ' ' THEN GOTO DORKP,.
             SUBSTR(SDR2,(6+I),1) = WRKRAY(I),.
          END,.

 DORKP..
          SUBSTR(SDR2,(6+I),1) = ',',.
          SUBSTR(SDR2,(7+I),4) = 'RKP=',.
          WRK = IRKP,.
               DO J = 1 TO 3,.
                   IF WRKRAY(J) = ' ' THEN GOTO LASTBIT,.
                   SUBSTR(SDR2,(10+I+J),1) = WRKRAY(J),.
               END,.
 LASTBIT..
          SUBSTR(SDR2,(10+I+J),2) = '),',.
          WRITE FILE(PUNCH) FROM(SDCB2),.    /* SECOND DCB CARD      */
          CDPTR = ADDR(SDCB2),.
          CALL PRNTLST,.

          WRITE FILE(PUNCH) FROM(COMMENT),.
          CDPTR = ADDR(COMMENT),.
          CALL PRNTLST,.

          SEQ = INDX,.             /* REPORT ON DECK PUNCHED         */
          INDX = INDX+1,.
          CPW = 'IEBISAM     ',.
          DSN = IDSN,.
          CRT = ICRT,.
          EXP = IEXP,.
          OPT = IOPT,.
          PSWD = IPSW,.
          VOL = IVOL,.
          CALL PRNTREP,.
          GOTO READREC,.
                              /* REPORT PRINT PROC                   */
 PRNTREP.. PROC,.
          IF LNCNTR GT 59 THEN DO,.
                    WRITE FILE(REPORT) FROM(SKIP),.
                    PCNTR = PCNTR+1,.
                    PNO = PCNTR,.
                    WRITE FILE(REPORT) FROM(HD1),.
                    WRITE FILE(REPORT) FROM(HD2),.
                    WRITE FILE(REPORT) FROM(HD3B),.
                    WRITE FILE(REPORT) FROM(ITMHD),.
                    LNCNTR = 7,.
                               END,.
          WRITE FILE(REPORT) FROM(ITMLN),.
          LNCNTR = LNCNTR+1,.
           END,.
                              /* LIST PRINT PROC                     */
 PRNTLST.. PROC,.
          IF LNCNTL GT 59 THEN DO,.
                    WRITE FILE(LIST) FROM(SKIP),.
                    PCNTL = PCNTL+1,.
                    PNO = PCNTL,.
                    WRITE FILE(LIST) FROM(HD1),.
                    WRITE FILE(LIST) FROM(HD2),.
                    WRITE FILE(LIST) FROM(HD3A),.
                    LNCNTL = 7,.
                               END,.
                    IMAGE = CARDSTR,.
                    WRITE FILE(LIST) FROM(CARDPRNT),.
                    LNCNTL = LNCNTL+1,.
           END,.
 FINISH.. CLOSE FILE(PUNCH),
                FILE(DATASET),
                FILE(LIST),
                FILE(REPORT),.
          END,.
 SPACE:PROC(PN1,P2);
  DCL PN1 POINTER;
-    /* P1  DACS ALLOCATION RECORD         */
     /* PA  MODIFIED SPACE PARAMETER       */
  DCL 1 P1 BASED(PN1),
         2     PAD1      CHAR(68),
         2     DSORG     CHAR(3),
         2     PAD2      CHAR(6),
        2     INBLK     CHAR(5),
         2     PAD3      CHAR(24),
         2     CYLB      FIXED BIN(31),
         2     TRKB      FIXED BIN(31),
         2     PAD4      CHAR(176),
         2     CYLU      CHAR(4),
         2     TRKU      CHAR(4),
         2     PAD5      CHAR(4);
  DCL P2 CHAR(16);
  DCL PNA POINTER INIT(ADDR(P2));
  DCL 1 PA BASED(PNA),
         2     PAR1      CHAR(1),
         2     UNITS     CHAR(3),
         2     COM1      CHAR(1),
         2     REST,
            3  PARA2     CHAR(1),
            3  PRIA      PIC'99',
            3  COMA2     CHAR(1),
            3  SECA      PIC'9',
            3  OFFA      CHAR(6);
0 DCL 1 PB BASED(PNB),
         2     PRIB      PIC'9',
         2     COMB      CHAR(1),
         2     SECB      PIC'9',
         2     OFFB      CHAR(7);
0 DCL 1 PC BASED(PNC),
         2     SECC      PIC'99',
         2     OFFC      CHAR(5);
0 DCL 1 PD BASED(PND),
         2     PRID      PIC'9',
         2     OFFD      CHAR(10);
0 DCL 1 PE BASED(PNE),
         2     PRIE      PIC'99',
         2     OFFE      CHAR(9);
0 DCL 1 PF BASED(PNF),
         2     PRIF      PIC'999',
         2     OFFF      CHAR(8);
- DCL (PNB,PNC,PND,PNE,PNF) POINTER;
  DCL (NSPACE,NSEC) FIXED DEC(3);
  DCL (I,BPT3,BPT5,BLK)  FIXED BINARY(15);
  DCL (CYL,TRK)          FIXED DEC(5);
  DCL SPACE  FIXED DEC(5) BASED(P);
  DCL T3330(13) FIXED BIN(15)
     INIT(13031,6448,4254,3157,2499,2060,1746,1511,1328,1182,1062,963,
    0);
  DCL T3350(17) FIXED BIN(15)
     INIT(19070,9443,6234,4629,3666,3025,2566,2222,1955,1741,1566,
     1420,1297,1191,1019,948,0);
  ON ERROR CALL PLIDUMP('HBS','SPACE');
1  BLK=INBLK; PAR1 ='('; COM1 =',';
   IF DSORG = 'IS' THEN BLK = BLK + 56;
   DO I = 2 TO 13 ;
      IF BLK < T3330(I-1) & BLK >= T3330(I)
      THEN DO;
          BPT3 = I-1;
          GOTO B;
          END;
   END;
 /* DROP-THRU IS ERROR  - GIVE PLIDUMP  */
   SIGNAL ERROR;
 B: IF DSORG ='IS' THEN BLK = BLK + 26;
   DO I = 2 TO 17 ;
      IF BLK < T3350(I-1) & BLK >= T3350(I)
      THEN DO;
          BPT5 = I-1;
          GOTO C;
          END;
   END;
 /* DROP-THRU IS ERROR  */
   SIGNAL ERROR;
 C: CYL=CYLB;
   IF DSORG = 'IS' THEN GOTO IS;
   PARA2 ='(';
   TRK=TRKB;
   IF CYL=0 &TRK <10
   THEN DO;
     UNITS ='TRK';
     NSPACE= TRK;
     NSEC=1;
     END;
   ELSE DO;
     IF TRK ^= 0 THEN CYL=CYL+1;
     UNITS='CYL';
   NSPACE=CEIL(CYL * 0.684 * DEC((BPT3/BPT5),4,3));
      NSEC = CEIL(NSPACE/10.0);
     END;
   IF NSPACE < 10
   THEN DO;
      PNB = ADDR(PRIA);
      PRIB=NSPACE;
      COMB=',';
      SECB=NSEC;
      OFFB=')),';
      END;
   ELSE DO;
      PRIA=NSPACE; COMA2 = ',';
      IF NSEC > 9
          THEN DO;
          PNC = ADDR(SECA);
          SECC = NSEC;
          OFFC =')),';
          END;
      ELSE DO;
          SECA= NSEC;
          OFFA= ')),';
          END;
      END;
  RETURN;
1 IS: UNITS ='CYL';
     NSPACE = CEIL(CYL * 0.787 * DEC((BPT3/BPT5),4,3));
   IF NSPACE > 99
   THEN DO;
      PNF =ADDR(REST);
      PRIF= NSPACE;
      OFFF= '),';
      END;
   ELSE IF NSPACE > 9
      THEN DO;
          PNE = ADDR(REST);
          PRIE = NSPACE;
          OFFE = '),';
          END;
      ELSE DO;
          PND = ADDR(REST);
          PRID = NSPACE;
          OFFD = '),';
      END;
  RETURN;
 END SPACE;
