         MACRO
&NA      BEGIN &BASE,&SAVADR=,&ID=YES,&REGS=YES
         GBLA  &CHK
         LCLC  &BS1,&BS2,&BS3
         USING *,15
         AIF   ('&REGS' EQ 'NO').NOREGS
         AIF   (&CHK EQ 1).NOREGS
*  REGISTER EQUATES
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
FP0      EQU   0
FP2      EQU   2
FP4      EQU   4
FP6      EQU   6
&CHK     SETA  1
.*  SET UP CSECT NAME AS AN 8-BYTE CHARACTER CONSTANT IF SPECIFIED
.NOREGS  AIF   ('&ID' EQ 'NO').NOID
         AIF   ('&SYSECT' EQ '').NOID
         B     *+12
         DC    CL8'&SYSECT'
.NOID    ANOP
&NA      STM   14,12,12(13)
         AIF   ('&BASE' NE  '').BSPEC
&BS1     SETC  '12'                DEFAULT BASE = 12
         CNOP  0,4
         BAL   &BS1,*+76
         USING *,&BS1
         AGO   .SAVE
.*  BASE SPECIFIED. SET UP APPROPRIATE USING STATEMENT, ALLOWING UP TO
.*     THREE REGISTERS
.BSPEC   ANOP
&BS1     SETC  '&BASE(1)'
&BS2     SETC  '&BASE(2)'
&BS3     SETC  '&BASE(3)'
         AIF   ('&BS2' EQ  '').ONLY1
         AIF   ('&BS2' EQ '&BS1' OR '&BS1' EQ '&BS3').FAIL
         AIF   ('&BS2' EQ '&BS3').FAIL
         AGO   .OVER1
.*  ALL SPECIFIED BASE REGISTERS ARE UNIQUE
.ONLY1   CNOP  0,4
         BAL   &BS1,*+76
         USING *,&BS1
         AGO   .SAVE
.*  MORE THAN ONE BASE REGISTER SPECIFIED
.OVER1   CNOP  0,4
         BAL   &BS1,*+76
         AIF   ('&BS3' NE  '').ALL3 THREE BASE REGISTERS SPECIFIED
         USING *,&BS1,&BS2
         AGO   .SAVE
.ALL3    USING *,&BS1,&BS2,&BS3
.SAVE    ANOP
&SAVADR  DC    18F'0'
         AIF   ('&BS2' NE  '').SETB2
         AGO   .STORE
.SETB2   LR    &BS2,&BS1           SET 2ND BASE =
         AH    &BS2,IND&SYSNDX        1ST BASE + 4096
         AIF   ('&BS3' NE  '').SETB3
         AGO   .INC4K
.SETB3   LR    &BS3,&BS2           SET 3RD BASE =
         AH    &BS3,IND&SYSNDX        2ND BASE + 4096
.INC4K   B     *+6
IND&SYSNDX  DC H'4096'
.*  COMPLETE THE ESQUENCE
.STORE   ST    &BS1,8(13)
         ST    13,4(&BS1)
         LR    13,&BS1
         MEXIT
.*  ERROR NOTES
.FAIL    MNOTE 12,'BASE REGS DO NOT HAVE UNIQUE NAMES. GENERATION '
         MNOTE *,'TERMINATED'
         MEXIT
         MEND
         MACRO
&NAME    FINISH &RC=Z
&NAME    L     13,4(13)
         AIF   ('&RC' EQ '(15)').REG15
         AIF   ('&RC'(1,1) EQ '(').REGERR
         AIF   ('&RC' EQ 'Z').NORC
         LA    15,&RC
.REG15   L     14,12(13)
         LM    0,12,20(13)
         AGO   .OUT
.NORC    LM    14,12,12(13)
.OUT     BR    14
         MEXIT
.REGERR  MNOTE *,RETURN CODE REGISTER MUST BE 15. NO R.C. RETURNED
         AGO   .NORC
         MEND
         ISEQ  73,80
*        **************************************************************
*        *                                                            *
*        * THIS IS A WSCC UTILITY PROGRAM. IT WILL TRANSLATE ICL CARD *
*        * CODE OR ICL 7-TRK TAPE CODE TO EBCDIC. THE TAPE MUST 1ST   *
*        * HAVE BEEN COPIED TO 9-TRK IBM TAPE FROM AN IBM 7-TRK TAPE  *
*        * DRIVE WITH THE FOLLOWING FEATURES:                         *
*        *              ODD PARITY                                    *
*        *              556 BPI                                       *
*        *              TRANSLATE FEATURE (OFF OR NOT PRESENT)        *
*        *              DATA-CONVERT FEATURE (OFF OR NOT PRESENT)     *
*        * THE PARM PARAMETEWR SHOULD SPECIFY WHETHER CARD OR TAPE.   *
*        *           **** SEE PROGRAM WRITE-UP ****                   *
*        *                                                            *
*        **************************************************************
*
*
*      *******  REGISTER USAGE  ********
*
*          BASE REG = 4,5,12
*                 2 = INPUT LRECL
*                 3 = MAP ADDRESS
*              6-10 = WORK REG'S
*           6,7,8,9 = MOVE-LONG REG'S
*                11 = TRANSLATE TABLE
*
*      *********************************
*
*
UTI1900T CSECT
         BEGIN  (4,5,12),ID=NO,REGS=NO
         LA    11,CARDTT           CARD-TRANSLATE-TABLE ADDR
*
         L     1,0(1)              SET REG 1 TO
         LR    6,1
         LH    6,0(1)
         LA    1,2(1)               POINT TO PARM FIELD
         BCT   6,STC               PUT CORRECT LENGTH
STC      STC   6,MVCNAME+1          IN MOVE INSTRUCTION
MVCNAME  MVC   LOADMAP+8(1),0(1)   MOVE MEMBER NAME TO LOAD MACRO
         CLC   0(4,1),=C'CARD'     IS THE INPUT TAPE OR CARD ?
         BE    OPEN                 CARD
         LA    11,TAPETT           TAPE-TRANSLATE-TABLE ADDR
         CLC   0(5,1),=C'NOMAP'    TAPE INPUT WITHOUT A MAP ?
         BE    OPEN                 YES, DONT LOAD MAP
LOADMAP  LOAD  EP=XXXXXXXX          & LOAD REQUIRED MAP
         LR    3,0                 REG 3 = MAP ADDR
OPEN     OPEN  (INDCB,,OUTDCB,(OUTPUT),PRINTDCB,(OUTPUT))
         PUT   PRINTDCB,PRTAREA+1       -PRINT PAGE HEADING-
*
*
GET      GET   INDCB,INAREA        GET NEXT RECORD FOR TRANSLATION
         AP    COUNT,=P'+1'        COUNT BLOCKS
         CP    COUNT,=P'+4'        IS THIS ONE OF 1ST 3 BLOCKS ?
         BL    LOW4                 YES, IGNORE TM TEST
         CLI   INAREA,X'0F'        IS THIS BLOCK AN ICL TM ?
         BE    END                  YES, EOF.
*
LOW4     LH    2,INDCB+82          REG 2 = INPUT LRECL
         STH   2,OUTDCB+82         OUTPUT LRECL = INPUT LRECL
*                         **  SET UP MOVE-LONG REGISTERS  **
         LA    8,INAREA          2ND OPERAND ADDR
         LA    6,COPYAREA        1ST OPERAND ADDR
         LR    7,2               LENGTH
         IC    0,=C'?'           PADDING CHAR.          (?)
         SLL   0,24               IN BITS 0-7 (REG0)
         LR    9,2               LENGTH
         AR    9,0              PPUT PAD IN REG 9.
         LA    7,25(7)           GIVE COPYAREA 25 BYTES OF PADDING
         MVCL  6,8        **  MOVE INPUT REC TO COPY AREA  **
*
         MVI   TRANS+1,X'FF'       SET TRANSLATE LENGTH AT 256
         LA    10,INAREA           REG 10 = INPUT AREA
SUBH     SH    2,=H'256'           256 FROM LRECL
         BNM   TRANS                RESULT 0 OR PLUS
         AH    2,=H'255'           RESTORE LRECL TO < 256
*                                   SUBTRACT 1
         STC   2,TRANS+1             & STORE AS NEW TRANS LENGTH
         SR    2,2                 SIGNAL END OF TRANSLATION
TRANS    TR    0(0,10),0(11)       TRANSLATE UP TO 256 BYTES
         LA    10,256(10)          ADD 256 TO TR IST-0P ADDR
         LTR   2,2                 IS LRECL ZERO ?
         BNZ   SUBH                 NO, CARRY ON TRANSLATING
SW1      NOP   RESTORE             SWITCH TO BRANCH OUT AFTER THE
*                                   COPY AREA HAS BEEN TRANSLATED
*
*
         CLC   LOADMAP+8(4),=C'CARD'  IS THIS CARD INPUT ?
         BE    PUT                     YES, NO BINARY OR TAPE HEADERS.
*
*
*  RESTORE THE CHARACTERS CORRESPONDING TO 'X' IN
*   THE MAP TO ICL-INTERNAL CODE.  (THESE ARE BINARY AND
*    NOT TO BE TRANSL'D TO IBM CHARACTER FORM).
*     ALSO, PACK EVERY GROUP OF 4 SUCH CHARS (ONE ICL WORD)
*      INTO THE LOW-ORDER 24 BITS OF THE 32 BITS THEY OCCUPY
*       AS AN IBM WORD   -LEAVING TOP 8 BITS ZERO.
*   /NOTE/   THIS ROUTINE ASSUMES THAT THE X'S IN THE MAP
*    ARE IN GROUPS OF 4.    IF NOT IT WILL FAIL.
*    THE MAP MUST ALSO BE EQUAL TO OR LONGER THAN THE BLOCK
*    BEING TRANSLATED.
*
*
         MVI   TRANS+1,X'FF'       SET TRANSLATE LENGTH AT 256
         LH    2,INDCB+82          LRECL
         LA    10,COPYAREA
         LR    7,11                SAVE REG 11
         LA    11,INTT             INT-CODE-TRANS-TABLE ADDRESS
         MVI   SW1+1,X'F0'         SET RETURN SWITCH
         B     SUBH                 & BRANCH TO TRANSLATE RTN
RESTORE  LR    11,7                RESTORE REG 11
         MVI   SW1+1,X'00'         SWITCH OFF
*
         LR    7,3                 REG 7 = LOADED-MAP ADDRESS
         CP    COUNT,=P'+3'        ONE OF 1ST 3 BLOCKS ?
         BL    YES12                YES, 1ST OR 2ND
         BE   YES3                  3RD
*                                   NO
         CLC   LOADMAP+8(5),=C'NOMAP' IS IT TAPE WITH A MAP ?
         BE    PUT                     NO
         B     NOT123                  YES, USE LOADED-MAP
YES12    LA    7,HDDRMAP      REG 7 = HEADER-MAP FOR 1ST & 2ND
         B     NOT123
YES3     LA    7,QUALMAP      REG 7 = QUALBLOCK-MAP FOR 3RD
NOT123   BCT   7,LH2               7 = MAP ADDRESS-1
LH2      LH    2,INDCB+82
         AH    2,=H'1'             2 = LRECL+1
         LA    10,INAREA
         LA    6,COPYAREA-1
         SR    9,9                 9 = ZERO
SET8     LA    8,128               8 = ZERO + INDICATOR
TESTEND  BCT   2,NOTEND            END OF RECORD ?
         B     CP                   YES
NOTEND   LA    6,1(6)               NO,INCR COPYAREA
         LA    7,1(7)              MAP+1
         CLI   0(7),C'X'           IS THIS CHAR POSN BINARY ?
         BE    IC                   YES, PACK IT
         LA    10,1(10)             NO, UPDATE RECORD ADDR
         B     TESTEND               & TEST NEXT BYTE
IC       IC    9,0(6)
         SLL   8,6
         AR    8,9
         LTR   8,8                 THIS WORD TRANSL'D AND PACKED ?
         BP    TESTEND              NO
*                                   YES
         SLL   8,1                 REMOVE
         SRL   8,1                  BIT 0
         ST    8,0(10)               AND STORE PACKED WORD IN RECORD
         LA    10,4(10)            INCR TO NEXT WORD IN RECORD
         B     SET8
*
*
CP       CP    COUNT,=P'+4'        ONE OF 1ST 3 BLOCKS ?
         BL    PRINT                YES, PRINT NOT COPY.
PUT      PUT   OUTDCB,INAREA       OUTPUT TRANSL'D RECORD
         B     GET                  & GET NEXT ONE.
*
END      MVC   PRTAREA(81),ENDCONST         PRINT
         UNPK  PRTAREA+71(5),COUNT           BLOCK COUNT
         IC    7,PRTAREA+75                   AND
         AH    7,=X'0030'                      REMOVE
         STC   7,PRTAREA+75                     ZONE
         PUT   PRINTDCB,PRTAREA
         CLOSE (INDCB,,OUTDCB,,PRINTDCB)
         FINISH RC=0
*
*   THIS ROUTINE WILL PRINT AN INPUT BLOCK (ONE OF 1ST 3)
*    IN HEX & CHARACTER FORMAT.
*
PRINT    LH    2,INDCB+82          LRECL
         LA    2,1(2)               PLUS 1
         STH   2,PRINTDCB+82         IN PRINT DCB
         PUT   PRINTDCB,INAREA-1   PRINT BLOCK IN CHAR FORMAT
*
         MVC   PRTAREA(81),INAREA+81   CLEAR PRINT AREA TO SPACES
         LH    2,INDCB+82          LRECL
         SLL   2,1                  DOUBLED
         LA    7,81
         STH   7,PRINTDCB+82       SET BOTH HEX LINES AT 81 BYTES
         LA    7,PRTAREA+1
         LA    6,INAREA-4
BYTES4   LA    6,4(6)
         L     9,0(6)              LOAD NEXT 4 BYTES OF BLOCK
         LA    10,9                COUNT 8 HEX DIGITS
BITS4    SR    8,8
         SLDL  8,4                 NEXT 4 BITS IN REG 8
         SH    10,=H'1'            THESE 4 BYTES EXHAUSTED ?
         BZ    BYTES4               YES
         CH    8,=H'10'
         BL    LESS10
         AH    8,=H'183'
         B     LESS10+4
LESS10   AH    8,=H'240'
         STC   8,0(7)
         LA    7,1(7)
         SH    2,=H'1'             IS BLOCK EXHAUSTED YET ?
         BZ    PRINTIT              YES
         CLI   PRTAREA+80,C' '     HAS 80TH BYTE OF PRINT AREA
*                                   BEEN FILLED YET ?
         BE    BITS4                NO
*
PRINTIT  PUT   PRINTDCB,PRTAREA    WRITE 1ST OR 2ND PRINT LINE
         LTR   2,2                 WAS BLOCK EXHAUSTED ?
         BZ    GET                  YES, GET NEXT BLOCK
         LA    7,PRTAREA+1         RESET TO START OF PRINT AREA
         MVI   PRTAREA+80,C' '     RESET PRTAREA INDICATOR
         B     BYTES4               NO, PREPARE 2ND HEX LINE.
*
*
*********   DCB'S AND THINGS   ****
*
*
INDCB    DCB   DSORG=PS,MACRF=GM,EODAD=END,DDNAME=INPUT
OUTDCB   DCB   DSORG=PS,MACRF=PM,DDNAME=OUTPUT
PRINTDCB DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,RECFM=UA,BLKSIZE=133, -
               LRECL=81
*
*
*
PRTAREA  DC    CL134' 1                    1ST 3 BLOCKS OF INPUT TAPE (-
               TRANSLATED) IN CHARACTER AND HEX'
         DC    C' COUNT '
COUNT    DC    P'000000'
MCSKIP   DC    C'-'     ASA CODE PRINT CONTROL-CHAR
INAREA   DC    4096C' '       ALLOW A 4K-BYTE
COPYAREA DC    4200C' '        LOGICAL RECORD SIZE
ENDCONST DC   CL81'-        *****  TOTAL BLOCKS READ INCLUDING TAPE MAR-
               KS AND HEADERS WAS'
*
*
********  CARD-INPUT TRANSLATE TABLE, 256 ENTRIES.               ***
********    ICL CARD CODE TO EBCDIC.                             ***
********     CHAR WITH NO IBM EQUIV WILL BE TRANSL'D TO SPACE.   ***
*
*
CARDTT   DC    16F'0'                0-63 UNUSED
         DC    C' '                    64 = SPACE
         DC    9X'00'               65-73 UNUSED
         DC    C'+.;:'              74-77
         DC    X'7D'                   78 APOSTROPHE
         DC    X'5A'                   79 EXCLAMATION
         DC    X'50'                   80 AMPERSAND
         DC    9X'00'               81-89 UNUSED
         DC    2C' '                90-91 NO IBM (LEFT BRACKET DOLLAR)
         DC    C'*><'               92-94
         DC    C' '                    95 NO IBM  (VERTICAL ARROW)
         DC    C'-/'                96-97
         DC    9X'00'              98-106 UNUSED
         DC    C',%?='            107-110
         DC    C' '                   111 NO IBM  (HORIZ ARROW)
         DC    11X'00'            112-122 UNUSED
         DC    C'#@()'            123-126
         DC    C' '                   127 NO IBM  (RIGHT BRACKET)
         DC    16F'0'             128-191 UNUSED
         DC    X'50'                  192 AMPERSAND
         DC    C'ABCDEFGHI'       193-201
         DC    6X'00'             202-207 UNUSED
         DC    X'7F'                  208 DOUBLE QUOTE
         DC    C'JKLMNOPQR'       209-217
         DC    6X'00'             218-223 UNUSED
         DC    C'$'                   224
         DC    X'00'                  225 UNUSED
         DC    C'STUVWXYZ'        226-233
         DC    6X'00'             234-239 UNUSED
         DC    C'0123456789'      240-249
         DC    6X'00'             250-255 UNUSED
*
*
********  TAPE-INPUT TRANSLATE TABLE, 64 ENTRIES.                ***
********    1900 7-TRK TAPE CODE TO EBCDIC.  THE FIVE CHAR'S     ***
********     WITH NO IBM EQUIV WILL BE TRANSL'D TO               ***
********      X'00' TO X'04'      -ALL UNPRINTABLE.              ***
*
*
TAPETT   DC    X'00010203'        0-3 NO IBM
*                                      (DOLLAR,R.BRACKET,ARROWS)
         DC    C'XYZ'             4-6
         DC    X'04'                7 NO IBM  (LEFT BRACKET)
         DC    C'TUVWPQRSLMNO'   8-19
         DC    C'HIJKDEFG@ABC'  20-31
         DC    C',-./()*+$%'    32-41
         DC    X'50'               42 AMPERSAND
         DC    X'7D'               43 APOSTROPHE
         DC    C' !"#<=>?89:'   44-54
         DC    C';45670123'     55-63
*
*
********  TAPE-INPUT TRANSLATE TABLE, 64 ENTRIES.
********    1900 7-TRACK TAPE CODE TO 1900 INTERNAL CODE
*
*
INTT     DC    X'3C'    0
         DC    X'3D'    1
         DC    X'3E'    2
         DC    X'3F'    3
         DC    X'38'    4
         DC    X'39'    5
         DC    X'3A'    6
         DC    X'3B'    7
         DC    X'34'    8
         DC    X'35'    9
         DC    X'36'   10
         DC    X'37'   11
         DC    X'30'   12
         DC    X'31'   13
         DC    X'32'   14
         DC    X'33'   15
         DC    X'2C'   16
         DC    X'2D'   17
         DC    X'2E'   18
         DC    X'2F'   19
         DC    X'28'   20
         DC    X'29'   21
         DC    X'2A'   22
         DC    X'2B'   23
         DC    X'24'   24
         DC    X'25'   25
         DC    X'26'   26
         DC    X'27'   27
         DC    X'20'   28
         DC    X'21'   29
         DC    X'22'   30
         DC    X'23'   31
         DC    X'1C'   32
         DC    X'1D'   33
         DC    X'1E'   34
         DC    X'1F'   35
         DC    X'18'   36
         DC    X'19'   37
         DC    X'1A'   38
         DC    X'1B'   39
         DC    X'14'   40
         DC    X'15'   41
         DC    X'16'   42
         DC    X'17'   43
         DC    X'10'   44
         DC    X'11'   45
         DC    X'12'   46
         DC    X'13'   47
         DC    X'0C'   48
         DC    X'0D'   49
         DC    X'0E'   50
         DC    X'0F'   51
         DC    X'08'   52
         DC    X'09'   53
         DC    X'0A'   54
         DC    X'0B'   55
         DC    X'04'   56
         DC    X'05'   57
         DC    X'06'   58
         DC    X'07'   59
         DC    X'00'   60
         DC    X'01'   61
         DC    X'02'   62
         DC    X'03'   63
*
*
*    THIS IS THE MAP FOR CONVERTING THE ICL TAPE-HEADER BINARY FIELDS
*       TO ICL INTERNAL CODE
*
HDDRMAP  DC    4C' '    HDDR
         DC    4C'X'    TAPE SERIAL NO
         DC    12C' '   FILE NAME
         DC    4C'X'    REEL SEQ NO
         DC    4C'X'    GENERATION NO
         DC    4C'X'    RETENTION PERIOD
         DC    4C'X'    DATE WRITTEN (DAYS FROM 1899)
         DC    8C' '    WORDS 9 & 10 DON'T MATTER
*
*    THIS IS THE MAP FOR CONVERTING THE ICL QUALIFIER BLOCK
*      (BLOCK 3) BINARY FIELDS TO ICL-INTERNAL CODE
*
QUALMAP  DC    4C'X'    INDICATORS
         DC    4C'X'    MAX BLOCK SIZE
         DC    4C'X'    ZERO
         DC    4C'X'    ZERO
         DC    64C' '   LAST 16 WORDS DON'T MATTER
*
*
         END
