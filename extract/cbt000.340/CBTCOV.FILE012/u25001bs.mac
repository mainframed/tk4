         MACRO
&NAME    BEGIN   &BASE=1,&PL1=NO,&ENTRY=,&REGS=R01
         GBLC  &REG00,&REG01,&REG09     REFERENCED IN 'BACK' MACRO
         GBLB  &FIRST                   FOR REG EQU GEN.
         GBLB  &BGEXTRN,&BGPL1SW
         LCLC  &PENTRY
         LCLA  &AWORK1,&AWORK2,&AWORK3
*BEGIN    V2                                                  19.4.73
*        GENERATE CSECT INITIALISATION CODING INCLUDING PL1
*        COMPATIBILITY IF REQUIRED
&NAME    CSECT
&BGPL1SW SETB  0                        SET  OFF PL1 SW
         AIF   ('&PL1' NE 'YES').NOPL1
&BGPL1SW SETB  1
.NOPL1   ANOP
         AIF   (K'&ENTRY EQ 0).NOENTRY
         ENTRY &ENTRY
&ENTRY   DS    0H
&PENTRY  SETC  '&ENTRY'
         AGO   .GENREGS
.NOENTRY ANOP
         AIF   (&BGPL1SW NE 1).GENREGS
         AIF   (K'&NAME LE 7).GENREGS
.* TRUNCATE 8 CHAR CSECT NAME  TO 7 CHAR PL1 ENTRY POINT
&PENTRY  SETC  '&NAME'(1,4).'&NAME'(6,3)
         ENTRY &PENTRY
&PENTRY  DS    0H   PL1 ENTRY - 1ST 4 AND LAST 3 CHARS OF CSECT NAME
.GENREGS ANOP
         AIF   (&FIRST).NORGEN
&FIRST   SETB  1
         SPACE 1
         AIF   ('&REGS' NE 'R01').GENREG1
R00      EQU   0                        ) I/0 AND
R01      EQU   1                        ) PARAMETERS
R02      EQU   2
R03      EQU   3
R04      EQU   4
R05      EQU   5
R06      EQU   6
R07      EQU   7
R08      EQU   8
R09      EQU   9                        USED BY PL1
&REG00   SETC  'R00'
&REG09   SETC  'R09'
&REG01   SETC  'R01'
         AGO   .GENREG2
.GENREG1 ANOP
R0       EQU   0                        ) I/0 AND
R1       EQU   1                        ) PARAMETERS
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9                        USED BY PL1
&REG00   SETC  'R0'
&REG09   SETC  'R9'
&REG01   SETC  'R1'
.GENREG2 ANOP
R10      EQU   10                       )      ) PL1= BASE REG
R11      EQU   11                       ) BASE ) PL1=A(STATIC STORAGE)
R12      EQU   12                       ) REGS ) PL1= PSUEDO REG VECTOR
R13      EQU   13                       POINTER TO REG SAVE AREA
R14      EQU   14                       RETURN ADDR
R15      EQU   15                       BRANCHING ADDR
.NORGEN  ANOP
         SPACE 1
         CNOP  2,4
         BALR  R15,&REG00
         USING *,R15
         AIF   (&BGPL1SW EQ 0).ASAVE
.* GENERATE PL1 COMPATIBLE SAVE ROUTINE
         B     *+20
         AIF   (K'&NAME GT 7).PSAVE05
         DC    AL1(7)
         DC    CL7'&NAME'
         AGO   .PSAVE10
.PSAVE05 ANOP
         DC    AL1(7)
         DC    CL7'&PENTRY'
.PSAVE10 ANOP
         DC    F'136'                   DSA LENGTH
         DC    A(*+148)                 ADDR OF STATIC STORAGE
         CLC   *+176(4),*+196           IS PLI CNTRL MOD IN CORE
         BE    *+42                     NO THEN USE ASS SAVE ROUTINE
         SPACE 1
* PL1 SAVE ROUTINE
         STM   R14,R11,12(R13)          SAVE REGS
         L     R11,&NAME+16             GET ADDR OF STATIC STORAGE
         L     &REG00,&NAME+12          GET DSA LENGTH
         L     R15,32(0,R11)            GET IHESADA ADDR
         BALR  R14,R15                  LINK TO SET UP PL1 ENVIRONMENT
         LA    &REG09,100(0,R13)        USED BY PL1
         ST    R13,0(R12,0)             STORE DSA ADDR IN PR VECTOR
         MVI   0(R13),X'80'             SET DSA FLAG BYTE
         DC    X'0700'                  PADDING BYTES
         BALR  R15,&REG00
         B     156(R15)                 GO TO SET BASE REGS
         SPACE 1
.ASAVE   ANOP
* ASSEMBLER SAVE ROUTINE
         STM   R14,R12,12(R13)          SAVE REGS
         ST    R13,*+24                 CHAIN LAST S/A TO THIS
         LR    R14,R13
         LA    R13,*+14                 POINT R13 TO SAVEAREA
         ST    R13,8(R14)               CHAIN THIS S/A TO LAST
         AIF   (&BGPL1SW EQ 0).ASAVE05
         B     *+134                    GO TO SET BASE REGS
         AGO   .ASAVE10
.ASAVE05 ANOP
         B     *+78                     GO TO SET BASE REGS
.ASAVE10 ANOP
         DC    X'0700'                  PADDING BYTES
         DC    18F'0'                   SAVEAREA
         AIF   (&BGPL1SW EQ 0).SETBASE
         SPACE 1
         DC    F'4096'                  PL1 STATIC STORAGE
         DC    A(*-4+1024)                FIXED AREAS
         DC    A(*-8+2048)
         DC    A(*-12+3072)
         DC    A(*-16+4096)
         DC    A(*-20+5120)
         DC    A(*-24+6144)
         DC    A(*-28+7168)
         AIF   (&BGEXTRN).NOEXTRN
         EXTRN IHESADA,IHESADB,IHESAFA,IHESARC
.NOEXTRN ANOP
&BGEXTRN SETB  1
         DC    A(IHESADA)
         DC    A(IHESADB)
         DC    F'0'
         DC    F'0'
         DC    A(IHESAFA)
         DC    F'0'
.SETBASE ANOP
         SPACE 1
         DROP  R15
         AIF   ('&BASE'(1,1) NE '(').BASE05
.* GENERATE USING'S FOR EACH BASE SPECIFIED
&AWORK1  SETA  0
&AWORK2  SETA  0
&AWORK3  SETA  1
         BALR  &BASE(&AWORK3),&REG00    SET UP BASE REGISTER
.ALOOP   ANOP
         USING *-&AWORK1+&AWORK2,&BASE(&AWORK3)
&AWORK3  SETA  &AWORK3+1
         AIF   (K'&BASE(&AWORK3) EQ 0).AEND  EXIT IF END OF SUB-LIST
&AWORK1  SETA  &AWORK1+8
&AWORK2  SETA  &AWORK2+4096
         LA    &BASE(&AWORK3),2048(&BASE(&AWORK3-1)) SET UP NEXT
         LA    &BASE(&AWORK3),2048(&BASE(&AWORK3))     BASE REGISTER
         AGO   .ALOOP
.BASE05  ANOP
         AIF   (&BGPL1SW EQ 0).BASE10
         BALR  R10,&REG00               SET UP BASE REGISTER
         USING *,R10
         AIF   ('&BASE' EQ '1').AEND
         LA    R11,2048(R10)            SET UP NEXT
         LA    R11,2048(R11)              BASE REGISTER
         USING *-8+4096,R11
         AGO   .AEND
.BASE10  ANOP
         BALR  R12,&REG00               SET UP BASE REGISTER
         USING *,R12
         AIF   ('&BASE' EQ '1').AEND
         LA    R11,2048(R12)            SET UP NEXT
         LA    R11,2048(R11)              BASE REGISTER
         USING *-8+4096,R11
         AIF   ('&BASE' EQ '2').AEND
         LA    R10,2048(R11)            SET UP NEXT
         LA    R10,2048(R10)              BASE REGISTER
         USING *-16+8192,R10
.AEND    ANOP
         MEND
         MACRO
&NAME    BACK   &RC=0
*BACK     V2                                                  19.4.73
*        USE ONLY IN CONJUNCTION WITH 'BEGIN'
*        PROVIDES PL1 COMPATIBILITY IF REQUIRED
         GBLC  &REG00,&REG01            SET IN 'BEGIN' MACRO
         GBLB  &BGPL1SW
         LCLA  &AWORK1
         LCLC  &CWORK1
&NAME    DS    0H
         AIF   ('&RC'(1,1) EQ '(').REGCODE
         LA    R15,&RC                  SET RETURN CODE
         AGO   .ABACK05
.REGCODE ANOP
         AIF   ('&RC' EQ '(15)').ABACK05
         AIF   ('&RC' EQ '(R15)').ABACK05
&AWORK1  SETA  K'&RC
&AWORK1  SETA  &AWORK1-2
&CWORK1  SETC  '&RC'(2,&AWORK1)
         LR    R15,&CWORK1              SET RETURN CODE
.ABACK05 ANOP
         AIF   (&BGPL1SW EQ 0).ABACK10       DID BEGIN HAVE PL1 COMPAT.
         CNOP  0,4                      ALIGN'A'TYPE
         B     *+12
         DC    A(IHESADA)               BEGIN HAS EXTRN
         DC    F'0'
         CLC   *-8(4),*-4               IS PL1 IN CORE
         BE    *+56                     NO THEN USE ASS RETURN
         LTR   R15,R15                  IS A RETCODE SET
         BZ    *+44                       NO
         ST    R15,*+28                 YES THEN SET CODE
         OI    *+20,X'80'                 AND LINK
         LA    &REG01,*+16                TO IHESARC TO SET
         L     R15,*+20                   RETURN
         BALR  R14,R15                    CODE
         B     *+22                     BRANCH ROUND
         DC    X'0700'                    PADDING BYTES AND
         DC    A(*+4)                     PARM LIST
         DC    F'0'                     RETURN CODE
         DC    A(IHESARC)
         DC    A(IHESAFA)
         L     R15,*-4                  GET ADDR OF IHESAFA
         BALR  R14,R15                  AND RETURN
.ABACK10 ANOP
* ASSEMBLER STANDARD RETURN
         L     R13,4(R13)               GET ADDR OF LAST S/A
         L     R14,12(R13)              GET RETURN ADDR
         LM    &REG00,R12,20(R13)       RESTORE REGS
         BR    R14                      RETURN
         MEND
DAT9     BEGIN
         L     R02,0(R01)
         TIME
         ST    R01,WORD
         UNPK  FIELD(5),WORD+1(3)
         MVC   4(2,R02),FIELD
         PACK  FIELD+5(3),FIELD(2)
         DP    FIELD+5(3),P4
         CP    FIELD+7(1),P0
         BE    LEAP
         LA    R05,DATAB1
LOOP     CP    WORD+2(2),0(2,R05)
         BNH   FOUNDIT
         LA    R05,4(R05)
         B     LOOP
LEAP     LA    R05,DATAB2
         B     LOOP
FOUNDIT  S     R05,=F'4'
         SP    WORD+2(2),0(2,R05)
         UNPK  0(2,R02),WORD+2(2)
         OI    1(R02),X'F0'
         MVC   2(2,R02),2(R05)
         BACK
FIELD    DS    CL8
WORD     DS    F
P0       DC    P'0'
P4       DC    P'4'
DATAB1   DC    P'000',C'01',P'031',C'02',P'059',C'03',P'090',C'04',P'12*
               0',C'05',P'151',C'06',P'181',C'07',P'212',C'08',P'243',C*
               '09',P'273',C'10',P'304',C'11',P'334',C'12',P'999'
DATAB2   DC    P'000',C'01',P'031',C'02',P'060',C'03',P'091',C'04',P'12*
               1',C'05',P'152',C'06',P'182',C'07',P'213',C'08',P'244',C*
               '09',P'274',C'10',P'305',C'11',P'335',C'12',P'999'
         END
MAP      BEGIN
         TIME
         STM   R00,R01,R0R1ST
         MVI   R0R1ST+3,X'0F'
         CALL  DAT9,(DATE)
         UNPK  WTOO+25(3),R0R1ST+6(2)
         MVC   WTOO+16(2),DATE
         MVC   WTOO+19(2),DATE+2
         MVC   WTOO+22(2),DATE+4
         MVC   WTOO+31(9),=X'4021204B20204B2020'
         ED    WTOO+31(9),R0R1ST
*
WTOO     WTO   ' MAP -- DD/MM/YY.DDD -- HH.MM.SS',ROUTCDE=(5,11)
         L     R02,16              R2 -> CVT
         L     R03,244(R02)        R3 -> TCB ADDRESS (P0)
         LA    R03,0(R03)
         L     R04,248(R02)        NUMBER OF PP TCB'S
         SRL   R04,24
         WTO   'PARTN   LO      HI    SIZE CLASS',ROUTCDE=(5,11)
LOOP     L     R05,0(R03)          R5 -> TCB
         L     R09,124(R05)
         LA    R09,0(R09)
         L     R05,24(R05)         R5 -> BBX
         MVC   WTO+20(2),=C'  '
         L     R06,4(R05)          LOW CORE
         LTR   R06,R06
         BZ    INACTIVE            OK PARTITION ? ---->
         ST    R06,LOSTOR
         BAL   R08,BINHEX
         MVC   WTO+14(6),HEXADR    MAKE LO ADDR HEX
         L     R06,8(R05)          HIGH CORE
         LTR   R06,R06
         BZ    INACTIVE            OK PARTITION ? ---->
         BCTR  R06,0               SUBTRACT ONE
         BAL   R08,BINHEX
         MVC   WTO+22(6),HEXADR    MAKE HI ADDR HEX
UNPART   UNPK  WTO+10(2),PARTN
         OI    WTO+11,X'F0'        PARTITION NUMBER
         L     R06,4(R05)          R6 -> LOW ADDRESS
         L     R07,8(R05)          R7 -> HIGH ADDRESS
         SR    R07,R06             R7 = PARTN SIZE
         CVD   R07,DWORD           INTO DECIMAL
         DP    DWORD(8),=P'1024'   HOW MANY K?
         MVC   WTO+29(5),=X'40202120D2' MOVE IN EDIT MASK AND "K"
         ED    WTO+29(4),DWORD+3   EDIT IN PARTN SIZE
         AP    PARTN,=P'1'         ADD 1
         LA    R03,4(R03)          R3 -> NEXT TCB ADDRESS
         MVC   WTO+36(3),=C'   '
         LA    R10,3
         LA    R09,27(R09)
         LA    R11,WTO+36
         CLI   0(R09),X'E6'
         BE    WTR
         CLI   0(R09),X'D9'
         BE    RDR
*
LOOPIT   CLI   0(R09),X'00'
         BE    WTO
         MVC   0(1,R11),0(R09)
         TR    0(1,R11),TRTAB
         LA    R11,1(R11)
         BCTR  R09,0
         BCT   R10,LOOPIT
*
WTO      WTO   ' PNN  LLLLLL  HHHHHH  NNNK  CCC ',ROUTCDE=(5,11)
         BCT   R04,LOOP            ROUND AGAIN
*                                  DROP THRU' IF LAST
         L     R06,LOSTOR
         BCTR  R06,0
         BAL   R08,BINHEX
         MVC   WTON+22(6),HEXADR
         L     R06,4(R05)
         CVD   R06,DWORD
         DP    DWORD(8),=P'1024'
         MVC   WTON+29(5),=X'40202120D2'
         ED    WTON+29(4),DWORD+3
*
WTON     WTO   ' NUC  000000  HHHHHH  NNNK  N/A ',ROUTCDE=(5,11)
         WTO   '-------END  OF  CORE  MAP-------',ROUTCDE=(5,11)
         BACK
*
INACTIVE MVC   WTO+14(14),=C'***INACTIVE***'
         B     UNPART
*
WTR      MVC   0(3,R11),=C'WTR'
         B     WTO
*
RDR      MVC   0(3,R11),=C'RDR'
         B     WTO
*                                  HEX CONVERSION ROUTINE
BINHEX   MVC   HEXADR,=C'000000'
         LA    R07,HEXADR+5        R7 -> OUTPUT FIELD
         LA    R06,0(R06)
BACK     STC   R06,STORE           R6 CONTAINS ADDR TO BE CONVERTED
         OI    STORE,X'F0'
         CLI   STORE,X'FA'
         BL    OK
         SH    R06,=H'9'
         STC   R06,STORE
         NI    STORE,X'0F'
         OI    STORE,X'C0'
OK       MVC   0(1,R07),STORE
         BCTR  R07,0
         SRL   R06,4
         LTR   R06,R06
         BNZ   BACK
         BR    R08                 R8 -> RETURN POINT
*
DWORD    DS    0D
R0R1ST   DS    2F
LOSTOR   DS    F
DATE     DS    CL6
TRTABDUM DC    C'ABCDEFGHIJKLMNO'
TRTAB    EQU   TRTABDUM-40
HEXADR   DS    CL6
STORE    DS    CL1
FILLER   DS    CL1
PARTN    DC    PL2'0'
*
*        THE
         END
