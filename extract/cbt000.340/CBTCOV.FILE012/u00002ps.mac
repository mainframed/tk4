SMFRESQ  CSECT
         SPACE  3
*  THE PURPOSE OF THIS PROGRAM IS TO RECORD IN THE SMF DISK DATA SET
*  ANY SMF RECORDS THAT WERE IN THE CURRENT SMF BUFFER WHEN O.S.
*  COLLAPSED AND WHICH HAVE NOT YET BEEN WRITTEN TO DISK.
         SPACE
*  IT IS ASSUMED THAT THE OPERATOR RECORDED A COMPLETE CORE IMAGE
*  ON DISK WHEN O.S. COLLAPSED BY USING THE RESPOND 'INTERRUPT DUMP'
*  TECHNIQUE.  IT IS ALSO ASSUMED THAT THIS PROGRAM WILL BE RUN
*  IMMEDIATELY AFTER THE NEXT IPL AS PART OF THE JOBSTREAM OF
*  HOUSEKEEPING JOBS KEPT AS A DISK DATA SET (SYS1.IPL) WHICH THE AUTO
*  START RDR COMMAND WILL ADDRESS.
         SPACE
*  THIS PROGRAM IS RECORDED AS A PREFIX TO THE 'MVTDUMP' PROGRAM WHICH
*  FORMATS AND PRINTS ANY CORE IMAGE DUMPS MARKED AS NOT YET PRINTED,
*  AND SO SMFRESQ ENDS BY XCTL TO THE DUMP PRINT PROGRAM.  THERE MAY BE
*  1, 2, OR 3 CORE IMAGE DATA SETS, AND THERE IS A CONTROL RECORD
*  FOUND AS RECORD 1 OF THE LAST TRACK OF THE FIRST DATA SET (DDNAME =
*  DUMPA).  THE FIRST 6 BYTES OF THE CONTROL RECORD ARE TWO BYTE
*  INDICATORS FOR DUMPA, DUMPB, AND DUMPC.  THE FIRST BYTE OF EACH PAIR
*  IS THE CYLINDER NUMBER (MINUS ONE) AT WHICH THE DATA SET STARTS,
*  AND THE SECOND BYTE INDICATES AS FOLLOWS......
*        X'00' NO DATA SET TO PRINT OR SMF RECORDS TO RESCUE.
*        X'FF' A DUMP HAS BEEN TAKEN AND NOT YET PROCESSED.  SMFRESQ
*              WILL PROCESS IT AND THEN RESET THE INDICATOR TO X'0F'
*        X'0F' SMF DATA HAS BEEN PROCESSED BUT DUMP STILL REQUIRES
*              PRINTING
*  THIS METHOD AVOIDS RE-PROCESSING OF SMF DATA IF THE LONGER RUNNING
*  DUMP PRINT FAILS (E.G. WITH B37 OR CANCEL).
         SPACE
*  NOTE THAT THE CORE IMAGE IS RECORDED IN 4K BLOCKS AND CONSEQUENTLY
*  ANY GIVEN CORE ADDRESS CAN BE TRANSLATED TO A DISK TTR AND AN OFFSET
*  WITHIN THE 4K DISK RECORD BY SEPARATING THE LOW ORDER 12 BITS OF THE
*  ADDRESS (= OFFSET WITHIN BLOCK) FROM THE HIGH ORDER BITS (= TTR AS
*  THERE IS ONLY ONE 4K BLOCK PER 2314 TRACK).  BECAUSE ANY GIVEN AREA
*  OF DUMPED CORE (E.G. SMF BUFFER) MAY OVERLAP A 4K BOUNDARY PROVISION
*  IS MADE TO READ A SECOND DISK RECORD TO CORE IMMEDIATELY FOLLOWING
*  THE FIRST.  THE ACTUAL CORE ADDRESS AFTER READING THE RECORD(S) BACK
*  INTO CORE IS GIVEN BY ADDING TO THE ADDRESS OF SMFRESQ'S DATA AREA
*  ('CORE') THE OFFSET WITHIN THE 4K BLOCK.
         SPACE
*  SMFRESQ FINDS THE RECORDS TO RESCUE AS FOLLOWS......
*        1.    READ FIRST BLOCK OF DISK DATA AND GET CVT ADDRESS FROM
*              OFFSET 16.
*        2.    READ BLOCK CONTAINING CVT (AND READ FOLLOWING BLOCK IF
*              CVT + 200 IS OUTSIDE FIRST BLOCK.
*        3.    READ BLOCK(S) CONTAINING SMCA.
*              IF SMF WAS NOT RECORDING SKIP FURTHER PROCESSING.
*              OTHERWISE GET START ADDRESS OF BUFFER (AND ADD THE HALF
*              BUFFER LENGTH IF RIGHT HALF WAS IN USE).
*              IF SMF HAD THE 'DISASTER' BIT ON BECAUSE BOTH DATA SETS
*              WERE UNAVAILABLE IT IS ASSUMED THAT ANY RECORDS IN THE
*              CURRENT HALF BUFFER NEED TO BE RESCUED, BUT NO ATTEMPT
*              IS MADE TO PROCESS BOTH HALF BUFFERS IN THIS CASE.
*        4.    READ BLOCK(S) CONTAINING THE 'CURRENT' HALF BUFFER.
*              THE FIRST HALFWORD OF THE BUFFER CONTAINS THE TOTAL
*              'ACTIVE' LENGTH, AND WE WORK THROUGH THIS ACTIVE PART
*              OF THE BUFFER POINTING REG 1 TO EACH RECORD IN TURN AND
*              ISSUING SVC 83 (IN PROTECT KEY ZERO).  NOTE THAT A
*              LENGTH OF 4 FOR THE TOTAL ACTIVE BUFFER MEANS THERE ARE
*              NO RECORDS IN IT.
         SPACE 3
*  R10,11,12 ARE BASES
         BEGIN  BASE=(10,11,12)
         OPEN  (EXCP)
         L     1,EXCP+44
         MVC   BLK+3(4),42(1)
         SPACE
*  READ IN CONTROL RECORD.
         SPACE
         XDAP  ECBX,RI,EXCP,CONTREC,24,,BLK
         WAIT  ECB=ECBX
         MVI   XX,1
         CLI   ECBX,127
         BNE   ABEND
         SPMODE  PROB,0
         L     1,EXCP+44
         MVI   32(1),X'C0'
         SPMODE  PROB,*
         MVC   COPYCONT,CONTREC
         LA    9,COPYCONT
*  R9 -> COPYCONT
         MVI   0(9),C'A'
         MVI   2(9),C'B'
         MVI   4(9),C'C'
         MVI   6(9),C'X'
         SPACE  2
FINDLIVE MVC   BSAM+44(1),0(9)
         CLI   0(9),C'X'
         BE    END
         CLI   1(9),255
         BNE   TRYNEXT
         MVI   1(9),15
         OPEN  (BSAM)
         SPACE
*  READ FIRST BLOCK AND GET CVT ADDRESS.
         SPACE
         READ  DECBA,SF,BSAM,CORE,4096
         MVI   XX,2
         CHECK DECBA
         L     6,CORE+16
         SRDL  6,12
         SRL   7,20
         SLL   6,8
         LA    6,1(6)
         SLL   6,8
         ST    6,POINTER
         LR    8,7
*  R7 -> TTR1
*  R8 -> OFFSET IN BLOCK
         SPACE
*  READ BLOCK CONTAINING START OF CVT.
         SPACE
         POINT BSAM,POINTER
         READ  DECBB,SF,BSAM,CORE,4096
         MVI   XX,3
         CHECK DECBB
         A     8,COREBASE
*  R8 -> ADDRESS IN CORE NOW
         LA    1,200(8)
         C     1,ENDCORE
         BNH   CVTIN
         SPACE
*  READ BLOCK CONTAINING CVT + 196 (IF NOT ALREADY IN CORE)
         SPACE
         READ  DECBX,SF,BSAM,COREXT,4096
         MVI   XX,8
         CHECK DECBX
CVTIN    L     2,196(8)      A(SMCA)
         SRDL  2,12
         SRL   3,20
         SLL   2,8
         LA    2,1(2)
         SLL   2,8
         ST    2,POINTER
         SPACE
*  READ BLOCK CONTAINING START OF SMCA.
         SPACE
         POINT BSAM,POINTER
         READ  DECBY,SF,BSAM,CORE,4096
         MVI   XX,9
         CHECK DECBY
         LR    8,3
         A     8,COREBASE
         LA    1,24(8)
         C     1,ENDCORE
         BNH   SMCAIN
         SPACE
*  READ NEXT BLOCK IF FIRST 24 BYTES OF SMCA ARE NOT ALL IN CORE.
         SPACE
         READ  DECBC,SF,BSAM,COREXT,4096
         MVI   XX,4
         CHECK DECBC
SMCAIN   TM    1(8),X'C0'
         BZ    BUFFEMTY      SMF NOT RECORDING - SKIP REST.
         L     6,20(8)       GET BUFFER START ADDRESS.
*  R6 -> START OF HALF BUFFER
         L     5,12(8)       GET HALF BUFFER LENGTH
         ST    5,HALFLEN
*  R5  ACTIVE BUFFER LENGTH
         TM    1(8),2
         BZ    BUFFOUND
         AR    6,5
BUFFOUND LR    2,6
         SRDL  2,12
         SRL   3,20
         SLL   2,8
         LA    2,1(2)
         SLL   2,8
         ST    2,POINTER
         LR    6,3
         SPACE
*  READ BLOCK CONTAINING START OF 'CURRENT' HALF BUFFER.
         SPACE
         POINT BSAM,POINTER
         READ  DECBD,SF,BSAM,CORE,4096
         MVI   XX,5
         CHECK DECBD
         A     6,COREBASE
         LA    1,0(5,6)
         C     1,ENDCORE
         BNH   BUFFERIN
         SPACE
*  READ NEXT BLOCK IF 'CURRENT' HALF BUFFER IS NOT ALL IN CORE.
         SPACE
         READ  DECBE,SF,BSAM,COREXT,4096
         MVI   XX,6
         CHECK DECBE
         SPACE  2
BUFFERIN SPMODE  PROB,0
         LH    5,0(6)        TOTAL ACTIVE BUFFER LENGTH
         C     5,HALFLEN
         MVI   XX,6
         BH    ABEND
         LA    4,4(6)        START OF FIRST RECORD
*  R4  CURRENT SMF RECORD
         S     5,FOUR
         BZ    BUFFEMTY
REISSUE  LR    1,4
         SVC   83
         AP    RESCNT,ONE
         MVC   HW,0(4)
         SH    5,HW
         BNP   BUFFEMTY
         AH    4,HW
         B     REISSUE
BUFFEMTY SPMODE  PROB,*
         CLOSE (BSAM)
TRYNEXT  LA    9,2(9)
         B     FINDLIVE
         SPACE  2
END      DS    0H
         MVC   CONTREC+1(1),COPYCONT+1
         MVC   CONTREC+3(1),COPYCONT+3
         MVC   CONTREC+5(1),COPYCONT+5
         ED    MASK,RESCNT
         MVC   WTO+8(4),MASK
WTO      WTO   'XXXX SMF RECORDS RESCUED FROM INTERRUPT DUMP',         *
               ROUTCDE=(2,11)
WTOR     WTOR  'PRINT INTERRUPT DUMP - REPLY ''PY'' (=YES) OR ''PN'' (=*
               NO)',REPLY,3,CONSECB,ROUTCDE=2
         WAIT  ECB=CONSECB
         XC    CONSECB,CONSECB
         OC    REPLY,SPACES
         MVC   WTOC+28(3),REPLY
WTOC     WTO   'OPERATORS REPLY WAS ABC',ROUTCDE=(11)
         CLC   REPLY(2),YES
         BE    WB
         CLC   REPLY(2),NO
         BNE   SPECIAL
         OI    XCTL+1,240
         MVI   CONTREC+1,0
         MVI   CONTREC+3,0
         MVI   CONTREC+5,0
         SPACE
*  WRITE BACK CONTROL RECORD.
         SPACE
WB       XDAP  ECBY,WI,EXCP,CONTREC,24,,BLK
         WAIT  ECB=ECBY
         CLOSE (EXCP)
         CLI   ECBY,127
         BE    XCTL
         WTO   '*** ERROR ON DUMP CONTROL RECORD WRITE BACK - INFORM TS*
               G',ROUTCDE=(2,11)
         B     ABEND
         SPACE  2
GOBACK   GOBACK
         SPACE  2
         SPACE
*  IF OPERATOR REPLIES WITH ANY COMBINATION OF THE NUMBERS 1,2,3 THIS
*  IS TAKEN TO BE A REQUEST TO SET ON THE INDICATOR(S) TO CAUSE DUMPS
*  1,2,3 TO BE PRINTED (OR RE-PRINTED)AFTER THE INDICATORS HAVE BEEN
*  PREVIOUSLY SET OFF (BY REPLY 'PN' OR BY PRINTING).  DUMP AREAS
*  WHICH HAVE BEEN OVER-WRITTEN BY SUBSEQUENT DUMPS CANNOT OF COURSE BE
*  RESURRECTED.
         SPACE
SPECIAL  CLI   REPLY,C'1'
         BL    REPREP
         CLI   REPLY,C'3'
         BH    REPREP
         LA    7,REPLY
         LA    8,3
         LA    9,CONTREC+1
         MVI   0(9),0
         MVI   2(9),0
         MVI   4(9),0
LOOP123  CLI   0(7),C'1'
         BNE   *+8
         MVI   0(9),15
         CLI   0(7),C'2'
         BNE   *+8
         MVI   2(9),15
         CLI   0(7),C'3'
         BNE   *+8
         MVI   4(9),15
         LA    7,1(7)
         LA    9,2(9)
         BCT   8,LOOP123
         B     WB
         SPACE  2
REPREP   WTO   'PLEASE REPEAT REPLY FOR MVTDUMP CORRECTLY',ROUTCDE=2
         MVC   REPLY,SPACES
         B     WTOR
         SPACE  2
ABEND    ABEND  50,DUMP
         SPACE  2
XCTL     BC    0,GOBACK
         L     13,4(13)
         BALR  15,0
         USING *,15
         L     14,12(13)
         LM    0,12,20(13)
         XCTL  EP=MJEDUMP
         EJECT
EXCP     DCB   DDNAME=DUMPA,DSORG=DA,MACRF=(E)
         DC    F'0'
BSAM     DCB   DDNAME=DUMPA,DSORG=PS,MACRF=(RP),RECFM=F,LRECL=4096,    *
               BLKSIZE=4096
BLK      DC    XL8'01'
XX       DC    X'00',C'INDICXX'
COPYCONT DC    XL8'00'
CONTREC  DC    XL24'00'
COREBASE DC    A(CORE)
ENDCORE  DC    A(COREXT)
POINTER  DC    F'0'
FOUR     DC    F'4'
HALFLEN  DC    F'0'
HW       DC    H'0'
CONSECB  DC    F'0'
RESCNT   DC    PL2'0'
ONE      DC    P'1'
REPLY    DC    CL3' '
SPACES   DC    CL3' '
MASK     DC    X'40202120'
YES      DC    C'PY'
NO       DC    C'PN'
         SPACE  2
         DS    0D
CORE     DS    CL4096
COREXT   DS    CL4096
         END
