         TITLE 'SPIE UTILITY PROGRAM'
ZSPIE1   INIT
         EJECT
*              THIS PROGRAM HAS BEEN WRITTEN TO ALLOW COBOL USERS TO
*  SPECIFY THE ADDRESS OF AN INTERRUPTION EXIT ROUTINE, AND TO SPECIFY
*  THE PROGRAM INTERRUPTION TYPES THAT ARE TO CAUSE THE EXIT ROUTINE TO
*  BE GIVEN CONTROL.
         SPACE 3
*              IF A COBOL PROGRAMMER WISHES TO USE THIS OPTION, A CALL
*  MUST BE MADE PASSING THREE PARAMETERS TO ZSPIE1 --
         SPACE 2
*    PARM. 1 -  THE NAME OF A PARAGRAPH THAT IS TO TAKE CONTROL WHEN
*               THERE IS AN INTERRUPT.
*    PARM. 2 -  A FIFTEEN BYTE AREA.
*                   THIS WILL BE USED TO INDICATE WHAT INTERRUPTS ARE
*                   TO BE INTERCEPTED.
         SPACE 1
*              BYTE/TYPE              INTERRUPTION TYPE
*
*                    1             OPERATION
*                    2             PRIVILEGED OPERATION
*                    3             EXECUTE
*                    4             PROTECTION
*                    5             ADDRESSING
*                    6             SPECIFICATION
*                    7             DATA
*                    8             FIXED-POINT OVERFLOW
*                    9             FIXED POINT DIVIDE
*                   10             DECIMAL OVERFLOW
*                   11             DECIMAL DIVIDE
*                   12             EXPONENT OVERFLOW
*                   13             EXPONENT UNDERFLOW
*                   14             SIGNIFICANCE
*                   15             FLOATING-POINT DIVIDE
         SPACE 1
*                   THE PROGRAM WILL CLEAR ALL BITS EXCEPT THE LEAST
*                   SIGNIFICANT, SO THAT ALL EVEN NUMBERS WILL BE
*                   TREATED AS IF THIS PARTICULAR REQUEST IS NOT
*                   REQUIRED, AND ODD NUMBERS AS BEING REQUIRED.
*    PARM. 3 -  A HALF-WORD ON AHALF-WORD BOUNDARY
*                   THIS WILL INDICATE TO THE EXIT ROUTINE, THE
*                   ACTUAL INTERRUPT.
         SPACE 3
*              WHEN THE OPTION IS NO LONGER REQUIRED -
*                        AT THE END OF THE MODULE
*                     OR IF THE PROGRAMMER REQUIRES NEW OPTIONS
*              THE PROGRAMMER MUST MAK& A CALL TO ZSPIE2 PASSING NO
*              PARAMETERS
         EJECT
         LM    R4,R6,0(R1) LOAD PARAMETER LIST
         USING ZSPIE3,R3
         L     R3,=A(ZSPIE3)
         GETMAIN R,LV=16 GET 16 BYTES OF CORE
         USING HOLDAREA,R8
         LR    R8,R1 SAVE REGISTER 1
         MVC   LINK,HOLDADDR MOVE ADDRESS OF LAST AREA INTO THIS AREA
         ST    R8,HOLDADDR SAVE THE ADDRESS OF THIS AREA
         SPACE 1
         ST    R4,HOLD1 SAVE THE ADDRESS OF THE INTERRUPT EXIT
         ST    R6,HOLD2 SAVE THE ADDRESS OF THE FIELD THAT WILL CONTAIN-
                              THE ACTUAL INTERRUPT TYPE
         SPACE 1
         NC    0(15,R5),=15X'01' CLEAR ALL UNWANTED BITS
         LA    R7,15 LOAD A COUNT OF 15
         SR    R6,R6 CLEAR REGISTER
A1       SR    R4,R4 CLEAR REGISTER
         IC    R4,0(R5) PUT A BYTE OF INTERRUPT MASK INTO A REGISTER
         LA    R5,1(R5) INCREMENT TO THE NEXT BYTE FOR NEXT TIME
         BCT   R7,A2
         OR    R6,R4 SET THE LAST BIT ON, IF REQUIRED
         STH   R6,A3 STORE INTERRUPT MASK IN SPIE
         MVI   A4,X'00' RESET PROGRAM MASK
         TM    A3+1,B'10000000' IS FIXED-POINT OVERFLOW REQUIRED
         BZ    *+8 NO
         OI    A4,B'00001000' SET PROGRAM MASK
         TM    A3+1,B'00100000' IS DECIMAL OVERFLOW REQUIRED
         BZ    *+8 NO
         OI    A4,B'00000100' SET PROGRAM MASK
         TM    A3+1,B'00000100' IS EXPONENT UNDERFLOW REQUIRED
         BZ    *+8 NO
         OI    A4,B'00000010' SET PROGRAM MASK
         TM    A3+1,B'00000010' IS SIGNIFICANCE REQUIRED
         BZ    *+8 NO
         OI    A4,B'00000001' SET PROGRAM MASK
         CNOP  2,4
         LA    R1,*+12 LOAD BRANCH ADDRESS
         BALR  R1,R1 BRANCH AROUND PARAMETERS
A4       DC    X'00' PROGRAM MASK
         DC    AL3(INTEXIT) EXIT ROUTINE ADDRESS
A3       DC    2X'00' INTERRUPTION MASK
         SVC   14 SPIE SVC
         ST    R1,HOLD3 SAVE REGISTER 1
         SPACE 3
END      EXIT
         EJECT
A2       STC   R7,A5+3 STORE NUMBER OF BITS TO BE SHIFTED
A5       SLL   R4,0
         OR    R6,R4 SET BIT ON IN MASK
         B     A1
         LTORG
         EJECT
         DS    0F
INTEXIT  EQU   *
         USING INTEXIT,R15
         STM   R0,R13,C0002
         L     R12,=A(A0001)
         L     R3,=A(ZSPIE3)
         B     B1
C0002    DS    18F
         LTORG
B1       EQU   *
         DROP  R15
         L     R8,HOLDADDR RESTORE THE ADDRESS OF THIS AREA
         L     R9,HOLD2 PUT ADDRESS OF FIELD THAT WILL CONTAIN THE     -
                              INTERRUPT CODE, INTO REGISTER 3
         LR    R4,R1 SAVE ADDRESS OF REGISTER 1
         LA    R15,SUPER ROUTINE TO CHANGE TO SUPERVISOR STATE
         SVC   12 GO TO SUPER
         SPACE 2
NEXTJOB  NI    0(R4),B'01111111' SET OFF PI SWITCH IN PIE
         MVC   0(2,R9),6(R4) MOVE INTERRUPTION CODE FOR USER
         LPSW  RBCALL
RETURN   EQU   *
         L     R15,HOLD1 LOAD ADDRESS OF EXIT POINT IN USER PROGRAM
         LM    R0,R13,C0002
         BR    R15
         EJECT
*
*      THIS ROUTINE PLACES THE PROGRAM INTO THE SVC STATE
*
         SPACE 3
SUPER    L     R3,16 CVT
         L     R3,0(R3) TCB LIST
         L     R3,4(R3) CURRENT TCB
         L     R3,0(R3) RB
         L     R3,28(R3) PREVIOUS RB
         MVC   RBCALL(5),16(R3) SAVE PSW(EXCEPT INST. ADDR.)
         MVI   17(R3),B'00000100' SET KEY TO ZERO & STATE TO SVC
         BR    R14 RETURN
         SPACE 5
RBCALL   DS    D
         ORG   RBCALL+5
         DC    AL3(RETURN)
         ORG
         EJECT
ZSPIE2   CSECT
         INIT
*
*  THIS ROUTINE WILL RESTORE CONTROL BACK TO THE PREVIOUS PICA
*
         SPACE 2
         L     R3,=A(ZSPIE3)
         L     R8,HOLDADDR RESTORE THE ADDRESS OF THIS AREA
         L     R5,HOLD3 RELOAD ADDRESS OF PREVIOUS PICA
         MVC   HOLDADDR,LINK SAVE THE ADDRESS OF THE NEXT AREA
         LR    R1,R8
         FREEMAIN R,LV=16,A=(1)
         SPIE  MF=(E,(5)) USE EXECUTE FORM AND OLD PICA ADDRESS
         EXIT
         LTORG
         EJECT
ZSPIE3   CSECT
HOLDADDR DC    A(0)
         EJECT
HOLDAREA DSECT
HOLD1    DS    F
HOLD2    DS    F
HOLD3    DS    F
LINK     DS    F
         END
