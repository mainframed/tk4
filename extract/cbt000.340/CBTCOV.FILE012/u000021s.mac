HEX      CSECT
         SPACE
*  HEX IS A ROUTINE INVOKED BY A PL1 PROGRAM WHICH CONVERTS A CHARACTER
*    STRING OR AN AREA OF CORE INTO WRITEABLE HEXADECIMAL FORM.
*        E.G. '123' WOULD BECOME 'F1F2F3'.
*    IT EXPECTS A PARAMETER LIST POINTED AT BY REGISTER RA. THIS MAY
*    CONSIST OF TWO OR THREE ELEMENTS. THE LAST PARAMETER MUST BE THE
*    DOPE VECTOR OF THE TARGET STRING,WHICH FOR THE F COMPILER MAY
*    BE VAR OR FIXED LENGTH; IF THERE ARE TWO ELEMENTS IN THE LIST
*    THEN THE FIRST ENTRY MUST BE THE DOPE VECTOR OF THE SOURCE
*    CHARACTER STRING(VAR OR OTHERWISE FOR F),IF THERE ARE THREE
*    ELEMENTS IN THE PARAMETER LIST THEN THE FIRST MUST POINT TO THE
*    AREA TO BE TRANSLATED,AND THE SECOND BE A FULL OR HALF WORD
*    CONTAINING THE NUMBER OF BYTES TO BE CONVERTED.
*  IF THE PARAMETER LIST IS OF ANY OTHER LENGTH THEN ERROR IS RAISED
*    IN THE INVOKING PROGRAM. THE NUMBER OF BYTES TO BE TRANSLATED
*    MAY NOT EXCEED 32767.
*
*  TYPICAL INVOKATIONS:
*    1 STRING=HEX(STRING);
*    2 STRING=HEX(ADDR(STRING),BIN(3));
*    3 STRING=HEX(STRING,BIN(3))       O.K.IN F SINCE THE FIRST WORD
*                                           OF THE DOPE VECTOR OF
*                                           STRING POINTS TO STRING
*    4 CALL HEX(STRING,STRING);
*
         EJECT
         USING *,15
         USING SAVEAREA,13
         B     ENTRY                   BRANCH ROUND IDENTIFIER
         DC    AL1(3)
         DC    C'HEX'
ENTRY    STM   2,8,28(13)               STORE 2 TO 8  (REGISTERS CHANGD
*
*
*        REGISTER MAP                                      SAVE KEEP
         SPACE
RA       EQU   1                        PARAMETER REGISTER,×NO  ×YES  ×
CDV      EQU   2                        -> CHAR DOPE VECTOR×YES ×NO   ×
CSA      EQU   3                        -> CHAR STRING     ×YES ×NO   ×
HDV      EQU   4                        -> HEX DOPE VECTOR ×YES ×YES  ×
HSA      EQU   5                        -> HEX STRING      ×YES ×NO   ×
CSL      EQU   6                        =  CHAR STRING LGTH×YES ×NO   ×
R6       EQU   CSL                      LOOP CONTROL
TA       EQU   CSL                     TRANSLATE TABLE BASE
HSL      EQU   7                        =  HEX  STRING LGTH×YES ×YES  ×
INCR     EQU   8         )              WORK REGISTER      ×YES ×NO   ×
EX1      EQU   INCR      )
EX2      EQU   INCR      )
WORK     EQU   INCR      )
*
*        FOUR WORDS IN THE SAYE AREA ARE USED AS WORKSPACE (WS1)
*
*
*
*        FIND DOPE VECTORS FOR CHAR STRING AND HEX STRING
         SPACE
         L     CDV,0(RA)                CDV -> CHAR DOPE VECTOR
         L     HDV,4(RA)                HDV -> HEX DOPE VECTOR
         LH    CSL,6(CDV)               CSL =  LENGTH OF CHAR STRING
*
*        DETERMINE WHICH FORM OF PARAMETERS HAS BEEN PASSED
*
         TM    0(RA),X'80'              TEST FOR FLAG ON FIRST PARM
         BO    ERROR                    ONE PARM ONLY, RAISE ERROR
         TM    4(RA),X'80'              TEST FOR FLAG ON SECOND PARM
         BO    DVTYPE                   TWO PARMS, BOTH DOPE VECTORS
         TM    8(RA),X'80'              NOT TWO, TEST FOR THREE
         BNO   ERROR                    RAISE ERROR CONDITION
         L     WORK,4(RA)               THREE PARMS,LOAD CSL & HDV
         LH    CSL,0(WORK)               AFRESH
         LTR   CSL,CSL                 IF CSL IS ZERO THEN ASSUME
         BNZ   CSLGOOD                   THAT THE LENGTH WAS IN A
         L     CSL,0(WORK)               FULL WORD, AND RELOAD CSL.
CSLGOOD  L     HDV,8(RA)
*
DVTYPE   LTR   HSL,CSL                  NULL, OR UNASSIGNED VAR, STRING
         BNP   NULLSTRG                NULL, OR UNASSIGNED VAR, STRING
         AR    HSL,HSL                 HSL = HEX LENGTH REQUIRED
         CH    HSL,4(HDV)               C.F. REQUIRED AND MAXIMUM LENGT
         BNH   A1                       BRANCH IF O.K.
         LH    HSL,4(HDV)               ELSE OVERIDE REQUIRED LENGTH
A1       STH   HSL,6(HDV)               SET HEX LENGTH
         L     CSA,0(CDV)               CSA -> CHAR STRING
         L     HSA,0(HDV)               HSA -> HEX STRING
*
*
*        UNPACK  CHAR  STRING
         SPACE
         LA    INCR,14                  LOAD INCREMENT FOR ONE LOOP
         LR    R6,HSL                   CONTROL REGISTER FOR LOOP
         B     B2                       BRANCH TO LOOP ENTRY / EXIT
MOVE     MVC   0(0,HSA),WS1             DUMMY MVC
B1       UNPK  0(15,HSA),0(8,CSA)       UNPACK SEVEN BYTES + ONE GROT
         LA    CSA,7(CSA)               INCREMENT CHAR STRING POINTER
         AR    HSA,INCR                   -"-     HEX   -"-    -"-
B2       SR    R6,INCR                  ARE THERE MORE THAN 7 CHARS NOW
         BP    B1                       YES, REPEAT LOOP
         UNPK  WS1,0(8,CSA)             NO, UNPACK REMAINDER INTO WS1
         LA    EX1,13(R6)               EX1 = HEX BYTES IN WS1 LESS 1
         EX    EX1,MOVE                 MOVE THESE BYTES TO HEX STRING
*
*
*        TRANSLATE HEX STRING
         SPACE
         L     HSA,0(HDV)               RESTORE HEX STRING POINTER
         LA    INCR,256                 LOAD INCREMENT FOR ONE LOOP
         LA    TA,TABLEND              ADRESS TRANSLATE TABLE
         SR    TA,INCR
         B     C2                       BRANCH TO LOOP ENTRY / EXIT
         DC    C'0123456789ABCDEF'
TABLEND  EQU   *
TRANS    TR    0(0,HSA),0(TA)           DUMMY TRANSLATE
C1       TR    0(256,HSA),0(TA)         TRANSLATE 256 BYTES
         LA    HSA,256(HSA)             INCREMENT HEX POINTER
C2       SR    HSL,INCR                 MORE THAN 256 CHARS LEFT?
         BP    C1                       YES , THEN LOOP AGAIN
         LA    EX2,255(HSL)             EX2= NO. OF CHARS LEFT LESS 1
         EX    EX2,TRANS                TRANSLATE REMAINDER
*
*
*        RETURN
         SPACE
RETURN   LM    2,8,28(13)               RESTORE REGISTERS ALTERED
         BR    14                       RETURN
*
*
*        NULL STRING PASSED
         SPACE
NULLSTRG SR    CSL,CSL                 RETURN A NULL STRING
         STH   CSL,6(HDV)
         B     RETURN
*
*
*        RAISE ERROR CONDITION
         SPACE
ERROR    DC    X'00'                    CAUSE OC1 TO RAISE ERROR
*
*
*        WORK SPACE
         SPACE
         SPACE
SAVEAREA DSECT
         DS    3F
WS1      DS    CL15                     TEMP. WORK AREA
         END
