         TITLE 'PURPOSE OF PROGRAM'
***      THE PURPOSE OF THIS PROGRAM IS TO LOG THE FREQUENCY OF:
***            ALL SVC ACTIVITY BY SVC NUMBER
***            ALL EXCP ACTIVITY BY DEVICE ADDRESS
***            ALL XCTL ACTIVITY BY MODULE NAME
***            ALL LINK ACTIVITY BY MODULE NAME
***            ALL LOAD ACTIVITY BY MODULE NAME
***            ALL ATTACH ACTIVITY BY MODULE NAME
***            ALL BLDL'S BY MODULE NAME
***            ALL CHANNEL STATES
***            THE STATE OF THE CPU
***            ALL D/A SEEKS BY DRIVE ADDR
***
***      THE LOGGING IS EFFECTED BY PREFIXING THE SVC 1ST LEVEL
***      INTERRUPT HANDLER TO POINT INTO USER CODE.
***      THE BLDL RESIDENT ROUTINE IECPBLDL IS ALSO DIVERTED INTO
***      USER CODE.
***
***      TWO FORMS OF LOGGING ARE EMPLOYED:
***            INTERNAL TABLE (FOR EXCP AND TOTAL SVC ACTIVITY)
***            VARIABLE LENGTH INTERNAL TABLE WHICH IS DUMPED
***            WHEN FULL. THE TABLE IS SPLIT INTO 2 HALVES AND EACH
***            HALF IS USED ALTERNATLY.  THE TABLE CONTAINS ENTRIES
***            FOR LINK, LOAD, XCTL, ATTACH CHANNEL STATES AND CPU
***            STATES, AND D/A SEEKS.
***
***      THE PROGRAM SETS A TIME OF N SECONDS AND INSPECTS A SWITCH
***      THAT IS SET IF THE VARIABLE LENGTH TABLE BECOMES FULL.  IF
***      THE TABLE IS NOT FULL THEN CHANNELS 1 TO 5 ARE TESTED AND THE
***      RESULTING CONDITION CODE STORED FOR PLACEMENT IN RECORD TYPE 4
***      THE TIMER OLD PSW IS CHECKED FOR:
***            PROB/SUPV STATE
***            CPU/WAIT STATE
***            PROTECT KEY = OR ^= ZERO
***      THIS INFORMATION IS LOGGED IN RECORD TYPE 4.
***      A BUFFER OF 18 ENTRIES IS ACCUMULATED.  IF
***      18 ENTRIES HAVE BEEN ACCUMULATED THEN THE BUFFER IS PLACED
***      IN THE VARIABLE TABLE AS A RECORD TYPE 4 ENTRY.  IF
***      THE TABLE IS FULL THEN LOGGING OF XCTL, LINK, LOAD AND
***      ATTACH AND DISK SEEKS IS SUSPENDED BY TURNING ON A 'NOP'.
***      THIS SWITCH IS INSPECTED AT THE EXPIRATION OF EACH TIMER
***      INTERVAL AND IF ON THEN A TABLE BUFFER SWITCH IS MADE BY
***      ROUTINE 'SWITCH'.  THE FULL TABLE BUFFER IS THEN DUMPED.
***      IF BUFFER OVERFLOW IS FOUND (NO EMPTY BUFFER AVAILABLE
***      WHEN A SWITCH IS REQUIRED) THEN RECORD TYPE 9 IS FLAGGED
***      WITH A 'Y' IN POS 2.
***      THE PROGRAM THEN EMPTIES OUT THE VARIABLE LENGTH TABLE AND
***      BOTH FIXED LENGTH TABLES AND TERMINATES NORMALLY.
***      STAE PROTECTION IS INCORPORATED.  IF THE SVC MONITOR IS
***      HOOKED INTO THE SVC FLIH THEN SVC 253 IS ISSUED FOR SVCOUT
***      TO UNHOOK.  IF NOT HOOKED THEN NORMAL ABEND PROCESSING IS
***      TAKEN.
***      AT HOOVER SVC 253 IS A TYPE 3 SVC WHICH CONSISTS OF A BRANCH
***      TO REGISTER 1.
      TITLE 'JCL TO EXECUTE'
***      THE JCL TO EXECUTE THE PROGRAM IS:-
***            //STEPNAME EXEC PGM=TRACE,PARM=' OPTIONS '
***            //OUTPUT DD DSN=XXX,VOL=SER=YYY,UNIT=ZZZ,DISP=DDD,
***            // DCB=(RECFM=FB,LRECL=20,BLKSIZE=BBBB)
***
***            G.R. FREETH.  HOOVER (UK) LTD.  JUNE 1971.
***            VERSION 2 JUNE 1971. (VERSION 1 WAS DECEMBER 1970)
***            VERSION 3 FEB 1972. (INCORPORATED BLDL AND TEST CHANNEL)
***            VERSION 4 MAR 1972.  (INCORPORATED RANDOM SAMPLING
***                                 INTERVAL OPTION)
***            VERSION 5 APL 1972. (INCORPORATED BUFFERING FOR TABLE
***                                    AND D/A SEEK LOGGING.)
***            VERSION 6 APL 1972. (INCORPORATED PROTECT KEY LOGGING
***                                    AND DROPPED FACILITY FOR CHAN
***                                    6 TESTING.  IF CHAN 6 IS REQUD
***                                    THEN THE ENTRY WOULD HAVE TO BE
***                                    INCREASED TO TWO BYTES - NOT
***                                    WORTH INCREASE IN OVERHEAD AS
***                                    FEW PEOPLE HAVE 6 CHANNELS)
***            VERSION 7 FEB 1973. (INCORPORATED TEST FOR HASP PSEUDO
***                                    DEVICES BY UNIT ADDR AND BYPASS.
***                                    YOU MAY WANT TO LOG THESE.
***                                    CHANGE CODE FOLLOWING UCB ADDR
***                                    LOCATION IN R2)
         TITLE 'PROGRAM OPTIONS'
***      THE RECORDING OF VARIOUS EVENTS MAY BE SELECTED OR
***      BE BYPASSED IF DESIRED.  A PARM IS SUPPLIED IN THE EXEC CARD
***      SPECIFYING WHICH FUNCTIONS ARE TO BE BYPASSED/SELECTED
***
***      THE FORMAT OF THIS PARM FIELD IS :-
***            'L,L,L,L,*'             WHERE 'L' IS THE FUNCTION TO
***                                    BE BYPASSED/SELECTED AND '*' IS
***                                    END OF LIST.
***
***      L MAY BE :-
*
***            A                       BYPASS EXCP COUNTING
***                                    AND D/A SEEK LOGGING
***            B                       BYPASS LINK RECORDING
***            C                       BYPASS XCTL RECORDING
***            D                       BYPASS LOAD RECORDING
***            E                       BYPASS ATTACH RECORDING
***            F                       BYPASS BLDL RECORDING
***            G                       BYPASS CHANNEL AND CPU RECORDING
***                                    AND PROTECT KEY LOGGING.
***            THHMMSSTH               SET FIXED SAMPLING INTERVAL -
***                                      WHERE HHMMSSTH IS AS FOR A
***                                      STIMER WITH A DINTVL PARAMETER
***                                    THE DEFAULT IS A RANDOM SAMPLE
***                                    BETWEEN 50 AND 250 M/S.
         TITLE 'RECORD FORMATS'
***      THE RECORD FORMATS O/P ARE AS FOLLOWS
         SPACE 2
***            RECORD TYPE 0 - OPTIONS SELECTED
*
***      POS   BYTES   BIT             A BIT ON MEANS OPTION SELECTED
*
***       1      1                     RECORD TYPE EBCDIC '0'
***       2      1      0              EXCP COUNTING (Y OR N)
***                     1              LINK COUNTING  (Y OR N)
***                     2              XCTL COUNTING  (Y OR N)
***                     3              LOAD COUNTING  (Y OR N)
***                     4              ATTACH COUNTING  (Y OR N)
***                     5              BLDL COUNTING    (Y OR N)
***                     6              CHANNEL AND CPU RECORDING
***                                    AND PROTECT KEY LOGGING
***                     7              TIMER INTERVAL SPECIFIED
***       3      2                     SPARE EBCDIC ' '
***       5      4                     TIMER INTERVAL USED SSTH
****                                   (SECS, TENTHS AND HUNDREDTHS)
***       9      4                     CORE SIZE OF DYNAMIC TABLE F'N'
***      13      4                     TIME RECORD WRITTEN
***      17      4                     DATE RECORD WRITTEN
         SPACE 2
***            RECORD TYPE 1 - LINK, LOAD, XCTL, ATTACH FREQUENCY
*
***      POS   BYTES
*
***       1      1                     RECORD TYPE EBCDIC '1'
***       2      1                     TCB ID BINARY
**                                     THE HIGH ORDER BIT OF THE TCB ID
***                                    IF THE MODULE WAS FOUND VIA BLDL
***       3      1                     SVC NUMBER BINARY 6,7,8 OR 42
***       4      1                     SPARE EBCDIC ' '
***       5      8                     MODULE NAME EBCDIC
***      13      4                     FREQUENCY BINARY F'1'
***      17      4                     SPARE EBCDIC ' '
         SPACE 2
***            RECORD TYPE 2 - TOTAL SVC FREQUENCY
*
***      POS   BYTES
*
***       1      1                     RECORD TYPE EBCDIC '2'
***       2      1                     SPARE EBCDIC ' '
***       3      1                     SVC NO. BINARY 0 TO 255
***       4      1                     SPARE EBCDIC ' '
***       5      8                     SVC NO IN EBCDIC IN FORMAT -
***                                    'SVC NNN '
***      13      4                     FREQUENCY BINARY F'FREQ'
***      17      4                     SPARE EBCDIC ' '
         EJECT
         SPACE 2
***            RECORD TYPE 3 - EXCP COUNTS BY DEV ADDR
*
***      POS   BYTES
*
***       1      1                     RECORD TYPE EBCDIC '3'
***       2      1                     SPARE EBCDIC ' '
***       3      1                     SVC NO. BINARY 0 FOR EXCP
***       4      1                     SPARE EBCDIC ' '
***       5      3                     DEV ADDR EBCDIC E.G. '230'
***       8      5                     SPARE EBCDIC ' '
***      13      4                     FREQUENCY BINARY F'FREQ'
***      17      4                     SPARE EBCDIC ' '
         SPACE 2
***            RECORD TYPE 4 - CHANNEL AND CPU STATES
*
***      POS   BYTES   BIT
*
***       1      1                     RECORD TYPE EBCDIC '4'
***       2      1                     SPARE EBCDIC ' '
***       3      1      0              CHAN 1 BUSY
***       3      1      1              CHAN 2 BUSY
***       3      1      2              CHAN 3 BUSY
***       3      1      3              CHAN 4 BUSY
***       3      1      4              CHAN 5 BUSY
***       3      1      5              IF ON THEN PROTECT KEY = 0
***       3      1      6              CPU IN WAIT STATE
***       3      1      7              CPU IN PROBLEM STATE
***     4-20  17 * 1                   AS POS 3
         EJECT
***            RECORD TYPE 5 - DISK ARM MOVEMENT
*
***      POS   BYTES
*
***       1      1                     RECORD TYPE EBCDIC '5'
***       2      3                     UNIT ADDR EBCDIC
***       5      2                     CYL SEEK ADDR (BIN H'CC')
***       7    7 * 2                   7 MORE OF POS 5
         SPACE 2
***            RECORD TYPE 9 - TRAILER RECORD
*
***      POS   BYTES
*
***       1      1                     RECORD TYPE EBCDIC '9'
***       2      3                     SPARE EBCDIC ' '
***       5      4                     NO. OF TIMES TABLE DUMPED
***       9      4                     SPARE EBCDIC ' '
***      13      4                     RUN TIME IN SECONDS F'SECS'
***      17      4                     SPARE EBCDIC ' '
         TITLE 'USER MODIFICATIONS'
***      THE USER MAY HAVE NEED TO MODIFY SOME OF THE TABLES TO
***      SUIT HIS INSTALLATION.
***
***      THE COUNTING OF EXCP'S CATERS FOR 30 ACTIVE UNITS.
***      IF MORE MAY BE ACTIVE THEN 'UCBTAB' MUST BE EXTENDED.
***
***      THE VARIABLE GETMAIN FOR THE LINK, LOAD, XCTL AND ATTACH
***      TABLE MAY BE CHANGED TO TAKE ADVANTAGE OF MORE CORE IF SO
***      DESIRED. THE STANDARD RANGE IS FROM 2000-100000 BYTES.
***      CHANGE 'RANGE' IF DESIRED.
***
***      NOTE THAT THIS PROGRAM USES A HOOVER MACRO 'HSAVE'.
***      THE USER WILL HAVE TO CODE HIS OWN ENTRY SAVES.
         TITLE  'ENTRY, EXIT AND MAIN CONTROL'
TRACE    CSECT
         HSAVE
         BAL   LINKREG,PARMPROC        PROCESS PARM FIELD
         OPEN  (OUTDCB,OUTPUT)
         STAE  ABRTN,CT
         LTR   15,15
         BNZ   NOCORE
         GETMAIN EC,LV=1536,A=COREADDR RESERVE CORE
         LTR   15,15                   TEST GOTTEN
         BNZ   NOCORE
         GETMAIN VC,LA=RANGE,A=ANSWER  GET CORE FOR VARIABLE TABLE
         LTR   15,15
         BNZ   NOCORE
         FREEMAIN E,LV=1536,A=COREADDR  FREE CORE FOR TRANSIENT RTNS
         LM    0,1,ANSWER              GET CORE ADDR AND SIZE
         SRA   1,1                     SPLIT SIZE INTO 2
         ST    0,CURRSTRT              INIT START OF PRIME BUFFER
         AR    0,1                     ADD SIZE
         ST    0,CURREND               INIT END OF PRIME BUFFER
         ST    0,DUMPSTRT              INIT ADDR OF SECOND BUFFER
         AR    0,1                     CALC END OF SECOND BUFFER
         ST    0,DUMPEND               INIT ADDR OF SECOND BUFFER
         BAL   LINKREG,SWITCH          INIT LASTNTRY AND LISTEND
         TIME  BIN
         LR    3,0                     GET TIME
         SR    2,2                     ZEROIZE FOR DIVIDE
         D     2,=F'100'               CONVERT TO SECONDS
         ST    3,STARTM                SAVE START TIME
         STM   0,1,AREA+12             STORE TIME AND DATE IN RT0
         MVC   AREA+8(4),ANSWER+4      SAVE TABLE SIZE IN RT0
         BAL   LINKREG,PRINT           WRITE RECORD
         MVC   SVCPSW(4),100           SAVE I/A OF SVC NPSW
         L     1,SVCPSW                GET ADDR OF SVC FLIH
         CLC   0(2,1),STM              CHECK FOR STM INSTR
         BNE   EXITOUT                 IF NOT THEN XIT
         MVC   ACCUM(4),0(1)           MOVE STM INSTR
         MVC   ACCOUT(4),0(1)          AND AGAIN
         MVI   ACCOUT,X'98'            AND TURN INTO LM
         LM    1,2,96                  GET SVC NEW PAS
         LA    2,4(2)                  BUMP UP ADDRESS
         STM   1,2,XITPSW              STORE FOR RETURN TO FLIH
         LA    1,SVCIN
         SVC   253                     MODIFY SVC NPSW
         MVI   INSW,C'Y'               INDICATE HOOKED IN
         LA    1,SVCSTATE              GET INTO SUPERVISOR STATE
         SVC   253
WTOR     XC    REPECB,REPECB           RESET ECB
         WTOR  'REPLY STOP TO END TRACE',REPLY,4,REPECB
STIMER   SSM   ENABLE                  ENABLE INTERRUPTS
         STIMER WAIT,DINTVL=DELAY      WAIT
         SSM   DISABLE                 DISABLE TO ENSURE VALID STATES
RANDTIME NOP   FIXDTIME
*        CALCULATE NEXT RANDOM TIMER INTERVAL
          L    5,A
          M    4,B
          D    4,C
          LA   4,1(4)
          ST   4,B
          SRDA 4,32
          D    4,D
          A    4,E
          CVD  4,DWORD
          UNPK DELAY(8),DWORD+4(4)
         OI    DELAY+7,X'F0'
FIXDTIME DS    0H
         TM    REPECB,X'40'            REPLY RECEIVED ?
         BZ    CARRYON                 NO- BRANCH
         SSM   ENABLE                  ENABLE
         CLC   REPLY,STOP              CHECK REPLY
         BNE   WTOR                    IF ERROR REISSUE
         WTO   'STOP ACCEPTED'
         MVI   ENDSW,C'Y'              INDICATE TERMINATE
         MVI   SVCSW+1,X'F0'           FORCE TRACE STOP
CARRYON  CLI   SVCSW+1,X'F0'           TABLE FULL ? OR TERMINATE ?
         BNE   TCH                     IF NOT THEN TEST CHANNELS
         SSM   ENABLE                  ENABLE
         CLI   ENDSW,C'Y'              IS THIS THE END ?
         BNE   NORMSWCH                IF NOT THEN PERFORM SWITCH
         MVC   DUMPSTRT(4),CURRSTRT    ELSE INIT DUMP START AND END
         MVC   DUMPEND(4),LASTNTRY     TO CURRENT BUFFER
         B     DUMPIT
NORMSWCH BAL   LINKREG,SWITCH          PERFORM SWITCH
         MVI   SVCSW+1,X'00'           AND ALLOW FURTHER RECORDING
DUMPIT   EQU   *
         L      2,DUMPCNT
          LA    2,1(2)                 COUNT NO. OF DUMPS OF TABLE
          ST   2,DUMPCNT
         L     2,DUMPSTRT              GET BUFFER TO DUMP
LOOP1    C     2,DUMPEND               END OF BUFFER ?
         BC    10,NOMORE               IF YES BRANCH
         CLI   0(2),C'4'               RT = 4 ?
         BE    RT4OUT                  YES - SPECIAL ACTION
         CLI   0(2),C'5'               RT = 5 ?
         BE    RT4OUT                  YES - SPECIAL ACTION
         CLC   2(8,2),LOWCHAR          TEST FOR INVALID END OF BUFFER
         BL    SKIP                    YES - IGNORE
         CLC   2(8,2),HIGHCHAR         TEST FOR INVALID END OF BUFFER
         BH    SKIP                    YES - SKIP
         MVI   RECTYPE,C'1'            RECORD TYPE 1
         MVC   TCBID,0(2)              TCB ID
         MVC   SVCNO,1(2)              SVC NUMBER
         MVC   NAME,2(2)               MODULE NAME
         CLC   NAME(6),FRSTLOAD        IGC000 ?
         BE    LOAD1A                  YES - MODIFY
         CLC   NAME(5),FRSTLOAD        IGC00 ?
         BE    LOAD1B                  YES - MODIFY
         B     NOTFIRST                ELSE NOT 1ST SVC LOAD - SKIP
LOAD1A   MVC   NAME(6),SVCCON          SET TO 'SVC   '
         B     LOAD1C
LOAD1B   MVC   NAME(5),SVCCON          SET TO 'SVC  '
LOAD1C   OI    NAME+7,X'30'            CONVERT TO UNSIGNED
NOTFIRST EQU   *
         MVC   COUNT,ONE               COUNT OF ONE
         BAL   LINKREG,PRINT           WRITE RECORD
SKIP     EQU   *
         LA    2,10(2)                 INCREMENT TABLE ADDR
         B     LOOP1                   LOOP
RT4OUT   MVC   AREA(20),0(2)           MOVE RECORD
         BAL   LINKREG,PRINT
         LA    2,20(2)                 INCR
         B     LOOP1                   LOOP
NOMORE   CLI   ENDSW,C'Y'              TERMINATE REQUESTED ?
         BE    ENDIT                   IF YES GO OUT
         CLI   SVCSW+1,X'F0'           HAS PRIME BUFFER BECOME FULL ?
         BNE   STIMER                  NO - NO BUFFER OVERFLOW
         MVI   OFLOW,C'Y'              ELSE INDICATE OVERFLOW
         B     CARRYON                 GO DUMP BUFFER ASAP
NOCORE   WTO   'INSUFFICIENT CORE'
EXITOUT  L     13,HSAVE+4
         RETURN (14,12),RC=0
         TITLE 'PERFORM TABLE BUFFER SWITCH'
SWITCH   LM    0,1,STARTS              GET START ADDRS
         ST    1,CURRSTRT              SWAP
         ST    1,LASTNTRY              AND INIT
         ST    0,DUMPSTRT              NEXT ENTRY ADDRESS
         LM    0,1,ENDS                SWAP
         ST    1,CURREND               AND INIT LAST
         ST    1,LISTEND               TABLE ENTRY ADDR
         ST    0,DUMPEND
         BR    LINKREG                 RETURN
         TITLE  'UNHOOK, FIXED TABLES ANALYSIS'
ENDIT    LA    1,SVCOUT
         SVC   253                     UNHOOK
         MVI   INSW,C'N'               INDICATE UNHOOKED
         WTO   'MONITOR OUT'
         LA    2,REC                   GET ADDR OF SVC TOTAL TABLE
         SR    3,3                     ZEROISE
         LA    4,256                   INIT BCT REG
SVCCOUNT MVI   RECTYPE,C'2'            RECORD TYPE 2
         STC   3,SVCNO                 SVC NUMBER
         CVD   3,DWORD
         MVC   SVCNAME+4(4),SVCMASK    MOVE EDIT MASK
         ED    SVCNAME+4(4),DWORD+6    ED SVC NUMBER
         MVC   NAME(8),SVCNAME         MOVE TO NEW NAME
         MVC   COUNT,0(2)              COUNT
         BAL   LINKREG,PRINT           WRITE RECORD
         LA    2,4(2)                  INCREMENT TABLE ADDR
         LA    3,1(3)                  INCREMENT SVC NO
         BCT   4,SVCCOUNT              LOOP UNTIL ALL DONE
         L     2,AUCBTAB               GET ADDR OF UCB TABLE
UCBCOUNT CLC   0(4,2),UCBEND           END OF TABLE ?
         BE    UCBXIT
         CLI   2(2),X'FF'              END OF TABLE ?
         BE    UCBXIT
         MVI   RECTYPE,C'3'            RECORD TYPE 3
         MVI   SVCNO,X'00'             SVC NO
UCBPT1A  MVC   COUNT,4(2)              COUNT OF EXCP
         LH    3,2(2)                  GET UCB ADDR
         MVC   NAME(3),13(3)           MOVE EBCDIC DEV ADDR
         BAL   LINKREG,PRINT           WRITE RECORD
         LA    2,28(2)                 INCR TABLE POINTER
         B     UCBCOUNT                LOOP
UCBXIT   TIME  BIN                     GET END TIME
         SR    2,2
         LR    3,0
         D     2,=F'100'
         LR    1,3
         C     1,STARTM                TEST FOR MIDNIGHT
         BH    NOTMID                  IF HIGHER THEN NOT MIDNIGHT
         A     1,=F'86400'             ADD 24 HRS
NOTMID   S     1,STARTM                SUBTRACT START FROM END
         ST    1,COUNT                 STORE COUNT
         MVI   RECTYPE,C'9'            INIT TYPE 9 RECORD
         MVC   TCBID(1),OFLOW          MOVE OVERFLOW INDICATOR
         MVC   AREA+4(4),DUMPCNT        MOVE NO. OF DUMPS OF TABLE
         BAL   LINKREG,PRINT           WRITE RECORD
         CLOSE (OUTDCB,)
         B     EXITOUT
         TITLE 'TEST CHANNEL AND CPU ROUTINE'
TCH      NOP   STIMER
         MVI   STATS,X'00'             INIT STATS
         TM    X'19',X'02'             TEST EXTOPSW FOR WAIT STATE
         BZ    *+8
         OI    STATS,X'02'
         TM    X'19',X'01'             TEST EXTOPSW FOR PROB STATE
         BZ    *+8
         OI    STATS,X'01'
         TM    X'19',X'F0'             TEST EXTOPSW FOR PK=0
         BNZ   *+8
         OI    STATS,X'04'
         TCH   X'0100'
         BZ    *+8
         OI    STATS,X'80'
         TCH   X'0200'
         BZ    *+8
         OI    STATS,X'40'
         SR    1,1
         IC    1,R4INDX
         IC    2,STATS
         STC   2,RT4(1)
         CH    1,R4FULL
         BE    R4END
         LA    1,1(1)
         STC   1,R4INDX
         B     STIMER
R4END    EQU   *
         L     2,LASTNTRY              GET NEXT POS
         LA    2,20(2)                 DO CHECK
         C     2,LISTEND                 ON TABLE EXTENT
         BNL   R4NOP                   SKIP IF TABLE FULL
         ST    2,LASTNTRY              STORE POINTER
         S     2,TWENTY                -20 FOR THIS ENTRY
         MVC   0(20,2),RT4             MOVE RECORD
R4XIT    EQU   *
         MVI   R4INDX,X'02'            SET INDEX FOR NEW RECORD
         B     STIMER
R4NOP    MVI   SVCSW+1,X'F0'           FORCE TRACE STOP
         B     R4XIT                   XIT
R4INDX   DC    X'02'
         TITLE  'PUT RECORD'
PRINT    PUT   OUTDCB,AREA             PUT RECORD
         MVI   AREA,C' '
         MVC   AREA+1(19),AREA         CLEAR TO CHAR BLANKS
         BR    LINKREG                 RETURN
         TITLE 'PARM FIELD PROCESSING'
***      EVALUATE PARM FIELD (IF PRESENT)
PARMPROC L     1,0(1)                  GET PARM ADDR
         MVI   RECTYPE,C'0'            SET RECORD TYPE 0
         MVI   TCBID,X'FE'             INIT DEFAULT OPTIONS
         MVI   AREA+2,C' '             SET REST OF RECORD TO
         MVC   AREA+3(17),AREA+2       EBCDIC ' '
         CLC   0(2,1),=H'0'            NO PARM ?
         BE    PARMEND
         LH    2,0(1)                  GET LENGTH
         LA    1,2(1)                  GET START ADDR
PARMLOOP CLI   0(1),C'*'               END OF LIST ?
         BE    PARMEND                 YES - GO OUT
         CLI   0(1),C','               COMMA ?
         BE    PARMINCR                YES - SCAN NEXT
         CLI   0(1),C'A'               SKIP EXCP ?
         BE    NOEXCP                  YES FORCE NOP
         CLI   0(1),C'B'               SKIP LINK ?
         BE    NOLINK                  YES - FORCE NOP
         CLI   0(1),C'C'               SKIP XCTL ?
         BE    NOXCTL                  YES - FORCE NOP
         CLI   0(1),C'D'               SKIP LOAD ?
         BE    NOLOAD                  YES - FORCE NOP
         CLI   0(1),C'E'               SKIP ATTACH ?
         BE    NOATTA                  YES - FORCE NOP
         CLI   0(1),C'F'               BYPASS BLDL ?
         BE    NOBLDL
         CLI   0(1),C'G'               BYPASS CHANNEL AND CPU ?
         BE    NOCHAN
         CLI   0(1),C'T'               SET NEW TIMER INTERVAL ?
         BE    SETTIME
PARMINCR LA    1,1(1)                  POINT TO NEXT POS
         BCT   2,PARMLOOP              BRANCH UNTIL DONE
PARMEND  BR    LINKREG                 RETURN
NOEXCP   MVI   EXCPNOP+1,X'00'         NOP BRANCH
         NI    TCBID,X'7F'
         B     PARMINCR
NOLINK   MVI   LINKNOP+1,X'00'         NOP BRANCH
         NI    TCBID,X'BF'
         B     PARMINCR
NOXCTL   MVI   XCTLNOP+1,X'00'         NOP BRANCH
         NI    TCBID,X'DF'
         B     PARMINCR
NOLOAD   MVI   LOADNOP+1,X'00'         NOP BRANCH
         NI    TCBID,X'EF'
         B     PARMINCR
NOATTA   MVI   ATTANOP+1,X'00'         NOP BRANCH
         NI    TCBID,X'F7'
         B     PARMINCR
NOBLDL   MVC   BLDLNOP1(2),SVC3
         MVC   BLDLNOP2(2),SVC3
         NI    TCBID,X'FB'
         B     PARMINCR
NOCHAN   MVI   TCH+1,X'F0'             TURN NOP INTO BRANCH
         NI    TCBID,X'FD'
         B     PARMINCR
SETTIME  CLC   1(8,1),DELAY            TEST LOWER LIMIT
         BL    INVTIME
         CLC   1(8,1),FIVESEC          UPPER TIME LIMIT
         BH    INVTIME
         MVC   DELAY(8),1(1)           SET NEW TIME
         MVC   AREA+4(4),DELAY+4       INIT STIMER VALUE IN RT0
         OI    TCBID,X'01'             SET INDICATOR IN RT0
         MVI   RANDTIME,X'F0'          SET BRANCH ROUNT RANDOM TIMER
TIMELAB  LA    1,8(1)
         SH    2,=H'8'
         BNH   PARMEND
         B     PARMINCR
INVTIME  WTO   'INVALID TIME',ROUTCDE=11
         B     TIMELAB
***      END OF PARM FIELD PROCESSING
         TITLE  'STAE EXIT ROUTINES'
ABRTN    DS    0H
         BALR  3,0
         USING *,3
         STM   0,15,STAESAV            SAVE REGS
         WTO   'STAE EXIT'
         CLI   INSW,C'Y'               HOOKED IN ?
         BE    GETOUT                  YES- GET UNHOOKED
STAEOUT  WTO 'EXIT OK'
         LM    0,15,STAESAV
         LA    15,0                    INDICATE NO RETRY
         BR    14                      ABEND NORMALLY
GETOUT   LA    1,SVCOUT                GET UNHOOK ADDR
         SVC   253
         B     STAEOUT                 CONTINUE WITH ABEND
STAESAV  DC    16F'0'
         DROP  3
         TITLE  'HOOK IN, HOOK OUT SVC ROUTINES'
         USING *,1
SVCIN    MVC   NPSW(3),ACCADDR         REPLACE SVC NPSW ADDR
BLDLNOP1 L     2,16                    GET CVT ADDR
         MVC   IECPBLDL(4),92(2)       SAVE BLDL RTN ADDR
         MVC   92(4,2),ABLD            SWAP WITH OUR ROUTINE
         SVC   3
ABLD     DC    A(BLDL)
         DROP  1
         SPACE 2
         USING *,1
SVCOUT   MVC   NPSW(3),SVCPSW+1        RESET SVC NPSW ADDR
BLDLNOP2 L     2,16                    GET CVT ADDR
         MVC   92(4,2),IECPBLDL        RESTORE BLDL ADDR
         SVC   3
         DROP  1
         SPACE 2
SVCSTATE L     2,16                    CVT
         L     2,0(2)                  NEXT AND CURRENT TCB
         L     2,4(2)                  CURRENT TCB
         L     2,0(2)                  TOP RB (SVRB FOR SVC253)
         L     2,28(2)                 PREVIOUS RB (TRACE RB)
         NI    17(2),X'FE'             TURN OFF PROB BIT IN RESUME PSW
         SVC   3                       EXIT
         TITLE  'SVC FLIH PREFIX FOR LINK, LOAD, XCTL'
ACCUM    STM   0,15,X'3F8'             SAVE REGS  *** CHANGE ***
         BALR  11,0
         USING *,11
         SR    2,2
         LH    2,34                    GET SVC OPSW INTERRUPT CODE
         SLL   2,2                     TIMES 4
         L     3,REC(2)                GET OLD COUNT
         A     3,ONE                   INCREMENT
         ST    3,REC(2)                RESTORE
SVCSW    BC    0,ACCXIT                GO NOGO SW
         CLI   CODE,X'00'              EXCP ?
EXCPNOP  BE    EXCP
         CLI   CODE,X'06'              LINK ?
LINKNOP  BE    R15TYP
         CLI   CODE,X'07'              XCTL ?
XCTLNOP  BE    R15TYP
         CLI   CODE,X'08'              LOAD ?
LOADNOP  BE    R0TYP
         CLI   CODE,X'2A'              ATTACH ?
ATTANOP  BE    R15TYP
ACCXIT   LM    1,2,XITPSW              GET PSW TO RESUME SVCFLIH
         STM   1,2,40                  STORE IN PROG OPSW
ACCOUT   LM    0,15,0                  RESTORE REGS *** CHANGE ***
         LPSW  40
XITPSW   DS    D
R0TYP    LPR   15,0
         B     ENTER
R15TYP   L     15,0(15)
ENTER    L     2,LASTNTRY              GET NEXT TABLE POS
         LA    2,10(2)                 ADD NEXT ENTRY
         C     2,LISTEND               COMPARE TO TABLE LIMIT
         BNL   NOP                     IF AT LIMIT THEN BRANCH
         ST    2,LASTNTRY              RESET NEXT ENTRY ADDR
         S     2,TEN                   LESS 10 FOR THIS ENTRY
         MVC   2(8,2),0(15)            MOVE MODULE NAME
         MVC   1(1,2),35               MOVE INTERRUPT CODE
         L     3,16                    CVT ADDR
         L     3,0(3)                  NEXT & CURRENT TCB ADDR
         L     3,4(3)                  CURRENT TCB ADDR
         MVC   0(1,2),112(3)           TCB ID
         B     ACCXIT                  GO OUT
NOP      MVI   SVCSW+1,X'F0'           FORCE BYPASS OF ACCUM
         B     ACCXIT                  GO OUT
         TITLE  'SVC FLIH PREFIX FOR EXCP'
EXCP     L     DCBREG,IOBDCB-1(IOBREG) GET DCB POINTER
         LA    DCBREG,0(DCBREG)        DROP HIGH ORDER BITS
         C     DCBREG,OURDCB           OUR DCB ?
         BE    ACCXIT                  YES - SKIP
         L     DEBREG,DCBDEB-1(DCBREG) GET DEB POINTER
         SR    ICREG,ICREG CLEAR INSERT CHAR REG
         LR    WKREG1,ICREG PREPARE SHIFT REG
         TM    DEBENT(DEBREG),EXTMSK TEST FOR ANY EXTENTS
         BC    7,XCP061B YES-USE M GT 1 DIRECTLY
         LH    UCBREG,DEBUCB+1(DEBREG) GET 1ST EXTENT
         TM    UCBTYP+2(UCBREG),DSKTYP+TPTYPE+GRTYPE
         BC    8,XCP061C NO- DOESN'T HAVE AN M
XCP061B  IC    ICREG,DEBEXT(DEBREG) GET EXTENT SIZE
         IC    WKREG1,IOBDAM(IOBREG) GET EXTENT SIZE
         SLL   WKREG1,0(ICREG) MULTIPLY BY SIZE
         LH    UCBREG,DEBUCB+1(WKREG1,DEBREG) GET UCB ADDR
XCP061C  EQU   *
***      R2 NOW CONTAINS THE UCB ADDR
***      THE FOLLOWING CODE REJECTS EXCPS FOR HASP PSEUDO DEVICES
***      BY CHECKING ON DEVICE ADDRESSES. THIS MAY HAVE TO BE CHANGED
***      IF YOUR DEVICE ADDRESSES MATCH ANY OF THE CHECKS.
*        AS FROM R21.6 ALL HOOVER HASP DEVICES ARE ON CHAN 6
         TM    4(2),X'06'              TEST CHANNEL ADDR FOR HASP CHAN
         BO    ACCXIT                  YES - IGNORE
*        PRIOR TO R21.6 HASP DEVICES HAD CONTROL UNIT ADDRESSES >=A
         CLI   5(2),X'A0'              TEST HASP DEV ADDR.
         BNL   ACCXIT                  MUST BE HASP - IGNORE
*
         L     3,AUCBTAB               GET ADDR OF UCB TABLE
UCBLOOP1 CLC   0(4,3),UCBEND           TABLE END REACHED ?
         BE    ACCXIT                  IF YES THEN TOO MANY UCBS
         CLI   2(3),X'FF'              EMPTY ENTRY ?
         BE    NEWUCB                  YES-ADD NEW ENTRY
         CH    2,2(3)                  SAME UCB ADDR ?
         BE    UCBINCR                 YES-GO TO INCREMENT
         LA    3,28(3)                 INCREMENT TABLE POINTER
         B     UCBLOOP1                LOOP
NEWUCB   STH   2,2(3)                  STORE NEW ADDR IN TABLE
UCBINCR  L     4,4(3)                  GET OLD COUNT
         A     4,ONE                   INCREMENT
         ST    4,4(3)                  STORE NEW COUNT
         CLI   UCBTYPE(2),X'20'        D/A ?
         BNE   ACCXIT                  NO - IGNORE
         LR    4,3                     SAVE ADDR OF UCB TABLE ENTRY
         LH    1,0(3)                  GET LAST 'CC' OFFSET
         AR    3,1                     AND ADD TO TABLE ADDRESS
         CLC   UCBSKA+CC(2,2),0(3)     COMPARE SEEK 'CC' TO LAST
         BE    ACCXIT                  IF SAME THEN LEAVE
         MVC   2(2,3),UCBSKA+CC(2)     ELSE ENTER NEW 'CC'
         LA    1,2(1)                  INCR 'CC' ELEMENT OFFSET
         CH    1,R5FULL                MINI BUFFER FULL ?
         BE    R5ENTER                 YES - ENTER IN TABLE
         STH   1,0(4)                  ELSE PLACE UPDATED OFFSET
*                                      IN UCB TABLE
         B     ACCXIT                  XIT
R5ENTER  L     2,LASTNTRY              GET NEXT TABLE ADDR
         LA    2,20(2)                 INCR TO TEST FOR SLOT
         C     2,LISTEND               TEST
         BNL   NOP                     NO SLOT - DISABLE RECORDING
         ST    2,LASTNTRY              ELSE UPDATE LASTNTRY
         S     2,TWENTY                LESS 20 FOR THIS ENTRY
         LH    1,2(4)                  GET UCB ADDR
         MVC   9(3,4),13(1)            MOVE EBCDIC UCB ADDR
         MVC   0(20,2),8(4)            MOVE FULL MINI BUFFER TO TABLE
         MVC   10(2,4),26(4)           MOVE LAST SEEK TO NEXT COMPARE
         MVI   1(4),X'0A'              AND RESET 'CC' OFFSET
         B     ACCXIT                  XIT
         DROP  11
         TITLE 'BLDL ROUTINE'
BLDL     BALR  15,0
         USING *,15
         STM   0,6,BLDLSAV             SV REGS
         L     6,NOPADDR
         CLI   0(6),X'F0'              IS TRACE STOPPED ?
         BE    BLDLXIT                 YES - EXIT
         LR    2,0                     A(BLDL LIST)
         LH    3,0(2)                  FF PORTION OF LIST
         LA    4,4(2)                  A(NAME FIELD)
* R2= A(BLDL LIST)  R3= NO OF ENTRIES  R4= A(1ST NAME IN LIST)
         LTR   3,3                     TEST FOR SPECIAL ENTRY
         BNZ   BLDL01                  NO - CONTINUE
         LA    3,1(3)                  INCR FOR BCT
BLDL01   BAL   1,BLDLSRCH              SEARCH TABLE FOR NAME MATCH
         BCT   3,BLDLMORE              LOOP IF MULTIPLE BLDL
BLDLXIT  LM    0,6,BLDLSAV             RESTORE REGS
         L     15,IECPBLDL             SET REAL ENTRY ADDR
         BR    15                      PASS ON TO BLDL
BLDLMORE AH    4,2(2)                  POINT TO NEXT ENTRY
         B     BLDL01                  LOOP
BLDLSRCH LA    5,10                    SET LIMIT ON 10 LOOPS
         L     6,LASTNTRY              GET NEXT ENTRY ADDR
BLDL02   S     6,TEN                   LESS TEN FOR PREV ENTRY
         CLC   2(8,6),0(4)             MATCH NAMES
         BE    BLDLFLAG                YES - FLAG
         BCT   5,BLDL02                LOOP
         BR    1                       RETURN
BLDLFLAG OI    0(6),X'80'              FLAG HIGH ORDER BIT IN TCBID
         BR    1                       RETURN
BLDLSAV  DS    7F                      SAVE AREA
NOPADDR  DC    A(SVCSW+1)
IECPBLDL  DS   F
         DROP  15
         TITLE  'CONSTANTS ETC'
CODE     EQU   35
IOBREG   EQU   1
UCBREG   EQU   2
DCBREG   EQU   3
DEBREG   EQU   4
ICREG    EQU   5
WKREG1   EQU   6
LINKREG  EQU   9
IOBDCB   EQU   21
DCBDEB   EQU   45
DEBENT   EQU   16
EXTMSK   EQU   X'FE'
DEBUCB   EQU   33
UCBTYP   EQU   16
DSKTYP   EQU   X'20'
TPTYPE   EQU   X'40'
GRTYPE   EQU   X'10'
DEBEXT   EQU   28
IOBDAM   EQU   32
NPSW     EQU   101
UCBTYPE  EQU   18
UCBSKA   EQU   48
CC       EQU   3
DWORD    DS    D
DELAY    DC    C'00000010'             DEFAULT TIMER VALUE
FIVESEC  DC    C'00000500'             MAX TIMER VALUE
UCBTAB DC 30X'000AFF0000000000F500FFFF00000000000000000000000000000000'
UCBEND   DC    C'*UCB'                 END OF UCB TABLE IND.
***  RECORD AREA
AREA     DS    0CL20                   OUTPUT AREA
RECTYPE  DS    CL1
*** 0 = HEADER, 1 = LINK, LOAD, XCTL, ATTACH, 2 = SVC, 3 = EXCP,
*** 4 = TEST CHANNEL, 9 = TRAILER.
TCBID    DS    CL1                     TCB ID
SVCNO    DS    CL1                     SVC NUMBER
SPARE1   DS    CL1                     SPARE
NAME     DS    CL8                     MODULE NAME OR VOL SER NO
COUNT    DS    CL4                     FREQUENCY COUNT
TIME     DS    F                       TIME RECORD WRITTEN - ONLY RT=0
***  END OF RECORD AREA
ONE      DC    F'1'                    ADDITION CONSTANT
TEN      DC    F'10'                   SUBTRACT CONSTANT
STARTM   DS    F                       START TIME OF RUN
AUCBTAB  DC    A(UCBTAB)
DUMPCNT  DC    F'0'
SVCMASK  DC    X'40202120'
TWENTY    DC   F'20'
COREADDR DC    F'0'
RANGE    DC    F'2000',F'100000'       RANGE OF VC GETMAIN FOR TABLE
ANSWER   DC    2F'0'                   CORE ADDRESSES FOR GETMAIN
LASTNTRY DC    F'0'                    NEXT TABLE ENTRY ADDR
LISTEND  DC    F'0'                    END OF TABLE POINTER
SVCPSW   DC    F'0'                    SAVE AREA FOR SVC NPSW ADDR
REPECB   DC    F'0'                    REPLY ECB
OURDCB   DC    A(OUTDCB)
A         DC   F'16807'
B         DC   F'1000'
C         DC   F'2147483647'
D         DC   F'20'
E         DC   F'5'
STARTS   DS    0F
CURRSTRT DS    F
DUMPSTRT DS    F
ENDS     DS    0F
CURREND  DS    F
DUMPEND  DS    F
REPLY    DS    CL4                     REPLY AREA
RECTYP   DS    C
ACCADDR  DC    AL3(ACCUM)              REPLACES SVC NPSW ADDR
SVCNAME  DC    C'SVC     '
R4FULL    DC   H'19'     MAX R4INDX VALUE
R5FULL   DC    H'26'                   MAX OFFSET FOR RT5 'CC' ENTRIES
RT4       DC   CL20'4 '
SVC3      SVC  3
STM      DC    X'900F'                  STM INSTR 1ST HALF
STATS    DS    C
INSW     DC    C'N'                    HOOKED IN SW IND.
ENABLE    DC   X'FF'
DISABLE   DC   X'00'
STOP     DC    C'STOP'                 CORRECT REPLY TO END JOB
ENDSW    DC    C'N'                    TERMINATE INDICATOR
OFLOW    DC    C'N'                    BUFFER OVERFLOW INDICATOR
SVCCON   DC    C'SVC   '
FRSTLOAD DC    C'IGC000'
LOWCHAR  DC    CL8'A'
HIGHCHAR DC    CL8'Z9999999'
REC      DC    256F'0'                 TABLE FOR SVC ACTIVITY COUNTS
OUTDCB   DCB   DDNAME=OUTPUT,DSORG=PS,MACRF=PM
         END
