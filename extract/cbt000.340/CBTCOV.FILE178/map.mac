C          DATA SET GU022300   AT LEVEL 013 AS OF 03/05/76
C     PGM-ID.  GU022300.
C     AUTHOR.  DON HIGGINS.
C     DATE.    05/22/75.
C     REMARKS. PRINT VIRTUAL MEMORY ALLOCATION MAP AND STATISTICS.
C     SYSTEM.  OS/VS2 R1.7
C     FILES.
C         FT05F001 - CONTROL CARDS IN FREE FORMAT
C                        ITEM 1 - NUMBER OF INTERVALS
C                        ITEM 2 - LENGTH OF INTERVALS IN SECONDS
C
C         FT06F001 - OUTPUT REPORT AT BEGINNING OF EACH INTERVAL
C
C              1.   VIRTUAL STORAGE ALLOCATION MAP
C
C              2.   VIRTUAL STORAGE ALLOCATION MAP WITH CURRENT
C                   REAL PAGES SHOWN AS $.
C
C              3.   REAL STORAGE ALLOCATION MAP
C
C              4.   REAL STORAGE ALLOCATION MAP SHOWING ONLY LONG
C                   TERM FIXED PAGES AS $.
C
C              5.   INDEX TABLE DEFINING MAP CHARACTER CODES
C
C              6.   PAGE STATISTICS
C
C
      IMPLICIT INTEGER(A-Z)
      INTEGER*2 PAGE(4096)
      INTEGER*2 FRAME(4096)
      INTEGER INDEX(10,40),TIME(8),NTYPES
      INTEGER*2 CHAR(40)/
     *    ' ','$','+','.',
     *    'A','B','C','D','E','F','G','H','I','J','K','L','M'
     *   ,'N','O','P','Q','R','S','T','U','V','W','X','Y','Z'
     *   ,'1','2','3','4','5','6','7','8','9'
     *   ,'-'/
      INTEGER BLANK/' '/
      INTEGER NRDR/5/,NPRT/6/
      INTEGER*2 LINE(96)
      INTEGER  TV(6),TR(6)
      REAL*8 DESC(6)
     *   /'FREE    '
     *   ,'NUCLEUS '
     *   ,'SQA     '
     *   ,'LPA     '
     *   ,'LSQA    '
     *   ,'REGION  '
     */
      INTEGER IV(40),IR(40)
   10 FORMAT(
     *    '1GU022300 FPC OS/VS2 SVS STORAGE ANALYSIS UTILITY'
     *   ,3X,8A4
     *)
   20 FORMAT(
     *    1X,I3,2I6,'K *',6(16A1,'*')
     *)
   30 FORMAT(
     *    18X,103('*')
     *)
   40 FORMAT(
     *   /' MAP INDEX DEFINING EACH CHARACTER USED IN MAPS TO SHOW'
     *   /' STATUS OF EACH PAGE'
     *  //1X,'CODE DESCRIPTION'
     *   ,T35,'VIRTUAL   REAL REAL(K) REAL(%)'
     */)
   50 FORMAT(
     *    3X,A1,3X,10A4
     *   ,T35,2I7,2I8
     *)
   60 FORMAT(
     *   /' TABLE SHOWING DISTRIBUTION OF PAGES BY TYPE'
     *  //1X,'PAGE-TYPE  VIRTUAL REAL REAL(K) REAL(%)'
     */)
   70 FORMAT(
     *   /1X,A8,I8,I7
     *   ,2I8
     *)
   80 FORMAT(
     *   //1X,'TOTAL   ',I8,I7
     *   ,2I8
     *)
   90 FORMAT(
     *   //T35,2I7,2I8
     *)
  100 FORMAT(
     *  //1X,'SEG  PAGE  ADDR ',103('*')
     *)
  110 FORMAT(
     *  /' MAP SHOWING VIRTUAL ALLOCATION ONLY'
     *)
  120 FORMAT(
     *  /' MAP SHOWING VIRTUAL ALLOCATION WITH ALL PAGES WHICH ARE'
     *  /' CURRENTLY IN REAL STORAGE OVERLAYED WITH $'
     *)
  130 FORMAT(
     *  /' MAP SHOWING REAL STORAGE ALLOCATION'
     *)
  140 FORMAT(
     *  /' MAP SHOWING ONLY PAGES WITH LONG TERM FIXES'
     *)
  150 FORMAT(
     *   ///' REAL FIXED',6X,I7,2I8
     *)
C
C     MAINLINE
C
      DO FOREVER
          READ(NRDR,*,END=1000)CYCLES,INTVL
          DO   CYCLE=1,CYCLES
               CALL GETMAP(TIME,INDEX,PAGE,FRAME,NTYPES)
               PM   LIST
               PM   STAT
               MTYPE=1
               WRITE(NPRT,10)TIME
               WRITE(NPRT,110)
               PM   MAP
               MTYPE=2
               WRITE(NPRT,10)TIME
               WRITE(NPRT,120)
               PM   MAP
               MTYPE=3
               WRITE(NPRT,10)TIME
               WRITE(NPRT,130)
               PM   MAP
               MTYPE=4
               WRITE(NPRT,10)TIME
               WRITE(NPRT,140)
               PM   MAP
               CALL TIMER(4,INTVL)
          OD
      OD
 1000 STOP
C
C     MAP VIRTUAL STORAGE
C
      PENTRY MAP
      WRITE(NPRT,100)
      NSEG=0
      NPAGE=0
      NADDR=0
      DO  PSTART=1,4096,96
          PEND=PSTART+95
          PM   BUILD
          WRITE(NPRT,20)NSEG,NPAGE,NADDR,LINE
          NSEG=NSEG+6
          NPAGE=NPAGE+96
          NADDR=NADDR+384
      OD
      WRITE(NPRT,30)
      PEXIT
C
C     BUILD PRINT LINE
C
      PENTRY BUILD
      DO  I=1,96
          LINE(I)=BLANK
      OD
      I=1
      IF(PEND.GT.4096)PEND=4096
      DO  J=PSTART,PEND
          DOCASE MTYPE
               CASE 1
                    CODE=PAGE(J)
                    IF   (CODE.LT.0)
                         CODE=-CODE/256
                    ELSE
                         CODE=CODE/256
                    FI
               ESAC
               CASE 2
                    CODE=PAGE(J)
                    IF   (CODE.LT.0)
                         CODE=2
                    ELSE
                         CODE=CODE/256
                    FI
               ESAC
               CASE 3
                    CODE=FRAME(J)/256
               ESAC
               CASE 4
                    CODE=FRAME(J)
                    CODE=CODE-CODE/256*256
               ESAC
          ESACOD
          LINE(I)=CHAR(CODE)
          I=I+1
      OD
      PEXIT
C
C     LIST INDEX
C
      PENTRY LIST
      WRITE(NPRT,10)TIME
      WRITE(NPRT,40)
      DO  I=1,NTYPES
          IV(I)=0
          IR(I)=0
      OD
      GTR=0
      GTV=0
      DO  I=1,4096
          CODE=PAGE(I)/256
          IF   (CODE.LT.0)
               CODE=-CODE
               IR(CODE)=IR(CODE)+1
               GTR=GTR+1
          FI
          IV(CODE)=IV(CODE)+1
          GTV=GTV+1
      OD
      DO  I=1,NTYPES
          K=4*IR(I)
          KT=4*GTR
          PCT=100*IR(I)/GTR
          WRITE(NPRT,50)CHAR(I),(INDEX(J,I),J=1,10)
     *             ,IV(I),IR(I)
     *             ,K,PCT
      OD
      WRITE(NPRT,90)GTV,GTR,KT
      PEXIT
C
C     PRINT STATISTICS BY TYPE
C
      PENTRY STAT
      DO I=1,6
          TV(I)=0
          TR(I)=0
      OD
      DO  I=1,4096
          CODE=PAGE(I)
          CODE=CODE-(CODE/256*256)
          IF   (CODE.LT.0)
               CODE=-CODE
               TR(CODE)=TR(CODE)+1
          FI
          TV(CODE)=TV(CODE)+1
      OD
      WRITE(NPRT,10)TIME
      WRITE(NPRT,60)
      DO  I=1,6
          K=4*TR(I)
          PCT=100*TR(I)/GTR
          WRITE(NPRT,70)DESC(I),TV(I),TR(I)
     *             ,K,PCT
      OD
      WRITE(NPRT,80)GTV,GTR
     *             ,KT
      NRF=0
      DO  I=1,4096
          CODE=FRAME(I)
          CODE=CODE-CODE/256*256
          IF(CODE.EQ.2)NRF=NRF+1
      OD
      NRFK=4*NRF
      PCT=100*NRF/GTR
      WRITE(NPRT,150)NRF,NRFK,PCT
      PEXIT
      END
