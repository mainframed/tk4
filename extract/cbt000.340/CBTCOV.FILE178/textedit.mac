*          DATA SET GU023000   AT LEVEL 005 AS OF 07/07/77
*          DATA SET GU023000   AT LEVEL 002 AS OF 04/13/73
         TITLE 'FPC TEXT EDITOR V1.0'
*              AUTHOR.   DON HIGGINS.
*              DATE.     02/03/73.
*              REMARKS.  TEXTEDIT WILL SCAN ANY TEXT RECORDS
*                        FOR ANY NUMBER OF GIVEN TEXT STRINGS AND
*                        OPTIONALLY WILL REPLACE A TEXT STRING WITH
*                        ANOTHER STRING.
*
*              FILES.
*                        SYSIN    - CONTROL CARDS
*                        SYSPRINT - REPORT
*                        SYSUT1   - INPUT TEXT
*                        SYSUT2   - OUTPUT TEXT
*
*              CONTROL CARDS.
*                   1.   THE FIRST CARD DEFINES THE TYPE OF TEXT
*                        BEING SCANNED AND THE OPTIONS DESIRED. THE
*                        FIRST WORD ON THE CARD MUST BE THE TYPE.
*                          COBOL
*                          FORTRAN
*                          BAL
*                          JCL
*
*                   2.   THE FOLLOWING CARDS CONTAIN A SCAN STRING
*                        AND AN OPTIONAL REPLACEMENT STRING.  THE
*                        FORMAT OF THE CARD IS AS FOLLOWS
*                         1. USER DEFINED DELIMITER IN COLUMN 1
*                         2. SCAN STRING WHICH MUST NOT CONTAIN
*                            DELIMITER.
*                         3. USER DELIMITER
*                         4. OPTIONAL REPLACEMENT STRING
*                         5. OPTIONAL USER DELIMITER
*
*                   3.   SAMPLE CONTROL CARDS
*                        A. CHANGE UNITS IN JCL.
*                             JCL
*                             /2314/DISK/
*                             /2400/TAPE/
*                        B. CHANGE COBOL DATA NAMES
*                             COBOL
*                             /COUNT/WSV-COUNT/
*
*                        C. CHANGE REPEATED FORTRAN EXPRESSION
*                             FORTRAN
*                             $MAX/TOTAL$MAX*2/TOTAL$
*
*
*              LIMITATIONS.
*                   1.   STRING CANNOT CROSS RECORD BOUNDARY.
*                   2.   WHEN A STRING IS REPLACED WITH A LONGER
*                        STRING WHICH WILL NOT FIT IN THE SAME
*                        RECORD, THE TEXT TYPE CODE IS USED TO TRY AND
*                        DETERMINE THE PROPER CONTINUATION FORMAT.
*                        THERE ARE A NUMBER SYNTAX STRUCTURES WHICH
*                        COULD MAKE THE CONTINUATION CARDS WRONG.
*                        CONTINUATIONS NOT CURRENTLY IMPLIMENTED.
*                   3.   NO SCAN STRING CAN BE A SUBSET OF ANOTHER
*                        SCAN STRING IN THE SAME RUN.
*                   4.   THE NUMBER OF SCAN STRINGS ALLOWED IN ONE RUN
*                        IS LIMITED ONLY BY AVAILABLE CORE.  EACH
*                        SCAN STRING REQUIRES 104 BYTES.
*                   5.   NULL (X'00'), EOR (X'FF'), AND BLANK (X'40')
*                        CANNOT BE USED AS DELIMITERS OR STARTING
*                        STRING CHARACTERS DUE TO TRT TECHNIQUE USED.
*              NOTES.
*                   1.   SCAN IS PERFORMED VIA TRT OF EACH RECORD
*                        LOOKING FOR OCCURRENCE OF THE FIRST
*                        CHARACTER OF ANY SCAN STRING.  UPON MATCH OF
*                        FIRST CHARACTER A BINARY SEARCH FOR MATCHING
*                        SCAN STRINGS IS MADE.  THE EFFICIENCY OF THIS
*                        TECHNIQUE DEPENDS ON FREQUENCY OF OCCURRENCE
*                        OF THE FIRST CHARACTER OF SCAN STRINGS AND
*                        THE NUMBER OF SCAN STRINGS WITH MATCHING
*                        FIRST CHARACTERS.
*                   2.   HOW WELL BALANCED THE BINARY TREE BUILT FOR
*                        STRINGS WITH THE SAME STARTING CHARACTER, IS
*                        A FUNCTION OF THE ORDER OF THE STRING CONTROL
*                        CARDS.
*              MODIFICATONS.
*                   1. 07/06/77 DSH - FIX BUGS DUE TO IMPROPER USE OF
*                                     PENTRY/PEXIT/PERFORM WITH NEW
*                                     MACROS. IF I HAD TIME, I'D
*                                     REWRITE THIS OLD PGM IN
*                                     STRUCTURED ASSEMBLER SO I
*                                     COULD READ IT AFTER 4 YEARS.
*
*
*
*              REGISTERS.
*                   R0  - WORK
*                   R1  - TRT WORK, WORK
*                   R2  - TRT WORK, PRINT LINE ADDRESS, WORK
*                   R3  - WORK
*                   R4  - WORK, SCB
*                   R5  - TEXT STRING POINTER
*                   R6  - WORK
*                   R7  - WORK
*                   R8  - WORK
*                   R9  - SCAN CHAR HIT COUNT
*                   R10 -
*                   R11 -
*                   R12 - SECOND PGM BASE
*                   R13 - FIRST PGM BASE
*                   R14 - LINKAGE
*                   R15 - LINKAGE
         TITLE 'MAINLINE'
TEXTEDIT SUBENTRY BASES=(R13,R12)
M100PROC OPEN  (SYSIN,,SYSUT1,,SYSUT2,(OUTPUT),SYSPRINT,(OUTPUT))
         DTIME TIMEDATE
         SR    R9,R9
         PERFORM R100CTL                PROCESS CONTROL CARD
         CLI   STATUS,NOGO
         BE    M200EXIT
         PERFORM R300LOAD               PROCESS SCAN CONTROL CARDS
         CLI   STATUS,NOGO
         BE    M200EXIT
         ZAP   RCOUNT,=P'0'
         PERFORM R500SCAN               SCAN TEXT
M200EXIT TAG
         CLOSE (SYSIN,,SYSUT1,,SYSUT2,,SYSPRINT)
         SUBEXIT
         TITLE 'TEXT CONTROL CARD PROCESSOR'
R100CTL  PENTRY
         PERFORM R200RCTL          READ CONTROL CARD
         CLI   CTLEOF,TRUE         IS IT EOF
         BNE   R110SCAN            NO, GO SCAN FOR TYPE OF TEXT
         LA    R2,ERRMSG1          YES, ERROR - NO CONTROL CARDS
R105ERR  PERFORM R230PRNT
         MVI   STATUS,NOGO
         PEXIT
R110SCAN TAG
         MVI   TEXTTYPE,COBOL      ASSUME TEXT IS COBOL
         CLC   RECORD(5),=C'COBOL' IS IT
         BE    R120NEXT            YES, GO TO NEXT SCAN
         MVI   TEXTTYPE,FORTRAN
         CLC   RECORD(7),=C'FORTRAN'
         BE    R120NEXT
         MVI   TEXTTYPE,BAL
         CLC   RECORD(3),=C'BAL'
         BE    R120NEXT
         MVI   TEXTTYPE,JCL
         CLC   RECORD(3),=C'JCL'
         BE    R120NEXT
         LA    R2,ERRMSG2          INVALID TYPE ERROR
         B     R105ERR
R120NEXT TAG
         PEXIT
         TITLE 'R200RCTL - READ CONTROL CARD'
R200RCTL PENTRY
         GET   SYSIN,RECORD        READ CONTROL CARD
         AP    RCOUNT,=P'1'
         MVC   RTYPE,=CL6'CTL'
         LA    R2,RLINE
         PERFORM R230PRNT          PRINT CONTROL CARD
         PEXIT
R210EOFC TAG
         MVI   CTLEOF,TRUE         SET EOF AND RETURN
         PEXIT
         TITLE 'R230PRNT - PRINT'
R230PRNT PENTRY
         SP    PLINES,=P'1'        COUNT LINES AND BREAK ON PAGES
         BP    R240LINE
         ZAP   PLINES,MAXLINES
         AP    PAGE,=P'1'
         EDIT  TO=DPAGE,FROM=PAGE,MASK=' ZZZ'
         PUT   SYSPRINT,HEADING1   PRINT HEADINGS
         PUT   SYSPRINT,HEADING2
R240LINE TAG
         MVC   DRECORD,RECORD
         EDIT  TO=DRCOUNT,FROM=RCOUNT,MASK=' Z,ZZZ,ZZZ'
         PUT   SYSPRINT,(R2)       PRINT LINE
         PEXIT
         TITLE 'STRING CONTROL CARD PROCESSOR'
R300LOAD PENTRY
         PERFORM R200RCTL          READ CONTROL CARD
         CLI   CTLEOF,TRUE         IS IT EOF
         BE    R450CHKS            YES, GO CHECK IF ANY STRINGS LOADED
         MVI   STRING,TRUE         INDICATE AT LEAST 1 STRING
         CLI   RECORD,NULL         REJECT NULL AND END OF RECORD CODES
         BE    R360ERR3            AS EITHER DELIMITER OR START OF
         CLI   RECORD,EOR          STRING
         BE    R360ERR3
         CLI   RECORD+1,NULL
         BE    R360ERR3
         CLI   RECORD+1,EOR
         BE    R360ERR3
         CLI   RECORD+1,BLANK
         BE    R360ERR3
         SR    R4,R4
         IC    R4,RECORD           R4=USER DELIMITER
         STC   R4,DLIMIT(R4)       SET CODE IN TRANSLATE TABLE
         TRT   RECORD+1(80),DLIMIT SCAN FOR STRING-1 DELIMITER
         CLC   0(1,R1),RECORD      IS IT
         BNE   R360ERR3            NO, ERROR - MISSING DELIMITER
         LA    R0,RECORD+2
         LR    R3,R1
         SR    R1,R0               R1=LENGTH OF STRING-1 - 1
         BM    R360ERR3            ERROR-NO STRING BETWEEN DELIMITERS
         STC   R1,SCBCLC+1         STORE IT IN SCB CLC INS
         TRT   1(80,R3),DLIMIT     SCAN FOR STRING-2 DELIMITER
         CLC   0(1,R1),RECORD      IS IT
         BNE   R370FLAG            NO, GO NOP MVC SO STRING-1 IS ONLY
         SR    R1,R3               FLAGED AND NOT REPLACED
         SH    R1,=H'2'            R1=LENGTH OF STRING-2 - 1
         BM    R360ERR3            ERROR-NO STRING BETWEEN DELIMITERS
         STC   R1,SCBMVC+1         STORE IT IN SCB MVC INS
         LA    R0,SCB-1
         SR    R3,R0               R3=OFFSET TO STRING-2 IN SCB
         STC   R3,SCBMVC+5         STORE IT IN MVC DISPLACEMENT IN SCB
R310GETM TAG
         AP    SCOUNT,=P'1'
         ZAP   BCOUNT,=P'1'
         LA    R0,L'SCB
         GETMAIN R,LV=(0)          R1=A(NEW SCB)
         MVC   0(L'SCB,R1),SCB     MOVE SCB TO GETMAIN AREA
         LA    R2,DLIMIT(R4)
         MVI   0(R2),0             ZERO OUT DELIMITER IN TRT TABLE
         IC    R4,RECORD+1         R4=STRING-1 STARTING BYTE
         STC   R4,SCANTAB(R4)      SET CODE IN TEXT TRT SCAN TABLE
         SLL   R4,2                R4=4*STRING-1 CODE
         L     R2,SCBTAB(R4)       R2=A(FIRST SCB IN TREE)
         LTR   R2,R2               IS THIS NEW TREE
         BZ    R380SETP            YES, GO SET POINTER
R320SRCH TAG
         CLC   LCLC(1,R1),LCLC(R2) IS NEW STRING LONGER THAN THIS TREE
         BH    R390                STRING, YES BRANCH.
         LR    R4,R1               R4=A(NEW SCB)
         LA    R5,STRING1(R2)      R5=A(STRING-1 IN CURRENT TREE SCB)
         EX    R0,XCLC(R4)         COMPARE
         BL    R420NEWH            NEW SCB IS HIGHER IN TREE
         BH    R400NEWL            NEW SCB IS LOWER  IN TREE
R340ERR4 TAG
         LA    R2,ERRMSG4          ERROR - DUPLICATE SUBSTRINGS
R350ERR  TAG
         PERFORM R230PRNT
         MVI   STATUS,NOGO         SET NO GO SWITCH TO FLUSH TEXT SCAN
         B     R300LOAD
R360ERR3 TAG
         LA    R2,ERRMSG3
         B     R350ERR
R370FLAG TAG
         MVC   SCBMVC+1(5),SCBCLC+1     SET MVC TO MVC S1 TO S1
         B     R310GETM
R380SETP TAG
         AP    TCOUNT,=P'1'
         ST    R1,SCBTAB(R4)       SET POINTER TO FIRST SCB IN TREE
         B     R300LOAD
R390     TAG
         LR    R4,R2
         LA    R5,STRING1(R1)
         EX    R0,XCLC(R4)
         BL    R400NEWL
         BH    R420NEWH
         B     R340ERR4
R400NEWL TAG
         LT    R3,LOW(R2)          DOES CURRENT TREE SCB HAVE LOW PTR
         BZ    R440SETL            NO, GO SET IT
R410NEXT TAG
         LR    R2,R3               MAKE NEXT LOW OR HIGH SCB CURRENT
         AP    BCOUNT,=P'1'
         B     R320SRCH            AND REPEAT
R420NEWH TAG
         LT    R3,HIGH(R2)         DOES CURRENT TREE SCB HAVE HIGH PTR
         BZ    R430SETH            NO, GO SET IT
         B     R410NEXT
R430SETH TAG
         ST    R1,HIGH(R2)         MAKE HIGH PTR POINT TO NEW SCB
R435BMAX TAG
         CP    BCOUNT,BMAX
         BNH   R300LOAD
         ZAP   BMAX,BCOUNT
         B     R300LOAD
R440SETL TAG
         ST    R1,LOW(R2)          MAKE LOW  PTR POINT TO NEW SCB
         B     R435BMAX
R450CHKS TAG
         EDIT  TO=DSCOUNT,FROM=SCOUNT,MASK=' Z99'
         EDIT  TO=DTCOUNT,FROM=TCOUNT,MASK=' Z99'
         EDIT  TO=DBMAX,FROM=BMAX,MASK=' Z99'
         LA    R2,DSCLINE
         PERFORM R230PRNT
         LA    R2,SPACE
         PERFORM R230PRNT
         CLI   STRING,TRUE         DID WE READ ANY STRINGS
         BE    R460EXIT            YES, EXIT
         LA    R2,ERRMSG1          NO, ERROR - NO INPUT
         PERFORM R230PRNT
R460EXIT PEXIT
         TITLE 'TEXT SCAN PROCESSOR'
R500SCAN PENTRY
         PERFORM R530READ          READ INPUT TEXT RECORD
         CLI   UT1EOF,TRUE         IS IT EOF
         BE    R665TOT             YES, EXIT
R510SETS TAG
         LA    R3,RECORD           INITIALIZE TRT TEXT POINTER
R520LOOP TAG
         SR    R1,R1               CLEAR ADDRESS  REGISTER FOR TRT
         SR    R2,R2               CLEAR FUNCTION REGISTER FOR TRT
         TRT   0(81,R3),SCANTAB    THIS IS IT - SCAN THE TEXT
         CL    R1,EORADDR          IS IT END OF RECORD
         BNE   R580COMP            NO, GO COMPARE STRINGS
         PERFORM R560WRIT          WRITE OUTPUT TEXT RECORD
         B     R500SCAN            LOOP
R580COMP TAG
         LA    R9,1(R9)            COUNT SCAN CHARACTER HITS
         LA    R3,1(R1)            R3=A(NEXT BYTE TO SCAN)
         SLL   R2,2                R2=4*CODE
         L     R4,SCBTAB(R2)       R4=A(FIRST TREE SCB)
         LR    R5,R1               R5=A(TEXT)
R590EXCL EX    R0,XCLC(R4)         COMPARE TEXT TO STRING IN SCB
         BE    R620PBF             EQUAL, GO PRINT BEFORE IMAGE
         BH    R610HIGH            HIGH, GO CHECK NEXT HIGH SCB
         LT    R4,LOW(R4)          IS THERE A NEXT LOW
         BP    R590EXCL            NO, GO CHECK IT
         B     R520LOOP            LOOP
R610HIGH TAG
         LT    R4,HIGH(R4)         IS THERE A NEXT HIGH
         BP    R590EXCL            NO, GO CHECK IT
         B     R520LOOP            YES, CONTINUE SCAN
R620PBF  TAG
         AP    CMATCH,=P'1'
         CLC   XCLC+1(5,R4),XMVC+1(R4)
         BE    R635FLAG
         MVC   RTYPE,=CL6'BEFORE'
         LA    R2,RLINE
         PERFORM R230PRNT          PRINT BEFORE IMAGE OF TEXT RECORD
         CLC   LMVC(1,R4),LCLC(R4) IS STRING-2 GREATER THAN STRING-1
         BH    R650LONG            GT,  GO CHECK FOR OVERFLOW
         BL    R640SHRT            LT,  GO SHIFT TEXT LEFT
R630OVLY TAG
         EX    R0,XMVC(R4)         OVERLAY STRING-1 WITH STRING-2
         MVC   RTYPE,=CL6'AFTER'
         LA    R2,RLINE
         PERFORM R230PRNT          PRINT AFTER IMAGE
         B     R520LOOP
R635FLAG TAG
         MVC   RTYPE,=CL6'FLAG'
         LA    R2,RLINE
         PERFORM R230PRNT
         B     R520LOOP
R640SHRT TAG
         SR    R2,R2
         IC    R2,LCLC(R4)
         LA    R6,1(R5,R2)         R6=A(END OF S1 + 1)
         IC    R2,LMVC(R4)
         LA    R7,1(R5,R2)         R7=A(END OF S2 + 1)
         IC    R2,TEXTTYPE
         LA    R1,RECORD+70
         SR    R1,R6
         A     R1,TEXTEND(R2)      R1=LENGTH OF TEXT TO SHIFT
         EX    R1,MVCEND           SHIFT TEXT LEFT
         LA    R7,1(R1,R7)         RT=A(END OF TEXT+1)
         SR    R1,R1
         IC    R1,LCLC(R4)
         IC    R2,LMVC(R4)
         SR    R1,R2
         MVI   0(R7),C' '          SET FIRST PAD BYTE BLANK
         SH    R1,=H'2'            R1=LENGTH OF PAD AREA - 2
         BM    R630OVLY
         EX    R1,MVCBLK           BLANK REST OF PAD AREA
         B     R630OVLY            GO OVERLAY TEXT
R650LONG TAG
         SR    R2,R2
         IC    R2,LCLC(R4)
         LA    R6,1(R5,R2)         R6=A(END OF S1 + 1)
         SR    R1,R1
         IC    R1,LMVC(R4)
         LA    R7,1(R5,R1)         R7=A(END OF S2 + 1)
         SR    R1,R2               R1=S2-S1=REQ. PAD AREA
         IC    R2,TEXTTYPE
         LA    R8,RECORD+71
         A     R8,TEXTEND(R2)
         SR    R8,R1               R8=A(PAD AREA)
         CLI   0(R8),C' '          IS FIRST PAD BYTE BLANK
         BNE   R660CONT            NO, GO TO CONTINUATION ROUTINE
         SH    R1,=H'2'
         BM    R655
         EX    R1,CLCPAD           IS PAD AREA BLANK
         BNE   R660CONT            NO, GO TO CONTINUATION ROUTINE
R655     TAG
         SR    R8,R6
         BZ    R630OVLY            NO TEXT TO SHIFT
         BCTR  R8,R0               R8=LENGTH OF TEXT TO SHIFT
         EX    R8,MVCTEMP          MOVE TEXT TO TEMP FOR SHIFT RIGHT
         EX    R8,MVCBACK          MOVE BACK TO RECORD SHIFTED RIGHT
         B     R630OVLY            GO OVERLAY TEXT
R660CONT TAG
         AP    CONT,=P'1'
         LA    R2,ERRMSG5          ERROR - CONTINUATION NOT HANDLED
         PERFORM R230PRNT
         B     R520LOOP
R665TOT  TAG
         CVD   R9,PWORK
         EDIT  TO=DSCAN,FROM=PWORK+4,MASK=' Z,ZZZ,Z99'
         EDIT  TO=DRECTOT,FROM=RCOUNT,MASK=' Z,ZZZ,Z99'
         EDIT  TO=DMATCH,FROM=CMATCH,MASK=' Z,ZZZ,Z99'
         EDIT  TO=DCONT,FROM=CONT,MASK=' Z,ZZZ,Z99'
         LA    R2,DTOTLINE
         PERFORM R230PRNT
         PEXIT
         TITLE 'R560WRIT - WRITE TEXT RECORD'
R560WRIT PENTRY
         PUT   SYSUT2,RECORD       WRITE TEXT
         PEXIT
         TITLE 'R530READ - READ TEXT CARD'
R530READ PENTRY
         GET   SYSUT1,RECORD       READ TEXT
         AP    RCOUNT,=P'1'
         PEXIT
R540EOF1 TAG
         MVI   UT1EOF,TRUE         SET EOF
         PEXIT
         TITLE 'COMMON PROCESSOR DATA'
         EQUAL
CTLEOF   DC    AL1(FALSE)          SYSIN EOF
UT1EOF   DC    AL1(FALSE)          SYSUT1 EOF
FALSE    EQU   0
TRUE     EQU   1
STATUS   DC    AL1(GO)             CTL CARD EDIT/LOAD STATUS
GO       EQU   0
NOGO     EQU   1
TEXTTYPE DC    AL1(COBOL)          LANGUAGE TYPE CODE
COBOL    EQU   0
FORTRAN  EQU   4
BAL      EQU   8
JCL      EQU   12
STRING   DC    AL1(FALSE)          STRING COUNT SWITCH
TEXTEND  DC    0F'0',A(1,1,0,0)    ADJ TO PAD LENGTH FOR LANGUAGE
TEMP     DS    CL80
MVCTEMP  MVC   TEMP(0),0(R6)
MVCBACK  MVC   0(0,R7),TEMP
MVCEND   MVC   0(0,R7),0(R6)       SHIFT TEXT LEFT
MVCBLK   MVC   1(0,R7),0(R7)       BLANK PAD
CLCPAD   CLC   1(0,R8),0(R8)       TEST PAD
MAXLINES DC    P'60'
PWORK    DC    D'0'
RCOUNT   DC    PL4'0'
CMATCH   DC    PL4'0'        COUNT OF STRING MATCHES
CONT     DC    PL4'0'        COUNT OF CONTINUATIONS NOT HANDLED
SCOUNT   DC    PL2'0'        STRING COUNT
TCOUNT   DC    PL2'0'        TREE COUNT (SCAN CHARACTERS)
BCOUNT   DC    PL2'0'        BRANCH LENGTH COUNTER
BMAX     DC    PL2'0'        MAXIMUM TREE BRANCH LENGTH
PLINES   DC    PL2'0'
PAGE     DC    PL2'0'
HEADING1 DS    0CL133
         DC    C'1',C'TEXTEDIT UTILITY GU023000 V1.0',CL5' '
TIMEDATE DC    CL22' ',CL10' ',C'PAGE'
DPAGE    DC    CL4' '
         FILL  HEADING1
HEADING2 DS    0CL133
         DC    C'0',CL4' ',C'RECORD TYPE',CL7' '
         DC    C'1...5...10...15...20...25...30...35...40'
         DC    C'...45...50...55...60...65...70...75...80'
         FILL  HEADING2
RLINE    DS    0CL133
         DC    C' '
DRCOUNT  DC    CL10' ',C' '
RTYPE    DC    CL6' ',CL5' '
DRECORD  DC    CL80' '
         FILL  RLINE
DSCLINE  DS    0CL133
         DC    C'0',C'STRING COUNT'
DSCOUNT  DC    CL4' ',C'  TREE COUNT'
DTCOUNT  DC    CL4' ',C'  LONGEST TREE BRANCH'
DBMAX    DC    CL4' '
         FILL  DSCLINE
DTOTLINE DS    0CL133
         DC    C'0',C'TOTAL RECORDS SCANNED'
DRECTOT  DC    CL10' ',C' SCAN HITS'
DSCAN    DC    CL10' ',C' STRING MATCHES'
DMATCH   DC    CL10' ',C' CONTINUATIONS'
DCONT    DC    CL10' '
         FILL  DTOTLINE
SPACE    DC    CL133' '
ERRMSG1  DC    CL133' NO CONTROL CARDS'
ERRMSG2  DC    CL133' UNDEFINED TEXT TYPE'
ERRMSG3  DC    CL133' STRING DELIMITER ERROR'
ERRMSG4  DC    CL133' DUPLICATE SUBSTRINGS'
ERRMSG5  DC    CL133' OVERFLOW NOT HANDLED - SORRY'
         TITLE 'COMMON PROCESSOR FILES'
SYSIN    DCB   DSORG=PS,MACRF=GM,DDNAME=SYSIN,EODAD=R210EOFC,          X
               RECFM=FB,LRECL=80
SYSUT1   DCB   DSORG=PS,MACRF=GM,DDNAME=SYSUT1,EODAD=R540EOF1,         X
               RECFM=FB,LRECL=80
SYSUT2   DCB   DSORG=PS,MACRF=PM,DDNAME=SYSUT2,                        X
               RECFM=FB,LRECL=80
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      X
               RECFM=FA,BLKSIZE=133
         TITLE 'SCB - STRING CONTROL BLOCK DATA'
         DS    0F
SCB      DS    0CL100              SCAN CONTROL BLOCK
SCBHIGH  DC    F'0'                NEXT HIGHER SCB
SCBLOW   DC    F'0'                NEXT LOWER  SCB
SCBCLC   CLC   0(0,R5),21(R4)      COMPARE TEXT TO STRING-1
SCBMVC   MVC   0(0,R5),0(R4)       OVERLAY TEXT WITH STRING-2
RECORD   DS    CL80                STRING CONTROL CARD (ALSO TEXT AREA)
EORCODE  DC    X'FF'               TEXT RECORD DELIMITER FOR SCAN TRT
HIGH     EQU   SCBHIGH-SCB
LOW      EQU   SCBLOW-SCB
XCLC     EQU   SCBCLC-SCB
LCLC     EQU   SCBCLC+1-SCB
XMVC     EQU   SCBMVC-SCB
LMVC     EQU   SCBMVC+1-SCB
STRING1  EQU   RECORD+1-SCB
EOR      EQU   X'FF'
NULL     EQU   X'00'
BLANK    EQU   X'40'
EORADDR  DC    A(EORCODE)          ADDRESS OF EOR
EORSCB   DS    0F
         DC    2A(0)               NO HIGH/LOW POINTERS
         CLC   *(1),*+1            FORCED NOT EQUAL
         TITLE 'PROCESSOR TABLES'
DLIMIT   DC    XL255'00',X'FF'     DELIMITER TRT TABLE
SCANTAB  DC    XL255'00',X'FF'     TEXT SCAN TRT TABLE
SCBTAB   DC    255F'0',A(EORSCB)   SCB TREE POINTER TABLE
         END   TEXTEDIT
