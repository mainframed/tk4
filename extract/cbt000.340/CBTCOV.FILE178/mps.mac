*          DATA SET GU640001   AT LEVEL 036 AS OF 04/22/80
*          DATA SET GU640001   AT LEVEL 034 AS OF 04/17/79
*          DATA SET GU640001   AT LEVEL 033 AS OF 04/16/79
*          DATA SET GU640001   AT LEVEL 032 AS OF 01/30/79
*--------------------------------------------------------------------
*
*  PROGRAM   GU640001
*
*  AUTHOR    DON HIGGINS.
*
*  DATE      11/01/74.
*
*  REMARKS   SUPERVISE EXECUTION OF A USER SELECTED TCAM MESSAGE
*            PROCESSING PROGRAM. THE FOLLOWING FUNCTIONS ARE
*            PERFORMED BY THE SUPERVISOR.
*
*    1.    PROCESS THE FOLLOWING PARM FIELD OPTIONS
*          A.  'TEST' - REDIRECT TCAM GET/PUT TO
*                       QSAM FILES AS FOLLOWS
*
*                                 COL.   DESC.
*                                 1-8     TERM ID
*                                 9-80    MESSAGE
*                                         EXCLUDING ANY
*                                         TCAM ROUTING
*                                         CODE AND PREFIX
*                         PUTF  - WRITE RECORD TO LOG
*                                 AND SKIP TCAM PUT.
*                                   LOG CONTAINS
*                                    1.  TYPE OF I/O
*                                    2.  TERMINAL NAME
*                                    3.  CLOCK TIME
*                                    4.  ELAPSED TIME
*                                        BETWEEN TPGET
*                                        AND TPPUT IN
*                                        MILLI-SECONDS
*                                    5.  CPU TIME BETWEEN
*                                        TPGET AND TPPUT
*                                        IN MICRO-SEC.
*                                    6.  MESSAGE
*          B.  'TCAM' - USE TCAM INTERFACE FILES.
*                         GETF  - READ TCAM MESSAGE
*                                 ROUTED TO THIS QUEUE.
*                                 STRIP ROUTING CODE AND
*                                 DATE/TIME PREFIX.
*                         PUTF  - WRITE TCAM MESSAGE
*
*               NOTE:   READS AND WRITES TO TCAM ARE OVERLAPPED WITH
*                       PROCESSING OF MESSAGES.  AN UNSUCCESSFUL WRITE
*                       WILL NOT BE DETECTED UNTIL THE SUBSEQUENT TCAM
*                       WRITE REQUEST.
*
*          C.   'TSO' - DIRECT USER PROGRAM TPGET/TPPUT MESSAGES TO TSO
*                       TERMINAL VIA TSOGETF/TSOPUTF DDNAMES.
*
*          D.   'MCS' OR 'TCAM,MCS' - SUPPORT SYSTEM
*                                     CONSOLES VIA WTOR
*                                     WITH OR WITHOUT
*                                     TCAM OPTION. NOT
*                                     ALLOWED WITH TEST
*                                     OR TSO OPTION.
*
*          E.  'LC=IN' - LEAVE LINE CONTROL IN INPUT MSG AND ASSUME
*                        USER HAS INSERTED LINE CONTROL IN OUTPUT MSG.
*                        VALID ONLY WHEN USED WITH TCAM OPTION.
*
*          DEFAULT IS 'TEST'
*
*    2.    STRIP ROUTING CODE FROM INPUT MESSAGES /X.
*
*    3.    ACCEPT FOLLOWING COMMANDS
*
*          A.   EXEC PGMNAME,TEST,MESSAGE
*
*               LOAD AND EXECUTE PROGRAM.  IF ',TEST' IS SPECIFIED,
*               THE PROG IS LOADED FORM MPSXTEST DD - ELSE - MPSXLIB.
*               THIS COMMAND ONLY ACCEPTED WHEN NO PROG IS RUNNING.
*               PROG MAY ISSUE BOTH TPGET AND TPPUT CALLS.  THE PROG
*               CONTINUES TO RUN UNTIL IS ENDS NORMALLY OR IS STOPPED
*               BY A STOP COMMAND.  SEE CALL FOR ARGU LIST FORMAT.
*
*               IF THERE IS NO MPSCLIB DD CARD, THE BLDL
*               AND LOAD WILL COME FROM LNKLST00.
*
*
*
*
*          B.   CLOSEDOWN - STOP SUPERVISOR.  ONLY
*                           ACCEPTED WHEN NO PROGRAM
*                           ACTIVE.
*
*          C.   LOG/NOLOG    CONTROL OPTIONAL HARDCOPY
*                            LOG OF ALL INPUT AND OUTPUT
*                            MESSAGES.  ALL SUPR MESSAGES
*                            AND INPUT COMMANDS ARE
*                            ALWAYS LOGGED. DEFAULT IS
*                            LOGON INITIALLY.  ONLY
*                            ACCEPTED WHEN NO PROGRAM
*                            ACTIVE.
*                             1.MAY BE ACTIVATED OR DE-
*                               ACTIVATED BY CALL TO
*                               TPLOG,PASSING A C'0' FOR
*                               OFF OR C'1' FOR ON.
*                               NIMS-4/76.
*
*               INLOG        THIS OPTION WILL LOG ALL
*                            INPUT TRAFFIC AND IGNORE
*                            ALL OUTPUT RESPONSE.
*
*
*          D.   STOP         STOP CURRENT PROGRAM.
*                            ACCEPTED ANYTIME BUT ONLY
*                            FROM SOURCE WHICH STARTED
*                            CURRENT PROGRAM.
*
*          E.   CALL PGMNAME,TEST,MESSAGE
*
*               LOAD AND EXECUTE PROGRAM. IF ',TEST' IS SPECIFIED, THE
*               PROG IS LOADED FORM PPSCTEST DD - ELSE - MPSCLIB DD.
*               THIS COMMAND IS ACCEPTED ANYTIME INCLUDING WHILE EXEC
*               PGM IS RUNNING.  THE ARGU LIST PASSED TO THE PROG IS
*               AS FOLLOWS:
*
*                    TERM - NAME OF CALLING TERMINAL
*
*                    MSG  - MESSAGE (IF IT CONTAINS
*                           BLANKS PUT IT IN QUOTES OR
*                           PARENTHESIS)
*
*                    LMSG - FULL WORD BINARY LENGTH OF
*                           MESSAGE
*
*               CALLED PROGRAM MAY ISSUE TPPUT CALLS BUT
*               MUST NOT ISSUE ANY TPGET CALLS. IT MUST
*               TERMINATE IMMEDIATELY AFTER PROCESSING
*               MESSAGE.
*
*
*          F.   TERM,XXXXXXXX
*
*               RESET TERM ID TO SPECIFIED VALUE.
*               ONLY ALLOWED FOR TSO MODE.
*
*
*    4.    SUPPORT INTERFACE WITH TPGET AND TPPUT
*          SUBROUTINES.
*
*               CALL TPGET(TERM,MSG,LNG)
*
*               CALL TPPUT(TERM,MSG,LNG)
*
*                    TERM - TERMINAL ID  (CTL1, ETC.)
*
*                    MSG  - MESSAGE
*
*                    LNG  - LENGTH OF MESSAGE IN BYTES
*                           (FULL WORD BINARY)
*
*    5.    SETUP SPIE TO TRAP USER PROGRAM INTERRUPTIONS.
*
*    6.    SETUP STAE TO TRAP USER ABENDS.
*
*    7.    USE INTERVAL TIMER TO TRAP CPU LOOPS.
*
*
*    8.    SUPPORT QUEUE WAITING QUESTION SUBROUTINE
*
*               CALL TPQUE(STATUS)
*
*                    STATUS - INDICATOR IF MSG WAITING
*
*                         0 - NO MESSAGE WAITING
*                         1 - MESSAGE IS WAITING
*
*    9.    USE COMMANDS AND/OR MESSAGES STORED IN
*          MPSCTL QSAM FILE TO SATISFY TPGET REQUESTS
*          UNTIL FILE IS EXHAUSTED. (FILE IS OPTIONAL).
*
*              FILES.
*
*     MPSCTL   - OPTIONAL INITIAL COMMAND FILE
*     MPSDUMP  - OPTIONAL SNAP DUMP FILE FOR PGM CHKS
*     MPSLOG   - OPTIONAL SYSOUT REPORT FOR LOG OPTION
*     MPSXLIB  - OPTIONAL EXEC PDS LIBRARY
*     MPSXTEST - OPTIONAL EXEC PDS LIBRARY TEST
*     MPSCLIB  - OPTIONAL CALL PDS LIBRARY
*     MPSCTEST - OPTIONAL CALL PDS LIBRARY TEST
*     TESTGETF - BATCH TEST INPUT (DD *)
*     TESTPUTF - BATCH TEST OUTPUT (DD SYSOUT=A)
*     TCAMGETF - TCAM INPUT (QNAME=GETF)
*     TCAMPUTF - TCAM OUTPUT (QNAME=PUTF)
*     TSOGETF  - TSO INPUT WITH PROMPT (DA(*))
*     TSOPUTF  - TSO OUTPUT (DA(*))
*
*              ABENDS.
*
*     101       KEYWORK TERM NOT FOUND IN MSG PREFIX
*     901       PGM CHECK WITHIN MPS
*     902       ABEND WITHIN MPS
*     903       CPU LOOP WITHIN MPS
*     904       BAD RETURN CODE FROM EXEC PGM UNDER TCAM
*     905       BAD RETURN CODE FROM TCAM WRITE
*
*  REV  04/08/76  R D NIMS
*  1.  ADD TPLOG SUBROUTINE TO ACTIVATE/DEACTIVATE
*      LOG OPTION BY USE OF A CALL STATEMENT.
*
*  REV  06/01/77  W R WILLITS
*  1.  MODIFY PROGRAM TO INTERFACE CA MPP
*  2.  KEEP 1ST CHAR OF INPUT MESSAGE IF NOT EQ TO (F)
*  3.  LOG ONLY NON-BLANK LINES
*  4.  ADD OPTION TO LOG ONLY INPUT (CA TRAFFIC TOO HEAVY TO LOG ALL)
*  5.  BUMP INPUT WORK AREA TO 960 FOR CA COMPATIBILITY
*  6.  MOVE I-O WORK AREAS TO END OF PROGRAM SO AS NOT TO
*      DESTROY ADDRESSABILITY OF OTHER DATA AREAS.  THE INCREASE
*      IN WORK AREA SIZES CAUSES THIS PROGRAM TO EXCEED 4 BASE
*      REGISTERS IN LENGTH.
*  7.  ADD SUBROUTINES (SROSDATE AND BSPACE) TO PROGRAM TO PREVENT
*      LOSS OF AUTHORIZATION DURING CALL.  THE NAMES ARE CHANGED
*      TO (XROSDATE AND XBSPACE).
*  8.  TEST FOR TC001000 AT LOAD TIME TO MAKE SURE THIS PROGRAM IS
*      LOADED FROM AN AUTHORIZED LIBRARY, ELSE PROGRAM WILL ABEND
*      WITH S047 AT FIRST RESTRICTED SVC TIME (XY1 XY2 XY5).
*  9.  CHECK FOR 2260 TYPE DEVICE AND REMOVE THE NL CONTROL CHAR
*      FROM THE PREFIX.  MANY OUTMSG USE FULL 12 LINES ON SCREEN
*      AND A NL AT BEGIN WILL CAUSE WRAP.
* 10.  MOVE TCAM DATETIME PREFIX INTO CA MPP INMSG PREFIX AREA
*      TO BE USED BY TIMER STATISTICS.
* 11.  FIX WTORREAD ROUTINE TO SEND DIFFERENT TEXT IF TC001 IS BEING
*      EXECUTED.  THIS WILL PREVENT OPERATOR FROM ENTERING MPS CMDS
*      INTO THE WRONG PROGRAM.
* 12.  PREVENT ALL $HASP COMMANDS FROM ENTERING SYSTEM VIA TC004.
*      OPERATORS CONTINUE TO MISREAD THE WTOR AND REPLY TO THE
*      WRONG MESSAGE.
* 13.  PREVENT ALL $HASP COMMANDS FROM ENTERING SYSTEM VIA ANY MPP.
*      THIS CAUSES ABEND WHEN RUNNING IN MVS ENVIRONMENT.
*
*
*  REV 01/19/78 D S HIGGINS
*
*  1.  MODIFY $ COMMANDS TO INVOKE MVSMON (TP421000)
*
*  REV 03/15/78 D S HIGGINS
*
*  1.  ADD OPTIONAL XCOM CROSS MEMORY PATH FACILITY TO INTERFACE
*      WITH CICS AND TSO. SEE SR301000-SR303000 FOR INFO.
*      XCTP IS USED TO DETERMINE IF XCOM INPUT PATH IS TO
*      BE USED AND TO CONTROL ROUTING OF OUTPUT MSGS.
*  2.  MISC. CLEANUP
*      A.  USE ELSEIF INSTEAD OF NESTED ELSE IF (ELSEIF MACRO
*          NOT AVAILABLE IN 11/74)
*      B.  REMOVE SROSDATE AND BSPACE CODE (REVERT TO CALLS SINCE
*          NO AUTHORIZATION IS REQUIRED)
*      C.  FIX MCS WTOR TO USE CURRENT JOBNAME.
*
*  REV  01/23/79  W R WILLITS
*  1.  CHECK FOR TCAMDECB CODE X'51' (REUSE IN PROGRESS)
*
*  REV  04/16/79  W R WILLITS
*  1.  WHEN TCAMDECB RETURN CODE IS X'51' THE QUEUE DCB MUST BE
*      CLOSED AND RE-OPENED BEFORE COMMUNICATION BETWEEN THIS
*      APPLICATION AND TCAM WILL CONTINUE.
*
*  REV  04/21/80  C L MERRIMAN
*  1.  ELIMINATE THE LOGICAL BACKSPACE (X'6F') AND THE LOGICAL
*      DELETE MESSAGE (X'5A') FUNCTION.
*
*--------------------------------------------------------------------
*        PRINT NOGEN
         TITLE 'MAINLINE'
         ENTRY TPQUE
         ENTRY TPGET,TPPUT
         ENTRY TIMER,LOGMSG,SNAPDUMP,PURGEDCB,FETCH
         ENTRY CALLER
         ENTRY PURGECDE
         ENTRY TPLOG
         ENTRY MVSMONVT
         SPACE 2
GU640001 SUBENTRY BASES=(R13,R12,R11,R10)
         SPACE 2
         PM    PARMS                    PROCESS PARMS
         PM    XCOMINIT                 INITIALIZE XCOM
         PM    IDSUB                    IDENTIFY SUB ENTRIES
         PM    TRAP                     SETUP SPIE/STAE TRAPS
         PM    OPEN                     OPEN FILES
         MVI   INTERVAL,RESTART
         SCALL TIMER
         SCALL SROSDATE,(DATE)
         TPPUTMSG CTLTERM,'MPS READY FOR EXEC COMMAND'
         TIME  BIN
         ST    R0,BTIME
         DO    UNTIL,(CLI,EOJ,TRUE,EQ)
               PM   GETCMD              GET COMMAND
               IF   (CLI,EOF,TRUE,NE)
                    PM   COMMAND        PERFORM COMMAND
               FI
         OD
         EDIT  TO=DTPGET,FROM=PTPGET,MASK=' Z,ZZZ,Z99'
         EDIT  TO=DTPPUT,FROM=PTPPUT,MASK=' Z,ZZZ,Z99'
         TIME  BIN
         S     R0,BTIME
         CVD   R0,PTIME
         EDIT  TO=DTIME,FROM=PTIME+4,MASK=' ZZ,Z99'
         EDIT  TO=DEXEC,FROM=PEXEC,MASK=' Z,ZZZ,Z99'
         EDIT  TO=DCALL,FROM=PCALL,MASK=' Z,ZZZ,Z99'
         TPPUTMSG CTLTERM,'MPS CLOSING DOWN NOW'
         L     R2,=A(MPSLOG)
         IF    (TM,DCBOFLGS(R2),DCBOPEN,O)
               PUT  (2),DTOTALS
         FI
         PM    CLOSE
         SUBEXIT
         TITLE 'PARMS - PROCESS PARM FIELD'
PARMS    PENTRY
         L     R1,0(R1)
         IF    (CLC,2(4,R1),=C'TCAM',EQ)
               MVI  LOGI,OFF        SET DEFAULT FOR TCAM
               MVI  LOGO,OFF        SET DEFAULT FOR TCAM
               MVI  OPTION,TCAM
               MVC  DOPTION,=C'TCAM'
               IF   (CLC,6(6,R1),=C',LC=IN',EQ)
                    MVI  LC,IN
                    AAI  R1,6
               FI
               IF   (CLC,6(4,R1),=C',MCS',EQ)
                    MVI  MCS,TRUE
               FI
         ELSE
               IF   (CLC,2(3,R1),=C'TSO',EQ)
                    MVI  OPTION,TSO
                    MVC  DOPTION,=C'TSO '
                    MVC  CTLTERM,TSOTERM
               ELSEIF   (CLC,2(3,R1),=C'MCS',EQ)
                    MVI  OPTION,MCSONLY
                    MVC  DOPTION,=C'MCS '
                    MVC  CTLTERM,MCSTERM
               FI
         FI
         PEXIT
         TITLE 'XCOMINIT - INITIALIZE XCOM'
XCOMINIT PENTRY
         SCALL  XCTP,(XGETTERM,XGETPATH)
         IF     (CLC,XGETPATH,=F'0',NE)
                MVI   XGETPOST,TRUE   FORCE FIRST ENTRY TO XCOMPROC
                SCALL XCTERM,(XGETPATH)
                SCALL XCPATH,(XGETPATH,XGETECB)
         FI
         PEXIT
         TITLE 'IDSUB - IDENTIFY TP READ/WRITE SUBROUTINES'
IDSUB    PENTRY
         IDENTIFY EP=TPQUE,ENTRY=TPQUE
         IDENTIFY EP=TPGET,ENTRY=TPGET
         IDENTIFY EP=TPPUT,ENTRY=TPPUT
         IDENTIFY EP=TPLOG,ENTRY=TPLOG
         IDENTIFY EP=MVSMONVT,ENTRY=MVSMONVT
         LOAD     EP=TPQUE
         LOAD     EP=TPGET
         LOAD     EP=TPPUT
         LOAD     EP=TPLOG
         LOAD     EP=MVSMONVT
         PEXIT
         TITLE 'TRAP - SETUP SPIE/STAE TRAPS'
TRAP     PENTRY
         SPIE  SPIETRAP,((1,15))
*        STAE  STAETRAP,CT,PURGE=HALT
*
* LEAVE STAE OFF UNTIL SUPR IS THROUGHLY TESTED
*
         PEXIT
         TITLE 'OPEN ALL FILES'
OPEN     PENTRY
         IF    (CLI,OPTION,TEST,EQ)
               OPEN (TESTGETF,,TESTPUTF,(OUTPUT))
         ELSEIF   (CLI,OPTION,TCAM,EQ)
               OPEN (TCAMGETF,,TCAMPUTF,(OUTPUT))
         ELSEIF   (CLI,OPTION,TSO,EQ)
               OPEN (TSOGETF,,TSOPUTF,(OUTPUT))
         FI
         FINDDD =CL8'MPSDUMP'
         IF    (LTR,R1,R1,NZ)
               OPEN (MPSDUMP,(OUTPUT))
         FI
         FINDDD =CL8'MPSLOG'
         IF    (LTR,R1,R1,NZ)
               OPEN (MPSLOG,(OUTPUT))
         FI
         FINDDD =CL8'MPSXLIB'
         IF    (LTR,R1,R1,NZ)
               OPEN (MPSXLIB)
               MVI  XLIBFLAG,C'1'
         FI
         FINDDD =CL8'MPSXTEST'
         IF    (LTR,R1,R1,NZ)
               OPEN (MPSXTEST)
         FI
         FINDDD =CL8'MPSCLIB'
         IF    (LTR,R1,R1,NZ)
               OPEN (MPSCLIB)
         FI
         FINDDD =CL8'MPSCTEST'
         IF    (LTR,R1,R1,NZ)
               OPEN (MPSCTEST)
         FI
         PEXIT
         TITLE 'GETCMD - GET NEXT SUPERVISOR COMMAND'
GETCMD   PENTRY
         SCALL TPGET,(CTLTERM,CMDMSG,LCMDMSG)
         PEXIT
         TITLE 'COMMAND - EXECUTE SUPERVISOR COMMANDS'
COMMAND  PENTRY
         IF    (CLC,CMDMSG(5),=CL5'EXEC',EQ)
               PM   EXEC
         ELSEIF   (CLC,CMDMSG(9),=CL9'CLOSEDOWN',EQ)
               MVI  EOJ,TRUE
         ELSEIF   (CLC,CMDMSG(3),=CL3'LOG',EQ)
               MVI  LOGI,ON
               MVI  LOGO,ON
               TPPUTMSG CTLTERM,'MPS LOG INPUT AND OUTPUT'
         ELSEIF   (CLC,CMDMSG(5),=CL5'NOLOG',EQ)
               MVI  LOGI,OFF
               MVI  LOGO,OFF
               TPPUTMSG CTLTERM,'MPS HARDCOPY LOG OFF'
         ELSEIF  (CLC,CMDMSG(5),=C'INLOG',EQ)
               MVI  LOGI,ON
               MVI  LOGO,OFF
               TPPUTMSG CTLTERM,'MPS LOG INPUT ONLY'
         ELSE
               TPPUTMSG USERTERM,'MPS INVALID CMND'
         FI
         PEXIT
         TITLE 'EXEC - EXECUTE USER PROGRAM'
EXEC     PENTRY
         AP    PEXEC,=P'1'
         SCALL FETCH,(CMDMSG,EXECPGM)
         IF    (LTR,R15,R15,NZ)
               PEXIT
         FI
         LR    R15,R0
         STM   R0,R15,EXITSAVE
         MVI   MODE,USER
         BALR  R14,R15
USEREXIT TAG
         MVI   MODE,SUPR
         IF    (CLI,OPTION,TCAM,EQ),AND,(LTR,R15,R15,NZ)
               ABEND 904,DUMP
         FI
         IF    (CLI,ABORTED,FALSE,NE)
               SCALL SNAPDUMP
               MVI  ABORTED,FALSE
         FI
         SCALL PURGEDCB
         SCALL PURGECDE
         DELETE EPLOC=EXECPGM
         TPPUTMSG CTLTERM,'MPS USER PROGRAM TERMINATED'
         IF    (CLI,OPTION,TCAM,EQ)
               MVI  EOJ,TRUE
         FI
         PEXIT
         TITLE 'CLOSE - CLOSE DOWN SYSTEM'
CLOSE    PENTRY
         IF    (CLI,OPTION,TEST,EQ)
               CLOSE (TESTGETF,,TESTPUTF)
         ELSEIF   (CLI,OPTION,TCAM,EQ)
               CLOSE (TCAMGETF,,TCAMPUTF)
         ELSEIF   (CLI,OPTION,TSO,EQ)
               CLOSE (TSOGETF,,TSOPUTF)
         FI
         IF    (CLC,XGETPATH,=F'0',NE)
               SCALL XCTERM,(XGETPATH)
         FI
         PEXIT
         DROP
         TITLE 'LOAD EXEC OR CALL PROGRAM'
FETCH    SUBENTRY CSECT=NO,BASES=(R13,R12,R11,R10)
         LM    R3,R4,0(R1)    R3=A(MSG) R4=A(NAME SAVE AREA)
         LA    R1,5(R3)
         IF    (TRT,0(8,R1),ALPHANUM,NE)
               LA   R14,5(R3)
               SR   R1,R14
               LR   R15,R1
               ICM  R15,8,=C' '
               LI   R1,8
               LR   R0,R4
               MVCL   R0,R14
         ELSE
               MVC  0(8,R4),5(R3)
               LA   R14,13(R3)
         FI
         MVC   PGMNAME,0(R4)
         IF    (CLC,0(5,R14),=CL5',TEST',EQ)
               LA   R1,6(R14)
               PM   GETPARM
               IF   (CLC,0(4,R3),=C'EXEC',EQ)
                    LA   R2,MPSXTEST
                    PM   LOAD
               ELSE
                    LA   R2,MPSCTEST
                    PM   LOAD
               FI
         ELSE
               LA   R1,1(R14)
               PM   GETPARM
               IF   (CLC,0(4,R3),=C'EXEC',EQ)
                    LA   R2,MPSXLIB
                    PM   LOAD
               ELSE
                    LA   R2,MPSCLIB
                    PM   LOAD
               FI
         FI
         LA    R1,ARGLIST
         SUBEXIT
         TITLE 'LOAD CALL OR EXEC MODULE'
LOAD     PENTRY
*  IF CALLLIB DD STATEMENT IS NOT PRESENT, THE PROGRAM WILL BE
*  LOADED FROM THE SYSTEM LIBRARIES SPECIFIED IN LNKLST00.  IF THE
*  CALLLIB DD STATEMENT IS PRESENT, THE PROGRAM WILL BE LOADED
*  FROM THE LIBRARY SPECIFIED ON THAT DD STATEMENT.
         IF   (CLI,XLIBFLAG,C'0',EQ)
              BLDL  0,DELIST
              IF   (LTR,R15,R15,Z)
                   LOAD   DE=PGMNAME
                   PEXIT
              FI
         ELSEIF   (TM,DCBOFLGS(R2),DCBOPEN,O)
              BLDL (2),DELIST
              IF   (LTR,R15,R15,Z)
                    LOAD   DE=PGMNAME,DCB=(2)
                    PEXIT
              ELSE
                    TPPUTMSG USERTERM,'PGM NOT IN USER LIB'
              FI
         ELSE
              TPPUTMSG USERTERM,'PGM LIBRARY NOT OPEN'
         FI
         SUBEXIT RC=4
GETPARM  PENTRY
         IF    (CLI,0(R1),C'''',EQ)
               AAI  R1,1
               LA   R15,SCANTAB+C''''
               PM   SCANPARM
         ELSEIF   (CLI,0(R1),C'(',EQ)
               AAI  R1,1
               LA   R15,SCANTAB+C')'
               PM   SCANPARM
         ELSE
               LA   R15,SCANTAB+C' '
               PM   SCANPARM
         FI
         PEXIT
SCANPARM PENTRY
         ST    R1,ARGMSG
         MVI   0(R15),X'FF'
         IF    (TRT,0(100,R1),SCANTAB,EQ)
               TPPUTMSG USERTERM,'INVALID PARM FIELD DELIMITER'
               SUBEXIT RC=4
         FI
         MVI   0(R15),X'00'
         S     R1,ARGMSG
         ST    R1,ARGLNG
         PEXIT
         TITLE 'INTERVAL TIMER SUPERVISOR'
TIMER    SUBENTRY CSECT=NO,BASES=(R13,R12,R11)
         IF    (CLI,INTERVAL,WAITING,EQ)
               STIMER REAL,TIMEREXT,BINTVL=WAITINT
               SUBEXIT
         FI
         IF    (CLI,INTERVAL,RESTART,EQ)
               STIMER TASK,TIMEREXT,BINTVL=CPUINT
         FI
         IF    (CLI,INTERVAL,STOP,NE)
               TIME BIN
               ST   R0,REALTIME
               TTIMER
               ST   R0,CPUTIME
         ELSE
               TIME BIN
               S    R0,REALTIME
               MH   R0,=H'10'
               ST   R0,REALTIME    ELAPSED TIME IN MILLI-SECONDS
               TTIMER
               L    R1,CPUTIME
               SR   R1,R0
               MH   R1,=H'26'
               ST   R1,CPUTIME     CPU TIME IN MICRO-SECONDS
         FI
         SUBEXIT
         DROP
         TITLE 'INTERVAL TIMER COMPLETION EXIT ROUTINE'
TIMEREXT SUBENTRY CSECT=NO,BASES=(R13,R12,R11)
         IF    (CLI,INTERVAL,WAITING,EQ)
               POST TIMERECB
               SUBEXIT
         FI
         IF    (CLI,MODE,USER,EQ)
               LOADTCB R2
               L    R2,0(R2)       R2=A(IRB)
               L    R2,28(R2)      R2=A(PRB)
               L    R1,20(R2)      R1=PSW ADDRESS AT INTERRUPTION
               MVI  0(R1),X'00'    FORCE OPERATION EXCEPTION
               TPPUTMSG USERTERM,'PROGRAM ABORTED DUE TO CPU LOOP'
         ELSE
               ABEND 903,DUMP
         FI
         SUBEXIT
         DROP
         TITLE 'TPQUE - IS THERE A MESSAGE QUEUED FOR PROCESSING'
TPQUE    SUBENTRY CSECT=NO,BASES=(R13,R12,R11)
         L     R2,0(R1)
         IF    (TM,TCAMDECB,X'40',O)
               MVC  0(4,R2),=F'1'
         ELSE
               MVC  0(4,R2),=F'0'
         FI
         SUBEXIT
         DROP
         TITLE 'LTORG SO FAR'
         LTORG
         TITLE 'TPGET - GET MESSAGE FROM TP TERMINAL'
TPGET    SUBENTRY CSECT=NO,BASES=(R13,R12,R11)
         IF    (CLI,CALL,FALSE,EQ)
               MVC  SAVESAVE,4(R13)
         ELSE
         TPPUTMSG USERTERM,'CALL PGM ABORTED DUE TO TPGET CALL'
               MVC  4(4,R13),SAVESAVE
               B    ABORT
         FI
         AP    PTPGET,=P'1'
         LR    R6,R1
         LM    R3,R5,0(R1)              R3=TERM  R4=INMSG  R5=MSGLEN
AGAIN    TAG
         MVI   INTERVAL,STOP
         SCALL TIMER
         IF    (CLI,CTLEOF,TRUE,NE)
               PM   GETCTL
         FI
         IF    (CLI,CTLEOF,TRUE,EQ)
           IF  (CLI,OPTION,TEST,EQ)
               PM   TESTREAD
               IF   (CLI,EOF,TRUE,EQ)
                    MVI  INTERVAL,RESTART
                    SCALL TIMER
                    MVI  EOJ,TRUE
                    IF   (CLI,MODE,USER,EQ)
                         B    ABORT
                    FI
               FI
           ELSEIF   (CLI,OPTION,TCAM,EQ)
               PM   TPREAD
           ELSEIF   (CLI,OPTION,TSO,EQ)
               PM   TSOREAD
           ELSE
               PM   MCSREAD
           FI
         FI
         MVC   USERTERM,0(R3)
         IF    (CLI,EOF,TRUE,NE)
               MVI  IOTYPE,C'I'
               LR   R1,R6
               IF   (CLI,LOGI,ON,EQ)
                    SCALL LOGMSG
               FI
               MVI  INTERVAL,RESTART
               SCALL TIMER
               IF   (CLI,0(R4),C'$',EQ)
                    LA   R1,1(R4)
                    ST   R1,ARGMSG
                    LA   R1,80
                    ST   R1,ARGLNG
                    IF   (ICM,R15,15,AMVSMON,Z)
                         LOAD EP=MVSMON
                         ST   R0,AMVSMON
                         LR   R15,R0
                    FI
                    LA   R1,ARGLIST
                    BALR R14,R15
                    B    AGAIN
               FI
               IF   (CLC,0(5,R4),=CL5'CALL',EQ)
                    ST   R4,CALLLIST
                    LA   R1,CALLLIST
                    SCALL CALLER
                    B    AGAIN
               FI
               IF   (CLC,0(4,R4),=C'STOP',EQ),AND,(CLI,MODE,USER,EQ)
                    IF   (CLC,CTLTERM,0(R3),EQ),OR,                    X
               (CLC,MCSTERM,0(R3),EQ)
                         B    ABORT
                    FI
               FI
               IF   (CLC,0(5,R4),=C'TERM,',EQ),AND,(CLI,OPTION,TSO,EQ)
                    MVC  TSOTERM,5(R4)
                    MVC  CTLTERM,TSOTERM
                    TPPUTMSG TSOTERM,'TSO TERM ID RESET'
                    B    AGAIN
               FI
         FI
TPGETEX  SUBEXIT
         TITLE 'GETCTL - GET MESSAGE FROM MPSCTL'
GETCTL   PENTRY
         IF    (TM,MPSCTL+DCBOFLGS,DCBOPEN,Z)
               FINDDD =CL8'MPSCTL'
               IF   (LTR,R1,R1,Z)
                    MVI  CTLEOF,TRUE
                    PEXIT
               FI
               OPEN (MPSCTL)
         FI
         GET   MPSCTL
         MVC   0(8,R3),0(R1)
         LA    R14,8(R1)
         L     R15,MVCLNG
         LR    R0,R4
         L     R1,0(R5)
         MVCL  R0,R14
         PEXIT
GETEOF   TAG
         CLOSE (MPSCTL)
         MVI   CTLEOF,TRUE
         PEXIT
         TITLE 'TESTREAD - READ TEST MESSAGE FROM RQSAMDCB'
TESTREAD PENTRY
         GET   TESTGETF
         LA    R14,8(R1)
         MVC   0(8,R3),0(R1)
         L     R15,MVCLNG
         LR    R0,R4
         L     R1,0(R5)
         MVCL  R0,R14
         PEXIT
TESTEOF  TAG
         MVI   EOF,TRUE
         PEXIT
         TITLE 'TPREAD - READ TCAM MESSAGE'
TPREAD   PENTRY
         IF    (CLI,TCAMPEND,FALSE,EQ)
               MVI  TCAMPEND,TRUE
               PM   TCAMREAD
               IF   (CLI,MCS,TRUE,EQ)
                    PM   WTORREAD
               FI
         FI
         DO    UNTIL,(CLI,GOODMSG,TRUE,EQ)
               MVI   GOODMSG,TRUE
               IF    (CLI,XGETPOST,TRUE,EQ)
                     PM   XCOMPROC
                     IF   (CLI,GOODMSG,TRUE,EQ)
                          PEXIT
                     ELSE
                          MVI  GOODMSG,TRUE
                     FI
               FI
               PM    WAIT
               IF    (TM,WTORECB,X'40',O)
                     PM   WTORPROC
                     PM   WTORREAD
               ELSEIF (TM,TCAMDECB,X'40',O)
                      PM   TCAMPROC
                      PM   TCAMREAD
               ELSE
                      PM   XCOMPROC
               FI
         OD
         PEXIT
         TITLE 'XCOMPROC - PROCESS MESSAGE FROM XCOM PATH'
XCOMPROC PENTRY
         MVI   XGETPOST,TRUE
         MVI   XGETECB,0
         STM   R3,R4,XGETPARM+4
         MVC   XGETLMSG,0(R5)
         LA    R1,XGETPARM
         SCALL XCGET
         L     R0,XGETLMSG
         IF    (LTR,R0,R0,Z)
               MVI  GOODMSG,FALSE
               MVI  XGETPOST,FALSE
         FI
         PEXIT
         TITLE 'PROCESS POSTED TCAM READ'
TCAMPROC PENTRY
         IF    (CLI,TCAMDECB,X'40',EQ)
               MVI  GOODMSG,FALSE       QUEUE POSTED, READ AGAIN
               PEXIT
         FI
         SPACE 2
         IF    (CLI,TCAMDECB,X'51',EQ)     CLOSE/OPEN TCAM QUEUE PATH
               MVI    GOODMSG,FALSE
               MVI    TCAMDECB,X'00'
               WTO    'GU640 WAITING FOR TCAM REUSE TO QUIT   ***** '
               STIMER WAIT,BINTVL=REUSINT
               CLOSE  (TCAMGETF,,TCAMPUTF)
               OPEN   (TCAMGETF,,TCAMPUTF,(OUTPUT))
               WTO    'GU640 TCAM QUEUE PATH NOW RE-OPENED    ***** '
               PEXIT
         SPACE 2
REUSINT  DC    A(100*30*1)               30 SECONDS
  SPACE 2
         FI
         IF    (CLI,TCAMDECB,X'7F',NE)
               MVI   GOODMSG,FALSE
               PEXIT
         FI
         MVC   0(8,R3),GETFTERM
         IF    (CLI,LC,IN,EQ)
               LH   R15,GETFMSG
               SH   R15,=H'8'
               ST   R15,0(R5)
               LR   R1,R15
               SH   R1,=H'4'
               SLL  R15,16
               ST   R15,0(R4)
               LA   R0,4(R4)
               LA   R14,GETFDATA
               LR   R15,R1
               MVCL R0,R14
               PEXIT
         FI
         LA    R1,GETFDATA
         TRT   GETFDATA(20),FINDSLSH         SETS R1 TO SLASH
         LR    R15,R1                        SAVE / PTR FOR NEXT ELSE
         LA    R14,LPREFIX(R1)
         IF    (CLI,0(R14),C'F',EQ)
               LA   R14,1(R14)               FOR F TYPE MSG ONLY
         ELSE
               LR   R1,R4                    INMSG IN CALLING PROG
               SH   R1,=H'20'                BACK UP 20 BYTES
               MVC  0(20,R1),1(R15)          PREFIX USED BY TC031000
               IF   (CLC,0(4,R1),=C'TERM',EQ)
                    MVC  0(4,R1),GETFTERM    SET TERMID FOR CA APPLIC
               FI
         FI
         LH    R15,GETFMSG
         LA    R15,GETFMSG-2(R15)            A(EOT-1)
         DO    WHILE,(CLI,0(R15),X'40',L)    SKIP TRAILING CTL CHARS
               SI   R15,1
         OD
         AAI   R15,1
         IF    (CLR,R14,R15,NL)
               PM   BADMSG
               PEXIT
         FI
         SR    R15,R14
         ICM   R15,8,=C' '
         LR    R0,R4
         L     R1,0(R5)
         MVCL  R0,R14
         PEXIT
         TITLE 'ISSUE TCAM READ'
TCAMREAD PENTRY
         READ  TCAMDECB,SF,TCAMGETF,GETFMSG,'S'
         PEXIT
         TITLE 'BADMSG - BAD TCAM INPUT MESSAGE'
BADMSG   PENTRY
         MVI   GOODMSG,FALSE
         MVI   INTERVAL,RESTART
         SCALL TIMER
         TPPUTMSG GETFTERM,'MPS USER INPUT MESSAGE INVALID - RESEND'
         MVI   INTERVAL,STOP
         SCALL TIMER
         PEXIT
         TITLE 'READ TSO TERMINAL MESSAGE'
TSOREAD  PENTRY
         PUT   TSOPUTF,PROMPT
         GET   TSOGETF,GETFMSG
         MVC   0(8,R3),TSOTERM
         LH    R15,GETFMSG
         LA    R15,GETFMSG(R15)
         LA    R14,GETFMSG+4
         SR    R15,R14
         ICM   R15,8,=C' '
         LR    R0,R4
         L     R1,0(R5)
         MVCL  R0,R14
         PEXIT
         TITLE 'READ MCS MESSAGE ONLY'
MCSREAD  PENTRY
         IF    (CLI,MCSPEND,FALSE,EQ)
               MVI  MCSPEND,TRUE
               PM   WTORREAD
         FI
         DO    UNTIL,(CLI,GOODMSG,TRUE,EQ)
               MVI  GOODMSG,TRUE
               PM   WAIT
               IF   (TM,WTORECB,X'40',O)
                    PM    WTORPROC
                    PM    WTORREAD
               ELSE
                    PM    XCOMPROC
               FI
         OD
         PEXIT
         TITLE 'ISSUE WTOR'
WTORREAD PENTRY
         MVI   WTORECB,X'00'
         MVI   WTORMSG,C' '
         MVC   WTORMSG+1(L'WTORMSG-1),WTORMSG
         LOADTIOT R1
         MVC   WTORJOB,0(R1)
         WTOR  ,WTORMSG,L'WTORMSG,WTORECB,MF=(E,WTORLIST)
         PEXIT
         TITLE 'PROCESS POSTED WTOR MESSAGE'
WTORPROC PENTRY
         MVC   0(8,R3),MCSTERM
         LA    R14,WTORMSG
         L     R15,WTORMVLG
         LR    R0,R4
         L     R1,0(R5)
         MVCL  R0,R14
         PEXIT
         TITLE 'WAIT FOR TCAM, MCS, XCOM, OR TIMER POST'
WAIT     PENTRY
         DO UNTIL,(TM,TIMERECB,X'40',Z)
               MVI   TIMERECB,X'00'
               MVI   INTERVAL,WAITING
               SCALL TIMER
               WAIT  1,ECBLIST=ECBLIST
         OD
         PEXIT
         DROP
         TITLE 'CALL PROGRAM'
CALLER   SUBENTRY CSECT=NO,BASES=(R13,R12,R11)
         AP    PCALL,=P'1'
         SCALL FETCH
         IF    (LTR,R15,R15,NZ)
               SUBEXIT
         FI
         LR    R15,R0
         STM   R0,R15,CALLSAVE
         MVI   CALL,TRUE
         MVC   CALLMODE,MODE
         MVI   MODE,USER
         BALR  R14,R15
CALLEXIT TAG
         IF    (CLI,ABORTED,FALSE,NE)
               SCALL SNAPDUMP
               MVI  ABORTED,FALSE
         FI
         MVC   MODE,CALLMODE
         MVI   CALL,FALSE
         DELETE EPLOC=CALLPGM
         SUBEXIT
         DROP
         TITLE 'LOGMSG - LOG MESSAGE'
LOGMSG   SUBENTRY CSECT=NO,BASES=(R13,R12,R11)
         LM    R3,R5,0(R1)
         IF    (CLI,IOTYPE,C'L',NE),AND,                               C
               (CLI,LOGI,OFF,EQ),AND,                                  C
               (CLI,LOGO,OFF,EQ),AND,                                  C
               (CLI,MODE,USER,EQ)
               SUBEXIT
         FI
         IF    (CLI,MODE,SUPR,EQ)
               MVI  IOMODE,C'S'
         ELSE
               MVI  IOMODE,C'U'
         FI
         MVC   DTERM,0(R3)
         DTIME TIMEDATE
         MVC   DCLOCK,TIMEDATE+1
         L     R0,REALTIME
         CVD   R0,PWORK
         EDIT  TO=DREAL,FROM=PWORK+4,MASK=' ZZZZZ99'
         L     R0,CPUTIME
         CVD   R0,PWORK
         EDIT  TO=DCPU,FROM=PWORK+4,MASK=' ZZZZZ99'
         LA    R6,L'DMSG
         L     R7,0(R5)
         LR    R8,R4
         DO    WHILE,(LTR,R7,R7,P)
               IF   (CLR,R7,R6,L)
                    LR   R15,R7
               ELSE
                    LR   R15,R6
               FI
               LR   R14,R8
               SR   R7,R15
               AR   R8,R15
               LA   R0,DMSG
               LR   R1,R6
               ICM  R15,8,=C' '
               MVCL R0,R14
               TR   DMSG,PRINTTAB
               LA   R2,DLINE
               IF   (CLC,DMSG,=CL80' ',NE)
                    PM   PUTLOG              DO NOT LOG BLANK LINES
               FI
         OD
         SUBEXIT
         TITLE 'PUTLOG - PRINT LOG LINE WITH PAGE CONTROL'
PUTLOG   PENTRY
         IF    (SP,LINE,=P'1',NP)
               AP   PAGE,=P'1'
               EDIT TO=DPAGE,FROM=PAGE,MASK=' ZZZZZ'
               LA   R0,HEAD1
               PM   WRITE
               LA   R0,HEAD2
               PM   WRITE
               ZAP  LINE,=P'55'
         FI
         LR    R0,R2
         PM    WRITE
         PEXIT
WRITE    PENTRY
         IF    (TM,MPSLOG+DCBOFLGS,DCBOPEN,O)
               PUT  MPSLOG
         FI
         PEXIT
         DROP
         TITLE 'TPPUT - PUT MESSAGE TO TP TERMINAL'
TPPUT    SUBENTRY CSECT=NO,BASES=(R13,R12,R11)
         AP    PTPPUT,=P'1'
         LR    R6,R1
         LM    R3,R5,0(R1)
         MVI   INTERVAL,STOP
         SCALL TIMER
         MVC   XPUTTERM,0(R3)
         SCALL XCTP,(XPUTTERM,XPUTPATH)
         IF    (CLC,XPUTPATH,=F'0',NE)
               ST   R4,XPUTPARM+8
               MVC  XPUTLMSG,0(R5)
               LA   R1,XPUTPARM
               SCALL XCPUT
               L    R0,XPUTLMSG
               IF   (LTR,R0,R0,Z)
                    WTO 'MPS XCOM PUT FAILED - NOTIFY TECH. SUPPORT'
               FI
               MVI  IOTYPE,C'O'
               LR   R1,R6
               IF   (CLI,LOGO,ON,EQ)
                    SCALL  LOGMSG
               FI
               MVI  INTERVAL,START
               SCALL TIMER
               SUBEXIT
         FI
         IF    (CLI,OPTION,TCAM,EQ),AND,(CLC,0(8,R3),MCSTERM,NE)
               PM   TCAMPUT
               MVI  IOTYPE,C'O'
               LR   R1,R6
               IF   (CLI,LOGO,ON,EQ)
                    SCALL  LOGMSG
               FI
         ELSE
               PM   LCRPUT
         FI
         MVI   INTERVAL,START
         SCALL TIMER
         SUBEXIT
         TITLE 'LCRPUT - PUT MCS, TSO, TEST, AND LOG MSGS WITH CRS'
LCRPUT   PENTRY
         ST    R4,LCRPTR
         MVC   LCRHOLD,0(R5)
         PM    GETLCR
         DO    WHILE,(CLC,LCRLNG,=F'0',NE)
               STM  R3,R5,LOGLIST
               LA   R1,LOGLIST
               MVI  IOTYPE,C'O'
               IF   (CLI,LOGO,ON,EQ)
                    SCALL LOGMSG
               FI
               IF   (CLC,0(8,R3),MCSTERM,EQ),OR,(CLI,OPTION,MCSONLY,EQ)
                    PM   MCSPUT
               ELSEIF   (CLI,OPTION,TSO,EQ)
                    PM   TSOPUT
               ELSE
                    PM   TESTPUT
               FI
               PM   GETLCR
         OD
         PEXIT
         TITLE 'GETLCR - GET LOGICAL LINE WITH CARRIAGE RETURN'
GETLCR   PENTRY
         L     R4,LCRPTR
         L     R5,LCRHOLD
         LM    R14,R15,=A(LCRAREA,L'LCRAREA)
         LR    R0,R5          SAVE REMAINING DATA COUNT
         MVCL  R14,R4         MOVE UP TO A FULL LINE OF DATA
         SR    R0,R5          R0=BYTES MOVED
         ZR    R1
         IF    (TRT,LCRAREA,FINDCR,NE)
               LR   R14,R1    R14=A(CR IN LCR AREA)
               S    R1,=A(LCRAREA-1)    BYTES INCLUDING CR
               SR   R0,R1               BYTES TO HOLD UP
               SR   R4,R0               BACKUP POINTER
               AR   R5,R0               ADD BACK DATA COUNT
               SI   R1,1                BYTES IN LINE
               IF   (LTR,R1,R1,NP)
                    LI   R1,1
               FI
         ELSE
               LR   R1,R0
         FI
         ST    R1,LCRLNG
         ST    R4,LCRPTR
         ST    R5,LCRHOLD
         LA    R4,LCRAREA
         LA    R5,LCRLNG
         TR    LCRAREA,PRINTTAB
         PEXIT
         TITLE 'PUT TCAM MESSAGE'
TCAMPUT  PENTRY
         IF    (CLI,TW,TRUE,EQ)
               MVI  TW,FALSE
               WAIT ECB=TWDECB
               PM   CHKDEST
               DO   WHILE,(CLI,TWDECB,X'5C',EQ)
                    STIMER WAIT,BINTVL==A(50)
*
*          WAIT FOR TCAM TO CLEAR THROAT
*
                    PM   TWRITE
                    WAIT ECB=TWDECB
                    PM   CHKDEST
               OD
               IF   (CLI,TWDECB,X'7F',NE)
                    ABEND 905,DUMP      DEBUG A PROBLEM
               FI
         FI
         MVC   PUTFTERM,0(R3)
         PM    LIMITPUT
         IF    (CLI,LC,IN,EQ)
               PM   BUILDPUT
               PM   TWRITE
               MVI  TW,TRUE
               PEXIT
         FI
*      REMOVE PREFIX AND SUFFIX FOR TCI DEVICES - TCAM WILL DO IT.
         IF    (CLI,PUTFTERM+3,X'EF',GT),AND,(CLI,PUTFTERM+3,X'FA',LT),X
               AND,(CLC,PUTFTERM(2),=C'T0',NE)
               MVC  SPREFIX,PREFIX     SAVE PREFIX
               MVC SEOT,SUFFIX+1       SAVE SUFFIX+1(2)
               MVC PREFIX,=X'000000'
               MVC  SUFFIX+1(2),=X'0000'
         FI
*      OVERLAY NL CHAR IN PREFIX/SUFFIX FOR 2260 TYPE DEVICES.
         IF   (CLI,PUTFTERM+3,X'C0',GT),AND,(CLI,PUTFTERM+3,X'EA',LT)
              MVC   SPREFIX,PREFIX     SAVE PREFIX
              MVC   SSUF,SUFFIX        SAVE SUFFIX
              MVI   PREFIX+2,C' '       OVLY NL
              MVI   SUFFIX,C' '         OVLY NL
         FI
         LA    R0,LCTL(R1)
         STH   R0,PUTFMSG
         LA    R14,PUTFDATA
         LR    R15,R1
         LR    R0,R4
         MVCL  R14,R0
         MVC   0(L'SUFFIX,R14),SUFFIX
         PM    TWRITE
*      RESTORE PREFIX AND SUFFIX FOR TCI DEVICES.
         IF    (CLI,PUTFTERM+3,X'EF',GT),AND,(CLI,PUTFTERM+3,X'FA',LT),X
               AND,(CLC,PUTFTERM(2),=C'T0',NE)
               MVC  PREFIX,SPREFIX
               MVC SUFFIX+1(2),SEOT
         FI
*      RESTORE PREFIX/SUFFIX FOR 2260 TYPE DEVICE.
         IF    (CLI,PUTFTERM+3,X'C0',GT),AND,(CLI,PUTFTERM+3,X'EA',LT)
               MVC   PREFIX,SPREFIX
               MVC   SUFFIX,SSUF
         FI
         MVI   TW,TRUE
         PEXIT
         TITLE 'CHECK FOR DESTINATION ERROR ON WRITE'
CHKDEST  PENTRY
         IF    (CLI,TWDECB,X'54',EQ)
               MVC  PUTFTERM,DLQTERM
               PM   TWRITE
               WAIT ECB=TWDECB
         FI
         PEXIT
         TITLE 'SPECIAL SNAP TO DEBUG SPECIFIC PROBLEM'
SNAPSPEC PENTRY
         STM   R0,R15,SAVALL
         OPEN  (SNAPSPCL,(OUTPUT))
         SNAP  DCB=SNAPSPCL,ID=(2),SDATA=(CB,Q),PDATA=(ALL)
         CLOSE (SNAPSPCL)
         WTO   'DELIBERATE ENTRY INTO SNAP ROUTINE  <-----'
         WTO   'SNAP WILL PRINT, PROGRAM WILL CONTINUE TO RUN  <-----'
         LM    R0,R15,SAVALL
         PEXIT
         SPACE 2
SNAPSPCL DCB   DSORG=PS,MACRF=(W),DDNAME=SNAPSPCL,                     X
               RECFM=VBA,LRECL=125,BLKSIZE=1632
         DC    C' S A V A L L'
SAVALL   DC    16F'0'
         DC    C' S A V A L L'
         TITLE 'ISSUE TCAM WRITE'
TWRITE   PENTRY
         WRITE TWDECB,SF,TCAMPUTF,PUTFMSG,'S'
         PEXIT
         TITLE 'PUT TSO MESSAGE'
TSOPUT   PENTRY
         PM    LIMITPUT
         PM    BUILDPUT
         PUT   TSOPUTF,PUTFMSG
         PEXIT
         TITLE 'PUT TEST MESSAGE'
TESTPUT  PENTRY
         PM    LIMITPUT
         PM    BUILDPUT
         PUT   TESTPUTF,PUTFMSG
         PEXIT
         TITLE 'PUT MCS MESSAGE'
MCSPUT   PENTRY
         L     R5,0(R5)
         ICM   R5,8,=C' '
         DO    WHILE,(CLM,R5,7,=3X'00',NE)
               LA   R14,WTODATA
               LA   R15,L'WTODATA
               MVCL R14,R4                   MOVE DATA TO WTO AREA
               WTO  MF=(E,WTOLIST)
         OD
         PEXIT
         TITLE 'LIMITPUT AND BUILD SUBROUTINES FOR TPPUT'
LIMITPUT PENTRY
         L     R1,0(R5)
         IF    (CL,R1,MAXMSG,H)
               MVI  IOTYPE,C'L'
               MVC  PUTFTERM,0(R3)
               SCALL LOGMSG,(PUTFTERM,MSG4,LMSG4)
               L    R1,MAXMSG
         FI
         PEXIT
         SPACE 2
BUILDPUT PENTRY
         LA    R0,4(R1)
         STH   R0,PUTFMSG
         LA    R14,PUTFMSG+4
         LR    R15,R1
         LR    R0,R4
         MVCL  R14,R0
         PEXIT
         DROP
         TITLE 'SPIETRAP - PROCESS PROGRAM CHECK INTERRUPTIONS'
SPIETRAP TAG
         DROP
         USING *,R15
         STM   R0,R15,SPIESAVE
         MVC   SPIEPSW,4(R1)
         IF    (CLI,MODE,SUPR,EQ)
               ABEND 901,DUMP
         FI
         MVI   MODE,SUPR
         MVI   ABORTED,SPIE
         MVC   8(4,R1),=A(ABORT)
         BR    R14
         DROP
         TITLE 'ABORT USER PROGRAM'
ABORT    TAG
         BALR  R15,0
         USING *,R15
         IF    (CLI,CALL,TRUE,EQ)
               LM   R0,R14,CALLSAVE
               L    R15,=A(CALLEXIT)
               BR   R15
         FI
         LM    R0,R14,EXITSAVE
         L     R15,=A(USEREXIT)
         BR    R15
         DROP
         TITLE 'STAETRAP - PROCESS ABENDS'
STAETRAP TAG
         DROP
         USING *,R15
         STM   R0,R15,STAESAVE
         IF    (CLI,MODE,SUPR,EQ)
               ABEND 902,DUMP
         FI
         MVI   MODE,SUPR
         MVI   ABORTED,STAE
         L     R0,=A(ABORT)
         LA    R15,4
         BR    R14
         DROP
         TITLE 'SNAPDUMP - PROCESS DUMP REQUEST'
SNAPDUMP SUBENTRY CSECT=NO,BASES=(R13,R12,R11)
         IF    (CLI,ABORTED,SPIE,EQ)
               ZR   R2
               IC   R2,SPIEPSW+3
               IC   R2,HEX(R2)
               STC  R2,DSPICODE
               ZR   R0
               ICM  R0,7,SPIEPSW+5
               IF   (CLI,CALL,TRUE,EQ)
                    MVC  DSPIPGM,CALLPGM
                    S    R0,CALLSAVE
               ELSE
                    MVC  DSPIPGM,EXECPGM
                    S    R0,EXITSAVE
               FI
               ST   R0,SPIEADDR
               UNPK DSPIADDR(7),SPIEADDR+1(4)
               MVI  DSPIADDR+6,C' '
               TR   DSPIADDR,HEX-X'F0'
               TPPUTMSG USERTERM,SPIEMSG
               IF   (CLC,CTLTERM,USERTERM,NE)
                    TPPUTMSG CTLTERM,SPIEMSG
               FI
         ELSE
               TPPUTMSG USERTERM,'MPS USER PROGRAM ABEND'
               IF   (CLC,CTLTERM,USERTERM,NE)
                    TPPUTMSG CTLTERM,'MPS USER PROGRAM ABEND'
               FI
         FI
         L     R2,BDUMP
         IF    (CL,R2,BDUMPMAX,NH)
               SNAP DCB=MPSDUMP,ID=(2),SDATA=(CB,Q),PDATA=(ALL)
               AAI  R2,1
               ST   R2,BDUMP
         FI
         SUBEXIT
         DROP
         TITLE 'PURGEDCB - CLOSE ALL USER DCBS THAT ARE OPEN'
PURGEDCB SUBENTRY CSECT=NO,BASES=(R13,R12,R11)
         LOADTCB R2
         L     R3,12(R2)           TIOT FROM TCB
         L     R4,8(R2)            DEB QUEUE FROM TCB
         DO    WHILE,(CLM,R4,7,=XL3'00',NE)
               L    R5,24(R4)      DCB FROM DEB
               L    R4,4(R4)         NEXT DEB FROM DEB
               ZR   R6
               ICM  R6,3,40(R5)    TIOT OFFSET FROM DCB
               LA   R1,4(R3,R6)    TIOT DD NAME
               PM   FINDDCB
               IF   (CLI,USERDCB,TRUE,EQ)
                    CLOSE ((5))    CLOSE USER DCB
               FI
         OD
         SUBEXIT
FINDDCB  PENTRY
         LA    R15,SUPRDCBS
         DO    WHILE,(CLC,0(8,R1),0(R15),NL)
               IF   (CLC,0(8,R1),0(R15),EQ)
                    MVI  USERDCB,FALSE
                    PEXIT
               FI
               AAI  R15,8
         OD
         MVI   USERDCB,TRUE
         PEXIT
         DROP
         TITLE 'PURGECDE - DELETE USER MODULES ON LOAD LIST'
PURGECDE SUBENTRY CSECT=NO,BASES=(R13,R12,R11)
         LOADTCB R2
         L     R2,TCBLLS(R2)
         DO    WHILE,(LTR,R2,R2,P)
               L    R3,4(R2)  R3=A(CDE)
               IF   (CLI,0(R3),X'03',EQ) IS IT JOBPACK NONREUSEABLE
                    LA   R4,8(R3)
                    DELETE EPLOC=(4)
                    LOADTCB R2
                    LA   R2,TCBLLS(R2)
               FI
               L    R2,0(R2)
         OD
         SUBEXIT
         DROP
         TITLE 'LITERALS AND EQUS'
         TITLE 'TPLOG--ACTIVATE OR DEACTIVATE LOG OPTION'
TPLOG    SUBENTRY CSECT=NO,BASES=(R13,R12,R11)
         L     R2,0(R1)
         MVC   LOGI,0(R2)
         MVC   LOGO,0(R2)
         SUBEXIT
         DROP
         TITLE 'EQUATES AND LITERAL POOL'
         EQUAL
         TITLE 'LOGICAL SWITCHES'
OPTION   LOGICAL TEST,(TEST,TCAM,TSO,MCSONLY)
MCS      LOGICAL FALSE,(TRUE,FALSE)
CALL     LOGICAL FALSE,(TRUE,FALSE)
MODE     LOGICAL SUPR,(SUPR,USER)
CTLEOF   LOGICAL FALSE,(FALSE,TRUE)
EOF      LOGICAL FALSE,(TRUE,FALSE)
EOJ      LOGICAL FALSE,(TRUE,FALSE)
ABORTED  LOGICAL FALSE,(FALSE,SPIE,STAE)
INTERVAL LOGICAL RESTART,(RESTART,START,STOP,WAITING)
TCAMPEND LOGICAL FALSE,(TRUE,FALSE)
MCSPEND  LOGICAL FALSE,(TRUE,FALSE)
GOODMSG  LOGICAL TRUE,(TRUE,FALSE)
TW       LOGICAL FALSE,(TRUE,FALSE)  TCAM WRITE IN PROCESS
LC       LOGICAL OUT,(IN,OUT)
         TITLE 'COMMON DATA'
LCRPTR   DC    A(0)
LCRHOLD  DC    F'0'
LCRLNG   DC    F'0'
LOGLIST  DC    3A(0)
LCRAREA  DC    CL120' '
BDUMP    DC    F'1'           DUMP COUNTER
BDUMPMAX DC    F'2'           MAX DUMPS ALLOWED
         SPACE 2
DELIST   DS    0F
         DC    AL2(1,58)
PGMNAME  DC    CL8' '
         DC    XL50'00'
         SPACE 2
EXECPGM  DC    CL8' '
CALLPGM  DC    CL8' '
CALLMODE DC    C' '
CALLLIST DC    A(0,CALLPGM)
         SPACE 2
MVCLNG   DC    0F'0',C' ',AL3(72)
         SPACE 2
WTORLIST WTOR '**JOB*** MCS AT YOUR SERVICE',MF=L
         ORG   WTORLIST+12 SKIP A(REPLY,ECB),AL2(LREPLY,FLAGS)
WTORJOB  DS    CL8         PUT  JOBNAME IN WTOR TEXT TO OPER.
         ORG
WTORECB  DC    F'0'
WTORMVLG DC    0F'0',C' ',AL3(L'WTORMSG)
WTORMSG  DC    CL80' '
         SPACE 2
WTOLIST  DC    0F'0',AL2(WTOEND-*,0)
WTODATA  DC    CL60' '                   MAX LINE ON CONSOLE W-HASP
WTOEND   EQU   *
         SPACE 2
FINDSLSH TRTTAB SCAN,FIND=C'/'
FINDCR   TRTTAB SCAN,FIND=X'15'
PRINTTAB TRTTAB PRINT
         SPACE 2
         DS    0D
         DC    C'SPIE PSW'
SPIEPSW  DC    D'0'
         DC    C'SPIESAVE'
SPIESAVE DC    16F'0'
         DC    C'EXITSAVE'
EXITSAVE DC    16F'0'
         DC    C'STAESAVE'
STAESAVE DC    16F'0'
         DC    C'CALLSAVE'
CALLSAVE DC    16F'0'
SAVESAVE DC    F'0'
SPIEADDR DC    A(0)
         SPACE 2
HEX      DC    C'0123456789ABCDEF'
         SPACE 2
SPIEMSG  DS    0CL80
         DC    C'USER PROGRAM CHECK INTERRUPTION '
DSPICODE DC    C' ',C' AT LOCATION '
DSPIADDR DC    CL6' ',C' IN '
DSPIPGM  DC    CL8' '
         FILL  SPIEMSG
         SPACE 2
SCANTAB  DC    256X'00'
         SPACE 2
ARGLIST  DC    A(USERTERM)
ARGMSG   DC    A(0)
         DC    A(ARGLNG)
ARGLNG   DC    F'0'
MVSMONVT DS    0F MVSMON TP421000 VECTOR TABLE
         DC    A(0) ADDRESS OF MVSMON WORK AREA SET BY MVSMON
         DC    V(TPPUT) ADDRESS OF OUTPUT MESSAGE PROCESSOR
AMVSMON  DC    A(0) ADDRESS OF MVSMON ENTRY POINT
         SPACE 2
DLQTERM  DC    CL8'CTL1' DEAD LETTER QUEUE (INVALID DESTINATION MSGS)
CTLTERM  DC    CL8'CTL1'
USERTERM DC    CL8'CTL1'
MCSTERM  DC    CL8'MCS'
TSOTERM  DC    CL8'TSO'
         SPACE 2
CMDMSG   DC    CL72' '
LCMDMSG  DC    A(L'CMDMSG)
         SPACE 2
         SPACE 2
SPREFIX  DC    XL3'00'
SEOT     DC    X'0000'
SSUF     DC    X'000000'
         SPACE 2
MAXMSG   DC    A(PUTFBLK-LCTL)
PROMPT   DC    0F'0',AL2(4+1,0),C'?'
CPUINT   DC    A(100*60*2)  2 MINUTE CPU LIMIT ON TRANSACTIONS
WAITINT  DC    A(100*60*4)    4  MIN WAIT INTERVAL
         SPACE 2
TIMERECB DC    F'0'
ECBLIST  DC    A(TIMERECB,TCAMDECB,WTORECB),X'80',AL3(XGETECB)
XGETECB  DC    F'0'
XGETTERM DC    CL8'XGET'
XGETPATH DC    CL4' '
XGETPARM DC    A(XGETPATH,0,0,XGETLMSG)
XGETLMSG DC    F'0'
XPUTPATH DC    CL4' '
XPUTPARM DC    A(XPUTPATH,XPUTTERM,0,XPUTLMSG)
XPUTTERM DC    CL8' '
XPUTLMSG DC    F'0'
XGETPOST LOGICAL FALSE,(TRUE,FALSE)
CPUTIME  DC    F'0'
REALTIME DC    F'0'
         SPACE 2
MSG4     DC    C'OUTPUT MESSAGE TOO LONG - TRUNCATED'
LMSG4    DC    A(L'MSG4)
         SPACE 2
XLIBFLAG DC    C'0'                    IF MPSCLIB DD, WILL BE C'1'
LOGI     DC    C'1'                    LOG INPUT MESSAGES     1=ON
LOGO     DC    C'1'                    LOG OUTPUT MESSAGES    0=OFF
ON       EQU   C'1'
OFF      EQU   C'0'
         SPACE 2
LPREFIX  EQU   21                        TCAM TIME-DATE PREFIX
TCBLLS   EQU   36                        TCB OFFSET LOAD LIST ELEMENTS
LCTL     EQU   18   LENGTH(4),TERM(8),PREFIX(3),MSG,SUFFIX(3)
         TITLE 'LOG DATA'
LINE     DC    PL2'0'
PAGE     DC    PL3'0'
         SPACE 2
DLINE    DS    0CL133
         DC    C' '
IOMODE   DC    C' ',C' '
IOTYPE   DC    C' ',C' '
DTERM    DC    CL8' ',C' '
DCLOCK   DC    CL11' ',C' '
DREAL    DC    CL8' ',C' '
DCPU     DC    CL8' ',C' '
DMSG     DC    CL80' '
         FILL  DLINE
         SPACE 2
HEAD1    DS    0CL133
         DC    C'1',C'FPC MESSAGE PROCESSING SUPERVISOR LOG'
         DC    C' '
DATE     DC    CL8' ',C' OPTION '
DOPTION  DC    C'TEST',C' PAGE'
DPAGE    DC    CL6' '
         FILL  HEAD1
         SPACE 2
HEAD2    DS    0CL133
         DC    C' '
         DC    C'I/O --TERM-- '
         DC    C'---CLOCK--- REAL(MS)  CPU(US) '
         DC    C'MESSAGE'
         FILL  HEAD2
         SPACE 2
PWORK    DC    D'0'
TIMEDATE DC    CL22' '
PTPGET   DC    PL4'0'
PTPPUT   DC    PL4'0'
BTIME    DC    F'0'
PTIME    DC    D'0'
PEXEC    DC    PL4'0'
PCALL    DC    PL4'0'
         SPACE 2
DTOTALS  DS    0CL133
         DC    C'0MPS TOTALS'
         DC    C'   EXECS ='
DEXEC    DC    CL10' ',C'   CALLS ='
DCALL    DC    CL10' ',C'   TPGETS ='
DTPGET   DC    CL10' ',C'     TPPUTS ='
DTPPUT   DC    CL10' ',C'     ELAPSED TIME ='
DTIME    DC    CL7' ',C' SECONDS'
         FILL  DTOTALS
         SPACE 2
ALPHANUM DC    128X'FF',128X'00'
         TITLE 'FILES'
USERDCB  LOGICAL FALSE,(TRUE,FALSE)
         SPACE 2
SUPRDCBS DS    0D
         DC    CL8'MPSCLIB '
         DC    CL8'MPSCTEST'
         DC    CL8'MPSDUMP '
         DC    CL8'MPSLOG  '
         DC    CL8'MPSXLIB '
         DC    CL8'MPSXTEST'
         DC    CL8'STEPLIB'
         DC    CL8'SYSABEND'
         DC    CL8'SYSUDUMP'
         DC    CL8'TCAMGETF'
         DC    CL8'TCAMPUTF'
         DC    CL8'TESTGETF'
         DC    CL8'TESTPUTF'
         DC    CL8'TSOGETF '
         DC    CL8'TSOPUTF '
         DC    XL8'00' FORCE KEY HIGH AT END OF SUPR DDNAMES
         SPACE 2
MPSCTL   DCB   DSORG=PS,MACRF=GL,DDNAME=MPSCTL,EODAD=GETEOF,           X
               RECFM=FB,LRECL=80
DCBOFLGS EQU   48  FE PG 153
DCBOPEN  EQU   X'10'
MPSDUMP  DCB   DSORG=PS,MACRF=(W),DDNAME=MPSDUMP,                      X
               RECFM=VBA,LRECL=125,BLKSIZE=1632
MPSLOG   DCB   DSORG=PS,MACRF=(PM),DDNAME=MPSLOG,                      X
               RECFM=FA,BLKSIZE=133
TESTPUTF DCB   DSORG=PS,MACRF=PM,DDNAME=TESTPUTF,                      X
               RECFM=VB
TESTGETF DCB   DSORG=PS,MACRF=GL,DDNAME=TESTGETF,EODAD=TESTEOF,        X
               RECFM=FB,LRECL=80
TCAMGETF DCB   DSORG=PS,MACRF=R,DDNAME=TCAMGETF,                       X
               RECFM=V,BLKSIZE=GETFBLK,OPTCD=WU
TCAMPUTF DCB   DSORG=PS,MACRF=W,DDNAME=TCAMPUTF,                       X
               RECFM=V,BLKSIZE=PUTFBLK,OPTCD=WU
TSOGETF  DCB   DSORG=PS,MACRF=GM,DDNAME=TSOGETF,                       X
               RECFM=V,BLKSIZE=GETFBLK
TSOPUTF  DCB   DSORG=PS,MACRF=PM,DDNAME=TSOPUTF,                       X
               RECFM=V,BLKSIZE=PUTFBLK
MPSXLIB  DCB   DSORG=PO,MACRF=R,DDNAME=MPSXLIB
MPSXTEST DCB   DSORG=PO,MACRF=R,DDNAME=MPSXTEST
MPSCLIB  DCB   DSORG=PO,MACRF=R,DDNAME=MPSCLIB
MPSCTEST DCB   DSORG=PO,MACRF=R,DDNAME=MPSCTEST
         SPACE 2
GETFMSG  DC    F'0'
GETFTERM DC    CL8' '
GETFDATA DC    960C' '
GETFBLK  EQU   *-GETFMSG
         EJECT
PUTFMSG  DC    F'0'
PUTFTERM DC    CL8' '
PREFIX   DC    X'020015' STX,NUL,NL TCAM MESSAGE START
PUTFDATA DC    2000C' '
PUTFBLK  EQU   *-PUTFMSG
SUFFIX   DC    X'150337'  NL,ETX,EOT' TCAM MESSAGE ENDING
         SPACE 2
         END   GU640001
