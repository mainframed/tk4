*          DATA SET ER011000   AT LEVEL 028 AS OF 09/29/75
         TITLE 'ER011000-FORTRAN CROSS REFERENCE AND RENUMBER'
         PRINT NOGEN
ER011000 SUBENTRY BASES=(R13,R12,R11)
*              AUTHOR.   DON HIGGINS.
*              DATE.     06/02/74.
*              REMARKS.  FORTRAN RENUMBER AND CROSS REFERENCE.
*              FILES.
*                        SYSUT1 - FORTRAN SOURCE PROGRAM.
*                        SYSPRINT - CROSS REFERENCE REPORT.
*                        SYSUT2 - RENUMBERED SOURCE.
*
*              LIMITATIONS.
*                  1. IN CORE STATEMENT NUMBER TABLE IS DYNAMICALLY
*                     BUILT AND REQUIRES 24 BYTES PER STATEMENT #
*                     PLUS 8 BYTES PER REFERENCE.
*                  2. MULTIPLE PROGRAMS (MAINS, SUBROUTINES, AND
*                     FUNCTIONS) CAN BE PROCESSED CORRECTLY IN ONE
*                     RUN PROVIDED THEY EACH END WITH AN END
*                     STATEMENT.  LINE NUMBERS MUST BE USED TO
*                     DISTINGUISH DUPLICATE STATEMENT NUMBERS IN
*                     SEPARATE PROGRAMS IN THE CROSS REFERENCE REPORT.
*                  3. ANY ERRORS WILL SUPRESS RENUMBERED DECK OUTPUT.
*                  4. THE PROGRAM ASSUMES NO SYNTAX ERRORS IN THE
*                     INPUT FORTRAN IV PROGRAM.  HOWEVER, IT WILL FLAG
*                     THE FOLLOWING ERRORS.
*                       A. DUPLICATE STATEMENT NUMBERS.
*                       B. MISSING STATEMENT NUMBERS.
*                       C. EXCESSIVE CONTINUATION STATEMENTS (19 MAX)
*              OPTIONS.
*                  1. OPTIONAL CONTROL CARD.
*
*                             COL  DESCRIPTION
*                              1    '*'
*                             2-9   PGM NAME
*                            10-13  RENUMBER INCREMENT (DEFAULT 10)
*                  2. OPTIONAL PARM FIELD.
*                        1-4 DIGIT RENUMBER INCREMENT (DEFAULT 10)  OR
*                        'XREF' PRINT STMT CROSS REFERENCE AND SUPRESS
*                               RENUMBERED OUTPUT FILE.
*
*
*              REGISTERS
*
*                   R0-R7     WORK
*                   R8        SAVE INPUT RECORD SCAN POINTER
*                   R9        INPUT RECORD SCAN POINTER
*                   R10       OUTPUT RECORD SCAN POINTER
*
*                   R11-R13   BASE AND SAVE AREAS
*                   R14-R15   WORK AND LINKAGE
*
*              REV 1 09/24/75 - TRANSLATE FORTRAN II AS FOLLOWS
*
*                   READ N,LIST    READ(5,N)LIST
*                   PUNCH N,LIST   WRITE(7,N)LIST
*                   PRINT N,LIST   WRITE(6,N)LIST
*
*              REV 2 09/25/75 - FIX BUGS
*
*                   1.   READ WITH ARRAY OR FREE FORMAT
*                        WAS IGNORED EVEN IF IT HAD END= OR ERR=
*
*                   2.   UNREFERENCED CONTINUE WILL BE MADE INTO
*                        COMMENT.
*
         TITLE 'MAINLINE'
         PM    R410PARM
         OPEN  (SYSUT1,,SYSPRINT,(OUTPUT))   OPEN PHASE ONE FILES
         USING CHAR,R9
         DTIME TIMEDATE
         PM    R110READ
         PM    R010GETR
         DO    WHILE,(CLI,EOF,TRUE,NE)       LOOP THROUGH RECORDS
               IF   (CLI,RECTYPE,FORTSTMT,EQ)
                    PM   R020ADDS
                    PM   R040SCAN
               ELSE
                    IF   (CLI,RECTYPE,FORTCTL,EQ)
                         PM   R390FCTL
                    FI
               FI
               PM   R010GETR
         OD
         PM    R050XRPT       PRINT CROSS REFERENCE REPORT
         IF    (CLI,ERRORS,TRUE,EQ),OR,(CP,RENUMINC,=P'0',Z)
               LA   R2,ERRLINE4
               PM   R130RPT
               CLOSE (SYSUT1,,SYSPRINT)      NO,CLOSE DOWN
               SUBEXIT RC=8
         ELSE
               CLOSE (SYSUT1)                     YES CLOSE, REOPEN
               OPEN  (SYSUT1,,SYSUT2,(OUTPUT))
               PM   R060REST  RESET FOR PHASE TWO
               PM   R070RNUM  ASSIGN NEW STMT NUMBERS IN TABLE
               PM   R110READ
               PM   R010GETR
               DO   WHILE,(CLI,EOF,TRUE,NE)       LOOP THROUGH AGAIN
                    IF   (CLI,RECTYPE,FORTSTMT,EQ)
                         PM   R080GETS
                         PM   R040SCAN
                    FI
                    IF   (CLI,RECTYPE,FORTCTL,NE)
                         PM   R090PUTS
                    FI
                    PM   R010GETR
               OD
               CLOSE (SYSUT1,,SYSUT2,,SYSPRINT)   CLOSE
               SUBEXIT RC=0
         FI
ERRORS   DC    AL1(FALSE)
ERRLINE4 DC    CL133'0RENUMBER OPTION SUPRESSED'
PGMBASE  DC    F'0'           CURRENT PGM BASE FOR STMT. NO.
PGMLMT   DC    F'100000'      STMT NUMBER RANGE
         TITLE 'R010GETR - GET FORTRAN LOGICAL RECORD'
R010GETR PENTRY
         MVI   RECTYPE,INVALID
         DO    WHILE,(CLI,RECTYPE,INVALID,EQ)
               IF   (CLI,EOF,PEND,EQ)
                    MVI  EOF,TRUE
                    PEXIT
               FI
               PM   R140SREC
               PM   R110READ
               IF   (CLI,RECORD,C'C',EQ)
                    MVI  RECTYPE,FORTCOMM
                    PEXIT
               FI
               IF   (CLI,RECORD,C'*',EQ)
                    MVI  RECTYPE,FORTCTL
                    PEXIT
               FI
               IF   (TRT,RECORD(5),ALPHANUM,NE)
                    MVI  RECTYPE,SYSCTL
                    PEXIT
               FI
               IF   (CLI,RECORD+5,C' ',EQ)
                    MVI  RECTYPE,FORTSTMT
                    DO   WHILE,(CLI,EOF,FALSE,EQ),                     X
               AND,(CLC,ARECEOF,=A(RECEOF),L),                         X
               AND,(CLI,BUFFER,C'C',NE),                               X
               AND,(CLI,BUFFER,C'*',NE),                               X
               AND,(TRT,BUFFER(5),ALPHANUM,EQ),                        X
               AND,(CLI,BUFFER+5,C' ',NE)
                         PM   R150AREC
                         PM   R110READ
                    OD
                    PEXIT
               FI
               MVC  ERRDL1,RECORD
               EDIT TO=ERRDLN1,FROM=RECNUM,MASK='0ZZZZZ'
               LA   R2,ERRLINE1
               PM   R130RPT
               MVI  ERRORS,TRUE
         OD
         PEXIT
FORTSTMT EQU   0
FORTCOMM EQU   1
FORTCTL  EQU   2
INVALID  EQU   3
SYSCTL   EQU   4
RECTYPE  DC    AL1(INVALID)
         TITLE 'R020 - ADD STMT NO. TO TABLE'
R020ADDS PENTRY
         PM    R400GSN
         IF    (LTR,R0,R1,Z)
               PEXIT
         FI
         PERFORM R160GETB,R169EXIT
         USING SCB,R1
         IF    (CLC,SCBLN,=XL4'00',NE)
         THEN  BEGIN
               MVC  ERRDL2,RECORD
               EDIT TO=ERRDLN2,FROM=RECNUM,MASK='0ZZZZZ'
               LA   R2,ERRLINE2
               PERFORM R130RPT,R139EXIT
               MVI  ERRORS,TRUE
         THEN  END
         ELSE  BEGIN
               CVB  R0,FORTLINE
               ST   R0,SCBLN
               LR   R0,R1
               L    R1,LASTSCB
               ST   R0,SCBNEXT
               ST   R0,LASTSCB
         ELSE  END
R029EXIT PEXIT
         DROP  R1
FIRSTSCB DC    A(0)
LASTSCB  DC    A(FIRSTSCB-(SCBNEXT-SCB))
         TITLE 'R030GETC - GET NEXT NON-BLANK CHAR'
R030GETC PENTRY
         AAI   R9,1
         IF    (CLI,0(R9),C' ',EQ)
         THEN  BEGIN
               DO   WHILE,(TRT,0(256,R9),SKIPBLK,EQ)
                    AAI  R9,256
               DO   END
               LA   R9,0(R1)
         THEN  END
         ELSE  CONTINUE
R039EXIT PEXIT
SKIPBLK  DC    64X'FF',X'00',191X'FF'
         TITLE 'R040SCAN - DECODE STMT TYPE AND PERFORM SCAN'
R040SCAN PENTRY
     LA  R9,RECORD+5
     MVI RESCAN,TRUE
     DO  WHILE,(CLI,RESCAN,TRUE,EQ)
       MVI  RESCAN,FALSE
       PM  R030GETC
       DOCASE CHAR
         CASE C'A'
         LA    R0,5
         LA    R1,=C'SSIGN'
         PERFORM R170COMP,R179EXIT
         IF    (CLI,KEYWORD,TRUE,EQ)
               PERFORM R180ASSN,R189EXIT
         ELSE  CONTINUE
         ESAC
               CASE C'C'
                    LA   R0,7
                    LA   R1,=C'ONTINUE'
                    PM   R170COMP
                    IF   (CLI,KEYWORD,TRUE,EQ)
                         PM   R030GETC
                         IF   (CLI,CHAR,EOR,EQ)
                              IF   (CLC,RECORD(5),=5C' ',EQ)
                                   MVI  RECORD,C'C'
                              FI
                         FI
                    FI
               ESAC
         CASE  C'D'
         PERFORM R030GETC,R039EXIT
         IF    (CLI,CHAR,C'O',EQ)
               PERFORM R190DO,R199EXIT
         ELSE  CONTINUE
         ESAC
         CASE  C'E'
         LA    R0,2
         LA    R1,=C'ND'
         PM    R170COMP
         IF    (CLI,KEYWORD,TRUE,EQ)
               PM   R030GETC
               IF   (CLI,CHAR,EOR,EQ)
                    PM   R045END
               FI
         FI
         ESAC
         CASE  C'G'
         LA    R0,3
         LA    R1,=C'OTO'
         PERFORM R170COMP,R179EXIT
         IF    (CLI,KEYWORD,TRUE,EQ)
               PERFORM R200GOTO,R209EXIT
         ELSE  CONTINUE
         ESAC
         CASE  C'I'
         PERFORM R030GETC,R039EXIT
         IF    (CLI,CHAR,C'F',EQ)
               PERFORM R210IF,R219EXIT
         ELSE  CONTINUE
         ESAC
               CASE C'P'
                    PM   R030GETC
                    IF   (CLI,CHAR,C'U',EQ)
                         LA   R0,3
                         LA   R1,=C'NCH'
                         PM   R170COMP
                         IF   (CLI,KEYWORD,TRUE,EQ)
                              PM   R420PNCH
                         FI
                    ELSE
                         IF   (CLI,CHAR,C'R',EQ)
                              LA   R0,3
                              LA   R1,=C'INT'
                              PM   R170COMP
                              IF   (CLI,KEYWORD,TRUE,EQ)
                                   PM   R430PRNT
                              FI
                         FI
                    FI
               ESAC
         CASE  C'R'
         LA    R0,3
         LA    R1,=C'EAD'
         PERFORM R170COMP,R179EXIT
         IF    (CLI,KEYWORD,TRUE,EQ)
               PERFORM R220READ,R229EXIT
         ELSE  CONTINUE
         ESAC
         CASE  C'W'
         LA    R0,4
         LA    R1,=C'RITE'
         PERFORM R170COMP,R179EXIT
         IF    (CLI,KEYWORD,TRUE,EQ)
               PERFORM R230WRIT,R239EXIT
         ELSE  CONTINUE
         ESAC
       ESACOD
     OD
     PEXIT
RESCAN   DC    AL1(FALSE)
         TITLE 'R045END - PROCESS END STATEMENT AND MISSING STMT REFS'
R045END  PENTRY
      IF (CLI,MODE,PASS1,EQ)
         USING SCB,R4
         L     R3,=A(TAB)
         DO    WHILE,(CL,R3,=A(TABEND),L)
           L   R4,0(R3)
           DO  WHILE,(LTR,R4,R4,P)
               LR   R5,R4
               IF   (CLC,SCBLN,=4X'00',EQ),AND,(CLC,SCBOLDSN,PGMBASE,H)
                    LR   R0,R4               CHAIN MISSING STATEMENT #
                    L    R4,LASTSCB          SCB'S TO LIST FOR REPORT
                    ST   R0,SCBNEXT
                    ST   R0,LASTSCB
               FI
               LR   R4,R5
               L    R4,SCBDUP
           OD
           AAI R3,4
         OD
      FI
      L  R1,PGMBASE
      A  R1,PGMLMT
      ST R1,PGMBASE
         PEXIT
         TITLE 'R050XRPT - PRINT CROSS REFERENCE REPORT'
R050XRPT PENTRY
         ZR    R6
         L     R4,FIRSTSCB
         DO    WHILE,(LTR,R4,R4,P)
                    L    R0,SCBOLDSN
                    SR   R0,R6
                    DO   WHILE,(CL,R0,PGMLMT,NL)
                         S    R0,PGMLMT
                         A    R6,PGMLMT
                    OD
                    CVD  R0,PWORK
                    EDIT TO=RSTMT,FROM=PWORK+5,MASK=' ZZZZZ'
                    L    R0,SCBLN
                    CVD  R0,PWORK
                    EDIT TO=RLINE,FROM=PWORK+5,MASK=' ZZZZZ'
                    L    R5,SCBREF
                    USING RCB,R5
                 IF (LTR,R5,R5,P)
                    DO   WHILE,(LTR,R5,R5,P)
                         L    R0,RCBLN
                         CVD  R0,PWORK
                         EDIT TO=RREFL,FROM=PWORK+5,MASK=' ZZZZZ'
                         PERFORM R240XPUT,R249EXIT
                         L    R5,RCBNEXT
                    DO   END
                 ELSE
                    MVC  RREFL,=CL6' '
                    PM   R240XPUT
                 FI
                    L    R4,SCBNEXT
         DO    END
         IF    (CLC,DSTMT,=CL6' ',NE)
               MVI  RSTMT,X'FF'
               PERFORM R240XPUT,R249EXIT     FLUSH LAST LINE
         ELSE  CONTINUE
R059EXIT PEXIT
         DROP  R4
         DROP  R5
RSTMT    DC    CL6' '
RLINE    DC    CL6' '
RREFL    DC    CL6' '
         TITLE 'R060REST - RESET SWITCHES FOR RENUMBERED DECK OUTPUT'
R060REST PENTRY
         XC    PGMBASE,PGMBASE
         MVI   EOF,FALSE
         MVI   MODE,PASS2
         ZAP   RECNUM,=P'0'
R069EXIT PEXIT
PASS1    EQU   0
PASS2    EQU   1
MODE     DC    AL1(PASS1)
         TITLE 'R070RNUM - ASSIGN NEW NUMBERS'
R070RNUM PENTRY
         ZR    R3
         ZAP   PWORK,RENUMINC
         CVB   R6,PWORK
         L     R4,FIRSTSCB
         USING SCB,R4
         DO    WHILE,(LTR,R4,R4,P)
               IF   (CLC,SCBREF,=4X'00',NE)
                    DO   WHILE,(CL,R3,SCBOLDSN,L)
                         ZR   R5
                         A    R3,PGMLMT
                    OD
                    AR   R5,R6
                    IF   (CL,R5,PGMLMT,NL)        TRY TO KEEP STMT #
                         S    R5,PGMLMT           UNIQUE AND IN RANGE
                         AAI  R5,1
                    FI
                    ST   R5,SCBNEWSN
               ELSE CONTINUE
               L    R4,SCBNEXT
         DO    END
R079EXIT PEXIT
         DROP  R4
         TITLE 'R080GETS - GET STMT. NO. - DELETE IF NOT REF.'
R080GETS PENTRY
         PM    R400GSN
         IF    (LTR,R0,R1,Z)
               PEXIT
         FI
         PERFORM R160GETB,R169EXIT
         USING SCB,R1
         IF    (CLC,SCBREF,=4X'00',NE)
               L    R0,SCBNEWSN
               CVD  R0,PWORK
               EDIT TO=RSTMT,FROM=PWORK+5,MASK=' ZZZZZ'
               MVC  RECORD(5),RSTMT+1
         ELSE  BEGIN
               MVC  RECORD(5),=CL5' '
         ELSE  END
R089EXIT PEXIT
         DROP  R1
         TITLE 'R090PUTS - WRITE LOGICAL RECORD FROM SPECIFIED AREA'
R090PUTS PENTRY
         IF    (CLI,NEWREC,TRUE,EQ)
               MVI  NEWREC,FALSE
               L    R2,=A(ALTREC)
               LR   R3,R10
         ELSE  BEGIN
               LA   R2,RECORD
               L    R3,ARECEOF
         ELSE  END
         MVI   0(R3),C' '
         MVC   1(65,R3),0(R3)      PAD AREA
         MVC   OUTREC(72),0(R2)
         AAI   R2,72
         IF    (CLR,R2,R3,NL),AND,(CLC,OUTREC(72),=CL72' ',EQ)
               PEXIT
         FI
         AP    POUT,=P'1'
         EDIT  TO=OUTREC+72,FROM=POUT,MASK='0ZZZZZZZ'
         LA    R0,OUTREC
         PERFORM R120PUTR,R129EXIT
         MVC   OUTREC(5),=CL5' '
         MVI   OUTREC+5,C'*'
         DO    WHILE,(CLR,R2,R3,L)
               MVC  OUTREC+6(66),0(R2)
               AAI  R2,66
               IF   (CLR,R2,R3,NL),AND,(CLC,OUTREC+6(66),=CL66' ',EQ)
                    PEXIT
               FI
               AP   POUT,=P'1'
               EDIT TO=OUTREC+72,FROM=POUT,MASK='0ZZZZZZZ'
               LA   R0,OUTREC
               PERFORM R120PUTR,R129EXIT
         DO    END
R099EXIT PEXIT
NEWREC   DC    AL1(FALSE)
OUTREC   DC    CL80' '
POUT     DC    PL4'0'
         TITLE 'R110READ - READ STMT INTO BUFFER'
R110READ PENTRY
         GET   SYSUT1,BUFFER
         AP    RECNUM,=P'1'
         PEXIT
R110EOF  TAG
         MVI   EOF,PEND
R119EXIT PEXIT
SYSUT1   SDCB  M=GM,R=FB,L=80,E=R110EOF
BUFFER   DC    CL80' '
FALSE    EQU   0
PEND     EQU   1
TRUE     EQU   2
EOF      DC    AL1(FALSE)
RECNUM   DC    PL3'0'
         TITLE 'R120PUTR - PUT STMT FROM ADDR'
R120PUTR PENTRY
         PUT   SYSUT2
R129EXIT PEXIT
SYSUT2   SDCB  M=PM,R=FB,L=80
         TITLE 'R130RPT - REPORT LINE DRIVER'
R130RPT  PENTRY
         IF    (SP,LINE,=P'1',NP)
               ZAP  LINE,MAXLINE
               AP   PAGE,=P'1'
               EDIT TO=DPAGE,FROM=PAGE,MASK=' ZZZ'
               LA   R0,HEAD1
               PERFORM R260PUTL,R269EXIT
               LA   R0,HEAD2
               PERFORM R260PUTL,R269EXIT
               LA   R0,SPACE
               PERFORM R260PUTL,R269EXIT
         ELSE  CONTINUE
         LR    R0,R2
         PERFORM R260PUTL,R269EXIT
R139EXIT PEXIT
LINE     DC    PL2'0'
MAXLINE  DC    PL2'55'
PAGE     DC    PL2'0'
HEAD1    DS    0CL133
         DC    C'1FPC FORTRAN STATEMENT CROSS REFERENCE AND RENUMBER'
         DC    C' REPORT '
PGMNAME  DC    CL8' '
TIMEDATE DC    CL22' ',C'  PAGE'
DPAGE    DC    CL4' '
         FILL  HEAD1
HEAD2    DS    0CL133
         DC    C'0STATEMENT ',20C'  LINE'
         FILL  HEAD2
SPACE    DC    CL133' '
ERRLINE1 DS    0CL133
         DC    C' TOO MANY CONTINUATIONS - RECORD SKIPPED '
ERRDL1   DC    CL80' '
ERRDLN1  DC    CL6' '
         FILL  ERRLINE1
ERRLINE2 DS    0CL133
         DC    C' DUPLICATE STATEMENT NUMBER - IGNORED    '
ERRDL2   DC    CL80' '
ERRDLN2  DC    CL6' '
         FILL  ERRLINE2
         TITLE 'R140SREC - SETUP FOR BUILDING LOGICAL RECORD'
R140SREC PENTRY
         ZAP   FORTLINE,RECNUM
         MVC   RECORD(72),BUFFER
         LA    R1,RECORD+72
         MVI   0(R1),EOR
         ST    R1,ARECEOF
R149EXIT PEXIT
EOR      EQU   X'FF'
ARECEOF  DC    A(0)
FORTLINE DC    0D'0',PL8'0'
         TITLE 'R150AREC - ADD PHYSICAL RECORD TO LOGICAL RECORD'
R150AREC PENTRY
         L     R1,ARECEOF
         MVC   0(66,R1),BUFFER+6
         AAI   R1,66
         MVI   0(R1),EOR
         ST    R1,ARECEOF
         PEXIT
         TITLE 'R160GETB - GET STMT CONTROL BLOCK'
*
*  INPUT - R0 = STATEMENT NUMBER
*
* OUTPUT - R1 = ADDRESS OF SCB FOR EXISTING OR NEW SCB.
*
R160GETB PENTRY
         A     R0,PGMBASE
         LR    R2,R0               SAVE STMT NO.
         LR    R1,R0
         ZR    R0
         D     R0,TBASE
         SLL   R0,2
         LR    R3,R0
         A     R3,=A(TAB)
         L     R1,0(R3)
         USING SCB,R1
         DO    WHILE,(LTR,R1,R1,P)
               IF   (CL,R2,SCBOLDSN,EQ)
                    PEXIT
               FI
               LR   R3,R1
               L    R1,SCBDUP
         OD
         LA    R0,LSCB
         PM    R250GETM
         XC    SCB(LSCB),SCB
         ST    R2,SCBOLDSN
         ST    R1,0(R3)
         DROP  R1
         PEXIT
         TITLE 'R170COMP - COMPARE FOR KEYWORD'
R170COMP PENTRY
         MVI   KEYWORD,FALSE
         LR    R15,R1
         DO    WHILE,(LTR,R0,R0,P)
               PERFORM R030GETC,R039EXIT
         IF    (CLC,0(1,R15),CHAR,NE)
                    PEXIT
               ELSE CONTINUE
         AAI   R15,1
               SH   R0,=H'1'
         DO    END
         MVI   KEYWORD,TRUE
R179EXIT PEXIT
KEYWORD  DC    AL1(FALSE)
         TITLE 'R180ASSN - PROCESS ASSIGN STMT'
R180ASSN PENTRY
         LR    R8,R9
         PERFORM R270GETN,R279EXIT
         IF    (LTR,R1,R1,P),AND,(CLI,CHAR,C'T',EQ)
               ST   R1,SAVEN
               PERFORM R030GETC,R039EXIT
               IF   (CLI,CHAR,C'O',EQ)
                 IF (CLI,MODE,PASS2,EQ)
                    LR   R9,R8
                    PERFORM R290CPYT,R299EXIT
                    PERFORM R270GETN,R279EXIT
                    PERFORM R280ADDN,R289EXIT
                    PERFORM R300CPYF,R309EXIT
                 ELSE BEGIN
                    L    R1,SAVEN
                    PERFORM R320ADDR,R329EXIT
                 ELSE END
               ELSE CONTINUE
         ELSE  CONTINUE
R189EXIT PEXIT
SAVEN    DC    F'0'
         TITLE 'R190DO - PROCESS DO STATEMENT'
R190DO   PENTRY
         LR    R8,R9
         PERFORM R270GETN,R279EXIT
         IF    (LTR,R1,R1,P),AND,(TRT,CHAR,ALPHANUM,EQ)
               ST   R1,SAVEN
               PERFORM R310SKPA,R319EXIT
               IF   (CLI,CHAR,C'=',EQ)
                    PERFORM R310SKPA,R319EXIT
                    IF   (CLI,CHAR,C',',EQ)
                         IF   (CLI,MODE,PASS2,EQ)
                         THEN BEGIN
                              LR   R9,R8
                              PERFORM R290CPYT,R299EXIT
                              PERFORM R270GETN,R279EXIT
                              PERFORM R280ADDN,R289EXIT
                              PERFORM R300CPYF,R309EXIT
                         THEN END
                         ELSE BEGIN
                              L    R1,SAVEN
                              PERFORM R320ADDR,R329EXIT
                         ELSE END
                    ELSE CONTINUE
               ELSE CONTINUE
         ELSE  CONTINUE
R199EXIT PEXIT
         TITLE 'R200GOTO - PROCESS ALL TYPES OF GO TO STATEMENTS'
R200GOTO PENTRY
         LR    R8,R9
         PERFORM R270GETN,R279EXIT
         IF    (LTR,R1,R1,P),AND,(CLI,CHAR,EOR,EQ)
         THEN  BEGIN                                   GO TO N
               LR   R9,R8
               IF   (CLI,MODE,PASS2,EQ)
               THEN BEGIN
                    PERFORM R290CPYT,R299EXIT
                    PERFORM R270GETN,R279EXIT
                    PERFORM R280ADDN,R289EXIT
                    PERFORM R300CPYF,R309EXIT
               THEN END
               ELSE BEGIN
                    PERFORM R320ADDR,R329EXIT
               ELSE END
         THEN  END
         ELSE  BEGIN
               LR   R9,R8
               PERFORM R030GETC,R039EXIT
               IF   (CLI,CHAR,C'(',EQ)
               THEN BEGIN                    GO TO (N1,N2,,, ),I
                    LR   R8,R9
                    PERFORM R270GETN,R279EXIT
                    DO   WHILE,(LTR,R1,R1,P),AND,(CLI,CHAR,C',',EQ)
                         PERFORM R270GETN,R279EXIT
                    DO   END
                    IF   (LTR,R1,R1,P),AND,(CLI,CHAR,C')',EQ)
                         PERFORM R030GETC,R039EXIT
                         IF   (CLI,CHAR,C',',EQ)
                              PERFORM R340GLST,R349EXIT
                         ELSE CONTINUE
                    ELSE CONTINUE
               THEN END
               ELSE BEGIN                    GO TO M,(N1,N2,,, )
                    IF   (TRT,CHAR,ALPHANUM,EQ),AND,(CLI,CHAR,C'0',L)
                         PERFORM R310SKPA,R319EXIT
                         IF   (CLI,CHAR,C',',EQ)
                              PERFORM R030GETC,R039EXIT
                              IF   (CLI,CHAR,C'(',EQ)
                                   LR   R8,R9
                                   PERFORM R270GETN,R279EXIT
                                   DO   WHILE,(LTR,R1,R1,P),AND,       X
               (CLI,CHAR,C',',EQ)
                                        PERFORM R270GETN,R279EXIT
                                   DO   END
                                   IF   (LTR,R1,R1,P),AND,             X
               (CLI,CHAR,C')',EQ)
                                        PERFORM R340GLST,R349EXIT
                                   ELSE CONTINUE
                              ELSE CONTINUE
                         ELSE CONTINUE
                    ELSE CONTINUE
               ELSE END
         ELSE  END
R209EXIT PEXIT
         TITLE 'R210IF - PROCESS IF STATEMENT'
R210IF   PENTRY
         PERFORM R350FIND,R359EXIT
         IF    (CLI,CHAR,C')',EQ)
               LR   R8,R9
               PERFORM R270GETN,R279EXIT
               IF   (LTR,R1,R1,P),AND,(CLI,CHAR,C',',EQ)
               THEN BEGIN                         IF(TEST)N1,N2,N3
                    PERFORM R270GETN,R279EXIT
                    IF   (LTR,R1,R1,P),AND,(CLI,CHAR,C',',EQ)
                         PERFORM R270GETN,R279EXIT
                         IF   (LTR,R1,R1,P),AND,(CLI,CHAR,EOR,EQ)
                              LR   R9,R8
                              IF   (CLI,MODE,PASS2,EQ)
                              THEN BEGIN
                                   PERFORM R290CPYT,R299EXIT
                                   PERFORM R270GETN,R279EXIT
                                   PERFORM R280ADDN,R289EXIT
                                   DO   WHILE,(CLI,CHAR,C',',EQ)
                                        PERFORM R330ADDC,R339EXIT
                                        PERFORM R270GETN,R279EXIT
                                        PERFORM R280ADDN,R289EXIT
                                   DO   END
                                   PERFORM R300CPYF,R309EXIT
                              THEN END
                              ELSE BEGIN
                                   PERFORM R270GETN,R279EXIT
                                   PERFORM R320ADDR,R329EXIT
                                   DO   WHILE,(CLI,CHAR,C',',EQ)
                                        PERFORM R270GETN,R279EXIT
                                        PERFORM R320ADDR,R329EXIT
                                   DO   END
                              ELSE END
                         ELSE CONTINUE
                    ELSE CONTINUE
               THEN END
               ELSE BEGIN                         IF(TEST=TRUE) STMT
                    LR   R9,R8
                    MVI  RESCAN,TRUE
               ELSE END
         ELSE  CONTINUE
R219EXIT PEXIT
         TITLE 'R220READ - PROCESS READ STMT'
R220READ PENTRY
         LR    R8,R9
         PM    R270GETN
         IF    (LTR,R1,R1,P)
               IF   (CLI,CHAR,C',',EQ),OR,(CLI,CHAR,EOR,EQ)
                    LM   R0,R1,=A(READN,L'READN)
                    PM   R440TRAN
                    L    R8,PREADN
               FI
         FI
         LR    R9,R8
         PERFORM R030GETC,R039EXIT
         IF    (CLI,CHAR,C'(',EQ)
               PERFORM R310SKPA,R319EXIT
               IF   (CLI,CHAR,QUOTE,EQ)
                    PERFORM R310SKPA,R319EXIT
               ELSE CONTINUE
               IF   (CLI,CHAR,C',',EQ)
                    LR   R8,R9
                    PERFORM R270GETN,R279EXIT
                    IF   (LTR,R1,R1,P)
                         IF   (CLI,CHAR,C')',EQ)
                              PERFORM R030GETC,R039EXIT
                              IF   (CLI,CHAR,C'=',NE)
                                   PERFORM R360RWOK,R369EXIT
                              FI
                         FI
                    ELSE
                         LR   R9,R8
                    FI
                    IF   (CLI,CHAR,C',',EQ)
                         PERFORM R370ROPT,R379EXIT
                         IF   (CLI,CHAR,C')',EQ)
                              PERFORM R360RWOK,R369EXIT
                         FI
                    FI
               FI
         FI
R229EXIT PEXIT
         TITLE 'R230WRIT - PROCESS WRITE STMT'
R230WRIT PENTRY
         PERFORM R030GETC,R039EXIT
         IF    (CLI,CHAR,C'(',EQ)
               PERFORM R310SKPA,R319EXIT
               IF   (CLI,CHAR,QUOTE,EQ)
                    PERFORM R310SKPA,R319EXIT
               ELSE CONTINUE
               IF   (CLI,CHAR,C',',EQ)
                    LR   R8,R9
                    PERFORM R270GETN,R279EXIT
                    IF   (LTR,R1,R1,P),AND,(CLI,CHAR,C')',EQ)
                         PERFORM R030GETC,R039EXIT
                         IF   (CLI,CHAR,C'=',NE)
                              PERFORM R360RWOK,R369EXIT
                         ELSE CONTINUE
                    ELSE CONTINUE
               ELSE CONTINUE
         ELSE  CONTINUE
R239EXIT PEXIT
         TITLE 'R240XPUT - CROSS REFERENCE REPORT LINE DRIVER'
R240XPUT PENTRY
         IF    (CLC,RSTMT,DSTMT,NE),OR,(CLC,DREFADDR,DREFMAX,NL)
               IF   (CLC,DSTMT,=XL6'00',NE)
                    LA   R2,XREFLINE
                    PERFORM R130RPT,R139EXIT
               ELSE CONTINUE
               MVC  XREFLINE,SPACE
               MVC  DSTMT,RSTMT
               MVC  DLINE,RLINE
               MVC  DREFADDR,=A(DREFAREA)
         ELSE  CONTINUE
         L     R1,DREFADDR
         MVC   0(6,R1),RREFL
         AAI   R1,6
         ST    R1,DREFADDR
R249EXIT PEXIT
XREFLINE DS    0CL133
         DC    C' ',3C' '
DSTMT    DC    XL6'00'
DLINE    DC    CL6' '
DREFAREA DC    19CL6' '
DREFEND  EQU   *
         FILL  XREFLINE
DREFADDR DC    A(DREFAREA)
DREFMAX  DC    A(DREFEND)
         TITLE 'R250GETM - GET CORE FOR STMT OR REF BLOCK'
R250GETM PENTRY
         LM    R14,R15,GETMCTL
         IF    (SR,R15,R0,NP)
               ST   R0,GETMARG
               LA   R0,GETMBLK
               GETMAIN R,LV=(0)
               LR   R14,R1
               LA   R15,GETMBLK
               L    R0,GETMARG
               SR   R15,R0
         ELSE  CONTINUE
         LR    R1,R14
         AR    R14,R0
         STM   R14,R15,GETMCTL
R259EXIT PEXIT
GETMCTL  DC    A(0,0)
GETMARG  DC    A(0)
GETMBLK  EQU   4000
         TITLE 'R260PUTL - PRINT A LINE'
R260PUTL PENTRY
         PUT   SYSPRINT
R269EXIT PEXIT
         PRINT GEN
SYSPRINT SDCB
         PRINT NOGEN
         TITLE 'R270GETN - GET FORTRAN SOURCE NUMBER IN R1'
R270GETN PENTRY
         ZR    R15
         ZR    R14
         PERFORM R030GETC,R039EXIT
         DO    WHILE,(TRT,CHAR,NUMERIC,EQ)
               MH   R15,=H'10'
               IC   R14,CHAR
               SH   R14,=H'240'
               AR   R15,R14
               PM   R030GETC
         DO    END
         LR    R1,R15
R279EXIT PEXIT
NUMERIC  DC    240X'FF',10X'00',6X'FF'
         TITLE 'R280ADDN - ADD NEW NUMBER TO NEW RECORD'
R280ADDN PENTRY
         LR    R0,R1
         PERFORM R160GETB,R169EXIT
         USING SCB,R1
         L     R1,SCBNEWSN
         DROP  R1
         CVD   R1,PWORK
         EDIT  TO=DWORK,FROM=PWORK+5,MASK=' ZZZZZ'
         MVI   0(R10),C' '
         LA    R1,DWORK
         DO    WHILE,(CLI,0(R1),X'FF',NE)
               IF   (CLI,0(R1),C' ',NE)
                    AAI  R10,1
                    MVC  0(1,R10),0(R1)
               ELSE CONTINUE
               AAI  R1,1
         DO    END
         MVI   1(R10),C' '
         AAI   R10,2
R289EXIT PEXIT
DWORK    DC    CL6' ',X'FF'
         TITLE 'R290CPYT - COPY OLD RECORD TO NEW RECORD UP TO (R9)'
R290CPYT PENTRY
         MVI   NEWREC,TRUE
         LR    R15,R9
         L     R14,=A(RECORD)
         SR    R15,R14
         L     R0,=A(ALTREC)
         LR    R10,R0
         AAI   R15,1               SET ALT REC PTR
         AR    R10,R15             TO END PLUS 1
         LR    R1,R15
         MVCL  R0,R14              MOVE FROM REC TO ALT.
R299EXIT PEXIT
         TITLE 'R300CPYF - COPY REMAINDER OF OLD RECORD'
R300CPYF PENTRY
         LR    R0,R10
         L     R1,ARECEOF
         SR    R1,R9
         LR    R14,R9
         AR    R10,R1         SET ALT REC PTR
         LR    R15,R1
         MVCL  R0,R14
R309EXIT PEXIT
         TITLE 'R310SKPA - SKIP ALPHA-NUMERIC AND BLANK CHARACTERS'
R310SKPA PENTRY
         AAI   R9,1
         LR    R1,R9
         DO    WHILE,(TRT,0(256,R9),ALPHANUM,EQ)
               AAI  R9,256
         DO    END
         LR    R9,R1
R319EXIT PEXIT
ALPHANUM DC    64X'FF',X'00',128X'FF',9X'00',7X'FF',9X'00',8X'FF'
         DC    8X'00',6X'FF',10X'00',6X'FF'
         ORG   ALPHANUM+C'$'       INCLUDE $ AS ALPHA FOR IBM FORTRAN
         DC    X'00'
         ORG
         TITLE 'R320ADDR - ADD REFERENCE TO STMT CONTROL BLOCK'
R320ADDR PENTRY
         LR    R0,R1
         PERFORM R160GETB,R169EXIT
         LR    R2,R1
         LA    R0,LRCB
         USING SCB,R2
         USING RCB,R1
         PERFORM R250GETM,R259EXIT
         L     R0,SCBREF
         ST    R0,RCBNEXT
         ST    R1,SCBREF
         CVB   R0,FORTLINE
         ST    R0,RCBLN
         DROP  R2
         DROP  R1
R329EXIT PEXIT
         TITLE 'R330ADDC - ADD COMMA TO NEW REC'
R330ADDC PENTRY
         MVI   0(R10),C','
         AAI   R10,1
R339EXIT PEXIT
         TITLE 'R340GLST - PROCESS VALIDATED GO TO LIST'
R340GLST PENTRY
         LR    R9,R8
         IF    (CLI,MODE,PASS2,EQ)
         THEN  BEGIN
               PERFORM R290CPYT,R299EXIT
               PERFORM R270GETN,R279EXIT
               PERFORM R280ADDN,R289EXIT
               DO   WHILE,(CLI,CHAR,C',',EQ)
                    PERFORM R330ADDC,R339EXIT
                    PERFORM R270GETN,R279EXIT
                    PERFORM R280ADDN,R289EXIT
               DO   END
               PERFORM R300CPYF,R309EXIT
         THEN  END
         ELSE  BEGIN
               PERFORM R270GETN,R279EXIT
               PERFORM R320ADDR,R329EXIT
               DO   WHILE,(CLI,CHAR,C',',EQ)
                    PERFORM R270GETN,R279EXIT
                    PERFORM R320ADDR,R329EXIT
               DO   END
         ELSE  END
R349EXIT PEXIT
         TITLE 'R350FIND - SCAN IF STMT TO FIND ) AT END OF TEST'
R350FIND PENTRY
         PM    R030GETC
         IF    (CLI,CHAR,C'(',NE)
               PEXIT
         FI
         LI    R3,1
         PERFORM R270GETN,R279EXIT
         DO    WHILE,(LTR,R3,R3,P)
               IF   (LTR,R1,R1,P),AND,(CLI,CHAR,C'H',EQ)
               THEN BEGIN                         WH LITERAL CONSTANT
                    LA   R9,1(R1,R9)
                    IF   (CL,R9,ARECEOF,H)
                         L    R9,ARECEOF
                    ELSE CONTINUE
               THEN END
               ELSE BEGIN
                    DO   WHILE,(CLI,CHAR,QUOTE,EQ)
                         AAI  R9,1
                         LR   R1,R9
                         DO   WHILE,(TRT,0(256,R9),SKIPQ,EQ)
                              AAI  R9,256
                         DO   END
                         LR   R9,R1
                         IF   (CL,R9,ARECEOF,L)
                              PERFORM R030GETC,R039EXIT
                         ELSE CONTINUE
                    DO   END
               ELSE END
               LR   R1,R9
               DO   WHILE,(TRT,0(256,R9),SKIPC,EQ)
                    AAI  R9,256
               DO   END
               LR   R9,R1
               IF   (CLI,CHAR,EOR,EQ)
               THEN BEGIN
                    PEXIT
               THEN END
               ELSE BEGIN
                    IF   (CLI,CHAR,C'(',EQ)
                    THEN BEGIN
                         AAI  R3,1
                    THEN END
                    ELSE BEGIN
                         IF   (CLI,CHAR,C')',EQ)
                              IF   (SH,R3,=H'1',Z)
                                   PEXIT
                              ELSE CONTINUE
                         ELSE CONTINUE
                    ELSE END
                    PERFORM R270GETN,R279EXIT
               ELSE END
         DO    END
R359EXIT PEXIT
QUOTE    EQU   X'7D'
SKIPQ    DC    255X'00',X'FF'
         ORG   SKIPQ+QUOTE
         DC    AL1(QUOTE)
         ORG
SKIPC    DC    255X'00',X'FF'
         ORG   SKIPC+X'4D'    (
         DC    X'4D'
         ORG   SKIPC+X'5D'    )
         DC    X'5D'
         ORG   SKIPC+X'6B'    ,
         DC    X'6B'
         ORG
         TITLE 'R360RWOK - PROCESS VALID READ OR WRITE'
R360RWOK PENTRY
         LR    R9,R8
         IF    (CLI,MODE,PASS2,EQ)
               PERFORM R290CPYT,R299EXIT
               PERFORM R270GETN,R279EXIT
               IF   (LTR,R1,R1,P)
                    PERFORM R280ADDN,R289EXIT
                    IF   (CLI,CHAR,C',',EQ)
                         PERFORM R330ADDC,R339EXIT
                    ELSE CONTINUE
               ELSE BEGIN
                    LR   R9,R8
               ELSE END
               DO   WHILE,(CLI,CHAR,C')',NE)
                    DO   WHILE,(CLI,CHAR,C'=',NE)
                         PERFORM R030GETC,R039EXIT
                         PERFORM R380CPYC,R389EXIT
                    DO   END
                    PERFORM R270GETN,R279EXIT
                    PERFORM R280ADDN,R289EXIT
                    IF   (CLI,CHAR,C',',EQ)
                         PERFORM R330ADDC,R339EXIT
                    ELSE CONTINUE
               DO   END
               PERFORM R300CPYF,R309EXIT
         ELSE  BEGIN
               PERFORM R270GETN,R279EXIT
               IF   (LTR,R1,R1,P)
                    PERFORM R320ADDR,R329EXIT
               ELSE
                    LR   R9,R8
               FI
               DO   WHILE,(CLI,CHAR,C')',NE)
                    PERFORM R310SKPA,R319EXIT
                    IF   (CLI,CHAR,C'=',EQ)
                         PM   R270GETN
                         PM   R320ADDR
                    FI
               OD
         FI
R369EXIT PEXIT
         TITLE 'R370ROPT - VERIFY READ STMT OPTIONS END AND ERR'
R370ROPT PENTRY
         DO    WHILE,(CLI,CHAR,C',',EQ)
               PERFORM R030GETC,R039EXIT
               IF   (CLI,CHAR,C'E',EQ)
                    LR   R3,R9
                    LA   R0,3
                    LA   R1,=C'ND='
                    PERFORM R170COMP,R179EXIT
                    IF   (CLI,KEYWORD,TRUE,EQ)
                         PERFORM R270GETN,R279EXIT
                         IF   (LTR,R1,R1,Z)
                              L    R9,ARECEOF     ABORT STMT
                         ELSE CONTINUE
                    ELSE BEGIN
                         LR   R9,R3
                         LA   R0,3
                         LA   R1,=C'RR='
                         PERFORM R170COMP,R179EXIT
                         IF   (CLI,KEYWORD,TRUE,EQ)
                              PERFORM R270GETN,R279EXIT
                              IF   (LTR,R1,R1,Z)
                                   L    R9,ARECEOF ABORT STMT
                              FI
                         FI
                    FI
               ELSE
                    IF   (CLI,CHAR,C'*',EQ)
                         PM   R030GETC       SKIP FREE FORMAT
                    ELSE
                         IF   (CLI,CHAR,C')',NE)
                              PM   R310SKPA  SKIP ARRAY FORMAT
                         FI
                    FI
               FI
         OD
R379EXIT PEXIT
         TITLE 'R380CPYC - COPY 1 CHARACTER TO NEW REC'
R380CPYC PENTRY
         MVC   0(1,R10),0(R9)
         AAI   R10,1
R389EXIT PEXIT
         TITLE 'R390FCTL - PROCESS CONTROL CARD'
R390FCTL PENTRY
         MVC   PGMNAME,RECORD+1
         PACK  RENUMINC,RECORD+9(4)
         OI    RENUMINC+2,X'0F'
         PEXIT
RENUMINC DC    PL3'10'
         TITLE 'R400GSN - GET STMT # IN COL. 1-5'
R400GSN  PENTRY
         LA    R9,RECORD-1
         MVI   RECORD+5,EOR
         PM    R270GETN
         MVI   RECORD+5,C' '
         PEXIT
         TITLE 'R410PARM - PROCESS PARM FIELD'
R410PARM PENTRY
         L     R1,0(R1)
         LH    R2,0(R1)
         IF    (LTR,R2,R2,Z),OR,(CH,R2,=H'4',P)
               PEXIT
         FI
         BCTR  R2,0
         IF    (EX,R2,CLCXREF,EQ)
               ZAP  RENUMINC,=P'0'
               PEXIT
         FI
         IF    (EX,R2,TRTINC,EQ)
               EX   R2,PACKINC
         FI
         PEXIT
CLCXREF  CLC   2(0,R1),=C'XREF'
TRTINC   TRT   2(0,R1),NUMERIC
PACKINC  PACK  RENUMINC,2(0,R1)
         TITLE 'R420PNCH - TRANSLATE PUNCH'
R420PNCH PENTRY
         LR    R8,R9
         PM    R270GETN
         IF    (LTR,R1,R1,P)
               IF   (CLI,CHAR,C',',EQ),OR,(CLI,CHAR,EOR,EQ)
               LM   R0,R1,=A(PUNCHN,L'PUNCHN)
               PM   R440TRAN
               L    R8,PPUNCHN
               PM   R360RWOK
               FI
         FI
         PEXIT
         TITLE 'R430PRNT - TRANSLATE PRINT'
R430PRNT PENTRY
         LR    R8,R9
         PM    R270GETN
         IF    (LTR,R1,R1,P)
               IF   (CLI,CHAR,C',',EQ),OR,(CLI,CHAR,EOR,EQ)
               LM   R0,R1,=A(WRITEN,L'WRITEN)
               PM   R440TRAN
               L    R8,PWRITEN
               PM   R360RWOK
               FI
         FI
         PEXIT
         TITLE 'R440TRAN - TRANSLATE READ N, PUNCH N, PRINT N'
R440TRAN PENTRY
         LM    R14,R15,=A(ALTREC,6)
         LM    R2,R3,=A(RECORD,6)
         MVCL  R14,R2         MOVE STMT#
         LR    R15,R1
         MVCL  R14,R0         MOVE READ(U, OR WRITE(U,
         LA    R0,1(R8)
         L     R1,ARECEOF
         IF    (CLR,R1,R9,EQ)      IF NOT LIST, MAKE FROM FOR )
               AAI  R1,1
         FI
         SR    R1,R0
         LR    R15,R1
         MVI   CHAR,C')'      CHANGE N, TO N)
         MVCL  R14,R0         MOVE N)LIST
         L     R0,=A(ALTREC)
         SR    R14,R0
         LR    R1,R14
         L     R14,=A(RECORD)
         LR    R15,R1
         MVCL  R14,R0         MOVE TRANSLATED STMT BACK TO RECORD
         MVI   0(R14),EOR
         ST    R14,ARECEOF
         PEXIT
READN    DC    C'READ(5,'
PREADN   DC    A(RECORD+6+3)
PUNCHN   DC    C'WRITE(7,'
PPUNCHN  DC    A(RECORD+6+L'PUNCHN-1)
WRITEN   DC    C'WRITE(6,'
PWRITEN  DC    A(RECORD+6+L'WRITEN-1)
         TITLE 'COMMON DATA'
         EQUAL
PWORK    DC    D'0'
TBASE    DC    F'997'    PRIME FOR HASHING FORTRAN STMT NO.
RECORD   DS    (72+19*66)C
RECEOF   EQU   *
         DS    CL66      PAD TO SIMPLIFY OUTPUT ROUTINE.
ALTREC   DS    (72+19*66)C
ALTEOF   EQU   *
         DS    CL200 BIG PAD TO ELIMINATE LENGTH CHECK ON RENUMBER.
TAB      DC    997F'0'   HASH TABLE
TABEND   EQU   *
         TITLE 'DSECTS'
SCB      DSECT
SCBDUP   DS    F    PTR TO SCB WITH DUPLICATE HASH KEY
SCBNEXT  DS    F    FORWARD PTR IN ASCENDING LINE # CHAIN
SCBREF   DS    F    PTR TO STMT REFERENCE BLOCK CHAIN
SCBOLDSN DS    F    OLD SOURCE STATEMENT NUMBER
SCBNEWSN DS    F    NEW SOURCE STATEMENT NUMBER
SCBLN    DS    F    LINE NUMBER OF STMT WITH STMT #
LSCB     EQU   (*-SCB)
RCB      DSECT
RCBNEXT  DS    F    FORWARD PTR IN REFERENCE BLOCK CHAIN
RCBLN    DS    F    LINE # OF STMT WHICH REFERENCES SCB STMT #
LRCB     EQU   (*-RCB)
CHAR     DSECT
         DS    C
         END   ER011000
