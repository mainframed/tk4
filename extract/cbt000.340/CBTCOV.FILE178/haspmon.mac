*          DATA SET TP406000   AT LEVEL 042 AS OF 05/25/77
*          DATA SET TP406000   AT LEVEL 041 AS OF 05/13/77
*          DATA SET TP406000   AT LEVEL 040 AS OF 05/08/77
*          DATA SET TP406000   AT LEVEL 039 AS OF 04/11/76
         TITLE 'TP406000 HASPMON INQUIRY SUBROUTINE'
*              DATE.     01/10/75.
*              AUTHOR.   DON HIGGINS
*              REMARKS.  PROCESS MPS HASP INQUIRIES.
*              REFERENCES.
*                  SY27-7244-0 OS/VS2 SUPERVISOR PLM
*                  GA22-7000-3 IBM/370 PRINCIPLES OF OP
*                  IEAVST00 FISCHE FOR TTIMER (5742 - SC1C5)
*
*              REV 1 01/30/76 DSH - CORRECT $DA CPU TIME CALC.
*              REV 2 03/17/76 DSH - ADD TSO DISPLAY TO $DA
*
         TITLE 'MAINLINE'
         TITLE 'HASP DEFINITIONS'
         PRINT NOGEN
         COPY $GLOBAL
         COPY $HASPGEN
         $HASPCB BUFFER,JQE,JIT,JCT,IOT,PDDB,JOE,JOT,PRC
         TITLE 'MAINLINE'
         PRINT NOGEN
HASPMON  SUBENTRY BASES=(R13,R12,R11,R10)
         LM    R3,R5,0(R1)
         SPIE  PCHKEXIT,(4)
         ST    R1,SAVEPICA
         MVC   TERM,0(R3)
         L     R5,0(R5)
         IF    (CLI,0(R4),C'$',EQ)
               ZR    R2
               IC    R2,1(R4)
               DOCASE (R2)
                     CASE C'D' DISPLAY
                          PM   $D
                     ESAC
                     CASE C'H'
                          PM   $HELP
                     ESAC
                     CASE ELSE
                          PM   $UNKNOWN
                     ESAC
               ESACOD
         ELSE
               PM    $UNKNOWN
         FI
EXITNORM L     R1,SAVEPICA
         SPIE  MF=(E,(1))
         SUBEXIT
PCHKEXIT TAG
         USING *,R15
         MVC   SAVEPSW,4(R1)
         MVC   9(3,R1),=AL3(PCHKRTN)
         L     R13,=A(HASPMON+8)   REESTABLISH HASPMON BASES
         LA    R12,4095(R13)
         LA    R11,4095(R12)
         LA    R10,4095(R11)
         BR    R14
         DROP  R15
         LTORG
SAVEPICA DC    A(0)
         DC    CL8'SAVE PSW'
SAVEPSW  DC    XL8'00'
PCHKRTN  TAG
         TPPUTMSG TERM,'RETRY LAST MPS HASP COMMAND PLEASE'
         B     EXITNORM
         TITLE '$D - DISPLAY ROUTINE'
$D       PENTRY
         ZR    R2
         IC    R2,2(R4)
         DOCASE (R2)
               CASE C'A' DISPLAY ACTIVE JOB INFO
                    PM   $DA
               ESAC
               CASE C'D' DISPLAY DISKS
                    PM   $DD
               ESAC
               CASE C'E' DISPLAY POSSIBLE ERROR CONDITIONS
                    PM   $DE
               ESAC
               CASE C'P' DISPLAY PRINTER STATUS
                    PM   $DP
               ESAC
               CASE C'J' DISPLAY JOB STATUS
                    PM   $DJ
               ESAC
               CASE C'T' DISPLAY TAPES
                    PM   $DT
               ESAC
               CASE C'C' DISPLAY CPU, PAGING, AND I/O RATES
                    PM   $DC
               ESAC
               CASE C'L' LIST JCL FOR A JOB (MAX 10)
                    PM   $DL
               ESAC
               CASE C'W' DISPLAY WAITING JOBS AND TSO USERS
                    PM   $DW
               ESAC
               CASE C'X' DISPLAY EXCPS FOR FILES
                    PM   $DX
               ESAC
               CASE ELSE
                    PM   $UNKNOWN
               ESAC
         ESACOD
         PEXIT
         TITLE '$HELP - DISPLAY VALID HASP INQUIRIES'
$HELP    PENTRY
         TPPUTMSG TERM,'THE FOLLOWING HASP INQUIRIES ARE AVAILABLE'
         TPPUTMSG TERM,'$DA - DISPLAY ACTIVE JOB STATUS'
         TPPUTMSG TERM,'$DC - DISPLAY CPU, PAGING, AND I/O RATES'
         TPPUTMSG TERM,'$DD - DISPLAY ONLINE DISKS'
         TPPUTMSG TERM,'$DE - DISPLAY POSSIBLE ERROR CONDITIONS'
         TPPUTMSG TERM,'$DP - DISPLAY CURRENT PRINTER STATUS'
         TPPUTMSG TERM,'$DJ - DISPLAY JOB STATUS BY NAME OR HASP #'
         TPPUTMSG TERM,'$DL - DISPLAY LIST OF JCL'
         TPPUTMSG TERM,'$DT - DISPLAY ONLINE TAPES'
         TPPUTMSG TERM,'$DW - DISPLAY WAITING JOBS AND TSO USERS'
         TPPUTMSG TERM,'$DX - DISPLAY EXCPS FOR FILES'
         TPPUTMSG TERM,'THE FOLLOWING ARE STANDARD MPS COMMANDS'
         TPPUTMSG TERM,'CALL PGMNAME (,TEST)'
         TPPUTMSG TERM,'CLOSEDOWN - TERMINATE MPS NORMALLY'
         TPPUTMSG TERM,'EXEC PGMNAME (,TEST)'
         TPPUTMSG TERM,'LOG   - TURN HARDCOPY LOG ON'
         TPPUTMSG TERM,'NOLOG - TURN HARDCOPY LOG OFF'
         TPPUTMSG TERM,'STOP - TERMINATE EXEC TYPE PGM'
         PEXIT
         TITLE '$UNKNOWN -UNKNOWN REQUEST'
$UNKNOWN PENTRY
         TPPUTMSG TERM,'INVALID HASP REQUEST - TRY $HELP'
         PEXIT
         TITLE '$DP - DISPLAY CURRENT PRINTER STATUS'
$DP      PENTRY
         PM    $GETCKP
         LA    R3,$PRCRECS
         LA    R4,&NUMPRC
         MVI   ACTIVITY,FALSE
         DO    WHILE,(LTR,R4,R4,P)
               PM   $DPRC
               LA   R3,PRCSIZE(R3)
               SI   R4,1
         OD
         IF    (CLI,ACTIVITY,FALSE,EQ)
               TPPUTMSG TERM,'NO PRINTERS ACTIVE'
         FI
         PEXIT
$DPRC    PENTRY
         IF    (TM,PRCFLAGS(R3),X'80',Z)
               PEXIT
         FI
         LH    R1,PRCKJOE(R3)
         LA    R6,$JOTREC(R1)  R6=A(WORK JOE)
         USING JOEDSECT,R6
         MVI   ACTIVITY,TRUE
         L     R1,JOEJQE
         LA    R5,$JOBQUE(R1)      R5=A(JOB QUEUE ENTRY)
         LH    R1,JOECHAR
         LA    R6,$JOTREC(R1)      R6=A(CHAR JOE)
         MVC   DFORM,JOEFORM
         MVC   MTTR,QUETRAK(R5)
         SCALL HASPXDAP,(MTTR,JCTREC,&BUFSIZE)
         L     R7,=A(JCTREC)
         USING JCTJQE,R7
         MVC   DJOBNAME,JCTJNAME
         L     R1,JCTLINES
         CVD   R1,PWORK
         EDIT  TO=DTLINES,FROM=PWORK+4,MASK=' Z,ZZZ,Z99'
         L     R1,PRCLINCT(R3)
         CVD   R1,PWORK
         EDIT  TO=DCLINES,FROM=PWORK+4,MASK=' Z,ZZZ,Z99'
         TPPUTMSG TERM,$DPMSG
         PEXIT
         DROP  R6,R7
         TITLE '$GETCKP - GET CHECKPOINT DATA FROM SPOOL'
$GETCKP  PENTRY
         SCALL HASPXDAP,(CKP1MTTR,CKP1REC,CKP1LNG)
         SCALL HASPXDAP,(CKP2MTTR,CKP2REC,CKP2LNG)
         SCALL HASPXDAP,(CKP3MTTR,CKP3REC,CKP3LNG)
         PEXIT
         TITLE '$DJ - DISPLAY JOB STATUS'
$DJ      PENTRY
         PM    $GETCKP   READ CHECKPOINT INFO.
         LA    R1,3(R4)
         PM    $GETJOB
         IF    (LTR,R5,R1,Z)
               PEXIT
         FI
         IF    (TM,QUETYPE(R5),$INPUT,O)
               TPPUTMSG TERM,'JOB IS IN INPUT PHASE - NO INFO YET'
               PEXIT
         FI
         IF    (TM,QUETYPE(R5),$XEQ,O)
               IF   (TM,QUETYPE(R5),QENTBY,O)
                    MVC  $DJT,=CL4'EXEC'
               ELSE
                    MVC  $DJT,=CL4'XQUE'
               FI
         ELSE
               MVC  $DJT,=CL4'OUT'
         FI
         MVC   MTTR,QUETRAK(R5)
         SCALL HASPXDAP,(MTTR,JCTREC,&BUFSIZE)
         L     R7,=A(JCTREC)
         USING JCTJQE,R7
         MVC   $DJ#,JCTJOBEB  HASP #
         MVC   $DJN,JCTJNAME  NAME
         MVC   $DJC,JCTJCLAS
         ZR    R0
         IC    R0,QUEPRIO(R5)
         SRL   R0,4
         CVD   R0,PWORK
         EDIT  TO=$DJP,FROM=PWORK+6,MASK=' Z99'
         MVC   $DJPR,JCTPNAME
         TPPUTMSG TERM,$DJMSG
         PEXIT
         DROP  R7
         TITLE '$GETJOB - FIND JOB BY NAME OR NUMBER'
$GETJOB  PENTRY
         IF    (CLI,0(R1),C'''',EQ)
               MVC  $GETJKEY,1(R1) SET KEY TO JOBNAME (8 BYTES)
         ELSE
               ZR   R14
               ZR   R15
               DO   WHILE,(CLI,0(R1),C'0',NL)
                    IC   R15,0(R1)
                    SH   R15,=H'240'
                    MH   R14,=H'10'
                    AR   R14,R15
                    AAI  R1,1
               OD
               ST   R14,$GETJKEY
         FI
         MVC   $NEXTQUE,$JQENT
         PM    $GETJQUE
         DO    WHILE,(LTR,R1,R1,P)
               IF   (CLI,$GETJKEY,X'00',EQ)
                    IF   (CLC,QUEJOBNO(2,R1),$GETJKEY+2,EQ)
                         PEXIT
                    FI
               ELSE
                    LA   R15,$JIT       THIS CODING ASSUMES
                    LA   R14,0(R1)      JQE LTH = JIT LTH
                    S    R14,=A($JOBQUE)
                    AR   R15,R14
                    IF   (CLC,JITJNAME(8,R15),$GETJKEY,EQ)
                         PEXIT
                    FI
               FI
               PM   $GETJQUE
         OD
         TPPUTMSG TERM,'JOB NOT FOUND'
         ZR    R1
         PEXIT
         TITLE '$GETJQUE - GET NEXT ACTIVE JOB QUEUE ENTRY IN R1 OR 0'
$GETJQUE PENTRY
         L     R1,$NEXTQUE
         LA    R1,0(R1)
         IF    (LTR,R1,R1,NZ)
               S    R1,$JOBQPTR
               A    R1,=A($JOBQUE)
               MVC  $NEXTQUE,QUECHAIN(R1)
         FI
         PEXIT
         TITLE '$DL - DISPLAY LIST OF JCL FOR JOB IN XEQ'
$DL      PENTRY
         PM    $GETCKP
         LA    R1,3(R4)
         PM    $GETJOB
         IF    (LTR,R5,R1,Z)
               PEXIT
         FI
         IF    (TM,QUETYPE(R5),$XEQ,NO)
               TPPUTMSG TERM,'JOB NOT IN XQUE'
               PEXIT
         FI
         MVC   MTTR,QUETRAK(R5)
         SCALL HASPXDAP,(MTTR,JCTREC,&BUFSIZE)
         L     R7,=A(JCTREC)
         USING JCTJQE,R7
         MVC   MTTR,JCTINJCT
         SCALL HASPXDAP,(MTTR,JCTREC,&BUFSIZE)    INPUT JCT
         MVC   MTTR,JCTIOTTR
         SCALL HASPXDAP,(MTTR,JCTREC,&BUFSIZE)    INPUT IOT
         USING IOTIOT,R7
         LA    R1,IOTPDDB                         JCL PDDB
         USING PDBDSECT,R1
         MVC   MTTR,PDBMTTR
         DROP  R7,R1
         LA    R6,=X'FF'
         LA    R7,10
         DO    UNTIL,(LTR,R7,R7,Z)
               PM   $GETJCL
               IF   (LTR,R1,R1,Z)
                    PEXIT
               FI
               MVC  $DLMSG,0(R1)
               TPPUTMSG TERM,$DLMSG
               SH   R7,=H'1'
         OD
         TPPUTMSG TERM,'$DL JCL LIMIT OF 10 EXCEEDED'
         PEXIT
         TITLE '$GETJCL - GET NEXT JCL RECORD IN R1 OR 0'
$GETJCL  PENTRY
      DO FOREVER
         IF    (CLI,0(R6),X'FF',EQ)
               IF   (CLC,MTTR,=4X'00',EQ)
                    ZR   R1
                    PEXIT
               FI
               SCALL HASPXDAP,(MTTR,JCTREC,&BUFSIZE)
               L    R6,=A(JCTREC-BUFSTART+BUFDSECT)
               USING BUFDSECT,R6
               MVC  MTTR,HDBNXTRK
               LA   R6,HDBSTART
               DROP R6
         FI
         ZR    R15
         IC    R15,0(R6)
         IF    (CLI,1(R6),X'04',NH)
               LA   R1,2(R6)
               LA   R6,2(R15,R6)
               PEXIT
         FI
         LA    R6,2(R15,R6)
      OD
      PEXIT
         TITLE '$DA - DISPLAY ACTIVE'
$DA      PENTRY
         PM    $GETCKP
         LA    R1,3(R4)
         IF    (CLI,3(R4),C' ',EQ)
               PM   $DAALL
               MVC  CALLNAME,=CL8'TSO'
               PM   CALL
         ELSE
               LA   R1,3(R4)
               PM   $GETJOB
               IF   (LTR,R5,R1,Z)
                    PEXIT
               FI
               PM   $DAONE
         FI
         PEXIT
         TITLE '$DAONE - DISPLAY ONE ACTIVE JOB'
*
*              R5 = ADDRESS OF ACTIVE JOB HASP QUEUE ELEMENT
*
$DAONE   PENTRY
         IF    (TM,QUETYPE(R5),$XEQ+QENTBY,NO)
               TPPUTMSG TERM,'JOB NOT IN EXECUTION'
               PEXIT
         FI
         MVC   MTTR,QUETRAK(R5)
         SCALL HASPXDAP,(MTTR,JCTREC,&BUFSIZE)
         L     R7,=A(JCTREC)
         USING JCTJQE,R7
         MVC   $DANAME,JCTJNAME
         TIME  BIN
         S     R0,JCTXEQON
         LR    R1,R0
         ZR    R0
         D     R0,=A(100*60)  CONVERT FROM 0.01 SEC TO MIN
         CVD   R1,PWORK
         EDIT  TO=$DAREAL,FROM=PWORK+6,MASK=' Z99'
         PM    $DAOPEN
         PM    $DAGET
         MVC   DINIT,=C'XX'
         DO    WHILE,(LTR,R1,R1,NZ)
               L    R0,TCBLTC(R1)
               DO   WHILE,(LTR,R0,R0,NZ)
                    LR   R1,R0
                    L    R0,TCBLTC(R1)
               OD
               L    R2,TCBTIO(R1)
               IF   (CLC,0(7,R2),=C'HOSINIT',EQ),                      X
               AND,(CLC,8(8,R2),$DANAME,EQ)
                    MVC  DINIT+1(1),7(R2)
                    PM   EDITINIT
               FI
               IF   (LTR,R2,R2,NZ),AND,(CLC,0(8,R2),$DANAME,EQ)
                    L    R1,TCBJSTCB(R1)     GO UP TO FIRST USER TCB
                    L    R1,TCBOTC(R1)       GO UP TO INIT TCB
                    MVC  $DASTEP,8(R2)
                    PM   $DALIST
                    PEXIT
               FI
               PM   $DAGET
         OD
         MVC   $DASTEP,=CL8'OS/INIT'
         MVC   $DACPU,=CL9' UNAVAIL'
         TPPUTMSG TERM,$DAMSG
         PEXIT
         TITLE '$DAALL - DISPLAY ALL ACTIVE JOBS'
$DAALL   PENTRY
         MVC   $NEXTQUE,$JQENT
         PM    $GETJQUE
         DO    WHILE,(LTR,R5,R1,P)
               IF   (TM,QUETYPE(R5),$XEQ+QENTBY,O)
                    PM   $DAONE
               FI
               PM   $GETJQUE
         OD
         PEXIT
         TITLE 'OPEN JOB INITIATOR TCB QUEUE'
$DAOPEN  PENTRY
         L     R1,16
         L     R1,CVTHEAD(R1)
         L     R2,TCBTIO(R1)
         DO    WHILE,(LTR,R2,R2,Z) SKIP DOWN TO MS TCB
               L    R1,TCBTCB(R1)
               L    R2,TCBTIO(R1)
         OD
         IF    (CLC,0(8,R2),=CL8'MASTER',NE) VERIFY MS TCB
               TPPUTMSG TERM,'MASTER SCHEDULER TCB NOT FOUND'
               XC   $DANEXT,$DANEXT
         FI
         MVC   $DANEXT,TCBLTC(R1)
         PEXIT
         TITLE 'GET NEXT JOB INITIATOR TCB'
$DAGET   PENTRY
         L     R1,$DANEXT
         IF    (LTR,R1,R1,NZ)
               MVC  $DANEXT,TCBNTC(R1)
         FI
         PEXIT
         TITLE '$DALIST - LIST ACTIVE JOB CPU TIME'
$DALIST  PENTRY
         ST    R1,ATCB
         L     R2,TCBTIO(R1)
         MVC   DINIT+1(1),7(R2)
         PM    EDITINIT
         CALL TTIMER,(ATCB,TCBINT)
         L     R1,TCBINT
         IF    (LTR,R1,R1,NP)
               MVC  $DACPU,=CL9'UNAVAIL'
               TPPUTMSG TERM,$DAMSG
               PEXIT
         FI
         L     R2,ATCB             R2=A(INIT TCB)
         L     R2,TCBGRS+4*4(R2)   R2=A(LCT FROM R4 OF IEFSD263)
         L     R0,LCTTMWRK+4(R2)   R0= STEP CPU TIME INTERVAL
         SR    R0,R1               R0= STEP CPU TIME REMAINING IN INT
         A     R0,LCTTMWRK(R2)     ADD JOB CPU TIME USED ALREADY
         A     R0,LCTTMWRK+12(R2)  ADD STEP TIME USED ALREADY
         L     R2,ATCB
         L     R2,TCBTCT(R2)
         LM    R4,R5,TCTSTOF(R2)   SMF TIME LIMIT EXTENTIONS IN TU'S
         D     R4,=F'384'          CONVERT TO 0.01 SEC
         AR    R0,R5               ADD TO JOB AND STEP CPU TIME
         CVD   R0,PWORK
         EDIT  TO=$DACPU,FROM=PWORK+4,MASK=' ZZZ99.99'
         TPPUTMSG TERM,$DAMSG
         PEXIT
TCBGRS   EQU   X'30' FE PG 289
LCTTMWRK EQU   X'50' SEE LCT DSECT IN IEFSD263 (5742-SC1B6) FRAME B9
TCBTCT   EQU   164  FE 291
TCTSTOF  EQU   36   SYS DATA AREAS 228
         TITLE 'EDITINIT - CONVERT OS INIT LETTER TO HASP INIT #'
EDITINIT PENTRY
         IF    (CLI,DINIT+1,C'I',NH)
               MVI  DINIT,C' '
               OI   DINIT+1,C'0'
         ELSE
               MVI  DINIT,C'1'
               ZR   R0
               IC   R0,DINIT+1
               SI   R0,1
               STC  R0,DINIT+1
               OI   DINIT+1,C'0'
         FI
         PEXIT
         TITLE '$DD - DISPLAY DISKS'
$DD      PENTRY
         MVC   CALLNAME,=CL8'DISK'
         PM    CALL
         PEXIT
         TITLE '$DT - DISPLAY TAPES'
$DT      PENTRY
         MVC   CALLNAME,=CL8'TAPE'
         PM    CALL
         PEXIT
         TITLE '$DW - DISPLAY WAITING JOBS AND TSO USERS'
$DW      PENTRY
         MVC   CALLNAME,=CL8'WAIT'
         PM    CALL
         PEXIT
         TITLE '$DE - DISPLAY POSSIBLE ERROR CONDITIONS'
$DE      PENTRY
         MVC   CALLNAME,=CL8'ERRORS'
         PM    CALL
         PEXIT
         TITLE '$DX - DISPLAY EXCPS FOR FILES'
$DX      PENTRY
         MVC   CALLNAME,=CL8'EXCPS'
         PM    CALL
         PEXIT
         TITLE '$DC - DISPLAY CPU, PAGING, AND I/O RATES'
$DC      PENTRY
         MVC   CALLNAME,=CL8'RATES'
         PM    CALL
         PEXIT
         TITLE 'CALL - CALL BYNAME PROCESSOR'
CALL     PENTRY
         LA    R1,3(R4)
         ST    R1,CALLAMSG
         LR    R1,R5
         SH    R1,=H'3'
         ST    R1,CALLLNG
         LA    R1,CALLLIST
         SCALL BYNAME
         PEXIT
         TITLE 'COMMON DATA'
         LTORG
EQ       EQU   8
         EQUI
         PRINT GEN
TERM     DC    CL8' '
ACTIVITY LOGICAL FALSE,(TRUE,FALSE)
MTTR     DC    A(0)
PWORK    DC    D'0'
CVTHEAD  EQU   X'A0' FE  90
TCBTIO   EQU   X'0C' FE 289
TCBTCB   EQU   X'74' FE 290
TCBLTC   EQU   X'88' FE 290
TCBNTC   EQU   X'80' FE 290
TCBOTC   EQU   X'84' FE 290
TCBJSTCB EQU   X'7C' FE 290
ATCB     DC    A(0)
TCBINT   DC    F'0'      TIME REMAINING IN 0.01 SEC
CALLLIST DS    0F
         DC    A(CALLNAME)
         DC    A(TERM)
CALLAMSG DC    A(0)
         DC    A(CALLLNG)
CALLNAME DC    CL8'*NONAME*'
CALLLNG  DC    F'0'
$DANEXT  DC    A(0)
*
* MAX CPU FOUND IN RDR PARM, BUT THIS CAN BE OVERRIDDEN BY TIME =
* SPECIFIED ON JOB OR STEP JCL CARD.
*
MAXCPU   DC    A(360*60*100) DEFAULT MAX CPU TIME 360 MIN (IN 0.01 SEC)
$DAMSG   DS    0CL60
$DANAME  DC    CL8' ',C' '
$DASTEP  DC    CL8' ',C' ELAPSED'
$DAREAL  DC    CL4' ',C' MIN   CPU'
$DACPU   DC    CL9' ',C' SEC'
         DC    C' I='
DINIT    DC    C'  '
         FILL  $DAMSG
$DPMSG   DS    0CL60
DJOBNAME DC    CL8' ',C' '
DFORM    DC    CL4' ',C' CURRENT LINES'
DCLINES  DC    CL10' ',C' TOTAL LINES'
DTLINES  DC    CL10' '
         FILL  $DPMSG
$DJMSG   DS    0CL60
$DJ#     DC    CL4' ',C' '
$DJT     DC    CL4' ',C' '
$DJN     DC    CL8' ',C' C='
$DJC     DC    C' ',C' P='
$DJP     DC    CL4' ',C' '
$DJPR    DC    CL20' '
         FILL  $DJMSG
$GETJKEY DC    D'0'
$NEXTQUE DC    A(0)
$DLMSG   DC    CL80' '
         SPOOLDAT
         DS    0D
JCTREC   DC    (&BUFSIZE)X'00'
         END
