C          DATA SET CS303000   AT LEVEL 131 AS OF 06/11/80
C          DATA SET CS303000   AT LEVEL 128 AS OF 12/05/79
C          DATA SET CS303000   AT LEVEL 127 AS OF 10/05/79
C          DATA SET CS303000   AT LEVEL 126 AS OF 10/05/79
C     PGM-ID.  CS303000.
C     AUTHOR.  DDN HIGGINS.
C     DATE.    06/25/76.
C     REMARKS. FPC SMF ANALIZER STEP 2
C              READ SELECTED SORTED RECORDS AND CREATE FOLLOWING
C              REPORTS.
C                   CS303R21 DETAIL JOB REPORT
C                   CS303R22 JOB COST SUMMARY BY SYSTEM PREFIX
C                   CS303R23 JOB COST SUMMARY BY TYPE OF JOB
C                   CS303R24 TAPE AND DISK DEVICE SUMMARY REPORT
C                   CS303R25 DISK VOLUME USAGE REPORT
C                   CS303R26 UCB EXCP COUNT REPORT
C                   CS303R31 JOB/PROGRAM CROSS REFERENCE
C                   CS303R32 RESOURCE ACCESS CONTROL EXCEPTION REPORT
C     FILES.
C              SMFINPUT - SORTED SMF FILE ACCESSED BY SMFIO (GU016400)
C                            (JOBNAME, RDR DATE, RDR TIME)
C              FT06F001 - JOB DETAIL REPORTS
C              FT10F001 - CONTROL DATE FILE
C                         1-5      START DATE YYDDD
C                         6-9      START TIME HHMM
C                        10-14     ENDING DATE YYDDD
C                        15-18     ENDING TIME HHMM
C              FT11F001 - EXECEPTION REPORTS
C              FT12F001 - JOB CROSS REFERENCE OUTPUT FILE TO BE
C                         SORTED AND PRINTED BY CS304000.  ALL
C                         RECORDS ARE 15 WORDS LONG. FIRST WORD
C                         IS TYPE FOLLOWED BY KEY AND DATA
C
C                             RTYPE      KEY AND DATA
C                               1        TYPE,JOBNAME,ABEND,PGM
C                               2        PGM,JOBNAME
C                               3        CSR,CSRSUF,JOBNAME,COST
C                               4        AREA,PGMR,JOBNAME
C                               5        STARTDATE,STARTTIME,ENDTIME,
C                                        PGM,JOB
C                               6        FORM,JOB,PAGES,LINES
C                               7        SCC,JOB
C                               8        XSD,XST,JOB,RED,RET,HASP,JCLS,
C                                        JPRTY,JINIT,JHOLD
C                               9        USERID,STX
C                                           (1),COST,XEQ,PGMR,JERRS
C                                           (2),SCC,CLASS,JCLS,NC,C
C                                           (3),PGM
C              FT13F001 - JOB PGM REPORT
C              FT14F001 - VIO WORK FILE FOR R27 PRIORITY JOB RPT
C              FT15F001 - PRODUCTION JOB VALIDATION FILE
C                         COLUMN  DESCRIPTION
C
C                          1-8    JOBNAME
C                          9-10   MIN. DAILY RUNS
C                         11-12   MAX. DAILY RUNS
C              FT21F001 - TABLE OF CONTENTS
C              FT32F001 - RACF EXCEPTION REPORT
C              UI005D01 - CSD USER MASTER FILE VIA UI010000
C              UI011S01 - CSD FILE SECURITY EXCEPTIONS VIA UI011000
C              UI012S01 - CSD PGM  SECURITY EXCEPTIONS VIA UI012000
C     EXTERNAL.
C              DCALL    - DYNAMIC CALL INTERFACE (SR201000)
C              TIMER    - TIMER GENERAL INTERFACE (GU701000)
C              SMFIO    - READ, MOVE, AND COPY SMF RECORDS(GU016400)
C              CVTPB    - CONVERT PACKED TO BINARY
C              AMOVE    - MOVE ANY LENGTH FIELD
C              CS305    - MISC. ALC SUPPORT
C              HHMMSS   - CONVERT 0.01 SEC TO HH, MM, SECONDS
C              UI010000 - USER MASTER FILE INTERFACE
C              UI011000 - DSN SECURITY INTERFACE
C              UI012000 - PGM SECURITY INTERFACE
C              CS302    - CONVERT HEX CUA TO CHAN, CU, DEVICE (+1)
C              CS311    - CONVERT BYTE TO BITS
C     REFERENCE.
C                   1.   OS/VS SMF GC35-0004-4  (OS/VS2-R1)
C                   2.   OS/VS2 MVS GC28-0706-1 (OS/VS2-R3.7)
C                   3.   OS/VS2 MVS SC28-0922-0 (OS/VS2-R3)
C     MAINTENANCE.   REMEMBER TO UPDATE FORMAT 10 *********************
C
C     09/04/77 DSH - ADD LOGIC TO HANDLE MVS OR SVS RECORDS
C     09/19/77 DSH - FIX OFFSETS DUE TO BAD SMF DOC FOR MVS
C                 1. ADD %NNN FOR TSO EXCESSIVE CPU USAGE
C                 2. SKIP RACF FOR USERID=0 DURING TESTING
C                 3. FLAG MVS JOBS WITH * IN R21
C                 4. FIX BAD ANNN FOR TSO STEPS
C                 5. FIX PGMR NAME FOR USERID=0 AND TSO
C                 6. CHANGE $NNN TO JOBS OVER $50.00
C                 7. DROP S000 ABENDS FOR TSO
C     10/08/77 DSH - MANY MISC ENHANCEMENTS
C                 1. ADD TOTALS FRO DEXCP, TEXCP, LINES, ABENDS, ABCOST
C                 2. FIX ABEND TIME AND COST ON R41
C                 3. ADD IS P JOBS TO R41
C                 4. ADD USER MSG FOR IS P
C                 5. FIX PRT QUE TIME PROB BY MAKING PRINT TIME=TIME
C                    FROM START OF FIRST FORM TO END OF LAST FORM
C                 6. SET FRPT=16 AND USE FT06F001 FOR SYSOUT MSGS
C                 7. USE NEW DYNAMIC COST CALCULATION ROUTINE RCPCALC
C                 8. FIX BAD XQUE TIME OF 1440-1 FOR REPRO JOBS
C                 9. CHANGE MEMORY LIMIT TO 1024K FOR MNNN AND VMXY
C                10. CHANGE PUNCH LIMIT TO 100
C                11. CHANGE TSO CPU LIMIT TO 1%
C     10/18/77 DSH - CHANGE MVS * ON R21 TO BLK AND SVS TO $
C                    FIX TSO PGMR NAME BLANK PROBLEM
C     10/21/77 DSH - FIX TSO PGMR NAME BLANK TO MVS T26 REC.
C     10/31/77 DSH - MISC. FIXES AND CHANGES FOR MVS
C               1.  CORRECT REPRO FLAG AND DROP OFF R41
C               2.  CHANGE MEMORY LIMITS BY CLASS
C               3.  RAISE RNNN LIMIT TO 10
C               4.  DROP RETURN CODE 0004 FROM R47
C               5.  FORCE SEQUENCE OF CLASSES ON R23
C               6.  ADD IPL MESSAGE TO USERS AFFECTED
C     11/03/77 DSH - FIXES TO FIXES ON 10/31/77
C               1.  FIX TSO BLANK PGMR FROM T26 ONE MORE TIME...
C     04/18/78 DSH - FIXES FOR ADDITIONAL 3350 ON CHANNEL 4
C               1.  ADD 3350 TO DISK CHARGES ON R21 AND IN R24
C     07/03/78 DSH - FOLLOWING CHANGES
C               1.  FLAG USE OF FPC.TESTLIB FOR P TYPE JOBS
C               2.  ADJUST LIMITS ON R47 EXCEPTIONS
C                   A.  ANNN - 5 MIN
C                   B.  $CJ  - OMIT
C                   C.  $NNN - $100.
C                   D.  C010 - 30 MIN
C                   E.  D050 - 100 EXCP
C                   F.  F100 - 200 OPENS
C
C     08/01/78 DSH - FOLLOWING CHANGES
C
C               1.  ADD SMF CHARGING RATE PARAMETERS TO R22
C                   A.  SMF4SETM - TCB CPU TIME
C                   B.  SMF4SRBT - SRB CPU TIME
C               2.  ADD *NNN EXCEPTION TO R47 INDICATING TSO
C                   SESSIONS OVER 60 MINUTES.
C
C     08/17/78 DSH - FOLLOWING CHANGES
C
C               1.  ADD SMF4SYST TO MEMORY FIGURES IN R22 AND
C                   CORRECT ACCUMULATION.
C               2.  DELETE STEP CHRONOLOGICAL RPT XREF RCDS
C                   DUE TO LACK OF USE AND HIGH PROCESSING COST.
C               3.  CHANGE *NNN TO 120 MINUTES.
C
C     10/23/78 DSH - FOLLOWING CHANGES
C
C               1.  CHANGE MIS TO MTX (MINUTES THROUGH EXECUTION)
C                   TO ELIMINATE FETCH QUEUE TIME.
C               2.  CHANGE R21 TIMES TO HHMM INSTEAD OF ELAPSED
C                   TIME IN EACH STAGE.
C               3.  FIX R41 BAD JOBLOG TIME.
C               4.  DROP ALL IXXX CODES EXCEPT IS P FROM R47.
C
C     11/01/78 DSH - FOLLOWING CHANGES
C
C               1.  FIX TSO LOGON TIME AND *NNN AND %NNN CALC.
C                   DISTROYED BY DROPPING ELAPSED TIME CALC ABOVE.
C
C               2.  ADD REPORT CS303R27 PRIORITY JOB DETAIL.
C
C               3.  ADD PRODUCTION JOB FREQUENCY EXCEPTIONS ON
C                   R41.
C
C     01/22/79 DSH - FOLLOWING CHANGES
C
C               1.  PROCESS T230 FPC PROCEDURE RECORDS TO
C                   INCLUDE PROCEDURES IN JOB/PGM, AND PGM/JOB RPTS.
C
C               2.  PUT MEMBER NAME OF FPC.XXXXXXXX PDS LIBRARIES
C                   IN DSN FIELD FOR FILE ACCESS REPORT AND
C                   INCLUDE IN PROC/PARM CHANGE REPORTS.
C
C               3.  RESET PAGE NUMBER IN R27.
C
C               4.  LIST ALL NON-STD TAPE ACCESSES ON R32.
C
C               5.  USE NEW 1979 CSD RATES.
C                   A.  NEW RATE TABLE AND CALC. SYSTEM ROUTINES USED
C                       AUTOMATICALLY.
C                   B.  NEW INPUT DATA REQUIRED.
C                       1.  INCLUDE SRB TIME IN CPU TIME.
C                       2.  PASS TSO TGET/TPUT COUNTS.
C
C     01/26/79 DSH - FIX PROBLEMS DUE TO ABOVE CHANGES.
C
C               1.  FIX BAD USERID IN R21 DUE TO T231 PROCESSING
C                   WHICH DOES NOT HAVE SMF COMMON AREA FILLED.
C
C               2.  VALIDATE USER FOR NON-STD. LABEL PROCESSING.
C                   IF VALID, DO NOT PUT ON R32.
C
C     03/20/79 DSH - RELEASE 79.1 SEE OT780RS.SHRDOC(SMFDOC) FOR
C                    FIXES AND CHANGES.
C     03/29/79 DSH - REL 79.1.1 FIX GNNN AND NNNN R47 BUGS.
C
C     03/30/79 DSH - REL 79.1.2 LIMIT GNNN TO 8 TO 5 EXECUTION AND
C                               DROP  NNNN.
C
C     05/11/79 DSH - REL 79.1.3 FIX T26 FIELD OFFSETS DUE TO
C                    JES2 4.1 FIXES OF PREVIOUS RECORD ERRORS.
C
C     06/26/79 DSH - REL 79.1.4 ADD CLASS I TO EXCEPTION REPORT
C                    R47.
C
C     08/14/79 DSH - REL 79.1.5 FIX DISK AND TAPE NEW ADDRESSES
C
C     09/23/79 DSH - REL 79.2.0
C
C                    FIXES.
C                      1.  PUT EXECUTION TIME ERRORS ON R41 AND R47.
C                    CHANGES.
C                      1.  REPLACE R45 WITH JOB SCHEDULE REPORT.
C                      2.  CHANGE HHMM ON R41 TO LAST SMF REC. TIME.
C                      3.  INCREASE LIMITS ON R47 AND ADD:
C                          A.  ELAPSED TIME ENNN
C                          B.  PAGE SECONDS XNNN
C
C     10/05/79 DSH - REL. 79.2.1
C
C                    CHANGES.
C                       1.  REMOVE $CAN FROM R41.
C                       2.  SPLIT $CAN TO INTO $CIJ AND $CFJ.
C
C     12/05/79 DSH - REL 79.2.2 - FIX R41 JOB LOG TIME.
C
C     06/11/80 DSH - REL 80.1.0 - FIX R24 AND R25 DISK AND TAPE UCBS
C
C
C
C
C
C
C
C
C
C
C
C********************************************************************
C
C   REMEMBER TO UPDATE VERSION LEVEL DATE IN FORMAT 10
C
C********************************************************************
C
C
C
C
C
C
C
C     NOTES.
C
C     DATA DEFINITIONS
C
      IMPLICIT INTEGER(A-Z)
      INTEGER  EOF/0/,TRUE/1/,FALSE/0/
      INTEGER  RDIO/1/,MOVE/2/,REOF/3/
      INTEGER DUMP/5/
      INTEGER RTYPE,RTIME,RDATE
      INTEGER FRPT/16/,FERR/11/,FXREF/12/,FPGM/13/,FSYS/6/
      INTEGER FWRK/14/,FPJF/15/
      INTEGER LINE/0/,MAXLN/50/,PAGE/0/,TIME(6)
      REAL*8 GDATE
      INTEGER RPTNO/21/,FTOC/21/
      INTEGER RPT31/31/,RPT32/32/
      INTEGER XRECS/0/
      INTEGER FDAT/10/
      INTEGER CPUID/0/,CPUIDS(3)/'A158','MVS1','****'/,CPUIDT(3)/3*0/
      INTEGER SYSID/' '/,NEWID/' '/,OLDID/'$'/
C
C     DATA FOR JOB REPORT
C
      REAL*8   CSR/' '/,LJOB/' '/,BJOB/' '/,JOB/' '/
      REAL*8   LT5JOB/' '/,NUPJOB/' '/
      INTEGER  LT5JD/0/,LT5JT/0/,LT5DUP/0/
      INTEGER  JTIME,JDATE,    CSRSUF,PGMR(5),LTIME,LDATE
      INTEGER  SHH,SMM
      INTEGER  HASP,JPRY,JHOLD,ABEND,MEMORY,CPU,NUPCST/0/
      INTEGER  CMM,CSS,DEXCP,TEXCP,LINES,COST
      INTEGER  TDEXCP/0/,TTEXCP/0/,TLINES/0/,TABEND/0/,ABCOST/0/
      INTEGER  RCPTAB(15)
      EQUIVALENCE
     *  (RCPTAB(01),CPU)
     * ,(RCPTAB(02),MEMORY)
     * ,(RCPTAB(03),DEXCP)
     * ,(RCPTAB(04),TEXCP)
     * ,(RCPTAB(05),RDRXCP)
     * ,(RCPTAB(06),LINES)
     * ,(RCPTAB(07),PCHXCP)
     * ,(RCPTAB(08),TSCAN)
     * ,(RCPTAB(09),DALLC)
     * ,(RCPTAB(10),TALLC)
     * ,(RCPTAB(11),COST)
     * ,(RCPTAB(12),DTMNTS)
     * ,(RCPTAB(15),TSOGPS)
      INTEGER  STEPM/0/,STEPC/0/,STEPAC/0/,STEPAT/0/,STEPCR/0/
      INTEGER  UCB,CHAN,CU,UNIT,EXCPS
      REAL*8   PGMS(14),PGM
      INTEGER PSTK/1/,PMAX/14/
      INTEGER PLINE/0/,PPAGE/0/
      INTEGER HOLD/'H'/,JOBTYP/0/,JOBFL/0/,JOBTI/0/,SFLUSH/0/
      INTEGER ZERO/'0000'/,XJCL/'XJCL'/,HJCL/'HJCL'/
      INTEGER CANIJ/'$CIJ'/,CANFJ/'$CFJ'/
      INTEGER U000/'U000'/,S000/'S000'/,RC04/'0004'/
      REAL*8 TSOJOB/' '/
      INTEGER DUPJOB/0/,R/'R'/
      INTEGER P/'P'/,Q/'Q'/,A/'A'/
      INTEGER NSTEPS/0/,JSTEPS/0/
      INTEGER INCP/'INCP'/
      INTEGER  CLSMAX/8/
      INTEGER  CLSCLS(8)/'G','A','F','D','T','I','C','E'/
C
C     LIMITS EXCEED CLASS DEFINITION TO PERMIT MINOR OVERRUNS.
C
      INTEGER  CLSCPU(8)/0,90000,90000,60000,60000,24000,24000,6000/
      INTEGER  CLSMEM(8)/0,3000,3000,1500,1500,1500,1500,1500/
      INTEGER  CLSXCP(8)/0,190000,190000,90000,90000,40000,40000,9000/
      INTEGER  CLSPRT(8)/0,90000,90000,40000,40000,20000,20000,9000/
      INTEGER  CLSMTV(8)/0,3,2,2,2,2,0,0/
      INTEGER  CLSMDV(8)/0,2,1,1,1,1,0,0/
      INTEGER  CLSERR(6)/'C','M','I','L','T','D'/
      INTEGER JA380(16),JA140(16),JA240(16),JAA40(16),JA940(16)
      INTEGER JINIT/' '/
      INTEGER JFILES/0/
      INTEGER ISEP(7)/'I   ','I  P','I E ','I EP','IS  '
     *               ,'IS P','ISE '/
      INTEGER PRTPRY/0/,RPRO/'RPRO'/
      INTEGER JERRS/0/,INVPGM/0/
C
C     DEVICE DATA
C
      INTEGER P140(16)/16*0/,P240(16)/16*0/,PA40(16)/16*0/
      INTEGER M140(16)/16*0/,M240(16)/16*0/,MA40(16)/16*0/
      INTEGER F140(16)/16*0/,F240(16)/16*0/,FA40(16)/16*0/
      REAL*8  V140(16)/16*' '/,V240(16)/16*' '/,VA40(16)/16*' '/
      INTEGER P940(16)/16*0/
      INTEGER M940(16)/16*0/
      INTEGER F940(16)/16*0/
      REAL*8  V940(16)/16*' '/
      REAL*8  VOLUME/' '/,MVOL/'M.VOL.'/
      INTEGER MODULE/0/,FREEC/0/,TOTFC/0/,TOTOV/0/
      INTEGER NVOLS/0/,FSVOLS(50),MVOLS(50),MAXV/50/
      REAL*8 VOLS(50)/' '/
      INTEGER MODID(16)/
     *    'A','B','C','D','E','F','G','H'
     *   ,'I','J','K','L','M','N','O','P'/
      INTEGER T380(8)/8*0/,T140(16)/16*0/,T240(16)/16*0/,TA40(16)/16*0/
      INTEGER A380(8)/8*0/,A140(16)/16*0/,A240(16)/16*0/,AA40(16)/16*0/
      INTEGER T940(16)/16*0/
      INTEGER A940(16)/16*0/
      INTEGER M380(8)/8*0/
      INTEGER H(16)/
     *    '0','1','2','3','4','5','6','7'
     *   ,'8','9','A','B','C','D','E','F'/
      INTEGER B7(7)/7*' '/
C
C     UCB EXCP DATA
C
      INTEGER CUSUB(16,16)/256*0/
      INTEGER CUTAB(30,16)/480*0/,CUTMAX/30/
      INTEGER CUTNOW/1/,CUNO/0/,CULOST/0/,CHATOT/0/
C
C     PREFIX DATA
C
      INTEGER  JP(100)/100*' '/,NJP/0/,PREFIX/' '/
      INTEGER  P J(100)/100*0/,P C(100)/100*0/
      INTEGER  PPJ(100)/100*0/,PPC(100)/100*0/
      INTEGER  PTJ(100)/100*0/,PTC(100)/100*0/
      INTEGER  PXJ(100)/100*0/,PXC(100)/100*0/
      INTEGER TEST/'T'/,XXXX/'****'/
      INTEGER PROD(3)/'P','A','Q'/
      INTEGER OT/'OT'/,X/'X'/,Z/'Z'/
      INTEGER GTOT(8)/8*0/,BLK/' '/
C
C     AREA DATA
C
      INTEGER IAREA/'I'/,UAREA/'U'/
      INTEGER AAREA/'A'/
      INTEGER  NJA/0/,AREA/' '/
      INTEGER ARMAX/20/
      INTEGER JA(20)/20*' '/
      INTEGER A J(20)/20*0/,A C(20)/20*0/
      INTEGER APJ(20)/20*0/,APC(20)/20*0/
      INTEGER ATJ(20)/20*0/,ATC(20)/20*0/
      INTEGER AXJ(20)/20*0/,AXC(20)/20*0/
C
C     JOB TYPE DATA
C
      INTEGER  JT(10)/'P','A','Q',7*' '/,NJT/3/
      INTEGER  TYPE/' '/,IXJT/0/
      INTEGER  TTJ(10)/10*0/,TTC(10)/10*0/
C
C     JOB FREQ DATA
C
      INTEGER  JF(10)/10*' '/,NJF/0/,FREQ/' '/
      INTEGER  F J(10)/10*0/,F C(10)/10*0/
      INTEGER  FPJ(10)/10*0/,FPC(10)/10*0/
      INTEGER  FTJ(10)/10*0/,FTC(10)/10*0/
      INTEGER  FXJ(10)/10*0/,FXC(10)/10*0/
C
C     JOB CLASS DATA
C
      INTEGER NJC/9/,CLASS/' '/
      INTEGER CLMAX/20/
      INTEGER JC(20)/'P','E','C','D','T','F','G','A','X',11*' '/
      INTEGER CJ(20)/20*0/,CC(20)/20*0/
      INTEGER CPJ(20)/20*0/,CPC(20)/20*0/
      INTEGER CTJ(20)/20*0/,CTC(20)/20*0/
      INTEGER CXJ(20)/20*0/,CXC(20)/20*0/
      INTEGER C8J(20)/20*0/,C8C(20)/20*0/
      INTEGER C8A(20)/20*0/,C8M(20)/20*0/
      INTEGER TC8J/0/,TC8C/0/
      INTEGER JPGNO/0/
      INTEGER MAXPGC/40/,PGCLS(40)/
     * 10*'STC','E','C','T','D','F','A','G','OTHR','OCR','P','HOT'
     *,'QUES','B','Y','I','X','Z',13*'RESV'/
C
C     DATA FOR XREF
C
      INTEGER XR(20)
      INTEGER WI(2)
      REAL*8 WR
      EQUIVALENCE (WR,WI(1))
      INTEGER  TX
      REAL*8 ABJOB
C
C     DATA FOR DATA SETS
C
      INTEGER PUNCH/'PUNC'/
      INTEGER*2 DSN(22)
      INTEGER*2 OT1/'OT'/
      INTEGER*2 SY1/'SY'/
      INTEGER DSN4(11),MEMBER(2)
      INTEGER SYS1/'SYS1'/,FPC1/'FPC.'/
      EQUIVALENCE (DSN,DSN4)
      REAL*8 DDNAME,SORTW1/'SORTWK01'/,DSNVOL/' '/
      REAL*8 SORTW2/'SORTWK02'/,SORTW3/'SORTWK03'/
      INTEGER*2 BLKSI
      INTEGER TSORT1/0/,TSORT2/0/,TSORT3/0/
      INTEGER TXJCD/' '/
      INTEGER TBJOBS/0/,TBJCD/'B'/
      INTEGER TRJOBS/0/,TRJCD/'R'/
      INTEGER TTJOBS/0/,TTJCD/'T'/
      INTEGER TSTEPS/0/,TFILES/0/
      INTEGER TIFILE/0/,TOFILE/0/,TQSAM/0/,TISAM/0/,TBDAM/0/
      INTEGER  TEOV/0/,TBPAM/0/,TBSAM/0/,TUFILE/0/
      INTEGER  MACRF(16)
      INTEGER TTEMP/0/
      INTEGER FRACF/32/
      INTEGER PGRACF/0/,LRACF/0/
      REAL*8 SNAME,BLK8/' '/
      INTEGER DSORG/0/
      INTEGER NBITS(8)
      REAL*8 REASON/' '/
      REAL*8 RACFR(5)
     *   /
     *    'RW-ACC','W-ACC','DSN','PGM','TLMS'
     *   /
      INTEGER JFCBLT/0/,JFCBPQ/0/,JFCBSQ/0/,JFCBDL/0/
      REAL*8 LASTDD/' '/,TLMSOK/'TLMSOK'/
      INTEGER  RACFO(5)/'R','W','U','S','N'/
      INTEGER  RACFA(2)/'S','R'/
      INTEGER  RACFF(4)/'S','I','D','P'/
      REAL*8  TSOTMP/'IKJEFT01'/
C
C     USER DATA
C
      INTEGER USERID/0/,LUSER/-1/,USID/'USID'/
      INTEGER UIDBLK/16448/
      INTEGER DEPT/0/,CSDEPT/3300/
      REAL*8  UIFIP/'UI010000'/
C
C     ALLOCATION TIME DATA
C
      INTEGER JOBAW/0/,TSOAW/0/
      INTEGER TLOGON/0/,TSOSTP/0/
C
C     PRODUCTION JOB FREQUENCY DATA
C
      REAL*8 PJFJOB/' '/,PJFEOF/'99999999'/
      INTEGER PJFMIN/0/,PJFMAX/99/,Q000/'Q000'/,QVCP/'QVCP'/
      INTEGER LJFCLS/' '/
C
C     TSO STATISTICS DATA
C
      INTEGER JOBTCB/0/,JOBSRB/0/,JOBDCP/0/,JOBTCP/0/,JOBMKM/0/
      INTEGER TSOTCB/0/,TSOSRB/0/,TSODCP/0/,TSOMKM/0/
      INTEGER TSOGET/0/,TSOPUT/0/,SYSTM/0/
C
C     FORMATS
C
   10 FORMAT(
     *    1H1,'CS303R',I2,' SMF ANALYSIS REPORT '
     *   ,A8
     *   ,6A4,5X,'PAGE',I5
     *   ,T100,'CS303000 REL 80.1.0 06/11/80'
     */)
   20 FORMAT(
     *    1X,'DETAIL JOB REPORT'
     *)
   25 FORMAT(
     *   /1X, '         SMF-JOB-LOG                               '
     *      , ' SUBJ INIT TERM PURG HASP JOB COMP MEM  CPU     DI'
     *      , 'SK     TAPE    PRINT  EST.COST '
     *   /1X,' JOBNAME --TIME--DATE --CSR- --- USER NAME --USID  '
     *      , ' HHMM HHMM HHMM HHMM  NO CPPT CODE USE MMM.SS --EX'
     *      , 'CP-- --EXCP-- -LINES- $XXXX.XX '
     */)
   30 FORMAT(
     *    1X,A8,A1,I7,I5,1X,A5,A1,1X,4A4,I4
     *   ,2X,4I5,A4,1X,A1,I2,A1,1X,A4,2I4,'.',I2
     *   ,I9,I9,I8,I9
     *)
   40 FORMAT(
     *   /1X,'JOB COST SUMMARY BY SYSTEM PREFIX'
     *  //1X, 'SYSTEM      TOT-JOBS  TOT-COST IPAQ-JOBS IPAQ-COST'
     *      , ' TEST-JOBS TEST-COST MISC-JOBS MISC-COST'
     */)
   50 FORMAT(
     *    3X,A2,6X,8I10
     *)
   60 FORMAT(
     *   /1X,'JOB SUMMARY BY RESOURCE CLASS'
     *   //1X, 'CLASS      TOT-JOBS  TOT-COST PROD-JOBS PROD-COST'
     *      , ' TEST-JOBS TEST-COST MISC-JOBS MISC-COST'
     *   ,'  8-5-JOBS  8-5-COST 8-5-A-MTX 8-5-M-MTX'
     */)
   70 FORMAT(
     *    3X,A1,6X,8I10
     *   ,4I10
     *)
   80 FORMAT(
     *   /1X,'JOB SUMMARY BY RESPONSIBLE AREA'
     *   //1X, 'AREA       TOT-JOBS  TOT-COST PROD-JOBS PROD-COST'
     *      , ' TEST-JOBS TEST-COST MISC-JOBS MISC-COST'
     */)
   90 FORMAT(
     *   /1X,'JOB SUMMARY BY FREQUENCY'
     *   //1X, 'FREQ       TOT-JOBS  TOT-COST PROD-JOBS PROD-COST'
     *      , ' TEST-JOBS TEST-COST MISC-JOBS MISC-COST'
     */)
  100 FORMAT(
     *   /1X,'JOB SUMMARY BY TYPE'
     *   //1X, 'TYPE       TOT-JOBS  TOT-COST'
     */)
  110 FORMAT(
     *   /1X,'DEVICE SUMMARY REPORT'
     */)
  120 FORMAT(
     * ///1X, 'UNIT      ',80A1
     *   /1X, 'MOUNTS    ',8I10
     *   /1X, 'EXCPS(000)',8I10
     *   /1X, 'ALLOC-MIN ',8I10
     */)
  130 FORMAT(
     *   /1X,'JOB/PROGRAM CROSS-REFERENCE REPORT'
     *  //2X,'JOBNAME',13(' PGMNAME ')
     */)
  140 FORMAT(14(1X,A8))
  150 FORMAT(
     *   /1X,'UNIT      ',80A1
     *   /1X,'MODULE    ',8(9X,A1)
     *   /1X,'VOLUME    ',8(4X,A6)
     *   /1X,'FREE-CYL  ',8I10
     *   /1X,'MOUNTS    ',8I10
     *   /1X,'ALLOC     ',8I10
     *   /1X,'EXCPS(000)',8I10
     *)
  160 FORMAT(
     *     /1X,'TOTAL ONLINE FREE CYLINDERS',I9
     *   ,15X,'ONLINE VOLUMES',I6
     *)
  170 FORMAT(
     *    1X,'VOLUME USAGE REPORT'
     *  //1X,'VOLUME FREE-CYLS MOUNTS'
     */)
  180 FORMAT(
     *    1X,A6,I10,I7
     *)
  200 FORMAT(
     *    1X,'    21     DETAIL JOB REPORT'
     *   /1X,'    22     JOB STATISTICS SUMMARY REPORT'
     *   /1X,'    23     JOB COST SUMMARY REPORT'
     *   /1X,'    24     TAPE AND DISK DEVICE SUMMARY REPORT'
     *   /1X,'    25     DISK VOLUME USAGE REPORT'
     *   /1X,'    26     UCB EXCP SUMMARY REPORT'
     *   /1X,'    27     PRIORITY JOB DETAIL REPORT'
     *   /1X,'    31     JOB/PROGRAM CROSS REFERENCE'
     *   /1X,'    32     FILE ACCESS EXCEPTION REPORT'
     *)
  210 FORMAT(
     *    2(I5,2I2)
     *)
  220 FORMAT(
     *   /1X,'JOB STATISTICS SUMMARY'
     *  //1X,'DUPLICATE JOBS ',I7
     *  //1X,'BATCH JOBS     ',I7
     *   /1X,'RJE   JOBS     ',I7
     *   /1X,'TSO   JOBS     ',I7
     *   /1X,'TOTAL JOBS     ',I7
     *   /1X,'TOTAL STEPS    ',I7
     *   /1X,'TOTAL TSO SESS.',I7
     *   /1X,'TOTAL TSO STEPS',I7
     *   /1X,'JOB ALLOC WAIT ',I7
     *   /1X,'TSO ALLOC WAIT ',I7
     *   /1X,'INV. PROD. PGMS',I7
     *   /1X,'TOT DISK EXCP  ',I7
     *   /1X,'TOT TAPE EXCP  ',I7
     *   /1X,'TOT PRT LINES  ',I7
     *   /1X,'TOT ABENDS     ',I7
     *   /1X,'TOT ABEND COST ',I7
     *)
  222 FORMAT(
     *   /1X,'JOB TCB CPU MIN',I7
     *   /1X,'JOB SRB CPU MIN',I7
     *   /1X,'JOB DISK EXCP K',I7
     *   /1X,'JOB TAPE EXCP K',I7
     *   /1X,'JOB MEMORY K HR',I7
     *   /1X,'TSO TCB CPU MIN',I7
     *   /1X,'TSO SRB CPU MIN',I7
     *   /1X,'TSO DISK EXCP K',I7
     *   /1X,'TSO MEMORY K HR',I7
     *   /1X,'TSO TERM GET  K',I7
     *   /1X,'TSO TERM PUT  K',I7
     *)
  225 FORMAT(
     *   /1X,'TOTAL FILES    ',I7
     *   /1X,'TOTAL END-VOLS ',I7
     *   /1X,'TEMPORARY FILES',I7
     *   /1X,'INPUT FILES    ',I7
     *   /1X,'OUTPUT FILES   ',I7
     *   /1X,'UPDATE FILES   ',I7
     *   /1X,'QSAM FILES     ',I7
     *   /1X,'BSAM FILES     ',I7
     *   /1X,'BPAM FILES     ',I7
     *   /1X,'ISAM FILES     ',I7
     *   /1X,'BDAM FILES     ',I7
     *   /1X,'SORTWK01 FILES ',I7
     *   /1X,'SORTWK02 FILES ',I7
     *   /1X,'SORTWK03 FILES ',I7
     *)
  227 FORMAT(
     *   /1X,'MAX TEST JOB   ',A8
     *   /1X,'MAX TEST COST  ',I8
     *)
  230 FORMAT(
     *   /1X,'RESOURCE ACCESS CONTROL FUNCTION EXCEPTION REPORT'
     *  //1X,'JOBNAME  --------PGMR----USID DDNAME   '
     *   ,'CLOSE-TIME '
     *   ,'REASON OAF '
     *      ,'BLKSIZE  --EXCPS- VOLUME DATA-SET-NAME'
     */)
  240 FORMAT(
     *    1X,A8,1X,4A4,I4,1X,A8
     *   ,1X,I5,I3,I2
     *   ,1X,A6,1X,3A1
     *   ,I7,I11,1X,A6,1X,11A4
     *)
  250 FORMAT(
     *  //1X,'TOTAL ',I10,I7
     *)
  270 FORMAT(2X,I3)
  280 FORMAT(
     *    1X,'UCB EXCP SUMMARY REPORT'
     *  //1X,'NO CU',16(6X,A1)
     */)
  290 FORMAT(
     *    1X,I2,1X,2A1,16I7
     *)
  300 FORMAT(
     *   /1X,'TABLE OVERFLOW - TOTAL EXCPS NOT SHOWN =',I7
     *)
  310 FORMAT(
     *   /1X,'TOTAL CHANNEL ',A1,' =',I7
     */)
  320 FORMAT(
     *   A8,2I2,A1
     *)
  330 FORMAT(
     *   1X,'PRIORITY JOB DETAIL REPORT'
     *)
C****************************************************************
C     MAINLINE
C****************************************************************
      READ(FDAT,210)
     *    SCOPY,SHH,SMM,ECOPY,EHH,EMM
      STIME=(SHH*60+SMM)*60*100
      ETIME=(EHH*60+EMM)*60*100
      WRITE(FTOC,200)
      CALL TIMER(12,TIME)
      CALL TIMER(13,GDATE)
      PM   PRACFH
      T8AM=8*60*60*100
      T5PM=17*60*60*100
      T24HR=24*60*60*100
      CALL DCALL(UIFIP,3,4,0,0,UISTAT)
      PM  GETSMF
      DO  WHILE,(EOF.NE.TRUE)
          IF   (RTYPE.EQ.19)
               PM   TYPE19
          ELSE
               PM   MATCH
          FI
          PM   GETSMF
      OD
      NEWJOB=TRUE
      PM  JOBRPT
      PM  PGMRPT
      RPTNO=22
      PAGE=0
      LINE=0
      PM  PRTCTL
      PM  TOTRPT
      RPTNO=23
      PAGE=0
      LINE=0
      PM  PFXRPT
      LINE=0
      PM  PRTCTL
      PM  CLSRPT
      PM  ARARPT
      LINE=0
      PM  PRTCTL
      PM  FRQRPT
      PM  TYPRPT
      PM  DEVRPT
      PM  PJDRPT
      IF  (XRECS.EQ.0)STOP 8
      STOP
C***************************************************************
C     SECOND LEVEL SUPPORT ROUTINES
C
C***************************************************************
C
C     CHKLOG - CHECK VALID TIME RANGE
C
      PENTRY CHKLOG
      LOG=FALSE
      IF  (JDATE.LT.SCOPY)PEXIT
      IF  (JDATE.GT.ECOPY)PEXIT
      IF  (JDATE.EQ.SCOPY)
          IF   (JTIME.LT.STIME)PEXIT
      ELSEIF (JDATE.EQ.ECOPY)
          IF   (JTIME.GT.ETIME)PEXIT
      FI
      LOG=TRUE
      PEXIT
C
C     GETSMF
C
      PENTRY GETSMF
      CALL SMFIO(RDIO,RTYPE,RTIME,RDATE)
      IF  (RDIO.EQ.REOF)EOF=TRUE
      PEXIT
C
C     MATCH
C
      PENTRY MATCH
      CALL SMFIO(MOVE,RTYPE,14,8,0,JOB,
     *                      26,4,0,JDATE,
     *                      22,4,0,JTIME)
      CALL CVTPB(JDATE)
      IF (
     *    (JOB.NE.LJOB)
     *    .OR.(JDATE.NE.LDATE)
     *    .OR.(JTIME.NE.LTIME)
     *   )
          IF   (JOB.NE.LJOB)
               IF   (DUPJOB.GE.15)
                    CALL CS305(2,SCC,'R',DUPJOB)
                    TX=7
                    ABJOB=LJOB
                    PM   PUTX
               FI
               PM   CHKPJF
               DUPJOB=1
               LJFCLS=BLK
          ELSE
               PM   CHKLOG
               IF   (LOG.EQ.TRUE)DUPJOB=DUPJOB+1
          FI
          PM   JOBRPT
          PM   RESET
      FI
      PM  PROCES
      PEXIT
C
C  CHKPJF  - CHECK PRODUCTION JOB FREQUENCY
C
      PENTRY CHKPJF
      CALL CLCL(LJOB,8,PJFJOB,8,0,COND)
      DO   WHILE,(COND.EQ.3)
           IF   (PJFMIN.GT.0)
                ABJOB=PJFJOB
                SCC=Q000
                TX=7
                PM PUTX
           FI
           PM   GETPJF
           CALL CLCL(LJOB,8,PJFJOB,8,0,COND)
      OD
      IF   (COND.EQ.2)
           IF  ((DUPJOB.LT.PJFMIN).OR.(DUPJOB.GT.PJFMAX))
               ABJOB=LJOB
               CALL CS305(2,SCC,'Q',DUPJOB)
               TX=7
               PM   PUTX
           FI
           IF ((LJFCLS.EQ.P).AND.(PJFCLS.NE.P))
               ABJOB=LJOB
               SCC=QVCP
               TX=7
               PM   PUTX
           FI
           PM  GETPJF
      ELSE
           IF  (LJFCLS.EQ.P)
               ABJOB=LJOB
               SCC=QVCP
               TX=7
               PM   PUTX
           FI
      FI
      PEXIT
C
C  GETPJF - GET NEXT PRODUCTION FREQ LIMIT RECORD
C
      PENTRY GETPJF
      READ(FPJF,320,END=1010)PJFJOB,PJFMIN,PJFMAX,PJFCLS
      PEXIT
 1010 PJFJOB=PJFEOF
      PEXIT
C
C     PROCESS SMF RECORDS TO COLLECT DATA
C
      PENTRY PROCES
      HOLDID=USERID
      CALL SMFIO(MOVE,RTYPE,10,4,0,CPUID,
     *                      14,2,0,PREFIX,
     *                      36,2,2,USERID,
     *                      19,1,0,FREQ,
     *                      20,1,0,AREA,
     *                      21,1,0,TYPE)
      IF   (RTYPE.EQ.231)USERID=HOLDID
      IF   (CPUID.EQ.CPUIDS(1))
           CPUID=1
      ELSEIF (CPUID.EQ.CPUIDS(2))
           CPUID=2
           SYSID=NEWID
      ELSE
           CPUID=3
      FI
      IF   (USERID.EQ.UIDBLK)USERID=0
      IF   (PREFIX.EQ.OT)
           IF   (LUSER.NE.USERID)
                LUSER=USERID
                IF   (USERID.GT.0)
                     CALL DCALL(UIFIP,10,4,USERID,PGMR,UISTAT)
                FI
           FI
      FI
      IF  (PREFIX.EQ.OT)
          AREA=X
          TYPE=X
      FI
      DOCASE RTYPE
          CASE 4
            PM TYPE4
          ESAC
          CASE 5
            PM TYPE5
          ESAC
          CASE 6
            PM TYPE6
          ESAC
          CASE 14
            PM TYPE14
          ESAC
          CASE 15
            PM TYPE15
          ESAC
          CASE 17
            PM TYPE17
          ESAC
          CASE 18
            PM TYPE18
          ESAC
          CASE 20
            PM TYPE20
          ESAC
          CASE 26
            PM TYPE26
          ESAC
          CASE 34
            PM TYPE34
          ESAC
          CASE 35
            PM TYPE35
          ESAC
          CASE 40
            PM TYPE40
          ESAC
          CASE ELSE
            IF (RTYPE.EQ.231)
               PM   TYP231
            FI
          ESAC
      ESACOD
      PEXIT
C
C     WRITE CROSS REFERENCE RECORD OUTPUT TO SORT AND CS304000
C
      PENTRY PUTX
      XR(1)=TX
      DOCASE TX
C
C     R41 PRODUCTION SYSTEM ABENDS AND EXCEPTIONS
C
          CASE 1
               XR(2)=0
               WR=ABJOB
               XR(3)=WI(1)
               XR(4)=WI(2)
               XR(5)=SCC
               WR=PGM
               XR(6)=WI(1)
               XR(7)=WI(2)
               XR(8)=ABJDAT
               XR(9)=ABJTIM
               XR(10)=USERID
               XR(11)=COST
               XR(12)=ABDATE
               XR(13)=ABTIME
          ESAC
C
C         R42 PROGRAM USAGE
C
          CASE 2
               WR=PGM
               XR(2)=WI(1)
               XR(3)=WI(2)
               WR=JOB
               XR(4)=WI(1)
               XR(5)=WI(2)
               XR(6)=STEPC
               XR(7)=STEPDX
               XR(8)=STEPTX
               XR(9)=STEPHX
               XR(10)=STEPXX
               XR(11)=JDATE
               XR(12)=JTIME
          ESAC
C
C         R43 CSR USAGE
C
          CASE 3
               WR=CSR
               XR(2)=WI(1)
               XR(3)=WI(2)
               XR(4)=CSRSUF
               WR=LJOB
               XR(5)=WI(1)
               XR(6)=WI(2)
               XR(7)=COST
          ESAC
C
C         R44 PROGRAMMER XREF
C
          CASE 4
               XR(2)=AREA
               CALL AMOVE(20,0,PGMR,0,XR(3))
               WR=LJOB
               XR(8)=WI(1)
               XR(9)=WI(2)
               XR(10)=LDATE
               XR(11)=LTIME
               XR(12)=EDATE
               XR(13)=ETIME
          ESAC
C
C         R45 JOB SCHEDULE REPORT
C
          CASE 5
               XR(2)=JSD
               XR(3)=JST
               XR(4)=JED
               XR(5)=JET
               WR=JOB
               XR(6)=WI(1)
               XR(7)=WI(2)
          ESAC
C
C         R46 FORMS USAGE
C
          CASE 6
               XR(2)=FORM
               WR=JOB
               XR(3)=WI(1)
               XR(4)=WI(2)
               XR(5)=FPAGE
               XR(6)=FLINE
          ESAC
C
C         R47 ABEND AND EXCEPTION XREF
C
          CASE 7
               XR(2)=SCC
               WR=ABJOB
               XR(3)=WI(1)
               XR(4)=WI(2)
          ESAC
C
C         R48 SCHEDULING EXCEPTION REPORT
C
          CASE 8
               XR(2)=XSD
               XR(3)=XST
               WR=JOB
               XR(4)=WI(1)
               XR(5)=WI(2)
               XR(6)=RED
               XR(7)=RET
               XR(8)=HASP
               XR(9)=JCLS
               XR(10)=JPRY
               XR(11)=JINIT
               XR(12)=JHOLD
          ESAC
C
C         R49 USER SUMMARY AND USER EXCEPTION MEMO
C
          CASE 9
               XR(2)=USERID
               XR(3)=STX
               WR=LJOB
               XR(4)=WI(1)
               XR(5)=WI(2)
               DOCASE STX
                 CASE 1
                      XR(6)=COST
                      XR(7)=XEQ
                      CALL AMOVE(20,0,PGMR,0,XR(8))
                      XR(13)=JERRS
                 ESAC
                 CASE 2
                      XR(6)=SCC
                      XR(7)=CLASS
                      XR(8)=CLSCLS(JCLS)
                      XR(9)=NCLERR
                      XR(10)=CLERR
                 ESAC
                 CASE 3
                      CALL AMOVE(44,0,DSN,0,XR(6))
                 ESAC
                 CASE 4
                      WR=PGM
                      XR(6)=WI(1)
                      XR(7)=WI(2)
                 ESAC
                 CASE 5
                      XR(7)=LTIME
                      XR(8)=LDATE
                 ESAC
               ESACOD
          ESAC
C
C         R50 DSN XREF
C
          CASE 10
               CALL AMOVE(44,0,DSN,0,XR(2))
               CALL AMOVE(6,0,DSNVOL,0,XR(13))
               CALL AMOVE(8,0,JOB,0,XR(15))
               XR(17)=RTYPE
               XR(18)=DSNXCP
          ESAC
      ESACOD
      WRITE(FXREF)XR
      XRECS=XRECS+1
      PEXIT
C
C     REPORT CURRENT JOB
C
      PENTRY JOBRPT
      IF  (LJOB.EQ.BJOB)PEXIT
      DTMNTS=TALLC
      CALL CS305(5,RCPTAB)
      IF   (TYPE.NE.P)
           IF   (COST.GT.NUPCST)
                NUPCST=COST
                NUPJOB=LJOB
           FI
      FI
      XEQ=EXTIME-LTIME
      IF   (EXTIME.EQ.0)XEQ=0
      IF   (XEQ.LT.0)XEQ=XEQ+T24HR
      XEQ=XEQ/6000
      JSEP=JSTART*4+JENDED*2+JPRINT+1
      IF  (JSEP.LT.8)
          SCC=ISEP(JSEP)
          IF  (ABEND.EQ.ZERO)ABEND=SCC
          IF  (JSEP.EQ.6)
              ABJOB=LJOB
              TX=7
              PM  PUTX
              ABJDAT=LDATE
              ABJTIM=LTIME
              ABDATE=LDATE
              ABTIME=LTIME
              PGM=BJOB
              TX=1
              PM   PUTX
              TX=9
              STX=5
              PM   PUTX
          FI
      FI
      IF (ABEND.EQ.ZERO)ABEND=BLK
      CALL HHMMSS(CPU,CHH,CMM,CSS)
      CMM=CMM+60*CHH
      LINE=LINE-1
      PM  PRTCTL
      IF  (LINE.EQ.MAXLN)
          WRITE(FRPT,20)
          WRITE(FRPT,25)
      FI
      CALL HHMMSS(LTIME,SHH,SMM,SSS)
      HMSUBJ=SHH*100+SMM
      TX=3
      PM  PUTX
      TX=4
      PM  PUTX
      TX=9
      STX=1
      PM  PUTX
      PM  POST
      IF  (USERID.GE.1000)
          IF  (AREA.EQ.UAREA)
              SCC=USID
              ABJOB=LJOB
              TX=7
              PM   PUTX
          FI
      FI
      IF  (JSEC.GT.3600)
          CALL CS305(2,SCC,'E',JSEC/60)
          ABJOB=LJOB
          TX=7
          PM  PUTX
      FI
      IF  (JSEC.GT.60)
          JPGS=JPGIO/JSEC
          IF  (JPGS.GE.1)
              CALL CS305(2,SCC,'X',JPGS)
              ABJOB=LJOB
              TX=7
              PM  PUTX
          FI
      FI
      IF  (DEXCP.GT.100000)
          CALL CS305(2,SCC,'D',DEXCP/1000)
          ABJOB=LJOB
          TX=7
          PM   PUTX
      FI
      IF  (TEXCP.GT.50000)
          CALL CS305(2,SCC,'T',TEXCP/1000)
          ABJOB=LJOB
          TX=7
          PM   PUTX
      FI
      IF  (CMM.GT.30)
          CALL CS305(2,SCC,'C',CMM)
          ABJOB=LJOB
          TX=7
          PM   PUTX
      FI
      IF  (LINES.GT.50000)
          CALL CS305(2,SCC,'L',LINES/1000)
          ABJOB=LJOB
          TX=7
          PM   PUTX
      FI
      IF  (JFILES.GT.200)
          CALL CS305(2,SCC,'F',JFILES)
          ABJOB=LJOB
          TX=7
          PM   PUTX
      FI
      IF  (NSTEPS.GT.20)
          CALL CS305(2,SCC,'P',NSTEPS)
          ABJOB=LJOB
          TX=7
          PM   PUTX
      FI
      IF  (MEMORY.GT.1100)
          CALL CS305(2,SCC,'M',MEMORY/100)
          ABJOB=LJOB
          TX=7
          PM   PUTX
      FI
      IF   (COST.GT.10000)
           CALL CS305(2,SCC,'$',COST/100)
           ABJOB=LJOB
           TX=7
           PM   PUTX
      FI
      IF   ((PREFIX.EQ.OT).AND.(XEQ.GT.0))
           IF   (XEQ.GT.120)
                CALL CS305(2,SCC,'*',XEQ)
                ABJOB=LJOB
                TX=7
                PM   PUTX
           FI
           PCTCPU=CMM*100/XEQ
           IF   (PCTCPU.GT.2)
                CALL CS305(2,SCC,'%',PCTCPU)
                ABJOB=LJOB
                TX=7
                PM   PUTX
           FI
      FI
      CALL AMOVE(1,0,PGMR,0,TXJCD)
      IF   (TXJCD.EQ.TBJCD)
           TBJOBS=TBJOBS+1
      ELSEIF (TXJCD.EQ.TRJCD)
           TRJOBS=TRJOBS+1
      ELSEIF (TXJCD.EQ.TTJCD)
           TTJOBS=TTJOBS+1
      FI
      WRITE(FRPT,30)
     *    LJOB,SYSID,LTIME,LDATE,CSR,CSRSUF,(PGMR(I),I=1,4),USERID
     *   ,HMSUBJ,HMINIT,HMTERM,HMPURG
     *   ,HASP,CLASS,JPRY,JHOLD,ABEND,MEMORY
     *   ,CMM,CSS,DEXCP,TEXCP,LINES,COST
      IF ((HMINIT.GE.800).AND.(HMINIT.LE.1700))
        IF   ((CLASS.EQ.P).OR.(CMM.GE.1).OR.(DEXCP.GE.5000))
          WRITE(FWRK)
     *    LJOB,SYSID,LTIME,LDATE,CSR,CSRSUF,(PGMR(I),I=1,4),USERID
     *   ,HMSUBJ,HMINIT,HMTERM,HMPURG
     *   ,HASP,CLASS,JPRY,JHOLD,ABEND,MEMORY
     *   ,CMM,CSS,DEXCP,TEXCP,LINES,COST
        FI
      FI
      TDEXCP=TDEXCP+DEXCP
      TTEXCP=TTEXCP+TEXCP
      TLINES=TLINES+LINES
      PM  CHKCLS
      PEXIT
C
C  PJDRPT - PRINT R27 PRIORITY JOB DETAIL REPORT
C
      PENTRY PJDRPT
      RPTNO=27
      ENDFILE FWRK
      REWIND  FWRK
      PAGE=0
      LINE=0
      DO  FOREVER
          READ(FWRK,END=1000)
     *    LJOB,SYSID,LTIME,LDATE,CSR,CSRSUF,(PGMR(I),I=1,4),USERID
     *   ,HMSUBJ,HMINIT,HMTERM,HMPURG
     *   ,HASP,CLASS,JPRY,JHOLD,ABEND,MEMORY
     *   ,CMM,CSS,DEXCP,TEXCP,LINES,COST
          PM   PRTCTL
          IF   (LINE.EQ.MAXLN)
               WRITE(FRPT,330)
               WRITE(FRPT,25)
          FI
          WRITE(FRPT,30)
     *    LJOB,SYSID,LTIME,LDATE,CSR,CSRSUF,(PGMR(I),I=1,4),USERID
     *   ,HMSUBJ,HMINIT,HMTERM,HMPURG
     *   ,HASP,CLASS,JPRY,JHOLD,ABEND,MEMORY
     *   ,CMM,CSS,DEXCP,TEXCP,LINES,COST
         LINE=LINE-1
      OD
 1000 CONTINUE
      PEXIT
C
C     PRINT CONTROL
C
      PENTRY PRTCTL
      IF  (LINE.LE.0)
          LINE=MAXLN
          PAGE=PAGE+1
          WRITE(FRPT,10)RPTNO,GDATE,TIME,PAGE
      FI
      PEXIT
C
C     RESET FOR NEXT JOB
C
      PENTRY RESET
      LJOB=JOB
      LTIME=JTIME
      LDATE=JDATE
      CSR=BJOB
      CSRSUF=BLK
      IF   (PREFIX.NE.OT)
            PGMR(1)=BLK
            PGMR(2)=BLK
            PGMR(3)=BLK
            PGMR(4)=BLK
            PGMR(5)=BLK
      FI
      SYSID=OLDID
      SHH=0
      SMM=0
      HMSUBJ=0
      HMINIT=0
      HMTERM=0
      HMPURG=0
      PRTSET=0
      PRTSST=T24HR
      DO   I=1,15
           RCPTAB(I)=0
      OD
      HASP=BLK
      JINIT=BLK
      JPRY=0
      JHOLD=BLK
      JABEND=FALSE
      JFLUSH=FALSE
      JPGIO=0
      JSEC=0
      ABEND=ZERO
      MEMORY=0
      CPU=0
      CMM=0
      CSS=0
      DEXCP=0
      TEXCP=0
      TSCAN=0
      LINES=0
      COST=0
      NEWJOB=TRUE
      CLASS=Z
      EXDATE=0
      EXTIME=0
      EDATE=0
      ETIME=0
      NSTEPS=0
      JSTEPS=0
      MTV=0
      MDV=0
      MKM=0
      JFILES=0
      USERID=0
      JERRS=0
      JSTART=FALSE
      JENDED=FALSE
      JPRINT=FALSE
      PVALID=TRUE
      PEXIT
C
C     CHECK JOB CLASS VALIDITY
C
      PENTRY CHKCLS
      ACLS=0
      DO  I=1,CLSMAX
          IF   (CLASS.EQ.CLSCLS(I))ACLS=I
      OD
      PM  CHKCLM
      IF  ((JCLS.LT.ACLS)
     *    .AND.(CLASS.NE.X)
     *   )
          JERRS=JERRS+1
          CALL CS305(3,SCC,'V',CLSERR(CLERR),CLASS,CLSCLS(JCLS))
          TX=7
          ABJOB=LJOB
          PM   PUTX
          TX=9
          STX=2
          PM   PUTX
      FI
      PEXIT
C
C     CHECK LIMITS OF EACH CLASS DOWN TO ACTUAL CLASS (ACLS)
C     AND SET (JCLS) TO REQUIRED CLASS IF DIFFERENT
C
      PENTRY CHKCLM
      JCLS=ACLS
      DO  I=2,ACLS
          NCLERR=0
          IF  (CLSCPU(I).LT.CPU)
              CLERR=1
              NCLERR=NCLERR+1
          FI
          IF  (CLSMEM(I).LT.MEMORY)
              CLERR=2
              NCLERR=NCLERR+1
          FI
          IF  (CLSXCP(I).LT.(DEXCP+TEXCP))
              CLERR=3
              NCLERR=NCLERR+1
          FI
          IF  (CLSPRT(I).LT.LINES)
              CLERR=4
              NCLERR=NCLERR+1
          FI
          IF  (CLSMTV(I).LT.MTV)
              IF  ((I.NE.4).OR.(MTV.GT.1))
                  CLERR=5
                  NCLERR=NCLERR+1
              FI
          FI
          IF  (CLSMDV(I).LT.MDV)
              CLERR=6
              NCLERR=NCLERR+1
          FI
          IF  (NCLERR.GT.0)
              JCLS=I-1
              PEXIT
          FI
      OD
      PEXIT
C
C     POST STATISTICS FOR CURRENT JOB
C
      PENTRY POST
C
C     POST TYPE DATA
C
      I=0
      FOUND=FALSE
      DO  UNTIL,(FOUND.EQ.TRUE)
          I=I+1
          IF   (I.GT.NJT)
               FOUND=TRUE
               IF   (I.GT.10)
                    I=10
                    JT(10)=XXXX
               ELSE
                    JT(I)=TYPE
                    NJT=I
               FI
          ELSE
               IF   (JT(I).EQ.TYPE)FOUND=TRUE
          FI
      OD
      IXJT=I
      TTJ(I)=TTJ(I)+1
      TTC(I)=TTC(I)+COST
      IF  ((AREA.EQ.IAREA).AND.(IXJT.LE.3))
          PRODJ=TRUE
      ELSE
          PRODJ=FALSE
      FI
C
C     POST PREFIX DATA
C
      IF ((NJP.EQ.0).OR.(JP(NJP).NE.PREFIX))
          IF   (NJP.EQ.100)
               JP(NJP)=XXXX
          ELSE
               NJP=NJP+1
               JP(NJP)=PREFIX
          FI
      FI
      P J(NJP)=P J(NJP)+1
      P C(NJP)=P C(NJP)+COST
      IF  (PRODJ.EQ.TRUE)
          PPJ(NJP)=PPJ(NJP)+1
          PPC(NJP)=PPC(NJP)+COST
      ELSE
          IF   (TYPE.EQ.TEST)
               PTJ(NJP)=PTJ(NJP)+1
               PTC(NJP)=PTC(NJP)+COST
          ELSE
               PXJ(NJP)=PXJ(NJP)+1
               PXC(NJP)=PXC(NJP)+COST
          FI
      FI
C
C     POST AREA DATA
C
      I=0
      FOUND=FALSE
      DO  UNTIL,(FOUND.EQ.TRUE)
          I=I+1
          IF   (I.GT.NJA)
               IF   (I.GT.ARMAX)
                    I=ARMAX
                    JA(ARMAX)=XXXX
               ELSE
                    JA(I)=AREA
                    NJA=I
               FI
               FOUND=TRUE
          ELSE
               IF   (JA(I).EQ.AREA)FOUND=TRUE
          FI
      OD
      A J(I)=A J(I)+1
      A C(I)=A C(I)+COST
      IF  (TYPE.EQ.PROD(1))
          APJ(I)=APJ(I)+1
          APC(I)=APC(I)+COST
      ELSE
          IF   (TYPE.EQ.TEST)
               ATJ(I)=ATJ(I)+1
               ATC(I)=ATC(I)+COST
          ELSE
               AXJ(I)=AXJ(I)+1
               AXC(I)=AXC(I)+COST
          FI
      FI
C
C     POST FREQ DATA
C
      I=0
      FOUND=FALSE
      DO  UNTIL,(FOUND.EQ.TRUE)
          I=I+1
          IF   (I.GT.NJF)
               FOUND=TRUE
               IF   (I.GT.10)
                    I=10
                    JF(10)=XXXX
               ELSE
                    JF(I)=FREQ
                    NJF=I
               FI
          ELSE
               IF   (JF(I).EQ.FREQ)FOUND=TRUE
          FI
      OD
      F J(I)=F J(I)+1
      F C(I)=F C(I)+COST
      IF  (TYPE.EQ.PROD(1))
          FPJ(I)=FPJ(I)+1
          FPC(I)=FPC(I)+COST
      ELSE
          IF   (TYPE.EQ.TEST)
               FTJ(I)=FTJ(I)+1
               FTC(I)=FTC(I)+COST
          ELSE
               FXJ(I)=FXJ(I)+1
               FXC(I)=FXC(I)+COST
          FI
      FI
C
C     POST CLASS DATA
C
      I=0
      FOUND=FALSE
      DO  UNTIL,(FOUND.EQ.TRUE)
          I=I+1
          IF   (I.GT.NJC)
               FOUND=TRUE
               IF   (I.GT.CLMAX)
                    I=CLMAX
                    JC(CLMAX)=XXXX
               ELSE
                    JC(I)=CLASS
                    NJC=I
               FI
          ELSE
               IF   (JC(I).EQ.CLASS)FOUND=TRUE
          FI
      OD
      CJ(I)=CJ(I)+1
      CC(I)=CC(I)+COST
      IF  (TYPE.EQ.PROD(1))
          CPJ(I)=CPJ(I)+1
          CPC(I)=CPC(I)+COST
      ELSE
          IF   (TYPE.EQ.TEST)
               CTJ(I)=CTJ(I)+1
               CTC(I)=CTC(I)+COST
          ELSE
               CXJ(I)=CXJ(I)+1
               CXC(I)=CXC(I)+COST
          FI
      FI
      IF  ((EXDATE.EQ.LDATE)
     *     .AND.(LTIME.GE.T8AM)
     *     .AND.(LTIME.LE.T5PM)
     *     .AND.(JHOLD.NE.HOLD)
     *    )
          C8J(I)=C8J(I)+1
          C8C(I)=C8C(I)+COST
          MTX=(EXTIME-LTIME)/6000
          C8A(I)=C8A(I)+MTX
          IF   (MTX.GT.C8M(I))C8M(I)=MTX
          TC8J=TC8J+1
          TC8C=TC8C+COST
      FI
      PEXIT
C*************************************************************
C     REPORT SECTION
C
C*************************************************************
C
C     TOTRPT - PRINT TOTAL RESOURCE REPORT FOR CURRENT JOBS
C
      PENTRY TOTRPT
      JOBAW=JOBAW/6000
      TSOAW=TSOAW/6000
      JOBTCB=JOBTCB/6000
      JOBSRB=JOBSRB/6000
      JOBDCP=JOBDCP/1000
      JOBTCP=JOBTCP/1000
      JOBMKM=JOBMKM/60
      TSOTCB=TSOTCB/6000
      TSOSRB=TSOSRB/6000
      TSODCP=TSODCP/1000
      TSOMKM=TSOMKM/60
      TSOGET=TSOGET/1000
      TSOPUT=TSOPUT/1000
      TJOBS=TBJOBS+TRJOBS+TTJOBS
      WRITE(FRPT,220)
     *    LT5DUP
     *   ,TBJOBS,TRJOBS,TTJOBS
     *   ,TJOBS,TSTEPS,TLOGON,TSOSTP,JOBAW,TSOAW
     *   ,INVPGM,TDEXCP,TTEXCP,TLINES,TABEND,ABCOST
      WRITE(FRPT,222)
     *    JOBTCB,JOBSRB,JOBDCP,JOBTCP,JOBMKM
     *   ,TSOTCB,TSOSRB,TSODCP,TSOMKM,TSOGET,TSOPUT
      WRITE(FRPT,225)
     *    TFILES,TEOV,TTEMP
     *   ,TIFILE,TOFILE,TUFILE
     *   ,TQSAM,TBSAM,TBPAM,TISAM,TBDAM
     *   ,TSORT1,TSORT2,TSORT3
      WRITE(FRPT,227)
     *    NUPJOB,NUPCST
      PEXIT
C
C     PREFIX SUMMARY REPORT
C
      PENTRY PFXRPT
      I=1
      DO  WHILE,(I.LE.NJP)
          LINE=LINE-1
          PM   PRTCTL
          IF   (LINE.EQ.MAXLN)WRITE(FRPT,40)
          WRITE(FRPT,50)
     *         JP(I),PJ(I),PC(I),PPJ(I),PPC(I)
     *        ,PTJ(I),PTC(I),PXJ(I),PXC(I)
          I=I+1
      OD
      WRITE(FRPT,50)
      CALL GSUM(NJP,GTOT,PJ,PC,PPJ,PPC,PTJ,PTC,PXJ,PXC)
      WRITE(FRPT,50)BLK,GTOT
      PEXIT
C
C     CLASS SUMMARY REPORT
C
      PENTRY CLSRPT
      WRITE(FRPT,60)
      I=1
      DO  WHILE,(I.LE.NJC)
          IF   (C8J(I).GT.0)C8A(I)=C8A(I)/C8J(I)
          WRITE(FRPT,70)
     *         JC(I),CJ(I),CC(I),CPJ(I),CPC(I)
     *        ,CTJ(I),CTC(I),CXJ(I),CXC(I)
     *   ,C8J(I),C8C(I),C8A(I),C8M(I)
          I=I+1
      OD
      WRITE(FRPT,70)
      CALL GSUM(NJC,GTOT,CJ,CC,CPJ,CPC,CTJ,CTC,CXJ,CXC)
      WRITE(FRPT,70)BLK,GTOT
     *   ,TC8J,TC8C
      PEXIT
C
C     AREA SUMMARY REPORT
C
      PENTRY ARARPT
      WRITE(FRPT,80)
      I=1
      DO  WHILE,(I.LE.NJA)
          WRITE(FRPT,70)
     *         JA(I),AJ(I),AC(I),APJ(I),APC(I)
     *        ,ATJ(I),ATC(I),AXJ(I),AXC(I)
          I=I+1
      OD
      WRITE(FRPT,70)
      CALL GSUM(NJA,GTOT,AJ,AC,APJ,APC,ATJ,ATC,AXJ,AXC)
      WRITE(FRPT,70)BLK,GTOT
      PEXIT
C
C     FREQ SUMMARY REPORT
C
      PENTRY FRQRPT
      WRITE(FRPT,90)
      I=1
      DO  WHILE,(I.LE.NJF)
          WRITE(FRPT,70)
     *         JF(I),FJ(I),FC(I),FPJ(I),FPC(I)
     *        ,FTJ(I),FTC(I),FXJ(I),FXC(I)
          I=I+1
      OD
      WRITE(FRPT,70)
      CALL GSUM(NJF,GTOT,FJ,FC,FPJ,FPC,FTJ,FTC,FXJ,FXC)
      WRITE(FRPT,70)BLK,GTOT
      PEXIT
C
C     TYPE SUMMARY REPORT
C
      PENTRY TYPRPT
      WRITE(FRPT,100)
      I=1
      DO  WHILE,(I.LE.NJT)
          WRITE(FRPT,70)
     *         JT(I),TTJ(I),TTC(I)
          I=I+1
      OD
      WRITE(FRPT,70)
      CALL GSUM(NJT,GTOT,TTJ,TTC,TTC,TTC,TTC,TTC,TTC,TTC)
      WRITE(FRPT,70)BLK,GTOT(1),GTOT(2)
      PEXIT
C
C     DEVICE SUMMARY REPORT
C
      PENTRY DEVRPT
      DO  I=1,16
          J=9-P140(I)/7
          IF   ((J.GE.1).AND.(J.LE.8))
               P140(I)=MODID(J)
          ELSE
               P140(I)=BLK
          FI
          J=9-P240(I)/7
          IF   ((J.GE.1).AND.(J.LE.8))
               P240(I)=MODID(J)
          ELSE
               P240(I)=BLK
          FI
          J=9-P940(I)/7
          IF   ((J.GE.1).AND.(J.LE.8))
               P940(I)=MODID(J)
          ELSE
               P940(I)=BLK
          FI
          J=9-PA40(I)/7
          IF   ((J.GE.1).AND.(J.LE.8))
               PA40(I)=MODID(J)
          ELSE
               PA40(I)=BLK
          FI
      OD
      DO  I=1,8
          M380(I)=M380(I)/6000
          T380(I)=T380(I)/1000
C
C  06/11/80 MAP SECONDARY ALLOC. + I/O INTO PRIMARY (DUAL PATH)
C
          A140(I)=A140(I)+A140(I+8)
          T140(I)=T140(I)/1000
     *           +T140(I+8)/1000
          A240(I)=A240(I)+A240(I+8)
          T240(I)=T240(I)/1000
     *           +T240(I+8)/1000
          A940(I+8)=A940(I+8)+A940(I)
          T940(I+8)=T940(I)/1000
     *             +T940(I+8)/1000
          AA40(I+8)=AA40(I+8)+AA40(I)
          TA40(I+8)=TA40(I)/1000
     *             +TA40(I+8)/1000
      OD
      I=1
      DO  WHILE,(I.LE.NVOLS)
          DO   J=1,16
               IF   (VOLS(I).EQ.V140(J))
                    TOTOV=TOTOV+1
                    M140(J)=0
                    MVOLS(I)=0
               ELSEIF (VOLS(I).EQ.V240(J))
                    TOTOV=TOTOV+1
                    M240(J)=0
                    MVOLS(I)=0
               ELSEIF (VOLS(I).EQ.V940(J))
                    TOTOV=TOTOV+1
                    M940(J)=0
                    MVOLS(I)=0
               ELSEIF (VOLS(I).EQ.VA40(J))
                    TOTOV=TOTOV+1
                    MA40(J)=0
                    MVOLS(I)=0
               FI
          OD
          I=I+1
      OD
      RPTNO=24
      PAGE=0
      LINE=0
      PM  PRTCTL
      WRITE(FRPT,110)
      WRITE(FRPT,120)
     *    (B7,H(4),H(9),H(I),I=1,8),(A380(I),I=1,8),(T380(I),I=1,8)
     *   ,(M380(I),I=1,8)
C
C  06/11/80 JUST PRINT PRIMARY
C
      DO  J=1,1,8
          K=J+7
          WRITE(FRPT,150)
     *    (B7,H(2),H(5),H(I),I=J,K),(P140(I),I=J,K)
     *   ,(V140(I),I=J,K),(F140(I),I=J,K)
     *   ,(M140(I),I=J,K),(A140(I),I=J,K),(T140(I),I=J,K)
      OD
      DO  J=1,1,8
          K=J+7
          WRITE(FRPT,150)
     *    (B7,H(3),H(5),H(I),I=J,K),(P240(I),I=J,K)
     *   ,(V240(I),I=J,K),(F240(I),I=J,K)
     *   ,(M240(I),I=J,K),(A240(I),I=J,K),(T240(I),I=J,K)
      OD
      DO  J=9,9,8
          K=J+7
          WRITE(FRPT,150)
     *    (B7,H(10),H(5),H(I),I=J,K),(P940(I),I=J,K)
     *   ,(V940(I),I=J,K),(F940(I),I=J,K)
     *   ,(M940(I),I=J,K),(A940(I),I=J,K),(T940(I),I=J,K)
      OD
      DO  J=9,9,8
          K=J+7
          WRITE(FRPT,150)
     *    (B7,H(11),H(5),H(I),I=J,K),(PA40(I),I=J,K)
     *   ,(VA40(I),I=J,K),(FA40(I),I=J,K)
     *   ,(MA40(I),I=J,K),(AA40(I),I=J,K),(TA40(I),I=J,K)
      OD
      DO  I=1,16
          TOTFC=TOTFC+F140(I)+F240(I)+F940(I)+FA40(I)
      OD
      WRITE(FRPT,160)
     *    TOTFC,TOTOV
C
C     VOLUME USAGE REPORT
C
      RPTNO=25
      PAGE=0
      LINE=0
      PM  PRTCTL
      WRITE(FRPT,170)
      I=1
      TFSVOL=0
      TMVOLS=0
      DO  WHILE,(I.LE.NVOLS)
          TFSVOL=TFSVOL+FSVOLS(I)
          TMVOLS=TMVOLS+MVOLS(I)
          WRITE(FRPT,180)
     *    VOLS(I),FSVOLS(I),MVOLS(I)
          I=I+1
      OD
      WRITE(FRPT,250)TFSVOL,TMVOLS
C
C     UCB EXCP SUMMARY REPORT
C
      RPTNO=26
      PAGE=0
      LINE=0
      PM   PRTCTL
      WRITE(FRPT,280)H
      DO   CHAN=1,16
           CHATOT=0
           DO   CU=1,16
                I=CUSUB(CHAN,CU)
                IF   (I.GT.1)
                     CUNO=CUNO+1
                     DO   J=1,16
                          CHATOT=CHATOT+CUTAB(I,J)
                     OD
                     WRITE(FRPT,290)CUNO,H(CHAN),H(CU)
     *                             ,(CUTAB(I,J),J=1,16)
                ELSEIF (I.EQ.1)
                     CUNO=CUNO+1
                     WRITE(FRPT,290)CUNO,H(CHAN),H(CU)
                FI
           OD
           IF(CHATOT.GT.0)WRITE(FRPT,310)H(CHAN),CHATOT
      OD
      DO   J=1,16
           CULOST=CULOST+CUTAB(1,J)
      OD
      IF   (CULOST.GT.0)
           WRITE(FRPT,300)CULOST
      FI
      PEXIT
C**************************************************************
C     PROCESS SMF RECORD SECTION
C
C**************************************************************
C
C     PROCESS TYPE 4 - STEP RECORDS PG 80
C
      PENTRY TYPE4
      K=0
      L=0
      CALL SMFIO(MOVE,RTYPE,100,2,2,K,102,2,2,L)
      CALL SMFIO(MOVE,RTYPE,86,4,0,AWSTRT,
     *                      90,4,0,AWEND,
     *                      62,8,0,SNAME,
     *                      74,2,2,STEPM,
     *                      72,2,2,SYSTM,
     *                      95,3,1,STEPCR,
     *                      103+L,3,1,STEPC,
     *                      43,4,0,STRTD,
     *                      39,4,0,STRTT,
     *                      02,4,0,ENDT,
     *                      30,5,0,CSR,
     *                      35,1,0,CSRSUF,
     *                      51,2,2,STEPAC,
     *                      83,1,0,STEPAT,
     *                      83,1,3,SFLUSH,
     *                      54,8,0,PGM,
     *                      K+00,4,0,PGIN,
     *                      K+04,4,0,PGOUT)
      IF  (SFLUSH/2*2.NE.SFLUSH)
          JFLUSH=TRUE
      ELSE
          JFLUSH=FALSE
      FI
      PM  PDEV
      PM  CHKPGM
      TSTEPS=TSTEPS+1
      NSTEPS=NSTEPS+1
      PM  CHKAWT
      JOBAW=JOBAW+AWT
      IF  (STEPM+SYSTM.GT.MEMORY)MEMORY=STEPM+SYSTM
      JPGIO=JPGIO+PGIN+PGOUT
      CPU=CPU+STEPC+STEPCR
      JOBTCB=JOBTCB+STEPC
      JOBSRB=JOBSRB+STEPCR
      MKM=MKM+STEPM*STEPC/6000
      JOBDCP=JOBDCP+STEPDX
      JOBTCP=JOBTCP+STEPTX
      JOBMKM=JOBMKM+(STEPM+SYSTM)*STEPC/6000
      CALL CVTPB(STRTD)
      ATIME=ENDT-STRTT
      IF  (ATIME.LT.0)ATIME=ATIME+T24HR
      PM  PGMRPT
      PM  CHKSCC
      PEXIT
C
C     PROCESS ALLOCATION WAIT TIME FOR 4 AND 34
C
      PENTRY CHKAWT
      IF  (AWSTRT.EQ.0)AWEND=0
      IF  ((AWEND.EQ.0).AND.(AWSTRT.GT.0))AWEND=RTIME
      AWT=AWEND-AWSTRT
      IF  (AWT.LT.0)AWT=AWT+T24HR
      IF  (AWT.GE.60000)
          CALL CS305(2,SCC,'A',AWT/6000)
          ABEND=SCC
          TX=7
          ABJOB=JOB
          PM   PUTX
      FI
      PEXIT
C
C     CHKPGM - CHECK PROGRAM AUTHORIZATION
C
      PENTRY CHKPGM
      CALL DCALL('UI012000',JOB,USERID,PGM,UISTAT)
      IF   (UISTAT.GT.1)
           PM   FLGPGM
      ELSEIF (UISTAT.EQ.1)
          IF   (USERID.GE.1000)
                PM   FLGPGM
                INVPGM=INVPGM+1
          FI
      FI
      PEXIT
C
C     FLAG INVALID PGM ACCESS
C
      PENTRY FLGPGM
      JERRS=JERRS+1
C     PVALID=FALSE
C
C*********  DISABLE FILE DUMP FOR INVALID PGMS UNTIL PGMS CLEANED UP
C
      LRACF=LRACF-1
      IF   (LRACF.LE.0)
           PM   PRACFH
      FI
      CALL DCALL(UIFIP,10,4,USERID,PGMR,UISTAT)
      WRITE(FRACF,240)
     *         JOB,(PGMR(I),I=1,4),USERID,PGM
      TX=9
      STX=4
      PM   PUTX
      PEXIT
C
C     CHECK AND PROCESS STEP COMPLETION CODES FOR TYPE 4 AND 34
C
      PENTRY CHKSCC
      CALL CS305(1,STEPAT,STEPAC,ABEND)
      IF  (STEPAT.NE.1)
          PEXIT
      FI
      IF ((ABEND.EQ.U000).OR.(ABEND.EQ.S000))
          ABEND=ZERO
          PEXIT
      FI
      PM   PRCSCC
      PEXIT
C
C     PROCESS ABEND CONDITION
C
      PENTRY PRCSCC
      JABEND=TRUE
      TABEND=TABEND+1
      DTMNTS=TALLC
      CALL CS305(5,RCPTAB)
      ABCOST=ABCOST+COST
      ABJOB=JOB
      SCC=ABEND
      TX=7
      PM  PUTX
      IF ((USERID.GE.1000)
     *    .OR.(TYPE.EQ.P).OR.(TYPE.EQ.A).OR.(TYPE.EQ.Q)
     *   )
          TX=1
          ABJDAT=JDATE
          ABJTIM=JTIME
          ABDATE=RDATE
          ABTIME=RTIME
          PM   PUTX
      FI
      PEXIT
C
C     PROCESS DEVICE ENTRIES FOR TYPE 4 AND 34
C
      PENTRY PDEV
      SMTV=0
      SMDV=0
C$$
C$$   RESTRICT MAX DEVICE ALLOC COUNT TO 8 TAPES ONLY DUE TO
C$$   PROBLEM WITH TEMP. DSNS ON REMOVABLE DISK VOLUMES
C$$
      DO   I=1,8
          JA380(I)=0
C$$       JA140(I)=0
C$$       JA240(I)=0
C$$       JAA40(I)=0
      OD
      STEPTX=0
      STEPDX=0
      STEPHX=0
      STEPXX=0
      L=0
      IF  (RTYPE.NE.40)
          CALL SMFIO(MOVE,RTYPE,102,2,2,L)
          M=104
          N=102+L
      ELSE
          CALL SMFIO(MOVE,RTYPE,60,2,2,L)
          M=62
          N=60+L
      FI
      DO  WHILE,(M.LT.N)
          CALL SMFIO(MOVE,RTYPE,M,4,0,UCB,
     *                          M+4,4,0,EXCPS)
          CALL CS302(UCB,CHAN,CU,UNIT)
          I=CUSUB(CHAN,CU)
          IF   (I.EQ.0)
               IF   (CUTNOW.LT.CUTMAX)
                    CUTNOW=CUTNOW+1
                    I=CUTNOW
               ELSE
                    I=1
               FI
               CUSUB(CHAN,CU)=I
          FI
          CUTAB(I,UNIT)=CUTAB(I,UNIT)+EXCPS
          DOCASE CHAN
               CASE 2
                    IF   (CU.EQ.5)
                         T140(UNIT)=T140(UNIT)+EXCPS
                         A140(UNIT)=A140(UNIT)+1
                         STEPDX=STEPDX+EXCPS
C$$                      JA140(UNIT)=JA140(UNIT)+1
                    FI
               ESAC
               CASE 3
                    IF   (CU.EQ.5)
                         T240(UNIT)=T240(UNIT)+EXCPS
                         A240(UNIT)=A240(UNIT)+1
                         STEPDX=STEPDX+EXCPS
C$$                      JA240(UNIT)=JA240(UNIT)+1
                    FI
               ESAC
               CASE 4
                    IF   (CU.EQ.9)
                         TALLC=TALLC+1
                         T380(UNIT)=T380(UNIT)+EXCPS
                         A380(UNIT)=A380(UNIT)+1
                         M380(UNIT)=M380(UNIT)+ATIME
                         STEPTX=STEPTX+EXCPS
                         JA380(UNIT)=JA380(UNIT)+1
                    FI
               ESAC
               CASE 10
                    IF   (CU.EQ.5)
                         T940(UNIT)=T940(UNIT)+EXCPS
                         A940(UNIT)=A940(UNIT)+1
                         STEPDX=STEPDX+EXCPS
C$$                      JA940(UNIT)=JA940(UNIT)+1
                    FI
               ESAC
               CASE 11
                    IF   (CU.EQ.5)
                         TA40(UNIT)=TA40(UNIT)+EXCPS
                         AA40(UNIT)=AA40(UNIT)+1
                         STEPDX=STEPDX+EXCPS
C$$                      JAA40(UNIT)=JAA40(UNIT)+1
                    FI
               ESAC
               CASE ELSE
                    STEPXX=STEPXX+EXCPS
C****
C     FPC 1287 SCANNER AT 016
C****
                    IF   ((CU.EQ.2).AND.(UNIT.EQ.7))
                         TSCAN=TSCAN+EXCPS
                    FI
               ESAC
          ESACOD
          M=M+8
      OD
      DEXCP=DEXCP+STEPDX
      TEXCP=TEXCP+STEPTX
      DO  I=1,8
          IF(JA380(I).GT.0)SMTV=SMTV+1
C$$       IF   ((JA140(I).GT.0).AND.(V140(I).EQ.MVOL))SMDV=SMDV+1
C$$       IF   ((JA240(I).GT.0).AND.(V240(I).EQ.MVOL))SMDV=SMDV+1
C$$       IF   ((JAA40(I).GT.0).AND.(VA40(I).EQ.MVOL))SMDV=SMDV+1
      OD
      IF  (SMTV.GT.MTV)MTV=SMTV
      IF  (SMDV.GT.MDV)MDV=SMDV
      MDV=0
      PEXIT
C
C     PROGRAM REPORT FROM TYPE 4
C
      PENTRY PGMRPT
      IF  (NEWJOB.EQ.TRUE)
          PM   PRTPGM
          PGMS(1)=JOB
          NEWJOB=FALSE
          IF   (EOF.EQ.TRUE)PEXIT
      FI
      PSTK=PSTK+1
      TX=2
      PM  PUTX
      PGMS(PSTK)=PGM
      IF  (PSTK.EQ.PMAX)
          PM   PRTPGM
      FI
      PEXIT
      PENTRY PRTPGM
      IF  (PSTK.EQ.1)PEXIT
      PLINE=PLINE-1
      IF  (PLINE.LE.0)
          PPAGE=PPAGE+1
          WRITE(FPGM,10)RPT31,GDATE,TIME,PPAGE
          WRITE(FPGM,130)
          PLINE=MAXLN
      FI
      WRITE(FPGM,140)(PGMS(I),I=1,PSTK)
      PSTK=1
      PEXIT
C
C     PROCESS TYPE 5 - JOB TERMINATION RECORDS - PG 85
C
      PENTRY TYPE5
      EXDATE=RDATE
      EXTIME=RTIME
      CALL HHMMSS(EXTIME,SHH,SMM,SSS)
      HMTERM=SHH*100+SMM
      CALL SMFIO(MOVE,RTYPE,02,4,0,JET,
     *                      06,4,0,JED,
     *                      30,5,0,CSR,
     *                      35,1,0,CSRSUF,
     *                      38,1,3,JSTEPS,
     *                      39,4,0,JST,
     *                      43,4,0,JSD,
     *                      62,1,3,JOBTI,
     *                      71,1,0,CLASS,
     *                      72,1,0,JINIT,
     *                      88,2,2,JPGNO,
     *                      93,20,0,PGMR)
      CALL CVTPB(JSD)
      CALL CVTPB(JED)
      IF   (JSD.EQ.JED)
           JSEC=(JET-JST)/100
      ELSE
           JSEC=(JED-JSD-1)*24*60*60
           JSEC=JSEC+(T24HR-JST)/100
           JSEC=JSEC+(JET)/100
      FI
      IF  ((LT5JOB.EQ.JOB)
     *     .AND.(LT5JD.EQ.JDATE)
     *     .AND.(LT5JT.EQ.JTIME)
     *    )
          LT5DUP=LT5DUP+1
      FI
      IF  ((JPGNO.LT.1)
     *     .OR.(JPGNO.GT.MAXPGC)
     *     .OR.(PGCLS(JPGNO).NE.CLASS)
     *    )
          IF  ((RTIME.GE.T8AM).AND.(RTIME.LE.T5PM))
               CALL CS305(2,SCC,'G',JPGNO)
               ABJOB=JOB
               TX=7
               PM   PUTX
          FI
      FI
      IF  ((TYPE.EQ.P).OR.(TYPE.EQ.A).OR.(TYPE.EQ.Q))
       IF ((JABEND.NE.TRUE).AND.((JOBTI.NE.0).OR.(JFLUSH.EQ.TRUE)))
          ABEND=XJCL
          SCC=XJCL
          ABJOB=JOB
          TX=7
          PM   PUTX
       FI
      FI
      TX=5
      PM PUTX
      LT5JOB=JOB
      LT5JD=JDATE
      LT5JT=JTIME
      JENDED=TRUE
      PEXIT
C
C     PROCESS TYPE 6 - SYSOUT RECORDS - PG 86
C
      PENTRY TYPE6
      CALL SMFIO(MOVE,RTYPE,53,4,0,FORM,
     *                      84,4,0,FPAGE,
     *                      47,4,0,FLINE,
     *                      68,4,0,FDEVN,
     *                      39,4,0,SST,
     *                      02,4,0,SET)
      TX=6
      PM  PUTX
      LINES=LINES+FLINE
      IF  ((FLINE.GT.500).AND.(FDEVN.EQ.PUNCH))
          CALL CS305(2,SCC,'B',FLINE/100)
          ABJOB=JOB
          TX=7
          PM  PUTX
      FI
      IF   (SET.GT.PRTSET)PRTSET=SET
      IF   (SST.LT.PRTSST)PRTSST=SST
      PEXIT
C
C     PROCESS TYPE 14 - INPUT DATA SET - PG 98
C
      PENTRY TYPE14
      PM  CHKDSN
      PEXIT
C
C     PROCESS TYPE 15 - OUTPUT DATA SET - PG 101
C
      PENTRY TYPE15
      PM  CHKDSN
      PEXIT
C
C     PROCESS TYPE 17 - SCRATCH DATA SET - PG 104
C
      PENTRY TYPE17
      CALL SMFIO(MOVE,RTYPE,40,44,0,DSN,
     *                      42,1,0,DSNPER,
     *                      88+2,6,0,DSNVOL)
      DDNAME=BLK8
      BLKSI=0
      DSNXCP=0
      RACTO=RACFO(4)
      RACTA=BLK
      RACTF=BLK
      PM  RACF
      PEXIT
C     PROCESS TYPE 18 - RENAME DATA SET - PG 105
C
      PENTRY TYPE18
      CALL SMFIO(MOVE,RTYPE,40,44,0,DSN,
     *                      42,1,0,DSNPER,
     *                      132+2,6,0,DSNVOL)
      DDNAME=BLK8
      BLKSI=0
      DSNXCP=0
      RACTO=RACFO(5)
      RACTA=BLK
      RACTF=BLK
      PM  RACF
      PEXIT
C
C     CHECK COMMON DSN DATA FOR 14 AND 15 RECORDS (REF JFCB FE PG 96)
C
      PENTRY CHKDSN
      JFILES=JFILES+1
      CALL SMFIO(MOVE,RTYPE,38,1,3,DSORG)
      CALL CS311(DSORG,NBITS)
      IF  ((NBITS(2).EQ.1).AND.(RTYPE.EQ.15))
          TEOV=TEOV+1
          PEXIT
      FI
      TFILES=TFILES+1
      LASTDD=DDNAME
      CALL SMFIO(MOVE,RTYPE,64,44,0,DSN,
     *                      66,1,0,DSNPER,
     *                     108,8,0,MEMBER,
     *                      48+4,8,0,DDNAME,
     *                      64+066,1,3,JFCBLT,
     *                      64+152,3,1,JFCBPQ,
     *                      64+156,3,1,JFCBSQ,
     *                      64+171,3,1,JFCBDL,
     *                      64+102,2,0,BLKSI,
     *                      64+118,6,0,DSNVOL,
     *                      264+16,4,0,DSNXCP,
     *                      240+0,1,3,DSORG,
     *                      240+3,1,3,MACRF1,
     *                      240+4,1,3,MACRF2)
      IF  (DDNAME.EQ.BLK8)DDNAME=LASTDD
      IF  (DDNAME.EQ.SORTW1)TSORT1=TSORT1+1
      IF  (DDNAME.EQ.SORTW2)TSORT2=TSORT2+1
      IF  (DDNAME.EQ.SORTW3)TSORT3=TSORT3+1
      CALL CS311(DSORG,NBITS)
      CALL CS311(MACRF1,MACRF(1))
      CALL CS311(MACRF2,MACRF(9))
      IF  (NBITS(2).EQ.1)
          RACTF=RACFF(1)
          RACTA=RACFA(1)
          IF   (MACRF(2)+MACRF(10).GT.0)
               TQSAM=TQSAM+1
          ELSE
               TBSAM=TBSAM+1
          FI
      ELSEIF (NBITS(7).EQ.1)
          RACTF=RACFF(4)
          RACTA=RACFA(1)
          TBPAM=TBPAM+1
      ELSEIF (NBITS(1).EQ.1)
          RACTF=RACFF(2)
          IF   (MACRF(2)+MACRF(10).GT.0)
               RACTA=RACFA(1)
          ELSE
               RACTA=RACFA(2)
          FI
          TISAM=TISAM+1
      ELSEIF (NBITS(3).EQ.1)
          RACTF=RACFF(3)
          RACTA=RACFA(2)
          TBDAM=TBDAM+1
      ELSE
          RACTF=BLK
          RACTA=BLK
      FI
      IF  (MACRF(2)+MACRF(3).GT.0)
          IF   (MACRF(10)+MACRF(11).GT.0)
               RACTO=RACFO(3)
               TUFILE=TUFILE+1
          ELSE
               RACTO=RACFO(1)
               TIFILE=TIFILE+1
          FI
      ELSE
          RACTO=RACFO(2)
          TOFILE=TOFILE+1
      FI
      PM  RACF
      IF  ((SYS1.EQ.DSN4(1))
     *     .OR.(SY1.NE.DSN(1))
     *    )
          IF  ((FPC1.EQ.DSN4(1)).OR.(SYS1.EQ.DSN4(1)))
               DSN4(09)=MEMBER(1)
               DSN4(10)=MEMBER(2)
          FI
          TX=10
          PM   PUTX
      FI
      PEXIT
C
C     RACF - FPC'S VERSION OF MVS RESOURCE ACCESS CONTROL FUNCTION
C
      PENTRY RACF
      CALL   DCALL('UI011000',RTYPE,USERID,DSN,UISTAT)
      IF     (UISTAT.GT.0)
             JERRS=JERRS+1
             REASON=RACFR(UISTAT)
             PM   PRACF
             TX=9
             STX=3
             PM  PUTX
      ELSEIF (PVALID.NE.TRUE)
             REASON=RACFR(4)
             PM   PRACF
      ELSEIF (USERID.LT.1000)
             IF   (
     *             (JFCBLT.NE.2)
     *             .OR.(
     *                  (JFCBDL.EQ.1)
     *                  .AND.(JFCBPQ.EQ.1)
     *                  .AND.(JFCBSQ.EQ.1)
     *                 )
     *            )
                  CALL DCALL('UI012000',JOB,USERID,TLMSOK,UISTAT)
                  IF   (UISTAT.GT.0)
                       REASON=RACFR(5)
                       PM   PRACF
                  FI
             FI
      FI
      PEXIT
C
C     PRINT RACF EXCEPTION LINE
C
      PENTRY PRACF
      LRACF=LRACF-1
      IF  (LRACF.LE.0)
          PM   PRACFH
      FI
      CALL HHMMSS(RTIME,HH,MM,SS)
      IF(USERID.GT.0)CALL DCALL(UIFIP,10,4,USERID,PGMR,UISTAT)
      WRITE(FRACF,240)
     *    JOB,(PGMR(I),I=1,4),USERID,DDNAME
     *   ,RDATE,HH,MM
     *   ,REASON,RACTO,RACTA,RACTF
     *   ,BLKSI,DSNXCP,DSNVOL,DSN4
      PEXIT
C
C     PRINT RACF REPORT HEADING
C
      PENTRY PRACFH
      LRACF=MAXLN
      PGRACF=PGRACF+1
      WRITE(FRACF,10)RPT32,GDATE,TIME,PGRACF
      WRITE(FRACF,230)
      PEXIT
C
C     PROCESS TYPE 19 - DASD MOUNT - PG 112
C
      PENTRY TYPE19
      CALL SMFIO(MOVE,RTYPE,16,6,0,VOLUME,
     *                      48,2,2,FREEC,
     *                      62,2,2,MODULE,
     *                      60,2,2,UCB)
      PM  VSTACK
      CALL CS302(UCB,CHAN,CU,UNIT)
      DOCASE CHAN
          CASE 2
               IF   (CU.EQ.5)
                    IF   (M140(UNIT).EQ.0)
                         M140(UNIT)=1
                         V140(UNIT)=VOLUME
                         F140(UNIT)=FREEC
                         P140(UNIT)=MODULE
                    ELSE
                         M140(UNIT)=M140(UNIT)+1
                         IF   (V140(UNIT).NE.VOLUME)
                              V140(UNIT)=MVOL
                              F140(UNIT)=0
                         FI
                    FI
               FI
          ESAC
          CASE 3
               IF   (CU.EQ.5)
                    IF   (M240(UNIT).EQ.0)
                         M240(UNIT)=1
                         V240(UNIT)=VOLUME
                         F240(UNIT)=FREEC
                         P240(UNIT)=MODULE
                    ELSE
                         M240(UNIT)=M240(UNIT)+1
                         IF   (V240(UNIT).NE.VOLUME)
                              V240(UNIT)=MVOL
                              F240(UNIT)=0
                         FI
                    FI
               FI
          ESAC
          CASE 10
               IF   (CU.EQ.5)
                    IF   (M940(UNIT).EQ.0)
                         M940(UNIT)=1
                         V940(UNIT)=VOLUME
                         F940(UNIT)=FREEC
                         P940(UNIT)=MODULE
                    ELSE
                         M940(UNIT)=M940(UNIT)+1
                         IF   (V940(UNIT).NE.VOLUME)
                              V940(UNIT)=MVOL
                              F940(UNIT)=0
                         FI
                    FI
               FI
          ESAC
          CASE 11
               IF   (CU.EQ.5)
                    IF   (MA40(UNIT).EQ.0)
                         MA40(UNIT)=1
                         VA40(UNIT)=VOLUME
                         FA40(UNIT)=FREEC
                         PA40(UNIT)=MODULE
                    ELSE
                         MA40(UNIT)=MA40(UNIT)+1
                         IF   (VA40(UNIT).NE.VOLUME)
                              VA40(UNIT)=MVOL
                              FA40(UNIT)=0
                         FI
                    FI
               FI
          ESAC
      ESACOD
      PEXIT
C
C     VOLUME STACK PROCESSING
C
      PENTRY VSTACK
      I=1
      DO  WHILE,(I.LE.NVOLS)
          IF   (VOLUME.EQ.VOLS(I))
               MVOLS(I)=MVOLS(I)+1
               PEXIT
          FI
          I=I+1
      OD
      IF  (I.GT.MAXV)
          I=MAXV
          VOLS(I)=MVOL
          FSVOLS(I)=0
      ELSE
          NVOLS=I
          VOLS(I)=VOLUME
          FSVOLS(I)=FREEC
          MVOLS(I)=0
      FI
      MVOLS(I)=MVOLS(I)+1
      PEXIT
C
C     PROCESS TYPE 20 - JOB COMMENCEMENT - PG 106
C
      PENTRY TYPE20
      CALL SMFIO(MOVE,RTYPE,30,5,0,CSR,
     *                      35,1,0,CSRSUF)
      IF   (PREFIX.NE.OT)
           CALL SMFIO(MOVE,RTYPE,40,20,0,PGMR)
      FI
      CALL HHMMSS(RTIME,SHH,SMM,SSS)
      HMINIT=SHH*100+SMM
      JSTART=TRUE
      PEXIT
C
C     PROCESS TYPE 26 - HASP JOB PURGE - PG 88 OR 124 (MVS)
C
      PENTRY TYPE26
      ETIME=RTIME
      EDATE=RDATE
      CALL HHMMSS(RTIME,SHH,SMM,SSS)
      HMPURG=SHH*100+SMM
      JPRINT=TRUE
      IF   (CPUID.EQ.1)
           CALL SMFIO(MOVE,RTYPE,30,5,0,CSR,
     *                      35,1,0,CSRSUF,
     *                      46+5,1,3,JOBTYP,
     *                      46+6,4,0,HASP,
     *                      46+18,20,0,PGMR,
     *                      46+39,1,0,CLASS,
     *                      46+40,2,2,JPRY,
     *                      46+42,2,2,PRTPRY,
     *                      132+04,4,0,RET,
     *                      132+28,4,0,XST,
     *                      132+36,4,0,XET,
     *                      132+44,4,0,PST,
     *                      132+52,4,0,PET,
     *                      132+08,4,0,RED,
     *                      132+32,4,0,XSD)
      ELSEIF (CPUID.EQ.2)
             CALL SMFIO(MOVE,RTYPE,30,5,0,CSR,
     *                      35,1,0,CSRSUF,
     *                      50,1,3,JOBFL)
             JOBFL=JOBFL/64
             IF   (JOBFL/2*2.NE.JOBFL)
                  PEXIT
             FI
             CALL SMFIO(MOVE,RTYPE,51,1,3,JOBTYP,
     *                      52,4,0,HASP,
     *                      64,20,0,PGMR,
     *                      85,1,0,CLASS,
     *                      86,1,3,JPRY,
     *                      88,1,3,PRTPRY,
     *                      144,4,0,RET,
     *                      168,4,0,XST,
     *                      176,4,0,XET,
     *                      184,4,0,PST,
     *                      192,4,0,PET,
     *                      148,4,0,RED,
     *                      172,4,0,XSD)
      ELSE
          PEXIT
      FI
      IF   (CLASS.EQ.P)LJFCLS=P
      JPRY=JPRY/16
      V=JOBTYP/32
      IF  (V/2*2.NE.V)
          JHOLD=HOLD
      FI
      IF  (XST.EQ.0)
          JSTART=TRUE
          JENDED=TRUE
          IF   (JOBTYP/2*2.EQ.JOBTYP)
               ABEND=HJCL
               JERRS=JERRS+1
               PM   PRCSCC
          ELSEIF (USERID.GE.1000)
               ABEND=CANIJ
               SCC=ABEND
               ABJOB=JOB
               TX=7
               PM   PUTX
          FI
      ELSE
          IF  ((JOBTYP/4*4.NE.JOBTYP).AND.(USERID.GE.1000)
     *         .AND.(JABEND.NE.TRUE)
     *        )
               ABEND=CANFJ
               SCC=ABEND
               ABJOB=JOB
               TX=7
               PM   PUTX
          FI
          CALL CVTPB(RED)
          CALL CVTPB(XSD)
          TX=8
C****     PM   PUTX       SURPRESS R49 DUE TO MVS MISSING INIT CODES
      FI
      PEXIT
C
C     PROCESS TYPE34 - TSO SESSION - PG 90
C
      PENTRY TYPE34
      K=0
      L=0
      CALL SMFIO(MOVE,RTYPE,100,2,2,K,102,2,2,L)
      CALL SMFIO(MOVE,RTYPE,86,4,0,AWSTRT,
     *                      90,4,0,AWEND,
     *                      51,2,2,STEPAC,
     *                      83,1,0,STEPAT,
     *                      54,8,0,PGM,
     *                      30,5,0,CSR,
     *                      35,1,0,CSRSUF,
     *                      2,4,0,XET,
     *                      22,4,0,XST,
     *                      26,4,0,STRTD,
     *                      22,4,0,STRTT,
     *                      2,4,0,ENDT,
     *                      72,2,2,SYSTM,
     *                      74,2,2,STEPM,
     *                      95,3,1,STEPCR,
     *                      103+L,3,1,STEPC,
     *                      43,4,0,TPLPUT,
     *                      47,4,0,TPLGET,
     *                      K+00,4,0,PGIN,
     *                      K+04,4,0,PGOUT)
      PM  PDEV
      JPGIO=JPGIO+PGIN+PGOUT
      TSODCP=TSODCP+STEPDX
      TSOGET=TSOGET+TPLGET
      TSOPUT=TSOPUT+TPLPUT
      TSOGPS=TSOGPS+TPLGET+TPLPUT
      NSTEPS=1
      PM  CHKPGM
      TSOAW=TSOAW+AWT
      TSOSTP=TSOSTP+1
      EXDATE=RDATE
      EXTIME=RTIME
      CLASS=X
C
C     SURPRESS INVALID TSO RETURN CODES
C
      IF  (ABEND.GT.ZERO)ABEND=ZERO
      CALL CVTPB(STRTD)
      IF  (STEPM+SYSTM.GT.MEMORY)MEMORY=STEPM+SYSTM
      IF   (PGM.EQ.TSOTMP)
           PM  CHKAWT
           CPU=CPU+STEPC+STEPCR
           TSOTCB=TSOTCB+STEPC
           TSOSRB=TSOSRB+STEPCR
           MKM=MKM+(STEPM+SYSTM)*(STEPC+STEPCR)/6000
           TSOMKM=TSOMKM+(STEPM+SYSTM)*(STEPC+STEPCR)/6000
      FI
      LINES=LINES+TPLGET+TPLPUT
      PM  PGMRPT
      PM  CHKSCC
      PEXIT
C
C     PROCESS TYPE 35 - TSO LOGOFF - PG 93
C
      PENTRY TYPE35
      JSTEPS=1
      TLOGON=TLOGON+1
      CALL SMFIO(MOVE,RTYPE,30,5,0,CSR,
     *                      35,1,0,CSRSUF)
      JENDED=TRUE
      EXDATE=RDATE
      EXTIME=RTIME
      CLASS=X
      CALL HHMMSS(RTIME,SHH,SMM,SSS)
      HMTERM=SHH*100+SMM
      IF   (CPUID.EQ.1)JPRINT=TRUE
      PEXIT
C
C     PROCESS TYPE 40 - TSO ALLOC - PG 95
C
      PENTRY TYPE40
      PM  PDEV
      PEXIT
C
C     PROCESS TYPE 231 - PROCEDURE USAGE RECORD WRITTEN BY FPC IEFUJV
C                        READER EXIT DURING JCL CONVERSION.
C
C                        00-13 STD. SMF RECORD PREFIX
C                        14-21 JOBNAME
C                        22-25 RDR TIME
C                        26-29 RDR DATE
C                        30-37 PROCEDURE NAME FROM JCL EXEC STMT.
C
      PENTRY TYP231
      CALL   SMFIO(MOVE,RTYPE,30,8,0,PGM)
      STEPC=0
      STEPDX=0
      STEPTX=0
      STEPHX=0
      STEPXX=0
      PM   PGMRPT
      PEXIT
      END
      SUBROUTINE GSUM(N,GTOT,G1,G2,G3,G4,G5,G6,G7,G8)
      IMPLICIT INTEGER(A-Z)
      INTEGER GTOT(1)
      INTEGER G1(1),G2(1),G3(1),G4(1),G5(1),G6(1),G7(1),G8(1)
      DO  I=1,8
          GTOT(I)=0
      OD
      DO  I=1,N
          GTOT(1)=GTOT(1)+G1(I)
          GTOT(2)=GTOT(2)+G2(I)
          GTOT(3)=GTOT(3)+G3(I)
          GTOT(4)=GTOT(4)+G4(I)
          GTOT(5)=GTOT(5)+G5(I)
          GTOT(6)=GTOT(6)+G6(I)
          GTOT(7)=GTOT(7)+G7(I)
          GTOT(8)=GTOT(8)+G8(I)
      OD
      RETURN
      END
