*          DATA SET GU118000   AT LEVEL 039 AS OF 09/08/76
         TITLE 'GU118000 - STRUCTURED FORTRAN TRANSLATOR'
         PRINT NOGEN
*              AUTHOR.   DON HIGGINS.
*                        FLORIDA POWER CORPORATION, B-3
*                        P.O. BOX 14042
*                        ST. PETERSBURG, FLORIDA 33733
*                        (813) 866-4145
*              DATE.     08/08/74.
*              REMARKS.  TRANSLATE STRUCTURED FORTRAN SOURCE PROGRAM
*                        INTO FORTRAN IV AS FOLLOWS.
*                        PROGRAM NAME WAS ER011800 UNTIL 08/26/76. DSH
*                        REVISION 1 - 8/26/76 BY DSH
*                             1.   ADD  ELSEIF (TEST) EXTENTION
*                             2.   FIX  ERROR - 0 IS NOT A CONTINUE
*                                               IN COLUMN 6 PER STD.
*                             3.   IF OPTION IS NOLIST, SURPRESS
*                                  COMMENTS ON OUTPUT FILE.
*
*                   INPUT               OUTPUT
*                1.      IF (TEST)       IF(.NOT.(TEST))GOTO 100
*
*                1.1     ELSEIF (TEST)   GO TO 110
*                                    100 IF(.NOT.(TEST))GOTO 120
*
*                2.      ELSE            GO TO 130
*                                    120 CONTINUE
*
*                3.      FI          110 CONTINUE
*                                    130 CONTINUE
*
*                4.      PERFORM RTN     ASSIGN 4 TO RTN
*                        (OR PM  RTN)    GO TO 3
*                                      4 CONTINUE
*
*                5.      PENTRY RTN    3 CONTINUE
*
*                6.      PEXIT           GO TO 5    (NOTE. SEE 7.)
*
*
*                7.      END           5 GOTO RTN,(4,,, ,)
*                                        END
*
*                8.      DO I=J,K,L      DO 6 I=J,K,L
*
*                9.      OD            6 CONTINUE
*
*               10.      DO WHILE,(TEST)   7 IF(.NOT.(TEST))GO TO 8
*
*               11.      OD                  GO TO 7
*                                          8 CONTINUE
*
*               12.      DO UNTIL,(TEST)     GOTO 9
*                                         10 IF(TEST)GO TO 11
*                                          9 CONTINUE
*
*               13.      OD                  GOTO 10
*                                         11 CONTINUE
*
*               14.      DOCASE INDEX    GO TO 12
*
*               15.      CASE  2      14 CONTINUE
*
*               16.      ESAC            GO TO 13
*
*               17.      CASE  ELSE   15 CONTINUE
*
*               18.      ESACOD       12 GOTO (15,14),INDEX
*                                        GO TO 15
*                                     13 CONTINUE
*
*               19.      DO FOREVER   14 CONTINUE
*
*               20.      OD              GO TO 14
*              FILES.
*                        SYSUT1 - INPUT SOURCE
*                        SYSUT2 - OUTPUT SOURCE
*                        SYSPRINT - SOURCE LISTING AND ERROR MESSAGES.
*              PARMS.
*                   LIST - LIST OUTPUT ON SYSPRINT.
*                   NOLIST - SURPRESS LIST ON SYSPRINT AND
*                            COMMENTS ON SYSUT2.
*              LIMITATIONS.
*                1. MAXIMUM NESTING OF  IF, DO, OR DOCASE INSTRUCTIONS
*                   IS CONTROLLED BY MAXNEST (CURRENTLY SET TO 10).
*                2. NAME OF PERFORMED ROUTINE  MUST BE VALID INTEGER
*                   FOR USE IN GENERATED ASSIGN AND GOTO STATEMENTS.
*                3. INDEX FOR DOCASE MUST BE VALID INTEGER FOR USE IN
*                   GO TO STATEMENT.
*                4. INDEX VALUE FOR CASE MUST BE 1 TO 190 (LIMITED BY
*                   LENGTH OF GOTO STATEMENT). CASES MAY BE IN ANY
*                   ORDER.
*
*              REGISTERS.
*                R0-R1        ARGUMENTS BETWEEN ROUTINES
*                R2-R7        WORK WITHIN A ROUTINE NOT SAVED
*                R8           SAVE INPUT SCAN POINTER
*                R9           INPUT SCAN POINTER
*                R10          OUTPUT SCAN POINTER
*                R11-R13      BASES
*                R14-R15      LINKAGE AND WORK NOT SAVED
*
*
*
         TITLE 'MAINLINE'
ER011800 SUBENTRY BASES=(R13,R11,R12)
         PM    R010PARM  PROCESS PARM FIELD OPTIONS IF ANY
         OPEN  (SYSUT1,,SYSUT2,(OUTPUT),SYSPRINT,(OUTPUT))
         PM    R020READ  READ FIRST RECORD INTO LOOK AHEAD BUFFER
         PM    R030GETR  READ FIRST LOGICAL RECORD
         DO    WHILE,(CLI,EOF,TRUE,NE)  IS IT END OF FILE
               IF   (CLI,RECTYPE,FORTSTMT,EQ) IS THIS A FORTRAN STMT
                    PM   R040SCAN             YES, SCAN FOR NEW CMDJ
               FI
               PM   R050PUTR
               PM   R030GETR  GET NEXT LOGICAL STATEMENT
         OD
         EDIT  TO=DERRS,FROM=PERRS,MASK=' ZZZ99'
         LA    R2,TOTLINE
         PM    R060PUTL       PRINT NUMBER OF ERRORS
         CLOSE (SYSUT1,,SYSUT2,,SYSPRINT)
         IF    (CP,PERRS,=P'0',P)  ANY ERRORS
               LI   R15,8     RETURN CODE = 8
         ELSE
               ZR   R15       RETURN CODE = 0
         FI
         SUBEXIT RC=(R15)
PERRS    DC    PL3'0'
TOTLINE  DS    0CL133
         DC    C'0TOTAL ERRORS FOUND'
DERRS    DC    CL6' '
         FILL  TOTLINE
         TITLE 'R010PARM - PROCESS PARM FIELD IF ANY'
* INPUT - R1=A(PARMLIST FROM OS EXEC COMMAND)
* OUTPUT- OPTION=LIST/NOLIST
R010PARM PENTRY
         L     R1,0(R1)
         LH    R2,0(R1)
         IF    (LTR,R2,R2,P)
               SI   R2,1
               IF   (EX,R2,CLCNOLST,EQ)
                    MVI  OPTION,NOLIST
               FI
         FI
         PEXIT
CLCNOLST CLC   2(0,R1),=C'NOLIST'
OPTION   LOGICAL LIST,(LIST,NOLIST)
         TITLE 'R020READ - READ RECORD'
* INPUT - SYSUT1 FILE
* OUTPUT- BUFFER=RECORD
*         EOF=PEND
*         PREC=RECORD COUNT
*
R020READ PENTRY
         GET   SYSUT1,BUFFER
         PEXIT
R025EOF  TAG
         MVI   EOF,PEND
         PEXIT
SYSUT1   DCB   DSORG=PS,MACRF=GM,DDNAME=SYSUT1,                        X
               RECFM=FB,LRECL=80,EODAD=R025EOF
EOF      LOGICAL FALSE,(FALSE,PEND,TRUE)
BUFFER   DS    CL80
         TITLE 'R030GETR - GET LOGICAL FORTRAN IV RECORD AND TYPE'
* INPUT - BUFFER, EOF
* OUTPUT- RECORD=LOGICAL CONTIGUOVS FORTRAN STATEMENT (UP TO 19 CONT)
*                TERMINATED BY EOR (X'FF')
*         ARECEOF=A(EOR IN RECORD)
*         PFORTLN=FIRST RECORD NUMBER IN STATEMENT
*         RECTYPE=FORTSTMT/FORTCOMM/SYSCTL/INVALID
*         EOF=TRUE
R030GETR PENTRY
         MVI   RECTYPE,INVALID
         DO    WHILE,(CLI,RECTYPE,INVALID,EQ)
               IF   (CLI,EOF,PEND,EQ)
                    MVI  EOF,TRUE
                    PEXIT
               FI
               MVC  RECORD(72),BUFFER   MOVE FIRST RECORD
               LA   R9,RECORD+72        SET POINTER
               MVC  OUTREC+72(8),BUFFER+72        SAVE ANY SEQUENCE #
               PM   R020READ
               IF   (CLI,RECORD,C'C',EQ)
                    MVI  RECTYPE,FORTCOMM
               ELSEIF (TRT,RECORD(5),ALPHANUM,NE)
                    MVI  RECTYPE,SYSCTL
               ELSEIF (CLI,RECORD+5,C' ',EQ),OR,(CLI,RECORD+5,C'0',EQ)
                    MVI  RECTYPE,FORTSTMT
                    DO   WHILE,(CLI,EOF,FALSE,EQ),                     X
               AND,(CL,R9,=A(RECEOF),L),                               X
               AND,(CLI,BUFFER,C'C',NE),                               X
               AND,(TRT,BUFFER(5),ALPHANUM,EQ),                        X
               AND,(CLI,BUFFER+5,C' ',NE),                             X
               AND,(CLI,BUFFER+5,C'0',NE)
                         MVC  0(66,R9),BUFFER+6
                         AAI  R9,66
                         PM   R020READ
                    OD
               ELSE
                    MVC  ERRDL1(72),RECORD
                    MVC  ERRDL1+72(8),OUTREC+72
                    LA   R2,ERRLINE1
                    PM   R060PUTL
                    AP   PERRS,=P'1'
               FI
         OD
         MVI   0(R9),EOR
         ST    R9,ARECEOF
         PEXIT
FORTSTMT EQU   0
FORTCOMM EQU   1
SYSCTL   EQU   2
INVALID  EQU   3
RECTYPE  DC    AL1(INVALID)
ARECEOF  DC    A(RECEOF)
EOR      EQU   X'FF'
ERRLINE1 DS    0CL133
         DC    C' ***** ERROR *****'
         DC    C' BAD RECORD '
ERRDL1   DC    CL80' ',C' '
         DC    C' ***** ERROR *****'
         FILL  ERRLINE1
         TITLE 'R040SCAN - SCAN STATEMENT FOR KEYWORDS AND PROCESS'
* INPUT - FORTRAN STATEMENT IN RECORD
* OUTPUT- PASS CONTROL TO KEYWORD PROCESS ROUTINES WHICH WILL
*         GENERATE EQUIVALENT FORTRAN IV CODE.
*
*
R040SCAN PENTRY
         LA    R9,RECORD+5
         USING CHAR,R9
               PM   R070GETC       GET NEXT INPUT NON-BLANK CHAR
               DOCASE CHAR
                    CASE C'C'
                         PM   R080SCNC       CASE
                    ESAC
                    CASE C'D'
                         PM   R090SCND,      DO, DOCASE
                    ESAC
                    CASE C'E'
                         PM   R100SCNE       ELSE, ELSEIF, ESAC, ESACOD
                    ESAC
                    CASE C'F'
                         PM   R110SCNF       FI
                    ESAC
                    CASE C'I'
                         PM   R120SCNI       IF
                    ESAC
                    CASE C'O'
                         PM   R130SCNO       OD
                    ESAC
                    CASE C'P'
                         PM   R140SCNP       PENTRY, PERFORM, PEXIT, PM
                    ESAC
               ESACOD
         PEXIT
         TITLE 'R050PUTR - PUT LOGICAL RECORD'
* INPUT - RECORD OR ALTREC DEPENDING ON NEWREC
* OUTPUT- OUTREC RECORDS ON SYSUT2 VIA R055WOUT + SYSPRINT VIA R060PUTL
*         NEWREC=FALSE
*
R050PUTR PENTRY
         STM   R4,R5,R050SAVE
         IF    (CLI,NEWREC,TRUE,EQ)
               MVI  NEWREC,FALSE
               L    R4,=A(ALTREC)       R4=A(RECORD FOR OUTPUT)
               LR   R5,R10              R5=A(END OF RECORD)
         ELSE
               LA   R4,RECORD
               L    R5,ARECEOF
         FI
         MVI   0(R5),C' '          OVERLAY EOR AND PAD
         MVC   1(65,R5),0(R5)
         MVC   OUTREC(72),0(R4)    MOVE FIRST RECORD
         AAI   R4,72
         PM    R055WOUT
         IF    (CLI,OUTREC,C'C',EQ)
               MVC  OUTREC(6),=CL6'C'
         ELSE
               MVC  OUTREC(6),=CL6'     *'
         FI
         DO    WHILE,(CLR,R4,R5,L)
               MVC  OUTREC+6(66),0(R4)
               AAI  R4,66
               IF   (CLR,R4,R5,L),OR,(CLC,OUTREC+6(66),=CL66' ',NE)
                    PM   R055WOUT
               FI
         OD
         L     R1,ARECEOF
         MVI   0(R1),EOR      RESTORE EOR IN RECORD
         LM    R4,R5,R050SAVE
         PEXIT
R050SAVE DC    2F'0'
OUTLINE  DS    0CL133
         DC    C' '
OUTREC   DS    CL80
         FILL  OUTLINE
R055WOUT PENTRY
         IF    (CLI,OPTION,LIST,EQ)
               LA   R2,OUTLINE
               PM   R060PUTL
         ELSEIF (CLI,OUTREC,C'C',EQ)
               PEXIT
         FI
         PUT   SYSUT2,OUTREC
         PEXIT
SYSUT2   DCB   DSORG=PS,MACRF=PM,DDNAME=SYSUT2,RECFM=FB,LRECL=80
         TITLE 'R060PUTL - PRINT LINE WITH PAGE CONTROL'
* INPUT - R2=A(LINE TO PRINT)
* OUTPUT- RECORDS ON SYSPRINT VIA R065WRTL
*
R060PUTL PENTRY
         IF    (SP,LINE,=P'1',NP)
               ZAP  LINE,MAXLINE
               AP   PAGE,=P'1'
               DTIME TIMEDATE
               EDIT TO=DPAGE,FROM=PAGE,MASK=' ZZZZZ'
               LA   R0,H1
               PM   R065WRTL
               LA   R0,H2
               PM   R065WRTL
               LA   R0,SPACE
               PM   R065WRTL
         FI
         LR    R0,R2
         PM    R065WRTL
         PEXIT
R065WRTL PENTRY
         PUT   SYSPRINT
         PEXIT
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,RECFM=FA,BLKSIZE=133
LINE     DC    PL3'0'
MAXLINE  DC    PL3'55'
PAGE     DC    PL3'0'
H1       DS    0CL133
         DC    C'1',C'STRUCTURED FORTRAN IV TRANSLATION LISTING'
TIMEDATE DC    CL22' ',C'  PAGE'
DPAGE    DC    CL6' '
         FILL  H1
H2       DS    0CL133
         DC    C'0'
         DC    C'1...5...10...15...20...25...30...35...40'
         DC    C'...45...50...55...60...65...70...75...80'
         FILL  H2
SPACE    DC    CL133' '
         TITLE 'R070GETC - GET NEXT NON-BLANK CHARACTER IN RECORD'
* INPUT - R9 SCAN POINTER
* OUTPUT- R9 SCAN POINTER MOVED TO NEXT NON-BLANK
*
R070GETC PENTRY
         AAI   R9,1
         IF    (CLI,0(R9),C' ',EQ)
               DO   WHILE,(TRT,0(256,R9),SKIPBLK,EQ)
                    AAI  R9,256
               OD
               LA   R9,0(R1)
         FI
         PEXIT
SKIPBLK  DC    64X'FF',X'00',191X'FF'
         TITLE 'R080SCNC - SCAN FOR CASE'
* INPUT - RECORD
* OUTPUT- RECORD OR ALTREC VIA R170CASE
*
R080SCNC PENTRY
         LA    R0,3
         LA    R1,=C'ASE'
         PM    R150COMP
         IF    (CLI,KEYWORD,TRUE,EQ)
               LR   R8,R9
               PM   R160GETN
               IF   (LTR,R1,R1,P)
                    DO   WHILE,(LTR,R1,R1,P)
                         IF   (CLI,CHAR,EOR,EQ)
                              LR   R9,R8
                              PM   R170CASE
                              PEXIT
                         ELSEIF (CLI,CHAR,C',',NE)
                              PEXIT
                         FI
                         PM   R160GETN
                    OD
               ELSE
                    LR   R9,R8
                    LA   R0,4
                    LA   R1,=C'ELSE'
                    PM   R150COMP
                    IF   (CLI,KEYWORD,TRUE,EQ)
                         PM   R070GETC
                         IF   (CLI,CHAR,EOR,EQ)
                              PM   R170CASE
                         FI
                    FI
               FI
         FI
         PEXIT
         TITLE 'R090SCND- SCAN FOR DO, DO WHILE, DO UNTIL, DOCASE'
* INPUT - RECORD
* OUTPUT- RECORD OR ALTREC VIA R180DO/R190DOCS
*
R090SCND PENTRY
         PM    R070GETC
         IF    (CLI,CHAR,C'O',EQ)
               LR   R8,R9
               LA   R0,4
               LA   R1,=C'CASE'
               PM   R150COMP
               IF   (CLI,KEYWORD,TRUE,EQ)
                    PM   R200GETV
                    IF   (CLI,VARIABLE,TRUE,EQ),AND,(CLI,CHAR,EOR,EQ)
                         PM   R190DOCS
                    FI
               ELSE
                    LR   R9,R8
                    PM   R200GETV
                    IF   (CLI,VARIABLE,TRUE,EQ)
                         IF   (CLI,CHAR,C'=',EQ)
                              PM   R210SKPA
                              IF   (CLI,CHAR,C',',EQ)
                                   LR   R9,R8
                                   PM   R180DO
                              FI
                         ELSEIF (CLI,CHAR,C',',EQ)
                              PM   R070GETC
                              IF   (CLI,CHAR,C'(',EQ)
                                   LR   R8,R9
                                   PM   R290FIND
                                   IF   (CLI,CHAR,C')',EQ)
                                        IF (CLC,INTEGER,=CL6'WHILE',EQ)
                                             LR   R9,R8
                                             PM   R370DOWH
                                    ELSEIF (CLC,INTEGER,=CL6'UNTIL',EQ)
                                             LR   R9,R8
                                             PM   R380DOUN
                                        FI
                                   FI
                              FI
                         FI
                    ELSE
                         LR   R9,R8
                         LA   R0,7
                         LA   R1,=C'FOREVER'
                         PM   R150COMP
                         IF   (CLI,KEYWORD,TRUE,EQ)
                              PM   R420DOEV
                         FI
                    FI
               FI
         FI
         PEXIT
         TITLE 'R100SCNE - SCAN FOR ELSE, ESAC, ESACOD'
* INPUT - RECORD
* OUTPUT  RECORD/ALTRE VIA R240ELSE/R250ESAC/R260SCOD
* OUTPUT- RECORD/ALTREC VIA R240ELSE/R245ELIF/R250ESAC/R260SCOD
*
R100SCNE PENTRY
         ST    R9,AELSE  SAVE START OF ELSE
         LR    R8,R9
         LA    R0,3
         LA    R1,=C'LSE'
         PM    R150COMP
         IF    (CLI,KEYWORD,TRUE,EQ)
                    ST   R9,AELSE+4 SAVE END OF ELSE
               PM   R070GETC
               IF   (CLI,CHAR,EOR,EQ)
                    PM   R240ELSE
               ELSEIF    (CLI,CHAR,C'I',EQ)
                    PM   R070GETC
                    IF   (CLI,CHAR,C'F',EQ)
                         PM   R070GETC
                         IF   (CLI,CHAR,C'(',EQ)
                              LR   R8,R9
                              PM   R290FIND
                              IF   (CLI,CHAR,C')',EQ)
                                   PM   R070GETC
                                   IF   (CLI,CHAR,EOR,EQ)
                                        PM   R245ELIF
                                   FI
                              FI
                         FI
                    FI
               FI
         ELSE
               LR   R9,R8
               LA   R0,3
               LA   R1,=C'SAC'
               PM   R150COMP
               IF   (CLI,KEYWORD,TRUE,EQ)
                    PM   R070GETC
                    IF   (CLI,CHAR,EOR,EQ)
                         PM   R250ESAC
                    ELSE
                         IF   (CLI,CHAR,C'O',EQ)
                              PM   R070GETC
                              IF   (CLI,CHAR,C'D',EQ)
                                   PM   R070GETC
                                   IF   (CLI,CHAR,EOR,EQ)
                                        PM   R260SCOD
                                   FI
                              FI
                         FI
                    FI
               ELSE
                    LR   R9,R8
                    LA   R0,2
                    LA   R1,=C'ND'
                    PM   R150COMP
                    IF   (CLI,KEYWORD,TRUE,EQ)
                         PM   R070GETC
                         IF   (CLI,CHAR,EOR,EQ)
                              PM   R440END
                         FI
                    FI
               FI
         FI
         PEXIT
         TITLE 'R110SCNF - SCAN FOR FI'
* INPUT - RECORD
* OUTPUT-RECORD/ALTREC VIA R270FI
*
R110SCNF PENTRY
         PM    R070GETC
         IF    (CLI,CHAR,C'I',EQ)
               PM   R070GETC
               IF   (CLI,CHAR,EOR,EQ)
                    PM   R270FI
               FI
         FI
         PEXIT
         TITLE 'R120SCNI - SCAN FOR IF'
* INPUT - RECORD
* OUTPUT- RECORD/ALTREC VIA R280IF OR R330PEXT
*       - IFPEXIT=TRUE/FALSE
R120SCNI PENTRY
         PM    R070GETC
         IF    (CLI,CHAR,C'F',EQ)
               PM   R070GETC
               IF   (CLI,CHAR,C'(',EQ)
                    LR   R8,R9
                    PM   R290FIND
                    IF   (CLI,CHAR,C')',EQ)
                         PM   R070GETC
                         IF   (CLI,CHAR,EOR,EQ)
                              PM   R280IF
                         ELSE
                              IF   (CLI,CHAR,C'P',EQ)
                                   LR   R8,R9
                                   LA   R0,4
                                   LA   R1,=C'EXIT'
                                   PM   R150COMP
                                   IF   (CLI,KEYWORD,TRUE,EQ)
                                        PM   R070GETC
                                        IF   (CLI,CHAR,EOR,EQ)
                                             LR   R9,R8
                                             SI   R9,1
                                             MVI  IFPEXIT,TRUE
                                             PM   R330PEXT
                                        FI
                                   FI
                              FI
                         FI
                    FI
               FI
         FI
         PEXIT
         TITLE 'R130SCND - SCAN FOR OD'
* INPUT - RECORD
* OUTPUT- RECORD/ALTREC VIA R300OD
*
R130SCNO PENTRY
         PM    R070GETC
         IF    (CLI,CHAR,C'D',EQ)
               PM   R070GETC
               IF   (CLI,CHAR,EOR,EQ)
                    PM   R300OD
               FI
         FI
         PEXIT
         TITLE 'R140SCNP - SCAN FOR PENTRY, PERFORM, PEXIT, PM'
* INPUT - RECORD
* OUTPUT- RECORD/ALTREC VIA R310PENT/R320PM/R330PEXT
*
R140SCNP PENTRY
         PM    R070GETC
         IF    (CLI,CHAR,C'M',EQ)
               PM   R200GETV
               IF   (CLI,VARIABLE,TRUE,EQ),AND,(CLI,CHAR,EOR,EQ)
                    PM   R320PM
               FI
         ELSE
               IF   (CLI,CHAR,C'E',EQ)
                    LR   R8,R9
                    LA   R0,4
                    LA   R1,=C'NTRY'
                    PM   R150COMP
                    IF   (CLI,KEYWORD,TRUE,EQ)
                         PM   R200GETV
                         IF   (CLI,VARIABLE,TRUE,EQ)
                              IF   (CLI,CHAR,EOR,EQ)
                                   PM   R310PENT
                              FI
                         FI
                    ELSE
                         LR   R9,R8
                         LA   R0,5
                         LA   R1,=C'RFORM'
                         PM   R150COMP
                         IF   (CLI,KEYWORD,TRUE,EQ)
                              PM   R200GETV
                              IF   (CLI,VARIABLE,TRUE,EQ)
                                   IF   (CLI,CHAR,EOR,EQ)
                                        PM   R320PM
                                   FI
                              FI
                         ELSE
                              LR   R9,R8
                              LA   R0,3
                              LA   R1,=C'XIT'
                              PM   R150COMP
                              IF   (CLI,KEYWORD,TRUE,EQ)
                                   PM   R070GETC
                                   IF   (CLI,CHAR,EOR,EQ)
                                        MVI  IFPEXIT,FALSE
                                        PM   R330PEXT
                                   FI
                              FI
                         FI
                    FI
               FI
         FI
         PEXIT
         TITLE 'R150COMP - COMPARE FOR KEYWORD'
* INPUT - RECORD
*         R0=NUMBER OF CHAR
*         R1=A(KEYWORD)
* OUTPUT- KEYWORD=TRUE/FALSE
*
R150COMP PENTRY
         MVI   KEYWORD,FALSE
         LR    R15,R1
         DO    WHILE,(LTR,R0,R0,P)
               PM   R070GETC
               IF   (CLC,0(1,R15),CHAR,NE)
                    PEXIT
               FI
               AAI  R15,1
               SI   R0,1
         OD
         MVI   KEYWORD,TRUE
         PEXIT
KEYWORD  DC    AL1(FALSE)
         TITLE 'R160GETN - GET NUMBER'
* INPUT - RECORD
* OUTPUT- R1=NUMBER/ZERO
*
R160GETN PENTRY
         ZR    R2
         ZR    R14
         PM    R070GETC
         DO    WHILE,(TRT,CHAR,TRTNUM,NE)
               SI   R2,1
               MH   R14,=H'10'
               AR   R14,R2
               PM   R070GETC
         OD
         LR    R1,R14
         PEXIT
TRTNUM   DC    240X'00',AL1(1,2,3,4,5,6,7,8,9,10),6X'00'
         TITLE 'R170CASE - PROCESS CASE'
* INPUT - R9 = A(EOR FOR ELSE CASE OR START OF CASE NUMBER LIST)
*         RECORD
* OUTPUT- RECORD/ALTREC VIA R050PUTR
*
R170CASE PENTRY
         MVI   RECORD,C'C'
         L     R3,DOCSLVL
         IF    (LTR,R3,R3,Z)
               LA   R1,=CL40'CASE NOT PRECEEDED BY DOCASE'
               PM   R400PERR
               PEXIT
         FI
         PM    R050PUTR
         SLL   R3,2
         L     R3,DOCSSTK-4(R3)
         USING DOCSBLK,R3
         USING CASEBLK,R4
         IF    (CLI,CHAR,EOR,EQ)
               IF   (OC,DOCSELSE,DOCSELSE,NZ)
                    LA   R1,=CL40'CASE IS A DUPLICATE ELSE'
                    PM   R400PERR
                    PEXIT
               FI
               PM   R350GETS
               ST   R1,DOCSELSE
               PM   R390CONT
               PEXIT
         FI
         PM    R350GETS
         LR    R6,R1
         PM    R390CONT
      DO UNTIL,(CLI,CHAR,EOR,EQ)
         PM    R160GETN
         IF    (CL,R1,=A(MAXCASE),H)
               LA   R1,=CL40'CASE VALUE EXCEEDS 218 LIMIT'
               PM   R400PERR
               PEXIT
         FI
         LR    R5,R1
         L     R4,CASEFQE
         IF    (LTR,R4,R4,P)
               MVC  CASEFQE,CASENCS
         ELSE
               LA   R0,CASELNG
               PM   R340GETM
               LR   R4,R1
         FI
         XC    CASEBLK(CASELNG),CASEBLK
         ST    R5,CASEVAL
         ST    R6,CASESTMT
         L     R1,DOCSLCS
         DO    WHILE,(CLC,CASEVAL,CASEVAL-CASEBLK(R1),L)
               L    R1,CASEPCS-CASEBLK(R1)
         OD
         IF    (CLC,CASEVAL,CASEVAL-CASEBLK(R1),EQ)
               LA   R1,=CL40'CASE IS A DUPLICATE OF PREVIOUS CASE'
               PM   R400PERR
               PEXIT
         FI
         L     R2,CASENCS-CASEBLK(R1)
         IF    (LTR,R2,R2,Z)
               ST   R4,CASENCS-CASEBLK(R1)
               ST   R4,DOCSLCS
         ELSE
               ST   R2,CASENCS
               ST   R4,CASENCS-CASEBLK(R1)
               ST   R4,CASEPCS-CASEBLK(R2)
         FI
         ST    R1,CASEPCS
      OD
         PEXIT
         DROP  R3,R4
MAXCASE  EQU   218  MAXIMUM STMT # ALLOWED IN COMPUTED GOTO
         TITLE 'R180DO - PROCESS FORTRAN DO'
* INPUT - RECORD
* OUTPUT- RECORD/ALTREC VIA R050PUTR
*
R180DO   PENTRY
         MVI   RECORD,C'C'
         L     R4,DOLVL
         IF    (CLM,R4,1,=AL1(MAXNEST),EQ)
               LA   R1,=CL40'DO MAXIMUN NESTING EXCEEDED'
               PM   R400PERR
               PEXIT
         FI
         PM    R050PUTR
         AAI   R4,1
         ST    R4,DOLVL
         LA    R0,C'F'
         STC   R0,DOTYPE-1(R4)
         SLL   R4,2
         PM    R220CPYT
         PM    R350GETS
         MVI   0(R10),C' '
         AAI   R10,1
         ST    R1,DOSTK-4(R4)
         PM    R410ADDN
         AAI   R9,1
         PM    R230CPYF
         PEXIT
         TITLE 'R190DOCS - PROCESS DOCASE'
* INPUT - RECORD
*         INTEGER VIA R200GETV
* OUTPUT- RECORD/ALTREC VIA R050PUTR
*
R190DOCS PENTRY
         MVI   RECORD,C'C'
         L     R4,DOCSLVL
         IF    (CLM,R4,1,=AL1(MAXNEST),EQ)
               LA   R1,=CL40'DOCASE MAXIMUM NESTING EXCEEDED'
               PM   R400PERR
               PEXIT
         FI
         PM    R050PUTR
         AAI   R4,1
         ST    R4,DOCSLVL
         SLL   R4,2
         L     R3,DOCSFQE
         USING DOCSBLK,R3
         IF    (LTR,R3,R3,P)
               MVC  DOCSFQE,DOCSNCS
         ELSE
               LA   R0,DOCSLNG
               PM   R340GETM
               LR   R3,R1
         FI
         ST    R3,DOCSSTK-4(R4)
         XC    DOCSBLK(DOCSLNG),DOCSBLK
         MVC   DOCSINT,INTEGER
         PM    R350GETS
         ST    R1,DOCSGOTO
         PM    R360GOTO
         PM    R350GETS
         ST    R1,DOCSEXIT
         LA    R1,DOCSCASE
         ST    R1,DOCSLCS
         PEXIT
         DROP  R3
         TITLE 'R200GETV - GET VARIABLE'
* INPUT - RECORD
* OUTPUT- INTEGER=(NEXT 1 TO 6 ALPHANUMERIC CHARACTERS)
*         VARIABLE=TRUE/FALSE
R200GETV PENTRY
         MVI   VARIABLE,FALSE
         PM    R070GETC
         IF    (TRT,CHAR,ALPHANUM,EQ),AND,(CLI,CHAR,C'0',L)
               MVC  INTEGER(1),CHAR
               MVC  INTEGER+1(5),=CL5' '
               LI   R3,5
               LA   R4,INTEGER+1
               PM   R070GETC
               DO   WHILE,(TRT,CHAR,ALPHANUM,EQ)
                    IF   (LTR,R3,R3,P)
                         MVC  0(1,R4),CHAR
                         AAI  R4,1
                         SI   R3,1
                    ELSE
                         PEXIT
                    FI
                    PM   R070GETC
               OD
               MVI  VARIABLE,TRUE
         FI
         PEXIT
INTEGER  DC    CL6' '
VARIABLE DC    AL1(FALSE)
         TITLE 'R210SKPA - SKIP ALPHANUMERICS'
* INPUT - RECORD
* OUTPUT- MOVE SCAN PTR
*
R210SKPA PENTRY
         AAI   R9,1
         LR    R1,R9
         DO    WHILE,(TRT,0(256,R9),ALPHANUM,EQ)
               AAI  R9,256
         OD
         LR    R9,R1
         PEXIT
         TITLE 'R220CPYT - COPY UP TO SCAN PTR'
* INPUT - RECORD
* OUTPUT- ALTREC
*         NEWREC=TRUE
*
R220CPYT PENTRY
         MVI   RECORD,C' '
         MVI   NEWREC,TRUE
         LR    R15,R9
         LA    R14,RECORD
         SR    R15,R14
         L     R0,=A(ALTREC)
         LR    R10,R0
         AAI   R15,1
         AR    R10,R15
         LR    R1,R15
         MVCL  R0,R14
         PEXIT
         TITLE 'R230CPYF - COPY REMAINDER OF OLD RECORD'
* INPUT - RECORD
* OUTPUT- ALTREC
*
R230CPYF PENTRY
         LR    R0,R10
         L     R1,ARECEOF
         SR    R1,R9
         LR    R14,R9
         AR    R10,R1
         LR    R15,R1
         MVCL  R0,R14
         PEXIT
         TITLE 'R240ELSE - PROCESS ELSE'
* INPUT - RECORD
* OUTPUT- RECORD/ALTREC VIA R050PUTR
*
R240ELSE PENTRY
         MVI   RECORD,C'C'
         L     R4,IFLVL
         IF    (LTR,R4,R4,Z)
               LA   R1,=CL40'ELSE IS NOT PRECEEDED BY IF'
               PM   R400PERR
               PEXIT
         FI
         PM    R050PUTR
         SLL   R4,2
         PM    R350GETS
         LR    R5,R1
         PM    R360GOTO
         PM    R050PUTR
         L     R1,IFSTK-4(R4)
         PM    R390CONT
         ST    R5,IFSTK-4(R4)
         PEXIT
         TITLE 'R245ELIF - PROCESS ELSEIF'
* INPUT - RECORD
* OUTPUT- RECORD/ALTREC VIA R240ELIF/R280IF
*
R245ELIF PENTRY
         PM    R240ELSE
         PM    R050PUTR
         LM    R14,R15,AELSE
         DO    WHILE,(CLR,R14,R15,NH)   BLANK OUT ELSE LEAVING IF(TEST)
               MVI  0(R14),C' '
               AAI  R14,1
         OD
         MVI   ELSEIF,TRUE
         PM    R280IF
         MVI   ELSEIF,FALSE
         PEXIT
         TITLE 'R250ESAC - PROCESS ESAC'
* INPUT - RECORD
* OUTPUT- RECORD/ALTREC VIA R050PUTR
*
R250ESAC PENTRY
         MVI   RECORD,C'C'
         L     R4,DOCSLVL
         IF    (LTR,R4,R4,Z)
               LA   R1,=CL40'ESAC NOT PRECEEDED BY DOCASE/CASE'
               PM   R400PERR
               PEXIT
         FI
         PM    R050PUTR
         SLL   R4,2
         L     R3,DOCSSTK-4(R4)
         USING DOCSBLK,R3
         L     R1,DOCSEXIT
         PM    R360GOTO
         PEXIT
         DROP  R3
         TITLE 'R260SCOD - PROCESS ESACOD'
* INPUT - RECORD
* OUTPUT- RECORD/A
*
R260SCOD PENTRY
         MVI   RECORD,C'C'
         L     R3,DOCSLVL
         IF    (LTR,R3,R3,Z)
               LA   R1,=CL40'ESACOD NOT PRECEEDED BY DOCASE'
               PM   R400PERR
               PEXIT
         FI
         PM    R050PUTR
         LR    R1,R3
         SI    R1,1
         ST    R1,DOCSLVL
         SLL   R3,2
         L     R3,DOCSSTK-4(R3)
         USING DOCSBLK,R3
         USING CASEBLK,R4
         L     R4,DOCSNCS
         IF    (LTR,R4,R4,Z)
               LA   R1,=CL40'ESACOD NOT PRECEEDED BY ANY CASES'
               PM   R400PERR
               PEXIT
         FI
         MVI   NEWREC,TRUE
         L     R10,=A(ALTREC)
         L     R1,DOCSGOTO
         PM    R410ADDN
         MVC   0(6,R10),=C' GOTO('
         AAI   R10,6
         L     R5,DOCSEXIT
         L     R1,DOCSELSE
         IF    (LTR,R1,R1,P)
               LR   R5,R1
         FI
         LI    R6,1
         DO    WHILE,(LTR,R4,R4,P)
               DO   WHILE,(CL,R6,CASEVAL,L)
                    LR   R1,R5
                    PM   R410ADDN
                    MVI  0(R10),C','
                    AAI  R10,1
                    AAI  R6,1
               OD
               L    R1,CASESTMT
               PM   R410ADDN
               MVI  0(R10),C','
               AAI  R10,1
               AAI  R6,1
               L    R4,CASENCS
         OD
         SI    R10,1
         MVC   0(2,R10),=C'),'
         MVC   2(6,R10),DOCSINT
         AAI   R10,8
         PM    R050PUTR
         L     R1,DOCSELSE
         IF    (LTR,R1,R1,P)
               PM   R360GOTO
               PM   R050PUTR
         FI
         L     R1,DOCSEXIT
         PM    R390CONT
         L     R4,DOCSLCS
         L     R1,CASEFQE
         MVC   CASEFQE,DOCSNCS
         ST    R1,CASENCS
         L     R1,DOCSFQE
         ST    R3,DOCSFQE
         ST    R1,DOCSNCS
         PEXIT
         DROP  R3,R4
         TITLE 'R270FI - PROCESS FI'
* INPUT - RECORD
* OUTPUT- RECORD/ALTREC VIA R050PUTR
*
R270FI   PENTRY
         MVI   RECORD,C'C'
         L     R4,IFLVL
         IF    (LTR,R4,R4,Z)
               LA   R1,=CL40'FI NOT PRECEEDED BY IF'
               PM   R400PERR
               PEXIT
         FI
         DO    UNTIL,(CLI,0(R1),FALSE,EQ)
               PM   R050PUTR
               SLL  R4,2
               L    R1,IFSTK-4(R4)
               PM   R390CONT
               SRL  R4,2
               SI   R4,1
               ST   R4,IFLVL
               LA   R1,ELSIFSTK(R4)
         OD
         PEXIT
         TITLE 'R280IF - PROCESS IF'
* INPUT - RECORD
* OUTPUT- RECORD/ALTREC
*
R280IF   PENTRY
         MVI   RECORD,C'C'
         L     R4,IFLVL
         IF    (CLM,R4,1,=AL1(MAXNEST),EQ)
               LA   R1,=CL40'IF MAXIMUM NESTING EXCEEDED'
               PM   R400PERR
               PEXIT
         FI
         AAI   R4,1
         LA    R1,ELSIFSTK-1(R4)
         IF    (CLI,ELSEIF,TRUE,EQ)
               MVI  0(R1),TRUE
         ELSE
               MVI  0(R1),FALSE
               PM   R050PUTR
         FI
         ST    R4,IFLVL
         SLL   R4,2
         SI    R9,1
         PM    R220CPYT
         PM    R350GETS
         LR    R3,R1
         PM    R450ADGO
         PM    R050PUTR
         PM    R350GETS
         ST    R1,IFSTK-4(R4)
         PM    R360GOTO
         PM    R050PUTR
         LR    R1,R3
         PM    R390CONT
         PEXIT
         TITLE 'R290FIND - SCAN FOR END OF LOGICAL TEST EXPRESSION'
* INPUT - RECORD WITH PTR AT OPEN PARENTHESIS
* OUTPUT- UPDATE RECORD PTR TO BALANCED CLOSED PARENTHESIS OR EOR
*
R290FIND PENTRY
         LI    R3,1           R3=PARENTHESIS LEVEL COUNT
         PM    R160GETN
         DO    FOREVER
               IF   (LTR,R1,R1,P)
                    IF   (CLI,CHAR,C'H',EQ)
                         LA   R9,1(R1,R9)    SKIP WH LITERAL ARGUMENTS
                         IF   (CL,R9,ARECEOF,H)
                              L    R9,ARECEOF
                              PEXIT
                         FI
                    FI
               ELSE
                    DO   WHILE,(CLI,CHAR,QUOTE,EQ)
                         AAI  R9,1
                         DO   WHILE,(CLI,CHAR,QUOTE,NE)
                              LR   R1,R9
                              DO   WHILE,(TRT,0(256,R9),SKIPQ,EQ)
                                   AAI  R9,256    SKIP QUOTE LITERALS
                              OD
                              LR   R9,R1
                              IF   (CL,R9,ARECEOF,NL)
                                   PEXIT
                              FI
                              IF   (CLI,CHAR,EOR,EQ)
                                   AAI  R9,1
                              FI
                         OD
                         PM   R070GETC
                    OD
               FI
               LR   R1,R9
               DO   WHILE,(TRT,0(256,R9),SKIPC,EQ)
                    AAI  R9,256    SKIP TO NEXT , ( ) OR EOR
               OD
               LR   R9,R1
               IF   (CLI,CHAR,EOR,EQ)
                    PEXIT
               FI
               IF   (CLI,CHAR,C')',EQ)
                    IF   (SH,R3,=H'1',Z)
                         LR   R14,R9
                         PM   R070GETC
                         IF   (CLI,CHAR,EOR,EQ)
                              LA   R15,1(R14)
                              ST   R15,ARECEOF
                              MVI  0(R15),EOR
                         FI
                         LR   R9,R14
                         PEXIT
                    FI
               ELSE
                    IF   (CLI,CHAR,C'(',EQ)
                         AAI  R3,1
                    FI
               FI
               PM   R160GETN
         OD
QUOTE    EQU   C''''
SKIPQ    DC    256X'00'
         ORG   SKIPQ+QUOTE
         DC    X'FF'
         ORG   SKIPQ+EOR
         DC    X'FF'
         ORG
SKIPC    DC    256X'00'
         ORG   SKIPC+C'('
         DC    X'FF'
         ORG   SKIPC+C')'
         DC    X'FF'
         ORG   SKIPC+C','
         DC    X'FF'
         ORG   SKIPC+EOR
         DC    X'FF'
         ORG
         TITLE 'R300OD - PROCESS OD FOR ALL DO'
* INPUT - RECORD
* OUTPUT- RECORD/ALTREC VIA R050PUTR
*
R300OD   PENTRY
         MVI   RECORD,C'C'
         L     R4,DOLVL
         IF    (LTR,R4,R4,Z)
               LA   R1,=CL40'OD NOT PRECEEDED BY DO'
               PM   R400PERR
               PEXIT
         FI
         PM    R050PUTR
         ZR    R1
         IC    R1,DOTYPE-1(R4)
         SLL   R4,2
         DOCASE (R1)
               CASE C'F'                     FORTRAN DO CONTINUE
                    L    R1,DOSTK-4(R4)
                    PM   R390CONT
               ESAC
               CASE C'W',C'U'                DO WHILE, DO UNTIL
                    L    R1,DOSTK-4(R4)
                    PM   R360GOTO
                    PM   R050PUTR
                    L    R1,DOEXTSTK-4(R4)
                    PM   R390CONT
               ESAC
               CASE C'E'                     DO FOREVER
                    L    R1,DOSTK-4(R4)
                    PM   R360GOTO
               ESAC
         ESACOD
         SRL   R4,2
         SI    R4,1
         ST    R4,DOLVL
         PEXIT
         TITLE 'R310PENT - PROCESS PENTRY'
* INPUT - RECORD
* OUTPUT- RECORD/ALTREC VIR R050PUTR
*
R310PENT PENTRY
         PM    R460CSTK
         MVI   RECORD,C'C'
         PM    R430GETP
         LR    R4,R1
         USING PENTBLK,R4
         L     R1,PENTEXIT
         IF    (LTR,R1,R1,P)
               LA   R1,=CL40'PENTRY - DUPLICATE NAME'
               PM   R400PERR
               XC   PEXTSTMT,PEXTSTMT
               PEXIT
         FI
         PM    R050PUTR
         L     R1,PENTSTMT
         PM    R390CONT
         PM    R350GETS
         ST    R1,PENTEXIT
         ST    R1,PEXTSTMT
         PEXIT
         DROP  R4
         TITLE 'R320PM - PROCESS PERFORM AND PM'
* INPUT - RECORD
* OUTPUT- RECORD/ALTREC VIA R050PUTR
*
R320PM   PENTRY
         MVI   RECORD,C'C'
         PM    R050PUTR
         PM    R430GETP
         LR    R4,R1
         USING PENTBLK,R4
         L     R3,PREFFQE
         USING PREFBLK,R3
         IF    (LTR,R3,R3,P)
               MVC  PREFFQE,PREFNEXT
         ELSE
               LA   R0,PREFLNG
               PM   R340GETM
               LR   R3,R1
         FI
         MVC   PREFNEXT,PENTREF
         ST    R3,PENTREF
         PM    R350GETS
         ST    R1,PREFSTMT
         MVI   NEWREC,TRUE
         L     R10,=A(ALTREC)
         MVC   0(13,R10),=C'      ASSIGN '
         AAI   R10,13
         PM    R410ADDN
         MVC   0(4,R10),=C' TO '
         AAI   R10,4
         MVC   0(6,R10),PENTINT
         AAI   R10,6
         PM    R050PUTR
         L     R1,PENTSTMT
         PM    R360GOTO
         PM    R050PUTR
         L     R1,PREFSTMT
         PM    R390CONT
         PEXIT
         DROP  R3,R4
         TITLE 'R330PEXT - PROCESS PEXIT OR IF(TEST)PEXIT'
* INPUT - RECORD
*         IFPEXIT=TRUE/FALSE
*         RECORD/ALTREC VIA R050PUTR
*
R330PEXT PENTRY
         MVI   RECORD,C'C'
         L     R4,PEXTSTMT
         IF    (LTR,R4,R4,Z)
               LA   R1,=CL40'PEXIT NOT PRECEEDED BY PENTRY'
               PM   R400PERR
               PEXIT
         FI
         PM    R050PUTR
         IF    (CLI,IFPEXIT,TRUE,EQ)
               PM   R220CPYT
               LR   R1,R4
               PM   R450ADGO
         ELSE
               LR   R1,R4
               PM   R360GOTO
         FI
         PEXIT
IFPEXIT  DC    AL1(FALSE)
         TITLE 'R340GETM - GET MEMORY FOR CONTROL BLOCK'
* INPUT - R0= LENGTH
* OUTPUT- R1= ADDRESS OF MEMORY
*
R340GETM PENTRY
         LM    R14,R15,GETMCTL
         IF    (SR,R15,R0,NP)
               ST   R0,GETMARG
               LA   R0,GETMBLK
               GETMAIN R,LV=(0)
               LR   R14,R1
               LA   R15,GETMBLK
               L    R0,GETMARG
               SR   R15,R0
         FI
         LR    R1,R14
         AR    R14,R0
         STM   R14,R15,GETMCTL
         PEXIT
GETMCTL  DC    A(0,0)    ADDR AND LENGTH OF AVAIL MEMORY
GETMARG  DS    F         SAVE REQ. DURING GETMAIN
GETMBLK  EQU   4000
         TITLE 'R350GETS - GET NEXT STATEMENT NUMBER FOR ASSIGNMENT'
* INPUT - NONE
* OUTPUT- R1= NUMBER
*
R350GETS PENTRY
         L     R1,NEXTNUM
         SI    R1,1
         ST    R1,NEXTNUM
         PEXIT
         TITLE 'R360GOTO - SETUP GOTO STMT IN ALTREC'
* INPUT - R1= STMT #
* OUTPUT- ALTREC
*
R360GOTO PENTRY
         MVI   NEWREC,TRUE
         L     R10,=A(ALTREC)
         MVC   0(11,R10),=C'      GOTO '
         AAI   R10,11
         PM    R410ADDN
         PEXIT
         TITLE 'R370DOWH - PROCESS DO WHILE,(TEST)'
* INPUT - RECORD
* OUTPUT- RECORD/ALTREC VIA R050PUTR
*
R370DOWH PENTRY
         MVI   RECORD,C'C'
         L     R4,DOLVL
         IF    (CLM,R4,1,=AL1(MAXNEST),EQ)
               LA   R1,=CL40'DO MAXIMUM NESTING EXCEEDED'
               PM   R400PERR
               PEXIT
         FI
         PM    R050PUTR
         AAI   R4,1
         ST    R4,DOLVL
         LA    R0,C'W'
         STC   R0,DOTYPE-1(R4)
         SLL   R4,2
         PM    R350GETS
         ST    R1,DOSTK-4(R4)
         PM    R390CONT
         PM    R050PUTR
         MVI   NEWREC,TRUE
         L     R10,=A(ALTREC)
         MVC   0(8,R10),=C'      IF'
         AAI   R10,8
         PM    R230CPYF
         PM    R350GETS
         LR    R3,R1
         PM    R450ADGO
         PM    R050PUTR
         PM    R350GETS
         ST    R1,DOEXTSTK-4(R4)
         PM    R360GOTO
         PM    R050PUTR
         LR    R1,R3
         PM    R390CONT
         PEXIT
         TITLE 'R380DOUN - PROCESS DO UNTIL,(TEST)'
* INPUT - RECORD
* OUTPUT- RECORD/ALTREC
*
R380DOUN PENTRY
         MVI   RECORD,C'C'
         L     R4,DOLVL
         IF    (CLM,R4,1,=AL1(MAXNEST),EQ)
               LA   R1,=CL40'DO MAXIMUM NESTING EXCEEDED'
               PM   R400PERR
               PEXIT
         FI
         PM    R050PUTR
         AAI   R4,1
         ST    R4,DOLVL
         LA    R0,C'U'
         STC   R0,DOTYPE-1(R4)
         SLL   R4,2
         PM    R350GETS
         LR    R3,R1
         PM    R360GOTO
         PM    R050PUTR
         PM    R350GETS
         ST    R1,DOSTK-4(R4)
         PM    R390CONT
         PM    R050PUTR
         MVI   NEWREC,TRUE
         L     R10,=A(ALTREC)
         MVC   0(8,R10),=C'      IF'
         AAI   R10,8
         PM    R230CPYF
         PM    R350GETS
         ST    R1,DOEXTSTK-4(R4)
         PM    R450ADGO
         PM    R050PUTR
         LR    R1,R3
         PM    R390CONT
         PEXIT
         TITLE 'R390CONT - SETUP CONTINUE IN ALTREC'
* INPUT - R1= STMT #
* OUTPUT- ALTREC
*
R390CONT PENTRY
         MVI   NEWREC,TRUE
         L     R10,=A(ALTREC)
         PM    R410ADDN
         MVC   0(9,R10),=C' CONTINUE'
         AAI   R10,9
         PEXIT
         TITLE 'R400PERR- PRINT ERROR'
* INPUT - R1= ADDR OF 40 CHAR MSG
* OUTPUT- PRINT LINE
*
R400PERR PENTRY
         MVC   DERRMSG,0(R1)
         MVC   DSEQ,OUTREC+72
         LA    R2,ERRLINE
         PM    R060PUTL
         AP    PERRS,=P'1'
         PEXIT
ERRLINE  DS    0CL133
         DC    C' *****  ERROR  ***** '
DERRMSG  DC    CL40' '
         DC    CL20' ',C' *****  ERROR  *****   '
DSEQ     DC    CL8' '
         FILL  ERRLINE
         TITLE 'R410ADDN - ADD NUMBER TO ALTREC'
* INPUT - R1= STMT #
* OUTPUT- 5 DIGIT # ADDED TO ALTREC
*
R410ADDN PENTRY
         CVD   R1,PWORK
         UNPK  0(5,R10),PWORK+5(3)
         OI    4(R10),C'0'
         AAI   R10,5
         PEXIT
PWORK    DC    D'0'
         TITLE 'R420DOEV - PROCESS DO FOREVER'
* INPUT - RECORD
* OUTPUT- ALTREC
*
R420DOEV PENTRY
         MVI   RECORD,C'C'
         L     R4,DOLVL
         IF    (CLM,R4,1,=AL1(MAXNEST),EQ)
               LA   R1,=CL40'DO MAXIMUM NESTING EXCEEDED'
               PM   R400PERR
               PEXIT
         FI
         PM    R050PUTR
         AAI   R4,1
         ST    R4,DOLVL
         LA    R0,C'E'
         STC   R0,DOTYPE-1(R4)
         SLL   R4,2
         PM    R350GETS
         ST    R1,DOSTK-4(R4)
         PM    R390CONT
         PEXIT
         TITLE 'R430GETP - GET PENTRY CONTROL BLOCK'
* INPUT - INTEGER
* OUTPUT- R1 = ADDR OF PENTBLK
*
R430GETP PENTRY
         ZR    R0
         ZR    R1
         ICM   R0,7,INTEGER
         ICM   R1,7,INTEGER+3
         AR    R1,R0
         ZR    R0
         D     R0,HASHBASE
         SLL   R0,2
         L     R2,=A(HASHTAB)
         AR    R2,R0
         L     R1,0(R2)
         USING PENTBLK,R1
         DO    WHILE,(LTR,R1,R1,P)
               IF   (CLC,PENTINT,INTEGER,EQ)
                    PEXIT
               FI
               LA   R2,PENTDUP
               L    R1,PENTDUP
         OD
         L     R1,PENTFQE
         IF    (LTR,R1,R1,P)
               MVC  PENTFQE,PENTNEXT
         ELSE
               LA   R0,PENTLNG
               PM   R340GETM
         FI
         XC    PENTBLK(PENTLNG),PENTBLK
         ST    R1,0(R2)
         MVC   PENTINT,INTEGER
         MVC   PENTNEXT,PENTAQE
         ST    R1,PENTAQE
         LR    R2,R1
         DROP  R1
         USING PENTBLK,R2
         PM    R350GETS
         ST    R1,PENTSTMT
         DROP  R2
         LR    R1,R2
         PEXIT
         TITLE 'R440END - PROCESS END'
* INPUT   GLOBAL CONTROL BLOCKS FOR PENTRY, PM, PEXIT, DO.
* OUTPUT- RECORD/ALTREC
*
R440END  PENTRY
         L     R4,PENTAQE
         USING PENTBLK,R4
         DO    WHILE,(LTR,R4,R4,P)
               L    R3,PENTREF
               USING PREFBLK,R3
               IF   (LTR,R3,R3,P)
                    L    R1,PENTEXIT
                    IF   (LTR,R1,R1,P)
                         MVI  NEWREC,TRUE
                         L    R10,=A(ALTREC)
                         PM   R410ADDN
                         MVC  0(6,R10),=C' GOTO '
                         AAI  R10,6
                         MVC  0(6,R10),PENTINT
                         AAI  R10,6
                         MVC  0(2,R10),=C',('
                         AAI  R10,2
                         DO   UNTIL,(LTR,R3,R3,Z)
                              L    R1,PREFSTMT
                              PM   R410ADDN
                              MVI  0(R10),C','
                              AAI  R10,1
                              L    R1,PREFNEXT
                              MVC  PREFNEXT,PREFFQE
                              ST   R3,PREFFQE
                              LR   R3,R1
                         OD
                         SI   R10,1
                         MVI  0(R10),C')'
                         AAI  R10,1
                         PM   R050PUTR
                    ELSE
                         MVC  DPENTINT,PENTINT
                         MVC  DPENTERR,=CL34' NOT DEFINED BY PENTRY'
                         LA   R1,DPENTMSG
                         PM   R400PERR
                    FI
               ELSE
                    MVC  DPENTINT,PENTINT
                    MVC  DPENTERR,=CL34' NOT REFERENCED'
                    LA   R1,DPENTMSG
                    PM   R400PERR
               FI
               L    R1,PENTNEXT
               MVC  PENTNEXT,PENTFQE
               ST   R4,PENTFQE
               LR   R4,R1
         OD
         PM    R460CSTK
         LM    R14,R1,=A(HASHTAB,4*PRIME,0,0)
         MVCL  R14,R0
         XC    PENTAQE,PENTAQE
         MVC   NEXTNUM,RESETNUM
         PEXIT
         DROP  R3,R4
DPENTMSG DS    0CL40
DPENTINT DS    CL6
DPENTERR DS    CL34
         TITLE 'R450ADGO - ADD GOTO N IN ALTREC AREA'
* INPUT  - R1 = STMT #
* OUTPUT - ALTREC
R450ADGO PENTRY
         MVC   0(6,R10),=C' GOTO '
         AAI   R10,6
         PM    R410ADDN
         PEXIT
         TITLE 'R460CSTK - CHECK STACK FOR ERRORS IN PREVIOUS SECTION'
R460CSTK PENTRY
         IF    (OC,DOLVL,DOLVL,NZ)
               LA   R1,=CL40'MISSING OD IN PREVIOUS SECTION'
               PM   R400PERR
               XC   DOLVL,DOLVL
         FI
         IF    (OC,IFLVL,IFLVL,NZ)
               LA   R1,=CL40'MISSING FI IN PREVIOUS SECTION'
               PM   R400PERR
               XC   IFLVL,IFLVL
         FI
         IF    (OC,DOCSLVL,DOCSLVL,NZ)
               LA   R1,=CL40'MISSING ESACOD IN PREVIOUS SECTION'
               PM   R400PERR
               XC   DOCSLVL,DOCSLVL
         FI
         PEXIT
         TITLE 'COMMON GLOBAL DATA'
         EQUAL
ALPHANUM DC    64X'FF',X'00',128X'FF',9X'00',7X'FF',9X'00',8X'FF'
         DC    8X'00',6X'FF',10X'00',6X'FF'
         ORG   ALPHANUM+C'$'  INCLUDE $ AS ALPHA FOR IBM FORTRAN
         DC    X'00'
         ORG
NUMBER   EQU   100000
NEXTNUM  DC    A(NUMBER)
RESETNUM DC    A(NUMBER)
PRIME    EQU   997
HASHBASE DC    A(PRIME)
MAXNEST  EQU   10
DOCSSTK  DS    (MAXNEST)F
DOCSFQE  DC    A(0)
CASEFQE  DC    A(0)
DOCSLVL  DC    F'0'
NEWREC   DC    AL1(FALSE)
DOLVL    DC    F'0'
DOSTK    DS    (MAXNEST)F
IFLVL    DC    F'0'
IFSTK    DS    (MAXNEST)F
ELSIFSTK DS    (MAXNEST)C
ELSEIF   LOGICAL FALSE,(TRUE,FALSE)
AELSE    DC    2A(0)
DOEXTSTK DS    (MAXNEST)F
DOTYPE   DS    (MAXNEST)C
PEXTSTMT DC    F'0' STMT # OF CURRENT PENTRY EXIT
PREFFQE  DC    F'0' ADDR FREE PREFBLK QUEUE
PENTFQE  DC    F'0' ADDR FREE PENTBLK QUEUE
PENTAQE  DC    F'0' ADDR ALLOCATED PENTBLK QUEUE
RECORD   DS    (72+19*66)C
RECEOF   EQU   *
         DS    CL66 PAD TO SIMPLIFY OUTPUT
HASHTAB  DC    (PRIME)F'0'
ALTREC   DS    (72+19*66)C
ALTEOF   EQU   *
         DS    CL200 BIG PAD TO ELIMINATE LIMIT CHECK
         TITLE 'COMMON DSECTS'
CHAR     DSECT
         DS    C
DOCSBLK  DSECT      DOCASE CONTROL BLOCK
DOCSINT  DS    CL6       INDEX NAME
         DS    CL2    ZERO FILLER
DOCSGOTO DS    F      GOTO STMT #
DOCSEXIT DS    F      EXIT STMT #
DOCSLCS  DS    F      ADDR LAST CASE (CASE WITH HIGHEST VALUE)
DOCSCASE DS    F      VALUE F'0' FOR PSUEDO ELSE CASE
DOCSELSE DS    F      ELSE STMT # OR 0 IF NONE
DOCSNCS  DS    F      ADDR NEXT CASE OR 0 (ADDR NEXT DOCSBLK ON DOCSFQE
DOCSLNG  EQU   *-DOCSBLK
CASEBLK  DSECT      CASE CONTROL BLOCK
CASEVAL  DS    F    VALUE OF CASE
CASESTMT DS    F    STMT #
CASENCS  DS    F    ADDR NEXT CASE OR 0
CASEPCS  DS    F    ADDR PREV CASE OR 0
CASELNG  EQU   *-CASEBLK
PENTBLK  DSECT
PENTINT  DS    CL6  INTEGER NAME
         DS    CL2
PENTSTMT DS    F    STMT # OF ENTRY
PENTEXIT DS    F    STMT # OF GOTO EXIT
PENTREF  DS    F    ADDR OF REFERENCE BLOCKS
PENTDUP  DS    F    ADDR OF NEXT BLOCK WITH DUP. HASH KEY
PENTNEXT DS    F    ADDR OF NEXT BLOCK IN COMPLETE CHAIN
PENTLNG  EQU   *-PENTBLK
PREFBLK  DSECT
PREFNEXT DS    F    ADDR OF NEXT BLOCK
PREFSTMT DS    F    STMT # OF RETURN
PREFLNG  EQU   *-PREFBLK
         END   ER011800
