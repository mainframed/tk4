*          DATA SET TO003000   AT LEVEL 002 AS OF 05/09/78
*          DATA SET TO003000   AT LEVEL 001 AS OF 02/09/78
         LCLC  &OPSYSTM
&OPSYSTM SETC  'MVS'                   DEFINE OPERATING SYSTEM -
*                                        MVT
*                                        SVS  (OS/VS2 RELEASE 1)
*                                        MVS  (OS/VS2 RELEASE 3)
         TITLE 'DISCLAIMER - INSTALLATION INSTRUCTIONS'
***********************************************************************
*                                                                     *
*     THIS PROGRAM, DEVELOPED AT FPL OR SUPPLIED BY OTHER USERS       *
*     ON A NON-RESTRICTIVE BASIS, IS OF GENERAL INTEREST              *
*     SUBMITTED FOR UNRESTRICTED DISTRIBUTION.  THIS PROGRAM          *
*     HAS MET A BASIC SET OF PROGRAMMING AND DOCUMENTATION            *
*     STANDARDS, BUT MAY NOT HAVE BEEN PROGRAM TESTED IN ANY          *
*     FORMAL FASHION BY FPL.  THE USER IS EXPECTED TO MAKE THE        *
*     FINAL EVALUATION AS TO THE USEFULLNESS IN HIS OWN               *
*     ENVIRONMENT.                                                    *
*                                                                     *
*     FPL MAKES NO WARRANTY, EXPRESSED OR IMPLIED, INCLUDING, BUT     *
*     NOT LIMITED TO, THE IMPLIED WARRANTIES OR MERCHANTABILITY AND   *
*     FITNESS FOR A PARTICULAR PUTPOSE AS TO THE DOCUMENTATION,       *
*     FUNCTION, OR PERFORMANCE OF THESE PROGRAMS.                     *
*                                                                     *
*     ACCEPTANCE AND USE OF THIS PROGRAM CONSTITUTES A RELEASE        *
*     FROM LIABILITY OF FPL FOR ANY PROBLEMS USE OF THE PROGRAM       *
*     MAY CAUSE AT THE USER'S INSTALLATION.                           *
*                                                                     *
*     USERS ARE INVITED TO SUBMIT SUGGESTIONS OR ERROR DOCUMENTATION  *
*     TO FPL, HOWEVER, NO PROMISE CAN BE MADE THAT SUCH SUGGESTIONS   *
*     WILL BE IMPLEMENTED OR ERRORS CORRECTED.  SUBMIT COMMENTS TO:   *
*              COORDINATOR OF TECHNICAL SYSTEMS                       *
*              SYSTEMS & PROGRAMMING DEPARTMENT                       *
*              FLORIDA POWER & LIGHT COMPANY - GENERAL OFFICE         *
*              P. O. BOX  529100                                      *
*              MIAMI, FLORIDA  52101                                  *
*                                                                     *
*     THIS PROGRAM IS MADE AVAILABLE BY FPL WITHOUT CHARGE OR         *
*     CONSIDERATION.  RECIPIENTS ARE FREE TO MAKE THIS PROGRAM        *
*     AVAILABLE TO OTHERS IN LIKE MANNER.  IT MAY NOT BE SOLD.        *
*                                                                     *
* INSTALLATION INSTRUCTIONS                                           *
*                                                                     *
*     THIS MODULE MAY BE ASSEMBLED AND LINKED INTO A LIBRARY IN THE   *
*     LINK LIST OR SPECIFIED AS A STEPLIB IN THE TSO LOGON PROCEDURE. *
*     THE COMMAND MAY BE INVOKED FROM TSO BY ENTERING THE NAME OR AN  *
*     ALIAS OF THE MODULE.                                            *
*                                                                     *
*     BEFORE ASSEMBLING THE MODULE, INSURE THAT ALL THE REQUIRED      *
*     MACROS ARE AVAILABLE.  SOME MACROS FROM SYS1.AMODGEN MAY BE     *
*     REQUIRED.  THE $ENTER MACRO USES SYSTEM VARIABLE SYMBOLS        *
*     &SYSDATE AND &SYSTIME.  THESE SYMBOLS ARE NOT SUPPORTED BY ALL  *
*     ASSEMBLERS.  IF THE ASSEMBLER TO BE USED DOES NOT SUPPORT THESE *
*     SYMBOLS, THE $ENTER MACRO MUST BE MODIFIED.                     *
*                                                                     *
*     THE SOURCE PROVIDED IS OPERATING SYSTEM DEPENDENT.  SPECIFY THE *
*     DESIRED OPERATING SYSTEM AS THE VALUE FOR &OPSYSTM.             *
*                                                                     *
*     THE MODULE MAY BE LINKED WITH ATTRIBUTES RENT AND REFR AND IS   *
*     ELIGIBLE FOR INCLUSION IN THE LINK PACK AREA.                   *
*                                                                     *
***********************************************************************
DSAT     TITLE 'DISPLAY DATA SET ATTRIBUTES'
***********************************************************************
*                                                                     *
*  SS0802         ALIAS DSAT                                          *
*                                                                     *
*  FUNCTION       THE DSAT COMMAND IS USED TO DISPLAY ALLOCATION      *
*                 INFORMATION FOR DATA SETS ON A DIRECT ACCESS        *
*                 DEVICE.                                             *
*                                                                     *
*  DESCRIPTION    DSAT WILL SEARCH THE OS CATALOG AND CVOLS FOR THE   *
*                 ENTRIES FOR THE DATA SETS SPECIFIED.  ALLOCATION    *
*                 INFORMATION WILL BE OBTAINED FROM THE VOLUME TABLE  *
*                 OF CONTENTS, FORMATTED AND DISPLAYED.  IF A NAME IS *
*                 AN INDEX NAME, ALL DATA SETS BELOW THE INDEX WILL   *
*                 BE DISPLAYED.                                       *
*                                                                     *
*                 THE USER MAY BYPASS THE CATALOG SEARCH BY SUPPLYING *
*                 THE VOLUME SERIAL ON WHICH THE DATA SET RESIDES.    *
*                 THIS OPTION PERMITS DISPLAYING INFORMATION FOR      *
*                 UNCATALOGED DATA SETS.                              *
*                                                                     *
*                 THE ATTRIBUTES TO BE DISPLAYED MAY BE SELECTED BY   *
*                 THE USER WHEN HE ENTERS THE DSAT COMMAND BY         *
*                 SPECIFYING KEYWORD OPERANDS.                        *
*                                                                     *
*                 THE DSAT COMMAND MAY BE USED IN COMMAND PROCEDURES  *
*                 TO FIND THE ALLOCATION OF A DATA SET OR A GROUP OF  *
*                 DATA SETS AND SET THE RETURN CODE TO THE SPECIFIED  *
*                 VALUE.  THE RETURN CODE MAY THEN BE TESTED WITH THE *
*                 WHEN COMMAND.  OUTPUT MAY BE SUPPRESSED BY          *
*                 SPECIFYING NOPRINT.                                 *
*                                                                     *
*                 THE USER MAY CHOOSE WHAT INFORMATION WILL BE        *
*                 DISPLAYED BY ENTERING KEYWORDS.                     *
*                                                                     *
*                 THE INFORMATION THAT MAY BE DISPLAYED IS:           *
*                  1. VOLUME SERIAL ON WHICH THE DATA SET IS LOCATED. *
*                  2. FILE SEQUENCE NUMBER.                           *
*                  3. DEVICE TYPE CODE FROM CATALOG ENTRY.            *
*                  4. ALLOCATION  (ALLOCATED, USED, AND EXTENTS).     *
*                  5. SECONDARY ALLOCATION (AMOUNT AND UNITS).        *
*                  6. DATA SET ORGANIZATION.                          *
*                  7. DCB (RECFM, BLKSIZE, AND LRECL).                *
*                  8. CREATION DATE.                                  *
*                  9. EXPIRATION DATE.                                *
*                 10. FULLY QUALIFIED DATA SET NAME.                  *
*                 11. CCHHR OF THE FORMAT 1 DSCB.                     *
*                 12. GENERATION DATA GROUP DATA.                     *
*                 13. PDS DIRECTORY INFORMATION.                      *
*                                                                     *
*  SYNTAX         DSAT (NAME-LIST)  SERIAL/NOSERIAL   ALLOC/NOALLOC   *
*                                   DSORG/NODSORG     DCB/NODCB       *
*                                   CRDATE/NOCRDATE   EXDATE/NOEXDATE *
*                                   TOTALS/NOTOTALS   PRINT/NOPRINT   *
*                                   HEADER/NOHEADER   ALL/DAONLY      *
*                                   GDGDATA/NOGDGDATA SEQNO/NOSEQNO   *
*                                   DEVTYPE/NODEVTYPE DEVICE/NODEVICE *
*                                   CCHHR/NOCCHHR     PDS/NOPDS       *
*                                   SECONDARY/NOSECONDARY             *
*                                   GENERIC           DSONLY          *
*                                   VOLUME(SERIAL)                    *
*                                   RC(TALLOC/TUSED/TDIFF/            *
*                                      LALLOC/LUSED/LDIFF/NUM/        *
*                                      PREVIOUS/DSORG/DIRALLOC/       *
*                                      DIRUSED/ENTRIES/ALIASES/       *
*                                      MEMBERS)                       *
*                                                                     *
*                 DEFAULTS -  NAME-LIST DEFAULTS TO PREFIX            *
*                             SERIAL   ALLOC   DSORG    DCB    CRDATE *
*                             NOEXDATE TOTALS  PRINT    HEADER ALL    *
*                             NOPDS    NOSEQNO NODEVICE NODEVTYPE     *
*                             NOGDGDATA                 NOSECONDARY   *
*                                                                     *
*  OPERANDS       NAME-LIST - ONE OR MORE DATA SET OR INDEX LEVEL     *
*                             NAMES. TSO NAMING CONVENTIONS ARE USED. *
*                             IF A SPECIFIED NAME IS AN INDEX NAME,   *
*                             DATA SETS UNDER THAT LEVEL WILL BE      *
*                             DISPLAYED.  IF NO NAME IS SPECIFIED,    *
*                             THE PREFIX WILL BE USED.  FOR MVT AND   *
*                             SVS, THIS IS THE USERID.  FOR MVS,      *
*                             THE PREFIX MAY BE SPECIFIED WITH THE    *
*                             PROFILE COMMAND.  IF NO NAME IS         *
*                             SPECIFIED AND THE PROFILE SPECIFIES     *
*                             NOPREFIX, THE USERID WILL BE USED.      *
*                                                                     *
*                             NOTE - IF A KEYWORD IS ENTERED,         *
*                                    NAME-LIST MUST BE SPECIFIED.  IF *
*                                    NAME-LIST IS OMITTED, IT WILL    *
*                                    NOT DEFAULT TO THE PREFIX, BUT   *
*                                    THE KEYWORD WILL BE INTERPRETED  *
*                                    AS THE NAME-LIST, NOT A KEYWORD. *
*                                                                     *
*                 SERIAL/NOSERIAL                                     *
*                             SPECIFIES WHETHER OR NOT THE VOLUME     *
*                             SERIAL IS TO BE DISPLAYED FOR EACH DATA *
*                             SET.                                    *
*                                                                     *
*                 SEQNO/NOSEQNO                                       *
*                             SPECIFIES WHETHER OR NOT THE FILE       *
*                             SEQUENCE NUMBER IS TO BE DISPLAYED.     *
*                             IF NOSERIAL IS SPECIFIED, THE FILE      *
*                             SEQUENCE NUMBER WILL NOT BE DISPLAYED.  *
*                                                                     *
*                 DEVTYPE/NODEVTYPE                                   *
*                             SPECIFIES WHETHER OR NOT THE DEVICE     *
*                             CODE FROM THE CATALOG ENTRY IS TO BE    *
*                             DISPLAYED.  IF VOLUME IS SPECIFIED,     *
*                             THE DEVICE TYPE IS OBTAINED FROM THE    *
*                             UCB.                                    *
*                                                                     *
*                 DEVICE/NODEVICE                                     *
*                             SPECIFIES WHETHER OR NOT THE NAME OF    *
*                             THE DEVICE (3330, 2314, ETC.) IS TO     *
*                             BE DISPLAYED.                           *
*                                                                     *
*                 ALLOC/NOALLOC                                       *
*                             SPECIFIES WHETHER OR NOT ALLOCATION     *
*                             INFORMATION (TRACKS ALLOCATED, TRACKS   *
*                             USED, AND NUMBER OF EXTENTS) IS TO BE   *
*                             DISPLAYED.                              *
*                                                                     *
*                 SECONDARY/NOSECONDARY                               *
*                             SPECIFIES WHETHER OR NOT SECONDARY      *
*                             ALLOCATION INFORMATION (AMOUNT OF       *
*                             SECONDARY SPACE AND UNITS) IS TO BE     *
*                             DISPLAYED.  IF NOALLOC IS SPECIFIED,    *
*                             NO SECONDARY ALLOCATION INFORMATION     *
*                             WILL BE DISPLAYED.                      *
*                                                                     *
*                 DSORG/NODSORG                                       *
*                             SPECIFIES WHETHER OR NOT DATA SET       *
*                             ORGANIZATION IS TO BE DISPLAYED.        *
*                                                                     *
*                 PDS/NOPDS                                           *
*                             SPECIFIES WHETHER OR NOT PDS DIRECTORY  *
*                             INFORMATION IS DISPLAYED.  SELECTION    *
*                             OF THE PDS OPTION WILL RESULT IN        *
*                             DYNAMIC ALLOCATION/DEALLOCATION AND     *
*                             READING OF THE PDS.  THESE OPERATIONS   *
*                             WILL RESULT IN PERFORMANCE DEGRADATION. *
*                                                                     *
*                             THE MESSAGE "DATA SET IN USE" INDICATES *
*                             ANOTHER USER HAD EXCLUSIVE CONTROL OF   *
*                             THE DATA SET AND DSAT COULD NOT         *
*                             ALLOCATE IT.                            *
*                                                                     *
*                             IF AN ERROR OCCURS DURING PROCESSING OF *
*                             THE PDS DIRECTORY, AN ERROR MESSAGE     *
*                             WILL APPEAR IN THE PDS DATA FIELDS.     *
*                               RC =   RETURN CODE FROM DAIR          *
*                               DARC = DYNAMIC ALLOCATION RETURN CODE *
*                               CTRC = CATALOG RETURN CODE            *
*                                                                     *
*                 DCB/NODCB                                           *
*                             SPECIFIES WHETHER OR NOT DCB INFORMATION*
*                             (RECFM, BLKSIZE, AND LRECL) IS TO BE    *
*                             DISPLAYED.                              *
*                                                                     *
*                 CRDATE/NOCRDATE                                     *
*                             SPECIFIES WHETHER OR NOT THE CREATION   *
*                             DATE IS TO BE DISPLAYED.                *
*                                                                     *
*                 EXDATE/NOEXDATE                                     *
*                             SPECIFIES WHETHER OR NOT THE EXPIRATION *
*                             DATE IS TO BE DISPLAYED.                *
*                                                                     *
*                 CCHHR/NOCCHHR                                       *
*                             SPECIFIES WHETHER OR NOT THE CCHHR OF   *
*                             THE FORMAT 1 DSCB IS TO BE DISPLAYED.   *
*                                                                     *
*                 TOTALS/NOTOTALS                                     *
*                             SPECIFIES WHETHER OR NOT ALLOCATION     *
*                             AND NUMBER OF DATA SET ENTRIES DISPLAYED*
*                             TOTALS ARE TO BE DISPLAYED.  IF NOALLOC *
*                             IS SPECIFIED, TOTALS ARE NOT DISPLAYED. *
*                                                                     *
*                 PRINT/NOPRINT                                       *
*                             SPECIFIES WHETHER OR NOT OUTPUT IS TO BE*
*                             SUPPRESSED.  THIS IS INTENDED FOR USE IN*
*                             COMMAND PROCEDURES WHERE DSAT IS BEING  *
*                             USED TO SET THE RETURN CODE.  ERROR     *
*                             MESSAGES ARE NOT SUPPRESSED.            *
*                                                                     *
*                 HEADER/NOHEADER                                     *
*                             SPECIFIES WHETHER OR NOT THE HEADER     *
*                             LINE IS TO BE SUPPRESSED.               *
*                                                                     *
*                 ALL/DAONLY                                          *
*                             SPECIFIES WHETHER OR NOT DATA SETS      *
*                             ON NON-DIRECT ACCESS DEVICES OR         *
*                             ON UNMOUNTED DEVICES ARE TO BE          *
*                             DISPLAYED.                              *
*                                                                     *
*                 GDGDATA/NOGDGDATA                                   *
*                             SPECIFIES WHETHER OR NOT GENERATION     *
*                             DATA GROUP DATA IS TO BE DISPLAYED.     *
*                             IF GDGDATA IS SPECIFIED, THE            *
*                             INFORMATION DISPLAYED IS -              *
*                               OPTIONS - OPTIONS SPECIFIED WHEN THE  *
*                                         INDEX WAS BUILT.            *
*                                         E INDICATES EMPTY,          *
*                                         D INDICATES DELETE.         *
*                               CURRENT - NUMBER OF GENERATION DATA   *
*                                         SETS CURRENTLY CATALOGED    *
*                                         UNDER THE INDEX.            *
*                               MAX     - MAXIMUM NUMBER OF ENTRIES   *
*                                         WHICH MAY EXIST AT ONE      *
*                                         TIME.                       *
*                                                                     *
*                             NOTE: THIS OPTION IS INOPERATIVE IN     *
*                                   MVS IF THE DATA MANAGMENT SU (8)  *
*                                   IS NOT INSTALLED.  THIS OPERAND   *
*                                   IS ALSO INOPERATIVE FOR           *
*                                   GENERATION INDICES IN VSAM        *
*                                   CATALOGS.  IF THE KEYWORD IS      *
*                                   ENTERED, IT WILL BE IGNORED.  NO  *
*                                   ERROR MESSAGE WILL BE GENERATED.  *
*                                                                     *
*                 GENERIC     SPECIFIES THAT THE NAME SPECIFIED IS    *
*                             TO BE USED AS A GENERIC KEY TO LOCATE   *
*                             DATA SET NAMES.  ALL DATA SETS WHICH    *
*                             MATCH THE KEY WILL BE DISPLAYED.  THE   *
*                             NAME NEED NOT SPECIFY AN INDEX LEVEL.   *
*                             THIS OPTION IS VALID FOR MVS ONLY       *
*                             AND ENTRIES IN A VSAM CATALOG.          *
*                                                                     *
*                             GENERIC IS IGNORED IF DSONLY IS         *
*                             SPECIFIED.                              *
*                                                                     *
*                 DSONLY      SPECIFIES THAT NAME-LIST ENTRIES        *
*                             REPRESENT DATA SET NAMES ONLY.  IF      *
*                             A NAME SPECIFIED IS FOUND TO BE AN      *
*                             INDEX, DSAT WILL TREAT IT AS NOT        *
*                             FOUND.                                  *
*                                                                     *
*                 VOLUME      SPECIFIES THE VOLUME SERIAL NUMBER      *
*                             OF THE VOLUME TO BE SEARCHED FOR        *
*                             THE SPECIFIED DATA SETS.  DSAT WILL     *
*                             ASSUME THAT THE NAME-LIST CONSISTS      *
*                             OF DATA SET NAMES, NOT INDEX NAMES.     *
*                                                                     *
*                 RC                                                  *
*                             SPECIFIES THE RETURN CODE SETTING.  IF  *
*                             RC IS NOT SPECIFIED, THE RETURN CODE    *
*                             WILL BE SET TO:                         *
*                              4 - SUCCESSFUL COMPLETION.             *
*                             16 - UNABLE TO INTERPRET COMMAND.       *
*                                                                     *
*                             THE RC OPERAND PERMITS THE USER TO      *
*                             SPECIFY THAT THE RETURN CODE IS TO BE   *
*                             SET TO A VALUE DEPENDING ON THE         *
*                             ALLOCATION OF THE DATA SETS.            *
*                             TALLOC   - TOTAL TRACKS ALLOCATED       *
*                             TUSED    - TOTAL TRACKS USED            *
*                             TDIFF    - TOTAL OVERALLOCATION         *
*                                        (TALLOC-TUSED)               *
*                             LALLOC   - TRACKS ALLOCATED BY LAST     *
*                                        DATA SET                     *
*                             LUSED    - TRACKS USED BY LAST DATA SET *
*                             LDIFF    - LAST DATA SET OVERALLOCATION *
*                                        (LALLOC-LUSED)               *
*                             NUM      - NUMBER OF DATA SETS DISPLAYED*
*                                        (INCLUDES DATA SETS NOT      *
*                                        FOUND, ETC.)                 *
*                             PREVIOUS - ASSUMES THE RETURN CODE OF   *
*                                        THE PREVIOUS COMMAND.        *
*                             DSORG    - SETS THE RETURN CODE BASED   *
*                                        ON THE DATA SET ORGANIZATION *
*                                        OF THE DATA SETS DISPLAYED.  *
*                                        1 - ALL DATA SETS WERE SEQ.  *
*                                        2 - ALL DATA SETS WERE PDS   *
*                                        3 - DATA SETS WERE MIXED PDS *
*                                            AND SEQUENTIAL           *
*                                        4 - AN ERROR OCCURRED OR A   *
*                                            DATA SET OTHER THAN PDS  *
*                                            OR SEQUENTIAL WAS        *
*                                            PROCESSED                *
*                             DIRALLOC - SETS THE RETURN CODE TO THE  *
*                                        NUMBER OF DIRECTORY BLOCKS   *
*                                        ALLOCATED.                   *
*                             DIRUSED  - SETS THE RETURN CODE TO THE  *
*                                        NUMBER OF DIRECTORY BLOCKS   *
*                                        USED.                        *
*                             ENTRIES  - SETS THE RETURN CODE TO THE  *
*                                        NUMBER OF ENTRIES IN THE     *
*                                        DIRECTORY (MEMBERS AND       *
*                                        ALIASES).                    *
*                             ALIASES  - SETS THE RETURN CODE TO THE  *
*                                        NUMBER OF ALIASES.           *
*                             MEMBERS  - SETS THE RETURN CODE TO      *
*                                        ENTRIES-ALIASES.             *
*                                                                     *
*                                                                     *
*                             NOTE - IF NOALLOC IS SPECIFIED, THE     *
*                                    RETURN CODE FOR TALLOC, TUSED,   *
*                                    TDIFF, LALLOC, LUSED, AND LDIFF  *
*                                    WILL BE ZERO.                    *
*                                                                     *
*                                    IF NODSORG IS SPECIFIED, THE     *
*                                    RETURN CODE FOR DSORG WILL BE    *
*                                    ZERO.                            *
*                                                                     *
*                                    IF NOPDS IS SPECIFIED OR THE     *
*                                    LAST OR ONLY DATA SET IS NOT     *
*                                    A PDS, THE RETURN CODE FOR       *
*                                    DIRALLOC, DIRUSED, ENTRIES,      *
*                                    ALIASES, AND MEMBERS WILL BE     *
*                                    ZERO.                            *
*                                                                     *
*  SUBCOMMANDS    DSAT HAS NO SUBCOMMANDS.                            *
*                                                                     *
*  ATTRIBUTES     RENT, REUS, REFR, ENABLED, NON-PRIVELEGED           *
*                                                                     *
*  EXAMPLES       DISPLAY ALL DATA SETS UNDER THE TERMINAL USER'S ID. *
*                                                                     *
*                 DSAT                                                *
*                                                                     *
*                                                                     *
*                 DISPLAY ALL "FPL" DATA SETS.  DISPLAY EXPIRATION    *
*                 DATES.                                              *
*                                                                     *
*                 DSAT 'FPL' EXDATE                                   *
*                                                                     *
*                                                                     *
*                 IN A PROCEDURE, DETERMINE IF DATA SET SS.MACLIB     *
*                 HAS 20 TRACKS LEFT.  IF SO, TERMINATE.  IF NOT,     *
*                 COMPRESS IT.                                        *
*                                                                     *
*                 DSAT 'SS.MACLIB' RC(LDIFF) NOPRINT                  *
*                 WHEN SYSRC(GT 20) END                               *
*                 COMPRESS 'SS.MACLIB'                                *
*                 END                                                 *
*                                                                     *
*                                                                     *
*  FPL MACROS USED                                                    *
*                                                                     *
*        $ENTER            ENTRY CODING                               *
*        $RTRN             EXIT CODING                                *
*        #TSOBLKS          CONSTRUCT TSO CONTROL BLOCKS               *
*        #VTCFMT1          FORMAT 1 DSCB MAPPING                      *
*        #VTCFMT3          FORMAT 3 DSCB MAPPING                      *
*        #CTGPL            MAP A VSAM CATALOG PARAMETER LIST          *
*                                                                     *
*  IBM MACROS USED                                                    *
*                                                                     *
*        GETMAIN           OBTAIN WORKING STORAGE                     *
*        FREEMAIN          RELEASE WORKING STORAGE                    *
*        LINK              INVOKE SERVICE ROUTINE                     *
*        LOCATE            READ CATALOG                               *
*        OBTAIN            READ VTOC                                  *
*        CAMLST            CONSTRUCT PARM LIST FOR LOCATE AND OBTAIN  *
*        OPEN              OPEN PDS DIRECTORY                         *
*        CLOSE             CLOSE PDS DIRECTORY                        *
*        READ              READ PDS DIRECTORY                         *
*        CHECK             WAIT FOR COMPLETION OF READ                *
*        DCB               DATA CONTROL BLOCK FOR PDS DIRECTORY       *
*        PUTLINE           OUTPUT A LINE TO TERMINAL                  *
*        IKJPARM           BEGIN PARSE PARAMETER CONTROL LIST         *
*        IKJIDENT          DESCRIBE POSITIONAL PARAMETER              *
*        IKJPOSIT          DESCRIBE POSITIONAL PARAMETER              *
*        IKJKEYWD          DESCRIBE A KEYWORD PARAMETER               *
*        IKJNAME           DESCRIBE A KEYWORD VALUE                   *
*        IKJSUBF           BEGIN A SUBFIELD DESCRIPTION               *
*        IKJENDP           END PARSE PARAMETER CONTROL LIST           *
*        IKJRLSA           RELEASE STORAGE OBTAINED BY PARSE          *
*        IKJECT            MAP ECT                                    *
*        IKJUPT            MAP UPT                                    *
*        IKJDAP08          MAP DYNAMIC ALLOCATION CONTROL BLOCK (ALC) *
*        IKJDAP18          MAY DYNAMIC ALLOCATION CONTROL BLOCK (FREE)*
*                                                                     *
*  TSO SERVICE ROUTINES USED                                          *
*                                                                     *
*        IKJPARS           INTERPRET COMMAND OPERANDS                 *
*        PUTLINE           DISPLAY OUTPUT MESSAGES                    *
*        IKJDAIR           DYNAMIC ALLOCATION                         *
*                                                                     *
*  REGISTER ASSIGNMENTS                                               *
*                                                                     *
*        R0  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *
*        R1  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *
*        R2  - WORK REGISTER/OUTPUT AREA POINTER                      *
*        R3  - WORK REGISTER/DSNAME PDL POINTER                       *
*        R4  - WORK REGISTER                                          *
*        R5  - WORK REGISTER                                          *
*        R6  - WORK REGISTER                                          *
*        R7  - WORK REGISTER                                          *
*        R8  - WORK REGISTER                                          *
*        R9  - BASE REGISTER FOR PCL AND PDL                          *
*        R10 - BASE REGISTER FOR CPPL                                 *
*        R11 - PROGRAM BASE REGISTER 1                                *
*        R12 - PROGRAM BASE REGISTER 2                                *
*        R13 - WORK AREA BASE REGISTER (SAVE AREA FIRST 18 WORDS)     *
*        R14 - LINKAGE REGISTER                                       *
*        R15 - LINKAGE REGISTER/RETURN CODE                           *
*                                                                     *
*  FOR FURTHER INFORMATION ON THE WORK REGISTERS, SEE INDIVDUAL       *
*  ROUTINES.                                                          *
*                                                                     *
*  THIS VERSION OF DSAT WILL WORK ON MVT, SVS, OR MVS IF ASSEMBLED    *
*  WITH THE PROPER SYSTEM NAME IN THE SETC STATEMENT AT THE           *
*  BEGINNING OF THIS MODULE.                                          *
*                                                                     *
*  THE ORIGINAL MVS MODIFICATIONS WERE MADE BY DAVID JOHN FLYNN OF    *
*  PRATT & WHITNEY AIRCRAFT.                                          *
*                                                                     *
*                                                GORDON P. WEST 09/76 *
***********************************************************************
         TITLE 'UPDATE LOG'
***********************************************************************
*                                                                     *
*  UPDATE LOG                                                         *
*                                                                     *
*  09/24/76  MVS EXPANSION MODIFIED TO REPLACE IKJEHCIR WITH          *
*            DIRECT INVOCATION OF SVC 26 WITH A CTGPL.  PERFORMANCE   *
*            ENHANCEMENT.                                             *
*                                                                     *
*            GENERIC OPERAND ADDED FOR MVS EXPANSION.  REPLACEMENT    *
*            OF IKJEHCIR IS A PREREQUISITE FOR THIS MODIFICATION.     *
*                                                                     *
*  11/16/76  CCHHR OPTION ADDED.                                      *
*                                                                     *
*  01/14/77  SUPPORT FOR MVS WITH DATA MANAGMENT SU (8) ADDED.        *
*            IKJEHCIR REMOVED FROM MVT AND SVS EXPANSION.             *
*            DEVTYPE OPTION ADDED.                                    *
*                                                                     *
*  04/25/77  DSONLY OPTION ADDED.                                     *
*                                                                     *
*  05/13/77  ENTRY TYPE ADDED TO DSORG FOR VSAM CATALOG ENTRIES.      *
*                                                                     *
*  05/31/77  SUPPRESS DATA SET NOT FOUND MESSAGES FOR VOLUME(*).      *
*                                                                     *
*  07/25/77  ADD TEST FOR NOT READY TO UCB LOOKUP ROUTINES.           *
*                                                                     *
*  08/10/77  ADD PDS OPTION TO OBTAIN DIRECTORY INFORMATION.          *
*            ADD DEVICE OPTION TO DISPLAY DEVICE NAME (3330, ETC.)    *
*            OBTAIN DEVTYPE FROM UCB IF VOLUME SPECIFIED.             *
*                                                                     *
*  08/31/77  ADD PUNCH STATEMENT FOR ALIAS STATEMENT.                 *
*            CHECK FOR ZERO OR NEGATIVE VOLUME COUNT.                 *
*                                                                     *
*  09/28/77  ADD MORE INFORMATION ON ERRORS ENCOUNTERED DURING        *
*                 PDS PROCESSING.                                     *
*                                                                     *
***********************************************************************
         TITLE 'LINKAGE EDITOR CONTROL RECORDS'
***********************************************************************
*                                                                     *
*        THE FOLLOWING PUNCH STATEMENT(S) CAUSE LINKAGE EDITOR        *
*        CONTROL STATEMENTS TO BE INCLUDED IN THE OBJECT OUTPUT.      *
*                                                                     *
*        IF MESSAGE IEW0731 IS GENERATED (ALIAS NAME MATCHES MEMBER   *
*        NAME) IT MAY BE IGNORED'                                     *
*                                                                     *
***********************************************************************
*
         PUNCH '  ALIAS DSAT     &SYSDATE  &SYSTIME     IGNORE IEW0731'
         TITLE 'ENTRY CODING'
DSAT     $ENTER BASE=(R11,R12),                                        +
               RENT=DSECTLEN,                                          +
               SAVE=DSATSAVE
         TITLE 'SET UP TSO CONTROL BLOCKS'
***********************************************************************
*                                                                     *
*        CONSTRUCT TSO CONTROL BLOCKS                                 *
*                                                                     *
***********************************************************************
         #TSOBLKS DSECT,ECB=DSATECB,                                   +
               CPPL=(R10,R1),                                          +
               PPL=(R9,DSATPPL,DSATPCL,DSATANS),                       +
               IOPL=(R8,DSATIOPL,DSATPTPB),                            +
               DAPL=(R7,DSATDAPL)
         DROP  R7
         MVC   DSATPTPB(ENDPTPB-MODLPTPB),MODLPTPB  INITIALIZE PTPB
         MVC   DSATHEDR(4),MODLINE
         MVI   FLAGS,X'00'             CLEAR FLAGS
         MVI   FLAGS2,X'00'
         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE
         DROP  R8                      DROP IOPL BASE REGISTER
*--------GET CATALOG WORKAREA
         L     R2,=F'8192'             LOAD LENGTH OF WORK AREA
         GETMAIN R,LV=(R2),SP=1        OBTAIN WORK AREA
         ST    R1,WORKAREA             SAVE ADDRESS OF WORK AREA
         ST    R2,WORKLEN              SAVE LENGTH OF WORK AREA
         TITLE 'PARSE COMMAND OPERANDS'
***********************************************************************
*                                                                     *
*                  PARSE THE COMMAND                                  *
*                                                                     *
***********************************************************************
         SPACE 2
         LA    R1,PPL                   LOAD PARSE PARAMETER LIST ADDR
         LINK  EP=IKJPARS               LINK TO PARSE ROUTINE
         LTR   R15,R15                  TEST RETURN CODE
         BNZ   ERRPARS
         L     R9,DSATANS               LOAD ANSWER AREA ADDRESS
         USING DSATPDL,R9               DEFINE PDE BASE REGISTER
         TITLE 'SET UP CAMLST CONTROL BLOCKS'
***********************************************************************
*                                                                     *
*        SET UP CATALOG AND VTOC SEARCH CONTROL BLOCKS                *
*                                                                     *
***********************************************************************
         SPACE 2
*--------SET UP CAMLIST'S
         LM    R1,R4,SEARCH            OBTAIN, SEARCH
         LA    R2,DSNAME
         LA    R3,DSATSER
         LA    R4,DSATFMT1
         STM   R1,R4,DSATDCB1
         LM    R1,R4,SEEK              OBTAIN, SEEK
         LA    R2,DS1PTRDS
         LA    R3,DSATSER
         LA    R4,DSATFMT3
         STM   R1,R4,DSATDCB3
         LM    R1,R4,NAME              LOCATE, NAME
         LA    R2,DSNAME
         LA    R4,CATBLOCK
         STM   R1,R4,LOCLIST
         LM    R1,R4,NAMECVOL          LOCATE, NAME AND CVOL
         LA    R2,DSNAME
         LA    R3,CVOL
         LA    R4,CATBLOCK
         STM   R1,R4,LOCLIST2
         LM    R1,R4,TTRLOC            LOCATE, TTR
         LA    R2,TTR
         LA    R3,CVOL
         STM   R1,R4,LOCBYTTR
         AIF   ('&OPSYSTM' NE 'MVS').ZEROTOT
         XC    CTGPL(CTGPLLEN),CTGPL   ZERO OUT CTGPL
         OI    CTGOPTN1,CTGNAME+CTGCNAME
         OI    CTGOPTN3,CTGSUPLT+CTGAM0
         LA    R1,INDEX-1              SET UP SEARCH KEY ADDRESS
         ST    R1,CTGENT
         L     R1,WORKAREA             SET UP WORK AREA ADDRESS
         ST    R1,CTGWKA
         NC    DSONLY,DSONLY           SEE IF DSONLY SPECIFIED
         BNZ   ZEROTOT
         OI    CTGOPTN1,CTGGENLD       SET GENERIC LOCATE
.ZEROTOT ANOP
ZEROTOT  XC    TOTLS(20),TOTLS         ZERO TOTAL FIELDS
*        BAL   R14,SERLIST             CONSTRUCT DA VOLUME LIST
         TITLE 'SET UP HEADER LINE'
***********************************************************************
*                                                                     *
*        SET UP HEADER LINE                                           *
*                                                                     *
***********************************************************************
         SPACE 2
         LA    R2,OUTLINE              LOAD OUTPUT AREA ADDRESS
         MVC   OUTLINE,BLANKS          BLANK THE LINE
         CLC   SERIAL,=H'2'            TEST FOR NOSERIAL
         BE    TRYDEV
         ST    R2,SERFLD               SAVE OUTPUT FIELD ADDRESS
         MVC   0(6,R2),=C'SERIAL'      MOVE IN HEADER
         LA    R2,7(R2)                INCREMENT POINTER
         CLC   SEQNO,=H'2'             TEST FOR NOSEQNO
         BE    TRYDEV
         MVC   0(4,R2),=C' SEQ'        SET UP HEADER
         LA    R2,5(R2)                INCREMENT POINTER
TRYDEV   CLC   DEVTYPE,=H'2'           TEST FOR NODEVTYPE
         BE    TRYDEVIC
         ST    R2,DEVFLD               SAVE OUTPUT FIELD ADDRESS
         MVC   0(8,R2),=C' DEVTYPE'    MOVE IN HEADER
         LA    R2,9(R2)                INCREMENT POINTER
TRYDEVIC CLC   DEVICE,=H'2'            TEST FOR NODEVICE
         BE    TRYALLOC
         ST    R2,DEVFIELD             SAVE OUTPUT FIELD ADDRESS
         MVC   0(6,R2),=C'DEVICE'      MOVE IN HEADER
         LA    R2,7(R2)                INCREMENT POINTER
TRYALLOC ST    R2,ERRFLD               STORE ERROR FIELD ADDRESS
         CLC   ALLOC,=H'2'             TEST FOR NOALLOC
         BE    TRYDSORG
         ST    R2,ALLOCFLD             SAVE OUTPUT FIELD ADDRESS
         MVC   0(14,R2),=C'ALLOC  USED EX'  SET UP HEADER
         LA    R2,15(R2)               INCREMENT POINTER
         CLC   SECOND,=H'2'            TEST FOR NOSECONDARY
         BE    TRYDSORG
         MVC   0(10,R2),=C' SEC UNITS'      SET UP HEADER
         LA    R2,11(R2)               INCREMENT POINTER
TRYDSORG CLC   DSORG,=H'2'             TEST FOR NODSORG
         BE    TRYPDS
         ST    R2,DSORGFLD             SAVE OUTPUT FIELD ADDRESS
         MVC   0(5,R2),=C'DSORG'       MOVE IN HEADER
         LA    R2,6(R2)                INCREMENT POINTER
TRYPDS   CLC   PDS,=H'2'               TEST FOR NOPDS
         BE    TRYDCB
         ST    R2,PDSFLD               SAVE OUTPUT FIELD ADDRESS
         MVC   0(19,R2),=C'DIRA DIRU ENTR  AL '
         LA    R2,20(R2)               INCREMENT POINTER
TRYDCB   CLC   DCB,=H'2'               TEST FOR NODCB
         BE    TRYCRDAT
         ST    R2,DCBFLD               SAVE OUTPUT FIELD ADDRESS
         MVC   0(16,R2),=C'-DCB ATTRIBUTES-'  MOVE IN HEADER
         LA    R2,17(R2)               INCREMENT POINTER
TRYCRDAT CLC   CRDATE,=H'2'            TEST FOR NOCRDATE
         BE    TRYEXDAT
         ST    R2,CRDATFLD             SAVE OUTPUT FIELD ADDRESS
         MVC   0(8,R2),=C'CR. DATE'    MOVE IN HEADER
         LA    R2,9(R2)                INCREMENT POINTER
TRYEXDAT CLC   EXDATE,=H'2'            TEST FOR NOEXDATE
         BE    TRYCCHHR
         ST    R2,EXDATFLD             SAVE OUTPUT FIELD ADDRESS
         MVC   0(8,R2),=C'EX. DATE'    MOVE IN HEADER
         LA    R2,9(R2)                INCREMENT POINTER
TRYCCHHR CLC   CCHHR,=H'2'             TEST FOR NOCCHHR
         BE    DODSNAME
         ST    R2,CCHHRFLD             SAVE OUTPUT FIELD ADDRESS
         MVC   0(10,R2),=C' C C H H R' MOVE IN HEADER
         LA    R2,11(R2)               INCREMENT POINTER
DODSNAME L     R1,ERRFLD               LOAD ADDRESS OF ERROR FIELD
         LA    R1,33(R1)               ALLOW ROOM FOR 32 BYTE MESSAGE
         CR    R2,R1                   COMPARE TO POINTER
         BH    DSNFLDOK
         LR    R2,R1                   SET POINTER TO MIN FIELD ADDR
DSNFLDOK LA    R1,OUTLINE+120-44       LOAD LAST POSSIBLE ADDR FOR DSN
         CR    R2,R1                   SEE IF WE'RE PAST IT
         BH    TOOLONG
         ST    R2,DSNFLD               SAVE OUTPUT FIELD ADDRESS
         MVC   0(8,R2),=C'-DSNAME-'    MOVE IN HEADER
         CLC   HEADER,=H'2'            TEST FOR HEADER
         BE    BUILDDSN
         BAL   R2,PUTL                 DISPLAY LINE
         TITLE 'CONSTRUCT DSNAME'
***********************************************************************
*                                                                     *
*        CONSTRUCT DSNAME                                             *
*                                                                     *
***********************************************************************
         SPACE 2
BUILDDSN LA    R3,DSN                  LOAD DSN PDL ADDRESS
SETUPNXT MVC   DSNAME,BLANKS           CLEAR DSNAME FIELD
         MVC   OUTLINE,BLANKS
         NI    FLAGS2,X'FF'-$FOUND     RESET DATA SET FOUND FLAG
         LA    R2,DSNAME               SET POINTER TO DSNAME
*--------SEE IF NAME ENCLOSED IN QUOTES
         TM    6(R3),X'40'
         BNZ   MOVEREST
*--------APEND PREFIX TO NAME
         AIF   ('&OPSYSTM' NE 'MVS').PSCB
         L     R1,CPPLUPT              LOAD UPT ADDRESS
         USING UPT,R1                  DEFINE UPT ADDRESSABILITY
         LA    R4,UPTPREFX             LOAD ADDRESS OF PREFIX ENTRY
         CLI   UPTPREFL,0              TEST FOR NOPREFIX
         BNE   GETLEN
         NC    4(2,R3),4(R3)           SEE IF DSNAME ENTERED
         BNZ   MOVEREST
         DROP  R1
.PSCB    L     R4,CPPLPSCB             LOAD USERID ADDRESS
GETLEN   SR    R1,R1                   CLEAR REGISTER 1
         IC    R1,7(R4)                LOAD PREFIX LENGTH
         BCTR  R1,R0                   REDUCE LENGTH BY 1
         EX    R1,MOVENAME             COPY PREFIX TO DSNAME FIELD
         LA    R2,1(R1,R2)             INCREMENT PAST USERID
         NC    4(2,R3),4(R3)           SEE IF DSNAME ENTERED
         BZ    LOCATE
         MVI   0(R2),C'.'              ADD .
         LA    R2,1(R2)                INCREMENT PAST .
*--------FULLY QUALIFIED NAME SPECIFIED
MOVEREST L     R4,0(R3)                LOAD ADDRESS OF INPUT
         LH    R1,4(R3)                LOAD LENGTH
         BCTR  R1,R0                   REDUCE LENGTH BY 1
         EX    R1,MOVENAME             COPY NAME
         TITLE 'SEARCH CATALOG FOR DSNAME'
***********************************************************************
*                                                                     *
*        LOCATE CATALOG BLOCK                                         *
*                                                                     *
***********************************************************************
         SPACE 2
LOCATE   MVC   INDEX,DSNAME            COPY TO INDEX NAME ALSO
         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS
         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE
         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS
         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS
         MVI   CATBLOCK+2,X'FF'        GARBAGE INTO CATALOG BLOCK AREA
         TM    VOLSER+6,X'80'          SEE IF VOLUME SERIAL IS PRESENT
         BNZ   COPYSER
         AIF   ('&OPSYSTM' NE 'MVS').LOCATE
         NC    GENERIC,GENERIC         TEST FOR GENERIC OPTION
         BNZ   PROCGRP
.LOCATE  LOCATE LOCLIST                LOCATE BY NAME
         LTR   R15,R15                 TEST RETURN CODE
         AIF   ('&OPSYSTM' EQ 'MVS').MVSLOC
         BZ    OBTAIN1
         AGO   .TESTNDX
.MVSLOC  BNZ   CHECK8
         CLC   DSNAME,INDEX            SEE IF ALIAS NAME RETURNED
         BE    OBTAIN1
         CLC   DSNAME(8),=C'SYSCTLG.'  SEE IF CVOL NAME RETURNED
         BNE   PROCGRP
         MVC   CVOL,CATBLOCK+6         COPY CVOL SERIAL
         MVC   DSNAME,INDEX            RESET DATA SET/INDEX NAME
         LOCATE LOCLIST2               LOCATE BY NAME AND CVOL
         CH    R15,=H'12'              RC = 12 - PROCESS BY TTR
         BE    PROCTTR
         LTR   R15,R15                 IF CVOL NAME RETURNED AGAIN,
         BE    PROCGRP                    SU 8 NOT INSTALLED
         B     LOCERROR
CHECK8   CH    R15,=H'8'               SEE IF EMPTY INDEX STRUCTURE
         BNE   CHECK12
         CLC   CATBLOCK+2(8),=X'0000000000000001'  TEST FOR ICE
         BNE   PROCGRP
         CLC   CATBLOCK+20(8),=X'FFFFFFFFFFFFFFFF' TEST FOR ILE
         BNE   PROCGRP
*--------EMPTY INDEX STRUCTURE
         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS
         MVC   0(32,R1),EMPTYNDX       COPY ERROR MESSAGE
         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS
         MVC   0(44,R2),INDEX          COPY INDEX NAME
         BAL   R2,PUTL                 DISPLAY LINE
         B     ENDGRP
         SPACE 2
.TESTNDX ANOP
*--------TEST FOR INDEX (MVT, SVS, OR MVS WITH SU 8)
CHECK12  CH    R15,=H'12'              TEST FOR INDEX NAME
         BNE   LOCERROR
         TITLE 'DATA SET GROUP PROCESSING - VIA TTR'
***********************************************************************
*                                                                     *
*        PROCESS DATA SET GROUP VIA TTR                               *
*                                                                     *
***********************************************************************
         SPACE 2
PROCTTR  NC    DSONLY,DSONLY           SEE IF DSONLY SPECIFIED
         BNZ   LOCERROR
         OI    FLAGS,DSATGRP           SET DSGROUP FLAG
         MVC   CVOL,CATBLOCK+259       SAVE CVOL SERIAL
         L     R1,WORKAREA             LOAD FIRST BLOCK ADDRESS
         ST    R1,FIRSTBLK             SAVE FIRST BLOCK ADDRESS
         ST    R1,CURRBLK              SAVE CURRENT BLOCK ADDRESS
         LA    R2,10(R1)               LOAD ADDRESS OF FIRST DATA ENTRY
         ST    R2,0(R1)                SAVE CURRENT ENTRY ADDRESS
         MVC   0(254,R2),CATBLOCK+2    COPY CATALOG BLOCK
         LA    R4,INDEX                LOAD INDEX NAME
FINDEND1 LA    R4,1(R4)                POINT TO NEXT CHARACTER
         CLI   0(R4),C' '              TEST FOR BLANK
         BNE   FINDEND1
         ST    R4,ENDNAME              SAVE END OF NAME ADDRESS
         B     PROCNTRY                LOAD INDEX NAME
FINDEND  LA    R4,1(R4)                POINT TO NEXT CHARACTER
         CLI   0(R4),C' '              TEST FOR BLANK
         BNE   FINDEND
         ST    R4,ENDNAME              SAVE END OF NAME ADDRESS
READCTLG ST    R1,CURRBLK              SAVE CURRENT BLOCK ADDRESS
         LA    R2,8(R1)                LOAD WORK AREA ADDRESS
         ST    R2,LOCBYTTR+12          SAVE IN PARM LIST
         LA    R2,2(R2)                FIRST 2 BYTES WILL BE LENGTH
         ST    R2,0(R1)                INITIALIZE POINTER
         LOCATE LOCBYTTR               LOCATE BY TTR
         LTR   R15,R15                 TEST RETURN CODE
         BNZ   LOCERROR
         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS
PROCNTRY CLC   0(8,R2),=X'FFFFFFFFFFFFFFFF'  TEST FOR LINK ENTRY
         BE    LNKENTRY
         CLC   0(8,R2),=X'0000000000000001'  TEST FOR INDEX CONTROL
         BE    DSATNEXT
         CLI   11(R2),X'01'            DATA SET WITH OVER 5 VOLUMES
         BE    DSNOVER5
         CLI   11(R2),X'00'            TEST FOR INDEX ENTRY
         BE    NDXENTRY
         CLI   11(R2),X'02'            TEST FOR GDG ENTRY
         BNE   DSNENTRY
*--------GENERATION INDEX
         OI    FLAGS,GDG               INDICATE GDG
         CLC   GDGDATA,=H'2'           SEE IF GDG DATA REQUESTED
         BE    NDXENTRY
         MVC   OUTLINE(L'GDGMSG),GDGMSG     COPY MESSAGE
         L     R15,ENDNAME             LOAD END OF INDEX NAME
         MVI   0(R15),C'.'             ADD .
         MVC   1(8,R15),0(R2)          ADD INDEX QUALIFIER
         L     R15,DSNFLD              LOAD DSNAME FIELD ADDRESS
         MVC   0(44,R15),INDEX         COPY INDEX TO MESSAGE
         SR    R15,R15                 LOAD MAXIMUM ENTRIES
         IC    R15,13(R2)
         CVD   R15,DSATPDEC            CONVERT MAX
         OI    DSATPDEC+7,X'0F'        SET SIGN CODE
         UNPK  DSATDEC,DSATPDEC+4(4)   UNPACK
         MVC   OUTLINE+36(3),DSATDEC+5 COPY TO MESSAGE
         LH    R15,14(R2)              LOAD CURRENT
         CVD   R15,DSATPDEC            CONVERT TO DECIMAL
         OI    DSATPDEC+7,X'0F'        SET SIGN CODE
         UNPK  DSATDEC,DSATPDEC+4(4)   UNPACK
         MVC   OUTLINE+28(3),DSATDEC+5 COPY TO MESSAGE
         TM    12(R2),X'03'            TEST FLAG BYTE
         BZ    PUTGDG
         BM    GDGEORD
         MVC   OUTLINE+15(4),=C'E,D '  INDICATE EMPTY, DELETE
         B     PUTGDG
GDGEORD  MVC   OUTLINE+15(4),=C'E   '
         TM    12(R2),X'01'
         BNZ   PUTGDG
         MVI   OUTLINE+15,C'D'
PUTGDG   LR    R4,R2                   SAVE R2
         BAL   R2,PUTL                 DISPLAY LINE
         LR    R2,R4                   RESTORE R2
         MVC   OUTLINE,BLANKS          CLEAR OUTPUT AREA
*--------INDEX ENTRY - ADD NAME TO INDEX AND GET NEXT BLOCK
NDXENTRY L     R4,ENDNAME              LOAD END OF NAME ADDRESS
         MVI   0(R4),C'.'
         MVC   1(8,R4),0(R2)           ADD INDEX NAME
         NI    FLAGS,X'FF'-NOTEMPTY    CLEAR EMPTY INDICATOR
         MVC   TTR,8(R2)               COPY TTR
         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS
         LA    R1,264(R1)              INCREMENT TO NEXT BLOCK
         B     FINDEND
*--------INDEX LINK ENTRY
LNKENTRY NC    8(3,R2),8(R2)           TEST FOR ZERO TTR
         BZ    ENDLEVEL
         MVC   TTR,8(R2)               COPY TTR
         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS
         B     READCTLG
*--------END OF INDEX LEVEL
ENDLEVEL TM    FLAGS,NOTEMPTY          TEST FOR EMPTY INDEX
         BNZ   TESTDONE
         TM    FLAGS,GDG               TEST FOR GDG
         BNZ   MTGDG
         MVC   OUTLINE(32),EMPTYNDX    MOVE MESSAGE INTO LINE
         B     PUTEMPTY
MTGDG    MVC   OUTLINE(32),EMPTYGDG    MOVE MESSAGE INTO LINE
PUTEMPTY L     R2,DSNFLD               LOAD DSNAME FIELD
         MVC   0(44,R2),INDEX          MOVE INDEX INTO MESSAGE
         BAL   R2,PUTL                 DISPLAY MESSAGE
         MVC   OUTLINE,BLANKS          CLEAR LINE
TESTDONE OI    FLAGS,NOTEMPTY          SET NOT EMPTY
         NI    FLAGS,X'FF'-GDG         CLEAR GDG INDICATOR
         CLC   FIRSTBLK,CURRBLK        TEST FOR DONE
         BE    ENDGRP
         L     R4,ENDNAME              REMOVE LOWEST LEVEL NAME
FINDDOT  BCTR  R4,0
         CLI   0(R4),C'.'
         MVI   0(R4),C' '
         BNE   FINDDOT
         ST    R4,ENDNAME
         L     R1,CURRBLK              POINT TO PREVIOUS BLOCK
         S     R1,=F'264'
         ST    R1,CURRBLK
*--------NEXT ENTRY
DSATNEXT L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS
         L     R2,0(R1)                LOAD POINTER
         SR    R15,R15                 LOAD HALFWORD COUNT
         IC    R15,11(R2)
         SLA   R15,1                   DOUBLE TO GET BYTES
         LA    R2,12(R15,R2)           12 BYTES FOR HEADER
         ST    R2,0(R1)                SAVE POINTER
         B     PROCNTRY
*--------DATA SET ENTRY WITH OVER 5 VOLUMES
DSNOVER5 OI    FLAGS,NOTEMPTY          INDICATE NOT EMPTY
         MVC   DSNAME,INDEX            COPY INDEX TO DSNAME
         L     R1,ENDNAME              GET INDEX NAME LENGTH
         LA    R15,INDEX
         SR    R1,R15
         LA    R1,DSNAME(R1)           POINT TO END OF NAME
         MVI   0(R1),C'.'
         MVC   1(8,R1),0(R2)           ADD NAME
         TM    2(R1),X'F0'             TEST FOR GDG NAME
         BNZ   LOCATE2
         XC    2(4,R1),=X'FFFFFFFF'    COMPLEMENT GENERATION NUMBER
LOCATE2  L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS
         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE
         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS
         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS
         LOCATE LOCLIST                LOCATE BY NAME
         LTR   R15,R15                 TEST RETURN CODE
         BZ    OBTAIN1
         B     LOCERROR
*--------DATA SET ENTRY
DSNENTRY OI    FLAGS,NOTEMPTY          INDICATE NOT EMPTY
         MVC   DSNAME,INDEX            COPY INDEX TO DSNAME
         L     R1,ENDNAME
         LA    R15,INDEX
         SR    R1,R15                  GET LENGTH OF INDEX
         LA    R1,DSNAME(R1)           POINT TO END OF NAME
         MVI   0(R1),C'.'
         MVC   1(8,R1),0(R2)           ADD NAME
         TM    2(R1),X'F0'             TEST FOR GDG NAME
         BNZ   DSNMVC
         XC    2(4,R1),=X'FFFFFFFF'    COMPLEMENT GENERATION NUMBER
DSNMVC   LA    R8,12(R2)               POINT TO VOLUME LIST
         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS
         MVC   0(44,R2),DSNAME         COPY DSNAME
         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS
         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS
         B     LDVOLCNT
         TITLE 'DATA SET GROUP PROCESSING - VIA VSAM LOCATE'
***********************************************************************
*                                                                     *
*        PROCESS DATA SET GROUP VIA VSAM LOCATE                       *
*                                                                     *
***********************************************************************
         SPACE 2
PROCGRP  OI    FLAGS2,$VSAMLOC         INDICATE VSAM LOCATE BEING USED
         LA    R1,INDEX+44             LOAD END OF SEARCH KEY ADDRESS
BACKUP   BCTR  R1,0                    DECREMENT POINTER
         CLI   0(R1),C' '              TEST FOR BLANK
         BE    BACKUP
         LR    R7,R1                   SAVE ADDRESS
         LA    R15,INDEX               LOAD INDEX ADDRESS
         SR    R7,R15                  GET LENGTH OF INDEX NAME
         LA    R7,1(R7)
         NC    DSONLY,DSONLY           TEST FOR DSONLY
         BNZ   SAVELEN
         NC    GENERIC,GENERIC         TEST FOR GENERIC
         BNZ   SAVELEN
         LA    R7,1(R7)                ADD ONE MORE FOR THE PERIOD
         MVI   1(R1),C'.'              ADD THE PERIOD
SAVELEN  STC   R7,INDEXLEN
RETRYLOC L     R15,WORKAREA            LOAD WORK AREA
         XC    0(4,R15),0(R15)         ZERO LENGTH FIELDS
         L     R1,WORKLEN              LOAD LENGTH OF WORK AREA
         STH   R1,0(R15)               STORE IN WORK AREA
         LOCATE CTGPL                  LOCATE ALL DSNAMES
         LTR   R15,R15                 TEST RETURN CODE
         BZ    PROCDATA
         SPACE 2
***********************************************************************
*                                                                     *
*        RETURN CODES 40 AND 44 INDICATE THAT THE WORK AREA IS TOO    *
*        SMALL TO CONTAIN ALL THE DATA SET NAMES, BUT AS MANY NAMES   *
*        AS COULD BE HELD HAVE BEEN RETURNED.                         *
*                                                                     *
*        CODE 44 INDICATES THAT SVC 26 COULD NOT DETERMINE THE SIZE   *
*        WORK AREA REQUIRED, SO CONTINUE PROCESSING THE NAMES THAT    *
*        WERE RETURNED.                                               *
*                                                                     *
*        CODE 40 INDICATES THAT SVC 26 RETURNED THE REQUIRED WORK     *
*        AREA SIZE IN THE SECOND HALFWORD OF THE WORK AREA.  FREE     *
*        THE ORIGINAL WORK AREA, OBTAIN A NEW WORK AREA OF REQUIRED   *
*        SIZE, AND RE-TRY THE LOCATE REQUEST.                         *
*                                                                     *
*        NOTE THAT SVC 26 CONSIDERS A SIZE OF 32,768 (X'8000') OR     *
*        MORE A NEGATIVE SIZE AND WILL NOT RETURN ANY INFORMATION.    *
*        IF MORE THAN 32,767 IS REQUIRED, JUST PROCESS WHAT WAS       *
*        RETURNED.                                                    *
*                                                                     *
***********************************************************************
         SPACE 2
         CH    R15,=H'44'              SEE IF WORK AREA TOO SMALL
         BE    PARTIAL
         CH    R15,=H'40'
         BNE   LOCERROR
*--------GET NEW, BIGGER WORK AREA
         L     R1,WORKAREA             LOAD WORK AREA ADDRESS
         CLC   =X'7FFF',2(R1)          TEST FOR MORE THAN 32,767
         BL    PARTIAL
         L     R2,WORKLEN              LOAD WORK AREA LENGTH
         XC    0(2,R1),0(R1)           ZERO 2 BYTES
         L     R3,0(R1)                LOAD LENGTH NEEDED
         FREEMAIN R,LV=(R2),A=(R1),SP=1  FREE OLD WORK AREA
         GETMAIN  R,LV=(R3),SP=1       GET NEW WORK AREA
         ST    R3,WORKLEN              SAVE WORK AREA LENGTH
         ST    R1,WORKAREA             SAVE WORK AREA ADDRESS
         ST    R1,CTGWKA               STORE ADDRESS IN CTGPL
         B     RETRYLOC
*--------TOO MANY NAMES FOR WORK AREA
PARTIAL  OI    FLAGS2,$INCMPLT         INDICATE NAME LIST INCOMPLETE
         MVC   2(2,R1),0(R1)           SET LENGTH USED TO TOTAL LENGTH
*--------PROCESS DATA SETS
PROCDATA OI    FLAGS,DSATGRP           SET GROUP INDICATOR
         L     R15,WORKAREA            LOAD WORK AREA ADDRESS
         XC    0(2,R15),0(R15)         ZERO HIGH TWO BYTES
         L     R1,0(R15)               LOAD LENGTH OF WORK AREA USED
         LA    R1,0(R1,R15)            ADD TO WORK AREA ADDRESS
         S     R1,=F'43'               BACK OFF ONE ENTRY LESS ONE
         ST    R1,ENDWORK              SAVE END OF WORK AREA USED ADDR
         LA    R7,4(R15)               LOAD ADDRESS OF FIRST ENTRY
         B     DSATPROC
DSATNXT2 L     R7,CURRBLK              LOAD ADDR LAST ENTRY PROCESSED
         LA    R7,45(R7)               INCREMENT TO NEXT NAME
DSATPROC C     R7,ENDWORK              SEE IF NAME IS OUT OF WORK AREA
         BH    TESTCOMP
         ST    R7,CURRBLK              SAVE ADDRESS OF THIS ENTRY
         MVC   DSNAME,1(R7)            COPY DSNAME
         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS
         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS
         L     R2,DSNFLD               LOAD ADDRESS OF DSNAME FIELD
         MVC   0(44,R2),DSNAME         COPY DSNAME INTO MESSAGE
         LOCATE LOCLIST                LOCATE BY NAME
         LTR   R15,R15                 TEST RETURN CODE
         BNZ   LOCERROR
         B     OBTAIN1
TESTCOMP TM    FLAGS2,$INCMPLT         SEE IF NAME LIST INCOMPLETE
         BZ    ENDGRP
         L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS
         MVC   0(32,R2),DSATERR3       MOVE IN ERROR MESSAGE
         BAL   R2,PUTL                 DISPLAY LINE
         MVC   OUTLINE,BLANKS          BLANK OUT LINE
         B     ENDGRP
         TITLE 'SEARCH VTOC'
***********************************************************************
*                                                                     *
*        OBTAIN DSCB'S                                                *
*                                                                     *
***********************************************************************
         SPACE 2
COPYSER  MVC   CATBLOCK+6,=CL6' '      BLANK OUT VOLUME SERIAL
         LH    R1,VOLSER+4             LOAD VOLUME SERIAL LENGTH
         BCTR  R1,0                    REDUCE BY 1
         LA    R2,CATBLOCK+6           LOAD DESTINATION ADDRESS
         L     R4,VOLSER               LOAD SOURCE ADDRESS
         EX    R1,MOVENAME             COPY VOLUME SERIAL
         MVC   CATBLOCK(2),=H'1'       SET VOLUME COUNT
         MVC   CATBLOCK+2(4),=X'00002000'  MAKE IT LOOK LIKE DASD
         XC    CATBLOCK+12(2),CATBLOCK+12  ZERO FILE SEQUENCE NUMBER
         CLI   0(R4),C'*'              TEST FOR * ENTERED
         BNE   OBTAIN1
         XC    SERPTR,SERPTR           ZERO SERIAL POINTER
         XC    LASTUCB,LASTUCB         ZERO LAST UCB PROCESSED
         L     R1,16                   LOAD CVT ADDRESS
         L     R1,40(R1)               LOAD UCB TABLE ADDRESS
         B     NEXTUCB1
NEXTSER  L     R1,SERPTR               LOAD PREVIOUS ENTRY
         LA    R1,2(R1)                INCREMENT POINTER
NEXTUCB1 SR    R15,R15                 CLEAR R15
         AIF   ('&OPSYSTM' EQ 'MVS').LOADMVS
         LH    R15,0(R1)               LOAD UCB ADDRESS
         AGO   .COMMON
.LOADMVS ICM   R15,3,0(R1)             LOAD UCB ADDRESS
.COMMON  LTR   R15,R15                 TEST FOR HOLE
         BZ    UCBHOLE1
         CLC   0(2,R1),=X'FFFF'        TEST FOR END OF TABLE
         BE    ENDVALL
         CLI   18(R15),X'20'           TEST FOR DIRECT ACCESS
         BNE   UCBHOLE1
         CLI   28(R15),X'00'           TEST FOR NO SERIAL
         BE    UCBHOLE1
         TM    6(R15),X'40'            TEST FOR NOT READY
         BO    UCBHOLE1
         C     R15,LASTUCB             SEE IF ALTERNATE PATH
         BH    THISVOL
UCBHOLE1 LA    R1,2(R1)                NEXT ENTRY
         B     NEXTUCB1
ENDVALL  TM    FLAGS2,$FOUND           SEE IF DATA SET FOUND ON ANY VOL
         BO    ENDGRP2
         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS
         MVC   0(44,R2),DSNAME         COPY DSNAME
         L     R2,ERRFLD               LOAD ERRROR FIELD ADDRESS
         MVC   0(32,R2),NOVOL          COPY ERROR MESSAGE
         BAL   R2,PUTL                 DISPLAY ERROR MESSAGE
         B     ENDGRP2
THISVOL  MVC   CATBLOCK+2(4),16(R15)   COPY UCBTYPE FIELD
         MVC   CATBLOCK+6(6),28(R15)   COPY SERIAL
         ST    R1,SERPTR               STORE UCB TABLE POINTER
         ST    R15,LASTUCB             STORE LAST UCB PROCESSED ADDR
         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS
         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE
         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS
         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS
OBTAIN1  LA    R8,CATBLOCK             LOAD VOLUME LIST ADDRESS
LDVOLCNT MVC   HALF,0(R8)              VOLUME COUNT TO ALIGNED AREA
         LH    R1,HALF                 LOAD VOLUME COUNT
         LA    R8,2(R8)                BUMP POINTER TO FIRST VOL FIELD
         CH    R1,=H'20'               TEST AGAINST MAX COUNT
         BNH   GETSER
         LA    R1,20                   SET MAX COUNT
GETSER   C     R1,=F'1'                TEST VOLUME COUNT
         BL    BADVOLCT                BAD VOLUME COUNT
         BE    STOREVCT
         OI    FLAGS,$MULTVOL          INDICATE MULTIVOLUME
STOREVCT STH   R1,VOLCNT               STORE REMAINING VOLUME COUNT
         MVC   DSATSER,4(R8)           COPY SERIAL
         CLC   SERIAL,=H'2'            TEST FOR NOSERIAL
         BE    TESTDA
         L     R2,SERFLD               LOAD OUTPUT AREA ADDRESS
         MVC   0(6,R2),DSATSER         COPY SERIAL TO OUTPUT LINE
         CLC   SEQNO,=H'2'             TEST FOR NOSEQNO
         BE    TESTDA
         MVC   HALF,10(R8)             SEQ NO TO ALIGNED AREA
         LH    R1,HALF                 LOAD FILE SEQUENCE NUMBER
         CVD   R1,DSATPDEC             CONVERT TO DECIMAL
         MVC   DSATDEC,=X'4020202020202120'   MOVE IN MASK
         ED    DSATDEC,DSATPDEC+4      EDIT SEQUENCE NUMBER
         MVC   7(4,R2),DSATDEC+4       MOVE TO MESSAGE
TESTDA   CLI   2(R8),X'20'             TEST FOR DIRECT ACCESS
         BNE   NOTDASD
         SR    R1,R1                   CLEAR REG 1
         IC    R1,3(R8)                LOAD LAST BYTE OF DEVTYPE FIELD
TESTTYPE CH    R1,=H'15'               TEST AGAINST MAX
         BH    NOTDASD
         SLA   R1,3                    MULTIPLY BY 8
         SR    R0,R0
         IC    R0,TRKSCYL(R1)          INSERT TRACKS PER CYL
         STH   R0,TRKPRCYL             SAVE IT
         LTR   R0,R0                   TEST IT
         BNZ   TESTDEV
*--------DEVICE CODE NOT IN CATALOG, GET IT FROM UCB
         L     R2,16                   LOAD CVT ADDRESS
         L     R2,40(R2)               LOAD UCB TABLE ADDRESS
         SR    R15,R15
NEXTDEV  EQU   *
         AIF   ('&OPSYSTM' EQ 'MVS').MVSUCB
         LH    R15,0(R2)               LOAD UCB ADDRESS
         AGO   .TESTUCB
.MVSUCB  ICM   R15,3,0(R2)             LOAD UCB ADDRESS
.TESTUCB LTR   R15,R15                 TEST FOR EMPTY ENTRY
         BZ    UCBHOLE2
         CLC   0(2,R2),=X'FFFF'        TEST FOR END OF TABLE
         BE    NOTUP
         CLC   28(6,R15),DSATSER       COMPARE SERIAL
         BNE   UCBHOLE2
         TM    6(R15),X'40'            TEST FOR NOT READY
         BO    NOTUP
         IC    R1,19(R15)              INSERT TYPE CODE
         TM    VOLSER+6,X'80'          SEE IF VOL SERIAL ENTERED
         BZ    TESTTYPE
         MVC   CATBLOCK+2(4),16(R15)   COPY DEVTYPE TO DUMMY ENTRY
         B     TESTTYPE
UCBHOLE2 LA    R2,2(R2)                NEXT UCB TABLE ENTRY
         B     NEXTDEV
NOTUP    LA    R15,4                   VOL NOT MOUNTED - OBTAIN ERROR 4
         B     DSNERR
TESTDEV  CLC   DEVTYPE,=H'2'           TEST FOR DEVTYPE
         BE    TESTDEV2
         UNPK  DSATDEC(9),0(5,R8)      UNPACK DEVTYPE
         TR    DSATDEC(8),TRTABLE      TRANSLATE TO EBCDIC
         L     R2,DEVFLD               LOAD OUTPUT ADDRESS
         MVC   0(8,R2),DSATDEC         MOVE TO MESSAGE
TESTDEV2 CLC   DEVICE,=H'2'            TEST FOR DEVICE
         BE    GETFMT1
         L     R2,DEVFIELD             LOAD OUTPUT AREA ADDRESS
         LA    R15,TRKSCYL(R1)         LOAD FIELD ADDRESS
         MVC   0(6,R2),1(R15)          DEVICE CODE TO OUTPUT LINE
GETFMT1  OBTAIN DSATDCB1               GET FORMAT 1 DSCB
         LTR   R15,R15                 TEST RETURN CODE
         BNZ   DSNERR
         NC    DS1PTRDS,DS1PTRDS       SEE IF THERE IS A FORMAT 3 DSCB
         BZ    PROCESS
         OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB
         LTR   R15,R15                 TEST RETURN CODE
         BNZ   DSNERR
         TITLE 'PROCESS THE DSCB'
***********************************************************************
*                                                                     *
*        PROCESS THE DSCB                                             *
*                                                                     *
***********************************************************************
         SPACE 2
PROCESS  OI    FLAGS,COUNT             COUNT THIS DATA SET
         OI    FLAGS2,$FOUND           INDICATE DATA SET FOUND
         CLC   ALLOC,=H'2'             TEST FOR NOALLOC
         BE    PROCDSRG
         BAL   R14,$ALLOC              BRANCH TO PROCESSING ROUTINE
         LM    R4,R5,TOTLS+8           LOAD DATA SET TOTALS
         AR    R4,R6                   ADD TRACKS ALLOCATED THIS VOLUME
         AR    R5,R7                   ADD TRACKS USED THIS VOLUME
         STM   R4,R5,TOTLS+8           SAVE TOTALS
PROCDSRG CLC   DSORG,=H'2'             TEST FOR NODSORG
         BE    PROCPDS
         BAL   R14,$DSORG              BRANCH TO PROCESSING ROUTINE
PROCPDS  CLC   PDS,=H'2'               TEST FOR NOPDS
         BE    PROCDCB
         TM    DS1DSORG,X'02'          MAKE SURE DSORG = PO
         BZ    PROCDCB
         L     R15,=V(DSATPDS)         LOAD SUBROUTINE ADDRESS
         BALR  R14,R15                 BRANCH TO PROCESSING ROUTINE
PROCDCB  CLC   DCB,=H'2'               TEST FOR NODCB
         BE    PROCCRDT
         BAL   R14,$DCB                BRANCH TO PROCESSING ROUTINE
PROCCRDT CLC   CRDATE,=H'2'            TEST FOR NOCRDATE
         BE    PROCEXDT
         BAL   R14,$CRDATE             BRANCH TO PROCESSING ROUTINE
PROCEXDT CLC   EXDATE,=H'2'            TEST FOR NOEXDATE
         BE    PROCCHHR
         BAL   R14,$EXDATE             BRANCH TO PROCESSING ROUTINE
PROCCHHR CLC   CCHHR,=H'2'             TEST FOR NOCCHHR
         BE    PUTLINE
         BAL   R14,$CCHHR              BRANCH TO PROCESSING ROUTINE
PUTLINE  BAL   R2,PUTL                 DISPLAY THE LINE
RESETLIN MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE
         SPACE 2
***********************************************************************
*                                                                     *
*        ACCUMULATE TOTALS                                            *
*                                                                     *
***********************************************************************
         SPACE 2
         LA    R8,12(R8)               INCREMENT TO NEXT VOLUME
         LH    R1,VOLCNT               LOAD VOLUME COUNT
         BCT   R1,GETSER               LOOP FOR MORE VOLUMES
         LM    R4,R8,TOTLS             LOAD TOTALS FIELDS
         AR    R4,R6                   ACCUMULATE TOTAL TRACKS ALLOC
         AR    R5,R7                   ACCUMULATE TOTAL TRACKS USED
         TM    FLAGS,COUNT             COUNT IT?
         BZ    SAVETOTL
         NI    FLAGS,X'FF'-COUNT       RESET COUNT BIT
         LA    R8,1(R8)                INCREMENT DATA SET COUNT
SAVETOTL STM   R4,R8,TOTLS             STORE TOTALS
         SPACE 2
***********************************************************************
*                                                                     *
*        PROCESS NEXT DATA SET                                        *
*                                                                     *
***********************************************************************
         SPACE 2
         TM    FLAGS,DSATGRP           TEST FOR DATA SET GROUP
         BZ    ENDGRP
         TM    FLAGS2,$VSAMLOC         TEST FOR VSAM LOCATE
         BZ    DSATNEXT                GET NEXT DSNAME
         B     DSATNXT2                GET NEXT DSNAME
         SPACE 2
ENDGRP   NI    FLAGS,RESET             RESET DATA SET GROUP FLAG
         NI    FLAGS2,X'FF'-$VSAMLOC-$INCMPLT
         TM    VOLSER+6,X'80'          SEE IF VOLUME ENTERED
         BZ    ENDGRP2
         L     R1,VOLSER               LOAD VOLUME SERIAL ADDRESS
         CLI   0(R1),C'*'              TEST FOR ASTERISK
         BE    NEXTSER
ENDGRP2  L     R3,24(R3)               LOAD ADDRESS OF NEXT PDE
         C     R3,=X'FF000000'         TEST FOR END OF CHAIN
         BNE   SETUPNXT
         TITLE 'DISPLAY TOTALS'
***********************************************************************
*                                                                     *
*        DISPLAY TOTALS IF REQUESTED                                  *
*                                                                     *
***********************************************************************
         SPACE 2
         CLC   TOTALS,=H'2'            SEE IF TOTALS REQUESTED
         BE    RETURN
         MVC   OUTLINE,BLANKS          CLEAR OUTPUT LINE
         LM    R4,R8,TOTLS             LOAD TOTALS
         CVD   R8,DSATPDEC             CONVERT NUMBER OF DATA SETS
         MVC   DSATDEC,=X'4020202020202120'
         ED    DSATDEC,DSATPDEC+4      EDIT
         L     R2,DSNFLD               LOAD DATA SET NAME FIELD
         MVC   0(4,R2),DSATDEC+4       MOVE INTO OUTPUT LINE
         MVC   5(19,R2),=C'DATA SETS DISPLAYED'
         CH    R8,=H'1'                TEST FOR ONE OR ZERO DATA SETS
         BH    CNVTALOC
         TM    FLAGS,$MULTVOL          TEST FOR MULTIVOLUME
         BZ    RETURN
         NI    FLAGS,X'FF'-$MULTVOL    CLEAR MULTIVOLUME INDICATOR
         MVC   5(19,R2),=C'DATA SET DISPLAYED '
CNVTALOC CLC   ALLOC,=H'2'             SEE IF ALLOCATION REQUESTED
         BE    DISPLAYT
         L     R2,ALLOCFLD             LOAD ALLOCATION FIELD ADDRESS
         CVD   R4,DSATPDEC             CONVERT ALLOCATED TOTAL TO DEC
         MVC   DSATDEC,=X'4020202020202120'
         ED    DSATDEC,DSATPDEC+4      EDIT
         MVC   0(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE
         CVD   R5,DSATPDEC             CONVERT USED TOTAL TO DECIMAL
         MVC   DSATDEC,=X'4020202020202120'
         ED    DSATDEC,DSATPDEC+4      EDIT
         MVC   6(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE
DISPLAYT BAL   R2,PUTL                 DISPLAY LINE
         TITLE 'SET UP RETURN CODE'
***********************************************************************
*                                                                     *
*        SET UP RETURN CODE                                           *
*                                                                     *
***********************************************************************
         SPACE 2
RETURN   LM    R4,R8,TOTLS             LOAD TOTALS
         LH    R15,RC                  LOAD RETURN CODE
         C     R15,=F'10'              SEE IF A PDS CODE
         BL    BRANCH
         LM    R4,R7,PDSTOTLS          LOAD PDS TOTALS
BRANCH   SLA   R15,2                   MULTIPLY BY 4
         B     BRTABLE(R15)            BRANCH TO PROPER ROUTINE
BRTABLE  B     RC4
         B     RCTALLOC
         B     RCTUSED
         B     RCLALLOC
         B     RCLUSED
         B     RCTDIFF
         B     RCLDIFF
         B     RCNUM
         B     RCPREV
         B     RCDSORG
         B     RCDIRA
         B     RCDIRU
         B     RCENTR
         B     RCMEMB
RCALIAS  LR    R15,R7                  NUMBER OF ALIASES
         B     EXIT
RCMEMB   LR    R15,R6                  NUMBER OF ENTRIES
         SR    R15,R7                  MINUS ALIASES = MEMBERS
         B     EXIT
RCENTR   LR    R15,R6                  NUMBER OF ENTRIES
         B     EXIT
RCDIRU   LR    R15,R5                  DIRECTORY BLOCKS USED
         B     EXIT
RCDIRA   LR    R15,R4                  DIRECTORY BLOCKS ALLOCATED
         B     EXIT
RCDSORG  NI    FLAGS,$NOTPOPS+$DSPO+$DSPS   SAVE DSORG INDICATORS
         LA    R15,4                   SET COMPLETION CODE
         TM    FLAGS,$NOTPOPS
         BNZ   EXIT
         IC    R15,FLAGS               LOAD FLAGS AS RC
         B     EXIT
RCPREV   L     R15,CPPLECT             LOAD ECT ADDRESS
         USING ECT,R15
         LH    R15,ECTRTCD+1           LOAD PREVIOUS RETURN CODE
         DROP  R15
         B     EXIT
RCTALLOC LR    R15,R4                  LOAD TOTAL TRACKS ALLOCATED
         B     EXIT
RCTUSED  LR    R15,R5                  LOAD TOTAL TRACKS USED
         B     EXIT
RCLALLOC LR    R15,R6                  LOAD TRACKS ALLOCATED BY LAST DS
         B     EXIT
RCLUSED  LR    R15,R7                  LOAD TRACKS USED BY LAST DS
         B     EXIT
RCTDIFF  LR    R15,R4                  LOAD TOTAL TRACKS ALLOCATED
         SR    R15,R5                  SUBTRACTS TOTAL TRACKS USED
         B     EXIT
RCLDIFF  LR    R15,R6                  LOAD TRACKS ALLOCATED BY LAST DS
         SR    R15,R7                  SUBTRACT TRACKS USED BY LAST DS
         B     EXIT
RCNUM    LR    R15,R8                  LOAD DATA SET COUNT
         B     EXIT
RC4      LA    R15,4                   SET RETURN CODE TO 4
         TITLE 'EXIT CODING'
***********************************************************************
*                                                                     *
*        RELEASE STORAGE AND RETURN                                   *
*                                                                     *
***********************************************************************
         SPACE 2
EXIT     LR    R3,R15                  SAVE RETURN CODE
         IKJRLSA DSATANS               RELEASE PARSE STORAGE
EXIT2    L     R1,WORKAREA             LOAD WORK AREA ADDRESS
         L     R2,WORKLEN              LOAD WORK AREA LENGTH
         FREEMAIN R,LV=(R2),A=(R1),SP=1  FREE WORK AREA
         LR    R15,R3                  RESTORE RETURN CODE
         $RTRN RENT=DSECTLEN,RC=(R15)
         TITLE 'GET ALLOCATION INFORMATION'
***********************************************************************
*                                                                     *
*        GET ALLOCATION  (ALLOCATED, USED, AND EXTENTS)               *
*                                                                     *
***********************************************************************
*                                                                     *
*        R2        - OUTPUT AREA ADDRESS                              *
*        R3        - RESERVED (DSNAME PDE POINTER)                    *
*        R4        - NUMBER OF EXTENTS (COUNTER)                      *
*        R5        - EXECUTE TABLE POINTER                            *
*        R6        - TRACKS ALLOCATED                                 *
*        R7        - EXTENT DESCRIPTION POINTER/TRACKS USED           *
*        R8 - R13  - RESERVED (POINTERS AND BASE REGISTERS)           *
*                                                                     *
***********************************************************************
         SPACE 2
*--------GET TRACK ALLOCATION
$ALLOC   L     R2,ALLOCFLD             LOAD OUTPUT AREA ADDRESS
         SR    R4,R4                   CLEAR REGISTER 4
         SR    R5,R5                   CLEAR REGISTER 5
         SR    R6,R6                   CLEAR REGISTER 6
         SR    R7,R7                   CLEAR REGISTER 7
         IC    R4,DS1NOPEV             LOAD NUMBER OF EXTENTS
         LTR   R4,R4                   TEST NUMBER OF EXTENTS
         BZ    ALLOCEND
DSATTRKS EX    R0,DSATADDR(R5)         PROCESS EXTENT BLOCK
         CLI   0(R7),X'00'
         BE    DSATUTRK
         LA    R7,2(R7)                LOAD ADDRESS OF STARTING TRACK
         MVC   HALF(2),4(R7)           LOAD ENDING CYL NUMBER
         LH    R1,HALF
         MVC   HALF(2),0(R7)           LOAD STARTING CYL NUMBER
         SH    R1,HALF                 SUBTRACT STARTING FROM ENDING
         MH    R1,TRKPRCYL             MULTIPLY BY TRACKS PER CYL
         MVC   HALF(2),6(R7)           LOAD ENDING TRACK
         AH    R1,HALF                 ADD TO TRACK COUNT
         MVC   HALF(2),2(R7)           LOAD STARTING TRACK
         SH    R1,HALF                 SUBTRACT FROM TRACK COUNT
         AR    R6,R1                   ACCUMULATE TOTAL
         LA    R6,R1(R6)               ADD 1 TRACK
         LA    R5,4(R5)
         BCT   R4,DSATTRKS             DECREMENT EXTENT COUNT
DSATUTRK CVD   R6,DSATPDEC             CONVERT TRACKS TO DECIMAL
         MVC   DSATDEC,=X'4020202020202120'      MOVE MASK
         ED    DSATDEC,DSATPDEC+4      EDIT
         MVC   0(5,R2),DSATDEC+3       MOVE INTO MESSAGE
*--------GET TRACKS USED
         LH    R7,DS1LSTAR             LOAD TRACKS USED
         NC    DS1LSTAR,DS1LSTAR       TEST FOR ZERO
         BZ    DSATXNTS
         LA    R7,1(R7)                ADD 1
         CVD   R7,DSATPDEC             CONVERT TO DECIMAL
         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK
         ED    DSATDEC,DSATPDEC+4      EDIT
         MVC   6(5,R2),DSATDEC+3       MOVE INTO MESSAGE
*--------GET NUMBER OF EXTENTS
DSATXNTS SR    R1,R1
         IC    R1,DS1NOPEV             LOAD EXTENTS
         CVD   R1,DSATPDEC             CONVERT TO DECIMAL
         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK
         ED    DSATDEC,DSATPDEC+4      EDIT
         MVC   12(2,R2),DSATDEC+6      MOVE INTO MESSAGE
ALLOCEND CLC   SECOND,=H'2'            TEST FOR NOSECONDARY
         BE    NOSECOND
         LA    R2,15(R2)               INCREMENT FIELD POINTER
         TM    DS1SCALO,X'C0'          TEST ALLOCATION TYPE
         BM    TRKALLOC
         BO    CYLALLOC
         MVC   5(5,R2),=C'ABSTR'       ABSOLUTE TRACK ALLOCATION
         B     SECAMT
CYLALLOC MVC   5(5,R2),=C' CYL '       CYLINDER ALLOCATION
         B     SECAMT
TRKALLOC TM    DS1SCALO,X'80'          TEST FOR TRACKS OR BLOCKS
         BZ    BLKALLOC
         MVC   5(5,R2),=C' TRK '       TRACK ALLOCATION
         B     SECAMT
BLKALLOC MVC   5(5,R2),=C'BLOCK'       BLOCK ALLOCATION
SECAMT   MVC   WORK,DS1SCALO           COPY TO ALIGNED (F) WORK AREA
         L     R1,WORK                 LOAD ALLOCATION WORD
         LA    R1,0(R1)                ZERO OUT HIGH BYTE
         CVD   R1,DSATPDEC             CONVERT TO DECIMAL
         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK
         ED    DSATDEC,DSATPDEC+4      EDIT
         MVC   0(4,R2),DSATDEC+4
NOSECOND BR    R14                     RETURN
         EJECT
*--------LOAD EXTENT DESCRIPTIONS
DSATADDR LA    R7,DS1EXT1              << EXECUTED INSTRUCTION >>
         LA    R7,DS1EXT2              << EXECUTED INSTRUCTION >>
         LA    R7,DS1EXT3              << EXECUTED INSTRUCTION >>
         LA    R7,DS3EXT01             << EXECUTED INSTRUCTION >>
         LA    R7,DS3EXT02             << EXECUTED INSTRUCTION >>
         LA    R7,DS3EXT03             << EXECUTED INSTRUCTION >>
         LA    R7,DS3EXT04             << EXECUTED INSTRUCTION >>
         LA    R7,DS3EXT05             << EXECUTED INSTRUCTION >>
         LA    R7,DS3EXT06             << EXECUTED INSTRUCTION >>
         LA    R7,DS3EXT07             << EXECUTED INSTRUCTION >>
         LA    R7,DS3EXT08             << EXECUTED INSTRUCTION >>
         LA    R7,DS3EXT09             << EXECUTED INSTRUCTION >>
         LA    R7,DS3EXT10             << EXECUTED INSTRUCTION >>
         LA    R7,DS3EXT11             << EXECUTED INSTRUCTION >>
         LA    R7,DS3EXT12             << EXECUTED INSTRUCTION >>
         LA    R7,DS3EXT13             << EXECUTED INSTRUCTION >>
         TITLE 'DSORG PROCESSING'
***********************************************************************
*                                                                     *
*        GET DSORG                                                    *
*                                                                     *
***********************************************************************
         SPACE 2
$DSORG   L     R2,DSORGFLD             LOAD OUTPUT AREA ADDRESS
         TM    FLAGS2,$VSAMLOC         SEE IF VSAM CATALOG ENTRY
         BZ    DSORG001
         L     R1,CURRBLK              LOAD CURRENT ENTRY ADDRESSS
         MVC   0(1,R2),0(R1)           COPY TYPE CODE
         MVI   1(R2),C'-'
         LA    R2,1(R2)                INCREMENT OVER TYPE CODE
DSORG001 LA    R1,DSORGTBL             LOAD DSORG TABLE ADDRESS
         LA    R4,4                    LOAD LENGTH OF ENTRY
         LA    R5,DSORGEND             LOAD END OF TABLE ADDRESS
         TM    DS1DSORG,X'01'          TEST FOR UNMOVABLE
         BZ    DSORGCLC
         MVI   3(R2),C'U'              INDICATE UMMOVABLE
         XI    DS1DSORG,X'01'          TURN OFF UNMOVABLE BIT
DSORGCLC CLC   DS1DSORG,0(R1)          TEST DSORG CODE
         BE    DSORGMVC
         BXLE  R1,R4,DSORGCLC
         MVC   1(2,R2),=C'**'          UNDEFINED DSORG
         B     DSORGBAD                RETURN
DSORGMVC MVC   1(2,R2),2(R1)           COPY DSORG CODE
         CLC   1(2,R2),=C'PO'          TEST FOR PDS
         BE    DSORGPO
         CLC   1(2,R2),=C'PS'          TEST FOR SEQUENTIAL
         BE    DSORGPS
DSORGBAD OI    FLAGS,$NOTPOPS
         B     DSORGRTN
DSORGPO  OI    FLAGS,$DSPO             PARTITIONED
         B     DSORGRTN
DSORGPS  OI    FLAGS,$DSPS             SEQUENTIAL
DSORGRTN BR    R14                     RETURN
         TITLE 'DCB PROCESSING'
***********************************************************************
*                                                                     *
*        GET DCB ATTRIBUTES                                           *
*                                                                     *
***********************************************************************
         SPACE 2
$DCB     L     R2,DCBFLD               LOAD OUTPUT AREA ADDRESS
         LR    R5,R2
         TM    DS1RECFM,X'C0'          TEST FOR UNKNOWN RECFM
         BZ    DSATT
         TM    DS1RECFM,X'40'          TEST FOR F RECFM
         BNZ   DSATUORV
         MVI   0(R5),C'F'              MOVE F INTO MESSAGE
         LA    R5,1(R5)                INCREMENT POINTER
         B     DSATT
DSATUORV TM    DS1RECFM,X'80'          TEST FOR V RECFM
         BZ    DSATV
         MVI   0(R5),C'U'              RECFM IS U
         LA    R5,1(R5)                INCREMENT POINTER
         B     DSATT
DSATV    MVI   0(R5),C'V'              RECFM IS V
         LA    R5,1(R5)                INCREMENT POINTER
DSATT    TM    DS1RECFM,X'20'          TEST FOR T RECFM
         BZ    DSATB
         MVI   0(R5),C'T'              RECFM IS T
         LA    R5,1(R5)                INCREMENT POINTER
DSATB    TM    DS1RECFM,X'10'          TEST FOR BLOCKING
         BZ    DSATS
         MVI   0(R5),C'B'              ADD B TO RECFM
         LA    R5,1(R5)                INCREMENT POINTER
DSATS    TM    DS1RECFM,X'08'          TEST FOR SPANNED RECORDS
         BZ    DSATA
         MVI   0(R5),C'S'              ADD S TO RECFM
         LA    R5,1(R5)                INCREMENT POINTER
DSATA    TM    DS1RECFM,X'04'          TEST FOR ASA CONTROL CHARACTERS
         BZ    DSATM
         MVI   0(R5),C'A'              ADD A TO RECFM
         LA    R5,1(R5)                INCREMENT POINTER
DSATM    TM    DS1RECFM,X'02'          TEST FOR MACHINE CONTROL CHARS
         BZ    DSATBLK
         MVI   0(R5),C'M'              ADD M TO RECFM
*--------GET BLOCKSIZE
DSATBLK  LH    R1,DS1BLKL              LOAD BLKSIZE
         CVD   R1,DSATPDEC             CONVERT TO DECIMAL
         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK
         ED    DSATDEC,DSATPDEC+4      EDIT
         MVC   5(5,R2),DSATDEC+3       MOVE INTO MESSAGE
*--------GET LRECL
         LH    R1,DS1LRECL             LOAD LRECL
         CVD   R1,DSATPDEC             CONVERT TO DECIMAL
         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK
         ED    DSATDEC,DSATPDEC+4      EDIT
         MVC   11(5,R2),DSATDEC+3      MOVE INTO MESSAGE
         BR    R14                     RETURN
         TITLE 'CREATION DATE PROCESSING'
***********************************************************************
*                                                                     *
*        CREATION DATE                                                *
*                                                                     *
***********************************************************************
         SPACE 2
$CRDATE  L     R1,DS1CREDT-1           LOAD CREATION DATE
         BAL   R5,DATECONV             CONVERT IT
         L     R2,CRDATFLD             LOAD OUTPUT AREA ADDRESS
         MVC   0(8,R2),DATEWORK        MOVE DATE INTO MESSAGE
         BR    R14                     RETURN
         TITLE 'EXPIRATION DATE PROCESSING'
***********************************************************************
*                                                                     *
*        EXPIRATION DATE                                              *
*                                                                     *
***********************************************************************
         SPACE 2
$EXDATE  L     R1,DS1EXPDT             LOAD EXPIRATION DATE
         SRA   R1,8                    SHIFT RIGHT 1 BYTE
         BAL   R5,DATECONV             CONVERT IT
         L     R2,EXDATFLD             LOAD OUTPUT AREA ADDRESS
         MVC   0(8,R2),DATEWORK        MOVE DATE INTO MESSAGE
         BR    R14                     RETURN
         TITLE 'DATE CONVERSION ROUTINE'
***********************************************************************
*                                                                     *
*        DATE CONVERSION ROUTINE                                      *
*                                                                     *
*             THIS SECTION WAS ADAPTED FROM AN INSTALLATION           *
*             DATE CONVERSION ROUTINE TO AVOID HAVING MANY            *
*             DIFFERENT DATE CONVERSION ROUTINES.  IT IS              *
*             NECESSARY TO CONVERT THE DATE TO PACKED DECIMAL         *
*             FORM (AS IS THE DATE RETURNED BY TIME) TO               *
*             CONFORM TO THIS ROUTINE.                                *
*                                                                     *
***********************************************************************
         SPACE 2
DATECONV LA    R1,0(R1)                ZERO HIGH BYTE
         ST    R1,WORK                 STORE IT
         ST    R1,DSATPDEC             SAVE IT AGAIN
         SRA   R1,16                   GET YEAR IN LOW BYTE
         MH    R1,=H'1000'             MULTIPLY BY 1000
         AH    R1,WORK+2               ADD DAY
         CVD   R1,DSATDEC              CONVERT TO DECIMAL
         MVC   WORK,DSATDEC+4          COPY LOW ORDER WORD
*--------OBTAIN MAY RETURN A DSCB WITH BAD DATE FIELDS
*--------      IF IT THINKS THAT THE DATA SET IS VSAM
*--------THE FOLLOWING CODE IS TO VALIDITY CHECK THE DATE
*--------      FIELD TO INSURE THAT IT IS A VALID PACKED
*--------      DECIMAL FIELD BEFORE ATTEMPTING TO OPERATE
*--------      ON IT AND RISK AN 0C7.
*--------IF DATE IS INVALID, DISPLAY IT IN HEX.
DATECON1 UNPK  DSATDEC,WORK            UNPACK THE DATE
         OI    DSATDEC+7,X'F0'         SET ZONE FIELD
         TRT   DSATDEC,DIGITMSK        TEST FOR INVALID CHARACTERS
         BNE   BADDAY
         TM    WORK+3,X'08'            VALIDATE SIGN
         BZ    BADDAY
         TM    WORK+3,X'06'
         BZ    BADDAY
*--------DATE IS VALID DECIMAL FORM
         CP    DAY,=P'366'             TEST MAX
         BH    BADDAY
         CP    DATE,=P'0'              TEST FOR ZERO DATE
         BE    NODATE
         UNPK  JULIAN,DATE             UNPACK DATE
         OI    JULDAY+2,X'F0'          SET ZONE
         MVI   BLANK,C' '              SET BLANK
         MVC   TARGET,=PL3'0'          00 00 0C
         MVO   YEAR2,YEAR              00 0Y YC
         DP    TARGET,=P'4'            0Q QC RC
         CP    REM,=P'0'               TEST REMAINDER
         BE    LEAP
         CP    DAY,=P'59'              TEST FOR BEFORE FEB 29
         BNH   LEAP
         AP    DAY,=P'1'               ADJUST TO LEAP YEAR
LEAP     CP    DAY,=P'1'               TEST MINIMUM DAY
         BL    BADDAY
         CP    DAY,=P'366'             TEST MAXIMUM DAY
         BH    BADDAY
         LA    R6,CALTABLE             LOAD TABLE ADDRESS
         USING CALENDAR,R6             SET BASE ADDRESS
         ZAP   MONTHP,=P'1'            SET MONTH TO 1
LOOP     CP    DAY,DAYS                SEE IF MORE DAYS THAN THIS MNTH
         BNH   OUT
         SP    DAY,DAYS                SUBTRACT DAYS IN THIS MONTH
         AP    MONTHP,=P'1'            ADD 1 TO MONTH
         LA    R6,LEN(R6)              INCREMENT TO NEXT MONTH
         B     LOOP
OUT      UNPK  MO,MONTHP               UNPACK MONTH
         OI    MO+1,X'F0'              SET ZONE
         UNPK  DA,DAY                  UNPACK DAY
         OI    DA+1,X'F0'              SET ZONE
         MVI   SLASH1,C'/'             SET SLASH
         MVI   SLASH2,C'/'             SET SLASH
         B     DATERTRN
NODATE   MVC   DATEWORK,=CL12' '       BLANK OUTPUT FIELD
         B     DATERTRN
*--------DATE INVALID, DISPLAY IT IN HEX
BADDAY   UNPK  DSATDEC(7),DSATPDEC+1(4)  UNPACK INVALID DATE FIELD
         TR    DSATDEC(6),TRTABLE      TRANSLATE TO EBCDIC
         MVC   DATEWORK,=CL12' '       CLEAR OUTPUT AREA
         MVC   DATEWORK+1(6),DSATDEC   MOVE IN HEX DATE VALUE
DATERTRN BR    R5                      RETURN
         SPACE
***********************************************************************
*                                                                     *
*        CALENDAR TABLE - NUMBER OF DAYS IN EACH MONTH (LEAP YEAR)    *
*                                                                     *
***********************************************************************
         SPACE
CALTABLE DC    PL2'31'                 JANUARY
         DC    PL2'29'                 FEBRUARY
         DC    PL2'31'                 MARCH
         DC    PL2'30'                 APRIL
         DC    PL2'31'                 MAY
         DC    PL2'30'                 JUNE
         DC    PL2'31'                 JULY
         DC    PL2'31'                 AUGUST
         DC    PL2'30'                 SEPTEMBER
         DC    PL2'31'                 OCTOBER
         DC    PL2'30'                 NOVEMBER
         DC    PL2'31'                 DECEMBER
         SPACE 2
***********************************************************************
*                                                                     *
*        CALENDAR TABLE DSECT                                         *
*                                                                     *
***********************************************************************
         SPACE
CALENDAR DSECT
DAYS     DS    PL2                     DAYS IN MONTH
LEN      EQU   *-DAYS                  LENGTH OF ENTRY
         SPACE 2
DSAT     CSECT
         TITLE 'CCHHR PROCESSING'
***********************************************************************
*                                                                     *
*        CCHHR PROCESSING                                             *
*                                                                     *
***********************************************************************
         SPACE 2
$CCHHR   UNPK  DSATDEC(11),DSATFMT1+96(6)  UNPACK CCHHR PLUS ONE BYTE
         TR    DSATDEC(10),TRTABLE     TRANSLATE TO CHARACTER
         L     R2,CCHHRFLD             LOAD OUTPUT AREA ADDRESS
         MVC   0(10,R2),DSATDEC        COPY CCHHR TO OUTPUT LINE
         BR    R14                     RETURN
         TITLE 'ERROR PROCESSING'
***********************************************************************
*                                                                     *
*        ERRORS                                                       *
*                                                                     *
***********************************************************************
         SPACE 2
*--------ERROR IN PARSE ROUTINE
ERRPARS  MVC   OUTLINE(28),DSATERR1
         B     SETERROR
*--------TOO MANY OPERANDS - OUTPUT WILL EXCEED LINE LENGTH'
TOOLONG  MVC   OUTLINE,BLANKS
         MVC   OUTLINE(44),DSATERR4
         IKJRLSA DSATANS               FREE PARSE WORK AREA
*--------SET ERROR INDICATOR AND DISPLAY ERROR MESSAGE
SETERROR OI    FLAGS,$NOTPOPS          INDICATE ERROR
         PUTLINE OUTPUT=(DSATHEDR,,,DATA),MF=(E,DSATIOPL)
         LA    R3,16                   SET CONDITION CODE
         B     EXIT2
*--------ERROR IN LOCATE MACRO
LOCERROR SLA   R15,3                   MULTIPLY RETURN CODE BY 8
         LA    R15,LOCMSGS-32(R15)     LOAD MESSAGE ADDRESS
         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS
         MVC   0(32,R1),0(R15)         COPY MESSAGE TO OUTPUT LINE
         OI    FLAGS,$NOTPOPS          INDICATE ERROR
PUTMSG   BAL   R2,PUTL                 PRINT IT
         B     ENDGRP                  TERMINATE THIS GROUP OR DSNAME
*--------NOT A DIRECT ACCESS DEVICE
NOTDASD  CLC   DAONLY,=H'2'            SEE IF MESSAGE TO BE SUPRESSED
         BE    RESETLIN
         OI    FLAGS,COUNT+$NOTPOPS    COUNT THIS DATA SET, ERROR
         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS
         MVC   0(32,R1),DSATERR2       COPY MESSAGE TO OUTPUT LINE
         B     PUTLINE                 PRINT THE LINE
*--------ERROR IN OBTAIN MACRO
DSNERR   CH    R15,=H'8'               TEST RETURN CODE
         BH    DSNERR1
         BE    TESTVALL
         CLC   DAONLY,=H'2'            SEE IF MESSAGE TO BE SUPRESSED
         BE    RESETLIN
         OI    FLAGS,COUNT             COUNT THIS DATA SET
         B     DSNERR1
TESTVALL L     R1,VOLSER               TEST FOR VOLUME(*)
         CLI   0(R1),C'*'
         BE    RESETLIN
DSNERR1  OI    FLAGS,$NOTPOPS          INDICATE ERROR
         SLA   R15,3                   MULTIPLY RETURN CODE BY 8
         LA    R15,DSNERRS-32(R15)     LOAD PROPER MESSAGE ADDRESS
         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS
         MVC   0(32,R1),0(R15)         COPY MESSAGE TO OUTPUT LINE
         B     PUTLINE                 PRINT IT
*--------VOLUME COUNT IS NEGATIVE OR ZERO
BADVOLCT L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS
         MVC   0(32,R1),DSATERR5       MOVE IN ERROR MESSAGE
         MVC   VOLCNT,=H'1'            SET COUNT TO 1
         OI    FLAGS,$NOTPOPS          SET ERROR INDICATOR
         B     PUTLINE                 DISPLAY MESSAGE
         TITLE 'DISPLAY LINES'
***********************************************************************
*                                                                     *
*        DISPLAY LINE                                                 *
*                                                                     *
***********************************************************************
         SPACE 2
PUTL     CLC   PRINT,=H'2'             TEST FOR NOPRINT
         BE    PUTLBACK
         PUTLINE OUTPUT=(DSATHEDR,,,DATA),MF=(E,DSATIOPL)
PUTLBACK BR    R2                      RETURN
         TITLE 'CONSTANT DATA - LITERAL POOL'
***********************************************************************
*                                                                     *
*        CONSTANT DATA                                                *
*                                                                     *
***********************************************************************
         SPACE 2
         LTORG
         TITLE 'CONSTANT DATA - MODEL CONTROL BLOCKS'
NAME     CAMLST NAME,0,,0
NAMECVOL CAMLST NAME,0,0,0
TTRLOC   CAMLST BLOCK,0,0,0
SEARCH   CAMLST SEARCH,0,0,0
SEEK     CAMLST SEEK,0,0,0
DIGITMSK EQU   *-X'F0'
         DC    X'00000000000000000000FFFFFFFFFFFF' MASK FOR DETECTING
*                                                  INVALID DEC DIGITS
TRTABLE  EQU   *-X'F0'
         DC    C'0123456789ABCDEF'     HEX TO EBCDIC TRANSLATE TABLE
MOVENAME MVC   0(0,R2),0(R4)
MODLPTPB PUTLINE MF=L
ENDPTPB  EQU   *
         TITLE 'DEVICE TABLE'
***********************************************************************
*                                                                     *
*        DEVICE TABLE                                                 *
*                                                                     *
*        A ONE BYTE ENTRY FOR EACH TYPE OF DIRECT ACCESS DEVICE       *
*        WHICH DEFINES THE NUMBER OF TRACKS PER CYLINDER FOR          *
*        THE DEVICE.  IF AN ENTRY IS ZERO, THE DEVICE IS              *
*        UNASSIGNED OR UNSUPPORTED BY DSAT.                           *
*                                                                     *
***********************************************************************
         SPACE 4
TRKSCYL  DC    AL1(000),CL7'       '   00 (00) - UNASSIGNED
         DC    AL1(010),CL7'2311   '   01 (01) - 2311 DISK
         DC    AL1(200),CL7'2301   '   02 (02) - 2301 DRUM
         DC    AL1(010),CL7'2303   '   03 (03) - 2303 DRUM
         DC    AL1(046),CL7'2302   '   04 (04) - 2302 DISK FILE
         DC    AL1(000),CL7'       '   05 (05) - 2321 DATA CELL
         DC    AL1(008),CL7'2305-1 '   06 (06) - 2305-1
         DC    AL1(008),CL7'2305-2 '   07 (07) - 2305-2
         DC    AL1(020),CL7'2314   '   08 (08) - 2314 DISK
         DC    AL1(019),CL7'3330   '   09 (09) - 3330 DISK
         DC    AL1(000),CL7'       '   10 (0A) - UNASSIGNED
         DC    AL1(030),CL7'3350   '   11 (0B) - 3350
         DC    AL1(000),CL7'       '   12 (0C) - UNASSIGNED
         DC    AL1(019),CL7'3330-1 '   13 (0D) - 3330-11 DISK
         DC    AL1(000),CL7'       '   14 (0E) - UNASSIGNED
         DC    AL1(000),CL7'       '   15 (0F) - UNASSIGNED
         TITLE 'DATA SET ORGANIZATION TABLE'
***********************************************************************
*                                                                     *
*        DATA SET ORGANIZATION TABLE                                  *
*                                                                     *
***********************************************************************
         SPACE 2
DSORGTBL DC    X'8000',C'IS'           INDEXED SEQUENTIAL
         DC    X'4000',C'PS'           PHYSICAL SEQUENTIAL
         DC    X'2000',C'DA'           DIRECT ACCESS
         DC    X'0200',C'PO'           PARTITIONED ORGANIZATION
DSORGEND DC    X'0008',C'AM'           VSAM
         TITLE 'CONSTANT DATA - MESSAGES'
MODLINE  DC    H'124,0'
BLANKS   DC    CL120' '
GDGMSG   DC    CL40'GDG -- OPTIONS=NONE CURRENT=000 MAX=000'
DSATERR1 DC    CL28'UNABLE TO INTERPRET COMMAND'
DSATERR2 DC    CL32'UNSUPPORTED DEVICE TYPE         '
DSATERR3 DC    CL32'TOO MANY NAMES - LIST INCOMPLETE'
DSATERR4 DC    CL44'TOO MUCH OUTPUT REQUESTED - LINE EXCEEDED'
DSATERR5 DC    CL32'VOLUME COUNT IS ZERO OR NEGATIVE'
EMPTYNDX DC    CL32'EMPTY INDEX STRUCTURE           '
EMPTYGDG DC    CL32'EMPTY GENERATION INDEX STRUCTURE'
NOVOL    DC    CL32'NOT ON ANY MOUNTED VOLUME       '
DSNERRS  DC    CL32'VOLUME NOT MOUNTED              '  ORC04
         DC    CL32'NOT ON VOLUME                   '  ORC08
         DC    CL32'INVALID WORK AREA POINTER       '  ORC12
         DC    CL32'CCHH NOT IN VTOC                '  ORC16
LOCMSGS  DC    CL32'CATALOG VOLUME NOT MOUNTED      '  LRC04
         DC    CL32'NAME NOT FOUND                  '  LRC08
         DC    CL32'INDEX NAME SPECIFIED            '  LRC12
         DC    CL32'DATA SET AT LOWER LEVEL         '  LRC16
         DC    CL32'SYNTAX ERROR IN DSNAME          '  LRC20
         DC    CL32'PERMANENT CATALOG I/O ERROR     '  LRC24
         DC    CL32'TTR OUT OF SYSCTLG              '  LRC28
         DC    CL32'INVALID WORK AREA POINTER       '  LRC32
         DC    CL32'USER CATALOG NOT ALLOCATED      '  LRC36
         DC    CL32'WORK AREA TOO SMALL      CODE 40'  LRC40
         DC    CL32'WORK AREA TOO SMALL      CODE 44'  LRC44
         DC    CL32'INVALID OPERATION-RETURN CODE 48'  LRC48
         DC    CL32'I/O ERROR ON USER VOLUME-CODE 52'  LRC52
         DC    CL32'PASSWORD NOT CORRECT            '  LRC56
         DC    CL32'STEPCAT/JOBCAT NOT OPEN         '  LRC60
         TITLE 'PDS DIRECTORY PROCESSING SUBROUTINE - DSATPDS'
***********************************************************************
*                                                                     *
*        PDS DIRECTORY PROCESSING SUBROUTINE                          *
*                                                                     *
*        CALLED FROM DSAT TO DYNAMICALLY ALLOCATE A PDS, READ THE     *
*        DIRECTORY AND COUNT DIRECTORY BLOCKS AND ENTRIES.            *
*                                                                     *
*        THIS SUBROUTINE IS ONLY CALLED WHEN THE PDS OPTION IS        *
*        REQUESTED AND A PDS IS ENCOUNTERED.                          *
*                                                                     *
*        LINKAGE CONVENTIONS - THIS SUBROUTINE DEPENDS ON THE         *
*            PREVIOUS SAVE AREA FOR ADDRESSABILITY TO THE WORK        *
*            AREA.  SINCE THE ENTIRE WORK AREA IS AVAILABLE, NO       *
*            PARAMETERS ARE PASSED.                                   *
*                                                                     *
*            THE VALUES IN PDSTOTLS ARE CLEARED BY THE DSAT           *
*            MAINLINE CODE AND ARE RELIED UPON TO CONTAIN ZEROS.      *
*                                                                     *
*        IF AN ERROR IS DETECTED, THE PDS DATA FIELD IS USED FOR      *
*        AN ERROR MESSAGE.                                            *
*            RC=     RETURN CODE FROM DAIR (REGISTER 15)              *
*            DARC=   DYNAMIC ALLOCATION RETURN CODE (DAXXDARC FIELD)  *
*            CTRC=   CATALOG RETURN CODE (DAXXCTRC FIELD)             *
*                                                                     *
*            SEE GC28-6764 GUIDE TO WRITING A TMP OR CP   (MVT, SVS)  *
*             OR GC28-0627 OS/VS2 SPL: JOB MANAGMENT      (MVS)       *
*             FOR DYNAMIC ALLOCATION RETURN CODE DESCRIPTIONS.        *
*                                                                     *
***********************************************************************
         EJECT
DSATPDS  $ENTER BASE=R12,                                              +
               SAVE=SAVE2
         EJECT
***********************************************************************
*                                                                     *
*              SET UP TSO CONTROL BLOCKS                              *
*                                                                     *
***********************************************************************
         SPACE 2
         L     R11,4(R13)              LOAD WORK AREA ADDRESS
         USING DSATSAVE,R11            DSECT ADDRESSABILITY
         DROP  R13                     I DON'T WANT IT TO USE 13
         LA    R10,DSATDAPL            LOAD DAPL ADDRESS
         USING DAPL,R10                DAPL ADDRESSABILITY
         SPACE 2
*--------SET UP DAPB'S
         LA    R9,DA18DAPB             LOAD FREE DAPB ADDRESS
         USING DAPB18,R9               DEFINE BASE REGISTER
         XC    DAPB18(DA18LEN),DAPB18  ZERO OUT CONTROL BLOCK
         MVC   DA18CD,=X'0018'         MOVE IN BLOCK CODE
         XC    DA18PDSN,DA18PDSN       ZERO DSNAME ADDRESS POINTER
         MVC   DA18DDN,=CL8'DSATDDN'   MOVE IN DDNAME
         MVC   DA18MNM,=CL8' '         BLANK OUT MEMBER NAME
         MVC   DA18SCLS,=CL2' '        BLANK OUT SYSOUT CLASS
         MVI   DA18DPS2,DA18KEEP       DISP=KEEP
         MVI   DA18CTL,DA18PERM
         MVC   DA18JBNM,=CL8' '        BLANK OUT MEMBER NAME
         LA    R9,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS
         USING DAPB08,R9               DEFINE BASE REGISTER
         XC    DAPB08(DA08LEN),DAPB08  ZERO OUT CONTROL BLOCK
         MVC   DA08CD,=X'0008'         MOVE IN BLOCK CODE
         LA    R1,DSNLEN               LOAD DSNAME FIELD ADDRESS
         ST    R1,DA08PDSN             SAVE IT
         MVC   DA08DDN,=CL8'DSATDDN'   MOVE IN DDNAME
         MVC   DA08UNIT,=CL8' '        BLANK OUT UNIT NAME
         MVC   DA08SER,=CL8' '         BLANK OUT SERIAL FIELD
         MVC   DA08SER(6),DSATSER      COPY IN VOLUME SERIAL
         MVC   DA08MNM,=CL8' '         BLANK OUT MEMBER NAME
         MVC   DA08PSWD,=CL8' '        BLANK OUT PASSWORD
         MVI   DA08DSP1,DA08SHR        DISP=(SHR,KEEP,KEEP)
         MVI   DA08DPS2,DA08KEEP
         MVI   DA08DPS3,DA08KEP
         MVC   DA08ALN,=CL8' '         BLANK OUT ATTRIBUTE LIST NAME
         DROP  R9
*--------GET DSNAME LENGTH
         LA    R1,DSNAME-1             LOAD START ADDR - 1
         LA    R2,44                   LOAD MAXIMUM DSNANME LEN
PDSEND   LA    R15,0(R2,R1)            LOAD ADDR OF CHAR
         CLI   0(R15),C' '             TEST FOR BLANK
         BNE   PDSSAVE
         BCT   R2,PDSEND               DECREMENT COUNTER
PDSSAVE  STH   R2,DSNLEN               SAVE LENGTH
*--------SET UP OPEN LIST FORM
         MVC   OPENLIST(OPENLEN),MODLOPEN
         EJECT
***********************************************************************
*                                                                     *
*              ALLOCATE THE DATA SET                                  *
*                                                                     *
***********************************************************************
*--------SET UP ALLOCATE DAPB
SETUPDDN LA    R9,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS
         USING DAPB08,R9               ADDRESSABILITY FOR DSORG TEST
         ST    R9,DAPLDAPB             STORE DAPB ADDRESS IN DAPL
         LA    R1,DAPL                 LOAD DAPL ADDRESS
         LINK  EP=IKJDAIR              LINK TO DAIR
         LTR   R15,R15                 TEST RETURN CODE
         BZ    TESTORG
         C     R15,=F'20'              TEST FOR FILE IN USE
         BNE   ERRDAIR
         LA    R1,DA18DAPB             LOAD FREE DAPB ADDRESS
         ST    R1,DAPLDAPB             STORE IN DAPL
         LA    R1,DAPL                 LOAD DAPL ADDRESS
         LINK  EP=IKJDAIR              FREE THE FILE
         LTR   R15,R15                 TEST RETURN CODE
         BNZ   ERRDAIR
         LA    R1,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS
         ST    R1,DAPLDAPB             STORE IN DAPL
         LA    R1,DAPL                 LOAD DAPL ADDRESS
         LINK  EP=IKJDAIR              FREE THE FILE
         LTR   R15,R15                 TEST RETURN CODE
         BNZ   ERRDAIR
         SPACE 2
***********************************************************************
*                                                                     *
*              BE SURE DSORG PO                                       *
*                                                                     *
***********************************************************************
TESTORG  TM    DA08DSO,X'02'           TEST FOR PARTITIONED
         BZ    ERRDSORG
*--------INITIALIZE DCB
         MVC   DSATDCB(DCBLEN),PSDCB   COPY DCB
         EJECT
***********************************************************************
*                                                                     *
*              OPEN DATA SET                                          *
*                                                                     *
***********************************************************************
         SPACE
*--------OPEN THE DATA SET
         LA    R1,OPENLIST             LOAD ADDRESS OF OPEN LIST FORM
         LA    R2,DSATDCB              LOAD DCB ADDRESS
         OPEN  ((R2)),MF=(E,(R1))      OPEN THE DATA SET
         TM    DSATDCB+48,X'10'        SEE IF IT OPENED
         BZ    ERROPEN
         EJECT
***********************************************************************
*                                                                     *
*        READ DIRECTORY AND COUNT BLOCKS AND ENTRIES                  *
*                                                                     *
***********************************************************************
         SPACE
         LM    R2,R5,PDSTOTLS          ZERO TOTALS
NEXTBLK  READ  DIRDECB,SF,DSATDCB,PDSREC,MF=E  READ DIR BLOCK
         CHECK DIRDECB                 WAIT FOR COMPLETION OF READ
         SPACE
         LA    R6,PDSREC               LOAD RECORD ADDRESS
         LA    R2,1(R2)                COUNT BLOCK
         LH    R0,8(R6)                LOAD COUNT
         SH    R0,=H'2'                LESS 2 FOR COUNT FIELD
         LA    R6,10(R6)               BUMP PASE KEY AND COUNT
         SPACE
NEXTENT  LTR   R0,R0                   SEE IF ANY LEFT IN BLOCK
         BNP   NEXTBLK
         CLC   ENDMEMB,0(R6)           TEST FOR END OF ENTRIES
         BNE   PROCENTR
         LR    R3,R2                   SET USED = TOTAL
         B     NEXTBLK
PROCENTR LA    R4,1(R4)                COUNT ENTRY
         TM    11(R6),X'80'            TEST FOR ALIAS
         BZ    DIRLEN
         LA    R5,1(R5)                COUNT ALIAS
DIRLEN   SR    R1,R1
         NI    11(R6),X'1F'            ZERO INDICATOR BITS
         IC    R1,11(R6)               LOAD LENGTH
         SLL   R1,1                    DOUBLE TO GET LENGTH IN BYTES
         LA    R1,12(R1)               ADD FIXED FIELD LENGTH
         AR    R6,R1                   INCREMENT POINTER
         SR    R0,R1                   DECREMENT BYTE COUNT
         B     NEXTENT
*--------END OF DATA
DIREOD   STM   R2,R5,PDSTOTLS          SAVE TOTALS
         L     R1,PDSFLD               LOAD OUTPUT AREA ADDRESS
         CVD   R2,DSATPDEC             CONVERT BLOCKS USED
         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK
         ED    DSATDEC,DSATPDEC+4      EDIT
         MVC   00(4,R1),DSATDEC+4      MOVE INTO MESSAGE
         CVD   R3,DSATPDEC             CONVERT BLOCKS ALLOCATED
         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK
         ED    DSATDEC,DSATPDEC+4      EDIT
         MVC   05(4,R1),DSATDEC+4      MOVE INTO MESSAGE
         CVD   R4,DSATPDEC             CONVERT DIRECTORY ENTRIES
         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK
         ED    DSATDEC,DSATPDEC+4      EDIT
         MVC   10(4,R1),DSATDEC+4      MOVE INTO MESSAGE
         CVD   R5,DSATPDEC             CONVERT ALIASES
         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK
         ED    DSATDEC,DSATPDEC+4      EDIT
         MVC   15(4,R1),DSATDEC+4      MOVE INTO MESSAGE
*--------CLOSE THE DATA SET
CLOSE    LA    R1,OPENLIST             LOAD ADDRESS OF OPEN LIST FORM
         LA    R2,DSATDCB              LOAD DCB ADDRESS
         CLOSE ((R2)),MF=(E,(R1))      THIS RELEASES FREE SPACE
*--------FREE THE DATA SET
FREE     LA    R1,DA18DAPB             LOAD FREE DAPB ADDRESS
         ST    R1,DAPLDAPB             STORE DAPB ADDRESS IN DAPL
         LA    R1,DAPL                 LOAD DAPL ADDRESS
         LINK  EP=IKJDAIR              LINK TO DAIR
         B     PDSRTRN
*--------ERROR IN DYNAMIC ALLOCATION
ERRDAIR  L     R2,PDSFLD               ADDRESS OF ERROR MESSAGE FIELD
         L     R1,DAPLDAPB             LOAD DAPB ADDRESS
         USING DAPB08,R1               ADDRESSABILITY
         C     R15,=F'12'              TEST FOR RETURN CODE 12
         BNE   CTLGERR
         CLC   DA08DARC,=X'0210'       TEST FOR DATA SET IN USE
         BNE   DYNALCER
         MVC   0(16,R2),=CL16' DATA SET IN USE'
         B     PDSRTRN
DYNALCER UNPK  DSATDEC(5),DA08DARC(3)  TRANSLATE TO EBCDIC
         TR    DSATDEC(4),TRTABLE2
         MVC   0(14,R2),=CL14'RC=000C, DARC='
         MVC   14(4,R2),DSATDEC        MOVE IN RETURN CODE
         B     PDSRTRN
CTLGERR  C     R15,=F'8'               TEST FOR CATALOG ERROR
         BNE   OTHERERR
         UNPK  DSATDEC(5),DA08CTRC(3)  TRANSLATE TO EBCDIC
         TR    DSATDEC(4),TRTABLE2
         MVC   0(14,R2),=CL14'RC=0008, CTRC='
         MVC   14(4,R2),DSATDEC        MOVE IN ERROR CODE
         B     PDSRTRN
OTHERERR ST    R15,DSATPDEC            STORE RETURN CODE
         UNPK  DSATDEC(5),DSATPDEC+2(3)
         MVC   0(14,R2),=CL14'DAIR ERROR RC='
         MVC   14(4,R2),DSATDEC
         B     PDSRTRN
*--------OPEN ERROR
ERROPEN  L     R2,PDSFLD               LOAD ERROR FIELD ADDRESS
         MVC   0(18,R2),=CL18'UNABLE TO OPEN DIR'
         B     PDSRTRN
*--------DATA SET NOT PARTITIONED - THIS IS A PROGRAM LOGIC ERROR
ERRDSORG L     R2,PDSFLD               LOAD ERROR FIELD ADDRESS
         MVC   0(18,R2),=CL18'DATA SET NOT A PDS'
         B     PDSRTRN
         EJECT
***********************************************************************
*                                                                     *
*              END OF ROUTINE                                         *
*                                                                     *
***********************************************************************
         SPACE 2
PDSRTRN  $RTRN RC=0
         EJECT
***********************************************************************
*                                                                     *
*              CONSTANTS                                              *
*                                                                     *
***********************************************************************
         SPACE
ENDMEMB  DC    XL8'FFFFFFFFFFFFFFFF'    LAST DIRECTORY ENTRY
PSDCB    DCB   DDNAME=DSATDDN,                                         +
               DSORG=PS,                                               +
               KEYLEN=8,                                               +
               RECFM=F,                                                +
               BLKSIZE=256,                                            +
               EODAD=DIREOD,                                           +
               MACRF=R
DCBLEN   EQU   *-PSDCB
MODLOPEN OPEN  (,),MF=L
OPENLEN  EQU   *-MODLOPEN
         SPACE 2
TRTABLE2 EQU   *-X'F0'
         DC    C'0123456789ABCDEF'
         SPACE
***********************************************************************
*                                                                     *
*              LITERAL POOL                                           *
*                                                                     *
***********************************************************************
         SPACE
         LTORG
         TITLE 'PARSE CONTROL BLOCKS'
***********************************************************************
*                                                                     *
*        PARSE CONTROL BLOCKS                                         *
*                                                                     *
***********************************************************************
         SPACE 4
DSATPCL  IKJPARM  DSECT=DSATPDL
DSN      IKJPOSIT DSNAME,LIST
SERIAL   IKJKEYWD DEFAULT='SERIAL'
         IKJNAME  'SERIAL'
         IKJNAME  'NOSERIAL'
ALLOC    IKJKEYWD DEFAULT='ALLOC'
         IKJNAME  'ALLOC'
         IKJNAME  'NOALLOC'
SECOND   IKJKEYWD DEFAULT='NOSECONDARY'
         IKJNAME  'SECONDARY'
         IKJNAME  'NOSECONDARY'
DSORG    IKJKEYWD DEFAULT='DSORG'
         IKJNAME  'DSORG'
         IKJNAME  'NODSORG'
DCB      IKJKEYWD DEFAULT='DCB'
         IKJNAME  'DCB'
         IKJNAME  'NODCB'
CRDATE   IKJKEYWD DEFAULT='CRDATE'
         IKJNAME  'CRDATE'
         IKJNAME  'NOCRDATE'
EXDATE   IKJKEYWD DEFAULT='NOEXDATE'
         IKJNAME  'EXDATE'
         IKJNAME  'NOEXDATE'
TOTALS   IKJKEYWD DEFAULT='TOTALS'
         IKJNAME  'TOTALS'
         IKJNAME  'NOTOTALS'
PRINT    IKJKEYWD DEFAULT='PRINT'
         IKJNAME  'PRINT'
         IKJNAME  'NOPRINT'
HEADER   IKJKEYWD DEFAULT='HEADER'
         IKJNAME  'HEADER'
         IKJNAME  'NOHEADER'
DAONLY   IKJKEYWD DEFAULT='ALL'
         IKJNAME  'ALL'
         IKJNAME  'DAONLY'
GDGDATA  IKJKEYWD DEFAULT='NOGDGDATA'
         IKJNAME  'GDGDATA'
         IKJNAME  'NOGDGDATA'
SEQNO    IKJKEYWD DEFAULT='NOSEQNO'
         IKJNAME  'SEQNO'
         IKJNAME  'NOSEQNO'
DEVTYPE  IKJKEYWD DEFAULT='NODEVTYPE'
         IKJNAME  'DEVTYPE'
         IKJNAME  'NODEVTYPE'
DEVICE   IKJKEYWD DEFAULT='NODEVICE'
         IKJNAME  'DEVICE'
         IKJNAME  'NODEVICE'
CCHHR    IKJKEYWD DEFAULT='NOCCHHR'
         IKJNAME  'CCHHR'
         IKJNAME  'NOCCHHR'
PDS      IKJKEYWD DEFAULT='NOPDS'
         IKJNAME  'PDS'
         IKJNAME  'NOPDS'
GENERIC  IKJKEYWD
         IKJNAME  'GENERIC'
DSONLY   IKJKEYWD
         IKJNAME  'DSONLY'
VOLUME   IKJKEYWD
         IKJNAME  'VOLUME',SUBFLD=VOLSUB
RCODE    IKJKEYWD
         IKJNAME  'RC',SUBFLD=RCSUB
VOLSUB   IKJSUBF
VOLSER   IKJIDENT 'VOLUME SERIAL',                                     +
               ASTERISK,                                               +
               MAXLNTH=6,                                              +
               FIRST=ALPHANUM,                                         +
               OTHER=ALPHANUM,                                         +
               PROMPT='VOLUME SERIAL'
RCSUB    IKJSUBF
RC       IKJKEYWD
         IKJNAME 'TALLOC'
         IKJNAME 'TUSED'
         IKJNAME 'LALLOC'
         IKJNAME 'LUSED'
         IKJNAME 'TDIFF'
         IKJNAME 'LDIFF'
         IKJNAME 'NUM'
         IKJNAME 'PREVIOUS'
         IKJNAME 'DSORG'
         IKJNAME 'DIRALLOC'
         IKJNAME 'DIRUSED'
         IKJNAME 'ENTRIES'
         IKJNAME 'MEMBERS'
         IKJNAME 'ALIASES'
         IKJENDP
         TITLE 'DYNAMIC ALLOCATION CONTROL BLOCK DSECTS'
***********************************************************************
*                                                                     *
*              DYNAMIC ALLOCATION CONTROL BLOCK DSECTS                *
*                                                                     *
***********************************************************************
         SPACE 2
         IKJDAP18
DA18LEN  EQU   *-DAPB18                 DAPB LENGTH
         SPACE
         IKJDAP08
DA08LEN  EQU   *-DAPB08                 DAPB LENGTH
         SPACE
         TITLE 'WORK AREA DSECT'
***********************************************************************
*                                                                     *
*                  WORK AREA DSECT                                    *
*                                                                     *
***********************************************************************
         SPACE 4
DSATDS   DSECT
DSATSAVE DS    18A                     SAVE AREA
SAVE2    DS    18F                     SAVE AREA
DSATDCB1 CAMLST SEARCH,0,0,0
DSATDCB3 CAMLST SEEK,0,0,0
LOCLIST  CAMLST NAME,0,,0              LOCATE BY NAME
LOCLIST2 CAMLST NAME,0,0,0             LOCATE BY NAME AND CVOL
LOCBYTTR CAMLST BLOCK,0,0,0            LOCATE BY TTR
DSATPTPB PUTLINE MF=L                  LIST FORM OF PUTLINE
DSATIOPL DS    0A                      ALIGN TO FULLWORD
         ORG   *+IOPLLEN               LENGTH OF CONTROL BLOCK
DSATPPL  DS    0A                      ALIGN TO FULLWORD
         ORG   *+PPLLEN                LENGTH OF CONTROL BLOCK
DSATANS  DS    A                       ADDRESS OF PARSE ANSWER AREA
DSATECB  DS    F                       EVENT CONTROL BLOCK
         SPACE
DSATDAPL DS    0F                      FULLWORD ALIGNMENT
         ORG   *+DAPLLEN
         SPACE
DA18DAPB DS    0F                      FULLWORD ALIGNMENT
         ORG   *+DA18LEN
         SPACE
DA08DAPB DS    0F                      FULLWORD ALIGNMENT
         ORG   *+DA08LEN
CURRBLK  DS    A                       ADDRESS OF CURRENT CAT BLOCK
ENDWORK  DS    A                       ADDRESS OF END OF VSAM WORK AREA
TOTLS    DS    F                       TOTAL TRACKS ALLOCATED
         DS    F                       TOTAL TRACKS USED
         DS    F                       LAST DATA SET TRACKS ALLOCATED
         DS    F                       LAST DATA SET TRACKS USED
         DS    F                       NUMBER OF DATA SETS DISPLAYED
PDSTOTLS DS    F                       NUMBER OF DIR BLOCKS ALLOCATED
         DS    F                       NUMBER OF DIR BLOCKS USED
         DS    F                       NUMBER OF DIRECTORY ENTRIES
         DS    F                       NUMBER OF ALIASES
VOLCNT   DS    H                       VOLUME COUNT
TRKPRCYL DS    H                       TRACKS PER CYLINDER
SERFLD   DS    A                       ADDRESS OF SERIAL FIELD
DEVFLD   DS    A                       ADDRESS OF DEVTYPE FIELD
DEVFIELD DS    A                       ADDRESS OF DEVICE NAME FIELD
ALLOCFLD DS    A                       ADDRESS OF ALLOCATION FIELD
DSORGFLD DS    A                       ADDRESS OF DSORG FIELD
PDSFLD   DS    A                       ADDRESS OF PDS INFO FIELD
DCBFLD   DS    A                       ADDRESS OF DCB FIELD
CRDATFLD DS    A                       ADDRESS OF CREATION DATE FIELD
EXDATFLD DS    A                       ADDRESS OF EXPIRATION DATE FIELD
DSNFLD   DS    A                       ADDRESS OF DSNAME FIELD
ERRFLD   DS    A                       ADDRESS OF ERROR FIELD
CCHHRFLD DS    A                       ADDRESS OF CCHHR FIELD
SERPTR   DS    A                       SERIAL TABLE POINTER
LASTUCB  DS    A                       LAST UCB PROCESSED ADDRESS
FLAGS    DS    X                       INDICATORS
NOTEMPTY EQU   X'80'  1... ....          INDEX IS NOT EMPTY
GDG      EQU   X'40'  .1.. ....          GDG BEING PROCESSED
COUNT    EQU   X'20'  ..1. ....          COUNT THIS DATA SET
DSATGRP  EQU   X'10'  ...1 ....          GROUP PROCESSING IN PROGRESS
$MULTVOL EQU   X'08'  .... 1...          MULTI-VOLUME DATA SET
$NOTPOPS EQU   X'04'  .... .1..          DATA SET NOT PS OR PO
$DSPO    EQU   X'02'  .... ..1.          DATA SET IS PARTITIONED
$DSPS    EQU   X'01'  .... ...1          DATA SET IS SEQUENTIAL
RESET    EQU   $NOTPOPS+$DSPO+$DSPS+$MULTVOL   RESET MASK
FLAGS2   DS    X                       MORE INDICATORS
$VSAMLOC EQU   X'80'  1... ....          VSAM LOCATE IN PROGRESS
$INCMPLT EQU   X'40'  .1.. ....          TOO MANY DSNAMES
$FOUND   EQU   X'20'  ..1. ....          DATA SET FOUND
*                     ...X XXXX          NOT USED
DSATSER  DS    CL6                     SERIAL
INDEXLEN DS    X                       LENGTH OF INDEX NAME
INDEX    DS    CL44                    INDEX NAME
         DS    0F
DSNLEN   DS    H                       LENGTH OF DSNAME (PDS)
DSNAME   DS    CL44                    DSNAME
DSATHEDR DS    H,H                     MESSAGE HEADER
OUTLINE  DS    CL120                   OUTPUT LINE
HALF     DS    H                       HALFWORD ALIGNED WORK AREA
DSATDEC  DS    D                       WORK AREA FOR DECIMAL CONVERSION
DSATPDEC DS    D                       WORK AREA FOR DECIMAL CONVERSION
DATEWORK DS    0CL12                   WORK AREA FOR DATE CONVERSION
MO       DS    CL2                     MONTH
SLASH1   DS    C                       SLASH
DA       DS    CL2                     DAY
SLASH2   DS    C                       SLASH
JULIAN   DS    0CL5                    JULIAN DATE - EBCDIC
YR       DS    CL2                     YEAR
JULDAY   DS    CL3                     JULIAN DAY
BLANK    DS    C                       BLANK
WORK     DS    0F                      DATE
         DS    C                       FILLER
DATE     DS    0CL3                    JULIAN DATE - PACKED DECIMAL
YEAR     DS    C                       YEAR - NO SIGN
DAY      DS    CL2                     DD DS
MONTHP   DS    PL2                     0M MS
TARGET   DS    0CL3                    00 0Y YS  -  0Q QS RS
         DS    C                       0Q         PART OF QUOTIENT
YEAR2    DS    0PL2                    0Y YS      YEAR AND SIGN
         DS    C                       QS         QUOTIENT AND SIGN
REM      DS    C                       RS         REMAINDER AND SIGN
DSATFMT1 DS    0D,148C                 FORMAT 1 DSCB (DS DESCRIPTION)
DSATFMT3 DS    0D,148C                 FORMAT 3 DSCB (ADD EXTENTS)
CATBLOCK DS    0D,265C                 CATALOG BLOCK
CVOL     DS    CL6                     CONTROL VOLUME SERIAL
TTR      DS    XL3                     TTR OF CATALOG BLOCK
FIRSTBLK DS    A                       ADDRESS OF FIRST CATALOG BLOCK
ENDNAME  DS    A                       ADDRESS OF END OF INDEX NAME
         #CTGPL
WORKAREA DS    A                       ADDRESS OF CATALOG WORK AREA
WORKLEN  DS    F                       LENGTH OF CATALOG WORK AREA
*
*        FOR LOCATE BY TTR, THIS AREA IS LARGE ENOUGH TO CONTAIN
*        22 (MAXIMUM NUMBER OF LEVELS IN A DATA SET NAME) CATALOG
*        BLOCKS.  EACH 264 BYTE BLOCK IS ALLOCATED AS FOLOWS:
*
*                 A                      POINTER TO ENTRY PROCESSED
*                 A                      NOT USED (NEEDED TO ALIGN)
*                 CL256                  CATALOG BLOCK
*
*        FOR VSAM LOCATES, THIS AREA CONTAINS A 4 BYTE HEADER PLUS
*        45 BYTE DSNAME ENTRIES.
*                 EACH 45 BYTE ENTRY CONSISTS OF -
*                 A  1 BYTE TYPE CODE
*                 A 44 BYTE DSNAME
*
         SPACE
OPENLIST OPEN  (,),MF=L                OPEN CONTROL BLOCK LIST FORM
         SPACE
         READ  DIRDECB,SF,,,MF=L       LIST FORM OF READ
         SPACE
DSATDCB  DCB   DDNAME=DSATDDN,                                         +
               DSORG=PS,                                               +
               KEYLEN=8,                                               +
               RECFM=F,                                                +
               BLKSIZE=256,                                            +
               EODAD=DIREOD,                                           +
               MACRF=R
         SPACE
PDSREC   DS    264X                    DIRECTORY RECORD
DSECTLEN EQU   *-DSATDS                LENGTH OF WORK AREA
         TITLE 'FORMAT 1 DSCB MAP'
         ORG   DSATFMT1-44
         #VTCFMT1
         TITLE 'FORMAT 3 DSCB MAP'
         ORG   DSATFMT3
         #VTCFMT3
         TITLE 'ECT MAP'
         IKJECT
         TITLE 'UPT MAP'
         IKJUPT
         END
