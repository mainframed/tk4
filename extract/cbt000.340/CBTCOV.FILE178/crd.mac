C          DATA SET GU110000   AT LEVEL 025 AS OF 10/15/78
C     PGM-ID. GU110000.
C     AUTHOR. DON HIGGINS.
C     DATE.   09/18/78.
C     REMARKS.
C
C             INDEXED DICTIONARY SYSTEM USING FULL SCREEN TSO SUPPORT.
C
C             THE FUNCTION OF THIS SYSTEM IS TO STORE AND RETRIEVE
C             INFORMATION WITHIN AN INDEXED HIERACHY.  THE SYSTEM
C             ALWAYS DISPLAYS THE FOLLOWING FORMATED SCREEN
C
C                    ****************************
C                    * M-KEY   *  M-TITLE       *
C                    ****************************
C                    * X-KEYS  *  X-TITLES      *
C                    *         *     OR         *
C                    *         *  M-TEXT        *
C                    *         *                *
C                    ****************************
C
C
C                    M-KEY     -  1-12 CHARACTER TEXT   KEY WORD
C                    M-TITLE   -  1-65 CHARACTER TEXT   TITLE
C                    X-KEYS    -  1-12 CHARACTER INDEX KEYS
C                    X-TITLES  -  1-65 CHARACTER INDEX TITLES
C                    M-TEXT    -  65 X 19 LINE TEXT FOR M-KEY
C
C             THE SYSTEM IS ONLY SUPPORTED UNDER TSO FULL SCREEN
C             FACILITY USING A 1920 CHARACTER 3270 TERMINAL. THE
C             FUNCTIONS PERFORMED BY THE SYSTEM DEPEND ON THE
C             12 PROGRAM FUNCTION KEYS, THE POSITION OF THE CURSOR,
C             AND THE KEYS ENTERED IN THE SCREEN KEY FIELDS.
C
C             THE PROGRAM FUNCTIONS ARE AS FOLLOWS:
C                                                          DEFAULT
C                 PF1  - SET PROCESS MODE TO INQUIRY           X
C                 PF4  - SET PROCESS MODE TO UPDATE
C                 PF7  - SET PROCESS MODE TO DELETE
C
C                 PF2  - SET SCREEN FORMAT MODE TO TEXT        X
C                 PF5  - SET SCREEN FORMAT MODE TO INDEX
C
C                 PF3  - SET INDEX MODE TO FORWARD             X
C                 PF6  - SET INDEX MODE TO BACKWARD
C
C                 PF8  - STORE SCREEN
C                 PF9  - RECALL SCREEN
C
C                 PF10 - CLEAR SCREEN
C                 PF11 - COPY  SCREEN TO PRINT FILE
C                 PF12 - DISPLAY STATUS INFORMATION
C
C             THE SYSTEM MODE OF OPERATION IS SET BY THE PF KEYS.
C             THE SYSTEM IS USED BY UPDATING THE SCREEN AND PRESSING
C             THE ENTER KEY.  THE FUNCTIONS PERFORMED ARE AS FOLLOWS:
C
C            1. INQUIRE MODE
C                 READ KEY ON LINE POINTED TO BY CURSOR.
C                 IF TEXT MODE
C                   IF TEXT
C                      READ AND DISPLAY TEXT
C                   ELSE
C                      READ AND DISPLAY INDEXES IF ANY
C                 ELSE
C                   IF INDEXES
C                      READ AND DISPLAY INDEXES
C                   ELSE
C                      READ AND DISPLAY TEXT IF ANY.
C            2. UPDATE MODE
C                 READ M-KEY
C                 IF TEXT MODE
C                    ADD OR UPDATE TEXT IF ANY
C                    ADD INDEX KEYS IF ANY
C                 ELSE
C                    IF FORWARD MODE
C                       ADD OR UPDATE FORWARD KEYS AND DESCRIPTIONS
C                    ELSE
C                       ADD OR UPDATE BACKWARD KEYS AND DESCRIPTIONS.
C            3. DELETE MODE
C                 READ M-KEY
C                 IF TEXT MODE
C                    DELETE TEXT AND ANY INDEXES FOR M-KEY
C                 ELSE
C                    DELETE TEXT AND ANY INDEXES FOR M-KEY
C                    IF  FORWARD MODE
C                        DELETE TEXT AND ANY INDEXES FOR EACH INDEX
C                        POINTED TO BY M-KEY IN FORWARD DIRECTION
C                    ELSE
C                        DELETE TEXT AND ANY INDEXES FOR EACH INDEX
C                        POINTED TO BY M-KEY IN BACKWARD DIRECTION.
C
C
C
C
C             THE PROGRAM STARTS BY TRYING TO DISPLAY THE TEXT STORED
C             FOR THE KEY WORD 'HELP'.  A SAMPLE INQUIRY MIGHT GO AS
C             FOLLOWS:
C
C                1.  KEY IN JCL IN M-KEY FIELD AND HIT ENTER.
C                    THE RESULT IS A LISTING OF X-KEYS FOR JCL
C                    AS FOLLOWS;
C                     *********************************
C                     *JCL      *JOB CONTROL LANGUAGE *
C                     *********************************
C                     *JOB      *JOB CARD JCL         *
C                     *EXEC     *EXEC CARD JCL        *
C                     *DD       *DD CARD JCL          *
C                     *********************************
C                2.  SET CURSOR TO DD LINE AND HIT ENTER.  THE RESULT
C                    IS A LISTING OF THE M-TEXT FOR THE M-KEY 'DD'.
C
C     EXTERNAL REFERENCES.
C
C       1.  SR308000 - TSO FULL SCREEN CALL INTERFACE (FSF)
C       2.  SR309000 - TSO FULL SCREEN SUPPORT (DYNAMICALLY LOADED)
C       3.  GU111000 - CRD BATCH MAINTENANCE PROGRAM
C                       1.  FORMAT NEW FILES.
C                       2.  DUMP FILES TO SEQUENTIAL TRANSACTION FILE.
C                       3.  UPDATE FILES FROM SEQUENTIAL TRANS. FILE.
C       4.  GU713000 - ENQ/DEQ
C       5.  GU701000   TIMER
C       6.  GU022400   TOD
C       7.  GU008700   SRCVTGRE
C       8.  GU008800   SRCVTJUL
C       9.  GU008900   SROSDATE
C      10.  GU410000   MVCL
C      11.  GU027800   INFILQ ENCODE/DECODE
C     NOTES.
C
C       1.  NOTE GU111000 PROCESSES BOTH FILES AS SEQUENTIAL FIXED
C           BLOCKED FILES. THIS PROGRAM PROCESSES BOTH FILES AS
C           DIRECT FILES WITH LRECL=BLKSIZE AND DOES ITS OWN
C           LOGICAL DEBLOCKING.
C       2.  NOTE SCREEN INPUT CAN BE IN EITHER LOWER OR UPPER CASE
C           AND THAT A LOWER CASE KEY WILL NOT EQUAL AN UPPER CASE
C           KEY.  THIS CAN BE CONFUSING IF YOU ACCIDENTIALLY HIT
C           THE SHIFT LOCK AND ENTER DATA THAT WAY.  I WOULD
C           TRANSLATE EVERYTHING EXCEPT SOMEONE MAY WANT TO PRINT
C           LOWER CASE TEXT ON THE PRINTER.
C
C     ERROR MESSAGES.
C
C       1.  KEY NOT FOUND
C       2.  INDEX FILE FULL
C       3.  TEXT  FILE FULL
C       4.  INDEX RECORD FULL
C
C     NAMING CONVENTIONS.
C       1.  PREFIXES
C             I   - INDEX
C             M   - MASTER (MASTER INDEX VERSUS CROSS INDEX)
C             T   - TEXT
C             IR  - INDEX RECORD
C             TR  - TEXT  RECORD
C             IB  - INDEX BLOCK
C             TB  - TEXT  BLOCK
C             IM  - INDEX MASTER RECORD
C             C   - COUNT
C
C     FILES.
C
C     FT10F001 - INDEX FILE
C
C         WORD  NAME       DESCRIPTION
C
C           1     IRSTAT     0 = FREE, 1 = IN USE
C           2     IRNEXT     LINK POINTER FOR DUPLICATE HASH KEYS
C           3     IRTEXT     TEXT   RECORD POINTER
C         4-6     IRKEY(3)   KEY WORD
C        7-23     IRDESC(17) KEY DESCRIPTION
C       24-42     IRFX(19)    INDEX FORWARD POINTERS
C       43-61     IRBX(19)    INDEX BACKWARD POINTERS
C
C         LRECL = 244   (61 WORDS)
C         BLKSIZE=3660  (915 WORDS)
C         RECORDS PER BLOCK = 15
C
C     FT11F001 - TEXT   FILE
C
C         1     TRSTAT     0 = FREE, 1 = IN USE
C     2-461     SCR        FULL SCREEN
C
C       LRECL=1844   (461 WORDS)
C       BLKSIZE=3688 (922 WORDS)
C       RECORDS PER BLOCK = 2
C
C
C     FT06F001 - PRINT FILE FOR COPY, TRACE, AND ERROR INFORMATION.
C
C  SWITCHES.
C
C     1.  EOJ    - END OF JOB SET BY HITTING BREAK KEY (PA1).
C
C     2.  TRACE  - TRACE EACH FILE I/O ON FT06F001 IF TRUE.
C                  (SET ON/OFF BY DATA STATEMENT FOR TESTING.)
C                  (ALSO SET BY LOOP DETECTOR IN FIND.)
C     3.  FIR    - FIND INDEX RECORD SUCCESSFUL. SET BY FIND.
C
C     4.  AIR    - ADD  INDEX RECORD SUCCESSFUL. SET BY BLDIR.
C
C     5.  ATR    - ADD  TEXT   RECORD SUCCESSFUL. SET BY ADDTR.
C
C     6.  PMODE  - PROCESS MODE
C                    PF1 - PMODE=PMINQ
C                    PF4 - PMODE=PMUPD
C                    PF7 - PMODE=PMDEL
C     7.  FMODE  - SCREEN FORMAT MODE
C                    PF2 - FMODE=FMTXT
C                    PF5 - FMODE=FMIDX
C     8.  IMODE  - INDEX MODE
C                    PF3 - IMODE=IMFWD
C                    PF6 - IMODE=IMBWD
C
C     9.  IBPEND - INDEX BLOCK WRITE PENDING
C
C    10.  TBPEND - TEXT  BLOCK WRITE PENDING
C
C
C
C
C
C
C
C  DATA DIVISION
C
      IMPLICIT INTEGER(A-Z)
C
C     DATA AREA LENGTHS FOR MVCL SUBROUTINE
C
      INTEGER LLINE/80/,LDESC/65/,LX/76/,LKEY/12/,LSCR/1840/
      INTEGER LIREC/244/,LTITLE/72/
C
C     SCREEN ARRAYS
C
      REAL*8 TITLE(9)/
     * 'GU110-IN','FORMATIO','N STORAG'
     *,'E SYSTEM','        ',' MODE = '
     *,3*' '
     */
      REAL*8 TPMODE(3)/'INQUIRY','UPDATE','DELETE'/
      REAL*8 TFMODE(2)/'TEXT','INDEX'/
      REAL*8 TIMODE(2)/'FORWARD','BACKWARD'/
      INTEGER SCR(20,23),HSCR(20,23)/460*'****'/
      INTEGER CLRSCR(20,23)/20*'****','*   ',2*' ',' *',15*' ','   *'
     *    ,20*'****'
     *    ,'*',2*' ',' *',15*' ','   *','*',2*' ',' *',15*' ','   *'
     *    ,'*',2*' ',' *',15*' ','   *','*',2*' ',' *',15*' ','   *'
     *    ,'*',2*' ',' *',15*' ','   *','*',2*' ',' *',15*' ','   *'
     *    ,'*',2*' ',' *',15*' ','   *','*',2*' ',' *',15*' ','   *'
     *    ,'*',2*' ',' *',15*' ','   *','*',2*' ',' *',15*' ','   *'
     *    ,'*',2*' ',' *',15*' ','   *','*',2*' ',' *',15*' ','   *'
     *    ,'*',2*' ',' *',15*' ','   *','*',2*' ',' *',15*' ','   *'
     *    ,'*',2*' ',' *',15*' ','   *','*',2*' ',' *',15*' ','   *'
     *    ,'*',2*' ',' *',15*' ','   *','*',2*' ',' *',15*' ','   *'
     *    ,'*',2*' ',' *',15*' ','   *'
     *    ,20*'****'/
      INTEGER ROW/2/,COL/2/
      INTEGER EROW/2/,ECOL/14/
      INTEGER MROW/2/,KCOL/2/,DCOL/15/,STROW/4/,ETROW/22/
C
C     INDEX RECORD DATA
C
      INTEGER MAXIRX/19/
      INTEGER IRKEY(3),IRFX(19),IRBX(19),IRDESC(17)/17*' '/
      INTEGER IMKEY(3),IMFX(19),IMBX(19),IMDESC(17)/17*' '/
      INTEGER   KEY(3),  FX(19),  BX(19),  DESC(17)/17*' '/
      INTEGER BLANK(17)/17*' '/,ZEROS(19)/19*0/
      INTEGER X(19),MX(19)
C
C     LOGICAL SWITCH DATA
C
      INTEGER TRUE/1/,FALSE/0/
      INTEGER EOJ/0/,TRACE/1/,FIR/0/,AIR/0/,ATR/0/
      INTEGER PMODE/1/,PMINQ/1/,PMUPD/2/,PMDEL/3/
      INTEGER FMODE/1/,FMTXT/1/,FMIDX/2/
      INTEGER IMODE/1/,IMFWD/1/,IMBWD/2/
      INTEGER IBPEND/0/,TBPEND/0/
C
C     ENQ/DEQ DATA
C
      REAL*8  MAJOR/'GU110000'/,MINOR/'CRDFILES'/
C
C  FILE DATA
C
      INTEGER MAXI/0/,IFILE/10/,MAXSCH/50/
      INTEGER CHAIN/0/,TCHAIN/100/,MCHAIN/150/
      INTEGER MAXT/0/,TFILE/11/
      INTEGER FLIST/6/,LINE(20)
      INTEGER TIME(6)
      REAL*8 GDATE
C
C     BLOCKED FILE ARRAYS FOR LOGICAL DEBLOCKING
C
      INTEGER MAXIBR/15/,LASTIB/0/
      INTEGER IBLK(61,15),IBR(61),IMR(61),HIBR(61)
      EQUIVALENCE
     * (IBR( 1),IRSTAT)
     *,(IBR( 2),IRNEXT)
     *,(IBR( 3),IRTEXT)
     *,(IBR( 4),IRKEY )
     *,(IBR( 7),IRDESC)
     *,(IBR(24),IRFX  )
     *,(IBR(43),IRBX  )
      EQUIVALENCE
     * (IMR( 1),IMSTAT)
     *,(IMR( 2),IMNEXT)
     *,(IMR( 3),IMTEXT)
     *,(IMR( 4),IMKEY )
     *,(IMR( 7),IMDESC)
     *,(IMR(24),IMFX  )
     *,(IMR(43),IMBX  )
      INTEGER MAXTBR/2/,LASTTB/0/
      INTEGER TBLK(461,2)
C
C  COUNTERS
C
      INTEGER CIRR/0/,CIRW/0/,CIBR/0/,CIBW/0/
      INTEGER CTRR/0/,CTRW/0/,CTBR/0/,CTBW/0/
      INTEGER CIA/0/,CID/0/,CTA/0/,CTD/0/
C
C  FORMATS
C
   10 FORMAT('1GU110R06 CRD CROSS REFERENCED DICTIONARY COPY'
     * ,5X,A8,5X,6A4
     *//)
   20 FORMAT(1X,20A4)
C
C  DEFINE FILES
C
      DEFINE FILE 10(99999,915,U,IDX10)
      DEFINE FILE 11(99999,922,U,IDX11)
C*********************************************************************
C  MAIN LINE
C*********************************************************************
      PM   INIT
      PM   GETSCR
      DO   WHILE,(EOJ.EQ.0)
           PM   PRCSCR
           PM   GETSCR
      OD
      PM   UPDMAX
      STOP
C*********************************************************************
C  LEVEL 1 ROUTINES
C*********************************************************************
C
C  INIT - PERFORM INITIAL ONE TIME PROCESSING
C
      PENTRY INIT
      CALL FSMODE(1,1)
      CALL TIMER(12,TIME)
      CALL TIMER(13,GDATE)
      READ(IFILE'1)MAXI,MAXIS,MAXID
      IF   (MAXI.LT.2)
           CALL TLOG('MAXI  ',MAXI,0,0,0)
           STOP
      FI
      READ(TFILE'1)MAXT,MAXTS
      IF   (MAXT.LT.2)
           CALL TLOG('MAXT  ',MAXT,0,0,0)
           STOP
      FI
      CALL SBREAK(EOJ)
      PM   CLEAR
      CALL FSAWF(SCR,MROW,KCOL,4,'HELP')
      PM   ENTER
      PEXIT
C
C  UPDMAX - UPDATE FILE MAX SEARCH AND DUP CHAIN COUNTERS
C
      PENTRY UPDMAX
      PM   ENQRTN
      READ(IFILE'1)IBLK
      IBPEND=FALSE
      IF   (IBLK(2,1).LT.MAXIS)
           IBLK(2,1)=MAXIS
           IBPEND=TRUE
      FI
      IF   (IBLK(3,1).LT.MAXID)
           IBLK(3,1)=MAXID
           IBPEND=TRUE
      FI
      IF   (IBPEND.EQ.TRUE)
           WRITE(IFILE'1)IBLK
      FI
      READ(TFILE'1)TBLK
      IF   (TBLK(2,1).LT.MAXTS)
           TBLK(2,1)=MAXTS
           WRITE(TFILE'1)TBLK
      FI
      PM   DEQRTN
      PEXIT
C
C  GETSCR - READ FULL SCREEN
C
      PENTRY GETSCR
      TITLE(7)=TPMODE(PMODE)
      TITLE(8)=TFMODE(FMODE)
      TITLE(9)=TIMODE(IMODE)
      CALL FST(TITLE,LTITLE)
      CALL FSW(SCR,MROW,KCOL)
      CALL FSR(SCR,ROW,COL,AID)
      PEXIT
C
C  PRCSCR - PROCESS SCREEN BASED ON INPUT KEY
C
      PENTRY PRCSCR
      DOCASE AID
        CASE 1
          PM PF1
        ESAC
        CASE 2
          PM PF2
        ESAC
        CASE 3
          PM PF3
        ESAC
        CASE 4
          PM PF4
        ESAC
        CASE 5
          PM PF5
        ESAC
        CASE 6
          PM PF6
        ESAC
        CASE 7
          PM PF7
        ESAC
        CASE 8
          PM PF8
        ESAC
        CASE 9
          PM PF9
        ESAC
        CASE 10
          PM PF10
        ESAC
        CASE 11
          PM PF11
        ESAC
        CASE 12
          PM PF12
        ESAC
        CASE ELSE
          IF (AID.EQ.0)
             PM   ENTER
          ELSE
             CALL FSAWF(SCR,EROW,ECOL,17,'E-INVALID PF KEY ')
          FI
        ESAC
      ESACOD
      PEXIT
C*********************************************************************
C  LEVEL 2 ROUTINES
C*********************************************************************
C
C  PF1 - INQUIRY MODE
C
      PENTRY PF1
      PMODE=PMINQ
      PEXIT
C
C  PF2 - TEXT MODE
C
      PENTRY PF2
      FMODE=FMTXT
      PEXIT
C
C  PF3 - FORWARD MODE
C
      PENTRY PF3
      IMODE=IMFWD
      PEXIT
C
C  PF4 - UPDATE MODE
C
      PENTRY PF4
      PMODE=PMUPD
      PEXIT
C
C  PF5 - INDEX MODE
C
      PENTRY PF5
      FMODE=FMIDX
      PEXIT
C
C  PF6 - BACKWARD MODE
C
      PENTRY PF6
      IMODE=IMBWD
      PEXIT
C
C  PF7 - DELETE MODE
C
      PENTRY PF7
      PMODE=PMDEL
      PEXIT
C
C  PF8 - STORE SCREEN
C
      PENTRY PF8
      CALL MVCL(HSCR,LSCR,SCR,LSCR,0)
      PEXIT
C
C  PF9 - RECALL SCREEN
C
      PENTRY PF9
      CALL MVCL(SCR,LSCR,HSCR,LSCR,0)
      PEXIT
C
C  PF10- CLEAR SCREEN
C
      PENTRY PF10
      PM   CLEAR
      PEXIT
C
C  PF11- COPY SCREEN TO PRINT FILE
C
      PENTRY PF11
      WRITE(FLIST,10)GDATE,TIME
      DO   I=1,23
           CALL FSARF(SCR,I,1,LLINE,LINE)
           WRITE(FLIST,20)LINE
      OD
      PEXIT
C
C  PF12 - DISPLAY STATUS
C
      PENTRY PF12
      PM   CLEAR
      CALL FCOUNT(SCR,'INDEX RECORD READS          ',CIRR,5)
      CALL FCOUNT(SCR,'INDEX RECORD WRITES         ',CIRW,6)
      CALL FCOUNT(SCR,'INDEX BLOCK  READS          ',CIBR,7)
      CALL FCOUNT(SCR,'INDEX BLOCK  WRITES         ',CIBW,8)
      CALL FCOUNT(SCR,'TEXT  RECORD READS          ',CTRR,9)
      CALL FCOUNT(SCR,'TEXT  RECORD WRITES         ',CTRW,10)
      CALL FCOUNT(SCR,'TEXT  BLOCK  READS          ',CTBR,11)
      CALL FCOUNT(SCR,'TEXT  BLOCK  WRITES         ',CTBW,12)
      CALL FCOUNT(SCR,'MAX DUP. INDEX CHAIN        ',MAXID,13)
      CALL FCOUNT(SCR,'MAX FREE INDEX SEARCH       ',MAXIS,14)
      CALL FCOUNT(SCR,'MAX FREE TEXT  SEARCH       ',MAXTS,15)
      CALL FCOUNT(SCR,'MAX INDEX RECORDS           ',MAXI,16)
      CALL FCOUNT(SCR,'MAX TEXT  RECORDS           ',MAXT,17)
      CALL FCOUNT(SCR,'INDEX ADDITIONS             ',CIA,18)
      CALL FCOUNT(SCR,'INDEX DELETIONS             ',CID,19)
      CALL FCOUNT(SCR,'TEXT  ADDITIONS             ',CTA,20)
      CALL FCOUNT(SCR,'TEXT  DELETIONS             ',CTD,21)
      PEXIT
C
C  ENTER - PROCESS SCREEN
C
      PENTRY ENTER
      IF   (PMODE.EQ.PMINQ)
           PM   INQ
      ELSE
           PM   ENQRTN
           IF   (PMODE.EQ.PMUPD)
                PM   UPDATE
           ELSE
                PM   DELETE
           FI
           PM   DEQRTN
      FI
      PEXIT
C*********************************************************************
C  LEVEL 3
C*********************************************************************
C
C  ENQ - ENQUE ON FILES FOR UPDATE
C
      PENTRY ENQRTN
      CALL ENQ(MAJOR,MINOR)
      PEXIT
C
C  DEQ - DEQUE FILES AFTER UPDATE
C
      PENTRY DEQRTN
      CALL DEQ(MAJOR,MINOR)
      PEXIT
C
C  UPDATE - UPDATE DATA BASE FROM SCREEN
C
      PENTRY UPDATE
C
C          GET OR BUILD MASTER INDEX RECORD IN IBR
C
      CALL FSARF(SCR,MROW,KCOL,LKEY,KEY)
      PM   FIND
      IF   (FIR.NE.TRUE)
           CALL FSARF(SCR,MROW,DCOL,LDESC,DESC)
           CALL MVCL(FX,LX,ZEROS,LX,0)
           CALL MVCL(BX,LX,ZEROS,LX,0)
           TEXT=0
           PM   BLDIR
           IF   (AIR.NE.TRUE)
                PEXIT
           FI
      ELSE
           ROW=MROW
           PM   CHKDSC
           IF   (DSCFLD.EQ.TRUE)
                CALL FSARF(SCR,MROW,DCOL,LDESC,IRDESC)
           FI
      FI
C
C          ADD OR UPDATE TEXT IF PRESENT IN TEXT MODE
C
      IF   (FMODE.EQ.FMTXT)
           PM   CHKTXT
           IF   (TXTFLD.EQ.TRUE)
                PM   ADDTR
                IF   (ATR.EQ.FALSE)
                     PEXIT
                FI
                IRTEXT=TREC
           ELSE
                IRTEXT=0
           FI
      FI
C
C          UPDATE MASTER INDEX RECORD IN FILE NOW INCASE SECONDARY
C          INDEXES END UP WITH DUPLICATE HASH KEY TO MASTER INDEX.
C          MOVE COPY OF MASTER INDEX TO IMR FOR UPDATING LINKS.
C
      PM   IWRITE
      CALL MVCL(IMR,LIREC,IBR,LIREC,0)
      IMREC=IREC
C
C          ADD OR UPDATE KEYS IF PRESENT
C
      DO   I=STROW,ETROW
           CALL  FSACF(SCR,I,KCOL,LKEY,BLANK,CODE)
           IF   (CODE.NE.2)
                CALL FSARF(SCR,I,KCOL,LKEY,KEY)
                PM   FIND
                IF   (FIR.EQ.FALSE)
                     TEXT=0
                     IF   (FMODE.EQ.FMTXT)
                          CALL MVCL(DESC,LDESC,BLANK,LDESC,0)
                     ELSE
                          CALL FSARF(SCR,I,DCOL,LDESC,DESC)
                     FI
                     CALL MVCL(FX,LX,ZEROS,LX,0)
                     CALL MVCL(BX,LX,ZEROS,LX,0)
                     PM   BLDIR
                     IF   (AIR.NE.TRUE)
                          PEXIT
                     FI
                ELSE
                     IF   (FMODE.EQ.FMIDX)
                          ROW=I
                          PM   CHKDSC
                          IF   (DSCFLD.EQ.TRUE)
                               CALL FSARF(SCR,I,DCOL,LDESC,IRDESC)
                          FI
                     FI
                FI
                PM   LINK
                PM   IWRITE
           FI
      OD
C
C         REWRITE MASTER INDEX WITH UPDATED INDEXES
C
      IREC=IMREC
      PM   IREAD
      CALL MVCL(IRFX,LX,IMFX,LX,0)
      CALL MVCL(IRBX,LX,IMBX,LX,0)
      PM   IWRITE
C
C        FLUSH BUFFERS
C
      IF   (IBPEND.EQ.TRUE)
           PM   IBWRIT
      FI
      IF   (TBPEND.EQ.TRUE)
           PM   TBWRIT
      FI
      PEXIT
C
C  INQ   - INQUIRE INTO DATA BASE FROM SCREEN INPUT
C
      PENTRY INQ
      CALL FSARF(SCR,ROW,KCOL,LKEY,KEY)
      PM   FIND
      IF   (FIR.EQ.FALSE)
           CALL FSAWF(SCR,EROW,ECOL,12,'E-NOT FOUND ')
           PEXIT
      FI
      IF   (FMODE.EQ.FMTXT)
           IF   (IRTEXT.NE.0)
                TREC=IRTEXT
                PM   TREAD
           ELSE
                PM   LISTIX
           FI
      ELSE
           PM   LISTIX
           IF   (ROW.EQ.STROW)
                IF   (IRTEXT.NE.0)
                     TREC=IRTEXT
                     PM   TREAD
                FI
           FI
      FI
      PEXIT
C
C  DELETE - DELETE FUNCTION
C
      PENTRY DELETE
      CALL FSARF(SCR,MROW,KCOL,LKEY,KEY)
      PM   FIND
      IF   (FIR.NE.TRUE)
           CALL FSAWF(SCR,EROW,ECOL,12,'E-NOT FOUND ')
           PEXIT
      FI
      IMREC=IREC
      CALL MVCL(IMR,LIREC,IBR,LIREC,0)
      IF   (FMODE.EQ.FMIDX)
           IF   (IMODE.EQ.IMFWD)
                CALL MVCL(MX,LX,IMFX,LX,0)
           ELSE
                CALL MVCL(MX,LX,IMBX,LX,0)
           FI
           PM   DELIMR
           DO   I=1,MAXIRX
                IF   (MX(I).NE.0)
                     IREC=MX(I)
                     PM   IREAD
                     IMREC=IREC
                     CALL MVCL(IMR,LIREC,IBR,LIREC,0)
                     PM   DELIMR
                FI
           OD
      ELSE
           PM   DELIMR
      FI
      PEXIT
C*********************************************************************
C  LEVEL 4
C*********************************************************************
C
C  CHKDSC - CHECK IF DESCRIPTION FIELD IS BLANK
C
      PENTRY CHKDSC
      CALL FSACF(SCR,ROW,DCOL,LDESC,BLANK,CODE)
      IF   (CODE.NE.2)
           DSCFLD=TRUE
      ELSE
           DSCFLD=FALSE
      FI
      PEXIT
C
C  CHKTXT - CHECK IF TEXT FIELD IS BLANK
C
      PENTRY CHKTXT
      TXTFLD=FALSE
      DO   I=STROW,ETROW
           CALL FSACF(SCR,I,DCOL,LDESC,BLANK,CODE)
           IF   (CODE.NE.2)
                TXTFLD=TRUE
                PEXIT
           FI
      OD
      PEXIT
C
C  FIND  -  FIND INDEX RECORD FOR KEY
C
      PENTRY FIND
      IREC=MOD(IABS(KEY(1)+KEY(2)+KEY(3)),MAXI)+1
      IF   (IREC.LT.2)IREC=2
      PM   IREAD
      FREE=0
      CHAIN=0
      DO   FOREVER
           IF   (IRSTAT.NE.0)
                IF   ((KEY(1).EQ.IRKEY(1))
     *                .AND.(KEY(2).EQ.IRKEY(2))
     *                .AND.(KEY(3).EQ.IRKEY(3))
     *               )
                     IF   (CHAIN.GT.MAXID)
                          MAXID=CHAIN
                     FI
                     FIR=TRUE
                     PEXIT
                FI
           ELSE
                IF   (FREE.EQ.0)FREE=IREC
           FI
           IF   (IRNEXT.NE.0)
                IF   (CHAIN.GT.TCHAIN)TRACE=TRUE
                IF   (CHAIN.GT.MCHAIN)STOP 10
                CHAIN=CHAIN+1
                IREC=IRNEXT
                PM   IREAD
           ELSE
                IF   (CHAIN.GT.MAXID)
                     MAXID=CHAIN
                FI
                FIR=FALSE
                PEXIT
           FI
      OD
C
C  ADDTR - ADD TEXT   RECORD
C
      PENTRY ADDTR
      IF   (IRTEXT.EQ.0)
           TREC=IREC*MAXT/MAXI
           IF   (TREC.LT.2)TREC=2
           PM   TSREAD
           IF   (TRSTAT.NE.0)
                PM   TRSCH
           FI
           IF   (TRSTAT.NE.0)
                CALL FSAWF(SCR,EROW,ECOL,19,'E-TEXT   FILE FULL ')
                ATR=FALSE
                PEXIT
           FI
      ELSE
           TREC=IRTEXT
      FI
      TRSTAT=1
      ATR=TRUE
      CTA=CTA+1
      PM   TWRITE
      PEXIT
C
C  LISTIX - LIST DEPENDENT KEYS FOR CURRENT KEY
C
      PENTRY LISTIX
      PM   CLEAR
      CALL FSAWF(SCR,MROW,KCOL,LKEY,KEY)
      CALL FSAWF(SCR,MROW,DCOL,LDESC,IRDESC)
      ROW=STROW
      IMREC=IREC
      CALL MVCL(IMR,LIREC,IBR,LIREC,0)
      IF   (IMODE.EQ.IMFWD)
           CALL MVCL(X,LX,IMFX,LX,0)
      ELSE
           CALL MVCL(X,LX,IMBX,LX,0)
      FI
      PM   LISTX
      IF   (ROW.LE.ETROW)
           IF   (IMODE.EQ.IMFWD)
                CALL MVCL(X,LX,IMBX,LX,0)
           ELSE
                CALL MVCL(X,LX,IMFX,LX,0)
           FI
           PM   TESTX
           IF   (IX.NE.0)
                IF   (ROW.LT.ETROW)
                     CALL FSAWF(SCR,ROW,KCOL,12,'------------')
                     ROW=ROW+1
                FI
                PM   LISTX
           FI
      FI
      PEXIT
C
C  LISTX - LIST INDEXES IN X
C
      PENTRY LISTX
      DO  I=1,MAXIRX
          IREC=X(I)
          IF   (IREC.NE.0)
               IF   (ROW.GT.ETROW)
                    CALL FSAWF(SCR,ETROW,KCOL,12,'++++++++++++')
                    PEXIT
               FI
               PM   IREAD
               CALL FSAWF(SCR,ROW,KCOL,LKEY,IRKEY)
               CALL FSAWF(SCR,ROW,DCOL,LDESC,IRDESC)
               ROW=ROW+1
          FI
      OD
      PEXIT
C
C  TESTX - TEST X FOR ANY ENTRIES
C
      PENTRY TESTX
      IX=0
      DO  I=1,MAXIRX
          IF   (X(I).NE.0)
               IX=1
               PEXIT
          FI
      OD
      PEXIT
C
C  BLDIR - BUILD NEW INDEX RECORD IN IBR (ASSUMES FREE SET BY FIND)
C
      PENTRY BLDIR
      LAST=0
      NEXT=0
      IF   (FREE.NE.0)
           IF   (IREC.NE.FREE)
                IREC=FREE
                PM   IREAD
           FI
           NEXT=IRNEXT
      ELSE
           PM   IRSCH
           IF   (IRSTAT.NE.0)
                CALL FSAWF(SCR,EROW,ECOL,18,'E-INDEX FILE FULL')
                AIR=FALSE
                PEXIT
           FI
      FI
      IRSTAT=1
      IRNEXT=NEXT
      IRTEXT=TEXT
      NEXT=IREC
      CALL MVCL(IRKEY,LKEY,KEY,LKEY,0)
      CALL MVCL(IRDESC,LDESC,DESC,LDESC,0)
      CALL MVCL(IRFX,LX,FX,LX,0)
      CALL MVCL(IRBX,LX,BX,LX,0)
      IF   (LAST.NE.0)
           HIREC=IREC
           CALL MVCL(HIBR,LIREC,IBR,LIREC,0)
           IREC=LAST
           PM   IREAD
           IRNEXT=NEXT
           PM   IWRITE
           IREC=HIREC
           CALL MVCL(IBR,LIREC,HIBR,LIREC,0)
      FI
      AIR=TRUE
      CIA=CIA+1
      PEXIT
C
C  DELIMR - DELETE TEXT AND INDEX IN IMR
C
      PENTRY DELIMR
      IF   (IMTEXT.NE.0)
           TREC=IMTEXT
           TRSTAT=0
           CTD=CTD+1
           PM  TSWRIT
      FI
      PM   DELINK
      IREC=IMREC
      IRSTAT=0
      CID=CID+1
      PM   IWRITE
      PEXIT
C*********************************************************************
C  LEVEL 5
C*********************************************************************
C
C  CLEAR  - COPY NEW SCREEN TO SCREEN AREA
C
      PENTRY CLEAR
      CALL MVCL(SCR,LSCR,CLRSCR,LSCR,0)
      PEXIT
C
C  TRSCH - SEARCH FOR FREE TEXT   RECORD CLOSE TO TREC
C
      PENTRY TRSCH
      DO   LOOP=1,MAXSCH
           TREC=TREC+1
           IF   (TREC.GT.MAXT)TREC=2
           PM   TSREAD
           IF   (TRSTAT.EQ.0)
                IF   (LOOP.GT.MAXTS)
                     MAXTS=LOOP
                FI
                PEXIT
           FI
      OD
      PEXIT
C
C  IRSCH - SEARCH FOR FREE INDEX RECORD CLOSE TO IREC
C
      PENTRY IRSCH
      LAST=IREC
      NEXT=IRNEXT
      DO   LOOP=1,MAXSCH
           IREC=IREC+1
           IF   (IREC.GT.MAXI)IREC=2
           PM   IREAD
           IF   (IRSTAT.EQ.0)
                IF   (LOOP.GT.MAXIS)
                     MAXIS=LOOP
                FI
                PEXIT
           FI
      OD
      PEXIT
C
C  LINK - LINK IMR AND IBR INDEX RECORDS
C
      PENTRY LINK
      IF   (IMODE.EQ.IMFWD)
           CALL MVCL(X,LX,IMFX,LX,0)
           IX=IREC
           PM   ADDX
           CALL MVCL(IMFX,LX,X,LX,0)
           CALL MVCL(X,LX,IRBX,LX,0)
           IX=IMREC
           PM   ADDX
           CALL MVCL(IRBX,LX,X,LX,0)
      ELSE
           CALL MVCL(X,LX,IMBX,LX,0)
           IX=IREC
           PM   ADDX
           CALL MVCL(IMBX,LX,X,LX,0)
           CALL MVCL(X,LX,IRFX,LX,0)
           IX=IMREC
           PM   ADDX
           CALL MVCL(IRFX,LX,X,LX,0)
      FI
      PEXIT
C
C  DELINK - REMOVE ALL INDEX LINKS TO MASTER INDEX IN IMR
C
      PENTRY DELINK
      DO   J=1,MAXIRX
           IF   (IMFX(J).NE.0)
                IREC=IMFX(J)
                PM   IREAD
                DO   K=1,MAXIRX
                     IF   (IRBX(K).EQ.IMREC)
                          IRBX(K)=0
                     FI
                OD
                PM   IWRITE
           FI
           IF   (IMBX(J).NE.0)
                IREC=IMBX(J)
                PM   IREAD
                DO   K=1,MAXIRX
                     IF   (IRFX(K).EQ.IMREC)
                          IRFX(K)=0
                     FI
                OD
                PM   IWRITE
           FI
      OD
      PEXIT
C*********************************************************************
C  LEVEL 6
C*********************************************************************
C
C  ADDX - ADD INDEX POINTER TO X - ERROR MSG IF NO ROOM
C
      PENTRY ADDX
      XFREE=0
      DO   K=1,MAXIRX
           IF   (X(K).EQ.0)
                IF   (XFREE.EQ.0)XFREE=K
           ELSEIF (X(K).EQ.IX)
                PEXIT
           FI
      OD
      IF   (XFREE.NE.0)
           X(XFREE)=IX
      ELSE
           CALL FSAWF(SCR,I,ECOL,20,'E-INDEX RECORD FULL ')
      FI
      PEXIT
C*********************************************************************
C  LEVEL 7
C*********************************************************************
C
C  IREAD - READ INDEX RECORD
C
      PENTRY IREAD
      CIRR=CIRR+1
      PM   IBREAD
      CALL MVCL(IBR,LIREC,IBLK(1,IBI),LIREC,0)
      IF   (TRACE.EQ.TRUE)
           CALL TLOG('IREAD ',KEY,IREC,IRSTAT,IRNEXT,IRTEXT)
      FI
      PEXIT
C
C  IWRITE - WRITE INDEX RECORD
C
      PENTRY IWRITE
      CIRW=CIRW+1
      PM   IBREAD
      CALL MVCL(IBLK(1,IBI),LIREC,IBR,LIREC,0)
      IBPEND=TRUE
      IF   (TRACE.EQ.TRUE)
           CALL TLOG('IWRITE',KEY,IREC,IRSTAT,IRNEXT,IRTEXT)
      FI
      PEXIT
C
C  TREAD -  READ SCREEN FROM TEXT FILE
C
      PENTRY TREAD
      CTRR=CTRR+1
      PM   TBREAD
      TRSTAT=TBLK(1,TBI)
      CALL MVCL(SCR,LSCR,TBLK(2,TBI),LSCR,0)
      IF   (TRACE.EQ.TRUE)
           CALL TLOG('TREAD ',KEY,TREC,TRSTAT,0,0)
      FI
      PEXIT
C
C  TWRITE - WRITE TEXT   RECORD
C
      PENTRY TWRITE
      CTRW=CTRW+1
      PM   TBREAD
      TBLK(1,TBI)=TRSTAT
      CALL MVCL(TBLK(2,TBI),LSCR,SCR,LSCR,0)
      TBPEND=TRUE
      IF   (TRACE.EQ.TRUE)
           CALL TLOG('TWRITE',KEY,TREC,TRSTAT,0,0)
      FI
      PEXIT
C
C  TSREAD -  READ TEXT   RECORD STATUS ONLY
C
      PENTRY TSREAD
      CTRR=CTRR+1
      PM   TBREAD
      TRSTAT=TBLK(1,TBI)
      IF   (TRACE.EQ.TRUE)
           CALL TLOG('TSREAD',KEY,TREC,TRSTAT,0,0)
      FI
      PEXIT
C
C  TSWRIT - WRITE TEXT   RECORD STATUS ONLY
C
      PENTRY TSWRIT
      CTRW=CTRW+1
      PM   TBREAD
      TBLK(1,TBI)=TRSTAT
      TBPEND=TRUE
      IF   (TRACE.EQ.TRUE)
           CALL TLOG('TSWRIT',KEY,TREC,TRSTAT,0,0)
      FI
      PEXIT
C*********************************************************************
C  LEVEL 8
C*********************************************************************
C
C  IBREAD - READ INDEX BLOCK
C
      PENTRY IBREAD
      IBP=IREC/MAXIBR
      IBI=IREC-IBP*MAXIBR+1
      IBP=IBP+1
      IF   (IBP.NE.LASTIB)
           IF   (IBPEND.EQ.TRUE)
                PM   IBWRIT
           FI
           LASTIB=IBP
           CIBR=CIBR+1
           READ(IFILE'IBP)IBLK
           IF   (TRACE.EQ.TRUE)
                CALL TLOG('IBREAD',KEY,IREC,IBP,IBI,0)
           FI
      FI
      PEXIT
C
C  TBREAD - READ TEXT   BLOCK
C
      PENTRY TBREAD
      TBP=TREC/MAXTBR
      TBI=TREC-TBP*MAXTBR+1
      TBP=TBP+1
      IF   (TBP.NE.LASTTB)
           IF   (TBPEND.EQ.TRUE)
                PM   TBWRIT
           FI
           LASTTB=TBP
           CTBR=CTBR+1
           READ(TFILE'TBP)TBLK
           IF   (TRACE.EQ.TRUE)
                CALL TLOG('TBREAD',KEY,TREC,TBP,TBI,0)
           FI
      FI
      PEXIT
C***************************************************************
C  LEVLEL 9
C***************************************************************
C
C  IBWRIT - WRITE INDEX BLOCK
C
      PENTRY IBWRIT
      CIBW=CIBW+1
      IBPEND=FALSE
      WRITE(IFILE'LASTIB)IBLK
      IF   (TRACE.EQ.TRUE)
           CALL TLOG('IBWRIT',KEY,LASTIB,0,0,0)
      FI
      PEXIT
C
C  TBWRIT - WRITE INDEX BLOCK
C
      PENTRY TBWRIT
      CTBW=CTBW+1
      TBPEND=FALSE
      WRITE(TFILE'LASTTB)TBLK
      IF   (TRACE.EQ.TRUE)
           CALL TLOG('TBWRIT',KEY,LASTTB,0,0,0)
      FI
      PEXIT
C
C  END OF MAIN PROGRAM
C
      END
      SUBROUTINE FCOUNT(SCR,DESC,COUNT,ROW)
C
C  FCOUNT - FORMAT COUNT INFORMATION ON SCREEN
C
      INTEGER SCR(20,23),DESC(7),COUNT,ROW,DCOUNT(2)
      INTEGER DCOL/20/,CCOL/50/,LDESC/28/,LCOUNT/8/
      CALL FSAWF(SCR,ROW,DCOL,LDESC,DESC)
      CALL INFILQ(DCOUNT,LCOUNT)
      WRITE(99,1)COUNT
    1 FORMAT(I8)
      CALL FSAWF(SCR,ROW,CCOL,LCOUNT,DCOUNT)
      RETURN
      END
      SUBROUTINE TLOG(RTN,KEY,I1,I2,I3,I4)
C
C  TLOG - LOG TRACE INFORMATION ON PRINT FILE
C
      REAL*8 RTN
      INTEGER I1,I2,I3,I4,KEY(3)
      INTEGER FLIST/6/
   10 FORMAT(1X,A6,1X,3A4,1X,4I7)
      WRITE(FLIST,10)RTN,KEY,I1,I2,I3,I4
      RETURN
      END
