*          DATA SET GU022800   AT LEVEL 019 AS OF 09/12/73
         TITLE 'GU022800 - 370 INSTRUCTION SIMULATOR'
*              PROGRAM GU022800.
*              AUTHOR.   DON HIGGINS.
*              DATE.     05/28/73.
*              REMARKS.  LOAD AND EXECUTE THE PROGRAM NAMED IN THE
*                        PARM FIELD USING A SPIE ROUTINE TO TRAP
*                        AND SIMULATE 370 INSTRUCTIONS WHICH CAN BE
*                        REPRESENTED BY MULTIPLE 360 INSTRUCTIONS.
*
*              REFERENCE
*               GA22-7000-3 370-PRIN.OP.
*              SUPPORTED INSTRUCTIONS.
*                  CDS       COMPARE DOUBLE AND SWAP
*                  CLCL      COMPARE LONG
*                  CLM       COMPARE LOGICAL UNDER MASK
*                  CS        COMPARE AND SWAP
*                  ICM       INSERT CHARACTER UNDER MASK
*                  MC        MONITOR CALL (NOP)
*                  MVCL      MOVE LONG
*                  SRP       SHIFT AND ROUND DECIMAL
*                  STCK      STORE CLOCK
*                  STCM      STORE CHARACTER UNDER MASK
*              NOT CURRENTLY SUPPORTED.
*                  AXR       ADD NORMALIZED
*                  HDV       HALT DEVICE
*                  LCTL      LOAD CONTROL
*                  LRA       LOAD REAL ADDRESS
*                  LRDR      LOAD ROUNDED
*                  LRER      LOAD ROUNDED
*                  MXD       MULTIPLY NORMALIZED
*                  MXDR      MULTIPLY
*                  MXR       MULTIPLY
*                  PTLB      PURGE TLB
*                  RRB       RESET REFERENCE BIT
*                  SCK       SET CLOCK
*                  SCKC      SET CLOCK COMPARATOR
*                  SIGP      SIGNAL PROCESSOR
*                  SIOF      START I/O AND FAST RELEASE
*                  SPKA      SET PSW KEY FROM ADDRESS
*                  SPT       SET CPU TIMER
*                  SPX       SET PREFIX
*                  STAP      STORE CPU ADDRESS
*                  STCKC     STORE CLOCK COMPARATOR
*                  STCTL     STORE CONTROL
*                  STIDC     STORE CHANNEL ID
*                  STIDP     STORE CPU ID
*                  STNSM     STORE THEN AND SYSTEM MASK
*                  STOSM     STORE THEN OR SYSTEM MASK
*                  STPT      STORE CPU TIMER
*                  STPX      STORE PREFIX
*                  SXR       SUBTRACT NORMALIZED
         TITLE 'REPEATED CODE MACROS'
*
*              SETCC               SET  PIEOPSW CONDITION CODE BITS
*
         MACRO
&N       SETCC &CC
         AIF   (&CC EQ 0).CC0
         AIF   (&CC EQ 1).CC1
         AIF   (&CC EQ 2).CC2
         AIF   (&CC EQ 3).CC3
         MEXIT 4,'INVALID CONDITION CODE'
.CC0     ANOP
&N       ZB    PIEOPSW+4,(2,3)
         MEXIT
.CC1     ANOP
&N       ZB    PIEOPSW+4,(2)
         SB    PIEOPSW+4,(3)
         MEXIT
.CC2     ANOP
&N       SB    PIEOPSW+4,(2)
         ZB    PIEOPSW+4,(3)
         MEXIT
.CC3     ANOP
&N       SB    PIEOPSW+4,(2,3)
         MEND
*
*              RS1                 OBTAIN R1 AND S2 ADDR FOR RS INS
*
         MACRO
         RS1
         ZR    R8
         IC    R8,1(R2)
         SRL   R8,4
         SLL   R8,2
         LA    R8,SAVEREGS(R8)     R8=A(R1)
         LH    R10,2(R2)
         TB    2(R2),(0,1,2,3)     TEST FOR ABSOLUTE ADDRESS
         BZ    *+26
         LR    R11,R10
         N     R11,=X'00000FFF'
         N     R10,=X'0000F000'
         SRL   R10,10
         L     R10,SAVEREGS(R10)
         LA    R10,0(R11,R10)      R10=A(D2B2)
         MEND
*
*              RS2                 OBTAIN R1, R3, AND S2 ADDRESSES
*
         MACRO
         RS2
         ZR    R8
         IC    R8,1(R2)
         LR    R9,R8
         SRL   R8,4
         SLL   R8,2
         LA    R8,SAVEREGS(R8)     R8=A(R1)
         SLL   R9,28
         SRL   R9,26
         LA    R9,SAVEREGS(R9)     R9=A(R3)
         LH    R10,2(R2)
         TB    2(R2),(0,1,2,3)     TEST FOR ABSOLUTE ADDRESS
         BZ    *+26
         LR    R11,R10
         N     R11,=X'00000FFF'
         N     R10,=X'0000F000'
         SRL   R10,10
         L     R10,SAVEREGS(R10)
         LA    R10,0(R11,R10)      R10=A(D2B2)
         MEND
*
*              BUILD INDEX TABLES FOR SPIE ROUTINE
*
         MACRO
         INSTAB
         LCLA  &S,&T,&I
&T       SETA  N'&SYSLIST
INSTAB   DC    256X'00'
&S       SETA  1
.LHEX    ANOP
&I       SETA  &I+4
         ORG   INSTAB+&SYSLIST(&S)
         DC    AL1(&I)
&S       SETA  &S+2
         AIF   (&S LT &T).LHEX
&S       SETA  2
         ORG
RTNTAB   DC    A(INVOP)
.LAD     ANOP
         DC    A(&SYSLIST(&S))
&S       SETA  &S+2
         AIF   (&S LE &T).LAD
         MEND
         TITLE 'MAINLINE WHICH WILL INVOKE PGM USING 370 INS'
SIM370   SUBENTRY
         L     R1,0(R1)
         LH    R2,0(R1)
         SRC   R2
         BNP   NOPGM
         SI    R2,1
         EX    R2,MVCPGM
         SPIE  SPIERTN,(1)         TRAP OPERATION PROGRAM CHECKS
         LINK  EPLOC=PGMNAME       EXECUTE PROGRAM
EXIT     SUBEXIT
NOPGM    TAG
         WTO   'NO PGM NAME IN PARM'
         B     EXIT
MVCPGM   MVC   PGMNAME(0),2(R1)
PGMNAME  DC    CL8' '
         TITLE 'SPIE ROUTINE USED TO TRAP OPERATION EXCEPTIONS'
SPIERTN  TAG
         USING SPIERTN,R15
         USING PIE,R1
         MVC   SAVEREGS(12),PIER0
         STM   R3,R13,SAVEREGS+12
         MVC   SAVEREGS+56(8),PIER14    SETUP CONTIGUOUS AREA R0-R15
         L     R2,PIEOPSW+4        R2=A(INTERRUPT)
         LR    R3,R2
         SRL   R3,30
         SLL   R3,1                R3=INS LENGTH
         SR    R2,R3               R2=A(INS)
         IC    R3,0(R2)            R3=OP CODE
         IC    R3,INSTAB(R3)       R3=OFFSET TO OP CODE RTN
         L     R3,RTNTAB(R3)       R3=A(OP CODE RTN)
         BR    R3                  GO SIMULATE INSTRUCTION
EXIT1    TAG
         MVC   PIER0(12),SAVEREGS
         MVC   PIER14(8),SAVEREGS+56
EXIT2    TAG
         LM    R3,R13,SAVEREGS+12
         BR    R14
SAVEREGS DS    16F
        INSTAB X'0E',MVCL,         PG 137                              X
               X'0F',CLCL,         PG 129                              X
               X'AF',MC,           PG 136                              X
               X'B2',B2INS,                                            X
               X'BA',CS,           PG 126                              X
               X'BB',CDS,          PG 127                              X
               X'BD',CLM,          PG 129                              X
               X'BE',STCM,         PG 145                              X
               X'BF',ICM,          PG 133                              X
               X'F0',SRP           PG 158
B2INS    TAG
         CLI   1(R2),X'05'
         BE    STCK                PG 145
INVOP    TAG
         ABEND 1001,DUMP           UNSUPPORTED INSTRUCTION
INVREGS  TAG
         ABEND 1002,DUMP           INVALID REGISTER SPECIFICATIONS
INVCLCL  TAG
         ABEND 1003,DUMP           CLCL SIMULATION ERROR - SHOULD'NT
         TITLE 'CDS'
CDS      TAG
         TB    1(R2),(3,7)
         BNZ   INVREGS
         RS2
         CLC   0(8,R8),0(R10)
         BE    CDSSTR3
CDSLR1   TAG
         MVC   0(8,R8),0(R10)
         B     CSCC1
CDSSTR3  TAG
         MVC   0(8,R10),0(R9)
         B     CSCC0
         TITLE 'CLCL'
CLCL     TAG
         TB    1(R2),(3,7)
         BNZ   INVREGS
         ZR    R8
         IC    R8,1(R2)
         LR    R9,R8
         SRL   R8,4
         SLL   R8,2
         LA    R8,SAVEREGS(R8)     R8=A(R1)
         SLL   R9,28
         SRL   R9,26
         LA    R9,SAVEREGS(R9)     R9=A(R9)
         MVC   SAVEB1,4(R8)
         MVC   SAVEB2,4(R9)
         LM    R4,R5,0(R8)
         LM    R6,R7,0(R9)
         ZHB   R4
         ZHB   R5
         ZHB   R6
         ZHB   R7
         CLR   R5,R7
         BL    CLCLR010
         BH    CLCLR030
CLCLR005 TAG
         SRC   R5
         BZ    CLCLCC0             SET CC0 AND EXIT ON ZERO COUNTS
         LR    R3,R5               R3=LENGTH OF CLC
         BAL   R12,CLCLR100
         LR    R5,R3
         LR    R7,R3
         SRC   R3
         BNZ   CLCLEXIT
CLCLCC0  TAG
         SETCC 0
CLCLEXIT TAG
         STM   R4,R5,0(R8)
         STM   R6,R7,0(R9)
         MVC   4(1,R8),SAVEB1
         MVC   4(1,R9),SAVEB2
         B     EXIT1
CLCLCC1  TAG
         SETCC 1
         B     CLCLEXIT
CLCLCC2  TAG
         SETCC 2
         B     CLCLEXIT
CLCLR010 TAG
         LR    R3,R5
         BAL   R12,CLCLR100        SET CC BASED ON CLC OF LENGTH (R3)
         SRC   R3                  DID COUNT GO TO ZERO
         BZ    CLCLR020            YES, GO CHECK REST OF A2 AGAINST PAD
         SR    R5,R3               NO, ADJUST COUNT REGS AND EXIT
         SR    R7,R5
         LR    R5,R3
         B     CLCLEXIT
CLCLR020 TAG
         SR    R7,R5               UPDATE COUNTS TO END OF CLC
         ZR    R5
         LR    R3,R7               R3=LENGTH OF REST OF A2 FIELD
         LR    R10,R6              R10=A(A2 FIELD)
         BAL   R12,CLCLR200        COMPARE PAD AGAINST (R10)
         LR    R7,R3               UPDATE COUNTS AND A2 ADDRESS
         LR    R6,R10
         SRC   R3                  IS A1 EQ A2
         BZ    CLCLCC0             YES, GO SET CC0
         CLC   SAVEB2,0(R6)        IS A1 LT A2
         BL    CLCLCC1             YES, CC1
         B     CLCLCC2             NO,  CC2
CLCLR030 TAG
         LR    R3,R7
         BAL   R12,CLCLR100        SET CC BASED ON CLC OF LENGTH (R3)
         SRC   R3                  EQUAL
         BZ    CLCLR040            YES, GO CHECK REST OF A1 AGAINST PAD
         SR    R7,R3               NO, ADJUST REGS AND EXIT
         SR    R5,R7
         LR    R7,R3
         B     CLCLEXIT
CLCLR040 TAG
         SR    R5,R7               UPDATE COUNTS TO END OF CLC
         ZR    R7
         LR    R3,R5               R3=LENGTH OF REST OF A1
         LR    R10,R4              R10=A(A1)
         BAL   R12,CLCLR200        COMPARE A1 TO PAD
         LR    R5,R3               UPDATE REGS
         LR    R4,R10
         SRC   R3                  IS A1 EQ A2
         BZ    CLCLCC0             YES, CC0
         CLC   SAVEB2,0(R4)        IS A2 LT A1
         BL    CLCLCC2             YES, CC2
         B     CLCLCC1             NO,  CC1
         EJECT
*
*              CLCLR100 ROUTINE COMPARES A1 TO A2 FOR LENGTH OF (R3)
*              BINARY SEARCH IS MADE TO FIND BYTE NOT EQUAL.
*              R4 AND R6 ARE INCREMENTED. R3 IS DECREMENTED.
*              PSW CC IS SET IF NOT ZERO.
*
CLCLR100 TAG
         CH    R3,=H'256'          IS THIS LAST
         BL    CLCLR110            YES, GO CHECK LAST
         CLC   0(256,R4),0(R6)     DOES THIS BLOCK MATCH
         BNE   CLCLR150            NO,  GO FIND  BYTE
         AAI   R4,256
         AAI   R6,256
         SI    R3,256
         B     CLCLR100
CLCLR110 TAG
         SH    R3,=H'1'            IS THERE ANY LEFT
         BM    CLCLR130            NO, COMPLETE MATCH
         EX    R3,CLCLCLC          DOES LAST BLOCK MATCH
         BNE   CLCLR140            NO, GO FIND BYTE
CLCLR120 TAG                       YES, COMPLETE MATCH
         LA    R4,1(R3,R4)
         LA    R6,1(R3,R6)
CLCLR130 TAG
         ZR    R3
         BR    R12
CLCLR140 TAG
         AAI   R3,1
CLCLR150 TAG
         LI    R10,127
CLCLR160 TAG
         EX    R10,CLCLCLC         COMPARE LEFT HALF OF REMAINING BYTES
         BNE   CLCLR170            NOT EQUAL, GO REDUCE LEFT HALF
         LA    R4,1(R10,R4)        EQUAL, INCREMENT TO RIGHT HALF
         LA    R6,1(R10,R6)
         SR    R3,R10
         SI    R3,1
CLCLR170 TAG
         SRL   R10,1               REDUCE LENGTH BY HALF
         SRC   R10                 ARE WE DOWN TO ONE BYTE
         BP    CLCLR160            NO, REPEAT BINARY SEARCH LOOP
         CLC   0(1,R4),0(R6)       IS IT THE BYTE WE ARE ON
         BNE   CLCLR180            YES, EXIT
         AAI   R4,1
         AAI   R6,1
         SI    R3,1
         CLC   0(1,R4),0(R6)       IS IT THE NEXT BYTE
         BE    INVCLCL             NO, ERROR IN SEARCH LOGIC
CLCLR180 TAG
         BL    CLCLR190
         SETCC 2
         BR    R12
CLCLR190 TAG
         SETCC 1
         BR    R12
         EJECT
*
*              CLCLR200 ROUTINE COMPARES REMAINING FIELD AGAINST PAD
*              TRT AND TABLE IS USED TO SEARCH FIELD FOR MISMATCH.
*              R10 IS A(FIELD) AND IS INCREMENTED.
*              R3 IS LENGTH AND IS DECREMENTED.
*
CLCLR200 TAG
         STM   R1,R2,TRTSAVE
         ZR    R11
         IC    R11,SAVEB2
         LA    R11,TRTTAB(R11)
         MVI   0(R11),X'00'        ZERO PAD BYTE IN TRT TABLE
CLCLR210 TAG
         CH    R3,=H'256'
         BL    CLCLR220
         TRT   0(256,R10),TRTTAB   TEST FOR UNEQUAL BYTE USING TRT
         BC    7,CLCLR240
         AAI   R10,256
         SI    R3,256
         B     CLCLR210
CLCLR220 TAG
         SH    R3,=H'1'
         BM    CLCLR230
         EX    R3,CLCLTRT          TEST FOR UNEQUAL BYTE IN LAST AREA
         BC    7,CLCLR240
         LA    R10,1(R3,R10)
CLCLR230 TAG
         MVI   0(R11),X'FF'        RESET PAD BYTE IN TRT TABLE
         ZR    R3
         LM    R1,R2,TRTSAVE
         BR    R12
CLCLR240 TAG
         MVI   0(R11),X'FF'        RESET PAD BYTE IN TRT TABLE
         AAI   R3,1
         SR    R1,R10
         SR    R3,R1
         AR    R10,R1
         LM    R1,R2,TRTSAVE
         BR    R12
CLCLCLC  CLC   0(0,R4),0(R6)
CLCLTRT  TRT   0(0,R10),TRTTAB
TRTSAVE  DC    2F'0'
SAVEB1   DC    C' '
SAVEB2   DC    C' '
TRTTAB   DC    256X'FF'
         TITLE 'CLM'
CLM      TAG
         RS1
CLMT1    TB    1(R2),(4)
         BZ    CLMT2
         CLC   0(1,R8),0(R10)
         BNE   CLMSET
         AAI   R10,1
CLMT2    TAG
         TB    1(R2),(5)
         BZ    CLMT3
         CLC   1(1,R8),0(R10)
         BNE   CLMSET
         AAI   R10,1
CLMT3    TAG
         TB    1(R2),(6)
         BZ    CLMT4
         CLC   2(1,R8),0(R10)
         BNE   CLMSET
         AAI   R10,1
CLMT4    TAG
         TB    1(R2),(7)
         BZ    CLMCC0
         CLC   3(1,R8),0(R10)
         BNE   CLMSET
CLMCC0   TAG
         SETCC 0
         B     EXIT2
CLMSET   TAG
         BL    CLMCC1
CLMCC2   TAG
         SETCC 2
         B     EXIT2
CLMCC1   TAG
         SETCC 1
         B     EXIT2
         TITLE 'CS'
CS       TAG
         RS2
         CLC   0(4,R8),0(R10)
         BE    CSSTR3
CSLR1    TAG
         MVC   0(4,R8),0(R10)
CSCC1    TAG
         SETCC 1
         B     EXIT1
CSSTR3   TAG
         MVC   0(4,R10),0(R9)
CSCC0    TAG
         SETCC 0
         B     EXIT1
         TITLE 'ICM'
ICM      TAG
         RS1
         LR    R11,R10             SAVE FOR CC TEST LATER
ICMT1    TAG
         TB    1(R2),(4)
         BZ    ICMT2
         MVC   0(1,R8),0(R10)
         AAI   R10,1
ICMT2    TAG
         TB    1(R2),(5)
         BZ    ICMT3
         MVC   1(1,R8),0(R10)
         AAI   R10,1
ICMT3    TAG
         TB    1(R2),(6)
         BZ    ICMT4
         MVC   2(1,R8),0(R10)
         AAI   R10,1
ICMT4    TAG
         TB    1(R2),(7)
         BZ    ICMCC
         MVC   3(1,R8),0(R10)
         AAI   R10,1
ICMCC    TAG
         TB    1(R2),(4,5,6,7)
         BZ    ICMCC0
         SR    R10,R11
         SI    R10,1
         EX    R10,ICMCLC
         BZ    ICMCC0
         TB    0(R11),(0)
         BO    ICMCC1
ICMCC2   TAG
         SETCC 2
         B     EXIT1
ICMCC0   TAG
         SETCC 0
         B     EXIT1
ICMCC1   TAG
         SETCC 1
         B     EXIT1
ICMCLC   CLC   0(0,R11),=XL4'00'
         TITLE 'MC'
MC       TAG                       NOP MONITOR CALL
         B     EXIT2
         TITLE 'SRP'
SRP      TAG
         IC    R8,1(R2)
         LR    R9,R8
         LA    R10,15
         OR    R9,R10
         STC   R9,SRPZAP2+1        SET LENGTHS IN ZAP BACK TO D1B1
         SRL   R9,4                R9= LENGTH OF D1B1 - 1
         SLL   R8,4
         OR    R8,R10
         STC   R8,SRPRD            SET ROUNDING DIGIT AS PD BYTE
         LH    R10,2(R2)
         TB    2(R2),(0,1,2,3)
         BZ    SRP10
         LR    R11,R10
         N     R11,=X'00000FFF'
         N     R10,=X'0000F000'
         SRL   R10,10
         L     R10,SAVEREGS(R10)
         LA    R10,0(R11,R10)      R10=A(D1B1)
SRP10    TAG
         EX    R9,SRPZAP1          ZAP  D1B1 FIELD INTO WORK AREA
         BZ    SRP30               VALVE ZERO, IGNORE SHIFT AND EXIT
         LH    R8,4(R2)
         TB    4(R2),(0,1,2,3)
         BZ    SRP20
         LR    R9,R8
         N     R9,=X'00000FFF'
         N     R8,=X'0000F000'
         SRL   R8,10
         L     R8,SAVEREGS(R8)
         LA    R8,0(R9,R8)         R8=A(D2B2)
SRP20    TAG
         SLL   R8,26
         SRA   R8,26
         BNZ   SRP40               BRANCH IF COUNT NOT ZERO
SRP30    TAG
         EX    R0,SRPZAP2          ZAP  WORK AREA BACK TO D1B1 FIELD
         BP    SRPCC2
         BM    SRPCC1
SRPCC0   TAG
         SETCC 0
         B     EXIT2
SRPCC1   TAG
         SETCC 1
         B     EXIT2
SRPCC2   TAG
         SETCC 2
         B     EXIT2
SRP40    TAG
         MVC   SRPSIGN,SRPW+15     SAVE SIGN
         UNPK  SRPUP(15),SRPW(8)        UNPACK INTO 32 BYTE AREA WHICH
         UNPK  SRPUP+14(15),SRPW+7(8)   IS PADDED WITH 32 BYTES OF
         UNPK  SRPUP+28(3),SRPW+14(2)   ZEROS ON LEFT AND RIGHT
         BM    SRP50               COUNT NEGATIVE, GO SHIFT RIGHT
         LA    R9,SRPUP(R8)        INDEX BY LEFT SHIFT COUNT
         PACK  SRPW(8),0(15,R9)         REPACK PICKING UP CORRECT
         PACK  SRPW+7(8),14(15,R9)      NUMBER OF LOW ORDER ZEROS
         PACK  SRPW+14(2),28(3,R9)
         MVN   SRPW+15(1),SRPSIGN  RESTORE SIGN
         B     SRP30
SRP50    TAG
         LA    R9,SRPUP+1               INDEX BY RIGHT SHIFT COUNT - 1
         AR    R9,R8
         PACK  SRPW(8),0(15,R9)         REPACK PICKING UP HIGH ORDER
         PACK  SRPW+7(8),14(15,R9)      ZEROS (NOTE LOW ORDER DIGIT IS
         PACK  SRPW+14(2),28(3,R9)      LAST DIGIT TO BE SHIFTED OUT)
         AP    SRPW,SRPRD          ADD ROUNDING DIGIT
         MVO   SRPW,SRPW(15)       SHIFT OUT LOW ORDER DIGIT
         MVN   SRPW+15(1),SRPSIGN  RESTORE SIGN
         B     SRP30
         LTORG
SRPRD    DC    P'0'
SRPSIGN  DC    P'0'
SRPZAP1  ZAP   SRPW,0(0,R10)
SRPZAP2  ZAP   0(0,R10),SRPW
SRPW     DC    PL16'0'
         DC    31C'0'
SRPUP    DC    CL31'0'
         DC    31C'0'
         TITLE 'STCK'
STCK     TAG                       STORE CLOCK    PG 145
         LH    R10,2(R2)
         TB    2(R2),(0,1,2,3)
         BZ    STCK10
         LR    R11,R10
         N     R11,=X'00000FFF'
         N     R10,=X'0000F000'
         SRL   R10,10
         L     R10,SAVEREGS(R10)
         LA    R10,0(R11,R10)      R10=A(D2B2)
STCK10   TAG
         SETCC 3                   CLOCK IN STOPPED STATE
         MVC   0(8,R10),=XL8'00'   ZERO FIELD
         B     EXIT2
         TITLE 'STCM'
STCM     TAG
         RS1
STCMT1   TAG
         TB    1(R2),(4)
         BZ    STCMT2
         MVC   0(1,R10),0(R8)
         AAI   R10,1
STCMT2   TAG
         TB    1(R2),(5)
         BZ    STCMT3
         MVC   0(1,R10),1(R8)
         AAI   R10,1
STCMT3   TAG
         TB    1(R2),(6)
         BZ    STCMT4
         MVC   0(1,R10),2(R8)
         AAI   R10,1
STCMT4   TAG
         TB    1(R2),(7)
         BZ    EXIT2
         MVC   0(1,R10),3(R8)
         B     EXIT2
         TITLE 'MVCL'
MVCL     TAG
         TB    1(R2),(3,7)        (R1, R2)MUST BE EVEN
         BNZ   INVREGS
         IC    R8,1(R2)
         LR    R9,R8
         N     R8,=X'000000F0'
         SRL   R8,2
         LA    R8,SAVEREGS(R8)     R8=A((R1))
         N     R9,=X'0000000F'
         SLL   R9,2
         LA    R9,SAVEREGS(R9)     R9=A((R2))
         MVC   SAVEB1,4(R8)        SAVE PAD
         MVC   SAVEB2,4(R9)
         LM    R4,R5,0(R8)
         LM    R6,R7,0(R9)
         ZHB   R4
         ZHB   R5
         ZHB   R6
         ZHB   R7
         CLR   R4,R6
         BNH   MVCL010
         LA    R3,0(R6,R7)
         CLR   R4,R3
         BH    MVCL010
         SETCC 3                   SET CC3 DUE TO DESTRUCTIVE OVERLAY
MVCLEXIT TAG
         STM   R4,R5,0(R8)
         STM   R6,R7,0(R9)
         MVC   4(1,R8),SAVEB1
         MVC   4(1,R9),SAVEB2
         B     EXIT1
MVCL010  TAG
         LI    R10,256             R10=256 CONSTANT USED IN ROUTINES
         CLR   R5,R7               COMPARE LENGTHS
         BH    MVCL020             HIGH
         BL    MVCL030             LOW
         SETCC 0                   SET CC0 L'(R1) EQ L'(R2)
         LTR   R3,R5
         BZ    MVCLEXIT            EXIT IF L'(R1) EQ ZERO
         BAL   R12,MVCL100         MOVE ROUTINE
         B     MVCLEXIT
MVCL020  TAG
         SETCC 2                   SET CC2 L'(R1) GT L'(R2)
         LR    R3,R7               R3= MOVE COUNT
         BAL   R12,MVCL100         MOVE ROUTINE
         LR    R3,R5               R3= PAD COUNT
         BAL   R12,MVCL200         PAD  ROUTINE
         B     MVCLEXIT
MVCL030  TAG
         SETCC 1                   SET CC1 L'(R1) LT L'(R2)
         LR    R3,R5               R3= MOVE COUNT
         BAL   R12,MVCL100         MOVE ROUTINE
         B     MVCLEXIT
MVCL100  TAG
         CLR   R3,R10              IS THERE 256 TO MOVE
         BNH   MVCL110
         MVC   0(256,R4),0(R6)
         AR    R4,R10
         AR    R6,R10
         SR    R5,R10
         SR    R7,R10
         SR    R3,R10
         B     MVCL100
MVCL110  TAG
         SH    R3,=H'1'
         BCR   4,R12               NONE LEFT, EXIT
         EX    R3,MVCLMVC
         AAI   R3,1
         AR    R4,R3
         AR    R6,R3
         SR    R5,R3
         SR    R7,R3
         BR    R12
MVCLMVC  MVC   0(0,R4),0(R6)
MVCL200  TAG
         CLR   R3,R10              IS THERE 256 TO PAD
         BNH   MVCL210
         MVC   0(1,R4),SAVEB2
         MVC   1(255,R4),0(R4)
         AR    R4,R10
         SR    R5,R10
         SR    R3,R10
         B     MVCL200
MVCL210  TAG
         SH    R3,=H'1'
         BCR   4,R12               NONE LEFT, EXIT
         MVC   0(1,R4),SAVEB2
         BZ    MVCL220             ONE LEFT, SET (R4+R5),EXIT
         SI    R3,1
         EX    R3,MVCLPAD
         AAI   R3,2
         AR    R4,R3
         SR    R5,R3
         BR    R12
MVCL220  TAG
         AAI   R4,1
         SI    R5,1
         BR    R12
MVCLPAD  MVC   1(0,R4),0(R4)
         TITLE 'LITERALS AND EQUS'
         EQUAL
         TITLE 'PIE DSECT'
PIE      DSECT
PIEPICA  DS    F
PIEOPSW  DS    XL8
PIER14   DS    F
PIER15   DS    F
PIER0    DS    F
PIER1    DS    F
PIER2    DS    F
         END   SIM370
