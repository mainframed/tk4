*          DATA SET GU450000   AT LEVEL 005 AS OF 10/07/74
         TITLE 'KWIC - KEY WORD IN CONTEXT SHIFT SUBROUTINE'
         PRINT NOGEN
*
*              PGM-ID.   GU450000 KWIC SUBROUTINE.
*              AUTHOR.   DON HIGGINS.
*              DATE.     09/17/74.
*              REMARKS.  THIS SUBROUTINE ROTATES A TEXT STRING
*                        TO THE NEXT KEY WORD IN CONTEXT.
*
*              ARGUMENTS.
*
*                  1.    ADDRESS OF STRING.
*                  2.    LENGTH OF STRING IN BYTES.
*                  3.    BYTES SHIFTED PRIOR TO THIS CALL. (UPDATED
*                             PRIOR TO EXIT FROM EACH CALL)
*                  4.    LENGTH OF CURRENT KEYWORD PLACED AT HEAD OF
*                        STRING. (ZERO ON FIRST CALL AND SET TO ZERO
*                        WHEN ALL KEYWORDS ARE EXHAUSTED)
*
*              FILES.
*
*                        SKIPKEYS - SEQUENTIAL FIXED BLOCK FILE
*                                   CONTAINING KEYS DELIMITED BY
*                                   BLANKS.  THESE KEYS WILL NOT
*                                   BE RETURNED AS KEY WORDS.
*
*              NOTES.
*
*                  1.    STRING AND KEYS MAY BE OF ANY LENGTH UP TO
*                        16 MILLION.
*                  2.    USER ABEND 001 IF INPUT RECORD NOT DELIMITED
*                        BY BLANK.
*
*                  3.    SKIPKEYS MAY BE UP TO  79 BYTES LONG.  THIS
*                        LIMIT IS SET BY SIZE OF KINDEX AND MAY BE
*                        INCREASED VIA A REASSEMBLY.  USER ABEND 002
*                        OCCURS IF AN INPUT SKIP KEY EXCEEDS THIS LIMIT
*                        NOTE THAT INPUT FILE RECORD SIZE MUST ALWAYS
*                        BE AT LEAST 1 GREATER THAN SKIP KEY SIZE.
         TITLE 'MAIN PROGRAM'
KWIC     SUBENTRY
         LM    R3,R6,0(R1)
         L     R4,0(R4)
         IF    (CLI,FIRST,TRUE,EQ)
               MVI  FIRST,FALSE
               PM   LOADKEYS
         FI
         PM    SETUP
         PM    SHIFT
         DO    WHILE,(CLI,EOS,TRUE,NE)
               PM   VERFIY
               IF   (CLI,KEY,TRUE,EQ)
                    PM   RESET
                    MVC  0(4,R6),LKEY
                    SUBEXIT
               FI
               PM   SHIFT
         OD
         XC    0(4,R6),0(R6)
         SUBEXIT
TRUE     EQU   0
FALSE    EQU   1
FIRST    DC    AL1(TRUE)
KEY      DC    AL1(FALSE)
EOS      DC    AL1(FALSE)
         TITLE 'LOADKEYS - LOAD KEYS TO BE SKIPPED INTO BINARY TREE'
LOADKEYS PENTRY
         OPEN  (SKIPKEYS,(INPUT))
         PM    READ
         DO    WHILE,(CLI,EOF,TRUE,NE)
               PM   GETKEY
               DO   WHILE,(CLI,KEY,TRUE,EQ)
                    PM   ADDKEY
                    PM   GETKEY
               OD
               PM   READ
         OD
         CLOSE (SKIPKEYS)
         PEXIT
SKIPKEYS DCB   DSORG=PS,MACRF=GL,DDNAME=SKIPKEYS,EODAD=READEOF,        X
               RECFM=FB
DCBLRECL EQU   X'52'
EOF      DC    AL1(FALSE)     END OF FILE
         TITLE 'READ RECORD'
READ     PENTRY
         GET   SKIPKEYS
         ST    R1,RECPTR
         AH    R1,SKIPKEYS+DCBLRECL
         SI    R1,1
         IF    (CLI,0(R1),BLANK,NE)
               ABEND 001,DUMP
         FI
         ST    R1,RECEOR
         PEXIT
READEOF  MVI   EOF,TRUE
         PEXIT
RECPTR   DC    A(0)
RECEOR   DC    A(0)
         TITLE 'GETKEY - GETKEY FROM RECORD TO ADD TO TREE'
GETKEY   PENTRY
         MVI   KEY,TRUE
         LM    R14,R15,RECPTR
         MVI   0(R15),EOR
         LM    R0,R1,SKIPBLK
         CLCL  R14,R0
         IF    (CL,R14,RECEOR,NL)
               MVI  KEY,FALSE
               PEXIT
         FI
         LR    R1,R14
         L     R15,RECEOR
         MVI   0(R15),BLANK
         DO    WHILE,(TRT,0(256,R1),STOPBLK,EQ)
               AAI  R1,256
         OD
         ST    R1,RECPTR
         ST    R14,AKEY
         SR    R1,R14
         ST    R1,LKEY
         PEXIT
EOR      EQU   X'FF'
BLANK    EQU   C' '
STOPBLK  DC    256X'00'
         ORG   STOPBLK+BLANK
         DC    X'FF'
         ORG
AKEY     DC    A(0)
LKEY     DC    A(0)
SKIPBLK  DC    A(0),AL1(BLANK),AL3(0)
         TITLE 'ADDKEY - ADD KEY TO BINARY TREE'
ADDKEY   PENTRY
         L     R1,LKEY
         SLL   R1,2
         LA    R2,KINDEX-4(R1)
         IF    (CL,R2,=A(KINDEND),NL)
               ABEND 002,DUMP
         FI
         L     R1,0(R2)
         DO    WHILE,(LTR,R1,R1,P)
               LM   R14,R15,AKEY
               LA   R0,8(R1)
               LR   R1,R15
               IF   (CLCL,R14,R0,L)
                    L    R1,0(R2)
                    LA   R2,0(R1)
               ELSE
                    L    R1,0(R2)
                    LA   R2,4(R1)
               FI
               L    R1,0(R2)
         OD
         L     R0,LKEY
         AH    R0,=H'8'
         GETMAIN R,LV=(0)
         XC    0(8,R1),0(R1)
         ST    R1,0(R2)
         LA    R14,8(R1)
         L     R15,LKEY
         LR    R1,R15
         L     R0,AKEY
         MVCL  R14,R0
         PEXIT
MAXKEY   EQU   79        MAXIMUM LENGTH OF SKIP KEYS
KINDEX   DC    (MAXKEY)A(0)
KINDEND  EQU   *
         TITLE 'SETUP STRING IN WORK AREA'
SETUP    PENTRY
         LM    R14,R15,AWORK
         IF    (CLR,R4,R15,NL)
               IF   (LTR,R0,R15,P)
                    LR   R1,R14
                    FREEMAIN R,LV=(0),A=(1)
               FI
               LA   R0,1(R4)
               ST   R0,LWORK
               GETMAIN R,LV=(0)
               ST   R1,AWORK
               LM   R14,R15,AWORK
         FI
         ST    R14,AKEY
         MVC   LKEY,0(R6)
         LR    R0,R3
         LR    R1,R4
         LR    R15,R1
         MVCL  R14,R0
         ST    R14,AWORKEOR
         PEXIT
AWORK    DC    A(0)
LWORK    DC    A(0)
AWORKEOR DC    A(0)
         TITLE 'VERIFY THAT NEW KEY IS VALID FOR RETURN TO USER'
VERFIY   PENTRY
         MVI   KEY,TRUE
         L     R2,LKEY
         SLL   R2,2
         LA    R2,KINDEX-4(R2)
         IF    (CL,R2,=A(KINDEND),NL)
               PEXIT
         FI
         L     R2,0(R2)
         DO    WHILE,(LTR,R2,R2,P)
               LA   R0,8(R2)
               LM   R14,R15,AKEY
               LR   R1,R15
               IF   (CLCL,R14,R0,L)
                    L    R2,0(R2)
               ELSE
                    IF   (LTR,R1,R1,Z)
                         MVI  KEY,FALSE
                         PEXIT
                    FI
                    L    R2,4(R2)
               FI
         OD
         PEXIT
         TITLE 'SHIFT POINTER TO NEXT KEY IN WORK STRING'
SHIFT    PENTRY
         MVI   EOS,FALSE
         L     R14,AKEY
         A     R14,LKEY
         L     R15,AWORKEOR
         MVI   0(R15),EOR
         LM    R0,R1,SKIPBLK
         CLCL  R14,R0
         LR    R1,R14
         S     R1,AKEY
         A     R1,0(R5)
         IF    (CLR,R1,R4,NL)
               MVI  EOS,TRUE
               PEXIT
         FI
         ST    R1,0(R5)
         ST    R14,AKEY
         L     R15,AWORKEOR
         MVI   0(R15),BLANK
         LR    R1,R14
         DO    WHILE,(TRT,0(256,R1),STOPBLK,EQ)
               AAI  R1,256
         OD
         S     R1,AKEY
         ST    R1,LKEY
         PEXIT
         TITLE 'RESET USER STRING WITH VALID KWIC STRING'
RESET    PENTRY
         LR    R0,R3
         L     R14,AKEY
         L     R1,AWORKEOR
         SR    R1,R14
         LR    R15,R1
         MVCL  R0,R14
         L     R14,AWORK
         L     R1,AKEY
         SR    R1,R14
         LR    R15,R1
         MVCL  R0,R14
         PEXIT
         TITLE 'COMMON DATA'
         EQUAL
         END
