C          DATA SET GU430000   AT LEVEL 018 AS OF 03/16/79
C     PGM-ID. GU430000.
C     AUTHOR. DON HIGGINS.
C     DATE.   02/28/79.
C     REMARKS. TEST PROGRAM FOR GU429000 SUBROUTINE NAMED EXEC
C              WHICH PROVIDES DYNAMIC STORAGE SUPPORT AND ALC
C              INSTRUCTION SUPPORT TO HIGHER LEVEL LANGUAGES.
C
      IMPLICIT INTEGER (A-Z)
      INTEGER FRPT/6/,FIN/5/
C
C     UNIT TEST DATA
C
      COMMON TESTS,ERRORS
      INTEGER IA1,A1,IA2,A2,IPA1,IPA2
      REAL*8  PA1,PA2
      LOGICAL*1 TAB(256)
C
C     DEMO DATA
C
      INTEGER FIRST/0/,LAST/0/,NEXT/0/
      INTEGER EOF/0/,FALSE/0/,TRUE/1/
      INTEGER AREA(20)/20*' '/,IAREA/0/
C
C              CALLS.
C                      CALL EXEC(OP1,OPR11,OPR12,,,OPR1N,
C                                OP2,OPR21,OPR22,,,OPR2N,
C                                       ,
C                                       ,
C                                OPN,OPRN1,OPRN2,,,OPRNN)
C
C                        OP  - OPERATION CODE
C
C                        OPR - REQUIRED OPERANDS FOR SPECIFIC
C                              OPERATION
C
C              CURRENT COMMANDS SUPPORTED.
C
C                   OPERATION   OPERANDS
C
C                14  MVCL         ADDR1,LEN1,ADDR2,LEN2,PAD
C
C                15  CLCL         ADDR1,LEN1,ADDR2,LEN2,PAD,CODE
C
C                20  NR           REG1,REG2
C
C                21  CLR          REG1,REG2,CODE
C
C                22  OR           REG1,REG2
C
C                23  XR           REG1,REG2
C
C                25  CR           REG1,REG2,CODE
C
C                26  AR           REG1,REG2
C
C                27  SR           REG1,REG2
C
C                28  MR           REG1,REG2
C
C                29  DR           REG1,REG2
C
C                65  LA           ADDR,AREA,INDEX
C
C                66  STC          REG,ADDR
C
C                67  IC           REG,ADDR
C
C                78  CVD          REG,ADDR
C
C                79  CVB          REG,ADDR
C
C                80  ST           REG,ADDR
C
C                84  N            REG,ADDR
C
C                85  CL           REG,ADDR,CODE
C
C                86  O            REG,ADDR
C
C                87  X            REG,ADDR
C
C                88  L            REG,ADDR
C
C               136  SRL          REG,COUNT
C
C               137  SLL          REG,COUNT
C
C               145  TM           ADDR,MASK,CODE
C
C               146  MVI          ADDR,MASK
C
C               148  NI           ADDR,MASK
C
C               149  CLI          ADDR,MASK,CODE
C
C               150  OI           REG,MASK
C
C               151  XI           REG,MASK
C
C               189  CLM          REG,MASK,ADDR,CODE
C
C               190  STCM         REG,MASK,ADDR
C
C               191  ICM          REG,MASK,ADDR,CODE
C
C               210  MVC          ADDR1,LEN,ADDR2
C
C               212  NC           ADDR1,LEN,ADDR2
C
C               213  CLC          ADDR1,LEN,ADDR2,CODE
C
C               214  OC           ADDR1,LEN,ADDR2
C
C               215  XC           ADDR1,LEN,ADDR2
C
C               220  TR           ADDR1,LEN,ADDR2
C
C               221  TRT          ADDR1,LEN,ADDR2,REG1,REG2,CODE
C
C               222  ED           ADDR1,LEN,ADDR2
C
C               223  EDMK         ADDR1,LEN,ADDR2,REG,CODE
C
C               242  PACK         ADDR1,LEN1,ADDR2,LEN2
C
C               243  UNPK         ADDR1,LEN1,ADDR2,LEN2
C
C               244  HTB          HEX8,BINARY4
C
C               245  BTH          BINARY4,HEX8
C
C               248  ZAP          ADDR1,LEN1,ADDR2,LEN2
C
C               249  CP           ADDR1,LEN1,ADDR2,LEN2,CODE
C
C               250  AP           ADDR1,LEN1,ADDR2,LEN2
C
C               251  SP           ADDR1,LEN1,ADDR2,LEN2
C
C               252  MP           ADDR1,LEN1,ADDR2,LEN2
C
C               253  DP           ADDR1,LEN1,ADDR2,LEN2
C
C               254  GMAIN        ADDR,LEN
C
C               255  FMAIN        ADDR,LEN
C
C              OPERAND DESCRIPTIONS
C
C                    ADDR   - FULL WORD CONTAINING ADDRESS OF AN AREA
C
C                    INDEX  - FULL BINARY INDEX VALUE ADDED TO ADDR TO
C                             CALCULATE TARGET OPERAND ADDRESS
C
C                    AREA   - ADDRESS OF AREA (LA STORES AREA ADDRESS
C                             PLUS CONTENTS OF INDEX IN ADDR. LA IS
C                             USED TO GET INDIRECT ADDRESS OF STATIC
C                             STORAGE AREA FOR USE IN EXEC COMMANDS.)
C
C                    REG    - FULL WORD USED AS REGISTER IN INSTRUCTION
C
C                    LEN    - FULL WORD BINARY LENGTH OF AREA
C
C                    PAD    - BYTE CONTAINING PAD CHARACTER
C
C                    CODE   - FULL WORD SET TO CONDITION CODE VALUE
C
C                    MASK   - FULL WORD CONTAINING MASK 0-15 VALUE
C                             OR IMMEDIATE DATA
C
C                    COUNT  - FULL WORD BINARY COUNT OF BITS TO SHIFT
C
C                    HEX8   - AREA FOR 8 BYTE EBCDIC HEX CODE
C
C                    BINARY4- AREA FOR 4 BYTE BINARY HEX CODE
C
C     EXEC OPERATION DEFINITIONS
C
      INTEGER MVCL/14/,CLCL/15/,NR/20/,CLR/21/,OR/22/,XR/23/,CR/25/
      INTEGER AR/26/,SR/27/,MR/28/,DR/29/,LA/65/,STC/66/
      INTEGER IC/67/,CVD/78/,CVB/79/,ST/80/,N/84/,CL/85/,O/86/
      INTEGER X/87/,L/88/,SRL/136/,SLL/137/,TM/145/,MVI/146/
      INTEGER NI/148/,CLI/149/,OI/150/,XI/151/,CLM/189/,STCM/190/
      INTEGER ICM/191/,MVC/210/,NC/212/,CLC/213/,OC/214/,XC/215/
      INTEGER TR/220/,TRT/221/,ED/222/,EDMK/223/
      INTEGER PACK/242/,UNPK/243/,HTB/244/,BTH/245/,ZAP/248/,CP/248/
      INTEGER AP/250/,SP/251/,MP/252/,DP/253/
      INTEGER GMAIN/254/,FMAIN/255/
C
C     FORMATS
C
   10 FORMAT(20A4)
   20 FORMAT(1X,'AREA ',20A4)
   30 FORMAT(1X,'TOTAL TESTS=',I5,'  ERRORS=',I5)
C****
C     MAINLINE
C****
      CALL NOSTAE
C
C     PERFORM UNIT TESTS OF EACH INSTRUCTION
C
      PM   UTESTS
C
C     PERFORM DEMO SYSTEM TESTS
C
      PM   DEMO1
      STOP
C****
C     INSTRUCTION UNIT TESTS
C****
      PENTRY UTESTS
C
C     INIT
C
      TESTS=0
      ERRORS=0
      CALL EXEC(LA,IA1,A1,0,
     *          LA,IA2,A2,0,
     *          LA,IR1,R1,0,
     *          LA,IR2,R2,0,
     *          LA,IPA1,PA1,0,
     *          LA,IPA2,PA2,0,
     *          LA,ITAB,TAB,0)
C
C     TESTS
C
      CALL EXEC(ST,'ABZZ',IA1,
     *          MVCL,IA2,4,IA1,2,'X')
      CALL VT(10,'ABXX',A2)
      CALL EXEC(ST,'1200',IA1,
     *          ST,'1234',IA2,
     *          CLCL,IA1,4,IA2,4,0,CODE)
      CALL VT(20,1,CODE)
      CALL EXEC(ST,'12XX',IA1,
     *          ST,'ZZ12',IA2,
     *          CLCL,IA1,4,IA2+2,2,'X',CODE)
      CALL VT(30,0,CODE)
      CALL EXEC(ST,'1234',IA1,
     *          ST,'1230',IA2,
     *          CLCL,IA1,4,IA2,4,0,CODE)
      CALL VT(40,2,CODE)
      CALL EXEC(ST,'3333',IA1,
     *          ST,'5555',IA2,
     *          NR,A1,A2)
      CALL VT(50,'1111',A1)
      CALL EXEC(ST,'1200',IA1,
     *          ST,'1234',IA2,
     *          CLR,A1,A2,CODE)
      CALL VT(52,1,CODE)
      CALL EXEC(ST,'12XX',IA1,
     *          ST,'12XX',IA2,
     *          CLR,A1,A2,CODE)
      CALL VT(54,0,CODE)
      CALL EXEC(ST,'1234',IA1,
     *          ST,'1230',IA2,
     *          CLR,A1,A2,CODE)
      CALL VT(56,2,CODE)
      CALL EXEC(ST,'3333',IA1,
     *          ST,'5555',IA2,
     *          OR,A1,A2)
      CALL VT(60,'7777',A1)
      CALL EXEC(ST,'3333',IA1,
     *          ST,'5555',IA2,
     *          XR,A1,A2,
     *          ST,'0000',IA2,
     *          OR,A1,A2)
      CALL VT(70,'6666',A1)
      CALL EXEC(ST,1200,IA1,
     *          ST,1234,IA2,
     *          CR,A1,A2,CODE)
      CALL VT(72,1,CODE)
      CALL EXEC(ST,1200,IA1,
     *          ST,1200,IA2,
     *          CR,A1,A2,CODE)
      CALL VT(74,0,CODE)
      CALL EXEC(ST,1234,IA1,
     *          ST,1230,IA2,
     *          CR,A1,A2,CODE)
      CALL VT(76,2,CODE)
      CALL EXEC(ST,200,IA1,
     *          ST,234,IA2,
     *          AR,A1,A2)
      CALL VT(78,434,A1)
      CALL EXEC(ST,200,IA1,
     *          ST,120,IA2,
     *          SR,A1,A2)
      CALL VT(80,80,A1)
      CALL EXEC(ST,12,IA1,
     *          ST,10,IA2,
     *          MR,A1,A2)
      CALL VT(82,120,A1)
      CALL EXEC(ST,14,IA1,
     *          ST,3,IA2,
     *          DR,A1,A2)
      CALL VT(84,4,A1)
      CALL VT(86,2,A2)
      CALL EXEC(LA,A1,A1,0,
     *          LA,A2,A1,1)
      CALL VT(88,1,A2-A1)
      CALL EXEC(ST,'ABCD',IA1,
     *          STC,'1234',IA1)
      CALL VT(90,'4BCD',A1)
      CALL EXEC(ST,'WXYZ',IA1,
     *          ST,'ABCD',IA2,
     *          IC,A1,IA2)
      CALL VT(100,'WXYA',A1)
      CALL EXEC(CVD,20,IPA1,
     *          CVB,A1,IPA1)
      CALL VT(110,20,A1)
      CALL EXEC(ST,'3333',IA1,
     *          ST,'5555',IA2,
     *          N,A1,IA2)
      CALL VT(120,'1111',A1)
      CALL EXEC(ST,'3333',IA1,
     *          ST,'5555',IA2,
     *          O,A1,IA2)
      CALL VT(130,'7777',A1)
      CALL EXEC(ST,'3333',IA1,
     *          ST,'5555',IA2,
     *          X,A1,IA2,
     *          ST,'0000',IA2,
     *          O,A1,IA2)
      CALL VT(140,'6666',A1)
      CALL EXEC(ST,'1200',IA1,
     *          ST,'1234',IA2,
     *          CL,A1,IA2,CODE)
      CALL VT(150,1,CODE)
      CALL EXEC(ST,'12XX',IA1,
     *          ST,'12XX',IA2,
     *          CL,A1,IA2,CODE)
      CALL VT(160,0,CODE)
      CALL EXEC(ST,'1234',IA1,
     *          ST,'1230',IA2,
     *          CL,A1,IA2,CODE)
      CALL VT(170,2,CODE)
      CALL EXEC(ST,'1200',IA1,
     *          L,A2,IA1)
      CALL VT(180,'1200',A2)
      CALL EXEC(ST,2,IA1,
     *          SRL,A1,1)
      CALL VT(190,1,A1)
      CALL EXEC(ST,1,IA1,
     *          SLL,A1,2)
      CALL VT(200,4,A1)
      CALL EXEC(ST,'1000',IA1,
     *          TM,IA1,'0001',CODE)
      CALL VT(210,3,CODE)
      CALL EXEC(ST,'1000',IA1,
     *          TM,IA1,'1112',CODE)
      CALL VT(220,1,CODE)
      CALL EXEC(ST,'7000',IA1,
     *          ST,'0000',IA2,
     *          XR,A1,A2,
     *          TM,A1,'7778',CODE)
      CALL VT(230,0,CODE)
      CALL EXEC(ST,'ABCD',IA1,
     *          MVI,IA1+2,'XXX4')
      CALL VT(240,'AB4D',A1)
      CALL EXEC(ST,'3333',IA1,
     *          ST,'5555',IA2,
     *          NI,IA1,A2)
      CALL VT(250,'1333',A1)
      CALL EXEC(ST,'3333',IA1,
     *          ST,'5555',IA2,
     *          OI,IA1,A2)
      CALL VT(260,'7333',A1)
      CALL EXEC(ST,'3333',IA1,
     *          ST,'5555',IA2,
     *          XI,IA1,A2,
     *          ST,'0000',IA2,
     *          OI,IA1,A2)
      CALL VT(270,'6333',A1)
      CALL EXEC(ST,'1AAA',IA1,
     *          CLI,IA1,'BBB2',CODE)
      CALL VT(280,1,CODE)
      CALL EXEC(ST,'1AAA',IA1,
     *          CLI,IA1,'BBB1',CODE)
      CALL VT(290,0,CODE)
      CALL EXEC(ST,'2AAA',IA1,
     *          CLI,IA1,'BBB1',CODE)
      CALL VT(300,2,CODE)
      CALL EXEC(ST,'AXXB',IA1,
     *          ST,'ACXX',IA2,
     *          CLM,A1,9,IA2,CODE)
      CALL VT(310,1,CODE)
      CALL EXEC(ST,'AXXB',IA1,
     *          ST,'ABXX',IA2,
     *          CLM,A1,9,IA2,CODE)
      CALL VT(320,0,CODE)
      CALL EXEC(ST,'AXXC',IA1,
     *          ST,'ABXX',IA2,
     *          CLM,A1,9,IA2,CODE)
      CALL VT(330,2,CODE)
      CALL EXEC(ST,'AXXB',IA1,
     *          ST,'YYXX',IA2,
     *          STCM,A1,9,IA2)
      CALL VT(340,'ABXX',A2)
      CALL EXEC(ST,'AXXB',IA1,
     *          ST,'12XX',IA2,
     *          ICM,A1,9,IA2,CODE)
      CALL VT(350,'1XX2',A1)
      CALL VT(360,1,CODE)
      CALL EXEC(ST,'ABCD',IA1,
     *          ST,0,IA2,
     *          ICM,A1,15,IA2,CODE)
      CALL VT(370,0,A1)
      CALL VT(380,0,CODE)
      CALL EXEC(ST,'ABCD',IA1,
     *          ST,1,IA2,
     *          ICM,A1,15,IA2,CODE)
      CALL VT(390,1,A1)
      CALL VT(400,2,CODE)
      CALL EXEC(ST,'ABCD',IA1,
     *          ST,'WXYZ',IA2,
     *          MVC,IA2,3,IA1)
      CALL VT(410,'ABCZ',A2)
      CALL EXEC(ST,'3333',IA1,
     *          ST,'5555',IA2,
     *          NC,IA1,4,IA2)
      CALL VT(420,'1111',A1)
      CALL EXEC(ST,'3333',IA1,
     *          ST,'5555',IA2,
     *          OC,IA1,4,IA2)
      CALL VT(430,'7777',A1)
      CALL EXEC(ST,'3333',IA1,
     *          ST,'5555',IA2,
     *          XC,IA1,4,IA2,
     *          ST,'0000',IA2,
     *          OC,IA1,4,IA2)
      CALL VT(440,'6666',A1)
      CALL EXEC(ST,'1200',IA1,
     *          ST,'1234',IA2,
     *          CLC,IA1,4,IA2,CODE)
      CALL VT(450,1,CODE)
      CALL EXEC(ST,'12XX',IA1,
     *          ST,'12XX',IA2,
     *          CLC,IA1,4,IA2,CODE)
      CALL VT(460,0,CODE)
      CALL EXEC(ST,'1234',IA1,
     *          ST,'1230',IA2,
     *          CLC,IA1,4,IA2,CODE)
      CALL VT(470,2,CODE)
      CALL EXEC(XC,ITAB,256,ITAB,
     *          MVI,ITAB+240,'XXX4',
     *          ST,'0000',IA1,
     *          TR,IA1,4,ITAB)
      CALL VT(480,'4444',A1)
      CALL EXEC(XC,ITAB,256,ITAB,
     *          ST,0,IR1,
     *          ST,0,IR2,
     *          MVI,ITAB+241,'XXX1',
     *          ST,'0000',IA1,
     *          TRT,IA1,4,ITAB,R1,R2,CODE)
      CALL VT(482,0,R1)
      CALL VT(484,0,R2)
      CALL VT(486,0,CODE)
      CALL EXEC(XC,ITAB,256,ITAB,
     *          ST,0,IR1,
     *          ST,0,IR2,
     *          MVI,ITAB+241,1,
     *          ST,'0100',IA1,
     *          TRT,IA1,4,ITAB,R1,R2,CODE)
      CALL VT(488,IA1+1,R1)
      CALL VT(490,1,R2)
      CALL VT(492,1,CODE)
      CALL EXEC(XC,ITAB,256,ITAB,
     *          ST,0,IR1,
     *          ST,0,IR2,
     *          MVI,ITAB+241,1,
     *          ST,'0001',IA1,
     *          TRT,IA1,4,ITAB,R1,R2,CODE)
      CALL VT(494,IA1+3,R1)
      CALL VT(496,1,R2)
      CALL VT(498,2,CODE)
      CALL EXEC(HTB,'5B202020',A1,
     *          CVD,12,IPA1,
     *          ED,IA1,4,IPA1+6,CODE)
      CALL VT(500,'$$12',A1)
      CALL VT(502,2,CODE)
      CALL EXEC(HTB,'202020C3',A1,
     *          CVD,-123,IPA1,
     *          ED,IA1,4,IPA1+6,CODE)
      CALL VT(504,'123C',A1)
      CALL VT(506,1,CODE)
      CALL EXEC(HTB,'5B202020',A1,
     *          CVD,0,IPA1,
     *          ED,IA1,4,IPA1+6,CODE)
      CALL VT(508,'$$$$',A1)
      CALL VT(510,0,CODE)
      CALL EXEC(HTB,'5B212020',A1,
     *          CVD,0,IPA1,
     *          ED,IA1,4,IPA1+6,CODE)
      CALL VT(512,'$$00',A1)
      CALL VT(514,0,CODE)
      CALL EXEC(HTB,'5B202020',A1,
     *          ST,0,IR1,
     *          CVD,123,IPA1,
     *          EDMK,IA1,4,IPA1+6,R1,CODE)
      CALL VT(516,'$123',A1)
      CALL VT(518,IA1+1,R1)
      CALL VT(520,2,CODE)
      CALL EXEC(HTB,'01234567',A1,
     *          HTB,'89ABCDEF',A2,
     *          BTH,A1,PA1,
     *          BTH,A2,PA2,
     *          LA,A1,'01234567',0,
     *          LA,A2,'89ABCDEF',0,
     *          CLC,IPA1,8,A1,CODE1,
     *          CLC,IPA2,8,A2,CODE2)
      CALL VT(522,0,CODE1)
      CALL VT(524,0,CODE2)
      CALL EXEC(ST,'0021',IA1,
     *          ST,'ABCD',IA2,
     *          PACK,IPA1,8,IA1,4,
     *          UNPK,IA2,4,IPA1,8)
      CALL VT(526,'0021',A2)
      CALL EXEC(XC,IPA1,8,IPA1,
     *          CVD,41,IPA2,
     *          ST,0,IA1,
     *          ZAP,IPA1,8,IPA2,8,
     *          CVB,A1,IPA1)
      CALL VT(528,41,A1)
      CALL EXEC(CVD,31,IPA1,
     *          CVD,41,IPA2,
     *          ST,0,IA1,
     *          AP,IPA1,8,IPA2,8,
     *          CVB,A1,IPA1)
      CALL VT(530,72,A1)
      CALL EXEC(CVD,31,IPA1,
     *          CVD,41,IPA2,
     *          ST,0,IA1,
     *          SP,IPA1,8,IPA2,8,
     *          CVB,A1,IPA1)
      CALL VT(532,-10,A1)
      CALL EXEC(CVD,31,IPA1,
     *          CVD,41,IPA2,
     *          ST,0,IA1,
     *          MP,IPA1,8,IPA2+4,4,
     *          CVB,A1,IPA1)
      CALL VT(534,1271,A1)
      CALL EXEC(CVD,14,IPA1,
     *          CVD,3,IPA2,
     *          ST,0,IA1,
     *          ST,0,IA2,
     *          DP,IPA1,8,IPA2+6,2,
     *          ZAP,IPA2,8,IPA1,6,
     *          CVB,A1,IPA2,
     *          ZAP,IPA2,8,IPA1+6,2,
     *          CVB,A2,IPA2)
      CALL VT(540,4,A1)
      CALL VT(550,2,A2)
      CALL EXEC(GMAIN,A1,200,
     *          XC,A1,200,A1,
     *          FMAIN,A1,200)
C
C     END OF UNIT TESTS
C
      WRITE(FRPT,30)TESTS,ERRORS
      PEXIT
C****
C     DEMO SYSTEM TESTS
C****
C
C     DEMO1 - DYNAMIC LIST DATA STRUCTURE USAGE
C
C     THIS DEMO LOADS 80 BYTE RECORD INPUT FILE INTO
C     DYNAMICALLY ALLOCATED SIMPLE LIST DATA STRUCTURE AND THEN
C     LISTS THE FILE AND RELEASES THE LIST STORAGE.
C
      PENTRY DEMO1
      CALL EXEC(LA,IAREA,AREA,0)
      PM   READ
      DO   WHILE,(EOF.NE.TRUE)
           PM   ADD
           PM   READ
      OD
      NEXT=FIRST
      DO   WHILE,(NEXT.NE.0)
           PM GET
           WRITE(FRPT,20)AREA
      OD
      PEXIT
C****
C     SUPPORT ROUTINES
C****
C
C     READ DATA TO STORE IN DYNAMICALLY ALLOCATED LINKED LIST
C
      PENTRY READ
      READ(FIN,10,END=1000)AREA
      PEXIT
 1000 EOF=TRUE
      PEXIT
C
C     ADD RECORD TO LIST
C
      PENTRY ADD
      CALL EXEC(GMAIN,NEXT,88)
      IF   (NEXT.EQ.0)CALL ABEND(810)
      CALL EXEC(MVC,NEXT+4,80,IAREA)
      IF   (FIRST.EQ.0)
           FIRST=NEXT
      ELSE
           CALL EXEC(ST,NEXT,LAST)
      FI
      LAST=NEXT
      PEXIT
C
C     GET
C
      PENTRY GET
      CALL EXEC(MVC,IAREA,80,NEXT+4,
     *          L,REG,NEXT,
     *          FMAIN,NEXT,84)
      NEXT=REG
      PEXIT
      END
      SUBROUTINE VT(TEST,STD,ACT)
C
C     VERIFY TEST - COUNT TESTS, COUNT ERRORS, AND DISPLAY ERRORS.
C
C     TEST = REF. NUMBER
C     STD  = 4 BYTE EXPECTED TEST VALUE
C     ACT  = 4 BYTE ACTUAL   TEST VALUE
C
      IMPLICIT INTEGER (A-Z)
      INTEGER FRPT/6/
      COMMON TESTS,ERRORS
   10 FORMAT(1X,'TEST NO=',I4,'  TEST ID=',I4,1X,A4,1X,A4,I10,I10)
C
C     MAINLINE
C
      TESTS=TESTS+1
      IF   (STD.NE.ACT)
           ERRORS=ERRORS+1
           WRITE(FRPT,10)TESTS,TEST,STD,ACT,STD,ACT
      ELSE
           WRITE(FRPT,10)TESTS,TEST
      FI
      RETURN
      END
