*          DATA SET GU027000   AT LEVEL 046 AS OF 10/05/76
         TITLE 'GU027000(ALIAS GET CATLG) - SEQUENTIAL CATALOG READ'
*              AUTHOR.   DON HIGGINS.
*                        FLORIDA POWER CORPORATION
*                        P.O. BOX 14042
*                        ST. PETERSBURG, FLA. 33733
*                        (813) 866-4145
*
*              MACHINE.  370/158
*              SYSTEM.   0S/VS2-R1.7
*              DATE.     02/20/74.
*              REMARKS.  READ CATALOG AND CONNECTED CATALOGS IN
*                        LOGICAL ASCENDING ORDER ONE RECORD AT A TIME.
*              FILES.
*                SYSCATLG - SYSCATLG ON SYSRES (MFTRES, MVTRES, VS2RES)
*                CCXXXXXX - CONNECTED CATALOG(S)(XXXXXX IS VOLUME ID.)
*                CATSTAT  - OPTIONAL STATISTICS AT EOF
*              REFERENCES.
*                CATALOG MANAGEMENT  Y28-6606
*              CALLING SEQUENCE.
*                   CALL 'GETCATLG',(RECORD,EOFRTN)
*
*                     EOFRTN - ADDRESS OF END OF FILE ROUTINE
*
*                     RECORD - ADDRESS OF RECORD SET BY SUBROUTINE
*
*                     001-006 VOLUME OF DSN (OR CVOL IF NOT DSN TYPE)
*                     007-050 DSN, CONNECT INDEX, GDS INDEX, ALIAS IDX
*                     051-051 TYPE CODE
*                              F1 - DSN
*                              F2 - CONNECT INDEX
*                              F3 - GDS INDEX
*                             F4 - ALIAS INDEX
*                            F5 - INDEX ONLY
*                     052-055 DEVICE CODE
*                     056-057 DSN SEQUENCE NUMBER FROM CATALOG
*                     058-059 VOL SEQUENCE NUMBER GENERATED FOR MULTV.
*                     060-060 GDS OPTIONS  (BIT 6-DELETE, BIT 7-EMPTY)
*                     061-061 GDS MAXIMUM GENERATIONS
*                     062-063 GDS CURRENT GENERATIONS IN INDEX
*
*              NOTES.
*                        1.   THIS ROUTINE ATTEMPTS TO RETURN
*                             LOGICAL CATALOG RECORDS (LCR) IN
*                             ASCENDING ORDER BY DATA SET NAME AND
*                             VOLUME WITHIN DSN.  THIS SEQUENCE
*                             REQUIRES BUILDING TWO TYPES OF LISTS
*                                  A.   MULTI-VOLUME DSNS REQUIRE
*                                       THE BUILDING OF A SORTED
*                                       VOLUME LIST.
*                                  B.   GENERATION DATA GROUPS
*                                       REQUIRE A LIST OF ALL DSN
*                                       ENTRIES SINCE THEY ARE
*                                       STORED IN REVERSE ORDER.
*                        2.   AS A SECONDARY GOAL FOR PERFORMANCE,
*                             THIS ROUTINE ATTEMPTS TO OVERLAP THE
*                             NEXT REQUIRED CATALOG READ WITH
*                             PROCESSING OF THE LAST LCR.
*
*              MODIFICATIONS.
*
*                            REVISION 01     08/15/74     DSH-BRW
*                            REMOVE GDS LIMIT BY CHAINING ENTIRE
*                            GDS ENTRY.
*
*                            REVISION 02     03/22/76     DSH-WRB
*                            IGNORE PROCESSING FOR ERR5 TO ACCEPT
*                            ANY CONNECT VOLUME
*
*  REV  05/21/76  DSH-WILLITS
*  1.  FIX CONNX SEQUENCE ERROR
*
*  REV  07/27/76  DSH-WILLITS
*  1.  FIX MVOL SWITCH WHEN MULTI-VOL IS IN EXCESS OF 6 VOLUMES
*  2.  FIX MULTI-VOL CHAIN LIST (R5 SHOULD BE R1)
*
* REV 09/02/76 DSH
* 1.  REWRITE IN SP AND REMOVE LIMITATIONS ON LEVELS AND NUMBER
*     OF CONNECTED CATALOGS.
         TITLE 'MAINLINE'
GU027000 SUBENTRY BASES=(R13,R12)
         LM    R10,R11,0(R1)            LOAD ARGUMENT ADDRESSES
         IF    (CLI,EOF,TRUE,EQ)
               IF   (CLI,FIRST,TRUE,EQ)
                    MVI  FIRST,FALSE
                    MVI  EOF,FALSE
                    PM   ADDFCB         BUILD FCB FOR SYSCATLG
               ELSE
                    ABEND 201,DUMP      READ PAST EOF NOT ALLOWED
               FI
         FI
         PM    GETLCR                   GET NEXT LOGICAL CATLG RECORD
         IF    (CLI,EOF,TRUE,EQ)
               PM   EOFSTAT
               L    R1,4(R13)
               ST   R11,12(R1)          SET EXIT TO EOF ROUTINE
         ELSE
               MVC  0(4,R10),=A(LCROUT) SET ADDRESS OF LCR
         FI
         SUBEXIT
EOF      LOGICAL TRUE,(FALSE,TRUE)
FIRST    LOGICAL TRUE,(FALSE,TRUE)
         TITLE 'EOFSTAT - STATISTICS AT END OF FILE'
EOFSTAT  PENTRY
         L     R2,PFCB
         DO    WHILE,(LTR,R2,R2,NZ)
               USING FCB,R2
               MVC  DVOL,FCBVOL
               L    R0,FCBTBLKS
               CVD  R0,PWORK
               EDIT TO=DTBLKS,FROM=PWORK+4,MASK=' Z,ZZZ,Z99'
               L    R0,FCBUBLKS
               CVD  R0,PWORK
               EDIT TO=DUBLKS,FROM=PWORK+4,MASK=' Z,ZZZ,Z99'
               LA   R3,DCATSTAT
               PM   DISPLAY
               L    R2,FCBLINK
         OD
         DROP  R2
         LA    R2,CTAB
         DO    WHILE,(CL,R2,=A(CTABEND),L)
               MVC  DNAME,4(R2)
               EDIT TO=DCNT,FROM=0(R2),MASK=' Z,ZZZ,Z99'
               LA   R3,DLINE
               PM   DISPLAY
               AAI  R2,12
         OD
         PEXIT
CTAB     DS    0F
TCATLGS  DC    PL4'0',CL8'CATALOGS'
TCONNS   DC    PL4'0',CL8'CONNECTS'
TLCRS    DC    PL4'0',CL8'TLCRS'
TLCRIO   DC    PL4'0',CL8'TLCR+IO'
TREADS   DC    PL4'0',CL8'READS'
TCHECKS  DC    PL4'0',CL8'CHECKS'
TDSNS    DC    PL4'0',CL8'DSNS'
TGDGS    DC    PL4'0',CL8'GDGS'
TVOLS    DC    PL4'0',CL8'MAXVOLS'
TGDSNS   DC    PL4'0',CL8'MAXGDSNS'
TINDEXS  DC    PL4'0',CL8'INDEXES'
TLINKS   DC    PL4'0',CL8'LINKS'
TBUFS    DC    PL4'0',CL8'BUFFERS'
CTABEND  EQU   *
PWORK    DC    D'0'
DCATSTAT DS    0CL133
         DC    C'0'
         DC    C'GU027000 STATISTICS FOR SYSCTLG ON '
DVOL     DC    CL6' ',C'  TOTAL BLOCKS='
DTBLKS   DC    CL10' ',C'   USED BLOCKS='
DUBLKS   DC    CL10' '
         FILL  DCATSTAT
DLINE    DS    0CL133
         DC    C'0'
DNAME    DC    CL8' ',C' '
DCNT     DC    CL10' '
         FILL  DLINE
         TITLE 'DISPLAY - PRINT STATISTICS LINE'
DISPLAY  PENTRY
         DISPLAY (R3),DDNAME=CATSTAT
         PEXIT
         TITLE 'ADDFCB - CREATE FCB AND PRIME FIRST BCB'
ADDFCB   PENTRY
         AP    TCATLGS,=P'1'
         ST    R2,FCBSAVE
         LA    R0,LFCB
         GETMAIN R,LV=(0)
         LR    R2,R1
         USING FCB,R2
         XC    FCBLBCB,FCBLBCB
         MVC   FCBLINK,PFCB
         MVC   FCBVOL,VOL     ASSUME CONNECTED VOL FOR MISSING DD
         MVC   FCBCFCB,CFCB
         XC    FCBTBLKS,FCBTBLKS
         XC    FCBUBLKS,FCBUBLKS
         ST    R2,CFCB
         ST    R2,PFCB
         MVC   FCBDCB(LDCB),MODELDCB
         FINDDD FCBDCB+(DCBDDNAM-IHADCB)
         IF    (LTR,R1,R1,NZ)
               L    R1,TIOEFSRT(R1)
               MVC  FCBVOL,SRTEVOLI(R1)
               LA   R2,FCBDCB
               DROP R2
               OPEN ((R2),INPUT)
               LA   R1,=X'000001'
               PM   ADDBCB
               PM   CHECKBUF
               L    R2,CFCB
               USING FCB,R2
               L    R1,FCBLBCB
               MVC  TTR,BCBBUF+2+12-BCB(R1)  LAST BLK IN CTLG FROM VICE
               ZR   R1
               IC   R1,TTR+2
               MH   R1,TTR
               ST   R1,FCBTBLKS
         ELSEIF (CLC,FCBDCB+DCBDDNAM-IHADCB(8),=C'SYSCATLG',EQ)
               ABEND 208,DUMP
         FI
         L     R2,FCBSAVE
         DROP  R2
         PEXIT
CFCB     DC    A(0)      POINTER TO CURRENT FCB
PFCB     DC    A(0)      POINTER TO LAST FCB IN FCB CHAIN
MODELDCB DCB   DSORG=DA,MACRF=RIC,DDNAME=SYSCATLG
LDCB     EQU   *-MODELDCB
TIOEFSRT EQU   16   TIOT DD ENTRY ADDRESS OF UCB (FE PG 121)
SRTEVOLI EQU   28   UCB VOLUME ID (FE PG 133)
FCBSAVE  DC    F'0'
         DS    0H
TTR      DC    XL3'00'
         TITLE 'ADDBCB - ADD BCB TO CURRENT FCB'
ADDBCB   PENTRY
         ST    R1,BCBSAVE
         PM    GETBCB
         L     R14,CFCB
         MVC   BCBLINK-BCB(4,R1),FCBLBCB-FCB(R14)
         ST    R1,FCBLBCB-FCB(R14)
         L     R1,BCBSAVE
         PM    READBUF
         PEXIT
BCBSAVE  DC    F'0'
         TITLE 'GETBCB - GET A FREE BCB'
GETBCB   PENTRY
         L     R1,FREEBCBS
         IF    (LTR,R1,R1,NZ)
               MVC  FREEBCBS,BCBLINK-BCB(R1)
         ELSE
               AP   TBUFS,=P'1'
               LA   R0,LBCB
               GETMAIN R,LV=(0)
         FI
         PEXIT
FREEBCBS DC    A(0)
         TITLE 'READBUF - READ BLOCK INTO CURRENT FCB BCB BUFFER'
READBUF  PENTRY
         AP    TREADS,=P'1'
         STM   R2,R4,READSAVE
         LR    R4,R1               KEY (TTR)
         L     R1,CFCB
         L     R2,FCBUBLKS-FCB(R1)
         AAI   R2,1
         ST    R2,FCBUBLKS-FCB(R1)
         LA    R2,FCBDCB-FCB(R1)   DCB
         L     R1,FCBLBCB-FCB(R1)
         LA    R3,BCBBUF-BCB(R1)   BUFFER
         LA    R0,2(R3)
         ST    R0,BCBPTR-BCB(R1)   RESET BUFFER POINTER TO BUF+2
         READ  DECB,DI,(R2),(R3),256,,(R4),MF=E
         LM    R2,R4,READSAVE
         PEXIT
READSAVE DC    3F'0'
         READ  DECB,DI,0,0,256,,0,MF=L
         TITLE 'CHECKBUF - CHECK READ FOR BUFFER'
CHECKBUF PENTRY
         AP    TCHECKS,=P'1'
         CHECK DECB
         PEXIT
         TITLE 'GETLCR - GET NEXT LOGICAL CATALOG RECORD OR SET EOF'
CYCLE    LOGICAL TRUE,(TRUE,FALSE)
MODE     LOGICAL SCANMODE,(SCANMODE,ENQMMODE,DEQMMODE,                 X
               ENQGMODE,DEQGMODE)
GETLCR   PENTRY
         MVI   CYCLE,TRUE
         PM    CHECKLCR
         DO    WHILE,(CLI,CYCLE,TRUE,EQ)
               DOCASE MODE
                    CASE SCANMODE
                         PM   SCAN      NORMAL SCAN OF CATALOGS
                    ESAC
                    CASE ENQMMODE       ENQ MULTI-VOLUME DSN LCRS
                         PM   VIL
                         MVI  MODE,DEQMMODE
                    ESAC
                    CASE DEQMMODE       DEQ MULTI-VOLUME DSN LCRS
                         PM   MVOLDEQ   DEQ MULTI-VOLUME DSN LCRS
                    ESAC
                    CASE ENQGMODE
                         PM   GDSENQ
                         MVI  MODE,DEQGMODE
                    ESAC
                    CASE DEQGMODE
                         PM   GDSDEQ    DEQ GDS DSN LCRS
                    ESAC
               ESACOD
         OD
         AP    TLCRS,=P'1'
         IF    (CLI,IO,TRUE,EQ)
               AP   TLCRIO,=P'1'
         FI
         PEXIT
         TITLE 'SCAN CATALOG FOR NEXT DSN OR GDS INDEX'
SCAN     PENTRY
         L     R2,CFCB
         USING FCB,R2
         L     R3,FCBLBCB
         USING BCB,R3
         IF    (LTR,R3,R3,Z)       IS CONNECTED CATALOG AVAILABLE
               PM   DCONNECT  RETURN FROM CONNECTED CATALOG
         ELSE
               L    R4,BCBPTR
               IF   (CLC,0(12,R4),EOL,EQ)    END OF INDEX LEVEL
                    PM   DELBCB
                    L    R3,FCBLBCB
                    IF   (LTR,R3,R3,Z)  IS IT END OF CATALOG
                         IF   (CLC,FCBCFCB,=A(0),EQ)   IS IT MASTER
                              MVI  EOF,TRUE            YES, SET EOF
                              MVI  CYCLE,FALSE
                         ELSE
                              PM   DCONNECT
                         FI
                    ELSE
                         PM   DDSNLVL
                    FI
               ELSEIF (CLC,0(8,R4),EOL,EQ)   INDEX LINK
                    AP   TLINKS,=P'1'
                    LA   R1,8(R4)
                    PM   READBUF
                    MVI  IO,TRUE
                    PM   CHECKLCR
               ELSEIF (CLC,0(8,R4),VCE,EQ)        CONTROL ENTRY
                    PM   BUMPPTR
               ELSE
                    PM   BUMPPTR
                    ZR   R15
                    IC   R15,11(R4)
                    DOCASE (R15)
                         CASE 0    INDEX
                              IF   (CLC,BCBLINK,=A(0),EQ),             X
               AND,(CLC,FCBCFCB,=A(0),NE),                             X
               AND,(CLC,LASTCONN,0(R4),L)
*
*                                  IF THIS IS HIGHEST LEVEL ON A
*                                  CONNECTED CATALOG AND THE LEVEL
*                                  NAME IS GREATER THAN THE LAST
*                                  CONNECT NAME, RETURN TO MASTER.
*
                                   ST   R4,BCBPTR RESET PTR TO INDEX
                                   PM   DCONNECT
                              ELSE
                                   AP   TINDEXS,=P'1'
                                   LR   R1,R4
                                   PM   ADSNLVL
                                   MVC  VOL,FCBVOL
                                   MVI  TYPE,C'5'
                                   LA   R1,8(R4)
                                   PM   ADDBCB
                                   MVI  LCR,TRUE
                                   MVI  IO,TRUE
                                   PM   CHECKLCR
                              FI
                         ESAC
                         CASE 2    GENERATION INDEX PTR ENTRY
                              AP   TGDGS,=P'1'
                              LR   R1,R4
                              PM   ADSNLVL
                              MVC  VOL,FCBVOL
                              MVI  TYPE,C'3'
                              MVC  GDSOPT(4),12(R4)
                              ST   R3,GDSBCB SAVE GDS LVL FOR DEQ
                              LA   R1,8(R4)
                              PM   ADDBCB
                              MVI  LCR,TRUE
                              MVI  IO,TRUE
                              MVI  MODE,ENQGMODE
                              PM   CHECKLCR
                         ESAC
                         CASE 3    OS REL. 17 CONNECT
                              LR   R1,R4
                              PM   ADSNLVL
                              PM   DDSNLVL
                              MVC  VOL,12(R4)
                              MVC  DEVICE,=XL4'00'
                              MVI  TYPE,C'2'
                              PM   CONNECT
                              MVI  LCR,TRUE
                              PM   CHECKLCR
                         ESAC
                         CASE 4    ALIAS
                              LR   R1,R4
                              PM   ADSNLVL
                              PM   DDSNLVL
                              MVI  DSN+8,C'/'
                              MVC  DSN+9(8),12(R4)
                              MVI  TYPE,C'4'
                              MVI  LCR,TRUE
                              PM   CHECKLCR
                         ESAC
                         CASE 5    OS REL. 18+ CONNECT
                              LR   R1,R4
                              PM   ADSNLVL
                              PM   DDSNLVL
                              MVC  VOL,16(R4)
                              MVC  DEVICE,12(R4)
                              MVI  TYPE,C'2'
                              PM   CONNECT
                              MVI  LCR,TRUE
                              PM   CHECKLCR
                         ESAC
                         CASE ELSE
                              LR   R1,R4
                              PM   DSPE
                         ESAC
                    ESACOD
               FI
         FI
         DROP  R2,R3
         PEXIT
GDSBCB   DC    A(0)
EOL      DS    0XL12
         DC    8X'FF',4X'00'
VCE      DS    0XL8
         DC    7X'00',X'01'
LASTCONN DC    CL8' '
         TITLE 'BUMPPTR - INCREMENT CURRENT BCB POINTER TO NEXT ENTRY'
BUMPPTR  PENTRY
         L     R14,CFCB
         L     R14,FCBLBCB-FCB(R14)
         L     R15,BCBPTR-BCB(R14)
         ZR    R1
         IC    R1,11(R15)
         LA    R1,12(R1,R1)
         AR    R15,R1
         ST    R15,BCBPTR-BCB(R14)
         PEXIT
         TITLE 'CHECKLCR - CHECK IF LCR EXITS AND I/O CAN OVERLAP'
CHECKLCR PENTRY
         IF    (CLI,LCRHOLD,TRUE,EQ)
               MVI  CYCLE,FALSE
               MVI  LCRHOLD,FALSE
         ELSEIF (CLI,LCR,TRUE,EQ)
               MVI  LCR,FALSE
               MVC  LCROUT,RECORD
               MVI  LCRHOLD,TRUE
               IF   (CLI,IO,TRUE,EQ)
                    IF   (TM,DECB,X'40',O)   IS I/O COMPLETE
                         MVI  IO,FALSE            YES, CHECK AND CYCLE
                         PM   CHECKBUF
                    ELSE
                         MVI  CYCLE,FALSE         NO, EXIT WITH LCR
                         MVI  LCRHOLD,FALSE
                    FI
               FI
         ELSEIF (CLI,IO,TRUE,EQ)
               MVI  IO,FALSE
               PM   CHECKBUF
         FI
         PEXIT
LCRHOLD  LOGICAL FALSE,(TRUE,FALSE)
LCR      LOGICAL FALSE,(TRUE,FALSE)
IO       LOGICAL FALSE,(TRUE,FALSE)
         TITLE 'MVOLDEQ - DEQ SORTED VOLUME LCRS FOR A DSN'
MVOLDEQ  PENTRY
         L     R2,NEXTMVCB
         IF    (LTR,R2,R2,NZ)
               USING MVCB,R2
               MVC  DEVICE,MVCBDEV
               MVC  VOL,MVCBVOL
               MVC  DSNSEQ,MVCBDSEQ
               MVC  VOLSEQ,MVCBVSEQ
               MVC  NEXTMVCB,MVCBLINK
               L    R1,FREEMVCB
               ST   R2,FREEMVCB
               ST   R1,MVCBLINK
               MVI  LCR,TRUE
               PM   CHECKLCR
               DROP R2
         ELSE
               MVC  MODE,LASTMODE  RETURN TO GDS OR NORMAL MODE
         FI
         PEXIT
         TITLE 'GDSENQ - BUILD CHAIN OF POINTERS TO GDS DSNS'
GDSENQ   PENTRY
         L     R2,CFCB
         USING FCB,R2
         L     R3,FCBLBCB
         USING BCB,R3
         L     R4,BCBPTR
         DO    WHILE,(CLC,0(12,R4),EOL,NE)   SCAN TO END OF GDS LVL
               IF   (CLC,0(8,R4),EOL,EQ)          IS IT INDEX LINK
                    LA   R1,8(R4)
                    PM   ADDBCB                   YES, ADD BUFFER
                    PM   CHECKBUF
                    L    R3,FCBLBCB
                    L    R4,BCBPTR
               ELSEIF (CLC,0(8,R4),VCE,EQ)
                    PM   BUMPPTR
               ELSE
                    L    R1,FREEGDS               NO, ASSUME DSN
                    IF   (LTR,R1,R1,NZ)
                         MVC  FREEGDS,GDSLINK-GDS(R1)
                    ELSE
                         AP   TGDSNS,=P'1'
                         LA   R0,LGDS
                         GETMAIN R,LV=(0)
                    FI
                    MVC  GDSLINK-GDS(4,R1),NEXTGDS
                    ST   R1,NEXTGDS
                    ST   R4,GDSPTR-GDS(R1)        ADD DSN PTR TO LIST
                    PM   BUMPPTR
               FI
               L    R4,BCBPTR
         OD
         DROP  R2,R3
         PEXIT
         TITLE 'GDSDEQ - DEQ GDS DSNS FROM LIST'
GDSDEQ   PENTRY
         L     R1,NEXTGDS
         IF    (LTR,R1,R1,NZ)
               USING GDS,R1
               MVC  NEXTGDS,GDSLINK
               MVC  GDSLINK,FREEGDS
               ST   R1,FREEGDS
               L    R1,GDSPTR
               XC   1(4,R1),=4X'FF'     COMPLIMENT GDS SEQ NO.
               DROP R1
               PM   DSPE
         ELSE
               L    R2,CFCB
               USING FCB,R2
               DO   WHILE,(CLC,FCBLBCB,GDSBCB,NE)
                    PM   DELBCB
               OD
               DROP R2
               PM   DDSNLVL
               MVI  MODE,SCANMODE
         FI
         PEXIT
         TITLE 'DELBCB - DELETE BCB'
DELBCB   PENTRY
         L     R14,CFCB
         L     R15,FCBLBCB-FCB(R14)
         MVC   FCBLBCB-FCB(4,R14),BCBLINK-BCB(R15)
         MVC   BCBLINK-BCB(4,R15),FREEBCBS
         ST     R15,FREEBCBS
         PEXIT
         TITLE 'CONNECT - SWITCH TO CONNECTED VOLUME'
CONNECT  PENTRY
         AP    TCONNS,=P'1'
         MVC   LASTCONN,DSN
         L     R1,PFCB
         DO    WHILE,(LTR,R1,R1,NZ)
               IF   (CLC,FCBVOL-FCB(6,R1),VOL,EQ)
                    MVC  FCBCFCB-FCB(4,R1),CFCB
                    ST   R1,CFCB
                    PEXIT
               FI
               L    R1,FCBLINK-FCB(R1)
         OD
         MVC   MODELDCB+DCBDDNAM-IHADCB(2),=C'CC'
         MVC   MODELDCB+DCBDDNAM-IHADCB+2(6),VOL
         PM    ADDFCB
         PEXIT
         TITLE 'DCONNECT - DISCONNECT FROM CONNECTED CATALOG'
DCONNECT PENTRY
         L     R1,CFCB
         MVC   CFCB,FCBCFCB-FCB(R1)
         MVC   FCBCFCB-FCB(4,R1),=A(0)
         PEXIT
         TITLE 'ADSNLVL - ADD DSN NAME LEVEL'
ADSNLVL  PENTRY
         STM   R2,R5,DSNSAVE
         LM    R3,R5,DSNREGS  (START,CURRENT,END)
         IF    (CLR,R3,R4,NE)
               MVI  0(R4),C'.'
               AAI  R4,1
         FI
         MVC   0(8,R4),0(R1)
         MVI   8(R4),C' '
         TRT   0(9,R4),FINDBLK
         LR    R4,R1
         IF    (CLR,R4,R5,H)
               ABEND 207,DUMP
         FI
         MVC   DSN,DSNWORK
         ST    R4,DSNREGS+4
         LM    R2,R5,DSNSAVE
         PEXIT
DSNWORK  DC    CL60' '
DSNSAVE  DC    4F'0'
DSNREGS  DC    A(DSNWORK,DSNWORK,DSNWORK+44)
FINDBLK  TRTTAB SCAN,FIND=C' '
         TITLE 'DDSNLVL - DELETE DSN NAME LEVEL'
DDSNLVL  PENTRY
         STM   R2,R5,DSNSAVE
         LM    R3,R5,DSNREGS
         IF    (CLR,R3,R4,NL)
               ABEND 208,DUMP
         FI
         SI    R4,1
         DO    WHILE,(CLI,0(R4),C'.',NE),AND,(CLR,R3,R4,L)
               MVI  0(R4),C' '
               SI   R4,1
         OD
         MVI   0(R4),C' '
         ST    R4,DSNREGS+4
         LM    R2,R5,DSNSAVE
         PEXIT
         TITLE 'DSPE - PROCESS DATA SET POINTER ENTRY'
DSPE     PENTRY
         AP    TDSNS,=P'1'
         STM   R2,R3,DSPESAVE
         LR    R2,R1
         PM    ADSNLVL
         PM    DDSNLVL
         LR    R1,R2
         MVI   TYPE,C'1'
         IF    (CLI,11(R1),1,EQ)   VCBPE
               MVC  LASTMODE,MODE
               LA   R1,8(R1)
               PM   ADDBCB
               MVI  MODE,ENQMMODE
               MVI  IO,TRUE
               PM   CHECKLCR
         ELSEIF (CLC,12(2,R1),=AL2(1),EQ)
               MVC  DEVICE,14(R1)
               MVC  VOL,18(R1)
               MVC  DSNSEQ,24(R1)
               MVC  VOLSEQ,=AL2(0)
               MVI  LCR,TRUE
               PM   CHECKLCR
         ELSE
               ZR   R2
               ICM  R2,3,12(R1)
               LA   R3,14(R1)
               DO   WHILE,(LTR,R2,R2,NZ)
                    LR   R1,R3
                    PM   ADDMVCB
                    AAI  R3,12
                    SI   R2,1
               OD
               MVC  LASTMODE,MODE
               MVI  MODE,DEQMMODE
         FI
         LM    R2,R3,DSPESAVE
         PEXIT
DSPESAVE DC   2F'0'
LASTMODE DC    C' '
         TITLE 'VIL - PROCESS VOLUME INDEX LEVEL FOR A DSN'
VIL      PENTRY
         STM   R2,R6,VCBSAVE
         DO    UNTIL,(LTR,R5,R5,NP)
               L    R2,CFCB
               USING FCB,R2
               L    R3,FCBLBCB
               USING BCB,R3
               L    R4,BCBPTR
               LH   R5,BCBBUF      VOLUMES REMAINING FOR DSN
               LI   R6,20          VOLUMES PER BUFFER
               DO   WHILE,(LTR,R5,R5,P),AND,(LTR,R6,R6,P)
                    LR   R1,R4
                    PM   ADDMVCB
                    AAI  R4,12
                    SI   R5,1
                    SI   R6,1
               OD
               IF   (LTR,R5,R5,P)
                    LR   R1,R4
                    PM   READBUF
                    PM   CHECKBUF
               FI
               DROP R2,R3
         OD
         LM    R2,R6,VCBSAVE
         PM    DELBCB
         PEXIT
VCBSAVE  DC    4F'0'
         TITLE 'ADDMVCB - ADD VOLUME TO LIST IN SEQUENCE'
ADDMVCB  PENTRY
         STM   R2,R3,ADDMSAVE
         LR    R2,R1
         L     R1,FREEMVCB         R1 = MVCB TO BE ADDED USING DSECT
         USING MVCB,R1
         IF    (LTR,R1,R1,NZ)
               MVC  FREEMVCB,MVCBLINK-MVCB(R1)
         ELSE
               AP   TVOLS,=P'1'
               LA   R0,LMVCB
               GETMAIN R,LV=(0)
         FI
         MVC   MVCBDEV,0(R2)
         MVC   MVCBVOL,4(R2)
         MVC   MVCBDSEQ,10(R2)
         L     R2,NEXTMVCB         R2 = CURRENT MVCB IN LIST
         IF    (LTR,R2,R2,Z)
               LI   R3,1
               STH  R3,MVSEQ
               MVC  MVCBVSEQ,MVSEQ
               MVC  MVCBLINK,=A(0)      ADD FIRST MVCB TO NEW LIST
               ST   R1,NEXTMVCB
               LM   R2,R3,ADDMSAVE
               PEXIT
         FI
         LH    R3,MVSEQ
         AAI   R3,1
         STH   R3,MVSEQ
         MVC   MVCBVSEQ,MVSEQ
         LA    R3,NEXTMVCB         R3 = PREVIOUS MVCB LINK FIELD
         DO    WHILE,(CLC,MVCBVOL,MVCBVOL-MVCB(R2),GE)
               LR   R3,R2
               L    R2,MVCBLINK-MVCB(R3)
               IF   (LTR,R2,R2,Z)
                    ST   R1,MVCBLINK-MVCB(R3)     ADD MVCB TO END
                    MVC  MVCBLINK,=A(0)
                    LM   R2,R3,ADDMSAVE
                    PEXIT
               FI
         OD
         MVC   MVCBLINK,MVCBLINK-MVCB(R3)         INSERT MVCB IN LIST
         ST    R1,MVCBLINK-MVCB(R3)
         DROP  R1
         LM    R2,R3,ADDMSAVE
         PEXIT
ADDMSAVE DC    2F'0'
         TITLE 'COMMON DATA'
         EQUAL
FREEGDS  DC    A(0)
NEXTGDS  DC    A(0)
NEXTMVCB DC    A(0)
FREEMVCB DC    A(0)
MVSEQ    DC    H'0'
RECORD   DS    0CL63
VOL      DC    CL6' '
DSN      DC    CL44' '
TYPE     DC    C' '
* 1-DSN
* 2-CONNECT INDEX
* 3-GDS INDEX
* 4-ALIAS INDEX
* 5-INDEX LEVEL ONLY
DEVICE   DC    CL4' '
DSNSEQ   DC    CL2' '
VOLSEQ   DC    C'  '
GDSOPT   DC    C' '
GDSMAX   DC    C' '
GDSCUR   DC    C'  '
LCROUT  DS     XL63
         TITLE 'DSECTS'
*
*        FILE CONTROL BLOCK FOR EACH CATALOG
*
FCB      DSECT
FCBLINK  DS    A         LINK POINTER TONEXT CATALOG FCB OR ZERO
FCBLBCB  DS    A         POINTER TO LAST BUFFER CONTROL BLOCK
FCBVOL   DS    CL6,XL2   VOLUME ID OF THIS CATALOG
FCBCFCB  DS    A         POINT TO LAST FCB THAT CONNECTED TO THIS FCB
FCBTBLKS DS    F         TOTAL BLOCKS IN CATALOG
FCBUBLKS DS    F         TOTAL BLOCKS USED IN CATALOG
FCBDCB   EQU   *         DCB FOR CATALOG
LFCB     EQU   FCBDCB-FCB+LDCB
*
*         BUFFER CONTROL BLOCK FOR ACTIVE BLOCKS IN EACH CATALOG
*
BCB      DSECT
BCBLINK  DS    A         POINTER TO PREVIOUS BCB OR ZERO
BCBPTR   DS    A         POINTER INTO BCBBUF
BCBBUF   DS    XL256     BUFFER
LBCB     EQU   *-BCB
MVCB     DSECT
MVCBLINK DS    A
MVCBDEV  DS    XL4
MVCBVOL  DS    CL6
MVCBDSEQ DS    XL2
MVCBVSEQ DS    XL2
LMVCB    EQU   *-MVCB
GDS      DSECT
GDSLINK  DS    A
GDSPTR   DS    A
LGDS     EQU   *-GDS
         DCBD  DSORG=DA
         END
