         MACRO
         IDFIN08
         COPY IDFGBL
         AIF   (NOT &PIB(48)).TR
         MNOTE *,'IDF100 IN TRACE MODE ENTERING IDFIN08'
.TR      ANOP
         AIF   (&PIB(11)).DSG4XA
         AIF   (&PIB(12)).DSG4XA
.*********************************************************************
.*                                                                    *
.*                  DATA SINK GROUP ASSEMBLY PART I                   *
.*                                                                    *
.*********************************************************************
.*             PART I OF THE DATA SINK GROUP ASSEMBLY PASSES THROUGH
.*             THE DATA SINK ARRAYS, DETERMINES IF A DATA SINK GROUP
.*             IS REQUIRED, AND PASSES CONTROL TO PART II.
.*             THE PRINT AND TRANSMIT SINKS ARE ASSEMBLED LAST,
.*             UNLESS CONTINUED PICTURE OPERAND REQUIRES EARLIER
.*             ASSEMBLY
&M       SETA  20                      POINT TO PICTURE OPERAND
&PIA(2)  SETA  4                  RESET &PIA(2) VALUE FOR MNOTES  FSJW
&PIB(1)  SETB  (&PIB(2) AND &PIA(10) NE &M AND N'&SYSLIST(&M) NE 0)
.*                                     OPND CODED ILLEGALLY IN CONT'N
         IDFMSG1 100
&PIB(15) SETB  (&PIB(15) OR &PIB(1))   TURN ON ERROR BIT
         AIF   (&PIB(2) AND &PIA(10) NE &M).DSG4XA
&PIB(1)  SETB  (&PIB(2) AND N'&SYSLIST(&M) EQ 0)      MISSING CONT'N
         IDFMSG1 102
&PIB(15) SETB  (&PIB(15) OR &PIB(1))
         AIF   (N'&SYSLIST(&M) GT 0 AND NOT &B(20)).DSG09         FSJW
         AIF   (N'&SYSLIST(&M) EQ 0).DSG09                        FSJW
&PIB(1)  SETB  1                                                  FSJW
         IDFMSG1 101                                              FSJW
         AGO   .DSG4XA                                            FSJW
.DSG09   ANOP  ,                                                  FSJW
         AIF   (&B(20)).DSG4XA         IF SOURCE=X1/X2            FSJW
&H       SETA  0                       SET INDEX TO SUBOPS
&B(8)    SETB  0                       ASSUME NO CONTINUATION
         AIF   (&PIB(2)).DSG10         INITIALIZATION ALREADY DONE
&N       SETA  0                       SET INDEX TO SINKS
&PIA(10) SETA  20                      SET TO VALUE OF PICTURE OPND
&FB(22)  SETB  0                       CHAINING BIT IN DATA SINK
&FB(23)  SETB  0                       THESE
&FB(24)  SETB  0                            BITS
&FB(25)  SETB  0                                 NOT USED
&B(9)    SETB  0                       FIRST TIME SWITCH
&B(6)    SETB  0                       ASSUME ALL PICTURES INVALID
&PIB(1)  SETB  (&B(13) AND N'&SYSLIST(&M) NE 0)
         IDFMSG3 565
&PIB(15) SETB  (&PIB(15) OR &PIB(1))
         AIF   (&B(13)).DSG10           EMITTED SOURCE
&B(6)    SETB  1                       ASSUME ALL PICS VALID
         AIF   (&B(11) OR &B(12) OR NOT &FB(1) AND NOT &FB(2)          X
               AND &FB(3)).DSG10       SOURCE NUMERIC,PIC VALID
         AIF   (N'&SYSLIST(&M) EQ 0 OR NOT (&FB(6) AND &FB(13) OR      X
               &FB(7) AND &FB(16))).DSG10
&PIB(1)  SETB  1
         IDFMSG3 566
&PIB(15) SETB  1                       SET ERROR BIT
&B(6)    SETB  0
.DSG10   ANOP  ,                                                SA55132
&B(7)    SETB  (&B(6))                                          SA55132
         AIF   (N'&SYSLIST(&M) LE 1).DSG11                      SA55132
&H       SETA  N'&SYSLIST(&M)
&B(8)    SETB  (&B(6) AND                                              X
               '&SYSLIST(&M,&H)' EQ 'C')
&H       SETA  0
.DSG11   ANOP  ,                       RETURN FOR SUCCESIVE SINKS
&B(2)    SETB  0                       ASSUME NO PICTURE
&B(3)    SETB  0                       ASSUME NO EDITED PRT
&B(4)    SETB  0                       ASSUME NO EDITED TMT
&B(5)    SETB  0                       ASSUME PRT/TMT EDIT DIFFER
.*D  B(7)  SETA  B(6)                                           SA55132
         AIF   (&H GT N'&SYSLIST(&M)-&B(8) AND &B(6) OR &N GE 5).DSG12
&H       SETA  &H+1                    INCREMENT INDEX TO SUBOPS
&B(6)    SETB  (&H LE N'&SYSLIST(&M)-&B(8) AND &H GT 0)         SA55132
         AIF   (&H GT N'&SYSLIST(&M)-&B(8) AND &B(6) OR &N GE 5).DSG12
.*             GO TO .DSG12 IF PIC EXHAUSTED OR BUFFER SINKS EXHAUSTED
&N       SETA  &N+1                    OTHERWISE, ADVANCE POINTER
&K       SETA  5*&N                    ADVANCE PTR IN ARRAYS
         AIF   (&N EQ &F OR &N EQ &G).DSG11 PASS OVER TMT OR PRT
&B(1)    SETB  (NOT &DSKB1(&K) OR NOT (&DSKB1(&K+50) OR &DSKB1(&K+75)) *
               AND &DSKB1(&K+100) AND &DSKB1(&K+125))
&PIB(1)  SETB  (&B(1) AND T'&SYSLIST(&M,&H) NE 'O' AND &B(7))
         IDFMSG3 567
         AIF   (&B(1) OR NOT (&DSKB1(&K+50) OR &DSKB1(&K+75))).DSG11
&B(2)    SETB  (&B(7) AND T'&SYSLIST(&M,&H) NE 'O')
.*                                     INDICATE VALID PICTURE
         AGO   .DSG20                  GO ON TO PART II
.DSG12   ANOP  ,                                                SA55132
&H       SETA  6                                                SA55132
         AIF   (&G LT &N-&H+2 OR &G GT &N).DSG13                SA55132
&H       SETA  &G+&H-1-&N              POINT TO TMT SINK'S PICTURE
&B(2)    SETB  (&B(7) AND T'&SYSLIST(&M,&G) NE 'O')             SA55132
&B(4)    SETB  (&B(2))                 INDICATE EDITED TMT
&K       SETA  5*&G                    POINT TO TMT SINK IN ARRAYS
&H       SETA  &H+1+&N-&G              RESTORE PTR TO SUBOP
.DSG13   AIF   (&F LT &N-&H+2 OR &F GT &N).DSG14
&H       SETA  &F+&H-1-&N              POINT TO PRT SINK'S PICTURE
&B(1)    SETB  (&B(7) AND T'&SYSLIST(&M,&F) NE 'O')             SA55132
&B(3)    SETB  (&B(1))                 INDICATE EDITED PRT
&B(2)    SETB  (&B(2) OR &B(1))
&K       SETA  5*&F                    POINT TO PRT SINK IN ARRAYS
&H       SETA  &H+1+&N-&F              RESTORE POINTER
         AIF   (NOT (&B(2) AND &B(3) AND &B(4))).DSG14
&B(5) SETB ('&SYSLIST(&M,&G+&H-1-&N)' EQ '&SYSLIST(&M,&F+&H-1-&N)')
&B(3)    SETB  (&B(5))
.DSG14   ANOP  ,                                                SA55132
         AIF   (&B(2)).DSG20                                    SA55132
&PIB(2)  SETB  (&H EQ N'&SYSLIST(&M) AND &B(8) AND &N LE 5)
         AIF   (&PIB(2)).DSG4XA
&PIB(1)  SETB  (N'&SYSLIST(&M) GT &H)  TEST FOR EXCESS OPNDS
         IDFMSG1 104
&B(6)    SETB  0                       PICTURE NO LONGER ALLOWED
         AIF   (&N LT 5).DSG11         CONTINUE SEARCH FOR BUFFERS
         AIF   (&F EQ 0 AND &G EQ 0).DSG49       PRT AND TMT SINKS DONE
         AIF   (&G EQ 0).DSG15         NO TMT SINK
         AIF   (&CTA(6) NE 0).DSG14A
&A(2)    SETA  &N                       SAVE CURRENT VALUE OF &N
&N       SETA  &G                       GET NUMBER OF TMT SINK
&PIB(1)  SETB  1
         IDFMSG3 568
&PIB(15) SETB  1
&N       SETA  &A(2)                    RESTORE VALUE OF &N
&G       SETA  0
         AIF   (&F EQ 0).DSG49
         AGO   .DSG15
.DSG14A  ANOP
&A(4)    SETA  &CTA(6)+&FB(14)*&DSCB(40)
&K       SETA  5*&G                    POINT TO TMT SINK IN ARRAYS
&B(4)    SETB  (NOT &FB(4))            EDITING REQUIRED FOR TMT SINK
.DSG15   AIF   (&F EQ 0).DSG16         NO PRT SINK
         AIF   (&CTA(6) NE 0).DSG15A
&A(2)    SETA  &N                       SAVE CURRENT VALUE OF &N
&N       SETA  &F                       GET NUMBER OF PRT SINK
&PIB(1)  SETB  1
         IDFMSG3 568
&PIB(15) SETB  1
&N       SETA  &A(2)                    RESTORE VALUE OF &N
&F       SETA  0
         AGO   .DSG49
.DSG15A  ANOP
&A(4)    SETA  &CTA(6)+&FB(14)*&DSCB(40)
.*D      K  SETA  5F                                            SA55132
&B(3)    SETB  (NOT &FB(5))
         AIF   (NOT (&B(3) AND &B(4))).DSG16     BOTH NOT EDITED
&K       SETA  5*&F                                             SA55132
&B(5)    SETB  (NOT &DSKB2(&K+75) AND &DSKB2(&K) EQ &DSKB2(5*&G)       X
               AND &DSKB2(&K+25) EQ &DSKB2(5*&G+25))
&B(5)    SETB  (&B(5) AND &DSKB2(&K+50) EQ &DSKB2(5*&G+50))
&B(3)    SETB  (&B(5))                 IGNORE PRT SINK IF NOT SAME
&K       SETA  5*&G                    POINT TO TMT SINK IN ARRAYS
.DSG16   AIF   (NOT &B(3) AND NOT &B(4)).DSG41   SKIP OVER ASSEMBLY
&K       SETA  5*&F+(&K-5*&F)*&B(4)                       IR00272
.*********************************************************************
.*                                                                    *
.*                  DATA SINK GROUP ASSEMBLY PART II                  *
.*                                                                    *
.*********************************************************************
.*             PART II OF THE DATA SINK GROUP ASSEMBLY RECEIVES
.*             CONTROL FROM PART I.  THE PRIOR DATA SINK GROUP, IF
.*             ANY, IS "CHAINED" TO THE CURRENT IF REQUIRED.  THEN
.*             THE BITS USED IN THE DATA SINK BYTES ARE DETERMINED
.*             FROM THE DSKB1/DSKB2 ARRAYS.  THE FIRST TWO BYTES ARE
.*             ASSEMBLED.  CONTROL THEN PASSES TO PART III IF THERE IS
.*             A PICTURE; OTHERWISE, TO PARTS V, OR VI, OR IV FOLLOWING
.*             THE ASSEMBLY OF A CORRECT BUFFER COUNT.
.DSG20   ANOP
         AIF   (NOT &B(9)).DSG21  SKIP OVER REASSEMBLY
         AIF   (&FB(22)).DSG21         SKIP REASM IF EARLIER GUESS OKAY
&FB(22)  SETB  1                       SET CHAINING BIT
&PIA(6)  SETA  &FA(3)                  POINT TO START OF DATA SINK GP
&A(1)    SETA  64*&FB(22)+32*&FB(23)+16*&FB(24)+8*&FB(25)+4*&FB(26)+2*&-
               FB(27)+&FB(28)
         IDFASM A
.DSG21   ANOP  ,                       START TO PUT TOGETHER NEW GP
&FA(3)   SETA  &PIA(3)+&PIA(4)+&PIA(4)/480*18  LOCTATE START OF GROUP
&FB(22)  SETB  (&B(8) OR &B(6) AND &N LT N'&SYSLIST(&M) OR             X
               &F NE 0 AND NOT &FB(5) OR &G NE 0 AND NOT &FB(4))
         AIF   (&B(3) OR &B(4)).DSG22  IF PRT OR TMT
&FB(26)  SETB  (&DSKB1(&K+50) OR (&DSKB1(&K+100) AND &DSKB1(&K+125)))
.*                              SET IF LPB OR IOB                  FSJM
&FB(27)  SETB  ((&DSKB1(&K+100) OR &DSKB1(&K+125)) AND NOT &FB(26))
.*                                     SET IF INQ OR PUNCH/RPB
&FB(28)  SETB  (&DSKB1(&K+50) OR (NOT &DSKB1(&K+125) AND &DSKB1(&K+75))X
               )            STG OR PCH OR IOB                      FSJM
&J       SETA  24*&DSKB1(&K+50)+12*&DSKB1(&K+75)+6*&DSKB1(&K+100)+3*&DS-
               KB1(&K+125)-9           OBTAIN INDEX TO BUFA ARRAY
&A(5)    SETA  1                       MINIMUM CHRACTERS IN OUTPUT
&A(6)    SETA  &BUFA(&J)-&DSKA(&K)+1   ASSUMED MAXIMUM
         AIF   (&A(6) LE 127).DSG23
&A(6)    SETA  127                     MAXIMUM OUTPUT CHARACTERS
         AGO   .DSG23
.DSG22   ANOP  ,                       SET UP FOR PRT/TMT
&FB(26)  SETB  0                        SET BITS
&FB(27)  SETB  0                        TO INDICATE
&FB(28)  SETB  0                        SELECTRIC DS-TYPE
&A(5)    SETA  1
&A(6)    SETA  &DFA(19)-&DFA(11)+1     ASSUMED MAX
         AIF   (&A(6) GE 1 AND &A(6) LE 127).DSG23
&A(6)    SETA  &DFA(27)-&DFA(11)+1     USE ALTERNATE VALUE
         AIF   (&A(6) LE 127).DSG23
&A(6)    SETA  127
.DSG23   ANOP  ,                       ASSIGN SECOND BYTE VALUES
&FB(29)  SETB  (NOT &B(2) AND &DSKB2(&K+25))  CENTER BIT
&FB(31)  SETB  (NOT &B(2) AND &DSKB2(&K)) RIGHT AND ZERO FILL
&FB(30)  SETB  (NOT &B(2) AND NOT &FB(31) AND &DSKB2(&K+50))
&FB(32)  SETB  (&B(2))                 SET EDIT (PICTURE) BIT
&FB(33)  SETB  (&DSKB2(&K+75) OR &DSKB1(&K+150)) UNDERLINE OR X1   FSJM
&FB(34)  SETB  (&B(3) OR &DSKB1(&K+175)) PRINT SEL OR X2           FSJM
&FB(35)  SETB  (&B(4) OR &DSKA(&K) GT 124 AND NOT &B(3))
&B(11)   SETB  (&FB(35))                                         FSJM
.*                                     SET TMT BIT OR HI-ORDER BUFF
&FB(35)  SETB  (&FB(35) OR NOT &PIB(24) AND &FB(27) AND &FB(28)        X
               AND &DSKA(&K) GT 28)    SPECIAL CASE OF PUNCH BUFFER
         AIF   (NOT (&B(3) AND &FB(29))).DSG24
&A(1)    SETA  &DFA(19)-&DFA(11)+1-&CTA(6)-&FB(14)*&DSCB(40)
&FB(30)  SETB  (&A(1) NE &A(1)/2*2)    FLIP ON CENTER-RIGHT BIT
&FB(35)  SETB  (&FB(35) AND NOT &FB(30))    DROP TMT SINK IF BIT ON
&B(4)    SETB  (&FB(35))
&B(5)    SETB  (&FB(35))
.DSG24   ANOP  ,                       GENERATE DATA SINK GROUP
&PIA(6)  SETA  &FA(3)                  MOVE TO START OF DSG
&B(9)    SETB  1                       INDICATE PRIOR DATA SINK GROUP
&A(1)    SETA  64*&FB(22)+32*&FB(23)+16*&FB(24)+8*&FB(25)+4*&FB(26)+2*&-
               FB(27)+&FB(28)
         IDFASM A
&PIB(1)  SETB  (NOT (&FB(34) OR &FB(33)) OR NOT (&FB(25) OR &FB(26) OR X
               &FB(27) OR &FB(28)))                           ADX00923
&A(1)    SETA  64*&FB(29)+32*&FB(30)+16*&FB(31)+8*&FB(32)+4*&FB(33)+2*&-
               FB(34)+&FB(35)*&PIB(1)                         ADX00923
         IDFASM A
         AIF   (&B(3) OR &B(4)).DSG26
&A(1)    SETA  &DSKA(&K)+3             SET UP BUFFER ADDRESS
         AIF  (NOT (&DSKB1(&N*5) AND &DSKB1(&N*5+50))).DSG241 ADX00923
&NDXA(2)  SETA  &NDXA(2)+&PIB(43)*(&A(1)-&NDXA(2))               FSJM
.DSG241  AIF   (&PIB(24) OR NOT (&FB(27) AND &FB(28))).DSG25  ADX00923
&A(1)    SETA  &A(1)+96                MODIFY FOR PUNCH BUFFER
.DSG25   ANOP  ,                       ASSEMBLY BUFFER ADDRESS
&A(1)    SETA  (&A(1)-&A(1)/128*128)*&PIB(1)                  ADX00923
         IDFASM A
.DSG26   ANOP
         AIF   (&B(2)).DSG30  ASSEMBLE PICTURE BYTES
         AIF   (&B(3)).DSG41
         AIF   (&B(4)).DSG44
.*                                     CONTINUE WITH BUFFER SINK
&A(4)    SETA  &CTA(&N)                OBTAIN LENGTH, IF CODED
         AIF   (&A(4) NE 0 OR &CTA(6) EQ 0).DSG27
&A(4)    SETA  &CTA(6)+&FB(14)*&DSCB(40)    USE SOURCE VALU
.DSG27   AIF   (&A(4) LT &A(5) OR &A(4) GT &A(6)).DSG40
         AIF  (NOT (&DSKB1(&N*5) AND &DSKB1(&N*5+50))).DSG271 ADX00923
&NDXA(1)  SETA  &NDXA(1)+&PIB(43)*(&A(4)-&NDXA(1))               FSJM
.DSG271  ANOP                                                 ADX00923
&A(1)    SETA  &A(4)                   ASSEMBLE COUNT
         IDFASM A
         AGO   .DSG40                  UPDATE SINK ARRAYS
.*********************************************************************
.*                                                                    *
.*                  DATA SINK GROUP ASSEMBLY PART III                 *
.*                                                                    *
.*********************************************************************
.*             IN PART III, THE PICTURE BYTES ARE ASSEMBLED.  ALSO,
.*             THE DATA TYPE BYTE IS REASSEMBLED TO INSURE NUMERIC
.*             CHECKING, AND THE INPUT COUNT IS SET IF NOT ALREADY
.*             NON-ZERO.
.DSG30   ANOP
&A(2)    SETA  &H                      SAVE INDEX TO PICTURE SUBOPS
         AIF   (NOT &B(3) AND NOT &B(4)).DSG300
&H       SETA  &F                                               SA55132
         AIF   (&B(3)).DSG300          IF PRT, START PROCESSING
&H       SETA  &G                                               SA55132
.DSG300  AIF   (K'&SYSLIST(&M,&H) LT 3).DSG340  TOO SHORT TO BE PIC
&A(3)    SETA  0                       SET DIGIT COUNT TO ZERO
&A(4)    SETA  K'&SYSLIST(&M,&H)-2     SET CHARACTER COUNT
&I       SETA  1                       POINT TO FIRST CHARACTER
         AIF   ('&SYSLIST(&M,&H)'(1,1) NE '''').DSG340 NOT APOS'PHE
&A(1)    SETA  2*(K'&SYSLIST(&M,&H)-2)/3  DIGIT COUNT ESTIMATE
&FA(4)   SETA  &PIA(6)      SAVE LOC CTR
         IDFASM A
&PB(1)   SETB  1                       '9' -- ALWAYS PERMITTED
&PB(2)   SETB  1                       'Y' -- ALWAYS PERMITTED
&PB(3)   SETB  1                       'Z' -- PERMITTED AS INIT CHAR
&PB(4)   SETB  1                       '*' -- PERMITTED AS INIT CHAR
&PB(5)   SETB  1                       '$' -- PERMITTED AS INIT CHAR
&PB(6)   SETB  (NOT &PIB(23))          '+' -- OKAY IF NOT KATAKANA
&PB(7)   SETB  1                       '-' -- PERMITTED AS INIT CHAR
&PB(8)   SETB  (NOT &PIB(23))          'S' -- OKAY IF NOT KATAKANA
&PB(9)   SETB  1                        'B' -- ALWAYS PERMITTED
&PB(10)  SETB  1                        ',' -- ALWAYS PERMITTED
&PB(11)  SETB  (NOT &PIB(23))          '/' -- OKAY IF NOT KATAKANA
&PB(12)  SETB  1                        '.' -- ALWAYS PERMITTED
&PB(13)  SETB  0                       'V' -- NOT YET PERMITTED
&PB(14)  SETB  0                       'C' -- NOT YET PERMITTED
&PB(15)  SETB  0                       'D' -- NOT YET PERMITTED
&PB(16)  SETB  0                       '$' -- NOT YET PERMITTED
&PB(17)  SETB  0                       '+' -- NOT YET PERMITTED
&PB(18)  SETB  0                       '-' -- NOT YET PERMITTED
&PB(19)  SETB  0                       'S' -- NOT YET PERMITTED
&I       SETA  2
&C(1)    SETC  '&SYSLIST(&M,&H)'(&I,1) OBTAIN NEXT CHARACTER
&P       SETA  1
.DSG301  AIF   ('&C(1)' EQ '9YZ*$+-SB,/.'(&P,1) AND &PB(&P)).DSG302
&P       SETA  &P+1                    BUMP INDEX TO ALLOWED STRING
         AIF   (&P LE 12).DSG301
         AGO   .DSG341                 INVALID FIRST CHARACTER
.DSG302  ANOP  ,                       VALID FIRST CHAR FOUND
&C(1)    SETC  '355222254222'(&P,1)     TRANSLATE TO
&C(2)    SETC  '99AA4BD32CFE'(&P,1)     INTERNAL CODE
         IDFASM C
&PB(5)   SETB  0                       '$' -- NO LONGER PERMITTED
&PB(6)   SETB  0                       '+' -- NO LONGER PERMITTED
&PB(7)   SETB  0                       '-' -- NO LONGER PERMITTED
&PB(8)   SETB  0                       'S' -- NO LONGER PERMITTED
&PB(9)   SETB  1                       'B' -- INSERTION CHARACTER
&PB(10)  SETB  1                       ',' -- INSERTION CHARACTER
&PB(11)  SETB  (NOT &PIB(23))          '/' -- OKAY IF NOT KATAKANA
&PB(12)  SETB  1                       '.' -- INSERTION CHARACTER
&PB(13)  SETB  1                       'V' -- STOP ZERO SUPP. CHAR.
&PB(14)  SETB  1                       'C' -- INITIAL LETTER OF 'CR'
&PB(15)  SETB  1                       'D' -- INITIAL LETTER OF 'DB'
&PB(16)  SETB  1                       '$' -- TERMINAL CHARACTER
&PB(17)  SETB  (NOT &PIB(23))          '+' -- OKAY IF NOT KATAKANA
&PB(18)  SETB  1                       '-' -- TERMINAL CHARACTER
&PB(19)  SETB  (NOT &PIB(23))          'S' -- OKAY IF NOT KATAKANA
         AIF   (&P GT 4).DSG310        SEARCH SECOND STRING
&PB(3)   SETB  (&P EQ 3)               'Z' -- PROHIBITED UNLESS FIRST
&PB(4)   SETB  (&P EQ 4)               '*' -- PROHIBITED UNLESS FIRST
&A(3)    SETA  1                        FLAG OCCURRENCE OF FIRST DIGIT
         AGO   .DSG320
.DSG310  ANOP
&PB(&P)  SETB  1                       ALLOW REPITITION OF FIRST CHAR
&I       SETA  3                       ADVANCE PTR TO PICTURE SUBOP
         AIF   (&I GT K'&SYSLIST(&M,&H)-1).DSG343  TEST END OF SCAN
&C(1)    SETC  '&SYSLIST(&M,&H)'(&I,1) OBTAIN NEXT CHARACTER
&P       SETA  1
.DSG311  AIF   ('&C(1)' EQ '9YZ*$+-SB,/.'(&P,1) AND &PB(&P)).DSG312
&P       SETA  &P+1                    BUMP INDEX TO ALLOWED STRING
         AIF   (&P LE 12).DSG311
         AGO   .DSG341                 INVALID SECOND CHARACTER
.DSG312  ANOP
&C(1)    SETC  '355222254222'(&P,1)     TRANSLATE TO
&C(2)    SETC  '99AA4BD32CFE'(&P,1)     INTERNAL CODE
         IDFASM C
&PB(3)   SETB  0                       'Z' -- NO LONGER PERMITTED
&PB(4)   SETB  0                       '*' -- NO LONGER PERMITTED
&PB(5)   SETB  0                       '$' -- NO LONGER PERMITTED
&PB(6)   SETB  0                       '+' -- NO LONGER PERMITTED
&PB(7)   SETB  0                       '-' -- NO LONGER PERMITTED
&PB(8)   SETB  0                       'S' -- NO LONGER PERMITTED
&PB(&P)  SETB  1             UNLESS, OF COURSE, FOUND IN STRING
         AIF   (&P GT 8).DSG320         NOT A DIGIT
&A(3)    SETA  1                        FLAG OCCURRENCE OF FIRST DIGIT
         AIF   (&P LE 4).DSG320         NOT A TERMINAL CHARACTER
&PB(&P+11) SETB 0                      ONE TERMINAL CHAR NOW ILLEGAL
.DSG320  ANOP
&I       SETA  &I+1
         AIF   (&I GT K'&SYSLIST(&M,&H)-1).DSG343
&C(1)    SETC  '&SYSLIST(&M,&H)'(&I,1) OBTAIN NEXT CHARACTER
&P       SETA  1
.DSG321  AIF   ('&C(1)' EQ '9YZ*$+-SB,/.VCD$+-S'(&P,1) AND             X
               &PB(&P)).DSG322         FIND INTERMEDIATE CHAR
&P       SETA  &P+1                    BUMP INDEX TO ALLOWED STRING
         AIF   (&P LE 19).DSG321
         AGO   .DSG341                 INVALID INTERMEDIATE CHARACTER
.DSG322  AIF   (&P GT 8).DSG324        NON-DIGIT CHARACTER
&A(3)    SETA  &A(3)+1                 INCREMENT DIGIT COUNT
         AIF   (&PB(13)).DSG323        SKIP RESETTING OF BITS
         AIF   (NOT (&PB(1) OR &PB(2))).DSG323   IF NOT AFTER 'V'
.*                                     OR ALREADY DONE; OTHERWISE,
&PB(1)   SETB  (&P LE 2)               '9' -- PERMITTED IF '9' OR 'Y'
&PB(2)   SETB  (&P LE 2)               'Y' -- FOLLOWED THE 'V'
&PB(3)   SETB  0                       'Z' -- NO LONGER PERMITTED
&PB(4)   SETB  0                       '*' -- NO LONGER PERMITTED
&PB(5)   SETB  0                       '$' -- NO LONGER PERMITTED
&PB(6)   SETB  0                       '+' -- NO LONGER PERMITTED
&PB(7)   SETB  0                       '-' -- NO LONGER PERMITTED
&PB(8)   SETB  0                       'S' -- NO LONGER PERMITTED
&PB(&P)  SETB  1             UNLESS, OF COURSE, FOUND IN STRING
         AIF   (&P LE 2).DSG325        PREVIOUSLY ASSEMBLED 'V' OKAY
&PIA(6)  SETA  &FA(5)
         IDFASM (,4776)
&PIA(6)  SETA  &PIA(3)+&PIA(4)+&PIA(4)/480*18    SET LOC CTR TO HI BYTE
.DSG323  AIF   (&P GT 2).DSG325        IF NOT '9' OR 'Y', THEN ...
         AIF   (NOT (&PB(3) OR &PB(4) OR &PB(5) OR &PB(6) OR &PB(7) OR X
               &PB(8))).DSG324         NO NEED TO INSURE THAT ....
&PB(3)   SETB  0                       'Z' -- NO LONGER PERMITTED
&PB(4)   SETB  0                       '*' -- NO LONGER PERMITTED
&PB(5)   SETB  0                       '$' -- NO LONGER PERMITTED
&PB(6)   SETB  0                       '+' -- NO LONGER PERMITTED
&PB(7)   SETB  0                       '-' -- NO LONGER PERMITTED
&PB(8)   SETB  0                       'S' -- NO LONGER PERMITTED
.DSG324  AIF   (&P LT 13).DSG325       INSERTION OR DIGIT
         AIF   (&P GT 13).DSG326       TERMINAL CHARACTER
&A(4)    SETA  &A(4)-1  DECREMENT FOR V
&FA(5)   SETA  &PIA(6)
&PB(13)  SETB  0                       BUT PROHIBIT ITS REAPPEARANCE
.DSG325  ANOP  ,                       ASSEMBLE NEXT CHARACTER
&C(1)    SETC  '3552222522225'(&P,1)   TRANSLATE TO
&C(2)    SETC  '99AA4BD30CFE6'(&P,1)   ASCII
         IDFASM C
         AGO   .DSG320
.DSG326  ANOP  ,                       SET UP FOR TERMINAL CHARACTERS
&P       SETA  &P-11
.DSG330  ANOP  ,                       ASSEMBLE TERMINAL CHARACTER
&PB(1)   SETB  (&P EQ 3)               'R' -- ALLOWED IF PREVIOUS 'C'
&PB(2)   SETB  (&P EQ 4)               'B' -- ALLOWED IF PREVIOUS 'D'
&C(1)    SETC  '54442225'(&P,1)        \RANSLATE TO
&C(2)    SETC  '22344BD3'(&P,1)        ASCII
         IDFASM C
&I       SETA  &I+1                    ADVANCE PTR
.*                                     TEST FOR NORMAL TERMINATION
         AIF   (&I GT K'&SYSLIST(&M,&H)-1 AND NOT (&PB(1) OR           X
               &PB(2))).DSG343  DONE IF SCAN END & NOT C OR D
         AIF   (&I GT K'&SYSLIST(&M,&H)-1).DSG342 CR/DB ERROR
&C(1)    SETC  '&SYSLIST(&M,&H)'(&I,1) OBTAIN NEXT CHARACTER
&P       SETA  1
.DSG331  AIF   ('&C(1)' EQ 'RB'(&P,1) AND &PB(&P)).DSG330
&P       SETA  &P+1                    BUMP INDEX TO ALLOWED STRING
         AIF   (&P LE 2).DSG331
         AGO   .DSG342                 INVALID FINAL CHARACTER
.DSG340  ANOP
&PIB(1)  SETB  1
         IDFMSG3 569
&PIB(15) SETB  1
&B(2)    SETB  0                       INDICATE NO PICTURE
&H       SETA  &A(2)                   RESTORE POINTER TO SUBOPS
         AGO   .DSG21
.DSG341  ANOP
&PIB(1)  SETB  1
         IDFMSG3 570
&PIB(15) SETB  1
&B(2)    SETB  0                       INDICATE NO PICTURE
&H       SETA  &A(2)                   RESTORE POINTER TO SUBOPS
         AGO   .DSG21
.DSG342  ANOP
&PIB(1)  SETB  1
         IDFMSG3 571
&PIB(15) SETB  1
&B(2)    SETB  0                       INDICATE NO PICTURE
&H       SETA  &A(2)                   RESTORE POINTER TO SUBOPS
         AGO   .DSG21
.DSG343  ANOP  , HERE TO TERMINATE PICTURE BYTES
&PIB(1)  SETB  (&A(3) LE 0)             MUST HAVE AT LEAST ONE DIGIT
         AIF   (NOT &PIB(1)).DSG343A
         IDFMSG2 200                    INVALID PICTURE
&PIB(15) SETB  1                        REMEMBER ERROR
         AGO   .DSG11                   BACK FOR NEXT SINK
.DSG343A IDFASM (,477F)                 PICTURE DELIMITER
         AIF   (&A(3) EQ 2*(K'&SYSLIST(&M,&H)-2)/3).DSG344
&PIA(6)  SETA  &FA(4)
&A(1)    SETA  &A(3)
         IDFASM A
.DSG344  AIF   (NOT &FB(1) AND NOT &FB(2) AND &FB(3)).DSG346
&PIB(1)  SETB  1
         IDFMSG3 525  KIND SET TO N BY PICTURE
&FB(1)   SETB  0
&FB(2)   SETB  0
&FB(3)   SETB  1
&A(1)    SETA  64*&FB(1)+32*&FB(2)+16*&FB(3)+8*&FB(4)+4*&FB(5)+2*&FB(6)X
               +&FB(7)
&PIA(6)  SETA  &FA(1)                  SET LOCATION TO DATA TYPE BYTE
         IDFASM A
.DSG346  AIF   (&CTA(6) GT 0 OR &CTA(6) GT &CTA(7) AND &FB(12)).DSG3X
&PIA(6)  SETA  &FA(1)+2+(&FA(1)-&FA(1)/486*486)/478*18
&A(1)    SETA  &A(3)
         IDFASM A
&CTA(6)  SETA  &A(4)
.DSG3X   ANOP
&H       SETA  &A(2)                   RESTORE POINTER TO SUBOPS
         AIF   (&B(3)).DSG41
         AIF   (&B(4)).DSG44
.*********************************************************************
.*                                                                    *
.*                  DATA SINK GROUP ASSEMBLY PART IV                  *
.*                                                                    *
.*********************************************************************
.*             PART IV UPDATES THE BUFA AND BUFB ARRAYS FOR
.*             BUFFER SINKS, THE PRTA ARRAY FOR PRINT SINKS, CORRECTS
.*             THE DATA TYPE AND FUNCTION BYTES AS NECESSARY, AND
.*             COMPUTES THE FINAL DATA SINK BYTE.
.DSG40   AIF   (&N GT 6 OR &H GT 6).DSG4X  TEMPORARY ***
&M       SETA  4                       POINT TO SINK OPND
&PIB(1)  SETB  1
&MB(8)   SETB  1  SUPPRESS HEADING
         IDFMSG1 123                   IDENTIFY SINK
&PIB(1)  SETB  (&A(4) LT &A(5) OR &A(4) GT &A(6))
         IDFMSG3 572
&PIB(15) SETB  (&PIB(15) OR &PIB(1))
         AIF   (&PIB(1)).DSG11
&PIB(1)  SETB  1
         IDFMSG3 573
&PIB(1)  SETB  (&DSKA(&K) LT &BUFA(&J-1))
&PIB(1)  SETB  (&DSKA(&K) LT &BUFA(&J-1) AND NOT ( &DSKB1(175)         X
               OR &DSKB1(200)))                                  FSJM
         IDFMSG3 574
&BUFA(&J-1) SETA &DSKA(&K)+&A(4)       UPDATE NEXT SINK POSITION
&J       SETA  &J/3                    POINT TO BUFB ARRAY
&PIB(1)  SETB  (NOT &BUFB(&J+1) AND &PIB(10))
         IDFMSG1 132
&BUFB(&J+14) SETB (&BUFB(&J+1) AND &BUFB(&J+14) OR NOT &BUFB(&J+1)     X
               AND &PIB(10))
&BUFB(&J+27) SETB (&BUFB(&J+1) AND &BUFB(&J+27))
&BUFB(&J+40) SETB 1
&BUFB(&J+1) SETB 1
&BUFB(1) SETB  1
&A(2)    SETA  &N                      SAVE VALUE OF SINK INDEX
         AGO   .DSG48                  REPORT SINK
.DSG41   AIF   (&F EQ 0).DSG44         NO PRINT SINK, OR ALREADY DONE
&A(2)    SETA  &N                      SAVE INDEX TO SINKS
&N       SETA  &F
&F       SETA  0                       SIGNAL COMPLETION OF PRINT SINK
&M       SETA  4  POINT TO SINK OP
&MB(8)   SETB  1  SUPPRESS HEADING
&PIB(1)  SETB  1
         IDFMSG1 123    REPORT PRT SINK
&CYB(2)  SETB  1                               SHOW PRT IN CYCLE
&A(6)    SETA  &DFA(27)                SET UPPER BOUNDARY
         AIF   (&DFA(19) LT &DFA(11)).DSG42
&A(6)    SETA  &DFA(19)                USE RIGHT BDY IF CODED
         AIF   (NOT (&FB(29) OR &FB(30) OR &FB(31)) OR &FB(5)).DSG42
&B(1)    SETB  (NOT &FB(29))           SET IF RIGHT JUSTIFICATION
&A(1)    SETA  &DFA(19)-&DFA(11)+1-&A(4)
&PIB(1)  SETB  (&PRTA(11) NE &DFA(11)+&A(1)/2+&B(1)*(&A(1)+1)/2)
         IDFMSG3 575
&PIB(15) SETB  (&PIB(15) OR &PIB(1))
         AIF   (&PIB(1)).DSG48A
.DSG42   ANOP
&PIB(1)  SETB  (&PRTA(11)+&A(4)-1 GT &A(6))
         IDFMSG3 576
&PIB(15) SETB  (&PIB(15) OR &PIB(1))
         AIF   (&PIB(1)).DSG48A
         AIF   (&DFA(19) GT &DFA(11)).DSG43
&DFA(19) SETA  &DFA(11)+&A(4)-1        UPDATE RIGHT BOUNDARY
.DSG43   ANOP
&PRTA(12) SETA &PRTA(11)+&A(4)
&PIB(1)  SETB 1
         IDFMSG 050  SELECTRIC II PRINT REGION
         AIF   (&B(3) AND NOT &FB(5)).DSG48
         AIF   (NOT &B(3)).DSG44
&FB(5)   SETB  0
&FB(7)   SETB  1
         AGO   .DSG45
.DSG44   AIF   (&G EQ 0).DSG49
&A(2)    SETA  &N                      SAVE INDEX TO SINKS
&N       SETA  &G
&G       SETA  0                       SIGNAL COMPLETION OF TMT SINK
&M       SETA  4                       POINT TO SINK OPND
&PIB(1)  SETB  1
&MB(8)   SETB  1   SUPPRESS HEADING
         IDFMSG1 123
&CTA(&N) SETA  &A(4)                    LOAD TMT SINK COUNT FOR MNOTE
         IDFMSG1 144  TMT DATA FORMAT
         AIF   (&B(4) AND NOT &FB(4)).DSG48
         AIF   (NOT &B(4)).DSG49
&FB(4)   SETB  0
&FB(7)   SETB  1
.DSG45   ANOP  ,                       FIX DATA TYPE AND FUNCTION BYTES
&PIA(6)  SETA  &FA(1)                  POINT TO LOCATION OF DATA TYPE
&A(1)    SETA  64*&FB(1)+32*&FB(2)+16*&FB(3)+8*&FB(4)+4*&FB(5)+2*&FB(6)-
               +&FB(7)                 SET UP FOR REASSEMBLY
         IDFASM A
         AIF   (&FB(17)).DSG48
&PIA(6)  SETA  &FA(2)
         AIF   (NOT &FB(6)).DSG47
&PIA(6)  SETA  &PIA(6)+2+(&PIA(6)-&PIA(6)/486*486)/478*18
.DSG47   ANOP
&FB(17)  SETB  1
&A(1)    SETA  64*&FB(15)+32*&FB(16)+16*&FB(17)
         IDFASM A
.DSG48   ANOP
&MB(8)   SETB  1   SUPPRESS HEADING
&M       SETA  5                       POINT TO FILL OPND
&PIB(1)  SETB  (&FB(31))
         IDFMSG1 124
&M       SETA  6                       POINT TO JUSTIFY OPND
&PIB(1)  SETB  (&FB(29) OR &FB(30) OR &FB(31))
         IDFMSG1 124
&M       SETA  7                       POINT TO UNDERLINE OPND
&PIB(1)  SETB  (&FB(33))
         IDFMSG1 124
&PIB(1)  SETB  (&FB(32))
         IDFMSG3 577
         AIF   (NOT &FB(32)).DSG48A
&K       SETA  5*&N                     SINK ARRAY INDEX
&PIB(1)  SETB  (&DSKB2(&K))             ZERO FILL
         IDFMSG3 556                    IGNORED
&PIB(1)  SETB  ((&DSKB2(&K+25) OR &DSKB2(&K+50)) AND (&DSKB1(&K+50) OR X
               &DSKB1(&K+75)))  NOT LEFT JUSTIFY, PICTURE, AND BUFFER
         IDFMSG3 558                    IGNORED
.DSG48A  ANOP
&N       SETA  &A(2)                   RESTORE PTR
&M       SETA  20                      RESTORE PTR TO PICTURE
         AIF   (&B(3) AND &B(5)).DSG44
         AGO   .DSG11
.DSG49   AIF   (NOT &B(9)).DSG4X       SKIP OVER REASSEMBLY
         AIF   (NOT &FB(22)).DSG4X     SKIP REASM IF EARLIER GUESS OKAY
&FB(22)  SETB  0                       SET OFF CHAINING BIT
&PIA(6)  SETA  &FA(3)                  POINT TO START OF DATA SINK GP
&A(1)    SETA  64*&FB(22)+32*&FB(23)+16*&FB(24)+8*&FB(25)+4*&FB(26)+2*&-
               FB(27)+&FB(28)
         IDFASM A
.DSG4X   ANOP
&MB(8)   SETB  1                        SHUT OFF HEADING
&PIB(1)  SETB  1                        ENABLE MESSAGES
&M       SETA  1                        MESSAGE INDEX FOR SOURCE
         IDFMSG1 126  SOURCE IS--
&PIB(1)  SETB  (&CTA(6) GT 0)
         IDFMSG3 578  SOURCE CC IS--
&M       SETA  &PIB(1)
&PIB(1)  SETB  (NOT &PIB(1))
         IDFMSG3 522  SOURCE LENGTH INADEQUATE
         AIF   (NOT &FB(14)).DSG4B      SKIP SELFCHK IF UNUSED
&M       SETA  3                        MESSAGE INDEX FOR SELFCHK
&PIB(1)  SETB  1
&MB(8)   SETB  1                  SHUT OFF HEADING                FSJW
         IDFMSG1 125  SELFCHK IS--
.DSG4B   ANOP
&DSCB(55) SETB (&FB(1))                 SET UP THE
&DSCB(60) SETB (&FB(2))                 ARRAY BITS
&DSCB(65) SETB (&FB(3))                 FOR MNOTE
&M       SETA  2
&PIB(1)  SETB  1
&MB(8)   SETB  1
         IDFMSG1 122  KIND IS--
.DSG4XA  ANOP  ,                                                  FSJW
         AIF   (NOT &B(20)).DSP8                                  FSJW
&PIB(1)  SETB (NOT &DSKB1(5) AND NOT &DSKB1(30) AND NOT &DSKB1(55) AND X
               NOT &DSKB1(80) AND NOT &DSKB1(105) AND NOT &DSKB1(130))
.**   THE PRECEEDING  TWO  CARDS WERE CHANGED TO FIX ASSEMBLY ERRORS
.**  IN DOS ASSEMBLER D 4/23/73
         AIF   (NOT &PIB(1)).DSP6A                                FSJW
         MNOTE *,'IDF476 SOURCE X1/X2 FORCES SINK OF PRT'         FSJW
         AGO   .DSP7                                              FSJW
.DSP6A   ANOP  ,                                                  FSJW
&PIB(1)  SETB  (&DSKB1(5) AND NOT &DSKB1(30) AND NOT &DSKB1(55) AND    X
               NOT &DSKB1(80) AND NOT &DSKB1(105) AND NOT &DSKB1(130))
.**  THE PRECEEDING TWO CARDS WERE CHANGED BECAUSE THEY CAUSED
.**      ASSEMBLY ERRORS IN DOS ASSEMBLER D   4/23/73    AJU
         AIF   (&PIB(1)).DSP7                                     FSJW
&PIB(1)  SETB  1                                                  FSJW
&M       SETA  4                                                  FSJW
         IDFMSG1 101                                              FSJW
         MNOTE *,'IDF476 SOURCE X1/X2 FORCES SINK OF PRT'         FSJW
.DSP7    ANOP  ,                                                  FSJW
&DSKB1(5)  SETB  1                                                FSJW
&N       SETA  1                                                  FSJW
         IDFMSG1 123         REPORT SINK                          FSJW
&DFA(19) SETA  &DFA(11)+2                                         FSJW
&PRTA(12) SETA &PRTA(11)+3                                        FSJW
         IDFMSG 050          SELECTRIC II MOTION                  FSJW
         IDFASM  (,467B)     GENERATE SOURCE=XN,SINK=PRT BYTES    FSJW
&A(1)    SETA  4*&B(19)                                           FSJW
         IDFASM A                                                 FSJW
         IDFASM (,4070)                                           FSJW
.DSP8    ANOP  ,                                                  FSJW
         AIF   (NOT &PIB(47)).DSP14                               FSJW
         IDFDSP 'AFTER DATA SINK PART 4',FB,PB
.DSP14   ANOP
.**********************************************************************
.*                                                                    *
.*                 SINK/DELIMIT ROUTINE                               *
.*                                                                    *
.**********************************************************************
         AIF   (NOT &PIB(43)).JM04                               FSJM
&J       SETA   1                                                FSJM
&PIA(6)  SETA  &PIA(3)+&PIA(4)+&PIA(4)/480*18                     FSJW
&A(1)    SETA  0                                                 FSJM
         IDFASM A                                                FSJM
         AIF   (NOT &PIB(44)).JM01                               FSJM
&A(1)    SETA  107                                               FSJM
         IDFASM A                                                FSJM
&A(1)    SETA  8+4*&B(24)                                        FSJM
         IDFASM A                                                FSJM
&A(1)    SETA  &NDXA(1)                                          FSJM
         IDFASM A                                                FSJM
.JM01    AIF   (&B(11)).JM02  GT 127                              FSJM
         AIF   ((&NDXA(1)+&NDXA(2)) LT 128).JM02                 FSJM
&B(11)   SETB   1   NEED BIT ON IN START BYTE ONE                FSJM
.JM02    ANOP  ,                                                 FSJM
&B(11)   SETB  (&B(11) AND NOT &PIB(44))                      ADX00923
&C(1)    SETC   '820101201605'(&J,2)                             FSJM
&A(1)    SETA   &C(1)                                            FSJM
         IDFASM  A                                               FSJM
         AIF   (&K EQ 11).JM03                                   FSJM
&J       SETA   &J+2                                             FSJM
         AIF   (&J LT 13).JM02                                   FSJM
.JM03    ANOP  ,                                                 FSJM
&A(1)    SETA  1*&B(11)+4*&PIB(44)-2*&B(24)                      FSJM
         IDFASM  A                                               FSJM
&PIB(1)  SETB  (NOT &PIB(44))                                 ADX00923
&A(1)    SETA  (&NDXA(1)+&NDXA(2)-&B(11)*128)*&PIB(1)         ADX00923
         IDFASM  A                                               FSJM
&A(1)    SETA  1                                                 FSJM
         IDFASM  A                                               FSJM
         AIF   (NOT &PIB(44)).JM04                               FSJM
&A(1)   SETA   0                                                 FSJM
         IDFASM  A                                               FSJM
&A(1)    SETA  107                                               FSJM
         IDFASM A                                                FSJM
&A(1)    SETA  8+4*&B(24)+1                                      FSJM
         IDFASM  A                                               FSJM
&A(1)    SETA  127                                            ADX00923
         IDFASM   A                                              FSJM
.**********************************************************************
.*                                                                    *
.*                 INDICATOR OPERAND(FDFIELD) - PART 2, BRANCH        *
.*                                                                    *
.**********************************************************************
.JM04    AIF   (NOT &PIB(39) OR &PIB(2)).INDF2X
&K       SETA  &QA4(1)                  GET FREEQ PTR             FSDB
         AIF   (&K GT 0).INDF21         FREEQ NOT EMPTY           FSDB
&PIB(1)  SETB  1                        ISSUE MNOTE               FSDB
         IDFMSG3 510                    TOO MANY BRANCHES         FSDB
&PIB(15) SETB  1                        SET ERROR BIT             FSDB
         AGO   .INDF2X                  EXIT RTN                  FSDB
.INDF21  ANOP  ,                                                  FSDB
&I       SETA  &QA1(1)                  GET ORGQ PTR              FSDB
&QA4(1)  SETA  &QA1(&K)/65536           UPDATE FREEQ PTR          FSDB
&QA1(&K) SETA  &I*65536                 CHAIN NEW TO FIRST        FSDB
&QA1(1)  SETA  &K                       MAKE NEW FIRST ON Q       FSDB
&I       SETA  &QA3(1)                  GET DESTQ PTR             FSDB
         AIF   (&I GT 0).INDF22         DESTQ NOT EMPTY           FSDB
&PIB(1)  SETB  1                        ISSUE MNOTES              FSDB
         IDFMSG 0                       SYSTEM ERROR              FSDB
         IDFMSG3 511                    DESTQ EMPTY               FSDB
&PIB(15) SETB  1                        SET ERROR BIT             FSDB
         AGO   .INDF2X                  EXIT RTN                  FSDB
.INDF22  ANOP  ,                                                  FSDB
.* GET CURRENT PATH/SEGMENT FROM 1ST DESTQ ENTRY                  FSDB
&QA1(&K) SETA  &QA1(&K)/65536*65536+(&QA1(&I)-&QA1(&I)/65536*65536)
.* SET LENGTH OF 13 AND SAVE LOCATION COUNTER                     FSDB
&J       SETA  13                                                FSDB
&QA2(&K) SETA  &J*65536+&PIA(3)+&PIA(4)+&PIA(4)/480*18           FSDB
.* SAVE CURRENT LINE AND COLUMN                                   FSDB
&QA4(&K) SETA  &PRTA(7)*256+&PRTA(12)                             FSDB
&QA3(&I) SETA  &QA3(&I)+65536           BUMP BRANCH CTR           FSDB
&QB1(&K) SETB  1                        INDICATE IMPLICIT TYPE    FSDB
&QB2(&K) SETB  (&PIA(1) EQ 4 AND NOT (&PIB(3) OR &PIB(44)))      FSJM
.INDF23  AIF   (&PRTA(11) GE &DFA(19)).INDF24    SCAN FOR TAB     FSDB
&PRTA(11) SETA &PRTA(11)+1              IMBEDDED IN FIELD AND     FSDB
&QB3(&K) SETB  (&PTAB(&PRTA(11)))       SET BIT IF ONE FOUND      FSDB
         AIF   (NOT &QB3(&K)).INDF23    NONE YET?                 FSDB
.INDF24  ANOP  ,                                                  FSDB
&PRTA(11) SETA &PRTA(12)                PSC EQUALS PEC            FSDB
&QB4(&K) SETB  (&PIB(5))                IN CYCLE STATE?           FSDB
&QB5(&K) SETB  (&PIB(8))                IN SUMMARY STATE?         FSDB
&PIA(6)  SETA  &PIA(3)+&PIA(4)+&PIA(4)/480*18 ASM LOC CTR TO HI   FSDB
.INDF25  ANOP  ,                                                  FSDB
         IDFASM (,4670)                                           FSDB
&J       SETA  &J-1                      DECREMENT LENGTH CTR    FSDB
         AIF   (&J GE 1).INDF25          FINISH ASM OF NO OPS    FSDB
&PIB(42) SETB  0                        RESET INVOKE IMPLICIT GOTOFSDB
&K       SETA  &QA2(1)                  GET TEMPQ PTR             FSDB
.INDF28  AIF   (&K LE 0).INDF2X         AT END OF TEMPQ?          FSDB
&QA2(1)  SETA  &QA1(&K)/65536           UPDATE TEMPQ PTR TO NEXT  FSDB
&PIA(6)  SETA  &QA2(&K)                 GO BACK TO BRANCH ADDR    FSDB
.* CALCULATE DISPLACEMENT FROM BRANCH POINT TO HIGHEST POINT      FSDB
&A(2)    SETA  &QA2(&K)+4+(&QA2(&K)-&QA2(&K)/486*486)/476*18      FSDB
&A(3)    SETA  &PIA(3)+&PIA(4)+&PIA(4)/480*18                     FSDB
&A(2)    SETA  &A(3)-&A(2)-(&A(3)/486-&A(2)/486)*18               FSDB
&A(2)    SETA  &A(2)/2                  PACKED BYTES DISPLACEMENT FSDB
&A(1)    SETA  &A(2)/234*2+(&A(2)-&A(2)/234*234)/128              FSDB
         IDFASM A                       ORG BACK TO ADDR NO OPS   FSDB
&A(2)    SETA  &A(2)-&A(2)/234*234      LO ORDER DISP TO          FSDB
&A(1)    SETA  &A(2)-&A(2)/128*128      BE ASSEMBLED              FSDB
         IDFASM A                                                 FSDB
&I       SETA  &QA2(1)                  GET UPDATED TEMPQ PTR     FSDB
         AIF   (&I LE 0).INDF31         END OF TEMPQ?             FSDB
         AIF   ('&QC(&I)' NE '&QC(&K)').INDF31 EQUAL NAME?        FSDB
&QA1(&K) SETA  &QA4(1)*65536            PLACE THIS ENTRY          FSDB
&QA4(1)  SETA  &K                       BACK ON FREEQ             FSDB
&QA2(1)  SETA  &QA1(&I)/65536           UPDATE TEMPQ PTR TO NEXT  FSDB
&K       SETA  &I                       SET UP K                  FSDB
         AGO   .INDF28                  GO RESOLVE ADDR           FSDB
.INDF31  ANOP  ,                                                  FSDB
&I       SETA  &QA3(1)                  GET DESTQ PTR             FSDB
         AIF   (&I GT 0).INDF32         DESTQ NOT EMPTY           FSDB
&PIB(1)  SETB  1                        ISSUE MNOTE               FSDB
         IDFMSG 0                       SYSTEM ERROR              FSDB
         IDFMSG3 511                    DESTQ EMPTY               FSDB
&PIB(15) SETB  1                        STOP ASM IF ERROR         FSDB
         AGO   .INDF2X                  EXIT RTN                  FSDB
.INDF32  ANOP  ,                                                  FSDB
&C(1)    SETC  '&QC(&K)'                PICK UP TARGET NAME       FSDB
.INDF33  ANOP  ,                                                  FSDB
&J       SETA  &I                       J FOLLOWS I               FSDB
&I       SETA  &QA1(&I)/65536           CHAIN TO NEXT DESTQ ENTRY FSDB
         AIF   (&I LE 0).INDF34         EMPTY OR END              FSDB
         AIF   ('&C(1)' NE '&QC(&I)').INDF33 NO SAVELOC YET       FSDB
&B(1)    SETB  (&PIB(5) NE &QB4(&I)) DO NOT ALLOW BRANCH BACK  A01301
.**             OUT OF THE CYCLE TO A SAVELOC'D LOCATION OR
.**             BACK INTO THE CYCLE AFTER THE CYCLE HAS ENDED  A01301
         AIF   (NOT &B(1)).INDF331                             A01301
&PIB(15) SETB  1                                               A01301
         MNOTE 8,'IDF791 INVALID BRANCH INTO CYCLE OR SUMMARY BLOCK'
.**                                                            A01301
.INDF331 ANOP  ,                                               A01301
&A(3)    SETA  &PRTA(7)  SAVE ORIGIN LINE
&A(4)    SETA  &PRTA(12)  AND COLUMN
&A(5)    SETA  &QA4(&I)/256  SAVE DESTINATION LINE
&A(6)    SETA  &QA4(&I)-&A(5)*256 AND COLUMN
&B(1)    SETB  (&A(6) GT &ECA(1))
&ECA(3)  SETA  &A(6)+&B(1)*(&ECA(1)-&A(6))
&ECA(4)  SETA  &ECA(3)
.SL3     AIF   (&PTAB(&ECA(3))).SL4
&B(1)    SETB  (&ECA(3) GE &A(6))
&ECA(3)  SETA  2*&A(6)-&ECA(3)-&B(1)
&ECA(4)  SETA  2*&A(6)-&ECA(3)
         AGO   .SL3
.SL4     ANOP
&PIB(1)  SETB  (&A(3) GT &A(5)) SCROLL ERROR
         IDFMSG3 505
&PIB(15) SETB  (&PIB(15) OR &PIB(1))
         AIF   (&PIB(1)).INDF2X                                  JEW
&PIA(6)  SETA  &PIA(3)+&PIA(4)+&PIA(4)/480*18
&N       SETA  &A(4)
         AIF   (&A(3)*256+&A(4) EQ &QA4(&I)).SL11
&B(1)    SETB  (&A(3) EQ &A(5))
&B(2)    SETB  (&A(3)+75 GT &A(5) OR &PIB(8) OR &PIB(5))
&B(3)    SETB  (&B(2) AND &N LT &ECA(3) AND &N LT &ECA(4) AND          C
               (&B(1) OR &N NE &DFA(2)))
&B(5)    SETB  ((&N LE &ECA(3) OR &N LE &ECA(4)) AND &N NE &DFA(2))
&B(6)    SETB  (&N GT &ECA(1) AND 2*&A(6) GT &ECA(1)+&N AND            C
               (&B(1) OR &A(6) LE &DFA(2)+127))
&B(4)    SETB  ((&B(5) OR &B(6)) AND &B(2) AND NOT &B(3) AND &N        C
               NE &A(6))
         IDFASM (,4770)
         AIF   (&B(4)).SL7
         AIF   (NOT &B(3)).SL8
&A(1)    SETA  32 TABS
.SL6     ANOP
&N       SETA  &N+1
&A(1)    SETA  &A(1)+&PTAB(&N)
         AIF   (&N NE &ECA(3) AND &A(1) NE 47).SL6
         IDFASM A
&A(4)    SETA  &N
         AIF   (&A(3)*256+&A(4) EQ &QA4(&I)).SL11
         IDFASM (,4770)
&A(1)    SETA 32
         AIF   (&N NE &ECA(3)).SL6
         AIF   (&A(3) NE &A(5)).SL8
.SL7     ANOP
&A(1)    SETA  (&A(6)-&N)*2
&A(1)    SETA  31-(&A(1)+31)/(&A(1)+30)*(15+&A(1)/2)+(&A(1)+3)/(&A(1)+2C
               )*(&A(1)-16)+(&A(1)-29)/(&A(1)-30)*(15-&A(1)/2)
&N       SETA  &N+&A(1)+&A(1)/16*2*(8-&A(1))
&A(4)    SETA  &N
         IDFASM A
         AIF   (&A(3)*256+&A(4) EQ &QA4(&I)).SL11
         IDFASM (,4770)
         AIF   (&N NE &A(6)).SL7
.SL8     ANOP
&B(1)    SETB  ((&N NE &ECA(3) OR &ECA(3) EQ &DFA(2)) AND (&N NE       C
               &A(6) OR &A(6) EQ &DFA(2)))
&A(1)    SETA  2*&A(5)-2*&A(3)
&A(1)    SETA  (&A(1)-27)/(&A(1)-28)*(15-&A(1)/2)+&A(1)/2+&B(1)*16+48
&N       SETA  &N+&B(1)*(&DFA(2)-&N)
&A(3)    SETA  &A(3)+&A(1)-&A(1)/16*16
         IDFASM A
         AIF   (&A(3) EQ &A(5) AND &N NE &DFA(2)).SL9
         AIF   (&A(3)*256+&A(4) EQ &QA4(&I)).SL11
         IDFASM (,4770)
         AIF   (&A(3) NE &A(5)).SL8
         AIF   (&N EQ &ECA(3)).SL7
&A(1)    SETA  32
         AGO   .SL6
.SL9     ANOP
         IDFASM (,4676)
&A(1)    SETA  &N-&DFA(2)
         IDFASM A
         AIF   (&N EQ &A(6)).SL11
         IDFASM (,4770)
         AGO   .SL7
.SL11    ANOP
         IDFASM (,4671) GEN BRANCH BYTE
&A(2)    SETA  &QA2(&I) GET LOCATION TO BRANCH TO
&A(1)    SETA  &PIA(6)+4+(&PIA(6)-&PIA(6)/486*486)/476*18
&A(2)    SETA  &A(1)-&A(2)-(&A(1)/486-&A(2)/486)*18
&A(2)    SETA  &A(2)/2
&A(1)    SETA  64+&A(2)/234*2+(&A(2)-&A(2)/234*234)/128
         IDFASM A
&A(2)    SETA  &A(2)-&A(2)/234*234
&A(1)    SETA  &A(2)-&A(2)/128*128
         IDFASM A
         AIF   (&QA3(&I) GT 255).SL12
&QA3(&I) SETA  &QA3(&I)-1
         AIF   (&QA3(&I) GT 0).SL12
&QA1(&J) SETA  &QA1(&J)-&QA1(&J)/65536*65536+&QA1(&I)/65536*65536
&QA1(&I) SETA  &QA1(&I)-&QA1(&I)/65536*65536+&QA4(1)*65536
&QA4(1)  SETA  &I
.SL12    ANOP
&A(5)    SETA  &QA1(&I)-&QA1(&I)/65536*65536
&A(6)    SETA  &A(5)-&A(5)/256*256
&A(5)    SETA  &A(5)/256
&PIB(1)  SETB  1
         IDFMSG 017  BRANCH TO PATH SEGMENT
&QA1(&K) SETA  &QA4(1)*65536            PUT RESOLVED ENTRY        FSDB
&QA4(1)  SETA  &K                       BACK ON FREEQ             FSDB
         AGO   .INDF36                                            FSDB
.INDF34  ANOP  ,                                                  FSDB
&J       SETA  0
&I       SETA  &QA1(1)  GET ORGIN Q PTR
.GT2     AIF   (&I EQ 0).GT3 IF NEW ENTRY WILL BE FIRST OR LAST, BRANCH
.* SCAN QUEUE FOR INSERTION POINT IN EXPLICIT REGION
         AIF   ('&QC(&I)' GE '&QC(&K)' AND NOT &QB1(&I)).GT3
&J       SETA  &I  SAVE PTR TO THIS ENTRY
&I       SETA  &QA1(&I)/65536  POINT AT NEXT CHAINED ENTRY
         AGO   .GT2  CONTINUE SCAN
.GT3     ANOP
&QA1(&K) SETA  &I*65536  SET CHAIN PTR IN NEW ENTRY
         AIF   (&J EQ 0).GT4 IS NEW ENTRY 1ST ON CHAIN?
.* UPDATE CHAIN PTR OF PREVIOUS ENTRY TO POINT TO NEW ENTRY
&QA1(&J) SETA  &QA1(&J)-&QA1(&J)/65536*65536+&K*65536
         AGO   .GT5
.GT4     ANOP
&QA1(1)  SETA  &K POINT ORIGIN Q PTR TO NEW ENTRY WHICH IS NOW 1ST
.GT5     ANOP
&I       SETA  &QA3(1) GET DESTINATION Q PTR
&PIB(1)  SETB  (&I EQ 0)
         AIF   (NOT &PIB(1)).I0365
         IDFMSG 0
         IDFMSG3 511
.I0365   ANOP ,
&PIB(15) SETB  (&PIB(15) OR &PIB(1))
         AIF   (&PIB(1)).INDF2X                                  JEW
.* GET PATH/SEGMENT FROM 1ST DESTQ ENTRY - PUT IN THIS ENTRY
&QA1(&K) SETA  &QA1(&K)/65536*65536+(&QA1(&I)-&QA1(&I)/65536*65536)
.* SET LENGTH OF 13 AND LOC CTR IN THIS ENTRY
&J       SETA  13
&QA2(&K) SETA  &J*65536+&PIA(3)+&PIA(4)+&PIA(4)/480*18
.*  SET LINE/COLUMN IN THIS ENTRY
&QA4(&K) SETA  &PRTA(7)*256+&PRTA(12)
&QA3(&I) SETA  &QA3(&I)+65536  BUMP NO. OF UNRESOLVED BRANCHES IN DESTQ
&PIB(10) SETB  1 INDICATE CONDITIONAL SEGMENT
&QB1(&K) SETB  0    ZERO THE
&QB2(&K) SETB  0
&QB3(&K) SETB  0      OF THIS ORIGIN
&QB4(&K) SETB  (&PIB(5)) IN CYCLE
&QB5(&K) SETB  (&PIB(8)) IN SUMMARY
&PIA(6)  SETA  &PIA(3)+&PIA(4)+&PIA(4)/480*18
.INDF35  ANOP  ,                                                  FSDB
         IDFASM (,4670)                                           FSDB
&J       SETA  &J-1                     DECREMENT LNG CTR         FSDB
         AIF   (&J GE 1).INDF35                                   FSDB
.INDF36  ANOP  ,                                                  FSDB
&K       SETA  &QA2(1)                  GET TEMPQ PTR             FSDB
         AGO   .INDF28                  GO RESOLVE ADDR           FSDB
.INDF2X  ANOP                                                     FSDB
         AIF   (NOT(&PIB(47) AND &PIB(39))).INDF2Y                FSDB
         IDFDSP 'AFTER IND PART 2',QUEUE                          FSDB
.INDF2Y  ANOP  ,                                                  FSDB
         AIF   (NOT &PIB(48)).TX
         MNOTE *,'IDF100 IN TRACE MODE LEAVING IDFIN08'
.TX      ANOP
         MEND
