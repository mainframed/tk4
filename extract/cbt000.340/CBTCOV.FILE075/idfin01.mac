         MACRO
         IDFIN01
         COPY IDFGBL
         AIF   (NOT &PIB(48)).TR
         MNOTE *,'IDF100 IN TRACE MODE ENTERING IDFIN01'
.TR      ANOP
.**********************************************************************
.*
.*                           MESSAGE KEYWORD PROCESSOR
.*
.**********************************************************************
         AIF   (&PIA(1) NE 1 OR &PIB(3)).ES0 SKIP IF CTRL OR NOT FORM
&M       SETA  23                  INDEX TO MESSAGE PARAMETER
&PIB(1)  SETB  (&PIB(2) AND &PIA(10) NE &M AND N'&SYSLIST(&M) GE 1)
.* MESSAGE OPERAND SPECIFIED AND CONTINUATION OF SOME OTHER OPERAND IS
         AIF   (NOT &PIB(1)).I0038
         IDFMSG1 100               AN INVALID CONTINUATION
.I0038   AIF   (&PIB(2) AND &PIA(10) NE &M).MSGX IF CONTINUATION OF
.*                                 SOME OTHER OPERAND, QUIT
&PIB(1)  SETB  (&PIB(2) AND N'&SYSLIST(&M) LT 1) IF MESSAGE WAS TO BE
.* CONTINUED, BUT NO MESSAGE KEYWORD SPECIFIED, THEN
         AIF   (NOT &PIB(1)).I0039
&PIB(15) SETB  1                   SET INVALID INDICATOR
         IDFMSG1 102               EXPECTED CONTINUATION NOT FOUND
.I0039   ANOP ,
&PIB(2)  SETB  (&PIB(2) AND N'&SYSLIST(&M) GE 1) CLEAR CONTINUATION
         AIF   (N'&SYSLIST(&M) LT 1).MSGX IF NO MSG SPECIFIED, QUIT
&N       SETA  0                       INDEX TO SUBOPS
         AIF   (&PIB(2)).MSG20         SKIP INITIALIZATION
&B(7)    SETB  0                       NO TABS YET IN MSG
&B(6)    SETB  0                       NO LINEFEED OR NEWLINE YET
&PIA(10) SETA  &M                      PREPARE FOR CONTINUATION
.MSG20   ANOP  ,                   START OF MSG SUBOP LOOP
&N       SETA  &N+1                BUMP SUBOP INDEX TO NEXT SUBOP
         AIF   (&N GT N'&SYSLIST(&M)).MSGX QUIT IF LAST SUBOP DONE
         AIF   (T'&SYSLIST(&M,&N) EQ 'O').MSG20   IF SUBOP MISSING
.*                                 IGNORE IT, GO DO NEXT SUBOP
&PIB(2)  SETB  ('&SYSLIST(&M,&N)' EQ 'C' AND &N EQ N'&SYSLIST(&M))
&PIB(2)  SETB  (&PIB(2) AND &N GT 1)
         AIF   (&PIB(2)).MSGX          CONTINUATION NOW IF EFFECT
         AIF   (K'&SYSLIST(&M,&N) LT 2).MSG100 TOO SHORT TO BE GOOD
         AIF   ('&SYSLIST(&M,&N)'(1,1) EQ '''').MSG120
&J       SETA  1                   DEFAULT REPEAT COUNTER
         AIF   ('&SYSLIST(&M,&N)'(1,2) EQ 'CR' AND                     *
               K'&SYSLIST(&M,&N) EQ 2).MSG180 DO CARRIAGE RETURN
         AIF   (K'&SYSLIST(&M,&N) EQ 2).MSG80  USE DEFAULT COUNTER
         AIF   ('&SYSLIST(&M,&N)'(3,1) NE '(' OR                       *
               '&SYSLIST(&M,&N)'(K'&SYSLIST(&M,&N),1) NE ')').MSG100
&I       SETA  3                   SET INDEX OF CONTROL OPERAND TO (
&C(1)    SETC  '0000000'           INITIALIZE CHARACTER ACCUMULATOR
.MSG40   ANOP  ,                   START OF LOOP,GETTING REPEAT COUNTER
&I       SETA  &I+1                LOOK AT NEXT CHAR OF REPEAT COUNTER
&C(2)    SETC  '&SYSLIST(&M,&N)'(&I,1) GET A CHARACTER
         AIF   ('&C(2)'(1,1) EQ ')').MSG60  GOT THE RIGHT PAREN
         AIF   ('&C(2)' LT '0' OR '&C(2)' GT '9').MSG100 IS CHAR NUMER
         AIF   ('&C(1)'(1,1) NE '0').MSG100 ACCUMULATOR HAVE ROOM
&C(1)    SETC  '&C(1)'(2,6).'&C(2)' INSERT NUMERAL INTO ACCUMULATOR
         AGO   .MSG40              GO GET NEXT CHAR OF REPEAT COUNTER
.MSG60   ANOP  ,                   REPEAT COUNTER ALL IN ACCUMULATOR
&J       SETA  &C(1)               GET REPEAT COUNTER ALGEBRAIC
.MSG80   ANOP  ,                   J IS REPEAT COUNTER
         AIF   ('&SYSLIST(&M,&N)'(1,2) EQ 'NL').MSG160
         AIF   ('&SYSLIST(&M,&N)'(1,2) EQ 'LF').MSG140
         AIF   ('&SYSLIST(&M,&N)'(1,2) EQ 'BS').MSG220
         AIF   ('&SYSLIST(&M,&N)'(1,2) EQ 'HT').MSG240
         AIF   ('&SYSLIST(&M,&N)'(1,2) EQ 'SP').MSG200
.MSG100  ANOP  ,                   DO INVALID MESSAGE
&PIB(1)  SETB  1                   ACTIVATE IDFMSG ROUTINE
&PIB(15) SETB  1                   SET INVALID INDICATOR
         IDFMSG2 200               MESSAGE SUBOP (N) INVALID
         AGO   .MSG20              GO DO NEXT SUBOP
.MSG120  ANOP  ,                   SUBOP IS CHAR STRING STARTING WITH '
&TB(3)   SETB  0  SET BITS TO
&TB(4)   SETB  0  ALLOW ANY
&TB(5)   SETB  0   CHARACTERS
&I       SETA  2                   START WITH CHAR BEYOND 1ST QUOTE
         AIF   (&PIB(23)).MSG130
         IDFTR &SYSLIST(&M,&N)     GENERATE TRANSLATED CHAR STREAM
         AGO   .MSG135
.MSG130  IDFTRK &SYSLIST(&M,&N)
.MSG135  ANOP
&PIB(1)  SETB  (&TB(4))
&PIB(15) SETB  (&PIB(15) OR &PIB(1))
         AIF   (NOT &PIB(1)).I0041
         IDFMSG3 500
.I0041   ANOP ,
&PIB(1)  SETB  (&TB(6))
         AIF   (NOT &PIB(1)).I0042
         IDFMSG3 501
.I0042   ANOP ,
&PIB(1)  SETB  (&TB(7))
         AIF   (NOT &PIB(1)).I0043
         IDFMSG3 502
.I0043   ANOP ,
&PIB(1)  SETB  (&TB(8))
         AIF   (NOT &PIB(1)).MSG20
         IDFMSG3 503
         AGO   .MSG20              GO DO NEXT SUBOP
.MSG140  ANOP  ,                   LINE FEED REQUESTED
         AIF   (&J LT 1).MSG100    COUNT TOO SMALL
&PIB(1)  SETB  (NOT &B(6))         DO MSG ON FIRST TIME ONLY
&B(6)    SETB  1                   SET 1ST TIME SWITCH
         AIF   (NOT &PIB(1)).I0045
         IDFMSG 037                MESSAGE USED VERTICAL SPACING
.I0045   ANOP ,
&C(1)    SETC  '407A'              PASS LINE FEED TO BE GEN &J TIMES
         AGO   .MSG280
.MSG160  ANOP  ,                   NEW LINE REQUESTED
         AIF   (&J LT 1).MSG100    IS COUNT WITHIN LIMITS (POSITIVE)
&PIB(1)  SETB  (NOT &B(6))         DISPLAY MSG ONLY IF FIRST TIME
&B(6)    SETB  1                   SET FIRST TIME SWITCH FOR THIS MSG
         AIF   (NOT &PIB(1)).I0046
         IDFMSG 037                MESSAGE USED VERTICAL SPACING
.I0046   ANOP ,
&C(1)    SETC  '4077'              PASS NEW LINE TO BE GEN &J TIMES
         AGO   .MSG280
.MSG180  ANOP  ,                   CARRIAGE RETURN FUNCTION
&C(1)    SETC  '404D'              PASS CARRIAGE RETURN TO BE GEN 1 TIM
         AGO   .MSG280
.MSG200  ANOP  ,                   FORWARD SPACE REQUESTED
&C(1)    SETC  '4270'              PASS SPACE CHAR TO BE GEN &J TIMES
         AGO   .MSG260
.MSG220  ANOP  ,                   BACK SPACE REQUESTED
&C(1)    SETC  '4078'              PASS BACK SPACE TO BE GEN &J TIMES
         AGO   .MSG260
.MSG240  ANOP  ,                   TAB REQUESTED
&PIB(1)  SETB  (NOT &B(7))         DISPLAY MSG ONLY IF FIRST TIME
&B(7)    SETB  1                   SET FIRST TIME SWITCH FOR THIS MSG
         AIF   (NOT &PIB(1)).I0047
         IDFMSG 038                MESSAGE USES HORIZONTAL TABS
.I0047   ANOP ,
&C(1)    SETC  '4079'              PASS TAB CHAR TO BE GEN &J TIMES
.MSG260  ANOP  ,                   SP,BS,HT MUST HAVE SAME LIMITS
&A(5)    SETA  1                   SET MINIMUM
&A(6)    SETA  130                 SET MAXIMUM
&PIB(1)  SETB  (&J LT &A(5) OR &J GT &A(6)) IS REPEAT COUNT IN LIMITS
         AIF   (NOT &PIB(1)).MSG280
&PIB(15) SETB  1                   SET INVALID INDICATOR
         IDFMSG2 201 MESSAGE SUBOP NOT WITHIN LIMIT 1+130
         AGO   .MSG20              IF SUBOP INVALID, TRY NEXT SUBOP
.MSG280  AIF   (&PIA(6) EQ &PIA(7)).MSG281
         IDFASM
.MSG281  AIF   (&PIB(15)).MSG281A
         DC    X'&C(1)'            CARRIAGE CONTROL BYTE
.MSG281A ANOP
&PIA(7)  SETA  &PIA(6)+2
&PIA(6)  SETA  (&PIA(6)-&PIA(6)/486*486)/478*18+&PIA(6)+2
&MB(1)   SETB  (&PIA(7) GT &PIA(3)+&PIA(4))
&PIA(4)  SETA  &PIA(4)+&MB(1)*2
&J       SETA  &J-1                DECREMENT REPEAT COUNTER
         AIF   (&J GE 1).MSG280    DO ANOTHER CHAR IF COUNT IS NOT ZERO
         AGO   .MSG20              SUBOP DONE, DO NEXT SUBOP
.MSGX    ANOP  ,                   END OF MESSAGE PROCESSING
         AIF   (NOT &PIB(47)).DSP1
         IDFDSP 'AFTER MESSAGE OPERAND PROCESSOR'
.DSP1    ANOP
.**********************************************************************
.*
.*                            HTAB KEYWORD PROCESSOR
.*
.**********************************************************************
&M       SETA  24                  INDEX TO HTAB PARAMETER
&N       SETA  0                   INDEX TO HTAB SUBPARAMETERS
&B(1)    SETB  0                       RESET TAB GT 85 IND   AOS64507
&PIB(1)  SETB  (&PIB(2) AND &PIA(10) NE &M AND N'&SYSLIST(&M) GE 1)
.*                                 &HTAB OPERAND SPECIFIED AND
.*                                 CONTINUATION OF SOME OTHER OPERAND
         AIF   (NOT &PIB(1)).I0049
&PIB(15) SETB  1                   SET INVALID INDICATOR
         IDFMSG1 100               IS INVALID CONTINUATION
.I0049   ANOP ,
         AIF   (&PIB(2) AND &PIA(10) NE &M).PTX   IF CONTINUATION OF
.*                                 SOME OTHER OPERAND SPECIFIED, QUIT
&PIB(1)  SETB  (&PIB(2) AND N'&SYSLIST(&M) LT 1) IF HTAB WAS TO BE
.*                                 CONTINUED, BUT NO HTAB SPECIFIED,
         AIF   (NOT &PIB(1)).I0050
&PIB(15) SETB  1                   SET INVALID INDICATOR
         IDFMSG1 102               EXPECTED CONTINUATION NOT FOUND
.I0050   ANOP ,
&PIB(2)  SETB  (&PIB(2) AND N'&SYSLIST(&M) GE 1) CLEAR CONTINUATION
.*                                 BIT IF NO HTAB SPECIFIED
         AIF   (&PIB(1)).PT40      IF EXPECTED CON MISSING,NO CLEAR TAB
         AIF   (&PIB(2)).PT15      AVOID CLEAR TABS IF CONTINUATION
&PIA(10) SETA  &M                      PREPARE FOR CONTINUATION
&I       SETA  0                        ELSE CLEAR POINTER
.PT10    ANOP  , RETURN POINT FOR TAB CLEARING LOOP
&I       SETA  &I+1                     INCREMENT POINTER
&PTAB(&I) SETB 0                        CLEAR TAB FLAG BIT
         AIF   (&I LT 130).PT10         IF NOT DONE, GO BACK
.PT15    AIF   (N'&SYSLIST(&M) LT 1).PT40 IF NO HTAB SPECIFIED, QUIT
&A(6)    SETA  130                 SET MAX TO END OF FORM
         AIF   ((&DFA(2)+127) GT 130).PT20  WHICH IS SMALLER
&A(6)    SETA  (&DFA(2)+127)       RESET MAX TO LEFT MARGIN+127
.PT20    ANOP  ,
&A(5)    SETA  (&DFA(2)+1)         SET MINIMUM HTAB BOUNDARY
.PT30    ANOP  ,                   LOOP THRU HTAB SUBOPS
&N       SETA  &N+1                BUMP SUBOP POINTER TO NEXT SUBOP
         AIF   (&N GT N'&SYSLIST(&M)).PT40  QUIT IF LAST SUBOP DONE
&PIB(2)  SETB  ('&SYSLIST(&M,&N)' EQ 'C' AND &N EQ N'&SYSLIST(&M))
&PIB(2)  SETB  (&PIB(2) AND &N GT 1)
         AIF   (&PIB(2)).PTX           CONTINUATION NOW IF EFFECT
         AIF   (T'&SYSLIST(&M,&N) EQ 'O').PT30 IS THIS SUBOP MISSING
&PIB(1)  SETB  (T'&SYSLIST(&M,&N) NE 'N' OR                            *
               '&SYSLIST(&M,&N)'(1,1) EQ 'C')
.* FLAG HTAB SUBOP IF IT IS NOT NUMERIC OR DEFINED AS CHARACTER.
         AIF   (NOT &PIB(1)).I0051
&PIB(15) SETB  1                   SET INVALID INDICATOR
         IDFMSG2 200               HTAB SUBOP (N) INVALID
         AGO   .PT30               SUBOP BAD, SKIP FURTHER CHECKING
.I0051   ANOP ,
&PIB(1)  SETB  (&SYSLIST(&M,&N) LT &A(5) OR                            *
               &SYSLIST(&M,&N) GT &A(6)) IS SUBOP WITHIN LIMITS
         AIF   (NOT &PIB(1)).I0052
&PIB(15) SETB  1                   SET INVALID INDICATOR
         IDFMSG2 201               HTAB NOT WITHIN LIMITS
         AGO   .PT30               SUBOP BAD, SKIP IT, TRY NEXT ONE
.I0052   ANOP ,
&A(2)    SETA  &SYSLIST(&M,&N)     GET GOOD SUBOP VALUE
&PTAB(&A(2)) SETB 1                SET TAB STOP
&B(1)    SETB  (&B(1) OR (&A(2) GT 85)) IND SET IF A TAB     AOS64507
.**                                    IS GREATER THAN 85    AOS64507
         AGO   .PT30               GO DO NEXT SUBOPERAND OF HTAB
.PT40    ANOP  ,                   PTAB ARRAY NOW SET
&ECA(1)  SETA  &DFA(2)             START HIGHEST TAB TO LEFT MARGIN
&B(1)    SETB  ((&ECA(1) GT 85) OR &B(1))  SET INDICATOR     AOS64507
.**                            IF A TAB OR MRGSTOP IS GT 85  AOS64507
&DFA(23) SETA  85+&B(1)*45
&DFA(15) SETA  &DFA(23)
&K       SETA  0                   CLEAR COUNTER OF TABS
&A(5)    SETA  &DFA(2)             SET LEFT ONE OF TAB PAIR AT MARGIN
&ECA(2)  SETA  0                   CLEAR LEFT TAB VALUE
.* NEXT SECTION HAS THESE ASSIGNMENTS - &A(1) HAS SIZE OF DELTA
.* BETWEEN TABS, &N IS INDEX THRU PTAB(N) ARRAY, AND &M IS INDEX
.* THRU &C(M) ARRAY, USED IN MSG 003.
&N       SETA  &DFA(2)             PRESET PTAB INDEX TO LEFT MARGIN
&B(2)    SETB  0              CLEAR PTAB FIRST TIME SWITCH
.PT50    ANOP  ,                   START OF LOOP TO BEGIN A NEW MSG
&M       SETA  1                   SET INDEX TO START OF C(M) ARRAY
&C(1)    SETC  ' '                 CLEAR TAB STOP
&C(2)    SETC  ' '                   IDENTIFIERS AS
&C(3)    SETC  ' '                   USED IN MSG 003
&C(4)    SETC  ' '
&C(5)    SETC  ' '
.PT60    ANOP  ,                   START OF LOOP TO START SCAN FOR TAB
&A(1)    SETA  0                   CLEAR DELTA SIZE
.PT70    ANOP  ,                   START OF LOOP SCANNING FOR TAB
&N       SETA  &N+1                BUMP INDEX TO NEXT PTAB ENTRY
&A(1)    SETA  &A(1)+1             BUMP DELTA SIZE
         AIF   (&N GT 130).PT110   HAS END OF PTAB ARRAY BEEN SCANNED
         AIF   (NOT &PTAB(&N)).PT70 IS TAB TO BE SET,IF NO,KEEP LOOKING
         AIF   (&B(2)).PT80      IF NO 1ST TIME, SKIP '7F'
         AIF   (&PIA(6) EQ &PIA(7)).PT71
         IDFASM
.PT71    AIF   (&PIB(15)).PT71A
         DC    X'477F'             START TAB DEFINITION BYTES
.PT71A   ANOP
&PIA(7)  SETA  &PIA(6)+2
&PIA(6)  SETA  (&PIA(6)-&PIA(6)/486*486)/478*18+&PIA(6)+2
&MB(1)   SETB  (&PIA(7) GT &PIA(3)+&PIA(4))
&PIA(4)  SETA  &PIA(4)+&MB(1)*2
&B(2)    SETB  1              SET 1ST TIME
.PT80    IDFASM A                  SET TAB
&K       SETA  &K+1                BUMP COUNTER OF TABS
&ECA(1)  SETA  &N                  SAVE HIGHEST TAB SO FAR
&B(1)    SETB  (&ECA(1) GT 85)
&DFA(23) SETA  85+&B(1)*45
&DFA(15) SETA  &DFA(23)
&A(6)    SETA  &N                  SET RIGHT ONE OF TAB PAIR
         AIF   (&ECA(2) NE 0 OR (&A(6)-&A(5) LE 31)).PT90
&ECA(2)  SETA  &A(5)               SET LEFT TAB OF 2 SUCCESSIVE
.PT90    ANOP  ,                     TABS WHERE DELTA GT 31
&A(5)    SETA  &A(6)               RIGHT TAB BECOMES LEFT TAB
         AIF   (&M EQ 1).PT100     IS THIS FIRST TAB FOR THIS MSG
&C(&M)   SETC  ', &N'              NO, NOT FIRST, DISPLAY TAB
&M       SETA  &M+1                BUMP INDEX TO C ARRAY IN MSG
         AIF   (&M LT 6).PT60      IF MORE ROOM IN THIS MSG,DO NEXT DEL
&PIB(1)  SETB  1                   ACTIVATE MSG
         IDFMSG  003               DISPLAY TAB STOPS MSG
         AGO   .PT50               GO START A NEW MSG
.PT100   ANOP  ,                   FIRST TAB FOR THIS MSG
&C(&M)   SETC  '&N'                PUT FIRST TAB ID INTO MSG
&M       SETA  &M+1                BUMP TO NEXT TAB ID IN MSG
         AGO   .PT60               GO SET UP NEXT DELTA
.PT110   ANOP  ,                   PTAB ARRAY HAS BEEN SCANNED
&PIB(1)  SETB  ('&C(1)' NE ' ')    IF MSG PARTIALLY FILLED,
         AIF   (NOT &PIB(1)).I0054
         IDFMSG  003                 THEN DISPLAY REMAINING TABS
.I0054   ANOP ,
&PTAB(&DFA(2)) SETB 1              SET LEFT MARGIN AS FIRST TAB
         AIF   (&ECA(2) NE 0).PT120  BR IF LEFT TAB SET ALREADY
&ECA(2)  SETA  &ECA(1)             IF NOT,SET TO MAX TAB
.PT120   AIF   (&K LT 16).PT130    IF MORE THAN 15 TABS, SET
&ECA(2)  SETA  &DFA(2)               ECA(2) FROM LEFT MARGIN
.PT130   ANOP  ,                   IF NOT MORE THAN 15 TABS, LEAVE
.* ECA(2) AS LEFT OF 2 SUCCESSIVE TABS WHOSE DELTA GT 31.
         AIF   (&ECA(2) LT &ECA(1)).PTX MIN VALUE ALREADY SET
&ECA(2)  SETA  &ECA(1)             RESET NEW MINIMUM
.PTX     ANOP  ,                   END OF HTAB PROCESSING
         AIF   (NOT &PIB(47)).DSP2
         IDFDSP 'AFTER HTAB OPERAND PROCESSOR',PTAB
.DSP2    ANOP
.**********************************************************************
.*                                                                    *
.*                           BEGIN BYTE GENERATOR                     *
.*                                                                    *
.**********************************************************************
         AIF   (&PIB(2)).DF1  SKIP IF CONTINUATION
         IDFASM (,4070)                GENERATE BEGIN BYTE
.**********************************************************************
.*                                                                    *
.*                           INITIALIZATION                           *
.*                                                                    *
.**********************************************************************
&PRTA(1) SETA  0
&PRTA(2) SETA  0
&PRTA(3) SETA  0
&PRTA(4) SETA  0
&PRTA(5) SETA  0
&PRTA(7) SETA  1
&PRTA(11) SETA &DFA(2)
&PRTA(12) SETA &PRTA(11)
&PRTA(14) SETA 0
&PRTA(15) SETA 0
&DFA(1)  SETA  1
&DFA(4)  SETA  1
&DFA(12) SETA  66
&DFA(19) SETA  &DFA(2)-1
&DFA(20) SETA  66
&DSCB(21)  SETB  1
&DSCB(26) SETB 1
&A(1)    SETA  &BUFA(12)
&I       SETA  1
.I1      ANOP
&BUFA(&I) SETA 1
&I       SETA  &I+1
         AIF   (&I LT 39).I1
&BUFA(3) SETA  236
&BUFA(6) SETA  236
&BUFA(9)  SETA 96+96*&PIB(24)
&BUFA(12) SETA &A(1)
&BUFA(15)  SETA  236         SET IOB BUFFER TO MAX SIZE           FSJW
&BUFA(36) SETA 39
&BUFA(39) SETA 39
&I       SETA  4
.ILP     ANOP
&QA1(&I) SETA  (&I+1)*65536
&I       SETA  &I+1
         AIF   (&I LT 63).ILP
&QA4(1)  SETA  4
&QA3(1)  SETA  2   SET UP DEST Q PTR TO 1ST ENTRY
&QA1(2)  SETA  257     SET PATH 1, SEGMENT 1
&QA2(2)  SETA  0
&QA3(2)  SETA  0
&QA4(2)  SETA  0
&QB1(2)  SETB  0
&QB2(2)  SETB  0
&QB3(2)  SETB  0
&QB4(2)  SETB  0
&QB5(2)  SETB  0
         AIF   (&PIB(13)).J001                                    FSJM
&QA1(1)  SETA  3    SET UP ORG Q PTR TO 1ST ENTRY
&QA1(3)  SETA  257     SET PATH 1, SEGMENT 1
&QA4(3)  SETA  &PRTA(7)*256+&PRTA(11)  SET LINE 1 AND LEFT MRGN
&QB1(3)  SETB  1   SET IMPLICIT GOTO
&QB2(3)  SETB  0
&QB3(3)  SETB  0
&QB4(3)  SETB  0
&QB5(3)  SETB  0
&QA2(3)  SETA  10*65536+&PIA(6)  LNG & LOC CTR IN 1ST ORGQ ENTRY
.J001    ANOP  ,                                                  FSJM
&PIB(4)  SETB  1                       NORMAL MODE
&PIB(5)  SETB  0                       CYCLE MODE
&PIB(6)  SETB  0                       CYCLE LIMIT
&PIB(7)  SETB  0                       POST LIMIT
&PIB(8)  SETB  0                       SUMMARY BLOCK MODE
&PIB(9)  SETB  0                       DUMMY FIELD
&PIB(10) SETB  0                       CONDITIONAL
&PIB(11) SETB  0                       DEAD CODE
&PIB(27) SETB  0                   FDLOAD ENTERED              IR00271
&PIB(28) SETB  0                       END SEGMENT FUNCTION BIT
&PIB(29) SETB  0                       END PATH FUNCTION BIT
&PIB(30) SETB  1                       START SEGMENT BIT
&PIB(31) SETB  1                       START PATH BIT
&PIB(35) SETB  0                       END CONTROL FUNCTION BIT
&PIB(36) SETB  0                       CYCLE LIMIT FUNCTION BIT
&PIB(37) SETB  0                       SAVELOC FUNCTION BIT
&PIB(38) SETB  0                       CYCLE CREATE FUNCTION BIT
         AIF   (NOT &PIB(13)).ES0                                 FSJM
&K       SETA  0                                                  F2JM
.X001    ANOP  ,                                                  FSJM
&K       SETA  &K+1                                               FSJM
&C(1)    SETC  '60003745004452050005023244525445444424444'(&K,1) JMFS
&C(2)    SETC  '24C0E0124464000043024BA0EF400C19213B0DF45'(&K,1)  FSJM
         IDFASM C                                                 FSJM
         AIF   (&K LE 40).X001                                    FSJM
&K       SETA  1                                                  FSJM
.X002    ANOP  ,                                                  FSJM
&C(1)    SETC  '24444244442445244444444406'(&K,1)                 FSJM
&C(2)    SETC  '069C50CF140640031E35CC5408'(&K,1)                FSJM
         IDFASM C                                                 FSJM
&K       SETA  &K+1                                               FSJM
         AIF   (&K LE 26).X002                                    FSJM
.ES0     ANOP
.**********************************************************************
.*                                                                    *
.*                           QUEUE MANAGEMENT                         *
.*                                                                    *
.**********************************************************************
         AIF   (&PIA(1) EQ 1 AND NOT (&PIB(3) OR &PIB(2))).QMX
&M       SETA  11  POINT TO NAME OPERAND
         AIF   (T'&SYSLIST(&M) EQ 'O').QMX SKIP IF NO NAME CODED
&PIB(1)  SETB  (&PIB(2) AND (&PIA(1) EQ 4 OR &PIB(3)))
         AIF   (NOT &PIB(1)).I0055
         IDFMSG1 100 NAME IN CONTINUATION IGNORED
.I0055   ANOP ,
         AIF   (&PIB(2)).DF1
&SYSLIST(&M) EQU * *** TEST FOR DUPLICATE NAMES ***
&J       SETA  0  J FOLLOWS I BY ONE ENTRY
&I       SETA  &QA1(1)  GET ORGQ PTR
.** THE FOLLOWING SEVEN CARDS WERE USED TO CONCATENATE
.** BLANKS BECAUSE OF A PROBLEM WITH DOS/VS (IPK089)
.** -- SETC SYMBOL GREATER THAN 8 CHARACTERS.
         AIF   (K'&SYSLIST(&M) GE 8).QM01A
&A(1)    SETA  K'&SYSLIST(&M)
&A(2)    SETA  8-&A(1)
&C(1)    SETC  '&SYSLIST(&M)'(1,&A(1)).'       '(1,&A(2))
         AGO   .QM1
.QM01A   ANOP
&C(1)    SETC  '&SYSLIST(&M)'(1,8)
.QM1     AIF   (&I EQ 0).QM4 ORGQ EMPTY OR AT END OR
         AIF   ('&QC(&I)' GT '&C(1)' AND NOT &QB1(&I)).QM4 NO MATCH YET
&K       SETA  &J  K WILL POINT AT PRECEDING ENTRY WHEN HIT IS MADE
         AIF   ('&QC(&I)' EQ '&C(1)' AND NOT &QB1(&I)).QM2 HIT
&J       SETA  &I  SAVE POINTER TO THIS ENTRY AND
&I       SETA  &QA1(&I)/65536 UPDATE I TO NEXT ON CHAIN
         AGO   .QM1  CONTINUE SCAN
.QM2     ANOP
&B(2)    SETB  ((&PIB(5) OR &PIB(21)) AND NOT (&QB4(&I) OR &QB5(&I)))
&B(2)    SETB  (&B(2) OR ((&PIB(8) AND NOT &PIB(21)) AND NOT &QB5(&I)))
.**     SET B2 (ERROR) IF INVALID BRANCH INTO CYCLE OR SUMMARY A01301
         AIF   (NOT &B(2)).QM21     SKIP IF NOT IN ERROR      A01301
&PIB(15) SETB  1                     SET LEVEL 8 ERROR        A01301
         MNOTE 8,'IDF791 INVALID BRANCH INTO CYCLE OR SUMMARY' A01301
.QM21    ANOP ,                                               A01301
&PIB(11) SETB  0  NOT DEAD CODE
&QB1(&I) SETB  1 CHANGE TYPE FROM EXPLICIT TO IMPLICIT
.* INVOKE NEW PATH LOGIC IF QUEUED PATH NE CURRENT PATH OR PIB(31)
&PIB(31) SETB  (&QA1(&I)/256-&QA1(&I)/65536*256 NE &QA1(&QA3(1))/256-&QC
               A1(&QA3(1))/65536*256 OR &PIB(31))
.* INVOKE NEW SEGMENT LOGIC IF QUEUED SEGMENT NE CURRENT OR PIB(30)
&PIB(30) SETB  (&QA1(&I)-&QA1(&I)/65536*65536 NE &QA1(&QA3(1))-&QA1(&QAC
               3(1))/65536*65536 OR &PIB(30))
.QM2A    ANOP  ,
&J       SETA  &I  SAVE POINTER TO THIS ENTRY AND
&I       SETA  &QA1(&I)/65536 UPDATE I TO NEXT ENTRY ON CHAIN
         AIF   (&I EQ 0).QM3 AT END OF CHAIN OR
         AIF   ('&QC(&I)' GT '&C(1)').QM3 NO MORE MATCHES, END SCAN
.* CONTINUE SCAN UNTIL NO MORE EXACT MATCHES ARE FOUND
         AIF   ('&QC(&I)' EQ '&C(1)' AND NOT &B(2)).QM2 1/7/74 DX01301
.QM3     ANOP
         AIF   (&K EQ 0).QM4 IF HIT WAS ON 1ST ENTRY, DON'T RE-CHAIN
.* CHAIN LAST ENTRY OF GROUP JUST FOUND TO 1ST ENTRY IN QUEUE
&QA1(&J) SETA  &QA1(&J)-&QA1(&J)/65536*65536+65536*&QA1(1)
.* SET ORGQ PTR TO POINT AT 1ST ENTRY OF GROUP JUST FOUND
&QA1(1)  SETA  &QA1(&K)/65536
.* CHAIN OTHER EXPLICITS AROUND THIS GROUP
&QA1(&K) SETA  &QA1(&K)-&QA1(&K)/65536*65536+65536*&I
.QM4     ANOP
.QMX     ANOP
         AIF   (NOT &PIB(47)).DSP3
         IDFDSP 'AFTER QUEUE MANAGEMENT',QUEUE,PIB
.DSP3    ANOP
&PIB(30) SETB  (&PIB(7) AND NOT &PIB(11) OR &PIB(30)) START SEGMENT
&PIB(35) SETB  (&QA1(1) NE 0 AND &PIB(35)) END CTL IF ANY ORGQ ENTRY
         AIF   (NOT &PIB(35)).CY0
&PIB(35) SETB  (&PIB(35) AND &QB1(&QA1(1))) END CTL IF IMPLICIT
.**********************************************************************
.*                                                                    *
.*                  CYCLE - PART 4 (POST LIMIT)                       *
.*                                                                    *
.**********************************************************************
.CY0     AIF   (NOT &PIB(7) OR &PIB(2) OR &PIA(1) EQ 1).CY4XA
&C(1)    SETC   '99999999'    INITIALIZE NAME                     FSDB
&I       SETA  &QA1(1)        GET ORGQ PTR IN SCAN PTR
&J       SETA  &I             SAVE SCAN PTR
.*&B(1)  SETB  1      SET INPLICIT MODE
&B(2)    SETB  0     INITIALIZE HOLD MODE OFF
&A(1)    SETA  0              INITIALIZE BLOCK MAX LINE AND
&CYA(6)  SETA  0               MAX OF BLOCK MAX'S
.CY14    AIF   (&I EQ 0).CY4X ORGQ EMPTY OR LAST?
.*       AIF   (&B(1) AND NOT &QB1(&I)).CY18 NON-IMPLICIT FOUND?
.*       AIF   (&B(1)).CY16  IN IMPLICIT MODE?
.CY15    AIF   (NOT &QB4(&I)).CY20 THIS ENTRY NOT FROM A CYCLE?
         AIF   ('&C(1)' NE '&QC(&I)').CY19 NOT SAME NAME AS LAST?
.CY16    ANOP
&B(3)    SETB  (&QA4(&I)/256 GT &A(1)) THIS LINE GREATEST SO FAR?
&A(1)    SETA  &A(1)+&B(3)*(&QA4(&I)/256-&A(1)) SAVE MAX LINE
&C(1)    SETC  '&QC(&I)'  SAVE THIS ENTRIES NAME
.CY17    ANOP
&I       SETA  &QA1(&I)/65536 CHAIN TO NEXT ENTRY
         AGO   .CY14
.*.CY18  AIF   (&A(1) NE 0).CY19 WAS BLOCK SCAN DONE?
.*&B(2)  SETB  0    NO, RESET HOLD MODE
.*&B(1)  SETB  0     SET EXPLICIT MODE
.*       AGO   .CY15
.CY19    AIF   (&B(2)).CY21     HOLD MODE?
&J       SETA  &I            SAVE HEAD OF BLOCK PTR
&B(2)    SETB  1             SET HOLD MODE
         AGO   .CY16
.CY20    AIF   (NOT &B(2)).CY17 NOT HOLD MODE?
.CY21    ANOP
&QA4(&J) SETA  &QA4(&J)-&QA4(&J)/256*256+256*(&A(1)+&CYA(5)) RELO LINE
&J       SETA  &QA1(&J)/65536 CHAIN TO NEXT
         AIF   (&J NE &I).CY21  NOT AT END OF BLOCK?
&B(3)    SETB  (&A(1) GT &CYA(6)) THIS MAX GREATEST YET?
&CYA(6)  SETA  &CYA(6)+&B(3)*(&A(1)-&CYA(6)) SAVE GREATEST MAX
&A(1)    SETA  0             RE-INITIALIZE
&B(2)    SETB  0               VARIABLES
&B(1)    SETB  0
         AGO   .CY14
.CY4X    AIF   (&A(1) NE 0).CY19    NOT DONE?
         AIF   (NOT &PIB(47)).DSP4
         IDFDSP 'AFTER CYCLE PART 4',QUEUE
.DSP4    ANOP
&PRTA(7) SETA  &PRTA(7)+&CYA(5) END OF CYCLE LINE
&PIB(7)  SETB  0  RESET POST LIMIT STATE
.**********************************************************************
.*                                                                    *
.*                  CYCLE - PART 5 (END SUMMARY)                      *
.*                                                                    *
.**********************************************************************
.CY4XA   AIF   (NOT &PIB(25) OR &PIB(2) OR &PIA(1) EQ 1).CY5X
         AIF   (NOT &PIB(20)).CY11                   VARIABLE CYCLE
&PIB(20) SETB  0                                     VARIABLE CYCLE
&A(2)    SETA  0                                     VARIABLE CYCLE
         AGO   .CY12                                 VARIABLE CYCLE
.CY11    ANOP                                        VARIABLE CYCLE
&A(2)    SETA  &PRTA(7)-&CYA(2)/256 LINES IN CYCLE
&A(1)    SETA  &CYA(1)-&CYB(1)*&CYA(1) LINES SAVED AT BEGIN CYCLE
         AIF   (&A(1) EQ &A(2)).CY22 LINES CORRECT?
.CY12    ANOP                                        VARIABLE CYCLE
&PIA(6)  SETA  &CYA(4)+(&CYA(4)-&CYA(4)/486*486)/480*18
&A(1)    SETA  &A(2)/128 LINES HI-ORDER BYTE
         IDFASM A
&A(1)    SETA  &A(2)-&A(1)*128  LINES LO-ORDER BYTE
         IDFASM A
.CY22    ANOP
&I       SETA  &QA1(1)  ORGQ PTR
.CY23    AIF   (&I EQ 0).CY26  EMPTY OR END?
         AIF   (&QB4(&I) OR &QB5(&I)).CY24 CYCLE OR SUMMARY?
&I       SETA  &QA1(&I)/65536 CHAIN TO NEXT
         AGO   .CY23
.CY24    ANOP
&PIA(6)  SETA  &QA2(&I)-&QA2(&I)/65536*65536 QUEUED LOC CTR
         AIF   (NOT &QB2(&I)).CY25 NO EC BYTE NEEDED?
         IDFASM (,4070)  EC BYTE
&QA2(&I) SETA  &QA2(&I)-65536 DECREMENT LNG QUEUED BY 1
&QB2(&I) SETB  0 RESET SEL EC BYTE BIT
.CY25    ANOP
         IDFASM (,4675) END CYCLE BYTE
&QA2(&I) SETA  &QA2(&I)/65536*65536-65536+&PIA(6) NEW LNG & LOC CTR
&QA4(&I) SETA  256*(&CYA(5)+&CYA(6))+&DFA(2)
&QB4(&I) SETB  0 RESET CYCLE BIT
&QB5(&I) SETB  0  RESET SUMMARY BIT
&I       SETA  &QA1(&I)/65536 CHAIN TO NEXT
         AGO   .CY23
.CY26    ANOP
&PIB(4)  SETB  1  SET NORMAL MODE
&PIB(8)  SETB  0  RESET SUMMARY MODE
&PIB(25) SETB  0 RESET SUMMARY FUNCTION BIT
         AIF   (NOT &PIB(47)).DSP5
         IDFDSP 'AFTER CYCLE PART 5',QUEUE
.DSP5    ANOP
&PIB(1)  SETB  (&PIA(1) NE 1)
         IDFMSG3 504
.CY5X    ANOP
&PIB(9)  SETB  0
&PIB(21) SETB  0             RESET ALLOW BRANCH INTO START OF SUMMARY
.**                       BLOCK.                                A01301
.**********************************************************************
.*                                                                    *
.*                  SAVELOC - PART 1 (OPERAND CHECK)                  *
.*                                                                    *
.**********************************************************************
&M       SETA  10  POINT TO SAVELOC OP
         AIF   (T'&SYSLIST(&M) EQ 'O' OR &PIB(8)).SL1X OMIT OR SUMMARY
         AIF   (&PIB(2)).SL1X CONTINUATION?
         AIF   (T'&SYSLIST(&M) NE 'N' AND '&SYSLIST(&M)' NE 'NO' AND   C
               '&SYSLIST(&M)' NE 'YES' OR '&SYSLIST(&M)' EQ 'NO').SL1X
         AIF   ('&SYSLIST(&M)'(1,1) EQ 'C').SL1X CHAR SEL-DEFIINING
&M       SETA  11  POINT TO NAME OP
         AIF   (T'&SYSLIST(&M) EQ 'O').SL1X IGNORED SAVELOC IF OMITTED
&PIB(31) SETB  (NOT &PIB(5)) INVOKE START PATH IF NOT CYCLE
&PIB(30) SETB  1  INVOKE START SEGMENT
&PIB(42) SETB  1 INVOKE IMPLICIT GOTO
&PIB(35) SETB 1 INVOKE END CTRL
&PIB(37) SETB  1 INVOKE SAVELOC PART 2
.SL1X    ANOP
.**********************************************************************
.*                                                                    *
.*                  CYCLE - PART 1 (OPERAND/LIMIT CHECK)              *
.*                                                                    *
.**********************************************************************
&M       SETA  13             POINT TO CYCLE OP
         AIF   (N'&SYSLIST(&M) LT 1 AND NOT &PIB(5) OR &PIB(11)).CY1X
         AIF   (&PIB(2)).CY1X
         AIF   (&PIB(5) OR &PIB(8)).CY1 IN CYCLE OR SUMMARY ALREADY?
&PIB(38) SETB  1         INVOKE CYCLE PART 2
&PIB(35) SETB  1         INVOKE END CTRL
&PIB(30) SETB  1        INVOKE START SEGMENT
&CYC(1)  SETC  '&SYSLIST(&M,2)'         SAVE LIMIT
.CY1     ANOP
&M       SETA  11             POINT TO NAME
&C(1)    SETC  '&SYSLIST(&M)'           SAVE NAME
&PIB(36) SETB  ('&CYC(1)' EQ '&C(1)' OR '&CYC(1)' EQ '') LIMIT REACHED?
&PIB(35) SETB  (&PIB(36) OR &PIB(35)) END CTRL IF LIMIT OR END CTRL
&PIB(6)  SETB  (&PIB(36)) CYCLE LIMIT STATE
&PIB(4)  SETB  (NOT &PIB(6)) TURN OFF NORMAL IF CYCLE LIMIT
.CY1X    ANOP
.**********************************************************************
.*                                                                    *
.*                           PATH/SEGMENT LOGIC                       *
.*                                                                    *
.**********************************************************************
&PIB(28) SETB  (&PIA(1) NE 1 AND (&PIA(1) EQ 0 OR &PIB(30) OR          C
               &PIB(31)))
         AIF   (NOT &PIB(28)).SP1 NOT END SEG
&A(1)    SETA  &QA1(&QA3(1))-&QA1(&QA3(1))/256*256 THIS SEG NUM
&PIB(1)  SETB  1
         AIF   (NOT &PIB(1)).I0056
         IDFMSG 029
.I0056   ANOP ,
&B(1)    SETB  (&PIA(1) NE 0)
&QA1(&QA3(1)) SETA &QA1(&QA3(1))+&B(1)-&A(1)/255*256  NEW SEG NUM
&PIB(29) SETB  (&PIB(31) AND &PIA(1) NE 1 OR &PIA(1) EQ 0)
         AIF   (NOT &PIB(29)).SP1 NOT END OF PATH
&A(1)    SETA  &QA1(&QA3(1))/256-&QA1(&QA3(1))/65536*256 THIS PATH NUM
         AIF   (NOT &PIB(1)).I0057
         IDFMSG 030
.I0057   AIF   (NOT &B(1)).EP0
&QA1(&QA3(1)) SETA &QA1(&QA3(1))/256*256+&B(1)*256-&A(1)/255*65536
&QA1(&QA3(1)) SETA  &QA1(&QA3(1))+&B(1) START WITH SEG 1
.EP0     ANOP
&M       SETA  19-17*&PIB(3) POINT AT IND OPERAND FOR MSG
&PIB(1)  SETB  (&INDB(1) OR &ROIB(1))   ANY IND OR ROI USED IN PATH
         AIF   (NOT &PIB(1)).EP2X       NONE USED
         IDFMSG 031
         AIF   (NOT &INDB(1)).EP2       ANY IND USED IN PATH
&INDB(1) SETB  0                        RESET FOR NEXT PATH
&J       SETA  1
.EP1     ANOP
&PIB(1)  SETB  (&INDB(&J+1)) THIS IND USED
         AIF   (NOT &PIB(1)).I0060
&MB(4)   SETB  0                       INDICATE INDICATORS 1-84   FSJW
         IDFMSG 032
&PIB(1)  SETB  (&INDB(&J+169)) LAST OP WAS NOT TEST
         AIF   (NOT &PIB(1)).I0060
         IDFMSG 023
.I0060   ANOP ,
&J       SETA  &J+1
&INDB(&J) SETB 0
         AIF   (&J LE 84).EP1
.EP2     AIF   (NOT &ROIB(1)).EP2X      ANY ROI USED IN PATH
&ROIB(1) SETB  0                        RESET FOR NEXT PATH
&M       SETA  1                        INITIALIZE FOR MESSAGES
&J       SETA  1                        POINT TO FIRST ROI
.EP2L    ANOP  , RETURN POINT FOR SUCCESSIVE ROI
&PIB(1)  SETB  (&ROIB(&J+1))
         AIF   (NOT &PIB(1)).I0058
&MB(4)   SETB  1                       INDICATE ROI INDICATORS    FSJW
         IDFMSG 032     ROI INDICATOR TESTED                      FSJW
.I0058   ANOP
&J       SETA  &J+1
         AIF   (&J LE 6).EP2L                                     FSJW
.EP2X    ANOP
&M       SETA  18-15*&PIB(3) POINT AT CTR FOR MSG
&PIB(1)  SETB  (&CTRB(1)) ANY CTR USED IN PREVIOUS PATH
         AIF   (NOT &PIB(1)).EP4 NONE USED
&CTRB(1) SETB  0
         AIF   (NOT &PIB(1)).I0061
         IDFMSG 033
.I0061   ANOP ,
&J       SETA  1
.EP3     ANOP
&PIB(1)  SETB  (&CTRB(&J+1)) THIS CTR USED
         AIF   (NOT &PIB(1)).I0063
         IDFMSG 034
&PIB(1)  SETB  (&CTRB(&J+64)) LAST OP WAS NOT OUTPUT
         AIF   (NOT &PIB(1)).I0063
         IDFMSG 021
.I0063   ANOP ,
&J       SETA  &J+1
&CTRB(&J) SETB 0
         AIF   (&J LE 21).EP3
.EP4     ANOP
&M       SETA  28
&PIB(1)  SETB  (&BUFB(1)) ANY BUFFER USED IN PREVIOUS PATH
         AIF   (NOT &PIB(1)).EP6B       NONE USED                 FSDB
&BUFB(1) SETB  0
         AIF   (NOT &PIB(1)).I0064
         IDFMSG 035
.I0064   ANOP ,
&J       SETA  1
.EP5     ANOP
&PIB(1)  SETB  (&BUFB(&J+1)) THIS BUFFER USED
         AIF   (NOT &PIB(1)).I0066
         IDFMSG1 130
&PIB(1)  SETB  (&BUFB(&J+40)) LAST OP NOT OUTPUT
         AIF   (NOT &PIB(1)).I0066
         IDFMSG1 131
.I0066   AIF   (&J NE 3 OR NOT &BUFB(4) OR NOT &PIB(23)).EP6
&PIB(1)  SETB  1
         IDFMSG3 535  KATAKANA/5496 WARNING
.EP6     ANOP
&J       SETA  &J+1
&BUFB(&J) SETB 0
         AIF   (&J LE 13).EP5
.EP6B    AIF   (NOT &NDXB(1)).SP1X      NO INDEX CTR USED         FSDB
         MNOTE *,'IDF149 INDEX COUNTERS USED IN PATH &A(1)'       FSJW
         MNOTE *,'       -------------------------------'         FSJW
&C(1)    SETC  'X1/X2'(4-&NDXB(2)*3,2+&NDXB(2)*&NDXB(3)*3)        FSDB
         MNOTE *,'IDF150     &C(1)'                               FSDB
.SP1X    ANOP  ,                                                  FSJW
.SP1     AIF   (NOT(&PIB(30) OR &PIB(31)) OR &PIA(1) EQ 0).DF1 SKIP
&PIB(1)  SETB  (&PIB(31)) NEW PATH CREATES
&PIB(30) SETB  (&PIB(31) OR &PIB(30))
&PIB(11) SETB  0
&A(1)    SETA  &QA1(&QA3(1))/256-&QA1(&QA3(1))/65536*256 PATH NUM
         AIF   (NOT &PIB(1)).I0067
         IDFMSG 027
.I0067   ANOP ,
&PIB(31) SETB 0
&PIB(1)  SETB  (&PIB(30)) NEW SEG
&A(1)    SETA  &QA1(&QA3(1))-&QA1(&QA3(1))/256*256
         AIF   (NOT &PIB(1)).I0068
         IDFMSG 028
.I0068   ANOP ,
&PIB(30) SETB 0
.DF1     ANOP
         AIF   (NOT &PIB(48)).TX
         MNOTE *,'IDF100 IN TRACE MODE LEAVING IDFIN01'
.TX      ANOP
         MEND
