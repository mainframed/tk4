         MACRO
         IDFIN02
         COPY IDFGBL
         AIF   (NOT &PIB(48)).TR
         MNOTE *,'IDF100 IN TRACE MODE ENTERING IDFIN02'
.TR      ANOP
.**********************************************************************
.*                                                                    *
.*                           STATUS REPORTING                         *
.*                                                                    *
.**********************************************************************
&PIB(32) SETB  (NOT &PIB(3) AND &PIA(1) EQ &PIA(2)+1 AND &PIA(1) NE 1)
         AGO   .PRX                SKIP PREV. LVL MSGS  IR00282
         AIF   (NOT &PIB(32) OR &PIB(2)).PRX
&PIB(1)  SETB  1                        PRINT MESSAGE FLAG BIT
&MB(8)   SETB  0
.*                                      FOR UNCHANGED STATUS MESSAGE
&B(2)    SETB  (&PIA(1) NE 0)           NOT FDEND
&PIA(2)  SETA  1+&B(2)*(&PIA(2)-1)
&PIB(1)  SETB  (NOT &B(2))
         AIF   (NOT &PIB(1)).I0069
         IDFMSG 036
.I0069   ANOP ,
         AIF   (&PIA(2) GT 2).PR3       PREVIOUS LEVEL GT FDPAGE
&K       SETA  &PIA(2)+20
&M       SETA  14                       STRUCTURAL OPERAND HEIGHT
&PIB(1)  SETB  (&DFA(&K) NE &DFA(&K-1))   CHANGE IN HEIGHT
&PIB(1)  SETB  (&PIB(1) EQ &B(2))       COMPARE CHANGE BIT & NOT FDEND
&B(1)    SETB  (&B(1) OR &PIB(1))       CHANGE FLAG BIT
         AIF   (NOT &PIB(1)).I0070
         IDFMSG1 120                    HEIGHT MNOTE
.I0070   ANOP ,
&M       SETA  15                       STRUCTURAL OPERAND FOR
&N       SETA  1                                 TOP VMRG
&PIB(1)  SETB  (&DFA(&K-16) NE &DFA(&K-17))  CHANGE IN TOP VMRG
&PIB(1)  SETB  (&PIB(1) EQ &B(2))       COMPARE CHANGE BIT & NOT FDEND
&B(1)    SETB  (&B(1) OR &PIB(1))       CHANGE FLAG BIT
         AIF   (NOT &PIB(1)).I0071
         IDFMSG1 121                    TOP VMRG MNOTE
.I0071   ANOP ,
&N       SETA  2                                  BOTTOM  VMRG
&PIB(1)  SETB  (&DFA(&K-8) NE &DFA(&K-9))    CHANGE IN BOTTOM VMRG
&PIB(1)  SETB  (&PIB(1) EQ &B(2))       COMPARE CHANGE BIT & NOT FDEND
&B(1)    SETB  (&B(1) OR &PIB(1))       CHANGE FLAG BIT
         AIF   (NOT &PIB(1)).I0072
         IDFMSG1 121                    BOTTOM VMRG MNOTE
.I0072   ANOP ,
.PR3     AIF   (&PIA(2) GT 3).PR4       PREVIOUS LEVEL GT FDLINE
&K       SETA  &PIA(2)+23
&M       SETA  8                        STRUCTURAL OPERAND FOR WIDTH
&PIB(1)  SETB  (&DFA(&K) NE &DFA(&K-1))  CHANGE IN WIDTH
&PIB(1)  SETB  (&PIB(1) EQ &B(2))       COMPARE CHANGE BIT & NOT FDEND
&B(1)    SETB  (&B(1) OR &PIB(1))       CHANGE FLAG BIT
         AIF   (NOT &PIB(1)).I0073
         IDFMSG1 120                    WIDTH MNOTE
.I0073   ANOP ,
&M       SETA  9                        STRUCTURAL OPERAND FOR
&N       SETA  1                                  LEFT HMRG
&PIB(1)  SETB  (&DFA(&K-16) NE &DFA(&K-17))  CHANGE IN LEFT HMRG
&PIB(1)  SETB  (&PIB(1) EQ &B(2))       COMPARE CHANGE BIT & NOT FDEND
&B(1)    SETB  (&B(1) OR &PIB(1))       CHANGE FLAG BIT
         AIF   (NOT &PIB(1)).I0074
         IDFMSG1 121                    LEFT HMRG MNOTE
.I0074   ANOP ,
&N       SETA  2                                  RIGHT HMRG
&PIB(1)  SETB  (&DFA(&K-8) NE &DFA(&K-9))    CHANGE IN RIGHT HMRG
&PIB(1)  SETB  (&PIB(1) EQ &B(2))       COMPARE CHANGE BIT & NOT FDEND
&B(1)    SETB  (&B(1) OR &PIB(1))       CHANGE FLAG BIT
         AIF   (NOT &PIB(1)).I0075
         IDFMSG1 121                    RIGHT HMRG MNOTE
.I0075   ANOP ,
.PR4     ANOP
&M       SETA  1                        STRUCTURAL OPERAND FOR SOURCE
&I       SETA  &PIA(2)+1
&PIB(1)  SETB  (&DSCB(&I) NE &DSCB(&I-1) OR &DSCB(&I+5) NE &DSCB(&I+4) X
               OR &DSCB(&I+10) NE &DSCB(&I+9))
&PIB(1)  SETB  (&DSCB(&I+15) NE &DSCB(&I+14) OR &DSCB(&I+20) NE        X
               &DSCB(&I+19) OR &DSCB(&I+25) NE &DSCB(&I+24) OR &PIB(1))
&PIB(1)  SETB  (&PIB(1) EQ &B(2))       COMPARE CHANGE BIT & NOT FDEND
&B(1)    SETB  (&B(1) OR &PIB(1))       CHANGE FLAG BIT
         AIF   (NOT &PIB(1)).I0076
         IDFMSG1 126                    SOURCE MNOTE
.I0076   ANOP ,
&M       SETA  2                        STRUCTURAL OPERAND FOR KIND
&I       SETA  &I+30
&PIB(1)  SETB  (&DSCB(&I) NE &DSCB(&I-1) OR &DSCB(&I+5) NE &DSCB(&I+4) C
               OR &DSCB(&I+10) NE &DSCB(&I+9))
&PIB(1)  SETB  (&DSCB(&I+15) NE &DSCB(&I+14) OR &PIB(1))
&PIB(1)  SETB  (&PIB(1) EQ &B(2))
&B(1)    SETB  (&B(1) OR &PIB(1))
         AIF   (NOT &PIB(1)).I0077
         IDFMSG1 125
.I0077   ANOP ,
&M       SETA  3
&I       SETA  &I+20
&PIB(1)  SETB  (&DSCB(&I) NE &DSCB(&I-1) OR &DSCB(&I+5) NE &DSCB(&I+4) X
               OR &DSCB(&I+10) NE &DSCB(&I+9))    CHANGE IN KIND
&PIB(1)  SETB  (&PIB(1) EQ &B(2))       COMPARE CHANGE BIT & NOT FDEND
&B(1)    SETB  (&B(1) OR &PIB(1))       CHANGE FLAG BIT
         AIF   (NOT &PIB(1)).I0078
         IDFMSG1 122                    KIND MNOTE
.I0078   ANOP ,
&N       SETA  0
&K       SETA  &PIA(2)+71
.PR5     ANOP  , LOOP RETURN POINT FOR SUCCESSIVE SINKS
&N       SETA  &N+1
&K       SETA  &K-70
&M       SETA  4                       STRUCTURAL OPERAND FOR SINK
&PIB(1)  SETB  (&DSKB1(&K) NE &DSKB1(&K-1) OR &DSKB1(&K+25) NE &DSKB1(&X
               K+24) OR &DSKB1(&K+50) NE &DSKB1(&K+49))
&PIB(1)  SETB  (&DSKB1(&K+75) NE &DSKB1(&K+74) OR &DSKB1(&K+100) NE &DSX
               KB1(&K+99) OR &PIB(1))
&PIB(1)  SETB  (&DSKB1(&K+125) NE &DSKB1(&K+124) OR &PIB(1))
&PIB(1)  SETB  (&PIB(1) AND (&DSKB1(&K) OR &DSKB1(&K-1)))
&PIB(1)  SETB  (&PIB(1) EQ &B(2))       COMPARE CHANGE BIT & NOT FDEND
&B(1)    SETB  (&B(1) OR &PIB(1))       CHANCE LEVEL BIT FLAG
         AIF   (NOT &PIB(1)).I0079
         IDFMSG1 123                    SINK MNOTE
.I0079   ANOP ,
&B(3)    SETB  (&DSKB1(&K) OR &B(2))
&M       SETA  5                        STRUCTURAL OPERAND FOR JUSTIFY
&PIB(1)  SETB  (&DSKB2(&K) NE &DSKB2(&K-1))
&PIB(1)  SETB  (&PIB(1) EQ &B(2) AND &B(3))
&B(1)    SETB  (&B(1) OR &PIB(1))
         AIF   (NOT &PIB(1)).I0080
         IDFMSG1 124
.I0080   ANOP ,
&M       SETA  6
&K       SETA  &K+25
&PIB(1)  SETB  (&DSKB2(&K) NE &DSKB2(&K-1) OR &DSKB2(&K+25) NE &DSKB2(&X
               K+24))                   CHANGE IN JUSTIFY
&PIB(1)  SETB  (&PIB(1) EQ &B(2) AND &B(3))
&B(1)    SETB  (&B(1) OR &PIB(1))       CHANGE FLAG BIT
         AIF   (NOT &PIB(1)).I0081
         IDFMSG1 124                    JUSTIFY MNOTE
.I0081   ANOP ,
&M       SETA  7                        STRUCTURAL OPERAND FOR UL
&K       SETA  &K+50
&PIB(1)  SETB  (&DSKB2(&K) NE &DSKB2(&K-1))  CHANGE IN UL
&PIB(1)  SETB  (&PIB(1) EQ &B(2) AND &B(3))
&B(1)    SETB  (&B(1) OR &PIB(1))       CHANGE LEVEL BIT FLAG
         AIF   (NOT &PIB(1)).I0082
         IDFMSG1 124                    UL MNOTE
.I0082   ANOP ,
         AIF   (&N LT 5).PR5 MORE SINKS TO REPORT
.PRX     ANOP
         AIF   (&PIA(1) EQ 0 OR &PIB(3)).LCALX
         AIF   (&PIA(1) GT 2).VM2X      BRANCH IF NOT FORM OR PAGE
.* BEGIN PROCESSING PAGE-LEVEL PROMOTABLE OPERANDS *.
.**********************************************************************
.*                                                                    *
.*                           HEIGHT OPERAND PROCESSOR                 *
.*                                                                    *
.**********************************************************************
&M       SETA  14                       POINT TO HEIGHT OPERAND
&PIB(1)  SETB  (&PIB(2) AND T'&SYSLIST(&M) NE 'O')
         AIF   (NOT &PIB(1)).I0083
         IDFMSG1 100                    CONTINUATION
.I0083   ANOP ,
         AIF   (&PIB(2)).HTX
&K       SETA  &PIA(1)+20
&DFA(&K) SETA  &DFA(&K-1)               EXTRACT DEFAULT
         AIF   (T'&SYSLIST(&M,1) EQ 'O').HT1
&PIB(1)  SETB  (T'&SYSLIST(&M,1) NE 'N' OR '&SYSLIST(&M,1)'(1,1) EQ    *
               'C')                     MUST BE SELF-DEFINING NUMBER
&N       SETA  0
         AIF   (NOT &PIB(1)).I0084
         IDFMSG2 200                    OPERAND FORMAT INVALID
&PIB(15) SETB  1
.I0084   ANOP ,
         AIF   (&PIB(1)).HTX            EXIT IF ERROR
&A(5)    SETA  &DFA(1)                  LOWER HEIGHT LIMIT
&A(6)    SETA  16383                    UPPER HEIGHT LIMIT
&PIB(1)  SETB  (&SYSLIST(&M,1) LT &A(5) OR &SYSLIST(&M,1) GT &A(6))
         AIF   (NOT &PIB(1)).I0085
         IDFMSG2 201                    OUT OF RANGE
&PIB(15) SETB  1
.I0085   ANOP ,
         AIF   (&PIB(1)).HTX            EXIT IF ERROR
&DFA(&K) SETA  &SYSLIST(&M,1)           REPLACE DEFAULT WITH CODED
.HT1     ANOP
&N       SETA  1
&PIB(1)  SETB  (N'&SYSLIST(&M) GT &N)
         AIF   (NOT &PIB(1)).I0086
         IDFMSG1 104                    EXCESS IGNORED
.I0086   ANOP ,
.HTX     ANOP  , GENERAL EXIT FROM PROCESSING OF HEIGHT OPERAND
.**********************************************************************
.*                                                                    *
.*                           VMRG OPERAND PROCESSOR                   *
.*                                                                    *
.**********************************************************************
&M       SETA  15                       POINT TO VMRG OPERAND
&PIB(1)  SETB  (&PIB(2) AND T'&SYSLIST(&M) NE 'O')
         AIF   (NOT &PIB(1)).I0087
         IDFMSG1 100                    CONTINUATION IN PROGRESS
.I0087   ANOP ,
         AIF   (&PIB(2)).VM2X
&N       SETA  1                        POINT TO FIRST SUBOPERAND
&B(1)    SETB  (&DFA(1) LE &DFA(&K-17) AND &DFA(&K-17) LE &DFA(&K))
&DFA(&K-16) SETA &DFA(1)+&B(1)*(&DFA(&K-17)-&DFA(1))  SELECT DEFAULT 1
         AIF   (T'&SYSLIST(&M,&N) EQ 'O').VM1X  EXIT IF NOT CODED
&PIB(1)  SETB  (T'&SYSLIST(&M,&N) NE 'N' OR '&SYSLIST(&M,&N)'(1,1) EQ  *
               'C')                     MUST BE SELF-DEFINING NUMBER
         AIF   (NOT &PIB(1)).I0088
         IDFMSG2 200                    SUBOPERAND FORMAT INVALID
&PIB(15) SETB  1
.I0088   ANOP ,
         AIF   (&PIB(1)).VM1X           EXIT IF ERROR
&A(5)    SETA  &DFA(1)                  LOWER TOP-MARGIN LIMIT
&A(6)    SETA  &DFA(&K)                 UPPER TOP-MARGIN LIMIT
&PIB(1)  SETB  (&SYSLIST(&M,&N) LT  &A(5) OR &SYSLIST(&M,&N) GT &A(6))
         AIF   (NOT &PIB(1)).I0089
         IDFMSG2 201                    OUT OF RANGE
&PIB(15) SETB  1
.I0089   ANOP ,
         AIF   (&PIB(1)).VM1X           EXIT IF ERROR
&DFA(&K-16) SETA &SYSLIST(&M,&N)        REPLACE DEFAULT WITH CODED
.VM1X    ANOP  , COMPLETED PROCESSING OF VMRG SUBOPERAND 1
&N       SETA  2                        POINT TO SECOND SUBOPERAND
&B(1)    SETB  (&DFA(&K-16) LE &DFA(&K-9) AND &DFA(&K-9) LE &DFA(&K)   *
               AND &DFA(&K) LE &DFA(&K-1))
&DFA(&K-8) SETA &DFA(&K)+&B(1)*(&DFA(&K-9)-&DFA(&K))  SELECT DEFAULT 2
         AIF   (T'&SYSLIST(&M,&N) EQ 'O').VM2A
&PIB(1)  SETB  (T'&SYSLIST(&M,&N) NE 'N' OR '&SYSLIST(&M,&N)'(1,1) EQ  *
               'C')                     MUST BE SELF-DEFINING NUMBER
         AIF   (NOT &PIB(1)).I0090
&PIB(15) SETB  1
         IDFMSG2 200                    SUBOPERAND FORMAT INVALID
.I0090   ANOP ,
         AIF   (&PIB(1)).VM2X           EXIT IF ERROR
&A(5)    SETA  &DFA(&K-16)              LOWER BOTTOM-MARGIN LIMIT
&A(6)    SETA  &DFA(&K)                 UPPER BOTTOM-MARGIN LIMIT
&PIB(1)  SETB  (&SYSLIST(&M,&N) LT &A(5) OR &SYSLIST(&M,&N) GT &A(6))
         AIF   (NOT &PIB(1)).I0091
         IDFMSG2 201                    OUT OF RANGE
&PIB(15) SETB  1
.I0091   ANOP ,
         AIF   (&PIB(1)).VM2X           EXIT IF ERROR
&DFA(&K-8) SETA &SYSLIST(&M,&N)         REPLACE DEFAULT WITH CODED
.VM2A    ANOP
&PIB(1)  SETB  (N'&SYSLIST(&M) GT &N)
         AIF   (NOT &PIB(1)).I0092
         IDFMSG1 104                    EXCESS IGNORED
.I0092   ANOP ,
.VM2X    AIF   (&PIA(1) GT 3).HM2X
.* BEGIN PROCESSING LINE-LEVEL PROMOTABLE OPERANDS *.
.**********************************************************************
.*                                                                    *
.*                           WIDTH OPERAND PROCESSOR                  *
.*                                                                    *
.**********************************************************************
&M       SETA  8                        POINT TO WIDTH OPERAND
&PIB(1)  SETB  (&PIB(2) AND T'&SYSLIST(&M) NE 'O')
         AIF   (NOT &PIB(1)).I0093
         IDFMSG1 100                    CONTINUATION IN PROGRESS
.I0093   ANOP ,
         AIF   (&PIB(2)).WDX
&K       SETA  &PIA(1)+23
&DFA(&K) SETA  &DFA(&K-1)               EXTRACT DEFAULT
         AIF   (T'&SYSLIST(&M,1) EQ 'O').WD1
&PIB(1)  SETB  (T'&SYSLIST(&M,1) NE 'N' OR '&SYSLIST(&M,1)'(1,1) EQ    *
               'C')                     MUST BE SELF-DEFINING NUMBER
&N       SETA  0
         AIF   (NOT &PIB(1)).I0094
&PIB(15) SETB  1
         IDFMSG2 200                    OPERAND FORMAT INVALID
.I0094   ANOP ,
         AIF   (&PIB(1)).WDX            EXIT IF ERROR
&A(5)    SETA  &DFA(2)                  LOWER WIDTH LIMIT
&A(6)    SETA  130                      UPPER WIDTH LIMIT
&PIB(1)  SETB  (&SYSLIST(&M,1) LT &A(5) OR &SYSLIST(&M,1) GT &A(6))
         AIF   (NOT &PIB(1)).I0095
         IDFMSG2 201                    OUT OF RANGE
&PIB(15) SETB  1
.I0095   ANOP ,
         AIF   (&PIB(1)).WDX            EXIT IF ERROR
&DFA(&K) SETA  &SYSLIST(&M,1)           REPLACE DEFAULT WITH CODED
.WD1     ANOP
&N       SETA  1
&PIB(1)  SETB  (N'&SYSLIST(&M) GT &N)
         AIF   (NOT &PIB(1)).I0096
         IDFMSG1 104                    EXCESS IGNORED
.I0096   ANOP ,
.WDX     ANOP  , GENERAL EXIT FROM PROCESSING OF WIDTH OPERAND
.**********************************************************************
.*                                                                    *
.*                           HMRG OPERAND PROCESSOR                   *
.*                                                                    *
.**********************************************************************
&M       SETA  9                        POINT TO HMRG OPERAND
&PIB(1)  SETB  (&PIB(2) AND T'&SYSLIST(&M) NE 'O')
         AIF   (NOT &PIB(1)).I0097
         IDFMSG1 100                    CONTINUATION IN PROGRESS
.I0097   ANOP ,
         AIF   (&PIB(2)).HM2X
&N       SETA  1                        POINT TO FIRST SUBOPERAND
&B(1)    SETB  (&DFA(2) LE &DFA(&K-17) AND &DFA(&K-17) LE &DFA(&K))
&DFA(&K-16) SETA &DFA(2)+&B(1)*(&DFA(&K-17)-&DFA(2))  SELECT DEFAULT 1
         AIF   (T'&SYSLIST(&M,&N) EQ 'O').HM1X  EXIT IF NOT CODED
&PIB(1)  SETB  (T'&SYSLIST(&M,&N) NE 'N' OR '&SYSLIST(&M,&N)'(1,1) EQ  *
               'C')                     MUST BE SELF-DEFINING NUMBER
         AIF   (NOT &PIB(1)).I0098
         IDFMSG2 200                    SUBOPERAND FORMAT INVALID
&PIB(15) SETB  1
.I0098   ANOP ,
         AIF   (&PIB(1)).HM1X           EXIT IF ERROR
&A(5)    SETA  &DFA(2)                  LOWER LEFT-MARGIN LIMIT
&A(6)    SETA  &DFA(&K)                 UPPER LEFT-MARGIN LIMIT
&PIB(1)  SETB  (&SYSLIST(&M,&N) LT &A(5) OR &SYSLIST(&M,&N) GT &A(6))
         AIF   (NOT &PIB(1)).I0099
         IDFMSG2 201                    OUT OF RANGE
&PIB(15) SETB  1
.I0099   ANOP ,
         AIF   (&PIB(1)).HM1X           EXIT IF ERROR
&DFA(&K-16) SETA &SYSLIST(&M,&N)        REPLACE DEFAULT WITH CODED
.HM1X    ANOP  , COMPLETED PROCESSING OF HMRG SUBOPERAND 1
&N       SETA  2                        POINT TO SECOND SUBOPERAND
&B(1)    SETB  (&DFA(&K-16) LE &DFA(&K-9) AND &DFA(&K-9) LE &DFA(&K)   *
               AND &DFA(&K) LE &DFA(&K-1))
&DFA(&K-8) SETA &DFA(&K)+&B(1)*(&DFA(&K-9)-&DFA(&K))  SELECT DEFAULT 2
         AIF   (T'&SYSLIST(&M,&N) EQ 'O').HM2A
&PIB(1)  SETB  (T'&SYSLIST(&M,&N) NE 'N' OR '&SYSLIST(&M,&N)'(1,1) EQ  *
               'C')                     MUST BE SELF-DEFINING NUMBER
         AIF   (NOT &PIB(1)).I0100
         IDFMSG2 200                    SUBOPERAND FORMAT INVALID
&PIB(15) SETB  1
.I0100   ANOP ,
         AIF   (&PIB(1)).HM2X           EXIT IF ERROR
&A(5)    SETA  &DFA(&K-16)              LOWER RIGHT-MARGIN LIMIT
&A(6)    SETA  &DFA(&K)                 UPPER RIGHT-MARGIN LIMIT
&PIB(1)  SETB  (&SYSLIST(&M,&N) LT &A(5) OR &SYSLIST(&M,&N) GT &A(6))
         AIF   (NOT &PIB(1)).I0101
         IDFMSG2 201                    OUT OF RANGE
&PIB(15) SETB  1
.I0101   ANOP ,
         AIF   (&PIB(1)).HM2X           EXIT IF ERROR
&DFA(&K-8) SETA &SYSLIST(&M,&N)         REPLACE DEFAULT WITH CODED.
.HM2A    ANOP
&PIB(1)  SETB  (N'&SYSLIST(&M) GT &N)
         AIF   (NOT &PIB(1)).I0102
         IDFMSG1 104                    EXCESS IGNORED
.I0102   ANOP ,
.HM2X    AIF   (&PIA(1) NE 2).PCALX
.**********************************************************************
.*                                                                    *
.*                           PAGE CALCULATIONS                        *
.*                                                                    *
.**********************************************************************
&M       SETA  12
&N       SETA  0
&A(1)    SETA  1
&B(1)    SETB  1
         AIF   (T'&SYSLIST(&M,1) EQ 'O').PCAL1
&PIB(1)  SETB  (T'&SYSLIST(&M,1) NE 'N' OR '&SYSLIST(&M,1)'(1,1) EQ    X
               'C')
         AIF   (NOT &PIB(1)).I0103
         IDFMSG2 200
.I0103   ANOP ,
&PIB(15) SETB  (&PIB(15) OR &PIB(1))
         AIF   (&PIB(1)).PCAL1
&A(5)    SETA  1
&A(6)    SETA  16383
&PIB(1)  SETB  (&SYSLIST(&M,1) LT &A(5) OR &SYSLIST(&M,1) GT &A(6))
         AIF   (NOT &PIB(1)).I0104
         IDFMSG2 201
.I0104   ANOP ,
&PIB(15) SETB  (&PIB(15) OR &PIB(1))
         AIF   (&PIB(1)).PCAL1
&B(1)    SETB  (&SYSLIST(&M,1) NE 1)
&A(1)    SETA  &SYSLIST(&M,1)-&PRTA(2)
.PCAL1   ANOP
&PRTA(2) SETA  1+&B(1)*(&PRTA(2)+&A(1)-1)
&A(1)    SETA  (2*&A(1)+1)/(2*&A(1))*(&PRTA(4)-&PRTA(5)+1-&DFA(21))+(2*X
               &A(1)-1)/(2*&A(1))*(&DFA(21)-&DFA(22))+&A(1)*&DFA(21)
&PRTA(5) SETA  1+&B(1)*(&PRTA(5)+&A(1)-1)
&A(5)    SETA  1
&A(6)    SETA  16383
&PIB(1)  SETB  (&PRTA(5) LT &A(5) OR &PRTA(5) GT &A(6))
         AIF   (NOT &PIB(1)).I0105
         IDFMSG2 200
.I0105   ANOP ,
&PIB(15) SETB  (&PIB(15) OR &PIB(1))
&B(1)    SETB  0
         AIF   (&PIB(1)).PCAL1
&PIB(1)  SETB  (&PRTA(5) LE &PRTA(4))
         AIF   (NOT &PIB(1)).I0106
         IDFMSG1 113
.I0106   ANOP ,
&PRTA(4) SETA  &PRTA(5)+&DFA(22)-1
&B(1)    SETB  (&PRTA(1) GT &PRTA(2))
&PRTA(1) SETA  &PRTA(2)+&B(1)*(&PRTA(1)-&PRTA(2))
&B(1)    SETB  (&PRTA(3) GT &PRTA(4))
&PRTA(3) SETA  &PRTA(4)+&B(1)*(&PRTA(3)-&PRTA(4))
&PRTA(6) SETA  &PRTA(5)+&DFA(6)-1
&PRTA(7) SETA  &PRTA(6)
&PRTA(11) SETA &DFA(9)
&PRTA(12) SETA &PRTA(11)
&PRTA(9) SETA  &PRTA(5)+&DFA(14)-1
&N       SETA  1
&PIB(1)  SETB  (N'&SYSLIST(&M) GT &N)
         AIF   (NOT &PIB(1)).I0107
         IDFMSG1 104
.I0107   ANOP ,
&PIB(1)  SETB  1
         IDFMSG 004  PAGE START POSITION
&PIA(2)  SETA  &PIA(1)                  SET LEVEL FOR MESSAGES
&M       SETA  14                       INDEX FOR HEIGHT
&N       SETA  0                        NO SUBOPERANDS
&MB(8)   SETB  1
         IDFMSG1 120  CALL FOR HEIGHT
&M       SETA  15                       INDEX FOR VMRG
&N       SETA  1                        INDEX FOR TOP
         IDFMSG1 121  CALL FOR TOP
&N       SETA  2                        INDEX FOR BOTTOM
         IDFMSG1 121  CALL FOR BOTTOM
         AIF   (NOT &PIB(47)).DSP6
         IDFDSP 'AFTER PAGE CALCULATIONS',DFA,PRTA,A,PIB
.DSP6    ANOP
.PCALX   AIF   (&PIA(1) NE 3).LCALX
.**********************************************************************
.*                                                                    *
.*                           LINE CALCULATIONS                        *
.*                                                                    *
.**********************************************************************
&M       SETA  12
&N       SETA  0
&B(1)    SETB  (&PRTA(7) NE &PRTA(9) AND &PIA(2) NE 2)
&A(1)    SETA  &PRTA(7)+&B(1)
&A(5)    SETA  &DFA(6)
&A(6)    SETA  &DFA(14)
         AIF   (&PIB(8)).LCAL1
&PIB(1)  SETB  ((&PRTA(7) LT &PRTA(6) OR &PRTA(7) GT &PRTA(9)) AND     X
               T'&SYSLIST(&M,1) EQ 'O')
         IDFMSG2 201    LINE NUMBER EXCEEDS PAGE
&PIB(15) SETB  (&PIB(15) OR &PIB(1))
         AIF  (&PIB(1)).LCAL3
         AIF   (T'&SYSLIST(&M,1) EQ 'O').LCAL3
&PIB(1)  SETB  (T'&SYSLIST(&M,1) NE 'N' OR '&SYSLIST(&M,1)'(1,1) EQ    X
               'C')
         AIF   (NOT &PIB(1)).I0108
         IDFMSG2 200
.I0108   ANOP ,
&PIB(15) SETB  (&PIB(15) OR &PIB(1))
         AIF   (&PIB(1)).LCAL3
&PIB(1)  SETB  (&SYSLIST(&M,1) LT &A(5) OR &SYSLIST(&M,1) GT &A(6))
         AIF   (NOT &PIB(1)).I0109
         IDFMSG2 201
.I0109   ANOP ,
&PIB(15) SETB  (&PIB(15) OR &PIB(1))
         AIF   (&PIB(1)).LCAL3
&A(1)    SETA  &PRTA(5)+&SYSLIST(&M,1)-1
         AGO   .LCAL3
.LCAL1   ANOP
&C(1)    SETC  '00000000'
&I       SETA  6
.LCAL2   ANOP
&PIB(1)  SETB  ('&SYSLIST(&M,1)'(&I,1) LT '0' OR '&SYSLIST(&M,1)'(&I,1)X
               GT '9')
         AIF   (NOT &PIB(1)).I0110
         IDFMSG2 200
.I0110   ANOP ,
&PIB(15) SETB  (&PIB(15) OR &PIB(1))
         AIF   (&PIB(1)).LCAL3
&C(1)    SETC  '&C(1)'(2,7).'&SYSLIST(&M,1)'(&I,1)
&I       SETA  &I+1
         AIF   ('&SYSLIST(&M,1)'(&I,1) NE ')').LCAL2
&C(1)    SETC  '&C(1)'(2,7)
&A(2)    SETA  &C(1)+&PRTA(7)
&B(1)    SETB  (&CYA(6)+&CYA(5) GT &A(2)) CYCLE MAX LINE GREATER?
&A(2)    SETA  &A(2)+&B(1)*(&CYA(6)+&CYA(5)-&A(2)) REPLACE LINE NO
&PIB(1)  SETB  (&A(2) GT &PRTA(9))
         AIF   (NOT &PIB(1)).I0111
         IDFMSG2 201
.I0111   ANOP ,
&PIB(15) SETB  (&PIB(15) OR &PIB(1))
         AIF   (&PIB(1)).LCAL3
&A(1)    SETA  &A(2)
.LCAL3   ANOP
&PRTA(7) SETA  &A(1)
&PRTA(11) SETA &DFA(10)
&PRTA(12) SETA &PRTA(11)
&DFA(3)  SETA  &DFA(10)
&DFA(19) SETA  &DFA(10)-1
&DFA(27) SETA  &DFA(18)
&DFA(11) SETA  &DFA(3)
&N       SETA  1
&PIB(1)  SETB  (N'&SYSLIST(&M) GT &N)
         AIF   (NOT &PIB(1)).I0112
         IDFMSG1 104
.I0112   ANOP ,
&MB(8)   SETB  1
&PIB(1)  SETB  1
         AIF   (&PIB(8)).I0112A
&A(1)    SETA  &PRTA(7)-&PRTA(5)+1
         IDFMSG 026  LINE NUMBER
.I0112A  ANOP
&PIA(2)  SETA  &PIA(1)                  SET LEVEL FOR MESSAGES
&M       SETA  8                        INDEX FOR WIDTH
&N       SETA  0                        NO SUBOPERANDS
         IDFMSG1 120  CALL FOR WIDTH
&M       SETA  9                        INDEX FOR HMRG
&N       SETA  1                        INDEX FOR LEFT
         IDFMSG1 121  CALL FOR LEFT
&N       SETA  2                        INDEX FOR RIGHT
         IDFMSG1 121  CALL FOR RIGHT
         AIF   (NOT &PIB(47)).DSP7
         IDFDSP 'AFTER LINE CALCULATIONS',DFA,PRTA,A,PIB
.DSP7    ANOP
.LCALX   ANOP
         AIF   (&PIB(2) OR &PIA(1) NE 4).SFX
.**********************************************************************
.*                                                                    *
.*                           FIELD MOTION CALCULATION                 *
.*                                                                    *
.**********************************************************************
.*  PRELIMINARY ANALYSIS FOR DETERMINING SELECTRIC FIELD START  *.
&DFA(11) SETA  &DFA(19)+1 DEFAULT DOC L TO PRIOR DOC R+1
&M       SETA  12                       POINT TO FIELD LEFT IN CALL
&B(7)    SETB  ('&SYSLIST(&M,1)' EQ 'DUMMY' AND &PIB(6) AND            X
               NOT &PIB(3))
         AIF   (&B(7)).SF0
         AIF   (T'&SYSLIST(&M,1) NE 'N').SF0
         AIF   ('&SYSLIST(&M,1)'(1,1) EQ 'C').SF0
&A(1)    SETA  &SYSLIST(&M,1)           REDUCE ENCODING TO VALUE
&A(5)    SETA  &DFA(3)+&PIB(3)*(&DFA(2)-&DFA(3))              A64510
&A(6)    SETA  &DFA(27)+&PIB(3)*(130-&DFA(27))
&B(8)    SETB  (&A(1) GE &A(5) AND &A(1) LE &A(6)) ACCEPT FLAG
&DFA(11) SETA  &DFA(11)+&B(8)*(&A(1)-&DFA(11)) SET FIELD LEFT
.SF0     ANOP
&PRTA(11) SETA &DFA(11) DEFAULT PRT START TO FIELD LEFT
         AIF   (&PIB(3)).SFX
&B(8)    SETB  (N'&SYSLIST(&M) LT 2)
&M       SETA  12+10*&B(8)
&N       SETA  2-&B(8)
         AIF   (T'&SYSLIST(&M,&N) NE 'N').SF1  IF NOT N, MAY BE LNG(D)
         AIF   ('&SYSLIST(&M,&N)'(1,1) EQ 'C').SFX
&A(1)    SETA  &SYSLIST(&M,&N)          CONVERT CODE TO VALUE
         AIF   (&A(1) LT &DFA(11) OR &A(1) GT &DFA(27)).SFX
&DFA(19) SETA  &A(1)                    SET DOCUMENT FIELD RIGHT BOUND
         AIF   (NOT &B(7)).SF2
&PRTA(11) SETA &A(1)
         AGO   .SFX
.SF1     AIF   (K'&SYSLIST(&M,&N) LT 6 OR &B(7)).SFX
         AIF   ('&SYSLIST(&M,&N)'(1,4) NE 'LNG(').SFX
&I       SETA  5
&C(1)    SETC  '0000000'                INITIALIZE COLLECTOR
&C(2)    SETC  '&SYSLIST(&M,&N)'(&I,1)  EXTRACT A CHARACTER
.SF1L    AIF   ('&C(2)' LT '0' OR '&C(2)' GT '9').SFX  NON-DEC IS ERROR
&C(1)    SETC  '&C(1)'(2,6).'&C(2)'     CONCATENATE VALID DIGIT
&I       SETA  &I+1                     INCREMENT SCAN POINTER
&C(2)    SETC  '&SYSLIST(&M,&N)'(&I,1)  GET NEXT CHARACTER
         AIF   ('&C(2)' NE ')' AND '&C(1)'(1,1) EQ '0').SF1L
&A(1)    SETA  &C(1)                    CONVERT CODE TO VALUE
         AIF   (&A(1) LT 1 OR &A(1) GT &DFA(27)-&DFA(11)+1).SFX  EXCESS
&DFA(19) SETA  &DFA(11)+&A(1)-1         SET DOCUMENT FIELD RIGHT BOUND
.SF2     ANOP  , HERE TO ANALYZE SINKS
&M       SETA  4                        POINT TO SINK IN CALL
&B(8)    SETB  0                        INITIALIZE MULTIPLE-SINK FLAG
         AIF   (K'&SYSLIST(&M) LT 3).SF4  UNDER 3 CHARS, ERROR OR DFLT
         AIF   ('&SYSLIST(&M)'(1,1) NE '(').SF4  NO FRAME = SINGLE MODE
&I       SETA  2                        INITIALIZE CHAR POINTER
&J       SETA  1                        INITIALIZE SINK COUNTER
.SF3     ANOP  , RETURN POINT FOR PRELIMINARY SINK LOOP
&B(8)    SETB  ('&SYSLIST(&M)'(&I,1) EQ '(')  TEST FOR INNER FRAME
         AIF   (&B(8)).SF4              MULTIPLE SINKS IF FOUND
&I       SETA  &I+1+K'&SYSLIST(&M,&J)   ELSE PASS OVER SUBOPERAND
&J       SETA  &J+1                     AND INCREMENT SINK COUNT
         AIF   (&I LT K'&SYSLIST(&M) AND &J LE 5).SF3  END OR 5TH TRY
&B(8)    SETB  (T'&SYSLIST(&M,2) NE 'N' AND T'&SYSLIST(&M,2) NE 'O')
         AIF   (&B(8) OR T'&SYSLIST(&M,2) EQ 'N' OR T'&SYSLIST(&M,3)   *
               EQ 'N').SF4
&B(8)    SETB  (K'&SYSLIST(&M,3) LT 5)
         AIF   (&B(8)).SF4
&B(8)    SETB  ('&SYSLIST(&M,3)'(1,4) NE 'LNG(')
.SF4     ANOP  , IF &B(8) ON, MULTIPLE SINK MODE
&A(4)    SETA  K'&SYSLIST(&M)-&B(8)     SET SCAN STOP POINTER
&J       SETA  1                        INITIALIZE SINK COUNTER
&K       SETA  4
&I       SETA  1+&B(8)                  INITIALIZE CHAR POINTER
&A(3)    SETA  &A(4)+&B(8)*(K'&SYSLIST(&M,1)+1-&A(4))  SET INT STOP PTR
.SF5     AIF   (&I GT &A(3)).SF7
&B(8)    SETB  ('&SYSLIST(&M)'(&I,1) EQ '(')  TEST FOR INNER FRAME
&I       SETA  &I+&B(8)                 PASS OVER IF PRESENT
         AIF   ('&SYSLIST(&M)'(&I,1) EQ ',').SF7
         AIF   (&I+2 GT &A(3)).SF7
&C(1)    SETC  '&SYSLIST(&M)'(&I,3)     EXTRACT TEST STRING FOR EASE
&B(1)    SETB  ('&C(1)' EQ 'PRT')       REMEMBER PRT CODED EXPLICITLY
         AIF   (&B(1)).SF9              EXIT AS SOON AS FOUND
&B(2)    SETB  ('&C(1)' EQ 'STG' OR '&C(1)' EQ 'INQ' OR '&C(1)' EQ     *
               'LPB' OR '&C(1)' EQ 'TMT')
&B(2)    SETB  (&B(2) OR '&C(1)' EQ 'PCH' AND NOT &PIB(24) OR '&C(1)'  *
               EQ 'RPB' AND &PIB(24))
&I       SETA  &I+3*&B(2)               PASS BY THREE CHARACTERS IF HIT
         AIF   (&B(2)).SF8              TO NEXT SUBOP ON A HIT
         AIF   (&I+3 GT &A(3)).SF7
         AIF   ('&SYSLIST(&M)'(&I,4) EQ 'NULL').SF8
         AIF   ('&SYSLIST(&M)'(&I,4) EQ 'CTR(').SF8   START OF CTR(D)
.SF7     ANOP
.*             CODED SINK NOT IDENTIFIABLE, TRY DEFAULT TO BE PRT
&B(1)    SETB  (&DSKB1(&K) AND NOT (&DSKB1(&K+50) OR                   *
               &DSKB1(&K+75) OR &DSKB1(&K+100) OR &DSKB1(&K+125)))
         AIF   (&B(1)).SF9              TEST FOR PRT DEFAULT
.SF8     ANOP  , HERE TO ADVANCE TO NEXT SUBOPERAND
&I       SETA  &A(3)+2                  MOVE POINTER ACROSS DELIMITERS
&J       SETA  &J+1                     POINT TO NEXT SINK
&K       SETA  &K+5
&B(1)    SETB  (&A(3) LT &A(4))
&A(3)    SETA  &A(3)+1+&B(1)*K'&SYSLIST(&M,&J)
         AIF   (&J LE 5).SF5            BACK FOR NEXT SINK
         AGO   .SFX
.SF9     ANOP  , HERE IF SOME SINK IS KNOWN TO BE PRT
&M       SETA  6                        POINT TO JUSTIFY IN CALL
&C(1)    SETC  '&SYSLIST(&M,&J)'        EXTRACT CODE FOR SINK &J
         AIF   ('&C(1)' EQ 'L' OR '&C(1)' EQ '' AND NOT &DSKB2(&K+25)  X
               AND NOT &DSKB2(&K+50)).SFX
&B(7)    SETB  ('&C(1)' EQ 'R' OR '&C(1)' EQ '' AND &DSKB2(&K+50))
&M       SETA  1                        POINT TO SOURCE IN CALL
&B(6)    SETB  0                        CLEAR FLAG BIT
         AIF   (K'&SYSLIST(&M,1) LT 3).SF9A   ENOUGH CHARS FOR STRING
&B(6)    SETB  ('&SYSLIST(&M,1)'(1,1) EQ '''')  LEADING APOST IS STRING
.SF9A    ANOP
&M       SETA  20                       POINT TO PICTURE IN CALL
         AIF   (K'&SYSLIST(&M,&J) LT 3).SF10  ENOUGH CHARS FOR PICTURE
         AIF   ('&SYSLIST(&M,&J)'(1,1) NE '''').SF10 ANY LEADING APOST
&A(1)    SETA  K'&SYSLIST(&M,&J)-2      COMPUTE PRT COUNT FROM PICTURE
         AGO   .SF17                    BRANCH TO COMPUTATION
.SF10    AIF   (&B(6)).SF14
&M       SETA  1                        POINT TO SOURCE IN CALL
&C(1)    SETC  '&SYSLIST(&M,1)'         PICK UP SOURCE TYPE
         AIF   ('&C(1)' EQ 'KBD' OR '&C(1)' EQ '' AND NOT              *
               &DSCB(4)).SF14           SEND KBD TO COUNT OPERAND
&A(1)    SETA  3                        PRESUMPTIVE COUNT FOR FID, RSN
         AIF   ('&C(1)' EQ 'FID').SF17
&B(1)    SETB  (&DSCB(9) OR &DSCB(14) OR &DSCB(19) OR &DSCB(24))
         AIF   ('&C(1)' EQ '' AND &DSCB(4) AND NOT (&B(1) OR           *
               &DSCB(29))).SF17         DEFAULT FID
         AIF   ('&C(1)' EQ 'RSN').SF16
         AIF   ('&C(1)' EQ '' AND &DSCB(4) AND NOT &B(1)).SF16
&A(1)    SETA  &PIA(9)             SET TO COUNTER SIZE        CTRSIZE
         AIF   (K'&SYSLIST(&M,1) LT 6).SF11  GE 6 CHARS NEEDED FOR CTR
         AIF   ('&SYSLIST(&M,1)'(1,4) EQ 'CTR(').SF16
.SF11    ANOP  , MAY YET FIND A CTR DEFAULT
&B(1)    SETB  (&DSCB(9) OR &DSCB(14) OR &DSCB(19))
         AIF   ('&C(1)' EQ '' AND &DSCB(4) AND NOT &B(1) AND           *
               &DSCB(24) AND &DSCB(29)).SF16 TRY DEFAULT CTR(D)
&B(1)    SETB  ('&C(1)' EQ 'STG' OR '&C(1)' EQ 'INQ' OR '&C(1)' EQ     *
               'RDR' AND NOT &PIB(24) OR '&C(1)' EQ 'RPB' AND &PIB(24))
&B(1)    SETB  (&B(1) OR '&C(1)' EQ 'LPB' OR '&C(1)' EQ 'IDR' OR       *
               '&C(1)' EQ 'CCR' OR '&C(1)' EQ 'IOB')              FSJW
&B(1)    SETB  (&B(1) OR '&C(1)' EQ '' AND &DSCB(4) AND (&DSCB(14) OR  *
               &DSCB(19)))
         AIF   (NOT &B(1)).SFX          ERROR IF THIS BIT IS OFF
&B(2)    SETB  ('&C(1)' EQ 'RPB' AND &PIB(24) OR '&C(1)' EQ 'CCR')
&B(3)    SETB  ('&C(1)' EQ 'IDR' OR '&C(1)' EQ 'CCR'                   C
               OR '&C(1)' EQ 'IOB')                               FSJW
&B(4)    SETB  ('&C(1)' NE 'IOB')      ON FOR BUFFERS EXCEPT IOB  FSJW
&B(5)    SETB  ('&C(1)' EQ 'RDR' AND NOT &PIB(24) OR '&C(1)' EQ 'LPB'  *
               OR '&C(1)' EQ 'RPB' AND &PIB(24))
&B(5)    SETB  (&B(5) OR '&C(1)' EQ 'IDR' OR '&C(1)' EQ 'CCR')
&B(6)    SETB  ('&C(1)' EQ 'INQ' OR '&C(1)' EQ 'LPB' OR '&C(1)' EQ     *
               'IDR' OR '&C(1)' EQ 'CCR')
         AIF   (T'&SYSLIST(&M,3) NE 'N').SF13  IF NOT SELFDEF TRY LNG
         AIF   ('&SYSLIST(&M,3)'(1,1) EQ 'C').SFX MUST NOT BE CHAR
         AIF   ('&SYSLIST(&M,2)' EQ 'X1' OR                            C
               '&SYSLIST(&M,2)' EQ 'X2').SFX                      FSJW
         AIF   (T'&SYSLIST(&M,2) EQ 'O' AND                            C
               (&DSCB(69) OR &DSCB(74))).SFX                      FSJW
&A(2)    SETA  &SYSLIST(&M,3)           CONVERT CODE TO VALUE OF N2
         AIF   (T'&SYSLIST(&M,2) EQ 'O').SF12  NO N1, TRY DEFAULT
         AIF   (T'&SYSLIST(&M,2) NE 'N').SF12
         AIF   ('&SYSLIST(&M,2)'(1,1) EQ 'C').SF12
&A(1)    SETA  &A(2)-&SYSLIST(&M,2)+1   CONVERT CODE TO LENGTH
         AGO   .SF16
.SF12    ANOP  , HERE FOR DEFAULT BUFFER N1
&B(8)    SETB  (&B(1) NE &DSCB(4) OR &B(2) NE &DSCB(9) OR &B(3) NE     *
               &DSCB(14) OR &B(4) NE &DSCB(19) OR &B(5) NE &DSCB(24))
&B(8)    SETB  (&B(8) OR &B(6) NE &DSCB(29) OR &DSCA(4) LE 0)
&I       SETA  24*&DSCB(14)+12*&DSCB(19)+6*&DSCB(24)+3*&DSCB(29)-11
&A(1)    SETA  &DSCA(4)+&B(8)*(&BUFA(&I)-&DSCA(4))
&A(1)    SETA  &A(2)-&A(1)+1            COMPUTE LENGTH
         AGO   .SF16
.SF13    AIF   (K'&SYSLIST(&M,3) LT 6).SF14
         AIF   ('&SYSLIST(&M,3)'(1,4) NE 'LNG(').SF14
&I       SETA  5
&C(1)    SETC  '0000000'                INITIALIZE COLLECTOR
&C(2)    SETC   '&SYSLIST(&M,3)'(&I,1)  EXTRACT FIRST CHARACTER
.SF13L   AIF   ('&C(2)' LT '0' OR '&C(2)' GT '9').SFX  NON-DEC HARD ERR
&C(1)    SETC  '&C(1)'(2,6).'&C(2)'     CONCATENATE VALID DIGIT
&I       SETA  &I+1                     BUMP POINTER
&C(2)    SETC  '&SYSLIST(&M,3)'(&I,1)   EXTRACT NEXT CHARACTER
         AIF   ('&C(2)' NE ')' AND '&C(1)'(1,1) EQ '0').SF13L
&A(1)    SETA  &C(1)                    CONVERT TO ARITHMETIC
         AGO   .SF16
.SF14    ANOP  , PROCESS COUNT OPERAND
&M       SETA  16                       POINT TO COUNT IN CALL
         AIF   (N'&SYSLIST(&M) EQ 0 AND NOT &B(6)).SFX NO COUNT OR STRG
&A(1)    SETA  K'&SYSLIST(1,1)-2        SET COUNT FOR CHARS IN STRING
         AIF   (N'&SYSLIST(&M) EQ 0 AND &B(6)).SF17  STRING, NO COUNT
&N       SETA  1                        POINT TO FIRST SUBOPERAND
&B(1)    SETB  ('&SYSLIST(&M,&N)' EQ 'MIN')  TEST FOR FIRST SUBOP 'MIN'
&N       SETA  &N+2*&B(1)               JUMP TWO SUBOPS IF SO
&B(2)    SETB  ('&SYSLIST(&M,&N)' EQ 'MAX')  TEST FOR THIS SUBOP  'MAX'
&N       SETA  &N+&B(2)                 JUMP ONE SUBOP IF SO
&B(3)    SETB  ('&SYSLIST(&M,&N+1)' EQ 'MAX' AND NOT &B(2))
&N       SETA  &N+&B(3)                 SHOULD BE AT 'MAX' OR FIRST NR
         AIF   (T'&SYSLIST(&M,&N) NE 'N').SF15  MUST BE SELF-DEFINING
         AIF   ('&SYSLIST(&M,&N)'(1,1) EQ 'C').SFX   MUST BE NUMERIC
&A(1)    SETA  &SYSLIST(&M,&N)          CONVERT CODE TO VALUE
.SF15    ANOP  , IF WERE AT NUMBER, IT IS PICKED UP
&N       SETA  &N+1                     ADVANCE TO PRESUMPTIVE NEXT
         AIF   (&B(1) OR &B(2) OR &B(3) OR T'&SYSLIST(&M,&N) NE        *
               'N').SF17                BRANCH TO COMPUTATION MAX OR N
         AIF   (T'&SYSLIST(&M,&N) NE 'N').SFX  MUST BE SELF-DEFINING
         AIF   ('&SYSLIST(&M,&N)'(1,1) EQ 'C').SFX   ERROR IF CHAR
         AIF   (&A(1) GE &SYSLIST(&M,&N)).SF17  DONE IF OLD NR GT OR EQ
&A(1)    SETA  &SYSLIST(&M,&N)          ELSE USE NEW NUMBER
         AIF   (&B(6)).SF17
.SF16    ANOP  , HERE TO COMPENSATE FOR SELFCHK GENERATE
&M       SETA  2                        POINT TO SELFCHK IN CALL
&C(1)    SETC  '&SYSLIST(&M,1)'
&B(1)    SETB  ('&C(1)' EQ '10' OR '&C(1)' EQ '11')
&B(1)    SETB  (&B(1) AND '&SYSLIST(&M,2)' EQ 'GENONLY' OR             X
               NOT &B(1) AND &DSCB(34) AND &DSCB(39))
&A(1)    SETA  &A(1)+&B(1)              AUGMENT COUNT FOR GENONLY
.SF17    AIF   (&A(1) GT &DFA(19)-&DFA(11)+1).SFX  PRT FIT WITHIN DOC
&A(1)    SETA  &DFA(19)-&DFA(11)+1-&A(1)  COMPUTE DIFFERENCE DOC-PRT
&PRTA(11) SETA &DFA(11)+&A(1)/2+&B(7)*(&A(1)+1)/2  R/C LOCATION FCN
.SFX     ANOP  , GENERAL EXIT FROM SELECTRIC-MOTION FIELD PREPROCESSOR
         AIF   (NOT &PIB(47)).DSP8
         IDFDSP 'AFTER FIELD MOTION CALCULATION',DFA,PRTA,A,PIB
.DSP8    ANOP
         AIF   (NOT &PIB(48)).TX
         MNOTE *,'IDF100 IN TRACE MODE LEAVING IDFIN02'
.TX      ANOP
         MEND
