00010000PROC 0 DEBUG
00020000/******************************************************************/
00030000/*                                                                */
00040000/* REFER   IPO1.CMDPROC(FINDFAIL)                                 */
00050000/* COMPID  SYSTEMS                                                */
00060000/* DOC     THIS CLIST IS EXECUTED AS AN IPCS SUBCOMMAND TO        */
00070000/*         LOCATE THE FIRST FAILING TCB IN THE DUMP. IF SUCH      */
00080000/*         A TCB IS FOUND THEN THE FOLLOWING IPCS DUMP SYMBOLS    */
00090000/*         ARE SET UP: TCBADDR, ASCBADDR, AND RTM2WA.             */
00100000/*         IT IS INVOKED BY CLIST SAVEDMP.                        */
00110000/*                                                                */
00120000/*  RETURN:      CODE=0 A FAILING TCB WAS FOUND                   */
00130000/*               CODE=8 NOT FOUND                                 */
00140000/*                                                                */
00150000/******************************************************************/
00160000/******************************************************************/
00170000/* INITIALIZATION                                                 */
00180000/******************************************************************/
00190000CONTROL END(ENDO) NOMSG                  /* SET DEFAULT CONTROL   */
00200000IF &DEBUG=DEBUG THEN                     /* IF DEBUG OPTION       */+
00210000  CONTROL SYMLIST CONLIST LIST MSG       /*   SET FULL LIST OPTION*/
00220000WRITE **** FINDFAIL CLIST ENTERED **** TIME=&SYSTIME
00230000/******************************************************************/
00240000/* LOCATE THE ASVT AND INSURE THAT THE ASID IS VALID              */
00250000/******************************************************************/
00260000SET &RC=12                               /* INIT RETURN CODE      */
00270000SET &FIRST=Y                             /* SET FIRST FLAG ON     */
00280000SET &ASID=0                              /* INITIALIZE ASID NUM   */
00290000LIST CVT LEN(16)                         /* CHECK FOR VALID CVT   */
00300000IF LASTCC NE 0 THEN GOTO NOTFND          /* IF NO CVT THEN EXIT   */
00310000LIST 2. HEADER LEN(2)                    /* CHECK FOR VALID HEADER*/
00320000IF LASTCC EQ 0 THEN                      /* IF VALID THEN         */+
00330000  DO
00340000   EVALUATE  2. HEADER LENGTH(2)         /* CURRENT ASID IN DUMP  */
00350000   SET  &ASID=&LASTCC                    /* SAVE ASID NUMBER      */
00360000  ENDO
00370000IF &ASID=0 THEN                          /* CHECK FOR INVALID ASID*/+
00380000  SET &ASID=1                            /* SET DEFAULT TO 1      */
00390000EQUATE ASVTADDR 4C.%+22C% PTR LE(4)      /* ADDRESS OF ASVT       */
00400000COMPARE ADDR(ASVTADDR+200)               /* CHECK ACRONYM         */+
00410000  WITH(VALUE(C'ASVT')) LEN(4)            /*  IN ASVT              */
00420000IF &LASTCC NE 0 THEN                     /* CHECK FOR VALID DATA  */+
00430000  DO
00440000    WRITE ---> ASVT NOT FOUND <--&STR(-)
00450000    GOTO NOTFND                          /* EXIT NO ASVT          */
00460000  ENDO
00470000EVALUATE ASVTADDR+204 LENGTH(4)          /* CONTENTS OF ASVTMAXU  */
00480000SET &ASVTMAXU=&LASTCC                    /* SAVE THE VALUE        */
00490000IF &ASVTMAXU>300 THEN                    /* CHECK FOR VALID DATA  */+
00500000  SET &ASVTMAXU=300                      /* MAX LOOP COUNT IS 300 */
00510000SET &RC=00                               /* INIT RETURN CODE      */
00520000DO WHILE &ASID LE &ASVTMAXU              /* LOOP THRU ASVT        */
00530000/******************************************************************/
00540000/* INSURE THAT THIS MEMORY IS ASSIGNED                            */
00550000/******************************************************************/
00560000  SET &ASVTOFFS=&ASID*4                  /* ASVT OFFSET           */
00570000  SET &MEM=ASID(&ASID)                   /* SET ASID FOR COMMANDS */
00580000  COMPARE ADDR(ASVTADDR+20C+&ASVTOFFS.N) /* CHECK FOR FREE ENTRY  */+
00590000    WITH(VALUE(X'80')) LEN(1)
00600000  IF &LASTCC EQ 0 THEN               /* IF COMPARE WAS EQ THEN      */+
00610000    GOTO ASCBNXT                     /* MEMORY IS NOT ASSIGNED      */
00620000  EQ ASCBADDR ASVTADDR+20C+&ASVTOFFS.N% /* CREATE SYMBOLS FOR ASCB  */+
00630000    &MEM STR(ASCB)                   /*                             */+
00640000    REMARK('ASCB OF FAILING TASK')
00650000  COMPARE ADDR(ASCBADDR+0)               /* CHECK ACRONYM         */+
00660000    WITH(VALUE(C'ASCB')) LEN(4)          /*  IN ASCB              */
00670000  IF LASTCC NE 0 THEN GOTO ASCBNXT
00680000  EVALUATE ASCBADDR+6C% L(4) &MEM    /* ASXB ADDRESS                */
00690000  IF &LASTCC=12 THEN                 /* CHECK IF ASXB IS THERE      */+
00700000    GOTO ASCBNXT                     /* MUST NOT BE AVAILABLE       */
00710000  EQ ASXBADDR ASCBADDR+6C% &MEM STR(ASXB) /* ELSE SET ASXB SYMBOL   */
00720000  SET &TCBCTR=1                      /* COUNT OF TCBS               */
00730000  EVALUATE ASXBADDR+4% LENGTH(4) &MEM /* 1ST TCB ADDRESS            */
00740000  IF &LASTCC=12 THEN                 /* CHECK 1ST TCB               */+
00750000    GOTO ASCBNXT                     /* MUST NOT BE AVAILABLE       */
00760000  COMPARE ADDR(ASXBADDR+0)               /* CHECK ACRONYM         */+
00770000    WITH(VALUE(C'ASXB')) LEN(4)          /*  IN ASCB              */
00780000  IF LASTCC NE 0 THEN GOTO ASCBNXT
00790000  EVALUATE ASXBADDR+4 LENGTH(4) &MEM /* SAVE THE TCB ADDRESS IN A   */
00800000  SET &TCBADDR=&LASTCC               /*   SYMBOLIC VARIABLE         */
00810000  EQ TCBADDR ASXBADDR+4% &MEM STR(TCB) /* CREATE TCB SYMBOL         */+
00820000         REMARK('TCB OF FAILING TASK')
00830000  /******************************************************************/
00840000  /* PROCESS ALL TCBS FOR THIS ADDRESS SPACE                        */
00850000  /******************************************************************/
00860000  SET ABEND=0                        /* SET ABEND FLAG              */
00870000  DO WHILE &TCBADDR^=0               /* LOOP FOR ALL TCBS           */
00880000    COMPARE ADDR(TCBADDR+100)            /* CHECK ACRONYM         */+
00890000      WITH(VALUE(C'TCB ')) LEN(4)        /*  IN TCB               */
00900000    IF LASTCC NE 0 THEN GOTO ASCBNXT
00910000    COMPARE ADDR(TCBADDR+10)         /* CHECK FOR NON-ZERO TCBCMP   */+
00920000      WITH(VALUE(X'00000000')) LEN(4) &MEM /* TCB COMPLETION CODE   */
00930000    IF &LASTCC^=0 THEN               /* IF NON-ZERO THEN            */+
00940000      SET ABEND=1                    /*   FOUND AN ABEND            */
00950000    COMPARE ADDR(TCBADDR+E0)         /* CHECK FOR RTW2WA IN TCB     */+
00960000      WITH(VALUE(X'00000000')) LEN(4) &MEM /*                       */
00970000    IF &LASTCC^=0 THEN               /* IF NON-ZERO THEN            */+
00980000      SET ABEND=&ABEND+2             /*   FOUND AN RTM2WA           */
00990000    IF &ABEND NE 0 THEN              /* IF THIS TCB FAILED          */+
01000000      GOTO TCBFND                    /*   THEN EXIT TCBLOOP         */
01010000    SET &TCBCTR=&TCBCTR+1            /* PLUS 1 TO TCB COUNTER       */
01020000    EVALUATE TCBADDR+74% L(4) &MEM   /* CHECK NEXT TCB ADDRESS      */
01030000    IF &LASTCC=12 THEN               /* IS THERE A NEXT TCB         */+
01040000      GOTO ASCBNXT                   /* MUST NOT BE AVAILABLE       */
01050000    EVALUATE TCBADDR+74 L(4) &MEM    /* SAVE NEXT TCB ADDRESS IN    */
01060000    SET &TCBADDR=&LASTCC             /*   SYMBOLIC VARIABLE         */
01070000    EQ TCBADDR TCBADDR+74% &MEM STR(TCB) /* GO PROCESS NEXT TCB     */+
01080000         REMARK('TCB OF FAILING TASK')
01090000  ENDO                               /* END OF TCB LOOP             */
01100000ASCBNXT: +
01110000  IF &FIRST=Y THEN                   /* IF FIRST TIME THRU THEN     */+
01120000    SET &ASID=1                      /*  RESET TO ASID 1            */
01130000  ELSE                               /* ELSE                        */+
01140000    SET &ASID=&ASID+1                /*  INCREMENT TO NEXT TCB      */
01150000  SET &FIRST=N                       /* RESET FIRST TIME FLAG       */
01160000ENDO                                 /* END OF ASCB LOOP            */
01170000SET &RC=08                               /* INIT RETURN CODE      */
01180000NOTFND: +
01190000CONTROL NOMSG                        /* ENTER HERE WHEN NON FOUND   */
01200000DROPSYM (ASCBADDR,RTM2WA,TCBADDR)    /* DROP RELEVANT SYMBOLS USED  */
01210000GOTO FINDEXIT                        /* EXIT WITH RETURN CODE       */
01220000/********************************************************************/
01230000/* ENTER HERE TO EXIT WHEN A TCB HAS BEEN FOUND                     */
01240000/********************************************************************/
01250000TCBFND: +
01260000    EQUATE RTM2WA TCBADDR+E0% &MEM STR(RTM2WA) LEN(872) +
01270000         REMARK('RTM2 WORK AREA FOR FAILING TASK')
01280000    CONTROL MSG
01290000    LIST (RTM2WA,ASCBADDR,TCBADDR) +
01300000         DIS(MACHINE,STORAGE,REQUEST,REMARK,SYMBOL)
01310000    CONTROL NOMSG
01320000FINDEXIT: +
01330000    WRITE **** FINDFAIL CLIST ENDED. CODE=&RC **** TIME=&SYSTIME
01340000    EXIT CODE(&RC)
