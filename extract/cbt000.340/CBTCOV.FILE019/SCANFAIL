00010024PROC 0 TEST NOTEST
00020000/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
00030000/* CLIST SACNFAIL ..... AN IPCS SUBCOMMAND USED TO LOCATE THE FIRST  */
00040000/*                FAILING TCB IN THE DUMP. IF SUCH A TCB IS FOUND    */
00050000/*                THEN THE FOLLOWING IPCS DUMP SYSBOLS ARE SETUP:    */
00060007/*                TCB                                                */
00070008/*                ASCB,                                              */
00080000/*                RTM2WA.                                            */
00090000/*                                                                   */
00100000/* INVOKED BY ... SCANDMP                                            */
00110000/*                                                                   */
00120000/*  RETURN CODES                                                     */
00130000/*         0 ... A FAILING TCB WAS FOUND                             */
00140000/*         8 ... NOT FOUND                                           */
00150000/*                                                                   */
00160000/*                                                                   */
00170000/*                                                                   */
00180000/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
00190000/*                                                                   */
00200000/*    INITIALIZATION                                                 */
00210000/*                                                                   */
00220000/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
00230019CONTROL END(END) NOMSG               /* SET DEFAULT CONTROL*/
00240025IF &TEST = TEST THEN                 /* IF TEST OPTION               */+
00250000   CONTROL SYMLIST CONLIST LIST MSG  /* SET FULL LIST OPTION         */
00260000/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
00270000/*   LOCATE THE ASVT AND INSURE THAT THE ASID IS VALID               */
00280000/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
00290000SET &RC = 12                         /* INIT RETURN CODE             */
00300000SET &FIRST = Y                       /* SET FIRST FLAG ON            */
00310000LIST 2. HEADER LEN(2)                /* CHECK FOR VALID HEADER       */
00320000IF &LASTCC = 0 THEN                  /* IF VALID THEN                */+
00330000  DO
00340000    EVALUATE 2. HEADER LENGTH(2)     /* CURRENT ASID IN DUMP         */
00350000    SET &ASID = &LASTCC              /* SAVE ASID NUMBER             */
00360019  END
00370031IF &ASID NE 0 THEN GOTO SETASID      /* CHECK FOR INVALID ASID       */
00380032WRITENR ENTER ASID TO BE CHECKED ====>
00390029READ &ASID
00400032IF &ASID =  THEN SET &ASID = 1
00410030SETASID: +
00420010SETDEF ASID(&ASID)
00430028EQUATE ASVTPTR 10.%+22C% PTR LEN(4)   /* ADDRESS OF ASVT              */
00440028COMPARE ADDR(ASVTPTR+200)            /* CHECK ACRONYM                */+
00450000  WITH(VALUE(C'ASVT')) LEN(4)        /*  IN ASVT                     */
00460000IF &LASTCC NE 0 THEN DO               /* CHECK FOR VALID DATA         */
00470000    WRITE ---> ASVT NOT FOUND <---
00480000    GOTO NOTFND                      /* EXIT - NO ASVT               */
00490019  END
00500028EVALUATE ASVTPTR+204 LENGTH(4)   /* CONTENTS OF ASVTMAXU         */
00510000SET &ASVTMAXU = &LASTCC              /* SAVE THE VALUE               */
00520031IF &ASVTMAXU > 800 THEN              /* CHECK FOR VALID DATA         */+
00530000  SET &ASVTMAXU = 800                /* MAX LOOP COUNT IS 800        */
00540000SET &RC = 00                         /* INIT RETURN CODE             */
00550000DO WHILE &ASID LE &ASVTMAXU          /*     LOOP THRU ASVT           */
00560000/*********************************************************************/
00570000/* INSURE THAT THIS MEMORY IS ASSIGNED                               */
00580000/*********************************************************************/
00590000  SET &ASVTOFFS=&ASID*4              /*     ASVT OFFSET              */
00600028  COMPARE ADDR(ASVTPTR+20C+&ASVTOFFS.N) /* CHECK FOR FREE ENTRY */+
00610000    WITH(VALUE(X'80')) LEN(1)
00620000  IF &LASTCC EQ 0 THEN               /* IF COMPARE WAS EQ THEN       */+
00630000    GOTO ASCBNXT                     /* MEMORY IS NOT ASSIGNED       */
00640028  EQ ASCB ASVTPTR+20C+&ASVTOFFS.N% STR(ASCB)
00650012  COMPARE ADDR(ASCB+0)           /*     CHECK ACRONYM            */+
00660000    WITH(VALUE(C'ASCB')) LEN(4)      /*      IN ASCB                 */
00670000  IF &LASTCC NE 0 THEN GOTO ASCBNXT
00680012  EVALUATE ASCB+6C% L(4)          /* ASXB ADDRESS                */
00690000  IF &LASTCC=12 THEN                 /* CHECK IF ASXB IS THERE       */+
00700000    GOTO ASCBNXT                     /* MUST NOT BE AVAILABLE        */
00710014  EQ ASXB ASCB+6C%    STR(ASXB)      /* ELSE SET ASXB SYMBOL */
00720000  SET &TCBCTR=1                      /* COUNT OF TCBS                */
00730012  EVALUATE ASXB+4% LENGTH(4)          /* 1ST TCB ADDRESS         */
00740000  IF &LASTCC=12 THEN                 /* CHECK 1ST TCB                */+
00750000    GOTO ASCBNXT                     /* MUST NOT BE AVAILABLE        */
00760012  COMPARE ADDR(ASXB+0)           /*     CHECK ACRONYM            */+
00770000    WITH(VALUE(C'ASXB')) LEN(4)      /*      IN ASCB                 */
00780000  IF &LASTCC NE 0 THEN GOTO ASCBNXT
00790012  EVALUATE ASXB+4 LENGTH(4)          /* SAVE THE TCB ADDRESS IN A */
00800012  SET &TCB=&LASTCC               /*   SYMBOLIC VARIABLE          */
00810014  EQ TCB ASXB+4% STR(TCB)                   /* TCB SYMBOL    */
00820000  /*******************************************************************/
00830000  /* PROCESS ALL TCBS FOR THIS ADDRESS SPACE                         */
00840000  /*******************************************************************/
00850000  SET ABEND=0                        /* SET ABEND FLAG               */
00860012  DO WHILE &TCB^=0               /* LOOP FOR ALL TCBS            */
00870012    COMPARE ADDR(TCB+100)        /*     CHECK ACRONYM            */+
00880000      WITH(VALUE(C'TCB ')) LEN(4)    /*       IN TCB                 */
00890000    IF &LASTCC NE 0 THEN GOTO ASCBNXT
00900012    COMPARE ADDR(TCB+10)         /* CHECK FOR NON-ZERO TCBCMP    */+
00910010      WITH(VALUE(X'00000000')) LEN(4)      /* TCB COMPLETION CODE    */
00920000    IF &LASTCC^=0 THEN               /* IF NON-ZERO THEN             */+
00930000      SET ABEND=1                    /*   FOUND AN ABEND             */
00940015    COMPARE ADDR(TCB+E0%)        /* CHECK FOR RTW2WA IN TCB      */+
00950015      WITH(VALUE(C'RTM2')) LEN(4)      /*                        */
00960015    IF &LASTCC =0 THEN               /* IF NON-ZERO THEN             */+
00970000      SET ABEND=&ABEND+2             /*   FOUND AN RTM2WA            */
00980000    IF &ABEND NE 0 THEN              /* IF THIS TCB FAILED           */+
00990000      GOTO TCBFND                    /*   THEN EXIT TCBLOOP          */
01000000    SET &TCBCTR=&TCBCTR+1            /* PLUS 1 TO TCB COUNTER        */
01010016    EVALUATE TCB+74% L(4)              /* CHECK NEXT TCB ADDRESS     */
01020000    IF &LASTCC=12 THEN               /* IS THERE A NEXT TCB          */+
01030000      GOTO ASCBNXT                   /* MUST NOT BE AVAILABLE        */
01040016    EVALUATE TCB+74 L(4)              /* SAVE NEXT TCB ADDRESS IN    */
01050016    SET &TCB=&LASTCC                 /*   SYMBOLIC VARIABLE          */
01060016    EQ TCB TCB+74%  STR(TCB)                        /* NEXT TCB      */
01070019  END                                /* END OF TCB LOOP              */
01080000ASCBNXT: +
01090026  GOTO NOTFND
01100019  END                                /* END OF ASCB LOOP             */
01110000NOTFND: +
01120023SET &RC=08                           /*     INIT RETURN CODE         */
01130000CONTROL NOMSG                        /* ENTER HERE WHEN NON FOUND    */
01140035    EQUATE TIOT TCB+C%    STR(TIOT)
01150000WRITE RETURN CODE IS &RC
01160000EXIT CODE(&RC)                       /* EXIT WITH RETURN CODE        */
01170000/*********************************************************************/
01180000/* ENTER HERE TO EXIT WHEN A TCB HAS BEEN FOUND                      */
01190000/*********************************************************************/
01200000TCBFND: +
01210014    COMPARE ADDR(TCB+E0%) WITH (VALUE(C'RTM2')) LEN(4)
01220013    IF &LASTCC EQ 0 THEN                                               +
01230027    EQUATE RTM2WA TCB+E0% STR(RTM2WA) LEN(256)
01240014    EQUATE TIOT TCB+C%    STR(TIOT)
01250000    EXIT CODE(&RC)
