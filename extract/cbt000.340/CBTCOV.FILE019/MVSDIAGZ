00010000PROC 0  DEBUG
00020000 GLOBAL &HEXVALUE
00030000 GLOBAL &VALUE
00040000/**********************************************************************/
00050000/*     H     H   EEEEEEE    AAAAA    DDDDDD    EEEEEEE   RRRRRR       */
00060000/*     H     H   E         A     A   D     D   E         R     R      */
00070000/*     HHHHHHH   EEEEEEE   AAAAAAA   D     D   EEEEEEE   RRRRRR       */
00080000/*     H     H   E         A     A   D     D   E         R   R        */
00090000/*     H     H   EEEEEEE   A     A   DDDDDD    EEEEEEE   R     R      */
00100000/*                                                                    */
00110000/**********************************************************************/
00120000/*  CLIST NAME: MVSDIAG3          REL/DATE: 1.0/03.20.79              */
00130000/*                                                                    */
00140000/*  DOC: THIS CLIST PROMPTS THE USER FOR INPUT AND ACTS UPON THAT     */
00150000/*       INPUT DYNAMICALLY.  NO FURTHER DOCUMENTATION IS NEEDED.      */
00160000/*                                                                    */
00170000/*  SYMBOLS EQUATED: NONE                                             */
00180000/*                                                                    */
00190000/*  SYMBOLS FOUND:   NONE                                             */
00200000/*                                                                    */
00210000/*  RETURN: CONTROL IS PASSED TO THE CALLING CLIST.                   */
00220000/*                                                                    */
00230000/*  DEPENDENCIES: 1) THIS CLIST REQUIRES THAT COMMAND                 */
00240000/*                   CLRSCRN BE INSTALLED IN YOUR ENVIRONMENT.        */
00250000/*                                                                    */
00260000/*                2) THIS CLIST REQUIRES THAT CLIST 'HEX' BE          */
00270000/*                   INSTALLED IN YOUR ENVIRONMENT.                   */
00280000/*                                                                    */
00290000/*                3) THIS CLIST IS NOT FOR AN MVS/SE SINCE SU50       */
00300000/*                   HAS CHANGED SOME CONTROL BLOCK OFFSETS           */
00310000/*                                                                    */
00320000/*  USE: THIS CLIST CAN BE USED TO SCAN TCB'S, RB'S , REGISTERS       */
00330000/*       IN AN MVS DUMP.                                              */
00340000/*                                                                    */
00350000/*XXX******************************************************************/
00360000    IF &DEBUG NE DEBUG THEN CONTROL MSG NOSYM NOCON NOLIST   PROMPT
00370000      ELSE                  CONTROL MSG   SYM   CON   LIST   PROMPT
00380000    SET &RCODE=0
00390000    SET &PAD=&STR(000)
00400000START:                                                                 +
00410000    WRITE ENTER ASID (IN DECIMAL), OR DEPRESS ENTER OR X TO EXIT
00420000    WRITENR (DEFAULT IS CURRENT OR ASID(1)===>
00430000     READ &ASID
00440000    IF &ASID= X THEN GOTO EXIT
00450000    IF &ASID=   | +
00460000      &ASID=0 THEN DO                     /* TO LOOK AT.  IF HE ENTERS*/
00470000        EVAL 2. HEADER LENGTH(2)          /* ASID ONE BY DEFAULT.     */
00480000        SET &ASID=&LASTCC
00490000        IF &ASID=0 THEN  +
00500000          SET &ASID=1
00510000      END
00520000    ELSE
00530000      IF &LENGTH(&ASID)<3 THEN DO         /* ADJUST ASID SIZE         */
00540000        SET &FILL=&SUBSTR(1:3-&LENGTH(&ASID),&PAD)
00550000        SET &ASID=&STR(&FILL&ASID)
00560000        END
00570000    SET &MEM=&STR(ASID(&ASID))           /* CHECK TO SEE IF THIS      */
00580000    EQUATE ASVTADDR 4C.%+22C% PTR LE(4)  /* MEMORY IS HIGHER THAT THE */
00590000    EVAL ASVTADDR+204 LENGTH(4)          /* MAMIMUM USERS, AND IF SO  */
00600000    SET &ASVTMAXU=&LASTCC                /* TELL THE USER             */
00610000    IF &ASID>&ASVTMAXU THEN DO
00620000      WRITE ===> ERROR: &MEM IS GREATER THAN MAX USERS(&ASVTMAXU)
00630000      GOTO START
00640000      END
00650000    ELSE
00660000     SET &ASVTOFFS=&ASID*4              /* IS ASSIGNED, IF NOT, TELL */
00670000    COMPARE ADDR(ASVTADDR+20C+&ASVTOFFS.N)                             +
00680000    LENGTH(1) WITH(VALUE(X'80'))        /* TELL THE USER             */
00690000    IF &LASTCC=0 THEN DO
00700000      WRITE LASTCC=&LASTCC
00710000      L ASVTADDR+20C+&ASVTOFFS.N LEN(1)
00720000      WRITE ===> ERROR: &MEM IS NOT ASSIGNED
00730000      GOTO START
00740000    END
00750000      ELSE
00760000      EQ ASCBADDR ASVTADDR+20C+&ASVTOFFS.N%  /* EXAMINE  TCB'S       */
00770000      EVAL ASCBADDR+AC LE(4) &MEM            /* AND RB'S             */
00780000      IF &LASTCC^=0 THEN DO                  /* AND DISPLAY THEM     */
00790000        L ASCBADDR+AC% LE(8) &MEM C
00800000        END
00810000     EVAL ASCBADDR+B0 LE(4) &MEM
00820000     IF &LASTCC^=0 THEN DO
00830000       L ASCBADDR+B0% LE(8) &MEM C
00840000       END
00850000     EVAL ASCBADDR+6C% L(4) &MEM         /* GIVE ERROR MESSAGE FOR   */
00860000     IF &LASTCC=12 THEN DO               /* ASXB NOT AVAILABLE       */
00870000       SET &RCODE=4
00880000       GOTO EXIT
00890000       END
00900000     ELSE
00910000       EQ ASXBADDR ASCBADDR+6C% PTR &MEM LENGTH(4)
00920000     SET &TCBALPHA=&STR(A)
00930000     SET &LETTERS=&STR(ABCDEFGHIJKLMNOPQRSTUVWXYZ)
00940000     SET &CTR=1                         /* EQUATE TCB NAMES WITH    */
00950000     SET &CTA=A                         /* THOSE USED BY IPCS.      */
00960000     SET &CTB=1
00970000     SET &TCBCTR=&STR(&ASID&CTA&TCBALPHA)
00980000     SET &RBC=&CTA&TCBALPHA
00990000     EVAL ASXBADDR+4% LENGTH(4) &MEM
01000000     IF LASTCC=12 THEN DO
01010000       SET &RCODE=4
01020000       GOTO EXIT
01030000       END
01040000     ELSE
01050000       EVAL ASXBADDR+4 LENGTH(4) &MEM
01060000    SET &TCBADDR=&LASTCC
01070000    EQ TCBADDR ASXBADDR+4% PTR &MEM LENGTH(4)
01080000    DO WHILE &TCBADDR^=0
01090000      EVAL TCBADDR+11 LENGTH(3)
01100000      SET &CMP=&LASTCC
01110000      IF &CMP=0 THEN GOTO REGS
01120000      %HEX &CMP
01130000      SET &CMP=&HEXVALUE
01140000      NOTE '**** TCB&TCBCTR HAS A COMPLETION CODE OF S&CMP ***' SPACE
01150000      EVAL TCBADDR+E0 LEN(4)
01160000      IF &LASTCC=0 THEN GOTO REGS
01170000      EQ RTM2WA TCBADDR+E0% PTR &MEM
01180000      EQ RTM2 RTM2WA LEN(500) STR(RTM2) &MEM
01190000      EQ REGS RTM2WA+3C L(64) STR(REGS) &MEM
01200000      EQ R0 REGS L(4) STR(REGS) &MEM
01210000      EQ R1 REGS+4 L(4) STR(REGS) &MEM
01220000      EQ R2 REGS+8 L(4) STR(REGS) &MEM
01230000      EQ R3 REGS+C L(4) STR(REGS) &MEM
01240000      EQ R4 REGS+10 L(4) STR(REGS) &MEM
01250000      EQ R5 REGS+14 L(4) STR(REGS) &MEM
01260000      EQ R6 REGS+18 L(4) STR(REGS) &MEM
01270000      EQ R7 REGS+1C L(4) STR(REGS) &MEM
01280000      EQ R8 REGS+20 L(4) STR(REGS) &MEM
01290000      EQ R9 REGS+24 L(4) STR(REGS) &MEM
01300000      EQ R10 REGS+28 L(4) STR(REGS) &MEM
01310000      EQ R11 REGS+2C L(4) STR(REGS) &MEM
01320000      EQ R12 REGS+30 L(4) STR(REGS) &MEM
01330000      EQ R13 REGS+34 L(4) STR(REGS) &MEM
01340000      EQ R14 REGS+38 L(4) STR(REGS) &MEM
01350000      EQ R15 REGS+3C L(4) STR(REGS) &MEM
01360000      EQ RTM2PSW REGS+40 L(16) STR(REGS) &MEM
01370000      LIST REGS
01380000      LIST RTM2PSW
01390000REGS:                                                                  +
01400000      SET &RBERR=0
01410000      SET &RBCTR=&STR(001)
01420000      EVAL TCBADDR+0% L(4) &MEM
01430000      IF &LASTCC=12 THEN DO
01440000        SET &RCODE=4
01450000        SET &RBERR=1
01460000        END
01470000      ELSE
01480000        EVAL TCBADDR+0 L(4) &MEM
01490000      SET &RBADDR=&LASTCC
01500000      EQ RBADDR TCBADDR+0% PTR &MEM L(4)
01510000RBLOOP:                                                                +
01520000        SET &MODNAME=0
01530000        EVAL RBADDR-2 LEN(2)
01540000        SET &RBINTCOD=&LASTCC
01550000        %HEX &RBINTCOD
01560000        SET &RBINTCOD=&HEXVALUE
01570000        EQ &RBC&RBCTR&ASID RBADDR STR(RB) &MEM
01580000        SET &RBCTR=&RBCTR+1
01590000        IF &LENGTH(&RBCTR)<3 THEN DO
01600000          SET &FILL=&SUBSTR(1:3-&LENGTH(&RBCTR),&PAD)
01610000          SET &RBCTR=&STR(&FILL&RBCTR)
01620000        END
01630000        EVAL RBADDR+1C% L(4) &MEM
01640000        IF &LASTCC=12 THEN DO
01650000          SET &RCODE=4
01660000          GOTO RBEND
01670000          END
01680000        COMPARE ADDR(RBADDR+1C%+100)  LEN(4)                           +
01690000         WITH (VALUE(C'TCB ')) LEN(4)
01700000        IF &LASTCC NE 0 THEN DO
01710000          EVAL RBADDR+1C L(4) &MEM
01720000          SET &RBADDR=&LASTCC
01730000          EQ RBADDR RBADDR+1C% PTR &MEM LENGTH(4)
01740000          GOTO RBLOOP
01750000          END
01760000RBEND:                                                                 +
01770000      SET &CTR=&CTR+1
01780000      IF &CTR=26 THEN DO
01790000        SET &CTR=1
01800000        SET &CTA=&SUBSTR(&CTB:&CTB,LETTERS)
01810000        END
01820000      SET &TCBALPH=&SUBSTR(&CTR:&CTR,&LETTERS)
01830000      SET &TCBALPHA=&STR(&CTA&TCBALPH)
01840000      SET &TCBCTR=&STR(&ASID&TCBALPHA)
01850000      SET &RBC=&CTA&TCBALPH
01860000      EVAL TCBADDR+74% L(4) &MEM
01870000      IF &LASTCC=12 THEN DO
01880000        SET &RCODE=4
01890000        GOTO EXIT
01900000        END
01910000      ELSE
01920000        EVAL TCBADDR+74 L(4) &MEM
01930000      SET &TCBADDR=&LASTCC
01940000      EQ TCBADDR TCBADDR+74% PTR &MEM LENGTH(4)
01950000      END
01960000EXIT: SETD DISPLAY(SYMBOL)  NOPRINT
01970000    EXIT
