00010000PROC 0 ASID() DEBUG
00020000/*********************************************************************/
00030000/* REFER   IPO1.CMDPROC(LISTREGS)                                    */
00040000/* COMPID  SYSTEMS                                                   */
00050000/* DOC     THIS CLIST EXECUTES UNDER IPCS TO DISPLAY THE REGISTERS   */
00060000/*         FOR ALL TCBS AND RBS IN A MEMORY CONTAINED IN THE DUMP    */
00070000/*         BEING ANALYZED. IT ALSO DISPLAYS THE MODULE NAME, IF      */
00080000/*         AVAILABLE, FOR ALL PRBS AND THE INTERRUPT CODE FOR ALL    */
00090000/*         RBS. OPTIONALLY, IT LISTS THE ABOVE DATA FOR A SPECIFIC   */
00100000/*         ASID.                                                     */
00110000/*                                                                   */
00120000/*********************************************************************/
00130000/******************************************************************/
00140000/* INITIALIZATION                                                 */
00150000/******************************************************************/
00160000IF &DEBUG=DEBUG THEN CONTROL SYMLIST CONLIST LIST
00170000SET &RCODE=0                       /* SET RETURN CODE             */
00180000/******************************************************************/
00190000/* PROCESS THE ASID                                               */
00200000/******************************************************************/
00210000IF &ASID =   |                     /* NO ASID SPECIFIED OR        */+
00220000  &ASID=0 THEN                     /* SPECIFIED ASID=0            */+
00230000  DO
00240000    EVAL 2. HEADER LENGTH(2)       /* CURRENT ASID, IF ANY        */
00250000    SET &ASID=&LASTCC              /* SAVE THE VALUE              */
00260000    IF &ASID=0 THEN                /* IF ABSOLUTE DUMP            */+
00270000      SET &ASID=1                  /* DEFAULT TO 1                */
00280000    ELSE                           /* USE CURRENT VIRTUAL VALUE   */
00290000  END
00300000ELSE                               /* USE SPECIFIED VALUE         */
00310000SET &MEM=ASID(&ASID)               /* SET SUBCOMMAND KEYWORD      */
00320000/******************************************************************/
00330000/* LOCATE THE ASVT AND INSURE THAT THE ASID IS VALID              */
00340000/******************************************************************/
00350000EQUATE ASVTADDR 4C.%+22C% PTR LE(4)/* ADDRESS OF ASVT             */
00360000EVAL ASVTADDR+204 LENGTH(4)        /* CONTENTS OF ASVTMAXU        */
00370000SET &ASVTMAXU=&LASTCC              /* SAVE THE VALUE              */
00380000IF &ASID>&ASVTMAXU THEN            /* INSURE VALID ASID           */+
00390000  DO
00400000    WRITE ==> ERROR: &MEM IS GREATER THAN MAX USERS(&ASVTMAXU)
00410000    SET &RCODE=8                   /* ERROR RETURN CODE           */
00420000    GOTO EXIT
00430000  END
00440000ELSE                               /* HAVE VALID ASID             */
00450000/******************************************************************/
00460000/* INSURE THAT THIS MEMORY IS ASSIGNED                            */
00470000/******************************************************************/
00480000SET &ASVTOFFS=&ASID*4              /* OFFSET INTO ENTRIES OF ASVT */
00490000COMPARE ADDR(ASVTADDR+20C+&ASVTOFFS.N) /* INSURE MEMORY ASSIGNED  */+
00500000  LENGTH(1) WITH(VALUE(X'80'))
00510000IF &LASTCC=0 THEN                  /* NOT ASSIGNED                */+
00520000  DO
00530000    WRITE ==> ERROR: &MEM IS NOT ASSIGNED
00540000    SET &RCODE=8                   /* SET RETURN CODE             */
00550000    GOTO EXIT
00560000  END
00570000ELSE                               /* MEMORY IS ASSIGNED          */
00580000/******************************************************************/
00590000/* SET UP THE HEADER AND PAGE CONTROL                             */
00600000/******************************************************************/
00610000NOTE '*************************************************************+
00620000******' PAGE
00630000NOTE '***    DISPLAY OF ALL TCB AND RB REGISTERS FOR &MEM   -
00640000      ***'
00650000NOTE '*************************************************************+
00660000******'
00670000/******************************************************************/
00680000/* LOCATE THE ASCB, ASXB, AND 1ST TCB FOR THIS MEMORY             */
00690000/******************************************************************/
00700000EQ ASCBADDR ASVTADDR+20C+&ASVTOFFS.N% &MEM   /* ASCB ADDRESS      */
00710000EVAL ASCBADDR+6C% L(4) &MEM        /* ASXB ADDRESS                */
00720000IF &LASTCC=12 THEN                 /* MUST NOT BE AVAILABLE       */+
00730000  DO
00740000    NOTE '==> ERROR: ASXB NOT AVAILABLE FOR &MEM'
00750000    SET &RCODE=4                   /* SET RETURN CODE             */
00760000    GOTO EXIT
00770000  END
00780000ELSE                               /* ASXB STORAGE IS AVAILABLE   */
00790000EQ ASXBADDR ASCBADDR+6C% PTR &MEM  /* ADDRESS OF ASXB             */+
00800000  LENGTH(4)
00810000SET &TCBCTR=1                      /* COUNT OF TCBS               */
00820000EVAL ASXBADDR+4% LENGTH(4) &MEM    /* 1ST TCB ADDRESS             */
00830000IF &LASTCC=12 THEN                 /* MUST NOT BE AVAILABLE       */+
00840000  DO
00850000    NOTE '==> ERROR: TCB&TCBCTR NOT AVAILABLE FOR &MEM'
00860000    SET &RCODE=4                   /* SET RETURN CODE             */
00870000    GOTO EXIT
00880000  END
00890000ELSE                               /* TCB STORAGE IS AVAILABLE    */
00900000EVAL ASXBADDR+4  LENGTH(4) &MEM    /* SAVE THE TCB ADDRESS IN A   */
00910000SET &TCBADDR=&LASTCC               /*   SYMBOLIC VARIABLE         */
00920000EQ TCBADDR ASXBADDR+4% PTR &MEM    /* TCB ADDRESS                 */+
00930000  LENGTH(4)
00940000/******************************************************************/
00950000/* PROCESS ALL TCBS FOR THIS ADDRESS SPACE                        */
00960000/******************************************************************/
00970000DO WHILE &TCBADDR^=0               /* LOOP FOR ALL TCBS           */
00980000  NOTE '*** TCB&TCBCTR    --DISPLAY OF GENERAL REGISTERS--' SPACE(2)
00990000  LIST  TCBADDR+30 L(4) ENTRIES(0:15) HEX &MEM
01000000  NOTE SPACE(1)
01010000  /****************************************************************/
01020000  /* FIND THE 1ST RB ADDRESS FOR THIS TCB                         */
01030000  /****************************************************************/
01040000  SET &RBERR=0                     /* NO RBS MISSING FOR THIS TCB */
01050000  SET &RBCTR=1                     /* INITIALIZE RB COUNTER       */
01060000  EVAL TCBADDR+0% L(4) &MEM        /* INSURE THE RB IS AVAILABLE  */
01070000  IF &LASTCC=12 THEN               /* MUST NOT BE AVAILABLE       */+
01080000    DO
01090000      NOTE '==> ERROR: RB&RBCTR NOT AVAILABLE FOR &MEM'
01100000      SET &RCODE=4                 /* SET RETURN CODE             */
01110000      SET &RBERR=1                 /* INDICATE BREAK IN RB CHAIN  */
01120000    END
01130000  ELSE                             /* 1ST RB IS AVAILABLE         */
01140000  EVAL TCBADDR+0  L(4) &MEM        /* SAVE RB ADDRESS IN          */
01150000  SET &RBADDR=&LASTCC              /*   SYMBOLIC VARIABLE         */
01160000  EQ RBADDR TCBADDR+0% PTR &MEM L(4) /* RB ADDRESS                */
01170000  /****************************************************************/
01180000  /* PROCESS ALL RBS FOR THIS TCB                                 */
01190000  /****************************************************************/
01200000  DO WHILE &RBADDR^=&TCBADDR AND    /* UNTIL LAST RB FOUND  AND   */+
01210000    &RBERR=0                        /* RB CHAIN NOT BROKEN        */
01220000    SET &MODNAME=0                  /* NO MODULE NAME             */
01230000    EVAL RBADDR-2 LEN(2)            /* OBTAIN CONTENTS OF RBINTCOD*/
01240000    SET &RBINTCOD=&LASTCC           /*   AND SAVE THE VALUE       */
01250000    COMPARE ADDRESS(RBADDR+A) LENGTH(1) &MEM /* TEST FOR PRB      */+
01260000      WITH(VALUE(X'00')) MASK(X'E0')
01270000    IF &LASTCC=0 THEN +
01280000      DO
01290000        SET &RBTYPE=PRB
01300000        COMPARE ADDR(RBADDR+C) LEN(4) &MEM /* TEST FOR CDE ADDRESS*/+
01310000          WITH(VALUE(X'00000000')) MASK(X'00FFFFFF')
01320000        IF &LASTCC=0 THEN
01330000        ELSE +
01340000          DO
01350000            SET &MODNAME=1          /* HAVE PROGRAM NAME          */
01360000            EQ MODNAME RBADDR+C%+8 LENGTH(8) CHAR
01370000          END
01380000      END
01390000    ELSE +
01400000      DO
01410000        COMPARE ADDRESS(RBADDR+A) LE(1) &MEM /* TEST FOR SVRB     */+
01420000          WITH(VALUE(X'C0')) MASK(X'E0')
01430000        IF &LASTCC=0 THEN +
01440000          SET &RBTYPE=SVRB
01450000        ELSE +
01460000          DO
01470000            COMPARE ADDRESS(RBADDR+A) LE(1) &MEM /* TEST FOR TIRB */+
01480000              WITH(VALUE(X'60')) MASK(X'E0')
01490000            IF &LASTCC=0 THEN +
01500000              SET &RBTYPE=TIRB
01510000            ELSE +
01520000              DO
01530000                COMPARE ADDRESS(RBADDR+A) LE(1) &MEM /* IRB TEST  */+
01540000                  WITH(VALUE(X'40')) MASK(X'E0')
01550000                IF &LASTCC=0 THEN +
01560000                  SET &RBTYPE=IRB
01570000                ELSE +
01580000                  DO
01590000                    COMPARE ADDRESS(RBADDR+A) LE(1) &MEM /* SIRB   */+
01600000                      WITH(VALUE(X'80')) MASK(X'E0')
01610000                    IF &LASTCC=0 THEN +
01620000                      SET &RBTYPE=SIRB
01630000                    ELSE +
01640000                      DO
01650000                        NOTE '==> ERROR: RBFTP NOT RECOGNIZABLE'
01660000                        SET &RCODE=4   /* SET RETURN CODE          */
01670000                        SET &RBTYPE=RB
01680000                      END
01690000                  END
01700000              END
01710000          END
01720000      END
01730000    IF &RBTYPE=RB |(&RBTYPE=PRB AND &MODNAME=0) THEN +
01740000      NOTE 'RB&RBCTR(&RBTYPE)  RBINTCOD(&RBINTCOD)  --NO MODULE +
01750000        NAME OR NON-RECOGNIZABLE RB' SPACE(1)
01760000    ELSE +
01770000      IF &RBTYPE=PRB THEN +
01780000        LIST MODNAME DISPLAY(SYMBOL NOREQUEST) &MEM +
01790000          REM('RB&RBCTR(&RBTYPE)  RBINTCOD(&RBINTCOD)')
01800000      ELSE +
01810000        DO
01820000          NOTE '*** RB&RBCTR(&RBTYPE)  RBINTCOD(&RBINTCOD) +
01830000          --DISPLAY OF GENERAL REGISTERS' SPACE(1)
01840000          LIST  RBADDR+20 L(4) ENTRIES(0:15) HEX &MEM
01850000        END
01860000    SET &RBCTR=&RBCTR+1            /* PLUS 1 TO RB COUNTER        */
01870000    EVAL RBADDR+1C% L(4) &MEM      /* IS NEXT RB AVAILABLE        */
01880000    IF &LASTCC=12 THEN             /* MUST NOT BE AVAILABLE       */+
01890000      DO
01900000        NOTE '==> ERROR: RB&RBCTR NOT AVAILABLE FOR &MEM'
01910000        SET &RCODE=4               /* SET RETURN CODE             */
01920000        SET &RBERR=1               /* RB CHAIN NOW BROKEN         */
01930000      END                          /* SET RETURN CODE             */
01940000    ELSE
01950000    EVAL RBADDR+1C  L(4) &MEM      /* SAVE NEXT RB ADDRESS IN     */
01960000    SET &RBADDR=&LASTCC            /*   SYMBOLIC VARIABLE         */
01970000    EQ RBADDR RBADDR+1C% PTR &MEM  /* NEXT RB ADDRESS             */+
01980000      LENGTH(4)
01990000  END                              /* END OF RB LOOP              */
02000000  SET &TCBCTR=&TCBCTR+1            /* PLUS 1 TO TCB COUNTER       */
02010000  EVAL TCBADDR+74% L(4) &MEM       /* CHECK NEXT TCB ADDRESS      */
02020000  IF &LASTCC=12 THEN               /* MUST NOT BE AVAILABLE       */+
02030000    DO
02040000      NOTE '==> ERROR: TCB&TCBCTR NOT AVAILABLE FOR &MEM'
02050000      SET &RCODE=4
02060000      GOTO EXIT
02070000    END
02080000  ELSE
02090000  EVAL TCBADDR+74 L(4) &MEM        /* SAVE NEXT TCB ADDRESS IN    */
02100000  SET &TCBADDR=&LASTCC             /*   SYMBOLIC VARIABLE         */
02110000  EQ TCBADDR TCBADDR+74% PTR &MEM  /* NEXT TCB ADDRESS            */+
02120000    LENGTH(4)
02130000END                                /* END OF TCB LOOP             */
02140000/******************************************************************/
02150000/* CLEANUP AND EXIT HERE                                          */
02160000/******************************************************************/
02170000EXIT: EXIT CODE(&RCODE)
