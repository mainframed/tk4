 /*   X 0 0 1 3 0 0   ---   L I S T   P T F   */
-X001300: PROCEDURE (INSTUFF) OPTIONS(MAIN)   REORDER;
 %SKIP(4);
  DCL   PLIXOPT   CHAR(20) VAR  INIT('ISASIZE(200K)')  STATIC  EXT;
 %SKIP(4);
    DECLARE INSTUFF CHARACTER (120) VARYING;
    DECLARE PTFDAT FILE SEQUENTIAL;
    DECLARE PTFPOINT POINTER;
    DECLARE PTFREC CHARACTER (121);
    DECLARE ZAP CHARACTER (7) DEFINED (PTFREC) POS(2);
    DECLARE DATE CHARACTER (6) DEFINED (PTFREC) POS(13);
    DECLARE STATUS CHARACTER(17) DEFINED (PTFREC) POS(22);
    DECLARE SUPNO CHARACTER(7) DEFINED (PTFREC) POS(41);
    DECLARE MOD(6) CHARACTER (10) DEFINED (PTFREC) POS(62);
    DECLARE HEADPOINT POINTER;
    DECLARE NULL BUILTIN;
    DECLARE DUMCHAR CHAR(1);
    DECLARE 1 PTFINFO BASED (PTFPOINT),
                 2 ENTRYDATA CHAR (30),
                 2 LEFTSON POINTER,
                 2 RIGHTSON POINTER;
    DECLARE SEARCHPOINT POINTER;
    DECLARE PGE FIXED BINARY (15) INITIAL(1);
    DECLARE I FIXED BINARY (15) INITIAL(1);
    DECLARE SAVDAT CHARACTER (10) INITIAL ('**********');
    DECLARE ZAP1 CHARACTER (38);
    DECLARE OUTFILE CHARACTER (132) VARYING;
    DECLARE ZIP CHARACTER (38) DEFINED (PTFREC) POS(1);
    DECLARE EDAT2 CHAR(20) DEFINED (EDAT) POS(11);
    DECLARE EDAT1 CHAR(10) DEFINED (EDAT) POS(1);
    DECLARE EDAT3 CHAR(8) DEFINED (EDAT) POS(23);
    DECLARE EDAT4 CHAR(8) DEFINED (EDAT) POS(14);
    DECLARE EDAT CHAR (30);
    DECLARE SAVEPOINT POINTER;
0  DCL   MORE_LINES  BIT(1)  INIT('1'B) STATIC;
-   ON ERROR SNAP BEGIN; ON ERROR SYSTEM; PUT DATA; END;
    ON ENDFILE (PTFDAT) BEGIN;
    MORE_LINES = '0'B;
    SEARCHPOINT = HEADPOINT;
    CALL RITETREE (SEARCHPOINT);
    CLOSE FILE (PTFDAT);
    EXIT;
    END;
1   OPEN FILE (PTFDAT) INPUT;
    OPEN FILE (SYSPRINT) PRINT LINESIZE (132);
    READ FILE (PTFDAT) INTO (PTFREC);
    ON ENDPAGE (SYSPRINT) BEGIN;
         PUT PAGE;
         CALL PAGEHED;
         END;
   CALL PAGEHED;
    HEADPOINT = NULL;
 %SKIP(5);
    DO WHILE (MORE_LINES);
         IF SUBSTR (ZAP,2,1) = 'Z' THEN
         DO;
              ZAP1 = ZIP;
              CALL SORTTREE;
              READ FILE (PTFDAT) INTO (PTFREC);
   MORE_LINES = SUBSTR(PTFREC,2,27)^='**** LIST REQUEST COMPLETED';
              DO WHILE ((SUBSTR(ZAP,2,1) ^= 'Z') &
                   MORE_LINES);
                   ZIP = ZAP1;
                   CALL SORTTREE;
                   READ FILE (PTFDAT) INTO (PTFREC);
   MORE_LINES = SUBSTR(PTFREC,2,27)^='**** LIST REQUEST COMPLETED';
                   END;
              END;
         ELSE READ FILE (PTFDAT) INTO (PTFREC);
   MORE_LINES = SUBSTR(PTFREC,2,27)^='**** LIST REQUEST COMPLETED';
         END;
    SEARCHPOINT = HEADPOINT;
    CALL RITETREE (SEARCHPOINT);
    CLOSE FILE (PTFDAT);
1SORTTREE: PROCEDURE;
    DECLARE PTFNUM CHARACTER(7) INITIAL ('       ');
    DECLARE FLAG CHAR (3);
    DECLARE DATECHANGED CHARACTER (6);
    DECLARE PTFSTAT CHAR(17);
    DECLARE MODNAME CHARACTER(10);
    DECLARE I FIXED BINARY (15);
    DUMCHAR = SUBSTR(MOD(1),1,1);
    FLAG = 'NO ';
    IF DUMCHAR >= 'A' & DUMCHAR <= 'I' THEN FLAG = 'YES';
    IF DUMCHAR >= 'J' & DUMCHAR <= 'R' THEN FLAG = 'YES';
    IF DUMCHAR >= 'S' & DUMCHAR <= 'Z' THEN FLAG = 'YES';
    IF DUMCHAR = '$' × DUMCHAR = '@' × DUMCHAR = '#' THEN
    FLAG = 'YES';
    IF FLAG = 'YES' THEN
    DO;
         IF ZAP = '       ' THEN ZAP = PTFNUM;
         IF ZAP ^= '       ' THEN
         DO;
              PTFNUM = ZAP;
              PTFSTAT = STATUS;
              DATECHANGED = DATE;
              MODNAME = MOD(1);
              I = 1;
              DO WHILE (MODNAME ^= '          ' & I <= 6);
                   CALL TREEBILD;
                   I = I + 1;
                   MODNAME = MOD(I);
                   END;
              END;
         END;
1TREEBILD: PROCEDURE;
    DECLARE STAR CHARACTER (1) INITIAL('*');
    DECLARE BLANK CHARACTER (1) INITIAL (' ');
    IF INDEX (PTFSTAT,'ACPT') = 0 THEN
         EDAT = MODNAME ×× '   ' ×× STAR ×× ' ' ×× DATECHANGED ×× '  '
         ×× ZAP;
    ELSE
         EDAT = MODNAME ×× '     ' ×× DATECHANGED ×× '  ' ×× ZAP;
    IF HEADPOINT = NULL THEN
    DO;
         ALLOCATE PTFINFO SET (HEADPOINT);
         HEADPOINT -> ENTRYDATA = EDAT;
         HEADPOINT -> LEFTSON = NULL;
         HEADPOINT -> RIGHTSON = NULL;
         END;
    ELSE
    DO;
         SEARCHPOINT = HEADPOINT;
         DO WHILE (SEARCHPOINT ^= NULL);
              SAVEPOINT = SEARCHPOINT;
              IF EDAT < SAVEPOINT -> ENTRYDATA THEN
                   SEARCHPOINT = SEARCHPOINT -> LEFTSON;
              IF EDAT > SAVEPOINT -> ENTRYDATA THEN
                   SEARCHPOINT = SEARCHPOINT -> RIGHTSON;
                        IF EDAT = SAVEPOINT -> ENTRYDATA THEN
                        DO;
                             SEARCHPOINT = NULL;
                             PUT EDIT ('ERROR - EQUAL ENTRIES')
                                      (COL(1),A);
                             END;
              END;
         DO;
              IF EDAT < SAVEPOINT -> ENTRYDATA THEN
              DO;
                   ALLOCATE PTFINFO SET (PTFPOINT);
                   SAVEPOINT -> LEFTSON = PTFPOINT;
                   PTFPOINT -> LEFTSON = NULL;
                   PTFPOINT -> RIGHTSON = NULL;
                   PTFPOINT -> ENTRYDATA = EDAT;
                   END;
              ELSE
              DO;
                   ALLOCATE PTFINFO SET (PTFPOINT);
                   SAVEPOINT -> RIGHTSON = PTFPOINT;
                   PTFPOINT -> LEFTSON = NULL;
                   PTFPOINT -> RIGHTSON = NULL;
                   PTFPOINT -> ENTRYDATA = EDAT;
                   END;
              END;
         END;
    END TREEBILD;
    END SORTTREE;
1RITETREE: PROCEDURE (SEARCHPOINT) RECURSIVE;
    DECLARE SEARCHPOINT POINTER;
    IF SEARCHPOINT -> LEFTSON ^= NULL THEN
         CALL RITETREE (SEARCHPOINT -> LEFTSON);
    EDAT = SEARCHPOINT -> ENTRYDATA;
    CALL OUTIT(EDAT);
    IF SEARCHPOINT -> RIGHTSON ^= NULL THEN
         CALL RITETREE (SEARCHPOINT -> RIGHTSON);
    END RITETREE;
1OUTIT: PROCEDURE (OUTDAT);
    DECLARE OUTDAT CHARACTER (30);
    /* ALSO DECLARED SAVDAT CHAR (10)
                     OUTFILE CHAR (132) VARYING */
    IF SAVDAT = '**********' THEN
    DO;
         SAVDAT = EDAT1;
         OUTFILE = SUBSTR(EDAT,1,12)××EDAT3××' '××EDAT4;
         I = 1;
         END;
    ELSE
    DO;
         IF SAVDAT = EDAT1 THEN
         DO;
              I = I + 1;
              OUTFILE = OUTFILE ×× SUBSTR(EDAT,11,3)
              ××EDAT3××' '××EDAT4;
              END;
         ELSE
         DO;
              IF INDEX (OUTFILE,'Z') ^= 0 THEN
              DO;
                   PUT EDIT (OUTFILE) (COL(2),A);
                   OUTFILE = SUBSTR(EDAT,1,12)××EDAT3××' '××EDAT4;
                   SAVDAT = EDAT1;
                   I = 1;
                   END;
              ELSE
              DO;
                   OUTFILE = SUBSTR(EDAT,1,12)××EDAT3××' '××EDAT4;
                   I = 1;
                   END;
              END;
         END;
    DO;
         IF I = 6 THEN
         DO;
              PUT EDIT (OUTFILE) (COL(2),A);
              OUTFILE = '         ';
              I = 0;
              END;
         END;
    END OUTIT;
1PAGEHED: PROCEDURE;
    DECLARE TIME BUILTIN;
    DECLARE DATE BUILTIN;
    DCL     RZIDW  CHAR(28)  VAR;
-    RZIDW  =  RZID();
    PUT EDIT ('SWISS BANK CORPORATION','PAGE ',PGE)
         (COL(51),A,COL(121),A,COL(127),F(2));
    PUT EDIT (RZIDW)  (COL(49 - (28-LENGTH(RZIDW))/2) ,A);
    PUT EDIT ('DATE ',SUBSTR(DATE,1,2),SUBSTR(DATE,3,2),SUBSTR(DATE,5,2)
    )
    (COL(115),A,COL(121),A,COL(124),A,COL(127),A);
    PUT EDIT ('TIME ',SUBSTR(TIME,1,2),SUBSTR(TIME,3,2))
    (COL(115),A,COL(121),A,COL(124),A);
    PUT EDIT ('SMP MODULE HISTORY') (COL(53),A);
    PUT SKIP EDIT((132)'*') (COL(1),A);
    PUT EDIT ('*','*') (COL(1),A,COL(132),A);
    PUT EDIT ('* MODULE   ',(5)'FIX      DATE       ',
                 'FIX      DATE','*')
         (COL(1),A,COL(17),(2)A,COL(132),A);
    PUT EDIT ('*','*') (COL(1),A,COL(132),A);
    PUT EDIT ((132)'*') (COL(1),A);
    PUT SKIP (2);
    PGE = PGE +1;
 /*   R Z I D   ---   GET 'RZ' IDENTIFICATION OF CURRENT SYSTEM */
-RZID:    PROC   RETURNS(CHAR(28) VAR)   REORDER;
0DCL   $A  PTR   ,VA  BIN(31,0)  BASED(ADDR($A))   ,J;
0DCL   SMFID  CHAR(4)  BASED($A);
0DCL   RZTEXT (4)  CHAR(28) VAR  STATIC  INIT
         ('TEST CENTER GOLDENER LOEWEN'
         ,'REGIONALZENTRALE ZUERICH'
         ,'REGIONALZENTRALE BASEL'
         ,'CENTRALE REGIONALE DE GENEVE'
         )
      ,RZCODE (4)  CHAR(1)  STATIC  INIT
         ('T' ,'Z' ,'B' ,'G')
      ;
-    VA  =  16;    /* A(CVT PTR) */
     VA  =  $A->VA;    /* A(CVT) */
     VA  =  VA + 196;
     VA  =  $A->VA;
     VA  =  VA + 16;
-DO   J  =  1  TO  HBOUND(RZCODE,1);
     IF  RZCODE(J) = SUBSTR(SMFID,1,1)
     THEN   RETURN (RZTEXT(J));
 END;
-    RETURN ('SYSTEM ' ×× SMFID);  /* IF NOT FOUND IN TABLE */
-END; /* OF PROGRAM */
    END PAGEHED;
    END;
