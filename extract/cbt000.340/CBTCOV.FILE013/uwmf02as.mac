*              USELINK - RAHMENPROGRAMM FUER RC 16 IN COBOL-PROGRAMMEN
*              UND GDG IN AUFSTEIGENDER GENERATIONSFOLGE LESEN.
*              1.ALLGEMEINES
*              DA-VERARBEITUNG KANN IN COBOL-PROGRAMMEN ZU UNKONTROLLIER
*              BAREN E/A-FEHLERN FUEHREN,DIE NICHT DURCH DIE INVALID KEY
*              BEDINGUNG ABGEFANGEN WERDEN (DATEI ZU KLEIN, DOPPELTER SC
*              SEL USW.).STATTDESSEN WIRD EIN RETURN-CODE VON 12 BZW.16
*              GESETZT UND DAS PROGRAMM BEENDET, OHNE JEDOCH BIS ZUM END
*              GELAUFEN ZU SEIN.
*              BISHER KONNTEN SOLCHE FEHLER NUR DURCH EINEN FOLGESTEP
*              'ABECODE0' ERKANNT UND DER JOB ABGEBROCHEN WERDEN.DIESE
*              HANDHABUNG HAT JEDOCH DEN NACHTEIL,DASS DIE DRITTE DIS-
*              POSITION DER JCL NICHT IN KRAFT TRITT, SONDERN ALLE DATEI
*              EN DES ABNORMAL BEENDETEN STEPS WERDEN SO BEHANDELT, ALS
*              WAERE DER STEP ORDNUNGSGEMAESS BEENDET.
*              USELINK LAEDT ZUR AUSFUEHRUNGSZEIT DAS ENTSPRECHENDE AN-
*              WENDUNGSPROGRAMM UND FUEHRT DIESES AUS.BEI PROGRAMMENDE
*              GEHT DIE STEUERUNG WIEDER AN USELINK ZURUECK,DAS NUN DEN
*              RETURN-CODE DES COBOL-PROGRAMMES ABFRAGT UND RC12 ODER
*              16 EINEN DUMP ERZEUGT.DAMIT TRITT DIE DRITTE DISPOSITION
*              DER JCL IN KRAFT.
*              ANWENDUNGS-BEISPIEL
*              DAS PROGRAMM SC123456 SOLL AUSGEFUEHRT WERDEN.
*              BISHER:     //SC123456  EXEC  PGM=SC123456
*              MIT USELINK://SC123456  EXEC  PGM=USELINK,PARM=SC123456
*              DIE JOBLIB-BZW.STEBLIB-KARTE BEZIEHT SICH NACH WIE VOR
*              AUF DIEJENIGE BIBLIOTHEK,AUF DER SICH DAS AUSZUFUEHRENDE
*              PROGRAMM BEFINDET.
*              2.GDG IN AUFSTEIGENDER GENERATIONSFOLGE LESEN
*              GESAMT-GDG'S WERDEN MIT JCL IMMER IN ABSTEIGENDER FOLGE
*              GELESEN,D.H.DIE ZULETZT ERSTELLTE GENERATION WIRD BEIM
*              EINLESEN ZUERST GELESEN,DANN DIE NAECHST KLEINERE USW..
*              ES KANN JEDOCH ERFORDERLICH SEIN,DASS DIE BAENDER IN DER
*              REIHENFOLGE,IN DER DIESE ERSTELLT WURDEN,GELESEN WERDEN
*              MUESSEN (SORTIERFOLGE).DIES KANN DURCH ANGABE DES DD-NAME
*              IN PARM (2.WORT,ALSO NACH PROGRAMM-NR.)AUS DEM AUSZU-
*              FUEHRENDEN PROGRAMM ERREICHT WERDEN.IN DEN STEUERKARTEN
*              IST ZUSAETZLICH FOLGENDE ANGABE IN DER ENTSPRECHENDEN DD-
*              KARTE ERFORDERLICH:
*                                      UNIT=(,,DEFER)
*              ANWENDUNGS-BEISPIEL
*              DIE EINGABE MIT DEM DD-NAMEN 'EDATEI' IM PROGRAMM SC12345
*              SOLL IN AUFSTEIGENDER GENERATIONSFOLGE GELESEN WERDEN:
*                          //SC123456  EXEC  PGM=USELINK,PARM='SC123456,
SA991480 CSECT
         INIT  1,REGS
START    EQU   *
         L     R1,0(,R1)               LADEN PARMADRESSE
         LH    R3,0(,R1)               SPEICHERN LAENGENANGABE PARM
         LA    R4,2(,R1)               ADRESSE DPARMINFORMATION
         LTR   R3,R3
         BZ    WTO1                    PARM FEHLT
         BCTR  R3,0                    LADEN PGM
         XR    R1,R1
         XR    R2,R2
         EX    R3,TRT
         LR    R6,R3
         LTR   R1,R1
         BZ    LINKMVC
         LR    R6,R1
         SR    R6,R4
         BCTR  R6,0
LINKMVC  EQU   *
         EX    R6,MVCPGM
         LTR   R1,R1
         BZ    LINK
         CLC   0(1,R1),=C','           LADEN DCB
         BNE   WTO2                    PARM FUER DCB FALSCH
         LR    R5,R1
         SR    R5,R4
         LR    R6,R5
         SR    R3,R5
         BCTR  R3,0
         EX    R3,MVCDD
         EJECT
TIOT     EQU   *
         CHSPK SPK=SYSTASK
         EXTRACT TIOTADR,FIELDS=TIOT   LESEN TIOT
         XR    R11,R11
         L     R10,TIOTADR
         LA    R10,24(R10)
NEXTDD   EQU   *
         CLC   DDN,4(R10)
         BE    GEF                     DD-NAME IM TIOT GEFUNDEN
         IC    R11,0(R10)
         LA    R10,0(R10,R11)
         CLC   0(4,R10),=F'0'          ENDE TIOT
         BNE   NEXTDD
         B     WTO2                    DD-NAMEN IM TIOT NICHT GEFUNDEN
GEF      LR    R9,R10                  ANFANGSADRESSE TIOT SICHERN
GEF1     EQU   *
         LR    R8,R9
         MVC   HWORT+1(1),0(R9)
         AH    R9,HWORT
         CLC   0(4,R9),=F'0'
         BE    TRANSL
         CLC   4(8,R9),=CL8' '
         BNE   TRANSL
         B     GEF1
TRANSL   EQU   *
         CR    R8,R10
         BE    LINK
TRANS    EQU   *                       AUSTAUSCHEN TTR-ADRESSEN
         MVC   ZWIFE,12(R10)
         MVC   12(8,R10),12(R8)
         MVC   12(8,R8),ZWIFE
         MVC   HWORT+1(1),0(R10)
         AH    R10,HWORT
         LR    R9,R10
         CR    R8,R9
         BNH   LINK
NOTGEF   EQU   *
         LR    R7,R9
         MVC   HWORT+1(1),0(R9)
         AH    R9,HWORT
         CR    R8,R9
         BNE   NOTGEF
         LR    R8,R7
         B     TRANS
         EJECT
LINK     EQU   *
         CHSPK SPK=PROBTASK
         LOAD  EPLOC=PGM
         LINK  EPLOC=PGM
         C     R15,=F'16'
         BE    ABEND
         C     R15,=F'12'
         BNE   RETURN
         ABEND 12,DUMP
ABEND    EQU   *
         ABEND 16,DUMP
RETURN   EQU   *
         DELETE EPLOC=PGM
         L     R13,SAVEAREA+4
         L     R15,SAVEAREA
         RETURN (14,12),RC=(15)
         EJECT
WTO1     EQU   *
         WTO   'PARM FEHLT',ROUTCDE=11
         ABEND 4,DUMP
WTO2     EQU   *
         CHSPK SPK=PROBTASK
         WTO   'PARM FUER GDG FALSCH',ROUTCDE=11
         ABEND 4,DUMP
MVCPGM   EQU   *
         MVC   PGM(0),0(R4)
MVCDD    EQU   *
         MVC   DDN(0),1(R1)
TRT      EQU   *
         TRT   0(0,R4),TRTTAB
         EJECT
*
*        AREAS
*
TRTTAB   DS    0CL256
         DC    193X'04'
         DC    9X'00'
         DC    7X'04'
         DC    9X'00'
         DC    8X'04'
         DC    8X'00'
         DC    6X'04'
         DC    10X'00'
         DC    6X'04'
PGM      DC    CL8' '
DDN      DC    CL8' '
TIOTADR  DC    F'0'
ZWIFE    DC    CL8' '
HWORT    DC    H'0'
         END
