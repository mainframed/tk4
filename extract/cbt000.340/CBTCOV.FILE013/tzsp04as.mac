************************************************************************
*                                                                      *
* ASSEMBLER-PHASE IFOX04, DIE VON LIBRARIA-FILES EINLESEN GELERNT HAT, *
*                         DIE DIE VERWENDETEN MACROS AUSGIBT           *
*                                                                      *
* ES IST ZWECKMAESSIG, DAS MODUL IFOX04 VORHER ZU SICHERN              *
*                                                                      *
* DYNAMISCH GELADEN WIRD DAS MODUL LIBFAIR (TSO-LIBRARIA-INTERFACE)    *
************************************************************************
*                                                                      *
* LINK-STEUERKARTEN ....  INCLUDE OBJ                                  *
*                         ENTRY IFOX0F01                               *
*                         NAME  IFOX04                                 *
*                                                                      *
************************************************************************
*                                                                      *
* EINLESEN VON LIBRARIA WENN                                           *
*    1)        UNTER //SYSIN DER ERSTE RECORD FOLGENDER IST            *
*                    COMPILE  MODULNAME                                *
*                    ----  MODULNAME MAX. 8 STELLEN                    *
*    2)        DAS DD-STATEMENT //MASTER (BESCHREIBT LIBRARIA-FILE)    *
*              VORHANDEN IST                                           *
*              MODULNAME IST DER NAME DES LIBRARIA-MEMBERS, DER        *
*              MIT LIBFAIR VOM MASTER-FILE EINGELESEN WIRD             *
*                                                                      *
*    *)        TRIFFT EINE DIESER BEDINGUNGEN NICHT ZU,                *
*              SO WIRD STANDARD-MAESSIG UEBER //SYSIN DER              *
*              ASSEMBLER-INPUT EINGELESEN                              *
************************************************************************
*                                                                      *
*                                                                      *
* AUSGABE DER LISTE DER VERWENDETEN MACROS WENN                        *
*              //MACLIST DD-STATEMENT VORHANDEN IST                    *
*              DCB ... (LRECL=133,RECFM=FBMS,BLKSIZE=1330)             *
*                                                                      *
* ACHTUNG ..... ABHAENGIG VOM PTF-STAND DES ASSEMBLERS, DA             *
*               DIE IBM-STANDARD COMMON-BEREICHE VERWENDET WERDEN      *
*               DERZEITIGE VERSION :    UZ13353                        *
*               ORIGINALES IBM-MODULE IN SYS1.AOS03 (LT. CDS)          *
*                                                                      *
************************************************************************
         EJECT
         GBLC  &COMPNM,&ASMID
&COMPNM  SETC 'X0F     '
&ASMID   SETC 'IFOX0F  '
BITFF    EQU   255
BIT0     EQU   B'10000000'
BIT3     EQU   B'00010000'
BIT7     EQU   B'00000001'
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
D0       EQU   0
D1       EQU   1
D2       EQU   2
D3       EQU   3
D4       EQU   4
D6       EQU   6
D8       EQU   8
JCOMMON  DSECT
JMISLIB  EQU   X'02'
JINLIB   EQU   X'40'
JIN2ND   EQU   X'80'
         ORG   JCOMMON+X'13D'
JINDERRF DS    X
         USING JCOMMON,R13
JSAVESZ  EQU   X'20'
         ORG   JCOMMON+X'F8'
JADINCM  DS    A
         ORG   JCOMMON+X'178'
JCLVLPTR DS    A
         ORG   JCOMMON+X'15C'
JRECIN   DS    A
         ORG   JCOMMON+X'13F'
JINFLAG  DC    X'00'
         ORG   JCOMMON+X'3A5'
JTRTABLE DS    X
         ORG   JCOMMON+X'160'
JRECLIB  DS    A
         ORG   JCOMMON+X'2F8'
JDWORD   DS    D
         ORG   JCOMMON+X'154'
JNOTEVAL DS    A
         ORG   JCOMMON+X'300'
JFWORD1  DS    A
         TITLE '&COMPNM&ASMID - INPUT I/O MODULE - JINCOM COPY CODE'
JINCOM   DSECT
         USING JINCOM,R7
JSYSIN   DS    A                   DCB(SYSIN)
JSYSLIB  DS    A                   DCB(SYSLIB)
JINOPEN  DS    A                   A(OPEN PARAM.LIST)
JINCLOS  DS    A                   A(CLOSE PARAM.LIST)
         READ  JLIBDECB,SF,MF=L
JLIBBUF  DS    A
JBLKSIZE DS    H
JLIBNDX  DS    H
*JINSW   DSW   JREADPT
JINSW    DS    X
JREADPT  EQU   BIT0
JINDSNS  DC    XL3'00'
JINCMEND DS    0D
*
          EJECT
         PRINT NOGEN
         DCBD  DSORG=(PS,PO),DEVD=(DA)
         PRINT GEN
         TITLE '&COMPNM&ASMID - INPUT I/O MODULE - DDNAMEOVERRIDE LIST'
DCBEND   EQU   *
P        DSECT
PLEN     DS    H
         DS    3CL8
PSYSLIB  DS    CL8   SYSLIB DDNAME
PSYSIN   DS    CL8   SYSIN DDNAME
PSYSPRIN DS    CL8   SYSPRINT DDNAME
PSYSPUNC DS    CL8   SYSPUNCH DDNAME
PSYSUT1  DS    CL8   SYSUT1 DDNAME
PSYSUT2  DS    CL8   SYSUT2 DDNAME
PSYSUT3  DS    CL8   SYSUT3 DDNAME
PSYSGO   DS    CL8   SYSGO  DDNAME
D80      EQU   80
         TITLE '&COMPNM&ASMID - INPUT I/O MODULE - MAINLINE CONTROL'
*        JCSECT (X0F00)            SECTION ID
* VS1 RELEASE 3.1 CHANGES
* OY02543
* OZ04367
IFOX0F00 CSECT
*        JMODID                    EMBEDDED IDENTIFIER
         DC    CL6'IFOX0F',HL2'10'
         USING START,R12           SET BASE OF R12
START    B     INPUT               JINPUT ENTRY
         B     FIND                JFIND ENTRY
         B     NOTELB              JNOTELB ENTRY
         B     POINTLB             JPOINTLB ENTRY
         B     ININIT              INIT & TERM ENTRY
*        JENTRY (XOF01=START)      MODULE ENTRY POINT
         ENTRY IFOX0F01
IFOX0F01 EQU   START
*        JSAVE BASE=NO             SAVE REGISTERS
SAVE     L     R15,JCLVLPTR        POINT TO CURRENT LEVEL
         LA    R15,JSAVESZ(,R15)   INCREMENT LEVEL POINTER
         ST    R15,JCLVLPTR        STORE NEW LEVEL POINTER
         STM   R2,R9,0(R15)        SAVE R2 THRU R9
         L     R7,JADINCM          LOAD ADDRESS OF INPUT COMMON
         BR    R14                 NOW GO ON WITH BUSINESS
*        JRETURN                   RESTORE REGISTERS & RETURN
RETURN   LM    R8,R9,JCLVLPTR      GET CURRENT LVL & DECR
         BXLE  R8,R9,0             DECREMENT LEVEL POINTER
         ST    R8,JCLVLPTR         SAVE NEW LEVEL POINTER
         LM    R2,R9,JSAVESZ(R8)   RESTORE REGISTERS R2 THRU R9
         BR    R9                  RETURN TO CALLING PROGRAM
         TITLE '&COMPNM&ASMID - INPUT I/O MODULE - ''JINPUT'' ROUTINE'
INPUT    BAL   R14,SAVE            GO SAVE REGISTERS
*        GOIF  JINLIB,ON=INLIB     INPUT FROM LIBRARY
         TM    JINFLAG,JINLIB
         BO    INLIB               BRANCH PER MACRO CALL
         USING JINZ,R5
         ICM   R5,7,JINDSNS        MY AREA
         BZ    USEACM              NO, USE ACS.METH.
         TM    SCMAST,MASTOP+MASTOK     MASTER OPEN
         BO    RDMAST              AND AT LAEST ONE READ DONE
         BZ    USEACM
*              MIXED MUST BE FIRST RECORD
*
         L     R1,JSYSIN           FIRST GET FROM SYSIN
         LR    R11,R10               SAVE R10          OZ04367
         LA    R10,XTIN              GET ADRESS TO EXITOZ04367
         GET   (1)
         LR    R3,R1
         LA    R15,68-L'KCOMPILE(,R1)
         LA    R14,1
         CLI   0(R1),C' '              FIND 'COMPILE'-KONST.
         BNE   TSTCOMP
         BXLE  R1,R14,*-8
         B     MASTCL                  NOT FOUND, NOT MY INPUT
         SPACE 2
TSTCOMP  CLC   KCOMPILE,0(R1)
         BNE   MASTCL
         LA    R1,L'KCOMPILE-1(,R1)    FIND NAME
         BXH   R1,R14,NOCOMPV
         CLI   0(R1),C' '
         BE    *-8
         LR    R2,R1               START NAME
         LA    R15,8(,R1)
         BXH   R1,R14,NOCOMPV
         CLI   0(R1),C' '
         BNE   *-8
         SLR   R1,R2               LENGTH(NAME)
         CH    R1,=H'9'
         BNL   NOCOMPV
         MVC   CNAME,BLANK8            BLANK OUT MODULENME
         BCTR  R1,0
         EX    R1,MOVEMN           MOVE NAME
         MVI   RCMAST,MASTRC0
         L     R15,AMMOD           LOCATE
*              MODULE-NAME, RETURN-CODE, RECORD-ADRESS, INC-ARGUMENT
         CALL  (15),(CNAME,RCMAST,MREC,MINCARG),VL,MF=(E,LCALL)
         CLI   RCMAST,MASTRC0
         BNE   LOCFAIL             RC IS NOT OK
         SPACE 3
         CALL  (15),(MREC,RCMAST),VL,MF=(E,LCAL2)
         ORG   *-2
         OI    SCMAST,MASTOK       INDICATE FIRST RECORD READ
RDMAST   L     R15,AMRCD           NEXT  RECORD
         CALL  (15),MF=(E,LCAL2)
         LA    R1,MREC             A(RECORD)
         CLI   RCMAST,MASTRC0      RC 0
         BE    USEACM1
         CLI   RCMAST,MASTEOF      EOF
         BNE   CATERR
         L     R15,AMCLOS          CLOSE MASTER
         CALL  (15)
         DELETE EP=LIBFAIR
         LA    R6,RETURN
         L     R1,JSYSIN
         USING IHADCB,R1
         L     R1,DCBEODAD
         DROP  R1
         BR    R1
*
MOVEMN   MVC   CNAME(1),0(R2)
*
NOCOMPV  MVC   VWTOL,KWTON           WTO ... CTL-CARD INVALID
         WTO   MF=(E,VWTOL)
         SPACE 5
MASTCL   L     R15,AMCLOS            CLOSE-ENTRY
         CALL  (15)
         DELETE EP=LIBFAIR
         MVI   SCMAST,0
         LR    R1,R3                 RELOAD RECORD-ARESS
         B     USEACM1               USE ACCESS-METHOD
         SPACE 5
LOCFAIL  MVC   VWTOL,KLOCERR         LOCATE UNSUCCESSFULL
         WTO   MF=(E,VWTOL)
         ABEND 20
         SPACE 5
CATERR   MVC   VWTOL,KCATERR         RC 9 MASTER UNUSABLE
         WTO   MF=(E,VWTOL)
         ABEND 24,DUMP
         EJECT
USEACM   LA    R6,RETURN           LOAD RETURN ADDR FOR EOD USE
         L     R1,JSYSIN           LOAD INPUT FILE DEF ADDRESS
         LR    R11,R10                 SAVE R10                OZ04367
         LA    R10,XTIN                GET ADRESS TO EXIT      OZ04367
         GET   (1)                 GET A RECORD, ADDR IN R1
USEACM1  L     R14,JRECIN          WELL...NO EOF, THEN COUNT CARDS
         LA    R14,D1(,R14)        ONE MORE CARD READ
         ST    R14,JRECIN          SAVE IT FOR NEXT TIME
         TR    D0(D80,R1),JTRTABLE TRANSLATE STATEMENT
         LTR   R11,R1              PASS BACK RECORD ADDRESS, SET
         B     RETURN              CC=2 AND RETURN
         EJECT
INLIB    LH    R4,JLIBNDX          GET BUFFER INDEX
         AH    R4,=H'80'           ADD 80 (LOGICAL RECORD LENGTH)
         L     R5,JLIBBUF          POINT TO PHYSICAL BUFFER
*        GOIF  JREADPT,ON=READ     READ NECESSARY FOR POINT
         TM    JINSW,JREADPT
         BO    READ                BRANCH PER MACRO CALL
CHECKSIZ CH    R4,JBLKSIZE         HAVE WE EXAUSTED PHY REC
         BL    NOREAD              NO
READ     LA    R6,RETURN           EOF RETURN PT AFTER CC=0
         READ  JLIBDECB,SF,,(R5),MF=E  READ PHY RECORD
         CHECK JLIBDECB            CHECK READ
         L     R1,JSYSLIB          POINT TO DCB
         USING IHADCB,R1           FIND RECORD SIZE
         L     R14,DCBIOBA         GET ADDR OF IOB
         LH    R15,DCBBLKSI        RECORD SIZE = READ LENGTH -
         SH    R15,X'16'(,R14)
         STH   R15,JBLKSIZE        ''
         DROP  R1                  DROP DCB BASE
*        GOIF  JREADPT,OFF=RESET   READ WASN'T NECESSARY FOR POINT
         TM    JINSW,JREADPT
         BZ    RESET               BRANCH PER MACRO CALL
*        SET   JREADPT,OFF         SET READ BECUASE OF POINT OFF
         NI    JINSW,BITFF-(JREADPT)
         B     CHECKSIZ            CHK TO SEE IF END OF BUF
RESET    SR    R4,R4               ZERO BUFFER INDEX
NOREAD   STH   R4,JLIBNDX          SAVE BUFFER INDEX
         LA    R11,D0(R4,R5)       LOG ADDR=PHY ADDR+INDEX
         TR    D0(D80,R11),JTRTABLE TRANSLATE TO INTERNAL
         L     R14,JRECLIB         ADD ONE TO LIB CARD COUNT
         LA    R14,D1(,R14)        ''
         ST    R14,JRECLIB         ''
         LTR   R11,R11             SET CC=2 (NO EOF) AND
         B     RETURN              RETURN
         TITLE '&COMPNM&ASMID - INPUT  I/O MODULE - ''JFIND'' ROUTINE'
FIND     BAL   R14,SAVE            GO SAVE REGISTERS
         L     R1,JSYSLIB          POINT TO DCB
         USING IHADCB,R1           ''
         TM    DCBOFLGS,BIT3       WAS OPEN SUCCESSFUL
         BNZ   OPENSUC             BR IF OPEN NOT SUCCESSFUL
         L     R2,JINOPEN          OPEN LIST
         TM    D0(R2),BIT0         DD CARD FOUND
         BZ    RETURN              YES
*        SET   JMISLIB,ON          SYSLIB DD CARD MISSING
         OI    JINDERRF,JMISLIB
         SR    R2,R2               SET NOT FOUND
         B     RETURN              RETURN
         DROP  R1
OPENSUC  MVC   JDWORD,D0(R10)      CONVERT MEMBER NAME
         TR    JDWORD,JTRTABLE     ''
         SPACE 3
         USING JINZ,R5
         USING MACDS,R15
         ICM   R5,7,JINDSNS          LOAD MY WORKAREA-PTR.
         BNZ   *+6
         DC    H'0'
         SR    R1,R1                   SET LOW-PTR
         ICM   R15,15,PMAC1          LOAD MAC-PTER
         BNZ   VGLNAME               BR. IF SEC. ENTRY
*
         L     R15,PACT              FIRST TIME - CREATE ENTRY
         SH    R15,=AL2(MACDSL)
         CL    R15,PLOW              LOW-PTR.
         BL    SKIPX
         ST    R15,PACT              NEW ACT.-PTR
         ST    R15,PMAC1             AND NEW FIRST-POINTER
         XC    MACDS(MACDSL),MACDS     CLEAR AREA
         MVC   MNAME,JDWORD          SAVE MACOR-NAME
         B     BLDL
         SPACE 5
VGLNAME  CLC   JDWORD,MNAME          COMPARE NAME
         BE    FINDOR                IF EQUAL, ORIGINAL FIND
         BL    INSERT                IF LOW, INSERT
         LR    R1,R15                SAVE THIS ENTRY-PTR.
         ICM   R15,7,FWD             ELSE IT COULD BE HIGHEST
         BNZ   VGLNAME               NO, TRY AGAIN
*
INSERT   DS    0H
         LR    R14,R15                 SAVE HIGH PTR.
         L     R15,PACT              NEW ENTRY TO BE INSERTED
         SH    R15,=AL2(MACDSL)      LENGTH OF ENTRY
         CL    R15,PLOW              STILL ROOM -
         BL    SKIPX                 NO, BRANCH
         ST    R15,PACT              YES, SET NEW STG.PTR.
         XC    MACDS(MACDSL),MACDS   CLEAR AREA
         MVC   MNAME,JDWORD
         STCM  R14,7,FWD            STORE FORWARD-POINTER
         STCM  R1,7,BWD             STORE BACK-POINTER
         DROP  R15
         USING MACDS,R14
         LTR   R14,R14
         BZ    *+8                  WOULD BE 0C4
         STCM  R15,7,BWD            SAVE NEW BACKWD (HIGHER ENTRY)
         DROP  R14
         USING MACDS,R1
         LTR   R1,R1                LOW ABSENT
         BZ    NEWLOW               YES, SET NEW INIT. VALUE
         STCM  R15,7,FWD            NO, STORE NEW FORWD-PTR
         DROP  R1
         B     BLDL
*
SKIPX    OI    SWLOST,X'80'          SET LOST-SWITCH
         L     R1,JSYSLIB            LOAD PTR TO SYSLIB-DCB
         B     FINDOR
         SPACE 2
NEWLOW   ST    R15,PMAC1             NEW LOWEST NAME
*
BLDL     MVC   BLNAME,JDWORD         MOVE NAME
         L     R1,JSYSLIB
         BLDL  (1),BLDNUM
         SH    R15,=H'4'             LIKE FIND-RC-TEST
         BZ    RETURN
         BP    ABORTFND
         L     R14,PACT
         USING MACDS,R14
         SLR   R15,R15               COMPUTE DSN-PTR
         IC    R15,BLC
         MH    R15,=AL2(L'SLDSNS)
         LA    R15,SLDSNS(R15)       LOAD REAL PTR.
         STCM  R15,7,MLPT            STORE INTO LIST
         DROP  R14
         L     R1,JSYSLIB           LOAD DCB-ADRESS
         FIND  (1),BLDTR,C
         B     FINDT
         SPACE 5
FINDOR   DS    0H                  ORIGINAL IFOX FIND
         L     R1,JSYSLIB              LOAD DCB-PTR
         FIND  (1),JDWORD,D        FIND MEMBER
FINDT    DS    0H                  CHECK RETURN-CODE FROM FIND
         SH    R15,=H'4'           CHECK RETURN CODE
         BZ    RETURN              RC=4, MEMBER NOT FOUND, CC=0
         BP    ABORTFND            RC=3 I/O ERROR
         MVC   JLIBNDX,=X'7FAF'    FORCE READ
*        SET   JREADPT,OFF         RESET FLAG
         NI    JINSW,BITFF-(JREADPT)
         LTR   R13,R13             RC=0, MEMBER FOUND CC=2
         B     RETURN              RETURN
ABORTFND L     R1,JSYSLIB          PT TO DCB
         USING IHADCB,R1           ''
         O     R1,=X'FF000000'     SET FLAG TO INDICATE FIND ABORT
         L     R15,DCBSYNAD        GET ADDRESS OF SYDAD ROUTINE
         DROP  R1                  DROP DCB BASE
         BR    R15                 NOW GO ABORT
         TITLE '&COMPNM&ASMID - INPUT I/O MODULE - ''NOTELB'' AND ''POIX
               NT'' ROUTINES'
NOTELB   BAL   R14,SAVE            GO SAVE REGISTERS
         L     R1,JSYSLIB          POINT TO DCB
         NOTE  (1)                 NOTE LIBRARY POSITION
         ST    R1,JNOTEVAL         SAVE FILE POSITION
         USING IHADCB,R1           ADDRESSABILITY FOR SYSLIB
         L     R1,JSYSLIB          ''
         MVC   JNOTEVAL+D4(D1),DCBRELAD+D3 SAVE DD CONCAT NUMBER
         DROP  R1                  DROP ADDRESSABILITY TO DCB
         MVC   JNOTEVAL+D6(D2),JLIBNDX SAVE BUFFER INDEX
         B     RETURN              RETURN
         SPACE 5
POINTLB  BAL   R14,SAVE            GO SAVE REGISTERS
         MVC   JFWORD1,D0(R10)     ALIGN TO FULLWORD
         L     R1,JSYSLIB          POINT TO DCB
         USING IHADCB,R1           ADDRESSABILITY FOR SYSLIB
         MVC   DCBRELAD+D3(D1),D4(R10) RESTORE DD CONCAT NUMBER IN DCB
         DROP  R1                  DROP ADDRESSABILITY TO DCB
         POINT (1),JFWORD1         POSITION LIBRARY
         MVC   JLIBNDX,D6(R10)     SET BUFFER INDEX
*        SET   JREADPT,ON          INDICATE NEXT READ IS FOR POINT
         OI    JINSW,JREADPT
         B     RETURN              RETURN
         TITLE '&COMPNM&ASMID - INPUT I/O MODULE - OPEN ROUTINE FOR ''SX
               YSIN'' AND ''SYSLIB'' DCB''S'
ININIT   BAL   R14,SAVE            GO SAVE REGISTERS
*        GOIF  JIN2ND,ON=CLOSE     SECOND TIME HERE
         TM    JINFLAG,JIN2ND
         BO    CLOSE               BRANCH PER MACRO CALL
*        SET   JIN2ND,ON           FIRST TIME, SET FLAG
         OI    JINFLAG,JIN2ND
         TM    D0(R11),BIT0        ANY OVERRIDING DDNAMES
         BO    NOPARM              BR IF END OF PARM LIST
         L     R14,D4(,R11)        PT TO DDNAME LIST
         USING P,R14               ESTABLISH PARMLIST BASE
         LA    R15,P               CLEAR END-OF-LIST FLAG
         AH    R15,PLEN            CALC END OF TABLE (-2)
         L     R1,JSYSLIB          PT TO SYSLIB DCB
         LA    R2,PSYSLIB          PT TO SYSLIB DDNAME
         BAL   R9,OVERRIDE         CHECK FOR OVERRIDE
         L     R1,JSYSIN           PT TO SYSIN DCB
         LA    R2,PSYSIN           PT TO SYSIN DDNAME
         BAL   R9,OVERRIDE         CHECK FOR OVERRIDE
         DROP  R14                 DROP DSECT BASE
         USING IHADCB,R1           BASE FOR DCB
NOPARM   L     R1,JSYSLIB          POINTS TO SYSLIB DCB
         LA    R15,DCBDDNAM        POINTS TO SYSLIB DDNAME
         DROP  R1
DSYSLIB  DEVTYPE (R15),JDWORD      GET DEVICE CHARACTERISTICS
         LTR   R15,R15             WAS DDNAME FOUND
         BZ    ININIT5             YES
         L     R15,JINOPEN         POINT TO OPEN LIST
         OI    D0(R15),BIT0        DO NOT OPEN SYSLIB
         L     R15,JINCLOS         POINT TO CLOSE LIST
         XC    JINDSNS,JINDSNS       CLEAR MY WORK-AREA POINTER
         OI    D0(R15),BIT0        DO NOT CLOSE SYSLIB
ININIT5  LA    R10,XTIN            ADDRESS OF SYSIN LIB DCB EXIT
         L     R1,JINOPEN          OPEN INPUT
         OPEN  MF=(E,(1))          ''
         USING IHADCB,R1           ESTABLISH ADDRESSABILITY
         L     R1,JSYSLIB          PT TO SYSLIB DCB
         TM    DCBOFLGS,BIT3       WAS OPEN SUCCESSFUL
         BZ    RETURN              NO, RETURN
         LH    R0,DCBBLKSI         GET BUFFER FOR LIBRARY
         DROP  R1                  DROP DCB BASE
         GETMAIN R,LV=(0)          ACQUIRE CORE
         ST    R1,JLIBBUF          SAVE LIBRARY BUFFER ADDRESS
         L     R4,X'10'              FIND TIOT
         L     R4,0(,R4)
         L     R4,4(,R4)
         L     R4,12(,R4)            AND PUT IT INTO REG 4
*        NUR FUER TEST
         L     R0,GMLTTEST
         GETMAIN R,LV=(0)
         LR    R2,R1
         L     R0,GMLTTES1
         GETMAIN R,LV=(0)
         LR    R1,R2
         L     R0,GMLTTEST
         FREEMAIN R,LV=(0),A=(1)
         B     GMDDDD
GMLTTEST DC    A(30000)
GMLTTES1 DC    A(30000)
*        BIS HIERHER DELETEN
GMDDDD   DS    0H
         L     R0,GMLENGTH           GET CORE
         GETMAIN R,LV=(0)
         STCM  R1,7,JINDSNS          AND SAVE ITS ADRESS
         LR    R5,R1                 DEFINE BASE FOR
         USING JINZ,R5               WORK-AREA
*
         L     R1,JSYSLIB            LOAD A(SYSLIB-DCB)
         USING IHADCB,R1
         MVC   SLDCB,0(R1)           MOVE DCB INTO WORK
         LA    R14,SLDCB             LOAD MY DCB-ADRESS
         ST    R14,DCBOP             CREATE MY OPEN-LIST
         MVC   DCBOP(1),LOPIN
         LA    R1,SLDCB              LOAD MY DCB-PTR
         LA    R14,DCBEY
         STCM  R14,7,DCBEXLST+1      STORE EXIT-ADRESS
         LA    R14,DCBFCB
         ST    R14,DCBEY
         MVI   DCBEY,X'87'           DEFINE RDJFCB-EXIT
         LA    R6,SLDSNS
NEXTJFCB LA    R1,DCBOP              LOAD LIST-FORM
         RDJFCB MF=(E,(1))
         MVC   0(44,R6),DCBFCB         DSN
         MVC   46(6,R6),DCBFCB+X'76'   VOLSER
         LR    R1,R6
         LA    R14,44                  FIND ACTUAL LENGTH
VGLBLM   DS    0H                      FIND
         CLI   0(R1),C' '
         BE    FDBLM
         LA    R1,1(,R1)
         BCT   R14,VGLBLM
         SPACE 2
FDBLM    DS    0H                      LENGTH
         SLR   R1,R6
         STH   R1,44(,R6)              SAVE OFFSET ( LENGTH+1)
         LA    R1,SLDCB
         LH    R14,DCBTIOT
         AR    R14,R4                ADD TIOT-OFFSET
         SLR   R15,R15
         ICM   R15,1,0(R14)          NEXT DD
         BZ    NOCONC                NO MORE
         ALR   R14,R15               ELSE POINT TO NEXT DD
         CLC   BLANK8(L'DCBDDNAM),4(R14)
         BNE   NOCONC                CONCATENATED
         SLR   R14,R4                STORE NEW OFFSET
         STH   R14,DCBTIOT           INTO DCB
         LA    R6,L'SLDSNS(,R6)      NEXT DDNAME
         B     NEXTJFCB              READ THE JFCB
         SPACE 3
NOCONC   LA    R6,L'SLDSNS(,R6)
         ST    R6,PLOW               COMPUTE REST OF WORK
         MVC   BLDNUM,BLDLLEN        CREATE BLDL-PARAM-LIST
*
         XC    PMAC1,PMAC1
         LR    R1,R5
         AH    R1,GMLENGTH+2         COMPUTE HIGH-ADRESS
         ST    R1,PACT               STORE POINTER
         MVI   SWLOST,0              INIT LOAD-SWITCH
*
         MVI   SCMAST,MASTNODD       INIT. MASTER-SWITCH
         LA    R1,KMASTER            DD-NAME
         MVC   CNAME,BLANK8        BLANK NAME
         DEVTYPE (1),MASTDEV
         LTR   R15,R15
         BNZ   RETURN
*
         TM    MASTDEVT,MASTDA       DA-FILE
         BZ    RETURN
         LOAD  EP=LIBFAIR
         LR    R15,R0                CREATE LIBFAIR-ADRESSES
         CALL  (15),MF=(E,LIBADR)
         MVI   RCMAST,MASTRC0
         L     R15,AMOPEN            OPEN MASTER
         CALL  (15),(0,RCMAST,KMASTER),VL,MF=(E,LCALL)
         OI    SCMAST,MASTOP         ASSUME SUCC. OPEN
         CLI   RCMAST,MASTRC0
         BE    RETURN                OPEN IS OK
         MVI   SCMAST,MASTNODD       OPEN UNSUCCESSFULL
         DELETE  EP=LIBFAIR
         B     RETURN              RETURN
         TITLE '&COMPNM&ASMID - INPUT I/O MODULE - CLOSE ROUTINE FOR ''X
               SYSIN'' AND ''SYSLIB'' DCB''S'
CLOSE    DS    0H
         USING MACDS,R6
         ICM   R5,7,JINDSNS          LOAD MY WORKAREA-PTR.
         BZ    NOMLIST
         ICM   R6,15,PMAC1           LOAD FIRST-PTR.
         BZ    FREEA
         SPACE 3
         L     R3,JLIBBUF            BUF IS MY WORKAREA
         USING MACEND,R3
         MVC   MDCB,ML
         LA    R1,MLISTE
         MVC   MLISTE(1),MOPEN       PREPARE OPEN
         LA    R15,MDCB              LOAD A(DCB)
         USING IHADCB,R15
         LA    R14,MACEXA            A(DCB-EXLST)
         STCM  R14,7,DCBEXLST+1      INTO MY DCB
         DROP  R15
         LA    R15,MACRJFC           A(JFCB-AREA)
         ST    R15,0(,R14)           INTO DCB-EXLST
         MVI   MACEXA,X'87'          DEFINE EXIT-TYPE
*
         RDJFCB (MDCB),MF=(E,(1))
         LTR   R15,R15
         BZ    TRYOPEN              TRY TO OPEN, IF DDSTMT. OK
         SPACE 5                    *
DOWTO    MVC   VWTOL,WTOL
         WTO   MF=(E,VWTOL)
         B     FREEA                FREE STORAGE
         SPACE 5
TRYOPEN  LA    R1,MLISTE
         OPEN  MF=(E,(1))
         USING IHADCB,R1
         L     R1,MLISTE            LOAD DCB-ADRESS
         TM    DCBOFLGS,BIT3
         BZ    DOWTO                OPEN USUCCESSFULL
         DROP  R1
NEXTM    L     R1,MLISTE            LOAD DCB-ADRESS
         PUT   (1)
         USING MACREC,R1
         MVC   MACPUT,MPINIT        CLEAR AREA
         MVC   MACPMN,MNAME
         MVC   MACLIBN,CNAME       MOVE NAME OF MODULE(LIBMASTER)
         ICM   R15,7,MLPT           INSERT LIBRARY-PTR.
         BZ    NOTFD
         MVC   MAPDSN,0(R15)        MOVE DSNAME
         LH    R14,44(,R15)            LENGTH OF DSN
         LA    R14,MAPDSN+1(R14)       OFFSET
         MVC   0(2,R14),=C'ON'         ON-CONSTANT
         MVC   3(6,R14),46(R15)        VOLSER
TESTNX   ICM   R6,7,FWD             ANOTHER MACRO
         BNZ   NEXTM
         TM    SWLOST,X'80'         TEST LOST-SWITCH
         BZ    NOMSGLO
         MVC   VWTOL,WTOLOST
         WTO   MF=(E,VWTOL)
         SPACE 3
NOMSGLO  LA    R1,MLISTE
         MVC   MLISTE(1),MCLOSE     CLOSE OUTPUT-DCB
         CLOSE MF=(E,(1))
         LA    R1,MDCB              PREPARE FREEPOOL
         FREEPOOL (1)
         B     FREEA                 FREE MY AREA
         SPACE 3
NOTFD    MVC   MACFEH,KNOTFD
         B     TESTNX
         DROP  R1
         SPACE 3
FREEA    L     R0,GMLENGTH          FREE MY WORK-AREA
         FREEMAIN R,LV=(0),A=(5)
         XC    JINDSNS,JINDSNS
NOMLIST  DS    0H
         L     R1,JSYSLIB          POINT TO DCB
         USING IHADCB,R1           ''
         TM    DCBOFLGS,BIT3       WAS OPEN SUCCESSFUL FOR LIBRARY
         BZ    NOTSUC              NOT SUCCESSFUL
         LH    R0,DCBBLKSI         GET BUFFER LENGTH
         DROP  R1                  DROP DCB BASE
         L     R1,JLIBBUF          GET LIBRARY BUFFER ADDRESS
         FREEMAIN R,LV=(0),A=(1)   FREE LIBRARY BUFFER
NOTSUC   L     R1,JINCLOS          CLOSE INPUT
         CLOSE MF=(E,(1))          ''
         L     R1,JSYSIN           PT TO SYSIN DCB
         USING IHADCB,R1           ''
         TM    DCBBUFCB+D3,BIT7    IS THERE A BUFCB
         BO    NOBUFCB             BR IF NO BUFCB
         FREEPOOL (1)              FREE BUFFERS IN BUFCB
         DROP  R1                  DROP DCB BASE
NOBUFCB  XC    JADINCM,JADINCM     ZERO ADDRESS FOR ABORT MODULE
         B     RETURN              RETURN
         TITLE '&COMPNM&ASMID - INPUT I/O MODULE - DCB OVERRIDE AND DCBX
               -EXITS'
         USING IHADCB,R1           ESTABLISH BASE FOR DCB
OVERRIDE CR    R2,R15              PAST END OF LIST
         BHR   R9                  YES, RETURN
         OC    D0(D8,R2),D0(R2)    IS DDNAME ZERO
         BZR   R9                  YES, RETURN
         MVC   DCBDDNAM,D0(R2)     OVERRIDE DDNAME
         BR    R9                  RETURN
         DROP  R1                  DROP DCB BASE
         USING IHADCB,R1           ESTABLISH ADDR OF DCB
*        DCB EXIT FOR SYSIN & SYSLIB
         USING *,R10               ESTABLISH BASE ADDRESS
XTIN     LH    R3,DCBLRECL           LOGICAL RECORD LENGTH
         TM    DCBRECFM,BIT0       FIXED RECORD LENGTH
         BNZ   XTIN10              NO, MAKE RECFM=FB
         MVI   DCBRECFM,BIT0+BIT3  FORCE RECFM=FB
XTIN10   LH    R5,DCBBLKSI         IS BLKSIZE SPECIFIED
         LTR   R5,R5
         BZ    XTIN20              NO, GO SET DEFAULT BLKSIZE
         CR    R3,R5               BLKSIZE LESS THAN LRECL
         BH    XTIN20              IF SO SET BLKSIZE=LRECL
         OI    DCBRECFM,BIT3       SET BLOCKED
         LR    R3,R5               SAVE BLKSIZE
         LH    R2,DCBLRECL         LOGICAL RECORD LENGTH
         SR    R4,R4               ZERO FOR DIVIDE
         DR    R4,R2               R4(REMAINDER)=R4R5/R2 LRECL
         SR    R3,R4               NOW BLKSIZE IS MULT OF LRECL
         B     XTIN30              STORE BLKSIZE
XTIN20   NI    DCBRECFM,BITFF-BIT3 SET UNBLOCKED
XTIN30   STH   R3,DCBBLKSI         STORE BLKSIZE
         BR    R14
         EJECT
* KONSTANTS USED BY Z-MOD.
*
ML       DCB   DSORG=PS,LRECL=133,RECFM=FBSM,MACRF=PL,BLKSIZE=1330,  ***
               DDNAME=MACLIST
MLE      EQU   *
MOPEN    OPEN  (,OUTPUT),MF=L
MCLOSE   CLOSE 0,MF=L
MLEQU    EQU   *-MCLOSE
KNOTFD   DC    C' NOT FOUND '
LOPIN    OPEN  (,INPUT),MF=L
         SPACE 5
WTOL     WTO   'MACLIST OPTION CANCELED - MACLIST DDCARD MISSING',    **
               ROUTCDE=2,MF=L
         SPACE 5
KLOCERR  WTO   'MODULE NOT FOUND ON MASTER, SPECIFY CORRECT NAME',    **
               ROUTCDE=2,MF=L
         SPACE 5
KCATERR  WTO   'MASTER HAS BECOME UNUSABLE',                          **
               ROUTCDE=2,MF=L
         SPACE 5
WTOLOST  WTO   'MACRO ENTRIES LOST (NOT ENOUGH CORE)',MF=L,            X
               ROUTCDE=2
         SPACE 5
MINCARG  DC    C'1'         REPLACE -INC WITH REFERENCED CARDS
MPINIT   DC    X'09',C'**',CL8' ',C' -- ',CL8' '
FCONST   DC    C' FOUND IN '
BLANK8   DC    CL44' ',(133-*+MPINIT)C' '
         CNOP  0,4
GMLENGTH  DC    AL1(8),AL3(8192)
KMASTER  DC    CL8'MASTER'
KCOMPILE DC    C'COMPILE '
KWTON     WTO   'SUPPLIED MODULE-NAME HAS SYNTAX-ERROR',MF=L
BLDLLEN   DC    X'0001000C'          ONE ENTRY IN LIST, LENGTH 12 BYTES
         DROP  R1,R10              DROP BASES
*        PATCH AREA
*
*        JPATCH X0F00,302          5% PATCH AREA
         PRINT GEN,DATA
IFOX0F00 CSECT
         LTORG
         PRINT GEN,NODATA
PATCHDC  DC    C'IFOX0F00 20.40 02/04/72'
ABSOLEN  EQU   *-IFOX0F00          CALCULATE ACTUAL MODULE LENGTH
PTCHLEN  EQU   ABSOLEN/256
PATCH    DC    (PTCHLEN)X'FF'                 DYNAMIC PATCH AREA
MACEND    DSECT
MLISTE    DS    CL(MLEQU)
MDCB      DS    CL(MLE-ML)
MACEXA    DC    A(0)
MACRJFC   DC    XL187'00'
          SPACE 5
MACREC    DSECT
MACOU     DC    X'09'    CTL
         DC    C'**'
MACLIBN  DC    CL8' '                  MODULENAME IN MASTER
         DC    C' -- '
MACPMN    DC    CL8' '
MACFEH    DC    CL(L'FCONST)' '
MAPDSN    DC    CL44' '
          DC    C' '
MACON    DC    C'ON '                  ON-CONSTANT
MACVOL   DC    CL6' '                  VOLUME,INFO
         DC    CL1' '
          DS    (133-*+MACREC)C
MACOUE    EQU   *
          ORG   MACOU
MACPUT    DS    CL(MACOUE-MACOU)
MACDS     DSECT
FWD       DS    XL3
BWD       DS    XL3
MNAME     DS    CL8
MLPT      DS    XL3
MACDSE    EQU   *
MACDSL    EQU   *-MACDS
          EJECT
JINZ      DSECT
BLDNUM    DS    XL4                LIST FOR BLDL
BLNAME    DS    CL8
BLDTR     DS    XL3
BLC       DS    X
*
CNAME    DS   D
MASTDEV   DS    0D
          DS    2X
MASTDEVT  DS    X                   DEVICE-TYPE
          DS    5X                  REST
*
LIBADR    DS    0F
AMOPEN    DC    A(0)
AMMOD     DC    A(0)
AMRCD     DC    A(0)
AMHST     DC    A(0)
AMCLOS    DC    A(0)
LCALL     CALL  ,(,,,),VL,MF=L
LCAL2     CALL  ,(,),MF=L
RCMAST    DS    X
SCMAST    DS    X
*
MASTOP   EQU   128
MASTOK   EQU   64
MASTDA   EQU   X'20'
MASTNODD EQU   0
MASTRC0  EQU   C'0'
MASTEOF  EQU   C'1'
*
MREC     DS    CL100               MASTER INPUT-RECORD
*                                  USED TO GET INFO. ABOUT MODULE
         ORG   MREC
VWTOL    DS    CL50                LISTFORM FOR WTO
         ORG
PLOW      DS    A
PMAC1     DS    A
PACT      DS    A
SWLOST    DS    X
SLDSNS   DC    16CL52' '     DSNAME(44), L'DSNAME(2), VOLSER(6)
          DS    0F
SLDCB     DS    CL(DCBEND-IHADCB)
DCBOP     DS    A
DCBEY     DS    A
DCBFCB    DS    CL176
*
         END   START
