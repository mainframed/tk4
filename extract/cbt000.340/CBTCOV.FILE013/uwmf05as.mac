*
*              BLDG UTILITY
*              AUFBAU,AENDERUNG UND LOESCHUNG VON GDG-INDICES IM KATALOG
*              GESCHIEHT MIT DER PROZEDUR BLDG.DIESE PROZEDUR WIRD EBEN-
*              FALLS ZUM AUFLISTEN ALLER GDG-INDICES BENUTZT.
*              STEUERKARTEN FUER AUFBAU,AENDERUNG,LOESCHUNG
*              //JDBLDG JOB .......,CLASS=C
*              // EXEC BLDG
*              SYSIN-KARTEN
*              DIE SYSIN-KARTEN HABEN FOLGENDES FORMAT:
*              BLDGNAME,ZAHL
*              'BLDGNAME' IST DER VOLL QUALIFIZIERTE NAME DES GDG-
*              INDEX.
*              'ZAHL' GIBT DIE ZAHL DER GEWUENSCHTEN GENERATIONEN AN.
*              (0 = LOESCHEN DER GDG)
*              DIE AKTIONEN DES BLDG-UTILITYS WERDEN AUF EINER SYSOUT-
*              DATEI UND EINER RESIDENTEN DATEI DOKUMENTIERT.
*              STEUERKARTEN FUER GDG-AUFLISTUNG
*              //JDBLDG JOB .....,CLASS=C
*              // EXEC BLDG
*              KEINE SYSIN-KARTEN
*              DIE AUFLISTUNG LIEFERT FOLGENDE INFORMATIONEN:
*              GDG-NAME,OPTION (EMPTY ODER DELETE),MAXIMALE ANZAHL
*              GENERATIONEN (MAXGEN), AUGENBLICKLICH KATALOGISIERTE ZAHL
*              GENERATIONEN (ANZGEN), INDIKATOR FUER LEEREN INDEX (LEER)
*              ALLE UTILITY-OPERATIONEN BENUTZEN DEN WMFRES-KATALOG.
*              SOLL EIN KATALOG AUF EUNEM ANDEREN VOLUME ANGESPROCHEN WE
*              LAUTET DAS EXEC-STATEMENT:
*              // EXEC BLDG,CATALOG=VOLUMENR.
*              ANWENDUNGSBEISPIELE:
*              //JDBLDG1 JOB ....
*              // EXEC BLDG
*              R.FB998010,4        NEUAUFNAHMEN ODER AENDERUNGEN
*              R.FD992030,0        LOESCHEN
*              //JDBLDG2 JOB ....
*              // EXEC BLDG,CATALOG=SYSRES  AUFLISTEN GDG-ENTRIES AUF SY
*        FUNKTIONSSTEUERUNG UEBER SYSIN-KARTEN
*
*        FORMAT 1 :      GDGNAME,ZAHL    AB BELIEBIGER STELLE
*
*                        GDGNAME = VOLL QUALIFIZIERTER NAME DER GDG
*
*                        ZAHL = 0  HEISST LOESCHEN DES GDG
*
*                        ZAHL UNGLEICH 0 HEISST ABAENDERN AUF
*                        'ZAHL' GENERATIONEN ODER NEUAUFBAU,
*                        JE NACHDEM OB DIE GDG SCHON EXISTIERT
*                        ODER NICHT.
*
*
*        FORMAT 2 :      KEIN SYSIN.
*
*                        GDG - ENTRIES WERDEN AUFGELISTET.
*
*
*                        FUER BEIDE FORMATE :
*
*                        IM PARM-FELD WIRD DIE 6-STELLIGE
*                        VOLUME-SERIAL-NR DES VOLUMES ERWARTET,
*                        AUF DEM SICH DER ZU BEARBEITENDE KATALOG
*                        BEFINDET.
*
*
*
*
         EJECT
LINKREG  EQU   10                       LINK-REGISTER
TABREG   EQU   9                        BASISREG. GENERATIONSTABELLE
TABREGV  EQU   8                        SAVE-REGISTER
REG1     EQU   3                        ENDADRESSE DES VARIABLEN DSN
REG2     EQU   4                        ARB.REG
REG3     EQU   5                        ARB.REG
         SPACE 6
TABFI    DSECT                          TABELLENFELD DER GEN.TABELLE
         USING *,TABREG
TBCHAIN  DS    A                        KETTADRESSE
TBGENER  DS    CL8                      GENERATION (GXXXXVXX)
TBLOC    DS    0CL265                   LOCAREA MIT 12-BYTE ENTRIES/VOL
TBANZ    DS    H                        ANZ. VOLUME-ENTRIES
TBENTRYS DS    CL263
TBLEN    EQU   *-TABFI                  LAENGE DES FELDES
         EJECT
SA991550 CSECT
         INIT  1
         L     1,0(1)
         MVC   CVOLUME,2(1)
         OPEN  SYSIN                    STEUERDATEI EROEFFNEN
         TM    SYSIN+X'30',X'10'        SYSIN-DD-STMT VORHANDEN ?
         BO    PROG
         LA    1,=A(CVOLEN)
         LINK  EP=SA990610
         B     RCSET
PROG     DS    0H
         ENQ   (CATALOG,MSGSET,E,,SYSTEM) SERIALISIEREN UTILITY-FUNKT.
         DISPLAY ' ',ASA=NS             EJECT PROTOKOLL-LISTE
         DISPLAY '---------------------------------  B L D G    U T I LX
                I T Y    P R O T O K O L L  ---------------------------X
               ------'
GETNEXT  DS    0H
         GET   SYSIN,IN                 NAECHSTE SYSIN-KARTE
         BAL   LINKREG,TESTIN           UNTERSUCHEN KARTENINHALT
TESTOPTI DS    0H
         TM    CTLBYTE,BLDGOPT          . BLDG ?
         BO    BLDG
         DISPLAY 10,'SYSIN:',4,IN,ASA=3
         DISPLAY 10,'AKTION:',3,'KEINE, DA EINGABEKARTE FORMAL FALSCH',*
               24,FEHLER,ASA=2
         OI    CTLBYTE,ERROPT4          SEVERITY CODE 4 F.FALSCHE KARTE
         B     GETNEXT
         EJECT
EOD      DS    0H                       ENDE SYSIN
         DISPLAY 10,'U T I L I T Y    E N D E',ASA=2
         CLOSE (SYSIN)
         DEQ   (CATALOG,MSGSET,,SYSTEM) DEQUEUE MESSAGE DATA SET
RCSET    DS    0H
         LA    15,0
         NI    CTLBYTE,X'0C'            LOESCHEN FUNKTIONS-BITS
         IC    15,CTLBYTE               REG 15 = RETURN CODE
         L     13,SAVEAREA+4
         RETURN (14,12),RC=(15)
         EJECT
TESTIN   DS    0H
         NI    CTLBYTE,X'0F'            STEUERBITS LOESCHEN
         MVI   DSN,C' '
         MVC   AGDG,=3C' '              LOESCHEN GENERATIONENZAHL
         MVC   DSN+1(43),DSN            LOESCHEN GDG-NAME
         LA    REG1,IN
         LA    REG2,DSN
SR1      DS    0H                       GDG-NAME ERMITTELN
         CLI   0(REG1),C' '
         BE    INCR
         CLI   0(REG1),C','
         BE    SR20
         MVC   0(1,REG2),0(REG1)
         LA    REG2,1(REG2)
         C     REG2,=A(DSN+44)
         BNL   ENDIN
INCR     DS    0H
         LA    REG1,1(REG1)
         C     REG1,=A(IN+80)
         BL    SR1
         B     ENDIN
SR20     DS    0H
         S     REG2,=A(DSN)
         STH   REG2,LDSN                LAENGE DSN BINAER
         LA    REG2,AGDG
         LA    REG1,1(REG1)
SR2      DS    0H                       GENERATIONENZAHL ERMITTELN
         CLI   0(REG1),C' '
         BE    ENDIN
         MVC   0(1,REG2),0(REG1)
         LA    REG1,1(REG1)
         LA    REG2,1(REG2)
         C     REG2,=A(AGDG+3)
         BL    SR2
ENDIN    DS    0H
         S     REG2,=A(AGDG)
         STH   REG2,LAGDG               LAENGE GEN.ZAHL BINAER
         CLI   DSN,C' '                 INDEXNAME GEFUNDEN ?
         BE    TRC4
         CLI   AGDG,C' '                ANZAHL GENERATIONEN GEFUNDEN ?
         BE    TRC4
         LH    REG1,LAGDG
         BCTR  REG1,0
         STC   REG1,CNUM+1
         STC   REG1,MVN+1
         STC   REG1,BYTE
MVN      MVN   TNUM(0),AGDG
CNUM     CLC   TNUM(0),AGDG             GEN.ZAHL NUMERISCH ?
         BNE   TRC4
         OI    BYTE,X'70'
         MVC   PACK+1(1),BYTE
PACK     PACK  DW,AGDG
         CVB   REG1,DW
         STH   REG1,AGDGBIN
         LH    6,AGDGBIN
         CVD   6,DW
         UNPK  AGDB,DW+6(2)
         OI    AGDB+2,X'F0'
         OI    CTLBYTE,BLDGOPT          BLDG GEWUENSCHT
         BR    LINKREG
*
TRC4     DS    0H
         OI    CTLBYTE,ERROPT4          SYSIN-KARTE FORMAL FALSCH
         BR    LINKREG
         EJECT
BLDG     DS    0H
         DISPLAY 10,'SYSIN:',4,IN,ASA=3 DISPLAY STEUERKARTE
         LA    REG1,DSN
         AH    REG1,LDSN
         LOCATE READ                    INDEX LESEN
         ST    15,REG15
         CH    15,=H'8'                 NICHT GEFUNDEN ?
         BE    NOEXIST
         CH    15,=H'12'                ALS INDEX GEFUNDEN ?
         BE    TESTEMP
         CH    15,=H'0'                 ALS DATA SET GEFUNDEN ?
         BE    DATASET
         ABEND 1550,DUMP                KEINS VON DIESEN - ABEND
REG15    DC    F'0'
         EJECT
NOEXIST  DS    0H                       --- INDEX EXISTIERT NICHT ---
         CLC   AGDG,=3C'0'              SOLLTE DER NICHT GEFUNDENE
         BE    NOE1                     ENTRY GELOESCHT WERDEN ?
         BAL   LINKREG,BLDGROUT         NEIN - AUFBAUEN
         B     EXIT
NOE1     DS    0H
         DISPLAY 20,DSN,ASA=2
         DISPLAY 40,'EXISTIERT NICHT IM KATALOG',14,FEHLER,ASA=0
         OI    CTLBYTE,ERROPT4+ERROPT   SEVERITY 4
         B     EXIT
         EJECT
DATASET  DS    0H                       --- DSNAME EXISTIERT ALS DSET -
         DISPLAY 20,DSN,ASA=2
         DISPLAY 40,'IST EINE KATALOGISIERTE DATEI',11,FEHLER,ASA=0
         OI    CTLBYTE,ERROPT8+ERROPT   SEVERITY 8
         B     EXIT
         EJECT
TESTEMP  DS    0H                       --- INDEX GEFUNDEN ---
         MVC   0(3,REG1),=C'(0)'
         LOCATE READ                    LETZTE GENERATION LESEN
         LTR   15,15
         BZ    BLDTAB0                  GEFUNDEN - TABELLE AUFBAUEN
         ZAP   GENCOUNT,=P'0'
         B     ENDUNC1                  NICHT GEFUNDEN - DLTX
BLDTAB0  DS    0H                       --- AUFBAU GENERATIONSTABELLE -
         OI    CTLBYTE,CHNGOPT          CHANGE-INDIKATOR
         LA    TABREGV,TABAD
         ZAP   GENCOUNT,=P'0'           GEN.ZAEHLER = 0
BLDTAB   DS    0H
         AP    GENCOUNT,=P'1'           GEN.ZAEHLER +1
         GETMAIN R,LV=TBLEN             1 TAB.FELD ANFORDERN
         LR    TABREG,1
         ST    TABREG,0(TABREGV)        ADDRESSE INS LETZTE KETTFELD
         MVC   TBGENER,1(REG1)          GENERATION BESETZEN
         MVC   TBLOC(256),LOCAREA       LOCATE-INFO BESETZEN
         MVC   TBCHAIN,=A(0)            FOLGE-KETTFELD = 0
         LR    TABREGV,TABREG
         ZAP   UC,GENCOUNT              AUFBEREITEN
         OI    UC+1,X'0F'               DER
         MVC   0(9,REG1),=C'(-XXX)   '  LETZTEN
         UNPK  2(3,REG1),UC             RELATIVEN GENERATIONSNUMMER
         LOCATE READ                    GENERATION LESEN
         LTR   15,15
         BZ    BLDTAB                   GEFUNDEN - TAB.AUFBAU
         B     UNCATE                   NICHTS MEHR GEFUNDEN - UNCATALG
         EJECT
UNCATE   DS    0H                       --- ENTKATALOGIS. ALLER GEN. --
         L     TABREG,TABAD
         MVI   0(REG1),C'.'
UCATLOOP DS    0H
         MVC   1(8,REG1),TBGENER        MOVE GEN. IN DSN-FELD
         CATALOG UNCAT
         LTR   15,15
         BZ    NXTUN
         DISPLAY 20,'UNCATALOG BRACHTE RETURN-CODE',(15),22,FEHLER,    X
               ASA=2
         DISPLAY 20,'BEI GENERATION',TBGENER,TYPFLDS=DSECT
         OI    CTLBYTE,ERROPT8+ERROPT   FEHLER-INDIKATOR
NXTUN    DS    0H
         OC    TBCHAIN,TBCHAIN          KEINE GENERATION MEHR ?
         BZ    ENDUNC                   - DELETE INDEX
         L     TABREG,TBCHAIN
         B     UCATLOOP
         EJECT
ENDUNC   DS    0H                       --- DELETE BLDG-INDEX ---
ENDUNC1  DS    0H
         MVI   0(REG1),C' '             PUNKT LOESCHEN
         INDEX DELETE                   DLTX
         LTR   15,15
         BZ    TESTAGEN                 OKAY - PRUEFEN, OB NEU KATALGS.
         DISPLAY 20,'DELETE INDEX BRACHTE RETURN-CODE',(15),19,FEHLER, X
               ASA=2
         OI    CTLBYTE,ERROPT8+ERROPT   FEHLER-INDIKATOR
         B     EXIT
         EJECT
TESTAGEN DS    0H
         CLC   AGDGBIN,=H'0'            DELETE GEWUENSCHT ?
         BE    EXIT                     JA - EXIT
         BAL   LINKREG,BLDGROUT         NEIN - NEUEN BLDG AUFBAUEN
         MVI   0(REG1),C'.'
         TM    CTLBYTE,ERROPT           GAB ES FEHLER BEIM BLDG ?
         BO    EXIT                     JA - EXIT
         L     TABREG,TABAD
CATALG   DS    0H                       --- RECATALOG GENERATIONEN ---
         LTR   TABREG,TABREG
         BZ    EXIT
         MVC   1(8,REG1),TBGENER        MOVE GENERATION
         MVC   LOCAREA(256),TBLOC       MOVE VOL-INFO
         MVC   LOCAREA+256(9),=20X'00'
         CATALOG CAT                    CATALOG
         LTR   15,15
         BZ    INCRE
         DISPLAY 74,'GENERATION',TBGENER,'NICHT UMKATALOGISIERT',      U
               TYPFLDS=DSECT,ASA=2
INCRE    DS    0H
         L     TABREG,TBCHAIN           NAECHSTE GENERATION
         B     CATALG
         EJECT
BLDGROUT DS    0H                       --- BLDG-AUFBAU
         MVC   BLDGE+3(1),AGDGBIN+1
         INDEX BLDGE
         LTR   15,15
         BCR   8,LINKREG
         OI    CTLBYTE,ERROPT8+ERROPT
         DISPLAY 20,'BLDG BRACHTE RETURN-CODE',(15),27,FEHLER,ASA=2
         BR    LINKREG
         EJECT
DISGEN   DS    0H                       --- DISPLAY KATALOGIS.GEN. ---
         L     TABREG,TABAD
         MVC   HILFE,=C'KATALOGISIERT WAREN'
LOOP1    DS    0H
         MVC   ZWILFE,TBGENER           GENERATION MOVE
         LH    REG2,TBANZ
         LA    REG3,TBENTRYS
LOOP2    DS    0H
         MVC   SCHLUPF,4(REG3)        VOLSER MOVE
         CLI   2(REG3),X'80'            AUF TAPE ?
         BE    TAPE
         CLI   2(REG3),X'20'            ODER DISK ?
         BE DISK
         MVC   TUPF,=C'VOL '
         B     NIX
TAPE     MVC   TUPF,=C'TAPE'
         B     NIX
DISK     MVC   TUPF,=C'DISK'
NIX      DS    0H
         DISPLAY 20,HILFE,ZWILFE,2,'AUF',TUPF,2,SCHLUPF,ASA=2
         MVC   HILFE,=20C' '
         MVC   ZWILFE,=8C' '
         LA    REG3,12(REG3)            NAECHSTER VOLUME-ENTRY
         BCT   REG2,LOOP2
         L     TABREG,TBCHAIN           NAECHSTE GENERATION
         LTR   TABREG,TABREG
         BCR   8,LINKREG
         B     LOOP1
         EJECT
EXIT     DS    0H                       --- EXITPUNKT DER BLDG-FKT. ---
         TM    CTLBYTE,ERROPT
         BZ    NOERR
         NI    CTLBYTE,255-ERROPT-CHNGOPT
         DISPLAY 10,'AKTION:',3,'KEINE',ASA=2
         B     DELTA
NOERR    DS    0H                       KEIN FEHLER AUFGETRETEN
         MVC   0(9,REG1),=9C' '
         DISPLAY 10,'AKTION:',3,DSN,ASA=2
         CLC   AGDGBIN,=H'0'
         BE    MDEL
         TM    CTLBYTE,CHNGOPT
         BO    MCHN
         DISPLAY 36,'....NEU ANGELEGT FUER',AGDB,'GENERATIONEN',ASA=0
         B     DELTA1
MDEL     DS    0H
         DISPLAY 36,'...GELOESCHT',ASA=0
         NI    CTLBYTE,255-CHNGOPT
         B     DELTA
MCHN     DS    0H
         NI    CTLBYTE,255-CHNGOPT
         DISPLAY 36,'...GEAENDERT AUF',AGDB,'GENERATIONEN',ASA=0
DELTA    DS    0H                       DELETE TABELLE
         OC    TABAD,TABAD
         BNZ   DISPGEN
         DISPLAY 20,'DER INDEX WAR LEER.',ASA=2
         B     DELTA1
DISPGEN  DS    0H
         BAL   LINKREG,DISGEN
DELTA1   DS    0H
         DISPLAY STRICHLE,ASA=2
         XC    TABAD,TABAD              LOESCHEN TABELLEN-ADRESSE
         NI    CTLBYTE,X'0F'            LOESCHEN FUNCTION-BITS
         MVC   AGDGBIN,=H'0'            ANZ.GEN=0
         ZAP   GENCOUNT,=P'0'
         B     GETNEXT                  NAECHSTE KARTE LESEN
         EJECT
CATALOG  DC    CL8'CATALOG'             MAJOR NAME ENQ
MSGSET   DC    CL8'MSGSET'              MINOR NAME ENQ
IN       DC    CL80'SYSIN-EINGABEBEREICH'
CTLBYTE  DC    B'0'                     CONTROL BYTE
BLDGOPT  EQU   X'80'
PUNCHOPT EQU   X'40'
LISTOPT  EQU   X'20'
ERROPT8  EQU   X'08'
ERROPT4  EQU   X'04'
ERROPT   EQU   X'02'
CHNGOPT  EQU   X'01'
CVOLEN   DC    H'6'
CVOLUME  DC    CL6'WMFRES'
DSN      DC    CL44' '                  DSNAME-BEREICH
AGDG     DC    C'000'
TNUM     DC    5C'0'
LDSN     DC    H'0'
AGDB     DC    CL3'0'
LAGDG    DC    H'0'
AGDGBIN  DC    H'0'                     ANZAHL GEWUENSCHTER GEN-BINAER
BYTE     DC    B'0'
DW       DC    D'0'
TABAD    DC    A(0)                     ADRESSE DER GENERATIONSTABELLE
LOCAREA  DS    0D,265C
         DS    0D
*  CATALOG MANAGMENT LISTEN
READ     CAMLST NAME,DSN,,LOCAREA
DELETE   CAMLST DLTX,DSN
BLDGE    CAMLST BLDG,DSN,CVOLUME,,DELETE,,1
CAT      CAMLST CAT,DSN,,LOCAREA
UNCAT    CAMLST UNCAT,DSN
*
GENCOUNT DC    PL2'0'                   ZAHL DER TATSAECHLICHEN GEN.
UC       DC    PL2'0'
FEHLER   DC    C'** ** **   F E H L E R   ** ** **'
HILFE    DC    CL20' '
ZWILFE   DC    CL8' '
SCHLUPF  DC    CL6' '
TUPF     DC    CL4' '
SVCHAIN  DC    A(0)
STRICHLE DC    C'------------------------------------------------------*
               --------------------------------------------------------'
               -----'
         LTORG
         EJECT
SYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=GM,EODAD=EOD,LRECL=80
         EJECT
         DISPLAY MF=L,BLKSIZE=121
         END
         TITLE 'B L D G    L I S T    P R O G R A M M'
LINKREG  EQU   14                       LINK-REGISTER
LOCR     EQU   10                       LOCAREA-SCAN-REGISTER
TTREG    EQU   9                        TTR-TABELLEN-REGISTER
REG1     EQU   3                        ARB.REG 1
REG2     EQU   4                        ARB.REG 2
         SPACE 3
SA990610 CSECT
         INIT  1
         SPACE 3
         L     1,0(1)
         MVC   CVOLUME,2(1)             CATALOG-VOLUME WIRD UEBERGEBEN
         NI    WMDIDCB+36,X'FB'         'ASA' LOESCHEN
         LA    TTREG,TTRTABLE
         DISPLAY 30,'** ** **  BLDG-ENTRIES AUF',CVOLUME,0,'-KATALOG', X
               2,'** ** **'
         DISPLAY 30,' '
         DISPLAY 30,'GDGNAME',11,'OPTION  MAXGEN  ANZGEN    L E E R'
         DISPLAY ' '
*
*    JEDER INDEX POINTER, DER IM VOLUME INDEX GEFUNDEN WIRD,
*    WIRD IN EINEM FELD DER TTR-TABLE NOTIERT
*
LOCVOLX  LOCATE BLK                     NAECHSTER BLK IM VOLUME-INDEX
         LTR   15,15                    GEFUNDEN ?
         BNZ   USAB8                    ...NEIN, FALSCHE KAT.STRUKTUR
         LA    LOCR,LOCAREA+2           LOCR AUF 1. BLK-ENTRY
TESTILE  DS    0H
         CLI   11(LOCR),0               ETYPE = 0 (D.H. ILE ODER IPE)
         BNE   NXTE                     NEIN, NAECHSTER ENTRY
         CLC   0(8,LOCR),=8X'FF'        'FF' IM NAMENSFELD = ILE
         BNE   TESTIPE
*
*    INDEX LINK ENTRY GEFUNDEN
*
         CLC   8(3,LOCR),=X'000000'     ENDE DES VOLUME-INDEX ?
         BE    CLTTRLI                  JA - ENDE IN TTR-LISTE ANZEIGEN
         MVC   TTR,8(LOCR)              NEIN - MOVE TTR DES NAECHST.BLK
         B     LOCVOLX
TESTIPE  DS    0H
         CLI   11(LOCR),0               INDEX POINTER ?
         BNE   NXTE                     NEIN - UEBERGEHEN
*
*    INDEX POINTER ENTRY GEFUNDEN
*
         C     TTREG,=A(TTREND)         TTR-TABELLE VOLL ?
         BNL   USAB4                    JA - ABEND
         MVC   0(3,TTREG),8(LOCR)       --- MOVE TTR IN TTRTAB. ---
         LA    REG1,8                   MAX ZAHL BYTES DES INDEXNAMES
         LA    REG2,0(LOCR)             ADR DES INDEXNAMES
CNTNAME  DS    0H                       --- LAENGE DES INDEXNAMENS
         CLI   0(REG2),C' '                 FESTSTELLEN ---
         BE    ENDNAME
         LA    REG2,1(REG2)
         BCT   REG1,CNTNAME
ENDNAME  DS    0H
         LA    REG2,8
         SR    REG2,REG1
         SH    REG2,=H'1'               -1 = MVC-LAENGE (MINIMAL 0)
         BM    USAB12                   NEGATIV - ABEND
         STC   REG2,3(TTREG)            --- MOVE LAENGE D.INDEXNM. ---
         MVC   4(8,TTREG),0(LOCR)       --- MOVE INDEXNAME ---
         LA    TTREG,12(TTREG)
NXTE     DS    0H
         BAL   LINKREG,ADDLE            REGISTER LOCR AUF NAECHST.ENTRY
         B     TESTILE
CLTTRLI  DS    0H
         MVC   0(4,TTREG),=F'-1'        ENDE-KENNZEICHEN IN TTR-TAB
         EJECT
*
*    DIE TTR-TABELLE WIRD SEQUENTIELL DURCHSUCHT. JEDER TTR-ENTRY
*    ZEIGT AUF EINEN INDEX, DER NACH GDG-POINTERN DURCHSUCHT WIRD.
*
         LA    TTREG,TTRTABLE
NEXTTR   DS    0H
         CLC   0(4,TTREG),=F'-1'        ENDE DER TTR-TAB
         BE    ENDCATLG                 = ENDE DES PROGRAMMS
         MVC   TTR,0(TTREG)             TTR-LOCATE FELD BESETZEN
LOCSUBX  LOCATE BLK                     NAECHSTER BLK DES LFD. INDEX
         LTR   15,15                    MUSS VORHANDEN SEIN,
         BNZ   USAB8                    SONST ABEND
         LA    LOCR,LOCAREA+2           LOCR AUF 1. BLK-ENTRY
TSTILE   DS    0H
         CLI   11(LOCR),0               ILE ODER IPE ?
         BNE   TSTGIPE                  ODER GIPE ?
         CLC   0(8,LOCR),=8X'FF'        ILE ENTHAELT X'FF' IM NAMEN
         BNE   NXTEN
         CLC   8(3,LOCR),=X'000000'     KEINE ANSCHLUSS-TTR ?
         BE    NXTTR                    DANN ZUM NAECHSTEN INDEX
         MVC   TTR,8(LOCR)              TTR-FELD FUER NAECHSTEN BLOCK
         B     LOCSUBX                  UND LESEN
TSTGIPE  DS    0H
         CLI   11(LOCR),X'02'           GENERATION INDEX POINTER ?
         BNE   NXTEN                    NEIN - NAECHSTEN ENTRY BETRACHT
*
*    GENERATION INDEX POINTER ENTRY GEFUNDEN
*
*                                   --- AUFBEREITEN LIST-FELDER
         TM    12(LOCR),X'02'           DELETE-OPTION ?
         BZ    TEMPTY
         MVC   EOPT,=C'DELETE'
         B     DELOPT
TEMPTY   TM    12(LOCR),X'01'           EMPTY-OPTION ?
         BZ    MVKEINE
         MVC   EOPT,=C'EMPTY '
         B     DELOPT
MVKEINE  MVC   EOPT,=C'------'          WEDER EMPTY NOCH DELETE
DELOPT   DS    0H
         MVI   12(LOCR),0               OPTION-BYTE LOESCHEN (FUER
*                                       NAECHSTE INSTRUKTION)
         LH    REG1,12(LOCR)            MAXIMUM SIZE DER GDG
         BAL   LINKREG,CONV
         MVC   MAXSIZ,SIZ+1
         LH    REG1,14(LOCR)            CURRENT SIZE DER GDG
         BAL   LINKREG,CONV
         MVC   CURSIZ,SIZ+1
         MVC   MV+1(1),3(TTREG)         MVC-LAENGE BESETZEN
MV       MVC   ENAME(0),4(TTREG)        MOVE INDEX-NAME
         LA    REG1,0
         IC    REG1,3(TTREG)
         LA    REG2,ENAME+1(REG1)
         MVI   0(REG2),C'.'
         MVC   1(8,REG2),0(LOCR)        MOVE GDG-INDEXNAME
         CLC   CURSIZ,=C'  0'
         BNE   ARD1
         MVC   LEER,=3C'*'              INDIKATOR, FALLS GDG-INDEX LEER
         B     ARD2
ARD1     MVC   LEER,=C'   '
ARD2     DS    0H
         DISPLAY 30,ENAME,EOPT,5,MAXSIZ,5,CURSIZ,6,LEER
NXTEN    DS    0H
         BAL   LINKREG,ADDLE            POINT AUF NAECHSTEN ENTRY
         B     TSTILE                   ENTRY-TYPE PRUEFEN
NXTTR    DS    0H
         LA    TTREG,12(TTREG)          TTR-TAB AUF NAECHSTEN INDEX
         B     NEXTTR
         EJECT
*
*    KATALOG VOLLSTAENDIG GELESEN  -  UTILITY ENDE
*
ENDCATLG DS    0H
         DISPLAY ' '
         DISPLAY 30,'UTILITY ENDE'
         CLOSE WMDIDCB
         L     13,SAVEAREA+4
         RETURN (14,12),RC=0
         EJECT
*
*    ABNORMALES ENDE WEGEN FEHLERN
*
USAB4    DS    0H
         DISPLAY 30,'TABELLE FUER VOLUME-INDICES ZU KLEIN'
         ABEND 4,DUMP
USAB8    DS    0H
         DISPLAY 30,'FEHLER IN DER KATALOG-STRUKTUR, LOCATE-RC',(15)
         ABEND 8,DUMP
USAB12   DS    0H
         DISPLAY 30,'INTERNER FEHLER'
         ABEND 12,DUMP
         EJECT
*
*    B A L  - ROUTINEN
*
ADDLE    DS    0H                       --- POINT AUF NAECHST.BLKENTRY
         LA    REG1,0                   REG1 = 0
         IC    REG1,11(LOCR)            INSERT ANZAHL HALBWORTE
         SLL   REG1,1                   * 2 = ANZAHL BYTES
         LA    LOCR,12(REG1,LOCR)       LOCR AUF NAECHSTEN ENTRY
         C     LOCR,=A(LOCAREA+265)     STEHT LOCR AUSSERHALB D.LOCAREA
         BNL   USAB12                   ...JA = KATALOGSTRUKTUR FALSCH
         BR    LINKREG
         SPACE 3
CONV     DS    0H                       --- CONVERT & EDIT BIN-DEC. ---
         CVD   REG1,DW                  BIN IM REGISTER REG1
         MVC   SIZ+1(3),=X'202120'
         ED    SIZ,DW+6                 DEC IM FELD SIZ
         BR    LINKREG
         EJECT
*
*    F E L D - D E F I N I T I O N E N
*
CTLSAVE  DC    F'0'                     SAVE REG 1
CVOLUME  DC    CL6'SYSRES'              CONTROL VOLUME FUER CAT-OPERAT.
TTR      DC    XL3'1'                   TTR FUER READ-BLOCK
DW       DC    D'0'
         DS    0D
LOCAREA  DC    265C'X'                  CATALOG-BLOCK EINGABEBEREICH
BLK      CAMLST BLOCK,TTR,CVOLUME,LOCAREA
TTRTABLE DS    0F
         DC    60XL12'FF'
TTREND   EQU   *
         DS    CL4                      FILLER FUER ENDE-KENNZEICHEN
ENAME    DC    CL17' '                  .
EOPT     DC    CL6' '                   .
MAXSIZ   DC    CL3' '                   .    LIST-FELDER
CURSIZ   DC    CL3' '                   .
SIZ      DC    CL4' '                   .
LEER     DC    CL3' '                   .
         LTORG
         EJECT
         DISPLAY MF=L,BLKSIZE=121
         END
MEMBER NAME  DISPLAY
         MACRO
         DISPLAY &F1,&F2,&F3,&F4,&F5,&F6,&F7,&F8,&F9,&F10,&F11,&F12,   X
               &F13,&F14,&F15,&F16,                                    X
               &TYPFLDS=CSECT,                                         X
               &ASA=1,                                                 X
               &DDNAME=SYSOUT,                                         X
               &BLKSIZE=1210,                                          X
               &BUFNO=2,                                               X
               &MF=E
         GBLB  &LISTFRM,&HEXA,&UNPK,&DUAL,&REGIS
         LCLA  &BYTECT,&IDEN,&IND,&LEN(32),&INDA,&INDP(32),&DISP
         LCLB  &TYPX,&INIT
         LCLB  &DS,&KON(32)
         LCLC  &ASAZ,&FELD,&L,&BL
         LCLC  &TYP(32)
.*
&L       SETC  'L'''
.*
         AIF   ('&MF' EQ 'E').EXEC
         AIF   ('&MF' EQ 'L').LIST
         MNOTE *,'UNGUELTIGE MAKROFORM'
         MEXIT
.EXEC    ANOP
         AIF   (N'&SYSLIST GT 0).NSGT0
         MNOTE *,'W A S  SOLL ICH DISPLAYEN ???'
         MEXIT
.NSGT0   ANOP
         AIF   (N'&SYSLIST LE 16).NSLE16
         MNOTE *,'MAXIMAL 16 FELDER MOEGLICH'
         MEXIT
.NSLE16  ANOP
         AIF   ('&TYPFLDS' EQ 'CSECT').TECS
         AIF   ('&TYPFLDS' EQ 'DSECT').TEDS
         MNOTE *,'FELDTYP UNGUELTIG'
         MEXIT
.TEDS    ANOP
&DS      SETB  1
.TECS    ANOP
         AIF   ('&ASA' EQ '1').ASA1
         AIF   ('&ASA' EQ '2').ASA2
         AIF   ('&ASA' EQ '3').ASA3
         AIF   ('&ASA' EQ '0').ASA0
         AIF   ('&ASA' EQ 'NS').ASANS
 MNOTE *,'GUELTIGE ASA-SYMBOLE SIND 0,1,2,3,NS; DEFAULT = 1'
         MEXIT
.ASA0    ANOP
&ASAZ    SETC  '+'
         AGO   .COMP
.ASA1    ANOP
&ASAZ    SETC  ' '
         AGO   .COMP
.ASA2    ANOP
&ASAZ    SETC  '0'
         AGO   .COMP
.ASA3    ANOP
&ASAZ    SETC  '-'
         AGO   .COMP
.ASANS   ANOP
&ASAZ    SETC  '1'
.*
.*   AUFBAU VON SYMBOLTABELLEN AUS DEN POSITIONSOPERANDEN
.*
.COMP    ANOP
&IND     SETA  &IND+1
         AIF   (&IND GT N'&SYSLIST).CHKANZ
         AIF   (T'&SYSLIST(&IND) EQ 'O').NOBLANK
         AIF   ('&SYSLIST(&IND)'(1,1) EQ '''' AND                      X
               '&SYSLIST(&IND)'(K'&SYSLIST(&IND),1) EQ '''').KONST
         AIF   ('&SYSLIST(&IND)'(1,1) EQ '(' AND                       X
               '&SYSLIST(&IND)'(K'&SYSLIST(&IND),1) EQ ')').REG
         AIF   ('&SYSLIST(&IND)' EQ '0').NOBLANK
         AIF   (T'&SYSLIST(&IND) EQ 'N').BLANK
         AIF   (K'&SYSLIST(&IND) LT 7).FELD
         AIF   ('&SYSLIST(&IND)'(K'&SYSLIST(&IND)-5,6) EQ '(HEXA)').HEX
         AIF   ('&SYSLIST(&IND)'(K'&SYSLIST(&IND)-5,6) EQ '(UNPK)').UNP
         AIF   ('&SYSLIST(&IND)'(K'&SYSLIST(&IND)-5,6) EQ '(DECI)').DUS
.*
.FELD    ANOP
&IDEN    SETA  1
         AGO   .BLINIT
.FELD1   ANOP
&TYPX    SETB  0
&INDA    SETA  &INDA+1
&TYP(&INDA) SETC 'C'
&LEN(&INDA) SETA L'&SYSLIST(&IND)
&INDP(&INDA) SETA &IND
&BYTECT  SETA  &BYTECT+L'&SYSLIST(&IND)
         AGO   .COMP
.KONST   ANOP
&IDEN    SETA  2
         AGO   .BLINIT
.KONST1 ANOP
&TYPX    SETB  0
&INDA    SETA  &INDA+1
&TYP(&INDA) SETC 'C'
&KON(&INDA) SETB 1
&LEN(&INDA) SETA K'&SYSLIST(&IND)-2
&INDP(&INDA) SETA &IND
&BYTECT  SETA  &BYTECT+&LEN(&INDA)
         AGO   .COMP
.REG     ANOP
&IDEN    SETA  3
         AGO   .BLINIT
.REG1    ANOP
&TYPX    SETB  0
&INDA SETA &INDA+1
&TYP(&INDA) SETC 'R'
&REGIS   SETB  1
&INDP(&INDA) SETA &IND
&BYTECT SETA &BYTECT+8
         AGO   .COMP
.HEX     ANOP
&IDEN    SETA  4
         AGO   .BLINIT
.HEX1    ANOP
&TYPX    SETB  0
&INDA    SETA  &INDA+1
&TYP(&INDA) SETC 'H'
&INDP(&INDA) SETA &IND
&HEXA    SETB  1
         AGO   .COMP
.UNP     ANOP
&IDEN    SETA  5
         AGO   .BLINIT
.UNP1    ANOP
&TYPX    SETB  0
&INDA    SETA  &INDA+1
&TYP(&INDA) SETC 'U'
&INDP(&INDA) SETA &IND
&UNPK    SETB  1
         AGO   .COMP
.DUS     ANOP
&IDEN    SETA  6
         AGO   .BLINIT
.DUA1    ANOP
&TYPX    SETB  0
&INDA    SETA  &INDA+1
&TYP(&INDA) SETC 'D'
&INDP(&INDA) SETA &IND
&BYTECT  SETA  &BYTECT+15
&DUAL    SETB  1
         AGO   .COMP
.NOBLANK ANOP
&TYPX    SETB  1
         AGO   .COMP
.BLANK   ANOP
&TYPX    SETB  1
&INDA    SETA  &INDA+1
&TYP(&INDA) SETC 'B'
&LEN(&INDA) SETA &SYSLIST(&IND)
&BYTECT  SETA  &BYTECT+&SYSLIST(&IND)
         AGO   .COMP
.*
.BLINIT  ANOP
         AIF   (NOT &INIT).BLX1
         AIF   (&TYPX).BLX2
&INDA    SETA  &INDA+1
&TYP(&INDA) SETC 'B'
&LEN(&INDA) SETA 1
&BYTECT  SETA  &BYTECT+1
.BLX1    ANOP
&INIT    SETB  1
.BLX2    ANOP
         AIF   (&IDEN EQ 1).FELD1
         AIF   (&IDEN EQ 2).KONST1
         AIF   (&IDEN EQ 3).REG1
         AIF   (&IDEN EQ 4).HEX1
         AIF   (&IDEN EQ 5).UNP1
         AIF   (&IDEN EQ 6).DUA1
         MNOTE 12,'DISPLAY MAKRO INTERNAL ERROR'
         MEXIT
.CHKANZ  ANOP
         AIF   (&BYTECT LT 121).NOVFL
         MNOTE 8,'DIE AUSGABEFELDER SIND LAENGER ALS 120 BYTES (&BYTECTX
               )'
         MEXIT
.NOVFL   ANOP
         AIF   (NOT &DS).CNOP
.*
.*   GENERIERUNG DES DSECT-ERFORDERLICHEN CODES
.*
&IND     SETA  0
.DSLOOP  ANOP
&IND     SETA  &IND+1
         AIF   (&IND GT &INDA).CNOP
         AIF   (('&TYP(&IND)' EQ 'C') AND (NOT &KON(&IND))).GENDS1
         AIF  (('&TYP(&IND)' EQ 'H') OR                                X
               ('&TYP(&IND)' EQ 'U') OR                                X
               ('&TYP(&IND)' EQ 'D')).GENDS2
         AGO   .DSLOOP
.*
.GENDS1  ANOP
&IDEN    SETA  &INDP(&IND)
&FELD    SETC  '&SYSLIST(&IDEN)'
         AGO   .GENDS
.GENDS2  ANOP
&IDEN    SETA  &INDP(&IND)
&FELD    SETC  '&SYSLIST(&IDEN)'(1,K'&SYSLIST(&IDEN)-6)
.GENDS   ANOP
&IDEN    SETA  &IND*4-4
         LA    1,&FELD
         ST    1,WMA&SYSNDX+&IDEN
         MVI   WMA&SYSNDX+&IDEN,&L&FELD
         AGO   .DSLOOP
.*
.*   GENERIERUNG DER ADRESSLEISTE FUER DIE DRUCKROUTINE
.*
.CNOP    ANOP
         CNOP  2,4
         BAL   1,WME&SYSNDX
         DC    C'&ASAZ'
         DC    AL1(&INDA)
WMA&SYSNDX  EQU   *
&IND     SETA  0
.ALOOP   ANOP
&IND     SETA  &IND+1
         AIF   (&IND GT &INDA).DEFTYP
&IDEN    SETA  &INDP(&IND)
         AIF   ('&TYP(&IND)' EQ 'B').BGEN
         AIF   ('&TYP(&IND)' EQ 'R').RGEN
         AIF   ('&TYP(&IND)' EQ 'C').CGEN
&FELD    SETC  '&SYSLIST(&IDEN)'(1,K'&SYSLIST(&IDEN)-6)
         AGO   .CGEN1
.CGEN    ANOP
         AIF   (&KON(&IND)).KGEN
         AIF   (&DS).DSGEN
&FELD    SETC  '&SYSLIST(&IDEN)'
.CGEN1   ANOP
         DC    AL1(&L&FELD),AL3(&FELD)
         AGO   .ALOOP
.DSGEN   ANOP
         DC    A(0)
         AGO   .ALOOP
.KGEN    ANOP
         DC    AL1(&LEN(&IND)),AL3(WMA&SYSNDX+&INDA*5+&DISP)
&DISP    SETA  &DISP+&LEN(&IND)
         AGO   .ALOOP
.BGEN    ANOP
         DC    AL1(&LEN(&IND)),AL3(*)
         AGO   .ALOOP
.RGEN    ANOP
         DC    AL1(0),AL3(&SYSLIST(&IDEN))
         AGO   .ALOOP
.*
.*   GENERIERUNG DER TYP-LEISTE
.DEFTYP  ANOP
         DC    CL&INDA'&TYP(1)&TYP(2)&TYP(3)&TYP(4)&TYP(5)&TYP(6)&TYP(7X
               )&TYP(8)&TYP(9)&TYP(10)&TYP(11)&TYP(12)&TYP(13)&TYP(14)&X
               TYP(15)&TYP(16)'
         AIF   (&INDA LT 17).BYP2
         ORG   *-&INDA+16
&BYTECT  SETA  &INDA-16
         DC    CL&BYTECT'&TYP(17)&TYP(18)&TYP(19)&TYP(20)&TYP(21)&TYP(2X
               2)&TYP(23)&TYP(24)&TYP(25)&TYP(26)&TYP(27)&TYP(28)&TYP(2?
               9)&TYP(30)&TYP(31)&TYP(32)'
.BYP2    ANOP
.*
.*   GENERIERUNG VON KONSTANTENDEFINITIONEN
.*
&IND     SETA  0
.LKON    ANOP
&IND     SETA  &IND+1
         AIF   (&IND GT &INDA).GENOUT
         AIF   (NOT &KON(&IND)).LKON
&IDEN    SETA  &INDP(&IND)
         DC    C&SYSLIST(&IDEN)
         AGO   .LKON
.GENOUT  ANOP
WME&SYSNDX  DS    0H
         BAL   14,WMDIEXEC
         MEXIT
.LIST    ANOP
         AIF   (NOT &LISTFRM).NDO
         MEXIT
.NDO     ANOP
&LISTFRM SETB  1
WMDIEXEC DS    0H
         STM   0,15,WMDISAVE .          SICHERN REG 0-15
         BALR  10,0 .                   BASISREG LADEN
         USING *,10 .               --- REG 10 = BASISREGISTER
         LA    5,0 .                    REG 5 = 0
         IC    5,1(1) .             --- ANZAHL ADR-ENTRIES IN REG 5
         LTR   5,5 .                    = 0 ?
         BZ    WMDIEXIT .               WENN JA, KEINE AKTION
         LA    3,2(1) .             --- REG 3 = ADR DER 1. ADKON
         LR    9,5 .                    REG 9 = ANZAHL ADR-ENTRIES
         SLL   9,2 .                    * 4 = DISPLACEMENT ZU DEN TYP-E
         LA    4,0(9,3) .           --- REG 4 = ADR DES 1. TYP-BYTES
         MVC   WMDIOUT(1),0(1) .        ASA-ZEICHEN IN AUSGABEBEREICH
         LA    6,WMDIOUT+1 .        --- REG 6 = ADR IM AUSGABEBEREICH
         TM    WMDIDCB+X'30',X'10' .    OUTPUT-DCB 'OPEN' ?
         BO    WMDILOOP .               JA - BRANCH
         OPEN  (WMDIDCB,(OUTPUT)) .     SONST OPEN
         TM    WMDIDCB+X'30',X'10' .    OPEN ERFOLGREICH ?
         BO    WMDILOOP .               JA - BRANCH
         ABEND 4,DUMP .                 SONST USER-ABEND
WMDILOOP DS    0H
         L     7,0(3) .             --- LFD ADKON IN REG 7
         ST    7,WMDIWRK1 .             LAENGENFELD SPEICHERN
         LA    7,0(7) .                 BITS 0-7 LOESCHEN
         CLI   WMDIWRK1,120 .           FELDLAENGE GROESSER ALS 120 ?
         BH    WMDIEXIT
         CLI   0(4),C'C' .              TYP = FELD ODER KONSTANTE
         BE    WMDIMOVE
         CLI   0(4),C'B' .              TYP = BLANK
         BE    WMDIBLNK
         AIF   (NOT &HEXA).NHEXA
         CLI   0(4),C'H' .              TYP = HEXA
         BE    WMDIHEXA
.NHEXA   ANOP
         AIF   (NOT &UNPK).NUNPK
         CLI   0(4),C'U' .              TYP = UNPACK
         BE    WMDIUNPK
.NUNPK   ANOP
         AIF   (NOT &REGIS).NREGIS
         CLI   0(4),C'R' .              TYP = REGISTER
         BE    WMDIREGC
.NREGIS  ANOP
         AIF   (NOT &DUAL).NDUAL
         CLI   0(4),C'D' .              TYP = DECIMAL CONVERSION
         BE    WMDIDUAL
.NDUAL   ANOP
         WTO   'DISPLAY-MAKRO FALSCH PARAMETRISIERT',ROUTCDE=11
         B     WMDIEXIT
WMDIINCR DS    0H
         C     6,=A(WMDIOUT+120) .      ENDE DES AUSGABEBEREICHS ?
         BH    WMDIPUT .                ...AUSGEBEN
         LA    4,1(4) .                 NAECHSTES TYP-FELD
         LA    3,4(3) .                 NAECHSTE ADKON
         BCT   5,WMDILOOP .             ANZ.ENTRIES -1,BRANCH WENN > 0
WMDIPUT  PUT   WMDIDCB,WMDIOUT .        AUSGABE
         MVI   WMDIOUT+1,C' ' .         LOESCHEN
         MVC   WMDIOUT+2(120),WMDIOUT+1 AUSGABEBEREICH
WMDIEXIT DS    0H
         LM    0,15,WMDISAVE .          ZURUECKLADEN DER REGISTER
         BR    14 .                     BRANCH REGISTER 14
 EJECT
WMDIMOVE DS    0H .                 --- FELD-MOVE ---
         LA    8,0 .                    REG 8 = 0
         IC    8,WMDIWRK1 .             INSERT FELDLAENGE
         BCTR  8,0 .                    MINUS 1 FUER MOVE
         STC   8,*+5 .                  STORE FELDLAENGE IN MVC-INSTR.
         MVC   0(0,6),0(7) .            MOVE IN AUSGABEBEREICH
         LA    6,1(8,6) .               REG 6 AUF NEUE AUSGABE-BER.ADR
         B     WMDIINCR
WMDIBLNK DS    0H .                 --- BLANK MOVE ---
         LA    8,0 .                    REG 8 = 0
         IC    8,WMDIWRK1 .             INSERT ANZAHL BLANKS
         LA    6,0(8,6) .               REG 6 AUF NEUE AUSGABE-BER.ADR
         B     WMDIINCR .
         AIF   (NOT &HEXA).NHX
WMDIHEXA DS    0H .                 --- HEXA CONVERSION ---
         LA    8,0 .                    REG 8 LOESCHEN
         IC    8,WMDIWRK1 .             LAENGE DES ZU KONVERT. FELDES
         CH    8,=H'7' .                KLEINER 7 ?
         BL    WMDIXLT7 .               ...BRANCH
WMDIUNPM DS    0H .
         UNPK  0(15,6),0(8,7) .         7 BYTES + 1 DMY-BYTE ENTPACKEN
         LA    6,14(6) .                AUSGABE-ADR + 14
         LA    7,7(7) ,                 SENDEFELD-ADR + 7
         SH    8,=H'7' .                LAENGE DES SENDEFELDES - 7
         BZ    WMDIMVIB .               0 ? - BRANCH
         CH    8,=H'7' .                GROESSER 7 ?
         BH    WMDIUNPM .               ...BRANCH
WMDIXLT7 DS    0H
         LR    9,8 .                    RESTLICHE SENDEFELDLAENGE IN R9
         SLL   9,1 .                    * 2 = L1-FELD FUER UNPK
         SLL   9,4 .                    SHIFT UM 4 BITPOSITIONEN LINKS
         OR    9,8 .                    L2-FELD FUER UNPK BESETZEN
         STC   9,*+5 .                  STORE L1 UND L2
         UNPK  0(0,6),0(0,7) .          RESTLICHE BYTES + 1 DMY-BYTE
         SLL   8,1 .                    RESTL.SENDEFELDLAENGE * 2
         AR    6,8 .                    + REG 6 = NAECHSTE ADR IM AUSG.
WMDIMVIB DS    0H
         MVI   0(6),C' ' .              1 BLANK ZUM LOESCHEN DES DMY-B.
         LA    8,0 .                    REG 8 = 0
         IC    8,WMDIWRK1 .             INSERT SENDEFELDLAENGE
         SLL   8,1 .                    * 2
         SR    6,8 .                    REG6 = ANFANGSADR EMPF.FELD
         BCTR  8,0
         STC   8,*+5 .                  TRANSLATE-LAENGE BESETZEN
         TR    0(0,6),WMDITAB-240 .     UEBERSETZEN AUSGABEBEREICH
         LA    8,1(8) .                 INHALT
         AR    6,8 .                    REG 6 WIEDERHERSTELLEN
         B     WMDIINCR
.NHX     ANOP
         AIF   (NOT &REGIS).NRG
WMDIREGC DS    0H .                 --- REGISTER CONVERSION ---
         SLL   7,2 .                    REG.NR * 4 = DISPL.IN DER SAVEA
         L     8,WMDISAVE(7) .          LOAD BETREFFENDES REGISTER
         ST    8,WMDIWRK1 .             STORE IN ARBEITSFELD
         UNPK  0(9,6),WMDIWRK1(5) .     UNPK + 1 DUMMY-BYTE
         MVI   8(6),C' ' .              LOESCHEN DUMMY-BYTE
         TR    0(8,6),WMDITAB-240 .     UEBERSETZEN REGISTERINHALT
         LA    6,8(6) .                 REG 6 AUF NAECHSTES AUSGABEFELD
         B     WMDIINCR
.NRG     ANOP
         AIF   (NOT &UNPK).NNPK
WMDIUNPK DS    0H .                 --- ENTPACKEN ZAEHLERFELDER ---
         CLI   WMDIWRK1,X'08' .         UNPK-LAENGE GROESSER 8 ?
         BH    WMDIINCR .               ...KEINE AKTION
         LA    8,0 .                    REG 8 LOESCHEN
         IC    8,WMDIWRK1 .             INSERT LAENGE
         BCTR  8,0 .                    - 1
         STC   8,*+7 .                  DISPLACEMENT BESETZEN
         OI    0(7),X'0F' .             VORZEICHEN 'F' SETZEN
         LA    9,1(8) .                 LAENGE IN REG 9
         SLL   9,1 .                    * 2
         SH    9,=H'2' .                - 2 = LAENGE AUSGABEFELD
         SLL   9,4 .                    REG 9 UM 1 HALBBYTE NACH LINKS
         OR    9,8 .                    L2-FELD IN REG 9 BESETZEN
         STC   9,*+5 .                  L1+L2 BESETZEN
         UNPK  0(0,6),0(0,7) .          FELD ENTPACKEN
         SRL   9,4 .                    REG 9 = AUSGABEFELDLAENGE - 1
         LA    6,1(9,6) .               REG 6 AUF NAECHSTES AUSGABEFELD
         B     WMDIINCR
.NNPK    ANOP
         AIF   (NOT &DUAL).NDL
WMDIDUAL DS    0H .                 --- CONVERSIO DECIMAL ---
         CLI   WMDIWRK1,X'04' .         FELDLAENGE GROESSER 4 ?
         BH    WMDIINCR .               JA - KEINE AKTION
         XC    WMDIWRK2,WMDIWRK2 .      LOESCHEN ARBEITSFELD
         LA    8,0 .                    REG 8 = 0
         IC    8,WMDIWRK1 .             REG 8 = FELDLAENGE
         LA    9,4 .                    REG 9 = 4
         SR    9,8 .                    MINUS FELDLAENGE
         STC   9,WMDIDPL1 .             = DISPLACEMT.FUER RECHTSBD.MOVE
         BCTR  8,0 .                    FELDLAENGE - 1
         STC   8,WMDILEN1 .             IN MVC
         LA    8,WMDIWRK2 .             ADR ARBEITSFELD IN REG 8
WMDILEN1 EQU   *+1 .
WMDIDPL1 EQU   *+3 .
         MVC   0(0,8),0(7) .            MOVE EINGABEFELD RECHTSBUENDIG
         L     9,WMDIWRK2 .             FELDINHALT IN REGISTER,
         CVD   9,WMDIWRK1 .             INS DEZIMALE KONVERTIEREN
         OI    WMDIWRK2+3,X'0F' .       VORZEICHEN 'F'
         UNPK  0(15,6),WMDIWRK1(8) .    ENTPACKEN
         LA    6,15(6) .                AUSGABEADR + 15
         B     WMDIINCR
.NDL     ANOP
 EJECT
*
*   FELDDEFINITIONEN FUER DAS DISPLAY-MAKRO
*
         DS    0D
         DC    C'WMDIWORK'
WMDIWRK1 DC    F'0'
WMDIWRK2 DC    F'0'
         DC    CL8'WMDIOUT'
WMDIOUT  DC    256C' '
         DC    CL8'WMDISAVE',CL8'REGS0-15'
WMDISAVE DC    16F'0'
         DC    CL8'WMDIDCB'
WMDIDCB  DCB   DSORG=PS,MACRF=PM,DDNAME=&DDNAME,                       X
               RECFM=FBA,LRECL=121,BLKSIZE=&BLKSIZE,BUFNO=&BUFNO
WMDITAB  DC    C'0123456789ABCDEF'
.XBY     ANOP
         LTORG
         DROP  10
         MEND
