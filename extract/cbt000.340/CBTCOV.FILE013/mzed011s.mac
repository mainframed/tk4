         MACRO
&NAME    DATA  &P1,&P2,&P3,&P4,&P5,&P6,&P7,&P8,&DCB=,&DDN=,&CLOSE=
         GBLB  &DAFIRST
         GBLC  &DADCBN,&DAENTRY,&DAUREGS,&DASAVE1
         LCLA  &FNAMLEN,&FNAMPOS,&LEN(16),&C,&REGSTA,&REGEND
         LCLC  &DADDN,&TYP(16),&NC1(16),&NC2(16)
         AIF   (&DAFIRST).NFIRST        IF FIRST MACRO-CALL
&DAFIRST SETB  1                        YES - SET SWITCH
         AIF   (T'&DCB EQ 'O').GENDCB   IF DCB-NAME OMITTED
&DADCBN  SETC  '&DCB'                   NO - PICK UP DCB-NAME
         AGO   .GOON1
.GENDCB  ANOP
&DADCBN  SETC  'DATADCB'                GENERATE DCB-NAME
.GOON1   AIF   (T'&DDN EQ 'O').GENDDN   IF DD-NAME OMITTED
&DADDN   SETC  '&DDN'                   NO - PICK UP DD-NAME
         AGO   .GOON2
.GENDDN  ANOP
&DADDN   SETC  'UDATA'                  GENERATE DD-NAME
.GOON2   ANOP
.*
.*             GENERATE OPEN FOR PRINTFILE, THE DEFINITIONS AND
.*             THE NECESSARY CODE TO EDIT THE FIELDS
.*
&DASAVE1 SETC  'D2&SYSNDX'              NAME FOR SA FOR REGS. 14 - 1
&DAUREGS SETC  'D4&SYSNDX'              NAME FOR SA FOR REGS. TO EDIT
&DAENTRY SETC  'V2&SYSNDX'              ENTRYPOINT TO EDITING-ROUTINE
.*
.*             OPEN, SKIP NEXT PAGE
.*
&NAME    STM   14,1,&DASAVE1 .          SAVE USERS REGS. 14 - 1
         NOP   V1&SYSNDX .              SWITCH FOR OPEN
         OI    *-3,X'F0' .              SET SWITCH FOR OPEN
         OPEN  (&DADCBN,(OUTPUT)) . .   OPEN PRINT DATASET
         PUT   &DADCBN,DB&SYSNDX .      SKIP TO NEW PAGE
         MVI   DB&SYSNDX,X'09' .        SET CTL.CHR. -SPACE 1 LINE-
         LM    14,1,&DASAVE1 .          RELOAD USERS REGS.
         B     V1&SYSNDX .              BRANCH OVER DEFINITIONS ETC.
.*
.*             WORK- AND SAVE-AREAS
.*
D1&SYSNDX DS   D .                      WORK FOR CVD
D2&SYSNDX DS   4F .                     SA FOR USERS REGS. 14 - 1
D3&SYSNDX DS   4F .                     SA FOR 14-1 DURING I/O
D4&SYSNDX DS   16F .                    SA FOR REGS TO BE EDITED
D5&SYSNDX DC   X'FFFFFFEF' .            FOR WRAP-AROUND
D6&SYSNDX DC   A(DB&SYSNDX+1) .         PTR. TO POS. IN THE LINE
D7&SYSNDX DC   A(DB&SYSNDX+130) .       LAST POS. ON THE LINE
D8&SYSNDX DC   2X'0F' .                 FOR HEX-CONVERSION
         DC    C' ACTUAL DATA-LINE ' .  TO FIND EASILY IN DUMP
DB&SYSNDX DC   X'8B',CL132' ' .         LINE
DC&SYSNDX DC   C'0123456789ABCDEF' .    HEX-TRANSLATION TABLE
         DC    C' PRINT-DCB ' .         TO FIND EASILY IN DUMP
&DADCBN  DCB   DSORG=PS,DDNAME=&DADDN,MACRF=(PM),                      *
               RECFM=FM,BLKSIZE=133,LRECL=133
.*
.*             ROUTINE FOR EDITING THE FIELDS
.*
V2&SYSNDX EQU  *
         TM    6(1),X'80' .             IF PRINT-DS TO BE CLOSE
         BO    VC&SYSNDX .              YES
         L     14,D6&SYSNDX .           LOAD LINE-POINTER
         XR    0,0 .                    CLEAR R0
         IC    0,8(1) .                 INSERT LENGTH OF FIELDNAME -1
         AR    0,14 .                   ADD POINTER TO LENGTH .
         BAL   15,V3&SYSNDX .           TEST FOR ENOUGH SPACE IN LINE
         MVC   V6&SYSNDX+1(1),8(1) .    MOVE LENGTH OF FIELDNAME TO MVC
V6&SYSNDX MVC  0(0,14),9(1) .           MOVE THE FIELDNAME TO LINE
         XR    0,0 .                    CLEAR R0
         IC    0,8(1) .                 INSERT LENGTH OF FIELDNAME -1
         AR    14,0 .                   ADD LENGTH TO POINTER
         MVI   1(14),C'=' .             MOVE '=' TO LINE
         LA    14,2(,14) .              JUMP OVER '=' AND ADD 1
         IC    0,7(1) .                 INSERT LENGTH OF FIELD -1
         TM    6(1),X'04' .             IF REGISTERS TO EDIT
         BO    V7&SYSNDX .              YES
         TM    6(1),X'02' .             IF TO EDIT IN HEX
         BO    V8&SYSNDX .              YES
         B     V9&SYSNDX .              EDIT IN CHARACTERS
VA&SYSNDX EQU  * .                      RETURN
         ST    14,D6&SYSNDX .           SAVE THE LINEPOINTER
VD&SYSNDX EQU  *
         MVC   VB&SYSNDX+2(2),4(1) .    MOVE S-CONSTANT RETURN-ADDRESS
         LM    14,1,&DASAVE1 .          RELOAD USERS REGS 14 - 1
VB&SYSNDX B    * .                      BRANCH BACK
.*
.*             CLOSE PRINT-DATASET
.*
VC&SYSNDX EQU  *
         STM   14,1,D3&SYSNDX .         SAVE OWN REGISTERS
         PUT   &DADCBN,DB&SYSNDX .      PRINT LAST LINE
         CLOSE (&DADCBN) .              CLOSE
         LM    14,1,D3&SYSNDX .         RELOAD OWN REGISTERS
         B     VD&SYSNDX .              GO BACK
.*
.*             EDIT CHARACTER FIELDS
.*
V9&SYSNDX EQU  *
         AR    0,14 .                   ADD LINEPOINTER TO FIELDLENGTH
         BAL   15,V3&SYSNDX .           TEST FOR ENOUGH SPACE IN LINE
         L     15,0(,1) .               LOAD FIELD-ADDRESS
         MVC   *+6+1(1),7(1) .          MOVE LENGTH OF FIELD TO MVC
         MVC   0(0,14),0(15) .          MOVE THE FIELD TO THE LINE
         XR    0,0 .                    CLEAR R0, ADJUST PTR:
         IC    0,7(1) .                 INSERT LENGTH OF FIELD -1
         AR    14,0 .                   AND ADD TO THE LINEPOINTER.
         MVI   1(14),C',' .             MOVE ','
         LA    14,3(,14) .              JUMP OVER ',' AND LEAVE 1 BLANK
         B     VA&SYSNDX .              GO TO RETURN
.*
.*             CONVERT FIELDS TO HEX REPRESENTATION
.*
V8&SYSNDX EQU  *
         SLA   0,1 .                    MULTIPLY (LENGTH-1) BY 2
         AR    0,14 .                   ADD LINEPOINTER TO LENGTH
         BAL   R15,V3&SYSNDX .          TEST FOR ENOUGH SPACE IN LINE
         XR    15,15 .                  CLEAR R15
         IC    15,7(1) .                INSERT LENGTH OF FIELD -1
         LA    15,1(,15) .              ADJUST TO REAL LENGTH IN BYTES
         LR    0,1 .                    SAVE R1
         L     1,0(,1) .                GET ADDRESS OF THE FIELD
         MVC   V5&SYSNDX+2(2),*+6+4 .   MOVE RETURN-ADDRESS
         B     V4&SYSNDX .              GO TO HEX-CONVERSION
         DC    S(*+2) .                 RETURN-ADDRESS S-CONSTANT
         MVI   0(14),C',' .             MOVE ','
         LA    14,2(,14) .              JUMP OVER ',' AND ADD 1
         LR    1,0 .                    RELOAD PARM.LIST POINTER
         B     VA&SYSNDX .              GO TO RETURN
.*
.*             EDIT REGISTER-CONTENTS
.*
V7&SYSNDX EQU  *
         LA    0,13(,14) .              ADD 13 TO LINEPOINTER
         BAL   15,V3&SYSNDX .           TEST FOR ENOUGH SPACE IN LINE
         MVI   0(14),C'R' .             MOVE 'R' TO LINE
         LH    15,0(1) .                LOADSTART-REGISTER
         CVD   15,D1&SYSNDX .           CONVERT TO DECIMAL
         UNPK  1(2,14),D1&SYSNDX+6(2) . MOVE REG.NBR TO LINE
         OI    2(14),X'F0' .            MAKE LAST CHAR. PRINTABLE
         MVI   3(14),C'=' .             MOVE '='
         LA    14,4(,14) .              ADJUST LINEPOINTER
         STH   15,0(1) .                SAVE REGISTER-NUMBER
         SLA   15,2 .                   MULTIPLY REG.NBR BY 4
         LR    0,1 .                    SAVE R1
         LA    1,&DAUREGS.(15) .        LOAD ADDR. OF REG.TABLE (INDXD)
         LA    15,4 .                   LOAD LOOP-COUNTER
         MVC   V5&SYSNDX+2(2),*+6+4 .   MOVE RETURN-ADDRESS
         B     V4&SYSNDX .              GO TO HEX-CONVERSION
         DC    S(*+2) .                 RETURN-ADDRESS S-CONSTANT
         LR    1,0 .                    RELOAD R1
         MVI   0(14),C',' .             MOVE ',' AND
         LA    14,2(,14) .                 LEAVE 1 BLANK
         CLC   0(2,1),2(1) .            TEST IF LAST REGISTER EDITED
         BE    VA&SYSNDX .              YES - GO BACK
         LH    15,0(1) .                LOAD REGISTER-NUMBER
         LA    15,1(,15) .              INCREMENT BY ONE
         N     15,D5&SYSNDX .           MAKE WRAPAROUND IF NECESSARY
*              I.E. TURN OFF BIT 27, WHICH IS 16
         STH   15,0(1) .                SAVE NEXT REGISTER NUMBER
         B     V7&SYSNDX .              HANDLE NEXT REGISTER
.*
.*             TEST FOR ENOUGH SPACE ON THE LINE - PUT IT
.*            WHEN NECESSARY AND REINIT THE LINEPOINTER
.*
V3&SYSNDX EQU  *
         C     0,D7&SYSNDX .            IF STILL ENOUGH SPACE
         BNH   0(15) .                  YES - GO BACK
         STM   14,1,D3&SYSNDX .         SAVE OWN REGS. 14 - 1
         PUT   &DADCBN,DB&SYSNDX .      PUT ONE LINE
         LM    14,1,D3&SYSNDX .         RELOAD OWN REGS
         MVI   DB&SYSNDX+1,C' ' .       CLEAR THE LINE
         MVC   DB&SYSNDX+2(131),DB&SYSNDX+1
         LA    14,DB&SYSNDX+1 .         INITIALIZE LINEPOINTER
         BR    15 .                     GO BACK
.*
.*             CONVERT TO HEXADECIMAL REPRESENTATION
.*
V4&SYSNDX EQU  *
         PACK  0(1,14),0(1,1) .         TURN THE BYTE AND MOVE TO POS.1
         MVC   1(1,14),0(1) .           MOVE THE ORIG. BYTE TO POS. 2
         NC    0(2,14),D8&SYSNDX .      CLEAR THE ZONES TO ZERO
         TR    0(2,14),DC&SYSNDX .      TRANSLAT TO PRINTABLE CHAR.
         LA    14,2(,14) .              INCREMENT GOAL-ADDRESS
         LA    1,1(,1) .                INCREMENT SOURCE-ADDRESS
         BCT   15,V4&SYSNDX .           DECREMENT COUNTER
V5&SYSNDX B    * .                      BRANCH BACK WHEN ZERO
V1&SYSNDX EQU  *
         AIF   (T'&P1 NE 'O').ENDERST   IF FIRST MACRO HAS NO PARAMETER
         AGO   .IFCLOSE
.ENDERST ANOP                           NO - STM WITHOUT MACRO-NAME
         STM   14,1,&DASAVE1 .          SAVE USERS REGS. 14 - 1
         AGO   .TESTP1
.*
.*             END OF FIRST-MACRO-CALL EXPANSION
.*
.*             ---------------------------------
.*
.*             THE MACRO IS WRITTEN IN THE FOLLOWING GENERAL FORM:
.*
.* 1.    DATA  FIELDNAME1,FIELDNAME2,...
.*             = IMPLICIT LENGTH AND TYPE-ATTR. (C, P, H ETC.)
.* 2.    DATA  (FIELDNAME,LENGTH),...
.*             = EXPLICIT LENGTH, TYPE X ASSUMED
.* 3.    DATA  (FIELDNAME,LENGTH,ATTR.),...
.*             = EXPLICIT LENGTH AND TYPE-ATTR.
.* 4.    DATA  REGS                     MUST BE WRITTEN AS SHOWN
.*             = ALL REGISTER (0 - 15)
.* 5.    DATA  (REGS,STARTREG),...
.*             = ONLY GIVEN REGISTER
.* 6.    DATA  (REGS,STARTREG,ENDREG),...
.*             = REGISTERS FROM STARTREG TO ENDREG
.*             (WRAP-AROUND POSSIBLE)
.*       THE FORMS 1. - 6. CAN BE MIXED TO A MAXIMUM OF 16 OPERANDS
.*
.*
.*             THE FOLLOWING PARAMETER-LISTS ARE GENERATED BY THE
.*             -DATAGEN- INNER MACRO DEPENDING ON 'FIELD' OR
.*             REGISTERS TO BE EDITED
.*
.*                            FIELDS                   REGS
.*                            ------                   ----
.*       CNOP  0,4            ALIGN                    ALIGN
.*       BAL   1,&DAENTRY     BRANCH AND PARAMETER-LIST TO R1
.*       DC    A(ADDR)        FIELD-ADDR.              STARTREG (HALFW)
.*                                                     ENDREG (HALFW)
.*       DC    S(ADDR)        RETURN-ADDR.             RETURN-ADDR.
.*       DC    X'NN'          FORM  1)                 FORM  1)
.*       DC    AL1(NN)        LENGTH OF FIELD -1       NOT USED
.*       DC    AL1(NN)        LENGTH FLDNAME -1        LEN FLDN. -1
.*       DC    C'XXXX'        FIELDNAME                CHAR. -REGISTER-
.* NAME  DS    0H             RETURN-POINT             RETURN-POINT
.*
.*  1)   X'01' = EDIT IN CHARACTERS
.*       X'02' = EDIT HEXADECIMAL
.*       X'04' = EDIT REGISTERS
.*       X'80' = CLOSE
.*
.*             THE TYPE-ATTRIBUTES C AND Z GIVE CHARACTER REPRESEN-
.*             TATION, ALL OTHER ATTRIBUTES GIVE HEXADECIMAL REPR.
.*
.NFIRST  ANOP
&NAME    STM   14,1,&DASAVE1 .          STORE USERS REGS 14 - 1
.TESTP1  ANOP
         AIF   (T'&P1 EQ 'O').IFCLOSE   NO PARM1 - TEST FOR CLOSE
&C       SETA  1
         AIF   (N'&P1 GT 1).SUBLI1      IF SUBLIST
         AIF   ('&P1' EQ 'REGS').ALLRG1 IF ALL REGISTERS WANTED
.*
.*             FIELD WITH IMPLICIT DECLARATION
.*
         AIF   (K'&P1 GT 8).NAM1        IF NAME LONGER THAN 8
         AIF   ('&P1'(1,1) NE '(').REGN1   IF REGISTER NOTATION
         MNOTE 0,'REG.NOTAT. WITH IMPL.DECL. NOT ALLOWED-OP.1 OMITTED'
         AGO   .TESTP2
.REGN1   ANOP
&NC1(&C) SETC  '&P1'                    NO - MOVE THE NAME
         AGO   .T1TYP1
.NAM1    ANOP                           YES
&NC1(&C) SETC  '&P1'(1,8)               MOVE CHAR. 1 - 8 OF NAME
&FNAMLEN SETA  K'&P1-8                  CALCULATE THE LENGTH OF
&FNAMPOS SETA  K'&P1-&FNAMLEN-1            REMAINING CHARACTERS
&NC2(&C) SETC  '&P1'(&FNAMPOS,&FNAMLEN) MOVE REMAINING CHARACTERS
.T1TYP1  AIF   (T'&P1 NE 'C' AND T'&P1 NE 'Z').SETX1    TEST TYPE
&TYP(&C) SETC  '1'                      INDICATE CHAR. EDITING
         AGO   .T1LEN1
.SETX1   ANOP
&TYP(&C) SETC  '2'                      INDICATE HEX EDITING
.T1LEN1  ANOP
&LEN(&C) SETA  L'&P1                    MOVE LENGTH OF THE FIELD
         AIF   ('&TYP(&C)' EQ '1').TL1C1  IF TYPE = 'C'/'Z'
         AIF   (L'&P1 LE 57).GENI1      IF LENGTH FOR HEX GT 57
&LEN(&C) SETA  57
         MNOTE 0,'LAENGE &P1 IM OP. 1 GROESSER 57 - MAX GESETZT'
         AGO   .GENI1
.TL1C1   AIF   (L'&P1 LE 114).GENI1     IF IMPLICIT LENGTH GREATER 114
         MNOTE 0,'LAENGE &P1 IM OP. 1 GROESSER 114 - MAX. GESETZT'
&LEN(&C) SETA  114
.GENI1   ANOP
.*
         DATAGEN &NC1(&C),&NC2(&C),&LEN(&C),&TYP(&C)
.*
         AGO   .TESTP2
.*
.*             ALL REGISTERS
.*
.ALLRG1  ANOP
&REGSTA  SETA  0                        SET START-REGISTER
&REGEND  SETA  15                       SET END-REGISTER
.*
         DATAGEN REG,&REGSTA,&REGEND
.*
         AGO   .TESTP2
.*
.*             OPERAND IS A SUBLIST
.*
.SUBLI1  AIF   ('&P1(1)' EQ 'REGS').SUBRG1   IF REGISTER(S) WANTED
.*
.*             FIELD WITH EXPLICIT DECLARATION
.*
         AIF   (K'&P1(1) GT 8).NAMS1    IF NAME LONGER THAN 8
&NC1(&C) SETC  '&P1(1)'                 NO - MOVE THE NAME
         AGO   .T3TYP1
.NAMS1   ANOP
&NC1(&C) SETC  '&P1(1)'(1,8)            YES - MOVE CHAR 1 - 8 OF NAME
&FNAMLEN SETA  K'&P1(1)-8               CLACULATE LENGTH OF
&FNAMPOS SETA  K'&P1(1)-&FNAMLEN+1         REMAINING CHARACTERS
&NC2(&C) SETC  '&P1(1)'(&FNAMPOS,&FNAMLEN) MOVE REMAIN. CHARACTERS
.T3TYP1  AIF   (T'&P1(3) NE 'O').T2TYP1 IF TYPE INDICATED
         MNOTE 0,'TYPE-ATTR. IN OP. 1 NICHT VORH. - X GESETZT'
&TYP(&C) SETC  '2'                      INDICAT HEX-EDITING
         AGO   .LENN1
.T2TYP1  AIF   ('&P1(3)' NE 'C' AND '&P1(3)' NE 'Z').SETXS1  TEST TYPE
&TYP(&C) SETC  '1'                      INDICATE CHAR. EDITING
         AGO   .LENN1
.SETXS1  ANOP
&TYP(&C) SETC  '2'                      INDICATE HEX EDITING
.LENN1   AIF   (T'&P1(2) EQ 'N').LNUMS1 IF LENGTH NUMERIC
         MNOTE 0,'LAENGE &P1(2) IM OP. 1 NICHT NUM. - 1 GESETZT'
&LEN(&C) SETA  1                        SET LENGTH TO 1
         AGO   .LOKS1
.LNUMS1  ANOP
&LEN(&C) SETA  &P1(2)                   PICK UP GIVEN LENGTH
         AIF   ('&TYP(&C)' EQ '1').TL2C1  IF TYPE = 'C'/'Z'
         AIF   (&LEN(&C) LE 57).LOKS1   IF LENGTH FOR HEX GT 57
&LEN(&C) SETA  57
         MNOTE 0,'LAENGE &P1(2) IM OP. 1 GROESSER 57 - MAX. GESETZT'
         AGO   .LOKS1
.TL2C1   AIF   (&LEN(&C) LE 114).LOKS1  IF LENGTH GREATER 114
&LEN(&C) SETA  114
         MNOTE 0,'LAENGE &P1(2) IM OP. 1 GROESSER 114 - MAX. GESETZT'
.LOKS1   ANOP
.*
         DATAGEN &NC1(&C),&NC2(&C),&LEN(&C),&TYP(&C)
.*
         AGO   .TESTP2
.*
.*             REGISTERS WITH START AND EV. END
.*
.SUBRG1  AIF   (T'&P1(2) EQ 'N').RN1S1  IF START-REGISTER NUMERIC
&REGSTA  SETA  2
         MNOTE 0,'START REG &P1(2) IN OP. 1 NICHT NUM. - 2 GESETZT'
         AGO   .ENDR1
.RN1S1   ANOP
&REGSTA  SETA  &P1(2)                   SET START-REGISTER
.ENDR1   AIF   (T'&P1(3) NE 'O').RN2S1  IF END REGISTER OMITTED
&REGEND  SETA  &REGSTA                  YES - SET START = END
         AGO   .GENE1
.RN2S1   AIF   (T'&P1(3) EQ 'N').RN3S1  IF END REGISTER NUMERIC
&REGEND  SETA  12
         MNOTE 0,'END-REG &P1(3) IN OP. 1 NICHT NUM. - 12 GESETZT'
         AGO   .GENE1
.RN3S1   ANOP
&REGEND  SETA  &P1(3)                   SET END-REGISTER
.GENE1   ANOP
.*
         DATAGEN REG,&REGSTA,&REGEND
.*
.TESTP2  ANOP
         AIF   (T'&P2 EQ 'O').IFCLOSE   NO PARM2 - TEST FOR CLOSE
&C       SETA  2
         AIF   (N'&P2 GT 1).SUBLI2
         AIF   ('&P2' EQ 'REGS').ALLRG2 IF ALL REGISTERS WANTED
         AIF   (K'&P2 GT 8).NAM2        IF NAME LONGER THAN 8
         AIF   ('&P2'(1,1) NE '(').REGN2   IF REGISTER NOTATION
         MNOTE 0,'REG.NOTAT. WITH IMPL.DECL. NOT ALLOWED-OP.2 OMITTED'
         AGO   .TESTP3
.REGN2   ANOP
&NC1(&C) SETC  '&P2'                    NO - MOVE THE NAME
         AGO   .T1TYP2
.NAM2    ANOP                           YES
&NC1(&C) SETC  '&P2'(1,8)               MOVE CHAR. 1 - 8 OF NAME
&FNAMLEN SETA  K'&P2-8                  CLACULATE THE LENGTH OF
&FNAMPOS SETA  K'&P2-&FNAMLEN-1            REMAINING CHARACTERS
&NC2(&C) SETC  '&P2'(&FNAMPOS,&FNAMLEN) MOVE REMAINING CHARACTERS
.T1TYP2  AIF   (T'&P2 NE 'C' AND T'&P2 NE 'Z').SETX2    TEST TYPE
&TYP(&C) SETC  '1'                      INDICATE CHAR. EDITING
         AGO   .T1LEN2
.SETX2   ANOP
&TYP(&C) SETC  '2'                      INDICATE HEX EDITING
.T1LEN2  ANOP
&LEN(&C) SETA  L'&P2                    MOVE LENGTH OF THE FIELD
         AIF   ('&TYP(&C)' EQ '1').TL1C2  IF TYPE = 'C'/'Z'
         AIF   (L'&P2 LE 57).GENI2      IF LENGTH FOR HEX GT 57
&LEN(&C) SETA  57
         MNOTE 0,'LAENGE &P2 IM OP. 2 GROESSER 57 - MAX GESETZT'
         AGO   .GENI2
.TL1C2   AIF   (L'&P2 LE 114).GENI2     IF IMPLICIT LENGTH GREATER 114
         MNOTE 0,'LAENGE &P2 IM OP. 2 GROESSER 114 - MAX. GESETZT'
&LEN(&C) SETA  114
.GENI2   ANOP
         DATAGEN &NC1(&C),&NC2(&C),&LEN(&C),&TYP(&C)
         AGO   .TESTP3
.ALLRG2  ANOP
&REGSTA  SETA  0                        SET START-REGISTER
&REGEND  SETA  15                       SET END-REGISTER
         DATAGEN REG,&REGSTA,&REGEND
         AGO   .TESTP3
.SUBLI2  AIF   ('&P2(1)' EQ 'REGS').SUBRG2   IF REGISTER(S) WANTED
         AIF   (K'&P2(1) GT 8).NAMS2    IF NAME LONGER THAN 8
&NC1(&C) SETC  '&P2(1)'
         AGO   .T3TYP2
.NAMS2   ANOP
&NC1(&C) SETC  '&P2(1)'(1,8)            YES - MOVE CHAR 1 - 8 OF NAME
&FNAMLEN SETA  K'&P2(1)-8               CLACULATE LENGTH OF
&FNAMPOS SETA  K'&P2(1)-&FNAMLEN+1         REMAINING CHARACTERS
&NC2(&C) SETC  '&P2(1)'(&FNAMPOS,&FNAMLEN) MOVE REMAIN. CHARACTERS
.T3TYP2  AIF   (T'&P2(3) NE 'O').T2TYP2 IF TYPE INDICATED
         MNOTE 0,'TYPE-ATTR. IN OP. 2 NICHT VORH. - X GESETZT'
&TYP(&C) SETC  '2'                      INDICAT HEX-EDITING
         AGO   .LENN2
.T2TYP2  AIF   ('&P2(3)' NE 'C' AND '&P2(3)' NE 'Z').SETXS2  TEST TYPE
&TYP(&C) SETC  '1'                      INDICATE CHAR. EDITING
         AGO   .LENN2
.SETXS2  ANOP
&TYP(&C) SETC  '2'                      INDICATE HEX EDITING
.LENN2   AIF   (T'&P2(2) EQ 'N').LNUMS2 IF LENGTH NUMERIC
         MNOTE 0,'LAENGE &P2(2) IM OP. 2 NICHT NUM. - 1 GESETZT'
&LEN(&C) SETA  1                        SET LENGTH TO 1
         AGO   .LOKS2
.LNUMS2  ANOP
&LEN(&C) SETA  &P2(2)                   PICK UP GIVEN LENGTH
         AIF   ('&TYP(&C)' EQ '1').TL2C2  IF TYPE = 'C'/'Z'
         AIF   (&LEN(&C) LE 57).LOKS2   IF LENGTH FOR HEX GT 57
&LEN(&C) SETA  57
         MNOTE 0,'LAENGE &P2(2) IM OP. 2 GROESSER 57 - MAX. GESETZT'
         AGO   .LOKS2
.TL2C2   AIF   (&LEN(&C) LE 114).LOKS2  IF LENGTH GREATER 114
&LEN(&C) SETA  114
         MNOTE 0,'LAENGE &P2(2) IM OP. 2 GROESSER 114 - MAX. GESETZT'
.LOKS2   ANOP
         DATAGEN &NC1(&C),&NC2(&C),&LEN(&C),&TYP(&C)
         AGO   .TESTP3
.SUBRG2  AIF   (T'&P2(2) EQ 'N').RN1S2  IF START-REGISTER NUMERIC
&REGSTA  SETA  2
         MNOTE 0,'START REG &P2(2) IN OP. 2 NICHT NUM. - 2 GESETZT'
         AGO   .ENDR2
.RN1S2   ANOP
&REGSTA  SETA  &P2(2)                   SET START-REGISTER
.ENDR2   AIF   (T'&P2(3) NE 'O').RN2S2  IF END REGISTER OMITTED
&REGEND  SETA  &REGSTA
         AGO   .GENE2
.RN2S2   AIF   (T'&P2(3) EQ 'N').RN3S2  IF END REGISTER NUMERIC
&REGEND  SETA  12
         MNOTE 0,'END-REG &P2(3) IN OP. 2 NICHT NUM. - 12 GESETZT'
         AGO   .GENE2
.RN3S2   ANOP
&REGEND  SETA  &P2(3)                   SET END-REGISTER
.GENE2   ANOP
         DATAGEN REG,&REGSTA,&REGEND
.TESTP3  ANOP
         AIF   (T'&P3 EQ 'O').IFCLOSE
&C       SETA  3
         AIF   (N'&P3 GT 1).SUBLI3
         AIF   ('&P3' EQ 'REGS').ALLRG3
         AIF   (K'&P3 GT 8).NAM3
         AIF   ('&P3'(1,1) NE '(').REGN3
         MNOTE 0,'REG.NOTAT. WITH IMPL.DECL. NOT ALLOWED-OP.3 OMITTED'
         AGO   .TESTP4
.REGN3   ANOP
&NC1(&C) SETC  '&P3'
         AGO   .T1TYP3
.NAM3    ANOP
&NC1(&C) SETC  '&P3'(1,8)
&FNAMLEN SETA  K'&P3-8
&FNAMPOS SETA  K'&P3-&FNAMLEN-1
&NC2(&C) SETC  '&P3'(&FNAMPOS,&FNAMLEN)
.T1TYP3  AIF   (T'&P3 NE 'C' AND T'&P3 NE 'Z').SETX3
&TYP(&C) SETC  '1'
         AGO   .T1LEN3
.SETX3   ANOP
&TYP(&C) SETC  '2'
.T1LEN3  ANOP
&LEN(&C) SETA  L'&P3
         AIF   ('&TYP(&C)' EQ '1').TL1C3
         AIF   (L'&P3 LE 57).GENI3
&LEN(&C) SETA  57
         MNOTE 0,'LAENGE &P3 IM OP. 3 GROESSER 57 - MAX GESETZT'
         AGO   .GENI3
.TL1C3   AIF   (L'&P3 LE 114).GENI3
         MNOTE 0,'LAENGE &P3 IM OP. 3 GROESSER 114 - MAX. GESETZT'
&LEN(&C) SETA  114
.GENI3   ANOP
         DATAGEN &NC1(&C),&NC2(&C),&LEN(&C),&TYP(&C)
         AGO   .TESTP4
.ALLRG3  ANOP
&REGSTA  SETA  0
&REGEND  SETA  15
         DATAGEN REG,&REGSTA,&REGEND
         AGO   .TESTP4
.SUBLI3  AIF   ('&P3(1)' EQ 'REGS').SUBRG3
         AIF   (K'&P3(1) GT 8).NAMS3
&NC1(&C) SETC  '&P3(1)'
         AGO   .T3TYP3
.NAMS3   ANOP
&NC1(&C) SETC  '&P3(1)'(1,8)
&FNAMLEN SETA  K'&P3(1)-8
&FNAMPOS SETA  K'&P3(1)-&FNAMLEN+1
&NC2(&C) SETC  '&P3(1)'(&FNAMPOS,&FNAMLEN)
.T3TYP3  AIF   (T'&P3(3) NE 'O').T2TYP3
         MNOTE 0,'TYPE-ATTR. IN OP. 3 NICHT VORH. - X GESETZT'
&TYP(&C) SETC  '2'
         AGO   .LENN3
.T2TYP3  AIF   ('&P3(3)' NE 'C' AND '&P3(3)' NE 'Z').SETXS3
&TYP(&C) SETC  '1'
         AGO   .LENN3
.SETXS3  ANOP
&TYP(&C) SETC  '2'
.LENN3   AIF   (T'&P3(2) EQ 'N').LNUMS3
         MNOTE 0,'LAENGE &P3(2) IM OP. 3 NICHT NUM. - 1 GESETZT'
&LEN(&C) SETA  1
         AGO   .LOKS3
.LNUMS3  ANOP
&LEN(&C) SETA  &P3(2)
         AIF   ('&TYP(&C)' EQ '1').TL2C3
         AIF   (&LEN(&C) LE 57).LOKS3
&LEN(&C) SETA  57
         MNOTE 0,'LAENGE &P3(2) IM OP. 3 GROESSER 57 - MAX. GESETZT'
         AGO   .LOKS3
.TL2C3   AIF   (&LEN(&C) LE 114).LOKS3
&LEN(&C) SETA  114
         MNOTE 0,'LAENGE &P3(2) IM OP. 3 GROESSER 114 - MAX. GESETZT'
.LOKS3   ANOP
         DATAGEN &NC1(&C),&NC2(&C),&LEN(&C),&TYP(&C)
         AGO   .TESTP4
.SUBRG3  AIF   (T'&P3(2) EQ 'N').RN1S3
&REGSTA  SETA  2
         MNOTE 0,'START REG &P3(2) IN OP. 3 NICHT NUM. - 2 GESETZT'
         AGO   .ENDR3
.RN1S3   ANOP
&REGSTA  SETA  &P3(2)
.ENDR3   AIF   (T'&P3(3) NE 'O').RN2S3
&REGEND  SETA  &REGSTA
         AGO   .GENE3
.RN2S3   AIF   (T'&P3(3) EQ 'N').RN3S3
&REGEND  SETA  12
         MNOTE 0,'END-REG &P3(3) IN OP. 3 NICHT NUM. - 12 GESETZT'
         AGO   .GENE3
.RN3S3   ANOP
&REGEND  SETA  &P3(3)
.GENE3   ANOP
         DATAGEN REG,&REGSTA,&REGEND
.TESTP4  ANOP
         AIF   (T'&P4 EQ 'O').IFCLOSE
&C       SETA  4
         AIF   (N'&P4 GT 1).SUBLI4
         AIF   ('&P4' EQ 'REGS').ALLRG4
         AIF   (K'&P4 GT 8).NAM4
         AIF   ('&P4'(1,1) NE '(').REGN4
         MNOTE 0,'REG.NOTAT. WITH IMPL.DECL. NOT ALLOWED-OP.4 OMITTED'
         AGO   .TESTP5
.REGN4   ANOP
&NC1(&C) SETC  '&P4'
         AGO   .T1TYP4
.NAM4    ANOP
&NC1(&C) SETC  '&P4'(1,8)
&FNAMLEN SETA  K'&P4-8
&FNAMPOS SETA  K'&P4-&FNAMLEN-1
&NC2(&C) SETC  '&P4'(&FNAMPOS,&FNAMLEN)
.T1TYP4  AIF   (T'&P4 NE 'C' AND T'&P4 NE 'Z').SETX4
&TYP(&C) SETC  '1'
         AGO   .T1LEN4
.SETX4   ANOP
&TYP(&C) SETC  '2'
.T1LEN4  ANOP
&LEN(&C) SETA  L'&P4
         AIF   ('&TYP(&C)' EQ '1').TL1C4
         AIF   (L'&P4 LE 57).GENI4
&LEN(&C) SETA  57
         MNOTE 0,'LAENGE &P4 IM OP. 3 GROESSER 57 - MAX GESETZT'
         AGO   .GENI4
.TL1C4   AIF   (L'&P4 LE 114).GENI4
         MNOTE 0,'LAENGE &P4 IM OP. 4 GROESSER 114 - MAX. GESETZT'
&LEN(&C) SETA  114
.GENI4   ANOP
         DATAGEN &NC1(&C),&NC2(&C),&LEN(&C),&TYP(&C)
         AGO   .TESTP5
.ALLRG4  ANOP
&REGSTA  SETA  0
&REGEND  SETA  15
         DATAGEN REG,&REGSTA,&REGEND
         AGO   .TESTP5
.SUBLI4  AIF   ('&P4(1)' EQ 'REGS').SUBRG4
         AIF   (K'&P4(1) GT 8).NAMS4
&NC1(&C) SETC  '&P4(1)'
         AGO   .T3TYP4
.NAMS4   ANOP
&NC1(&C) SETC  '&P4(1)'(1,8)
&FNAMLEN SETA  K'&P4(1)-8
&FNAMPOS SETA  K'&P4(1)-&FNAMLEN+1
&NC2(&C) SETC  '&P4(1)'(&FNAMPOS,&FNAMLEN)
.T3TYP4  AIF   (T'&P4(3) NE 'O').T2TYP4
         MNOTE 0,'TYPE-ATTR. IN OP. 4 NICHT VORH. - X GESETZT'
&TYP(&C) SETC  '2'
         AGO   .LENN4
.T2TYP4  AIF   ('&P4(3)' NE 'C' AND '&P4(3)' NE 'Z').SETXS4
&TYP(&C) SETC  '1'
         AGO   .LENN4
.SETXS4  ANOP
&TYP(&C) SETC  '2'
.LENN4   AIF   (T'&P4(2) EQ 'N').LNUMS4
         MNOTE 0,'LAENGE &P4(2) IM OP. 4 NICHT NUM. - 1 GESETZT'
&LEN(&C) SETA  1
         AGO   .LOKS4
.LNUMS4  ANOP
&LEN(&C) SETA  &P4(2)
         AIF   ('&TYP(&C)' EQ '1').TL2C4
         AIF   (&LEN(&C) LE 57).LOKS4
&LEN(&C) SETA  57
         MNOTE 0,'LAENGE &P4(2) IM OP. 4 GROESSER 57 - MAX. GESETZT'
         AGO   .LOKS4
.TL2C4   AIF   (&LEN(&C) LE 114).LOKS4
&LEN(&C) SETA  114
         MNOTE 0,'LAENGE &P4(2) IM OP. 4 GROESSER 114 - MAX. GESETZT'
.LOKS4   ANOP
         DATAGEN &NC1(&C),&NC2(&C),&LEN(&C),&TYP(&C)
         AGO   .TESTP5
.SUBRG4  AIF   (T'&P4(2) EQ 'N').RN1S4
&REGSTA  SETA  2
         MNOTE 0,'START REG &P4(2) IN OP. 4 NICHT NUM. - 2 GESETZT'
         AGO   .ENDR4
.RN1S4   ANOP
&REGSTA  SETA  &P4(2)
.ENDR4   AIF   (T'&P4(3) NE 'O').RN2S4
&REGEND  SETA  &REGSTA
         AGO   .GENE4
.RN2S4   AIF   (T'&P4(3) EQ 'N').RN3S4
&REGEND  SETA  12
         MNOTE 0,'END-REG &P4(3) IN OP. 4 NICHT NUM. - 12 GESETZT'
         AGO   .GENE4
.RN3S4   ANOP
&REGEND  SETA  &P4(3)
.GENE4   ANOP
         DATAGEN REG,&REGSTA,&REGEND
.TESTP5  ANOP
         AIF   (T'&P5 EQ 'O').IFCLOSE
&C       SETA  5
         AIF   (N'&P5 GT 1).SUBLI5
         AIF   ('&P5' EQ 'REGS').ALLRG5
         AIF   (K'&P5 GT 8).NAM5
         AIF   ('&P5'(1,1) NE '(').REGN5
         MNOTE 0,'REG.NOTAT. WITH IMPL.DECL. NOT ALLOWED-OP.5 OMITTED'
         AGO   .TESTP6
.REGN5   ANOP
&NC1(&C) SETC  '&P5'
         AGO   .T1TYP5
.NAM5    ANOP
&NC1(&C) SETC  '&P5'(1,8)
&FNAMLEN SETA  K'&P5-8
&FNAMPOS SETA  K'&P5-&FNAMLEN-1
&NC2(&C) SETC  '&P5'(&FNAMPOS,&FNAMLEN)
.T1TYP5  AIF   (T'&P5 NE 'C' AND T'&P5 NE 'Z').SETX5
&TYP(&C) SETC  '1'
         AGO   .T1LEN5
.SETX5   ANOP
&TYP(&C) SETC  '2'
.T1LEN5  ANOP
&LEN(&C) SETA  L'&P5
         AIF   ('&TYP(&C)' EQ '1').TL1C5
         AIF   (L'&P5 LE 57).GENI5
&LEN(&C) SETA  57
         MNOTE 0,'LAENGE &P5 IM OP. 5 GROESSER 57 - MAX GESETZT'
         AGO   .GENI5
.TL1C5   AIF   (L'&P5 LE 114).GENI5
         MNOTE 0,'LAENGE &P5 IM OP. 5 GROESSER 114 - MAX. GESETZT'
&LEN(&C) SETA  114
.GENI5   ANOP
         DATAGEN &NC1(&C),&NC2(&C),&LEN(&C),&TYP(&C)
         AGO   .TESTP6
.ALLRG5  ANOP
&REGSTA  SETA  0
&REGEND  SETA  15
         DATAGEN REG,&REGSTA,&REGEND
         AGO   .TESTP6
.SUBLI5  AIF   ('&P5(1)' EQ 'REGS').SUBRG5
         AIF   (K'&P5(1) GT 8).NAMS5
&NC1(&C) SETC  '&P5(1)'
         AGO   .T3TYP5
.NAMS5   ANOP
&NC1(&C) SETC  '&P5(1)'(1,8)
&FNAMLEN SETA  K'&P5(1)-8
&FNAMPOS SETA  K'&P5(1)-&FNAMLEN+1
&NC2(&C) SETC  '&P5(1)'(&FNAMPOS,&FNAMLEN)
.T3TYP5  AIF   (T'&P5(3) NE 'O').T2TYP5
         MNOTE 0,'TYPE-ATTR. IN OP. 5 NICHT VORH. - X GESETZT'
&TYP(&C) SETC  '2'
         AGO   .LENN5
.T2TYP5  AIF   ('&P5(3)' NE 'C' AND '&P5(3)' NE 'Z').SETXS5
&TYP(&C) SETC  '1'
         AGO   .LENN5
.SETXS5  ANOP
&TYP(&C) SETC  '2'
.LENN5   AIF   (T'&P5(2) EQ 'N').LNUMS5
         MNOTE 0,'LAENGE &P5(2) IM OP. 5 NICHT NUM. - 1 GESETZT'
&LEN(&C) SETA  1
         AGO   .LOKS5
.LNUMS5  ANOP
&LEN(&C) SETA  &P5(2)
         AIF   ('&TYP(&C)' EQ '1').TL2C5
         AIF   (&LEN(&C) LE 57).LOKS5
&LEN(&C) SETA  57
         MNOTE 0,'LAENGE &P5(2) IM OP. 5 GROESSER 57 - MAX. GESETZT'
         AGO   .LOKS5
.TL2C5   AIF   (&LEN(&C) LE 114).LOKS5
&LEN(&C) SETA  114
         MNOTE 0,'LAENGE &P5(2) IM OP. 5 GROESSER 114 - MAX. GESETZT'
.LOKS5   ANOP
         DATAGEN &NC1(&C),&NC2(&C),&LEN(&C),&TYP(&C)
         AGO   .TESTP6
.SUBRG5  AIF   (T'&P5(2) EQ 'N').RN1S5
&REGSTA  SETA  2
         MNOTE 0,'START REG &P5(2) IN OP. 5 NICHT NUM. - 2 GESETZT'
         AGO   .ENDR5
.RN1S5   ANOP
&REGSTA  SETA  &P5(2)
.ENDR5   AIF   (T'&P5(3) NE 'O').RN2S5
&REGEND  SETA  &REGSTA
         AGO   .GENE5
.RN2S5   AIF   (T'&P5(3) EQ 'N').RN3S5
&REGEND  SETA  12
         MNOTE 0,'END-REG &P5(3) IN OP. 5 NICHT NUM. - 12 GESETZT'
         AGO   .GENE5
.RN3S5   ANOP
&REGEND  SETA  &P5(3)
.GENE5   ANOP
         DATAGEN REG,&REGSTA,&REGEND
.TESTP6  ANOP
         AIF   (T'&P6 EQ 'O').IFCLOSE
&C       SETA  6
         AIF   (N'&P6 GT 1).SUBLI6
         AIF   ('&P6' EQ 'REGS').ALLRG6
         AIF   (K'&P6 GT 8).NAM6
         AIF   ('&P6'(1,1) NE '(').REGN6
         MNOTE 0,'REG.NOTAT. WITH IMPL.DECL. NOT ALLOWED-OP.6 OMITTED'
         AGO   .TESTP7
.REGN6   ANOP
&NC1(&C) SETC  '&P6'
         AGO   .T1TYP6
.NAM6    ANOP
&NC1(&C) SETC  '&P6'(1,8)
&FNAMLEN SETA  K'&P6-8
&FNAMPOS SETA  K'&P6-&FNAMLEN-1
&NC2(&C) SETC  '&P6'(&FNAMPOS,&FNAMLEN)
.T1TYP6  AIF   (T'&P6 NE 'C' AND T'&P6 NE 'Z').SETX6
&TYP(&C) SETC  '1'
         AGO   .T1LEN6
.SETX6   ANOP
&TYP(&C) SETC  '2'
.T1LEN6  ANOP
&LEN(&C) SETA  L'&P6
         AIF   ('&TYP(&C)' EQ '1').TL1C6
         AIF   (L'&P6 LE 57).GENI6
&LEN(&C) SETA  57
         MNOTE 0,'LAENGE &P6 IM OP. 6 GROESSER 57 - MAX GESETZT'
         AGO   .GENI6
.TL1C6   AIF   (L'&P6 LE 114).GENI6
         MNOTE 0,'LAENGE &P6 IM OP. 6 GROESSER 114 - MAX. GESETZT'
&LEN(&C) SETA  114
.GENI6   ANOP
         DATAGEN &NC1(&C),&NC2(&C),&LEN(&C),&TYP(&C)
         AGO   .TESTP7
.ALLRG6  ANOP
&REGSTA  SETA  0
&REGEND  SETA  15
         DATAGEN REG,&REGSTA,&REGEND
         AGO   .TESTP7
.SUBLI6  AIF   ('&P6(1)' EQ 'REGS').SUBRG6
         AIF   (K'&P6(1) GT 8).NAMS6
&NC1(&C) SETC  '&P6(1)'
         AGO   .T3TYP6
.NAMS6   ANOP
&NC1(&C) SETC  '&P6(1)'(1,8)
&FNAMLEN SETA  K'&P6(1)-8
&FNAMPOS SETA  K'&P6(1)-&FNAMLEN+1
&NC2(&C) SETC  '&P6(1)'(&FNAMPOS,&FNAMLEN)
.T3TYP6  AIF   (T'&P6(3) NE 'O').T2TYP6
         MNOTE 0,'TYPE-ATTR. IN OP. 6 NICHT VORH. - X GESETZT'
&TYP(&C) SETC  '2'
         AGO   .LENN6
.T2TYP6  AIF   ('&P6(3)' NE 'C' AND '&P6(3)' NE 'Z').SETXS6
&TYP(&C) SETC  '1'
         AGO   .LENN6
.SETXS6  ANOP
&TYP(&C) SETC  '2'
.LENN6   AIF   (T'&P6(2) EQ 'N').LNUMS6
         MNOTE 0,'LAENGE &P6(2) IM OP. 6 NICHT NUM. - 1 GESETZT'
&LEN(&C) SETA  1
         AGO   .LOKS6
.LNUMS6  ANOP
&LEN(&C) SETA  &P6(2)
         AIF   ('&TYP(&C)' EQ '1').TL2C6
         AIF   (&LEN(&C) LE 57).LOKS6
&LEN(&C) SETA  57
         MNOTE 0,'LAENGE &P6(2) IM OP. 6 GROESSER 57 - MAX. GESETZT'
         AGO   .LOKS6
.TL2C6   AIF   (&LEN(&C) LE 114).LOKS6
&LEN(&C) SETA  114
         MNOTE 0,'LAENGE &P6(2) IM OP. 6 GROESSER 114 - MAX. GESETZT'
.LOKS6   ANOP
         DATAGEN &NC1(&C),&NC2(&C),&LEN(&C),&TYP(&C)
         AGO   .TESTP7
.SUBRG6  AIF   (T'&P6(2) EQ 'N').RN1S6
&REGSTA  SETA  2
         MNOTE 0,'START REG &P6(2) IN OP. 6 NICHT NUM. - 2 GESETZT'
         AGO   .ENDR6
.RN1S6   ANOP
&REGSTA  SETA  &P6(2)
.ENDR6   AIF   (T'&P6(3) NE 'O').RN2S6
&REGEND  SETA  &REGSTA
         AGO   .GENE6
.RN2S6   AIF   (T'&P6(3) EQ 'N').RN3S6
&REGEND  SETA  12
         MNOTE 0,'END-REG &P6(3) IN OP. 6 NICHT NUM. - 12 GESETZT'
         AGO   .GENE6
.RN3S6   ANOP
&REGEND  SETA  &P6(3)
.GENE6   ANOP
         DATAGEN REG,&REGSTA,&REGEND
.TESTP7  ANOP
         AIF   (T'&P7 EQ 'O').IFCLOSE
&C       SETA  7
         AIF   (N'&P7 GT 1).SUBLI7
         AIF   ('&P7' EQ 'REGS').ALLRG7
         AIF   (K'&P7 GT 8).NAM7
         AIF   ('&P7'(1,1) NE '(').REGN7
         MNOTE 0,'REG.NOTAT. WITH IMPL.DECL. NOT ALLOWED-OP.7 OMITTED'
         AGO   .TESTP8
.REGN7   ANOP
&NC1(&C) SETC  '&P7'
         AGO   .T1TYP7
.NAM7    ANOP
&NC1(&C) SETC  '&P7'(1,8)
&FNAMLEN SETA  K'&P7-8
&FNAMPOS SETA  K'&P7-&FNAMLEN-1
&NC2(&C) SETC  '&P7'(&FNAMPOS,&FNAMLEN)
.T1TYP7  AIF   (T'&P7 NE 'C' AND T'&P7 NE 'Z').SETX7
&TYP(&C) SETC  '1'
         AGO   .T1LEN7
.SETX7   ANOP
&TYP(&C) SETC  '2'
.T1LEN7  ANOP
&LEN(&C) SETA  L'&P7
         AIF   ('&TYP(&C)' EQ '1').TL1C7
         AIF   (L'&P7 LE 57).GENI7
&LEN(&C) SETA  57
         MNOTE 0,'LAENGE &P7 IM OP. 7 GROESSER 57 - MAX GESETZT'
         AGO   .GENI7
.TL1C7   AIF   (L'&P7 LE 114).GENI7
         MNOTE 0,'LAENGE &P7 IM OP. 7 GROESSER 114 - MAX. GESETZT'
&LEN(&C) SETA  114
.GENI7   ANOP
         DATAGEN &NC1(&C),&NC2(&C),&LEN(&C),&TYP(&C)
         AGO   .TESTP8
.ALLRG7  ANOP
&REGSTA  SETA  0
&REGEND  SETA  15
         DATAGEN REG,&REGSTA,&REGEND
         AGO   .TESTP8
.SUBLI7  AIF   ('&P7(1)' EQ 'REGS').SUBRG7
         AIF   (K'&P7(1) GT 8).NAMS7
&NC1(&C) SETC  '&P7(1)'
         AGO   .T3TYP7
.NAMS7   ANOP
&NC1(&C) SETC  '&P7(1)'(1,8)
&FNAMLEN SETA  K'&P7(1)-8
&FNAMPOS SETA  K'&P7(1)-&FNAMLEN+1
&NC2(&C) SETC  '&P7(1)'(&FNAMPOS,&FNAMLEN)
.T3TYP7  AIF   (T'&P7(3) NE 'O').T2TYP7
         MNOTE 0,'TYPE-ATTR. IN OP. 7 NICHT VORH. - X GESETZT'
&TYP(&C) SETC  '2'
         AGO   .LENN7
.T2TYP7  AIF   ('&P7(3)' NE 'C' AND '&P7(3)' NE 'Z').SETXS7
&TYP(&C) SETC  '1'
         AGO   .LENN7
.SETXS7  ANOP
&TYP(&C) SETC  '2'
.LENN7   AIF   (T'&P7(2) EQ 'N').LNUMS7
         MNOTE 0,'LAENGE &P7(2) IM OP. 7 NICHT NUM. - 1 GESETZT'
&LEN(&C) SETA  1
         AGO   .LOKS7
.LNUMS7  ANOP
&LEN(&C) SETA  &P7(2)
         AIF   ('&TYP(&C)' EQ '1').TL2C7
         AIF   (&LEN(&C) LE 57).LOKS7
&LEN(&C) SETA  57
         MNOTE 0,'LAENGE &P7(2) IM OP. 7 GROESSER 57 - MAX. GESETZT'
         AGO   .LOKS7
.TL2C7   AIF   (&LEN(&C) LE 114).LOKS7
&LEN(&C) SETA  114
         MNOTE 0,'LAENGE &P7(2) IM OP. 7 GROESSER 114 - MAX. GESETZT'
.LOKS7   ANOP
         DATAGEN &NC1(&C),&NC2(&C),&LEN(&C),&TYP(&C)
         AGO   .TESTP8
.SUBRG7  AIF   (T'&P7(2) EQ 'N').RN1S7
&REGSTA  SETA  2
         MNOTE 0,'START REG &P7(2) IN OP. 7 NICHT NUM. - 2 GESETZT'
         AGO   .ENDR7
.RN1S7   ANOP
&REGSTA  SETA  &P7(2)
.ENDR7   AIF   (T'&P7(3) NE 'O').RN2S7
&REGEND  SETA  &REGSTA
         AGO   .GENE7
.RN2S7   AIF   (T'&P7(3) EQ 'N').RN3S7
&REGEND  SETA  12
         MNOTE 0,'END-REG &P7(3) IN OP. 7 NICHT NUM. - 12 GESETZT'
         AGO   .GENE7
.RN3S7   ANOP
&REGEND  SETA  &P7(3)
.GENE7   ANOP
         DATAGEN REG,&REGSTA,&REGEND
.TESTP8  ANOP
         AIF   (T'&P8 EQ 'O').IFCLOSE
&C       SETA  8
         AIF   (N'&P8 GT 1).SUBLI8
         AIF   ('&P8' EQ 'REGS').ALLRG8
         AIF   (K'&P8 GT 8).NAM8
         AIF   ('&P8'(1,1) NE '(').REGN8
         MNOTE 0,'REG.NOTAT. WITH IMPL.DECL. NOT ALLOWED-OP.8 OMITTED'
         AGO   .IFCLOSE
.REGN8   ANOP
&NC1(&C) SETC  '&P8'
         AGO   .T1TYP8
.NAM8    ANOP
&NC1(&C) SETC  '&P8'(1,8)
&FNAMLEN SETA  K'&P8-8
&FNAMPOS SETA  K'&P8-&FNAMLEN-1
&NC2(&C) SETC  '&P8'(&FNAMPOS,&FNAMLEN)
.T1TYP8  AIF   (T'&P8 NE 'C' AND T'&P8 NE 'Z').SETX8
&TYP(&C) SETC  '1'
         AGO   .T1LEN8
.SETX8   ANOP
&TYP(&C) SETC  '2'
.T1LEN8  ANOP
&LEN(&C) SETA  L'&P8
         AIF   ('&TYP(&C)' EQ '1').TL1C8
         AIF   (L'&P8 LE 57).GENI8
&LEN(&C) SETA  57
         MNOTE 0,'LAENGE &P8 IM OP. 8 GROESSER 57 - MAX GESETZT'
         AGO   .GENI8
.TL1C8   AIF   (L'&P8 LE 114).GENI8
         MNOTE 0,'LAENGE &P8 IM OP. 8 GROESSER 114 - MAX. GESETZT'
&LEN(&C) SETA  114
.GENI8   ANOP
         DATAGEN &NC1(&C),&NC2(&C),&LEN(&C),&TYP(&C)
         AGO   .IFCLOSE
.ALLRG8  ANOP
&REGSTA  SETA  0
&REGEND  SETA  15
         DATAGEN REG,&REGSTA,&REGEND
         AGO   .IFCLOSE
.SUBLI8  AIF   ('&P8(1)' EQ 'REGS').SUBRG8
         AIF   (K'&P8(1) GT 8).NAMS8
&NC1(&C) SETC  '&P8(1)'
         AGO   .T3TYP8
.NAMS8   ANOP
&NC1(&C) SETC  '&P8(1)'(1,8)
&FNAMLEN SETA  K'&P8(1)-8
&FNAMPOS SETA  K'&P8(1)-&FNAMLEN+1
&NC2(&C) SETC  '&P8(1)'(&FNAMPOS,&FNAMLEN)
.T3TYP8  AIF   (T'&P8(3) NE 'O').T2TYP8
         MNOTE 0,'TYPE-ATTR. IN OP. 8 NICHT VORH. - X GESETZT'
&TYP(&C) SETC  '2'
         AGO   .LENN8
.T2TYP8  AIF   ('&P8(3)' NE 'C' AND '&P8(3)' NE 'Z').SETXS8
&TYP(&C) SETC  '1'
         AGO   .LENN8
.SETXS8  ANOP
&TYP(&C) SETC  '2'
.LENN8   AIF   (T'&P8(2) EQ 'N').LNUMS8
         MNOTE 0,'LAENGE &P8(2) IM OP. 8 NICHT NUM. - 1 GESETZT'
&LEN(&C) SETA  1
         AGO   .LOKS8
.LNUMS8  ANOP
&LEN(&C) SETA  &P8(2)
         AIF   ('&TYP(&C)' EQ '1').TL2C8
         AIF   (&LEN(&C) LE 57).LOKS8
&LEN(&C) SETA  57
         MNOTE 0,'LAENGE &P8(2) IM OP. 8 GROESSER 57 - MAX. GESETZT'
         AGO   .LOKS8
.TL2C8   AIF   (&LEN(&C) LE 114).LOKS8
&LEN(&C) SETA  114
         MNOTE 0,'LAENGE &P8(2) IM OP. 8 GROESSER 114 - MAX. GESETZT'
.LOKS8   ANOP
         DATAGEN &NC1(&C),&NC2(&C),&LEN(&C),&TYP(&C)
         AGO   .IFCLOSE
.SUBRG8  AIF   (T'&P8(2) EQ 'N').RN1S8
&REGSTA  SETA  2
         MNOTE 0,'START REG &P8(2) IN OP. 8 NICHT NUM. - 2 GESETZT'
         AGO   .ENDR8
.RN1S8   ANOP
&REGSTA  SETA  &P8(2)
.ENDR8   AIF   (T'&P8(3) NE 'O').RN2S8
&REGEND  SETA  &REGSTA
         AGO   .GENE8
.RN2S8   AIF   (T'&P8(3) EQ 'N').RN3S8
&REGEND  SETA  12
         MNOTE 0,'END-REG &P8(3) IN OP. 8 NICHT NUM. - 12 GESETZT'
         AGO   .GENE8
.RN3S8   ANOP
&REGEND  SETA  &P8(3)
.GENE8   ANOP
         DATAGEN REG,&REGSTA,&REGEND
.IFCLOSE AIF   (T'&CLOSE EQ 'O' AND T'&P1 EQ 'O').DATAEXT
         AIF   (T'&CLOSE EQ 'O').DATAOUT  IF CLOSE OMITTED
.*
         DATAGEN CLOSE=YES
.*
.DATAOUT ANOP
         LM    14,1,&DASAVE1 .          RELOAD USERS REGISTERS
.DATAEXT ANOP
         MEND
