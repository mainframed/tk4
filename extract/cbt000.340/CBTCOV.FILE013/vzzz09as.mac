//*=******** IDACATFX  TRANSFERRED FROM DLL  SEPT.16, 1980 ***********
**********************************************************************
***      THIS IS THE APRIL 3 1980 VERSION OF IDACATFIX             ***
***       ADDITIONS AND CORRECTIONS--- THANK YOU BANK......        ***
**********************************************************************
**********************************************************************
*
*   IDACATFX:
*
*   THIS PROGRAM IS DESIGNED TO MAKE REPAIRS TO A VSAM CATALOG. ALSO
*   IT IS INTENDED TO BE RUN ON ENHANCED VSAM CATALOGS ONLY.
*
*
*   INSTALLATION:
*
* PROGRAM MUST BE IN AUTHORIZED LIB TO WORK.
*
* THE FOLLOWING JOB WILL LINK CATFIX INTO AN AUTHORIZED LIB.
*     //LINK      EXEC  PGM=IEWL,PARM='AC=1'
*     //SYSPRINT  DD    SYSOUT=A
*     //SYSLMOD   DD    DSN=SYS1.LINKLIB,DISP=SHR
*     //SYSUT1    DD    UNIT=3330,SPACE=(CYL,(5,1))
*     //SYSLIN    DD
*      ----OBJECT DECK----
*      NAME CATFIX(R)
*     /*
*
*     EXECUTION:
*
* ONCE THE PROGRAM HAS BEEN LINKED, USE THE FOLLOWING TO INVOKE IT:
*      //CATFIX   EXEC  PGM=CATFIX,PARM='CATALOG PASSWORD'
*      //SYSPRINT DD    SYSOUT=A
*      //STEPCAT  DD    DSN=CATALOG NAME,DISP=SHR  (IF USER CATALOG)
*      //VSAMCAT  DD    DSN=CATALOG NAME,DISP=SHR
*      //SYSIN    DD          (OPTIONAL)
*       COMMANDS AND OPERANDS
*      /*
*
*  THE COMMANDS AND OPERANDS MAY BE PROVIDED BY EITHER THE SYSIN
*  DATA SET, OR IF THE SYSIN DD IS MISSING, BY PROMPT TO THE OPERATOR
*  CONSOLE. THE INPUT IS FREE FORM. THAT IS, THE COMMANDS MAY BE
*  ANYWHERE IN THE INPUT STATEMENT OR MAY SPAN CARDS.
*  YOU MAY HAVE MORE THAT ONE COMMAND ON A CARD.  THE COMMANDS
*  OPERANDS MUST FOLLOW THE VERB.
*  IF THE COMMANDS ARE TO BE ENTERED VIA THE OPERATORS CONSOLE, EACH
*  COMMAND AND OPERAND WILL BE PROMPTED FOR IF NOT PROVIDED IN THE
*  INITIAL INPUT. DURING THE EXECUTION OF THE COMMANDS WHICH ALTER
*  THE CATALOG AN ENQ/RESERVE IS ISSUED WHICH WILL LOCK OUT OTHER
*  USERS. THIS MAY CAUSE SIGNIFICANT PERFORMANCE IMPACT IF THE
*  COMMAND IS LONG RUNNING SUCH AS THE 'FCHAIN' COMMAND.
*
*  COMMANDS:
*
*     ENQUE-    CAUSES A EXCLUSIVE ENQUE TO BE ISSUED FOR THE CATALOG.
*               THIS COMMAND USED TO TEST THE RESERVE LOGIC OF THE
*               HARDWARE AND IOS.
*
*     DEQUE-    CLEARS UP THE ENQUE FROM ABOVE
*
*     ADD-      ***THIS COMMAND HAS BEEN DELETED FROM THIS VERSION***
*
*    DELETE-    THIS COMMAND ERASES AN ENTRY FROM THE CATALOG
*               OR PLACES A CI FROM THE LOW KEY RANGE ON THE
*               FREECHAIN.
*
*         DELETE DSN=NAME CI=NNNNNN X RBA=NNNN X
*
*              DSN=NAME     IF THE COMMAND IS BEING USED TO ERASE AN
*                           ENTRY FROM THE HIGH KEY RANGE, NAME IS THE
*                           NAME OF THE HIGH KEY RANGE RECORD TO BE
*                           ERASED.
*
*             CI=NNNNNN X   THIS FORM OF THE DELETE COMMAND PLACES A
*                           A CI#'NNNNNN' WITH A RECORD TYPE OF 'X'
*                           (OFFSET X'2C' OF THE CATALOG RECORD) BACK
*                           FREE CI CHAIN. ****CAUTION**** SEE NOTE1
*
*             RBA=NNNN X    THIS FORM OF THE DELETE COMMAND PLACES A
*                           CI FROM THE LOW KEY RANGE WITH AN RBA OF
*                           'NNNN' AND A RECORD TYPE OF 'X' BACK ON
*                           THE FREE CI CHAIN. **CAUTION** SEE NOTE1
*
*              IF DSN= IS USED THE FULL NAME MUST BE SUPPLIED FROM
*              SYSIN. IF ENTERED FROM PROMPTS, A GENERIC NAME MAY BE
*              ENTERED. IF CI= IS USED AND AN ATTEMPT IS MADE TO
*              DELETE CI#S 0-15 THE REQUEST WILL BE FAILED. WHEN THE
*              REQUEST IS ENTERED THROUGH SYSIN AND CI= OR RBA= IS
*              USED THE RECORD TYPE MUST BE SUPPLIED (X) SO THAT
*              CATFIX CAN VERIFY THE RECORD TYPE BEING DELETED.
*
*
*              ************************NOTE1*************************
*              * IF THE CI= OR RBA= VALUE INDICATES A CI THAT HAS A *
*              * RECORD TYPE OF "F" YOU MUST INSURE THAT THAT CI IS *
*              * NOT ALREADY ON THE FREECHAIN AS THIS PROGRAM DOES  *
*              * NOT INSURE THIS AND WILL CAUSE A LOOP IN YOUR CHAIN*
*              * OF FREE CI'S. THE FCHAIN COMMAND CAN BE USED TO    *
*              * RECHAIN FREE CI'S IF YOU ARE NOT SURE YOUR CI IS   *
*              * FREE OR IF YOU INADVERTANTLY DELETE A CI THAT WAS  *
*              * ALREADY ON THE CHAIN.                              *
*              ******************************************************
*
*
*    ZAP-      THIS COMMAND ALTERS DATA WITHIN CATALOG RECORDS
*              SIMILAR TO HOW IMASPZAP DOES.
*
*         FORMAT1.
*         ZAP CI=NNNNNN VER 0000 00000000 REP 0000 00000000
*
*                CI=NNNNNN  USE THIS FORMAT WHEN THE RECORD TO BE
*                           ALTERED IN THE LOW KEY RANGE HAS A CI
*                           NUMBER OF 'NNNNNN'.
*
*        FORMAT2.
*        ZAP RBA=NNNN VER 0000 0000,0000 REP 0000 0000,0000
*
*              RBA=NNNN   USE THIS FORMAT WHEN THE RECORD TO BE ALTERED
*                         IN THE LOW KEY RANGE HAS AN RBA OF 'NNNN'.
*
*
*              THE VER AND REP DATA IS STANDARD FORMAT. MAY BE
*              UP TO 2 WORDS OF DATA AND MAY USE COMAS BETWEEN
*              HALF WORDS.
*
*               IF ALTERATION OF THE HIGH KEY RANGE OF THE CATALOG
*               IS DESIRED THE 'ADD' AND 'DELETE' FUNCTIONS MUST
*               BE USED. ATLERATION OF THE HIGH KEY RANGE VIA THE
*               ZAP COMMAND IS NOT ALLOWED BECAUSE IT WOULD BE
*               LIKELY TO ALTER THE KEYS OF RECORDS AND THUS BE
*               AN INTEGRETY EXPOSURE.
*
*    FCHAIN-  THIS COMMAND WILL CAUSE THE CATALOGS FREE CHAIN TO
*             BE REBUILT. IF DURING PROCESSING A MISMATCH BETWEEN
*             RBA AND ITS KEY IS FOUND, THE FIRST MISMATCH RECORD
*             WILL BE PRINTED, BUT THE FREE CHAIN REBUILD WILL
*             CONTINUE.
*
*         FCHAIN    -NO OPERANDS-
*
*              THIS COMMAND READS THE CATALOG STARTING FROM THE LOW
*              END OF THE LOW KEY RANGE AND SEARCHES FOR A RECORD
*              WITH AN 'F' AT OFFSET X'2C'. EACH RECORD FOUND IS
*              CHAINED ONTO THE NEWLY BUILT FREECHAIN. YOU SHOULD BE
*              AWARE THAT THE FUNCTION READS THE ENTIRE LOW KEY RANGE
*              SO PERFORMANCE IS DEPENDENT ON THE SIZE OF THE CATALOG.
*
*
*    DISPLAY-  THIS COMMAND WILL DISPLAY REQUESTED CATALOG RECORDS
*              ON THE OPERATORS CONSOLE.
*
*    PRINT     THIS COMMAND HAS THE SAME FORMAT AS THE DISPLAY
*              COMMAND. THE DIFFERENCE BETWEEN THE TWO COMMANDS
*              IS THAT OUTPUT FROM THE PRINT COMMAND WILL BE
*              WRITTEN TO THE SYSTEM OUTPUT PRINTER WHERE OUTPUT
*              FROM DISPLAY WILL BE WRITTEN TO THE OPERATORS
*              CONSOLE.
*
*         DISPLAY DSN=NAME CI=NNNNNN RBA=NNNN INDEX ALL
*
*         PRINT   -- SAME OPERANDS AS DISPLAY --
*
*            DSN=NAME  IN THIS FORM THE DISPLAY CMD WILL DISPLAY
*                      THE FULL CI FROM THE HIGH KEY RANGE THAT
*                      CONTAINS THE TRUE NAME RECORD REQESTED. IF
*                      THE CMD IS ENTERED IN THE FOLLOWING FORMAT
*                      (WITH AN * PRECEEDING THE NAME) DSN=*NAME
*                      THE CI FROM THE LOW KEY RANGE THAT IS POINTED
*                      TO BY THE TRUE NAME RECORD IS ALSO DISPLAYED
*                      AND ALL ASSOCIATED CI'S.
*
*            CI=NNNNNN IN THIS FORM THE CI FROM THE LOW KEY RANGE IS
*                      DISPLAYED ON THE CONSOLE. THIS FORM CANNOT BE
*                      USED TO DISPLAY FROM THE HIGH KEY RANGE.
*
*            RBA=NNNN  IN THIS FORM THE DISPLAY CMD WILL DISPLAY THE
*                      FULL CI AT THE REQUESTED RBA.
*
*            INDEX     THE ENTIRE INDEX PORTION OF THE CATALOG WILL BE
*                      DISPLAYED ON THE CONSOLE. IDACATFX IS THE ONLY
*                      TOOL THAT CAN PRINT THE INDEX PORTION OF A
*                      CATALOG. IF THE CATALOG IS LARGE YOU SHOULD USE
*                      PRINT COMMAND TO OBTAIN A COPY OF THE INDEX
*                      RATHER THAN DISPLAY.
*
*             ALL      THE ENTIRE CATALOG IS DISPLAYED ON THE CONSOLE.
*                      NORMALLY IF A LISTING OF THE CATALOG IS NEEDED
*                      THE PRINT CMD WOULD BE MORE DESIRABLE THAN
*                      DISPLAY BECAUSE OF THE VOLUME OF OUTPUT.
*
*
*    PUNCH      THIS COMMAND CREATES A DECK OF CARDS THAT CAN BE
*               USED TO RE-DEFINE ALL THE NON-VSAM DATASETS IN
*               THE CATALOG. YOU MUST HAVE A 'SYSPUNCH' DD CARD TO
*               USE THIS COMMAND. THIS COMMAND SHOULD BE USED WHEN
*               A COMPLETE CATALOG REBUILD IS REQUIRED TO AVOID
*               HAVING TO CREATE THE DEFINE STATEMENTS MANUALLY.
*
*               PUNCH ALL   THIS WILL CAUSE CATFIX TO READ THE LOWKEY
*                           RANGE 3 TIMES.  FIRST PASS WILL PUNCH OUT
*                           THE GDG RECORDS, 2ND THE NON-VSAM RECORDS
*                           AND LAST THE ALIAS RECORDS.
*               PUNCH B     IN ONE PASS, THE CATALOG'S GDG RECORDS
*                           ARE PUNCHED
*               PUNCH A     IN ONE PASS, THE NON-VSAM RECORDS
*                           ARE PUNCHED
*               PUNCH X     IN ONE PASS, THE ALAIS RECORDS ARE PUNCHED.
*
*
*    MAP        MAP GIVES STATISTICS ABOUT THE CATALOG.  OF IMPORTANCE
*               IS THE 'COUNT OF USED BUT EMPTY CI'S'.  THIS COUNT
*               TELLS YOU WHEN THE CATALOG IS BECOMING FULL OF
*               CI'S THAT WERE ONCE USED BUT NOW EMPTY AND HENCE MAY
*               NOT BE USED AGAIN.  IF THIS COUNT BECOMES HIGH AND
*               DOES NOT REDUCE DURING NORMAL CATALOG ACTIVITY, YOU
*               MAY WANT TO REPRO THE CATALOG TO RECLAIM THE EMPTY
*               CI'S.
*               ALSO, THE 'COUNT OF NEVER USED CI'S' IS THE COUNT
*               OF TRUE FREE SPACE.  IT IS THESE CI'S THAT CI SPLITS
*               WILL OCCUR IN (THEY ARE TRULY FREE).
*
*    CRA        THIS COMMAND WILL CHANGE PROCESSING FROM THE CATALOG
*               TO THE CRA IF:
*               1. THERE IS A CRA FOR THE CATALOG
*               2. THERE IS A DDNAME OF "VSAMCRA" IN THE JOBSTREAM.
*                  THIS DD NAME MUST CONTAIN THE VOLSER OF THE DISK
*                  THAT THE CRA IS ON THAT CATFIX IS TO PROCESS.  SOME
*                  CATFIX COMMANDS, SUCH AS FCHAIN, ARE NOT VALID IN
*                  THIS MODE.  AN ERROR MESSAGE WILL BE ISSUED IF YOU
*                  ATTEMP TO ISSUE SUCH A COMMAND.  YOU MUST USE
*                  "RBA=" PROCESS AS THE CRA IS AN ESDS AND DOES NOT
*                  HAVE KEYS FOR "CI=" OR "DSN=" OPERANDS.
*
*
*
*
**********************************************************************
         EJECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12                  1ST BASE REG
R13      EQU   13                  WORK AREA
R14      EQU   14
R15      EQU   15
PUT      EQU   1
POINT    EQU   3
ENDREQ   EQU   4
ERASE    EQU   5
VER      EQU   6
GETIX    EQU   11
KEY      EQU   X'80'
CNV      EQU   X'20'
UPD      EQU   X'02'
DIR      EQU   X'40'
SEQ      EQU   X'20'
KGE      EQU   X'04'
GEN      EQU   X'02'
NSP      EQU   X'01'
         EJECT
CATFIX   CSECT
         USING *,R15
         B     PROLOG
         DC    C'CATFIX 80/04/02 '
SAVE     DS    19F                R13 SAVE AREA
PROLOG   STM   R14,R12,12(R13)    SAVE INPUT REGS
         LA    R11,SAVE           GET MY SAVE AREA ADDRESS
         ST    R13,4(R11)         STORE BACKWARDS POINTER
         ST    R11,8(R13)         STORE FORWARD POINTER
         LR    R13,R11
         LA    R12,4095(R13)      SET BASE REG
         LA    R12,1(R12)
         LA    R11,4095(R12)      SET 2ND BASE REG
         LA    R11,1(R11)
         USING SAVE,R13,R12,R11
         DROP  R15
         MVI   STATUS,X'00'       CLEAR THE STATUS FLAGS
         ST    R1,WORK1           SAVE PARM POINTER
         L     R4,16(0,0)         GET CVT ADDDRESS
         TM    116(R4),X'10'      IS THIS MVS?
         BO    ESTAE
         MVI   ESTAE+4,X'00'      SET NEW OPTION BYTE
*
***** ESTABLISH AN ESTAE ROUTINE TO REMOVE ENQUE IF A DISASTER OCCURS
*
*        ESTAE ABTERM,CT,,XCTL=NO,,,TERM=YES
         CNOP  0,4           THE ESTAE MACRO WAS HAND EXPANDED
ESTAE    BAL   R1,*+20       SO THIS CODE CAN WORK ON MVS AS WELL AS
         DC    AL1(22)       VS1.
         DC    AL3(ABTERM)
         DC    2A(0)
         DC    AL1(64)
         DC    AL3(0)
         SR    R0,R0
         LA    R1,0(R1)
         SVC   60
*
****  ATTEMPT TO OPEN THE SYSIN DATA SET IF THERE IS ONE.
*
         L     R5,0(0,R4)         GET TCB WORD
         L     R5,0(0,R5)         GET TCB ADDRESS
         L     R6,180(R5)         GET JSCB ADDRESS
         L     R5,12(0,R5)        GET TIOT ADDRESS
         LA    R5,24(,R5)         POINT TO FIRST TIOT ENTRY
         SR    R8,R8
TIOTLOOP ICM   R8,1,0(R5)         GET TIOT ENTRY LENGTH
         BZ    NOSYSIN            END FOR TIOT ENTRIES, NO SYSIN
         CLC   4(8,R5),=C'SYSIN   '
         BE    SYSINOPN           SYSIN DDCARD FOUND
         AR    R5,R8              POINT TO NEXT TIOT ENTRY
         B     TIOTLOOP
SYSINOPN OPEN  (SYSIN,INPUT)
NOSYSIN  OPEN  (SYSPRINT,OUTPUT)
         TM    SYSPRINT+48,X'10'  SYSPRINT OPEN OK?
         BZ    ERROR1             NO, MUST HAVE IT
*
**** OPEN THE CATALOG AND VERIFY IT
*
CATOPN   ICM   R7,15,204(R6)      GET PCCB ADDRESS
         BNZ   PCCBFIND           IF NONE, GET FROM FIRST CAXWA
         L     R7,256(R4)         GET AMCBS FROM CVT
         L     R7,20(R7)          GET CAXWA FROM AMCBS
         TM    8(R7),X'04'        IS THIS THE MASTER CATALOG'S CAXWA?
         BO    *+12               YES, CONTINUE
         L     R7,4(R7)           GET THE CAXWA
         B     *-12
         LA    R7,24(R7)          POINT R7 28 BYTES INFRONT OF NAME
         B     PCCBOK
PCCBFIND CLI   ESTAE+4,X'00'      IS THIS VS1?
         BNE   PCCBOK
         L     R7,4(R7)           GET ACB FROM PCCB
         L     R7,64(R7)          GET CAXWA
         LA    R7,24(R7)          POINT IN FRONT OF NAME
PCCBOK   MVC   MINOR(44),28(R7)   GET CATALOG NAME FOR ENQ
         L     R6,256(R4)         NOW MUST FIND CAXWA
         L     R6,20(R6)
CAXWALOP CLC   MINOR(44),52(R6)   IS THIS THE CAXWA?
         BE    CAXWA
         ICM   R6,15,4(R6)        POINT TO NEXT CAXWA
         BNZ   CAXWALOP           NONE AND HAVE NOT FOUND CAXWA
         LA    R1,MSG25           ERROR MESSAGE
         BAL   R14,WRITE
         B     THEEND
CAXWA    MVC   UCBADR(4),28(R6)   GET UCB ADDRESS
         ICM   R1,15,WORK1
         BZ    CATOPN1
         L     R1,0(R1)           ADDRESS OF EXEC PARM FIELD
         LH    R14,0(R1)          GET THE PARM LENGTH
         LTR   R14,R14            IS THERE ONE?
         BZ    CATOPN1            NO, GO OPEN THE CATALOG
         STC   R14,PASSWORD       STORE THE LENGTH
         BCTR  R14,0
         EX    R14,MOVE2
         LA    R5,PASSWORD
         ST    R5,CATACB+32      STORE PASSWORD ADDRESS
CATOPN1  OPEN  (CATACB,OUTPUT)
         LTR   R15,R15           OPEN OK?
         BZ    VERIFY            YES, GO VERIFY IT
         CLI   CATACB+49,X'74'
         BE    VERIFY
         IC    R0,CATACB+49      GET OPEN ERROR CODE
         BAL   R14,CONVERT
         MVC   MSG3+30(2),UNPACK+6
         LA    R1,MSG3           NEED TO WTO THE ERROR MESSAGE
         LA    R14,EXIT          THIS IS AN ERROR MESSAGE
         B     WRITE
MOVE2    MVC   PASSWORD+1(0),2(R1)  MOVE PARM PASSWORD TO ACB
VERIFY   LA    R0,VER            SET R0 TO VERIFY CODE
         LA    R1,LOWRPL         USE THE HI RPL
         BAL   R14,REQUEST       GO DO THE VSAM VERIFY
         LTR   R15,R15           WORK OK?
         BNZ   EXIT              NO, GET OUT
         SPACE 3
**********************************************************************
* ROUTER DETERMINES THE FUNCTION (COMMAND) AND GIVES CONTROL TO THE  *
* CORRECT SUBROUTINE                                                 *
**********************************************************************
ROUTER   MVI   STATUS,X'00'      CLEAR THE FLAGS
         MVI   LOWRPL+40,DIR+GEN
         MVI   LOWRPL+41,CNV+UPD
         MVI   HIRPL+40,DIR+GEN
         MVI   HIRPL+41,KEY
*        TIME  DEC,ZONE=LT,ERRET=ROUTER1
         LA    R1,66
         SVC   11
         BAL   R14,CONVERT
         MVC   MSG1+34(2),UNPACK
         MVI   MSG1+36,C'.'
         MVC   MSG1+37(2),UNPACK+2
         MVI   MSG1+39,C'.'
         MVC   MSG1+40(2),UNPACK+4
         LR    R0,R1
         SRL   R0,4
         BAL   R14,CONVERT
         MVC   MSG1+27(2),UNPACK+3
         MVI   MSG1+29,C'.'
         MVC   MSG1+30(3),UNPACK+5
ROUTER1  LA    R1,MSG1           POINT TO THE COMMAND MSG
         BAL   R14,GETINPUT
         CLC   0(3,R1),=C'CAT'   WANT CATALOG WORK?
         BE    ROUTER3
         CLC   0(3,R1),=C'CRA'   WANT CRA WORK?
         BNE   ROUTER4
         TM    CRAACB+48,X'10'   IS THERE A CRA ACB OPENED?
         BO    ROUTER2
         MVI   CRAACB+50,X'04'
         OPEN  (CRAACB,OUTPUT)   OPEN CRA
         LTR   R15,R15
         BZ    ROUTER2
         LA    R1,MSG45
         BAL   R15,WRITE
         B     ROUTER
ROUTER2  LA    R9,CRAACB
         ST    R9,LOWRPL+24      CHANGE RPL TO CRA
         OI    FLAG2,CRAOK
         LR    R8,R1
         LA    R1,MSG46
         BAL   R14,WRITE
         L     R1,R8
         B     ROUTER4
ROUTER3  LA    R9,CATACB
         ST    R9,LOWRPL+24      CHANGE RPL TO CATALOG
         NI    FLAG2,X'FF'-CRAOK
         LR    R8,R1
         LA    R1,MSG47
         BAL   R14,WRITE
         LR    R1,R8
ROUTER4  CLC   0(3,R1),=C'DIS'
         BE    PRINT
         CLC   0(3,R1),=C'PRI'
         BE    PRINT             PRINT COMMAND PRINT'S CIS
         CLC   0(3,R1),=C'END'
         BE    EXIT              END COMMAND DOES EXIT PROCESSING
         CLC   0(3,R1),=C'PUN'
         BE    PUNCH             PUNCH THE DEFINE NON-VSAM
         CLC   0(3,R1),=C'ZAP'
         BE    ZAP               ZAP CHANGE EXISTING RECORDS
         CLC   0(3,R1),=C'DEL'
         BE    DELETE            DELETE ERASES A CAT RECORD
         CLC   0(3,R1),=C'FCH'
         BE    FCHAIN            FCHAIN REBUILDS THE FREE CHAIN
         CLC   0(3,R1),=C'MAP'
         BE    MAP               WANTS ANALIZE OF CATALOG
         LA    R14,ROUTER
         CLC   0(3,R1),=C'ENQ'
         BE    ENQUE             WANT TO LOCK UP CATALOG
         CLC   0(3,R1),=C'DEQ'
         BE    DEQUE             WANTS TO UNLOCK CATALOG
         B     ROUTER            COMMAND INVALID, TRY AGAIN
         SPACE 3
**********************************************************************
* GETINPUT WILL GET DATA FROM SYSIN OR OPERATOR.  REG1 AT ENTRY       *
* HAS THE MESSAGE TO BE ISSUED.  IF INPUT IS NOT SYSIN, PROMPT WILL  *
* BE CALLED TO GET THE INPUT FROM THE OPERATOR.  REG1 AT ENTRY HAS   *
* ADDRESS OF PROMPT MESSAGE.  REG1 AT EXIT POINTS TO INPUT.          *
**********************************************************************
GETINPUT ST    R14,RETURN        SAVE RETURN ADDRESS
         LR    R15,R1
         ICM   R3,15,WORK2       GET CURRENT INPUT LOCATION
         BNZ   SCAN1             GOT IT OK, START SCANING FOR BLANK
GETNEXT  LR    R1,R15
         TM    SYSIN+48,X'10'    IS THERE A SYSIN DATA SET?
         BO    GETNEXT1          YES, DO A SAM GET TO READ THE CARD.
         BAL   R14,PROMPT        NO, GO GET THE INPUT FROM THE OPERATOR
         MVC   COMMAND(80),REPLY
         B     GOTNEXT
GETNEXT1 XC    COMMAND,COMMAND   CLEAR INPUT AREA
         GET   SYSIN,COMMAND     READ A CARD INTO REPLY
GOTNEXT  LA    R1,COMMOUT+2      SET R1 FOR A WRITE CALL
         BAL   R14,WRITE
         LA    R3,COMMAND        SET THE SCAN POINTER
         TM    0(R3),X'BF'       IS THE FIRST BYTE IN NON BLANK?
         BZ    SCAN2             YES, NEED TO SCAN FOR DATA
         LR    R1,R3             HAVE ALREADY FOUND DATA
         ST    R1,WORK2
         L     R14,RETURN
         BR    R14
SCAN1    LA    R4,COMMAND+70     LOOK FOR THE A BLANK IN THE INPUT
         SR    R4,R3             DETERMINE THE AMOUNT OF BYTES TO DO
         EX    R4,TRT2           TRANS AND TEST INPUT TO BLANK
         BC    10,GETNEXT        IF HIT END OF LINE, READ NEXT CARD
         LR    R3,R1
SCAN2    LA    R4,COMMAND+70     LOOK FOR A NON-BLANK IN THE INPUT
         SR    R4,R3             FIND START TRT POINT
         EX    R4,TRT1           TRT FOR NON-ZERO
         ST    R1,WORK2          SAVE THE CURRENT SCAN POINTER
         BC    10,GETNEXT        NO DATA FOUND, READ NEXT CARD
         L     R14,RETURN        GOT DATA OK, RETURN
         BR    R14
TRT1     TRT   0(0,R3),XLATE     USED TO LOCATE NON-BLANKS
TRT2     TRT   0(0,R3),TRTABLE2  USED TO LOCATE BLANKS
         SPACE 3
***********************************************************************
* REQUEST IS CALLED WITH REG0 HAVEING THE REQUEST CODE AND REG1 HAS   *
* THE RPL ADDRESS.  THE RPL OPTIONS AND KEY VALUES ARE SET BY THE     *
* CALLER OF THIS ROUTINE.  IF AN ERROR OCCURS, CONTROL IS RETURNED    *
* TO THE CALLER WITH REG15 NON-ZERO.                                  *
***********************************************************************
REQUEST  STM   R1,R14,SNAPSAVE   SAVE RETURN ADDRESS
         L     R15,CATACB+8      GET ADDRESS OF IDA019R1
         BALR  R14,R15           GO TO VSAM
         LM    R1,R14,SNAPSAVE
         LTR   R15,R15           ANY ERRORS?
         BZR   R14               NO, RETURN
         CLC   13(3,R1),=X'080004' EOF IS OK
         BER   R14               RETURN WITH OK ERROR
         TM    STATUS,NRFOK      IS A NO RECORD FOUND AN OK ERROR?
         BZ    REQERR            NO, CONTINUE
         CLC   13(3,R1),=X'080010'
         BER   R14               RETURN TO CALLER
         CLC   13(3,R1),=X'080020'
         BER   R14
REQERR   LR    R2,R1             SAVE RPL ADDRESS
         ICM   R0,7,13(R2)       GET ERROR CODE FROM RPL
         BAL   R14,CONVERT
         MVI   OUTLINE,X'40'
         MVC   OUTLINE+1(124),OUTLINE
         MVC   OUTLINE+2(33),MSG6
         MVC   OUTLINE+24(6),UNPACK+2
         CLI   23(R13),X'00'     WAS REQUEST A GET?
         BNE   REQERR2
         MVC   OUTLINE+36(3),=C'GET'
         LA    R6,OUTLINE+40
         B     REQERR1
REQERR2  CLI   23(R13),X'01'     WAS REQUEST A PUT?
         BNE   REQERR3
         MVC   OUTLINE+36(3),=C'PUT'
         LA    R6,OUTLINE+40
         B     REQERR1
REQERR3  CLI   23(R13),X'03'     WAS REQUEST A POINT?
         BNE   REQERR4
         MVC   OUTLINE+36(5),=C'POINT'
         LA    R6,OUTLINE+42
         B     REQERR1
REQERR4  CLI   23(R13),X'04'     WAS REQUEST AN ENDREQ?
         BNE   REQERR5
         MVC   OUTLINE+36(6),=C'ENDREQ'
         LA    R6,OUTLINE+43
         B     REQERR1
REQERR5  CLI   23(R13),X'05'     WAS REQUEST AN ERASE?
         BNE   REQERR6
         MVC   OUTLINE+36(5),=C'ERASE'
         LA    R6,OUTLINE+42
         B     REQERR1
REQERR6  CLI   23(R13),X'06'     WAS REQUEST A VERIFY?
         BNE   REQERR7
         MVC   OUTLINE+36(6),=C'VERIFY'
         LA    R6,OUTLINE+43
         B     REQERR1
REQERR7  SR    R0,R0
         IC    R0,23(R13)
         BAL   R14,CONVERT
         MVC   OUTLINE+36(2),UNPACK+6
         MVC   OUTLINE+39(3),=C'TYP'
         LA    R6,OUTLINE+41
REQERR1  MVC   0(7,R6),=C'REQUEST'
         CLC   13(3,R1),=X'080010'   IS THIS A NRF?
         BNE   REQERR8
         MVC   OUTLINE+24(17),=C'NO RECORD FOUND. '
         LA    R6,OUTLINE+32
REQERR8  LA    R1,OUTLINE        PROMPT MAYBE CALLED
         TM    41(R2),KEY        KEYED REQUEST?
         BO    ERRCHK1
         MVC   9(4,R6),=C'RBA='
         L     R4,36(R2)         GET RBA ADDRESS
         L     R0,0(R4)
         BAL   R14,CONVERT
         MVC   13(8,R6),UNPACK
         LA    R4,OUTLINE-20
         SR    R6,R4
         STH   R6,OUTLINE
         B     ERRCHK3
ERRCHK1  MVC   9(4,R6),=C'KEY='
         SR    R9,R9
         LH    R9,16(R2)        GET KEY LENGTH
         L     R7,36(R2)        GET KEY ADDRESS
         EX    R9,MOVE10
         CLI   0(R7),X'00'      WAS KEY FOR A LOW CI?
         BNE   ERRCHK2
         L     R0,0(0,R7)       MUST CONVERT KEY TO PRINTABLE DATA
         BAL   R14,CONVERT
         MVC   13(8,R6),UNPACK
         LA    R9,8
ERRCHK2  AR    R6,R9
         LA    R9,OUTLINE-19
         SR    R6,R9
         STH   R6,OUTLINE
ERRCHK3  LA    R1,OUTLINE
         BAL   R14,WRITE
         TM    SYSIN+48,X'10'   NEED TO ASK ABOUT ABENDING?
         BO    ERRCHK9          NO, JUMP OVER PROMPTS
ERRCHK4  LA    R1,MSG24
         NI    STATUS,X'FF'-WRT
         BAL   R14,PROMPT
         OI    STATUS,WRT
         CLI   0(R1),C'A'      WANT ABEND?
         BE    ABEND
         CLI   0(R1),C'S'      WANT TO STOP?
         BE    EXIT
         CLI   0(R1),C'C'      WANT TO CONTINUE?
         BNE   ERRCHK4
ERRCHK9  LA    R15,8
         LM    R1,R14,SNAPSAVE
         BR    R14              RETURN TO CALLER WITH ERROR
ABEND    ABEND 888,DUMP
MOVE10   MVC   13(0,R6),0(R7)
         SPACE 3
***********************************************************************
* GETCI IS CALLED TO READ IN THE CI AS GIVEN IN THE 2ND OPERAND OF A  *
* COMMAND.  THIS MAY BE DSN=, CI=, OR RBA=.  DSN AND CI ARE READ IN   *
* WITH KEY ACCESS, RBA IS READ IN WITH RBA ACCESS.  THE GET IS A GET  *
* UPD REQUEST.                                                        *
***********************************************************************
GETCI    STM   R0,R14,ASSOC+72
         SR    R15,R15
         XC    PACKIN,PACKIN
         LR    R0,R15
         LR    R7,R1
         LA    R8,3(R1)          POINT TO DATA FOR CI=
         CLI   0(R7),C'C'
         BE    GETC
         CLI   3(R7),C'='        VALID INPUT?
         BNE   GETCIBAD
         LA    R8,1(R8)          POINT TO DATA FOR RBA OR DSN
GETC     TRT   0(45,R8),TRTABLE2 FIND END OF DATA
         CR    R1,R8             ANY DATA FOUND?
         BE    GETCIBAD          NO, BAD INPUT
         SR    R1,R8             R1 HAS INPUT LENGTH
         CLI   0(R7),C'D'        DSN GET?
         BE    GETDSN
GETRBA   BCTR  R1,R0
         EX    R1,MOVE4          MOVE DATA TO PACK FIELD
         BAL   R14,PACK
         LH    R6,INLENGTH       GET PACK LENGTH
         L     R5,PACKIN
         SRL   R5,0(R6)          RIGHT JUSTIFY
         ST    R5,LOWREC
         CLI   0(R7),C'C'
         BNE   GETRBA2
         TM    FLAG2,CRAOK       CRA REQUEST?
         BZ    GETRBA1
         L     R9,LOWREC         YES, CONVERT TO RBA REQUEST.
         MH    R9,=X'0200'
         ST    R9,LOWREC
         B     GETRBA2
GETRBA1  NI    LOWRPL+41,X'FF'-CNV CI= IS A KEYED REQUEST
         OI    LOWRPL+41,KEY
GETRBA2  LA    R1,LOWRPL
         BAL   R14,REQUEST
         OI    LOWRPL+41,CNV       RBA= IS AN CNV REQUEST
         NI    LOWRPL+41,X'FF'-KEY
         B     GETCIOUT
GETDSN   STH   R1,HIRPL+16       SET THE KEY LENGTH
         MVC   HIKEY,0(R8)
         LA    R1,HIRPL
         SR    R0,R0
         BAL   R14,REQUEST
         B     GETCIOUT
GETCIBAD BCTR  R15,R0
GETCIOUT LM    R0,R14,ASSOC+72
         BR    R14
MOVE4    MVC   PACKIN(0),0(R8)
         SPACE 3
***********************************************************************
* WRITE  ON ENTRY REG1 POINTS TO A MESSAGE.  THE MESSAGE IS MOVED TO  *
* 'MESSAGES' AND THE MSG LENGTH SAVED INCASE A WTO IS NEEDED.  IT     *
* IS WRITTEN (PUT) AND IF EITHER THE ENTRY PROMPT WAS USED OR IF THE  *
* SYSIN DATA SET IS NOT OPENED, A WTO OR WTOR IS ISSUED.              *
***********************************************************************
WRITE    OI    STATUS,WRT
PROMPT   STM   R1,R14,WORKSAVE
         XC    MESSAGE,MESSAGE   CLEAR THE MESSAGE AREA
         LH    R10,0(R1)         GET THE MESSAGE LENGTH
         LA    R9,4(R10)
         STH   R9,WTORLNG        STORE UPDATED MESSAGE LENGTH
         LA    R9,MESSAGE
         AR    R9,R10            R9 HAS ADDRESS OF END OF MSG
         BCTR  R10,R0
         EX    R10,MOVE1         MOVE MESSAGE TO PUTPUT AREA
WRITE1   PUT   SYSPRINT,MESSAGE
         TM    SYSIN+48,X'10'    SYSIN OK?
         BO    WRITEXIT          YES, NO PROMPT.  EXIT
         TM    STATUS,NOWTO      REQUEST NO WTO
         BO    WRITEXIT
         XC    REPLY,REPLY       CLEAR INPUT AREA
         XC    ECB,ECB           CLEAR ECB
         MVI   WTOR,X'50'        SET REPLY LENGTH TO 80
         MVC   0(4,R9),ROTCDE    MOVE IN THE ROUTE CODE INFO
         LA    R1,WTOR
         TM    STATUS,WRT        IS THIS JUST A WRITE?
         BZ    PROMPT2
         LA    R1,WTORLNG        JUST A WTO
PROMPT2  SVC   35                ISSUE THE MESSAGE
         TM    STATUS,WRT
         BO    WRITEXIT          WRITE MODE RETURNS TO WRT
         WAIT  ECB=ECB           WAIT FOR A RESPONSE
         LA    R1,REPLY          SET INPUT POINTER
WRITEXIT NI    STATUS,X'FF'-WRT
         MVI   OUTLINE,X'40'
         MVC   OUTLINE+1(124),OUTLINE
         LM    R2,R14,WORKSAVE+4
         BR    R14
MOVE1    MVC   MESSAGE(0),2(R1)   MOVES MESSAGE TO OUTPUT AREA
         SPACE 3
**********************************************************************
* PACK TAKES THE DATA IN 'PACKIN' AND CONVERTS THE 8 BYTES OF        *
* EBCDIC TO 4 BYTES OF HEX.  FOR INSTANCE, X'C6C5F1F2F3F4F5F6' IN    *
* PACKIN WOULD BECOME X'FE12345600000000' IN PACKIN.                 *
**********************************************************************
         SPACE
PACK     STM   R0,R14,SAVE+8
         LA    R7,PACKIN           START ADDRESS
         SR    R8,R8
         LA    R6,10               LOOP COUNT
PACKERL  TM    0(R7),X'FF'         IS THIS BYTE BLANK?
         BZ    PACKERE+8           YES, END OF PACK
         TM    0(R7),X'30'         IS BYTE NUMERIC?
         BO    PACKERN
         NI    0(R7),X'0F'         STRIP OFF ALPA ZONE
         TR    0(1,R7),TABLE2
         B     PACKERE-4
PACKERN  NI    0(R7),X'0F'         JUST STRIP ZONE OFF FOR NUMERIC
         LA    R8,4(R8)            COUNT OF HALF BYTES PROCESSED
PACKERE  LA    R7,1(R7)            NEXT BYTE
         BCT   R6,PACKERL
         MVI   PACKIN+11,X'FF'
         PACK  PACKIN(11),PACKIN(11)
         MVC   PACKIN(8),PACKIN+2
         LM    R0,R1,PACKIN
         LA    R9,32
         SR    R9,R8
         STH   R9,INLENGTH         THE AMOUNT OF BYTES TO WRD JUSTIFY
         XC    PACKIN,PACKIN
         SLDL  R0,24(R0)           SHIFT OUT THE UNUSED BYTES
         STM   R0,R1,PACKIN
         LM    R0,R14,SAVE+8
         BR    R14
TABLE2   DC    X'000A0B0C0D0E0F'
         SPACE 3
***********************************************************************
* THE ENQUE IS ISSUED ANYTIME THE CATALOG IS BEING ALTERED.           *
***********************************************************************
ENQUE    ST    R14,RETURN
         TM    FLAG2,ENQUED       ALREADY ENQUE D?
         BER   R14                YES, JUST RETURN
         CLI   MINOR+20,X'40'
         BE    ENDQ1
         MVI   ENDQ1+5,X'2C'
ENDQ1    RESERVE  (MAJOR,MINOR,E,20,SYSTEMS),RET=USE,UCB=UCBADR
         OI    FLAG2,ENQUED       REMEMBER THE STATUS
         L     R14,RETURN
         LTR   R15,R15            GET IT OK?
         BZR   R14                YES, RETURN TO CALLER
DEQUE    ST    R14,RETURN
         TM    FLAG2,ENQUED       DO WE NEED A DEQUE?
         BZR   R14
         CLI   MINOR+20,X'40'
         BE    DEQ1
         MVI   DEQ1+5,X'2C'
DEQ1     DEQ   (MAJOR,MINOR,20,SYSTEMS),UCB=UCBADR
         NI    FLAG2,X'FF'-ENQUED
         L     R14,RETURN
         BR    R14
MAJOR    DC    C'SYSIGGV2'
MINOR    DS    CL44
UCBADR   DS    F
         SPACE 3
***********************************************************************
* CONVERT TAKES THE VALUE IN REG0 AND PUTS IT INTO UNPACK AS EIDIC    *
* DATA.                                                               *
***********************************************************************
CVD      CVD   R0,UNPACK
         L     R0,UNPACK+4
         SRL   R0,4
CONVERT  ST    R0,UNPACK
         MVI   UNPACK+5,X'FF'
         UNPK  UNPACK(9),UNPACK(5)
         TR    UNPACK(8),TABLE-240
         BR    R14
         SPACE 3
**********************************************************************
* SNAP TAKES DATA POINTED TO BY REG1 FOR A LENGTH AS STATED IN REG 0 *
* AND ISSUES THE SNAP SVC.                                           *
**********************************************************************
SNAP     STM   R0,R14,SNAPSAVE   SAVE INPUT REGS
         L     R0,LOWRPL+64      GET THE RBA VALUE
         TM    STATUS,DISCMD     IS THIS A 'DISPLAY' COMMAND SNAP?
         BO    *+8
         OI    STATUS,NOWTO      NO, DON'T PUT OUTPUT TO OPERATOR
         BAL   R14,CONVERT
         MVC   SNAPLINE+34(6),UNPACK+2
         MVC   OUTLINE+2(123),SNAPLINE
         MVC   OUTLINE+64(6),=C' DATA '
         L     R9,LOWRPL+4       GET OLD PLH POINTER
         L     R8,52(R9)         GET DATA BUFC ADDRESS
         CLI   LOWRPL+2,GETIX    WAS IT AN INDEX RESUEST?
         BNE   *+14
         MVC   OUTLINE+65(6),=C'INDEX '
         L     R8,188(R9)        GET INDEX BUFC ADDRESS
         L     R8,16(R8)         GET CPA ADDRESS
         ICM   R0,15,55(R8)      GET CCHH
         BAL   R14,CONVERT
         MVC   OUTLINE+46(6),=C'CCHHR='
         MVC   OUTLINE+52(8),UNPACK
         SR    R0,R0
         IC    R0,59(R8)         GET THE 'R' VALUE
         BAL   R14,CONVERT
         MVC   OUTLINE+60(2),UNPACK+6
         MVI   OUTLINE+1,X'7A'   HEADER LINE LENGTH
         SR    R0,R0
         C     R0,LOWREC+508
         BNE   SNAP1
         C     R0,LOWREC
         BNE   SNAP1
         MVC   OUTLINE+75(6),=C' SEOF '
         B     SNAP4
SNAP1    CLI   LOWREC+44,C'F'    IS THIS A FREE RECORD?
         BNE   SNAP3             NO, PRINT IT AS NORMAL
         ICM   R0,7,LOWREC+45
         BAL   R14,CONVERT
         MVC   OUTLINE+65(24),=C' FREE RECORD, POINTER = '
         MVC   OUTLINE+89(6),UNPACK+2
SNAP2    L     R0,LOWREC
         BAL   R14,CONVERT
         MVC   OUTLINE+9(8),UNPACK
         LA    R1,OUTLINE
         BAL   R14,WRITE
         B     SNAP5             GO PUT OUT A SPACE LINE
SNAP3    CLC   LOWREC(80),LOWREC+1 IS THIS CI EMPTY????
         BNE   SNAP4
         MVC   OUTLINE+72(21),=C' EMPTY RECORD. CIDF = '
         L     R0,LOWREC+508     GET FULL CIDF VALUE
         BAL   R14,CONVERT
         MVC   OUTLINE+93(8),UNPACK
         B     SNAP2
SNAP4    LA    R1,OUTLINE
         BAL   R14,WRITE
         SR    R5,R5             R5 HAS OFFSET VALUE
         L     R8,SNAPSAVE       R8 WILL HAVE COUNT TO DO
         L     R9,SNAPSAVE+4     R9 POINTS TO CURRENT INPUT DATA
SNAPLOOP LA    R7,OUTLINE+7      R7 HAS CURRENT OUTPUT AREA
         SR    R6,R6             R6 HAS COUNT OF WORDS PROCESSED
         LR    R0,R5
         BAL   R14,CONVERT
         MVC   OUTLINE(4),UNPACK+4
SNAPLOP1 ICM   R0,15,0(R9)       GET DATA
         BAL   R14,CONVERT
         MVC   0(8,R7),UNPACK    MOVE XLATED DATA
         LA    R7,10(R7)         POINT TO NEXT INSERT POINT
         LA    R9,4(R9)          POINT TO NEXT INPUT DATA
         SH    R8,=X'0004'       DONE 4 BYTES
         LA    R6,1(R6)
         CH    R6,=X'0004'       ARE WE INBETWEEN LINES?
         BNE   *+8
         LA    R7,2(R7)          YES, 2 EXTRA SPACES
         LTR   R8,R8             FINISHED THE REQUEST?
         BNP   SNAPOUT
         CH    R6,=X'0008'       END OF A LINE?
         BNE   SNAPLOP1          GET NEXT WORD
SNAPOUT  MVI   OUTLINE+88,C'*'
         L     R10,SNAPSAVE+4    GET ORGINAL REG1
         AR    R10,R5            ADD OFFSET VALUE
         MVC   OUTLINE+89(32),0(R10)
         MVI   XLATE,X'4B'       NEED '.' IN PRINTOUT
         TR    OUTLINE+89(32),XLATE
         MVI   XLATE,X'00'
         MVI   OUTLINE+121,C'*'
SNAPWTR  LA    R1,SNAPLGN        WRITE WILL NEED THE OUTLINE LENGTH
         BAL   R14,WRITE         YES, NEED ONLY TO DO THE WRITE
         LA    R5,32(R5)         INCREASE THE OFFSET VALUE
         LTR   R8,R8
         BP    SNAPNEXT
         LA    R1,SNAPLGN
         BAL   R14,WRITE        PUT OUT A BLANK LINE
SNAP5    TM    STATUS,DISCMD    DISPLAY?
         BO    SNAPEND
         PUT   SYSPRINT,OUTLINE
SNAPEND  NI    STATUS,X'FF'-NOWTO
         LM    R0,R14,SNAPSAVE
         BR    R14               RETURN TO CALLER
SNAPNEXT SR    R4,R4
         ICM   R0,15,0(R9)       SAVE FIRST WORD FOR ZERO MESSAGE
         CLC   0(32,R9),1(R9)    IS NEXT LINE (+1) A DUP LINE?
         BNE   SNAPZERO
         LA    R4,32(R4)         ONE LINE OF DUPS
         LA    R9,32(R9)         POINT TO NEXT LINE
         B     SNAPNEXT+6        AND SEE IF IT IS ALSO A DUP
SNAPZERO LTR   R4,R4             ANY DUP LINES FOUND?
         BZ    SNAPLOOP          NO, PRINT NEXT LINE
         LA    R5,0(R5,R4)       UPDATE THE OFFSET VALUE
         SH    R5,=X'0020'
         SR    R8,R4             UPDATE THE COUNT TO GO VALUE
         MVC   OUTLINE+8(13),=C'LINES CONTAIN'
         BAL   R14,CONVERT       REG 0 ALREADY HAS DUP VALUE
         MVC   OUTLINE+22(8),UNPACK
         B     SNAPWTR
         SPACE 3
**********************************************************************
* PRINT WILL PRINT THE CATALOG INDEX OR A CI OF DATA                 *
**********************************************************************
PRINT    MVC    MSG23+35(7),=C'PRINT. '
         NI     LOWRPL+41,X'FF'-UPD   TURN OFF UPD FOR THE GET
         XC     ASSOC(4),ASSOC   CLEAR THE ASSOC AREA
         XC     LOWREC+505(7),LOWREC+505
         CLI    0(R1),C'P'       IS THIS A PRINT COMMAND?
         BE     *+14
         MVC    MSG23+35(7),=C'DISPLAY'
         OI     STATUS,DISCMD    DISPLAY GOES TO OPERATOR
         LA     R1,MSG23         CI NUMBER OR NAME TO BE PRINTED
         BAL    R14,GETINPUT
         CLI    0(R1),C'E'       END REQUESTED?
         BE     ROUTER
         CLI    0(R1),C'I'       REQUEST CATALOG INDEX PRINT?
         BNE    PRINT0           NO, CHECK ALL REQUEST
         TM     FLAG2,CRAOK      IS THIS A CRA PROCESSING?
         BO     ADD1             YES, HAVE ERROR
         B      PRINTIX
PRINT0   CLI    0(R1),C'A'       ALL REQUEST?
         BNE    PRINT1           NO, GO DO DATA PRINT
         OI     STATUS,PRTALL
         TM     STATUS,DISCMD    DISPLAY COMMAND?
         BZ     PRINTIX          NO, GO DO THE PRINT
         LA     R1,MSG19         CAN DO DISPLAY ALL
         BAL    R14,WRITE
         B      ROUTER
PRINT1   CLI    4(R1),C'*'       SPECIAL PRINT?
         BNE    PRINT1A
         OI     STATUS,PRTBOTH
         MVC    4(44,R1),5(R1)   GET RID OF THE '*'
PRINT1A  BAL    R14,GETCI
         LTR    R15,R15          GET THE CI OK?
         BNZ    ROUTER
         CLI    0(R1),C'D'       ID THIS A DSN GET?
         BNE    PRINT3
         TM     FLAG2,CRAOK
         BO     ADD2
         TM     STATUS,DISCMD    IS THIS A DISPLAY?
         BZ     PRINT2A          NO, DON'T DO SHORT PRINT
         MVI    OUTLINE+1,X'2F'
         MVC    OUTLINE+2(44),HIKEY
         ICM    R0,7,HIKEY+44
         BAL    R14,CONVERT
         TRT    OUTLINE+2(45),TRTABLE2
         MVC    1(6,R1),UNPACK+2
         LA     R1,OUTLINE
         BAL    R14,WRITE
         NI     STATUS,X'FF'-NOWTO
         TM     STATUS,PRTBOTH
         BZ     ROUTER
PRINT2A  OI     STATUS,NOWTO
         ICM    R9,7,HIKEY+44    SAVE THE RECORDS RBA
         MVC    LOWREC(4),HIRPL+64
PRINT2   MVI    LOWREC+3,X'00'   MAKE SURE THE RBA IS ON A CI BOUNDRY
         NI     LOWREC+2,X'FE'
         SR     R0,R0
         LA     R1,LOWRPL
         BAL    R14,REQUEST
         LTR    R15,R15
         BNZ    ROUTER
PRINT3   LA     R0,X'200'
         LA     R1,LOWREC
         BAL    R14,SNAP
         TM     STATUS,PRTALL    IS THIS AN ALL DEAL?
         BO     PRINTALL         YES
         TM     STATUS,PRTBOTH   NEED TO PRINT MORE?
         BZ     ROUTER
         CLI    LOWREC,X'00'     HAVE WE GOTTEN A LOW CI YET?
         BE     PRINT4           YES, TRY ASSOC NEXT
         MH     R9,=X'0200'
         ST     R9,LOWREC
         B      PRINT2
PRINT4   ICM    R15,7,ASSOC      HAVE WE GOT THE ASSOC YET?
         BNZ    *+8              NO, GO FIND THE ASSOC GOP'S
         BAL    R14,FINDGOPS
         CLI    ASSOC,X'FF'      END OF GOP'S?
         BE     PRINT6
         SR     R9,R9
         LH     R9,ASSOC         GET THE NEXT ASSOC
         MVC    ASSOC(178),ASSOC+2
PRINT5   MH     R9,=X'0200'
         ST     R9,LOWREC
         B      PRINT2
PRINT6   XC     ASSOC,ASSOC
         ICM    R9,15,EXTENTON   IS THERE AN EXTENTION POINTER?
         BNZ    PRINT5           YES, DO IT NEXT
         B      ROUTER
PRINTALL C      R10,DHIURBA      END OF DATA?
         BE     ROUTER
         CLC    LOWRPL+64(4),=X'00000600'  IS THIS CI3?
         BNE    PRTALL1
         MVC    WORK3(8),LOWREC+61  GET LK HIU RBA AND LK HIALLOC
PRTALL1  ICM    R8,15,WORK3      DO WE HAVE THE RBA?
         BZ     PRTALL2          NO, MUST NOT HAVE READ IN CI 3 YET
         C      R8,WORK3+4       IS HI KEY AND HI ALL THE SAME?
         BE     PRTALL2          YES, NO SKIPPING TO BE DONE.
         C      R8,LOWRPL+64     AND ARE WE AT THE LK HIUSED RBA?
         BNE    PRTALL2
         L      R10,WORK3+4      YES, JUMP OVER TO HIGH KEY RANGE
PRTALL2  ST     R10,LOWREC
         LA     R10,512(R10)     FOR NEXT DATA RECORD
         B      PRINT2
         SPACE  1
         OI     STATUS,PRTALL
PRINTIX  SR     R10,R10
         MVC    DHIURBA,=X'FFFFFFFF'
         TM     FLAG2,CRAOK
         BO     PRINTALL
         L      R10,CATACB+4     GET AMBL POINTER
         L      R9,56(R10)       THEN THE AMB
         L      R9,20(R9)        THEN THE AMDSB
         MVC    SSRBA(4),32(R9)  SAVE THE RBA OF THE FIRST SS
         L      R10,52(R10)      GET THE DATA AMB
         L      R10,20(R10)      THEN THE AMDSB
         L      R10,36(R10)      THEN THE ARDB
PRINTIX2 TM     1(R10),X'08'     FIND THE EOD ARDB
         BO     *+12
         L      R10,4(R10)       NEXT ARDB
         B      PRINTIX2
         MVC    DHIURBA(4),12(R10) SAVE DATA HIURBA
         SR     R10,R10          R10 WILL HAVE CURRENT RBA VALUE
PRINTIX3 ST     R10,LOWREC
         LA     R1,LOWRPL
         LA     R0,GETIX         DO THE GET INDEX REQUEST
         BAL    R14,REQUEST      GO READ IN THE INDEX
         LA     R1,LOWREC        POINT TO THE RECORD
         LA     R0,512
         BAL    R14,SNAP         PRINT THIS RECORD
         CLI    LOWREC+16,X'01'  IS THIS A SS?
         BNE    PRINTIX4         NO, NOT NEAR DONE YET
         ICM    R10,15,LOWREC+8  YES, GET NEXT SS RBA
         BNZ    PRINTIX3         GO PRINT IT
         TM     STATUS,PRTALL    IS THIS AN ALL PRINT?
         BZ     ROUTER           NO, MUST BE FINISHED
         SR     R10,R10
         B      PRINTALL         GO PRINT THE DATA FOR ALL
PRINTIX4 LA     R10,512(R10)     HIGN LEVEL INDEX, ADD 200 TO RBA
         CLC    LOWREC(4),LOWREC+1
         BNE    PRINTIX3
         L      R10,SSRBA        END OF HIGH LEVEL, DO SS
         B      PRINTIX3
         SPACE 3
**********************************************************************
* ZAP CHANGES EXISTING RECORDS                                       *
**********************************************************************
ZAP      BAL    R14,ENQUE        LOCK UP THE CATALOG
         LA     R1,MSG8          GET CI NUMBER TO BE ZAPPED
         BAL    R14,GETINPUT
         CLI    0(R1),C'E'       WAS END ENTERED?
         BE     ZAPOUT           YES, START OVER
         BAL    R14,GETCI
         LTR    R15,R15
         BNZ    ZAPOUT
         MVC    ASSOC(8),0(R1)   SAVE THE GET TYPE
         LA     R1,MSG9
         BAL    R14,GETINPUT     GET VER
ZAPVER1  CLI    0(R1),C'E'       END REQUESTED?
         BE     ZAPOUT           YES, START OVER
         CLC    4(4,R1),=C'0200' IS VER/REP GREATER THAN CI SIZE?
         BNL    ZAPBAD           YES, CAN'T DO
         XC     PACKIN,PACKIN
         MVC    PACKIN(4),4(R1)  MOVE VER ADDRESS
         BAL    R14,PACK
         LH     R9,PACKIN        R9 WILL POINT TO CI DATA
         STH    R9,PASSWORD      REMEMBER THE OFFSET
         LA     R9,LOWREC(R9)
         SR     R8,R8            WORK REG
         MVC    ASSOC+40(20),9(R1) GET THE ZAP DATA
         L      R1,WORK2
         LA     R1,9(R1)
         ST     R1,WORK2         UPDATE THE CURRENT COMMAND POINTER
         LA     R1,ASSOC+40
         CLI    4(R1),C','       FOLLOWING CODE REMOVES COMAS
         BNE    ZAPVER2
         MVC    4(15,R1),5(R1)
         CLI    8(R1),C','
         BNE    ZAPVER2
         MVC    8(9,R1),9(R1)
         CLI    12(R1),C','
         BNE    ZAPVER2
         MVC    12(4,R1),13(R1)
ZAPVER2  LR     R7,R1            SAVE REG 1
         TRT    0(24,R7),TRTABLE2
         LR     R8,R1
         LR     R1,R7
         SR     R8,R7
         SRL    R8,1             R8 HAS PACKED VER/REP DATA LENGTH
         MVC    PACKIN,0(R1)     COMPRESS 1ST HALF OF VER DATA
         BAL    R14,PACK
         XC     ZAPDATA(8),ZAPDATA
         MVC    ZAPDATA(4),PACKIN
         MVC    PACKIN,8(R1)     COMPRESS 2ND HALF OF DATA
         BAL    R14,PACK
         MVC    ZAPDATA+4(4),PACKIN
ZAPVER4  TM     STATUS,REP       ARE WE DOING THE REP?
         BO     ZAPREP1
         BCTR   R8,R0
         EX     R8,COMPARE       COMPARE VER DATA WITH CI DATA
         BE     VEROK            VEROK, GO TRY REP FUNCTION
         MVC    OUTLINE+2(27),MSG10
         ICM    R0,15,0(R9)      GET CI DATA
         BAL    R14,CONVERT
         MVC    OUTLINE+30(8),UNPACK
         ICM    R0,15,4(R9)
         BAL    R14,CONVERT
         MVC    OUTLINE+38(8),UNPACK
         LA     R1,OUTLINE
         MVI    OUTLINE+1,36     LENGTH IS VER DATA LENGTH +MSG
         BAL    R14,WRITE        TELL USER THE VER FAILED
         B      ZAPOUT           END COMMAND.  TRY NEXT
COMPARE  CLC    0(0,R9),ZAPDATA
VEROK    LA     R1,MSG11
         BAL    R14,GETINPUT
* NOW DO THE REP
ZAPREP   OI     STATUS,REP       USE VER CODE TO PACK REP DATA
         B      ZAPVER1
ZAPREP1  NI     STATUS,X'FF'-REP
         BCTR   R8,R0
         MVC    TRACK+8(8),0(R9)
         EX     R8,MOVE5         MOVE REP DATA TO CI
         CLI    ASSOC,C'C'       WAS THIS A CI= ZAP?
         BNE    *+8              NO, DO A CNV PUT
         MVI    LOWRPL+41,KEY+UPD YES, DO A KEY PUT
         CLI    ASSOC,C'R'       DO WE NEED TO RE-DO THE RBA
         BNE    ZAPREP2
         LA     R1,LOWRBA        YES WE DO
         ST     R1,LOWRPL+36     SET THE NEW KEY POINTER
         MVC    LOWRBA(4),LOWRPL+64
ZAPREP2  LA     R0,PUT
         LA     R1,LOWRPL
         BAL    R14,REQUEST
         MVI    LOWRPL+41,CNV+UPD
         MVC    LOWRPL+36(4),LOWRPL+32
         LTR    R15,R15
         BNZ    ZAPOUT
         MVC    TRACK(3),=C'ZAP'
         MVC    TRACK+3(3),LOWREC+1
         CLI    LOWREC,X'00'
         BE     *+10
         MVC    TRACK+2(4),LOWRPL+64
         LA     R8,LOWREC
         SR     R9,R8
         STCM   R9,3,TRACK+6     SAVE OFFSET FOR TRACKING DATA
         BAL    R14,CCRCHKPT     GO UPDATE THE CCR RECORD
ZAPOUT   BAL    R14,DEQUE
         B      ROUTER
ZAPBAD   LA     R1,MSG5
         BAL    R14,WRITE
         B      ZAPOUT
MOVE5    MVC    0(0,R9),ZAPDATA
         SPACE 3
ADD1     LA    R1,MSG48
         BAL   R14,WRITE
         B     ROUTER
ADD2     LA    R1,LOWRPL
         LA    R0,ENDREQ
         BAL   R14,REQUEST
         LA    R1,MSG4
         BAL   R14,GETINPUT      GET NAME AND CI NUMBER TO BE ADDED
         XC    HIKEY,HIKEY
         CLI   3(R1),C'='
         BNE   *+8
         LA    R1,4(R1)
         LA    R5,X'40'
         CLC   0(3,R1),=C'(V)'   IS THIS A VOL SERIAL ADD?
         BNE   ADD0
         SR    R5,R5
         LA    R1,3(R1)
ADD0     LR    R7,R1             SAVE INPUT POINTER ACROSS TRT
         TRT   0(45,R7),TRTABLE2 FIND END OF NAME
         SR    R1,R7             R1 NOW HAS NAME LENGTH
         SR    R4,R4             SET UP FOR MVCL
         SLL   R5,24
         LA    R3,44             NUMBER OF X'40' NEEDED
         LA    R2,HIKEY
         MVCL  R2,R4
         BCTR  R1,R0             SET LENGTH FOR MVC
         EX    R1,MOVE7
         AR    R1,R7             POINT TO CI NUMBER TO BE ADDED
         CLI   4(R1),C'='        DID HE ENTER CI=?
         BNE   *+8
         LA    R1,3(R1)          YES, JUMP OVER IT
         LA    R7,2(R1)
         TRT   0(7,R7),TRTABLE2  FIND END OF CI NUMBER
         BE    ADDBAD
         CR    R7,R1             WERE ANY BYTES XLATED?
         BE    ADDBAD
         SR    R1,R7             R1 NOW HAS THE CI NUMBER LENGTH
         BCTR  R1,R0
         EX    R1,MOVE9
         BAL   R14,PACK
         L     R2,PACKIN
         LH    R3,INLENGTH
         SRL   R2,0(R3)
         STCM  R2,7,HIKEY+44     SET THE CI NUMBER
         MVI   HIRPL+17,X'2C'    SET KEY LENGTH
         LA    R0,PUT            PUT KEY REQUEST
         LA    R1,HIRPL
         BAL   R14,REQUEST
         MVI   HIRPL+17,X'04'    RESTORE THE KEY LENGTH
         LTR   R15,R15
         BNZ   ADDBAD
         MVI   TRACK,C'+'
         STCM  R2,7,TRACK+1
         MVC   TRACK+4(12),HIKEY
         BAL   R14,CCRCHKPT
         B     ROUTER
ADDBAD   LA    R1,MSG13
         BAL   R14,WRITE
         B     ROUTER
MOVE7    MVC   HIKEY(0),0(R7)
MOVE9    MVC   PACKIN(0),0(R7)
         EJECT
**********************************************************************
*
**********************************************************************
PUNCH    TM    FLAG2,CRAOK       IS THE A CRA COMMAND?
         BO    ADD1
         OI    STATUS,NRFOK      CLEAN START
         MVI   FLAG1,X'00'
         MVI   FLAG2,X'00'
         OPEN  (SYSPUNCH,OUTPUT)
         LA    R1,MSG7           GET THE PUNCH OPTIONS
         BAL   R14,GETINPUT
         LA    R3,8
         MVC   TYPES(8),=CL8' '  LOAD TYPES FIELD WITH 40'S
PUN1     CLC   0(3,R1),=C'ALL'   WANT ALL PUNCHED?
         BNE   PUN2
         MVC   TYPES(8),=C'BAX     '  ALL OPTIONS = CGRBAXV
         B     PUN4
PUN2     LA    R2,TYPES
         CLI   0(R1),C'C'        WANT CLUSTER EXPORT?
         BNE   *+12
         MVI   0(R2),C'C'
         B     PUN3
         CLI   0(R1),C'G'        WANT AN AIX DEFINE
         BNE   *+12
         MVI   0(R2),C'G'
         B     PUN3
         CLI   0(R1),C'R'        WANT PATH DEFINE?
         BNE   *+12
         MVI   0(R2),C'R'
         B     PUN3
         CLI   0(R1),C'B'        CALLER WANT GDG DEFINE?
         BNE   *+12
         MVI   0(R2),C'B'
         B     PUN3
         CLI   0(R1),C'A'        WANT NON-VSAM DEFINE?
         BNE   *+12
         MVI   0(R2),C'A'
         B     PUN3
         CLI   0(R1),C'X'        WANT AN ALIAS RECORD?
         BNE   *+12
         MVI   0(R2),C'X'
         B     PUN3
         CLI   0(R1),C'V'        WANT SPACE RECORD?
         BNE   PUN3
         MVI   0(R2),C'V'
PUN3     LA    R1,1(R1)          POINT TO NEXT INPUT RECORD
         LA    R2,1(R2)          NEXT TYPES FIELD POINTER
         TM    0(R1),X'BF'       END OF THE INPUT?
         BZ    PUN4              YES, PUT IN DELIMETER
         BCT   R3,PUN1
PUN4     XC    LOWREC(44),LOWREC
         MVI   LOWREC+3,X'09'
         MVI   LOWRPL+41,KEY     MUST DO KEYED GETS
         MVI   LOWRPL+40,KGE+GEN+DIR  NEED KGE
PUNGET   MVI   FLAG1,X'00'       TURN OFF ALL CONTROL FLAGS
         SR    R0,R0
         L     R2,LOWREC
         LA    R2,1(R2)
         ST    R2,LOWREC         INCREASE KEY FOR NEXT RECORD
         LA    R1,LOWRPL
         BAL   R14,REQUEST       READ IN NEXT LOWKEY RECORD
         LTR   R15,R15
         BNZ   PUNOUT
         CLI   LOWREC,X'00'      DID WE READ IN A LOW KEY?
         BE    PUN5              YES, SEE IF WE CAN USE IT
         MVC   TYPES(7),TYPES+1  SHIFT THE RECORD TYPES TO DO
         CLI   TYPES,X'40'       END OF LIST?
         BE    PUNOUT            YES, WE ARE DONE
         B     PUN4              NO, START OVER AGAIN
PUN5     CLC   LOWREC+44(1),TYPES  IS THE RECORD TYPE DESIRED?
         BNE   PUNGET            NO, GET NEXT RECORD
         CLI   LOWREC+44,C'A'    NEED TO PUNCH A NON VSAM RECORD?
         BE    PNON
         CLI   LOWREC+44,C'B'    NEED TO PUNCH A GDG RECORD?
         BE    PGDG
         CLI   LOWREC+44,C'C'    NEED TO PUNCH A CLUSTER RECORD?
         BE    PCLUSTER
         CLI   LOWREC+44,C'G'    NEED TO PUNCH A AIX RECORD?
         BE    PAIX
         CLI   LOWREC+44,C'R'    NEED TO PUNCH A PATH RECORD?
         BE    PPATH
         CLI   LOWREC+44,C'X'    NEED TO PUNCH A ALIAS RECORD?
         BE    PALIAS
         CLI   LOWREC+44,C'V'    NEED TO PUNCH A SPACE RECORD?
         BE    PVOL
         B     PUNGET            NONE OF THE ABOVE, GET NEXT RECORD
         SPACE
PNON     MVI   OUTLINE,X'40'     CLEAR OUTLINE WITH BLANKS
         MVC   OUTLINE+1(124),OUTLINE
         MVC   OUTLINE+2(15),=C'DEF NVSAM(NAME('
         MVC   OUTLINE+17(44),LOWREC+49
         TRT   OUTLINE+17(45),TRTABLE2
         MVI   0(R1),C')'
         CLI   LOWREC+93,X'FF'    ANY OWNER ID?
         BE    PNONTOD            NO, TRY EXPIRATION DATE
         CLI   LOWREC+93,C' '     COULD BE BLANK
         BE    PNONTOD            BLANK, TRY EXPIRATION DATE
         MVC   2(6,R1),=C'OWNER('
         MVC   8(8,R1),LOWREC+93
         MVI   16(R1),C')'
         LA    R1,18(R1)
PNONTOD  MVI   1(R1),C'-'
         CLI   LOWREC+104,X'00'    ANY EXPIRATION DATE?
         BE    PNONFST             NO, PUNCH FIRST CARD
         MVC   1(3,R1),=C'TO('
         ICM   R0,7,LOWREC+104
         BAL   R14,CONVERT
         MVC   4(5,R1),UNPACK+2
         MVC   9(2,R1),=C')-'
PNONFST  BAL   R10,PUNCHIT         PUNCH OUT THE FIRST CARD
         MVC   OUTLINE+6(5),=C'DEVT('
         MVI   FLAG1,DTYPE
PNON1    LA    R2,OUTLINE+12       CURRENT POINT ON THE CARD
         BAL   R14,FGOPS1          FIND GOP INFO
*
*R8= ->1ST GOP, R7=# OF GOPS(+1), R5 -> END OF GOPS.
*
PNON2    TM    3(R8),X'83'        EXTERNAL GO?
         BO    PPROB
         CLI   3(R8),X'03'        VOL GOP?
         BNE   PNONEXT1
         ICM   R6,7,0(R8)         GET OFFSET
         AR    R6,R5              POINT TO GO
         TM    FLAG1,DTYPE        ARE WE DOING DEV TYPE?
         BZ    PNONVOL
         CLI   13(R6),X'00'       ANY FSN?
         BE    *+8
         OI    FLAG1,PFSN         YES, REMEMBER TO DO THEN LATER
         CLI   4(R6),X'20'        IS THIS A DISK?
         BNE   PNONTAPE           NO, TRY TAPE
         CLI   5(R6),X'08'        2314?
         BNE   PNT3330
         MVC   0(4,R2),=C'2314'
         B     PNONEXT            DO THE NEXT GOP
PNT3330  CLI   5(R6),X'09'        3330-1?
         BNE   PNT3331
         MVC   0(4,R2),=C'3330'
         B     PNONEXT
PNT3331  CLI   5(R6),X'0D'        OR A 3330-11?
         BNE   PNT3340
         MVC   0(6,R2),=C'3330-1'
         LA    R2,2(R2)
         B     PNONEXT            DO THE NEXT GOP
PNT3340  CLI   5(R6),X'0A'        IS THIS A 3340?
         BNE   PNT3350            NO, HAVE A PROBLEM.
         MVC   0(4,R2),=C'3340'
         B     PNONEXT            DO THE NEXT GOP
PNT3350  CLI   5(R6),X'0B'        IS THIS A 3350?
         BNE   PNT2305
         MVC   0(4,R2),=C'3350'
         B     PNONEXT
PNT2305  MVC   0(4,R2),=C'2305'
         CLI   5(R6),X'06'        2305-1?
         BE    PNONEXT            YES, FINISHED
         CLI   5(R6),X'07'        2305-2?
         BNE   PPROB              NO, TROUBLES
         MVC   4(2,R2),=C'-2'
         LA    R2,2(R2)
         B     PNONEXT
PNONTAPE CLI   4(R6),X'80'        IS THIS A TAPE?
         BNE   PPROB              NO, DON'T KNOW WHAT THE DEVTYPE IS.
         MVC   0(5,R2),=C'2400 '
         CLI   5(R6),X'01'        TAPE A 2400?
         BE    PTAPE1             YES, DO NEXT GOP
         MVC   0(5,R2),=C'3400 '
         CLI   5(R6),X'03'        TAPE A 3400?
         BNE   PPROB              NO, I DON'T KNOW WHAT TYPE IT IS
PTAPE1   CLC   2(2,R6),=X'3080'   IS THIS A -1 ?
         BNE   *+12
         MVI   5(R2),C'1'
         B     PTAPE4
         CLC   2(2,R6),=X'30C0'   IS THIS A -2 ?
         BNE   *+12
         MVI   5(R2),C'2'
         B     PTAPE4
         CLC   2(2,R6),=X'3420'   IS THIS A -4 ?
         BNE   *+12
         MVI   5(R2),C'4'
         B     PTAPE4
         CLC   2(2,R6),=X'3200'   IS THIS A -5 ?
         BNE   *+12
         MVI   5(R2),C'5'
         B     PTAPE4
         CLC   2(2,R6),=X'3210'   IS THIS A -6 ?
         BNE   PNONEXT            NO, MUST BE A -3 (DEFAULT)
         MVI   5(R2),C'6'
PTAPE4   MVI   4(R2),C'-'
         LA    R2,2(R2)
         B     PNONEXT            GO DO NEXT GOP
PNONVOL  TM    FLAG1,PVOLFLG      ARE WE DOING VOLUME SERIALS NUMBERS?
         BZ    PNONFSN            NO, MUST BE FILE SEQUENCE NUMBERS
         MVC   0(6,R2),6(R6)      MOVE IN VOL SERIAL NUMBER
         B     PNONEXT            DO NEXT GOP
PNONFSN  SR    R0,R0
         ICM   R0,3,12(R6)        GET THE VOL SEQUENCE NUMBER
         BAL   R14,CVD            CONVERT THIS DATA TO DECIMAL
         LA    R9,3
         CLI   UNPACK+4,X'F0'     FIND START OF DATA
         BNE   PNONFSN1
         LA    R9,2
         CLI   UNPACK+5,X'F0'
         BNE   PNONFSN1
         LA    R9,1
         CLI   UNPACK+6,X'F0'
         BNE   PNONFSN1
         SR    R9,R9
PNONFSN1 LA    R10,UNPACK+7
         SR    R10,R9
         EX    R9,MOVE6
         AR    R2,R9
         B     PNONEXT1-4
MOVE6    MVC   0(0,R2),0(R10)     MOVE CONVERTED FSN TO CARD
MOVE8    MVC   6(0,R1),0(R10)     MOVE LIMIT NUMBER TO CARD
PNONEXT  LA    R2,5(R2)
         TM    FLAG1,DTYPE
         BO    PNONEXT1
         LA    R2,2(R2)           R2 = NEXT CARD POINT
PNONEXT1 LA    R3,OUTLINE+63
         AH    R8,GOPSIZE         R8 = NEXT GOP
         CR    R2,R3              END OF CARD?
         BL    PNONEXT2           NO, CONTINUE
         MVI   1(R2),C'+'         SET CONTINUATION CHARACTER
         BAL   R10,PUNCHIT
         MVI   OUTLINE,X'40'      CLEAR THE OUTLINE
         MVC   OUTLINE+1(124),OUTLINE
         LA    R2,OUTLINE+12
PNONEXT2 BCT   R7,PNON2           DO NEXT OF THIS TYPE
         MVC   0(2,R2),=C')-'
         TM    FLAG1,DTYPE        WERE WE DOING THE DEV TYPE?
         BZ    PNONEXT3           NO, MUST BE THE VOL SERIAL
         BAL   R10,PUNCHIT
         XI    FLAG1,PVOLFLG+DTYPE  TURN ON VOL AND OFF DTYPE
         MVC   OUTLINE+6(5),=C'VOL ('
         B     PNON1
PNONEXT3 TM    FLAG1,PFSN         ANY FSN'S TO DO?
         BO    *+8                YES, GO PUNCH THIS CARD
         MVI   1(R2),C')'         LAST OF THIS DATA SET
         BAL   R10,PUNCHIT
         TM    FLAG1,PFSN
         BZ    PUNGET             GO DO NEXT RECORD
         MVC   OUTLINE+6(6),=C'FSEQN('
         MVI   FLAG1,X'00'        RESET CONTROL FLAGS
         B     PNON1              SET BACK UP AT FIRST GOP
         SPACE
PGDG     MVI   OUTLINE,X'40'
         MVC   OUTLINE+1(124),OUTLINE
         MVC   OUTLINE+2(13),=C'DEF GDG(NAME('
         MVC   OUTLINE+15(44),LOWREC+49
         TRT   OUTLINE+15(45),TRTABLE2
         MVI   0(R1),C')'
         CLI   LOWREC+93,X'FF'    ANY OWNER ID?
         BE    PGDGTOD            NO, TRY EXPIRATION DATE
         CLI   LOWREC+93,X'40'    COULD BE BLANK
         BE    PGDGTOD
         MVC   2(6,R1),=C'OWNER('
         MVC   8(8,R1),LOWREC+93
         MVI   16(R1),C')'
         LA    R1,16(R1)
PGDGTOD  LA    R1,2(R1)
         CLI   LOWREC+104,X'00'    ANY EXPIRATION DATE?
         BE    PGDGFST             NO, PUNCH FIRST CARD
         MVC   0(3,R1),=C'TO('
         ICM   R0,7,LOWREC+104
         BAL   R14,CONVERT
         MVC   3(5,R1),UNPACK+2
         MVI   8(R1),C')'        SET END OF NAME
         LA    R1,10(R1)
PGDGFST  MVC   0(6,R1),=C'LIMIT('
         SR    R0,R0
         IC    R0,LOWREC+107     GET HEX LIMIT VALUE
         BAL   R14,CVD           CONVERT THIS DATA TO DECIMAL
         LA    R9,2              NOW FIND START OF DATA
         CLI   UNPACK+5,X'F0'
         BNE   PGDGLMT
         LA    R9,1
         CLI   UNPACK+6,X'F0'
         BNE   PGDGLMT
         SR    R9,R9
PGDGLMT  LA    R10,UNPACK+7      FOUND START OF DATA
         SR    R10,R9
         EX    R9,MOVE8
         AR    R1,R9
         MVI   7(R1),C')'
         LA    R1,8(R1)          UP THE CURRENT CARD POINTER
         TM    LOWREC+108,X'80'  WAS EMPTY SPECIFIED?
         BZ    PGDGSCR
         MVC   1(5,R1),=C'EMPTY'
         LA    R1,6(R1)
PGDGSCR  TM    LOWREC+108,X'40'  WAS SCRATCH SPECIFIED?
         BZ    PGDGEND           NO, GO PUNCH THE CARD
         MVC   1(3,R1),=C'SCR'
         LA    R1,5(R1)
PGDGEND  MVI   2(R1),C')'        END OF GDG DEFINE CARD
         BAL   R10,PUNCHIT
         B     PUNGET
         SPACE
PALIAS   MVI   OUTLINE,X'40'     CLEAR OUTLINE
         MVC   OUTLINE+1(124),OUTLINE
         MVC   OUTLINE+2(15),=C'DEF ALIAS(NAME('
         MVC   OUTLINE+17(44),LOWREC+49
         TRT   OUTLINE+17(45),TRTABLE2    FIND END OF NAME
         MVC   0(2,R1),=C')-'    SET END OF FIRST CARD
         BAL   R10,PUNCHIT
         MVC   KEYSAVE,LOWREC    SAVE THIS CI'S KEY
         SR    R0,R0
         ICM   R1,7,LOWREC+122   GET THE NONVSAM REC'S KEY
         ST    R1,LOWREC
         LA    R1,LOWRPL
         BAL   R14,REQUEST
         MVC   LOWREC(4),KEYSAVE RESTORE THE OLD CI'S KEY
         LTR   R15,R15           GET WORK OK?
         BNZ   PPROB
         MVC   OUTLINE+6(7),=C'RELATE('
         MVC   OUTLINE+13(44),LOWREC+49
         TRT   OUTLINE+13(45),TRTABLE2
         MVC   0(2,R1),=C'))'    SET END OF CARD
         BAL   R10,PUNCHIT
         B     PUNGET            GO DO NEXT RECORD
PVOL     B     PUNGET
PCLUSTER B     PUNGET
PAIX     B     PUNGET
PPATH    B     PUNGET
PUNCHIT  PUT   SYSPRINT,OUTLINE
PUNCHIT2 PUT   SYSPUNCH,OUTLINE
         MVI   OUTLINE,X'40'     CLEAR OUTLINE FOR NEXT PUNCH
         MVC   OUTLINE+1(80),OUTLINE
         BR    R10               DONE PUNCHED A CARD
PPROB    LA    R1,MSG26
         BAL   R14,WRITE
         MVI   OUTLINE+6,C')'
         MVC   OUTLINE+8(50),STARS
         MVC   OUTLINE+47(34),=C' PROBLEM ---- DO IT YOURSELF *****'
         BAL   R10,PUNCHIT2
         B     PUNGET
PUNOUT   CLOSE SYSPUNCH
         B     ROUTER
         EJECT
**********************************************************************
* MAP PRINTS THE STATUS OF EACH CI.                                  *
**********************************************************************
MAP      TM    FLAG2,CRAOK       WANT MAP OF CRA?
         BNZ   ADD1
         LA    R1,SNAPLGN        FIRST, PRINT HEADER LINE
         MVC   OUTLINE(80),STARS
         BAL   R14,WRITE
         XC    UNPACK,UNPACK
         LA    R1,66
         SVC   11
         LR    R0,R1             GET THE DATE
         BAL   R14,CONVERT
         MVC   OUTLINE+60(6),=C'DATE ='
         MVC   OUTLINE+67(2),UNPACK+2
         MVI   OUTLINE+69,C'.'
         MVC   OUTLINE+70(3),UNPACK+4
         MVI   OUTLINE,C'*'
         MVI   OUTLINE+79,C'*'
         LA    R1,SNAPLGN
         BAL   R14,WRITE
         XC    LOWREC(255),LOWREC
         MVI   LOWREC+2,X'06'    SET KEY TO X'600'ECORD
         LA    R1,LOWRPL
         SR    R0,R0
         BAL   R14,REQUEST       READ IN THE CCR RECORD
         LTR   R15,R15
         BNZ   ROUTER
         MVC   OUTLINE+4(L'MSG27),MSG27
         MVC   OUTLINE+56(10),=C'MOD DATE ='
         L     R0,LOWREC+492
         BAL   R14,CONVERT
         MVC   OUTLINE+67(2),UNPACK+3
         MVI   OUTLINE+69,C'.'
         MVC   OUTLINE+70(3),UNPACK+5
         MVI   OUTLINE,C'*'
         MVI   OUTLINE+79,C'*'
         LA    R1,SNAPLGN
         BAL   R14,WRITE
         MVC   OUTLINE+8(L'MSG28),MSG28
         ICM   R0,7,LOWREC+45
         BAL   R10,MAP10         PRINT THE HI ALLOC RBA
         MVC   OUTLINE+8(L'MSG29),MSG29
         ICM   R0,7,LOWREC+48
         BAL   R10,MAP10         PRINT THE HI USED RBA
         MVC   OUTLINE+8(L'MSG30),MSG30
         ICM   R0,7,LOWREC+51
         BAL   R10,MAP10         PRINT THE FREE CI COUNT
MAP1     MVI   HIKEY,X'40'
         MVI   HIRPL+40,DIR+KGE+GEN
         LA    R0,POINT
         LA    R1,HIRPL
         BAL   R14,REQUEST
         LTR   R15,R15
         BNZ   ROUTER
         MVI   HIRPL+40,DIR+GEN
         L     R8,HIRPL+4        GET PLH ADDRESS
         L     R8,188(R8)        GET INDEX BUFFC ADDRESS
         MVC   SSRBA(4),8(R8)    SAVE RBA OF HI LEVEL SS
         L     R8,CATACB+4       NOW GET HI DATA RBA
         L     R8,52(R8)         GET D-AMB
         L     R8,20(R8)         GET AMDSB
         MVC   WORK1(2),12(R8)
         L     R8,36(R8)         GET ARDB
         TM    1(R8),X'08'       IS THIS THE EOD ARDB?
         BO    *+12
         L     R8,4(R8)
         B     *-16
         MVC   DHIURBA(4),16(R8) SAVE HI ALLOCATED RBA
         MVC   KEYSAVE,HIRPL+64  SAVE RBA OF FIRST HI DATA RECORD
         L     R8,CATACB+4       GET AMBL
         L     R8,56(R8)         GET I-AMB
         L     R8,20(R8)         GET AMDSB
         MVC   LOWREC(4),32(R8)  SET 1ST SS RBA
         SR    R9,R9             LOW CA COUNT
         SR    R8,R8             LOW CI UNUSED COUNT
         SR    R7,R7             HI CA COUNT
         SR    R6,R6             HI CI UNUSED COUNT
         MVI   LOWRPL+40,DIR
MAP2     SR    R5,R5
         LA    R0,GETIX
         LA    R1,LOWRPL
         BAL   R14,REQUEST       READ IN A INDEX RECORD
         LTR   R15,R15
         BNZ   MAP5
         LH    R5,LOWREC+18      GET THE FREE CI COUNT
         SH    R5,=X'0018'
         TM    FLAG1,HILEVEL     ARE WE DOING HIGH LEVEL SS YET?
         BO    MAP3
* LOOKING AT LOW LEVEL SS
         AR    R8,R5
         LA    R9,1(R9)
         B     MAP4
MAP3     AR    R6,R5
         LA    R7,1(R7)
MAP4     CLC   LOWREC+8(4),SSRBA
         BNE   *+8
         OI    FLAG1,HILEVEL
         ICM   R5,15,LOWREC+8
         ST    R5,LOWREC
         BNZ   MAP2              GO READ IN THE NEXT INDEX RECORD
* NOW HAVE READ IN ALL THE INDEX RECORDS
         MVC   OUTLINE+8(L'MSG34),MSG34
         LR    R0,R8
         BAL   R10,MAP10
         MVC   OUTLINE+8(L'MSG32),MSG32
         LR    R0,R9
         BAL   R10,MAP10
         MVC   OUTLINE+4(L'MSG40),MSG40
         BAL   R10,MAP11
         MVC   OUTLINE+8(L'MSG33),MSG33
         LR    R0,R7
         BAL   R10,MAP10
         MVC   OUTLINE+8(L'MSG34),MSG34
         LR    R0,R6
         BAL   R10,MAP10
         MVC   LOWREC(4),KEYSAVE RESTORE 1ST HI CI RBA
MAP5     NI    FLAG1,X'FF'-HILEVEL
         SR    R3,R3             WORK REG
         SR    R4,R4             CI COUNT
         SR    R5,R5             FREE SPACE COUNT
         SR    R7,R7             COUNT USED BUT EMPTY CI'S
         SR    R8,R8             USED SPACE COUNT
         SR    R9,R9
MAP6     LH    R9,WORK1          GET COUNT OF CI'S PER CA
         ICM   R2,15,SSRBA       GET POINTER TO SS SET
         BZ    MAP9
         ST    R2,LOWREC
         LA    R0,GETIX
         LA    R1,LOWRPL
         BAL   R14,REQUEST
         LTR   R15,R15
         BNZ   MAP9
         MVC   LOWREC(4),LOWREC+4  GET DATA RBA
         MVC   SSRBA(4),LOWREC+8   GET NEXT SS
MAP7     SR    R0,R0             DATA GET REQUEST
         LA    R1,LOWRPL
         BAL   R14,REQUEST       GET THE DATA CI
         LTR   R15,R15
         BNZ   MAP9
         LA    R7,1(R7)          POSSIABLE COUNT OF NOT USED CI'S
         ICM   R3,3,LOWREC+508   ANY USED SPACE IN THE CI?
         BZ    MAP8
         AR    R8,R3
         AH    R5,LOWREC+510
         BCTR  R7,R0             REDUCE COUNT OF NOT USED CI'S
MAP8     LA    R4,1(R4)          COUNT OF CI'S
         L     R2,LOWRPL+64
         LA    R2,512(R2)
         ST    R2,LOWREC
         BCT   R9,MAP7           DO FOR COUNT OF CI IN A CA
         B     MAP6              END OF CA, TRY NEXT CA
MAP9     LR    R0,R4
         MVC   OUTLINE+8(L'MSG37),MSG37
         BAL   R10,MAP10
         LR    R0,R8             NOW DO USED SPACE
         MVC   OUTLINE+8(L'MSG36),MSG36
         BAL   R10,MAP10
         LR    R0,R5             NOW DO FREE SPACE
         MVC   OUTLINE+8(L'MSG35),MSG35
         BAL   R10,MAP10
         MVC   OUTLINE+8(L'MSG38),MSG38
         SR    R7,R6
         LR    R0,R7
         BAL   R10,MAP10
         NI    STATUS,X'FF'-NRFOK
         MVC   OUTLINE(80),STARS
         BAL   R10,MAP11
         B     ROUTER            ASSUMED END
MAP10    LR    R1,R0             SAVE THE INPUT REG
         BAL   R14,CVD
         MVC   OUTLINE+40(6),UNPACK+2
         LR    R0,R1
         BAL   R14,CONVERT
         MVI   OUTLINE+38,C'='
         MVI   OUTLINE+48,C'('
         MVC   OUTLINE+49(6),UNPACK+2
         MVI   OUTLINE+55,C')'
MAP11    MVI   OUTLINE,C'*'
         MVI   OUTLINE+79,C'*'
         LA    R1,SNAPLGN
         BAL   R14,WRITE
         BR    R10               RETURN TO CALLER
***********************************************************************
***********************************************************************
         EJECT
**********************************************************************
* DELETE ERASES RECORDS FROM THE CATATLOG.  IF 'DSN=' INPUTTED, A    *
* TRUE NAME RECORD IS ERASED.  IF 'CI=' OR A 3 BYTE NUMBER IS GIVEN, *
* A LOW KEY RECORD IS ZEROED OUT AND PLACED ON THE FREE CHAIN.  LOW  *
* RECORDS 0 THRU F CAN NOT BE DELETED.                               *
**********************************************************************
DELETE   LA    R1,MSG14           POINT TO DELETE MSG
         BAL   R14,GETINPUT
         CLI   0(R1),C'E'         REQUEST END?
         BE    DELOUT
         LR    R5,R1              SAVE R1 ACCROSS THE ENQUE
         BAL   R14,ENQUE          LOCK UP THE CATALOG
         LR    R1,R5
         MVI   HIRPL+41,UPD+KEY   THIS MAY REQUIRE A HI-UPD GET.
         BAL   R14,GETCI
         LTR   R15,R15
         BNZ   DELFAIL1
         CLI   0(R1),C'R'         RBA DELETE?
         BE    DELLOW
         CLI   0(R1),C'C'         CI DELELTE?
         BE    DELLOW             YES IF = IN COLUMN 2
         CLI   0(R1),C'D'         SHOULD BE 'DSN=PARKER'
         BNE   DELETE
         TM    SYSIN+48,X'10'     CAN I CONFIRM THE DELETE?
         BZ    DELCFIRM           YES, GO DO IT
         TRT   HIKEY(45),TRTABLE2
         LA    R6,HIKEY
DEL2     SR    R1,R6
         BCTR  R1,R0              R1 HAS LENGTH
         EX    R1,COMPARE1
         BNE   DELFAIL2
         B     DELOK
DELCFIRM MVC   OUTLINE+2(47),HIKEY
         LA    R5,OUTLINE+2
         TRT   0(45,R5),TRTABLE2  LOOK FOR END OF RETRIVED RECORD
         MVC   9(25,R1),=C'KEY TO BE ERASED. YES/NO?'
         ICM   R0,7,HIKEY+44      GET THE CI NUMBER
         BAL   R14,CONVERT
         MVC   1(6,R1),UNPACK+2   MOVE KEY TO MESSAGE
         SR    R1,R5              R1 NOW HAS OFFSET TO END OF KEY
         LA    R1,38(R1)
         STH   R1,OUTLINE         STORE MESSAGE LENGTH
         LA    R1,OUTLINE
         BAL   R14,PROMPT
         CLI   0(R1),C'Y'
         BNE   DELFAIL3          USER OK'ED, GO ERASE IT
DELOK    LA    R0,ERASE
         LA    R1,HIRPL
         BAL   R14,REQUEST
         LTR   R15,R15
         BNZ   DELFAIL1
         MVI   TRACK,C'-'        SET UP THE CCR TRACKING RECORD
         MVC   TRACK+13(3),HIKEY+44  GET THE DELETED CI NUMBER
         MVC   TRACK+1(12),HIKEY  GET THE NAME
         BAL   R14,CCRCHKPT
         LA    R1,MSG17           TELL USER IT'S DONE
         ICM   R0,7,HIKEY+44      GET OLD CI NUMBER
         BAL   R14,CONVERT
         MVC   MSG17X+36(6),UNPACK+2
         BAL   R14,WRITE
DELOUT   BAL   R14,DEQUE
         MVC   LOWRPL+36(4),LOWRPL+32
         NI    HIRPL+41,X'FF'-UPD
         LA    R1,HIRPL           ERASE MAY HAVE LEFT HIRPL LOCKED
         LA    R0,ENDREQ
         BAL   R14,REQUEST
         B     ROUTER
*
DELLOW   CLC   LOWRPL+64(4),=X'00001800'
         BNH   DELFAIL4           TRYING TO DELETE A PROTECTED CI
         TM    SYSIN+48,X'10'     SYSIN BEING USED?
         BZ    DELCFML            NO, COMFIRM DELETE WITH WTOR'S
         BAL   R14,GETINPUT       GO GET RECORD TYPE
         CLI   0(R1),C'T'         WAS THE KEYWORD TYPE USED?
         BNE   *+8
         LA    R1,5(R1)
         MVC   MSG44X+39(1),LOWREC+44
         MVC   MSG44X+46(1),0(R1)
         CLC   0(1,R1),LOWREC+44  IS RECORD TYPE SAME AS REQUESTED?
         BNE   DELFAIL5           NO, DELETE FAILED
         B     DELLOK
DELCFML  L     R0,LOWREC
         BAL   R14,CONVERT       CONVERT CI NUMBER
         MVC   MSG18+22(6),UNPACK+2
         MVC   MSG18+44(1),LOWREC+44
         LA    R1,MSG18          TELL ABOUT RECORD TO BE DELETED
         BAL   R14,WRITE         WRITE OUT THE INFORMATION MSG
         MVI   OUTLINE,X'40'
         MVC   OUTLINE+1(124),OUTLINE
         MVC   OUTLINE+2(4),=C'NONE'
         MVI   OUTLINE+1,X'04'
         CLI   LOWREC+44,C'E'    EXTENTION RECORDS HAVE NONE
         BE    DELL01
         CLI   LOWREC+44,C'W'
         BE    DELL01            VOL EXTENTION RECORDS HAVE NONE
         CLI   LOWREC+44,C'Y'
         BE    DELL01            UPGRADE RECORDS HAVE NONE
         CLI   LOWREC+44,C'F'
         BE    DELL01
         MVC   OUTLINE+2(44),LOWREC+49
         MVI   OUTLINE+1,X'2C'   RECORD HAS A NAME
DELL01   LA    R1,OUTLINE
         BAL   R14,WRITE
         LA    R1,MSG15
         BAL   R14,PROMPT        NEED CONFRIMATION
         CLI   0(R1),C'N'        NO TO THE REPLY?
         BE    DELFAIL3
DELLOK   L     R6,LOWRPL+64      SAVE RBA FOR NEXT GET
         MVC   LOWRBA(4),=X'00000600'
         LA    R9,LOWRBA
         ST    R9,LOWRPL+36
         SR    R0,R0
         LA    R1,LOWRPL
         BAL   R14,REQUEST       GET THE CCR RECORD
         LTR   R15,R15
         BNZ   DELFAIL1          NO CCR, NO ERASE
         ICM   R9,7,LOWREC+54    GET FCHAIN POINTER
         ST    R6,LOWRBA         PUT RBA BACK
         SR    R0,R0
         BAL   R14,REQUEST       GET RECORD TO BE DELETE BACK
         LTR   R15,R15
         BNZ   DELFAIL1
         MVC   TRACK+4(1),LOWREC+44
         MVC   TRACK+6(10),LOWREC+49
         XC    LOWREC+5(256),LOWREC+5
         XC    LOWREC+261(251),LOWREC+261
         SRDL  R6,32
         D     R6,=X'00000200'  RESTORE THE KEY
         LR    R0,R7            GET THE COMPUTED CI'S KEY
         BAL   R14,CONVERT
         MVC   MSG2X+13(6),UNPACK+2
         ST    R7,LOWREC
         MVI   LOWREC+44,C'F'
         MVC   LOWREC+506(4),=X'01F901F9' RESTORE RDF/CIDF
         STCM  R9,7,LOWREC+45
         LA    R0,PUT
         BAL   R14,REQUEST      WRITE OUT THE DELETED RECORD
         LTR   R15,R15
         BNZ   DELFAIL1
         MVC   LOWRPL+36(4),LOWRPL+32
         OI    FLAG1,CCREXIT
         BAL   R14,CCRCHKPT     NEED CCR CHECK POINT WITH CHANGES
         STCM  R7,7,LOWREC+54   ADD NEW FCHAIN POINTER
         ICM   R8,7,LOWREC+51
         LA    R8,1(R8)
         STCM  R8,7,LOWREC+51   INCREASE F RECORD COUNT
         MVI   TRACK,C'-'       BUILD CCR TRACKING DATA
         STCM  R7,7,TRACK+1
         LR    R15,R14
         BALR  R14,R15
         BAL   R14,DEQUE        UNLOCK CATALOG
         LA    R1,MSG2
         BAL   R14,WRITE
         B     ROUTER
DELFAIL1 LA    R1,MSG16
         B     DELFAIL
DELFAIL2 LA    R1,MSG41
         B     DELFAIL
DELFAIL3 LA    R1,MSG42
         B     DELFAIL
DELFAIL4 LA    R1,MSG43
         B     DELFAIL
DELFAIL5 LA    R1,MSG44
DELFAIL  BAL   R14,WRITE
         B     DELOUT
COMPARE1 CLC   4(0,R5),HIKEY
         SPACE 3
**********************************************************************
* FCHAIN RE-STRING THE FREE CHAIN AND UPDATES THE CCR                *
**********************************************************************
FCHAIN   BAL   R14,ENQUE
         TM    FLAG2,CRAOK        IS THIS A CRA FCHAIN REQUEST?
         BO    FCRA               YES, REQUIRES SPEIAL SET UP
         MVI   LOWRPL+41,KEY+NSP+UPD
         OI    LOWRPL+40,KGE+DIR+GEN  WILL NEED KEY-GREATER-OR-EQUAL
         B     *+8
FCRA     OI    STATUS,KEYSEQ
         OI    STATUS,NRFOK       NO RECORD FOUND IS OK
         SR    R9,R9              R9 WILL BE TOTAL COUNT OF F RECORDS
         LR    R8,R9              R8 IS POINTER TO LAST F RECORD
         LR    R7,R8              CURRENT WORKING CI NUMBER
         ST    R7,LOWREC
         B     FREELOP
FREELOP  L     R7,LOWREC
         LA    R7,1(R7)
         TM    FLAG2,CRAOK        IS THIS A CRA?
         BZ    *+8
         LA    R7,511(R7)         CRA NEEDS +X'200'
         ST    R7,LOWREC
         LA    R1,LOWRPL
         SR    R0,R0              GET REQUEST CODE
         BAL   R14,REQUEST
         LTR   R15,R15
         BNZ   FREELOP           FORGET ERR REC, DON'T PUT IN F CHAIN
         OI    HIRPL+40,SEQ
         CLI   LOWREC,X'00'      GET A HIKEY?
         BNE   FREEOUT           YES, END OF LOW RECORDS
         L     R5,LOWREC
         MH    R5,=X'0200'       DETERMINE THE RECORDS RBA
         C     R5,LOWRPL+64      COMPARE WITH RPLDDDD (RBA)
         BE    FCHAIN1           OK, CONTINUE
         TM    STATUS,KEYSEQ     HAVE WE ALREADY STATED MISMATCH?
         BO    FCHAIN1
         OI    STATUS,KEYSEQ
         LA    R1,MSG20
         BAL   R14,WRITE         TELL USER ABOUT MISMATCH
         LA    R1,LOWREC
         LA    R0,X'200'
         BAL   R14,SNAP          PRINT FIRST MISMATCH RECORD
FCHAIN1  CLI   LOWREC+44,C'F'    IS THIS A F RECORD
         BNE   FREELOP           NO, TRY NEXT RECORD
         XC    LOWREC+45(255),LOWREC+45
         STCM  R8,7,LOWREC+45    INSERT THE CHAIN POINTER
         L     R8,LOWREC         GET NEXT POINTER VALUE
         LA    R9,1(R9)          UP COUNT OF FREE CI'S
         LA    R1,LOWRPL         WRITE OUT THE UPDATED RECORD
         LA    R0,PUT
         BAL   R14,REQUEST
         LTR   R15,R15           ANY ERRORS?
         BZ    FREELOP           NO, DO NEXT RECORD
         BCTR  R9,R0             REMOVE ERROR CI FROM CHAIN
         ICM   R8,7,LOWREC+45
         B     FREELOP
FREEOUT  MVI   LOWRPL+40,GEN+DIR
         OI    FLAG1,CCREXIT     WANT SPECIAL EXIT
         BAL   R14,CCRCHKPT      CHECK POINT THE CCR RECORD
         LR    R10,R14           WILL RETURN
         STCM  R8,7,LOWREC+54    SET NEW 1ST FREE RECORD
         STCM  R8,7,TRACK+12
         STCM  R9,7,LOWREC+51    SET NEW FREE CHAIN COUNT
         STCM  R9,7,TRACK+8
         CLC   LOWREC+48(3),LOWREC+54    NFCI > THAN FCHAIN CI?
         BH    *+10                   YES, OK
         MVC   LOWREC+48(3),LOWREC+45    NO, MAKE NFCI = HACI
         MVC   TRACK(6),=C'FCHAIN'
         BALR  R14,R10           FINISH THE CHECK POINT
         BAL   R14,DEQUE         FINISHED WITH CCR
         SR    R0,R0
         ICM   R0,7,LOWREC+45    GET HI ALLOCATED CI NUMBER
         BAL   R14,CONVERT
         MVC   MSG21X+23(6),UNPACK+2
         ICM   R0,7,LOWREC+48    GET NEXT NEVER USED NUMBER
         BAL   R14,CONVERT
         MVC   MSG21X+39(6),UNPACK+2
         LR    R0,R9
         BAL   R14,CONVERT
         MVC   MSG21X+55(6),UNPACK+2
         LR    R0,R8
         BAL   R14,CONVERT
         MVC   MSG21X+71(6),UNPACK+2
         LA    R1,MSG21
         BAL   R14,WRITE
         B     ROUTER
         SPACE 3
**********************************************************************
* FINDGOPS USING THE RECORD IN LOWREC, WILL FIND ALL THE GOPS (SOFS) *
* FOR THE RECORD AND PLACE THEM IN ASSOC.  A X'FF' MARKS THE END.    *
**********************************************************************
FINDGOPS STM   R0,R14,SNAPSAVE
         LA    R14,FIND1
         LA    R9,ASSOC
         MVC   KEYSAVE,LOWREC    SAVE INPUT RECORD KEY
         XC    ASSOC,ASSOC       CLEAR THE ASSOC DATA
         CLI   LOWREC+44,C'F'    IS THIS A FREE RECORD?
         BE    FINDOUT
         CLI   LOWREC+44,C'E'    IS THIS A EXTENTION RECORD?
         BE    FINDOUT
         CLI   LOWREC+44,C'W'    IS THIS A VOLUME EXTENTION RECORD?
         BE    FINDOUT
FGOPS1   SR    R8,R8             COMMON ROUTINE USED BY PUNCH ALSO
         IC    R8,LOWREC+48      GET OFFSET TO VARIABLE DATA
         LA    R8,LOWREC(R8)     POINT TO EXTENTION POINTER
         CLI   LOWREC+44,C'B'    IS THIS A BASE GDG?
         BNE   FGOPS2            NO, R8 POINTS TO FIRST GOP
         LA    R7,2              YES, GET PAST THE DIFF STRING
         AH    R7,0(R8)          R8 POINTS TO DIFF LENGTH
         AR    R8,R7             R8 NOW POINTS TO GOP
FGOPS2   MVC   EXTENTON+2(2),1(R8)
         LA    R8,5(R8)          POINT TO FIRST GOP
         SR    R7,R7
         ICM   R7,1,0(R8)        R7 HAS COUNT OF GOPS
         BZ    FINDOUT           NO GOPS, GET OUT
         LR    R5,R7
         LA    R8,1(R8)          R8 POINTS TO GOPS
         MVI   GOPSIZE+1,X'05'   SET GOP SIZE TO 5 BYTES EACH
         CLI   LOWREC+44,C'V'    IS THIS A VOLUME RECORD?
         BE    GOPS6             YES, GOP ARE 6 BYTES
         CLI   LOWREC+44,C'W'    IS THIS A VOLUME REC EXTENTION
         BNE   *+8
GOPS6    MVI   GOPSIZE+1,X'06'   6 BYTE GOP'S
         MH    R5,GOPSIZE
         AR    R5,R8             R5 NOW POINTS TO END OF GOPS
         BR    R14               MAY WANT TO RETURN TO PUNCH
FIND1    TM    3(R8),X'40'       HAVE THIS SET BEEN DELETED?
         BO    FIND1B+4          YES, TRY NEXT
         TM    3(R8),X'80'       IS THIS AN EXTENTION POINTER?
         BZ    FIND1A            NO, TRY NEXT
         MVC   0(2,R9),1(R8)     SAVE THE 2 BYTE POINTER
         B     FIND1B
FIND1A   MVN   PASSWORD(1),3(R8) GET THE NUMERIC VALUE
         CLI   PASSWORD,X'02'    IS THIS A ASSOC GOP?
         BNE   FIND1B+4
         ICM   R4,7,0(R8)        GET DISP TO GOP VALUE
         LA    R4,4(R4,R5)       POINT TO ASSOC CI POINTER
         MVC   0(2,R9),0(R4)     SAVE POINTER
FIND1B   LA    R9,2(R9)          POINT TO NEXT ASSOC SLOT
         AH    R8,GOPSIZE        POINT TO NEXT GOPS
         BCT   R7,FIND1          DO WHILE THERE ARE GOPS TO DO
         B     FINDOUT           FOUND COMPLETE LIST.
FINDOUT  MVI   0(R9),X'FF'       MARK END OF LIST
         LM    R0,R14,SNAPSAVE
         BR    R14
         SPACE 3
**********************************************************************
* CCRCHPT WILL WRITE OUT THE UPDATED CCR RECORD AND RE-GET IT FOR UPD*
**********************************************************************
CCRCHKPT ST     R14,RETURN1
         MVI    LOWRPL+41,CNV+UPD
         MVC    LOWRBA(4),=X'00000600'
         LA     R10,LOWRBA
         ST     R10,LOWRPL+36
         LA     R1,LOWRPL
         SR     R0,R0             GET CODE
         BAL    R14,REQUEST
         LTR    R15,R15           GET OK?
         BNZ    EXITERR
         TM     FLAG1,CCREXIT     NEED A SPECIAL EXIT?
         BZ     *+14
         L      R15,RETURN1
         BALR   R14,R15           USER WILL RETURN HERE
         ST     R14,RETURN1       NEW EXIT POINT
         MVC    LOWREC+160(256),LOWREC+176
         MVC    LOWREC+416(16),TRACK
         XC     TRACK(16),TRACK
         LA     R1,66
         SVC    11
         MVC    LOWREC+480(12),LOWREC+484
         SRL    R1,4
         ST     R1,LOWREC+492
         LA     R1,LOWRPL
         LA     R0,PUT
         BAL    R14,REQUEST
         MVC    LOWRPL+36(4),LOWRPL+32
         LTR    R15,R15           CCR WRITE OK?
         BZ     CCROUT
EXITERR  LA     R1,MSG12
         BAL    R14,WRITE
CCROUT   NI     FLAG1,X'FF'-CCREXIT
         L      R14,RETURN1
         BR     R14
         EJECT
***********************************************************************
* EXIT CLOSES THE CATALOG ACB AND RETURNS                             *
***********************************************************************
EXIT     CLOSE  (CATACB,,SYSPRINT)
         TM     SYSIN+48,X'10'    IS SYSIN OPEN?
         BZ     THEEND
         CLOSE  (SYSIN)
         BAL    R14,DEQUE
*        ESTAE  0                 CANCEL THE ESTAE ROUTINE
         LA     R0,132            CANCEL OPTION FOR THE STAE
         SVC    60
THEEND   L      R13,4(R13)        POINT TO OLD SAVE AREA
         LM     R14,R12,12(R13)   RE-LOAD REGS
         SR     R15,R15
         BR     R14               RETURN
         SPACE  3
ERROR1   WTO    'CATFIX: ERROR OPENING SYSPRINT FILE. TERMINATE.'
         B      THEEND
***********************************************************************
* THE ESTAE ROUTINE CLEANS UP THE OUTSTANDING ENQUE .                 *
***********************************************************************
         DROP   R12
         USING  ABTERM,R15
ABTERM   LR     R13,R15           RESTORE THE BASE REG
         L      R11,R13BASE
         SR     R13,R11
         LA     R12,4095(R13)
         LA     R12,1(R12)
         LA     R11,4095(R12)
         LA     R11,1(R11)
         DROP   R15
         USING  SAVE,R13,R12,R11
         B      DEQUE
         SPACE  3
DCBEXIT  LH     R4,83(R1)         GET LRECL FROM DCB
         LH     R3,62(R1)         GET BLKSIZE FROM DCB
         STH    R4,62(R1)         STORE BLKSIZE JUST IN CASE
         LTR    R3,R3             WAS BLKSIZE GIVEN?
         BZR    R14               YES, RETURN
         SR     R2,R2
         DR     R2,R4
         MR     R2,R4
         STH    R3,62(R1)
         BR     R14               RETURN TO OPEN
R13BASE  DC     A(ABTERM-SAVE)
PATCH    DS    CL100
         EJECT
***********************************************************************
*     MESSAGE AREA                                                    *
***********************************************************************
MSG1     DC    Y(L'MSG1X)
MSG1X    DC    C'CATFIX01: ENTER COMMAND. YY.DDD HH.MM.SS'
MSG2     DC    Y(L'MSG2X)
MSG2X    DC    C'CATFIX02: CI ------ NOW A FREE RECORD.'
MSG3     DC    Y(L'MSG3X)
MSG3X    DC    C'CATFIX03: CATALOG ACB ERROR XX AFTER CATALOG OPEN.'
MSG4     DC    Y(L'MSG4X)
MSG4X    DC    C'CATFIX04: ENTER DSN AND POINTER TO BE ADDED.'
MSG5     DC    Y(L'MSG5X)
MSG5X    DC    C'CATFIX05: OFFSET VALUE INCORRECT.  ZAP FAILED.'
MSG6     DC    C'CATFIX06: RPL ERROR = XXXXXX ON A '
MSG7     DC    Y(L'MSG7X)
MSG7X    DC    C'CATFIX07: ENTER RECORD TYPES TO BE PUNCHED OR ALL.'
MSG8     DC    Y(L'MSG8X)
MSG8X    DC    C'CATFIX08: ENTER CI NUMBER OR RBA OF CI TO BE ZAPPED.'
MSG9     DC    Y(L'MSG9X)
MSG9X    DC    C'CATFIX09: ENTER ''VER 0000 00000000''.'
MSG10    DC    C'CATFIX10: VER FAILED. DATA= '
MSG11    DC    Y(L'MSG11X)
MSG11X   DC    C'CATFIX11: VER OK.  ENTER REP DATA.'
MSG12    DC    Y(L'MSG12X)
MSG12X   DC    C'CATFIX12: ERROR CHECKPOINTING THE CCR RECORD. '
SNAPLINE DC    C'*****  ********  RBA OF RECORD IS XXXXXX ************'
STARS    DC    C'*****************************************************'
         DC    C'****************************'
MSG13    DC    Y(L'MSG13X)
MSG13X   DC    C'CATFIX13: POINTER INCORRECT OR RPL ERROR. ADD FAILED.'
MSG14    DC    Y(L'MSG14X)
MSG14X   DC    C'CATFIX14: ENTER OBJECT VALUE FOR DELETE.'
MSG15    DC    Y(L'MSG15X)
MSG15X   DC    C'CATFIX15: IS THIS THE CORRECT RECORD? '
MSG16    DC    Y(L'MSG16X)
MSG16X   DC    C'CATFIX16: DELETE NOT DONE DUE TO RPL ERROR.'
MSG17    DC    Y(L'MSG17X)
MSG17X   DC    C'CATFIX17: DSN ERASED. CI NUMBER WAS XXXXXX. '
MSG18    DC    Y(L'MSG18X)
MSG18X   DC    C'CATFIX18: CI NUMBER ------ IS RECORD TYPE -. NAME IS'
MSG19    DC    Y(L'MSG19X)
MSG19X   DC    C'CATFIX19: ''DISPLAY ALL'' NOT VALID.'
MSG20    DC    Y(L'MSG20X)
MSG20X   DC    C'CATFIX20: FOLLOWING RECORD''S KEY DOES NOT MATCH RBA.'
MSG21    DC    Y(L'MSG21X+L'MSG21Y)
MSG21X   DC    C'FREE CHAIN OK. CCRHACI=      , CCRNFCI=      , '
MSG21Y   DC    C'CCRCDCI=      , CCRFDCI=      .'
MSG23    DC    Y(L'MSG23X)
MSG23X   DC    C'CATFIX23: ENTER OBJECT VALUE FOR DISPLAY'
MSG24    DC    Y(L'MSG24X)
MSG24X   DC    C'CATFIX24: ENTER ABEND, STOP OR CONTINUE.'
MSG25    DC    Y(L'MSG25X)
MSG25X   DC    C'CATFIX25: CAXWA NOT FOUND FOR DD CARD. '
MSG26    DC    Y(L'MSG26X)
MSG26X   DC    C'CATFIX26: PROBLEMS IN THE PUNCH OUTPUT.... CHECK IT. '
MSG27    DC    C'LOW KEY RANGE ANALYSIS'
MSG28    DC    C'HIGH ALLOCATED CI (CCRHACI)'
MSG29    DC    C'HIGH USED CI'
MSG30    DC    C'COUNT OF FCHAIN CI''S'
MSG32    DC    C'COUNT OF LOW KEY CA''S'
MSG33    DC    C'COUNT OF HIGH KEY CA''S'
MSG34    DC    C'COUNT OF NEVER USED CI''S'
MSG35    DC    C'TOTAL FREE SPACE IN HI RANGE'
MSG36    DC    C'TOTAL USED SPACE IN HI RANGE'
MSG37    DC    C'COUNT OF HI KEY CI''S'
MSG38    DC    C'COUNT OF USED BUT EMPTY CI''S'
MSG40    DC    C'HI KEY RANGE ANALYSIS'
MSG41    DC    Y(L'MSG41X)
MSG41X   DC    C'CATFIX41: DELETE FAILED, NAME NOT FULLY QUALIFIED.'
MSG42    DC    Y(L'MSG42X)
MSG42X   DC    C'CATFIX42: DELETE TERMINATED.'
MSG43    DC    Y(L'MSG43X)
MSG43X   DC    C'CATFIX43; DELETE FAILED, CANNOT DELETE CI-S 1 THRU C'
MSG44    DC    Y(L'MSG44X)
MSG44X   DC    C'CATFIX44; DELETE FAILED. RECORD TYPE = X, NOT X.'
MSG45    DC    Y(L'MSG45X)
MSG45X   DC    C'CATFIX45; ACB ERROR -- OPENING CRA. COMMAND REJECTED'
MSG46    DC    Y(L'MSG46X)
MSG46X   DC    C'CATFIX46;  NOW PROCESSING CRA.'
MSG47    DC    Y(L'MSG47X)
MSG47X   DC    C'CATFIX47; NOW PROCESSING CATALOG, NOT CRA.'
MSG48    DC    Y(L'MSG48)
MSG48X   DC    C'CATFIX48; COMMAND INVALID FOR CRA.  COMMAND REJECTED.'
         EJECT
*********************************************************************
*
*     WORK AREAS
*
*********************************************************************
WORKSAVE DS    14F
SNAPSAVE DS    15F
LOWRBA   DC    F'0'
WORK1    DC    F'0'
WORK2    DC    F'0'
WORK3    DC    2F'0'
EXTENTON DC    F'0'
KEYSAVE  DC    F'0'
RETURN   DC    F'0'
DHIURBA  DC    F'0'
SSRBA    DC    F'0'
RETURN1  DC    F'0'
ZAPDATA  DC    2F'0'          USER DATA FOR A ZAP
TRACK    DC    4F'0'
         DS    0D
UNPACK   DC    XL12'0'
PACKIN   DC    XL12'0'
GOPSIZE  DC    H'0'
INLENGTH DC    XL2'0'
STATUS   DC    XL1'0'
PRTALL   EQU   128           NRF IS OK ERROR CODE
REP      EQU   64            ON WHEN DOING THE REP FUNCTION
NRFOK    EQU   32
NOWTO    EQU   16
KEYSEQ   EQU   8
WRT      EQU   4
DISCMD   EQU   2
PRTBOTH  EQU   1
FLAG1    DC    X'00'
DTYPE    EQU   128
PVOLFLG  EQU   64
PFSN     EQU   32
HILEVEL  EQU   16
CCREXIT  EQU   1              USED FAST IN REQUEST
FLAG2    DC    X'00'
CRAOK    EQU   2
ENQUED   EQU   1
TYPES    DS    CL8
         DS    0F
HIKEY    DC    CL48'0'
PASSWORD DC    XL9'0'
         DC    XL1'0'      PASSWORD ALSO USED FOR ZAP DATA
COMMOUT  DC    X'00000050'
COMMAND  DS    CL80
ECB      DC    F'0'
REPLYOUT DC    X'00000050'
REPLY    DS    CL80           WTOR INPUT AREA
ROTCDE   DC    X'00004020'    WTOR ROUTE CODES
WTOR     DC    A(REPLY)       WTOR PARM LIST
         DC    A(ECB)
WTORLNG  DS    H              HALF WORD OF MESSAGE LENGTH
         DC    X'8000'        WTOR FLAGS
MESSAGE  DS    CL132
SNAPLGN  DC    X'007C'     LENGTH OF SNAP OUTPUT FOR SYSPRINT
OUTLINE  DS    CL125          PRINT OUTPUT AREA
         DS    0D
         DC    C'LOWR'
LOWREC   DS    CL512
         SPACE 3
CRAACB   ACB   DDNAME=VSAMCRA,AM=VSAM,STRNO=2,MACRF=(CNV,DIR,ADR,OUT)
CATACB   ACB   AM=VSAM,DDNAME=VSAMCAT,STRNO=2,                         -
               MACRF=(ADR,CNV,KEY,OUT,SEQ,DIR)
HIRPL    RPL   ACB=CATACB,AREA=HIKEY,AREALEN=47,ARG=HIKEY,KEYLEN=44,   -
               RECLEN=47,OPTCD=(KEY,DIR,GEN)
LOWRPL   RPL   ACB=CATACB,AREA=LOWREC,AREALEN=512,ARG=LOWREC,KEYLEN=4, -
               RECLEN=512,OPTCD=(CNV,DIR,GEN)
SYSIN    DCB   DDNAME=SYSIN,RECFM=FB,LRECL=80,MACRF=GM,DSORG=PS,       -
               EODAD=EXIT
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=123,RECFM=F,    -
               BLKSIZE=123
SYSPUNCH DCB   DDNAME=SYSPUNCH,DSORG=PS,MACRF=PM,LRECL=80,RECFM=F,     -
               BLKSIZE=80
TABLE    DC    C'0123456789ABCDEF'
XLATE    DC    XL1'00'
         DC    C'...............'
         DC    C'................'
         DC    C'................'
         DC    C'................'
         DC    XL1'00'
         DC    C'............(+.'
         DC    C'...........$*)..'
         DC    C'-/.........,....'
         DC    C'..........:..''=.'
         DC    C'................'
         DC    C'................'
         DC    C'................'
         DC    C'................'
         DC    C'.ABCDEFGHI......'
         DC    C'.JKLMNOPQR......'
         DC    C'..STUVWXYZ......'
         DC    C'0123456789......'
         EJECT
         LTORG
ASSOC    DS    45F            90 3 BYTE ASSOCCION POINTERS
TRTABLE2 DC    X'FF'               USED FOR TRT TO FIND BLANKS
         DC    XL63'00'
         DC    X'FF'               AND USED TO FIND X'40'
         DC    XL215'00'
         END
