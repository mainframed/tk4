* ANALYZER AND TABLE-CREATER FOR THE VW SPECIAL SEQUENTIAL RANDOMIZER
         MACRO
&N       BEGIN &P
&N       CSECT
         B     12(0,15)
         DC    AL1(7)
         DC    CL7'&N'
         STM   14,12,12(13)
         LR    14,13
         CNOP  0,4
         BAL   13,112(15)
         USING *,13
         DC    18F'0'
         DC    CL8'&SYSDATE'
         DC    CL3' '
         DC    CL5'&SYSTIME'
         ST    14,8(13)
         ST    13,4(14)
         AIF   (T'&P EQ 'O').END
         L     2,0(1)
         LH    3,0(2)
         LTR   3,3
         BZ    *+16
         BCTR  3,0
         EX    3,*+4
         MVC   &P(1),2(2)
.END     SPACE 3
         MEND
         SPACE 2
       MACRO
&N       GOIN    &A
         LCLA &L
&L       SETA 4
&N       CNOP  0,8
         AIF   (T'SYSPARM EQ 'O').NCNT
         MVC   LSTENT,*+60
         AP    *+24(4),=P'1'
.NCNT    STM   3,8,*+20+&L
         L    BSE2,*+40+&L
         BALR RET,BSE2
         LM    3,8,10+&L.(RET)
         B     *+34+&L
         DC    PL4'00'
         DC    26X'AA'
         DC   A(&A)
         MEND
         SPACE 2
         GBLA  &REC,&BLK,&RAHED,&RAHEDP1,&GETSIZE,&KEYSZ,&MTHS
&REC     SETA  30
&BLK     SETA  600
&RAHED   SETA  7           ****** RESET FOR DIFFERENT READ AHEAD CNT**
&RAHEDP1 SETA  &RAHED+1
&GETSIZE SETA  11800       MAXIMUM TABS SIZE.  ABEND111 IF TOO SMALL
&KEYSZ   SETA  8           MAX SIZE PREFIX+METRIC
&MTHS    SETA  4           NUMBER MONTHS BETWEEN HDAM REORGS
         EJECT
R0        EQU   0
R1        EQU   1       ADDR DMBDACS
R2        EQU   2
R3        EQU   3
R4        EQU   4       EVEN/ODD PAIR
R5        EQU   5       OF REGS.
R6        EQU   6
R7        EQU   7        ADDR WORK AREA PASSED
RPRE      EQU   8        ADDRESS CURRENT PREFIX BLOCK.
RLEN      EQU   9        EXECUTABLE KEYLENGTH.
RDAT      EQU  10        ADDRESS CURRENT DATA BLOCK.
RCNT      EQU  11        COUNTING REGISTER
R12       EQU  12
R13       EQU  13
R14       EQU  14
R15       EQU  15
          SPACE 1
RET       EQU   7
BSE2      EQU   8
          SPACE 1
**** PREFIX BLOCK
PREBLOCK DSECT
FREECNT  DS    0CL4    * NUMBER RECS/MONTH ADDED TO END PREFIX RANGE.
NUMPRECS DS    F                NUMBER OF RECORDS CONTROLLED BY BLOCK.
LNPENT   DS    C                LENGTH THIS BLOCK.   'FF'=DUMMY LAST
LNPRE    DS    C                EXECUTABLE PREFIX LENGTH.  'FF'=NO PRE
LNDATA   DS    C                LENGTH ANY DATA BLOCK CHAINED OFF THIS
LNMETRIC DS    C                EXECUTABLE METRIC KEY LENGTH.
LIMITS   DS    0CL3    * MAXIMUM JUMP LIMITS FOR PREFIX
OFFSET   DS    H                OFFSET TO FIRST DATA BLOCK
NUMDATA  DS    H                NUMBER DATA BLOCKS.
PREFIX   DS    C,CL3            START OF PREFIX
PRESIZE  EQU   *-PREBLOCK
         SPACE 1
**** DATA BLOCK
DATBLOCK DSECT
MEANDIST DS    H                MEAN INTER-RECORD DISTANCE * 16
NUMDRECS DS    FL3              NUMBER OF RECORDS CONTROLLED BY BLOCK.
LOWMET   DS    FL3              LOWEST METRIC CONTROLLED BY BLOCK.
DATSIZE  EQU   *-DATBLOCK
         SPACE 2
         PRINT ON,NOGEN
MAIN     BEGIN
         B     INIT
         EJECT
*******   PR-BUILT PREFIX BLOCKS   ********
*        ALL OF THIS PAGE GOES OUT AS COMMENTS CARDS IN TABS. **
**  SPECIAL FIRST BLOCK      FINAL FIELD CONTENTS
PREAREA  DC    F'0'             NUMPRECS       *TOT RECS IN FIRST*
         DC    X'10000000'      LEN  (THIS,EXEC-PRE,DATA-BLK,EXEC-KEY)
         DC    H'0,0'           OFFSET, NUMBER DATA BLOCKS  *PRE BLKS
         DC    CL4' '           PREFIX, PADDING              IN FIRST
         SPACE 1
** PREFIX  A0                PREBUILT FIELD CONTENTS
         DC    C'0000'          SERIES CLOSED
         DC    X'10010805'      (THIS,EXEC-PRE,DATA-BLK,EXEC-KEY)
         DC    C'050 '          LIMITS
         DC    C'A0  '          PREFIX
         SPACE 1
** PREFIX  A5F
         DC    C'0000'          SERIES CLOSED
         DC    X'10020804'
         DC    C'050 '          LIMITS
         DC    C'A5F '          PREFIX
         SPACE 1
** PREFIX  A99
         DC    C'0000'          SERIES CLOSED
         DC    X'10020804'
         DC    C'050 '          LIMITS
         DC    C'A99 '          PREFIX
         SPACE 1
** PREFIX  BAA
         DC    C'0010'          010 / MONTH ADDED.
         DC    X'10020804'
         DC    C'050 '          LIMITS
         DC    C'BAA '          PREFIX
         SPACE 1
** PREFIX  BAB
         DC    C'0020'          20  / MONTH ADDED.
         DC    X'10020804'
         DC    C'030 '          LIMITS
         DC    C'BAB '          PREFIX
         SPACE 1
** PREFIX  B04
         DC    C'0000'          000 / MONTH ADDED.
         DC    X'10020804'
         DC    C'043 '          LIMITS
         DC    C'B04 '          PREFIX
         SPACE 1
** PREFIX  B05
         DC    C'0000'          000 / MONTH ADDED.
         DC    X'10020804'
         DC    C'030 '          LIMITS
         DC    C'B05 '          PREFIX
         SPACE 1
** PREFIX  B06                **
*        DC    C'0000'        **
*        DC    X'10020804'    **
*        DC    C'050 '  **
**       DC    C'B06 '  **
         SPACE 1
** PREFIX  B07
         DC    C'0000'          000 / MONTH ADDED.
         DC    X'10020804'
         DC    C'040 '          LIMITS
         DC    C'B07 '          PREFIX
         SPACE 1
** PREFIX  B08
*        DC    C'0000'          **
*        DC    X'10020804'      **
*        DC    C'050 '          **
**       DC    C'B08 '          **
         SPACE 1
** PREFIX  B09      ****DUMMY HI *****
         DC    C'0000'          **
         DC    X'10020804'      **
         DC    C'050 '          **
         DC    C'B09 '          **
         SPACE 1
** PREFIX  B1
         DC    C'0100'          100 / MONTH ADDED.
         DC    X'10010805'
         DC    C'027 '          LIMITS
         DC    C'B1  '          PREFIX
         SPACE 1
** PREFIX  CC
         DC    C'0000'          100 / MONTH BUT NOT AT END.
         DC    X'10010805'
         DC    C'035 '          LIMITS
         DC    C'CC  '          PREFIX
         SPACE 1
** PREFIX  DD
         DC    C'0100'          100/ MONTH ADDED.
         DC    X'10010805'
         DC    C'010 '          LIMITS
         DC    C'DD  '          PREFIX
         SPACE 1
** DUMMY LAST
         DC    C'0000'
         DC    X'FF010805'
         DC    C'000 '          LIMITS
         DC    X'FFFFFFFF'      PREFIX
         SPACE 1
         DS    0F
SZAREA   EQU   *-PREAREA
         SPACE 1
         DC    C'  RAHED='       ID ON TABLE COMMENTS CARD
         DC    C'&RAHED'
         DC    C'  MONTHS=',C'&MTHS'
         DC    C'  PERCENT='
PERCENT  DC    CL2'00',CL40' '   PERCENTAGE RECORDS TO BE DROPPED
PERCENTB DS    H                 ABOVE CONVERTED TO BINARY
MONTHS   DC    H'&MTHS'          NUMBER MONTHS BETWEEN REORGANISATIONS
DATSZE   DC    AL2(DATSIZE)
         EJECT
*******   INITIALISATION   **** *****
INIT     OPEN (INFILE,INPUT,OUTFILE,OUTPUT,TABLES,OUTPUT)
*ADDRESSABILITY
         GETMAIN EU,LV=&GETSIZE,A=DSSTART,SP=10
         L     RPRE,DSSTART            GETMAIN SPACE FOR PREFIX AND
         LA    R4,PREAREA              DATA BLOCKS. MOVE PREBUILT
         LA    R5,SZAREA               PREFIX BLOCKS TO START OF
         LR    RLEN,R5                 AREA
         MVCL  RPRE,R4
         L     RPRE,DSSTART            RESTORE REG DESTROYED BY MVCL
         SPACE 1
         LA    RDAT,SZAREA(RPRE)       POINT DATA BLOCK REGISTER
         SH    RDAT,DATSZE             BEYOND PREFIX BLOCKS.
         SPACE 1
         USING PREBLOCK,RPRE           SET ADDRESSABILITY FOR PREFIX
         USING DATBLOCK,RDAT           AND FOR DATA BLOCKS.
         SR    RLEN,RLEN               PRIME RLEN WITH A VALID
         IC    RLEN,LNPRE              EXECUTABLE PREFIX LENGTH.
         SPACE 2
*SET MAXIMUM TABS ADDR
         LH    R1,=H'&GETSIZE'
         SH    R1,=H'40'
         AR    R1,RPRE
         ST    R1,MAXADDR
         SPACE 2
*SET TIME AND DATE OF RUN
         TIME  DEC
         ST    R1,DWORD         00YYDDDC
         UNPK  RUNDATE,DWORD+1(3)
         OI    RUNDATE+4,X'F0'
         ST    R0,WORD
        UNPK  DWORD,WORD
         MVC   RUNTIME(2),DWORD+1
         MVI   RUNTIME+2,C'.'
         MVC   RUNTIME+3(2),DWORD+3
         SPACE 2
*CONVERT  PERCENTAGE
         PACK  DWORD,PERCENT
         CVB   R2,DWORD
         STH   R2,PERCENTB
         EJECT
NEXT     BAL   RET,READ           READ NEXT REC
         EX    RLEN,PREFXTST      IS IT NEW GROUP
         BL    NEWGRP                 -YES GO OUTPUT LAST GROUP
         SPACE 1
** CHECK IF JUMP SO GREAT THAT NEW DATA BLOCK MUST BE BUILT
         S     R5,FIRST         CALC JUMP OVER LAST &RAHED+2 RECS
         C     R5,MAXJUMP       AND SEE IF IT EXCEEDS MAXIMUM ALLOWED
         BL    OKJUMP             (R5 SET TO KEY VALUE IN READ)
         SPACE 2
* UPDATE CURRENT DATA BLOCK WITH MEAN JUMP.
NEWBLOCK BAL   R14,MEANFIND
         SPACE 1
* CREATE NEXT  DATA BLOCK
         BAL   R14,BLDDATA
         BAL   R2,JUMPSTAT      GATHER JUMP STATISTICS
         B     NEXT             GO READ NEXT RECORD
         SPACE 1
* UPDATE  DATA  AND PREFIX BLOCK COUNTS
OKJUMP   L     R2,BLKTOT        UPDATE NUMBER OF RECORDS CONTROLLED
         AH    R2,=H'1'         BY BLOCK.
         ST    R2,BLKTOT
         L     R2,NUMPRECS      UPDATE NUMBER CONTROLLED BY PREFIX.
         AH    R2,=H'1'
         ST    R2,NUMPRECS
         SPACE 2
         BAL   R2,JUMPSTAT      GATHER JUMP STATISTICS
         B     NEXT             GO READ NEXT RECORD
         SPACE 2
PREFXTST CLC   PREFIX,RECID
         EJECT
**NEW PREFIX  **********
** FIRST PUT OUT STATISTICS GROUP HEADER
NEWGRP   LA    R4,50
         LA    R3,COUNTS                LOCATE COUNTERS
         CLI   PREFIX,C' '              NO OUTPUT FIST GROUP START
         BE    LP
         UNPK  GRPCNT,CNT               RECS IN GROUP
         ZAP   CNT,=P'10'
         MVI   GRPCNT+6,C' '
         MVC   HIGHKEY,LASTKEY          HIGH KEY
         PUT   OUTFILE,LOWID            OUTPUT LAST GROUP HEADER
LP       MVC   LOWKEY,RECID             NEW LOW KEY NEXT GROUP
         SPACE 1
*PUT OUT STATS DETAIL RECS
UNPACK   UNPK  CNT1,0(4,R3)              UNPACK COUNTERS
         UNPK  CNT2,4(4,R3)
         MVI   CNT1+6,C','
         MVI   CNT2+6,C' '
         MVC   0(8,R3),=X'0000000C0000000C'  SET COUNTERS TO ZERO
         CLI   PREFIX,C' '              NO OUTPUT FIRST GROUP
         BE    LP2
         PUT   OUTFILE,OUTREC
LP2      LA    R3,8(R3)
         BCT   R4,UNPACK
         SPACE 1
** UPDATE LAST DATA BLOCK PRECEEDING PREFIX AND BUILD HIGH KEYS.
         CLI   PREFIX,C' '      IF SITTING ON SPECIAL FIRST PREFIX
         BE    NXTPRE           BLOCK THEN NO WORK TO DO.
         BAL   R14,MEANFIND     CALC LAST MEAN.
         L     R2,PREV                     PRIME R2 WITH PREV METRIC.
ENDBLKS  CLC   ENDSPACE,=F'0'
         BE    DUMY
         SPACE 1
** CREATE A BLOCK TO ALLOW FOR INSERTED KEYS AT END PREFIX RANGE
         LA    RDAT,DATSIZE(RDAT)       ADDR NEXT DATA BLOCK.
         XC    0(DATSIZE,RDAT),0(RDAT)  CLEAR AREA.
         AH    R2,=H'1'                    ADD 1 TO PREV TO GET LOW
         ST    R2,WORD                     METRIC FOR THIS BLOCK.
         MVC   LOWMET,WORD+4-L'LOWMET
         MVC   MEANDIST,=H'16'             MEAN DISTACE EQUALS 1.
         MVC   NUMDRECS,NUMPRECS+4-L'NUMDRECS
         SPACE 1
         L     R2,ENDSPACE            NUMBER NEW RECORDS PER MONTH
         MH    R2,MONTHS              ADDED TIMES MONTHS BETWEEN
         A     R2,NUMPRECS            REORGS GIVES SPACE TO LEAVE.
         ST    R2,NUMPRECS
         LH    R2,NUMDATA             ADD 1 TO NUMBER DATA BLOCKS
         AH    R2,=H'1'               FOR PREFIX.
         STH   R2,NUMDATA
         SPACE 1
** CREATE DUMMY HI RECORD
DUMY     LA    RDAT,DATSIZE(RDAT)             CREATE DUMMY HI DATA
         XC    0(DATSIZE,RDAT),0(RDAT)        BLOCK WITH HI METRIC KEY
         MVC   LOWMET,=X'FFFFFFFF'            AND RECORD COUNT OF
         MVC   NUMDRECS,NUMPRECS+4-L'NUMDRECS
         CLI   EOFSW,X'01'
         BE    ENDJOB
         EJECT
** NEXT  BUILD NEW PREFIX BLOCK  AND ITS FIRST DATA BLOCK
NXTPRE   SR    R3,R3
         IC    R3,LNPENT
         AR    RPRE,R3              STEP TO NEXT PREFIX BLOCK.
         CLI   LNPENT,X'FF'         CONFIRM IT IS NOT DUMMY LAST.
         BE    AB222
         IC    RLEN,LNPRE           PICK UP EXECUTABLE PREFIX LEN.
         SPACE 1
         PACK  DWORD,FREECNT        CONVERT TO BINARY MONTHLY FREE
         CVB   R2,DWORD             SPACE INDICATOR.
         ST    R2,ENDSPACE
         XC    FREECNT,FREECNT      CLEAR FIELD WHICH BECOMES NUMPRECS
         SPACE 1
** GET   NEW   MAXJUMP VALUE FO R THIS PREFIX
         PACK  DWORD,LIMITS
         CVB   R3,DWORD         CONVERT LIMIT TO BINARY
         SPACE 1
         MH    R3,=H'100'       CALCULATE NEW LIMIT EQUAL
         SR    R2,R2
         LH    R1,=H'100'        (100*LIMIT)/(100-PERCENTB)
         SH    R1,PERCENTB
         DR    R2,R1
         ST    R3,MAXJUMP
         SPACE 2
*BUILD DUMMY FIRST DATA BLOCK
         LA    RDAT,DATSIZE(RDAT)       DUMMY FIRST DATA BLOCK
         XC    0(DATSIZE,RDAT),0(RDAT)   DRECS AND METRIC=000000
         MVC   MEANDIST,=H'16'            MEAN EQUALS 1
         MVC   NUMDATA,=H'2'        INITIALISE COUNT OF DATA BLOCKS
         LR    R2,RDAT              TO 2  = DUMMY FIRST AND LAST.
         S     R2,DSSTART
         STH   R2,OFFSET        SET OFFSET TO DUMMY FIRST DATA BLOCK
         SPACE 1
         EX    RLEN,PREFXTST        MAYBE NEXT PREFIX GROUP JUMPED
         BNL   METB2
         SR    R2,R2                IF PREFIX JUMPED GO BUILD ITS
         B     ENDBLKS              HIGH BLOCKS.
METB2    BAL   RET,METBUILD         RECALC LAST METRIC CORRECTLY.
         BAL   R14,BLDDATA    BUILD FIRST TRUE DATA BLOCK THIS PREFIX
         B     NEXT
         EJECT
****     EOF     *****
* COMPLETE LAST DATA BLOCK AND BUILD DUMMY HI KEY
EOF      OI    EOFSW,X'01'
         B     NEWGRP
         SPACE 1
** SET OFFSET IN DUMMY LAST PREFIX
ENDJOB   SR    R3,R3                    ADDR DUMMY LAST PREFIX
         IC    R3,LNPENT
         AR    RPRE,R3
         OI    LNPENT,X'FF'         MAYBE IT WAS NOT DUMMY- FORCE IT
         LA    R2,DATSIZE(RDAT)       FIRST ADDR NEVER REACHED.
         S     R2,DSSTART               HI OFFSET
         STH   R2,OFFSET
** SUM ALL RECS INTO FIRST PREFIX, SET ALL DATA BLOCK COUNTS TO 2**N
         L     RPRE,DSSTART     ADDR SPECIAL FIRST PREFIX BLOCK
         SR    R2,R2
         SR    R1,R1
         SPACE 1
SUMNXT   SR    R3,R3                STEP TO FIRST TRUE BLOCK
         IC    R3,LNPENT
         AR    RPRE,R3
         CLI   LNPENT,X'FF'
         BE    STCNT
         A     R2,NUMPRECS      ACCUMULATE NUMBER RECORDS.
         AH    R1,NUMDATA       ACCUMULATE NUMBER DATA BLOCKS.
         LH    R4,=H'1'
C2N      CH    R4,NUMDATA       LIE ABOUT NUMBER DATA BLOCKS. SAY
         BH    ST2N             IT IS (2**N) FOR FIRST N THAT
         SLL   R4,1             MAKES THIS GREATER THAN TRUE VALUE.
         B     C2N
ST2N     STH   R4,NUMDATA
         B     SUMNXT
         SPACE 1
STCNT    L     RPRE,DSSTART
         ST    R2,NUMPRECS
         STH   R1,NUMDATA
         MVC   PREFIX(2),OVERCNT NUMBER SHORT DATA BLOCKS WITH EXCESS
*                                MEAN SET TO MAX VALUE.
         SPACE 2
** WRITE OUT TABLES CREATED
         PUT   TABLES,CSECTOUT  CSECT CARD
         PUT   TABLES,PRECARD1
         PUT   TABLES,PRECARD2
         SPACE 1
         PUT   TABLES,IO
         LA    R2,PREAREA       START ADDR OF PREBUILT PREFIX BLOCKS.
         SR    R3,R3
         LA    R3,SZAREA+64     LENGTH OF DATA TO GO OUT AS COMMENTS.
         SRL   R3,6             WILL GO IN 64 BYTE CHUNKS SO DIV
MVCCOM   MVC   COMMENTS,0(R2)   BCT REG BY 64.   MOVE NEXT 64 BYTES
         LA    R2,64(R2)        AND WRITE OUT AFTER ADDR UPDATE.
         PUT   TABLES,IO
         BCT   R3,MVCCOM
         SPACE 1
         L     R2,DSSTART       START OF PREFIX TABLES
MVCHEX0  BAL   R14,HEXSETUP     SETUP NEXT 32 CHARS TO HEX
         PUT   TABLES,LINEOUT   AND PUT OUT DC CARD.
         LA    R2,32(R2)        STEP TO NEXT 32 CHARS
         CR    R2,RDAT          CHECK IF BEYOND AREA BUILT
         BNH   MVCHEX0
         SPACE 2
PUTEND   PUT   TABLES,ENDOUT    PUT OUT END CARD
         CLOSE (INFILE,,OUTFILE,,TABLES)
         L     13,8(13)
         LM    14,12,12(13)
         SR    15,15
         BR    14
         TITLE 'SUBROUTINES'
** CONVERT 32 CHARS POINTED TO BY R2 TO HEX IN LOC HEXOUT
HEXSETUP UNPK  HEXOUT(15),00(8,R2)
         UNPK  HEXOUT+14(15),07(8,R2)
         UNPK  HEXOUT+28(15),14(8,R2)
         UNPK  HEXOUT+42(15),21(8,R2)
         MVC   DWORD(4),28(R2)           CARE WITH LAST BYTE AS
         UNPK  HEXOUT+56(9),DWORD(5)     IT MAY END ON 4K BOUNDARY
         TR    HEXOUT,HEXTAB
         MVI   QUOTE,X'7D'
         BR    R14
         SPACE 4
** GATHE STATISTICS ON INTER RECORD JUMPS FOR PREFIX
JUMPSTAT AP    CNT,=P'10'       NO COUNT RECS IN GROUP
         L     R1,LAST
         S     R1,PREV          MULT DIFF BY 4 TO GET COUNTER
         SLL   R1,2                OFFSET
         CH    R1,=H'400'
         BL    FCC
         LH    R1,=H'396'
         SPACE 1
FCC      LA    R1,COUNTS(R1)            ADD 10 TO COUNTER
         AP    0(4,R1),=P'10'
         BR    R2
         SPACE 2
AB111    ABEND 111,DUMP         NUMBER BLOCKS CREATED TOO BIG.
         EJECT
** BUILD  NEXT  DATA BLOCK
BLDDATA  LA    RDAT,DATSIZE(RDAT)   GET ADDRAND CHECK ENOUGH
         C     RDAT,MAXADDR         GETMAINED STORAGE EXISTS.
         BH    AB111
         XC    0(DATSIZE,RDAT),0(RDAT) CLEAR AREA
         MVC   LOWMET,LAST+4-L'LOWMET          SET LOW METRIC AND ITS
         MVC   NUMDRECS,NUMPRECS+4-L'NUMDRECS  OFFSET WITHIN PREFIX.
         SPACE 1
         LH    R2,NUMDATA        UPDATE COUNT OF DATA BLOCKS
         AH    R2,=H'1'          CONTROLLED BY PREFIX BLOCK.
         STH   R2,NUMDATA
         SPACE 1
         LH    R3,=H'&RAHEDP1'  NUMBER OF PRIMING RECS TO READ AHEAD
         ST    R3,BLKTOT        SET PRIMED NUMBER IN DATA BLOCK CNT.
         A     R3,NUMPRECS      ADD TO PREFIX BLOCK.
         ST    R3,NUMPRECS
         SPACE  1
         LH    R3,=H'&RAHED'
RDLOOP   BAL   RET,READ         PRIME STACK FOR NEW DATA BLOCK
         EX    RLEN,PREFXTST    CHECK THAT WE HAVE NOT REACHED
         BL    SHORTBLK         NEW PREFIX
         BAL   R2,JUMPSTAT
         BCT   R3,RDLOOP
         BR    R14
         SPACE 2
**NEW PREFIX WHILE READING AHEAD.
SHORTBLK L     R2,BLKTOT
         SR    R2,R3            CORRECT COUNTS BY SUBTRACTING
         ST    R2,BLKTOT        OUT UNUSED LOOP COUNT.
         L     R2,NUMPRECS
         SR    R2,R3
         ST    R2,NUMPRECS
         B     NEWGRP
         EJECT
**FIND MEAN JUMP LAST BLOCK
MEANFIND L     R5,PREV
         MVC   LOWMHOLD+4-L'LOWMET,LOWMET
         S     R5,LOWMHOLD      LAST ACCEPTED KEY MINUS LOW FOR
         SLL   R5,4             CURRENT BLOCK.  MULTIPLY BY 16
         SR    R4,R4
         L     R2,BLKTOT        NUMBER RECORDS COMTROLLED BY BLOCK
         MVC   MEANDIST,=H'16'  SET MEAN 1 IN CASE NUMRECS 0 OR 1.
         CH    R2,=H'2'
         BLR   R14              EXIT IF 0 OR 1.
         BCTR  R2,0             NUMBER INTER RECORD JUMPS
         DR    R4,R2
         AH    R5,=H'1'         ENSURE SEQUENTIAL RANDOMISER WILL
         C     R5,=F'65530'     COMPRESS RATHER THAN EXPAND WITHIN A
         BL    M2               RANGE.  ALSO ENSURE COUNT FITS INTO
         CH    R4,=H'&RAHED'    HALFWORD TRUE BINARY.  IF NOT THEN
         BH    AB222            FAILURE IS ONLY ALLOWABLE ON SHORT
         L     R5,=F'65530'     DATA BLOCKS.
         LH    R4,OVERCNT       KEEP COUNT OF NUMBER FAILURES AND
         AH    R4,=H'1'         LATER PUT IN SPECIAL FIRST PREFIX
         STH   R4,OVERCNT       BLOCK.
M2       STH   R5,MEANDIST
         BR    R14
AB222    ABEND 222,DUMP         HALFWORD TRUE BINARY.
         SPACE 3
**READ NEXT RECORD
READ     MVC   STACK(&RAHEDP1*4),STACK+4  MOVE EXISTING STACK DOWN 1
         MVC   LASTKEY,RECID        SAVE LAST KEY FOR STATS HEADER
         ST    R14,DWORD
RDMORE   GET   INFILE,RECID
         L     R14,DWORD
         CLI   RECID,C'*'       TEST FOR DUMMY PACKING RECS
         BE    EOF
         CLC   LASTKEY,RECID    INCOMING KEYS MUST BE SORTED. MUST BE
         BE    RDMORE    THIS   INSERTED 3.11.78 , TO ELIMINATE DOUBLES
         BNL   AB333            UNIQUE (BECAUSE HDAM CHAINING RULES)
         SPACE 1
         CLI   PERCENTB+1,X'00' DROP AT RANDOM 'PERCENTB'
         BE    METBUILD         OF ALL RECORDS READ
         LH    R4,=H'100'       RANGE
         SR    R5,R5            PSEUDO RANDOM REPEATABLE OPTION
         GOIN  GENRAND
         CH    R2,PERCENTB      R2 IS RANDOM  00-99
         BL    RDMORE
METBUILD LA    R1,RECID+1(RLEN)     ADDR START OF METRIC
         IC    R2,LNMETRIC
         EX    R2,PACK              CONVERT METRIC TO BINARY
         CVB   R5,THIS
         ST    R5,LAST
         BR    RET
         SPACE 1
PACK     PACK  THIS,0(1,R1)
         SPACE 1
AB333    ABEND 333,DUMP
         TITLE 'GENERATE A RANDOM NUMBER'
* ON ENTRY REG 4 GIVES RANGE. IF NOT GT ZERO RESULT IS 32 RANDOM BITS
*          REG 5 GIVES CONTROL OPTION.   ANY SEED IS IN REG 3
* ON EXIT R2 CONTAINS RANDOM VALUE.
*         R15 IS ZERO UNLESS TOD SEEDING REQUESTED AND CLOCK IN ERROR
         SPACE 1
GENRAND  SR    R15,R15            SHOW OK RETURN CODE
**TEST CONTROL OPTION
         B     *+4(R5)
         B     STEP               0= STEP TO NEXT VALUE
         B     SEED               4= RESEED.  SEED IN REG 3
         B     RAND               8= USE TOD TO RANDOM SEED
         SPACE 1
* STEP TO NEXT VALUE
STEP     L     R3,OLDSEED         PICKUP LAST STORED VALUE
         B     SEED                 DROP THRU TO ADJUST LIMITS
* USE TOD
RAND     STCK  DWORD
         BC    8,CLKSET           CHECK CLOCK NOT IN ERROR
         LA    R15,4              SHOW BAD CLOCK AND DEFAULT
         B     STEP               TO USING STEP SEEDING
         SPACE 1
CLKSET   LM    R2,R3,DWORD        GET MICRO-SEC BIT IN POSN 31 REG 3
         SRDL  R2,12                 THEN DROP THRU TO ADJUST LIMITS
* USE SEED
SEED     N     R3,HIZERO          ENSURE R3 DOES NOT EXCEED 2**30
         O     R3,ODD             AND THAT IT IS ODD
         SPACE 1
* REG 3 NOW SET. TIME TO GEN NEXT RANDOM VALUE
         M     R2,NUM83
         ST    R3,OLDSEED         SAVE FOR NEXT SEED
         SPACE 1
         SRDL  R2,1               REMOVE ENFORCED ODD
         LTR   R4,R4              IF RANGE IS NOT A POSITIVE NUMBER
         BP    DIVI               RETURN RANDOM FULL WORD OF BITS
         LR    R2,R3
         BR    RET
DIVI      SR    R2,R2
          O     R3,ODD
         DR    R2,R4              GEN NUMBER ON REQUIRED RANGE
         BR    RET
         SPACE 1
OLDSEED  DC    F'151'             SAVE AREA AND INITIAL DEFAULT SEED
NUM83    DC    X'3F1AD4C3'        8N + 3
HIZERO   DC    X'3FFFFFFF'
ODD      DC    X'00000001'
         TITLE 'IOAREAS AND CONSTANTS'
** GROUP  HEADER
LOWID    DC    C'HD'                    00      G0,G9,...
BL1      DC    C','                     02
LOWKEY   DC    CL(&KEYSZ)' ',C','       03      KEY
HIGHKEY  DC    CL(&KEYSZ)' ',C','       10      KEY
GRPCNT   DC    CL7' '                   16      RECORDS IN GROUP   21
BL3      DC    C' ',CL4' '              23
         SPACE 1
** DATA  REC
OUTREC   DC    CL3'DA,'                00      DATA RECORD ID
CNT1     DC    CL7' '                   04      DIFF1 CNT
CNT2     DC    CL7' '                   11      DIFF2 CNT
DC       DC    CL18' '                  19                 21
         SPACE 1
** INPUT REC
RECID    DC    CL(&KEYSZ)' '
OVERCNT  DC    H'0'
         SPACE 2
BLKTOT   DC    F'0'
LOWMHOLD DC    2F'0'
         DS    0D
THIS     DC    PL8'0'
DWORD    DS    D
WORD     DS    F
LASTKEY  DC    CL(&KEYSZ)' '
CNT      DC    PL4'0'
COUNTS   DS    CL208
         DS    CL208
         SPACE 2
FIRST    DS    0F               FIRST KEY IN STACK
STACK    DS    (&RAHED)F        FIST &RAHED RECS IN STACK
PREV     DS    F                PENULTIMATE REC
LAST     DS    F                LAST REC
MAXJUMP  DC    F'20'            MAXIMUM JUMP ALLOWED THIS PREFIX
         SPACE 1
DSSTART  DC    F'0'             START ADDR DATA BLOCKS
MAXADDR  DC    F'0'
LSTENT   DC    A(0)
EOFSW    DC    X'00'
         SPACE 3
HEXTAB   EQU   *-240
         DC   C'0123456789ABCDEF'
         SPACE 1
ENDSPACE DS    F
         EJECT
CSECTOUT DC    CL80'TABS     CSECT'
         SPACE 2
PRECARD1 DC    CL80' DC F''32''  COMPILE-TIME /ANALYSIS-TIME'
PRECARD2 DC    C' DC C'''
         DC    CL8'&SYSDATE',C' ',CL5'&SYSTIME',CL3' '
RUNDATE  DC    CL5' ',C' '
RUNTIME  DC    CL5' ',C'''',CL50' '
LINEOUT  DC    C' DC X'''
HEXOUT   DC    CL64' '
QUOTE    DC    C'''',CL9' '
ENDOUT   DC    CL80'         END'
INFILE   DCB   DSORG=PS,RECFM=FB,MACRF=(GM),EODAD=EOF,               XXX
               DDNAME=INFILE
OUTFILE  DCB   DSORG=PS,RECFM=FB,MACRF=(PM),                         XXX
               DDNAME=OUTFILE,LRECL=&REC,BLKSIZE=&BLK
CONTROL  DCB   DSORG=PS,RECFM=FB,MACRF=(GM),EODAD=EOF,               XXX
               DDNAME=CONTROL
TABLES   DCB   DSORG=PS,RECFM=FB,MACRF=(PM),                         XXX
               DDNAME=TABLE,LRECL=80,BLKSIZE=4000
IO       DC    C'*'
COMMENTS DS    0CL64
         DC    4C'(/MT....LIM PRE)'
         DC    CL16' '
         LTORG
         END
