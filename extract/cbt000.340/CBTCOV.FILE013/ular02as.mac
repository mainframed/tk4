CLEART   CSECT
         TITLE 'TAPE DIAGNOSTIC WRITE PROGRAMME:  CLEART'
***********************************************************************
*                                                                     *
*      CLEAR-T  :  TAPE DIAGNOSTIC WRITE PROGRAMME,  P9900372.        *
*                                                                     *
*        PROGRAMME TO FILL A TAPE WITH FIXED LENGTH RECORDS WHICH     *
*        TAKE THE FORM OF A SELECTED PATTERN OR TO CLEAR THE TAPE     *
*        USING THE DATA SECURITY ERASE FEATURE.                       *
*                                                                     *
*        THE PARAMETER TO THE PROGRAMME SPECIFIES THE PATTERN TO BE   *
*        SELECTED AND THE BLOCK SIZE TO BE USED.                      *
*                                                                     *
*        PARM = 'P,XXXXX' WHERE :                                     *
*                                                                     *
*            P IS THE PATTERN IDENTIFIER :                            *
*                       A - ALL BINARY '0'                            *
*                       B - ALL BINARY '1'                            *
*                       C - X'00,01,02,....,FF' REPEATED              *
*                       D - ALTERNATING BIN '1' AND '0'               *
*                       E - ALTERNATING BIN '0' AND '1'               *
*                       F - ALTERNATING HEX '00' AND 'FF'             *
*                       Z - * DATA SECURITY ERASE *                   *
*                                                                     *
*            XXXXX IS THE LENGTH OF RECORD REQUIRED, MAX=32760.       *
*            THIS PARAMETER IS NOT USED FOR DATA SECURITY DELETE.     *
*                                                                     *
*        DEFAULT VALUE IS  'C,LENGTH' WHERE LENGTH IS                 *
*                                                                     *
         SPACE 2
LENGTH   EQU   1024*5
         SPACE 1
PATTERN  EQU   C'C'             AND THIS IS THE DEFAULT PATTERN
         SPACE 1
MAXERR   EQU   3                MAX ERRORS BEFORE AUTO END
         SPACE 2
*                                                                     *
*                                                                     *
*        IF AN INVALID PATTERN I.D. IS REQUESTED THEN THE DEFAULT OF  *
*        PATTERN C IS USED                                            *
*                                                                     *
*        IF A LENGTH IS REQUESTED WHICH IS LARGER THAN THE MAXIMUM    *
*        PERMITTED THEN THE DEFAULT VALUE IS USED.                    *
*        IF A LENGTH IS REQUESTED WHICH IS TOO LARGE FOR THE REGION   *
*        IN WHICH THE PROGRAM IS RUNNING THEN THE LARGEST POSSIBLE    *
*        LENGTH IS USED.                                              *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
*  DO OUR SAVING THING
         SAVE  (14,12),,*
         USING CLEART,R15
         LR    R2,R13
         LA    R13,SAVE
         ST    R2,4(,R13)
         ST    R13,8(,R2)
*
         B     L47
SAVE     DS    18F
VCON     DC    V(COMM)
L47      EQU   *
         DROP  R15
         USING SAVE,R13
         L     R12,VCON
         USING COMM,R12
         LA    R8,8                 SET RETURN CODE IN CASE PARM ERROR
         L     R4,0(,R1)            POINT TO PARM LIST
         LH    R1,0(,R4)            PICKUP LENGTH OF PARM
         LTR   R1,R1                IS THERE A PARM
         BZ    L02                  NO SO KEEP DEFAULTS
         BCTR  R1,0                 360 LENGTH
         CLI   2(R4),C','           IS 1ST. PARM MISSING
         BE    L03                  B IF IT IS
         LTR   R1,R1                IS IT THE ONLY PARM
         BZ    L04                  YES SO PROCESS
         CLI   3(R4),C','           NO, SO CHECK IT IS 1 CHAR
         BNE   L02                  MORE THAN ONE CHAR SO IGNORE
L04      MVC   PAT,2(R4)            SAVE REQUESTED PATTERN
         LTR   R1,R1                HAVE WE FINISHED
         BZ    L02                  B IF YES
         BCTR  R1,0                 ALLOW FOR THE 1ST. PARM
         LA    R4,1(,R4)            AND ADJUST POINTER
L03      BCTR  R1,0                 NOW 360 LENGTH OF LENGTH
         CH    R1,=H'4'             MAX IS 5 DIGITS
         BH    L02                  IGNORE IF TOO LONG
         EX    R1,INST1             PACK INTO DBL
         OI    DBL+7,X'0F'          FORCE A GOOD SIGN
         CVB   R1,DBL               AND MAKE BIN
         C     R1,=A(32760)       COMPARE WITH THE MAX
         BNL   L02                  IGNORE IF TOO LARGE
         C     R1,LA                IS IT TOO SMALL
         BNL   L19                  B IF O.K.
         L     R1,LA                OTHERWISE USE MIN VALUE
L19      ST    R1,LAL               SET INTO GETMAIN PARM LIST
*
L02      OPEN  MF=(E,OPEN1)     OPEN PRINT FILE
         TIME
         ST    R1,DBL
         ED    H01,DBL+1
         ST    R0,DBL
         ED    H02,DBL
         EJECT
* INIT SEQUENCE
         OPEN  MF=(E,OPEN2)      OPEN TAPE
         LA    R2,DCB2
         USING IHADCB,R2
         TM    DCBOFLGS,X'10'
         BZ    L08              B IF OPEN FAILED
*
         GETMAIN MF=(E,GETM)        GET THE SINGLE BUFFER
         L     R4,IOA+4             PICKUP LENGTH
         STH   R4,CCWL3             SET THE BLOCK LENGTH
         MVC   CCW3+1(3),IOA+1      SET ADDRESS OF BUFFER
*
         L     R3,DCBDEBAD      PICKUP ADDR OF DEB
         L     R3,32(,R3)       PICKUP ADDR OF UCB
         MVC   CUN,13(R3)       SET UNIT NAME INTO HEADING
*  SET BLOCK LENGTH INTO HEADER
         CVD   R4,DBL
         ED    CBLN,DBL+5
*   FIND PATTERN
         SR    R5,R5
L15      LA    R3,PATTAB            POINT TO PATTERN TABLE
PAT      EQU   *+1                  THE REQUESTED PATTERN CODE
L05      CLI   0(R3),PATTERN        IS THIS THE REQUIRED PATTERN
         IC    R5,1(R3)             PICKUP CURRENT PATTERN LENGTH
         BE    L06                  B IF PATTERN FOUND
         LA    R3,23(R5,R3)         BUMP TO NEXT ENTRY
         CLI   0(R3),X'FF'          IS IT END OF TABLE
         BNE   L05                  NO SO LOOK FURTHER
         MVI   PAT,PATTERN          NOT FOUND SO USE DEFAULT
         B     L15                  GO BACK TO LOOK FOR ENTRY
L06      CR    R5,R4                IS PATTERN TOO LONG
         BNL   L14                  B IF YES TO FLAG ERROR
         MVC   CPAT,PAT             SET PATTERN CODE IN HDR
         MVC   CPTXT,2(R3)          AND TEXT
         SPACE 1
         PUT   OUT,NEWPAGE
         PUT   OUT,HDR0
         SR    R8,R8               O.K. SO ZERO RET CODE
         CLI   CPAT,C'Z'           IS IT A DSE REQUEST
         BNE   L21                 B IF NO
         MVC   CERS(22),CERS-1     BLANK OUT SILLY TEXT
L21      PUT   OUT,HDR
         PUT   OUT,STAR
         SPACE 1
         CLI   CPAT,C'Z'             IS IT A DSE REQUEST
         BE    L20                   B IF YES TO SPECIAL SETUP
*   SPREAD THE PATTERN OVER THE BUFFER
         SPACE 1
         L     R1,IOA            POINT TO BUFFER
         EX    R5,INST2         MOVE TO I/O AREA
         SR    R2,R2             SET FOR DIVIDE
         LA    R3,X'100'         DIVISOR = MAX MOVE LENGTH
         LA    R5,1(,R5)         CURRENT LENGTH
         DR    R2,R5             INT(256/L)
         MR    R2,R5             (INT(256/L))*L
         LR    R2,R3             THIS IS THE LENGTH OF A MOVE
         SR    R2,R5             THIS IS LENGTH OF THE FIRST MOVE
         LA    R6,1              SET A 1
         BZ    L07               B IF 1ST. MOVE IS ZERO
         SR    R2,R6             DOWN TO 360 LENGTH
         ALR   R5,R1             POINT TO START OF 1ST SPREAD
         EX    R2,INST3          SPREAD TO MAX MVC POSSIBLE
L07      SR    R4,R3
         BNP   L09        B IF NOTHING LEFT
         STH   R3,DISPL
         OI    DISPL,X'10'     PUT REG 1 BACK
L12      SR    R4,R3        MAIN SPREAD LOOP
         BZ    L09          B IF END OF BUFFER
         BP    L13          OK THIS TIME
         AR    R3,R4
         SR    R4,R4        FAKE END
L13      LR    R5,R3
         SR    R5,R6
         EX    R5,INST4
         ALR   R1,R3
         LTR   R4,R4
         BP    L12
L09      EQU   *
         LA    R10,L39         LOOP ADDR FOR NO CIB
         EXTRACT MF=(E,EXT)
         L     R1,CIBA
         LTR   R1,R1
         BZ    L38              B IF NO COMM AREA
         LA    R10,L10          LOOP ADDR FOR CIB PRESENT
         L     R2,0(,R1)        ADDR OF ECB
         ST    R2,CIBA          SAVE ECB ADDR
         LA    R0,4(,R1)
         L     R1,4(,R1)
         LA    R1,0(,R1)
         LTR   R1,R1
         BZ    L38              B IF NO START CIB
         LNR   R1,R1
         SVC   34               FREE CIB
*
L38      EQU   *
         SR    R5,R5                 ZERO RECORD COUNT
         LA    R9,MAXERR             SET MAX ERROR COUNT
         SPACE 1
         EJECT
*  MAIN PROGRAM SECTION:  READ TAPE LOOP
*
L10      L     R1,CIBA    ADDR OF ECB
         TM    0(R1),X'40'
         BO    L40       B IF STOP GIVEN
*
L39      SR    R2,R2
         ST    R2,ECB
         NI    IOB,X'FB'
         STH   R2,IOBSNS
         ST    R2,IOBCSW2      SETUP IOB
         EXCP  IOB
         WAIT  ECB=ECB
         CLI   ECB,X'7F'
         BNE   L11         B IF ABNORMAL END TO I/O OP
         LA    R5,1(,R5)           BUMP RECORD COUNT
         BR    R10
*  OPEN FAIL
L08      PUT   OUT,OPENFAIL
         B     L01
*
L14      PUT   OUT,PATLONG             SAY PATTERN TOO LONG
         B     L99
*
L20      LA    R1,CCWDSE                ADDR OF SPECIAL CCWS
         ST    R1,IOBSIO                SET IN IOB
         L     R10,=A(L98)              SET LOOP ADDR TO END RUN
         B     L39                      GO TO EXCP
*
         EJECT
*
*
*   END OF CURRENT REQUEST
*
L99      L     R10,=A(L98)           RESET LOOP ADDR
         LA    R1,CCW4               WRITE TM'S CCWS
         ST    R1,IOBSIO             SET INTO IOB
         B     L39                   GO TO EXCP
*
L98      CLOSE MF=(E,OPEN2)        CLOSE TAPE FILE
         LTR   R5,R5
         BZ    L18                 B IF NO RECORDS WRITTEN
         MVC   CNTF1,=X'4020202020202120'
         CVD   R5,DBL
         ED    CNTF1,DBL+4         SET NO OF RECORDS IN MSG
         PUT   OUT,CNTMSG
L18      PUT   OUT,SKIP
         PUT   OUT,ERQ             WRITE TERMINATION MSG
         FREEMAIN MF=(E,GETM)
*
L01      CLOSE MF=(E,OPEN1)       ******  END OF PROGRAM  ******
         L     R13,4(,R13)
         LR    R15,R8              SET RETURN CODE
         RETURN (14,12),RC=(15)
*
         EJECT
*
L11      C     R10,=A(L98)              IS IT ERROR END
         BCR   8,R10                    YES SO GO TO IT
         TM    IOBCSW2,X'02'
         BO    L16                   B IF UNIT CHECK
         TM    IOBCSW2,X'01'         IS IT UNIT EXCEPTION
         BNO   L16                   B IF NO
         MVC   PFL(13),=C'(END OF TAPE)'
         B     L99                   GO TO END
L16      UNPK  EMSGF1,IOBCSW1(8)
         TR    EMSGF1(14),TAB
         MVI   EMSGF1+14,C' '
         UNPK  EMSGF2,IOBSNS(3)
         TR    EMSGF2(4),TAB
         MVI   EMSGF2+4,C' '
         LA    R8,4            SET RETURN CODE FOR ERROR
         LTR   R5,R5
         BZ    L17                  B IF NO RECORDS WRITTEN
         MVC   CNTF1,=X'4020202020202120'
         CVD   R5,DBL
         ED    CNTF1,DBL+4         SET NO OF RECORDS WRITTEN
         SR    R5,R5
         PUT   OUT,CNTMSG
L17      PUT   OUT,SKIP
         PUT   OUT,ERRMSG
         TM    IOBSNS,X'50'
         BO    L23       B IF TAPE UNIT NOT READY
         BCT   R9,L10    B IF MAX ERRORS NOT READ
         B     L99   OTHERWISE GOTO EXIT
*
L40      MVC   PFL,=C'(STOP FROM CONSOLE)'
         B     L99
*
L23      MVC   PFL(22),=C'(TAPE NO LONGER READY)'
         B     L99
*
         EJECT
* CONSTANTS AND EQUATES
COMM     CSECT
*
DBL      DS    D
         LTORG
OPEN1    OPEN  (OUT,(OUTPUT)),MF=L
OPEN2    OPEN  (DCB2,(OUTPUT)),MF=L
EXT      EXTRACT CIBA,FIELDS=COMM,MF=L
CIBA     DC    A(0)
INST1    PACK  DBL,3(0,R4)          PACK LENGTH FROM PARM FIELD
INST2    MVC   0(0,R1),22(R3)       MOVE PATTERN TO BUFF
INST3    MVC   0(0,R5),0(R1)        1ST SPREAD
DISPL    EQU   *+2
INST4    MVC   0(0,R1),0(R1)        FURTHER SPREADS
DCB2     DCB   DDNAME=SYSUT1,MACRF=(E),DEVD=TA
OUT      DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,RECFM=VBM,          *
               LRECL=140,BLKSIZE=984
*
HDR0     DC    0H'0',AL2(HDR0E-HDR0,0),X'11'
         DC    C'****  '
         DC    CL74'RZ  ROCHE  -  DIAGNOSTIC WRITE UTILITY'
         DC    C'DATE :'
H01      DC    X'40212061202020'
         DC    C',   TIME :'
H02      DC    X'4021204B2020'
         DC    C'  ****'
HDR0E    EQU   *
*
*  HEADER FOR REQUEST
HDR      DC    0H'0',AL2(HDRE-HDR,0),X'11'
         DC    C'****  WRITE PATTERN USED = '
CPAT     DS    C
         DC    C' : '
CPTXT    DS    CL20
         DC    CL25' '
CERS     DC    C'BLOCK LENGTH ='
CBLN     DC    X'402020202120'
         DC    C' , UNIT = '
CUN      DC    CL3' '
         DC    C'  ****'
HDRE     EQU   *
*
*   TABLE FOR TRANSLATION OF HEXADECIMAL INTO EBCDIC
*
         ORG   *-240
TAB      DS    XL240
         DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'
*
*
GETM     GETMAIN VU,LA=LA,A=IOA,MF=L
*
*
LA       DC    A(256)     MIN CORE REQUEST
LAL      DC    A(LENGTH)  MAX CORE REQUEST
IOA      DC    2A(0)     GETMAIN REPLY AREA
*
         SPACE 2
* DEF IOB
         CNOP  0,4
IOB      DC    B'10000010'
         DC    AL1(0)
IOBSNS   DC    AL2(0)
IOBECBCD DC    XL1'00'
IOBECBAD DC    AL3(ECB)
IOBFLG3  DC    XL1'00'
IOBCSW1  DC    AL3(0)     COMMAND ADDR
IOBCSW2  DC    AL2(0)     STATUS
IOBCSW3  DC    AL2(0)     BYTE COUNT
IOBSIO   DC    XL1'00'
IOBCPAD  DC    AL3(CCW3)
         DC    XL1'00'
IOBDCB   DC    AL3(DCB2)
         DC    A(0)
IOBBLKCI DC    AL2(1)
IOBERRC  DC    AL2(0)
CCW3     CCW   X'01',0,X'20',80
         ORG   CCW3+6
CCWL3    DS    H
         ORG
CCW4     CCW   X'1F',0,X'60',2          WRITE TM
         CCW   X'1F',0,X'20',2          WRITE 2ND. TM
CCWDSE   CCW   X'17',0,X'60',2          ERASE GAP
         CCW   X'97',0,X'20',2          DATA SECURITY ERASE
ECB      DC    F'0'
*   MISC CONSTANTS
*
*
NEWPAGE  DC    X'000600008B'
SKIP     DC    X'000600000B'
*
ERQ      DC    0H'0',AL2(ERQE-ERQ,0),X'89'
         DC    24C'*'
         DC    C'     END OF CURRENT REQUEST     '
         DC    24C'*'
         DC    CL10' '
PFL      DC    CL19' '
ERQE     EQU   *
*
ERRMSG   DC    0H'0',AL2(ERRMSGE-ERRMSG,0),X'09'
         DC    C'PERMANENT ERROR.  CSW = '
EMSGF1   DS    CL15
         DC    C', SENSE = '
EMSGF2   DS    CL5
         DC    CL10' '
         DC    21C'*'
ERRMSGE  EQU   *
*
CNTMSG   DC    0H'0',AL2(CNTMSGE-CNTMSG,0),X'09'
CNTF1    DS    CL8
         DC    C' BLOCKS WRITTEN HERE'
CNTMSGE  EQU   *
*
OPENFAIL DC    0H'0',AL2(OPFLEE-OPENFAIL,0),X'17'
         DC    C' CANNOT OPEN TAPE FILE, REQUEST IGNORED'
OPFLEE   EQU   *
*
PATLONG  DC    0H'0',AL2(PATLONGE-PATLONG,0),X'17'
         DC    C'REQUESTED PATTERN LARGER THAN RECORD LENGTH'
PATLONGE EQU   *
*
STAR     DC    0H'0',AL2(STARE-STAR,0),X'1940'
         DC    57C'* '
STARE    EQU   *
         SPACE 2
*    MAXIMUM PATTERN LENGTH IS 256 BYTES
         SPACE 1
PATTAB   DS    0H
         SPACE 1
*  DEFINE ALL PATTERNS IN FORM :
*      <I.D.><LENGTH OF REPEAT -1><PATTERN TEXT - 20 CHARS><PATTERN>
*
PATA     DC    C'A',AL1(0),CL20'FULL BINARY ''0''S',X'00'
PATB     DC    C'B',AL1(0),CL20'FULL BINARY ''1''S',X'FF'
PATC     DC    C'C',AL1(255),CL20'X''00,01,...,FF'' REPT.'
PATCX    DC    256AL1(*-PATCX)
PATD     DC    C'D',AL1(0),CL20'ALTN BIN ''1'' AND ''0''',X'AA'
PATE     DC    C'E',AL1(0),CL20'ALTN BIN ''0'' AND ''1''',X'55'
PATF     DC    C'F',AL1(1),CL20'ALTN HEX ''00''/''FF''',X'00FF'
         DC    C'Z',AL1(0),CL20'DATA SECURITY ERASE',X'97'
         SPACE 1
         DC    X'FF'         ***  DEFINE END OF PATTERN TABLE  ***
         SPACE 2
         SPACE 2
ENDPROG  EQU   *
         SPACE 2
         DCBD  DSORG=BS
*   DEFINE REGS
*
R0       EQU   0
R1       EQU   1          PARM AND GENERAL WORK
R2       EQU   2           WORKING
R3       EQU   3
R4       EQU   4
R5       EQU   5           RECORD COUNT
R6       EQU   6
R7       EQU   7
R8       EQU   8           RETURN CODE
R9       EQU   9
R10      EQU   10          POINTER FOR LOOP
R11      EQU   11
R12      EQU   12          BASE FOR COMM
R13      EQU   13          SAVE AREA AND MAIN BASE
R14      EQU   14          LINK
R15      EQU   15
*
*
         END
