./ ADD  NAME=$JQT
         MACRO -- JQT -- PHONY DSECT TO DESCRIBE FIRST CKPT REC
         $JQT
JQTDSECT DSECT
JQTOUT   DS    H              HEADER FOR OUTPUT JQES
         DS    7H
JQTSTC   DS    H
JQTTSU   DS    H              HEADER FOR TSO USER JQES
JQTCLSA  DS    H              HEADER FOR CLASS A JQES
JQTQMAX  EQU   46             MAXIMUM NUMBER OF QUEUES
         MEND
./ ADD  NAME=ASSEMBLE
//Z222068Q JOB (6695,068,2),CLASS=1,MSGCLASS=O
/*JOBPARM LINES=1000
//QASM PROC MBR=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54'
//SYSLIB   DD  DSN=Z222068.QUEUE.ASM,DISP=SHR    QUEUE MACRO LIBRARY
// DD  DSN=SYS1.HASPSRC,DISP=SHR,UNIT=3350,VOL=SER=RVREST
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=Z222068.PGMS.OBJ(&MBR),DISP=SHR   OBJECT LIBRARY
//SYSIN    DD  DSN=Z222068.QUEUE.ASM(&MBR),DISP=SHR SOURCE LIBRARY
// PEND
//Q1  EXEC QASM,MBR=Q1       QUEUE
//Q2  EXEC QASM,MBR=Q2       ALLOCATE
//Q3  EXEC QASM,MBR=Q3       CKPT
//Q4  EXEC QASM,MBR=Q4       DDNAME
//Q5  EXEC QASM,MBR=Q5       DISPLAY
//Q6  EXEC QASM,MBR=Q6       FINDJOB
//Q7  EXEC QASM,MBR=Q7       FORMAT
//Q8  EXEC QASM,MBR=Q8       HELP
//Q9  EXEC QASM,MBR=Q9       HEXBLK
//Q10 EXEC QASM,MBR=Q10      INIT
//Q11 EXEC QASM,MBR=Q11      JCL
//Q12 EXEC QASM,MBR=Q12      JLOG
//Q13 EXEC QASM,MBR=Q13      JMSG
//Q14 EXEC QASM,MBR=Q14      LIST
//Q15 EXEC QASM,MBR=Q15      LISTDS
//Q16 EXEC QASM,MBR=Q16      PARSE
//Q17 EXEC QASM,MBR=Q17      READSPC
//Q18 EXEC QASM,MBR=Q18      REPOS
//Q19 EXEC QASM,MBR=Q19      SAVE
//Q20 EXEC QASM,MBR=Q20      SEARCH
//Q21 EXEC QASM,MBR=Q21      SYSLOG
//Q22 EXEC QASM,MBR=Q22      XDS
//Q23 EXEC QASM,MBR=Q23      INITS
//Q24 EXEC QASM,MBR=Q24      ACTIVE
//Q25 EXEC QASM,MBR=Q25      FINDPDDB
//Q26 EXEC QASM,MBR=Q26      SYSOUT
//Q27 EXEC QASM,MBR=Q27      PRINT
//Q28 EXEC QASM,MBR=Q28      DOPTION
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST,LET,NCAL,REFR,RENT,REUS',
//            COND=(7,LT)
//SYSLMOD  DD  DSN=LU.LNKLIB,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=Z222068.PGMS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8,Q9,Q10)
 INCLUDE SYSLIB(Q11,Q12,Q13,Q14,Q15,Q16,Q17,Q18,Q19,Q20)
 INCLUDE SYSLIB(Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28)
 SETCODE AC(1)
 ENTRY QUEUE
 ALIAS Q
 NAME QUEUE(R)
// EXEC QASM,MBR=Q0          QCOMMON
//LKED2  EXEC PGM=IEWL,PARM='XREF,LIST,LET,NCAL',
//            COND=(7,LT)
//SYSLMOD  DD  DSN=LU.LNKLIB,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=A
//SYSLIB   DD  DSN=Z222068.PGMS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(Q0)
 NAME QUEUECMN(R)
./ ADD  NAME=HELP
)F FUNCTION -
  THE QUEUE COMMAND IS USED TO INTERROGATE THE SYSTEM QUEUES IN ORDER
  TO DETERMINE THE STATUS OF A JOB OR GROUP OF JOBS. IT ALSO PROVIDES
  ACCESS TO ALL PARTS OF A JOB WHILE IT IS ON THE QUEUE.

  FOR MORE INFORMATION, TYPE IN - QUEUE HELP.
)X SYNTAX -
         QUEUE  OPERAND    DEFAULT OPERAND IS STATUS. AN OPERAND OF
         Q                 CKPT(UNIT,VOLSER) CAN BE USED TO SPECIFY
                           A JES2 CHECKPOINT DATASET OTHER THAN THE
                           STANDARD DATASET.

)S SUBCOMMANDS -

---- SYSTEM DISPLAYS ---------------------------------------------------

DA                  JOBS IN EXECUTION
DT                  DISPLAY TSO USERS
DS                  DISPLAY STARTED TASKS
DC (B/S/T)          DISPLAY CPU BATCH/STC/TSO
STATUS (LEVEL)      JOB STATUS. DEFAULT FOR STATUS IS * (TSO ID).

---- INPUT QUEUE DISPLAYS ----------------------------------------------

DQ                  DISPLAY INPUT QUEUES
DI (NOTE1)          DISPLAY ALL INPUT JOBS
AI (NOTE1)          DISPLAY AVAILABLE JOBS
HI (NOTE1)          DISPLAY HELD JOBS

---- OUTPUT QUEUE DISPLAYS----------------------------------------------

DF                  DISPLAY OUTPUT QUEUES
DO (NOTE1 + NOTE2)  DISPLAY ALL OUTPUT JOBS
AO (NOTE1 + NOTE2)  DISPLAY AVAILABLE OUTPUT
HO                  DISPLAY HELD OUTPUT

---- NOTE1 ------- OPERANDS FOR DI,AI,HI,DO, AND AO --------------------


Q=X     X    = INCLUDE CLASS        Q^X     X    = EXCLUDE CLASS

---- NOTE2 ------- OPERANDS FOR DO AND AO ------------------------------

C=VVVV  VVVV = INCLUDE FCB IMAGE    C^VVVV  VVVV = EXCLUDE FCB IMAGE
F=WWWW  WWWW = INCLUDE FORMS        F^WWWW  WWWW = EXCLUDE FORMS
R=YYYY  YYYY = INCLUDE REMOTE ID    R^YYYY  YYYY = EXCLUDE REMOTE ID
T=ZZZZ  ZZZZ = INCLUDE UCS IMAGE    T^ZZZZ  ZZZZ = EXCLUDE UCS IMAGE

---- JOB MODIFICATION SUBCOMMANDS --------------------------------------

CAN JOBNAME (PURGE) CANCEL FROM INPUT OR EXECUTION. DELETE OUTPUT IF
                     PURGE IS SPECIFIED.
REQ JOBNAME CLASS   CHANGE SYSOUT CLASS
DEL JOBNAME         DELETE HELD OUTPUT

---- MISC SUBCOMMANDS --------------------------------------------------

SLOG STC# SEQ       LIST SYSTEM LOG.  ST SYSLOG WILL GET STC#. IF SEQ
                     IS NOT SPECIFED ZERO IS ASSUMED (CURRENT).
FTIME HH.MM.SS      POSITION SYSLOG TO TIME
H/HELP              HELP
E/END               EXIT

---- JOB RELATED SUBCOMMANDS -------------------------------------------

DJ JOBNAME          DISPLAY JOB
JCL JOBNAME         LIST JOB JCL
JLOG JOBNAME        LIST JOB LOG
JMSG JOBNAME        LIST JOB MESSAGES
DD JOBNAME          JES2 DD SUMMARY
LIST JOBNAME DSID   LIST JES2 DATASET. OBTAIN DSID VALUES BY USING THE
                     DD SUBCOMMAND.

---- LIST RELATED SUBCOMMANDS ---------

OP             - NEW COMMAND. OP SETS THE DISPLAY OPTIONS FOR
                 A SYSOUT DATASET. VALID OPERANDS ARE:

                  BLANKS/NOBLANKS - BLANKS SAYS LIST ALL LINES
                                    WHETHER THEY ARE BLANK OR
                                    NOT. NOBLANKS SAYS LIST 1
                                    BLANK LINE WHEN 2 OR MORE
                                    LINES ARE ENCOUNTERED.

                  OVERFLOW/NOOVER - OVERFLOW SAYS LIST THE EN-
                                    TIRE LINE(RELATIVE TO THE
                                    'CO' COMMAND) WITH OVERFLOW
                                    CONTINUED ON THE NEXT LINE.
                                    NOOVER SAYS TRUNCATE THE
                                    LINE IF IT WILL NOT FIT ON
                                    THE DISPLAY.

FIND 'STRING' COL(SS,EE)  FIND NEXT OCCURANCE OF 'STRING' IN THE DATA.
FALL 'STRING' COL(SS,EE)  FIND ALL OCCURANCES OF 'STRING' IN THE DATA.
                          STRING MUST BE IN QUOTES. COL DEFAULT IS ALL.

COL  #              POSITION TO COLUMN #
MD/@ #              POSITION TO RECORD #
D/+  #              MOVE FORWARD # LINES
UP/- #              MOVE BACKWARD # LINES
TOP                 TOP OF CURRENT DATASET
BOTTOM              BOTTOM OF CURRENT DATASET
HF/HB #             FORWARD/BACKWARD # HALF PAGES
PF/PB #             FORWARD/BACKWARD # PAGES

                    DEFAULT VALUE FOR # IS 1.
                    SYNONYMS L-LIST F-FIND C-COLUMN T-TOP B-BOTTOM

---------- LOGGING SUBCOMMANDS---------------

SAVE DSNAME TYPE    COPY DATASET. DEFAULT TYPE IS DATA.
PRINT ON CLASS DEST OPEN SCREEN LOG
                    DEFAULT PRINT CLASS IS SYSOUT=A.
PRINT               PRINT SCREEN
PRINT OFF           CLOSE SCREEN LOG

-------------------------------
× PF1/13  × PF2/14  × PF3/15  ×
×   HELP  ×   DA    ×   END   ×    PROGRAM FUNCTION KEY DEFINITIONS
-------------------------------
× PF4/16  × PF5/17  × PF6/18  ×    TO SPECIFY OPERANDS FOR PF 5 OR
×   PRINT ×   FIND  ×   DI    ×    OPTIONALLY FOR PF 6,9,12 OR
-------------------------------    TO OVERRIDE DEFAULTS FOR PF 4,7,8,10,
× PF7/19  × PF8/20  × PF9/21  ×    KEY IN THE VALUE AND PRESS THE KEY
×   - 21  ×   + 21  ×   DO    ×
-------------------------------
× PF10/22 × PF11/23 × PF12/24 ×
×  COL 1  ×  COL 41 ×   ST    ×
-------------------------------

--------------------------- RESTRICTED SUBCOMMANDS ---------------------

XB MTTR             DISPLAY DISK RECORD
XD JOBNAME DSID     LIST ANY DATASET
XI                  DISPLAY ACTIVE INITIATORS
XJ JOBNAME          DISPLAY JQE AND JOES
XP PASSWORD         REQUEST FOR PASSWORD PROMPT. PROMPT IS A BLANK SCREE
                     THE PASSWARD AND IF SUCCESSFUL A MESSAGE WILL BE IS
./ ADD  NAME=QCOMMON
         MACRO
         QCOMMON &CSECT=NO,                                            X
               &UNIT=3350,     DEFAULT UNIT NAME FOR SYS1.HASPCKPT     X
               &VOLSER=SPOOL2, DEFAULT VOLUME SERIAL FOR SYS1.HASPCKPT X
               &SID1='M268',    SYSTEM ID FOR SYSTEM #1 (UP TO 8 CHARS)X
               &SID2='M568',   SYSTEM ID FOR SYSTEM # 2                X
               &SID3=' ',      SYSTEM ID FOR SYSTEM # 3                X
               &SID4=' ',      SYSTEM ID FOR SYSTEM # 4                X
               &SID5=' ',      SYSTEM ID FOR SYSTEM # 5                X
               &SID6=' ',      SYSTEM ID FOR SYSTEM # 6                X
               &SID7=' '       SYSTEM ID FOR SYSTEM # 7
         GBLB  &QPFK      PF-KEY OPTION. SEE QSTART MACRO          ICBC
         LCLA  &SIZE      BLOCK SIZE FOR CKPT DCB
         AIF   ('&CSECT' EQ 'YES').CSECT
         TITLE 'QUEUE COMMAND - COMMON AREA DSECT'
***********************************************************************
*                                                                     *
*   QUEUE COMMAND - COMMON AREA DSECT                                 *
*                                                                     *
***********************************************************************
QCOMMON  DSECT
.CSECT   ANOP
***********************************************************************
*                                                                     *
*   VECTOR TABLE - ADDRESSES OF AREAS IN QCOMMON                      *
*                                                                     *
***********************************************************************
QVDSPL   DC    A(QDISPLAY)    PTR TO DISPLAY WORK AREA
QVDAIR   DC    A(QDAIR)       PTR TO DAIR WORK AREA
QVCKPT   DC    A(QCKPT)       PTR TO CKPT WORK AREA
QVPRINT  DC    A(QCPRINT)     PTR TO PRINT WORK AREA               FCI*
         DC    3F'0'          SPARE POINTERS RESERVED FOR FUTURE
QFRSTSA  DC    A(0)           ADDRESS OF FIRST SAVE AREA
***********************************************************************
*                                                                     *
*   MISCELLANEOUS NUTS AND BOLTS                                      *
*                                                                     *
***********************************************************************
QLOGON   DC    CL8' '         LOGON ID (JOBNAME)
QCLASSH  DC    0H'0',X'00'    HALFWORD BOUNDARY
QCLASS   DC    C' '           SEARCH CLASS
QCODEH   DC    0H'0',X'00'    HALFWORD BOUNDARY
QCODE    DC    X'00'          SEARCH FUNCTION CODE
QSUBCMD  DC    A(0)           ADDR OF CURRENT SUBCOMMAND
QOFF0    DC    H'0'           OFFSET TO SUBCOMMAND
QLNG0    DC    H'0'           LENGTH OF SUBCOMMAND
QSUBNAME DC    CL8'STATUS'    NAME OF SUBCOMMAND
QOFF1    DC    H'0'           OFFSET TO QPARM1
QLNG1    DC    H'0'           LENGTH OF QPARM1
QPARM1   DC    CL8' '         USER SUPPLIED PARAMETER #1
QOFF2    DC    H'0'
QLNG2    DC    H'0'
QPARM2   DC    CL8' '                                 #2
QOFF3    DC    H'0'
QLNG3    DC    H'0'
QPARM3   DC    CL8' '                                 #3
QOFF4    DC    H'0'
QLNG4    DC    H'0'
QPARM4   DC    CL8' '                                 #4
QXAUTH   DC    X'00'          AUTOMATIC HOLD
         DC    XL3'0'         RESERVED
QBLANK   DC    CL80' '        80 BLANKS
QFZONE   DC    C'0'           USED TO CLEAR QFZONES
QFZONES  DC    C'00000000'    USED FOR NUMERIC CHECK
QCOUNT   DC    PL3'0'         NUMBER OF ELEMENTS IN QUEUE
QCOUNTA  DC    PL3'0'         NUMBER OF ELEMENTS IN AWAITING QUEUE
QCOUNTE  DC    PL3'0'         NUMBER OF ELEMENTS IN EXECUTION QUEUE
QCOUNTH  DC    PL3'0'         NUMBER OF ELEMENTS IN HOLD QUEUE
QOFFS    DC    H'0'           START COLUMN FOR FIND
QOFFE    DC    H'0'           END COLUMN FOR FIND
QDELIMIT DC    C' '           DELIMITER
QRSVD    DC    XL15'0'        RSVD
QPJOBID  DC    F'0'           JOB ID FOR LISTDS     ** THESE TWO FIELDS
QPDSID   DC    H'0'           DATASET ID FOR LISTDS ** MUST BE CONTIG.
QPOFFSET DC    H'0'           PRINT OFFSET FROM BEGINNING OF RECORD
QPREC    DC    PL4'0'         CURRENT RECORD COUNT
QPLNG    DC    H'0'           LENGTH OF COMPARE FIELD FOR FIND
QPFIND   DC    CL58' '        COMPARE FIELD FOR FIND
QSYSID   DC    CL8' '         SYSTEM ID TABLE
* YOU MUST SUPPLY THE NAME OF EACH CPU IN YOUR COMPLEX
         DC    CL8&SID1       SYSTEM ID FOR SYSTEM 1
         DC    CL8&SID2                            2
         DC    CL8&SID3                            3
         DC    CL8&SID4                            4
         DC    CL8&SID5                            5
         DC    CL8&SID6                            6
         DC    CL8&SID7                            7
         EJECT
***********************************************************************
*                                                                     *
*   DATASET ALLOCATION FIELDS                                         *
*      (ADAPTED FROM SYS1.MACLIB (IKJDAPL,IKJDAP08,0C,18))            *
*                                                                     *
***********************************************************************
QDAIR    DS    0D             START OF DAIR WORK AREAS
DAIRECB  DC    F'0'           ECB USED BY DAIR
DAIRFLAG DC    X'00'          FLAG USED BY ALLOCATE SUBROUTINE
         DC    XL3'0'         DEAD SPACE FOR ALLIGNMENT
***********************************************************************
*    THE DYNAMIC ALLOCATION INTERFACE ROUTINE (DAIR) PARAMETER LIST   *
*    (DAPL) IS A LIST OF ADDRESSES PASSED FROM THE INVOKER TO DAIR    *
*    VIA REGISTER 1                                                   *
***********************************************************************
DAPLUPT  DC    A(0)     PTR TO UPT
DAPLECT  DC    A(0)     PTR TO ECT
DAPLECB  DC    A(DAIRECB) PTR TO CP'S ECB
DAPLPSCB DC    A(0)     PTR TO PSCB
DAPLDAPB DC    A(0)     PTR TO DAIR PARAMETER BLOCK
***********************************************************************
*                                                                     *
*   ALLOCATE DDNAME(W) DSNAME(X) SHR UNIT(Y) VOLUME(Z)                *
*                                                                     *
***********************************************************************
DA08CD   DC    X'0008'  DAIR ENTRY CODE
DA08FLG  DC    X'00'    FUNCTIONS TO BE PERFORMED WHEN RET CODE IS 0
         DC    X'00'
DA08DARC DC    H'0'     DYN ALLOC RETURN CODE
DA08CTRC DC    H'0'     CATALOG RETURN CODE
DA08PDSN DC    A(0)     POINTER TO DSNAME TO BE SEARCHED IN DSE
DA08DDN  DC    CL8' '   DDNAME TO BE SEARCHED IN DSE
* YOU MUST SUPPLY THE DEFAULT UNIT AND VOLUME SERIAL FOR YOUR SYSTEM
DA08UNIT DC    CL8'&UNIT' UNITNAME FOR SYS1.HASPCKPT
DA08SER  DC    CL8'&VOLSER' VOLUME SERIAL FOR SYS1.HASPCKPT
DA08BLK  DC    F'0'     DATA SET  AVERAGE RECORD LENGTH
DA08PQTY DC    F'0'     PRIMARY SPACE QUANTITY
DA08SQTY DC    F'0'     SECONDARY SPACE QUANTITY
DA08DQTY DC    F'0'     DIRECTORY BLOCK QUANTITY
DA08MNM  DC    CL8' '   MEMBER NAME
DA08PSWD DC    CL8' '   PASSWORD
DA08DSP1 DC    X'08'    DATA SET STATUS FLGS - SHR
DA08DPS2 DC    X'08'    DATA SET DISPOSITION - KEEP
DA08DPS3 DC    X'08'    DATA SET CONDITIONAL DISPOSITION - KEEP
DA08CTL  DC    X'00'    FLAGS TO CONTROL ACTIONS TAKEN BY DAIR
         DC    XL3'0'   RESERVED
DA08DSO  DC    X'00'    DSORG
DA08ALN  DC    CL8' '   ATTR-LIST-NAME                           C99236
***********************************************************************
*                                                                     *
*   FREE DDNAME(XXXXXXXX)                                             *
*                                                                     *
***********************************************************************
DA18CD   DC    X'0018'  DAIR ENTRY CODE
DA18FLG  DC    X'00'    FUNCTIONS TO BE PERFORMED WHEN RET CODE IS 0
         DC    X'00'
DA18DARC DC    H'0'     DYNAMIC ALLOCATION RETURN CODE
DA18CTRC DC    H'0'     CATALOG RETURN CODE AREA
DA18PDSN DC    A(0)     POINTER TO DSNAME TO BE SEARCHED IN DSE
DA18DDN  DC    CL8' '   DDNAME TO BE SEARCHED IN DSE
DA18MNM  DC    CL8' '   MEMBER NAME
DA18SCLS DC    CL2' '   SYSOUT CLASS DESIRED WHEN UNALLOCATING  A
*                       SYSOUT DATA SET
DA18DPS2 DC    X'08'    DATA SET DISPOSITION - KEEP
DA18CTL  DC    X'10'    FLAGS FOR SPECIAL DAIR PROCESSING
DA18JBNM DC    CL8' '   IGNORED AS OF OS VS/2 RELEASE 2       Y02670
         EJECT
***********************************************************************
*                                                                     *
*   CHECKPOINT WORK AREAS                                             *
*                                                                     *
***********************************************************************
* NOTE - BLOCKSIZES ARE INSTALLATION DEPENDENT
QCKPT    DS    0D
QCJQTA   DC    A(0)           ADDRESS OF JQT IOAREA
QCJOTA   DC    A(0)           ADDRESS OF JOT IOAREA
QCJCTA   DC    A(0)           ADDRESS OF JCT IOAREA
QCIOTA   DC    A(0)           ADDRESS OF IOT IOAREA
QCBLKA   DC    A(0)           ADDRESS OF DATASET BLOCK IOAREA
QCJQTL   DC    F'0'           ADDRESS OF FIRST CKPT REOCRD
QCJQEA   DC    A(0)           ADDR OF CURRENT JQE
QCJOTL   DC    F'0'           COUNT OF RECORDS ON CKPT DS
QCPDDB1  DC    F'0'           OFFSET IN IOT TO FIRST PDDB
QCTRAK   DS    0F             DISK ADDR IN THE FORM MTTR
QCTRAKM  DC    X'0'           EXTENT NUMBER
QCTRAKTT DC    X'0000'        ABSOLUTE TRACK NUMBER
QCTRAKR  DC    X'0'           RECORD NUMBER
         DC    X'0'           EXTRA SPACE NEEDED FOR HEX CONVERT
QCDAD    DS    0XL8           DISK ADDR IN THE FORM MBBCCHHR
QCDADM   DC    X'0'           EXTENT NUMBER
QCDADBB  DC    X'0000'        BIN NUMBER
QCDADCC  DC    X'0000'        CYLINDER NUMBER
QCDADHH  DC    X'0000'        HEAD NUMBER
QCDADR   DC    X'0'           RECORD NUMBER
         DC    XL3'0'         DEAD SPACE TO GET BACK TO FULLWORD
QCJQHEAD DC    A(0)           OFFSET TO JQE HEADERS
         DS    0F
QCCREC   DC    PL4'0'         CURRENT RECORD NUMBER
QCCPTR   DC    A(0)           CURRENT TABLE ADDRESS
QCHREC   DC    PL4'0'         HIGHEST RECORD NUMBER
QCHPTR   DC    A(0)           HIGHEST TABLE ADDRESS
QCSTART  DC    A(0)           ADDRESS OF TABLE START
QCEND    DC    A(0)           ADDRESS OF TABLE END
QCHLINE  DS    0CL80          HEADING LINE FOR LISTDS
         DC    C'JOB '
QCJNAME  DC    CL8' '         JOBNAME
         DC    C', DSID '
QCDSNO   DC    CL8' '         DATASET ID NUMBER
         DC    C', REC #       1'
         DC    CL40' '
QCLRECL  DC    H'0'           LRECL FOR SAVE
QCRECFM  DC    X'0'           RECFM FOR SAVE
QCSPOOLS DC    36F'0'         LIST OF DCBS FOR HASPACE
QCTRKCYL DC    36F'0'         LIST OF TRACKS/CYLINDER FOR EACH DCB
&SIZE    SETA  4096
HASPCKPT DCB   DDNAME=HASPCKPT,DSORG=PS,MACRF=(RCP),                   X
               RECFM=U,BLKSIZE=&SIZE
HASPACE  DCB   DDNAME=HASPACE1,DSORG=DA,MACRF=(RIC),OPTCD=A,           X
               RECFM=F
QCDCBL   EQU   *-HASPACE      LENGTH OF HASPACE DCB
QCOUT    DCB   DDNAME=HASPSAVE,DSORG=PS,MACRF=(PM),BUFL=8192
         READ  HDECB1,SF,HASPCKPT,,&SIZE,MF=L
         READ  HDECB2,DI,HASPACE,,0,0,QCDAD,MF=L
QCOPEN   OPEN  (QCOUT,OUTPUT),MF=L
HOCKPT   OPEN  (HASPCKPT),MF=L
***********************************************************************
*                                                                  FCI*
*   PRINT WORKAREA                                                 FCI*
*                                                                  FCI*
***********************************************************************
QCPRINT  DS    0D                                                  FCI*
QPOFF0   DC    H'0'           OFFSET TO SUBCOMMAND                 FCI*
QPLNG0   DC    H'0'           LENGTH OF SUBCOMMAND                 FCI*
QPSUBNME DC    CL8'PRINT'     NAME OF SUBCOMMAND                   FCI*
QPOFF1   DC    H'0'           OFFSET TO QPPARM1                    FCI*
QPLNG1   DC    H'0'           LENGTH OF QPPARM1                    FCI*
QPPARM1  DC    CL8' '         USER SUPPLIED PARAMETER #1           FCI*
QPOFF2   DC    H'0'                                                FCI*
QPLNG2   DC    H'0'                                                FCI*
QPPARM2  DC    CL8' '                                 #2           FCI*
QPOFF3   DC    H'0'                                                FCI*
QPLNG3   DC    H'0'                                                FCI*
QPPARM3  DC    CL8' '                                 #3           FCI*
QPOFF4   DC    H'0'                                                FCI*
QPLNG4   DC    H'0'                                                FCI*
QPPARM4  DC    CL8' '                                 #4           FCI*
QPHEAD1  DC    CL1'1'                                              FCI*
*        123456789.123456789.123456789.123456789.'                 FCI*
 DC CL40'QUEUE HARDCOPY LOG  USER=XXXXXXXX  DATE='                 FCI*
 DC CL40'YY.DDD  HH:MM:SS DAY MON DD,19XX   XXXXX'                 FCI*
         ORG   QPHEAD1+26                                          FCI*
QPUSER   DS    CL8           FOR USERID                            FCI*
         ORG   QPHEAD1+41                                          FCI*
QPDATE   DS    CL32                                                FCI*
         ORG   QPHEAD1+75                                          FCI*
QPPAGE#  DS    CL6                                                 FCI*
         ORG   ,                                                   FCI*
QPHEAD2  DS    0CL81                                               FCI*
         DC    C' ',80C'-'                                         FCI*
QPDETAIL DC    CL1' '         ASA CONTROL CHARACTER                FCI*
QPLINE   DC    CL80' '        TO HOLD PRINT LINE                   FCI*
QPPAGE   DC    PL3'1'                                              FCI*
QPFLAG   DC    XL1'00'                                             FCI*
HARDCPY  EQU   X'80'                                               FCI*
QPRSAVE  DS    CL63           SAVE AREA TO HOLD SUBTITLE INFO      FCI*
QPPWORK  DC    6F'0'          SPARE WORK ZONE                      FCI*
         DS    0F                                                  FCI*
*HASPPRNT DCB  DDNAME=HASPPRNT,DSORG=PS,MACRF=(PM),                FCI*
*              RECFM=FBA,LRECL=81,BLKSIZE=6156                     FCI*
HASPPRNT DCB   DDNAME=HASPPRNT,DSORG=PS,MACRF=(PM),                FCI*X
               RECFM=FBA,LRECL=81,BLKSIZE=6156                     FCI*
***********************************************************************
*                                                                     *
*   LIST FORM OF TPUT/TGET                                            *
*                                                                     *
***********************************************************************
QTPUT    TPUT  QDSCREEN,QDSLNG,FULLSCR,MF=L
QTGET    TGET  QDREPLY,63,MF=L
***********************************************************************
*                                                                     *
*   SAVE AREA FOR GETMAIN/FREEMAIN                                    *
*                                                                     *
***********************************************************************
QGETAREA DC    3F'0'
QGETA1   EQU   QGETAREA+0
QGETA2   EQU   QGETAREA+4
QGETA3   EQU   QGETAREA+8
QGETLNGH DC    F'65536',2F'0'
QGETL2   EQU   QGETLNGH+4
QGETL3   EQU   QGETLNGH+8
QFREE    FREEMAIN L,LA=QGETLNGH,A=QGETAREA,MF=L
         EJECT
***********************************************************************
*                                                                     *
*   DISPLAY WORK FIELDS                                               *
*                                                                     *
***********************************************************************
QDISPLAY DS    0D             START OS DISPLAY WORK AREA
         AIF   (NOT &QPFK).PFK1
PFREPLY  DS    0CL69                                               ICBC
PFCODE   DC    CL6' '                                              ICBC
PFTXT    DC    CL63' '                                             ICBC
.PFK1    ANOP
QDHORZ   DS    H                  HORIZONTAL DIMENSION (LBDMC)    LBDMC
QDVERT   DS    H                  VERTICAL DIMENSION (LBDMC)      LBDMC
QDOPT1   DS    X                  DISPLAY OPTIONS 1               LBDMC
QDOPT2   DS    X                  DISPLAY OPTIONS 2               LBDMC
         DS    XL4                ...RESERVED                     LBDMC
QDSCRNA  DC    A(0)           ADDRESS OF SCREEN  TO BE DISPLAYED  LBDMC
QDMSGA   DC    A(0)           ADDRESS OF MESSAGE TO BE DISPLAYED  LBDMC
QDMLNG   DC    H'0'           MESSAGE LENGTH                      LBDMC
QDMSG    DC    CL132' '        WORK AREA FOR BUILDING OUTPUT LINE LBDMC
QDRLNG   DC    H'6'           REPLY LENGTH                        LBDMC
QDREPLY  DC    CL63'STATUS'   TERMINAL USER REPLY                 LBDMC
         DC    C' '           RESERVED                            LBDMC
QDNEXT   DC    H'0'           CURRENT LINE NUMBER ON SCREEN       LBDMC
         DC    C' '           RESERVED                            LBDMC
QDSCREEN DS    0C             DISPLAY SCREEN                      LBDMC
QDCLEAR  DC    X'C1115D7F1140403C404000' CLEAR SCREEN             LBDMC
QDCMNDT  DC    C'QUEUE COMMAND -' TITLE LINE                      LBDMC
         ORG   *-1                                                LBDMC
QDPLUS   DC    C' '           INDICATES MORE TO BE DISPLAYED      LBDMC
         DC    X'1DC813'                                          LBDMC
QDTLINE  DC    CL63' '        SUBTITLE                            LBDMC
         DC    X'1DF0'                                            LBDMC
QDHLINE  DC    CL80' '        HEADING LINE                        LBDMC
QDSLNG   EQU   *-QDSCREEN     LENGTH OF SCREEN BUFFER             LBDMC
QDOVER   DC    X'00'          PAGE OVERFLOW INDICATOR             LBDMC
         MEND
./ ADD  NAME=QSTART
         MACRO
&NAME    QSTART &TITLE,&MAIN=NO,&TYPE=NORMAL
&NAME    START 0
***********************************************************************
*                                                                     *
*   REGISTER USAGE TABLE                                              *
*                                                                     *
***********************************************************************
R0       EQU   0              TEMP WORK
R1       EQU   1              TEMP WORK
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
R6       EQU   6              WORK REG
R7       EQU   7              WORK REG
R8       EQU   8              WORK REG
R9       EQU   9              ADDRESS OF COMMON SUB-AREA
R10      EQU   10             ADDRESS OF COMMON SUB-AREA
R11      EQU   11             ADDRESS OF COMMON VECTOR TABLE
R12      EQU   12             BASE REGISTER
R13      EQU   13             SAVE AREA AND TEMPORARY WORK AREA
R14      EQU   14             TEMP WORK
R15      EQU   15             TEMP WORK
***********************************************************************
*                                                                     *
*   GLOBAL FLAG DEFINITIONS                                           *
*                                                                     *
***********************************************************************
         GBLB  &QPFK          PF-KEY OPTION (SEE Q5 AND Q8)
&QPFK    SETB  1
*  QPFK=0 SELECTS NO PF-KEY SUPPORT
*  QPFK=1 SELECTS PF=KEY SUPPORT
         GBLB  &QACF2         ACF2 AUTH CHECKING (SEE Q6 AND Q14)  FCI*
&QACF2   SETB  0                                                   FCI*
* QACF2=0 SELECTS NO ACF2 CHECKING (SHOPS WITHOUT ACF2)            FCI*
* QACF2=1 SELECTS ACF2 AUTH TO SYSOUT VIA DSN='SYSOUT.LID.JOBNAME' FCI*
*         SEE Q6 (FINDJOB) FOR ACF2 AUTH CHECKING                  FCI*
***********************************************************************
 MNOTE *,'QPFK=&QPFK, QACF2=&QACF2 '                           PWF FCI*
***********************************************************************
*                                                                     *
*   THE QUEUE COMMAND WAS WRITTEN FOR YOUR AMUSEMENT AND AMAZEMENT BY *
*     THE INTERGALACTIC MESSIANIC INDIVIDUAL GROUP THERAPY DIVISION   *
*     OF TRW SYSTEMS, 1 SPACE PARK, REDONDO BEACH, CA. 90278          *
*   THE ORIGINAL PROGRAMMING WAS DONE BY ANDY ZIDE, CHIEF PROGRAMMER  *
*     AND RESIDENT FLAKE WHO HAS SINCE DEPARTED TRW TO PLAY WITH      *
*     MICROCODE.                                                      *
*   PLEASE ADDRESS ANY COMMENTS, SUGGESTIONS, COMPLAINTS, OR THREATS  *
*     TO STEVE ANDERSON (R3/1028)   (213) 535-0682   OR               *
*        PAUL FELIX     (R3/1028)   (213) 535-0682                    *
***********************************************************************
*                                                                     *
*   THE FOLLOWING INDIVIDUALS HAVE MADE MODIFICATIONS TO QUEUE WHICH  *
*     HAVE BEEN INCORPORATED INTO THIS CURRENT VERSION.               *
*                                                                     *
*        VILKO MACEK                                                  *
*        INSURANCE CORPORATION OF BRITISH COLUMBIA                    *
*        MODIFICATION: PFK SUPPORT                                    *
*                                                                     *
*        TRW ISD                                                      *
*        ANAHEIM, CALIFORNIA                                          *
*        MODIFICATION: DISPLAY CPU TIME FOR BATCH, STC AND TSO        *
*                      DISPLAY INITIATORS                             *
*                                                                     *
*        KEN TRUE                                                     *
*        FAIRCHILD CAMERA AND INSTRUMENT                              *
*        MOUNTAIN VIEW, CALIFORNIA                                    *
*        MODIFICATION: ACF2 SUPPORT                                   *
*                      PRINT SCREEN SUPPORT                           *
*                                                                     *
***********************************************************************
*
         AIF   ('&TYPE' EQ 'NORMAL').GO
         MEXIT
.GO      ANOP
&NAME    TITLE &TITLE
         USING *,R12          BASE REGISTER
         USING QCOMMON,R11    ACCESS TO COMMON VECTOR TABLE
         STM   R14,R12,12(R13) STANDARD REGISTER SAVE
         LR    R12,R15        LOAD BASE REG
         B     *+28           BRANCH AROUND IDENTIFIER
         DC    CL8'&NAME'     MODULE IDENTIFIER
         DC    CL8'&SYSDATE'  ASSEMBLY DATE
         DC    CL8' &SYSTIME'  ASSEMBLY TIME
         AIF   ('&MAIN' EQ 'YES').MAINYES
         LR    R15,R13        RETAIN SAVE AREA ADDR
         LA    R13,72(R13)    POINT TO NEXT SAVE AREA
         AGO   .MAINNO
.MAINYES ANOP
         LR    R2,R1          SAVE PARAMETER REGISTER
         GETMAIN R,LV=1024    GET STORAGE FOR SAVEAREA
         ST    R1,8(R13)      FORWARD POINTER
         ST    R13,4(R1)      BACKWARD POINTER
         LR    R13,R1         MOVE ADDR TO R1
         MEXIT
.MAINNO  ANOP
         ST    R13,8(R15)     FORWARD POINTER
         ST    R15,4(R13)     BACKWARD POINTER
         MEND
./ ADD  NAME=QSTOP
         MACRO
&NAME    QSTOP
&NAME    L     R13,4(R13)     LOAD NEXT LOWER SAVE AREA SET
         LM    R14,R12,12(R13) STANDARD REGISTER RESTORE
         BR    R14            RETURN TO CALLER
         MEND
./ ADD  NAME=QTILT
         MACRO
&NAME    QTILT &MESSAGE
         USING QDISPLAY,R15   BASE REG FOR DISPLAY WORK AREA
&NAME    L     R15,QVDSPL     LOAD BASE REG
         MVC   QDHLINE,=CL80&MESSAGE
         MVC   QDMLNG,=H'0'   ZERO MESSAGE LENGTH
         DROP  R15
         L     R15,=V(DISPLAY) ADDR OF DISPLAY MODULE
         LR    R14,R15        SET FOR LOOP
         BR    R15            GO TO IT
         MEND
./ ADD  NAME=QWTO
         MACRO
&NAME    QWTO  &MSG                                               LBDMC
         LCLA  &MLEN                                              LBDMC
&MLEN    SETA  K'&MSG-2                                           LBDMC
&NAME    BAL   R1,QWTO&SYSNDX                                     LBDMC
         DC    C&MSG              MESSAGE TEXT                    LBDMC
QWTO&SYSNDX MVC   QDMLNG,=H'&MLEN' SET MESSAGE LENGTH             LBDMC
         ST    R1,QDMSGA                                          LBDMC
         L     R15,=V(DISPLAY)    PTR OF DISPLAY MODULE           LBDMC
         BALR  R14,R15            GO TO IT                        LBDMC
         MEND
./ ADD  NAME=Q0
QCOMMON  QSTART TYPE=GLOBAL
         QCOMMON CSECT=YES
         END
./ ADD  NAME=Q1
         PRINT NOGEN
QUEUE    QSTART 'QUEUE COMMAND - MAINLINE MODULE',MAIN=YES
***********************************************************************
*                                                                     *
*   CALL - INITIALIZATION                                             *
*                                                                     *
***********************************************************************
         L     R15,=V(INIT)   ADDR OF INIT
         BALR  R14,R15        GO TO IT
         LA    R10,LOOP       INTERRUPTED RETURN ADDRESS
         USING QDISPLAY,R9    BASE REG FOR DISPLAY WORK AREA
         L     R9,QVDSPL      LOAD BASE REG
***********************************************************************
*                                                                     *
*   CALL - READ JES2 CHECKPOINT FILE                                  *
*                                                                     *
***********************************************************************
LOOP     L     R15,=V(CKPT)   ADDR OF CKPT
         BALR  R14,R15        GO TO IT
***********************************************************************
*                                                                     *
*   CALL - COMMAND LINE PARSE                                         *
*                                                                     *
***********************************************************************
         L     R15,=V(PARSE)  ADDR OF PARSE
         BALR  R14,R15        GO TO IT
         CLC   =C'E ',QSUBNAME STOP?
         BE    EXIT           YES.
         CLC   =C'EXIT ',QSUBNAME STOP?
         BE    EXIT           YES.
         CLC   =C'END ',QSUBNAME STOP?
         BE    EXIT           YES.
         CLC   =C'STOP ',QSUBNAME STOP?
         BE    EXIT           YES.
***********************************************************************
*                                                                     *
*   CALL - SUB-COMMAND MODULE SELECTED BY PARSE                       *
*                                                                     *
***********************************************************************
         MVC   QDHLINE,DUMMY  NO OUTPUT MESSAGE
         L     R15,QSUBCMD    ADDR OF SUBCMD FROM QCOMMON
         BALR  R14,R15        GO TO IT
         MVC   QDMLNG,=H'0'   ZERO OUT MESSAGE LENGTH
         L     R15,=V(DISPLAY) ADDR OF DISPLAY MODULE
         BALR  R14,R15        WRITE LAST SCREEN, GET NEXT INPUT
         B     LOOP           DO IT AGAIN
***********************************************************************
*                                                                     *
*   CLEAN UP AND GO HOME                                              *
*                                                                     *
***********************************************************************
EXIT     TPUT  CLEAR,L'CLEAR,FULLSCR,MF=(E,QTPUT) CLEAR SCREEN
         USING QCKPT,R8 BASE REG FOR CKPT WORK AREA
         L     R8,QVCKPT      LOAD BASE REG
         CLOSE MF=(E,HOCKPT)
         CLOSE MF=(E,QCSPOOLS)
         TM    QPFLAG,HARDCPY         IS HARDCOPY INVOKED?         FCI*
         BNO   FREEUP                   NO..SPLIT THIS STUFF       FCI*
         L     R15,=V(PRINT)               INVOKE PRINT            FCI*
         MVC   QDREPLY,QBLANK                  TO                  FCI*
         MVC   QDREPLY(09),=C'PRINT OFF'          FREE UP          FCI*
         MVC   QDRLNG,=X'0009'                        HARDCOPY     FCI*
         BALR  R14,R15                                     OUTPUT  FCI*
         EJECT
***********************************************************************
*                                                                  FCI*
*   FREE HASPCKPT AND HASPACEN DDNAMES BEFORE LEAVING TO BE NEAT.. FCI*
*                                                                  FCI*
***********************************************************************
FREEUP   MVI   DAIRFLAG,X'18'    INDICATE FREE DDNAME(XXXXXXXX)    FCI*
         MVC   DA18DDN,HASPCKPT+40  GET DDNAME USED...             FCI*
         L     R15,=V(ALLOCATE)  GET ROUTINE NAME                  FCI*
         BALR  R14,R15           GO FREE IT..                      FCI*
*
         LA    R2,QCSPOOLS       GET ADDR OF LIST OF HASPACE DCBS  FCI*
         LA    R4,35             MAX OF 35 PASSES THROUGH HERE..   FCI*
FREEUP1  L     R3,0(R2)          GET ADDRESS OF DCB TO WORK ON     FCI*
         LTR   R3,R3             ANYONE THERE?                     FCI*
         BZ    EXITQCK                                             FCI*
         MVC   DA18DDN,40(R3)    MOVE IN DDNAME FROM DCB           FCI*
         L     R15,=V(ALLOCATE)  GET ROUTINE NAME                  FCI*
         BALR  R14,R15           AND GO INVOKE DAIR TO FREE IT..   FCI*
         LA    R2,4(R2)          BUMP                              FCI*
         BCT   R4,FREEUP1                                          FCI*
***********************************************************************
*                                                                     *
*   FREE THE AREAS ACQUIRED IN INIT (Q3)                              *
*                                                                     *
***********************************************************************
EXITQCK  OI    QGETL3,X'80'   PREPARE FOR FREEMAIN             PWF FCI*
         FREEMAIN MF=(E,QFREE)
***********************************************************************
*                                                                     *
*   FREE THE TERMINAL OUTPUT AREA ACQUIRED IN INIT (Q10)              *
*                                                                     *
***********************************************************************
         L     R2,QDSCRNA         ADDR OF OUTPUT AREA
         FREEMAIN R,A=(2),LV=4096
         QSTOP
***********************************************************************
*                                                                     *
*   CONSTANTS AND OTHER ODDITIES                                      *
*                                                                     *
***********************************************************************
         LTORG
CLEAR    DC    X'C1115D7E1140403C4040001DC813'  *** SPF TCAM
DUMMY    DC    CL80'    NO DATA IS AVAILABLE FOR YOUR REQUEST'
         QCOMMON
         END
./ ADD  NAME=Q10
         PRINT NOGEN
INIT     QSTART 'QUEUE COMMAND - INITIALIZATION ROUTINES'
         $JOE
         $JOT
         TITLE 'QUEUE COMMAND - INITIALIZATION ROUTINES'
***********************************************************************
*                                                                     *
*   LOAD QCOMMON                                                      *
*                                                                     *
***********************************************************************
*
****
*******  IF YOU WANT TO CHANGE THE NAME FOR THE COMMON AREA,
****               THIS IS THE ONLY REFERENCE TO IT.
*
         LOAD  EP=QUEUECMN        QUEUE COMMON AREA
         LR    R11,R0         ADDR OF QCOMMON
         L     R1,4(R13)      PREVIOUS SAVE AREA
         ST    R11,64(R1)     UPDATE R11 IN PREVIOUS SAVE AREA
         ST    R1,QFRSTSA     STORE ADDR OF FIRST SAVEAREA IN QCOMMON
         USING QDAIR,R10      BASE REG FOR DAIR WORK
         L     R10,QVDAIR     LOAD BASE REG
         USING QCKPT,R9       BASE REG FOR CKPT WORK
         L     R9,QVCKPT      LOAD BASE REG
         USING QDISPLAY,R8    BASE REG FOR DISPLAY WORK
         L     R8,QVDSPL      LOAD BASE REG
***********************************************************************
*                                                                     *
*   MOVE PARMS FROM CPPL TO DAPL                                      *
*                                                                     *
***********************************************************************
         USING CPPL,R2        ADDR OF CPPL IS IN R2
         MVC   DAPLUPT,CPPLUPT USER PROFILE TABLE
         MVC   DAPLPSCB,CPPLPSCB PROTECTED STORAGE CNTL BLK
         MVC   DAPLECT,CPPLECT ENVIRONMENT CNTL TABLE
***********************************************************************
*                                                                     *
*   MOVE COMMAND BUFFER TO REPLY BUFFER                               *
*                                                                     *
***********************************************************************
         L     R1,CPPLCBUF    ADDR OF COMMAND BUFFER
         LH    R3,0(R1)       LENGTH OF COMMAND BUFFER
         LH    R4,2(R1)       OFFSET TO FIRST DATA BYTE
         LA    R1,4(R1,R4)    FIRST DATA BYTE
         SR    R3,R4          SUBTRACT OFFSET FROM LENGTH
         SH    R3,=H'4'       SUBTRACT OVERHEAD
         SH    R3,=H'1'       IS LENGTH ZERO?
         BM    SKIP           YES. SKIP IT.
         EX    R3,OCBUF       TRANSLATE TO UPPER CASE
         CLC   =C'CKPT(',0(1) IS REQUEST FOR CKPT?
         BE    CKPT           YES. DO IT.
         MVC   QDREPLY,QBLANK BLANK THE REPLY LINE
         CH    R3,=H'62'      IS LENGTH OVER 63?
         BNH   OK             NO. USE IT.
         LA    R3,62          USE MAXIMUM LENGTH
OK       EX    R3,MVCBUF      MOVE THE DATA
         LA    R3,1(R3)       INCREMENT TO TRUE LENGTH
         STH   R3,QDRLNG      STORE REPLY LENGTH
***********************************************************************
*                                                                     *
*   LOCATE LOGON ID, MOVE TO QLOGON                                   *
*                                                                     *
***********************************************************************
SKIP     L     R1,16          ADDR OF CVT
         L     R1,0(R1)       ADDR OF DISPATCH QUEUE
         L     R1,12(R1)      ADDR OF CURRENT ASCB
         L     R1,176(R1)     ADDR OF JOBNAME
         MVC   QLOGON,0(R1)   MOVE JOBNAME TO QLOGON
******************************************************************LBDMC
*                                                                 LBDMC
*   DETERMINE NUMBER OF ROWS, COLUMNS FOR THIS DEVICE             LBDMC
*                                                                 LBDMC
******************************************************************LBDMC
         GETMAIN R,LV=4096        GETMAIN AREA FOR TERMINAL I/O   LBDMC
         ST    R1,QDSCRNA         SAVE ADDRESS                    LBDMC
         GTSIZE ,             ISSUE TSO GET SIZE MACRO            LBDMC
         STH   R0,QDVERT      # OF LINES ON THIS TERMINAL         LBDMC
         STH   R1,QDHORZ      # OF COLUMNS PER LINE ON THIS TERMINLBDMC
*        CLC   QDHORZ,=H'80'      IS THIS A MODEL 2?              LBDMC
*        BNL   ENDTYPE                                            LBDMC
*        TPUT  TYPEMSG,L'TYPEMSG,EDIT,MF=(E,QTPUT)   TELL THE USERLBDMC
*        ABEND 0096                                               LBDMC
***********************************************************************
*                                                                     *
*   OBTAIN BLOCK ADDR TABLE FOR LISTDS                                *
*                                                                     *
***********************************************************************
ENDTYPE  GETMAIN R,LV=65536                                       LBDMC
         ST    R1,QGETA1      SAVE START ADDR OF GETMAIN
         ST    R1,QCSTART     STORE STARTING ADDR OF TABLE
         A     R1,=F'65536'   END OF TABLE
         ST    R1,QCEND
***********************************************************************
*                                                                     *
*   ALLOCATE HASPCKPT                                                 *
*                                                                     *
***********************************************************************
         MVC   DA08DDN,=CL8'HASPCKPT' DDNAME FOR ALLOCATE
         MVC   DA08PDSN,=A(DSNCKPT) DSNAME FOR ALLOCATE
         MVI   DAIRFLAG,X'08' REQUEST ALLOCATE FUNCTION
         L     R15,=V(ALLOCATE) ADDR OF ALLOCATE MODULE
         BALR  R14,R15        GO TO IT
***********************************************************************
*                                                                     *
*   OPEN HASPCKPT, READ FIRST BLOCK OF CHECKPOINT                     *
*                                                                     *
***********************************************************************
         OPEN  MF=(E,HOCKPT)  OPEN HASPCKPT
         L     R2,QCSTART     USE TABLE AREA FOR IOAREA
         POINT HASPCKPT,TIR3  POINT PAST SYNC RECORDS
         READ  HDECB1,SF,,(R2),MF=E READ FIRST RECORD
         CHECK HDECB1
***********************************************************************
*                                                                     *
*   COMPUTE OFFSET TO FIRST PDDB IN IOT                               *
*                                                                     *
***********************************************************************
         USING $SAVEBEG,R2    BASE REG FOR CHECKPOINT
         LH    R5,$NUMTGV     NUMBER OF TRACK GROUPS PER VOLUME
         LA    R5,7(R5)       ROUND UP TO MULTIPLE OF 8
         SRL   R5,3           DIVIDE BY 8
         SR    R0,R0          ZERO OUT R0
         IC    R0,$NUMDA      NUMBER OF SPOOL VOLUMES
         MR    R4,R0          LENGTH OF TRACK GROUP MAP IN R5
         LR    R1,R5          SAVE LENGTH OF TRACK GROUP MAP
         LA    R5,IOTTGMAP-IOTDSECT+TGMAP-TGMDSECT+3(R5) OFFSET
         N     R5,=F'-4'      ROUND TO FULL WORD BOUNDARY
         ST    R5,QCPDDB1     SAVE OFFSET TO FIRST PDDB IN IOT
***********************************************************************
*                                                                     *
*   COMPUTE NUMBER OF JQE BLOCKS ON CKPT                              *
*                                                                     *
***********************************************************************
         LH    R6,$MAXJOBS    NUMBER OF JQES
         LA    R6,1(,R6)       PLUS 1 FOR EYE-CATCHER
         MH    R6,=AL2(JQELNGTH) MULTIPLY BY LENGTH OF JQE
         LA    R6,4095(R6)    PREPARE TO ROUND
         SRL   R6,12          DIVIDE BY 4096
         STH   R6,QCJQTL      NUMBER OF BLOCKS FOR JQES
***********************************************************************
*                                                                     *
*   COMPUTE NUMBER OF JOT BLOCKS IN CKPT                              *
*                                                                     *
***********************************************************************
NJOTPRFX EQU   (JOTJOES-JOTDSECT)/JOESIZE
         LH    R3,$NUMJOES    NUMBER OF JOES
         LA    R3,NJOTPRFX(,R3) ADJUSTED LENGTH OF JOT PREFIX
         MH    R3,=AL2(JOESIZE) MULTIPLY BY LENGTH OF JOE
         LA    R3,4095(R3) PREPARE TO ROUND
         SRL   R3,12          DIVIDE BY 4096
         STH   R3,QCJOTL      NUMBER OF BLOCKS FOR JOT
***********************************************************************
*                                                                     *
*   COMPUTE TOTAL LENGTH OF QSES                                      *
*                                                                     *
***********************************************************************
         LA    R4,QSELEN      QSE LENGTH
         MH    R4,$QSENO      MULTIPLY LENGTH TIMES NUMBER OF QSES
         ALR   R4,R6          ADD ONE BYTE FOR EACH JQE BLOCK
         ALR   R4,R3          ADD ONE BYTE FOR EACH JOT BLOCK
***********************************************************************
*                                                                     *
*   COMPUTE HASPACE BUFFER SIZE                                       *
*                                                                     *
***********************************************************************
         LH    R5,$BUFSIZE    BLKSIZE FOR HASPACE
         STH   R5,HASPACE+62  STORE IN DCB
         STH   R5,HDECB2+6    STORE IN DECB
         LA    R5,63(R5)      PREPARE TO ROUND
         N     R5,=F'-64'     ROUND TO 64 BYTE BOUNDARY
***********************************************************************
*                                                                     *
*   OBTAIN BUFFERS FOR HASPCKPT AND HASPACE                           *
*                                                                     *
***********************************************************************
         LR    R14,R5         HASPACE BUFFER SIZE
         MH    R14,=H'3'      3 BUFFERS
         LA    R1,1(R6,R3)    NUMBER OF BLOCKS IN CKPT DS
         ST    R1,QCJOTL      STORE RECORD COUNT
         SLL   R1,12          MULTIPLY BY 4096
         LA    R0,256(R1,R14) ADD CKPT BUFFERS, HASPACE BUFFERS, SLOP
         ST    R0,QGETL2      SAVE LENGTH OF GETMAIN AREA
         GETMAIN R,LV=(0)     OBTAIN BUFFERS
         ST    R1,QGETA2      SAVE ADDRESS OF GETMAIN AREA
         ST    R1,QCJQTL      BUFFER FOR FIRST CKPT REC
         AH    R1,=H'4096'    INCREMENT
         ST    R1,QCJQTA      BUFFER FOR JQE BLOCKS
         SLL   R6,12          MULTIPLY BY 4096
         AR    R1,R6          INCREMENT
         ST    R1,QCJOTA      BUFFER FOR JOE BLOCKS
         SLL   R3,12          MULTIPLY BY 4096
         AR    R1,R3          INCREMENT
         ST    R1,QCJCTA      BUFFER FOR JCT
         AR    R1,R5          INCREMENT
         ST    R1,QCIOTA      BUFFER FOR IOT
         AR    R1,R5          INCREMENT
         ST    R1,QCBLKA      BUFFER FOR DATA BLOCKS
         LA    R1,$JQHEADS+2-$SAVEBEG OFFSET TO FIRST JQE HEADER
         A     R1,QCJQTL      BASE OF FIRST CKPT REC
         ST    R1,QCJQHEAD    ADDR OF FIRST JQE HEADER
***********************************************************************
*                                                                     *
*   ALLOCATE AND OPEN HASPACE                                         *
*                                                                     *
***********************************************************************
         LA    R3,$SAVEEND(R4) ADDR OF DA CKPT INFO
.EXIT    ANOP
         MVC   DA08DDN,=CL8'HASPACE' DDNAME FOR ALLOCATE
         MVC   DA08PDSN,=A(DSNSPACE) DSNAME FOR ALLOCATE
         SR    R4,R4          ZERO R4
         IC    R4,$NUMDA      MAXIMUM NUMBER OF SPOOL VOLUMES
         LA    R7,QCDCBL      LENGTH OF HASPACE DCB
         MR    R6,R4          COMPUTE LENGTH OF DCB POOL
         GETMAIN R,LV=(R7)    OBTAIN DCB POOL
         ST    R7,QGETL3      SAVE LENGTH OF GETMAIN
         ST    R1,QGETA3      SAVE ADDRESS OF GETMAIN
         LR    R7,R1          SAVE ADDR OF DCB POOL
         LA    R8,QCSPOOLS-4  ADDR OF OPEN LIST
         SR    R6,R6          ACTUAL NUMBER OF SPOOL VOLUMES
         MVC   DA08SER(5),$SPOOL PATTERN FOR VOLSER
SPOOL1   LA    R5,DEVTAB      ADDR OF DEVICE CHARACTERISTICS TBL
         CLI   0(R3),0        IS THIS VOLUME UNUSED?
         BE    SPOOL4         YES. TRY NEXT.
SPOOL2   CLI   0(R5),X'FF'    IS THIS THE END OF TABLE?
         BE    ABORT          YES. UNSUPPORTED DEVICE TYPE.
         CLC   0(1,R5),0(R3)  IS THIS A MATCH?
         BE    SPOOL3         YES. GO WITH IT.
         LA    R5,12(R5)      NEXT TABLE ENTRY
         B     SPOOL2         TRY NEXT ENTRY
SPOOL3   MVC   150(2,R8),2(R5) MOVE TRK/CYL TO TRK/CYL LIST
         MVC   DA08UNIT,4(R5) MOVE UNIT NAME
         MVC   DA08SER+5(1),1(R3) LAST DIGIT OF VOLSER
         LA    R6,1(R6)       INCREASE COUNT BY ONE
         STC   R6,DA08DDN+7   UPDATE DDNAME
         OI    DA08DDN+7,X'F0' MAKE IT A VALID NUMBER
         L     R15,=V(ALLOCATE) ADDR OF ALLOCATE MODULE
         BALR  R14,R15        GO TO IT
         MVC   0(QCDCBL,R7),HASPACE MOVE PATTERN DCB TO POOL
         MVC   47(1,R7),DA08DDN+7 UPDATE THE DDNAME
         ST    R7,4(R8)       STORE DCB ADDR IN OPEN LIST
         LA    R7,QCDCBL(R7)  INCREMENT TO NEXT DCB
         LA    R8,4(R8)       NEXT ENTRY IN OPEN LIST
SPOOL4   LA    R3,6(R3)       NEXT VOLUME
         BCT   R4,SPOOL1      BRANCH IF MORE VOLUMES.
         OI    0(R8),X'80'    INDICATE END OF OPEN LIST
         OPEN  MF=(E,QCSPOOLS) OPEN HASPACE
***********************************************************************
*                                                                     *
*   GO HOME                                                           *
*                                                                     *
***********************************************************************
         QSTOP
***********************************************************************
*                                                                     *
*   PROCESS REQUEST FOR DIFFERENT UNIT AND VOL ON SYS1.HASPCKPT       *
*                                                                     *
***********************************************************************
*
*** FORMAT - QUEUE CKPT(UNIT,VOLSER)
*
CKPT     MVC   DA08UNIT(16),QBLANK BLANK THE UNIT AND VOLSER FIELDS
         LA    R5,DA08UNIT    START OF UNIT FIELD
         LA    R6,DA08SER     START OF VOLSER FIELD
         SH    R3,=H'4'       SUBTRACT OVERHEAD FROM LENGTH
CKPT1    CLI   5(R1),C','     IS THIS THE END OF UNIT FIELD?
         BE    CKPT2          YES. PROCESS VOLSER NEXT.
         MVC   0(1,R5),5(R1)  MOVE ONE BYTE OF UNIT NAME
         LA    R5,1(R5)       ADD 1 TO RECEIVING ADDR
         LA    R1,1(R1)       ADD 1 TO SENDING ADDR
         BCT   R3,CKPT1       BRANCH IF NOT EXHAUSTED.
         B     ABORT2         INVALID PARAMETERS.
CKPT2    CLI   6(R1),C')'     IS THIS THE END OF VOLSER FIELD?
         BE    CKPT3          YES. CONTINUE PROCESSING.
         MVC   0(1,R6),6(R1)  MOVE ONE BYTE TO VOLSER
         LA    R6,1(R6)       ADD ONE TO RECEIVING ADDR
         LA    R1,1(R1)       ADD ONE TO SENDING ADDR
         BCT   R3,CKPT2       BRANCH IF NOT EXHAUSTED.
         B     ABORT2         INVALID PARAMETER.
CKPT3    CLI   DA08UNIT,C' '  IS THERE A UNIT?
         BE    ABORT2         NO. INVALID.
         CLI   DA08SER,C' '   IS THERE A VOLSER?
         BE    ABORT2         NO. INVALID.
         CLI   DA08BLK,0      DID WE GO TOO FAR?
         BE    SKIP           NO. EVERTHING LOOKS GOOD.
ABORT2   TPUT  MESSAGE2,L'MESSAGE2,EDIT,MF=(E,QTPUT) TELL THE USER
         ABEND 97,DUMP        QUIT
***********************************************************************
*                                                                     *
*   UNSUPPORTED DEVICE TYPE. ABORT.                                   *
*                                                                     *
***********************************************************************
ABORT    TPUT  MESSAGE,L'MESSAGE,EDIT,MF=(E,QTPUT)   TELL THE USER
         ABEND 98,DUMP        QUIT.
***********************************************************************
*                                                                     *
*   MISCELLANY                                                        *
*                                                                     *
***********************************************************************
         LTORG
OCBUF    OC    0(1,R1),QBLANK TRANSLATE COMMAND TO UPPER CASE
MVCBUF   MVC   QDREPLY(1),0(R1) MOVE DATA TO REPLY
DEVTAB   DC    X'0900',H'19',CL8'3330' DEVTYPE,TRK/CYL,DEVNAME
         DC    X'0B00',H'30',CL8'3350'
         DC    X'0D00',H'19',CL8'3330-1'
         DC    X'FFFF'
         DS    0F
TIR3     DC    X'00000300'    POINT PAST SYNC RECORDS
DSNCKPT  DC    H'13',CL44'SYS1.HASPCKPT'
DSNSPACE DC    H'12',CL44'SYS1.HASPACE'
TYPEMSG  DC    C'3277-1 AND 3278-1 TERMINALS NOT SUPPORTED BY QUEUE'
MESSAGE  DC    C'UNSUPPORTED DEVICE TYPE SPECIFIED FOR SPOOL'
MESSAGE2 DC    C'INVALID PARAMETER SPECIFIED - CKPT(UNIT,VOLSER)'
         GBLC  &VERSION
&VERSION SETC  '0'
BASE1    EQU   0
$RPS     EQU   0
$MSGID   EQU   0
$DUPVOLT EQU   0
$PRIOOPT EQU   0
$PRTBOPT EQU   0
$PRTRANS EQU   0
$QSONDA  EQU   0
BUFSTART EQU   0
BUFDSECT EQU   0
         $TAB
         $QSE
         $HCT
         $IOT
         $TGM
         $JQE
         IKJCPPL
         QCOMMON
         END
./ ADD  NAME=Q11
         PRINT NOGEN
JCL      QSTART 'QUEUE COMMAND - LIST THE JCL FOR A JOB'
***********************************************************************
*                                                                     *
*   CALL FINDJOB TO LOCATE THE JQE, JCT, AND IOT                      *
*                                                                     *
***********************************************************************
         L     R15,=V(FINDJOB) ADDR OF MODULE TO FIND JOB
         BALR  R14,R15        GO TO IT
***********************************************************************
*                                                                     *
*   CALL LISTDS TO LIST THE DATASET                                   *
*                                                                     *
***********************************************************************
         MVC   QPOFFSET,=H'10' PRINT OFFSET FOR EACH RECORD
         MVC   QPDSID,=H'3'   DSID OF DATASET TO BE PRINTED
         L     R15,=V(LISTDS) ADDR OF LISTDS MODULE
         BALR  R14,R15        GO TO IT
         QSTOP
         LTORG
         QCOMMON
         END
./ ADD  NAME=Q12
         PRINT NOGEN
JLOG     QSTART 'QUEUE COMMAND - LIST THE JOBLOG MESSAGES FOR A JOB'
         USING QCKPT,R10      BASE REG FOR CKPT WORK AREA
         L     R10,QVCKPT     LOAD BASE REG
***********************************************************************
*                                                                     *
*   CALL FINDJOB TO LOCATE THE JQE, JCT, AND IOT                      *
*                                                                     *
***********************************************************************
         L     R15,=V(FINDJOB) ADDR OF MODULE TO FIND JOB
         BALR  R14,R15        GO TO IT
***********************************************************************
*                                                                     *
*   DETERMINE IF JOB LOG IS AVAILABLE                                 *
*                                                                     *
***********************************************************************
         USING PDBDSECT,R2    BASE REG FOR PDDB
         USING IOTDSECT,R3    BASE REG FOR IOT
         USING JQEDSECT,R6    BASE REG FOR JQE                HNB*DED
         L     R6,QCJQEA      LOAD BASE REG                   HNB*DED
         L     R3,QCIOTA      LOAD BASE REG
NEXTIOT  LR    R4,R3          BASE OF IOT
         A     R4,IOTPDDBP    OFFSET BEYOND LAST PDDB
         LR    R2,R3          BASE OF IOT
         A     R2,QCPDDB1     OFFSET TO FIRST PDDB IN JOT
FINDDS   CLC   PDBDSKEY,=H'2' IS THIS THE JOB LOG
         BE    TESTNIP        YES. IS JOB ON INPUT QUEUE ?    HNB*DED
*        BE    FOUNDDS        YES. CONTINUE.                  HNB*DED
         LA    R2,PDBLENG(R2) NO. LOOK AT NEXT PDDB
         CR    R2,R4          HAVE WE GONE PAST THE LAST PDDB
         BL    FINDDS         NO. TRY AGAIN
         B     TILT
TESTNIP  CLI   JQEFLAGS,0     IS JOB ON INPUT QUEUE ?         HNB*DED
         BNE   TESTACT        YES. IS JOB RUNNING             HNB*DED
         B     OK             NO.. OK SHOW USER               HNB*DED
TESTACT  TM    JQEFLAGS,QUEBUSY IS JOB RUNNING ?              HNB*DED
         BZ    TILT2         NO.. TELL USER IS ON INPUT QUEUE HNB*DED
         B     OK             YES. OK SHOW USER               HNB*DED
FOUNDDS  CLC   PDBRECCT,=F'1' IS JOB LOG EMPTY
         BE    TILT           YES, SAY SO
***********************************************************************
*                                                                     *
*   CALL LISTDS TO LIST THE DATASET                                   *
*                                                                     *
***********************************************************************
OK       MVC   QPOFFSET,=H'0' PRINT OFFSET FOR EACH RECORD    HNB*DED
         MVC   QPDSID,=H'2'   DSID OF DATASET TO BE PRINTED
         L     R15,=V(LISTDS) ADDR OF LISTDS MODULE
         BALR  R14,R15        GO TO IT
         QSTOP
TILT     QTILT '*** JOBLOG IS NOT AVAILABLE ***'
TILT2    QTILT '*** JOB IS ON INPUT QUEUE  ***'               HNB*DED
         LTORG
JCT      EQU   0
BUFSTART EQU   0
BUFDSECT EQU   0
         $JQE
         $TAB
         $JCT
         $IOT
         $PDDB
         QCOMMON
         END
./ ADD  NAME=Q13
         PRINT NOGEN
JMSG     QSTART 'QUEUE COMMAND - LIST THE SYSTEM MESSAGES FOR A JOB'
***********************************************************************
*                                                                     *
*   CALL FINDJOB TO LOCATE THE JQE, JCT, AND IOT                      *
*                                                                     *
***********************************************************************
         L     R15,=V(FINDJOB) ADDR OF MODULE TO FIND JOB
         BALR  R14,R15        GO TO IT
***********************************************************************
*                                                                     *
*   CALL LISTDS TO LIST THE DATASET                                   *
*                                                                     *
***********************************************************************
         MVC   QPOFFSET,=H'0' PRINT OFFSET FOR EACH RECORD
         MVC   QPDSID,=H'4'   DSID OF DATASET TO BE PRINTED
         L     R15,=V(LISTDS) ADDR OF LISTDS MODULE
         BALR  R14,R15        GO TO IT
         QSTOP
         LTORG
         QCOMMON
         END
./ ADD  NAME=Q14
         PRINT NOGEN
LIST     QSTART 'QUEUE COMMAND - PRINT A DATASET FROM SPOOL BY ID'
         GBLB  &QACF2         IS ACF2 AUTH CHECKING TO BE DONE     FCI*
         USING QCKPT,R10      BASE REG FOR CKPT WORK AREA
         L     R10,QVCKPT     LOAD BASE REG
         USING WORK,R13       BASE REG FOR TEMP WORK
***********************************************************************
*                                                                     *
*   CALL FINDJOB TO LOCATE THE JQE, JCT, AND IOT                      *
*                                                                     *
***********************************************************************
         L     R15,=V(FINDJOB) ADDR OF MODULE TO FIND JOB
         BALR  R14,R15        GO TO IT
***********************************************************************
*                                                                     *
*   ENSURE JOBNAME BEGINS WITH USER ID                                *
*                                                                     *
***********************************************************************
         L     R9,QCJCTA      ADDR OF JCT
         USING JCTDSECT,R9    BASE REG FOR JCT
         LA    R2,7           MAXIMUM LENGTH OF USER ID
         LA    R3,QLOGON+7    LAST BYTE OF USER ID
LOOP     CLI   0(R3),C' '     IS THIS BYTE BLANK?
         BNE   CHECK          NO. CONTINUE.
         BCTR  R3,0           TRY PREVIOUS BYTE
         BCT   R2,LOOP        TRY AGAIN
CHECK    EQU   *
         TM    JCTJOBFL,JCTSTCJB
         BO    GOODNM
         CLC   JCTJNAME(8),=C'XH904IMS'
         BE    GOODNM
         CLC   JCTJNAME(4),=C'X239'
         BE    GOODNM
         CLC   JCTJNAME(3),=C'IMS'
         BE    GOODNM
         CLC   JCTJNAME(6),=C'XH904R'
         BE    GOODNM
         CLC   QLOGON(4),JCTJNAME    JOBNAME VALID?
         BNE   TILT2          NO. TILT.
***********************************************************************
*                                                                     *
***********************************************************************
*                                                                     *
*   CHECK AND CONVERT THE DATASET ID NUMBER                           *
*                                                                     *
***********************************************************************
GOODNM   LH    R2,QLNG2       LENGTH OF DATASET ID FIELD
         SH    R2,=H'1'       IS THE DATASET ID FIELD ZERO LENGTH?
         BM    TILT           YES. QUIT.
         MVC   QFZONES,QFZONE INITIALIZE NUMERIC TEST
         EX    R2,MVZ         MOVE THE ZONES FOR VALIDITY CHECK
         CLC   QFZONES,QFZONE IS THE FIELD NUMERIC?
         BNE   TILT           NO. QUIT.
         EX    R2,PACK        PACK THE FIELD
         CVB   R2,CONVERT     CONVERT TO BINARY
         CH    R2,=H'101'     IS THE DATASET ID LESS THAN 101?
         BL    TILT           YES. TILT.
         STH   R2,QPDSID      STORE DATASET ID
***********************************************************************
*                                                                     *
*   CHECK AND CONVERT THE PRINT OFFSET                                *
*                                                                     *
***********************************************************************
         MVC   QPOFFSET,=H'0' DEFAULT TO ZERO
         LH    R2,QLNG3       LENGTH OF OFFSET FIELD
         SH    R2,=H'1'       IS THE OFFSET FIELD ZERO LENGTH?
         BM    CALLLIST       YES. USE ZERO OFFSET.
         MVC   QFZONES,QFZONE INITIALIZE NUMERIC TEST
         EX    R2,MVZ2        MOVE THE ZONES FOR VALIDITY CHECK
         CLC   QFZONES,QFZONE IS THE FIELD NUMERIC?
         BNE   TILT           NO. QUIT.
         EX    R2,PACK2       PACK THE FIELD
         CVB   R2,CONVERT     CONVERT TO BINARY
         STH   R2,QPOFFSET    STORE OFFSET
***********************************************************************
*                                                                     *
*   CALL LISTDS TO LIST THE DATASET                                   *
*                                                                     *
***********************************************************************
CALLLIST L     R15,=V(LISTDS) ADDR OF LISTDS MODULE
         BALR  R14,R15        GO TO IT
         QSTOP
TILT     QTILT '*** DATASET ID INVALID ***'
TILT2    QTILT '*** JOBNAME MUST BEGIN WITH USERID ***'
***********************************************************************
*                                                                     *
*   MISCELLANY                                                        *
*                                                                     *
***********************************************************************
CLC      CLC   QLOGON(1),JCTJNAME IS THE JOBNAME EQUAL TO USERID
MVZ      MVZ   QFZONES(1),QPARM2 CHECK FOR NUMERIC
MVZ2     MVZ   QFZONES(1),QPARM3 CHECK FOR NUMERIC
PACK     PACK  CONVERT,QPARM2(1) CONVERT TO BINARY
PACK2    PACK  CONVERT,QPARM3(1) CONVERT TO BINARY
         LTORG
JCT      EQU   0
BUFSTART EQU   0
BUFDSECT EQU   0
         $JCT
WORK     DSECT
         DS    72C
CONVERT  DS    D
         QCOMMON
         END
./ ADD  NAME=Q15
         PRINT NOGEN
LISTDS   QSTART 'QUEUE COMMAND - LIST A DATASET FROM THE SPOOL PACK'
         USING QCKPT,R10      BASE REG FOR CHECKPOINT WORK AREA
         L     R10,QVCKPT     LOAD BASE REG
         USING QDISPLAY,R9    BASE REG FOR DISPLAY WORK AREA
         L     R9,QVDSPL      LOAD BASE REG
         USING WORK,R13       BASE REG FOR LOCAL WORK
***********************************************************************
*                                                                     *
*   DETERMINE FUNCTION REQUESTED                                      *
*                                                                     *
***********************************************************************
         CLI   QCODE,0        IS THE REQUEST FOR REPOSITIONING?
         BNE   REPOS          YES. DO IT.
***********************************************************************
*                                                                     *
*   LOCATE PDDB FOR DATASET SPECIFIED IN QPDSID                       *
*                                                                     *
***********************************************************************
NORMAL   MVI   SWITCH,0       INITIALIZE SWITCH
         USING PDBDSECT,R2    BASE REG FOR PDDB
         USING IOTDSECT,R3    BASE REG FOR IOT
         L     R3,QCIOTA      LOAD BASE REG
         LR    R5,R3          IOAREA FOR READ IOT BLOCK
NEXTIOT  LR    R4,R3          BASE OF IOT
         A     R4,IOTPDDBP    OFFSET BEYOND LAST PDDB
         LR    R2,R3          BASE OF IOT
         A     R2,QCPDDB1     OFFSET TO FIRST PDDB IN IOT
FINDDS   CLC   QPDSID,PDBDSKEY IS THIS THE DATASET?
         BE    FOUNDDS        YES. CONTINUE.
         LA    R2,PDBLENG(R2) NO. LOOK AT NEXT PDDB.
         CR    R2,R4          HAVE WE GONE PAST THE LAST PDDB?
         BL    FINDDS         NO. TRY AGAIN.
         L     R4,IOTIOTTR    DISK ADDR OF NEXT IOT
SPIN     LTR   R4,R4          IS THERE ANOTHER IOT?
         BZ    SPINIOT        NO. TRY THE SPIN IOT?
         BAL   R8,READ        READ THE IOT
         B     NEXTIOT        SEARCH THE NEXT IOT
         USING JCTDSECT,R1    BASE REG FOR JCT
SPINIOT  TM    SWITCH,1       DID WE SEARCH THE SPINIOT ALREADY?
         BO    TILT           YES. TILT.
         OI    SWITCH,1       SET SWITCH
         L     R1,QCJCTA      LOAD BASE REG
         L     R4,JCTSPIOT    DISK ADDR OF SPIN IOT
         DROP  R1
         B     SPIN           SEARCH THE SPIN IOT CHAIN
TILT     MVC   QPDSID,=H'0'   INVALIDATE DSID
         QTILT '*** DATASET ID NOT FOUND ***'
TILT2    QTILT '*** DATASET TABLE LIMITS EXCEEDED ***'
FOUNDDS  MVC   QCJNAME,QPARM1 SAVE THE JOBNAME
         MVC   QCDSNO,QPARM2  SAVE THE DATASET ID NUMBER
         MVC   QDHLINE,QCHLINE MOVE IN HEADING LINE
         MVC   QCRECFM,PDBRECFM RECORD FORMAT FOR SAVE
         MVC   QCLRECL,PDBLRECL RECORD LENGTH FOR SAVE
         L     R4,PDBMTTR     DISK ADDR OF FIRST BLOCK
         L     R5,QCBLKA      ADDR OF DATASET BLOCK IOAREA
         L     R2,QCSTART     BEGINNING OF DISK ADDR TABLE
         ZAP   QCCREC,=P'0'   ZERO CURRENT RECORD NO
         MVC   QCCPTR,QCSTART BEGIN OF TBL
         ZAP   QCHREC,=P'0'   ZERO HIGH REC NO
         MVC   QCHPTR,QCSTART BEGIN OF TBL
         ZAP   QPREC,=P'1'    REPOSITION TO TOP OF DATASET
         B     FIRST          PROCESS DATASET
         DROP  R2
         DROP  R3
***********************************************************************
*                                                                     *
*   PROCESS DATASET                                                   *
*                                                                     *
***********************************************************************
NEXTBLK  L     R4,0(R5)       DISK ADDR OF NEXT BLOCK
FIRST    LTR   R4,R4          IS THE DISK ADDR ZERO?
         BZ    END            YES. END OF DATASET.
         ST    R4,0(R2)       STORE DISK ADDR IN TABLE
         BAL   R8,READ        READ A BLOCK
         CLC   QPJOBID(6),4(R5) DOES THE JOBID MATCH?
         BNE   END            NO. END OF DATASET.
         MVC   4(4,R2),QCCREC STORE CURRENT REC NUM IN TABLE
         ST    R2,QCCPTR      STORE CURRENT TABLE ADDR
         CP    QCCREC,QCHREC  IS THE CURRENT REC NO > HIGHEST?
         BNH   NOTHI          NO. SKIP.
         MVC   QCHREC(8),QCCREC REPLACE HI REC CNT AND PTR
NOTHI    LA    R2,8(R2)       INCREMENT TO NEXT TBL ENTRY
         C     R2,QCEND       IS THIS THE END OF TABLE?
         BNL   TILT2          YES. TILT.
         LA    R4,10(R5)      ADDR OF FIRST RECORD IN BLOCK
***********************************************************************
*                                                                     *
*   PROCESS RECORDS                                                   *
*                                                                     *
***********************************************************************
NEXTREC  CLI   0(R4),X'FF'    IS LENGTH BYTE FF?
         BE    NEXTBLK        YES. END OF BLOCK.
         TM    1(R4),X'10'    IS THIS A SPANNED RECORD?
         BO    SPAN           YES. SKIP IT.
         SR    R6,R6          ZERO OUT REG
         IC    R6,0(R4)       INSERT LENGTH
         LR    R7,R6          SAVE RECORD LENGTH
         LR    R1,R4          SAVE RECORD LOCATION
         TM    1(R4),X'80'    IS CARRIAGE CONTROL SPECIFIED?
         BZ    NOCCTL         NO. CONTINUE.
         LA    R1,1(R1)       SKIP OVER CARRIAGE CONTROL
NOCCTL   TM    1(R4),X'08'    IS THIS RECORD TO BE IGNORED?
         LR    R4,R1          UPDATE RECORD POINTER
         BNZ   SKIPREC        YES. SKIP IT.
         AP    QCCREC,=P'1'   ADD ONE TO CUR REC NO
         CP    QCCREC,QPREC   HAVE WE REACHED THE RECORD WE WANT?
         BL    SKIPREC        NO. TRY NEXT RECORD.
         CLI   QCODE,4        IS THE REQUEST FOR A FIND?
         BE    FIND           YES. DO IT.
         CLI   QCODE,8        IS THE REQUEST FOR A FINDTIME?
         BE    FINDTIME       YES. DO IT.
FINDOFF  AH    R1,QPOFFSET    ADD OFFSET TO START OF RECORD
         XC    OVERFLOW,OVERFLOW  RESET OVERFLOW INDICATOR        LBDMC
         SH    R7,QPOFFSET    SUBTRACT OFFSET FROM LENGTH
         BNP   ZEROPRT        NO DATA LEFT IN RECORD.
         CH    R7,QDHORZ      IS THE RECORD BIGGER THAN LINE WIDTHLBDMC
         BNH   LTHORZ         NO. USE RECORD LENGTH.
         SH    R7,QDHORZ          AMOUNT OF OVERFLOW              LBDMC
         STH   R7,OVERFLOW         SAVE OVERFLOW LENGTH           LBDMC
         LH    R7,QDHORZ           YES. USE LINE WIDTH            LBDMC
LTHORZ   STH   R7,QDMLNG      STORE MESSAGE LENGTH
         LA    R1,3(R1)       OFFSET PAST REC HDR
         ST    R1,QDMSGA      STORE ADDR OF MESSAGE LINE
         TM    QDOPT1,X'80'       DISPLAY BLANK LINES?            LBDMC
         BNO   SKPTST1             YES, SKIP BLANK TEST           LBDMC
         BCTR  R7,0               LENGTH RELATIVE TO ZERO         LBDMC
         EX    R7,TSTBLNKS        TEST FOR ALL BLANKS             LBDMC
         BNE   SKPTST1             NO, DISPLAY LINE               LBDMC
         CLI   SWITCH2,X'01'      IS THIS 2 IN A ROW?             LBDMC
         BE    SKIPREC             YES, SKIP THIS RECORD          LBDMC
         MVI   SWITCH2,X'01'      SET SWITCH ON                   LBDMC
         B     BALRQ5             DON'T RESET THE SWITCH YET      LBDMC
SKPTST1  XC    SWITCH2,SWITCH2    CLEAR SWITCH                    LBDMC
BALRQ5   L     R15,=V(DISPLAY) ADDRESS OF DISPLAY MODULE          LBDMC
         BALR  R14,R15        GO TO IT
         TM    QDOPT1,X'40'       SHOW OVERFLOW DATA?             LBDMC
         BNO   NOOVFL              NO, OK.                        LBDMC
         CLC   OVERFLOW,=H'0'     ANY OVERFLOW?                   LBDMC
         BNH   NOOVFL              NO, NO PROBLEM                 LBDMC
         AH    R1,QDHORZ          ADJUST INPUT START              LBDMC
         LH    R7,OVERFLOW        SET OVERFLOW LENGTH             LBDMC
         CH    R7,QDHORZ      IS THE RECORD BIGGER THAN LINE WIDTHLBDMC
         BNH   LTHORZ2        NO. USE RECORD LENGTH.
         LH    R7,QDHORZ           YES. USE LINE WIDTH            LBDMC
LTHORZ2  STH   R7,QDMLNG      STORE MESSAGE LENGTH
         BCTR  R7,0               LENGTH RELATIVE TO ZERO         LBDMC
         EX    R7,TSTBLNKS        TEST FOR ALL BLANKS             LBDMC
         BE    NOOVFL              IF BLANKS, SKIP IT             LBDMC
         ST    R1,QDMSGA      STORE ADDR OF MESSAGE LINE          LBDMC
         L     R15,=V(DISPLAY) ADDRESS OF DISPLAY MODULE          LBDMC
         BALR  R14,R15        GO TO IT                            LBDMC
NOOVFL   DS    0H                                                 LBDMC
         XC    OVERFLOW,OVERFLOW  AVOID A LOOP                    LBDMC
         TM    QDOVER,1       WAS THERE A PAGE OVERFLOW?
         BNO   SKIPREC        NO. SKIP.
         ZAP   QPREC,QCCREC   UPDATE THE REPOSITION NUMBER
         MVC   HREC,EDIT      PATTERN FOR EDIT
         ED    HREC,QCCREC    EDIT RECORD NUMBER
SKIPREC  LA    R4,3(R6,R4)    INCREMENT TO NEXT RECORD
         B     NEXTREC        PROCESS NEXT RECORD
SPAN     LH    R6,2(R4)       LENGTH OF SEGMENT
         TM    1(R4),X'08'    IS THIS THE FIRST SEGMENT?
         BO    SPANFRST       YES. USE HEADER LENGTH OF 6.
         LA    R4,4(R6,R4)    UPDATE RECORD POSITION
         B     NEXTREC        PROCESS NEXT RECORD
SPANFRST LA    R4,6(R6,R4)    UPDATE RECORD POSITION
         B     NEXTREC        PROCESS NEXT RECORD
ZEROPRT  LA    R1,QBLANK      PRINT A BLANK
         LA    R7,1           LENGTH OF ONE
         B     LTHORZ         PRINT THE RECORD
END      CP    QCCREC,=P'0'   IS THE DATASET EMPTY
         BE    STOP           YES. QUIT.
         MVC   HEND,ENDLINE   TELL THEM THIS IS THE END
         MVC   HREND,EDIT     PATTERN FOR EDIT
         ED    HREND,QCCREC   LAST REC NO
         CLI   QCODE,32       WAS REQUEST FOR BOTTOM?
         BE    BOTTOM         YES. BACK UP 21 LINES.
         MVC   QDMLNG,=H'0'   ZERO OUT MESSAGE LENGTH
         L     R15,=V(DISPLAY) ADDR OF DISPLAY MODULE
         BALR  R14,R15        FLUSH THE SCREEN
         ZAP   QPREC,=P'1'    RECORD NUMBER 1
         MVC   QDHLINE,QCHLINE BLANK THE TITLE LINE
         B     TOP            START AT TOP OF DATASET
STOP     XC    QPDSID,QPDSID  MAKE USER SPECIFY A NEW DATA SET
         MVC   QDHLINE,=CL80'*** DATA SET IS EMPTY ***'
         QSTOP
TSTBLNKS CLC   0(1,R1),=CL132' '  TEST LINE FOR BLANKS            LBDMC
***********************************************************************
*                                                                     *
*   BOTTOM OF DATASET                                                 *
*                                                                     *
***********************************************************************
BOTTOM   ZAP   QPREC,QCCREC   LAST RECORD NUMBER
         MVI   QCODE,0        AVOID A LOOP
         LH    R0,QDVERT          # OF LINES FOR THIS TERMINAL    LBDMC
         SH    R0,=H'3'           - OVERHEAD                      LBDMC
         CVD   R0,CONVERT         CONVERTED TO DECIMAL            LBDMC
         SP    QPREC,CONVERT+6(2) TOP OF PAGE                     LBDMC
         BP    REPOS          CONTINUE IF POSITIVE.
         ZAP   QPREC,=P'1'    TOP OF DATASET
***********************************************************************
*                                                                     *
*   REPOSITION TO REQUESTED RECORD NUMBER                             *
*                                                                     *
***********************************************************************
REPOS    MVC   QDHLINE,QCHLINE MOVE IN HEADING LINE
         MVC   HREC,EDIT      PREPARE FOR EDIT
         ED    HREC,QPREC     EDIT RECORD NUMBER
         CP    QPREC,QCHREC   IS THE REQ NO > HIGHEST READ?
         BNL   HI             YES. GO FROM HI.
         CP    QPREC,QCCREC   IS THE REQ NO > CURRENT REC?
         BH    UP             YES. GO FROM CURRENT.
         CP    QPREC,=P'1'    IS REQ FOR TOP OF DATASET?
         BH    DOWN           NO. GO DOWN FROM CURRENT.
TOP      L     R2,QCSTART     START AT TOP
RESUME   L     R4,0(R2)       LOAD DISK ADDR
         L     R5,QCBLKA      ADDR OF BLOCK IOAREA
         MVC   QCCREC,4(R2)   RESET CURRENT REC NO
         B     FIRST          RESUME PROCESSING
HI       L     R2,QCHPTR      START AT HIGHEST SO FAR
         B     DOWNLOOP       FIND CORRECT BLOCK
UP       L     R2,QCCPTR      CURRENT TABLE PTR
UPLOOP   CP    QPREC,12(4,R2) IS THE NEXT ENTRY > REQ NO?
         BNH   RESUME         YES. PROCESS IT.
         CP    4(4,R2),12(4,R2)   IS NEXT < THAN CURRENT?         LBDMC
         BL    RESUME              YES, USE THIS ONE              LBDMC
         LA    R2,8(R2)       TRY NEXT ENTRY
         B     UPLOOP         AGAIN
DOWN     L     R2,QCCPTR      CURRENT TABLE PTR
DOWNLOOP CP    QPREC,4(4,R2)  IS THE ENTRY < REQ NO?
         BH    RESUME         YES. PROCESS IT.
         SH    R2,=H'8'       TRY PREVIOUS ENTRY
         B     DOWNLOOP       AGAIN
***********************************************************************
*                                                                     *
*   FIND MATCHING RECORD ROUTINE                                      *
*                                                                     *
***********************************************************************
FIND     LH    R3,QPLNG       LENGTH-1 OF COMPARE
         LR    R14,R6         LENGTH OF RECORD
         SR    R14,R3         NUMBER OF COMPARES
         BNP   SKIPREC        RECORD IS TOO SMALL. SKIP IT.
         LR    R15,R4         FIRST BYTE OF RECORD
         CLC   QOFFE,=H'0'    END RANGE FOR FIND SPECIFIED ?
         BE    FLOOP          NO. BYPASS RANGE FOR FIND
         AH    R15,QOFFS      YES. START ADDR FOR FIND
         LH    R14,QOFFE      END ADDR FOR FIND
         SH    R14,QOFFS      VALID RANGE ?
         BP    FLOOP          YES. CONTINUE PROCESSING
         QTILT ' *** ERROR IN COLUMN SPECIFICATION ***'
FLOOP    EX    R3,CLC         DOES THE FIND DATA MATCH THE RECORD?
         BE    MATCH          YES. DISCONTINUE SEARCH.
         LA    R15,1(R15)     INCREMENT TO NEXT BYTE
         BCT   R14,FLOOP      TRY NEXT BYTE
         B     SKIPREC        SKIP THE RECORD. NO MATCH.
MATCH    CLI   QSUBNAME+1,C'A' IS THE REQUEST FOR A FINDALL?
         BE    FALL           YES. DO NOT DISABLE SEARCH.
         MVI   QCODE,0        END THE SEARCH
         ZAP   QPREC,QCCREC   UPDATE THE REPOSITION NUMBER
FALL     MVC   HREC,EDIT      PREPARE FOR EDIT
         ED    HREC,QCCREC    EDIT RECORD NUMBER
         B     FINDOFF        CONTINUE
CLC      CLC   QPFIND(1),3(R15) COMPARE PARM TO RECORD
***********************************************************************
*                                                                     *
*   FIND THE RECORD WHICH IS GREATER THAN OR EQUAL TO TIME            *
*                                                                     *
***********************************************************************
FINDTIME CLI   10(R4),C'.'    DOES THIS RECORD HAVE TIME?
         BNE   SKIPREC        NO. SKIP IT.
         CLC   QPARM1,8(R4)   IS THIS THE TIME WE WANT?
         BH    SKIPREC        NO. SKIP IT.
         B     MATCH          END THE SEARCH
***********************************************************************
*                                                                     *
*   READ A BLOCK FROM HASPACE                                         *
*                                                                     *
***********************************************************************
READ     ST    R4,QCTRAK      STORE DISK ADDR
         LR    R1,R5          IOAREA ADDRESS
         L     R15,=V(READSPC) ADDR OF ROUTINE TO READ HASPACE
         BALR  R14,R15        GO TO IT
         BR    R8             RETURN TO CALLER
***********************************************************************
*                                                                     *
*   MISCELLANY                                                        *
*                                                                     *
***********************************************************************
         LTORG
ENDLINE  DC    C', END OF DATA. LAST REC #'
EDIT     DC    X'4020202020202021'
         DC    CL45' '
JCT      EQU   0
BUFSTART EQU   0
BUFDSECT EQU   0
         $TAB
         $JCT
         $IOT
         $PDDB
         QCOMMON
         ORG   QDHLINE
         DS    C'JOB XXXXXXXX, DSID XXXXXXXX, REC #'
HREC     DS    CL8
HEND     DS    C', END OF DATA. LAST REC #'
HREND    DS    CL8
WORK     DSECT
         DS    CL72
SWITCH   DS    C
SWITCH2  DS    X                                                  LBDMC
CONVERT  DS    D
OVERFLOW DS    H                                                  LBDMC
         END
./ ADD  NAME=Q16
         PRINT NOGEN
PARSE    QSTART 'QUEUE COMMAND - COMMAND LINE PARSE ROUTINES'
         USING QDISPLAY,R10   BASE REG FOR DISPLAY WORK AREA
         L     R10,QVDSPL     LOAD BASE REG
         USING WORK,R13       BASE REG FOR LOCAL WORK AREA
***********************************************************************
*                                                                     *
*   PARSE SUBCOMMAND NAME                                             *
*                                                                     *
***********************************************************************
         LH    R2,QDRLNG      LENGTH OF REPLY LINE
         OC    QDREPLY,QBLANK TRANSLATE TO UPPER CASE
         CLC   QDREPLY,QBLANK IS THE ENTIRE REPLY BLANK?
         BE    LOOKUP         YES. DO LOOKUP.
         MVC   QDTLINE,QDREPLY MOVE COMMAND LINE TO HEADING
         MVC   FIELD,QBLANK   BLANK THE WORK FIELD
         MVC   OFFSET(4),=F'0' ZERO THE OFFSET AND LENGTH
         MVC   QOFF0(12),OFFSET INITIALIZE FIRST FIELD
         MVC   QOFF1(48),QOFF0 INITIALIZE NEXT FOUR FIELDS
         LA    R6,QOFF4+12    ADDR PAST LAST FIELD
         LA    R5,QOFF0       ADDR OF FIRST SET OF FIELDS
         LA    R3,QDREPLY     FIRST BYTE OF REPLY LINE
ENCORE   LA    R4,FIELD       FIRST BYTE OF WORK FIELD
BLANK    CLI   0(R3),C' '     IS THIS BYTE BLANK?
         BNE   FIRST          NO. START OF FIELD.
         LA    R3,1(R3)       YES. SKIP IT.
         BCT   R2,BLANK       TRY NEXT BYTE
         B     EMPTY          END OF REPLY LINE.
FIRST    LH    R1,QDRLNG      REPLY LENGTH
         SR    R1,R2          COMPUTE OFFSET TO START OF FIELD
         STH   R1,OFFSET      STORE OFFSET
         LR    R1,R2          SAVE COUNT OF REMAINING BYTES
         B     CHAR           CONTINUE
LOOP     CLI   0(R3),C' '     IS THIS BYTE BLANK?
         BE    LAST           YES. END OF FIELD.
CHAR     MVC   0(1,R4),0(R3)  MOVE BYTE TO SUBNAME
         LA    R3,1(R3)       INCREMENT
         LA    R4,1(R4)       INCREMENT
         BCT   R2,LOOP        TRY NEXT BYTE
LAST     SR    R1,R2          COMPUTE FIELD LENGTH
         CH    R1,=H'8'       IS LENGTH GREATER THAN 8?
         BNH   STORE          NO. USE IT.
         LA    R1,8           YES. USE LENGTH OF EIGHT.
STORE    STH   R1,LENGTH      STORE FIELD LENGTH
EMPTY    MVC   0(12,R5),OFFSET MOVE FIELD TO QCOMMON
         LTR   R2,R2          IS THE REMAINING LENGTH ZERO?
         BZ    LOOKUP         YES. DO THE TABLE LOOKUP.
         MVC   FIELD,QBLANK   BLANK THE WORK FIELD
         MVC   OFFSET(4),=F'0' ZERO OUT OFFSET AND LENGTH
         LA    R5,12(R5)      INCREMENT TO NEXT FIELD
         CR    R5,R6          WAS THAT THE LAST FIELD?
         BL    ENCORE         NO. PROCESS NEXT FIELD.
***********************************************************************
*                                                                     *
*   LOOK UP THE MODULE ADDRESS FOR THE SUB COMMAND                    *
*                                                                     *
***********************************************************************
LOOKUP   CLI   QSUBNAME,C'X'  IS THIS A PRIVILEGED OPERATION?
         BE    SECRET         YES. CHECK FOR PASSWORD.
LOOKUP2  LA    R2,TABLE       START OF SUBCOMMAND TABLE
NEXT     CLC   0(2,R2),QSUBNAME COMPARE FIRST TWO CHARACTERS
         BE    FOUND          THIS IS THE ONE
         LA    R2,8(R2)       NEXT ENTRY
         CLI   0(R2),X'FF'    IS THIS THE END OF TABLE?
         BNE   NEXT           NO. TRY NEXT ENTRY.
FOUND    MVC   QCODEH(6),2(R2) SUBCOMMAND CODE AND COMMAND ADDRESS
         CLI   QPARM1,C'*'    USER WANTS LOGON ID AS DEFAULT
         BNE   STOP           NO. EXIT
         MVI   QLNG1,X'08'    YES. SET LENGTH OF SUB PARM
         MVC   QPARM1,QLOGON  MOVE LOGON ID INTO SUB PARM
STOP     QSTOP
***********************************************************************
*                                                                     *
*   CHECK AUTHORITY FOR X SUBCOMMANDS                                 *
*                                                                     *
***********************************************************************
SECRET   CLI   QSUBNAME+1,C'P' IS THIS THE PASSWORD?
         BE    PASSWD         YES. CHECK IT.
         TM    QXAUTH,1       IS THIS USER AUTHORIZED?
         BO    LOOKUP2        YES. PROCESS COMMAND.
BOUNCE   LA    R2,HELPCC      NO. PRETEND IT IS INVALID.
         B     FOUND          CONTINUE
PASSWD   CLC   QPARM1,=C'PASSWORD' DID THE USER SAY PASSWORD?
         BNE   BOUNCE         NO. REJECT.
         TPUT  WPASS,L'WPASS,FULLSCR,MF=(E,QTPUT)
*        LA    R1,RPASS       REPLY ADDRESS
         TGET  RPASS,8,EDIT,MF=(E,QTGET)
         CLC   RPASS,=C'YES SIR!' IS THE PASSWORD CORRECT?
         BNE   BOUNCE         NO. REJECT.
         OI    QXAUTH,1       AUTHORIZE USER
         QTILT '*** PASSWORD ACCEPTED ***'
***********************************************************************
*                                                                     *
*   MISCELLANY                                                        *
*                                                                     *
***********************************************************************
         LTORG
TABLE    DS    0D
         DC    C'ST',H'0',V(SEARCH)
         DC    C'DA',H'4',V(SEARCH)
         DC    C'DI',H'8',V(SEARCH)
         DC    C'DO',H'12',V(SEARCH)
         DC    C'AI',H'16',V(SEARCH)
         DC    C'AO',H'20',V(SEARCH)
         DC    C'HI',H'24',V(SEARCH)
         DC    C'HO',H'28',V(SEARCH)
         DC    C'DT',H'32',V(SEARCH)
         DC    C'DJ',H'36',V(SEARCH)
         DC    C'DS',H'40',V(SEARCH)
         DC    C'DQ',H'44',V(SEARCH)
         DC    C'DF',H'48',V(SEARCH)
         DC    C'XJ',H'36',V(SEARCH)
         DC    C'DE',H'0',V(SYSOUT)
         DC    C'RE',H'4',V(SYSOUT)
         DC    C'CA',H'8',V(SYSOUT)
         DC    C'JC',H'0',V(JCL)
         DC    C'JL',H'0',V(JLOG)
         DC    C'JM',H'0',V(JMSG)
         DC    C'DD',H'0',V(DDNAME)
         DC    C'LI',H'0',V(LIST)
         DC    C'L ',H'0',V(LIST)
         DC    C'SA',H'4',V(SAVE)
         DC    C'SL',H'0',V(SYSLOG)
         DC    C'XI',H'0',V(INITS)
         DC    C'DC',H'0',V(ACTIVE)
         DC    C'XB',H'0',V(HEXBLK)
         DC    C'XD',H'0',V(XDS)
         DC    C'OP',H'0',V(DOPTION)                              LBDMC
         DC    C'FI',H'4',V(REPOS)
         DC    C'FA',H'4',V(REPOS)
         DC    C'F ',H'4',V(REPOS)
         DC    C'FT',H'8',V(REPOS)
         DC    C'CO',H'12',V(REPOS)
         DC    C'C ',H'12',V(REPOS)
         DC    C'@ ',H'16',V(REPOS)
         DC    C'MD',H'16',V(REPOS)
         DC    C'+ ',H'20',V(REPOS)
         DC    C'D ',H'20',V(REPOS)
         DC    C'PF',H'20',V(REPOS)
         DC    C'HF',H'20',V(REPOS)
         DC    C'- ',H'24',V(REPOS)
         DC    C'UP',H'24',V(REPOS)
         DC    C'PB',H'24',V(REPOS)
         DC    C'HB',H'24',V(REPOS)
         DC    C'TO',H'28',V(REPOS)
         DC    C'T ',H'28',V(REPOS)
         DC    C'BO',H'32',V(REPOS)
         DC    C'B ',H'32',V(REPOS)
HELPCC   DC    X'FF000000',V(HELP)
WPASS    DC    X'C1115D7F1140403C4040001D4C13'  *** SPF TCAM
WORK     DSECT
         DS    CL72
OFFSET   DS    H
LENGTH   DS    H
FIELD    DS    CL8
RPASS    DS    CL8
         QCOMMON
         END
./ ADD  NAME=Q17
         PRINT NOGEN
READSPC  QSTART 'QUEUE COMMAND - READ A BLOCK FROM HASPACE'
         USING QCKPT,R10      BASE REG FOR CKPT WORK AREA
         L     R10,QVCKPT     LOAD BASE REG
***********************************************************************
*                                                                     *
*   CONVERT MTTR TO MBBCCHHR                                          *
*                                                                     *
***********************************************************************
*
* NOTE - THE INPUT TO THIS ROUTINE IS AS FOLLOWS:
*            QCTRAK CONTAINS THE MTTR
*            R1 CONTAINS THE IOAREA ADDRESS
*
         LR    R2,R1          MOVE IOAREA ADDR TO R2
         SR    R3,R3          ZERO R3
         IC    R3,QCTRAKM     RELATIVE DCB NUMBER
         SLL   R3,2           MULTIPLY BY 4
         MVC   QCDADR,QCTRAKR MOVE RECORD NUMBER
         MVC   QCDADHH,QCTRAKTT MOVE TRACK TO A HALFWORD BOUNDARY
         LH    R5,QCDADHH     LOAD RELATIVE TRACK NUMBER
         SR    R4,R4          ZERO R4
         D     R4,QCTRKCYL(R3) DIVIDE TRACKS BY TRACKS PER CYLINDER
         STH   R4,QCDADHH     STORE HEAD NUMBER
         STH   R5,QCDADCC     STORE CYLINDER NUMBER
         L     R3,QCSPOOLS(R3) DCB ADDRESS
         READ  HDECB2,DI,(R3),(R2),MF=E
         CHECK HDECB2
         QSTOP
         LTORG
         QCOMMON
         END
./ ADD  NAME=Q18
         PRINT NOGEN
REPOS    QSTART 'QUEUE COMMAND - DATASET REPOSITIONING ROUTINES'
         USING QCKPT,R10      BASE REG FOR CKPT WORK AREA
         L     R10,QVCKPT     LOAD BASE REG
         USING QDISPLAY,R9    BASE REG FOR DISPLAY WORK AREA
         L     R9,QVDSPL      LOAD BASE REG
         USING WORK,R13       BASE REG FOR LOCAL WORK AREA
***********************************************************************
*                                                                     *
*   BRANCH TO PROPER ROUTINE                                          *
*                                                                     *
***********************************************************************
CHKID    CLC   QPDSID,=H'0'   IS THERE A VALID DATASET?
         BNE   GO             YES. GO AHEAD.
         QTILT '*** YOU ARE NOT PROCESSING A VALID DATASET ***'
GO       LH    R1,QCODEH      LOAD FUNCTION CODE
         CH    R1,=H'32'      IS THE FUNCTION SUPPORTED?
         BH    STOP           NO. RETURN.
         B     *+4(R1)        BRANCH TO ROUTINE
         B     TILT           0 OFFSET
         B     FIND           4
         B     FINDTIME       8
         B     COLUMN         12
         B     AT             16
         B     PLUS           20
         B     MINUS          24
         B     TOP            28
         B     BOTTOM         32
TILT     QTILT '*** PARAMETER IS INVALID OR OMITTED ***'
***********************************************************************
*                                                                     *
*   REPOSITION VERTICALLY                                             *
*                                                                     *
***********************************************************************
* SKIP FORWARD
PLUS     CLI   QPARM1,C' '    DEFAULT NEEDED
         BNE   PLUS010        NO
         MVI   QLNG1+1,X'01'  YES, SET LENGTH OF PARM
         MVI   QPARM1,X'F1'   SET DEFAULT TO 1
PLUS010  BAL   R4,NUMERIC     VALIDATE PARAMETER
         AP    QPREC,COUNT    ADD COUNT TO CURRENT RECORD
         B     RESUME         CALL LISTDS
* SKIP BACKWARD
MINUS    CLI   QPARM1,C' '    DEFAULT NEEDED
         BNE   MINUS010       NO
         MVI   QLNG1+1,X'01'  YES, SET LENGTH OF PARM
         MVI   QPARM1,X'F1'   SET DEFAULT TO 1
MINUS010 BAL   R4,NUMERIC     VALIDATE PARAMETER
         SP    QPREC,COUNT    SUBTRACT COUNT FROM CURRENT RECORD
         BP    RESUME         CALL LISTDS IF RESULT POSITIVE.
* TOP OF DATASET
TOP      ZAP   QPREC,=P'1'    SET CURRENT RECORD TO TOP OF DS
* RESUME AT CURRENT RECORD
RESUME   L     R15,=V(LISTDS) ADDR OF LISTDS MODULE
         BALR  R14,R15        GO TO IT
STOP     QSTOP
* BOTTOM OF DATASET
BOTTOM   ZAP   QPREC,=P'9999999' SET CURRENT RECORD TO LARGEST
         B     RESUME         CALL LISTDS
* POSITION TO THIS RECORD
AT       BAL   R4,NUMERIC     VALIDATE PARAMETER
         ZAP   QPREC,COUNT    INDICATE REPOSITION NO
         B     RESUME         CALL LISTDS
* CHECK THE PARMETER FOR VALID NUMERIC AND PACK IT
NUMERIC  LH    R2,QLNG1       LENGTH OF PARM
         SH    R2,=H'1'       IS THE COUNT FIELD ZERO?
         BM    RESUME         YES. RESUME FROM CURRENT POSITION.
         MVC   QFZONES,QFZONE INITIALIZE NUMERIC CHECK
         EX    R2,MVZ         MOVE THE ZONES FOR VALIDITY CHECK
         CLC   QFZONES,QFZONE IS THE FIELD NUMERIC?
         BNE   TILT           NO. TILT.
         EX    R2,PACK        PACK THE FIELD INTO COUNT
         LH    R0,QDVERT          # OF LINES FOR DEVICE           LBDMC
         SH    R0,=H'2'           - OVERHEAD                      LBDMC
         CVD   R0,CONVERT         CONVERTED TO PACKED DECIMAL     LBDMC
         CLI   QSUBNAME,C'P'  ?/PAGE FORWARD/BACKWARD SPECIFIED
         BE    FOUNDP         YES. GO PROCESS
         CLI   QSUBNAME,C'H'  ?/HALF PAGE FORWARD/BACKWARD SPECIFIED
         BNE   NEXIT          NO. GO TO EXIT
         SRL   R0,2               DIVIDED BY 2                    LBDMC
         CVD   R0,CONVERT         CONVERTED TO PACKED DECIMAL     LBDMC
         MP    COUNT,CONVERT+6(2)  MULTIPLY BY HALF-PAGE SIZE     LBDMC
         B     NEXIT
FOUNDP   MP    COUNT,CONVERT+6(2)  MULTIPLY BY PAGE SIZE          LBDMC
NEXIT    BR    R4             RETURN
* EXECUTED INSTRUCTIONS
MVZ      MVZ   QFZONES(1),QPARM1 CHECK FOR NUMERIC
PACK     PACK  COUNT,QPARM1(1) PACK COUNT
***********************************************************************
*                                                                     *
*   REPOSITION HORIZONTALLY                                           *
*                                                                     *
***********************************************************************
COLUMN   CLI   QPARM1,C' '    ?/DEFAULT NEEDED
         BE    COL010         YES, GO SET IT
         CLI   QPARM1,C'0'    ?/SET COLUMN TO 1
         BNE   COL020         NO, TEST IF NUMERIC
COL010   MVI   QLNG1+1,X'01'  SET LENGTH OF PARM
         MVI   QPARM1,X'F1'   SET COLUMN TO 1
COL020   BAL   R4,NUMERIC     VALIDATE PARAMETER
         CP    COUNT,=P'255'  IS THE COUNT FIELD TOO BIG?
         BH    TILT           YES. TILT.
         SP    COUNT,=P'1'    COLUMN RELATIVE TO ZERO
         BM    TILT           INVALID. TILT.
         CVB   R5,COUNT       CONVERT TO BINARY
         STH   R5,QPOFFSET    STORE IN QPOFFSET
         B     RESUME         CALL LISTDS
***********************************************************************
*                                                                     *
*   LOCATE SPECIFIC RECORD                                            *
*                                                                     *
***********************************************************************
FIND     CLI   QSUBNAME+1,C'A' IS THE REQUEST FOR FIND ALL?
         BE    FIND2          YES. DO NOT UPDATE RECORD POINTER.
         AP    QPREC,=P'1'    START SEARCH AT NEXT RECORD
FIND2    CLI   QPARM1,C' '    IS THERE A PARAMETER?
         BE    RESUME         NO. CONTINUE WITH PREVIOUS FIND.
         LA    R2,QDREPLY+62  END OF USER REPLY
         LA    R3,61          MAXIMUM LENGTH OF PARM
         SH    R3,QOFF1       OFFSET TO FIRST PARM
LOOP     CLC   0(1,R2),QPARM1 IS THIS THE DELIMITER?
         BE    FOUND          YES. CONTINUE.
         BCTR  R2,0           TRY THE PREVIOUS BYTE
         BCT   R3,LOOP        IS THE LENGTH FIELD EXHAUSTED?
         B     TILT           YES. TILT.
FOUND    BCTR  R3,0           DECREMENT LENGTH BY 1
         LA    R2,QDREPLY+1   ADDR OF REPLY + 1
         AH    R2,QOFF1       ADDR OF FIRST BYTE OF PARM
         EX    R3,MVC         MOVE PARM TO QPFIND
         STH   R3,QPLNG       SAVE LENGTH-1 OF PARM
         B     COLTEST        TEST IF COLUMN KEYWORD IS PRESENT
MVC      MVC   QPFIND(1),0(R2) MOVE PARM TO QPFIND
***********************************************************************
*                                                                     *
*    COLUMN RANGE FOR FIND                                            *
*                                                                     *
***********************************************************************
COLTEST  XC    QOFFS,QOFFS    RESET COLUMN OFFSETS
         XC    QOFFE,QOFFE
         LA    R2,3(R2,R3)    PREPARE FOR NEXT FIELD
         LA    R3,QDREPLY+55  END OF USER REPLY
LOOP1    CLC   0(3,R2),=CL3'COL'  ?/COLUMN PARAMETER
         BE    FOUNDA         YES. GO PROCESS
         LA    R2,1(R2)       NO. LOOK AT NEXT FIELD
         CR    R2,R3          ?/END OF REPLY
         BH    RESUME         YES. EXIT
         B     LOOP1          NO. CHECK AGAIN
FOUNDA   LA    R2,3(R2)       NEXT FIELD
         CLI   0(R2),C'('     ?/LP PRESENT
         BNE   PRESUME        NO. EXIT
         LA    R2,1(R2)       NEXT FIELD
         LA    R3,QDREPLY+62  END OF REPLY
         LR    R5,R2          SAVE START OF THIS FIELD
         MVI   QDELIMIT,C','  LOOKING FOR DELIMETER = ','
         BAL   R7,CHKDEL      GO CHECK THE DELIMETER
         CVB   R6,COUNT       CONVERT START COLUMN OFFSET TO BINARY
         LTR   R6,R6          ?/USER SPECIFY OFFSET OF ZERO
         BZ    PRESUME        YES. GO INDICATE AN ERROR
         BCTR  R6,0           DECREMENT OFFSET BY 1
         STH   R6,QOFFS       SAVE START COLUMN
         LA    R2,1(R2)       NEXT FIELD
         LR    R5,R2          SAVE START OF THIS FIELD
         MVI   QDELIMIT,C')'  LOOKING FOR DELIMETER = ')'
         BAL   R7,CHKDEL      GO CHECK THE DELIMETER
         CVB   R6,COUNT       CONVERT END COLUMN OFFSET TO BINARY
         LTR   R6,R6          ?/USER SPECIFY OFFSET OF ZERO
         BZ    PRESUME        YES. GO INDICATE AN ERROR
         BCTR  R6,0           DECREMENT OFFSET BY 1
         STH   R6,QOFFE       SAVE END COLUMN
         CLC   QOFFS,QOFFE    ?/ERROR IN COLUMN SPECIFICATION
         BNL   PRESUME        YES. DISREGARD COLUMN SEARCH
         B     RESUME         NO. CONTINUE WITH NORMAL PROCESSING
CHKDEL   CLC   0(1,R2),QDELIMIT ?/DELIMITER FOUND
         BE    CHK010         YES. GO PROCESS
         LA    R2,1(R2)       NO. LOOK AT NEXT FIELD
         CR    R2,R3          ?/END OF REPLY
         BH    PRESUME        YES. EXIT
         B     CHKDEL         NO. CHECK AGAIN
CHK010   LR    R4,R2          SAVE DELIMITER ADDRESS
         SR    R4,R5          LENGTH OF SUB-PARM
         CH    R4,=H'3'       ?/LENGTH TO LONG
         BNL   PRESUME        YES. DISREGARD COLUMN SEARCH
         BCTR  R4,0           LENGTH FOR EXEC INTRUCTION
         MVC   QFZONES,QFZONE  NUMERIC TEST
         EX    R4,MVZ1
         CLC   QFZONES,QFZONE ?/FIELD NUMERIC
         BNE   TILT           NO. EXIT WITH ERROR MESSAGE
         EX    R4,PACK1
         BR    R7
PRESUME  XC    QOFFS,QOFFS    DISREGARD FIND
         XC    QOFFE,QOFFE       BY COLUMN RANGE
         QTILT ' *** ERROR IN COLUMN SPECIFICATION ***'
MVZ1     MVZ   QFZONES(1),0(R5)
PACK1    PACK  COUNT,0(1,R5)
***********************************************************************
*                                                                     *
*   REPOSITION IN SYSLOG DATASET BY TIME OF DAY                       *
*                                                                     *
***********************************************************************
FINDTIME CLI   QPARM1,C' '    IS THE PARM OMITTED?
         BE    TILT           YES. TILT.
         B     RESUME         CALL LISTDS
***********************************************************************
*                                                                     *
*   MISCELLANY                                                        *
*                                                                     *
***********************************************************************
         LTORG
         QCOMMON
WORK     DSECT
         DS    CL72
COUNT    DS    D
CONVERT  DS    D                                                  LBDMC
         END
./ ADD  NAME=Q19
         PRINT NOGEN
SAVE     QSTART 'QUEUE COMMAND - CREATE A COPY OF CURRENT DATASET'
         USING QCKPT,R10      BASE REG FOR CHECKPOINT WORK AREA
         L     R10,QVCKPT     LOAD BASE REG
         USING QDISPLAY,R9    BASE REG FOR DISPLAY WORK AREA
         L     R9,QVDSPL      LOAD BASE REG
         USING WORK,R13       LOCAL WORK AREA
***********************************************************************
*                                                                     *
*   ALLOCATE OUTPUT DATASET                                           *
*                                                                     *
***********************************************************************
         CLC   QPDSID,=H'0'   IS THERE A VALID DATASET?
         BE    TILT1          NO. TELL THE USER.
         MVC   DSNAME+2(44),QBLANK BLANK THE DSNAME
         MVC   DSNAME+2(8),QPARM1 FIRST PART OF DSNAME
         LA    R1,DSNAME      ADDR OF DSNAME
         ST    R1,DA08PDSN    STORE IN PARM LIST
         LH    R2,QLNG1       LENGTH OF QPARM1
         LA    R1,2(R2,R1)    OFFSET INTO DSNAME
         LH    R3,QLNG2       LENGTH OF QPARM2
         LTR   R3,R3          ?/LENGTH ZERO
         BZ    DATA           YES. USE DATA AS DEFAULT DS TYPE
         MVI   0(R1),C'.'     MOVE IN DELIMITER
         MVC   1(8,R1),QPARM2 NO. SAVE DS TYPE
         LA    R1,1(R3,R2)    LENGTH OF DSNAME
         B     DSLNGH         GO SAVE LENGTH
DATA     MVC   0(5,R1),=C'.DATA' LAST PART OF DSNAME
         LA    R1,5(R2)       LENGTH OF DSNAME
DSLNGH   STH   R1,DSNAME      STORE LENGTH OF DSNAME
         MVC   DA08DDN(72),ALCLIST REMAINDER OF PARM LIST
         MVI   DAIRFLAG,X'08' INDICATE ALLOC FUNCTION
         L     R15,=V(ALLOCATE) ADDR OF DAIR MODULE
         BALR  R14,R15        GO TO IT
         MVC   QCOUT+36(1),QCRECFM MOVE IN RECORD FORMAT
         NI    QCOUT+36,X'06' TURN OFF EVERTHING BUT CCTL
         OI    QCOUT+36,X'90' SPECIFY FIXED BLOCKED RECORDS
         LH    R1,QCLRECL     RECORD LENGTH
         LTR   R1,R1          IS THE LRECL ZERO?
         BNZ   RECOK          NO. SKIP.
         LA    R1,133         YES. USE LRECL 133.
RECOK    STH   R1,QCOUT+82    STORE LRECL
BIGGER   LR    R2,R1          UPDATE BLKSIZE
         AH    R1,QCOUT+82    ADD LRECL TO BLKSIZE
         CH    R1,=H'4096'    IS THE BLKSIZE GREATER THAN 4096?
         BL    BIGGER         NO. MAKE IT BIGGER.
         STH   R2,QCOUT+62    STORE BLKSIZE
         OPEN  MF=(E,QCOPEN)
***********************************************************************
*                                                                     *
*   REPOSITION DATASET TO TOP                                         *
*                                                                     *
***********************************************************************
         L     R4,QCSTART     TOP OF DATASET POINTER
         L     R4,0(R4)       DISK ADDR TOP OF DATASET
         L     R5,QCBLKA      IOAREA ADDRESS
         B     FIRST          GO DO IT
***********************************************************************
*                                                                     *
*   PROCESS DATASET                                                   *
*                                                                     *
***********************************************************************
NEXTBLK  L     R4,0(R5)       DISK ADDR OF NEXT BLOCK
FIRST    LTR   R4,R4          IS THE DISK ADDR ZERO?
         BZ    END            YES. END OF DATASET.
         BAL   R8,READ        READ A BLOCK
         CLC   QPJOBID(6),4(R5) DOES THE JOBID MATCH?
         BNE   END            NO. END OF DATASET.
         LA    R4,10(R5)      ADDR OF FIRST RECORD IN BLOCK
***********************************************************************
*                                                                     *
*   PROCESS RECORDS                                                   *
*                                                                     *
***********************************************************************
NEXTREC  CLI   0(R4),X'FF'    IS LENGTH BYTE FF?
         BE    NEXTBLK        YES. END OF BLOCK.
         TM    1(R4),X'10'    IS THIS A SPANNED RECORD?
         BO    SPAN           YES. SKIP IT.
         SR    R6,R6          ZERO OUT REG
         IC    R6,0(R4)       INSERT LENGTH
         TM    1(R4),X'80'    IS CCTL SPECIFIED?
         BZ    NOCCTL         NO. SKIP.
         LA    R6,1(R6)       INCREMENT LENGTH FOR CCTL
NOCCTL   TM    1(R4),X'08'    IS THIS RECORD TO BE IGNORED?
         BO    SKIPREC        YES. SKIP IT.
         MVI   BUFFER,C' '    BLANK FIRST BYTE OF BUFFER
         MVC   BUFFER+1(255),BUFFER BLANK THE BUFFER
         LR    R7,R6          DO NOT DESTROY R6
         SH    R7,=H'1'       IS LENGTH ZERO?
         BM    SKIPREC        YES. SKIP RECORD.
         EX    R7,MVCREC      MOVE RECORD TO BUFFER
         PUT   QCOUT,BUFFER
SKIPREC  LA    R4,3(R6,R4)    INCREMENT TO NEXT RECORD
         B     NEXTREC        PROCESS NEXT RECORD
SPAN     LH    R6,2(R4)       SEGMENT LENGTH
         TM    1(R4),X'08'    IS THIS THE FIRST SEGMENT?
         BO    SPANFRST       YES. USE LARGER HEADER SIZE.
         LA    R4,4(R6,R4)    INCREMENT TO NEXT RECORD
         B     NEXTREC        PROCESS NEXT RECORD
SPANFRST LA    R4,6(R6,R4)    INCREMENT TO NEXT RECORD
         B     NEXTREC        PROCESS NEXT RECORD
***********************************************************************
*                                                                     *
*   CLOSE UP SHOP AND GO HOME                                         *
*                                                                     *
***********************************************************************
END      CLOSE MF=(E,QCOPEN)
         MVI   DAIRFLAG,X'18' INDICATE FREE FUNCTION
         L     R15,=V(ALLOCATE) ADDR OF DAIR MODULE
         BALR  R14,R15        GO TO IT
         L     R15,=V(LISTDS) GO BACK TO LISTDS
         BALR  R14,R15        GO TO IT
         QSTOP
***********************************************************************
*                                                                     *
*   READ A BLOCK FROM HASPACE                                         *
*                                                                     *
***********************************************************************
READ     ST    R4,QCTRAK      STORE DISK ADDR
         LR    R1,R5          IOAREA ADDRESS
         L     R15,=V(READSPC) ADDR OF ROUTINE TO READ HASPACE
         BALR  R14,R15        GO TO IT
         BR    R8             RETURN TO CALLER
***********************************************************************
*                                                                     *
*   MISCELLANY                                                        *
*                                                                     *
***********************************************************************
TILT1    QTILT '*** YOU ARE NOT PROCESSING A VALID DATASET ***'
         LTORG
MVCREC   MVC   BUFFER(1),3(R4)
         DS    0F
ALCLIST  DC    C'HASPSAVE',CL16' ',F'0',F'10',F'50',F'0'
         DC    CL16' ',X'040202B0',F'0',CL8' '
         QCOMMON
WORK     DSECT
         DS    CL80
BUFFER   DS    CL256
DSNAME   DS    H
         DS    CL44
         END
./ ADD  NAME=Q2
         PRINT NOGEN
ALLOCATE QSTART 'QUEUE COMMAND - DATASET ALLOCATION ROUTINES'
         USING QDAIR,R10      BASE REG FOR DAIR WORK
         L     R10,QVDAIR     LOAD ADDR OF DAIR WORK
         USING QCKPT,R9       BASE REG FOR CKPT WORK ARES
         L     R9,QVCKPT      LOAD ADDR
***********************************************************************
*                                                                     *
*   DETERMINE FUNCTION                                                *
*                                                                     *
***********************************************************************
         CLI   DAIRFLAG,X'08' IS THE FUNCTION ALLOCATE?
         BE    ALLOC          YES. DO IT.
         CLI   DAIRFLAG,X'18' IS THE FUNCTION FREE?
         BE    FREE           YES. DO IT.
         B     ABEND99        INVALID FUNCTION. ABANDON SHIP.
***********************************************************************
*                                                                     *
*   FREE DDNAME(XXXXXXXX)                                             *
*                                                                     *
***********************************************************************
FREE     LA    R1,DA18CD      LOAD ADDR OF FREE PARM LIST
         ST    R1,DAPLDAPB    STORE IN DAIR CALL LIST
         BAL   R2,CALLDAIR    CALL DAIR
         B     STOP           RETURN TO CALLER
***********************************************************************
*                                                                     *
*   ALLOC DDNAME(XXXXXXXX) DSNAME(YYYYYYYY) SHR                       *
*                                                                     *
***********************************************************************
ALLOC    MVC   DA18DDN,DA08DDN MOVE DDNAME TO FREE LIST
         LA    R1,DA18CD      LOAD ADDR OF FREE PARM LIST
         ST    R1,DAPLDAPB    STORE IN DAIR CALL LIST
         BAL   R2,CALLDAIR    CALL DAIR - FREE THE DDNAME
         LA    R1,DA08CD      LOAD ADDR OF ALLOC PARM LIST
         ST    R1,DAPLDAPB    STORE IN DAIR CALL LIST
         BAL   R2,CALLDAIR    CALL DAIR - ALLOCATE THE DATASET
         B     STOP           RETURN TO CALLER
***********************************************************************
*                                                                     *
*   RETURN TO CALLING ROUTINE                                         *
*                                                                     *
***********************************************************************
STOP     QSTOP
***********************************************************************
*                                                                     *
*   CALL DYNAMIC ALLOCATION INTERFACE ROUTINE (DAIR)                  *
*                                                                     *
***********************************************************************
CALLDAIR XC    DAIRECB,DAIRECB CLEAR ECB
         LA    R1,DAPLUPT     LOAD ADDR OF DAIR CALL LIST
         LINK  EP=IKJEFD00    CALL DAIR
         LTR   R15,R15        IS RETURN CODE ZERO?
         BZR   R2             YES. RETURN.
         CH    R15,=H'28'     IS DATASET ALREADY FREE?
         BER   R2             YES. RETURN.
         CLC   DA08DDN,=C'HASPSAVE' IS THIS A SAVE?
         BNE   ABEND99        NO. ABEND.
         QTILT '*** UNABLE TO ALLOCATE DATASET ***'
***********************************************************************
*                                                                     *
*   DAIR HAS FAILED. TAKE A PICTURE AND GO HOME.                      *
*                                                                     *
***********************************************************************
ABEND99  TPUT  MESSAGE,L'MESSAGE,EDIT,MF=(E,QTPUT) TELL SAD STORY  PWF*
         ABEND 99,DUMP        ABEND THE JOB. USER CODE 0099.
***********************************************************************
*                                                                     *
*   CONSTANTS AND ASSORTED GARBAGE                                    *
*                                                                     *
***********************************************************************
         LTORG
MESSAGE  DC    C'A MAJOR DISASTER HAS OCCURRED IN DAIR PROCESSING.'
         QCOMMON
         END
./ ADD  NAME=Q20
         PRINT NOGEN
SEARCH QSTART 'QUEUE COMMAND - JQE AND JOE SEARCH AND FORMAT'
         L     R10,QVCKPT     LOAD BASE REG
         USING JQEDSECT,R9    BASE REG FOR JQE DSECT
         USING JOEDSECT,R8    BASE REG FOR JOE DSECT
         USING WORK,R13       BASE REG FOR LOCAL WORK AREA
***********************************************************************
*                                                                     *
*   BRANCH TO PROPER ROUTINE                                          *
*                                                                     *
***********************************************************************
         LH    R1,QCODEH      LOAD FUNCTION CODE INTO R1
         CH    R1,=H'48'      IS THE FUNCTION SUPPORTED?
         BH    STOP           NO. RETURN.
         B     *+4(R1)        BRANCH TO ROUTINE
         B     ST             0 OFFSET
         B     DA             4
         B     DI             8
         B     AO   DO        12
         B     AI             16
         B     AO             20
         B     HI             24
         B     HO             28
         B     DT             32
         B     DJ             36
         B     DS             40
         B     DQ             44
         B     DF             48
***********************************************************************
*                                                                     *
*   STATUS - FIND ALL JOBS THAT MATCH LEVEL                           *
*                                                                     *
***********************************************************************
ST       CLI   QPARM1,C' '    DID USER SPECIFY LEVEL?
         BNE   ST2            NO. USE QLOGON.
         MVC   QPARM1,QLOGON  MOVE USER PARM1 TO LEVEL
ST2      BAL   R2,PARMLEN     DETERMINE PARM LENGTH
* SEARCH THE TSO QUEUE
         USING JQTDSECT,R1    BASE REG FOR JQT
DJ2      LH    R6,QLNG1       LENGTH OF COMPARE FOR LEVEL
         L     R1,QCJQHEAD    LOAD ADDR OF JQT
         LA    R4,JQTTSU      ADDR OF TSO QUEUE
         MVI   QCLASS,0       INDICATE THIS IS THE TSO QUEUE
         BAL   R2,SRCHJQE     SEARCH THE QUEUE
         B     DJ3            END OF QUEUE
         EX    R6,STCLC       IS THE JOBNAME EQUAL TO LEVEL?
         BNE   SKIPJQE        NO. SKIP THIS RECORD.
         B     PRTJQE         PRINT THE RECORD
* SEARCH THE SYSTEM QUEUE
DJ3      L     R1,QCJQHEAD    LOAD ADDR OF JQT
         LA    R4,JQTSTC      ADDR OF STC QUEUE
         MVI   QCLASS,4       INDICATE THIS IS THE STC QUEUE
         BAL   R2,SRCHJQE     SEARCH THE QUEUE
         B     DJ4            END OF QUEUE
         EX    R6,STCLC       IS THE JOBNAME EQUAL TO LEVEL?
         BNE   SKIPJQE        NO. SKIP THIS RECORD.
         B     PRTJQE         PRINT THE RECORD
* SEARCH FOR HELD OUTPUT
DJ4      L     R1,QCJQHEAD    LOAD ADDR OF JQT
         LA    R4,JQTOUT      ADDR OF $OUTPUT QUEUE
         DROP  R1
         MVI   QCLASS,8       INDICATE THIS IS THE HELD OUT QUEUE
         BAL   R2,SRCHJQE     SEARCH THE QUEUE
         B     ST3            END OF QUEUE
         EX    R6,STCLC       IS THE JOBNAME EQUAL TO LEVEL?
         BNE   SKIPJQE        NO. SKIP THIS RECORD.
         CLI   JQEHLDCT,0     ARE THERE ANY HELD DATASETS? (PART 1)
         BNE   PRTJQE         YES. PRINT THE RECORD.
         TM    JQEHQLOK,X'F0' ARE THERE ANY HELD DATASETS? (PART 2)
         BNZ   PRTJQE         YES. PRINT THE RECORD.
         B     REJJQE         REJECT THE RECORD
* SEARCH INPUT QUEUES
ST3      MVI   QCLASS,192     START WITH CLASS A
ST4      BAL   R2,NEXTJQT     FIND NEXT QUEUE
         BAL   R2,SRCHJQE     SEARCH THE QUEUE
         B     ST4            END OF QUEUE
         CLI   JQEFLAGS,0     IS THE JOB EXECUTING OR HELD?
         BNE   ST7            YES. SPECIAL HANDLING.
         EX    R6,STCLC       IS THE JOBNAME EQUAL TO LEVEL?
         BNE   SKIPJQE        NO. SKIP THIS RECORD.
         B     PRTJQE         PRINT THE JQE
ST7      EX    R6,STCLC       IS THE JOBNAME EQUAL TO LEVEL?
         BNE   REJJQE         NO. SKIP THIS RECORD.
         B     PRT2JQE        PRINT THE RECORD WITHOUT INCR COUNT
* SEARCH OUTPUT QUEUES
ST5      MVI   QCLASS,192     START WITH CLASS A
ST6      BAL   R2,NEXTJOT     DETERMINE NEXT QUEUE
         BAL   R2,SRCHJOE     SEARCH A JQE QUEUE
         B     ST6            END OF QUEUE
         EX    R6,STCLC       IS THE JOBNAME EQUAL TO LEVEL?
         BNE   SKIPJOE        NO. SKIP THIS RECORD.
         B     PRTJOE         PRINT THE RECORD
* COMPARE USED TO CHECK LEVEL
STCLC    CLC   QPARM1(1),JQEJNAME IS THE JOBNAME EQUAL TO LEVEL?
***********************************************************************
*                                                                     *
*   DQ - PRINT SUMMARY OF ALL JOBS IN THE INPUT QUEUES                *
*                                                                     *
***********************************************************************
*  SEARCH ALL QUEUES
DQ       MVI   QCLASS,192           START WITH CLASS A
         MVC   QDHLINE,DQHEADER     MOVE IN THE HEADING
DQ1      BAL   R2,NEXTJQT           FIND NEXT QUEUE
         ZAP   QCOUNTE,=P'0'        ZERO COUNT FOR EXECUTING JOBS
         ZAP   QCOUNTA,=P'0'        ZERO COUNT FOR AWAITING JOBS
         ZAP   QCOUNTH,=P'0'        ZERO COUNT FOR HELD JOBS
         BAL   R2,SRCHJQE           SEARCH THE QUEUE
         B     DQ4                  END OF QUEUE
         TM    JQEFLAGS,QUEBUSY     IS THIS JOB EXECUTING
         BZ    DQ2                  NO, NEXT TEST
         AP    QCOUNTE,=P'1'        YES, BUMP COUNTER
         B     SKIPJQE              PROCESS NEXT JQE
DQ2      TM    JQEFLAGS,X'E0'       IS THIS A HELD JOB
         BZ    DQ3                  NO, NEXT TEST
         AP    QCOUNTH,=P'1'        YES, BUMP COUNTER
         B     SKIPJQE              PROCESS NEXT JQE
DQ3      CLI   JQEFLAGS,0           IS THIS JOB AWAITING EXECUTION
         BNE   SKIPJQE              NO, PROCESS NEXT JQE
         AP    QCOUNTA,=P'1'        YES, BUMP COUNTER
         B     SKIPJQE              PROCESS NEXT JQE
DQ4      CLC   QCOUNT,=PL3'0'       IS THIS QUEUE EMPTY
         BE    DQ1                  YES, TRY THE NEXT QUEUE
         MVC   QDMSG,DQLINE         MOVE IN DETAIL LINE
         MVC   FCOUNT,ED5           MOVE IN
         ED    FCOUNT,QCOUNTE            NUMBER OF JOBS
         MVC   QECOUNT,FCOUNT+3                    IN EXECUTION
         MVC   FCOUNT,ED5           MOVE IN
         ED    FCOUNT,QCOUNTA            NUMBER OF JOBS
         MVC   QACOUNT,FCOUNT+3                    AWAITING EXECUTION
         MVC   FCOUNT,ED5           MOVE IN
         ED    FCOUNT,QCOUNTH            NUMBER OF JOBS
         MVC   QHCOUNT,FCOUNT+3                    IN HELD STATUS
         MVC   FCOUNT,ED5           MOVE IN THE TOTAL NUMBER OF JOBS
         ED    FCOUNT,QCOUNT             IN THIS QUEUE
         MVC   CLASS,QCLASS         MOVE IN QUEUE CLASS
         BAL   R2,DISPLAY           GO DISPLAY THIS LINE
         B     DQ1                  PROCESS THE NEXT QUEUE
***********************************************************************
*                                                                     *
*   DF - PRINT SUMMARY OF ALL JOBS IN THE OUTPUT QUEUES               *
*                                                                     *
***********************************************************************
DF       MVI   QCLASS,192           START WITH CLASS A
         MVC   QDHLINE,DFHEADER     MOVE IN THE HEADING
DF1      BAL   R2,NEXTJOT           FIND NEXT QUEUE
         ZAP   QCOUNTE,=P'0'        ZERO COUNT FOR JOBS PRINTING
         BAL   R2,SRCHJOE           SEARCH THE QUEUE
         B     DF2                  END OF QUEUE
         TM    JOEFLAG,X'20'        IS JOB PRINTING
         BNO   SKIPJOE              NO, PROCESS NEXT JOE
         AP    QCOUNTE,=P'1'        YES, BUMP COUNTER
         B     SKIPJOE              PROCESS NEXT JOE
DF2      CLC   QCOUNT,=PL3'0'       QUEUE EMPTY
         BE    DF1                  YES, TRY THE NEXT QUEUE
         MVC   QDMSG,DFLINE         MOVE IN DETAIL LINE
         MVC   FCOUNT,ED5           MOVE IN
         ED    FCOUNT,QCOUNTE            NUMBER OF JOBS
         MVC   QECOUNT,FCOUNT+3                    PRINTING
         MVC   FCOUNT,ED5           MOVE IN TOTAL NUMBER OF JOBS
         ED    FCOUNT,QCOUNT             IN THIS QUEUE
         MVC   CLASS,QCLASS         MOVE IN QUEUE CLASS
         BAL   R2,DISPLAY           GO DISPLAY THIS LINE
         B     DF1                  PROCESS NEXT QUEUE
***********************************************************************
*                                                                     *
*   DJ - FIND A SPECIFIC JOB                                          *
*                                                                     *
***********************************************************************
DJ       CLI   QPARM1,C' '    DID USER SPECIFY JOBNAME?
         BE    DJ9            NO. TILT.
         MVC   QLNG1,=H'7'    COMPARE FOR 8 CHARACTERS
         B     DJ2            USE THE STATUS ROUTINES
DJ9      QTILT '*** YOU MUST SPECIFY JOBNAME ***'
***********************************************************************
*                                                                     *
*   DI - PRINT ALL JOBS IN INPUT QUEUES                               *
*                                                                     *
***********************************************************************
DI       DS    0H                                                 LBDMC
*DI       CLI   QPARM1,C' '    DID USER SPECIFY CLASS?            LBDMC
*        BNE   DI5            YES. LIMIT TO ONE QUEUE.            LBDMC
* SEARCH ALL QUEUES
         MVI   QCLASS,192     START WITH CLASS A
DI2      BAL   R2,NEXTJQT     DETERMINE NEXT QUEUE
         BAL   R2,SRCHJQE     SEARCH A JQE QUEUE
         B     DI2            END OF QUEUE
         B     PRTJQE         PRINT THE RECORD
* SEARCH ONLY ONE QUEUE
*DI5      MVC   QCLASS,QPARM1  USER SPECIFIED CLASS               LBDMC
*         BAL   R2,FINDJQT     FIND QUEUE                         LBDMC
*         BAL   R2,SRCHJQE     SEARCH THE QUEUE                   LBDMC
*         B     STOP           END OF QUEUE                       LBDMC
*         B     PRTJQE         PRINT THE RECORD                   LBDMC
***********************************************************************
*                                                                     *
*   AI - PRINT JOBS IN INPUT QUEUES THAT ARE AVAILABLE FOR SELECTION  *
*                                                                     *
***********************************************************************
AI       DS    0H                                                 LBDMC
*AI       CLI   QPARM1,C' '    DID USER SPECIFY CLASS?            LBDMC
*         BNE   AI5            YES. LIMIT TO ONE QUEUE.           LBDMC
* SEARCH ALL QUEUES
         MVI   QCLASS,192     START WITH CLASS A
AI2      BAL   R2,NEXTJQT     DETERMINE NEXT QUEUE
         BAL   R2,SRCHJQE     SEARCH A JQE QUEUE
         B     AI2            END OF QUEUE
         CLI   JQEFLAGS,0     IS THE JOB BUSY OR HELD?
         BNE   REJJQE         YES. SKIP IT.
         B     PRTJQE         PRINT THE RECORD
* SEARCH ONLY ONE QUEUE
*AI5      MVC   QCLASS,QPARM1  USER SPECIFIED CLASS               LBDMC
*         BAL   R2,FINDJQT     FIND QUEUE                         LBDMC
*         BAL   R2,SRCHJQE     SEARCH THE QUEUE                   LBDMC
*         B     STOP           END OF QUEUE                       LBDMC
*         CLI   JQEFLAGS,0     IS THE JOB BUSY OR HELD?           LBDMC
*         BNE   REJJQE         YES. SKIP IT.                      LBDMC
*         B     PRTJQE         PRINT THE RECORD                   LBDMC
***********************************************************************
*                                                                     *
*   AO - PRINT AVAILABLE JOBS IN THE OUTPUT QUEUE                     *
*                                                                     *
***********************************************************************
AO       DS    0H                                                 LBDMC
*AO       CLI   QPARM1,C' '    DID USER SPECIFY CLASS?            LBDMC
*         BNE   AO5            YES. LIMIT TO ONE QUEUE.           LBDMC
* SEARCH ALL QUEUES
         MVI   QCLASS,192     START WITH CLASS A
AO2      BAL   R2,NEXTJOT     DETERMINE NEXT QUEUE
         BAL   R2,SRCHJOE     SEARCH A JQE QUEUE
         B     AO2            END OF QUEUE
         B     PRTJOE         PRINT THE RECORD
* SEARCH ONLY ONE QUEUE
*AO5      MVC   QCLASS,QPARM1  USER SPECIFIED CLASS               LBDMC
*         BAL   R2,FINDJOT     FIND QUEUE                         LBDMC
*         BAL   R2,SRCHJOE     SEARCH THE QUEUE                   LBDMC
*         B     STOP           END OF QUEUE                       LBDMC
*         B     PRTJOE         PRINT THE RECORD                   LBDMC
***********************************************************************
*                                                                     *
*   HI - PRINT JOBS IN INPUT QUEUES THAT ARE HELD                     *
*                                                                     *
***********************************************************************
HI       DS    0H                                                 LBDMC
*HI       CLI   QPARM1,C' '    DID USER SPECIFY CLASS?            LBDMC
*         BNE   HI5            YES. LIMIT TO ONE QUEUE.           LBDMC
* SEARCH ALL QUEUES
         MVI   QCLASS,192     START WITH CLASS A
HI2      BAL   R2,NEXTJQT     DETERMINE NEXT QUEUE
         BAL   R2,SRCHJQE     SEARCH A JQE QUEUE
         B     HI2            END OF QUEUE
         TM    JQEFLAGS,X'E0' IS THE JOB HELD?
         BZ    REJJQE         NO. SKIP IT.
         B     PRTJQE         PRINT THE RECORD
* SEARCH ONLY ONE QUEUE
*HI5      MVC   QCLASS,QPARM1  USER SPECIFIED CLASS               LBDMC
*         BAL   R2,FINDJQT     FIND QUEUE                         LBDMC
*         BAL   R2,SRCHJQE     SEARCH THE QUEUE                   LBDMC
*         B     STOP           END OF QUEUE                       LBDMC
*         TM    JQEFLAGS,X'E0' IS THE JOB HELD?                   LBDMC
*         BZ    REJJQE         NO. SKIP IT.                       LBDMC
*         B     PRTJQE         PRINT THE RECORD                   LBDMC
***********************************************************************
*                                                                     *
*   HO - LIST ALL JOBS WITH HELD OUTPUT                               *
*                                                                     *
***********************************************************************
         USING JQTDSECT,R1    BASE REG FOR JQT
HO       L     R1,QCJQHEAD    LOAD ADDR OF JQT
         LA    R4,JQTOUT      ADDR OF $OUTPUT QUEUE
         DROP  R1
         MVI   QCLASS,8       INDICATE THIS IS THE HELD OUT QUEUE
         BAL   R2,SRCHJQE     SEARCH THE QUEUE
         B     STOP           END OF QUEUE
         CLI   JQEHLDCT,0     ARE THERE ANY HELD DATASETS? (PART 1)
         BNE   PRTJQE         YES. PRINT THE RECORD.
         TM    JQEHQLOK,X'F0' ARE THERE ANY HELD DATASETS? (PART 2)
         BNZ   PRTJQE         YES. PRINT THE RECORD.
         B     REJJQE         REJECT THE RECORD
***********************************************************************
*                                                                     *
*   DA - FIND ALL EXECUTING JOBS                                      *
*                                                                     *
***********************************************************************
DA       MVI   QCLASS,192     START WITH CLASS A
DA2      BAL   R2,NEXTJQT     DETERMINE NEXT QUEUE
         BAL   R2,SRCHJQE     SEARCH THE QUEUE
         B     DA2            END OF QUEUE
         TM    JQEFLAGS,QUEBUSY IS THE JOB EXECUTING?
         BZ    REJJQE         NO. REJECT IT.
         B     PRTJQE         PRINT THE RECORD
***********************************************************************
*                                                                     *
*   DT - LIST ALL TSO USERS                                           *
*                                                                     *
***********************************************************************
         USING JQTDSECT,R1    BASE REG FOR JQT
DT       L     R1,QCJQHEAD    LOAD ADDR OF JQT
         LA    R4,JQTTSU      ADDR OF TSO QUEUE
         DROP  R1
         MVI   QCLASS,0       INDICATE THIS IS THE TSO QUEUE
         BAL   R2,SRCHJQE     SEARCH THE QUEUE
         B     STOP           END OF QUEUE
         B     PRTJQE         PRINT THE RECORD
***********************************************************************
*                                                                     *
*   DS - LIST ALL SYSTEM STARTED TASKS                                *
*                                                                     *
***********************************************************************
         USING JQTDSECT,R1    BASE REG FOR JQT
DS       L     R1,QCJQHEAD    LOAD ADDR OF JQT
         LA    R4,JQTSTC      ADDR OF STC QUEUE
         DROP  R1
         MVI   QCLASS,4       INDICATE THIS IS THE STC QUEUE
         BAL   R2,SRCHJQE     SEARCH THE QUEUE
         B     STOP           END OF QUEUE
         B     PRTJQE         PRINT THE RECORD
***********************************************************************
*                                                                     *
*   DETERMINE LENGTH OF LEVEL                                         *
*                                                                     *
***********************************************************************
PARMLEN  LA    R3,7           MAXIMUM LENGTH OF 8
         LA    R4,QPARM1+7    END OF FIELD
PARMLEN2 CLI   0(R4),C' '     IS THIS BYTE BLANK?
         BNE   PARMLEN3       NO. THIS IS THE LENGTH
         BCTR  R4,0           TRY PREVIOUS BYTE
         BCT   R3,PARMLEN2    LOOP
PARMLEN3 STH   R3,QLNG1       STORE THE LENGTH OF LEVEL
         BR    R2             RETURN TO CALLER
***********************************************************************
*                                                                     *
*   SEARCH A JQE QUEUE                                                *
*                                                                     *
***********************************************************************
SRCHJQE  ZAP   QCOUNT,=P'0'   ZERO THE QUEUE COUNT
         LH    R9,0(R4)       LOAD FIRST JQE OFFSET
         N     R9,=X'0000FFFF' KILL EXTRANEOUS BITS
NEXTJQE  SLA   R9,2           MULTIPLY BY 4
         BZR   R2             END OF QUEUE. RETURN.
         A     R9,QCJQTA      ADD BASE TO OFFSET
         B     4(R2)          DETERMINE ELIGIBILITY
PRTJQE   AP    QCOUNT,=P'1'   INCREMENT COUNT
PRT2JQE  SR    R1,R1          INDICATE THIS IS A JQE
         L     R15,=V(FORMAT) ADDR OF PRINT MODULE
         BALR  R14,R15        PRINT THE JQE IN R9
REJJQE   LH    R9,JQECHAIN    LOAD OFFSET TO NEXT JQE
         B     NEXTJQE        GET THE NEXT JQE
SKIPJQE  AP    QCOUNT,=P'1'   INCREMENT COUNT
         B     REJJQE         CONTINUE
***********************************************************************
*                                                                     *
*   SEARCH A JOE QUEUE                                                *
*                                                                     *
***********************************************************************
SRCHJOE  ZAP   QCOUNT,=P'0'   ZERO THE QUEUE COUNT
FIRSTJOE LH    R8,0(R4)       LOAD FIRST JOE OFFSET
         N     R8,=X'0000FFFF' KILL EXTRANEOUS BITS.
         LTR   R8,R8          IS THE QUEUE EMPTY?
         BZR   R2             YES. RETURN TO CALLER.
         XC    PRIORITY(12),PRIORITY ZERO OUT HIGHEST POINTERS
NEXTJOE  SLA   R8,2           MULTIPLY BY 4
         BZ    TESTJOE        END OF QUEUE. PASS HIGHEST TO CALLER.
         A     R8,QCJOTA      ADD BASE TO OFFSET
         LH    R9,JOEJQE      OFFSET TO JQE
         SLA   R9,2           MULTIPLY BY 4
         BZ    TRYJOE         THIS JOE ALREADY USED. TRY NEXT ONE.
         A     R9,QCJQTA      ADD BASE TO OFFSET
         LA    R7,255         PRESET MAXIMUM PRIORITY
         TM    JQEPRIO,240    IS THIS JOB PRIORITY 15?
         BO    HIGHJOE        YES. PASS TO CALLER.
         LA    R1,16          PRESET PRIORITY ONE
         CLI   JQETYPE,$HARDCPY IS THE JOB EXECUTING?
         BNE   EXECJOE        YES. USE PRIORITY ONE.
         IC    R1,JQEPRIO     INSERT JQE PRIORITY
EXECJOE  IC    R7,JOEPRIO     INSERT JOE PRIORITY
         AR    R7,R1          ADD PRIORITIES
         SRL   R7,1           BECAUSE HASP DOES IT, THAT'S WHY
HIGHJOE  C     R7,PRIORITY    IS THIS LESS THAN PREVIOUS HIGH?
         BL    TRYJOE         YES. TRY NEXT ONE.
         STM   R7,R9,PRIORITY NO. REPLACE PREVIOUS HIGH.
TRYJOE   LH    R8,JOENEXT     ADDR OF NEXT JOE
         B     NEXTJOE        TRY NEXT JOE
TESTJOE  LM    R7,R9,PRIORITY LOAD ADDR OF HIGHEST JOE
         LTR   R8,R8          WAS THE QUEUE EMPTY?
         BZR   R2             YES. END OF QUEUE.
         MVC   JOEJQE,=H'0'   INDICATE THIS JOE USED
         B     4(R2)          DETERMINE ELIGIBILITY
PRTJOE   LA    R1,4           INDICATE THIS IS A JOE
         AP    QCOUNT,=P'1'   INCREMENT COUNT
         L     R15,=V(FORMAT) ADDR OF PRINT MODULE
         BALR  R14,R15        PRINT THE JOE IN R9
REJJOE   B     FIRSTJOE       GET THE NEXT JOE
SKIPJOE  AP    QCOUNT,=P'1'   INCREMENT COUNT
         B     REJJOE         CONTINUE
***********************************************************************
*                                                                     *
*   DETERMINE INPUT QUEUE                                             *
*                                                                     *
***********************************************************************
FINDJQT  TR    QCLASS,CLASSTBL DETERMINE OFFSET
         LH    R4,QCLASSH     LOAD TABLE OFFSET
         BCTR  R4,0           SUBTRACT 1
         STH   R4,QCLASSH     RESTORE VALUE
         B     NEXTJQT2       CONTINUE
NEXTJQT  TR    QCLASS,CLASSTBL DETERMINE OFFSET FROM FIRST CLASS
         LH    R4,QCLASSH     LOAD TABLE OFFSET
         CH    R4,=H'36'      IS THIS THE LAST QUEUE?
         BNL   NEXTJQT9       YES. GO HOME.
NEXTJQT2 TR    QCLASS,NAMETBL MOVE CLASS NAME TO QCLASS
         AR    R4,R4          MULTIPLY BY 2
         USING JQTDSECT,R1    BASE REG FOR JQT
         L     R1,QCJQHEAD    LOAD ADDR OF JQT
         LA    R4,JQTCLSA(R4) NEXT QUEUE
         DROP  R1
         BR    R2             RETURN TO CALLER
NEXTJQT9 CLI   QCODE,0        IS THIS A STATUS REQUEST?
         BE    ST5            YES. GO TO STATUS.
         CLI   QCODE,36       IS THIS A DJ REQUEST?
         BNE   STOP           NO. GO HOME.
         B     ST5            YES. GO TO STATUS.
***********************************************************************
*                                                                     *
*   DETERMINE OUTPUT QUEUE                                            *
*                                                                     *
***********************************************************************
FINDJOT  TR    QCLASS,CLASSTBL DETERMINE OFFSET
         LH    R4,QCLASSH     LOAD TABLE OFFSET
         BCTR  R4,0           SUBTRACT 1
         STH   R4,QCLASSH     RESTORE VALUE
         B     NEXTJOT2       CONTINUE
NEXTJOT  TR    QCLASS,CLASSTBL DETERMINE OFFSET FROM FIRST CLASS
         LH    R4,QCLASSH     LOAD TABLE OFFSET
         CH    R4,=H'36'      IS THIS THE LAST QUEUE?
         BNL   STOP           YES. GO HOME.
NEXTJOT2 TR    QCLASS,NAMETBL MOVE CLASS NAME TO QCLASS
         AR    R4,R4          MULTIPLY BY 2
         USING JOTDSECT,R1    BASE REG FOR JOT
         L     R1,QCJOTA      LOAD ADDR OF JOT
         LA    R4,JOTCLSQ(R4) NEXT QUEUE
         DROP  R1
         BR    R2             RETURN TO CALLER
***********************************************************************
*                                                                     *
*   CALL DISPLAY ROUTINE                                              *
*                                                                     *
***********************************************************************
DISPLAY  LA    R1,QDMSG             SAVE ADDRESS
         ST    R1,QDMSGA                 OF THE MESSAGE
         MVC   QDMLNG,=H'80'        SET THE LENGTH
         L     R15,=V(DISPLAY)      BRANCH TO
         BALR  R14,R15                     DISPLAY
         BR    R2                   RETURN TO CALLER
***********************************************************************
*                                                                     *
*   GO HOME                                                           *
*                                                                     *
***********************************************************************
STOP     QSTOP
         LTORG
***********************************************************************
*                                                                     *
*   TABLES FOR CLASS DETERMINATION                                    *
*                                                                     *
***********************************************************************
NAMETBL  DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
CLASSTBL DC    192X'01'
         DC    X'00010203040506070809',7X'00'
         DC    X'0A0B0C0D0E0F101112',8X'00'
         DC    X'131415161718191A',6X'00'
         DC    X'1B1C1D1E1F2021222324',6X'00'
***********************************************************************
*                                                                     *
*   MISCELLANEOUS GARBAGE                                             *
*                                                                     *
***********************************************************************
ED5      DC    X'402020202120'
DQHEADER DC    CL80'*** INPUT QUEUES ***'
DQLINE   DC    CL80' INPUT                        EXECUTING      WAITINX
               G      HELD'
DFHEADER DC    CL80'*** OUTPUT QUEUES ***'
DFLINE   DC    CL80' OUTPUT                       PRINTING'
         $JQE
         $JOE
         $JOT
         $JQT
WORK     DSECT
         DS    CL80
PRIORITY DS    3F
         QCOMMON
         ORG   QDMSG
         DS    CL9
CLASS    DS    CL1
         DS    CL2
QTCOUNT  DS    CL6
         DS    CL7
QECOUNT  DS    CL3
         DS    CL12
QACOUNT  DS    CL3
         DS    CL10
QHCOUNT  DS    CL3
         ORG   QTCOUNT
FCOUNT   DS    CL6
         END
./ ADD  NAME=Q21
         PRINT NOGEN
SYSLOG   QSTART 'QUEUE COMMAND - PRINT THE SYSTEM LOG DATASET'
         USING QCKPT,R10      BASE REG FOR CKPT WORK AREA
         L     R10,QVCKPT     LOAD BASE REG
         USING WORK,R13       BASE REG FOR TEMP WORK
***********************************************************************
*                                                                     *
*   CALL FINDJOB TO LOCATE THE JQE, JCT, AND IOT                      *
*                                                                     *
***********************************************************************
         L     R15,=V(FINDJOB) ADDR OF MODULE TO FIND JOB
         BALR  R14,R15        GO TO IT
***********************************************************************
*                                                                     *
*   CHECK JOBNAME EQUAL SYSLOG                                        *
*                                                                     *
***********************************************************************
         L     R9,QCJCTA      ADDR OF IOAREA FOR JCT
         USING JCTDSECT,R9    BASE REG FOR JCT
         CLC   JCTJNAME,=CL8'SYSLOG' IS THIS SYSLOG?
         BNE   TILT           NO. TILT.
***********************************************************************
*                                                                     *
*   DETERMINE NUMBER OF DATASETS FROM CURRENT DATASET                 *
*                                                                     *
***********************************************************************
         LH    R3,JCTPDDBK    HIGHEST DATASET ID NUMBER
         LH    R2,QLNG2       LENGTH OF BACKUP PARM
         SH    R2,=H'1'       IS THE BACKUP PARM ZERO LENGTH?
         BM    CALLLIST       YES. SKIP.
         CLI   QPARM2,C'-'    IS THERE A MINUS SIGN?
         BNE   PLUS           NO. SKIP.
         MVI   QPARM2,C'0'    CHANGE MINUS TO ZERO
PLUS     MVC   QFZONES,QFZONE INITIALIZE NUMERIC TEST
         EX    R2,MVZ         MOVE THE ZONES FOR VALIDITY CHECK
         CLC   QFZONES,QFZONE IS THE FIELD NUMERIC?
         BNE   TILT           NO. QUIT.
         EX    R2,PACK        PACK THE FIELD
         CVB   R2,CONVERT     CONVERT TO BINARY
         SR    R3,R2          BACK UP NUMBER OF DATASETS
         CH    R3,=H'101'     IS THE NUMBER LESS THAN 101?
         BL    TILT           YES. TILT.
***********************************************************************
*                                                                     *
*   CALL LISTDS TO LIST THE DATASET                                   *
*                                                                     *
***********************************************************************
CALLLIST STH   R3,QPDSID      STORE DATASET ID
         MVC   QPOFFSET,=H'0' PRINT OFFSET ZERO
         L     R15,=V(LISTDS) ADDR OF LISTDS MODULE
         BALR  R14,R15        GO TO IT
         QSTOP
TILT     QTILT '*** INVALID PARAMETER ***'
***********************************************************************
*                                                                     *
*   MISCELLANY                                                        *
*                                                                     *
***********************************************************************
MVZ      MVZ   QFZONES(1),QPARM2 CHECK FOR NUMERIC
PACK     PACK  CONVERT,QPARM2(1) CONVERT TO BINARY
         LTORG
JCT      EQU   0
BUFSTART EQU   0
BUFDSECT EQU   0
         $JCT
WORK     DSECT
         DS    72C
CONVERT  DS    D
         QCOMMON
         END
./ ADD  NAME=Q22
         PRINT NOGEN
XDS      QSTART 'QUEUE COMMAND - PRINT A DATASET FROM SPOOL BY ID'
         USING QCKPT,R10      BASE REG FOR CKPT WORK AREA
         L     R10,QVCKPT     LOAD BASE REG
         USING WORK,R13       BASE REG FOR TEMP WORK
***********************************************************************
*                                                                     *
*   CALL FINDJOB TO LOCATE THE JQE, JCT, AND IOT                      *
*                                                                     *
***********************************************************************
         L     R15,=V(FINDJOB) ADDR OF MODULE TO FIND JOB
         BALR  R14,R15        GO TO IT
***********************************************************************
*                                                                     *
*   CHECK AND CONVERT THE DATASET ID NUMBER                           *
*                                                                     *
***********************************************************************
         LH    R2,QLNG2       LENGTH OF DATASET ID FIELD
         SH    R2,=H'1'       IS THE DATASET ID FIELD ZERO LENGTH?
         BM    TILT           YES. QUIT.
         MVC   QFZONES,QFZONE INITIALIZE NUMERIC TEST
         EX    R2,MVZ         MOVE THE ZONES FOR VALIDITY CHECK
         CLC   QFZONES,QFZONE IS THE FIELD NUMERIC?
         BNE   TILT           NO. QUIT.
         EX    R2,PACK        PACK THE FIELD
         CVB   R2,CONVERT     CONVERT TO BINARY
         STH   R2,QPDSID      STORE DATASET ID
***********************************************************************
*                                                                     *
*   CHECK AND CONVERT THE PRINT OFFSET                                *
*                                                                     *
***********************************************************************
         MVC   QPOFFSET,=H'0' DEFAULT TO ZERO
         LH    R2,QLNG3       LENGTH OF OFFSET FIELD
         SH    R2,=H'1'       IS THE OFFSET FIELD ZERO LENGTH?
         BM    CALLLIST       YES. USE ZERO OFFSET.
         MVC   QFZONES,QFZONE INITIALIZE NUMERIC TEST
         EX    R2,MVZ2        MOVE THE ZONES FOR VALIDITY CHECK
         CLC   QFZONES,QFZONE IS THE FIELD NUMERIC?
         BNE   TILT           NO. QUIT.
         EX    R2,PACK2       PACK THE FIELD
         CVB   R2,CONVERT     CONVERT TO BINARY
         STH   R2,QPOFFSET    STORE OFFSET
***********************************************************************
*                                                                     *
*   CALL LISTDS TO LIST THE DATASET                                   *
*                                                                     *
***********************************************************************
CALLLIST L     R15,=V(LISTDS) ADDR OF LISTDS MODULE
         BALR  R14,R15        GO TO IT
         QSTOP
TILT     QTILT '*** DATASET ID INVALID ***'
***********************************************************************
*                                                                     *
*   MISCELLANY                                                        *
*                                                                     *
***********************************************************************
MVZ      MVZ   QFZONES(1),QPARM2 CHECK FOR NUMERIC
MVZ2     MVZ   QFZONES(1),QPARM3 CHECK FOR NUMERIC
PACK     PACK  CONVERT,QPARM2(1) CONVERT TO BINARY
PACK2    PACK  CONVERT,QPARM3(1) CONVERT TO BINARY
         LTORG
WORK     DSECT
         DS    72C
CONVERT  DS    D
         QCOMMON
         END
./ ADD  NAME=Q23
         PRINT NOGEN
INITS    QSTART 'QUEUE COMMAND - LIST INITIATORS COMMAND'
         USING QCKPT,R9       BASE REG FOR CHECKPOINT AREA
         L     R9,QVCKPT      LOAD BASE REG
         USING WORK,R13       BASE REG FOR LOCAL WORK AREA
         L     R8,16          POINT TO CVT
         USING CVTDSECT,R8
***********************************************************************
*                                                                     *
*        FIND THE ACTIVE MAIN SUBSYSTEM SSVT                          *
*                                                                     *
***********************************************************************
         L     R8,CVTJESCT    POINT TO JESCT
         DROP  R8
         USING JESCT,R8
         L     R8,JESSSCT     POINT TO SSCT
         DROP  R8
         USING SSCT,R8
         L     R8,SSCTSSVT    POINT TO SSVT
         DROP  R8
         USING SSVT,R8
***********************************************************************
*                                                                     *
*        FIND THE ACTIVE MAIN SUBSYSTEM'S PITS                        *
*                                                                     *
***********************************************************************
         L     R7,$SVPIT      POINT TO PITTABLE
         LTR   R6,R7          TEST IF ANY PITS
         BZ    NOPITS         NO, IGNORE COMMAND
         BCTR  R6,0           SUBTRACT ONE
         BCTR  R6,0           SUBTRACT ONE
         SR    R0,R0          ZERO FOR INSERT
         IC    R0,0(,R6)      INSERT NUMBER OF CLASSES
         LR    R6,R0          COPY THE COUNT
         USING PITDSECT,R7
         MVC   QDHLINE,INITHD MOVE IN THE HEADING
***********************************************************************
*                                                                     *
*        BUILD THE MESSAGE(S) DESCRIBING THE PITS                     *
*                                                                     *
***********************************************************************
BLDMSG   MVC   QDMSG,QBLANK   BLANK THE AREA
         MVC   INIT#(2),PITPATID MOVE IN PIT ID
         LR    R1,R6          COPY THE LENGTH
         BCTR  R1,0           SUBTRACT ONE
         EX    R1,MVCLAS      MOVE THE CLASSES
         TM    PITSTAT,PITHOLDA+PITHOLD1 TEST FOR DRAINED
         BNZ   HOLDPIT        YES
         TM    PITSTAT,PITHALTA+PITHALT1 TEST FOR HALTED
         BNZ   HALTPIT        YES
         MVC   STATUS,=CL8'ACTIVE'
         TM    PITSTAT,PITBUSY TEST FOR BUSY
         BO    ACTPIT         YES
         MVC   STATUS,=CL8'INACTIVE'
         B     NEXTPIT        END OF MESSAGE LINE.
MVCLAS   MVC   CLASSES(0),PITCLASS SET THE CLASSES
HOLDPIT  MVC   STATUS,=CL8'DRAINED' SET STATUS
         TM    PITSTAT,PITBUSY TEST FOR BUSY
         BZ    NEXTPIT        NO
         MVC   STATUS+5(3),=C'ING' SET STATUS
         B     ACTPIT         YES
HALTPIT  MVC   STATUS,=CL8'HALTED' SET STATUS
         TM    PITSTAT,PITBUSY TEST FOR BUSY
         BZ    NEXTPIT        NO
         MVC   STATUS+4(3),=C'ING' SET STATUS
ACTPIT   L     R5,PITSJB      POINT TO THE SJB
         USING SJBDSECT,R5
         L     R1,SJBJQOFF    POINT TO JOB QUEUE OFFSET
         A     R1,QCJQTA      POINT TO THE JQE
         USING JQEDSECT,R1
         CLC   JQEJNAME,SJBJOBNM TEST FOR RIGHT JOB
         BNE   NEXTPIT        RIGHT JOB, GOOD
         MVC   JOBNAME,SJBJOBNM MOVE IN JOBNAME
         LH    R0,JQEJOBNO    LOAD JOB NUMBER
         CVD   R0,CONVERT     GET THE DECIMAL VALUE
         MVC   JOBNUM,ED5     GET THE CHARACTER VALUE
         ED    JOBNUM,CONVERT+5 GET THE CHARACTER VALUE
***********************************************************************
*                                                                     *
*        SEND THE MESSAGE DESCRIBING THE PIT                          *
*                                                                     *
***********************************************************************
NEXTPIT  L     R7,PITNEXT     POINT TO NEXT PIT
         DROP  R1,R5
         MVC   QDMLNG,=H'80'  SET THE LENGTH
         LA    R0,QDMSG       GET THE ADDRESS
         ST    R0,QDMSGA      SET THE ADDRESS
         L     R15,=V(DISPLAY) POINT TO THE ROUTINE
         BALR  R14,R15        CALL THE ROUTINE
         LTR   R7,R7          TEST FOR NEXT PIT
         BNZ   BLDMSG         YES, GO DO IT
***********************************************************************
*                                                                     *
*        END IT ALL                                                   *
*                                                                     *
***********************************************************************
END      QSTOP
NOPITS   QTILT '***** NO PITS  TO DISPLAY *****'
INITHD   DC    CL80'INIT    STATUS   JOBNAME    NUMBER    CLASSES'
ED5      DC    X'402020202120'
         LTORG
***********************************************************************
*                                                                     *
*        DESCRIBE ALL THE DSECTS NEEDED BY THIS MODULE                *
*                                                                     *
***********************************************************************
         $CVT
         $JESCT
         $SSCT
         $SVT
         $PIT
         $SJB
         $JQE
         QCOMMON
         ORG   QDMSG
         DS    C
INIT#    DS    CL2
         DS    CL4
STATUS   DS    CL8
         DS    CL2
JOBNAME  DS    CL8
         DS    CL3
JOBNUM   DS    CL6
         DS    CL4
CLASSES  DS    C
WORK     DSECT
         DS    CL72
CONVERT  DS    D
         END
./ ADD  NAME=Q24
         PRINT NOGEN
ACTIVE   QSTART 'QUEUE COMMAND - LIST ACTIVE JOB STATUS'
         USING QCKPT,R9       BASE REG FOR CHECKPOINT AREA
         L     R9,QVCKPT      LOAD BASE REG
         USING WORK,R13       BASE REG FOR LOCAL WORK AREA
         L     R8,16          POINT TO CVT
         USING CVTDSECT,R8
***********************************************************************
*                                                                     *
*        FIND THE ACTIVE MAIN SUBSYSTEM SSVT                          *
*                                                                     *
***********************************************************************
         L     R7,CVTASVT     POINT TO ASVT
         L     R2,CVTMSER     POINT TO ASVT
         USING ASVT,R7
         L     R7,ASVTMAXU    LOAD THE MAX ASCBS
         DROP  R7
         L     R8,CVTJESCT    POINT TO JESCT
         DROP  R8
         USING JESCT,R8
         L     R8,JESSSCT     POINT TO SSCT
         DROP  R8
         USING SSCT,R8
         L     R8,SSCTSSVT    POINT TO SSVT
         DROP  R8
         USING SSVT,R8
***********************************************************************
*                                                                     *
*        FIND THE ACTIVE MAIN SUBSYSTEM'S HAVT                        *
*                                                                     *
***********************************************************************
         L     R6,$SVHAVT     POINT TO HAVT
         LTR   R6,R6          TEST IF ANY PITS
         BZ    NOHAVT         NO, IGNORE COMMAND
         LA    R6,4(,R6)      POINT TO FIRST SJB POINTER
         USING SJBDSECT,R5
         MVC   QDHLINE,INITHD MOVE IN THE HEADING
***********************************************************************
*                                                                     *
*        BUILD THE MESSAGE(S) DESCRIBING THE JOBS                     *
*                                                                     *
***********************************************************************
BLDMSG   MVC   QDMSG,QBLANK   BLANK THE AREA
         L     R5,0(,R6)      POINT TO SJB
         LTR   R5,R5          TEST FOR ANY
         BZ    NEXTSJB
         L     R4,SJBSJB      TEST FOR BATCH JOB
         LTR   R4,R4          IS IT
         BNZ   BATCHCHK
         L     R3,SJBJQOFF    LOAD JQE OFFSET
         AL    R3,QCJQTA      ADD TO JQE ORIGIN
         USING JQEDSECT,R3    BASE REG FOR JQE
         LH    R0,JQEJOBNO    GET JOB NO.
         CH    R0,=H'20000'   TSO USER?
         BNL   TSOCHK         YES. GO PROCESS
         B     STCCHK         NO. GO PROCESS AS STC
BATCHCHK CLI   QPARM1,X'C2'   BATCH DISPLAY ONLY ?
         BE    BATCHMSG       YES. GO PROCESS
         CLI   QPARM1,X'40'   DISPLAY EVERYTHING ?
         BNE   NEXTSJB        NO. GET NEXT SJB
BATCHMSG LR    R5,R4          COPY THE SJB ADDRESS
         L     R3,SJBJQOFF    POINT TO JQE OFFSET
         AL    R3,QCJQTA      POINT TO THE JQE
         IC    R0,JQETYPE     GET THE JOB TYPE
         MVC   QUEUE,=CL8' INPUT'
         STC   R0,QUEUE+7     SET THE QUEUE TYPE
         OI    QUEUE+7,X'80'  SET THE PRINTABLE QUEUE TYPE
         B     NOTTSO         GO TO COMMON ROUTINE
TSOCHK   CLI   QPARM1,X'E3'   TSO DISPLAY ONLY ?
         BE    TSOMSG         YES. GO PROCESS
         CLI   QPARM1,X'40'   DISPLAY EVERYTHING ?
         BNE   NEXTSJB        NO. GET NEXT SJB ?
TSOMSG   MVC   QUEUE,=CL8'TSO USER'
         B     NOTTSO
STCCHK   CLI   QPARM1,X'E2'   STC DISPLAY ONLY ?
         BE    STCMSG         YES. GO PROCESS.
         CLI   QPARM1,X'40'   DISPLAY EVERYTHING ?
         BNE   NEXTSJB        NO. GET NEXT SJB.
STCMSG   MVC   QUEUE,=CL8'SYSTEM Q'
NOTTSO   L     R1,SJBASCBP    POINT TO ASCB
         USING ASCB,R1
         LM    R14,R15,ASCBEJST GET THE CPU TIME
         SRDL  R14,12         SKIP THE GARBAGE
         D     R14,=F'10000'  GET THE VALUE IN .01 SECS
         CVD   R15,CONVERT    GET THE DECIMAL VALUE
         MVC   TCBTIME,EDCPU  MOVE EDIT MASK
         ED    TCBTIME,CONVERT+4 EDIT THE NUMBER
         MVI   TCBTIME+L'TCBTIME-1,C'S' SET SECONDS
         LM    R14,R15,ASCBSRBT GET THE CPU TIME
         SRDL  R14,12         SKIP THE GARBAGE
         D     R14,=F'10000'  GET THE VALUE IN .01 SECS
         CVD   R15,CONVERT    GET THE DECIMAL VALUE
         MVC   SRBTIME,EDCPU  MOVE EDIT MASK
         ED    SRBTIME,CONVERT+4 EDIT THE NUMBER
         MVI   SRBTIME+L'SRBTIME-1,C'S' SET SECONDS
         MVC   JOBNAME,SJBJOBNM MOVE IN JOBNAME
         LH    R14,JQEJOBNO   LOAD JOB NUMBER
         CVD   R14,CONVERT    GET THE DECIMAL VALUE
         MVC   JOBNUM,ED5     GET THE CHARACTER VALUE
         ED    JOBNUM,CONVERT+5 GET THE CHARACTER VALUE
         LR    R4,R2          COPY THE ADDRESS
FINDCSCB ICM   R4,15,0(R4)    POINT TO THE NEXT CSCB
         BZ    NEXTSJB
         USING CSCDSECT,R4
         CLC   CHKEY,JQEJNAME TEST FOR RIGHT JOB
         BNE   FINDCSCB       NOPE
         MVC   STEPNAME,CHSTEP MOVE IN STEPNAME
         MVC   PROCSTEP,CHPROCSN MOVE IN THE PROCSTEP NAME
         DROP  R4
NOCSCB   LH    R0,ASCBFMCT    GET NUMBER OF SLOTS
         SLL   R0,2           GET NUMBER OF K
         CVD   R0,CONVERT     GET THE DECIMAL VALUE
         MVC   SLOTS,ED5      MOVE EDIT MASK
         ED    SLOTS,CONVERT+5 GET THE K
         MVI   SLOTS+L'SLOTS-1,C'K' SET THE 'K'
         MVC   QDMLNG,=H'80'  SET THE LENGTH
         LA    R0,QDMSG       GET THE ADDRESS
         ST    R0,QDMSGA      SET THE ADDRESS
         L     R15,=V(DISPLAY) POINT TO THE ROUTINE
         BALR  R14,R15        CALL THE ROUTINE
***********************************************************************
*                                                                     *
*        SEND THE MESSAGE DESCRIBING THE PIT                          *
*                                                                     *
***********************************************************************
NEXTSJB  LA    R6,4(,R6)      POINT TO NEXT HAVT POINTER
         DROP  R1,R5
         BCT   R7,BLDMSG      TEST FOR NEXT HAVT POINTER
***********************************************************************
*                                                                     *
*        END IT ALL                                                   *
*                                                                     *
***********************************************************************
END      QSTOP
NOHAVT   QTILT '***** NO JOBS TO DISPLAY *****'
INITHD   DC    CL80'  QUEUE  JOBNAME   JOB#  STEPNAME PROCSTEP   SLOTS *
                  TCB-TIME    SRB-TIME'
ED5      DC    X'402020202120'
EDCPU    DC    X'4020206B2021204B2020'
         LTORG
***********************************************************************
*                                                                     *
*        DESCRIBE ALL THE DSECTS NEEDED BY THIS MODULE                *
*                                                                     *
***********************************************************************
         $CVT
         $JESCT
         $SSCT
         $SVT
         $ASVT
         $ASCB
         $CSCB
         $SJB
         $JQE
         QCOMMON
         ORG   QDMSG
QUEUE    DS    CL8
         DS    C
JOBNAME  DS    CL8
         DS    C
JOBNUM   DS    CL6
         DS    C
STEPNAME DS    CL8
         DS    C
PROCSTEP DS    CL8
         DS    C
SLOTS    DS    CL7
         DS    C
TCBTIME  DS    CL11
         DS    C
SRBTIME  DS    CL11
         DS    C
WORK     DSECT
         DS    CL72
CONVERT  DS    D
         END
./ ADD  NAME=Q25
         PRINT NOGEN
FINDPDDB QSTART 'QUEUE COMMAND - FIND PDDB FOR A DSID'
         USING QCKPT,R10          BASE REG FOR CHECKPONT WORK AREA
         L     R10,QVCKPT         LOAD BASE REG
         USING QDISPLAY,R9        BASE REG FOR DISPLAY WORK AREA
         L     R9,QVDSPL          LOAD BASE REG
         USING WORK,R13           BASE REG FOR LOCAL WORK AREA
***********************************************************************
*                                                                     *
*   CONVERT DATASET ID TO BINARY                                      *
*                                                                     *
***********************************************************************
         XC    CONVERT,CONVERT       CLEAR CONVERT WORK AREA
         PACK  CONVERT+5(3),DSID+1(3) PACK ASID
         CVB   R7,CONVERT         CONVERT DSID TO BINARY
***********************************************************************
*                                                                     *
*   FIND  PDDB  FOR  THIS  DATASET  ID                                *
*                                                                     *
***********************************************************************
NORMAL   MVI   SWITCH,0           INITIALIZE SWITCH
         USING PDBDSECT,R2        BASE REG FOR PDDB
         USING IOTDSECT,R3        BASE REG FOR IOT
         L     R3,QCIOTA          LOAD BASE REG
         LR    R5,R3              IOAREA FOR READ IOT BLOCK
NEXTIOT  LR    R4,R3              BASE OF IOT
         A     R4,IOTPDDBP        OFFSET BEYOND LAST PDDB
         LR    R2,R3              BASE OF IOT
         A     R2,QCPDDB1         OFFSET TO FIRST PDDB IN IOT
FINDDS   CH    R7,PDBDSKEY        IS THIS THE DATASET?
         BE    FOUNDDS            YES. CONTINUE
         LA    R2,PDBLENG(R2)     NO. LOOK AT NEXT PDDB
         CR    R2,R4              HAVE WE GONE PAST THE LAST PDDB
         BL    FINDDS             NO. TRY AGAIN
         L     R4,IOTIOTTR        DISK ADDR OF NEXT IOT
SPIN     LTR   R4,R4              IS THERE ANOTHER IOT?
         BZ    SPINIOT            NO. TRY THE SPIN IOT.
         BAL   R8,READ            READ THE IOT
         B     NEXTIOT            SEARCH THE NEXT IOT
         USING JCTDSECT,R1        BASE REG FOR JCT
SPINIOT  TM    SWITCH,1           DID WE SEARCH THE SPINIOT ALREADY
         BO    STOP               YES. STOP
         OI    SWITCH,1           SET SWITCH
         L     R1,QCJCTA          LOAD BASE REG
         L     R4,JCTSPIOT        DISK ADDR OF SPIN IOT
         DROP  R1
         B     SPIN               SEARCH THE SPIN IOT CHAIN
FOUNDDS  L     R0,PDBRECCT        GET THE RECORD COUNT
         CVD   R0,CONVERT         CONVERT TO DECIMAL
         MVC   DSRECCT,ED8        MOVE EDIT PATTERN TO DISPLAY
         ED    DSRECCT,CONVERT+4  EDIT THE RECORD COUNT
         MVC   DSCLASS,PDBCLASS   MOVE PDBCLASS TO DISPLAY
STOP     QSTOP                    GO BACK TO CALLER
***********************************************************************
*                                                                     *
*   READ A BLOCK FROM HASPACE                                         *
*                                                                     *
***********************************************************************
READ     ST    R4,QCTRAK          STORE DISK ADDR
         LR    R1,R5              IOAREA ADDRESS
         L     R15,=V(READSPC)    ADDR OF ROUTINE TO READ HASPACE
         BALR  R14,R15            GO TO IT
         BR    R8                 RETURN TO CALLER
ED8      DC    X'4020202020202120'
JCT      EQU   0
BUFSTART EQU   0
BUFDSECT EQU   0
         $TAB
         $JCT
         $IOT
         $PDDB
WORK     DSECT
         DS    CL72
SWITCH   DS    C
CONVERT  DS    D
         QCOMMON
         ORG   QDMSG
         DS    CL24
DSID     DS    CL4
         DS    CL4
DSRECCT  DS    CL8
         DS    CL4
DSCLASS  DS    CL1
         END
./ ADD  NAME=Q26
         PRINT NOGEN
SYSOUT   QSTART 'QUEUE COMMAND - MANIPULATE SYSOUT'
         USING QCKPT,R10
         L     R10,QVCKPT
         USING QDISPLAY,R9
         L     R9,QVDSPL
         USING WORK,R13
***********************************************************************
*                                                                     *
*   CALL FINDJOB TO LOCATE THE JQE, JCT AND IOT                       *
*                                                                     *
***********************************************************************
FJOB     L     R15,=V(FINDJOB)    ADDR OF MODULE TO FIND JOB
         BALR  R14,R15            GO TO IT
***********************************************************************
*                                                                     *
*   VALIDATE THE JOBNAME                                              *
*                                                                     *
***********************************************************************
         LA    R2,QLOGON          START ADDR OF QLOGON
         LR    R3,R2              SAVE START ADDR
         LA    R4,7               MAX LENGTH OF LOGON ID
VALID000 CLI   0(R2),C' '         ?/END OF LOGON ID
         BE    VALID010           YES. CONTINUE PROCESSING
         LA    R2,1(R2)           NO.  POINT TO NEXT FIELD
         BCT   R4,VALID000        GO CHECK AGAIN
VALID010 SR    R2,R3              LENGTH OF LOGON ID
         BCTR  R2,R0              DECREMENT FOR EXECUTE INSTRUCTION
         USING JCTDSECT,R4        BASE REG FOR JCT
         L     R4,QCJCTA          A(JCT)
         TM    JCTJOBFL,JCTSTCJB
         BO    GOODNM
         CLC   JCTJNAME(8),=C'XH904IMS'
         BE    GOODNM
         CLC   JCTJNAME(4),=C'X239'
         BE    GOODNM
         CLC   JCTJNAME(3),=C'IMS'
         BE    GOODNM
         CLC   JCTJNAME(6),=C'XH904R'
         BE    GOODNM
         CLC   QLOGON(4),JCTJNAME    JOBNAME VALID?
         BNE   WRONGJOB       NO. TILT.
***********************************************************************
*                                                                     *
***********************************************************************
*                                                                     *
*   CHECK AND CONVERT THE DATASET ID NUMBER                           *
*                                                                     *
***********************************************************************
GOODNM   EQU   *                     OF DATASET ID FIELD
***********************************************************************
*                                                                     *
*   VALIDATE THE FUNCTION CODE                                        *
*                                                                     *
***********************************************************************
         LH    R1,QCODEH          GET FUNCTION CODE
         CH    R1,=H'8'           ?/VALID FUNCTION CODE
         BH    STOP               NO. EXIT
***********************************************************************
*                                                                     *
*   BRANCH TO THE APPROPIATE PROCESSOR                                *
*                                                                     *
***********************************************************************
         LA    R7,SSOBHDR         ADDR FOR SUBSYSTEM OPTION BLOCK
         USING SSOB,R7
         B     *+4(R1)
         B     DELETE             0   DELETE REQUEST
         B     REQUEUE            4   REQUEUE REQUEST
         B     CANCEL             8   CANCEL REQUEST
***********************************************************************
*                                                                     *
*   PROCESS CANCEL REQUEST                                            *
*                                                                     *
***********************************************************************
CANCEL   LA    R5,SSCSBGN         A(CANCEL PARAMETER LIST)
         BAL   R6,INITSSOB        GO INITIALIZE THE SSOB.
         MVC   SSOBFUNC,=AL2(SSOBCANC)  SET THE FUNCTION
         XC    SSCSBGN(SSCSIZE),SSCSBGN CLEAR PARM LIST
         MVC   SSCSLEN,=AL2(SSCSIZE) SET LENGTH OF CANCEL PARM LIST
         CLI   QPARM2,C'P'        ?/PURGE THE OUTPUT
         BNE   CAN000             NO. DON'T SET THE FLAG
         OI    SSCSFLGS,SSCSCOUT  YES
CAN000   MVC   SSCSJOBN,JCTJNAME  JOBNAME
         MVC   SSCSJOBI,JCTJOBID  JES2 JOB ID
         MVC   SSCSDIMP,=H'16'
         LA    R5,SSCSJOBI        A(JES2 JOB ID)
         BAL   R6,FIXJOBID        ENSURE JOBID HAS NO IMBEDDED BLANKS
         BAL   R6,VERREQ          VERIFY THE REQUEST
         BAL   R6,CALLSSI         GO CALL SUBSYSTEM INTERFACE RTN
         L     R1,SSOBRETN        GET RC FOR CANCEL FUNCTION
         B     *+4(R1)
         B     FUNCTOK            0 -  CANCEL COMPLETED
         B     TILTNOJB           4 -  JOBNAME NOT FOUND
         B     TILTBADI           8 -  INVALID JOBNAME/JOB ID COMB.
         B     TILTNCAN           12 - JOB NOT CANCELLED - DUP JOBN
         B     TILTMALL           16 - STATUS ARRAY TOO SMALL
         B     TILTOUTP           20 - JOB NOT CANCELLED - ON OUTPUT Q
         B     TILTYNTX           24 - JOB ID WITH INVALID SYNTAX
         B     TILTICAN           28 - INVALID CANCEL REQUEST
***********************************************************************
*                                                                     *
*   PROCESS REQUEUE REQUEST                                           *
*                                                                     *
***********************************************************************
REQUEUE  LA    R5,SSSOBGN         A(REQUEUE SYSOUT PARM LIST)
         BAL   R6,INITSSOB        GO INITIALIZE THE SSOB
         MVC   SSOBFUNC,=AL2(SSOBSOUT) INDICATE SYSOUT IS THE FUNCTION
         XC    SSSOBGN(SSSOSIZE),SSSOBGN CLEAR PARM LIST
         MVC   SSSOLEN,=AL2(SSSOSIZE) SET LENGTH OF SYSOUT PARM LIST
         OI    SSSOUFLG,SSSOSETC  USE SSSOCLAS AS DISP
         OI    SSSOUFLG,SSSORLSE  RELEASE ALL SELECTED DATA SETS
         OI    SSSOFLG1,SSSOHLD   SELECTION INCLUDES HELD SYSOUT DS
         OI    SSSOFLG1,SSSOSJBN  JOB NAME IS PRESENT
         OI    SSSOFLG1,SSSOSJBI  JOB ID IS PRESENT
         OI    SSSOFLG2,SSSOCTRL  PROCESSING COMPLETED
         MVC   SSSOJOBN,JCTJNAME  JOBNAME
         MVC   SSSOJOBI,JCTJOBID  JOB ID
         MVC   SSSOCLAS,QPARM2    NEWCLASS
         LA    R5,SSSOJOBI        A(JES JOB ID)
         BAL   R6,FIXJOBID        ENSURE JOBID HAS NO EMBEDDED BLANKS
         BAL   R6,VERREQ          VERIFY THE REQUEST
         BAL   R6,CALLSSI         GO CALL SUBSYSTEM INTERFACE RTN
CHKSORC  L     R1,SSOBRETN        GET RETURN CODE FOR SYSOUT FUNCTION
         B     *+4(R1)
         B     FUNCTOK            0 -  SYSOUT COMPLETED
         B     TILTEODS           4 -  NO MORE DS TO SELECT
         B     TILTNJOB           8 -  JOB NOT FOUND
         B     TILTINVA           12 - INVALID SEARCH ARGUMENTS
         B     TILTUNAV           16 - UNABLE TO PROCESS NOW
         B     TILTDUPJ           20 - DUPLICATE JOB NAMES
         B     TILTINVJ           24 - INVALID JOBN/JOBID COMBO
         B     TILTIDST           28 - INVALID DEST SPECIFIED
***********************************************************************
*                                                                     *
*   PROCESS DELETE  REQUEST                                           *
*                                                                     *
***********************************************************************
DELETE   LA    R5,SSSOBGN         A(DELETE SYSOUT PARM LIST)
         BAL   R6,INITSSOB        GO INITIALIZE THE SSOB
         MVC   SSOBFUNC,=AL2(SSOBSOUT) INDICATE SYSOUT IS THE FUNCTION
         XC    SSSOBGN(SSSOSIZE),SSSOBGN CLEAR PARM LIST
         MVC   SSSOLEN,=AL2(SSSOSIZE) SET LENGTH OF SYSOUT PARM LIST
         OI    SSSOUFLG,SSSODELC  INDICATE DELETE REQUEST
         OI    SSSOFLG1,SSSOHLD   SELECTION INCLUDES HELD DS
         OI    SSSOFLG1,SSSOSJBN  JOB NAME PRESENT
         OI    SSSOFLG1,SSSOSJBI  JES2 JOB ID PRESENT
         OI    SSSOFLG2,SSSOCTRL  PROCESSING COMPLETED
         MVC   SSSOJOBN,JCTJNAME  JOBNAME
         MVC   SSSOJOBI,JCTJOBID  JES2 JOBID
         LA    R5,SSSOJOBI        A(JES2 JOBID)
         BAL   R6,FIXJOBID        ENSURE JOBID HAS NO EMBEDDED BLANKS
         BAL   R6,VERREQ          VERIFY THE REQUEST
         BAL   R6,CALLSSI         GO CALL SUBSYSTEM INTERFACE RTN.
         B     CHKSORC            GO CHECK RC
***********************************************************************
*                                                                     *
*   INITIALIZE THE SUBSYSTEM OPTION BLOCK (SSOB)                      *
*                                                                     *
*        R5 - ADDRESS OF FUNCTION PARM LIST                           *
*        R6 - RETURN ADDRESS                                          *
*        R7 - A(SSOB)                                                 *
*                                                                     *
***********************************************************************
INITSSOB XC    SSOBEGIN(SSOBHSIZ),SSOBEGIN CLEAR THE SSOB
         MVC   SSOBID,=C'SSOB'
         MVC   SSOBLEN,=AL2(SSOBHSIZ) LENGTH OF SSOB HEADER
         ST    R5,SSOBINDV        FUNCTION DEPENDENT AREA POINTER
         ST    R7,SSOBPTR         SAVE ADDR OF SSOB
         OI    SSOBPTR,X'80'      REQUIRED FOR IEFSSREQ INTERFACE
         BR    R6
***********************************************************************
*                                                                     *
*   REMOVE EMBEDDED BLANKS IN JES2 JOB ID                             *
*                                                                     *
***********************************************************************
FIXJOBID LA    R8,5               MAX LENGTH OF SCAN
         LA    R5,3(R5)           START LOCATION FOR SCAN
FIX000   CLI   0(R5),C' '         ?/EMBEDDED BLANK
         BNE   FIX010             NO. CONTINUE WITH THE SCAN
         MVI   0(R5),C'0'         YES. REPLACE WITH 0
FIX010   LA    R5,1(R5)           POINT TO NEXT BYTE
         BCT   R8,FIX000          GO DO IT AGAIN
         BR    R6                 ALL OVER. RETURN TO CALLER
***********************************************************************
*                                                                     *
*   TELL THE USER WHAT HE IS ABOUT TO DO                              *
*                                                                     *
***********************************************************************
VERREQ   MVC   VCLEAR,WARNING     MOVE IN THE WARNING MSG
         MVC   VJOBN(8),JCTJNAME
         MVC   VJOBID(8),JCTJOBID
         LR    R2,R6              SAVE RETURN ADDR
         LA    R5,VJOBID          A(JES JOB ID)
         BAL   R6,FIXJOBID        INSURE NO IMBEDDED BLANKS
         LR    R6,R2              RESTORE RETURN ADDR
         CLI   QSUBNAME,C'D'      ?/DELETE COMMAND
         BNE   VER000
         MVC   VCMD(6),=C'DELETE'
         B     VER020
VER000   CLI   QSUBNAME,C'C'      ?/CANCEL COMMAND
         BNE   VER010
         MVC   VCMD(6),=C'CANCEL'
         CLI   QPARM2,C'P'        PURGE SPECIFIED
         BNE   VER020
         MVC   VACTION(5),QPARM2
         B     VER020
VER010   MVC   VCMD(7),=C'REQUEUE'
         MVC   VACTION,RQACTION
         MVC   VCLASS(1),QPARM2
VER020   MVC   QDMLNG,=H'0'       TELL DISPLAY TO PRINT IT NOW
         L     R15,=V(DISPLAY)    A(MODULE TO DISPLAY THE MESSAGE)
         BALR  R14,R15            GO DISPLAY THE WARNING
         BR    R6                 RETURN TO THE CALLER
***********************************************************************
*                                                                     *
*   INTERFACE TO THE SUBSYSTEM                                        *
*                                                                     *
***********************************************************************
CALLSSI  L     R2,16              A(CVT)
         L     R2,296(R2)         A(JESCT)
         MODESET MODE=SUP         GET SUPER
         LA    R1,SSOBPTR         ADDR OF PTR TO SSOB
         L     R15,20(R2)         A(JESSSREQ)
         BALR  R14,R15
         LR    R2,R15             SAVE RETURN CODE
         MODESET MODE=PROB        BACK TO NORMAL
         B     *+4(R2)
         BR    R6                 0 -  SUCCESSFUL INSTRUCTION
         BR    R6                      DUMMY INSTRUCTION
         B     TILTNSUP           4 -  SS DOESN'T SUPPORT THIS FUNCTION
         B     TILTNTUP           8 -  SS EXIST, BUT IS NOT UP
         B     TILTNOSS           12 - SS DOES NOT EXIST
         B     TILTDIST           16 - FUNCTION NOT SUPPORTED
         B     TILTLERR           20 - LOGICAL ERROR
***********************************************************************
*                                                                     *
*   RETURN TO CALLER                                                  *
*                                                                     *
***********************************************************************
STOP     QSTOP
FUNCTOK  QTILT ' *** COMMAND SUCCESSFULLY PROCESSED ***'
***********************************************************************
*                                                                     *
*   ERROR MESSAGES                                                    *
*                                                                     *
***********************************************************************
WRONGJOB QTILT ' *** JOBNAME DOES NOT BELONG TO YOU ***'
TILTNSUP QTILT ' *** QUEUE LOGIC ERROR -- RC =4  FROM SSI ***'
TILTNTUP QTILT ' *** JES2 IS NOT UP ***'
TILTNOSS QTILT ' *** QUEUE LOGIC ERROR -- RC =12 FROM SSI ***'
TILTDIST QTILT ' *** DISASTROUS ERROR DURING PROCESSING ***'
TILTLERR QTILT ' *** QUEUE LOGIC ERROR -- RC =20 FROM SSI ***'
TILTNOJB EQU   *
TILTNJOB QTILT ' *** JOBNAME NOT FOUND ***'
TILTBADI EQU   *
TILTINVJ QTILT ' *** INVALID JOBNAME/JOB ID COMBINATION ***'
TILTNCAN EQU   *
TILTDUPJ QTILT ' *** DUPLICATE JOBNAME AND NO JOBID GIVEN ***'
TILTEODS QTILT ' *** JOB HAS NO HELD DATA SETS ***'
TILTICAN QTILT ' *** CAN''T CANCEL YOUR TSO SESSION OR A STARTED TASK *X
               **'
TILTOUTP QTILT ' *** JOB NOT CANCELLED - JOB ON OUTPUT QUEUE ***'
TILTMALL EQU   *
TILTYNTX EQU   *
TILTINVA EQU   *
TILTUNAV EQU   *
TILTIDST QTILT ' *** QUEUE LOGIC ERROR ***'
***********************************************************************
*                                                                     *
*   MISCELLANEOUS NUTS, BOLTS, ETC.                                   *
*                                                                     *
***********************************************************************
VERJOBN  CLC   QLOGON(*-*),JCTJNAME
WARNING  DS    0CL80
         DC    CL21' *** '
         DC    CL1'('
         DC    CL8' '
         DC    CL1')'
         DC    CL12' '
         DC    CL37'. HIT ENTER IF OK OR RESPECIFY. ***'
RQACTION DC    CL11'NEWCLASS( )'
         LTORG
JCT      EQU   0
BUFSTART EQU   0
BUFDSECT EQU   0
         $TAB
         $JCT
         $IOT
         $PDDB
         IEFJSSOB (SO,CS),CONTIG=YES
         QCOMMON
         ORG   QDHLINE
VCLEAR   DS    0CL80
         DS    CL5
VCMD     DS    CL8
VJOBN    DS    CL9
VJOBID   DS    CL10
VACTION  DS    CL11
         DS    CL37
VCLASS   EQU   VACTION+9
WORK     DSECT
FILLER   DS    CL512              BIG FILLER
SSOBPTR  DS    F
SSOBHDR  DS    CL140
         END
./ ADD  NAME=Q27
         PRINT NOGEN
PRINT    QSTART 'QUEUE COMMAND - PRINT SCREEN DISPLAY ROUTINE'     FCI*
         USING QDISPLAY,R10   BASE REG FOR DISPLAY WORK AREA       FCI*
         L     R10,QVDSPL     LOAD BASE REG                        FCI*
         USING QCPRINT,R9     BASE REG FOR PRINT WORK AREA         FCI*
         L     R9,QVPRINT     LOAD BASE REGISTER                   FCI*
         USING WORK,R13       BASE REG FOR LOCAL WORK AREA         FCI*
***********************************************************************
*   PROCESS THE PRINT COMMAND                                      FCI*
***********************************************************************
STARTIT  BAL   R7,PARSECMD    GO PARSE THE PRINT COMMAND           FCI*
         CLC   =C'ON',QPPARM1 IS IT ON?                            FCI*
         BE    STARTPRT         YES..GO START IT                   FCI*
         CLC   =C'OFF',QPPARM1 IS PRINT OFF?                       FCI*
         BE    STOPPRT          YES..GO STOP IT                    FCI*
         CLI   QPPARM1,C' '   NO PARM?                             FCI*
         BE    STARTPRT         YES..ASSUME START                  FCI*
STOP     MVC   QDREPLY,QBLANK   KISS OFF OUR REPLY  (SNEAKY)       FCI*
         XC    QDRLNG,QDRLNG    AND SAY NOBODY HOME                FCI*
         QSTOP                                                     FCI*
         EJECT ,                                                   FCI*
***********************************************************************
*   START (OR CONTINUE) THE PRINT PROCESS                          FCI*
***********************************************************************
STARTPRT DS 0H                                                     FCI*
         TM    QPFLAG,HARDCPY  IS HARDCOPY ON                      FCI*
         BO    JUSTPRT         YES..JUST PRINT                     FCI*
         ZAP   QPPAGE,=P'0'    RESET PAGE NUMBER                   FCI*
         MVI   QPHEAD1,C'0'    AND ASA ON HEADING SO WELL START FRESH
         BAL   R7,ALLOCHC      GO ALLOCATE / OPEN HARDCOPY         FCI*
JUSTPRT  BAL   R7,GETTIME      GO GET DATE AND TIME                FCI*
         MVC   QPUSER,QLOGON   MOVE IN USERID                      FCI*
         MVC   QPDATE,JDATE    MOVE IN DATE TIME INFO              FCI*
         MVC   QPPAGE#,QBLANK     CLEAR OUT PAGE # FIELD           FCI*
         XC    QPHEAD1(1),=X'01'  TOGGLE ASA FLAG 0-1 OR 1-0       FCI*
         CLI   QPHEAD1,C'1'    EJECT NOW SCHEDULED?                FCI*
         BNE   NOPAGE             NO..SKIP PAGE SETTING            FCI*
*                                                                  FCI*
         AP    QPPAGE,=P'1'    BUMP PAGE COUNT                     FCI*
         MVC   QPPAGE#,=X'402020202021'  MOVE IN MASK              FCI*
         ZAP   DBLWORK,QPPAGE  MOVE INTO AREA                      FCI*
         ED    QPPAGE#,DBLWORK+5   EDIT IN PAGE NUMBER             FCI*
NOPAGE   PUT   HASPPRNT,QPHEAD1  PUT OUT TITLE LINE                FCI*
         PUT   HASPPRNT,QPHEAD2  PUT OUT '-' LINE                  FCI*
*                                                                  FCI*
         MVC   QPLINE,QBLANK                   RECONSTRUCT IMAGE   FCI*
         MVC   QPLINE(15),=C'QUEUE COMMAND -'    OF HEADER LINE    FCI*
         MVC   QPLINE+16(L'QPRSAVE),QPRSAVE        WITHOUT 3270    FCI*
         PUT   HASPPRNT,QPDETAIL                      CONTROL CHARS
         EJECT ,                                                   FCI*
*                                                                  FCI*
*  PUT OUT ENTIRE SCREEN OF DETAIL LINES (BLANK OR NOT)            FCI*
*                                                                  FCI*
         L     R2,QDSCRNA         LOAD TERMINAL OUTPUT AREA ADDR  LBDMC
         AH    R2,QDHORZ          + 1ST LINE                      LBDMC
         AH    R2,QDHORZ          + 2ND LINE                      LBDMC
         LA    R2,13(R2)          + 3270 CTL CHARS                LBDMC
         LH    R3,QDVERT          NUMBER TO CRANK                 LBDMC
         SH    R3,=H'2'           NUMBER TO CRANK-2               LBDMC
PUTLOOP  MVC   QPLINE,0(R2)      MOVE INTO OUR BUFFER              FCI*
         CLC   QPLINE,QBLANK      ENTIRE LINE BLANK?              LBDMC
         BE    NOPRINT             YES, DON'T WASTE THE PAPER     LBDMC
         PUT   HASPPRNT,QPDETAIL PUT DETAIL LINE LOUT              FCI*
NOPRINT  DS    0H                                                 LBDMC
         AH    R2,QDHORZ          POINT TO NEXT LINE              LBDMC
         BCT   R3,PUTLOOP        AND GRIND THE SCREEN THROUGH      FCI*
*                                                                  FCI*
         MVC   QPLINE,QBLANK                   RECONSTRUCT IMAGE   FCI*
         MVC   QPLINE(07),=C'REPLY -'            OF COMMAND LINE   FCI*
         MVC   QPLINE+08(L'QDREPLY),QDREPLY        WITHOUT 3270    FCI*
         MVC   QPLINE+72(1),QDPLUS                   CONTROL CHARS FCI*
         PUT   HASPPRNT,QPDETAIL                       AND PRINT I FCI*
*                                                                  FCI*
         MVI   QPDETAIL,C'-'       TRIPLE SPACE A BLANK LINE       FCI*
         MVC   QPLINE,QBLANK                                       FCI*
         PUT   HASPPRNT,QPDETAIL   AND PRINT IT                    FCI*
         MVI   QPDETAIL,C' '       RESTORE TO SINGLE SPACE         FCI*
*                                                                  FCI*
         MVC   QDTLINE+L'QDTLINE-L'PRTMSG-1(L'PRTMSG),PRTMSG       FCI*
GOTMSG   LA    R1,0               SET A ZERO                       FCI*
         L     R2,4(R13)              RETURN CODE                  FCI*
         ST    R1,16(R2)                  IN REGISTER 15 (SAVED)   FCI*
         B     STOP                                                FCI*
         SPACE 2                                                   FCI*
PRTMSG   DC    C'SCREEN PRINTED'                                   FCI*
         EJECT ,                                                   FCI*
***********************************************************************
*   STOP PRINT PROCESS AND FREE HASPPRNT DDNAME                    FCI*
***********************************************************************
STOPPRT  TM    QPFLAG,HARDCPY             IS HARDCPY ON            FCI*
         BNO   STOP                       NOPE..NO WORK TO DO      FCI*
         LA    R2,HASPPRNT          BUILD                          FCI*
         LA    R1,DBLWORK                   LIST                   FCI*
         MVI   DBLWORK,X'80'              LAST ENTRY IN LIST       FCI*
         CLOSE ((2)),MF=(E,(1))           CLOSE OFF THE FILE       FCI*
         FREEPOOL (2)                     FREE THE BUFFERS TOO     FCI*
         MVC   DYNALLOC(F99LEN),F99PTR   COPY DYN FREE LIST        FCI*
         LA    R1,FREERB          RELOCATE THE LIST ADDRESSES.     FCI*
         STCM  R1,B'0111',FREEPTR+1   *                            FCI*
         LA    R1,FREETXPT            *                            FCI*
         ST    R1,FREETPTR            *                            FCI*
         LA    R1,FREETU1             *                            FCI*
         STCM  R1,B'0111',FREETXPT+1  *                            FCI*
         LA    R1,FREETU2             *                            FCI*
         STCM  R1,B'0111',FREETXPT+5  *                            FCI*
         LA    R1,FREEPTR                                          FCI*
         DYNALLOC                                                  FCI*
         NI    QPFLAG,255-HARDCPY    TURN OFF PRINT FLAG           FCI*
         MVC   QDTLINE+L'QDTLINE-L'PRTSTP-1(L'PRTSTP),PRTSTP       FCI*
         B     GOTMSG                                              FCI*
PRTSTP   DC    C'PRINT STOPPED; SYSOUT FREED FOR PRINT'            FCI*
         EJECT ,                                                   FCI*
***********************************************************************
*                                                                  FCI*
*   PARSE PRINT COMMAND                                            FCI*
*                                                                  FCI*
***********************************************************************
PARSECMD LH    R2,QDRLNG      LENGTH OF REPLY LINE                 FCI*
         OC    QDREPLY,QBLANK TRANSLATE TO UPPER CASE              FCI*
         CLC   QDREPLY,QBLANK IS THE ENTIRE REPLY BLANK?           FCI*
         BER   R7             YES. NOTHING TO PARSE..RETURN        FCI*
         MVC   FIELD,QBLANK   BLANK THE WORK FIELD                 FCI*
         MVC   OFFSET(4),=F'0' ZERO THE OFFSET AND LENGTH          FCI*
         MVC   QPOFF0(12),OFFSET INITIALIZE FIRST FIELD            FCI*
         MVC   QPOFF1(48),QPOFF0 INITIALIZE NEXT FOUR FIELDS       FCI*
         LA    R6,QPOFF4+12   ADDR PAST LAST FIELD                 FCI*
         LA    R5,QPOFF0      ADDR OF FIRST SET OF FIELDS          FCI*
         LA    R3,QDREPLY     FIRST BYTE OF REPLY LINE             FCI*
ENCORE   LA    R4,FIELD       FIRST BYTE OF WORK FIELD             FCI*
BLANK    CLI   0(R3),C' '     IS THIS BYTE BLANK?                  FCI*
         BNE   FIRST          NO. START OF FIELD.                  FCI*
         LA    R3,1(R3)       YES. SKIP IT.                        FCI*
         BCT   R2,BLANK       TRY NEXT BYTE                        FCI*
         B     EMPTY          END OF REPLY LINE.                   FCI*
FIRST    LH    R1,QDRLNG      REPLY LENGTH                         FCI*
         SR    R1,R2          COMPUTE OFFSET TO START OF FIELD     FCI*
         STH   R1,OFFSET      STORE OFFSET                         FCI*
         LR    R1,R2          SAVE COUNT OF REMAINING BYTES        FCI*
         B     CHAR           CONTINUE                             FCI*
LOOP     CLI   0(R3),C' '     IS THIS BYTE BLANK?                  FCI*
         BE    LAST           YES. END OF FIELD.                   FCI*
CHAR     MVC   0(1,R4),0(R3)  MOVE BYTE TO SUBNAME                 FCI*
         LA    R3,1(R3)       INCREMENT                            FCI*
         LA    R4,1(R4)       INCREMENT                            FCI*
         BCT   R2,LOOP        TRY NEXT BYTE                        FCI*
LAST     SR    R1,R2          COMPUTE FIELD LENGTH                 FCI*
         CH    R1,=H'8'       IS LENGTH GREATER THAN 8?            FCI*
         BNH   STORE          NO. USE IT.                          FCI*
         LA    R1,8           YES. USE LENGTH OF EIGHT.            FCI*
STORE    STH   R1,LENGTH      STORE FIELD LENGTH                   FCI*
EMPTY    MVC   0(12,R5),OFFSET MOVE FIELD TO QCOMMON               FCI*
         LTR   R2,R2          IS THE REMAINING LENGTH ZERO?        FCI*
         BZR   R7             YES. FINITO OF PARSE..RETURN         FCI*
*                                                                  FCI*
         MVC   FIELD,QBLANK   BLANK THE WORK FIELD                 FCI*
         MVC   OFFSET(4),=F'0' ZERO OUT OFFSET AND LENGTH          FCI*
         LA    R5,12(R5)      INCREMENT TO NEXT FIELD              FCI*
         CR    R5,R6          WAS THAT THE LAST FIELD?             FCI*
         BL    ENCORE         NO. PROCESS NEXT FIELD.              FCI*
         EJECT ,                                                   FCI*
***********************************************************************
* GET DATE/TIME FOR HEADING   ENTER WITH BAL R7,GETTIME            FCI*
* RETURNS WITH JDATE(LEN) = YY.DDD  HH:MM:SS DAY MTH DD,19YY       FCI*
*                           123456789.123456789.123456789.123      FCI*
*                                                                  FCI*
***********************************************************************
GETTIME  TIME  DEC                                                 FCI*
         ST    R1,DATE                 SAVE DATE FOR LATER         FCI*
***FORMAT THE PRESENT TIME (AS SET BY THE OPERATOR)                FCI*
         ST    R0,DBLWORK              CNVT PACKED TO DEC          FCI*
         MVC   MONMSK(MVCLEN),XMONMSK  MOVE IN AND INITIALIZE TABLE/DAT
         MVI   DBLWORK+4,X'0F'                                     FCI*
         UNPK  WORKWORD(9),DBLWORK(5)                              FCI*
         MVC   TIMEHRS,WORKWORD        MOVE TIME TO MSG            FCI*
         MVC   TIMMINS,WORKWORD+2                                  FCI*
         MVC   TIMSECS,WORKWORD+4                                  FCI*
***FORMAT TODAY'S DATE INTO THE OUTPUT MSG                         FCI*
         MVC   WORKWORD(4),DATE        MOVE DATE TO WORK AREA.     FCI*
         MVO   WORKWORD+1(3),WORKWORD(2)   MAKE 00YYDDDS INTO 00000YYS.
         UNPK  CYR(2),WORKWORD+2(2)    FORMAT YEAR.                FCI*
         XC    DBLWORK,DBLWORK                                     FCI*
         MVC   DBLWORK+4(4),WORKWORD   CNVT YEAR TO BIN            FCI*
         CVB   R0,DBLWORK                                          FCI*
         ST    R0,BINYEAR              AND SAVE                    FCI*
         TM    BINYEAR+3,X'03'         LEAP YEAR?                  FCI*
         BNZ   MON1                    NO.                         FCI*
         MVI   MONMSK+10,29            YES, CORRECT                FCI*
MON1     XC    DBLWORK,DBLWORK         CNVT DAYS TO BIN            FCI*
         MVC   DBLWORK+6(2),DATE+2                                 FCI*
         CVB   R2,DBLWORK                                          FCI*
         ST    R2,BINDAYS              SAVE FOR LATER              FCI*
         XR    R1,R1                                               FCI*
         LA    R15,11                                              FCI*
MON2     IC    R1,MONMSK(R15)          COMPUTE MON & DAY           FCI*
         SR    R2,R1                                               FCI*
         BNP   MONOVR                                              FCI*
         BCT   R15,MON2                                            FCI*
         B     *+6                                                 FCI*
MONOVR   AR    R2,R1                   CORRECT OVERDRAW            FCI*
         CVD   R2,DBLWORK              FORMAT DAY                  FCI*
         UNPK  CDAYN(2),DBLWORK+6(2)                               FCI*
         OI    CDAYN+1,X'F0'           FIX UP SIGN                 FCI*
         MH    R15,=H'3'               GET TABLE OFFSET            FCI*
         LA    R15,MONTAB(R15)         AND POINT AT MONTH          FCI*
         MVC   CMON(3),0(R15)          MOVE IT TO THE MSG          FCI*
         EJECT ,                                                   FCI*
***DAY OF WEEK                                                     FCI*
         L     R15,BINYEAR                                         FCI*
         SH    R15,=H'69'                                          FCI*
         BNP   OUTT                    MUST BE GREATER OR BAD      FCI*
         XR    R14,R14                 CLEAR DAY REG               FCI*
         D     R14,=F'4'                                           FCI*
         MH    R15,=H'5'                                           FCI*
         AR    R14,R15                                             FCI*
         A     R14,BINDAYS                                         FCI*
         SRDA  R14,32                                              FCI*
         D     R14,=F'7'               MODULO 7 FOR WEEK           FCI*
         MH    R14,=H'3'                                           FCI*
         LA    R14,DAYTAB(R14)         POINT AT TODAY              FCI*
         MVC   CDAY(3),0(R14)          INSERT IN MSG               FCI*
***                                                                FCI*
MOVEJD   MVC   JDATE-1(7),=X'4020204B202020'                       FCI*
         ED    JDATE-1(7),DATE+1                                   FCI*
*                                                                  FCI*
DATERTN  BR    R7                      RETURN TO MAINLINE          FCI*
*                                                                  FCI*
OUTT     MVC   CDAY(3),=CL3'???'                                   FCI*
         B     MOVEJD                                              FCI*
         SPACE 2                                                   FCI*
***********************************************************************
* LEAVE FIELDS TOGETHER.. INITIALIZED BY ONE MVC WITH VALUES       FCI*
*                                                                  FCI*
XMONMSK  DC    AL1(31,30,31,30,31,31,30,31,30,31,28,31)  L         FCI*
         DC    C' XX.XXX',C'  '                          E  F      FCI*
         DC    CL2' ',C':'                               A  I  T   FCI*
         DC    CL2' ',C':'                               V  E  O   FCI*
         DC    CL2' ',C' '                               E  L  G   FCI*
         DC    CL3' ',C' '                                  D  E   FCI*
         DC    CL3' ',C' '                                  S  T   FCI*
         DC    CL2' ',C',19'                                   H   FCI*
         DC    CL2'  ',C' '                                    E   FCI*
*                                                              R   FCI*
***********************************************************************
MVCLEN   EQU   *-XMONMSK                                           FCI*
*                                                                  FCI*
***********************************************************************
DAYTAB   DC    C'TUEWEDTHRFRISATSUNMON'                            FCI*
MONTAB   DC    C'DECNOVOCTSEPAUGJULJUNMAYAPRMARFEBJAN'             FCI*
         EJECT ,                                                   FCI*
***********************************************************************
* ALLOC HARDCOPY TO HASPPRNT DDNAME                                FCI*
*                                                                  FCI*
***********************************************************************
ALLOCHC  MVC   DYNALLOC(S99LENG),S99RBPTR COPY DYN ALLOCATION LIST.
         LA    R1,P99RB           RELOCATE THE LIST ADDRESSES.     FCI*
         STCM  R1,B'0111',P99RBPTR+1  *                            FCI*
         LA    R1,P99TUPL             *                            FCI*
         ST    R1,P99TXTPP            *                            FCI*
         LA    R1,P99TUKY1            *                            FCI*
         STCM  R1,B'0111',P99TUPL+1   *                            FCI*
         LA    R1,P99TUKY2            *                            FCI*
         STCM  R1,B'0111',P99TUPL+5   *                            FCI*
         LA    R1,P99TUKY3            *                            FCI*
         STCM  R1,B'0111',P99UPLL+1   *                            FCI*
*  PROCESS PARMS..........                                         FCI*
         LH    R1,QPLNG2        GET LENGTH OF SECOND PARM          FCI*
         CH    R1,=H'1'         LENGTH OF ONE?                     FCI*
         BNE   NOCLSCHG         NO..NO CHANGE OF SYSOUT CLASS      FCI*
         CLI   QPPARM2,C'A'     IS IT ALPHA                        FCI*
         BL    NOCLSCHG                                            FCI*
         MVC   P99SYSOC,QPPARM2 MOVE IN PARM FOR SYSOUT CLASS      FCI*
NOCLSCHG CLI   QPPARM3,C' '     ANY DEST SPECIFIED                 FCI*
         BE    NODEST                                              FCI*
         MVC   P99DEST,QPPARM3  MOVE IN DEST                       FCI*
         MVC   P99DESTL,QPLNG3  MOVE IN LENGTH                     FCI*
         MVI   P99EPARM,X'00'   SAY CLASS IS NOT LAST PARM         FCI*
*  DO THE ALLOCATE                                                 FCI*
NODEST   LA    1,DYNALLOC         ADDR OF PARM LIST FOR DYNALLOC.  FCI*
         DYNALLOC                                                  FCI*
         LTR   R15,R15            CHK RETURN CODE                  FCI*
         BNZ   CANTALLC           NO CAN DO..POST MESSAGE          FCI*
         LA    R6,HASPPRNT        ADDRESS OF OUTPUT DCB.           FCI*
         USING IHADCB,R6          ADDRESSABILITY TO OUTPUT DCB.    FCI*
         LA    R1,DBLWORK         BUILD                            FCI*
         MVI   0(R1),X'80'          ONLY ENTRY IN LIST             FCI*
         OPEN  ((6),(OUTPUT)),MF=(E,(1))  OPEN THE FILE            FCI*
         TM    DCBOFLGS,X'10'     CHECK FOR SUCCESSFUL OPEN.       FCI*
         DROP  R6                 ELIMINATE DCB ADDRESSABILITY.    FCI*
         BZ    PRNTBAD            BYPASS SWITCH SETTING IF BAD OPEN.
         OI    QPFLAG,HARDCPY     INDICATE HARDCPY FILE AVAILABLE. FCI*
         MVC   QDTLINE(L'MSGSTART),MSGSTART  MOVE IN START MSG     FCI*
         MVC   M1CLASS,P99SYSOC   MOVE IN SYSOUT CLASS             FCI*
         MVC   M1DEST,P99DEST                                      FCI*
         CLI   M1DEST,C' '        ANY DEST?                        FCI*
         BNE   PRNTOKAY                                            FCI*
         MVC   M1DEST,=CL8'LOCAL' SAY LOCAL                        FCI*
         B     PRNTOKAY           BYPASS TPUT ERROR MSG.           FCI*
         EJECT ,                                                   FCI*
PRNTBAD  QTILT 'SORRY...UNABLE TO ALLOC/OPEN HASPPRNT FOR HARDCOPY'
PRNTOKAY BR    R7                 RETURN                           FCI*
         SPACE 2                                                   FCI*
MSGSTART DC    CL63'PRINT STARTED; SYSOUT=X,DEST=XXXXXXXX'         FCI*
         EJECT ,                                                   FCI*
***********************************************************************
*        FORMULATE TEXT FOR SVC99 ALLOCATE FAILURE                 FCI*
***********************************************************************
         SPACE 3                                                   FCI*
CANTALLC MVC   QDTLINE,QBLANK     CLEAR OUT LINE                   FCI*
         CLC   P99ERROR,=X'046C'  WAS IT 'RMT NOT DEF TO JES2'?    FCI*
         BE    BADRMT             YES..POST MSG AND EXIT           FCI*
*                                                                  FCI*
         MVC   QDTLINE(L'MSGERR),MSGERR                            FCI*
         CVD   R15,DBLWORK        CONVERT SVC 99 RETURN CODE       FCI*
         MVC   M2RC,=X'40202020'   TO NICE PRINTABLE DECIMAL       FCI*
         ED    M2RC,DBLWORK+6                                      FCI*
*                                                                  FCI*
         UNPK  M2ERC(5),P99ERROR(3) CONVERT DYNAM ALLOC ERR CODE   FCI*
         NC    M2ERC,HEXMASK         TO PRINTABLE HEXADECIMAL      FCI*
         TR    M2ERC,HEXTAB          AND FIX IT UP PRETTY          FCI*
         MVI   M2ERC+4,C' '                                        FCI*
*                                                                  FCI*
         UNPK  M2INFO(5),P99INFO(3) CONVERT DYNAM ALLOC INFO       FCI*
         NC    M2INFO,HEXMASK        CODE TO PRNTABLE HEX          FCI*
         TR    M2INFO,HEXTAB         AND FIX IT UP PRETTY          FCI*
         MVI   M2INFO+4,C' '                                       FCI*
         B     GOTMSG                   AND GO POST THE MESSAGE    FCI*
*                                                                  FCI*
BADRMT   MVC   QDTLINE(L'MSGNRMT),MSGNRMT  MOVE IN NO SUCH REMOTE MSG
         MVC   MREMOTE,QPPARM3         MOVE IN REMOTE ASKED FOR    FCI*
         B     GOTMSG                   AND GO POST THE MESSAGE    FCI*
         SPACE 2                                                   FCI*
HEXTAB   DC    C'0123456789ABCDEF'                                 FCI*
HEXMASK  DC    X'0F0F0F0F0F0F0F0F'                                 FCI*
MSGNRMT  DC    C'REMOTE XXXXXXXX NOT DEFINED TO JES2; PRINT BYPASSED'
MSGERR   DC    C'CANT ALLOC SYSOUT FOR PRINT; DARC= XXXX INFO= XXXX R15X
               = XXXX '                                            FCI*
***********************************************************************
         EJECT ,                                                   FCI*
         LTORG                                                     FCI*
         SPACE 2                                                   FCI*
         DS    0F                                                  FCI*
*                                          SVC 99 REQUEST BLOCK  PTR
S99RBPTR DC    X'80',AL3(S99RB)                                    FCI*
*                                          SVC 99 REQUEST BLOCK    FCI*
S99RB    DS    0F                                                  FCI*
S99RBLN  DC    AL1(20)                     LENGTH=20 BYTES         FCI*
S99VERB  DC    X'01'                       VERB CODE=01 (DSNAME ALLOC)
S99FLAG1 DC    X'1000'                     DONT USE EXISTING ALLOC FCI*
S99ERROR DC    AL2(0)                              ERROR CODE      FCI*
S99INFO  DC    AL2(0)                              INFO  CODE      FCI*
S99TXTPP DC    A(S99TUPL)                 POINTER TO TEXT UNIT POINTERS
S99RSVD1 DC    A(0)                          RESERVED              FCI*
S99FLAG2 DC    A(0)                          FLAGS 2               FCI*
S99TUPL  DC    A(S99TUKY1)                TEXT UNIT POINTERS       FCI*
S99EPARM DC    X'80',AL3(S99TUKY2)        LAST PARM IF NO DEST=    FCI*
         DC    X'80',AL3(S99TUKY3)        LAST PARM IF DEST= GIVEN FCI*
S99TUNIT DS    0F                                                  FCI*
*                                                  DDNAME=HASPPRNT FCI*
S99TUKY1 DC    X'0001',X'0001',X'0008',C'HASPPRNT'                 FCI*
*                                                  SYSOUT=A        FCI*
S99TUKY2 DC    X'0018',X'0001',X'0001'                             FCI*
S99SYSOC DC    C'A'                                                FCI*
*                                      OPTIONAL    DEST=RMTXXX     FCI*
S99TUKY3 DC    X'0058',X'0001'                                     FCI*
S99DESTL DC    X'0000'   LENGTH OF DEST                            FCI*
S99DEST  DC    CL8' '  DEST PARAMETER                              FCI*
*                                                                  FCI*
         DS    0D                                                  FCI*
S99LENG  EQU   *-S99RBPTR              LENGTH OF WHOLE MAGILLA     FCI*
         EJECT ,                                                   FCI*
*.....................................................................*
*.       DYNAMIC ALLOCATION REQUEST BLOCK TO FREE DDNAME HASPPRNT    .*
*.....................................................................*
         SPACE 3                                                   FCI*
         DS    0F                  GET FULLWORD BOUNDARY           FCI*
F99PTR   DC    X'80',AL3(F99RB)    THE POINTER TO THE MESS..       FCI*
*                                                                  FCI*
F99RB    DC    FL1'20'            LENGTH OF RB IN BYTES = 20       FCI*
         DC    XL1'02'            VERB CODE=X'02'..FREE BY DDN     FCI*
         DC    AL2(0)             FLAGS1..NO OPTIONS               FCI*
F99RC    DC    XL2'0000'          ERROR CODE                       FCI*
F99INFO  DC    XL2'0000'          INFO CODE                        FCI*
         DC    AL4(F99TXPT)       ADDRESS OF TEXT UNITS            FCI*
         DC    XL4'00'            RESERVED                         FCI*
         DC    XL4'00'            FLAGS2                           FCI*
         SPACE 2                                                   FCI*
F99TXPT DC     AL4(F99TU1)        ADDR OF DSN TEXT UNIT            FCI*
         DC    X'80',AL3(F99TU2) ADDR OF UNALLOC TEXT TU(LAST)     FCI*
         SPACE 2                                                   FCI*
F99TU1   DC    X'0001',X'0001',FL2'8',C'HASPPRNT' DDNAME           FCI*
F99TU2   DC    X'0007',X'0000'        UNALLOC EVEN IF PERM ALLOC   FCI*
F99LEN   EQU   *-F99PTR           LENGTH OF FILEDS                 FCI*
         EJECT ,                                                   FCI*
***********************************************************************
WORK     DSECT                                                     FCI*
         DS    CL72                                                FCI*
OFFSET   DS    H                                                   FCI*
LENGTH   DS    H                                                   FCI*
FIELD    DS    CL8                                                 FCI*
RPASS    DS    CL8                                                 FCI*
DBLWORK  DC    D'0'                                                FCI*
BINYEAR  DC    F'0'                                                FCI*
BINDAYS  DC    F'0'                                                FCI*
DATE     DC    F'0'                                                FCI*
WORKWORD DC    2F'0'                                               FCI*
***********************************************************************
* LEAVE FIELDS TOGETHER.. INITIALIZED BY ONE MVC WITH VALUES       FCI*
*                                                                  FCI*
MONMSK   DC    AL1(31,30,31,30,31,31,30,31,30,31,28,31)            FCI*
         DC    CL1' '                                    L         FCI*
JDATE    DC    C'XX.XXX',C'  '                           E  F      FCI*
TIMEHRS  DC    CL2' ',C'.'                               A  I  T   FCI*
TIMMINS  DC    CL2' ',C'.'                               V  E  O   FCI*
TIMSECS  DC    CL2' ',C' '                               E  L  G   FCI*
CDAY     DC    CL3' ',C' '                                  D  E   FCI*
CMON     DC    CL3' ',C' '                                  S  T   FCI*
CDAYN    DC    CL2' ',C',19'                                   H   FCI*
CYR      DC    CL2'  ',C' '                                    E   FCI*
*                                                              R   FCI*
***********************************************************************
LEN      EQU   *-JDATE                                             FCI*
         SPACE 2                                                   FCI*
         DS    0F                                                  FCI*
DYNALLOC DS    (S99LENG)XL1                                        FCI*
         ORG   DYNALLOC                                            FCI*
*                                          SVC 99 REQUEST BLOCK  PTR
P99RBPTR DC    X'80',AL3(P99RB)                                    FCI*
*                                          SVC 99 REQUEST BLOCK    FCI*
P99RB    DS    0F                                                  FCI*
P99RBLN  DC    AL1(20)                     LENGTH=20 BYTES         FCI*
P99VERB  DC    X'01'                       VERB CODE=01 (DSNAME ALLOC)
P99FLAG1 DC    X'1000'                     DONT USE EXISTING ALLOC FCI*
P99ERROR DC    AL2(0)                              ERROR CODE      FCI*
P99INFO  DC    AL2(0)                              INFO  CODE      FCI*
P99TXTPP DC    A(P99TUPL)                 POINTER TO TEXT UNIT POINTERS
P99RSVD1 DC    A(0)                          RESERVED              FCI*
P99FLAG2 DC    A(0)                          FLAGS 2               FCI*
P99TUPL  DC    A(P99TUKY1)                TEXT UNIT POINTERS       FCI*
P99EPARM DC    X'80',AL3(P99TUKY2)        LAST PARM IF NO DEST=    FCI*
P99UPLL  DC    X'80',AL3(P99TUKY3)        LAST PARM IF DEST= GIVEN FCI*
P99TUNIT DS    0F                                                  FCI*
*                                                  DDNAME=HASPPRNT FCI*
P99TUKY1 DC    X'0001',X'0001',X'0008',C'HASPPRNT'                 FCI*
*                                                  SYSOUT=A        FCI*
P99TUKY2 DC    X'0018',X'0001',X'0001'                             FCI*
P99SYSOC DC    C'A'                                                FCI*
*                                      OPTIONAL    DEST=RMTXXX     FCI*
P99TUKY3 DC    X'0058',X'0001'                                     FCI*
P99DESTL DC    X'0000'   LENGTH OF DEST                            FCI*
P99DEST  DC    CL8' '  DEST PARAMETER                              FCI*
*                                                                  FCI*
         ORG   DYNALLOC                                            FCI*
         DS    0F                  GET FULLWORD BOUNDARY           FCI*
FREEPTR  DC    X'80',AL3(FREERB)   THE POINTER TO THE MESS..       FCI*
*                                                                  FCI*
FREERB   DC    FL1'20'            LENGTH OF RB IN BYTES = 20       FCI*
         DC    XL1'02'            VERB CODE=X'02'..FREE BY DDN     FCI*
         DC    AL2(0)             FLAGS1..NO OPTIONS               FCI*
FREERC   DC    XL2'0000'          ERROR CODE                       FCI*
FREEINFO DC    XL2'0000'          INFO CODE                        FCI*
FREETPTR DC    AL4(FREETXPT)      ADDRESS OF TEXT UNITS            FCI*
         DC    XL4'00'            RESERVED                         FCI*
         DC    XL4'00'            FLAGS2                           FCI*
         SPACE 2                                                   FCI*
FREETXPT DC    AL4(FREETU1)       ADDR OF DSN TEXT UNIT            FCI*
         DC    X'80',AL3(FREETU2) ADDR OF UNALLOC TEXT TU(LAST)    FCI*
         SPACE 2                                                   FCI*
FREETU1  DC    X'0001',X'0001',FL2'8',C'HASPPRNT' DDNAME           FCI*
FREETU2  DC    X'0007',X'0000'        UNALLOC EVEN IF PERM ALLOC   FCI*
         ORG   ,                                                   FCI*
*                                                                  FCI*
         QCOMMON                                                   FCI*
         SPACE 2                                                   FCI*
MREMOTE  EQU   QDTLINE+7,8                                         FCI*
M2ERC    EQU   QDTLINE+35,4                                        FCI*
M2INFO   EQU   QDTLINE+46,4                                        FCI*
M2RC     EQU   QDTLINE+56,4                                        FCI*
M1CLASS  EQU   QDTLINE+22,1                                        FCI*
M1DEST   EQU   QDTLINE+29,8                                        FCI*
         EJECT ,                                                   FCI*
PRINT    CSECT                                                     FCI*
         PRINT NOGEN                                               FCI*
         DCBD  DSORG=(PS)                                          FCI*
         PRINT GEN                                                 FCI*
         END  ,                                                    FCI*
./ ADD  NAME=Q28
         PRINT NOGEN
DOPTION  QSTART 'QUEUE COMMAND - CHANGE CURRENT DISPLAY OPTIONS'
         USING QCKPT,R10      BASE REG FOR CHECKPOINT WORK AREA
         L     R10,QVCKPT     LOAD BASE REG
         USING QDISPLAY,R9    BASE REG FOR DISPLAY WORK AREA
         L     R9,QVDSPL      LOAD BASE REG
         USING WORK,R13       BASE REG FOR LOCAL WORK
***********************************************************************
*                                                                     *
*   DETERMINE FUNCTION REQUESTED                                      *
*                                                                     *
***********************************************************************
         MVC   QDHLINE,=CL80'DISPLAY OPTION CHANGE LIST'          LBDMC
         LA    R2,QPARM1          ADDR 1ST PARM                   LBDMC
         LA    R3,5               5 PARM FIELDS                   LBDMC
OPTLOOP  DS    0H                                                 LBDMC
         BAL   R4,CHGOPT          CHANGE OPTION                   LBDMC
         LA    R2,12(R2)          POINT NEXT PARM                 LBDMC
         BCT   R3,OPTLOOP         AND CONTINUE                    LBDMC
         TM    QDOPT1,X'FF'       ANY OPTIONS IN EFFECT           LBDMC
         BZ    NOOPTS              NO.                            LBDMC
         QWTO  'DISPLAY OPTION CHANGES ARE IN EFFECT'             LBDMC
         BAL   R4,DISPOPT         DISPLAY OPTIONS                 LBDMC
         B     RETURN             RETURN                          LBDMC
NOOPTS   QWTO  'DEFAULT DISPLAY OPTIONS ARE IN EFFECT'            LBDMC
         BAL   R4,DISPOPT         DISPLAY OPTIONS                 LBDMC
RETURN   QSTOP RETURN                                             LBDMC
***********************************************************************
*                                                                     *
*   CHANGE OPTIONS                                                    *
*                                                                     *
***********************************************************************
CHGOPT   DS    0H                                                 LBDMC
         CLC   =C'NOBL',0(R2)     DON'T SHOW BLANK LINES?         LBDMC
         BNE   OPT2                NO, CHECK OPTION 2             LBDMC
         OI    QDOPT1,X'80'       DON'T SHOW BLANK LINES          LBDMC
         BR    R4                 ONLY 1 OPTION PER PARM          LBDMC
OPT2     DS    0H                                                 LBDMC
         CLC   =C'BL',0(R2)       SHOW BLANK LINES?               LBDMC
         BNE   OPT3                NO, CHECK OPTION 3             LBDMC
         NI    QDOPT1,255-X'80'   SHOW BLANK LINES                LBDMC
         BR    R4                 ONLY 1 OPTION PER PARM          LBDMC
OPT3     DS    0H                                                 LBDMC
         CLC   =C'OVER',0(R2)     SHOW OVERFLOW DATA?             LBDMC
         BNE   OPT4                NO, CHECK OPTION 4             LBDMC
         OI    QDOPT1,X'40'       SHOW OVERFLOW DATA              LBDMC
         BR    R4                 ONLY 1 OPTION PER PARM          LBDMC
OPT4     DS    0H                                                 LBDMC
         CLC   =C'NOOV',0(R2)     DON'T SHOW OVERFLOW DATA?       LBDMC
         BNE   OPT5                NO, CHECK OPTION 4             LBDMC
         NI    QDOPT1,255-X'40'   DON'T SHOW OVERFLOW DATA        LBDMC
         BR    R4                 ONLY 1 OPTION PER PARM          LBDMC
OPT5     DS    0H                                                 LBDMC
         CLC   =C'DEF',0(R2)      RESET TO DEFAULT OPTIONS?       LBDMC
         BNE   OPT6                NO, CHECK OPTION 6             LBDMC
         XC    QDOPT1,QDOPT1      SET DEFAULT OPTIONS             LBDMC
         XC    QDOPT2,QDOPT2      SET DEFAULT OPTIONS             LBDMC
         BR    R4                 ONLY 1 OPTION PER PARM          LBDMC
OPT6     BR    R4                 DON'T HAVE A LOT OF OPTIONS     LBDMC
***********************************************************************
*                                                                     *
*   MISCELLANY                                                        *
*                                                                     *
***********************************************************************
DISPOPT  DS    0H                                                 LBDMC
         TM    QDOPT1,X'80'       DON'T SHOW BLANK LINES?         LBDMC
         BNO   DISPOPT2            NO, CHECK OPTION 2             LBDMC
         QWTO  '2 OR MORE BLANK LINES WILL BE EDITED TO 1 BLANK LINE'
         B     DISPOPT3                                           LBDMC
DISPOPT2 QWTO  'BLANK LINES IN SYSOUT DATASETS WILL BE DISPLAYED'
DISPOPT3 TM    QDOPT1,X'40'       SHOW OVERFLOW DATA?             LBDMC
         BNO   DISPOPT4            NO, CHECK OPTION 4             LBDMC
         QWTO  'ENTIRE LINE DISPLAYED WITH OVERFLOW ON NEXT LINE'
         B     DISPOPT6                                           LBDMC
DISPOPT4 QWTO  'LINES WILL BE TRUNCATED IF LONGER THAN SCREEN WIDTH'
DISPOPT6 BR    R4                 DON'T HAVE A LOT OF OPTIONS     LBDMC
***********************************************************************
*                                                                     *
*   MISCELLANY                                                        *
*                                                                     *
***********************************************************************
         LTORG
         QCOMMON
WORK     DSECT
         DS    CL72
         END
./ ADD  NAME=Q3
         PRINT NOGEN
CKPT     QSTART 'QUEUE COMMAND - READ JES2 CKPT RECORDS'
         USING QCKPT,R10      BASE REG FOR HASP WORK AREA
         L     R10,QVCKPT     LOAD BASE REG
***********************************************************************
*                                                                     *
*   REPOSITION DATASET                                                *
*                                                                     *
***********************************************************************
         POINT HASPCKPT,TIR3  POINT PAST SYNC RECORDS
***********************************************************************
*                                                                     *
*   READ CHECKPOINT DATASET                                           *
*                                                                     *
***********************************************************************
         L     R2,QCJQTL      ADDR OF IOAREA FOR CKPT HEADER REC
         L     R3,QCJOTL      NUMBER OF RECORDS IN CKPT DATASET
LOOP     READ  HDECB1,SF,,(R2),MF=E
         CHECK HDECB1
         AH    R2,HDECB1+6    INCREMENT TO NEXT BUFFER
         BCT   R3,LOOP        READ NEXT RECORD.
***********************************************************************
*                                                                     *
*   RETURN TO CALLER                                                  *
*                                                                     *
***********************************************************************
         QSTOP
         LTORG
         DS    0F
TIR3     DC    X'00000300'    POINT PAST SYNC RECORDS
         QCOMMON
         END
./ ADD  NAME=Q4
         PRINT NOGEN
DDNAME   QSTART 'QUEUE COMMAND - LIST DDNAMES AND DSIDS FOR A JOB'
         USING QCKPT,R10      BASE REG FOR CHECKPOINT WORK AREA
         L     R10,QVCKPT     LOAD BASE REG
         USING QDISPLAY,R9    BASE REG FOR DISPLAY WORK AREA
         L     R9,QVDSPL      LOAD BASE REG
         USING WORK,R13
***********************************************************************
*                                                                     *
*   CALL FINDJOB TO LOCATE THE JQE, JCT, AND IOT                      *
*                                                                     *
***********************************************************************
         L     R15,=V(FINDJOB) ROUTINE TO FIND JOB
         BALR  R14,R15        GO TO IT
***********************************************************************
*                                                                     *
*   DETERMINE JOB TYPE (BATCH OR TSO)                                 *
*                                                                     *
***********************************************************************
         USING JCTDSECT,R1    BASE REG FOR JCT
         USING PDBDSECT,R2    BASE REG FOR PDDB
         USING IOTDSECT,R3    BASE REG FOR IOT
         L     R1,QCJCTA      A(JCT)
         CLC   JCTJOBID(3),=CL3'TSU' ?/TSO USER
         BE    DDTSO          YES. GO PROCESS
         CLC   JCTJOBID(3),=CL3'STC' ?/STARTED TASK
         BE    DDTSO          YES. GO PROCESS
***********************************************************************
*                                                                     *
*   LOCATE PDDB NUMBER 5                                              *
*                                                                     *
***********************************************************************
DDJOB    L     R3,QCIOTA      LOAD BASE REG
         LR    R4,R3          BASE OF IOT
         A     R4,IOTPDDBP    OFFSET BEYOND LAST PDDB
         LR    R2,R3          BASE OF IOT
         A     R2,QCPDDB1     OFFSET TO FIRST PDDB IN IOT
         MVC   QPDSID,=H'0'   NULLIFY VALIDITY FOR LISTDS
FINDDS   CLC   =H'5',PDBDSKEY IS THIS THE DATASET?
         BE    FOUNDDS        YES. CONTINUE.
         LA    R2,PDBLENG(R2) NO. LOOK AT NEXT PDDB.
         CR    R2,R4          HAVE WE GONE PAST THE LAST PDDB?
         BL    FINDDS         NO. TRY AGAIN.
         QTILT '*** JOB DOES NOT HAVE DD TABLE ***'
FOUNDDS  L     R4,PDBMTTR     DISK ADDR OF FIRST BLOCK
         L     R5,QCBLKA      ADDR OF DATASET BLOCK IOAREA
         MVC   QDMSG,QBLANK   BLANK OUT THE MESSAGE AREA
         B     FIRST          PROCESS DATASET
CPTSOID  CLC   QLOGON(0),QPARM1  IS PARM THE USER'S TSOID.
***********************************************************************
*                                                                     *
*   PROCESS DATASET                                                   *
*                                                                     *
***********************************************************************
NEXTBLK  L     R4,0(R5)       DISK ADDR OF NEXT BLOCK
FIRST    LTR   R4,R4          IS THE DISK ADDR ZERO?
         BZ    END            YES. END OF DATASET.
         BAL   R8,READ        READ A BLOCK
         CLC   QPJOBID,4(R5)  DOES THE JOBID MATCH?
         BNE   END            NO. END OF DATASET.
         CLC   =H'5',8(R5)    IS THE DSID 5?
         BNE   END            NO. END OF DATASET.
         LA    R4,10(R5)      ADDR OF FIRST RECORD IN BLOCK
***********************************************************************
*                                                                     *
*   PROCESS RECORDS                                                   *
*                                                                     *
***********************************************************************
NEXTREC  CLI   0(R4),X'FF'    IS LENGTH BYTE FF?
         BE    NEXTBLK        YES. END OF BLOCK.
         TM    1(R4),X'10'    IS THIS A SPANNED RECORD?
         BO    SPAN           YES. SKIP IT.
         SR    R6,R6          ZERO OUT REG
         IC    R6,0(R4)       INSERT LENGTH
         TM    5(R4),2        IS THIS AN EXEC RECORD?
         BO    EXEC           YES. PROCESS IT.
         TM    5(R4),4        IS THIS A DD RECORD?
         BO    DD             YES. PROCESS IT.
SKIPREC  LA    R4,3(R6,R4)    INCREMENT TO NEXT RECORD
         B     NEXTREC        PROCESS NEXT RECORD
SPAN     LH    R6,2(R4)       LENGTH OF SEGMENT
         TM    1(R4),X'08'    IS THIS THE FIRST SEGMENT?
         BO    SPANFRST       YES. USE HEADER LENGTH OF 6.
         LA    R4,4(R6,R4)    INCREMENT TO NEXT RECORD
         B     NEXTREC        PROCESS NEXT RECORD
SPANFRST LA    R4,6(R6,R4)    INCREMENT TO NEXT RECORD
         B     NEXTREC        PROCESS NEXT RECORD
END      QSTOP
***********************************************************************
*                                                                     *
*   PROCESS AN EXEC RECORD                                            *
*                                                                     *
***********************************************************************
EXEC     MVC   STEPNAME,QBLANK BLANK OUT THE STEPNAME
         CLI   7(R4),X'94'    IS THERE A STEPNAME?
         BNE   SKIPREC        NO. SKIP THE REST.
         SR    R1,R1          ZERO OUT R1
         IC    R1,9(R4)       LENGTH OF STEPNAME
         SH    R1,=H'1'       DECREMENT BY 1
         BM    SKIPREC        STEPNAME WAS ZERO LENGTH.
         EX    R1,MVCSTEP     MOVE THE STEPNAME
         B     SKIPREC        CONTINUE PROCESSING
***********************************************************************
*                                                                     *
*   PROCESS DD RECORDS                                                *
*                                                                     *
***********************************************************************
DD       TM    6(R4),X'30'    IS THIS A SYSIN OR SYSOUT DD?
         BZ    SKIPREC        NO. SKIP THE RECORD.
         MVC   DDN,QBLANK     BLANK OUT THE DDNAME
         MVC   DSID,QBLANK    BLANK OUT THE DSID
         MVC   DSRECCT,QBLANK BLANK OUT THE DS RECORD COUNT
         MVC   DSCLASS,QBLANK BLANK OUT THE DS CLASS
         LA    R7,7(R4)       ADDR OF FIRST KEY
         LR    R8,R6          REMAINING LENGTH OF RECORD
         SR    R15,15         ZERO OUT R15
         SR    R14,R14        ZERO OUT R14
         SR    R1,R1          ZERO OUT R1
TRYFLD   CLI   0(R7),X'6E'    IS THIS THE DDNAME?
         BE    DDKEY          YES. PROCESS IT.
         CLI   0(R7),X'4A'    IS THIS THE DSNAME?
         BNE   NEXTFLD        NO. GET NEXT FIELD
         CLC   3(3,R7),=C'JES' YES. IS THIS TRULY A JES2 SYSIN/OUT DS?
         BE    DSKEY          YES. PROCESS IT.
NEXTFLD  IC    R1,1(R7)       NUMBER OF SUBFIELDS
         LA    R7,2(R7)       UPDATE LOCATION
         SH    R8,=H'2'       REMAINING COUNT
         SR    R8,R1          REMAINING COUNT
         BNP   SKIPREC        RECORD IS EXHAUSTED
         LTR   R1,R1          ARE THERE ANY SUBFIELDS?
         BZ    TRYFLD         NO. TRY NEXT FIELD.
LOOPFLD  TM    0(R7),X'80'    IS THIS A SUB-SUB-FIELD
         BZ    NOSUB          NO. CONTINUE.
         NI    0(R7),X'7F'    CLEAR THE HEX 80 BIT
         IC    R14,0(R7)      NUMBER OF SUB-SUB-FIELDS
         LA    R7,1(R7)       UPDATE LOCATION
         SH    R8,=H'1'       REMAINING COUNT
         SR    R8,R14         REMAINING COUNT
         BNP   SKIPREC        RECORD IS EXHAUSTED
         AR    R1,R14         INCREASE NUMBER OF SUBFIELDS
         B     YESSUB         DECREMENT AND TRY AGAIN
NOSUB    IC    R15,0(R7)      SUBFIELD LENGTH
         LA    R7,1(R15,R7)   ADD TO LOCATION
         SR    R8,R15         REMAINING COUNT
         BNP   SKIPREC        RECORD IS EXHAUSTED
YESSUB   BCT   R1,LOOPFLD     DO NEXT SUBFIELD
         B     TRYFLD         TRY NEXT FIELD
DDKEY    IC    R1,2(R7)       LENGTH OF DDNAME
         LTR   R1,R1          IS THE LENGTH ZERO?
         BZ    NEXTFLD        YES. SKIP THE FIELD.
         BCTR  R1,0           DECREMENT BY 1
         EX    R1,MVCDDN      MOVE THE DDNAME
         B     NEXTFLD        PROCESS NEXT FIELD
DSKEY    MVC   DSID+1(3),20(R7)  MOVE THE DSID
         L     R15,=V(FINDPDDB) ADDR OF FINDPDDB MODULE
         BALR  R14,R15        GO TO IT
         MVC   QDHLINE,HEADING MOVE IN HEADING
         LA    R1,QDMSG       ADDR OF MESSAGE LINE
         ST    R1,QDMSGA      STORE IN MESSAGE ADDR
         MVC   QDMLNG,=H'80'  MESSAGE LENGTH
         L     R15,=V(DISPLAY) ADDR OF DISPLAY MODULE
         BALR  R14,R15        GO TO IT
         B     SKIPREC        PROCESS NEXT RECORD
***********************************************************************
*                                                                     *
*   PROCESS DD TSU                                                    *
*                                                                     *
***********************************************************************
DDTSO    L     R5,QCBLKA      ADDR OF DATASET BLOCK IOAREA
         LR    R3,R5          BASE OF IOAREA
         L     R4,JCTSPIOT    ADDR OF FIRST SPIN IOT
TSO010   LTR   R4,R4          IS IOT ADDR ZERO?
         BZ    DDJOB          YES, GO READ REGULAR IOT'S
         BAL   R8,READ        READ IOT
         LR    R4,R3          BASE OF IOT
         A     R4,IOTPDDBP    OFFSET BEYOND LAST PDDB
         LR    R2,R3          BASE OF IOT
         A     R2,QCPDDB1     OFFSET TO FIRST PDDB IN IOT
TSO020   CLI   PDBFLAG1,X'00' IS THIS PDDB VALID
         BE    TSO040         NO, GET NEXT IOT
         MVC   QDMSG,QBLANK   BLANK MESSAGE LINE
         MVC   DDN,=CL8'SPIN-DS'      MOVE IN DDNAME
         SR    R0,R0          CLEAR REG 0
         LH    R0,PDBDSKEY    CONVERT
         CVD   R0,CONVERT        DATA SET
         MVC   DSID,ED4               ID  TO
         ED    DSID,CONVERT+6             ZERO
         L     R0,PDBRECCT    CONVERT
         CVD   R0,CONVERT        RECORD
         MVC   DSRECCT,ED8          COUNT TO
         ED    DSRECCT,CONVERT+4        CHARACTER
         MVC   DSCLASS,PDBCLASS  MOVE IN SYSOUT CLASS
         TM    PDBFLAG1,PDB1PSO  HAS DATA SET BEEN PRINTED
         BO    TSO030         NO
         MVC   MESSAGE,PRTMSG INDICATE DATA SET PRINTED
TSO030   MVC   QDHLINE,HEADING MOVE IN HEADING
         LA    R1,QDMSG       ADDR OF MESSAGE LINE
         ST    R1,QDMSGA      STORE IN MESSAGE ADDR
         MVC   QDMLNG,=H'80'  MESSAGE LENGTH
         L     R15,=V(DISPLAY) ADDR OF DISPLAY MODULE
         BALR  R14,R15        GO TO IT
         LA    R2,PDBLENG(R2) LOOK AT NEXT PDDB
         CR    R2,R4          HAVE WE GONE PAST THE LAST PDDB
         BL    TSO020         NO, TRY AGAIN
TSO040   L     R4,IOTIOTTR    DISK ADDR OF NEXT IOT
         B     TSO010         GO SEARCH THE NEXT IOT
***********************************************************************
*                                                                     *
*   READ A BLOCK FROM HASPACE                                         *
*                                                                     *
***********************************************************************
READ     ST    R4,QCTRAK      STORE DISK ADDR
         LR    R1,R5          IOAREA ADDRESS
         L     R15,=V(READSPC) ADDR OF ROUTINE TO READ HASPACE
         BALR  R14,R15        GO TO IT
         BR    R8             RETURN TO CALLER
***********************************************************************
*                                                                     *
*   MISCELLANY                                                        *
*                                                                     *
***********************************************************************
         LTORG
MVCSTEP  MVC   STEPNAME(1),10(R4)
MVCDDN   MVC   DDN(1),3(R7)
HEADING  DC    CL80'STEPNAME    DDNAME      DSID      LINES   CLASS'
ED4      DC    X'40202120'
ED5      DC    X'4020202120'
ED8      DC    X'4020202020202120'
PRTMSG   DC    CL15'ALREADY PRINTED'
JCT      EQU   0
BUFSTART EQU   0
BUFDSECT EQU   0
         $TAB
         $JCT
         $IOT
         $PDDB
WORK     DSECT
         DS    CL72
CONVERT  DS    D
         QCOMMON
         ORG   QDMSG
STEPNAME DS    CL8
         DS    CL4
DDN      DS    CL8 END OF DATA. LAST REC #'
         DS    CL4
DSID     DS    CL4
         DS    CL4
DSRECCT  DS    CL8
         DS    CL4
DSCLASS  DS    CL1
         DS    CL6
MESSAGE  DS    CL15
         END
./ ADD  NAME=Q5
         PRINT NOGEN
DISPLAY  QSTART 'QUEUE COMMAND - 3270 DISPLAY ROUTINES'
         GBLB  &QPFK          PF-KEY OPTION. DEFINED BY QSTART     ICBC
         USING QDISPLAY,R10   BASE REG FOR DISPLAY WORK AREA
         L     R10,QVDSPL     ADDR OF DISPLAY WORK AREA
         USING QCPRINT,R9     BASE REG FOR PRINT   WORK AREA       FCI*
         L     R9,QVPRINT     ADDR OF PRINT   WORK AREA            FCI*
***********************************************************************
*                                                                     *
*   CHECK FOR ROOM ON SCREEN                                          *
*                                                                     *
***********************************************************************
         L     R8,QDSCRNA         GET ADDR OF TERM OUTPUT AREA    LBDMC
         MVI   QDOVER,0       ZERO OUT THE PAGE OVERFLOW INDICATOR
         MVI   QDPLUS,C'-'    BLANK THE OVERFLOW INDICATOR        LBDMC
         LH    R4,QDMLNG      LOAD MSG LENGTH
         LH    R3,QDVERT      NUMBER OF ROWS                      LBDMC
         SH    R3,=H'2'       - 2 LINES                           LBDMC
         MH    R3,QDHORZ      NUMBER OF COLUMNS                   LBDMC
         CR    R4,R3          IS THE MESSAGE LENGTH > THAN SCREEN SIZE?
         BH    RETURN         YES. GO AWAY.
         MVC   QPRSAVE,QDTLINE        SAVE SUBTITLE LINE ON ENTRY  FCI*
         LTR   R4,R4          IS MSG LENGTH ZERO?
         BZ    WRTSCR         YES. WRITE SCREEN.
         MVI   QDPLUS,C'+'    INDICATE SCREEN OVERFLOW
         AH    R4,QDNEXT      ADD CURRENT LOCATION ON SCREEN
         CR    R4,R3          IS THERE ROOM ON THE SCREEN?        LBDMC
         BH    WRTSCR         NO. WRITE SCREEN.
***********************************************************************
*                                                                     *
*   MOVE THE MESSAGE TO THE SCREEN                                    *
*                                                                     *
***********************************************************************
DSP2     DS    0H                                                 LBDMC
         L     R8,QDSCRNA         GET ADDR OF TERM OUTPUT AREA    LBDMC
         LH    R7,QDMLNG      LOAD MESSAGE LENGTH                 LBDMC
         LTR   R7,R7          IS MESSAGE LENGTH ZERO?             LBDMC
         BZ    RETURN         YES. RETURN.                        LBDMC
         LH    R4,QDNEXT      LOAD CURRENT SCREEN DISPLACEMENT    LBDMC
         LA    R4,14(R8,R4)   LOAD ADDRESS OF NEXT LINE           LBDMC
         AH    R4,QDHORZ      PLUS 1ST LINE                       LBDMC
         AH    R4,QDHORZ      PLUS 2ND LINE                       LBDMC
         L     R6,QDMSGA      LOAD ADDR OF MESSAGE                LBDMC
         LH    R5,QDHORZ      LENGTH MUST BE MULTIPLE OF COLUMNS  LBDMC
         BCTR  R5,0               RELATIVE TO ZERO                LBDMC
*                                                                 LBDMC
*              R4 -> CURRENT OUTPUT AREA OFFSET                   LBDMC
*              R5 = LINE LENGTH RELATIVE TO ZERO                  LBDMC
*              R6 -> START OF INPUT MESSAGE                       LBDMC
*              R7 = LENGTH (?/80=#LINES) TO BE COPIED             LBDMC
*                                                                 LBDMC
DSP3     LTR   R7,R7              ANY LINES LEFT?                 LBDMC
         BNP   RETURN             NO, THAT'S IT                   LBDMC
         CH    R7,QDHORZ          IS LENGTH > LINE LENGTH?        LBDMC
         BNH   DSP2X               NO.                            LBDMC
         EX    R5,MVCLINE         COPY LINE TO OUTPUT AREA        LBDMC
         B     DSP2Y                                              LBDMC
DSP2X    BCTR  R7,0                                               LBDMC
         EX    R7,MVCLINE         COPY LINE TO OUTPUT AREA        LBDMC
         EX    R7,TRLINE          TRANSLATE LINE                  LBDMC
DSP2Y    LH    R1,QDNEXT          GET CURRENT SCREEN DISPLACEMENT LBDMC
         AH    R1,QDHORZ          ADD LINE LENGTH                 LBDMC
         STH   R1,QDNEXT          AND UPDATE DISPLACEMENT         LBDMC
         AH    R4,QDHORZ      INCR BY NUMBER OF COLUMNS           LBDMC
         SH    R7,QDHORZ          LESS 1 LINE                     LBDMC
         LA    R6,80(R6)          NEXT LINE OF INPUT              LBDMC
         B     DSP3           TRY AGAIN                           LBDMC
MVCLINE  MVC   0(1,R4),0(R6)      COPY LINE                       LBDMC
TRLINE   TR    0(1,R4),TABLE      TRANSLATE LINE                  LBDMC
***********************************************************************
*                                                                     *
*   RETURN TO CALLER                                                  *
*                                                                     *
***********************************************************************
RETURN   QSTOP
***********************************************************************
*                                                                     *
*   WRITE A FULL SCREEN, WAIT FOR REPLY                               *
*                                                                     *
***********************************************************************
WRTSCR   DS    0H                                                 LBDMC
         L     R8,QDSCRNA         REFRESH SCREEN ADDRESS          LBDMC
         LR    R3,R8              COPY SCREEN OUTPUT ADDRESS      LBDMC
         MVC   0(L'QDCLEAR,R3),QDCLEAR                            LBDMC
         MVC   L'QDCLEAR(83,R3),QDCMNDT     SET COMMAND/TITLE     LBDMC
         LA    R3,L'QDCLEAR+3(R3) BUMP OUTPUT PTR                 LBDMC
         AH    R3,QDHORZ          ADD 1ST LINE LENGTH             LBDMC
         MVC   0(L'QDHLINE,R3),QDHLINE                            LBDMC
TPUTSCRN DS    0H
         L     R8,QDSCRNA         REFRESH SCREEN ADDRESS          LBDMC
         MVC   L'QDCLEAR(83,R8),QDCMNDT     SET COMMAND/TITLE     LBDMC
         CLC   QDHORZ,=H'80'      IS THIS A 3278-5?               LBDMC
         BH    WRTMOD5             YES, TAKES A SPECIAL WRITE     LBDMC
         LH    R2,QDHORZ          CALCULATE                       LBDMC
         MH    R2,QDVERT                    OUTPUT                LBDMC
         LA    R2,14(R2)                           LENGTH         LBDMC
         TPUT  (R8),(R2),FULLSCR,MF=(E,QTPUT)                     LBDMC
         MVC   QDTLINE,QPRSAVE        RESTORE SUBTITLE INFO        FCI*
         B     TGETRPLY                                           LBDMC
WRTMOD5  DS    0H                                                 LBDMC
         TPUT  (R8),QDMOD5L1,FULLSCR,MF=(E,QTPUT)                 LBDMC
         LA    R8,QDMOD5S2(R8)                                    LBDMC
         MVC   0(4,R8),=XL4'C1115E7C'       SET SBA SEQUENCE      LBDMC
         TPUT  (R8),QDMOD5L2,FULLSCR,MF=(E,QTPUT)                 LBDMC
         MVC   QDTLINE,QPRSAVE        RESTORE SUBTITLE INFO        FCI*
TGETRPLY DS    0H                                                 LBDMC
         AIF  (&QPFK).PFK1    SKIP NON-PFK CODE                    ICBC
         TGET  QDREPLY,63,EDIT,MF=(E,QTGET)
         CH    R15,=H'12'     IS INPUT LONGER THAN BUFFER?
         BNE   NOCLEAR        NO. CONTINUE.
         TCLEARQ INPUT        CLEAR THE QUEUE
NOCLEAR  STH   R1,QDRLNG      STORE LENGTH OF REPLY
         AGO   .PFK2                                               ICBC
.PFK1    ANOP                                                      ICBC
         LA    R6,QDREPLY                                          ICBC
         XC    PFREPLY,PFREPLY                                     ICBC
         XC    QDREPLY,QDREPLY                                     ICBC
         TGET  PFREPLY,69,ASIS,MF=(E,QTGET)
         CH    R15,=H'12'     IS INPUT LONGER THAN BUFFER?         ICBC
         BNE   NOCLEAR        NO. CONTINUE.                        ICBC
         TCLEARQ INPUT        CLEAR THE QUEUE                      ICBC
NOCLEAR  IC    R4,PFCODE                                           ICBC
         XR    R5,R5                                               ICBC
         N     R4,=X'0000003F'   EXTRACT PF-KEY NUMBER             ICBC
         CH    R4,=H'64'          OUT OF TABLE RANGE?             LBDMC
         BH    ENTKEY              YES, ASSUME ENTER              LBDMC
         IC    R4,AIDTAB(R4)      INSERT INDEX                    LBDMC
         CH    R4,=H'24'                                          LBDMC
         BH    ENTKEY           "ENTER" KEY                        ICBC
         BCTR  R4,0                                                ICBC
         MH    R4,=H'5'                                            ICBC
         LA    R5,PFKTAB                                           ICBC
         LA    R5,0(R4,R5)                                         ICBC
         MVC   QDREPLY(5),0(R5)  MOVE PF-KEY VALUE                 ICBC
         LA    R5,5                                                ICBC
         LA    R6,3(,R6)                                           ICBC
ENTKEY   EQU   *                                                   ICBC
         SH    R1,=H'3'                                            ICBC
         BZ    NOTXT                                               ICBC
         MVC   0(60,R6),PFTXT                                      ICBC
         LA    R5,3                                                ICBC
         SH    R1,=H'3'                                            ICBC
NOTXT    DS    0H                                                 LBDMC
         LA    R1,63                                              LBDMC
         LA    R2,QDREPLY+(L'QDREPLY-1)                           LBDMC
FINDLNG  CLI   0(R2),C' '         BLANK?                          LBDMC
         BH    GOTLNG              NO, GOT LENGTH                 LBDMC
         BCTR  R2,0               BACKUP 1 POSITION               LBDMC
         BCT   R1,FINDLNG         DECR LENGTH IF NOT ZERO         LBDMC
GOTLNG   STH   R1,QDRLNG      STORE LENGTH OF REPLY               LBDMC
.PFK2    ANOP                                                      ICBC
         OC    QDREPLY,QBLANK     UPPERCASE THE COMMAND            FCI*
         CLC   QDREPLY(2),=CL2'PR' POSSIBLE PRINT COMMAND      PWF FCI*
         BNE   CLSCRN             NOPE..SPLIT NORMALLY             FCI*
*                                                                  FCI*
         L     R15,=V(PRINT)  FETCH PRINT ENTRY ADDRESS            FCI*
         BALR  R14,R15        AND CALL HIM                         FCI*
         LTR   R15,R15        HOW IS HIS RETURN CODE               FCI*
         BNZ   CLSCRN         NOTHING TO REPORT                    FCI*
*                                                                  FCI*
         B     TPUTSCRN       GO REPOST SCREEN                     FCI*
CLSCRN   L     R4,QDSCRNA     LOAD ADDRESS OF FIRST LINE          LBDMC
         AH    R4,QDHORZ          1ST LINE                        LBDMC
         AH    R4,QDHORZ          2ND LINE                        LBDMC
         LA    R4,14(R4)          PLUS 3270 CTL CHARS             LBDMC
         LH    R5,QDVERT          NUMBER OF LINES                 LBDMC
         SH    R5,=H'2'           - 2 LINES                       LBDMC
         MH    R5,QDHORZ          * LENGTH OF LINE                LBDMC
         SR    R6,R6          NO SENDING FIELD NEEDED              FCI*
         STH   R6,QDNEXT      STORE ZERO IN DISPLACEMENT            FCI
         SR    R7,R7          FILL SCREEN WITH NULLS               FCI*
         MVCL  R4,R6          CLEAR THE SCREEN                     FCI*
*
         CLI   QDPLUS,C'+'        IF OVERFLOW IS ON               LBDMC
         BE    *+8                SKIP RESET TO BLANK             LBDMC
         MVI   QDPLUS,C' '        ELSE RESET                      LBDMC
         LH    R1,QDRLNG      STORE LENGTH OF REPLY
         LTR   R1,R1          WAS THERE A RESPONSE FROM USER?
         BNZ   INTER          YES. INTERRUPT PROCESSING.
         MVI   QDOVER,1       INDICATE PAGE OVERFLOW
         B     DSP2           CONTINUE PROCESSING
INTER    L     R13,QFRSTSA    GO BACK TO MAIN MODULE
         LM    R14,R12,12(R13) RESTORE REGISTERS FROM FIRST SAVEAREA
         BR    R10            ADDRESS OF INTERRUPT HANDLER IN QUEUE
***********************************************************************
*                                                                     *
*   MISCELLANY                                                        *
*                                                                     *
***********************************************************************
         LTORG
         AIF  (NOT &QPFK).PFK3                                     ICBC
* PF-KEY DEFINITIONS                                               ICBC
PFKTAB   DS    0F                                                 LBDMC
PF1      DC    CL5'H'                                              ICBC
PF2      DC    CL5'DA'                                       FCI*  ICBC
PF3      DC    CL5'E'                                              ICBC
PF4      DC    CL5'PRINT'                                    FCI*  ICBC
PF5      DC    CL5'F'                                              ICBC
PF6      DC    CL5'DI'                                             ICBC
PF7      DC    CL5'-  21'                                          ICBC
PF8      DC    CL5'+  21'                                          ICBC
PF9      DC    CL5'DO'                                             ICBC
PF10     DC    CL5'CO 1'                                           ICBC
PF11     DC    CL5'CO 41'                                          ICBC
PF12     DC    CL5'ST'                                             ICBC
PF13     DC    CL5'H'                                             LBDMC
PF14     DC    CL5'DA'                                       FCI* LBDMC
PF15     DC    CL5'E'                                             LBDMC
PF16     DC    CL5'PRINT'                                    FCI* LBDMC
PF17     DC    CL5'F'                                             LBDMC
PF18     DC    CL5'DI'                                            LBDMC
PF19     DC    CL5'-  21'                                         LBDMC
PF20     DC    CL5'+  21'                                         LBDMC
PF21     DC    CL5'DO'                                            LBDMC
PF22     DC    CL5'CO 1'                                          LBDMC
PF23     DC    CL5'CO 41'                                         LBDMC
PF24     DC    CL5'ST'                                            LBDMC
         DS    0F                                                 LBDMC
AIDTAB   DC    64XL1'25'                                          LBDMC
         ORG   AIDTAB+1                                           LBDMC
*                                                                 LBDMC
*                   P  P  P  P  P  P  P  P  P  P  P  P            LBDMC
*                   F  F  F  F  F  F  F  F  F  F  F  F            LBDMC
*                   1  1  1  1  1  1  1  2  2  2  2  2            LBDMC
*                   3  4  5  6  7  8  9  0  1  2  3  4            LBDMC
*                                                                 LBDMC
         DC    AL1(13,14,15,16,17,18,19,20,21,22,23,24)           LBDMC
         ORG   AIDTAB+X'31'                                       LBDMC
*                                                       E         LBDMC
*                   P  P  P  P  P  P  P  P  P  P  P  P  N         LBDMC
*                   F  F  F  F  F  F  F  F  F  F  F  F  T         LBDMC
*                   1  2  3  4  5  6  7  8  9  1  1  1  E         LBDMC
*                                              0  1  2  R         LBDMC
*                                                                 LBDMC
         DC    AL1(01,02,03,04,05,06,07,08,09,10,11,12,25)        LBDMC
.PFK3    ANOP                                                      ICBC
* TABLE OF PRINTABLE CHARACTERS
TABLE    DC    CL64' '
*     0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF
 DC C'          Ö.<(+×&&         !$*);^-/         ,%_>?          :#@'''
 DC C'="' CONTINUANCE OF PREVIOUS LINE BECAUSE OF DUPLICATION
 DC C' ABCDEFGHI       JKLMNOPQR        STUVWXYZ                      '
 DC C' ABCDEFGHI       JKLMNOPQR        STUVWXYZ      0123456789      '
         QCOMMON
QDMOD5L1 EQU   (15*132)+14                                        LBDMC
QDMOD5L2 EQU   (12*132)+4                                         LBDMC
QDMOD5S2 EQU   ((15*132)+14)-4                                    LBDMC
         END
./ ADD  NAME=Q6
         PRINT NOGEN
FINDJOB  QSTART 'QUEUE COMMAND - LOCATE JQE, JCT, AND IOT BY JOBNAME'
         GBLB   &QACF2         ACF2 CHECKING FOR AUTH              FCI*
         AIF    (NOT &QACF2).NACF1                                 FCI*
*******************************************************************FCI*
* MOD 1 - K TRUE  - 22 OCT 79 -                                    FCI*
*   ADD ACF2 AUTH CHKING FOR USER AUTH TO LOOK AT STUFF.           FCI*
*    OPER CHKS ALL..                                               FCI*
*    USER CHKS OWN GOODIES (LOGONID = LOGONID IN JCT)              FCI*
*    OTHER: ISSUE ACFVLD CHK FOR AUTH                              FCI*
*******************************************************************FCI*
.NACF1   ANOP                                                      FCI*
         USING QCKPT,R10      BASE REG FOR CHECKPOINT WORK AREA
         L     R10,QVCKPT     LOAD BASE REG
         USING WORK,R13       LOCAL WORK AREA
***********************************************************************
*                                                                     *
*   DETERMINE IF SEARCH IS BY JOBNUMBER OR JOBNAME                    *
*                                                                     *
***********************************************************************
         LH    R1,QLNG1       LENGTH OF PARAMETER FIELD
         SH    R1,=H'1'       IS THE LENGTH ZERO?
         BM    TILT           YES. TILT.
         CLI   QPARM1,C'0'    IS THE FIRST CHARACTER NUMERIC?
         BL    JOBNAME        NO. SEARCH BY JOBNAME
         MVC   QFZONES,QFZONE INITIALIZE NUMERIC TEST
         EX    R1,MVZ         MOVE THE ZONES FOR VALIDITY CHECK
         CLC   QFZONES,QFZONE IS THE FIELD NUMERIC?
         BNE   TILT           NO. TILT.
         EX    R1,PACK        PACK THE FIELD
         CVB   R5,CONVERT     CONVERT TO BINARY
***********************************************************************
*                                                                     *
*   LOCATE JQE BY JOBNAME                                             *
*                                                                     *
***********************************************************************
JOBNAME  L     R2,QCJQHEAD    LOAD ADDR OF JQT
         USING JQTDSECT,R2    BASE REG FOR JQT
         LA    R2,JQTOUT      FIRST JQE QUEUE
         LA    R1,JQTQMAX     MAXIMUM NUMBER OF QUEUES
         DROP  R2
NEXTJQT  LH    R3,0(R2)       OFFSET TO FIRST JQE IN QUEUE
NEXTJQE  SLA   R3,2           MULTIPLY BY 4
         BZ    ENDJQE         END OF QUEUE
         A     R3,QCJQTA      ADD BASE TO OFFSET
         USING JQEDSECT,R3    BASE REG FOR JQE
         CLI   QPARM1,C'0'    IS SEARCH BY JOBNUMBER?
         BL    CLCNAME        NO. SEARCH BY JOBNAME.
         CH    R5,JQEJOBNO    IS THIS THE RIGHT JOBNUMBER?
         BNE   NOMATCH        NO. TRY NEXT JQE.
         B     FOUND          YES. PROCESS IT.
CLCNAME  CLC   QPARM1,JQEJNAME IS THIS THE RIGHT JOBNAME?
         BE    FOUND          YES. PROCESS IT.
NOMATCH  LH    R3,JQECHAIN    NO. TRY NEXT ENTRY.
         B     NEXTJQE        LOOP
ENDJQE   LA    R2,2(R2)       TRY NEXT QUEUE
         BCT   R1,NEXTJQT     LOOP IF NOT LAST QUEUE
TILT     QTILT '*** JOBNAME NOT FOUND OR INVALID ***'
***********************************************************************
*                                                                     *
*   READ JCT AND IOT                                                  *
*                                                                     *
***********************************************************************
FOUND    ST    R3,QCJQEA      SAVE THE ADDRESS
         MVC   QCTRAK,JQETRAK DISK ADDR OF JCT
         DROP  R3
         L     R3,QCJCTA      ADDR OF IOAREA FOR JCT
         LR    R1,R3          PARM FOR READSPC
         L     R15,=V(READSPC) ROUTINE TO READ HASPACE
         BALR  R14,R15        GO TO IT
         USING JCTDSECT,R3    BASE REG FOR JCT
         MVC   QPJOBID,JCTJBKEY JOB IDENTIFICATION
         AIF    (NOT &QACF2).NACF2                                 FCI*
*******************************************************************FCI*
* MOD 1 - K TRUE  - 22 OCT 79 -                                    FCI*
*                                                                  FCI*
         CLC   QLOGON,LIDLID  SEE IF USERS LOGONID=JOBS ACF LOGONIDKMT*
         BE    ACF2OK         YES..CONTINUE FORTHWITH              FCI*
         TM    QXAUTH,X'80'   IS USER OPER PRIVLEDGE ?             FCI*
         BO    ACF2OK         YES..CONTINUE FORTHWITH              FCI*
*                                                                  FCI*
         USING ACCVT,R8                                            FCI*
         ACFGACVT R8,NONE=NOTOK   GET THE ACF2 CVT                 FCI*
*                                                                  FCI*
         MVC   DSNAME,=CL44'SYSOUT. '  INITIALIZE DSNAME TO USE    FCI*
         XC    ACFSPARM(ACFSPRML),ACFSPARM   CLEAR REQUEST BLOCK   FCI*
         MVI   ACFSPREQ,ACFSPRDS  DSNAME ACCESS ONLY               FCI*
         MVI   ACFSPID1,ACFSPIUR  DIS AM DE USER TALKING....       FCI*
         LA    R7,DSNAME          GET DSNAME ADDRESS               FCI*
         ST    R7,ACFSPDSN        AND GIVE IT TO ACF PARM LIST     FCI*
*                                                                  FCI*
*  GENERATE DSNAME OF FORMAT 'SYSOUT.LOGONID.JOBNAME' FOR CHKING   FCI*
*                                                                  FCI*
         MVC   DSNAME+7(8),LIDLID  MOVE LID TO DSNAME              FCI*
         CLI   DSNAME+7,C' '       IS THE LID BLANK?               FCI*
         BNE   ADSNCHK0            NO..NORMAL PROCESS              FCI*
*                                                                  FCI*
*  GOT HERE BECAUSE LID IS ' ' (BLANK)..SUBSTITUTE 'SYSTEM'        FCI*
         MVC   DSNAME+7(8),=CL8'SYSTEM'                            FCI*
*                                                                  FCI*
ADSNCHK0 LA    R1,DSNAME+7         GET ADDRESS                     FCI*
         LA    R7,8                LOAD COUNT                      FCI*
ADSNCHK  CLI   0(R1),C' '          LOOK FOR BLANK                  FCI*
         BE    ADSNCHK1            GOTIT..                         FCI*
         LA    R1,1(R1)            BUMP AND                        FCI*
         BCT   R7,ADSNCHK            GRIND                         FCI*
ADSNCHK1 MVI   0(R1),C'.'          MOVE IN PERIOD..                FCI*
         MVC   1(8,R1),JCTJNAME    MOVE IN JOBNAME                 FCI*
*                                                                  FCI*
         LA    R1,ACFSPARM        GET ADDRESS OF PARM FIELD        FCI*
         ACFSVC (1),TYPE=S,NONE=NOTOK,CVT=HAVE   INVOKE A C F 2    FCI*
*                                                                  FCI*
         LTR   R15,R15            HOW DID YOU LIKE THEM APPLES?    FCI*
         BC    8,ACF2OK           ..OK BY YOU...CONTINUE..         FCI*
*                                                                  FCI*
NOTOK    QTILT '*** SORRY..NO ACF2 AUTHORITY TO LOOK AT THIS JOB'  FCI*
*******************************************************************FCI*
ACF2OK   DS    0H                                                  FCI*
.NACF2   ANOP                                                      FCI*
         MVC   QCTRAK,JCTIOT  DISK ADDR OF IOT
         DROP  R3
         L     R1,QCIOTA      ADDR OF IOAREA FOR IOT
         L     R15,=V(READSPC) ROUTINE TO READ HASPACE
         BALR  R14,R15        GO TO IT
STOP     QSTOP
***********************************************************************
*                                                                     *
*   MISCELLANY                                                        *
*                                                                     *
***********************************************************************
MVZ      MVZ   QFZONES(1),QPARM1 CHECK FOR NUMERIC
PACK     PACK  CONVERT,QPARM1(1) CONVERT TO BINARY
         LTORG
JCT      EQU   0
BUFSTART EQU   0
BUFDSECT EQU   0
         $JQE
         $JCT
         $JQT
         QCOMMON
WORK     DSECT
         DS    72C
CONVERT  DS    D
         AIF    (NOT &QACF2).NACF3                                 FCI*
         ACDSV DSECT=NO                                            FCI*
DSNAME   DS    CL44                                                FCI*
         EJECT   ,                                                 FCI*
         ACCVT   ,                                                 FCI*
         ACUCB   ,                                                 FCI*
         PRINT OFF                                                 FCI*
         IHAPSA  ,                                                 FCI*
         PRINT ON                                                  FCI*
.NACF3   ANOP   ,                                                  FCI*
         END
./ ADD  NAME=Q7
         PRINT NOGEN
FORMAT   QSTART 'QUEUE COMMAND - JQE AND JOE FORMAT ROUTINES'
         USING QDISPLAY,R10   BASE REG FOR DISPLAY WORK AREA
         L     R10,QVDSPL     LOAD BASE REG
         USING JQEDSECT,R9    BASE REG FOR JQE DSECT
         USING JOEDSECT,R8    BASE REG FOR JOE DSECT
         USING WORK,R13       BASE FOR LOCAL WORK AREA
***********************************************************************
*                                                                     *
*   INPUT TO THIS MODULE -                                            *
*     R1 = 0 INDICATES PRINT JQE                                      *
*     R1 = 4 INDICATES PRINT JOE                                      *
*     R9 CONTAINS JQE ADDRESS                                         *
*     R8 CONTAINS JOE ADDRESS                                         *
*                                                                     *
***********************************************************************
*                                                                     *
*   BRANCH TO PROPER ROUTINE                                          *
*                                                                     *
***********************************************************************
         MVC   FCLEAR,=CL80' ' CLEAR THE PRINT AREA
         MVC   DFMTQUE+4(1),QCLASS CLASS NAME                     LBDMC
         MVC   QDHLINE,HEADING REPORT HEADING
         CLI   QSUBNAME,C'X'  IS THE REQUEST FOR A HEX DUMP?
         BE    NOTBUSY        YES. SKIP.
*        CLC   =X'01000100',JQEPRTRT IS THE PRINT/PUNCH FOR LOCAL?
*        BE    LOCAL          YES. SKIP THIS ROUTINE.
*        MVC   DFMTDEST,=C'RJE ' INDICATE THIS JOB IS REMOTE      LBDMC
         TM    JQEFLAGS,QUEBUSY IS THE JOB EXECUTING?
         BZ    NOTBUSY        NO. SKIP THIS ROUTINE.
         IC    R15,JQEFLAGS   GET SYSTEM NUMBER
         N     R15,=F'7'      ZERO OUT UNWANTED BITS
         SLL   R15,3          MULTIPLY BY 8
         LA    R15,QSYSID(R15) OBTAIN SYSTEM ID
         MVC   DFMTEXEC(8),0(R15)  MOVE SYSTEM ID TO DISPLAY      LBDMC
NOTBUSY  CLI   QCLASS,0       IS THIS THE TSO QUEUE?
         BE    LISTTSO        YES. DO IT.
         CLI   QCLASS,4       IS THIS THE STC QUEUE?
         BE    LISTSTC        YES. DO IT.
         CLI   QCLASS,8       IS THIS THE HELD OUTPUT QUEUE?
         BE    LISTHO         YES. DO IT.
         LTR   R1,R1          IS REQUEST FOR JQE OR JOE?
         BZ    LISTJQE        JQE.
***********************************************************************
*                                                                     *
*   FORMAT JOE                                                        *
*                                                                     *
***********************************************************************
LISTJOE  MVC   DFMTQUE(3),=C'OUT' MOVE IN NAME OF QUEUE           LBDMC
         CLI   QSUBNAME,C'X'  IS THE REQUEST FOR A HEX DUMP?
         BE    HEXO           YES. DO IT.
         LA    R3,JOEDEVID    A(OUTPUT DEVICE DESCRIPTOR            FCI
         BAL   R7,SETDEVIC    SET THE OUTPUT DEVICE                 FCI
         MVI   DFMTLINS+(L'DFMTLINS),C' '                         LBDMC
         L     R1,JOERECCT    NUMBER OF PRINT LINES               LBDMC
         ST    R1,#RECSP          SAVE FOR LATER                  LBDMC
         C     R1,=F'100000'       OVER 100K LINES                LBDMC
         BL    SETLINS1            NO, SHOW AS IS                 LBDMC
         XR    R0,R0                                              LBDMC
         D     R0,=F'1000'        DIVIDE BY 1000                  LBDMC
         MVI   DFMTLINS+(L'DFMTLINS),C'K'                         LBDMC
SETLINS1 DS    0H                                                 LBDMC
         CVD   R1,CONVERT     CONVERT TO DECIMAL                  LBDMC
         MVC   DFMTLINS-1(6),=XL6'402020202021'                   LBDMC
         ED    DFMTLINS-1(6),CONVERT+5                            LBDMC
         XR    R0,R0                                              LBDMC
         IC    R0,JOEROUT                                         LBDMC
         CLI   JOECURCL,C'B'      PUNCH?                          LBDMC
         BE    SETROUT             YES                            LBDMC
         IC    R0,JOEROUT+1                                       LBDMC
SETROUT  DS    0H                                                 LBDMC
         CVD   R0,CONVERT                                         LBDMC
         UNPK  DFMTDEST+3(1),CONVERT+7(1)                         LBDMC
         OI    DFMTDEST+3,C'0'                                    LBDMC
         MVC   DFMTDEST(3),=C'RMT'                                LBDMC
         CLI   DFMTDEST+3,C'0'      LOCAL?                        LBDMC
         BNE   *+10                                               LBDMC
         MVC   DFMTDEST(4),=CL4'LOC '                             LBDMC
         ST    R8,SVJOEA          SAVE WORK JOE ADDR              LBDMC
         LH    R8,JOECHAR         GET CHAR JOE                    LBDMC
         N     R8,=X'0000FFFF'    LOSE UNWANTED BITS              LBDMC
         SLL   R8,2               BY 4                            LBDMC
         A     R8,QCJOTA          ADD BASE TO OFFSET FOR JOE ADDR LBDMC
         MVC   DFMTFORM,JOEFORM                                   LBDMC
         MVC   DFMTFCB,JOEFCB                                     LBDMC
         MVC   DFMTUCS,JOEUCS                                     LBDMC
         L     R8,SVJOEA          RESTORE WORK JOE ADDR           LBDMC
         TM    JOEFLAG,X'80'  IS THE CKPT VALID                   LBDMC
         BZ    LIST        NO. SKIP IT.                           LBDMC
         LH    R8,JOECKPT     OFFSET TO CHECKPOINT JOE            LBDMC
         N     R8,=X'0000FFFF'    LOSE UNWANTED BITS              LBDMC
         SLA   R8,2           MULTIPLY BY 4                       LBDMC
         BZ    LIST        CHECKPOINT DOES NOT EXIST. SKIP.       LBDMC
         A     R8,QCJOTA      ADD BASE TO OFFSET                  LBDMC
         L     R1,#RECSP      RESTORE TOTAL LINES                 LBDMC
         S     R1,JOETLNC     SUBTRACT RECORDS PRINTED FROM TOTAL LBDMC
         MVI   DFMTLINS+(L'DFMTLINS),C' '                         LBDMC
         C     R1,=F'100000'       OVER 100K LINES                LBDMC
         BL    SETLINS2            NO, SHOW AS IS                 LBDMC
         XR    R0,R0                                              LBDMC
         D     R0,=F'1000'        DIVIDE BY 1000                  LBDMC
         MVI   DFMTLINS+(L'DFMTLINS),C'K'                         LBDMC
SETLINS2 DS    0H                                                 LBDMC
         CVD   R1,CONVERT     CONVERT TO DECIMAL                  LBDMC
         MVC   DFMTLINS-1(6),=XL6'402020202021'                   LBDMC
         ED    DFMTLINS-1(6),CONVERT+5                            LBDMC
         B     LIST           FORMAT REST OF LINE                 LBDMC
LOCAL    LA    R15,DFMTDEST    ADDRESS TO PUT TEXT                LBDMC
         LA    R1,JOEROUT     POINT TO ROUTING INFO                FCI*
***********************************************************************
*RMTORLCL SUBROUTINE - DETERMINE REMOTE OR LOCAL DESTINATION       FCI*
* R1 POINTS TO PRTRT/PUNRT, R15 TO ASSEMBLY POINTER                FCI*
***********************************************************************
RMTORLCL CLI   1(R1),0        IS IT FOR REMOTE 00=LOCAL            FCI*
         BE    LIST           NO LUCK .. HAVE TO WORK FOR IT       FCI*
         MVC   0(L'RMT,R15),RMT       MOVE IN 'RMT'                FCI*
         LA    R15,L'RMT(R15)  BUMP POINTER                        FCI*
         SR    R14,R14        LOAD RMT FLAGS                       FCI*
         IC    R14,1(R1)      FROM PRT/PUN                         FCI*
         CVD   R14,DOUBLEWD   RMT NUMBER TO DECIMAL                FCI*
         B     FITINUM1       FIT THE NUMBER IN RMT MESSAGE        FCI*
         SPACE 2
***********************************************************************
* FITINUM SUBROUTINE - CONVERT BIN NUMBER TO NICE FORMAT           FCI*
*                                                                  FCI*
***********************************************************************
FITINUM  CVD   R1,DOUBLEWD    CONVERT TO PACKED DECIMAL            FCI*
FITINUM1 MVC   NUMBER(L'NORMAL),NORMAL INITIALIZE THE EDIT FORMAT  FCI*
         LA    R1,NUMBER+SIGNORM IN CASE OF ZEROES                 FCI*
         EDMK  NUMBER(L'NORMAL),DOUBLEWD+2 CONVERT TO EBCDIC       FCI*
         LA    R14,NUMBER+L'NORMAL-1 A(END OF CONVERTED NUMBER)    FCI*
         SLR   R14,R1         LENGTH OF THE CONVERTED NUMBER - 1   FCI*
         EX    R14,MVNUMBER   PUT THE NUMBER IN THE MSG            FCI*
         LA    R15,1(R14,R15) A(NEXT SPOT IN MSG)                  FCI*
         B     LIST           RETURN TO OUR CALLER                 FCI*
         SPACE 3                                                   FCI*
MVNUMBER MVC   0(0,R15),0(R1) TO BE EXECUTED                       FCI*
         SPACE 2                                                   FCI*
NORMAL   DC    X'402020202020202020202120' EDIT MASK               FCI*
SIGNORM  EQU   11             OFFSET TO LAST DIGIT                 FCI*
RMT      DC    C'RMT'                                              FCI*
***********************************************************************
*                                                                     *
*   FORMAT JQE                                                        *
*                                                                     *
***********************************************************************
LISTTSO  MVC   DFMTQUE(3),=C'TSO' NAME OF QUEUE                   LBDMC
         B     LIST           CONTINUE                            LBDMC
LISTSTC  MVC   DFMTQUE(3),=C'STC' NAME OF QUEUE                   LBDMC
         B     LIST           CONTINUE                            LBDMC
LISTHO   MVC   DFMTQUE(3),=C'PSO' NAME OF QUEUE                   LBDMC
         B     LIST           CONTINUE                            LBDMC
LISTJQE  MVC   DFMTQUE(3),=C'IN ' NAME OF QUEUE                   LBDMC
LIST     CLI   QSUBNAME,C'X'  IS THE REQUEST FOR A HEX DUMP?
         BE    HEX            YES. DO IT.
         MVC   DFMTPOS-1(4),ED4      PREPARE FOR EDIT             LBDMC
         ED    DFMTPOS-1(4),QCOUNT+1 EDIT THE POSITION IN QUEUE   LBDMC
         MVC   DFMTJOB,JQEJNAME MOVE IN JOBNAME                   LBDMC
         LH    R0,JQEJOBNO    LOAD HASP JOBNUMBER                 LBDMC
         CVD   R0,CONVERT     CONVERT TO DECIMAL                  LBDMC
         MVC   NUMBER,=CL80' '                                    LBDMC
         UNPK  NUMBER(5),CONVERT+5(3)                             LBDMC
         OI    NUMBER+4,X'F0'                                     LBDMC
         MVI   NUMBER,C'J'                                        LBDMC
         CLC   JQEJOBNO,=Y(10000)                                 LBDMC
         BL    SETJOBNO                                           LBDMC
         MVI   NUMBER,C'S'                                        LBDMC
         CLC   JQEJOBNO,=Y(20000)                                 LBDMC
         BL    SETJOBNO                                           LBDMC
         MVI   NUMBER,C'T'                                        LBDMC
SETJOBNO DS    0H                                                 LBDMC
         CLI   NUMBER+1,C'0'     LEADING ZERO?                    LBDMC
         BNE   ENDJOBNO            NO, DONE                       LBDMC
         MVC   NUMBER+1(4),NUMBER+2                               LBDMC
         B     SETJOBNO           CONTINUE                        LBDMC
ENDJOBNO DS    0H                                                 LBDMC
         MVC   DFMTJNO,NUMBER    COPY                             LBDMC
         SR    R0,R0          ZERO OUT REGISTER
         IC    R0,JQEPRIO     LOAD JQE PRIORITY
         SRL   R0,4           DIVIDE BY 16
         CVD   R0,CONVERT     CONVERT TO DECIMAL
         MVC   DFMTPRIO,ED3      PREPARE FOR EDIT                 LBDMC
         ED    DFMTPRIO,CONVERT+6 EDIT JQE PRIORITY               LBDMC
         TM    JQEFLAGS,X'E0' IS THE JOB HELD?
         BZ    NOHOLD         NO.
         MVC   DFMTEXEC,=CL8'HELD' INDICATE JOB HELD              LBDMC
NOHOLD   DS    0H
         BAL   R7,ANALFMT         ANALYZE THIS JOB                LBDMC
         LTR   R15,R15            WAS IT ACCEPTED?                LBDMC
         BNZ   STOP                NO, SKIP IT                    LBDMC
         LA    R1,QDMSG       ADDR OF MESSAGE AREA
         ST    R1,QDMSGA      STORE MESSAGE ADDR
         MVC   QDMLNG,=H'80'  LENGTH OF DISPLAY LINE
         L     R15,=V(DISPLAY) ADDR OF DISPLAY MODULE
         BALR  R14,R15        DISPLAY THE LINE
STOP     QSTOP
***********************************************************************
*                                                                     *
*   TAKE HEX DUMP OF JOE                                              *
*                                                                     *
***********************************************************************
HEXO     UNPK  FHEX1,0(8,R8)  UNPK FIRST PART OF JOE INTO HEX
         UNPK  FHEX2,7(8,R8)  SECOND
         UNPK  FHEX3,14(8,R8) THIRD
         UNPK  FHEX4,21(8,R8) FOURTH
         UNPK  FHEX5,28(5,R8) FIFTH
         MVI   FHEXOC,C' '    CLEAR LAST BYTE
         TR    FHEXO,TABLE    CHANGE TO PRINTABLE HEX
         LA    R1,QDMSG       ADDR OF MESSAGE AREA
         ST    R1,QDMSGA      STORE MESSAGE ADDR
         MVC   QDMLNG,=H'80'  LENGTH OF DISPLAY LINE
         L     R15,=V(DISPLAY) ADDR OF DISPLAY MODULE
         BALR  R14,R15        DISPLAY THE LINE
***********************************************************************
*                                                                     *
*   TAKE HEX DUMP OF JQE                                              *
*                                                                     *
***********************************************************************
HEX      UNPK  FHEX1,0(8,R9)  UNPK FIRST PART OF JOE INTO HEX
         UNPK  FHEX2,7(8,R9)  SECOND
         UNPK  FHEX3,14(8,R9) THIRD
         UNPK  FHEX4,21(8,R9) FOURTH
         MVC   FHEXC,QBLANK   CLEAR LAST BYTES
         TR    FHEX,TABLE     CHANGE TO PRINTABLE HEX
         B     NOHOLD         CALL DISPLAY
***********************************************************************
* SETDEVIC SUBROUTINE - GET DEVICE DATA (R3) POINTS TO DEVID       FCI*
*                                                                  FCI*
***********************************************************************
SETDEVIC ST    R7,SETDHOLD       SAVE LINK ADDRESS                 FCI*
         MVC   DFMTPRNT(9),=CL9' '
         TM    0(R3),HIGHBIT REMOTE DEVICE?                        FCI*
         BO    RMTDEV         YES => OUTPUT IT                     FCI*
         SR    R1,R1          FOR THE INSERT CHARACTER             FCI*
         IC    R1,0(R3)         DEVICE TYPE                        FCI*
         SRL   R1,4           RIGHT JUSTIFIED                      FCI*
         MH    R1,DEVTYPEL    TYPE * LENGTH OF A DEVICE ENTRY      FCI*
         LA    R1,DEVTABLE(R1) A(DEVICE TYPE)                      FCI*
         MVC   DFMTPRNT,1(R1)   PUT IN THE DEVICE TYPE
         CLI   0(R3),0          INTERNAL READER?                  LBDMC
         BE    SETDRTN        YES => GIVE THE USER THE INFO        FCI*
         SR    R15,R15        FOR THE INSERT CHARACTER             FCI*
         IC    R15,1(R3)        DEVICE NUMBER                      FCI*
         CVD   R15,DOUBLEWD   IN PACKED DECIMAL                    FCI*
         IC    R15,0(R1)      OFFSET TO WHERE THE DEV # GOES       FCI*
         LA    R15,DFMTPRNT(R15) A(WHERE THE DEV # GOES)          LBDMC
         MVC   1(L'DIGITS3,R15),DIGITS3 SET UP THE EDIT OF 3 DIGITSKMT*
         EDMK  0(L'DIGITS3+1,R15),DOUBLEWD+6 DEV # IN EBCDIC       FCI*
         MVC   0(L'DIGITS3+1,R15),0(R1) ADJUST FOR BLANKS          FCI*
*                                                                  FCI*
         B     SETDRTN        GO EXIT
*                                                                  FCI*
RMTDEV   SR    R0,R0          FOR THE INSERT CHARACTER             FCI*
         IC    R0,1(R3)         REMOTE NUMBER                      FCI*
         CVD   R0,DOUBLEWD    IN PACKED DECIMAL                    FCI*
         MVI   DFMTPRNT,C'R'    INDICATE A REMOTE DEVICE          LBDMC
         MVC   DFMTPRNT+2(L'THREEPT),THREEPT SET UP THE EDIT MASK LBDMC
         EDMK  DFMTPRNT+1(L'THREEPT),DOUBLEWD+6 CONVERT TO EBCDIC LBDMC
         MVC   DFMTPRNT+1(L'THREEPT),0(R1) ADJUST FOR BLANKS      LBDMC
         LA    R1,DFMTPRNT+1    A(SPOT JUST BEFORE POSSIBLE SEP)  LBDMC
FINDPT   LA    R1,1(R1)       A(NEXT BYTE)                         FCI*
         CLI   0(R1),C'.'     FOUND THE SEPARATOR?                 FCI*
         BNE   FINDPT         NO => KEEP LOOKING                   FCI*
         SR    R15,R15        FOR THE INSERT CHARACTER             FCI*
         IC    R15,0(R3)        DEVICE TYPE INDICATOR              FCI*
         SRL   R15,3          RIGHT JUSTIFIED                      FCI*
         LA    R15,RMTDEVS-HIGHBIT/8(R15) A(DEVICE TYPE)           FCI*
         MVC   1(2,R1),0(R15) PUT IN THE DEVICE TYPE               FCI*
         MVC   3(1,R1),0(R3) PUT IN THE DEVICE NUMBER              FCI*
         OI    3(R1),C'0'     MAKE THE DEVICE NUMBER PRINTABLE     FCI*
         B     SETDRTN                                             FCI*
         EJECT ,                                                   FCI*
SETDRTN  L     R7,SETDHOLD    GET RETURN ADDRESS                   FCI*
         BR    R7             RETURN TO OUR CALLER                 FCI*
         SPACE 5                                                   FCI*
DIGITS3  DC    X'202020'                                           FCI*
THREEPT  DC    X'2020204B'                                         FCI*
         DS    0H                                                  FCI*
DEVTABLE DC    AL1(0),CL8'INTRDR',AL1(6),CL8'READER'               FCI*
         DC    AL1(7),CL8'PRINTER',AL1(5),CL8'PUNCH'               FCI*
DEVTYPEL DC    AL2((*-DEVTABLE)/4)                                 FCI*
RMTDEVS  DC    C'**',C'RD',C'PR',C'PU'                             FCI*
         EJECT
***********************************************************************
*                                                                     *
*   ANALYZE THE FORMATTED LINE TO SEE IF WE WANT TO INCLUDE IT        *
*                                                                     *
***********************************************************************
ANALFMT  DS    0H                                                 LBDMC
         LA    R1,QPARM1          ADDR 1ST PARM                   LBDMC
         LA    R0,5               5 PARM FIELDS                   LBDMC
         CLC   QCODEH,=H'12'      DO?                             LBDMC
         BE    ANALLOOP            YES, ANALYZE                   LBDMC
         CLC   QCODEH,=H'20'      AO?                             LBDMC
         BE    ANALLOOP            YES, ANALYZE                   LBDMC
         CLC   QCODEH,=H'08'      DI?                             LBDMC
         BE    ANALLOOP            YES, ANALYZE                   LBDMC
         CLC   QCODEH,=H'16'      AI?                             LBDMC
         BE    ANALLOOP            YES, ANALYZE                   LBDMC
         CLC   QCODEH,=H'24'      HI?                             LBDMC
         BE    ANALLOOP            YES, ANALYZE                   LBDMC
         XR    R15,R15            CLEAR R15                       LBDMC
         BR    R7             RETURN                              LBDMC
ANALLOOP DS    0H                                                 LBDMC
         BAL   R2,ANALOPTS        CHECK OPTIONS                   LBDMC
         LTR   R15,R15            DISPLAY REJECTED?               LBDMC
         BNZ   ANALREJ            REJECT IT                       LBDMC
         LA    R1,12(R1)          POINT NEXT PARM FIELD           LBDMC
         BCT   R0,ANALLOOP        AND CHECK OPTIONS               LBDMC
         XR    R15,R15            ACCEPT DISPLAY LINE             LBDMC
ANALREJ  DS    0H                                                 LBDMC
         BR    R7             RETURN TO CALLER                    LBDMC
         SPACE 1                                                  LBDMC
ANALOPTS DS    0H                                                 LBDMC
         XR    R15,R15            DEFAULT IS OPTION OK            LBDMC
         CLI   0(R1),C' '         NO OPTION?                      LBDMC
         BER   R2                 RETURN FOR NEXT PARM OR EXIT    LBDMC
         SPACE 1                                                  LBDMC
OPTION1  DS    0H                                                 LBDMC
         CLI   0(R1),C'R'         CHECK IF REMOTE OPTION?         LBDMC
         BNE   OPTION2             NO, CHECK NEXT OPTION          LBDMC
         XR    R3,R3              CLEAR EQUAL×NOT EQUAL INDEX     LBDMC
         CLI   1(R1),C'^'         BRANCH ON NOT EQUAL?            LBDMC
         BNE   *+8                 NO, LEAVE BRANCH EQUAL INDEX   LBDMC
         LA    R3,8               SET BRANCH NOT EQUAL INDEX      LBDMC
         CLC   DFMTDEST,2(R1)     COMPARE OPTION TO FIELD         LBDMC
         B     *+4(R3)            BRANCH ON EQUAL OR NOT EQUAL    LBDMC
         BE    ANALOK             OPTION DOES MATCH               LBDMC
         B     ANALNOK            OPTION DOES NOT MATCH           LBDMC
         BNE   ANALOK             OPTION DOES MATCH               LBDMC
         B     ANALNOK            OPTION DOES NOT MATCH           LBDMC
         SPACE 1                                                  LBDMC
OPTION2  DS    0H                                                 LBDMC
         CLI   0(R1),C'Q'         CHECK IF QUEUE OPTION?          LBDMC
         BNE   OPTION3             NO, CHECK NEXT OPTION          LBDMC
         XR    R3,R3              CLEAR EQUAL×NOT EQUAL INDEX     LBDMC
         CLI   1(R1),C'^'         BRANCH ON NOT EQUAL?            LBDMC
         BNE   *+8                 NO, LEAVE BRANCH EQUAL INDEX   LBDMC
         LA    R3,8               SET BRANCH NOT EQUAL INDEX      LBDMC
         CLC   DFMTQUE+4(1),2(R1) COMPARE OPTION TO FIELD         LBDMC
         B     *+4(R3)            BRANCH ON EQUAL OR NOT EQUAL    LBDMC
         BE    ANALOK             OPTION DOES MATCH               LBDMC
         B     ANALNOK            OPTION DOES NOT MATCH           LBDMC
         BNE   ANALOK             OPTION DOES MATCH               LBDMC
         B     ANALNOK            OPTION DOES NOT MATCH           LBDMC
         SPACE 1                                                  LBDMC
OPTION3  DS    0H                                                 LBDMC
         CLI   0(R1),C'F'         CHECK IF FORMS OPTION?          LBDMC
         BNE   OPTION4             NO, CHECK NEXT OPTION          LBDMC
         XR    R3,R3              CLEAR EQUAL×NOT EQUAL INDEX     LBDMC
         CLI   1(R1),C'^'         BRANCH ON NOT EQUAL?            LBDMC
         BNE   *+8                 NO, LEAVE BRANCH EQUAL INDEX   LBDMC
         LA    R3,8               SET BRANCH NOT EQUAL INDEX      LBDMC
         CLC   DFMTFORM,2(R1)     COMPARE OPTION TO FIELD         LBDMC
         B     *+4(R3)            BRANCH ON EQUAL OR NOT EQUAL    LBDMC
         BE    ANALOK             OPTION DOES MATCH               LBDMC
         B     ANALNOK            OPTION DOES NOT MATCH           LBDMC
         BNE   ANALOK             OPTION DOES MATCH               LBDMC
         B     ANALNOK            OPTION DOES NOT MATCH           LBDMC
         SPACE 1                                                  LBDMC
OPTION4  DS    0H                                                 LBDMC
         CLI   0(R1),C'C'         CHECK IF FCB OPTION?            LBDMC
         BNE   OPTION5             NO, CHECK NEXT OPTION          LBDMC
         XR    R3,R3              CLEAR EQUAL×NOT EQUAL INDEX     LBDMC
         CLI   1(R1),C'^'         BRANCH ON NOT EQUAL?            LBDMC
         BNE   *+8                 NO, LEAVE BRANCH EQUAL INDEX   LBDMC
         LA    R3,8               SET BRANCH NOT EQUAL INDEX      LBDMC
         CLC   DFMTFCB,2(R1)      COMPARE OPTION TO FIELD         LBDMC
         B     *+4(R3)            BRANCH ON EQUAL OR NOT EQUAL    LBDMC
         BE    ANALOK             OPTION DOES MATCH               LBDMC
         B     ANALNOK            OPTION DOES NOT MATCH           LBDMC
         BNE   ANALOK             OPTION DOES MATCH               LBDMC
         B     ANALNOK            OPTION DOES NOT MATCH           LBDMC
         SPACE 1                                                  LBDMC
OPTION5  DS    0H                                                 LBDMC
         CLI   0(R1),C'T'         CHECK IF TRAIN OPTION?          LBDMC
         BNE   ANALOK              NO, NO VALID OPTION            LBDMC
         XR    R3,R3              CLEAR EQUAL×NOT EQUAL INDEX     LBDMC
         CLI   1(R1),C'^'         BRANCH ON NOT EQUAL?            LBDMC
         BNE   *+8                 NO, LEAVE BRANCH EQUAL INDEX   LBDMC
         LA    R3,8               SET BRANCH NOT EQUAL INDEX      LBDMC
         CLC   DFMTUCS,2(R1)      COMPARE OPTION TO FIELD         LBDMC
         B     *+4(R3)            BRANCH ON EQUAL OR NOT EQUAL    LBDMC
         BE    ANALOK             OPTION DOES MATCH               LBDMC
         B     ANALNOK            OPTION DOES NOT MATCH           LBDMC
         BNE   ANALOK             OPTION DOES MATCH               LBDMC
         B     ANALNOK            OPTION DOES NOT MATCH           LBDMC
         SPACE 1                                                  LBDMC
ANALOK   DS    0H                                                 LBDMC
         XR    R15,R15            OPTION IS ACCEPTED              LBDMC
         BR    R2                 RETURN TO GET NEXT PARM         LBDMC
         SPACE 1                                                  LBDMC
ANALNOK  DS    0H                                                 LBDMC
         LA    R15,4              OPTION HAS BEEN REJECTED        LBDMC
         BR    R2                 RETURN TO RETURN TO FORMAT      LBDMC
         SPACE 1                                                  LBDMC
***********************************************************************
*                                                                     *
*   MISCELLANY                                                        *
*                                                                     *
***********************************************************************
         LTORG
ED8      DC    X'4020202020202120'
ED5      DC    X'402020202021'
ED4      DC    X'4020202021'                                      LBDMC
ED3      DC    X'40202021'
HEADING  DC    CL80'DEST QUEUE POS JOBNO  JOBNAME PRIO  LINES FORM FCB X
                UCS ×--------STATUS-------×'                      LBDMC
HIGHBIT  EQU   X'80'
TABLE    EQU   *-240
         DC    C'0123456789ABCDEF' TRANSLATE TO PRINTABLE HEX
WORK     DSECT
         DS    CL80
CONVERT  DS    D
SETDHOLD DS    F
SVJOEA   DS    F                                                  LBDMC
#RECSP   DS    F                                                  LBDMC
DOUBLEWD DS    D
NUMBER   DS    CL16
FORMAT   CSECT
         $JQE
         $JOE
         QCOMMON
         ORG   QDMSG
FCLEAR   DS    0CL80          FORMAT FOR QUEUE RECORDS
DFMTDEST DS    CL4            NAME OF QUEUE                       LBDMC
         DS    C                                                  LBDMC
DFMTQUE  DS    CL5            CLASS NAME                          LBDMC
         DS    C                                                  LBDMC
DFMTPOS  DS    CL3            POSITION IN QUEUE                   LBDMC
         DS    C                                                  LBDMC
DFMTJNO  DS    CL5            JOBNAME                             LBDMC
         DS    C                                                  LBDMC
DFMTJOB  DS    CL8            JES2 JOB NUMBER                     LBDMC
         DS    C                                                  LBDMC
DFMTPRIO DS    CL4            JOB PRIORITY                        LBDMC
         DS    C                                                  LBDMC
DFMTLINS DS    CL5            NUMBER OF OUTPUT LINES              LBDMC
         DS    CL2                                                LBDMC
DFMTFORM DS    CL4            SYSOUT FORMS                        LBDMC
         DS    C                                                  LBDMC
DFMTFCB  DS    CL4            SYSOUT FCB                          LBDMC
         DS    C                                                  LBDMC
DFMTUCS  DS    CL4            SYSOUT UCS                          LBDMC
         DS    C                                                  LBDMC
DFMTEXEC DS    CL8            EXECUTING OR HELD                   LBDMC
         DS    C                                                  LBDMC
DFMTPRNT DS    CL9            PRINTING                            LBDMC
         ORG   DFMTPOS                                            LBDMC
FHEX     DS    0CL56          LENGTH OF JQE HEX DUMP
FHEXO    DS    0CL64          LENGTH OF JOE HEX DUMP
FHEX1    DS    0CL15
         DS    CL14
FHEX2    DS    0CL15
         DS    CL14
FHEX3    DS    0CL15
         DS    CL14
FHEX4    DS    0CL15
         DS    CL14
FHEXC    DS    0CL9           CLEAR LAST BYTES FOR JQE
FHEX5    DS    0CL9
         DS    CL8
FHEXOC   DS    C              CLEAR LAST BYTE FOR JOE
         END
./ ADD  NAME=Q8
         PRINT NOGEN
HELP     QSTART 'QUEUE COMMAND - DISPLAY HELP'
         GBLB  &QPFK          PF-KEY OPTION. DEFINED BY QSTART     ICBC
         USING QDISPLAY,R10   BASE REG FOR DISPLAY WORK AREA
         L     R10,QVDSPL     ADDR OF DISPLAY WORK AREA
***********************************************************************
*                                                                     *
*   PASS HELP SCREEN TO DISPLAY MODULE                                *
*                                                                     *
***********************************************************************
         MVC   QDHLINE,HELPHDR    SET HEADER                      LBDMC
         LA    R3,HEADER1         1ST MESSAGE                     LBDMC
         LA    R4,#HELP1          # OF UNRESTRICTED MESSAGES      LBDMC
         TM    QXAUTH,1           IS THE USER PRIVILEDGED         LBDMC
         BNO   NOAUTH             NO. SKIP                        LBDMC
         LA    R4,#HELP2(R4)      # OF RESTRICTED MESSAGES        LBDMC
NOAUTH   DS    0H                                                 LBDMC
         LA    R1,QDMSG           R1 -> HELP MESSAGE              LBDMC
         ST    R1,QDMSGA          FOR DISPLAY TO FIND             LBDMC
         MVC   QDMSG(80),0(R3)    COPY MESSAGE                    LBDMC
         MVC   QDMLNG,=H'80'      SET LENGTH                      LBDMC
         L     R15,=V(DISPLAY) ADDR OF DISPLAY MODULE             LBDMC
         BALR  R14,R15        GO TO IT                            LBDMC
         LA    R3,80(R3)          BUMP TO NEXT MESSAGE            LBDMC
         BCT   R4,NOAUTH          KEEP DISPLAYING                 LBDMC
         QSTOP
***********************************************************************
*                                                                     *
*   MISCELLANY                                                        *
*                                                                     *
***********************************************************************
         LTORG
HELPHDR  DC    CL80'QUEUE SUPPORTS THE FOLLOWING COMMANDS:'       LBDMC
HEADER1 DC CL80'---- SYSTEM DISPLAYS -------------------×---- JOB RELATX
               ED SUBCOMMANDS-----------'
MESSAGE1 DC CL80'DA             JOBS IN EXECUTION        × DJ          X
                       DISPLAY JOB'
 DC CL80'DT             DISPLAY TSO USERS        × JCL JOBNAME         X
               LIST JOB JCL'
 DC CL80'DS             DISPLAY STARTED TASKS    × JLOG JOBNAME        X
               LIST JOB LOG'
 DC CL80'DC (B/S/T)     DISPLAY CPU BATCH/STC/TSO× JMSG JOBNAME        X
               LIST JOB MESSAGES'
 DC CL80'STATUS (LEVEL) JOB STATUS               × DD JOBNAME          X
               LIST DD SUMMARY'
 DC CL80' DEFAULT FOR STATUS IS * (TSO ID).      × LIST JOBNAME DSID   X
               LIST JES2 DATASET'
 DC CL80'---- INPUT QUEUE DISPLAYS --------------×  OBTAIN DSID VALUES X
               USING DD COMMAND'
 DC CL80'DQ             DISPLAY INPUT QUEUES     ×---- LIST RELATED SUBX
               COMMANDS ---------'
 DC CL80'DI (NOTE1)     DISPLAY ALL INPUT JOBS   × FIND ''STRING'' COL(X
               SS,EE)  FIND TEXT'
 DC CL80'AI (NOTE1)     DISPLAY AVAILABE JOBS    × FALL ''STRING'' COL(X
               SS,EE)  FIND ALL'
 DC CL80'HI (NOTE1)     DISPLAY HELD JOBS        × COL  #    POSITION TX
               O COLUMN #'
 DC CL80'---- OUTPUT QUEUE DISPLAYS -------------× @    #    POSITION TX
               O RECORD #'
 DC CL80'DF             DISPLAY OUTPUT QUEUES    × D/+  #    MOVE FORWAX
               RD # LINES'
 DC CL80'DO (NOTE2)     DISPLAY ALL OUTPUT JOBS  × UP/- #    MOVE BACKWX
               ARD # LINES'
 DC CL80'AO (NOTE2)     DISPLAY AVAILABLE OUTPUT × T/TOP     TOP OF CURX
               RENT DATASET'
 DC CL80'HO             DISPLAY HELD OUTPUT      × B/BOTTOM  BOTTOM OF X
               DATASET'
 DC CL80'---- JOB MODIFICATION SUBCOMMANDS ------× PF/PB #   FORWARD/BAX
               CKWARD # PAGES'
 DC CL80'CAN JOBNAME (PURGE) CANCEL FROM INPUT   × HF/HB #   FORWARD/BAX
               CKWARD # HALFPAGES'
 DC CL80' OR EXECUTION. DELETE OUTPUT IF PURGE.  × OP BLANKS/NOBLANKS DX
               ISPLAY BLANK LINES'
 DC CL80'REQ JOBNAME CLASS   CHANGE SYSOUT CLASS ×  STRING MUST BE IN QX
               UOTES. COL DEFAULT'
 DC CL80'DEL JOBNAME         DELETE HELD SYSOUT  ×  IS ALL. DEFAULT # IX
               S 1.'
 DC CL80'                                        ×  SYNONYMS L-LIST F-FX
               IND C-COLUMN'
        DC CL80'-----NOTE1----------OPERANDS FOR DI,AI,HI,DO, AND AO---X
               -------------------------'
 DC CL80'  Q=X     X    = INCLUDE CLASS                Q^X     X    = EX
               XCLUDE CLASS'
        DC CL80'-----NOTE2----------OPERANDS FOR DO AND AO-------------X
               -------------------------'
 DC CL80'  C=VVVV  VVVV = INCLUDE FCB IMAGE            C^VVVV  VVVV = EX
               XCLUDE FCB IMAGE'
 DC CL80'  F=WWWW  WWWW = INCLUDE FORMS                F^WWWW  WWWW = EX
               XCLUDE FORMS'
 DC CL80'  R=YYYY  YYYY = INCLUDE REMOTE ID            R^YYYY  YYYY = EX
               XCLUDE REMOTE ID'
 DC CL80'  T=ZZZZ  ZZZZ = INCLUDE UCS IMAGE            T^ZZZZ  ZZZZ = EX
               XCLUDE UCS IMAGE'
 DC CL80'   THE ABOVE OPERANDS MAY BE MIXED AND BE ENTERED IN ANY ORDERX
               , EX:'
 DC CL80'  DO R=LOC Q=X F^STD.'
 DC CL80'   WOULD SHOW ALL LOCAL SYSOUT=X THAT DOES NOT USE A STANDARD X
               FORM'
HEADER2 DC CL80'---- MISC SUBCOMMANDS ------------------×---- LOGGING SX
               UBCOMMANDS---------------'
MESSAGE2 DC CL80'SLOG STC# SEQ  LIST SYSTEM LOG          × SAVE DSNAME X
               TYPE     COPY DATASET'
 DC CL80' ST SYSLOG WILL GET STC#. SEQ=0 CURRENT × PRINT ON CLASS DEST X
                OPEN SCREEN LOG'
 DC CL80'FTIME HH.MM.SS POSITION SYSLOG TO TIME  × PRINT               X
                PRINT SCREEN'
 DC CL80'END            EXIT                     × PRINT OFF           X
                CLOSE SCREEN LOG'
 DC CL80'-------------------------------            DEFAULT PRINT CLASSX
                IS SYSOUT A'
         AIF   (NOT &QPFK).PFK3 SKIP PF-KEYS
 DC CL80'× PF1/13  × PF2/14  × PF3/15  ×'                         LBDMC
 DC CL80'×   HELP  ×   DA    ×   END   ×          PROGRAM FUNCTION KEY X
               DEFINITIONS'
 DC CL80'-------------------------------'
 DC CL80'× PF4/16  × PF5/17  × PF6/18  ×          TO SPECIFY OPERANDS FX
               OR PF 5 OR'                                        LBDMC
 DC CL80'×   PRINT ×   FIND  ×   DI    ×          OPTIONALLY FOR PF 6,9X
               ,12 OR'
 DC CL80'-------------------------------          TO OVERRIDE DEFAULTS X
               PF 4,7,8,10,11'
 DC CL80'× PF7/19  × PF8/20  × PF9/21  ×          KEY IN THE VALUE AND X
               PRESS THE KEY'                                     LBDMC
 DC CL80'×   -21   ×   +21   ×   DO    ×'
 DC CL80'-------------------------------'
 DC CL80'× PF10/22 × PF11/23 × PF12/24 ×'                         LBDMC
 DC CL80'×  COL 1  ×  COL 41 ×   ST    ×'
 DC CL80'-------------------------------'
.PFK3    ANOP
#HELP1   EQU   (*-HEADER1)/80                                    LBDMC
 DC CL80'--------------------------- RESTRICTED SUBCOMMANDS -----------X
               ------------------'
 DC CL80'XI       DISPLAY ACTIVE INITIATORS      × XJ JOBNAME       DISX
               PLAY JQE AND JOES'
 DC CL80'XP PASSWORD   REQUEST FOR PASSWORD      × XD JOBNAME DSID  LISX
               T ANY DATASET'
 DC CL80' PROMPT. MSG IS ISSUED IF SUCCESSFUL.   × XB MTTR          DISX
               PLAY DISK RECORD'
#HELP2   EQU   ((*-HEADER1)/80)-#HELP1                           LBDMC
         QCOMMON
         END
./ ADD  NAME=Q9
         PRINT NOGEN
HEXBLK   QSTART 'QUEUE COMMAND - HEXADECIMAL DUMP OF A BLOCK'
         USING QCKPT,R10      BASE REG FOR CKPT WORK AREA
         L     R10,QVCKPT     LOAD BASE REG
         USING QDISPLAY,R9    BASE REG FOR DISPLAY WORK AREA
         L     R9,QVDSPL      LOAD BASE REG
***********************************************************************
*                                                                     *
*   VALIDATE AND CONVERT BLOCK ADDRESS                                *
*                                                                     *
***********************************************************************
         LH    R1,QLNG1       LENGTH OF USER PARM
         LTR   R1,R1          IS THE LENGTH ZERO?
         BNP   TILT           YES. TILT.
         CH    R1,=H'8'       IS THE LENGTH TOO BIG?
         BH    TILT           YES. TILT.
         MVC   QPARM2,QPARM1  LEAVE THE ORIGINAL ALONE
         TR    QPARM2,TABLEH  CONVERT TO HEX
         EX    R1,PACK        PACK INTO QCTRAK
***********************************************************************
*                                                                     *
*   READ THE BLOCK FROM HASPACE                                       *
*                                                                     *
***********************************************************************
         L     R2,QCBLKA      BLOCK IOAREA ADDR
         LH    R1,HASPACE+62  BLKSIZE FROM DCB
         BCTR  R1,0           SUBTRACT 1
         N     R1,ROUND       ROUND TO PREVIOUS 64 BYTE BOUNDARY
         AR    R1,R2          ADD BASE OF BUFFER
         MVC   0(64,R1),QBLANK BLANK THE LAST 64 BYTES OF BUFFER
         LR    R1,R2          PARM FOR READSPC
         L     R15,=V(READSPC) ROUTINE TO READ HASPACE
         BALR  R14,R15        GO TO IT
***********************************************************************
*                                                                     *
*   PRINT THE BLOCK                                                   *
*                                                                     *
***********************************************************************
*
*** NOTE - THIS ROUTINE ASSUMES A BLOCKSIZE OF 4008
*
         L     R3,QCIOTA      USE THE IOT AREA AS A WORK AREA
         ST    R3,QDMSGA      STORE ADDR OF PRINT LINE
         MVC   QDMLNG,=H'160' LENGTH OF MESSAGE
         MVC   QDHLINE,QBLANK BLANK THE TITLE LINE
         USING IN,R2          BASE REG FOR RAW BLOCK
         USING OUT,R3         BASE REG FOR PRINTABLE LINES
         SR    R4,R4          START OFFSET AT ZERO
LOOP     MVC   OLINE1,QBLANK  BLANK THE WORK AREA
         MVC   O1,I1          MOVE RECORD TO PRINT LINE
         MVC   O2,I2
         MVC   O3,I3
         MVC   O4,I4
         MVC   O5,I5
         MVC   O6,I6
         MVC   O7,I7
         MVC   O8,I8
         MVC   OLINE2,OLINE1  COPY INTO LINE2
         STH   R4,QPARM2      STORE OFFSET
         UNPK  OFFSET(5),QPARM2(3) CONVERT TO HEX
         TR    OFFSET,TABLEP  TRANSLATE TO PRINTABLE CHARACTERS
         MVI   OFFSET+4,C' '  CLEAR GARBAGE BYTE
         TR    ODATA1,TABLEU  TRANSLATE TO UPPER HEX
         TR    ODATA2,TABLEL  TRANSLATE TO LOWER HEX
         L     R15,=V(DISPLAY) ADDR OF DISPLAY MODULE
         BALR  R14,R15        GO TO IT
         LR    R1,R2          SAVE ADDR OF RECORD
SKIP     LA    R2,64(R2)      NEXT RECORD
         LA    R4,64(R4)      INCREMENT TO NEXT OFFSET
         CH    R4,HASPACE+62  IS THIS THE END?
         BNL   STOP           YES. GO HOME.
         CLC   0(64,R1),0(R2) IS THIS RECORD THE SAME AS PREVIOUS?
         BE    SKIP           YES. SKIP IT.
         B     LOOP           PRINT NEXT RECORD
***********************************************************************
*                                                                     *
*   EXCEPTIONS AND RETURN                                             *
*                                                                     *
***********************************************************************
TILT     QTILT '*** BLOCK ADDRESS WAS OMITTED ***'
STOP     QSTOP
***********************************************************************
*                                                                     *
*   MISCELLANY                                                        *
*                                                                     *
***********************************************************************
PACK     PACK  QCTRAK(5),QPARM2(1) BLOCK ADDRESS
ROUND    DC    0F'0',X'0000FFC0'
         LTORG
* TABLE FOR HEX CONVERT
TABLEH   DC    CL193' '
         DC    X'0A0B0C0D0E0F',CL41' ',C'01234567890',CL6' '
* TABLE FOR HEX UNCONVERT
TABLEP   EQU   *-240
         DC    C'0123456789ABCDEF'
* TABLE USED TO CONVERT TO UPPER HALF OF PRINTABLE HEX
TABLEU DS 0CL256
*     0123456789ABCDEF
 DC C'0000000000000000'
 DC C'1111111111111111'
 DC C'2222222222222222'
 DC C'3333333333333333'
 DC C' 4444444444.<(+×'
 DC C'&&5555555555$*);^'
 DC C'-/666666666,%_>?'
 DC C'7777777777:#@''="'
 DC C'8888888888888888'
 DC C'9999999999999999'
 DC C'AAAAAAAAAAAAAAAA'
 DC C'BBBBBBBBBBBBBBBB'
 DC C'CABCDEFGHICCCCCC'
 DC C'DJKLMNOPQRDDDDDD'
 DC C'EESTUVWXYZEEEEEE'
 DC C'0123456789FFFFFF'
* TABLE USED TO CONVERT TO LOWER HALF OF PRINTABLE HEX
TABLEL DS 0CL256
*     0123456789ABCDEF
 DC C'0123456789ABCDEF'
 DC C'0123456789ABCDEF'
 DC C'0123456789ABCDEF'
 DC C'0123456789ABCDEF'
 DC C' 123456789A     '
 DC C' 123456789A     '
 DC C'  23456789A     '
 DC C'0123456789      '
 DC C'0123456789ABCDEF'
 DC C'0123456789ABCDEF'
 DC C'0132456789ABCDEF'
 DC C'0123456789ABCDEF'
 DC C'0         ABCDEF'
 DC C'0         ABCDEF'
 DC C'01        ABCDEF'
 DC C'          ABCDEF'
* INPUT WORK AREA
IN       DSECT
I1       DS    CL8
I2       DS    CL8
I3       DS    CL8
I4       DS    CL8
I5       DS    CL8
I6       DS    CL8
I7       DS    CL8
I8       DS    CL8
* OUTPUT WORK AREA
OUT      DSECT
OLINE1   DS    0CL80
OFFSET   DS    CL4
         DS    CL2
ODATA1   DS    0CL74
O1       DS    CL8
         DS    C
O2       DS    CL8
         DS    CL2
O3       DS    CL8
         DS    C
O4       DS    CL8
         DS    CL2
O5       DS    CL8
         DS    C
O6       DS    CL8
         DS    CL2
O7       DS    CL8
         DS    C
O8       DS    CL8
OLINE2   DS    0CL80
         DS    CL6
ODATA2   DS    CL74
         QCOMMON
         END
