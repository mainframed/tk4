*******  PROBA MEMBER=YZ058A02 CODE=ED01 AUTH=M.SCHADE
*******  PROBA  STAND 28.01.80(13.29) LAN=ASM
         TITLE 'YZ058A00 - DATA SECURITY ERASE FOR MAGNETIC TAPES'
***********************************************************************
*
* DOKUMENTATIONSANFANG
*
* PGM-NAME:................ YZ058A00
*    -TYP:................. HAUPTPROGRAMM
*    -ATTRIBUT:............ SERIELL WIEDERVERWENDBAR
*
* KURZBEZEICHNUNG:......... LOESCHEN VON MAGNETBAENDERN ZUM DATENSCHUTZ
*
* ERSTELLER:............... M.SCHADE
*                           ABTLG: SSW - MS        DATUM: 05/76
*
* LETZTE AENDERUNG......... M.SCHADE
*                           ABTLG: SSW - CSI       DATUM: 01/80
*
* SPRACHE:................. /370 ASSEMBLER
* HAUPTSPEICHER:........... 2 KBYTES
* REFERENZEN:.............. KEINE
*
*
* PGM-BESCHREIBUNG:
*
*     DAS PROGRAMM YZ058A00 DIENT ZUM TEILWEISEN ODER TOTALEN LOESCHEN
*     VON MAGNETBAENDERN.
*     DIE BAENDER WERDEN MIT DEM KANALBEFEHL DSE (DATA SECURITY ERASE)
*     GELOESCHT. DIESER BEFEHL HAT, GEGENUEBER DEM VERFAHREN EIN MAG=
*     NETBAND MIT LEERBLOECKEN ZU UEBERSCHREIBEN, DEN GROSSEN VORTEIL,
*     DASS KANAL, STEUEREINHEIT UND CPU WAEHREND DES LOESCHVORGANGES
*     NICHT BELASTET WERDEN.
*
*
* ANWENDUNGSTECHNIK:
*
*     1. UEBER START-BEFEHL VON DER OPERATOR KONSOLE:
*
*            S DSE
*
* ( //DSE      EXEC  PGM=YZ058A00
*   //STEPLIB   DD  DSN=SERVLIB,DISP=SHR
*   //ERASE     DD  UNIT=TAPE,DSN=ERASE,DCB=DEN=3
*   //SYSUDUMP  DD  SYSOUT=D  )
*
*        ANSCHLIESSEND WIRD EIN 'SCRTCH'-BAND FUER DEN DSNAMEN 'ERASE'
*        ANGEFORDERT. DAS DARAUFHIN VOM OPERATOR GELADENE BAND WIRD BIS
*        AUF DAS LABEL GELOESCHT. DAS ERFOLGREICHE LOESCHEN WIRD MIT
*        DER MELDUNG
*
*            YZ058A00 - TAPE ON UNIT UUU ERASED, ENTER 'GO' OR 'END'
*
*        QUITTIERT. SOLL EIN WEITERES BAND GELOESCHT WERDEN, SO IST
*        'GO' EINZUGEBEN. DIE EINGABE VON 'END' BEENDET DAS PROGRAMM.
*        WENN MEHRERE BAENDER GLEICHZEITIG GELOESCHT WERDEN SOLLEN,
*        DANN IST DIE FUNKTION 'DSE' ENTSPRECHEND OFT ZU STARTEN.
*
         EJECT
*
*     2. ALS BATCH-PROGRAMM:
*
*        ERFORDERLICHE DD-STATEMENTS
*        //STEPNAME  EXEC  PGM=YZ058A00
*        //STEPLIB   DD    DSN=SERVLIB,DISP=SHR
*        //TAPE&&&&  DD    UNIT=TAPE,LABEL=(##,...),... ETC.
*            MIT  &&& = BELIEBIGE ALPHANUMERISCHE ZEICHEN
*                 ##  = ANZAHL DER AUF DEM BAND BEFINDLICHEN DATENBE=
*                       STAENDE + 1.
*        DIE ANZAHL DER TAPE&&&&-STATEMENTS IST BELIEBIG.
*     MIT DIESER ART DER ANWENDUNG KOENNEN BAENDER VOM ENDE EINES
*     DATENBESTANDES BIS ZUM BANDENDE GELOESCHT WERDEN (Z.B. ALS
*     DATENSCHUTZ BEI BAENDERN FUER EXTERNE BENUTZER).
*
*
*    ANWENDUNGSBEISPIEL 1:
*
*    AUF EINEM MAGNETBAND BEFINDEN SICH ZWEI DATEIEN. DER REST DES
*    BANDES SOLL GELOESCHT DLWERDEN.
*        //TAPE01 DD UNIT=TAPE,VOL=SER=123456,LABEL=(3,SL)
*
*
*    ANWENDUNGSBEISPIEL 2:
*
*    IN STEP 1 WIRD EINE MAGNETBANDDATEI ERSTELLT. IM FOLGESTEP WIRD
*    DER REST DES BANDES GELOESCHT.
*      STEP 1:
*        //STEP1 EXEC PGM=YZ058A00
*        ***WEITERE DD-STATEMENTS***
*        //NEWTAPE DD UNIT=TAPE,DSN=D.S.NEW,DISP=(,KEEP)
*      STEP 2:
*        //STEP2 EXEC PGM=YZ058A00
*        //STEPLIB DD DSN=SERVLIB,DISP=SHR
*        //TAPE001 DD UNIT=TAPE,VOL=REF=*.STEP1.NEWTAPE,LABEL=(2,SL)
*
*
*    ANWENDUNGSBEISPIEL 3:
*
*    DAS LETZTE BAND EINER AUS 4 BAENDERN BESTEHENDEN MULTIVOLUME-DATEI
*    SOLL VON DATEIENDE BIS BANDENDE GELOESCHT WERDEN.
*        //TAPEABC DD UNIT=TAPE,VOL=(,4,,SER=BAND4),LABEL=(2,SL)
*
         EJECT
*
* FEHLERBEHANDLUNG:
*
*     FOLGENDER USER-ABEND-CODE KANN AUFTRETEN:
*
*       USER = 1000  IN VERBINDUNG MIT FOLGENDER NACHRICHT:
*
*         YZ058A00  -  UNRECOVERABLE I/O-ERROR, USER ABEND CODE = 1000.
*
*
*     ALS HINWEIS FUER MOEGLICHE FEHLER KANN FOLGENDER RETURN CODE
*     AUFTRETEN:
*         RC = 4: ES WURDE KEIN 'TAPE&&&&' DD-STATEMENT GEFUNDEN.
*
*
* ANWENDUNGSHINWEISE:
*     DAS PROGRAMM YZ058A00 ARBEITET NICHT MIT MAGNETBANDEINHEITEN
*     DER SERIE 2400.
*
*     SPEZIFIZIERT EIN 'TAPE&&&&' DD-STATEMENT KEINE BANDDATEI, DANN
*     WIRD ES IGNORIERT.
*
*     ES IST DRINGEND DAVON ABZURATEN, MIT DSE GELOESCHTE BAENDER ZU
*     UEBERPRUEFEN, OB SIE AUCH TATSAECHLICH GELOESCHT SIND - SIE SIND
*     ES.! ANMERKUNG FUER GANZ MISSTRAUISCHE: WENN SIE SCHON VERSUCHEN
*     SOLLTEN EIN DERARTIGES BAND ZU LESEN, DANN VERANSTALTEN SIE DIE=
*     SEN VERSUCH IN EINER ZEIT, IN DER DER BANDKANAL VON KEINER ANDE=
*     REN ANWENUNG BENOETIGT WIRD. BEGRUENDUNG: EIN LESE-BEFEHL TRENNT
*     NAHELIEGENDERWEISE DIE VERBINDUNG BANDEINHEIT - STEUEREINHEIT -
*     KANAL - HAUPTSPEICHER NICHT. DER MIT DSE GELOESCHTE BANDBEREICH
*     WIRD ALS KLUFT ANGESEHEN, DESHALB DAUERT DER LESE-BEFEHL GENAUSO
*     LANGE WIE DAS VORHERGEHENDE LOESCHEN, NUR DASS DIESES MAL DER
*     GESAMTE PFAD BLOCKIERT IST (MACHT SICH Z.B. SEHR GUT WAEHREND DER
*     HAUPTBETRIEBSZEIT AUF EINEM KANAL, AUF DEM IMS-LOGBAENDER LAUFEN)
*
*
* DOKUMENTATIONSENDE
*
***********************************************************************
*
         EJECT
*------------------------- REGISTER USAGE -----------------------------
*
R0       EQU   0                  LINKAGE REGISTER
R1       EQU   1                  LINKAGE REGISTER
R2       EQU   2                  WORK
R3       EQU   3                  WORK
R4       EQU   4                  WORK
R5       EQU   5                  WORK
R6       EQU   6                  WORK
R7       EQU   7                  WORK
R8       EQU   8                  WORK
R9       EQU   9                  WORK
R10      EQU   10                 WORK
R11      EQU   11                 WORK
R12      EQU   12                 WORK
R13      EQU   13                 BASE REGISTER
R14      EQU   14                 RETURN REG. FOR EXTERNAL BRANCHES
R15      EQU   15                 EP REGISTER
*
F0       EQU   0                  FLOATING POINT REG 0
F2       EQU   2                  FLOATING POINT REG 2
F4       EQU   4                  FLOATING POINT REG 4
F6       EQU   6                  FLOATING POINT REG 6
*
*------------------------- GENERAL EQUATES ----------------------------
*
MINUS    EQU   C'-'
PLUS     EQU   C'+'
POINT    EQU   C'.'
ZERO     EQU   X'00'
ONE      EQU   X'01'
FOUR     EQU   X'04'
EIGHT    EQU   X'08'
BRANCH   EQU   X'F0'
NOP      EQU   X'00'
OPENOK   EQU   X'10'
E        EQU   C'E'
G        EQU   C'G'
*
***********************************************************************
*
         EJECT
*
YZ058A00 CSECT
         USING *,R15              TEMPORARY BASE REGISTER
         SAVE  (14,12),T,YZ058A00.D.&SYSDATE.T&SYSTIME.V02
         LR    R12,R13            TEMPORARY SAVE OF R13
         L     R13,BASEREG        ESTABLISH ADDRESSAB. OF THIS CSECT
         B     STOREREG           BRANCH AROUND SAVEAREA
SAVEAREA DS    0F                 SAVEAREA. FULLWORD ALIGNMENT
         DROP  R15                R15 NO LONGER USED FOR BASE
         USING *,13               R13 BASE REGISTER
         DC    18F'0'             SAVEAREA
BASEREG  DC    A(SAVEAREA)        ADDR. OF OWN SAVEAREA
STOREREG DS    0H
         ST    R13,8(R12)         STORE ADDR. OF OWN SAVEA. INTO HIGHER
         ST    R12,SAVEAREA+4     STORE ADDR. OF HIGHER SAVEA INTO OWN
         B     START
*
RETURN   DS    0H
         L     R15,RC            LOAD RETURN CODE
         L     R13,SAVEAREA+4
         LM    R0,R12,20(R13)
         L     R14,16
         B     80(R14)
*
         EJECT
*
START    DS    0H
         CLC   0(2,R14),=XL2'0A03'
         BE    A001
         BAL   R14,E2 ABEND
A001     DS    0H
         L     R2,16              LOAD CVT-POINTER
         L     R2,0(R2)           TCB POINTER
         L     R2,4(R2)           CURRENT TCB
         CLM   R12,7,113(R2)      COMPARE ADDRESS OF SAVEAREA
         BE    A002
         BAL   R14,E2 ABEND
*
A002     L     R1,16              CVT POINTER
         TM    116(R1),B'00010000' LOOK FOR VS2 SYSTEM
         BNO   A004               BRANCH IF NOT
         CLM   R2,7,125(R2)       IS CURRENT TCB = JOBSTEP TCB
         BE    A003               BRANCH IF YES
         BAL   R14,E2 ABEND
*
A003     TESTAUTH FCTN=1
         LTR   R15,R15
         BZ    A004
         BAL   R14,E2 ABEND
*
A004     DS    0H
         L     R2,12(R2)          TIOT POINTER
         LA    R2,24(R2)          ADDRESS OF FIRST DD-ENTRY
         MVI   SWITCH+1,NOP       INITIALIZE SWITCH
*
SCAN     DS    0H
         SR    R3,R3              CLEAR R3
         IC    R3,0(R2)           INSERT LENGTH OF DD-ENTRY
         CLC   4(4,R2),=CL4'TAPE' TEST FOR DDNAME 'TAPE....'
         BE    DDFOUND            BRANCH IF EQUAL
         CLC   4(8,R2),=CL8'ERASE' TEST FOR DDNAME 'ERASE '
         BE    ERASE              BRANCH IF EQUAL
GOONSCAN LA    R2,0(R3,R2)        INCREASE POINTER TO NEXT ENTRY
         L     R3,0(R2)           LOAD FIRST WORD
         LTR   R3,R3              TEST FOR END OF TIOT
         BNZ   SCAN               BRANCH TO TEST NEXT ENTRY
         B     RETURN --- GO BACK --
*
DDFOUND  DS    0H
         ST    R2,ADDENTRY        SAVE POINTER TO CURRENT DD-ENTRY
         SR    R1,R1              CLEAR R1
         ICM   R1,3,18(R2)        LOAD POINTER TO UCB
         CLI   18(R1),X'80'       TEST FOR MAGNETIC TAPE DEVICE
         BE    DDFOUND1
         MVI   RC+3,EIGHT         SET RETURN CODE
         B    GOONSCAN
*
DDFOUND1 DS    0H
         MVC   WTOR+49(3),13(R1)  MOVE UNITNAME INTO MESSAGE
         MVC   WTP+59(3),13(R1)   MOVE UNITNAME INTO MESSAGE
         MVC   OUTPUT+40(8),4(R2) MOVE DDNAME FROM DD-ENTRY INTO DCB
READJFCB DS    0H
         RDJFCB OUTPUT
         B     OPEN
*
ERASE    DS    0H
         SR    R1,R1              CLEAR R1
         ICM   R1,3,18(R2)        LOAD POINTER TO UCB
         MVI   SWITCH+1,BRANCH    SET SWITCH TO NOP
         B     DDFOUND
*
OPEN     DS    0H
         MVI   RC+3,ZERO          SET RETURN CODE
         OPEN  (OUTPUT,(OUTPUT)),TYPE=J
         TM    OUTPUT+48,OPENOK  TEST FOR CORRECT OPEN
         BO    *+8               BRANCH IF NOT
         BAL   R0,E2             BRANCH IF NOT
         OI    OUTPUT+44,B'00001100' DON'T USE I/O SUPERV.ERROR ROUTINE
*
         EJECT
*
EXCP1    DS    0H
         MVC   OUTPUT+28(4),IOBAD1
         MVI   TPECB1,ZERO        CLEAR ECB
         EXCP  TPIOB1
*
         WAIT  ECB=TPECB1
*
         TM    TPECB1,X'7F'
         BO    EXCP2
         B     E1
*
POSTED   DS    0H
         L     1,INTVL
         C     1,=F'200'
         BH    P1
         LA    1,400
P1       DS    0H
         S     1,=F'200'
         ST    1,INTVL
         STIMER WAIT,BINTVL=INTVL
*
EXCP2    DS    0H
         MVC   OUTPUT+28(4),IOBAD2
         MVI   TPECB2,ZERO        CLEAR ECB
         EXCP  TPIOB2
         WAIT  ECB=TPECB2
         TM    TPECB2,X'7F'
         BNO   POSTED
*
         MVC   INTVL(4),BASINTVL  UPDATE INTERVAL
         L     R2,ADDENTRY        RESTORE POINTER
         SR    R1,R1              CLEAR R1
         ICM   R1,3,18(R2)        LOAD POINTER TO UCB
         MVC   WTP+24(6),28(R1)   MOVE VOLSER NUMBER INTO WTP
CLOSE    CLOSE OUTPUT
*
         EJECT
*
SWITCH   NOP   WTOR1
WTP      WTO   'YZ058A00 - TAPE VVVVVV SUCCESSFULLY ERASED ON UNIT UUU *
               ',ROUTCDE=11
         L     R2,ADDENTRY        RESTORE R2
         B     GOONSCAN
*
*
WTOR1    DS    0H
         MVI   WTORECB,ZERO       CLEAR ECB
         XC    REPLY(4),REPLY
WTOR     WTOR  'YZ058A00  -  TAPE ERASED ON UNIT UUU ENTER ''GO'' OR ''*
               END''',                                                 *
               REPLY,3,WTORECB,ROUTCDE=3
*
         WAIT  ECB=WTORECB
*
         CLI   REPLY,E
         BE    RETURN
         CLI   REPLY,G
         BNE   WTOR1
         B     OPEN
*
*--------
         EJECT
*
E1       DS    0H                 OPEN ERROR OUTPUT DATASET SYSUT2
         WTO   'YZ058A00  -  UNRECOVERABLE I/O ERROR, USER ABEND CODE =*
               1000.',ROUTCDE=(3,11)
         LA    R1,1000            SET ABEND CODE
         B     ABEND
*
E2       DS    0H                 ERROR ON OUTPUT DATASET
         LA    R1,2000
         B     ABEND
*
ABEND    DS    0H                 SCHEDULE ABEND
         ABEND (R1),DUMP
*
*---------
*
         EJECT
*          *** DEFINITONS OF CONSTANTS AND VARIABLES ***
         DS    0D
         DC    CL8'DCB'
OUTPUT   DCB   DDNAME=ERASE,MACRF=(E),DSORG=PS,EXLST=EXLST,IMSK=0
*
         EJECT
         DS    0D
         DC    CL8'COUNT'
COUNT    DC    F'0'
*
         DS    0D
         DC    CL8'IOB1'
TPIOB1   DC    X'42000000'
         DC    A(TPECB1)
         DC    2F'0'
         DC    A(TPCCW1)
         DC    A(OUTPUT)
         DC    4F'0'
TPECB1   DC    F'0'
*
         DS    0D
         DC    CL8'IOB2'
TPIOB2   DC    X'42000000'
         DC    A(TPECB2)
         DC    2F'0'
         DC    A(TPCCW2)
         DC    A(OUTPUT)
         DC    4F'0'
TPECB2   DC    F'0'
*
WTORECB  DC    F'0'
ADDENTRY DC    F'0'
IOBAD1   DC    A(TPIOB1)
IOBAD2   DC    A(TPIOB2)
BASINTVL DC    F'3000'
INTVL    DC    F'3000'
*
         DS    0D
         DC    CL8'CCW1'
TPCCW1   CCW   X'17',ZERO,X'60',ONE ERASE GAP
         CCW   X'97',ZERO,X'20',ONE DATA SECURITY ERASE
*
         DC    CL8'CCW2'
TPCCW2   CCW   X'17',ZERO,X'20',ONE ERASE GAP
*
*
         LTORG
*
REPLY    DC    CL4' '
RC       DC    F'4'
EXLST    DC    X'87',AL3(JFCB)
JFCB     DC    22D'0'
*
         END
