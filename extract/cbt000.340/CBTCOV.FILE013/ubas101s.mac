         MACRO
&NAME    DUMPTAB &UNPRINT=@,&UCS=PN
         LCLC  &INSERT
         AIF   ('&NAME' EQ '').ERROR2
         AIF   (K'&UNPRINT EQ 1).SET
         AIF   ('&UNPRINT' EQ ''',''').EINSETZ
         AGO   .WARN
.EINSETZ ANOP
&INSERT  SETC  ','
         AGO   .CCHAIN
.SET     ANOP
&INSERT  SETC  '&UNPRINT'
.CCHAIN  AIF   ('&UCS' EQ 'PN').PNDEF
         AIF   ('&UCS' EQ 'QN').PNDEF
         AIF   ('&UCS' EQ 'AN').ANDEF
         AIF   ('&UCS' EQ 'OCRA').OCRADEF
         AGO   .ERROR1
.PNDEF   ANOP
         SPACE
&NAME    DS    0CL256
         DC    C'.'
         DC    63CL1'&INSERT'
         DC    C' '
         DC    10CL1'&INSERT'
         DC    6C'.'
         DC    10CL1'&INSERT'
         DC    7C'.'
         DC    9CL1'&INSERT'
         DC    5C'.'
         DC   10CL1'&INSERT'
         DC    6C'.'
         DC    65CL1'&INSERT'
         DC    CL9'ABCDEFGHI'
         DC    7CL1'&INSERT'
         DC    CL9'JKLMNOPQR'
         DC    8CL1'&INSERT'
         DC    CL8'STUVWXYZ'
         DC    6CL1'&INSERT'
         DC    CL10'0123456789'
         DC    6CL1'&INSERT'
         MEXIT
.ANDEF   ANOP
         SPACE
&NAME    DS    0CL256
         DC    C'.'
         DC    63CL1'&INSERT'
         DC    C' '
         DC    10CL1'&INSERT'
         DC    2C'.'
         DC    CL1'&INSERT'
         DC    C'.'
         DC    12CL1'&INSERT'
         DC    2C'.'
         DC    3CL1'&INSERT'
         DC    2C'.'
         DC    9CL1'&INSERT'
         DC    2C'.'
         DC    14CL1'&INSERT'
         DC    2C'.'
         DC    68CL1'&INSERT'
         DC    CL9'ABCDEFGHI'
         DC    7CL1'&INSERT'
         DC    CL9'JKLMNOPQR'
         DC    8CL1'&INSERT'
         DC    CL8'STUVWXYZ'
         DC    6CL1'&INSERT'
         DC    CL10'0123456789'
         DC    6CL1'&INSERT'
         MEXIT
.OCRADEF ANOP
         SPACE
&NAME    DS    0CL256
         DC    C'.'
         DC    63CL1'&INSERT'
         DC    C' '
         DC    10CL1'&INSERT'
         DC    C'.'
         DC    4CL1'&INSERT'
         DC    C'.'
         DC    11CL1'&INSERT'
         DC    C'.'
         DC    3CL1'&INSERT'
         DC    2C'.'
         DC    9CL1'&INSERT'
         DC    2C'.'
         DC    14CL1'&INSERT'
         DC    C'.'
         DC    CL1'&INSERT'
         DC    C'.'
         DC    67CL1'&INSERT'
         DC    CL9'ABCDEFGHI'
         DC    2CL1'&INSERT'
         DC    C'.'
         DC    CL1'&INSERT'
         DC    C'.'
         DC    2CL1'&INSERT'
         DC    CL9'JKLMNOPQR'
         DC    8CL1'&INSERT'
         DC    CL8'STUVWXYZ'
         DC    2CL1'&INSERT'
         DC    C'.'
         DC    3CL1'&INSERT'
         DC    CL10'0123456789'
         DC    6CL1'&INSERT'
         MEXIT
.ERROR1  ANOP
         SPACE
***       UCS-CHARACTERS UNKNOWN       ***
*** PROCESSING CONTINUESLY WITH UCS=PN ***
         AGO   .PNDEF
.ERROR2  ANOP
         SPACE
         MNOTE '*** DUMPTAB-NAME MISSING ***'
         SPACE
         MEXIT
.WARN    ANOP
         SPACE
***     FOR MORE THAN ONE CHARACTER IN THE UNPRINT-PARAMETER     ***
*** THE UNPRINTABLE CHARACTERS ARE REPRESENTED BY THE FIRST ONE. ***
&INSERT  SETC  '&UNPRINT'(1,1)
         AGO   .CCHAIN
         MEND
         EJECT
LUBDUMP  START
* ABSTRACT:    ** LUBDUMP **
*              REGION = 8K + 2 * L'INPUTBUFFER,MIN=20K
* VERSION:     2 , LEVEL 0 , FEB 29,1968
* VERSION:     2 , LEVEL 1  MAR , 25 1970 BRUST
* VERSION:     2 , LEVEL 2  NOV , 20 1972 SOLTAU
*
* AUTHOR:      GERD MUEHLHAUSER
*
*
* FACILITIES:  LUBDUMP PRINTS DATA SETS IN EBCDIC OR HEXADECIMAL.THE
*              DATA SETS MAY BE LABELED OR UNLABELED.ALL RECORD FORMATS
*              ARE ALLOWED,UNDEFINED IS USED. THE LISTING MAY BE
*              CONTROLLED BY PARAMETERCARDS OR BY OPERATOR COMMUNIC.
*              DENSITY AND TRTCH ARE TESTED ON READ ERROR,
*              THE CORRECT VALUES FOR BOTH ARE DETERMINED AND INSERTED.
*
* PARAMETER:   GIVEN IN CARDS THROUGH //SYSIN.VALID PARAMETERS STARTING
*              IN COLUMN 1 ARE:
*              PRT,NNNNN    PRINT,NNNNN IS A COUNT (MAY BE).
*              HEX,NNNNN    HEXADECIMAL PRINT
*              BSR,NNNNN     BACKSPACE PHYSICAL RECORDS,COUNT MUST BE.
*              FSR,NNNNN     FORWARD SPACE PHYS RECORDS,COUNT MUST BE.
*              FSF,NNNNN     FORWARD SPACE FILE (ONLY FOR TAPE VOLUMES)
*              BSF,NNNNN     BACKSPACE FILE (ONLY FOR TAPE VOLUMES)
*              BSM           BACKSPACE MAGNETIC TAPE TO A TAPE MARK.
*              FSM           FORWARD SPACE MAGN TAPE TO A TAPE MARK,BUT
*                            NOT OVER.
*              ERR           READ ERROR TEST WITHOUT PRINT
*              TRA           TRANSLATE
*                                  X'C0' TO X'4E'
*                                  X'D0' TO X'60'
*                                  X'E0' TO X'5C'
*              END           TERMINATE TASK (ONLY MEANINGFUL
*                            WHEN ENTERED VIA CONSOLE,. WHEN THE
*                            INPUT COMES FROM CARDS, THE EOF ON SYSIN
*                            WILL TERMINATE THE TASK)
*              CONSOLE       REQUESTS CONSOLE COMMUNICATION FROM THE
*                            INPUT STREAM. ANY OTHER SYSIN CARDS AFTER
*                            THIS STATEMENT WILL BE IGNORED.
*
*              ANY NUMBER OF CARDS IN ANY SEQUENCE ARE VALID.
*
* COMMUNICATION: A CONTINUOUS WTOR ALLOWS THE OPERATOR TO GIVE COMMANDS
*              OPERATOR COMMUNICATION WILL ONLY TAKE PLACE WHEN THERE
*              IS NO SYSIN DD-STATEMENT OR WHEN THERE IS A CONSOLE-
*              COMMAND IN THE INPUT-STREAM.
*
* COMPLETION CODES:
*
*              111  INPUT/OUTPUT ERROR
*              222   FSF OR BSF PARAMETER FOR NON TAPE VOLUME.
*                    (ONLY WHEN SYSPRINT NOT PRESENT)
*              333  TAPE CONTROL ERROR
*              444  INVALID PARAMETER CARD  (ONLY WHEN SYSPRINT NOT
*                    PRESENT)
*              555  INVALID OPEN TESTED BY OPENFLAGS
*              666 NON NUMERIC COUNTER IN PARAMETER
*                    (ONLY WHEN SYSPRINT NOT PRESENT)
*
***************
*
* REGISTER USE
*
U        EQU   2   WORK REGISTER
W        EQU   3   WORK REGISTER
P        EQU   4   WORK REGISTER
B        EQU   5   BRANCH AND LINK REGISTER
LRL      EQU   6   LOGICAL RECORD LENGTH
PUT      EQU   7   DCB-ADDRESS OF OUTPUT
GET      EQU   8   DCB-ADDRESS OF INPUT DATA SETS
WCB      EQU   9   WORK CONTROL BLOCK ADDRESS
DCBD     EQU   10  USED BY DUMMY SECTION IHADCB (DCBD)
BASE     EQU   11  BASE REGISTER 1
BAS      EQU   12  BASE REGISTER 2
         REG
*
* SAVE REGISTER,USINGS,BASE REGISTER LOAD
*
         XSAVE (BASE,BAS),SVA,LUBDUMP
         USING IHADCB,DCBD
         USING WRKCB,WCB
         ST    R1,JFCB
*
* GETMAIN FOR THE WORK CONTROL BLOCK (DSECT WRKCB)
*
         LA    U,WRKDCBS-WRKCB+LISTEND-CARD(0,0)
         GETMAIN R,LV=(U)
         LR    WCB,1    LOAD WCB-ADDR. TO DSECT REGISTER
*
* PREPARE WORK CONTROL BLOCK
*
         LA    U,WRKDCBS-WRKCB(0,0) LENGTH IS LESS THAN 256 BYTES
         EX    U,EXCLOR           CLEAR WCB WITH HEX-00
         MVC   WRKLINCT,=PL2'+0'
         MVI   WRKCRDCT+L'WRKCRDCT-1,X'0C' PREPARE COUNTS
         MVI   WRKAFTER+L'WRKAFTER-1,X'0C'
         MVI   WRKCURR+L'WRKCURR-1,X'0C'
* MOVE I/O-DCBS INTO WORK CONTROL BLOCK
         LA    U,WRKDCBS                    1. HOLD ADDR OF CARD-DCB
         ST    U,WRKCARD                       AND MOVE CARD-DCB TO
         MVC   0(INPUT-CARD,U),CARD            DSECT AREA WRKCB.
         LA    U,INPUT-CARD(0,U)            2. - SAME FOR INPUT DCB.
         ST    U,WRKINPUT
         MVC   0(OUTPUT-INPUT,U),INPUT
         LA    U,OUTPUT-INPUT(0,U)          3. - SAME FOR OUTPUT DCB.
         ST    U,WRKOUT
         MVC   0(ENDDCB-OUTPUT,U),OUTPUT
         LA    U,ENDDCB-OUTPUT(0,U)         4. - SAME FOR READ-LIST
         ST    U,WRKDECB
         MVC   0(LISTEND-ENDDCB,U),ENDDCB
         LA    U,LWTOR-ENDDCB(0,U)          5. - SAME FOR WTOR-LIST.
         ST    U,WRKWTOR
*
* PUT JOBNAME AND STEPNAME INTO WTOR-TEXT
*
         L     W,16(0,0)          A(CVT)
         L     W,0(0,W)           A(CVTTCBP)
         L     W,0(0,W)           A(TCB)
         L     W,12(0,W)          A(TIOT)
         MVC   44(8,U),0(W)       JOBNAME
         MVC   53(8,U),8(W)       STEPNAME
*
* OPEN THE DCBS
*
         LA    R1,DDNINP
         CALL  TIOTSCAN
         LTR   R15,R15
         BNZ   TSTOUT
         L     R15,WRKINPUT
         MVC   40(8,R15),=CL8'SYSUT1'
TSTOUT   EQU   *
         LA    R1,DDNOUT
         CALL  TIOTSCAN
         LTR   R15,R15
         BNZ   TSTSYSPR
         L     R15,WRKOUT
         MVC   40(8,R15),=CL8'SYSUT2'
TSTSYSPR EQU   *
         L     R3,WRKOUT
         RDJFCB ((R3))
         L     R4,WRKINPUT
         RDJFCB ((R4))
         OI    JFCB+52,X'08'
         OI    OUTJFCB+52,X'08'
         NI    JFCB+76,X'7F'
         NI    OUTJFCB+76,X'7F'
         L     DCBD,WRKINPUT
         OPEN  ((DCBD)),TYPE=J
         CLOSE ((DCBD),REWIND)
         LA    R1,DDNSYSPR
         CALL  TIOTSCAN
         LTR   R15,R15
         BNZ   SYSPROK
         MVI   DDNSYSPR,X'00'
         B     NOOP
SYSPROK  EQU   *
         OPEN  (SYSPRINT,(OUTPUT))
         PUT   SYSPRINT,VOR
         MVI   VOR,C'-'
         MVI   SYSPRBUF,X'40'
         MVC   SYSPRBUF+1(79),SYSPRBUF
         PUT   SYSPRINT,VOR
         MVI   VOR,X'40'
NOOP     EQU   *
         L     R1,WRKINPUT
         LA    R1,40(R1)
         CALL  TIOTSCAN
         L     R1,16(R15)
         CLI   18(R1),X'80'   TAPE ?
         BNE   NOCHG
*
*   MAKE LABEL TAPES TO BLP FOR FSF AND BSF PROCESSING.
*
         LH    R15,JFCB+68
         LTR   R15,R15
         BNZ   NZ
         LA    R15,1
         STH   R15,JFCB+68
NZ       EQU   *
         TM    JFCB+66,X'11'
         BM    NOCHG     DD-CARD DISP IS BLP OR NL -- NO ACTION REQ.
         OI    SWITCH,X'40'  INDIC. LABEL TAPE
         NI    JFCB+66,X'E0'    MAKE
         OI    JFCB+66,X'10'   BLP
         LH    R15,JFCB+68
         MH    R15,=H'3'
         BCTR  R15,0
         STH   R15,JFCB+68
         L     R1,WRKINPUT
         LA    R1,40(R1)
         CALL  TIOTSCAN
         L     R1,16(R15)
         CLI   18(R1),X'80'
         BNE   NOCHG
         LA    R15,SVCROUT2
         SVC   250
NOCHG    EQU   *
         L     DCBD,WRKCARD
         OPEN  ((DCBD))
         TM    DCBOFLGS,X'10'     BIT 3 IS 1 IF SUCCESSFULL OPEN WAS
         BO    OPENIN
         OI    SWITCH,X'80'
         B     OPENIN
ABNEND   EQU   *
         WTO   'LUBDMP0 DD-STMT. MISSING',ROUTCDE=11
         ABEND 555,DUMP
REREAD   CLOSE ((DCBD),LEAVE)
         L     1,WRKBUFF
         LH    U,DCBBLKSI
         TM    DCBDEVT,X'81'
         BO    NADD
         SR    R15,R15
         IC    R15,DCBKEYLE
         AR    U,R15
NADD     EQU   *
         FREEMAIN R,LV=(U),A=(1)
         NI    WRKIOS,255-OPN
         OI    WRKSWI,AGI
OPENIN   L     DCBD,WRKINPUT
         OPEN  ((DCBD)),TYPE=J
         TM    DCBOFLGS,X'10'
         BC    14,ABNEND
         SR    R15,R15
         IC    R15,DCBKEYLE
         TM    DCBDEVT,X'81'           IS INPUT DEVICE A TAPE
         BNO   INPINF                  NO, GET FURTHER DCB INFORMATION
         OI    WRKIOS,TAP              SET SWITCH FOR TAPE UNIT
         SR    R15,R15
INPINF   EQU   *
         LH    U,DCBBLKSI         GET MAX BLOCKSIZE FROM DCB,
         CVD   U,WRKBLKSI         CONVERT TO PACKED DECIMAL.
         AR    U,R15
         GETMAIN R,LV=(U)         GET BUFFER AREA FOR INPUT
         ST    1,WRKBUFF          SAVE BUFFER'S ADDRESS
         TM    WRKSWI,AGI
         BO    FIRSTRD
         L     DCBD,WRKOUT
         OPEN  ((DCBD),(OUTPUT)),TYPE=J
         TM    DCBOFLGS,X'10'
         BO    FIRSTRD
         B     ABNEND
FIRSTRD  TM    WRKIOS,TAP
         BC    14,PUTLOCF
         L     DCBD,WRKINPUT
         L     U,WRKDECB
         L     P,WRKINPUT
         L     GET,WRKBUFF
         READ  (U),SF,(P),(GET),32760,MF=E
         CHECK (U)
         TM    WRKIOS,OPN
         BO    REREAD
         L     GET,WRKINPUT
         CNTRL (GET),BSR,1
         TM    WRKSWI,AGI
         BO    GETCD1
*
*              PUT LOCATE FOR THE FIRST LINE,FILLED WITH ASTERISKS
*
PUTLOCF  L     PUT,WRKOUT         GET DCB-ADDRESS
         PUT   (PUT)              PUT LOCATE
         LR    PUT,1              GET BUFFER POOL FROM REG 1
         MVI   0(PUT),X'89'
         MVI   1(PUT),C' '
         MVC   2(131,PUT),1(PUT)
*
***  BUILT-UP  OF ADDRESS-LIST  FOR  DISKCONTROL
         MVC   LISTADD,WRKINPUT
         LA    U,WRKCURR
         ST    U,LISTADD+4
         LA    U,WRKCON
         ST    U,LISTADD+8
         LA    U,WRKTEMPD
         ST    U,LISTADD+12
         MVC   LISTADD+16,WRKDECB
         MVC   LISTADD+20,WRKBUFF
*              GET LOCATE FOR PARAMETER CARDS
*
GETCD1   EQU   *
         TM    SWITCH,X'80'
         BNO   GETCARD
         LA    GET,WRKREPLY
         LA    W,WRKECB
         L     1,WRKWTOR
         MVC   0(9,GET),=CL9' '
         XC    WRKECB,WRKECB
         WTOR  ,(GET),9,(W),MF=(E,(1))
         B     WAITWTOR
GETCARD  L     GET,WRKCARD        GET CARD DCB ADDR.
         GET   (GET)              READ A CARD IN LOCATE MODE
         LR    GET,1              GET BUFFER ADDR.
         CLI   DDNSYSPR,X'00'
         BE    NOPRMOUT
         MVC   SYSPRBUF,0(GET)
         PUT   SYSPRINT,VOR
NOPRMOUT EQU   *
         AP    WRKCRDCT,=P'+1'    COUNT THE PARAMETERCARDS
         BAL   B,LISTPAR          TEST LIST PARAMETERS
         BAL   P,PARMTEST         TEST AND DO TAPE CONTROL
         TM    WRKIOS,TPC         WAS TAPE CONTROL?
         BZ    ABEND4             NO,INVALID CARD
         NI    WRKIOS,255-TPC     CLEAR CONTROL SWITCH
         B     GETCARD            READ NEXT PARMCARD
ABEND4   EQU   *
         CLI   DDNSYSPR,X'00'
         BNE   NOABEND4
         WTO   'LUBDMP1 INVALID PARAMETER-CARD. USE SYSPRINT TO GET DET*
               AILED INFORMATION',ROUTCDE=11
         ABEND 444
NOABEND4 EQU   *
         MVI   SYSPRBUF,X'40'
         MVC   SYSPRBUF+1(79),SYSPRBUF
         MVC   SYSPRBUF(33),=C'LUBDMP1 INVALID PARAMETER IGNORED'
         PUT   SYSPRINT,VOR
         NI    WRKIOS,255-TPC
         B     GETCARD
*
* LOOK FOR HEX PARAMETER
*
LISTPAR  EQU   *
         NI    WRKSWI,255-CHK          CLEAR SWITCH
         CLC   0(3,GET),=C'HEX'
         BNE   CHKPAR        MAY BE CHECK FOR UNPRINTABLE CHARACTERS
HEXORCHK EQU   *
CHK      EQU   128           INDICATES SEARCH FOR UNPRINTABLE CHARACTER
         TM    WRKCON,EOF         EOF  REACHED ?
         BO    CARDTEST
         NI    WRKIOS,255-ERR
         OI    WRKIOS,HEX
LISTLAST MVC   WRKTEMP1,4(GET)    MOVE COUNT TO A TEMPORARY AREA
         BAL   W,CONVERT          CONVERT COUNT TO BINARY IN REG. U
         CVD   U,WRKPRTCT         CONVERT INTO DEC.PRINTCOUNT FOR BLKS
         SP    WRKAFTER,WRKAFTER  COLLECT EVEN PRINTED BLOCKS
         LTR   U,U                WAS A COUNT?
         BNE   GIVEW
         OI    WRKIOS,ALL         NO,SET BIT TO PRINT ALL THE DATA SET
         B     GIVEW
CHKPAR   EQU   *
         CLC   0(3,GET),=C'CHK'  WAS CHECK ?
         BNE   PRTPAR
         OI    WRKSWI,CHK    INDICATE THIS CONDITION
         B     HEXORCHK      GOTO HEX-ROUTINE
*
* LOOK FOR PRT (PRINT) PARAMETER
*
PRTPAR   CLC   0(3,GET),=C'PRT'
         BNE   TESTPAR     NO PRT CARD
         TM    WRKCON,EOF         EOF  REACHED ?
         BO    CARDTEST
         NI    WRKIOS,255-HEX-ERR  CLEAR PRECEDING CONDITION
         B     LISTLAST
*
*              LOOK FOR TRA PARAMETER
*
TESTPAR  EQU   *
         CLC   0(3,GET),=C'TRA'  TEST FOR TRANSLATE-PARAMETER
         BNE   ENDPAR   NO TRA CARD
         BAL   14,TRTAMAIN BRANCH TO BUILD A TRANSLATE-TABLE
         MVC   OVERP(2),=X'5850'  MOVE LOAD STATEMENT TO NOP
         MVC   OVERP+4(6),=X'DC8470005000'  TRANSLATE STATEMENT
         MVC   CHANGEX(2),=X'5850'
         MVC   CHANGEX+4(6),=X'DC8470005000'
         B     CARDTEST
*
* LOOK FOR END PARAMETER
*
ENDPAR   CLC   0(3,GET),=C'END'
         BE    CLOSEALL
*
*   LOOK FOR CONSOLE PARAMETER
*
         CLC   0(7,GET),=C'CONSOLE'
         BNE   ERRPAR
         SP    WRKCRDCT,WRKCRDCT
         OI    SWITCH,X'80'
         L     GET,WRKCARD
         BAL   P,CLOSE
         TM    WRKIOS,WOP
         BO    WAITWTOR
         LA    B,BALL
         B     NEWWTOR
*
* LOOK FOR PARAMETER ' ERR '
*
ERRPAR   EQU   *
         CLC   0(3,GET),=C'ERR'
         BCR   7,B
         TM    WRKCON,EOF         EOF  REACHED ?
         BO    CARDTEST
         NI    WRKIOS,255-HEX
         OI    WRKIOS,ERR
         B     LISTLAST
*
* HANG UP AN OPERATOR INFORMATION
*
GIVEW    EQU   *
         AP    WRKCRDCT,=P'0'
         BP     GETINP
GIVEWTOR TM    WRKIOS,WOP         IS THE WTOR ALREADY HANGING?
         BO    GETINP             YES
         XC    WRKECB,WRKECB      CLEAR COMPLETION BIT
         LA    U,WRKREPLY         NO,WTOR
         LA    W,WRKECB
         L     1,WRKWTOR
         MVC   WRKREPLY,=CL9' '
         WTOR  ,(U),9,(W),MF=(E,(1))
         OI    WRKIOS,WOP         SET SWITCH FOR HANGING WTOR
         TITLE ' '
*
* READ AND WRITE THE DATA SET.ANALYZE LOGICAL RECORDS LOOKING FOR
* RECORD MARKS (0-2-8).
*
* READ DATA SET
*
GETINP   L     U,WRKDECB          LOAD ADDRESSES FOR READ: DECB
         L     P,WRKINPUT                                  DCB
         L     GET,WRKBUFF                                 AREA
         READ (U),SF,(P),(GET),32760,MF=E
         CHECK (U)
         L     DCBD,WRKINPUT      LOAD INPUT DCB ADDR
         AP    WRKCURR,=P'+1'     INCREASE BLOCK POINTER
         TM    WRKIOS,ERR
         BC    14,LIA
         TM    WRKSWI,RER
         BO    LIA
         B     ALLTEST
LIA      EQU   *
         LH    LRL,DCBLRECL
         CVD   LRL,WRKLRECL
*
* PRINT RECORD HEADERS
*
         L     PUT,WRKOUT
         PUT   (PUT)
         LR    PUT,1
         MVC   0(LB,PUT),HEAD
         ED    1(L'BMASK,PUT),WRKLRECL+5
         ED    L'BMASK+L'BMSG+1(L'BMASK1,PUT),WRKCURR+5
         MVI   LB(PUT),C' '
         MVC   LB+1(133-LB,PUT),LB(PUT)
         TM    WRKSWI,RER
         BZ    HEADOUT
         MVC   102(5,PUT),=C'ERROR'
         NI    WRKSWI,255-RER
         L     1,4(0,13)     LOAD SYSTEM SAVEAREA
         MVI   19(1),X'04'  SET CONDITION CODE=4
HEADOUT  L     PUT,WRKOUT
         PUT   (PUT)
         LR    PUT,1
         MVI   1(PUT),C' '
         MVC   2(131,PUT),1(PUT)
         TM    WRKIOS,HEX+ERR
         BM    HEXOUT
         MVC   0(L'HEADBCD,PUT),HEADBCD
         B     HEAD1OUT
HEXOUT   MVC   0(L'HEADHEX,PUT),HEADHEX
         MVC   86(40,PUT),HEADBCD+1
HEAD1OUT L     PUT,WRKOUT
         PUT   (PUT)
         LR    PUT,1
HEADCLR  MVI   1(PUT),C' '
         MVC   2(131,PUT),1(PUT)
         AP    WRKLINCT,=P'+3'
*
* HEXADECIMAL PRINT
*
CARRIAGE TM    WRKIOS,HEX+ERR
         BZ    RECMRK             NO
         LA    W,40
         B     HEXLEN
*
* EBCDIC PRINT
*
RECMRK   LA    W,100              LOAD MAX LINEWIDE
HEXLEN   CR    LRL,W              IS RECLEN LOWER THAN MAX LINEWIDE
         BNL   DIMIN              NO
         LR    W,LRL              RESET TESTLENGTH
DIMIN    BCTR  W,0                DIMINUISH FOR TRT
         LTR   W,W                IS LRECL ZERO
         BM    OVERP              YES,NEXT BLOCK
*
* OUTPUT: PRINT THE TESTED RECORD
*
         EX    W,MOVE             MOVE RECORD TO OUTPUT BUFFER
         TM    WRKIOS,HEX+ERR
         BZ    OVER
         UNPK  WRKCHAR+00(15),01(8,PUT)
         UNPK  WRKCHAR+14(15),08(8,PUT)
         UNPK  WRKCHAR+28(15),15(8,PUT)
         UNPK  WRKCHAR+42(15),22(8,PUT)
         UNPK  WRKCHAR+56(15),29(8,PUT)
         UNPK  WRKCHAR+70(15),36(8,PUT)
         UNPK  WRKCHAR+84(15),43(8,PUT)
         UNPK  WRKCHAR+98(03),50(2,PUT)
         EX    W,PUTMOVE
         TM    WRKSWI,CHK    IS TABLE FOR UNPRINTABLE CHARS REQU. ?
         BZ    NOCHK         NO, TAKE NORMAL ONE
         EX    W,CHKTR       EXECUTE TRANSLATE INSTR.
         B     ISTRLT        BRANCH AROUND
CHKTR    TR    86(0,PUT),CHKTAB
NOCHK    EQU   *             NORMAL TRANSLATE
         EX    W,TRPUTM
ISTRLT   EQU   *             CHARS ARE NOW TRANSLATED
         LA    1,CCTAB-240
         SLL   W,1
         LA    W,1(0,W)
         EX    W,EXTR
         EX    W,CHARMOVE
         SRL   W,1
OVER     AP    WRKLINCT,=P'+1'
         MVI   0(PUT),X'09'
         CP    WRKLINCT,=PL2'+57'
         BL    OVERP
         MVI   0(PUT),X'89'
         SP    WRKLINCT,WRKLINCT
OVERP    NOP   REGBTXX     SPACE FOR LATER TRANSLATE-STATEMENT
         B     *+6
         DS    CL2        ALSO SPACE FORLATER STATEMENTS
         L     PUT,WRKOUT
         PUT   (PUT)              WRITE LAST BUFFER
         LR    PUT,1              GET A NEW BUFFER
         MVI   0(PUT),X'09'
         MVI   1(PUT),C' '        CLEAR
         MVC   2(131,PUT),1(PUT)    THE NEW BUFFER
         SR    LRL,W              DIMINUISH RECLEN BY MOVED RECLEN
         S     LRL,=F'1'          IS CURRENT RECORD AT END?
         BP    NOTEND             NO
         B     ALLTEST            YES
NOTEND   LA    GET,1(W,GET)       INCREASE RECORD POINTER
         B     CARRIAGE
PUTMOVE  MVC   86(1,PUT),1(PUT)
TRPUTM   TR    86(1,PUT),POINTAB
EXTR     TR    WRKCHAR(1),0(1)
CHARMOVE MVC   1(1,PUT),WRKCHAR
MOVE     MVC   1(1,PUT),0(GET)    MOVE REC WITHOUT CARRIAGE CHAR
*
* A FULL BLOCK IS PRINT.TEST NOW THE FURTHER WORK CONDITIONS.
*
ALLTEST  TM    WRKIOS,ALL         IS THE WHOLE DATA SET TO BE PRINT
         BO    ISW
         AP    WRKAFTER,=P'+1'    COUNT PRINTED BLOCKS
         CLC   WRKAFTER,WRKPRTCT  IS THE NUMBER TO BE PRINT REACHEED?
         BL    ISW
PCT      AP    WRKCRDCT,=P'+0'    PARMCARD TEST
         BZ    WAITWTOR           NO CARDS HAVE BEEN
         TM    WRKECB,X'40'       WAS AN OPERATOR ANSWER?
         BZ    CARDTEST
         NI    WRKIOS,255-WOP     CLEAR HANG-SWITCH FOR WTOR
         OC    WRKREPLY,=CL9' '   CHANGE CHARACTERS TO LETTERS
         LA    GET,WRKREPLY
         B     BALL
WAITWTOR LA    W,WRKECB           WAIT ON OPERATOR'S REPLY,IF NO
         WAIT  1,ECB=(W)          PARAMETERCARDS HAVE BBEN.
         OC    WRKREPLY,=CL9' '   CHANGE CHARACTERS TO LETTERS
         NI    WRKIOS,255-WOP
         LA    GET,WRKREPLY
BALL     EQU   *
         CLI   DDNSYSPR,X'00'
         BE    NOWTOOUT
         MVI   SYSPRBUF,X'40'
         MVC   SYSPRBUF+1(79),SYSPRBUF
         MVC   SYSPRBUF(9),WRKREPLY
         PUT   SYSPRINT,VOR
NOWTOOUT EQU   *
         CLC   0(7,GET),=C'CONSOLE'
         BNE   PRMOK
         BAL   B,ERRWTO
         BAL   B,NEWWTOR
         B     BALL
PRMOK    EQU   *
         BAL   B,LISTPAR
         BAL   P,PARMTEST
         NI    WRKIOS,255-TPC     YES
         BAL   B,ERRWTO
         BAL   B,NEWWTOR          IF ERROR,DO NEW WTOR
         B     BALL               TEST AGAIN
ERRWTO   WTO   'LUBDMP1 INVALID PARAMETER IGNORED',ROUTCDE=2
         CLI   DDNSYSPR,X'00'
         BCR   8,B
         MVI   SYSPRBUF,X'40'
         MVC   SYSPRBUF+1(79),SYSPRBUF
         MVC   SYSPRBUF(33),=C'LUBDMP1 INVALID PARAMETER IGNORED'
         PUT   SYSPRINT,VOR
         BR    B
ISW      EQU   *
         AP    WRKCRDCT,=P'0'
         BP    GETINP
ISWTOR   TM    WRKECB,X'40'       IS WTOR ARRIVED
         BZ    GETINP             NO,PRINT FURTHER
         OC    WRKREPLY,=CL9' '
         NI    WRKIOS,255-WOP-ALL
         B     CARDTEST
*
* WRITE TO OPERATOR WITH WAIT
* OPERATOR'REPLY REMAINS IN THE FIELD 'WRKREPLY',
* LENGTH IS UP TO 9 BYTES.
*
NEWWTOR  EQU   *
         TM    WRKIOS,WOP
         BO    WAITWTOR
         LA    GET,WRKREPLY
         LA    W,WRKECB
         L     1,WRKWTOR
         MVC   0(9,GET),=CL9' '
         XC    WRKECB,WRKECB
         WTOR  ,(GET),9,(W),MF=(E,(1))
         WAIT  1,ECB=(W)
         OC    WRKREPLY,=CL9' '   CHANGE CHARACTERS TO LETTERS
         NI    WRKIOS,255-WOP
         BR    B
*
* END OF TASK.
*
LASTPUT  NI    WRKIOS,255-ALL-HEX-ERR  CLEAR PREVIOUS CONDITIONS
CHANGEX  NOP   REGBTXX
         B     *+6
         DS    CL2
         L     PUT,WRKOUT
         PUT   (PUT)              PRINT LAST LINE FROM DATA SET
         LR    PUT,1
         MVI   LE(PUT),C' '
         MVC   LE+1(133-LE,PUT),LE(PUT)
         UNPK  EHEAD+40(6),WRKCURR
         OI    EHEAD+45,X'F0'
         MVC   0(LE,PUT),EHEAD
         SP    WRKLINCT,WRKLINCT
         L     GET,WRKINPUT
         CLOSE ((GET),LEAVE),TYPE=T
         SP    WRKCURR,WRKCURR
         B     CARDTEST
CLOSEALL EQU   *
         TM    SWITCH,X'80'
         BO    CLSINP
         L     GET,WRKCARD
         BAL   P,CLOSE
CLSINP   EQU   *
         L     GET,WRKINPUT
         CLOSE ((GET),REWIND)
         TM    SWITCH,X'40'    WAS SL-TAPE INPUT?
         BNO   CLSOUT
         LA    R1,40(GET)   YES - RESTORE UCB
         CALL  TIOTSCAN
         LTR   R15,R15
         BNZ   SCOK
         ABEND 999,DUMP
SCOK     EQU   *
         L     R1,16(R15)
         LA    R15,SVCROUT
         SVC   250
CLSOUT   EQU   *
         L     GET,WRKOUT
         BAL   P,CLOSE
         CLI   DDNSYSPR,X'00'
         BE    RETURN1
         LA    GET,SYSPRINT
         BAL   P,CLOSE
RETURN1  EQU   *
         XRETURN 0
CLOSE    CLOSE ((GET))
         BR    P
CARDTEST EQU   *
         AP    WRKCRDCT,=P'0'
         BNZ   GETCARD
         LA    B,BALL
         B     NEWWTOR
         TITLE ' '
*
* PARAMETER TEST:SUBROUTINE FOR BSR,BSM,FSR,FSM.
* EXECUTE THIS COMMANDS.CALL IS 'BAL P,PARMTEST'.
*
         DC    0H'0'
PARMTAB  DC    C'BSR,'
         B     BACKREC
         DC    C'FSR,'
         B     FORWREC
         DC    C'BSM '
         B     BACKTAPE
         DC    C'FSM '
         B     FORWTAPE
         DC    C'FSF,'
         B     FSPACE
         DC    C'BSF,'
         B     BSPACE
PARMEND  EQU   *
LPTAB    EQU   (PARMEND-PARMTAB)/(2*L'PARMTAB)
PARMTEST LA    U,LPTAB            LOAD NR. OF PARMTAB MEMBERS FOR COUNT
         LA    W,PARMTAB
PARMCOMP CLC   0(L'PARMTAB,W),0(GET) REG.GET CONTAINS PARM-AREA
         BNE   PARMINCR
         OI    WRKIOS,TPC         SET SWITCH FOR VARIABLE BRANCH
         EX    0,L'PARMTAB(0,W)   EXECUTE A BRANCH INSTRUCTION
PARMINCR LA    W,2*L'PARMTAB(0,W) INCREASE ADDR. FOR TABLE LOOK UP
         BCT   U,PARMCOMP
         BR    P                  RETURN
*
* EXECUTE THE COMMANDS FROM PARAMETERS.
*
FSPACE   EQU   *
         MVC   WRKTEMP1,4(GET)
         BAL   W,CONVERT
         LTR   U,U
         BCR   8,P
         TM    WRKIOS,TAP
         BO    FSPOKX
TST7     EQU   *
         CLI   DDNSYSPR,X'00'
         BNE   NOABEND7
         WTO   'LUBDMP5 INVALID PARAMETER FOR DISK-INPUT. USE SYSPRINT *
               TO GET DETAILED INFORMATION',ROUTCDE=11
         ABEND 222
NOABEND7 EQU   *
         MVI   SYSPRBUF,X'40'
         MVC   SYSPRBUF+1(79),SYSPRBUF
         MVC   SYSPRBUF(59),=C'LUBDMP5 PREVIOUS PARAMETER INVALID FOR D*
               ISK FILES - IGNORED'
         PUT   SYSPRINT,VOR
         AP    WRKCRDCT,=P'0'
         BNZ   GETCARD
         WTO   'LUBDMP5 PREVIOUS PARAMETER INVALID FOR DISK FILES - IGN*
               ORED',ROUTCDE=2
         LA    B,BALL
         B     NEWWTOR
FSPOKX   EQU   *
         SP    WRKCURR,WRKCURR
         MVI   WRKCONT,X'00'
         NI    WRKIOS,255-TPC
         TM    SWITCH,X'40'
         BNO   FSFOK
         MH    U,=H'3'
FSFOK    EQU   *
         AH    U,JFCB+68
         STH   U,JFCB+68
         B     REREAD
BSPACE   EQU   *
         MVC   WRKTEMP1,4(GET)
         BAL   W,CONVERT
         LTR   U,U
         BCR   8,P
         TM    WRKIOS,TAP
         BNO   TST7
         SP    WRKCURR,WRKCURR
         MVI   WRKCONT,X'00'
         NI    WRKIOS,255-TPC
         TM    SWITCH,X'40'
         BNO   BSFOK1
         MH    U,=H'3'
BSFOK1   EQU   *
         LH    R15,JFCB+68
         SR    R15,U
         LR    U,R15
         LTR   U,U
         BP    BSFOK
         LA    U,1
         TM    SWITCH,X'40'
         BNO   BSFOK
         LA    U,2
BSFOK    EQU   *
         STH   U,JFCB+68
         B     REREAD
* BACKSPACE RECORD WITH COUNT
BACKREC  MVC   WRKTEMP1,4(GET)    MOVE COUNT TO A WORKAREA
         BAL   W,CONVERT          CONVERT THE COUNT TO BINARY
         LTR   U,U                TEST COUNT
         BCR   8,P                RETURN ON ZERO
         L     GET,WRKINPUT       GET INPUT DCB ADDR.
         TM    WRKIOS,TAP
         BO    TAPE1
         NI    WRKCON,255-EOF
         OI    WRKCON,BSR         SET  SWITCH FOR CONTDISK
         BAL   14,CALLUP
         B     TAPE11
TAPE1    EQU   *
         CNTRL (GET),BSR,(U)      BACKSPACE RECORDS
TAPE11   LTR   15,15              FSR O.K.?
         BZ    BACKCNT            ZERO=YES,NONZERO=ENCOUNTERED TAPEMARK
         SP    WRKCURR,WRKCURR    SET CURRENT BLOCK COUNT TO ZERO
         B     CARDTEST
BACKCNT  SP    WRKCURR,WRKTEMPD   DIMINUISH CURRENT BLOCK COUNT BY BSRS
         B     CARDTEST
* FORWARD SPACE RECORD WITH COUNT
FORWREC  MVC   WRKTEMP1,4(GET)
         BAL   W,CONVERT
         LTR   U,U
         BZ    CARDTEST
         L     GET,WRKINPUT
         TM    WRKIOS,TAP
         BO    TAPE2
         TM    WRKCON,EOF         EOF  REACHED ?
         BZ    *+8
         B     CARDTEST
         OI    WRKCON,FSR         SET  SWITCH FOR CONTDISK
         BAL   14,CALLUP
         B     TAPE22
TAPE2    EQU   *
         CNTRL (GET),FSR,(U)      FORWARD SPACE RECORDS
TAPE22   LTR   15,15
         BZ    FORWCNT
         CVD   15,WRKPRTCT        CONVERT REMAINING FSRS TO DECIMAL
         SP    WRKTEMPD,WRKPRTCT  HOLD PROCESSED FSRS
FORWCNT  AP    WRKCURR,WRKTEMPD   INCREASE CURRENT BLOCK COUNTER
         B     CARDTEST
* BACKSPACE MAGNETIC TAPE UP TO BUT NO OVER FIRST TAPEMARK
BACKTAPE L     GET,WRKINPUT       LOAD INPUT DCB ADDR.
         TM    WRKIOS,TAP
         BO    TAPE3
         NI    WRKCON,255-EOF
         OI    WRKCON,BSM         SET  SWITCH FOR CONTDISK
         BAL   14,CALLUP
         B     TAPE33
TAPE3    EQU   *
         CNTRL (GET),BSM
TAPE33   SP    WRKCURR,WRKCURR    CLEAR CURRENT BLOCK POINTER
         B     CARDTEST
* FORWARD SPACE MAGNETIC TAPE UP TO BUT NOT OVER NEXT TAPEMARK
FORWTAPE L     GET,WRKINPUT       LOAD INPUT DCB ADDR.
         TM    WRKIOS,TAP
         BO    TAPE4
         TM    WRKCON,EOF         EOF  REACHED ?
         BZ    *+8
         B     CARDTEST
         OI    WRKCON,FSM         SET  SWITCH FOR CONTDISK
         BAL   14,CALLUP
         B     TAPE44
TAPE4    EQU   *
FORWCONT LA    U,4095(0,0)        LOAD A FSR COUNT
         CNTRL (GET),FSR,(U)
TAPE44   AP    WRKCURR,=P'+4095'  INCREASE CURRENT BLOCK POINTER
         LTR   15,15              ALL FSRS VALID?
         BZ    FORWCONT           YES
         CVD   15,WRKTEMPD        CONVERT REMAINING FSRS
         SP    WRKCURR,WRKTEMPD   DIMINUISH CURRENT BLOCK POINTER
         B     CARDTEST
*
*              SUBROUTINE TO CONVERT THE COUNT OF TAPE CONTROL COMMANDS
*              OR LIST INFORMATIONS LIKE FSR,BSR,PRT OR LST.
*              THE COUNT MUST BE MOVED TO 'WRKTEMP1'.
*              CALL IS 'BAL WRK,CONVERT'.
*              CONVERTED COUNT IS RETURNED IN REG.'USE',MODE IS BINARY.
*
CONVERT  CLI   WRKTEMP1+4,X'EF'   ARE NUMBERS IN THE COUNT?
         BH    CONPACK            YES
         CLI   WRKTEMP1+4,C' '    IS BLANK IN THE COUNT?
         BE    CONMOVE            YES
         CLI   DDNSYSPR,X'00'
         BNE   NOABEND6
         WTO   'LUBDMP3 INVALID NUMERICS IN PARAMETER. USE SYSPRINT TO *
               GET DETAILED INFORMATION',ROUTCDE=11
         ABEND 666
NOABEND6 EQU   *
         MVI   SYSPRBUF,X'40'
         MVC   SYSPRBUF+1(79),SYSPRBUF
         MVC   SYSPRBUF(44),=C'LUBDMP3 INVALID NUMERICS - PARAMETER IGN*
               ORED'
         PUT   SYSPRINT,VOR
         AP    WRKCRDCT,=P'0'
         BNZ   GETCARD
         WTO   'LUBDMP3 INVALID NUMERICS - PARAMETER IGNORED',         *
               ROUTCDE=2
         LA    B,BALL
         B     NEWWTOR
CONMOVE  MVC   WRKTEMP2,WRKTEMP1  ALIGN UP TO 5 NUMBERS TO RIGHT
         MVC   WRKTEMP1+1(L'WRKTEMP2),WRKTEMP2
         MVI   WRKTEMP1,C'0'      FILL FREE FIELD WITH ZERO
         B     CONVERT
CONPACK  PACK  WRKTEMPD,WRKTEMP1
         CVB   U,WRKTEMPD         CONVERT COUNT TO BINARY
         BR    W                  RETURN
*
* SYNAD ROUTINE
*
SYNADR   ST    1,WRKTEMPD         GET ERROR BITS (0-7 OF REG 1)
         TM    WRKTEMPD,X'20'     CONTROL ERROR
         BNO   DATAERR
CTLRERR  EQU   *
         WTO   'LUBDMP9 ERROR IN CNTRL-ROUTINE. CALL SYSTEM-PROGRAMMER'*
               ,ROUTCDE=11
         ABEND 333,DUMP
DATAERR  OI    WRKSWI,RER
         TM    WRKTEMPD,X'90'     READ ERROR,BLOCK IS IN CORE
         BCR   1,14               ACCEPT
         TM    WRKTEMPD,X'80'     READ ERROR,BLOCK IS OUT OF CORE
         BCR   1,14
         WTO   'LUBDMP8 I/O-ERROR ON INPUT-FILE',ROUTCDE=11
         ABEND 111,DUMP           REST: DUMP TOO
*
* OPEN EXIT ROUTINE TO CHANGE DCB (DEN AND TRTCH)
*
*
* OPEN EXIT ROUTINE FOR OUTPUT
*        TO CHANGE BLKSIZE,IF NO PRINTER IS REQUIRED
*
OUTEXL   TM    17(1),X'40'   DEVICE TYPE,X'40'IS USED BY 1403,1404,1443
         BO    OUTPR
         MVC   DCBBLKSI,H665
         BR    14
OUTPR    MVI   DCBBUFNO,X'05'    BUFNO=5
         OI    DCBOPTCD,X'40'    OPTCD=C CHAINED SCHEDULING WITH PCI
         BR    14
CALLUP   LA    1,LISTADD
         L     15,=V(CONTDISK)
         BR    15
H665     DC    H'3059'       3458=26*LRECL(133)
*
*              ROUTINE TO GET MAIN FOR TRANSLATETABLE
*
REGBTXX  DS    F     WORD TO SAVE TRANSLATEAREAADR
TRTAMAIN EQU   *
         GETMAIN R,LV=256   GET MAINSTORAGE FOR TRANSLATETABLE
         SR    2,2   CLEAR REGISTER
LOOP     EQU   *
         STC   2,0(2,1)  MOVE CHARACTER TRANSLATETABLE
         LA    2,1(2)     INCREASE REG 2
         C     2,=F'256'   ISIS MAX REACHED?
         BL    LOOP    NO
         ST    1,REGBTXX  YES, SAVE ADR OF TRANSLATETABLE
         MVI   X'C0'(1),X'4E'   TRANSLATECHAR FOR  +
         MVI   X'D0'(1),X'60'   TRANSLATECHAR FOR  -
         MVI   X'E0'(1),X'5C'   TRANSLATECHAR FOR  *
         BR    14      RETURN
SVCROUT  EQU   *
         OI    3(R1),X'01'
         BR    R14
SVCROUT2 EQU   *
         NI    3(R1),X'FE'
         BR    R14
*
* DATA CONTROL BLOCKS.
* MUST BE IN THIS QUEUE:CARD,INPUT,OUTPUT
*
CARD     DCB   DDNAME=SYSIN,                                           *
               DSORG=PS,                                               *
               EODAD=CLOSEALL,                                         *
               EROPT=ACC,                                              *
               MACRF=(GL)
INPUT    DCB   DDNAME=LUDMPINP,                                        *
               DSORG=PS,                                               *
               EXLST=OPEXLST,                                          *
               EODAD=LASTPUT,                                          *
               MACRF=(RC),                                             *
               SYNAD=SYNADR,RECFM=U,BLKSIZE=32760
OUTPUT   DCB   DDNAME=LUDMPOUT,                                        *
               EXLST=OUTEXLST,                                         ,
               BFTEK=S,                                                *
               BLKSIZE=133,                                            *
               RECFM=FBSM,                                             *
               DSORG=PS,                                               *
               EROPT=ACC,                                              *
               LRECL=133,                                              *
               MACRF=(PL)
ENDDCB   READ  DECB,SF,MF=L       READ LIST-FORM
LWTOR    WTOR  'LUBDMP2 READY FOR COMMUNICATION,        ,        ',    *
               MF=L,ROUTCDE=2
LISTEND  EQU   *
*
* DEFINITIONS AND TABLES.
*
OPEXLST  DS    0D
         DC    X'87'
         DC    AL3(JFCB)
JFCB     DC    XL176'00'
OUTEXLST DC    X'05'
         DC    AL3(OUTEXL)
         DC    X'87'
         DC    AL3(OUTJFCB)
OUTJFCB  DS    CL176
EXCLOR   XC    0(1,1),0(1)        CLEAR WCB WITH HEX-00
DDNINP   DC    CL8'LUDMPINP'
DDNOUT   DC    CL8'LUDMPOUT'
DDNSYSPR DC    CL8'SYSPRINT'
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),LRECL=81,           *
               RECFM=FBSA,BLKSIZE=810
VOR      DC    C'1'
SYSPRBUF DC    CL80'LUBDUMP - CONTROL-CARDS AND ERROR MESSAGES'
SWITCH   DC    X'00'
CCTAB    DC    C'0123456789ABCDEF'
HEAD     DC    X'09'
BMASK    DC    X'40202020212040'
BMSG     DC    C'ZEICHEN, REC'
BMASK1   DC    X'4020202021205C5C'
BMSG1    DC    CL16' '
LB       EQU   L'BMASK+L'BMSG+L'BMASK1+L'BMSG1+L'HEAD
HEADBCD  DS    0CL101
         DC    X'09'
         DC    C'....*..010'
         DC    C'....*..020'
         DC    C'....*..030'
         DC    C'....*..040'
         DC    C'....*..050'
         DC    C'....*..060'
         DC    C'....*..070'
         DC    C'....*..080'
         DC    C'....*..090'
         DC    C'....*..100'
HEADHEX  DS    0CL81
         DC    X'09'
         DC    C' . . . . 5'
         DC    C' . . . .10'
         DC    C' . . . .15'
         DC    C' . . . .20'
         DC    C' . . . .25'
         DC    C' . . . .30'
         DC    C' . . . .35'
         DC    C' . . . .40'
EHEAD    DC    X'89'
         DC    C'LUBDMP4 EOF ENCOUNTERED ON INPUT-FILE. 123456 BLOCKS H*
               AVE BEEN PROCESSED'
LE       EQU   *-EHEAD
POINTAB  DUMPTAB UNPRINT=.
CHKTAB   DUMPTAB
         LTORG
*
* BIT SWITCHES FOR WORK INFORMATIONS
* BYTE 'WRKIOS' CONTAINS BITS FOR INPUT/OUTPUT INFORMATION.
*
ALL      EQU   1   PRINT THE WHOLE DATA SET
TAP      EQU   2   INPUT DATA SET IS ON TAPE
HEX      EQU   4   HEXADECIMAL PRINT
TPC      EQU   8   PARAMETER COMMAND IS A TAPE CONTROL
ERR      EQU   16  PARAMETER 'ERR' IS GOT
WOP      EQU   32  WTOR IS HANGING UP
OPN      EQU   64  REPEPAT OPEN FOR INPUT DATA SET
OPE      EQU   128 END OF OPEN REPEAT,SEE OPN.
*
* BYTE 'WRKSWI'
*
RER      EQU   1   READ ERROR
AGI      EQU   2   OPEN AGAIN
FSR      EQU   0
BSR      EQU   4
FSM      EQU   8
BSM      EQU   12
EOF      EQU   64
*
CONTDISK CSECT
*** THIS  PROGRAM  GIVES THE POSSIBILITY TO USE THE TAP-CONTROL-
*** PARAMETERS  FSR,BSR,FSM,BSM  FOR DISK-FILES.
*** AN ADDRESS-LIST IS EXPECTED OF THE FOLLOWING FORM :
***    DCB,WRKCURR,SWITCH,COUNT,DECB,BUFFER
***   REGISTER  ASSIGNMENT :
CURR3    EQU   3
SWIR4    EQU   4
WORK5    EQU   5
WORK6    EQU   6
LOOP7    EQU   7
SAVE8    EQU   8
DCB10    EQU   10
BRAN11   EQU   11
         XSAVE 2,,CONTDISK
         L     DCB10,0(1)          DCB
         L     CURR3,4(1)          CURR-COUNT
         L     SWIR4,8(1)          SWITCH
         SR    WORK5,WORK5         CLEAR REG
         IC    WORK5,0(SWIR4)      INSERT SWITCH
         LA    WORK6,EOFZ    NEW    EOF
         L     BRAN11,32(DCB10)    SAVE OLD EOF
         ST    WORK6,32(DCB10)     INSERT NEW EOF IN DCB
         L     WORK6,12(1)         COUNT
         L     LOOP7,16(1)         DECB
         L     SAVE8,20(1)         BUFFER
         IC    0,DCBIOBL     SAVE IOB LENGTH
         L     12,DCBSYNAD   SAVE SYNAD ADR
         LA    1,SYNADZ      GET NEW SYNAD
         ST    1,DCBSYNAD    AND STORE IT
         STC   0,DCBIOBL     RESET IOB LENGTH
         B     *+4(WORK5)          BRANCH TO REQUESTED ROUTINE
         B     FSRZ
         B     BSRZ
         B     FSMZ
         B     BSMZ
RETURN   ST    BRAN11,32(DCB10)    RESTORE OLD EOF
         ST    12,DCBSYNAD   RESTORE OLD SYNAD
         NI    SWITCHX+1,X'0F'      RESET -
         NI    0(SWIR4),243        SWITCHES
         NI    SWIFSR+1,X'0F'     RESET  SWITCH FROM BC 15 TO NOP
         XRETURN (15),R            RETURN WITCH CODE IN  REG15
FSMZ     EQU   *
         SP    DOUBLE,DOUBLE
         READ  (LOOP7),SF,(DCB10),(SAVE8),32760,MF=E
         CHECK (LOOP7)
         LA    15,0               CLEAR  REG15
         AP    DOUBLE,=P'+1'      INCREASE COUNTER BY ONE
         B     FSMZ+6              BRANCH RETURN UNTIL EOF
EOFZ     EQU   *
         OI    0(SWIR4),EOF       SET SWITCH FOR  EOF
SWIFSR   NOP   FFSR               CALL-SWITCH
         LA    15,4095            LUBDUMP-
         CVB   WORK6,DOUBLE       REQUIREMENTS
         SR    15,WORK6
         BNZ   RETURN             REG15  MUST NOT
         LA    15,1               BE  ZERO
         B     RETURN
FFSR     CVB   15,DOUBLE          EOF  DURING
         NI    SWIFSR+1,X'0F'     FSR
         B     RETURN
BSRZ     EQU   *
         MVC   DOUBLE,0(CURR3)    CURRENT COUNT
CLOSEZ   CLOSE ((DCB10),REREAD)   CLOSE THE FILE
         OPEN  ((DCB10))          OPEN ,POSITION ON REC 1
         LA    15,0               CLEAR REG15
SWITCHX  NOP   RETURN             SWITCH FOR CALL FROM BSM
         SP    DOUBLE,0(8,WORK6)  COMPUTE NO. OF RECORDS TO FSR'ED
         BP    FSRZ+6              GREATER ZERO, BRANCH
         LA    15,4               ZERO, READY
         B     RETURN
BSMZ     EQU   *
         OI    SWITCHX+1,X'F0'     SET  CALL-SWITCH  -> BC  15
         B     CLOSEZ
FSRZ     EQU   *
         MVC   DOUBLE,0(WORK6)    NUMBER OF RECORDS TO FSR'ED
         OI    SWIFSR+1,X'F0'     SET  CALL-SWITCH ->  BC  15
         READ  (LOOP7),SF,(DCB10),(SAVE8),32760,MF=E
         CHECK (LOOP7)
         LA    15,0               CLEAR REG15
         SP    DOUBLE,=P'+1'      DECREASE COUNT BY ONE
         BP    FSRZ+10             BRANCH TO NEXT READ IF COUNT > 0
         B     RETURN             ALL RECORDS FSR'ED
SYNADZ   DS    0H
         ST    1,WRKTEMPD
         OI    WRKSWI,RER
         TM    WRKTEMPD,X'90' BLOCK IN CORE ?
         BCR   1,14          ACCEPT
         TM    WRKTEMPD,X'80' OUT OF CORE
         BCR   1,14          ACCEPT TOO
         L    1,WRKINPUT
         TM    44(1),X'C0'   IS ERROR PERMANENT
         WTO   'LUBDMP8 I/O-ERROR ON INPUT-FILE',ROUTCDE=11
         ABEND 111,DUMP
         DS    0D
DOUBLE   DC    PL8'0'             WORKFIELD
         LTORG
* DUMMY SECTION FOR A WORK CONTROL BLOCK,REQUIRED FOR
* REENTERABILITY OF THE PROGRAM.
* IT CONTAINS ALL DCBS,THE SWITCH BYTES,THE COUNTERS ETC.
*
WRKCB    DSECT
WRKBLKSI DS    D     MAX BLOCKSIZE OF INPUT DATA SET
WRKPRTCT DS    D     BLOCKNR FROM PARMCOMMAND TO BE PRINT
WRKAFTER DS    D     BLOCKS EVEN PRINTED
WRKCURR  DS    D     DATA SET POINTER NOTED AS CURRENT BLOCK COUNT
WRKTEMPD DS    D     TEMPORARY STORAGE AREA
WRKLRECL DS    D     CURRENT RECORD LENGTH
LISTADD  DC    6F'0'
WRKCARD  DS    F     ADDRESS OF CARD-DCB
WRKINPUT DS    F                INPUT-DCB
WRKOUT   DS    F                OUTPUT-DCB
WRKWTOR  DS    F                WTOR-LIST
WRKDECB  DS    F                INPUT-DECB
WRKBUFF  DS    F                INPUT-BUFFER
WRKECB   DS    F     WTOR EVENT CONTROL BLOCK
WRKIOS   DS    CL1   SWITCH BYTE
WRKCON   DC    X'00'
WRKSWI   DS    CL1   SWITCH BYTE
WRKCRDCT DS    CL2   PARAMETER CARD COUNT
WRKTEMP1 DS    CL5   TEMPORARY PLACE
WRKTEMP2 DS    CL4   TEMPORARY AREA
WRKLINCT DS    CL2   LINE COUNT
WRKCONT  DS    CL1   COUNT FOR OPEN EXIT ROUTINE
WRKCHAR  DS    CL101 TEMPORARY STORAGE AREA FOR HEX
WRKREPLY DS    CL9   REPLY AREA FOR WTOR
WRKDCBS  DS    D     START POINT FOR THE I/O-DCBS
         DCBD  DSORG=(PS),DEVD=(PR,TA)
         END   LUBDUMP
