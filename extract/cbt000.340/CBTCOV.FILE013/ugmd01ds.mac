TPSC  TITLE 'TAPESCAN - READS ALL DSNAMES FROM ANY STANDARD LABEL TAPE'
*----------------------------------------------------------------------
*
*                          T A P E S C A N
*
* FUNCTION/OPERATION:
*        A) FOR STANDARD LABEL TAPES (SL)
*        TAPESCAN READS THE LABELS OF A 9-TRACK STANDARD LABEL MAGNETIC
*        TAPE UNTIL TWO CONSECUTIVE TAPEMARKS ARE FOUND BEHIND
*        A TRAILER LABEL. LABEL INFORMATION IS FORMATED AND LISTED,
*        ONE FILE PER LINE. ALL I/O IS DONE VIA EXCP, DATA-PART OF
*        FILES IS SKIPED ISSUING A FSF COMMAND.
*
*        B) FOR NL TAPES.
*        FOR NO-LABEL TAPES TAPESCAN COUNTS THE NUMBER OF FILES
*        UP TO TWO CONSECUTIVE TAPEMARKS.
*
*        COMMON:
*        TAPES ARE READ USING BLP. THE JFCB IS SWITCHED TO BLP SO
*        IN VS SYSTEMS TAPESCAN HAS TO BE LINKED WITH AC=1 INTO
*        AN AUTHORIZED LIBRARY.
*        THE JFCB IS ALSO USED TO CHECK VOLUME LABEL INFORMATION FOR
*        SL TAPES. IF THE VOLUME LABEL OF THE TAPE DOESN'T MATCH THE
*        LABEL INFORMATION OF THE JFCB (OBTAINED VIA THE TAPE-DD CARD)
*        THE OPERATOR IS ASKED TO REPLY TO MESSAGE 'TSC001'
*           'U' TO USE THE MOUNTED TAPE
*           'M' TO MOUNT ANOTHER TAPE
*           'C' TO CANCEL THE JOBSTEP
*        IN CASE OF THE REPLY 'M'  A MESSAGE IS ROUTED TO THE
*        TAPECONSOLE 'TSC011' (ROUTCODE 5,6) TO MOUNT A NEW TAPE'
*        MOST ERRORS LEAD TO AN ABEND USER1, WHICH IS ACCOMPANIED BY
*        AN INFORMATION ABOUT WHICH OPERATION FAILED.
*
*
* ENTRY POINTS:  TAPESCAN
*
*
* INPUT:  NONE
*
*
* OUTPUT:  NONE
*
*
* DD-STATEMENTS:  TAPE     DEFINES THE TAPE TO BE SCANNED, SHOULD
*                          CONTAIN ONLY 'UNIT=TAPE,VOL=SER=...'.
*
*                 SYSPRINT DEFINES THE OUTPUT DATA SET
*                          DCB=(RECFM=FBA,LRECL=121,BLKSIZE=3146)
*                          IS PROVIDED BY PROGRAM
*
* EXIT-NORMAL:  RETURN VIA REGISTERS 14
*
*
* EXIT-ERROR:  ABEND
*
*
* RETURN CODES:  NONE
*
* ABEND CODES:   1 = ALL ERRORS
*
*
* EXTERNAL ROUTINES:  NONE
*
*
* TABLES/WORK AREAS:  USES:
*        DCB, IOB, ECB, JFCB.
*
*
* ATTRIBUTES:  REUSABLE, NOT REENTERABLE; OUTPUT USES QSAM, INPUT USES
*        EXCP.
*
*
* RESTRICTIONS:  SHOULD BE LINKED WITH AC=1 IN VS SYSTEMS.
*
*
* RELATED PGMS:  TAPECOPY, TAPESKIM
*
*
* STORAGE:  TOTAL  < 40K
*
* STATUS:  CHANGE LEVEL 0.0, 03FEB71
*                       1.1, 15NOV74     H.KNOBLOCH
*                            COMPARE MOUNTED VOL-SER-# WITH
*                                   REQUIRED VOL-SER-# FOUND IN JFCB.
*                       1.2   12FEB76    B.SCHEID
*                            COUNTING FILES FOR NSL-TAPES
*                       1.3   27JUL76    BLASIUS/SCHEID
*                            READ LENGTH CHANGED TO AVOID ABEND
*                            WRITE TIME AND DATE
*                       1.4   25JAN77    SCHEID
*                            CORRECT CANCEL AND MOUNT PASSUS
*
* NOTES:  NONE
*
*
* AUTHOR:  VOLKER BLASIUS
*----------------------------------------------------------------------
         EJECT
         SPACE 5
         MACRO
&LABEL   BMCLAM
.*             COPYRIGHT GMD-I6 1970,1973
.*                                                         11MAR70-PAHL
.*  LOAD REGISTER &SYSLIST(&K-1) WITH &SYSLIST(&K)         12JUN72-PAHL
.*
.*  &SYSLIST(&K-1) : ABS.EXPR<16   REGISTER TO BE LOADED
.*  &SYSLIST(&K)   : RX-ADDR×(REG)×<RX-ADDR>   ADDR/VALUE TO BE LOADED
.*                   INTO REGISTER &SYSLIST(&K-1)
.*
         LCLA  &K
         LCLC  &C1,&C2
         AIF   ('&LABEL' EQ '').LOOP
&LABEL   DC    0H'0'
.LOOP    AIF   (&K GE N'&SYSLIST).MEND
&K       SETA  &K+2
         AIF   ('&SYSLIST(&K)' EQ '').LOOP
         AIF   ('&SYSLIST(&K)'(1,1) EQ '(').LR
         AIF   ('&SYSLIST(&K)'(1,1) EQ '<').L
.*  &SYSLIST(&K) = RX-ADDR
         AIF   ('&SYSLIST(&K)' EQ '0').LA0
         LA    &SYSLIST(&K-1),&SYSLIST(&K)
         AGO   .LOOP
.LA0     SR    &SYSLIST(&K-1),&SYSLIST(&K-1)
         AGO   .LOOP
.*  &SYSLIST(&K) = (REG)
.LR      AIF   ('&SYSLIST(&K,1)' EQ '&SYSLIST(&K-1,1)').LOOP
         LR    &SYSLIST(&K-1),&SYSLIST(&K,1)
         AGO   .LOOP
.*  &SYSLIST(&K) = <RX-ADDR>
.L       AIF   (K'&SYSLIST(&K) GT 10).LTWO
&C1      SETC  '&SYSLIST(&K)'(2,K'&SYSLIST(&K)-2)
&C2      SETC  ''
         AGO   .LOAD
.LTWO    ANOP
&C1      SETC  '&SYSLIST(&K)'(2,8)
&C2      SETC  '&SYSLIST(&K)'(10,K'&SYSLIST(&K)-10)
.LOAD    ANOP
         L     &SYSLIST(&K-1),&C1&C2
         AGO   .LOOP
.MEND    MEND
         SPACE 5
         MACRO
&LABEL   EDITDATE &LENCODE,&TIME=,&DATE=,&FIELD=,&TEMP8=TEMP8
.*             COPYRIGHT GMD-I6 1971,1973
.*                                                         18JAN71-PAHL
.*  EDIT TIME/DATE INTO PRINTABLE FORMAT                   21JUL72-PAHL
.*
.*  &LENCODE: "LONG"×"SHORT"  SHORT FORMAT CONTAINS NO EXTRA TEXT
.*            LONG IS DEFAULT.
.*  &TIME   : (0)×(REG2-12)×<RX-ADDR>   TIME IN (NEARLY)PACKED DECIMAL:
.*            REGISTER OR FULLWORD CONTAINING 'HHMMSSTH'
.*  &DATE   : (1)×(REG2-12)×<RX-ADDR>   DATE IN PACKED DECIMAL:
.*            REGISTER OF FULLWORD CONTAINING '00YYDDDF'
.*  &FIELD  : RX-ADDR×<RX-ADDR>×(REG2-12)   OUTPUT AREA ADDR; REQUIRED
.*            LENGTH DEPENDS ON FORMAT, SEE BELOW.
.*  &TEMP8  : SYMBOL   CONVERSION AREA OF 1 DOUBLE-WORD
.*
.*
.* &LENCODE,...        'OUTPUT IMAGE':            OUTPUT LENGTH/BYTES:
.*
.* SHORT,TIME          ' HH:MM:SS.TH'                    12
.* LONG,TIME           ' TIME HH:MM:SS.TH'               17
.* SHORT,DATE          ' DDMMMYY'                         8
.* LONG,DATE           ' DATE DDMMMYY'                   13
.* SHORT,TIME+DATE     ' HH:MM:SS/DDMMMYY'               17
.* LONG,TIME+DATE      ' TIME HH:MM:SS   DATE DDMMMYY'   29
.*
.*       EDITDATE DESTROYS THE CONTENTS OF REGS 14-1.
.*       AFTER EXECUTION:
.*       REG 1 CONTAINS THE ADDRESS OF THE GIVEN OUTPUT AREA.
.*
         LCLA  &PATLEN,&PATOFF,&BOFF,&TEMPOFF
         LCLB  &SHORT
         LCLC  &CTIME,&CDATE
.*
         AIF   ('&TIME&DATE' EQ '').YNOP
         AIF   ('&LENCODE' EQ '').FIELD
&SHORT   SETB  ('&LENCODE'(1,1) EQ 'S')
         AIF   (NOT &SHORT AND '&LENCODE'(1,1) NE 'L').E2
.FIELD   AIF   ('&FIELD' EQ '' OR '&FIELD' EQ '(1)').EFIELD
         AIF   ('&TEMP8'  EQ '').ETEMP
         AIF   ('&TEMP8'(K'&TEMP8,1) EQ ')').ETEMP
.*
         AIF   ('&DATE' EQ '').TIME
         AIF   ('&TIME' EQ '').DATE
.*
.*   TIME AND DATE
.*
&PATLEN  SETA  17
&CDATE   SETC  '/'
         AIF   (&SHORT).TD1
&PATLEN  SETA  29
&PATOFF  SETA  5
&CTIME   SETC  'TIME '
&CDATE   SETC  '   DATE '
.TD1     MNOTE *,'LENGTH &PATLEN, GENERATED PATTERN IS '' &CTIME.HH:MM:-
               SS&CDATE.DDMMMYY'''
         AGO   .BRANCH
.*
.*   DATE ONLY
.*
.DATE    ANOP
&TEMPOFF SETA  3                       TO MODIFY 'ED' INSTR PROPERLY
&PATLEN  SETA  8
&CDATE   SETC  ' '
         AIF   (&SHORT).DATE1
&PATLEN  SETA  13
&PATOFF  SETA  5
&CDATE   SETC  ' DATE '
.DATE1   MNOTE *,'LENGTH &PATLEN, GENERATED PATTERN IS ''&CDATE.DDMMMYY-
               '''
.*
.BRANCH  ANOP
&BOFF    SETA  52+(&PATLEN+1)/2*2
         B     *+&BOFF                 BRANCH AROUND CONSTANTS
BMC&SYSNDX DC  FL1'31,28,31,30,31,30,31,31,30,31,30,31'
         DC    C'JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'
         AIF   ('&TIME' EQ '').DCDATE
         DC    C' &CTIME',X'21207A20207A2020'
.DCDATE  DC    C'&CDATE',X'21204020202020'
.*
.*   MAIN PART - GENERATE CODE FOR DATE CONVERION
.*
&LABEL   BMCLAM 0,&TIME,1,&DATE
         XC    &TEMP8.(6),&TEMP8
         STH   1,&TEMP8+6
         CVB   15,&TEMP8               CONVERT DAY OF YEAR INTO BINARY
         STM   0,1,&TEMP8              0=HHMMSSTH,1=00YYDDDF
         SR    1,1
         SR    14,14                   COUNTS THE MONTHS
         IC    1,BMC&SYSNDX.(14)       DAYS OF A MONTH
         BCT   14,*+24
         TM    &TEMP8+5,X'01'          TEST YEAR
         BO    *+16                    IF ODD NO LEAP YEAR
         TM    &TEMP8+5,X'12'
         BM    *+8                     IF MIXED NO LEAP YEAR
         LA    1,1(,1)                 UPDATE FEBRUARY
         LA    14,2(,14)
         SR    15,1                    THE RIGHT MONTH IS FOUND IF (15)
         BP    *-34                    LE 0, ELSE KEEP ON LOOKING.
         AR    15,1                    GET DAY OF THAT MONTH.
         LM    0,1,&TEMP8              SAVE CONTENTS,
         CVD   15,&TEMP8               CONVERT DAY TO DECIMAL,
         ST    0,&TEMP8                RESTORE LEFT HALF,
         MVO   &TEMP8+3(2),&TEMP8+6(2)   AND PUT DAY INTO RIGHT PLACE.
         ST    1,&TEMP8+4              RESTORE RIGHT HALF.
         BMCLA  1,&FIELD
         MVC   0(&PATLEN,1),BMC&SYSNDX+48 MOVE PATTERN INTO OUTPUT
         ED    &PATOFF.(&PATLEN-&PATOFF,1),&TEMP8+&TEMPOFF AND EDIT.
         AIF   ('&TIME' NE '').MONTH
         OI    &PATOFF+1(1),C'0'
.MONTH   LA    15,0(14,14)              (14): MONTH NUMBER 1-12
         ALR   14,15                    (14)=3*(14)
         LA    14,BMC&SYSNDX+12-3(14)
&PATOFF  SETA  &PATLEN-5
         MVC   &PATOFF.(3,1),0(14)     INSERT NAME OF MONTH.
         SPACE
         MEXIT
.*
.*   TIME ONLY
.*
.TIME    ANOP
&PATLEN  SETA  12
         AIF   (&SHORT).TIME1
&PATLEN  SETA  17
&PATOFF  SETA  5
&CTIME   SETC  'TIME '
.TIME1   MNOTE *,'LENGTH &PATLEN, GENERATED PATTERN IS '' &CTIME.HH:MM:-
               SS.TH'''
&BOFF    SETA  4+(&PATLEN+1)/2*2
         B     *+&BOFF                 BRANCH AROUND CONSTANT
BMC&SYSNDX DC  C' &CTIME',X'21207A20207A20204B2020'
&LABEL   BMCLA 0,&TIME
         ST    0,&TEMP8
         BMCLA  1,&FIELD
         MVC   0(&PATLEN,1),BMC&SYSNDX MOVE PATTERN INTO OUTPUT FIELD
         ED    &PATOFF.(&PATLEN-&PATOFF,1),&TEMP8  AND EDIT THE TIME.
         SPACE
         MEXIT
.*
.YNOP    BMCERMAC EDITDATE,10,TIME_OR_DATE,,,&LABEL
         MEXIT
.E2      BMCERMAC EDITDATE,20,LENGTH_CODE,&LENCODE
         MEXIT
.EFIELD  BMCERMAC EDITDATE,20,FIELD,&FIELD,,&LABEL
         MEXIT
.ETEMP   BMCERMAC EDITDATE,20,TEMP8,&TEMP8,,&LABEL
         MEND
         SPACE 5
         MACRO
&LABEL   GETDATE &TYPE,&LENCODE,&FIELD=,&TEMP8=TEMP8
.*             COPYRIGHT GMD-I6 1971,1973
.*                                                         18JAN71-PAHL
.*  GET TIME/DATE AND EDIT IT INTO PRINTABLE FORMAT        03NOV72-PAHL
.*
.*  &TYPE   : "(TIME,DATE)"×"TIME"×"DATE"   WHAT TO BE RETRIEVED/EDITED
.*            FIRST OPTION IS DEFAULT.
.*  &LENCODE: "LONG"×"SHORT"  SHORT FORMAT CONTAINS NO EXTRA TEXT
.*            LONG IS DEFAULT.
.*  &FIELD  : RX-ADDR×(REG)×<RX-ADDR>  OUTPUT AREA (REQUIRED LENGTH DE-
.*            PENDS ON FORMAT, SEE BELOW.
.*  &TEMP8  : SYMBOL   CONVERSION AREA OF 1 DOUBLE-WORD
.*
.*
.* &TYPE,&LENCODE      'OUTPUT IMAGE':            OUTPUT LENGTH/BYTES:
.*
.* TIME,SHORT          ' HH:MM:SS.TH'                    12
.* TIME,LONG           ' TIME HH:MM:SS.TH'               17
.* DATE,SHORT          ' DDMMMYY'                         8
.* DATE,LONG           ' DATE DDMMMYY'                   13
.* (TIME,DATE),SHORT   ' HH:MM:SS/DDMMMYY'               17
.* (TIME,DATE),LONG    ' TIME HH:MM:SS   DATE DDMMMYY'   29
.*
.*       GETDATE DESTROYS THE CONTENTS OF REGS 14-1.
.*       AFTER EXECUTION:
.*       REG 1 CONTAINS THE ADDRESS OF THE GIVEN OUTPUT AREA.
.*
         LCLB  &NOTIME,&NODATE
.*
         AIF   ('&TYPE(1)' EQ '').TYPE2
&NOTIME  SETB  ('&TYPE(1)'(1,1) NE 'T')
&NODATE  SETB  ('&TYPE(1)'(1,1) NE 'D')
         AIF   (&NOTIME AND &NODATE).YTYPE
.TYPE2   AIF   ('&TYPE(2)' EQ '').EDIT
&NOTIME  SETB  ('&TYPE(2)'(1,1) NE 'T' AND &NOTIME)
&NODATE  SETB  ('&TYPE(2)'(1,1) NE 'D' AND &NODATE)
         AIF   (&NOTIME OR &NODATE).YTYPE
.EDIT    AIF   ('&FIELD' EQ '').YFIELD
         AIF   (&NOTIME).DATE
&LABEL   LA    1,2                     TIME UNIT: DEC
         SVC   11                      SVC-TIME
         AIF   (&NODATE).TIME
         EDITDATE &LENCODE,TIME=(0),DATE=(1),FIELD=&FIELD,TEMP8=&TEMP8
         MEXIT
.TIME    EDITDATE &LENCODE,TIME=(0),FIELD=&FIELD,TEMP8=&TEMP8
         MEXIT
.DATE    ANOP
&LABEL   SR    1,1                     TIME UNIT: TU
         SVC   11                      SVC-TIME
         EDITDATE &LENCODE,DATE=(1),FIELD=&FIELD,TEMP8=&TEMP8
         MEXIT
.*
.YTYPE   BMCERMAC GETDATE,20,TYPE,&TYPE
         AGO   .LABEL
.YFIELD  BMCERMAC GETDATE,10,FIELD
.LABEL   AIF   ('&LABEL' EQ '').MEND
&LABEL   DC    0H'0'
.MEND    MEND
         SPACE 5
         MACRO
&LABEL   BLANK &FIELD,&LENGTH,&CHAR
.*             COPYRIGHT GMD-I6 1972,1973
.*                                                       05APR72-GEIST
.*  PAD FIELD WITH &CHAR                                 06AUG73-PAHL
.*
.*  &FIELD  : RS-ADDR   START ADDR OF FIELD TO BE PADDED WITH &CHAR
.*  &LENGTH : ABS.EXPR (1<VALUE<258) × SELF.DEF.TERM>0
.*            LENGTH OF FIELD
.*  &CHAR   : ABS.EXPR<256   FILL CHARACTER; DEFAULT IS C' '
.*
         LCLA  &P,&L,&LI
         LCLC  &PLUS,&C
         AIF   ('&FIELD' EQ '').YFIELD
         AIF   ('&LENGTH(1)' NE '&LENGTH').YLENGTH "(...)" NOTATION    -
                                       COULD MEAN GPR
         AIF   ('&CHAR' NE '').A
&C       SETC  'C'' '''                SET DEFAULT FILL CHARACTER
.A       AIF   ('&FIELD'(1,1) EQ '(').CONTIN
&PLUS    SETC  '+'
.CONTIN  ANOP
&LABEL   MVI   0&PLUS&FIELD,&CHAR&C    INSERT FILL CHARACTER
         AIF   (T'&LENGTH EQ 'N').SELFDEF
.*
.*  LENGTH IS SPECIFIED AS ABS.EXPR
.*
         AIF   ('&LENGTH' NE '').EXPR
         AIF   ('&FIELD'(K'&FIELD,1) EQ ')').YLENGTH
&C       SETC  '&FIELD'(1,7)'#'        DEFAULT LENGTH: &FIELD.#
         MVC   0(&C-1,0),0             PROPAGATE PADDING CHAR
         AGO   .ORG
.EXPR    MVC   0(&LENGTH-1,0),0        PROPAGATE PADDING CHAR
.ORG     ORG   *-4
         DC    S(1&PLUS&FIELD,0&PLUS&FIELD)
         MEXIT
.*
.*  LENGTH IS SPECIFIED AS SELF.DEF.TERM
.*
.SELFDEF AIF   (&LENGTH EQ 0).YLENGTH
         AIF   (&LENGTH EQ 1).MEND
.*  GENERATE SEQUENCE OF MVC'S UNTIL &LENGTH IS EXHAUSTED
&L       SETA  &LENGTH-1               INITIAL REMAINING LENGTH
&P       SETA  1                       INITIAL OFFSET
.MVLOOP  AIF   (&L LE 0).MEND
         AIF   (&L EQ 1).MVLI
&LI      SETA  256
         AIF   (&L GT 256).MVL1
&LI      SETA  &L
.MVL1    MVC   0(&LI,0),0              PROPAGATE PADDING CHAR
         ORG   *-4
         DC    S(&P&PLUS&FIELD,0&PLUS&FIELD)
&L       SETA  &L-256
&P       SETA  &P+256
         AGO   .MVLOOP
.MVLI    MVI   &P&PLUS&FIELD,&CHAR&C
         MEXIT
.YLENGTH MNOTE 12,'****** BLANK: ILLEGAL OR INDETERMINATE LENGTH'
         MEXIT
.YFIELD  BMCERMAC BLANK,10,FIRST,,,&LABEL
.MEND    MEND
         SPACE 5
         MACRO
&LABEL   BMCLA   &REG,&PAR
.*             COPYRIGHT GMD-I6 1970,1973
.*                                                        16MAR70-GEIST
.*  LOAD REGISTER &REG WITH &PAR                          12JUN72-PAHL
.*
.*  &REG    : ABS.EXPR<16   REGISTER TO BE LOADED.
.*  &PAR    : RX-ADDR×(REG)×<RX-ADDR>   ADDR/VALUE TO BE LOADED INTO
.*            REGISTER.
.*
         LCLC  &C1,&C2
         AIF   ('&PAR' EQ '').NAMEIT
         AIF   ('&PAR'(1,1) EQ '(').LR
         AIF   ('&PAR'(1,1) EQ '<').L
.*  &PAR = RX-ADDR
         AIF   ('&PAR' EQ '0').LA0
&LABEL   LA    &REG,&PAR
         MEXIT
.LA0     ANOP
&LABEL   SR    &REG,&REG
         MEXIT
.*  &PAR = (REG)
.LR      AIF   ('&PAR(1)' EQ '&REG(1)').NAMEIT
&LABEL   LR    &REG,&PAR(1)
         MEXIT
.*  &PAR = <RX-ADDR>
.L       AIF   (K'&PAR GT 10).LTWO
&C1      SETC  '&PAR'(2,K'&PAR-2)
         AGO   .LOAD
.LTWO    ANOP
&C1      SETC  '&PAR'(2,8)
&C2      SETC  '&PAR'(10,K'&PAR-10)
.LOAD    ANOP
&LABEL   L     &REG,&C1&C2
         MEXIT
.NAMEIT  AIF   ('&LABEL' EQ '').MEND
&LABEL   DC    0H'0'
.MEND    MEND
         SPACE 5
         MACRO
&LABEL   DSLD
.*             COPYRIGHT GMD-I6 1972,1973
.*                                                         11AUG72-PAHL
.*  DATA SET LABELS  (OS/360; FILES ON MAGNETIC TAPE)      23FEB73-PAHL
.*
.*  &SYSLIST(&I)   CODE SPECIFYING THE LABEL TO BE GENERATED
.*           "FL1"   - IBM STANDARD FILE LABEL 1 (HDR1,EOF1,EOV1)
.*           "FL2"   - IBM STANDARD FILE LABEL 2 (HDR2,EOF2,EOV2)
.*       IF MORE THAN ONE IS SPECIFIED, ALL DESCRIPTIONS USE THE SAME
.*       ORIGIN
.*
         LCLA  &I
         LCLB  &FL1,&FL2
         LCLC  &C,&ORGNAME
         AIF   ('&LABEL' EQ '').DSECT
&LABEL   DS    0F
         AGO   .QNULL
.DSECT   ANOP
DSL      DSECT
.QNULL   AIF   (N'&SYSLIST GT 0).COMPILE
         BMCERMAC DSLD,213,LABEL-TYPE,SC=*
&FL1     SETB  1
&FL2     SETB  1
         AGO   .GO
.COMPILE AIF   (&I GE N'&SYSLIST).GO
&I       SETA  &I+1
&C       SETC  '&SYSLIST(&I)'
         AIF   ('&C' EQ '').COMPILE
         AIF   ('&C' NE 'FL1' AND '&C' NE 'FL2').YLIST
&FL1     SETB  (&FL1 OR '&C' EQ 'FL1')
&FL2     SETB  (&FL2 OR '&C' EQ 'FL2')
         AGO   .COMPILE
.YLIST   BMCERMAC DSLD,24,&I-TH,&SYSLIST(&I)
         AGO   .COMPILE
.*
.GO      AIF   (NOT &FL1).FL2
&ORGNAME SETC  'FL1'
         AIF   ('&LABEL' EQ 'FL1').FL1A
FL1      DS    0CL80
.FL1A    ANOP
FL1LABI  DS    CL3                 LABEL IDENTIFIER: HDR/EOF/EOV
FL1NO    DC    C'1'                DATA SET LABEL NUMBER
FL1ID    DC    CL17' '             DATA SET IDENTIFIER: LAST 17 CHAR OF-
                                   DSNAME
FL1FILSR DC    CL6' '              DATA SET SERIAL NUMBER
FL1VOLSQ DC    CL4'0'              VOLUME SEQUENCE NUMBER
FL1FILSQ DS    CL4                 DATA SET SEQUENCE NUMBER
FL1GNO   DC    CL4' '              GENERATION NUMBER OF THE DATA SET
FL1VNG   DC    CL2' '              VERSION NUMBER
FL1CREDT DS    CL6' YYDDD'         CREATION DATE
FL1EXPDT DS    CL6' YYDDD'         EXPIRATION DATE
FL1FSEC  DC    C'0'                DATA SET SECURITY INDICATOR: 0/1/3
FL1BLKCT DC    CL6'0'              EOF/EOV: BLOCK COUNT
FL1SYSCD DC    CL13' '
         DC    CL7' '              ( RESERVED )
.*
.FL2     AIF   (NOT &FL2).MEND
         AIF   ('&ORGNAME' NE '').FL2ORG
&ORGNAME SETC  'FL2'
         AGO   .FL2GO
.FL2ORG  ORG   &ORGNAME
.FL2GO   AIF   ('&LABEL' EQ 'FL2').FL2A
FL2      DS    0CL80
.FL2A    ANOP
FL2LABI  DS    CL3                 LABEL IDENTIFIER: HDR/EOF/EOV
FL2NO    DC    C'2'                DATA SET LABEL NUMBER
FL2RECFM DS    C                   RECORD FORMAT: F/V/U/D
FL2BLKL  DC    CL5'0'              BLOCK LENGTH
FL2LRECL DC    CL5'0'              RECORD LENGTH
FL2DEN   DC    C'2'                TAPE DENSITY: 0/1/2/3
FL2FILP  DC    C'0'                DATA SET POSITION: 0/1
FL2JOBD  DC    CL8' '              JOB IDENTIFICATION
FL2JSSP  DC    C'/'
FL2STEPD DC    CL8' '              STEP IDENTIFICATION
FL2TRTCH DC    CL2'  '             TAPE RECORDING TECHNIQUE
FL2CNTRL DC    C' '                PRINTER CONTROL: ' '/A/M
         DC    C' '                ( RESERVED )
FL2BLKA  DC    C' '                BLOCK ATTRIBUTE: ' '/B/S/R
         DC    CL41' '             ( RESERVED )
.*
.MEND    SPACE
         MEND
         SPACE 5
         MACRO
&LABEL   PROLOG  &BASE=10,&ID=,&DSA=,&SSA=,&COPYR=YES,                 *
               &EP=*,&NAME=,&LEN=             OLDIES FOR COMPATIBILITY
.*             COPYRIGHT GMD RZ.BN   1975
.*                                                         00JAN69-
.*  STANDARD PROGRAM INITIATION                            19JUL73-PAHL
.*
.*  &BASE   : REG212×(REG212,...,REG212)   BASE REGISTER(S) FOR PROGRAM
.*            ARE SET WITH 4K-DIFFERENCE BEGINNING AT FIRST BYTE OF
.*            MACRO EXPANSION.
.*  &ID     : CHAR.STR×'CHAR.STR'       ENTRY POINT IDENTIFICATION
.*            DEFAULT: &LABEL, IF OMITTED, &SYSECT.
.*  &DSA    : DSANAM×(DSANAM,LEN)×(,LEN)×*   REQUESTS THAT A DYNAMIC
.*            SAVE/WORK AREA BE OBTAINED.
.*   DSANAM : SYMBOL   NAMING THE DSECT DESCRIBING THE SAVE/WORK AREA
.*            IF NOT OMITTED, A 'USING DSANAM,13' IS ALSO GENERATED.
.*      LEN : ABS.EXPR   GIVES THE LENGTH OF THE DYNAMIC SAVE/WORK AREA
.*            IF IT IS OMITTED BUT DSANAM IS SPECIFIED, THE STANDARD
.*            LENGTH SYMBOL 'DSANAM.#' IS ASSUMED.
.*        * : ONLY THE MINIMUM SAVE AREA OF 72 BYTES IS TO BE OBTAINED.
.*  &SSA    : *×A-SYMBOL×(GPR0-14)×<RX-ADDR>  INDICATES THAT A STATIC
.*            SAVE AREA IS TO BE USED.  IF "*" IS SPECIFIED, A MINIMUM
.*            (72B) SAVE AREA IS GENERATED INLINE, THE OTHER NOTATIONS
.*            SPECIFY THE ADDRESS OF THE SAVE AREA TO BE USED.
.*  &DSA AND &SSA ARE EXCLUSIVE.  IF BOTH OMITTED, DSA=* IS ASSUMED.
.*  THE SAVE AREA IS CHAINED TO THE ACTIVE SAVE AREA CHAIN, THE END
.*  OF WHICH MUST BE ADDRESSED BY (R13) AT POINT OF MACRO CALL.
.*
.*  &COPYR  : YES×NO   GENERATE A GMD RZ COPYRIGHT NOTICE APPENDED TO
.*            THE EP ID?
.*--OLD KEYWORDS STILL SUPPORTED JUST FOR COMPATIBILITY--
.*  &EP     : ALTERNATE ENTRY POINT NAME, AFFECTS BASE REGISTER USING
.*            STATEMENTS ONLY.
.*  &NAME   : FORMER NAME OF ID KEYWORD.
.*  &LEN    : EQ. TO &DSA(2).
.*
         LCLA  &NA,&NB
         LCLC  &C
         AIF   ('&NAME' NE '').ONAME   ***OLD***
.GO1     AIF   ('&LEN' NE '').OLEN     ***OLD***
         DS    0H
.GO2     AIF   ('&BASE' EQ '').YBASE
         USING &EP,&BASE(1)            PROGRAM BASE
.USE2    AIF   (&NA+1 GE N'&BASE).USE15
&NA      SETA  &NA+1
         USING &EP+&NA*4096,&BASE(&NA+1)
         AGO   .USE2
.USE15   USING &EP,15
&LABEL   B     BMC&SYSNDX
         DC    AL1(BMC&SYSNDX.A-*-1)   ID LENGTH
         AIF   ('&ID' NE '').ID
&C       SETC  '&LABEL'                 IF NO EXTRA ID, USE LABEL
         AIF   ('&C' NE '').DID
&C       SETC  '&SYSECT'               IF NO LABEL EITHER, USE CSECT NM
         AIF   ('&C' NE '').DID
&C       SETC  '?'                     NO CSECT NAME EITHER.
         MNOTE 4,'****** PROLOG: NO ENTRY ID'
.DID     DC    C'&C'
         AGO   .COPYR
.ID      AIF   ('&ID'(1,1) EQ '''').IDQ
         AIF   ('&ID'(K'&ID,1) EQ '''').IDC
         DC    C'&ID'
         AGO   .COPYR
.IDC     DC    &ID
         AGO   .COPYR
.IDQ     DC    C&ID
.COPYR   AIF   ('&COPYR' NE 'YES').COPYR1
         DC    C' COPYRIGHT GMD RZ.BN &SYSDATE'
         AGO   .IDEND
.COPYR1  AIF   ('&COPYR' EQ '' OR '&COPYR' EQ 'NO').IDEND
         BMCERMAC PROLOG,123,COPYR,&COPYR,NO
.IDEND   ANOP
BMC&SYSNDX.A EQU *
         AIF   ('&SSA' NE '').SSA
.*
.*  DYNAMIC SAVE AREA SET-UP
.*
.DSA     DC    V($5GCORE)
         AIF   ('&DSA(2)' NE '').DSA2
&C       SETC  '72'                    MINIMUM/DEFAULT LENGTH
         AIF   ('&DSA(1)' EQ '' OR '&DSA(1)' EQ '*').DSA72
&C       SETC  '&DSA(1)'(1,7)'#'       STANDARD LENGTH SYMBOL
.DSA72   DC    A(&C)                   LENGTH OF SAVE/WORK AREA
         AGO   .DSA3
.DSA2    DC    A(&DSA(2))              SAVE/WORK AREA LENGTH
.DSA3    ANOP
BMC&SYSNDX STM 14,12,12(13)
         LM    14,15,*-12
         BALR  10,14                   CALL PROLOGUE MODULE
         AGO   .BASE
.*
.*  STATIC SAVE AREA SET-UP
.*
.SSA     AIF   ('&DSA' NE '').YSA
         AIF   ('&SSA' NE '*').SSAL
         DC    18F'0'                  STATIC SAVE AREA
BMC&SYSNDX STM 14,12,12(13)            SAVE CALLER'S REGISTERS
         LA    14,*-19*4               -> STATIC SAVE AREA
         AGO   .SACHAIN
.SSAL    AIF   ('&SSA'(1,1)  NE '<' AND '&SSA'(1,1) NE '(').SSAADDR
BMC&SYSNDX STM 14,12,12(13)            SAVE CALLER'S  REGISTERS
         BMCLA 14,&SSA                 -> STATIC SAVE AREA
         AGO   .SACHAIN
.SSAADDR DC    A(&SSA)
BMC&SYSNDX STM 14,12,12(13)            SAVE CALLER'S REGISTERS
         L     14,*-8                  -> STATIC SAVE AREA
.SACHAIN MVC   8(4,14),8(13)           LSA(NEW) = LSA(OLD)
         ST    13,4(,14)               HSA(NEW) = OLD
         ST    14,8(,13)               LSA(OLD) = NEW
         LR    13,14                   -> NEW SAVE AREA
.*
.*  BASE REGISTER(S)
.*
.BASE    AIF   ('&BASE(1)' EQ '15').BASE1
         DROP  15                      DROP TEMPORARY BASE
         LR    &BASE(1),15             LOAD FIRST BASE REGISTER
.BASE1   AIF   (N'&BASE LT 2).DSAUSE
         LA    &BASE(N'&BASE),2048
.BASE2   LA    &BASE(&NB+2),2048(&BASE(N'&BASE),&BASE(&NB+1))
&NB      SETA  &NB+1
         AIF   (&NB+1 LT N'&BASE).BASE2
         AGO   .DSAUSE
.DSAUSE  AIF   ('&DSA(1)' EQ '' OR '&DSA(1)' EQ '*').END
         USING &DSA(1),13
         MEXIT
.*
.YSA     BMCERMAC PROLOG,34,DSA/SSA,SSA  EXCLUSIVE OPERANDS, SSA IGNORD
         AGO   .DSA
.YBASE   BMCERMAC PROLOG,110,BASE
         MEXIT
.*
.*  *** OLD VERSIONS COMPATIBILITY ***
.*
.ONAME   AIF   ('&ID' NE '').YNAME
&LABEL   PROLOG BASE=&BASE,ID=&NAME,DSA=&DSA,SSA=&SSA,COPYR=&COPYR,EP=&-
               EP,LEN=&LEN
         MEXIT
.YNAME   BMCERMAC PROLOG,40,NAME
         AGO   .GO1
.OLEN    AIF   ('&SSA' NE '' OR '&DSA(2)' NE '').YLEN
&LABEL   PROLOG BASE=&BASE,ID=&ID,DSA=(&DSA(1),&LEN),SSA=&SSA,COPYR=&CO-
               PYR,EP=&EP
         MEXIT
.YLEN    BMCERMAC PROLOG,40,LEN
         AGO   .GO2
.END     MEND
         SPACE 5
         MACRO
&LABEL   EPILOG  &SA=D,&RC=0,&DROP=,&LTORG=YES
.*             COPYRIGHT GMD-I6 1970,1973
.*                                                         13MAR70-PAHL
.*  PROGRAM EPILOGUE: UNCHAIN SA (+RELEASE IF DYNAMIC) AND RETURN
.*                                                         19JUL73-PAHL
.*  &SA     : 'D'×'S'   TYPE OF SAVE AREA: DYNAMIC×STATIC
.*            CORRESPONDS TO &DSA RESP. &SSA PARAMETER OF MACRO PROLOG
.*  &RC     : (15)×(REG)×ABS.EXPR<4096   RETURN CODE
.*  &DROP   : REG×LIST OF REGS   BASE REGISTER(S) TO BE DROPPED
.*  &LTORG  : 'YES'×'NO'   GENERATE (NO) 'LTORG'
.*
         LCLA  &N
         AIF   ('&SA' EQ '').YSA0
         AIF   ('&SA'(1,1) EQ 'S').STATIC
         AIF   ('&SA'(1,1) NE 'D').YSA1
.*  GENERATE PROPER CNOP FOR ALIGNMENT OF V-CON
.DYNAMIC AIF   ('&RC' EQ '0' OR '&RC(1)' NE '&RC' AND '&RC' NE '(15)').-
               CNOP2
         CNOP  0,4
         AGO   .RCLOAD
.CNOP2   CNOP  2,4
.*  FETCH RC AND CALL EPILOGUE MODULE TO DO THE WORK FOR SA=DYNAMIC
.RCLOAD  ANOP
&LABEL   BMCLA 15,&RC
         BALR  14,0
         DC    X'58E0E006'             L  14,6(,14)
         BR    14
         DC    V($5FCORE)
         AGO   .DROP
.*  STATIC SAVE AREA
.STATIC  ANOP
&LABEL   BMCLA 15,&RC
         L     14,4(,13)               -> HIGH SAVE AREA
         MVC   8(4,14),8(13)           RESTORE OLD LSA POINTER
         LR    13,14
         L     14,12(,13)
         LM    0,12,20(13)
         BR    14
.*   DROP BASE REGISTERS AS SPECIFIED
.DROP    AIF   ('&DROP' EQ 'NO').LTORG                            (OLD)
.DROP1   AIF   (&N GE N'&DROP).LTORG
&N       SETA  &N+1
         DROP  &DROP(&N)
         AGO   .DROP1
.*   REQUEST LITERAL POOL IF SPECIFIED
.LTORG   AIF   ('&LTORG' EQ '' OR '&LTORG' EQ 'NO').MEND
         AIF   ('&LTORG' NE 'YES').YLTORG
         LTORG
         MEXIT
.YSA0    BMCERMAC EPILOG,113,SA,,D
         AGO   .DYNAMIC
.YSA1    BMCERMAC EPILOG,23,SA,&SA,D
         AGO   .DYNAMIC
.YLTORG  BMCERMAC EPILOG,123,LTORG,&LTORG,NO
.MEND    MEND
         SPACE 5
         MACRO
&LABEL   OPENED &DCB,&YESBR,&NOBR
.*             COPYRIGHT GMD-I6 1970,1973
.*                                                         00JAN69-PAHL
.*  INQUIRE OPEN FLAG BIT IN DCB AND BRANCH ON RESULT      09JAN73-PAHL
.*
         AIF   ('&DCB' EQ '').YDCB
         AIF   ('&DCB'(1,1) EQ '(').DCBREG
&LABEL   TM    48+&DCB,X'10'           TEST OPEN FLAG BIT
         AGO   .BRANCH
.DCBREG  ANOP
&LABEL   TM    48&DCB,X'10'            TEST OPEN FLAG BIT
.BRANCH  AIF   ('&YESBR' EQ '').BRANCH2
         BO    &YESBR
.BRANCH2 AIF   ('&NOBR' EQ '').MEND
         BZ    &NOBR
         MEXIT
.YDCB    BMCERMAC OPENED,10,FIRST(DCB),,,&LABEL
.MEND    MEND
         SPACE 5
         MACRO
&LABEL   IOBD  &LBLID=IOB,&AM=EXCP,&DEVD=
.*             COPYRIGHT GMD-I6 1971,1973
.*                                                 01JUN71/15NOV72-PAHL
.*  INPUT/OUTPUT BLOCK (OS/360 I/O SUPERVISOR/DATA MANAGEMENT, REL.19.6
.*  &AM     : CODE SPECIFYING THE ACCESS METHOD
.*            'EXCP' - IOB FOR EXCP
.*  &DEVD   : CODE SPECIFYING THE DEVICE TYPE
.*                    - IOB WITHOUT DEVICE EXTENSION
.*            'DA'    - IOB WITH D.A. DEVICE EXTENSION
.*            'TRMNL' - IOB WITH TERMINAL DEVICE EXTENSION
.*
         LCLB  &DA,&TRMNL
         LCLC  &L
         AIF   ('&LABEL' EQ '').DSECT
&LABEL   DS    0F
&L       SETC  '&LBLID'(1,3)
         AIF   (K'&LBLID LE 3).GO
         BMCERMAC IOBD,146
         AGO   .GO
.DSECT   ANOP
IOB      DSECT
&L       SETC  'IOB'
         AIF   ('&LBLID' EQ 'IOB').GO
         BMCERMAC IOBD,140
.GO      AIF   ('&AM' EQ 'EXCP').SETDEVD
         BMCERMAC IOBD,73,AM,&AM,EXCP
.SETDEVD ANOP
&DA      SETB  ('&DEVD(1)' EQ 'DA')
&TRMNL   SETB  ('&DEVD(1)' EQ 'TRMNL')
         AIF   ('&DEVD' EQ '' OR N'&DEVD EQ 1 AND (&DA OR &TRMNL)).A
         BMCERMAC IOBD,70,DEVD,&DEVD
.*
.A       ANOP
.*
&L.FLAG1 DS    B                   FLAG BYTE 1
&L.FLAG2 DS    B                   FLAG BYTE 2
&L.SENS0 DS    B                   FIRST SENSE BYTE
&L.SENS1 DS    B                   SECOND SENSE BYTE
&L.ECBCC DS    0X                  COMPLETION CODE FOR ECB
&L.ECBPT DS    A                   -> ECB TO BE POSTED UPON COMPLETION
&L.FLAG3 DS    0B                  I/O SPVR ERR RTN FLAG BYTE
&L.CSW   DS    0XL8,B,XL7          LOW ORDER 7 BYTES OF LAST CSW
&L.SIOCC DS    0X                  CONDITION CODE OF 'SIO' FOR THIS I/O
&L.START DS    A                   -> CHANNEL PROGRAM TO BE EXECUTED
         DS    0X                  RESERVED
&L.DCBPT DS    A                   -> DCB ASSOCIATED WITH THIS IOB
&L.RESTR DS    A
&L.INCAM DS    H
&L.ERRCT DS    H                   RETRY COUNT USED BY I/O SPVR ERR RTN
         AIF   (NOT &DA).NOTDA
*   DIRECT-ACCESS STORAGE DEVICES EXTENSION
&L.SEEK  DS    XL8                 D.A. SEEK ADDRESS (MBBCCHHR)
         AGO   .MEND
.NOTDA   AIF   (NOT &TRMNL).MEND
*   TERMINAL DEVICES EXTENSION
&L.UCBX  DS    X                   UCB INDEX
.MEND    SPACE
         MEND
         SPACE 5
         MACRO
&LABEL   JFCBD
.*             COPYRIGHT GMD-I6 1970,1973
.*                                                         00JAN00-PAHL
.*  JOB FILE CONTROL BLOCK (OS/360 DATA MANAGEMENT)        03NOV72-PAHL
.*
         AIF   ('&LABEL' EQ '').DSECT
&LABEL   DS    0F
         AGO   .A
.DSECT   ANOP
JFCB     DSECT
.A       ANOP
JFCBDSNM DS    CL44                DATA SET NAME
JFCBELNM DS    CL8                 ELEMENT NAME;REL.GEN.NO.;TYPE OF AR.
JFCBTSDM DS    X                   JOB MNGMT-DATA MNGMT INTERFACE BYTE
JFCBSYSC DS    XL13                SYSTEM CODE
JFCBLTYP DS    X                   LABEL TYPE
         DS    X                   RESERVED
JFCBFLSQ DS    H                   FILE SEQUENCE NUMBER
JFCBVLSQ DS    H                   VOLUME SEQUENCE NUMBER
JFCBMASK DS    XL8                 DATA MANAGEMENT MASK
JFCBCRDT DS    XL3                 DATA SET CREATION DATE
JFCBXPDT DS    XL3                 DATA SET EXPIRATION DATE
JFCBIND1 DS    X                   INDICATOR BYTE 1
JFCBIND2 DS    X                   INDICATOR BYTE 2
JFCBUFNO DS    X
JFCBUFRQ EQU   JFCBUFNO            QTAM:
JFCBFTEK DS    X
JFCBFALN EQU   JFCBFTEK
JFCBHIAR EQU   JFCBFTEK
JFCBUFL  DS    H
JFCEROPT DS    X
JFCTRTCH DS    X                   DEVD=TA: TAPE REC TECHNQ FOR 7TR
JFCKEYLE EQU   JFCTRTCH            DEVD=DA: DIRECT ACCESS KEY LENGTH
JFCDEN   DS    X                   TAPE DENSITY
JFCLIMCT DS    XL3                 BDAM; SEARCH LIMITS
JFCDSORG DS    XL2                 DATA SET ORGANIZATION
JFCRECFM DS    X
JFCOPTCD DS    X
JFCBLKSI DS    H
JFCLRECL DS    H
JFCNCP   DS    X
JFCNTM   DS    X
*   NORMAL 108 SEGMENT
JFCRKP   DS    H                   RELATIVE KEY POSITION
JFCCYLOF DS    X
JFCPBUFN DS    X                   RESERVED
JFCINTVL DS    X                   QTAM:
*
JFCCPRI  DS    X                   QTAM:
JFCSOWA  DS    H                   QTAM:
         DS    X                   RESERVED
JFCBNVOL DS    X                   NUMBER OF VOLUME SERIAL NUMBERS
JFCBVOLS DS    5CL6                VOLUME SERIAL NUMBERS
JFCBEXTL DS    X                   RESERVED
JFCBEXAD DS    XL3                 TTR OF FIRST JFCB EXTENSION BLOCK
JFCBPQTY DS    FL3                 PRIMARY QUANTITY OF D.A. STORAGE
JFCBCTRI DS    X                   SPACE PARAMETERS
JFCBSQTY DS    FL3                 SECONDARY QUANTITY OF D.A. STORAGE
         DS    X                   RESERVED
JFCBDQTY DS    FL3                 DIRECTORY QUANTITY
JFCBSPNM DS    AL3
JFCBABST DS    XL2
JFCBSBNM DS    AL3
JFCBDRLH DS    FL3                 AVERAGE DATA BLOCK LENGTH
JFCBVLCT DS    X                   VOLUME COUNT
JFCBSPTN DS    X
         SPACE
         MEND
         SPACE 5
         MACRO
&L       XCP   &CP
         LCLC  &L2
&L2      SETC  '&L'
         AIF   ('&CP' EQ '').OLDCP
&L2      LA    1,&CP
         ST    1,IOB+16
&L2      SETC  ''
.OLDCP   ANOP
@&SYSNDX EQU   *
&L2      EXCP  IOB
         WAIT  ECB=ECB
         CLI   ECB,X'7F'
         BE    #&SYSNDX
         CLI   ECB,X'44'
         BE    @&SYSNDX
         AIF   ('&CP' NE 'HDR1' AND '&CP' NE 'READ').CLOSE
         CLI   ECB,X'41'
         BNE   DUMP&SYSNDX
         CLC   IOB+12(2),=X'0D00'
         AIF   ('&CP' NE 'READ').@EOF
         BE    EOFNSL
         AGO   .CLOSE
.@EOF    BE    EOF
.CLOSE   ANOP
DUMP&SYSNDX PUT SYSPRINT,&CP.ERR
         CLOSE SYSPRINT
         AIF   ('&CP' EQ 'VOL1').TM                            1.3
         B     ABEND1
         AGO   .NOTM                                           1.3
.TM      B     EPILOG                                          1.3
.NOTM    ANOP                                                  1.3
#&SYSNDX DS    0H
         MEND
         SPACE 2
         MACRO
&L       MVCSLZ &A,&B
&L       MVC   &A,&B
         SR    0,0
         IC    0,*-7
         LA    1,&A
         CLI   0(1),C'0'
         BNE   *+16
         MVI   0(1),C' '
         LA    1,1(1)
         BCT   0,*-16
         MEND
         EJECT
TAPESCAN CSECT
         PRINT GEN
         SPACE 3
         PRINT NOGEN
         SPACE 3
         PROLOG SSA=*,BASE=(10,11),NAME=TAPESCAN-1.4-JAN77-SCHEID/BLA
         OPEN  (SYSPRINT,OUTPUT)
         RDJFCB TAPEDCB                    READ JFCB IN CORE
         CLI   JFCBNVOL,X'FF'               SCAN FOUND JFCB
         MVI   JFCBLTYP,X'10'               BLP
         BE    ABEND1                       NO, GO TO ABEND
         OPEN  (TAPEDCB,(INPUT,LEAVE)),TYPE=J
         OPENED TAPEDCB,INOK
         PUT   SYSPRINT,OPENERR
         CLOSE SYSPRINT                OPEN NOT POSSIBLE
         B     ABEND1
INOK     GETDATE (TIME,DATE),SHORT,FIELD=DATUM+10,TEMP8=T8         1.3
         PUT   SYSPRINT,DATUM          WRITE TIME AND DATE         1.3
NXTTAPE  XCP   REW                     REWIND                      1.4
*        SR    5,5                                                 1.4
         XCP   VOL1                    READ VOLUME SERIAL NUMBER
         CLC   LVOL1(4),=CL4'VOL1'     STANDARD LABEL ?
         BNE   CNTNLF                  NO, ONLY COUNT FILES
         CLC   VOLSERNO,JFCBVOLS
         BE    VOLSEROK
         MVC   WTORMES+WTORVOLO(6),VOLSERNO
         MVC   WTORMES+WTORVOLN(6),JFCBVOLS
         XC    WTORECB,WTORECB      CLEAR ECB
         WTOR  ,WTORREP,1,WTORECB,MF=(E,WTORMES)
         PRINT NOGEN
         WAIT  ECB=WTORECB
         CLI   WTORREP,C'U'
         BE    VOLSEROK
         CLI   WTORREP,C'M'
         BNE   CANCEL                                               1.4
         XCP   UNL                                                  1.4
         MVC   MOUNT+4+12(6),VOLSERNO           INSERT WRONG NAME   1.4
         MVC   MOUNT+4+42(6),JFCBVOLS           INSERT RIGHT NAME   1.4
         WTO   MF=(E,MOUNT)                                         1.4
         B     NXTTAPE                                              1.4
CANCEL   CLOSE TAPEDCB                                              1.4
         MVC   TAPENTF1,JFCBVOLS
         PUT   SYSPRINT,TAPENOTF
         CLOSE SYSPRINT                                             1.4
         B     ABEND1                                               1.4
VOLSEROK MVC   OUTBUF+18(6),VOLSERNO
         PUT   SYSPRINT,OUTBUF
         MVI   OUTBUF,C'1'
         PUT SYSPRINT,HEADLINE         EXPLAIN
         LA    8,1                     R8 = DATA SET SEQUENCE NUMBER
         LA    9,55                    R9 = LINE COUNTER WITHIN PAGE
         MVI   RECORD,C'0'
LOOP     MVC   RECORD+1(7),=X'40202120406140'  PATTERN FOR EDIT
         MVC   RECORD+8(113),RECORD+7  BLANK
         CVD   8,T8
         ED    RECORD+1(4),T8+6
         CLC   FL1LABI(3),=CL3'EOV'    TEST IF EOV NOT EOF      1.3
         BE    EOV                                              1.3
         XCP   HDR1
         XCP   HDR2                    READ JOBNAME/STEPNAME
         XCP   FSF
         XCP   ,
         XCP   EOF1
         XCP   FSF
         MVCSLZ RLSQNR,FL1FILSQ+1
         MVC   RDSNAME,FL1ID
         MVCSLZ RBLKSIZE,FL2BLKL
         MVCSLZ RLRECL,FL2LRECL
         MVCSLZ RBLOCK#,FL1BLKCT
         MVC   RRECFM,FL2RECFM
         MVC   RRECFM+1,FL2BLKA
         CLI   RRECFM+1,C'R'
         BNE   *+10
         MVC   RRECFM+1(2),=CL2'BS'
         CLI   FL2CNTRL,C' '
         BNE   NOCNTRL
         LA    1,RRECFM
         LA    1,1(1)
         CLI   0(1),C' '
         BNE   *-8                     SEARCH BLANK FIELD FOR CONTROL  -
                                       CHARACTER
         MVC   0(1,1),FL2CNTRL
NOCNTRL  MVC   RJOBN,FL2JOBD
         PUT   SYSPRINT,RECORD
         LA    8,1(8)
         MVI   RECORD,C' '
         BCT   9,LOOP
         PUT   SYSPRINT,OUTBUF
         PUT   SYSPRINT,HEADLINE
         MVI   RECORD,C'0'
         LA    9,55
         B     LOOP
         PRINT GEN
CNTNLF   SR    8,8
LOOP2    XCP   READ
         XCP   FSF
         LA    8,1(,8)
         B     LOOP2
         PRINT NOGEN
EOFNSL   BLANK RECORD,121
         MVI   RECORD,C'0'
         MVC   RECORD+1(T#),TEXTNL
         MVC   RECORD+1+11(6),JFCBVOLS
         MVC   RECORD+1+T#(4),=X'40202021'
         CVD   8,T8
         ED    RECORD+1+T#(4),T8+6
         MVC   RECORD+5+T#(24),=C' FILES ON TAPE  ********'
         B     PUTPR
         SPACE
EOV      MVC   RECORD+8(11),=C'*** EOV ***'                      1.4
         B     *+10                                              1.4
EOF      MVC   RECORD+8(11),=C'*** EOF ***'
         CLOSE (TAPEDCB,REREAD)
PUTPR    PUT   SYSPRINT,RECORD
SYSPCLOS CLOSE SYSPRINT
         FREEPOOL SYSPRINT
EPILOG   EPILOG SA=S
         SPACE 1
ABEND1   ABEND 1,DUMP
         SPACE 3
TAPEDCB  DCB   DDNAME=TAPE,MACRF=E,EXLST=EXLIST
EXLIST   DC    0A(0),X'87',AL3(JFCB)             PARMLST FOR JFCB
         SPACE 2
         DS    0F
*
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,RECFM=FBA,LRECL=121,  -
               BLKSIZE=3146
         SPACE
WTORECB  DC    F'0'
         PRINT GEN
WTORMES  WTOR  'TSC001 MOUNTED: XXXOLD, REQUESTED : XXXNEW. REPLY ''U''-
               , ''M'' OR ''C''',MF=L
         PRINT NOGEN
WTORREP  DS    C
WTORVOLO EQU   12+16
WTORVOLN EQU   12+36
MOUNT    WTO   ' WRONG TAPE XXXOLD MOUNTED - PLEASE MOUNT XXXNEW',ROUTC-
               DE=(5,6),MF=L
ECB      DS    F
TAPENOTF DC    CL121' '
         ORG   TAPENOTF
         DC    C'1JOB CANCELLED BY OPERATOR TAPE '
TAPENTF1 DC    CL6'XXXNEW',C' NOT FOUND.'
         ORG
DATUM    DC    CL121'1TAPESCAN'
         SPACE
IOB      DS    0F
         DC    X'02000000'
         DC    A(ECB)
         DC    2A(0)
         DC    A(REW)
         DC    A(TAPEDCB)
         DC    2A(0)
         SPACE
OUTBUF   DC    CL121'-CONTENTS OF TAPE'
         SPACE
UNL      CCW   X'0F',0,X'20',1               REWIND AND UNLOAD
         SPACE
REW      CCW   X'07',0,X'20',1               REWIND
         SPACE
VOL1     CCW   X'02',LVOL1,X'20',10
         SPACE
FSF      CCW   X'3F',0,X'20',1
         SPACE
READ     CCW   X'02',DUMMY,X'30',X'7FFF'                           1.3
         SPACE
EOF1     CCW   X'02',FL1,X'20',80
HDR1     CCW   X'02',0,X'30',1
         SPACE
HDR2     CCW   X'02',FL2,X'20',80
         SPACE
T8       DS    D
         SPACE 2
OPENERR  DC    CL121' '
         ORG   OPENERR
         DC    C'1TAPEDCB COULD NOT BE OPENED'
         ORG
UNLERR   DC    CL121' '
         ORG   UNLERR
         DC    C'1NOT POSSIBLE TO REWIND AND UNLOAD TAPE'
         ORG
REWERR   DC    CL121' '
         ORG   REWERR
         DC    C'1TAPE REWIND NOT SUCCESSFUL'
         ORG
VOL1ERR  DC    CL121' '
         ORG   VOL1ERR
         DC    C'1 0 FILES ON TAPE'
         ORG
FSFERR   DC    CL121' '
         ORG   FSFERR
         DC    C'1ERROR SKIPPING DS TRAILER LABEL'
         ORG
ERR      EQU   FSFERR
READERR  DC    CL121' '
         ORG   READERR
         DC    C'1ERROR READING NL-TAPE'
         ORG
EOF1ERR  DC    CL121' '
         ORG   EOF1ERR
         DC    C'1SKIPPING DATA SET UNSUCCESSFUL'
         ORG
HDR1ERR  DC    CL121' '
         ORG   HDR1ERR
         DC    C'1HEADER LABEL 1 COULD NOT BE READ'
         ORG
HDR2ERR  DC    CL121' '
         ORG   HDR2ERR
         DC    C'1HEADER LABEL 2 COULD NOT BE READ'
         ORG
TEXTNL   DC    C' *******           IS A NO-LABEL TAPE. THERE ARE '
T#       EQU   *-TEXTNL
         SPACE 2
HEADLINE DC    CL121'- '
         ORG   HEADLINE+1
                                       EJECT
         DC    CL4'SQNR'
         ORG   HEADLINE+7
         DC    CL5'LSQNR'
         ORG   HEADLINE+13
         DC    CL6'DSNAME'
         ORG   HEADLINE+33
         DC    CL7'BLKSIZE'
         ORG   HEADLINE+41
         DC    CL5'LRECL'
         ORG   HEADLINE+49
         DC    CL5'RECFM'
         ORG   HEADLINE+57
         DC    CL6'BLOCK#'
         ORG   HEADLINE+66
         DC    CL17'JOBNAME /STEPNAME'
         ORG
RECORD   DC    CL121' '
         ORG   RECORD+7
RLSQNR   DC    CL3' '
         ORG   RECORD+13
RDSNAME  DC    CL17' '
         ORG   RECORD+33
RBLKSIZE DC    CL5' '
         ORG   RECORD+41
RLRECL   DC    CL5' '
         ORG   RECORD+49
RRECFM   DC    CL1' '
         ORG   RECORD+55
RBLOCK#  DC    CL6' '
         ORG   RECORD+66
RJOBN    DC    CL17' '
         ORG
LVOL1    DC    0CL10' '
         DC    CL4' '
VOLSERNO DC    CL6' '
         PRINT GEN
FL1      DSLD  FL1
FL2      DSLD  FL2
JFCB     JFCBD
DUMMY    DS    CL(X'7FFF')                                        1.3
         END   TAPESCAN
