         PRINT ON,GEN,NODATA
MONITOR  CSECT
*
*        THIS ROUT9NE SHOULD BE CALLED AT THE VERY BEGINNING
*              OF THE USER'S PROGRAM.
*        IT WILL ISSUE THE SPIE MACRO, THEN RETURN CONTROL TO THE USER.
*
*        IN COBOL, THE CALLING PROCEDURE IS-
*              ENTER LINKAGE.
*              CALL 'MONITOR'.
*              ENTER COBOL.
*
*        IN ASSEMBLY LANGUAGE, THE CALLING PROCEDURE IS-
*              CALL MONITOR
*
*        NOTE - PROGRAM IS CALLED BY AUTOMATIC LIBRARY CALL,
*              AND MUST BE A LOAD MODULE IN THE LIBRARY DEFINED
*              IN THE//SYSLIB CARD IN THE LKED JOB STEP.
ENTRY    STM   14,12,12(13)             SAVE USER REGISTERS
         BALR  2,0                      LOAD BASE REGISTER
         USING *,2
         ST    13,SAVEREG+4             CHAIN SAVE AREAS
         LR    14,13
         LA    13,SAVEREG               GET NEW SAVE AREA
         ST    13,8(14)
         SPIE
         SPIE  ERROR,((1,15))           SET PROG INTERRUPT EXIT
         ST    1,SAVPICA1
*
*
*        ENTRY ON PROGRAM CHECK INTERRUPT
*
*
         L     13,SAVEREG+4
         LM    14,12,12(13)
         BR    14
         DROP  2
ERROR    STM   14,12,12(13)
         BALR  2,0                      LOAD BASE REGISTER
         USING *,2
         ST    13,SAVEREG+4             CHAIN SAVE AREAS
         ST    13,PPREG+4*13            STORE PROB PROG REG13
         LR    14,13
         LA    13,SAVEREG               GET NEW SAV AREA
         ST    13,8(14)                 CHAIN SAVE AREAS
         STM   3,12,PPREG+4*3           STORE PROB PROG REG3-REG12
         ST    1,PIE                    SAVE ADDRESS OF PIE
         MVC   PPREG(4*3),20(1)         STORE PROB PROG REG0-REG2
         MVC   PPREG+4*14(4*2),12(1)    STORE PROB PROG REG14-REG15
         MVI   REGTABL,X'00'            ZERO OUT TABLE OF PRINTED
         MVC   REGTABL+1(19),REGTABL
         MVC   MESSAGE(L'MSG17),MSG17   PROGRAM CHECK MESSAGE
         MVC   MESSAGE+L'MSG17(1),7(1)  GIVE CONDITION CODE
DATOP    BC    0,DATOP2
         LR    3,1
         OPEN  (PRINTER,OUTPUT)
         OPEN  (SNAPDCB,OUTPUT)
         PUT   PRINTER,MESS
         LR    1,3
         MVI   DATOP+1,X'F0'
DATOP2   SR    3,3
         IC    3,7(1)                   SAVE CONDITION CODE IN REG3
         TR    MESSAGE+L'MSG17(1),HEXTABLE
         L     10,8(1)                  GET INSTR COUNTER FROM PSW
         N     10,ICMASK
         TM    8(1),X'C0'               TEST FOR IMPRECISE INTERRUPT
         BNE   PRECISE                  BRANCH IF OK
         MVC   MESSAGE+14(L'MSG18),MSG18
         OI    SWITCH+1,X'F0'
         B     PRINT
PRECISE  BO    LESS6                    TEST ILC-BRANCH IF 3 HALF WORDS
         TM    8(1),X'80'               TEST ILC
         BO    LESS4                    BRANCH IF TWO HALFWORDS
         B     LESS2                    BRANCH IF ONE HALFWORD
LESS6    BCTR  10,0                     CALCULATE
         BCTR  10,0                       ADDRESS OF
LESS4    BCTR  10,0                         INSTRUCTION
         BCTR  10,0                           ACTUALLY
LESS2    BCTR  10,0                             CAUSING
         BCTR  10,0                               INTERRUPT
         L     7,POINTER                LOAD ADDR NEXT POSITION IN TAB.
         L     4,=A(TABLE)
         NI    DUPSW+1,X'0F'
TABLOOP  CR    7,4                      TEST FOR END OF ACTIVE TABLE
         BE    NOTINTAB                 BRANCH IF END
         C     10,0(4)                  IS INTERRUPT ADDR ALREADY IN
         BE    OLDUMP
         LA    4,4(4)                   INCREMENT TO NEXT ENTRY IN TAB.
         B     TABLOOP                  BRANCH BACK
NOTINTAB ST    10,0(4)                  STORE NEW ENTRY IN TABLE
         LA    4,4(4)                   INCREMENT P-INTER TO NEXT
         ST    4,POINTER                     AVAILABLE SLOT AND STORE
         C     4,=A(TABLE+4*20)
         BL    NEWDUMP                  BRANCH IF NO
         OI    MAXSW+1,X'F0'
         B     NEWDUMP
OLDUMP   EQU   *
         OI    DUPSW+1,X'F0'
         LR    7,4
NEWDUMP  LA    5,MESSAGE+30               FOR
         LA    6,3                          HEXPRINT
         LA    7,1(7)                   INCREMENT TO START OF ADDRESS
         BAL   11,HEXPRINT              PUT HEX LOCATION IN PRINT LINE
PRINT    BAL   11,WTO                   PRINT LINE
SWITCH   NOP   ABORT                    IF SW ON, IMPRECISE INTERRUPT
DUPSW    NOP   GOONX
         SNAP  DCB=SNAPDCB,SDATA=(CB),PDATA=(SPLS,SA)
*
*        INSTRUCTION IMAGE PRINT ROUTINE
*              REG10 TO CONTAIN THE OP-CODE ADDRESS
*
GOON     EQU   *
         SPIE  ADRERROR,(5)             SET SPIE IN CASE INSTR INV ADDR
         ST    1,SAVPICA2               SAVE ADDRESS OF PREVIOUS PICA
         SR    6,6                      ZERO REG6
         TM    0(10),X'C0'              TEST FOR 1-2-3 HALFWORD INSTR.
         BZ    ADD2                     BRANCH IF 1 HALFWORD
         BM    ADD4                     BRANCH IF 2 HALFWORDS
         LA    6,2(6)                   INSTR. IS 3 HALFWORDS
ADD4     LA    6,2(6)
ADD2     LA    6,2(6)
         L     1,SAVPICA2               LOAD ADDR OF PREVIOUS PICA
         SPIE  MF=(E,(1))
ADRPCHEK NOP   ADRERREX
         LR    7,10                     PARAMETERS
         LA    5,MESSAGE+L'MSG16+1        FOR HEXPRINT
         MVC   MESSAGE(L'MSG16),MSG16
         BAL   11,DHEXPRNT              PUT INSTR, IMAGE IN PRINT LINE
         CLI   MESSAGE+L'MSG16+1,C'C'
         LA    11,CHOOSE                NO, IT IS OK TO CONTINUE
         BNE   WTO
         LA    11,TEST14                YES, TRY RETURN VIA REG 14
         B     WTO
ADRERROR OI    ADRPCHEK+1,X'F0'
         BR    14                       SET SWITCH AND RETURN TO O.S.
ADRERREX NI    ADRPCHEK+1,X'0F'         RESET SWITCH
         MVC   MESSAGE(L'MSG35),MSG35
         BAL   11,WTO                   GIVE MESSAGE
         B     TEST14                   TRY RETURN VIA REG 14
*
*        DETERMINE WHAT ROUTINE WILL GET CONTROL
*
CHOOSE   SLA   3,2                      MULT CONCODE BY 4 * DISPLACEMNT
         L     4,CONCODE(3)             LOAD ADDR OF APPROPRIATE ROUT.
         BR    4                        BRANCH
MESS     DC    CL100'MONITOR IN CONTROL'
CONCODE  DC    A(CC0)
         DC    A(CC1)
         DC    A(CC2)
         DC    A(CC3)
         DC    A(CC4)
         DC    A(CC5)
         DC    A(CC6)
         DC    A(CC7)
         DC    A(CC8)
         DC    A(CC9)
         DC    A(CCA)
         DC    A(CCB)
         DC    A(CCC)
         DC    A(CCD)
         DC    A(CCE)
         DC    A(CCF)
BOUNMASK DC    X'00000001'
ICMASK   DC    X'00FFFFFF'
POINTER  DC    A(TABLE)
TABLE    DS    20F
PIE      DS    F
PPREG    DS    16F
SAVEREG  DS    18F
SAVPICA1 DS    F
SAVPICA2 DS    F
REGTABL  DS    16C
FREGTABL DS    4C
*
*        EXCEPTION HANDLING ROUTINES
*
*        CONDITION CODE 0 - SHOULD NOT OCCUR - ROUTINE WILL ABORT
CC0      MVC   MESSAGE(L'MSG11),MSG11   GIVE ERROR MESSAGE
         BAL   11,WTO
         B     ABORT                    ABORT RUN
*        CONDITION CODE 1 - OPERATION EXCEPTION
CC1      LA    7,14                     PRINT CONTENTS OF REG14
         STM   5,8,REGSAVE
         BAL   9,NOTFLOAT               GO TO 'REGISTER' ROUTINE
         LR    4,10                     TEST IF INSTRUCTION IN SOME
         BAL   11,TESTLOC                    OTHER PARTITION
         B     TEST14                   SOME OTHER PARTITION
         B     MAXSW                    THIS PARTITION, RETURN
TEST14   L     4,PPREG+4*14             LOAD CONTENTS OF REG14
         BAL   11,TESTLOC               TEST FOR THIS PARTITION
         B     R14ERREX                 OTHER PARTITION
         MVC   MESSAGE(L'MSG36),MSG36   THIS PARTITION, RETURN VIA R14
         LR    10,4
         B     NEWLOC
R14ERREX MVC   MESSAGE(L'MSG37),MSG37   MONITOR CANNOT CONTINUE
         B     ABORT                    GIVE DUMP
*        CONDITION CODE 2 - PRIVILEDGE OPERATION EXCEPTION
CC2      EQU   CC1                      PROCESS SAME AS COND CODE 1
*        CONDITION CODE 3 - EXECUTE EXCEPTION
CC3      OI    OPSW+1,X'F0'
         BAL   11,OPCALC                PRINT OPERANDS
         B     MAXSW                    RETURN
*        CONDITION CODE 4 - PROTECTION EXCEPTION
CC4      EQU   CC3                      PROCESS SAME AS COND CODE 3
*        CONDITION CODE 5 - ADDRESSING EXCEPTION
CC5      EQU   CC3                      PROCESS SAME AS COND CODE 3
*        CONDITION CODE 6 - SPECIFICATION EXCEPTION
CC6      LR    4,10
         N     4,BOUNMASK               TEST FOR VALID INSTR BOUNDARY
         BZ    IBOUNDOK
         LA    10,1(10)
         MVC   MESSAGE(L'MSG13),MSG13
NEWLOC   MVC   MESSAGE+L'MSG13(L'MSG26),MSG26
         L     3,PIE                    GET PIE ADDRESS
         ST    10,OPSTORE               WILL RETURN TO THIS ADDRESS
         MVC   9(3,3),OPSTORE+1         PUT INSTR COUNTER IN PIE'S PSW
         LA    5,MESSAGE+L'MSG13+L'MSG26+1 PARAMETERS
         LA    6,3                        FOR
         LA    7,OPSTORE+1                  HEXPRINT
         BAL   11,HEXPRINT              PUT NEXT INSTR LOC IN PRINT
         BAL   11,WTO                   PRINT
         B     MAXSW                    RETURN
IBOUNDOK NI    OPSW+1,X'0F'             DATA PRINT IS DESIRED
         BAL   11,OPCALC                PRINT OPERANDS AND DATA
         TM    0(10),X'FC'              TEST FOR DECIMAL MULT/DIVIDE
         BC    14,MAXSW                 BRANCH IF NEITHER
         SR    7,7
         IC    7,1(10)                  GET BYTE CONTAINING LENGTH CODE
         LR    8,7                      PUT IN REG 7 AND 8
         N     7,HEXMASK                ISOLATE LENGTH OF 2ND OPERAND
         CH    7,=H'8'
         BL    MPDP2                    BRANCH IF NOT
         MVC   MESSAGE(L'MSG29),MSG29   ERROR
         BAL   11,WTO                   GIVE MESSAGE
MPDP2    SRA   8,4
         CR    8,7
         BH    MAXSW                    BRANCH IF YES
         MVC   MESSAGE(L'MSG30),MSG30   NO, ERROR
         BAL   11,WTO                   GIVE MESSAGE
         B     MAXSW                    RETURN
*        CONDITION CODE 7 - DATA EXCEPTION
CC7      NI    OPSW+1,X'0F'             DATA PRINT IS DESIRED
         BAL   11,OPCALC                PRINT OPERANDS AND DATA
         BAL   11,CORET
         B     MAXSW                   9RETURN
*        CONDITION CODE B - FIXED-POINT-OVERFLOW EXCEPTION
CC8      EQU   CC7                      PROCESS SAME AS COND CODE 7
*        CONDITION CODE 9 - FIXED-POINT-DIVIDE EXCEPTION
CC9      EQU   CC7                      PROCESS SAME AS COND CODE 7
*        CONDITION CODE A - DECIMAL-OVERFLOW EXCEPTION
CCA      EQU CC7                        PROCESS SAME AS COND CODE 7
*        CONDITION CODE B - DECIMAL-DIVIDE EXCEPTION
CCB      EQU   CC7                      PROCESS SAME AS COND CODE 7
*        CONDITION CODE C - EXPONENT-OVERFLOW EXCEPTION
CCC      EQU   CC7                      PROCESS SAME AS COND CODE 7
*        CONDITION CODE D - EXPONENT-UNDERFLOW EXCEPTION
CCD      EQU   CC7                      PROCESS SAME AS COND CODE 7
*        CONDITION CODE E - SIGNIFICANCE EXCEPTION
CCE      EQU   CC7                      PROCESS SAME AS COND CODE 7
*        CONDITION CODE F - FLOATING-POINT-DIVIDE EXCEPTION
CCF      EQU   CC7                      PROCESS SAME AS COND CODE 7
*
*        END-OF-ROUTINE PROCESSING
*
MAXSW    NOP   MAXIMUM                  IF SW ON, NO MORE ALLOWED
         L     3,PIE                    GET PIE ADDRESS
         MVC   20(4*3,3),PPREG          RESTORE PP REG 0-1-2 IN PIE
         MVC   12(4*2,3),PPREG+4*14     RESTORE PP REG 14-15 IN PIE
         L     13,SAVEREG+4             RESTORE USER SAVE AREA
         LM    14,12,12(13)                  AND REGISTERS
         BR    14                       RETURN
DUPLICAT MVC   MESSAGE(L'MSG32),MSG32
         BAL   11,WTO
         B     ABORT
MAXIMUM  MVC   MESSAGE(L'MSG31),MSG31
         BAL   11,WTO
ABORT    L     1,SAVPICA1               RESTORE PREVIOUS PICA
         SPIE  MF=(E,(1))
         MVC   MESSAGE(L'MSG33),MSG33   RELINQUISH CONTROL MESSAGE
         BAL   11,WTO
         LM    0,15,PPREG               RELOAD USER REGISTERS
         DC    H'0'                     CAUSE PROGRAM CHECK
*
*        ROUTINE TO DETERMINE WHETHER A CORE ADDRESS THAT IS
*              SUPPLIED IS WITHIN THE USER-S PARTITION.
*        IT ACCOMPLISHES THIS BY ISSUING THE SPIE MACRO,
*              THEN IC AND STC TO THAT CORE LOCATION.
*        REG4 TO CONTAIN THE CORE LOCATION TO BE TESTED.
*        REG11 IS RETURN.   IF THE CORE LOCATION IS OK.
*              A RETURN IS MADE TO REG11 CONTENTS + 4.
*              IF NOT OK, THE RETURN IS TO REG11 CONTENTS.
*
TESTLOC  SPIE  TSTERROR,((4,5))         SPIE FOR PROTECTION-ADDRESSING
         ST    1,SAVPICA2               SAVE PREVIOUS PICA ADDRESS
         IC    1,0(4)                   TEST FOR ERROR WHEN FETCH OR
         STC   1,0(4)                        STORE AT TEST ADDRESS
         L     1,SAVPICA2               GET ADDRESS OF PREVIOUS PICA
         SPIE  MF=(E,(1))
TSTPCHEK NOP   TSTERREX                 SWITCH WILL BE ON IF PROG CHECK
         B     4(11)                    NO PROGRAM CHECK, RETURN
TSTERROR OI    TSTPCHEK+1,X'F0'
         BR    14                       SET SWITCH AND RETURN TO O.S.
TSTERREX NI    TSTPCHEK+1,X'0F'         RESET SWITCH
         BR    11                       RETURN
*              REG5  POINTS TO PRINT AREA
*              REG6  CONTAINS LENGTH OF SOURCE FIELD
*              REG7  POINTS TO SOURCE FIELD
*              REG11 CONTAINS RETURN ADDRESS
*              IF ENTRY IS TO DHEXPRNT, SPIE WILL BE ISSUED
*                  IN CASE A PROTECTION DR ADDRESSING EXCEPTION
*                  IS CAUSED WHEN THE -IC- INSTRUCTION ATTEMPTS
*                  TO RETRIEVE A BYTE OF DATA FROM STORAGE.
DHEXPRNT ST    5,HEXSAVES               SAVE ADDRESS OF DATA PRINT AREA
         SPIE  HEXERROR,((4,5))         SPIE FOR PROTECTION-ADDRESSING
         ST    1,SAVPICA2               SAVE PREVIOUS PICA ADDRESS
         NI    HEXSPIE+1,X'0F'
HEXPRINT STM   8,10,HEXSAVE             SAVE WORK REGISTERS
         SR    9,9                      CLEAR REGISTER 9
         LR    8,6                      PUT BYTE COUNT IN WORK REG
         AR    8,6                      DOUBLE FIELD LENGTH
         AR    5,8                      LAST POS. IN PRINT AREA + ONE
         AR    7,6                      LAST POS. IN SOURCE FIELD + ONE
HEXLOOP  BCTR  7,0                      GET NEXT SOURCE BYTE
         IC    9,0(7)                   PLACE IN REGISTER
HEXPCHEK NOP   HEXERREX                 SWITCH WILL BE ON IF PROG CHECK
         LR    10,9                     IN BOTH REGISTERS
         SRA   10,4                     ISOLATE 1ST HEX DIGIT
         N     9,HEXMASK                ISOLATE 2ND HEX DIGIT
         BCTR  5,0                      GET NEXT PRINT POSITION
         STC   9,0(5)                   STORE DIGIT IN PRINT AREA
         BCTR  5,0                      GET NEXT PRINT POSITION
         STC   10,0(5)                  STORE DIGIT IN PRINT AREA
         BCT   6,HEXLOOP                TEST BYTE COUNT, LOOP BACK
         BCTR  8,0                      GET PRINT FIELD LENGTH CODE
         EX    8,HEXTRAN                TRANSLATE TO PRINTABLE CHAR.
HEXEXIT  LM    8,10,HEXSAVE             RESTORE WORK REGISTERS
HEXSPIE  BR    11                       RETURN
         L     1,SAVPICA2               RESTORE PREVIOUS PICA
         SPIE  MF=(E,(1))
         OI    HEXSPIE+1,X'F0'
         BR    11                       RETURN
HEXERROR OI    HEXPCHEK+1,X'F0'
         BR    14                       SET SWITCH AND RETURN TO O.S.
HEXERREX L     5,HEXSAVES               RESTORE ADDR OF 1ST POS IN OUT
         LR    8,5                      SAVE ADDR IN REG8
HEXERRCL MVI   0(5),X'40'               CLEAR OUT DATA PRINT AREA
         LA    5,1(5)                   INCREMNET TO NEXT POS IN AREA
         C     5,=A(MESSAGE+99)
         BNH   HEXERRCL                 BRANCH IF NOT
         MVC   0(L'MSG34,8),MSG34       PUT MESSAGE IN DATA PRINT AREA
         NI    HEXPCHEK+1,X'0F'         RESET PROGRAM CHECK SWITCH
         B     HEXEXIT                  EXIT FROM HEXPRINT
HEXTRAN  TR    0(1,5),HEXTABLE
HEXSAVE  DS    3F
HEXSAVES DS    F
HEXMASK  DC    X'0000000F'
HEXTABLE DC    C'0123456789ABCDEF'
*
*        ROUTINE TO WRITE-TO-OPERATOR
*        MESSAGE TO BE PLACED IN AREA **MESSAGE**
*              REG11 TO CONTAIN RETURN ADDRESS
*
WTO      STM   9,10,WTOSAVE             SAVE WORK REGISTERS
         LA    9,MESSAGE+99             ADDR OF LAST POS IN PRINT LINE
         LA    10,104                   MAX LENGTH OF PRINT LINE + 4
WTOLOOP  CLI   0(9),X'40'               TEST FOR BLANK IN PRINT LINE
         BNE   WTOGOT                   IF NOT, INDICATES END OF SCAN
         BCTR  9,0                      DECREMENT TEST POS IN PRINT
         BCT   10,WTOLOOP               DECREMENT COUNT AND LOOP BACK
WTOGOT   STH   10,WTOLENGT              STORE LENGTH + 4 FOR WTO
         CNOP  0,4
         BAL   1,WTOSVC                 PASS PARAMETERS TO O.S.
WTOLENGT DS    H
         DC    H'0'
MESSAGE  DC    100C' '
WTOSVC   PUT   PRINTER,MESSAGE
         LM    9,10,WTOSAVE             RELOAD WORK REGISTERS
         MVI   MESSAGE,X'40'            CLEAR OUT MESSAGE AREA TO
         MVC   MESSAGE+1(99),MESSAGE         BLANKS
         BR    11                       RETURN
WTOSAVE  DS    2F
*
*        GENERALIZED OPERAND CALCULATOR
*              REG10 TO CONTAIN THE OP-CODE ADDRESS
*              REG11 TO CONTAIN THE RETURN ADDRESS
*              OPSW TO BE OFF IF PRINTING OF STORAGE OPERAND VALUES
*                   IS DESIRED, TO BE ON IF NO PRINTING IS DESIRED
*
OPCALC   STM   5,11,OPSAVE
         TM    0(10),X'C0'              TEST FOR RR FORMAT
         BNZ   OPNOTRR                  BRANCH IF NO
         SR    7,7                      PUT 2ND BYTE
         IC    7,1(10)                       IN REG7
         SRA   7,4                      ISOLATE 1ST REG NO.
         CLI   0(10),X'1C'
         BE    MRDR                     BRANCH IF YES
         CLI   0(10),X'1D'
         BNE   *+8                      BRANCH IF NO
MRDR     NI    REGSW+1,X'0F'            SET SWITCH FOR EVEN-ODD PAIR
         BAL   9,REGISTER               PRINT R1 AND ITS CONTENTS
         IC    7,1(10)                  GET BYTE CONTAINING R2
         N     7,HEXMASK                ISOLATE R2
         BAL   9,REGISTER               PRINT R2 AND ITS CONTENTS
OPRESTOR LM    5,11,OPSAVE              RELOAD WORK REGISTERS
         BR    11                       RETURN
OPNOTRR  BM    OPNOTSS                  NOT SS FORMAT EITHER
         MVI   CORLEN+1,2
         BAL   9,BD                     DETERMINE LOC OF OPERAND 1
         ST    8,OPSTORE
         ST    8,OPA1
         MVC   MESSAGE(L'MSG23),MSG23
         LA    5,MESSAGE+L'MSG23+1      PARAMETERS
         LA    6,3                        FOR
         LA    7,OPSTORE+1                  HEXPRINT
         BAL   11,HEXPRINT              PUT LOCATION OF OPERAND 1
         TM    OPSW+1,X'F0'             TEST IF OPERAND 1 DATA DESIRED
         BO    PRNTSS1                  BRANCH IF NO
         MVC   MESSAGE+L'MSG23+7(L'MSG20),MSG20
         SR    6,6
         IC    6,1(10)                  GET LENGTH CODE FOR OPERAND 1
         TM    0(10),X'20'
         BZ    *+8
         SRA   6,4                      ISOLATE OPERAND 1 LENGTH CODE
         LA    6,1(6)                   LENGTH CODE + 1 # ACTUAL LENGTH
         STC   6,OPA1L
         CH    6,=H'30'
         BNH   NOTGR301                 BRANCH IF NO
         LH    6,=H'30'
         MVC   MESSAGE+93(L'MSG25),MSG25     INDICATE MORE DATA
NOTGR301 LA    5,MESSAGE+L'MSG23+L'MSG20+8   PARAMETERS
         LR    7,8                      FOR HEXPRINT
         BAL   11,DHEXPRNT              PUT DATA IN PRINT LINE
PRNTSS1  BAL   11,WTO                   PRINT
         LA    10,2(10)                 INCREMENT TO 2ND OPERAND
         BAL   9,BD                     DETERMINE LOCATION OF OPERAND 2
         BCTR  10,0                     RESTORE REG10 TO POINT TO
         BCTR  10,0                          THE OP-CODE
         ST    8,OPSTORE
         ST    8,OPA2
         MVC   MESSAGE(L'MSG24),MSG24
         LA    5,MESSAGE+L'MSG24+1      PARAMETERS
         LA    6,3                        FOR
         LA    7,OPSTORE+1                  HEXPRINT
         BAL   11,HEXPRINT              PUT LOCATION OF OPERAND 2
         TM    OPSW+1,X'F0'             TEST IF OPERAND 2 DATA DESIRED
         BO    PRNTSS2                  BRANCH IF NO
         MVC   MESSAGE+L'MSG24+7(L'MSG20),MSG20
         SR    6,6
         IC    6,1(10)
         TM    0(10),X'20'              TEST FOR 1 OR 2 LENGTH CODES
         BZ    *+8
         N     6,HEXMASK                ISOCATE OPERAND 2 LENGTH CODE
         LA    6,1(6)                   LENGTH CODE + 1 # ACTUAL LENGTH
         STC   6,OPA2L
         CH    6,=H'30'
         BNH   NOTGR302
         LH    6,=H'30'
         MVC   MESSAGE+93(L'MSG25),MSG25    INDICATE MORE DATA
NOTGR302 LA    5,MESSAGE+L'MSG24+L'MSG20+8  PARAMETERS
         LR    7,8                             FOR HEXPRINT
         BAL   11,DHEXPRNT              PUT DATA IN PRINT LINE
PRNTSS2  BAL   11,WTO                   PRINT
         B     OPRESTOR                 RETURN
OPNOTSS  TM    0(10),X'40'
         BZ    OPNOTRX                  BRANCH IF NOT RX FORMAT
         SR    7,7                      PUT 2ND BYTE
         IC    7,1(10)                       IN REG7
         SRA   7,4                      ISOLATE REG NO.
         CLI   0(10),X'5C'              TEST IF OP-CODE IS M
         BE    MDOP                     BRANCH IF YES
         CLI   0(10),X'5D'
         BNE   *+8
MDOP     NI    REGSW+1,X'0F'            SET SWITCH FOR EVEN-DDD PAIR
         BAL   9,REGISTER               PRINT REGISTER AND ITS CONTENTS
         BAL   9,XBD                    EVALUATE THE STORAGE OPERAND
         ST    8,OPSTORE
         ST    8,OPA1
         MVC   MESSAGE(L'MSG19),MSG19
         LA    5,MESSAGE+L'MSG19+1      PARAMETERS
         LA    6,3                        FOR
         LA    7,OPSTORE+1                  HEXPRINT
         BAL   11,HEXPRINT              PUT LOCATION IN PRINT LINE
         CLI   0(10),X'41'
         BE    PRNTRX                   BRANCH IF YES
         LA    6,4
         TM    0(10),X'10'              TEST FOR FULL WORD STORAGE OPER
         BO    RXFULL                   BRANCH IF YES
         LA    6,8
         TM    0(10),X'20'              TEST FOR DOUB WORD STORAGE OPER
         BO    RXDOUB                   BRANCH IF YES
         TM    0(10),X'0E'              SAME TEST-OP-CODES CVB, CVD
         BO    RXDOUB
         LA    6,1
         CLI   0(10),X'42'              TEST FOR 1 CHAR STORAGE OPERAND
         BE    RXCHAR                   BRANCH IF YES
         CLI   0(10),X'43'              SAME TEST
         BE    RXCHAR                   BRANCH IF YES
         LA    6,2                      STORAGE OPERAND IS HALF WORD
         B     RXHALF
RXDOUB   TM    OPSTORE+3,X'04'          TEST FOR DOUBLE WORD BOUNDARY
         BO    RXBOUND                  BRANCH IF NO
RXFULL   TM    OPSTORE+3,X'02'          TEST FOR FULL WORD BOUNDARY
         BO    RXBOUND                  BRANCH IF NO
RXHALF   TM    OPSTORE+3,X'01'          TEST FOR HALF WORD BOUNDARY
         BZ    RXCHAR                   BRANCH IF YES
RXBOUND  MVC   MESSAGE+L'MSG19+7(L'MSG12),MSG12
         B     PRNTRX
RXCHAR   NOP   PRNTRX
OPSW     EQU   RXCHAR
         MVC   MESSAGE+L'MSG19+7(L'MSG20),MSG20
         LA    5,MESSAGE+L'MSG19+L'MSG20+8
         STC   6,OPA1L
         MVI   CORLEN+1,1
         LR    7,8                             FOR HEXPRINT
         BAL   11,DHEXPRNT              PUT DATA IN PRINT LINE
PRNTRX   BAL   11,WTO                   PRINT
         B     OPRESTOR                 RETURN
OPNOTRX  TM    0(10),X'10'              TEST FOR S1 FORMAT
         BZ    OPNOTS1                  BRANCH IF NOT
         TM    0(10),X'07'              FURTHER TEST FOR S1 FORMAT
         BZ    OPRSLM                   BRANCH IF LM OR STM FORMAT
         BAL   9,BD
         ST    8,OPSTORE
         MVC   MESSAGE(L'MSG19),MSG19
         LA    5,MESSAGE+L'MSG19+1      PARAMETERS
         LA    6,3                       FOR
         LA    7,OPSTORE+1                  HEXPRINT
         BAL   11,HEXPRINT              PUT STORAGE OP LOC IN PRINT
         TM    OPSW+1,X'F0'             IS DATA PRINT DESIRED
         BO    PRNTS1                   BRANCH IF NO
         MVC   MESSAGE+L'MSG19+7(L'MSG20),MSG20
         LA    5,MESSAGE+L'MSG19+L'MSG20+8   PARAMETERS
         LA    6,1
         LR    7,8                               HEXPRINT
         BAL   11,DHEXPRNT              PUT DATA IN PRINT LINE
         LA    5,MESSAGE+L'MSG19+L'MSG20+10
         B     *+8
PRNTS1   LA    5,MESSAGE+L'MSG19+7
         MVC   0(L'MSG27,5),MSG27
         LA    5,L'MSG27+1(5)
         LA    6,1                      PARAMETERS
         LA    7,1(10)                    FOR HEXPRINT
         BAL   11,HEXPRINT              PUT IMMEDIATE OPERAND IN PRINT
         BAL   11,WTO                   PRINT
         B     OPRESTOR                 RETURN
OPRSLM   BAL   9,BD                     CALCULATE LOC OF STORAGE OPER
         ST    8,OPSTORE
         TM    OPSTORE+3,X'03'          CHECK FOR FULL WORD BOUNDARY
         BZ    *+10
         MVC   MESSAGE+L'MSG19+7(L'MSG12),MSG12   NO, BOUNDARY ERROR
         MVC   MESSAGE(L'MSG19),MSG19
         LA    5,MESSAGE+L'MSG19+1      PARAMETERS
         LA    6,3                        FOR
         LA    7,OPSTORE+1                  HEXPRINT
         BAL   11,HEXPRINT              PUT LOCATION IN PRINT LINE
         BAL   11,WTO                   PRINT
         B     OPRESTOR                 RETURN
OPNOTS1  SR    7,7                      SHIFT INSTRUCTION
         IC    7,1(10)                  GET BYTE CONTAINING R1
         SRA   7,4                      ISOLATE R1
         CLI   0(10),X'8B'              DOUBLE OR SINGLE REG. SHIFT
         BNH   *+8
         NI    REGSW+1,X'0F'            SET SWITCH FOR EVEN-ODD PAIR
         BAL   9,REGISTER               PRINT REGISTER AND ITS CONTENTS
         BAL   9,BD
         N     8,OPSHIFT                ISOLATE LOW ORDER 6 BITS
         ST    8,OPSTORE
         MVC   MESSAGE(L'MSG28),MSG28
         LA    5,MESSAGE+L'MSG28+1
         LA    6,1                        FOR
         LA    7,OPSTORE+3                  HEXPRINT
         BAL   11,HEXPRINT              PUT NO. OF BITS IN PRINT LINE
         BAL   11,WTO                   PRINT
         B     OPRESTOR                 RETURN
OPSTORE  DS    F
OPSAVE  DS     7F
OPSHIFT  DC    X'0000003F'
*        CALCULATE X2+B2+D2, B2+D2,OR B1+D1
*              REG10 TO CONTAIN THE OP-CODE ADDRESS
*                        EXCEPT, FOR B2+D2 IN SS FORMAT, REG10#OPCODE+2
*              REG 9 TO CONTAIN THE RETURN ADDRESS
*              REG 8 WILL CONTAIN THE CALCULATED RESULT
*              ENTRY POINT # XBD FOR X2+B2+D2
*                          # BD  FOR B2+D2 OR B1+D1
*        BASE AND INDEX REG. WILL BE PRINTED BY TRANSFERRING
*                   TO THE 'REGISTER' ROUTINE.
XBD      ST    7,XBDSAVE                SAVE WORK REG
         ST    9,XBDRETN                SAVE RETURN ADDRESS
         SR    7,7                      ZERO REG FOR IC
         SR    8,8                      ZERO REG FOR ADDR ACCUMULATION
         IC    7,1(10)                  GET BYTE CONTAINING X2
         N     7,HEXMASK                ISOLATE X2
         BZ    XBDRESUM                 IF REGO, DO NOT ACCUMULATE
         STM   5,8,REGSAVE              SAVE 'REGISTER' WORK REGISTERS
         BAL   9,NOTFLOAT               GO TO 'REGISTER' ROUTINE
         SLA   7,2                      GET DISPLACEMENT IN PPREG TABLE
         A     8,PPREG(7)
         B     XBDRESUM                 BRANCH AROUND BD INITIALIZATION
BD       ST    7,XBDSAVE                SAVE WORK REG
         ST    9,XBDRETN
         SR    7,7                      ZERO REG FOR IC
         SR    8,8                      ZERO REG FOR ADDR ACCUMULATION
XBDRESUM IC    7,2(10)                  GET BYTE CONTAINING B1 OR B2
         SRA   7,4                      ISOLATE B1 OR B2
         BZ    ADDD1SPL                 IF REGO, DO NOT ACCUMULATE
         STM   5,8,REGSAVE              SAVE 'REGISTER' WORK REGISTERS
         BAL   9,NOTFLOAT               GO TO 'REGISTER' REDUTINE
         SLA   7,2                      GET DISPLACEMENT IN PREG TABLE
         A     8,PPREG(7)
ADDD1SPL LH    7,2(10)                  GET D1 OR D2 - DISPLACEMENT
         N     7,XBDMASK                ISOLATE D1 OR D2
         AR    8,7
         L     7,XBDSAVE                RESTORE WORK REGISTER
         L     9,XBDRETN                RESTORE RETURN ADDRESS
         BR    9                        RETURN
XBDSAVE  DS    F
XBDRETN  DS    F
XBDMASK  DC    X'00000FFF'
*        PUT REGISTER NO. AND CONTENTS IN PRINT LINE
*              REG 7 TO CONTAIN THE REGISTER NO.
*              REG 9 TO CONTAIN THE RETURN ADDRESS
*              REG10 TO CONTAIN THE OP-CODE ADDRESS
*              IF REGSW IS TURNED OFF, A TEST WILL BE MADE TO INSURE
*                  THAT THE REGISTER NO. IS EVEN
*        IF ODD, AN ERROR MESSAGE IS GIVEN
*              IF EVEN, R+1 WILL ALSO BE PRINTED
*              IF THE REG HAS ALREADY BEEN PRINTED,
*                   IT WILL NOT BE PRINTED A SECOND TIME.
REGISTER STM   5,8,REGSAVE              SAVE WORK REGISTERS
         TM    0(10),X'80'              TEST FOR FLOATING OP-CODE
         BO    NOTFLOAT
         TM    0(10),X'20'              FURTHER TEST FOR FLOATING OPER.
         BZ    NOTFLOAT                 BRANCH IF NOT
         MVC   MESSAGE(L'MSG21),MSG21
         STC   7,MESSAGE+L'MSG21-3      PUT REG NO. IN PRINT LINE
         TM    MESSAGE+L'MSG21-3,X'09'  TEST FOR VALID FLOATING REG NO.
         TR    MESSAGE+L'MSG21-3(1),HEXTABLE CONVERT TO PRINTABLE CHAR
         BZ    DETEST                   BRANCH IF VALID
         MVC   MESSAGE+L'MSG21-2(L'MSG15),MSG15
         B     REGPRINT+4
DETEST   SRA   7,1                      GET DISPLACEMENT IN FREGTABL
         LA    5,FREGTABL(7)            GET ADDRESS OF TABLE ENTRY
         TM    0(5),X'FF'               HAS THIS REG ALREADY BEEN PRNTD
         BO    REGREST                  BRANCH IF YES
         OI    0(5),X'FF'
         SLA   7,5                      GET REG NO IN H1 4 BITS
         TM    0(10),X'20'              TEST FOR FLOATING LONG OR SHORT
         BO    DFLOAT                   BRANCH IF LONG
         EX    7,STOREE                 STORE FLOATING SHORT
         LA    6,4                      INDICATE 4 BYTE LENGTH
         B     GOFLOAT
DFLOAT   EX    7,STORED                 STORE FLOATING LONG
         LA    6,8                      INDICATE 8 BYTE LENGTH
GOFLOAT  LA    5,MESSAGE+L'MSG21+1      PARAMETERS
         LA    7,FLSTORE                  FOR HEXPRINT
REGPRINT BAL   11,HEXPRINT              PUT REG CONTENTS IN PRINT LINE
         BAL   11,WTO                   PRINT
REGREST  MVI   MESSAGE,X'40'            CLEAR PRINT AREA IN CASE
         MVC   MESSAGE+1(99),MESSAGE         MESSAGE WAS STARTED
         LM    5,8,REGSAVE              RELOAD WORK REGISTERS
         BR    9                        RETURN
STORED   STD   0,FLSTORE
STOREE   STE   0,FLSTORE
FLSTORE  DS    D
NOTFLOAT MVC   MESSAGE(L'MSG22),MSG22
         STC   7,MESSAGE+L'MSG22-3      PUT REG NO- IN PRINT LINE
         TR    MESSAGE+L'MSG22-3(1),HEXTABLE
REGSW    B     REGSWOFF                 BRANCH AROUND TEST
         OI    REGSW+1,X'F0'
         TM    MESSAGE+L'MSG22-3,X'01'  TEST FOR ODD OR EVEN REG NO.
         BZ    R1EVEN                   BRANCH IF EVEN
         MVC   MESSAGE+L'MSG22+9(L'MSG14),MSG14   ODD, GIVE ERR MESSAGE
         B     REGSWOFF
R1EVEN   LR    8,7                      SAVE REGISTER NO.
         LA    5,REGTABL(7)             GET ADDRESS OF TABLE ENTRY
         TM    0(5),X'FF'               HAS THIS REG ALREADY BEEN PRNTD
         BO    R1PLUS1                  BRANCH IF YES
         OI    0(5),X'FF'
         SLA   7,2                      GET DISPLACEMENT IN TABLE
         LA    7,PPREG(7)               PARAMETERS
         LA    6,4                        FOR
         LA    5,MESSAGE+L'MSG22+1          HEXPRINT
         BAL   11,HEXPRINT              PUT REG CONTENTS IN PRINT LINE
         BAL   11,WTO                   PRINT
R1PLUS1  LA    7,1(8)                   CALCULATE R+1
         B     NOTFLOAT                 GO BACK TO PRINT R+1 AND CONT.
REGSWOFF LA    5,REGTABL(7)             GET ADDRESS OF TABLE ENTRY
         TM    0(5),X'FF'               HAS THIS REG ALREADY BEEN PRNTD
         BO    REGREST
         OI    0(5),X'FF'
         SLA   7,2
         LA    7,PPREG(7)               PARAMETERS
         LA    6,4                        FOR
         LA    5,MESSAGE+L'MSG22+1          HEXPRINT
         B     REGPRINT                 GO TO HEX CONVERSION + PRINT
         SPACE 4
GOONX    EQU   *
         L     6,COUNTX
         S     6,=F'1'
         ST    6,COUNTX
         B     GOON
         OI    MAXSW+1,X'F0'
         B     GOON
COUNTX   DC    F'20'  MAXIMUM DUPLICATES
CORET    EQU   *
         L     6,PIE
         TM    7(6),X'07'
         BCR   14,11
         XR    6,6
CORET2   EQU   *
CORLEN   EQU   CORET2+2
         LA    7,2
         IC    6,OPA1L
         L     8,OPA1
CORET00  AR    8,6
         BCTR  8,0
         CLI   0(8),X'0C'
         BE    COROK
         CLI   0(8),X'0F'
         BE    COROK
         CLI   0(8),X'0D'
         BE    COROK
         CLI   0(8),X'0B'
         BE    COROK
         TM    0(8),X'06'
         BNO   NOTOK
         OI    0(8),X'0D'
         B     COROK
NOTOK    EQU   *
         OI    0(8),X'0C'
COROK    EQU   *
         B     CORET20
CORET10  TM    0(8),8
         BZ    CORET20
         TM    0(8),6
         BZ    CORET20
         NI    0(8),X'F0'
CORET20  TM    0(8),128
         BZ    CORET30
         TM    0(8),96
         BZ    CORET30
         NI    0(8),X'0F'
CORET30  BCTR  8,0
         BCT   6,CORET10
         IC    6,OPA2L
         L     8,OPA2
         BCT   7,CORET00
         L     6,PIE
         ST    10,8(6)
         BR    11
         SPACE 4
SNAPDCB  DCB   DSORG=PS,MACRF=(W),RECFM=VBA,BLKSIZE=882,LRECL=125,     C
               DDNAME=SNAPDUMP
         SPACE 4
PRINTER  DCB   DDNAME=ERRLIST,DSORG=PS,MACRF=PM,RECFM=FB,LRECL=100,    C
               BLKSIZE=100
REGSAVE  DS    4F
OPA1     DS    F
OPA2     DS    F
OPA1L    DS    C
OPA2L    DS    C
*
*        MESSAGE LIST
*
MSG11    DC    C'NO SUCH INTERRUPT CODE'
MSG12    DC    C', BOUNDARY ERROR'
MSG13    DC    C'INSTR BOUNDARY ERROR'
MSG14    DC    C', ODD REG NO. INVALID'
MSG15    DC    C', INVALID REG NO.'
MSG16    DC    C'INSTRUCTION IMAGE #'
MSG17    DC    C'PROGRAM CHECK AT HEX LOCATION 000000-INTERRUPT CODE 0'
MSG18    DC    C'- IMPRECISE INTERRUPT '
MSG19    DC    C'STORAGE OPERAND, LOC #'
MSG20    DC    C', DATA #'
MSG21    DC    C'FLOATREG 0 #'
MSG22    DC    C'REG 0 #'
MSG23    DC    C'OPERAND 1, LOC #'
MSG24    DC    C'OPERAND 2, LOC #'
MSG25    DC    C'ETC.'
MSG26    DC    C', CONTINUING AT HEX LOCATION'
MSG27    DC    C', IMMED OPERAND #'
MSG28    DC    C'HEX NO. OF BITS SHIFTED #'
MSG29    DC    C'MULT/DIV GRTR THAN 15 DIGITS'
MSG30    DC    C'1ST OPERAND LENGTH NOT GRTR THAN 2ND'
MSG31    DC    C'NO MORE PROG CHECKS ALLOWED'
MSG32    DC    C'DUPLICATE LOCATION'
MSG33    DC    C'MONITOR CONTROL RELINQUISHED'
MSG34    DC    C'CANNOT RETRIEVE DATA'
MSG35    DC    C'INSTR NOT ADDRESSABLE'
MSG36    DC    C'RETURNING VIA REG 14'
MSG37    DC    C'UNABLE TO CONTINUE'
*
*        LITERAL POOL
*
         LTORG
         END   ENTRY
